"use strict";

// Capture the output of this into a variable, if you want
(function(FUNCTION_TABLE_OFFSET) {
  var Module = {};
  var args = [];
  Module.arguments = [];

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime essentials
//========================================

var __globalConstructor__ = function globalConstructor() {
}

// === Body ===



var $0___SIZE = 80; // %0
  
var $1___SIZE = 16; // %1
  
var $2___SIZE = 100; // %2
  
var $3___SIZE = 20; // %3
  
var $4___SIZE = 196; // %4
  
var $5___SIZE = 32; // %5
  
var $struct_FILE___SIZE = 148; // %struct.FILE
  var $struct_FILE___FLATTENER = [0,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64,68,70,71,72,76,84,88,92,96,100,104,108];
var $struct_PyBufferProcs___SIZE = 24; // %struct.PyBufferProcs
  
var $struct_PyGetSetDef___SIZE = 20; // %struct.PyGetSetDef
  
var $struct_PyMappingMethods___SIZE = 12; // %struct.PyMappingMethods
  
var $struct_PyMemberDef___SIZE = 20; // %struct.PyMemberDef
  
var $struct_PyMethodDef___SIZE = 16; // %struct.PyMethodDef
  
var $struct_PyNumberMethods___SIZE = 156; // %struct.PyNumberMethods
  
var $struct_PyObject___SIZE = 8; // %struct.PyObject
  
var $struct_PySequenceMethods___SIZE = 40; // %struct.PySequenceMethods
  
var $struct_Py_buffer___SIZE = 52; // %struct.Py_buffer
  var $struct_Py_buffer___FLATTENER = [0,4,8,12,16,20,24,28,32,36,40,48];
var $struct_SHAobject___SIZE = 108; // %struct.SHAobject
  var $struct_SHAobject___FLATTENER = [0,4,8,28,32,36,100,104];
var $struct__IO_marker___SIZE = 12; // %struct._IO_marker
  
var $struct__typeobject___SIZE = 196; // %struct._typeobject
  
var _SHA_copy__doc__;
var _SHA_digest__doc__;
var _SHA_hexdigest__doc__;
var _SHA_update__doc__;
var __str;
var __Py_NoneStruct;
var __str1;
var __str2;
var __str3;
var __str4;
var _SHA_methods;
var __str5;
var __str6;
var __str7;
var __str8;
var __str9;
var _SHA_getseters;
var __str10;
var _SHAtype;
var _SHA_new__doc__;
var __str11;
var _kwlist_9310;
var __str12;
var __str13;
var _SHA_functions;
var _PyType_Type;
var __str14;
var __str15;



















  function _longReverse($buffer, $byteCount, $Endianness) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $buffer_addr=__stackBase__;
        var $byteCount_addr=__stackBase__+4;
        var $Endianness_addr=__stackBase__+8;
        var $value=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$buffer_addr]=$buffer;
        HEAP[$byteCount_addr]=$byteCount;
        HEAP[$Endianness_addr]=$Endianness;
        var $0=HEAP[$Endianness_addr]; //@line 62 "shamodule.c"
        var $1=((($0))|0)==0; //@line 62 "shamodule.c"
        if ($1) { __label__ = 4; break; } else { __label__ = 1; break; } //@line 62 "shamodule.c"
      case 1: // $bb
        var $2=HEAP[$byteCount_addr]; //@line 65 "shamodule.c"
        var $3=Math.floor(((($2))>>>0)/4); //@line 65 "shamodule.c"
        HEAP[$byteCount_addr]=$3; //@line 65 "shamodule.c"
        __label__ = 3; break; //@line 65 "shamodule.c"
      case 2: // $bb1
        var $4=HEAP[$buffer_addr]; //@line 67 "shamodule.c"
        var $5=HEAP[$4]; //@line 67 "shamodule.c"
        HEAP[$value]=$5; //@line 67 "shamodule.c"
        var $6=HEAP[$value]; //@line 68 "shamodule.c"
        var $7=($6) & -16711936; //@line 68 "shamodule.c"
        var $8=((($7))>>>0) >>> 8; //@line 68 "shamodule.c"
        var $9=HEAP[$value]; //@line 68 "shamodule.c"
        var $10=($9) & 16711935; //@line 68 "shamodule.c"
        var $11=($10) << 8; //@line 68 "shamodule.c"
        var $12=($8) | ($11); //@line 68 "shamodule.c"
        HEAP[$value]=$12; //@line 68 "shamodule.c"
        var $13=HEAP[$value]; //@line 70 "shamodule.c"
        var $14=((($13))>>>0) >>> 16; //@line 70 "shamodule.c"
        var $15=($13) << 16; //@line 70 "shamodule.c"
        var $16=($14) | ($15); //@line 70 "shamodule.c"
        var $17=HEAP[$buffer_addr]; //@line 70 "shamodule.c"
        HEAP[$17]=$16; //@line 70 "shamodule.c"
        var $18=HEAP[$buffer_addr]; //@line 70 "shamodule.c"
        var $19=(($18+4)&4294967295); //@line 70 "shamodule.c"
        HEAP[$buffer_addr]=$19; //@line 70 "shamodule.c"
        __label__ = 3; break; //@line 70 "shamodule.c"
      case 3: // $bb2
        var $20=HEAP[$byteCount_addr]; //@line 66 "shamodule.c"
        var $21=((($20) - 1)&4294967295); //@line 66 "shamodule.c"
        HEAP[$byteCount_addr]=$21; //@line 66 "shamodule.c"
        var $22=HEAP[$byteCount_addr]; //@line 66 "shamodule.c"
        var $23=((($22))|0)!=-1; //@line 66 "shamodule.c"
        if ($23) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 66 "shamodule.c"
      case 4: // $bb3
        __label__ = 5; break; //@line 63 "shamodule.c"
      case 5: // $return
        STACKTOP = __stackBase__;
        return; //@line 63 "shamodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _SHAcopy($src, $dest) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $src_addr=__stackBase__;
        var $dest_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$src_addr]=$src;
        HEAP[$dest_addr]=$dest;
        var $0=HEAP[$src_addr]; //@line 76 "shamodule.c"
        var $1=(($0+100)&4294967295); //@line 76 "shamodule.c"
        var $2=HEAP[$1]; //@line 76 "shamodule.c"
        var $3=HEAP[$dest_addr]; //@line 76 "shamodule.c"
        var $4=(($3+100)&4294967295); //@line 76 "shamodule.c"
        HEAP[$4]=$2; //@line 76 "shamodule.c"
        var $5=HEAP[$src_addr]; //@line 77 "shamodule.c"
        var $6=(($5+104)&4294967295); //@line 77 "shamodule.c"
        var $7=HEAP[$6]; //@line 77 "shamodule.c"
        var $8=HEAP[$dest_addr]; //@line 77 "shamodule.c"
        var $9=(($8+104)&4294967295); //@line 77 "shamodule.c"
        HEAP[$9]=$7; //@line 77 "shamodule.c"
        var $10=HEAP[$src_addr]; //@line 78 "shamodule.c"
        var $11=(($10+28)&4294967295); //@line 78 "shamodule.c"
        var $12=HEAP[$11]; //@line 78 "shamodule.c"
        var $13=HEAP[$dest_addr]; //@line 78 "shamodule.c"
        var $14=(($13+28)&4294967295); //@line 78 "shamodule.c"
        HEAP[$14]=$12; //@line 78 "shamodule.c"
        var $15=HEAP[$src_addr]; //@line 79 "shamodule.c"
        var $16=(($15+32)&4294967295); //@line 79 "shamodule.c"
        var $17=HEAP[$16]; //@line 79 "shamodule.c"
        var $18=HEAP[$dest_addr]; //@line 79 "shamodule.c"
        var $19=(($18+32)&4294967295); //@line 79 "shamodule.c"
        HEAP[$19]=$17; //@line 79 "shamodule.c"
        var $20=HEAP[$src_addr]; //@line 80 "shamodule.c"
        var $21=(($20+8)&4294967295); //@line 80 "shamodule.c"
        var $22=(($21)&4294967295); //@line 80 "shamodule.c"
        var $23=HEAP[$dest_addr]; //@line 80 "shamodule.c"
        var $24=(($23+8)&4294967295); //@line 80 "shamodule.c"
        var $25=(($24)&4294967295); //@line 80 "shamodule.c"
        var $26=$25; //@line 80 "shamodule.c"
        var $27=$22; //@line 80 "shamodule.c"
        _llvm_memcpy_p0i8_p0i8_i32($26, $27, 20, 1, 0); //@line 80 "shamodule.c"
        var $28=HEAP[$src_addr]; //@line 81 "shamodule.c"
        var $29=(($28+36)&4294967295); //@line 81 "shamodule.c"
        var $30=(($29)&4294967295); //@line 81 "shamodule.c"
        var $31=HEAP[$dest_addr]; //@line 81 "shamodule.c"
        var $32=(($31+36)&4294967295); //@line 81 "shamodule.c"
        var $33=(($32)&4294967295); //@line 81 "shamodule.c"
        _llvm_memcpy_p0i8_p0i8_i32($33, $30, 64, 1, 0); //@line 81 "shamodule.c"
        __label__ = 1; break; //@line 82 "shamodule.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 82 "shamodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _sha_transform($sha_info) {
    var __stackBase__  = STACKTOP; STACKTOP += 356; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 356);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $sha_info_addr=__stackBase__;
        var $i=__stackBase__+4;
        var $T=__stackBase__+8;
        var $A=__stackBase__+12;
        var $B=__stackBase__+16;
        var $C=__stackBase__+20;
        var $D=__stackBase__+24;
        var $E=__stackBase__+28;
        var $W=__stackBase__+32;
        var $WP=__stackBase__+352;
        var $_alloca_point_=0;
        HEAP[$sha_info_addr]=$sha_info;
        var $0=HEAP[$sha_info_addr]; //@line 166 "shamodule.c"
        var $1=(($0+36)&4294967295); //@line 166 "shamodule.c"
        var $2=(($1)&4294967295); //@line 166 "shamodule.c"
        var $W1=$W; //@line 166 "shamodule.c"
        var $W12=$W1; //@line 166 "shamodule.c"
        _llvm_memcpy_p0i8_p0i8_i32($W12, $2, 64, 1, 0); //@line 166 "shamodule.c"
        var $3=HEAP[$sha_info_addr]; //@line 167 "shamodule.c"
        var $4=(($3+100)&4294967295); //@line 167 "shamodule.c"
        var $5=HEAP[$4]; //@line 167 "shamodule.c"
        var $W3=$W; //@line 167 "shamodule.c"
        _longReverse($W3, 64, $5); //@line 167 "shamodule.c"
        HEAP[$i]=16; //@line 169 "shamodule.c"
        __label__ = 2; break; //@line 169 "shamodule.c"
      case 1: // $bb
        var $6=HEAP[$i]; //@line 170 "shamodule.c"
        var $7=HEAP[$i]; //@line 170 "shamodule.c"
        var $8=((($7) - 3)&4294967295); //@line 170 "shamodule.c"
        var $9=(($W+$8*4)&4294967295); //@line 170 "shamodule.c"
        var $10=HEAP[$9]; //@line 170 "shamodule.c"
        var $11=HEAP[$i]; //@line 170 "shamodule.c"
        var $12=((($11) - 8)&4294967295); //@line 170 "shamodule.c"
        var $13=(($W+$12*4)&4294967295); //@line 170 "shamodule.c"
        var $14=HEAP[$13]; //@line 170 "shamodule.c"
        var $15=($10) ^ ($14); //@line 170 "shamodule.c"
        var $16=HEAP[$i]; //@line 170 "shamodule.c"
        var $17=((($16) - 14)&4294967295); //@line 170 "shamodule.c"
        var $18=(($W+$17*4)&4294967295); //@line 170 "shamodule.c"
        var $19=HEAP[$18]; //@line 170 "shamodule.c"
        var $20=($15) ^ ($19); //@line 170 "shamodule.c"
        var $21=HEAP[$i]; //@line 170 "shamodule.c"
        var $22=((($21) - 16)&4294967295); //@line 170 "shamodule.c"
        var $23=(($W+$22*4)&4294967295); //@line 170 "shamodule.c"
        var $24=HEAP[$23]; //@line 170 "shamodule.c"
        var $25=($20) ^ ($24); //@line 170 "shamodule.c"
        var $26=(($W+$6*4)&4294967295); //@line 170 "shamodule.c"
        HEAP[$26]=$25; //@line 170 "shamodule.c"
        var $27=HEAP[$i]; //@line 173 "shamodule.c"
        var $28=HEAP[$i]; //@line 173 "shamodule.c"
        var $29=(($W+$28*4)&4294967295); //@line 173 "shamodule.c"
        var $30=HEAP[$29]; //@line 173 "shamodule.c"
        var $31=((($30))>>>0) >>> 31; //@line 173 "shamodule.c"
        var $32=($30) << 1; //@line 173 "shamodule.c"
        var $33=($31) | ($32); //@line 173 "shamodule.c"
        var $34=(($W+$27*4)&4294967295); //@line 173 "shamodule.c"
        HEAP[$34]=$33; //@line 173 "shamodule.c"
        var $35=HEAP[$i]; //@line 169 "shamodule.c"
        var $36=((($35) + 1)&4294967295); //@line 169 "shamodule.c"
        HEAP[$i]=$36; //@line 169 "shamodule.c"
        __label__ = 2; break; //@line 169 "shamodule.c"
      case 2: // $bb4
        var $37=HEAP[$i]; //@line 169 "shamodule.c"
        var $38=((($37))|0) <= 79; //@line 169 "shamodule.c"
        if ($38) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 169 "shamodule.c"
      case 3: // $bb5
        var $39=HEAP[$sha_info_addr]; //@line 175 "shamodule.c"
        var $40=(($39+8)&4294967295); //@line 175 "shamodule.c"
        var $41=(($40)&4294967295); //@line 175 "shamodule.c"
        var $42=HEAP[$41]; //@line 175 "shamodule.c"
        HEAP[$A]=$42; //@line 175 "shamodule.c"
        var $43=HEAP[$sha_info_addr]; //@line 176 "shamodule.c"
        var $44=(($43+8)&4294967295); //@line 176 "shamodule.c"
        var $45=(($44+4)&4294967295); //@line 176 "shamodule.c"
        var $46=HEAP[$45]; //@line 176 "shamodule.c"
        HEAP[$B]=$46; //@line 176 "shamodule.c"
        var $47=HEAP[$sha_info_addr]; //@line 177 "shamodule.c"
        var $48=(($47+8)&4294967295); //@line 177 "shamodule.c"
        var $49=(($48+8)&4294967295); //@line 177 "shamodule.c"
        var $50=HEAP[$49]; //@line 177 "shamodule.c"
        HEAP[$C]=$50; //@line 177 "shamodule.c"
        var $51=HEAP[$sha_info_addr]; //@line 178 "shamodule.c"
        var $52=(($51+8)&4294967295); //@line 178 "shamodule.c"
        var $53=(($52+12)&4294967295); //@line 178 "shamodule.c"
        var $54=HEAP[$53]; //@line 178 "shamodule.c"
        HEAP[$D]=$54; //@line 178 "shamodule.c"
        var $55=HEAP[$sha_info_addr]; //@line 179 "shamodule.c"
        var $56=(($55+8)&4294967295); //@line 179 "shamodule.c"
        var $57=(($56+16)&4294967295); //@line 179 "shamodule.c"
        var $58=HEAP[$57]; //@line 179 "shamodule.c"
        HEAP[$E]=$58; //@line 179 "shamodule.c"
        var $W6=$W; //@line 180 "shamodule.c"
        HEAP[$WP]=$W6; //@line 180 "shamodule.c"
        var $59=HEAP[$A]; //@line 182 "shamodule.c"
        var $60=((($59))>>>0) >>> 27; //@line 182 "shamodule.c"
        var $61=($59) << 5; //@line 182 "shamodule.c"
        var $62=($60) | ($61); //@line 182 "shamodule.c"
        var $63=HEAP[$C]; //@line 182 "shamodule.c"
        var $64=HEAP[$D]; //@line 182 "shamodule.c"
        var $65=($63) ^ ($64); //@line 182 "shamodule.c"
        var $66=HEAP[$B]; //@line 182 "shamodule.c"
        var $67=($65) & ($66); //@line 182 "shamodule.c"
        var $68=HEAP[$D]; //@line 182 "shamodule.c"
        var $69=($67) ^ ($68); //@line 182 "shamodule.c"
        var $70=((($62) + ($69))&4294967295); //@line 182 "shamodule.c"
        var $71=HEAP[$E]; //@line 182 "shamodule.c"
        var $72=((($70) + ($71))&4294967295); //@line 182 "shamodule.c"
        var $73=HEAP[$WP]; //@line 182 "shamodule.c"
        var $74=HEAP[$73]; //@line 182 "shamodule.c"
        var $75=((($72) + ($74))&4294967295); //@line 182 "shamodule.c"
        var $76=((($75) + 1518500249)&4294967295); //@line 182 "shamodule.c"
        HEAP[$T]=$76; //@line 182 "shamodule.c"
        var $77=HEAP[$WP]; //@line 182 "shamodule.c"
        var $78=(($77+4)&4294967295); //@line 182 "shamodule.c"
        HEAP[$WP]=$78; //@line 182 "shamodule.c"
        var $79=HEAP[$B]; //@line 182 "shamodule.c"
        var $80=((($79))>>>0) >>> 2; //@line 182 "shamodule.c"
        var $81=($79) << 30; //@line 182 "shamodule.c"
        var $82=($80) | ($81); //@line 182 "shamodule.c"
        HEAP[$B]=$82; //@line 182 "shamodule.c"
        var $83=HEAP[$T]; //@line 182 "shamodule.c"
        var $84=((($83))>>>0) >>> 27; //@line 182 "shamodule.c"
        var $85=($83) << 5; //@line 182 "shamodule.c"
        var $86=($84) | ($85); //@line 182 "shamodule.c"
        var $87=HEAP[$B]; //@line 182 "shamodule.c"
        var $88=HEAP[$C]; //@line 182 "shamodule.c"
        var $89=($87) ^ ($88); //@line 182 "shamodule.c"
        var $90=HEAP[$A]; //@line 182 "shamodule.c"
        var $91=($89) & ($90); //@line 182 "shamodule.c"
        var $92=HEAP[$C]; //@line 182 "shamodule.c"
        var $93=($91) ^ ($92); //@line 182 "shamodule.c"
        var $94=((($86) + ($93))&4294967295); //@line 182 "shamodule.c"
        var $95=HEAP[$D]; //@line 182 "shamodule.c"
        var $96=((($94) + ($95))&4294967295); //@line 182 "shamodule.c"
        var $97=HEAP[$WP]; //@line 182 "shamodule.c"
        var $98=HEAP[$97]; //@line 182 "shamodule.c"
        var $99=((($96) + ($98))&4294967295); //@line 182 "shamodule.c"
        var $100=((($99) + 1518500249)&4294967295); //@line 182 "shamodule.c"
        HEAP[$E]=$100; //@line 182 "shamodule.c"
        var $101=HEAP[$WP]; //@line 182 "shamodule.c"
        var $102=(($101+4)&4294967295); //@line 182 "shamodule.c"
        HEAP[$WP]=$102; //@line 182 "shamodule.c"
        var $103=HEAP[$A]; //@line 182 "shamodule.c"
        var $104=((($103))>>>0) >>> 2; //@line 182 "shamodule.c"
        var $105=($103) << 30; //@line 182 "shamodule.c"
        var $106=($104) | ($105); //@line 182 "shamodule.c"
        HEAP[$A]=$106; //@line 182 "shamodule.c"
        var $107=HEAP[$E]; //@line 182 "shamodule.c"
        var $108=((($107))>>>0) >>> 27; //@line 182 "shamodule.c"
        var $109=($107) << 5; //@line 182 "shamodule.c"
        var $110=($108) | ($109); //@line 182 "shamodule.c"
        var $111=HEAP[$A]; //@line 182 "shamodule.c"
        var $112=HEAP[$B]; //@line 182 "shamodule.c"
        var $113=($111) ^ ($112); //@line 182 "shamodule.c"
        var $114=HEAP[$T]; //@line 182 "shamodule.c"
        var $115=($113) & ($114); //@line 182 "shamodule.c"
        var $116=HEAP[$B]; //@line 182 "shamodule.c"
        var $117=($115) ^ ($116); //@line 182 "shamodule.c"
        var $118=((($110) + ($117))&4294967295); //@line 182 "shamodule.c"
        var $119=HEAP[$C]; //@line 182 "shamodule.c"
        var $120=((($118) + ($119))&4294967295); //@line 182 "shamodule.c"
        var $121=HEAP[$WP]; //@line 182 "shamodule.c"
        var $122=HEAP[$121]; //@line 182 "shamodule.c"
        var $123=((($120) + ($122))&4294967295); //@line 182 "shamodule.c"
        var $124=((($123) + 1518500249)&4294967295); //@line 182 "shamodule.c"
        HEAP[$D]=$124; //@line 182 "shamodule.c"
        var $125=HEAP[$WP]; //@line 182 "shamodule.c"
        var $126=(($125+4)&4294967295); //@line 182 "shamodule.c"
        HEAP[$WP]=$126; //@line 182 "shamodule.c"
        var $127=HEAP[$T]; //@line 182 "shamodule.c"
        var $128=((($127))>>>0) >>> 2; //@line 182 "shamodule.c"
        var $129=($127) << 30; //@line 182 "shamodule.c"
        var $130=($128) | ($129); //@line 182 "shamodule.c"
        HEAP[$T]=$130; //@line 182 "shamodule.c"
        var $131=HEAP[$D]; //@line 182 "shamodule.c"
        var $132=((($131))>>>0) >>> 27; //@line 182 "shamodule.c"
        var $133=($131) << 5; //@line 182 "shamodule.c"
        var $134=($132) | ($133); //@line 182 "shamodule.c"
        var $135=HEAP[$T]; //@line 182 "shamodule.c"
        var $136=HEAP[$A]; //@line 182 "shamodule.c"
        var $137=($135) ^ ($136); //@line 182 "shamodule.c"
        var $138=HEAP[$E]; //@line 182 "shamodule.c"
        var $139=($137) & ($138); //@line 182 "shamodule.c"
        var $140=HEAP[$A]; //@line 182 "shamodule.c"
        var $141=($139) ^ ($140); //@line 182 "shamodule.c"
        var $142=((($134) + ($141))&4294967295); //@line 182 "shamodule.c"
        var $143=HEAP[$B]; //@line 182 "shamodule.c"
        var $144=((($142) + ($143))&4294967295); //@line 182 "shamodule.c"
        var $145=HEAP[$WP]; //@line 182 "shamodule.c"
        var $146=HEAP[$145]; //@line 182 "shamodule.c"
        var $147=((($144) + ($146))&4294967295); //@line 182 "shamodule.c"
        var $148=((($147) + 1518500249)&4294967295); //@line 182 "shamodule.c"
        HEAP[$C]=$148; //@line 182 "shamodule.c"
        var $149=HEAP[$WP]; //@line 182 "shamodule.c"
        var $150=(($149+4)&4294967295); //@line 182 "shamodule.c"
        HEAP[$WP]=$150; //@line 182 "shamodule.c"
        var $151=HEAP[$E]; //@line 182 "shamodule.c"
        var $152=((($151))>>>0) >>> 2; //@line 182 "shamodule.c"
        var $153=($151) << 30; //@line 182 "shamodule.c"
        var $154=($152) | ($153); //@line 182 "shamodule.c"
        HEAP[$E]=$154; //@line 182 "shamodule.c"
        var $155=HEAP[$C]; //@line 182 "shamodule.c"
        var $156=((($155))>>>0) >>> 27; //@line 182 "shamodule.c"
        var $157=($155) << 5; //@line 182 "shamodule.c"
        var $158=($156) | ($157); //@line 182 "shamodule.c"
        var $159=HEAP[$E]; //@line 182 "shamodule.c"
        var $160=HEAP[$T]; //@line 182 "shamodule.c"
        var $161=($159) ^ ($160); //@line 182 "shamodule.c"
        var $162=HEAP[$D]; //@line 182 "shamodule.c"
        var $163=($161) & ($162); //@line 182 "shamodule.c"
        var $164=HEAP[$T]; //@line 182 "shamodule.c"
        var $165=($163) ^ ($164); //@line 182 "shamodule.c"
        var $166=((($158) + ($165))&4294967295); //@line 182 "shamodule.c"
        var $167=HEAP[$A]; //@line 182 "shamodule.c"
        var $168=((($166) + ($167))&4294967295); //@line 182 "shamodule.c"
        var $169=HEAP[$WP]; //@line 182 "shamodule.c"
        var $170=HEAP[$169]; //@line 182 "shamodule.c"
        var $171=((($168) + ($170))&4294967295); //@line 182 "shamodule.c"
        var $172=((($171) + 1518500249)&4294967295); //@line 182 "shamodule.c"
        HEAP[$B]=$172; //@line 182 "shamodule.c"
        var $173=HEAP[$WP]; //@line 182 "shamodule.c"
        var $174=(($173+4)&4294967295); //@line 182 "shamodule.c"
        HEAP[$WP]=$174; //@line 182 "shamodule.c"
        var $175=HEAP[$D]; //@line 182 "shamodule.c"
        var $176=((($175))>>>0) >>> 2; //@line 182 "shamodule.c"
        var $177=($175) << 30; //@line 182 "shamodule.c"
        var $178=($176) | ($177); //@line 182 "shamodule.c"
        HEAP[$D]=$178; //@line 182 "shamodule.c"
        var $179=HEAP[$B]; //@line 182 "shamodule.c"
        var $180=((($179))>>>0) >>> 27; //@line 182 "shamodule.c"
        var $181=($179) << 5; //@line 182 "shamodule.c"
        var $182=($180) | ($181); //@line 182 "shamodule.c"
        var $183=HEAP[$D]; //@line 182 "shamodule.c"
        var $184=HEAP[$E]; //@line 182 "shamodule.c"
        var $185=($183) ^ ($184); //@line 182 "shamodule.c"
        var $186=HEAP[$C]; //@line 182 "shamodule.c"
        var $187=($185) & ($186); //@line 182 "shamodule.c"
        var $188=HEAP[$E]; //@line 182 "shamodule.c"
        var $189=($187) ^ ($188); //@line 182 "shamodule.c"
        var $190=((($182) + ($189))&4294967295); //@line 182 "shamodule.c"
        var $191=HEAP[$T]; //@line 182 "shamodule.c"
        var $192=((($190) + ($191))&4294967295); //@line 182 "shamodule.c"
        var $193=HEAP[$WP]; //@line 182 "shamodule.c"
        var $194=HEAP[$193]; //@line 182 "shamodule.c"
        var $195=((($192) + ($194))&4294967295); //@line 182 "shamodule.c"
        var $196=((($195) + 1518500249)&4294967295); //@line 182 "shamodule.c"
        HEAP[$A]=$196; //@line 182 "shamodule.c"
        var $197=HEAP[$WP]; //@line 182 "shamodule.c"
        var $198=(($197+4)&4294967295); //@line 182 "shamodule.c"
        HEAP[$WP]=$198; //@line 182 "shamodule.c"
        var $199=HEAP[$C]; //@line 182 "shamodule.c"
        var $200=((($199))>>>0) >>> 2; //@line 182 "shamodule.c"
        var $201=($199) << 30; //@line 182 "shamodule.c"
        var $202=($200) | ($201); //@line 182 "shamodule.c"
        HEAP[$C]=$202; //@line 182 "shamodule.c"
        var $203=HEAP[$A]; //@line 182 "shamodule.c"
        var $204=((($203))>>>0) >>> 27; //@line 182 "shamodule.c"
        var $205=($203) << 5; //@line 182 "shamodule.c"
        var $206=($204) | ($205); //@line 182 "shamodule.c"
        var $207=HEAP[$C]; //@line 182 "shamodule.c"
        var $208=HEAP[$D]; //@line 182 "shamodule.c"
        var $209=($207) ^ ($208); //@line 182 "shamodule.c"
        var $210=HEAP[$B]; //@line 182 "shamodule.c"
        var $211=($209) & ($210); //@line 182 "shamodule.c"
        var $212=HEAP[$D]; //@line 182 "shamodule.c"
        var $213=($211) ^ ($212); //@line 182 "shamodule.c"
        var $214=((($206) + ($213))&4294967295); //@line 182 "shamodule.c"
        var $215=HEAP[$E]; //@line 182 "shamodule.c"
        var $216=((($214) + ($215))&4294967295); //@line 182 "shamodule.c"
        var $217=HEAP[$WP]; //@line 182 "shamodule.c"
        var $218=HEAP[$217]; //@line 182 "shamodule.c"
        var $219=((($216) + ($218))&4294967295); //@line 182 "shamodule.c"
        var $220=((($219) + 1518500249)&4294967295); //@line 182 "shamodule.c"
        HEAP[$T]=$220; //@line 182 "shamodule.c"
        var $221=HEAP[$WP]; //@line 182 "shamodule.c"
        var $222=(($221+4)&4294967295); //@line 182 "shamodule.c"
        HEAP[$WP]=$222; //@line 182 "shamodule.c"
        var $223=HEAP[$B]; //@line 182 "shamodule.c"
        var $224=((($223))>>>0) >>> 2; //@line 182 "shamodule.c"
        var $225=($223) << 30; //@line 182 "shamodule.c"
        var $226=($224) | ($225); //@line 182 "shamodule.c"
        HEAP[$B]=$226; //@line 182 "shamodule.c"
        var $227=HEAP[$T]; //@line 182 "shamodule.c"
        var $228=((($227))>>>0) >>> 27; //@line 182 "shamodule.c"
        var $229=($227) << 5; //@line 182 "shamodule.c"
        var $230=($228) | ($229); //@line 182 "shamodule.c"
        var $231=HEAP[$B]; //@line 182 "shamodule.c"
        var $232=HEAP[$C]; //@line 182 "shamodule.c"
        var $233=($231) ^ ($232); //@line 182 "shamodule.c"
        var $234=HEAP[$A]; //@line 182 "shamodule.c"
        var $235=($233) & ($234); //@line 182 "shamodule.c"
        var $236=HEAP[$C]; //@line 182 "shamodule.c"
        var $237=($235) ^ ($236); //@line 182 "shamodule.c"
        var $238=((($230) + ($237))&4294967295); //@line 182 "shamodule.c"
        var $239=HEAP[$D]; //@line 182 "shamodule.c"
        var $240=((($238) + ($239))&4294967295); //@line 182 "shamodule.c"
        var $241=HEAP[$WP]; //@line 182 "shamodule.c"
        var $242=HEAP[$241]; //@line 182 "shamodule.c"
        var $243=((($240) + ($242))&4294967295); //@line 182 "shamodule.c"
        var $244=((($243) + 1518500249)&4294967295); //@line 182 "shamodule.c"
        HEAP[$E]=$244; //@line 182 "shamodule.c"
        var $245=HEAP[$WP]; //@line 182 "shamodule.c"
        var $246=(($245+4)&4294967295); //@line 182 "shamodule.c"
        HEAP[$WP]=$246; //@line 182 "shamodule.c"
        var $247=HEAP[$A]; //@line 182 "shamodule.c"
        var $248=((($247))>>>0) >>> 2; //@line 182 "shamodule.c"
        var $249=($247) << 30; //@line 182 "shamodule.c"
        var $250=($248) | ($249); //@line 182 "shamodule.c"
        HEAP[$A]=$250; //@line 182 "shamodule.c"
        var $251=HEAP[$E]; //@line 182 "shamodule.c"
        var $252=((($251))>>>0) >>> 27; //@line 182 "shamodule.c"
        var $253=($251) << 5; //@line 182 "shamodule.c"
        var $254=($252) | ($253); //@line 182 "shamodule.c"
        var $255=HEAP[$A]; //@line 182 "shamodule.c"
        var $256=HEAP[$B]; //@line 182 "shamodule.c"
        var $257=($255) ^ ($256); //@line 182 "shamodule.c"
        var $258=HEAP[$T]; //@line 182 "shamodule.c"
        var $259=($257) & ($258); //@line 182 "shamodule.c"
        var $260=HEAP[$B]; //@line 182 "shamodule.c"
        var $261=($259) ^ ($260); //@line 182 "shamodule.c"
        var $262=((($254) + ($261))&4294967295); //@line 182 "shamodule.c"
        var $263=HEAP[$C]; //@line 182 "shamodule.c"
        var $264=((($262) + ($263))&4294967295); //@line 182 "shamodule.c"
        var $265=HEAP[$WP]; //@line 182 "shamodule.c"
        var $266=HEAP[$265]; //@line 182 "shamodule.c"
        var $267=((($264) + ($266))&4294967295); //@line 182 "shamodule.c"
        var $268=((($267) + 1518500249)&4294967295); //@line 182 "shamodule.c"
        HEAP[$D]=$268; //@line 182 "shamodule.c"
        var $269=HEAP[$WP]; //@line 182 "shamodule.c"
        var $270=(($269+4)&4294967295); //@line 182 "shamodule.c"
        HEAP[$WP]=$270; //@line 182 "shamodule.c"
        var $271=HEAP[$T]; //@line 182 "shamodule.c"
        var $272=((($271))>>>0) >>> 2; //@line 182 "shamodule.c"
        var $273=($271) << 30; //@line 182 "shamodule.c"
        var $274=($272) | ($273); //@line 182 "shamodule.c"
        HEAP[$T]=$274; //@line 182 "shamodule.c"
        var $275=HEAP[$D]; //@line 182 "shamodule.c"
        var $276=((($275))>>>0) >>> 27; //@line 182 "shamodule.c"
        var $277=($275) << 5; //@line 182 "shamodule.c"
        var $278=($276) | ($277); //@line 182 "shamodule.c"
        var $279=HEAP[$T]; //@line 182 "shamodule.c"
        var $280=HEAP[$A]; //@line 182 "shamodule.c"
        var $281=($279) ^ ($280); //@line 182 "shamodule.c"
        var $282=HEAP[$E]; //@line 182 "shamodule.c"
        var $283=($281) & ($282); //@line 182 "shamodule.c"
        var $284=HEAP[$A]; //@line 182 "shamodule.c"
        var $285=($283) ^ ($284); //@line 182 "shamodule.c"
        var $286=((($278) + ($285))&4294967295); //@line 182 "shamodule.c"
        var $287=HEAP[$B]; //@line 182 "shamodule.c"
        var $288=((($286) + ($287))&4294967295); //@line 182 "shamodule.c"
        var $289=HEAP[$WP]; //@line 182 "shamodule.c"
        var $290=HEAP[$289]; //@line 182 "shamodule.c"
        var $291=((($288) + ($290))&4294967295); //@line 182 "shamodule.c"
        var $292=((($291) + 1518500249)&4294967295); //@line 182 "shamodule.c"
        HEAP[$C]=$292; //@line 182 "shamodule.c"
        var $293=HEAP[$WP]; //@line 182 "shamodule.c"
        var $294=(($293+4)&4294967295); //@line 182 "shamodule.c"
        HEAP[$WP]=$294; //@line 182 "shamodule.c"
        var $295=HEAP[$E]; //@line 182 "shamodule.c"
        var $296=((($295))>>>0) >>> 2; //@line 182 "shamodule.c"
        var $297=($295) << 30; //@line 182 "shamodule.c"
        var $298=($296) | ($297); //@line 182 "shamodule.c"
        HEAP[$E]=$298; //@line 182 "shamodule.c"
        var $299=HEAP[$C]; //@line 183 "shamodule.c"
        var $300=((($299))>>>0) >>> 27; //@line 183 "shamodule.c"
        var $301=($299) << 5; //@line 183 "shamodule.c"
        var $302=($300) | ($301); //@line 183 "shamodule.c"
        var $303=HEAP[$E]; //@line 183 "shamodule.c"
        var $304=HEAP[$T]; //@line 183 "shamodule.c"
        var $305=($303) ^ ($304); //@line 183 "shamodule.c"
        var $306=HEAP[$D]; //@line 183 "shamodule.c"
        var $307=($305) & ($306); //@line 183 "shamodule.c"
        var $308=HEAP[$T]; //@line 183 "shamodule.c"
        var $309=($307) ^ ($308); //@line 183 "shamodule.c"
        var $310=((($302) + ($309))&4294967295); //@line 183 "shamodule.c"
        var $311=HEAP[$A]; //@line 183 "shamodule.c"
        var $312=((($310) + ($311))&4294967295); //@line 183 "shamodule.c"
        var $313=HEAP[$WP]; //@line 183 "shamodule.c"
        var $314=HEAP[$313]; //@line 183 "shamodule.c"
        var $315=((($312) + ($314))&4294967295); //@line 183 "shamodule.c"
        var $316=((($315) + 1518500249)&4294967295); //@line 183 "shamodule.c"
        HEAP[$B]=$316; //@line 183 "shamodule.c"
        var $317=HEAP[$WP]; //@line 183 "shamodule.c"
        var $318=(($317+4)&4294967295); //@line 183 "shamodule.c"
        HEAP[$WP]=$318; //@line 183 "shamodule.c"
        var $319=HEAP[$D]; //@line 183 "shamodule.c"
        var $320=((($319))>>>0) >>> 2; //@line 183 "shamodule.c"
        var $321=($319) << 30; //@line 183 "shamodule.c"
        var $322=($320) | ($321); //@line 183 "shamodule.c"
        HEAP[$D]=$322; //@line 183 "shamodule.c"
        var $323=HEAP[$B]; //@line 183 "shamodule.c"
        var $324=((($323))>>>0) >>> 27; //@line 183 "shamodule.c"
        var $325=($323) << 5; //@line 183 "shamodule.c"
        var $326=($324) | ($325); //@line 183 "shamodule.c"
        var $327=HEAP[$D]; //@line 183 "shamodule.c"
        var $328=HEAP[$E]; //@line 183 "shamodule.c"
        var $329=($327) ^ ($328); //@line 183 "shamodule.c"
        var $330=HEAP[$C]; //@line 183 "shamodule.c"
        var $331=($329) & ($330); //@line 183 "shamodule.c"
        var $332=HEAP[$E]; //@line 183 "shamodule.c"
        var $333=($331) ^ ($332); //@line 183 "shamodule.c"
        var $334=((($326) + ($333))&4294967295); //@line 183 "shamodule.c"
        var $335=HEAP[$T]; //@line 183 "shamodule.c"
        var $336=((($334) + ($335))&4294967295); //@line 183 "shamodule.c"
        var $337=HEAP[$WP]; //@line 183 "shamodule.c"
        var $338=HEAP[$337]; //@line 183 "shamodule.c"
        var $339=((($336) + ($338))&4294967295); //@line 183 "shamodule.c"
        var $340=((($339) + 1518500249)&4294967295); //@line 183 "shamodule.c"
        HEAP[$A]=$340; //@line 183 "shamodule.c"
        var $341=HEAP[$WP]; //@line 183 "shamodule.c"
        var $342=(($341+4)&4294967295); //@line 183 "shamodule.c"
        HEAP[$WP]=$342; //@line 183 "shamodule.c"
        var $343=HEAP[$C]; //@line 183 "shamodule.c"
        var $344=((($343))>>>0) >>> 2; //@line 183 "shamodule.c"
        var $345=($343) << 30; //@line 183 "shamodule.c"
        var $346=($344) | ($345); //@line 183 "shamodule.c"
        HEAP[$C]=$346; //@line 183 "shamodule.c"
        var $347=HEAP[$A]; //@line 183 "shamodule.c"
        var $348=((($347))>>>0) >>> 27; //@line 183 "shamodule.c"
        var $349=($347) << 5; //@line 183 "shamodule.c"
        var $350=($348) | ($349); //@line 183 "shamodule.c"
        var $351=HEAP[$C]; //@line 183 "shamodule.c"
        var $352=HEAP[$D]; //@line 183 "shamodule.c"
        var $353=($351) ^ ($352); //@line 183 "shamodule.c"
        var $354=HEAP[$B]; //@line 183 "shamodule.c"
        var $355=($353) & ($354); //@line 183 "shamodule.c"
        var $356=HEAP[$D]; //@line 183 "shamodule.c"
        var $357=($355) ^ ($356); //@line 183 "shamodule.c"
        var $358=((($350) + ($357))&4294967295); //@line 183 "shamodule.c"
        var $359=HEAP[$E]; //@line 183 "shamodule.c"
        var $360=((($358) + ($359))&4294967295); //@line 183 "shamodule.c"
        var $361=HEAP[$WP]; //@line 183 "shamodule.c"
        var $362=HEAP[$361]; //@line 183 "shamodule.c"
        var $363=((($360) + ($362))&4294967295); //@line 183 "shamodule.c"
        var $364=((($363) + 1518500249)&4294967295); //@line 183 "shamodule.c"
        HEAP[$T]=$364; //@line 183 "shamodule.c"
        var $365=HEAP[$WP]; //@line 183 "shamodule.c"
        var $366=(($365+4)&4294967295); //@line 183 "shamodule.c"
        HEAP[$WP]=$366; //@line 183 "shamodule.c"
        var $367=HEAP[$B]; //@line 183 "shamodule.c"
        var $368=((($367))>>>0) >>> 2; //@line 183 "shamodule.c"
        var $369=($367) << 30; //@line 183 "shamodule.c"
        var $370=($368) | ($369); //@line 183 "shamodule.c"
        HEAP[$B]=$370; //@line 183 "shamodule.c"
        var $371=HEAP[$T]; //@line 183 "shamodule.c"
        var $372=((($371))>>>0) >>> 27; //@line 183 "shamodule.c"
        var $373=($371) << 5; //@line 183 "shamodule.c"
        var $374=($372) | ($373); //@line 183 "shamodule.c"
        var $375=HEAP[$B]; //@line 183 "shamodule.c"
        var $376=HEAP[$C]; //@line 183 "shamodule.c"
        var $377=($375) ^ ($376); //@line 183 "shamodule.c"
        var $378=HEAP[$A]; //@line 183 "shamodule.c"
        var $379=($377) & ($378); //@line 183 "shamodule.c"
        var $380=HEAP[$C]; //@line 183 "shamodule.c"
        var $381=($379) ^ ($380); //@line 183 "shamodule.c"
        var $382=((($374) + ($381))&4294967295); //@line 183 "shamodule.c"
        var $383=HEAP[$D]; //@line 183 "shamodule.c"
        var $384=((($382) + ($383))&4294967295); //@line 183 "shamodule.c"
        var $385=HEAP[$WP]; //@line 183 "shamodule.c"
        var $386=HEAP[$385]; //@line 183 "shamodule.c"
        var $387=((($384) + ($386))&4294967295); //@line 183 "shamodule.c"
        var $388=((($387) + 1518500249)&4294967295); //@line 183 "shamodule.c"
        HEAP[$E]=$388; //@line 183 "shamodule.c"
        var $389=HEAP[$WP]; //@line 183 "shamodule.c"
        var $390=(($389+4)&4294967295); //@line 183 "shamodule.c"
        HEAP[$WP]=$390; //@line 183 "shamodule.c"
        var $391=HEAP[$A]; //@line 183 "shamodule.c"
        var $392=((($391))>>>0) >>> 2; //@line 183 "shamodule.c"
        var $393=($391) << 30; //@line 183 "shamodule.c"
        var $394=($392) | ($393); //@line 183 "shamodule.c"
        HEAP[$A]=$394; //@line 183 "shamodule.c"
        var $395=HEAP[$E]; //@line 183 "shamodule.c"
        var $396=((($395))>>>0) >>> 27; //@line 183 "shamodule.c"
        var $397=($395) << 5; //@line 183 "shamodule.c"
        var $398=($396) | ($397); //@line 183 "shamodule.c"
        var $399=HEAP[$A]; //@line 183 "shamodule.c"
        var $400=HEAP[$B]; //@line 183 "shamodule.c"
        var $401=($399) ^ ($400); //@line 183 "shamodule.c"
        var $402=HEAP[$T]; //@line 183 "shamodule.c"
        var $403=($401) & ($402); //@line 183 "shamodule.c"
        var $404=HEAP[$B]; //@line 183 "shamodule.c"
        var $405=($403) ^ ($404); //@line 183 "shamodule.c"
        var $406=((($398) + ($405))&4294967295); //@line 183 "shamodule.c"
        var $407=HEAP[$C]; //@line 183 "shamodule.c"
        var $408=((($406) + ($407))&4294967295); //@line 183 "shamodule.c"
        var $409=HEAP[$WP]; //@line 183 "shamodule.c"
        var $410=HEAP[$409]; //@line 183 "shamodule.c"
        var $411=((($408) + ($410))&4294967295); //@line 183 "shamodule.c"
        var $412=((($411) + 1518500249)&4294967295); //@line 183 "shamodule.c"
        HEAP[$D]=$412; //@line 183 "shamodule.c"
        var $413=HEAP[$WP]; //@line 183 "shamodule.c"
        var $414=(($413+4)&4294967295); //@line 183 "shamodule.c"
        HEAP[$WP]=$414; //@line 183 "shamodule.c"
        var $415=HEAP[$T]; //@line 183 "shamodule.c"
        var $416=((($415))>>>0) >>> 2; //@line 183 "shamodule.c"
        var $417=($415) << 30; //@line 183 "shamodule.c"
        var $418=($416) | ($417); //@line 183 "shamodule.c"
        HEAP[$T]=$418; //@line 183 "shamodule.c"
        var $419=HEAP[$D]; //@line 183 "shamodule.c"
        var $420=((($419))>>>0) >>> 27; //@line 183 "shamodule.c"
        var $421=($419) << 5; //@line 183 "shamodule.c"
        var $422=($420) | ($421); //@line 183 "shamodule.c"
        var $423=HEAP[$T]; //@line 183 "shamodule.c"
        var $424=HEAP[$A]; //@line 183 "shamodule.c"
        var $425=($423) ^ ($424); //@line 183 "shamodule.c"
        var $426=HEAP[$E]; //@line 183 "shamodule.c"
        var $427=($425) & ($426); //@line 183 "shamodule.c"
        var $428=HEAP[$A]; //@line 183 "shamodule.c"
        var $429=($427) ^ ($428); //@line 183 "shamodule.c"
        var $430=((($422) + ($429))&4294967295); //@line 183 "shamodule.c"
        var $431=HEAP[$B]; //@line 183 "shamodule.c"
        var $432=((($430) + ($431))&4294967295); //@line 183 "shamodule.c"
        var $433=HEAP[$WP]; //@line 183 "shamodule.c"
        var $434=HEAP[$433]; //@line 183 "shamodule.c"
        var $435=((($432) + ($434))&4294967295); //@line 183 "shamodule.c"
        var $436=((($435) + 1518500249)&4294967295); //@line 183 "shamodule.c"
        HEAP[$C]=$436; //@line 183 "shamodule.c"
        var $437=HEAP[$WP]; //@line 183 "shamodule.c"
        var $438=(($437+4)&4294967295); //@line 183 "shamodule.c"
        HEAP[$WP]=$438; //@line 183 "shamodule.c"
        var $439=HEAP[$E]; //@line 183 "shamodule.c"
        var $440=((($439))>>>0) >>> 2; //@line 183 "shamodule.c"
        var $441=($439) << 30; //@line 183 "shamodule.c"
        var $442=($440) | ($441); //@line 183 "shamodule.c"
        HEAP[$E]=$442; //@line 183 "shamodule.c"
        var $443=HEAP[$C]; //@line 183 "shamodule.c"
        var $444=((($443))>>>0) >>> 27; //@line 183 "shamodule.c"
        var $445=($443) << 5; //@line 183 "shamodule.c"
        var $446=($444) | ($445); //@line 183 "shamodule.c"
        var $447=HEAP[$E]; //@line 183 "shamodule.c"
        var $448=HEAP[$T]; //@line 183 "shamodule.c"
        var $449=($447) ^ ($448); //@line 183 "shamodule.c"
        var $450=HEAP[$D]; //@line 183 "shamodule.c"
        var $451=($449) & ($450); //@line 183 "shamodule.c"
        var $452=HEAP[$T]; //@line 183 "shamodule.c"
        var $453=($451) ^ ($452); //@line 183 "shamodule.c"
        var $454=((($446) + ($453))&4294967295); //@line 183 "shamodule.c"
        var $455=HEAP[$A]; //@line 183 "shamodule.c"
        var $456=((($454) + ($455))&4294967295); //@line 183 "shamodule.c"
        var $457=HEAP[$WP]; //@line 183 "shamodule.c"
        var $458=HEAP[$457]; //@line 183 "shamodule.c"
        var $459=((($456) + ($458))&4294967295); //@line 183 "shamodule.c"
        var $460=((($459) + 1518500249)&4294967295); //@line 183 "shamodule.c"
        HEAP[$B]=$460; //@line 183 "shamodule.c"
        var $461=HEAP[$WP]; //@line 183 "shamodule.c"
        var $462=(($461+4)&4294967295); //@line 183 "shamodule.c"
        HEAP[$WP]=$462; //@line 183 "shamodule.c"
        var $463=HEAP[$D]; //@line 183 "shamodule.c"
        var $464=((($463))>>>0) >>> 2; //@line 183 "shamodule.c"
        var $465=($463) << 30; //@line 183 "shamodule.c"
        var $466=($464) | ($465); //@line 183 "shamodule.c"
        HEAP[$D]=$466; //@line 183 "shamodule.c"
        var $467=HEAP[$B]; //@line 183 "shamodule.c"
        var $468=((($467))>>>0) >>> 27; //@line 183 "shamodule.c"
        var $469=($467) << 5; //@line 183 "shamodule.c"
        var $470=($468) | ($469); //@line 183 "shamodule.c"
        var $471=HEAP[$D]; //@line 183 "shamodule.c"
        var $472=HEAP[$E]; //@line 183 "shamodule.c"
        var $473=($471) ^ ($472); //@line 183 "shamodule.c"
        var $474=HEAP[$C]; //@line 183 "shamodule.c"
        var $475=($473) & ($474); //@line 183 "shamodule.c"
        var $476=HEAP[$E]; //@line 183 "shamodule.c"
        var $477=($475) ^ ($476); //@line 183 "shamodule.c"
        var $478=((($470) + ($477))&4294967295); //@line 183 "shamodule.c"
        var $479=HEAP[$T]; //@line 183 "shamodule.c"
        var $480=((($478) + ($479))&4294967295); //@line 183 "shamodule.c"
        var $481=HEAP[$WP]; //@line 183 "shamodule.c"
        var $482=HEAP[$481]; //@line 183 "shamodule.c"
        var $483=((($480) + ($482))&4294967295); //@line 183 "shamodule.c"
        var $484=((($483) + 1518500249)&4294967295); //@line 183 "shamodule.c"
        HEAP[$A]=$484; //@line 183 "shamodule.c"
        var $485=HEAP[$WP]; //@line 183 "shamodule.c"
        var $486=(($485+4)&4294967295); //@line 183 "shamodule.c"
        HEAP[$WP]=$486; //@line 183 "shamodule.c"
        var $487=HEAP[$C]; //@line 183 "shamodule.c"
        var $488=((($487))>>>0) >>> 2; //@line 183 "shamodule.c"
        var $489=($487) << 30; //@line 183 "shamodule.c"
        var $490=($488) | ($489); //@line 183 "shamodule.c"
        HEAP[$C]=$490; //@line 183 "shamodule.c"
        var $491=HEAP[$A]; //@line 183 "shamodule.c"
        var $492=((($491))>>>0) >>> 27; //@line 183 "shamodule.c"
        var $493=($491) << 5; //@line 183 "shamodule.c"
        var $494=($492) | ($493); //@line 183 "shamodule.c"
        var $495=HEAP[$C]; //@line 183 "shamodule.c"
        var $496=HEAP[$D]; //@line 183 "shamodule.c"
        var $497=($495) ^ ($496); //@line 183 "shamodule.c"
        var $498=HEAP[$B]; //@line 183 "shamodule.c"
        var $499=($497) & ($498); //@line 183 "shamodule.c"
        var $500=HEAP[$D]; //@line 183 "shamodule.c"
        var $501=($499) ^ ($500); //@line 183 "shamodule.c"
        var $502=((($494) + ($501))&4294967295); //@line 183 "shamodule.c"
        var $503=HEAP[$E]; //@line 183 "shamodule.c"
        var $504=((($502) + ($503))&4294967295); //@line 183 "shamodule.c"
        var $505=HEAP[$WP]; //@line 183 "shamodule.c"
        var $506=HEAP[$505]; //@line 183 "shamodule.c"
        var $507=((($504) + ($506))&4294967295); //@line 183 "shamodule.c"
        var $508=((($507) + 1518500249)&4294967295); //@line 183 "shamodule.c"
        HEAP[$T]=$508; //@line 183 "shamodule.c"
        var $509=HEAP[$WP]; //@line 183 "shamodule.c"
        var $510=(($509+4)&4294967295); //@line 183 "shamodule.c"
        HEAP[$WP]=$510; //@line 183 "shamodule.c"
        var $511=HEAP[$B]; //@line 183 "shamodule.c"
        var $512=((($511))>>>0) >>> 2; //@line 183 "shamodule.c"
        var $513=($511) << 30; //@line 183 "shamodule.c"
        var $514=($512) | ($513); //@line 183 "shamodule.c"
        HEAP[$B]=$514; //@line 183 "shamodule.c"
        var $515=HEAP[$T]; //@line 183 "shamodule.c"
        var $516=((($515))>>>0) >>> 27; //@line 183 "shamodule.c"
        var $517=($515) << 5; //@line 183 "shamodule.c"
        var $518=($516) | ($517); //@line 183 "shamodule.c"
        var $519=HEAP[$B]; //@line 183 "shamodule.c"
        var $520=HEAP[$C]; //@line 183 "shamodule.c"
        var $521=($519) ^ ($520); //@line 183 "shamodule.c"
        var $522=HEAP[$A]; //@line 183 "shamodule.c"
        var $523=($521) & ($522); //@line 183 "shamodule.c"
        var $524=HEAP[$C]; //@line 183 "shamodule.c"
        var $525=($523) ^ ($524); //@line 183 "shamodule.c"
        var $526=((($518) + ($525))&4294967295); //@line 183 "shamodule.c"
        var $527=HEAP[$D]; //@line 183 "shamodule.c"
        var $528=((($526) + ($527))&4294967295); //@line 183 "shamodule.c"
        var $529=HEAP[$WP]; //@line 183 "shamodule.c"
        var $530=HEAP[$529]; //@line 183 "shamodule.c"
        var $531=((($528) + ($530))&4294967295); //@line 183 "shamodule.c"
        var $532=((($531) + 1518500249)&4294967295); //@line 183 "shamodule.c"
        HEAP[$E]=$532; //@line 183 "shamodule.c"
        var $533=HEAP[$WP]; //@line 183 "shamodule.c"
        var $534=(($533+4)&4294967295); //@line 183 "shamodule.c"
        HEAP[$WP]=$534; //@line 183 "shamodule.c"
        var $535=HEAP[$A]; //@line 183 "shamodule.c"
        var $536=((($535))>>>0) >>> 2; //@line 183 "shamodule.c"
        var $537=($535) << 30; //@line 183 "shamodule.c"
        var $538=($536) | ($537); //@line 183 "shamodule.c"
        HEAP[$A]=$538; //@line 183 "shamodule.c"
        var $539=HEAP[$E]; //@line 184 "shamodule.c"
        var $540=((($539))>>>0) >>> 27; //@line 184 "shamodule.c"
        var $541=($539) << 5; //@line 184 "shamodule.c"
        var $542=($540) | ($541); //@line 184 "shamodule.c"
        var $543=HEAP[$T]; //@line 184 "shamodule.c"
        var $544=HEAP[$A]; //@line 184 "shamodule.c"
        var $545=($543) ^ ($544); //@line 184 "shamodule.c"
        var $546=HEAP[$B]; //@line 184 "shamodule.c"
        var $547=($545) ^ ($546); //@line 184 "shamodule.c"
        var $548=((($542) + ($547))&4294967295); //@line 184 "shamodule.c"
        var $549=HEAP[$C]; //@line 184 "shamodule.c"
        var $550=((($548) + ($549))&4294967295); //@line 184 "shamodule.c"
        var $551=HEAP[$WP]; //@line 184 "shamodule.c"
        var $552=HEAP[$551]; //@line 184 "shamodule.c"
        var $553=((($550) + ($552))&4294967295); //@line 184 "shamodule.c"
        var $554=((($553) + 1859775393)&4294967295); //@line 184 "shamodule.c"
        HEAP[$D]=$554; //@line 184 "shamodule.c"
        var $555=HEAP[$WP]; //@line 184 "shamodule.c"
        var $556=(($555+4)&4294967295); //@line 184 "shamodule.c"
        HEAP[$WP]=$556; //@line 184 "shamodule.c"
        var $557=HEAP[$T]; //@line 184 "shamodule.c"
        var $558=((($557))>>>0) >>> 2; //@line 184 "shamodule.c"
        var $559=($557) << 30; //@line 184 "shamodule.c"
        var $560=($558) | ($559); //@line 184 "shamodule.c"
        HEAP[$T]=$560; //@line 184 "shamodule.c"
        var $561=HEAP[$D]; //@line 184 "shamodule.c"
        var $562=((($561))>>>0) >>> 27; //@line 184 "shamodule.c"
        var $563=($561) << 5; //@line 184 "shamodule.c"
        var $564=($562) | ($563); //@line 184 "shamodule.c"
        var $565=HEAP[$E]; //@line 184 "shamodule.c"
        var $566=HEAP[$T]; //@line 184 "shamodule.c"
        var $567=($565) ^ ($566); //@line 184 "shamodule.c"
        var $568=HEAP[$A]; //@line 184 "shamodule.c"
        var $569=($567) ^ ($568); //@line 184 "shamodule.c"
        var $570=((($564) + ($569))&4294967295); //@line 184 "shamodule.c"
        var $571=HEAP[$B]; //@line 184 "shamodule.c"
        var $572=((($570) + ($571))&4294967295); //@line 184 "shamodule.c"
        var $573=HEAP[$WP]; //@line 184 "shamodule.c"
        var $574=HEAP[$573]; //@line 184 "shamodule.c"
        var $575=((($572) + ($574))&4294967295); //@line 184 "shamodule.c"
        var $576=((($575) + 1859775393)&4294967295); //@line 184 "shamodule.c"
        HEAP[$C]=$576; //@line 184 "shamodule.c"
        var $577=HEAP[$WP]; //@line 184 "shamodule.c"
        var $578=(($577+4)&4294967295); //@line 184 "shamodule.c"
        HEAP[$WP]=$578; //@line 184 "shamodule.c"
        var $579=HEAP[$E]; //@line 184 "shamodule.c"
        var $580=((($579))>>>0) >>> 2; //@line 184 "shamodule.c"
        var $581=($579) << 30; //@line 184 "shamodule.c"
        var $582=($580) | ($581); //@line 184 "shamodule.c"
        HEAP[$E]=$582; //@line 184 "shamodule.c"
        var $583=HEAP[$C]; //@line 184 "shamodule.c"
        var $584=((($583))>>>0) >>> 27; //@line 184 "shamodule.c"
        var $585=($583) << 5; //@line 184 "shamodule.c"
        var $586=($584) | ($585); //@line 184 "shamodule.c"
        var $587=HEAP[$D]; //@line 184 "shamodule.c"
        var $588=HEAP[$E]; //@line 184 "shamodule.c"
        var $589=($587) ^ ($588); //@line 184 "shamodule.c"
        var $590=HEAP[$T]; //@line 184 "shamodule.c"
        var $591=($589) ^ ($590); //@line 184 "shamodule.c"
        var $592=((($586) + ($591))&4294967295); //@line 184 "shamodule.c"
        var $593=HEAP[$A]; //@line 184 "shamodule.c"
        var $594=((($592) + ($593))&4294967295); //@line 184 "shamodule.c"
        var $595=HEAP[$WP]; //@line 184 "shamodule.c"
        var $596=HEAP[$595]; //@line 184 "shamodule.c"
        var $597=((($594) + ($596))&4294967295); //@line 184 "shamodule.c"
        var $598=((($597) + 1859775393)&4294967295); //@line 184 "shamodule.c"
        HEAP[$B]=$598; //@line 184 "shamodule.c"
        var $599=HEAP[$WP]; //@line 184 "shamodule.c"
        var $600=(($599+4)&4294967295); //@line 184 "shamodule.c"
        HEAP[$WP]=$600; //@line 184 "shamodule.c"
        var $601=HEAP[$D]; //@line 184 "shamodule.c"
        var $602=((($601))>>>0) >>> 2; //@line 184 "shamodule.c"
        var $603=($601) << 30; //@line 184 "shamodule.c"
        var $604=($602) | ($603); //@line 184 "shamodule.c"
        HEAP[$D]=$604; //@line 184 "shamodule.c"
        var $605=HEAP[$B]; //@line 184 "shamodule.c"
        var $606=((($605))>>>0) >>> 27; //@line 184 "shamodule.c"
        var $607=($605) << 5; //@line 184 "shamodule.c"
        var $608=($606) | ($607); //@line 184 "shamodule.c"
        var $609=HEAP[$C]; //@line 184 "shamodule.c"
        var $610=HEAP[$D]; //@line 184 "shamodule.c"
        var $611=($609) ^ ($610); //@line 184 "shamodule.c"
        var $612=HEAP[$E]; //@line 184 "shamodule.c"
        var $613=($611) ^ ($612); //@line 184 "shamodule.c"
        var $614=((($608) + ($613))&4294967295); //@line 184 "shamodule.c"
        var $615=HEAP[$T]; //@line 184 "shamodule.c"
        var $616=((($614) + ($615))&4294967295); //@line 184 "shamodule.c"
        var $617=HEAP[$WP]; //@line 184 "shamodule.c"
        var $618=HEAP[$617]; //@line 184 "shamodule.c"
        var $619=((($616) + ($618))&4294967295); //@line 184 "shamodule.c"
        var $620=((($619) + 1859775393)&4294967295); //@line 184 "shamodule.c"
        HEAP[$A]=$620; //@line 184 "shamodule.c"
        var $621=HEAP[$WP]; //@line 184 "shamodule.c"
        var $622=(($621+4)&4294967295); //@line 184 "shamodule.c"
        HEAP[$WP]=$622; //@line 184 "shamodule.c"
        var $623=HEAP[$C]; //@line 184 "shamodule.c"
        var $624=((($623))>>>0) >>> 2; //@line 184 "shamodule.c"
        var $625=($623) << 30; //@line 184 "shamodule.c"
        var $626=($624) | ($625); //@line 184 "shamodule.c"
        HEAP[$C]=$626; //@line 184 "shamodule.c"
        var $627=HEAP[$A]; //@line 184 "shamodule.c"
        var $628=((($627))>>>0) >>> 27; //@line 184 "shamodule.c"
        var $629=($627) << 5; //@line 184 "shamodule.c"
        var $630=($628) | ($629); //@line 184 "shamodule.c"
        var $631=HEAP[$B]; //@line 184 "shamodule.c"
        var $632=HEAP[$C]; //@line 184 "shamodule.c"
        var $633=($631) ^ ($632); //@line 184 "shamodule.c"
        var $634=HEAP[$D]; //@line 184 "shamodule.c"
        var $635=($633) ^ ($634); //@line 184 "shamodule.c"
        var $636=((($630) + ($635))&4294967295); //@line 184 "shamodule.c"
        var $637=HEAP[$E]; //@line 184 "shamodule.c"
        var $638=((($636) + ($637))&4294967295); //@line 184 "shamodule.c"
        var $639=HEAP[$WP]; //@line 184 "shamodule.c"
        var $640=HEAP[$639]; //@line 184 "shamodule.c"
        var $641=((($638) + ($640))&4294967295); //@line 184 "shamodule.c"
        var $642=((($641) + 1859775393)&4294967295); //@line 184 "shamodule.c"
        HEAP[$T]=$642; //@line 184 "shamodule.c"
        var $643=HEAP[$WP]; //@line 184 "shamodule.c"
        var $644=(($643+4)&4294967295); //@line 184 "shamodule.c"
        HEAP[$WP]=$644; //@line 184 "shamodule.c"
        var $645=HEAP[$B]; //@line 184 "shamodule.c"
        var $646=((($645))>>>0) >>> 2; //@line 184 "shamodule.c"
        var $647=($645) << 30; //@line 184 "shamodule.c"
        var $648=($646) | ($647); //@line 184 "shamodule.c"
        HEAP[$B]=$648; //@line 184 "shamodule.c"
        var $649=HEAP[$T]; //@line 184 "shamodule.c"
        var $650=((($649))>>>0) >>> 27; //@line 184 "shamodule.c"
        var $651=($649) << 5; //@line 184 "shamodule.c"
        var $652=($650) | ($651); //@line 184 "shamodule.c"
        var $653=HEAP[$A]; //@line 184 "shamodule.c"
        var $654=HEAP[$B]; //@line 184 "shamodule.c"
        var $655=($653) ^ ($654); //@line 184 "shamodule.c"
        var $656=HEAP[$C]; //@line 184 "shamodule.c"
        var $657=($655) ^ ($656); //@line 184 "shamodule.c"
        var $658=((($652) + ($657))&4294967295); //@line 184 "shamodule.c"
        var $659=HEAP[$D]; //@line 184 "shamodule.c"
        var $660=((($658) + ($659))&4294967295); //@line 184 "shamodule.c"
        var $661=HEAP[$WP]; //@line 184 "shamodule.c"
        var $662=HEAP[$661]; //@line 184 "shamodule.c"
        var $663=((($660) + ($662))&4294967295); //@line 184 "shamodule.c"
        var $664=((($663) + 1859775393)&4294967295); //@line 184 "shamodule.c"
        HEAP[$E]=$664; //@line 184 "shamodule.c"
        var $665=HEAP[$WP]; //@line 184 "shamodule.c"
        var $666=(($665+4)&4294967295); //@line 184 "shamodule.c"
        HEAP[$WP]=$666; //@line 184 "shamodule.c"
        var $667=HEAP[$A]; //@line 184 "shamodule.c"
        var $668=((($667))>>>0) >>> 2; //@line 184 "shamodule.c"
        var $669=($667) << 30; //@line 184 "shamodule.c"
        var $670=($668) | ($669); //@line 184 "shamodule.c"
        HEAP[$A]=$670; //@line 184 "shamodule.c"
        var $671=HEAP[$E]; //@line 184 "shamodule.c"
        var $672=((($671))>>>0) >>> 27; //@line 184 "shamodule.c"
        var $673=($671) << 5; //@line 184 "shamodule.c"
        var $674=($672) | ($673); //@line 184 "shamodule.c"
        var $675=HEAP[$T]; //@line 184 "shamodule.c"
        var $676=HEAP[$A]; //@line 184 "shamodule.c"
        var $677=($675) ^ ($676); //@line 184 "shamodule.c"
        var $678=HEAP[$B]; //@line 184 "shamodule.c"
        var $679=($677) ^ ($678); //@line 184 "shamodule.c"
        var $680=((($674) + ($679))&4294967295); //@line 184 "shamodule.c"
        var $681=HEAP[$C]; //@line 184 "shamodule.c"
        var $682=((($680) + ($681))&4294967295); //@line 184 "shamodule.c"
        var $683=HEAP[$WP]; //@line 184 "shamodule.c"
        var $684=HEAP[$683]; //@line 184 "shamodule.c"
        var $685=((($682) + ($684))&4294967295); //@line 184 "shamodule.c"
        var $686=((($685) + 1859775393)&4294967295); //@line 184 "shamodule.c"
        HEAP[$D]=$686; //@line 184 "shamodule.c"
        var $687=HEAP[$WP]; //@line 184 "shamodule.c"
        var $688=(($687+4)&4294967295); //@line 184 "shamodule.c"
        HEAP[$WP]=$688; //@line 184 "shamodule.c"
        var $689=HEAP[$T]; //@line 184 "shamodule.c"
        var $690=((($689))>>>0) >>> 2; //@line 184 "shamodule.c"
        var $691=($689) << 30; //@line 184 "shamodule.c"
        var $692=($690) | ($691); //@line 184 "shamodule.c"
        HEAP[$T]=$692; //@line 184 "shamodule.c"
        var $693=HEAP[$D]; //@line 184 "shamodule.c"
        var $694=((($693))>>>0) >>> 27; //@line 184 "shamodule.c"
        var $695=($693) << 5; //@line 184 "shamodule.c"
        var $696=($694) | ($695); //@line 184 "shamodule.c"
        var $697=HEAP[$E]; //@line 184 "shamodule.c"
        var $698=HEAP[$T]; //@line 184 "shamodule.c"
        var $699=($697) ^ ($698); //@line 184 "shamodule.c"
        var $700=HEAP[$A]; //@line 184 "shamodule.c"
        var $701=($699) ^ ($700); //@line 184 "shamodule.c"
        var $702=((($696) + ($701))&4294967295); //@line 184 "shamodule.c"
        var $703=HEAP[$B]; //@line 184 "shamodule.c"
        var $704=((($702) + ($703))&4294967295); //@line 184 "shamodule.c"
        var $705=HEAP[$WP]; //@line 184 "shamodule.c"
        var $706=HEAP[$705]; //@line 184 "shamodule.c"
        var $707=((($704) + ($706))&4294967295); //@line 184 "shamodule.c"
        var $708=((($707) + 1859775393)&4294967295); //@line 184 "shamodule.c"
        HEAP[$C]=$708; //@line 184 "shamodule.c"
        var $709=HEAP[$WP]; //@line 184 "shamodule.c"
        var $710=(($709+4)&4294967295); //@line 184 "shamodule.c"
        HEAP[$WP]=$710; //@line 184 "shamodule.c"
        var $711=HEAP[$E]; //@line 184 "shamodule.c"
        var $712=((($711))>>>0) >>> 2; //@line 184 "shamodule.c"
        var $713=($711) << 30; //@line 184 "shamodule.c"
        var $714=($712) | ($713); //@line 184 "shamodule.c"
        HEAP[$E]=$714; //@line 184 "shamodule.c"
        var $715=HEAP[$C]; //@line 184 "shamodule.c"
        var $716=((($715))>>>0) >>> 27; //@line 184 "shamodule.c"
        var $717=($715) << 5; //@line 184 "shamodule.c"
        var $718=($716) | ($717); //@line 184 "shamodule.c"
        var $719=HEAP[$D]; //@line 184 "shamodule.c"
        var $720=HEAP[$E]; //@line 184 "shamodule.c"
        var $721=($719) ^ ($720); //@line 184 "shamodule.c"
        var $722=HEAP[$T]; //@line 184 "shamodule.c"
        var $723=($721) ^ ($722); //@line 184 "shamodule.c"
        var $724=((($718) + ($723))&4294967295); //@line 184 "shamodule.c"
        var $725=HEAP[$A]; //@line 184 "shamodule.c"
        var $726=((($724) + ($725))&4294967295); //@line 184 "shamodule.c"
        var $727=HEAP[$WP]; //@line 184 "shamodule.c"
        var $728=HEAP[$727]; //@line 184 "shamodule.c"
        var $729=((($726) + ($728))&4294967295); //@line 184 "shamodule.c"
        var $730=((($729) + 1859775393)&4294967295); //@line 184 "shamodule.c"
        HEAP[$B]=$730; //@line 184 "shamodule.c"
        var $731=HEAP[$WP]; //@line 184 "shamodule.c"
        var $732=(($731+4)&4294967295); //@line 184 "shamodule.c"
        HEAP[$WP]=$732; //@line 184 "shamodule.c"
        var $733=HEAP[$D]; //@line 184 "shamodule.c"
        var $734=((($733))>>>0) >>> 2; //@line 184 "shamodule.c"
        var $735=($733) << 30; //@line 184 "shamodule.c"
        var $736=($734) | ($735); //@line 184 "shamodule.c"
        HEAP[$D]=$736; //@line 184 "shamodule.c"
        var $737=HEAP[$B]; //@line 184 "shamodule.c"
        var $738=((($737))>>>0) >>> 27; //@line 184 "shamodule.c"
        var $739=($737) << 5; //@line 184 "shamodule.c"
        var $740=($738) | ($739); //@line 184 "shamodule.c"
        var $741=HEAP[$C]; //@line 184 "shamodule.c"
        var $742=HEAP[$D]; //@line 184 "shamodule.c"
        var $743=($741) ^ ($742); //@line 184 "shamodule.c"
        var $744=HEAP[$E]; //@line 184 "shamodule.c"
        var $745=($743) ^ ($744); //@line 184 "shamodule.c"
        var $746=((($740) + ($745))&4294967295); //@line 184 "shamodule.c"
        var $747=HEAP[$T]; //@line 184 "shamodule.c"
        var $748=((($746) + ($747))&4294967295); //@line 184 "shamodule.c"
        var $749=HEAP[$WP]; //@line 184 "shamodule.c"
        var $750=HEAP[$749]; //@line 184 "shamodule.c"
        var $751=((($748) + ($750))&4294967295); //@line 184 "shamodule.c"
        var $752=((($751) + 1859775393)&4294967295); //@line 184 "shamodule.c"
        HEAP[$A]=$752; //@line 184 "shamodule.c"
        var $753=HEAP[$WP]; //@line 184 "shamodule.c"
        var $754=(($753+4)&4294967295); //@line 184 "shamodule.c"
        HEAP[$WP]=$754; //@line 184 "shamodule.c"
        var $755=HEAP[$C]; //@line 184 "shamodule.c"
        var $756=((($755))>>>0) >>> 2; //@line 184 "shamodule.c"
        var $757=($755) << 30; //@line 184 "shamodule.c"
        var $758=($756) | ($757); //@line 184 "shamodule.c"
        HEAP[$C]=$758; //@line 184 "shamodule.c"
        var $759=HEAP[$A]; //@line 185 "shamodule.c"
        var $760=((($759))>>>0) >>> 27; //@line 185 "shamodule.c"
        var $761=($759) << 5; //@line 185 "shamodule.c"
        var $762=($760) | ($761); //@line 185 "shamodule.c"
        var $763=HEAP[$B]; //@line 185 "shamodule.c"
        var $764=HEAP[$C]; //@line 185 "shamodule.c"
        var $765=($763) ^ ($764); //@line 185 "shamodule.c"
        var $766=HEAP[$D]; //@line 185 "shamodule.c"
        var $767=($765) ^ ($766); //@line 185 "shamodule.c"
        var $768=((($762) + ($767))&4294967295); //@line 185 "shamodule.c"
        var $769=HEAP[$E]; //@line 185 "shamodule.c"
        var $770=((($768) + ($769))&4294967295); //@line 185 "shamodule.c"
        var $771=HEAP[$WP]; //@line 185 "shamodule.c"
        var $772=HEAP[$771]; //@line 185 "shamodule.c"
        var $773=((($770) + ($772))&4294967295); //@line 185 "shamodule.c"
        var $774=((($773) + 1859775393)&4294967295); //@line 185 "shamodule.c"
        HEAP[$T]=$774; //@line 185 "shamodule.c"
        var $775=HEAP[$WP]; //@line 185 "shamodule.c"
        var $776=(($775+4)&4294967295); //@line 185 "shamodule.c"
        HEAP[$WP]=$776; //@line 185 "shamodule.c"
        var $777=HEAP[$B]; //@line 185 "shamodule.c"
        var $778=((($777))>>>0) >>> 2; //@line 185 "shamodule.c"
        var $779=($777) << 30; //@line 185 "shamodule.c"
        var $780=($778) | ($779); //@line 185 "shamodule.c"
        HEAP[$B]=$780; //@line 185 "shamodule.c"
        var $781=HEAP[$T]; //@line 185 "shamodule.c"
        var $782=((($781))>>>0) >>> 27; //@line 185 "shamodule.c"
        var $783=($781) << 5; //@line 185 "shamodule.c"
        var $784=($782) | ($783); //@line 185 "shamodule.c"
        var $785=HEAP[$A]; //@line 185 "shamodule.c"
        var $786=HEAP[$B]; //@line 185 "shamodule.c"
        var $787=($785) ^ ($786); //@line 185 "shamodule.c"
        var $788=HEAP[$C]; //@line 185 "shamodule.c"
        var $789=($787) ^ ($788); //@line 185 "shamodule.c"
        var $790=((($784) + ($789))&4294967295); //@line 185 "shamodule.c"
        var $791=HEAP[$D]; //@line 185 "shamodule.c"
        var $792=((($790) + ($791))&4294967295); //@line 185 "shamodule.c"
        var $793=HEAP[$WP]; //@line 185 "shamodule.c"
        var $794=HEAP[$793]; //@line 185 "shamodule.c"
        var $795=((($792) + ($794))&4294967295); //@line 185 "shamodule.c"
        var $796=((($795) + 1859775393)&4294967295); //@line 185 "shamodule.c"
        HEAP[$E]=$796; //@line 185 "shamodule.c"
        var $797=HEAP[$WP]; //@line 185 "shamodule.c"
        var $798=(($797+4)&4294967295); //@line 185 "shamodule.c"
        HEAP[$WP]=$798; //@line 185 "shamodule.c"
        var $799=HEAP[$A]; //@line 185 "shamodule.c"
        var $800=((($799))>>>0) >>> 2; //@line 185 "shamodule.c"
        var $801=($799) << 30; //@line 185 "shamodule.c"
        var $802=($800) | ($801); //@line 185 "shamodule.c"
        HEAP[$A]=$802; //@line 185 "shamodule.c"
        var $803=HEAP[$E]; //@line 185 "shamodule.c"
        var $804=((($803))>>>0) >>> 27; //@line 185 "shamodule.c"
        var $805=($803) << 5; //@line 185 "shamodule.c"
        var $806=($804) | ($805); //@line 185 "shamodule.c"
        var $807=HEAP[$T]; //@line 185 "shamodule.c"
        var $808=HEAP[$A]; //@line 185 "shamodule.c"
        var $809=($807) ^ ($808); //@line 185 "shamodule.c"
        var $810=HEAP[$B]; //@line 185 "shamodule.c"
        var $811=($809) ^ ($810); //@line 185 "shamodule.c"
        var $812=((($806) + ($811))&4294967295); //@line 185 "shamodule.c"
        var $813=HEAP[$C]; //@line 185 "shamodule.c"
        var $814=((($812) + ($813))&4294967295); //@line 185 "shamodule.c"
        var $815=HEAP[$WP]; //@line 185 "shamodule.c"
        var $816=HEAP[$815]; //@line 185 "shamodule.c"
        var $817=((($814) + ($816))&4294967295); //@line 185 "shamodule.c"
        var $818=((($817) + 1859775393)&4294967295); //@line 185 "shamodule.c"
        HEAP[$D]=$818; //@line 185 "shamodule.c"
        var $819=HEAP[$WP]; //@line 185 "shamodule.c"
        var $820=(($819+4)&4294967295); //@line 185 "shamodule.c"
        HEAP[$WP]=$820; //@line 185 "shamodule.c"
        var $821=HEAP[$T]; //@line 185 "shamodule.c"
        var $822=((($821))>>>0) >>> 2; //@line 185 "shamodule.c"
        var $823=($821) << 30; //@line 185 "shamodule.c"
        var $824=($822) | ($823); //@line 185 "shamodule.c"
        HEAP[$T]=$824; //@line 185 "shamodule.c"
        var $825=HEAP[$D]; //@line 185 "shamodule.c"
        var $826=((($825))>>>0) >>> 27; //@line 185 "shamodule.c"
        var $827=($825) << 5; //@line 185 "shamodule.c"
        var $828=($826) | ($827); //@line 185 "shamodule.c"
        var $829=HEAP[$E]; //@line 185 "shamodule.c"
        var $830=HEAP[$T]; //@line 185 "shamodule.c"
        var $831=($829) ^ ($830); //@line 185 "shamodule.c"
        var $832=HEAP[$A]; //@line 185 "shamodule.c"
        var $833=($831) ^ ($832); //@line 185 "shamodule.c"
        var $834=((($828) + ($833))&4294967295); //@line 185 "shamodule.c"
        var $835=HEAP[$B]; //@line 185 "shamodule.c"
        var $836=((($834) + ($835))&4294967295); //@line 185 "shamodule.c"
        var $837=HEAP[$WP]; //@line 185 "shamodule.c"
        var $838=HEAP[$837]; //@line 185 "shamodule.c"
        var $839=((($836) + ($838))&4294967295); //@line 185 "shamodule.c"
        var $840=((($839) + 1859775393)&4294967295); //@line 185 "shamodule.c"
        HEAP[$C]=$840; //@line 185 "shamodule.c"
        var $841=HEAP[$WP]; //@line 185 "shamodule.c"
        var $842=(($841+4)&4294967295); //@line 185 "shamodule.c"
        HEAP[$WP]=$842; //@line 185 "shamodule.c"
        var $843=HEAP[$E]; //@line 185 "shamodule.c"
        var $844=((($843))>>>0) >>> 2; //@line 185 "shamodule.c"
        var $845=($843) << 30; //@line 185 "shamodule.c"
        var $846=($844) | ($845); //@line 185 "shamodule.c"
        HEAP[$E]=$846; //@line 185 "shamodule.c"
        var $847=HEAP[$C]; //@line 185 "shamodule.c"
        var $848=((($847))>>>0) >>> 27; //@line 185 "shamodule.c"
        var $849=($847) << 5; //@line 185 "shamodule.c"
        var $850=($848) | ($849); //@line 185 "shamodule.c"
        var $851=HEAP[$D]; //@line 185 "shamodule.c"
        var $852=HEAP[$E]; //@line 185 "shamodule.c"
        var $853=($851) ^ ($852); //@line 185 "shamodule.c"
        var $854=HEAP[$T]; //@line 185 "shamodule.c"
        var $855=($853) ^ ($854); //@line 185 "shamodule.c"
        var $856=((($850) + ($855))&4294967295); //@line 185 "shamodule.c"
        var $857=HEAP[$A]; //@line 185 "shamodule.c"
        var $858=((($856) + ($857))&4294967295); //@line 185 "shamodule.c"
        var $859=HEAP[$WP]; //@line 185 "shamodule.c"
        var $860=HEAP[$859]; //@line 185 "shamodule.c"
        var $861=((($858) + ($860))&4294967295); //@line 185 "shamodule.c"
        var $862=((($861) + 1859775393)&4294967295); //@line 185 "shamodule.c"
        HEAP[$B]=$862; //@line 185 "shamodule.c"
        var $863=HEAP[$WP]; //@line 185 "shamodule.c"
        var $864=(($863+4)&4294967295); //@line 185 "shamodule.c"
        HEAP[$WP]=$864; //@line 185 "shamodule.c"
        var $865=HEAP[$D]; //@line 185 "shamodule.c"
        var $866=((($865))>>>0) >>> 2; //@line 185 "shamodule.c"
        var $867=($865) << 30; //@line 185 "shamodule.c"
        var $868=($866) | ($867); //@line 185 "shamodule.c"
        HEAP[$D]=$868; //@line 185 "shamodule.c"
        var $869=HEAP[$B]; //@line 185 "shamodule.c"
        var $870=((($869))>>>0) >>> 27; //@line 185 "shamodule.c"
        var $871=($869) << 5; //@line 185 "shamodule.c"
        var $872=($870) | ($871); //@line 185 "shamodule.c"
        var $873=HEAP[$C]; //@line 185 "shamodule.c"
        var $874=HEAP[$D]; //@line 185 "shamodule.c"
        var $875=($873) ^ ($874); //@line 185 "shamodule.c"
        var $876=HEAP[$E]; //@line 185 "shamodule.c"
        var $877=($875) ^ ($876); //@line 185 "shamodule.c"
        var $878=((($872) + ($877))&4294967295); //@line 185 "shamodule.c"
        var $879=HEAP[$T]; //@line 185 "shamodule.c"
        var $880=((($878) + ($879))&4294967295); //@line 185 "shamodule.c"
        var $881=HEAP[$WP]; //@line 185 "shamodule.c"
        var $882=HEAP[$881]; //@line 185 "shamodule.c"
        var $883=((($880) + ($882))&4294967295); //@line 185 "shamodule.c"
        var $884=((($883) + 1859775393)&4294967295); //@line 185 "shamodule.c"
        HEAP[$A]=$884; //@line 185 "shamodule.c"
        var $885=HEAP[$WP]; //@line 185 "shamodule.c"
        var $886=(($885+4)&4294967295); //@line 185 "shamodule.c"
        HEAP[$WP]=$886; //@line 185 "shamodule.c"
        var $887=HEAP[$C]; //@line 185 "shamodule.c"
        var $888=((($887))>>>0) >>> 2; //@line 185 "shamodule.c"
        var $889=($887) << 30; //@line 185 "shamodule.c"
        var $890=($888) | ($889); //@line 185 "shamodule.c"
        HEAP[$C]=$890; //@line 185 "shamodule.c"
        var $891=HEAP[$A]; //@line 185 "shamodule.c"
        var $892=((($891))>>>0) >>> 27; //@line 185 "shamodule.c"
        var $893=($891) << 5; //@line 185 "shamodule.c"
        var $894=($892) | ($893); //@line 185 "shamodule.c"
        var $895=HEAP[$B]; //@line 185 "shamodule.c"
        var $896=HEAP[$C]; //@line 185 "shamodule.c"
        var $897=($895) ^ ($896); //@line 185 "shamodule.c"
        var $898=HEAP[$D]; //@line 185 "shamodule.c"
        var $899=($897) ^ ($898); //@line 185 "shamodule.c"
        var $900=((($894) + ($899))&4294967295); //@line 185 "shamodule.c"
        var $901=HEAP[$E]; //@line 185 "shamodule.c"
        var $902=((($900) + ($901))&4294967295); //@line 185 "shamodule.c"
        var $903=HEAP[$WP]; //@line 185 "shamodule.c"
        var $904=HEAP[$903]; //@line 185 "shamodule.c"
        var $905=((($902) + ($904))&4294967295); //@line 185 "shamodule.c"
        var $906=((($905) + 1859775393)&4294967295); //@line 185 "shamodule.c"
        HEAP[$T]=$906; //@line 185 "shamodule.c"
        var $907=HEAP[$WP]; //@line 185 "shamodule.c"
        var $908=(($907+4)&4294967295); //@line 185 "shamodule.c"
        HEAP[$WP]=$908; //@line 185 "shamodule.c"
        var $909=HEAP[$B]; //@line 185 "shamodule.c"
        var $910=((($909))>>>0) >>> 2; //@line 185 "shamodule.c"
        var $911=($909) << 30; //@line 185 "shamodule.c"
        var $912=($910) | ($911); //@line 185 "shamodule.c"
        HEAP[$B]=$912; //@line 185 "shamodule.c"
        var $913=HEAP[$T]; //@line 185 "shamodule.c"
        var $914=((($913))>>>0) >>> 27; //@line 185 "shamodule.c"
        var $915=($913) << 5; //@line 185 "shamodule.c"
        var $916=($914) | ($915); //@line 185 "shamodule.c"
        var $917=HEAP[$A]; //@line 185 "shamodule.c"
        var $918=HEAP[$B]; //@line 185 "shamodule.c"
        var $919=($917) ^ ($918); //@line 185 "shamodule.c"
        var $920=HEAP[$C]; //@line 185 "shamodule.c"
        var $921=($919) ^ ($920); //@line 185 "shamodule.c"
        var $922=((($916) + ($921))&4294967295); //@line 185 "shamodule.c"
        var $923=HEAP[$D]; //@line 185 "shamodule.c"
        var $924=((($922) + ($923))&4294967295); //@line 185 "shamodule.c"
        var $925=HEAP[$WP]; //@line 185 "shamodule.c"
        var $926=HEAP[$925]; //@line 185 "shamodule.c"
        var $927=((($924) + ($926))&4294967295); //@line 185 "shamodule.c"
        var $928=((($927) + 1859775393)&4294967295); //@line 185 "shamodule.c"
        HEAP[$E]=$928; //@line 185 "shamodule.c"
        var $929=HEAP[$WP]; //@line 185 "shamodule.c"
        var $930=(($929+4)&4294967295); //@line 185 "shamodule.c"
        HEAP[$WP]=$930; //@line 185 "shamodule.c"
        var $931=HEAP[$A]; //@line 185 "shamodule.c"
        var $932=((($931))>>>0) >>> 2; //@line 185 "shamodule.c"
        var $933=($931) << 30; //@line 185 "shamodule.c"
        var $934=($932) | ($933); //@line 185 "shamodule.c"
        HEAP[$A]=$934; //@line 185 "shamodule.c"
        var $935=HEAP[$E]; //@line 185 "shamodule.c"
        var $936=((($935))>>>0) >>> 27; //@line 185 "shamodule.c"
        var $937=($935) << 5; //@line 185 "shamodule.c"
        var $938=($936) | ($937); //@line 185 "shamodule.c"
        var $939=HEAP[$T]; //@line 185 "shamodule.c"
        var $940=HEAP[$A]; //@line 185 "shamodule.c"
        var $941=($939) ^ ($940); //@line 185 "shamodule.c"
        var $942=HEAP[$B]; //@line 185 "shamodule.c"
        var $943=($941) ^ ($942); //@line 185 "shamodule.c"
        var $944=((($938) + ($943))&4294967295); //@line 185 "shamodule.c"
        var $945=HEAP[$C]; //@line 185 "shamodule.c"
        var $946=((($944) + ($945))&4294967295); //@line 185 "shamodule.c"
        var $947=HEAP[$WP]; //@line 185 "shamodule.c"
        var $948=HEAP[$947]; //@line 185 "shamodule.c"
        var $949=((($946) + ($948))&4294967295); //@line 185 "shamodule.c"
        var $950=((($949) + 1859775393)&4294967295); //@line 185 "shamodule.c"
        HEAP[$D]=$950; //@line 185 "shamodule.c"
        var $951=HEAP[$WP]; //@line 185 "shamodule.c"
        var $952=(($951+4)&4294967295); //@line 185 "shamodule.c"
        HEAP[$WP]=$952; //@line 185 "shamodule.c"
        var $953=HEAP[$T]; //@line 185 "shamodule.c"
        var $954=((($953))>>>0) >>> 2; //@line 185 "shamodule.c"
        var $955=($953) << 30; //@line 185 "shamodule.c"
        var $956=($954) | ($955); //@line 185 "shamodule.c"
        HEAP[$T]=$956; //@line 185 "shamodule.c"
        var $957=HEAP[$D]; //@line 185 "shamodule.c"
        var $958=((($957))>>>0) >>> 27; //@line 185 "shamodule.c"
        var $959=($957) << 5; //@line 185 "shamodule.c"
        var $960=($958) | ($959); //@line 185 "shamodule.c"
        var $961=HEAP[$E]; //@line 185 "shamodule.c"
        var $962=HEAP[$T]; //@line 185 "shamodule.c"
        var $963=($961) ^ ($962); //@line 185 "shamodule.c"
        var $964=HEAP[$A]; //@line 185 "shamodule.c"
        var $965=($963) ^ ($964); //@line 185 "shamodule.c"
        var $966=((($960) + ($965))&4294967295); //@line 185 "shamodule.c"
        var $967=HEAP[$B]; //@line 185 "shamodule.c"
        var $968=((($966) + ($967))&4294967295); //@line 185 "shamodule.c"
        var $969=HEAP[$WP]; //@line 185 "shamodule.c"
        var $970=HEAP[$969]; //@line 185 "shamodule.c"
        var $971=((($968) + ($970))&4294967295); //@line 185 "shamodule.c"
        var $972=((($971) + 1859775393)&4294967295); //@line 185 "shamodule.c"
        HEAP[$C]=$972; //@line 185 "shamodule.c"
        var $973=HEAP[$WP]; //@line 185 "shamodule.c"
        var $974=(($973+4)&4294967295); //@line 185 "shamodule.c"
        HEAP[$WP]=$974; //@line 185 "shamodule.c"
        var $975=HEAP[$E]; //@line 185 "shamodule.c"
        var $976=((($975))>>>0) >>> 2; //@line 185 "shamodule.c"
        var $977=($975) << 30; //@line 185 "shamodule.c"
        var $978=($976) | ($977); //@line 185 "shamodule.c"
        HEAP[$E]=$978; //@line 185 "shamodule.c"
        var $979=HEAP[$C]; //@line 186 "shamodule.c"
        var $980=((($979))>>>0) >>> 27; //@line 186 "shamodule.c"
        var $981=($979) << 5; //@line 186 "shamodule.c"
        var $982=($980) | ($981); //@line 186 "shamodule.c"
        var $983=HEAP[$D]; //@line 186 "shamodule.c"
        var $984=HEAP[$E]; //@line 186 "shamodule.c"
        var $985=($983) & ($984); //@line 186 "shamodule.c"
        var $986=HEAP[$D]; //@line 186 "shamodule.c"
        var $987=HEAP[$E]; //@line 186 "shamodule.c"
        var $988=($986) | ($987); //@line 186 "shamodule.c"
        var $989=HEAP[$T]; //@line 186 "shamodule.c"
        var $990=($988) & ($989); //@line 186 "shamodule.c"
        var $991=($985) | ($990); //@line 186 "shamodule.c"
        var $992=((($982) + ($991))&4294967295); //@line 186 "shamodule.c"
        var $993=HEAP[$A]; //@line 186 "shamodule.c"
        var $994=((($992) + ($993))&4294967295); //@line 186 "shamodule.c"
        var $995=HEAP[$WP]; //@line 186 "shamodule.c"
        var $996=HEAP[$995]; //@line 186 "shamodule.c"
        var $997=((($994) + ($996))&4294967295); //@line 186 "shamodule.c"
        var $998=((($997) + -1894007588)&4294967295); //@line 186 "shamodule.c"
        HEAP[$B]=$998; //@line 186 "shamodule.c"
        var $999=HEAP[$WP]; //@line 186 "shamodule.c"
        var $1000=(($999+4)&4294967295); //@line 186 "shamodule.c"
        HEAP[$WP]=$1000; //@line 186 "shamodule.c"
        var $1001=HEAP[$D]; //@line 186 "shamodule.c"
        var $1002=((($1001))>>>0) >>> 2; //@line 186 "shamodule.c"
        var $1003=($1001) << 30; //@line 186 "shamodule.c"
        var $1004=($1002) | ($1003); //@line 186 "shamodule.c"
        HEAP[$D]=$1004; //@line 186 "shamodule.c"
        var $1005=HEAP[$B]; //@line 186 "shamodule.c"
        var $1006=((($1005))>>>0) >>> 27; //@line 186 "shamodule.c"
        var $1007=($1005) << 5; //@line 186 "shamodule.c"
        var $1008=($1006) | ($1007); //@line 186 "shamodule.c"
        var $1009=HEAP[$C]; //@line 186 "shamodule.c"
        var $1010=HEAP[$D]; //@line 186 "shamodule.c"
        var $1011=($1009) & ($1010); //@line 186 "shamodule.c"
        var $1012=HEAP[$C]; //@line 186 "shamodule.c"
        var $1013=HEAP[$D]; //@line 186 "shamodule.c"
        var $1014=($1012) | ($1013); //@line 186 "shamodule.c"
        var $1015=HEAP[$E]; //@line 186 "shamodule.c"
        var $1016=($1014) & ($1015); //@line 186 "shamodule.c"
        var $1017=($1011) | ($1016); //@line 186 "shamodule.c"
        var $1018=((($1008) + ($1017))&4294967295); //@line 186 "shamodule.c"
        var $1019=HEAP[$T]; //@line 186 "shamodule.c"
        var $1020=((($1018) + ($1019))&4294967295); //@line 186 "shamodule.c"
        var $1021=HEAP[$WP]; //@line 186 "shamodule.c"
        var $1022=HEAP[$1021]; //@line 186 "shamodule.c"
        var $1023=((($1020) + ($1022))&4294967295); //@line 186 "shamodule.c"
        var $1024=((($1023) + -1894007588)&4294967295); //@line 186 "shamodule.c"
        HEAP[$A]=$1024; //@line 186 "shamodule.c"
        var $1025=HEAP[$WP]; //@line 186 "shamodule.c"
        var $1026=(($1025+4)&4294967295); //@line 186 "shamodule.c"
        HEAP[$WP]=$1026; //@line 186 "shamodule.c"
        var $1027=HEAP[$C]; //@line 186 "shamodule.c"
        var $1028=((($1027))>>>0) >>> 2; //@line 186 "shamodule.c"
        var $1029=($1027) << 30; //@line 186 "shamodule.c"
        var $1030=($1028) | ($1029); //@line 186 "shamodule.c"
        HEAP[$C]=$1030; //@line 186 "shamodule.c"
        var $1031=HEAP[$A]; //@line 186 "shamodule.c"
        var $1032=((($1031))>>>0) >>> 27; //@line 186 "shamodule.c"
        var $1033=($1031) << 5; //@line 186 "shamodule.c"
        var $1034=($1032) | ($1033); //@line 186 "shamodule.c"
        var $1035=HEAP[$B]; //@line 186 "shamodule.c"
        var $1036=HEAP[$C]; //@line 186 "shamodule.c"
        var $1037=($1035) & ($1036); //@line 186 "shamodule.c"
        var $1038=HEAP[$B]; //@line 186 "shamodule.c"
        var $1039=HEAP[$C]; //@line 186 "shamodule.c"
        var $1040=($1038) | ($1039); //@line 186 "shamodule.c"
        var $1041=HEAP[$D]; //@line 186 "shamodule.c"
        var $1042=($1040) & ($1041); //@line 186 "shamodule.c"
        var $1043=($1037) | ($1042); //@line 186 "shamodule.c"
        var $1044=((($1034) + ($1043))&4294967295); //@line 186 "shamodule.c"
        var $1045=HEAP[$E]; //@line 186 "shamodule.c"
        var $1046=((($1044) + ($1045))&4294967295); //@line 186 "shamodule.c"
        var $1047=HEAP[$WP]; //@line 186 "shamodule.c"
        var $1048=HEAP[$1047]; //@line 186 "shamodule.c"
        var $1049=((($1046) + ($1048))&4294967295); //@line 186 "shamodule.c"
        var $1050=((($1049) + -1894007588)&4294967295); //@line 186 "shamodule.c"
        HEAP[$T]=$1050; //@line 186 "shamodule.c"
        var $1051=HEAP[$WP]; //@line 186 "shamodule.c"
        var $1052=(($1051+4)&4294967295); //@line 186 "shamodule.c"
        HEAP[$WP]=$1052; //@line 186 "shamodule.c"
        var $1053=HEAP[$B]; //@line 186 "shamodule.c"
        var $1054=((($1053))>>>0) >>> 2; //@line 186 "shamodule.c"
        var $1055=($1053) << 30; //@line 186 "shamodule.c"
        var $1056=($1054) | ($1055); //@line 186 "shamodule.c"
        HEAP[$B]=$1056; //@line 186 "shamodule.c"
        var $1057=HEAP[$T]; //@line 186 "shamodule.c"
        var $1058=((($1057))>>>0) >>> 27; //@line 186 "shamodule.c"
        var $1059=($1057) << 5; //@line 186 "shamodule.c"
        var $1060=($1058) | ($1059); //@line 186 "shamodule.c"
        var $1061=HEAP[$A]; //@line 186 "shamodule.c"
        var $1062=HEAP[$B]; //@line 186 "shamodule.c"
        var $1063=($1061) & ($1062); //@line 186 "shamodule.c"
        var $1064=HEAP[$A]; //@line 186 "shamodule.c"
        var $1065=HEAP[$B]; //@line 186 "shamodule.c"
        var $1066=($1064) | ($1065); //@line 186 "shamodule.c"
        var $1067=HEAP[$C]; //@line 186 "shamodule.c"
        var $1068=($1066) & ($1067); //@line 186 "shamodule.c"
        var $1069=($1063) | ($1068); //@line 186 "shamodule.c"
        var $1070=((($1060) + ($1069))&4294967295); //@line 186 "shamodule.c"
        var $1071=HEAP[$D]; //@line 186 "shamodule.c"
        var $1072=((($1070) + ($1071))&4294967295); //@line 186 "shamodule.c"
        var $1073=HEAP[$WP]; //@line 186 "shamodule.c"
        var $1074=HEAP[$1073]; //@line 186 "shamodule.c"
        var $1075=((($1072) + ($1074))&4294967295); //@line 186 "shamodule.c"
        var $1076=((($1075) + -1894007588)&4294967295); //@line 186 "shamodule.c"
        HEAP[$E]=$1076; //@line 186 "shamodule.c"
        var $1077=HEAP[$WP]; //@line 186 "shamodule.c"
        var $1078=(($1077+4)&4294967295); //@line 186 "shamodule.c"
        HEAP[$WP]=$1078; //@line 186 "shamodule.c"
        var $1079=HEAP[$A]; //@line 186 "shamodule.c"
        var $1080=((($1079))>>>0) >>> 2; //@line 186 "shamodule.c"
        var $1081=($1079) << 30; //@line 186 "shamodule.c"
        var $1082=($1080) | ($1081); //@line 186 "shamodule.c"
        HEAP[$A]=$1082; //@line 186 "shamodule.c"
        var $1083=HEAP[$E]; //@line 186 "shamodule.c"
        var $1084=((($1083))>>>0) >>> 27; //@line 186 "shamodule.c"
        var $1085=($1083) << 5; //@line 186 "shamodule.c"
        var $1086=($1084) | ($1085); //@line 186 "shamodule.c"
        var $1087=HEAP[$T]; //@line 186 "shamodule.c"
        var $1088=HEAP[$A]; //@line 186 "shamodule.c"
        var $1089=($1087) & ($1088); //@line 186 "shamodule.c"
        var $1090=HEAP[$T]; //@line 186 "shamodule.c"
        var $1091=HEAP[$A]; //@line 186 "shamodule.c"
        var $1092=($1090) | ($1091); //@line 186 "shamodule.c"
        var $1093=HEAP[$B]; //@line 186 "shamodule.c"
        var $1094=($1092) & ($1093); //@line 186 "shamodule.c"
        var $1095=($1089) | ($1094); //@line 186 "shamodule.c"
        var $1096=((($1086) + ($1095))&4294967295); //@line 186 "shamodule.c"
        var $1097=HEAP[$C]; //@line 186 "shamodule.c"
        var $1098=((($1096) + ($1097))&4294967295); //@line 186 "shamodule.c"
        var $1099=HEAP[$WP]; //@line 186 "shamodule.c"
        var $1100=HEAP[$1099]; //@line 186 "shamodule.c"
        var $1101=((($1098) + ($1100))&4294967295); //@line 186 "shamodule.c"
        var $1102=((($1101) + -1894007588)&4294967295); //@line 186 "shamodule.c"
        HEAP[$D]=$1102; //@line 186 "shamodule.c"
        var $1103=HEAP[$WP]; //@line 186 "shamodule.c"
        var $1104=(($1103+4)&4294967295); //@line 186 "shamodule.c"
        HEAP[$WP]=$1104; //@line 186 "shamodule.c"
        var $1105=HEAP[$T]; //@line 186 "shamodule.c"
        var $1106=((($1105))>>>0) >>> 2; //@line 186 "shamodule.c"
        var $1107=($1105) << 30; //@line 186 "shamodule.c"
        var $1108=($1106) | ($1107); //@line 186 "shamodule.c"
        HEAP[$T]=$1108; //@line 186 "shamodule.c"
        var $1109=HEAP[$D]; //@line 186 "shamodule.c"
        var $1110=((($1109))>>>0) >>> 27; //@line 186 "shamodule.c"
        var $1111=($1109) << 5; //@line 186 "shamodule.c"
        var $1112=($1110) | ($1111); //@line 186 "shamodule.c"
        var $1113=HEAP[$E]; //@line 186 "shamodule.c"
        var $1114=HEAP[$T]; //@line 186 "shamodule.c"
        var $1115=($1113) & ($1114); //@line 186 "shamodule.c"
        var $1116=HEAP[$E]; //@line 186 "shamodule.c"
        var $1117=HEAP[$T]; //@line 186 "shamodule.c"
        var $1118=($1116) | ($1117); //@line 186 "shamodule.c"
        var $1119=HEAP[$A]; //@line 186 "shamodule.c"
        var $1120=($1118) & ($1119); //@line 186 "shamodule.c"
        var $1121=($1115) | ($1120); //@line 186 "shamodule.c"
        var $1122=((($1112) + ($1121))&4294967295); //@line 186 "shamodule.c"
        var $1123=HEAP[$B]; //@line 186 "shamodule.c"
        var $1124=((($1122) + ($1123))&4294967295); //@line 186 "shamodule.c"
        var $1125=HEAP[$WP]; //@line 186 "shamodule.c"
        var $1126=HEAP[$1125]; //@line 186 "shamodule.c"
        var $1127=((($1124) + ($1126))&4294967295); //@line 186 "shamodule.c"
        var $1128=((($1127) + -1894007588)&4294967295); //@line 186 "shamodule.c"
        HEAP[$C]=$1128; //@line 186 "shamodule.c"
        var $1129=HEAP[$WP]; //@line 186 "shamodule.c"
        var $1130=(($1129+4)&4294967295); //@line 186 "shamodule.c"
        HEAP[$WP]=$1130; //@line 186 "shamodule.c"
        var $1131=HEAP[$E]; //@line 186 "shamodule.c"
        var $1132=((($1131))>>>0) >>> 2; //@line 186 "shamodule.c"
        var $1133=($1131) << 30; //@line 186 "shamodule.c"
        var $1134=($1132) | ($1133); //@line 186 "shamodule.c"
        HEAP[$E]=$1134; //@line 186 "shamodule.c"
        var $1135=HEAP[$C]; //@line 186 "shamodule.c"
        var $1136=((($1135))>>>0) >>> 27; //@line 186 "shamodule.c"
        var $1137=($1135) << 5; //@line 186 "shamodule.c"
        var $1138=($1136) | ($1137); //@line 186 "shamodule.c"
        var $1139=HEAP[$D]; //@line 186 "shamodule.c"
        var $1140=HEAP[$E]; //@line 186 "shamodule.c"
        var $1141=($1139) & ($1140); //@line 186 "shamodule.c"
        var $1142=HEAP[$D]; //@line 186 "shamodule.c"
        var $1143=HEAP[$E]; //@line 186 "shamodule.c"
        var $1144=($1142) | ($1143); //@line 186 "shamodule.c"
        var $1145=HEAP[$T]; //@line 186 "shamodule.c"
        var $1146=($1144) & ($1145); //@line 186 "shamodule.c"
        var $1147=($1141) | ($1146); //@line 186 "shamodule.c"
        var $1148=((($1138) + ($1147))&4294967295); //@line 186 "shamodule.c"
        var $1149=HEAP[$A]; //@line 186 "shamodule.c"
        var $1150=((($1148) + ($1149))&4294967295); //@line 186 "shamodule.c"
        var $1151=HEAP[$WP]; //@line 186 "shamodule.c"
        var $1152=HEAP[$1151]; //@line 186 "shamodule.c"
        var $1153=((($1150) + ($1152))&4294967295); //@line 186 "shamodule.c"
        var $1154=((($1153) + -1894007588)&4294967295); //@line 186 "shamodule.c"
        HEAP[$B]=$1154; //@line 186 "shamodule.c"
        var $1155=HEAP[$WP]; //@line 186 "shamodule.c"
        var $1156=(($1155+4)&4294967295); //@line 186 "shamodule.c"
        HEAP[$WP]=$1156; //@line 186 "shamodule.c"
        var $1157=HEAP[$D]; //@line 186 "shamodule.c"
        var $1158=((($1157))>>>0) >>> 2; //@line 186 "shamodule.c"
        var $1159=($1157) << 30; //@line 186 "shamodule.c"
        var $1160=($1158) | ($1159); //@line 186 "shamodule.c"
        HEAP[$D]=$1160; //@line 186 "shamodule.c"
        var $1161=HEAP[$B]; //@line 186 "shamodule.c"
        var $1162=((($1161))>>>0) >>> 27; //@line 186 "shamodule.c"
        var $1163=($1161) << 5; //@line 186 "shamodule.c"
        var $1164=($1162) | ($1163); //@line 186 "shamodule.c"
        var $1165=HEAP[$C]; //@line 186 "shamodule.c"
        var $1166=HEAP[$D]; //@line 186 "shamodule.c"
        var $1167=($1165) & ($1166); //@line 186 "shamodule.c"
        var $1168=HEAP[$C]; //@line 186 "shamodule.c"
        var $1169=HEAP[$D]; //@line 186 "shamodule.c"
        var $1170=($1168) | ($1169); //@line 186 "shamodule.c"
        var $1171=HEAP[$E]; //@line 186 "shamodule.c"
        var $1172=($1170) & ($1171); //@line 186 "shamodule.c"
        var $1173=($1167) | ($1172); //@line 186 "shamodule.c"
        var $1174=((($1164) + ($1173))&4294967295); //@line 186 "shamodule.c"
        var $1175=HEAP[$T]; //@line 186 "shamodule.c"
        var $1176=((($1174) + ($1175))&4294967295); //@line 186 "shamodule.c"
        var $1177=HEAP[$WP]; //@line 186 "shamodule.c"
        var $1178=HEAP[$1177]; //@line 186 "shamodule.c"
        var $1179=((($1176) + ($1178))&4294967295); //@line 186 "shamodule.c"
        var $1180=((($1179) + -1894007588)&4294967295); //@line 186 "shamodule.c"
        HEAP[$A]=$1180; //@line 186 "shamodule.c"
        var $1181=HEAP[$WP]; //@line 186 "shamodule.c"
        var $1182=(($1181+4)&4294967295); //@line 186 "shamodule.c"
        HEAP[$WP]=$1182; //@line 186 "shamodule.c"
        var $1183=HEAP[$C]; //@line 186 "shamodule.c"
        var $1184=((($1183))>>>0) >>> 2; //@line 186 "shamodule.c"
        var $1185=($1183) << 30; //@line 186 "shamodule.c"
        var $1186=($1184) | ($1185); //@line 186 "shamodule.c"
        HEAP[$C]=$1186; //@line 186 "shamodule.c"
        var $1187=HEAP[$A]; //@line 186 "shamodule.c"
        var $1188=((($1187))>>>0) >>> 27; //@line 186 "shamodule.c"
        var $1189=($1187) << 5; //@line 186 "shamodule.c"
        var $1190=($1188) | ($1189); //@line 186 "shamodule.c"
        var $1191=HEAP[$B]; //@line 186 "shamodule.c"
        var $1192=HEAP[$C]; //@line 186 "shamodule.c"
        var $1193=($1191) & ($1192); //@line 186 "shamodule.c"
        var $1194=HEAP[$B]; //@line 186 "shamodule.c"
        var $1195=HEAP[$C]; //@line 186 "shamodule.c"
        var $1196=($1194) | ($1195); //@line 186 "shamodule.c"
        var $1197=HEAP[$D]; //@line 186 "shamodule.c"
        var $1198=($1196) & ($1197); //@line 186 "shamodule.c"
        var $1199=($1193) | ($1198); //@line 186 "shamodule.c"
        var $1200=((($1190) + ($1199))&4294967295); //@line 186 "shamodule.c"
        var $1201=HEAP[$E]; //@line 186 "shamodule.c"
        var $1202=((($1200) + ($1201))&4294967295); //@line 186 "shamodule.c"
        var $1203=HEAP[$WP]; //@line 186 "shamodule.c"
        var $1204=HEAP[$1203]; //@line 186 "shamodule.c"
        var $1205=((($1202) + ($1204))&4294967295); //@line 186 "shamodule.c"
        var $1206=((($1205) + -1894007588)&4294967295); //@line 186 "shamodule.c"
        HEAP[$T]=$1206; //@line 186 "shamodule.c"
        var $1207=HEAP[$WP]; //@line 186 "shamodule.c"
        var $1208=(($1207+4)&4294967295); //@line 186 "shamodule.c"
        HEAP[$WP]=$1208; //@line 186 "shamodule.c"
        var $1209=HEAP[$B]; //@line 186 "shamodule.c"
        var $1210=((($1209))>>>0) >>> 2; //@line 186 "shamodule.c"
        var $1211=($1209) << 30; //@line 186 "shamodule.c"
        var $1212=($1210) | ($1211); //@line 186 "shamodule.c"
        HEAP[$B]=$1212; //@line 186 "shamodule.c"
        var $1213=HEAP[$T]; //@line 186 "shamodule.c"
        var $1214=((($1213))>>>0) >>> 27; //@line 186 "shamodule.c"
        var $1215=($1213) << 5; //@line 186 "shamodule.c"
        var $1216=($1214) | ($1215); //@line 186 "shamodule.c"
        var $1217=HEAP[$A]; //@line 186 "shamodule.c"
        var $1218=HEAP[$B]; //@line 186 "shamodule.c"
        var $1219=($1217) & ($1218); //@line 186 "shamodule.c"
        var $1220=HEAP[$A]; //@line 186 "shamodule.c"
        var $1221=HEAP[$B]; //@line 186 "shamodule.c"
        var $1222=($1220) | ($1221); //@line 186 "shamodule.c"
        var $1223=HEAP[$C]; //@line 186 "shamodule.c"
        var $1224=($1222) & ($1223); //@line 186 "shamodule.c"
        var $1225=($1219) | ($1224); //@line 186 "shamodule.c"
        var $1226=((($1216) + ($1225))&4294967295); //@line 186 "shamodule.c"
        var $1227=HEAP[$D]; //@line 186 "shamodule.c"
        var $1228=((($1226) + ($1227))&4294967295); //@line 186 "shamodule.c"
        var $1229=HEAP[$WP]; //@line 186 "shamodule.c"
        var $1230=HEAP[$1229]; //@line 186 "shamodule.c"
        var $1231=((($1228) + ($1230))&4294967295); //@line 186 "shamodule.c"
        var $1232=((($1231) + -1894007588)&4294967295); //@line 186 "shamodule.c"
        HEAP[$E]=$1232; //@line 186 "shamodule.c"
        var $1233=HEAP[$WP]; //@line 186 "shamodule.c"
        var $1234=(($1233+4)&4294967295); //@line 186 "shamodule.c"
        HEAP[$WP]=$1234; //@line 186 "shamodule.c"
        var $1235=HEAP[$A]; //@line 186 "shamodule.c"
        var $1236=((($1235))>>>0) >>> 2; //@line 186 "shamodule.c"
        var $1237=($1235) << 30; //@line 186 "shamodule.c"
        var $1238=($1236) | ($1237); //@line 186 "shamodule.c"
        HEAP[$A]=$1238; //@line 186 "shamodule.c"
        var $1239=HEAP[$E]; //@line 187 "shamodule.c"
        var $1240=((($1239))>>>0) >>> 27; //@line 187 "shamodule.c"
        var $1241=($1239) << 5; //@line 187 "shamodule.c"
        var $1242=($1240) | ($1241); //@line 187 "shamodule.c"
        var $1243=HEAP[$T]; //@line 187 "shamodule.c"
        var $1244=HEAP[$A]; //@line 187 "shamodule.c"
        var $1245=($1243) & ($1244); //@line 187 "shamodule.c"
        var $1246=HEAP[$T]; //@line 187 "shamodule.c"
        var $1247=HEAP[$A]; //@line 187 "shamodule.c"
        var $1248=($1246) | ($1247); //@line 187 "shamodule.c"
        var $1249=HEAP[$B]; //@line 187 "shamodule.c"
        var $1250=($1248) & ($1249); //@line 187 "shamodule.c"
        var $1251=($1245) | ($1250); //@line 187 "shamodule.c"
        var $1252=((($1242) + ($1251))&4294967295); //@line 187 "shamodule.c"
        var $1253=HEAP[$C]; //@line 187 "shamodule.c"
        var $1254=((($1252) + ($1253))&4294967295); //@line 187 "shamodule.c"
        var $1255=HEAP[$WP]; //@line 187 "shamodule.c"
        var $1256=HEAP[$1255]; //@line 187 "shamodule.c"
        var $1257=((($1254) + ($1256))&4294967295); //@line 187 "shamodule.c"
        var $1258=((($1257) + -1894007588)&4294967295); //@line 187 "shamodule.c"
        HEAP[$D]=$1258; //@line 187 "shamodule.c"
        var $1259=HEAP[$WP]; //@line 187 "shamodule.c"
        var $1260=(($1259+4)&4294967295); //@line 187 "shamodule.c"
        HEAP[$WP]=$1260; //@line 187 "shamodule.c"
        var $1261=HEAP[$T]; //@line 187 "shamodule.c"
        var $1262=((($1261))>>>0) >>> 2; //@line 187 "shamodule.c"
        var $1263=($1261) << 30; //@line 187 "shamodule.c"
        var $1264=($1262) | ($1263); //@line 187 "shamodule.c"
        HEAP[$T]=$1264; //@line 187 "shamodule.c"
        var $1265=HEAP[$D]; //@line 187 "shamodule.c"
        var $1266=((($1265))>>>0) >>> 27; //@line 187 "shamodule.c"
        var $1267=($1265) << 5; //@line 187 "shamodule.c"
        var $1268=($1266) | ($1267); //@line 187 "shamodule.c"
        var $1269=HEAP[$E]; //@line 187 "shamodule.c"
        var $1270=HEAP[$T]; //@line 187 "shamodule.c"
        var $1271=($1269) & ($1270); //@line 187 "shamodule.c"
        var $1272=HEAP[$E]; //@line 187 "shamodule.c"
        var $1273=HEAP[$T]; //@line 187 "shamodule.c"
        var $1274=($1272) | ($1273); //@line 187 "shamodule.c"
        var $1275=HEAP[$A]; //@line 187 "shamodule.c"
        var $1276=($1274) & ($1275); //@line 187 "shamodule.c"
        var $1277=($1271) | ($1276); //@line 187 "shamodule.c"
        var $1278=((($1268) + ($1277))&4294967295); //@line 187 "shamodule.c"
        var $1279=HEAP[$B]; //@line 187 "shamodule.c"
        var $1280=((($1278) + ($1279))&4294967295); //@line 187 "shamodule.c"
        var $1281=HEAP[$WP]; //@line 187 "shamodule.c"
        var $1282=HEAP[$1281]; //@line 187 "shamodule.c"
        var $1283=((($1280) + ($1282))&4294967295); //@line 187 "shamodule.c"
        var $1284=((($1283) + -1894007588)&4294967295); //@line 187 "shamodule.c"
        HEAP[$C]=$1284; //@line 187 "shamodule.c"
        var $1285=HEAP[$WP]; //@line 187 "shamodule.c"
        var $1286=(($1285+4)&4294967295); //@line 187 "shamodule.c"
        HEAP[$WP]=$1286; //@line 187 "shamodule.c"
        var $1287=HEAP[$E]; //@line 187 "shamodule.c"
        var $1288=((($1287))>>>0) >>> 2; //@line 187 "shamodule.c"
        var $1289=($1287) << 30; //@line 187 "shamodule.c"
        var $1290=($1288) | ($1289); //@line 187 "shamodule.c"
        HEAP[$E]=$1290; //@line 187 "shamodule.c"
        var $1291=HEAP[$C]; //@line 187 "shamodule.c"
        var $1292=((($1291))>>>0) >>> 27; //@line 187 "shamodule.c"
        var $1293=($1291) << 5; //@line 187 "shamodule.c"
        var $1294=($1292) | ($1293); //@line 187 "shamodule.c"
        var $1295=HEAP[$D]; //@line 187 "shamodule.c"
        var $1296=HEAP[$E]; //@line 187 "shamodule.c"
        var $1297=($1295) & ($1296); //@line 187 "shamodule.c"
        var $1298=HEAP[$D]; //@line 187 "shamodule.c"
        var $1299=HEAP[$E]; //@line 187 "shamodule.c"
        var $1300=($1298) | ($1299); //@line 187 "shamodule.c"
        var $1301=HEAP[$T]; //@line 187 "shamodule.c"
        var $1302=($1300) & ($1301); //@line 187 "shamodule.c"
        var $1303=($1297) | ($1302); //@line 187 "shamodule.c"
        var $1304=((($1294) + ($1303))&4294967295); //@line 187 "shamodule.c"
        var $1305=HEAP[$A]; //@line 187 "shamodule.c"
        var $1306=((($1304) + ($1305))&4294967295); //@line 187 "shamodule.c"
        var $1307=HEAP[$WP]; //@line 187 "shamodule.c"
        var $1308=HEAP[$1307]; //@line 187 "shamodule.c"
        var $1309=((($1306) + ($1308))&4294967295); //@line 187 "shamodule.c"
        var $1310=((($1309) + -1894007588)&4294967295); //@line 187 "shamodule.c"
        HEAP[$B]=$1310; //@line 187 "shamodule.c"
        var $1311=HEAP[$WP]; //@line 187 "shamodule.c"
        var $1312=(($1311+4)&4294967295); //@line 187 "shamodule.c"
        HEAP[$WP]=$1312; //@line 187 "shamodule.c"
        var $1313=HEAP[$D]; //@line 187 "shamodule.c"
        var $1314=((($1313))>>>0) >>> 2; //@line 187 "shamodule.c"
        var $1315=($1313) << 30; //@line 187 "shamodule.c"
        var $1316=($1314) | ($1315); //@line 187 "shamodule.c"
        HEAP[$D]=$1316; //@line 187 "shamodule.c"
        var $1317=HEAP[$B]; //@line 187 "shamodule.c"
        var $1318=((($1317))>>>0) >>> 27; //@line 187 "shamodule.c"
        var $1319=($1317) << 5; //@line 187 "shamodule.c"
        var $1320=($1318) | ($1319); //@line 187 "shamodule.c"
        var $1321=HEAP[$C]; //@line 187 "shamodule.c"
        var $1322=HEAP[$D]; //@line 187 "shamodule.c"
        var $1323=($1321) & ($1322); //@line 187 "shamodule.c"
        var $1324=HEAP[$C]; //@line 187 "shamodule.c"
        var $1325=HEAP[$D]; //@line 187 "shamodule.c"
        var $1326=($1324) | ($1325); //@line 187 "shamodule.c"
        var $1327=HEAP[$E]; //@line 187 "shamodule.c"
        var $1328=($1326) & ($1327); //@line 187 "shamodule.c"
        var $1329=($1323) | ($1328); //@line 187 "shamodule.c"
        var $1330=((($1320) + ($1329))&4294967295); //@line 187 "shamodule.c"
        var $1331=HEAP[$T]; //@line 187 "shamodule.c"
        var $1332=((($1330) + ($1331))&4294967295); //@line 187 "shamodule.c"
        var $1333=HEAP[$WP]; //@line 187 "shamodule.c"
        var $1334=HEAP[$1333]; //@line 187 "shamodule.c"
        var $1335=((($1332) + ($1334))&4294967295); //@line 187 "shamodule.c"
        var $1336=((($1335) + -1894007588)&4294967295); //@line 187 "shamodule.c"
        HEAP[$A]=$1336; //@line 187 "shamodule.c"
        var $1337=HEAP[$WP]; //@line 187 "shamodule.c"
        var $1338=(($1337+4)&4294967295); //@line 187 "shamodule.c"
        HEAP[$WP]=$1338; //@line 187 "shamodule.c"
        var $1339=HEAP[$C]; //@line 187 "shamodule.c"
        var $1340=((($1339))>>>0) >>> 2; //@line 187 "shamodule.c"
        var $1341=($1339) << 30; //@line 187 "shamodule.c"
        var $1342=($1340) | ($1341); //@line 187 "shamodule.c"
        HEAP[$C]=$1342; //@line 187 "shamodule.c"
        var $1343=HEAP[$A]; //@line 187 "shamodule.c"
        var $1344=((($1343))>>>0) >>> 27; //@line 187 "shamodule.c"
        var $1345=($1343) << 5; //@line 187 "shamodule.c"
        var $1346=($1344) | ($1345); //@line 187 "shamodule.c"
        var $1347=HEAP[$B]; //@line 187 "shamodule.c"
        var $1348=HEAP[$C]; //@line 187 "shamodule.c"
        var $1349=($1347) & ($1348); //@line 187 "shamodule.c"
        var $1350=HEAP[$B]; //@line 187 "shamodule.c"
        var $1351=HEAP[$C]; //@line 187 "shamodule.c"
        var $1352=($1350) | ($1351); //@line 187 "shamodule.c"
        var $1353=HEAP[$D]; //@line 187 "shamodule.c"
        var $1354=($1352) & ($1353); //@line 187 "shamodule.c"
        var $1355=($1349) | ($1354); //@line 187 "shamodule.c"
        var $1356=((($1346) + ($1355))&4294967295); //@line 187 "shamodule.c"
        var $1357=HEAP[$E]; //@line 187 "shamodule.c"
        var $1358=((($1356) + ($1357))&4294967295); //@line 187 "shamodule.c"
        var $1359=HEAP[$WP]; //@line 187 "shamodule.c"
        var $1360=HEAP[$1359]; //@line 187 "shamodule.c"
        var $1361=((($1358) + ($1360))&4294967295); //@line 187 "shamodule.c"
        var $1362=((($1361) + -1894007588)&4294967295); //@line 187 "shamodule.c"
        HEAP[$T]=$1362; //@line 187 "shamodule.c"
        var $1363=HEAP[$WP]; //@line 187 "shamodule.c"
        var $1364=(($1363+4)&4294967295); //@line 187 "shamodule.c"
        HEAP[$WP]=$1364; //@line 187 "shamodule.c"
        var $1365=HEAP[$B]; //@line 187 "shamodule.c"
        var $1366=((($1365))>>>0) >>> 2; //@line 187 "shamodule.c"
        var $1367=($1365) << 30; //@line 187 "shamodule.c"
        var $1368=($1366) | ($1367); //@line 187 "shamodule.c"
        HEAP[$B]=$1368; //@line 187 "shamodule.c"
        var $1369=HEAP[$T]; //@line 187 "shamodule.c"
        var $1370=((($1369))>>>0) >>> 27; //@line 187 "shamodule.c"
        var $1371=($1369) << 5; //@line 187 "shamodule.c"
        var $1372=($1370) | ($1371); //@line 187 "shamodule.c"
        var $1373=HEAP[$A]; //@line 187 "shamodule.c"
        var $1374=HEAP[$B]; //@line 187 "shamodule.c"
        var $1375=($1373) & ($1374); //@line 187 "shamodule.c"
        var $1376=HEAP[$A]; //@line 187 "shamodule.c"
        var $1377=HEAP[$B]; //@line 187 "shamodule.c"
        var $1378=($1376) | ($1377); //@line 187 "shamodule.c"
        var $1379=HEAP[$C]; //@line 187 "shamodule.c"
        var $1380=($1378) & ($1379); //@line 187 "shamodule.c"
        var $1381=($1375) | ($1380); //@line 187 "shamodule.c"
        var $1382=((($1372) + ($1381))&4294967295); //@line 187 "shamodule.c"
        var $1383=HEAP[$D]; //@line 187 "shamodule.c"
        var $1384=((($1382) + ($1383))&4294967295); //@line 187 "shamodule.c"
        var $1385=HEAP[$WP]; //@line 187 "shamodule.c"
        var $1386=HEAP[$1385]; //@line 187 "shamodule.c"
        var $1387=((($1384) + ($1386))&4294967295); //@line 187 "shamodule.c"
        var $1388=((($1387) + -1894007588)&4294967295); //@line 187 "shamodule.c"
        HEAP[$E]=$1388; //@line 187 "shamodule.c"
        var $1389=HEAP[$WP]; //@line 187 "shamodule.c"
        var $1390=(($1389+4)&4294967295); //@line 187 "shamodule.c"
        HEAP[$WP]=$1390; //@line 187 "shamodule.c"
        var $1391=HEAP[$A]; //@line 187 "shamodule.c"
        var $1392=((($1391))>>>0) >>> 2; //@line 187 "shamodule.c"
        var $1393=($1391) << 30; //@line 187 "shamodule.c"
        var $1394=($1392) | ($1393); //@line 187 "shamodule.c"
        HEAP[$A]=$1394; //@line 187 "shamodule.c"
        var $1395=HEAP[$E]; //@line 187 "shamodule.c"
        var $1396=((($1395))>>>0) >>> 27; //@line 187 "shamodule.c"
        var $1397=($1395) << 5; //@line 187 "shamodule.c"
        var $1398=($1396) | ($1397); //@line 187 "shamodule.c"
        var $1399=HEAP[$T]; //@line 187 "shamodule.c"
        var $1400=HEAP[$A]; //@line 187 "shamodule.c"
        var $1401=($1399) & ($1400); //@line 187 "shamodule.c"
        var $1402=HEAP[$T]; //@line 187 "shamodule.c"
        var $1403=HEAP[$A]; //@line 187 "shamodule.c"
        var $1404=($1402) | ($1403); //@line 187 "shamodule.c"
        var $1405=HEAP[$B]; //@line 187 "shamodule.c"
        var $1406=($1404) & ($1405); //@line 187 "shamodule.c"
        var $1407=($1401) | ($1406); //@line 187 "shamodule.c"
        var $1408=((($1398) + ($1407))&4294967295); //@line 187 "shamodule.c"
        var $1409=HEAP[$C]; //@line 187 "shamodule.c"
        var $1410=((($1408) + ($1409))&4294967295); //@line 187 "shamodule.c"
        var $1411=HEAP[$WP]; //@line 187 "shamodule.c"
        var $1412=HEAP[$1411]; //@line 187 "shamodule.c"
        var $1413=((($1410) + ($1412))&4294967295); //@line 187 "shamodule.c"
        var $1414=((($1413) + -1894007588)&4294967295); //@line 187 "shamodule.c"
        HEAP[$D]=$1414; //@line 187 "shamodule.c"
        var $1415=HEAP[$WP]; //@line 187 "shamodule.c"
        var $1416=(($1415+4)&4294967295); //@line 187 "shamodule.c"
        HEAP[$WP]=$1416; //@line 187 "shamodule.c"
        var $1417=HEAP[$T]; //@line 187 "shamodule.c"
        var $1418=((($1417))>>>0) >>> 2; //@line 187 "shamodule.c"
        var $1419=($1417) << 30; //@line 187 "shamodule.c"
        var $1420=($1418) | ($1419); //@line 187 "shamodule.c"
        HEAP[$T]=$1420; //@line 187 "shamodule.c"
        var $1421=HEAP[$D]; //@line 187 "shamodule.c"
        var $1422=((($1421))>>>0) >>> 27; //@line 187 "shamodule.c"
        var $1423=($1421) << 5; //@line 187 "shamodule.c"
        var $1424=($1422) | ($1423); //@line 187 "shamodule.c"
        var $1425=HEAP[$E]; //@line 187 "shamodule.c"
        var $1426=HEAP[$T]; //@line 187 "shamodule.c"
        var $1427=($1425) & ($1426); //@line 187 "shamodule.c"
        var $1428=HEAP[$E]; //@line 187 "shamodule.c"
        var $1429=HEAP[$T]; //@line 187 "shamodule.c"
        var $1430=($1428) | ($1429); //@line 187 "shamodule.c"
        var $1431=HEAP[$A]; //@line 187 "shamodule.c"
        var $1432=($1430) & ($1431); //@line 187 "shamodule.c"
        var $1433=($1427) | ($1432); //@line 187 "shamodule.c"
        var $1434=((($1424) + ($1433))&4294967295); //@line 187 "shamodule.c"
        var $1435=HEAP[$B]; //@line 187 "shamodule.c"
        var $1436=((($1434) + ($1435))&4294967295); //@line 187 "shamodule.c"
        var $1437=HEAP[$WP]; //@line 187 "shamodule.c"
        var $1438=HEAP[$1437]; //@line 187 "shamodule.c"
        var $1439=((($1436) + ($1438))&4294967295); //@line 187 "shamodule.c"
        var $1440=((($1439) + -1894007588)&4294967295); //@line 187 "shamodule.c"
        HEAP[$C]=$1440; //@line 187 "shamodule.c"
        var $1441=HEAP[$WP]; //@line 187 "shamodule.c"
        var $1442=(($1441+4)&4294967295); //@line 187 "shamodule.c"
        HEAP[$WP]=$1442; //@line 187 "shamodule.c"
        var $1443=HEAP[$E]; //@line 187 "shamodule.c"
        var $1444=((($1443))>>>0) >>> 2; //@line 187 "shamodule.c"
        var $1445=($1443) << 30; //@line 187 "shamodule.c"
        var $1446=($1444) | ($1445); //@line 187 "shamodule.c"
        HEAP[$E]=$1446; //@line 187 "shamodule.c"
        var $1447=HEAP[$C]; //@line 187 "shamodule.c"
        var $1448=((($1447))>>>0) >>> 27; //@line 187 "shamodule.c"
        var $1449=($1447) << 5; //@line 187 "shamodule.c"
        var $1450=($1448) | ($1449); //@line 187 "shamodule.c"
        var $1451=HEAP[$D]; //@line 187 "shamodule.c"
        var $1452=HEAP[$E]; //@line 187 "shamodule.c"
        var $1453=($1451) & ($1452); //@line 187 "shamodule.c"
        var $1454=HEAP[$D]; //@line 187 "shamodule.c"
        var $1455=HEAP[$E]; //@line 187 "shamodule.c"
        var $1456=($1454) | ($1455); //@line 187 "shamodule.c"
        var $1457=HEAP[$T]; //@line 187 "shamodule.c"
        var $1458=($1456) & ($1457); //@line 187 "shamodule.c"
        var $1459=($1453) | ($1458); //@line 187 "shamodule.c"
        var $1460=((($1450) + ($1459))&4294967295); //@line 187 "shamodule.c"
        var $1461=HEAP[$A]; //@line 187 "shamodule.c"
        var $1462=((($1460) + ($1461))&4294967295); //@line 187 "shamodule.c"
        var $1463=HEAP[$WP]; //@line 187 "shamodule.c"
        var $1464=HEAP[$1463]; //@line 187 "shamodule.c"
        var $1465=((($1462) + ($1464))&4294967295); //@line 187 "shamodule.c"
        var $1466=((($1465) + -1894007588)&4294967295); //@line 187 "shamodule.c"
        HEAP[$B]=$1466; //@line 187 "shamodule.c"
        var $1467=HEAP[$WP]; //@line 187 "shamodule.c"
        var $1468=(($1467+4)&4294967295); //@line 187 "shamodule.c"
        HEAP[$WP]=$1468; //@line 187 "shamodule.c"
        var $1469=HEAP[$D]; //@line 187 "shamodule.c"
        var $1470=((($1469))>>>0) >>> 2; //@line 187 "shamodule.c"
        var $1471=($1469) << 30; //@line 187 "shamodule.c"
        var $1472=($1470) | ($1471); //@line 187 "shamodule.c"
        HEAP[$D]=$1472; //@line 187 "shamodule.c"
        var $1473=HEAP[$B]; //@line 187 "shamodule.c"
        var $1474=((($1473))>>>0) >>> 27; //@line 187 "shamodule.c"
        var $1475=($1473) << 5; //@line 187 "shamodule.c"
        var $1476=($1474) | ($1475); //@line 187 "shamodule.c"
        var $1477=HEAP[$C]; //@line 187 "shamodule.c"
        var $1478=HEAP[$D]; //@line 187 "shamodule.c"
        var $1479=($1477) & ($1478); //@line 187 "shamodule.c"
        var $1480=HEAP[$C]; //@line 187 "shamodule.c"
        var $1481=HEAP[$D]; //@line 187 "shamodule.c"
        var $1482=($1480) | ($1481); //@line 187 "shamodule.c"
        var $1483=HEAP[$E]; //@line 187 "shamodule.c"
        var $1484=($1482) & ($1483); //@line 187 "shamodule.c"
        var $1485=($1479) | ($1484); //@line 187 "shamodule.c"
        var $1486=((($1476) + ($1485))&4294967295); //@line 187 "shamodule.c"
        var $1487=HEAP[$T]; //@line 187 "shamodule.c"
        var $1488=((($1486) + ($1487))&4294967295); //@line 187 "shamodule.c"
        var $1489=HEAP[$WP]; //@line 187 "shamodule.c"
        var $1490=HEAP[$1489]; //@line 187 "shamodule.c"
        var $1491=((($1488) + ($1490))&4294967295); //@line 187 "shamodule.c"
        var $1492=((($1491) + -1894007588)&4294967295); //@line 187 "shamodule.c"
        HEAP[$A]=$1492; //@line 187 "shamodule.c"
        var $1493=HEAP[$WP]; //@line 187 "shamodule.c"
        var $1494=(($1493+4)&4294967295); //@line 187 "shamodule.c"
        HEAP[$WP]=$1494; //@line 187 "shamodule.c"
        var $1495=HEAP[$C]; //@line 187 "shamodule.c"
        var $1496=((($1495))>>>0) >>> 2; //@line 187 "shamodule.c"
        var $1497=($1495) << 30; //@line 187 "shamodule.c"
        var $1498=($1496) | ($1497); //@line 187 "shamodule.c"
        HEAP[$C]=$1498; //@line 187 "shamodule.c"
        var $1499=HEAP[$A]; //@line 188 "shamodule.c"
        var $1500=((($1499))>>>0) >>> 27; //@line 188 "shamodule.c"
        var $1501=($1499) << 5; //@line 188 "shamodule.c"
        var $1502=($1500) | ($1501); //@line 188 "shamodule.c"
        var $1503=HEAP[$B]; //@line 188 "shamodule.c"
        var $1504=HEAP[$C]; //@line 188 "shamodule.c"
        var $1505=($1503) ^ ($1504); //@line 188 "shamodule.c"
        var $1506=HEAP[$D]; //@line 188 "shamodule.c"
        var $1507=($1505) ^ ($1506); //@line 188 "shamodule.c"
        var $1508=((($1502) + ($1507))&4294967295); //@line 188 "shamodule.c"
        var $1509=HEAP[$E]; //@line 188 "shamodule.c"
        var $1510=((($1508) + ($1509))&4294967295); //@line 188 "shamodule.c"
        var $1511=HEAP[$WP]; //@line 188 "shamodule.c"
        var $1512=HEAP[$1511]; //@line 188 "shamodule.c"
        var $1513=((($1510) + ($1512))&4294967295); //@line 188 "shamodule.c"
        var $1514=((($1513) + -899497514)&4294967295); //@line 188 "shamodule.c"
        HEAP[$T]=$1514; //@line 188 "shamodule.c"
        var $1515=HEAP[$WP]; //@line 188 "shamodule.c"
        var $1516=(($1515+4)&4294967295); //@line 188 "shamodule.c"
        HEAP[$WP]=$1516; //@line 188 "shamodule.c"
        var $1517=HEAP[$B]; //@line 188 "shamodule.c"
        var $1518=((($1517))>>>0) >>> 2; //@line 188 "shamodule.c"
        var $1519=($1517) << 30; //@line 188 "shamodule.c"
        var $1520=($1518) | ($1519); //@line 188 "shamodule.c"
        HEAP[$B]=$1520; //@line 188 "shamodule.c"
        var $1521=HEAP[$T]; //@line 188 "shamodule.c"
        var $1522=((($1521))>>>0) >>> 27; //@line 188 "shamodule.c"
        var $1523=($1521) << 5; //@line 188 "shamodule.c"
        var $1524=($1522) | ($1523); //@line 188 "shamodule.c"
        var $1525=HEAP[$A]; //@line 188 "shamodule.c"
        var $1526=HEAP[$B]; //@line 188 "shamodule.c"
        var $1527=($1525) ^ ($1526); //@line 188 "shamodule.c"
        var $1528=HEAP[$C]; //@line 188 "shamodule.c"
        var $1529=($1527) ^ ($1528); //@line 188 "shamodule.c"
        var $1530=((($1524) + ($1529))&4294967295); //@line 188 "shamodule.c"
        var $1531=HEAP[$D]; //@line 188 "shamodule.c"
        var $1532=((($1530) + ($1531))&4294967295); //@line 188 "shamodule.c"
        var $1533=HEAP[$WP]; //@line 188 "shamodule.c"
        var $1534=HEAP[$1533]; //@line 188 "shamodule.c"
        var $1535=((($1532) + ($1534))&4294967295); //@line 188 "shamodule.c"
        var $1536=((($1535) + -899497514)&4294967295); //@line 188 "shamodule.c"
        HEAP[$E]=$1536; //@line 188 "shamodule.c"
        var $1537=HEAP[$WP]; //@line 188 "shamodule.c"
        var $1538=(($1537+4)&4294967295); //@line 188 "shamodule.c"
        HEAP[$WP]=$1538; //@line 188 "shamodule.c"
        var $1539=HEAP[$A]; //@line 188 "shamodule.c"
        var $1540=((($1539))>>>0) >>> 2; //@line 188 "shamodule.c"
        var $1541=($1539) << 30; //@line 188 "shamodule.c"
        var $1542=($1540) | ($1541); //@line 188 "shamodule.c"
        HEAP[$A]=$1542; //@line 188 "shamodule.c"
        var $1543=HEAP[$E]; //@line 188 "shamodule.c"
        var $1544=((($1543))>>>0) >>> 27; //@line 188 "shamodule.c"
        var $1545=($1543) << 5; //@line 188 "shamodule.c"
        var $1546=($1544) | ($1545); //@line 188 "shamodule.c"
        var $1547=HEAP[$T]; //@line 188 "shamodule.c"
        var $1548=HEAP[$A]; //@line 188 "shamodule.c"
        var $1549=($1547) ^ ($1548); //@line 188 "shamodule.c"
        var $1550=HEAP[$B]; //@line 188 "shamodule.c"
        var $1551=($1549) ^ ($1550); //@line 188 "shamodule.c"
        var $1552=((($1546) + ($1551))&4294967295); //@line 188 "shamodule.c"
        var $1553=HEAP[$C]; //@line 188 "shamodule.c"
        var $1554=((($1552) + ($1553))&4294967295); //@line 188 "shamodule.c"
        var $1555=HEAP[$WP]; //@line 188 "shamodule.c"
        var $1556=HEAP[$1555]; //@line 188 "shamodule.c"
        var $1557=((($1554) + ($1556))&4294967295); //@line 188 "shamodule.c"
        var $1558=((($1557) + -899497514)&4294967295); //@line 188 "shamodule.c"
        HEAP[$D]=$1558; //@line 188 "shamodule.c"
        var $1559=HEAP[$WP]; //@line 188 "shamodule.c"
        var $1560=(($1559+4)&4294967295); //@line 188 "shamodule.c"
        HEAP[$WP]=$1560; //@line 188 "shamodule.c"
        var $1561=HEAP[$T]; //@line 188 "shamodule.c"
        var $1562=((($1561))>>>0) >>> 2; //@line 188 "shamodule.c"
        var $1563=($1561) << 30; //@line 188 "shamodule.c"
        var $1564=($1562) | ($1563); //@line 188 "shamodule.c"
        HEAP[$T]=$1564; //@line 188 "shamodule.c"
        var $1565=HEAP[$D]; //@line 188 "shamodule.c"
        var $1566=((($1565))>>>0) >>> 27; //@line 188 "shamodule.c"
        var $1567=($1565) << 5; //@line 188 "shamodule.c"
        var $1568=($1566) | ($1567); //@line 188 "shamodule.c"
        var $1569=HEAP[$E]; //@line 188 "shamodule.c"
        var $1570=HEAP[$T]; //@line 188 "shamodule.c"
        var $1571=($1569) ^ ($1570); //@line 188 "shamodule.c"
        var $1572=HEAP[$A]; //@line 188 "shamodule.c"
        var $1573=($1571) ^ ($1572); //@line 188 "shamodule.c"
        var $1574=((($1568) + ($1573))&4294967295); //@line 188 "shamodule.c"
        var $1575=HEAP[$B]; //@line 188 "shamodule.c"
        var $1576=((($1574) + ($1575))&4294967295); //@line 188 "shamodule.c"
        var $1577=HEAP[$WP]; //@line 188 "shamodule.c"
        var $1578=HEAP[$1577]; //@line 188 "shamodule.c"
        var $1579=((($1576) + ($1578))&4294967295); //@line 188 "shamodule.c"
        var $1580=((($1579) + -899497514)&4294967295); //@line 188 "shamodule.c"
        HEAP[$C]=$1580; //@line 188 "shamodule.c"
        var $1581=HEAP[$WP]; //@line 188 "shamodule.c"
        var $1582=(($1581+4)&4294967295); //@line 188 "shamodule.c"
        HEAP[$WP]=$1582; //@line 188 "shamodule.c"
        var $1583=HEAP[$E]; //@line 188 "shamodule.c"
        var $1584=((($1583))>>>0) >>> 2; //@line 188 "shamodule.c"
        var $1585=($1583) << 30; //@line 188 "shamodule.c"
        var $1586=($1584) | ($1585); //@line 188 "shamodule.c"
        HEAP[$E]=$1586; //@line 188 "shamodule.c"
        var $1587=HEAP[$C]; //@line 188 "shamodule.c"
        var $1588=((($1587))>>>0) >>> 27; //@line 188 "shamodule.c"
        var $1589=($1587) << 5; //@line 188 "shamodule.c"
        var $1590=($1588) | ($1589); //@line 188 "shamodule.c"
        var $1591=HEAP[$D]; //@line 188 "shamodule.c"
        var $1592=HEAP[$E]; //@line 188 "shamodule.c"
        var $1593=($1591) ^ ($1592); //@line 188 "shamodule.c"
        var $1594=HEAP[$T]; //@line 188 "shamodule.c"
        var $1595=($1593) ^ ($1594); //@line 188 "shamodule.c"
        var $1596=((($1590) + ($1595))&4294967295); //@line 188 "shamodule.c"
        var $1597=HEAP[$A]; //@line 188 "shamodule.c"
        var $1598=((($1596) + ($1597))&4294967295); //@line 188 "shamodule.c"
        var $1599=HEAP[$WP]; //@line 188 "shamodule.c"
        var $1600=HEAP[$1599]; //@line 188 "shamodule.c"
        var $1601=((($1598) + ($1600))&4294967295); //@line 188 "shamodule.c"
        var $1602=((($1601) + -899497514)&4294967295); //@line 188 "shamodule.c"
        HEAP[$B]=$1602; //@line 188 "shamodule.c"
        var $1603=HEAP[$WP]; //@line 188 "shamodule.c"
        var $1604=(($1603+4)&4294967295); //@line 188 "shamodule.c"
        HEAP[$WP]=$1604; //@line 188 "shamodule.c"
        var $1605=HEAP[$D]; //@line 188 "shamodule.c"
        var $1606=((($1605))>>>0) >>> 2; //@line 188 "shamodule.c"
        var $1607=($1605) << 30; //@line 188 "shamodule.c"
        var $1608=($1606) | ($1607); //@line 188 "shamodule.c"
        HEAP[$D]=$1608; //@line 188 "shamodule.c"
        var $1609=HEAP[$B]; //@line 188 "shamodule.c"
        var $1610=((($1609))>>>0) >>> 27; //@line 188 "shamodule.c"
        var $1611=($1609) << 5; //@line 188 "shamodule.c"
        var $1612=($1610) | ($1611); //@line 188 "shamodule.c"
        var $1613=HEAP[$C]; //@line 188 "shamodule.c"
        var $1614=HEAP[$D]; //@line 188 "shamodule.c"
        var $1615=($1613) ^ ($1614); //@line 188 "shamodule.c"
        var $1616=HEAP[$E]; //@line 188 "shamodule.c"
        var $1617=($1615) ^ ($1616); //@line 188 "shamodule.c"
        var $1618=((($1612) + ($1617))&4294967295); //@line 188 "shamodule.c"
        var $1619=HEAP[$T]; //@line 188 "shamodule.c"
        var $1620=((($1618) + ($1619))&4294967295); //@line 188 "shamodule.c"
        var $1621=HEAP[$WP]; //@line 188 "shamodule.c"
        var $1622=HEAP[$1621]; //@line 188 "shamodule.c"
        var $1623=((($1620) + ($1622))&4294967295); //@line 188 "shamodule.c"
        var $1624=((($1623) + -899497514)&4294967295); //@line 188 "shamodule.c"
        HEAP[$A]=$1624; //@line 188 "shamodule.c"
        var $1625=HEAP[$WP]; //@line 188 "shamodule.c"
        var $1626=(($1625+4)&4294967295); //@line 188 "shamodule.c"
        HEAP[$WP]=$1626; //@line 188 "shamodule.c"
        var $1627=HEAP[$C]; //@line 188 "shamodule.c"
        var $1628=((($1627))>>>0) >>> 2; //@line 188 "shamodule.c"
        var $1629=($1627) << 30; //@line 188 "shamodule.c"
        var $1630=($1628) | ($1629); //@line 188 "shamodule.c"
        HEAP[$C]=$1630; //@line 188 "shamodule.c"
        var $1631=HEAP[$A]; //@line 188 "shamodule.c"
        var $1632=((($1631))>>>0) >>> 27; //@line 188 "shamodule.c"
        var $1633=($1631) << 5; //@line 188 "shamodule.c"
        var $1634=($1632) | ($1633); //@line 188 "shamodule.c"
        var $1635=HEAP[$B]; //@line 188 "shamodule.c"
        var $1636=HEAP[$C]; //@line 188 "shamodule.c"
        var $1637=($1635) ^ ($1636); //@line 188 "shamodule.c"
        var $1638=HEAP[$D]; //@line 188 "shamodule.c"
        var $1639=($1637) ^ ($1638); //@line 188 "shamodule.c"
        var $1640=((($1634) + ($1639))&4294967295); //@line 188 "shamodule.c"
        var $1641=HEAP[$E]; //@line 188 "shamodule.c"
        var $1642=((($1640) + ($1641))&4294967295); //@line 188 "shamodule.c"
        var $1643=HEAP[$WP]; //@line 188 "shamodule.c"
        var $1644=HEAP[$1643]; //@line 188 "shamodule.c"
        var $1645=((($1642) + ($1644))&4294967295); //@line 188 "shamodule.c"
        var $1646=((($1645) + -899497514)&4294967295); //@line 188 "shamodule.c"
        HEAP[$T]=$1646; //@line 188 "shamodule.c"
        var $1647=HEAP[$WP]; //@line 188 "shamodule.c"
        var $1648=(($1647+4)&4294967295); //@line 188 "shamodule.c"
        HEAP[$WP]=$1648; //@line 188 "shamodule.c"
        var $1649=HEAP[$B]; //@line 188 "shamodule.c"
        var $1650=((($1649))>>>0) >>> 2; //@line 188 "shamodule.c"
        var $1651=($1649) << 30; //@line 188 "shamodule.c"
        var $1652=($1650) | ($1651); //@line 188 "shamodule.c"
        HEAP[$B]=$1652; //@line 188 "shamodule.c"
        var $1653=HEAP[$T]; //@line 188 "shamodule.c"
        var $1654=((($1653))>>>0) >>> 27; //@line 188 "shamodule.c"
        var $1655=($1653) << 5; //@line 188 "shamodule.c"
        var $1656=($1654) | ($1655); //@line 188 "shamodule.c"
        var $1657=HEAP[$A]; //@line 188 "shamodule.c"
        var $1658=HEAP[$B]; //@line 188 "shamodule.c"
        var $1659=($1657) ^ ($1658); //@line 188 "shamodule.c"
        var $1660=HEAP[$C]; //@line 188 "shamodule.c"
        var $1661=($1659) ^ ($1660); //@line 188 "shamodule.c"
        var $1662=((($1656) + ($1661))&4294967295); //@line 188 "shamodule.c"
        var $1663=HEAP[$D]; //@line 188 "shamodule.c"
        var $1664=((($1662) + ($1663))&4294967295); //@line 188 "shamodule.c"
        var $1665=HEAP[$WP]; //@line 188 "shamodule.c"
        var $1666=HEAP[$1665]; //@line 188 "shamodule.c"
        var $1667=((($1664) + ($1666))&4294967295); //@line 188 "shamodule.c"
        var $1668=((($1667) + -899497514)&4294967295); //@line 188 "shamodule.c"
        HEAP[$E]=$1668; //@line 188 "shamodule.c"
        var $1669=HEAP[$WP]; //@line 188 "shamodule.c"
        var $1670=(($1669+4)&4294967295); //@line 188 "shamodule.c"
        HEAP[$WP]=$1670; //@line 188 "shamodule.c"
        var $1671=HEAP[$A]; //@line 188 "shamodule.c"
        var $1672=((($1671))>>>0) >>> 2; //@line 188 "shamodule.c"
        var $1673=($1671) << 30; //@line 188 "shamodule.c"
        var $1674=($1672) | ($1673); //@line 188 "shamodule.c"
        HEAP[$A]=$1674; //@line 188 "shamodule.c"
        var $1675=HEAP[$E]; //@line 188 "shamodule.c"
        var $1676=((($1675))>>>0) >>> 27; //@line 188 "shamodule.c"
        var $1677=($1675) << 5; //@line 188 "shamodule.c"
        var $1678=($1676) | ($1677); //@line 188 "shamodule.c"
        var $1679=HEAP[$T]; //@line 188 "shamodule.c"
        var $1680=HEAP[$A]; //@line 188 "shamodule.c"
        var $1681=($1679) ^ ($1680); //@line 188 "shamodule.c"
        var $1682=HEAP[$B]; //@line 188 "shamodule.c"
        var $1683=($1681) ^ ($1682); //@line 188 "shamodule.c"
        var $1684=((($1678) + ($1683))&4294967295); //@line 188 "shamodule.c"
        var $1685=HEAP[$C]; //@line 188 "shamodule.c"
        var $1686=((($1684) + ($1685))&4294967295); //@line 188 "shamodule.c"
        var $1687=HEAP[$WP]; //@line 188 "shamodule.c"
        var $1688=HEAP[$1687]; //@line 188 "shamodule.c"
        var $1689=((($1686) + ($1688))&4294967295); //@line 188 "shamodule.c"
        var $1690=((($1689) + -899497514)&4294967295); //@line 188 "shamodule.c"
        HEAP[$D]=$1690; //@line 188 "shamodule.c"
        var $1691=HEAP[$WP]; //@line 188 "shamodule.c"
        var $1692=(($1691+4)&4294967295); //@line 188 "shamodule.c"
        HEAP[$WP]=$1692; //@line 188 "shamodule.c"
        var $1693=HEAP[$T]; //@line 188 "shamodule.c"
        var $1694=((($1693))>>>0) >>> 2; //@line 188 "shamodule.c"
        var $1695=($1693) << 30; //@line 188 "shamodule.c"
        var $1696=($1694) | ($1695); //@line 188 "shamodule.c"
        HEAP[$T]=$1696; //@line 188 "shamodule.c"
        var $1697=HEAP[$D]; //@line 188 "shamodule.c"
        var $1698=((($1697))>>>0) >>> 27; //@line 188 "shamodule.c"
        var $1699=($1697) << 5; //@line 188 "shamodule.c"
        var $1700=($1698) | ($1699); //@line 188 "shamodule.c"
        var $1701=HEAP[$E]; //@line 188 "shamodule.c"
        var $1702=HEAP[$T]; //@line 188 "shamodule.c"
        var $1703=($1701) ^ ($1702); //@line 188 "shamodule.c"
        var $1704=HEAP[$A]; //@line 188 "shamodule.c"
        var $1705=($1703) ^ ($1704); //@line 188 "shamodule.c"
        var $1706=((($1700) + ($1705))&4294967295); //@line 188 "shamodule.c"
        var $1707=HEAP[$B]; //@line 188 "shamodule.c"
        var $1708=((($1706) + ($1707))&4294967295); //@line 188 "shamodule.c"
        var $1709=HEAP[$WP]; //@line 188 "shamodule.c"
        var $1710=HEAP[$1709]; //@line 188 "shamodule.c"
        var $1711=((($1708) + ($1710))&4294967295); //@line 188 "shamodule.c"
        var $1712=((($1711) + -899497514)&4294967295); //@line 188 "shamodule.c"
        HEAP[$C]=$1712; //@line 188 "shamodule.c"
        var $1713=HEAP[$WP]; //@line 188 "shamodule.c"
        var $1714=(($1713+4)&4294967295); //@line 188 "shamodule.c"
        HEAP[$WP]=$1714; //@line 188 "shamodule.c"
        var $1715=HEAP[$E]; //@line 188 "shamodule.c"
        var $1716=((($1715))>>>0) >>> 2; //@line 188 "shamodule.c"
        var $1717=($1715) << 30; //@line 188 "shamodule.c"
        var $1718=($1716) | ($1717); //@line 188 "shamodule.c"
        HEAP[$E]=$1718; //@line 188 "shamodule.c"
        var $1719=HEAP[$C]; //@line 189 "shamodule.c"
        var $1720=((($1719))>>>0) >>> 27; //@line 189 "shamodule.c"
        var $1721=($1719) << 5; //@line 189 "shamodule.c"
        var $1722=($1720) | ($1721); //@line 189 "shamodule.c"
        var $1723=HEAP[$D]; //@line 189 "shamodule.c"
        var $1724=HEAP[$E]; //@line 189 "shamodule.c"
        var $1725=($1723) ^ ($1724); //@line 189 "shamodule.c"
        var $1726=HEAP[$T]; //@line 189 "shamodule.c"
        var $1727=($1725) ^ ($1726); //@line 189 "shamodule.c"
        var $1728=((($1722) + ($1727))&4294967295); //@line 189 "shamodule.c"
        var $1729=HEAP[$A]; //@line 189 "shamodule.c"
        var $1730=((($1728) + ($1729))&4294967295); //@line 189 "shamodule.c"
        var $1731=HEAP[$WP]; //@line 189 "shamodule.c"
        var $1732=HEAP[$1731]; //@line 189 "shamodule.c"
        var $1733=((($1730) + ($1732))&4294967295); //@line 189 "shamodule.c"
        var $1734=((($1733) + -899497514)&4294967295); //@line 189 "shamodule.c"
        HEAP[$B]=$1734; //@line 189 "shamodule.c"
        var $1735=HEAP[$WP]; //@line 189 "shamodule.c"
        var $1736=(($1735+4)&4294967295); //@line 189 "shamodule.c"
        HEAP[$WP]=$1736; //@line 189 "shamodule.c"
        var $1737=HEAP[$D]; //@line 189 "shamodule.c"
        var $1738=((($1737))>>>0) >>> 2; //@line 189 "shamodule.c"
        var $1739=($1737) << 30; //@line 189 "shamodule.c"
        var $1740=($1738) | ($1739); //@line 189 "shamodule.c"
        HEAP[$D]=$1740; //@line 189 "shamodule.c"
        var $1741=HEAP[$B]; //@line 189 "shamodule.c"
        var $1742=((($1741))>>>0) >>> 27; //@line 189 "shamodule.c"
        var $1743=($1741) << 5; //@line 189 "shamodule.c"
        var $1744=($1742) | ($1743); //@line 189 "shamodule.c"
        var $1745=HEAP[$C]; //@line 189 "shamodule.c"
        var $1746=HEAP[$D]; //@line 189 "shamodule.c"
        var $1747=($1745) ^ ($1746); //@line 189 "shamodule.c"
        var $1748=HEAP[$E]; //@line 189 "shamodule.c"
        var $1749=($1747) ^ ($1748); //@line 189 "shamodule.c"
        var $1750=((($1744) + ($1749))&4294967295); //@line 189 "shamodule.c"
        var $1751=HEAP[$T]; //@line 189 "shamodule.c"
        var $1752=((($1750) + ($1751))&4294967295); //@line 189 "shamodule.c"
        var $1753=HEAP[$WP]; //@line 189 "shamodule.c"
        var $1754=HEAP[$1753]; //@line 189 "shamodule.c"
        var $1755=((($1752) + ($1754))&4294967295); //@line 189 "shamodule.c"
        var $1756=((($1755) + -899497514)&4294967295); //@line 189 "shamodule.c"
        HEAP[$A]=$1756; //@line 189 "shamodule.c"
        var $1757=HEAP[$WP]; //@line 189 "shamodule.c"
        var $1758=(($1757+4)&4294967295); //@line 189 "shamodule.c"
        HEAP[$WP]=$1758; //@line 189 "shamodule.c"
        var $1759=HEAP[$C]; //@line 189 "shamodule.c"
        var $1760=((($1759))>>>0) >>> 2; //@line 189 "shamodule.c"
        var $1761=($1759) << 30; //@line 189 "shamodule.c"
        var $1762=($1760) | ($1761); //@line 189 "shamodule.c"
        HEAP[$C]=$1762; //@line 189 "shamodule.c"
        var $1763=HEAP[$A]; //@line 189 "shamodule.c"
        var $1764=((($1763))>>>0) >>> 27; //@line 189 "shamodule.c"
        var $1765=($1763) << 5; //@line 189 "shamodule.c"
        var $1766=($1764) | ($1765); //@line 189 "shamodule.c"
        var $1767=HEAP[$B]; //@line 189 "shamodule.c"
        var $1768=HEAP[$C]; //@line 189 "shamodule.c"
        var $1769=($1767) ^ ($1768); //@line 189 "shamodule.c"
        var $1770=HEAP[$D]; //@line 189 "shamodule.c"
        var $1771=($1769) ^ ($1770); //@line 189 "shamodule.c"
        var $1772=((($1766) + ($1771))&4294967295); //@line 189 "shamodule.c"
        var $1773=HEAP[$E]; //@line 189 "shamodule.c"
        var $1774=((($1772) + ($1773))&4294967295); //@line 189 "shamodule.c"
        var $1775=HEAP[$WP]; //@line 189 "shamodule.c"
        var $1776=HEAP[$1775]; //@line 189 "shamodule.c"
        var $1777=((($1774) + ($1776))&4294967295); //@line 189 "shamodule.c"
        var $1778=((($1777) + -899497514)&4294967295); //@line 189 "shamodule.c"
        HEAP[$T]=$1778; //@line 189 "shamodule.c"
        var $1779=HEAP[$WP]; //@line 189 "shamodule.c"
        var $1780=(($1779+4)&4294967295); //@line 189 "shamodule.c"
        HEAP[$WP]=$1780; //@line 189 "shamodule.c"
        var $1781=HEAP[$B]; //@line 189 "shamodule.c"
        var $1782=((($1781))>>>0) >>> 2; //@line 189 "shamodule.c"
        var $1783=($1781) << 30; //@line 189 "shamodule.c"
        var $1784=($1782) | ($1783); //@line 189 "shamodule.c"
        HEAP[$B]=$1784; //@line 189 "shamodule.c"
        var $1785=HEAP[$T]; //@line 189 "shamodule.c"
        var $1786=((($1785))>>>0) >>> 27; //@line 189 "shamodule.c"
        var $1787=($1785) << 5; //@line 189 "shamodule.c"
        var $1788=($1786) | ($1787); //@line 189 "shamodule.c"
        var $1789=HEAP[$A]; //@line 189 "shamodule.c"
        var $1790=HEAP[$B]; //@line 189 "shamodule.c"
        var $1791=($1789) ^ ($1790); //@line 189 "shamodule.c"
        var $1792=HEAP[$C]; //@line 189 "shamodule.c"
        var $1793=($1791) ^ ($1792); //@line 189 "shamodule.c"
        var $1794=((($1788) + ($1793))&4294967295); //@line 189 "shamodule.c"
        var $1795=HEAP[$D]; //@line 189 "shamodule.c"
        var $1796=((($1794) + ($1795))&4294967295); //@line 189 "shamodule.c"
        var $1797=HEAP[$WP]; //@line 189 "shamodule.c"
        var $1798=HEAP[$1797]; //@line 189 "shamodule.c"
        var $1799=((($1796) + ($1798))&4294967295); //@line 189 "shamodule.c"
        var $1800=((($1799) + -899497514)&4294967295); //@line 189 "shamodule.c"
        HEAP[$E]=$1800; //@line 189 "shamodule.c"
        var $1801=HEAP[$WP]; //@line 189 "shamodule.c"
        var $1802=(($1801+4)&4294967295); //@line 189 "shamodule.c"
        HEAP[$WP]=$1802; //@line 189 "shamodule.c"
        var $1803=HEAP[$A]; //@line 189 "shamodule.c"
        var $1804=((($1803))>>>0) >>> 2; //@line 189 "shamodule.c"
        var $1805=($1803) << 30; //@line 189 "shamodule.c"
        var $1806=($1804) | ($1805); //@line 189 "shamodule.c"
        HEAP[$A]=$1806; //@line 189 "shamodule.c"
        var $1807=HEAP[$E]; //@line 189 "shamodule.c"
        var $1808=((($1807))>>>0) >>> 27; //@line 189 "shamodule.c"
        var $1809=($1807) << 5; //@line 189 "shamodule.c"
        var $1810=($1808) | ($1809); //@line 189 "shamodule.c"
        var $1811=HEAP[$T]; //@line 189 "shamodule.c"
        var $1812=HEAP[$A]; //@line 189 "shamodule.c"
        var $1813=($1811) ^ ($1812); //@line 189 "shamodule.c"
        var $1814=HEAP[$B]; //@line 189 "shamodule.c"
        var $1815=($1813) ^ ($1814); //@line 189 "shamodule.c"
        var $1816=((($1810) + ($1815))&4294967295); //@line 189 "shamodule.c"
        var $1817=HEAP[$C]; //@line 189 "shamodule.c"
        var $1818=((($1816) + ($1817))&4294967295); //@line 189 "shamodule.c"
        var $1819=HEAP[$WP]; //@line 189 "shamodule.c"
        var $1820=HEAP[$1819]; //@line 189 "shamodule.c"
        var $1821=((($1818) + ($1820))&4294967295); //@line 189 "shamodule.c"
        var $1822=((($1821) + -899497514)&4294967295); //@line 189 "shamodule.c"
        HEAP[$D]=$1822; //@line 189 "shamodule.c"
        var $1823=HEAP[$WP]; //@line 189 "shamodule.c"
        var $1824=(($1823+4)&4294967295); //@line 189 "shamodule.c"
        HEAP[$WP]=$1824; //@line 189 "shamodule.c"
        var $1825=HEAP[$T]; //@line 189 "shamodule.c"
        var $1826=((($1825))>>>0) >>> 2; //@line 189 "shamodule.c"
        var $1827=($1825) << 30; //@line 189 "shamodule.c"
        var $1828=($1826) | ($1827); //@line 189 "shamodule.c"
        HEAP[$T]=$1828; //@line 189 "shamodule.c"
        var $1829=HEAP[$D]; //@line 189 "shamodule.c"
        var $1830=((($1829))>>>0) >>> 27; //@line 189 "shamodule.c"
        var $1831=($1829) << 5; //@line 189 "shamodule.c"
        var $1832=($1830) | ($1831); //@line 189 "shamodule.c"
        var $1833=HEAP[$E]; //@line 189 "shamodule.c"
        var $1834=HEAP[$T]; //@line 189 "shamodule.c"
        var $1835=($1833) ^ ($1834); //@line 189 "shamodule.c"
        var $1836=HEAP[$A]; //@line 189 "shamodule.c"
        var $1837=($1835) ^ ($1836); //@line 189 "shamodule.c"
        var $1838=((($1832) + ($1837))&4294967295); //@line 189 "shamodule.c"
        var $1839=HEAP[$B]; //@line 189 "shamodule.c"
        var $1840=((($1838) + ($1839))&4294967295); //@line 189 "shamodule.c"
        var $1841=HEAP[$WP]; //@line 189 "shamodule.c"
        var $1842=HEAP[$1841]; //@line 189 "shamodule.c"
        var $1843=((($1840) + ($1842))&4294967295); //@line 189 "shamodule.c"
        var $1844=((($1843) + -899497514)&4294967295); //@line 189 "shamodule.c"
        HEAP[$C]=$1844; //@line 189 "shamodule.c"
        var $1845=HEAP[$WP]; //@line 189 "shamodule.c"
        var $1846=(($1845+4)&4294967295); //@line 189 "shamodule.c"
        HEAP[$WP]=$1846; //@line 189 "shamodule.c"
        var $1847=HEAP[$E]; //@line 189 "shamodule.c"
        var $1848=((($1847))>>>0) >>> 2; //@line 189 "shamodule.c"
        var $1849=($1847) << 30; //@line 189 "shamodule.c"
        var $1850=($1848) | ($1849); //@line 189 "shamodule.c"
        HEAP[$E]=$1850; //@line 189 "shamodule.c"
        var $1851=HEAP[$C]; //@line 189 "shamodule.c"
        var $1852=((($1851))>>>0) >>> 27; //@line 189 "shamodule.c"
        var $1853=($1851) << 5; //@line 189 "shamodule.c"
        var $1854=($1852) | ($1853); //@line 189 "shamodule.c"
        var $1855=HEAP[$D]; //@line 189 "shamodule.c"
        var $1856=HEAP[$E]; //@line 189 "shamodule.c"
        var $1857=($1855) ^ ($1856); //@line 189 "shamodule.c"
        var $1858=HEAP[$T]; //@line 189 "shamodule.c"
        var $1859=($1857) ^ ($1858); //@line 189 "shamodule.c"
        var $1860=((($1854) + ($1859))&4294967295); //@line 189 "shamodule.c"
        var $1861=HEAP[$A]; //@line 189 "shamodule.c"
        var $1862=((($1860) + ($1861))&4294967295); //@line 189 "shamodule.c"
        var $1863=HEAP[$WP]; //@line 189 "shamodule.c"
        var $1864=HEAP[$1863]; //@line 189 "shamodule.c"
        var $1865=((($1862) + ($1864))&4294967295); //@line 189 "shamodule.c"
        var $1866=((($1865) + -899497514)&4294967295); //@line 189 "shamodule.c"
        HEAP[$B]=$1866; //@line 189 "shamodule.c"
        var $1867=HEAP[$WP]; //@line 189 "shamodule.c"
        var $1868=(($1867+4)&4294967295); //@line 189 "shamodule.c"
        HEAP[$WP]=$1868; //@line 189 "shamodule.c"
        var $1869=HEAP[$D]; //@line 189 "shamodule.c"
        var $1870=((($1869))>>>0) >>> 2; //@line 189 "shamodule.c"
        var $1871=($1869) << 30; //@line 189 "shamodule.c"
        var $1872=($1870) | ($1871); //@line 189 "shamodule.c"
        HEAP[$D]=$1872; //@line 189 "shamodule.c"
        var $1873=HEAP[$B]; //@line 189 "shamodule.c"
        var $1874=((($1873))>>>0) >>> 27; //@line 189 "shamodule.c"
        var $1875=($1873) << 5; //@line 189 "shamodule.c"
        var $1876=($1874) | ($1875); //@line 189 "shamodule.c"
        var $1877=HEAP[$C]; //@line 189 "shamodule.c"
        var $1878=HEAP[$D]; //@line 189 "shamodule.c"
        var $1879=($1877) ^ ($1878); //@line 189 "shamodule.c"
        var $1880=HEAP[$E]; //@line 189 "shamodule.c"
        var $1881=($1879) ^ ($1880); //@line 189 "shamodule.c"
        var $1882=((($1876) + ($1881))&4294967295); //@line 189 "shamodule.c"
        var $1883=HEAP[$T]; //@line 189 "shamodule.c"
        var $1884=((($1882) + ($1883))&4294967295); //@line 189 "shamodule.c"
        var $1885=HEAP[$WP]; //@line 189 "shamodule.c"
        var $1886=HEAP[$1885]; //@line 189 "shamodule.c"
        var $1887=((($1884) + ($1886))&4294967295); //@line 189 "shamodule.c"
        var $1888=((($1887) + -899497514)&4294967295); //@line 189 "shamodule.c"
        HEAP[$A]=$1888; //@line 189 "shamodule.c"
        var $1889=HEAP[$WP]; //@line 189 "shamodule.c"
        var $1890=(($1889+4)&4294967295); //@line 189 "shamodule.c"
        HEAP[$WP]=$1890; //@line 189 "shamodule.c"
        var $1891=HEAP[$C]; //@line 189 "shamodule.c"
        var $1892=((($1891))>>>0) >>> 2; //@line 189 "shamodule.c"
        var $1893=($1891) << 30; //@line 189 "shamodule.c"
        var $1894=($1892) | ($1893); //@line 189 "shamodule.c"
        HEAP[$C]=$1894; //@line 189 "shamodule.c"
        var $1895=HEAP[$A]; //@line 189 "shamodule.c"
        var $1896=((($1895))>>>0) >>> 27; //@line 189 "shamodule.c"
        var $1897=($1895) << 5; //@line 189 "shamodule.c"
        var $1898=($1896) | ($1897); //@line 189 "shamodule.c"
        var $1899=HEAP[$B]; //@line 189 "shamodule.c"
        var $1900=HEAP[$C]; //@line 189 "shamodule.c"
        var $1901=($1899) ^ ($1900); //@line 189 "shamodule.c"
        var $1902=HEAP[$D]; //@line 189 "shamodule.c"
        var $1903=($1901) ^ ($1902); //@line 189 "shamodule.c"
        var $1904=((($1898) + ($1903))&4294967295); //@line 189 "shamodule.c"
        var $1905=HEAP[$E]; //@line 189 "shamodule.c"
        var $1906=((($1904) + ($1905))&4294967295); //@line 189 "shamodule.c"
        var $1907=HEAP[$WP]; //@line 189 "shamodule.c"
        var $1908=HEAP[$1907]; //@line 189 "shamodule.c"
        var $1909=((($1906) + ($1908))&4294967295); //@line 189 "shamodule.c"
        var $1910=((($1909) + -899497514)&4294967295); //@line 189 "shamodule.c"
        HEAP[$T]=$1910; //@line 189 "shamodule.c"
        var $1911=HEAP[$WP]; //@line 189 "shamodule.c"
        var $1912=(($1911+4)&4294967295); //@line 189 "shamodule.c"
        HEAP[$WP]=$1912; //@line 189 "shamodule.c"
        var $1913=HEAP[$B]; //@line 189 "shamodule.c"
        var $1914=((($1913))>>>0) >>> 2; //@line 189 "shamodule.c"
        var $1915=($1913) << 30; //@line 189 "shamodule.c"
        var $1916=($1914) | ($1915); //@line 189 "shamodule.c"
        HEAP[$B]=$1916; //@line 189 "shamodule.c"
        var $1917=HEAP[$T]; //@line 189 "shamodule.c"
        var $1918=((($1917))>>>0) >>> 27; //@line 189 "shamodule.c"
        var $1919=($1917) << 5; //@line 189 "shamodule.c"
        var $1920=($1918) | ($1919); //@line 189 "shamodule.c"
        var $1921=HEAP[$A]; //@line 189 "shamodule.c"
        var $1922=HEAP[$B]; //@line 189 "shamodule.c"
        var $1923=($1921) ^ ($1922); //@line 189 "shamodule.c"
        var $1924=HEAP[$C]; //@line 189 "shamodule.c"
        var $1925=($1923) ^ ($1924); //@line 189 "shamodule.c"
        var $1926=((($1920) + ($1925))&4294967295); //@line 189 "shamodule.c"
        var $1927=HEAP[$D]; //@line 189 "shamodule.c"
        var $1928=((($1926) + ($1927))&4294967295); //@line 189 "shamodule.c"
        var $1929=HEAP[$WP]; //@line 189 "shamodule.c"
        var $1930=HEAP[$1929]; //@line 189 "shamodule.c"
        var $1931=((($1928) + ($1930))&4294967295); //@line 189 "shamodule.c"
        var $1932=((($1931) + -899497514)&4294967295); //@line 189 "shamodule.c"
        HEAP[$E]=$1932; //@line 189 "shamodule.c"
        var $1933=HEAP[$WP]; //@line 189 "shamodule.c"
        var $1934=(($1933+4)&4294967295); //@line 189 "shamodule.c"
        HEAP[$WP]=$1934; //@line 189 "shamodule.c"
        var $1935=HEAP[$A]; //@line 189 "shamodule.c"
        var $1936=((($1935))>>>0) >>> 2; //@line 189 "shamodule.c"
        var $1937=($1935) << 30; //@line 189 "shamodule.c"
        var $1938=($1936) | ($1937); //@line 189 "shamodule.c"
        HEAP[$A]=$1938; //@line 189 "shamodule.c"
        var $1939=HEAP[$sha_info_addr]; //@line 190 "shamodule.c"
        var $1940=(($1939+8)&4294967295); //@line 190 "shamodule.c"
        var $1941=(($1940)&4294967295); //@line 190 "shamodule.c"
        var $1942=HEAP[$1941]; //@line 190 "shamodule.c"
        var $1943=HEAP[$E]; //@line 190 "shamodule.c"
        var $1944=((($1942) + ($1943))&4294967295); //@line 190 "shamodule.c"
        var $1945=HEAP[$sha_info_addr]; //@line 190 "shamodule.c"
        var $1946=(($1945+8)&4294967295); //@line 190 "shamodule.c"
        var $1947=(($1946)&4294967295); //@line 190 "shamodule.c"
        HEAP[$1947]=$1944; //@line 190 "shamodule.c"
        var $1948=HEAP[$sha_info_addr]; //@line 191 "shamodule.c"
        var $1949=(($1948+8)&4294967295); //@line 191 "shamodule.c"
        var $1950=(($1949+4)&4294967295); //@line 191 "shamodule.c"
        var $1951=HEAP[$1950]; //@line 191 "shamodule.c"
        var $1952=HEAP[$T]; //@line 191 "shamodule.c"
        var $1953=((($1951) + ($1952))&4294967295); //@line 191 "shamodule.c"
        var $1954=HEAP[$sha_info_addr]; //@line 191 "shamodule.c"
        var $1955=(($1954+8)&4294967295); //@line 191 "shamodule.c"
        var $1956=(($1955+4)&4294967295); //@line 191 "shamodule.c"
        HEAP[$1956]=$1953; //@line 191 "shamodule.c"
        var $1957=HEAP[$sha_info_addr]; //@line 192 "shamodule.c"
        var $1958=(($1957+8)&4294967295); //@line 192 "shamodule.c"
        var $1959=(($1958+8)&4294967295); //@line 192 "shamodule.c"
        var $1960=HEAP[$1959]; //@line 192 "shamodule.c"
        var $1961=HEAP[$A]; //@line 192 "shamodule.c"
        var $1962=((($1960) + ($1961))&4294967295); //@line 192 "shamodule.c"
        var $1963=HEAP[$sha_info_addr]; //@line 192 "shamodule.c"
        var $1964=(($1963+8)&4294967295); //@line 192 "shamodule.c"
        var $1965=(($1964+8)&4294967295); //@line 192 "shamodule.c"
        HEAP[$1965]=$1962; //@line 192 "shamodule.c"
        var $1966=HEAP[$sha_info_addr]; //@line 193 "shamodule.c"
        var $1967=(($1966+8)&4294967295); //@line 193 "shamodule.c"
        var $1968=(($1967+12)&4294967295); //@line 193 "shamodule.c"
        var $1969=HEAP[$1968]; //@line 193 "shamodule.c"
        var $1970=HEAP[$B]; //@line 193 "shamodule.c"
        var $1971=((($1969) + ($1970))&4294967295); //@line 193 "shamodule.c"
        var $1972=HEAP[$sha_info_addr]; //@line 193 "shamodule.c"
        var $1973=(($1972+8)&4294967295); //@line 193 "shamodule.c"
        var $1974=(($1973+12)&4294967295); //@line 193 "shamodule.c"
        HEAP[$1974]=$1971; //@line 193 "shamodule.c"
        var $1975=HEAP[$sha_info_addr]; //@line 194 "shamodule.c"
        var $1976=(($1975+8)&4294967295); //@line 194 "shamodule.c"
        var $1977=(($1976+16)&4294967295); //@line 194 "shamodule.c"
        var $1978=HEAP[$1977]; //@line 194 "shamodule.c"
        var $1979=HEAP[$C]; //@line 194 "shamodule.c"
        var $1980=((($1978) + ($1979))&4294967295); //@line 194 "shamodule.c"
        var $1981=HEAP[$sha_info_addr]; //@line 194 "shamodule.c"
        var $1982=(($1981+8)&4294967295); //@line 194 "shamodule.c"
        var $1983=(($1982+16)&4294967295); //@line 194 "shamodule.c"
        HEAP[$1983]=$1980; //@line 194 "shamodule.c"
        __label__ = 4; break; //@line 217 "shamodule.c"
      case 4: // $return
        STACKTOP = __stackBase__;
        return; //@line 217 "shamodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _sha_init($sha_info) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $sha_info_addr=__stackBase__;
        var $i=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$sha_info_addr]=$sha_info;
        HEAP[$i]=1; //@line 224 "shamodule.c"
        var $0=HEAP[$sha_info_addr]; //@line 224 "shamodule.c"
        var $1=(($0+100)&4294967295); //@line 224 "shamodule.c"
        HEAP[$1]=0; //@line 224 "shamodule.c"
        var $i1=$i; //@line 224 "shamodule.c"
        var $2=HEAP[$i1]; //@line 224 "shamodule.c"
        var $3=reSign(($2), 8, 0)==1; //@line 224 "shamodule.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 224 "shamodule.c"
      case 1: // $bb
        var $4=HEAP[$sha_info_addr]; //@line 224 "shamodule.c"
        var $5=(($4+100)&4294967295); //@line 224 "shamodule.c"
        HEAP[$5]=1; //@line 224 "shamodule.c"
        __label__ = 2; break; //@line 224 "shamodule.c"
      case 2: // $bb3
        var $6=HEAP[$sha_info_addr]; //@line 226 "shamodule.c"
        var $7=(($6+8)&4294967295); //@line 226 "shamodule.c"
        var $8=(($7)&4294967295); //@line 226 "shamodule.c"
        HEAP[$8]=1732584193; //@line 226 "shamodule.c"
        var $9=HEAP[$sha_info_addr]; //@line 227 "shamodule.c"
        var $10=(($9+8)&4294967295); //@line 227 "shamodule.c"
        var $11=(($10+4)&4294967295); //@line 227 "shamodule.c"
        HEAP[$11]=-271733879; //@line 227 "shamodule.c"
        var $12=HEAP[$sha_info_addr]; //@line 228 "shamodule.c"
        var $13=(($12+8)&4294967295); //@line 228 "shamodule.c"
        var $14=(($13+8)&4294967295); //@line 228 "shamodule.c"
        HEAP[$14]=-1732584194; //@line 228 "shamodule.c"
        var $15=HEAP[$sha_info_addr]; //@line 229 "shamodule.c"
        var $16=(($15+8)&4294967295); //@line 229 "shamodule.c"
        var $17=(($16+12)&4294967295); //@line 229 "shamodule.c"
        HEAP[$17]=271733878; //@line 229 "shamodule.c"
        var $18=HEAP[$sha_info_addr]; //@line 230 "shamodule.c"
        var $19=(($18+8)&4294967295); //@line 230 "shamodule.c"
        var $20=(($19+16)&4294967295); //@line 230 "shamodule.c"
        HEAP[$20]=-1009589776; //@line 230 "shamodule.c"
        var $21=HEAP[$sha_info_addr]; //@line 231 "shamodule.c"
        var $22=(($21+28)&4294967295); //@line 231 "shamodule.c"
        HEAP[$22]=0; //@line 231 "shamodule.c"
        var $23=HEAP[$sha_info_addr]; //@line 232 "shamodule.c"
        var $24=(($23+32)&4294967295); //@line 232 "shamodule.c"
        HEAP[$24]=0; //@line 232 "shamodule.c"
        var $25=HEAP[$sha_info_addr]; //@line 233 "shamodule.c"
        var $26=(($25+104)&4294967295); //@line 233 "shamodule.c"
        HEAP[$26]=0; //@line 233 "shamodule.c"
        __label__ = 3; break; //@line 234 "shamodule.c"
      case 3: // $return
        STACKTOP = __stackBase__;
        return; //@line 234 "shamodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _sha_update($sha_info, $buffer, $count) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $sha_info_addr=__stackBase__;
        var $buffer_addr=__stackBase__+4;
        var $count_addr=__stackBase__+8;
        var $i=__stackBase__+12;
        var $clo=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$sha_info_addr]=$sha_info;
        HEAP[$buffer_addr]=$buffer;
        HEAP[$count_addr]=$count;
        var $0=HEAP[$sha_info_addr]; //@line 244 "shamodule.c"
        var $1=(($0+28)&4294967295); //@line 244 "shamodule.c"
        var $2=HEAP[$1]; //@line 244 "shamodule.c"
        var $3=HEAP[$count_addr]; //@line 244 "shamodule.c"
        var $4=($3) << 3; //@line 244 "shamodule.c"
        var $5=((($2) + ($4))&4294967295); //@line 244 "shamodule.c"
        HEAP[$clo]=$5; //@line 244 "shamodule.c"
        var $6=HEAP[$sha_info_addr]; //@line 245 "shamodule.c"
        var $7=(($6+28)&4294967295); //@line 245 "shamodule.c"
        var $8=HEAP[$7]; //@line 245 "shamodule.c"
        var $9=HEAP[$clo]; //@line 245 "shamodule.c"
        var $10=((($8))>>>0) > ((($9))>>>0); //@line 245 "shamodule.c"
        if ($10) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 245 "shamodule.c"
      case 1: // $bb
        var $11=HEAP[$sha_info_addr]; //@line 246 "shamodule.c"
        var $12=(($11+32)&4294967295); //@line 246 "shamodule.c"
        var $13=HEAP[$12]; //@line 246 "shamodule.c"
        var $14=((($13) + 1)&4294967295); //@line 246 "shamodule.c"
        var $15=HEAP[$sha_info_addr]; //@line 246 "shamodule.c"
        var $16=(($15+32)&4294967295); //@line 246 "shamodule.c"
        HEAP[$16]=$14; //@line 246 "shamodule.c"
        __label__ = 2; break; //@line 246 "shamodule.c"
      case 2: // $bb1
        var $17=HEAP[$sha_info_addr]; //@line 248 "shamodule.c"
        var $18=(($17+28)&4294967295); //@line 248 "shamodule.c"
        var $19=HEAP[$clo]; //@line 248 "shamodule.c"
        HEAP[$18]=$19; //@line 248 "shamodule.c"
        var $20=HEAP[$sha_info_addr]; //@line 249 "shamodule.c"
        var $21=(($20+32)&4294967295); //@line 249 "shamodule.c"
        var $22=HEAP[$21]; //@line 249 "shamodule.c"
        var $23=HEAP[$count_addr]; //@line 249 "shamodule.c"
        var $24=((($23))>>>0) >>> 29; //@line 249 "shamodule.c"
        var $25=((($22) + ($24))&4294967295); //@line 249 "shamodule.c"
        var $26=HEAP[$sha_info_addr]; //@line 249 "shamodule.c"
        var $27=(($26+32)&4294967295); //@line 249 "shamodule.c"
        HEAP[$27]=$25; //@line 249 "shamodule.c"
        var $28=HEAP[$sha_info_addr]; //@line 250 "shamodule.c"
        var $29=(($28+104)&4294967295); //@line 250 "shamodule.c"
        var $30=HEAP[$29]; //@line 250 "shamodule.c"
        var $31=((($30))|0)!=0; //@line 250 "shamodule.c"
        if ($31) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 250 "shamodule.c"
      case 3: // $bb2
        var $32=HEAP[$sha_info_addr]; //@line 251 "shamodule.c"
        var $33=(($32+104)&4294967295); //@line 251 "shamodule.c"
        var $34=HEAP[$33]; //@line 251 "shamodule.c"
        var $35=((64 - ($34))&4294967295); //@line 251 "shamodule.c"
        HEAP[$i]=$35; //@line 251 "shamodule.c"
        var $36=HEAP[$i]; //@line 252 "shamodule.c"
        var $37=HEAP[$count_addr]; //@line 252 "shamodule.c"
        var $38=((($36))>>>0) > ((($37))>>>0); //@line 252 "shamodule.c"
        if ($38) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 252 "shamodule.c"
      case 4: // $bb3
        var $39=HEAP[$count_addr]; //@line 253 "shamodule.c"
        HEAP[$i]=$39; //@line 253 "shamodule.c"
        __label__ = 5; break; //@line 253 "shamodule.c"
      case 5: // $bb4
        var $40=HEAP[$sha_info_addr]; //@line 255 "shamodule.c"
        var $41=(($40+36)&4294967295); //@line 255 "shamodule.c"
        var $42=(($41)&4294967295); //@line 255 "shamodule.c"
        var $43=HEAP[$sha_info_addr]; //@line 255 "shamodule.c"
        var $44=(($43+104)&4294967295); //@line 255 "shamodule.c"
        var $45=HEAP[$44]; //@line 255 "shamodule.c"
        var $46=(($42+$45)&4294967295); //@line 255 "shamodule.c"
        var $47=HEAP[$buffer_addr]; //@line 255 "shamodule.c"
        var $48=HEAP[$i]; //@line 255 "shamodule.c"
        _llvm_memcpy_p0i8_p0i8_i32($46, $47, $48, 1, 0); //@line 255 "shamodule.c"
        var $49=HEAP[$count_addr]; //@line 256 "shamodule.c"
        var $50=HEAP[$i]; //@line 256 "shamodule.c"
        var $51=((($49) - ($50))&4294967295); //@line 256 "shamodule.c"
        HEAP[$count_addr]=$51; //@line 256 "shamodule.c"
        var $52=HEAP[$buffer_addr]; //@line 257 "shamodule.c"
        var $53=HEAP[$i]; //@line 257 "shamodule.c"
        var $54=(($52+$53)&4294967295); //@line 257 "shamodule.c"
        HEAP[$buffer_addr]=$54; //@line 257 "shamodule.c"
        var $55=HEAP[$sha_info_addr]; //@line 258 "shamodule.c"
        var $56=(($55+104)&4294967295); //@line 258 "shamodule.c"
        var $57=HEAP[$56]; //@line 258 "shamodule.c"
        var $58=HEAP[$i]; //@line 258 "shamodule.c"
        var $59=((($57) + ($58))&4294967295); //@line 258 "shamodule.c"
        var $60=HEAP[$sha_info_addr]; //@line 258 "shamodule.c"
        var $61=(($60+104)&4294967295); //@line 258 "shamodule.c"
        HEAP[$61]=$59; //@line 258 "shamodule.c"
        var $62=HEAP[$sha_info_addr]; //@line 259 "shamodule.c"
        var $63=(($62+104)&4294967295); //@line 259 "shamodule.c"
        var $64=HEAP[$63]; //@line 259 "shamodule.c"
        var $65=((($64))|0)==64; //@line 259 "shamodule.c"
        if ($65) { __label__ = 6; break; } else { __label__ = 11; break; } //@line 259 "shamodule.c"
      case 6: // $bb5
        var $66=HEAP[$sha_info_addr]; //@line 260 "shamodule.c"
        _sha_transform($66); //@line 260 "shamodule.c"
        __label__ = 7; break; //@line 260 "shamodule.c"
      case 7: // $bb6
        __label__ = 9; break; //@line 260 "shamodule.c"
      case 8: // $bb7
        var $67=HEAP[$sha_info_addr]; //@line 267 "shamodule.c"
        var $68=(($67+36)&4294967295); //@line 267 "shamodule.c"
        var $69=(($68)&4294967295); //@line 267 "shamodule.c"
        var $70=HEAP[$buffer_addr]; //@line 267 "shamodule.c"
        _llvm_memcpy_p0i8_p0i8_i32($69, $70, 64, 1, 0); //@line 267 "shamodule.c"
        var $71=HEAP[$buffer_addr]; //@line 268 "shamodule.c"
        var $72=(($71+64)&4294967295); //@line 268 "shamodule.c"
        HEAP[$buffer_addr]=$72; //@line 268 "shamodule.c"
        var $73=HEAP[$count_addr]; //@line 269 "shamodule.c"
        var $74=((($73) - 64)&4294967295); //@line 269 "shamodule.c"
        HEAP[$count_addr]=$74; //@line 269 "shamodule.c"
        var $75=HEAP[$sha_info_addr]; //@line 270 "shamodule.c"
        _sha_transform($75); //@line 270 "shamodule.c"
        __label__ = 9; break; //@line 270 "shamodule.c"
      case 9: // $bb8
        var $76=HEAP[$count_addr]; //@line 266 "shamodule.c"
        var $77=((($76))>>>0) > 63; //@line 266 "shamodule.c"
        if ($77) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 266 "shamodule.c"
      case 10: // $bb9
        var $78=HEAP[$sha_info_addr]; //@line 272 "shamodule.c"
        var $79=(($78+36)&4294967295); //@line 272 "shamodule.c"
        var $80=(($79)&4294967295); //@line 272 "shamodule.c"
        var $81=HEAP[$buffer_addr]; //@line 272 "shamodule.c"
        var $82=HEAP[$count_addr]; //@line 272 "shamodule.c"
        _llvm_memcpy_p0i8_p0i8_i32($80, $81, $82, 1, 0); //@line 272 "shamodule.c"
        var $83=HEAP[$count_addr]; //@line 273 "shamodule.c"
        var $84=HEAP[$sha_info_addr]; //@line 273 "shamodule.c"
        var $85=(($84+104)&4294967295); //@line 273 "shamodule.c"
        HEAP[$85]=$83; //@line 273 "shamodule.c"
        __label__ = 11; break; //@line 273 "shamodule.c"
      case 11: // $bb10
        __label__ = 12; break; //@line 263 "shamodule.c"
      case 12: // $return
        STACKTOP = __stackBase__;
        return; //@line 263 "shamodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _sha_final($digest, $sha_info) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $digest_addr=__stackBase__;
        var $sha_info_addr=__stackBase__+4;
        var $count=__stackBase__+8;
        var $lo_bit_count=__stackBase__+12;
        var $hi_bit_count=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$digest_addr]=$digest;
        HEAP[$sha_info_addr]=$sha_info;
        var $0=HEAP[$sha_info_addr]; //@line 284 "shamodule.c"
        var $1=(($0+28)&4294967295); //@line 284 "shamodule.c"
        var $2=HEAP[$1]; //@line 284 "shamodule.c"
        HEAP[$lo_bit_count]=$2; //@line 284 "shamodule.c"
        var $3=HEAP[$sha_info_addr]; //@line 285 "shamodule.c"
        var $4=(($3+32)&4294967295); //@line 285 "shamodule.c"
        var $5=HEAP[$4]; //@line 285 "shamodule.c"
        HEAP[$hi_bit_count]=$5; //@line 285 "shamodule.c"
        var $6=HEAP[$lo_bit_count]; //@line 286 "shamodule.c"
        var $7=((($6))>>>0) >>> 3; //@line 286 "shamodule.c"
        var $8=($7) & 63; //@line 286 "shamodule.c"
        HEAP[$count]=$8; //@line 286 "shamodule.c"
        var $9=HEAP[$sha_info_addr]; //@line 287 "shamodule.c"
        var $10=(($9+36)&4294967295); //@line 287 "shamodule.c"
        var $11=(($10)&4294967295); //@line 287 "shamodule.c"
        var $12=HEAP[$count]; //@line 287 "shamodule.c"
        var $13=(($11+$12)&4294967295); //@line 287 "shamodule.c"
        HEAP[$13]=-128; //@line 287 "shamodule.c"
        var $14=HEAP[$count]; //@line 287 "shamodule.c"
        var $15=((($14) + 1)&4294967295); //@line 287 "shamodule.c"
        HEAP[$count]=$15; //@line 287 "shamodule.c"
        var $16=HEAP[$count]; //@line 288 "shamodule.c"
        var $17=((($16))|0) > 56; //@line 288 "shamodule.c"
        if ($17) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 288 "shamodule.c"
      case 1: // $bb
        var $18=HEAP[$count]; //@line 289 "shamodule.c"
        var $19=((64 - ($18))&4294967295); //@line 289 "shamodule.c"
        var $20=HEAP[$sha_info_addr]; //@line 289 "shamodule.c"
        var $21=(($20+36)&4294967295); //@line 289 "shamodule.c"
        var $22=(($21)&4294967295); //@line 289 "shamodule.c"
        var $23=HEAP[$count]; //@line 289 "shamodule.c"
        var $24=(($22+$23)&4294967295); //@line 289 "shamodule.c"
        _llvm_memset_p0i8_i32($24, 0, $19, 1, 0); //@line 289 "shamodule.c"
        var $25=HEAP[$sha_info_addr]; //@line 291 "shamodule.c"
        _sha_transform($25); //@line 291 "shamodule.c"
        var $26=HEAP[$sha_info_addr]; //@line 292 "shamodule.c"
        var $27=(($26+36)&4294967295); //@line 292 "shamodule.c"
        var $28=(($27)&4294967295); //@line 292 "shamodule.c"
        _llvm_memset_p0i8_i32($28, 0, 56, 1, 0); //@line 292 "shamodule.c"
        __label__ = 3; break; //@line 292 "shamodule.c"
      case 2: // $bb1
        var $29=HEAP[$count]; //@line 295 "shamodule.c"
        var $30=((56 - ($29))&4294967295); //@line 295 "shamodule.c"
        var $31=HEAP[$sha_info_addr]; //@line 295 "shamodule.c"
        var $32=(($31+36)&4294967295); //@line 295 "shamodule.c"
        var $33=(($32)&4294967295); //@line 295 "shamodule.c"
        var $34=HEAP[$count]; //@line 295 "shamodule.c"
        var $35=(($33+$34)&4294967295); //@line 295 "shamodule.c"
        _llvm_memset_p0i8_i32($35, 0, $30, 1, 0); //@line 295 "shamodule.c"
        __label__ = 3; break; //@line 295 "shamodule.c"
      case 3: // $bb2
        var $36=HEAP[$hi_bit_count]; //@line 301 "shamodule.c"
        var $37=((($36))>>>0) >>> 24; //@line 301 "shamodule.c"
        var $38=((($37)) & 255); //@line 301 "shamodule.c"
        var $39=HEAP[$sha_info_addr]; //@line 301 "shamodule.c"
        var $40=(($39+36)&4294967295); //@line 301 "shamodule.c"
        var $41=(($40+56)&4294967295); //@line 301 "shamodule.c"
        HEAP[$41]=$38; //@line 301 "shamodule.c"
        var $42=HEAP[$hi_bit_count]; //@line 302 "shamodule.c"
        var $43=((($42))>>>0) >>> 16; //@line 302 "shamodule.c"
        var $44=((($43)) & 255); //@line 302 "shamodule.c"
        var $45=HEAP[$sha_info_addr]; //@line 302 "shamodule.c"
        var $46=(($45+36)&4294967295); //@line 302 "shamodule.c"
        var $47=(($46+57)&4294967295); //@line 302 "shamodule.c"
        HEAP[$47]=$44; //@line 302 "shamodule.c"
        var $48=HEAP[$hi_bit_count]; //@line 303 "shamodule.c"
        var $49=((($48))>>>0) >>> 8; //@line 303 "shamodule.c"
        var $50=((($49)) & 255); //@line 303 "shamodule.c"
        var $51=HEAP[$sha_info_addr]; //@line 303 "shamodule.c"
        var $52=(($51+36)&4294967295); //@line 303 "shamodule.c"
        var $53=(($52+58)&4294967295); //@line 303 "shamodule.c"
        HEAP[$53]=$50; //@line 303 "shamodule.c"
        var $54=HEAP[$hi_bit_count]; //@line 304 "shamodule.c"
        var $55=((($54)) & 255); //@line 304 "shamodule.c"
        var $56=HEAP[$sha_info_addr]; //@line 304 "shamodule.c"
        var $57=(($56+36)&4294967295); //@line 304 "shamodule.c"
        var $58=(($57+59)&4294967295); //@line 304 "shamodule.c"
        HEAP[$58]=$55; //@line 304 "shamodule.c"
        var $59=HEAP[$lo_bit_count]; //@line 305 "shamodule.c"
        var $60=((($59))>>>0) >>> 24; //@line 305 "shamodule.c"
        var $61=((($60)) & 255); //@line 305 "shamodule.c"
        var $62=HEAP[$sha_info_addr]; //@line 305 "shamodule.c"
        var $63=(($62+36)&4294967295); //@line 305 "shamodule.c"
        var $64=(($63+60)&4294967295); //@line 305 "shamodule.c"
        HEAP[$64]=$61; //@line 305 "shamodule.c"
        var $65=HEAP[$lo_bit_count]; //@line 306 "shamodule.c"
        var $66=((($65))>>>0) >>> 16; //@line 306 "shamodule.c"
        var $67=((($66)) & 255); //@line 306 "shamodule.c"
        var $68=HEAP[$sha_info_addr]; //@line 306 "shamodule.c"
        var $69=(($68+36)&4294967295); //@line 306 "shamodule.c"
        var $70=(($69+61)&4294967295); //@line 306 "shamodule.c"
        HEAP[$70]=$67; //@line 306 "shamodule.c"
        var $71=HEAP[$lo_bit_count]; //@line 307 "shamodule.c"
        var $72=((($71))>>>0) >>> 8; //@line 307 "shamodule.c"
        var $73=((($72)) & 255); //@line 307 "shamodule.c"
        var $74=HEAP[$sha_info_addr]; //@line 307 "shamodule.c"
        var $75=(($74+36)&4294967295); //@line 307 "shamodule.c"
        var $76=(($75+62)&4294967295); //@line 307 "shamodule.c"
        HEAP[$76]=$73; //@line 307 "shamodule.c"
        var $77=HEAP[$lo_bit_count]; //@line 308 "shamodule.c"
        var $78=((($77)) & 255); //@line 308 "shamodule.c"
        var $79=HEAP[$sha_info_addr]; //@line 308 "shamodule.c"
        var $80=(($79+36)&4294967295); //@line 308 "shamodule.c"
        var $81=(($80+63)&4294967295); //@line 308 "shamodule.c"
        HEAP[$81]=$78; //@line 308 "shamodule.c"
        var $82=HEAP[$sha_info_addr]; //@line 309 "shamodule.c"
        _sha_transform($82); //@line 309 "shamodule.c"
        var $83=HEAP[$sha_info_addr]; //@line 310 "shamodule.c"
        var $84=(($83+8)&4294967295); //@line 310 "shamodule.c"
        var $85=(($84)&4294967295); //@line 310 "shamodule.c"
        var $86=HEAP[$85]; //@line 310 "shamodule.c"
        var $87=((($86))>>>0) >>> 24; //@line 310 "shamodule.c"
        var $88=((($87)) & 255); //@line 310 "shamodule.c"
        var $89=HEAP[$digest_addr]; //@line 310 "shamodule.c"
        var $90=(($89)&4294967295); //@line 310 "shamodule.c"
        HEAP[$90]=$88; //@line 310 "shamodule.c"
        var $91=HEAP[$sha_info_addr]; //@line 311 "shamodule.c"
        var $92=(($91+8)&4294967295); //@line 311 "shamodule.c"
        var $93=(($92)&4294967295); //@line 311 "shamodule.c"
        var $94=HEAP[$93]; //@line 311 "shamodule.c"
        var $95=((($94))>>>0) >>> 16; //@line 311 "shamodule.c"
        var $96=((($95)) & 255); //@line 311 "shamodule.c"
        var $97=HEAP[$digest_addr]; //@line 311 "shamodule.c"
        var $98=(($97+1)&4294967295); //@line 311 "shamodule.c"
        HEAP[$98]=$96; //@line 311 "shamodule.c"
        var $99=HEAP[$sha_info_addr]; //@line 312 "shamodule.c"
        var $100=(($99+8)&4294967295); //@line 312 "shamodule.c"
        var $101=(($100)&4294967295); //@line 312 "shamodule.c"
        var $102=HEAP[$101]; //@line 312 "shamodule.c"
        var $103=((($102))>>>0) >>> 8; //@line 312 "shamodule.c"
        var $104=((($103)) & 255); //@line 312 "shamodule.c"
        var $105=HEAP[$digest_addr]; //@line 312 "shamodule.c"
        var $106=(($105+2)&4294967295); //@line 312 "shamodule.c"
        HEAP[$106]=$104; //@line 312 "shamodule.c"
        var $107=HEAP[$sha_info_addr]; //@line 313 "shamodule.c"
        var $108=(($107+8)&4294967295); //@line 313 "shamodule.c"
        var $109=(($108)&4294967295); //@line 313 "shamodule.c"
        var $110=HEAP[$109]; //@line 313 "shamodule.c"
        var $111=((($110)) & 255); //@line 313 "shamodule.c"
        var $112=HEAP[$digest_addr]; //@line 313 "shamodule.c"
        var $113=(($112+3)&4294967295); //@line 313 "shamodule.c"
        HEAP[$113]=$111; //@line 313 "shamodule.c"
        var $114=HEAP[$sha_info_addr]; //@line 314 "shamodule.c"
        var $115=(($114+8)&4294967295); //@line 314 "shamodule.c"
        var $116=(($115+4)&4294967295); //@line 314 "shamodule.c"
        var $117=HEAP[$116]; //@line 314 "shamodule.c"
        var $118=((($117))>>>0) >>> 24; //@line 314 "shamodule.c"
        var $119=((($118)) & 255); //@line 314 "shamodule.c"
        var $120=HEAP[$digest_addr]; //@line 314 "shamodule.c"
        var $121=(($120+4)&4294967295); //@line 314 "shamodule.c"
        HEAP[$121]=$119; //@line 314 "shamodule.c"
        var $122=HEAP[$sha_info_addr]; //@line 315 "shamodule.c"
        var $123=(($122+8)&4294967295); //@line 315 "shamodule.c"
        var $124=(($123+4)&4294967295); //@line 315 "shamodule.c"
        var $125=HEAP[$124]; //@line 315 "shamodule.c"
        var $126=((($125))>>>0) >>> 16; //@line 315 "shamodule.c"
        var $127=((($126)) & 255); //@line 315 "shamodule.c"
        var $128=HEAP[$digest_addr]; //@line 315 "shamodule.c"
        var $129=(($128+5)&4294967295); //@line 315 "shamodule.c"
        HEAP[$129]=$127; //@line 315 "shamodule.c"
        var $130=HEAP[$sha_info_addr]; //@line 316 "shamodule.c"
        var $131=(($130+8)&4294967295); //@line 316 "shamodule.c"
        var $132=(($131+4)&4294967295); //@line 316 "shamodule.c"
        var $133=HEAP[$132]; //@line 316 "shamodule.c"
        var $134=((($133))>>>0) >>> 8; //@line 316 "shamodule.c"
        var $135=((($134)) & 255); //@line 316 "shamodule.c"
        var $136=HEAP[$digest_addr]; //@line 316 "shamodule.c"
        var $137=(($136+6)&4294967295); //@line 316 "shamodule.c"
        HEAP[$137]=$135; //@line 316 "shamodule.c"
        var $138=HEAP[$sha_info_addr]; //@line 317 "shamodule.c"
        var $139=(($138+8)&4294967295); //@line 317 "shamodule.c"
        var $140=(($139+4)&4294967295); //@line 317 "shamodule.c"
        var $141=HEAP[$140]; //@line 317 "shamodule.c"
        var $142=((($141)) & 255); //@line 317 "shamodule.c"
        var $143=HEAP[$digest_addr]; //@line 317 "shamodule.c"
        var $144=(($143+7)&4294967295); //@line 317 "shamodule.c"
        HEAP[$144]=$142; //@line 317 "shamodule.c"
        var $145=HEAP[$sha_info_addr]; //@line 318 "shamodule.c"
        var $146=(($145+8)&4294967295); //@line 318 "shamodule.c"
        var $147=(($146+8)&4294967295); //@line 318 "shamodule.c"
        var $148=HEAP[$147]; //@line 318 "shamodule.c"
        var $149=((($148))>>>0) >>> 24; //@line 318 "shamodule.c"
        var $150=((($149)) & 255); //@line 318 "shamodule.c"
        var $151=HEAP[$digest_addr]; //@line 318 "shamodule.c"
        var $152=(($151+8)&4294967295); //@line 318 "shamodule.c"
        HEAP[$152]=$150; //@line 318 "shamodule.c"
        var $153=HEAP[$sha_info_addr]; //@line 319 "shamodule.c"
        var $154=(($153+8)&4294967295); //@line 319 "shamodule.c"
        var $155=(($154+8)&4294967295); //@line 319 "shamodule.c"
        var $156=HEAP[$155]; //@line 319 "shamodule.c"
        var $157=((($156))>>>0) >>> 16; //@line 319 "shamodule.c"
        var $158=((($157)) & 255); //@line 319 "shamodule.c"
        var $159=HEAP[$digest_addr]; //@line 319 "shamodule.c"
        var $160=(($159+9)&4294967295); //@line 319 "shamodule.c"
        HEAP[$160]=$158; //@line 319 "shamodule.c"
        var $161=HEAP[$sha_info_addr]; //@line 320 "shamodule.c"
        var $162=(($161+8)&4294967295); //@line 320 "shamodule.c"
        var $163=(($162+8)&4294967295); //@line 320 "shamodule.c"
        var $164=HEAP[$163]; //@line 320 "shamodule.c"
        var $165=((($164))>>>0) >>> 8; //@line 320 "shamodule.c"
        var $166=((($165)) & 255); //@line 320 "shamodule.c"
        var $167=HEAP[$digest_addr]; //@line 320 "shamodule.c"
        var $168=(($167+10)&4294967295); //@line 320 "shamodule.c"
        HEAP[$168]=$166; //@line 320 "shamodule.c"
        var $169=HEAP[$sha_info_addr]; //@line 321 "shamodule.c"
        var $170=(($169+8)&4294967295); //@line 321 "shamodule.c"
        var $171=(($170+8)&4294967295); //@line 321 "shamodule.c"
        var $172=HEAP[$171]; //@line 321 "shamodule.c"
        var $173=((($172)) & 255); //@line 321 "shamodule.c"
        var $174=HEAP[$digest_addr]; //@line 321 "shamodule.c"
        var $175=(($174+11)&4294967295); //@line 321 "shamodule.c"
        HEAP[$175]=$173; //@line 321 "shamodule.c"
        var $176=HEAP[$sha_info_addr]; //@line 322 "shamodule.c"
        var $177=(($176+8)&4294967295); //@line 322 "shamodule.c"
        var $178=(($177+12)&4294967295); //@line 322 "shamodule.c"
        var $179=HEAP[$178]; //@line 322 "shamodule.c"
        var $180=((($179))>>>0) >>> 24; //@line 322 "shamodule.c"
        var $181=((($180)) & 255); //@line 322 "shamodule.c"
        var $182=HEAP[$digest_addr]; //@line 322 "shamodule.c"
        var $183=(($182+12)&4294967295); //@line 322 "shamodule.c"
        HEAP[$183]=$181; //@line 322 "shamodule.c"
        var $184=HEAP[$sha_info_addr]; //@line 323 "shamodule.c"
        var $185=(($184+8)&4294967295); //@line 323 "shamodule.c"
        var $186=(($185+12)&4294967295); //@line 323 "shamodule.c"
        var $187=HEAP[$186]; //@line 323 "shamodule.c"
        var $188=((($187))>>>0) >>> 16; //@line 323 "shamodule.c"
        var $189=((($188)) & 255); //@line 323 "shamodule.c"
        var $190=HEAP[$digest_addr]; //@line 323 "shamodule.c"
        var $191=(($190+13)&4294967295); //@line 323 "shamodule.c"
        HEAP[$191]=$189; //@line 323 "shamodule.c"
        var $192=HEAP[$sha_info_addr]; //@line 324 "shamodule.c"
        var $193=(($192+8)&4294967295); //@line 324 "shamodule.c"
        var $194=(($193+12)&4294967295); //@line 324 "shamodule.c"
        var $195=HEAP[$194]; //@line 324 "shamodule.c"
        var $196=((($195))>>>0) >>> 8; //@line 324 "shamodule.c"
        var $197=((($196)) & 255); //@line 324 "shamodule.c"
        var $198=HEAP[$digest_addr]; //@line 324 "shamodule.c"
        var $199=(($198+14)&4294967295); //@line 324 "shamodule.c"
        HEAP[$199]=$197; //@line 324 "shamodule.c"
        var $200=HEAP[$sha_info_addr]; //@line 325 "shamodule.c"
        var $201=(($200+8)&4294967295); //@line 325 "shamodule.c"
        var $202=(($201+12)&4294967295); //@line 325 "shamodule.c"
        var $203=HEAP[$202]; //@line 325 "shamodule.c"
        var $204=((($203)) & 255); //@line 325 "shamodule.c"
        var $205=HEAP[$digest_addr]; //@line 325 "shamodule.c"
        var $206=(($205+15)&4294967295); //@line 325 "shamodule.c"
        HEAP[$206]=$204; //@line 325 "shamodule.c"
        var $207=HEAP[$sha_info_addr]; //@line 326 "shamodule.c"
        var $208=(($207+8)&4294967295); //@line 326 "shamodule.c"
        var $209=(($208+16)&4294967295); //@line 326 "shamodule.c"
        var $210=HEAP[$209]; //@line 326 "shamodule.c"
        var $211=((($210))>>>0) >>> 24; //@line 326 "shamodule.c"
        var $212=((($211)) & 255); //@line 326 "shamodule.c"
        var $213=HEAP[$digest_addr]; //@line 326 "shamodule.c"
        var $214=(($213+16)&4294967295); //@line 326 "shamodule.c"
        HEAP[$214]=$212; //@line 326 "shamodule.c"
        var $215=HEAP[$sha_info_addr]; //@line 327 "shamodule.c"
        var $216=(($215+8)&4294967295); //@line 327 "shamodule.c"
        var $217=(($216+16)&4294967295); //@line 327 "shamodule.c"
        var $218=HEAP[$217]; //@line 327 "shamodule.c"
        var $219=((($218))>>>0) >>> 16; //@line 327 "shamodule.c"
        var $220=((($219)) & 255); //@line 327 "shamodule.c"
        var $221=HEAP[$digest_addr]; //@line 327 "shamodule.c"
        var $222=(($221+17)&4294967295); //@line 327 "shamodule.c"
        HEAP[$222]=$220; //@line 327 "shamodule.c"
        var $223=HEAP[$sha_info_addr]; //@line 328 "shamodule.c"
        var $224=(($223+8)&4294967295); //@line 328 "shamodule.c"
        var $225=(($224+16)&4294967295); //@line 328 "shamodule.c"
        var $226=HEAP[$225]; //@line 328 "shamodule.c"
        var $227=((($226))>>>0) >>> 8; //@line 328 "shamodule.c"
        var $228=((($227)) & 255); //@line 328 "shamodule.c"
        var $229=HEAP[$digest_addr]; //@line 328 "shamodule.c"
        var $230=(($229+18)&4294967295); //@line 328 "shamodule.c"
        HEAP[$230]=$228; //@line 328 "shamodule.c"
        var $231=HEAP[$sha_info_addr]; //@line 329 "shamodule.c"
        var $232=(($231+8)&4294967295); //@line 329 "shamodule.c"
        var $233=(($232+16)&4294967295); //@line 329 "shamodule.c"
        var $234=HEAP[$233]; //@line 329 "shamodule.c"
        var $235=((($234)) & 255); //@line 329 "shamodule.c"
        var $236=HEAP[$digest_addr]; //@line 329 "shamodule.c"
        var $237=(($236+19)&4294967295); //@line 329 "shamodule.c"
        HEAP[$237]=$235; //@line 329 "shamodule.c"
        __label__ = 4; break; //@line 330 "shamodule.c"
      case 4: // $return
        STACKTOP = __stackBase__;
        return; //@line 330 "shamodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _newSHAobject() {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval=__stackBase__;
        var $0=__stackBase__+4;
        var $_alloca_point_=0;
        var $1=__PyObject_New(_SHAtype); //@line 344 "shamodule.c"
        var $2=$1; //@line 344 "shamodule.c"
        HEAP[$0]=$2; //@line 344 "shamodule.c"
        var $3=HEAP[$0]; //@line 344 "shamodule.c"
        HEAP[$retval]=$3; //@line 344 "shamodule.c"
        __label__ = 1; break; //@line 344 "shamodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 344 "shamodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 344 "shamodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _SHA_dealloc($ptr) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $ptr_addr=__stackBase__;
        var $_alloca_point_=0;
        HEAP[$ptr_addr]=$ptr;
        var $0=HEAP[$ptr_addr]; //@line 352 "shamodule.c"
        var $1=$0; //@line 352 "shamodule.c"
        _PyObject_Free($1); //@line 352 "shamodule.c"
        __label__ = 1; break; //@line 353 "shamodule.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 353 "shamodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _SHA_copy($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $unused_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $newobj=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$unused_addr]=$unused;
        var $1=_newSHAobject(); //@line 365 "shamodule.c"
        HEAP[$newobj]=$1; //@line 365 "shamodule.c"
        var $2=HEAP[$newobj]; //@line 365 "shamodule.c"
        var $3=($2)==0; //@line 365 "shamodule.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 365 "shamodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 366 "shamodule.c"
        __label__ = 3; break; //@line 366 "shamodule.c"
      case 2: // $bb1
        var $4=HEAP[$self_addr]; //@line 368 "shamodule.c"
        var $5=HEAP[$newobj]; //@line 368 "shamodule.c"
        _SHAcopy($4, $5); //@line 368 "shamodule.c"
        var $6=HEAP[$newobj]; //@line 369 "shamodule.c"
        var $7=$6; //@line 369 "shamodule.c"
        HEAP[$0]=$7; //@line 369 "shamodule.c"
        __label__ = 3; break; //@line 369 "shamodule.c"
      case 3: // $bb2
        var $8=HEAP[$0]; //@line 366 "shamodule.c"
        HEAP[$retval]=$8; //@line 366 "shamodule.c"
        __label__ = 4; break; //@line 366 "shamodule.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 366 "shamodule.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 366 "shamodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _SHA_digest($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 144; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 144);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $unused_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $digest=__stackBase__+16;
        var $temp=__stackBase__+36;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$unused_addr]=$unused;
        var $1=HEAP[$self_addr]; //@line 381 "shamodule.c"
        _SHAcopy($1, $temp); //@line 381 "shamodule.c"
        var $digest1=$digest; //@line 382 "shamodule.c"
        _sha_final($digest1, $temp); //@line 382 "shamodule.c"
        var $digest2=$digest; //@line 383 "shamodule.c"
        var $2=_PyString_FromStringAndSize($digest2, 20); //@line 383 "shamodule.c"
        HEAP[$0]=$2; //@line 383 "shamodule.c"
        var $3=HEAP[$0]; //@line 383 "shamodule.c"
        HEAP[$retval]=$3; //@line 383 "shamodule.c"
        __label__ = 1; break; //@line 383 "shamodule.c"
      case 1: // $return
        var $retval4=HEAP[$retval]; //@line 383 "shamodule.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 383 "shamodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _SHA_hexdigest($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 163; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 163);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $unused_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $iftmp_12=__stackBase__+12;
        var $iftmp_8=__stackBase__+13;
        var $0=__stackBase__+14;
        var $digest=__stackBase__+18;
        var $temp=__stackBase__+38;
        var $retval1=__stackBase__+146;
        var $hex_digest=__stackBase__+150;
        var $i=__stackBase__+154;
        var $j=__stackBase__+158;
        var $c=__stackBase__+162;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$unused_addr]=$unused;
        var $1=HEAP[$self_addr]; //@line 399 "shamodule.c"
        _SHAcopy($1, $temp); //@line 399 "shamodule.c"
        var $digest2=$digest; //@line 400 "shamodule.c"
        _sha_final($digest2, $temp); //@line 400 "shamodule.c"
        var $2=_PyString_FromStringAndSize(0, 40); //@line 403 "shamodule.c"
        HEAP[$retval1]=$2; //@line 403 "shamodule.c"
        var $3=HEAP[$retval1]; //@line 404 "shamodule.c"
        var $4=($3)==0; //@line 404 "shamodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 404 "shamodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 405 "shamodule.c"
        __label__ = 16; break; //@line 405 "shamodule.c"
      case 2: // $bb3
        var $5=HEAP[$retval1]; //@line 406 "shamodule.c"
        var $6=_PyString_AsString($5); //@line 406 "shamodule.c"
        HEAP[$hex_digest]=$6; //@line 406 "shamodule.c"
        var $7=HEAP[$hex_digest]; //@line 407 "shamodule.c"
        var $8=($7)==0; //@line 407 "shamodule.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 407 "shamodule.c"
      case 3: // $bb4
        var $9=HEAP[$retval1]; //@line 408 "shamodule.c"
        var $10=(($9)&4294967295); //@line 408 "shamodule.c"
        var $11=HEAP[$10]; //@line 408 "shamodule.c"
        var $12=((($11) - 1)&4294967295); //@line 408 "shamodule.c"
        var $13=HEAP[$retval1]; //@line 408 "shamodule.c"
        var $14=(($13)&4294967295); //@line 408 "shamodule.c"
        HEAP[$14]=$12; //@line 408 "shamodule.c"
        var $15=HEAP[$retval1]; //@line 408 "shamodule.c"
        var $16=(($15)&4294967295); //@line 408 "shamodule.c"
        var $17=HEAP[$16]; //@line 408 "shamodule.c"
        var $18=((($17))|0)==0; //@line 408 "shamodule.c"
        if ($18) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 408 "shamodule.c"
      case 4: // $bb5
        var $19=HEAP[$retval1]; //@line 408 "shamodule.c"
        var $20=(($19+4)&4294967295); //@line 408 "shamodule.c"
        var $21=HEAP[$20]; //@line 408 "shamodule.c"
        var $22=(($21+24)&4294967295); //@line 408 "shamodule.c"
        var $23=HEAP[$22]; //@line 408 "shamodule.c"
        var $24=HEAP[$retval1]; //@line 408 "shamodule.c"
        FUNCTION_TABLE[$23]($24); //@line 408 "shamodule.c"
        __label__ = 5; break; //@line 408 "shamodule.c"
      case 5: // $bb6
        HEAP[$0]=0; //@line 409 "shamodule.c"
        __label__ = 16; break; //@line 409 "shamodule.c"
      case 6: // $bb7
        HEAP[$j]=0; //@line 413 "shamodule.c"
        var $25=HEAP[$j]; //@line 413 "shamodule.c"
        HEAP[$i]=$25; //@line 413 "shamodule.c"
        __label__ = 14; break; //@line 413 "shamodule.c"
      case 7: // $bb8
        var $26=HEAP[$i]; //@line 415 "shamodule.c"
        var $27=(($digest+$26)&4294967295); //@line 415 "shamodule.c"
        var $28=HEAP[$27]; //@line 415 "shamodule.c"
        var $29=unSign(($28), 8, 0) >>> 4; //@line 415 "shamodule.c"
        var $30=($29) & 15; //@line 415 "shamodule.c"
        HEAP[$c]=$30; //@line 415 "shamodule.c"
        var $31=HEAP[$c]; //@line 416 "shamodule.c"
        var $32=reSign(($31), 8, 0) > 9; //@line 416 "shamodule.c"
        if ($32) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 416 "shamodule.c"
      case 8: // $bb9
        var $33=HEAP[$c]; //@line 416 "shamodule.c"
        var $34=((($33) + 87)&255); //@line 416 "shamodule.c"
        HEAP[$iftmp_8]=$34; //@line 416 "shamodule.c"
        __label__ = 10; break; //@line 416 "shamodule.c"
      case 9: // $bb10
        var $35=HEAP[$c]; //@line 416 "shamodule.c"
        var $36=((($35) + 48)&255); //@line 416 "shamodule.c"
        HEAP[$iftmp_8]=$36; //@line 416 "shamodule.c"
        __label__ = 10; break; //@line 416 "shamodule.c"
      case 10: // $bb11
        var $37=HEAP[$iftmp_8]; //@line 416 "shamodule.c"
        HEAP[$c]=$37; //@line 416 "shamodule.c"
        var $38=HEAP[$hex_digest]; //@line 417 "shamodule.c"
        var $39=HEAP[$j]; //@line 417 "shamodule.c"
        var $40=(($38+$39)&4294967295); //@line 417 "shamodule.c"
        var $41=HEAP[$c]; //@line 417 "shamodule.c"
        HEAP[$40]=$41; //@line 417 "shamodule.c"
        var $42=HEAP[$j]; //@line 417 "shamodule.c"
        var $43=((($42) + 1)&4294967295); //@line 417 "shamodule.c"
        HEAP[$j]=$43; //@line 417 "shamodule.c"
        var $44=HEAP[$i]; //@line 418 "shamodule.c"
        var $45=(($digest+$44)&4294967295); //@line 418 "shamodule.c"
        var $46=HEAP[$45]; //@line 418 "shamodule.c"
        var $47=($46) & 15; //@line 418 "shamodule.c"
        HEAP[$c]=$47; //@line 418 "shamodule.c"
        var $48=HEAP[$c]; //@line 419 "shamodule.c"
        var $49=reSign(($48), 8, 0) > 9; //@line 419 "shamodule.c"
        if ($49) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 419 "shamodule.c"
      case 11: // $bb12
        var $50=HEAP[$c]; //@line 419 "shamodule.c"
        var $51=((($50) + 87)&255); //@line 419 "shamodule.c"
        HEAP[$iftmp_12]=$51; //@line 419 "shamodule.c"
        __label__ = 13; break; //@line 419 "shamodule.c"
      case 12: // $bb13
        var $52=HEAP[$c]; //@line 419 "shamodule.c"
        var $53=((($52) + 48)&255); //@line 419 "shamodule.c"
        HEAP[$iftmp_12]=$53; //@line 419 "shamodule.c"
        __label__ = 13; break; //@line 419 "shamodule.c"
      case 13: // $bb14
        var $54=HEAP[$iftmp_12]; //@line 419 "shamodule.c"
        HEAP[$c]=$54; //@line 419 "shamodule.c"
        var $55=HEAP[$hex_digest]; //@line 420 "shamodule.c"
        var $56=HEAP[$j]; //@line 420 "shamodule.c"
        var $57=(($55+$56)&4294967295); //@line 420 "shamodule.c"
        var $58=HEAP[$c]; //@line 420 "shamodule.c"
        HEAP[$57]=$58; //@line 420 "shamodule.c"
        var $59=HEAP[$j]; //@line 420 "shamodule.c"
        var $60=((($59) + 1)&4294967295); //@line 420 "shamodule.c"
        HEAP[$j]=$60; //@line 420 "shamodule.c"
        var $61=HEAP[$i]; //@line 413 "shamodule.c"
        var $62=((($61) + 1)&4294967295); //@line 413 "shamodule.c"
        HEAP[$i]=$62; //@line 413 "shamodule.c"
        __label__ = 14; break; //@line 413 "shamodule.c"
      case 14: // $bb15
        var $63=HEAP[$i]; //@line 413 "shamodule.c"
        var $64=((($63))>>>0) <= 19; //@line 413 "shamodule.c"
        if ($64) { __label__ = 7; break; } else { __label__ = 15; break; } //@line 413 "shamodule.c"
      case 15: // $bb16
        var $65=HEAP[$retval1]; //@line 422 "shamodule.c"
        HEAP[$0]=$65; //@line 422 "shamodule.c"
        __label__ = 16; break; //@line 422 "shamodule.c"
      case 16: // $bb17
        var $66=HEAP[$0]; //@line 405 "shamodule.c"
        HEAP[$retval]=$66; //@line 405 "shamodule.c"
        __label__ = 17; break; //@line 405 "shamodule.c"
      case 17: // $return
        var $retval18=HEAP[$retval]; //@line 405 "shamodule.c"
        STACKTOP = __stackBase__;
        return $retval18; //@line 405 "shamodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _SHA_update($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 68; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 68);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $view=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$args_addr]; //@line 433 "shamodule.c"
        var $2=_PyArg_ParseTuple($1, ((__str)&4294967295), $view); //@line 433 "shamodule.c"
        var $3=((($2))|0)==0; //@line 433 "shamodule.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 433 "shamodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 434 "shamodule.c"
        __label__ = 3; break; //@line 434 "shamodule.c"
      case 2: // $bb1
        var $4=(($view+8)&4294967295); //@line 436 "shamodule.c"
        var $5=HEAP[$4]; //@line 436 "shamodule.c"
        var $6=(($view)&4294967295); //@line 436 "shamodule.c"
        var $7=HEAP[$6]; //@line 436 "shamodule.c"
        var $8=HEAP[$self_addr]; //@line 436 "shamodule.c"
        _sha_update($8, $7, $5); //@line 436 "shamodule.c"
        _PyBuffer_Release($view); //@line 439 "shamodule.c"
        var $9=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 440 "shamodule.c"
        var $10=((($9) + 1)&4294967295); //@line 440 "shamodule.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$10; //@line 440 "shamodule.c"
        HEAP[$0]=__Py_NoneStruct; //@line 440 "shamodule.c"
        __label__ = 3; break; //@line 440 "shamodule.c"
      case 3: // $bb2
        var $11=HEAP[$0]; //@line 434 "shamodule.c"
        HEAP[$retval]=$11; //@line 434 "shamodule.c"
        __label__ = 4; break; //@line 434 "shamodule.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 434 "shamodule.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 434 "shamodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _SHA_get_block_size($self, $closure) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $closure_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$closure_addr]=$closure;
        var $1=_PyInt_FromLong(64); //@line 454 "shamodule.c"
        HEAP[$0]=$1; //@line 454 "shamodule.c"
        var $2=HEAP[$0]; //@line 454 "shamodule.c"
        HEAP[$retval]=$2; //@line 454 "shamodule.c"
        __label__ = 1; break; //@line 454 "shamodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 454 "shamodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 454 "shamodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _SHA_get_digest_size($self, $closure) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $closure_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$closure_addr]=$closure;
        var $1=_PyInt_FromLong(20); //@line 460 "shamodule.c"
        HEAP[$0]=$1; //@line 460 "shamodule.c"
        var $2=HEAP[$0]; //@line 460 "shamodule.c"
        HEAP[$retval]=$2; //@line 460 "shamodule.c"
        __label__ = 1; break; //@line 460 "shamodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 460 "shamodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 460 "shamodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _SHA_get_name($self, $closure) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $closure_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$closure_addr]=$closure;
        var $1=_PyString_FromStringAndSize(((__str5)&4294967295), 4); //@line 466 "shamodule.c"
        HEAP[$0]=$1; //@line 466 "shamodule.c"
        var $2=HEAP[$0]; //@line 466 "shamodule.c"
        HEAP[$retval]=$2; //@line 466 "shamodule.c"
        __label__ = 1; break; //@line 466 "shamodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 466 "shamodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 466 "shamodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _SHA_new($self, $args, $kwdict) {
    var __stackBase__  = STACKTOP; STACKTOP += 76; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 76);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kwdict_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $new=__stackBase__+20;
        var $view=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$kwdict_addr]=$kwdict;
        var $view1=$view; //@line 538 "shamodule.c"
        _llvm_memset_p0i8_i32($view1, 0, 52, 4, 0); //@line 538 "shamodule.c"
        var $1=HEAP[$args_addr]; //@line 540 "shamodule.c"
        var $2=HEAP[$kwdict_addr]; //@line 540 "shamodule.c"
        var $3=_PyArg_ParseTupleAndKeywords($1, $2, ((__str11)&4294967295), ((_kwlist_9310)&4294967295), $view); //@line 540 "shamodule.c"
        var $4=((($3))|0)==0; //@line 540 "shamodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 540 "shamodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 542 "shamodule.c"
        __label__ = 11; break; //@line 542 "shamodule.c"
      case 2: // $bb2
        var $5=_newSHAobject(); //@line 545 "shamodule.c"
        HEAP[$new]=$5; //@line 545 "shamodule.c"
        var $6=HEAP[$new]; //@line 545 "shamodule.c"
        var $7=($6)==0; //@line 545 "shamodule.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 545 "shamodule.c"
      case 3: // $bb3
        _PyBuffer_Release($view); //@line 546 "shamodule.c"
        HEAP[$0]=0; //@line 547 "shamodule.c"
        __label__ = 11; break; //@line 547 "shamodule.c"
      case 4: // $bb4
        var $8=HEAP[$new]; //@line 550 "shamodule.c"
        _sha_init($8); //@line 550 "shamodule.c"
        var $9=_PyErr_Occurred(); //@line 552 "shamodule.c"
        var $10=($9)!=0; //@line 552 "shamodule.c"
        if ($10) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 552 "shamodule.c"
      case 5: // $bb5
        var $11=HEAP[$new]; //@line 553 "shamodule.c"
        var $12=$11; //@line 553 "shamodule.c"
        var $13=(($12)&4294967295); //@line 553 "shamodule.c"
        var $14=HEAP[$13]; //@line 553 "shamodule.c"
        var $15=((($14) - 1)&4294967295); //@line 553 "shamodule.c"
        var $16=(($12)&4294967295); //@line 553 "shamodule.c"
        HEAP[$16]=$15; //@line 553 "shamodule.c"
        var $17=(($12)&4294967295); //@line 553 "shamodule.c"
        var $18=HEAP[$17]; //@line 553 "shamodule.c"
        var $19=((($18))|0)==0; //@line 553 "shamodule.c"
        if ($19) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 553 "shamodule.c"
      case 6: // $bb6
        var $20=HEAP[$new]; //@line 553 "shamodule.c"
        var $21=$20; //@line 553 "shamodule.c"
        var $22=(($21+4)&4294967295); //@line 553 "shamodule.c"
        var $23=HEAP[$22]; //@line 553 "shamodule.c"
        var $24=(($23+24)&4294967295); //@line 553 "shamodule.c"
        var $25=HEAP[$24]; //@line 553 "shamodule.c"
        var $26=HEAP[$new]; //@line 553 "shamodule.c"
        var $27=$26; //@line 553 "shamodule.c"
        FUNCTION_TABLE[$25]($27); //@line 553 "shamodule.c"
        __label__ = 7; break; //@line 553 "shamodule.c"
      case 7: // $bb7
        _PyBuffer_Release($view); //@line 554 "shamodule.c"
        HEAP[$0]=0; //@line 555 "shamodule.c"
        __label__ = 11; break; //@line 555 "shamodule.c"
      case 8: // $bb8
        var $28=(($view+8)&4294967295); //@line 557 "shamodule.c"
        var $29=HEAP[$28]; //@line 557 "shamodule.c"
        var $30=((($29))|0) > 0; //@line 557 "shamodule.c"
        if ($30) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 557 "shamodule.c"
      case 9: // $bb9
        var $31=(($view+8)&4294967295); //@line 558 "shamodule.c"
        var $32=HEAP[$31]; //@line 558 "shamodule.c"
        var $33=(($view)&4294967295); //@line 558 "shamodule.c"
        var $34=HEAP[$33]; //@line 558 "shamodule.c"
        var $35=HEAP[$new]; //@line 558 "shamodule.c"
        _sha_update($35, $34, $32); //@line 558 "shamodule.c"
        __label__ = 10; break; //@line 558 "shamodule.c"
      case 10: // $bb10
        _PyBuffer_Release($view); //@line 561 "shamodule.c"
        var $36=HEAP[$new]; //@line 563 "shamodule.c"
        var $37=$36; //@line 563 "shamodule.c"
        HEAP[$0]=$37; //@line 563 "shamodule.c"
        __label__ = 11; break; //@line 563 "shamodule.c"
      case 11: // $bb11
        var $38=HEAP[$0]; //@line 542 "shamodule.c"
        HEAP[$retval]=$38; //@line 542 "shamodule.c"
        __label__ = 12; break; //@line 542 "shamodule.c"
      case 12: // $return
        var $retval12=HEAP[$retval]; //@line 542 "shamodule.c"
        STACKTOP = __stackBase__;
        return $retval12; //@line 542 "shamodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _init_sha() {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $m=__stackBase__;
        var $_alloca_point_=0;
        var $0=((_SHAtype+4)&4294967295); //@line 584 "shamodule.c"
        HEAP[$0]=_PyType_Type; //@line 584 "shamodule.c"
        var $1=_PyType_Ready(_SHAtype); //@line 585 "shamodule.c"
        var $2=((($1))|0) < 0; //@line 585 "shamodule.c"
        if ($2) { __label__ = 3; break; } else { __label__ = 1; break; } //@line 585 "shamodule.c"
      case 1: // $bb
        var $3=_Py_InitModule4(((__str14)&4294967295), ((_SHA_functions)&4294967295), 0, 0, 1013); //@line 587 "shamodule.c"
        HEAP[$m]=$3; //@line 587 "shamodule.c"
        var $4=HEAP[$m]; //@line 588 "shamodule.c"
        var $5=($4)==0; //@line 588 "shamodule.c"
        if ($5) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 588 "shamodule.c"
      case 2: // $bb1
        var $6=HEAP[$m]; //@line 592 "shamodule.c"
        var $7=_PyModule_AddIntConstant($6, ((__str15)&4294967295), 1); //@line 592 "shamodule.c"
        var $8=HEAP[$m]; //@line 595 "shamodule.c"
        var $9=_PyModule_AddIntConstant($8, ((__str9)&4294967295), 20); //@line 595 "shamodule.c"
        var $10=HEAP[$m]; //@line 596 "shamodule.c"
        var $11=_PyModule_AddIntConstant($10, ((__str6)&4294967295), 20); //@line 596 "shamodule.c"
        __label__ = 3; break; //@line 596 "shamodule.c"
      case 3: // $bb2
        __label__ = 4; break; //@line 586 "shamodule.c"
      case 4: // $return
        STACKTOP = __stackBase__;
        return; //@line 586 "shamodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  Module["_init_sha"] = _init_sha;
FUNCTION_TABLE = FUNCTION_TABLE.concat([0,0,_SHA_copy,0,_SHA_digest,0,_SHA_hexdigest,0,_SHA_update,0,_SHA_get_digest_size,0,_SHA_get_block_size,0,_SHA_get_name,0,_SHA_dealloc,0,_SHA_new,0]);

// === Auto-generated postamble setup entry stuff ===

function run(args) {
  
_SHA_copy__doc__=allocate([82,101,116,117,114,110,32,97,32,99,111,112,121,32,111,102,32,116,104,101,32,104,97,115,104,105,110,103,32,111,98,106,101,99,116,46,0] /* Return a copy of the */, "i8", ALLOC_NORMAL);
_SHA_digest__doc__=allocate([82,101,116,117,114,110,32,116,104,101,32,100,105,103,101,115,116,32,118,97,108,117,101,32,97,115,32,97,32,115,116,114,105,110,103,32,111,102,32,98,105,110,97,114,121,32,100,97,116,97,46,0] /* Return the digest va */, "i8", ALLOC_NORMAL);
_SHA_hexdigest__doc__=allocate([82,101,116,117,114,110,32,116,104,101,32,100,105,103,101,115,116,32,118,97,108,117,101,32,97,115,32,97,32,115,116,114,105,110,103,32,111,102,32,104,101,120,97,100,101,99,105,109,97,108,32,100,105,103,105,116,115,46,0] /* Return the digest va */, "i8", ALLOC_NORMAL);
_SHA_update__doc__=allocate([85,112,100,97,116,101,32,116,104,105,115,32,104,97,115,104,105,110,103,32,111,98,106,101,99,116,39,115,32,115,116,97,116,101,32,119,105,116,104,32,116,104,101,32,112,114,111,118,105,100,101,100,32,115,116,114,105,110,103,46,0] /* Update this hashing  */, "i8", ALLOC_NORMAL);
__str=allocate([115,42,58,117,112,100,97,116,101,0] /* s_:update\00 */, "i8", ALLOC_NORMAL);
__str1=allocate([99,111,112,121,0] /* copy\00 */, "i8", ALLOC_NORMAL);
__str2=allocate([100,105,103,101,115,116,0] /* digest\00 */, "i8", ALLOC_NORMAL);
__str3=allocate([104,101,120,100,105,103,101,115,116,0] /* hexdigest\00 */, "i8", ALLOC_NORMAL);
__str4=allocate([117,112,100,97,116,101,0] /* update\00 */, "i8", ALLOC_NORMAL);
_SHA_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str5=allocate([83,72,65,49,0] /* SHA1\00 */, "i8", ALLOC_NORMAL);
__str6=allocate([100,105,103,101,115,116,95,115,105,122,101,0] /* digest_size\00 */, "i8", ALLOC_NORMAL);
__str7=allocate([98,108,111,99,107,95,115,105,122,101,0] /* block_size\00 */, "i8", ALLOC_NORMAL);
__str8=allocate([110,97,109,101,0] /* name\00 */, "i8", ALLOC_NORMAL);
__str9=allocate([100,105,103,101,115,116,115,105,122,101,0] /* digestsize\00 */, "i8", ALLOC_NORMAL);
_SHA_getseters=allocate(100, ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str10=allocate([95,115,104,97,46,115,104,97,0] /* _sha.sha\00 */, "i8", ALLOC_NORMAL);
_SHAtype=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131563, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_SHA_new__doc__=allocate([82,101,116,117,114,110,32,97,32,110,101,119,32,83,72,65,32,104,97,115,104,105,110,103,32,111,98,106,101,99,116,46,32,32,65,110,32,111,112,116,105,111,110,97,108,32,115,116,114,105,110,103,32,97,114,103,117,109,101,110,116,10,109,97,121,32,98,101,32,112,114,111,118,105,100,101,100,59,32,105,102,32,112,114,101,115,101,110,116,44,32,116,104,105,115,32,115,116,114,105,110,103,32,119,105,108,108,32,98,101,32,97,117,116,111,109,97,116,105,99,97,108,108,121,10,104,97,115,104,101,100,46,0] /* Return a new SHA has */, "i8", ALLOC_NORMAL);
__str11=allocate([124,115,42,58,110,101,119,0] /* |s_:new\00 */, "i8", ALLOC_NORMAL);
_kwlist_9310=allocate(8, "i8*", ALLOC_NORMAL);
__str12=allocate([115,116,114,105,110,103,0] /* string\00 */, "i8", ALLOC_NORMAL);
__str13=allocate([110,101,119,0] /* new\00 */, "i8", ALLOC_NORMAL);
_SHA_functions=allocate([0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str14=allocate([95,115,104,97,0] /* _sha\00 */, "i8", ALLOC_NORMAL);
__str15=allocate([98,108,111,99,107,115,105,122,101,0] /* blocksize\00 */, "i8", ALLOC_NORMAL);
HEAP[_SHA_methods]=((__str1)&4294967295);
HEAP[_SHA_methods+4]=(FUNCTION_TABLE_OFFSET + 2);
HEAP[_SHA_methods+12]=((_SHA_copy__doc__)&4294967295);
HEAP[_SHA_methods+16]=((__str2)&4294967295);
HEAP[_SHA_methods+20]=(FUNCTION_TABLE_OFFSET + 4);
HEAP[_SHA_methods+28]=((_SHA_digest__doc__)&4294967295);
HEAP[_SHA_methods+32]=((__str3)&4294967295);
HEAP[_SHA_methods+36]=(FUNCTION_TABLE_OFFSET + 6);
HEAP[_SHA_methods+44]=((_SHA_hexdigest__doc__)&4294967295);
HEAP[_SHA_methods+48]=((__str4)&4294967295);
HEAP[_SHA_methods+52]=(FUNCTION_TABLE_OFFSET + 8);
HEAP[_SHA_methods+60]=((_SHA_update__doc__)&4294967295);
HEAP[_SHA_getseters]=((__str6)&4294967295);
HEAP[_SHA_getseters+4]=(FUNCTION_TABLE_OFFSET + 10);
HEAP[_SHA_getseters+20]=((__str7)&4294967295);
HEAP[_SHA_getseters+24]=(FUNCTION_TABLE_OFFSET + 12);
HEAP[_SHA_getseters+40]=((__str8)&4294967295);
HEAP[_SHA_getseters+44]=(FUNCTION_TABLE_OFFSET + 14);
HEAP[_SHA_getseters+60]=((__str9)&4294967295);
HEAP[_SHA_getseters+64]=(FUNCTION_TABLE_OFFSET + 10);
HEAP[_SHAtype+12]=((__str10)&4294967295);
HEAP[_SHAtype+24]=(FUNCTION_TABLE_OFFSET + 16);
HEAP[_SHAtype+116]=((_SHA_methods)&4294967295);
HEAP[_SHAtype+124]=((_SHA_getseters)&4294967295);
HEAP[_kwlist_9310]=((__str12)&4294967295);
HEAP[_SHA_functions]=((__str13)&4294967295);
HEAP[_SHA_functions+4]=(FUNCTION_TABLE_OFFSET + 18);
HEAP[_SHA_functions+12]=((_SHA_new__doc__)&4294967295);

  __globalConstructor__();
}
Module['run'] = run;

// {{PRE_RUN_ADDITIONS}}

run();

// {{POST_RUN_ADDITIONS}}





  // {{MODULE_ADDITIONS}}

  return Module;
});

