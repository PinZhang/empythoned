"use strict";

// Capture the output of this into a variable, if you want
(function(FUNCTION_TABLE_OFFSET) {
  var Module = {};
  var args = [];
  Module.arguments = [];

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime essentials
//========================================

var __globalConstructor__ = function globalConstructor() {
}

// === Body ===



var $0___SIZE = 144; // %0
  
var $1___SIZE = 16; // %1
  
var $2___SIZE = 196; // %2
  
var $3___SIZE = 20; // %3
  
var $4___SIZE = 364; // %4
  var $4___FLATTENER = [0,72,328];
var $struct_ATTRIBUTE___SIZE = 16; // %struct.ATTRIBUTE
  
var $struct_BINDING___SIZE = 28; // %struct.BINDING
  
var $struct_BLOCK___SIZE = 12; // %struct.BLOCK
  
var $struct_CONTENT_SCAFFOLD___SIZE = 28; // %struct.CONTENT_SCAFFOLD
  
var $struct_DEFAULT_ATTRIBUTE___SIZE = 12; // %struct.DEFAULT_ATTRIBUTE
  
var $struct_DTD___SIZE = 168; // %struct.DTD
  var $struct_DTD___FLATTENER = [0,20,40,60,80,104,128,129,130,132,140,144,148,152,156,160,164];
var $struct_ELEMENT_TYPE___SIZE = 24; // %struct.ELEMENT_TYPE
  
var $struct_ENCODING___SIZE = 72; // %struct.ENCODING
  var $struct_ENCODING___FLATTENER = [0,12,20,24,28,32,36,40,44,48,52,56,60,64,68,69];
var $struct_ENTITY___SIZE = 36; // %struct.ENTITY
  var $struct_ENTITY___FLATTENER = [0,4,8,12,16,20,24,28,32,33,34];
var $struct_FILE___SIZE = 148; // %struct.FILE
  var $struct_FILE___FLATTENER = [0,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64,68,70,71,72,76,84,88,92,96,100,104,108];
var $struct_HASH_TABLE___SIZE = 20; // %struct.HASH_TABLE
  
var $struct_HASH_TABLE_ITER___SIZE = 8; // %struct.HASH_TABLE_ITER
  
var $struct_HandlerInfo___SIZE = 20; // %struct.HandlerInfo
  
var $struct_INIT_ENCODING___SIZE = 76; // %struct.INIT_ENCODING
  
var $struct_NAMED___SIZE = 4; // %struct.NAMED
  
var $struct_NS_ATT___SIZE = 12; // %struct.NS_ATT
  
var $struct_OPEN_INTERNAL_ENTITY___SIZE = 24; // %struct.OPEN_INTERNAL_ENTITY
  
var $struct_POSITION___SIZE = 8; // %struct.POSITION
  
var $struct_PREFIX___SIZE = 8; // %struct.PREFIX
  
var $struct_PROLOG_STATE___SIZE = 12; // %struct.PROLOG_STATE
  
var $struct_PyBufferProcs___SIZE = 24; // %struct.PyBufferProcs
  
var $struct_PyCodeObject___SIZE = 72; // %struct.PyCodeObject
  
var $struct_PyExpat_CAPI___SIZE = 80; // %struct.PyExpat_CAPI
  
var $struct_PyGetSetDef___SIZE = 20; // %struct.PyGetSetDef
  
var $struct_PyIntObject___SIZE = 12; // %struct.PyIntObject
  
var $struct_PyInterpreterState___SIZE = 40; // %struct.PyInterpreterState
  
var $struct_PyListObject___SIZE = 20; // %struct.PyListObject
  
var $struct_PyMappingMethods___SIZE = 12; // %struct.PyMappingMethods
  
var $struct_PyMemberDef___SIZE = 0; // %struct.PyMemberDef
  var $struct_PyMemberDef___FLATTENER = [];
var $struct_PyMethodDef___SIZE = 16; // %struct.PyMethodDef
  
var $struct_PyNumberMethods___SIZE = 156; // %struct.PyNumberMethods
  
var $struct_PyObject___SIZE = 8; // %struct.PyObject
  
var $struct_PySequenceMethods___SIZE = 40; // %struct.PySequenceMethods
  
var $struct_PyThreadState___SIZE = 84; // %struct.PyThreadState
  
var $struct_PyTryBlock___SIZE = 12; // %struct.PyTryBlock
  
var $struct_PyTupleObject___SIZE = 16; // %struct.PyTupleObject
  
var $struct_PyUnicodeObject___SIZE = 24; // %struct.PyUnicodeObject
  
var $struct_PyVarObject___SIZE = 12; // %struct.PyVarObject
  
var $struct_Py_buffer___SIZE = 52; // %struct.Py_buffer
  var $struct_Py_buffer___FLATTENER = [0,4,8,12,16,20,24,28,32,36,40,48];
var $struct_STRING_POOL___SIZE = 24; // %struct.STRING_POOL
  
var $struct_TAG___SIZE = 48; // %struct.TAG
  var $struct_TAG___FLATTENER = [0,4,8,12,36,40,44];
var $struct_TAG_NAME___SIZE = 24; // %struct.TAG_NAME
  
var $struct_XML_Content___SIZE = 20; // %struct.XML_Content
  
var $struct_XML_Encoding___SIZE = 1036; // %struct.XML_Encoding
  var $struct_XML_Encoding___FLATTENER = [0,1024,1028,1032];
var $struct_XML_Expat_Version___SIZE = 12; // %struct.XML_Expat_Version
  
var $struct_XML_Feature___SIZE = 12; // %struct.XML_Feature
  
var $struct_XML_Memory_Handling_Suite___SIZE = 12; // %struct.XML_Memory_Handling_Suite
  
var $struct_XML_ParserStruct___SIZE = 472; // %struct.XML_ParserStruct
  var $struct_XML_ParserStruct___FLATTENER = [0,4,8,12,24,28,32,36,40,44,48,52,56,60,64,68,72,76,80,84,88,92,96,100,104,108,112,116,120,124,128,132,136,140,144,148,224,228,232,233,236,240,244,248,252,264,268,272,276,280,284,288,292,296,300,304,308,312,316,320,324,328,332,336,337,340,344,348,352,356,360,364,368,372,376,380,384,388,392,400,424,448,452,456,460,464];
var $struct_XML_ParsingStatus___SIZE = 8; // %struct.XML_ParsingStatus
  
var $struct__IO_marker___SIZE = 12; // %struct._IO_marker
  
var $struct__frame___SIZE = 316; // %struct._frame
  var $struct__frame___FLATTENER = [0,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64,68,72,312];
var $struct__typeobject___SIZE = 196; // %struct._typeobject
  
var $struct_attribute_id___SIZE = 12; // %struct.attribute_id
  var $struct_attribute_id___FLATTENER = [0,4,8,9];
var $struct_normal_encoding___SIZE = 364; // %struct.normal_encoding
  var $struct_normal_encoding___FLATTENER = [0,72,328,332,336,340,344,348,352,356,360];
var $struct_unknown_encoding___SIZE = 1908; // %struct.unknown_encoding
  var $struct_unknown_encoding___FLATTENER = [0,364,368,372,884];
var $struct_xmlparseobject___SIZE = 52; // %struct.xmlparseobject
  
var __str;
var _ErrorObject;
var __str1;
var __str2;
var __str3;
var __str4;
var __Py_NoneStruct;
var __str5;
var __str6;
var __PyThreadState_Current;
var __str7;
var __str8;
var __str9;
var __str10;
var __str11;
var __str12;
var __str13;
var __str14;
var __str15;
var __str16;
var __str17;
var __str18;
var __str19;
var __str20;
var ___PRETTY_FUNCTION___9748;
var __str21;
var __str22;
var __str23;
var __str24;
var __str25;
var __str26;
var __str27;
var __str28;
var __str29;
var __str30;
var __str31;
var __str32;
var __str33;
var __str34;
var __str35;
var __str36;
var __str37;
var __str38;
var __str39;
var __str40;
var __str41;
var __str42;
var __str43;
var __str44;
var _xmlparse_Parse__doc__;
var __str45;
var _PyExc_TypeError;
var __str46;
var _PyExc_ValueError;
var __str47;
var _xmlparse_ParseFile__doc__;
var __str48;
var __str49;
var _xmlparse_SetBase__doc__;
var __str50;
var _xmlparse_GetBase__doc__;
var __str51;
var _xmlparse_GetInputContext__doc__;
var _xmlparse_ExternalEntityParserCreate__doc__;
var __str52;
var _xmlparse_SetParamEntityParsing__doc__;
var __str53;
var _xmlparse_UseForeignDTD__doc__;
var __str54;
var __str55;
var __str56;
var __str57;
var __str58;
var __str59;
var __str60;
var __str61;
var _xmlparse_methods;
var _template_string;
var _template_buffer;
var __str62;
var _PyExc_RuntimeError;
var __str63;
var __Py_TrueStruct;
var __Py_ZeroStruct;
var __str64;
var __str65;
var __str66;
var __str67;
var __str68;
var __str69;
var __str70;
var __str71;
var __str72;
var __str73;
var __str74;
var __str75;
var __str76;
var __str77;
var __str78;
var __str79;
var __str80;
var __str81;
var __str82;
var __str83;
var _PyExc_AttributeError;
var _Xmlparsetype__doc__;
var __str84;
var _Xmlparsetype;
var _pyexpat_ParserCreate__doc__;
var __str85;
var _kwlist_11531;
var __str86;
var __str87;
var __str88;
var __str89;
var _pyexpat_ErrorString__doc__;
var __str90;
var _pyexpat_methods;
var __str91;
var __str92;
var _pyexpat_module_documentation;
var __str93;
var __str94;
var _PyType_Type;
var __str95;
var __str96;
var __str97;
var __str98;
var __str99;
var __str100;
var __str101;
var __str102;
var __str103;
var __str104;
var __str105;
var __str106;
var __str107;
var __str108;
var __str109;
var __str110;
var __str111;
var __str112;
var __str113;
var __str114;
var __str115;
var __str116;
var __str117;
var __str118;
var __str119;
var __str120;
var __str121;
var __str122;
var __str123;
var __str124;
var __str125;
var __str126;
var __str127;
var __str128;
var __str129;
var __str130;
var __str131;
var __str132;
var __str133;
var __str134;
var __str135;
var __str136;
var __str137;
var __str138;
var __str139;
var __str140;
var __str141;
var __str142;
var __str143;
var __str144;
var __str145;
var __str146;
var __str147;
var __str148;
var __str149;
var __str150;
var __str151;
var __str152;
var __str153;
var __str154;
var __str155;
var __str156;
var __str157;
var __str158;
var __str159;
var __str160;
var __str161;
var __str162;
var __str163;
var __str164;
var _capi_11610;
var __str165;
var __str166;
var __str167;
var __str168;
var __str169;
var __str170;
var __str171;
var __str172;
var __str173;
var __str174;
var __str175;
var __str176;
var __str177;
var __str178;
var __str179;
var __str180;
var __str181;
var __str182;
var __str183;
var __str184;
var __str185;
var __str186;
var __str187;
var _handler_info;
var _implicitContext;
var __str188;
var __str1189;
var ___PRETTY_FUNCTION___3675;
var _message_3807;
var __str2190;
var __str3191;
var __str4192;
var __str5193;
var __str6194;
var __str7195;
var __str8196;
var __str9197;
var __str10198;
var __str11199;
var __str12200;
var __str13201;
var __str14202;
var __str15203;
var __str16204;
var __str17205;
var __str18206;
var __str19207;
var __str20208;
var __str21209;
var __str22210;
var __str23211;
var __str24212;
var __str25213;
var __str26214;
var __str27215;
var __str28216;
var __str29217;
var __str30218;
var __str31219;
var __str32220;
var __str33221;
var __str34222;
var __str35223;
var __str36224;
var __str37225;
var __str38226;
var __str39227;
var __str40228;
var __str41229;
var __str42230;
var _features_3829;
var __str43231;
var __str44232;
var _xmlLen_5100;
var _xmlNamespace_5099;
var _xmlnsLen_5102;
var _xmlnsNamespace_5101;
var _atypeCDATA_5618;
var _atypeID_5619;
var _atypeIDREF_5620;
var _atypeIDREFS_5621;
var _atypeENTITY_5622;
var _atypeENTITIES_5623;
var _atypeNMTOKEN_5624;
var _atypeNMTOKENS_5625;
var _enumValueSep_5627;
var _notationPrefix_5626;
var _enumValueStart_5628;
var _KW_ANY;
var _KW_ATTLIST;
var _KW_CDATA;
var _KW_DOCTYPE;
var _KW_ELEMENT;
var _KW_EMPTY;
var _KW_ENTITIES;
var _KW_ENTITY;
var _KW_FIXED;
var _KW_ID;
var _KW_IDREF;
var _KW_IDREFS;
var _KW_IGNORE;
var _KW_IMPLIED;
var _KW_INCLUDE;
var _KW_NDATA;
var _KW_NMTOKEN;
var _KW_NMTOKENS;
var _KW_NOTATION;
var _KW_PCDATA;
var _KW_PUBLIC;
var _KW_REQUIRED;
var _KW_SYSTEM;
var _types_1870;
var _namingBitmap;
var _nmstrtPages;
var _namePages;
var _CDATA_LSQB_1955;
var _utf8_encoding;
var _internal_utf8_encoding;
var _latin1_encoding;
var _ascii_encoding;
var _CDATA_LSQB_5212;
var _little2_encoding;
var _internal_little2_encoding;
var _CDATA_LSQB_8477;
var _big2_encoding;
var _internal_big2_encoding;
var _KW_version;
var _KW_encoding;
var _KW_standalone;
var _KW_yes;
var _KW_no;
var _KW_ISO_8859_1;
var _KW_US_ASCII;
var _KW_UTF_8;
var _KW_UTF_16;
var _KW_UTF_16BE;
var _KW_UTF_16LE;
var _encodingNames_12027;
var _encodings;





















































































































  function _set_error_attr($err, $name, $value) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $err_addr=__stackBase__;
        var $name_addr=__stackBase__+4;
        var $value_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $v=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$err_addr]=$err;
        HEAP[$name_addr]=$name;
        HEAP[$value_addr]=$value;
        var $1=HEAP[$value_addr]; //@line 107 "pyexpat.c"
        var $2=_PyInt_FromLong($1); //@line 107 "pyexpat.c"
        HEAP[$v]=$2; //@line 107 "pyexpat.c"
        var $3=HEAP[$v]; //@line 109 "pyexpat.c"
        var $4=($3)==0; //@line 109 "pyexpat.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 109 "pyexpat.c"
      case 1: // $bb
        var $5=HEAP[$err_addr]; //@line 109 "pyexpat.c"
        var $6=HEAP[$name_addr]; //@line 109 "pyexpat.c"
        var $7=HEAP[$v]; //@line 109 "pyexpat.c"
        var $8=_PyObject_SetAttrString($5, $6, $7); //@line 109 "pyexpat.c"
        var $9=((($8))|0)==-1; //@line 109 "pyexpat.c"
        if ($9) { __label__ = 2; break; } else { __label__ = 6; break; } //@line 109 "pyexpat.c"
      case 2: // $bb1
        var $10=HEAP[$v]; //@line 110 "pyexpat.c"
        var $11=($10)!=0; //@line 110 "pyexpat.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 110 "pyexpat.c"
      case 3: // $bb2
        var $12=HEAP[$v]; //@line 110 "pyexpat.c"
        var $13=(($12)&4294967295); //@line 110 "pyexpat.c"
        var $14=HEAP[$13]; //@line 110 "pyexpat.c"
        var $15=((($14) - 1)&4294967295); //@line 110 "pyexpat.c"
        var $16=HEAP[$v]; //@line 110 "pyexpat.c"
        var $17=(($16)&4294967295); //@line 110 "pyexpat.c"
        HEAP[$17]=$15; //@line 110 "pyexpat.c"
        var $18=HEAP[$v]; //@line 110 "pyexpat.c"
        var $19=(($18)&4294967295); //@line 110 "pyexpat.c"
        var $20=HEAP[$19]; //@line 110 "pyexpat.c"
        var $21=((($20))|0)==0; //@line 110 "pyexpat.c"
        if ($21) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 110 "pyexpat.c"
      case 4: // $bb3
        var $22=HEAP[$v]; //@line 110 "pyexpat.c"
        var $23=(($22+4)&4294967295); //@line 110 "pyexpat.c"
        var $24=HEAP[$23]; //@line 110 "pyexpat.c"
        var $25=(($24+24)&4294967295); //@line 110 "pyexpat.c"
        var $26=HEAP[$25]; //@line 110 "pyexpat.c"
        var $27=HEAP[$v]; //@line 110 "pyexpat.c"
        FUNCTION_TABLE[$26]($27); //@line 110 "pyexpat.c"
        __label__ = 5; break; //@line 110 "pyexpat.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 111 "pyexpat.c"
        __label__ = 9; break; //@line 111 "pyexpat.c"
      case 6: // $bb5
        var $28=HEAP[$v]; //@line 113 "pyexpat.c"
        var $29=(($28)&4294967295); //@line 113 "pyexpat.c"
        var $30=HEAP[$29]; //@line 113 "pyexpat.c"
        var $31=((($30) - 1)&4294967295); //@line 113 "pyexpat.c"
        var $32=HEAP[$v]; //@line 113 "pyexpat.c"
        var $33=(($32)&4294967295); //@line 113 "pyexpat.c"
        HEAP[$33]=$31; //@line 113 "pyexpat.c"
        var $34=HEAP[$v]; //@line 113 "pyexpat.c"
        var $35=(($34)&4294967295); //@line 113 "pyexpat.c"
        var $36=HEAP[$35]; //@line 113 "pyexpat.c"
        var $37=((($36))|0)==0; //@line 113 "pyexpat.c"
        if ($37) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 113 "pyexpat.c"
      case 7: // $bb6
        var $38=HEAP[$v]; //@line 113 "pyexpat.c"
        var $39=(($38+4)&4294967295); //@line 113 "pyexpat.c"
        var $40=HEAP[$39]; //@line 113 "pyexpat.c"
        var $41=(($40+24)&4294967295); //@line 113 "pyexpat.c"
        var $42=HEAP[$41]; //@line 113 "pyexpat.c"
        var $43=HEAP[$v]; //@line 113 "pyexpat.c"
        FUNCTION_TABLE[$42]($43); //@line 113 "pyexpat.c"
        __label__ = 8; break; //@line 113 "pyexpat.c"
      case 8: // $bb7
        HEAP[$0]=1; //@line 114 "pyexpat.c"
        __label__ = 9; break; //@line 114 "pyexpat.c"
      case 9: // $bb8
        var $44=HEAP[$0]; //@line 111 "pyexpat.c"
        HEAP[$retval]=$44; //@line 111 "pyexpat.c"
        __label__ = 10; break; //@line 111 "pyexpat.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 111 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 111 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _set_error($self, $code) {
    var __stackBase__  = STACKTOP; STACKTOP += 288; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 288);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $code_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $err=__stackBase__+16;
        var $buffer=__stackBase__+20;
        var $parser=__stackBase__+276;
        var $lineno=__stackBase__+280;
        var $column=__stackBase__+284;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$code_addr]=$code;
        var $1=HEAP[$self_addr]; //@line 125 "pyexpat.c"
        var $2=(($1+8)&4294967295); //@line 125 "pyexpat.c"
        var $3=HEAP[$2]; //@line 125 "pyexpat.c"
        HEAP[$parser]=$3; //@line 125 "pyexpat.c"
        var $4=HEAP[$parser]; //@line 126 "pyexpat.c"
        var $5=_XML_GetCurrentLineNumber($4); //@line 126 "pyexpat.c"
        HEAP[$lineno]=$5; //@line 126 "pyexpat.c"
        var $6=HEAP[$parser]; //@line 127 "pyexpat.c"
        var $7=_XML_GetCurrentColumnNumber($6); //@line 127 "pyexpat.c"
        HEAP[$column]=$7; //@line 127 "pyexpat.c"
        var $8=HEAP[$code_addr]; //@line 131 "pyexpat.c"
        var $9=_XML_ErrorString($8); //@line 131 "pyexpat.c"
        var $buffer1=$buffer; //@line 131 "pyexpat.c"
        var $10=HEAP[$lineno]; //@line 131 "pyexpat.c"
        var $11=HEAP[$column]; //@line 131 "pyexpat.c"
        var $12=_sprintf($buffer1, ((__str)&4294967295), $9, $10, $11); //@line 131 "pyexpat.c"
        var $13=HEAP[_ErrorObject]; //@line 133 "pyexpat.c"
        var $buffer2=$buffer; //@line 133 "pyexpat.c"
        var $14=_PyObject_CallFunction($13, ((__str1)&4294967295), $buffer2); //@line 133 "pyexpat.c"
        HEAP[$err]=$14; //@line 133 "pyexpat.c"
        var $15=HEAP[$err]; //@line 134 "pyexpat.c"
        var $16=($15)!=0; //@line 134 "pyexpat.c"
        if ($16) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 134 "pyexpat.c"
      case 1: // $bb
        var $17=HEAP[$code_addr]; //@line 134 "pyexpat.c"
        var $18=HEAP[$err]; //@line 134 "pyexpat.c"
        var $19=_set_error_attr($18, ((__str2)&4294967295), $17); //@line 134 "pyexpat.c"
        var $20=((($19))|0)!=0; //@line 134 "pyexpat.c"
        if ($20) { __label__ = 2; break; } else { __label__ = 5; break; } //@line 134 "pyexpat.c"
      case 2: // $bb3
        var $21=HEAP[$err]; //@line 134 "pyexpat.c"
        var $22=HEAP[$column]; //@line 134 "pyexpat.c"
        var $23=_set_error_attr($21, ((__str3)&4294967295), $22); //@line 134 "pyexpat.c"
        var $24=((($23))|0)!=0; //@line 134 "pyexpat.c"
        if ($24) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 134 "pyexpat.c"
      case 3: // $bb4
        var $25=HEAP[$err]; //@line 134 "pyexpat.c"
        var $26=HEAP[$lineno]; //@line 134 "pyexpat.c"
        var $27=_set_error_attr($25, ((__str4)&4294967295), $26); //@line 134 "pyexpat.c"
        var $28=((($27))|0)!=0; //@line 134 "pyexpat.c"
        if ($28) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 134 "pyexpat.c"
      case 4: // $bb5
        var $29=HEAP[_ErrorObject]; //@line 138 "pyexpat.c"
        var $30=HEAP[$err]; //@line 138 "pyexpat.c"
        _PyErr_SetObject($29, $30); //@line 138 "pyexpat.c"
        __label__ = 5; break; //@line 138 "pyexpat.c"
      case 5: // $bb6
        var $31=HEAP[$err]; //@line 140 "pyexpat.c"
        var $32=($31)!=0; //@line 140 "pyexpat.c"
        if ($32) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 140 "pyexpat.c"
      case 6: // $bb7
        var $33=HEAP[$err]; //@line 140 "pyexpat.c"
        var $34=(($33)&4294967295); //@line 140 "pyexpat.c"
        var $35=HEAP[$34]; //@line 140 "pyexpat.c"
        var $36=((($35) - 1)&4294967295); //@line 140 "pyexpat.c"
        var $37=HEAP[$err]; //@line 140 "pyexpat.c"
        var $38=(($37)&4294967295); //@line 140 "pyexpat.c"
        HEAP[$38]=$36; //@line 140 "pyexpat.c"
        var $39=HEAP[$err]; //@line 140 "pyexpat.c"
        var $40=(($39)&4294967295); //@line 140 "pyexpat.c"
        var $41=HEAP[$40]; //@line 140 "pyexpat.c"
        var $42=((($41))|0)==0; //@line 140 "pyexpat.c"
        if ($42) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 140 "pyexpat.c"
      case 7: // $bb8
        var $43=HEAP[$err]; //@line 140 "pyexpat.c"
        var $44=(($43+4)&4294967295); //@line 140 "pyexpat.c"
        var $45=HEAP[$44]; //@line 140 "pyexpat.c"
        var $46=(($45+24)&4294967295); //@line 140 "pyexpat.c"
        var $47=HEAP[$46]; //@line 140 "pyexpat.c"
        var $48=HEAP[$err]; //@line 140 "pyexpat.c"
        FUNCTION_TABLE[$47]($48); //@line 140 "pyexpat.c"
        __label__ = 8; break; //@line 140 "pyexpat.c"
      case 8: // $bb9
        HEAP[$0]=0; //@line 141 "pyexpat.c"
        var $49=HEAP[$0]; //@line 141 "pyexpat.c"
        HEAP[$retval]=$49; //@line 141 "pyexpat.c"
        __label__ = 9; break; //@line 141 "pyexpat.c"
      case 9: // $return
        var $retval10=HEAP[$retval]; //@line 141 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 141 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _have_handler($self, $type) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $type_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $handler=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$type_addr]=$type;
        var $1=HEAP[$self_addr]; //@line 147 "pyexpat.c"
        var $2=(($1+48)&4294967295); //@line 147 "pyexpat.c"
        var $3=HEAP[$2]; //@line 147 "pyexpat.c"
        var $4=HEAP[$type_addr]; //@line 147 "pyexpat.c"
        var $5=(($3+4*$4)&4294967295); //@line 147 "pyexpat.c"
        var $6=HEAP[$5]; //@line 147 "pyexpat.c"
        HEAP[$handler]=$6; //@line 147 "pyexpat.c"
        var $7=HEAP[$handler]; //@line 148 "pyexpat.c"
        var $8=($7)!=0; //@line 148 "pyexpat.c"
        var $9=unSign(($8), 1, 0); //@line 148 "pyexpat.c"
        HEAP[$0]=$9; //@line 148 "pyexpat.c"
        var $10=HEAP[$0]; //@line 148 "pyexpat.c"
        HEAP[$retval]=$10; //@line 148 "pyexpat.c"
        __label__ = 1; break; //@line 148 "pyexpat.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 148 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 148 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _get_handler_name($hinfo) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $hinfo_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $name=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$hinfo_addr]=$hinfo;
        var $1=HEAP[$hinfo_addr]; //@line 154 "pyexpat.c"
        var $2=(($1+16)&4294967295); //@line 154 "pyexpat.c"
        var $3=HEAP[$2]; //@line 154 "pyexpat.c"
        HEAP[$name]=$3; //@line 154 "pyexpat.c"
        var $4=HEAP[$name]; //@line 155 "pyexpat.c"
        var $5=($4)==0; //@line 155 "pyexpat.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 155 "pyexpat.c"
      case 1: // $bb
        var $6=HEAP[$hinfo_addr]; //@line 156 "pyexpat.c"
        var $7=(($6)&4294967295); //@line 156 "pyexpat.c"
        var $8=HEAP[$7]; //@line 156 "pyexpat.c"
        var $9=_PyString_FromString($8); //@line 156 "pyexpat.c"
        HEAP[$name]=$9; //@line 156 "pyexpat.c"
        var $10=HEAP[$hinfo_addr]; //@line 157 "pyexpat.c"
        var $11=(($10+16)&4294967295); //@line 157 "pyexpat.c"
        var $12=HEAP[$name]; //@line 157 "pyexpat.c"
        HEAP[$11]=$12; //@line 157 "pyexpat.c"
        __label__ = 2; break; //@line 157 "pyexpat.c"
      case 2: // $bb1
        var $13=HEAP[$name]; //@line 159 "pyexpat.c"
        var $14=($13)!=0; //@line 159 "pyexpat.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 159 "pyexpat.c"
      case 3: // $bb2
        var $15=HEAP[$name]; //@line 159 "pyexpat.c"
        var $16=(($15)&4294967295); //@line 159 "pyexpat.c"
        var $17=HEAP[$16]; //@line 159 "pyexpat.c"
        var $18=((($17) + 1)&4294967295); //@line 159 "pyexpat.c"
        var $19=HEAP[$name]; //@line 159 "pyexpat.c"
        var $20=(($19)&4294967295); //@line 159 "pyexpat.c"
        HEAP[$20]=$18; //@line 159 "pyexpat.c"
        __label__ = 4; break; //@line 159 "pyexpat.c"
      case 4: // $bb3
        var $21=HEAP[$name]; //@line 160 "pyexpat.c"
        HEAP[$0]=$21; //@line 160 "pyexpat.c"
        var $22=HEAP[$0]; //@line 160 "pyexpat.c"
        HEAP[$retval]=$22; //@line 160 "pyexpat.c"
        __label__ = 5; break; //@line 160 "pyexpat.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 160 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 160 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _conv_string_to_unicode($str) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $str_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$str_addr]=$str;
        var $1=HEAP[$str_addr]; //@line 174 "pyexpat.c"
        var $2=($1)==0; //@line 174 "pyexpat.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 174 "pyexpat.c"
      case 1: // $bb
        var $3=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 175 "pyexpat.c"
        var $4=((($3) + 1)&4294967295); //@line 175 "pyexpat.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$4; //@line 175 "pyexpat.c"
        HEAP[$0]=__Py_NoneStruct; //@line 176 "pyexpat.c"
        __label__ = 3; break; //@line 176 "pyexpat.c"
      case 2: // $bb1
        var $5=HEAP[$str_addr]; //@line 178 "pyexpat.c"
        var $6=_strlen($5); //@line 178 "pyexpat.c"
        var $7=HEAP[$str_addr]; //@line 178 "pyexpat.c"
        var $8=_PyUnicodeUCS2_DecodeUTF8($7, $6, ((__str5)&4294967295)); //@line 178 "pyexpat.c"
        HEAP[$0]=$8; //@line 178 "pyexpat.c"
        __label__ = 3; break; //@line 178 "pyexpat.c"
      case 3: // $bb2
        var $9=HEAP[$0]; //@line 176 "pyexpat.c"
        HEAP[$retval]=$9; //@line 176 "pyexpat.c"
        __label__ = 4; break; //@line 176 "pyexpat.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 176 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 176 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _conv_string_len_to_unicode($str, $len) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $str_addr=__stackBase__;
        var $len_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$str_addr]=$str;
        HEAP[$len_addr]=$len;
        var $1=HEAP[$str_addr]; //@line 187 "pyexpat.c"
        var $2=($1)==0; //@line 187 "pyexpat.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 187 "pyexpat.c"
      case 1: // $bb
        var $3=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 188 "pyexpat.c"
        var $4=((($3) + 1)&4294967295); //@line 188 "pyexpat.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$4; //@line 188 "pyexpat.c"
        HEAP[$0]=__Py_NoneStruct; //@line 189 "pyexpat.c"
        __label__ = 3; break; //@line 189 "pyexpat.c"
      case 2: // $bb1
        var $5=HEAP[$str_addr]; //@line 191 "pyexpat.c"
        var $6=HEAP[$len_addr]; //@line 191 "pyexpat.c"
        var $7=_PyUnicodeUCS2_DecodeUTF8($5, $6, ((__str5)&4294967295)); //@line 191 "pyexpat.c"
        HEAP[$0]=$7; //@line 191 "pyexpat.c"
        __label__ = 3; break; //@line 191 "pyexpat.c"
      case 3: // $bb2
        var $8=HEAP[$0]; //@line 189 "pyexpat.c"
        HEAP[$retval]=$8; //@line 189 "pyexpat.c"
        __label__ = 4; break; //@line 189 "pyexpat.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 189 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 189 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _conv_string_to_utf8($str) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $str_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$str_addr]=$str;
        var $1=HEAP[$str_addr]; //@line 204 "pyexpat.c"
        var $2=($1)==0; //@line 204 "pyexpat.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 204 "pyexpat.c"
      case 1: // $bb
        var $3=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 205 "pyexpat.c"
        var $4=((($3) + 1)&4294967295); //@line 205 "pyexpat.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$4; //@line 205 "pyexpat.c"
        HEAP[$0]=__Py_NoneStruct; //@line 206 "pyexpat.c"
        __label__ = 3; break; //@line 206 "pyexpat.c"
      case 2: // $bb1
        var $5=HEAP[$str_addr]; //@line 208 "pyexpat.c"
        var $6=_PyString_FromString($5); //@line 208 "pyexpat.c"
        HEAP[$0]=$6; //@line 208 "pyexpat.c"
        __label__ = 3; break; //@line 208 "pyexpat.c"
      case 3: // $bb2
        var $7=HEAP[$0]; //@line 206 "pyexpat.c"
        HEAP[$retval]=$7; //@line 206 "pyexpat.c"
        __label__ = 4; break; //@line 206 "pyexpat.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 206 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 206 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _conv_string_len_to_utf8($str, $len) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $str_addr=__stackBase__;
        var $len_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$str_addr]=$str;
        HEAP[$len_addr]=$len;
        var $1=HEAP[$str_addr]; //@line 217 "pyexpat.c"
        var $2=($1)==0; //@line 217 "pyexpat.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 217 "pyexpat.c"
      case 1: // $bb
        var $3=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 218 "pyexpat.c"
        var $4=((($3) + 1)&4294967295); //@line 218 "pyexpat.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$4; //@line 218 "pyexpat.c"
        HEAP[$0]=__Py_NoneStruct; //@line 219 "pyexpat.c"
        __label__ = 3; break; //@line 219 "pyexpat.c"
      case 2: // $bb1
        var $5=HEAP[$str_addr]; //@line 221 "pyexpat.c"
        var $6=HEAP[$len_addr]; //@line 221 "pyexpat.c"
        var $7=_PyString_FromStringAndSize($5, $6); //@line 221 "pyexpat.c"
        HEAP[$0]=$7; //@line 221 "pyexpat.c"
        __label__ = 3; break; //@line 221 "pyexpat.c"
      case 3: // $bb2
        var $8=HEAP[$0]; //@line 219 "pyexpat.c"
        HEAP[$retval]=$8; //@line 219 "pyexpat.c"
        __label__ = 4; break; //@line 219 "pyexpat.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 219 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 219 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _error_external_entity_ref_handler($parser, $context, $base, $systemId, $publicId) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $context_addr=__stackBase__+4;
        var $base_addr=__stackBase__+8;
        var $systemId_addr=__stackBase__+12;
        var $publicId_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$context_addr]=$context;
        HEAP[$base_addr]=$base;
        HEAP[$systemId_addr]=$systemId;
        HEAP[$publicId_addr]=$publicId;
        HEAP[$0]=0; //@line 238 "pyexpat.c"
        var $1=HEAP[$0]; //@line 238 "pyexpat.c"
        HEAP[$retval]=$1; //@line 238 "pyexpat.c"
        __label__ = 1; break; //@line 238 "pyexpat.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 238 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 238 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _noop_character_data_handler($userData, $data, $len) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr=__stackBase__;
        var $data_addr=__stackBase__+4;
        var $len_addr=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$userData_addr]=$userData;
        HEAP[$data_addr]=$data;
        HEAP[$len_addr]=$len;
        __label__ = 1; break; //@line 251 "pyexpat.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 251 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _flag_error($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $0=HEAP[$self_addr]; //@line 256 "pyexpat.c"
        _clear_handlers($0, 0); //@line 256 "pyexpat.c"
        var $1=HEAP[$self_addr]; //@line 257 "pyexpat.c"
        var $2=(($1+8)&4294967295); //@line 257 "pyexpat.c"
        var $3=HEAP[$2]; //@line 257 "pyexpat.c"
        _XML_SetExternalEntityRefHandler($3, (FUNCTION_TABLE_OFFSET + 2)); //@line 257 "pyexpat.c"
        __label__ = 1; break; //@line 259 "pyexpat.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 259 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _getcode($slot, $func_name, $lineno) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $slot_addr=__stackBase__;
        var $func_name_addr=__stackBase__+4;
        var $lineno_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$slot_addr]=$slot;
        HEAP[$func_name_addr]=$func_name;
        HEAP[$lineno_addr]=$lineno;
        var $1=HEAP[$slot_addr]; //@line 264 "pyexpat.c"
        var $2=((_handler_info+$1*20)&4294967295); //@line 264 "pyexpat.c"
        var $3=(($2+12)&4294967295); //@line 264 "pyexpat.c"
        var $4=HEAP[$3]; //@line 264 "pyexpat.c"
        var $5=($4)==0; //@line 264 "pyexpat.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 264 "pyexpat.c"
      case 1: // $bb
        var $6=HEAP[$slot_addr]; //@line 265 "pyexpat.c"
        var $7=HEAP[$func_name_addr]; //@line 265 "pyexpat.c"
        var $8=HEAP[$lineno_addr]; //@line 265 "pyexpat.c"
        var $9=_PyCode_NewEmpty(((__str6)&4294967295), $7, $8); //@line 265 "pyexpat.c"
        var $10=((_handler_info+$6*20)&4294967295); //@line 265 "pyexpat.c"
        var $11=(($10+12)&4294967295); //@line 265 "pyexpat.c"
        HEAP[$11]=$9; //@line 265 "pyexpat.c"
        __label__ = 2; break; //@line 265 "pyexpat.c"
      case 2: // $bb1
        var $12=HEAP[$slot_addr]; //@line 268 "pyexpat.c"
        var $13=((_handler_info+$12*20)&4294967295); //@line 268 "pyexpat.c"
        var $14=(($13+12)&4294967295); //@line 268 "pyexpat.c"
        var $15=HEAP[$14]; //@line 268 "pyexpat.c"
        HEAP[$0]=$15; //@line 268 "pyexpat.c"
        var $16=HEAP[$0]; //@line 268 "pyexpat.c"
        HEAP[$retval]=$16; //@line 268 "pyexpat.c"
        __label__ = 3; break; //@line 268 "pyexpat.c"
      case 3: // $return
        var $retval2=HEAP[$retval]; //@line 268 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval2; //@line 268 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _trace_frame($tstate, $f, $code, $val) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $tstate_addr=__stackBase__;
        var $f_addr=__stackBase__+4;
        var $code_addr=__stackBase__+8;
        var $val_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_11=__stackBase__+20;
        var $iftmp_10=__stackBase__+24;
        var $0=__stackBase__+28;
        var $result=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$tstate_addr]=$tstate;
        HEAP[$f_addr]=$f;
        HEAP[$code_addr]=$code;
        HEAP[$val_addr]=$val;
        HEAP[$result]=0; //@line 275 "pyexpat.c"
        var $1=HEAP[$tstate_addr]; //@line 276 "pyexpat.c"
        var $2=(($1+20)&4294967295); //@line 276 "pyexpat.c"
        var $3=HEAP[$2]; //@line 276 "pyexpat.c"
        var $4=((($3))|0)==0; //@line 276 "pyexpat.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 276 "pyexpat.c"
      case 1: // $bb
        var $5=HEAP[$tstate_addr]; //@line 276 "pyexpat.c"
        var $6=(($5+16)&4294967295); //@line 276 "pyexpat.c"
        var $7=HEAP[$6]; //@line 276 "pyexpat.c"
        var $8=((($7))|0)!=0; //@line 276 "pyexpat.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 276 "pyexpat.c"
      case 2: // $bb1
        HEAP[$0]=0; //@line 277 "pyexpat.c"
        __label__ = 17; break; //@line 277 "pyexpat.c"
      case 3: // $bb2
        var $9=HEAP[$tstate_addr]; //@line 278 "pyexpat.c"
        var $10=(($9+24)&4294967295); //@line 278 "pyexpat.c"
        var $11=HEAP[$10]; //@line 278 "pyexpat.c"
        var $12=($11)!=0; //@line 278 "pyexpat.c"
        if ($12) { __label__ = 4; break; } else { __label__ = 10; break; } //@line 278 "pyexpat.c"
      case 4: // $bb3
        var $13=HEAP[$tstate_addr]; //@line 279 "pyexpat.c"
        var $14=(($13+16)&4294967295); //@line 279 "pyexpat.c"
        var $15=HEAP[$14]; //@line 279 "pyexpat.c"
        var $16=((($15) + 1)&4294967295); //@line 279 "pyexpat.c"
        var $17=HEAP[$tstate_addr]; //@line 279 "pyexpat.c"
        var $18=(($17+16)&4294967295); //@line 279 "pyexpat.c"
        HEAP[$18]=$16; //@line 279 "pyexpat.c"
        var $19=HEAP[$tstate_addr]; //@line 280 "pyexpat.c"
        var $20=(($19+24)&4294967295); //@line 280 "pyexpat.c"
        var $21=HEAP[$20]; //@line 280 "pyexpat.c"
        var $22=HEAP[$tstate_addr]; //@line 280 "pyexpat.c"
        var $23=(($22+32)&4294967295); //@line 280 "pyexpat.c"
        var $24=HEAP[$23]; //@line 280 "pyexpat.c"
        var $25=HEAP[$f_addr]; //@line 280 "pyexpat.c"
        var $26=HEAP[$code_addr]; //@line 280 "pyexpat.c"
        var $27=HEAP[$val_addr]; //@line 280 "pyexpat.c"
        var $28=FUNCTION_TABLE[$21]($24, $25, $26, $27); //@line 280 "pyexpat.c"
        HEAP[$result]=$28; //@line 280 "pyexpat.c"
        var $29=HEAP[$tstate_addr]; //@line 282 "pyexpat.c"
        var $30=(($29+28)&4294967295); //@line 282 "pyexpat.c"
        var $31=HEAP[$30]; //@line 282 "pyexpat.c"
        var $32=($31)!=0; //@line 282 "pyexpat.c"
        if ($32) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 282 "pyexpat.c"
      case 5: // $bb4
        var $33=HEAP[$tstate_addr]; //@line 282 "pyexpat.c"
        var $34=(($33+24)&4294967295); //@line 282 "pyexpat.c"
        var $35=HEAP[$34]; //@line 282 "pyexpat.c"
        var $36=($35)!=0; //@line 282 "pyexpat.c"
        if ($36) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 282 "pyexpat.c"
      case 6: // $bb5
        HEAP[$iftmp_10]=1; //@line 282 "pyexpat.c"
        __label__ = 8; break; //@line 282 "pyexpat.c"
      case 7: // $bb6
        HEAP[$iftmp_10]=0; //@line 282 "pyexpat.c"
        __label__ = 8; break; //@line 282 "pyexpat.c"
      case 8: // $bb7
        var $37=HEAP[$tstate_addr]; //@line 282 "pyexpat.c"
        var $38=(($37+20)&4294967295); //@line 282 "pyexpat.c"
        var $39=HEAP[$iftmp_10]; //@line 282 "pyexpat.c"
        HEAP[$38]=$39; //@line 282 "pyexpat.c"
        var $40=HEAP[$tstate_addr]; //@line 284 "pyexpat.c"
        var $41=(($40+16)&4294967295); //@line 284 "pyexpat.c"
        var $42=HEAP[$41]; //@line 284 "pyexpat.c"
        var $43=((($42) - 1)&4294967295); //@line 284 "pyexpat.c"
        var $44=HEAP[$tstate_addr]; //@line 284 "pyexpat.c"
        var $45=(($44+16)&4294967295); //@line 284 "pyexpat.c"
        HEAP[$45]=$43; //@line 284 "pyexpat.c"
        var $46=HEAP[$result]; //@line 285 "pyexpat.c"
        var $47=((($46))|0)!=0; //@line 285 "pyexpat.c"
        if ($47) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 285 "pyexpat.c"
      case 9: // $bb8
        var $48=HEAP[$result]; //@line 286 "pyexpat.c"
        HEAP[$0]=$48; //@line 286 "pyexpat.c"
        __label__ = 17; break; //@line 286 "pyexpat.c"
      case 10: // $bb9
        var $49=HEAP[$tstate_addr]; //@line 288 "pyexpat.c"
        var $50=(($49+28)&4294967295); //@line 288 "pyexpat.c"
        var $51=HEAP[$50]; //@line 288 "pyexpat.c"
        var $52=($51)!=0; //@line 288 "pyexpat.c"
        if ($52) { __label__ = 11; break; } else { __label__ = 16; break; } //@line 288 "pyexpat.c"
      case 11: // $bb10
        var $53=HEAP[$tstate_addr]; //@line 289 "pyexpat.c"
        var $54=(($53+16)&4294967295); //@line 289 "pyexpat.c"
        var $55=HEAP[$54]; //@line 289 "pyexpat.c"
        var $56=((($55) + 1)&4294967295); //@line 289 "pyexpat.c"
        var $57=HEAP[$tstate_addr]; //@line 289 "pyexpat.c"
        var $58=(($57+16)&4294967295); //@line 289 "pyexpat.c"
        HEAP[$58]=$56; //@line 289 "pyexpat.c"
        var $59=HEAP[$tstate_addr]; //@line 290 "pyexpat.c"
        var $60=(($59+28)&4294967295); //@line 290 "pyexpat.c"
        var $61=HEAP[$60]; //@line 290 "pyexpat.c"
        var $62=HEAP[$tstate_addr]; //@line 290 "pyexpat.c"
        var $63=(($62+36)&4294967295); //@line 290 "pyexpat.c"
        var $64=HEAP[$63]; //@line 290 "pyexpat.c"
        var $65=HEAP[$f_addr]; //@line 290 "pyexpat.c"
        var $66=HEAP[$code_addr]; //@line 290 "pyexpat.c"
        var $67=HEAP[$val_addr]; //@line 290 "pyexpat.c"
        var $68=FUNCTION_TABLE[$61]($64, $65, $66, $67); //@line 290 "pyexpat.c"
        HEAP[$result]=$68; //@line 290 "pyexpat.c"
        var $69=HEAP[$tstate_addr]; //@line 292 "pyexpat.c"
        var $70=(($69+28)&4294967295); //@line 292 "pyexpat.c"
        var $71=HEAP[$70]; //@line 292 "pyexpat.c"
        var $72=($71)!=0; //@line 292 "pyexpat.c"
        if ($72) { __label__ = 13; break; } else { __label__ = 12; break; } //@line 292 "pyexpat.c"
      case 12: // $bb11
        var $73=HEAP[$tstate_addr]; //@line 292 "pyexpat.c"
        var $74=(($73+24)&4294967295); //@line 292 "pyexpat.c"
        var $75=HEAP[$74]; //@line 292 "pyexpat.c"
        var $76=($75)!=0; //@line 292 "pyexpat.c"
        if ($76) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 292 "pyexpat.c"
      case 13: // $bb12
        HEAP[$iftmp_11]=1; //@line 292 "pyexpat.c"
        __label__ = 15; break; //@line 292 "pyexpat.c"
      case 14: // $bb13
        HEAP[$iftmp_11]=0; //@line 292 "pyexpat.c"
        __label__ = 15; break; //@line 292 "pyexpat.c"
      case 15: // $bb14
        var $77=HEAP[$tstate_addr]; //@line 292 "pyexpat.c"
        var $78=(($77+20)&4294967295); //@line 292 "pyexpat.c"
        var $79=HEAP[$iftmp_11]; //@line 292 "pyexpat.c"
        HEAP[$78]=$79; //@line 292 "pyexpat.c"
        var $80=HEAP[$tstate_addr]; //@line 294 "pyexpat.c"
        var $81=(($80+16)&4294967295); //@line 294 "pyexpat.c"
        var $82=HEAP[$81]; //@line 294 "pyexpat.c"
        var $83=((($82) - 1)&4294967295); //@line 294 "pyexpat.c"
        var $84=HEAP[$tstate_addr]; //@line 294 "pyexpat.c"
        var $85=(($84+16)&4294967295); //@line 294 "pyexpat.c"
        HEAP[$85]=$83; //@line 294 "pyexpat.c"
        __label__ = 16; break; //@line 294 "pyexpat.c"
      case 16: // $bb15
        var $86=HEAP[$result]; //@line 296 "pyexpat.c"
        HEAP[$0]=$86; //@line 296 "pyexpat.c"
        __label__ = 17; break; //@line 296 "pyexpat.c"
      case 17: // $bb16
        var $87=HEAP[$0]; //@line 277 "pyexpat.c"
        HEAP[$retval]=$87; //@line 277 "pyexpat.c"
        __label__ = 18; break; //@line 277 "pyexpat.c"
      case 18: // $return
        var $retval17=HEAP[$retval]; //@line 277 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval17; //@line 277 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _trace_frame_exc($tstate, $f) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $tstate_addr=__stackBase__;
        var $f_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $type=__stackBase__+16;
        var $value=__stackBase__+20;
        var $traceback=__stackBase__+24;
        var $arg=__stackBase__+28;
        var $err=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$tstate_addr]=$tstate;
        HEAP[$f_addr]=$f;
        var $1=HEAP[$tstate_addr]; //@line 305 "pyexpat.c"
        var $2=(($1+28)&4294967295); //@line 305 "pyexpat.c"
        var $3=HEAP[$2]; //@line 305 "pyexpat.c"
        var $4=($3)==0; //@line 305 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 305 "pyexpat.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 306 "pyexpat.c"
        __label__ = 20; break; //@line 306 "pyexpat.c"
      case 2: // $bb1
        _PyErr_Fetch($type, $value, $traceback); //@line 308 "pyexpat.c"
        var $5=HEAP[$value]; //@line 309 "pyexpat.c"
        var $6=($5)==0; //@line 309 "pyexpat.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 309 "pyexpat.c"
      case 3: // $bb2
        HEAP[$value]=__Py_NoneStruct; //@line 310 "pyexpat.c"
        var $7=HEAP[$value]; //@line 311 "pyexpat.c"
        var $8=(($7)&4294967295); //@line 311 "pyexpat.c"
        var $9=HEAP[$8]; //@line 311 "pyexpat.c"
        var $10=((($9) + 1)&4294967295); //@line 311 "pyexpat.c"
        var $11=(($7)&4294967295); //@line 311 "pyexpat.c"
        HEAP[$11]=$10; //@line 311 "pyexpat.c"
        __label__ = 4; break; //@line 311 "pyexpat.c"
      case 4: // $bb3
        var $12=HEAP[$traceback]; //@line 316 "pyexpat.c"
        var $13=HEAP[$value]; //@line 316 "pyexpat.c"
        var $14=HEAP[$type]; //@line 316 "pyexpat.c"
        var $15=_PyTuple_Pack(3, $14, $13, $12); //@line 316 "pyexpat.c"
        HEAP[$arg]=$15; //@line 316 "pyexpat.c"
        var $16=HEAP[$arg]; //@line 318 "pyexpat.c"
        var $17=($16)==0; //@line 318 "pyexpat.c"
        if ($17) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 318 "pyexpat.c"
      case 5: // $bb4
        var $18=HEAP[$traceback]; //@line 319 "pyexpat.c"
        var $19=HEAP[$value]; //@line 319 "pyexpat.c"
        var $20=HEAP[$type]; //@line 319 "pyexpat.c"
        _PyErr_Restore($20, $19, $18); //@line 319 "pyexpat.c"
        HEAP[$0]=0; //@line 320 "pyexpat.c"
        __label__ = 20; break; //@line 320 "pyexpat.c"
      case 6: // $bb5
        var $21=HEAP[$tstate_addr]; //@line 322 "pyexpat.c"
        var $22=HEAP[$f_addr]; //@line 322 "pyexpat.c"
        var $23=HEAP[$arg]; //@line 322 "pyexpat.c"
        var $24=_trace_frame($21, $22, 1, $23); //@line 322 "pyexpat.c"
        HEAP[$err]=$24; //@line 322 "pyexpat.c"
        var $25=HEAP[$arg]; //@line 323 "pyexpat.c"
        var $26=(($25)&4294967295); //@line 323 "pyexpat.c"
        var $27=HEAP[$26]; //@line 323 "pyexpat.c"
        var $28=((($27) - 1)&4294967295); //@line 323 "pyexpat.c"
        var $29=HEAP[$arg]; //@line 323 "pyexpat.c"
        var $30=(($29)&4294967295); //@line 323 "pyexpat.c"
        HEAP[$30]=$28; //@line 323 "pyexpat.c"
        var $31=HEAP[$arg]; //@line 323 "pyexpat.c"
        var $32=(($31)&4294967295); //@line 323 "pyexpat.c"
        var $33=HEAP[$32]; //@line 323 "pyexpat.c"
        var $34=((($33))|0)==0; //@line 323 "pyexpat.c"
        if ($34) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 323 "pyexpat.c"
      case 7: // $bb6
        var $35=HEAP[$arg]; //@line 323 "pyexpat.c"
        var $36=(($35+4)&4294967295); //@line 323 "pyexpat.c"
        var $37=HEAP[$36]; //@line 323 "pyexpat.c"
        var $38=(($37+24)&4294967295); //@line 323 "pyexpat.c"
        var $39=HEAP[$38]; //@line 323 "pyexpat.c"
        var $40=HEAP[$arg]; //@line 323 "pyexpat.c"
        FUNCTION_TABLE[$39]($40); //@line 323 "pyexpat.c"
        __label__ = 8; break; //@line 323 "pyexpat.c"
      case 8: // $bb7
        var $41=HEAP[$err]; //@line 324 "pyexpat.c"
        var $42=((($41))|0)==0; //@line 324 "pyexpat.c"
        if ($42) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 324 "pyexpat.c"
      case 9: // $bb8
        var $43=HEAP[$traceback]; //@line 325 "pyexpat.c"
        var $44=HEAP[$value]; //@line 325 "pyexpat.c"
        var $45=HEAP[$type]; //@line 325 "pyexpat.c"
        _PyErr_Restore($45, $44, $43); //@line 325 "pyexpat.c"
        __label__ = 19; break; //@line 325 "pyexpat.c"
      case 10: // $bb9
        var $46=HEAP[$type]; //@line 327 "pyexpat.c"
        var $47=($46)!=0; //@line 327 "pyexpat.c"
        if ($47) { __label__ = 11; break; } else { __label__ = 13; break; } //@line 327 "pyexpat.c"
      case 11: // $bb10
        var $48=HEAP[$type]; //@line 327 "pyexpat.c"
        var $49=(($48)&4294967295); //@line 327 "pyexpat.c"
        var $50=HEAP[$49]; //@line 327 "pyexpat.c"
        var $51=((($50) - 1)&4294967295); //@line 327 "pyexpat.c"
        var $52=(($48)&4294967295); //@line 327 "pyexpat.c"
        HEAP[$52]=$51; //@line 327 "pyexpat.c"
        var $53=(($48)&4294967295); //@line 327 "pyexpat.c"
        var $54=HEAP[$53]; //@line 327 "pyexpat.c"
        var $55=((($54))|0)==0; //@line 327 "pyexpat.c"
        if ($55) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 327 "pyexpat.c"
      case 12: // $bb11
        var $56=HEAP[$type]; //@line 327 "pyexpat.c"
        var $57=(($56+4)&4294967295); //@line 327 "pyexpat.c"
        var $58=HEAP[$57]; //@line 327 "pyexpat.c"
        var $59=(($58+24)&4294967295); //@line 327 "pyexpat.c"
        var $60=HEAP[$59]; //@line 327 "pyexpat.c"
        var $61=HEAP[$type]; //@line 327 "pyexpat.c"
        FUNCTION_TABLE[$60]($61); //@line 327 "pyexpat.c"
        __label__ = 13; break; //@line 327 "pyexpat.c"
      case 13: // $bb12
        var $62=HEAP[$value]; //@line 328 "pyexpat.c"
        var $63=($62)!=0; //@line 328 "pyexpat.c"
        if ($63) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 328 "pyexpat.c"
      case 14: // $bb13
        var $64=HEAP[$value]; //@line 328 "pyexpat.c"
        var $65=(($64)&4294967295); //@line 328 "pyexpat.c"
        var $66=HEAP[$65]; //@line 328 "pyexpat.c"
        var $67=((($66) - 1)&4294967295); //@line 328 "pyexpat.c"
        var $68=(($64)&4294967295); //@line 328 "pyexpat.c"
        HEAP[$68]=$67; //@line 328 "pyexpat.c"
        var $69=(($64)&4294967295); //@line 328 "pyexpat.c"
        var $70=HEAP[$69]; //@line 328 "pyexpat.c"
        var $71=((($70))|0)==0; //@line 328 "pyexpat.c"
        if ($71) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 328 "pyexpat.c"
      case 15: // $bb14
        var $72=HEAP[$value]; //@line 328 "pyexpat.c"
        var $73=(($72+4)&4294967295); //@line 328 "pyexpat.c"
        var $74=HEAP[$73]; //@line 328 "pyexpat.c"
        var $75=(($74+24)&4294967295); //@line 328 "pyexpat.c"
        var $76=HEAP[$75]; //@line 328 "pyexpat.c"
        var $77=HEAP[$value]; //@line 328 "pyexpat.c"
        FUNCTION_TABLE[$76]($77); //@line 328 "pyexpat.c"
        __label__ = 16; break; //@line 328 "pyexpat.c"
      case 16: // $bb15
        var $78=HEAP[$traceback]; //@line 329 "pyexpat.c"
        var $79=($78)!=0; //@line 329 "pyexpat.c"
        if ($79) { __label__ = 17; break; } else { __label__ = 19; break; } //@line 329 "pyexpat.c"
      case 17: // $bb16
        var $80=HEAP[$traceback]; //@line 329 "pyexpat.c"
        var $81=(($80)&4294967295); //@line 329 "pyexpat.c"
        var $82=HEAP[$81]; //@line 329 "pyexpat.c"
        var $83=((($82) - 1)&4294967295); //@line 329 "pyexpat.c"
        var $84=(($80)&4294967295); //@line 329 "pyexpat.c"
        HEAP[$84]=$83; //@line 329 "pyexpat.c"
        var $85=(($80)&4294967295); //@line 329 "pyexpat.c"
        var $86=HEAP[$85]; //@line 329 "pyexpat.c"
        var $87=((($86))|0)==0; //@line 329 "pyexpat.c"
        if ($87) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 329 "pyexpat.c"
      case 18: // $bb17
        var $88=HEAP[$traceback]; //@line 329 "pyexpat.c"
        var $89=(($88+4)&4294967295); //@line 329 "pyexpat.c"
        var $90=HEAP[$89]; //@line 329 "pyexpat.c"
        var $91=(($90+24)&4294967295); //@line 329 "pyexpat.c"
        var $92=HEAP[$91]; //@line 329 "pyexpat.c"
        var $93=HEAP[$traceback]; //@line 329 "pyexpat.c"
        FUNCTION_TABLE[$92]($93); //@line 329 "pyexpat.c"
        __label__ = 19; break; //@line 329 "pyexpat.c"
      case 19: // $bb18
        var $94=HEAP[$err]; //@line 331 "pyexpat.c"
        HEAP[$0]=$94; //@line 331 "pyexpat.c"
        __label__ = 20; break; //@line 331 "pyexpat.c"
      case 20: // $bb19
        var $95=HEAP[$0]; //@line 306 "pyexpat.c"
        HEAP[$retval]=$95; //@line 306 "pyexpat.c"
        __label__ = 21; break; //@line 306 "pyexpat.c"
      case 21: // $return
        var $retval20=HEAP[$retval]; //@line 306 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval20; //@line 306 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _call_with_frame($c, $func, $args, $self) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $c_addr=__stackBase__;
        var $func_addr=__stackBase__+4;
        var $args_addr=__stackBase__+8;
        var $self_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $tstate=__stackBase__+24;
        var $f=__stackBase__+28;
        var $res=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$c_addr]=$c;
        HEAP[$func_addr]=$func;
        HEAP[$args_addr]=$args;
        HEAP[$self_addr]=$self;
        var $1=HEAP[__PyThreadState_Current]; //@line 339 "pyexpat.c"
        HEAP[$tstate]=$1; //@line 339 "pyexpat.c"
        var $2=HEAP[$c_addr]; //@line 343 "pyexpat.c"
        var $3=($2)==0; //@line 343 "pyexpat.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 343 "pyexpat.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 344 "pyexpat.c"
        __label__ = 20; break; //@line 344 "pyexpat.c"
      case 2: // $bb1
        var $4=_PyEval_GetGlobals(); //@line 346 "pyexpat.c"
        var $5=HEAP[$tstate]; //@line 346 "pyexpat.c"
        var $6=HEAP[$c_addr]; //@line 346 "pyexpat.c"
        var $7=_PyFrame_New($5, $6, $4, 0); //@line 346 "pyexpat.c"
        HEAP[$f]=$7; //@line 346 "pyexpat.c"
        var $8=HEAP[$f]; //@line 347 "pyexpat.c"
        var $9=($8)==0; //@line 347 "pyexpat.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 347 "pyexpat.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 348 "pyexpat.c"
        __label__ = 20; break; //@line 348 "pyexpat.c"
      case 4: // $bb3
        var $10=HEAP[$tstate]; //@line 349 "pyexpat.c"
        var $11=(($10+8)&4294967295); //@line 349 "pyexpat.c"
        var $12=HEAP[$f]; //@line 349 "pyexpat.c"
        HEAP[$11]=$12; //@line 349 "pyexpat.c"
        var $13=HEAP[$tstate]; //@line 351 "pyexpat.c"
        var $14=HEAP[$f]; //@line 351 "pyexpat.c"
        var $15=_trace_frame($13, $14, 0, __Py_NoneStruct); //@line 351 "pyexpat.c"
        var $16=((($15))|0) < 0; //@line 351 "pyexpat.c"
        if ($16) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 351 "pyexpat.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 352 "pyexpat.c"
        __label__ = 20; break; //@line 352 "pyexpat.c"
      case 6: // $bb5
        var $17=HEAP[$func_addr]; //@line 355 "pyexpat.c"
        var $18=HEAP[$args_addr]; //@line 355 "pyexpat.c"
        var $19=_PyEval_CallObjectWithKeywords($17, $18, 0); //@line 355 "pyexpat.c"
        HEAP[$res]=$19; //@line 355 "pyexpat.c"
        var $20=HEAP[$res]; //@line 356 "pyexpat.c"
        var $21=($20)==0; //@line 356 "pyexpat.c"
        if ($21) { __label__ = 7; break; } else { __label__ = 12; break; } //@line 356 "pyexpat.c"
      case 7: // $bb6
        var $22=HEAP[$tstate]; //@line 357 "pyexpat.c"
        var $23=(($22+48)&4294967295); //@line 357 "pyexpat.c"
        var $24=HEAP[$23]; //@line 357 "pyexpat.c"
        var $25=($24)==0; //@line 357 "pyexpat.c"
        if ($25) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 357 "pyexpat.c"
      case 8: // $bb7
        var $26=HEAP[$f]; //@line 358 "pyexpat.c"
        var $27=_PyTraceBack_Here($26); //@line 358 "pyexpat.c"
        __label__ = 9; break; //@line 358 "pyexpat.c"
      case 9: // $bb8
        var $28=HEAP[$self_addr]; //@line 359 "pyexpat.c"
        var $29=(($28+8)&4294967295); //@line 359 "pyexpat.c"
        var $30=HEAP[$29]; //@line 359 "pyexpat.c"
        var $31=_XML_StopParser($30, 0); //@line 359 "pyexpat.c"
        var $32=HEAP[$tstate]; //@line 361 "pyexpat.c"
        var $33=HEAP[$f]; //@line 361 "pyexpat.c"
        var $34=_trace_frame_exc($32, $33); //@line 361 "pyexpat.c"
        var $35=((($34))|0) < 0; //@line 361 "pyexpat.c"
        if ($35) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 361 "pyexpat.c"
      case 10: // $bb9
        HEAP[$0]=0; //@line 362 "pyexpat.c"
        __label__ = 20; break; //@line 362 "pyexpat.c"
      case 11: // $bb10
        __label__ = 17; break; //@line 362 "pyexpat.c"
      case 12: // $bb11
        var $36=HEAP[$tstate]; //@line 366 "pyexpat.c"
        var $37=HEAP[$f]; //@line 366 "pyexpat.c"
        var $38=HEAP[$res]; //@line 366 "pyexpat.c"
        var $39=_trace_frame($36, $37, 3, $38); //@line 366 "pyexpat.c"
        var $40=((($39))|0) < 0; //@line 366 "pyexpat.c"
        if ($40) { __label__ = 13; break; } else { __label__ = 17; break; } //@line 366 "pyexpat.c"
      case 13: // $bb12
        var $41=HEAP[$res]; //@line 367 "pyexpat.c"
        var $42=($41)!=0; //@line 367 "pyexpat.c"
        if ($42) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 367 "pyexpat.c"
      case 14: // $bb13
        var $43=HEAP[$res]; //@line 367 "pyexpat.c"
        var $44=(($43)&4294967295); //@line 367 "pyexpat.c"
        var $45=HEAP[$44]; //@line 367 "pyexpat.c"
        var $46=((($45) - 1)&4294967295); //@line 367 "pyexpat.c"
        var $47=HEAP[$res]; //@line 367 "pyexpat.c"
        var $48=(($47)&4294967295); //@line 367 "pyexpat.c"
        HEAP[$48]=$46; //@line 367 "pyexpat.c"
        var $49=HEAP[$res]; //@line 367 "pyexpat.c"
        var $50=(($49)&4294967295); //@line 367 "pyexpat.c"
        var $51=HEAP[$50]; //@line 367 "pyexpat.c"
        var $52=((($51))|0)==0; //@line 367 "pyexpat.c"
        if ($52) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 367 "pyexpat.c"
      case 15: // $bb14
        var $53=HEAP[$res]; //@line 367 "pyexpat.c"
        var $54=(($53+4)&4294967295); //@line 367 "pyexpat.c"
        var $55=HEAP[$54]; //@line 367 "pyexpat.c"
        var $56=(($55+24)&4294967295); //@line 367 "pyexpat.c"
        var $57=HEAP[$56]; //@line 367 "pyexpat.c"
        var $58=HEAP[$res]; //@line 367 "pyexpat.c"
        FUNCTION_TABLE[$57]($58); //@line 367 "pyexpat.c"
        __label__ = 16; break; //@line 367 "pyexpat.c"
      case 16: // $bb15
        HEAP[$res]=0; //@line 368 "pyexpat.c"
        __label__ = 17; break; //@line 368 "pyexpat.c"
      case 17: // $bb16
        var $59=HEAP[$f]; //@line 374 "pyexpat.c"
        var $60=(($59+12)&4294967295); //@line 374 "pyexpat.c"
        var $61=HEAP[$60]; //@line 374 "pyexpat.c"
        var $62=HEAP[$tstate]; //@line 374 "pyexpat.c"
        var $63=(($62+8)&4294967295); //@line 374 "pyexpat.c"
        HEAP[$63]=$61; //@line 374 "pyexpat.c"
        var $64=HEAP[$f]; //@line 375 "pyexpat.c"
        var $65=$64; //@line 375 "pyexpat.c"
        var $66=(($65)&4294967295); //@line 375 "pyexpat.c"
        var $67=HEAP[$66]; //@line 375 "pyexpat.c"
        var $68=((($67) - 1)&4294967295); //@line 375 "pyexpat.c"
        var $69=(($65)&4294967295); //@line 375 "pyexpat.c"
        HEAP[$69]=$68; //@line 375 "pyexpat.c"
        var $70=(($65)&4294967295); //@line 375 "pyexpat.c"
        var $71=HEAP[$70]; //@line 375 "pyexpat.c"
        var $72=((($71))|0)==0; //@line 375 "pyexpat.c"
        if ($72) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 375 "pyexpat.c"
      case 18: // $bb17
        var $73=HEAP[$f]; //@line 375 "pyexpat.c"
        var $74=$73; //@line 375 "pyexpat.c"
        var $75=(($74+4)&4294967295); //@line 375 "pyexpat.c"
        var $76=HEAP[$75]; //@line 375 "pyexpat.c"
        var $77=(($76+24)&4294967295); //@line 375 "pyexpat.c"
        var $78=HEAP[$77]; //@line 375 "pyexpat.c"
        var $79=HEAP[$f]; //@line 375 "pyexpat.c"
        var $80=$79; //@line 375 "pyexpat.c"
        FUNCTION_TABLE[$78]($80); //@line 375 "pyexpat.c"
        __label__ = 19; break; //@line 375 "pyexpat.c"
      case 19: // $bb18
        var $81=HEAP[$res]; //@line 376 "pyexpat.c"
        HEAP[$0]=$81; //@line 376 "pyexpat.c"
        __label__ = 20; break; //@line 376 "pyexpat.c"
      case 20: // $bb19
        var $82=HEAP[$0]; //@line 344 "pyexpat.c"
        HEAP[$retval]=$82; //@line 344 "pyexpat.c"
        __label__ = 21; break; //@line 344 "pyexpat.c"
      case 21: // $return
        var $retval20=HEAP[$retval]; //@line 344 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval20; //@line 344 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _string_intern($self, $str) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $str_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $iftmp_38=__stackBase__+16;
        var $result=__stackBase__+20;
        var $value=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$str_addr]=$str;
        var $1=HEAP[$self_addr]; //@line 390 "pyexpat.c"
        var $2=(($1+12)&4294967295); //@line 390 "pyexpat.c"
        var $3=HEAP[$2]; //@line 390 "pyexpat.c"
        var $4=((($3))|0)!=0; //@line 390 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 390 "pyexpat.c"
      case 1: // $bb
        HEAP[$iftmp_38]=(FUNCTION_TABLE_OFFSET + 4); //@line 390 "pyexpat.c"
        __label__ = 3; break; //@line 390 "pyexpat.c"
      case 2: // $bb1
        HEAP[$iftmp_38]=(FUNCTION_TABLE_OFFSET + 6); //@line 390 "pyexpat.c"
        __label__ = 3; break; //@line 390 "pyexpat.c"
      case 3: // $bb2
        var $5=HEAP[$iftmp_38]; //@line 390 "pyexpat.c"
        var $6=HEAP[$str_addr]; //@line 390 "pyexpat.c"
        var $7=FUNCTION_TABLE[$5]($6); //@line 390 "pyexpat.c"
        HEAP[$result]=$7; //@line 390 "pyexpat.c"
        var $8=HEAP[$result]; //@line 393 "pyexpat.c"
        var $9=($8)==0; //@line 393 "pyexpat.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 393 "pyexpat.c"
      case 4: // $bb3
        var $10=HEAP[$result]; //@line 394 "pyexpat.c"
        HEAP[$0]=$10; //@line 394 "pyexpat.c"
        __label__ = 14; break; //@line 394 "pyexpat.c"
      case 5: // $bb4
        var $11=HEAP[$self_addr]; //@line 395 "pyexpat.c"
        var $12=(($11+44)&4294967295); //@line 395 "pyexpat.c"
        var $13=HEAP[$12]; //@line 395 "pyexpat.c"
        var $14=($13)==0; //@line 395 "pyexpat.c"
        if ($14) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 395 "pyexpat.c"
      case 6: // $bb5
        var $15=HEAP[$result]; //@line 396 "pyexpat.c"
        HEAP[$0]=$15; //@line 396 "pyexpat.c"
        __label__ = 14; break; //@line 396 "pyexpat.c"
      case 7: // $bb6
        var $16=HEAP[$self_addr]; //@line 397 "pyexpat.c"
        var $17=(($16+44)&4294967295); //@line 397 "pyexpat.c"
        var $18=HEAP[$17]; //@line 397 "pyexpat.c"
        var $19=HEAP[$result]; //@line 397 "pyexpat.c"
        var $20=_PyDict_GetItem($18, $19); //@line 397 "pyexpat.c"
        HEAP[$value]=$20; //@line 397 "pyexpat.c"
        var $21=HEAP[$value]; //@line 398 "pyexpat.c"
        var $22=($21)==0; //@line 398 "pyexpat.c"
        if ($22) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 398 "pyexpat.c"
      case 8: // $bb7
        var $23=HEAP[$self_addr]; //@line 399 "pyexpat.c"
        var $24=(($23+44)&4294967295); //@line 399 "pyexpat.c"
        var $25=HEAP[$24]; //@line 399 "pyexpat.c"
        var $26=HEAP[$result]; //@line 399 "pyexpat.c"
        var $27=HEAP[$result]; //@line 399 "pyexpat.c"
        var $28=_PyDict_SetItem($25, $26, $27); //@line 399 "pyexpat.c"
        var $29=((($28))|0)==0; //@line 399 "pyexpat.c"
        if ($29) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 399 "pyexpat.c"
      case 9: // $bb8
        var $30=HEAP[$result]; //@line 400 "pyexpat.c"
        HEAP[$0]=$30; //@line 400 "pyexpat.c"
        __label__ = 14; break; //@line 400 "pyexpat.c"
      case 10: // $bb9
        HEAP[$0]=0; //@line 402 "pyexpat.c"
        __label__ = 14; break; //@line 402 "pyexpat.c"
      case 11: // $bb10
        var $31=HEAP[$value]; //@line 404 "pyexpat.c"
        var $32=(($31)&4294967295); //@line 404 "pyexpat.c"
        var $33=HEAP[$32]; //@line 404 "pyexpat.c"
        var $34=((($33) + 1)&4294967295); //@line 404 "pyexpat.c"
        var $35=HEAP[$value]; //@line 404 "pyexpat.c"
        var $36=(($35)&4294967295); //@line 404 "pyexpat.c"
        HEAP[$36]=$34; //@line 404 "pyexpat.c"
        var $37=HEAP[$result]; //@line 405 "pyexpat.c"
        var $38=(($37)&4294967295); //@line 405 "pyexpat.c"
        var $39=HEAP[$38]; //@line 405 "pyexpat.c"
        var $40=((($39) - 1)&4294967295); //@line 405 "pyexpat.c"
        var $41=HEAP[$result]; //@line 405 "pyexpat.c"
        var $42=(($41)&4294967295); //@line 405 "pyexpat.c"
        HEAP[$42]=$40; //@line 405 "pyexpat.c"
        var $43=HEAP[$result]; //@line 405 "pyexpat.c"
        var $44=(($43)&4294967295); //@line 405 "pyexpat.c"
        var $45=HEAP[$44]; //@line 405 "pyexpat.c"
        var $46=((($45))|0)==0; //@line 405 "pyexpat.c"
        if ($46) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 405 "pyexpat.c"
      case 12: // $bb11
        var $47=HEAP[$result]; //@line 405 "pyexpat.c"
        var $48=(($47+4)&4294967295); //@line 405 "pyexpat.c"
        var $49=HEAP[$48]; //@line 405 "pyexpat.c"
        var $50=(($49+24)&4294967295); //@line 405 "pyexpat.c"
        var $51=HEAP[$50]; //@line 405 "pyexpat.c"
        var $52=HEAP[$result]; //@line 405 "pyexpat.c"
        FUNCTION_TABLE[$51]($52); //@line 405 "pyexpat.c"
        __label__ = 13; break; //@line 405 "pyexpat.c"
      case 13: // $bb12
        var $53=HEAP[$value]; //@line 406 "pyexpat.c"
        HEAP[$0]=$53; //@line 406 "pyexpat.c"
        __label__ = 14; break; //@line 406 "pyexpat.c"
      case 14: // $bb13
        var $54=HEAP[$0]; //@line 394 "pyexpat.c"
        HEAP[$retval]=$54; //@line 394 "pyexpat.c"
        __label__ = 15; break; //@line 394 "pyexpat.c"
      case 15: // $return
        var $retval14=HEAP[$retval]; //@line 394 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval14; //@line 394 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _call_character_handler($self, $buffer, $len) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $buffer_addr=__stackBase__+4;
        var $len_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $iftmp_39=__stackBase__+16;
        var $0=__stackBase__+20;
        var $args=__stackBase__+24;
        var $temp=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$buffer_addr]=$buffer;
        HEAP[$len_addr]=$len;
        var $1=HEAP[$self_addr]; //@line 418 "pyexpat.c"
        var $2=_have_handler($1, 3); //@line 418 "pyexpat.c"
        var $3=((($2))|0)==0; //@line 418 "pyexpat.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 418 "pyexpat.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 419 "pyexpat.c"
        __label__ = 18; break; //@line 419 "pyexpat.c"
      case 2: // $bb1
        var $4=_PyTuple_New(1); //@line 421 "pyexpat.c"
        HEAP[$args]=$4; //@line 421 "pyexpat.c"
        var $5=HEAP[$args]; //@line 422 "pyexpat.c"
        var $6=($5)==0; //@line 422 "pyexpat.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 422 "pyexpat.c"
      case 3: // $bb2
        HEAP[$0]=-1; //@line 423 "pyexpat.c"
        __label__ = 18; break; //@line 423 "pyexpat.c"
      case 4: // $bb3
        var $7=HEAP[$self_addr]; //@line 425 "pyexpat.c"
        var $8=(($7+12)&4294967295); //@line 425 "pyexpat.c"
        var $9=HEAP[$8]; //@line 425 "pyexpat.c"
        var $10=((($9))|0)!=0; //@line 425 "pyexpat.c"
        if ($10) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 425 "pyexpat.c"
      case 5: // $bb4
        var $11=HEAP[$buffer_addr]; //@line 425 "pyexpat.c"
        var $12=HEAP[$len_addr]; //@line 425 "pyexpat.c"
        var $13=_conv_string_len_to_unicode($11, $12); //@line 425 "pyexpat.c"
        HEAP[$iftmp_39]=$13; //@line 425 "pyexpat.c"
        __label__ = 7; break; //@line 425 "pyexpat.c"
      case 6: // $bb5
        var $14=HEAP[$buffer_addr]; //@line 425 "pyexpat.c"
        var $15=HEAP[$len_addr]; //@line 425 "pyexpat.c"
        var $16=_conv_string_len_to_utf8($14, $15); //@line 425 "pyexpat.c"
        HEAP[$iftmp_39]=$16; //@line 425 "pyexpat.c"
        __label__ = 7; break; //@line 425 "pyexpat.c"
      case 7: // $bb6
        var $17=HEAP[$iftmp_39]; //@line 425 "pyexpat.c"
        HEAP[$temp]=$17; //@line 425 "pyexpat.c"
        var $18=HEAP[$temp]; //@line 431 "pyexpat.c"
        var $19=($18)==0; //@line 431 "pyexpat.c"
        if ($19) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 431 "pyexpat.c"
      case 8: // $bb7
        var $20=HEAP[$args]; //@line 432 "pyexpat.c"
        var $21=(($20)&4294967295); //@line 432 "pyexpat.c"
        var $22=HEAP[$21]; //@line 432 "pyexpat.c"
        var $23=((($22) - 1)&4294967295); //@line 432 "pyexpat.c"
        var $24=HEAP[$args]; //@line 432 "pyexpat.c"
        var $25=(($24)&4294967295); //@line 432 "pyexpat.c"
        HEAP[$25]=$23; //@line 432 "pyexpat.c"
        var $26=HEAP[$args]; //@line 432 "pyexpat.c"
        var $27=(($26)&4294967295); //@line 432 "pyexpat.c"
        var $28=HEAP[$27]; //@line 432 "pyexpat.c"
        var $29=((($28))|0)==0; //@line 432 "pyexpat.c"
        if ($29) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 432 "pyexpat.c"
      case 9: // $bb8
        var $30=HEAP[$args]; //@line 432 "pyexpat.c"
        var $31=(($30+4)&4294967295); //@line 432 "pyexpat.c"
        var $32=HEAP[$31]; //@line 432 "pyexpat.c"
        var $33=(($32+24)&4294967295); //@line 432 "pyexpat.c"
        var $34=HEAP[$33]; //@line 432 "pyexpat.c"
        var $35=HEAP[$args]; //@line 432 "pyexpat.c"
        FUNCTION_TABLE[$34]($35); //@line 432 "pyexpat.c"
        __label__ = 10; break; //@line 432 "pyexpat.c"
      case 10: // $bb9
        var $36=HEAP[$self_addr]; //@line 433 "pyexpat.c"
        _flag_error($36); //@line 433 "pyexpat.c"
        var $37=HEAP[$self_addr]; //@line 434 "pyexpat.c"
        var $38=(($37+8)&4294967295); //@line 434 "pyexpat.c"
        var $39=HEAP[$38]; //@line 434 "pyexpat.c"
        _XML_SetCharacterDataHandler($39, (FUNCTION_TABLE_OFFSET + 8)); //@line 434 "pyexpat.c"
        HEAP[$0]=-1; //@line 436 "pyexpat.c"
        __label__ = 18; break; //@line 436 "pyexpat.c"
      case 11: // $bb10
        var $40=HEAP[$args]; //@line 438 "pyexpat.c"
        var $41=$40; //@line 438 "pyexpat.c"
        var $42=(($41+12)&4294967295); //@line 438 "pyexpat.c"
        var $43=(($42)&4294967295); //@line 438 "pyexpat.c"
        var $44=HEAP[$temp]; //@line 438 "pyexpat.c"
        HEAP[$43]=$44; //@line 438 "pyexpat.c"
        var $45=HEAP[$self_addr]; //@line 440 "pyexpat.c"
        var $46=(($45+24)&4294967295); //@line 440 "pyexpat.c"
        HEAP[$46]=1; //@line 440 "pyexpat.c"
        var $47=HEAP[$self_addr]; //@line 441 "pyexpat.c"
        var $48=(($47+48)&4294967295); //@line 441 "pyexpat.c"
        var $49=HEAP[$48]; //@line 441 "pyexpat.c"
        var $50=(($49+12)&4294967295); //@line 441 "pyexpat.c"
        var $51=HEAP[$50]; //@line 441 "pyexpat.c"
        var $52=_getcode(3, ((__str7)&4294967295), 441); //@line 441 "pyexpat.c"
        var $53=HEAP[$args]; //@line 441 "pyexpat.c"
        var $54=HEAP[$self_addr]; //@line 441 "pyexpat.c"
        var $55=_call_with_frame($52, $51, $53, $54); //@line 441 "pyexpat.c"
        HEAP[$temp]=$55; //@line 441 "pyexpat.c"
        var $56=HEAP[$self_addr]; //@line 444 "pyexpat.c"
        var $57=(($56+24)&4294967295); //@line 444 "pyexpat.c"
        HEAP[$57]=0; //@line 444 "pyexpat.c"
        var $58=HEAP[$args]; //@line 445 "pyexpat.c"
        var $59=(($58)&4294967295); //@line 445 "pyexpat.c"
        var $60=HEAP[$59]; //@line 445 "pyexpat.c"
        var $61=((($60) - 1)&4294967295); //@line 445 "pyexpat.c"
        var $62=HEAP[$args]; //@line 445 "pyexpat.c"
        var $63=(($62)&4294967295); //@line 445 "pyexpat.c"
        HEAP[$63]=$61; //@line 445 "pyexpat.c"
        var $64=HEAP[$args]; //@line 445 "pyexpat.c"
        var $65=(($64)&4294967295); //@line 445 "pyexpat.c"
        var $66=HEAP[$65]; //@line 445 "pyexpat.c"
        var $67=((($66))|0)==0; //@line 445 "pyexpat.c"
        if ($67) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 445 "pyexpat.c"
      case 12: // $bb11
        var $68=HEAP[$args]; //@line 445 "pyexpat.c"
        var $69=(($68+4)&4294967295); //@line 445 "pyexpat.c"
        var $70=HEAP[$69]; //@line 445 "pyexpat.c"
        var $71=(($70+24)&4294967295); //@line 445 "pyexpat.c"
        var $72=HEAP[$71]; //@line 445 "pyexpat.c"
        var $73=HEAP[$args]; //@line 445 "pyexpat.c"
        FUNCTION_TABLE[$72]($73); //@line 445 "pyexpat.c"
        __label__ = 13; break; //@line 445 "pyexpat.c"
      case 13: // $bb12
        var $74=HEAP[$temp]; //@line 446 "pyexpat.c"
        var $75=($74)==0; //@line 446 "pyexpat.c"
        if ($75) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 446 "pyexpat.c"
      case 14: // $bb13
        var $76=HEAP[$self_addr]; //@line 447 "pyexpat.c"
        _flag_error($76); //@line 447 "pyexpat.c"
        var $77=HEAP[$self_addr]; //@line 448 "pyexpat.c"
        var $78=(($77+8)&4294967295); //@line 448 "pyexpat.c"
        var $79=HEAP[$78]; //@line 448 "pyexpat.c"
        _XML_SetCharacterDataHandler($79, (FUNCTION_TABLE_OFFSET + 8)); //@line 448 "pyexpat.c"
        HEAP[$0]=-1; //@line 450 "pyexpat.c"
        __label__ = 18; break; //@line 450 "pyexpat.c"
      case 15: // $bb14
        var $80=HEAP[$temp]; //@line 452 "pyexpat.c"
        var $81=(($80)&4294967295); //@line 452 "pyexpat.c"
        var $82=HEAP[$81]; //@line 452 "pyexpat.c"
        var $83=((($82) - 1)&4294967295); //@line 452 "pyexpat.c"
        var $84=HEAP[$temp]; //@line 452 "pyexpat.c"
        var $85=(($84)&4294967295); //@line 452 "pyexpat.c"
        HEAP[$85]=$83; //@line 452 "pyexpat.c"
        var $86=HEAP[$temp]; //@line 452 "pyexpat.c"
        var $87=(($86)&4294967295); //@line 452 "pyexpat.c"
        var $88=HEAP[$87]; //@line 452 "pyexpat.c"
        var $89=((($88))|0)==0; //@line 452 "pyexpat.c"
        if ($89) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 452 "pyexpat.c"
      case 16: // $bb15
        var $90=HEAP[$temp]; //@line 452 "pyexpat.c"
        var $91=(($90+4)&4294967295); //@line 452 "pyexpat.c"
        var $92=HEAP[$91]; //@line 452 "pyexpat.c"
        var $93=(($92+24)&4294967295); //@line 452 "pyexpat.c"
        var $94=HEAP[$93]; //@line 452 "pyexpat.c"
        var $95=HEAP[$temp]; //@line 452 "pyexpat.c"
        FUNCTION_TABLE[$94]($95); //@line 452 "pyexpat.c"
        __label__ = 17; break; //@line 452 "pyexpat.c"
      case 17: // $bb16
        HEAP[$0]=0; //@line 453 "pyexpat.c"
        __label__ = 18; break; //@line 453 "pyexpat.c"
      case 18: // $bb17
        var $96=HEAP[$0]; //@line 419 "pyexpat.c"
        HEAP[$retval]=$96; //@line 419 "pyexpat.c"
        __label__ = 19; break; //@line 419 "pyexpat.c"
      case 19: // $return
        var $retval18=HEAP[$retval]; //@line 419 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval18; //@line 419 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _flush_character_buffer($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $rc=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 460 "pyexpat.c"
        var $2=(($1+32)&4294967295); //@line 460 "pyexpat.c"
        var $3=HEAP[$2]; //@line 460 "pyexpat.c"
        var $4=($3)==0; //@line 460 "pyexpat.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 460 "pyexpat.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 460 "pyexpat.c"
        var $6=(($5+40)&4294967295); //@line 460 "pyexpat.c"
        var $7=HEAP[$6]; //@line 460 "pyexpat.c"
        var $8=((($7))|0)==0; //@line 460 "pyexpat.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 460 "pyexpat.c"
      case 2: // $bb1
        HEAP[$0]=0; //@line 461 "pyexpat.c"
        __label__ = 4; break; //@line 461 "pyexpat.c"
      case 3: // $bb2
        var $9=HEAP[$self_addr]; //@line 462 "pyexpat.c"
        var $10=(($9+40)&4294967295); //@line 462 "pyexpat.c"
        var $11=HEAP[$10]; //@line 462 "pyexpat.c"
        var $12=HEAP[$self_addr]; //@line 462 "pyexpat.c"
        var $13=(($12+32)&4294967295); //@line 462 "pyexpat.c"
        var $14=HEAP[$13]; //@line 462 "pyexpat.c"
        var $15=HEAP[$self_addr]; //@line 462 "pyexpat.c"
        var $16=_call_character_handler($15, $14, $11); //@line 462 "pyexpat.c"
        HEAP[$rc]=$16; //@line 462 "pyexpat.c"
        var $17=HEAP[$self_addr]; //@line 463 "pyexpat.c"
        var $18=(($17+40)&4294967295); //@line 463 "pyexpat.c"
        HEAP[$18]=0; //@line 463 "pyexpat.c"
        var $19=HEAP[$rc]; //@line 464 "pyexpat.c"
        HEAP[$0]=$19; //@line 464 "pyexpat.c"
        __label__ = 4; break; //@line 464 "pyexpat.c"
      case 4: // $bb3
        var $20=HEAP[$0]; //@line 461 "pyexpat.c"
        HEAP[$retval]=$20; //@line 461 "pyexpat.c"
        __label__ = 5; break; //@line 461 "pyexpat.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 461 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 461 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_CharacterDataHandler($userData, $data, $len) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr=__stackBase__;
        var $data_addr=__stackBase__+4;
        var $len_addr=__stackBase__+8;
        var $self=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$userData_addr]=$userData;
        HEAP[$data_addr]=$data;
        HEAP[$len_addr]=$len;
        var $0=HEAP[$userData_addr]; //@line 470 "pyexpat.c"
        var $1=$0; //@line 470 "pyexpat.c"
        HEAP[$self]=$1; //@line 470 "pyexpat.c"
        var $2=HEAP[$self]; //@line 471 "pyexpat.c"
        var $3=(($2+32)&4294967295); //@line 471 "pyexpat.c"
        var $4=HEAP[$3]; //@line 471 "pyexpat.c"
        var $5=($4)==0; //@line 471 "pyexpat.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 471 "pyexpat.c"
      case 1: // $bb
        var $6=HEAP[$self]; //@line 472 "pyexpat.c"
        var $7=HEAP[$data_addr]; //@line 472 "pyexpat.c"
        var $8=HEAP[$len_addr]; //@line 472 "pyexpat.c"
        var $9=_call_character_handler($6, $7, $8); //@line 472 "pyexpat.c"
        __label__ = 8; break; //@line 472 "pyexpat.c"
      case 2: // $bb1
        var $10=HEAP[$self]; //@line 474 "pyexpat.c"
        var $11=(($10+40)&4294967295); //@line 474 "pyexpat.c"
        var $12=HEAP[$11]; //@line 474 "pyexpat.c"
        var $13=HEAP[$len_addr]; //@line 474 "pyexpat.c"
        var $14=((($12) + ($13))&4294967295); //@line 474 "pyexpat.c"
        var $15=HEAP[$self]; //@line 474 "pyexpat.c"
        var $16=(($15+36)&4294967295); //@line 474 "pyexpat.c"
        var $17=HEAP[$16]; //@line 474 "pyexpat.c"
        var $18=((($14))|0) > ((($17))|0); //@line 474 "pyexpat.c"
        if ($18) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 474 "pyexpat.c"
      case 3: // $bb2
        var $19=HEAP[$self]; //@line 475 "pyexpat.c"
        var $20=_flush_character_buffer($19); //@line 475 "pyexpat.c"
        var $21=((($20))|0) < 0; //@line 475 "pyexpat.c"
        if ($21) { __label__ = 8; break; } else { __label__ = 4; break; } //@line 475 "pyexpat.c"
      case 4: // $bb3
        var $22=HEAP[$self]; //@line 480 "pyexpat.c"
        var $23=_have_handler($22, 3); //@line 480 "pyexpat.c"
        var $24=((($23))|0)==0; //@line 480 "pyexpat.c"
        if ($24) { __label__ = 8; break; } else { __label__ = 5; break; } //@line 480 "pyexpat.c"
      case 5: // $bb4
        var $25=HEAP[$self]; //@line 483 "pyexpat.c"
        var $26=(($25+36)&4294967295); //@line 483 "pyexpat.c"
        var $27=HEAP[$26]; //@line 483 "pyexpat.c"
        var $28=HEAP[$len_addr]; //@line 483 "pyexpat.c"
        var $29=((($27))|0) < ((($28))|0); //@line 483 "pyexpat.c"
        if ($29) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 483 "pyexpat.c"
      case 6: // $bb5
        var $30=HEAP[$self]; //@line 484 "pyexpat.c"
        var $31=HEAP[$data_addr]; //@line 484 "pyexpat.c"
        var $32=HEAP[$len_addr]; //@line 484 "pyexpat.c"
        var $33=_call_character_handler($30, $31, $32); //@line 484 "pyexpat.c"
        var $34=HEAP[$self]; //@line 485 "pyexpat.c"
        var $35=(($34+40)&4294967295); //@line 485 "pyexpat.c"
        HEAP[$35]=0; //@line 485 "pyexpat.c"
        __label__ = 8; break; //@line 485 "pyexpat.c"
      case 7: // $bb6
        var $36=HEAP[$len_addr]; //@line 488 "pyexpat.c"
        var $37=HEAP[$self]; //@line 488 "pyexpat.c"
        var $38=(($37+32)&4294967295); //@line 488 "pyexpat.c"
        var $39=HEAP[$38]; //@line 488 "pyexpat.c"
        var $40=HEAP[$self]; //@line 488 "pyexpat.c"
        var $41=(($40+40)&4294967295); //@line 488 "pyexpat.c"
        var $42=HEAP[$41]; //@line 488 "pyexpat.c"
        var $43=(($39+$42)&4294967295); //@line 488 "pyexpat.c"
        var $44=HEAP[$data_addr]; //@line 488 "pyexpat.c"
        _llvm_memcpy_p0i8_p0i8_i32($43, $44, $36, 1, 0); //@line 488 "pyexpat.c"
        var $45=HEAP[$self]; //@line 490 "pyexpat.c"
        var $46=(($45+40)&4294967295); //@line 490 "pyexpat.c"
        var $47=HEAP[$46]; //@line 490 "pyexpat.c"
        var $48=HEAP[$len_addr]; //@line 490 "pyexpat.c"
        var $49=((($47) + ($48))&4294967295); //@line 490 "pyexpat.c"
        var $50=HEAP[$self]; //@line 490 "pyexpat.c"
        var $51=(($50+40)&4294967295); //@line 490 "pyexpat.c"
        HEAP[$51]=$49; //@line 490 "pyexpat.c"
        __label__ = 8; break; //@line 490 "pyexpat.c"
      case 8: // $bb7
        __label__ = 9; break; //@line 476 "pyexpat.c"
      case 9: // $return
        STACKTOP = __stackBase__;
        return; //@line 476 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_StartElementHandler($userData, $name, $atts) {
    var __stackBase__  = STACKTOP; STACKTOP += 48; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 48);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr=__stackBase__;
        var $name_addr=__stackBase__+4;
        var $atts_addr=__stackBase__+8;
        var $iftmp_42=__stackBase__+12;
        var $self=__stackBase__+16;
        var $container=__stackBase__+20;
        var $rv=__stackBase__+24;
        var $args=__stackBase__+28;
        var $i=__stackBase__+32;
        var $max=__stackBase__+36;
        var $n=__stackBase__+40;
        var $v=__stackBase__+44;
        var $_alloca_point_=0;
        HEAP[$userData_addr]=$userData;
        HEAP[$name_addr]=$name;
        HEAP[$atts_addr]=$atts;
        var $0=HEAP[$userData_addr]; //@line 499 "pyexpat.c"
        var $1=$0; //@line 499 "pyexpat.c"
        HEAP[$self]=$1; //@line 499 "pyexpat.c"
        var $2=HEAP[$self]; //@line 501 "pyexpat.c"
        var $3=_have_handler($2, 0); //@line 501 "pyexpat.c"
        var $4=((($3))|0)!=0; //@line 501 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 52; break; } //@line 501 "pyexpat.c"
      case 1: // $bb
        var $5=HEAP[$self]; //@line 505 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 505 "pyexpat.c"
        var $7=((($6))|0) < 0; //@line 505 "pyexpat.c"
        if ($7) { __label__ = 52; break; } else { __label__ = 2; break; } //@line 505 "pyexpat.c"
      case 2: // $bb1
        var $8=HEAP[$self]; //@line 510 "pyexpat.c"
        var $9=(($8+20)&4294967295); //@line 510 "pyexpat.c"
        var $10=HEAP[$9]; //@line 510 "pyexpat.c"
        var $11=((($10))|0)!=0; //@line 510 "pyexpat.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 510 "pyexpat.c"
      case 3: // $bb2
        var $12=HEAP[$self]; //@line 511 "pyexpat.c"
        var $13=(($12+8)&4294967295); //@line 511 "pyexpat.c"
        var $14=HEAP[$13]; //@line 511 "pyexpat.c"
        var $15=_XML_GetSpecifiedAttributeCount($14); //@line 511 "pyexpat.c"
        HEAP[$max]=$15; //@line 511 "pyexpat.c"
        __label__ = 7; break; //@line 511 "pyexpat.c"
      case 4: // $bb3
        HEAP[$max]=0; //@line 514 "pyexpat.c"
        __label__ = 6; break; //@line 514 "pyexpat.c"
      case 5: // $bb4
        var $16=HEAP[$max]; //@line 516 "pyexpat.c"
        var $17=((($16) + 2)&4294967295); //@line 516 "pyexpat.c"
        HEAP[$max]=$17; //@line 516 "pyexpat.c"
        __label__ = 6; break; //@line 516 "pyexpat.c"
      case 6: // $bb5
        var $18=HEAP[$atts_addr]; //@line 515 "pyexpat.c"
        var $19=HEAP[$max]; //@line 515 "pyexpat.c"
        var $20=(($18+4*$19)&4294967295); //@line 515 "pyexpat.c"
        var $21=HEAP[$20]; //@line 515 "pyexpat.c"
        var $22=($21)!=0; //@line 515 "pyexpat.c"
        if ($22) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 515 "pyexpat.c"
      case 7: // $bb6
        var $23=HEAP[$self]; //@line 519 "pyexpat.c"
        var $24=(($23+16)&4294967295); //@line 519 "pyexpat.c"
        var $25=HEAP[$24]; //@line 519 "pyexpat.c"
        var $26=((($25))|0)!=0; //@line 519 "pyexpat.c"
        if ($26) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 519 "pyexpat.c"
      case 8: // $bb7
        var $27=HEAP[$max]; //@line 520 "pyexpat.c"
        var $28=_PyList_New($27); //@line 520 "pyexpat.c"
        HEAP[$container]=$28; //@line 520 "pyexpat.c"
        __label__ = 10; break; //@line 520 "pyexpat.c"
      case 9: // $bb8
        var $29=_PyDict_New(); //@line 522 "pyexpat.c"
        HEAP[$container]=$29; //@line 522 "pyexpat.c"
        __label__ = 10; break; //@line 522 "pyexpat.c"
      case 10: // $bb9
        var $30=HEAP[$container]; //@line 523 "pyexpat.c"
        var $31=($30)==0; //@line 523 "pyexpat.c"
        if ($31) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 523 "pyexpat.c"
      case 11: // $bb10
        var $32=HEAP[$self]; //@line 524 "pyexpat.c"
        _flag_error($32); //@line 524 "pyexpat.c"
        __label__ = 52; break; //@line 524 "pyexpat.c"
      case 12: // $bb11
        HEAP[$i]=0; //@line 527 "pyexpat.c"
        __label__ = 39; break; //@line 527 "pyexpat.c"
      case 13: // $bb12
        var $33=HEAP[$atts_addr]; //@line 528 "pyexpat.c"
        var $34=HEAP[$i]; //@line 528 "pyexpat.c"
        var $35=(($33+4*$34)&4294967295); //@line 528 "pyexpat.c"
        var $36=HEAP[$35]; //@line 528 "pyexpat.c"
        var $37=HEAP[$self]; //@line 528 "pyexpat.c"
        var $38=_string_intern($37, $36); //@line 528 "pyexpat.c"
        HEAP[$n]=$38; //@line 528 "pyexpat.c"
        var $39=HEAP[$n]; //@line 530 "pyexpat.c"
        var $40=($39)==0; //@line 530 "pyexpat.c"
        if ($40) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 530 "pyexpat.c"
      case 14: // $bb13
        var $41=HEAP[$self]; //@line 531 "pyexpat.c"
        _flag_error($41); //@line 531 "pyexpat.c"
        var $42=HEAP[$container]; //@line 532 "pyexpat.c"
        var $43=(($42)&4294967295); //@line 532 "pyexpat.c"
        var $44=HEAP[$43]; //@line 532 "pyexpat.c"
        var $45=((($44) - 1)&4294967295); //@line 532 "pyexpat.c"
        var $46=HEAP[$container]; //@line 532 "pyexpat.c"
        var $47=(($46)&4294967295); //@line 532 "pyexpat.c"
        HEAP[$47]=$45; //@line 532 "pyexpat.c"
        var $48=HEAP[$container]; //@line 532 "pyexpat.c"
        var $49=(($48)&4294967295); //@line 532 "pyexpat.c"
        var $50=HEAP[$49]; //@line 532 "pyexpat.c"
        var $51=((($50))|0)==0; //@line 532 "pyexpat.c"
        if ($51) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 532 "pyexpat.c"
      case 15: // $bb14
        var $52=HEAP[$container]; //@line 532 "pyexpat.c"
        var $53=(($52+4)&4294967295); //@line 532 "pyexpat.c"
        var $54=HEAP[$53]; //@line 532 "pyexpat.c"
        var $55=(($54+24)&4294967295); //@line 532 "pyexpat.c"
        var $56=HEAP[$55]; //@line 532 "pyexpat.c"
        var $57=HEAP[$container]; //@line 532 "pyexpat.c"
        FUNCTION_TABLE[$56]($57); //@line 532 "pyexpat.c"
        __label__ = 16; break; //@line 532 "pyexpat.c"
      case 16: // $bb15
        __label__ = 52; break; //@line 532 "pyexpat.c"
      case 17: // $bb16
        var $58=HEAP[$self]; //@line 535 "pyexpat.c"
        var $59=(($58+12)&4294967295); //@line 535 "pyexpat.c"
        var $60=HEAP[$59]; //@line 535 "pyexpat.c"
        var $61=((($60))|0)!=0; //@line 535 "pyexpat.c"
        if ($61) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 535 "pyexpat.c"
      case 18: // $bb17
        HEAP[$iftmp_42]=(FUNCTION_TABLE_OFFSET + 4); //@line 535 "pyexpat.c"
        __label__ = 20; break; //@line 535 "pyexpat.c"
      case 19: // $bb18
        HEAP[$iftmp_42]=(FUNCTION_TABLE_OFFSET + 6); //@line 535 "pyexpat.c"
        __label__ = 20; break; //@line 535 "pyexpat.c"
      case 20: // $bb19
        var $62=HEAP[$i]; //@line 535 "pyexpat.c"
        var $63=((($62) + 1)&4294967295); //@line 535 "pyexpat.c"
        var $64=HEAP[$atts_addr]; //@line 535 "pyexpat.c"
        var $65=(($64+4*$63)&4294967295); //@line 535 "pyexpat.c"
        var $66=HEAP[$65]; //@line 535 "pyexpat.c"
        var $67=HEAP[$iftmp_42]; //@line 535 "pyexpat.c"
        var $68=FUNCTION_TABLE[$67]($66); //@line 535 "pyexpat.c"
        HEAP[$v]=$68; //@line 535 "pyexpat.c"
        var $69=HEAP[$v]; //@line 536 "pyexpat.c"
        var $70=($69)==0; //@line 536 "pyexpat.c"
        if ($70) { __label__ = 21; break; } else { __label__ = 26; break; } //@line 536 "pyexpat.c"
      case 21: // $bb20
        var $71=HEAP[$self]; //@line 537 "pyexpat.c"
        _flag_error($71); //@line 537 "pyexpat.c"
        var $72=HEAP[$container]; //@line 538 "pyexpat.c"
        var $73=(($72)&4294967295); //@line 538 "pyexpat.c"
        var $74=HEAP[$73]; //@line 538 "pyexpat.c"
        var $75=((($74) - 1)&4294967295); //@line 538 "pyexpat.c"
        var $76=HEAP[$container]; //@line 538 "pyexpat.c"
        var $77=(($76)&4294967295); //@line 538 "pyexpat.c"
        HEAP[$77]=$75; //@line 538 "pyexpat.c"
        var $78=HEAP[$container]; //@line 538 "pyexpat.c"
        var $79=(($78)&4294967295); //@line 538 "pyexpat.c"
        var $80=HEAP[$79]; //@line 538 "pyexpat.c"
        var $81=((($80))|0)==0; //@line 538 "pyexpat.c"
        if ($81) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 538 "pyexpat.c"
      case 22: // $bb21
        var $82=HEAP[$container]; //@line 538 "pyexpat.c"
        var $83=(($82+4)&4294967295); //@line 538 "pyexpat.c"
        var $84=HEAP[$83]; //@line 538 "pyexpat.c"
        var $85=(($84+24)&4294967295); //@line 538 "pyexpat.c"
        var $86=HEAP[$85]; //@line 538 "pyexpat.c"
        var $87=HEAP[$container]; //@line 538 "pyexpat.c"
        FUNCTION_TABLE[$86]($87); //@line 538 "pyexpat.c"
        __label__ = 23; break; //@line 538 "pyexpat.c"
      case 23: // $bb22
        var $88=HEAP[$n]; //@line 539 "pyexpat.c"
        var $89=(($88)&4294967295); //@line 539 "pyexpat.c"
        var $90=HEAP[$89]; //@line 539 "pyexpat.c"
        var $91=((($90) - 1)&4294967295); //@line 539 "pyexpat.c"
        var $92=HEAP[$n]; //@line 539 "pyexpat.c"
        var $93=(($92)&4294967295); //@line 539 "pyexpat.c"
        HEAP[$93]=$91; //@line 539 "pyexpat.c"
        var $94=HEAP[$n]; //@line 539 "pyexpat.c"
        var $95=(($94)&4294967295); //@line 539 "pyexpat.c"
        var $96=HEAP[$95]; //@line 539 "pyexpat.c"
        var $97=((($96))|0)==0; //@line 539 "pyexpat.c"
        if ($97) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 539 "pyexpat.c"
      case 24: // $bb23
        var $98=HEAP[$n]; //@line 539 "pyexpat.c"
        var $99=(($98+4)&4294967295); //@line 539 "pyexpat.c"
        var $100=HEAP[$99]; //@line 539 "pyexpat.c"
        var $101=(($100+24)&4294967295); //@line 539 "pyexpat.c"
        var $102=HEAP[$101]; //@line 539 "pyexpat.c"
        var $103=HEAP[$n]; //@line 539 "pyexpat.c"
        FUNCTION_TABLE[$102]($103); //@line 539 "pyexpat.c"
        __label__ = 25; break; //@line 539 "pyexpat.c"
      case 25: // $bb24
        __label__ = 52; break; //@line 539 "pyexpat.c"
      case 26: // $bb25
        var $104=HEAP[$self]; //@line 542 "pyexpat.c"
        var $105=(($104+16)&4294967295); //@line 542 "pyexpat.c"
        var $106=HEAP[$105]; //@line 542 "pyexpat.c"
        var $107=((($106))|0)!=0; //@line 542 "pyexpat.c"
        if ($107) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 542 "pyexpat.c"
      case 27: // $bb26
        var $108=HEAP[$container]; //@line 543 "pyexpat.c"
        var $109=$108; //@line 543 "pyexpat.c"
        var $110=(($109+12)&4294967295); //@line 543 "pyexpat.c"
        var $111=HEAP[$110]; //@line 543 "pyexpat.c"
        var $112=HEAP[$i]; //@line 543 "pyexpat.c"
        var $113=(($111+4*$112)&4294967295); //@line 543 "pyexpat.c"
        var $114=HEAP[$n]; //@line 543 "pyexpat.c"
        HEAP[$113]=$114; //@line 543 "pyexpat.c"
        var $115=HEAP[$container]; //@line 544 "pyexpat.c"
        var $116=$115; //@line 544 "pyexpat.c"
        var $117=(($116+12)&4294967295); //@line 544 "pyexpat.c"
        var $118=HEAP[$117]; //@line 544 "pyexpat.c"
        var $119=HEAP[$i]; //@line 544 "pyexpat.c"
        var $120=((($119) + 1)&4294967295); //@line 544 "pyexpat.c"
        var $121=(($118+4*$120)&4294967295); //@line 544 "pyexpat.c"
        var $122=HEAP[$v]; //@line 544 "pyexpat.c"
        HEAP[$121]=$122; //@line 544 "pyexpat.c"
        __label__ = 38; break; //@line 544 "pyexpat.c"
      case 28: // $bb27
        var $123=HEAP[$container]; //@line 546 "pyexpat.c"
        var $124=HEAP[$n]; //@line 546 "pyexpat.c"
        var $125=HEAP[$v]; //@line 546 "pyexpat.c"
        var $126=_PyDict_SetItem($123, $124, $125); //@line 546 "pyexpat.c"
        var $127=((($126))|0)!=0; //@line 546 "pyexpat.c"
        if ($127) { __label__ = 29; break; } else { __label__ = 34; break; } //@line 546 "pyexpat.c"
      case 29: // $bb28
        var $128=HEAP[$self]; //@line 547 "pyexpat.c"
        _flag_error($128); //@line 547 "pyexpat.c"
        var $129=HEAP[$n]; //@line 548 "pyexpat.c"
        var $130=(($129)&4294967295); //@line 548 "pyexpat.c"
        var $131=HEAP[$130]; //@line 548 "pyexpat.c"
        var $132=((($131) - 1)&4294967295); //@line 548 "pyexpat.c"
        var $133=HEAP[$n]; //@line 548 "pyexpat.c"
        var $134=(($133)&4294967295); //@line 548 "pyexpat.c"
        HEAP[$134]=$132; //@line 548 "pyexpat.c"
        var $135=HEAP[$n]; //@line 548 "pyexpat.c"
        var $136=(($135)&4294967295); //@line 548 "pyexpat.c"
        var $137=HEAP[$136]; //@line 548 "pyexpat.c"
        var $138=((($137))|0)==0; //@line 548 "pyexpat.c"
        if ($138) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 548 "pyexpat.c"
      case 30: // $bb29
        var $139=HEAP[$n]; //@line 548 "pyexpat.c"
        var $140=(($139+4)&4294967295); //@line 548 "pyexpat.c"
        var $141=HEAP[$140]; //@line 548 "pyexpat.c"
        var $142=(($141+24)&4294967295); //@line 548 "pyexpat.c"
        var $143=HEAP[$142]; //@line 548 "pyexpat.c"
        var $144=HEAP[$n]; //@line 548 "pyexpat.c"
        FUNCTION_TABLE[$143]($144); //@line 548 "pyexpat.c"
        __label__ = 31; break; //@line 548 "pyexpat.c"
      case 31: // $bb30
        var $145=HEAP[$v]; //@line 549 "pyexpat.c"
        var $146=(($145)&4294967295); //@line 549 "pyexpat.c"
        var $147=HEAP[$146]; //@line 549 "pyexpat.c"
        var $148=((($147) - 1)&4294967295); //@line 549 "pyexpat.c"
        var $149=HEAP[$v]; //@line 549 "pyexpat.c"
        var $150=(($149)&4294967295); //@line 549 "pyexpat.c"
        HEAP[$150]=$148; //@line 549 "pyexpat.c"
        var $151=HEAP[$v]; //@line 549 "pyexpat.c"
        var $152=(($151)&4294967295); //@line 549 "pyexpat.c"
        var $153=HEAP[$152]; //@line 549 "pyexpat.c"
        var $154=((($153))|0)==0; //@line 549 "pyexpat.c"
        if ($154) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 549 "pyexpat.c"
      case 32: // $bb31
        var $155=HEAP[$v]; //@line 549 "pyexpat.c"
        var $156=(($155+4)&4294967295); //@line 549 "pyexpat.c"
        var $157=HEAP[$156]; //@line 549 "pyexpat.c"
        var $158=(($157+24)&4294967295); //@line 549 "pyexpat.c"
        var $159=HEAP[$158]; //@line 549 "pyexpat.c"
        var $160=HEAP[$v]; //@line 549 "pyexpat.c"
        FUNCTION_TABLE[$159]($160); //@line 549 "pyexpat.c"
        __label__ = 33; break; //@line 549 "pyexpat.c"
      case 33: // $bb32
        __label__ = 52; break; //@line 549 "pyexpat.c"
      case 34: // $bb33
        var $161=HEAP[$n]; //@line 553 "pyexpat.c"
        var $162=(($161)&4294967295); //@line 553 "pyexpat.c"
        var $163=HEAP[$162]; //@line 553 "pyexpat.c"
        var $164=((($163) - 1)&4294967295); //@line 553 "pyexpat.c"
        var $165=HEAP[$n]; //@line 553 "pyexpat.c"
        var $166=(($165)&4294967295); //@line 553 "pyexpat.c"
        HEAP[$166]=$164; //@line 553 "pyexpat.c"
        var $167=HEAP[$n]; //@line 553 "pyexpat.c"
        var $168=(($167)&4294967295); //@line 553 "pyexpat.c"
        var $169=HEAP[$168]; //@line 553 "pyexpat.c"
        var $170=((($169))|0)==0; //@line 553 "pyexpat.c"
        if ($170) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 553 "pyexpat.c"
      case 35: // $bb34
        var $171=HEAP[$n]; //@line 553 "pyexpat.c"
        var $172=(($171+4)&4294967295); //@line 553 "pyexpat.c"
        var $173=HEAP[$172]; //@line 553 "pyexpat.c"
        var $174=(($173+24)&4294967295); //@line 553 "pyexpat.c"
        var $175=HEAP[$174]; //@line 553 "pyexpat.c"
        var $176=HEAP[$n]; //@line 553 "pyexpat.c"
        FUNCTION_TABLE[$175]($176); //@line 553 "pyexpat.c"
        __label__ = 36; break; //@line 553 "pyexpat.c"
      case 36: // $bb35
        var $177=HEAP[$v]; //@line 554 "pyexpat.c"
        var $178=(($177)&4294967295); //@line 554 "pyexpat.c"
        var $179=HEAP[$178]; //@line 554 "pyexpat.c"
        var $180=((($179) - 1)&4294967295); //@line 554 "pyexpat.c"
        var $181=HEAP[$v]; //@line 554 "pyexpat.c"
        var $182=(($181)&4294967295); //@line 554 "pyexpat.c"
        HEAP[$182]=$180; //@line 554 "pyexpat.c"
        var $183=HEAP[$v]; //@line 554 "pyexpat.c"
        var $184=(($183)&4294967295); //@line 554 "pyexpat.c"
        var $185=HEAP[$184]; //@line 554 "pyexpat.c"
        var $186=((($185))|0)==0; //@line 554 "pyexpat.c"
        if ($186) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 554 "pyexpat.c"
      case 37: // $bb36
        var $187=HEAP[$v]; //@line 554 "pyexpat.c"
        var $188=(($187+4)&4294967295); //@line 554 "pyexpat.c"
        var $189=HEAP[$188]; //@line 554 "pyexpat.c"
        var $190=(($189+24)&4294967295); //@line 554 "pyexpat.c"
        var $191=HEAP[$190]; //@line 554 "pyexpat.c"
        var $192=HEAP[$v]; //@line 554 "pyexpat.c"
        FUNCTION_TABLE[$191]($192); //@line 554 "pyexpat.c"
        __label__ = 38; break; //@line 554 "pyexpat.c"
      case 38: // $bb37
        var $193=HEAP[$i]; //@line 527 "pyexpat.c"
        var $194=((($193) + 2)&4294967295); //@line 527 "pyexpat.c"
        HEAP[$i]=$194; //@line 527 "pyexpat.c"
        __label__ = 39; break; //@line 527 "pyexpat.c"
      case 39: // $bb38
        var $195=HEAP[$i]; //@line 527 "pyexpat.c"
        var $196=HEAP[$max]; //@line 527 "pyexpat.c"
        var $197=((($195))|0) < ((($196))|0); //@line 527 "pyexpat.c"
        if ($197) { __label__ = 13; break; } else { __label__ = 40; break; } //@line 527 "pyexpat.c"
      case 40: // $bb39
        var $198=HEAP[$self]; //@line 557 "pyexpat.c"
        var $199=HEAP[$name_addr]; //@line 557 "pyexpat.c"
        var $200=_string_intern($198, $199); //@line 557 "pyexpat.c"
        HEAP[$args]=$200; //@line 557 "pyexpat.c"
        var $201=HEAP[$args]; //@line 558 "pyexpat.c"
        var $202=($201)!=0; //@line 558 "pyexpat.c"
        if ($202) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 558 "pyexpat.c"
      case 41: // $bb40
        var $203=HEAP[$args]; //@line 559 "pyexpat.c"
        var $204=HEAP[$container]; //@line 559 "pyexpat.c"
        var $205=_Py_BuildValue(((__str8)&4294967295), $203, $204); //@line 559 "pyexpat.c"
        HEAP[$args]=$205; //@line 559 "pyexpat.c"
        __label__ = 42; break; //@line 559 "pyexpat.c"
      case 42: // $bb41
        var $206=HEAP[$args]; //@line 560 "pyexpat.c"
        var $207=($206)==0; //@line 560 "pyexpat.c"
        if ($207) { __label__ = 43; break; } else { __label__ = 46; break; } //@line 560 "pyexpat.c"
      case 43: // $bb42
        var $208=HEAP[$container]; //@line 561 "pyexpat.c"
        var $209=(($208)&4294967295); //@line 561 "pyexpat.c"
        var $210=HEAP[$209]; //@line 561 "pyexpat.c"
        var $211=((($210) - 1)&4294967295); //@line 561 "pyexpat.c"
        var $212=HEAP[$container]; //@line 561 "pyexpat.c"
        var $213=(($212)&4294967295); //@line 561 "pyexpat.c"
        HEAP[$213]=$211; //@line 561 "pyexpat.c"
        var $214=HEAP[$container]; //@line 561 "pyexpat.c"
        var $215=(($214)&4294967295); //@line 561 "pyexpat.c"
        var $216=HEAP[$215]; //@line 561 "pyexpat.c"
        var $217=((($216))|0)==0; //@line 561 "pyexpat.c"
        if ($217) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 561 "pyexpat.c"
      case 44: // $bb43
        var $218=HEAP[$container]; //@line 561 "pyexpat.c"
        var $219=(($218+4)&4294967295); //@line 561 "pyexpat.c"
        var $220=HEAP[$219]; //@line 561 "pyexpat.c"
        var $221=(($220+24)&4294967295); //@line 561 "pyexpat.c"
        var $222=HEAP[$221]; //@line 561 "pyexpat.c"
        var $223=HEAP[$container]; //@line 561 "pyexpat.c"
        FUNCTION_TABLE[$222]($223); //@line 561 "pyexpat.c"
        __label__ = 45; break; //@line 561 "pyexpat.c"
      case 45: // $bb44
        __label__ = 52; break; //@line 561 "pyexpat.c"
      case 46: // $bb45
        var $224=HEAP[$self]; //@line 565 "pyexpat.c"
        var $225=(($224+24)&4294967295); //@line 565 "pyexpat.c"
        HEAP[$225]=1; //@line 565 "pyexpat.c"
        var $226=HEAP[$self]; //@line 566 "pyexpat.c"
        var $227=(($226+48)&4294967295); //@line 566 "pyexpat.c"
        var $228=HEAP[$227]; //@line 566 "pyexpat.c"
        var $229=(($228)&4294967295); //@line 566 "pyexpat.c"
        var $230=HEAP[$229]; //@line 566 "pyexpat.c"
        var $231=_getcode(0, ((__str9)&4294967295), 566); //@line 566 "pyexpat.c"
        var $232=HEAP[$args]; //@line 566 "pyexpat.c"
        var $233=HEAP[$self]; //@line 566 "pyexpat.c"
        var $234=_call_with_frame($231, $230, $232, $233); //@line 566 "pyexpat.c"
        HEAP[$rv]=$234; //@line 566 "pyexpat.c"
        var $235=HEAP[$self]; //@line 568 "pyexpat.c"
        var $236=(($235+24)&4294967295); //@line 568 "pyexpat.c"
        HEAP[$236]=0; //@line 568 "pyexpat.c"
        var $237=HEAP[$args]; //@line 569 "pyexpat.c"
        var $238=(($237)&4294967295); //@line 569 "pyexpat.c"
        var $239=HEAP[$238]; //@line 569 "pyexpat.c"
        var $240=((($239) - 1)&4294967295); //@line 569 "pyexpat.c"
        var $241=HEAP[$args]; //@line 569 "pyexpat.c"
        var $242=(($241)&4294967295); //@line 569 "pyexpat.c"
        HEAP[$242]=$240; //@line 569 "pyexpat.c"
        var $243=HEAP[$args]; //@line 569 "pyexpat.c"
        var $244=(($243)&4294967295); //@line 569 "pyexpat.c"
        var $245=HEAP[$244]; //@line 569 "pyexpat.c"
        var $246=((($245))|0)==0; //@line 569 "pyexpat.c"
        if ($246) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 569 "pyexpat.c"
      case 47: // $bb46
        var $247=HEAP[$args]; //@line 569 "pyexpat.c"
        var $248=(($247+4)&4294967295); //@line 569 "pyexpat.c"
        var $249=HEAP[$248]; //@line 569 "pyexpat.c"
        var $250=(($249+24)&4294967295); //@line 569 "pyexpat.c"
        var $251=HEAP[$250]; //@line 569 "pyexpat.c"
        var $252=HEAP[$args]; //@line 569 "pyexpat.c"
        FUNCTION_TABLE[$251]($252); //@line 569 "pyexpat.c"
        __label__ = 48; break; //@line 569 "pyexpat.c"
      case 48: // $bb47
        var $253=HEAP[$rv]; //@line 570 "pyexpat.c"
        var $254=($253)==0; //@line 570 "pyexpat.c"
        if ($254) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 570 "pyexpat.c"
      case 49: // $bb48
        var $255=HEAP[$self]; //@line 571 "pyexpat.c"
        _flag_error($255); //@line 571 "pyexpat.c"
        __label__ = 52; break; //@line 571 "pyexpat.c"
      case 50: // $bb49
        var $256=HEAP[$rv]; //@line 574 "pyexpat.c"
        var $257=(($256)&4294967295); //@line 574 "pyexpat.c"
        var $258=HEAP[$257]; //@line 574 "pyexpat.c"
        var $259=((($258) - 1)&4294967295); //@line 574 "pyexpat.c"
        var $260=HEAP[$rv]; //@line 574 "pyexpat.c"
        var $261=(($260)&4294967295); //@line 574 "pyexpat.c"
        HEAP[$261]=$259; //@line 574 "pyexpat.c"
        var $262=HEAP[$rv]; //@line 574 "pyexpat.c"
        var $263=(($262)&4294967295); //@line 574 "pyexpat.c"
        var $264=HEAP[$263]; //@line 574 "pyexpat.c"
        var $265=((($264))|0)==0; //@line 574 "pyexpat.c"
        if ($265) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 574 "pyexpat.c"
      case 51: // $bb50
        var $266=HEAP[$rv]; //@line 574 "pyexpat.c"
        var $267=(($266+4)&4294967295); //@line 574 "pyexpat.c"
        var $268=HEAP[$267]; //@line 574 "pyexpat.c"
        var $269=(($268+24)&4294967295); //@line 574 "pyexpat.c"
        var $270=HEAP[$269]; //@line 574 "pyexpat.c"
        var $271=HEAP[$rv]; //@line 574 "pyexpat.c"
        FUNCTION_TABLE[$270]($271); //@line 574 "pyexpat.c"
        __label__ = 52; break; //@line 574 "pyexpat.c"
      case 52: // $bb51
        __label__ = 53; break; //@line 506 "pyexpat.c"
      case 53: // $return
        STACKTOP = __stackBase__;
        return; //@line 506 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_EndElementHandler($userData, $name) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr=__stackBase__;
        var $name_addr=__stackBase__+4;
        var $self=__stackBase__+8;
        var $args=__stackBase__+12;
        var $rv=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$userData_addr]=$userData;
        HEAP[$name_addr]=$name;
        var $0=HEAP[$userData_addr]; //@line 616 "pyexpat.c"
        var $1=$0; //@line 616 "pyexpat.c"
        HEAP[$self]=$1; //@line 616 "pyexpat.c"
        HEAP[$args]=0; //@line 616 "pyexpat.c"
        HEAP[$rv]=0; //@line 616 "pyexpat.c"
        var $2=HEAP[$self]; //@line 616 "pyexpat.c"
        var $3=_have_handler($2, 1); //@line 616 "pyexpat.c"
        var $4=((($3))|0)!=0; //@line 616 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 10; break; } //@line 616 "pyexpat.c"
      case 1: // $bb
        var $5=HEAP[$self]; //@line 616 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 616 "pyexpat.c"
        var $7=((($6))|0) < 0; //@line 616 "pyexpat.c"
        if ($7) { __label__ = 11; break; } else { __label__ = 2; break; } //@line 616 "pyexpat.c"
      case 2: // $bb1
        var $8=HEAP[$self]; //@line 616 "pyexpat.c"
        var $9=HEAP[$name_addr]; //@line 616 "pyexpat.c"
        var $10=_string_intern($8, $9); //@line 616 "pyexpat.c"
        var $11=_Py_BuildValue(((__str10)&4294967295), $10); //@line 616 "pyexpat.c"
        HEAP[$args]=$11; //@line 616 "pyexpat.c"
        var $12=HEAP[$args]; //@line 616 "pyexpat.c"
        var $13=($12)==0; //@line 616 "pyexpat.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 616 "pyexpat.c"
      case 3: // $bb2
        var $14=HEAP[$self]; //@line 616 "pyexpat.c"
        _flag_error($14); //@line 616 "pyexpat.c"
        __label__ = 11; break; //@line 616 "pyexpat.c"
      case 4: // $bb3
        var $15=HEAP[$self]; //@line 616 "pyexpat.c"
        var $16=(($15+24)&4294967295); //@line 616 "pyexpat.c"
        HEAP[$16]=1; //@line 616 "pyexpat.c"
        var $17=HEAP[$self]; //@line 616 "pyexpat.c"
        var $18=(($17+48)&4294967295); //@line 616 "pyexpat.c"
        var $19=HEAP[$18]; //@line 616 "pyexpat.c"
        var $20=(($19+4)&4294967295); //@line 616 "pyexpat.c"
        var $21=HEAP[$20]; //@line 616 "pyexpat.c"
        var $22=_getcode(1, ((__str11)&4294967295), 618); //@line 616 "pyexpat.c"
        var $23=HEAP[$args]; //@line 616 "pyexpat.c"
        var $24=HEAP[$self]; //@line 616 "pyexpat.c"
        var $25=_call_with_frame($22, $21, $23, $24); //@line 616 "pyexpat.c"
        HEAP[$rv]=$25; //@line 616 "pyexpat.c"
        var $26=HEAP[$self]; //@line 616 "pyexpat.c"
        var $27=(($26+24)&4294967295); //@line 616 "pyexpat.c"
        HEAP[$27]=0; //@line 616 "pyexpat.c"
        var $28=HEAP[$args]; //@line 616 "pyexpat.c"
        var $29=(($28)&4294967295); //@line 616 "pyexpat.c"
        var $30=HEAP[$29]; //@line 616 "pyexpat.c"
        var $31=((($30) - 1)&4294967295); //@line 616 "pyexpat.c"
        var $32=HEAP[$args]; //@line 616 "pyexpat.c"
        var $33=(($32)&4294967295); //@line 616 "pyexpat.c"
        HEAP[$33]=$31; //@line 616 "pyexpat.c"
        var $34=HEAP[$args]; //@line 616 "pyexpat.c"
        var $35=(($34)&4294967295); //@line 616 "pyexpat.c"
        var $36=HEAP[$35]; //@line 616 "pyexpat.c"
        var $37=((($36))|0)==0; //@line 616 "pyexpat.c"
        if ($37) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 616 "pyexpat.c"
      case 5: // $bb4
        var $38=HEAP[$args]; //@line 616 "pyexpat.c"
        var $39=(($38+4)&4294967295); //@line 616 "pyexpat.c"
        var $40=HEAP[$39]; //@line 616 "pyexpat.c"
        var $41=(($40+24)&4294967295); //@line 616 "pyexpat.c"
        var $42=HEAP[$41]; //@line 616 "pyexpat.c"
        var $43=HEAP[$args]; //@line 616 "pyexpat.c"
        FUNCTION_TABLE[$42]($43); //@line 616 "pyexpat.c"
        __label__ = 6; break; //@line 616 "pyexpat.c"
      case 6: // $bb5
        var $44=HEAP[$rv]; //@line 616 "pyexpat.c"
        var $45=($44)==0; //@line 616 "pyexpat.c"
        if ($45) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 616 "pyexpat.c"
      case 7: // $bb6
        var $46=HEAP[$self]; //@line 616 "pyexpat.c"
        _flag_error($46); //@line 616 "pyexpat.c"
        __label__ = 11; break; //@line 616 "pyexpat.c"
      case 8: // $bb7
        var $47=HEAP[$rv]; //@line 616 "pyexpat.c"
        var $48=(($47)&4294967295); //@line 616 "pyexpat.c"
        var $49=HEAP[$48]; //@line 616 "pyexpat.c"
        var $50=((($49) - 1)&4294967295); //@line 616 "pyexpat.c"
        var $51=HEAP[$rv]; //@line 616 "pyexpat.c"
        var $52=(($51)&4294967295); //@line 616 "pyexpat.c"
        HEAP[$52]=$50; //@line 616 "pyexpat.c"
        var $53=HEAP[$rv]; //@line 616 "pyexpat.c"
        var $54=(($53)&4294967295); //@line 616 "pyexpat.c"
        var $55=HEAP[$54]; //@line 616 "pyexpat.c"
        var $56=((($55))|0)==0; //@line 616 "pyexpat.c"
        if ($56) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 616 "pyexpat.c"
      case 9: // $bb8
        var $57=HEAP[$rv]; //@line 616 "pyexpat.c"
        var $58=(($57+4)&4294967295); //@line 616 "pyexpat.c"
        var $59=HEAP[$58]; //@line 616 "pyexpat.c"
        var $60=(($59+24)&4294967295); //@line 616 "pyexpat.c"
        var $61=HEAP[$60]; //@line 616 "pyexpat.c"
        var $62=HEAP[$rv]; //@line 616 "pyexpat.c"
        FUNCTION_TABLE[$61]($62); //@line 616 "pyexpat.c"
        __label__ = 10; break; //@line 616 "pyexpat.c"
      case 10: // $bb9
        __label__ = 11; break; //@line 616 "pyexpat.c"
      case 11: // $bb10
        __label__ = 12; break; //@line 616 "pyexpat.c"
      case 12: // $return
        STACKTOP = __stackBase__;
        return; //@line 616 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_ProcessingInstructionHandler($userData, $target, $data) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr=__stackBase__;
        var $target_addr=__stackBase__+4;
        var $data_addr=__stackBase__+8;
        var $iftmp_45=__stackBase__+12;
        var $self=__stackBase__+16;
        var $args=__stackBase__+20;
        var $rv=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$userData_addr]=$userData;
        HEAP[$target_addr]=$target;
        HEAP[$data_addr]=$data;
        var $0=HEAP[$userData_addr]; //@line 620 "pyexpat.c"
        var $1=$0; //@line 620 "pyexpat.c"
        HEAP[$self]=$1; //@line 620 "pyexpat.c"
        HEAP[$args]=0; //@line 620 "pyexpat.c"
        HEAP[$rv]=0; //@line 620 "pyexpat.c"
        var $2=HEAP[$self]; //@line 620 "pyexpat.c"
        var $3=_have_handler($2, 2); //@line 620 "pyexpat.c"
        var $4=((($3))|0)!=0; //@line 620 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 13; break; } //@line 620 "pyexpat.c"
      case 1: // $bb
        var $5=HEAP[$self]; //@line 620 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 620 "pyexpat.c"
        var $7=((($6))|0) < 0; //@line 620 "pyexpat.c"
        if ($7) { __label__ = 14; break; } else { __label__ = 2; break; } //@line 620 "pyexpat.c"
      case 2: // $bb1
        var $8=HEAP[$self]; //@line 620 "pyexpat.c"
        var $9=(($8+12)&4294967295); //@line 620 "pyexpat.c"
        var $10=HEAP[$9]; //@line 620 "pyexpat.c"
        var $11=((($10))|0)!=0; //@line 620 "pyexpat.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 620 "pyexpat.c"
      case 3: // $bb2
        HEAP[$iftmp_45]=(FUNCTION_TABLE_OFFSET + 4); //@line 620 "pyexpat.c"
        __label__ = 5; break; //@line 620 "pyexpat.c"
      case 4: // $bb3
        HEAP[$iftmp_45]=(FUNCTION_TABLE_OFFSET + 6); //@line 620 "pyexpat.c"
        __label__ = 5; break; //@line 620 "pyexpat.c"
      case 5: // $bb4
        var $12=HEAP[$self]; //@line 620 "pyexpat.c"
        var $13=HEAP[$target_addr]; //@line 620 "pyexpat.c"
        var $14=_string_intern($12, $13); //@line 620 "pyexpat.c"
        var $15=HEAP[$iftmp_45]; //@line 620 "pyexpat.c"
        var $16=HEAP[$data_addr]; //@line 620 "pyexpat.c"
        var $17=_Py_BuildValue(((__str12)&4294967295), $14, $15, $16); //@line 620 "pyexpat.c"
        HEAP[$args]=$17; //@line 620 "pyexpat.c"
        var $18=HEAP[$args]; //@line 620 "pyexpat.c"
        var $19=($18)==0; //@line 620 "pyexpat.c"
        if ($19) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 620 "pyexpat.c"
      case 6: // $bb5
        var $20=HEAP[$self]; //@line 620 "pyexpat.c"
        _flag_error($20); //@line 620 "pyexpat.c"
        __label__ = 14; break; //@line 620 "pyexpat.c"
      case 7: // $bb6
        var $21=HEAP[$self]; //@line 620 "pyexpat.c"
        var $22=(($21+24)&4294967295); //@line 620 "pyexpat.c"
        HEAP[$22]=1; //@line 620 "pyexpat.c"
        var $23=HEAP[$self]; //@line 620 "pyexpat.c"
        var $24=(($23+48)&4294967295); //@line 620 "pyexpat.c"
        var $25=HEAP[$24]; //@line 620 "pyexpat.c"
        var $26=(($25+8)&4294967295); //@line 620 "pyexpat.c"
        var $27=HEAP[$26]; //@line 620 "pyexpat.c"
        var $28=_getcode(2, ((__str13)&4294967295), 624); //@line 620 "pyexpat.c"
        var $29=HEAP[$args]; //@line 620 "pyexpat.c"
        var $30=HEAP[$self]; //@line 620 "pyexpat.c"
        var $31=_call_with_frame($28, $27, $29, $30); //@line 620 "pyexpat.c"
        HEAP[$rv]=$31; //@line 620 "pyexpat.c"
        var $32=HEAP[$self]; //@line 620 "pyexpat.c"
        var $33=(($32+24)&4294967295); //@line 620 "pyexpat.c"
        HEAP[$33]=0; //@line 620 "pyexpat.c"
        var $34=HEAP[$args]; //@line 620 "pyexpat.c"
        var $35=(($34)&4294967295); //@line 620 "pyexpat.c"
        var $36=HEAP[$35]; //@line 620 "pyexpat.c"
        var $37=((($36) - 1)&4294967295); //@line 620 "pyexpat.c"
        var $38=HEAP[$args]; //@line 620 "pyexpat.c"
        var $39=(($38)&4294967295); //@line 620 "pyexpat.c"
        HEAP[$39]=$37; //@line 620 "pyexpat.c"
        var $40=HEAP[$args]; //@line 620 "pyexpat.c"
        var $41=(($40)&4294967295); //@line 620 "pyexpat.c"
        var $42=HEAP[$41]; //@line 620 "pyexpat.c"
        var $43=((($42))|0)==0; //@line 620 "pyexpat.c"
        if ($43) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 620 "pyexpat.c"
      case 8: // $bb7
        var $44=HEAP[$args]; //@line 620 "pyexpat.c"
        var $45=(($44+4)&4294967295); //@line 620 "pyexpat.c"
        var $46=HEAP[$45]; //@line 620 "pyexpat.c"
        var $47=(($46+24)&4294967295); //@line 620 "pyexpat.c"
        var $48=HEAP[$47]; //@line 620 "pyexpat.c"
        var $49=HEAP[$args]; //@line 620 "pyexpat.c"
        FUNCTION_TABLE[$48]($49); //@line 620 "pyexpat.c"
        __label__ = 9; break; //@line 620 "pyexpat.c"
      case 9: // $bb8
        var $50=HEAP[$rv]; //@line 620 "pyexpat.c"
        var $51=($50)==0; //@line 620 "pyexpat.c"
        if ($51) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 620 "pyexpat.c"
      case 10: // $bb9
        var $52=HEAP[$self]; //@line 620 "pyexpat.c"
        _flag_error($52); //@line 620 "pyexpat.c"
        __label__ = 14; break; //@line 620 "pyexpat.c"
      case 11: // $bb10
        var $53=HEAP[$rv]; //@line 620 "pyexpat.c"
        var $54=(($53)&4294967295); //@line 620 "pyexpat.c"
        var $55=HEAP[$54]; //@line 620 "pyexpat.c"
        var $56=((($55) - 1)&4294967295); //@line 620 "pyexpat.c"
        var $57=HEAP[$rv]; //@line 620 "pyexpat.c"
        var $58=(($57)&4294967295); //@line 620 "pyexpat.c"
        HEAP[$58]=$56; //@line 620 "pyexpat.c"
        var $59=HEAP[$rv]; //@line 620 "pyexpat.c"
        var $60=(($59)&4294967295); //@line 620 "pyexpat.c"
        var $61=HEAP[$60]; //@line 620 "pyexpat.c"
        var $62=((($61))|0)==0; //@line 620 "pyexpat.c"
        if ($62) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 620 "pyexpat.c"
      case 12: // $bb11
        var $63=HEAP[$rv]; //@line 620 "pyexpat.c"
        var $64=(($63+4)&4294967295); //@line 620 "pyexpat.c"
        var $65=HEAP[$64]; //@line 620 "pyexpat.c"
        var $66=(($65+24)&4294967295); //@line 620 "pyexpat.c"
        var $67=HEAP[$66]; //@line 620 "pyexpat.c"
        var $68=HEAP[$rv]; //@line 620 "pyexpat.c"
        FUNCTION_TABLE[$67]($68); //@line 620 "pyexpat.c"
        __label__ = 13; break; //@line 620 "pyexpat.c"
      case 13: // $bb12
        __label__ = 14; break; //@line 620 "pyexpat.c"
      case 14: // $bb13
        __label__ = 15; break; //@line 620 "pyexpat.c"
      case 15: // $return
        STACKTOP = __stackBase__;
        return; //@line 620 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_UnparsedEntityDeclHandler($userData, $entityName, $base, $systemId, $publicId, $notationName) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr=__stackBase__;
        var $entityName_addr=__stackBase__+4;
        var $base_addr=__stackBase__+8;
        var $systemId_addr=__stackBase__+12;
        var $publicId_addr=__stackBase__+16;
        var $notationName_addr=__stackBase__+20;
        var $self=__stackBase__+24;
        var $args=__stackBase__+28;
        var $rv=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$userData_addr]=$userData;
        HEAP[$entityName_addr]=$entityName;
        HEAP[$base_addr]=$base;
        HEAP[$systemId_addr]=$systemId;
        HEAP[$publicId_addr]=$publicId;
        HEAP[$notationName_addr]=$notationName;
        var $0=HEAP[$userData_addr]; //@line 626 "pyexpat.c"
        var $1=$0; //@line 626 "pyexpat.c"
        HEAP[$self]=$1; //@line 626 "pyexpat.c"
        HEAP[$args]=0; //@line 626 "pyexpat.c"
        HEAP[$rv]=0; //@line 626 "pyexpat.c"
        var $2=HEAP[$self]; //@line 626 "pyexpat.c"
        var $3=_have_handler($2, 4); //@line 626 "pyexpat.c"
        var $4=((($3))|0)!=0; //@line 626 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 10; break; } //@line 626 "pyexpat.c"
      case 1: // $bb
        var $5=HEAP[$self]; //@line 626 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 626 "pyexpat.c"
        var $7=((($6))|0) < 0; //@line 626 "pyexpat.c"
        if ($7) { __label__ = 11; break; } else { __label__ = 2; break; } //@line 626 "pyexpat.c"
      case 2: // $bb1
        var $8=HEAP[$self]; //@line 626 "pyexpat.c"
        var $9=HEAP[$notationName_addr]; //@line 626 "pyexpat.c"
        var $10=_string_intern($8, $9); //@line 626 "pyexpat.c"
        var $11=HEAP[$self]; //@line 626 "pyexpat.c"
        var $12=HEAP[$publicId_addr]; //@line 626 "pyexpat.c"
        var $13=_string_intern($11, $12); //@line 626 "pyexpat.c"
        var $14=HEAP[$self]; //@line 626 "pyexpat.c"
        var $15=HEAP[$systemId_addr]; //@line 626 "pyexpat.c"
        var $16=_string_intern($14, $15); //@line 626 "pyexpat.c"
        var $17=HEAP[$self]; //@line 626 "pyexpat.c"
        var $18=HEAP[$base_addr]; //@line 626 "pyexpat.c"
        var $19=_string_intern($17, $18); //@line 626 "pyexpat.c"
        var $20=HEAP[$self]; //@line 626 "pyexpat.c"
        var $21=HEAP[$entityName_addr]; //@line 626 "pyexpat.c"
        var $22=_string_intern($20, $21); //@line 626 "pyexpat.c"
        var $23=_Py_BuildValue(((__str14)&4294967295), $22, $19, $16, $13, $10); //@line 626 "pyexpat.c"
        HEAP[$args]=$23; //@line 626 "pyexpat.c"
        var $24=HEAP[$args]; //@line 626 "pyexpat.c"
        var $25=($24)==0; //@line 626 "pyexpat.c"
        if ($25) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 626 "pyexpat.c"
      case 3: // $bb2
        var $26=HEAP[$self]; //@line 626 "pyexpat.c"
        _flag_error($26); //@line 626 "pyexpat.c"
        __label__ = 11; break; //@line 626 "pyexpat.c"
      case 4: // $bb3
        var $27=HEAP[$self]; //@line 626 "pyexpat.c"
        var $28=(($27+24)&4294967295); //@line 626 "pyexpat.c"
        HEAP[$28]=1; //@line 626 "pyexpat.c"
        var $29=HEAP[$self]; //@line 626 "pyexpat.c"
        var $30=(($29+48)&4294967295); //@line 626 "pyexpat.c"
        var $31=HEAP[$30]; //@line 626 "pyexpat.c"
        var $32=(($31+16)&4294967295); //@line 626 "pyexpat.c"
        var $33=HEAP[$32]; //@line 626 "pyexpat.c"
        var $34=_getcode(4, ((__str15)&4294967295), 636); //@line 626 "pyexpat.c"
        var $35=HEAP[$args]; //@line 626 "pyexpat.c"
        var $36=HEAP[$self]; //@line 626 "pyexpat.c"
        var $37=_call_with_frame($34, $33, $35, $36); //@line 626 "pyexpat.c"
        HEAP[$rv]=$37; //@line 626 "pyexpat.c"
        var $38=HEAP[$self]; //@line 626 "pyexpat.c"
        var $39=(($38+24)&4294967295); //@line 626 "pyexpat.c"
        HEAP[$39]=0; //@line 626 "pyexpat.c"
        var $40=HEAP[$args]; //@line 626 "pyexpat.c"
        var $41=(($40)&4294967295); //@line 626 "pyexpat.c"
        var $42=HEAP[$41]; //@line 626 "pyexpat.c"
        var $43=((($42) - 1)&4294967295); //@line 626 "pyexpat.c"
        var $44=HEAP[$args]; //@line 626 "pyexpat.c"
        var $45=(($44)&4294967295); //@line 626 "pyexpat.c"
        HEAP[$45]=$43; //@line 626 "pyexpat.c"
        var $46=HEAP[$args]; //@line 626 "pyexpat.c"
        var $47=(($46)&4294967295); //@line 626 "pyexpat.c"
        var $48=HEAP[$47]; //@line 626 "pyexpat.c"
        var $49=((($48))|0)==0; //@line 626 "pyexpat.c"
        if ($49) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 626 "pyexpat.c"
      case 5: // $bb4
        var $50=HEAP[$args]; //@line 626 "pyexpat.c"
        var $51=(($50+4)&4294967295); //@line 626 "pyexpat.c"
        var $52=HEAP[$51]; //@line 626 "pyexpat.c"
        var $53=(($52+24)&4294967295); //@line 626 "pyexpat.c"
        var $54=HEAP[$53]; //@line 626 "pyexpat.c"
        var $55=HEAP[$args]; //@line 626 "pyexpat.c"
        FUNCTION_TABLE[$54]($55); //@line 626 "pyexpat.c"
        __label__ = 6; break; //@line 626 "pyexpat.c"
      case 6: // $bb5
        var $56=HEAP[$rv]; //@line 626 "pyexpat.c"
        var $57=($56)==0; //@line 626 "pyexpat.c"
        if ($57) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 626 "pyexpat.c"
      case 7: // $bb6
        var $58=HEAP[$self]; //@line 626 "pyexpat.c"
        _flag_error($58); //@line 626 "pyexpat.c"
        __label__ = 11; break; //@line 626 "pyexpat.c"
      case 8: // $bb7
        var $59=HEAP[$rv]; //@line 626 "pyexpat.c"
        var $60=(($59)&4294967295); //@line 626 "pyexpat.c"
        var $61=HEAP[$60]; //@line 626 "pyexpat.c"
        var $62=((($61) - 1)&4294967295); //@line 626 "pyexpat.c"
        var $63=HEAP[$rv]; //@line 626 "pyexpat.c"
        var $64=(($63)&4294967295); //@line 626 "pyexpat.c"
        HEAP[$64]=$62; //@line 626 "pyexpat.c"
        var $65=HEAP[$rv]; //@line 626 "pyexpat.c"
        var $66=(($65)&4294967295); //@line 626 "pyexpat.c"
        var $67=HEAP[$66]; //@line 626 "pyexpat.c"
        var $68=((($67))|0)==0; //@line 626 "pyexpat.c"
        if ($68) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 626 "pyexpat.c"
      case 9: // $bb8
        var $69=HEAP[$rv]; //@line 626 "pyexpat.c"
        var $70=(($69+4)&4294967295); //@line 626 "pyexpat.c"
        var $71=HEAP[$70]; //@line 626 "pyexpat.c"
        var $72=(($71+24)&4294967295); //@line 626 "pyexpat.c"
        var $73=HEAP[$72]; //@line 626 "pyexpat.c"
        var $74=HEAP[$rv]; //@line 626 "pyexpat.c"
        FUNCTION_TABLE[$73]($74); //@line 626 "pyexpat.c"
        __label__ = 10; break; //@line 626 "pyexpat.c"
      case 10: // $bb9
        __label__ = 11; break; //@line 626 "pyexpat.c"
      case 11: // $bb10
        __label__ = 12; break; //@line 626 "pyexpat.c"
      case 12: // $return
        STACKTOP = __stackBase__;
        return; //@line 626 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_EntityDeclHandler($userData, $entityName, $is_parameter_entity, $value, $value_length, $base, $systemId, $publicId, $notationName) {
    var __stackBase__  = STACKTOP; STACKTOP += 52; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 52);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr=__stackBase__;
        var $entityName_addr=__stackBase__+4;
        var $is_parameter_entity_addr=__stackBase__+8;
        var $value_addr=__stackBase__+12;
        var $value_length_addr=__stackBase__+16;
        var $base_addr=__stackBase__+20;
        var $systemId_addr=__stackBase__+24;
        var $publicId_addr=__stackBase__+28;
        var $notationName_addr=__stackBase__+32;
        var $iftmp_46=__stackBase__+36;
        var $self=__stackBase__+40;
        var $args=__stackBase__+44;
        var $rv=__stackBase__+48;
        var $_alloca_point_=0;
        HEAP[$userData_addr]=$userData;
        HEAP[$entityName_addr]=$entityName;
        HEAP[$is_parameter_entity_addr]=$is_parameter_entity;
        HEAP[$value_addr]=$value;
        HEAP[$value_length_addr]=$value_length;
        HEAP[$base_addr]=$base;
        HEAP[$systemId_addr]=$systemId;
        HEAP[$publicId_addr]=$publicId;
        HEAP[$notationName_addr]=$notationName;
        var $0=HEAP[$userData_addr]; //@line 656 "pyexpat.c"
        var $1=$0; //@line 656 "pyexpat.c"
        HEAP[$self]=$1; //@line 656 "pyexpat.c"
        HEAP[$args]=0; //@line 656 "pyexpat.c"
        HEAP[$rv]=0; //@line 656 "pyexpat.c"
        var $2=HEAP[$self]; //@line 656 "pyexpat.c"
        var $3=_have_handler($2, 17); //@line 656 "pyexpat.c"
        var $4=((($3))|0)!=0; //@line 656 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 13; break; } //@line 656 "pyexpat.c"
      case 1: // $bb
        var $5=HEAP[$self]; //@line 656 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 656 "pyexpat.c"
        var $7=((($6))|0) < 0; //@line 656 "pyexpat.c"
        if ($7) { __label__ = 14; break; } else { __label__ = 2; break; } //@line 656 "pyexpat.c"
      case 2: // $bb1
        var $8=HEAP[$self]; //@line 656 "pyexpat.c"
        var $9=HEAP[$notationName_addr]; //@line 656 "pyexpat.c"
        var $10=_string_intern($8, $9); //@line 656 "pyexpat.c"
        var $11=HEAP[$self]; //@line 656 "pyexpat.c"
        var $12=HEAP[$publicId_addr]; //@line 656 "pyexpat.c"
        var $13=_string_intern($11, $12); //@line 656 "pyexpat.c"
        var $14=HEAP[$self]; //@line 656 "pyexpat.c"
        var $15=HEAP[$systemId_addr]; //@line 656 "pyexpat.c"
        var $16=_string_intern($14, $15); //@line 656 "pyexpat.c"
        var $17=HEAP[$self]; //@line 656 "pyexpat.c"
        var $18=HEAP[$base_addr]; //@line 656 "pyexpat.c"
        var $19=_string_intern($17, $18); //@line 656 "pyexpat.c"
        var $20=HEAP[$self]; //@line 656 "pyexpat.c"
        var $21=(($20+12)&4294967295); //@line 656 "pyexpat.c"
        var $22=HEAP[$21]; //@line 656 "pyexpat.c"
        var $23=((($22))|0)!=0; //@line 656 "pyexpat.c"
        if ($23) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 656 "pyexpat.c"
      case 3: // $bb2
        var $24=HEAP[$value_addr]; //@line 656 "pyexpat.c"
        var $25=HEAP[$value_length_addr]; //@line 656 "pyexpat.c"
        var $26=_conv_string_len_to_unicode($24, $25); //@line 656 "pyexpat.c"
        HEAP[$iftmp_46]=$26; //@line 656 "pyexpat.c"
        __label__ = 5; break; //@line 656 "pyexpat.c"
      case 4: // $bb3
        var $27=HEAP[$value_addr]; //@line 656 "pyexpat.c"
        var $28=HEAP[$value_length_addr]; //@line 656 "pyexpat.c"
        var $29=_conv_string_len_to_utf8($27, $28); //@line 656 "pyexpat.c"
        HEAP[$iftmp_46]=$29; //@line 656 "pyexpat.c"
        __label__ = 5; break; //@line 656 "pyexpat.c"
      case 5: // $bb4
        var $30=HEAP[$self]; //@line 656 "pyexpat.c"
        var $31=HEAP[$entityName_addr]; //@line 656 "pyexpat.c"
        var $32=_string_intern($30, $31); //@line 656 "pyexpat.c"
        var $33=HEAP[$is_parameter_entity_addr]; //@line 656 "pyexpat.c"
        var $34=HEAP[$iftmp_46]; //@line 656 "pyexpat.c"
        var $35=_Py_BuildValue(((__str16)&4294967295), $32, $33, $34, $19, $16, $13, $10); //@line 656 "pyexpat.c"
        HEAP[$args]=$35; //@line 656 "pyexpat.c"
        var $36=HEAP[$args]; //@line 656 "pyexpat.c"
        var $37=($36)==0; //@line 656 "pyexpat.c"
        if ($37) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 656 "pyexpat.c"
      case 6: // $bb5
        var $38=HEAP[$self]; //@line 656 "pyexpat.c"
        _flag_error($38); //@line 656 "pyexpat.c"
        __label__ = 14; break; //@line 656 "pyexpat.c"
      case 7: // $bb6
        var $39=HEAP[$self]; //@line 656 "pyexpat.c"
        var $40=(($39+24)&4294967295); //@line 656 "pyexpat.c"
        HEAP[$40]=1; //@line 656 "pyexpat.c"
        var $41=HEAP[$self]; //@line 656 "pyexpat.c"
        var $42=(($41+48)&4294967295); //@line 656 "pyexpat.c"
        var $43=HEAP[$42]; //@line 656 "pyexpat.c"
        var $44=(($43+68)&4294967295); //@line 656 "pyexpat.c"
        var $45=HEAP[$44]; //@line 656 "pyexpat.c"
        var $46=_getcode(17, ((__str17)&4294967295), 673); //@line 656 "pyexpat.c"
        var $47=HEAP[$args]; //@line 656 "pyexpat.c"
        var $48=HEAP[$self]; //@line 656 "pyexpat.c"
        var $49=_call_with_frame($46, $45, $47, $48); //@line 656 "pyexpat.c"
        HEAP[$rv]=$49; //@line 656 "pyexpat.c"
        var $50=HEAP[$self]; //@line 656 "pyexpat.c"
        var $51=(($50+24)&4294967295); //@line 656 "pyexpat.c"
        HEAP[$51]=0; //@line 656 "pyexpat.c"
        var $52=HEAP[$args]; //@line 656 "pyexpat.c"
        var $53=(($52)&4294967295); //@line 656 "pyexpat.c"
        var $54=HEAP[$53]; //@line 656 "pyexpat.c"
        var $55=((($54) - 1)&4294967295); //@line 656 "pyexpat.c"
        var $56=HEAP[$args]; //@line 656 "pyexpat.c"
        var $57=(($56)&4294967295); //@line 656 "pyexpat.c"
        HEAP[$57]=$55; //@line 656 "pyexpat.c"
        var $58=HEAP[$args]; //@line 656 "pyexpat.c"
        var $59=(($58)&4294967295); //@line 656 "pyexpat.c"
        var $60=HEAP[$59]; //@line 656 "pyexpat.c"
        var $61=((($60))|0)==0; //@line 656 "pyexpat.c"
        if ($61) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 656 "pyexpat.c"
      case 8: // $bb7
        var $62=HEAP[$args]; //@line 656 "pyexpat.c"
        var $63=(($62+4)&4294967295); //@line 656 "pyexpat.c"
        var $64=HEAP[$63]; //@line 656 "pyexpat.c"
        var $65=(($64+24)&4294967295); //@line 656 "pyexpat.c"
        var $66=HEAP[$65]; //@line 656 "pyexpat.c"
        var $67=HEAP[$args]; //@line 656 "pyexpat.c"
        FUNCTION_TABLE[$66]($67); //@line 656 "pyexpat.c"
        __label__ = 9; break; //@line 656 "pyexpat.c"
      case 9: // $bb8
        var $68=HEAP[$rv]; //@line 656 "pyexpat.c"
        var $69=($68)==0; //@line 656 "pyexpat.c"
        if ($69) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 656 "pyexpat.c"
      case 10: // $bb9
        var $70=HEAP[$self]; //@line 656 "pyexpat.c"
        _flag_error($70); //@line 656 "pyexpat.c"
        __label__ = 14; break; //@line 656 "pyexpat.c"
      case 11: // $bb10
        var $71=HEAP[$rv]; //@line 656 "pyexpat.c"
        var $72=(($71)&4294967295); //@line 656 "pyexpat.c"
        var $73=HEAP[$72]; //@line 656 "pyexpat.c"
        var $74=((($73) - 1)&4294967295); //@line 656 "pyexpat.c"
        var $75=HEAP[$rv]; //@line 656 "pyexpat.c"
        var $76=(($75)&4294967295); //@line 656 "pyexpat.c"
        HEAP[$76]=$74; //@line 656 "pyexpat.c"
        var $77=HEAP[$rv]; //@line 656 "pyexpat.c"
        var $78=(($77)&4294967295); //@line 656 "pyexpat.c"
        var $79=HEAP[$78]; //@line 656 "pyexpat.c"
        var $80=((($79))|0)==0; //@line 656 "pyexpat.c"
        if ($80) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 656 "pyexpat.c"
      case 12: // $bb11
        var $81=HEAP[$rv]; //@line 656 "pyexpat.c"
        var $82=(($81+4)&4294967295); //@line 656 "pyexpat.c"
        var $83=HEAP[$82]; //@line 656 "pyexpat.c"
        var $84=(($83+24)&4294967295); //@line 656 "pyexpat.c"
        var $85=HEAP[$84]; //@line 656 "pyexpat.c"
        var $86=HEAP[$rv]; //@line 656 "pyexpat.c"
        FUNCTION_TABLE[$85]($86); //@line 656 "pyexpat.c"
        __label__ = 13; break; //@line 656 "pyexpat.c"
      case 13: // $bb12
        __label__ = 14; break; //@line 656 "pyexpat.c"
      case 14: // $bb13
        __label__ = 15; break; //@line 656 "pyexpat.c"
      case 15: // $return
        STACKTOP = __stackBase__;
        return; //@line 656 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_XmlDeclHandler($userData, $version, $encoding, $standalone) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr=__stackBase__;
        var $version_addr=__stackBase__+4;
        var $encoding_addr=__stackBase__+8;
        var $standalone_addr=__stackBase__+12;
        var $iftmp_48=__stackBase__+16;
        var $iftmp_47=__stackBase__+20;
        var $self=__stackBase__+24;
        var $args=__stackBase__+28;
        var $rv=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$userData_addr]=$userData;
        HEAP[$version_addr]=$version;
        HEAP[$encoding_addr]=$encoding;
        HEAP[$standalone_addr]=$standalone;
        var $0=HEAP[$userData_addr]; //@line 676 "pyexpat.c"
        var $1=$0; //@line 676 "pyexpat.c"
        HEAP[$self]=$1; //@line 676 "pyexpat.c"
        HEAP[$args]=0; //@line 676 "pyexpat.c"
        HEAP[$rv]=0; //@line 676 "pyexpat.c"
        var $2=HEAP[$self]; //@line 676 "pyexpat.c"
        var $3=_have_handler($2, 18); //@line 676 "pyexpat.c"
        var $4=((($3))|0)!=0; //@line 676 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 16; break; } //@line 676 "pyexpat.c"
      case 1: // $bb
        var $5=HEAP[$self]; //@line 676 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 676 "pyexpat.c"
        var $7=((($6))|0) < 0; //@line 676 "pyexpat.c"
        if ($7) { __label__ = 17; break; } else { __label__ = 2; break; } //@line 676 "pyexpat.c"
      case 2: // $bb1
        var $8=HEAP[$self]; //@line 676 "pyexpat.c"
        var $9=(($8+12)&4294967295); //@line 676 "pyexpat.c"
        var $10=HEAP[$9]; //@line 676 "pyexpat.c"
        var $11=((($10))|0)!=0; //@line 676 "pyexpat.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 676 "pyexpat.c"
      case 3: // $bb2
        HEAP[$iftmp_47]=(FUNCTION_TABLE_OFFSET + 4); //@line 676 "pyexpat.c"
        __label__ = 5; break; //@line 676 "pyexpat.c"
      case 4: // $bb3
        HEAP[$iftmp_47]=(FUNCTION_TABLE_OFFSET + 6); //@line 676 "pyexpat.c"
        __label__ = 5; break; //@line 676 "pyexpat.c"
      case 5: // $bb4
        var $12=HEAP[$self]; //@line 676 "pyexpat.c"
        var $13=(($12+12)&4294967295); //@line 676 "pyexpat.c"
        var $14=HEAP[$13]; //@line 676 "pyexpat.c"
        var $15=((($14))|0)!=0; //@line 676 "pyexpat.c"
        if ($15) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 676 "pyexpat.c"
      case 6: // $bb5
        HEAP[$iftmp_48]=(FUNCTION_TABLE_OFFSET + 4); //@line 676 "pyexpat.c"
        __label__ = 8; break; //@line 676 "pyexpat.c"
      case 7: // $bb6
        HEAP[$iftmp_48]=(FUNCTION_TABLE_OFFSET + 6); //@line 676 "pyexpat.c"
        __label__ = 8; break; //@line 676 "pyexpat.c"
      case 8: // $bb7
        var $16=HEAP[$iftmp_48]; //@line 676 "pyexpat.c"
        var $17=HEAP[$version_addr]; //@line 676 "pyexpat.c"
        var $18=HEAP[$iftmp_47]; //@line 676 "pyexpat.c"
        var $19=HEAP[$encoding_addr]; //@line 676 "pyexpat.c"
        var $20=HEAP[$standalone_addr]; //@line 676 "pyexpat.c"
        var $21=_Py_BuildValue(((__str18)&4294967295), $16, $17, $18, $19, $20); //@line 676 "pyexpat.c"
        HEAP[$args]=$21; //@line 676 "pyexpat.c"
        var $22=HEAP[$args]; //@line 676 "pyexpat.c"
        var $23=($22)==0; //@line 676 "pyexpat.c"
        if ($23) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 676 "pyexpat.c"
      case 9: // $bb8
        var $24=HEAP[$self]; //@line 676 "pyexpat.c"
        _flag_error($24); //@line 676 "pyexpat.c"
        __label__ = 17; break; //@line 676 "pyexpat.c"
      case 10: // $bb9
        var $25=HEAP[$self]; //@line 676 "pyexpat.c"
        var $26=(($25+24)&4294967295); //@line 676 "pyexpat.c"
        HEAP[$26]=1; //@line 676 "pyexpat.c"
        var $27=HEAP[$self]; //@line 676 "pyexpat.c"
        var $28=(($27+48)&4294967295); //@line 676 "pyexpat.c"
        var $29=HEAP[$28]; //@line 676 "pyexpat.c"
        var $30=(($29+72)&4294967295); //@line 676 "pyexpat.c"
        var $31=HEAP[$30]; //@line 676 "pyexpat.c"
        var $32=_getcode(18, ((__str19)&4294967295), 683); //@line 676 "pyexpat.c"
        var $33=HEAP[$args]; //@line 676 "pyexpat.c"
        var $34=HEAP[$self]; //@line 676 "pyexpat.c"
        var $35=_call_with_frame($32, $31, $33, $34); //@line 676 "pyexpat.c"
        HEAP[$rv]=$35; //@line 676 "pyexpat.c"
        var $36=HEAP[$self]; //@line 676 "pyexpat.c"
        var $37=(($36+24)&4294967295); //@line 676 "pyexpat.c"
        HEAP[$37]=0; //@line 676 "pyexpat.c"
        var $38=HEAP[$args]; //@line 676 "pyexpat.c"
        var $39=(($38)&4294967295); //@line 676 "pyexpat.c"
        var $40=HEAP[$39]; //@line 676 "pyexpat.c"
        var $41=((($40) - 1)&4294967295); //@line 676 "pyexpat.c"
        var $42=HEAP[$args]; //@line 676 "pyexpat.c"
        var $43=(($42)&4294967295); //@line 676 "pyexpat.c"
        HEAP[$43]=$41; //@line 676 "pyexpat.c"
        var $44=HEAP[$args]; //@line 676 "pyexpat.c"
        var $45=(($44)&4294967295); //@line 676 "pyexpat.c"
        var $46=HEAP[$45]; //@line 676 "pyexpat.c"
        var $47=((($46))|0)==0; //@line 676 "pyexpat.c"
        if ($47) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 676 "pyexpat.c"
      case 11: // $bb10
        var $48=HEAP[$args]; //@line 676 "pyexpat.c"
        var $49=(($48+4)&4294967295); //@line 676 "pyexpat.c"
        var $50=HEAP[$49]; //@line 676 "pyexpat.c"
        var $51=(($50+24)&4294967295); //@line 676 "pyexpat.c"
        var $52=HEAP[$51]; //@line 676 "pyexpat.c"
        var $53=HEAP[$args]; //@line 676 "pyexpat.c"
        FUNCTION_TABLE[$52]($53); //@line 676 "pyexpat.c"
        __label__ = 12; break; //@line 676 "pyexpat.c"
      case 12: // $bb11
        var $54=HEAP[$rv]; //@line 676 "pyexpat.c"
        var $55=($54)==0; //@line 676 "pyexpat.c"
        if ($55) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 676 "pyexpat.c"
      case 13: // $bb12
        var $56=HEAP[$self]; //@line 676 "pyexpat.c"
        _flag_error($56); //@line 676 "pyexpat.c"
        __label__ = 17; break; //@line 676 "pyexpat.c"
      case 14: // $bb13
        var $57=HEAP[$rv]; //@line 676 "pyexpat.c"
        var $58=(($57)&4294967295); //@line 676 "pyexpat.c"
        var $59=HEAP[$58]; //@line 676 "pyexpat.c"
        var $60=((($59) - 1)&4294967295); //@line 676 "pyexpat.c"
        var $61=HEAP[$rv]; //@line 676 "pyexpat.c"
        var $62=(($61)&4294967295); //@line 676 "pyexpat.c"
        HEAP[$62]=$60; //@line 676 "pyexpat.c"
        var $63=HEAP[$rv]; //@line 676 "pyexpat.c"
        var $64=(($63)&4294967295); //@line 676 "pyexpat.c"
        var $65=HEAP[$64]; //@line 676 "pyexpat.c"
        var $66=((($65))|0)==0; //@line 676 "pyexpat.c"
        if ($66) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 676 "pyexpat.c"
      case 15: // $bb14
        var $67=HEAP[$rv]; //@line 676 "pyexpat.c"
        var $68=(($67+4)&4294967295); //@line 676 "pyexpat.c"
        var $69=HEAP[$68]; //@line 676 "pyexpat.c"
        var $70=(($69+24)&4294967295); //@line 676 "pyexpat.c"
        var $71=HEAP[$70]; //@line 676 "pyexpat.c"
        var $72=HEAP[$rv]; //@line 676 "pyexpat.c"
        FUNCTION_TABLE[$71]($72); //@line 676 "pyexpat.c"
        __label__ = 16; break; //@line 676 "pyexpat.c"
      case 16: // $bb15
        __label__ = 17; break; //@line 676 "pyexpat.c"
      case 17: // $bb16
        __label__ = 18; break; //@line 676 "pyexpat.c"
      case 18: // $return
        STACKTOP = __stackBase__;
        return; //@line 676 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _conv_content_model($model, $conv_string) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $model_addr=__stackBase__;
        var $conv_string_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $result=__stackBase__+16;
        var $children=__stackBase__+20;
        var $i=__stackBase__+24;
        var $child=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$model_addr]=$model;
        HEAP[$conv_string_addr]=$conv_string;
        HEAP[$result]=0; //@line 689 "pyexpat.c"
        var $1=HEAP[$model_addr]; //@line 690 "pyexpat.c"
        var $2=(($1+12)&4294967295); //@line 690 "pyexpat.c"
        var $3=HEAP[$2]; //@line 690 "pyexpat.c"
        var $4=_PyTuple_New($3); //@line 690 "pyexpat.c"
        HEAP[$children]=$4; //@line 690 "pyexpat.c"
        var $5=HEAP[$children]; //@line 693 "pyexpat.c"
        var $6=($5)!=0; //@line 693 "pyexpat.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 12; break; } //@line 693 "pyexpat.c"
      case 1: // $bb
        var $7=HEAP[$model_addr]; //@line 694 "pyexpat.c"
        var $8=(($7+12)&4294967295); //@line 694 "pyexpat.c"
        var $9=HEAP[$8]; //@line 694 "pyexpat.c"
        var $10=((($9))>>>0) > 2147483646; //@line 694 "pyexpat.c"
        if ($10) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 694 "pyexpat.c"
      case 2: // $bb1
        ___assert_fail(((__str20)&4294967295), ((__str6)&4294967295), 694, ((___PRETTY_FUNCTION___9748)&4294967295)); //@line 694 "pyexpat.c"
        throw "Reached an unreachable! Original .ll line: 3485"; //@line 694 "pyexpat.c"
      case 3: // $bb2
        HEAP[$i]=0; //@line 695 "pyexpat.c"
        __label__ = 10; break; //@line 695 "pyexpat.c"
      case 4: // $bb3
        var $11=HEAP[$model_addr]; //@line 697 "pyexpat.c"
        var $12=(($11+16)&4294967295); //@line 697 "pyexpat.c"
        var $13=HEAP[$12]; //@line 697 "pyexpat.c"
        var $14=HEAP[$i]; //@line 697 "pyexpat.c"
        var $15=(($13+20*$14)&4294967295); //@line 697 "pyexpat.c"
        var $16=HEAP[$conv_string_addr]; //@line 697 "pyexpat.c"
        var $17=_conv_content_model($15, $16); //@line 697 "pyexpat.c"
        HEAP[$child]=$17; //@line 697 "pyexpat.c"
        var $18=HEAP[$child]; //@line 698 "pyexpat.c"
        var $19=($18)==0; //@line 698 "pyexpat.c"
        if ($19) { __label__ = 5; break; } else { __label__ = 9; break; } //@line 698 "pyexpat.c"
      case 5: // $bb4
        var $20=HEAP[$children]; //@line 699 "pyexpat.c"
        var $21=($20)!=0; //@line 699 "pyexpat.c"
        if ($21) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 699 "pyexpat.c"
      case 6: // $bb5
        var $22=HEAP[$children]; //@line 699 "pyexpat.c"
        var $23=(($22)&4294967295); //@line 699 "pyexpat.c"
        var $24=HEAP[$23]; //@line 699 "pyexpat.c"
        var $25=((($24) - 1)&4294967295); //@line 699 "pyexpat.c"
        var $26=HEAP[$children]; //@line 699 "pyexpat.c"
        var $27=(($26)&4294967295); //@line 699 "pyexpat.c"
        HEAP[$27]=$25; //@line 699 "pyexpat.c"
        var $28=HEAP[$children]; //@line 699 "pyexpat.c"
        var $29=(($28)&4294967295); //@line 699 "pyexpat.c"
        var $30=HEAP[$29]; //@line 699 "pyexpat.c"
        var $31=((($30))|0)==0; //@line 699 "pyexpat.c"
        if ($31) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 699 "pyexpat.c"
      case 7: // $bb6
        var $32=HEAP[$children]; //@line 699 "pyexpat.c"
        var $33=(($32+4)&4294967295); //@line 699 "pyexpat.c"
        var $34=HEAP[$33]; //@line 699 "pyexpat.c"
        var $35=(($34+24)&4294967295); //@line 699 "pyexpat.c"
        var $36=HEAP[$35]; //@line 699 "pyexpat.c"
        var $37=HEAP[$children]; //@line 699 "pyexpat.c"
        FUNCTION_TABLE[$36]($37); //@line 699 "pyexpat.c"
        __label__ = 8; break; //@line 699 "pyexpat.c"
      case 8: // $bb7
        HEAP[$0]=0; //@line 700 "pyexpat.c"
        __label__ = 13; break; //@line 700 "pyexpat.c"
      case 9: // $bb8
        var $38=HEAP[$children]; //@line 702 "pyexpat.c"
        var $39=$38; //@line 702 "pyexpat.c"
        var $40=HEAP[$i]; //@line 702 "pyexpat.c"
        var $41=(($39+12)&4294967295); //@line 702 "pyexpat.c"
        var $42=(($41+$40*4)&4294967295); //@line 702 "pyexpat.c"
        var $43=HEAP[$child]; //@line 702 "pyexpat.c"
        HEAP[$42]=$43; //@line 702 "pyexpat.c"
        var $44=HEAP[$i]; //@line 695 "pyexpat.c"
        var $45=((($44) + 1)&4294967295); //@line 695 "pyexpat.c"
        HEAP[$i]=$45; //@line 695 "pyexpat.c"
        __label__ = 10; break; //@line 695 "pyexpat.c"
      case 10: // $bb9
        var $46=HEAP[$model_addr]; //@line 695 "pyexpat.c"
        var $47=(($46+12)&4294967295); //@line 695 "pyexpat.c"
        var $48=HEAP[$47]; //@line 695 "pyexpat.c"
        var $49=HEAP[$i]; //@line 695 "pyexpat.c"
        var $50=((($48))|0) > ((($49))|0); //@line 695 "pyexpat.c"
        if ($50) { __label__ = 4; break; } else { __label__ = 11; break; } //@line 695 "pyexpat.c"
      case 11: // $bb10
        var $51=HEAP[$model_addr]; //@line 704 "pyexpat.c"
        var $52=(($51+8)&4294967295); //@line 704 "pyexpat.c"
        var $53=HEAP[$52]; //@line 704 "pyexpat.c"
        var $54=HEAP[$model_addr]; //@line 704 "pyexpat.c"
        var $55=(($54+4)&4294967295); //@line 704 "pyexpat.c"
        var $56=HEAP[$55]; //@line 704 "pyexpat.c"
        var $57=HEAP[$model_addr]; //@line 704 "pyexpat.c"
        var $58=(($57)&4294967295); //@line 704 "pyexpat.c"
        var $59=HEAP[$58]; //@line 704 "pyexpat.c"
        var $60=HEAP[$conv_string_addr]; //@line 704 "pyexpat.c"
        var $61=HEAP[$children]; //@line 704 "pyexpat.c"
        var $62=_Py_BuildValue(((__str21)&4294967295), $59, $56, $60, $53, $61); //@line 704 "pyexpat.c"
        HEAP[$result]=$62; //@line 704 "pyexpat.c"
        __label__ = 12; break; //@line 704 "pyexpat.c"
      case 12: // $bb11
        var $63=HEAP[$result]; //@line 708 "pyexpat.c"
        HEAP[$0]=$63; //@line 708 "pyexpat.c"
        __label__ = 13; break; //@line 708 "pyexpat.c"
      case 13: // $bb12
        var $64=HEAP[$0]; //@line 700 "pyexpat.c"
        HEAP[$retval]=$64; //@line 700 "pyexpat.c"
        __label__ = 14; break; //@line 700 "pyexpat.c"
      case 14: // $return
        var $retval13=HEAP[$retval]; //@line 700 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 700 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_ElementDeclHandler($userData, $name, $model) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr=__stackBase__;
        var $name_addr=__stackBase__+4;
        var $model_addr=__stackBase__+8;
        var $iftmp_51=__stackBase__+12;
        var $self=__stackBase__+16;
        var $args=__stackBase__+20;
        var $rv=__stackBase__+24;
        var $modelobj=__stackBase__+28;
        var $nameobj=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$userData_addr]=$userData;
        HEAP[$name_addr]=$name;
        HEAP[$model_addr]=$model;
        var $0=HEAP[$userData_addr]; //@line 716 "pyexpat.c"
        var $1=$0; //@line 716 "pyexpat.c"
        HEAP[$self]=$1; //@line 716 "pyexpat.c"
        HEAP[$args]=0; //@line 717 "pyexpat.c"
        var $2=HEAP[$self]; //@line 719 "pyexpat.c"
        var $3=_have_handler($2, 19); //@line 719 "pyexpat.c"
        var $4=((($3))|0)!=0; //@line 719 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 19; break; } //@line 719 "pyexpat.c"
      case 1: // $bb
        HEAP[$rv]=0; //@line 720 "pyexpat.c"
        var $5=HEAP[$self]; //@line 723 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 723 "pyexpat.c"
        var $7=((($6))|0) < 0; //@line 723 "pyexpat.c"
        if ($7) { __label__ = 19; break; } else { __label__ = 2; break; } //@line 723 "pyexpat.c"
      case 2: // $bb1
        var $8=HEAP[$self]; //@line 726 "pyexpat.c"
        var $9=(($8+12)&4294967295); //@line 726 "pyexpat.c"
        var $10=HEAP[$9]; //@line 726 "pyexpat.c"
        var $11=((($10))|0)!=0; //@line 726 "pyexpat.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 726 "pyexpat.c"
      case 3: // $bb2
        HEAP[$iftmp_51]=(FUNCTION_TABLE_OFFSET + 4); //@line 726 "pyexpat.c"
        __label__ = 5; break; //@line 726 "pyexpat.c"
      case 4: // $bb3
        HEAP[$iftmp_51]=(FUNCTION_TABLE_OFFSET + 6); //@line 726 "pyexpat.c"
        __label__ = 5; break; //@line 726 "pyexpat.c"
      case 5: // $bb4
        var $12=HEAP[$model_addr]; //@line 726 "pyexpat.c"
        var $13=HEAP[$iftmp_51]; //@line 726 "pyexpat.c"
        var $14=_conv_content_model($12, $13); //@line 726 "pyexpat.c"
        HEAP[$modelobj]=$14; //@line 726 "pyexpat.c"
        var $15=HEAP[$modelobj]; //@line 733 "pyexpat.c"
        var $16=($15)==0; //@line 733 "pyexpat.c"
        if ($16) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 733 "pyexpat.c"
      case 6: // $bb5
        var $17=HEAP[$self]; //@line 734 "pyexpat.c"
        _flag_error($17); //@line 734 "pyexpat.c"
        __label__ = 19; break; //@line 734 "pyexpat.c"
      case 7: // $bb6
        var $18=HEAP[$self]; //@line 737 "pyexpat.c"
        var $19=HEAP[$name_addr]; //@line 737 "pyexpat.c"
        var $20=_string_intern($18, $19); //@line 737 "pyexpat.c"
        HEAP[$nameobj]=$20; //@line 737 "pyexpat.c"
        var $21=HEAP[$nameobj]; //@line 738 "pyexpat.c"
        var $22=($21)==0; //@line 738 "pyexpat.c"
        if ($22) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 738 "pyexpat.c"
      case 8: // $bb7
        var $23=HEAP[$modelobj]; //@line 739 "pyexpat.c"
        var $24=(($23)&4294967295); //@line 739 "pyexpat.c"
        var $25=HEAP[$24]; //@line 739 "pyexpat.c"
        var $26=((($25) - 1)&4294967295); //@line 739 "pyexpat.c"
        var $27=HEAP[$modelobj]; //@line 739 "pyexpat.c"
        var $28=(($27)&4294967295); //@line 739 "pyexpat.c"
        HEAP[$28]=$26; //@line 739 "pyexpat.c"
        var $29=HEAP[$modelobj]; //@line 739 "pyexpat.c"
        var $30=(($29)&4294967295); //@line 739 "pyexpat.c"
        var $31=HEAP[$30]; //@line 739 "pyexpat.c"
        var $32=((($31))|0)==0; //@line 739 "pyexpat.c"
        if ($32) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 739 "pyexpat.c"
      case 9: // $bb8
        var $33=HEAP[$modelobj]; //@line 739 "pyexpat.c"
        var $34=(($33+4)&4294967295); //@line 739 "pyexpat.c"
        var $35=HEAP[$34]; //@line 739 "pyexpat.c"
        var $36=(($35+24)&4294967295); //@line 739 "pyexpat.c"
        var $37=HEAP[$36]; //@line 739 "pyexpat.c"
        var $38=HEAP[$modelobj]; //@line 739 "pyexpat.c"
        FUNCTION_TABLE[$37]($38); //@line 739 "pyexpat.c"
        __label__ = 10; break; //@line 739 "pyexpat.c"
      case 10: // $bb9
        var $39=HEAP[$self]; //@line 740 "pyexpat.c"
        _flag_error($39); //@line 740 "pyexpat.c"
        __label__ = 19; break; //@line 740 "pyexpat.c"
      case 11: // $bb10
        var $40=HEAP[$nameobj]; //@line 743 "pyexpat.c"
        var $41=HEAP[$modelobj]; //@line 743 "pyexpat.c"
        var $42=_Py_BuildValue(((__str22)&4294967295), $40, $41); //@line 743 "pyexpat.c"
        HEAP[$args]=$42; //@line 743 "pyexpat.c"
        var $43=HEAP[$args]; //@line 744 "pyexpat.c"
        var $44=($43)==0; //@line 744 "pyexpat.c"
        if ($44) { __label__ = 12; break; } else { __label__ = 15; break; } //@line 744 "pyexpat.c"
      case 12: // $bb11
        var $45=HEAP[$modelobj]; //@line 745 "pyexpat.c"
        var $46=(($45)&4294967295); //@line 745 "pyexpat.c"
        var $47=HEAP[$46]; //@line 745 "pyexpat.c"
        var $48=((($47) - 1)&4294967295); //@line 745 "pyexpat.c"
        var $49=HEAP[$modelobj]; //@line 745 "pyexpat.c"
        var $50=(($49)&4294967295); //@line 745 "pyexpat.c"
        HEAP[$50]=$48; //@line 745 "pyexpat.c"
        var $51=HEAP[$modelobj]; //@line 745 "pyexpat.c"
        var $52=(($51)&4294967295); //@line 745 "pyexpat.c"
        var $53=HEAP[$52]; //@line 745 "pyexpat.c"
        var $54=((($53))|0)==0; //@line 745 "pyexpat.c"
        if ($54) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 745 "pyexpat.c"
      case 13: // $bb12
        var $55=HEAP[$modelobj]; //@line 745 "pyexpat.c"
        var $56=(($55+4)&4294967295); //@line 745 "pyexpat.c"
        var $57=HEAP[$56]; //@line 745 "pyexpat.c"
        var $58=(($57+24)&4294967295); //@line 745 "pyexpat.c"
        var $59=HEAP[$58]; //@line 745 "pyexpat.c"
        var $60=HEAP[$modelobj]; //@line 745 "pyexpat.c"
        FUNCTION_TABLE[$59]($60); //@line 745 "pyexpat.c"
        __label__ = 14; break; //@line 745 "pyexpat.c"
      case 14: // $bb13
        var $61=HEAP[$self]; //@line 746 "pyexpat.c"
        _flag_error($61); //@line 746 "pyexpat.c"
        __label__ = 19; break; //@line 746 "pyexpat.c"
      case 15: // $bb14
        var $62=HEAP[$self]; //@line 749 "pyexpat.c"
        var $63=(($62+24)&4294967295); //@line 749 "pyexpat.c"
        HEAP[$63]=1; //@line 749 "pyexpat.c"
        var $64=HEAP[$self]; //@line 750 "pyexpat.c"
        var $65=(($64+48)&4294967295); //@line 750 "pyexpat.c"
        var $66=HEAP[$65]; //@line 750 "pyexpat.c"
        var $67=(($66+76)&4294967295); //@line 750 "pyexpat.c"
        var $68=HEAP[$67]; //@line 750 "pyexpat.c"
        var $69=_getcode(19, ((__str23)&4294967295), 750); //@line 750 "pyexpat.c"
        var $70=HEAP[$args]; //@line 750 "pyexpat.c"
        var $71=HEAP[$self]; //@line 750 "pyexpat.c"
        var $72=_call_with_frame($69, $68, $70, $71); //@line 750 "pyexpat.c"
        HEAP[$rv]=$72; //@line 750 "pyexpat.c"
        var $73=HEAP[$self]; //@line 752 "pyexpat.c"
        var $74=(($73+24)&4294967295); //@line 752 "pyexpat.c"
        HEAP[$74]=0; //@line 752 "pyexpat.c"
        var $75=HEAP[$rv]; //@line 753 "pyexpat.c"
        var $76=($75)==0; //@line 753 "pyexpat.c"
        if ($76) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 753 "pyexpat.c"
      case 16: // $bb15
        var $77=HEAP[$self]; //@line 754 "pyexpat.c"
        _flag_error($77); //@line 754 "pyexpat.c"
        __label__ = 19; break; //@line 754 "pyexpat.c"
      case 17: // $bb16
        var $78=HEAP[$rv]; //@line 757 "pyexpat.c"
        var $79=(($78)&4294967295); //@line 757 "pyexpat.c"
        var $80=HEAP[$79]; //@line 757 "pyexpat.c"
        var $81=((($80) - 1)&4294967295); //@line 757 "pyexpat.c"
        var $82=HEAP[$rv]; //@line 757 "pyexpat.c"
        var $83=(($82)&4294967295); //@line 757 "pyexpat.c"
        HEAP[$83]=$81; //@line 757 "pyexpat.c"
        var $84=HEAP[$rv]; //@line 757 "pyexpat.c"
        var $85=(($84)&4294967295); //@line 757 "pyexpat.c"
        var $86=HEAP[$85]; //@line 757 "pyexpat.c"
        var $87=((($86))|0)==0; //@line 757 "pyexpat.c"
        if ($87) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 757 "pyexpat.c"
      case 18: // $bb17
        var $88=HEAP[$rv]; //@line 757 "pyexpat.c"
        var $89=(($88+4)&4294967295); //@line 757 "pyexpat.c"
        var $90=HEAP[$89]; //@line 757 "pyexpat.c"
        var $91=(($90+24)&4294967295); //@line 757 "pyexpat.c"
        var $92=HEAP[$91]; //@line 757 "pyexpat.c"
        var $93=HEAP[$rv]; //@line 757 "pyexpat.c"
        FUNCTION_TABLE[$92]($93); //@line 757 "pyexpat.c"
        __label__ = 19; break; //@line 759 "pyexpat.c"
      case 19: // $finally
        var $94=HEAP[$args]; //@line 760 "pyexpat.c"
        var $95=($94)!=0; //@line 760 "pyexpat.c"
        if ($95) { __label__ = 20; break; } else { __label__ = 22; break; } //@line 760 "pyexpat.c"
      case 20: // $bb18
        var $96=HEAP[$args]; //@line 760 "pyexpat.c"
        var $97=(($96)&4294967295); //@line 760 "pyexpat.c"
        var $98=HEAP[$97]; //@line 760 "pyexpat.c"
        var $99=((($98) - 1)&4294967295); //@line 760 "pyexpat.c"
        var $100=HEAP[$args]; //@line 760 "pyexpat.c"
        var $101=(($100)&4294967295); //@line 760 "pyexpat.c"
        HEAP[$101]=$99; //@line 760 "pyexpat.c"
        var $102=HEAP[$args]; //@line 760 "pyexpat.c"
        var $103=(($102)&4294967295); //@line 760 "pyexpat.c"
        var $104=HEAP[$103]; //@line 760 "pyexpat.c"
        var $105=((($104))|0)==0; //@line 760 "pyexpat.c"
        if ($105) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 760 "pyexpat.c"
      case 21: // $bb19
        var $106=HEAP[$args]; //@line 760 "pyexpat.c"
        var $107=(($106+4)&4294967295); //@line 760 "pyexpat.c"
        var $108=HEAP[$107]; //@line 760 "pyexpat.c"
        var $109=(($108+24)&4294967295); //@line 760 "pyexpat.c"
        var $110=HEAP[$109]; //@line 760 "pyexpat.c"
        var $111=HEAP[$args]; //@line 760 "pyexpat.c"
        FUNCTION_TABLE[$110]($111); //@line 760 "pyexpat.c"
        __label__ = 22; break; //@line 760 "pyexpat.c"
      case 22: // $bb20
        var $112=HEAP[$self]; //@line 761 "pyexpat.c"
        var $113=(($112+8)&4294967295); //@line 761 "pyexpat.c"
        var $114=HEAP[$113]; //@line 761 "pyexpat.c"
        var $115=HEAP[$model_addr]; //@line 761 "pyexpat.c"
        _XML_FreeContentModel($114, $115); //@line 761 "pyexpat.c"
        __label__ = 23; break; //@line 762 "pyexpat.c"
      case 23: // $return
        STACKTOP = __stackBase__;
        return; //@line 762 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_AttlistDeclHandler($userData, $elname, $attname, $att_type, $dflt, $isrequired) {
    var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 44);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr=__stackBase__;
        var $elname_addr=__stackBase__+4;
        var $attname_addr=__stackBase__+8;
        var $att_type_addr=__stackBase__+12;
        var $dflt_addr=__stackBase__+16;
        var $isrequired_addr=__stackBase__+20;
        var $iftmp_53=__stackBase__+24;
        var $iftmp_52=__stackBase__+28;
        var $self=__stackBase__+32;
        var $args=__stackBase__+36;
        var $rv=__stackBase__+40;
        var $_alloca_point_=0;
        HEAP[$userData_addr]=$userData;
        HEAP[$elname_addr]=$elname;
        HEAP[$attname_addr]=$attname;
        HEAP[$att_type_addr]=$att_type;
        HEAP[$dflt_addr]=$dflt;
        HEAP[$isrequired_addr]=$isrequired;
        var $0=HEAP[$userData_addr]; //@line 765 "pyexpat.c"
        var $1=$0; //@line 765 "pyexpat.c"
        HEAP[$self]=$1; //@line 765 "pyexpat.c"
        HEAP[$args]=0; //@line 765 "pyexpat.c"
        HEAP[$rv]=0; //@line 765 "pyexpat.c"
        var $2=HEAP[$self]; //@line 765 "pyexpat.c"
        var $3=_have_handler($2, 20); //@line 765 "pyexpat.c"
        var $4=((($3))|0)!=0; //@line 765 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 16; break; } //@line 765 "pyexpat.c"
      case 1: // $bb
        var $5=HEAP[$self]; //@line 765 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 765 "pyexpat.c"
        var $7=((($6))|0) < 0; //@line 765 "pyexpat.c"
        if ($7) { __label__ = 17; break; } else { __label__ = 2; break; } //@line 765 "pyexpat.c"
      case 2: // $bb1
        var $8=HEAP[$self]; //@line 765 "pyexpat.c"
        var $9=(($8+12)&4294967295); //@line 765 "pyexpat.c"
        var $10=HEAP[$9]; //@line 765 "pyexpat.c"
        var $11=((($10))|0)!=0; //@line 765 "pyexpat.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 765 "pyexpat.c"
      case 3: // $bb2
        HEAP[$iftmp_52]=(FUNCTION_TABLE_OFFSET + 4); //@line 765 "pyexpat.c"
        __label__ = 5; break; //@line 765 "pyexpat.c"
      case 4: // $bb3
        HEAP[$iftmp_52]=(FUNCTION_TABLE_OFFSET + 6); //@line 765 "pyexpat.c"
        __label__ = 5; break; //@line 765 "pyexpat.c"
      case 5: // $bb4
        var $12=HEAP[$self]; //@line 765 "pyexpat.c"
        var $13=(($12+12)&4294967295); //@line 765 "pyexpat.c"
        var $14=HEAP[$13]; //@line 765 "pyexpat.c"
        var $15=((($14))|0)!=0; //@line 765 "pyexpat.c"
        if ($15) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 765 "pyexpat.c"
      case 6: // $bb5
        HEAP[$iftmp_53]=(FUNCTION_TABLE_OFFSET + 4); //@line 765 "pyexpat.c"
        __label__ = 8; break; //@line 765 "pyexpat.c"
      case 7: // $bb6
        HEAP[$iftmp_53]=(FUNCTION_TABLE_OFFSET + 6); //@line 765 "pyexpat.c"
        __label__ = 8; break; //@line 765 "pyexpat.c"
      case 8: // $bb7
        var $16=HEAP[$self]; //@line 765 "pyexpat.c"
        var $17=HEAP[$attname_addr]; //@line 765 "pyexpat.c"
        var $18=_string_intern($16, $17); //@line 765 "pyexpat.c"
        var $19=HEAP[$self]; //@line 765 "pyexpat.c"
        var $20=HEAP[$elname_addr]; //@line 765 "pyexpat.c"
        var $21=_string_intern($19, $20); //@line 765 "pyexpat.c"
        var $22=HEAP[$iftmp_53]; //@line 765 "pyexpat.c"
        var $23=HEAP[$att_type_addr]; //@line 765 "pyexpat.c"
        var $24=HEAP[$iftmp_52]; //@line 765 "pyexpat.c"
        var $25=HEAP[$dflt_addr]; //@line 765 "pyexpat.c"
        var $26=HEAP[$isrequired_addr]; //@line 765 "pyexpat.c"
        var $27=_Py_BuildValue(((__str24)&4294967295), $21, $18, $22, $23, $24, $25, $26); //@line 765 "pyexpat.c"
        HEAP[$args]=$27; //@line 765 "pyexpat.c"
        var $28=HEAP[$args]; //@line 765 "pyexpat.c"
        var $29=($28)==0; //@line 765 "pyexpat.c"
        if ($29) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 765 "pyexpat.c"
      case 9: // $bb8
        var $30=HEAP[$self]; //@line 765 "pyexpat.c"
        _flag_error($30); //@line 765 "pyexpat.c"
        __label__ = 17; break; //@line 765 "pyexpat.c"
      case 10: // $bb9
        var $31=HEAP[$self]; //@line 765 "pyexpat.c"
        var $32=(($31+24)&4294967295); //@line 765 "pyexpat.c"
        HEAP[$32]=1; //@line 765 "pyexpat.c"
        var $33=HEAP[$self]; //@line 765 "pyexpat.c"
        var $34=(($33+48)&4294967295); //@line 765 "pyexpat.c"
        var $35=HEAP[$34]; //@line 765 "pyexpat.c"
        var $36=(($35+80)&4294967295); //@line 765 "pyexpat.c"
        var $37=HEAP[$36]; //@line 765 "pyexpat.c"
        var $38=_getcode(20, ((__str25)&4294967295), 775); //@line 765 "pyexpat.c"
        var $39=HEAP[$args]; //@line 765 "pyexpat.c"
        var $40=HEAP[$self]; //@line 765 "pyexpat.c"
        var $41=_call_with_frame($38, $37, $39, $40); //@line 765 "pyexpat.c"
        HEAP[$rv]=$41; //@line 765 "pyexpat.c"
        var $42=HEAP[$self]; //@line 765 "pyexpat.c"
        var $43=(($42+24)&4294967295); //@line 765 "pyexpat.c"
        HEAP[$43]=0; //@line 765 "pyexpat.c"
        var $44=HEAP[$args]; //@line 765 "pyexpat.c"
        var $45=(($44)&4294967295); //@line 765 "pyexpat.c"
        var $46=HEAP[$45]; //@line 765 "pyexpat.c"
        var $47=((($46) - 1)&4294967295); //@line 765 "pyexpat.c"
        var $48=HEAP[$args]; //@line 765 "pyexpat.c"
        var $49=(($48)&4294967295); //@line 765 "pyexpat.c"
        HEAP[$49]=$47; //@line 765 "pyexpat.c"
        var $50=HEAP[$args]; //@line 765 "pyexpat.c"
        var $51=(($50)&4294967295); //@line 765 "pyexpat.c"
        var $52=HEAP[$51]; //@line 765 "pyexpat.c"
        var $53=((($52))|0)==0; //@line 765 "pyexpat.c"
        if ($53) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 765 "pyexpat.c"
      case 11: // $bb10
        var $54=HEAP[$args]; //@line 765 "pyexpat.c"
        var $55=(($54+4)&4294967295); //@line 765 "pyexpat.c"
        var $56=HEAP[$55]; //@line 765 "pyexpat.c"
        var $57=(($56+24)&4294967295); //@line 765 "pyexpat.c"
        var $58=HEAP[$57]; //@line 765 "pyexpat.c"
        var $59=HEAP[$args]; //@line 765 "pyexpat.c"
        FUNCTION_TABLE[$58]($59); //@line 765 "pyexpat.c"
        __label__ = 12; break; //@line 765 "pyexpat.c"
      case 12: // $bb11
        var $60=HEAP[$rv]; //@line 765 "pyexpat.c"
        var $61=($60)==0; //@line 765 "pyexpat.c"
        if ($61) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 765 "pyexpat.c"
      case 13: // $bb12
        var $62=HEAP[$self]; //@line 765 "pyexpat.c"
        _flag_error($62); //@line 765 "pyexpat.c"
        __label__ = 17; break; //@line 765 "pyexpat.c"
      case 14: // $bb13
        var $63=HEAP[$rv]; //@line 765 "pyexpat.c"
        var $64=(($63)&4294967295); //@line 765 "pyexpat.c"
        var $65=HEAP[$64]; //@line 765 "pyexpat.c"
        var $66=((($65) - 1)&4294967295); //@line 765 "pyexpat.c"
        var $67=HEAP[$rv]; //@line 765 "pyexpat.c"
        var $68=(($67)&4294967295); //@line 765 "pyexpat.c"
        HEAP[$68]=$66; //@line 765 "pyexpat.c"
        var $69=HEAP[$rv]; //@line 765 "pyexpat.c"
        var $70=(($69)&4294967295); //@line 765 "pyexpat.c"
        var $71=HEAP[$70]; //@line 765 "pyexpat.c"
        var $72=((($71))|0)==0; //@line 765 "pyexpat.c"
        if ($72) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 765 "pyexpat.c"
      case 15: // $bb14
        var $73=HEAP[$rv]; //@line 765 "pyexpat.c"
        var $74=(($73+4)&4294967295); //@line 765 "pyexpat.c"
        var $75=HEAP[$74]; //@line 765 "pyexpat.c"
        var $76=(($75+24)&4294967295); //@line 765 "pyexpat.c"
        var $77=HEAP[$76]; //@line 765 "pyexpat.c"
        var $78=HEAP[$rv]; //@line 765 "pyexpat.c"
        FUNCTION_TABLE[$77]($78); //@line 765 "pyexpat.c"
        __label__ = 16; break; //@line 765 "pyexpat.c"
      case 16: // $bb15
        __label__ = 17; break; //@line 765 "pyexpat.c"
      case 17: // $bb16
        __label__ = 18; break; //@line 765 "pyexpat.c"
      case 18: // $return
        STACKTOP = __stackBase__;
        return; //@line 765 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_SkippedEntityHandler($userData, $entityName, $is_parameter_entity) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr=__stackBase__;
        var $entityName_addr=__stackBase__+4;
        var $is_parameter_entity_addr=__stackBase__+8;
        var $self=__stackBase__+12;
        var $args=__stackBase__+16;
        var $rv=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$userData_addr]=$userData;
        HEAP[$entityName_addr]=$entityName;
        HEAP[$is_parameter_entity_addr]=$is_parameter_entity;
        var $0=HEAP[$userData_addr]; //@line 778 "pyexpat.c"
        var $1=$0; //@line 778 "pyexpat.c"
        HEAP[$self]=$1; //@line 778 "pyexpat.c"
        HEAP[$args]=0; //@line 778 "pyexpat.c"
        HEAP[$rv]=0; //@line 778 "pyexpat.c"
        var $2=HEAP[$self]; //@line 778 "pyexpat.c"
        var $3=_have_handler($2, 21); //@line 778 "pyexpat.c"
        var $4=((($3))|0)!=0; //@line 778 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 10; break; } //@line 778 "pyexpat.c"
      case 1: // $bb
        var $5=HEAP[$self]; //@line 778 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 778 "pyexpat.c"
        var $7=((($6))|0) < 0; //@line 778 "pyexpat.c"
        if ($7) { __label__ = 11; break; } else { __label__ = 2; break; } //@line 778 "pyexpat.c"
      case 2: // $bb1
        var $8=HEAP[$self]; //@line 778 "pyexpat.c"
        var $9=HEAP[$entityName_addr]; //@line 778 "pyexpat.c"
        var $10=_string_intern($8, $9); //@line 778 "pyexpat.c"
        var $11=HEAP[$is_parameter_entity_addr]; //@line 778 "pyexpat.c"
        var $12=_Py_BuildValue(((__str26)&4294967295), $10, $11); //@line 778 "pyexpat.c"
        HEAP[$args]=$12; //@line 778 "pyexpat.c"
        var $13=HEAP[$args]; //@line 778 "pyexpat.c"
        var $14=($13)==0; //@line 778 "pyexpat.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 778 "pyexpat.c"
      case 3: // $bb2
        var $15=HEAP[$self]; //@line 778 "pyexpat.c"
        _flag_error($15); //@line 778 "pyexpat.c"
        __label__ = 11; break; //@line 778 "pyexpat.c"
      case 4: // $bb3
        var $16=HEAP[$self]; //@line 778 "pyexpat.c"
        var $17=(($16+24)&4294967295); //@line 778 "pyexpat.c"
        HEAP[$17]=1; //@line 778 "pyexpat.c"
        var $18=HEAP[$self]; //@line 778 "pyexpat.c"
        var $19=(($18+48)&4294967295); //@line 778 "pyexpat.c"
        var $20=HEAP[$19]; //@line 778 "pyexpat.c"
        var $21=(($20+84)&4294967295); //@line 778 "pyexpat.c"
        var $22=HEAP[$21]; //@line 778 "pyexpat.c"
        var $23=_getcode(21, ((__str27)&4294967295), 783); //@line 778 "pyexpat.c"
        var $24=HEAP[$args]; //@line 778 "pyexpat.c"
        var $25=HEAP[$self]; //@line 778 "pyexpat.c"
        var $26=_call_with_frame($23, $22, $24, $25); //@line 778 "pyexpat.c"
        HEAP[$rv]=$26; //@line 778 "pyexpat.c"
        var $27=HEAP[$self]; //@line 778 "pyexpat.c"
        var $28=(($27+24)&4294967295); //@line 778 "pyexpat.c"
        HEAP[$28]=0; //@line 778 "pyexpat.c"
        var $29=HEAP[$args]; //@line 778 "pyexpat.c"
        var $30=(($29)&4294967295); //@line 778 "pyexpat.c"
        var $31=HEAP[$30]; //@line 778 "pyexpat.c"
        var $32=((($31) - 1)&4294967295); //@line 778 "pyexpat.c"
        var $33=HEAP[$args]; //@line 778 "pyexpat.c"
        var $34=(($33)&4294967295); //@line 778 "pyexpat.c"
        HEAP[$34]=$32; //@line 778 "pyexpat.c"
        var $35=HEAP[$args]; //@line 778 "pyexpat.c"
        var $36=(($35)&4294967295); //@line 778 "pyexpat.c"
        var $37=HEAP[$36]; //@line 778 "pyexpat.c"
        var $38=((($37))|0)==0; //@line 778 "pyexpat.c"
        if ($38) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 778 "pyexpat.c"
      case 5: // $bb4
        var $39=HEAP[$args]; //@line 778 "pyexpat.c"
        var $40=(($39+4)&4294967295); //@line 778 "pyexpat.c"
        var $41=HEAP[$40]; //@line 778 "pyexpat.c"
        var $42=(($41+24)&4294967295); //@line 778 "pyexpat.c"
        var $43=HEAP[$42]; //@line 778 "pyexpat.c"
        var $44=HEAP[$args]; //@line 778 "pyexpat.c"
        FUNCTION_TABLE[$43]($44); //@line 778 "pyexpat.c"
        __label__ = 6; break; //@line 778 "pyexpat.c"
      case 6: // $bb5
        var $45=HEAP[$rv]; //@line 778 "pyexpat.c"
        var $46=($45)==0; //@line 778 "pyexpat.c"
        if ($46) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 778 "pyexpat.c"
      case 7: // $bb6
        var $47=HEAP[$self]; //@line 778 "pyexpat.c"
        _flag_error($47); //@line 778 "pyexpat.c"
        __label__ = 11; break; //@line 778 "pyexpat.c"
      case 8: // $bb7
        var $48=HEAP[$rv]; //@line 778 "pyexpat.c"
        var $49=(($48)&4294967295); //@line 778 "pyexpat.c"
        var $50=HEAP[$49]; //@line 778 "pyexpat.c"
        var $51=((($50) - 1)&4294967295); //@line 778 "pyexpat.c"
        var $52=HEAP[$rv]; //@line 778 "pyexpat.c"
        var $53=(($52)&4294967295); //@line 778 "pyexpat.c"
        HEAP[$53]=$51; //@line 778 "pyexpat.c"
        var $54=HEAP[$rv]; //@line 778 "pyexpat.c"
        var $55=(($54)&4294967295); //@line 778 "pyexpat.c"
        var $56=HEAP[$55]; //@line 778 "pyexpat.c"
        var $57=((($56))|0)==0; //@line 778 "pyexpat.c"
        if ($57) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 778 "pyexpat.c"
      case 9: // $bb8
        var $58=HEAP[$rv]; //@line 778 "pyexpat.c"
        var $59=(($58+4)&4294967295); //@line 778 "pyexpat.c"
        var $60=HEAP[$59]; //@line 778 "pyexpat.c"
        var $61=(($60+24)&4294967295); //@line 778 "pyexpat.c"
        var $62=HEAP[$61]; //@line 778 "pyexpat.c"
        var $63=HEAP[$rv]; //@line 778 "pyexpat.c"
        FUNCTION_TABLE[$62]($63); //@line 778 "pyexpat.c"
        __label__ = 10; break; //@line 778 "pyexpat.c"
      case 10: // $bb9
        __label__ = 11; break; //@line 778 "pyexpat.c"
      case 11: // $bb10
        __label__ = 12; break; //@line 778 "pyexpat.c"
      case 12: // $return
        STACKTOP = __stackBase__;
        return; //@line 778 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_NotationDeclHandler($userData, $notationName, $base, $systemId, $publicId) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr=__stackBase__;
        var $notationName_addr=__stackBase__+4;
        var $base_addr=__stackBase__+8;
        var $systemId_addr=__stackBase__+12;
        var $publicId_addr=__stackBase__+16;
        var $self=__stackBase__+20;
        var $args=__stackBase__+24;
        var $rv=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$userData_addr]=$userData;
        HEAP[$notationName_addr]=$notationName;
        HEAP[$base_addr]=$base;
        HEAP[$systemId_addr]=$systemId;
        HEAP[$publicId_addr]=$publicId;
        var $0=HEAP[$userData_addr]; //@line 786 "pyexpat.c"
        var $1=$0; //@line 786 "pyexpat.c"
        HEAP[$self]=$1; //@line 786 "pyexpat.c"
        HEAP[$args]=0; //@line 786 "pyexpat.c"
        HEAP[$rv]=0; //@line 786 "pyexpat.c"
        var $2=HEAP[$self]; //@line 786 "pyexpat.c"
        var $3=_have_handler($2, 5); //@line 786 "pyexpat.c"
        var $4=((($3))|0)!=0; //@line 786 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 10; break; } //@line 786 "pyexpat.c"
      case 1: // $bb
        var $5=HEAP[$self]; //@line 786 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 786 "pyexpat.c"
        var $7=((($6))|0) < 0; //@line 786 "pyexpat.c"
        if ($7) { __label__ = 11; break; } else { __label__ = 2; break; } //@line 786 "pyexpat.c"
      case 2: // $bb1
        var $8=HEAP[$self]; //@line 786 "pyexpat.c"
        var $9=HEAP[$publicId_addr]; //@line 786 "pyexpat.c"
        var $10=_string_intern($8, $9); //@line 786 "pyexpat.c"
        var $11=HEAP[$self]; //@line 786 "pyexpat.c"
        var $12=HEAP[$systemId_addr]; //@line 786 "pyexpat.c"
        var $13=_string_intern($11, $12); //@line 786 "pyexpat.c"
        var $14=HEAP[$self]; //@line 786 "pyexpat.c"
        var $15=HEAP[$base_addr]; //@line 786 "pyexpat.c"
        var $16=_string_intern($14, $15); //@line 786 "pyexpat.c"
        var $17=HEAP[$self]; //@line 786 "pyexpat.c"
        var $18=HEAP[$notationName_addr]; //@line 786 "pyexpat.c"
        var $19=_string_intern($17, $18); //@line 786 "pyexpat.c"
        var $20=_Py_BuildValue(((__str28)&4294967295), $19, $16, $13, $10); //@line 786 "pyexpat.c"
        HEAP[$args]=$20; //@line 786 "pyexpat.c"
        var $21=HEAP[$args]; //@line 786 "pyexpat.c"
        var $22=($21)==0; //@line 786 "pyexpat.c"
        if ($22) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 786 "pyexpat.c"
      case 3: // $bb2
        var $23=HEAP[$self]; //@line 786 "pyexpat.c"
        _flag_error($23); //@line 786 "pyexpat.c"
        __label__ = 11; break; //@line 786 "pyexpat.c"
      case 4: // $bb3
        var $24=HEAP[$self]; //@line 786 "pyexpat.c"
        var $25=(($24+24)&4294967295); //@line 786 "pyexpat.c"
        HEAP[$25]=1; //@line 786 "pyexpat.c"
        var $26=HEAP[$self]; //@line 786 "pyexpat.c"
        var $27=(($26+48)&4294967295); //@line 786 "pyexpat.c"
        var $28=HEAP[$27]; //@line 786 "pyexpat.c"
        var $29=(($28+20)&4294967295); //@line 786 "pyexpat.c"
        var $30=HEAP[$29]; //@line 786 "pyexpat.c"
        var $31=_getcode(5, ((__str29)&4294967295), 794); //@line 786 "pyexpat.c"
        var $32=HEAP[$args]; //@line 786 "pyexpat.c"
        var $33=HEAP[$self]; //@line 786 "pyexpat.c"
        var $34=_call_with_frame($31, $30, $32, $33); //@line 786 "pyexpat.c"
        HEAP[$rv]=$34; //@line 786 "pyexpat.c"
        var $35=HEAP[$self]; //@line 786 "pyexpat.c"
        var $36=(($35+24)&4294967295); //@line 786 "pyexpat.c"
        HEAP[$36]=0; //@line 786 "pyexpat.c"
        var $37=HEAP[$args]; //@line 786 "pyexpat.c"
        var $38=(($37)&4294967295); //@line 786 "pyexpat.c"
        var $39=HEAP[$38]; //@line 786 "pyexpat.c"
        var $40=((($39) - 1)&4294967295); //@line 786 "pyexpat.c"
        var $41=HEAP[$args]; //@line 786 "pyexpat.c"
        var $42=(($41)&4294967295); //@line 786 "pyexpat.c"
        HEAP[$42]=$40; //@line 786 "pyexpat.c"
        var $43=HEAP[$args]; //@line 786 "pyexpat.c"
        var $44=(($43)&4294967295); //@line 786 "pyexpat.c"
        var $45=HEAP[$44]; //@line 786 "pyexpat.c"
        var $46=((($45))|0)==0; //@line 786 "pyexpat.c"
        if ($46) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 786 "pyexpat.c"
      case 5: // $bb4
        var $47=HEAP[$args]; //@line 786 "pyexpat.c"
        var $48=(($47+4)&4294967295); //@line 786 "pyexpat.c"
        var $49=HEAP[$48]; //@line 786 "pyexpat.c"
        var $50=(($49+24)&4294967295); //@line 786 "pyexpat.c"
        var $51=HEAP[$50]; //@line 786 "pyexpat.c"
        var $52=HEAP[$args]; //@line 786 "pyexpat.c"
        FUNCTION_TABLE[$51]($52); //@line 786 "pyexpat.c"
        __label__ = 6; break; //@line 786 "pyexpat.c"
      case 6: // $bb5
        var $53=HEAP[$rv]; //@line 786 "pyexpat.c"
        var $54=($53)==0; //@line 786 "pyexpat.c"
        if ($54) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 786 "pyexpat.c"
      case 7: // $bb6
        var $55=HEAP[$self]; //@line 786 "pyexpat.c"
        _flag_error($55); //@line 786 "pyexpat.c"
        __label__ = 11; break; //@line 786 "pyexpat.c"
      case 8: // $bb7
        var $56=HEAP[$rv]; //@line 786 "pyexpat.c"
        var $57=(($56)&4294967295); //@line 786 "pyexpat.c"
        var $58=HEAP[$57]; //@line 786 "pyexpat.c"
        var $59=((($58) - 1)&4294967295); //@line 786 "pyexpat.c"
        var $60=HEAP[$rv]; //@line 786 "pyexpat.c"
        var $61=(($60)&4294967295); //@line 786 "pyexpat.c"
        HEAP[$61]=$59; //@line 786 "pyexpat.c"
        var $62=HEAP[$rv]; //@line 786 "pyexpat.c"
        var $63=(($62)&4294967295); //@line 786 "pyexpat.c"
        var $64=HEAP[$63]; //@line 786 "pyexpat.c"
        var $65=((($64))|0)==0; //@line 786 "pyexpat.c"
        if ($65) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 786 "pyexpat.c"
      case 9: // $bb8
        var $66=HEAP[$rv]; //@line 786 "pyexpat.c"
        var $67=(($66+4)&4294967295); //@line 786 "pyexpat.c"
        var $68=HEAP[$67]; //@line 786 "pyexpat.c"
        var $69=(($68+24)&4294967295); //@line 786 "pyexpat.c"
        var $70=HEAP[$69]; //@line 786 "pyexpat.c"
        var $71=HEAP[$rv]; //@line 786 "pyexpat.c"
        FUNCTION_TABLE[$70]($71); //@line 786 "pyexpat.c"
        __label__ = 10; break; //@line 786 "pyexpat.c"
      case 10: // $bb9
        __label__ = 11; break; //@line 786 "pyexpat.c"
      case 11: // $bb10
        __label__ = 12; break; //@line 786 "pyexpat.c"
      case 12: // $return
        STACKTOP = __stackBase__;
        return; //@line 786 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_StartNamespaceDeclHandler($userData, $prefix, $uri) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr=__stackBase__;
        var $prefix_addr=__stackBase__+4;
        var $uri_addr=__stackBase__+8;
        var $self=__stackBase__+12;
        var $args=__stackBase__+16;
        var $rv=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$userData_addr]=$userData;
        HEAP[$prefix_addr]=$prefix;
        HEAP[$uri_addr]=$uri;
        var $0=HEAP[$userData_addr]; //@line 796 "pyexpat.c"
        var $1=$0; //@line 796 "pyexpat.c"
        HEAP[$self]=$1; //@line 796 "pyexpat.c"
        HEAP[$args]=0; //@line 796 "pyexpat.c"
        HEAP[$rv]=0; //@line 796 "pyexpat.c"
        var $2=HEAP[$self]; //@line 796 "pyexpat.c"
        var $3=_have_handler($2, 6); //@line 796 "pyexpat.c"
        var $4=((($3))|0)!=0; //@line 796 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 10; break; } //@line 796 "pyexpat.c"
      case 1: // $bb
        var $5=HEAP[$self]; //@line 796 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 796 "pyexpat.c"
        var $7=((($6))|0) < 0; //@line 796 "pyexpat.c"
        if ($7) { __label__ = 11; break; } else { __label__ = 2; break; } //@line 796 "pyexpat.c"
      case 2: // $bb1
        var $8=HEAP[$self]; //@line 796 "pyexpat.c"
        var $9=HEAP[$uri_addr]; //@line 796 "pyexpat.c"
        var $10=_string_intern($8, $9); //@line 796 "pyexpat.c"
        var $11=HEAP[$self]; //@line 796 "pyexpat.c"
        var $12=HEAP[$prefix_addr]; //@line 796 "pyexpat.c"
        var $13=_string_intern($11, $12); //@line 796 "pyexpat.c"
        var $14=_Py_BuildValue(((__str8)&4294967295), $13, $10); //@line 796 "pyexpat.c"
        HEAP[$args]=$14; //@line 796 "pyexpat.c"
        var $15=HEAP[$args]; //@line 796 "pyexpat.c"
        var $16=($15)==0; //@line 796 "pyexpat.c"
        if ($16) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 796 "pyexpat.c"
      case 3: // $bb2
        var $17=HEAP[$self]; //@line 796 "pyexpat.c"
        _flag_error($17); //@line 796 "pyexpat.c"
        __label__ = 11; break; //@line 796 "pyexpat.c"
      case 4: // $bb3
        var $18=HEAP[$self]; //@line 796 "pyexpat.c"
        var $19=(($18+24)&4294967295); //@line 796 "pyexpat.c"
        HEAP[$19]=1; //@line 796 "pyexpat.c"
        var $20=HEAP[$self]; //@line 796 "pyexpat.c"
        var $21=(($20+48)&4294967295); //@line 796 "pyexpat.c"
        var $22=HEAP[$21]; //@line 796 "pyexpat.c"
        var $23=(($22+24)&4294967295); //@line 796 "pyexpat.c"
        var $24=HEAP[$23]; //@line 796 "pyexpat.c"
        var $25=_getcode(6, ((__str30)&4294967295), 801); //@line 796 "pyexpat.c"
        var $26=HEAP[$args]; //@line 796 "pyexpat.c"
        var $27=HEAP[$self]; //@line 796 "pyexpat.c"
        var $28=_call_with_frame($25, $24, $26, $27); //@line 796 "pyexpat.c"
        HEAP[$rv]=$28; //@line 796 "pyexpat.c"
        var $29=HEAP[$self]; //@line 796 "pyexpat.c"
        var $30=(($29+24)&4294967295); //@line 796 "pyexpat.c"
        HEAP[$30]=0; //@line 796 "pyexpat.c"
        var $31=HEAP[$args]; //@line 796 "pyexpat.c"
        var $32=(($31)&4294967295); //@line 796 "pyexpat.c"
        var $33=HEAP[$32]; //@line 796 "pyexpat.c"
        var $34=((($33) - 1)&4294967295); //@line 796 "pyexpat.c"
        var $35=HEAP[$args]; //@line 796 "pyexpat.c"
        var $36=(($35)&4294967295); //@line 796 "pyexpat.c"
        HEAP[$36]=$34; //@line 796 "pyexpat.c"
        var $37=HEAP[$args]; //@line 796 "pyexpat.c"
        var $38=(($37)&4294967295); //@line 796 "pyexpat.c"
        var $39=HEAP[$38]; //@line 796 "pyexpat.c"
        var $40=((($39))|0)==0; //@line 796 "pyexpat.c"
        if ($40) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 796 "pyexpat.c"
      case 5: // $bb4
        var $41=HEAP[$args]; //@line 796 "pyexpat.c"
        var $42=(($41+4)&4294967295); //@line 796 "pyexpat.c"
        var $43=HEAP[$42]; //@line 796 "pyexpat.c"
        var $44=(($43+24)&4294967295); //@line 796 "pyexpat.c"
        var $45=HEAP[$44]; //@line 796 "pyexpat.c"
        var $46=HEAP[$args]; //@line 796 "pyexpat.c"
        FUNCTION_TABLE[$45]($46); //@line 796 "pyexpat.c"
        __label__ = 6; break; //@line 796 "pyexpat.c"
      case 6: // $bb5
        var $47=HEAP[$rv]; //@line 796 "pyexpat.c"
        var $48=($47)==0; //@line 796 "pyexpat.c"
        if ($48) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 796 "pyexpat.c"
      case 7: // $bb6
        var $49=HEAP[$self]; //@line 796 "pyexpat.c"
        _flag_error($49); //@line 796 "pyexpat.c"
        __label__ = 11; break; //@line 796 "pyexpat.c"
      case 8: // $bb7
        var $50=HEAP[$rv]; //@line 796 "pyexpat.c"
        var $51=(($50)&4294967295); //@line 796 "pyexpat.c"
        var $52=HEAP[$51]; //@line 796 "pyexpat.c"
        var $53=((($52) - 1)&4294967295); //@line 796 "pyexpat.c"
        var $54=HEAP[$rv]; //@line 796 "pyexpat.c"
        var $55=(($54)&4294967295); //@line 796 "pyexpat.c"
        HEAP[$55]=$53; //@line 796 "pyexpat.c"
        var $56=HEAP[$rv]; //@line 796 "pyexpat.c"
        var $57=(($56)&4294967295); //@line 796 "pyexpat.c"
        var $58=HEAP[$57]; //@line 796 "pyexpat.c"
        var $59=((($58))|0)==0; //@line 796 "pyexpat.c"
        if ($59) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 796 "pyexpat.c"
      case 9: // $bb8
        var $60=HEAP[$rv]; //@line 796 "pyexpat.c"
        var $61=(($60+4)&4294967295); //@line 796 "pyexpat.c"
        var $62=HEAP[$61]; //@line 796 "pyexpat.c"
        var $63=(($62+24)&4294967295); //@line 796 "pyexpat.c"
        var $64=HEAP[$63]; //@line 796 "pyexpat.c"
        var $65=HEAP[$rv]; //@line 796 "pyexpat.c"
        FUNCTION_TABLE[$64]($65); //@line 796 "pyexpat.c"
        __label__ = 10; break; //@line 796 "pyexpat.c"
      case 10: // $bb9
        __label__ = 11; break; //@line 796 "pyexpat.c"
      case 11: // $bb10
        __label__ = 12; break; //@line 796 "pyexpat.c"
      case 12: // $return
        STACKTOP = __stackBase__;
        return; //@line 796 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_EndNamespaceDeclHandler($userData, $prefix) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr=__stackBase__;
        var $prefix_addr=__stackBase__+4;
        var $self=__stackBase__+8;
        var $args=__stackBase__+12;
        var $rv=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$userData_addr]=$userData;
        HEAP[$prefix_addr]=$prefix;
        var $0=HEAP[$userData_addr]; //@line 803 "pyexpat.c"
        var $1=$0; //@line 803 "pyexpat.c"
        HEAP[$self]=$1; //@line 803 "pyexpat.c"
        HEAP[$args]=0; //@line 803 "pyexpat.c"
        HEAP[$rv]=0; //@line 803 "pyexpat.c"
        var $2=HEAP[$self]; //@line 803 "pyexpat.c"
        var $3=_have_handler($2, 7); //@line 803 "pyexpat.c"
        var $4=((($3))|0)!=0; //@line 803 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 10; break; } //@line 803 "pyexpat.c"
      case 1: // $bb
        var $5=HEAP[$self]; //@line 803 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 803 "pyexpat.c"
        var $7=((($6))|0) < 0; //@line 803 "pyexpat.c"
        if ($7) { __label__ = 11; break; } else { __label__ = 2; break; } //@line 803 "pyexpat.c"
      case 2: // $bb1
        var $8=HEAP[$self]; //@line 803 "pyexpat.c"
        var $9=HEAP[$prefix_addr]; //@line 803 "pyexpat.c"
        var $10=_string_intern($8, $9); //@line 803 "pyexpat.c"
        var $11=_Py_BuildValue(((__str10)&4294967295), $10); //@line 803 "pyexpat.c"
        HEAP[$args]=$11; //@line 803 "pyexpat.c"
        var $12=HEAP[$args]; //@line 803 "pyexpat.c"
        var $13=($12)==0; //@line 803 "pyexpat.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 803 "pyexpat.c"
      case 3: // $bb2
        var $14=HEAP[$self]; //@line 803 "pyexpat.c"
        _flag_error($14); //@line 803 "pyexpat.c"
        __label__ = 11; break; //@line 803 "pyexpat.c"
      case 4: // $bb3
        var $15=HEAP[$self]; //@line 803 "pyexpat.c"
        var $16=(($15+24)&4294967295); //@line 803 "pyexpat.c"
        HEAP[$16]=1; //@line 803 "pyexpat.c"
        var $17=HEAP[$self]; //@line 803 "pyexpat.c"
        var $18=(($17+48)&4294967295); //@line 803 "pyexpat.c"
        var $19=HEAP[$18]; //@line 803 "pyexpat.c"
        var $20=(($19+28)&4294967295); //@line 803 "pyexpat.c"
        var $21=HEAP[$20]; //@line 803 "pyexpat.c"
        var $22=_getcode(7, ((__str31)&4294967295), 806); //@line 803 "pyexpat.c"
        var $23=HEAP[$args]; //@line 803 "pyexpat.c"
        var $24=HEAP[$self]; //@line 803 "pyexpat.c"
        var $25=_call_with_frame($22, $21, $23, $24); //@line 803 "pyexpat.c"
        HEAP[$rv]=$25; //@line 803 "pyexpat.c"
        var $26=HEAP[$self]; //@line 803 "pyexpat.c"
        var $27=(($26+24)&4294967295); //@line 803 "pyexpat.c"
        HEAP[$27]=0; //@line 803 "pyexpat.c"
        var $28=HEAP[$args]; //@line 803 "pyexpat.c"
        var $29=(($28)&4294967295); //@line 803 "pyexpat.c"
        var $30=HEAP[$29]; //@line 803 "pyexpat.c"
        var $31=((($30) - 1)&4294967295); //@line 803 "pyexpat.c"
        var $32=HEAP[$args]; //@line 803 "pyexpat.c"
        var $33=(($32)&4294967295); //@line 803 "pyexpat.c"
        HEAP[$33]=$31; //@line 803 "pyexpat.c"
        var $34=HEAP[$args]; //@line 803 "pyexpat.c"
        var $35=(($34)&4294967295); //@line 803 "pyexpat.c"
        var $36=HEAP[$35]; //@line 803 "pyexpat.c"
        var $37=((($36))|0)==0; //@line 803 "pyexpat.c"
        if ($37) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 803 "pyexpat.c"
      case 5: // $bb4
        var $38=HEAP[$args]; //@line 803 "pyexpat.c"
        var $39=(($38+4)&4294967295); //@line 803 "pyexpat.c"
        var $40=HEAP[$39]; //@line 803 "pyexpat.c"
        var $41=(($40+24)&4294967295); //@line 803 "pyexpat.c"
        var $42=HEAP[$41]; //@line 803 "pyexpat.c"
        var $43=HEAP[$args]; //@line 803 "pyexpat.c"
        FUNCTION_TABLE[$42]($43); //@line 803 "pyexpat.c"
        __label__ = 6; break; //@line 803 "pyexpat.c"
      case 6: // $bb5
        var $44=HEAP[$rv]; //@line 803 "pyexpat.c"
        var $45=($44)==0; //@line 803 "pyexpat.c"
        if ($45) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 803 "pyexpat.c"
      case 7: // $bb6
        var $46=HEAP[$self]; //@line 803 "pyexpat.c"
        _flag_error($46); //@line 803 "pyexpat.c"
        __label__ = 11; break; //@line 803 "pyexpat.c"
      case 8: // $bb7
        var $47=HEAP[$rv]; //@line 803 "pyexpat.c"
        var $48=(($47)&4294967295); //@line 803 "pyexpat.c"
        var $49=HEAP[$48]; //@line 803 "pyexpat.c"
        var $50=((($49) - 1)&4294967295); //@line 803 "pyexpat.c"
        var $51=HEAP[$rv]; //@line 803 "pyexpat.c"
        var $52=(($51)&4294967295); //@line 803 "pyexpat.c"
        HEAP[$52]=$50; //@line 803 "pyexpat.c"
        var $53=HEAP[$rv]; //@line 803 "pyexpat.c"
        var $54=(($53)&4294967295); //@line 803 "pyexpat.c"
        var $55=HEAP[$54]; //@line 803 "pyexpat.c"
        var $56=((($55))|0)==0; //@line 803 "pyexpat.c"
        if ($56) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 803 "pyexpat.c"
      case 9: // $bb8
        var $57=HEAP[$rv]; //@line 803 "pyexpat.c"
        var $58=(($57+4)&4294967295); //@line 803 "pyexpat.c"
        var $59=HEAP[$58]; //@line 803 "pyexpat.c"
        var $60=(($59+24)&4294967295); //@line 803 "pyexpat.c"
        var $61=HEAP[$60]; //@line 803 "pyexpat.c"
        var $62=HEAP[$rv]; //@line 803 "pyexpat.c"
        FUNCTION_TABLE[$61]($62); //@line 803 "pyexpat.c"
        __label__ = 10; break; //@line 803 "pyexpat.c"
      case 10: // $bb9
        __label__ = 11; break; //@line 803 "pyexpat.c"
      case 11: // $bb10
        __label__ = 12; break; //@line 803 "pyexpat.c"
      case 12: // $return
        STACKTOP = __stackBase__;
        return; //@line 803 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_CommentHandler($userData, $data) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr=__stackBase__;
        var $data_addr=__stackBase__+4;
        var $iftmp_54=__stackBase__+8;
        var $self=__stackBase__+12;
        var $args=__stackBase__+16;
        var $rv=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$userData_addr]=$userData;
        HEAP[$data_addr]=$data;
        var $0=HEAP[$userData_addr]; //@line 808 "pyexpat.c"
        var $1=$0; //@line 808 "pyexpat.c"
        HEAP[$self]=$1; //@line 808 "pyexpat.c"
        HEAP[$args]=0; //@line 808 "pyexpat.c"
        HEAP[$rv]=0; //@line 808 "pyexpat.c"
        var $2=HEAP[$self]; //@line 808 "pyexpat.c"
        var $3=_have_handler($2, 8); //@line 808 "pyexpat.c"
        var $4=((($3))|0)!=0; //@line 808 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 13; break; } //@line 808 "pyexpat.c"
      case 1: // $bb
        var $5=HEAP[$self]; //@line 808 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 808 "pyexpat.c"
        var $7=((($6))|0) < 0; //@line 808 "pyexpat.c"
        if ($7) { __label__ = 14; break; } else { __label__ = 2; break; } //@line 808 "pyexpat.c"
      case 2: // $bb1
        var $8=HEAP[$self]; //@line 808 "pyexpat.c"
        var $9=(($8+12)&4294967295); //@line 808 "pyexpat.c"
        var $10=HEAP[$9]; //@line 808 "pyexpat.c"
        var $11=((($10))|0)!=0; //@line 808 "pyexpat.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 808 "pyexpat.c"
      case 3: // $bb2
        HEAP[$iftmp_54]=(FUNCTION_TABLE_OFFSET + 4); //@line 808 "pyexpat.c"
        __label__ = 5; break; //@line 808 "pyexpat.c"
      case 4: // $bb3
        HEAP[$iftmp_54]=(FUNCTION_TABLE_OFFSET + 6); //@line 808 "pyexpat.c"
        __label__ = 5; break; //@line 808 "pyexpat.c"
      case 5: // $bb4
        var $12=HEAP[$iftmp_54]; //@line 808 "pyexpat.c"
        var $13=HEAP[$data_addr]; //@line 808 "pyexpat.c"
        var $14=_Py_BuildValue(((__str32)&4294967295), $12, $13); //@line 808 "pyexpat.c"
        HEAP[$args]=$14; //@line 808 "pyexpat.c"
        var $15=HEAP[$args]; //@line 808 "pyexpat.c"
        var $16=($15)==0; //@line 808 "pyexpat.c"
        if ($16) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 808 "pyexpat.c"
      case 6: // $bb5
        var $17=HEAP[$self]; //@line 808 "pyexpat.c"
        _flag_error($17); //@line 808 "pyexpat.c"
        __label__ = 14; break; //@line 808 "pyexpat.c"
      case 7: // $bb6
        var $18=HEAP[$self]; //@line 808 "pyexpat.c"
        var $19=(($18+24)&4294967295); //@line 808 "pyexpat.c"
        HEAP[$19]=1; //@line 808 "pyexpat.c"
        var $20=HEAP[$self]; //@line 808 "pyexpat.c"
        var $21=(($20+48)&4294967295); //@line 808 "pyexpat.c"
        var $22=HEAP[$21]; //@line 808 "pyexpat.c"
        var $23=(($22+32)&4294967295); //@line 808 "pyexpat.c"
        var $24=HEAP[$23]; //@line 808 "pyexpat.c"
        var $25=_getcode(8, ((__str33)&4294967295), 810); //@line 808 "pyexpat.c"
        var $26=HEAP[$args]; //@line 808 "pyexpat.c"
        var $27=HEAP[$self]; //@line 808 "pyexpat.c"
        var $28=_call_with_frame($25, $24, $26, $27); //@line 808 "pyexpat.c"
        HEAP[$rv]=$28; //@line 808 "pyexpat.c"
        var $29=HEAP[$self]; //@line 808 "pyexpat.c"
        var $30=(($29+24)&4294967295); //@line 808 "pyexpat.c"
        HEAP[$30]=0; //@line 808 "pyexpat.c"
        var $31=HEAP[$args]; //@line 808 "pyexpat.c"
        var $32=(($31)&4294967295); //@line 808 "pyexpat.c"
        var $33=HEAP[$32]; //@line 808 "pyexpat.c"
        var $34=((($33) - 1)&4294967295); //@line 808 "pyexpat.c"
        var $35=HEAP[$args]; //@line 808 "pyexpat.c"
        var $36=(($35)&4294967295); //@line 808 "pyexpat.c"
        HEAP[$36]=$34; //@line 808 "pyexpat.c"
        var $37=HEAP[$args]; //@line 808 "pyexpat.c"
        var $38=(($37)&4294967295); //@line 808 "pyexpat.c"
        var $39=HEAP[$38]; //@line 808 "pyexpat.c"
        var $40=((($39))|0)==0; //@line 808 "pyexpat.c"
        if ($40) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 808 "pyexpat.c"
      case 8: // $bb7
        var $41=HEAP[$args]; //@line 808 "pyexpat.c"
        var $42=(($41+4)&4294967295); //@line 808 "pyexpat.c"
        var $43=HEAP[$42]; //@line 808 "pyexpat.c"
        var $44=(($43+24)&4294967295); //@line 808 "pyexpat.c"
        var $45=HEAP[$44]; //@line 808 "pyexpat.c"
        var $46=HEAP[$args]; //@line 808 "pyexpat.c"
        FUNCTION_TABLE[$45]($46); //@line 808 "pyexpat.c"
        __label__ = 9; break; //@line 808 "pyexpat.c"
      case 9: // $bb8
        var $47=HEAP[$rv]; //@line 808 "pyexpat.c"
        var $48=($47)==0; //@line 808 "pyexpat.c"
        if ($48) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 808 "pyexpat.c"
      case 10: // $bb9
        var $49=HEAP[$self]; //@line 808 "pyexpat.c"
        _flag_error($49); //@line 808 "pyexpat.c"
        __label__ = 14; break; //@line 808 "pyexpat.c"
      case 11: // $bb10
        var $50=HEAP[$rv]; //@line 808 "pyexpat.c"
        var $51=(($50)&4294967295); //@line 808 "pyexpat.c"
        var $52=HEAP[$51]; //@line 808 "pyexpat.c"
        var $53=((($52) - 1)&4294967295); //@line 808 "pyexpat.c"
        var $54=HEAP[$rv]; //@line 808 "pyexpat.c"
        var $55=(($54)&4294967295); //@line 808 "pyexpat.c"
        HEAP[$55]=$53; //@line 808 "pyexpat.c"
        var $56=HEAP[$rv]; //@line 808 "pyexpat.c"
        var $57=(($56)&4294967295); //@line 808 "pyexpat.c"
        var $58=HEAP[$57]; //@line 808 "pyexpat.c"
        var $59=((($58))|0)==0; //@line 808 "pyexpat.c"
        if ($59) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 808 "pyexpat.c"
      case 12: // $bb11
        var $60=HEAP[$rv]; //@line 808 "pyexpat.c"
        var $61=(($60+4)&4294967295); //@line 808 "pyexpat.c"
        var $62=HEAP[$61]; //@line 808 "pyexpat.c"
        var $63=(($62+24)&4294967295); //@line 808 "pyexpat.c"
        var $64=HEAP[$63]; //@line 808 "pyexpat.c"
        var $65=HEAP[$rv]; //@line 808 "pyexpat.c"
        FUNCTION_TABLE[$64]($65); //@line 808 "pyexpat.c"
        __label__ = 13; break; //@line 808 "pyexpat.c"
      case 13: // $bb12
        __label__ = 14; break; //@line 808 "pyexpat.c"
      case 14: // $bb13
        __label__ = 15; break; //@line 808 "pyexpat.c"
      case 15: // $return
        STACKTOP = __stackBase__;
        return; //@line 808 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_StartCdataSectionHandler($userData) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr=__stackBase__;
        var $self=__stackBase__+4;
        var $args=__stackBase__+8;
        var $rv=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$userData_addr]=$userData;
        var $0=HEAP[$userData_addr]; //@line 812 "pyexpat.c"
        var $1=$0; //@line 812 "pyexpat.c"
        HEAP[$self]=$1; //@line 812 "pyexpat.c"
        HEAP[$args]=0; //@line 812 "pyexpat.c"
        HEAP[$rv]=0; //@line 812 "pyexpat.c"
        var $2=HEAP[$self]; //@line 812 "pyexpat.c"
        var $3=_have_handler($2, 9); //@line 812 "pyexpat.c"
        var $4=((($3))|0)!=0; //@line 812 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 10; break; } //@line 812 "pyexpat.c"
      case 1: // $bb
        var $5=HEAP[$self]; //@line 812 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 812 "pyexpat.c"
        var $7=((($6))|0) < 0; //@line 812 "pyexpat.c"
        if ($7) { __label__ = 11; break; } else { __label__ = 2; break; } //@line 812 "pyexpat.c"
      case 2: // $bb1
        var $8=_Py_BuildValue(((__str34)&4294967295)); //@line 812 "pyexpat.c"
        HEAP[$args]=$8; //@line 812 "pyexpat.c"
        var $9=HEAP[$args]; //@line 812 "pyexpat.c"
        var $10=($9)==0; //@line 812 "pyexpat.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 812 "pyexpat.c"
      case 3: // $bb2
        var $11=HEAP[$self]; //@line 812 "pyexpat.c"
        _flag_error($11); //@line 812 "pyexpat.c"
        __label__ = 11; break; //@line 812 "pyexpat.c"
      case 4: // $bb3
        var $12=HEAP[$self]; //@line 812 "pyexpat.c"
        var $13=(($12+24)&4294967295); //@line 812 "pyexpat.c"
        HEAP[$13]=1; //@line 812 "pyexpat.c"
        var $14=HEAP[$self]; //@line 812 "pyexpat.c"
        var $15=(($14+48)&4294967295); //@line 812 "pyexpat.c"
        var $16=HEAP[$15]; //@line 812 "pyexpat.c"
        var $17=(($16+36)&4294967295); //@line 812 "pyexpat.c"
        var $18=HEAP[$17]; //@line 812 "pyexpat.c"
        var $19=_getcode(9, ((__str35)&4294967295), 814); //@line 812 "pyexpat.c"
        var $20=HEAP[$args]; //@line 812 "pyexpat.c"
        var $21=HEAP[$self]; //@line 812 "pyexpat.c"
        var $22=_call_with_frame($19, $18, $20, $21); //@line 812 "pyexpat.c"
        HEAP[$rv]=$22; //@line 812 "pyexpat.c"
        var $23=HEAP[$self]; //@line 812 "pyexpat.c"
        var $24=(($23+24)&4294967295); //@line 812 "pyexpat.c"
        HEAP[$24]=0; //@line 812 "pyexpat.c"
        var $25=HEAP[$args]; //@line 812 "pyexpat.c"
        var $26=(($25)&4294967295); //@line 812 "pyexpat.c"
        var $27=HEAP[$26]; //@line 812 "pyexpat.c"
        var $28=((($27) - 1)&4294967295); //@line 812 "pyexpat.c"
        var $29=HEAP[$args]; //@line 812 "pyexpat.c"
        var $30=(($29)&4294967295); //@line 812 "pyexpat.c"
        HEAP[$30]=$28; //@line 812 "pyexpat.c"
        var $31=HEAP[$args]; //@line 812 "pyexpat.c"
        var $32=(($31)&4294967295); //@line 812 "pyexpat.c"
        var $33=HEAP[$32]; //@line 812 "pyexpat.c"
        var $34=((($33))|0)==0; //@line 812 "pyexpat.c"
        if ($34) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 812 "pyexpat.c"
      case 5: // $bb4
        var $35=HEAP[$args]; //@line 812 "pyexpat.c"
        var $36=(($35+4)&4294967295); //@line 812 "pyexpat.c"
        var $37=HEAP[$36]; //@line 812 "pyexpat.c"
        var $38=(($37+24)&4294967295); //@line 812 "pyexpat.c"
        var $39=HEAP[$38]; //@line 812 "pyexpat.c"
        var $40=HEAP[$args]; //@line 812 "pyexpat.c"
        FUNCTION_TABLE[$39]($40); //@line 812 "pyexpat.c"
        __label__ = 6; break; //@line 812 "pyexpat.c"
      case 6: // $bb5
        var $41=HEAP[$rv]; //@line 812 "pyexpat.c"
        var $42=($41)==0; //@line 812 "pyexpat.c"
        if ($42) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 812 "pyexpat.c"
      case 7: // $bb6
        var $43=HEAP[$self]; //@line 812 "pyexpat.c"
        _flag_error($43); //@line 812 "pyexpat.c"
        __label__ = 11; break; //@line 812 "pyexpat.c"
      case 8: // $bb7
        var $44=HEAP[$rv]; //@line 812 "pyexpat.c"
        var $45=(($44)&4294967295); //@line 812 "pyexpat.c"
        var $46=HEAP[$45]; //@line 812 "pyexpat.c"
        var $47=((($46) - 1)&4294967295); //@line 812 "pyexpat.c"
        var $48=HEAP[$rv]; //@line 812 "pyexpat.c"
        var $49=(($48)&4294967295); //@line 812 "pyexpat.c"
        HEAP[$49]=$47; //@line 812 "pyexpat.c"
        var $50=HEAP[$rv]; //@line 812 "pyexpat.c"
        var $51=(($50)&4294967295); //@line 812 "pyexpat.c"
        var $52=HEAP[$51]; //@line 812 "pyexpat.c"
        var $53=((($52))|0)==0; //@line 812 "pyexpat.c"
        if ($53) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 812 "pyexpat.c"
      case 9: // $bb8
        var $54=HEAP[$rv]; //@line 812 "pyexpat.c"
        var $55=(($54+4)&4294967295); //@line 812 "pyexpat.c"
        var $56=HEAP[$55]; //@line 812 "pyexpat.c"
        var $57=(($56+24)&4294967295); //@line 812 "pyexpat.c"
        var $58=HEAP[$57]; //@line 812 "pyexpat.c"
        var $59=HEAP[$rv]; //@line 812 "pyexpat.c"
        FUNCTION_TABLE[$58]($59); //@line 812 "pyexpat.c"
        __label__ = 10; break; //@line 812 "pyexpat.c"
      case 10: // $bb9
        __label__ = 11; break; //@line 812 "pyexpat.c"
      case 11: // $bb10
        __label__ = 12; break; //@line 812 "pyexpat.c"
      case 12: // $return
        STACKTOP = __stackBase__;
        return; //@line 812 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_EndCdataSectionHandler($userData) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr=__stackBase__;
        var $self=__stackBase__+4;
        var $args=__stackBase__+8;
        var $rv=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$userData_addr]=$userData;
        var $0=HEAP[$userData_addr]; //@line 816 "pyexpat.c"
        var $1=$0; //@line 816 "pyexpat.c"
        HEAP[$self]=$1; //@line 816 "pyexpat.c"
        HEAP[$args]=0; //@line 816 "pyexpat.c"
        HEAP[$rv]=0; //@line 816 "pyexpat.c"
        var $2=HEAP[$self]; //@line 816 "pyexpat.c"
        var $3=_have_handler($2, 10); //@line 816 "pyexpat.c"
        var $4=((($3))|0)!=0; //@line 816 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 10; break; } //@line 816 "pyexpat.c"
      case 1: // $bb
        var $5=HEAP[$self]; //@line 816 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 816 "pyexpat.c"
        var $7=((($6))|0) < 0; //@line 816 "pyexpat.c"
        if ($7) { __label__ = 11; break; } else { __label__ = 2; break; } //@line 816 "pyexpat.c"
      case 2: // $bb1
        var $8=_Py_BuildValue(((__str34)&4294967295)); //@line 816 "pyexpat.c"
        HEAP[$args]=$8; //@line 816 "pyexpat.c"
        var $9=HEAP[$args]; //@line 816 "pyexpat.c"
        var $10=($9)==0; //@line 816 "pyexpat.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 816 "pyexpat.c"
      case 3: // $bb2
        var $11=HEAP[$self]; //@line 816 "pyexpat.c"
        _flag_error($11); //@line 816 "pyexpat.c"
        __label__ = 11; break; //@line 816 "pyexpat.c"
      case 4: // $bb3
        var $12=HEAP[$self]; //@line 816 "pyexpat.c"
        var $13=(($12+24)&4294967295); //@line 816 "pyexpat.c"
        HEAP[$13]=1; //@line 816 "pyexpat.c"
        var $14=HEAP[$self]; //@line 816 "pyexpat.c"
        var $15=(($14+48)&4294967295); //@line 816 "pyexpat.c"
        var $16=HEAP[$15]; //@line 816 "pyexpat.c"
        var $17=(($16+40)&4294967295); //@line 816 "pyexpat.c"
        var $18=HEAP[$17]; //@line 816 "pyexpat.c"
        var $19=_getcode(10, ((__str36)&4294967295), 818); //@line 816 "pyexpat.c"
        var $20=HEAP[$args]; //@line 816 "pyexpat.c"
        var $21=HEAP[$self]; //@line 816 "pyexpat.c"
        var $22=_call_with_frame($19, $18, $20, $21); //@line 816 "pyexpat.c"
        HEAP[$rv]=$22; //@line 816 "pyexpat.c"
        var $23=HEAP[$self]; //@line 816 "pyexpat.c"
        var $24=(($23+24)&4294967295); //@line 816 "pyexpat.c"
        HEAP[$24]=0; //@line 816 "pyexpat.c"
        var $25=HEAP[$args]; //@line 816 "pyexpat.c"
        var $26=(($25)&4294967295); //@line 816 "pyexpat.c"
        var $27=HEAP[$26]; //@line 816 "pyexpat.c"
        var $28=((($27) - 1)&4294967295); //@line 816 "pyexpat.c"
        var $29=HEAP[$args]; //@line 816 "pyexpat.c"
        var $30=(($29)&4294967295); //@line 816 "pyexpat.c"
        HEAP[$30]=$28; //@line 816 "pyexpat.c"
        var $31=HEAP[$args]; //@line 816 "pyexpat.c"
        var $32=(($31)&4294967295); //@line 816 "pyexpat.c"
        var $33=HEAP[$32]; //@line 816 "pyexpat.c"
        var $34=((($33))|0)==0; //@line 816 "pyexpat.c"
        if ($34) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 816 "pyexpat.c"
      case 5: // $bb4
        var $35=HEAP[$args]; //@line 816 "pyexpat.c"
        var $36=(($35+4)&4294967295); //@line 816 "pyexpat.c"
        var $37=HEAP[$36]; //@line 816 "pyexpat.c"
        var $38=(($37+24)&4294967295); //@line 816 "pyexpat.c"
        var $39=HEAP[$38]; //@line 816 "pyexpat.c"
        var $40=HEAP[$args]; //@line 816 "pyexpat.c"
        FUNCTION_TABLE[$39]($40); //@line 816 "pyexpat.c"
        __label__ = 6; break; //@line 816 "pyexpat.c"
      case 6: // $bb5
        var $41=HEAP[$rv]; //@line 816 "pyexpat.c"
        var $42=($41)==0; //@line 816 "pyexpat.c"
        if ($42) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 816 "pyexpat.c"
      case 7: // $bb6
        var $43=HEAP[$self]; //@line 816 "pyexpat.c"
        _flag_error($43); //@line 816 "pyexpat.c"
        __label__ = 11; break; //@line 816 "pyexpat.c"
      case 8: // $bb7
        var $44=HEAP[$rv]; //@line 816 "pyexpat.c"
        var $45=(($44)&4294967295); //@line 816 "pyexpat.c"
        var $46=HEAP[$45]; //@line 816 "pyexpat.c"
        var $47=((($46) - 1)&4294967295); //@line 816 "pyexpat.c"
        var $48=HEAP[$rv]; //@line 816 "pyexpat.c"
        var $49=(($48)&4294967295); //@line 816 "pyexpat.c"
        HEAP[$49]=$47; //@line 816 "pyexpat.c"
        var $50=HEAP[$rv]; //@line 816 "pyexpat.c"
        var $51=(($50)&4294967295); //@line 816 "pyexpat.c"
        var $52=HEAP[$51]; //@line 816 "pyexpat.c"
        var $53=((($52))|0)==0; //@line 816 "pyexpat.c"
        if ($53) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 816 "pyexpat.c"
      case 9: // $bb8
        var $54=HEAP[$rv]; //@line 816 "pyexpat.c"
        var $55=(($54+4)&4294967295); //@line 816 "pyexpat.c"
        var $56=HEAP[$55]; //@line 816 "pyexpat.c"
        var $57=(($56+24)&4294967295); //@line 816 "pyexpat.c"
        var $58=HEAP[$57]; //@line 816 "pyexpat.c"
        var $59=HEAP[$rv]; //@line 816 "pyexpat.c"
        FUNCTION_TABLE[$58]($59); //@line 816 "pyexpat.c"
        __label__ = 10; break; //@line 816 "pyexpat.c"
      case 10: // $bb9
        __label__ = 11; break; //@line 816 "pyexpat.c"
      case 11: // $bb10
        __label__ = 12; break; //@line 816 "pyexpat.c"
      case 12: // $return
        STACKTOP = __stackBase__;
        return; //@line 816 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_DefaultHandler($userData, $s, $len) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr=__stackBase__;
        var $s_addr=__stackBase__+4;
        var $len_addr=__stackBase__+8;
        var $iftmp_55=__stackBase__+12;
        var $self=__stackBase__+16;
        var $args=__stackBase__+20;
        var $rv=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$userData_addr]=$userData;
        HEAP[$s_addr]=$s;
        HEAP[$len_addr]=$len;
        var $0=HEAP[$userData_addr]; //@line 829 "pyexpat.c"
        var $1=$0; //@line 829 "pyexpat.c"
        HEAP[$self]=$1; //@line 829 "pyexpat.c"
        HEAP[$args]=0; //@line 829 "pyexpat.c"
        HEAP[$rv]=0; //@line 829 "pyexpat.c"
        var $2=HEAP[$self]; //@line 829 "pyexpat.c"
        var $3=_have_handler($2, 11); //@line 829 "pyexpat.c"
        var $4=((($3))|0)!=0; //@line 829 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 13; break; } //@line 829 "pyexpat.c"
      case 1: // $bb
        var $5=HEAP[$self]; //@line 829 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 829 "pyexpat.c"
        var $7=((($6))|0) < 0; //@line 829 "pyexpat.c"
        if ($7) { __label__ = 14; break; } else { __label__ = 2; break; } //@line 829 "pyexpat.c"
      case 2: // $bb1
        var $8=HEAP[$self]; //@line 829 "pyexpat.c"
        var $9=(($8+12)&4294967295); //@line 829 "pyexpat.c"
        var $10=HEAP[$9]; //@line 829 "pyexpat.c"
        var $11=((($10))|0)!=0; //@line 829 "pyexpat.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 829 "pyexpat.c"
      case 3: // $bb2
        var $12=HEAP[$s_addr]; //@line 829 "pyexpat.c"
        var $13=HEAP[$len_addr]; //@line 829 "pyexpat.c"
        var $14=_conv_string_len_to_unicode($12, $13); //@line 829 "pyexpat.c"
        HEAP[$iftmp_55]=$14; //@line 829 "pyexpat.c"
        __label__ = 5; break; //@line 829 "pyexpat.c"
      case 4: // $bb3
        var $15=HEAP[$s_addr]; //@line 829 "pyexpat.c"
        var $16=HEAP[$len_addr]; //@line 829 "pyexpat.c"
        var $17=_conv_string_len_to_utf8($15, $16); //@line 829 "pyexpat.c"
        HEAP[$iftmp_55]=$17; //@line 829 "pyexpat.c"
        __label__ = 5; break; //@line 829 "pyexpat.c"
      case 5: // $bb4
        var $18=HEAP[$iftmp_55]; //@line 829 "pyexpat.c"
        var $19=_Py_BuildValue(((__str10)&4294967295), $18); //@line 829 "pyexpat.c"
        HEAP[$args]=$19; //@line 829 "pyexpat.c"
        var $20=HEAP[$args]; //@line 829 "pyexpat.c"
        var $21=($20)==0; //@line 829 "pyexpat.c"
        if ($21) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 829 "pyexpat.c"
      case 6: // $bb5
        var $22=HEAP[$self]; //@line 829 "pyexpat.c"
        _flag_error($22); //@line 829 "pyexpat.c"
        __label__ = 14; break; //@line 829 "pyexpat.c"
      case 7: // $bb6
        var $23=HEAP[$self]; //@line 829 "pyexpat.c"
        var $24=(($23+24)&4294967295); //@line 829 "pyexpat.c"
        HEAP[$24]=1; //@line 829 "pyexpat.c"
        var $25=HEAP[$self]; //@line 829 "pyexpat.c"
        var $26=(($25+48)&4294967295); //@line 829 "pyexpat.c"
        var $27=HEAP[$26]; //@line 829 "pyexpat.c"
        var $28=(($27+44)&4294967295); //@line 829 "pyexpat.c"
        var $29=HEAP[$28]; //@line 829 "pyexpat.c"
        var $30=_getcode(11, ((__str37)&4294967295), 833); //@line 829 "pyexpat.c"
        var $31=HEAP[$args]; //@line 829 "pyexpat.c"
        var $32=HEAP[$self]; //@line 829 "pyexpat.c"
        var $33=_call_with_frame($30, $29, $31, $32); //@line 829 "pyexpat.c"
        HEAP[$rv]=$33; //@line 829 "pyexpat.c"
        var $34=HEAP[$self]; //@line 829 "pyexpat.c"
        var $35=(($34+24)&4294967295); //@line 829 "pyexpat.c"
        HEAP[$35]=0; //@line 829 "pyexpat.c"
        var $36=HEAP[$args]; //@line 829 "pyexpat.c"
        var $37=(($36)&4294967295); //@line 829 "pyexpat.c"
        var $38=HEAP[$37]; //@line 829 "pyexpat.c"
        var $39=((($38) - 1)&4294967295); //@line 829 "pyexpat.c"
        var $40=HEAP[$args]; //@line 829 "pyexpat.c"
        var $41=(($40)&4294967295); //@line 829 "pyexpat.c"
        HEAP[$41]=$39; //@line 829 "pyexpat.c"
        var $42=HEAP[$args]; //@line 829 "pyexpat.c"
        var $43=(($42)&4294967295); //@line 829 "pyexpat.c"
        var $44=HEAP[$43]; //@line 829 "pyexpat.c"
        var $45=((($44))|0)==0; //@line 829 "pyexpat.c"
        if ($45) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 829 "pyexpat.c"
      case 8: // $bb7
        var $46=HEAP[$args]; //@line 829 "pyexpat.c"
        var $47=(($46+4)&4294967295); //@line 829 "pyexpat.c"
        var $48=HEAP[$47]; //@line 829 "pyexpat.c"
        var $49=(($48+24)&4294967295); //@line 829 "pyexpat.c"
        var $50=HEAP[$49]; //@line 829 "pyexpat.c"
        var $51=HEAP[$args]; //@line 829 "pyexpat.c"
        FUNCTION_TABLE[$50]($51); //@line 829 "pyexpat.c"
        __label__ = 9; break; //@line 829 "pyexpat.c"
      case 9: // $bb8
        var $52=HEAP[$rv]; //@line 829 "pyexpat.c"
        var $53=($52)==0; //@line 829 "pyexpat.c"
        if ($53) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 829 "pyexpat.c"
      case 10: // $bb9
        var $54=HEAP[$self]; //@line 829 "pyexpat.c"
        _flag_error($54); //@line 829 "pyexpat.c"
        __label__ = 14; break; //@line 829 "pyexpat.c"
      case 11: // $bb10
        var $55=HEAP[$rv]; //@line 829 "pyexpat.c"
        var $56=(($55)&4294967295); //@line 829 "pyexpat.c"
        var $57=HEAP[$56]; //@line 829 "pyexpat.c"
        var $58=((($57) - 1)&4294967295); //@line 829 "pyexpat.c"
        var $59=HEAP[$rv]; //@line 829 "pyexpat.c"
        var $60=(($59)&4294967295); //@line 829 "pyexpat.c"
        HEAP[$60]=$58; //@line 829 "pyexpat.c"
        var $61=HEAP[$rv]; //@line 829 "pyexpat.c"
        var $62=(($61)&4294967295); //@line 829 "pyexpat.c"
        var $63=HEAP[$62]; //@line 829 "pyexpat.c"
        var $64=((($63))|0)==0; //@line 829 "pyexpat.c"
        if ($64) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 829 "pyexpat.c"
      case 12: // $bb11
        var $65=HEAP[$rv]; //@line 829 "pyexpat.c"
        var $66=(($65+4)&4294967295); //@line 829 "pyexpat.c"
        var $67=HEAP[$66]; //@line 829 "pyexpat.c"
        var $68=(($67+24)&4294967295); //@line 829 "pyexpat.c"
        var $69=HEAP[$68]; //@line 829 "pyexpat.c"
        var $70=HEAP[$rv]; //@line 829 "pyexpat.c"
        FUNCTION_TABLE[$69]($70); //@line 829 "pyexpat.c"
        __label__ = 13; break; //@line 829 "pyexpat.c"
      case 13: // $bb12
        __label__ = 14; break; //@line 829 "pyexpat.c"
      case 14: // $bb13
        __label__ = 15; break; //@line 829 "pyexpat.c"
      case 15: // $return
        STACKTOP = __stackBase__;
        return; //@line 829 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_DefaultHandlerExpandHandler($userData, $s, $len) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr=__stackBase__;
        var $s_addr=__stackBase__+4;
        var $len_addr=__stackBase__+8;
        var $iftmp_56=__stackBase__+12;
        var $self=__stackBase__+16;
        var $args=__stackBase__+20;
        var $rv=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$userData_addr]=$userData;
        HEAP[$s_addr]=$s;
        HEAP[$len_addr]=$len;
        var $0=HEAP[$userData_addr]; //@line 835 "pyexpat.c"
        var $1=$0; //@line 835 "pyexpat.c"
        HEAP[$self]=$1; //@line 835 "pyexpat.c"
        HEAP[$args]=0; //@line 835 "pyexpat.c"
        HEAP[$rv]=0; //@line 835 "pyexpat.c"
        var $2=HEAP[$self]; //@line 835 "pyexpat.c"
        var $3=_have_handler($2, 12); //@line 835 "pyexpat.c"
        var $4=((($3))|0)!=0; //@line 835 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 13; break; } //@line 835 "pyexpat.c"
      case 1: // $bb
        var $5=HEAP[$self]; //@line 835 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 835 "pyexpat.c"
        var $7=((($6))|0) < 0; //@line 835 "pyexpat.c"
        if ($7) { __label__ = 14; break; } else { __label__ = 2; break; } //@line 835 "pyexpat.c"
      case 2: // $bb1
        var $8=HEAP[$self]; //@line 835 "pyexpat.c"
        var $9=(($8+12)&4294967295); //@line 835 "pyexpat.c"
        var $10=HEAP[$9]; //@line 835 "pyexpat.c"
        var $11=((($10))|0)!=0; //@line 835 "pyexpat.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 835 "pyexpat.c"
      case 3: // $bb2
        var $12=HEAP[$s_addr]; //@line 835 "pyexpat.c"
        var $13=HEAP[$len_addr]; //@line 835 "pyexpat.c"
        var $14=_conv_string_len_to_unicode($12, $13); //@line 835 "pyexpat.c"
        HEAP[$iftmp_56]=$14; //@line 835 "pyexpat.c"
        __label__ = 5; break; //@line 835 "pyexpat.c"
      case 4: // $bb3
        var $15=HEAP[$s_addr]; //@line 835 "pyexpat.c"
        var $16=HEAP[$len_addr]; //@line 835 "pyexpat.c"
        var $17=_conv_string_len_to_utf8($15, $16); //@line 835 "pyexpat.c"
        HEAP[$iftmp_56]=$17; //@line 835 "pyexpat.c"
        __label__ = 5; break; //@line 835 "pyexpat.c"
      case 5: // $bb4
        var $18=HEAP[$iftmp_56]; //@line 835 "pyexpat.c"
        var $19=_Py_BuildValue(((__str10)&4294967295), $18); //@line 835 "pyexpat.c"
        HEAP[$args]=$19; //@line 835 "pyexpat.c"
        var $20=HEAP[$args]; //@line 835 "pyexpat.c"
        var $21=($20)==0; //@line 835 "pyexpat.c"
        if ($21) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 835 "pyexpat.c"
      case 6: // $bb5
        var $22=HEAP[$self]; //@line 835 "pyexpat.c"
        _flag_error($22); //@line 835 "pyexpat.c"
        __label__ = 14; break; //@line 835 "pyexpat.c"
      case 7: // $bb6
        var $23=HEAP[$self]; //@line 835 "pyexpat.c"
        var $24=(($23+24)&4294967295); //@line 835 "pyexpat.c"
        HEAP[$24]=1; //@line 835 "pyexpat.c"
        var $25=HEAP[$self]; //@line 835 "pyexpat.c"
        var $26=(($25+48)&4294967295); //@line 835 "pyexpat.c"
        var $27=HEAP[$26]; //@line 835 "pyexpat.c"
        var $28=(($27+48)&4294967295); //@line 835 "pyexpat.c"
        var $29=HEAP[$28]; //@line 835 "pyexpat.c"
        var $30=_getcode(12, ((__str38)&4294967295), 839); //@line 835 "pyexpat.c"
        var $31=HEAP[$args]; //@line 835 "pyexpat.c"
        var $32=HEAP[$self]; //@line 835 "pyexpat.c"
        var $33=_call_with_frame($30, $29, $31, $32); //@line 835 "pyexpat.c"
        HEAP[$rv]=$33; //@line 835 "pyexpat.c"
        var $34=HEAP[$self]; //@line 835 "pyexpat.c"
        var $35=(($34+24)&4294967295); //@line 835 "pyexpat.c"
        HEAP[$35]=0; //@line 835 "pyexpat.c"
        var $36=HEAP[$args]; //@line 835 "pyexpat.c"
        var $37=(($36)&4294967295); //@line 835 "pyexpat.c"
        var $38=HEAP[$37]; //@line 835 "pyexpat.c"
        var $39=((($38) - 1)&4294967295); //@line 835 "pyexpat.c"
        var $40=HEAP[$args]; //@line 835 "pyexpat.c"
        var $41=(($40)&4294967295); //@line 835 "pyexpat.c"
        HEAP[$41]=$39; //@line 835 "pyexpat.c"
        var $42=HEAP[$args]; //@line 835 "pyexpat.c"
        var $43=(($42)&4294967295); //@line 835 "pyexpat.c"
        var $44=HEAP[$43]; //@line 835 "pyexpat.c"
        var $45=((($44))|0)==0; //@line 835 "pyexpat.c"
        if ($45) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 835 "pyexpat.c"
      case 8: // $bb7
        var $46=HEAP[$args]; //@line 835 "pyexpat.c"
        var $47=(($46+4)&4294967295); //@line 835 "pyexpat.c"
        var $48=HEAP[$47]; //@line 835 "pyexpat.c"
        var $49=(($48+24)&4294967295); //@line 835 "pyexpat.c"
        var $50=HEAP[$49]; //@line 835 "pyexpat.c"
        var $51=HEAP[$args]; //@line 835 "pyexpat.c"
        FUNCTION_TABLE[$50]($51); //@line 835 "pyexpat.c"
        __label__ = 9; break; //@line 835 "pyexpat.c"
      case 9: // $bb8
        var $52=HEAP[$rv]; //@line 835 "pyexpat.c"
        var $53=($52)==0; //@line 835 "pyexpat.c"
        if ($53) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 835 "pyexpat.c"
      case 10: // $bb9
        var $54=HEAP[$self]; //@line 835 "pyexpat.c"
        _flag_error($54); //@line 835 "pyexpat.c"
        __label__ = 14; break; //@line 835 "pyexpat.c"
      case 11: // $bb10
        var $55=HEAP[$rv]; //@line 835 "pyexpat.c"
        var $56=(($55)&4294967295); //@line 835 "pyexpat.c"
        var $57=HEAP[$56]; //@line 835 "pyexpat.c"
        var $58=((($57) - 1)&4294967295); //@line 835 "pyexpat.c"
        var $59=HEAP[$rv]; //@line 835 "pyexpat.c"
        var $60=(($59)&4294967295); //@line 835 "pyexpat.c"
        HEAP[$60]=$58; //@line 835 "pyexpat.c"
        var $61=HEAP[$rv]; //@line 835 "pyexpat.c"
        var $62=(($61)&4294967295); //@line 835 "pyexpat.c"
        var $63=HEAP[$62]; //@line 835 "pyexpat.c"
        var $64=((($63))|0)==0; //@line 835 "pyexpat.c"
        if ($64) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 835 "pyexpat.c"
      case 12: // $bb11
        var $65=HEAP[$rv]; //@line 835 "pyexpat.c"
        var $66=(($65+4)&4294967295); //@line 835 "pyexpat.c"
        var $67=HEAP[$66]; //@line 835 "pyexpat.c"
        var $68=(($67+24)&4294967295); //@line 835 "pyexpat.c"
        var $69=HEAP[$68]; //@line 835 "pyexpat.c"
        var $70=HEAP[$rv]; //@line 835 "pyexpat.c"
        FUNCTION_TABLE[$69]($70); //@line 835 "pyexpat.c"
        __label__ = 13; break; //@line 835 "pyexpat.c"
      case 13: // $bb12
        __label__ = 14; break; //@line 835 "pyexpat.c"
      case 14: // $bb13
        __label__ = 15; break; //@line 835 "pyexpat.c"
      case 15: // $return
        STACKTOP = __stackBase__;
        return; //@line 835 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_NotStandaloneHandler($userData) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $self=__stackBase__+12;
        var $args=__stackBase__+16;
        var $rv=__stackBase__+20;
        var $rc=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$userData_addr]=$userData;
        var $1=HEAP[$userData_addr]; //@line 842 "pyexpat.c"
        var $2=$1; //@line 842 "pyexpat.c"
        HEAP[$self]=$2; //@line 842 "pyexpat.c"
        HEAP[$args]=0; //@line 842 "pyexpat.c"
        HEAP[$rv]=0; //@line 842 "pyexpat.c"
        HEAP[$rc]=0; //@line 842 "pyexpat.c"
        var $3=HEAP[$self]; //@line 842 "pyexpat.c"
        var $4=_have_handler($3, 13); //@line 842 "pyexpat.c"
        var $5=((($4))|0)!=0; //@line 842 "pyexpat.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 11; break; } //@line 842 "pyexpat.c"
      case 1: // $bb
        var $6=HEAP[$self]; //@line 842 "pyexpat.c"
        var $7=_flush_character_buffer($6); //@line 842 "pyexpat.c"
        var $8=((($7))|0) < 0; //@line 842 "pyexpat.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 842 "pyexpat.c"
      case 2: // $bb1
        var $9=HEAP[$rc]; //@line 842 "pyexpat.c"
        HEAP[$0]=$9; //@line 842 "pyexpat.c"
        __label__ = 12; break; //@line 842 "pyexpat.c"
      case 3: // $bb2
        var $10=_Py_BuildValue(((__str34)&4294967295)); //@line 842 "pyexpat.c"
        HEAP[$args]=$10; //@line 842 "pyexpat.c"
        var $11=HEAP[$args]; //@line 842 "pyexpat.c"
        var $12=($11)==0; //@line 842 "pyexpat.c"
        if ($12) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 842 "pyexpat.c"
      case 4: // $bb3
        var $13=HEAP[$self]; //@line 842 "pyexpat.c"
        _flag_error($13); //@line 842 "pyexpat.c"
        var $14=HEAP[$rc]; //@line 842 "pyexpat.c"
        HEAP[$0]=$14; //@line 842 "pyexpat.c"
        __label__ = 12; break; //@line 842 "pyexpat.c"
      case 5: // $bb4
        var $15=HEAP[$self]; //@line 842 "pyexpat.c"
        var $16=(($15+24)&4294967295); //@line 842 "pyexpat.c"
        HEAP[$16]=1; //@line 842 "pyexpat.c"
        var $17=HEAP[$self]; //@line 842 "pyexpat.c"
        var $18=(($17+48)&4294967295); //@line 842 "pyexpat.c"
        var $19=HEAP[$18]; //@line 842 "pyexpat.c"
        var $20=(($19+52)&4294967295); //@line 842 "pyexpat.c"
        var $21=HEAP[$20]; //@line 842 "pyexpat.c"
        var $22=_getcode(13, ((__str39)&4294967295), 844); //@line 842 "pyexpat.c"
        var $23=HEAP[$args]; //@line 842 "pyexpat.c"
        var $24=HEAP[$self]; //@line 842 "pyexpat.c"
        var $25=_call_with_frame($22, $21, $23, $24); //@line 842 "pyexpat.c"
        HEAP[$rv]=$25; //@line 842 "pyexpat.c"
        var $26=HEAP[$self]; //@line 842 "pyexpat.c"
        var $27=(($26+24)&4294967295); //@line 842 "pyexpat.c"
        HEAP[$27]=0; //@line 842 "pyexpat.c"
        var $28=HEAP[$args]; //@line 842 "pyexpat.c"
        var $29=(($28)&4294967295); //@line 842 "pyexpat.c"
        var $30=HEAP[$29]; //@line 842 "pyexpat.c"
        var $31=((($30) - 1)&4294967295); //@line 842 "pyexpat.c"
        var $32=HEAP[$args]; //@line 842 "pyexpat.c"
        var $33=(($32)&4294967295); //@line 842 "pyexpat.c"
        HEAP[$33]=$31; //@line 842 "pyexpat.c"
        var $34=HEAP[$args]; //@line 842 "pyexpat.c"
        var $35=(($34)&4294967295); //@line 842 "pyexpat.c"
        var $36=HEAP[$35]; //@line 842 "pyexpat.c"
        var $37=((($36))|0)==0; //@line 842 "pyexpat.c"
        if ($37) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 842 "pyexpat.c"
      case 6: // $bb5
        var $38=HEAP[$args]; //@line 842 "pyexpat.c"
        var $39=(($38+4)&4294967295); //@line 842 "pyexpat.c"
        var $40=HEAP[$39]; //@line 842 "pyexpat.c"
        var $41=(($40+24)&4294967295); //@line 842 "pyexpat.c"
        var $42=HEAP[$41]; //@line 842 "pyexpat.c"
        var $43=HEAP[$args]; //@line 842 "pyexpat.c"
        FUNCTION_TABLE[$42]($43); //@line 842 "pyexpat.c"
        __label__ = 7; break; //@line 842 "pyexpat.c"
      case 7: // $bb6
        var $44=HEAP[$rv]; //@line 842 "pyexpat.c"
        var $45=($44)==0; //@line 842 "pyexpat.c"
        if ($45) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 842 "pyexpat.c"
      case 8: // $bb7
        var $46=HEAP[$self]; //@line 842 "pyexpat.c"
        _flag_error($46); //@line 842 "pyexpat.c"
        var $47=HEAP[$rc]; //@line 842 "pyexpat.c"
        HEAP[$0]=$47; //@line 842 "pyexpat.c"
        __label__ = 12; break; //@line 842 "pyexpat.c"
      case 9: // $bb8
        var $48=HEAP[$rv]; //@line 842 "pyexpat.c"
        var $49=_PyInt_AsLong($48); //@line 842 "pyexpat.c"
        HEAP[$rc]=$49; //@line 842 "pyexpat.c"
        var $50=HEAP[$rv]; //@line 842 "pyexpat.c"
        var $51=(($50)&4294967295); //@line 842 "pyexpat.c"
        var $52=HEAP[$51]; //@line 842 "pyexpat.c"
        var $53=((($52) - 1)&4294967295); //@line 842 "pyexpat.c"
        var $54=HEAP[$rv]; //@line 842 "pyexpat.c"
        var $55=(($54)&4294967295); //@line 842 "pyexpat.c"
        HEAP[$55]=$53; //@line 842 "pyexpat.c"
        var $56=HEAP[$rv]; //@line 842 "pyexpat.c"
        var $57=(($56)&4294967295); //@line 842 "pyexpat.c"
        var $58=HEAP[$57]; //@line 842 "pyexpat.c"
        var $59=((($58))|0)==0; //@line 842 "pyexpat.c"
        if ($59) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 842 "pyexpat.c"
      case 10: // $bb9
        var $60=HEAP[$rv]; //@line 842 "pyexpat.c"
        var $61=(($60+4)&4294967295); //@line 842 "pyexpat.c"
        var $62=HEAP[$61]; //@line 842 "pyexpat.c"
        var $63=(($62+24)&4294967295); //@line 842 "pyexpat.c"
        var $64=HEAP[$63]; //@line 842 "pyexpat.c"
        var $65=HEAP[$rv]; //@line 842 "pyexpat.c"
        FUNCTION_TABLE[$64]($65); //@line 842 "pyexpat.c"
        __label__ = 11; break; //@line 842 "pyexpat.c"
      case 11: // $bb10
        var $66=HEAP[$rc]; //@line 842 "pyexpat.c"
        HEAP[$0]=$66; //@line 842 "pyexpat.c"
        __label__ = 12; break; //@line 842 "pyexpat.c"
      case 12: // $bb11
        var $67=HEAP[$0]; //@line 842 "pyexpat.c"
        HEAP[$retval]=$67; //@line 842 "pyexpat.c"
        __label__ = 13; break; //@line 842 "pyexpat.c"
      case 13: // $return
        var $retval12=HEAP[$retval]; //@line 842 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval12; //@line 842 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_ExternalEntityRefHandler($parser, $context, $base, $systemId, $publicId) {
    var __stackBase__  = STACKTOP; STACKTOP += 48; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 48);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $context_addr=__stackBase__+4;
        var $base_addr=__stackBase__+8;
        var $systemId_addr=__stackBase__+12;
        var $publicId_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $iftmp_58=__stackBase__+24;
        var $0=__stackBase__+28;
        var $self=__stackBase__+32;
        var $args=__stackBase__+36;
        var $rv=__stackBase__+40;
        var $rc=__stackBase__+44;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$context_addr]=$context;
        HEAP[$base_addr]=$base;
        HEAP[$systemId_addr]=$systemId;
        HEAP[$publicId_addr]=$publicId;
        var $1=HEAP[$parser_addr]; //@line 846 "pyexpat.c"
        var $2=$1; //@line 846 "pyexpat.c"
        var $3=HEAP[$2]; //@line 846 "pyexpat.c"
        var $4=$3; //@line 846 "pyexpat.c"
        HEAP[$self]=$4; //@line 846 "pyexpat.c"
        HEAP[$args]=0; //@line 846 "pyexpat.c"
        HEAP[$rv]=0; //@line 846 "pyexpat.c"
        HEAP[$rc]=0; //@line 846 "pyexpat.c"
        var $5=HEAP[$self]; //@line 846 "pyexpat.c"
        var $6=_have_handler($5, 14); //@line 846 "pyexpat.c"
        var $7=((($6))|0)!=0; //@line 846 "pyexpat.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 14; break; } //@line 846 "pyexpat.c"
      case 1: // $bb
        var $8=HEAP[$self]; //@line 846 "pyexpat.c"
        var $9=_flush_character_buffer($8); //@line 846 "pyexpat.c"
        var $10=((($9))|0) < 0; //@line 846 "pyexpat.c"
        if ($10) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 846 "pyexpat.c"
      case 2: // $bb1
        var $11=HEAP[$rc]; //@line 846 "pyexpat.c"
        HEAP[$0]=$11; //@line 846 "pyexpat.c"
        __label__ = 15; break; //@line 846 "pyexpat.c"
      case 3: // $bb2
        var $12=HEAP[$self]; //@line 846 "pyexpat.c"
        var $13=HEAP[$publicId_addr]; //@line 846 "pyexpat.c"
        var $14=_string_intern($12, $13); //@line 846 "pyexpat.c"
        var $15=HEAP[$self]; //@line 846 "pyexpat.c"
        var $16=HEAP[$systemId_addr]; //@line 846 "pyexpat.c"
        var $17=_string_intern($15, $16); //@line 846 "pyexpat.c"
        var $18=HEAP[$self]; //@line 846 "pyexpat.c"
        var $19=HEAP[$base_addr]; //@line 846 "pyexpat.c"
        var $20=_string_intern($18, $19); //@line 846 "pyexpat.c"
        var $21=HEAP[$self]; //@line 846 "pyexpat.c"
        var $22=(($21+12)&4294967295); //@line 846 "pyexpat.c"
        var $23=HEAP[$22]; //@line 846 "pyexpat.c"
        var $24=((($23))|0)!=0; //@line 846 "pyexpat.c"
        if ($24) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 846 "pyexpat.c"
      case 4: // $bb3
        HEAP[$iftmp_58]=(FUNCTION_TABLE_OFFSET + 4); //@line 846 "pyexpat.c"
        __label__ = 6; break; //@line 846 "pyexpat.c"
      case 5: // $bb4
        HEAP[$iftmp_58]=(FUNCTION_TABLE_OFFSET + 6); //@line 846 "pyexpat.c"
        __label__ = 6; break; //@line 846 "pyexpat.c"
      case 6: // $bb5
        var $25=HEAP[$iftmp_58]; //@line 846 "pyexpat.c"
        var $26=HEAP[$context_addr]; //@line 846 "pyexpat.c"
        var $27=_Py_BuildValue(((__str40)&4294967295), $25, $26, $20, $17, $14); //@line 846 "pyexpat.c"
        HEAP[$args]=$27; //@line 846 "pyexpat.c"
        var $28=HEAP[$args]; //@line 846 "pyexpat.c"
        var $29=($28)==0; //@line 846 "pyexpat.c"
        if ($29) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 846 "pyexpat.c"
      case 7: // $bb6
        var $30=HEAP[$self]; //@line 846 "pyexpat.c"
        _flag_error($30); //@line 846 "pyexpat.c"
        var $31=HEAP[$rc]; //@line 846 "pyexpat.c"
        HEAP[$0]=$31; //@line 846 "pyexpat.c"
        __label__ = 15; break; //@line 846 "pyexpat.c"
      case 8: // $bb7
        var $32=HEAP[$self]; //@line 846 "pyexpat.c"
        var $33=(($32+24)&4294967295); //@line 846 "pyexpat.c"
        HEAP[$33]=1; //@line 846 "pyexpat.c"
        var $34=HEAP[$self]; //@line 846 "pyexpat.c"
        var $35=(($34+48)&4294967295); //@line 846 "pyexpat.c"
        var $36=HEAP[$35]; //@line 846 "pyexpat.c"
        var $37=(($36+56)&4294967295); //@line 846 "pyexpat.c"
        var $38=HEAP[$37]; //@line 846 "pyexpat.c"
        var $39=_getcode(14, ((__str41)&4294967295), 857); //@line 846 "pyexpat.c"
        var $40=HEAP[$args]; //@line 846 "pyexpat.c"
        var $41=HEAP[$self]; //@line 846 "pyexpat.c"
        var $42=_call_with_frame($39, $38, $40, $41); //@line 846 "pyexpat.c"
        HEAP[$rv]=$42; //@line 846 "pyexpat.c"
        var $43=HEAP[$self]; //@line 846 "pyexpat.c"
        var $44=(($43+24)&4294967295); //@line 846 "pyexpat.c"
        HEAP[$44]=0; //@line 846 "pyexpat.c"
        var $45=HEAP[$args]; //@line 846 "pyexpat.c"
        var $46=(($45)&4294967295); //@line 846 "pyexpat.c"
        var $47=HEAP[$46]; //@line 846 "pyexpat.c"
        var $48=((($47) - 1)&4294967295); //@line 846 "pyexpat.c"
        var $49=HEAP[$args]; //@line 846 "pyexpat.c"
        var $50=(($49)&4294967295); //@line 846 "pyexpat.c"
        HEAP[$50]=$48; //@line 846 "pyexpat.c"
        var $51=HEAP[$args]; //@line 846 "pyexpat.c"
        var $52=(($51)&4294967295); //@line 846 "pyexpat.c"
        var $53=HEAP[$52]; //@line 846 "pyexpat.c"
        var $54=((($53))|0)==0; //@line 846 "pyexpat.c"
        if ($54) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 846 "pyexpat.c"
      case 9: // $bb8
        var $55=HEAP[$args]; //@line 846 "pyexpat.c"
        var $56=(($55+4)&4294967295); //@line 846 "pyexpat.c"
        var $57=HEAP[$56]; //@line 846 "pyexpat.c"
        var $58=(($57+24)&4294967295); //@line 846 "pyexpat.c"
        var $59=HEAP[$58]; //@line 846 "pyexpat.c"
        var $60=HEAP[$args]; //@line 846 "pyexpat.c"
        FUNCTION_TABLE[$59]($60); //@line 846 "pyexpat.c"
        __label__ = 10; break; //@line 846 "pyexpat.c"
      case 10: // $bb9
        var $61=HEAP[$rv]; //@line 846 "pyexpat.c"
        var $62=($61)==0; //@line 846 "pyexpat.c"
        if ($62) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 846 "pyexpat.c"
      case 11: // $bb10
        var $63=HEAP[$self]; //@line 846 "pyexpat.c"
        _flag_error($63); //@line 846 "pyexpat.c"
        var $64=HEAP[$rc]; //@line 846 "pyexpat.c"
        HEAP[$0]=$64; //@line 846 "pyexpat.c"
        __label__ = 15; break; //@line 846 "pyexpat.c"
      case 12: // $bb11
        var $65=HEAP[$rv]; //@line 846 "pyexpat.c"
        var $66=_PyInt_AsLong($65); //@line 846 "pyexpat.c"
        HEAP[$rc]=$66; //@line 846 "pyexpat.c"
        var $67=HEAP[$rv]; //@line 846 "pyexpat.c"
        var $68=(($67)&4294967295); //@line 846 "pyexpat.c"
        var $69=HEAP[$68]; //@line 846 "pyexpat.c"
        var $70=((($69) - 1)&4294967295); //@line 846 "pyexpat.c"
        var $71=HEAP[$rv]; //@line 846 "pyexpat.c"
        var $72=(($71)&4294967295); //@line 846 "pyexpat.c"
        HEAP[$72]=$70; //@line 846 "pyexpat.c"
        var $73=HEAP[$rv]; //@line 846 "pyexpat.c"
        var $74=(($73)&4294967295); //@line 846 "pyexpat.c"
        var $75=HEAP[$74]; //@line 846 "pyexpat.c"
        var $76=((($75))|0)==0; //@line 846 "pyexpat.c"
        if ($76) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 846 "pyexpat.c"
      case 13: // $bb12
        var $77=HEAP[$rv]; //@line 846 "pyexpat.c"
        var $78=(($77+4)&4294967295); //@line 846 "pyexpat.c"
        var $79=HEAP[$78]; //@line 846 "pyexpat.c"
        var $80=(($79+24)&4294967295); //@line 846 "pyexpat.c"
        var $81=HEAP[$80]; //@line 846 "pyexpat.c"
        var $82=HEAP[$rv]; //@line 846 "pyexpat.c"
        FUNCTION_TABLE[$81]($82); //@line 846 "pyexpat.c"
        __label__ = 14; break; //@line 846 "pyexpat.c"
      case 14: // $bb13
        var $83=HEAP[$rc]; //@line 846 "pyexpat.c"
        HEAP[$0]=$83; //@line 846 "pyexpat.c"
        __label__ = 15; break; //@line 846 "pyexpat.c"
      case 15: // $bb14
        var $84=HEAP[$0]; //@line 846 "pyexpat.c"
        HEAP[$retval]=$84; //@line 846 "pyexpat.c"
        __label__ = 16; break; //@line 846 "pyexpat.c"
      case 16: // $return
        var $retval15=HEAP[$retval]; //@line 846 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval15; //@line 846 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_StartDoctypeDeclHandler($userData, $doctypeName, $sysid, $pubid, $has_internal_subset) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr=__stackBase__;
        var $doctypeName_addr=__stackBase__+4;
        var $sysid_addr=__stackBase__+8;
        var $pubid_addr=__stackBase__+12;
        var $has_internal_subset_addr=__stackBase__+16;
        var $self=__stackBase__+20;
        var $args=__stackBase__+24;
        var $rv=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$userData_addr]=$userData;
        HEAP[$doctypeName_addr]=$doctypeName;
        HEAP[$sysid_addr]=$sysid;
        HEAP[$pubid_addr]=$pubid;
        HEAP[$has_internal_subset_addr]=$has_internal_subset;
        var $0=HEAP[$userData_addr]; //@line 861 "pyexpat.c"
        var $1=$0; //@line 861 "pyexpat.c"
        HEAP[$self]=$1; //@line 861 "pyexpat.c"
        HEAP[$args]=0; //@line 861 "pyexpat.c"
        HEAP[$rv]=0; //@line 861 "pyexpat.c"
        var $2=HEAP[$self]; //@line 861 "pyexpat.c"
        var $3=_have_handler($2, 15); //@line 861 "pyexpat.c"
        var $4=((($3))|0)!=0; //@line 861 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 10; break; } //@line 861 "pyexpat.c"
      case 1: // $bb
        var $5=HEAP[$self]; //@line 861 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 861 "pyexpat.c"
        var $7=((($6))|0) < 0; //@line 861 "pyexpat.c"
        if ($7) { __label__ = 11; break; } else { __label__ = 2; break; } //@line 861 "pyexpat.c"
      case 2: // $bb1
        var $8=HEAP[$self]; //@line 861 "pyexpat.c"
        var $9=HEAP[$pubid_addr]; //@line 861 "pyexpat.c"
        var $10=_string_intern($8, $9); //@line 861 "pyexpat.c"
        var $11=HEAP[$self]; //@line 861 "pyexpat.c"
        var $12=HEAP[$sysid_addr]; //@line 861 "pyexpat.c"
        var $13=_string_intern($11, $12); //@line 861 "pyexpat.c"
        var $14=HEAP[$self]; //@line 861 "pyexpat.c"
        var $15=HEAP[$doctypeName_addr]; //@line 861 "pyexpat.c"
        var $16=_string_intern($14, $15); //@line 861 "pyexpat.c"
        var $17=HEAP[$has_internal_subset_addr]; //@line 861 "pyexpat.c"
        var $18=_Py_BuildValue(((__str42)&4294967295), $16, $13, $10, $17); //@line 861 "pyexpat.c"
        HEAP[$args]=$18; //@line 861 "pyexpat.c"
        var $19=HEAP[$args]; //@line 861 "pyexpat.c"
        var $20=($19)==0; //@line 861 "pyexpat.c"
        if ($20) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 861 "pyexpat.c"
      case 3: // $bb2
        var $21=HEAP[$self]; //@line 861 "pyexpat.c"
        _flag_error($21); //@line 861 "pyexpat.c"
        __label__ = 11; break; //@line 861 "pyexpat.c"
      case 4: // $bb3
        var $22=HEAP[$self]; //@line 861 "pyexpat.c"
        var $23=(($22+24)&4294967295); //@line 861 "pyexpat.c"
        HEAP[$23]=1; //@line 861 "pyexpat.c"
        var $24=HEAP[$self]; //@line 861 "pyexpat.c"
        var $25=(($24+48)&4294967295); //@line 861 "pyexpat.c"
        var $26=HEAP[$25]; //@line 861 "pyexpat.c"
        var $27=(($26+60)&4294967295); //@line 861 "pyexpat.c"
        var $28=HEAP[$27]; //@line 861 "pyexpat.c"
        var $29=_getcode(15, ((__str43)&4294967295), 867); //@line 861 "pyexpat.c"
        var $30=HEAP[$args]; //@line 861 "pyexpat.c"
        var $31=HEAP[$self]; //@line 861 "pyexpat.c"
        var $32=_call_with_frame($29, $28, $30, $31); //@line 861 "pyexpat.c"
        HEAP[$rv]=$32; //@line 861 "pyexpat.c"
        var $33=HEAP[$self]; //@line 861 "pyexpat.c"
        var $34=(($33+24)&4294967295); //@line 861 "pyexpat.c"
        HEAP[$34]=0; //@line 861 "pyexpat.c"
        var $35=HEAP[$args]; //@line 861 "pyexpat.c"
        var $36=(($35)&4294967295); //@line 861 "pyexpat.c"
        var $37=HEAP[$36]; //@line 861 "pyexpat.c"
        var $38=((($37) - 1)&4294967295); //@line 861 "pyexpat.c"
        var $39=HEAP[$args]; //@line 861 "pyexpat.c"
        var $40=(($39)&4294967295); //@line 861 "pyexpat.c"
        HEAP[$40]=$38; //@line 861 "pyexpat.c"
        var $41=HEAP[$args]; //@line 861 "pyexpat.c"
        var $42=(($41)&4294967295); //@line 861 "pyexpat.c"
        var $43=HEAP[$42]; //@line 861 "pyexpat.c"
        var $44=((($43))|0)==0; //@line 861 "pyexpat.c"
        if ($44) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 861 "pyexpat.c"
      case 5: // $bb4
        var $45=HEAP[$args]; //@line 861 "pyexpat.c"
        var $46=(($45+4)&4294967295); //@line 861 "pyexpat.c"
        var $47=HEAP[$46]; //@line 861 "pyexpat.c"
        var $48=(($47+24)&4294967295); //@line 861 "pyexpat.c"
        var $49=HEAP[$48]; //@line 861 "pyexpat.c"
        var $50=HEAP[$args]; //@line 861 "pyexpat.c"
        FUNCTION_TABLE[$49]($50); //@line 861 "pyexpat.c"
        __label__ = 6; break; //@line 861 "pyexpat.c"
      case 6: // $bb5
        var $51=HEAP[$rv]; //@line 861 "pyexpat.c"
        var $52=($51)==0; //@line 861 "pyexpat.c"
        if ($52) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 861 "pyexpat.c"
      case 7: // $bb6
        var $53=HEAP[$self]; //@line 861 "pyexpat.c"
        _flag_error($53); //@line 861 "pyexpat.c"
        __label__ = 11; break; //@line 861 "pyexpat.c"
      case 8: // $bb7
        var $54=HEAP[$rv]; //@line 861 "pyexpat.c"
        var $55=(($54)&4294967295); //@line 861 "pyexpat.c"
        var $56=HEAP[$55]; //@line 861 "pyexpat.c"
        var $57=((($56) - 1)&4294967295); //@line 861 "pyexpat.c"
        var $58=HEAP[$rv]; //@line 861 "pyexpat.c"
        var $59=(($58)&4294967295); //@line 861 "pyexpat.c"
        HEAP[$59]=$57; //@line 861 "pyexpat.c"
        var $60=HEAP[$rv]; //@line 861 "pyexpat.c"
        var $61=(($60)&4294967295); //@line 861 "pyexpat.c"
        var $62=HEAP[$61]; //@line 861 "pyexpat.c"
        var $63=((($62))|0)==0; //@line 861 "pyexpat.c"
        if ($63) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 861 "pyexpat.c"
      case 9: // $bb8
        var $64=HEAP[$rv]; //@line 861 "pyexpat.c"
        var $65=(($64+4)&4294967295); //@line 861 "pyexpat.c"
        var $66=HEAP[$65]; //@line 861 "pyexpat.c"
        var $67=(($66+24)&4294967295); //@line 861 "pyexpat.c"
        var $68=HEAP[$67]; //@line 861 "pyexpat.c"
        var $69=HEAP[$rv]; //@line 861 "pyexpat.c"
        FUNCTION_TABLE[$68]($69); //@line 861 "pyexpat.c"
        __label__ = 10; break; //@line 861 "pyexpat.c"
      case 10: // $bb9
        __label__ = 11; break; //@line 861 "pyexpat.c"
      case 11: // $bb10
        __label__ = 12; break; //@line 861 "pyexpat.c"
      case 12: // $return
        STACKTOP = __stackBase__;
        return; //@line 861 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _my_EndDoctypeDeclHandler($userData) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $userData_addr=__stackBase__;
        var $self=__stackBase__+4;
        var $args=__stackBase__+8;
        var $rv=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$userData_addr]=$userData;
        var $0=HEAP[$userData_addr]; //@line 869 "pyexpat.c"
        var $1=$0; //@line 869 "pyexpat.c"
        HEAP[$self]=$1; //@line 869 "pyexpat.c"
        HEAP[$args]=0; //@line 869 "pyexpat.c"
        HEAP[$rv]=0; //@line 869 "pyexpat.c"
        var $2=HEAP[$self]; //@line 869 "pyexpat.c"
        var $3=_have_handler($2, 16); //@line 869 "pyexpat.c"
        var $4=((($3))|0)!=0; //@line 869 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 10; break; } //@line 869 "pyexpat.c"
      case 1: // $bb
        var $5=HEAP[$self]; //@line 869 "pyexpat.c"
        var $6=_flush_character_buffer($5); //@line 869 "pyexpat.c"
        var $7=((($6))|0) < 0; //@line 869 "pyexpat.c"
        if ($7) { __label__ = 11; break; } else { __label__ = 2; break; } //@line 869 "pyexpat.c"
      case 2: // $bb1
        var $8=_Py_BuildValue(((__str34)&4294967295)); //@line 869 "pyexpat.c"
        HEAP[$args]=$8; //@line 869 "pyexpat.c"
        var $9=HEAP[$args]; //@line 869 "pyexpat.c"
        var $10=($9)==0; //@line 869 "pyexpat.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 869 "pyexpat.c"
      case 3: // $bb2
        var $11=HEAP[$self]; //@line 869 "pyexpat.c"
        _flag_error($11); //@line 869 "pyexpat.c"
        __label__ = 11; break; //@line 869 "pyexpat.c"
      case 4: // $bb3
        var $12=HEAP[$self]; //@line 869 "pyexpat.c"
        var $13=(($12+24)&4294967295); //@line 869 "pyexpat.c"
        HEAP[$13]=1; //@line 869 "pyexpat.c"
        var $14=HEAP[$self]; //@line 869 "pyexpat.c"
        var $15=(($14+48)&4294967295); //@line 869 "pyexpat.c"
        var $16=HEAP[$15]; //@line 869 "pyexpat.c"
        var $17=(($16+64)&4294967295); //@line 869 "pyexpat.c"
        var $18=HEAP[$17]; //@line 869 "pyexpat.c"
        var $19=_getcode(16, ((__str44)&4294967295), 869); //@line 869 "pyexpat.c"
        var $20=HEAP[$args]; //@line 869 "pyexpat.c"
        var $21=HEAP[$self]; //@line 869 "pyexpat.c"
        var $22=_call_with_frame($19, $18, $20, $21); //@line 869 "pyexpat.c"
        HEAP[$rv]=$22; //@line 869 "pyexpat.c"
        var $23=HEAP[$self]; //@line 869 "pyexpat.c"
        var $24=(($23+24)&4294967295); //@line 869 "pyexpat.c"
        HEAP[$24]=0; //@line 869 "pyexpat.c"
        var $25=HEAP[$args]; //@line 869 "pyexpat.c"
        var $26=(($25)&4294967295); //@line 869 "pyexpat.c"
        var $27=HEAP[$26]; //@line 869 "pyexpat.c"
        var $28=((($27) - 1)&4294967295); //@line 869 "pyexpat.c"
        var $29=HEAP[$args]; //@line 869 "pyexpat.c"
        var $30=(($29)&4294967295); //@line 869 "pyexpat.c"
        HEAP[$30]=$28; //@line 869 "pyexpat.c"
        var $31=HEAP[$args]; //@line 869 "pyexpat.c"
        var $32=(($31)&4294967295); //@line 869 "pyexpat.c"
        var $33=HEAP[$32]; //@line 869 "pyexpat.c"
        var $34=((($33))|0)==0; //@line 869 "pyexpat.c"
        if ($34) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 869 "pyexpat.c"
      case 5: // $bb4
        var $35=HEAP[$args]; //@line 869 "pyexpat.c"
        var $36=(($35+4)&4294967295); //@line 869 "pyexpat.c"
        var $37=HEAP[$36]; //@line 869 "pyexpat.c"
        var $38=(($37+24)&4294967295); //@line 869 "pyexpat.c"
        var $39=HEAP[$38]; //@line 869 "pyexpat.c"
        var $40=HEAP[$args]; //@line 869 "pyexpat.c"
        FUNCTION_TABLE[$39]($40); //@line 869 "pyexpat.c"
        __label__ = 6; break; //@line 869 "pyexpat.c"
      case 6: // $bb5
        var $41=HEAP[$rv]; //@line 869 "pyexpat.c"
        var $42=($41)==0; //@line 869 "pyexpat.c"
        if ($42) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 869 "pyexpat.c"
      case 7: // $bb6
        var $43=HEAP[$self]; //@line 869 "pyexpat.c"
        _flag_error($43); //@line 869 "pyexpat.c"
        __label__ = 11; break; //@line 869 "pyexpat.c"
      case 8: // $bb7
        var $44=HEAP[$rv]; //@line 869 "pyexpat.c"
        var $45=(($44)&4294967295); //@line 869 "pyexpat.c"
        var $46=HEAP[$45]; //@line 869 "pyexpat.c"
        var $47=((($46) - 1)&4294967295); //@line 869 "pyexpat.c"
        var $48=HEAP[$rv]; //@line 869 "pyexpat.c"
        var $49=(($48)&4294967295); //@line 869 "pyexpat.c"
        HEAP[$49]=$47; //@line 869 "pyexpat.c"
        var $50=HEAP[$rv]; //@line 869 "pyexpat.c"
        var $51=(($50)&4294967295); //@line 869 "pyexpat.c"
        var $52=HEAP[$51]; //@line 869 "pyexpat.c"
        var $53=((($52))|0)==0; //@line 869 "pyexpat.c"
        if ($53) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 869 "pyexpat.c"
      case 9: // $bb8
        var $54=HEAP[$rv]; //@line 869 "pyexpat.c"
        var $55=(($54+4)&4294967295); //@line 869 "pyexpat.c"
        var $56=HEAP[$55]; //@line 869 "pyexpat.c"
        var $57=(($56+24)&4294967295); //@line 869 "pyexpat.c"
        var $58=HEAP[$57]; //@line 869 "pyexpat.c"
        var $59=HEAP[$rv]; //@line 869 "pyexpat.c"
        FUNCTION_TABLE[$58]($59); //@line 869 "pyexpat.c"
        __label__ = 10; break; //@line 869 "pyexpat.c"
      case 10: // $bb9
        __label__ = 11; break; //@line 869 "pyexpat.c"
      case 11: // $bb10
        __label__ = 12; break; //@line 869 "pyexpat.c"
      case 12: // $return
        STACKTOP = __stackBase__;
        return; //@line 869 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _get_parse_result($self, $rv) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $rv_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$rv_addr]=$rv;
        var $1=_PyErr_Occurred(); //@line 876 "pyexpat.c"
        var $2=($1)!=0; //@line 876 "pyexpat.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 876 "pyexpat.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 877 "pyexpat.c"
        __label__ = 7; break; //@line 877 "pyexpat.c"
      case 2: // $bb1
        var $3=HEAP[$rv_addr]; //@line 879 "pyexpat.c"
        var $4=((($3))|0)==0; //@line 879 "pyexpat.c"
        if ($4) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 879 "pyexpat.c"
      case 3: // $bb2
        var $5=HEAP[$self_addr]; //@line 880 "pyexpat.c"
        var $6=(($5+8)&4294967295); //@line 880 "pyexpat.c"
        var $7=HEAP[$6]; //@line 880 "pyexpat.c"
        var $8=_XML_GetErrorCode($7); //@line 880 "pyexpat.c"
        var $9=HEAP[$self_addr]; //@line 880 "pyexpat.c"
        var $10=_set_error($9, $8); //@line 880 "pyexpat.c"
        HEAP[$0]=$10; //@line 880 "pyexpat.c"
        __label__ = 7; break; //@line 880 "pyexpat.c"
      case 4: // $bb3
        var $11=HEAP[$self_addr]; //@line 882 "pyexpat.c"
        var $12=_flush_character_buffer($11); //@line 882 "pyexpat.c"
        var $13=((($12))|0) < 0; //@line 882 "pyexpat.c"
        if ($13) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 882 "pyexpat.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 883 "pyexpat.c"
        __label__ = 7; break; //@line 883 "pyexpat.c"
      case 6: // $bb5
        var $14=HEAP[$rv_addr]; //@line 885 "pyexpat.c"
        var $15=_PyInt_FromLong($14); //@line 885 "pyexpat.c"
        HEAP[$0]=$15; //@line 885 "pyexpat.c"
        __label__ = 7; break; //@line 885 "pyexpat.c"
      case 7: // $bb6
        var $16=HEAP[$0]; //@line 877 "pyexpat.c"
        HEAP[$retval]=$16; //@line 877 "pyexpat.c"
        __label__ = 8; break; //@line 877 "pyexpat.c"
      case 8: // $return
        var $retval7=HEAP[$retval]; //@line 877 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 877 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _xmlparse_Parse($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $s=__stackBase__+16;
        var $slen=__stackBase__+20;
        var $isFinal=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$isFinal]=0; //@line 897 "pyexpat.c"
        var $1=HEAP[$args_addr]; //@line 899 "pyexpat.c"
        var $2=_PyArg_ParseTuple($1, ((__str45)&4294967295), $s, $slen, $isFinal); //@line 899 "pyexpat.c"
        var $3=((($2))|0)==0; //@line 899 "pyexpat.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 899 "pyexpat.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 900 "pyexpat.c"
        __label__ = 3; break; //@line 900 "pyexpat.c"
      case 2: // $bb1
        var $4=HEAP[$isFinal]; //@line 902 "pyexpat.c"
        var $5=HEAP[$slen]; //@line 902 "pyexpat.c"
        var $6=HEAP[$s]; //@line 902 "pyexpat.c"
        var $7=HEAP[$self_addr]; //@line 902 "pyexpat.c"
        var $8=(($7+8)&4294967295); //@line 902 "pyexpat.c"
        var $9=HEAP[$8]; //@line 902 "pyexpat.c"
        var $10=_XML_Parse($9, $6, $5, $4); //@line 902 "pyexpat.c"
        var $11=HEAP[$self_addr]; //@line 902 "pyexpat.c"
        var $12=_get_parse_result($11, $10); //@line 902 "pyexpat.c"
        HEAP[$0]=$12; //@line 902 "pyexpat.c"
        __label__ = 3; break; //@line 902 "pyexpat.c"
      case 3: // $bb2
        var $13=HEAP[$0]; //@line 900 "pyexpat.c"
        HEAP[$retval]=$13; //@line 900 "pyexpat.c"
        __label__ = 4; break; //@line 900 "pyexpat.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 900 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 900 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _readinst($buf, $buf_size, $meth) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $buf_addr=__stackBase__;
        var $buf_size_addr=__stackBase__+4;
        var $meth_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $arg=__stackBase__+20;
        var $bytes=__stackBase__+24;
        var $str=__stackBase__+28;
        var $len=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$buf_addr]=$buf;
        HEAP[$buf_size_addr]=$buf_size;
        HEAP[$meth_addr]=$meth;
        HEAP[$arg]=0; //@line 912 "pyexpat.c"
        HEAP[$bytes]=0; //@line 913 "pyexpat.c"
        HEAP[$str]=0; //@line 914 "pyexpat.c"
        HEAP[$len]=-1; //@line 915 "pyexpat.c"
        var $1=HEAP[$buf_size_addr]; //@line 917 "pyexpat.c"
        var $2=_PyInt_FromLong($1); //@line 917 "pyexpat.c"
        HEAP[$bytes]=$2; //@line 917 "pyexpat.c"
        var $3=HEAP[$bytes]; //@line 917 "pyexpat.c"
        var $4=($3)==0; //@line 917 "pyexpat.c"
        if ($4) { __label__ = 11; break; } else { __label__ = 1; break; } //@line 917 "pyexpat.c"
      case 1: // $bb
        var $5=_PyTuple_New(1); //@line 920 "pyexpat.c"
        HEAP[$arg]=$5; //@line 920 "pyexpat.c"
        var $6=HEAP[$arg]; //@line 920 "pyexpat.c"
        var $7=($6)==0; //@line 920 "pyexpat.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 5; break; } //@line 920 "pyexpat.c"
      case 2: // $bb1
        var $8=HEAP[$bytes]; //@line 921 "pyexpat.c"
        var $9=(($8)&4294967295); //@line 921 "pyexpat.c"
        var $10=HEAP[$9]; //@line 921 "pyexpat.c"
        var $11=((($10) - 1)&4294967295); //@line 921 "pyexpat.c"
        var $12=HEAP[$bytes]; //@line 921 "pyexpat.c"
        var $13=(($12)&4294967295); //@line 921 "pyexpat.c"
        HEAP[$13]=$11; //@line 921 "pyexpat.c"
        var $14=HEAP[$bytes]; //@line 921 "pyexpat.c"
        var $15=(($14)&4294967295); //@line 921 "pyexpat.c"
        var $16=HEAP[$15]; //@line 921 "pyexpat.c"
        var $17=((($16))|0)==0; //@line 921 "pyexpat.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 921 "pyexpat.c"
      case 3: // $bb2
        var $18=HEAP[$bytes]; //@line 921 "pyexpat.c"
        var $19=(($18+4)&4294967295); //@line 921 "pyexpat.c"
        var $20=HEAP[$19]; //@line 921 "pyexpat.c"
        var $21=(($20+24)&4294967295); //@line 921 "pyexpat.c"
        var $22=HEAP[$21]; //@line 921 "pyexpat.c"
        var $23=HEAP[$bytes]; //@line 921 "pyexpat.c"
        FUNCTION_TABLE[$22]($23); //@line 921 "pyexpat.c"
        __label__ = 4; break; //@line 921 "pyexpat.c"
      case 4: // $bb3
        __label__ = 11; break; //@line 921 "pyexpat.c"
      case 5: // $bb4
        var $24=HEAP[$arg]; //@line 925 "pyexpat.c"
        var $25=$24; //@line 925 "pyexpat.c"
        var $26=(($25+12)&4294967295); //@line 925 "pyexpat.c"
        var $27=(($26)&4294967295); //@line 925 "pyexpat.c"
        var $28=HEAP[$bytes]; //@line 925 "pyexpat.c"
        HEAP[$27]=$28; //@line 925 "pyexpat.c"
        var $29=HEAP[$meth_addr]; //@line 930 "pyexpat.c"
        var $30=HEAP[$arg]; //@line 930 "pyexpat.c"
        var $31=_PyObject_Call($29, $30, 0); //@line 930 "pyexpat.c"
        HEAP[$str]=$31; //@line 930 "pyexpat.c"
        var $32=HEAP[$str]; //@line 932 "pyexpat.c"
        var $33=($32)==0; //@line 932 "pyexpat.c"
        if ($33) { __label__ = 11; break; } else { __label__ = 6; break; } //@line 932 "pyexpat.c"
      case 6: // $bb5
        var $34=HEAP[$str]; //@line 936 "pyexpat.c"
        var $35=(($34+4)&4294967295); //@line 936 "pyexpat.c"
        var $36=HEAP[$35]; //@line 936 "pyexpat.c"
        var $37=(($36+84)&4294967295); //@line 936 "pyexpat.c"
        var $38=HEAP[$37]; //@line 936 "pyexpat.c"
        var $39=($38) & 134217728; //@line 936 "pyexpat.c"
        var $40=((($39))|0)==0; //@line 936 "pyexpat.c"
        if ($40) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 936 "pyexpat.c"
      case 7: // $bb6
        var $41=HEAP[$str]; //@line 937 "pyexpat.c"
        var $42=(($41+4)&4294967295); //@line 937 "pyexpat.c"
        var $43=HEAP[$42]; //@line 937 "pyexpat.c"
        var $44=(($43+12)&4294967295); //@line 937 "pyexpat.c"
        var $45=HEAP[$44]; //@line 937 "pyexpat.c"
        var $46=HEAP[_PyExc_TypeError]; //@line 937 "pyexpat.c"
        var $47=_PyErr_Format($46, ((__str46)&4294967295), $45); //@line 937 "pyexpat.c"
        __label__ = 11; break; //@line 937 "pyexpat.c"
      case 8: // $bb7
        var $48=HEAP[$str]; //@line 942 "pyexpat.c"
        var $49=$48; //@line 942 "pyexpat.c"
        var $50=(($49+8)&4294967295); //@line 942 "pyexpat.c"
        var $51=HEAP[$50]; //@line 942 "pyexpat.c"
        HEAP[$len]=$51; //@line 942 "pyexpat.c"
        var $52=HEAP[$len]; //@line 943 "pyexpat.c"
        var $53=HEAP[$buf_size_addr]; //@line 943 "pyexpat.c"
        var $54=((($52))|0) > ((($53))|0); //@line 943 "pyexpat.c"
        if ($54) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 943 "pyexpat.c"
      case 9: // $bb8
        var $55=HEAP[_PyExc_ValueError]; //@line 944 "pyexpat.c"
        var $56=HEAP[$buf_size_addr]; //@line 944 "pyexpat.c"
        var $57=HEAP[$len]; //@line 944 "pyexpat.c"
        var $58=_PyErr_Format($55, ((__str47)&4294967295), $56, $57); //@line 944 "pyexpat.c"
        __label__ = 11; break; //@line 944 "pyexpat.c"
      case 10: // $bb9
        var $59=HEAP[$len]; //@line 950 "pyexpat.c"
        var $60=HEAP[$str]; //@line 950 "pyexpat.c"
        var $61=_PyString_AsString($60); //@line 950 "pyexpat.c"
        var $62=HEAP[$buf_addr]; //@line 950 "pyexpat.c"
        _llvm_memcpy_p0i8_p0i8_i32($62, $61, $59, 1, 0); //@line 950 "pyexpat.c"
        __label__ = 11; break; //@line 951 "pyexpat.c"
      case 11: // $finally
        var $63=HEAP[$arg]; //@line 952 "pyexpat.c"
        var $64=($63)!=0; //@line 952 "pyexpat.c"
        if ($64) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 952 "pyexpat.c"
      case 12: // $bb10
        var $65=HEAP[$arg]; //@line 952 "pyexpat.c"
        var $66=(($65)&4294967295); //@line 952 "pyexpat.c"
        var $67=HEAP[$66]; //@line 952 "pyexpat.c"
        var $68=((($67) - 1)&4294967295); //@line 952 "pyexpat.c"
        var $69=HEAP[$arg]; //@line 952 "pyexpat.c"
        var $70=(($69)&4294967295); //@line 952 "pyexpat.c"
        HEAP[$70]=$68; //@line 952 "pyexpat.c"
        var $71=HEAP[$arg]; //@line 952 "pyexpat.c"
        var $72=(($71)&4294967295); //@line 952 "pyexpat.c"
        var $73=HEAP[$72]; //@line 952 "pyexpat.c"
        var $74=((($73))|0)==0; //@line 952 "pyexpat.c"
        if ($74) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 952 "pyexpat.c"
      case 13: // $bb11
        var $75=HEAP[$arg]; //@line 952 "pyexpat.c"
        var $76=(($75+4)&4294967295); //@line 952 "pyexpat.c"
        var $77=HEAP[$76]; //@line 952 "pyexpat.c"
        var $78=(($77+24)&4294967295); //@line 952 "pyexpat.c"
        var $79=HEAP[$78]; //@line 952 "pyexpat.c"
        var $80=HEAP[$arg]; //@line 952 "pyexpat.c"
        FUNCTION_TABLE[$79]($80); //@line 952 "pyexpat.c"
        __label__ = 14; break; //@line 952 "pyexpat.c"
      case 14: // $bb12
        var $81=HEAP[$str]; //@line 953 "pyexpat.c"
        var $82=($81)!=0; //@line 953 "pyexpat.c"
        if ($82) { __label__ = 15; break; } else { __label__ = 17; break; } //@line 953 "pyexpat.c"
      case 15: // $bb13
        var $83=HEAP[$str]; //@line 953 "pyexpat.c"
        var $84=(($83)&4294967295); //@line 953 "pyexpat.c"
        var $85=HEAP[$84]; //@line 953 "pyexpat.c"
        var $86=((($85) - 1)&4294967295); //@line 953 "pyexpat.c"
        var $87=HEAP[$str]; //@line 953 "pyexpat.c"
        var $88=(($87)&4294967295); //@line 953 "pyexpat.c"
        HEAP[$88]=$86; //@line 953 "pyexpat.c"
        var $89=HEAP[$str]; //@line 953 "pyexpat.c"
        var $90=(($89)&4294967295); //@line 953 "pyexpat.c"
        var $91=HEAP[$90]; //@line 953 "pyexpat.c"
        var $92=((($91))|0)==0; //@line 953 "pyexpat.c"
        if ($92) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 953 "pyexpat.c"
      case 16: // $bb14
        var $93=HEAP[$str]; //@line 953 "pyexpat.c"
        var $94=(($93+4)&4294967295); //@line 953 "pyexpat.c"
        var $95=HEAP[$94]; //@line 953 "pyexpat.c"
        var $96=(($95+24)&4294967295); //@line 953 "pyexpat.c"
        var $97=HEAP[$96]; //@line 953 "pyexpat.c"
        var $98=HEAP[$str]; //@line 953 "pyexpat.c"
        FUNCTION_TABLE[$97]($98); //@line 953 "pyexpat.c"
        __label__ = 17; break; //@line 953 "pyexpat.c"
      case 17: // $bb15
        var $99=HEAP[$len]; //@line 954 "pyexpat.c"
        HEAP[$0]=$99; //@line 954 "pyexpat.c"
        var $100=HEAP[$0]; //@line 954 "pyexpat.c"
        HEAP[$retval]=$100; //@line 954 "pyexpat.c"
        __label__ = 18; break; //@line 954 "pyexpat.c"
      case 18: // $return
        var $retval16=HEAP[$retval]; //@line 954 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval16; //@line 954 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _xmlparse_ParseFile($self, $f) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $f_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $rv=__stackBase__+16;
        var $readmethod=__stackBase__+20;
        var $bytes_read=__stackBase__+24;
        var $buf=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$f_addr]=$f;
        HEAP[$rv]=1; //@line 964 "pyexpat.c"
        HEAP[$readmethod]=0; //@line 965 "pyexpat.c"
        var $1=HEAP[$f_addr]; //@line 967 "pyexpat.c"
        var $2=_PyObject_GetAttrString($1, ((__str48)&4294967295)); //@line 967 "pyexpat.c"
        HEAP[$readmethod]=$2; //@line 967 "pyexpat.c"
        var $3=HEAP[$readmethod]; //@line 968 "pyexpat.c"
        var $4=($3)==0; //@line 968 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 968 "pyexpat.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_TypeError]; //@line 969 "pyexpat.c"
        _PyErr_SetString($5, ((__str49)&4294967295)); //@line 969 "pyexpat.c"
        HEAP[$0]=0; //@line 971 "pyexpat.c"
        __label__ = 24; break; //@line 971 "pyexpat.c"
      case 2: // $bb1
        var $6=HEAP[$self_addr]; //@line 976 "pyexpat.c"
        var $7=(($6+8)&4294967295); //@line 976 "pyexpat.c"
        var $8=HEAP[$7]; //@line 976 "pyexpat.c"
        var $9=_XML_GetBuffer($8, 2048); //@line 976 "pyexpat.c"
        HEAP[$buf]=$9; //@line 976 "pyexpat.c"
        var $10=HEAP[$buf]; //@line 977 "pyexpat.c"
        var $11=($10)==0; //@line 977 "pyexpat.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 977 "pyexpat.c"
      case 3: // $bb2
        var $12=HEAP[$readmethod]; //@line 978 "pyexpat.c"
        var $13=($12)!=0; //@line 978 "pyexpat.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 978 "pyexpat.c"
      case 4: // $bb3
        var $14=HEAP[$readmethod]; //@line 978 "pyexpat.c"
        var $15=(($14)&4294967295); //@line 978 "pyexpat.c"
        var $16=HEAP[$15]; //@line 978 "pyexpat.c"
        var $17=((($16) - 1)&4294967295); //@line 978 "pyexpat.c"
        var $18=HEAP[$readmethod]; //@line 978 "pyexpat.c"
        var $19=(($18)&4294967295); //@line 978 "pyexpat.c"
        HEAP[$19]=$17; //@line 978 "pyexpat.c"
        var $20=HEAP[$readmethod]; //@line 978 "pyexpat.c"
        var $21=(($20)&4294967295); //@line 978 "pyexpat.c"
        var $22=HEAP[$21]; //@line 978 "pyexpat.c"
        var $23=((($22))|0)==0; //@line 978 "pyexpat.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 978 "pyexpat.c"
      case 5: // $bb4
        var $24=HEAP[$readmethod]; //@line 978 "pyexpat.c"
        var $25=(($24+4)&4294967295); //@line 978 "pyexpat.c"
        var $26=HEAP[$25]; //@line 978 "pyexpat.c"
        var $27=(($26+24)&4294967295); //@line 978 "pyexpat.c"
        var $28=HEAP[$27]; //@line 978 "pyexpat.c"
        var $29=HEAP[$readmethod]; //@line 978 "pyexpat.c"
        FUNCTION_TABLE[$28]($29); //@line 978 "pyexpat.c"
        __label__ = 6; break; //@line 978 "pyexpat.c"
      case 6: // $bb5
        var $30=_PyErr_NoMemory(); //@line 979 "pyexpat.c"
        HEAP[$0]=$30; //@line 979 "pyexpat.c"
        __label__ = 24; break; //@line 979 "pyexpat.c"
      case 7: // $bb6
        var $31=HEAP[$buf]; //@line 982 "pyexpat.c"
        var $32=HEAP[$readmethod]; //@line 982 "pyexpat.c"
        var $33=_readinst($31, 2048, $32); //@line 982 "pyexpat.c"
        HEAP[$bytes_read]=$33; //@line 982 "pyexpat.c"
        var $34=HEAP[$bytes_read]; //@line 983 "pyexpat.c"
        var $35=((($34))|0) < 0; //@line 983 "pyexpat.c"
        if ($35) { __label__ = 8; break; } else { __label__ = 12; break; } //@line 983 "pyexpat.c"
      case 8: // $bb7
        var $36=HEAP[$readmethod]; //@line 984 "pyexpat.c"
        var $37=($36)!=0; //@line 984 "pyexpat.c"
        if ($37) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 984 "pyexpat.c"
      case 9: // $bb8
        var $38=HEAP[$readmethod]; //@line 984 "pyexpat.c"
        var $39=(($38)&4294967295); //@line 984 "pyexpat.c"
        var $40=HEAP[$39]; //@line 984 "pyexpat.c"
        var $41=((($40) - 1)&4294967295); //@line 984 "pyexpat.c"
        var $42=HEAP[$readmethod]; //@line 984 "pyexpat.c"
        var $43=(($42)&4294967295); //@line 984 "pyexpat.c"
        HEAP[$43]=$41; //@line 984 "pyexpat.c"
        var $44=HEAP[$readmethod]; //@line 984 "pyexpat.c"
        var $45=(($44)&4294967295); //@line 984 "pyexpat.c"
        var $46=HEAP[$45]; //@line 984 "pyexpat.c"
        var $47=((($46))|0)==0; //@line 984 "pyexpat.c"
        if ($47) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 984 "pyexpat.c"
      case 10: // $bb9
        var $48=HEAP[$readmethod]; //@line 984 "pyexpat.c"
        var $49=(($48+4)&4294967295); //@line 984 "pyexpat.c"
        var $50=HEAP[$49]; //@line 984 "pyexpat.c"
        var $51=(($50+24)&4294967295); //@line 984 "pyexpat.c"
        var $52=HEAP[$51]; //@line 984 "pyexpat.c"
        var $53=HEAP[$readmethod]; //@line 984 "pyexpat.c"
        FUNCTION_TABLE[$52]($53); //@line 984 "pyexpat.c"
        __label__ = 11; break; //@line 984 "pyexpat.c"
      case 11: // $bb10
        HEAP[$0]=0; //@line 985 "pyexpat.c"
        __label__ = 24; break; //@line 985 "pyexpat.c"
      case 12: // $bb11
        var $54=HEAP[$bytes_read]; //@line 988 "pyexpat.c"
        var $55=((($54))|0)==0; //@line 988 "pyexpat.c"
        var $56=unSign(($55), 1, 0); //@line 988 "pyexpat.c"
        var $57=HEAP[$self_addr]; //@line 988 "pyexpat.c"
        var $58=(($57+8)&4294967295); //@line 988 "pyexpat.c"
        var $59=HEAP[$58]; //@line 988 "pyexpat.c"
        var $60=HEAP[$bytes_read]; //@line 988 "pyexpat.c"
        var $61=_XML_ParseBuffer($59, $60, $56); //@line 988 "pyexpat.c"
        HEAP[$rv]=$61; //@line 988 "pyexpat.c"
        var $62=_PyErr_Occurred(); //@line 989 "pyexpat.c"
        var $63=($62)!=0; //@line 989 "pyexpat.c"
        if ($63) { __label__ = 13; break; } else { __label__ = 17; break; } //@line 989 "pyexpat.c"
      case 13: // $bb12
        var $64=HEAP[$readmethod]; //@line 990 "pyexpat.c"
        var $65=($64)!=0; //@line 990 "pyexpat.c"
        if ($65) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 990 "pyexpat.c"
      case 14: // $bb13
        var $66=HEAP[$readmethod]; //@line 990 "pyexpat.c"
        var $67=(($66)&4294967295); //@line 990 "pyexpat.c"
        var $68=HEAP[$67]; //@line 990 "pyexpat.c"
        var $69=((($68) - 1)&4294967295); //@line 990 "pyexpat.c"
        var $70=HEAP[$readmethod]; //@line 990 "pyexpat.c"
        var $71=(($70)&4294967295); //@line 990 "pyexpat.c"
        HEAP[$71]=$69; //@line 990 "pyexpat.c"
        var $72=HEAP[$readmethod]; //@line 990 "pyexpat.c"
        var $73=(($72)&4294967295); //@line 990 "pyexpat.c"
        var $74=HEAP[$73]; //@line 990 "pyexpat.c"
        var $75=((($74))|0)==0; //@line 990 "pyexpat.c"
        if ($75) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 990 "pyexpat.c"
      case 15: // $bb14
        var $76=HEAP[$readmethod]; //@line 990 "pyexpat.c"
        var $77=(($76+4)&4294967295); //@line 990 "pyexpat.c"
        var $78=HEAP[$77]; //@line 990 "pyexpat.c"
        var $79=(($78+24)&4294967295); //@line 990 "pyexpat.c"
        var $80=HEAP[$79]; //@line 990 "pyexpat.c"
        var $81=HEAP[$readmethod]; //@line 990 "pyexpat.c"
        FUNCTION_TABLE[$80]($81); //@line 990 "pyexpat.c"
        __label__ = 16; break; //@line 990 "pyexpat.c"
      case 16: // $bb15
        HEAP[$0]=0; //@line 991 "pyexpat.c"
        __label__ = 24; break; //@line 991 "pyexpat.c"
      case 17: // $bb16
        var $82=HEAP[$rv]; //@line 994 "pyexpat.c"
        var $83=((($82))|0)==0; //@line 994 "pyexpat.c"
        if ($83) { __label__ = 20; break; } else { __label__ = 18; break; } //@line 994 "pyexpat.c"
      case 18: // $bb17
        var $84=HEAP[$bytes_read]; //@line 994 "pyexpat.c"
        var $85=((($84))|0)==0; //@line 994 "pyexpat.c"
        if ($85) { __label__ = 20; break; } else { __label__ = 19; break; } //@line 994 "pyexpat.c"
      case 19: // $bb18
        __label__ = 2; break; //@line 994 "pyexpat.c"
      case 20: // $bb19
        var $86=HEAP[$readmethod]; //@line 997 "pyexpat.c"
        var $87=($86)!=0; //@line 997 "pyexpat.c"
        if ($87) { __label__ = 21; break; } else { __label__ = 23; break; } //@line 997 "pyexpat.c"
      case 21: // $bb20
        var $88=HEAP[$readmethod]; //@line 997 "pyexpat.c"
        var $89=(($88)&4294967295); //@line 997 "pyexpat.c"
        var $90=HEAP[$89]; //@line 997 "pyexpat.c"
        var $91=((($90) - 1)&4294967295); //@line 997 "pyexpat.c"
        var $92=HEAP[$readmethod]; //@line 997 "pyexpat.c"
        var $93=(($92)&4294967295); //@line 997 "pyexpat.c"
        HEAP[$93]=$91; //@line 997 "pyexpat.c"
        var $94=HEAP[$readmethod]; //@line 997 "pyexpat.c"
        var $95=(($94)&4294967295); //@line 997 "pyexpat.c"
        var $96=HEAP[$95]; //@line 997 "pyexpat.c"
        var $97=((($96))|0)==0; //@line 997 "pyexpat.c"
        if ($97) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 997 "pyexpat.c"
      case 22: // $bb21
        var $98=HEAP[$readmethod]; //@line 997 "pyexpat.c"
        var $99=(($98+4)&4294967295); //@line 997 "pyexpat.c"
        var $100=HEAP[$99]; //@line 997 "pyexpat.c"
        var $101=(($100+24)&4294967295); //@line 997 "pyexpat.c"
        var $102=HEAP[$101]; //@line 997 "pyexpat.c"
        var $103=HEAP[$readmethod]; //@line 997 "pyexpat.c"
        FUNCTION_TABLE[$102]($103); //@line 997 "pyexpat.c"
        __label__ = 23; break; //@line 997 "pyexpat.c"
      case 23: // $bb22
        var $104=HEAP[$self_addr]; //@line 998 "pyexpat.c"
        var $105=HEAP[$rv]; //@line 998 "pyexpat.c"
        var $106=_get_parse_result($104, $105); //@line 998 "pyexpat.c"
        HEAP[$0]=$106; //@line 998 "pyexpat.c"
        __label__ = 24; break; //@line 998 "pyexpat.c"
      case 24: // $bb23
        var $107=HEAP[$0]; //@line 971 "pyexpat.c"
        HEAP[$retval]=$107; //@line 971 "pyexpat.c"
        __label__ = 25; break; //@line 971 "pyexpat.c"
      case 25: // $return
        var $retval24=HEAP[$retval]; //@line 971 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval24; //@line 971 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _xmlparse_SetBase($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $base=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$args_addr]; //@line 1010 "pyexpat.c"
        var $2=_PyArg_ParseTuple($1, ((__str50)&4294967295), $base); //@line 1010 "pyexpat.c"
        var $3=((($2))|0)==0; //@line 1010 "pyexpat.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1010 "pyexpat.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 1011 "pyexpat.c"
        __label__ = 5; break; //@line 1011 "pyexpat.c"
      case 2: // $bb1
        var $4=HEAP[$base]; //@line 1012 "pyexpat.c"
        var $5=HEAP[$self_addr]; //@line 1012 "pyexpat.c"
        var $6=(($5+8)&4294967295); //@line 1012 "pyexpat.c"
        var $7=HEAP[$6]; //@line 1012 "pyexpat.c"
        var $8=_XML_SetBase($7, $4); //@line 1012 "pyexpat.c"
        var $9=((($8))|0)==0; //@line 1012 "pyexpat.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1012 "pyexpat.c"
      case 3: // $bb2
        var $10=_PyErr_NoMemory(); //@line 1013 "pyexpat.c"
        HEAP[$0]=$10; //@line 1013 "pyexpat.c"
        __label__ = 5; break; //@line 1013 "pyexpat.c"
      case 4: // $bb3
        var $11=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 1015 "pyexpat.c"
        var $12=((($11) + 1)&4294967295); //@line 1015 "pyexpat.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$12; //@line 1015 "pyexpat.c"
        HEAP[$0]=__Py_NoneStruct; //@line 1016 "pyexpat.c"
        __label__ = 5; break; //@line 1016 "pyexpat.c"
      case 5: // $bb4
        var $13=HEAP[$0]; //@line 1011 "pyexpat.c"
        HEAP[$retval]=$13; //@line 1011 "pyexpat.c"
        __label__ = 6; break; //@line 1011 "pyexpat.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 1011 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 1011 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _xmlparse_GetBase($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $unused_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$unused_addr]=$unused;
        var $1=HEAP[$self_addr]; //@line 1026 "pyexpat.c"
        var $2=(($1+8)&4294967295); //@line 1026 "pyexpat.c"
        var $3=HEAP[$2]; //@line 1026 "pyexpat.c"
        var $4=_XML_GetBase($3); //@line 1026 "pyexpat.c"
        var $5=_Py_BuildValue(((__str51)&4294967295), $4); //@line 1026 "pyexpat.c"
        HEAP[$0]=$5; //@line 1026 "pyexpat.c"
        var $6=HEAP[$0]; //@line 1026 "pyexpat.c"
        HEAP[$retval]=$6; //@line 1026 "pyexpat.c"
        __label__ = 1; break; //@line 1026 "pyexpat.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 1026 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 1026 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _xmlparse_GetInputContext($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $unused_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $offset=__stackBase__+16;
        var $size=__stackBase__+20;
        var $buffer=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$unused_addr]=$unused;
        var $1=HEAP[$self_addr]; //@line 1038 "pyexpat.c"
        var $2=(($1+24)&4294967295); //@line 1038 "pyexpat.c"
        var $3=HEAP[$2]; //@line 1038 "pyexpat.c"
        var $4=((($3))|0)!=0; //@line 1038 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 1038 "pyexpat.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 1041 "pyexpat.c"
        var $6=(($5+8)&4294967295); //@line 1041 "pyexpat.c"
        var $7=HEAP[$6]; //@line 1041 "pyexpat.c"
        var $8=_XML_GetInputContext($7, $offset, $size); //@line 1041 "pyexpat.c"
        HEAP[$buffer]=$8; //@line 1041 "pyexpat.c"
        var $9=HEAP[$buffer]; //@line 1043 "pyexpat.c"
        var $10=($9)!=0; //@line 1043 "pyexpat.c"
        if ($10) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1043 "pyexpat.c"
      case 2: // $bb1
        var $11=HEAP[$size]; //@line 1044 "pyexpat.c"
        var $12=HEAP[$offset]; //@line 1044 "pyexpat.c"
        var $13=((($11) - ($12))&4294967295); //@line 1044 "pyexpat.c"
        var $14=HEAP[$offset]; //@line 1044 "pyexpat.c"
        var $15=HEAP[$buffer]; //@line 1044 "pyexpat.c"
        var $16=(($15+$14)&4294967295); //@line 1044 "pyexpat.c"
        var $17=_PyString_FromStringAndSize($16, $13); //@line 1044 "pyexpat.c"
        HEAP[$0]=$17; //@line 1044 "pyexpat.c"
        __label__ = 5; break; //@line 1044 "pyexpat.c"
      case 3: // $bb2
        var $18=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 1047 "pyexpat.c"
        var $19=((($18) + 1)&4294967295); //@line 1047 "pyexpat.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$19; //@line 1047 "pyexpat.c"
        HEAP[$0]=__Py_NoneStruct; //@line 1047 "pyexpat.c"
        __label__ = 5; break; //@line 1047 "pyexpat.c"
      case 4: // $bb3
        var $20=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 1050 "pyexpat.c"
        var $21=((($20) + 1)&4294967295); //@line 1050 "pyexpat.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$21; //@line 1050 "pyexpat.c"
        HEAP[$0]=__Py_NoneStruct; //@line 1050 "pyexpat.c"
        __label__ = 5; break; //@line 1050 "pyexpat.c"
      case 5: // $bb4
        var $22=HEAP[$0]; //@line 1044 "pyexpat.c"
        HEAP[$retval]=$22; //@line 1044 "pyexpat.c"
        __label__ = 6; break; //@line 1044 "pyexpat.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 1044 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 1044 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _xmlparse_ExternalEntityParserCreate($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $context=__stackBase__+16;
        var $encoding=__stackBase__+20;
        var $new_parser=__stackBase__+24;
        var $i=__stackBase__+28;
        var $handler=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$encoding]=0; //@line 1062 "pyexpat.c"
        var $1=HEAP[$args_addr]; //@line 1066 "pyexpat.c"
        var $2=_PyArg_ParseTuple($1, ((__str52)&4294967295), $context, $encoding); //@line 1066 "pyexpat.c"
        var $3=((($2))|0)==0; //@line 1066 "pyexpat.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1066 "pyexpat.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 1068 "pyexpat.c"
        __label__ = 28; break; //@line 1068 "pyexpat.c"
      case 2: // $bb1
        var $4=__PyObject_GC_New(_Xmlparsetype); //@line 1076 "pyexpat.c"
        var $5=$4; //@line 1076 "pyexpat.c"
        HEAP[$new_parser]=$5; //@line 1076 "pyexpat.c"
        var $6=HEAP[$new_parser]; //@line 1079 "pyexpat.c"
        var $7=($6)==0; //@line 1079 "pyexpat.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1079 "pyexpat.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 1080 "pyexpat.c"
        __label__ = 28; break; //@line 1080 "pyexpat.c"
      case 4: // $bb3
        var $8=HEAP[$self_addr]; //@line 1081 "pyexpat.c"
        var $9=(($8+36)&4294967295); //@line 1081 "pyexpat.c"
        var $10=HEAP[$9]; //@line 1081 "pyexpat.c"
        var $11=HEAP[$new_parser]; //@line 1081 "pyexpat.c"
        var $12=(($11+36)&4294967295); //@line 1081 "pyexpat.c"
        HEAP[$12]=$10; //@line 1081 "pyexpat.c"
        var $13=HEAP[$new_parser]; //@line 1082 "pyexpat.c"
        var $14=(($13+40)&4294967295); //@line 1082 "pyexpat.c"
        HEAP[$14]=0; //@line 1082 "pyexpat.c"
        var $15=HEAP[$self_addr]; //@line 1083 "pyexpat.c"
        var $16=(($15+32)&4294967295); //@line 1083 "pyexpat.c"
        var $17=HEAP[$16]; //@line 1083 "pyexpat.c"
        var $18=($17)!=0; //@line 1083 "pyexpat.c"
        if ($18) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 1083 "pyexpat.c"
      case 5: // $bb4
        var $19=HEAP[$new_parser]; //@line 1084 "pyexpat.c"
        var $20=(($19+36)&4294967295); //@line 1084 "pyexpat.c"
        var $21=HEAP[$20]; //@line 1084 "pyexpat.c"
        var $22=_malloc($21); //@line 1084 "pyexpat.c"
        var $23=HEAP[$new_parser]; //@line 1084 "pyexpat.c"
        var $24=(($23+32)&4294967295); //@line 1084 "pyexpat.c"
        HEAP[$24]=$22; //@line 1084 "pyexpat.c"
        var $25=HEAP[$new_parser]; //@line 1085 "pyexpat.c"
        var $26=(($25+32)&4294967295); //@line 1085 "pyexpat.c"
        var $27=HEAP[$26]; //@line 1085 "pyexpat.c"
        var $28=($27)==0; //@line 1085 "pyexpat.c"
        if ($28) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1085 "pyexpat.c"
      case 6: // $bb5
        var $29=HEAP[$new_parser]; //@line 1091 "pyexpat.c"
        var $30=$29; //@line 1091 "pyexpat.c"
        _PyObject_GC_Del($30); //@line 1091 "pyexpat.c"
        var $31=_PyErr_NoMemory(); //@line 1093 "pyexpat.c"
        HEAP[$0]=$31; //@line 1093 "pyexpat.c"
        __label__ = 28; break; //@line 1093 "pyexpat.c"
      case 7: // $bb6
        __label__ = 9; break; //@line 1093 "pyexpat.c"
      case 8: // $bb7
        var $32=HEAP[$new_parser]; //@line 1097 "pyexpat.c"
        var $33=(($32+32)&4294967295); //@line 1097 "pyexpat.c"
        HEAP[$33]=0; //@line 1097 "pyexpat.c"
        __label__ = 9; break; //@line 1097 "pyexpat.c"
      case 9: // $bb8
        var $34=HEAP[$self_addr]; //@line 1098 "pyexpat.c"
        var $35=(($34+12)&4294967295); //@line 1098 "pyexpat.c"
        var $36=HEAP[$35]; //@line 1098 "pyexpat.c"
        var $37=HEAP[$new_parser]; //@line 1098 "pyexpat.c"
        var $38=(($37+12)&4294967295); //@line 1098 "pyexpat.c"
        HEAP[$38]=$36; //@line 1098 "pyexpat.c"
        var $39=HEAP[$self_addr]; //@line 1099 "pyexpat.c"
        var $40=(($39+16)&4294967295); //@line 1099 "pyexpat.c"
        var $41=HEAP[$40]; //@line 1099 "pyexpat.c"
        var $42=HEAP[$new_parser]; //@line 1099 "pyexpat.c"
        var $43=(($42+16)&4294967295); //@line 1099 "pyexpat.c"
        HEAP[$43]=$41; //@line 1099 "pyexpat.c"
        var $44=HEAP[$self_addr]; //@line 1100 "pyexpat.c"
        var $45=(($44+20)&4294967295); //@line 1100 "pyexpat.c"
        var $46=HEAP[$45]; //@line 1100 "pyexpat.c"
        var $47=HEAP[$new_parser]; //@line 1100 "pyexpat.c"
        var $48=(($47+20)&4294967295); //@line 1100 "pyexpat.c"
        HEAP[$48]=$46; //@line 1100 "pyexpat.c"
        var $49=HEAP[$new_parser]; //@line 1101 "pyexpat.c"
        var $50=(($49+24)&4294967295); //@line 1101 "pyexpat.c"
        HEAP[$50]=0; //@line 1101 "pyexpat.c"
        var $51=HEAP[$self_addr]; //@line 1102 "pyexpat.c"
        var $52=(($51+28)&4294967295); //@line 1102 "pyexpat.c"
        var $53=HEAP[$52]; //@line 1102 "pyexpat.c"
        var $54=HEAP[$new_parser]; //@line 1102 "pyexpat.c"
        var $55=(($54+28)&4294967295); //@line 1102 "pyexpat.c"
        HEAP[$55]=$53; //@line 1102 "pyexpat.c"
        var $56=HEAP[$encoding]; //@line 1103 "pyexpat.c"
        var $57=HEAP[$context]; //@line 1103 "pyexpat.c"
        var $58=HEAP[$self_addr]; //@line 1103 "pyexpat.c"
        var $59=(($58+8)&4294967295); //@line 1103 "pyexpat.c"
        var $60=HEAP[$59]; //@line 1103 "pyexpat.c"
        var $61=_XML_ExternalEntityParserCreate($60, $57, $56); //@line 1103 "pyexpat.c"
        var $62=HEAP[$new_parser]; //@line 1103 "pyexpat.c"
        var $63=(($62+8)&4294967295); //@line 1103 "pyexpat.c"
        HEAP[$63]=$61; //@line 1103 "pyexpat.c"
        var $64=HEAP[$new_parser]; //@line 1105 "pyexpat.c"
        var $65=(($64+48)&4294967295); //@line 1105 "pyexpat.c"
        HEAP[$65]=0; //@line 1105 "pyexpat.c"
        var $66=HEAP[$self_addr]; //@line 1106 "pyexpat.c"
        var $67=(($66+44)&4294967295); //@line 1106 "pyexpat.c"
        var $68=HEAP[$67]; //@line 1106 "pyexpat.c"
        var $69=HEAP[$new_parser]; //@line 1106 "pyexpat.c"
        var $70=(($69+44)&4294967295); //@line 1106 "pyexpat.c"
        HEAP[$70]=$68; //@line 1106 "pyexpat.c"
        var $71=HEAP[$new_parser]; //@line 1107 "pyexpat.c"
        var $72=(($71+44)&4294967295); //@line 1107 "pyexpat.c"
        var $73=HEAP[$72]; //@line 1107 "pyexpat.c"
        var $74=($73)!=0; //@line 1107 "pyexpat.c"
        if ($74) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1107 "pyexpat.c"
      case 10: // $bb9
        var $75=HEAP[$new_parser]; //@line 1107 "pyexpat.c"
        var $76=(($75+44)&4294967295); //@line 1107 "pyexpat.c"
        var $77=HEAP[$76]; //@line 1107 "pyexpat.c"
        var $78=(($77)&4294967295); //@line 1107 "pyexpat.c"
        var $79=HEAP[$78]; //@line 1107 "pyexpat.c"
        var $80=((($79) + 1)&4294967295); //@line 1107 "pyexpat.c"
        var $81=(($77)&4294967295); //@line 1107 "pyexpat.c"
        HEAP[$81]=$80; //@line 1107 "pyexpat.c"
        __label__ = 11; break; //@line 1107 "pyexpat.c"
      case 11: // $bb10
        var $82=HEAP[$new_parser]; //@line 1109 "pyexpat.c"
        var $83=$82; //@line 1109 "pyexpat.c"
        _PyObject_GC_Track($83); //@line 1109 "pyexpat.c"
        var $84=HEAP[$new_parser]; //@line 1114 "pyexpat.c"
        var $85=(($84+8)&4294967295); //@line 1114 "pyexpat.c"
        var $86=HEAP[$85]; //@line 1114 "pyexpat.c"
        var $87=($86)==0; //@line 1114 "pyexpat.c"
        if ($87) { __label__ = 12; break; } else { __label__ = 15; break; } //@line 1114 "pyexpat.c"
      case 12: // $bb11
        var $88=HEAP[$new_parser]; //@line 1115 "pyexpat.c"
        var $89=$88; //@line 1115 "pyexpat.c"
        var $90=(($89)&4294967295); //@line 1115 "pyexpat.c"
        var $91=HEAP[$90]; //@line 1115 "pyexpat.c"
        var $92=((($91) - 1)&4294967295); //@line 1115 "pyexpat.c"
        var $93=(($89)&4294967295); //@line 1115 "pyexpat.c"
        HEAP[$93]=$92; //@line 1115 "pyexpat.c"
        var $94=(($89)&4294967295); //@line 1115 "pyexpat.c"
        var $95=HEAP[$94]; //@line 1115 "pyexpat.c"
        var $96=((($95))|0)==0; //@line 1115 "pyexpat.c"
        if ($96) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1115 "pyexpat.c"
      case 13: // $bb12
        var $97=HEAP[$new_parser]; //@line 1115 "pyexpat.c"
        var $98=$97; //@line 1115 "pyexpat.c"
        var $99=(($98+4)&4294967295); //@line 1115 "pyexpat.c"
        var $100=HEAP[$99]; //@line 1115 "pyexpat.c"
        var $101=(($100+24)&4294967295); //@line 1115 "pyexpat.c"
        var $102=HEAP[$101]; //@line 1115 "pyexpat.c"
        var $103=HEAP[$new_parser]; //@line 1115 "pyexpat.c"
        var $104=$103; //@line 1115 "pyexpat.c"
        FUNCTION_TABLE[$102]($104); //@line 1115 "pyexpat.c"
        __label__ = 14; break; //@line 1115 "pyexpat.c"
      case 14: // $bb13
        var $105=_PyErr_NoMemory(); //@line 1116 "pyexpat.c"
        HEAP[$0]=$105; //@line 1116 "pyexpat.c"
        __label__ = 28; break; //@line 1116 "pyexpat.c"
      case 15: // $bb14
        var $106=HEAP[$new_parser]; //@line 1119 "pyexpat.c"
        var $107=(($106+8)&4294967295); //@line 1119 "pyexpat.c"
        var $108=HEAP[$107]; //@line 1119 "pyexpat.c"
        var $109=HEAP[$new_parser]; //@line 1119 "pyexpat.c"
        var $110=$109; //@line 1119 "pyexpat.c"
        _XML_SetUserData($108, $110); //@line 1119 "pyexpat.c"
        HEAP[$i]=0; //@line 1122 "pyexpat.c"
        __label__ = 17; break; //@line 1122 "pyexpat.c"
      case 16: // $bb15
        var $111=HEAP[$i]; //@line 1122 "pyexpat.c"
        var $112=((($111) + 1)&4294967295); //@line 1122 "pyexpat.c"
        HEAP[$i]=$112; //@line 1122 "pyexpat.c"
        __label__ = 17; break; //@line 1122 "pyexpat.c"
      case 17: // $bb16
        var $113=HEAP[$i]; //@line 1122 "pyexpat.c"
        var $114=((_handler_info+$113*20)&4294967295); //@line 1122 "pyexpat.c"
        var $115=(($114)&4294967295); //@line 1122 "pyexpat.c"
        var $116=HEAP[$115]; //@line 1122 "pyexpat.c"
        var $117=($116)!=0; //@line 1122 "pyexpat.c"
        if ($117) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 1122 "pyexpat.c"
      case 18: // $bb17
        var $118=HEAP[$i]; //@line 1125 "pyexpat.c"
        var $119=((($118) * 4)&4294967295); //@line 1125 "pyexpat.c"
        var $120=_malloc($119); //@line 1125 "pyexpat.c"
        var $121=$120; //@line 1125 "pyexpat.c"
        var $122=HEAP[$new_parser]; //@line 1125 "pyexpat.c"
        var $123=(($122+48)&4294967295); //@line 1125 "pyexpat.c"
        HEAP[$123]=$121; //@line 1125 "pyexpat.c"
        var $124=HEAP[$new_parser]; //@line 1126 "pyexpat.c"
        var $125=(($124+48)&4294967295); //@line 1126 "pyexpat.c"
        var $126=HEAP[$125]; //@line 1126 "pyexpat.c"
        var $127=($126)==0; //@line 1126 "pyexpat.c"
        if ($127) { __label__ = 19; break; } else { __label__ = 22; break; } //@line 1126 "pyexpat.c"
      case 19: // $bb18
        var $128=HEAP[$new_parser]; //@line 1127 "pyexpat.c"
        var $129=$128; //@line 1127 "pyexpat.c"
        var $130=(($129)&4294967295); //@line 1127 "pyexpat.c"
        var $131=HEAP[$130]; //@line 1127 "pyexpat.c"
        var $132=((($131) - 1)&4294967295); //@line 1127 "pyexpat.c"
        var $133=(($129)&4294967295); //@line 1127 "pyexpat.c"
        HEAP[$133]=$132; //@line 1127 "pyexpat.c"
        var $134=(($129)&4294967295); //@line 1127 "pyexpat.c"
        var $135=HEAP[$134]; //@line 1127 "pyexpat.c"
        var $136=((($135))|0)==0; //@line 1127 "pyexpat.c"
        if ($136) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1127 "pyexpat.c"
      case 20: // $bb19
        var $137=HEAP[$new_parser]; //@line 1127 "pyexpat.c"
        var $138=$137; //@line 1127 "pyexpat.c"
        var $139=(($138+4)&4294967295); //@line 1127 "pyexpat.c"
        var $140=HEAP[$139]; //@line 1127 "pyexpat.c"
        var $141=(($140+24)&4294967295); //@line 1127 "pyexpat.c"
        var $142=HEAP[$141]; //@line 1127 "pyexpat.c"
        var $143=HEAP[$new_parser]; //@line 1127 "pyexpat.c"
        var $144=$143; //@line 1127 "pyexpat.c"
        FUNCTION_TABLE[$142]($144); //@line 1127 "pyexpat.c"
        __label__ = 21; break; //@line 1127 "pyexpat.c"
      case 21: // $bb20
        var $145=_PyErr_NoMemory(); //@line 1128 "pyexpat.c"
        HEAP[$0]=$145; //@line 1128 "pyexpat.c"
        __label__ = 28; break; //@line 1128 "pyexpat.c"
      case 22: // $bb21
        var $146=HEAP[$new_parser]; //@line 1130 "pyexpat.c"
        _clear_handlers($146, 1); //@line 1130 "pyexpat.c"
        HEAP[$i]=0; //@line 1133 "pyexpat.c"
        __label__ = 26; break; //@line 1133 "pyexpat.c"
      case 23: // $bb22
        var $147=HEAP[$self_addr]; //@line 1134 "pyexpat.c"
        var $148=(($147+48)&4294967295); //@line 1134 "pyexpat.c"
        var $149=HEAP[$148]; //@line 1134 "pyexpat.c"
        var $150=HEAP[$i]; //@line 1134 "pyexpat.c"
        var $151=(($149+4*$150)&4294967295); //@line 1134 "pyexpat.c"
        var $152=HEAP[$151]; //@line 1134 "pyexpat.c"
        HEAP[$handler]=$152; //@line 1134 "pyexpat.c"
        var $153=HEAP[$handler]; //@line 1135 "pyexpat.c"
        var $154=($153)!=0; //@line 1135 "pyexpat.c"
        if ($154) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 1135 "pyexpat.c"
      case 24: // $bb23
        var $155=HEAP[$handler]; //@line 1136 "pyexpat.c"
        var $156=(($155)&4294967295); //@line 1136 "pyexpat.c"
        var $157=HEAP[$156]; //@line 1136 "pyexpat.c"
        var $158=((($157) + 1)&4294967295); //@line 1136 "pyexpat.c"
        var $159=HEAP[$handler]; //@line 1136 "pyexpat.c"
        var $160=(($159)&4294967295); //@line 1136 "pyexpat.c"
        HEAP[$160]=$158; //@line 1136 "pyexpat.c"
        var $161=HEAP[$new_parser]; //@line 1137 "pyexpat.c"
        var $162=(($161+48)&4294967295); //@line 1137 "pyexpat.c"
        var $163=HEAP[$162]; //@line 1137 "pyexpat.c"
        var $164=HEAP[$i]; //@line 1137 "pyexpat.c"
        var $165=(($163+4*$164)&4294967295); //@line 1137 "pyexpat.c"
        var $166=HEAP[$handler]; //@line 1137 "pyexpat.c"
        HEAP[$165]=$166; //@line 1137 "pyexpat.c"
        var $167=HEAP[$i]; //@line 1138 "pyexpat.c"
        var $168=((_handler_info+$167*20)&4294967295); //@line 1138 "pyexpat.c"
        var $169=(($168+4)&4294967295); //@line 1138 "pyexpat.c"
        var $170=HEAP[$169]; //@line 1138 "pyexpat.c"
        var $171=HEAP[$i]; //@line 1138 "pyexpat.c"
        var $172=((_handler_info+$171*20)&4294967295); //@line 1138 "pyexpat.c"
        var $173=(($172+8)&4294967295); //@line 1138 "pyexpat.c"
        var $174=HEAP[$173]; //@line 1138 "pyexpat.c"
        var $175=HEAP[$new_parser]; //@line 1138 "pyexpat.c"
        var $176=(($175+8)&4294967295); //@line 1138 "pyexpat.c"
        var $177=HEAP[$176]; //@line 1138 "pyexpat.c"
        FUNCTION_TABLE[$170]($177, $174); //@line 1138 "pyexpat.c"
        __label__ = 25; break; //@line 1138 "pyexpat.c"
      case 25: // $bb24
        var $178=HEAP[$i]; //@line 1133 "pyexpat.c"
        var $179=((($178) + 1)&4294967295); //@line 1133 "pyexpat.c"
        HEAP[$i]=$179; //@line 1133 "pyexpat.c"
        __label__ = 26; break; //@line 1133 "pyexpat.c"
      case 26: // $bb25
        var $180=HEAP[$i]; //@line 1133 "pyexpat.c"
        var $181=((_handler_info+$180*20)&4294967295); //@line 1133 "pyexpat.c"
        var $182=(($181)&4294967295); //@line 1133 "pyexpat.c"
        var $183=HEAP[$182]; //@line 1133 "pyexpat.c"
        var $184=($183)!=0; //@line 1133 "pyexpat.c"
        if ($184) { __label__ = 23; break; } else { __label__ = 27; break; } //@line 1133 "pyexpat.c"
      case 27: // $bb26
        var $185=HEAP[$new_parser]; //@line 1142 "pyexpat.c"
        var $186=$185; //@line 1142 "pyexpat.c"
        HEAP[$0]=$186; //@line 1142 "pyexpat.c"
        __label__ = 28; break; //@line 1142 "pyexpat.c"
      case 28: // $bb27
        var $187=HEAP[$0]; //@line 1068 "pyexpat.c"
        HEAP[$retval]=$187; //@line 1068 "pyexpat.c"
        __label__ = 29; break; //@line 1068 "pyexpat.c"
      case 29: // $return
        var $retval28=HEAP[$retval]; //@line 1068 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval28; //@line 1068 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _xmlparse_SetParamEntityParsing($p, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $p_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $flag=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$p_addr]=$p;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$args_addr]; //@line 1157 "pyexpat.c"
        var $2=_PyArg_ParseTuple($1, ((__str53)&4294967295), $flag); //@line 1157 "pyexpat.c"
        var $3=((($2))|0)==0; //@line 1157 "pyexpat.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1157 "pyexpat.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 1158 "pyexpat.c"
        __label__ = 3; break; //@line 1158 "pyexpat.c"
      case 2: // $bb1
        var $4=HEAP[$flag]; //@line 1159 "pyexpat.c"
        var $5=HEAP[$p_addr]; //@line 1159 "pyexpat.c"
        var $6=(($5+8)&4294967295); //@line 1159 "pyexpat.c"
        var $7=HEAP[$6]; //@line 1159 "pyexpat.c"
        var $8=_XML_SetParamEntityParsing($7, $4); //@line 1159 "pyexpat.c"
        HEAP[$flag]=$8; //@line 1159 "pyexpat.c"
        var $9=HEAP[$flag]; //@line 1160 "pyexpat.c"
        var $10=_PyInt_FromLong($9); //@line 1160 "pyexpat.c"
        HEAP[$0]=$10; //@line 1160 "pyexpat.c"
        __label__ = 3; break; //@line 1160 "pyexpat.c"
      case 3: // $bb2
        var $11=HEAP[$0]; //@line 1158 "pyexpat.c"
        HEAP[$retval]=$11; //@line 1158 "pyexpat.c"
        __label__ = 4; break; //@line 1158 "pyexpat.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 1158 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 1158 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _xmlparse_UseForeignDTD($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 25; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 25);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $flagobj=__stackBase__+16;
        var $flag=__stackBase__+20;
        var $rc=__stackBase__+21;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$flagobj]=0; //@line 1176 "pyexpat.c"
        HEAP[$flag]=1; //@line 1177 "pyexpat.c"
        var $1=HEAP[$args_addr]; //@line 1179 "pyexpat.c"
        var $2=_PyArg_UnpackTuple($1, ((__str54)&4294967295), 0, 1, $flagobj); //@line 1179 "pyexpat.c"
        var $3=((($2))|0)==0; //@line 1179 "pyexpat.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1179 "pyexpat.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 1180 "pyexpat.c"
        __label__ = 7; break; //@line 1180 "pyexpat.c"
      case 2: // $bb1
        var $4=HEAP[$flagobj]; //@line 1181 "pyexpat.c"
        var $5=($4)!=0; //@line 1181 "pyexpat.c"
        if ($5) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1181 "pyexpat.c"
      case 3: // $bb2
        var $6=HEAP[$flagobj]; //@line 1182 "pyexpat.c"
        var $7=_PyObject_IsTrue($6); //@line 1182 "pyexpat.c"
        var $8=((($7))|0)!=0; //@line 1182 "pyexpat.c"
        var $9=unSign(($8), 1, 0); //@line 1182 "pyexpat.c"
        HEAP[$flag]=$9; //@line 1182 "pyexpat.c"
        __label__ = 4; break; //@line 1182 "pyexpat.c"
      case 4: // $bb3
        var $10=HEAP[$flag]; //@line 1183 "pyexpat.c"
        var $11=unSign(($10), 8, 0); //@line 1183 "pyexpat.c"
        var $12=HEAP[$self_addr]; //@line 1183 "pyexpat.c"
        var $13=(($12+8)&4294967295); //@line 1183 "pyexpat.c"
        var $14=HEAP[$13]; //@line 1183 "pyexpat.c"
        var $15=((($11)) & 255); //@line 1183 "pyexpat.c"
        var $16=_XML_UseForeignDTD($14, $15); //@line 1183 "pyexpat.c"
        HEAP[$rc]=$16; //@line 1183 "pyexpat.c"
        var $17=HEAP[$rc]; //@line 1184 "pyexpat.c"
        var $18=((($17))|0)!=0; //@line 1184 "pyexpat.c"
        if ($18) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1184 "pyexpat.c"
      case 5: // $bb4
        var $19=HEAP[$self_addr]; //@line 1185 "pyexpat.c"
        var $20=HEAP[$rc]; //@line 1185 "pyexpat.c"
        var $21=_set_error($19, $20); //@line 1185 "pyexpat.c"
        HEAP[$0]=$21; //@line 1185 "pyexpat.c"
        __label__ = 7; break; //@line 1185 "pyexpat.c"
      case 6: // $bb5
        var $22=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 1187 "pyexpat.c"
        var $23=((($22) + 1)&4294967295); //@line 1187 "pyexpat.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$23; //@line 1187 "pyexpat.c"
        HEAP[$0]=__Py_NoneStruct; //@line 1188 "pyexpat.c"
        __label__ = 7; break; //@line 1188 "pyexpat.c"
      case 7: // $bb6
        var $24=HEAP[$0]; //@line 1180 "pyexpat.c"
        HEAP[$retval]=$24; //@line 1180 "pyexpat.c"
        __label__ = 8; break; //@line 1180 "pyexpat.c"
      case 8: // $return
        var $retval7=HEAP[$retval]; //@line 1180 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 1180 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _init_template_buffer() {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $i=__stackBase__;
        var $_alloca_point_=0;
        HEAP[$i]=0; //@line 1230 "pyexpat.c"
        __label__ = 2; break; //@line 1230 "pyexpat.c"
      case 1: // $bb
        var $0=HEAP[$i]; //@line 1231 "pyexpat.c"
        var $1=HEAP[$i]; //@line 1231 "pyexpat.c"
        var $2=((($1)) & 255); //@line 1231 "pyexpat.c"
        var $3=((_template_buffer+$0)&4294967295); //@line 1231 "pyexpat.c"
        HEAP[$3]=$2; //@line 1231 "pyexpat.c"
        var $4=HEAP[$i]; //@line 1230 "pyexpat.c"
        var $5=((($4) + 1)&4294967295); //@line 1230 "pyexpat.c"
        HEAP[$i]=$5; //@line 1230 "pyexpat.c"
        __label__ = 2; break; //@line 1230 "pyexpat.c"
      case 2: // $bb1
        var $6=HEAP[$i]; //@line 1230 "pyexpat.c"
        var $7=((($6))|0) <= 255; //@line 1230 "pyexpat.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 1230 "pyexpat.c"
      case 3: // $bb2
        HEAP[((_template_buffer+256)&4294967295)]=0; //@line 1233 "pyexpat.c"
        __label__ = 4; break; //@line 1234 "pyexpat.c"
      case 4: // $return
        STACKTOP = __stackBase__;
        return; //@line 1234 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyUnknownEncodingHandler($encodingHandlerData, $name, $info) {
    var __stackBase__  = STACKTOP; STACKTOP += 34; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 34);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $encodingHandlerData_addr=__stackBase__;
        var $name_addr=__stackBase__+4;
        var $info_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $_u_string=__stackBase__+20;
        var $result=__stackBase__+24;
        var $i=__stackBase__+28;
        var $c=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$encodingHandlerData_addr]=$encodingHandlerData;
        HEAP[$name_addr]=$name;
        HEAP[$info_addr]=$info;
        HEAP[$_u_string]=0; //@line 1241 "pyexpat.c"
        HEAP[$result]=0; //@line 1242 "pyexpat.c"
        var $1=HEAP[$name_addr]; //@line 1246 "pyexpat.c"
        var $2=_PyUnicodeUCS2_Decode(((_template_buffer)&4294967295), 256, $1, ((__str62)&4294967295)); //@line 1246 "pyexpat.c"
        var $3=$2; //@line 1246 "pyexpat.c"
        HEAP[$_u_string]=$3; //@line 1246 "pyexpat.c"
        var $4=HEAP[$_u_string]; //@line 1249 "pyexpat.c"
        var $5=($4)==0; //@line 1249 "pyexpat.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1249 "pyexpat.c"
      case 1: // $bb
        var $6=HEAP[$result]; //@line 1250 "pyexpat.c"
        HEAP[$0]=$6; //@line 1250 "pyexpat.c"
        __label__ = 11; break; //@line 1250 "pyexpat.c"
      case 2: // $bb1
        HEAP[$i]=0; //@line 1252 "pyexpat.c"
        __label__ = 7; break; //@line 1252 "pyexpat.c"
      case 3: // $bb2
        var $7=HEAP[$_u_string]; //@line 1254 "pyexpat.c"
        var $8=(($7+12)&4294967295); //@line 1254 "pyexpat.c"
        var $9=HEAP[$8]; //@line 1254 "pyexpat.c"
        var $10=HEAP[$i]; //@line 1254 "pyexpat.c"
        var $11=(($9+2*$10)&4294967295); //@line 1254 "pyexpat.c"
        var $12=HEAP[$11]; //@line 1254 "pyexpat.c"
        HEAP[$c]=$12; //@line 1254 "pyexpat.c"
        var $13=HEAP[$c]; //@line 1255 "pyexpat.c"
        var $14=reSign(($13), 16, 0)==-3; //@line 1255 "pyexpat.c"
        if ($14) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1255 "pyexpat.c"
      case 4: // $bb3
        var $15=HEAP[$i]; //@line 1256 "pyexpat.c"
        var $16=HEAP[$info_addr]; //@line 1256 "pyexpat.c"
        var $17=(($16)&4294967295); //@line 1256 "pyexpat.c"
        var $18=(($17+$15*4)&4294967295); //@line 1256 "pyexpat.c"
        HEAP[$18]=-1; //@line 1256 "pyexpat.c"
        __label__ = 6; break; //@line 1256 "pyexpat.c"
      case 5: // $bb4
        var $19=HEAP[$i]; //@line 1258 "pyexpat.c"
        var $20=HEAP[$c]; //@line 1258 "pyexpat.c"
        var $21=unSign(($20), 16, 0); //@line 1258 "pyexpat.c"
        var $22=HEAP[$info_addr]; //@line 1258 "pyexpat.c"
        var $23=(($22)&4294967295); //@line 1258 "pyexpat.c"
        var $24=(($23+$19*4)&4294967295); //@line 1258 "pyexpat.c"
        HEAP[$24]=$21; //@line 1258 "pyexpat.c"
        __label__ = 6; break; //@line 1258 "pyexpat.c"
      case 6: // $bb5
        var $25=HEAP[$i]; //@line 1252 "pyexpat.c"
        var $26=((($25) + 1)&4294967295); //@line 1252 "pyexpat.c"
        HEAP[$i]=$26; //@line 1252 "pyexpat.c"
        __label__ = 7; break; //@line 1252 "pyexpat.c"
      case 7: // $bb6
        var $27=HEAP[$i]; //@line 1252 "pyexpat.c"
        var $28=((($27))|0) <= 255; //@line 1252 "pyexpat.c"
        if ($28) { __label__ = 3; break; } else { __label__ = 8; break; } //@line 1252 "pyexpat.c"
      case 8: // $bb7
        var $29=HEAP[$info_addr]; //@line 1260 "pyexpat.c"
        var $30=(($29+1024)&4294967295); //@line 1260 "pyexpat.c"
        HEAP[$30]=0; //@line 1260 "pyexpat.c"
        var $31=HEAP[$info_addr]; //@line 1261 "pyexpat.c"
        var $32=(($31+1028)&4294967295); //@line 1261 "pyexpat.c"
        HEAP[$32]=0; //@line 1261 "pyexpat.c"
        var $33=HEAP[$info_addr]; //@line 1262 "pyexpat.c"
        var $34=(($33+1032)&4294967295); //@line 1262 "pyexpat.c"
        HEAP[$34]=0; //@line 1262 "pyexpat.c"
        HEAP[$result]=1; //@line 1263 "pyexpat.c"
        var $35=HEAP[$_u_string]; //@line 1264 "pyexpat.c"
        var $36=$35; //@line 1264 "pyexpat.c"
        var $37=(($36)&4294967295); //@line 1264 "pyexpat.c"
        var $38=HEAP[$37]; //@line 1264 "pyexpat.c"
        var $39=((($38) - 1)&4294967295); //@line 1264 "pyexpat.c"
        var $40=(($36)&4294967295); //@line 1264 "pyexpat.c"
        HEAP[$40]=$39; //@line 1264 "pyexpat.c"
        var $41=(($36)&4294967295); //@line 1264 "pyexpat.c"
        var $42=HEAP[$41]; //@line 1264 "pyexpat.c"
        var $43=((($42))|0)==0; //@line 1264 "pyexpat.c"
        if ($43) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1264 "pyexpat.c"
      case 9: // $bb8
        var $44=HEAP[$_u_string]; //@line 1264 "pyexpat.c"
        var $45=$44; //@line 1264 "pyexpat.c"
        var $46=(($45+4)&4294967295); //@line 1264 "pyexpat.c"
        var $47=HEAP[$46]; //@line 1264 "pyexpat.c"
        var $48=(($47+24)&4294967295); //@line 1264 "pyexpat.c"
        var $49=HEAP[$48]; //@line 1264 "pyexpat.c"
        var $50=HEAP[$_u_string]; //@line 1264 "pyexpat.c"
        var $51=$50; //@line 1264 "pyexpat.c"
        FUNCTION_TABLE[$49]($51); //@line 1264 "pyexpat.c"
        __label__ = 10; break; //@line 1264 "pyexpat.c"
      case 10: // $bb9
        var $52=HEAP[$result]; //@line 1265 "pyexpat.c"
        HEAP[$0]=$52; //@line 1265 "pyexpat.c"
        __label__ = 11; break; //@line 1265 "pyexpat.c"
      case 11: // $bb10
        var $53=HEAP[$0]; //@line 1250 "pyexpat.c"
        HEAP[$retval]=$53; //@line 1250 "pyexpat.c"
        __label__ = 12; break; //@line 1250 "pyexpat.c"
      case 12: // $return
        var $retval11=HEAP[$retval]; //@line 1250 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 1250 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _newxmlparseobject($encoding, $namespace_separator, $intern) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $encoding_addr=__stackBase__;
        var $namespace_separator_addr=__stackBase__+4;
        var $intern_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $i=__stackBase__+20;
        var $self=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$encoding_addr]=$encoding;
        HEAP[$namespace_separator_addr]=$namespace_separator;
        HEAP[$intern_addr]=$intern;
        var $1=__PyObject_GC_New(_Xmlparsetype); //@line 1278 "pyexpat.c"
        var $2=$1; //@line 1278 "pyexpat.c"
        HEAP[$self]=$2; //@line 1278 "pyexpat.c"
        var $3=HEAP[$self]; //@line 1282 "pyexpat.c"
        var $4=($3)==0; //@line 1282 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1282 "pyexpat.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 1283 "pyexpat.c"
        __label__ = 19; break; //@line 1283 "pyexpat.c"
      case 2: // $bb1
        var $5=HEAP[$self]; //@line 1286 "pyexpat.c"
        var $6=(($5+12)&4294967295); //@line 1286 "pyexpat.c"
        HEAP[$6]=1; //@line 1286 "pyexpat.c"
        var $7=HEAP[$self]; //@line 1291 "pyexpat.c"
        var $8=(($7+32)&4294967295); //@line 1291 "pyexpat.c"
        HEAP[$8]=0; //@line 1291 "pyexpat.c"
        var $9=HEAP[$self]; //@line 1292 "pyexpat.c"
        var $10=(($9+36)&4294967295); //@line 1292 "pyexpat.c"
        HEAP[$10]=8192; //@line 1292 "pyexpat.c"
        var $11=HEAP[$self]; //@line 1293 "pyexpat.c"
        var $12=(($11+40)&4294967295); //@line 1293 "pyexpat.c"
        HEAP[$12]=0; //@line 1293 "pyexpat.c"
        var $13=HEAP[$self]; //@line 1294 "pyexpat.c"
        var $14=(($13+16)&4294967295); //@line 1294 "pyexpat.c"
        HEAP[$14]=0; //@line 1294 "pyexpat.c"
        var $15=HEAP[$self]; //@line 1295 "pyexpat.c"
        var $16=(($15+20)&4294967295); //@line 1295 "pyexpat.c"
        HEAP[$16]=0; //@line 1295 "pyexpat.c"
        var $17=HEAP[$self]; //@line 1296 "pyexpat.c"
        var $18=(($17+24)&4294967295); //@line 1296 "pyexpat.c"
        HEAP[$18]=0; //@line 1296 "pyexpat.c"
        var $19=HEAP[$self]; //@line 1297 "pyexpat.c"
        var $20=(($19+28)&4294967295); //@line 1297 "pyexpat.c"
        HEAP[$20]=0; //@line 1297 "pyexpat.c"
        var $21=HEAP[$self]; //@line 1298 "pyexpat.c"
        var $22=(($21+48)&4294967295); //@line 1298 "pyexpat.c"
        HEAP[$22]=0; //@line 1298 "pyexpat.c"
        var $23=HEAP[$namespace_separator_addr]; //@line 1299 "pyexpat.c"
        var $24=($23)!=0; //@line 1299 "pyexpat.c"
        if ($24) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1299 "pyexpat.c"
      case 3: // $bb2
        var $25=HEAP[$namespace_separator_addr]; //@line 1300 "pyexpat.c"
        var $26=HEAP[$25]; //@line 1300 "pyexpat.c"
        var $27=reSign(($26), 8, 0); //@line 1300 "pyexpat.c"
        var $28=HEAP[$encoding_addr]; //@line 1300 "pyexpat.c"
        var $29=((($27)) & 255); //@line 1300 "pyexpat.c"
        var $30=_XML_ParserCreateNS($28, $29); //@line 1300 "pyexpat.c"
        var $31=HEAP[$self]; //@line 1300 "pyexpat.c"
        var $32=(($31+8)&4294967295); //@line 1300 "pyexpat.c"
        HEAP[$32]=$30; //@line 1300 "pyexpat.c"
        __label__ = 5; break; //@line 1300 "pyexpat.c"
      case 4: // $bb3
        var $33=HEAP[$encoding_addr]; //@line 1303 "pyexpat.c"
        var $34=_XML_ParserCreate($33); //@line 1303 "pyexpat.c"
        var $35=HEAP[$self]; //@line 1303 "pyexpat.c"
        var $36=(($35+8)&4294967295); //@line 1303 "pyexpat.c"
        HEAP[$36]=$34; //@line 1303 "pyexpat.c"
        __label__ = 5; break; //@line 1303 "pyexpat.c"
      case 5: // $bb4
        var $37=HEAP[$self]; //@line 1305 "pyexpat.c"
        var $38=(($37+44)&4294967295); //@line 1305 "pyexpat.c"
        var $39=HEAP[$intern_addr]; //@line 1305 "pyexpat.c"
        HEAP[$38]=$39; //@line 1305 "pyexpat.c"
        var $40=HEAP[$self]; //@line 1306 "pyexpat.c"
        var $41=(($40+44)&4294967295); //@line 1306 "pyexpat.c"
        var $42=HEAP[$41]; //@line 1306 "pyexpat.c"
        var $43=($42)!=0; //@line 1306 "pyexpat.c"
        if ($43) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1306 "pyexpat.c"
      case 6: // $bb5
        var $44=HEAP[$self]; //@line 1306 "pyexpat.c"
        var $45=(($44+44)&4294967295); //@line 1306 "pyexpat.c"
        var $46=HEAP[$45]; //@line 1306 "pyexpat.c"
        var $47=(($46)&4294967295); //@line 1306 "pyexpat.c"
        var $48=HEAP[$47]; //@line 1306 "pyexpat.c"
        var $49=((($48) + 1)&4294967295); //@line 1306 "pyexpat.c"
        var $50=(($46)&4294967295); //@line 1306 "pyexpat.c"
        HEAP[$50]=$49; //@line 1306 "pyexpat.c"
        __label__ = 7; break; //@line 1306 "pyexpat.c"
      case 7: // $bb6
        var $51=HEAP[$self]; //@line 1308 "pyexpat.c"
        var $52=$51; //@line 1308 "pyexpat.c"
        _PyObject_GC_Track($52); //@line 1308 "pyexpat.c"
        var $53=HEAP[$self]; //@line 1312 "pyexpat.c"
        var $54=(($53+8)&4294967295); //@line 1312 "pyexpat.c"
        var $55=HEAP[$54]; //@line 1312 "pyexpat.c"
        var $56=($55)==0; //@line 1312 "pyexpat.c"
        if ($56) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 1312 "pyexpat.c"
      case 8: // $bb7
        var $57=HEAP[_PyExc_RuntimeError]; //@line 1313 "pyexpat.c"
        _PyErr_SetString($57, ((__str63)&4294967295)); //@line 1313 "pyexpat.c"
        var $58=HEAP[$self]; //@line 1315 "pyexpat.c"
        var $59=$58; //@line 1315 "pyexpat.c"
        var $60=(($59)&4294967295); //@line 1315 "pyexpat.c"
        var $61=HEAP[$60]; //@line 1315 "pyexpat.c"
        var $62=((($61) - 1)&4294967295); //@line 1315 "pyexpat.c"
        var $63=(($59)&4294967295); //@line 1315 "pyexpat.c"
        HEAP[$63]=$62; //@line 1315 "pyexpat.c"
        var $64=(($59)&4294967295); //@line 1315 "pyexpat.c"
        var $65=HEAP[$64]; //@line 1315 "pyexpat.c"
        var $66=((($65))|0)==0; //@line 1315 "pyexpat.c"
        if ($66) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1315 "pyexpat.c"
      case 9: // $bb8
        var $67=HEAP[$self]; //@line 1315 "pyexpat.c"
        var $68=$67; //@line 1315 "pyexpat.c"
        var $69=(($68+4)&4294967295); //@line 1315 "pyexpat.c"
        var $70=HEAP[$69]; //@line 1315 "pyexpat.c"
        var $71=(($70+24)&4294967295); //@line 1315 "pyexpat.c"
        var $72=HEAP[$71]; //@line 1315 "pyexpat.c"
        var $73=HEAP[$self]; //@line 1315 "pyexpat.c"
        var $74=$73; //@line 1315 "pyexpat.c"
        FUNCTION_TABLE[$72]($74); //@line 1315 "pyexpat.c"
        __label__ = 10; break; //@line 1315 "pyexpat.c"
      case 10: // $bb9
        HEAP[$0]=0; //@line 1316 "pyexpat.c"
        __label__ = 19; break; //@line 1316 "pyexpat.c"
      case 11: // $bb10
        var $75=HEAP[$self]; //@line 1318 "pyexpat.c"
        var $76=(($75+8)&4294967295); //@line 1318 "pyexpat.c"
        var $77=HEAP[$76]; //@line 1318 "pyexpat.c"
        var $78=HEAP[$self]; //@line 1318 "pyexpat.c"
        var $79=$78; //@line 1318 "pyexpat.c"
        _XML_SetUserData($77, $79); //@line 1318 "pyexpat.c"
        var $80=HEAP[$self]; //@line 1320 "pyexpat.c"
        var $81=(($80+8)&4294967295); //@line 1320 "pyexpat.c"
        var $82=HEAP[$81]; //@line 1320 "pyexpat.c"
        _XML_SetUnknownEncodingHandler($82, (FUNCTION_TABLE_OFFSET + 10), 0); //@line 1320 "pyexpat.c"
        HEAP[$i]=0; //@line 1324 "pyexpat.c"
        __label__ = 13; break; //@line 1324 "pyexpat.c"
      case 12: // $bb11
        var $83=HEAP[$i]; //@line 1324 "pyexpat.c"
        var $84=((($83) + 1)&4294967295); //@line 1324 "pyexpat.c"
        HEAP[$i]=$84; //@line 1324 "pyexpat.c"
        __label__ = 13; break; //@line 1324 "pyexpat.c"
      case 13: // $bb12
        var $85=HEAP[$i]; //@line 1324 "pyexpat.c"
        var $86=((_handler_info+$85*20)&4294967295); //@line 1324 "pyexpat.c"
        var $87=(($86)&4294967295); //@line 1324 "pyexpat.c"
        var $88=HEAP[$87]; //@line 1324 "pyexpat.c"
        var $89=($88)!=0; //@line 1324 "pyexpat.c"
        if ($89) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 1324 "pyexpat.c"
      case 14: // $bb13
        var $90=HEAP[$i]; //@line 1327 "pyexpat.c"
        var $91=((($90) * 4)&4294967295); //@line 1327 "pyexpat.c"
        var $92=_malloc($91); //@line 1327 "pyexpat.c"
        var $93=$92; //@line 1327 "pyexpat.c"
        var $94=HEAP[$self]; //@line 1327 "pyexpat.c"
        var $95=(($94+48)&4294967295); //@line 1327 "pyexpat.c"
        HEAP[$95]=$93; //@line 1327 "pyexpat.c"
        var $96=HEAP[$self]; //@line 1328 "pyexpat.c"
        var $97=(($96+48)&4294967295); //@line 1328 "pyexpat.c"
        var $98=HEAP[$97]; //@line 1328 "pyexpat.c"
        var $99=($98)==0; //@line 1328 "pyexpat.c"
        if ($99) { __label__ = 15; break; } else { __label__ = 18; break; } //@line 1328 "pyexpat.c"
      case 15: // $bb14
        var $100=HEAP[$self]; //@line 1329 "pyexpat.c"
        var $101=$100; //@line 1329 "pyexpat.c"
        var $102=(($101)&4294967295); //@line 1329 "pyexpat.c"
        var $103=HEAP[$102]; //@line 1329 "pyexpat.c"
        var $104=((($103) - 1)&4294967295); //@line 1329 "pyexpat.c"
        var $105=(($101)&4294967295); //@line 1329 "pyexpat.c"
        HEAP[$105]=$104; //@line 1329 "pyexpat.c"
        var $106=(($101)&4294967295); //@line 1329 "pyexpat.c"
        var $107=HEAP[$106]; //@line 1329 "pyexpat.c"
        var $108=((($107))|0)==0; //@line 1329 "pyexpat.c"
        if ($108) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 1329 "pyexpat.c"
      case 16: // $bb15
        var $109=HEAP[$self]; //@line 1329 "pyexpat.c"
        var $110=$109; //@line 1329 "pyexpat.c"
        var $111=(($110+4)&4294967295); //@line 1329 "pyexpat.c"
        var $112=HEAP[$111]; //@line 1329 "pyexpat.c"
        var $113=(($112+24)&4294967295); //@line 1329 "pyexpat.c"
        var $114=HEAP[$113]; //@line 1329 "pyexpat.c"
        var $115=HEAP[$self]; //@line 1329 "pyexpat.c"
        var $116=$115; //@line 1329 "pyexpat.c"
        FUNCTION_TABLE[$114]($116); //@line 1329 "pyexpat.c"
        __label__ = 17; break; //@line 1329 "pyexpat.c"
      case 17: // $bb16
        var $117=_PyErr_NoMemory(); //@line 1330 "pyexpat.c"
        HEAP[$0]=$117; //@line 1330 "pyexpat.c"
        __label__ = 19; break; //@line 1330 "pyexpat.c"
      case 18: // $bb17
        var $118=HEAP[$self]; //@line 1332 "pyexpat.c"
        _clear_handlers($118, 1); //@line 1332 "pyexpat.c"
        var $119=HEAP[$self]; //@line 1334 "pyexpat.c"
        var $120=$119; //@line 1334 "pyexpat.c"
        HEAP[$0]=$120; //@line 1334 "pyexpat.c"
        __label__ = 19; break; //@line 1334 "pyexpat.c"
      case 19: // $bb18
        var $121=HEAP[$0]; //@line 1283 "pyexpat.c"
        HEAP[$retval]=$121; //@line 1283 "pyexpat.c"
        __label__ = 20; break; //@line 1283 "pyexpat.c"
      case 20: // $return
        var $retval19=HEAP[$retval]; //@line 1283 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval19; //@line 1283 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _xmlparse_dealloc($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $i=__stackBase__+4;
        var $temp=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $0=HEAP[$self_addr]; //@line 1343 "pyexpat.c"
        var $1=$0; //@line 1343 "pyexpat.c"
        _PyObject_GC_UnTrack($1); //@line 1343 "pyexpat.c"
        var $2=HEAP[$self_addr]; //@line 1347 "pyexpat.c"
        var $3=(($2+8)&4294967295); //@line 1347 "pyexpat.c"
        var $4=HEAP[$3]; //@line 1347 "pyexpat.c"
        var $5=($4)!=0; //@line 1347 "pyexpat.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1347 "pyexpat.c"
      case 1: // $bb
        var $6=HEAP[$self_addr]; //@line 1348 "pyexpat.c"
        var $7=(($6+8)&4294967295); //@line 1348 "pyexpat.c"
        var $8=HEAP[$7]; //@line 1348 "pyexpat.c"
        _XML_ParserFree($8); //@line 1348 "pyexpat.c"
        __label__ = 2; break; //@line 1348 "pyexpat.c"
      case 2: // $bb1
        var $9=HEAP[$self_addr]; //@line 1349 "pyexpat.c"
        var $10=(($9+8)&4294967295); //@line 1349 "pyexpat.c"
        HEAP[$10]=0; //@line 1349 "pyexpat.c"
        var $11=HEAP[$self_addr]; //@line 1351 "pyexpat.c"
        var $12=(($11+48)&4294967295); //@line 1351 "pyexpat.c"
        var $13=HEAP[$12]; //@line 1351 "pyexpat.c"
        var $14=($13)!=0; //@line 1351 "pyexpat.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 10; break; } //@line 1351 "pyexpat.c"
      case 3: // $bb2
        HEAP[$i]=0; //@line 1353 "pyexpat.c"
        __label__ = 8; break; //@line 1353 "pyexpat.c"
      case 4: // $bb3
        var $15=HEAP[$self_addr]; //@line 1354 "pyexpat.c"
        var $16=(($15+48)&4294967295); //@line 1354 "pyexpat.c"
        var $17=HEAP[$16]; //@line 1354 "pyexpat.c"
        var $18=HEAP[$i]; //@line 1354 "pyexpat.c"
        var $19=(($17+4*$18)&4294967295); //@line 1354 "pyexpat.c"
        var $20=HEAP[$19]; //@line 1354 "pyexpat.c"
        HEAP[$temp]=$20; //@line 1354 "pyexpat.c"
        var $21=HEAP[$self_addr]; //@line 1355 "pyexpat.c"
        var $22=(($21+48)&4294967295); //@line 1355 "pyexpat.c"
        var $23=HEAP[$22]; //@line 1355 "pyexpat.c"
        var $24=HEAP[$i]; //@line 1355 "pyexpat.c"
        var $25=(($23+4*$24)&4294967295); //@line 1355 "pyexpat.c"
        HEAP[$25]=0; //@line 1355 "pyexpat.c"
        var $26=HEAP[$temp]; //@line 1356 "pyexpat.c"
        var $27=($26)!=0; //@line 1356 "pyexpat.c"
        if ($27) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 1356 "pyexpat.c"
      case 5: // $bb4
        var $28=HEAP[$temp]; //@line 1356 "pyexpat.c"
        var $29=(($28)&4294967295); //@line 1356 "pyexpat.c"
        var $30=HEAP[$29]; //@line 1356 "pyexpat.c"
        var $31=((($30) - 1)&4294967295); //@line 1356 "pyexpat.c"
        var $32=HEAP[$temp]; //@line 1356 "pyexpat.c"
        var $33=(($32)&4294967295); //@line 1356 "pyexpat.c"
        HEAP[$33]=$31; //@line 1356 "pyexpat.c"
        var $34=HEAP[$temp]; //@line 1356 "pyexpat.c"
        var $35=(($34)&4294967295); //@line 1356 "pyexpat.c"
        var $36=HEAP[$35]; //@line 1356 "pyexpat.c"
        var $37=((($36))|0)==0; //@line 1356 "pyexpat.c"
        if ($37) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1356 "pyexpat.c"
      case 6: // $bb5
        var $38=HEAP[$temp]; //@line 1356 "pyexpat.c"
        var $39=(($38+4)&4294967295); //@line 1356 "pyexpat.c"
        var $40=HEAP[$39]; //@line 1356 "pyexpat.c"
        var $41=(($40+24)&4294967295); //@line 1356 "pyexpat.c"
        var $42=HEAP[$41]; //@line 1356 "pyexpat.c"
        var $43=HEAP[$temp]; //@line 1356 "pyexpat.c"
        FUNCTION_TABLE[$42]($43); //@line 1356 "pyexpat.c"
        __label__ = 7; break; //@line 1356 "pyexpat.c"
      case 7: // $bb6
        var $44=HEAP[$i]; //@line 1353 "pyexpat.c"
        var $45=((($44) + 1)&4294967295); //@line 1353 "pyexpat.c"
        HEAP[$i]=$45; //@line 1353 "pyexpat.c"
        __label__ = 8; break; //@line 1353 "pyexpat.c"
      case 8: // $bb7
        var $46=HEAP[$i]; //@line 1353 "pyexpat.c"
        var $47=((_handler_info+$46*20)&4294967295); //@line 1353 "pyexpat.c"
        var $48=(($47)&4294967295); //@line 1353 "pyexpat.c"
        var $49=HEAP[$48]; //@line 1353 "pyexpat.c"
        var $50=($49)!=0; //@line 1353 "pyexpat.c"
        if ($50) { __label__ = 4; break; } else { __label__ = 9; break; } //@line 1353 "pyexpat.c"
      case 9: // $bb8
        var $51=HEAP[$self_addr]; //@line 1358 "pyexpat.c"
        var $52=(($51+48)&4294967295); //@line 1358 "pyexpat.c"
        var $53=HEAP[$52]; //@line 1358 "pyexpat.c"
        var $54=$53; //@line 1358 "pyexpat.c"
        _free($54); //@line 1358 "pyexpat.c"
        var $55=HEAP[$self_addr]; //@line 1359 "pyexpat.c"
        var $56=(($55+48)&4294967295); //@line 1359 "pyexpat.c"
        HEAP[$56]=0; //@line 1359 "pyexpat.c"
        __label__ = 10; break; //@line 1359 "pyexpat.c"
      case 10: // $bb9
        var $57=HEAP[$self_addr]; //@line 1361 "pyexpat.c"
        var $58=(($57+32)&4294967295); //@line 1361 "pyexpat.c"
        var $59=HEAP[$58]; //@line 1361 "pyexpat.c"
        var $60=($59)!=0; //@line 1361 "pyexpat.c"
        if ($60) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1361 "pyexpat.c"
      case 11: // $bb10
        var $61=HEAP[$self_addr]; //@line 1362 "pyexpat.c"
        var $62=(($61+32)&4294967295); //@line 1362 "pyexpat.c"
        var $63=HEAP[$62]; //@line 1362 "pyexpat.c"
        _free($63); //@line 1362 "pyexpat.c"
        var $64=HEAP[$self_addr]; //@line 1363 "pyexpat.c"
        var $65=(($64+32)&4294967295); //@line 1363 "pyexpat.c"
        HEAP[$65]=0; //@line 1363 "pyexpat.c"
        __label__ = 12; break; //@line 1363 "pyexpat.c"
      case 12: // $bb11
        var $66=HEAP[$self_addr]; //@line 1365 "pyexpat.c"
        var $67=(($66+44)&4294967295); //@line 1365 "pyexpat.c"
        var $68=HEAP[$67]; //@line 1365 "pyexpat.c"
        var $69=($68)!=0; //@line 1365 "pyexpat.c"
        if ($69) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 1365 "pyexpat.c"
      case 13: // $bb12
        var $70=HEAP[$self_addr]; //@line 1365 "pyexpat.c"
        var $71=(($70+44)&4294967295); //@line 1365 "pyexpat.c"
        var $72=HEAP[$71]; //@line 1365 "pyexpat.c"
        var $73=(($72)&4294967295); //@line 1365 "pyexpat.c"
        var $74=HEAP[$73]; //@line 1365 "pyexpat.c"
        var $75=((($74) - 1)&4294967295); //@line 1365 "pyexpat.c"
        var $76=(($72)&4294967295); //@line 1365 "pyexpat.c"
        HEAP[$76]=$75; //@line 1365 "pyexpat.c"
        var $77=(($72)&4294967295); //@line 1365 "pyexpat.c"
        var $78=HEAP[$77]; //@line 1365 "pyexpat.c"
        var $79=((($78))|0)==0; //@line 1365 "pyexpat.c"
        if ($79) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1365 "pyexpat.c"
      case 14: // $bb13
        var $80=HEAP[$self_addr]; //@line 1365 "pyexpat.c"
        var $81=(($80+44)&4294967295); //@line 1365 "pyexpat.c"
        var $82=HEAP[$81]; //@line 1365 "pyexpat.c"
        var $83=(($82+4)&4294967295); //@line 1365 "pyexpat.c"
        var $84=HEAP[$83]; //@line 1365 "pyexpat.c"
        var $85=(($84+24)&4294967295); //@line 1365 "pyexpat.c"
        var $86=HEAP[$85]; //@line 1365 "pyexpat.c"
        var $87=HEAP[$self_addr]; //@line 1365 "pyexpat.c"
        var $88=(($87+44)&4294967295); //@line 1365 "pyexpat.c"
        var $89=HEAP[$88]; //@line 1365 "pyexpat.c"
        FUNCTION_TABLE[$86]($89); //@line 1365 "pyexpat.c"
        __label__ = 15; break; //@line 1365 "pyexpat.c"
      case 15: // $bb14
        var $90=HEAP[$self_addr]; //@line 1371 "pyexpat.c"
        var $91=$90; //@line 1371 "pyexpat.c"
        _PyObject_GC_Del($91); //@line 1371 "pyexpat.c"
        __label__ = 16; break; //@line 1373 "pyexpat.c"
      case 16: // $return
        STACKTOP = __stackBase__;
        return; //@line 1373 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _handlername2int($name) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $name_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $i=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$name_addr]=$name;
        HEAP[$i]=0; //@line 1379 "pyexpat.c"
        __label__ = 4; break; //@line 1379 "pyexpat.c"
      case 1: // $bb
        var $1=HEAP[$i]; //@line 1380 "pyexpat.c"
        var $2=((_handler_info+$1*20)&4294967295); //@line 1380 "pyexpat.c"
        var $3=(($2)&4294967295); //@line 1380 "pyexpat.c"
        var $4=HEAP[$3]; //@line 1380 "pyexpat.c"
        var $5=HEAP[$name_addr]; //@line 1380 "pyexpat.c"
        var $6=_strcmp($5, $4); //@line 1380 "pyexpat.c"
        var $7=((($6))|0)==0; //@line 1380 "pyexpat.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1380 "pyexpat.c"
      case 2: // $bb1
        var $8=HEAP[$i]; //@line 1381 "pyexpat.c"
        HEAP[$0]=$8; //@line 1381 "pyexpat.c"
        __label__ = 6; break; //@line 1381 "pyexpat.c"
      case 3: // $bb2
        var $9=HEAP[$i]; //@line 1379 "pyexpat.c"
        var $10=((($9) + 1)&4294967295); //@line 1379 "pyexpat.c"
        HEAP[$i]=$10; //@line 1379 "pyexpat.c"
        __label__ = 4; break; //@line 1379 "pyexpat.c"
      case 4: // $bb3
        var $11=HEAP[$i]; //@line 1379 "pyexpat.c"
        var $12=((_handler_info+$11*20)&4294967295); //@line 1379 "pyexpat.c"
        var $13=(($12)&4294967295); //@line 1379 "pyexpat.c"
        var $14=HEAP[$13]; //@line 1379 "pyexpat.c"
        var $15=($14)!=0; //@line 1379 "pyexpat.c"
        if ($15) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 1379 "pyexpat.c"
      case 5: // $bb4
        HEAP[$0]=-1; //@line 1384 "pyexpat.c"
        __label__ = 6; break; //@line 1384 "pyexpat.c"
      case 6: // $bb5
        var $16=HEAP[$0]; //@line 1381 "pyexpat.c"
        HEAP[$retval]=$16; //@line 1381 "pyexpat.c"
        __label__ = 7; break; //@line 1381 "pyexpat.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 1381 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 1381 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _get_pybool($istrue) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $istrue_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $iftmp_110=__stackBase__+12;
        var $result=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$istrue_addr]=$istrue;
        var $1=HEAP[$istrue_addr]; //@line 1390 "pyexpat.c"
        var $2=((($1))|0)!=0; //@line 1390 "pyexpat.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1390 "pyexpat.c"
      case 1: // $bb
        HEAP[$iftmp_110]=__Py_TrueStruct; //@line 1390 "pyexpat.c"
        __label__ = 3; break; //@line 1390 "pyexpat.c"
      case 2: // $bb1
        HEAP[$iftmp_110]=__Py_ZeroStruct; //@line 1390 "pyexpat.c"
        __label__ = 3; break; //@line 1390 "pyexpat.c"
      case 3: // $bb2
        var $3=HEAP[$iftmp_110]; //@line 1390 "pyexpat.c"
        HEAP[$result]=$3; //@line 1390 "pyexpat.c"
        var $4=HEAP[$result]; //@line 1391 "pyexpat.c"
        var $5=(($4)&4294967295); //@line 1391 "pyexpat.c"
        var $6=HEAP[$5]; //@line 1391 "pyexpat.c"
        var $7=((($6) + 1)&4294967295); //@line 1391 "pyexpat.c"
        var $8=HEAP[$result]; //@line 1391 "pyexpat.c"
        var $9=(($8)&4294967295); //@line 1391 "pyexpat.c"
        HEAP[$9]=$7; //@line 1391 "pyexpat.c"
        var $10=HEAP[$result]; //@line 1392 "pyexpat.c"
        HEAP[$0]=$10; //@line 1392 "pyexpat.c"
        var $11=HEAP[$0]; //@line 1392 "pyexpat.c"
        HEAP[$retval]=$11; //@line 1392 "pyexpat.c"
        __label__ = 4; break; //@line 1392 "pyexpat.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 1392 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 1392 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _xmlparse_getattr($self, $name) {
    var __stackBase__  = STACKTOP; STACKTOP += 96; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 96);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $name_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $handlernum=__stackBase__+16;
        var $result=__stackBase__+20;
        var $i=__stackBase__+24;
        var $rc=__stackBase__+28;
        var $o=__stackBase__+32;
        var $o50=__stackBase__+36;
        var $o56=__stackBase__+40;
        var $o62=__stackBase__+44;
        var $o68=__stackBase__+48;
        var $o74=__stackBase__+52;
        var $o80=__stackBase__+56;
        var $o86=__stackBase__+60;
        var $o92=__stackBase__+64;
        var $o98=__stackBase__+68;
        var $o104=__stackBase__+72;
        var $o110=__stackBase__+76;
        var $o116=__stackBase__+80;
        var $o122=__stackBase__+84;
        var $o128=__stackBase__+88;
        var $o134=__stackBase__+92;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$name_addr]=$name;
        var $1=HEAP[$name_addr]; //@line 1398 "pyexpat.c"
        var $2=_handlername2int($1); //@line 1398 "pyexpat.c"
        HEAP[$handlernum]=$2; //@line 1398 "pyexpat.c"
        var $3=HEAP[$handlernum]; //@line 1400 "pyexpat.c"
        var $4=((($3))|0)!=-1; //@line 1400 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 1400 "pyexpat.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 1401 "pyexpat.c"
        var $6=(($5+48)&4294967295); //@line 1401 "pyexpat.c"
        var $7=HEAP[$6]; //@line 1401 "pyexpat.c"
        var $8=HEAP[$handlernum]; //@line 1401 "pyexpat.c"
        var $9=(($7+4*$8)&4294967295); //@line 1401 "pyexpat.c"
        var $10=HEAP[$9]; //@line 1401 "pyexpat.c"
        HEAP[$result]=$10; //@line 1401 "pyexpat.c"
        var $11=HEAP[$result]; //@line 1402 "pyexpat.c"
        var $12=($11)==0; //@line 1402 "pyexpat.c"
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1402 "pyexpat.c"
      case 2: // $bb1
        HEAP[$result]=__Py_NoneStruct; //@line 1403 "pyexpat.c"
        __label__ = 3; break; //@line 1403 "pyexpat.c"
      case 3: // $bb2
        var $13=HEAP[$result]; //@line 1404 "pyexpat.c"
        var $14=(($13)&4294967295); //@line 1404 "pyexpat.c"
        var $15=HEAP[$14]; //@line 1404 "pyexpat.c"
        var $16=((($15) + 1)&4294967295); //@line 1404 "pyexpat.c"
        var $17=HEAP[$result]; //@line 1404 "pyexpat.c"
        var $18=(($17)&4294967295); //@line 1404 "pyexpat.c"
        HEAP[$18]=$16; //@line 1404 "pyexpat.c"
        var $19=HEAP[$result]; //@line 1405 "pyexpat.c"
        HEAP[$0]=$19; //@line 1405 "pyexpat.c"
        __label__ = 127; break; //@line 1405 "pyexpat.c"
      case 4: // $bb3
        var $20=HEAP[$name_addr]; //@line 1407 "pyexpat.c"
        var $21=(($20)&4294967295); //@line 1407 "pyexpat.c"
        var $22=HEAP[$21]; //@line 1407 "pyexpat.c"
        var $23=reSign(($22), 8, 0)==69; //@line 1407 "pyexpat.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 13; break; } //@line 1407 "pyexpat.c"
      case 5: // $bb4
        var $24=HEAP[$name_addr]; //@line 1408 "pyexpat.c"
        var $25=_strcmp($24, ((__str64)&4294967295)); //@line 1408 "pyexpat.c"
        var $26=((($25))|0)==0; //@line 1408 "pyexpat.c"
        if ($26) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1408 "pyexpat.c"
      case 6: // $bb5
        var $27=HEAP[$self_addr]; //@line 1409 "pyexpat.c"
        var $28=(($27+8)&4294967295); //@line 1409 "pyexpat.c"
        var $29=HEAP[$28]; //@line 1409 "pyexpat.c"
        var $30=_XML_GetErrorCode($29); //@line 1409 "pyexpat.c"
        var $31=_PyInt_FromLong($30); //@line 1409 "pyexpat.c"
        HEAP[$0]=$31; //@line 1409 "pyexpat.c"
        __label__ = 127; break; //@line 1409 "pyexpat.c"
      case 7: // $bb6
        var $32=HEAP[$name_addr]; //@line 1411 "pyexpat.c"
        var $33=_strcmp($32, ((__str65)&4294967295)); //@line 1411 "pyexpat.c"
        var $34=((($33))|0)==0; //@line 1411 "pyexpat.c"
        if ($34) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1411 "pyexpat.c"
      case 8: // $bb7
        var $35=HEAP[$self_addr]; //@line 1412 "pyexpat.c"
        var $36=(($35+8)&4294967295); //@line 1412 "pyexpat.c"
        var $37=HEAP[$36]; //@line 1412 "pyexpat.c"
        var $38=_XML_GetCurrentLineNumber($37); //@line 1412 "pyexpat.c"
        var $39=_PyInt_FromLong($38); //@line 1412 "pyexpat.c"
        HEAP[$0]=$39; //@line 1412 "pyexpat.c"
        __label__ = 127; break; //@line 1412 "pyexpat.c"
      case 9: // $bb8
        var $40=HEAP[$name_addr]; //@line 1414 "pyexpat.c"
        var $41=_strcmp($40, ((__str66)&4294967295)); //@line 1414 "pyexpat.c"
        var $42=((($41))|0)==0; //@line 1414 "pyexpat.c"
        if ($42) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1414 "pyexpat.c"
      case 10: // $bb9
        var $43=HEAP[$self_addr]; //@line 1415 "pyexpat.c"
        var $44=(($43+8)&4294967295); //@line 1415 "pyexpat.c"
        var $45=HEAP[$44]; //@line 1415 "pyexpat.c"
        var $46=_XML_GetCurrentColumnNumber($45); //@line 1415 "pyexpat.c"
        var $47=_PyInt_FromLong($46); //@line 1415 "pyexpat.c"
        HEAP[$0]=$47; //@line 1415 "pyexpat.c"
        __label__ = 127; break; //@line 1415 "pyexpat.c"
      case 11: // $bb10
        var $48=HEAP[$name_addr]; //@line 1417 "pyexpat.c"
        var $49=_strcmp($48, ((__str67)&4294967295)); //@line 1417 "pyexpat.c"
        var $50=((($49))|0)==0; //@line 1417 "pyexpat.c"
        if ($50) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1417 "pyexpat.c"
      case 12: // $bb11
        var $51=HEAP[$self_addr]; //@line 1418 "pyexpat.c"
        var $52=(($51+8)&4294967295); //@line 1418 "pyexpat.c"
        var $53=HEAP[$52]; //@line 1418 "pyexpat.c"
        var $54=_XML_GetCurrentByteIndex($53); //@line 1418 "pyexpat.c"
        var $55=_PyInt_FromLong($54); //@line 1418 "pyexpat.c"
        HEAP[$0]=$55; //@line 1418 "pyexpat.c"
        __label__ = 127; break; //@line 1418 "pyexpat.c"
      case 13: // $bb12
        var $56=HEAP[$name_addr]; //@line 1421 "pyexpat.c"
        var $57=(($56)&4294967295); //@line 1421 "pyexpat.c"
        var $58=HEAP[$57]; //@line 1421 "pyexpat.c"
        var $59=reSign(($58), 8, 0)==67; //@line 1421 "pyexpat.c"
        if ($59) { __label__ = 14; break; } else { __label__ = 20; break; } //@line 1421 "pyexpat.c"
      case 14: // $bb13
        var $60=HEAP[$name_addr]; //@line 1422 "pyexpat.c"
        var $61=_strcmp($60, ((__str68)&4294967295)); //@line 1422 "pyexpat.c"
        var $62=((($61))|0)==0; //@line 1422 "pyexpat.c"
        if ($62) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1422 "pyexpat.c"
      case 15: // $bb14
        var $63=HEAP[$self_addr]; //@line 1423 "pyexpat.c"
        var $64=(($63+8)&4294967295); //@line 1423 "pyexpat.c"
        var $65=HEAP[$64]; //@line 1423 "pyexpat.c"
        var $66=_XML_GetCurrentLineNumber($65); //@line 1423 "pyexpat.c"
        var $67=_PyInt_FromLong($66); //@line 1423 "pyexpat.c"
        HEAP[$0]=$67; //@line 1423 "pyexpat.c"
        __label__ = 127; break; //@line 1423 "pyexpat.c"
      case 16: // $bb15
        var $68=HEAP[$name_addr]; //@line 1425 "pyexpat.c"
        var $69=_strcmp($68, ((__str69)&4294967295)); //@line 1425 "pyexpat.c"
        var $70=((($69))|0)==0; //@line 1425 "pyexpat.c"
        if ($70) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 1425 "pyexpat.c"
      case 17: // $bb16
        var $71=HEAP[$self_addr]; //@line 1426 "pyexpat.c"
        var $72=(($71+8)&4294967295); //@line 1426 "pyexpat.c"
        var $73=HEAP[$72]; //@line 1426 "pyexpat.c"
        var $74=_XML_GetCurrentColumnNumber($73); //@line 1426 "pyexpat.c"
        var $75=_PyInt_FromLong($74); //@line 1426 "pyexpat.c"
        HEAP[$0]=$75; //@line 1426 "pyexpat.c"
        __label__ = 127; break; //@line 1426 "pyexpat.c"
      case 18: // $bb17
        var $76=HEAP[$name_addr]; //@line 1428 "pyexpat.c"
        var $77=_strcmp($76, ((__str70)&4294967295)); //@line 1428 "pyexpat.c"
        var $78=((($77))|0)==0; //@line 1428 "pyexpat.c"
        if ($78) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 1428 "pyexpat.c"
      case 19: // $bb18
        var $79=HEAP[$self_addr]; //@line 1429 "pyexpat.c"
        var $80=(($79+8)&4294967295); //@line 1429 "pyexpat.c"
        var $81=HEAP[$80]; //@line 1429 "pyexpat.c"
        var $82=_XML_GetCurrentByteIndex($81); //@line 1429 "pyexpat.c"
        var $83=_PyInt_FromLong($82); //@line 1429 "pyexpat.c"
        HEAP[$0]=$83; //@line 1429 "pyexpat.c"
        __label__ = 127; break; //@line 1429 "pyexpat.c"
      case 20: // $bb19
        var $84=HEAP[$name_addr]; //@line 1432 "pyexpat.c"
        var $85=(($84)&4294967295); //@line 1432 "pyexpat.c"
        var $86=HEAP[$85]; //@line 1432 "pyexpat.c"
        var $87=reSign(($86), 8, 0)==98; //@line 1432 "pyexpat.c"
        if ($87) { __label__ = 21; break; } else { __label__ = 27; break; } //@line 1432 "pyexpat.c"
      case 21: // $bb20
        var $88=HEAP[$name_addr]; //@line 1433 "pyexpat.c"
        var $89=_strcmp($88, ((__str71)&4294967295)); //@line 1433 "pyexpat.c"
        var $90=((($89))|0)==0; //@line 1433 "pyexpat.c"
        if ($90) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 1433 "pyexpat.c"
      case 22: // $bb21
        var $91=HEAP[$self_addr]; //@line 1434 "pyexpat.c"
        var $92=(($91+36)&4294967295); //@line 1434 "pyexpat.c"
        var $93=HEAP[$92]; //@line 1434 "pyexpat.c"
        var $94=_PyInt_FromLong($93); //@line 1434 "pyexpat.c"
        HEAP[$0]=$94; //@line 1434 "pyexpat.c"
        __label__ = 127; break; //@line 1434 "pyexpat.c"
      case 23: // $bb22
        var $95=HEAP[$name_addr]; //@line 1435 "pyexpat.c"
        var $96=_strcmp($95, ((__str72)&4294967295)); //@line 1435 "pyexpat.c"
        var $97=((($96))|0)==0; //@line 1435 "pyexpat.c"
        if ($97) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 1435 "pyexpat.c"
      case 24: // $bb23
        var $98=HEAP[$self_addr]; //@line 1436 "pyexpat.c"
        var $99=(($98+32)&4294967295); //@line 1436 "pyexpat.c"
        var $100=HEAP[$99]; //@line 1436 "pyexpat.c"
        var $101=($100)!=0; //@line 1436 "pyexpat.c"
        var $102=unSign(($101), 1, 0); //@line 1436 "pyexpat.c"
        var $103=_get_pybool($102); //@line 1436 "pyexpat.c"
        HEAP[$0]=$103; //@line 1436 "pyexpat.c"
        __label__ = 127; break; //@line 1436 "pyexpat.c"
      case 25: // $bb24
        var $104=HEAP[$name_addr]; //@line 1437 "pyexpat.c"
        var $105=_strcmp($104, ((__str73)&4294967295)); //@line 1437 "pyexpat.c"
        var $106=((($105))|0)==0; //@line 1437 "pyexpat.c"
        if ($106) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1437 "pyexpat.c"
      case 26: // $bb25
        var $107=HEAP[$self_addr]; //@line 1438 "pyexpat.c"
        var $108=(($107+40)&4294967295); //@line 1438 "pyexpat.c"
        var $109=HEAP[$108]; //@line 1438 "pyexpat.c"
        var $110=_PyInt_FromLong($109); //@line 1438 "pyexpat.c"
        HEAP[$0]=$110; //@line 1438 "pyexpat.c"
        __label__ = 127; break; //@line 1438 "pyexpat.c"
      case 27: // $bb26
        var $111=HEAP[$name_addr]; //@line 1440 "pyexpat.c"
        var $112=_strcmp($111, ((__str74)&4294967295)); //@line 1440 "pyexpat.c"
        var $113=((($112))|0)==0; //@line 1440 "pyexpat.c"
        if ($113) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 1440 "pyexpat.c"
      case 28: // $bb27
        var $114=HEAP[$self_addr]; //@line 1441 "pyexpat.c"
        var $115=(($114+28)&4294967295); //@line 1441 "pyexpat.c"
        var $116=HEAP[$115]; //@line 1441 "pyexpat.c"
        var $117=_get_pybool($116); //@line 1441 "pyexpat.c"
        HEAP[$0]=$117; //@line 1441 "pyexpat.c"
        __label__ = 127; break; //@line 1441 "pyexpat.c"
      case 29: // $bb28
        var $118=HEAP[$name_addr]; //@line 1442 "pyexpat.c"
        var $119=_strcmp($118, ((__str75)&4294967295)); //@line 1442 "pyexpat.c"
        var $120=((($119))|0)==0; //@line 1442 "pyexpat.c"
        if ($120) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 1442 "pyexpat.c"
      case 30: // $bb29
        var $121=HEAP[$self_addr]; //@line 1443 "pyexpat.c"
        var $122=(($121+16)&4294967295); //@line 1443 "pyexpat.c"
        var $123=HEAP[$122]; //@line 1443 "pyexpat.c"
        var $124=_get_pybool($123); //@line 1443 "pyexpat.c"
        HEAP[$0]=$124; //@line 1443 "pyexpat.c"
        __label__ = 127; break; //@line 1443 "pyexpat.c"
      case 31: // $bb30
        var $125=HEAP[$name_addr]; //@line 1444 "pyexpat.c"
        var $126=_strcmp($125, ((__str76)&4294967295)); //@line 1444 "pyexpat.c"
        var $127=((($126))|0)==0; //@line 1444 "pyexpat.c"
        if ($127) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 1444 "pyexpat.c"
      case 32: // $bb31
        var $128=HEAP[$self_addr]; //@line 1445 "pyexpat.c"
        var $129=(($128+12)&4294967295); //@line 1445 "pyexpat.c"
        var $130=HEAP[$129]; //@line 1445 "pyexpat.c"
        var $131=_get_pybool($130); //@line 1445 "pyexpat.c"
        HEAP[$0]=$131; //@line 1445 "pyexpat.c"
        __label__ = 127; break; //@line 1445 "pyexpat.c"
      case 33: // $bb32
        var $132=HEAP[$name_addr]; //@line 1446 "pyexpat.c"
        var $133=_strcmp($132, ((__str77)&4294967295)); //@line 1446 "pyexpat.c"
        var $134=((($133))|0)==0; //@line 1446 "pyexpat.c"
        if ($134) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 1446 "pyexpat.c"
      case 34: // $bb33
        var $135=HEAP[$self_addr]; //@line 1447 "pyexpat.c"
        var $136=(($135+20)&4294967295); //@line 1447 "pyexpat.c"
        var $137=HEAP[$136]; //@line 1447 "pyexpat.c"
        var $138=_get_pybool($137); //@line 1447 "pyexpat.c"
        HEAP[$0]=$138; //@line 1447 "pyexpat.c"
        __label__ = 127; break; //@line 1447 "pyexpat.c"
      case 35: // $bb34
        var $139=HEAP[$name_addr]; //@line 1448 "pyexpat.c"
        var $140=_strcmp($139, ((__str78)&4294967295)); //@line 1448 "pyexpat.c"
        var $141=((($140))|0)==0; //@line 1448 "pyexpat.c"
        if ($141) { __label__ = 36; break; } else { __label__ = 39; break; } //@line 1448 "pyexpat.c"
      case 36: // $bb35
        var $142=HEAP[$self_addr]; //@line 1449 "pyexpat.c"
        var $143=(($142+44)&4294967295); //@line 1449 "pyexpat.c"
        var $144=HEAP[$143]; //@line 1449 "pyexpat.c"
        var $145=($144)==0; //@line 1449 "pyexpat.c"
        if ($145) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 1449 "pyexpat.c"
      case 37: // $bb36
        var $146=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 1450 "pyexpat.c"
        var $147=((($146) + 1)&4294967295); //@line 1450 "pyexpat.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$147; //@line 1450 "pyexpat.c"
        HEAP[$0]=__Py_NoneStruct; //@line 1451 "pyexpat.c"
        __label__ = 127; break; //@line 1451 "pyexpat.c"
      case 38: // $bb37
        var $148=HEAP[$self_addr]; //@line 1454 "pyexpat.c"
        var $149=(($148+44)&4294967295); //@line 1454 "pyexpat.c"
        var $150=HEAP[$149]; //@line 1454 "pyexpat.c"
        var $151=(($150)&4294967295); //@line 1454 "pyexpat.c"
        var $152=HEAP[$151]; //@line 1454 "pyexpat.c"
        var $153=((($152) + 1)&4294967295); //@line 1454 "pyexpat.c"
        var $154=(($150)&4294967295); //@line 1454 "pyexpat.c"
        HEAP[$154]=$153; //@line 1454 "pyexpat.c"
        var $155=HEAP[$self_addr]; //@line 1455 "pyexpat.c"
        var $156=(($155+44)&4294967295); //@line 1455 "pyexpat.c"
        var $157=HEAP[$156]; //@line 1455 "pyexpat.c"
        HEAP[$0]=$157; //@line 1455 "pyexpat.c"
        __label__ = 127; break; //@line 1455 "pyexpat.c"
      case 39: // $bb38
        var $158=HEAP[$name_addr]; //@line 1467 "pyexpat.c"
        var $159=_strcmp($158, ((__str79)&4294967295)); //@line 1467 "pyexpat.c"
        var $160=((($159))|0)==0; //@line 1467 "pyexpat.c"
        if ($160) { __label__ = 40; break; } else { __label__ = 126; break; } //@line 1467 "pyexpat.c"
      case 40: // $bb39
        var $161=_PyList_New(0); //@line 1469 "pyexpat.c"
        HEAP[$rc]=$161; //@line 1469 "pyexpat.c"
        var $162=HEAP[$rc]; //@line 1470 "pyexpat.c"
        var $163=($162)==0; //@line 1470 "pyexpat.c"
        if ($163) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 1470 "pyexpat.c"
      case 41: // $bb40
        HEAP[$0]=0; //@line 1471 "pyexpat.c"
        __label__ = 127; break; //@line 1471 "pyexpat.c"
      case 42: // $bb41
        HEAP[$i]=0; //@line 1472 "pyexpat.c"
        __label__ = 49; break; //@line 1472 "pyexpat.c"
      case 43: // $bb42
        var $164=HEAP[$i]; //@line 1473 "pyexpat.c"
        var $165=((_handler_info+$164*20)&4294967295); //@line 1473 "pyexpat.c"
        var $166=_get_handler_name($165); //@line 1473 "pyexpat.c"
        HEAP[$o]=$166; //@line 1473 "pyexpat.c"
        var $167=HEAP[$o]; //@line 1474 "pyexpat.c"
        var $168=($167)!=0; //@line 1474 "pyexpat.c"
        if ($168) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 1474 "pyexpat.c"
      case 44: // $bb43
        var $169=HEAP[$rc]; //@line 1475 "pyexpat.c"
        var $170=HEAP[$o]; //@line 1475 "pyexpat.c"
        var $171=_PyList_Append($169, $170); //@line 1475 "pyexpat.c"
        __label__ = 45; break; //@line 1475 "pyexpat.c"
      case 45: // $bb44
        var $172=HEAP[$o]; //@line 1476 "pyexpat.c"
        var $173=($172)!=0; //@line 1476 "pyexpat.c"
        if ($173) { __label__ = 46; break; } else { __label__ = 48; break; } //@line 1476 "pyexpat.c"
      case 46: // $bb45
        var $174=HEAP[$o]; //@line 1476 "pyexpat.c"
        var $175=(($174)&4294967295); //@line 1476 "pyexpat.c"
        var $176=HEAP[$175]; //@line 1476 "pyexpat.c"
        var $177=((($176) - 1)&4294967295); //@line 1476 "pyexpat.c"
        var $178=HEAP[$o]; //@line 1476 "pyexpat.c"
        var $179=(($178)&4294967295); //@line 1476 "pyexpat.c"
        HEAP[$179]=$177; //@line 1476 "pyexpat.c"
        var $180=HEAP[$o]; //@line 1476 "pyexpat.c"
        var $181=(($180)&4294967295); //@line 1476 "pyexpat.c"
        var $182=HEAP[$181]; //@line 1476 "pyexpat.c"
        var $183=((($182))|0)==0; //@line 1476 "pyexpat.c"
        if ($183) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 1476 "pyexpat.c"
      case 47: // $bb46
        var $184=HEAP[$o]; //@line 1476 "pyexpat.c"
        var $185=(($184+4)&4294967295); //@line 1476 "pyexpat.c"
        var $186=HEAP[$185]; //@line 1476 "pyexpat.c"
        var $187=(($186+24)&4294967295); //@line 1476 "pyexpat.c"
        var $188=HEAP[$187]; //@line 1476 "pyexpat.c"
        var $189=HEAP[$o]; //@line 1476 "pyexpat.c"
        FUNCTION_TABLE[$188]($189); //@line 1476 "pyexpat.c"
        __label__ = 48; break; //@line 1476 "pyexpat.c"
      case 48: // $bb47
        var $190=HEAP[$i]; //@line 1472 "pyexpat.c"
        var $191=((($190) + 1)&4294967295); //@line 1472 "pyexpat.c"
        HEAP[$i]=$191; //@line 1472 "pyexpat.c"
        __label__ = 49; break; //@line 1472 "pyexpat.c"
      case 49: // $bb48
        var $192=HEAP[$i]; //@line 1472 "pyexpat.c"
        var $193=((_handler_info+$192*20)&4294967295); //@line 1472 "pyexpat.c"
        var $194=(($193)&4294967295); //@line 1472 "pyexpat.c"
        var $195=HEAP[$194]; //@line 1472 "pyexpat.c"
        var $196=($195)!=0; //@line 1472 "pyexpat.c"
        if ($196) { __label__ = 43; break; } else { __label__ = 50; break; } //@line 1472 "pyexpat.c"
      case 50: // $bb49
        var $197=_PyString_FromString(((__str64)&4294967295)); //@line 1478 "pyexpat.c"
        HEAP[$o50]=$197; //@line 1478 "pyexpat.c"
        var $198=HEAP[$o50]; //@line 1478 "pyexpat.c"
        var $199=($198)!=0; //@line 1478 "pyexpat.c"
        if ($199) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 1478 "pyexpat.c"
      case 51: // $bb51
        var $200=HEAP[$rc]; //@line 1478 "pyexpat.c"
        var $201=HEAP[$o50]; //@line 1478 "pyexpat.c"
        var $202=_PyList_Append($200, $201); //@line 1478 "pyexpat.c"
        __label__ = 52; break; //@line 1478 "pyexpat.c"
      case 52: // $bb52
        var $203=HEAP[$o50]; //@line 1478 "pyexpat.c"
        var $204=($203)!=0; //@line 1478 "pyexpat.c"
        if ($204) { __label__ = 53; break; } else { __label__ = 55; break; } //@line 1478 "pyexpat.c"
      case 53: // $bb53
        var $205=HEAP[$o50]; //@line 1478 "pyexpat.c"
        var $206=(($205)&4294967295); //@line 1478 "pyexpat.c"
        var $207=HEAP[$206]; //@line 1478 "pyexpat.c"
        var $208=((($207) - 1)&4294967295); //@line 1478 "pyexpat.c"
        var $209=HEAP[$o50]; //@line 1478 "pyexpat.c"
        var $210=(($209)&4294967295); //@line 1478 "pyexpat.c"
        HEAP[$210]=$208; //@line 1478 "pyexpat.c"
        var $211=HEAP[$o50]; //@line 1478 "pyexpat.c"
        var $212=(($211)&4294967295); //@line 1478 "pyexpat.c"
        var $213=HEAP[$212]; //@line 1478 "pyexpat.c"
        var $214=((($213))|0)==0; //@line 1478 "pyexpat.c"
        if ($214) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 1478 "pyexpat.c"
      case 54: // $bb54
        var $215=HEAP[$o50]; //@line 1478 "pyexpat.c"
        var $216=(($215+4)&4294967295); //@line 1478 "pyexpat.c"
        var $217=HEAP[$216]; //@line 1478 "pyexpat.c"
        var $218=(($217+24)&4294967295); //@line 1478 "pyexpat.c"
        var $219=HEAP[$218]; //@line 1478 "pyexpat.c"
        var $220=HEAP[$o50]; //@line 1478 "pyexpat.c"
        FUNCTION_TABLE[$219]($220); //@line 1478 "pyexpat.c"
        __label__ = 55; break; //@line 1478 "pyexpat.c"
      case 55: // $bb55
        var $221=_PyString_FromString(((__str65)&4294967295)); //@line 1479 "pyexpat.c"
        HEAP[$o56]=$221; //@line 1479 "pyexpat.c"
        var $222=HEAP[$o56]; //@line 1479 "pyexpat.c"
        var $223=($222)!=0; //@line 1479 "pyexpat.c"
        if ($223) { __label__ = 56; break; } else { __label__ = 57; break; } //@line 1479 "pyexpat.c"
      case 56: // $bb57
        var $224=HEAP[$rc]; //@line 1479 "pyexpat.c"
        var $225=HEAP[$o56]; //@line 1479 "pyexpat.c"
        var $226=_PyList_Append($224, $225); //@line 1479 "pyexpat.c"
        __label__ = 57; break; //@line 1479 "pyexpat.c"
      case 57: // $bb58
        var $227=HEAP[$o56]; //@line 1479 "pyexpat.c"
        var $228=($227)!=0; //@line 1479 "pyexpat.c"
        if ($228) { __label__ = 58; break; } else { __label__ = 60; break; } //@line 1479 "pyexpat.c"
      case 58: // $bb59
        var $229=HEAP[$o56]; //@line 1479 "pyexpat.c"
        var $230=(($229)&4294967295); //@line 1479 "pyexpat.c"
        var $231=HEAP[$230]; //@line 1479 "pyexpat.c"
        var $232=((($231) - 1)&4294967295); //@line 1479 "pyexpat.c"
        var $233=HEAP[$o56]; //@line 1479 "pyexpat.c"
        var $234=(($233)&4294967295); //@line 1479 "pyexpat.c"
        HEAP[$234]=$232; //@line 1479 "pyexpat.c"
        var $235=HEAP[$o56]; //@line 1479 "pyexpat.c"
        var $236=(($235)&4294967295); //@line 1479 "pyexpat.c"
        var $237=HEAP[$236]; //@line 1479 "pyexpat.c"
        var $238=((($237))|0)==0; //@line 1479 "pyexpat.c"
        if ($238) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 1479 "pyexpat.c"
      case 59: // $bb60
        var $239=HEAP[$o56]; //@line 1479 "pyexpat.c"
        var $240=(($239+4)&4294967295); //@line 1479 "pyexpat.c"
        var $241=HEAP[$240]; //@line 1479 "pyexpat.c"
        var $242=(($241+24)&4294967295); //@line 1479 "pyexpat.c"
        var $243=HEAP[$242]; //@line 1479 "pyexpat.c"
        var $244=HEAP[$o56]; //@line 1479 "pyexpat.c"
        FUNCTION_TABLE[$243]($244); //@line 1479 "pyexpat.c"
        __label__ = 60; break; //@line 1479 "pyexpat.c"
      case 60: // $bb61
        var $245=_PyString_FromString(((__str66)&4294967295)); //@line 1480 "pyexpat.c"
        HEAP[$o62]=$245; //@line 1480 "pyexpat.c"
        var $246=HEAP[$o62]; //@line 1480 "pyexpat.c"
        var $247=($246)!=0; //@line 1480 "pyexpat.c"
        if ($247) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 1480 "pyexpat.c"
      case 61: // $bb63
        var $248=HEAP[$rc]; //@line 1480 "pyexpat.c"
        var $249=HEAP[$o62]; //@line 1480 "pyexpat.c"
        var $250=_PyList_Append($248, $249); //@line 1480 "pyexpat.c"
        __label__ = 62; break; //@line 1480 "pyexpat.c"
      case 62: // $bb64
        var $251=HEAP[$o62]; //@line 1480 "pyexpat.c"
        var $252=($251)!=0; //@line 1480 "pyexpat.c"
        if ($252) { __label__ = 63; break; } else { __label__ = 65; break; } //@line 1480 "pyexpat.c"
      case 63: // $bb65
        var $253=HEAP[$o62]; //@line 1480 "pyexpat.c"
        var $254=(($253)&4294967295); //@line 1480 "pyexpat.c"
        var $255=HEAP[$254]; //@line 1480 "pyexpat.c"
        var $256=((($255) - 1)&4294967295); //@line 1480 "pyexpat.c"
        var $257=HEAP[$o62]; //@line 1480 "pyexpat.c"
        var $258=(($257)&4294967295); //@line 1480 "pyexpat.c"
        HEAP[$258]=$256; //@line 1480 "pyexpat.c"
        var $259=HEAP[$o62]; //@line 1480 "pyexpat.c"
        var $260=(($259)&4294967295); //@line 1480 "pyexpat.c"
        var $261=HEAP[$260]; //@line 1480 "pyexpat.c"
        var $262=((($261))|0)==0; //@line 1480 "pyexpat.c"
        if ($262) { __label__ = 64; break; } else { __label__ = 65; break; } //@line 1480 "pyexpat.c"
      case 64: // $bb66
        var $263=HEAP[$o62]; //@line 1480 "pyexpat.c"
        var $264=(($263+4)&4294967295); //@line 1480 "pyexpat.c"
        var $265=HEAP[$264]; //@line 1480 "pyexpat.c"
        var $266=(($265+24)&4294967295); //@line 1480 "pyexpat.c"
        var $267=HEAP[$266]; //@line 1480 "pyexpat.c"
        var $268=HEAP[$o62]; //@line 1480 "pyexpat.c"
        FUNCTION_TABLE[$267]($268); //@line 1480 "pyexpat.c"
        __label__ = 65; break; //@line 1480 "pyexpat.c"
      case 65: // $bb67
        var $269=_PyString_FromString(((__str67)&4294967295)); //@line 1481 "pyexpat.c"
        HEAP[$o68]=$269; //@line 1481 "pyexpat.c"
        var $270=HEAP[$o68]; //@line 1481 "pyexpat.c"
        var $271=($270)!=0; //@line 1481 "pyexpat.c"
        if ($271) { __label__ = 66; break; } else { __label__ = 67; break; } //@line 1481 "pyexpat.c"
      case 66: // $bb69
        var $272=HEAP[$rc]; //@line 1481 "pyexpat.c"
        var $273=HEAP[$o68]; //@line 1481 "pyexpat.c"
        var $274=_PyList_Append($272, $273); //@line 1481 "pyexpat.c"
        __label__ = 67; break; //@line 1481 "pyexpat.c"
      case 67: // $bb70
        var $275=HEAP[$o68]; //@line 1481 "pyexpat.c"
        var $276=($275)!=0; //@line 1481 "pyexpat.c"
        if ($276) { __label__ = 68; break; } else { __label__ = 70; break; } //@line 1481 "pyexpat.c"
      case 68: // $bb71
        var $277=HEAP[$o68]; //@line 1481 "pyexpat.c"
        var $278=(($277)&4294967295); //@line 1481 "pyexpat.c"
        var $279=HEAP[$278]; //@line 1481 "pyexpat.c"
        var $280=((($279) - 1)&4294967295); //@line 1481 "pyexpat.c"
        var $281=HEAP[$o68]; //@line 1481 "pyexpat.c"
        var $282=(($281)&4294967295); //@line 1481 "pyexpat.c"
        HEAP[$282]=$280; //@line 1481 "pyexpat.c"
        var $283=HEAP[$o68]; //@line 1481 "pyexpat.c"
        var $284=(($283)&4294967295); //@line 1481 "pyexpat.c"
        var $285=HEAP[$284]; //@line 1481 "pyexpat.c"
        var $286=((($285))|0)==0; //@line 1481 "pyexpat.c"
        if ($286) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 1481 "pyexpat.c"
      case 69: // $bb72
        var $287=HEAP[$o68]; //@line 1481 "pyexpat.c"
        var $288=(($287+4)&4294967295); //@line 1481 "pyexpat.c"
        var $289=HEAP[$288]; //@line 1481 "pyexpat.c"
        var $290=(($289+24)&4294967295); //@line 1481 "pyexpat.c"
        var $291=HEAP[$290]; //@line 1481 "pyexpat.c"
        var $292=HEAP[$o68]; //@line 1481 "pyexpat.c"
        FUNCTION_TABLE[$291]($292); //@line 1481 "pyexpat.c"
        __label__ = 70; break; //@line 1481 "pyexpat.c"
      case 70: // $bb73
        var $293=_PyString_FromString(((__str68)&4294967295)); //@line 1482 "pyexpat.c"
        HEAP[$o74]=$293; //@line 1482 "pyexpat.c"
        var $294=HEAP[$o74]; //@line 1482 "pyexpat.c"
        var $295=($294)!=0; //@line 1482 "pyexpat.c"
        if ($295) { __label__ = 71; break; } else { __label__ = 72; break; } //@line 1482 "pyexpat.c"
      case 71: // $bb75
        var $296=HEAP[$rc]; //@line 1482 "pyexpat.c"
        var $297=HEAP[$o74]; //@line 1482 "pyexpat.c"
        var $298=_PyList_Append($296, $297); //@line 1482 "pyexpat.c"
        __label__ = 72; break; //@line 1482 "pyexpat.c"
      case 72: // $bb76
        var $299=HEAP[$o74]; //@line 1482 "pyexpat.c"
        var $300=($299)!=0; //@line 1482 "pyexpat.c"
        if ($300) { __label__ = 73; break; } else { __label__ = 75; break; } //@line 1482 "pyexpat.c"
      case 73: // $bb77
        var $301=HEAP[$o74]; //@line 1482 "pyexpat.c"
        var $302=(($301)&4294967295); //@line 1482 "pyexpat.c"
        var $303=HEAP[$302]; //@line 1482 "pyexpat.c"
        var $304=((($303) - 1)&4294967295); //@line 1482 "pyexpat.c"
        var $305=HEAP[$o74]; //@line 1482 "pyexpat.c"
        var $306=(($305)&4294967295); //@line 1482 "pyexpat.c"
        HEAP[$306]=$304; //@line 1482 "pyexpat.c"
        var $307=HEAP[$o74]; //@line 1482 "pyexpat.c"
        var $308=(($307)&4294967295); //@line 1482 "pyexpat.c"
        var $309=HEAP[$308]; //@line 1482 "pyexpat.c"
        var $310=((($309))|0)==0; //@line 1482 "pyexpat.c"
        if ($310) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 1482 "pyexpat.c"
      case 74: // $bb78
        var $311=HEAP[$o74]; //@line 1482 "pyexpat.c"
        var $312=(($311+4)&4294967295); //@line 1482 "pyexpat.c"
        var $313=HEAP[$312]; //@line 1482 "pyexpat.c"
        var $314=(($313+24)&4294967295); //@line 1482 "pyexpat.c"
        var $315=HEAP[$314]; //@line 1482 "pyexpat.c"
        var $316=HEAP[$o74]; //@line 1482 "pyexpat.c"
        FUNCTION_TABLE[$315]($316); //@line 1482 "pyexpat.c"
        __label__ = 75; break; //@line 1482 "pyexpat.c"
      case 75: // $bb79
        var $317=_PyString_FromString(((__str69)&4294967295)); //@line 1483 "pyexpat.c"
        HEAP[$o80]=$317; //@line 1483 "pyexpat.c"
        var $318=HEAP[$o80]; //@line 1483 "pyexpat.c"
        var $319=($318)!=0; //@line 1483 "pyexpat.c"
        if ($319) { __label__ = 76; break; } else { __label__ = 77; break; } //@line 1483 "pyexpat.c"
      case 76: // $bb81
        var $320=HEAP[$rc]; //@line 1483 "pyexpat.c"
        var $321=HEAP[$o80]; //@line 1483 "pyexpat.c"
        var $322=_PyList_Append($320, $321); //@line 1483 "pyexpat.c"
        __label__ = 77; break; //@line 1483 "pyexpat.c"
      case 77: // $bb82
        var $323=HEAP[$o80]; //@line 1483 "pyexpat.c"
        var $324=($323)!=0; //@line 1483 "pyexpat.c"
        if ($324) { __label__ = 78; break; } else { __label__ = 80; break; } //@line 1483 "pyexpat.c"
      case 78: // $bb83
        var $325=HEAP[$o80]; //@line 1483 "pyexpat.c"
        var $326=(($325)&4294967295); //@line 1483 "pyexpat.c"
        var $327=HEAP[$326]; //@line 1483 "pyexpat.c"
        var $328=((($327) - 1)&4294967295); //@line 1483 "pyexpat.c"
        var $329=HEAP[$o80]; //@line 1483 "pyexpat.c"
        var $330=(($329)&4294967295); //@line 1483 "pyexpat.c"
        HEAP[$330]=$328; //@line 1483 "pyexpat.c"
        var $331=HEAP[$o80]; //@line 1483 "pyexpat.c"
        var $332=(($331)&4294967295); //@line 1483 "pyexpat.c"
        var $333=HEAP[$332]; //@line 1483 "pyexpat.c"
        var $334=((($333))|0)==0; //@line 1483 "pyexpat.c"
        if ($334) { __label__ = 79; break; } else { __label__ = 80; break; } //@line 1483 "pyexpat.c"
      case 79: // $bb84
        var $335=HEAP[$o80]; //@line 1483 "pyexpat.c"
        var $336=(($335+4)&4294967295); //@line 1483 "pyexpat.c"
        var $337=HEAP[$336]; //@line 1483 "pyexpat.c"
        var $338=(($337+24)&4294967295); //@line 1483 "pyexpat.c"
        var $339=HEAP[$338]; //@line 1483 "pyexpat.c"
        var $340=HEAP[$o80]; //@line 1483 "pyexpat.c"
        FUNCTION_TABLE[$339]($340); //@line 1483 "pyexpat.c"
        __label__ = 80; break; //@line 1483 "pyexpat.c"
      case 80: // $bb85
        var $341=_PyString_FromString(((__str70)&4294967295)); //@line 1484 "pyexpat.c"
        HEAP[$o86]=$341; //@line 1484 "pyexpat.c"
        var $342=HEAP[$o86]; //@line 1484 "pyexpat.c"
        var $343=($342)!=0; //@line 1484 "pyexpat.c"
        if ($343) { __label__ = 81; break; } else { __label__ = 82; break; } //@line 1484 "pyexpat.c"
      case 81: // $bb87
        var $344=HEAP[$rc]; //@line 1484 "pyexpat.c"
        var $345=HEAP[$o86]; //@line 1484 "pyexpat.c"
        var $346=_PyList_Append($344, $345); //@line 1484 "pyexpat.c"
        __label__ = 82; break; //@line 1484 "pyexpat.c"
      case 82: // $bb88
        var $347=HEAP[$o86]; //@line 1484 "pyexpat.c"
        var $348=($347)!=0; //@line 1484 "pyexpat.c"
        if ($348) { __label__ = 83; break; } else { __label__ = 85; break; } //@line 1484 "pyexpat.c"
      case 83: // $bb89
        var $349=HEAP[$o86]; //@line 1484 "pyexpat.c"
        var $350=(($349)&4294967295); //@line 1484 "pyexpat.c"
        var $351=HEAP[$350]; //@line 1484 "pyexpat.c"
        var $352=((($351) - 1)&4294967295); //@line 1484 "pyexpat.c"
        var $353=HEAP[$o86]; //@line 1484 "pyexpat.c"
        var $354=(($353)&4294967295); //@line 1484 "pyexpat.c"
        HEAP[$354]=$352; //@line 1484 "pyexpat.c"
        var $355=HEAP[$o86]; //@line 1484 "pyexpat.c"
        var $356=(($355)&4294967295); //@line 1484 "pyexpat.c"
        var $357=HEAP[$356]; //@line 1484 "pyexpat.c"
        var $358=((($357))|0)==0; //@line 1484 "pyexpat.c"
        if ($358) { __label__ = 84; break; } else { __label__ = 85; break; } //@line 1484 "pyexpat.c"
      case 84: // $bb90
        var $359=HEAP[$o86]; //@line 1484 "pyexpat.c"
        var $360=(($359+4)&4294967295); //@line 1484 "pyexpat.c"
        var $361=HEAP[$360]; //@line 1484 "pyexpat.c"
        var $362=(($361+24)&4294967295); //@line 1484 "pyexpat.c"
        var $363=HEAP[$362]; //@line 1484 "pyexpat.c"
        var $364=HEAP[$o86]; //@line 1484 "pyexpat.c"
        FUNCTION_TABLE[$363]($364); //@line 1484 "pyexpat.c"
        __label__ = 85; break; //@line 1484 "pyexpat.c"
      case 85: // $bb91
        var $365=_PyString_FromString(((__str71)&4294967295)); //@line 1485 "pyexpat.c"
        HEAP[$o92]=$365; //@line 1485 "pyexpat.c"
        var $366=HEAP[$o92]; //@line 1485 "pyexpat.c"
        var $367=($366)!=0; //@line 1485 "pyexpat.c"
        if ($367) { __label__ = 86; break; } else { __label__ = 87; break; } //@line 1485 "pyexpat.c"
      case 86: // $bb93
        var $368=HEAP[$rc]; //@line 1485 "pyexpat.c"
        var $369=HEAP[$o92]; //@line 1485 "pyexpat.c"
        var $370=_PyList_Append($368, $369); //@line 1485 "pyexpat.c"
        __label__ = 87; break; //@line 1485 "pyexpat.c"
      case 87: // $bb94
        var $371=HEAP[$o92]; //@line 1485 "pyexpat.c"
        var $372=($371)!=0; //@line 1485 "pyexpat.c"
        if ($372) { __label__ = 88; break; } else { __label__ = 90; break; } //@line 1485 "pyexpat.c"
      case 88: // $bb95
        var $373=HEAP[$o92]; //@line 1485 "pyexpat.c"
        var $374=(($373)&4294967295); //@line 1485 "pyexpat.c"
        var $375=HEAP[$374]; //@line 1485 "pyexpat.c"
        var $376=((($375) - 1)&4294967295); //@line 1485 "pyexpat.c"
        var $377=HEAP[$o92]; //@line 1485 "pyexpat.c"
        var $378=(($377)&4294967295); //@line 1485 "pyexpat.c"
        HEAP[$378]=$376; //@line 1485 "pyexpat.c"
        var $379=HEAP[$o92]; //@line 1485 "pyexpat.c"
        var $380=(($379)&4294967295); //@line 1485 "pyexpat.c"
        var $381=HEAP[$380]; //@line 1485 "pyexpat.c"
        var $382=((($381))|0)==0; //@line 1485 "pyexpat.c"
        if ($382) { __label__ = 89; break; } else { __label__ = 90; break; } //@line 1485 "pyexpat.c"
      case 89: // $bb96
        var $383=HEAP[$o92]; //@line 1485 "pyexpat.c"
        var $384=(($383+4)&4294967295); //@line 1485 "pyexpat.c"
        var $385=HEAP[$384]; //@line 1485 "pyexpat.c"
        var $386=(($385+24)&4294967295); //@line 1485 "pyexpat.c"
        var $387=HEAP[$386]; //@line 1485 "pyexpat.c"
        var $388=HEAP[$o92]; //@line 1485 "pyexpat.c"
        FUNCTION_TABLE[$387]($388); //@line 1485 "pyexpat.c"
        __label__ = 90; break; //@line 1485 "pyexpat.c"
      case 90: // $bb97
        var $389=_PyString_FromString(((__str72)&4294967295)); //@line 1486 "pyexpat.c"
        HEAP[$o98]=$389; //@line 1486 "pyexpat.c"
        var $390=HEAP[$o98]; //@line 1486 "pyexpat.c"
        var $391=($390)!=0; //@line 1486 "pyexpat.c"
        if ($391) { __label__ = 91; break; } else { __label__ = 92; break; } //@line 1486 "pyexpat.c"
      case 91: // $bb99
        var $392=HEAP[$rc]; //@line 1486 "pyexpat.c"
        var $393=HEAP[$o98]; //@line 1486 "pyexpat.c"
        var $394=_PyList_Append($392, $393); //@line 1486 "pyexpat.c"
        __label__ = 92; break; //@line 1486 "pyexpat.c"
      case 92: // $bb100
        var $395=HEAP[$o98]; //@line 1486 "pyexpat.c"
        var $396=($395)!=0; //@line 1486 "pyexpat.c"
        if ($396) { __label__ = 93; break; } else { __label__ = 95; break; } //@line 1486 "pyexpat.c"
      case 93: // $bb101
        var $397=HEAP[$o98]; //@line 1486 "pyexpat.c"
        var $398=(($397)&4294967295); //@line 1486 "pyexpat.c"
        var $399=HEAP[$398]; //@line 1486 "pyexpat.c"
        var $400=((($399) - 1)&4294967295); //@line 1486 "pyexpat.c"
        var $401=HEAP[$o98]; //@line 1486 "pyexpat.c"
        var $402=(($401)&4294967295); //@line 1486 "pyexpat.c"
        HEAP[$402]=$400; //@line 1486 "pyexpat.c"
        var $403=HEAP[$o98]; //@line 1486 "pyexpat.c"
        var $404=(($403)&4294967295); //@line 1486 "pyexpat.c"
        var $405=HEAP[$404]; //@line 1486 "pyexpat.c"
        var $406=((($405))|0)==0; //@line 1486 "pyexpat.c"
        if ($406) { __label__ = 94; break; } else { __label__ = 95; break; } //@line 1486 "pyexpat.c"
      case 94: // $bb102
        var $407=HEAP[$o98]; //@line 1486 "pyexpat.c"
        var $408=(($407+4)&4294967295); //@line 1486 "pyexpat.c"
        var $409=HEAP[$408]; //@line 1486 "pyexpat.c"
        var $410=(($409+24)&4294967295); //@line 1486 "pyexpat.c"
        var $411=HEAP[$410]; //@line 1486 "pyexpat.c"
        var $412=HEAP[$o98]; //@line 1486 "pyexpat.c"
        FUNCTION_TABLE[$411]($412); //@line 1486 "pyexpat.c"
        __label__ = 95; break; //@line 1486 "pyexpat.c"
      case 95: // $bb103
        var $413=_PyString_FromString(((__str73)&4294967295)); //@line 1487 "pyexpat.c"
        HEAP[$o104]=$413; //@line 1487 "pyexpat.c"
        var $414=HEAP[$o104]; //@line 1487 "pyexpat.c"
        var $415=($414)!=0; //@line 1487 "pyexpat.c"
        if ($415) { __label__ = 96; break; } else { __label__ = 97; break; } //@line 1487 "pyexpat.c"
      case 96: // $bb105
        var $416=HEAP[$rc]; //@line 1487 "pyexpat.c"
        var $417=HEAP[$o104]; //@line 1487 "pyexpat.c"
        var $418=_PyList_Append($416, $417); //@line 1487 "pyexpat.c"
        __label__ = 97; break; //@line 1487 "pyexpat.c"
      case 97: // $bb106
        var $419=HEAP[$o104]; //@line 1487 "pyexpat.c"
        var $420=($419)!=0; //@line 1487 "pyexpat.c"
        if ($420) { __label__ = 98; break; } else { __label__ = 100; break; } //@line 1487 "pyexpat.c"
      case 98: // $bb107
        var $421=HEAP[$o104]; //@line 1487 "pyexpat.c"
        var $422=(($421)&4294967295); //@line 1487 "pyexpat.c"
        var $423=HEAP[$422]; //@line 1487 "pyexpat.c"
        var $424=((($423) - 1)&4294967295); //@line 1487 "pyexpat.c"
        var $425=HEAP[$o104]; //@line 1487 "pyexpat.c"
        var $426=(($425)&4294967295); //@line 1487 "pyexpat.c"
        HEAP[$426]=$424; //@line 1487 "pyexpat.c"
        var $427=HEAP[$o104]; //@line 1487 "pyexpat.c"
        var $428=(($427)&4294967295); //@line 1487 "pyexpat.c"
        var $429=HEAP[$428]; //@line 1487 "pyexpat.c"
        var $430=((($429))|0)==0; //@line 1487 "pyexpat.c"
        if ($430) { __label__ = 99; break; } else { __label__ = 100; break; } //@line 1487 "pyexpat.c"
      case 99: // $bb108
        var $431=HEAP[$o104]; //@line 1487 "pyexpat.c"
        var $432=(($431+4)&4294967295); //@line 1487 "pyexpat.c"
        var $433=HEAP[$432]; //@line 1487 "pyexpat.c"
        var $434=(($433+24)&4294967295); //@line 1487 "pyexpat.c"
        var $435=HEAP[$434]; //@line 1487 "pyexpat.c"
        var $436=HEAP[$o104]; //@line 1487 "pyexpat.c"
        FUNCTION_TABLE[$435]($436); //@line 1487 "pyexpat.c"
        __label__ = 100; break; //@line 1487 "pyexpat.c"
      case 100: // $bb109
        var $437=_PyString_FromString(((__str74)&4294967295)); //@line 1488 "pyexpat.c"
        HEAP[$o110]=$437; //@line 1488 "pyexpat.c"
        var $438=HEAP[$o110]; //@line 1488 "pyexpat.c"
        var $439=($438)!=0; //@line 1488 "pyexpat.c"
        if ($439) { __label__ = 101; break; } else { __label__ = 102; break; } //@line 1488 "pyexpat.c"
      case 101: // $bb111
        var $440=HEAP[$rc]; //@line 1488 "pyexpat.c"
        var $441=HEAP[$o110]; //@line 1488 "pyexpat.c"
        var $442=_PyList_Append($440, $441); //@line 1488 "pyexpat.c"
        __label__ = 102; break; //@line 1488 "pyexpat.c"
      case 102: // $bb112
        var $443=HEAP[$o110]; //@line 1488 "pyexpat.c"
        var $444=($443)!=0; //@line 1488 "pyexpat.c"
        if ($444) { __label__ = 103; break; } else { __label__ = 105; break; } //@line 1488 "pyexpat.c"
      case 103: // $bb113
        var $445=HEAP[$o110]; //@line 1488 "pyexpat.c"
        var $446=(($445)&4294967295); //@line 1488 "pyexpat.c"
        var $447=HEAP[$446]; //@line 1488 "pyexpat.c"
        var $448=((($447) - 1)&4294967295); //@line 1488 "pyexpat.c"
        var $449=HEAP[$o110]; //@line 1488 "pyexpat.c"
        var $450=(($449)&4294967295); //@line 1488 "pyexpat.c"
        HEAP[$450]=$448; //@line 1488 "pyexpat.c"
        var $451=HEAP[$o110]; //@line 1488 "pyexpat.c"
        var $452=(($451)&4294967295); //@line 1488 "pyexpat.c"
        var $453=HEAP[$452]; //@line 1488 "pyexpat.c"
        var $454=((($453))|0)==0; //@line 1488 "pyexpat.c"
        if ($454) { __label__ = 104; break; } else { __label__ = 105; break; } //@line 1488 "pyexpat.c"
      case 104: // $bb114
        var $455=HEAP[$o110]; //@line 1488 "pyexpat.c"
        var $456=(($455+4)&4294967295); //@line 1488 "pyexpat.c"
        var $457=HEAP[$456]; //@line 1488 "pyexpat.c"
        var $458=(($457+24)&4294967295); //@line 1488 "pyexpat.c"
        var $459=HEAP[$458]; //@line 1488 "pyexpat.c"
        var $460=HEAP[$o110]; //@line 1488 "pyexpat.c"
        FUNCTION_TABLE[$459]($460); //@line 1488 "pyexpat.c"
        __label__ = 105; break; //@line 1488 "pyexpat.c"
      case 105: // $bb115
        var $461=_PyString_FromString(((__str75)&4294967295)); //@line 1489 "pyexpat.c"
        HEAP[$o116]=$461; //@line 1489 "pyexpat.c"
        var $462=HEAP[$o116]; //@line 1489 "pyexpat.c"
        var $463=($462)!=0; //@line 1489 "pyexpat.c"
        if ($463) { __label__ = 106; break; } else { __label__ = 107; break; } //@line 1489 "pyexpat.c"
      case 106: // $bb117
        var $464=HEAP[$rc]; //@line 1489 "pyexpat.c"
        var $465=HEAP[$o116]; //@line 1489 "pyexpat.c"
        var $466=_PyList_Append($464, $465); //@line 1489 "pyexpat.c"
        __label__ = 107; break; //@line 1489 "pyexpat.c"
      case 107: // $bb118
        var $467=HEAP[$o116]; //@line 1489 "pyexpat.c"
        var $468=($467)!=0; //@line 1489 "pyexpat.c"
        if ($468) { __label__ = 108; break; } else { __label__ = 110; break; } //@line 1489 "pyexpat.c"
      case 108: // $bb119
        var $469=HEAP[$o116]; //@line 1489 "pyexpat.c"
        var $470=(($469)&4294967295); //@line 1489 "pyexpat.c"
        var $471=HEAP[$470]; //@line 1489 "pyexpat.c"
        var $472=((($471) - 1)&4294967295); //@line 1489 "pyexpat.c"
        var $473=HEAP[$o116]; //@line 1489 "pyexpat.c"
        var $474=(($473)&4294967295); //@line 1489 "pyexpat.c"
        HEAP[$474]=$472; //@line 1489 "pyexpat.c"
        var $475=HEAP[$o116]; //@line 1489 "pyexpat.c"
        var $476=(($475)&4294967295); //@line 1489 "pyexpat.c"
        var $477=HEAP[$476]; //@line 1489 "pyexpat.c"
        var $478=((($477))|0)==0; //@line 1489 "pyexpat.c"
        if ($478) { __label__ = 109; break; } else { __label__ = 110; break; } //@line 1489 "pyexpat.c"
      case 109: // $bb120
        var $479=HEAP[$o116]; //@line 1489 "pyexpat.c"
        var $480=(($479+4)&4294967295); //@line 1489 "pyexpat.c"
        var $481=HEAP[$480]; //@line 1489 "pyexpat.c"
        var $482=(($481+24)&4294967295); //@line 1489 "pyexpat.c"
        var $483=HEAP[$482]; //@line 1489 "pyexpat.c"
        var $484=HEAP[$o116]; //@line 1489 "pyexpat.c"
        FUNCTION_TABLE[$483]($484); //@line 1489 "pyexpat.c"
        __label__ = 110; break; //@line 1489 "pyexpat.c"
      case 110: // $bb121
        var $485=_PyString_FromString(((__str76)&4294967295)); //@line 1490 "pyexpat.c"
        HEAP[$o122]=$485; //@line 1490 "pyexpat.c"
        var $486=HEAP[$o122]; //@line 1490 "pyexpat.c"
        var $487=($486)!=0; //@line 1490 "pyexpat.c"
        if ($487) { __label__ = 111; break; } else { __label__ = 112; break; } //@line 1490 "pyexpat.c"
      case 111: // $bb123
        var $488=HEAP[$rc]; //@line 1490 "pyexpat.c"
        var $489=HEAP[$o122]; //@line 1490 "pyexpat.c"
        var $490=_PyList_Append($488, $489); //@line 1490 "pyexpat.c"
        __label__ = 112; break; //@line 1490 "pyexpat.c"
      case 112: // $bb124
        var $491=HEAP[$o122]; //@line 1490 "pyexpat.c"
        var $492=($491)!=0; //@line 1490 "pyexpat.c"
        if ($492) { __label__ = 113; break; } else { __label__ = 115; break; } //@line 1490 "pyexpat.c"
      case 113: // $bb125
        var $493=HEAP[$o122]; //@line 1490 "pyexpat.c"
        var $494=(($493)&4294967295); //@line 1490 "pyexpat.c"
        var $495=HEAP[$494]; //@line 1490 "pyexpat.c"
        var $496=((($495) - 1)&4294967295); //@line 1490 "pyexpat.c"
        var $497=HEAP[$o122]; //@line 1490 "pyexpat.c"
        var $498=(($497)&4294967295); //@line 1490 "pyexpat.c"
        HEAP[$498]=$496; //@line 1490 "pyexpat.c"
        var $499=HEAP[$o122]; //@line 1490 "pyexpat.c"
        var $500=(($499)&4294967295); //@line 1490 "pyexpat.c"
        var $501=HEAP[$500]; //@line 1490 "pyexpat.c"
        var $502=((($501))|0)==0; //@line 1490 "pyexpat.c"
        if ($502) { __label__ = 114; break; } else { __label__ = 115; break; } //@line 1490 "pyexpat.c"
      case 114: // $bb126
        var $503=HEAP[$o122]; //@line 1490 "pyexpat.c"
        var $504=(($503+4)&4294967295); //@line 1490 "pyexpat.c"
        var $505=HEAP[$504]; //@line 1490 "pyexpat.c"
        var $506=(($505+24)&4294967295); //@line 1490 "pyexpat.c"
        var $507=HEAP[$506]; //@line 1490 "pyexpat.c"
        var $508=HEAP[$o122]; //@line 1490 "pyexpat.c"
        FUNCTION_TABLE[$507]($508); //@line 1490 "pyexpat.c"
        __label__ = 115; break; //@line 1490 "pyexpat.c"
      case 115: // $bb127
        var $509=_PyString_FromString(((__str77)&4294967295)); //@line 1491 "pyexpat.c"
        HEAP[$o128]=$509; //@line 1491 "pyexpat.c"
        var $510=HEAP[$o128]; //@line 1491 "pyexpat.c"
        var $511=($510)!=0; //@line 1491 "pyexpat.c"
        if ($511) { __label__ = 116; break; } else { __label__ = 117; break; } //@line 1491 "pyexpat.c"
      case 116: // $bb129
        var $512=HEAP[$rc]; //@line 1491 "pyexpat.c"
        var $513=HEAP[$o128]; //@line 1491 "pyexpat.c"
        var $514=_PyList_Append($512, $513); //@line 1491 "pyexpat.c"
        __label__ = 117; break; //@line 1491 "pyexpat.c"
      case 117: // $bb130
        var $515=HEAP[$o128]; //@line 1491 "pyexpat.c"
        var $516=($515)!=0; //@line 1491 "pyexpat.c"
        if ($516) { __label__ = 118; break; } else { __label__ = 120; break; } //@line 1491 "pyexpat.c"
      case 118: // $bb131
        var $517=HEAP[$o128]; //@line 1491 "pyexpat.c"
        var $518=(($517)&4294967295); //@line 1491 "pyexpat.c"
        var $519=HEAP[$518]; //@line 1491 "pyexpat.c"
        var $520=((($519) - 1)&4294967295); //@line 1491 "pyexpat.c"
        var $521=HEAP[$o128]; //@line 1491 "pyexpat.c"
        var $522=(($521)&4294967295); //@line 1491 "pyexpat.c"
        HEAP[$522]=$520; //@line 1491 "pyexpat.c"
        var $523=HEAP[$o128]; //@line 1491 "pyexpat.c"
        var $524=(($523)&4294967295); //@line 1491 "pyexpat.c"
        var $525=HEAP[$524]; //@line 1491 "pyexpat.c"
        var $526=((($525))|0)==0; //@line 1491 "pyexpat.c"
        if ($526) { __label__ = 119; break; } else { __label__ = 120; break; } //@line 1491 "pyexpat.c"
      case 119: // $bb132
        var $527=HEAP[$o128]; //@line 1491 "pyexpat.c"
        var $528=(($527+4)&4294967295); //@line 1491 "pyexpat.c"
        var $529=HEAP[$528]; //@line 1491 "pyexpat.c"
        var $530=(($529+24)&4294967295); //@line 1491 "pyexpat.c"
        var $531=HEAP[$530]; //@line 1491 "pyexpat.c"
        var $532=HEAP[$o128]; //@line 1491 "pyexpat.c"
        FUNCTION_TABLE[$531]($532); //@line 1491 "pyexpat.c"
        __label__ = 120; break; //@line 1491 "pyexpat.c"
      case 120: // $bb133
        var $533=_PyString_FromString(((__str78)&4294967295)); //@line 1492 "pyexpat.c"
        HEAP[$o134]=$533; //@line 1492 "pyexpat.c"
        var $534=HEAP[$o134]; //@line 1492 "pyexpat.c"
        var $535=($534)!=0; //@line 1492 "pyexpat.c"
        if ($535) { __label__ = 121; break; } else { __label__ = 122; break; } //@line 1492 "pyexpat.c"
      case 121: // $bb135
        var $536=HEAP[$rc]; //@line 1492 "pyexpat.c"
        var $537=HEAP[$o134]; //@line 1492 "pyexpat.c"
        var $538=_PyList_Append($536, $537); //@line 1492 "pyexpat.c"
        __label__ = 122; break; //@line 1492 "pyexpat.c"
      case 122: // $bb136
        var $539=HEAP[$o134]; //@line 1492 "pyexpat.c"
        var $540=($539)!=0; //@line 1492 "pyexpat.c"
        if ($540) { __label__ = 123; break; } else { __label__ = 125; break; } //@line 1492 "pyexpat.c"
      case 123: // $bb137
        var $541=HEAP[$o134]; //@line 1492 "pyexpat.c"
        var $542=(($541)&4294967295); //@line 1492 "pyexpat.c"
        var $543=HEAP[$542]; //@line 1492 "pyexpat.c"
        var $544=((($543) - 1)&4294967295); //@line 1492 "pyexpat.c"
        var $545=HEAP[$o134]; //@line 1492 "pyexpat.c"
        var $546=(($545)&4294967295); //@line 1492 "pyexpat.c"
        HEAP[$546]=$544; //@line 1492 "pyexpat.c"
        var $547=HEAP[$o134]; //@line 1492 "pyexpat.c"
        var $548=(($547)&4294967295); //@line 1492 "pyexpat.c"
        var $549=HEAP[$548]; //@line 1492 "pyexpat.c"
        var $550=((($549))|0)==0; //@line 1492 "pyexpat.c"
        if ($550) { __label__ = 124; break; } else { __label__ = 125; break; } //@line 1492 "pyexpat.c"
      case 124: // $bb138
        var $551=HEAP[$o134]; //@line 1492 "pyexpat.c"
        var $552=(($551+4)&4294967295); //@line 1492 "pyexpat.c"
        var $553=HEAP[$552]; //@line 1492 "pyexpat.c"
        var $554=(($553+24)&4294967295); //@line 1492 "pyexpat.c"
        var $555=HEAP[$554]; //@line 1492 "pyexpat.c"
        var $556=HEAP[$o134]; //@line 1492 "pyexpat.c"
        FUNCTION_TABLE[$555]($556); //@line 1492 "pyexpat.c"
        __label__ = 125; break; //@line 1492 "pyexpat.c"
      case 125: // $bb139
        var $557=HEAP[$rc]; //@line 1495 "pyexpat.c"
        HEAP[$0]=$557; //@line 1495 "pyexpat.c"
        __label__ = 127; break; //@line 1495 "pyexpat.c"
      case 126: // $bb140
        var $558=HEAP[$self_addr]; //@line 1497 "pyexpat.c"
        var $559=$558; //@line 1497 "pyexpat.c"
        var $560=HEAP[$name_addr]; //@line 1497 "pyexpat.c"
        var $561=_Py_FindMethod(((_xmlparse_methods)&4294967295), $559, $560); //@line 1497 "pyexpat.c"
        HEAP[$0]=$561; //@line 1497 "pyexpat.c"
        __label__ = 127; break; //@line 1497 "pyexpat.c"
      case 127: // $bb141
        var $562=HEAP[$0]; //@line 1405 "pyexpat.c"
        HEAP[$retval]=$562; //@line 1405 "pyexpat.c"
        __label__ = 128; break; //@line 1405 "pyexpat.c"
      case 128: // $return
        var $retval142=HEAP[$retval]; //@line 1405 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval142; //@line 1405 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _sethandler($self, $name, $v) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $name_addr=__stackBase__+4;
        var $v_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $handlernum=__stackBase__+20;
        var $c_handler=__stackBase__+24;
        var $temp=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$name_addr]=$name;
        HEAP[$v_addr]=$v;
        var $1=HEAP[$name_addr]; //@line 1503 "pyexpat.c"
        var $2=_handlername2int($1); //@line 1503 "pyexpat.c"
        HEAP[$handlernum]=$2; //@line 1503 "pyexpat.c"
        var $3=HEAP[$handlernum]; //@line 1504 "pyexpat.c"
        var $4=((($3))|0) >= 0; //@line 1504 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 12; break; } //@line 1504 "pyexpat.c"
      case 1: // $bb
        HEAP[$c_handler]=0; //@line 1505 "pyexpat.c"
        var $5=HEAP[$self_addr]; //@line 1506 "pyexpat.c"
        var $6=(($5+48)&4294967295); //@line 1506 "pyexpat.c"
        var $7=HEAP[$6]; //@line 1506 "pyexpat.c"
        var $8=HEAP[$handlernum]; //@line 1506 "pyexpat.c"
        var $9=(($7+4*$8)&4294967295); //@line 1506 "pyexpat.c"
        var $10=HEAP[$9]; //@line 1506 "pyexpat.c"
        HEAP[$temp]=$10; //@line 1506 "pyexpat.c"
        var $11=HEAP[$v_addr]; //@line 1508 "pyexpat.c"
        var $12=($11)==(__Py_NoneStruct); //@line 1508 "pyexpat.c"
        if ($12) { __label__ = 2; break; } else { __label__ = 6; break; } //@line 1508 "pyexpat.c"
      case 2: // $bb1
        var $13=HEAP[$handlernum]; //@line 1520 "pyexpat.c"
        var $14=((($13))|0)==3; //@line 1520 "pyexpat.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 1520 "pyexpat.c"
      case 3: // $bb2
        var $15=HEAP[$self_addr]; //@line 1520 "pyexpat.c"
        var $16=(($15+24)&4294967295); //@line 1520 "pyexpat.c"
        var $17=HEAP[$16]; //@line 1520 "pyexpat.c"
        var $18=((($17))|0)!=0; //@line 1520 "pyexpat.c"
        if ($18) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1520 "pyexpat.c"
      case 4: // $bb3
        HEAP[$c_handler]=(FUNCTION_TABLE_OFFSET + 8); //@line 1521 "pyexpat.c"
        __label__ = 5; break; //@line 1521 "pyexpat.c"
      case 5: // $bb4
        HEAP[$v_addr]=0; //@line 1522 "pyexpat.c"
        __label__ = 8; break; //@line 1522 "pyexpat.c"
      case 6: // $bb5
        var $19=HEAP[$v_addr]; //@line 1524 "pyexpat.c"
        var $20=($19)!=0; //@line 1524 "pyexpat.c"
        if ($20) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1524 "pyexpat.c"
      case 7: // $bb6
        var $21=HEAP[$v_addr]; //@line 1525 "pyexpat.c"
        var $22=(($21)&4294967295); //@line 1525 "pyexpat.c"
        var $23=HEAP[$22]; //@line 1525 "pyexpat.c"
        var $24=((($23) + 1)&4294967295); //@line 1525 "pyexpat.c"
        var $25=HEAP[$v_addr]; //@line 1525 "pyexpat.c"
        var $26=(($25)&4294967295); //@line 1525 "pyexpat.c"
        HEAP[$26]=$24; //@line 1525 "pyexpat.c"
        var $27=HEAP[$handlernum]; //@line 1526 "pyexpat.c"
        var $28=((_handler_info+$27*20)&4294967295); //@line 1526 "pyexpat.c"
        var $29=(($28+8)&4294967295); //@line 1526 "pyexpat.c"
        var $30=HEAP[$29]; //@line 1526 "pyexpat.c"
        HEAP[$c_handler]=$30; //@line 1526 "pyexpat.c"
        __label__ = 8; break; //@line 1526 "pyexpat.c"
      case 8: // $bb7
        var $31=HEAP[$self_addr]; //@line 1528 "pyexpat.c"
        var $32=(($31+48)&4294967295); //@line 1528 "pyexpat.c"
        var $33=HEAP[$32]; //@line 1528 "pyexpat.c"
        var $34=HEAP[$handlernum]; //@line 1528 "pyexpat.c"
        var $35=(($33+4*$34)&4294967295); //@line 1528 "pyexpat.c"
        var $36=HEAP[$v_addr]; //@line 1528 "pyexpat.c"
        HEAP[$35]=$36; //@line 1528 "pyexpat.c"
        var $37=HEAP[$temp]; //@line 1529 "pyexpat.c"
        var $38=($37)!=0; //@line 1529 "pyexpat.c"
        if ($38) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 1529 "pyexpat.c"
      case 9: // $bb8
        var $39=HEAP[$temp]; //@line 1529 "pyexpat.c"
        var $40=(($39)&4294967295); //@line 1529 "pyexpat.c"
        var $41=HEAP[$40]; //@line 1529 "pyexpat.c"
        var $42=((($41) - 1)&4294967295); //@line 1529 "pyexpat.c"
        var $43=HEAP[$temp]; //@line 1529 "pyexpat.c"
        var $44=(($43)&4294967295); //@line 1529 "pyexpat.c"
        HEAP[$44]=$42; //@line 1529 "pyexpat.c"
        var $45=HEAP[$temp]; //@line 1529 "pyexpat.c"
        var $46=(($45)&4294967295); //@line 1529 "pyexpat.c"
        var $47=HEAP[$46]; //@line 1529 "pyexpat.c"
        var $48=((($47))|0)==0; //@line 1529 "pyexpat.c"
        if ($48) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1529 "pyexpat.c"
      case 10: // $bb9
        var $49=HEAP[$temp]; //@line 1529 "pyexpat.c"
        var $50=(($49+4)&4294967295); //@line 1529 "pyexpat.c"
        var $51=HEAP[$50]; //@line 1529 "pyexpat.c"
        var $52=(($51+24)&4294967295); //@line 1529 "pyexpat.c"
        var $53=HEAP[$52]; //@line 1529 "pyexpat.c"
        var $54=HEAP[$temp]; //@line 1529 "pyexpat.c"
        FUNCTION_TABLE[$53]($54); //@line 1529 "pyexpat.c"
        __label__ = 11; break; //@line 1529 "pyexpat.c"
      case 11: // $bb10
        var $55=HEAP[$handlernum]; //@line 1530 "pyexpat.c"
        var $56=((_handler_info+$55*20)&4294967295); //@line 1530 "pyexpat.c"
        var $57=(($56+4)&4294967295); //@line 1530 "pyexpat.c"
        var $58=HEAP[$57]; //@line 1530 "pyexpat.c"
        var $59=HEAP[$self_addr]; //@line 1530 "pyexpat.c"
        var $60=(($59+8)&4294967295); //@line 1530 "pyexpat.c"
        var $61=HEAP[$60]; //@line 1530 "pyexpat.c"
        var $62=HEAP[$c_handler]; //@line 1530 "pyexpat.c"
        FUNCTION_TABLE[$58]($61, $62); //@line 1530 "pyexpat.c"
        HEAP[$0]=1; //@line 1531 "pyexpat.c"
        __label__ = 13; break; //@line 1531 "pyexpat.c"
      case 12: // $bb11
        HEAP[$0]=0; //@line 1533 "pyexpat.c"
        __label__ = 13; break; //@line 1533 "pyexpat.c"
      case 13: // $bb12
        var $63=HEAP[$0]; //@line 1531 "pyexpat.c"
        HEAP[$retval]=$63; //@line 1531 "pyexpat.c"
        __label__ = 14; break; //@line 1531 "pyexpat.c"
      case 14: // $return
        var $retval13=HEAP[$retval]; //@line 1531 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 1531 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _xmlparse_setattr($self, $name, $v) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $name_addr=__stackBase__+4;
        var $v_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $new_buffer_size=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$name_addr]=$name;
        HEAP[$v_addr]=$v;
        var $1=HEAP[$v_addr]; //@line 1540 "pyexpat.c"
        var $2=($1)==0; //@line 1540 "pyexpat.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1540 "pyexpat.c"
      case 1: // $bb
        var $3=HEAP[_PyExc_RuntimeError]; //@line 1541 "pyexpat.c"
        _PyErr_SetString($3, ((__str80)&4294967295)); //@line 1541 "pyexpat.c"
        HEAP[$0]=-1; //@line 1542 "pyexpat.c"
        __label__ = 54; break; //@line 1542 "pyexpat.c"
      case 2: // $bb1
        var $4=HEAP[$name_addr]; //@line 1544 "pyexpat.c"
        var $5=_strcmp($4, ((__str72)&4294967295)); //@line 1544 "pyexpat.c"
        var $6=((($5))|0)==0; //@line 1544 "pyexpat.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 14; break; } //@line 1544 "pyexpat.c"
      case 3: // $bb2
        var $7=HEAP[$v_addr]; //@line 1545 "pyexpat.c"
        var $8=_PyObject_IsTrue($7); //@line 1545 "pyexpat.c"
        var $9=((($8))|0)!=0; //@line 1545 "pyexpat.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 9; break; } //@line 1545 "pyexpat.c"
      case 4: // $bb3
        var $10=HEAP[$self_addr]; //@line 1546 "pyexpat.c"
        var $11=(($10+32)&4294967295); //@line 1546 "pyexpat.c"
        var $12=HEAP[$11]; //@line 1546 "pyexpat.c"
        var $13=($12)==0; //@line 1546 "pyexpat.c"
        if ($13) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 1546 "pyexpat.c"
      case 5: // $bb4
        var $14=HEAP[$self_addr]; //@line 1547 "pyexpat.c"
        var $15=(($14+36)&4294967295); //@line 1547 "pyexpat.c"
        var $16=HEAP[$15]; //@line 1547 "pyexpat.c"
        var $17=_malloc($16); //@line 1547 "pyexpat.c"
        var $18=HEAP[$self_addr]; //@line 1547 "pyexpat.c"
        var $19=(($18+32)&4294967295); //@line 1547 "pyexpat.c"
        HEAP[$19]=$17; //@line 1547 "pyexpat.c"
        var $20=HEAP[$self_addr]; //@line 1548 "pyexpat.c"
        var $21=(($20+32)&4294967295); //@line 1548 "pyexpat.c"
        var $22=HEAP[$21]; //@line 1548 "pyexpat.c"
        var $23=($22)==0; //@line 1548 "pyexpat.c"
        if ($23) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1548 "pyexpat.c"
      case 6: // $bb5
        var $24=_PyErr_NoMemory(); //@line 1549 "pyexpat.c"
        HEAP[$0]=-1; //@line 1550 "pyexpat.c"
        __label__ = 54; break; //@line 1550 "pyexpat.c"
      case 7: // $bb6
        var $25=HEAP[$self_addr]; //@line 1552 "pyexpat.c"
        var $26=(($25+40)&4294967295); //@line 1552 "pyexpat.c"
        HEAP[$26]=0; //@line 1552 "pyexpat.c"
        __label__ = 8; break; //@line 1552 "pyexpat.c"
      case 8: // $bb7
        __label__ = 13; break; //@line 1552 "pyexpat.c"
      case 9: // $bb8
        var $27=HEAP[$self_addr]; //@line 1555 "pyexpat.c"
        var $28=(($27+32)&4294967295); //@line 1555 "pyexpat.c"
        var $29=HEAP[$28]; //@line 1555 "pyexpat.c"
        var $30=($29)!=0; //@line 1555 "pyexpat.c"
        if ($30) { __label__ = 10; break; } else { __label__ = 13; break; } //@line 1555 "pyexpat.c"
      case 10: // $bb9
        var $31=HEAP[$self_addr]; //@line 1556 "pyexpat.c"
        var $32=_flush_character_buffer($31); //@line 1556 "pyexpat.c"
        var $33=((($32))|0) < 0; //@line 1556 "pyexpat.c"
        if ($33) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1556 "pyexpat.c"
      case 11: // $bb10
        HEAP[$0]=-1; //@line 1557 "pyexpat.c"
        __label__ = 54; break; //@line 1557 "pyexpat.c"
      case 12: // $bb11
        var $34=HEAP[$self_addr]; //@line 1558 "pyexpat.c"
        var $35=(($34+32)&4294967295); //@line 1558 "pyexpat.c"
        var $36=HEAP[$35]; //@line 1558 "pyexpat.c"
        _free($36); //@line 1558 "pyexpat.c"
        var $37=HEAP[$self_addr]; //@line 1559 "pyexpat.c"
        var $38=(($37+32)&4294967295); //@line 1559 "pyexpat.c"
        HEAP[$38]=0; //@line 1559 "pyexpat.c"
        __label__ = 13; break; //@line 1559 "pyexpat.c"
      case 13: // $bb12
        HEAP[$0]=0; //@line 1561 "pyexpat.c"
        __label__ = 54; break; //@line 1561 "pyexpat.c"
      case 14: // $bb13
        var $39=HEAP[$name_addr]; //@line 1563 "pyexpat.c"
        var $40=_strcmp($39, ((__str74)&4294967295)); //@line 1563 "pyexpat.c"
        var $41=((($40))|0)==0; //@line 1563 "pyexpat.c"
        if ($41) { __label__ = 15; break; } else { __label__ = 19; break; } //@line 1563 "pyexpat.c"
      case 15: // $bb14
        var $42=HEAP[$v_addr]; //@line 1564 "pyexpat.c"
        var $43=_PyObject_IsTrue($42); //@line 1564 "pyexpat.c"
        var $44=((($43))|0)!=0; //@line 1564 "pyexpat.c"
        if ($44) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 1564 "pyexpat.c"
      case 16: // $bb15
        var $45=HEAP[$self_addr]; //@line 1565 "pyexpat.c"
        var $46=(($45+28)&4294967295); //@line 1565 "pyexpat.c"
        HEAP[$46]=1; //@line 1565 "pyexpat.c"
        __label__ = 18; break; //@line 1565 "pyexpat.c"
      case 17: // $bb16
        var $47=HEAP[$self_addr]; //@line 1567 "pyexpat.c"
        var $48=(($47+28)&4294967295); //@line 1567 "pyexpat.c"
        HEAP[$48]=0; //@line 1567 "pyexpat.c"
        __label__ = 18; break; //@line 1567 "pyexpat.c"
      case 18: // $bb17
        var $49=HEAP[$self_addr]; //@line 1568 "pyexpat.c"
        var $50=(($49+28)&4294967295); //@line 1568 "pyexpat.c"
        var $51=HEAP[$50]; //@line 1568 "pyexpat.c"
        var $52=HEAP[$self_addr]; //@line 1568 "pyexpat.c"
        var $53=(($52+8)&4294967295); //@line 1568 "pyexpat.c"
        var $54=HEAP[$53]; //@line 1568 "pyexpat.c"
        _XML_SetReturnNSTriplet($54, $51); //@line 1568 "pyexpat.c"
        HEAP[$0]=0; //@line 1569 "pyexpat.c"
        __label__ = 54; break; //@line 1569 "pyexpat.c"
      case 19: // $bb18
        var $55=HEAP[$name_addr]; //@line 1571 "pyexpat.c"
        var $56=_strcmp($55, ((__str75)&4294967295)); //@line 1571 "pyexpat.c"
        var $57=((($56))|0)==0; //@line 1571 "pyexpat.c"
        if ($57) { __label__ = 20; break; } else { __label__ = 24; break; } //@line 1571 "pyexpat.c"
      case 20: // $bb19
        var $58=HEAP[$v_addr]; //@line 1572 "pyexpat.c"
        var $59=_PyObject_IsTrue($58); //@line 1572 "pyexpat.c"
        var $60=((($59))|0)!=0; //@line 1572 "pyexpat.c"
        if ($60) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 1572 "pyexpat.c"
      case 21: // $bb20
        var $61=HEAP[$self_addr]; //@line 1573 "pyexpat.c"
        var $62=(($61+16)&4294967295); //@line 1573 "pyexpat.c"
        HEAP[$62]=1; //@line 1573 "pyexpat.c"
        __label__ = 23; break; //@line 1573 "pyexpat.c"
      case 22: // $bb21
        var $63=HEAP[$self_addr]; //@line 1575 "pyexpat.c"
        var $64=(($63+16)&4294967295); //@line 1575 "pyexpat.c"
        HEAP[$64]=0; //@line 1575 "pyexpat.c"
        __label__ = 23; break; //@line 1575 "pyexpat.c"
      case 23: // $bb22
        HEAP[$0]=0; //@line 1576 "pyexpat.c"
        __label__ = 54; break; //@line 1576 "pyexpat.c"
      case 24: // $bb23
        var $65=HEAP[$name_addr]; //@line 1578 "pyexpat.c"
        var $66=_strcmp($65, ((__str76)&4294967295)); //@line 1578 "pyexpat.c"
        var $67=((($66))|0)==0; //@line 1578 "pyexpat.c"
        if ($67) { __label__ = 25; break; } else { __label__ = 29; break; } //@line 1578 "pyexpat.c"
      case 25: // $bb24
        var $68=HEAP[$v_addr]; //@line 1579 "pyexpat.c"
        var $69=_PyObject_IsTrue($68); //@line 1579 "pyexpat.c"
        var $70=((($69))|0)!=0; //@line 1579 "pyexpat.c"
        if ($70) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1579 "pyexpat.c"
      case 26: // $bb25
        var $71=HEAP[$self_addr]; //@line 1585 "pyexpat.c"
        var $72=(($71+12)&4294967295); //@line 1585 "pyexpat.c"
        HEAP[$72]=1; //@line 1585 "pyexpat.c"
        __label__ = 28; break; //@line 1585 "pyexpat.c"
      case 27: // $bb26
        var $73=HEAP[$self_addr]; //@line 1589 "pyexpat.c"
        var $74=(($73+12)&4294967295); //@line 1589 "pyexpat.c"
        HEAP[$74]=0; //@line 1589 "pyexpat.c"
        __label__ = 28; break; //@line 1589 "pyexpat.c"
      case 28: // $bb27
        HEAP[$0]=0; //@line 1590 "pyexpat.c"
        __label__ = 54; break; //@line 1590 "pyexpat.c"
      case 29: // $bb28
        var $75=HEAP[$name_addr]; //@line 1592 "pyexpat.c"
        var $76=_strcmp($75, ((__str77)&4294967295)); //@line 1592 "pyexpat.c"
        var $77=((($76))|0)==0; //@line 1592 "pyexpat.c"
        if ($77) { __label__ = 30; break; } else { __label__ = 34; break; } //@line 1592 "pyexpat.c"
      case 30: // $bb29
        var $78=HEAP[$v_addr]; //@line 1593 "pyexpat.c"
        var $79=_PyObject_IsTrue($78); //@line 1593 "pyexpat.c"
        var $80=((($79))|0)!=0; //@line 1593 "pyexpat.c"
        if ($80) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 1593 "pyexpat.c"
      case 31: // $bb30
        var $81=HEAP[$self_addr]; //@line 1594 "pyexpat.c"
        var $82=(($81+20)&4294967295); //@line 1594 "pyexpat.c"
        HEAP[$82]=1; //@line 1594 "pyexpat.c"
        __label__ = 33; break; //@line 1594 "pyexpat.c"
      case 32: // $bb31
        var $83=HEAP[$self_addr]; //@line 1596 "pyexpat.c"
        var $84=(($83+20)&4294967295); //@line 1596 "pyexpat.c"
        HEAP[$84]=0; //@line 1596 "pyexpat.c"
        __label__ = 33; break; //@line 1596 "pyexpat.c"
      case 33: // $bb32
        HEAP[$0]=0; //@line 1597 "pyexpat.c"
        __label__ = 54; break; //@line 1597 "pyexpat.c"
      case 34: // $bb33
        var $85=HEAP[$name_addr]; //@line 1600 "pyexpat.c"
        var $86=_strcmp($85, ((__str71)&4294967295)); //@line 1600 "pyexpat.c"
        var $87=((($86))|0)==0; //@line 1600 "pyexpat.c"
        if ($87) { __label__ = 35; break; } else { __label__ = 48; break; } //@line 1600 "pyexpat.c"
      case 35: // $bb34
        var $88=HEAP[$v_addr]; //@line 1602 "pyexpat.c"
        var $89=(($88+4)&4294967295); //@line 1602 "pyexpat.c"
        var $90=HEAP[$89]; //@line 1602 "pyexpat.c"
        var $91=(($90+84)&4294967295); //@line 1602 "pyexpat.c"
        var $92=HEAP[$91]; //@line 1602 "pyexpat.c"
        var $93=($92) & 8388608; //@line 1602 "pyexpat.c"
        var $94=((($93))|0)==0; //@line 1602 "pyexpat.c"
        if ($94) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 1602 "pyexpat.c"
      case 36: // $bb35
        var $95=HEAP[_PyExc_TypeError]; //@line 1603 "pyexpat.c"
        _PyErr_SetString($95, ((__str81)&4294967295)); //@line 1603 "pyexpat.c"
        HEAP[$0]=-1; //@line 1604 "pyexpat.c"
        __label__ = 54; break; //@line 1604 "pyexpat.c"
      case 37: // $bb36
        var $96=HEAP[$v_addr]; //@line 1607 "pyexpat.c"
        var $97=$96; //@line 1607 "pyexpat.c"
        var $98=(($97+8)&4294967295); //@line 1607 "pyexpat.c"
        var $99=HEAP[$98]; //@line 1607 "pyexpat.c"
        HEAP[$new_buffer_size]=$99; //@line 1607 "pyexpat.c"
        var $100=HEAP[$self_addr]; //@line 1609 "pyexpat.c"
        var $101=(($100+36)&4294967295); //@line 1609 "pyexpat.c"
        var $102=HEAP[$101]; //@line 1609 "pyexpat.c"
        var $103=HEAP[$new_buffer_size]; //@line 1609 "pyexpat.c"
        var $104=((($102))|0)==((($103))|0); //@line 1609 "pyexpat.c"
        if ($104) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 1609 "pyexpat.c"
      case 38: // $bb37
        HEAP[$0]=0; //@line 1610 "pyexpat.c"
        __label__ = 54; break; //@line 1610 "pyexpat.c"
      case 39: // $bb38
        var $105=HEAP[$new_buffer_size]; //@line 1613 "pyexpat.c"
        var $106=((($105))|0) <= 0; //@line 1613 "pyexpat.c"
        if ($106) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 1613 "pyexpat.c"
      case 40: // $bb39
        var $107=HEAP[_PyExc_ValueError]; //@line 1614 "pyexpat.c"
        _PyErr_SetString($107, ((__str82)&4294967295)); //@line 1614 "pyexpat.c"
        HEAP[$0]=-1; //@line 1615 "pyexpat.c"
        __label__ = 54; break; //@line 1615 "pyexpat.c"
      case 41: // $bb40
        var $108=HEAP[$self_addr]; //@line 1626 "pyexpat.c"
        var $109=(($108+32)&4294967295); //@line 1626 "pyexpat.c"
        var $110=HEAP[$109]; //@line 1626 "pyexpat.c"
        var $111=($110)!=0; //@line 1626 "pyexpat.c"
        if ($111) { __label__ = 42; break; } else { __label__ = 45; break; } //@line 1626 "pyexpat.c"
      case 42: // $bb41
        var $112=HEAP[$self_addr]; //@line 1628 "pyexpat.c"
        var $113=(($112+40)&4294967295); //@line 1628 "pyexpat.c"
        var $114=HEAP[$113]; //@line 1628 "pyexpat.c"
        var $115=((($114))|0)!=0; //@line 1628 "pyexpat.c"
        if ($115) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 1628 "pyexpat.c"
      case 43: // $bb42
        var $116=HEAP[$self_addr]; //@line 1629 "pyexpat.c"
        var $117=_flush_character_buffer($116); //@line 1629 "pyexpat.c"
        __label__ = 44; break; //@line 1629 "pyexpat.c"
      case 44: // $bb43
        var $118=HEAP[$self_addr]; //@line 1632 "pyexpat.c"
        var $119=(($118+32)&4294967295); //@line 1632 "pyexpat.c"
        var $120=HEAP[$119]; //@line 1632 "pyexpat.c"
        _free($120); //@line 1632 "pyexpat.c"
        __label__ = 45; break; //@line 1632 "pyexpat.c"
      case 45: // $bb44
        var $121=HEAP[$new_buffer_size]; //@line 1634 "pyexpat.c"
        var $122=_malloc($121); //@line 1634 "pyexpat.c"
        var $123=HEAP[$self_addr]; //@line 1634 "pyexpat.c"
        var $124=(($123+32)&4294967295); //@line 1634 "pyexpat.c"
        HEAP[$124]=$122; //@line 1634 "pyexpat.c"
        var $125=HEAP[$self_addr]; //@line 1635 "pyexpat.c"
        var $126=(($125+32)&4294967295); //@line 1635 "pyexpat.c"
        var $127=HEAP[$126]; //@line 1635 "pyexpat.c"
        var $128=($127)==0; //@line 1635 "pyexpat.c"
        if ($128) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 1635 "pyexpat.c"
      case 46: // $bb45
        var $129=_PyErr_NoMemory(); //@line 1636 "pyexpat.c"
        HEAP[$0]=-1; //@line 1637 "pyexpat.c"
        __label__ = 54; break; //@line 1637 "pyexpat.c"
      case 47: // $bb46
        var $130=HEAP[$self_addr]; //@line 1639 "pyexpat.c"
        var $131=(($130+36)&4294967295); //@line 1639 "pyexpat.c"
        var $132=HEAP[$new_buffer_size]; //@line 1639 "pyexpat.c"
        HEAP[$131]=$132; //@line 1639 "pyexpat.c"
        HEAP[$0]=0; //@line 1640 "pyexpat.c"
        __label__ = 54; break; //@line 1640 "pyexpat.c"
      case 48: // $bb47
        var $133=HEAP[$name_addr]; //@line 1643 "pyexpat.c"
        var $134=_strcmp($133, ((__str83)&4294967295)); //@line 1643 "pyexpat.c"
        var $135=((($134))|0)==0; //@line 1643 "pyexpat.c"
        if ($135) { __label__ = 49; break; } else { __label__ = 51; break; } //@line 1643 "pyexpat.c"
      case 49: // $bb48
        var $136=HEAP[$self_addr]; //@line 1649 "pyexpat.c"
        var $137=_flush_character_buffer($136); //@line 1649 "pyexpat.c"
        var $138=((($137))|0) < 0; //@line 1649 "pyexpat.c"
        if ($138) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 1649 "pyexpat.c"
      case 50: // $bb49
        HEAP[$0]=-1; //@line 1650 "pyexpat.c"
        __label__ = 54; break; //@line 1650 "pyexpat.c"
      case 51: // $bb50
        var $139=HEAP[$self_addr]; //@line 1652 "pyexpat.c"
        var $140=HEAP[$name_addr]; //@line 1652 "pyexpat.c"
        var $141=HEAP[$v_addr]; //@line 1652 "pyexpat.c"
        var $142=_sethandler($139, $140, $141); //@line 1652 "pyexpat.c"
        var $143=((($142))|0)!=0; //@line 1652 "pyexpat.c"
        if ($143) { __label__ = 52; break; } else { __label__ = 53; break; } //@line 1652 "pyexpat.c"
      case 52: // $bb51
        HEAP[$0]=0; //@line 1653 "pyexpat.c"
        __label__ = 54; break; //@line 1653 "pyexpat.c"
      case 53: // $bb52
        var $144=HEAP[_PyExc_AttributeError]; //@line 1655 "pyexpat.c"
        var $145=HEAP[$name_addr]; //@line 1655 "pyexpat.c"
        _PyErr_SetString($144, $145); //@line 1655 "pyexpat.c"
        HEAP[$0]=-1; //@line 1656 "pyexpat.c"
        __label__ = 54; break; //@line 1656 "pyexpat.c"
      case 54: // $bb53
        var $146=HEAP[$0]; //@line 1542 "pyexpat.c"
        HEAP[$retval]=$146; //@line 1542 "pyexpat.c"
        __label__ = 55; break; //@line 1542 "pyexpat.c"
      case 55: // $return
        var $retval54=HEAP[$retval]; //@line 1542 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval54; //@line 1542 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _xmlparse_traverse($op, $visit, $arg) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $op_addr=__stackBase__;
        var $visit_addr=__stackBase__+4;
        var $arg_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $i=__stackBase__+20;
        var $vret=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$op_addr]=$op;
        HEAP[$visit_addr]=$visit;
        HEAP[$arg_addr]=$arg;
        HEAP[$i]=0; //@line 1664 "pyexpat.c"
        __label__ = 5; break; //@line 1664 "pyexpat.c"
      case 1: // $bb
        var $1=HEAP[$op_addr]; //@line 1665 "pyexpat.c"
        var $2=(($1+48)&4294967295); //@line 1665 "pyexpat.c"
        var $3=HEAP[$2]; //@line 1665 "pyexpat.c"
        var $4=HEAP[$i]; //@line 1665 "pyexpat.c"
        var $5=(($3+4*$4)&4294967295); //@line 1665 "pyexpat.c"
        var $6=HEAP[$5]; //@line 1665 "pyexpat.c"
        var $7=($6)!=0; //@line 1665 "pyexpat.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 1665 "pyexpat.c"
      case 2: // $bb1
        var $8=HEAP[$op_addr]; //@line 1665 "pyexpat.c"
        var $9=(($8+48)&4294967295); //@line 1665 "pyexpat.c"
        var $10=HEAP[$9]; //@line 1665 "pyexpat.c"
        var $11=HEAP[$i]; //@line 1665 "pyexpat.c"
        var $12=(($10+4*$11)&4294967295); //@line 1665 "pyexpat.c"
        var $13=HEAP[$12]; //@line 1665 "pyexpat.c"
        var $14=HEAP[$visit_addr]; //@line 1665 "pyexpat.c"
        var $15=HEAP[$arg_addr]; //@line 1665 "pyexpat.c"
        var $16=FUNCTION_TABLE[$14]($13, $15); //@line 1665 "pyexpat.c"
        HEAP[$vret]=$16; //@line 1665 "pyexpat.c"
        var $17=HEAP[$vret]; //@line 1665 "pyexpat.c"
        var $18=((($17))|0)!=0; //@line 1665 "pyexpat.c"
        if ($18) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1665 "pyexpat.c"
      case 3: // $bb2
        var $19=HEAP[$vret]; //@line 1665 "pyexpat.c"
        HEAP[$0]=$19; //@line 1665 "pyexpat.c"
        __label__ = 7; break; //@line 1665 "pyexpat.c"
      case 4: // $bb3
        var $20=HEAP[$i]; //@line 1664 "pyexpat.c"
        var $21=((($20) + 1)&4294967295); //@line 1664 "pyexpat.c"
        HEAP[$i]=$21; //@line 1664 "pyexpat.c"
        __label__ = 5; break; //@line 1664 "pyexpat.c"
      case 5: // $bb4
        var $22=HEAP[$i]; //@line 1664 "pyexpat.c"
        var $23=((_handler_info+$22*20)&4294967295); //@line 1664 "pyexpat.c"
        var $24=(($23)&4294967295); //@line 1664 "pyexpat.c"
        var $25=HEAP[$24]; //@line 1664 "pyexpat.c"
        var $26=($25)!=0; //@line 1664 "pyexpat.c"
        if ($26) { __label__ = 1; break; } else { __label__ = 6; break; } //@line 1664 "pyexpat.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 1666 "pyexpat.c"
        __label__ = 7; break; //@line 1666 "pyexpat.c"
      case 7: // $bb6
        var $27=HEAP[$0]; //@line 1665 "pyexpat.c"
        HEAP[$retval]=$27; //@line 1665 "pyexpat.c"
        __label__ = 8; break; //@line 1665 "pyexpat.c"
      case 8: // $return
        var $retval7=HEAP[$retval]; //@line 1665 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 1665 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _xmlparse_clear($op) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $op_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_py_tmp=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$op_addr]=$op;
        var $1=HEAP[$op_addr]; //@line 1672 "pyexpat.c"
        _clear_handlers($1, 0); //@line 1672 "pyexpat.c"
        var $2=HEAP[$op_addr]; //@line 1673 "pyexpat.c"
        var $3=(($2+44)&4294967295); //@line 1673 "pyexpat.c"
        var $4=HEAP[$3]; //@line 1673 "pyexpat.c"
        var $5=($4)!=0; //@line 1673 "pyexpat.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 1673 "pyexpat.c"
      case 1: // $bb
        var $6=HEAP[$op_addr]; //@line 1673 "pyexpat.c"
        var $7=(($6+44)&4294967295); //@line 1673 "pyexpat.c"
        var $8=HEAP[$7]; //@line 1673 "pyexpat.c"
        HEAP[$_py_tmp]=$8; //@line 1673 "pyexpat.c"
        var $9=HEAP[$op_addr]; //@line 1673 "pyexpat.c"
        var $10=(($9+44)&4294967295); //@line 1673 "pyexpat.c"
        HEAP[$10]=0; //@line 1673 "pyexpat.c"
        var $11=HEAP[$_py_tmp]; //@line 1673 "pyexpat.c"
        var $12=(($11)&4294967295); //@line 1673 "pyexpat.c"
        var $13=HEAP[$12]; //@line 1673 "pyexpat.c"
        var $14=((($13) - 1)&4294967295); //@line 1673 "pyexpat.c"
        var $15=HEAP[$_py_tmp]; //@line 1673 "pyexpat.c"
        var $16=(($15)&4294967295); //@line 1673 "pyexpat.c"
        HEAP[$16]=$14; //@line 1673 "pyexpat.c"
        var $17=HEAP[$_py_tmp]; //@line 1673 "pyexpat.c"
        var $18=(($17)&4294967295); //@line 1673 "pyexpat.c"
        var $19=HEAP[$18]; //@line 1673 "pyexpat.c"
        var $20=((($19))|0)==0; //@line 1673 "pyexpat.c"
        if ($20) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1673 "pyexpat.c"
      case 2: // $bb1
        var $21=HEAP[$_py_tmp]; //@line 1673 "pyexpat.c"
        var $22=(($21+4)&4294967295); //@line 1673 "pyexpat.c"
        var $23=HEAP[$22]; //@line 1673 "pyexpat.c"
        var $24=(($23+24)&4294967295); //@line 1673 "pyexpat.c"
        var $25=HEAP[$24]; //@line 1673 "pyexpat.c"
        var $26=HEAP[$_py_tmp]; //@line 1673 "pyexpat.c"
        FUNCTION_TABLE[$25]($26); //@line 1673 "pyexpat.c"
        __label__ = 3; break; //@line 1673 "pyexpat.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 1674 "pyexpat.c"
        var $27=HEAP[$0]; //@line 1674 "pyexpat.c"
        HEAP[$retval]=$27; //@line 1674 "pyexpat.c"
        __label__ = 4; break; //@line 1674 "pyexpat.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 1674 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 1674 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _pyexpat_ParserCreate($notused, $args, $kw) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $notused_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kw_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $encoding=__stackBase__+20;
        var $namespace_separator=__stackBase__+24;
        var $intern=__stackBase__+28;
        var $result=__stackBase__+32;
        var $intern_decref=__stackBase__+36;
        var $_alloca_point_=0;
        HEAP[$notused_addr]=$notused;
        HEAP[$args_addr]=$args;
        HEAP[$kw_addr]=$kw;
        HEAP[$encoding]=0; //@line 1725 "pyexpat.c"
        HEAP[$namespace_separator]=0; //@line 1726 "pyexpat.c"
        HEAP[$intern]=0; //@line 1727 "pyexpat.c"
        HEAP[$intern_decref]=0; //@line 1729 "pyexpat.c"
        var $1=HEAP[$args_addr]; //@line 1733 "pyexpat.c"
        var $2=HEAP[$kw_addr]; //@line 1733 "pyexpat.c"
        var $3=_PyArg_ParseTupleAndKeywords($1, $2, ((__str85)&4294967295), ((_kwlist_11531)&4294967295), $encoding, $namespace_separator, $intern); //@line 1733 "pyexpat.c"
        var $4=((($3))|0)==0; //@line 1733 "pyexpat.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1733 "pyexpat.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 1735 "pyexpat.c"
        __label__ = 17; break; //@line 1735 "pyexpat.c"
      case 2: // $bb1
        var $5=HEAP[$namespace_separator]; //@line 1736 "pyexpat.c"
        var $6=($5)!=0; //@line 1736 "pyexpat.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 1736 "pyexpat.c"
      case 3: // $bb2
        var $7=HEAP[$namespace_separator]; //@line 1736 "pyexpat.c"
        var $8=_strlen($7); //@line 1736 "pyexpat.c"
        var $9=((($8))>>>0) > 1; //@line 1736 "pyexpat.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1736 "pyexpat.c"
      case 4: // $bb3
        var $10=HEAP[_PyExc_ValueError]; //@line 1738 "pyexpat.c"
        _PyErr_SetString($10, ((__str88)&4294967295)); //@line 1738 "pyexpat.c"
        HEAP[$0]=0; //@line 1741 "pyexpat.c"
        __label__ = 17; break; //@line 1741 "pyexpat.c"
      case 5: // $bb4
        var $11=HEAP[$intern]; //@line 1745 "pyexpat.c"
        var $12=($11)==(__Py_NoneStruct); //@line 1745 "pyexpat.c"
        if ($12) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1745 "pyexpat.c"
      case 6: // $bb5
        HEAP[$intern]=0; //@line 1746 "pyexpat.c"
        __label__ = 13; break; //@line 1746 "pyexpat.c"
      case 7: // $bb6
        var $13=HEAP[$intern]; //@line 1747 "pyexpat.c"
        var $14=($13)==0; //@line 1747 "pyexpat.c"
        if ($14) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 1747 "pyexpat.c"
      case 8: // $bb7
        var $15=_PyDict_New(); //@line 1748 "pyexpat.c"
        HEAP[$intern]=$15; //@line 1748 "pyexpat.c"
        var $16=HEAP[$intern]; //@line 1749 "pyexpat.c"
        var $17=($16)==0; //@line 1749 "pyexpat.c"
        if ($17) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1749 "pyexpat.c"
      case 9: // $bb8
        HEAP[$0]=0; //@line 1750 "pyexpat.c"
        __label__ = 17; break; //@line 1750 "pyexpat.c"
      case 10: // $bb9
        HEAP[$intern_decref]=1; //@line 1751 "pyexpat.c"
        __label__ = 13; break; //@line 1751 "pyexpat.c"
      case 11: // $bb10
        var $18=HEAP[$intern]; //@line 1753 "pyexpat.c"
        var $19=(($18+4)&4294967295); //@line 1753 "pyexpat.c"
        var $20=HEAP[$19]; //@line 1753 "pyexpat.c"
        var $21=(($20+84)&4294967295); //@line 1753 "pyexpat.c"
        var $22=HEAP[$21]; //@line 1753 "pyexpat.c"
        var $23=($22) & 536870912; //@line 1753 "pyexpat.c"
        var $24=((($23))|0)==0; //@line 1753 "pyexpat.c"
        if ($24) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1753 "pyexpat.c"
      case 12: // $bb11
        var $25=HEAP[_PyExc_TypeError]; //@line 1754 "pyexpat.c"
        _PyErr_SetString($25, ((__str89)&4294967295)); //@line 1754 "pyexpat.c"
        HEAP[$0]=0; //@line 1755 "pyexpat.c"
        __label__ = 17; break; //@line 1755 "pyexpat.c"
      case 13: // $bb12
        var $26=HEAP[$intern]; //@line 1758 "pyexpat.c"
        var $27=HEAP[$namespace_separator]; //@line 1758 "pyexpat.c"
        var $28=HEAP[$encoding]; //@line 1758 "pyexpat.c"
        var $29=_newxmlparseobject($28, $27, $26); //@line 1758 "pyexpat.c"
        HEAP[$result]=$29; //@line 1758 "pyexpat.c"
        var $30=HEAP[$intern_decref]; //@line 1759 "pyexpat.c"
        var $31=((($30))|0)!=0; //@line 1759 "pyexpat.c"
        if ($31) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 1759 "pyexpat.c"
      case 14: // $bb13
        var $32=HEAP[$intern]; //@line 1760 "pyexpat.c"
        var $33=(($32)&4294967295); //@line 1760 "pyexpat.c"
        var $34=HEAP[$33]; //@line 1760 "pyexpat.c"
        var $35=((($34) - 1)&4294967295); //@line 1760 "pyexpat.c"
        var $36=(($32)&4294967295); //@line 1760 "pyexpat.c"
        HEAP[$36]=$35; //@line 1760 "pyexpat.c"
        var $37=(($32)&4294967295); //@line 1760 "pyexpat.c"
        var $38=HEAP[$37]; //@line 1760 "pyexpat.c"
        var $39=((($38))|0)==0; //@line 1760 "pyexpat.c"
        if ($39) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1760 "pyexpat.c"
      case 15: // $bb14
        var $40=HEAP[$intern]; //@line 1760 "pyexpat.c"
        var $41=(($40+4)&4294967295); //@line 1760 "pyexpat.c"
        var $42=HEAP[$41]; //@line 1760 "pyexpat.c"
        var $43=(($42+24)&4294967295); //@line 1760 "pyexpat.c"
        var $44=HEAP[$43]; //@line 1760 "pyexpat.c"
        var $45=HEAP[$intern]; //@line 1760 "pyexpat.c"
        FUNCTION_TABLE[$44]($45); //@line 1760 "pyexpat.c"
        __label__ = 16; break; //@line 1760 "pyexpat.c"
      case 16: // $bb15
        var $46=HEAP[$result]; //@line 1762 "pyexpat.c"
        HEAP[$0]=$46; //@line 1762 "pyexpat.c"
        __label__ = 17; break; //@line 1762 "pyexpat.c"
      case 17: // $bb16
        var $47=HEAP[$0]; //@line 1735 "pyexpat.c"
        HEAP[$retval]=$47; //@line 1735 "pyexpat.c"
        __label__ = 18; break; //@line 1735 "pyexpat.c"
      case 18: // $return
        var $retval17=HEAP[$retval]; //@line 1735 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval17; //@line 1735 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _pyexpat_ErrorString($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $code=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$code]=0; //@line 1772 "pyexpat.c"
        var $1=HEAP[$args_addr]; //@line 1774 "pyexpat.c"
        var $2=_PyArg_ParseTuple($1, ((__str90)&4294967295), $code); //@line 1774 "pyexpat.c"
        var $3=((($2))|0)==0; //@line 1774 "pyexpat.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1774 "pyexpat.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 1775 "pyexpat.c"
        __label__ = 3; break; //@line 1775 "pyexpat.c"
      case 2: // $bb1
        var $4=HEAP[$code]; //@line 1776 "pyexpat.c"
        var $5=_XML_ErrorString($4); //@line 1776 "pyexpat.c"
        var $6=_Py_BuildValue(((__str51)&4294967295), $5); //@line 1776 "pyexpat.c"
        HEAP[$0]=$6; //@line 1776 "pyexpat.c"
        __label__ = 3; break; //@line 1776 "pyexpat.c"
      case 3: // $bb2
        var $7=HEAP[$0]; //@line 1775 "pyexpat.c"
        HEAP[$retval]=$7; //@line 1775 "pyexpat.c"
        __label__ = 4; break; //@line 1775 "pyexpat.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 1775 "pyexpat.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 1775 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _initpyexpat() {
    var __stackBase__  = STACKTOP; STACKTOP += 68; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 68);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $m=__stackBase__;
        var $d=__stackBase__+4;
        var $errmod_name=__stackBase__+8;
        var $errors_module=__stackBase__+12;
        var $modelmod_name=__stackBase__+16;
        var $model_module=__stackBase__+20;
        var $sys_modules=__stackBase__+24;
        var $version=__stackBase__+28;
        var $capi_object=__stackBase__+32;
        var $info=__stackBase__+36;
        var $features=__stackBase__+48;
        var $list=__stackBase__+52;
        var $i=__stackBase__+56;
        var $ok=__stackBase__+60;
        var $item=__stackBase__+64;
        var $_alloca_point_=0;
        var $0=_PyString_FromString(((__str93)&4294967295)); //@line 1819 "pyexpat.c"
        HEAP[$errmod_name]=$0; //@line 1819 "pyexpat.c"
        var $1=HEAP[$errmod_name]; //@line 1828 "pyexpat.c"
        var $2=($1)==0; //@line 1828 "pyexpat.c"
        if ($2) { __label__ = 36; break; } else { __label__ = 1; break; } //@line 1828 "pyexpat.c"
      case 1: // $bb
        var $3=_PyString_FromString(((__str94)&4294967295)); //@line 1830 "pyexpat.c"
        HEAP[$modelmod_name]=$3; //@line 1830 "pyexpat.c"
        var $4=HEAP[$modelmod_name]; //@line 1831 "pyexpat.c"
        var $5=($4)==0; //@line 1831 "pyexpat.c"
        if ($5) { __label__ = 36; break; } else { __label__ = 2; break; } //@line 1831 "pyexpat.c"
      case 2: // $bb1
        var $6=((_Xmlparsetype+4)&4294967295); //@line 1834 "pyexpat.c"
        HEAP[$6]=_PyType_Type; //@line 1834 "pyexpat.c"
        var $7=_Py_InitModule4(((__str95)&4294967295), ((_pyexpat_methods)&4294967295), ((_pyexpat_module_documentation)&4294967295), 0, 1013); //@line 1837 "pyexpat.c"
        HEAP[$m]=$7; //@line 1837 "pyexpat.c"
        var $8=HEAP[$m]; //@line 1839 "pyexpat.c"
        var $9=($8)==0; //@line 1839 "pyexpat.c"
        if ($9) { __label__ = 36; break; } else { __label__ = 3; break; } //@line 1839 "pyexpat.c"
      case 3: // $bb2
        var $10=HEAP[_ErrorObject]; //@line 1843 "pyexpat.c"
        var $11=($10)==0; //@line 1843 "pyexpat.c"
        if ($11) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1843 "pyexpat.c"
      case 4: // $bb3
        var $12=_PyErr_NewException(((__str96)&4294967295), 0, 0); //@line 1844 "pyexpat.c"
        HEAP[_ErrorObject]=$12; //@line 1844 "pyexpat.c"
        var $13=HEAP[_ErrorObject]; //@line 1846 "pyexpat.c"
        var $14=($13)==0; //@line 1846 "pyexpat.c"
        if ($14) { __label__ = 36; break; } else { __label__ = 5; break; } //@line 1846 "pyexpat.c"
      case 5: // $bb4
        var $15=HEAP[_ErrorObject]; //@line 1849 "pyexpat.c"
        var $16=(($15)&4294967295); //@line 1849 "pyexpat.c"
        var $17=HEAP[$16]; //@line 1849 "pyexpat.c"
        var $18=((($17) + 1)&4294967295); //@line 1849 "pyexpat.c"
        var $19=(($15)&4294967295); //@line 1849 "pyexpat.c"
        HEAP[$19]=$18; //@line 1849 "pyexpat.c"
        var $20=HEAP[_ErrorObject]; //@line 1850 "pyexpat.c"
        var $21=HEAP[$m]; //@line 1850 "pyexpat.c"
        var $22=_PyModule_AddObject($21, ((__str97)&4294967295), $20); //@line 1850 "pyexpat.c"
        var $23=HEAP[_ErrorObject]; //@line 1851 "pyexpat.c"
        var $24=(($23)&4294967295); //@line 1851 "pyexpat.c"
        var $25=HEAP[$24]; //@line 1851 "pyexpat.c"
        var $26=((($25) + 1)&4294967295); //@line 1851 "pyexpat.c"
        var $27=(($23)&4294967295); //@line 1851 "pyexpat.c"
        HEAP[$27]=$26; //@line 1851 "pyexpat.c"
        var $28=HEAP[_ErrorObject]; //@line 1852 "pyexpat.c"
        var $29=HEAP[$m]; //@line 1852 "pyexpat.c"
        var $30=_PyModule_AddObject($29, ((__str98)&4294967295), $28); //@line 1852 "pyexpat.c"
        var $31=((_Xmlparsetype)&4294967295); //@line 1853 "pyexpat.c"
        var $32=HEAP[$31]; //@line 1853 "pyexpat.c"
        var $33=((($32) + 1)&4294967295); //@line 1853 "pyexpat.c"
        var $34=((_Xmlparsetype)&4294967295); //@line 1853 "pyexpat.c"
        HEAP[$34]=$33; //@line 1853 "pyexpat.c"
        var $35=HEAP[$m]; //@line 1854 "pyexpat.c"
        var $36=_PyModule_AddObject($35, ((__str99)&4294967295), _Xmlparsetype); //@line 1854 "pyexpat.c"
        var $37=_PyString_FromString(((__str100)&4294967295)); //@line 1856 "pyexpat.c"
        HEAP[$version]=$37; //@line 1856 "pyexpat.c"
        var $38=HEAP[$version]; //@line 1857 "pyexpat.c"
        var $39=($38)==0; //@line 1857 "pyexpat.c"
        if ($39) { __label__ = 36; break; } else { __label__ = 6; break; } //@line 1857 "pyexpat.c"
      case 6: // $bb5
        var $40=HEAP[$m]; //@line 1859 "pyexpat.c"
        var $41=HEAP[$version]; //@line 1859 "pyexpat.c"
        var $42=_PyModule_AddObject($40, ((__str101)&4294967295), $41); //@line 1859 "pyexpat.c"
        var $43=_XML_ExpatVersion(); //@line 1860 "pyexpat.c"
        var $44=HEAP[$m]; //@line 1860 "pyexpat.c"
        var $45=_PyModule_AddStringConstant($44, ((__str102)&4294967295), $43); //@line 1860 "pyexpat.c"
        _XML_ExpatVersionInfo($info); //@line 1863 "pyexpat.c"
        var $46=(($info+8)&4294967295); //@line 1864 "pyexpat.c"
        var $47=HEAP[$46]; //@line 1864 "pyexpat.c"
        var $48=(($info+4)&4294967295); //@line 1864 "pyexpat.c"
        var $49=HEAP[$48]; //@line 1864 "pyexpat.c"
        var $50=(($info)&4294967295); //@line 1864 "pyexpat.c"
        var $51=HEAP[$50]; //@line 1864 "pyexpat.c"
        var $52=_Py_BuildValue(((__str103)&4294967295), $51, $49, $47); //@line 1864 "pyexpat.c"
        var $53=HEAP[$m]; //@line 1864 "pyexpat.c"
        var $54=_PyModule_AddObject($53, ((__str104)&4294967295), $52); //@line 1864 "pyexpat.c"
        _init_template_buffer(); //@line 1869 "pyexpat.c"
        var $55=HEAP[$m]; //@line 1875 "pyexpat.c"
        var $56=_PyModule_AddStringConstant($55, ((__str105)&4294967295), ((__str106)&4294967295)); //@line 1875 "pyexpat.c"
        var $57=_PySys_GetObject(((__str107)&4294967295)); //@line 1877 "pyexpat.c"
        HEAP[$sys_modules]=$57; //@line 1877 "pyexpat.c"
        var $58=HEAP[$m]; //@line 1878 "pyexpat.c"
        var $59=_PyModule_GetDict($58); //@line 1878 "pyexpat.c"
        HEAP[$d]=$59; //@line 1878 "pyexpat.c"
        var $60=HEAP[$d]; //@line 1879 "pyexpat.c"
        var $61=HEAP[$errmod_name]; //@line 1879 "pyexpat.c"
        var $62=_PyDict_GetItem($60, $61); //@line 1879 "pyexpat.c"
        HEAP[$errors_module]=$62; //@line 1879 "pyexpat.c"
        var $63=HEAP[$errors_module]; //@line 1880 "pyexpat.c"
        var $64=($63)==0; //@line 1880 "pyexpat.c"
        if ($64) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 1880 "pyexpat.c"
      case 7: // $bb6
        var $65=_PyModule_New(((__str93)&4294967295)); //@line 1881 "pyexpat.c"
        HEAP[$errors_module]=$65; //@line 1881 "pyexpat.c"
        var $66=HEAP[$errors_module]; //@line 1882 "pyexpat.c"
        var $67=($66)!=0; //@line 1882 "pyexpat.c"
        if ($67) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1882 "pyexpat.c"
      case 8: // $bb7
        var $68=HEAP[$sys_modules]; //@line 1883 "pyexpat.c"
        var $69=HEAP[$errmod_name]; //@line 1883 "pyexpat.c"
        var $70=HEAP[$errors_module]; //@line 1883 "pyexpat.c"
        var $71=_PyDict_SetItem($68, $69, $70); //@line 1883 "pyexpat.c"
        var $72=HEAP[$m]; //@line 1885 "pyexpat.c"
        var $73=HEAP[$errors_module]; //@line 1885 "pyexpat.c"
        var $74=_PyModule_AddObject($72, ((__str108)&4294967295), $73); //@line 1885 "pyexpat.c"
        __label__ = 9; break; //@line 1885 "pyexpat.c"
      case 9: // $bb8
        var $75=HEAP[$errmod_name]; //@line 1888 "pyexpat.c"
        var $76=(($75)&4294967295); //@line 1888 "pyexpat.c"
        var $77=HEAP[$76]; //@line 1888 "pyexpat.c"
        var $78=((($77) - 1)&4294967295); //@line 1888 "pyexpat.c"
        var $79=HEAP[$errmod_name]; //@line 1888 "pyexpat.c"
        var $80=(($79)&4294967295); //@line 1888 "pyexpat.c"
        HEAP[$80]=$78; //@line 1888 "pyexpat.c"
        var $81=HEAP[$errmod_name]; //@line 1888 "pyexpat.c"
        var $82=(($81)&4294967295); //@line 1888 "pyexpat.c"
        var $83=HEAP[$82]; //@line 1888 "pyexpat.c"
        var $84=((($83))|0)==0; //@line 1888 "pyexpat.c"
        if ($84) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1888 "pyexpat.c"
      case 10: // $bb9
        var $85=HEAP[$errmod_name]; //@line 1888 "pyexpat.c"
        var $86=(($85+4)&4294967295); //@line 1888 "pyexpat.c"
        var $87=HEAP[$86]; //@line 1888 "pyexpat.c"
        var $88=(($87+24)&4294967295); //@line 1888 "pyexpat.c"
        var $89=HEAP[$88]; //@line 1888 "pyexpat.c"
        var $90=HEAP[$errmod_name]; //@line 1888 "pyexpat.c"
        FUNCTION_TABLE[$89]($90); //@line 1888 "pyexpat.c"
        __label__ = 11; break; //@line 1888 "pyexpat.c"
      case 11: // $bb10
        var $91=HEAP[$d]; //@line 1889 "pyexpat.c"
        var $92=HEAP[$modelmod_name]; //@line 1889 "pyexpat.c"
        var $93=_PyDict_GetItem($91, $92); //@line 1889 "pyexpat.c"
        HEAP[$model_module]=$93; //@line 1889 "pyexpat.c"
        var $94=HEAP[$model_module]; //@line 1890 "pyexpat.c"
        var $95=($94)==0; //@line 1890 "pyexpat.c"
        if ($95) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 1890 "pyexpat.c"
      case 12: // $bb11
        var $96=_PyModule_New(((__str94)&4294967295)); //@line 1891 "pyexpat.c"
        HEAP[$model_module]=$96; //@line 1891 "pyexpat.c"
        var $97=HEAP[$model_module]; //@line 1892 "pyexpat.c"
        var $98=($97)!=0; //@line 1892 "pyexpat.c"
        if ($98) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1892 "pyexpat.c"
      case 13: // $bb12
        var $99=HEAP[$sys_modules]; //@line 1893 "pyexpat.c"
        var $100=HEAP[$modelmod_name]; //@line 1893 "pyexpat.c"
        var $101=HEAP[$model_module]; //@line 1893 "pyexpat.c"
        var $102=_PyDict_SetItem($99, $100, $101); //@line 1893 "pyexpat.c"
        var $103=HEAP[$m]; //@line 1895 "pyexpat.c"
        var $104=HEAP[$model_module]; //@line 1895 "pyexpat.c"
        var $105=_PyModule_AddObject($103, ((__str109)&4294967295), $104); //@line 1895 "pyexpat.c"
        __label__ = 14; break; //@line 1895 "pyexpat.c"
      case 14: // $bb13
        var $106=HEAP[$modelmod_name]; //@line 1898 "pyexpat.c"
        var $107=(($106)&4294967295); //@line 1898 "pyexpat.c"
        var $108=HEAP[$107]; //@line 1898 "pyexpat.c"
        var $109=((($108) - 1)&4294967295); //@line 1898 "pyexpat.c"
        var $110=HEAP[$modelmod_name]; //@line 1898 "pyexpat.c"
        var $111=(($110)&4294967295); //@line 1898 "pyexpat.c"
        HEAP[$111]=$109; //@line 1898 "pyexpat.c"
        var $112=HEAP[$modelmod_name]; //@line 1898 "pyexpat.c"
        var $113=(($112)&4294967295); //@line 1898 "pyexpat.c"
        var $114=HEAP[$113]; //@line 1898 "pyexpat.c"
        var $115=((($114))|0)==0; //@line 1898 "pyexpat.c"
        if ($115) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1898 "pyexpat.c"
      case 15: // $bb14
        var $116=HEAP[$modelmod_name]; //@line 1898 "pyexpat.c"
        var $117=(($116+4)&4294967295); //@line 1898 "pyexpat.c"
        var $118=HEAP[$117]; //@line 1898 "pyexpat.c"
        var $119=(($118+24)&4294967295); //@line 1898 "pyexpat.c"
        var $120=HEAP[$119]; //@line 1898 "pyexpat.c"
        var $121=HEAP[$modelmod_name]; //@line 1898 "pyexpat.c"
        FUNCTION_TABLE[$120]($121); //@line 1898 "pyexpat.c"
        __label__ = 16; break; //@line 1898 "pyexpat.c"
      case 16: // $bb15
        var $122=HEAP[$errors_module]; //@line 1899 "pyexpat.c"
        var $123=($122)==0; //@line 1899 "pyexpat.c"
        if ($123) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 1899 "pyexpat.c"
      case 17: // $bb16
        var $124=HEAP[$model_module]; //@line 1899 "pyexpat.c"
        var $125=($124)==0; //@line 1899 "pyexpat.c"
        if ($125) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 1899 "pyexpat.c"
      case 18: // $bb17
        __label__ = 36; break; //@line 1899 "pyexpat.c"
      case 19: // $bb18
        var $126=_XML_GetFeatureList(); //@line 1905 "pyexpat.c"
        HEAP[$features]=$126; //@line 1905 "pyexpat.c"
        var $127=_PyList_New(0); //@line 1906 "pyexpat.c"
        HEAP[$list]=$127; //@line 1906 "pyexpat.c"
        var $128=HEAP[$list]; //@line 1907 "pyexpat.c"
        var $129=($128)==0; //@line 1907 "pyexpat.c"
        if ($129) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1907 "pyexpat.c"
      case 20: // $bb19
        _PyErr_Clear(); //@line 1909 "pyexpat.c"
        __label__ = 34; break; //@line 1909 "pyexpat.c"
      case 21: // $bb20
        HEAP[$i]=0; //@line 1911 "pyexpat.c"
        __label__ = 31; break; //@line 1911 "pyexpat.c"
      case 22: // $bb21
        var $130=HEAP[$features]; //@line 1915 "pyexpat.c"
        var $131=HEAP[$i]; //@line 1915 "pyexpat.c"
        var $132=(($130+12*$131)&4294967295); //@line 1915 "pyexpat.c"
        var $133=(($132+8)&4294967295); //@line 1915 "pyexpat.c"
        var $134=HEAP[$133]; //@line 1915 "pyexpat.c"
        var $135=HEAP[$features]; //@line 1915 "pyexpat.c"
        var $136=HEAP[$i]; //@line 1915 "pyexpat.c"
        var $137=(($135+12*$136)&4294967295); //@line 1915 "pyexpat.c"
        var $138=(($137+4)&4294967295); //@line 1915 "pyexpat.c"
        var $139=HEAP[$138]; //@line 1915 "pyexpat.c"
        var $140=_Py_BuildValue(((__str110)&4294967295), $139, $134); //@line 1915 "pyexpat.c"
        HEAP[$item]=$140; //@line 1915 "pyexpat.c"
        var $141=HEAP[$item]; //@line 1916 "pyexpat.c"
        var $142=($141)==0; //@line 1916 "pyexpat.c"
        if ($142) { __label__ = 23; break; } else { __label__ = 26; break; } //@line 1916 "pyexpat.c"
      case 23: // $bb22
        var $143=HEAP[$list]; //@line 1917 "pyexpat.c"
        var $144=(($143)&4294967295); //@line 1917 "pyexpat.c"
        var $145=HEAP[$144]; //@line 1917 "pyexpat.c"
        var $146=((($145) - 1)&4294967295); //@line 1917 "pyexpat.c"
        var $147=HEAP[$list]; //@line 1917 "pyexpat.c"
        var $148=(($147)&4294967295); //@line 1917 "pyexpat.c"
        HEAP[$148]=$146; //@line 1917 "pyexpat.c"
        var $149=HEAP[$list]; //@line 1917 "pyexpat.c"
        var $150=(($149)&4294967295); //@line 1917 "pyexpat.c"
        var $151=HEAP[$150]; //@line 1917 "pyexpat.c"
        var $152=((($151))|0)==0; //@line 1917 "pyexpat.c"
        if ($152) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 1917 "pyexpat.c"
      case 24: // $bb23
        var $153=HEAP[$list]; //@line 1917 "pyexpat.c"
        var $154=(($153+4)&4294967295); //@line 1917 "pyexpat.c"
        var $155=HEAP[$154]; //@line 1917 "pyexpat.c"
        var $156=(($155+24)&4294967295); //@line 1917 "pyexpat.c"
        var $157=HEAP[$156]; //@line 1917 "pyexpat.c"
        var $158=HEAP[$list]; //@line 1917 "pyexpat.c"
        FUNCTION_TABLE[$157]($158); //@line 1917 "pyexpat.c"
        __label__ = 25; break; //@line 1917 "pyexpat.c"
      case 25: // $bb24
        HEAP[$list]=0; //@line 1918 "pyexpat.c"
        __label__ = 32; break; //@line 1918 "pyexpat.c"
      case 26: // $bb25
        var $159=HEAP[$list]; //@line 1921 "pyexpat.c"
        var $160=HEAP[$item]; //@line 1921 "pyexpat.c"
        var $161=_PyList_Append($159, $160); //@line 1921 "pyexpat.c"
        HEAP[$ok]=$161; //@line 1921 "pyexpat.c"
        var $162=HEAP[$item]; //@line 1922 "pyexpat.c"
        var $163=(($162)&4294967295); //@line 1922 "pyexpat.c"
        var $164=HEAP[$163]; //@line 1922 "pyexpat.c"
        var $165=((($164) - 1)&4294967295); //@line 1922 "pyexpat.c"
        var $166=HEAP[$item]; //@line 1922 "pyexpat.c"
        var $167=(($166)&4294967295); //@line 1922 "pyexpat.c"
        HEAP[$167]=$165; //@line 1922 "pyexpat.c"
        var $168=HEAP[$item]; //@line 1922 "pyexpat.c"
        var $169=(($168)&4294967295); //@line 1922 "pyexpat.c"
        var $170=HEAP[$169]; //@line 1922 "pyexpat.c"
        var $171=((($170))|0)==0; //@line 1922 "pyexpat.c"
        if ($171) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 1922 "pyexpat.c"
      case 27: // $bb26
        var $172=HEAP[$item]; //@line 1922 "pyexpat.c"
        var $173=(($172+4)&4294967295); //@line 1922 "pyexpat.c"
        var $174=HEAP[$173]; //@line 1922 "pyexpat.c"
        var $175=(($174+24)&4294967295); //@line 1922 "pyexpat.c"
        var $176=HEAP[$175]; //@line 1922 "pyexpat.c"
        var $177=HEAP[$item]; //@line 1922 "pyexpat.c"
        FUNCTION_TABLE[$176]($177); //@line 1922 "pyexpat.c"
        __label__ = 28; break; //@line 1922 "pyexpat.c"
      case 28: // $bb27
        var $178=HEAP[$ok]; //@line 1923 "pyexpat.c"
        var $179=((($178))|0) < 0; //@line 1923 "pyexpat.c"
        if ($179) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 1923 "pyexpat.c"
      case 29: // $bb28
        _PyErr_Clear(); //@line 1924 "pyexpat.c"
        __label__ = 32; break; //@line 1924 "pyexpat.c"
      case 30: // $bb29
        var $180=HEAP[$i]; //@line 1912 "pyexpat.c"
        var $181=((($180) + 1)&4294967295); //@line 1912 "pyexpat.c"
        HEAP[$i]=$181; //@line 1912 "pyexpat.c"
        __label__ = 31; break; //@line 1912 "pyexpat.c"
      case 31: // $bb30
        var $182=HEAP[$features]; //@line 1912 "pyexpat.c"
        var $183=HEAP[$i]; //@line 1912 "pyexpat.c"
        var $184=(($182+12*$183)&4294967295); //@line 1912 "pyexpat.c"
        var $185=(($184)&4294967295); //@line 1912 "pyexpat.c"
        var $186=HEAP[$185]; //@line 1912 "pyexpat.c"
        var $187=((($186))|0)!=0; //@line 1912 "pyexpat.c"
        if ($187) { __label__ = 22; break; } else { __label__ = 32; break; } //@line 1912 "pyexpat.c"
      case 32: // $bb31
        var $188=HEAP[$list]; //@line 1928 "pyexpat.c"
        var $189=($188)!=0; //@line 1928 "pyexpat.c"
        if ($189) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 1928 "pyexpat.c"
      case 33: // $bb32
        var $190=HEAP[$m]; //@line 1929 "pyexpat.c"
        var $191=HEAP[$list]; //@line 1929 "pyexpat.c"
        var $192=_PyModule_AddObject($190, ((__str111)&4294967295), $191); //@line 1929 "pyexpat.c"
        __label__ = 34; break; //@line 1929 "pyexpat.c"
      case 34: // $bb33
        var $193=_XML_ErrorString(1); //@line 1938 "pyexpat.c"
        var $194=HEAP[$errors_module]; //@line 1938 "pyexpat.c"
        var $195=_PyModule_AddStringConstant($194, ((__str112)&4294967295), $193); //@line 1938 "pyexpat.c"
        var $196=_XML_ErrorString(2); //@line 1939 "pyexpat.c"
        var $197=HEAP[$errors_module]; //@line 1939 "pyexpat.c"
        var $198=_PyModule_AddStringConstant($197, ((__str113)&4294967295), $196); //@line 1939 "pyexpat.c"
        var $199=_XML_ErrorString(3); //@line 1940 "pyexpat.c"
        var $200=HEAP[$errors_module]; //@line 1940 "pyexpat.c"
        var $201=_PyModule_AddStringConstant($200, ((__str114)&4294967295), $199); //@line 1940 "pyexpat.c"
        var $202=_XML_ErrorString(4); //@line 1941 "pyexpat.c"
        var $203=HEAP[$errors_module]; //@line 1941 "pyexpat.c"
        var $204=_PyModule_AddStringConstant($203, ((__str115)&4294967295), $202); //@line 1941 "pyexpat.c"
        var $205=_XML_ErrorString(5); //@line 1942 "pyexpat.c"
        var $206=HEAP[$errors_module]; //@line 1942 "pyexpat.c"
        var $207=_PyModule_AddStringConstant($206, ((__str116)&4294967295), $205); //@line 1942 "pyexpat.c"
        var $208=_XML_ErrorString(6); //@line 1943 "pyexpat.c"
        var $209=HEAP[$errors_module]; //@line 1943 "pyexpat.c"
        var $210=_PyModule_AddStringConstant($209, ((__str117)&4294967295), $208); //@line 1943 "pyexpat.c"
        var $211=_XML_ErrorString(7); //@line 1944 "pyexpat.c"
        var $212=HEAP[$errors_module]; //@line 1944 "pyexpat.c"
        var $213=_PyModule_AddStringConstant($212, ((__str118)&4294967295), $211); //@line 1944 "pyexpat.c"
        var $214=_XML_ErrorString(8); //@line 1945 "pyexpat.c"
        var $215=HEAP[$errors_module]; //@line 1945 "pyexpat.c"
        var $216=_PyModule_AddStringConstant($215, ((__str119)&4294967295), $214); //@line 1945 "pyexpat.c"
        var $217=_XML_ErrorString(9); //@line 1946 "pyexpat.c"
        var $218=HEAP[$errors_module]; //@line 1946 "pyexpat.c"
        var $219=_PyModule_AddStringConstant($218, ((__str120)&4294967295), $217); //@line 1946 "pyexpat.c"
        var $220=_XML_ErrorString(10); //@line 1947 "pyexpat.c"
        var $221=HEAP[$errors_module]; //@line 1947 "pyexpat.c"
        var $222=_PyModule_AddStringConstant($221, ((__str121)&4294967295), $220); //@line 1947 "pyexpat.c"
        var $223=_XML_ErrorString(11); //@line 1948 "pyexpat.c"
        var $224=HEAP[$errors_module]; //@line 1948 "pyexpat.c"
        var $225=_PyModule_AddStringConstant($224, ((__str122)&4294967295), $223); //@line 1948 "pyexpat.c"
        var $226=_XML_ErrorString(12); //@line 1949 "pyexpat.c"
        var $227=HEAP[$errors_module]; //@line 1949 "pyexpat.c"
        var $228=_PyModule_AddStringConstant($227, ((__str123)&4294967295), $226); //@line 1949 "pyexpat.c"
        var $229=_XML_ErrorString(13); //@line 1950 "pyexpat.c"
        var $230=HEAP[$errors_module]; //@line 1950 "pyexpat.c"
        var $231=_PyModule_AddStringConstant($230, ((__str124)&4294967295), $229); //@line 1950 "pyexpat.c"
        var $232=_XML_ErrorString(14); //@line 1951 "pyexpat.c"
        var $233=HEAP[$errors_module]; //@line 1951 "pyexpat.c"
        var $234=_PyModule_AddStringConstant($233, ((__str125)&4294967295), $232); //@line 1951 "pyexpat.c"
        var $235=_XML_ErrorString(15); //@line 1952 "pyexpat.c"
        var $236=HEAP[$errors_module]; //@line 1952 "pyexpat.c"
        var $237=_PyModule_AddStringConstant($236, ((__str126)&4294967295), $235); //@line 1952 "pyexpat.c"
        var $238=_XML_ErrorString(16); //@line 1953 "pyexpat.c"
        var $239=HEAP[$errors_module]; //@line 1953 "pyexpat.c"
        var $240=_PyModule_AddStringConstant($239, ((__str127)&4294967295), $238); //@line 1953 "pyexpat.c"
        var $241=_XML_ErrorString(17); //@line 1954 "pyexpat.c"
        var $242=HEAP[$errors_module]; //@line 1954 "pyexpat.c"
        var $243=_PyModule_AddStringConstant($242, ((__str128)&4294967295), $241); //@line 1954 "pyexpat.c"
        var $244=_XML_ErrorString(18); //@line 1955 "pyexpat.c"
        var $245=HEAP[$errors_module]; //@line 1955 "pyexpat.c"
        var $246=_PyModule_AddStringConstant($245, ((__str129)&4294967295), $244); //@line 1955 "pyexpat.c"
        var $247=_XML_ErrorString(19); //@line 1956 "pyexpat.c"
        var $248=HEAP[$errors_module]; //@line 1956 "pyexpat.c"
        var $249=_PyModule_AddStringConstant($248, ((__str130)&4294967295), $247); //@line 1956 "pyexpat.c"
        var $250=_XML_ErrorString(20); //@line 1957 "pyexpat.c"
        var $251=HEAP[$errors_module]; //@line 1957 "pyexpat.c"
        var $252=_PyModule_AddStringConstant($251, ((__str131)&4294967295), $250); //@line 1957 "pyexpat.c"
        var $253=_XML_ErrorString(21); //@line 1958 "pyexpat.c"
        var $254=HEAP[$errors_module]; //@line 1958 "pyexpat.c"
        var $255=_PyModule_AddStringConstant($254, ((__str132)&4294967295), $253); //@line 1958 "pyexpat.c"
        var $256=_XML_ErrorString(22); //@line 1959 "pyexpat.c"
        var $257=HEAP[$errors_module]; //@line 1959 "pyexpat.c"
        var $258=_PyModule_AddStringConstant($257, ((__str133)&4294967295), $256); //@line 1959 "pyexpat.c"
        var $259=_XML_ErrorString(23); //@line 1960 "pyexpat.c"
        var $260=HEAP[$errors_module]; //@line 1960 "pyexpat.c"
        var $261=_PyModule_AddStringConstant($260, ((__str134)&4294967295), $259); //@line 1960 "pyexpat.c"
        var $262=_XML_ErrorString(24); //@line 1961 "pyexpat.c"
        var $263=HEAP[$errors_module]; //@line 1961 "pyexpat.c"
        var $264=_PyModule_AddStringConstant($263, ((__str135)&4294967295), $262); //@line 1961 "pyexpat.c"
        var $265=_XML_ErrorString(25); //@line 1962 "pyexpat.c"
        var $266=HEAP[$errors_module]; //@line 1962 "pyexpat.c"
        var $267=_PyModule_AddStringConstant($266, ((__str136)&4294967295), $265); //@line 1962 "pyexpat.c"
        var $268=_XML_ErrorString(26); //@line 1963 "pyexpat.c"
        var $269=HEAP[$errors_module]; //@line 1963 "pyexpat.c"
        var $270=_PyModule_AddStringConstant($269, ((__str137)&4294967295), $268); //@line 1963 "pyexpat.c"
        var $271=_XML_ErrorString(27); //@line 1965 "pyexpat.c"
        var $272=HEAP[$errors_module]; //@line 1965 "pyexpat.c"
        var $273=_PyModule_AddStringConstant($272, ((__str138)&4294967295), $271); //@line 1965 "pyexpat.c"
        var $274=_XML_ErrorString(28); //@line 1967 "pyexpat.c"
        var $275=HEAP[$errors_module]; //@line 1967 "pyexpat.c"
        var $276=_PyModule_AddStringConstant($275, ((__str139)&4294967295), $274); //@line 1967 "pyexpat.c"
        var $277=_XML_ErrorString(29); //@line 1968 "pyexpat.c"
        var $278=HEAP[$errors_module]; //@line 1968 "pyexpat.c"
        var $279=_PyModule_AddStringConstant($278, ((__str140)&4294967295), $277); //@line 1968 "pyexpat.c"
        var $280=_XML_ErrorString(30); //@line 1969 "pyexpat.c"
        var $281=HEAP[$errors_module]; //@line 1969 "pyexpat.c"
        var $282=_PyModule_AddStringConstant($281, ((__str141)&4294967295), $280); //@line 1969 "pyexpat.c"
        var $283=_XML_ErrorString(31); //@line 1970 "pyexpat.c"
        var $284=HEAP[$errors_module]; //@line 1970 "pyexpat.c"
        var $285=_PyModule_AddStringConstant($284, ((__str142)&4294967295), $283); //@line 1970 "pyexpat.c"
        var $286=_XML_ErrorString(32); //@line 1971 "pyexpat.c"
        var $287=HEAP[$errors_module]; //@line 1971 "pyexpat.c"
        var $288=_PyModule_AddStringConstant($287, ((__str143)&4294967295), $286); //@line 1971 "pyexpat.c"
        var $289=_XML_ErrorString(33); //@line 1972 "pyexpat.c"
        var $290=HEAP[$errors_module]; //@line 1972 "pyexpat.c"
        var $291=_PyModule_AddStringConstant($290, ((__str144)&4294967295), $289); //@line 1972 "pyexpat.c"
        var $292=_XML_ErrorString(34); //@line 1973 "pyexpat.c"
        var $293=HEAP[$errors_module]; //@line 1973 "pyexpat.c"
        var $294=_PyModule_AddStringConstant($293, ((__str145)&4294967295), $292); //@line 1973 "pyexpat.c"
        var $295=_XML_ErrorString(35); //@line 1974 "pyexpat.c"
        var $296=HEAP[$errors_module]; //@line 1974 "pyexpat.c"
        var $297=_PyModule_AddStringConstant($296, ((__str146)&4294967295), $295); //@line 1974 "pyexpat.c"
        var $298=_XML_ErrorString(36); //@line 1975 "pyexpat.c"
        var $299=HEAP[$errors_module]; //@line 1975 "pyexpat.c"
        var $300=_PyModule_AddStringConstant($299, ((__str147)&4294967295), $298); //@line 1975 "pyexpat.c"
        var $301=_XML_ErrorString(37); //@line 1976 "pyexpat.c"
        var $302=HEAP[$errors_module]; //@line 1976 "pyexpat.c"
        var $303=_PyModule_AddStringConstant($302, ((__str148)&4294967295), $301); //@line 1976 "pyexpat.c"
        var $304=HEAP[$errors_module]; //@line 1978 "pyexpat.c"
        var $305=_PyModule_AddStringConstant($304, ((__str149)&4294967295), ((__str150)&4294967295)); //@line 1978 "pyexpat.c"
        var $306=HEAP[$m]; //@line 1984 "pyexpat.c"
        var $307=_PyModule_AddIntConstant($306, ((__str151)&4294967295), 0); //@line 1984 "pyexpat.c"
        var $308=HEAP[$m]; //@line 1985 "pyexpat.c"
        var $309=_PyModule_AddIntConstant($308, ((__str152)&4294967295), 1); //@line 1985 "pyexpat.c"
        var $310=HEAP[$m]; //@line 1986 "pyexpat.c"
        var $311=_PyModule_AddIntConstant($310, ((__str153)&4294967295), 2); //@line 1986 "pyexpat.c"
        var $312=HEAP[$model_module]; //@line 1990 "pyexpat.c"
        var $313=_PyModule_AddStringConstant($312, ((__str149)&4294967295), ((__str154)&4294967295)); //@line 1990 "pyexpat.c"
        var $314=HEAP[$model_module]; //@line 1993 "pyexpat.c"
        var $315=_PyModule_AddIntConstant($314, ((__str155)&4294967295), 1); //@line 1993 "pyexpat.c"
        var $316=HEAP[$model_module]; //@line 1994 "pyexpat.c"
        var $317=_PyModule_AddIntConstant($316, ((__str156)&4294967295), 2); //@line 1994 "pyexpat.c"
        var $318=HEAP[$model_module]; //@line 1995 "pyexpat.c"
        var $319=_PyModule_AddIntConstant($318, ((__str157)&4294967295), 3); //@line 1995 "pyexpat.c"
        var $320=HEAP[$model_module]; //@line 1996 "pyexpat.c"
        var $321=_PyModule_AddIntConstant($320, ((__str158)&4294967295), 4); //@line 1996 "pyexpat.c"
        var $322=HEAP[$model_module]; //@line 1997 "pyexpat.c"
        var $323=_PyModule_AddIntConstant($322, ((__str159)&4294967295), 5); //@line 1997 "pyexpat.c"
        var $324=HEAP[$model_module]; //@line 1998 "pyexpat.c"
        var $325=_PyModule_AddIntConstant($324, ((__str160)&4294967295), 6); //@line 1998 "pyexpat.c"
        var $326=HEAP[$model_module]; //@line 2000 "pyexpat.c"
        var $327=_PyModule_AddIntConstant($326, ((__str161)&4294967295), 0); //@line 2000 "pyexpat.c"
        var $328=HEAP[$model_module]; //@line 2001 "pyexpat.c"
        var $329=_PyModule_AddIntConstant($328, ((__str162)&4294967295), 1); //@line 2001 "pyexpat.c"
        var $330=HEAP[$model_module]; //@line 2002 "pyexpat.c"
        var $331=_PyModule_AddIntConstant($330, ((__str163)&4294967295), 2); //@line 2002 "pyexpat.c"
        var $332=HEAP[$model_module]; //@line 2003 "pyexpat.c"
        var $333=_PyModule_AddIntConstant($332, ((__str164)&4294967295), 3); //@line 2003 "pyexpat.c"
        HEAP[((_capi_11610+4)&4294967295)]=80; //@line 2007 "pyexpat.c"
        HEAP[((_capi_11610)&4294967295)]=((__str165)&4294967295); //@line 2008 "pyexpat.c"
        HEAP[((_capi_11610+8)&4294967295)]=2; //@line 2009 "pyexpat.c"
        HEAP[((_capi_11610+12)&4294967295)]=0; //@line 2010 "pyexpat.c"
        HEAP[((_capi_11610+16)&4294967295)]=1; //@line 2011 "pyexpat.c"
        HEAP[((_capi_11610+20)&4294967295)]=(FUNCTION_TABLE_OFFSET + 12); //@line 2012 "pyexpat.c"
        HEAP[((_capi_11610+24)&4294967295)]=(FUNCTION_TABLE_OFFSET + 14); //@line 2013 "pyexpat.c"
        HEAP[((_capi_11610+28)&4294967295)]=(FUNCTION_TABLE_OFFSET + 16); //@line 2014 "pyexpat.c"
        HEAP[((_capi_11610+32)&4294967295)]=(FUNCTION_TABLE_OFFSET + 18); //@line 2015 "pyexpat.c"
        HEAP[((_capi_11610+36)&4294967295)]=(FUNCTION_TABLE_OFFSET + 20); //@line 2016 "pyexpat.c"
        HEAP[((_capi_11610+40)&4294967295)]=(FUNCTION_TABLE_OFFSET + 22); //@line 2017 "pyexpat.c"
        HEAP[((_capi_11610+44)&4294967295)]=(FUNCTION_TABLE_OFFSET + 24); //@line 2018 "pyexpat.c"
        HEAP[((_capi_11610+48)&4294967295)]=(FUNCTION_TABLE_OFFSET + 26); //@line 2019 "pyexpat.c"
        HEAP[((_capi_11610+52)&4294967295)]=(FUNCTION_TABLE_OFFSET + 28); //@line 2020 "pyexpat.c"
        HEAP[((_capi_11610+56)&4294967295)]=(FUNCTION_TABLE_OFFSET + 30); //@line 2021 "pyexpat.c"
        HEAP[((_capi_11610+60)&4294967295)]=(FUNCTION_TABLE_OFFSET + 32); //@line 2022 "pyexpat.c"
        HEAP[((_capi_11610+64)&4294967295)]=(FUNCTION_TABLE_OFFSET + 34); //@line 2023 "pyexpat.c"
        HEAP[((_capi_11610+68)&4294967295)]=(FUNCTION_TABLE_OFFSET + 36); //@line 2024 "pyexpat.c"
        HEAP[((_capi_11610+72)&4294967295)]=(FUNCTION_TABLE_OFFSET + 38); //@line 2025 "pyexpat.c"
        HEAP[((_capi_11610+76)&4294967295)]=(FUNCTION_TABLE_OFFSET + 40); //@line 2026 "pyexpat.c"
        var $334=_PyCapsule_New(_capi_11610, ((__str166)&4294967295), 0); //@line 2029 "pyexpat.c"
        HEAP[$capi_object]=$334; //@line 2029 "pyexpat.c"
        var $335=HEAP[$capi_object]; //@line 2030 "pyexpat.c"
        var $336=($335)!=0; //@line 2030 "pyexpat.c"
        if ($336) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 2030 "pyexpat.c"
      case 35: // $bb34
        var $337=HEAP[$m]; //@line 2031 "pyexpat.c"
        var $338=HEAP[$capi_object]; //@line 2031 "pyexpat.c"
        var $339=_PyModule_AddObject($337, ((__str167)&4294967295), $338); //@line 2031 "pyexpat.c"
        __label__ = 36; break; //@line 2031 "pyexpat.c"
      case 36: // $bb35
        __label__ = 37; break; //@line 1829 "pyexpat.c"
      case 37: // $return
        STACKTOP = __stackBase__;
        return; //@line 1829 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  Module["_initpyexpat"] = _initpyexpat;

  function _clear_handlers($self, $initial) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $initial_addr=__stackBase__+4;
        var $i=__stackBase__+8;
        var $temp=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$initial_addr]=$initial;
        HEAP[$i]=0; //@line 2037 "pyexpat.c"
        __label__ = 8; break; //@line 2037 "pyexpat.c"
      case 1: // $bb
        var $0=HEAP[$initial_addr]; //@line 2041 "pyexpat.c"
        var $1=((($0))|0)!=0; //@line 2041 "pyexpat.c"
        if ($1) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2041 "pyexpat.c"
      case 2: // $bb1
        var $2=HEAP[$self_addr]; //@line 2042 "pyexpat.c"
        var $3=(($2+48)&4294967295); //@line 2042 "pyexpat.c"
        var $4=HEAP[$3]; //@line 2042 "pyexpat.c"
        var $5=HEAP[$i]; //@line 2042 "pyexpat.c"
        var $6=(($4+4*$5)&4294967295); //@line 2042 "pyexpat.c"
        HEAP[$6]=0; //@line 2042 "pyexpat.c"
        __label__ = 7; break; //@line 2042 "pyexpat.c"
      case 3: // $bb2
        var $7=HEAP[$self_addr]; //@line 2044 "pyexpat.c"
        var $8=(($7+48)&4294967295); //@line 2044 "pyexpat.c"
        var $9=HEAP[$8]; //@line 2044 "pyexpat.c"
        var $10=HEAP[$i]; //@line 2044 "pyexpat.c"
        var $11=(($9+4*$10)&4294967295); //@line 2044 "pyexpat.c"
        var $12=HEAP[$11]; //@line 2044 "pyexpat.c"
        HEAP[$temp]=$12; //@line 2044 "pyexpat.c"
        var $13=HEAP[$self_addr]; //@line 2045 "pyexpat.c"
        var $14=(($13+48)&4294967295); //@line 2045 "pyexpat.c"
        var $15=HEAP[$14]; //@line 2045 "pyexpat.c"
        var $16=HEAP[$i]; //@line 2045 "pyexpat.c"
        var $17=(($15+4*$16)&4294967295); //@line 2045 "pyexpat.c"
        HEAP[$17]=0; //@line 2045 "pyexpat.c"
        var $18=HEAP[$temp]; //@line 2046 "pyexpat.c"
        var $19=($18)!=0; //@line 2046 "pyexpat.c"
        if ($19) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 2046 "pyexpat.c"
      case 4: // $bb3
        var $20=HEAP[$temp]; //@line 2046 "pyexpat.c"
        var $21=(($20)&4294967295); //@line 2046 "pyexpat.c"
        var $22=HEAP[$21]; //@line 2046 "pyexpat.c"
        var $23=((($22) - 1)&4294967295); //@line 2046 "pyexpat.c"
        var $24=HEAP[$temp]; //@line 2046 "pyexpat.c"
        var $25=(($24)&4294967295); //@line 2046 "pyexpat.c"
        HEAP[$25]=$23; //@line 2046 "pyexpat.c"
        var $26=HEAP[$temp]; //@line 2046 "pyexpat.c"
        var $27=(($26)&4294967295); //@line 2046 "pyexpat.c"
        var $28=HEAP[$27]; //@line 2046 "pyexpat.c"
        var $29=((($28))|0)==0; //@line 2046 "pyexpat.c"
        if ($29) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 2046 "pyexpat.c"
      case 5: // $bb4
        var $30=HEAP[$temp]; //@line 2046 "pyexpat.c"
        var $31=(($30+4)&4294967295); //@line 2046 "pyexpat.c"
        var $32=HEAP[$31]; //@line 2046 "pyexpat.c"
        var $33=(($32+24)&4294967295); //@line 2046 "pyexpat.c"
        var $34=HEAP[$33]; //@line 2046 "pyexpat.c"
        var $35=HEAP[$temp]; //@line 2046 "pyexpat.c"
        FUNCTION_TABLE[$34]($35); //@line 2046 "pyexpat.c"
        __label__ = 6; break; //@line 2046 "pyexpat.c"
      case 6: // $bb5
        var $36=HEAP[$i]; //@line 2047 "pyexpat.c"
        var $37=((_handler_info+$36*20)&4294967295); //@line 2047 "pyexpat.c"
        var $38=(($37+4)&4294967295); //@line 2047 "pyexpat.c"
        var $39=HEAP[$38]; //@line 2047 "pyexpat.c"
        var $40=HEAP[$self_addr]; //@line 2047 "pyexpat.c"
        var $41=(($40+8)&4294967295); //@line 2047 "pyexpat.c"
        var $42=HEAP[$41]; //@line 2047 "pyexpat.c"
        FUNCTION_TABLE[$39]($42, 0); //@line 2047 "pyexpat.c"
        __label__ = 7; break; //@line 2047 "pyexpat.c"
      case 7: // $bb6
        var $43=HEAP[$i]; //@line 2040 "pyexpat.c"
        var $44=((($43) + 1)&4294967295); //@line 2040 "pyexpat.c"
        HEAP[$i]=$44; //@line 2040 "pyexpat.c"
        __label__ = 8; break; //@line 2040 "pyexpat.c"
      case 8: // $bb7
        var $45=HEAP[$i]; //@line 2040 "pyexpat.c"
        var $46=((_handler_info+$45*20)&4294967295); //@line 2040 "pyexpat.c"
        var $47=(($46)&4294967295); //@line 2040 "pyexpat.c"
        var $48=HEAP[$47]; //@line 2040 "pyexpat.c"
        var $49=($48)!=0; //@line 2040 "pyexpat.c"
        if ($49) { __label__ = 1; break; } else { __label__ = 9; break; } //@line 2040 "pyexpat.c"
      case 9: // $bb8
        __label__ = 10; break; //@line 2050 "pyexpat.c"
      case 10: // $return
        STACKTOP = __stackBase__;
        return; //@line 2050 "pyexpat.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_ParserCreate($encodingName) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $encodingName_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$encodingName_addr]=$encodingName;
        var $1=HEAP[$encodingName_addr]; //@line 656 "xmlparse.c"
        var $2=_PyExpat_XML_ParserCreate_MM($1, 0, 0); //@line 656 "xmlparse.c"
        HEAP[$0]=$2; //@line 656 "xmlparse.c"
        var $3=HEAP[$0]; //@line 656 "xmlparse.c"
        HEAP[$retval]=$3; //@line 656 "xmlparse.c"
        __label__ = 1; break; //@line 656 "xmlparse.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 656 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 656 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_ParserCreateNS($encodingName, $nsSep) {
    var __stackBase__  = STACKTOP; STACKTOP += 15; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 15);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $encodingName_addr=__stackBase__;
        var $nsSep_addr=__stackBase__+4;
        var $retval=__stackBase__+5;
        var $0=__stackBase__+9;
        var $tmp=__stackBase__+13;
        var $_alloca_point_=0;
        HEAP[$encodingName_addr]=$encodingName;
        HEAP[$nsSep_addr]=$nsSep;
        var $1=(($tmp)&4294967295); //@line 663 "xmlparse.c"
        var $2=HEAP[$nsSep_addr]; //@line 663 "xmlparse.c"
        HEAP[$1]=$2; //@line 663 "xmlparse.c"
        var $3=HEAP[$encodingName_addr]; //@line 664 "xmlparse.c"
        var $tmp1=$tmp; //@line 664 "xmlparse.c"
        var $4=_PyExpat_XML_ParserCreate_MM($3, 0, $tmp1); //@line 664 "xmlparse.c"
        HEAP[$0]=$4; //@line 664 "xmlparse.c"
        var $5=HEAP[$0]; //@line 664 "xmlparse.c"
        HEAP[$retval]=$5; //@line 664 "xmlparse.c"
        __label__ = 1; break; //@line 664 "xmlparse.c"
      case 1: // $return
        var $retval2=HEAP[$retval]; //@line 664 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval2; //@line 664 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_ParserCreate_MM($encodingName, $memsuite, $nameSep) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $encodingName_addr=__stackBase__;
        var $memsuite_addr=__stackBase__+4;
        var $nameSep_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $parser=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$encodingName_addr]=$encodingName;
        HEAP[$memsuite_addr]=$memsuite;
        HEAP[$nameSep_addr]=$nameSep;
        var $1=HEAP[$encodingName_addr]; //@line 679 "xmlparse.c"
        var $2=HEAP[$memsuite_addr]; //@line 679 "xmlparse.c"
        var $3=HEAP[$nameSep_addr]; //@line 679 "xmlparse.c"
        var $4=_parserCreate($1, $2, $3, 0); //@line 679 "xmlparse.c"
        HEAP[$parser]=$4; //@line 679 "xmlparse.c"
        var $5=HEAP[$parser]; //@line 680 "xmlparse.c"
        var $6=($5)!=0; //@line 680 "xmlparse.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 680 "xmlparse.c"
      case 1: // $bb
        var $7=HEAP[$parser]; //@line 680 "xmlparse.c"
        var $8=(($7+232)&4294967295); //@line 680 "xmlparse.c"
        var $9=HEAP[$8]; //@line 680 "xmlparse.c"
        var $10=reSign(($9), 8, 0)!=0; //@line 680 "xmlparse.c"
        if ($10) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 680 "xmlparse.c"
      case 2: // $bb1
        var $11=HEAP[$parser]; //@line 684 "xmlparse.c"
        var $12=_setContext($11, ((_implicitContext)&4294967295)); //@line 684 "xmlparse.c"
        var $13=reSign(($12), 8, 0)==0; //@line 684 "xmlparse.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 684 "xmlparse.c"
      case 3: // $bb2
        var $14=HEAP[$parser]; //@line 685 "xmlparse.c"
        _PyExpat_XML_ParserFree($14); //@line 685 "xmlparse.c"
        HEAP[$0]=0; //@line 686 "xmlparse.c"
        __label__ = 5; break; //@line 686 "xmlparse.c"
      case 4: // $bb3
        var $15=HEAP[$parser]; //@line 689 "xmlparse.c"
        HEAP[$0]=$15; //@line 689 "xmlparse.c"
        __label__ = 5; break; //@line 689 "xmlparse.c"
      case 5: // $bb4
        var $16=HEAP[$0]; //@line 686 "xmlparse.c"
        HEAP[$retval]=$16; //@line 686 "xmlparse.c"
        __label__ = 6; break; //@line 686 "xmlparse.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 686 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 686 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _parserCreate($encodingName, $memsuite, $nameSep, $dtd) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $encodingName_addr=__stackBase__;
        var $memsuite_addr=__stackBase__+4;
        var $nameSep_addr=__stackBase__+8;
        var $dtd_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $parser=__stackBase__+24;
        var $mtemp=__stackBase__+28;
        var $mtemp4=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$encodingName_addr]=$encodingName;
        HEAP[$memsuite_addr]=$memsuite;
        HEAP[$nameSep_addr]=$nameSep;
        HEAP[$dtd_addr]=$dtd;
        var $1=HEAP[$memsuite_addr]; //@line 700 "xmlparse.c"
        var $2=($1)!=0; //@line 700 "xmlparse.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 700 "xmlparse.c"
      case 1: // $bb
        var $3=HEAP[$memsuite_addr]; //@line 702 "xmlparse.c"
        var $4=(($3)&4294967295); //@line 702 "xmlparse.c"
        var $5=HEAP[$4]; //@line 702 "xmlparse.c"
        var $6=FUNCTION_TABLE[$5](472); //@line 702 "xmlparse.c"
        var $7=$6; //@line 702 "xmlparse.c"
        HEAP[$parser]=$7; //@line 702 "xmlparse.c"
        var $8=HEAP[$parser]; //@line 704 "xmlparse.c"
        var $9=($8)!=0; //@line 704 "xmlparse.c"
        if ($9) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 704 "xmlparse.c"
      case 2: // $bb1
        var $10=HEAP[$parser]; //@line 705 "xmlparse.c"
        var $11=(($10+12)&4294967295); //@line 705 "xmlparse.c"
        HEAP[$mtemp]=$11; //@line 705 "xmlparse.c"
        var $12=HEAP[$memsuite_addr]; //@line 706 "xmlparse.c"
        var $13=(($12)&4294967295); //@line 706 "xmlparse.c"
        var $14=HEAP[$13]; //@line 706 "xmlparse.c"
        var $15=HEAP[$mtemp]; //@line 706 "xmlparse.c"
        var $16=(($15)&4294967295); //@line 706 "xmlparse.c"
        HEAP[$16]=$14; //@line 706 "xmlparse.c"
        var $17=HEAP[$memsuite_addr]; //@line 707 "xmlparse.c"
        var $18=(($17+4)&4294967295); //@line 707 "xmlparse.c"
        var $19=HEAP[$18]; //@line 707 "xmlparse.c"
        var $20=HEAP[$mtemp]; //@line 707 "xmlparse.c"
        var $21=(($20+4)&4294967295); //@line 707 "xmlparse.c"
        HEAP[$21]=$19; //@line 707 "xmlparse.c"
        var $22=HEAP[$memsuite_addr]; //@line 708 "xmlparse.c"
        var $23=(($22+8)&4294967295); //@line 708 "xmlparse.c"
        var $24=HEAP[$23]; //@line 708 "xmlparse.c"
        var $25=HEAP[$mtemp]; //@line 708 "xmlparse.c"
        var $26=(($25+8)&4294967295); //@line 708 "xmlparse.c"
        HEAP[$26]=$24; //@line 708 "xmlparse.c"
        __label__ = 3; break; //@line 708 "xmlparse.c"
      case 3: // $bb2
        __label__ = 6; break; //@line 708 "xmlparse.c"
      case 4: // $bb3
        var $27=_malloc(472); //@line 713 "xmlparse.c"
        var $28=$27; //@line 713 "xmlparse.c"
        HEAP[$parser]=$28; //@line 713 "xmlparse.c"
        var $29=HEAP[$parser]; //@line 714 "xmlparse.c"
        var $30=($29)!=0; //@line 714 "xmlparse.c"
        if ($30) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 714 "xmlparse.c"
      case 5: // $bb5
        var $31=HEAP[$parser]; //@line 715 "xmlparse.c"
        var $32=(($31+12)&4294967295); //@line 715 "xmlparse.c"
        HEAP[$mtemp4]=$32; //@line 715 "xmlparse.c"
        var $33=HEAP[$mtemp4]; //@line 716 "xmlparse.c"
        var $34=(($33)&4294967295); //@line 716 "xmlparse.c"
        HEAP[$34]=(FUNCTION_TABLE_OFFSET + 42); //@line 716 "xmlparse.c"
        var $35=HEAP[$mtemp4]; //@line 717 "xmlparse.c"
        var $36=(($35+4)&4294967295); //@line 717 "xmlparse.c"
        HEAP[$36]=(FUNCTION_TABLE_OFFSET + 44); //@line 717 "xmlparse.c"
        var $37=HEAP[$mtemp4]; //@line 718 "xmlparse.c"
        var $38=(($37+8)&4294967295); //@line 718 "xmlparse.c"
        HEAP[$38]=(FUNCTION_TABLE_OFFSET + 46); //@line 718 "xmlparse.c"
        __label__ = 6; break; //@line 718 "xmlparse.c"
      case 6: // $bb6
        var $39=HEAP[$parser]; //@line 722 "xmlparse.c"
        var $40=($39)==0; //@line 722 "xmlparse.c"
        if ($40) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 722 "xmlparse.c"
      case 7: // $bb7
        var $41=HEAP[$parser]; //@line 723 "xmlparse.c"
        HEAP[$0]=$41; //@line 723 "xmlparse.c"
        __label__ = 23; break; //@line 723 "xmlparse.c"
      case 8: // $bb8
        var $42=HEAP[$parser]; //@line 725 "xmlparse.c"
        var $43=(($42+8)&4294967295); //@line 725 "xmlparse.c"
        HEAP[$43]=0; //@line 725 "xmlparse.c"
        var $44=HEAP[$parser]; //@line 726 "xmlparse.c"
        var $45=(($44+32)&4294967295); //@line 726 "xmlparse.c"
        HEAP[$45]=0; //@line 726 "xmlparse.c"
        var $46=HEAP[$parser]; //@line 728 "xmlparse.c"
        var $47=(($46+364)&4294967295); //@line 728 "xmlparse.c"
        HEAP[$47]=16; //@line 728 "xmlparse.c"
        var $48=HEAP[$parser]; //@line 729 "xmlparse.c"
        var $49=(($48+12)&4294967295); //@line 729 "xmlparse.c"
        var $50=(($49)&4294967295); //@line 729 "xmlparse.c"
        var $51=HEAP[$50]; //@line 729 "xmlparse.c"
        var $52=HEAP[$parser]; //@line 729 "xmlparse.c"
        var $53=(($52+364)&4294967295); //@line 729 "xmlparse.c"
        var $54=HEAP[$53]; //@line 729 "xmlparse.c"
        var $55=((($54) * 16)&4294967295); //@line 729 "xmlparse.c"
        var $56=FUNCTION_TABLE[$51]($55); //@line 729 "xmlparse.c"
        var $57=$56; //@line 729 "xmlparse.c"
        var $58=HEAP[$parser]; //@line 729 "xmlparse.c"
        var $59=(($58+376)&4294967295); //@line 729 "xmlparse.c"
        HEAP[$59]=$57; //@line 729 "xmlparse.c"
        var $60=HEAP[$parser]; //@line 730 "xmlparse.c"
        var $61=(($60+376)&4294967295); //@line 730 "xmlparse.c"
        var $62=HEAP[$61]; //@line 730 "xmlparse.c"
        var $63=($62)==0; //@line 730 "xmlparse.c"
        if ($63) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 730 "xmlparse.c"
      case 9: // $bb9
        var $64=HEAP[$parser]; //@line 731 "xmlparse.c"
        var $65=(($64+12)&4294967295); //@line 731 "xmlparse.c"
        var $66=(($65+8)&4294967295); //@line 731 "xmlparse.c"
        var $67=HEAP[$66]; //@line 731 "xmlparse.c"
        var $68=HEAP[$parser]; //@line 731 "xmlparse.c"
        var $69=$68; //@line 731 "xmlparse.c"
        FUNCTION_TABLE[$67]($69); //@line 731 "xmlparse.c"
        HEAP[$0]=0; //@line 732 "xmlparse.c"
        __label__ = 23; break; //@line 732 "xmlparse.c"
      case 10: // $bb10
        var $70=HEAP[$parser]; //@line 734 "xmlparse.c"
        var $71=(($70+12)&4294967295); //@line 734 "xmlparse.c"
        var $72=(($71)&4294967295); //@line 734 "xmlparse.c"
        var $73=HEAP[$72]; //@line 734 "xmlparse.c"
        var $74=FUNCTION_TABLE[$73](1024); //@line 734 "xmlparse.c"
        var $75=HEAP[$parser]; //@line 734 "xmlparse.c"
        var $76=(($75+44)&4294967295); //@line 734 "xmlparse.c"
        HEAP[$76]=$74; //@line 734 "xmlparse.c"
        var $77=HEAP[$parser]; //@line 735 "xmlparse.c"
        var $78=(($77+44)&4294967295); //@line 735 "xmlparse.c"
        var $79=HEAP[$78]; //@line 735 "xmlparse.c"
        var $80=($79)==0; //@line 735 "xmlparse.c"
        if ($80) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 735 "xmlparse.c"
      case 11: // $bb11
        var $81=HEAP[$parser]; //@line 736 "xmlparse.c"
        var $82=(($81+12)&4294967295); //@line 736 "xmlparse.c"
        var $83=(($82+8)&4294967295); //@line 736 "xmlparse.c"
        var $84=HEAP[$83]; //@line 736 "xmlparse.c"
        var $85=HEAP[$parser]; //@line 736 "xmlparse.c"
        var $86=(($85+376)&4294967295); //@line 736 "xmlparse.c"
        var $87=HEAP[$86]; //@line 736 "xmlparse.c"
        var $88=$87; //@line 736 "xmlparse.c"
        FUNCTION_TABLE[$84]($88); //@line 736 "xmlparse.c"
        var $89=HEAP[$parser]; //@line 737 "xmlparse.c"
        var $90=(($89+12)&4294967295); //@line 737 "xmlparse.c"
        var $91=(($90+8)&4294967295); //@line 737 "xmlparse.c"
        var $92=HEAP[$91]; //@line 737 "xmlparse.c"
        var $93=HEAP[$parser]; //@line 737 "xmlparse.c"
        var $94=$93; //@line 737 "xmlparse.c"
        FUNCTION_TABLE[$92]($94); //@line 737 "xmlparse.c"
        HEAP[$0]=0; //@line 738 "xmlparse.c"
        __label__ = 23; break; //@line 738 "xmlparse.c"
      case 12: // $bb12
        var $95=HEAP[$parser]; //@line 740 "xmlparse.c"
        var $96=(($95+44)&4294967295); //@line 740 "xmlparse.c"
        var $97=HEAP[$96]; //@line 740 "xmlparse.c"
        var $98=(($97+1024)&4294967295); //@line 740 "xmlparse.c"
        var $99=HEAP[$parser]; //@line 740 "xmlparse.c"
        var $100=(($99+48)&4294967295); //@line 740 "xmlparse.c"
        HEAP[$100]=$98; //@line 740 "xmlparse.c"
        var $101=HEAP[$dtd_addr]; //@line 742 "xmlparse.c"
        var $102=($101)!=0; //@line 742 "xmlparse.c"
        if ($102) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 742 "xmlparse.c"
      case 13: // $bb13
        var $103=HEAP[$parser]; //@line 743 "xmlparse.c"
        var $104=(($103+340)&4294967295); //@line 743 "xmlparse.c"
        var $105=HEAP[$dtd_addr]; //@line 743 "xmlparse.c"
        HEAP[$104]=$105; //@line 743 "xmlparse.c"
        __label__ = 16; break; //@line 743 "xmlparse.c"
      case 14: // $bb14
        var $106=HEAP[$parser]; //@line 745 "xmlparse.c"
        var $107=(($106+12)&4294967295); //@line 745 "xmlparse.c"
        var $108=_dtdCreate($107); //@line 745 "xmlparse.c"
        var $109=HEAP[$parser]; //@line 745 "xmlparse.c"
        var $110=(($109+340)&4294967295); //@line 745 "xmlparse.c"
        HEAP[$110]=$108; //@line 745 "xmlparse.c"
        var $111=HEAP[$parser]; //@line 746 "xmlparse.c"
        var $112=(($111+340)&4294967295); //@line 746 "xmlparse.c"
        var $113=HEAP[$112]; //@line 746 "xmlparse.c"
        var $114=($113)==0; //@line 746 "xmlparse.c"
        if ($114) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 746 "xmlparse.c"
      case 15: // $bb15
        var $115=HEAP[$parser]; //@line 747 "xmlparse.c"
        var $116=(($115+12)&4294967295); //@line 747 "xmlparse.c"
        var $117=(($116+8)&4294967295); //@line 747 "xmlparse.c"
        var $118=HEAP[$117]; //@line 747 "xmlparse.c"
        var $119=HEAP[$parser]; //@line 747 "xmlparse.c"
        var $120=(($119+44)&4294967295); //@line 747 "xmlparse.c"
        var $121=HEAP[$120]; //@line 747 "xmlparse.c"
        FUNCTION_TABLE[$118]($121); //@line 747 "xmlparse.c"
        var $122=HEAP[$parser]; //@line 748 "xmlparse.c"
        var $123=(($122+12)&4294967295); //@line 748 "xmlparse.c"
        var $124=(($123+8)&4294967295); //@line 748 "xmlparse.c"
        var $125=HEAP[$124]; //@line 748 "xmlparse.c"
        var $126=HEAP[$parser]; //@line 748 "xmlparse.c"
        var $127=(($126+376)&4294967295); //@line 748 "xmlparse.c"
        var $128=HEAP[$127]; //@line 748 "xmlparse.c"
        var $129=$128; //@line 748 "xmlparse.c"
        FUNCTION_TABLE[$125]($129); //@line 748 "xmlparse.c"
        var $130=HEAP[$parser]; //@line 749 "xmlparse.c"
        var $131=(($130+12)&4294967295); //@line 749 "xmlparse.c"
        var $132=(($131+8)&4294967295); //@line 749 "xmlparse.c"
        var $133=HEAP[$132]; //@line 749 "xmlparse.c"
        var $134=HEAP[$parser]; //@line 749 "xmlparse.c"
        var $135=$134; //@line 749 "xmlparse.c"
        FUNCTION_TABLE[$133]($135); //@line 749 "xmlparse.c"
        HEAP[$0]=0; //@line 750 "xmlparse.c"
        __label__ = 23; break; //@line 750 "xmlparse.c"
      case 16: // $bb16
        var $136=HEAP[$parser]; //@line 754 "xmlparse.c"
        var $137=(($136+360)&4294967295); //@line 754 "xmlparse.c"
        HEAP[$137]=0; //@line 754 "xmlparse.c"
        var $138=HEAP[$parser]; //@line 755 "xmlparse.c"
        var $139=(($138+352)&4294967295); //@line 755 "xmlparse.c"
        HEAP[$139]=0; //@line 755 "xmlparse.c"
        var $140=HEAP[$parser]; //@line 756 "xmlparse.c"
        var $141=(($140+288)&4294967295); //@line 756 "xmlparse.c"
        HEAP[$141]=0; //@line 756 "xmlparse.c"
        var $142=HEAP[$parser]; //@line 758 "xmlparse.c"
        var $143=(($142+452)&4294967295); //@line 758 "xmlparse.c"
        HEAP[$143]=0; //@line 758 "xmlparse.c"
        var $144=HEAP[$parser]; //@line 759 "xmlparse.c"
        var $145=(($144+448)&4294967295); //@line 759 "xmlparse.c"
        HEAP[$145]=0; //@line 759 "xmlparse.c"
        var $146=HEAP[$parser]; //@line 761 "xmlparse.c"
        var $147=(($146+124)&4294967295); //@line 761 "xmlparse.c"
        HEAP[$147]=0; //@line 761 "xmlparse.c"
        var $148=HEAP[$parser]; //@line 762 "xmlparse.c"
        var $149=(($148+244)&4294967295); //@line 762 "xmlparse.c"
        HEAP[$149]=0; //@line 762 "xmlparse.c"
        var $150=HEAP[$parser]; //@line 764 "xmlparse.c"
        var $151=(($150+456)&4294967295); //@line 764 "xmlparse.c"
        HEAP[$151]=33; //@line 764 "xmlparse.c"
        var $152=HEAP[$parser]; //@line 765 "xmlparse.c"
        var $153=(($152+232)&4294967295); //@line 765 "xmlparse.c"
        HEAP[$153]=0; //@line 765 "xmlparse.c"
        var $154=HEAP[$parser]; //@line 766 "xmlparse.c"
        var $155=(($154+233)&4294967295); //@line 766 "xmlparse.c"
        HEAP[$155]=0; //@line 766 "xmlparse.c"
        var $156=HEAP[$parser]; //@line 768 "xmlparse.c"
        var $157=(($156+380)&4294967295); //@line 768 "xmlparse.c"
        HEAP[$157]=0; //@line 768 "xmlparse.c"
        var $158=HEAP[$parser]; //@line 769 "xmlparse.c"
        var $159=(($158+384)&4294967295); //@line 769 "xmlparse.c"
        HEAP[$159]=0; //@line 769 "xmlparse.c"
        var $160=HEAP[$parser]; //@line 770 "xmlparse.c"
        var $161=(($160+388)&4294967295); //@line 770 "xmlparse.c"
        HEAP[$161]=0; //@line 770 "xmlparse.c"
        var $162=HEAP[$parser]; //@line 772 "xmlparse.c"
        var $163=(($162+12)&4294967295); //@line 772 "xmlparse.c"
        var $164=HEAP[$parser]; //@line 772 "xmlparse.c"
        var $165=(($164+400)&4294967295); //@line 772 "xmlparse.c"
        _poolInit($165, $163); //@line 772 "xmlparse.c"
        var $166=HEAP[$parser]; //@line 773 "xmlparse.c"
        var $167=(($166+12)&4294967295); //@line 773 "xmlparse.c"
        var $168=HEAP[$parser]; //@line 773 "xmlparse.c"
        var $169=(($168+424)&4294967295); //@line 773 "xmlparse.c"
        _poolInit($169, $167); //@line 773 "xmlparse.c"
        var $170=HEAP[$parser]; //@line 774 "xmlparse.c"
        var $171=HEAP[$encodingName_addr]; //@line 774 "xmlparse.c"
        _parserInit($170, $171); //@line 774 "xmlparse.c"
        var $172=HEAP[$encodingName_addr]; //@line 776 "xmlparse.c"
        var $173=($172)!=0; //@line 776 "xmlparse.c"
        if ($173) { __label__ = 17; break; } else { __label__ = 19; break; } //@line 776 "xmlparse.c"
      case 17: // $bb17
        var $174=HEAP[$parser]; //@line 776 "xmlparse.c"
        var $175=(($174+228)&4294967295); //@line 776 "xmlparse.c"
        var $176=HEAP[$175]; //@line 776 "xmlparse.c"
        var $177=($176)==0; //@line 776 "xmlparse.c"
        if ($177) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 776 "xmlparse.c"
      case 18: // $bb18
        var $178=HEAP[$parser]; //@line 777 "xmlparse.c"
        _PyExpat_XML_ParserFree($178); //@line 777 "xmlparse.c"
        HEAP[$0]=0; //@line 778 "xmlparse.c"
        __label__ = 23; break; //@line 778 "xmlparse.c"
      case 19: // $bb19
        var $179=HEAP[$nameSep_addr]; //@line 781 "xmlparse.c"
        var $180=($179)!=0; //@line 781 "xmlparse.c"
        if ($180) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 781 "xmlparse.c"
      case 20: // $bb20
        var $181=HEAP[$parser]; //@line 782 "xmlparse.c"
        var $182=(($181+232)&4294967295); //@line 782 "xmlparse.c"
        HEAP[$182]=1; //@line 782 "xmlparse.c"
        var $183=_PyExpat_XmlGetUtf8InternalEncoding(); //@line 783 "xmlparse.c"
        var $184=HEAP[$parser]; //@line 783 "xmlparse.c"
        var $185=(($184+224)&4294967295); //@line 783 "xmlparse.c"
        HEAP[$185]=$183; //@line 783 "xmlparse.c"
        var $186=HEAP[$nameSep_addr]; //@line 784 "xmlparse.c"
        var $187=HEAP[$186]; //@line 784 "xmlparse.c"
        var $188=HEAP[$parser]; //@line 784 "xmlparse.c"
        var $189=(($188+456)&4294967295); //@line 784 "xmlparse.c"
        HEAP[$189]=$187; //@line 784 "xmlparse.c"
        __label__ = 22; break; //@line 784 "xmlparse.c"
      case 21: // $bb21
        var $190=_PyExpat_XmlGetUtf8InternalEncoding(); //@line 787 "xmlparse.c"
        var $191=HEAP[$parser]; //@line 787 "xmlparse.c"
        var $192=(($191+224)&4294967295); //@line 787 "xmlparse.c"
        HEAP[$192]=$190; //@line 787 "xmlparse.c"
        __label__ = 22; break; //@line 787 "xmlparse.c"
      case 22: // $bb22
        var $193=HEAP[$parser]; //@line 790 "xmlparse.c"
        HEAP[$0]=$193; //@line 790 "xmlparse.c"
        __label__ = 23; break; //@line 790 "xmlparse.c"
      case 23: // $bb23
        var $194=HEAP[$0]; //@line 723 "xmlparse.c"
        HEAP[$retval]=$194; //@line 723 "xmlparse.c"
        __label__ = 24; break; //@line 723 "xmlparse.c"
      case 24: // $return
        var $retval24=HEAP[$retval]; //@line 723 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval24; //@line 723 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _parserInit($parser, $encodingName) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $encodingName_addr=__stackBase__+4;
        var $iftmp_0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$encodingName_addr]=$encodingName;
        var $0=HEAP[$parser_addr]; //@line 796 "xmlparse.c"
        var $1=(($0+264)&4294967295); //@line 796 "xmlparse.c"
        HEAP[$1]=(FUNCTION_TABLE_OFFSET + 48); //@line 796 "xmlparse.c"
        var $2=HEAP[$parser_addr]; //@line 797 "xmlparse.c"
        var $3=(($2+252)&4294967295); //@line 797 "xmlparse.c"
        _PyExpat_XmlPrologStateInit($3); //@line 797 "xmlparse.c"
        var $4=HEAP[$encodingName_addr]; //@line 798 "xmlparse.c"
        var $5=($4)!=0; //@line 798 "xmlparse.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 798 "xmlparse.c"
      case 1: // $bb
        var $6=HEAP[$parser_addr]; //@line 798 "xmlparse.c"
        var $7=(($6+400)&4294967295); //@line 798 "xmlparse.c"
        var $8=HEAP[$encodingName_addr]; //@line 798 "xmlparse.c"
        var $9=_poolCopyString($7, $8); //@line 798 "xmlparse.c"
        HEAP[$iftmp_0]=$9; //@line 798 "xmlparse.c"
        __label__ = 3; break; //@line 798 "xmlparse.c"
      case 2: // $bb1
        HEAP[$iftmp_0]=0; //@line 798 "xmlparse.c"
        __label__ = 3; break; //@line 798 "xmlparse.c"
      case 3: // $bb2
        var $10=HEAP[$parser_addr]; //@line 798 "xmlparse.c"
        var $11=(($10+228)&4294967295); //@line 798 "xmlparse.c"
        var $12=HEAP[$iftmp_0]; //@line 798 "xmlparse.c"
        HEAP[$11]=$12; //@line 798 "xmlparse.c"
        var $13=HEAP[$parser_addr]; //@line 801 "xmlparse.c"
        var $14=(($13+344)&4294967295); //@line 801 "xmlparse.c"
        HEAP[$14]=0; //@line 801 "xmlparse.c"
        var $15=HEAP[$parser_addr]; //@line 802 "xmlparse.c"
        var $16=(($15+144)&4294967295); //@line 802 "xmlparse.c"
        var $17=HEAP[$parser_addr]; //@line 802 "xmlparse.c"
        var $18=(($17+148)&4294967295); //@line 802 "xmlparse.c"
        var $19=_PyExpat_XmlInitEncoding($18, $16, 0); //@line 802 "xmlparse.c"
        var $20=HEAP[$parser_addr]; //@line 803 "xmlparse.c"
        var $21=(($20)&4294967295); //@line 803 "xmlparse.c"
        HEAP[$21]=0; //@line 803 "xmlparse.c"
        var $22=HEAP[$parser_addr]; //@line 804 "xmlparse.c"
        var $23=(($22+4)&4294967295); //@line 804 "xmlparse.c"
        HEAP[$23]=0; //@line 804 "xmlparse.c"
        var $24=HEAP[$parser_addr]; //@line 805 "xmlparse.c"
        var $25=(($24+52)&4294967295); //@line 805 "xmlparse.c"
        HEAP[$25]=0; //@line 805 "xmlparse.c"
        var $26=HEAP[$parser_addr]; //@line 806 "xmlparse.c"
        var $27=(($26+56)&4294967295); //@line 806 "xmlparse.c"
        HEAP[$27]=0; //@line 806 "xmlparse.c"
        var $28=HEAP[$parser_addr]; //@line 807 "xmlparse.c"
        var $29=(($28+60)&4294967295); //@line 807 "xmlparse.c"
        HEAP[$29]=0; //@line 807 "xmlparse.c"
        var $30=HEAP[$parser_addr]; //@line 808 "xmlparse.c"
        var $31=(($30+64)&4294967295); //@line 808 "xmlparse.c"
        HEAP[$31]=0; //@line 808 "xmlparse.c"
        var $32=HEAP[$parser_addr]; //@line 809 "xmlparse.c"
        var $33=(($32+68)&4294967295); //@line 809 "xmlparse.c"
        HEAP[$33]=0; //@line 809 "xmlparse.c"
        var $34=HEAP[$parser_addr]; //@line 810 "xmlparse.c"
        var $35=(($34+72)&4294967295); //@line 810 "xmlparse.c"
        HEAP[$35]=0; //@line 810 "xmlparse.c"
        var $36=HEAP[$parser_addr]; //@line 811 "xmlparse.c"
        var $37=(($36+76)&4294967295); //@line 811 "xmlparse.c"
        HEAP[$37]=0; //@line 811 "xmlparse.c"
        var $38=HEAP[$parser_addr]; //@line 812 "xmlparse.c"
        var $39=(($38+80)&4294967295); //@line 812 "xmlparse.c"
        HEAP[$39]=0; //@line 812 "xmlparse.c"
        var $40=HEAP[$parser_addr]; //@line 813 "xmlparse.c"
        var $41=(($40+84)&4294967295); //@line 813 "xmlparse.c"
        HEAP[$41]=0; //@line 813 "xmlparse.c"
        var $42=HEAP[$parser_addr]; //@line 814 "xmlparse.c"
        var $43=(($42+88)&4294967295); //@line 814 "xmlparse.c"
        HEAP[$43]=0; //@line 814 "xmlparse.c"
        var $44=HEAP[$parser_addr]; //@line 815 "xmlparse.c"
        var $45=(($44+92)&4294967295); //@line 815 "xmlparse.c"
        HEAP[$45]=0; //@line 815 "xmlparse.c"
        var $46=HEAP[$parser_addr]; //@line 816 "xmlparse.c"
        var $47=(($46+96)&4294967295); //@line 816 "xmlparse.c"
        HEAP[$47]=0; //@line 816 "xmlparse.c"
        var $48=HEAP[$parser_addr]; //@line 817 "xmlparse.c"
        var $49=(($48+100)&4294967295); //@line 817 "xmlparse.c"
        HEAP[$49]=0; //@line 817 "xmlparse.c"
        var $50=HEAP[$parser_addr]; //@line 818 "xmlparse.c"
        var $51=(($50+104)&4294967295); //@line 818 "xmlparse.c"
        HEAP[$51]=0; //@line 818 "xmlparse.c"
        var $52=HEAP[$parser_addr]; //@line 819 "xmlparse.c"
        var $53=(($52+108)&4294967295); //@line 819 "xmlparse.c"
        HEAP[$53]=0; //@line 819 "xmlparse.c"
        var $54=HEAP[$parser_addr]; //@line 820 "xmlparse.c"
        var $55=(($54+112)&4294967295); //@line 820 "xmlparse.c"
        HEAP[$55]=0; //@line 820 "xmlparse.c"
        var $56=HEAP[$parser_addr]; //@line 821 "xmlparse.c"
        var $57=(($56+116)&4294967295); //@line 821 "xmlparse.c"
        var $58=HEAP[$parser_addr]; //@line 821 "xmlparse.c"
        HEAP[$57]=$58; //@line 821 "xmlparse.c"
        var $59=HEAP[$parser_addr]; //@line 822 "xmlparse.c"
        var $60=(($59+120)&4294967295); //@line 822 "xmlparse.c"
        HEAP[$60]=0; //@line 822 "xmlparse.c"
        var $61=HEAP[$parser_addr]; //@line 823 "xmlparse.c"
        var $62=(($61+128)&4294967295); //@line 823 "xmlparse.c"
        HEAP[$62]=0; //@line 823 "xmlparse.c"
        var $63=HEAP[$parser_addr]; //@line 824 "xmlparse.c"
        var $64=(($63+132)&4294967295); //@line 824 "xmlparse.c"
        HEAP[$64]=0; //@line 824 "xmlparse.c"
        var $65=HEAP[$parser_addr]; //@line 825 "xmlparse.c"
        var $66=(($65+136)&4294967295); //@line 825 "xmlparse.c"
        HEAP[$66]=0; //@line 825 "xmlparse.c"
        var $67=HEAP[$parser_addr]; //@line 826 "xmlparse.c"
        var $68=(($67+140)&4294967295); //@line 826 "xmlparse.c"
        HEAP[$68]=0; //@line 826 "xmlparse.c"
        var $69=HEAP[$parser_addr]; //@line 827 "xmlparse.c"
        var $70=(($69+8)&4294967295); //@line 827 "xmlparse.c"
        var $71=HEAP[$70]; //@line 827 "xmlparse.c"
        var $72=HEAP[$parser_addr]; //@line 827 "xmlparse.c"
        var $73=(($72+24)&4294967295); //@line 827 "xmlparse.c"
        HEAP[$73]=$71; //@line 827 "xmlparse.c"
        var $74=HEAP[$parser_addr]; //@line 828 "xmlparse.c"
        var $75=(($74+8)&4294967295); //@line 828 "xmlparse.c"
        var $76=HEAP[$75]; //@line 828 "xmlparse.c"
        var $77=HEAP[$parser_addr]; //@line 828 "xmlparse.c"
        var $78=(($77+28)&4294967295); //@line 828 "xmlparse.c"
        HEAP[$78]=$76; //@line 828 "xmlparse.c"
        var $79=HEAP[$parser_addr]; //@line 829 "xmlparse.c"
        var $80=(($79+36)&4294967295); //@line 829 "xmlparse.c"
        HEAP[$80]=0; //@line 829 "xmlparse.c"
        var $81=HEAP[$parser_addr]; //@line 830 "xmlparse.c"
        var $82=(($81+40)&4294967295); //@line 830 "xmlparse.c"
        HEAP[$82]=0; //@line 830 "xmlparse.c"
        var $83=HEAP[$parser_addr]; //@line 831 "xmlparse.c"
        var $84=(($83+328)&4294967295); //@line 831 "xmlparse.c"
        HEAP[$84]=0; //@line 831 "xmlparse.c"
        var $85=HEAP[$parser_addr]; //@line 832 "xmlparse.c"
        var $86=(($85+332)&4294967295); //@line 832 "xmlparse.c"
        HEAP[$86]=0; //@line 832 "xmlparse.c"
        var $87=HEAP[$parser_addr]; //@line 833 "xmlparse.c"
        var $88=(($87+300)&4294967295); //@line 833 "xmlparse.c"
        HEAP[$88]=0; //@line 833 "xmlparse.c"
        var $89=HEAP[$parser_addr]; //@line 834 "xmlparse.c"
        var $90=(($89+304)&4294967295); //@line 834 "xmlparse.c"
        HEAP[$90]=0; //@line 834 "xmlparse.c"
        var $91=HEAP[$parser_addr]; //@line 835 "xmlparse.c"
        var $92=(($91+308)&4294967295); //@line 835 "xmlparse.c"
        HEAP[$92]=0; //@line 835 "xmlparse.c"
        var $93=HEAP[$parser_addr]; //@line 836 "xmlparse.c"
        var $94=(($93+312)&4294967295); //@line 836 "xmlparse.c"
        HEAP[$94]=0; //@line 836 "xmlparse.c"
        var $95=HEAP[$parser_addr]; //@line 837 "xmlparse.c"
        var $96=(($95+316)&4294967295); //@line 837 "xmlparse.c"
        HEAP[$96]=0; //@line 837 "xmlparse.c"
        var $97=HEAP[$parser_addr]; //@line 838 "xmlparse.c"
        var $98=(($97+320)&4294967295); //@line 838 "xmlparse.c"
        HEAP[$98]=0; //@line 838 "xmlparse.c"
        var $99=HEAP[$parser_addr]; //@line 839 "xmlparse.c"
        var $100=(($99+324)&4294967295); //@line 839 "xmlparse.c"
        HEAP[$100]=0; //@line 839 "xmlparse.c"
        var $101=HEAP[$parser_addr]; //@line 840 "xmlparse.c"
        var $102=(($101+336)&4294967295); //@line 840 "xmlparse.c"
        HEAP[$102]=0; //@line 840 "xmlparse.c"
        var $103=HEAP[$parser_addr]; //@line 841 "xmlparse.c"
        var $104=(($103+337)&4294967295); //@line 841 "xmlparse.c"
        HEAP[$104]=0; //@line 841 "xmlparse.c"
        var $105=HEAP[$parser_addr]; //@line 842 "xmlparse.c"
        var $106=(($105+392)&4294967295); //@line 842 "xmlparse.c"
        var $107=$106; //@line 842 "xmlparse.c"
        _llvm_memset_p0i8_i32($107, 0, 8, 1, 0); //@line 842 "xmlparse.c"
        var $108=HEAP[$parser_addr]; //@line 843 "xmlparse.c"
        var $109=(($108+268)&4294967295); //@line 843 "xmlparse.c"
        HEAP[$109]=0; //@line 843 "xmlparse.c"
        var $110=HEAP[$parser_addr]; //@line 844 "xmlparse.c"
        var $111=(($110+272)&4294967295); //@line 844 "xmlparse.c"
        HEAP[$111]=0; //@line 844 "xmlparse.c"
        var $112=HEAP[$parser_addr]; //@line 845 "xmlparse.c"
        var $113=(($112+276)&4294967295); //@line 845 "xmlparse.c"
        HEAP[$113]=0; //@line 845 "xmlparse.c"
        var $114=HEAP[$parser_addr]; //@line 846 "xmlparse.c"
        var $115=(($114+280)&4294967295); //@line 846 "xmlparse.c"
        HEAP[$115]=0; //@line 846 "xmlparse.c"
        var $116=HEAP[$parser_addr]; //@line 847 "xmlparse.c"
        var $117=(($116+284)&4294967295); //@line 847 "xmlparse.c"
        HEAP[$117]=0; //@line 847 "xmlparse.c"
        var $118=HEAP[$parser_addr]; //@line 848 "xmlparse.c"
        var $119=(($118+292)&4294967295); //@line 848 "xmlparse.c"
        HEAP[$119]=1; //@line 848 "xmlparse.c"
        var $120=HEAP[$parser_addr]; //@line 849 "xmlparse.c"
        var $121=(($120+296)&4294967295); //@line 849 "xmlparse.c"
        HEAP[$121]=0; //@line 849 "xmlparse.c"
        var $122=HEAP[$parser_addr]; //@line 850 "xmlparse.c"
        var $123=(($122+348)&4294967295); //@line 850 "xmlparse.c"
        HEAP[$123]=0; //@line 850 "xmlparse.c"
        var $124=HEAP[$parser_addr]; //@line 851 "xmlparse.c"
        var $125=(($124+356)&4294967295); //@line 851 "xmlparse.c"
        HEAP[$125]=0; //@line 851 "xmlparse.c"
        var $126=HEAP[$parser_addr]; //@line 852 "xmlparse.c"
        var $127=(($126+368)&4294967295); //@line 852 "xmlparse.c"
        HEAP[$127]=0; //@line 852 "xmlparse.c"
        var $128=HEAP[$parser_addr]; //@line 853 "xmlparse.c"
        var $129=(($128+236)&4294967295); //@line 853 "xmlparse.c"
        HEAP[$129]=0; //@line 853 "xmlparse.c"
        var $130=HEAP[$parser_addr]; //@line 854 "xmlparse.c"
        var $131=(($130+248)&4294967295); //@line 854 "xmlparse.c"
        HEAP[$131]=0; //@line 854 "xmlparse.c"
        var $132=HEAP[$parser_addr]; //@line 855 "xmlparse.c"
        var $133=(($132+240)&4294967295); //@line 855 "xmlparse.c"
        HEAP[$133]=0; //@line 855 "xmlparse.c"
        var $134=HEAP[$parser_addr]; //@line 856 "xmlparse.c"
        var $135=(($134+460)&4294967295); //@line 856 "xmlparse.c"
        HEAP[$135]=0; //@line 856 "xmlparse.c"
        var $136=HEAP[$parser_addr]; //@line 857 "xmlparse.c"
        var $137=(($136+464)&4294967295); //@line 857 "xmlparse.c"
        var $138=(($137)&4294967295); //@line 857 "xmlparse.c"
        HEAP[$138]=0; //@line 857 "xmlparse.c"
        __label__ = 4; break; //@line 863 "xmlparse.c"
      case 4: // $return
        STACKTOP = __stackBase__;
        return; //@line 863 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _moveToFreeBindingList($parser, $bindings) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $bindings_addr=__stackBase__+4;
        var $b=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$bindings_addr]=$bindings;
        __label__ = 2; break; //@line 869 "xmlparse.c"
      case 1: // $bb
        var $0=HEAP[$bindings_addr]; //@line 870 "xmlparse.c"
        HEAP[$b]=$0; //@line 870 "xmlparse.c"
        var $1=HEAP[$bindings_addr]; //@line 871 "xmlparse.c"
        var $2=(($1+4)&4294967295); //@line 871 "xmlparse.c"
        var $3=HEAP[$2]; //@line 871 "xmlparse.c"
        HEAP[$bindings_addr]=$3; //@line 871 "xmlparse.c"
        var $4=HEAP[$parser_addr]; //@line 872 "xmlparse.c"
        var $5=(($4+360)&4294967295); //@line 872 "xmlparse.c"
        var $6=HEAP[$5]; //@line 872 "xmlparse.c"
        var $7=HEAP[$b]; //@line 872 "xmlparse.c"
        var $8=(($7+4)&4294967295); //@line 872 "xmlparse.c"
        HEAP[$8]=$6; //@line 872 "xmlparse.c"
        var $9=HEAP[$parser_addr]; //@line 873 "xmlparse.c"
        var $10=(($9+360)&4294967295); //@line 873 "xmlparse.c"
        var $11=HEAP[$b]; //@line 873 "xmlparse.c"
        HEAP[$10]=$11; //@line 873 "xmlparse.c"
        __label__ = 2; break; //@line 873 "xmlparse.c"
      case 2: // $bb1
        var $12=HEAP[$bindings_addr]; //@line 869 "xmlparse.c"
        var $13=($12)!=0; //@line 869 "xmlparse.c"
        if ($13) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 869 "xmlparse.c"
      case 3: // $bb2
        __label__ = 4; break; //@line 875 "xmlparse.c"
      case 4: // $return
        STACKTOP = __stackBase__;
        return; //@line 875 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_ParserReset($parser, $encodingName) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $encodingName_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $tStk=__stackBase__+16;
        var $openEntityList=__stackBase__+20;
        var $tag=__stackBase__+24;
        var $openEntity=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$encodingName_addr]=$encodingName;
        var $1=HEAP[$parser_addr]; //@line 882 "xmlparse.c"
        var $2=(($1+460)&4294967295); //@line 882 "xmlparse.c"
        var $3=HEAP[$2]; //@line 882 "xmlparse.c"
        var $4=($3)!=0; //@line 882 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 882 "xmlparse.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 883 "xmlparse.c"
        __label__ = 11; break; //@line 883 "xmlparse.c"
      case 2: // $bb1
        var $5=HEAP[$parser_addr]; //@line 885 "xmlparse.c"
        var $6=(($5+348)&4294967295); //@line 885 "xmlparse.c"
        var $7=HEAP[$6]; //@line 885 "xmlparse.c"
        HEAP[$tStk]=$7; //@line 885 "xmlparse.c"
        __label__ = 4; break; //@line 885 "xmlparse.c"
      case 3: // $bb2
        var $8=HEAP[$tStk]; //@line 887 "xmlparse.c"
        HEAP[$tag]=$8; //@line 887 "xmlparse.c"
        var $9=HEAP[$tStk]; //@line 888 "xmlparse.c"
        var $10=(($9)&4294967295); //@line 888 "xmlparse.c"
        var $11=HEAP[$10]; //@line 888 "xmlparse.c"
        HEAP[$tStk]=$11; //@line 888 "xmlparse.c"
        var $12=HEAP[$parser_addr]; //@line 889 "xmlparse.c"
        var $13=(($12+352)&4294967295); //@line 889 "xmlparse.c"
        var $14=HEAP[$13]; //@line 889 "xmlparse.c"
        var $15=HEAP[$tag]; //@line 889 "xmlparse.c"
        var $16=(($15)&4294967295); //@line 889 "xmlparse.c"
        HEAP[$16]=$14; //@line 889 "xmlparse.c"
        var $17=HEAP[$tag]; //@line 890 "xmlparse.c"
        var $18=(($17+44)&4294967295); //@line 890 "xmlparse.c"
        var $19=HEAP[$18]; //@line 890 "xmlparse.c"
        var $20=HEAP[$parser_addr]; //@line 890 "xmlparse.c"
        _moveToFreeBindingList($20, $19); //@line 890 "xmlparse.c"
        var $21=HEAP[$tag]; //@line 891 "xmlparse.c"
        var $22=(($21+44)&4294967295); //@line 891 "xmlparse.c"
        HEAP[$22]=0; //@line 891 "xmlparse.c"
        var $23=HEAP[$parser_addr]; //@line 892 "xmlparse.c"
        var $24=(($23+352)&4294967295); //@line 892 "xmlparse.c"
        var $25=HEAP[$tag]; //@line 892 "xmlparse.c"
        HEAP[$24]=$25; //@line 892 "xmlparse.c"
        __label__ = 4; break; //@line 892 "xmlparse.c"
      case 4: // $bb3
        var $26=HEAP[$tStk]; //@line 886 "xmlparse.c"
        var $27=($26)!=0; //@line 886 "xmlparse.c"
        if ($27) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 886 "xmlparse.c"
      case 5: // $bb4
        var $28=HEAP[$parser_addr]; //@line 895 "xmlparse.c"
        var $29=(($28+284)&4294967295); //@line 895 "xmlparse.c"
        var $30=HEAP[$29]; //@line 895 "xmlparse.c"
        HEAP[$openEntityList]=$30; //@line 895 "xmlparse.c"
        __label__ = 7; break; //@line 895 "xmlparse.c"
      case 6: // $bb5
        var $31=HEAP[$openEntityList]; //@line 897 "xmlparse.c"
        HEAP[$openEntity]=$31; //@line 897 "xmlparse.c"
        var $32=HEAP[$openEntity]; //@line 898 "xmlparse.c"
        var $33=(($32+8)&4294967295); //@line 898 "xmlparse.c"
        var $34=HEAP[$33]; //@line 898 "xmlparse.c"
        HEAP[$openEntityList]=$34; //@line 898 "xmlparse.c"
        var $35=HEAP[$parser_addr]; //@line 899 "xmlparse.c"
        var $36=(($35+288)&4294967295); //@line 899 "xmlparse.c"
        var $37=HEAP[$36]; //@line 899 "xmlparse.c"
        var $38=HEAP[$openEntity]; //@line 899 "xmlparse.c"
        var $39=(($38+8)&4294967295); //@line 899 "xmlparse.c"
        HEAP[$39]=$37; //@line 899 "xmlparse.c"
        var $40=HEAP[$parser_addr]; //@line 900 "xmlparse.c"
        var $41=(($40+288)&4294967295); //@line 900 "xmlparse.c"
        var $42=HEAP[$openEntity]; //@line 900 "xmlparse.c"
        HEAP[$41]=$42; //@line 900 "xmlparse.c"
        __label__ = 7; break; //@line 900 "xmlparse.c"
      case 7: // $bb6
        var $43=HEAP[$openEntityList]; //@line 896 "xmlparse.c"
        var $44=($43)!=0; //@line 896 "xmlparse.c"
        if ($44) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 896 "xmlparse.c"
      case 8: // $bb7
        var $45=HEAP[$parser_addr]; //@line 902 "xmlparse.c"
        var $46=(($45+356)&4294967295); //@line 902 "xmlparse.c"
        var $47=HEAP[$46]; //@line 902 "xmlparse.c"
        var $48=HEAP[$parser_addr]; //@line 902 "xmlparse.c"
        _moveToFreeBindingList($48, $47); //@line 902 "xmlparse.c"
        var $49=HEAP[$parser_addr]; //@line 903 "xmlparse.c"
        var $50=(($49+12)&4294967295); //@line 903 "xmlparse.c"
        var $51=(($50+8)&4294967295); //@line 903 "xmlparse.c"
        var $52=HEAP[$51]; //@line 903 "xmlparse.c"
        var $53=HEAP[$parser_addr]; //@line 903 "xmlparse.c"
        var $54=(($53+236)&4294967295); //@line 903 "xmlparse.c"
        var $55=HEAP[$54]; //@line 903 "xmlparse.c"
        FUNCTION_TABLE[$52]($55); //@line 903 "xmlparse.c"
        var $56=HEAP[$parser_addr]; //@line 904 "xmlparse.c"
        var $57=(($56+248)&4294967295); //@line 904 "xmlparse.c"
        var $58=HEAP[$57]; //@line 904 "xmlparse.c"
        var $59=($58)!=0; //@line 904 "xmlparse.c"
        if ($59) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 904 "xmlparse.c"
      case 9: // $bb8
        var $60=HEAP[$parser_addr]; //@line 905 "xmlparse.c"
        var $61=(($60+248)&4294967295); //@line 905 "xmlparse.c"
        var $62=HEAP[$61]; //@line 905 "xmlparse.c"
        var $63=HEAP[$parser_addr]; //@line 905 "xmlparse.c"
        var $64=(($63+240)&4294967295); //@line 905 "xmlparse.c"
        var $65=HEAP[$64]; //@line 905 "xmlparse.c"
        FUNCTION_TABLE[$62]($65); //@line 905 "xmlparse.c"
        __label__ = 10; break; //@line 905 "xmlparse.c"
      case 10: // $bb9
        var $66=HEAP[$parser_addr]; //@line 906 "xmlparse.c"
        var $67=(($66+400)&4294967295); //@line 906 "xmlparse.c"
        _poolClear($67); //@line 906 "xmlparse.c"
        var $68=HEAP[$parser_addr]; //@line 907 "xmlparse.c"
        var $69=(($68+424)&4294967295); //@line 907 "xmlparse.c"
        _poolClear($69); //@line 907 "xmlparse.c"
        var $70=HEAP[$parser_addr]; //@line 908 "xmlparse.c"
        var $71=HEAP[$encodingName_addr]; //@line 908 "xmlparse.c"
        _parserInit($70, $71); //@line 908 "xmlparse.c"
        var $72=HEAP[$parser_addr]; //@line 909 "xmlparse.c"
        var $73=(($72+12)&4294967295); //@line 909 "xmlparse.c"
        var $74=HEAP[$parser_addr]; //@line 909 "xmlparse.c"
        var $75=(($74+340)&4294967295); //@line 909 "xmlparse.c"
        var $76=HEAP[$75]; //@line 909 "xmlparse.c"
        _dtdReset($76, $73); //@line 909 "xmlparse.c"
        var $77=HEAP[$parser_addr]; //@line 910 "xmlparse.c"
        var $78=_setContext($77, ((_implicitContext)&4294967295)); //@line 910 "xmlparse.c"
        var $79=unSign(($78), 8, 0); //@line 910 "xmlparse.c"
        HEAP[$0]=$79; //@line 910 "xmlparse.c"
        __label__ = 11; break; //@line 910 "xmlparse.c"
      case 11: // $bb10
        var $80=HEAP[$0]; //@line 883 "xmlparse.c"
        HEAP[$retval]=$80; //@line 883 "xmlparse.c"
        __label__ = 12; break; //@line 883 "xmlparse.c"
      case 12: // $return
        var $retval11=HEAP[$retval]; //@line 883 "xmlparse.c"
        var $retval1112=((($retval11)) & 255); //@line 883 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval1112; //@line 883 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetEncoding($parser, $encodingName) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $encodingName_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$encodingName_addr]=$encodingName;
        var $1=HEAP[$parser_addr]; //@line 920 "xmlparse.c"
        var $2=(($1+464)&4294967295); //@line 920 "xmlparse.c"
        var $3=(($2)&4294967295); //@line 920 "xmlparse.c"
        var $4=HEAP[$3]; //@line 920 "xmlparse.c"
        var $5=((($4))|0)==1; //@line 920 "xmlparse.c"
        if ($5) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 920 "xmlparse.c"
      case 1: // $bb
        var $6=HEAP[$parser_addr]; //@line 920 "xmlparse.c"
        var $7=(($6+464)&4294967295); //@line 920 "xmlparse.c"
        var $8=(($7)&4294967295); //@line 920 "xmlparse.c"
        var $9=HEAP[$8]; //@line 920 "xmlparse.c"
        var $10=((($9))|0)==3; //@line 920 "xmlparse.c"
        if ($10) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 920 "xmlparse.c"
      case 2: // $bb1
        HEAP[$0]=0; //@line 921 "xmlparse.c"
        __label__ = 8; break; //@line 921 "xmlparse.c"
      case 3: // $bb2
        var $11=HEAP[$encodingName_addr]; //@line 922 "xmlparse.c"
        var $12=($11)==0; //@line 922 "xmlparse.c"
        if ($12) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 922 "xmlparse.c"
      case 4: // $bb3
        var $13=HEAP[$parser_addr]; //@line 923 "xmlparse.c"
        var $14=(($13+228)&4294967295); //@line 923 "xmlparse.c"
        HEAP[$14]=0; //@line 923 "xmlparse.c"
        __label__ = 7; break; //@line 923 "xmlparse.c"
      case 5: // $bb4
        var $15=HEAP[$parser_addr]; //@line 925 "xmlparse.c"
        var $16=(($15+400)&4294967295); //@line 925 "xmlparse.c"
        var $17=HEAP[$encodingName_addr]; //@line 925 "xmlparse.c"
        var $18=_poolCopyString($16, $17); //@line 925 "xmlparse.c"
        var $19=HEAP[$parser_addr]; //@line 925 "xmlparse.c"
        var $20=(($19+228)&4294967295); //@line 925 "xmlparse.c"
        HEAP[$20]=$18; //@line 925 "xmlparse.c"
        var $21=HEAP[$parser_addr]; //@line 926 "xmlparse.c"
        var $22=(($21+228)&4294967295); //@line 926 "xmlparse.c"
        var $23=HEAP[$22]; //@line 926 "xmlparse.c"
        var $24=($23)==0; //@line 926 "xmlparse.c"
        if ($24) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 926 "xmlparse.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 927 "xmlparse.c"
        __label__ = 8; break; //@line 927 "xmlparse.c"
      case 7: // $bb6
        HEAP[$0]=1; //@line 929 "xmlparse.c"
        __label__ = 8; break; //@line 929 "xmlparse.c"
      case 8: // $bb7
        var $25=HEAP[$0]; //@line 921 "xmlparse.c"
        HEAP[$retval]=$25; //@line 921 "xmlparse.c"
        __label__ = 9; break; //@line 921 "xmlparse.c"
      case 9: // $return
        var $retval8=HEAP[$retval]; //@line 921 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval8; //@line 921 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_ExternalEntityParserCreate($oldParser, $context, $encodingName) {
    var __stackBase__  = STACKTOP; STACKTOP += 132; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 132);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $oldParser_addr=__stackBase__;
        var $context_addr=__stackBase__+4;
        var $encodingName_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $parser=__stackBase__+20;
        var $newDtd=__stackBase__+24;
        var $oldDtd=__stackBase__+28;
        var $oldStartElementHandler=__stackBase__+32;
        var $oldEndElementHandler=__stackBase__+36;
        var $oldCharacterDataHandler=__stackBase__+40;
        var $oldProcessingInstructionHandler=__stackBase__+44;
        var $oldCommentHandler=__stackBase__+48;
        var $oldStartCdataSectionHandler=__stackBase__+52;
        var $oldEndCdataSectionHandler=__stackBase__+56;
        var $oldDefaultHandler=__stackBase__+60;
        var $oldUnparsedEntityDeclHandler=__stackBase__+64;
        var $oldNotationDeclHandler=__stackBase__+68;
        var $oldStartNamespaceDeclHandler=__stackBase__+72;
        var $oldEndNamespaceDeclHandler=__stackBase__+76;
        var $oldNotStandaloneHandler=__stackBase__+80;
        var $oldExternalEntityRefHandler=__stackBase__+84;
        var $oldSkippedEntityHandler=__stackBase__+88;
        var $oldUnknownEncodingHandler=__stackBase__+92;
        var $oldElementDeclHandler=__stackBase__+96;
        var $oldAttlistDeclHandler=__stackBase__+100;
        var $oldEntityDeclHandler=__stackBase__+104;
        var $oldXmlDeclHandler=__stackBase__+108;
        var $oldDeclElementType=__stackBase__+112;
        var $oldUserData=__stackBase__+116;
        var $oldHandlerArg=__stackBase__+120;
        var $oldDefaultExpandInternalEntities=__stackBase__+124;
        var $oldExternalEntityRefHandlerArg=__stackBase__+125;
        var $oldns_triplets=__stackBase__+129;
        var $tmp=__stackBase__+130;
        var $_alloca_point_=0;
        HEAP[$oldParser_addr]=$oldParser;
        HEAP[$context_addr]=$context;
        HEAP[$encodingName_addr]=$encodingName;
        var $1=HEAP[$oldParser_addr]; //@line 937 "xmlparse.c"
        HEAP[$parser]=$1; //@line 937 "xmlparse.c"
        HEAP[$newDtd]=0; //@line 938 "xmlparse.c"
        var $2=HEAP[$parser]; //@line 939 "xmlparse.c"
        var $3=(($2+340)&4294967295); //@line 939 "xmlparse.c"
        var $4=HEAP[$3]; //@line 939 "xmlparse.c"
        HEAP[$oldDtd]=$4; //@line 939 "xmlparse.c"
        var $5=HEAP[$parser]; //@line 940 "xmlparse.c"
        var $6=(($5+52)&4294967295); //@line 940 "xmlparse.c"
        var $7=HEAP[$6]; //@line 940 "xmlparse.c"
        HEAP[$oldStartElementHandler]=$7; //@line 940 "xmlparse.c"
        var $8=HEAP[$parser]; //@line 941 "xmlparse.c"
        var $9=(($8+56)&4294967295); //@line 941 "xmlparse.c"
        var $10=HEAP[$9]; //@line 941 "xmlparse.c"
        HEAP[$oldEndElementHandler]=$10; //@line 941 "xmlparse.c"
        var $11=HEAP[$parser]; //@line 942 "xmlparse.c"
        var $12=(($11+60)&4294967295); //@line 942 "xmlparse.c"
        var $13=HEAP[$12]; //@line 942 "xmlparse.c"
        HEAP[$oldCharacterDataHandler]=$13; //@line 942 "xmlparse.c"
        var $14=HEAP[$parser]; //@line 944 "xmlparse.c"
        var $15=(($14+64)&4294967295); //@line 944 "xmlparse.c"
        var $16=HEAP[$15]; //@line 944 "xmlparse.c"
        HEAP[$oldProcessingInstructionHandler]=$16; //@line 944 "xmlparse.c"
        var $17=HEAP[$parser]; //@line 945 "xmlparse.c"
        var $18=(($17+68)&4294967295); //@line 945 "xmlparse.c"
        var $19=HEAP[$18]; //@line 945 "xmlparse.c"
        HEAP[$oldCommentHandler]=$19; //@line 945 "xmlparse.c"
        var $20=HEAP[$parser]; //@line 947 "xmlparse.c"
        var $21=(($20+72)&4294967295); //@line 947 "xmlparse.c"
        var $22=HEAP[$21]; //@line 947 "xmlparse.c"
        HEAP[$oldStartCdataSectionHandler]=$22; //@line 947 "xmlparse.c"
        var $23=HEAP[$parser]; //@line 949 "xmlparse.c"
        var $24=(($23+76)&4294967295); //@line 949 "xmlparse.c"
        var $25=HEAP[$24]; //@line 949 "xmlparse.c"
        HEAP[$oldEndCdataSectionHandler]=$25; //@line 949 "xmlparse.c"
        var $26=HEAP[$parser]; //@line 950 "xmlparse.c"
        var $27=(($26+80)&4294967295); //@line 950 "xmlparse.c"
        var $28=HEAP[$27]; //@line 950 "xmlparse.c"
        HEAP[$oldDefaultHandler]=$28; //@line 950 "xmlparse.c"
        var $29=HEAP[$parser]; //@line 952 "xmlparse.c"
        var $30=(($29+92)&4294967295); //@line 952 "xmlparse.c"
        var $31=HEAP[$30]; //@line 952 "xmlparse.c"
        HEAP[$oldUnparsedEntityDeclHandler]=$31; //@line 952 "xmlparse.c"
        var $32=HEAP[$parser]; //@line 953 "xmlparse.c"
        var $33=(($32+96)&4294967295); //@line 953 "xmlparse.c"
        var $34=HEAP[$33]; //@line 953 "xmlparse.c"
        HEAP[$oldNotationDeclHandler]=$34; //@line 953 "xmlparse.c"
        var $35=HEAP[$parser]; //@line 955 "xmlparse.c"
        var $36=(($35+100)&4294967295); //@line 955 "xmlparse.c"
        var $37=HEAP[$36]; //@line 955 "xmlparse.c"
        HEAP[$oldStartNamespaceDeclHandler]=$37; //@line 955 "xmlparse.c"
        var $38=HEAP[$parser]; //@line 957 "xmlparse.c"
        var $39=(($38+104)&4294967295); //@line 957 "xmlparse.c"
        var $40=HEAP[$39]; //@line 957 "xmlparse.c"
        HEAP[$oldEndNamespaceDeclHandler]=$40; //@line 957 "xmlparse.c"
        var $41=HEAP[$parser]; //@line 958 "xmlparse.c"
        var $42=(($41+108)&4294967295); //@line 958 "xmlparse.c"
        var $43=HEAP[$42]; //@line 958 "xmlparse.c"
        HEAP[$oldNotStandaloneHandler]=$43; //@line 958 "xmlparse.c"
        var $44=HEAP[$parser]; //@line 960 "xmlparse.c"
        var $45=(($44+112)&4294967295); //@line 960 "xmlparse.c"
        var $46=HEAP[$45]; //@line 960 "xmlparse.c"
        HEAP[$oldExternalEntityRefHandler]=$46; //@line 960 "xmlparse.c"
        var $47=HEAP[$parser]; //@line 961 "xmlparse.c"
        var $48=(($47+120)&4294967295); //@line 961 "xmlparse.c"
        var $49=HEAP[$48]; //@line 961 "xmlparse.c"
        HEAP[$oldSkippedEntityHandler]=$49; //@line 961 "xmlparse.c"
        var $50=HEAP[$parser]; //@line 963 "xmlparse.c"
        var $51=(($50+124)&4294967295); //@line 963 "xmlparse.c"
        var $52=HEAP[$51]; //@line 963 "xmlparse.c"
        HEAP[$oldUnknownEncodingHandler]=$52; //@line 963 "xmlparse.c"
        var $53=HEAP[$parser]; //@line 964 "xmlparse.c"
        var $54=(($53+128)&4294967295); //@line 964 "xmlparse.c"
        var $55=HEAP[$54]; //@line 964 "xmlparse.c"
        HEAP[$oldElementDeclHandler]=$55; //@line 964 "xmlparse.c"
        var $56=HEAP[$parser]; //@line 965 "xmlparse.c"
        var $57=(($56+132)&4294967295); //@line 965 "xmlparse.c"
        var $58=HEAP[$57]; //@line 965 "xmlparse.c"
        HEAP[$oldAttlistDeclHandler]=$58; //@line 965 "xmlparse.c"
        var $59=HEAP[$parser]; //@line 966 "xmlparse.c"
        var $60=(($59+136)&4294967295); //@line 966 "xmlparse.c"
        var $61=HEAP[$60]; //@line 966 "xmlparse.c"
        HEAP[$oldEntityDeclHandler]=$61; //@line 966 "xmlparse.c"
        var $62=HEAP[$parser]; //@line 967 "xmlparse.c"
        var $63=(($62+140)&4294967295); //@line 967 "xmlparse.c"
        var $64=HEAP[$63]; //@line 967 "xmlparse.c"
        HEAP[$oldXmlDeclHandler]=$64; //@line 967 "xmlparse.c"
        var $65=HEAP[$parser]; //@line 968 "xmlparse.c"
        var $66=(($65+328)&4294967295); //@line 968 "xmlparse.c"
        var $67=HEAP[$66]; //@line 968 "xmlparse.c"
        HEAP[$oldDeclElementType]=$67; //@line 968 "xmlparse.c"
        var $68=HEAP[$parser]; //@line 970 "xmlparse.c"
        var $69=(($68)&4294967295); //@line 970 "xmlparse.c"
        var $70=HEAP[$69]; //@line 970 "xmlparse.c"
        HEAP[$oldUserData]=$70; //@line 970 "xmlparse.c"
        var $71=HEAP[$parser]; //@line 971 "xmlparse.c"
        var $72=(($71+4)&4294967295); //@line 971 "xmlparse.c"
        var $73=HEAP[$72]; //@line 971 "xmlparse.c"
        HEAP[$oldHandlerArg]=$73; //@line 971 "xmlparse.c"
        var $74=HEAP[$parser]; //@line 972 "xmlparse.c"
        var $75=(($74+292)&4294967295); //@line 972 "xmlparse.c"
        var $76=HEAP[$75]; //@line 972 "xmlparse.c"
        HEAP[$oldDefaultExpandInternalEntities]=$76; //@line 972 "xmlparse.c"
        var $77=HEAP[$parser]; //@line 973 "xmlparse.c"
        var $78=(($77+116)&4294967295); //@line 973 "xmlparse.c"
        var $79=HEAP[$78]; //@line 973 "xmlparse.c"
        HEAP[$oldExternalEntityRefHandlerArg]=$79; //@line 973 "xmlparse.c"
        var $80=HEAP[$parser]; //@line 978 "xmlparse.c"
        var $81=(($80+233)&4294967295); //@line 978 "xmlparse.c"
        var $82=HEAP[$81]; //@line 978 "xmlparse.c"
        HEAP[$oldns_triplets]=$82; //@line 978 "xmlparse.c"
        var $83=HEAP[$parser]; //@line 990 "xmlparse.c"
        var $84=(($83+232)&4294967295); //@line 990 "xmlparse.c"
        var $85=HEAP[$84]; //@line 990 "xmlparse.c"
        var $86=reSign(($85), 8, 0)!=0; //@line 990 "xmlparse.c"
        if ($86) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 990 "xmlparse.c"
      case 1: // $bb
        var $87=HEAP[$parser]; //@line 992 "xmlparse.c"
        var $88=(($87+456)&4294967295); //@line 992 "xmlparse.c"
        var $89=HEAP[$88]; //@line 992 "xmlparse.c"
        var $90=(($tmp)&4294967295); //@line 992 "xmlparse.c"
        HEAP[$90]=$89; //@line 992 "xmlparse.c"
        var $91=HEAP[$parser]; //@line 993 "xmlparse.c"
        var $92=(($91+12)&4294967295); //@line 993 "xmlparse.c"
        var $93=HEAP[$encodingName_addr]; //@line 993 "xmlparse.c"
        var $tmp1=$tmp; //@line 993 "xmlparse.c"
        var $94=HEAP[$newDtd]; //@line 993 "xmlparse.c"
        var $95=_parserCreate($93, $92, $tmp1, $94); //@line 993 "xmlparse.c"
        HEAP[$parser]=$95; //@line 993 "xmlparse.c"
        __label__ = 3; break; //@line 993 "xmlparse.c"
      case 2: // $bb2
        var $96=HEAP[$parser]; //@line 996 "xmlparse.c"
        var $97=(($96+12)&4294967295); //@line 996 "xmlparse.c"
        var $98=HEAP[$encodingName_addr]; //@line 996 "xmlparse.c"
        var $99=HEAP[$newDtd]; //@line 996 "xmlparse.c"
        var $100=_parserCreate($98, $97, 0, $99); //@line 996 "xmlparse.c"
        HEAP[$parser]=$100; //@line 996 "xmlparse.c"
        __label__ = 3; break; //@line 996 "xmlparse.c"
      case 3: // $bb3
        var $101=HEAP[$parser]; //@line 999 "xmlparse.c"
        var $102=($101)==0; //@line 999 "xmlparse.c"
        if ($102) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 999 "xmlparse.c"
      case 4: // $bb4
        HEAP[$0]=0; //@line 1000 "xmlparse.c"
        __label__ = 14; break; //@line 1000 "xmlparse.c"
      case 5: // $bb5
        var $103=HEAP[$parser]; //@line 1002 "xmlparse.c"
        var $104=(($103+52)&4294967295); //@line 1002 "xmlparse.c"
        var $105=HEAP[$oldStartElementHandler]; //@line 1002 "xmlparse.c"
        HEAP[$104]=$105; //@line 1002 "xmlparse.c"
        var $106=HEAP[$parser]; //@line 1003 "xmlparse.c"
        var $107=(($106+56)&4294967295); //@line 1003 "xmlparse.c"
        var $108=HEAP[$oldEndElementHandler]; //@line 1003 "xmlparse.c"
        HEAP[$107]=$108; //@line 1003 "xmlparse.c"
        var $109=HEAP[$parser]; //@line 1004 "xmlparse.c"
        var $110=(($109+60)&4294967295); //@line 1004 "xmlparse.c"
        var $111=HEAP[$oldCharacterDataHandler]; //@line 1004 "xmlparse.c"
        HEAP[$110]=$111; //@line 1004 "xmlparse.c"
        var $112=HEAP[$parser]; //@line 1005 "xmlparse.c"
        var $113=(($112+64)&4294967295); //@line 1005 "xmlparse.c"
        var $114=HEAP[$oldProcessingInstructionHandler]; //@line 1005 "xmlparse.c"
        HEAP[$113]=$114; //@line 1005 "xmlparse.c"
        var $115=HEAP[$parser]; //@line 1006 "xmlparse.c"
        var $116=(($115+68)&4294967295); //@line 1006 "xmlparse.c"
        var $117=HEAP[$oldCommentHandler]; //@line 1006 "xmlparse.c"
        HEAP[$116]=$117; //@line 1006 "xmlparse.c"
        var $118=HEAP[$parser]; //@line 1007 "xmlparse.c"
        var $119=(($118+72)&4294967295); //@line 1007 "xmlparse.c"
        var $120=HEAP[$oldStartCdataSectionHandler]; //@line 1007 "xmlparse.c"
        HEAP[$119]=$120; //@line 1007 "xmlparse.c"
        var $121=HEAP[$parser]; //@line 1008 "xmlparse.c"
        var $122=(($121+76)&4294967295); //@line 1008 "xmlparse.c"
        var $123=HEAP[$oldEndCdataSectionHandler]; //@line 1008 "xmlparse.c"
        HEAP[$122]=$123; //@line 1008 "xmlparse.c"
        var $124=HEAP[$parser]; //@line 1009 "xmlparse.c"
        var $125=(($124+80)&4294967295); //@line 1009 "xmlparse.c"
        var $126=HEAP[$oldDefaultHandler]; //@line 1009 "xmlparse.c"
        HEAP[$125]=$126; //@line 1009 "xmlparse.c"
        var $127=HEAP[$parser]; //@line 1010 "xmlparse.c"
        var $128=(($127+92)&4294967295); //@line 1010 "xmlparse.c"
        var $129=HEAP[$oldUnparsedEntityDeclHandler]; //@line 1010 "xmlparse.c"
        HEAP[$128]=$129; //@line 1010 "xmlparse.c"
        var $130=HEAP[$parser]; //@line 1011 "xmlparse.c"
        var $131=(($130+96)&4294967295); //@line 1011 "xmlparse.c"
        var $132=HEAP[$oldNotationDeclHandler]; //@line 1011 "xmlparse.c"
        HEAP[$131]=$132; //@line 1011 "xmlparse.c"
        var $133=HEAP[$parser]; //@line 1012 "xmlparse.c"
        var $134=(($133+100)&4294967295); //@line 1012 "xmlparse.c"
        var $135=HEAP[$oldStartNamespaceDeclHandler]; //@line 1012 "xmlparse.c"
        HEAP[$134]=$135; //@line 1012 "xmlparse.c"
        var $136=HEAP[$parser]; //@line 1013 "xmlparse.c"
        var $137=(($136+104)&4294967295); //@line 1013 "xmlparse.c"
        var $138=HEAP[$oldEndNamespaceDeclHandler]; //@line 1013 "xmlparse.c"
        HEAP[$137]=$138; //@line 1013 "xmlparse.c"
        var $139=HEAP[$parser]; //@line 1014 "xmlparse.c"
        var $140=(($139+108)&4294967295); //@line 1014 "xmlparse.c"
        var $141=HEAP[$oldNotStandaloneHandler]; //@line 1014 "xmlparse.c"
        HEAP[$140]=$141; //@line 1014 "xmlparse.c"
        var $142=HEAP[$parser]; //@line 1015 "xmlparse.c"
        var $143=(($142+112)&4294967295); //@line 1015 "xmlparse.c"
        var $144=HEAP[$oldExternalEntityRefHandler]; //@line 1015 "xmlparse.c"
        HEAP[$143]=$144; //@line 1015 "xmlparse.c"
        var $145=HEAP[$parser]; //@line 1016 "xmlparse.c"
        var $146=(($145+120)&4294967295); //@line 1016 "xmlparse.c"
        var $147=HEAP[$oldSkippedEntityHandler]; //@line 1016 "xmlparse.c"
        HEAP[$146]=$147; //@line 1016 "xmlparse.c"
        var $148=HEAP[$parser]; //@line 1017 "xmlparse.c"
        var $149=(($148+124)&4294967295); //@line 1017 "xmlparse.c"
        var $150=HEAP[$oldUnknownEncodingHandler]; //@line 1017 "xmlparse.c"
        HEAP[$149]=$150; //@line 1017 "xmlparse.c"
        var $151=HEAP[$parser]; //@line 1018 "xmlparse.c"
        var $152=(($151+128)&4294967295); //@line 1018 "xmlparse.c"
        var $153=HEAP[$oldElementDeclHandler]; //@line 1018 "xmlparse.c"
        HEAP[$152]=$153; //@line 1018 "xmlparse.c"
        var $154=HEAP[$parser]; //@line 1019 "xmlparse.c"
        var $155=(($154+132)&4294967295); //@line 1019 "xmlparse.c"
        var $156=HEAP[$oldAttlistDeclHandler]; //@line 1019 "xmlparse.c"
        HEAP[$155]=$156; //@line 1019 "xmlparse.c"
        var $157=HEAP[$parser]; //@line 1020 "xmlparse.c"
        var $158=(($157+136)&4294967295); //@line 1020 "xmlparse.c"
        var $159=HEAP[$oldEntityDeclHandler]; //@line 1020 "xmlparse.c"
        HEAP[$158]=$159; //@line 1020 "xmlparse.c"
        var $160=HEAP[$parser]; //@line 1021 "xmlparse.c"
        var $161=(($160+140)&4294967295); //@line 1021 "xmlparse.c"
        var $162=HEAP[$oldXmlDeclHandler]; //@line 1021 "xmlparse.c"
        HEAP[$161]=$162; //@line 1021 "xmlparse.c"
        var $163=HEAP[$parser]; //@line 1022 "xmlparse.c"
        var $164=(($163+328)&4294967295); //@line 1022 "xmlparse.c"
        var $165=HEAP[$oldDeclElementType]; //@line 1022 "xmlparse.c"
        HEAP[$164]=$165; //@line 1022 "xmlparse.c"
        var $166=HEAP[$parser]; //@line 1023 "xmlparse.c"
        var $167=(($166)&4294967295); //@line 1023 "xmlparse.c"
        var $168=HEAP[$oldUserData]; //@line 1023 "xmlparse.c"
        HEAP[$167]=$168; //@line 1023 "xmlparse.c"
        var $169=HEAP[$oldUserData]; //@line 1024 "xmlparse.c"
        var $170=HEAP[$oldHandlerArg]; //@line 1024 "xmlparse.c"
        var $171=($169)==($170); //@line 1024 "xmlparse.c"
        if ($171) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1024 "xmlparse.c"
      case 6: // $bb6
        var $172=HEAP[$parser]; //@line 1025 "xmlparse.c"
        var $173=(($172)&4294967295); //@line 1025 "xmlparse.c"
        var $174=HEAP[$173]; //@line 1025 "xmlparse.c"
        var $175=HEAP[$parser]; //@line 1025 "xmlparse.c"
        var $176=(($175+4)&4294967295); //@line 1025 "xmlparse.c"
        HEAP[$176]=$174; //@line 1025 "xmlparse.c"
        __label__ = 8; break; //@line 1025 "xmlparse.c"
      case 7: // $bb7
        var $177=HEAP[$parser]; //@line 1027 "xmlparse.c"
        var $178=(($177+4)&4294967295); //@line 1027 "xmlparse.c"
        var $179=HEAP[$parser]; //@line 1027 "xmlparse.c"
        var $180=$179; //@line 1027 "xmlparse.c"
        HEAP[$178]=$180; //@line 1027 "xmlparse.c"
        __label__ = 8; break; //@line 1027 "xmlparse.c"
      case 8: // $bb8
        var $181=HEAP[$oldExternalEntityRefHandlerArg]; //@line 1028 "xmlparse.c"
        var $182=HEAP[$oldParser_addr]; //@line 1028 "xmlparse.c"
        var $183=($181)!=($182); //@line 1028 "xmlparse.c"
        if ($183) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1028 "xmlparse.c"
      case 9: // $bb9
        var $184=HEAP[$parser]; //@line 1029 "xmlparse.c"
        var $185=(($184+116)&4294967295); //@line 1029 "xmlparse.c"
        var $186=HEAP[$oldExternalEntityRefHandlerArg]; //@line 1029 "xmlparse.c"
        HEAP[$185]=$186; //@line 1029 "xmlparse.c"
        __label__ = 10; break; //@line 1029 "xmlparse.c"
      case 10: // $bb10
        var $187=HEAP[$parser]; //@line 1030 "xmlparse.c"
        var $188=(($187+292)&4294967295); //@line 1030 "xmlparse.c"
        var $189=HEAP[$oldDefaultExpandInternalEntities]; //@line 1030 "xmlparse.c"
        HEAP[$188]=$189; //@line 1030 "xmlparse.c"
        var $190=HEAP[$parser]; //@line 1031 "xmlparse.c"
        var $191=(($190+233)&4294967295); //@line 1031 "xmlparse.c"
        var $192=HEAP[$oldns_triplets]; //@line 1031 "xmlparse.c"
        HEAP[$191]=$192; //@line 1031 "xmlparse.c"
        var $193=HEAP[$parser]; //@line 1032 "xmlparse.c"
        var $194=(($193+460)&4294967295); //@line 1032 "xmlparse.c"
        var $195=HEAP[$oldParser_addr]; //@line 1032 "xmlparse.c"
        HEAP[$194]=$195; //@line 1032 "xmlparse.c"
        var $196=HEAP[$parser]; //@line 1038 "xmlparse.c"
        var $197=(($196+12)&4294967295); //@line 1038 "xmlparse.c"
        var $198=HEAP[$parser]; //@line 1038 "xmlparse.c"
        var $199=(($198+340)&4294967295); //@line 1038 "xmlparse.c"
        var $200=HEAP[$199]; //@line 1038 "xmlparse.c"
        var $201=HEAP[$oldDtd]; //@line 1038 "xmlparse.c"
        var $202=_dtdCopy($200, $201, $197); //@line 1038 "xmlparse.c"
        var $203=((($202))|0)==0; //@line 1038 "xmlparse.c"
        if ($203) { __label__ = 12; break; } else { __label__ = 11; break; } //@line 1038 "xmlparse.c"
      case 11: // $bb11
        var $204=HEAP[$parser]; //@line 1038 "xmlparse.c"
        var $205=HEAP[$context_addr]; //@line 1038 "xmlparse.c"
        var $206=_setContext($204, $205); //@line 1038 "xmlparse.c"
        var $207=reSign(($206), 8, 0)==0; //@line 1038 "xmlparse.c"
        if ($207) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1038 "xmlparse.c"
      case 12: // $bb12
        var $208=HEAP[$parser]; //@line 1040 "xmlparse.c"
        _PyExpat_XML_ParserFree($208); //@line 1040 "xmlparse.c"
        HEAP[$0]=0; //@line 1041 "xmlparse.c"
        __label__ = 14; break; //@line 1041 "xmlparse.c"
      case 13: // $bb13
        var $209=HEAP[$parser]; //@line 1043 "xmlparse.c"
        var $210=(($209+264)&4294967295); //@line 1043 "xmlparse.c"
        HEAP[$210]=(FUNCTION_TABLE_OFFSET + 50); //@line 1043 "xmlparse.c"
        var $211=HEAP[$parser]; //@line 1059 "xmlparse.c"
        HEAP[$0]=$211; //@line 1059 "xmlparse.c"
        __label__ = 14; break; //@line 1059 "xmlparse.c"
      case 14: // $bb14
        var $212=HEAP[$0]; //@line 1000 "xmlparse.c"
        HEAP[$retval]=$212; //@line 1000 "xmlparse.c"
        __label__ = 15; break; //@line 1000 "xmlparse.c"
      case 15: // $return
        var $retval15=HEAP[$retval]; //@line 1000 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval15; //@line 1000 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _destroyBindings($bindings, $parser) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $bindings_addr=__stackBase__;
        var $parser_addr=__stackBase__+4;
        var $b=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$bindings_addr]=$bindings;
        HEAP[$parser_addr]=$parser;
        __label__ = 1; break; //@line 1064 "xmlparse.c"
      case 1: // $bb
        var $0=HEAP[$bindings_addr]; //@line 1066 "xmlparse.c"
        HEAP[$b]=$0; //@line 1066 "xmlparse.c"
        var $1=HEAP[$b]; //@line 1067 "xmlparse.c"
        var $2=($1)==0; //@line 1067 "xmlparse.c"
        if ($2) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 1067 "xmlparse.c"
      case 2: // $bb1
        var $3=HEAP[$b]; //@line 1069 "xmlparse.c"
        var $4=(($3+4)&4294967295); //@line 1069 "xmlparse.c"
        var $5=HEAP[$4]; //@line 1069 "xmlparse.c"
        HEAP[$bindings_addr]=$5; //@line 1069 "xmlparse.c"
        var $6=HEAP[$parser_addr]; //@line 1070 "xmlparse.c"
        var $7=(($6+12)&4294967295); //@line 1070 "xmlparse.c"
        var $8=(($7+8)&4294967295); //@line 1070 "xmlparse.c"
        var $9=HEAP[$8]; //@line 1070 "xmlparse.c"
        var $10=HEAP[$b]; //@line 1070 "xmlparse.c"
        var $11=(($10+16)&4294967295); //@line 1070 "xmlparse.c"
        var $12=HEAP[$11]; //@line 1070 "xmlparse.c"
        FUNCTION_TABLE[$9]($12); //@line 1070 "xmlparse.c"
        var $13=HEAP[$parser_addr]; //@line 1071 "xmlparse.c"
        var $14=(($13+12)&4294967295); //@line 1071 "xmlparse.c"
        var $15=(($14+8)&4294967295); //@line 1071 "xmlparse.c"
        var $16=HEAP[$15]; //@line 1071 "xmlparse.c"
        var $17=HEAP[$b]; //@line 1071 "xmlparse.c"
        var $18=$17; //@line 1071 "xmlparse.c"
        FUNCTION_TABLE[$16]($18); //@line 1071 "xmlparse.c"
        __label__ = 1; break; //@line 1071 "xmlparse.c"
      case 3: // $bb2
        __label__ = 4; break; //@line 1073 "xmlparse.c"
      case 4: // $return
        STACKTOP = __stackBase__;
        return; //@line 1073 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_ParserFree($parser) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $tagList=__stackBase__+4;
        var $entityList=__stackBase__+8;
        var $p=__stackBase__+12;
        var $openEntity=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        var $0=HEAP[$parser_addr]; //@line 1080 "xmlparse.c"
        var $1=($0)==0; //@line 1080 "xmlparse.c"
        if ($1) { __label__ = 16; break; } else { __label__ = 1; break; } //@line 1080 "xmlparse.c"
      case 1: // $bb
        var $2=HEAP[$parser_addr]; //@line 1083 "xmlparse.c"
        var $3=(($2+348)&4294967295); //@line 1083 "xmlparse.c"
        var $4=HEAP[$3]; //@line 1083 "xmlparse.c"
        HEAP[$tagList]=$4; //@line 1083 "xmlparse.c"
        __label__ = 2; break; //@line 1083 "xmlparse.c"
      case 2: // $bb1
        var $5=HEAP[$tagList]; //@line 1086 "xmlparse.c"
        var $6=($5)==0; //@line 1086 "xmlparse.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 1086 "xmlparse.c"
      case 3: // $bb2
        var $7=HEAP[$parser_addr]; //@line 1087 "xmlparse.c"
        var $8=(($7+352)&4294967295); //@line 1087 "xmlparse.c"
        var $9=HEAP[$8]; //@line 1087 "xmlparse.c"
        var $10=($9)==0; //@line 1087 "xmlparse.c"
        if ($10) { __label__ = 6; break; } else { __label__ = 4; break; } //@line 1087 "xmlparse.c"
      case 4: // $bb3
        var $11=HEAP[$parser_addr]; //@line 1089 "xmlparse.c"
        var $12=(($11+352)&4294967295); //@line 1089 "xmlparse.c"
        var $13=HEAP[$12]; //@line 1089 "xmlparse.c"
        HEAP[$tagList]=$13; //@line 1089 "xmlparse.c"
        var $14=HEAP[$parser_addr]; //@line 1090 "xmlparse.c"
        var $15=(($14+352)&4294967295); //@line 1090 "xmlparse.c"
        HEAP[$15]=0; //@line 1090 "xmlparse.c"
        __label__ = 5; break; //@line 1090 "xmlparse.c"
      case 5: // $bb4
        var $16=HEAP[$tagList]; //@line 1092 "xmlparse.c"
        HEAP[$p]=$16; //@line 1092 "xmlparse.c"
        var $17=HEAP[$tagList]; //@line 1093 "xmlparse.c"
        var $18=(($17)&4294967295); //@line 1093 "xmlparse.c"
        var $19=HEAP[$18]; //@line 1093 "xmlparse.c"
        HEAP[$tagList]=$19; //@line 1093 "xmlparse.c"
        var $20=HEAP[$parser_addr]; //@line 1094 "xmlparse.c"
        var $21=(($20+12)&4294967295); //@line 1094 "xmlparse.c"
        var $22=(($21+8)&4294967295); //@line 1094 "xmlparse.c"
        var $23=HEAP[$22]; //@line 1094 "xmlparse.c"
        var $24=HEAP[$p]; //@line 1094 "xmlparse.c"
        var $25=(($24+36)&4294967295); //@line 1094 "xmlparse.c"
        var $26=HEAP[$25]; //@line 1094 "xmlparse.c"
        FUNCTION_TABLE[$23]($26); //@line 1094 "xmlparse.c"
        var $27=HEAP[$p]; //@line 1095 "xmlparse.c"
        var $28=(($27+44)&4294967295); //@line 1095 "xmlparse.c"
        var $29=HEAP[$28]; //@line 1095 "xmlparse.c"
        var $30=HEAP[$parser_addr]; //@line 1095 "xmlparse.c"
        _destroyBindings($29, $30); //@line 1095 "xmlparse.c"
        var $31=HEAP[$parser_addr]; //@line 1096 "xmlparse.c"
        var $32=(($31+12)&4294967295); //@line 1096 "xmlparse.c"
        var $33=(($32+8)&4294967295); //@line 1096 "xmlparse.c"
        var $34=HEAP[$33]; //@line 1096 "xmlparse.c"
        var $35=HEAP[$p]; //@line 1096 "xmlparse.c"
        var $36=$35; //@line 1096 "xmlparse.c"
        FUNCTION_TABLE[$34]($36); //@line 1096 "xmlparse.c"
        __label__ = 2; break; //@line 1096 "xmlparse.c"
      case 6: // $bb5
        var $37=HEAP[$parser_addr]; //@line 1099 "xmlparse.c"
        var $38=(($37+284)&4294967295); //@line 1099 "xmlparse.c"
        var $39=HEAP[$38]; //@line 1099 "xmlparse.c"
        HEAP[$entityList]=$39; //@line 1099 "xmlparse.c"
        __label__ = 7; break; //@line 1099 "xmlparse.c"
      case 7: // $bb6
        var $40=HEAP[$entityList]; //@line 1102 "xmlparse.c"
        var $41=($40)==0; //@line 1102 "xmlparse.c"
        if ($41) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 1102 "xmlparse.c"
      case 8: // $bb7
        var $42=HEAP[$parser_addr]; //@line 1103 "xmlparse.c"
        var $43=(($42+288)&4294967295); //@line 1103 "xmlparse.c"
        var $44=HEAP[$43]; //@line 1103 "xmlparse.c"
        var $45=($44)==0; //@line 1103 "xmlparse.c"
        if ($45) { __label__ = 11; break; } else { __label__ = 9; break; } //@line 1103 "xmlparse.c"
      case 9: // $bb8
        var $46=HEAP[$parser_addr]; //@line 1105 "xmlparse.c"
        var $47=(($46+288)&4294967295); //@line 1105 "xmlparse.c"
        var $48=HEAP[$47]; //@line 1105 "xmlparse.c"
        HEAP[$entityList]=$48; //@line 1105 "xmlparse.c"
        var $49=HEAP[$parser_addr]; //@line 1106 "xmlparse.c"
        var $50=(($49+288)&4294967295); //@line 1106 "xmlparse.c"
        HEAP[$50]=0; //@line 1106 "xmlparse.c"
        __label__ = 10; break; //@line 1106 "xmlparse.c"
      case 10: // $bb9
        var $51=HEAP[$entityList]; //@line 1108 "xmlparse.c"
        HEAP[$openEntity]=$51; //@line 1108 "xmlparse.c"
        var $52=HEAP[$entityList]; //@line 1109 "xmlparse.c"
        var $53=(($52+8)&4294967295); //@line 1109 "xmlparse.c"
        var $54=HEAP[$53]; //@line 1109 "xmlparse.c"
        HEAP[$entityList]=$54; //@line 1109 "xmlparse.c"
        var $55=HEAP[$parser_addr]; //@line 1110 "xmlparse.c"
        var $56=(($55+12)&4294967295); //@line 1110 "xmlparse.c"
        var $57=(($56+8)&4294967295); //@line 1110 "xmlparse.c"
        var $58=HEAP[$57]; //@line 1110 "xmlparse.c"
        var $59=HEAP[$openEntity]; //@line 1110 "xmlparse.c"
        var $60=$59; //@line 1110 "xmlparse.c"
        FUNCTION_TABLE[$58]($60); //@line 1110 "xmlparse.c"
        __label__ = 7; break; //@line 1110 "xmlparse.c"
      case 11: // $bb10
        var $61=HEAP[$parser_addr]; //@line 1113 "xmlparse.c"
        var $62=(($61+360)&4294967295); //@line 1113 "xmlparse.c"
        var $63=HEAP[$62]; //@line 1113 "xmlparse.c"
        var $64=HEAP[$parser_addr]; //@line 1113 "xmlparse.c"
        _destroyBindings($63, $64); //@line 1113 "xmlparse.c"
        var $65=HEAP[$parser_addr]; //@line 1114 "xmlparse.c"
        var $66=(($65+356)&4294967295); //@line 1114 "xmlparse.c"
        var $67=HEAP[$66]; //@line 1114 "xmlparse.c"
        var $68=HEAP[$parser_addr]; //@line 1114 "xmlparse.c"
        _destroyBindings($67, $68); //@line 1114 "xmlparse.c"
        var $69=HEAP[$parser_addr]; //@line 1115 "xmlparse.c"
        var $70=(($69+400)&4294967295); //@line 1115 "xmlparse.c"
        _poolDestroy($70); //@line 1115 "xmlparse.c"
        var $71=HEAP[$parser_addr]; //@line 1116 "xmlparse.c"
        var $72=(($71+424)&4294967295); //@line 1116 "xmlparse.c"
        _poolDestroy($72); //@line 1116 "xmlparse.c"
        var $73=HEAP[$parser_addr]; //@line 1123 "xmlparse.c"
        var $74=(($73+340)&4294967295); //@line 1123 "xmlparse.c"
        var $75=HEAP[$74]; //@line 1123 "xmlparse.c"
        var $76=($75)!=0; //@line 1123 "xmlparse.c"
        if ($76) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1123 "xmlparse.c"
      case 12: // $bb11
        var $77=HEAP[$parser_addr]; //@line 1125 "xmlparse.c"
        var $78=(($77+12)&4294967295); //@line 1125 "xmlparse.c"
        var $79=HEAP[$parser_addr]; //@line 1125 "xmlparse.c"
        var $80=(($79+460)&4294967295); //@line 1125 "xmlparse.c"
        var $81=HEAP[$80]; //@line 1125 "xmlparse.c"
        var $82=($81)==0; //@line 1125 "xmlparse.c"
        var $83=unSign(($82), 1, 0); //@line 1125 "xmlparse.c"
        var $84=HEAP[$parser_addr]; //@line 1125 "xmlparse.c"
        var $85=(($84+340)&4294967295); //@line 1125 "xmlparse.c"
        var $86=HEAP[$85]; //@line 1125 "xmlparse.c"
        var $87=((($83)) & 255); //@line 1125 "xmlparse.c"
        _dtdDestroy($86, $87, $78); //@line 1125 "xmlparse.c"
        __label__ = 13; break; //@line 1125 "xmlparse.c"
      case 13: // $bb12
        var $88=HEAP[$parser_addr]; //@line 1126 "xmlparse.c"
        var $89=(($88+12)&4294967295); //@line 1126 "xmlparse.c"
        var $90=(($89+8)&4294967295); //@line 1126 "xmlparse.c"
        var $91=HEAP[$90]; //@line 1126 "xmlparse.c"
        var $92=HEAP[$parser_addr]; //@line 1126 "xmlparse.c"
        var $93=(($92+376)&4294967295); //@line 1126 "xmlparse.c"
        var $94=HEAP[$93]; //@line 1126 "xmlparse.c"
        var $95=$94; //@line 1126 "xmlparse.c"
        FUNCTION_TABLE[$91]($95); //@line 1126 "xmlparse.c"
        var $96=HEAP[$parser_addr]; //@line 1127 "xmlparse.c"
        var $97=(($96+12)&4294967295); //@line 1127 "xmlparse.c"
        var $98=(($97+8)&4294967295); //@line 1127 "xmlparse.c"
        var $99=HEAP[$98]; //@line 1127 "xmlparse.c"
        var $100=HEAP[$parser_addr]; //@line 1127 "xmlparse.c"
        var $101=(($100+448)&4294967295); //@line 1127 "xmlparse.c"
        var $102=HEAP[$101]; //@line 1127 "xmlparse.c"
        FUNCTION_TABLE[$99]($102); //@line 1127 "xmlparse.c"
        var $103=HEAP[$parser_addr]; //@line 1128 "xmlparse.c"
        var $104=(($103+12)&4294967295); //@line 1128 "xmlparse.c"
        var $105=(($104+8)&4294967295); //@line 1128 "xmlparse.c"
        var $106=HEAP[$105]; //@line 1128 "xmlparse.c"
        var $107=HEAP[$parser_addr]; //@line 1128 "xmlparse.c"
        var $108=(($107+8)&4294967295); //@line 1128 "xmlparse.c"
        var $109=HEAP[$108]; //@line 1128 "xmlparse.c"
        FUNCTION_TABLE[$106]($109); //@line 1128 "xmlparse.c"
        var $110=HEAP[$parser_addr]; //@line 1129 "xmlparse.c"
        var $111=(($110+12)&4294967295); //@line 1129 "xmlparse.c"
        var $112=(($111+8)&4294967295); //@line 1129 "xmlparse.c"
        var $113=HEAP[$112]; //@line 1129 "xmlparse.c"
        var $114=HEAP[$parser_addr]; //@line 1129 "xmlparse.c"
        var $115=(($114+44)&4294967295); //@line 1129 "xmlparse.c"
        var $116=HEAP[$115]; //@line 1129 "xmlparse.c"
        FUNCTION_TABLE[$113]($116); //@line 1129 "xmlparse.c"
        var $117=HEAP[$parser_addr]; //@line 1130 "xmlparse.c"
        var $118=(($117+12)&4294967295); //@line 1130 "xmlparse.c"
        var $119=(($118+8)&4294967295); //@line 1130 "xmlparse.c"
        var $120=HEAP[$119]; //@line 1130 "xmlparse.c"
        var $121=HEAP[$parser_addr]; //@line 1130 "xmlparse.c"
        var $122=(($121+380)&4294967295); //@line 1130 "xmlparse.c"
        var $123=HEAP[$122]; //@line 1130 "xmlparse.c"
        var $124=$123; //@line 1130 "xmlparse.c"
        FUNCTION_TABLE[$120]($124); //@line 1130 "xmlparse.c"
        var $125=HEAP[$parser_addr]; //@line 1131 "xmlparse.c"
        var $126=(($125+12)&4294967295); //@line 1131 "xmlparse.c"
        var $127=(($126+8)&4294967295); //@line 1131 "xmlparse.c"
        var $128=HEAP[$127]; //@line 1131 "xmlparse.c"
        var $129=HEAP[$parser_addr]; //@line 1131 "xmlparse.c"
        var $130=(($129+236)&4294967295); //@line 1131 "xmlparse.c"
        var $131=HEAP[$130]; //@line 1131 "xmlparse.c"
        FUNCTION_TABLE[$128]($131); //@line 1131 "xmlparse.c"
        var $132=HEAP[$parser_addr]; //@line 1132 "xmlparse.c"
        var $133=(($132+248)&4294967295); //@line 1132 "xmlparse.c"
        var $134=HEAP[$133]; //@line 1132 "xmlparse.c"
        var $135=($134)!=0; //@line 1132 "xmlparse.c"
        if ($135) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1132 "xmlparse.c"
      case 14: // $bb13
        var $136=HEAP[$parser_addr]; //@line 1133 "xmlparse.c"
        var $137=(($136+248)&4294967295); //@line 1133 "xmlparse.c"
        var $138=HEAP[$137]; //@line 1133 "xmlparse.c"
        var $139=HEAP[$parser_addr]; //@line 1133 "xmlparse.c"
        var $140=(($139+240)&4294967295); //@line 1133 "xmlparse.c"
        var $141=HEAP[$140]; //@line 1133 "xmlparse.c"
        FUNCTION_TABLE[$138]($141); //@line 1133 "xmlparse.c"
        __label__ = 15; break; //@line 1133 "xmlparse.c"
      case 15: // $bb14
        var $142=HEAP[$parser_addr]; //@line 1134 "xmlparse.c"
        var $143=(($142+12)&4294967295); //@line 1134 "xmlparse.c"
        var $144=(($143+8)&4294967295); //@line 1134 "xmlparse.c"
        var $145=HEAP[$144]; //@line 1134 "xmlparse.c"
        var $146=HEAP[$parser_addr]; //@line 1134 "xmlparse.c"
        var $147=$146; //@line 1134 "xmlparse.c"
        FUNCTION_TABLE[$145]($147); //@line 1134 "xmlparse.c"
        __label__ = 16; break; //@line 1134 "xmlparse.c"
      case 16: // $bb15
        __label__ = 17; break; //@line 1081 "xmlparse.c"
      case 17: // $return
        STACKTOP = __stackBase__;
        return; //@line 1081 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_UseParserAsHandlerArg($parser) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        var $0=HEAP[$parser_addr]; //@line 1140 "xmlparse.c"
        var $1=(($0+4)&4294967295); //@line 1140 "xmlparse.c"
        var $2=HEAP[$parser_addr]; //@line 1140 "xmlparse.c"
        var $3=$2; //@line 1140 "xmlparse.c"
        HEAP[$1]=$3; //@line 1140 "xmlparse.c"
        __label__ = 1; break; //@line 1141 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1141 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_UseForeignDTD($parser, $useDTD) {
    var __stackBase__  = STACKTOP; STACKTOP += 13; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 13);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $useDTD_addr=__stackBase__+4;
        var $retval=__stackBase__+5;
        var $0=__stackBase__+9;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$useDTD_addr]=$useDTD;
        HEAP[$0]=25; //@line 1153 "xmlparse.c"
        var $1=HEAP[$0]; //@line 1153 "xmlparse.c"
        HEAP[$retval]=$1; //@line 1153 "xmlparse.c"
        __label__ = 1; break; //@line 1153 "xmlparse.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 1153 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 1153 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetReturnNSTriplet($parser, $do_nst) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $do_nst_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$do_nst_addr]=$do_nst;
        var $0=HEAP[$parser_addr]; //@line 1161 "xmlparse.c"
        var $1=(($0+464)&4294967295); //@line 1161 "xmlparse.c"
        var $2=(($1)&4294967295); //@line 1161 "xmlparse.c"
        var $3=HEAP[$2]; //@line 1161 "xmlparse.c"
        var $4=((($3))|0)==1; //@line 1161 "xmlparse.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 1161 "xmlparse.c"
      case 1: // $bb
        var $5=HEAP[$parser_addr]; //@line 1161 "xmlparse.c"
        var $6=(($5+464)&4294967295); //@line 1161 "xmlparse.c"
        var $7=(($6)&4294967295); //@line 1161 "xmlparse.c"
        var $8=HEAP[$7]; //@line 1161 "xmlparse.c"
        var $9=((($8))|0)==3; //@line 1161 "xmlparse.c"
        if ($9) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1161 "xmlparse.c"
      case 2: // $bb1
        __label__ = 4; break; //@line 1161 "xmlparse.c"
      case 3: // $bb2
        var $10=HEAP[$do_nst_addr]; //@line 1163 "xmlparse.c"
        var $11=((($10))|0)!=0; //@line 1163 "xmlparse.c"
        var $12=unSign(($11), 1, 0); //@line 1163 "xmlparse.c"
        var $13=HEAP[$parser_addr]; //@line 1163 "xmlparse.c"
        var $14=(($13+233)&4294967295); //@line 1163 "xmlparse.c"
        HEAP[$14]=$12; //@line 1163 "xmlparse.c"
        __label__ = 4; break; //@line 1163 "xmlparse.c"
      case 4: // $bb3
        __label__ = 5; break; //@line 1162 "xmlparse.c"
      case 5: // $return
        STACKTOP = __stackBase__;
        return; //@line 1162 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetUserData($parser, $p) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $p_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$p_addr]=$p;
        var $0=HEAP[$parser_addr]; //@line 1169 "xmlparse.c"
        var $1=(($0+4)&4294967295); //@line 1169 "xmlparse.c"
        var $2=HEAP[$1]; //@line 1169 "xmlparse.c"
        var $3=HEAP[$parser_addr]; //@line 1169 "xmlparse.c"
        var $4=(($3)&4294967295); //@line 1169 "xmlparse.c"
        var $5=HEAP[$4]; //@line 1169 "xmlparse.c"
        var $6=($2)==($5); //@line 1169 "xmlparse.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1169 "xmlparse.c"
      case 1: // $bb
        var $7=HEAP[$parser_addr]; //@line 1170 "xmlparse.c"
        var $8=(($7)&4294967295); //@line 1170 "xmlparse.c"
        var $9=HEAP[$p_addr]; //@line 1170 "xmlparse.c"
        HEAP[$8]=$9; //@line 1170 "xmlparse.c"
        var $10=HEAP[$parser_addr]; //@line 1170 "xmlparse.c"
        var $11=(($10)&4294967295); //@line 1170 "xmlparse.c"
        var $12=HEAP[$11]; //@line 1170 "xmlparse.c"
        var $13=HEAP[$parser_addr]; //@line 1170 "xmlparse.c"
        var $14=(($13+4)&4294967295); //@line 1170 "xmlparse.c"
        HEAP[$14]=$12; //@line 1170 "xmlparse.c"
        __label__ = 3; break; //@line 1170 "xmlparse.c"
      case 2: // $bb1
        var $15=HEAP[$parser_addr]; //@line 1172 "xmlparse.c"
        var $16=(($15)&4294967295); //@line 1172 "xmlparse.c"
        var $17=HEAP[$p_addr]; //@line 1172 "xmlparse.c"
        HEAP[$16]=$17; //@line 1172 "xmlparse.c"
        __label__ = 3; break; //@line 1172 "xmlparse.c"
      case 3: // $bb2
        __label__ = 4; break; //@line 1173 "xmlparse.c"
      case 4: // $return
        STACKTOP = __stackBase__;
        return; //@line 1173 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetBase($parser, $p) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $p_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$p_addr]=$p;
        var $1=HEAP[$p_addr]; //@line 1178 "xmlparse.c"
        var $2=($1)!=0; //@line 1178 "xmlparse.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 1178 "xmlparse.c"
      case 1: // $bb
        var $3=HEAP[$parser_addr]; //@line 1179 "xmlparse.c"
        var $4=(($3+340)&4294967295); //@line 1179 "xmlparse.c"
        var $5=HEAP[$4]; //@line 1179 "xmlparse.c"
        var $6=(($5+80)&4294967295); //@line 1179 "xmlparse.c"
        var $7=HEAP[$p_addr]; //@line 1179 "xmlparse.c"
        var $8=_poolCopyString($6, $7); //@line 1179 "xmlparse.c"
        HEAP[$p_addr]=$8; //@line 1179 "xmlparse.c"
        var $9=HEAP[$p_addr]; //@line 1180 "xmlparse.c"
        var $10=($9)==0; //@line 1180 "xmlparse.c"
        if ($10) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1180 "xmlparse.c"
      case 2: // $bb1
        HEAP[$0]=0; //@line 1181 "xmlparse.c"
        __label__ = 6; break; //@line 1181 "xmlparse.c"
      case 3: // $bb2
        var $11=HEAP[$parser_addr]; //@line 1182 "xmlparse.c"
        var $12=(($11+344)&4294967295); //@line 1182 "xmlparse.c"
        var $13=HEAP[$p_addr]; //@line 1182 "xmlparse.c"
        HEAP[$12]=$13; //@line 1182 "xmlparse.c"
        __label__ = 5; break; //@line 1182 "xmlparse.c"
      case 4: // $bb3
        var $14=HEAP[$parser_addr]; //@line 1185 "xmlparse.c"
        var $15=(($14+344)&4294967295); //@line 1185 "xmlparse.c"
        HEAP[$15]=0; //@line 1185 "xmlparse.c"
        __label__ = 5; break; //@line 1185 "xmlparse.c"
      case 5: // $bb4
        HEAP[$0]=1; //@line 1186 "xmlparse.c"
        __label__ = 6; break; //@line 1186 "xmlparse.c"
      case 6: // $bb5
        var $16=HEAP[$0]; //@line 1181 "xmlparse.c"
        HEAP[$retval]=$16; //@line 1181 "xmlparse.c"
        __label__ = 7; break; //@line 1181 "xmlparse.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 1181 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 1181 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_GetBase($parser) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        var $1=HEAP[$parser_addr]; //@line 1192 "xmlparse.c"
        var $2=(($1+344)&4294967295); //@line 1192 "xmlparse.c"
        var $3=HEAP[$2]; //@line 1192 "xmlparse.c"
        HEAP[$0]=$3; //@line 1192 "xmlparse.c"
        var $4=HEAP[$0]; //@line 1192 "xmlparse.c"
        HEAP[$retval]=$4; //@line 1192 "xmlparse.c"
        __label__ = 1; break; //@line 1192 "xmlparse.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 1192 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 1192 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_GetSpecifiedAttributeCount($parser) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        var $1=HEAP[$parser_addr]; //@line 1198 "xmlparse.c"
        var $2=(($1+368)&4294967295); //@line 1198 "xmlparse.c"
        var $3=HEAP[$2]; //@line 1198 "xmlparse.c"
        HEAP[$0]=$3; //@line 1198 "xmlparse.c"
        var $4=HEAP[$0]; //@line 1198 "xmlparse.c"
        HEAP[$retval]=$4; //@line 1198 "xmlparse.c"
        __label__ = 1; break; //@line 1198 "xmlparse.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 1198 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 1198 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_GetIdAttributeIndex($parser) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        var $1=HEAP[$parser_addr]; //@line 1204 "xmlparse.c"
        var $2=(($1+372)&4294967295); //@line 1204 "xmlparse.c"
        var $3=HEAP[$2]; //@line 1204 "xmlparse.c"
        HEAP[$0]=$3; //@line 1204 "xmlparse.c"
        var $4=HEAP[$0]; //@line 1204 "xmlparse.c"
        HEAP[$retval]=$4; //@line 1204 "xmlparse.c"
        __label__ = 1; break; //@line 1204 "xmlparse.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 1204 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 1204 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetElementHandler($parser, $start, $end) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $start_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$start_addr]=$start;
        HEAP[$end_addr]=$end;
        var $0=HEAP[$parser_addr]; //@line 1212 "xmlparse.c"
        var $1=(($0+52)&4294967295); //@line 1212 "xmlparse.c"
        var $2=HEAP[$start_addr]; //@line 1212 "xmlparse.c"
        HEAP[$1]=$2; //@line 1212 "xmlparse.c"
        var $3=HEAP[$parser_addr]; //@line 1213 "xmlparse.c"
        var $4=(($3+56)&4294967295); //@line 1213 "xmlparse.c"
        var $5=HEAP[$end_addr]; //@line 1213 "xmlparse.c"
        HEAP[$4]=$5; //@line 1213 "xmlparse.c"
        __label__ = 1; break; //@line 1214 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1214 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetStartElementHandler($parser, $start) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $start_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$start_addr]=$start;
        var $0=HEAP[$parser_addr]; //@line 1219 "xmlparse.c"
        var $1=(($0+52)&4294967295); //@line 1219 "xmlparse.c"
        var $2=HEAP[$start_addr]; //@line 1219 "xmlparse.c"
        HEAP[$1]=$2; //@line 1219 "xmlparse.c"
        __label__ = 1; break; //@line 1220 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1220 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetEndElementHandler($parser, $end) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $end_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$end_addr]=$end;
        var $0=HEAP[$parser_addr]; //@line 1225 "xmlparse.c"
        var $1=(($0+56)&4294967295); //@line 1225 "xmlparse.c"
        var $2=HEAP[$end_addr]; //@line 1225 "xmlparse.c"
        HEAP[$1]=$2; //@line 1225 "xmlparse.c"
        __label__ = 1; break; //@line 1226 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1226 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetCharacterDataHandler($parser, $handler) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $handler_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$handler_addr]=$handler;
        var $0=HEAP[$parser_addr]; //@line 1232 "xmlparse.c"
        var $1=(($0+60)&4294967295); //@line 1232 "xmlparse.c"
        var $2=HEAP[$handler_addr]; //@line 1232 "xmlparse.c"
        HEAP[$1]=$2; //@line 1232 "xmlparse.c"
        __label__ = 1; break; //@line 1233 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1233 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetProcessingInstructionHandler($parser, $handler) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $handler_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$handler_addr]=$handler;
        var $0=HEAP[$parser_addr]; //@line 1239 "xmlparse.c"
        var $1=(($0+64)&4294967295); //@line 1239 "xmlparse.c"
        var $2=HEAP[$handler_addr]; //@line 1239 "xmlparse.c"
        HEAP[$1]=$2; //@line 1239 "xmlparse.c"
        __label__ = 1; break; //@line 1240 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1240 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetCommentHandler($parser, $handler) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $handler_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$handler_addr]=$handler;
        var $0=HEAP[$parser_addr]; //@line 1246 "xmlparse.c"
        var $1=(($0+68)&4294967295); //@line 1246 "xmlparse.c"
        var $2=HEAP[$handler_addr]; //@line 1246 "xmlparse.c"
        HEAP[$1]=$2; //@line 1246 "xmlparse.c"
        __label__ = 1; break; //@line 1247 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1247 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetCdataSectionHandler($parser, $start, $end) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $start_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$start_addr]=$start;
        HEAP[$end_addr]=$end;
        var $0=HEAP[$parser_addr]; //@line 1254 "xmlparse.c"
        var $1=(($0+72)&4294967295); //@line 1254 "xmlparse.c"
        var $2=HEAP[$start_addr]; //@line 1254 "xmlparse.c"
        HEAP[$1]=$2; //@line 1254 "xmlparse.c"
        var $3=HEAP[$parser_addr]; //@line 1255 "xmlparse.c"
        var $4=(($3+76)&4294967295); //@line 1255 "xmlparse.c"
        var $5=HEAP[$end_addr]; //@line 1255 "xmlparse.c"
        HEAP[$4]=$5; //@line 1255 "xmlparse.c"
        __label__ = 1; break; //@line 1256 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1256 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetStartCdataSectionHandler($parser, $start) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $start_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$start_addr]=$start;
        var $0=HEAP[$parser_addr]; //@line 1261 "xmlparse.c"
        var $1=(($0+72)&4294967295); //@line 1261 "xmlparse.c"
        var $2=HEAP[$start_addr]; //@line 1261 "xmlparse.c"
        HEAP[$1]=$2; //@line 1261 "xmlparse.c"
        __label__ = 1; break; //@line 1262 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1262 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetEndCdataSectionHandler($parser, $end) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $end_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$end_addr]=$end;
        var $0=HEAP[$parser_addr]; //@line 1267 "xmlparse.c"
        var $1=(($0+76)&4294967295); //@line 1267 "xmlparse.c"
        var $2=HEAP[$end_addr]; //@line 1267 "xmlparse.c"
        HEAP[$1]=$2; //@line 1267 "xmlparse.c"
        __label__ = 1; break; //@line 1268 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1268 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetDefaultHandler($parser, $handler) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $handler_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$handler_addr]=$handler;
        var $0=HEAP[$parser_addr]; //@line 1274 "xmlparse.c"
        var $1=(($0+80)&4294967295); //@line 1274 "xmlparse.c"
        var $2=HEAP[$handler_addr]; //@line 1274 "xmlparse.c"
        HEAP[$1]=$2; //@line 1274 "xmlparse.c"
        var $3=HEAP[$parser_addr]; //@line 1275 "xmlparse.c"
        var $4=(($3+292)&4294967295); //@line 1275 "xmlparse.c"
        HEAP[$4]=0; //@line 1275 "xmlparse.c"
        __label__ = 1; break; //@line 1276 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1276 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetDefaultHandlerExpand($parser, $handler) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $handler_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$handler_addr]=$handler;
        var $0=HEAP[$parser_addr]; //@line 1282 "xmlparse.c"
        var $1=(($0+80)&4294967295); //@line 1282 "xmlparse.c"
        var $2=HEAP[$handler_addr]; //@line 1282 "xmlparse.c"
        HEAP[$1]=$2; //@line 1282 "xmlparse.c"
        var $3=HEAP[$parser_addr]; //@line 1283 "xmlparse.c"
        var $4=(($3+292)&4294967295); //@line 1283 "xmlparse.c"
        HEAP[$4]=1; //@line 1283 "xmlparse.c"
        __label__ = 1; break; //@line 1284 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1284 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetDoctypeDeclHandler($parser, $start, $end) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $start_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$start_addr]=$start;
        HEAP[$end_addr]=$end;
        var $0=HEAP[$parser_addr]; //@line 1291 "xmlparse.c"
        var $1=(($0+84)&4294967295); //@line 1291 "xmlparse.c"
        var $2=HEAP[$start_addr]; //@line 1291 "xmlparse.c"
        HEAP[$1]=$2; //@line 1291 "xmlparse.c"
        var $3=HEAP[$parser_addr]; //@line 1292 "xmlparse.c"
        var $4=(($3+88)&4294967295); //@line 1292 "xmlparse.c"
        var $5=HEAP[$end_addr]; //@line 1292 "xmlparse.c"
        HEAP[$4]=$5; //@line 1292 "xmlparse.c"
        __label__ = 1; break; //@line 1293 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1293 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetStartDoctypeDeclHandler($parser, $start) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $start_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$start_addr]=$start;
        var $0=HEAP[$parser_addr]; //@line 1298 "xmlparse.c"
        var $1=(($0+84)&4294967295); //@line 1298 "xmlparse.c"
        var $2=HEAP[$start_addr]; //@line 1298 "xmlparse.c"
        HEAP[$1]=$2; //@line 1298 "xmlparse.c"
        __label__ = 1; break; //@line 1299 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1299 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetEndDoctypeDeclHandler($parser, $end) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $end_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$end_addr]=$end;
        var $0=HEAP[$parser_addr]; //@line 1304 "xmlparse.c"
        var $1=(($0+88)&4294967295); //@line 1304 "xmlparse.c"
        var $2=HEAP[$end_addr]; //@line 1304 "xmlparse.c"
        HEAP[$1]=$2; //@line 1304 "xmlparse.c"
        __label__ = 1; break; //@line 1305 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1305 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetUnparsedEntityDeclHandler($parser, $handler) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $handler_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$handler_addr]=$handler;
        var $0=HEAP[$parser_addr]; //@line 1311 "xmlparse.c"
        var $1=(($0+92)&4294967295); //@line 1311 "xmlparse.c"
        var $2=HEAP[$handler_addr]; //@line 1311 "xmlparse.c"
        HEAP[$1]=$2; //@line 1311 "xmlparse.c"
        __label__ = 1; break; //@line 1312 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1312 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetNotationDeclHandler($parser, $handler) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $handler_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$handler_addr]=$handler;
        var $0=HEAP[$parser_addr]; //@line 1318 "xmlparse.c"
        var $1=(($0+96)&4294967295); //@line 1318 "xmlparse.c"
        var $2=HEAP[$handler_addr]; //@line 1318 "xmlparse.c"
        HEAP[$1]=$2; //@line 1318 "xmlparse.c"
        __label__ = 1; break; //@line 1319 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1319 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetNamespaceDeclHandler($parser, $start, $end) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $start_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$start_addr]=$start;
        HEAP[$end_addr]=$end;
        var $0=HEAP[$parser_addr]; //@line 1326 "xmlparse.c"
        var $1=(($0+100)&4294967295); //@line 1326 "xmlparse.c"
        var $2=HEAP[$start_addr]; //@line 1326 "xmlparse.c"
        HEAP[$1]=$2; //@line 1326 "xmlparse.c"
        var $3=HEAP[$parser_addr]; //@line 1327 "xmlparse.c"
        var $4=(($3+104)&4294967295); //@line 1327 "xmlparse.c"
        var $5=HEAP[$end_addr]; //@line 1327 "xmlparse.c"
        HEAP[$4]=$5; //@line 1327 "xmlparse.c"
        __label__ = 1; break; //@line 1328 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1328 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetStartNamespaceDeclHandler($parser, $start) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $start_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$start_addr]=$start;
        var $0=HEAP[$parser_addr]; //@line 1333 "xmlparse.c"
        var $1=(($0+100)&4294967295); //@line 1333 "xmlparse.c"
        var $2=HEAP[$start_addr]; //@line 1333 "xmlparse.c"
        HEAP[$1]=$2; //@line 1333 "xmlparse.c"
        __label__ = 1; break; //@line 1334 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1334 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetEndNamespaceDeclHandler($parser, $end) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $end_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$end_addr]=$end;
        var $0=HEAP[$parser_addr]; //@line 1339 "xmlparse.c"
        var $1=(($0+104)&4294967295); //@line 1339 "xmlparse.c"
        var $2=HEAP[$end_addr]; //@line 1339 "xmlparse.c"
        HEAP[$1]=$2; //@line 1339 "xmlparse.c"
        __label__ = 1; break; //@line 1340 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1340 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetNotStandaloneHandler($parser, $handler) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $handler_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$handler_addr]=$handler;
        var $0=HEAP[$parser_addr]; //@line 1346 "xmlparse.c"
        var $1=(($0+108)&4294967295); //@line 1346 "xmlparse.c"
        var $2=HEAP[$handler_addr]; //@line 1346 "xmlparse.c"
        HEAP[$1]=$2; //@line 1346 "xmlparse.c"
        __label__ = 1; break; //@line 1347 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1347 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetExternalEntityRefHandler($parser, $handler) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $handler_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$handler_addr]=$handler;
        var $0=HEAP[$parser_addr]; //@line 1353 "xmlparse.c"
        var $1=(($0+112)&4294967295); //@line 1353 "xmlparse.c"
        var $2=HEAP[$handler_addr]; //@line 1353 "xmlparse.c"
        HEAP[$1]=$2; //@line 1353 "xmlparse.c"
        __label__ = 1; break; //@line 1354 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1354 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetExternalEntityRefHandlerArg($parser, $arg) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $arg_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$arg_addr]=$arg;
        var $0=HEAP[$arg_addr]; //@line 1359 "xmlparse.c"
        var $1=($0)!=0; //@line 1359 "xmlparse.c"
        if ($1) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1359 "xmlparse.c"
      case 1: // $bb
        var $2=HEAP[$arg_addr]; //@line 1360 "xmlparse.c"
        var $3=$2; //@line 1360 "xmlparse.c"
        var $4=HEAP[$parser_addr]; //@line 1360 "xmlparse.c"
        var $5=(($4+116)&4294967295); //@line 1360 "xmlparse.c"
        HEAP[$5]=$3; //@line 1360 "xmlparse.c"
        __label__ = 3; break; //@line 1360 "xmlparse.c"
      case 2: // $bb1
        var $6=HEAP[$parser_addr]; //@line 1362 "xmlparse.c"
        var $7=(($6+116)&4294967295); //@line 1362 "xmlparse.c"
        var $8=HEAP[$parser_addr]; //@line 1362 "xmlparse.c"
        HEAP[$7]=$8; //@line 1362 "xmlparse.c"
        __label__ = 3; break; //@line 1362 "xmlparse.c"
      case 3: // $bb2
        __label__ = 4; break; //@line 1363 "xmlparse.c"
      case 4: // $return
        STACKTOP = __stackBase__;
        return; //@line 1363 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetSkippedEntityHandler($parser, $handler) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $handler_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$handler_addr]=$handler;
        var $0=HEAP[$parser_addr]; //@line 1369 "xmlparse.c"
        var $1=(($0+120)&4294967295); //@line 1369 "xmlparse.c"
        var $2=HEAP[$handler_addr]; //@line 1369 "xmlparse.c"
        HEAP[$1]=$2; //@line 1369 "xmlparse.c"
        __label__ = 1; break; //@line 1370 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1370 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetUnknownEncodingHandler($parser, $handler, $data) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $handler_addr=__stackBase__+4;
        var $data_addr=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$handler_addr]=$handler;
        HEAP[$data_addr]=$data;
        var $0=HEAP[$parser_addr]; //@line 1377 "xmlparse.c"
        var $1=(($0+124)&4294967295); //@line 1377 "xmlparse.c"
        var $2=HEAP[$handler_addr]; //@line 1377 "xmlparse.c"
        HEAP[$1]=$2; //@line 1377 "xmlparse.c"
        var $3=HEAP[$parser_addr]; //@line 1378 "xmlparse.c"
        var $4=(($3+244)&4294967295); //@line 1378 "xmlparse.c"
        var $5=HEAP[$data_addr]; //@line 1378 "xmlparse.c"
        HEAP[$4]=$5; //@line 1378 "xmlparse.c"
        __label__ = 1; break; //@line 1379 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1379 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetElementDeclHandler($parser, $eldecl) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $eldecl_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$eldecl_addr]=$eldecl;
        var $0=HEAP[$parser_addr]; //@line 1385 "xmlparse.c"
        var $1=(($0+128)&4294967295); //@line 1385 "xmlparse.c"
        var $2=HEAP[$eldecl_addr]; //@line 1385 "xmlparse.c"
        HEAP[$1]=$2; //@line 1385 "xmlparse.c"
        __label__ = 1; break; //@line 1386 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1386 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetAttlistDeclHandler($parser, $attdecl) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $attdecl_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$attdecl_addr]=$attdecl;
        var $0=HEAP[$parser_addr]; //@line 1392 "xmlparse.c"
        var $1=(($0+132)&4294967295); //@line 1392 "xmlparse.c"
        var $2=HEAP[$attdecl_addr]; //@line 1392 "xmlparse.c"
        HEAP[$1]=$2; //@line 1392 "xmlparse.c"
        __label__ = 1; break; //@line 1393 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1393 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetEntityDeclHandler($parser, $handler) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $handler_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$handler_addr]=$handler;
        var $0=HEAP[$parser_addr]; //@line 1399 "xmlparse.c"
        var $1=(($0+136)&4294967295); //@line 1399 "xmlparse.c"
        var $2=HEAP[$handler_addr]; //@line 1399 "xmlparse.c"
        HEAP[$1]=$2; //@line 1399 "xmlparse.c"
        __label__ = 1; break; //@line 1400 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1400 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetXmlDeclHandler($parser, $handler) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $handler_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$handler_addr]=$handler;
        var $0=HEAP[$parser_addr]; //@line 1405 "xmlparse.c"
        var $1=(($0+140)&4294967295); //@line 1405 "xmlparse.c"
        var $2=HEAP[$handler_addr]; //@line 1405 "xmlparse.c"
        HEAP[$1]=$2; //@line 1405 "xmlparse.c"
        __label__ = 1; break; //@line 1406 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1406 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_SetParamEntityParsing($parser, $peParsing) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $peParsing_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$peParsing_addr]=$peParsing;
        var $1=HEAP[$parser_addr]; //@line 1413 "xmlparse.c"
        var $2=(($1+464)&4294967295); //@line 1413 "xmlparse.c"
        var $3=(($2)&4294967295); //@line 1413 "xmlparse.c"
        var $4=HEAP[$3]; //@line 1413 "xmlparse.c"
        var $5=((($4))|0)==1; //@line 1413 "xmlparse.c"
        if ($5) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 1413 "xmlparse.c"
      case 1: // $bb
        var $6=HEAP[$parser_addr]; //@line 1413 "xmlparse.c"
        var $7=(($6+464)&4294967295); //@line 1413 "xmlparse.c"
        var $8=(($7)&4294967295); //@line 1413 "xmlparse.c"
        var $9=HEAP[$8]; //@line 1413 "xmlparse.c"
        var $10=((($9))|0)==3; //@line 1413 "xmlparse.c"
        if ($10) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1413 "xmlparse.c"
      case 2: // $bb1
        HEAP[$0]=0; //@line 1414 "xmlparse.c"
        __label__ = 4; break; //@line 1414 "xmlparse.c"
      case 3: // $bb2
        var $11=HEAP[$peParsing_addr]; //@line 1419 "xmlparse.c"
        var $12=((($11))|0)==0; //@line 1419 "xmlparse.c"
        var $13=unSign(($12), 1, 0); //@line 1419 "xmlparse.c"
        HEAP[$0]=$13; //@line 1419 "xmlparse.c"
        __label__ = 4; break; //@line 1419 "xmlparse.c"
      case 4: // $bb3
        var $14=HEAP[$0]; //@line 1414 "xmlparse.c"
        HEAP[$retval]=$14; //@line 1414 "xmlparse.c"
        __label__ = 5; break; //@line 1414 "xmlparse.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 1414 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 1414 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_Parse($parser, $s, $len, $isFinal) {
    var __stackBase__  = STACKTOP; STACKTOP += 48; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 48);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $s_addr=__stackBase__+4;
        var $len_addr=__stackBase__+8;
        var $isFinal_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_7=__stackBase__+20;
        var $0=__stackBase__+24;
        var $end=__stackBase__+28;
        var $nLeftOver=__stackBase__+32;
        var $result=__stackBase__+36;
        var $temp=__stackBase__+40;
        var $buff=__stackBase__+44;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$s_addr]=$s;
        HEAP[$len_addr]=$len;
        HEAP[$isFinal_addr]=$isFinal;
        var $1=HEAP[$parser_addr]; //@line 1426 "xmlparse.c"
        var $2=(($1+464)&4294967295); //@line 1426 "xmlparse.c"
        var $3=(($2)&4294967295); //@line 1426 "xmlparse.c"
        var $4=HEAP[$3]; //@line 1426 "xmlparse.c"
        if ($4 == 2) {
          __label__ = 2; break;
        }
        else if ($4 == 3) {
          __label__ = 1; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        var $5=HEAP[$parser_addr]; //@line 1428 "xmlparse.c"
        var $6=(($5+268)&4294967295); //@line 1428 "xmlparse.c"
        HEAP[$6]=33; //@line 1428 "xmlparse.c"
        HEAP[$0]=0; //@line 1429 "xmlparse.c"
        __label__ = 35; break; //@line 1429 "xmlparse.c"
      case 2: // $bb1
        var $7=HEAP[$parser_addr]; //@line 1431 "xmlparse.c"
        var $8=(($7+268)&4294967295); //@line 1431 "xmlparse.c"
        HEAP[$8]=36; //@line 1431 "xmlparse.c"
        HEAP[$0]=0; //@line 1432 "xmlparse.c"
        __label__ = 35; break; //@line 1432 "xmlparse.c"
      case 3: // $bb2
        var $9=HEAP[$parser_addr]; //@line 1434 "xmlparse.c"
        var $10=(($9+464)&4294967295); //@line 1434 "xmlparse.c"
        var $11=(($10)&4294967295); //@line 1434 "xmlparse.c"
        HEAP[$11]=1; //@line 1434 "xmlparse.c"
        var $12=HEAP[$len_addr]; //@line 1437 "xmlparse.c"
        var $13=((($12))|0)==0; //@line 1437 "xmlparse.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 12; break; } //@line 1437 "xmlparse.c"
      case 4: // $bb3
        var $14=HEAP[$isFinal_addr]; //@line 1438 "xmlparse.c"
        var $15=((($14)) & 255); //@line 1438 "xmlparse.c"
        var $16=HEAP[$parser_addr]; //@line 1438 "xmlparse.c"
        var $17=(($16+464)&4294967295); //@line 1438 "xmlparse.c"
        var $18=(($17+4)&4294967295); //@line 1438 "xmlparse.c"
        HEAP[$18]=$15; //@line 1438 "xmlparse.c"
        var $19=HEAP[$isFinal_addr]; //@line 1439 "xmlparse.c"
        var $20=((($19))|0)==0; //@line 1439 "xmlparse.c"
        if ($20) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1439 "xmlparse.c"
      case 5: // $bb4
        HEAP[$0]=1; //@line 1440 "xmlparse.c"
        __label__ = 35; break; //@line 1440 "xmlparse.c"
      case 6: // $bb5
        var $21=HEAP[$parser_addr]; //@line 1441 "xmlparse.c"
        var $22=(($21+24)&4294967295); //@line 1441 "xmlparse.c"
        var $23=HEAP[$22]; //@line 1441 "xmlparse.c"
        var $24=HEAP[$parser_addr]; //@line 1441 "xmlparse.c"
        var $25=(($24+280)&4294967295); //@line 1441 "xmlparse.c"
        HEAP[$25]=$23; //@line 1441 "xmlparse.c"
        var $26=HEAP[$parser_addr]; //@line 1442 "xmlparse.c"
        var $27=(($26+28)&4294967295); //@line 1442 "xmlparse.c"
        var $28=HEAP[$27]; //@line 1442 "xmlparse.c"
        var $29=HEAP[$parser_addr]; //@line 1442 "xmlparse.c"
        var $30=(($29+40)&4294967295); //@line 1442 "xmlparse.c"
        HEAP[$30]=$28; //@line 1442 "xmlparse.c"
        var $31=HEAP[$parser_addr]; //@line 1448 "xmlparse.c"
        var $32=(($31+264)&4294967295); //@line 1448 "xmlparse.c"
        var $33=HEAP[$32]; //@line 1448 "xmlparse.c"
        var $34=HEAP[$parser_addr]; //@line 1448 "xmlparse.c"
        var $35=(($34+24)&4294967295); //@line 1448 "xmlparse.c"
        var $36=HEAP[$parser_addr]; //@line 1448 "xmlparse.c"
        var $37=(($36+40)&4294967295); //@line 1448 "xmlparse.c"
        var $38=HEAP[$37]; //@line 1448 "xmlparse.c"
        var $39=HEAP[$parser_addr]; //@line 1448 "xmlparse.c"
        var $40=(($39+24)&4294967295); //@line 1448 "xmlparse.c"
        var $41=HEAP[$40]; //@line 1448 "xmlparse.c"
        var $42=HEAP[$parser_addr]; //@line 1448 "xmlparse.c"
        var $43=FUNCTION_TABLE[$33]($42, $41, $38, $35); //@line 1448 "xmlparse.c"
        var $44=HEAP[$parser_addr]; //@line 1448 "xmlparse.c"
        var $45=(($44+268)&4294967295); //@line 1448 "xmlparse.c"
        HEAP[$45]=$43; //@line 1448 "xmlparse.c"
        var $46=HEAP[$parser_addr]; //@line 1450 "xmlparse.c"
        var $47=(($46+268)&4294967295); //@line 1450 "xmlparse.c"
        var $48=HEAP[$47]; //@line 1450 "xmlparse.c"
        var $49=((($48))|0)==0; //@line 1450 "xmlparse.c"
        if ($49) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 1450 "xmlparse.c"
      case 7: // $bb6
        var $50=HEAP[$parser_addr]; //@line 1451 "xmlparse.c"
        var $51=(($50+464)&4294967295); //@line 1451 "xmlparse.c"
        var $52=(($51)&4294967295); //@line 1451 "xmlparse.c"
        var $53=HEAP[$52]; //@line 1451 "xmlparse.c"
        if ($53 == 0) {
          __label__ = 9; break;
        }
        else if ($53 == 1) {
          __label__ = 9; break;
        }
        else if ($53 == 3) {
          __label__ = 8; break;
        }
        else {
        __label__ = 10; break;
        }
        
      case 8: // $bb7
        var $54=HEAP[$parser_addr]; //@line 1453 "xmlparse.c"
        var $55=(($54+144)&4294967295); //@line 1453 "xmlparse.c"
        var $56=HEAP[$55]; //@line 1453 "xmlparse.c"
        var $57=(($56+48)&4294967295); //@line 1453 "xmlparse.c"
        var $58=HEAP[$57]; //@line 1453 "xmlparse.c"
        var $59=HEAP[$parser_addr]; //@line 1453 "xmlparse.c"
        var $60=(($59+392)&4294967295); //@line 1453 "xmlparse.c"
        var $61=HEAP[$parser_addr]; //@line 1453 "xmlparse.c"
        var $62=(($61+24)&4294967295); //@line 1453 "xmlparse.c"
        var $63=HEAP[$62]; //@line 1453 "xmlparse.c"
        var $64=HEAP[$parser_addr]; //@line 1453 "xmlparse.c"
        var $65=(($64+280)&4294967295); //@line 1453 "xmlparse.c"
        var $66=HEAP[$65]; //@line 1453 "xmlparse.c"
        var $67=HEAP[$parser_addr]; //@line 1453 "xmlparse.c"
        var $68=(($67+144)&4294967295); //@line 1453 "xmlparse.c"
        var $69=HEAP[$68]; //@line 1453 "xmlparse.c"
        FUNCTION_TABLE[$58]($69, $66, $63, $60); //@line 1453 "xmlparse.c"
        var $70=HEAP[$parser_addr]; //@line 1454 "xmlparse.c"
        var $71=(($70+24)&4294967295); //@line 1454 "xmlparse.c"
        var $72=HEAP[$71]; //@line 1454 "xmlparse.c"
        var $73=HEAP[$parser_addr]; //@line 1454 "xmlparse.c"
        var $74=(($73+280)&4294967295); //@line 1454 "xmlparse.c"
        HEAP[$74]=$72; //@line 1454 "xmlparse.c"
        HEAP[$0]=2; //@line 1455 "xmlparse.c"
        __label__ = 35; break; //@line 1455 "xmlparse.c"
      case 9: // $bb8
        var $75=HEAP[$parser_addr]; //@line 1458 "xmlparse.c"
        var $76=(($75+464)&4294967295); //@line 1458 "xmlparse.c"
        var $77=(($76)&4294967295); //@line 1458 "xmlparse.c"
        HEAP[$77]=2; //@line 1458 "xmlparse.c"
        __label__ = 10; break; //@line 1458 "xmlparse.c"
      case 10: // $bb9
        HEAP[$0]=1; //@line 1461 "xmlparse.c"
        __label__ = 35; break; //@line 1461 "xmlparse.c"
      case 11: // $bb10
        var $78=HEAP[$parser_addr]; //@line 1464 "xmlparse.c"
        var $79=(($78+272)&4294967295); //@line 1464 "xmlparse.c"
        var $80=HEAP[$79]; //@line 1464 "xmlparse.c"
        var $81=HEAP[$parser_addr]; //@line 1464 "xmlparse.c"
        var $82=(($81+276)&4294967295); //@line 1464 "xmlparse.c"
        HEAP[$82]=$80; //@line 1464 "xmlparse.c"
        var $83=HEAP[$parser_addr]; //@line 1465 "xmlparse.c"
        var $84=(($83+264)&4294967295); //@line 1465 "xmlparse.c"
        HEAP[$84]=(FUNCTION_TABLE_OFFSET + 52); //@line 1465 "xmlparse.c"
        HEAP[$0]=0; //@line 1466 "xmlparse.c"
        __label__ = 35; break; //@line 1466 "xmlparse.c"
      case 12: // $bb11
        var $85=HEAP[$parser_addr]; //@line 1469 "xmlparse.c"
        var $86=(($85+24)&4294967295); //@line 1469 "xmlparse.c"
        var $87=HEAP[$86]; //@line 1469 "xmlparse.c"
        var $88=HEAP[$parser_addr]; //@line 1469 "xmlparse.c"
        var $89=(($88+28)&4294967295); //@line 1469 "xmlparse.c"
        var $90=HEAP[$89]; //@line 1469 "xmlparse.c"
        var $91=($87)==($90); //@line 1469 "xmlparse.c"
        if ($91) { __label__ = 13; break; } else { __label__ = 32; break; } //@line 1469 "xmlparse.c"
      case 13: // $bb12
        var $92=HEAP[$parser_addr]; //@line 1473 "xmlparse.c"
        var $93=(($92+36)&4294967295); //@line 1473 "xmlparse.c"
        var $94=HEAP[$93]; //@line 1473 "xmlparse.c"
        var $95=HEAP[$len_addr]; //@line 1473 "xmlparse.c"
        var $96=((($94) + ($95))&4294967295); //@line 1473 "xmlparse.c"
        var $97=HEAP[$parser_addr]; //@line 1473 "xmlparse.c"
        var $98=(($97+36)&4294967295); //@line 1473 "xmlparse.c"
        HEAP[$98]=$96; //@line 1473 "xmlparse.c"
        var $99=HEAP[$parser_addr]; //@line 1474 "xmlparse.c"
        var $100=(($99+280)&4294967295); //@line 1474 "xmlparse.c"
        var $101=HEAP[$s_addr]; //@line 1474 "xmlparse.c"
        HEAP[$100]=$101; //@line 1474 "xmlparse.c"
        var $102=HEAP[$isFinal_addr]; //@line 1475 "xmlparse.c"
        var $103=((($102)) & 255); //@line 1475 "xmlparse.c"
        var $104=HEAP[$parser_addr]; //@line 1475 "xmlparse.c"
        var $105=(($104+464)&4294967295); //@line 1475 "xmlparse.c"
        var $106=(($105+4)&4294967295); //@line 1475 "xmlparse.c"
        HEAP[$106]=$103; //@line 1475 "xmlparse.c"
        var $107=HEAP[$parser_addr]; //@line 1477 "xmlparse.c"
        var $108=(($107+264)&4294967295); //@line 1477 "xmlparse.c"
        var $109=HEAP[$108]; //@line 1477 "xmlparse.c"
        var $110=HEAP[$s_addr]; //@line 1477 "xmlparse.c"
        var $111=HEAP[$len_addr]; //@line 1477 "xmlparse.c"
        var $112=(($110+$111)&4294967295); //@line 1477 "xmlparse.c"
        var $113=HEAP[$parser_addr]; //@line 1477 "xmlparse.c"
        var $114=(($113+40)&4294967295); //@line 1477 "xmlparse.c"
        HEAP[$114]=$112; //@line 1477 "xmlparse.c"
        var $115=HEAP[$parser_addr]; //@line 1477 "xmlparse.c"
        var $116=(($115+40)&4294967295); //@line 1477 "xmlparse.c"
        var $117=HEAP[$116]; //@line 1477 "xmlparse.c"
        var $118=HEAP[$parser_addr]; //@line 1477 "xmlparse.c"
        var $119=HEAP[$s_addr]; //@line 1477 "xmlparse.c"
        var $120=FUNCTION_TABLE[$109]($118, $119, $117, $end); //@line 1477 "xmlparse.c"
        var $121=HEAP[$parser_addr]; //@line 1477 "xmlparse.c"
        var $122=(($121+268)&4294967295); //@line 1477 "xmlparse.c"
        HEAP[$122]=$120; //@line 1477 "xmlparse.c"
        var $123=HEAP[$parser_addr]; //@line 1479 "xmlparse.c"
        var $124=(($123+268)&4294967295); //@line 1479 "xmlparse.c"
        var $125=HEAP[$124]; //@line 1479 "xmlparse.c"
        var $126=((($125))|0)!=0; //@line 1479 "xmlparse.c"
        if ($126) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1479 "xmlparse.c"
      case 14: // $bb13
        var $127=HEAP[$parser_addr]; //@line 1480 "xmlparse.c"
        var $128=(($127+272)&4294967295); //@line 1480 "xmlparse.c"
        var $129=HEAP[$128]; //@line 1480 "xmlparse.c"
        var $130=HEAP[$parser_addr]; //@line 1480 "xmlparse.c"
        var $131=(($130+276)&4294967295); //@line 1480 "xmlparse.c"
        HEAP[$131]=$129; //@line 1480 "xmlparse.c"
        var $132=HEAP[$parser_addr]; //@line 1481 "xmlparse.c"
        var $133=(($132+264)&4294967295); //@line 1481 "xmlparse.c"
        HEAP[$133]=(FUNCTION_TABLE_OFFSET + 52); //@line 1481 "xmlparse.c"
        HEAP[$0]=0; //@line 1482 "xmlparse.c"
        __label__ = 35; break; //@line 1482 "xmlparse.c"
      case 15: // $bb14
        var $134=HEAP[$parser_addr]; //@line 1485 "xmlparse.c"
        var $135=(($134+464)&4294967295); //@line 1485 "xmlparse.c"
        var $136=(($135)&4294967295); //@line 1485 "xmlparse.c"
        var $137=HEAP[$136]; //@line 1485 "xmlparse.c"
        if ($137 == 0) {
          __label__ = 17; break;
        }
        else if ($137 == 1) {
          __label__ = 17; break;
        }
        else if ($137 == 3) {
          __label__ = 16; break;
        }
        else {
        __label__ = 19; break;
        }
        
      case 16: // $bb15
        HEAP[$result]=2; //@line 1487 "xmlparse.c"
        __label__ = 19; break; //@line 1487 "xmlparse.c"
      case 17: // $bb16
        HEAP[$result]=1; //@line 1491 "xmlparse.c"
        var $138=HEAP[$isFinal_addr]; //@line 1492 "xmlparse.c"
        var $139=((($138))|0)!=0; //@line 1492 "xmlparse.c"
        if ($139) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 1492 "xmlparse.c"
      case 18: // $bb17
        var $140=HEAP[$parser_addr]; //@line 1493 "xmlparse.c"
        var $141=(($140+464)&4294967295); //@line 1493 "xmlparse.c"
        var $142=(($141)&4294967295); //@line 1493 "xmlparse.c"
        HEAP[$142]=2; //@line 1493 "xmlparse.c"
        var $143=HEAP[$result]; //@line 1494 "xmlparse.c"
        HEAP[$0]=$143; //@line 1494 "xmlparse.c"
        __label__ = 35; break; //@line 1494 "xmlparse.c"
      case 19: // $bb18
        var $144=HEAP[$parser_addr]; //@line 1499 "xmlparse.c"
        var $145=(($144+144)&4294967295); //@line 1499 "xmlparse.c"
        var $146=HEAP[$145]; //@line 1499 "xmlparse.c"
        var $147=(($146+48)&4294967295); //@line 1499 "xmlparse.c"
        var $148=HEAP[$147]; //@line 1499 "xmlparse.c"
        var $149=HEAP[$parser_addr]; //@line 1499 "xmlparse.c"
        var $150=(($149+392)&4294967295); //@line 1499 "xmlparse.c"
        var $151=HEAP[$end]; //@line 1499 "xmlparse.c"
        var $152=HEAP[$parser_addr]; //@line 1499 "xmlparse.c"
        var $153=(($152+280)&4294967295); //@line 1499 "xmlparse.c"
        var $154=HEAP[$153]; //@line 1499 "xmlparse.c"
        var $155=HEAP[$parser_addr]; //@line 1499 "xmlparse.c"
        var $156=(($155+144)&4294967295); //@line 1499 "xmlparse.c"
        var $157=HEAP[$156]; //@line 1499 "xmlparse.c"
        FUNCTION_TABLE[$148]($157, $154, $151, $150); //@line 1499 "xmlparse.c"
        var $158=HEAP[$s_addr]; //@line 1500 "xmlparse.c"
        var $159=HEAP[$len_addr]; //@line 1500 "xmlparse.c"
        var $160=(($158+$159)&4294967295); //@line 1500 "xmlparse.c"
        var $161=($160); //@line 1500 "xmlparse.c"
        var $162=HEAP[$end]; //@line 1500 "xmlparse.c"
        var $163=($162); //@line 1500 "xmlparse.c"
        var $164=((($161) - ($163))&4294967295); //@line 1500 "xmlparse.c"
        HEAP[$nLeftOver]=$164; //@line 1500 "xmlparse.c"
        var $165=HEAP[$nLeftOver]; //@line 1501 "xmlparse.c"
        var $166=((($165))|0)!=0; //@line 1501 "xmlparse.c"
        if ($166) { __label__ = 20; break; } else { __label__ = 31; break; } //@line 1501 "xmlparse.c"
      case 20: // $bb19
        var $167=HEAP[$parser_addr]; //@line 1502 "xmlparse.c"
        var $168=(($167+8)&4294967295); //@line 1502 "xmlparse.c"
        var $169=HEAP[$168]; //@line 1502 "xmlparse.c"
        var $170=($169)==0; //@line 1502 "xmlparse.c"
        if ($170) { __label__ = 22; break; } else { __label__ = 21; break; } //@line 1502 "xmlparse.c"
      case 21: // $bb20
        var $171=HEAP[$parser_addr]; //@line 1502 "xmlparse.c"
        var $172=(($171+32)&4294967295); //@line 1502 "xmlparse.c"
        var $173=HEAP[$172]; //@line 1502 "xmlparse.c"
        var $174=($173); //@line 1502 "xmlparse.c"
        var $175=HEAP[$parser_addr]; //@line 1502 "xmlparse.c"
        var $176=(($175+8)&4294967295); //@line 1502 "xmlparse.c"
        var $177=HEAP[$176]; //@line 1502 "xmlparse.c"
        var $178=($177); //@line 1502 "xmlparse.c"
        var $179=((($174) - ($178))&4294967295); //@line 1502 "xmlparse.c"
        var $180=HEAP[$nLeftOver]; //@line 1502 "xmlparse.c"
        var $181=((($179))|0) < ((($180))|0); //@line 1502 "xmlparse.c"
        if ($181) { __label__ = 22; break; } else { __label__ = 30; break; } //@line 1502 "xmlparse.c"
      case 22: // $bb21
        var $182=HEAP[$parser_addr]; //@line 1505 "xmlparse.c"
        var $183=(($182+8)&4294967295); //@line 1505 "xmlparse.c"
        var $184=HEAP[$183]; //@line 1505 "xmlparse.c"
        var $185=($184)==0; //@line 1505 "xmlparse.c"
        if ($185) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 1505 "xmlparse.c"
      case 23: // $bb22
        var $186=HEAP[$parser_addr]; //@line 1505 "xmlparse.c"
        var $187=(($186+12)&4294967295); //@line 1505 "xmlparse.c"
        var $188=(($187)&4294967295); //@line 1505 "xmlparse.c"
        var $189=HEAP[$188]; //@line 1505 "xmlparse.c"
        var $190=HEAP[$len_addr]; //@line 1505 "xmlparse.c"
        var $191=((($190) * 2)&4294967295); //@line 1505 "xmlparse.c"
        var $192=FUNCTION_TABLE[$189]($191); //@line 1505 "xmlparse.c"
        HEAP[$iftmp_7]=$192; //@line 1505 "xmlparse.c"
        __label__ = 25; break; //@line 1505 "xmlparse.c"
      case 24: // $bb23
        var $193=HEAP[$parser_addr]; //@line 1505 "xmlparse.c"
        var $194=(($193+12)&4294967295); //@line 1505 "xmlparse.c"
        var $195=(($194+4)&4294967295); //@line 1505 "xmlparse.c"
        var $196=HEAP[$195]; //@line 1505 "xmlparse.c"
        var $197=HEAP[$len_addr]; //@line 1505 "xmlparse.c"
        var $198=((($197) * 2)&4294967295); //@line 1505 "xmlparse.c"
        var $199=HEAP[$parser_addr]; //@line 1505 "xmlparse.c"
        var $200=(($199+8)&4294967295); //@line 1505 "xmlparse.c"
        var $201=HEAP[$200]; //@line 1505 "xmlparse.c"
        var $202=FUNCTION_TABLE[$196]($201, $198); //@line 1505 "xmlparse.c"
        HEAP[$iftmp_7]=$202; //@line 1505 "xmlparse.c"
        __label__ = 25; break; //@line 1505 "xmlparse.c"
      case 25: // $bb24
        var $203=HEAP[$iftmp_7]; //@line 1505 "xmlparse.c"
        HEAP[$temp]=$203; //@line 1505 "xmlparse.c"
        var $204=HEAP[$temp]; //@line 1508 "xmlparse.c"
        var $205=($204)==0; //@line 1508 "xmlparse.c"
        if ($205) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1508 "xmlparse.c"
      case 26: // $bb25
        var $206=HEAP[$parser_addr]; //@line 1509 "xmlparse.c"
        var $207=(($206+268)&4294967295); //@line 1509 "xmlparse.c"
        HEAP[$207]=1; //@line 1509 "xmlparse.c"
        HEAP[$0]=0; //@line 1510 "xmlparse.c"
        __label__ = 35; break; //@line 1510 "xmlparse.c"
      case 27: // $bb26
        var $208=HEAP[$parser_addr]; //@line 1512 "xmlparse.c"
        var $209=(($208+8)&4294967295); //@line 1512 "xmlparse.c"
        var $210=HEAP[$temp]; //@line 1512 "xmlparse.c"
        HEAP[$209]=$210; //@line 1512 "xmlparse.c"
        var $211=HEAP[$parser_addr]; //@line 1513 "xmlparse.c"
        var $212=(($211+8)&4294967295); //@line 1513 "xmlparse.c"
        var $213=HEAP[$212]; //@line 1513 "xmlparse.c"
        var $214=($213)==0; //@line 1513 "xmlparse.c"
        if ($214) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 1513 "xmlparse.c"
      case 28: // $bb27
        var $215=HEAP[$parser_addr]; //@line 1514 "xmlparse.c"
        var $216=(($215+268)&4294967295); //@line 1514 "xmlparse.c"
        HEAP[$216]=1; //@line 1514 "xmlparse.c"
        var $217=HEAP[$parser_addr]; //@line 1515 "xmlparse.c"
        var $218=(($217+276)&4294967295); //@line 1515 "xmlparse.c"
        HEAP[$218]=0; //@line 1515 "xmlparse.c"
        var $219=HEAP[$parser_addr]; //@line 1515 "xmlparse.c"
        var $220=(($219+276)&4294967295); //@line 1515 "xmlparse.c"
        var $221=HEAP[$220]; //@line 1515 "xmlparse.c"
        var $222=HEAP[$parser_addr]; //@line 1515 "xmlparse.c"
        var $223=(($222+272)&4294967295); //@line 1515 "xmlparse.c"
        HEAP[$223]=$221; //@line 1515 "xmlparse.c"
        var $224=HEAP[$parser_addr]; //@line 1516 "xmlparse.c"
        var $225=(($224+264)&4294967295); //@line 1516 "xmlparse.c"
        HEAP[$225]=(FUNCTION_TABLE_OFFSET + 52); //@line 1516 "xmlparse.c"
        HEAP[$0]=0; //@line 1517 "xmlparse.c"
        __label__ = 35; break; //@line 1517 "xmlparse.c"
      case 29: // $bb28
        var $226=HEAP[$parser_addr]; //@line 1519 "xmlparse.c"
        var $227=(($226+8)&4294967295); //@line 1519 "xmlparse.c"
        var $228=HEAP[$227]; //@line 1519 "xmlparse.c"
        var $229=HEAP[$len_addr]; //@line 1519 "xmlparse.c"
        var $230=((($229) * 2)&4294967295); //@line 1519 "xmlparse.c"
        var $231=(($228+$230)&4294967295); //@line 1519 "xmlparse.c"
        var $232=HEAP[$parser_addr]; //@line 1519 "xmlparse.c"
        var $233=(($232+32)&4294967295); //@line 1519 "xmlparse.c"
        HEAP[$233]=$231; //@line 1519 "xmlparse.c"
        __label__ = 30; break; //@line 1519 "xmlparse.c"
      case 30: // $bb29
        var $234=HEAP[$nLeftOver]; //@line 1521 "xmlparse.c"
        var $235=HEAP[$end]; //@line 1521 "xmlparse.c"
        var $236=HEAP[$parser_addr]; //@line 1521 "xmlparse.c"
        var $237=(($236+8)&4294967295); //@line 1521 "xmlparse.c"
        var $238=HEAP[$237]; //@line 1521 "xmlparse.c"
        _llvm_memcpy_p0i8_p0i8_i32($238, $235, $234, 1, 0); //@line 1521 "xmlparse.c"
        __label__ = 31; break; //@line 1521 "xmlparse.c"
      case 31: // $bb30
        var $239=HEAP[$parser_addr]; //@line 1523 "xmlparse.c"
        var $240=(($239+8)&4294967295); //@line 1523 "xmlparse.c"
        var $241=HEAP[$240]; //@line 1523 "xmlparse.c"
        var $242=HEAP[$parser_addr]; //@line 1523 "xmlparse.c"
        var $243=(($242+24)&4294967295); //@line 1523 "xmlparse.c"
        HEAP[$243]=$241; //@line 1523 "xmlparse.c"
        var $244=HEAP[$parser_addr]; //@line 1524 "xmlparse.c"
        var $245=(($244+8)&4294967295); //@line 1524 "xmlparse.c"
        var $246=HEAP[$245]; //@line 1524 "xmlparse.c"
        var $247=HEAP[$nLeftOver]; //@line 1524 "xmlparse.c"
        var $248=(($246+$247)&4294967295); //@line 1524 "xmlparse.c"
        var $249=HEAP[$parser_addr]; //@line 1524 "xmlparse.c"
        var $250=(($249+28)&4294967295); //@line 1524 "xmlparse.c"
        HEAP[$250]=$248; //@line 1524 "xmlparse.c"
        var $251=HEAP[$parser_addr]; //@line 1525 "xmlparse.c"
        var $252=(($251+24)&4294967295); //@line 1525 "xmlparse.c"
        var $253=HEAP[$252]; //@line 1525 "xmlparse.c"
        var $254=HEAP[$parser_addr]; //@line 1525 "xmlparse.c"
        var $255=(($254+280)&4294967295); //@line 1525 "xmlparse.c"
        HEAP[$255]=$253; //@line 1525 "xmlparse.c"
        var $256=HEAP[$parser_addr]; //@line 1526 "xmlparse.c"
        var $257=(($256+28)&4294967295); //@line 1526 "xmlparse.c"
        var $258=HEAP[$257]; //@line 1526 "xmlparse.c"
        var $259=HEAP[$parser_addr]; //@line 1526 "xmlparse.c"
        var $260=(($259+40)&4294967295); //@line 1526 "xmlparse.c"
        HEAP[$260]=$258; //@line 1526 "xmlparse.c"
        var $261=HEAP[$parser_addr]; //@line 1527 "xmlparse.c"
        var $262=(($261+24)&4294967295); //@line 1527 "xmlparse.c"
        var $263=HEAP[$262]; //@line 1527 "xmlparse.c"
        var $264=HEAP[$parser_addr]; //@line 1527 "xmlparse.c"
        var $265=(($264+272)&4294967295); //@line 1527 "xmlparse.c"
        HEAP[$265]=$263; //@line 1527 "xmlparse.c"
        var $266=HEAP[$parser_addr]; //@line 1528 "xmlparse.c"
        var $267=(($266+24)&4294967295); //@line 1528 "xmlparse.c"
        var $268=HEAP[$267]; //@line 1528 "xmlparse.c"
        var $269=HEAP[$parser_addr]; //@line 1528 "xmlparse.c"
        var $270=(($269+276)&4294967295); //@line 1528 "xmlparse.c"
        HEAP[$270]=$268; //@line 1528 "xmlparse.c"
        var $271=HEAP[$result]; //@line 1529 "xmlparse.c"
        HEAP[$0]=$271; //@line 1529 "xmlparse.c"
        __label__ = 35; break; //@line 1529 "xmlparse.c"
      case 32: // $bb31
        var $272=HEAP[$parser_addr]; //@line 1533 "xmlparse.c"
        var $273=HEAP[$len_addr]; //@line 1533 "xmlparse.c"
        var $274=_PyExpat_XML_GetBuffer($272, $273); //@line 1533 "xmlparse.c"
        HEAP[$buff]=$274; //@line 1533 "xmlparse.c"
        var $275=HEAP[$buff]; //@line 1534 "xmlparse.c"
        var $276=($275)==0; //@line 1534 "xmlparse.c"
        if ($276) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 1534 "xmlparse.c"
      case 33: // $bb32
        HEAP[$0]=0; //@line 1535 "xmlparse.c"
        __label__ = 35; break; //@line 1535 "xmlparse.c"
      case 34: // $bb33
        var $277=HEAP[$len_addr]; //@line 1537 "xmlparse.c"
        var $278=HEAP[$buff]; //@line 1537 "xmlparse.c"
        var $279=HEAP[$s_addr]; //@line 1537 "xmlparse.c"
        _llvm_memcpy_p0i8_p0i8_i32($278, $279, $277, 1, 0); //@line 1537 "xmlparse.c"
        var $280=HEAP[$parser_addr]; //@line 1538 "xmlparse.c"
        var $281=HEAP[$len_addr]; //@line 1538 "xmlparse.c"
        var $282=HEAP[$isFinal_addr]; //@line 1538 "xmlparse.c"
        var $283=_PyExpat_XML_ParseBuffer($280, $281, $282); //@line 1538 "xmlparse.c"
        HEAP[$0]=$283; //@line 1538 "xmlparse.c"
        __label__ = 35; break; //@line 1538 "xmlparse.c"
      case 35: // $bb34
        var $284=HEAP[$0]; //@line 1429 "xmlparse.c"
        HEAP[$retval]=$284; //@line 1429 "xmlparse.c"
        __label__ = 36; break; //@line 1429 "xmlparse.c"
      case 36: // $return
        var $retval35=HEAP[$retval]; //@line 1429 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval35; //@line 1429 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_ParseBuffer($parser, $len, $isFinal) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $len_addr=__stackBase__+4;
        var $isFinal_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $start=__stackBase__+20;
        var $result=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$len_addr]=$len;
        HEAP[$isFinal_addr]=$isFinal;
        HEAP[$result]=1; //@line 1547 "xmlparse.c"
        var $1=HEAP[$parser_addr]; //@line 1549 "xmlparse.c"
        var $2=(($1+464)&4294967295); //@line 1549 "xmlparse.c"
        var $3=(($2)&4294967295); //@line 1549 "xmlparse.c"
        var $4=HEAP[$3]; //@line 1549 "xmlparse.c"
        if ($4 == 2) {
          __label__ = 2; break;
        }
        else if ($4 == 3) {
          __label__ = 1; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        var $5=HEAP[$parser_addr]; //@line 1551 "xmlparse.c"
        var $6=(($5+268)&4294967295); //@line 1551 "xmlparse.c"
        HEAP[$6]=33; //@line 1551 "xmlparse.c"
        HEAP[$0]=0; //@line 1552 "xmlparse.c"
        __label__ = 10; break; //@line 1552 "xmlparse.c"
      case 2: // $bb1
        var $7=HEAP[$parser_addr]; //@line 1554 "xmlparse.c"
        var $8=(($7+268)&4294967295); //@line 1554 "xmlparse.c"
        HEAP[$8]=36; //@line 1554 "xmlparse.c"
        HEAP[$0]=0; //@line 1555 "xmlparse.c"
        __label__ = 10; break; //@line 1555 "xmlparse.c"
      case 3: // $bb2
        var $9=HEAP[$parser_addr]; //@line 1557 "xmlparse.c"
        var $10=(($9+464)&4294967295); //@line 1557 "xmlparse.c"
        var $11=(($10)&4294967295); //@line 1557 "xmlparse.c"
        HEAP[$11]=1; //@line 1557 "xmlparse.c"
        var $12=HEAP[$parser_addr]; //@line 1560 "xmlparse.c"
        var $13=(($12+24)&4294967295); //@line 1560 "xmlparse.c"
        var $14=HEAP[$13]; //@line 1560 "xmlparse.c"
        HEAP[$start]=$14; //@line 1560 "xmlparse.c"
        var $15=HEAP[$parser_addr]; //@line 1561 "xmlparse.c"
        var $16=(($15+280)&4294967295); //@line 1561 "xmlparse.c"
        var $17=HEAP[$start]; //@line 1561 "xmlparse.c"
        HEAP[$16]=$17; //@line 1561 "xmlparse.c"
        var $18=HEAP[$parser_addr]; //@line 1562 "xmlparse.c"
        var $19=(($18+28)&4294967295); //@line 1562 "xmlparse.c"
        var $20=HEAP[$19]; //@line 1562 "xmlparse.c"
        var $21=HEAP[$len_addr]; //@line 1562 "xmlparse.c"
        var $22=(($20+$21)&4294967295); //@line 1562 "xmlparse.c"
        var $23=HEAP[$parser_addr]; //@line 1562 "xmlparse.c"
        var $24=(($23+28)&4294967295); //@line 1562 "xmlparse.c"
        HEAP[$24]=$22; //@line 1562 "xmlparse.c"
        var $25=HEAP[$parser_addr]; //@line 1563 "xmlparse.c"
        var $26=(($25+28)&4294967295); //@line 1563 "xmlparse.c"
        var $27=HEAP[$26]; //@line 1563 "xmlparse.c"
        var $28=HEAP[$parser_addr]; //@line 1563 "xmlparse.c"
        var $29=(($28+40)&4294967295); //@line 1563 "xmlparse.c"
        HEAP[$29]=$27; //@line 1563 "xmlparse.c"
        var $30=HEAP[$parser_addr]; //@line 1564 "xmlparse.c"
        var $31=(($30+36)&4294967295); //@line 1564 "xmlparse.c"
        var $32=HEAP[$31]; //@line 1564 "xmlparse.c"
        var $33=HEAP[$len_addr]; //@line 1564 "xmlparse.c"
        var $34=((($32) + ($33))&4294967295); //@line 1564 "xmlparse.c"
        var $35=HEAP[$parser_addr]; //@line 1564 "xmlparse.c"
        var $36=(($35+36)&4294967295); //@line 1564 "xmlparse.c"
        HEAP[$36]=$34; //@line 1564 "xmlparse.c"
        var $37=HEAP[$isFinal_addr]; //@line 1565 "xmlparse.c"
        var $38=((($37)) & 255); //@line 1565 "xmlparse.c"
        var $39=HEAP[$parser_addr]; //@line 1565 "xmlparse.c"
        var $40=(($39+464)&4294967295); //@line 1565 "xmlparse.c"
        var $41=(($40+4)&4294967295); //@line 1565 "xmlparse.c"
        HEAP[$41]=$38; //@line 1565 "xmlparse.c"
        var $42=HEAP[$parser_addr]; //@line 1567 "xmlparse.c"
        var $43=(($42+264)&4294967295); //@line 1567 "xmlparse.c"
        var $44=HEAP[$43]; //@line 1567 "xmlparse.c"
        var $45=HEAP[$parser_addr]; //@line 1567 "xmlparse.c"
        var $46=(($45+24)&4294967295); //@line 1567 "xmlparse.c"
        var $47=HEAP[$parser_addr]; //@line 1567 "xmlparse.c"
        var $48=(($47+40)&4294967295); //@line 1567 "xmlparse.c"
        var $49=HEAP[$48]; //@line 1567 "xmlparse.c"
        var $50=HEAP[$parser_addr]; //@line 1567 "xmlparse.c"
        var $51=HEAP[$start]; //@line 1567 "xmlparse.c"
        var $52=FUNCTION_TABLE[$44]($50, $51, $49, $46); //@line 1567 "xmlparse.c"
        var $53=HEAP[$parser_addr]; //@line 1567 "xmlparse.c"
        var $54=(($53+268)&4294967295); //@line 1567 "xmlparse.c"
        HEAP[$54]=$52; //@line 1567 "xmlparse.c"
        var $55=HEAP[$parser_addr]; //@line 1569 "xmlparse.c"
        var $56=(($55+268)&4294967295); //@line 1569 "xmlparse.c"
        var $57=HEAP[$56]; //@line 1569 "xmlparse.c"
        var $58=((($57))|0)!=0; //@line 1569 "xmlparse.c"
        if ($58) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1569 "xmlparse.c"
      case 4: // $bb3
        var $59=HEAP[$parser_addr]; //@line 1570 "xmlparse.c"
        var $60=(($59+272)&4294967295); //@line 1570 "xmlparse.c"
        var $61=HEAP[$60]; //@line 1570 "xmlparse.c"
        var $62=HEAP[$parser_addr]; //@line 1570 "xmlparse.c"
        var $63=(($62+276)&4294967295); //@line 1570 "xmlparse.c"
        HEAP[$63]=$61; //@line 1570 "xmlparse.c"
        var $64=HEAP[$parser_addr]; //@line 1571 "xmlparse.c"
        var $65=(($64+264)&4294967295); //@line 1571 "xmlparse.c"
        HEAP[$65]=(FUNCTION_TABLE_OFFSET + 52); //@line 1571 "xmlparse.c"
        HEAP[$0]=0; //@line 1572 "xmlparse.c"
        __label__ = 10; break; //@line 1572 "xmlparse.c"
      case 5: // $bb4
        var $66=HEAP[$parser_addr]; //@line 1575 "xmlparse.c"
        var $67=(($66+464)&4294967295); //@line 1575 "xmlparse.c"
        var $68=(($67)&4294967295); //@line 1575 "xmlparse.c"
        var $69=HEAP[$68]; //@line 1575 "xmlparse.c"
        if ($69 == 0) {
          __label__ = 7; break;
        }
        else if ($69 == 1) {
          __label__ = 7; break;
        }
        else if ($69 == 3) {
          __label__ = 6; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 6: // $bb5
        HEAP[$result]=2; //@line 1577 "xmlparse.c"
        __label__ = 9; break; //@line 1577 "xmlparse.c"
      case 7: // $bb6
        var $70=HEAP[$isFinal_addr]; //@line 1581 "xmlparse.c"
        var $71=((($70))|0)!=0; //@line 1581 "xmlparse.c"
        if ($71) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1581 "xmlparse.c"
      case 8: // $bb7
        var $72=HEAP[$parser_addr]; //@line 1582 "xmlparse.c"
        var $73=(($72+464)&4294967295); //@line 1582 "xmlparse.c"
        var $74=(($73)&4294967295); //@line 1582 "xmlparse.c"
        HEAP[$74]=2; //@line 1582 "xmlparse.c"
        var $75=HEAP[$result]; //@line 1583 "xmlparse.c"
        HEAP[$0]=$75; //@line 1583 "xmlparse.c"
        __label__ = 10; break; //@line 1583 "xmlparse.c"
      case 9: // $bb8
        var $76=HEAP[$parser_addr]; //@line 1589 "xmlparse.c"
        var $77=(($76+144)&4294967295); //@line 1589 "xmlparse.c"
        var $78=HEAP[$77]; //@line 1589 "xmlparse.c"
        var $79=(($78+48)&4294967295); //@line 1589 "xmlparse.c"
        var $80=HEAP[$79]; //@line 1589 "xmlparse.c"
        var $81=HEAP[$parser_addr]; //@line 1589 "xmlparse.c"
        var $82=(($81+392)&4294967295); //@line 1589 "xmlparse.c"
        var $83=HEAP[$parser_addr]; //@line 1589 "xmlparse.c"
        var $84=(($83+24)&4294967295); //@line 1589 "xmlparse.c"
        var $85=HEAP[$84]; //@line 1589 "xmlparse.c"
        var $86=HEAP[$parser_addr]; //@line 1589 "xmlparse.c"
        var $87=(($86+280)&4294967295); //@line 1589 "xmlparse.c"
        var $88=HEAP[$87]; //@line 1589 "xmlparse.c"
        var $89=HEAP[$parser_addr]; //@line 1589 "xmlparse.c"
        var $90=(($89+144)&4294967295); //@line 1589 "xmlparse.c"
        var $91=HEAP[$90]; //@line 1589 "xmlparse.c"
        FUNCTION_TABLE[$80]($91, $88, $85, $82); //@line 1589 "xmlparse.c"
        var $92=HEAP[$parser_addr]; //@line 1590 "xmlparse.c"
        var $93=(($92+24)&4294967295); //@line 1590 "xmlparse.c"
        var $94=HEAP[$93]; //@line 1590 "xmlparse.c"
        var $95=HEAP[$parser_addr]; //@line 1590 "xmlparse.c"
        var $96=(($95+280)&4294967295); //@line 1590 "xmlparse.c"
        HEAP[$96]=$94; //@line 1590 "xmlparse.c"
        var $97=HEAP[$result]; //@line 1591 "xmlparse.c"
        HEAP[$0]=$97; //@line 1591 "xmlparse.c"
        __label__ = 10; break; //@line 1591 "xmlparse.c"
      case 10: // $bb9
        var $98=HEAP[$0]; //@line 1552 "xmlparse.c"
        HEAP[$retval]=$98; //@line 1552 "xmlparse.c"
        __label__ = 11; break; //@line 1552 "xmlparse.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 1552 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 1552 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_GetBuffer($parser, $len) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $len_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $neededSize=__stackBase__+16;
        var $newBuf=__stackBase__+20;
        var $bufferSize=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$len_addr]=$len;
        var $1=HEAP[$parser_addr]; //@line 1597 "xmlparse.c"
        var $2=(($1+464)&4294967295); //@line 1597 "xmlparse.c"
        var $3=(($2)&4294967295); //@line 1597 "xmlparse.c"
        var $4=HEAP[$3]; //@line 1597 "xmlparse.c"
        if ($4 == 2) {
          __label__ = 2; break;
        }
        else if ($4 == 3) {
          __label__ = 1; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        var $5=HEAP[$parser_addr]; //@line 1599 "xmlparse.c"
        var $6=(($5+268)&4294967295); //@line 1599 "xmlparse.c"
        HEAP[$6]=33; //@line 1599 "xmlparse.c"
        HEAP[$0]=0; //@line 1600 "xmlparse.c"
        __label__ = 15; break; //@line 1600 "xmlparse.c"
      case 2: // $bb1
        var $7=HEAP[$parser_addr]; //@line 1602 "xmlparse.c"
        var $8=(($7+268)&4294967295); //@line 1602 "xmlparse.c"
        HEAP[$8]=36; //@line 1602 "xmlparse.c"
        HEAP[$0]=0; //@line 1603 "xmlparse.c"
        __label__ = 15; break; //@line 1603 "xmlparse.c"
      case 3: // $bb2
        var $9=HEAP[$parser_addr]; //@line 1607 "xmlparse.c"
        var $10=(($9+32)&4294967295); //@line 1607 "xmlparse.c"
        var $11=HEAP[$10]; //@line 1607 "xmlparse.c"
        var $12=($11); //@line 1607 "xmlparse.c"
        var $13=HEAP[$parser_addr]; //@line 1607 "xmlparse.c"
        var $14=(($13+28)&4294967295); //@line 1607 "xmlparse.c"
        var $15=HEAP[$14]; //@line 1607 "xmlparse.c"
        var $16=($15); //@line 1607 "xmlparse.c"
        var $17=((($12) - ($16))&4294967295); //@line 1607 "xmlparse.c"
        var $18=HEAP[$len_addr]; //@line 1607 "xmlparse.c"
        var $19=((($17))|0) < ((($18))|0); //@line 1607 "xmlparse.c"
        if ($19) { __label__ = 4; break; } else { __label__ = 14; break; } //@line 1607 "xmlparse.c"
      case 4: // $bb3
        var $20=HEAP[$parser_addr]; //@line 1609 "xmlparse.c"
        var $21=(($20+28)&4294967295); //@line 1609 "xmlparse.c"
        var $22=HEAP[$21]; //@line 1609 "xmlparse.c"
        var $23=($22); //@line 1609 "xmlparse.c"
        var $24=HEAP[$parser_addr]; //@line 1609 "xmlparse.c"
        var $25=(($24+24)&4294967295); //@line 1609 "xmlparse.c"
        var $26=HEAP[$25]; //@line 1609 "xmlparse.c"
        var $27=($26); //@line 1609 "xmlparse.c"
        var $28=((($23) - ($27))&4294967295); //@line 1609 "xmlparse.c"
        var $29=HEAP[$len_addr]; //@line 1609 "xmlparse.c"
        var $30=((($28) + ($29))&4294967295); //@line 1609 "xmlparse.c"
        HEAP[$neededSize]=$30; //@line 1609 "xmlparse.c"
        var $31=HEAP[$parser_addr]; //@line 1617 "xmlparse.c"
        var $32=(($31+32)&4294967295); //@line 1617 "xmlparse.c"
        var $33=HEAP[$32]; //@line 1617 "xmlparse.c"
        var $34=($33); //@line 1617 "xmlparse.c"
        var $35=HEAP[$parser_addr]; //@line 1617 "xmlparse.c"
        var $36=(($35+8)&4294967295); //@line 1617 "xmlparse.c"
        var $37=HEAP[$36]; //@line 1617 "xmlparse.c"
        var $38=($37); //@line 1617 "xmlparse.c"
        var $39=((($34) - ($38))&4294967295); //@line 1617 "xmlparse.c"
        var $40=HEAP[$neededSize]; //@line 1617 "xmlparse.c"
        var $41=((($39))|0) >= ((($40))|0); //@line 1617 "xmlparse.c"
        if ($41) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1617 "xmlparse.c"
      case 5: // $bb4
        var $42=HEAP[$parser_addr]; //@line 1626 "xmlparse.c"
        var $43=(($42+28)&4294967295); //@line 1626 "xmlparse.c"
        var $44=HEAP[$43]; //@line 1626 "xmlparse.c"
        var $45=($44); //@line 1626 "xmlparse.c"
        var $46=HEAP[$parser_addr]; //@line 1626 "xmlparse.c"
        var $47=(($46+24)&4294967295); //@line 1626 "xmlparse.c"
        var $48=HEAP[$47]; //@line 1626 "xmlparse.c"
        var $49=($48); //@line 1626 "xmlparse.c"
        var $50=((($45) - ($49))&4294967295); //@line 1626 "xmlparse.c"
        var $51=HEAP[$parser_addr]; //@line 1626 "xmlparse.c"
        var $52=(($51+24)&4294967295); //@line 1626 "xmlparse.c"
        var $53=HEAP[$52]; //@line 1626 "xmlparse.c"
        var $54=HEAP[$parser_addr]; //@line 1626 "xmlparse.c"
        var $55=(($54+8)&4294967295); //@line 1626 "xmlparse.c"
        var $56=HEAP[$55]; //@line 1626 "xmlparse.c"
        _llvm_memmove_p0i8_p0i8_i32($56, $53, $50, 1, 0); //@line 1626 "xmlparse.c"
        var $57=HEAP[$parser_addr]; //@line 1627 "xmlparse.c"
        var $58=(($57+8)&4294967295); //@line 1627 "xmlparse.c"
        var $59=HEAP[$58]; //@line 1627 "xmlparse.c"
        var $60=HEAP[$parser_addr]; //@line 1627 "xmlparse.c"
        var $61=(($60+28)&4294967295); //@line 1627 "xmlparse.c"
        var $62=HEAP[$61]; //@line 1627 "xmlparse.c"
        var $63=($62); //@line 1627 "xmlparse.c"
        var $64=HEAP[$parser_addr]; //@line 1627 "xmlparse.c"
        var $65=(($64+24)&4294967295); //@line 1627 "xmlparse.c"
        var $66=HEAP[$65]; //@line 1627 "xmlparse.c"
        var $67=($66); //@line 1627 "xmlparse.c"
        var $68=((($63) - ($67))&4294967295); //@line 1627 "xmlparse.c"
        var $69=(($59+$68)&4294967295); //@line 1627 "xmlparse.c"
        var $70=HEAP[$parser_addr]; //@line 1627 "xmlparse.c"
        var $71=(($70+28)&4294967295); //@line 1627 "xmlparse.c"
        HEAP[$71]=$69; //@line 1627 "xmlparse.c"
        var $72=HEAP[$parser_addr]; //@line 1628 "xmlparse.c"
        var $73=(($72+8)&4294967295); //@line 1628 "xmlparse.c"
        var $74=HEAP[$73]; //@line 1628 "xmlparse.c"
        var $75=HEAP[$parser_addr]; //@line 1628 "xmlparse.c"
        var $76=(($75+24)&4294967295); //@line 1628 "xmlparse.c"
        HEAP[$76]=$74; //@line 1628 "xmlparse.c"
        __label__ = 14; break; //@line 1628 "xmlparse.c"
      case 6: // $bb5
        var $77=HEAP[$parser_addr]; //@line 1633 "xmlparse.c"
        var $78=(($77+32)&4294967295); //@line 1633 "xmlparse.c"
        var $79=HEAP[$78]; //@line 1633 "xmlparse.c"
        var $80=($79); //@line 1633 "xmlparse.c"
        var $81=HEAP[$parser_addr]; //@line 1633 "xmlparse.c"
        var $82=(($81+24)&4294967295); //@line 1633 "xmlparse.c"
        var $83=HEAP[$82]; //@line 1633 "xmlparse.c"
        var $84=($83); //@line 1633 "xmlparse.c"
        var $85=((($80) - ($84))&4294967295); //@line 1633 "xmlparse.c"
        HEAP[$bufferSize]=$85; //@line 1633 "xmlparse.c"
        var $86=HEAP[$bufferSize]; //@line 1634 "xmlparse.c"
        var $87=((($86))|0)==0; //@line 1634 "xmlparse.c"
        if ($87) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1634 "xmlparse.c"
      case 7: // $bb6
        HEAP[$bufferSize]=1024; //@line 1635 "xmlparse.c"
        __label__ = 8; break; //@line 1635 "xmlparse.c"
      case 8: // $bb7
        var $88=HEAP[$bufferSize]; //@line 1637 "xmlparse.c"
        var $89=((($88) * 2)&4294967295); //@line 1637 "xmlparse.c"
        HEAP[$bufferSize]=$89; //@line 1637 "xmlparse.c"
        var $90=HEAP[$bufferSize]; //@line 1638 "xmlparse.c"
        var $91=HEAP[$neededSize]; //@line 1638 "xmlparse.c"
        var $92=((($90))|0) < ((($91))|0); //@line 1638 "xmlparse.c"
        if ($92) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1638 "xmlparse.c"
      case 9: // $bb8
        var $93=HEAP[$parser_addr]; //@line 1639 "xmlparse.c"
        var $94=(($93+12)&4294967295); //@line 1639 "xmlparse.c"
        var $95=(($94)&4294967295); //@line 1639 "xmlparse.c"
        var $96=HEAP[$95]; //@line 1639 "xmlparse.c"
        var $97=HEAP[$bufferSize]; //@line 1639 "xmlparse.c"
        var $98=FUNCTION_TABLE[$96]($97); //@line 1639 "xmlparse.c"
        HEAP[$newBuf]=$98; //@line 1639 "xmlparse.c"
        var $99=HEAP[$newBuf]; //@line 1640 "xmlparse.c"
        var $100=($99)==0; //@line 1640 "xmlparse.c"
        if ($100) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1640 "xmlparse.c"
      case 10: // $bb9
        var $101=HEAP[$parser_addr]; //@line 1641 "xmlparse.c"
        var $102=(($101+268)&4294967295); //@line 1641 "xmlparse.c"
        HEAP[$102]=1; //@line 1641 "xmlparse.c"
        HEAP[$0]=0; //@line 1642 "xmlparse.c"
        __label__ = 15; break; //@line 1642 "xmlparse.c"
      case 11: // $bb10
        var $103=HEAP[$newBuf]; //@line 1644 "xmlparse.c"
        var $104=HEAP[$bufferSize]; //@line 1644 "xmlparse.c"
        var $105=(($103+$104)&4294967295); //@line 1644 "xmlparse.c"
        var $106=HEAP[$parser_addr]; //@line 1644 "xmlparse.c"
        var $107=(($106+32)&4294967295); //@line 1644 "xmlparse.c"
        HEAP[$107]=$105; //@line 1644 "xmlparse.c"
        var $108=HEAP[$parser_addr]; //@line 1661 "xmlparse.c"
        var $109=(($108+24)&4294967295); //@line 1661 "xmlparse.c"
        var $110=HEAP[$109]; //@line 1661 "xmlparse.c"
        var $111=($110)!=0; //@line 1661 "xmlparse.c"
        if ($111) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1661 "xmlparse.c"
      case 12: // $bb11
        var $112=HEAP[$parser_addr]; //@line 1662 "xmlparse.c"
        var $113=(($112+28)&4294967295); //@line 1662 "xmlparse.c"
        var $114=HEAP[$113]; //@line 1662 "xmlparse.c"
        var $115=($114); //@line 1662 "xmlparse.c"
        var $116=HEAP[$parser_addr]; //@line 1662 "xmlparse.c"
        var $117=(($116+24)&4294967295); //@line 1662 "xmlparse.c"
        var $118=HEAP[$117]; //@line 1662 "xmlparse.c"
        var $119=($118); //@line 1662 "xmlparse.c"
        var $120=((($115) - ($119))&4294967295); //@line 1662 "xmlparse.c"
        var $121=HEAP[$parser_addr]; //@line 1662 "xmlparse.c"
        var $122=(($121+24)&4294967295); //@line 1662 "xmlparse.c"
        var $123=HEAP[$122]; //@line 1662 "xmlparse.c"
        var $124=HEAP[$newBuf]; //@line 1662 "xmlparse.c"
        _llvm_memcpy_p0i8_p0i8_i32($124, $123, $120, 1, 0); //@line 1662 "xmlparse.c"
        var $125=HEAP[$parser_addr]; //@line 1663 "xmlparse.c"
        var $126=(($125+12)&4294967295); //@line 1663 "xmlparse.c"
        var $127=(($126+8)&4294967295); //@line 1663 "xmlparse.c"
        var $128=HEAP[$127]; //@line 1663 "xmlparse.c"
        var $129=HEAP[$parser_addr]; //@line 1663 "xmlparse.c"
        var $130=(($129+8)&4294967295); //@line 1663 "xmlparse.c"
        var $131=HEAP[$130]; //@line 1663 "xmlparse.c"
        FUNCTION_TABLE[$128]($131); //@line 1663 "xmlparse.c"
        __label__ = 13; break; //@line 1663 "xmlparse.c"
      case 13: // $bb12
        var $132=HEAP[$parser_addr]; //@line 1665 "xmlparse.c"
        var $133=(($132+28)&4294967295); //@line 1665 "xmlparse.c"
        var $134=HEAP[$133]; //@line 1665 "xmlparse.c"
        var $135=($134); //@line 1665 "xmlparse.c"
        var $136=HEAP[$parser_addr]; //@line 1665 "xmlparse.c"
        var $137=(($136+24)&4294967295); //@line 1665 "xmlparse.c"
        var $138=HEAP[$137]; //@line 1665 "xmlparse.c"
        var $139=($138); //@line 1665 "xmlparse.c"
        var $140=((($135) - ($139))&4294967295); //@line 1665 "xmlparse.c"
        var $141=HEAP[$newBuf]; //@line 1665 "xmlparse.c"
        var $142=(($141+$140)&4294967295); //@line 1665 "xmlparse.c"
        var $143=HEAP[$parser_addr]; //@line 1665 "xmlparse.c"
        var $144=(($143+28)&4294967295); //@line 1665 "xmlparse.c"
        HEAP[$144]=$142; //@line 1665 "xmlparse.c"
        var $145=HEAP[$parser_addr]; //@line 1666 "xmlparse.c"
        var $146=(($145+8)&4294967295); //@line 1666 "xmlparse.c"
        var $147=HEAP[$newBuf]; //@line 1666 "xmlparse.c"
        HEAP[$146]=$147; //@line 1666 "xmlparse.c"
        var $148=HEAP[$parser_addr]; //@line 1666 "xmlparse.c"
        var $149=(($148+8)&4294967295); //@line 1666 "xmlparse.c"
        var $150=HEAP[$149]; //@line 1666 "xmlparse.c"
        var $151=HEAP[$parser_addr]; //@line 1666 "xmlparse.c"
        var $152=(($151+24)&4294967295); //@line 1666 "xmlparse.c"
        HEAP[$152]=$150; //@line 1666 "xmlparse.c"
        __label__ = 14; break; //@line 1666 "xmlparse.c"
      case 14: // $bb13
        var $153=HEAP[$parser_addr]; //@line 1670 "xmlparse.c"
        var $154=(($153+28)&4294967295); //@line 1670 "xmlparse.c"
        var $155=HEAP[$154]; //@line 1670 "xmlparse.c"
        HEAP[$0]=$155; //@line 1670 "xmlparse.c"
        __label__ = 15; break; //@line 1670 "xmlparse.c"
      case 15: // $bb14
        var $156=HEAP[$0]; //@line 1600 "xmlparse.c"
        HEAP[$retval]=$156; //@line 1600 "xmlparse.c"
        __label__ = 16; break; //@line 1600 "xmlparse.c"
      case 16: // $return
        var $retval15=HEAP[$retval]; //@line 1600 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval15; //@line 1600 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_StopParser($parser, $resumable) {
    var __stackBase__  = STACKTOP; STACKTOP += 13; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 13);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $resumable_addr=__stackBase__+4;
        var $retval=__stackBase__+5;
        var $0=__stackBase__+9;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$resumable_addr]=$resumable;
        var $1=HEAP[$parser_addr]; //@line 1676 "xmlparse.c"
        var $2=(($1+464)&4294967295); //@line 1676 "xmlparse.c"
        var $3=(($2)&4294967295); //@line 1676 "xmlparse.c"
        var $4=HEAP[$3]; //@line 1676 "xmlparse.c"
        if ($4 == 2) {
          __label__ = 4; break;
        }
        else if ($4 == 3) {
          __label__ = 1; break;
        }
        else {
        __label__ = 5; break;
        }
        
      case 1: // $bb
        var $5=HEAP[$resumable_addr]; //@line 1678 "xmlparse.c"
        var $6=reSign(($5), 8, 0)!=0; //@line 1678 "xmlparse.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1678 "xmlparse.c"
      case 2: // $bb1
        var $7=HEAP[$parser_addr]; //@line 1679 "xmlparse.c"
        var $8=(($7+268)&4294967295); //@line 1679 "xmlparse.c"
        HEAP[$8]=33; //@line 1679 "xmlparse.c"
        HEAP[$0]=0; //@line 1680 "xmlparse.c"
        __label__ = 9; break; //@line 1680 "xmlparse.c"
      case 3: // $bb2
        var $9=HEAP[$parser_addr]; //@line 1682 "xmlparse.c"
        var $10=(($9+464)&4294967295); //@line 1682 "xmlparse.c"
        var $11=(($10)&4294967295); //@line 1682 "xmlparse.c"
        HEAP[$11]=2; //@line 1682 "xmlparse.c"
        __label__ = 8; break; //@line 1682 "xmlparse.c"
      case 4: // $bb3
        var $12=HEAP[$parser_addr]; //@line 1685 "xmlparse.c"
        var $13=(($12+268)&4294967295); //@line 1685 "xmlparse.c"
        HEAP[$13]=36; //@line 1685 "xmlparse.c"
        HEAP[$0]=0; //@line 1686 "xmlparse.c"
        __label__ = 9; break; //@line 1686 "xmlparse.c"
      case 5: // $bb4
        var $14=HEAP[$resumable_addr]; //@line 1688 "xmlparse.c"
        var $15=reSign(($14), 8, 0)!=0; //@line 1688 "xmlparse.c"
        if ($15) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1688 "xmlparse.c"
      case 6: // $bb5
        var $16=HEAP[$parser_addr]; //@line 1695 "xmlparse.c"
        var $17=(($16+464)&4294967295); //@line 1695 "xmlparse.c"
        var $18=(($17)&4294967295); //@line 1695 "xmlparse.c"
        HEAP[$18]=3; //@line 1695 "xmlparse.c"
        __label__ = 8; break; //@line 1695 "xmlparse.c"
      case 7: // $bb6
        var $19=HEAP[$parser_addr]; //@line 1698 "xmlparse.c"
        var $20=(($19+464)&4294967295); //@line 1698 "xmlparse.c"
        var $21=(($20)&4294967295); //@line 1698 "xmlparse.c"
        HEAP[$21]=2; //@line 1698 "xmlparse.c"
        __label__ = 8; break; //@line 1698 "xmlparse.c"
      case 8: // $bb7
        HEAP[$0]=1; //@line 1700 "xmlparse.c"
        __label__ = 9; break; //@line 1700 "xmlparse.c"
      case 9: // $bb8
        var $22=HEAP[$0]; //@line 1680 "xmlparse.c"
        HEAP[$retval]=$22; //@line 1680 "xmlparse.c"
        __label__ = 10; break; //@line 1680 "xmlparse.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 1680 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 1680 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_ResumeParser($parser) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $result=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$result]=1; //@line 1706 "xmlparse.c"
        var $1=HEAP[$parser_addr]; //@line 1708 "xmlparse.c"
        var $2=(($1+464)&4294967295); //@line 1708 "xmlparse.c"
        var $3=(($2)&4294967295); //@line 1708 "xmlparse.c"
        var $4=HEAP[$3]; //@line 1708 "xmlparse.c"
        var $5=((($4))|0)!=3; //@line 1708 "xmlparse.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1708 "xmlparse.c"
      case 1: // $bb
        var $6=HEAP[$parser_addr]; //@line 1709 "xmlparse.c"
        var $7=(($6+268)&4294967295); //@line 1709 "xmlparse.c"
        HEAP[$7]=34; //@line 1709 "xmlparse.c"
        HEAP[$0]=0; //@line 1710 "xmlparse.c"
        __label__ = 9; break; //@line 1710 "xmlparse.c"
      case 2: // $bb1
        var $8=HEAP[$parser_addr]; //@line 1712 "xmlparse.c"
        var $9=(($8+464)&4294967295); //@line 1712 "xmlparse.c"
        var $10=(($9)&4294967295); //@line 1712 "xmlparse.c"
        HEAP[$10]=1; //@line 1712 "xmlparse.c"
        var $11=HEAP[$parser_addr]; //@line 1714 "xmlparse.c"
        var $12=(($11+264)&4294967295); //@line 1714 "xmlparse.c"
        var $13=HEAP[$12]; //@line 1714 "xmlparse.c"
        var $14=HEAP[$parser_addr]; //@line 1714 "xmlparse.c"
        var $15=(($14+24)&4294967295); //@line 1714 "xmlparse.c"
        var $16=HEAP[$parser_addr]; //@line 1714 "xmlparse.c"
        var $17=(($16+40)&4294967295); //@line 1714 "xmlparse.c"
        var $18=HEAP[$17]; //@line 1714 "xmlparse.c"
        var $19=HEAP[$parser_addr]; //@line 1714 "xmlparse.c"
        var $20=(($19+24)&4294967295); //@line 1714 "xmlparse.c"
        var $21=HEAP[$20]; //@line 1714 "xmlparse.c"
        var $22=HEAP[$parser_addr]; //@line 1714 "xmlparse.c"
        var $23=FUNCTION_TABLE[$13]($22, $21, $18, $15); //@line 1714 "xmlparse.c"
        var $24=HEAP[$parser_addr]; //@line 1714 "xmlparse.c"
        var $25=(($24+268)&4294967295); //@line 1714 "xmlparse.c"
        HEAP[$25]=$23; //@line 1714 "xmlparse.c"
        var $26=HEAP[$parser_addr]; //@line 1716 "xmlparse.c"
        var $27=(($26+268)&4294967295); //@line 1716 "xmlparse.c"
        var $28=HEAP[$27]; //@line 1716 "xmlparse.c"
        var $29=((($28))|0)!=0; //@line 1716 "xmlparse.c"
        if ($29) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1716 "xmlparse.c"
      case 3: // $bb2
        var $30=HEAP[$parser_addr]; //@line 1717 "xmlparse.c"
        var $31=(($30+272)&4294967295); //@line 1717 "xmlparse.c"
        var $32=HEAP[$31]; //@line 1717 "xmlparse.c"
        var $33=HEAP[$parser_addr]; //@line 1717 "xmlparse.c"
        var $34=(($33+276)&4294967295); //@line 1717 "xmlparse.c"
        HEAP[$34]=$32; //@line 1717 "xmlparse.c"
        var $35=HEAP[$parser_addr]; //@line 1718 "xmlparse.c"
        var $36=(($35+264)&4294967295); //@line 1718 "xmlparse.c"
        HEAP[$36]=(FUNCTION_TABLE_OFFSET + 52); //@line 1718 "xmlparse.c"
        HEAP[$0]=0; //@line 1719 "xmlparse.c"
        __label__ = 9; break; //@line 1719 "xmlparse.c"
      case 4: // $bb3
        var $37=HEAP[$parser_addr]; //@line 1722 "xmlparse.c"
        var $38=(($37+464)&4294967295); //@line 1722 "xmlparse.c"
        var $39=(($38)&4294967295); //@line 1722 "xmlparse.c"
        var $40=HEAP[$39]; //@line 1722 "xmlparse.c"
        if ($40 == 0) {
          __label__ = 6; break;
        }
        else if ($40 == 1) {
          __label__ = 6; break;
        }
        else if ($40 == 3) {
          __label__ = 5; break;
        }
        else {
        __label__ = 8; break;
        }
        
      case 5: // $bb4
        HEAP[$result]=2; //@line 1724 "xmlparse.c"
        __label__ = 8; break; //@line 1724 "xmlparse.c"
      case 6: // $bb5
        var $41=HEAP[$parser_addr]; //@line 1728 "xmlparse.c"
        var $42=(($41+464)&4294967295); //@line 1728 "xmlparse.c"
        var $43=(($42+4)&4294967295); //@line 1728 "xmlparse.c"
        var $44=HEAP[$43]; //@line 1728 "xmlparse.c"
        var $45=reSign(($44), 8, 0)!=0; //@line 1728 "xmlparse.c"
        if ($45) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1728 "xmlparse.c"
      case 7: // $bb6
        var $46=HEAP[$parser_addr]; //@line 1729 "xmlparse.c"
        var $47=(($46+464)&4294967295); //@line 1729 "xmlparse.c"
        var $48=(($47)&4294967295); //@line 1729 "xmlparse.c"
        HEAP[$48]=2; //@line 1729 "xmlparse.c"
        var $49=HEAP[$result]; //@line 1730 "xmlparse.c"
        HEAP[$0]=$49; //@line 1730 "xmlparse.c"
        __label__ = 9; break; //@line 1730 "xmlparse.c"
      case 8: // $bb7
        var $50=HEAP[$parser_addr]; //@line 1736 "xmlparse.c"
        var $51=(($50+144)&4294967295); //@line 1736 "xmlparse.c"
        var $52=HEAP[$51]; //@line 1736 "xmlparse.c"
        var $53=(($52+48)&4294967295); //@line 1736 "xmlparse.c"
        var $54=HEAP[$53]; //@line 1736 "xmlparse.c"
        var $55=HEAP[$parser_addr]; //@line 1736 "xmlparse.c"
        var $56=(($55+392)&4294967295); //@line 1736 "xmlparse.c"
        var $57=HEAP[$parser_addr]; //@line 1736 "xmlparse.c"
        var $58=(($57+24)&4294967295); //@line 1736 "xmlparse.c"
        var $59=HEAP[$58]; //@line 1736 "xmlparse.c"
        var $60=HEAP[$parser_addr]; //@line 1736 "xmlparse.c"
        var $61=(($60+280)&4294967295); //@line 1736 "xmlparse.c"
        var $62=HEAP[$61]; //@line 1736 "xmlparse.c"
        var $63=HEAP[$parser_addr]; //@line 1736 "xmlparse.c"
        var $64=(($63+144)&4294967295); //@line 1736 "xmlparse.c"
        var $65=HEAP[$64]; //@line 1736 "xmlparse.c"
        FUNCTION_TABLE[$54]($65, $62, $59, $56); //@line 1736 "xmlparse.c"
        var $66=HEAP[$parser_addr]; //@line 1737 "xmlparse.c"
        var $67=(($66+24)&4294967295); //@line 1737 "xmlparse.c"
        var $68=HEAP[$67]; //@line 1737 "xmlparse.c"
        var $69=HEAP[$parser_addr]; //@line 1737 "xmlparse.c"
        var $70=(($69+280)&4294967295); //@line 1737 "xmlparse.c"
        HEAP[$70]=$68; //@line 1737 "xmlparse.c"
        var $71=HEAP[$result]; //@line 1738 "xmlparse.c"
        HEAP[$0]=$71; //@line 1738 "xmlparse.c"
        __label__ = 9; break; //@line 1738 "xmlparse.c"
      case 9: // $bb8
        var $72=HEAP[$0]; //@line 1710 "xmlparse.c"
        HEAP[$retval]=$72; //@line 1710 "xmlparse.c"
        __label__ = 10; break; //@line 1710 "xmlparse.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 1710 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 1710 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_GetParsingStatus($parser, $status) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $status_addr=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$status_addr]=$status;
        var $1=HEAP[$status_addr]; //@line 1744 "xmlparse.c"
        var $2=($1)==0; //@line 1744 "xmlparse.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1744 "xmlparse.c"
      case 1: // $bb
        ___assert_fail(((__str188)&4294967295), ((__str1189)&4294967295), 1744, ((___PRETTY_FUNCTION___3675)&4294967295)); //@line 1744 "xmlparse.c"
        throw "Reached an unreachable! Original .ll line: 14251"; //@line 1744 "xmlparse.c"
      case 2: // $bb1
        var $3=HEAP[$parser_addr]; //@line 1745 "xmlparse.c"
        var $4=(($3+464)&4294967295); //@line 1745 "xmlparse.c"
        var $5=(($0)&4294967295); //@line 1745 "xmlparse.c"
        var $6=(($4)&4294967295); //@line 1745 "xmlparse.c"
        var $7=HEAP[$6]; //@line 1745 "xmlparse.c"
        HEAP[$5]=$7; //@line 1745 "xmlparse.c"
        var $8=(($0+4)&4294967295); //@line 1745 "xmlparse.c"
        var $9=(($4+4)&4294967295); //@line 1745 "xmlparse.c"
        var $10=HEAP[$9]; //@line 1745 "xmlparse.c"
        HEAP[$8]=$10; //@line 1745 "xmlparse.c"
        var $11=HEAP[$status_addr]; //@line 1745 "xmlparse.c"
        var $12=(($11)&4294967295); //@line 1745 "xmlparse.c"
        var $13=(($0)&4294967295); //@line 1745 "xmlparse.c"
        var $14=HEAP[$13]; //@line 1745 "xmlparse.c"
        HEAP[$12]=$14; //@line 1745 "xmlparse.c"
        var $15=(($11+4)&4294967295); //@line 1745 "xmlparse.c"
        var $16=(($0+4)&4294967295); //@line 1745 "xmlparse.c"
        var $17=HEAP[$16]; //@line 1745 "xmlparse.c"
        HEAP[$15]=$17; //@line 1745 "xmlparse.c"
        __label__ = 3; break; //@line 1746 "xmlparse.c"
      case 3: // $return
        STACKTOP = __stackBase__;
        return; //@line 1746 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_GetErrorCode($parser) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        var $1=HEAP[$parser_addr]; //@line 1751 "xmlparse.c"
        var $2=(($1+268)&4294967295); //@line 1751 "xmlparse.c"
        var $3=HEAP[$2]; //@line 1751 "xmlparse.c"
        HEAP[$0]=$3; //@line 1751 "xmlparse.c"
        var $4=HEAP[$0]; //@line 1751 "xmlparse.c"
        HEAP[$retval]=$4; //@line 1751 "xmlparse.c"
        __label__ = 1; break; //@line 1751 "xmlparse.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 1751 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 1751 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_GetCurrentByteIndex($parser) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        var $1=HEAP[$parser_addr]; //@line 1757 "xmlparse.c"
        var $2=(($1+272)&4294967295); //@line 1757 "xmlparse.c"
        var $3=HEAP[$2]; //@line 1757 "xmlparse.c"
        var $4=($3)!=0; //@line 1757 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1757 "xmlparse.c"
      case 1: // $bb
        var $5=HEAP[$parser_addr]; //@line 1758 "xmlparse.c"
        var $6=(($5+36)&4294967295); //@line 1758 "xmlparse.c"
        var $7=HEAP[$6]; //@line 1758 "xmlparse.c"
        var $8=HEAP[$parser_addr]; //@line 1758 "xmlparse.c"
        var $9=(($8+40)&4294967295); //@line 1758 "xmlparse.c"
        var $10=HEAP[$9]; //@line 1758 "xmlparse.c"
        var $11=($10); //@line 1758 "xmlparse.c"
        var $12=HEAP[$parser_addr]; //@line 1758 "xmlparse.c"
        var $13=(($12+272)&4294967295); //@line 1758 "xmlparse.c"
        var $14=HEAP[$13]; //@line 1758 "xmlparse.c"
        var $15=($14); //@line 1758 "xmlparse.c"
        var $16=((($11) - ($15))&4294967295); //@line 1758 "xmlparse.c"
        var $17=((($7) - ($16))&4294967295); //@line 1758 "xmlparse.c"
        HEAP[$0]=$17; //@line 1758 "xmlparse.c"
        __label__ = 3; break; //@line 1758 "xmlparse.c"
      case 2: // $bb1
        HEAP[$0]=-1; //@line 1759 "xmlparse.c"
        __label__ = 3; break; //@line 1759 "xmlparse.c"
      case 3: // $bb2
        var $18=HEAP[$0]; //@line 1758 "xmlparse.c"
        HEAP[$retval]=$18; //@line 1758 "xmlparse.c"
        __label__ = 4; break; //@line 1758 "xmlparse.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 1758 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 1758 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_GetCurrentByteCount($parser) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        var $1=HEAP[$parser_addr]; //@line 1765 "xmlparse.c"
        var $2=(($1+276)&4294967295); //@line 1765 "xmlparse.c"
        var $3=HEAP[$2]; //@line 1765 "xmlparse.c"
        var $4=($3)!=0; //@line 1765 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 1765 "xmlparse.c"
      case 1: // $bb
        var $5=HEAP[$parser_addr]; //@line 1765 "xmlparse.c"
        var $6=(($5+272)&4294967295); //@line 1765 "xmlparse.c"
        var $7=HEAP[$6]; //@line 1765 "xmlparse.c"
        var $8=($7)!=0; //@line 1765 "xmlparse.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1765 "xmlparse.c"
      case 2: // $bb1
        var $9=HEAP[$parser_addr]; //@line 1766 "xmlparse.c"
        var $10=(($9+276)&4294967295); //@line 1766 "xmlparse.c"
        var $11=HEAP[$10]; //@line 1766 "xmlparse.c"
        var $12=($11); //@line 1766 "xmlparse.c"
        var $13=HEAP[$parser_addr]; //@line 1766 "xmlparse.c"
        var $14=(($13+272)&4294967295); //@line 1766 "xmlparse.c"
        var $15=HEAP[$14]; //@line 1766 "xmlparse.c"
        var $16=($15); //@line 1766 "xmlparse.c"
        var $17=((($12) - ($16))&4294967295); //@line 1766 "xmlparse.c"
        HEAP[$0]=$17; //@line 1766 "xmlparse.c"
        __label__ = 4; break; //@line 1766 "xmlparse.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 1767 "xmlparse.c"
        __label__ = 4; break; //@line 1767 "xmlparse.c"
      case 4: // $bb3
        var $18=HEAP[$0]; //@line 1766 "xmlparse.c"
        HEAP[$retval]=$18; //@line 1766 "xmlparse.c"
        __label__ = 5; break; //@line 1766 "xmlparse.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 1766 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 1766 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_GetInputContext($parser, $offset, $size) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $offset_addr=__stackBase__+4;
        var $size_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$offset_addr]=$offset;
        HEAP[$size_addr]=$size;
        HEAP[$0]=0; //@line 1780 "xmlparse.c"
        var $1=HEAP[$0]; //@line 1780 "xmlparse.c"
        HEAP[$retval]=$1; //@line 1780 "xmlparse.c"
        __label__ = 1; break; //@line 1780 "xmlparse.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 1780 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 1780 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_GetCurrentLineNumber($parser) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        var $1=HEAP[$parser_addr]; //@line 1786 "xmlparse.c"
        var $2=(($1+272)&4294967295); //@line 1786 "xmlparse.c"
        var $3=HEAP[$2]; //@line 1786 "xmlparse.c"
        var $4=($3)!=0; //@line 1786 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 1786 "xmlparse.c"
      case 1: // $bb
        var $5=HEAP[$parser_addr]; //@line 1786 "xmlparse.c"
        var $6=(($5+272)&4294967295); //@line 1786 "xmlparse.c"
        var $7=HEAP[$6]; //@line 1786 "xmlparse.c"
        var $8=HEAP[$parser_addr]; //@line 1786 "xmlparse.c"
        var $9=(($8+280)&4294967295); //@line 1786 "xmlparse.c"
        var $10=HEAP[$9]; //@line 1786 "xmlparse.c"
        var $11=($7) >= ($10); //@line 1786 "xmlparse.c"
        if ($11) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1786 "xmlparse.c"
      case 2: // $bb1
        var $12=HEAP[$parser_addr]; //@line 1787 "xmlparse.c"
        var $13=(($12+144)&4294967295); //@line 1787 "xmlparse.c"
        var $14=HEAP[$13]; //@line 1787 "xmlparse.c"
        var $15=(($14+48)&4294967295); //@line 1787 "xmlparse.c"
        var $16=HEAP[$15]; //@line 1787 "xmlparse.c"
        var $17=HEAP[$parser_addr]; //@line 1787 "xmlparse.c"
        var $18=(($17+392)&4294967295); //@line 1787 "xmlparse.c"
        var $19=HEAP[$parser_addr]; //@line 1787 "xmlparse.c"
        var $20=(($19+272)&4294967295); //@line 1787 "xmlparse.c"
        var $21=HEAP[$20]; //@line 1787 "xmlparse.c"
        var $22=HEAP[$parser_addr]; //@line 1787 "xmlparse.c"
        var $23=(($22+280)&4294967295); //@line 1787 "xmlparse.c"
        var $24=HEAP[$23]; //@line 1787 "xmlparse.c"
        var $25=HEAP[$parser_addr]; //@line 1787 "xmlparse.c"
        var $26=(($25+144)&4294967295); //@line 1787 "xmlparse.c"
        var $27=HEAP[$26]; //@line 1787 "xmlparse.c"
        FUNCTION_TABLE[$16]($27, $24, $21, $18); //@line 1787 "xmlparse.c"
        var $28=HEAP[$parser_addr]; //@line 1788 "xmlparse.c"
        var $29=(($28+272)&4294967295); //@line 1788 "xmlparse.c"
        var $30=HEAP[$29]; //@line 1788 "xmlparse.c"
        var $31=HEAP[$parser_addr]; //@line 1788 "xmlparse.c"
        var $32=(($31+280)&4294967295); //@line 1788 "xmlparse.c"
        HEAP[$32]=$30; //@line 1788 "xmlparse.c"
        __label__ = 3; break; //@line 1788 "xmlparse.c"
      case 3: // $bb2
        var $33=HEAP[$parser_addr]; //@line 1790 "xmlparse.c"
        var $34=(($33+392)&4294967295); //@line 1790 "xmlparse.c"
        var $35=(($34)&4294967295); //@line 1790 "xmlparse.c"
        var $36=HEAP[$35]; //@line 1790 "xmlparse.c"
        var $37=((($36) + 1)&4294967295); //@line 1790 "xmlparse.c"
        HEAP[$0]=$37; //@line 1790 "xmlparse.c"
        var $38=HEAP[$0]; //@line 1790 "xmlparse.c"
        HEAP[$retval]=$38; //@line 1790 "xmlparse.c"
        __label__ = 4; break; //@line 1790 "xmlparse.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 1790 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 1790 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_GetCurrentColumnNumber($parser) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        var $1=HEAP[$parser_addr]; //@line 1796 "xmlparse.c"
        var $2=(($1+272)&4294967295); //@line 1796 "xmlparse.c"
        var $3=HEAP[$2]; //@line 1796 "xmlparse.c"
        var $4=($3)!=0; //@line 1796 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 1796 "xmlparse.c"
      case 1: // $bb
        var $5=HEAP[$parser_addr]; //@line 1796 "xmlparse.c"
        var $6=(($5+272)&4294967295); //@line 1796 "xmlparse.c"
        var $7=HEAP[$6]; //@line 1796 "xmlparse.c"
        var $8=HEAP[$parser_addr]; //@line 1796 "xmlparse.c"
        var $9=(($8+280)&4294967295); //@line 1796 "xmlparse.c"
        var $10=HEAP[$9]; //@line 1796 "xmlparse.c"
        var $11=($7) >= ($10); //@line 1796 "xmlparse.c"
        if ($11) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1796 "xmlparse.c"
      case 2: // $bb1
        var $12=HEAP[$parser_addr]; //@line 1797 "xmlparse.c"
        var $13=(($12+144)&4294967295); //@line 1797 "xmlparse.c"
        var $14=HEAP[$13]; //@line 1797 "xmlparse.c"
        var $15=(($14+48)&4294967295); //@line 1797 "xmlparse.c"
        var $16=HEAP[$15]; //@line 1797 "xmlparse.c"
        var $17=HEAP[$parser_addr]; //@line 1797 "xmlparse.c"
        var $18=(($17+392)&4294967295); //@line 1797 "xmlparse.c"
        var $19=HEAP[$parser_addr]; //@line 1797 "xmlparse.c"
        var $20=(($19+272)&4294967295); //@line 1797 "xmlparse.c"
        var $21=HEAP[$20]; //@line 1797 "xmlparse.c"
        var $22=HEAP[$parser_addr]; //@line 1797 "xmlparse.c"
        var $23=(($22+280)&4294967295); //@line 1797 "xmlparse.c"
        var $24=HEAP[$23]; //@line 1797 "xmlparse.c"
        var $25=HEAP[$parser_addr]; //@line 1797 "xmlparse.c"
        var $26=(($25+144)&4294967295); //@line 1797 "xmlparse.c"
        var $27=HEAP[$26]; //@line 1797 "xmlparse.c"
        FUNCTION_TABLE[$16]($27, $24, $21, $18); //@line 1797 "xmlparse.c"
        var $28=HEAP[$parser_addr]; //@line 1798 "xmlparse.c"
        var $29=(($28+272)&4294967295); //@line 1798 "xmlparse.c"
        var $30=HEAP[$29]; //@line 1798 "xmlparse.c"
        var $31=HEAP[$parser_addr]; //@line 1798 "xmlparse.c"
        var $32=(($31+280)&4294967295); //@line 1798 "xmlparse.c"
        HEAP[$32]=$30; //@line 1798 "xmlparse.c"
        __label__ = 3; break; //@line 1798 "xmlparse.c"
      case 3: // $bb2
        var $33=HEAP[$parser_addr]; //@line 1800 "xmlparse.c"
        var $34=(($33+392)&4294967295); //@line 1800 "xmlparse.c"
        var $35=(($34+4)&4294967295); //@line 1800 "xmlparse.c"
        var $36=HEAP[$35]; //@line 1800 "xmlparse.c"
        HEAP[$0]=$36; //@line 1800 "xmlparse.c"
        var $37=HEAP[$0]; //@line 1800 "xmlparse.c"
        HEAP[$retval]=$37; //@line 1800 "xmlparse.c"
        __label__ = 4; break; //@line 1800 "xmlparse.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 1800 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 1800 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_FreeContentModel($parser, $model) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $model_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$model_addr]=$model;
        var $0=HEAP[$parser_addr]; //@line 1806 "xmlparse.c"
        var $1=(($0+12)&4294967295); //@line 1806 "xmlparse.c"
        var $2=(($1+8)&4294967295); //@line 1806 "xmlparse.c"
        var $3=HEAP[$2]; //@line 1806 "xmlparse.c"
        var $4=HEAP[$model_addr]; //@line 1806 "xmlparse.c"
        var $5=$4; //@line 1806 "xmlparse.c"
        FUNCTION_TABLE[$3]($5); //@line 1806 "xmlparse.c"
        __label__ = 1; break; //@line 1807 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1807 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_MemMalloc($parser, $size) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $size_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$size_addr]=$size;
        var $1=HEAP[$parser_addr]; //@line 1812 "xmlparse.c"
        var $2=(($1+12)&4294967295); //@line 1812 "xmlparse.c"
        var $3=(($2)&4294967295); //@line 1812 "xmlparse.c"
        var $4=HEAP[$3]; //@line 1812 "xmlparse.c"
        var $5=HEAP[$size_addr]; //@line 1812 "xmlparse.c"
        var $6=FUNCTION_TABLE[$4]($5); //@line 1812 "xmlparse.c"
        HEAP[$0]=$6; //@line 1812 "xmlparse.c"
        var $7=HEAP[$0]; //@line 1812 "xmlparse.c"
        HEAP[$retval]=$7; //@line 1812 "xmlparse.c"
        __label__ = 1; break; //@line 1812 "xmlparse.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 1812 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 1812 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_MemRealloc($parser, $ptr, $size) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $size_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$size_addr]=$size;
        var $1=HEAP[$parser_addr]; //@line 1818 "xmlparse.c"
        var $2=(($1+12)&4294967295); //@line 1818 "xmlparse.c"
        var $3=(($2+4)&4294967295); //@line 1818 "xmlparse.c"
        var $4=HEAP[$3]; //@line 1818 "xmlparse.c"
        var $5=HEAP[$ptr_addr]; //@line 1818 "xmlparse.c"
        var $6=HEAP[$size_addr]; //@line 1818 "xmlparse.c"
        var $7=FUNCTION_TABLE[$4]($5, $6); //@line 1818 "xmlparse.c"
        HEAP[$0]=$7; //@line 1818 "xmlparse.c"
        var $8=HEAP[$0]; //@line 1818 "xmlparse.c"
        HEAP[$retval]=$8; //@line 1818 "xmlparse.c"
        __label__ = 1; break; //@line 1818 "xmlparse.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 1818 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 1818 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_MemFree($parser, $ptr) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$ptr_addr]=$ptr;
        var $0=HEAP[$parser_addr]; //@line 1824 "xmlparse.c"
        var $1=(($0+12)&4294967295); //@line 1824 "xmlparse.c"
        var $2=(($1+8)&4294967295); //@line 1824 "xmlparse.c"
        var $3=HEAP[$2]; //@line 1824 "xmlparse.c"
        var $4=HEAP[$ptr_addr]; //@line 1824 "xmlparse.c"
        FUNCTION_TABLE[$3]($4); //@line 1824 "xmlparse.c"
        __label__ = 1; break; //@line 1825 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1825 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_DefaultCurrent($parser) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        var $0=HEAP[$parser_addr]; //@line 1830 "xmlparse.c"
        var $1=(($0+80)&4294967295); //@line 1830 "xmlparse.c"
        var $2=HEAP[$1]; //@line 1830 "xmlparse.c"
        var $3=($2)!=0; //@line 1830 "xmlparse.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 1830 "xmlparse.c"
      case 1: // $bb
        var $4=HEAP[$parser_addr]; //@line 1831 "xmlparse.c"
        var $5=(($4+284)&4294967295); //@line 1831 "xmlparse.c"
        var $6=HEAP[$5]; //@line 1831 "xmlparse.c"
        var $7=($6)!=0; //@line 1831 "xmlparse.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1831 "xmlparse.c"
      case 2: // $bb1
        var $8=HEAP[$parser_addr]; //@line 1832 "xmlparse.c"
        var $9=(($8+284)&4294967295); //@line 1832 "xmlparse.c"
        var $10=HEAP[$9]; //@line 1832 "xmlparse.c"
        var $11=(($10+4)&4294967295); //@line 1832 "xmlparse.c"
        var $12=HEAP[$11]; //@line 1832 "xmlparse.c"
        var $13=HEAP[$parser_addr]; //@line 1832 "xmlparse.c"
        var $14=(($13+284)&4294967295); //@line 1832 "xmlparse.c"
        var $15=HEAP[$14]; //@line 1832 "xmlparse.c"
        var $16=(($15)&4294967295); //@line 1832 "xmlparse.c"
        var $17=HEAP[$16]; //@line 1832 "xmlparse.c"
        var $18=HEAP[$parser_addr]; //@line 1832 "xmlparse.c"
        var $19=(($18+224)&4294967295); //@line 1832 "xmlparse.c"
        var $20=HEAP[$19]; //@line 1832 "xmlparse.c"
        var $21=HEAP[$parser_addr]; //@line 1832 "xmlparse.c"
        _reportDefault($21, $20, $17, $12); //@line 1832 "xmlparse.c"
        __label__ = 4; break; //@line 1832 "xmlparse.c"
      case 3: // $bb2
        var $22=HEAP[$parser_addr]; //@line 1837 "xmlparse.c"
        var $23=(($22+276)&4294967295); //@line 1837 "xmlparse.c"
        var $24=HEAP[$23]; //@line 1837 "xmlparse.c"
        var $25=HEAP[$parser_addr]; //@line 1837 "xmlparse.c"
        var $26=(($25+272)&4294967295); //@line 1837 "xmlparse.c"
        var $27=HEAP[$26]; //@line 1837 "xmlparse.c"
        var $28=HEAP[$parser_addr]; //@line 1837 "xmlparse.c"
        var $29=(($28+144)&4294967295); //@line 1837 "xmlparse.c"
        var $30=HEAP[$29]; //@line 1837 "xmlparse.c"
        var $31=HEAP[$parser_addr]; //@line 1837 "xmlparse.c"
        _reportDefault($31, $30, $27, $24); //@line 1837 "xmlparse.c"
        __label__ = 4; break; //@line 1837 "xmlparse.c"
      case 4: // $bb3
        __label__ = 5; break; //@line 1839 "xmlparse.c"
      case 5: // $return
        STACKTOP = __stackBase__;
        return; //@line 1839 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_ErrorString($code) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $code_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$code_addr]=$code;
        var $1=HEAP[$code_addr]; //@line 1887 "xmlparse.c"
        var $2=((($1))|0)!=0; //@line 1887 "xmlparse.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 1887 "xmlparse.c"
      case 1: // $bb
        var $3=HEAP[$code_addr]; //@line 1887 "xmlparse.c"
        var $4=((($3))>>>0) <= 40; //@line 1887 "xmlparse.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1887 "xmlparse.c"
      case 2: // $bb1
        var $5=HEAP[$code_addr]; //@line 1888 "xmlparse.c"
        var $6=((_message_3807+$5*4)&4294967295); //@line 1888 "xmlparse.c"
        var $7=HEAP[$6]; //@line 1888 "xmlparse.c"
        HEAP[$0]=$7; //@line 1888 "xmlparse.c"
        __label__ = 4; break; //@line 1888 "xmlparse.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 1889 "xmlparse.c"
        __label__ = 4; break; //@line 1889 "xmlparse.c"
      case 4: // $bb3
        var $8=HEAP[$0]; //@line 1888 "xmlparse.c"
        HEAP[$retval]=$8; //@line 1888 "xmlparse.c"
        __label__ = 5; break; //@line 1888 "xmlparse.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 1888 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 1888 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_ExpatVersion() {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval=__stackBase__;
        var $0=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$0]=((__str42230)&4294967295); //@line 1906 "xmlparse.c"
        var $1=HEAP[$0]; //@line 1906 "xmlparse.c"
        HEAP[$retval]=$1; //@line 1906 "xmlparse.c"
        __label__ = 1; break; //@line 1906 "xmlparse.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 1906 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 1906 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_ExpatVersionInfo($agg_result) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $version=__stackBase__;
        var $_alloca_point_=0;
        var $0=(($version)&4294967295); //@line 1917 "xmlparse.c"
        HEAP[$0]=2; //@line 1917 "xmlparse.c"
        var $1=(($version+4)&4294967295); //@line 1918 "xmlparse.c"
        HEAP[$1]=0; //@line 1918 "xmlparse.c"
        var $2=(($version+8)&4294967295); //@line 1919 "xmlparse.c"
        HEAP[$2]=0; //@line 1919 "xmlparse.c"
        var $3=(($agg_result)&4294967295); //@line 1921 "xmlparse.c"
        var $4=(($version)&4294967295); //@line 1921 "xmlparse.c"
        var $5=HEAP[$4]; //@line 1921 "xmlparse.c"
        HEAP[$3]=$5; //@line 1921 "xmlparse.c"
        var $6=(($agg_result+4)&4294967295); //@line 1921 "xmlparse.c"
        var $7=(($version+4)&4294967295); //@line 1921 "xmlparse.c"
        var $8=HEAP[$7]; //@line 1921 "xmlparse.c"
        HEAP[$6]=$8; //@line 1921 "xmlparse.c"
        var $9=(($agg_result+8)&4294967295); //@line 1921 "xmlparse.c"
        var $10=(($version+8)&4294967295); //@line 1921 "xmlparse.c"
        var $11=HEAP[$10]; //@line 1921 "xmlparse.c"
        HEAP[$9]=$11; //@line 1921 "xmlparse.c"
        __label__ = 1; break; //@line 1921 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1921 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XML_GetFeatureList() {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval=__stackBase__;
        var $0=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$0]=((_features_3829)&4294967295); //@line 1954 "xmlparse.c"
        var $1=HEAP[$0]; //@line 1954 "xmlparse.c"
        HEAP[$retval]=$1; //@line 1954 "xmlparse.c"
        __label__ = 1; break; //@line 1954 "xmlparse.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 1954 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 1954 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _storeRawNames($parser) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $tag=__stackBase__+12;
        var $bufSize=__stackBase__+16;
        var $nameLen=__stackBase__+20;
        var $rawNameBuf=__stackBase__+24;
        var $temp=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        var $1=HEAP[$parser_addr]; //@line 1965 "xmlparse.c"
        var $2=(($1+348)&4294967295); //@line 1965 "xmlparse.c"
        var $3=HEAP[$2]; //@line 1965 "xmlparse.c"
        HEAP[$tag]=$3; //@line 1965 "xmlparse.c"
        __label__ = 11; break; //@line 1965 "xmlparse.c"
      case 1: // $bb
        var $4=HEAP[$tag]; //@line 1968 "xmlparse.c"
        var $5=(($4+12)&4294967295); //@line 1968 "xmlparse.c"
        var $6=(($5+12)&4294967295); //@line 1968 "xmlparse.c"
        var $7=HEAP[$6]; //@line 1968 "xmlparse.c"
        var $8=((($7) + 1)&4294967295); //@line 1968 "xmlparse.c"
        HEAP[$nameLen]=$8; //@line 1968 "xmlparse.c"
        var $9=HEAP[$tag]; //@line 1969 "xmlparse.c"
        var $10=(($9+36)&4294967295); //@line 1969 "xmlparse.c"
        var $11=HEAP[$10]; //@line 1969 "xmlparse.c"
        var $12=HEAP[$nameLen]; //@line 1969 "xmlparse.c"
        var $13=(($11+$12)&4294967295); //@line 1969 "xmlparse.c"
        HEAP[$rawNameBuf]=$13; //@line 1969 "xmlparse.c"
        var $14=HEAP[$tag]; //@line 1975 "xmlparse.c"
        var $15=(($14+4)&4294967295); //@line 1975 "xmlparse.c"
        var $16=HEAP[$15]; //@line 1975 "xmlparse.c"
        var $17=HEAP[$rawNameBuf]; //@line 1975 "xmlparse.c"
        var $18=($16)==($17); //@line 1975 "xmlparse.c"
        if ($18) { __label__ = 12; break; } else { __label__ = 2; break; } //@line 1975 "xmlparse.c"
      case 2: // $bb1
        var $19=HEAP[$tag]; //@line 1980 "xmlparse.c"
        var $20=(($19+8)&4294967295); //@line 1980 "xmlparse.c"
        var $21=HEAP[$20]; //@line 1980 "xmlparse.c"
        var $22=HEAP[$nameLen]; //@line 1980 "xmlparse.c"
        var $23=((($21) + ($22))&4294967295); //@line 1980 "xmlparse.c"
        HEAP[$bufSize]=$23; //@line 1980 "xmlparse.c"
        var $24=HEAP[$tag]; //@line 1981 "xmlparse.c"
        var $25=(($24+40)&4294967295); //@line 1981 "xmlparse.c"
        var $26=HEAP[$25]; //@line 1981 "xmlparse.c"
        var $27=($26); //@line 1981 "xmlparse.c"
        var $28=HEAP[$tag]; //@line 1981 "xmlparse.c"
        var $29=(($28+36)&4294967295); //@line 1981 "xmlparse.c"
        var $30=HEAP[$29]; //@line 1981 "xmlparse.c"
        var $31=($30); //@line 1981 "xmlparse.c"
        var $32=((($27) - ($31))&4294967295); //@line 1981 "xmlparse.c"
        var $33=HEAP[$bufSize]; //@line 1981 "xmlparse.c"
        var $34=((($32))|0) < ((($33))|0); //@line 1981 "xmlparse.c"
        if ($34) { __label__ = 3; break; } else { __label__ = 10; break; } //@line 1981 "xmlparse.c"
      case 3: // $bb2
        var $35=HEAP[$parser_addr]; //@line 1982 "xmlparse.c"
        var $36=(($35+12)&4294967295); //@line 1982 "xmlparse.c"
        var $37=(($36+4)&4294967295); //@line 1982 "xmlparse.c"
        var $38=HEAP[$37]; //@line 1982 "xmlparse.c"
        var $39=HEAP[$bufSize]; //@line 1982 "xmlparse.c"
        var $40=HEAP[$tag]; //@line 1982 "xmlparse.c"
        var $41=(($40+36)&4294967295); //@line 1982 "xmlparse.c"
        var $42=HEAP[$41]; //@line 1982 "xmlparse.c"
        var $43=FUNCTION_TABLE[$38]($42, $39); //@line 1982 "xmlparse.c"
        HEAP[$temp]=$43; //@line 1982 "xmlparse.c"
        var $44=HEAP[$temp]; //@line 1983 "xmlparse.c"
        var $45=($44)==0; //@line 1983 "xmlparse.c"
        if ($45) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1983 "xmlparse.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 1984 "xmlparse.c"
        __label__ = 13; break; //@line 1984 "xmlparse.c"
      case 5: // $bb4
        var $46=HEAP[$tag]; //@line 1988 "xmlparse.c"
        var $47=(($46+12)&4294967295); //@line 1988 "xmlparse.c"
        var $48=(($47)&4294967295); //@line 1988 "xmlparse.c"
        var $49=HEAP[$48]; //@line 1988 "xmlparse.c"
        var $50=HEAP[$tag]; //@line 1988 "xmlparse.c"
        var $51=(($50+36)&4294967295); //@line 1988 "xmlparse.c"
        var $52=HEAP[$51]; //@line 1988 "xmlparse.c"
        var $53=($49)==($52); //@line 1988 "xmlparse.c"
        if ($53) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1988 "xmlparse.c"
      case 6: // $bb5
        var $54=HEAP[$tag]; //@line 1989 "xmlparse.c"
        var $55=(($54+12)&4294967295); //@line 1989 "xmlparse.c"
        var $56=(($55)&4294967295); //@line 1989 "xmlparse.c"
        var $57=HEAP[$temp]; //@line 1989 "xmlparse.c"
        HEAP[$56]=$57; //@line 1989 "xmlparse.c"
        __label__ = 7; break; //@line 1989 "xmlparse.c"
      case 7: // $bb6
        var $58=HEAP[$tag]; //@line 1993 "xmlparse.c"
        var $59=(($58+12)&4294967295); //@line 1993 "xmlparse.c"
        var $60=(($59+4)&4294967295); //@line 1993 "xmlparse.c"
        var $61=HEAP[$60]; //@line 1993 "xmlparse.c"
        var $62=($61)!=0; //@line 1993 "xmlparse.c"
        if ($62) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1993 "xmlparse.c"
      case 8: // $bb7
        var $63=HEAP[$tag]; //@line 1994 "xmlparse.c"
        var $64=(($63+12)&4294967295); //@line 1994 "xmlparse.c"
        var $65=(($64+4)&4294967295); //@line 1994 "xmlparse.c"
        var $66=HEAP[$65]; //@line 1994 "xmlparse.c"
        var $67=($66); //@line 1994 "xmlparse.c"
        var $68=HEAP[$tag]; //@line 1994 "xmlparse.c"
        var $69=(($68+36)&4294967295); //@line 1994 "xmlparse.c"
        var $70=HEAP[$69]; //@line 1994 "xmlparse.c"
        var $71=($70); //@line 1994 "xmlparse.c"
        var $72=((($67) - ($71))&4294967295); //@line 1994 "xmlparse.c"
        var $73=HEAP[$temp]; //@line 1994 "xmlparse.c"
        var $74=(($73+$72)&4294967295); //@line 1994 "xmlparse.c"
        var $75=HEAP[$tag]; //@line 1994 "xmlparse.c"
        var $76=(($75+12)&4294967295); //@line 1994 "xmlparse.c"
        var $77=(($76+4)&4294967295); //@line 1994 "xmlparse.c"
        HEAP[$77]=$74; //@line 1994 "xmlparse.c"
        __label__ = 9; break; //@line 1994 "xmlparse.c"
      case 9: // $bb8
        var $78=HEAP[$tag]; //@line 1996 "xmlparse.c"
        var $79=(($78+36)&4294967295); //@line 1996 "xmlparse.c"
        var $80=HEAP[$temp]; //@line 1996 "xmlparse.c"
        HEAP[$79]=$80; //@line 1996 "xmlparse.c"
        var $81=HEAP[$temp]; //@line 1997 "xmlparse.c"
        var $82=HEAP[$bufSize]; //@line 1997 "xmlparse.c"
        var $83=(($81+$82)&4294967295); //@line 1997 "xmlparse.c"
        var $84=HEAP[$tag]; //@line 1997 "xmlparse.c"
        var $85=(($84+40)&4294967295); //@line 1997 "xmlparse.c"
        HEAP[$85]=$83; //@line 1997 "xmlparse.c"
        var $86=HEAP[$temp]; //@line 1998 "xmlparse.c"
        var $87=HEAP[$nameLen]; //@line 1998 "xmlparse.c"
        var $88=(($86+$87)&4294967295); //@line 1998 "xmlparse.c"
        HEAP[$rawNameBuf]=$88; //@line 1998 "xmlparse.c"
        __label__ = 10; break; //@line 1998 "xmlparse.c"
      case 10: // $bb9
        var $89=HEAP[$tag]; //@line 2000 "xmlparse.c"
        var $90=(($89+8)&4294967295); //@line 2000 "xmlparse.c"
        var $91=HEAP[$90]; //@line 2000 "xmlparse.c"
        var $92=HEAP[$tag]; //@line 2000 "xmlparse.c"
        var $93=(($92+4)&4294967295); //@line 2000 "xmlparse.c"
        var $94=HEAP[$93]; //@line 2000 "xmlparse.c"
        var $95=HEAP[$rawNameBuf]; //@line 2000 "xmlparse.c"
        _llvm_memcpy_p0i8_p0i8_i32($95, $94, $91, 1, 0); //@line 2000 "xmlparse.c"
        var $96=HEAP[$tag]; //@line 2001 "xmlparse.c"
        var $97=(($96+4)&4294967295); //@line 2001 "xmlparse.c"
        var $98=HEAP[$rawNameBuf]; //@line 2001 "xmlparse.c"
        HEAP[$97]=$98; //@line 2001 "xmlparse.c"
        var $99=HEAP[$tag]; //@line 2002 "xmlparse.c"
        var $100=(($99)&4294967295); //@line 2002 "xmlparse.c"
        var $101=HEAP[$100]; //@line 2002 "xmlparse.c"
        HEAP[$tag]=$101; //@line 2002 "xmlparse.c"
        __label__ = 11; break; //@line 2002 "xmlparse.c"
      case 11: // $bb10
        var $102=HEAP[$tag]; //@line 1966 "xmlparse.c"
        var $103=($102)!=0; //@line 1966 "xmlparse.c"
        if ($103) { __label__ = 1; break; } else { __label__ = 12; break; } //@line 1966 "xmlparse.c"
      case 12: // $bb11
        HEAP[$0]=1; //@line 2004 "xmlparse.c"
        __label__ = 13; break; //@line 2004 "xmlparse.c"
      case 13: // $bb12
        var $104=HEAP[$0]; //@line 1984 "xmlparse.c"
        HEAP[$retval]=$104; //@line 1984 "xmlparse.c"
        __label__ = 14; break; //@line 1984 "xmlparse.c"
      case 14: // $return
        var $retval13=HEAP[$retval]; //@line 1984 "xmlparse.c"
        var $retval1314=((($retval13)) & 255); //@line 1984 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval1314; //@line 1984 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _contentProcessor($parser, $start, $end, $endPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $start_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $endPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $result=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$start_addr]=$start;
        HEAP[$end_addr]=$end;
        HEAP[$endPtr_addr]=$endPtr;
        var $1=HEAP[$parser_addr]; //@line 2014 "xmlparse.c"
        var $2=(($1+464)&4294967295); //@line 2014 "xmlparse.c"
        var $3=(($2+4)&4294967295); //@line 2014 "xmlparse.c"
        var $4=HEAP[$3]; //@line 2014 "xmlparse.c"
        var $5=reSign(($4), 8, 0)==0; //@line 2014 "xmlparse.c"
        var $6=unSign(($5), 1, 0); //@line 2014 "xmlparse.c"
        var $7=HEAP[$parser_addr]; //@line 2014 "xmlparse.c"
        var $8=(($7+144)&4294967295); //@line 2014 "xmlparse.c"
        var $9=HEAP[$8]; //@line 2014 "xmlparse.c"
        var $10=HEAP[$parser_addr]; //@line 2014 "xmlparse.c"
        var $11=HEAP[$start_addr]; //@line 2014 "xmlparse.c"
        var $12=HEAP[$end_addr]; //@line 2014 "xmlparse.c"
        var $13=HEAP[$endPtr_addr]; //@line 2014 "xmlparse.c"
        var $14=((($6)) & 255); //@line 2014 "xmlparse.c"
        var $15=_doContent($10, 0, $9, $11, $12, $13, $14); //@line 2014 "xmlparse.c"
        HEAP[$result]=$15; //@line 2014 "xmlparse.c"
        var $16=HEAP[$result]; //@line 2015 "xmlparse.c"
        var $17=((($16))|0)==0; //@line 2015 "xmlparse.c"
        if ($17) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 2015 "xmlparse.c"
      case 1: // $bb
        var $18=HEAP[$parser_addr]; //@line 2016 "xmlparse.c"
        var $19=_storeRawNames($18); //@line 2016 "xmlparse.c"
        var $20=reSign(($19), 8, 0)==0; //@line 2016 "xmlparse.c"
        if ($20) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2016 "xmlparse.c"
      case 2: // $bb1
        HEAP[$0]=1; //@line 2017 "xmlparse.c"
        __label__ = 4; break; //@line 2017 "xmlparse.c"
      case 3: // $bb2
        var $21=HEAP[$result]; //@line 2019 "xmlparse.c"
        HEAP[$0]=$21; //@line 2019 "xmlparse.c"
        __label__ = 4; break; //@line 2019 "xmlparse.c"
      case 4: // $bb3
        var $22=HEAP[$0]; //@line 2017 "xmlparse.c"
        HEAP[$retval]=$22; //@line 2017 "xmlparse.c"
        __label__ = 5; break; //@line 2017 "xmlparse.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 2017 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 2017 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _externalEntityInitProcessor($parser, $start, $end, $endPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $start_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $endPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $result=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$start_addr]=$start;
        HEAP[$end_addr]=$end;
        HEAP[$endPtr_addr]=$endPtr;
        var $1=HEAP[$parser_addr]; //@line 2028 "xmlparse.c"
        var $2=_initializeEncoding($1); //@line 2028 "xmlparse.c"
        HEAP[$result]=$2; //@line 2028 "xmlparse.c"
        var $3=HEAP[$result]; //@line 2029 "xmlparse.c"
        var $4=((($3))|0)!=0; //@line 2029 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2029 "xmlparse.c"
      case 1: // $bb
        var $5=HEAP[$result]; //@line 2030 "xmlparse.c"
        HEAP[$0]=$5; //@line 2030 "xmlparse.c"
        __label__ = 3; break; //@line 2030 "xmlparse.c"
      case 2: // $bb1
        var $6=HEAP[$parser_addr]; //@line 2031 "xmlparse.c"
        var $7=(($6+264)&4294967295); //@line 2031 "xmlparse.c"
        HEAP[$7]=(FUNCTION_TABLE_OFFSET + 54); //@line 2031 "xmlparse.c"
        var $8=HEAP[$parser_addr]; //@line 2032 "xmlparse.c"
        var $9=HEAP[$start_addr]; //@line 2032 "xmlparse.c"
        var $10=HEAP[$end_addr]; //@line 2032 "xmlparse.c"
        var $11=HEAP[$endPtr_addr]; //@line 2032 "xmlparse.c"
        var $12=_externalEntityInitProcessor2($8, $9, $10, $11); //@line 2032 "xmlparse.c"
        HEAP[$0]=$12; //@line 2032 "xmlparse.c"
        __label__ = 3; break; //@line 2032 "xmlparse.c"
      case 3: // $bb2
        var $13=HEAP[$0]; //@line 2030 "xmlparse.c"
        HEAP[$retval]=$13; //@line 2030 "xmlparse.c"
        __label__ = 4; break; //@line 2030 "xmlparse.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 2030 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 2030 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _externalEntityInitProcessor2($parser, $start, $end, $endPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $start_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $endPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $next=__stackBase__+24;
        var $tok=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$start_addr]=$start;
        HEAP[$end_addr]=$end;
        HEAP[$endPtr_addr]=$endPtr;
        var $1=HEAP[$start_addr]; //@line 2041 "xmlparse.c"
        HEAP[$next]=$1; //@line 2041 "xmlparse.c"
        var $2=HEAP[$parser_addr]; //@line 2042 "xmlparse.c"
        var $3=(($2+144)&4294967295); //@line 2042 "xmlparse.c"
        var $4=HEAP[$3]; //@line 2042 "xmlparse.c"
        var $5=(($4)&4294967295); //@line 2042 "xmlparse.c"
        var $6=(($5+4)&4294967295); //@line 2042 "xmlparse.c"
        var $7=HEAP[$6]; //@line 2042 "xmlparse.c"
        var $8=HEAP[$parser_addr]; //@line 2042 "xmlparse.c"
        var $9=(($8+144)&4294967295); //@line 2042 "xmlparse.c"
        var $10=HEAP[$9]; //@line 2042 "xmlparse.c"
        var $11=HEAP[$start_addr]; //@line 2042 "xmlparse.c"
        var $12=HEAP[$end_addr]; //@line 2042 "xmlparse.c"
        var $13=FUNCTION_TABLE[$7]($10, $11, $12, $next); //@line 2042 "xmlparse.c"
        HEAP[$tok]=$13; //@line 2042 "xmlparse.c"
        var $14=HEAP[$tok]; //@line 2043 "xmlparse.c"
        if ($14 == -2) {
          __label__ = 8; break;
        }
        else if ($14 == -1) {
          __label__ = 5; break;
        }
        else if ($14 == 14) {
          __label__ = 1; break;
        }
        else {
        __label__ = 11; break;
        }
        
      case 1: // $bb
        var $15=HEAP[$next]; //@line 2050 "xmlparse.c"
        var $16=HEAP[$end_addr]; //@line 2050 "xmlparse.c"
        var $17=($15)==($16); //@line 2050 "xmlparse.c"
        if ($17) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 2050 "xmlparse.c"
      case 2: // $bb1
        var $18=HEAP[$parser_addr]; //@line 2050 "xmlparse.c"
        var $19=(($18+464)&4294967295); //@line 2050 "xmlparse.c"
        var $20=(($19+4)&4294967295); //@line 2050 "xmlparse.c"
        var $21=HEAP[$20]; //@line 2050 "xmlparse.c"
        var $22=reSign(($21), 8, 0)==0; //@line 2050 "xmlparse.c"
        if ($22) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 2050 "xmlparse.c"
      case 3: // $bb2
        var $23=HEAP[$next]; //@line 2051 "xmlparse.c"
        var $24=HEAP[$endPtr_addr]; //@line 2051 "xmlparse.c"
        HEAP[$24]=$23; //@line 2051 "xmlparse.c"
        HEAP[$0]=0; //@line 2052 "xmlparse.c"
        __label__ = 12; break; //@line 2052 "xmlparse.c"
      case 4: // $bb3
        var $25=HEAP[$next]; //@line 2054 "xmlparse.c"
        HEAP[$start_addr]=$25; //@line 2054 "xmlparse.c"
        __label__ = 11; break; //@line 2054 "xmlparse.c"
      case 5: // $bb4
        var $26=HEAP[$parser_addr]; //@line 2057 "xmlparse.c"
        var $27=(($26+464)&4294967295); //@line 2057 "xmlparse.c"
        var $28=(($27+4)&4294967295); //@line 2057 "xmlparse.c"
        var $29=HEAP[$28]; //@line 2057 "xmlparse.c"
        var $30=reSign(($29), 8, 0)==0; //@line 2057 "xmlparse.c"
        if ($30) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 2057 "xmlparse.c"
      case 6: // $bb5
        var $31=HEAP[$endPtr_addr]; //@line 2058 "xmlparse.c"
        var $32=HEAP[$start_addr]; //@line 2058 "xmlparse.c"
        HEAP[$31]=$32; //@line 2058 "xmlparse.c"
        HEAP[$0]=0; //@line 2059 "xmlparse.c"
        __label__ = 12; break; //@line 2059 "xmlparse.c"
      case 7: // $bb6
        var $33=HEAP[$parser_addr]; //@line 2061 "xmlparse.c"
        var $34=(($33+272)&4294967295); //@line 2061 "xmlparse.c"
        var $35=HEAP[$start_addr]; //@line 2061 "xmlparse.c"
        HEAP[$34]=$35; //@line 2061 "xmlparse.c"
        HEAP[$0]=5; //@line 2062 "xmlparse.c"
        __label__ = 12; break; //@line 2062 "xmlparse.c"
      case 8: // $bb7
        var $36=HEAP[$parser_addr]; //@line 2064 "xmlparse.c"
        var $37=(($36+464)&4294967295); //@line 2064 "xmlparse.c"
        var $38=(($37+4)&4294967295); //@line 2064 "xmlparse.c"
        var $39=HEAP[$38]; //@line 2064 "xmlparse.c"
        var $40=reSign(($39), 8, 0)==0; //@line 2064 "xmlparse.c"
        if ($40) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 2064 "xmlparse.c"
      case 9: // $bb8
        var $41=HEAP[$endPtr_addr]; //@line 2065 "xmlparse.c"
        var $42=HEAP[$start_addr]; //@line 2065 "xmlparse.c"
        HEAP[$41]=$42; //@line 2065 "xmlparse.c"
        HEAP[$0]=0; //@line 2066 "xmlparse.c"
        __label__ = 12; break; //@line 2066 "xmlparse.c"
      case 10: // $bb9
        var $43=HEAP[$parser_addr]; //@line 2068 "xmlparse.c"
        var $44=(($43+272)&4294967295); //@line 2068 "xmlparse.c"
        var $45=HEAP[$start_addr]; //@line 2068 "xmlparse.c"
        HEAP[$44]=$45; //@line 2068 "xmlparse.c"
        HEAP[$0]=6; //@line 2069 "xmlparse.c"
        __label__ = 12; break; //@line 2069 "xmlparse.c"
      case 11: // $bb10
        var $46=HEAP[$parser_addr]; //@line 2071 "xmlparse.c"
        var $47=(($46+264)&4294967295); //@line 2071 "xmlparse.c"
        HEAP[$47]=(FUNCTION_TABLE_OFFSET + 56); //@line 2071 "xmlparse.c"
        var $48=HEAP[$parser_addr]; //@line 2072 "xmlparse.c"
        var $49=HEAP[$start_addr]; //@line 2072 "xmlparse.c"
        var $50=HEAP[$end_addr]; //@line 2072 "xmlparse.c"
        var $51=HEAP[$endPtr_addr]; //@line 2072 "xmlparse.c"
        var $52=_externalEntityInitProcessor3($48, $49, $50, $51); //@line 2072 "xmlparse.c"
        HEAP[$0]=$52; //@line 2072 "xmlparse.c"
        __label__ = 12; break; //@line 2072 "xmlparse.c"
      case 12: // $bb11
        var $53=HEAP[$0]; //@line 2052 "xmlparse.c"
        HEAP[$retval]=$53; //@line 2052 "xmlparse.c"
        __label__ = 13; break; //@line 2052 "xmlparse.c"
      case 13: // $return
        var $retval12=HEAP[$retval]; //@line 2052 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval12; //@line 2052 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _externalEntityInitProcessor3($parser, $start, $end, $endPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $start_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $endPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $tok=__stackBase__+24;
        var $next=__stackBase__+28;
        var $result=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$start_addr]=$start;
        HEAP[$end_addr]=$end;
        HEAP[$endPtr_addr]=$endPtr;
        var $1=HEAP[$start_addr]; //@line 2082 "xmlparse.c"
        HEAP[$next]=$1; //@line 2082 "xmlparse.c"
        var $2=HEAP[$parser_addr]; //@line 2083 "xmlparse.c"
        var $3=(($2+272)&4294967295); //@line 2083 "xmlparse.c"
        var $4=HEAP[$start_addr]; //@line 2083 "xmlparse.c"
        HEAP[$3]=$4; //@line 2083 "xmlparse.c"
        var $5=HEAP[$parser_addr]; //@line 2084 "xmlparse.c"
        var $6=(($5+144)&4294967295); //@line 2084 "xmlparse.c"
        var $7=HEAP[$6]; //@line 2084 "xmlparse.c"
        var $8=(($7)&4294967295); //@line 2084 "xmlparse.c"
        var $9=(($8+4)&4294967295); //@line 2084 "xmlparse.c"
        var $10=HEAP[$9]; //@line 2084 "xmlparse.c"
        var $11=HEAP[$parser_addr]; //@line 2084 "xmlparse.c"
        var $12=(($11+144)&4294967295); //@line 2084 "xmlparse.c"
        var $13=HEAP[$12]; //@line 2084 "xmlparse.c"
        var $14=HEAP[$start_addr]; //@line 2084 "xmlparse.c"
        var $15=HEAP[$end_addr]; //@line 2084 "xmlparse.c"
        var $16=FUNCTION_TABLE[$10]($13, $14, $15, $next); //@line 2084 "xmlparse.c"
        HEAP[$tok]=$16; //@line 2084 "xmlparse.c"
        var $17=HEAP[$next]; //@line 2085 "xmlparse.c"
        var $18=HEAP[$parser_addr]; //@line 2085 "xmlparse.c"
        var $19=(($18+276)&4294967295); //@line 2085 "xmlparse.c"
        HEAP[$19]=$17; //@line 2085 "xmlparse.c"
        var $20=HEAP[$tok]; //@line 2087 "xmlparse.c"
        if ($20 == -2) {
          __label__ = 10; break;
        }
        else if ($20 == -1) {
          __label__ = 7; break;
        }
        else if ($20 == 12) {
          __label__ = 1; break;
        }
        else {
        __label__ = 13; break;
        }
        
      case 1: // $bb
        var $21=HEAP[$next]; //@line 2091 "xmlparse.c"
        var $22=HEAP[$parser_addr]; //@line 2091 "xmlparse.c"
        var $23=HEAP[$start_addr]; //@line 2091 "xmlparse.c"
        var $24=_processXmlDecl($22, 1, $23, $21); //@line 2091 "xmlparse.c"
        HEAP[$result]=$24; //@line 2091 "xmlparse.c"
        var $25=HEAP[$result]; //@line 2092 "xmlparse.c"
        var $26=((($25))|0)!=0; //@line 2092 "xmlparse.c"
        if ($26) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2092 "xmlparse.c"
      case 2: // $bb1
        var $27=HEAP[$result]; //@line 2093 "xmlparse.c"
        HEAP[$0]=$27; //@line 2093 "xmlparse.c"
        __label__ = 14; break; //@line 2093 "xmlparse.c"
      case 3: // $bb2
        var $28=HEAP[$parser_addr]; //@line 2094 "xmlparse.c"
        var $29=(($28+464)&4294967295); //@line 2094 "xmlparse.c"
        var $30=(($29)&4294967295); //@line 2094 "xmlparse.c"
        var $31=HEAP[$30]; //@line 2094 "xmlparse.c"
        if ($31 == 2) {
          __label__ = 5; break;
        }
        else if ($31 == 3) {
          __label__ = 4; break;
        }
        else {
        __label__ = 6; break;
        }
        
      case 4: // $bb3
        var $32=HEAP[$next]; //@line 2096 "xmlparse.c"
        var $33=HEAP[$endPtr_addr]; //@line 2096 "xmlparse.c"
        HEAP[$33]=$32; //@line 2096 "xmlparse.c"
        HEAP[$0]=0; //@line 2097 "xmlparse.c"
        __label__ = 14; break; //@line 2097 "xmlparse.c"
      case 5: // $bb4
        HEAP[$0]=35; //@line 2099 "xmlparse.c"
        __label__ = 14; break; //@line 2099 "xmlparse.c"
      case 6: // $bb5
        var $34=HEAP[$next]; //@line 2101 "xmlparse.c"
        HEAP[$start_addr]=$34; //@line 2101 "xmlparse.c"
        __label__ = 13; break; //@line 2101 "xmlparse.c"
      case 7: // $bb6
        var $35=HEAP[$parser_addr]; //@line 2106 "xmlparse.c"
        var $36=(($35+464)&4294967295); //@line 2106 "xmlparse.c"
        var $37=(($36+4)&4294967295); //@line 2106 "xmlparse.c"
        var $38=HEAP[$37]; //@line 2106 "xmlparse.c"
        var $39=reSign(($38), 8, 0)==0; //@line 2106 "xmlparse.c"
        if ($39) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 2106 "xmlparse.c"
      case 8: // $bb7
        var $40=HEAP[$endPtr_addr]; //@line 2107 "xmlparse.c"
        var $41=HEAP[$start_addr]; //@line 2107 "xmlparse.c"
        HEAP[$40]=$41; //@line 2107 "xmlparse.c"
        HEAP[$0]=0; //@line 2108 "xmlparse.c"
        __label__ = 14; break; //@line 2108 "xmlparse.c"
      case 9: // $bb8
        HEAP[$0]=5; //@line 2110 "xmlparse.c"
        __label__ = 14; break; //@line 2110 "xmlparse.c"
      case 10: // $bb9
        var $42=HEAP[$parser_addr]; //@line 2112 "xmlparse.c"
        var $43=(($42+464)&4294967295); //@line 2112 "xmlparse.c"
        var $44=(($43+4)&4294967295); //@line 2112 "xmlparse.c"
        var $45=HEAP[$44]; //@line 2112 "xmlparse.c"
        var $46=reSign(($45), 8, 0)==0; //@line 2112 "xmlparse.c"
        if ($46) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 2112 "xmlparse.c"
      case 11: // $bb10
        var $47=HEAP[$endPtr_addr]; //@line 2113 "xmlparse.c"
        var $48=HEAP[$start_addr]; //@line 2113 "xmlparse.c"
        HEAP[$47]=$48; //@line 2113 "xmlparse.c"
        HEAP[$0]=0; //@line 2114 "xmlparse.c"
        __label__ = 14; break; //@line 2114 "xmlparse.c"
      case 12: // $bb11
        HEAP[$0]=6; //@line 2116 "xmlparse.c"
        __label__ = 14; break; //@line 2116 "xmlparse.c"
      case 13: // $bb12
        var $49=HEAP[$parser_addr]; //@line 2118 "xmlparse.c"
        var $50=(($49+264)&4294967295); //@line 2118 "xmlparse.c"
        HEAP[$50]=(FUNCTION_TABLE_OFFSET + 58); //@line 2118 "xmlparse.c"
        var $51=HEAP[$parser_addr]; //@line 2119 "xmlparse.c"
        var $52=(($51+296)&4294967295); //@line 2119 "xmlparse.c"
        HEAP[$52]=1; //@line 2119 "xmlparse.c"
        var $53=HEAP[$parser_addr]; //@line 2120 "xmlparse.c"
        var $54=HEAP[$start_addr]; //@line 2120 "xmlparse.c"
        var $55=HEAP[$end_addr]; //@line 2120 "xmlparse.c"
        var $56=HEAP[$endPtr_addr]; //@line 2120 "xmlparse.c"
        var $57=_externalEntityContentProcessor($53, $54, $55, $56); //@line 2120 "xmlparse.c"
        HEAP[$0]=$57; //@line 2120 "xmlparse.c"
        __label__ = 14; break; //@line 2120 "xmlparse.c"
      case 14: // $bb13
        var $58=HEAP[$0]; //@line 2093 "xmlparse.c"
        HEAP[$retval]=$58; //@line 2093 "xmlparse.c"
        __label__ = 15; break; //@line 2093 "xmlparse.c"
      case 15: // $return
        var $retval14=HEAP[$retval]; //@line 2093 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval14; //@line 2093 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _externalEntityContentProcessor($parser, $start, $end, $endPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $start_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $endPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $result=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$start_addr]=$start;
        HEAP[$end_addr]=$end;
        HEAP[$endPtr_addr]=$endPtr;
        var $1=HEAP[$parser_addr]; //@line 2130 "xmlparse.c"
        var $2=(($1+464)&4294967295); //@line 2130 "xmlparse.c"
        var $3=(($2+4)&4294967295); //@line 2130 "xmlparse.c"
        var $4=HEAP[$3]; //@line 2130 "xmlparse.c"
        var $5=reSign(($4), 8, 0)==0; //@line 2130 "xmlparse.c"
        var $6=unSign(($5), 1, 0); //@line 2130 "xmlparse.c"
        var $7=HEAP[$parser_addr]; //@line 2130 "xmlparse.c"
        var $8=(($7+144)&4294967295); //@line 2130 "xmlparse.c"
        var $9=HEAP[$8]; //@line 2130 "xmlparse.c"
        var $10=HEAP[$parser_addr]; //@line 2130 "xmlparse.c"
        var $11=HEAP[$start_addr]; //@line 2130 "xmlparse.c"
        var $12=HEAP[$end_addr]; //@line 2130 "xmlparse.c"
        var $13=HEAP[$endPtr_addr]; //@line 2130 "xmlparse.c"
        var $14=((($6)) & 255); //@line 2130 "xmlparse.c"
        var $15=_doContent($10, 1, $9, $11, $12, $13, $14); //@line 2130 "xmlparse.c"
        HEAP[$result]=$15; //@line 2130 "xmlparse.c"
        var $16=HEAP[$result]; //@line 2131 "xmlparse.c"
        var $17=((($16))|0)==0; //@line 2131 "xmlparse.c"
        if ($17) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 2131 "xmlparse.c"
      case 1: // $bb
        var $18=HEAP[$parser_addr]; //@line 2132 "xmlparse.c"
        var $19=_storeRawNames($18); //@line 2132 "xmlparse.c"
        var $20=reSign(($19), 8, 0)==0; //@line 2132 "xmlparse.c"
        if ($20) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2132 "xmlparse.c"
      case 2: // $bb1
        HEAP[$0]=1; //@line 2133 "xmlparse.c"
        __label__ = 4; break; //@line 2133 "xmlparse.c"
      case 3: // $bb2
        var $21=HEAP[$result]; //@line 2135 "xmlparse.c"
        HEAP[$0]=$21; //@line 2135 "xmlparse.c"
        __label__ = 4; break; //@line 2135 "xmlparse.c"
      case 4: // $bb3
        var $22=HEAP[$0]; //@line 2133 "xmlparse.c"
        HEAP[$retval]=$22; //@line 2133 "xmlparse.c"
        __label__ = 5; break; //@line 2133 "xmlparse.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 2133 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 2133 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _doContent($parser, $startTagLevel, $enc, $s, $end, $nextPtr, $haveMore) {
    var __stackBase__  = STACKTOP; STACKTOP += 193; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 193);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $startTagLevel_addr=__stackBase__+4;
        var $enc_addr=__stackBase__+8;
        var $s_addr=__stackBase__+12;
        var $end_addr=__stackBase__+16;
        var $nextPtr_addr=__stackBase__+20;
        var $haveMore_addr=__stackBase__+24;
        var $retval=__stackBase__+25;
        var $0=__stackBase__+29;
        var $dtd=__stackBase__+33;
        var $eventPP=__stackBase__+37;
        var $eventEndPP=__stackBase__+41;
        var $next=__stackBase__+45;
        var $tok=__stackBase__+49;
        var $c=__stackBase__+53;
        var $name=__stackBase__+54;
        var $entity=__stackBase__+58;
        var $ch=__stackBase__+62;
        var $result=__stackBase__+63;
        var $context=__stackBase__+67;
        var $tag=__stackBase__+71;
        var $result74=__stackBase__+75;
        var $toPtr=__stackBase__+79;
        var $rawNameEnd=__stackBase__+83;
        var $fromPtr=__stackBase__+87;
        var $bufSize=__stackBase__+91;
        var $convLen=__stackBase__+95;
        var $temp=__stackBase__+99;
        var $rawName=__stackBase__+103;
        var $result94=__stackBase__+107;
        var $bindings=__stackBase__+111;
        var $noElmHandlers=__stackBase__+115;
        var $name95=__stackBase__+116;
        var $b=__stackBase__+140;
        var $len=__stackBase__+144;
        var $rawName119=__stackBase__+148;
        var $tag120=__stackBase__+152;
        var $localPart=__stackBase__+156;
        var $prefix=__stackBase__+160;
        var $uri=__stackBase__+164;
        var $b140=__stackBase__+168;
        var $n=__stackBase__+172;
        var $buf=__stackBase__+176;
        var $c159=__stackBase__+180;
        var $result164=__stackBase__+181;
        var $dataPtr=__stackBase__+185;
        var $dataPtr190=__stackBase__+189;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$startTagLevel_addr]=$startTagLevel;
        HEAP[$enc_addr]=$enc;
        HEAP[$s_addr]=$s;
        HEAP[$end_addr]=$end;
        HEAP[$nextPtr_addr]=$nextPtr;
        HEAP[$haveMore_addr]=$haveMore;
        var $1=HEAP[$parser_addr]; //@line 2148 "xmlparse.c"
        var $2=(($1+340)&4294967295); //@line 2148 "xmlparse.c"
        var $3=HEAP[$2]; //@line 2148 "xmlparse.c"
        HEAP[$dtd]=$3; //@line 2148 "xmlparse.c"
        var $4=HEAP[$parser_addr]; //@line 2152 "xmlparse.c"
        var $5=(($4+144)&4294967295); //@line 2152 "xmlparse.c"
        var $6=HEAP[$5]; //@line 2152 "xmlparse.c"
        var $7=HEAP[$enc_addr]; //@line 2152 "xmlparse.c"
        var $8=($6)==($7); //@line 2152 "xmlparse.c"
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2152 "xmlparse.c"
      case 1: // $bb
        var $9=HEAP[$parser_addr]; //@line 2153 "xmlparse.c"
        var $10=(($9+272)&4294967295); //@line 2153 "xmlparse.c"
        HEAP[$eventPP]=$10; //@line 2153 "xmlparse.c"
        var $11=HEAP[$parser_addr]; //@line 2154 "xmlparse.c"
        var $12=(($11+276)&4294967295); //@line 2154 "xmlparse.c"
        HEAP[$eventEndPP]=$12; //@line 2154 "xmlparse.c"
        __label__ = 3; break; //@line 2154 "xmlparse.c"
      case 2: // $bb1
        var $13=HEAP[$parser_addr]; //@line 2157 "xmlparse.c"
        var $14=(($13+284)&4294967295); //@line 2157 "xmlparse.c"
        var $15=HEAP[$14]; //@line 2157 "xmlparse.c"
        var $16=(($15)&4294967295); //@line 2157 "xmlparse.c"
        HEAP[$eventPP]=$16; //@line 2157 "xmlparse.c"
        var $17=HEAP[$parser_addr]; //@line 2158 "xmlparse.c"
        var $18=(($17+284)&4294967295); //@line 2158 "xmlparse.c"
        var $19=HEAP[$18]; //@line 2158 "xmlparse.c"
        var $20=(($19+4)&4294967295); //@line 2158 "xmlparse.c"
        HEAP[$eventEndPP]=$20; //@line 2158 "xmlparse.c"
        __label__ = 3; break; //@line 2158 "xmlparse.c"
      case 3: // $bb2
        var $21=HEAP[$s_addr]; //@line 2160 "xmlparse.c"
        var $22=HEAP[$eventPP]; //@line 2160 "xmlparse.c"
        HEAP[$22]=$21; //@line 2160 "xmlparse.c"
        __label__ = 4; break; //@line 2160 "xmlparse.c"
      case 4: // $bb3
        var $23=HEAP[$s_addr]; //@line 2163 "xmlparse.c"
        HEAP[$next]=$23; //@line 2163 "xmlparse.c"
        var $24=HEAP[$enc_addr]; //@line 2164 "xmlparse.c"
        var $25=(($24)&4294967295); //@line 2164 "xmlparse.c"
        var $26=(($25+4)&4294967295); //@line 2164 "xmlparse.c"
        var $27=HEAP[$26]; //@line 2164 "xmlparse.c"
        var $28=HEAP[$s_addr]; //@line 2164 "xmlparse.c"
        var $29=HEAP[$enc_addr]; //@line 2164 "xmlparse.c"
        var $30=HEAP[$end_addr]; //@line 2164 "xmlparse.c"
        var $31=FUNCTION_TABLE[$27]($29, $28, $30, $next); //@line 2164 "xmlparse.c"
        HEAP[$tok]=$31; //@line 2164 "xmlparse.c"
        var $32=HEAP[$next]; //@line 2165 "xmlparse.c"
        var $33=HEAP[$eventEndPP]; //@line 2165 "xmlparse.c"
        HEAP[$33]=$32; //@line 2165 "xmlparse.c"
        var $34=HEAP[$tok]; //@line 2166 "xmlparse.c"
        if ($34 == -5) {
          __label__ = 164; break;
        }
        else if ($34 == -4) {
          __label__ = 16; break;
        }
        else if ($34 == -3) {
          __label__ = 5; break;
        }
        else if ($34 == -2) {
          __label__ = 27; break;
        }
        else if ($34 == -1) {
          __label__ = 24; break;
        }
        else if ($34 == 0) {
          __label__ = 23; break;
        }
        else if ($34 == 1) {
          __label__ = 74; break;
        }
        else if ($34 == 2) {
          __label__ = 74; break;
        }
        else if ($34 == 3) {
          __label__ = 93; break;
        }
        else if ($34 == 4) {
          __label__ = 93; break;
        }
        else if ($34 == 5) {
          __label__ = 114; break;
        }
        else if ($34 == 6) {
          __label__ = 178; break;
        }
        else if ($34 == 7) {
          __label__ = 150; break;
        }
        else if ($34 == 8) {
          __label__ = 155; break;
        }
        else if ($34 == 9) {
          __label__ = 30; break;
        }
        else if ($34 == 10) {
          __label__ = 142; break;
        }
        else if ($34 == 11) {
          __label__ = 188; break;
        }
        else if ($34 == 12) {
          __label__ = 149; break;
        }
        else if ($34 == 13) {
          __label__ = 191; break;
        }
        else {
        __label__ = 194; break;
        }
        
      case 5: // $bb4
        var $35=HEAP[$haveMore_addr]; //@line 2168 "xmlparse.c"
        var $36=reSign(($35), 8, 0)!=0; //@line 2168 "xmlparse.c"
        if ($36) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 2168 "xmlparse.c"
      case 6: // $bb5
        var $37=HEAP[$s_addr]; //@line 2169 "xmlparse.c"
        var $38=HEAP[$nextPtr_addr]; //@line 2169 "xmlparse.c"
        HEAP[$38]=$37; //@line 2169 "xmlparse.c"
        HEAP[$0]=0; //@line 2170 "xmlparse.c"
        __label__ = 200; break; //@line 2170 "xmlparse.c"
      case 7: // $bb6
        var $39=HEAP[$eventEndPP]; //@line 2172 "xmlparse.c"
        var $40=HEAP[$end_addr]; //@line 2172 "xmlparse.c"
        HEAP[$39]=$40; //@line 2172 "xmlparse.c"
        var $41=HEAP[$parser_addr]; //@line 2173 "xmlparse.c"
        var $42=(($41+60)&4294967295); //@line 2173 "xmlparse.c"
        var $43=HEAP[$42]; //@line 2173 "xmlparse.c"
        var $44=($43)!=0; //@line 2173 "xmlparse.c"
        if ($44) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 2173 "xmlparse.c"
      case 8: // $bb7
        HEAP[$c]=10; //@line 2174 "xmlparse.c"
        var $45=HEAP[$parser_addr]; //@line 2175 "xmlparse.c"
        var $46=(($45+60)&4294967295); //@line 2175 "xmlparse.c"
        var $47=HEAP[$46]; //@line 2175 "xmlparse.c"
        var $48=HEAP[$parser_addr]; //@line 2175 "xmlparse.c"
        var $49=(($48+4)&4294967295); //@line 2175 "xmlparse.c"
        var $50=HEAP[$49]; //@line 2175 "xmlparse.c"
        FUNCTION_TABLE[$47]($50, $c, 1); //@line 2175 "xmlparse.c"
        __label__ = 11; break; //@line 2175 "xmlparse.c"
      case 9: // $bb8
        var $51=HEAP[$parser_addr]; //@line 2177 "xmlparse.c"
        var $52=(($51+80)&4294967295); //@line 2177 "xmlparse.c"
        var $53=HEAP[$52]; //@line 2177 "xmlparse.c"
        var $54=($53)!=0; //@line 2177 "xmlparse.c"
        if ($54) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 2177 "xmlparse.c"
      case 10: // $bb9
        var $55=HEAP[$s_addr]; //@line 2178 "xmlparse.c"
        var $56=HEAP[$parser_addr]; //@line 2178 "xmlparse.c"
        var $57=HEAP[$enc_addr]; //@line 2178 "xmlparse.c"
        var $58=HEAP[$end_addr]; //@line 2178 "xmlparse.c"
        _reportDefault($56, $57, $55, $58); //@line 2178 "xmlparse.c"
        __label__ = 11; break; //@line 2178 "xmlparse.c"
      case 11: // $bb10
        var $59=HEAP[$startTagLevel_addr]; //@line 2182 "xmlparse.c"
        var $60=((($59))|0)==0; //@line 2182 "xmlparse.c"
        if ($60) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 2182 "xmlparse.c"
      case 12: // $bb11
        HEAP[$0]=3; //@line 2183 "xmlparse.c"
        __label__ = 200; break; //@line 2183 "xmlparse.c"
      case 13: // $bb12
        var $61=HEAP[$parser_addr]; //@line 2184 "xmlparse.c"
        var $62=(($61+296)&4294967295); //@line 2184 "xmlparse.c"
        var $63=HEAP[$62]; //@line 2184 "xmlparse.c"
        var $64=HEAP[$startTagLevel_addr]; //@line 2184 "xmlparse.c"
        var $65=((($63))|0)!=((($64))|0); //@line 2184 "xmlparse.c"
        if ($65) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 2184 "xmlparse.c"
      case 14: // $bb13
        HEAP[$0]=13; //@line 2185 "xmlparse.c"
        __label__ = 200; break; //@line 2185 "xmlparse.c"
      case 15: // $bb14
        var $66=HEAP[$nextPtr_addr]; //@line 2186 "xmlparse.c"
        var $67=HEAP[$end_addr]; //@line 2186 "xmlparse.c"
        HEAP[$66]=$67; //@line 2186 "xmlparse.c"
        HEAP[$0]=0; //@line 2187 "xmlparse.c"
        __label__ = 200; break; //@line 2187 "xmlparse.c"
      case 16: // $bb15
        var $68=HEAP[$haveMore_addr]; //@line 2189 "xmlparse.c"
        var $69=reSign(($68), 8, 0)!=0; //@line 2189 "xmlparse.c"
        if ($69) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 2189 "xmlparse.c"
      case 17: // $bb16
        var $70=HEAP[$s_addr]; //@line 2190 "xmlparse.c"
        var $71=HEAP[$nextPtr_addr]; //@line 2190 "xmlparse.c"
        HEAP[$71]=$70; //@line 2190 "xmlparse.c"
        HEAP[$0]=0; //@line 2191 "xmlparse.c"
        __label__ = 200; break; //@line 2191 "xmlparse.c"
      case 18: // $bb17
        var $72=HEAP[$startTagLevel_addr]; //@line 2193 "xmlparse.c"
        var $73=((($72))|0) > 0; //@line 2193 "xmlparse.c"
        if ($73) { __label__ = 19; break; } else { __label__ = 22; break; } //@line 2193 "xmlparse.c"
      case 19: // $bb18
        var $74=HEAP[$parser_addr]; //@line 2194 "xmlparse.c"
        var $75=(($74+296)&4294967295); //@line 2194 "xmlparse.c"
        var $76=HEAP[$75]; //@line 2194 "xmlparse.c"
        var $77=HEAP[$startTagLevel_addr]; //@line 2194 "xmlparse.c"
        var $78=((($76))|0)!=((($77))|0); //@line 2194 "xmlparse.c"
        if ($78) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 2194 "xmlparse.c"
      case 20: // $bb19
        HEAP[$0]=13; //@line 2195 "xmlparse.c"
        __label__ = 200; break; //@line 2195 "xmlparse.c"
      case 21: // $bb20
        var $79=HEAP[$s_addr]; //@line 2196 "xmlparse.c"
        var $80=HEAP[$nextPtr_addr]; //@line 2196 "xmlparse.c"
        HEAP[$80]=$79; //@line 2196 "xmlparse.c"
        HEAP[$0]=0; //@line 2197 "xmlparse.c"
        __label__ = 200; break; //@line 2197 "xmlparse.c"
      case 22: // $bb21
        HEAP[$0]=3; //@line 2199 "xmlparse.c"
        __label__ = 200; break; //@line 2199 "xmlparse.c"
      case 23: // $bb22
        var $81=HEAP[$next]; //@line 2201 "xmlparse.c"
        var $82=HEAP[$eventPP]; //@line 2201 "xmlparse.c"
        HEAP[$82]=$81; //@line 2201 "xmlparse.c"
        HEAP[$0]=4; //@line 2202 "xmlparse.c"
        __label__ = 200; break; //@line 2202 "xmlparse.c"
      case 24: // $bb23
        var $83=HEAP[$haveMore_addr]; //@line 2204 "xmlparse.c"
        var $84=reSign(($83), 8, 0)!=0; //@line 2204 "xmlparse.c"
        if ($84) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 2204 "xmlparse.c"
      case 25: // $bb24
        var $85=HEAP[$s_addr]; //@line 2205 "xmlparse.c"
        var $86=HEAP[$nextPtr_addr]; //@line 2205 "xmlparse.c"
        HEAP[$86]=$85; //@line 2205 "xmlparse.c"
        HEAP[$0]=0; //@line 2206 "xmlparse.c"
        __label__ = 200; break; //@line 2206 "xmlparse.c"
      case 26: // $bb25
        HEAP[$0]=5; //@line 2208 "xmlparse.c"
        __label__ = 200; break; //@line 2208 "xmlparse.c"
      case 27: // $bb26
        var $87=HEAP[$haveMore_addr]; //@line 2210 "xmlparse.c"
        var $88=reSign(($87), 8, 0)!=0; //@line 2210 "xmlparse.c"
        if ($88) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 2210 "xmlparse.c"
      case 28: // $bb27
        var $89=HEAP[$s_addr]; //@line 2211 "xmlparse.c"
        var $90=HEAP[$nextPtr_addr]; //@line 2211 "xmlparse.c"
        HEAP[$90]=$89; //@line 2211 "xmlparse.c"
        HEAP[$0]=0; //@line 2212 "xmlparse.c"
        __label__ = 200; break; //@line 2212 "xmlparse.c"
      case 29: // $bb28
        HEAP[$0]=6; //@line 2214 "xmlparse.c"
        __label__ = 200; break; //@line 2214 "xmlparse.c"
      case 30: // $bb29
        var $91=HEAP[$enc_addr]; //@line 2219 "xmlparse.c"
        var $92=(($91+44)&4294967295); //@line 2219 "xmlparse.c"
        var $93=HEAP[$92]; //@line 2219 "xmlparse.c"
        var $94=HEAP[$next]; //@line 2219 "xmlparse.c"
        var $95=HEAP[$enc_addr]; //@line 2219 "xmlparse.c"
        var $96=(($95+64)&4294967295); //@line 2219 "xmlparse.c"
        var $97=HEAP[$96]; //@line 2219 "xmlparse.c"
        var $98=((0 - ($97))&4294967295); //@line 2219 "xmlparse.c"
        var $99=(($94+$98)&4294967295); //@line 2219 "xmlparse.c"
        var $100=HEAP[$s_addr]; //@line 2219 "xmlparse.c"
        var $101=HEAP[$enc_addr]; //@line 2219 "xmlparse.c"
        var $102=(($101+64)&4294967295); //@line 2219 "xmlparse.c"
        var $103=HEAP[$102]; //@line 2219 "xmlparse.c"
        var $104=(($100+$103)&4294967295); //@line 2219 "xmlparse.c"
        var $105=HEAP[$enc_addr]; //@line 2219 "xmlparse.c"
        var $106=FUNCTION_TABLE[$93]($105, $104, $99); //@line 2219 "xmlparse.c"
        var $107=((($106)) & 255); //@line 2219 "xmlparse.c"
        HEAP[$ch]=$107; //@line 2219 "xmlparse.c"
        var $108=HEAP[$ch]; //@line 2222 "xmlparse.c"
        var $109=reSign(($108), 8, 0)!=0; //@line 2222 "xmlparse.c"
        if ($109) { __label__ = 31; break; } else { __label__ = 36; break; } //@line 2222 "xmlparse.c"
      case 31: // $bb30
        var $110=HEAP[$parser_addr]; //@line 2223 "xmlparse.c"
        var $111=(($110+60)&4294967295); //@line 2223 "xmlparse.c"
        var $112=HEAP[$111]; //@line 2223 "xmlparse.c"
        var $113=($112)!=0; //@line 2223 "xmlparse.c"
        if ($113) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 2223 "xmlparse.c"
      case 32: // $bb31
        var $114=HEAP[$parser_addr]; //@line 2224 "xmlparse.c"
        var $115=(($114+60)&4294967295); //@line 2224 "xmlparse.c"
        var $116=HEAP[$115]; //@line 2224 "xmlparse.c"
        var $117=HEAP[$parser_addr]; //@line 2224 "xmlparse.c"
        var $118=(($117+4)&4294967295); //@line 2224 "xmlparse.c"
        var $119=HEAP[$118]; //@line 2224 "xmlparse.c"
        FUNCTION_TABLE[$116]($119, $ch, 1); //@line 2224 "xmlparse.c"
        __label__ = 35; break; //@line 2224 "xmlparse.c"
      case 33: // $bb32
        var $120=HEAP[$parser_addr]; //@line 2225 "xmlparse.c"
        var $121=(($120+80)&4294967295); //@line 2225 "xmlparse.c"
        var $122=HEAP[$121]; //@line 2225 "xmlparse.c"
        var $123=($122)!=0; //@line 2225 "xmlparse.c"
        if ($123) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 2225 "xmlparse.c"
      case 34: // $bb33
        var $124=HEAP[$next]; //@line 2226 "xmlparse.c"
        var $125=HEAP[$s_addr]; //@line 2226 "xmlparse.c"
        var $126=HEAP[$parser_addr]; //@line 2226 "xmlparse.c"
        var $127=HEAP[$enc_addr]; //@line 2226 "xmlparse.c"
        _reportDefault($126, $127, $125, $124); //@line 2226 "xmlparse.c"
        __label__ = 35; break; //@line 2226 "xmlparse.c"
      case 35: // $bb34
        __label__ = 196; break; //@line 2226 "xmlparse.c"
      case 36: // $bb35
        var $128=HEAP[$next]; //@line 2229 "xmlparse.c"
        var $129=HEAP[$enc_addr]; //@line 2229 "xmlparse.c"
        var $130=(($129+64)&4294967295); //@line 2229 "xmlparse.c"
        var $131=HEAP[$130]; //@line 2229 "xmlparse.c"
        var $132=((0 - ($131))&4294967295); //@line 2229 "xmlparse.c"
        var $133=(($128+$132)&4294967295); //@line 2229 "xmlparse.c"
        var $134=HEAP[$s_addr]; //@line 2229 "xmlparse.c"
        var $135=HEAP[$enc_addr]; //@line 2229 "xmlparse.c"
        var $136=(($135+64)&4294967295); //@line 2229 "xmlparse.c"
        var $137=HEAP[$136]; //@line 2229 "xmlparse.c"
        var $138=(($134+$137)&4294967295); //@line 2229 "xmlparse.c"
        var $139=HEAP[$dtd]; //@line 2229 "xmlparse.c"
        var $140=(($139+80)&4294967295); //@line 2229 "xmlparse.c"
        var $141=HEAP[$enc_addr]; //@line 2229 "xmlparse.c"
        var $142=_poolStoreString($140, $141, $138, $133); //@line 2229 "xmlparse.c"
        HEAP[$name]=$142; //@line 2229 "xmlparse.c"
        var $143=HEAP[$name]; //@line 2232 "xmlparse.c"
        var $144=($143)==0; //@line 2232 "xmlparse.c"
        if ($144) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 2232 "xmlparse.c"
      case 37: // $bb36
        HEAP[$0]=1; //@line 2233 "xmlparse.c"
        __label__ = 200; break; //@line 2233 "xmlparse.c"
      case 38: // $bb37
        var $145=HEAP[$dtd]; //@line 2234 "xmlparse.c"
        var $146=(($145)&4294967295); //@line 2234 "xmlparse.c"
        var $147=HEAP[$name]; //@line 2234 "xmlparse.c"
        var $148=_lookup($146, $147, 0); //@line 2234 "xmlparse.c"
        var $149=$148; //@line 2234 "xmlparse.c"
        HEAP[$entity]=$149; //@line 2234 "xmlparse.c"
        var $150=HEAP[$dtd]; //@line 2235 "xmlparse.c"
        var $151=(($150+80)&4294967295); //@line 2235 "xmlparse.c"
        var $152=(($151+16)&4294967295); //@line 2235 "xmlparse.c"
        var $153=HEAP[$152]; //@line 2235 "xmlparse.c"
        var $154=HEAP[$dtd]; //@line 2235 "xmlparse.c"
        var $155=(($154+80)&4294967295); //@line 2235 "xmlparse.c"
        var $156=(($155+12)&4294967295); //@line 2235 "xmlparse.c"
        HEAP[$156]=$153; //@line 2235 "xmlparse.c"
        var $157=HEAP[$dtd]; //@line 2240 "xmlparse.c"
        var $158=(($157+129)&4294967295); //@line 2240 "xmlparse.c"
        var $159=HEAP[$158]; //@line 2240 "xmlparse.c"
        var $160=reSign(($159), 8, 0)==0; //@line 2240 "xmlparse.c"
        if ($160) { __label__ = 40; break; } else { __label__ = 39; break; } //@line 2240 "xmlparse.c"
      case 39: // $bb38
        var $161=HEAP[$dtd]; //@line 2240 "xmlparse.c"
        var $162=(($161+130)&4294967295); //@line 2240 "xmlparse.c"
        var $163=HEAP[$162]; //@line 2240 "xmlparse.c"
        var $164=reSign(($163), 8, 0)!=0; //@line 2240 "xmlparse.c"
        if ($164) { __label__ = 40; break; } else { __label__ = 45; break; } //@line 2240 "xmlparse.c"
      case 40: // $bb39
        var $165=HEAP[$entity]; //@line 2241 "xmlparse.c"
        var $166=($165)==0; //@line 2241 "xmlparse.c"
        if ($166) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 2241 "xmlparse.c"
      case 41: // $bb40
        HEAP[$0]=11; //@line 2242 "xmlparse.c"
        __label__ = 200; break; //@line 2242 "xmlparse.c"
      case 42: // $bb41
        var $167=HEAP[$entity]; //@line 2243 "xmlparse.c"
        var $168=(($167+34)&4294967295); //@line 2243 "xmlparse.c"
        var $169=HEAP[$168]; //@line 2243 "xmlparse.c"
        var $170=reSign(($169), 8, 0)==0; //@line 2243 "xmlparse.c"
        if ($170) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 2243 "xmlparse.c"
      case 43: // $bb42
        HEAP[$0]=24; //@line 2244 "xmlparse.c"
        __label__ = 200; break; //@line 2244 "xmlparse.c"
      case 44: // $bb43
        __label__ = 51; break; //@line 2244 "xmlparse.c"
      case 45: // $bb44
        var $171=HEAP[$entity]; //@line 2246 "xmlparse.c"
        var $172=($171)==0; //@line 2246 "xmlparse.c"
        if ($172) { __label__ = 46; break; } else { __label__ = 51; break; } //@line 2246 "xmlparse.c"
      case 46: // $bb45
        var $173=HEAP[$parser_addr]; //@line 2247 "xmlparse.c"
        var $174=(($173+120)&4294967295); //@line 2247 "xmlparse.c"
        var $175=HEAP[$174]; //@line 2247 "xmlparse.c"
        var $176=($175)!=0; //@line 2247 "xmlparse.c"
        if ($176) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 2247 "xmlparse.c"
      case 47: // $bb46
        var $177=HEAP[$parser_addr]; //@line 2248 "xmlparse.c"
        var $178=(($177+120)&4294967295); //@line 2248 "xmlparse.c"
        var $179=HEAP[$178]; //@line 2248 "xmlparse.c"
        var $180=HEAP[$parser_addr]; //@line 2248 "xmlparse.c"
        var $181=(($180+4)&4294967295); //@line 2248 "xmlparse.c"
        var $182=HEAP[$181]; //@line 2248 "xmlparse.c"
        var $183=HEAP[$name]; //@line 2248 "xmlparse.c"
        FUNCTION_TABLE[$179]($182, $183, 0); //@line 2248 "xmlparse.c"
        __label__ = 50; break; //@line 2248 "xmlparse.c"
      case 48: // $bb47
        var $184=HEAP[$parser_addr]; //@line 2249 "xmlparse.c"
        var $185=(($184+80)&4294967295); //@line 2249 "xmlparse.c"
        var $186=HEAP[$185]; //@line 2249 "xmlparse.c"
        var $187=($186)!=0; //@line 2249 "xmlparse.c"
        if ($187) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 2249 "xmlparse.c"
      case 49: // $bb48
        var $188=HEAP[$next]; //@line 2250 "xmlparse.c"
        var $189=HEAP[$s_addr]; //@line 2250 "xmlparse.c"
        var $190=HEAP[$parser_addr]; //@line 2250 "xmlparse.c"
        var $191=HEAP[$enc_addr]; //@line 2250 "xmlparse.c"
        _reportDefault($190, $191, $189, $188); //@line 2250 "xmlparse.c"
        __label__ = 50; break; //@line 2250 "xmlparse.c"
      case 50: // $bb49
        __label__ = 196; break; //@line 2250 "xmlparse.c"
      case 51: // $bb50
        var $192=HEAP[$entity]; //@line 2253 "xmlparse.c"
        var $193=(($192+32)&4294967295); //@line 2253 "xmlparse.c"
        var $194=HEAP[$193]; //@line 2253 "xmlparse.c"
        var $195=reSign(($194), 8, 0)!=0; //@line 2253 "xmlparse.c"
        if ($195) { __label__ = 52; break; } else { __label__ = 53; break; } //@line 2253 "xmlparse.c"
      case 52: // $bb51
        HEAP[$0]=12; //@line 2254 "xmlparse.c"
        __label__ = 200; break; //@line 2254 "xmlparse.c"
      case 53: // $bb52
        var $196=HEAP[$entity]; //@line 2255 "xmlparse.c"
        var $197=(($196+28)&4294967295); //@line 2255 "xmlparse.c"
        var $198=HEAP[$197]; //@line 2255 "xmlparse.c"
        var $199=($198)!=0; //@line 2255 "xmlparse.c"
        if ($199) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 2255 "xmlparse.c"
      case 54: // $bb53
        HEAP[$0]=15; //@line 2256 "xmlparse.c"
        __label__ = 200; break; //@line 2256 "xmlparse.c"
      case 55: // $bb54
        var $200=HEAP[$entity]; //@line 2257 "xmlparse.c"
        var $201=(($200+4)&4294967295); //@line 2257 "xmlparse.c"
        var $202=HEAP[$201]; //@line 2257 "xmlparse.c"
        var $203=($202)!=0; //@line 2257 "xmlparse.c"
        if ($203) { __label__ = 56; break; } else { __label__ = 65; break; } //@line 2257 "xmlparse.c"
      case 56: // $bb55
        var $204=HEAP[$parser_addr]; //@line 2259 "xmlparse.c"
        var $205=(($204+292)&4294967295); //@line 2259 "xmlparse.c"
        var $206=HEAP[$205]; //@line 2259 "xmlparse.c"
        var $207=reSign(($206), 8, 0)==0; //@line 2259 "xmlparse.c"
        if ($207) { __label__ = 57; break; } else { __label__ = 62; break; } //@line 2259 "xmlparse.c"
      case 57: // $bb56
        var $208=HEAP[$parser_addr]; //@line 2260 "xmlparse.c"
        var $209=(($208+120)&4294967295); //@line 2260 "xmlparse.c"
        var $210=HEAP[$209]; //@line 2260 "xmlparse.c"
        var $211=($210)!=0; //@line 2260 "xmlparse.c"
        if ($211) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 2260 "xmlparse.c"
      case 58: // $bb57
        var $212=HEAP[$parser_addr]; //@line 2261 "xmlparse.c"
        var $213=(($212+120)&4294967295); //@line 2261 "xmlparse.c"
        var $214=HEAP[$213]; //@line 2261 "xmlparse.c"
        var $215=HEAP[$entity]; //@line 2261 "xmlparse.c"
        var $216=(($215)&4294967295); //@line 2261 "xmlparse.c"
        var $217=HEAP[$216]; //@line 2261 "xmlparse.c"
        var $218=HEAP[$parser_addr]; //@line 2261 "xmlparse.c"
        var $219=(($218+4)&4294967295); //@line 2261 "xmlparse.c"
        var $220=HEAP[$219]; //@line 2261 "xmlparse.c"
        FUNCTION_TABLE[$214]($220, $217, 0); //@line 2261 "xmlparse.c"
        __label__ = 61; break; //@line 2261 "xmlparse.c"
      case 59: // $bb58
        var $221=HEAP[$parser_addr]; //@line 2262 "xmlparse.c"
        var $222=(($221+80)&4294967295); //@line 2262 "xmlparse.c"
        var $223=HEAP[$222]; //@line 2262 "xmlparse.c"
        var $224=($223)!=0; //@line 2262 "xmlparse.c"
        if ($224) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 2262 "xmlparse.c"
      case 60: // $bb59
        var $225=HEAP[$next]; //@line 2263 "xmlparse.c"
        var $226=HEAP[$s_addr]; //@line 2263 "xmlparse.c"
        var $227=HEAP[$parser_addr]; //@line 2263 "xmlparse.c"
        var $228=HEAP[$enc_addr]; //@line 2263 "xmlparse.c"
        _reportDefault($227, $228, $226, $225); //@line 2263 "xmlparse.c"
        __label__ = 61; break; //@line 2263 "xmlparse.c"
      case 61: // $bb60
        __label__ = 196; break; //@line 2263 "xmlparse.c"
      case 62: // $bb61
        var $229=HEAP[$parser_addr]; //@line 2266 "xmlparse.c"
        var $230=HEAP[$entity]; //@line 2266 "xmlparse.c"
        var $231=_processInternalEntity($229, $230, 0); //@line 2266 "xmlparse.c"
        HEAP[$result]=$231; //@line 2266 "xmlparse.c"
        var $232=HEAP[$result]; //@line 2267 "xmlparse.c"
        var $233=((($232))|0)!=0; //@line 2267 "xmlparse.c"
        if ($233) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 2267 "xmlparse.c"
      case 63: // $bb62
        var $234=HEAP[$result]; //@line 2268 "xmlparse.c"
        HEAP[$0]=$234; //@line 2268 "xmlparse.c"
        __label__ = 200; break; //@line 2268 "xmlparse.c"
      case 64: // $bb63
        __label__ = 73; break; //@line 2268 "xmlparse.c"
      case 65: // $bb64
        var $235=HEAP[$parser_addr]; //@line 2270 "xmlparse.c"
        var $236=(($235+112)&4294967295); //@line 2270 "xmlparse.c"
        var $237=HEAP[$236]; //@line 2270 "xmlparse.c"
        var $238=($237)!=0; //@line 2270 "xmlparse.c"
        if ($238) { __label__ = 66; break; } else { __label__ = 71; break; } //@line 2270 "xmlparse.c"
      case 66: // $bb65
        var $239=HEAP[$entity]; //@line 2272 "xmlparse.c"
        var $240=(($239+32)&4294967295); //@line 2272 "xmlparse.c"
        HEAP[$240]=1; //@line 2272 "xmlparse.c"
        var $241=HEAP[$parser_addr]; //@line 2273 "xmlparse.c"
        var $242=_getContext($241); //@line 2273 "xmlparse.c"
        HEAP[$context]=$242; //@line 2273 "xmlparse.c"
        var $243=HEAP[$entity]; //@line 2274 "xmlparse.c"
        var $244=(($243+32)&4294967295); //@line 2274 "xmlparse.c"
        HEAP[$244]=0; //@line 2274 "xmlparse.c"
        var $245=HEAP[$context]; //@line 2275 "xmlparse.c"
        var $246=($245)==0; //@line 2275 "xmlparse.c"
        if ($246) { __label__ = 67; break; } else { __label__ = 68; break; } //@line 2275 "xmlparse.c"
      case 67: // $bb66
        HEAP[$0]=1; //@line 2276 "xmlparse.c"
        __label__ = 200; break; //@line 2276 "xmlparse.c"
      case 68: // $bb67
        var $247=HEAP[$parser_addr]; //@line 2277 "xmlparse.c"
        var $248=(($247+112)&4294967295); //@line 2277 "xmlparse.c"
        var $249=HEAP[$248]; //@line 2277 "xmlparse.c"
        var $250=HEAP[$entity]; //@line 2277 "xmlparse.c"
        var $251=(($250+24)&4294967295); //@line 2277 "xmlparse.c"
        var $252=HEAP[$251]; //@line 2277 "xmlparse.c"
        var $253=HEAP[$entity]; //@line 2277 "xmlparse.c"
        var $254=(($253+16)&4294967295); //@line 2277 "xmlparse.c"
        var $255=HEAP[$254]; //@line 2277 "xmlparse.c"
        var $256=HEAP[$entity]; //@line 2277 "xmlparse.c"
        var $257=(($256+20)&4294967295); //@line 2277 "xmlparse.c"
        var $258=HEAP[$257]; //@line 2277 "xmlparse.c"
        var $259=HEAP[$parser_addr]; //@line 2277 "xmlparse.c"
        var $260=(($259+116)&4294967295); //@line 2277 "xmlparse.c"
        var $261=HEAP[$260]; //@line 2277 "xmlparse.c"
        var $262=HEAP[$context]; //@line 2277 "xmlparse.c"
        var $263=FUNCTION_TABLE[$249]($261, $262, $258, $255, $252); //@line 2277 "xmlparse.c"
        var $264=((($263))|0)==0; //@line 2277 "xmlparse.c"
        if ($264) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 2277 "xmlparse.c"
      case 69: // $bb68
        HEAP[$0]=21; //@line 2282 "xmlparse.c"
        __label__ = 200; break; //@line 2282 "xmlparse.c"
      case 70: // $bb69
        var $265=HEAP[$parser_addr]; //@line 2283 "xmlparse.c"
        var $266=(($265+400)&4294967295); //@line 2283 "xmlparse.c"
        var $267=(($266+16)&4294967295); //@line 2283 "xmlparse.c"
        var $268=HEAP[$267]; //@line 2283 "xmlparse.c"
        var $269=HEAP[$parser_addr]; //@line 2283 "xmlparse.c"
        var $270=(($269+400)&4294967295); //@line 2283 "xmlparse.c"
        var $271=(($270+12)&4294967295); //@line 2283 "xmlparse.c"
        HEAP[$271]=$268; //@line 2283 "xmlparse.c"
        __label__ = 73; break; //@line 2283 "xmlparse.c"
      case 71: // $bb70
        var $272=HEAP[$parser_addr]; //@line 2285 "xmlparse.c"
        var $273=(($272+80)&4294967295); //@line 2285 "xmlparse.c"
        var $274=HEAP[$273]; //@line 2285 "xmlparse.c"
        var $275=($274)!=0; //@line 2285 "xmlparse.c"
        if ($275) { __label__ = 72; break; } else { __label__ = 73; break; } //@line 2285 "xmlparse.c"
      case 72: // $bb71
        var $276=HEAP[$next]; //@line 2286 "xmlparse.c"
        var $277=HEAP[$s_addr]; //@line 2286 "xmlparse.c"
        var $278=HEAP[$parser_addr]; //@line 2286 "xmlparse.c"
        var $279=HEAP[$enc_addr]; //@line 2286 "xmlparse.c"
        _reportDefault($278, $279, $277, $276); //@line 2286 "xmlparse.c"
        __label__ = 73; break; //@line 2286 "xmlparse.c"
      case 73: // $bb72
        __label__ = 196; break; //@line 2286 "xmlparse.c"
      case 74: // $bb73
        var $280=HEAP[$parser_addr]; //@line 2296 "xmlparse.c"
        var $281=(($280+352)&4294967295); //@line 2296 "xmlparse.c"
        var $282=HEAP[$281]; //@line 2296 "xmlparse.c"
        var $283=($282)!=0; //@line 2296 "xmlparse.c"
        if ($283) { __label__ = 75; break; } else { __label__ = 76; break; } //@line 2296 "xmlparse.c"
      case 75: // $bb75
        var $284=HEAP[$parser_addr]; //@line 2297 "xmlparse.c"
        var $285=(($284+352)&4294967295); //@line 2297 "xmlparse.c"
        var $286=HEAP[$285]; //@line 2297 "xmlparse.c"
        HEAP[$tag]=$286; //@line 2297 "xmlparse.c"
        var $287=HEAP[$parser_addr]; //@line 2298 "xmlparse.c"
        var $288=(($287+352)&4294967295); //@line 2298 "xmlparse.c"
        var $289=HEAP[$288]; //@line 2298 "xmlparse.c"
        var $290=(($289)&4294967295); //@line 2298 "xmlparse.c"
        var $291=HEAP[$290]; //@line 2298 "xmlparse.c"
        var $292=HEAP[$parser_addr]; //@line 2298 "xmlparse.c"
        var $293=(($292+352)&4294967295); //@line 2298 "xmlparse.c"
        HEAP[$293]=$291; //@line 2298 "xmlparse.c"
        __label__ = 81; break; //@line 2298 "xmlparse.c"
      case 76: // $bb76
        var $294=HEAP[$parser_addr]; //@line 2301 "xmlparse.c"
        var $295=(($294+12)&4294967295); //@line 2301 "xmlparse.c"
        var $296=(($295)&4294967295); //@line 2301 "xmlparse.c"
        var $297=HEAP[$296]; //@line 2301 "xmlparse.c"
        var $298=FUNCTION_TABLE[$297](48); //@line 2301 "xmlparse.c"
        var $299=$298; //@line 2301 "xmlparse.c"
        HEAP[$tag]=$299; //@line 2301 "xmlparse.c"
        var $300=HEAP[$tag]; //@line 2302 "xmlparse.c"
        var $301=($300)==0; //@line 2302 "xmlparse.c"
        if ($301) { __label__ = 77; break; } else { __label__ = 78; break; } //@line 2302 "xmlparse.c"
      case 77: // $bb77
        HEAP[$0]=1; //@line 2303 "xmlparse.c"
        __label__ = 200; break; //@line 2303 "xmlparse.c"
      case 78: // $bb78
        var $302=HEAP[$parser_addr]; //@line 2304 "xmlparse.c"
        var $303=(($302+12)&4294967295); //@line 2304 "xmlparse.c"
        var $304=(($303)&4294967295); //@line 2304 "xmlparse.c"
        var $305=HEAP[$304]; //@line 2304 "xmlparse.c"
        var $306=FUNCTION_TABLE[$305](32); //@line 2304 "xmlparse.c"
        var $307=HEAP[$tag]; //@line 2304 "xmlparse.c"
        var $308=(($307+36)&4294967295); //@line 2304 "xmlparse.c"
        HEAP[$308]=$306; //@line 2304 "xmlparse.c"
        var $309=HEAP[$tag]; //@line 2305 "xmlparse.c"
        var $310=(($309+36)&4294967295); //@line 2305 "xmlparse.c"
        var $311=HEAP[$310]; //@line 2305 "xmlparse.c"
        var $312=($311)==0; //@line 2305 "xmlparse.c"
        if ($312) { __label__ = 79; break; } else { __label__ = 80; break; } //@line 2305 "xmlparse.c"
      case 79: // $bb79
        var $313=HEAP[$parser_addr]; //@line 2306 "xmlparse.c"
        var $314=(($313+12)&4294967295); //@line 2306 "xmlparse.c"
        var $315=(($314+8)&4294967295); //@line 2306 "xmlparse.c"
        var $316=HEAP[$315]; //@line 2306 "xmlparse.c"
        var $317=HEAP[$tag]; //@line 2306 "xmlparse.c"
        var $318=$317; //@line 2306 "xmlparse.c"
        FUNCTION_TABLE[$316]($318); //@line 2306 "xmlparse.c"
        HEAP[$0]=1; //@line 2307 "xmlparse.c"
        __label__ = 200; break; //@line 2307 "xmlparse.c"
      case 80: // $bb80
        var $319=HEAP[$tag]; //@line 2309 "xmlparse.c"
        var $320=(($319+36)&4294967295); //@line 2309 "xmlparse.c"
        var $321=HEAP[$320]; //@line 2309 "xmlparse.c"
        var $322=(($321+32)&4294967295); //@line 2309 "xmlparse.c"
        var $323=HEAP[$tag]; //@line 2309 "xmlparse.c"
        var $324=(($323+40)&4294967295); //@line 2309 "xmlparse.c"
        HEAP[$324]=$322; //@line 2309 "xmlparse.c"
        __label__ = 81; break; //@line 2309 "xmlparse.c"
      case 81: // $bb81
        var $325=HEAP[$tag]; //@line 2311 "xmlparse.c"
        var $326=(($325+44)&4294967295); //@line 2311 "xmlparse.c"
        HEAP[$326]=0; //@line 2311 "xmlparse.c"
        var $327=HEAP[$parser_addr]; //@line 2312 "xmlparse.c"
        var $328=(($327+348)&4294967295); //@line 2312 "xmlparse.c"
        var $329=HEAP[$328]; //@line 2312 "xmlparse.c"
        var $330=HEAP[$tag]; //@line 2312 "xmlparse.c"
        var $331=(($330)&4294967295); //@line 2312 "xmlparse.c"
        HEAP[$331]=$329; //@line 2312 "xmlparse.c"
        var $332=HEAP[$parser_addr]; //@line 2313 "xmlparse.c"
        var $333=(($332+348)&4294967295); //@line 2313 "xmlparse.c"
        var $334=HEAP[$tag]; //@line 2313 "xmlparse.c"
        HEAP[$333]=$334; //@line 2313 "xmlparse.c"
        var $335=HEAP[$tag]; //@line 2314 "xmlparse.c"
        var $336=(($335+12)&4294967295); //@line 2314 "xmlparse.c"
        var $337=(($336+4)&4294967295); //@line 2314 "xmlparse.c"
        HEAP[$337]=0; //@line 2314 "xmlparse.c"
        var $338=HEAP[$tag]; //@line 2315 "xmlparse.c"
        var $339=(($338+12)&4294967295); //@line 2315 "xmlparse.c"
        var $340=(($339+8)&4294967295); //@line 2315 "xmlparse.c"
        HEAP[$340]=0; //@line 2315 "xmlparse.c"
        var $341=HEAP[$s_addr]; //@line 2316 "xmlparse.c"
        var $342=HEAP[$enc_addr]; //@line 2316 "xmlparse.c"
        var $343=(($342+64)&4294967295); //@line 2316 "xmlparse.c"
        var $344=HEAP[$343]; //@line 2316 "xmlparse.c"
        var $345=(($341+$344)&4294967295); //@line 2316 "xmlparse.c"
        var $346=HEAP[$tag]; //@line 2316 "xmlparse.c"
        var $347=(($346+4)&4294967295); //@line 2316 "xmlparse.c"
        HEAP[$347]=$345; //@line 2316 "xmlparse.c"
        var $348=HEAP[$enc_addr]; //@line 2317 "xmlparse.c"
        var $349=(($348+28)&4294967295); //@line 2317 "xmlparse.c"
        var $350=HEAP[$349]; //@line 2317 "xmlparse.c"
        var $351=HEAP[$tag]; //@line 2317 "xmlparse.c"
        var $352=(($351+4)&4294967295); //@line 2317 "xmlparse.c"
        var $353=HEAP[$352]; //@line 2317 "xmlparse.c"
        var $354=HEAP[$enc_addr]; //@line 2317 "xmlparse.c"
        var $355=FUNCTION_TABLE[$350]($354, $353); //@line 2317 "xmlparse.c"
        var $356=HEAP[$tag]; //@line 2317 "xmlparse.c"
        var $357=(($356+8)&4294967295); //@line 2317 "xmlparse.c"
        HEAP[$357]=$355; //@line 2317 "xmlparse.c"
        var $358=HEAP[$parser_addr]; //@line 2318 "xmlparse.c"
        var $359=(($358+296)&4294967295); //@line 2318 "xmlparse.c"
        var $360=HEAP[$359]; //@line 2318 "xmlparse.c"
        var $361=((($360) + 1)&4294967295); //@line 2318 "xmlparse.c"
        var $362=HEAP[$parser_addr]; //@line 2318 "xmlparse.c"
        var $363=(($362+296)&4294967295); //@line 2318 "xmlparse.c"
        HEAP[$363]=$361; //@line 2318 "xmlparse.c"
        var $364=HEAP[$tag]; //@line 2320 "xmlparse.c"
        var $365=(($364+4)&4294967295); //@line 2320 "xmlparse.c"
        var $366=HEAP[$365]; //@line 2320 "xmlparse.c"
        var $367=HEAP[$tag]; //@line 2320 "xmlparse.c"
        var $368=(($367+8)&4294967295); //@line 2320 "xmlparse.c"
        var $369=HEAP[$368]; //@line 2320 "xmlparse.c"
        var $370=(($366+$369)&4294967295); //@line 2320 "xmlparse.c"
        HEAP[$rawNameEnd]=$370; //@line 2320 "xmlparse.c"
        var $371=HEAP[$tag]; //@line 2321 "xmlparse.c"
        var $372=(($371+4)&4294967295); //@line 2321 "xmlparse.c"
        var $373=HEAP[$372]; //@line 2321 "xmlparse.c"
        HEAP[$fromPtr]=$373; //@line 2321 "xmlparse.c"
        var $374=HEAP[$tag]; //@line 2322 "xmlparse.c"
        var $375=(($374+36)&4294967295); //@line 2322 "xmlparse.c"
        var $376=HEAP[$375]; //@line 2322 "xmlparse.c"
        HEAP[$toPtr]=$376; //@line 2322 "xmlparse.c"
        __label__ = 82; break; //@line 2322 "xmlparse.c"
      case 82: // $bb82
        var $377=HEAP[$enc_addr]; //@line 2326 "xmlparse.c"
        var $378=(($377+56)&4294967295); //@line 2326 "xmlparse.c"
        var $379=HEAP[$378]; //@line 2326 "xmlparse.c"
        var $380=HEAP[$tag]; //@line 2326 "xmlparse.c"
        var $381=(($380+40)&4294967295); //@line 2326 "xmlparse.c"
        var $382=HEAP[$381]; //@line 2326 "xmlparse.c"
        var $383=(($382+-1)&4294967295); //@line 2326 "xmlparse.c"
        var $384=HEAP[$enc_addr]; //@line 2326 "xmlparse.c"
        var $385=HEAP[$rawNameEnd]; //@line 2326 "xmlparse.c"
        FUNCTION_TABLE[$379]($384, $fromPtr, $385, $toPtr, $383); //@line 2326 "xmlparse.c"
        var $386=HEAP[$toPtr]; //@line 2329 "xmlparse.c"
        var $387=($386); //@line 2329 "xmlparse.c"
        var $388=HEAP[$tag]; //@line 2329 "xmlparse.c"
        var $389=(($388+36)&4294967295); //@line 2329 "xmlparse.c"
        var $390=HEAP[$389]; //@line 2329 "xmlparse.c"
        var $391=($390); //@line 2329 "xmlparse.c"
        var $392=((($387) - ($391))&4294967295); //@line 2329 "xmlparse.c"
        HEAP[$convLen]=$392; //@line 2329 "xmlparse.c"
        var $393=HEAP[$fromPtr]; //@line 2330 "xmlparse.c"
        var $394=HEAP[$rawNameEnd]; //@line 2330 "xmlparse.c"
        var $395=($393)==($394); //@line 2330 "xmlparse.c"
        if ($395) { __label__ = 83; break; } else { __label__ = 84; break; } //@line 2330 "xmlparse.c"
      case 83: // $bb83
        var $396=HEAP[$tag]; //@line 2331 "xmlparse.c"
        var $397=(($396+12)&4294967295); //@line 2331 "xmlparse.c"
        var $398=(($397+12)&4294967295); //@line 2331 "xmlparse.c"
        var $399=HEAP[$convLen]; //@line 2331 "xmlparse.c"
        HEAP[$398]=$399; //@line 2331 "xmlparse.c"
        var $400=HEAP[$tag]; //@line 2345 "xmlparse.c"
        var $401=(($400+36)&4294967295); //@line 2345 "xmlparse.c"
        var $402=HEAP[$401]; //@line 2345 "xmlparse.c"
        var $403=HEAP[$tag]; //@line 2345 "xmlparse.c"
        var $404=(($403+12)&4294967295); //@line 2345 "xmlparse.c"
        var $405=(($404)&4294967295); //@line 2345 "xmlparse.c"
        HEAP[$405]=$402; //@line 2345 "xmlparse.c"
        var $406=HEAP[$toPtr]; //@line 2346 "xmlparse.c"
        HEAP[$406]=0; //@line 2346 "xmlparse.c"
        var $407=HEAP[$tag]; //@line 2347 "xmlparse.c"
        var $408=(($407+44)&4294967295); //@line 2347 "xmlparse.c"
        var $409=HEAP[$tag]; //@line 2347 "xmlparse.c"
        var $410=(($409+12)&4294967295); //@line 2347 "xmlparse.c"
        var $411=HEAP[$s_addr]; //@line 2347 "xmlparse.c"
        var $412=HEAP[$parser_addr]; //@line 2347 "xmlparse.c"
        var $413=HEAP[$enc_addr]; //@line 2347 "xmlparse.c"
        var $414=_storeAtts($412, $413, $411, $410, $408); //@line 2347 "xmlparse.c"
        HEAP[$result74]=$414; //@line 2347 "xmlparse.c"
        var $415=HEAP[$result74]; //@line 2348 "xmlparse.c"
        var $416=((($415))|0)!=0; //@line 2348 "xmlparse.c"
        if ($416) { __label__ = 87; break; } else { __label__ = 88; break; } //@line 2348 "xmlparse.c"
      case 84: // $bb84
        var $417=HEAP[$tag]; //@line 2334 "xmlparse.c"
        var $418=(($417+40)&4294967295); //@line 2334 "xmlparse.c"
        var $419=HEAP[$418]; //@line 2334 "xmlparse.c"
        var $420=($419); //@line 2334 "xmlparse.c"
        var $421=HEAP[$tag]; //@line 2334 "xmlparse.c"
        var $422=(($421+36)&4294967295); //@line 2334 "xmlparse.c"
        var $423=HEAP[$422]; //@line 2334 "xmlparse.c"
        var $424=($423); //@line 2334 "xmlparse.c"
        var $425=((($420) - ($424))&4294967295); //@line 2334 "xmlparse.c"
        var $426=($425) << 1; //@line 2334 "xmlparse.c"
        HEAP[$bufSize]=$426; //@line 2334 "xmlparse.c"
        var $427=HEAP[$parser_addr]; //@line 2336 "xmlparse.c"
        var $428=(($427+12)&4294967295); //@line 2336 "xmlparse.c"
        var $429=(($428+4)&4294967295); //@line 2336 "xmlparse.c"
        var $430=HEAP[$429]; //@line 2336 "xmlparse.c"
        var $431=HEAP[$bufSize]; //@line 2336 "xmlparse.c"
        var $432=HEAP[$tag]; //@line 2336 "xmlparse.c"
        var $433=(($432+36)&4294967295); //@line 2336 "xmlparse.c"
        var $434=HEAP[$433]; //@line 2336 "xmlparse.c"
        var $435=FUNCTION_TABLE[$430]($434, $431); //@line 2336 "xmlparse.c"
        HEAP[$temp]=$435; //@line 2336 "xmlparse.c"
        var $436=HEAP[$temp]; //@line 2337 "xmlparse.c"
        var $437=($436)==0; //@line 2337 "xmlparse.c"
        if ($437) { __label__ = 85; break; } else { __label__ = 86; break; } //@line 2337 "xmlparse.c"
      case 85: // $bb85
        HEAP[$0]=1; //@line 2338 "xmlparse.c"
        __label__ = 200; break; //@line 2338 "xmlparse.c"
      case 86: // $bb86
        var $438=HEAP[$tag]; //@line 2339 "xmlparse.c"
        var $439=(($438+36)&4294967295); //@line 2339 "xmlparse.c"
        var $440=HEAP[$temp]; //@line 2339 "xmlparse.c"
        HEAP[$439]=$440; //@line 2339 "xmlparse.c"
        var $441=HEAP[$temp]; //@line 2340 "xmlparse.c"
        var $442=HEAP[$bufSize]; //@line 2340 "xmlparse.c"
        var $443=(($441+$442)&4294967295); //@line 2340 "xmlparse.c"
        var $444=HEAP[$tag]; //@line 2340 "xmlparse.c"
        var $445=(($444+40)&4294967295); //@line 2340 "xmlparse.c"
        HEAP[$445]=$443; //@line 2340 "xmlparse.c"
        var $446=HEAP[$temp]; //@line 2341 "xmlparse.c"
        var $447=HEAP[$convLen]; //@line 2341 "xmlparse.c"
        var $448=(($446+$447)&4294967295); //@line 2341 "xmlparse.c"
        HEAP[$toPtr]=$448; //@line 2341 "xmlparse.c"
        __label__ = 82; break; //@line 2341 "xmlparse.c"
      case 87: // $bb87
        var $449=HEAP[$result74]; //@line 2349 "xmlparse.c"
        HEAP[$0]=$449; //@line 2349 "xmlparse.c"
        __label__ = 200; break; //@line 2349 "xmlparse.c"
      case 88: // $bb88
        var $450=HEAP[$parser_addr]; //@line 2350 "xmlparse.c"
        var $451=(($450+52)&4294967295); //@line 2350 "xmlparse.c"
        var $452=HEAP[$451]; //@line 2350 "xmlparse.c"
        var $453=($452)!=0; //@line 2350 "xmlparse.c"
        if ($453) { __label__ = 89; break; } else { __label__ = 90; break; } //@line 2350 "xmlparse.c"
      case 89: // $bb89
        var $454=HEAP[$parser_addr]; //@line 2351 "xmlparse.c"
        var $455=(($454+52)&4294967295); //@line 2351 "xmlparse.c"
        var $456=HEAP[$455]; //@line 2351 "xmlparse.c"
        var $457=HEAP[$parser_addr]; //@line 2351 "xmlparse.c"
        var $458=(($457+376)&4294967295); //@line 2351 "xmlparse.c"
        var $459=HEAP[$458]; //@line 2351 "xmlparse.c"
        var $460=$459; //@line 2351 "xmlparse.c"
        var $461=HEAP[$tag]; //@line 2351 "xmlparse.c"
        var $462=(($461+12)&4294967295); //@line 2351 "xmlparse.c"
        var $463=(($462)&4294967295); //@line 2351 "xmlparse.c"
        var $464=HEAP[$463]; //@line 2351 "xmlparse.c"
        var $465=HEAP[$parser_addr]; //@line 2351 "xmlparse.c"
        var $466=(($465+4)&4294967295); //@line 2351 "xmlparse.c"
        var $467=HEAP[$466]; //@line 2351 "xmlparse.c"
        FUNCTION_TABLE[$456]($467, $464, $460); //@line 2351 "xmlparse.c"
        __label__ = 92; break; //@line 2351 "xmlparse.c"
      case 90: // $bb90
        var $468=HEAP[$parser_addr]; //@line 2353 "xmlparse.c"
        var $469=(($468+80)&4294967295); //@line 2353 "xmlparse.c"
        var $470=HEAP[$469]; //@line 2353 "xmlparse.c"
        var $471=($470)!=0; //@line 2353 "xmlparse.c"
        if ($471) { __label__ = 91; break; } else { __label__ = 92; break; } //@line 2353 "xmlparse.c"
      case 91: // $bb91
        var $472=HEAP[$next]; //@line 2354 "xmlparse.c"
        var $473=HEAP[$s_addr]; //@line 2354 "xmlparse.c"
        var $474=HEAP[$parser_addr]; //@line 2354 "xmlparse.c"
        var $475=HEAP[$enc_addr]; //@line 2354 "xmlparse.c"
        _reportDefault($474, $475, $473, $472); //@line 2354 "xmlparse.c"
        __label__ = 92; break; //@line 2354 "xmlparse.c"
      case 92: // $bb92
        var $476=HEAP[$parser_addr]; //@line 2355 "xmlparse.c"
        var $477=(($476+400)&4294967295); //@line 2355 "xmlparse.c"
        _poolClear($477); //@line 2355 "xmlparse.c"
        __label__ = 196; break; //@line 2355 "xmlparse.c"
      case 93: // $bb93
        var $478=HEAP[$s_addr]; //@line 2362 "xmlparse.c"
        var $479=HEAP[$enc_addr]; //@line 2362 "xmlparse.c"
        var $480=(($479+64)&4294967295); //@line 2362 "xmlparse.c"
        var $481=HEAP[$480]; //@line 2362 "xmlparse.c"
        var $482=(($478+$481)&4294967295); //@line 2362 "xmlparse.c"
        HEAP[$rawName]=$482; //@line 2362 "xmlparse.c"
        HEAP[$bindings]=0; //@line 2364 "xmlparse.c"
        HEAP[$noElmHandlers]=1; //@line 2365 "xmlparse.c"
        var $483=HEAP[$enc_addr]; //@line 2367 "xmlparse.c"
        var $484=(($483+28)&4294967295); //@line 2367 "xmlparse.c"
        var $485=HEAP[$484]; //@line 2367 "xmlparse.c"
        var $486=HEAP[$enc_addr]; //@line 2367 "xmlparse.c"
        var $487=HEAP[$rawName]; //@line 2367 "xmlparse.c"
        var $488=FUNCTION_TABLE[$485]($486, $487); //@line 2367 "xmlparse.c"
        var $489=HEAP[$rawName]; //@line 2367 "xmlparse.c"
        var $490=(($489+$488)&4294967295); //@line 2367 "xmlparse.c"
        var $491=HEAP[$parser_addr]; //@line 2367 "xmlparse.c"
        var $492=(($491+400)&4294967295); //@line 2367 "xmlparse.c"
        var $493=HEAP[$enc_addr]; //@line 2367 "xmlparse.c"
        var $494=HEAP[$rawName]; //@line 2367 "xmlparse.c"
        var $495=_poolStoreString($492, $493, $494, $490); //@line 2367 "xmlparse.c"
        var $496=(($name95)&4294967295); //@line 2367 "xmlparse.c"
        HEAP[$496]=$495; //@line 2367 "xmlparse.c"
        var $497=(($name95)&4294967295); //@line 2369 "xmlparse.c"
        var $498=HEAP[$497]; //@line 2369 "xmlparse.c"
        var $499=($498)==0; //@line 2369 "xmlparse.c"
        if ($499) { __label__ = 94; break; } else { __label__ = 95; break; } //@line 2369 "xmlparse.c"
      case 94: // $bb96
        HEAP[$0]=1; //@line 2370 "xmlparse.c"
        __label__ = 200; break; //@line 2370 "xmlparse.c"
      case 95: // $bb97
        var $500=HEAP[$parser_addr]; //@line 2371 "xmlparse.c"
        var $501=(($500+400)&4294967295); //@line 2371 "xmlparse.c"
        var $502=(($501+12)&4294967295); //@line 2371 "xmlparse.c"
        var $503=HEAP[$502]; //@line 2371 "xmlparse.c"
        var $504=HEAP[$parser_addr]; //@line 2371 "xmlparse.c"
        var $505=(($504+400)&4294967295); //@line 2371 "xmlparse.c"
        var $506=(($505+16)&4294967295); //@line 2371 "xmlparse.c"
        HEAP[$506]=$503; //@line 2371 "xmlparse.c"
        var $507=HEAP[$s_addr]; //@line 2372 "xmlparse.c"
        var $508=HEAP[$parser_addr]; //@line 2372 "xmlparse.c"
        var $509=HEAP[$enc_addr]; //@line 2372 "xmlparse.c"
        var $510=_storeAtts($508, $509, $507, $name95, $bindings); //@line 2372 "xmlparse.c"
        HEAP[$result94]=$510; //@line 2372 "xmlparse.c"
        var $511=HEAP[$result94]; //@line 2373 "xmlparse.c"
        var $512=((($511))|0)!=0; //@line 2373 "xmlparse.c"
        if ($512) { __label__ = 96; break; } else { __label__ = 97; break; } //@line 2373 "xmlparse.c"
      case 96: // $bb98
        var $513=HEAP[$result94]; //@line 2374 "xmlparse.c"
        HEAP[$0]=$513; //@line 2374 "xmlparse.c"
        __label__ = 200; break; //@line 2374 "xmlparse.c"
      case 97: // $bb99
        var $514=HEAP[$parser_addr]; //@line 2375 "xmlparse.c"
        var $515=(($514+400)&4294967295); //@line 2375 "xmlparse.c"
        var $516=(($515+12)&4294967295); //@line 2375 "xmlparse.c"
        var $517=HEAP[$516]; //@line 2375 "xmlparse.c"
        var $518=HEAP[$parser_addr]; //@line 2375 "xmlparse.c"
        var $519=(($518+400)&4294967295); //@line 2375 "xmlparse.c"
        var $520=(($519+16)&4294967295); //@line 2375 "xmlparse.c"
        HEAP[$520]=$517; //@line 2375 "xmlparse.c"
        var $521=HEAP[$parser_addr]; //@line 2376 "xmlparse.c"
        var $522=(($521+52)&4294967295); //@line 2376 "xmlparse.c"
        var $523=HEAP[$522]; //@line 2376 "xmlparse.c"
        var $524=($523)!=0; //@line 2376 "xmlparse.c"
        if ($524) { __label__ = 98; break; } else { __label__ = 99; break; } //@line 2376 "xmlparse.c"
      case 98: // $bb100
        var $525=HEAP[$parser_addr]; //@line 2377 "xmlparse.c"
        var $526=(($525+52)&4294967295); //@line 2377 "xmlparse.c"
        var $527=HEAP[$526]; //@line 2377 "xmlparse.c"
        var $528=HEAP[$parser_addr]; //@line 2377 "xmlparse.c"
        var $529=(($528+376)&4294967295); //@line 2377 "xmlparse.c"
        var $530=HEAP[$529]; //@line 2377 "xmlparse.c"
        var $531=$530; //@line 2377 "xmlparse.c"
        var $532=(($name95)&4294967295); //@line 2377 "xmlparse.c"
        var $533=HEAP[$532]; //@line 2377 "xmlparse.c"
        var $534=HEAP[$parser_addr]; //@line 2377 "xmlparse.c"
        var $535=(($534+4)&4294967295); //@line 2377 "xmlparse.c"
        var $536=HEAP[$535]; //@line 2377 "xmlparse.c"
        FUNCTION_TABLE[$527]($536, $533, $531); //@line 2377 "xmlparse.c"
        HEAP[$noElmHandlers]=0; //@line 2378 "xmlparse.c"
        __label__ = 99; break; //@line 2378 "xmlparse.c"
      case 99: // $bb101
        var $537=HEAP[$parser_addr]; //@line 2380 "xmlparse.c"
        var $538=(($537+56)&4294967295); //@line 2380 "xmlparse.c"
        var $539=HEAP[$538]; //@line 2380 "xmlparse.c"
        var $540=($539)!=0; //@line 2380 "xmlparse.c"
        if ($540) { __label__ = 100; break; } else { __label__ = 103; break; } //@line 2380 "xmlparse.c"
      case 100: // $bb102
        var $541=HEAP[$parser_addr]; //@line 2381 "xmlparse.c"
        var $542=(($541+52)&4294967295); //@line 2381 "xmlparse.c"
        var $543=HEAP[$542]; //@line 2381 "xmlparse.c"
        var $544=($543)!=0; //@line 2381 "xmlparse.c"
        if ($544) { __label__ = 101; break; } else { __label__ = 102; break; } //@line 2381 "xmlparse.c"
      case 101: // $bb103
        var $545=HEAP[$eventEndPP]; //@line 2382 "xmlparse.c"
        var $546=HEAP[$545]; //@line 2382 "xmlparse.c"
        var $547=HEAP[$eventPP]; //@line 2382 "xmlparse.c"
        HEAP[$547]=$546; //@line 2382 "xmlparse.c"
        __label__ = 102; break; //@line 2382 "xmlparse.c"
      case 102: // $bb104
        var $548=HEAP[$parser_addr]; //@line 2383 "xmlparse.c"
        var $549=(($548+56)&4294967295); //@line 2383 "xmlparse.c"
        var $550=HEAP[$549]; //@line 2383 "xmlparse.c"
        var $551=(($name95)&4294967295); //@line 2383 "xmlparse.c"
        var $552=HEAP[$551]; //@line 2383 "xmlparse.c"
        var $553=HEAP[$parser_addr]; //@line 2383 "xmlparse.c"
        var $554=(($553+4)&4294967295); //@line 2383 "xmlparse.c"
        var $555=HEAP[$554]; //@line 2383 "xmlparse.c"
        FUNCTION_TABLE[$550]($555, $552); //@line 2383 "xmlparse.c"
        HEAP[$noElmHandlers]=0; //@line 2384 "xmlparse.c"
        __label__ = 103; break; //@line 2384 "xmlparse.c"
      case 103: // $bb105
        var $556=HEAP[$noElmHandlers]; //@line 2386 "xmlparse.c"
        var $557=reSign(($556), 8, 0)!=0; //@line 2386 "xmlparse.c"
        if ($557) { __label__ = 104; break; } else { __label__ = 106; break; } //@line 2386 "xmlparse.c"
      case 104: // $bb106
        var $558=HEAP[$parser_addr]; //@line 2386 "xmlparse.c"
        var $559=(($558+80)&4294967295); //@line 2386 "xmlparse.c"
        var $560=HEAP[$559]; //@line 2386 "xmlparse.c"
        var $561=($560)!=0; //@line 2386 "xmlparse.c"
        if ($561) { __label__ = 105; break; } else { __label__ = 106; break; } //@line 2386 "xmlparse.c"
      case 105: // $bb107
        var $562=HEAP[$next]; //@line 2387 "xmlparse.c"
        var $563=HEAP[$s_addr]; //@line 2387 "xmlparse.c"
        var $564=HEAP[$parser_addr]; //@line 2387 "xmlparse.c"
        var $565=HEAP[$enc_addr]; //@line 2387 "xmlparse.c"
        _reportDefault($564, $565, $563, $562); //@line 2387 "xmlparse.c"
        __label__ = 106; break; //@line 2387 "xmlparse.c"
      case 106: // $bb108
        var $566=HEAP[$parser_addr]; //@line 2388 "xmlparse.c"
        var $567=(($566+400)&4294967295); //@line 2388 "xmlparse.c"
        _poolClear($567); //@line 2388 "xmlparse.c"
        __label__ = 110; break; //@line 2388 "xmlparse.c"
      case 107: // $bb109
        var $568=HEAP[$bindings]; //@line 2390 "xmlparse.c"
        HEAP[$b]=$568; //@line 2390 "xmlparse.c"
        var $569=HEAP[$parser_addr]; //@line 2391 "xmlparse.c"
        var $570=(($569+104)&4294967295); //@line 2391 "xmlparse.c"
        var $571=HEAP[$570]; //@line 2391 "xmlparse.c"
        var $572=($571)!=0; //@line 2391 "xmlparse.c"
        if ($572) { __label__ = 108; break; } else { __label__ = 109; break; } //@line 2391 "xmlparse.c"
      case 108: // $bb110
        var $573=HEAP[$parser_addr]; //@line 2392 "xmlparse.c"
        var $574=(($573+104)&4294967295); //@line 2392 "xmlparse.c"
        var $575=HEAP[$574]; //@line 2392 "xmlparse.c"
        var $576=HEAP[$b]; //@line 2392 "xmlparse.c"
        var $577=(($576)&4294967295); //@line 2392 "xmlparse.c"
        var $578=HEAP[$577]; //@line 2392 "xmlparse.c"
        var $579=(($578)&4294967295); //@line 2392 "xmlparse.c"
        var $580=HEAP[$579]; //@line 2392 "xmlparse.c"
        var $581=HEAP[$parser_addr]; //@line 2392 "xmlparse.c"
        var $582=(($581+4)&4294967295); //@line 2392 "xmlparse.c"
        var $583=HEAP[$582]; //@line 2392 "xmlparse.c"
        FUNCTION_TABLE[$575]($583, $580); //@line 2392 "xmlparse.c"
        __label__ = 109; break; //@line 2392 "xmlparse.c"
      case 109: // $bb111
        var $584=HEAP[$bindings]; //@line 2393 "xmlparse.c"
        var $585=(($584+4)&4294967295); //@line 2393 "xmlparse.c"
        var $586=HEAP[$585]; //@line 2393 "xmlparse.c"
        HEAP[$bindings]=$586; //@line 2393 "xmlparse.c"
        var $587=HEAP[$parser_addr]; //@line 2394 "xmlparse.c"
        var $588=(($587+360)&4294967295); //@line 2394 "xmlparse.c"
        var $589=HEAP[$588]; //@line 2394 "xmlparse.c"
        var $590=HEAP[$b]; //@line 2394 "xmlparse.c"
        var $591=(($590+4)&4294967295); //@line 2394 "xmlparse.c"
        HEAP[$591]=$589; //@line 2394 "xmlparse.c"
        var $592=HEAP[$parser_addr]; //@line 2395 "xmlparse.c"
        var $593=(($592+360)&4294967295); //@line 2395 "xmlparse.c"
        var $594=HEAP[$b]; //@line 2395 "xmlparse.c"
        HEAP[$593]=$594; //@line 2395 "xmlparse.c"
        var $595=HEAP[$b]; //@line 2396 "xmlparse.c"
        var $596=(($595)&4294967295); //@line 2396 "xmlparse.c"
        var $597=HEAP[$596]; //@line 2396 "xmlparse.c"
        var $598=HEAP[$b]; //@line 2396 "xmlparse.c"
        var $599=(($598+8)&4294967295); //@line 2396 "xmlparse.c"
        var $600=HEAP[$599]; //@line 2396 "xmlparse.c"
        var $601=(($597+4)&4294967295); //@line 2396 "xmlparse.c"
        HEAP[$601]=$600; //@line 2396 "xmlparse.c"
        __label__ = 110; break; //@line 2396 "xmlparse.c"
      case 110: // $bb112
        var $602=HEAP[$bindings]; //@line 2389 "xmlparse.c"
        var $603=($602)!=0; //@line 2389 "xmlparse.c"
        if ($603) { __label__ = 107; break; } else { __label__ = 111; break; } //@line 2389 "xmlparse.c"
      case 111: // $bb113
        var $604=HEAP[$parser_addr]; //@line 2399 "xmlparse.c"
        var $605=(($604+296)&4294967295); //@line 2399 "xmlparse.c"
        var $606=HEAP[$605]; //@line 2399 "xmlparse.c"
        var $607=((($606))|0)==0; //@line 2399 "xmlparse.c"
        if ($607) { __label__ = 112; break; } else { __label__ = 113; break; } //@line 2399 "xmlparse.c"
      case 112: // $bb114
        var $608=HEAP[$next]; //@line 2400 "xmlparse.c"
        var $609=HEAP[$parser_addr]; //@line 2400 "xmlparse.c"
        var $610=HEAP[$end_addr]; //@line 2400 "xmlparse.c"
        var $611=HEAP[$nextPtr_addr]; //@line 2400 "xmlparse.c"
        var $612=_epilogProcessor($609, $608, $610, $611); //@line 2400 "xmlparse.c"
        HEAP[$0]=$612; //@line 2400 "xmlparse.c"
        __label__ = 200; break; //@line 2400 "xmlparse.c"
      case 113: // $bb115
        __label__ = 196; break; //@line 2400 "xmlparse.c"
      case 114: // $bb116
        var $613=HEAP[$parser_addr]; //@line 2403 "xmlparse.c"
        var $614=(($613+296)&4294967295); //@line 2403 "xmlparse.c"
        var $615=HEAP[$614]; //@line 2403 "xmlparse.c"
        var $616=HEAP[$startTagLevel_addr]; //@line 2403 "xmlparse.c"
        var $617=((($615))|0)==((($616))|0); //@line 2403 "xmlparse.c"
        if ($617) { __label__ = 115; break; } else { __label__ = 116; break; } //@line 2403 "xmlparse.c"
      case 115: // $bb117
        HEAP[$0]=13; //@line 2404 "xmlparse.c"
        __label__ = 200; break; //@line 2404 "xmlparse.c"
      case 116: // $bb118
        var $618=HEAP[$parser_addr]; //@line 2408 "xmlparse.c"
        var $619=(($618+348)&4294967295); //@line 2408 "xmlparse.c"
        var $620=HEAP[$619]; //@line 2408 "xmlparse.c"
        HEAP[$tag120]=$620; //@line 2408 "xmlparse.c"
        var $621=HEAP[$tag120]; //@line 2409 "xmlparse.c"
        var $622=(($621)&4294967295); //@line 2409 "xmlparse.c"
        var $623=HEAP[$622]; //@line 2409 "xmlparse.c"
        var $624=HEAP[$parser_addr]; //@line 2409 "xmlparse.c"
        var $625=(($624+348)&4294967295); //@line 2409 "xmlparse.c"
        HEAP[$625]=$623; //@line 2409 "xmlparse.c"
        var $626=HEAP[$parser_addr]; //@line 2410 "xmlparse.c"
        var $627=(($626+352)&4294967295); //@line 2410 "xmlparse.c"
        var $628=HEAP[$627]; //@line 2410 "xmlparse.c"
        var $629=HEAP[$tag120]; //@line 2410 "xmlparse.c"
        var $630=(($629)&4294967295); //@line 2410 "xmlparse.c"
        HEAP[$630]=$628; //@line 2410 "xmlparse.c"
        var $631=HEAP[$parser_addr]; //@line 2411 "xmlparse.c"
        var $632=(($631+352)&4294967295); //@line 2411 "xmlparse.c"
        var $633=HEAP[$tag120]; //@line 2411 "xmlparse.c"
        HEAP[$632]=$633; //@line 2411 "xmlparse.c"
        var $634=HEAP[$s_addr]; //@line 2412 "xmlparse.c"
        var $635=HEAP[$enc_addr]; //@line 2412 "xmlparse.c"
        var $636=(($635+64)&4294967295); //@line 2412 "xmlparse.c"
        var $637=HEAP[$636]; //@line 2412 "xmlparse.c"
        var $638=((($637) * 2)&4294967295); //@line 2412 "xmlparse.c"
        var $639=(($634+$638)&4294967295); //@line 2412 "xmlparse.c"
        HEAP[$rawName119]=$639; //@line 2412 "xmlparse.c"
        var $640=HEAP[$enc_addr]; //@line 2413 "xmlparse.c"
        var $641=(($640+28)&4294967295); //@line 2413 "xmlparse.c"
        var $642=HEAP[$641]; //@line 2413 "xmlparse.c"
        var $643=HEAP[$enc_addr]; //@line 2413 "xmlparse.c"
        var $644=HEAP[$rawName119]; //@line 2413 "xmlparse.c"
        var $645=FUNCTION_TABLE[$642]($643, $644); //@line 2413 "xmlparse.c"
        HEAP[$len]=$645; //@line 2413 "xmlparse.c"
        var $646=HEAP[$tag120]; //@line 2414 "xmlparse.c"
        var $647=(($646+8)&4294967295); //@line 2414 "xmlparse.c"
        var $648=HEAP[$647]; //@line 2414 "xmlparse.c"
        var $649=HEAP[$len]; //@line 2414 "xmlparse.c"
        var $650=((($648))|0)!=((($649))|0); //@line 2414 "xmlparse.c"
        if ($650) { __label__ = 118; break; } else { __label__ = 117; break; } //@line 2414 "xmlparse.c"
      case 117: // $bb121
        var $651=HEAP[$len]; //@line 2414 "xmlparse.c"
        var $652=HEAP[$tag120]; //@line 2414 "xmlparse.c"
        var $653=(($652+4)&4294967295); //@line 2414 "xmlparse.c"
        var $654=HEAP[$653]; //@line 2414 "xmlparse.c"
        var $655=HEAP[$rawName119]; //@line 2414 "xmlparse.c"
        var $656=_memcmp($654, $655, $651); //@line 2414 "xmlparse.c"
        var $657=((($656))|0)!=0; //@line 2414 "xmlparse.c"
        if ($657) { __label__ = 118; break; } else { __label__ = 119; break; } //@line 2414 "xmlparse.c"
      case 118: // $bb122
        var $658=HEAP[$eventPP]; //@line 2416 "xmlparse.c"
        var $659=HEAP[$rawName119]; //@line 2416 "xmlparse.c"
        HEAP[$658]=$659; //@line 2416 "xmlparse.c"
        HEAP[$0]=7; //@line 2417 "xmlparse.c"
        __label__ = 200; break; //@line 2417 "xmlparse.c"
      case 119: // $bb123
        var $660=HEAP[$parser_addr]; //@line 2419 "xmlparse.c"
        var $661=(($660+296)&4294967295); //@line 2419 "xmlparse.c"
        var $662=HEAP[$661]; //@line 2419 "xmlparse.c"
        var $663=((($662) - 1)&4294967295); //@line 2419 "xmlparse.c"
        var $664=HEAP[$parser_addr]; //@line 2419 "xmlparse.c"
        var $665=(($664+296)&4294967295); //@line 2419 "xmlparse.c"
        HEAP[$665]=$663; //@line 2419 "xmlparse.c"
        var $666=HEAP[$parser_addr]; //@line 2420 "xmlparse.c"
        var $667=(($666+56)&4294967295); //@line 2420 "xmlparse.c"
        var $668=HEAP[$667]; //@line 2420 "xmlparse.c"
        var $669=($668)!=0; //@line 2420 "xmlparse.c"
        if ($669) { __label__ = 120; break; } else { __label__ = 132; break; } //@line 2420 "xmlparse.c"
      case 120: // $bb124
        var $670=HEAP[$tag120]; //@line 2424 "xmlparse.c"
        var $671=(($670+12)&4294967295); //@line 2424 "xmlparse.c"
        var $672=(($671+4)&4294967295); //@line 2424 "xmlparse.c"
        var $673=HEAP[$672]; //@line 2424 "xmlparse.c"
        HEAP[$localPart]=$673; //@line 2424 "xmlparse.c"
        var $674=HEAP[$parser_addr]; //@line 2425 "xmlparse.c"
        var $675=(($674+232)&4294967295); //@line 2425 "xmlparse.c"
        var $676=HEAP[$675]; //@line 2425 "xmlparse.c"
        var $677=reSign(($676), 8, 0)!=0; //@line 2425 "xmlparse.c"
        if ($677) { __label__ = 121; break; } else { __label__ = 131; break; } //@line 2425 "xmlparse.c"
      case 121: // $bb125
        var $678=HEAP[$localPart]; //@line 2425 "xmlparse.c"
        var $679=($678)!=0; //@line 2425 "xmlparse.c"
        if ($679) { __label__ = 122; break; } else { __label__ = 131; break; } //@line 2425 "xmlparse.c"
      case 122: // $bb126
        var $680=HEAP[$tag120]; //@line 2430 "xmlparse.c"
        var $681=(($680+12)&4294967295); //@line 2430 "xmlparse.c"
        var $682=(($681)&4294967295); //@line 2430 "xmlparse.c"
        var $683=HEAP[$682]; //@line 2430 "xmlparse.c"
        var $684=HEAP[$tag120]; //@line 2430 "xmlparse.c"
        var $685=(($684+12)&4294967295); //@line 2430 "xmlparse.c"
        var $686=(($685+16)&4294967295); //@line 2430 "xmlparse.c"
        var $687=HEAP[$686]; //@line 2430 "xmlparse.c"
        var $688=(($683+$687)&4294967295); //@line 2430 "xmlparse.c"
        HEAP[$uri]=$688; //@line 2430 "xmlparse.c"
        __label__ = 124; break; //@line 2430 "xmlparse.c"
      case 123: // $bb127
        var $689=HEAP[$localPart]; //@line 2432 "xmlparse.c"
        var $690=HEAP[$689]; //@line 2432 "xmlparse.c"
        var $691=HEAP[$uri]; //@line 2432 "xmlparse.c"
        HEAP[$691]=$690; //@line 2432 "xmlparse.c"
        var $692=HEAP[$uri]; //@line 2432 "xmlparse.c"
        var $693=(($692+1)&4294967295); //@line 2432 "xmlparse.c"
        HEAP[$uri]=$693; //@line 2432 "xmlparse.c"
        var $694=HEAP[$localPart]; //@line 2432 "xmlparse.c"
        var $695=(($694+1)&4294967295); //@line 2432 "xmlparse.c"
        HEAP[$localPart]=$695; //@line 2432 "xmlparse.c"
        __label__ = 124; break; //@line 2432 "xmlparse.c"
      case 124: // $bb128
        var $696=HEAP[$localPart]; //@line 2432 "xmlparse.c"
        var $697=HEAP[$696]; //@line 2432 "xmlparse.c"
        var $698=reSign(($697), 8, 0)!=0; //@line 2432 "xmlparse.c"
        if ($698) { __label__ = 123; break; } else { __label__ = 125; break; } //@line 2432 "xmlparse.c"
      case 125: // $bb129
        var $699=HEAP[$tag120]; //@line 2433 "xmlparse.c"
        var $700=(($699+12)&4294967295); //@line 2433 "xmlparse.c"
        var $701=(($700+8)&4294967295); //@line 2433 "xmlparse.c"
        var $702=HEAP[$701]; //@line 2433 "xmlparse.c"
        HEAP[$prefix]=$702; //@line 2433 "xmlparse.c"
        var $703=HEAP[$parser_addr]; //@line 2434 "xmlparse.c"
        var $704=(($703+233)&4294967295); //@line 2434 "xmlparse.c"
        var $705=HEAP[$704]; //@line 2434 "xmlparse.c"
        var $706=reSign(($705), 8, 0)!=0; //@line 2434 "xmlparse.c"
        if ($706) { __label__ = 126; break; } else { __label__ = 130; break; } //@line 2434 "xmlparse.c"
      case 126: // $bb130
        var $707=HEAP[$prefix]; //@line 2434 "xmlparse.c"
        var $708=($707)!=0; //@line 2434 "xmlparse.c"
        if ($708) { __label__ = 127; break; } else { __label__ = 130; break; } //@line 2434 "xmlparse.c"
      case 127: // $bb131
        var $709=HEAP[$parser_addr]; //@line 2435 "xmlparse.c"
        var $710=(($709+456)&4294967295); //@line 2435 "xmlparse.c"
        var $711=HEAP[$710]; //@line 2435 "xmlparse.c"
        var $712=HEAP[$uri]; //@line 2435 "xmlparse.c"
        HEAP[$712]=$711; //@line 2435 "xmlparse.c"
        var $713=HEAP[$uri]; //@line 2435 "xmlparse.c"
        var $714=(($713+1)&4294967295); //@line 2435 "xmlparse.c"
        HEAP[$uri]=$714; //@line 2435 "xmlparse.c"
        __label__ = 129; break; //@line 2435 "xmlparse.c"
      case 128: // $bb132
        var $715=HEAP[$prefix]; //@line 2436 "xmlparse.c"
        var $716=HEAP[$715]; //@line 2436 "xmlparse.c"
        var $717=HEAP[$uri]; //@line 2436 "xmlparse.c"
        HEAP[$717]=$716; //@line 2436 "xmlparse.c"
        var $718=HEAP[$uri]; //@line 2436 "xmlparse.c"
        var $719=(($718+1)&4294967295); //@line 2436 "xmlparse.c"
        HEAP[$uri]=$719; //@line 2436 "xmlparse.c"
        var $720=HEAP[$prefix]; //@line 2436 "xmlparse.c"
        var $721=(($720+1)&4294967295); //@line 2436 "xmlparse.c"
        HEAP[$prefix]=$721; //@line 2436 "xmlparse.c"
        __label__ = 129; break; //@line 2436 "xmlparse.c"
      case 129: // $bb133
        var $722=HEAP[$prefix]; //@line 2436 "xmlparse.c"
        var $723=HEAP[$722]; //@line 2436 "xmlparse.c"
        var $724=reSign(($723), 8, 0)!=0; //@line 2436 "xmlparse.c"
        if ($724) { __label__ = 128; break; } else { __label__ = 130; break; } //@line 2436 "xmlparse.c"
      case 130: // $bb134
        var $725=HEAP[$uri]; //@line 2438 "xmlparse.c"
        HEAP[$725]=0; //@line 2438 "xmlparse.c"
        __label__ = 131; break; //@line 2438 "xmlparse.c"
      case 131: // $bb135
        var $726=HEAP[$parser_addr]; //@line 2440 "xmlparse.c"
        var $727=(($726+56)&4294967295); //@line 2440 "xmlparse.c"
        var $728=HEAP[$727]; //@line 2440 "xmlparse.c"
        var $729=HEAP[$tag120]; //@line 2440 "xmlparse.c"
        var $730=(($729+12)&4294967295); //@line 2440 "xmlparse.c"
        var $731=(($730)&4294967295); //@line 2440 "xmlparse.c"
        var $732=HEAP[$731]; //@line 2440 "xmlparse.c"
        var $733=HEAP[$parser_addr]; //@line 2440 "xmlparse.c"
        var $734=(($733+4)&4294967295); //@line 2440 "xmlparse.c"
        var $735=HEAP[$734]; //@line 2440 "xmlparse.c"
        FUNCTION_TABLE[$728]($735, $732); //@line 2440 "xmlparse.c"
        __label__ = 134; break; //@line 2440 "xmlparse.c"
      case 132: // $bb136
        var $736=HEAP[$parser_addr]; //@line 2442 "xmlparse.c"
        var $737=(($736+80)&4294967295); //@line 2442 "xmlparse.c"
        var $738=HEAP[$737]; //@line 2442 "xmlparse.c"
        var $739=($738)!=0; //@line 2442 "xmlparse.c"
        if ($739) { __label__ = 133; break; } else { __label__ = 134; break; } //@line 2442 "xmlparse.c"
      case 133: // $bb137
        var $740=HEAP[$next]; //@line 2443 "xmlparse.c"
        var $741=HEAP[$s_addr]; //@line 2443 "xmlparse.c"
        var $742=HEAP[$parser_addr]; //@line 2443 "xmlparse.c"
        var $743=HEAP[$enc_addr]; //@line 2443 "xmlparse.c"
        _reportDefault($742, $743, $741, $740); //@line 2443 "xmlparse.c"
        __label__ = 134; break; //@line 2443 "xmlparse.c"
      case 134: // $bb138
        __label__ = 138; break; //@line 2443 "xmlparse.c"
      case 135: // $bb139
        var $744=HEAP[$tag120]; //@line 2445 "xmlparse.c"
        var $745=(($744+44)&4294967295); //@line 2445 "xmlparse.c"
        var $746=HEAP[$745]; //@line 2445 "xmlparse.c"
        HEAP[$b140]=$746; //@line 2445 "xmlparse.c"
        var $747=HEAP[$parser_addr]; //@line 2446 "xmlparse.c"
        var $748=(($747+104)&4294967295); //@line 2446 "xmlparse.c"
        var $749=HEAP[$748]; //@line 2446 "xmlparse.c"
        var $750=($749)!=0; //@line 2446 "xmlparse.c"
        if ($750) { __label__ = 136; break; } else { __label__ = 137; break; } //@line 2446 "xmlparse.c"
      case 136: // $bb141
        var $751=HEAP[$parser_addr]; //@line 2447 "xmlparse.c"
        var $752=(($751+104)&4294967295); //@line 2447 "xmlparse.c"
        var $753=HEAP[$752]; //@line 2447 "xmlparse.c"
        var $754=HEAP[$b140]; //@line 2447 "xmlparse.c"
        var $755=(($754)&4294967295); //@line 2447 "xmlparse.c"
        var $756=HEAP[$755]; //@line 2447 "xmlparse.c"
        var $757=(($756)&4294967295); //@line 2447 "xmlparse.c"
        var $758=HEAP[$757]; //@line 2447 "xmlparse.c"
        var $759=HEAP[$parser_addr]; //@line 2447 "xmlparse.c"
        var $760=(($759+4)&4294967295); //@line 2447 "xmlparse.c"
        var $761=HEAP[$760]; //@line 2447 "xmlparse.c"
        FUNCTION_TABLE[$753]($761, $758); //@line 2447 "xmlparse.c"
        __label__ = 137; break; //@line 2447 "xmlparse.c"
      case 137: // $bb142
        var $762=HEAP[$tag120]; //@line 2448 "xmlparse.c"
        var $763=(($762+44)&4294967295); //@line 2448 "xmlparse.c"
        var $764=HEAP[$763]; //@line 2448 "xmlparse.c"
        var $765=(($764+4)&4294967295); //@line 2448 "xmlparse.c"
        var $766=HEAP[$765]; //@line 2448 "xmlparse.c"
        var $767=HEAP[$tag120]; //@line 2448 "xmlparse.c"
        var $768=(($767+44)&4294967295); //@line 2448 "xmlparse.c"
        HEAP[$768]=$766; //@line 2448 "xmlparse.c"
        var $769=HEAP[$parser_addr]; //@line 2449 "xmlparse.c"
        var $770=(($769+360)&4294967295); //@line 2449 "xmlparse.c"
        var $771=HEAP[$770]; //@line 2449 "xmlparse.c"
        var $772=HEAP[$b140]; //@line 2449 "xmlparse.c"
        var $773=(($772+4)&4294967295); //@line 2449 "xmlparse.c"
        HEAP[$773]=$771; //@line 2449 "xmlparse.c"
        var $774=HEAP[$parser_addr]; //@line 2450 "xmlparse.c"
        var $775=(($774+360)&4294967295); //@line 2450 "xmlparse.c"
        var $776=HEAP[$b140]; //@line 2450 "xmlparse.c"
        HEAP[$775]=$776; //@line 2450 "xmlparse.c"
        var $777=HEAP[$b140]; //@line 2451 "xmlparse.c"
        var $778=(($777)&4294967295); //@line 2451 "xmlparse.c"
        var $779=HEAP[$778]; //@line 2451 "xmlparse.c"
        var $780=HEAP[$b140]; //@line 2451 "xmlparse.c"
        var $781=(($780+8)&4294967295); //@line 2451 "xmlparse.c"
        var $782=HEAP[$781]; //@line 2451 "xmlparse.c"
        var $783=(($779+4)&4294967295); //@line 2451 "xmlparse.c"
        HEAP[$783]=$782; //@line 2451 "xmlparse.c"
        __label__ = 138; break; //@line 2451 "xmlparse.c"
      case 138: // $bb143
        var $784=HEAP[$tag120]; //@line 2444 "xmlparse.c"
        var $785=(($784+44)&4294967295); //@line 2444 "xmlparse.c"
        var $786=HEAP[$785]; //@line 2444 "xmlparse.c"
        var $787=($786)!=0; //@line 2444 "xmlparse.c"
        if ($787) { __label__ = 135; break; } else { __label__ = 139; break; } //@line 2444 "xmlparse.c"
      case 139: // $bb144
        var $788=HEAP[$parser_addr]; //@line 2453 "xmlparse.c"
        var $789=(($788+296)&4294967295); //@line 2453 "xmlparse.c"
        var $790=HEAP[$789]; //@line 2453 "xmlparse.c"
        var $791=((($790))|0)==0; //@line 2453 "xmlparse.c"
        if ($791) { __label__ = 140; break; } else { __label__ = 141; break; } //@line 2453 "xmlparse.c"
      case 140: // $bb145
        var $792=HEAP[$next]; //@line 2454 "xmlparse.c"
        var $793=HEAP[$parser_addr]; //@line 2454 "xmlparse.c"
        var $794=HEAP[$end_addr]; //@line 2454 "xmlparse.c"
        var $795=HEAP[$nextPtr_addr]; //@line 2454 "xmlparse.c"
        var $796=_epilogProcessor($793, $792, $794, $795); //@line 2454 "xmlparse.c"
        HEAP[$0]=$796; //@line 2454 "xmlparse.c"
        __label__ = 200; break; //@line 2454 "xmlparse.c"
      case 141: // $bb146
        __label__ = 196; break; //@line 2454 "xmlparse.c"
      case 142: // $bb147
        var $797=HEAP[$enc_addr]; //@line 2459 "xmlparse.c"
        var $798=(($797+40)&4294967295); //@line 2459 "xmlparse.c"
        var $799=HEAP[$798]; //@line 2459 "xmlparse.c"
        var $800=HEAP[$s_addr]; //@line 2459 "xmlparse.c"
        var $801=HEAP[$enc_addr]; //@line 2459 "xmlparse.c"
        var $802=FUNCTION_TABLE[$799]($801, $800); //@line 2459 "xmlparse.c"
        HEAP[$n]=$802; //@line 2459 "xmlparse.c"
        var $803=HEAP[$n]; //@line 2460 "xmlparse.c"
        var $804=((($803))|0) < 0; //@line 2460 "xmlparse.c"
        if ($804) { __label__ = 143; break; } else { __label__ = 144; break; } //@line 2460 "xmlparse.c"
      case 143: // $bb148
        HEAP[$0]=14; //@line 2461 "xmlparse.c"
        __label__ = 200; break; //@line 2461 "xmlparse.c"
      case 144: // $bb149
        var $805=HEAP[$parser_addr]; //@line 2462 "xmlparse.c"
        var $806=(($805+60)&4294967295); //@line 2462 "xmlparse.c"
        var $807=HEAP[$806]; //@line 2462 "xmlparse.c"
        var $808=($807)!=0; //@line 2462 "xmlparse.c"
        if ($808) { __label__ = 145; break; } else { __label__ = 146; break; } //@line 2462 "xmlparse.c"
      case 145: // $bb150
        var $809=HEAP[$parser_addr]; //@line 2464 "xmlparse.c"
        var $810=(($809+60)&4294967295); //@line 2464 "xmlparse.c"
        var $811=HEAP[$810]; //@line 2464 "xmlparse.c"
        var $812=HEAP[$n]; //@line 2464 "xmlparse.c"
        var $buf151=$buf; //@line 2464 "xmlparse.c"
        var $813=_PyExpat_XmlUtf8Encode($812, $buf151); //@line 2464 "xmlparse.c"
        var $814=HEAP[$parser_addr]; //@line 2464 "xmlparse.c"
        var $815=(($814+4)&4294967295); //@line 2464 "xmlparse.c"
        var $816=HEAP[$815]; //@line 2464 "xmlparse.c"
        var $buf152=$buf; //@line 2464 "xmlparse.c"
        FUNCTION_TABLE[$811]($816, $buf152, $813); //@line 2464 "xmlparse.c"
        __label__ = 148; break; //@line 2464 "xmlparse.c"
      case 146: // $bb153
        var $817=HEAP[$parser_addr]; //@line 2466 "xmlparse.c"
        var $818=(($817+80)&4294967295); //@line 2466 "xmlparse.c"
        var $819=HEAP[$818]; //@line 2466 "xmlparse.c"
        var $820=($819)!=0; //@line 2466 "xmlparse.c"
        if ($820) { __label__ = 147; break; } else { __label__ = 148; break; } //@line 2466 "xmlparse.c"
      case 147: // $bb154
        var $821=HEAP[$next]; //@line 2467 "xmlparse.c"
        var $822=HEAP[$s_addr]; //@line 2467 "xmlparse.c"
        var $823=HEAP[$parser_addr]; //@line 2467 "xmlparse.c"
        var $824=HEAP[$enc_addr]; //@line 2467 "xmlparse.c"
        _reportDefault($823, $824, $822, $821); //@line 2467 "xmlparse.c"
        __label__ = 148; break; //@line 2467 "xmlparse.c"
      case 148: // $bb155
        __label__ = 196; break; //@line 2467 "xmlparse.c"
      case 149: // $bb156
        HEAP[$0]=17; //@line 2471 "xmlparse.c"
        __label__ = 200; break; //@line 2471 "xmlparse.c"
      case 150: // $bb157
        var $825=HEAP[$parser_addr]; //@line 2473 "xmlparse.c"
        var $826=(($825+60)&4294967295); //@line 2473 "xmlparse.c"
        var $827=HEAP[$826]; //@line 2473 "xmlparse.c"
        var $828=($827)!=0; //@line 2473 "xmlparse.c"
        if ($828) { __label__ = 151; break; } else { __label__ = 152; break; } //@line 2473 "xmlparse.c"
      case 151: // $bb158
        HEAP[$c159]=10; //@line 2474 "xmlparse.c"
        var $829=HEAP[$parser_addr]; //@line 2475 "xmlparse.c"
        var $830=(($829+60)&4294967295); //@line 2475 "xmlparse.c"
        var $831=HEAP[$830]; //@line 2475 "xmlparse.c"
        var $832=HEAP[$parser_addr]; //@line 2475 "xmlparse.c"
        var $833=(($832+4)&4294967295); //@line 2475 "xmlparse.c"
        var $834=HEAP[$833]; //@line 2475 "xmlparse.c"
        FUNCTION_TABLE[$831]($834, $c159, 1); //@line 2475 "xmlparse.c"
        __label__ = 154; break; //@line 2475 "xmlparse.c"
      case 152: // $bb160
        var $835=HEAP[$parser_addr]; //@line 2477 "xmlparse.c"
        var $836=(($835+80)&4294967295); //@line 2477 "xmlparse.c"
        var $837=HEAP[$836]; //@line 2477 "xmlparse.c"
        var $838=($837)!=0; //@line 2477 "xmlparse.c"
        if ($838) { __label__ = 153; break; } else { __label__ = 154; break; } //@line 2477 "xmlparse.c"
      case 153: // $bb161
        var $839=HEAP[$next]; //@line 2478 "xmlparse.c"
        var $840=HEAP[$s_addr]; //@line 2478 "xmlparse.c"
        var $841=HEAP[$parser_addr]; //@line 2478 "xmlparse.c"
        var $842=HEAP[$enc_addr]; //@line 2478 "xmlparse.c"
        _reportDefault($841, $842, $840, $839); //@line 2478 "xmlparse.c"
        __label__ = 154; break; //@line 2478 "xmlparse.c"
      case 154: // $bb162
        __label__ = 196; break; //@line 2478 "xmlparse.c"
      case 155: // $bb163
        var $843=HEAP[$parser_addr]; //@line 2483 "xmlparse.c"
        var $844=(($843+72)&4294967295); //@line 2483 "xmlparse.c"
        var $845=HEAP[$844]; //@line 2483 "xmlparse.c"
        var $846=($845)!=0; //@line 2483 "xmlparse.c"
        if ($846) { __label__ = 156; break; } else { __label__ = 157; break; } //@line 2483 "xmlparse.c"
      case 156: // $bb165
        var $847=HEAP[$parser_addr]; //@line 2484 "xmlparse.c"
        var $848=(($847+72)&4294967295); //@line 2484 "xmlparse.c"
        var $849=HEAP[$848]; //@line 2484 "xmlparse.c"
        var $850=HEAP[$parser_addr]; //@line 2484 "xmlparse.c"
        var $851=(($850+4)&4294967295); //@line 2484 "xmlparse.c"
        var $852=HEAP[$851]; //@line 2484 "xmlparse.c"
        FUNCTION_TABLE[$849]($852); //@line 2484 "xmlparse.c"
        __label__ = 159; break; //@line 2484 "xmlparse.c"
      case 157: // $bb166
        var $853=HEAP[$parser_addr]; //@line 2501 "xmlparse.c"
        var $854=(($853+80)&4294967295); //@line 2501 "xmlparse.c"
        var $855=HEAP[$854]; //@line 2501 "xmlparse.c"
        var $856=($855)!=0; //@line 2501 "xmlparse.c"
        if ($856) { __label__ = 158; break; } else { __label__ = 159; break; } //@line 2501 "xmlparse.c"
      case 158: // $bb167
        var $857=HEAP[$next]; //@line 2502 "xmlparse.c"
        var $858=HEAP[$s_addr]; //@line 2502 "xmlparse.c"
        var $859=HEAP[$parser_addr]; //@line 2502 "xmlparse.c"
        var $860=HEAP[$enc_addr]; //@line 2502 "xmlparse.c"
        _reportDefault($859, $860, $858, $857); //@line 2502 "xmlparse.c"
        __label__ = 159; break; //@line 2502 "xmlparse.c"
      case 159: // $bb168
        var $861=HEAP[$haveMore_addr]; //@line 2503 "xmlparse.c"
        var $862=unSign(($861), 8, 0); //@line 2503 "xmlparse.c"
        var $863=HEAP[$parser_addr]; //@line 2503 "xmlparse.c"
        var $864=HEAP[$enc_addr]; //@line 2503 "xmlparse.c"
        var $865=HEAP[$end_addr]; //@line 2503 "xmlparse.c"
        var $866=HEAP[$nextPtr_addr]; //@line 2503 "xmlparse.c"
        var $867=((($862)) & 255); //@line 2503 "xmlparse.c"
        var $868=_doCdataSection($863, $864, $next, $865, $866, $867); //@line 2503 "xmlparse.c"
        HEAP[$result164]=$868; //@line 2503 "xmlparse.c"
        var $869=HEAP[$result164]; //@line 2504 "xmlparse.c"
        var $870=((($869))|0)!=0; //@line 2504 "xmlparse.c"
        if ($870) { __label__ = 160; break; } else { __label__ = 161; break; } //@line 2504 "xmlparse.c"
      case 160: // $bb169
        var $871=HEAP[$result164]; //@line 2505 "xmlparse.c"
        HEAP[$0]=$871; //@line 2505 "xmlparse.c"
        __label__ = 200; break; //@line 2505 "xmlparse.c"
      case 161: // $bb170
        var $872=HEAP[$next]; //@line 2506 "xmlparse.c"
        var $873=($872)==0; //@line 2506 "xmlparse.c"
        if ($873) { __label__ = 162; break; } else { __label__ = 163; break; } //@line 2506 "xmlparse.c"
      case 162: // $bb171
        var $874=HEAP[$parser_addr]; //@line 2507 "xmlparse.c"
        var $875=(($874+264)&4294967295); //@line 2507 "xmlparse.c"
        HEAP[$875]=(FUNCTION_TABLE_OFFSET + 60); //@line 2507 "xmlparse.c"
        var $876=HEAP[$result164]; //@line 2508 "xmlparse.c"
        HEAP[$0]=$876; //@line 2508 "xmlparse.c"
        __label__ = 200; break; //@line 2508 "xmlparse.c"
      case 163: // $bb172
        __label__ = 196; break; //@line 2508 "xmlparse.c"
      case 164: // $bb173
        var $877=HEAP[$haveMore_addr]; //@line 2513 "xmlparse.c"
        var $878=reSign(($877), 8, 0)!=0; //@line 2513 "xmlparse.c"
        if ($878) { __label__ = 165; break; } else { __label__ = 166; break; } //@line 2513 "xmlparse.c"
      case 165: // $bb174
        var $879=HEAP[$s_addr]; //@line 2514 "xmlparse.c"
        var $880=HEAP[$nextPtr_addr]; //@line 2514 "xmlparse.c"
        HEAP[$880]=$879; //@line 2514 "xmlparse.c"
        HEAP[$0]=0; //@line 2515 "xmlparse.c"
        __label__ = 200; break; //@line 2515 "xmlparse.c"
      case 166: // $bb175
        var $881=HEAP[$parser_addr]; //@line 2517 "xmlparse.c"
        var $882=(($881+60)&4294967295); //@line 2517 "xmlparse.c"
        var $883=HEAP[$882]; //@line 2517 "xmlparse.c"
        var $884=($883)!=0; //@line 2517 "xmlparse.c"
        if ($884) { __label__ = 167; break; } else { __label__ = 171; break; } //@line 2517 "xmlparse.c"
      case 167: // $bb176
        var $885=HEAP[$enc_addr]; //@line 2518 "xmlparse.c"
        var $886=(($885+68)&4294967295); //@line 2518 "xmlparse.c"
        var $887=HEAP[$886]; //@line 2518 "xmlparse.c"
        var $888=reSign(($887), 8, 0)==0; //@line 2518 "xmlparse.c"
        if ($888) { __label__ = 168; break; } else { __label__ = 169; break; } //@line 2518 "xmlparse.c"
      case 168: // $bb177
        var $889=HEAP[$parser_addr]; //@line 2519 "xmlparse.c"
        var $890=(($889+44)&4294967295); //@line 2519 "xmlparse.c"
        var $891=HEAP[$890]; //@line 2519 "xmlparse.c"
        HEAP[$dataPtr]=$891; //@line 2519 "xmlparse.c"
        var $892=HEAP[$enc_addr]; //@line 2520 "xmlparse.c"
        var $893=(($892+56)&4294967295); //@line 2520 "xmlparse.c"
        var $894=HEAP[$893]; //@line 2520 "xmlparse.c"
        var $895=HEAP[$parser_addr]; //@line 2520 "xmlparse.c"
        var $896=(($895+48)&4294967295); //@line 2520 "xmlparse.c"
        var $897=HEAP[$896]; //@line 2520 "xmlparse.c"
        var $898=HEAP[$enc_addr]; //@line 2520 "xmlparse.c"
        var $899=HEAP[$end_addr]; //@line 2520 "xmlparse.c"
        FUNCTION_TABLE[$894]($898, $s_addr, $899, $dataPtr, $897); //@line 2520 "xmlparse.c"
        var $900=HEAP[$parser_addr]; //@line 2521 "xmlparse.c"
        var $901=(($900+60)&4294967295); //@line 2521 "xmlparse.c"
        var $902=HEAP[$901]; //@line 2521 "xmlparse.c"
        var $903=HEAP[$dataPtr]; //@line 2521 "xmlparse.c"
        var $904=($903); //@line 2521 "xmlparse.c"
        var $905=HEAP[$parser_addr]; //@line 2521 "xmlparse.c"
        var $906=(($905+44)&4294967295); //@line 2521 "xmlparse.c"
        var $907=HEAP[$906]; //@line 2521 "xmlparse.c"
        var $908=($907); //@line 2521 "xmlparse.c"
        var $909=((($904) - ($908))&4294967295); //@line 2521 "xmlparse.c"
        var $910=HEAP[$parser_addr]; //@line 2521 "xmlparse.c"
        var $911=(($910+44)&4294967295); //@line 2521 "xmlparse.c"
        var $912=HEAP[$911]; //@line 2521 "xmlparse.c"
        var $913=HEAP[$parser_addr]; //@line 2521 "xmlparse.c"
        var $914=(($913+4)&4294967295); //@line 2521 "xmlparse.c"
        var $915=HEAP[$914]; //@line 2521 "xmlparse.c"
        FUNCTION_TABLE[$902]($915, $912, $909); //@line 2521 "xmlparse.c"
        __label__ = 170; break; //@line 2521 "xmlparse.c"
      case 169: // $bb178
        var $916=HEAP[$parser_addr]; //@line 2525 "xmlparse.c"
        var $917=(($916+60)&4294967295); //@line 2525 "xmlparse.c"
        var $918=HEAP[$917]; //@line 2525 "xmlparse.c"
        var $919=HEAP[$end_addr]; //@line 2525 "xmlparse.c"
        var $920=($919); //@line 2525 "xmlparse.c"
        var $921=HEAP[$s_addr]; //@line 2525 "xmlparse.c"
        var $922=($921); //@line 2525 "xmlparse.c"
        var $923=((($920) - ($922))&4294967295); //@line 2525 "xmlparse.c"
        var $924=HEAP[$s_addr]; //@line 2525 "xmlparse.c"
        var $925=HEAP[$parser_addr]; //@line 2525 "xmlparse.c"
        var $926=(($925+4)&4294967295); //@line 2525 "xmlparse.c"
        var $927=HEAP[$926]; //@line 2525 "xmlparse.c"
        FUNCTION_TABLE[$918]($927, $924, $923); //@line 2525 "xmlparse.c"
        __label__ = 170; break; //@line 2525 "xmlparse.c"
      case 170: // $bb179
        __label__ = 173; break; //@line 2525 "xmlparse.c"
      case 171: // $bb180
        var $928=HEAP[$parser_addr]; //@line 2529 "xmlparse.c"
        var $929=(($928+80)&4294967295); //@line 2529 "xmlparse.c"
        var $930=HEAP[$929]; //@line 2529 "xmlparse.c"
        var $931=($930)!=0; //@line 2529 "xmlparse.c"
        if ($931) { __label__ = 172; break; } else { __label__ = 173; break; } //@line 2529 "xmlparse.c"
      case 172: // $bb181
        var $932=HEAP[$s_addr]; //@line 2530 "xmlparse.c"
        var $933=HEAP[$parser_addr]; //@line 2530 "xmlparse.c"
        var $934=HEAP[$enc_addr]; //@line 2530 "xmlparse.c"
        var $935=HEAP[$end_addr]; //@line 2530 "xmlparse.c"
        _reportDefault($933, $934, $932, $935); //@line 2530 "xmlparse.c"
        __label__ = 173; break; //@line 2530 "xmlparse.c"
      case 173: // $bb182
        var $936=HEAP[$startTagLevel_addr]; //@line 2534 "xmlparse.c"
        var $937=((($936))|0)==0; //@line 2534 "xmlparse.c"
        if ($937) { __label__ = 174; break; } else { __label__ = 175; break; } //@line 2534 "xmlparse.c"
      case 174: // $bb183
        var $938=HEAP[$eventPP]; //@line 2535 "xmlparse.c"
        var $939=HEAP[$end_addr]; //@line 2535 "xmlparse.c"
        HEAP[$938]=$939; //@line 2535 "xmlparse.c"
        HEAP[$0]=3; //@line 2536 "xmlparse.c"
        __label__ = 200; break; //@line 2536 "xmlparse.c"
      case 175: // $bb184
        var $940=HEAP[$parser_addr]; //@line 2538 "xmlparse.c"
        var $941=(($940+296)&4294967295); //@line 2538 "xmlparse.c"
        var $942=HEAP[$941]; //@line 2538 "xmlparse.c"
        var $943=HEAP[$startTagLevel_addr]; //@line 2538 "xmlparse.c"
        var $944=((($942))|0)!=((($943))|0); //@line 2538 "xmlparse.c"
        if ($944) { __label__ = 176; break; } else { __label__ = 177; break; } //@line 2538 "xmlparse.c"
      case 176: // $bb185
        var $945=HEAP[$eventPP]; //@line 2539 "xmlparse.c"
        var $946=HEAP[$end_addr]; //@line 2539 "xmlparse.c"
        HEAP[$945]=$946; //@line 2539 "xmlparse.c"
        HEAP[$0]=13; //@line 2540 "xmlparse.c"
        __label__ = 200; break; //@line 2540 "xmlparse.c"
      case 177: // $bb186
        var $947=HEAP[$nextPtr_addr]; //@line 2542 "xmlparse.c"
        var $948=HEAP[$end_addr]; //@line 2542 "xmlparse.c"
        HEAP[$947]=$948; //@line 2542 "xmlparse.c"
        HEAP[$0]=0; //@line 2543 "xmlparse.c"
        __label__ = 200; break; //@line 2543 "xmlparse.c"
      case 178: // $bb187
        var $949=HEAP[$parser_addr]; //@line 2545 "xmlparse.c"
        var $950=(($949+60)&4294967295); //@line 2545 "xmlparse.c"
        var $951=HEAP[$950]; //@line 2545 "xmlparse.c"
        var $952=($951)!=0; //@line 2545 "xmlparse.c"
        if ($952) { __label__ = 179; break; } else { __label__ = 185; break; } //@line 2545 "xmlparse.c"
      case 179: // $bb188
        var $953=HEAP[$enc_addr]; //@line 2546 "xmlparse.c"
        var $954=(($953+68)&4294967295); //@line 2546 "xmlparse.c"
        var $955=HEAP[$954]; //@line 2546 "xmlparse.c"
        var $956=reSign(($955), 8, 0)==0; //@line 2546 "xmlparse.c"
        if ($956) { __label__ = 180; break; } else { __label__ = 183; break; } //@line 2546 "xmlparse.c"
      case 180: // $bb189
        var $957=HEAP[$parser_addr]; //@line 2548 "xmlparse.c"
        var $958=(($957+44)&4294967295); //@line 2548 "xmlparse.c"
        var $959=HEAP[$958]; //@line 2548 "xmlparse.c"
        HEAP[$dataPtr190]=$959; //@line 2548 "xmlparse.c"
        var $960=HEAP[$enc_addr]; //@line 2549 "xmlparse.c"
        var $961=(($960+56)&4294967295); //@line 2549 "xmlparse.c"
        var $962=HEAP[$961]; //@line 2549 "xmlparse.c"
        var $963=HEAP[$parser_addr]; //@line 2549 "xmlparse.c"
        var $964=(($963+48)&4294967295); //@line 2549 "xmlparse.c"
        var $965=HEAP[$964]; //@line 2549 "xmlparse.c"
        var $966=HEAP[$next]; //@line 2549 "xmlparse.c"
        var $967=HEAP[$enc_addr]; //@line 2549 "xmlparse.c"
        FUNCTION_TABLE[$962]($967, $s_addr, $966, $dataPtr190, $965); //@line 2549 "xmlparse.c"
        var $968=HEAP[$s_addr]; //@line 2550 "xmlparse.c"
        var $969=HEAP[$eventEndPP]; //@line 2550 "xmlparse.c"
        HEAP[$969]=$968; //@line 2550 "xmlparse.c"
        var $970=HEAP[$parser_addr]; //@line 2551 "xmlparse.c"
        var $971=(($970+60)&4294967295); //@line 2551 "xmlparse.c"
        var $972=HEAP[$971]; //@line 2551 "xmlparse.c"
        var $973=HEAP[$dataPtr190]; //@line 2551 "xmlparse.c"
        var $974=($973); //@line 2551 "xmlparse.c"
        var $975=HEAP[$parser_addr]; //@line 2551 "xmlparse.c"
        var $976=(($975+44)&4294967295); //@line 2551 "xmlparse.c"
        var $977=HEAP[$976]; //@line 2551 "xmlparse.c"
        var $978=($977); //@line 2551 "xmlparse.c"
        var $979=((($974) - ($978))&4294967295); //@line 2551 "xmlparse.c"
        var $980=HEAP[$parser_addr]; //@line 2551 "xmlparse.c"
        var $981=(($980+44)&4294967295); //@line 2551 "xmlparse.c"
        var $982=HEAP[$981]; //@line 2551 "xmlparse.c"
        var $983=HEAP[$parser_addr]; //@line 2551 "xmlparse.c"
        var $984=(($983+4)&4294967295); //@line 2551 "xmlparse.c"
        var $985=HEAP[$984]; //@line 2551 "xmlparse.c"
        FUNCTION_TABLE[$972]($985, $982, $979); //@line 2551 "xmlparse.c"
        var $986=HEAP[$s_addr]; //@line 2553 "xmlparse.c"
        var $987=HEAP[$next]; //@line 2553 "xmlparse.c"
        var $988=($986)==($987); //@line 2553 "xmlparse.c"
        if ($988) { __label__ = 182; break; } else { __label__ = 181; break; } //@line 2553 "xmlparse.c"
      case 181: // $bb191
        var $989=HEAP[$s_addr]; //@line 2555 "xmlparse.c"
        var $990=HEAP[$eventPP]; //@line 2555 "xmlparse.c"
        HEAP[$990]=$989; //@line 2555 "xmlparse.c"
        __label__ = 180; break; //@line 2555 "xmlparse.c"
      case 182: // $bb192
        __label__ = 184; break; //@line 2555 "xmlparse.c"
      case 183: // $bb193
        var $991=HEAP[$parser_addr]; //@line 2559 "xmlparse.c"
        var $992=(($991+60)&4294967295); //@line 2559 "xmlparse.c"
        var $993=HEAP[$992]; //@line 2559 "xmlparse.c"
        var $994=HEAP[$next]; //@line 2559 "xmlparse.c"
        var $995=($994); //@line 2559 "xmlparse.c"
        var $996=HEAP[$s_addr]; //@line 2559 "xmlparse.c"
        var $997=($996); //@line 2559 "xmlparse.c"
        var $998=((($995) - ($997))&4294967295); //@line 2559 "xmlparse.c"
        var $999=HEAP[$s_addr]; //@line 2559 "xmlparse.c"
        var $1000=HEAP[$parser_addr]; //@line 2559 "xmlparse.c"
        var $1001=(($1000+4)&4294967295); //@line 2559 "xmlparse.c"
        var $1002=HEAP[$1001]; //@line 2559 "xmlparse.c"
        FUNCTION_TABLE[$993]($1002, $999, $998); //@line 2559 "xmlparse.c"
        __label__ = 184; break; //@line 2559 "xmlparse.c"
      case 184: // $bb194
        __label__ = 187; break; //@line 2559 "xmlparse.c"
      case 185: // $bb195
        var $1003=HEAP[$parser_addr]; //@line 2563 "xmlparse.c"
        var $1004=(($1003+80)&4294967295); //@line 2563 "xmlparse.c"
        var $1005=HEAP[$1004]; //@line 2563 "xmlparse.c"
        var $1006=($1005)!=0; //@line 2563 "xmlparse.c"
        if ($1006) { __label__ = 186; break; } else { __label__ = 187; break; } //@line 2563 "xmlparse.c"
      case 186: // $bb196
        var $1007=HEAP[$next]; //@line 2564 "xmlparse.c"
        var $1008=HEAP[$s_addr]; //@line 2564 "xmlparse.c"
        var $1009=HEAP[$parser_addr]; //@line 2564 "xmlparse.c"
        var $1010=HEAP[$enc_addr]; //@line 2564 "xmlparse.c"
        _reportDefault($1009, $1010, $1008, $1007); //@line 2564 "xmlparse.c"
        __label__ = 187; break; //@line 2564 "xmlparse.c"
      case 187: // $bb197
        __label__ = 196; break; //@line 2564 "xmlparse.c"
      case 188: // $bb198
        var $1011=HEAP[$next]; //@line 2567 "xmlparse.c"
        var $1012=HEAP[$s_addr]; //@line 2567 "xmlparse.c"
        var $1013=HEAP[$parser_addr]; //@line 2567 "xmlparse.c"
        var $1014=HEAP[$enc_addr]; //@line 2567 "xmlparse.c"
        var $1015=_reportProcessingInstruction($1013, $1014, $1012, $1011); //@line 2567 "xmlparse.c"
        var $1016=((($1015))|0)==0; //@line 2567 "xmlparse.c"
        if ($1016) { __label__ = 189; break; } else { __label__ = 190; break; } //@line 2567 "xmlparse.c"
      case 189: // $bb199
        HEAP[$0]=1; //@line 2568 "xmlparse.c"
        __label__ = 200; break; //@line 2568 "xmlparse.c"
      case 190: // $bb200
        __label__ = 196; break; //@line 2568 "xmlparse.c"
      case 191: // $bb201
        var $1017=HEAP[$next]; //@line 2571 "xmlparse.c"
        var $1018=HEAP[$s_addr]; //@line 2571 "xmlparse.c"
        var $1019=HEAP[$parser_addr]; //@line 2571 "xmlparse.c"
        var $1020=HEAP[$enc_addr]; //@line 2571 "xmlparse.c"
        var $1021=_reportComment($1019, $1020, $1018, $1017); //@line 2571 "xmlparse.c"
        var $1022=((($1021))|0)==0; //@line 2571 "xmlparse.c"
        if ($1022) { __label__ = 192; break; } else { __label__ = 193; break; } //@line 2571 "xmlparse.c"
      case 192: // $bb202
        HEAP[$0]=1; //@line 2572 "xmlparse.c"
        __label__ = 200; break; //@line 2572 "xmlparse.c"
      case 193: // $bb203
        __label__ = 196; break; //@line 2572 "xmlparse.c"
      case 194: // $bb204
        var $1023=HEAP[$parser_addr]; //@line 2575 "xmlparse.c"
        var $1024=(($1023+80)&4294967295); //@line 2575 "xmlparse.c"
        var $1025=HEAP[$1024]; //@line 2575 "xmlparse.c"
        var $1026=($1025)!=0; //@line 2575 "xmlparse.c"
        if ($1026) { __label__ = 195; break; } else { __label__ = 196; break; } //@line 2575 "xmlparse.c"
      case 195: // $bb205
        var $1027=HEAP[$next]; //@line 2576 "xmlparse.c"
        var $1028=HEAP[$s_addr]; //@line 2576 "xmlparse.c"
        var $1029=HEAP[$parser_addr]; //@line 2576 "xmlparse.c"
        var $1030=HEAP[$enc_addr]; //@line 2576 "xmlparse.c"
        _reportDefault($1029, $1030, $1028, $1027); //@line 2576 "xmlparse.c"
        __label__ = 196; break; //@line 2576 "xmlparse.c"
      case 196: // $bb206
        var $1031=HEAP[$next]; //@line 2579 "xmlparse.c"
        HEAP[$s_addr]=$1031; //@line 2579 "xmlparse.c"
        var $1032=HEAP[$s_addr]; //@line 2579 "xmlparse.c"
        var $1033=HEAP[$eventPP]; //@line 2579 "xmlparse.c"
        HEAP[$1033]=$1032; //@line 2579 "xmlparse.c"
        var $1034=HEAP[$parser_addr]; //@line 2580 "xmlparse.c"
        var $1035=(($1034+464)&4294967295); //@line 2580 "xmlparse.c"
        var $1036=(($1035)&4294967295); //@line 2580 "xmlparse.c"
        var $1037=HEAP[$1036]; //@line 2580 "xmlparse.c"
        if ($1037 == 2) {
          __label__ = 198; break;
        }
        else if ($1037 == 3) {
          __label__ = 197; break;
        }
        else {
        __label__ = 199; break;
        }
        
      case 197: // $bb207
        var $1038=HEAP[$next]; //@line 2582 "xmlparse.c"
        var $1039=HEAP[$nextPtr_addr]; //@line 2582 "xmlparse.c"
        HEAP[$1039]=$1038; //@line 2582 "xmlparse.c"
        HEAP[$0]=0; //@line 2583 "xmlparse.c"
        __label__ = 200; break; //@line 2583 "xmlparse.c"
      case 198: // $bb208
        HEAP[$0]=35; //@line 2585 "xmlparse.c"
        __label__ = 200; break; //@line 2585 "xmlparse.c"
      case 199: // $bb209
        __label__ = 4; break; //@line 2585 "xmlparse.c"
      case 200: // $bb210
        var $1040=HEAP[$0]; //@line 2170 "xmlparse.c"
        HEAP[$retval]=$1040; //@line 2170 "xmlparse.c"
        __label__ = 201; break; //@line 2170 "xmlparse.c"
      case 201: // $return
        var $retval211=HEAP[$retval]; //@line 2170 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval211; //@line 2170 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _storeAtts($parser, $enc, $attStr, $tagNamePtr, $bindingsPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 171; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 171);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $enc_addr=__stackBase__+4;
        var $attStr_addr=__stackBase__+8;
        var $tagNamePtr_addr=__stackBase__+12;
        var $bindingsPtr_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $iftmp_111=__stackBase__+24;
        var $iftmp_110=__stackBase__+25;
        var $iftmp_108=__stackBase__+29;
        var $iftmp_106=__stackBase__+30;
        var $0=__stackBase__+31;
        var $dtd=__stackBase__+35;
        var $elementType=__stackBase__+39;
        var $nDefaultAtts=__stackBase__+43;
        var $appAtts=__stackBase__+47;
        var $attIndex=__stackBase__+51;
        var $prefixLen=__stackBase__+55;
        var $i=__stackBase__+59;
        var $n=__stackBase__+63;
        var $uri=__stackBase__+67;
        var $nPrefixes=__stackBase__+71;
        var $binding=__stackBase__+75;
        var $localPart=__stackBase__+79;
        var $name=__stackBase__+83;
        var $oldAttsSize=__stackBase__+87;
        var $temp=__stackBase__+91;
        var $attId=__stackBase__+95;
        var $result=__stackBase__+99;
        var $isCdata=__stackBase__+103;
        var $j=__stackBase__+104;
        var $result35=__stackBase__+108;
        var $da=__stackBase__+112;
        var $result58=__stackBase__+116;
        var $j68=__stackBase__+120;
        var $version=__stackBase__+124;
        var $nsAttsSize=__stackBase__+128;
        var $temp70=__stackBase__+132;
        var $s=__stackBase__+136;
        var $id=__stackBase__+140;
        var $b=__stackBase__+144;
        var $uriHash=__stackBase__+148;
        var $c=__stackBase__+152;
        var $c99=__stackBase__+153;
        var $step=__stackBase__+154;
        var $mask=__stackBase__+155;
        var $s1=__stackBase__+159;
        var $s2=__stackBase__+163;
        var $p=__stackBase__+167;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$enc_addr]=$enc;
        HEAP[$attStr_addr]=$attStr;
        HEAP[$tagNamePtr_addr]=$tagNamePtr;
        HEAP[$bindingsPtr_addr]=$bindingsPtr;
        var $1=HEAP[$parser_addr]; //@line 2607 "xmlparse.c"
        var $2=(($1+340)&4294967295); //@line 2607 "xmlparse.c"
        var $3=HEAP[$2]; //@line 2607 "xmlparse.c"
        HEAP[$dtd]=$3; //@line 2607 "xmlparse.c"
        HEAP[$attIndex]=0; //@line 2611 "xmlparse.c"
        HEAP[$nPrefixes]=0; //@line 2616 "xmlparse.c"
        var $4=HEAP[$tagNamePtr_addr]; //@line 2621 "xmlparse.c"
        var $5=(($4)&4294967295); //@line 2621 "xmlparse.c"
        var $6=HEAP[$5]; //@line 2621 "xmlparse.c"
        var $7=HEAP[$dtd]; //@line 2621 "xmlparse.c"
        var $8=(($7+20)&4294967295); //@line 2621 "xmlparse.c"
        var $9=_lookup($8, $6, 0); //@line 2621 "xmlparse.c"
        var $10=$9; //@line 2621 "xmlparse.c"
        HEAP[$elementType]=$10; //@line 2621 "xmlparse.c"
        var $11=HEAP[$elementType]; //@line 2622 "xmlparse.c"
        var $12=($11)==0; //@line 2622 "xmlparse.c"
        if ($12) { __label__ = 1; break; } else { __label__ = 8; break; } //@line 2622 "xmlparse.c"
      case 1: // $bb
        var $13=HEAP[$tagNamePtr_addr]; //@line 2623 "xmlparse.c"
        var $14=(($13)&4294967295); //@line 2623 "xmlparse.c"
        var $15=HEAP[$14]; //@line 2623 "xmlparse.c"
        var $16=HEAP[$dtd]; //@line 2623 "xmlparse.c"
        var $17=(($16+80)&4294967295); //@line 2623 "xmlparse.c"
        var $18=_poolCopyString($17, $15); //@line 2623 "xmlparse.c"
        HEAP[$name]=$18; //@line 2623 "xmlparse.c"
        var $19=HEAP[$name]; //@line 2624 "xmlparse.c"
        var $20=($19)==0; //@line 2624 "xmlparse.c"
        if ($20) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2624 "xmlparse.c"
      case 2: // $bb1
        HEAP[$0]=1; //@line 2625 "xmlparse.c"
        __label__ = 163; break; //@line 2625 "xmlparse.c"
      case 3: // $bb2
        var $21=HEAP[$dtd]; //@line 2626 "xmlparse.c"
        var $22=(($21+20)&4294967295); //@line 2626 "xmlparse.c"
        var $23=HEAP[$name]; //@line 2626 "xmlparse.c"
        var $24=_lookup($22, $23, 24); //@line 2626 "xmlparse.c"
        var $25=$24; //@line 2626 "xmlparse.c"
        HEAP[$elementType]=$25; //@line 2626 "xmlparse.c"
        var $26=HEAP[$elementType]; //@line 2628 "xmlparse.c"
        var $27=($26)==0; //@line 2628 "xmlparse.c"
        if ($27) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 2628 "xmlparse.c"
      case 4: // $bb3
        HEAP[$0]=1; //@line 2629 "xmlparse.c"
        __label__ = 163; break; //@line 2629 "xmlparse.c"
      case 5: // $bb4
        var $28=HEAP[$parser_addr]; //@line 2630 "xmlparse.c"
        var $29=(($28+232)&4294967295); //@line 2630 "xmlparse.c"
        var $30=HEAP[$29]; //@line 2630 "xmlparse.c"
        var $31=reSign(($30), 8, 0)!=0; //@line 2630 "xmlparse.c"
        if ($31) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 2630 "xmlparse.c"
      case 6: // $bb5
        var $32=HEAP[$parser_addr]; //@line 2630 "xmlparse.c"
        var $33=HEAP[$elementType]; //@line 2630 "xmlparse.c"
        var $34=_setElementTypePrefix($32, $33); //@line 2630 "xmlparse.c"
        var $35=((($34))|0)==0; //@line 2630 "xmlparse.c"
        if ($35) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 2630 "xmlparse.c"
      case 7: // $bb6
        HEAP[$0]=1; //@line 2631 "xmlparse.c"
        __label__ = 163; break; //@line 2631 "xmlparse.c"
      case 8: // $bb7
        var $36=HEAP[$elementType]; //@line 2633 "xmlparse.c"
        var $37=(($36+12)&4294967295); //@line 2633 "xmlparse.c"
        var $38=HEAP[$37]; //@line 2633 "xmlparse.c"
        HEAP[$nDefaultAtts]=$38; //@line 2633 "xmlparse.c"
        var $39=HEAP[$enc_addr]; //@line 2636 "xmlparse.c"
        var $40=(($39+36)&4294967295); //@line 2636 "xmlparse.c"
        var $41=HEAP[$40]; //@line 2636 "xmlparse.c"
        var $42=HEAP[$parser_addr]; //@line 2636 "xmlparse.c"
        var $43=(($42+376)&4294967295); //@line 2636 "xmlparse.c"
        var $44=HEAP[$43]; //@line 2636 "xmlparse.c"
        var $45=HEAP[$parser_addr]; //@line 2636 "xmlparse.c"
        var $46=(($45+364)&4294967295); //@line 2636 "xmlparse.c"
        var $47=HEAP[$46]; //@line 2636 "xmlparse.c"
        var $48=HEAP[$enc_addr]; //@line 2636 "xmlparse.c"
        var $49=HEAP[$attStr_addr]; //@line 2636 "xmlparse.c"
        var $50=FUNCTION_TABLE[$41]($48, $49, $47, $44); //@line 2636 "xmlparse.c"
        HEAP[$n]=$50; //@line 2636 "xmlparse.c"
        var $51=HEAP[$n]; //@line 2637 "xmlparse.c"
        var $52=HEAP[$nDefaultAtts]; //@line 2637 "xmlparse.c"
        var $53=((($51) + ($52))&4294967295); //@line 2637 "xmlparse.c"
        var $54=HEAP[$parser_addr]; //@line 2637 "xmlparse.c"
        var $55=(($54+364)&4294967295); //@line 2637 "xmlparse.c"
        var $56=HEAP[$55]; //@line 2637 "xmlparse.c"
        var $57=((($53))|0) > ((($56))|0); //@line 2637 "xmlparse.c"
        if ($57) { __label__ = 9; break; } else { __label__ = 13; break; } //@line 2637 "xmlparse.c"
      case 9: // $bb8
        var $58=HEAP[$parser_addr]; //@line 2638 "xmlparse.c"
        var $59=(($58+364)&4294967295); //@line 2638 "xmlparse.c"
        var $60=HEAP[$59]; //@line 2638 "xmlparse.c"
        HEAP[$oldAttsSize]=$60; //@line 2638 "xmlparse.c"
        var $61=HEAP[$n]; //@line 2640 "xmlparse.c"
        var $62=HEAP[$nDefaultAtts]; //@line 2640 "xmlparse.c"
        var $63=((($61) + ($62))&4294967295); //@line 2640 "xmlparse.c"
        var $64=((($63) + 16)&4294967295); //@line 2640 "xmlparse.c"
        var $65=HEAP[$parser_addr]; //@line 2640 "xmlparse.c"
        var $66=(($65+364)&4294967295); //@line 2640 "xmlparse.c"
        HEAP[$66]=$64; //@line 2640 "xmlparse.c"
        var $67=HEAP[$parser_addr]; //@line 2641 "xmlparse.c"
        var $68=(($67+12)&4294967295); //@line 2641 "xmlparse.c"
        var $69=(($68+4)&4294967295); //@line 2641 "xmlparse.c"
        var $70=HEAP[$69]; //@line 2641 "xmlparse.c"
        var $71=HEAP[$parser_addr]; //@line 2641 "xmlparse.c"
        var $72=(($71+364)&4294967295); //@line 2641 "xmlparse.c"
        var $73=HEAP[$72]; //@line 2641 "xmlparse.c"
        var $74=((($73) * 16)&4294967295); //@line 2641 "xmlparse.c"
        var $75=HEAP[$parser_addr]; //@line 2641 "xmlparse.c"
        var $76=(($75+376)&4294967295); //@line 2641 "xmlparse.c"
        var $77=HEAP[$76]; //@line 2641 "xmlparse.c"
        var $78=$77; //@line 2641 "xmlparse.c"
        var $79=FUNCTION_TABLE[$70]($78, $74); //@line 2641 "xmlparse.c"
        var $80=$79; //@line 2641 "xmlparse.c"
        HEAP[$temp]=$80; //@line 2641 "xmlparse.c"
        var $81=HEAP[$temp]; //@line 2642 "xmlparse.c"
        var $82=($81)==0; //@line 2642 "xmlparse.c"
        if ($82) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 2642 "xmlparse.c"
      case 10: // $bb9
        HEAP[$0]=1; //@line 2643 "xmlparse.c"
        __label__ = 163; break; //@line 2643 "xmlparse.c"
      case 11: // $bb10
        var $83=HEAP[$parser_addr]; //@line 2644 "xmlparse.c"
        var $84=(($83+376)&4294967295); //@line 2644 "xmlparse.c"
        var $85=HEAP[$temp]; //@line 2644 "xmlparse.c"
        HEAP[$84]=$85; //@line 2644 "xmlparse.c"
        var $86=HEAP[$n]; //@line 2645 "xmlparse.c"
        var $87=HEAP[$oldAttsSize]; //@line 2645 "xmlparse.c"
        var $88=((($86))|0) > ((($87))|0); //@line 2645 "xmlparse.c"
        if ($88) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 2645 "xmlparse.c"
      case 12: // $bb11
        var $89=HEAP[$enc_addr]; //@line 2646 "xmlparse.c"
        var $90=(($89+36)&4294967295); //@line 2646 "xmlparse.c"
        var $91=HEAP[$90]; //@line 2646 "xmlparse.c"
        var $92=HEAP[$parser_addr]; //@line 2646 "xmlparse.c"
        var $93=(($92+376)&4294967295); //@line 2646 "xmlparse.c"
        var $94=HEAP[$93]; //@line 2646 "xmlparse.c"
        var $95=HEAP[$enc_addr]; //@line 2646 "xmlparse.c"
        var $96=HEAP[$attStr_addr]; //@line 2646 "xmlparse.c"
        var $97=HEAP[$n]; //@line 2646 "xmlparse.c"
        var $98=FUNCTION_TABLE[$91]($95, $96, $97, $94); //@line 2646 "xmlparse.c"
        __label__ = 13; break; //@line 2646 "xmlparse.c"
      case 13: // $bb12
        var $99=HEAP[$parser_addr]; //@line 2649 "xmlparse.c"
        var $100=(($99+376)&4294967295); //@line 2649 "xmlparse.c"
        var $101=HEAP[$100]; //@line 2649 "xmlparse.c"
        var $102=$101; //@line 2649 "xmlparse.c"
        HEAP[$appAtts]=$102; //@line 2649 "xmlparse.c"
        HEAP[$i]=0; //@line 2650 "xmlparse.c"
        __label__ = 42; break; //@line 2650 "xmlparse.c"
      case 14: // $bb13
        var $103=HEAP[$parser_addr]; //@line 2654 "xmlparse.c"
        var $104=(($103+376)&4294967295); //@line 2654 "xmlparse.c"
        var $105=HEAP[$104]; //@line 2654 "xmlparse.c"
        var $106=HEAP[$i]; //@line 2654 "xmlparse.c"
        var $107=(($105+16*$106)&4294967295); //@line 2654 "xmlparse.c"
        var $108=(($107)&4294967295); //@line 2654 "xmlparse.c"
        var $109=HEAP[$108]; //@line 2654 "xmlparse.c"
        var $110=HEAP[$enc_addr]; //@line 2654 "xmlparse.c"
        var $111=(($110+28)&4294967295); //@line 2654 "xmlparse.c"
        var $112=HEAP[$111]; //@line 2654 "xmlparse.c"
        var $113=HEAP[$parser_addr]; //@line 2654 "xmlparse.c"
        var $114=(($113+376)&4294967295); //@line 2654 "xmlparse.c"
        var $115=HEAP[$114]; //@line 2654 "xmlparse.c"
        var $116=HEAP[$i]; //@line 2654 "xmlparse.c"
        var $117=(($115+16*$116)&4294967295); //@line 2654 "xmlparse.c"
        var $118=(($117)&4294967295); //@line 2654 "xmlparse.c"
        var $119=HEAP[$118]; //@line 2654 "xmlparse.c"
        var $120=HEAP[$enc_addr]; //@line 2654 "xmlparse.c"
        var $121=FUNCTION_TABLE[$112]($120, $119); //@line 2654 "xmlparse.c"
        var $122=(($109+$121)&4294967295); //@line 2654 "xmlparse.c"
        var $123=HEAP[$parser_addr]; //@line 2654 "xmlparse.c"
        var $124=(($123+376)&4294967295); //@line 2654 "xmlparse.c"
        var $125=HEAP[$124]; //@line 2654 "xmlparse.c"
        var $126=HEAP[$i]; //@line 2654 "xmlparse.c"
        var $127=(($125+16*$126)&4294967295); //@line 2654 "xmlparse.c"
        var $128=(($127)&4294967295); //@line 2654 "xmlparse.c"
        var $129=HEAP[$128]; //@line 2654 "xmlparse.c"
        var $130=HEAP[$parser_addr]; //@line 2654 "xmlparse.c"
        var $131=HEAP[$enc_addr]; //@line 2654 "xmlparse.c"
        var $132=_getAttributeId($130, $131, $129, $122); //@line 2654 "xmlparse.c"
        HEAP[$attId]=$132; //@line 2654 "xmlparse.c"
        var $133=HEAP[$attId]; //@line 2655 "xmlparse.c"
        var $134=($133)==0; //@line 2655 "xmlparse.c"
        if ($134) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 2655 "xmlparse.c"
      case 15: // $bb14
        HEAP[$0]=1; //@line 2656 "xmlparse.c"
        __label__ = 163; break; //@line 2656 "xmlparse.c"
      case 16: // $bb15
        var $135=HEAP[$attId]; //@line 2661 "xmlparse.c"
        var $136=(($135)&4294967295); //@line 2661 "xmlparse.c"
        var $137=HEAP[$136]; //@line 2661 "xmlparse.c"
        var $138=(($137+-1)&4294967295); //@line 2661 "xmlparse.c"
        var $139=HEAP[$138]; //@line 2661 "xmlparse.c"
        var $140=reSign(($139), 8, 0)!=0; //@line 2661 "xmlparse.c"
        if ($140) { __label__ = 17; break; } else { __label__ = 20; break; } //@line 2661 "xmlparse.c"
      case 17: // $bb16
        var $141=HEAP[$parser_addr]; //@line 2662 "xmlparse.c"
        var $142=(($141+144)&4294967295); //@line 2662 "xmlparse.c"
        var $143=HEAP[$142]; //@line 2662 "xmlparse.c"
        var $144=HEAP[$enc_addr]; //@line 2662 "xmlparse.c"
        var $145=($143)==($144); //@line 2662 "xmlparse.c"
        if ($145) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 2662 "xmlparse.c"
      case 18: // $bb17
        var $146=HEAP[$parser_addr]; //@line 2663 "xmlparse.c"
        var $147=(($146+376)&4294967295); //@line 2663 "xmlparse.c"
        var $148=HEAP[$147]; //@line 2663 "xmlparse.c"
        var $149=HEAP[$i]; //@line 2663 "xmlparse.c"
        var $150=(($148+16*$149)&4294967295); //@line 2663 "xmlparse.c"
        var $151=(($150)&4294967295); //@line 2663 "xmlparse.c"
        var $152=HEAP[$151]; //@line 2663 "xmlparse.c"
        var $153=HEAP[$parser_addr]; //@line 2663 "xmlparse.c"
        var $154=(($153+272)&4294967295); //@line 2663 "xmlparse.c"
        HEAP[$154]=$152; //@line 2663 "xmlparse.c"
        __label__ = 19; break; //@line 2663 "xmlparse.c"
      case 19: // $bb18
        HEAP[$0]=8; //@line 2664 "xmlparse.c"
        __label__ = 163; break; //@line 2664 "xmlparse.c"
      case 20: // $bb19
        var $155=HEAP[$attId]; //@line 2666 "xmlparse.c"
        var $156=(($155)&4294967295); //@line 2666 "xmlparse.c"
        var $157=HEAP[$156]; //@line 2666 "xmlparse.c"
        var $158=(($157+-1)&4294967295); //@line 2666 "xmlparse.c"
        HEAP[$158]=1; //@line 2666 "xmlparse.c"
        var $159=HEAP[$attId]; //@line 2667 "xmlparse.c"
        var $160=(($159)&4294967295); //@line 2667 "xmlparse.c"
        var $161=HEAP[$160]; //@line 2667 "xmlparse.c"
        var $162=HEAP[$appAtts]; //@line 2667 "xmlparse.c"
        var $163=HEAP[$attIndex]; //@line 2667 "xmlparse.c"
        var $164=(($162+4*$163)&4294967295); //@line 2667 "xmlparse.c"
        HEAP[$164]=$161; //@line 2667 "xmlparse.c"
        var $165=HEAP[$attIndex]; //@line 2667 "xmlparse.c"
        var $166=((($165) + 1)&4294967295); //@line 2667 "xmlparse.c"
        HEAP[$attIndex]=$166; //@line 2667 "xmlparse.c"
        var $167=HEAP[$parser_addr]; //@line 2668 "xmlparse.c"
        var $168=(($167+376)&4294967295); //@line 2668 "xmlparse.c"
        var $169=HEAP[$168]; //@line 2668 "xmlparse.c"
        var $170=HEAP[$i]; //@line 2668 "xmlparse.c"
        var $171=(($169+16*$170)&4294967295); //@line 2668 "xmlparse.c"
        var $172=(($171+12)&4294967295); //@line 2668 "xmlparse.c"
        var $173=HEAP[$172]; //@line 2668 "xmlparse.c"
        var $174=reSign(($173), 8, 0)==0; //@line 2668 "xmlparse.c"
        if ($174) { __label__ = 21; break; } else { __label__ = 30; break; } //@line 2668 "xmlparse.c"
      case 21: // $bb20
        HEAP[$isCdata]=1; //@line 2670 "xmlparse.c"
        var $175=HEAP[$attId]; //@line 2673 "xmlparse.c"
        var $176=(($175+8)&4294967295); //@line 2673 "xmlparse.c"
        var $177=HEAP[$176]; //@line 2673 "xmlparse.c"
        var $178=reSign(($177), 8, 0)!=0; //@line 2673 "xmlparse.c"
        if ($178) { __label__ = 22; break; } else { __label__ = 27; break; } //@line 2673 "xmlparse.c"
      case 22: // $bb21
        HEAP[$j]=0; //@line 2675 "xmlparse.c"
        __label__ = 26; break; //@line 2675 "xmlparse.c"
      case 23: // $bb22
        var $179=HEAP[$elementType]; //@line 2676 "xmlparse.c"
        var $180=(($179+20)&4294967295); //@line 2676 "xmlparse.c"
        var $181=HEAP[$180]; //@line 2676 "xmlparse.c"
        var $182=HEAP[$j]; //@line 2676 "xmlparse.c"
        var $183=(($181+12*$182)&4294967295); //@line 2676 "xmlparse.c"
        var $184=(($183)&4294967295); //@line 2676 "xmlparse.c"
        var $185=HEAP[$184]; //@line 2676 "xmlparse.c"
        var $186=HEAP[$attId]; //@line 2676 "xmlparse.c"
        var $187=($185)==($186); //@line 2676 "xmlparse.c"
        if ($187) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 2676 "xmlparse.c"
      case 24: // $bb23
        var $188=HEAP[$elementType]; //@line 2677 "xmlparse.c"
        var $189=(($188+20)&4294967295); //@line 2677 "xmlparse.c"
        var $190=HEAP[$189]; //@line 2677 "xmlparse.c"
        var $191=HEAP[$j]; //@line 2677 "xmlparse.c"
        var $192=(($190+12*$191)&4294967295); //@line 2677 "xmlparse.c"
        var $193=(($192+4)&4294967295); //@line 2677 "xmlparse.c"
        var $194=HEAP[$193]; //@line 2677 "xmlparse.c"
        HEAP[$isCdata]=$194; //@line 2677 "xmlparse.c"
        __label__ = 27; break; //@line 2677 "xmlparse.c"
      case 25: // $bb24
        var $195=HEAP[$j]; //@line 2675 "xmlparse.c"
        var $196=((($195) + 1)&4294967295); //@line 2675 "xmlparse.c"
        HEAP[$j]=$196; //@line 2675 "xmlparse.c"
        __label__ = 26; break; //@line 2675 "xmlparse.c"
      case 26: // $bb25
        var $197=HEAP[$j]; //@line 2675 "xmlparse.c"
        var $198=HEAP[$nDefaultAtts]; //@line 2675 "xmlparse.c"
        var $199=((($197))|0) < ((($198))|0); //@line 2675 "xmlparse.c"
        if ($199) { __label__ = 23; break; } else { __label__ = 27; break; } //@line 2675 "xmlparse.c"
      case 27: // $bb26
        var $200=HEAP[$parser_addr]; //@line 2684 "xmlparse.c"
        var $201=(($200+400)&4294967295); //@line 2684 "xmlparse.c"
        var $202=HEAP[$parser_addr]; //@line 2684 "xmlparse.c"
        var $203=(($202+376)&4294967295); //@line 2684 "xmlparse.c"
        var $204=HEAP[$203]; //@line 2684 "xmlparse.c"
        var $205=HEAP[$i]; //@line 2684 "xmlparse.c"
        var $206=(($204+16*$205)&4294967295); //@line 2684 "xmlparse.c"
        var $207=(($206+8)&4294967295); //@line 2684 "xmlparse.c"
        var $208=HEAP[$207]; //@line 2684 "xmlparse.c"
        var $209=HEAP[$parser_addr]; //@line 2684 "xmlparse.c"
        var $210=(($209+376)&4294967295); //@line 2684 "xmlparse.c"
        var $211=HEAP[$210]; //@line 2684 "xmlparse.c"
        var $212=HEAP[$i]; //@line 2684 "xmlparse.c"
        var $213=(($211+16*$212)&4294967295); //@line 2684 "xmlparse.c"
        var $214=(($213+4)&4294967295); //@line 2684 "xmlparse.c"
        var $215=HEAP[$214]; //@line 2684 "xmlparse.c"
        var $216=HEAP[$isCdata]; //@line 2684 "xmlparse.c"
        var $217=unSign(($216), 8, 0); //@line 2684 "xmlparse.c"
        var $218=HEAP[$parser_addr]; //@line 2684 "xmlparse.c"
        var $219=HEAP[$enc_addr]; //@line 2684 "xmlparse.c"
        var $220=((($217)) & 255); //@line 2684 "xmlparse.c"
        var $221=_storeAttributeValue($218, $219, $220, $215, $208, $201); //@line 2684 "xmlparse.c"
        HEAP[$result]=$221; //@line 2684 "xmlparse.c"
        var $222=HEAP[$result]; //@line 2687 "xmlparse.c"
        var $223=((($222))|0)!=0; //@line 2687 "xmlparse.c"
        if ($223) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 2687 "xmlparse.c"
      case 28: // $bb27
        var $224=HEAP[$result]; //@line 2688 "xmlparse.c"
        HEAP[$0]=$224; //@line 2688 "xmlparse.c"
        __label__ = 163; break; //@line 2688 "xmlparse.c"
      case 29: // $bb28
        var $225=HEAP[$parser_addr]; //@line 2689 "xmlparse.c"
        var $226=(($225+400)&4294967295); //@line 2689 "xmlparse.c"
        var $227=(($226+16)&4294967295); //@line 2689 "xmlparse.c"
        var $228=HEAP[$227]; //@line 2689 "xmlparse.c"
        var $229=HEAP[$appAtts]; //@line 2689 "xmlparse.c"
        var $230=HEAP[$attIndex]; //@line 2689 "xmlparse.c"
        var $231=(($229+4*$230)&4294967295); //@line 2689 "xmlparse.c"
        HEAP[$231]=$228; //@line 2689 "xmlparse.c"
        var $232=HEAP[$parser_addr]; //@line 2690 "xmlparse.c"
        var $233=(($232+400)&4294967295); //@line 2690 "xmlparse.c"
        var $234=(($233+12)&4294967295); //@line 2690 "xmlparse.c"
        var $235=HEAP[$234]; //@line 2690 "xmlparse.c"
        var $236=HEAP[$parser_addr]; //@line 2690 "xmlparse.c"
        var $237=(($236+400)&4294967295); //@line 2690 "xmlparse.c"
        var $238=(($237+16)&4294967295); //@line 2690 "xmlparse.c"
        HEAP[$238]=$235; //@line 2690 "xmlparse.c"
        __label__ = 33; break; //@line 2690 "xmlparse.c"
      case 30: // $bb29
        var $239=HEAP[$parser_addr]; //@line 2694 "xmlparse.c"
        var $240=(($239+376)&4294967295); //@line 2694 "xmlparse.c"
        var $241=HEAP[$240]; //@line 2694 "xmlparse.c"
        var $242=HEAP[$i]; //@line 2694 "xmlparse.c"
        var $243=(($241+16*$242)&4294967295); //@line 2694 "xmlparse.c"
        var $244=(($243+8)&4294967295); //@line 2694 "xmlparse.c"
        var $245=HEAP[$244]; //@line 2694 "xmlparse.c"
        var $246=HEAP[$parser_addr]; //@line 2694 "xmlparse.c"
        var $247=(($246+376)&4294967295); //@line 2694 "xmlparse.c"
        var $248=HEAP[$247]; //@line 2694 "xmlparse.c"
        var $249=HEAP[$i]; //@line 2694 "xmlparse.c"
        var $250=(($248+16*$249)&4294967295); //@line 2694 "xmlparse.c"
        var $251=(($250+4)&4294967295); //@line 2694 "xmlparse.c"
        var $252=HEAP[$251]; //@line 2694 "xmlparse.c"
        var $253=HEAP[$parser_addr]; //@line 2694 "xmlparse.c"
        var $254=(($253+400)&4294967295); //@line 2694 "xmlparse.c"
        var $255=HEAP[$enc_addr]; //@line 2694 "xmlparse.c"
        var $256=_poolStoreString($254, $255, $252, $245); //@line 2694 "xmlparse.c"
        var $257=HEAP[$appAtts]; //@line 2694 "xmlparse.c"
        var $258=HEAP[$attIndex]; //@line 2694 "xmlparse.c"
        var $259=(($257+4*$258)&4294967295); //@line 2694 "xmlparse.c"
        HEAP[$259]=$256; //@line 2694 "xmlparse.c"
        var $260=HEAP[$appAtts]; //@line 2696 "xmlparse.c"
        var $261=HEAP[$attIndex]; //@line 2696 "xmlparse.c"
        var $262=(($260+4*$261)&4294967295); //@line 2696 "xmlparse.c"
        var $263=HEAP[$262]; //@line 2696 "xmlparse.c"
        var $264=($263)==0; //@line 2696 "xmlparse.c"
        if ($264) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 2696 "xmlparse.c"
      case 31: // $bb30
        HEAP[$0]=1; //@line 2697 "xmlparse.c"
        __label__ = 163; break; //@line 2697 "xmlparse.c"
      case 32: // $bb31
        var $265=HEAP[$parser_addr]; //@line 2698 "xmlparse.c"
        var $266=(($265+400)&4294967295); //@line 2698 "xmlparse.c"
        var $267=(($266+12)&4294967295); //@line 2698 "xmlparse.c"
        var $268=HEAP[$267]; //@line 2698 "xmlparse.c"
        var $269=HEAP[$parser_addr]; //@line 2698 "xmlparse.c"
        var $270=(($269+400)&4294967295); //@line 2698 "xmlparse.c"
        var $271=(($270+16)&4294967295); //@line 2698 "xmlparse.c"
        HEAP[$271]=$268; //@line 2698 "xmlparse.c"
        __label__ = 33; break; //@line 2698 "xmlparse.c"
      case 33: // $bb32
        var $272=HEAP[$attId]; //@line 2701 "xmlparse.c"
        var $273=(($272+4)&4294967295); //@line 2701 "xmlparse.c"
        var $274=HEAP[$273]; //@line 2701 "xmlparse.c"
        var $275=($274)!=0; //@line 2701 "xmlparse.c"
        if ($275) { __label__ = 34; break; } else { __label__ = 40; break; } //@line 2701 "xmlparse.c"
      case 34: // $bb33
        var $276=HEAP[$attId]; //@line 2702 "xmlparse.c"
        var $277=(($276+9)&4294967295); //@line 2702 "xmlparse.c"
        var $278=HEAP[$277]; //@line 2702 "xmlparse.c"
        var $279=reSign(($278), 8, 0)!=0; //@line 2702 "xmlparse.c"
        if ($279) { __label__ = 35; break; } else { __label__ = 38; break; } //@line 2702 "xmlparse.c"
      case 35: // $bb34
        var $280=HEAP[$appAtts]; //@line 2705 "xmlparse.c"
        var $281=HEAP[$attIndex]; //@line 2705 "xmlparse.c"
        var $282=(($280+4*$281)&4294967295); //@line 2705 "xmlparse.c"
        var $283=HEAP[$282]; //@line 2705 "xmlparse.c"
        var $284=HEAP[$attId]; //@line 2705 "xmlparse.c"
        var $285=(($284+4)&4294967295); //@line 2705 "xmlparse.c"
        var $286=HEAP[$285]; //@line 2705 "xmlparse.c"
        var $287=HEAP[$parser_addr]; //@line 2705 "xmlparse.c"
        var $288=HEAP[$attId]; //@line 2705 "xmlparse.c"
        var $289=HEAP[$bindingsPtr_addr]; //@line 2705 "xmlparse.c"
        var $290=_addBinding($287, $286, $288, $283, $289); //@line 2705 "xmlparse.c"
        HEAP[$result35]=$290; //@line 2705 "xmlparse.c"
        var $291=HEAP[$result35]; //@line 2706 "xmlparse.c"
        var $292=((($291))|0)!=0; //@line 2706 "xmlparse.c"
        if ($292) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 2706 "xmlparse.c"
      case 36: // $bb36
        var $293=HEAP[$result35]; //@line 2707 "xmlparse.c"
        HEAP[$0]=$293; //@line 2707 "xmlparse.c"
        __label__ = 163; break; //@line 2707 "xmlparse.c"
      case 37: // $bb37
        var $294=HEAP[$attIndex]; //@line 2708 "xmlparse.c"
        var $295=((($294) - 1)&4294967295); //@line 2708 "xmlparse.c"
        HEAP[$attIndex]=$295; //@line 2708 "xmlparse.c"
        __label__ = 39; break; //@line 2708 "xmlparse.c"
      case 38: // $bb38
        var $296=HEAP[$attIndex]; //@line 2712 "xmlparse.c"
        var $297=((($296) + 1)&4294967295); //@line 2712 "xmlparse.c"
        HEAP[$attIndex]=$297; //@line 2712 "xmlparse.c"
        var $298=HEAP[$nPrefixes]; //@line 2713 "xmlparse.c"
        var $299=((($298) + 1)&4294967295); //@line 2713 "xmlparse.c"
        HEAP[$nPrefixes]=$299; //@line 2713 "xmlparse.c"
        var $300=HEAP[$attId]; //@line 2714 "xmlparse.c"
        var $301=(($300)&4294967295); //@line 2714 "xmlparse.c"
        var $302=HEAP[$301]; //@line 2714 "xmlparse.c"
        var $303=(($302+-1)&4294967295); //@line 2714 "xmlparse.c"
        HEAP[$303]=2; //@line 2714 "xmlparse.c"
        __label__ = 39; break; //@line 2714 "xmlparse.c"
      case 39: // $bb39
        __label__ = 41; break; //@line 2714 "xmlparse.c"
      case 40: // $bb40
        var $304=HEAP[$attIndex]; //@line 2718 "xmlparse.c"
        var $305=((($304) + 1)&4294967295); //@line 2718 "xmlparse.c"
        HEAP[$attIndex]=$305; //@line 2718 "xmlparse.c"
        __label__ = 41; break; //@line 2718 "xmlparse.c"
      case 41: // $bb41
        var $306=HEAP[$i]; //@line 2650 "xmlparse.c"
        var $307=((($306) + 1)&4294967295); //@line 2650 "xmlparse.c"
        HEAP[$i]=$307; //@line 2650 "xmlparse.c"
        __label__ = 42; break; //@line 2650 "xmlparse.c"
      case 42: // $bb42
        var $308=HEAP[$i]; //@line 2650 "xmlparse.c"
        var $309=HEAP[$n]; //@line 2650 "xmlparse.c"
        var $310=((($308))|0) < ((($309))|0); //@line 2650 "xmlparse.c"
        if ($310) { __label__ = 14; break; } else { __label__ = 43; break; } //@line 2650 "xmlparse.c"
      case 43: // $bb43
        var $311=HEAP[$parser_addr]; //@line 2722 "xmlparse.c"
        var $312=(($311+368)&4294967295); //@line 2722 "xmlparse.c"
        var $313=HEAP[$attIndex]; //@line 2722 "xmlparse.c"
        HEAP[$312]=$313; //@line 2722 "xmlparse.c"
        var $314=HEAP[$elementType]; //@line 2723 "xmlparse.c"
        var $315=(($314+8)&4294967295); //@line 2723 "xmlparse.c"
        var $316=HEAP[$315]; //@line 2723 "xmlparse.c"
        var $317=($316)==0; //@line 2723 "xmlparse.c"
        if ($317) { __label__ = 51; break; } else { __label__ = 44; break; } //@line 2723 "xmlparse.c"
      case 44: // $bb44
        var $318=HEAP[$elementType]; //@line 2723 "xmlparse.c"
        var $319=(($318+8)&4294967295); //@line 2723 "xmlparse.c"
        var $320=HEAP[$319]; //@line 2723 "xmlparse.c"
        var $321=(($320)&4294967295); //@line 2723 "xmlparse.c"
        var $322=HEAP[$321]; //@line 2723 "xmlparse.c"
        var $323=(($322+-1)&4294967295); //@line 2723 "xmlparse.c"
        var $324=HEAP[$323]; //@line 2723 "xmlparse.c"
        var $325=reSign(($324), 8, 0)==0; //@line 2723 "xmlparse.c"
        if ($325) { __label__ = 51; break; } else { __label__ = 45; break; } //@line 2723 "xmlparse.c"
      case 45: // $bb45
        HEAP[$i]=0; //@line 2724 "xmlparse.c"
        __label__ = 49; break; //@line 2724 "xmlparse.c"
      case 46: // $bb46
        var $326=HEAP[$appAtts]; //@line 2725 "xmlparse.c"
        var $327=HEAP[$i]; //@line 2725 "xmlparse.c"
        var $328=(($326+4*$327)&4294967295); //@line 2725 "xmlparse.c"
        var $329=HEAP[$328]; //@line 2725 "xmlparse.c"
        var $330=HEAP[$elementType]; //@line 2725 "xmlparse.c"
        var $331=(($330+8)&4294967295); //@line 2725 "xmlparse.c"
        var $332=HEAP[$331]; //@line 2725 "xmlparse.c"
        var $333=(($332)&4294967295); //@line 2725 "xmlparse.c"
        var $334=HEAP[$333]; //@line 2725 "xmlparse.c"
        var $335=($329)==($334); //@line 2725 "xmlparse.c"
        if ($335) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 2725 "xmlparse.c"
      case 47: // $bb47
        var $336=HEAP[$parser_addr]; //@line 2726 "xmlparse.c"
        var $337=(($336+372)&4294967295); //@line 2726 "xmlparse.c"
        var $338=HEAP[$i]; //@line 2726 "xmlparse.c"
        HEAP[$337]=$338; //@line 2726 "xmlparse.c"
        __label__ = 50; break; //@line 2726 "xmlparse.c"
      case 48: // $bb48
        var $339=HEAP[$i]; //@line 2724 "xmlparse.c"
        var $340=((($339) + 2)&4294967295); //@line 2724 "xmlparse.c"
        HEAP[$i]=$340; //@line 2724 "xmlparse.c"
        __label__ = 49; break; //@line 2724 "xmlparse.c"
      case 49: // $bb49
        var $341=HEAP[$i]; //@line 2724 "xmlparse.c"
        var $342=HEAP[$attIndex]; //@line 2724 "xmlparse.c"
        var $343=((($341))|0) < ((($342))|0); //@line 2724 "xmlparse.c"
        if ($343) { __label__ = 46; break; } else { __label__ = 50; break; } //@line 2724 "xmlparse.c"
      case 50: // $bb50
        __label__ = 52; break; //@line 2724 "xmlparse.c"
      case 51: // $bb51
        var $344=HEAP[$parser_addr]; //@line 2731 "xmlparse.c"
        var $345=(($344+372)&4294967295); //@line 2731 "xmlparse.c"
        HEAP[$345]=-1; //@line 2731 "xmlparse.c"
        __label__ = 52; break; //@line 2731 "xmlparse.c"
      case 52: // $bb52
        HEAP[$i]=0; //@line 2734 "xmlparse.c"
        __label__ = 64; break; //@line 2734 "xmlparse.c"
      case 53: // $bb53
        var $346=HEAP[$elementType]; //@line 2735 "xmlparse.c"
        var $347=(($346+20)&4294967295); //@line 2735 "xmlparse.c"
        var $348=HEAP[$347]; //@line 2735 "xmlparse.c"
        var $349=HEAP[$i]; //@line 2735 "xmlparse.c"
        var $350=(($348+12*$349)&4294967295); //@line 2735 "xmlparse.c"
        HEAP[$da]=$350; //@line 2735 "xmlparse.c"
        var $351=HEAP[$da]; //@line 2736 "xmlparse.c"
        var $352=(($351)&4294967295); //@line 2736 "xmlparse.c"
        var $353=HEAP[$352]; //@line 2736 "xmlparse.c"
        var $354=(($353)&4294967295); //@line 2736 "xmlparse.c"
        var $355=HEAP[$354]; //@line 2736 "xmlparse.c"
        var $356=(($355+-1)&4294967295); //@line 2736 "xmlparse.c"
        var $357=HEAP[$356]; //@line 2736 "xmlparse.c"
        var $358=reSign(($357), 8, 0)==0; //@line 2736 "xmlparse.c"
        if ($358) { __label__ = 54; break; } else { __label__ = 63; break; } //@line 2736 "xmlparse.c"
      case 54: // $bb54
        var $359=HEAP[$da]; //@line 2736 "xmlparse.c"
        var $360=(($359+8)&4294967295); //@line 2736 "xmlparse.c"
        var $361=HEAP[$360]; //@line 2736 "xmlparse.c"
        var $362=($361)!=0; //@line 2736 "xmlparse.c"
        if ($362) { __label__ = 55; break; } else { __label__ = 63; break; } //@line 2736 "xmlparse.c"
      case 55: // $bb55
        var $363=HEAP[$da]; //@line 2737 "xmlparse.c"
        var $364=(($363)&4294967295); //@line 2737 "xmlparse.c"
        var $365=HEAP[$364]; //@line 2737 "xmlparse.c"
        var $366=(($365+4)&4294967295); //@line 2737 "xmlparse.c"
        var $367=HEAP[$366]; //@line 2737 "xmlparse.c"
        var $368=($367)!=0; //@line 2737 "xmlparse.c"
        if ($368) { __label__ = 56; break; } else { __label__ = 62; break; } //@line 2737 "xmlparse.c"
      case 56: // $bb56
        var $369=HEAP[$da]; //@line 2738 "xmlparse.c"
        var $370=(($369)&4294967295); //@line 2738 "xmlparse.c"
        var $371=HEAP[$370]; //@line 2738 "xmlparse.c"
        var $372=(($371+9)&4294967295); //@line 2738 "xmlparse.c"
        var $373=HEAP[$372]; //@line 2738 "xmlparse.c"
        var $374=reSign(($373), 8, 0)!=0; //@line 2738 "xmlparse.c"
        if ($374) { __label__ = 57; break; } else { __label__ = 60; break; } //@line 2738 "xmlparse.c"
      case 57: // $bb57
        var $375=HEAP[$da]; //@line 2740 "xmlparse.c"
        var $376=(($375+8)&4294967295); //@line 2740 "xmlparse.c"
        var $377=HEAP[$376]; //@line 2740 "xmlparse.c"
        var $378=HEAP[$da]; //@line 2740 "xmlparse.c"
        var $379=(($378)&4294967295); //@line 2740 "xmlparse.c"
        var $380=HEAP[$379]; //@line 2740 "xmlparse.c"
        var $381=HEAP[$da]; //@line 2740 "xmlparse.c"
        var $382=(($381)&4294967295); //@line 2740 "xmlparse.c"
        var $383=HEAP[$382]; //@line 2740 "xmlparse.c"
        var $384=(($383+4)&4294967295); //@line 2740 "xmlparse.c"
        var $385=HEAP[$384]; //@line 2740 "xmlparse.c"
        var $386=HEAP[$parser_addr]; //@line 2740 "xmlparse.c"
        var $387=HEAP[$bindingsPtr_addr]; //@line 2740 "xmlparse.c"
        var $388=_addBinding($386, $385, $380, $377, $387); //@line 2740 "xmlparse.c"
        HEAP[$result58]=$388; //@line 2740 "xmlparse.c"
        var $389=HEAP[$result58]; //@line 2741 "xmlparse.c"
        var $390=((($389))|0)!=0; //@line 2741 "xmlparse.c"
        if ($390) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 2741 "xmlparse.c"
      case 58: // $bb59
        var $391=HEAP[$result58]; //@line 2742 "xmlparse.c"
        HEAP[$0]=$391; //@line 2742 "xmlparse.c"
        __label__ = 163; break; //@line 2742 "xmlparse.c"
      case 59: // $bb60
        __label__ = 61; break; //@line 2742 "xmlparse.c"
      case 60: // $bb61
        var $392=HEAP[$da]; //@line 2745 "xmlparse.c"
        var $393=(($392)&4294967295); //@line 2745 "xmlparse.c"
        var $394=HEAP[$393]; //@line 2745 "xmlparse.c"
        var $395=(($394)&4294967295); //@line 2745 "xmlparse.c"
        var $396=HEAP[$395]; //@line 2745 "xmlparse.c"
        var $397=(($396+-1)&4294967295); //@line 2745 "xmlparse.c"
        HEAP[$397]=2; //@line 2745 "xmlparse.c"
        var $398=HEAP[$nPrefixes]; //@line 2746 "xmlparse.c"
        var $399=((($398) + 1)&4294967295); //@line 2746 "xmlparse.c"
        HEAP[$nPrefixes]=$399; //@line 2746 "xmlparse.c"
        var $400=HEAP[$da]; //@line 2747 "xmlparse.c"
        var $401=(($400)&4294967295); //@line 2747 "xmlparse.c"
        var $402=HEAP[$401]; //@line 2747 "xmlparse.c"
        var $403=(($402)&4294967295); //@line 2747 "xmlparse.c"
        var $404=HEAP[$403]; //@line 2747 "xmlparse.c"
        var $405=HEAP[$appAtts]; //@line 2747 "xmlparse.c"
        var $406=HEAP[$attIndex]; //@line 2747 "xmlparse.c"
        var $407=(($405+4*$406)&4294967295); //@line 2747 "xmlparse.c"
        HEAP[$407]=$404; //@line 2747 "xmlparse.c"
        var $408=HEAP[$attIndex]; //@line 2747 "xmlparse.c"
        var $409=((($408) + 1)&4294967295); //@line 2747 "xmlparse.c"
        HEAP[$attIndex]=$409; //@line 2747 "xmlparse.c"
        var $410=HEAP[$da]; //@line 2748 "xmlparse.c"
        var $411=(($410+8)&4294967295); //@line 2748 "xmlparse.c"
        var $412=HEAP[$411]; //@line 2748 "xmlparse.c"
        var $413=HEAP[$appAtts]; //@line 2748 "xmlparse.c"
        var $414=HEAP[$attIndex]; //@line 2748 "xmlparse.c"
        var $415=(($413+4*$414)&4294967295); //@line 2748 "xmlparse.c"
        HEAP[$415]=$412; //@line 2748 "xmlparse.c"
        var $416=HEAP[$attIndex]; //@line 2748 "xmlparse.c"
        var $417=((($416) + 1)&4294967295); //@line 2748 "xmlparse.c"
        HEAP[$attIndex]=$417; //@line 2748 "xmlparse.c"
        __label__ = 61; break; //@line 2748 "xmlparse.c"
      case 61: // $bb62
        __label__ = 63; break; //@line 2748 "xmlparse.c"
      case 62: // $bb63
        var $418=HEAP[$da]; //@line 2752 "xmlparse.c"
        var $419=(($418)&4294967295); //@line 2752 "xmlparse.c"
        var $420=HEAP[$419]; //@line 2752 "xmlparse.c"
        var $421=(($420)&4294967295); //@line 2752 "xmlparse.c"
        var $422=HEAP[$421]; //@line 2752 "xmlparse.c"
        var $423=(($422+-1)&4294967295); //@line 2752 "xmlparse.c"
        HEAP[$423]=1; //@line 2752 "xmlparse.c"
        var $424=HEAP[$da]; //@line 2753 "xmlparse.c"
        var $425=(($424)&4294967295); //@line 2753 "xmlparse.c"
        var $426=HEAP[$425]; //@line 2753 "xmlparse.c"
        var $427=(($426)&4294967295); //@line 2753 "xmlparse.c"
        var $428=HEAP[$427]; //@line 2753 "xmlparse.c"
        var $429=HEAP[$appAtts]; //@line 2753 "xmlparse.c"
        var $430=HEAP[$attIndex]; //@line 2753 "xmlparse.c"
        var $431=(($429+4*$430)&4294967295); //@line 2753 "xmlparse.c"
        HEAP[$431]=$428; //@line 2753 "xmlparse.c"
        var $432=HEAP[$attIndex]; //@line 2753 "xmlparse.c"
        var $433=((($432) + 1)&4294967295); //@line 2753 "xmlparse.c"
        HEAP[$attIndex]=$433; //@line 2753 "xmlparse.c"
        var $434=HEAP[$da]; //@line 2754 "xmlparse.c"
        var $435=(($434+8)&4294967295); //@line 2754 "xmlparse.c"
        var $436=HEAP[$435]; //@line 2754 "xmlparse.c"
        var $437=HEAP[$appAtts]; //@line 2754 "xmlparse.c"
        var $438=HEAP[$attIndex]; //@line 2754 "xmlparse.c"
        var $439=(($437+4*$438)&4294967295); //@line 2754 "xmlparse.c"
        HEAP[$439]=$436; //@line 2754 "xmlparse.c"
        var $440=HEAP[$attIndex]; //@line 2754 "xmlparse.c"
        var $441=((($440) + 1)&4294967295); //@line 2754 "xmlparse.c"
        HEAP[$attIndex]=$441; //@line 2754 "xmlparse.c"
        __label__ = 63; break; //@line 2754 "xmlparse.c"
      case 63: // $bb64
        var $442=HEAP[$i]; //@line 2734 "xmlparse.c"
        var $443=((($442) + 1)&4294967295); //@line 2734 "xmlparse.c"
        HEAP[$i]=$443; //@line 2734 "xmlparse.c"
        __label__ = 64; break; //@line 2734 "xmlparse.c"
      case 64: // $bb65
        var $444=HEAP[$i]; //@line 2734 "xmlparse.c"
        var $445=HEAP[$nDefaultAtts]; //@line 2734 "xmlparse.c"
        var $446=((($444))|0) < ((($445))|0); //@line 2734 "xmlparse.c"
        if ($446) { __label__ = 53; break; } else { __label__ = 65; break; } //@line 2734 "xmlparse.c"
      case 65: // $bb66
        var $447=HEAP[$appAtts]; //@line 2758 "xmlparse.c"
        var $448=HEAP[$attIndex]; //@line 2758 "xmlparse.c"
        var $449=(($447+4*$448)&4294967295); //@line 2758 "xmlparse.c"
        HEAP[$449]=0; //@line 2758 "xmlparse.c"
        HEAP[$i]=0; //@line 2762 "xmlparse.c"
        var $450=HEAP[$nPrefixes]; //@line 2763 "xmlparse.c"
        var $451=((($450))|0)!=0; //@line 2763 "xmlparse.c"
        if ($451) { __label__ = 66; break; } else { __label__ = 129; break; } //@line 2763 "xmlparse.c"
      case 66: // $bb67
        var $452=HEAP[$parser_addr]; //@line 2765 "xmlparse.c"
        var $453=(($452+384)&4294967295); //@line 2765 "xmlparse.c"
        var $454=HEAP[$453]; //@line 2765 "xmlparse.c"
        HEAP[$version]=$454; //@line 2765 "xmlparse.c"
        var $455=HEAP[$parser_addr]; //@line 2766 "xmlparse.c"
        var $456=(($455+388)&4294967295); //@line 2766 "xmlparse.c"
        var $457=HEAP[$456]; //@line 2766 "xmlparse.c"
        var $458=unSign(($457), 8, 0); //@line 2766 "xmlparse.c"
        var $459=1 << ($458); //@line 2766 "xmlparse.c"
        HEAP[$nsAttsSize]=$459; //@line 2766 "xmlparse.c"
        var $460=HEAP[$nPrefixes]; //@line 2768 "xmlparse.c"
        var $461=($460) << 1; //@line 2768 "xmlparse.c"
        var $462=HEAP[$parser_addr]; //@line 2768 "xmlparse.c"
        var $463=(($462+388)&4294967295); //@line 2768 "xmlparse.c"
        var $464=HEAP[$463]; //@line 2768 "xmlparse.c"
        var $465=unSign(($464), 8, 0); //@line 2768 "xmlparse.c"
        var $466=((($461))|0) >> ((($465))|0); //@line 2768 "xmlparse.c"
        var $467=((($466))|0)!=0; //@line 2768 "xmlparse.c"
        if ($467) { __label__ = 67; break; } else { __label__ = 73; break; } //@line 2768 "xmlparse.c"
      case 67: // $bb69
        var $468=HEAP[$parser_addr]; //@line 2771 "xmlparse.c"
        var $469=(($468+388)&4294967295); //@line 2771 "xmlparse.c"
        var $470=HEAP[$469]; //@line 2771 "xmlparse.c"
        var $471=unSign(($470), 8, 0); //@line 2771 "xmlparse.c"
        var $472=HEAP[$nPrefixes]; //@line 2771 "xmlparse.c"
        var $473=((($472))|0) >> ((($471))|0); //@line 2771 "xmlparse.c"
        var $474=((($473))|0)!=0; //@line 2771 "xmlparse.c"
        var $475=unSign(($474), 1, 0); //@line 2771 "xmlparse.c"
        var $476=((($470) + 1)&255); //@line 2771 "xmlparse.c"
        var $477=HEAP[$parser_addr]; //@line 2771 "xmlparse.c"
        var $478=(($477+388)&4294967295); //@line 2771 "xmlparse.c"
        HEAP[$478]=$476; //@line 2771 "xmlparse.c"
        var $toBool=reSign(($475), 8, 0)!=0; //@line 2771 "xmlparse.c"
        if ($toBool) { __label__ = 67; break; } else { __label__ = 68; break; } //@line 2771 "xmlparse.c"
      case 68: // $bb71
        var $479=HEAP[$parser_addr]; //@line 2772 "xmlparse.c"
        var $480=(($479+388)&4294967295); //@line 2772 "xmlparse.c"
        var $481=HEAP[$480]; //@line 2772 "xmlparse.c"
        var $482=unSign(($481), 8, 0) <= 2; //@line 2772 "xmlparse.c"
        if ($482) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 2772 "xmlparse.c"
      case 69: // $bb72
        var $483=HEAP[$parser_addr]; //@line 2773 "xmlparse.c"
        var $484=(($483+388)&4294967295); //@line 2773 "xmlparse.c"
        HEAP[$484]=3; //@line 2773 "xmlparse.c"
        __label__ = 70; break; //@line 2773 "xmlparse.c"
      case 70: // $bb73
        var $485=HEAP[$parser_addr]; //@line 2774 "xmlparse.c"
        var $486=(($485+388)&4294967295); //@line 2774 "xmlparse.c"
        var $487=HEAP[$486]; //@line 2774 "xmlparse.c"
        var $488=unSign(($487), 8, 0); //@line 2774 "xmlparse.c"
        var $489=1 << ($488); //@line 2774 "xmlparse.c"
        HEAP[$nsAttsSize]=$489; //@line 2774 "xmlparse.c"
        var $490=HEAP[$parser_addr]; //@line 2775 "xmlparse.c"
        var $491=(($490+12)&4294967295); //@line 2775 "xmlparse.c"
        var $492=(($491+4)&4294967295); //@line 2775 "xmlparse.c"
        var $493=HEAP[$492]; //@line 2775 "xmlparse.c"
        var $494=HEAP[$nsAttsSize]; //@line 2775 "xmlparse.c"
        var $495=((($494) * 12)&4294967295); //@line 2775 "xmlparse.c"
        var $496=HEAP[$parser_addr]; //@line 2775 "xmlparse.c"
        var $497=(($496+380)&4294967295); //@line 2775 "xmlparse.c"
        var $498=HEAP[$497]; //@line 2775 "xmlparse.c"
        var $499=$498; //@line 2775 "xmlparse.c"
        var $500=FUNCTION_TABLE[$493]($499, $495); //@line 2775 "xmlparse.c"
        var $501=$500; //@line 2775 "xmlparse.c"
        HEAP[$temp70]=$501; //@line 2775 "xmlparse.c"
        var $502=HEAP[$temp70]; //@line 2776 "xmlparse.c"
        var $503=($502)==0; //@line 2776 "xmlparse.c"
        if ($503) { __label__ = 71; break; } else { __label__ = 72; break; } //@line 2776 "xmlparse.c"
      case 71: // $bb74
        HEAP[$0]=1; //@line 2777 "xmlparse.c"
        __label__ = 163; break; //@line 2777 "xmlparse.c"
      case 72: // $bb75
        var $504=HEAP[$parser_addr]; //@line 2778 "xmlparse.c"
        var $505=(($504+380)&4294967295); //@line 2778 "xmlparse.c"
        var $506=HEAP[$temp70]; //@line 2778 "xmlparse.c"
        HEAP[$505]=$506; //@line 2778 "xmlparse.c"
        HEAP[$version]=0; //@line 2779 "xmlparse.c"
        __label__ = 73; break; //@line 2779 "xmlparse.c"
      case 73: // $bb76
        var $507=HEAP[$version]; //@line 2782 "xmlparse.c"
        var $508=((($507))|0)==0; //@line 2782 "xmlparse.c"
        if ($508) { __label__ = 74; break; } else { __label__ = 77; break; } //@line 2782 "xmlparse.c"
      case 74: // $bb77
        HEAP[$version]=-1; //@line 2783 "xmlparse.c"
        var $509=HEAP[$nsAttsSize]; //@line 2784 "xmlparse.c"
        HEAP[$j68]=$509; //@line 2784 "xmlparse.c"
        __label__ = 76; break; //@line 2784 "xmlparse.c"
      case 75: // $bb78
        var $510=HEAP[$parser_addr]; //@line 2785 "xmlparse.c"
        var $511=(($510+380)&4294967295); //@line 2785 "xmlparse.c"
        var $512=HEAP[$511]; //@line 2785 "xmlparse.c"
        var $513=HEAP[$j68]; //@line 2785 "xmlparse.c"
        var $514=((($513) - 1)&4294967295); //@line 2785 "xmlparse.c"
        HEAP[$j68]=$514; //@line 2785 "xmlparse.c"
        var $515=HEAP[$j68]; //@line 2785 "xmlparse.c"
        var $516=(($512+12*$515)&4294967295); //@line 2785 "xmlparse.c"
        var $517=(($516)&4294967295); //@line 2785 "xmlparse.c"
        var $518=HEAP[$version]; //@line 2785 "xmlparse.c"
        HEAP[$517]=$518; //@line 2785 "xmlparse.c"
        __label__ = 76; break; //@line 2785 "xmlparse.c"
      case 76: // $bb79
        var $519=HEAP[$j68]; //@line 2784 "xmlparse.c"
        var $520=((($519))|0)!=0; //@line 2784 "xmlparse.c"
        if ($520) { __label__ = 75; break; } else { __label__ = 77; break; } //@line 2784 "xmlparse.c"
      case 77: // $bb80
        var $521=HEAP[$version]; //@line 2787 "xmlparse.c"
        var $522=((($521) - 1)&4294967295); //@line 2787 "xmlparse.c"
        HEAP[$version]=$522; //@line 2787 "xmlparse.c"
        var $523=HEAP[$parser_addr]; //@line 2787 "xmlparse.c"
        var $524=(($523+384)&4294967295); //@line 2787 "xmlparse.c"
        var $525=HEAP[$version]; //@line 2787 "xmlparse.c"
        HEAP[$524]=$525; //@line 2787 "xmlparse.c"
        __label__ = 128; break; //@line 2787 "xmlparse.c"
      case 78: // $bb81
        var $526=HEAP[$appAtts]; //@line 2791 "xmlparse.c"
        var $527=HEAP[$i]; //@line 2791 "xmlparse.c"
        var $528=(($526+4*$527)&4294967295); //@line 2791 "xmlparse.c"
        var $529=HEAP[$528]; //@line 2791 "xmlparse.c"
        HEAP[$s]=$529; //@line 2791 "xmlparse.c"
        var $530=HEAP[$s]; //@line 2792 "xmlparse.c"
        var $531=(($530+-1)&4294967295); //@line 2792 "xmlparse.c"
        var $532=HEAP[$531]; //@line 2792 "xmlparse.c"
        var $533=reSign(($532), 8, 0)==2; //@line 2792 "xmlparse.c"
        if ($533) { __label__ = 79; break; } else { __label__ = 126; break; } //@line 2792 "xmlparse.c"
      case 79: // $bb82
        HEAP[$uriHash]=0; //@line 2795 "xmlparse.c"
        var $534=HEAP[$s]; //@line 2796 "xmlparse.c"
        var $535=(($534+-1)&4294967295); //@line 2796 "xmlparse.c"
        HEAP[$535]=0; //@line 2796 "xmlparse.c"
        var $536=HEAP[$dtd]; //@line 2797 "xmlparse.c"
        var $537=(($536+40)&4294967295); //@line 2797 "xmlparse.c"
        var $538=HEAP[$s]; //@line 2797 "xmlparse.c"
        var $539=_lookup($537, $538, 0); //@line 2797 "xmlparse.c"
        var $540=$539; //@line 2797 "xmlparse.c"
        HEAP[$id]=$540; //@line 2797 "xmlparse.c"
        var $541=HEAP[$id]; //@line 2798 "xmlparse.c"
        var $542=($541)==0; //@line 2798 "xmlparse.c"
        if ($542) { __label__ = 80; break; } else { __label__ = 81; break; } //@line 2798 "xmlparse.c"
      case 80: // $bb83
        HEAP[$0]=1; //@line 2799 "xmlparse.c"
        __label__ = 163; break; //@line 2799 "xmlparse.c"
      case 81: // $bb84
        var $543=HEAP[$id]; //@line 2800 "xmlparse.c"
        var $544=(($543+4)&4294967295); //@line 2800 "xmlparse.c"
        var $545=HEAP[$544]; //@line 2800 "xmlparse.c"
        var $546=(($545+4)&4294967295); //@line 2800 "xmlparse.c"
        var $547=HEAP[$546]; //@line 2800 "xmlparse.c"
        HEAP[$b]=$547; //@line 2800 "xmlparse.c"
        var $548=HEAP[$b]; //@line 2801 "xmlparse.c"
        var $549=($548)==0; //@line 2801 "xmlparse.c"
        if ($549) { __label__ = 82; break; } else { __label__ = 83; break; } //@line 2801 "xmlparse.c"
      case 82: // $bb85
        HEAP[$0]=27; //@line 2802 "xmlparse.c"
        __label__ = 163; break; //@line 2802 "xmlparse.c"
      case 83: // $bb86
        HEAP[$j68]=0; //@line 2805 "xmlparse.c"
        __label__ = 91; break; //@line 2805 "xmlparse.c"
      case 84: // $bb87
        var $550=HEAP[$b]; //@line 2806 "xmlparse.c"
        var $551=(($550+16)&4294967295); //@line 2806 "xmlparse.c"
        var $552=HEAP[$551]; //@line 2806 "xmlparse.c"
        var $553=HEAP[$j68]; //@line 2806 "xmlparse.c"
        var $554=(($552+$553)&4294967295); //@line 2806 "xmlparse.c"
        var $555=HEAP[$554]; //@line 2806 "xmlparse.c"
        HEAP[$c]=$555; //@line 2806 "xmlparse.c"
        var $556=HEAP[$parser_addr]; //@line 2807 "xmlparse.c"
        var $557=(($556+400)&4294967295); //@line 2807 "xmlparse.c"
        var $558=(($557+12)&4294967295); //@line 2807 "xmlparse.c"
        var $559=HEAP[$558]; //@line 2807 "xmlparse.c"
        var $560=HEAP[$parser_addr]; //@line 2807 "xmlparse.c"
        var $561=(($560+400)&4294967295); //@line 2807 "xmlparse.c"
        var $562=(($561+8)&4294967295); //@line 2807 "xmlparse.c"
        var $563=HEAP[$562]; //@line 2807 "xmlparse.c"
        var $564=($559)!=($563); //@line 2807 "xmlparse.c"
        if ($564) { __label__ = 86; break; } else { __label__ = 85; break; } //@line 2807 "xmlparse.c"
      case 85: // $bb88
        var $565=HEAP[$parser_addr]; //@line 2807 "xmlparse.c"
        var $566=(($565+400)&4294967295); //@line 2807 "xmlparse.c"
        var $567=_poolGrow($566); //@line 2807 "xmlparse.c"
        var $568=reSign(($567), 8, 0)!=0; //@line 2807 "xmlparse.c"
        if ($568) { __label__ = 86; break; } else { __label__ = 87; break; } //@line 2807 "xmlparse.c"
      case 86: // $bb89
        var $569=HEAP[$parser_addr]; //@line 2807 "xmlparse.c"
        var $570=(($569+400)&4294967295); //@line 2807 "xmlparse.c"
        var $571=(($570+12)&4294967295); //@line 2807 "xmlparse.c"
        var $572=HEAP[$571]; //@line 2807 "xmlparse.c"
        var $573=HEAP[$c]; //@line 2807 "xmlparse.c"
        HEAP[$572]=$573; //@line 2807 "xmlparse.c"
        var $574=(($572+1)&4294967295); //@line 2807 "xmlparse.c"
        var $575=HEAP[$parser_addr]; //@line 2807 "xmlparse.c"
        var $576=(($575+400)&4294967295); //@line 2807 "xmlparse.c"
        var $577=(($576+12)&4294967295); //@line 2807 "xmlparse.c"
        HEAP[$577]=$574; //@line 2807 "xmlparse.c"
        HEAP[$iftmp_106]=0; //@line 2807 "xmlparse.c"
        __label__ = 88; break; //@line 2807 "xmlparse.c"
      case 87: // $bb90
        HEAP[$iftmp_106]=1; //@line 2807 "xmlparse.c"
        __label__ = 88; break; //@line 2807 "xmlparse.c"
      case 88: // $bb91
        var $578=HEAP[$iftmp_106]; //@line 2807 "xmlparse.c"
        var $toBool92=reSign(($578), 8, 0)!=0; //@line 2807 "xmlparse.c"
        if ($toBool92) { __label__ = 89; break; } else { __label__ = 90; break; } //@line 2807 "xmlparse.c"
      case 89: // $bb93
        HEAP[$0]=1; //@line 2808 "xmlparse.c"
        __label__ = 163; break; //@line 2808 "xmlparse.c"
      case 90: // $bb94
        var $579=HEAP[$uriHash]; //@line 2809 "xmlparse.c"
        var $580=((($579) * 1000003)&4294967295); //@line 2809 "xmlparse.c"
        var $581=HEAP[$c]; //@line 2809 "xmlparse.c"
        var $582=unSign(($581), 8, 0); //@line 2809 "xmlparse.c"
        var $583=($580) ^ ($582); //@line 2809 "xmlparse.c"
        HEAP[$uriHash]=$583; //@line 2809 "xmlparse.c"
        var $584=HEAP[$j68]; //@line 2805 "xmlparse.c"
        var $585=((($584) + 1)&4294967295); //@line 2805 "xmlparse.c"
        HEAP[$j68]=$585; //@line 2805 "xmlparse.c"
        __label__ = 91; break; //@line 2805 "xmlparse.c"
      case 91: // $bb95
        var $586=HEAP[$b]; //@line 2805 "xmlparse.c"
        var $587=(($586+20)&4294967295); //@line 2805 "xmlparse.c"
        var $588=HEAP[$587]; //@line 2805 "xmlparse.c"
        var $589=HEAP[$j68]; //@line 2805 "xmlparse.c"
        var $590=((($588))|0) > ((($589))|0); //@line 2805 "xmlparse.c"
        if ($590) { __label__ = 84; break; } else { __label__ = 92; break; } //@line 2805 "xmlparse.c"
      case 92: // $bb96
        var $591=HEAP[$s]; //@line 2811 "xmlparse.c"
        var $592=HEAP[$591]; //@line 2811 "xmlparse.c"
        var $593=reSign(($592), 8, 0)!=58; //@line 2811 "xmlparse.c"
        var $594=unSign(($593), 1, 0); //@line 2811 "xmlparse.c"
        var $595=HEAP[$s]; //@line 2811 "xmlparse.c"
        var $596=(($595+1)&4294967295); //@line 2811 "xmlparse.c"
        HEAP[$s]=$596; //@line 2811 "xmlparse.c"
        var $toBool97=reSign(($594), 8, 0)!=0; //@line 2811 "xmlparse.c"
        if ($toBool97) { __label__ = 92; break; } else { __label__ = 93; break; } //@line 2811 "xmlparse.c"
      case 93: // $bb98
        var $597=HEAP[$s]; //@line 2814 "xmlparse.c"
        var $598=HEAP[$597]; //@line 2814 "xmlparse.c"
        HEAP[$c99]=$598; //@line 2814 "xmlparse.c"
        var $599=HEAP[$parser_addr]; //@line 2815 "xmlparse.c"
        var $600=(($599+400)&4294967295); //@line 2815 "xmlparse.c"
        var $601=(($600+12)&4294967295); //@line 2815 "xmlparse.c"
        var $602=HEAP[$601]; //@line 2815 "xmlparse.c"
        var $603=HEAP[$parser_addr]; //@line 2815 "xmlparse.c"
        var $604=(($603+400)&4294967295); //@line 2815 "xmlparse.c"
        var $605=(($604+8)&4294967295); //@line 2815 "xmlparse.c"
        var $606=HEAP[$605]; //@line 2815 "xmlparse.c"
        var $607=($602)!=($606); //@line 2815 "xmlparse.c"
        if ($607) { __label__ = 95; break; } else { __label__ = 94; break; } //@line 2815 "xmlparse.c"
      case 94: // $bb100
        var $608=HEAP[$parser_addr]; //@line 2815 "xmlparse.c"
        var $609=(($608+400)&4294967295); //@line 2815 "xmlparse.c"
        var $610=_poolGrow($609); //@line 2815 "xmlparse.c"
        var $611=reSign(($610), 8, 0)!=0; //@line 2815 "xmlparse.c"
        if ($611) { __label__ = 95; break; } else { __label__ = 96; break; } //@line 2815 "xmlparse.c"
      case 95: // $bb101
        var $612=HEAP[$parser_addr]; //@line 2815 "xmlparse.c"
        var $613=(($612+400)&4294967295); //@line 2815 "xmlparse.c"
        var $614=(($613+12)&4294967295); //@line 2815 "xmlparse.c"
        var $615=HEAP[$614]; //@line 2815 "xmlparse.c"
        var $616=HEAP[$s]; //@line 2815 "xmlparse.c"
        var $617=HEAP[$616]; //@line 2815 "xmlparse.c"
        HEAP[$615]=$617; //@line 2815 "xmlparse.c"
        var $618=(($615+1)&4294967295); //@line 2815 "xmlparse.c"
        var $619=HEAP[$parser_addr]; //@line 2815 "xmlparse.c"
        var $620=(($619+400)&4294967295); //@line 2815 "xmlparse.c"
        var $621=(($620+12)&4294967295); //@line 2815 "xmlparse.c"
        HEAP[$621]=$618; //@line 2815 "xmlparse.c"
        HEAP[$iftmp_108]=0; //@line 2815 "xmlparse.c"
        __label__ = 97; break; //@line 2815 "xmlparse.c"
      case 96: // $bb102
        HEAP[$iftmp_108]=1; //@line 2815 "xmlparse.c"
        __label__ = 97; break; //@line 2815 "xmlparse.c"
      case 97: // $bb103
        var $622=HEAP[$iftmp_108]; //@line 2815 "xmlparse.c"
        var $toBool104=reSign(($622), 8, 0)!=0; //@line 2815 "xmlparse.c"
        if ($toBool104) { __label__ = 98; break; } else { __label__ = 99; break; } //@line 2815 "xmlparse.c"
      case 98: // $bb105
        HEAP[$0]=1; //@line 2816 "xmlparse.c"
        __label__ = 163; break; //@line 2816 "xmlparse.c"
      case 99: // $bb106
        var $623=HEAP[$uriHash]; //@line 2817 "xmlparse.c"
        var $624=((($623) * 1000003)&4294967295); //@line 2817 "xmlparse.c"
        var $625=HEAP[$c99]; //@line 2817 "xmlparse.c"
        var $626=unSign(($625), 8, 0); //@line 2817 "xmlparse.c"
        var $627=($624) ^ ($626); //@line 2817 "xmlparse.c"
        HEAP[$uriHash]=$627; //@line 2817 "xmlparse.c"
        var $628=HEAP[$s]; //@line 2818 "xmlparse.c"
        var $629=HEAP[$628]; //@line 2818 "xmlparse.c"
        var $630=reSign(($629), 8, 0)!=0; //@line 2818 "xmlparse.c"
        var $631=unSign(($630), 1, 0); //@line 2818 "xmlparse.c"
        var $632=HEAP[$s]; //@line 2818 "xmlparse.c"
        var $633=(($632+1)&4294967295); //@line 2818 "xmlparse.c"
        HEAP[$s]=$633; //@line 2818 "xmlparse.c"
        var $toBool107=reSign(($631), 8, 0)!=0; //@line 2818 "xmlparse.c"
        if ($toBool107) { __label__ = 93; break; } else { __label__ = 100; break; } //@line 2818 "xmlparse.c"
      case 100: // $bb108
        HEAP[$step]=0; //@line 2823 "xmlparse.c"
        var $634=HEAP[$nsAttsSize]; //@line 2824 "xmlparse.c"
        var $635=((($634) - 1)&4294967295); //@line 2824 "xmlparse.c"
        HEAP[$mask]=$635; //@line 2824 "xmlparse.c"
        var $636=HEAP[$uriHash]; //@line 2825 "xmlparse.c"
        var $637=HEAP[$mask]; //@line 2825 "xmlparse.c"
        var $638=($636) & ($637); //@line 2825 "xmlparse.c"
        HEAP[$j68]=$638; //@line 2825 "xmlparse.c"
        __label__ = 113; break; //@line 2825 "xmlparse.c"
      case 101: // $bb109
        var $639=HEAP[$parser_addr]; //@line 2828 "xmlparse.c"
        var $640=(($639+380)&4294967295); //@line 2828 "xmlparse.c"
        var $641=HEAP[$640]; //@line 2828 "xmlparse.c"
        var $642=HEAP[$j68]; //@line 2828 "xmlparse.c"
        var $643=(($641+12*$642)&4294967295); //@line 2828 "xmlparse.c"
        var $644=(($643+4)&4294967295); //@line 2828 "xmlparse.c"
        var $645=HEAP[$644]; //@line 2828 "xmlparse.c"
        var $646=HEAP[$uriHash]; //@line 2828 "xmlparse.c"
        var $647=((($645))|0)==((($646))|0); //@line 2828 "xmlparse.c"
        if ($647) { __label__ = 102; break; } else { __label__ = 108; break; } //@line 2828 "xmlparse.c"
      case 102: // $bb110
        var $648=HEAP[$parser_addr]; //@line 2829 "xmlparse.c"
        var $649=(($648+400)&4294967295); //@line 2829 "xmlparse.c"
        var $650=(($649+16)&4294967295); //@line 2829 "xmlparse.c"
        var $651=HEAP[$650]; //@line 2829 "xmlparse.c"
        HEAP[$s1]=$651; //@line 2829 "xmlparse.c"
        var $652=HEAP[$parser_addr]; //@line 2830 "xmlparse.c"
        var $653=(($652+380)&4294967295); //@line 2830 "xmlparse.c"
        var $654=HEAP[$653]; //@line 2830 "xmlparse.c"
        var $655=HEAP[$j68]; //@line 2830 "xmlparse.c"
        var $656=(($654+12*$655)&4294967295); //@line 2830 "xmlparse.c"
        var $657=(($656+8)&4294967295); //@line 2830 "xmlparse.c"
        var $658=HEAP[$657]; //@line 2830 "xmlparse.c"
        HEAP[$s2]=$658; //@line 2830 "xmlparse.c"
        __label__ = 104; break; //@line 2830 "xmlparse.c"
      case 103: // $bb111
        var $659=HEAP[$s1]; //@line 2832 "xmlparse.c"
        var $660=(($659+1)&4294967295); //@line 2832 "xmlparse.c"
        HEAP[$s1]=$660; //@line 2832 "xmlparse.c"
        var $661=HEAP[$s2]; //@line 2832 "xmlparse.c"
        var $662=(($661+1)&4294967295); //@line 2832 "xmlparse.c"
        HEAP[$s2]=$662; //@line 2832 "xmlparse.c"
        __label__ = 104; break; //@line 2832 "xmlparse.c"
      case 104: // $bb112
        var $663=HEAP[$s1]; //@line 2832 "xmlparse.c"
        var $664=HEAP[$663]; //@line 2832 "xmlparse.c"
        var $665=HEAP[$s2]; //@line 2832 "xmlparse.c"
        var $666=HEAP[$665]; //@line 2832 "xmlparse.c"
        var $667=reSign(($664), 8, 0)!=reSign(($666), 8, 0); //@line 2832 "xmlparse.c"
        if ($667) { __label__ = 106; break; } else { __label__ = 105; break; } //@line 2832 "xmlparse.c"
      case 105: // $bb113
        var $668=HEAP[$s1]; //@line 2832 "xmlparse.c"
        var $669=HEAP[$668]; //@line 2832 "xmlparse.c"
        var $670=reSign(($669), 8, 0)!=0; //@line 2832 "xmlparse.c"
        if ($670) { __label__ = 103; break; } else { __label__ = 106; break; } //@line 2832 "xmlparse.c"
      case 106: // $bb114
        var $671=HEAP[$s1]; //@line 2833 "xmlparse.c"
        var $672=HEAP[$671]; //@line 2833 "xmlparse.c"
        var $673=reSign(($672), 8, 0)==0; //@line 2833 "xmlparse.c"
        if ($673) { __label__ = 107; break; } else { __label__ = 108; break; } //@line 2833 "xmlparse.c"
      case 107: // $bb115
        HEAP[$0]=8; //@line 2834 "xmlparse.c"
        __label__ = 163; break; //@line 2834 "xmlparse.c"
      case 108: // $bb116
        var $674=HEAP[$step]; //@line 2836 "xmlparse.c"
        var $675=reSign(($674), 8, 0)==0; //@line 2836 "xmlparse.c"
        if ($675) { __label__ = 109; break; } else { __label__ = 110; break; } //@line 2836 "xmlparse.c"
      case 109: // $bb117
        var $676=HEAP[$mask]; //@line 2837 "xmlparse.c"
        var $not=($676) ^ -1; //@line 2837 "xmlparse.c"
        var $677=HEAP[$uriHash]; //@line 2837 "xmlparse.c"
        var $678=($not) & ($677); //@line 2837 "xmlparse.c"
        var $679=HEAP[$parser_addr]; //@line 2837 "xmlparse.c"
        var $680=(($679+388)&4294967295); //@line 2837 "xmlparse.c"
        var $681=HEAP[$680]; //@line 2837 "xmlparse.c"
        var $682=unSign(($681), 8, 0); //@line 2837 "xmlparse.c"
        var $683=((($682) - 1)&4294967295); //@line 2837 "xmlparse.c"
        var $684=((($678))>>>0) >>> ((($683))>>>0); //@line 2837 "xmlparse.c"
        var $685=((($684)) & 255); //@line 2837 "xmlparse.c"
        var $686=HEAP[$mask]; //@line 2837 "xmlparse.c"
        var $687=((($686))>>>0) >>> 2; //@line 2837 "xmlparse.c"
        var $688=((($687)) & 255); //@line 2837 "xmlparse.c"
        var $689=($685) & ($688); //@line 2837 "xmlparse.c"
        var $690=($689) | 1; //@line 2837 "xmlparse.c"
        HEAP[$step]=$690; //@line 2837 "xmlparse.c"
        __label__ = 110; break; //@line 2837 "xmlparse.c"
      case 110: // $bb119
        var $691=HEAP[$step]; //@line 2838 "xmlparse.c"
        var $692=unSign(($691), 8, 0); //@line 2838 "xmlparse.c"
        var $693=HEAP[$j68]; //@line 2838 "xmlparse.c"
        var $694=((($692))|0) > ((($693))|0); //@line 2838 "xmlparse.c"
        if ($694) { __label__ = 111; break; } else { __label__ = 112; break; } //@line 2838 "xmlparse.c"
      case 111: // $bb120
        var $695=HEAP[$step]; //@line 2838 "xmlparse.c"
        var $696=unSign(($695), 8, 0); //@line 2838 "xmlparse.c"
        var $697=HEAP[$nsAttsSize]; //@line 2838 "xmlparse.c"
        var $698=((($697) - ($696))&4294967295); //@line 2838 "xmlparse.c"
        var $699=HEAP[$j68]; //@line 2838 "xmlparse.c"
        var $700=((($698) + ($699))&4294967295); //@line 2838 "xmlparse.c"
        HEAP[$j68]=$700; //@line 2838 "xmlparse.c"
        var $701=HEAP[$j68]; //@line 2838 "xmlparse.c"
        HEAP[$iftmp_110]=$701; //@line 2838 "xmlparse.c"
        __label__ = 113; break; //@line 2838 "xmlparse.c"
      case 112: // $bb121
        var $702=HEAP[$step]; //@line 2838 "xmlparse.c"
        var $703=unSign(($702), 8, 0); //@line 2838 "xmlparse.c"
        var $704=HEAP[$j68]; //@line 2838 "xmlparse.c"
        var $705=((($704) - ($703))&4294967295); //@line 2838 "xmlparse.c"
        HEAP[$j68]=$705; //@line 2838 "xmlparse.c"
        var $706=HEAP[$j68]; //@line 2838 "xmlparse.c"
        HEAP[$iftmp_110]=$706; //@line 2838 "xmlparse.c"
        __label__ = 113; break; //@line 2838 "xmlparse.c"
      case 113: // $bb122
        var $707=HEAP[$parser_addr]; //@line 2826 "xmlparse.c"
        var $708=(($707+380)&4294967295); //@line 2826 "xmlparse.c"
        var $709=HEAP[$708]; //@line 2826 "xmlparse.c"
        var $710=HEAP[$j68]; //@line 2826 "xmlparse.c"
        var $711=(($709+12*$710)&4294967295); //@line 2826 "xmlparse.c"
        var $712=(($711)&4294967295); //@line 2826 "xmlparse.c"
        var $713=HEAP[$712]; //@line 2826 "xmlparse.c"
        var $714=HEAP[$version]; //@line 2826 "xmlparse.c"
        var $715=((($713))|0)==((($714))|0); //@line 2826 "xmlparse.c"
        if ($715) { __label__ = 101; break; } else { __label__ = 114; break; } //@line 2826 "xmlparse.c"
      case 114: // $bb123
        var $716=HEAP[$parser_addr]; //@line 2842 "xmlparse.c"
        var $717=(($716+233)&4294967295); //@line 2842 "xmlparse.c"
        var $718=HEAP[$717]; //@line 2842 "xmlparse.c"
        var $719=reSign(($718), 8, 0)!=0; //@line 2842 "xmlparse.c"
        if ($719) { __label__ = 115; break; } else { __label__ = 123; break; } //@line 2842 "xmlparse.c"
      case 115: // $bb124
        var $720=HEAP[$parser_addr]; //@line 2843 "xmlparse.c"
        var $721=(($720+400)&4294967295); //@line 2843 "xmlparse.c"
        var $722=(($721+12)&4294967295); //@line 2843 "xmlparse.c"
        var $723=HEAP[$722]; //@line 2843 "xmlparse.c"
        var $724=HEAP[$parser_addr]; //@line 2843 "xmlparse.c"
        var $725=(($724+456)&4294967295); //@line 2843 "xmlparse.c"
        var $726=HEAP[$725]; //@line 2843 "xmlparse.c"
        var $727=(($723+-1)&4294967295); //@line 2843 "xmlparse.c"
        HEAP[$727]=$726; //@line 2843 "xmlparse.c"
        var $728=HEAP[$b]; //@line 2844 "xmlparse.c"
        var $729=(($728)&4294967295); //@line 2844 "xmlparse.c"
        var $730=HEAP[$729]; //@line 2844 "xmlparse.c"
        var $731=(($730)&4294967295); //@line 2844 "xmlparse.c"
        var $732=HEAP[$731]; //@line 2844 "xmlparse.c"
        HEAP[$s]=$732; //@line 2844 "xmlparse.c"
        __label__ = 116; break; //@line 2844 "xmlparse.c"
      case 116: // $bb125
        var $733=HEAP[$parser_addr]; //@line 2846 "xmlparse.c"
        var $734=(($733+400)&4294967295); //@line 2846 "xmlparse.c"
        var $735=(($734+12)&4294967295); //@line 2846 "xmlparse.c"
        var $736=HEAP[$735]; //@line 2846 "xmlparse.c"
        var $737=HEAP[$parser_addr]; //@line 2846 "xmlparse.c"
        var $738=(($737+400)&4294967295); //@line 2846 "xmlparse.c"
        var $739=(($738+8)&4294967295); //@line 2846 "xmlparse.c"
        var $740=HEAP[$739]; //@line 2846 "xmlparse.c"
        var $741=($736)!=($740); //@line 2846 "xmlparse.c"
        if ($741) { __label__ = 118; break; } else { __label__ = 117; break; } //@line 2846 "xmlparse.c"
      case 117: // $bb126
        var $742=HEAP[$parser_addr]; //@line 2846 "xmlparse.c"
        var $743=(($742+400)&4294967295); //@line 2846 "xmlparse.c"
        var $744=_poolGrow($743); //@line 2846 "xmlparse.c"
        var $745=reSign(($744), 8, 0)!=0; //@line 2846 "xmlparse.c"
        if ($745) { __label__ = 118; break; } else { __label__ = 119; break; } //@line 2846 "xmlparse.c"
      case 118: // $bb127
        var $746=HEAP[$parser_addr]; //@line 2846 "xmlparse.c"
        var $747=(($746+400)&4294967295); //@line 2846 "xmlparse.c"
        var $748=(($747+12)&4294967295); //@line 2846 "xmlparse.c"
        var $749=HEAP[$748]; //@line 2846 "xmlparse.c"
        var $750=HEAP[$s]; //@line 2846 "xmlparse.c"
        var $751=HEAP[$750]; //@line 2846 "xmlparse.c"
        HEAP[$749]=$751; //@line 2846 "xmlparse.c"
        var $752=(($749+1)&4294967295); //@line 2846 "xmlparse.c"
        var $753=HEAP[$parser_addr]; //@line 2846 "xmlparse.c"
        var $754=(($753+400)&4294967295); //@line 2846 "xmlparse.c"
        var $755=(($754+12)&4294967295); //@line 2846 "xmlparse.c"
        HEAP[$755]=$752; //@line 2846 "xmlparse.c"
        HEAP[$iftmp_111]=0; //@line 2846 "xmlparse.c"
        __label__ = 120; break; //@line 2846 "xmlparse.c"
      case 119: // $bb128
        HEAP[$iftmp_111]=1; //@line 2846 "xmlparse.c"
        __label__ = 120; break; //@line 2846 "xmlparse.c"
      case 120: // $bb129
        var $756=HEAP[$iftmp_111]; //@line 2846 "xmlparse.c"
        var $toBool130=reSign(($756), 8, 0)!=0; //@line 2846 "xmlparse.c"
        if ($toBool130) { __label__ = 121; break; } else { __label__ = 122; break; } //@line 2846 "xmlparse.c"
      case 121: // $bb131
        HEAP[$0]=1; //@line 2847 "xmlparse.c"
        __label__ = 163; break; //@line 2847 "xmlparse.c"
      case 122: // $bb132
        var $757=HEAP[$s]; //@line 2848 "xmlparse.c"
        var $758=HEAP[$757]; //@line 2848 "xmlparse.c"
        var $759=reSign(($758), 8, 0)!=0; //@line 2848 "xmlparse.c"
        var $760=unSign(($759), 1, 0); //@line 2848 "xmlparse.c"
        var $761=HEAP[$s]; //@line 2848 "xmlparse.c"
        var $762=(($761+1)&4294967295); //@line 2848 "xmlparse.c"
        HEAP[$s]=$762; //@line 2848 "xmlparse.c"
        var $toBool133=reSign(($760), 8, 0)!=0; //@line 2848 "xmlparse.c"
        if ($toBool133) { __label__ = 116; break; } else { __label__ = 123; break; } //@line 2848 "xmlparse.c"
      case 123: // $bb134
        var $763=HEAP[$parser_addr]; //@line 2852 "xmlparse.c"
        var $764=(($763+400)&4294967295); //@line 2852 "xmlparse.c"
        var $765=(($764+16)&4294967295); //@line 2852 "xmlparse.c"
        var $766=HEAP[$765]; //@line 2852 "xmlparse.c"
        HEAP[$s]=$766; //@line 2852 "xmlparse.c"
        var $767=HEAP[$parser_addr]; //@line 2853 "xmlparse.c"
        var $768=(($767+400)&4294967295); //@line 2853 "xmlparse.c"
        var $769=(($768+12)&4294967295); //@line 2853 "xmlparse.c"
        var $770=HEAP[$769]; //@line 2853 "xmlparse.c"
        var $771=HEAP[$parser_addr]; //@line 2853 "xmlparse.c"
        var $772=(($771+400)&4294967295); //@line 2853 "xmlparse.c"
        var $773=(($772+16)&4294967295); //@line 2853 "xmlparse.c"
        HEAP[$773]=$770; //@line 2853 "xmlparse.c"
        var $774=HEAP[$appAtts]; //@line 2854 "xmlparse.c"
        var $775=HEAP[$i]; //@line 2854 "xmlparse.c"
        var $776=(($774+4*$775)&4294967295); //@line 2854 "xmlparse.c"
        var $777=HEAP[$s]; //@line 2854 "xmlparse.c"
        HEAP[$776]=$777; //@line 2854 "xmlparse.c"
        var $778=HEAP[$parser_addr]; //@line 2857 "xmlparse.c"
        var $779=(($778+380)&4294967295); //@line 2857 "xmlparse.c"
        var $780=HEAP[$779]; //@line 2857 "xmlparse.c"
        var $781=HEAP[$j68]; //@line 2857 "xmlparse.c"
        var $782=(($780+12*$781)&4294967295); //@line 2857 "xmlparse.c"
        var $783=(($782)&4294967295); //@line 2857 "xmlparse.c"
        var $784=HEAP[$version]; //@line 2857 "xmlparse.c"
        HEAP[$783]=$784; //@line 2857 "xmlparse.c"
        var $785=HEAP[$parser_addr]; //@line 2858 "xmlparse.c"
        var $786=(($785+380)&4294967295); //@line 2858 "xmlparse.c"
        var $787=HEAP[$786]; //@line 2858 "xmlparse.c"
        var $788=HEAP[$j68]; //@line 2858 "xmlparse.c"
        var $789=(($787+12*$788)&4294967295); //@line 2858 "xmlparse.c"
        var $790=(($789+4)&4294967295); //@line 2858 "xmlparse.c"
        var $791=HEAP[$uriHash]; //@line 2858 "xmlparse.c"
        HEAP[$790]=$791; //@line 2858 "xmlparse.c"
        var $792=HEAP[$parser_addr]; //@line 2859 "xmlparse.c"
        var $793=(($792+380)&4294967295); //@line 2859 "xmlparse.c"
        var $794=HEAP[$793]; //@line 2859 "xmlparse.c"
        var $795=HEAP[$j68]; //@line 2859 "xmlparse.c"
        var $796=(($794+12*$795)&4294967295); //@line 2859 "xmlparse.c"
        var $797=(($796+8)&4294967295); //@line 2859 "xmlparse.c"
        var $798=HEAP[$s]; //@line 2859 "xmlparse.c"
        HEAP[$797]=$798; //@line 2859 "xmlparse.c"
        var $799=HEAP[$nPrefixes]; //@line 2861 "xmlparse.c"
        var $800=((($799) - 1)&4294967295); //@line 2861 "xmlparse.c"
        HEAP[$nPrefixes]=$800; //@line 2861 "xmlparse.c"
        var $801=HEAP[$nPrefixes]; //@line 2861 "xmlparse.c"
        var $802=((($801))|0)==0; //@line 2861 "xmlparse.c"
        if ($802) { __label__ = 124; break; } else { __label__ = 125; break; } //@line 2861 "xmlparse.c"
      case 124: // $bb135
        var $803=HEAP[$i]; //@line 2862 "xmlparse.c"
        var $804=((($803) + 2)&4294967295); //@line 2862 "xmlparse.c"
        HEAP[$i]=$804; //@line 2862 "xmlparse.c"
        __label__ = 129; break; //@line 2862 "xmlparse.c"
      case 125: // $bb136
        __label__ = 127; break; //@line 2862 "xmlparse.c"
      case 126: // $bb137
        var $805=HEAP[$s]; //@line 2867 "xmlparse.c"
        var $806=(($805+-1)&4294967295); //@line 2867 "xmlparse.c"
        HEAP[$806]=0; //@line 2867 "xmlparse.c"
        __label__ = 127; break; //@line 2867 "xmlparse.c"
      case 127: // $bb138
        var $807=HEAP[$i]; //@line 2790 "xmlparse.c"
        var $808=((($807) + 2)&4294967295); //@line 2790 "xmlparse.c"
        HEAP[$i]=$808; //@line 2790 "xmlparse.c"
        __label__ = 128; break; //@line 2790 "xmlparse.c"
      case 128: // $bb139
        var $809=HEAP[$i]; //@line 2790 "xmlparse.c"
        var $810=HEAP[$attIndex]; //@line 2790 "xmlparse.c"
        var $811=((($809))|0) < ((($810))|0); //@line 2790 "xmlparse.c"
        if ($811) { __label__ = 78; break; } else { __label__ = 129; break; } //@line 2790 "xmlparse.c"
      case 129: // $bb140
        __label__ = 131; break; //@line 2790 "xmlparse.c"
      case 130: // $bb141
        var $812=HEAP[$appAtts]; //@line 2872 "xmlparse.c"
        var $813=HEAP[$i]; //@line 2872 "xmlparse.c"
        var $814=(($812+4*$813)&4294967295); //@line 2872 "xmlparse.c"
        var $815=HEAP[$814]; //@line 2872 "xmlparse.c"
        var $816=(($815+-1)&4294967295); //@line 2872 "xmlparse.c"
        HEAP[$816]=0; //@line 2872 "xmlparse.c"
        var $817=HEAP[$i]; //@line 2871 "xmlparse.c"
        var $818=((($817) + 2)&4294967295); //@line 2871 "xmlparse.c"
        HEAP[$i]=$818; //@line 2871 "xmlparse.c"
        __label__ = 131; break; //@line 2871 "xmlparse.c"
      case 131: // $bb142
        var $819=HEAP[$i]; //@line 2871 "xmlparse.c"
        var $820=HEAP[$attIndex]; //@line 2871 "xmlparse.c"
        var $821=((($819))|0) < ((($820))|0); //@line 2871 "xmlparse.c"
        if ($821) { __label__ = 130; break; } else { __label__ = 132; break; } //@line 2871 "xmlparse.c"
      case 132: // $bb143
        var $822=HEAP[$bindingsPtr_addr]; //@line 2873 "xmlparse.c"
        var $823=HEAP[$822]; //@line 2873 "xmlparse.c"
        HEAP[$binding]=$823; //@line 2873 "xmlparse.c"
        __label__ = 134; break; //@line 2873 "xmlparse.c"
      case 133: // $bb144
        var $824=HEAP[$binding]; //@line 2874 "xmlparse.c"
        var $825=(($824+12)&4294967295); //@line 2874 "xmlparse.c"
        var $826=HEAP[$825]; //@line 2874 "xmlparse.c"
        var $827=(($826)&4294967295); //@line 2874 "xmlparse.c"
        var $828=HEAP[$827]; //@line 2874 "xmlparse.c"
        var $829=(($828+-1)&4294967295); //@line 2874 "xmlparse.c"
        HEAP[$829]=0; //@line 2874 "xmlparse.c"
        var $830=HEAP[$binding]; //@line 2873 "xmlparse.c"
        var $831=(($830+4)&4294967295); //@line 2873 "xmlparse.c"
        var $832=HEAP[$831]; //@line 2873 "xmlparse.c"
        HEAP[$binding]=$832; //@line 2873 "xmlparse.c"
        __label__ = 134; break; //@line 2873 "xmlparse.c"
      case 134: // $bb145
        var $833=HEAP[$binding]; //@line 2873 "xmlparse.c"
        var $834=($833)!=0; //@line 2873 "xmlparse.c"
        if ($834) { __label__ = 133; break; } else { __label__ = 135; break; } //@line 2873 "xmlparse.c"
      case 135: // $bb146
        var $835=HEAP[$parser_addr]; //@line 2876 "xmlparse.c"
        var $836=(($835+232)&4294967295); //@line 2876 "xmlparse.c"
        var $837=HEAP[$836]; //@line 2876 "xmlparse.c"
        var $838=reSign(($837), 8, 0)==0; //@line 2876 "xmlparse.c"
        if ($838) { __label__ = 136; break; } else { __label__ = 137; break; } //@line 2876 "xmlparse.c"
      case 136: // $bb147
        HEAP[$0]=0; //@line 2877 "xmlparse.c"
        __label__ = 163; break; //@line 2877 "xmlparse.c"
      case 137: // $bb148
        var $839=HEAP[$elementType]; //@line 2880 "xmlparse.c"
        var $840=(($839+4)&4294967295); //@line 2880 "xmlparse.c"
        var $841=HEAP[$840]; //@line 2880 "xmlparse.c"
        var $842=($841)!=0; //@line 2880 "xmlparse.c"
        if ($842) { __label__ = 138; break; } else { __label__ = 143; break; } //@line 2880 "xmlparse.c"
      case 138: // $bb149
        var $843=HEAP[$elementType]; //@line 2881 "xmlparse.c"
        var $844=(($843+4)&4294967295); //@line 2881 "xmlparse.c"
        var $845=HEAP[$844]; //@line 2881 "xmlparse.c"
        var $846=(($845+4)&4294967295); //@line 2881 "xmlparse.c"
        var $847=HEAP[$846]; //@line 2881 "xmlparse.c"
        HEAP[$binding]=$847; //@line 2881 "xmlparse.c"
        var $848=HEAP[$binding]; //@line 2882 "xmlparse.c"
        var $849=($848)==0; //@line 2882 "xmlparse.c"
        if ($849) { __label__ = 139; break; } else { __label__ = 140; break; } //@line 2882 "xmlparse.c"
      case 139: // $bb150
        HEAP[$0]=27; //@line 2883 "xmlparse.c"
        __label__ = 163; break; //@line 2883 "xmlparse.c"
      case 140: // $bb151
        var $850=HEAP[$tagNamePtr_addr]; //@line 2884 "xmlparse.c"
        var $851=(($850)&4294967295); //@line 2884 "xmlparse.c"
        var $852=HEAP[$851]; //@line 2884 "xmlparse.c"
        HEAP[$localPart]=$852; //@line 2884 "xmlparse.c"
        __label__ = 141; break; //@line 2884 "xmlparse.c"
      case 141: // $bb152
        var $853=HEAP[$localPart]; //@line 2885 "xmlparse.c"
        var $854=HEAP[$853]; //@line 2885 "xmlparse.c"
        var $855=reSign(($854), 8, 0)!=58; //@line 2885 "xmlparse.c"
        var $856=unSign(($855), 1, 0); //@line 2885 "xmlparse.c"
        var $857=HEAP[$localPart]; //@line 2885 "xmlparse.c"
        var $858=(($857+1)&4294967295); //@line 2885 "xmlparse.c"
        HEAP[$localPart]=$858; //@line 2885 "xmlparse.c"
        var $toBool153=reSign(($856), 8, 0)!=0; //@line 2885 "xmlparse.c"
        if ($toBool153) { __label__ = 141; break; } else { __label__ = 142; break; } //@line 2885 "xmlparse.c"
      case 142: // $bb154
        __label__ = 146; break; //@line 2885 "xmlparse.c"
      case 143: // $bb155
        var $859=HEAP[$dtd]; //@line 2888 "xmlparse.c"
        var $860=(($859+132)&4294967295); //@line 2888 "xmlparse.c"
        var $861=(($860+4)&4294967295); //@line 2888 "xmlparse.c"
        var $862=HEAP[$861]; //@line 2888 "xmlparse.c"
        var $863=($862)!=0; //@line 2888 "xmlparse.c"
        if ($863) { __label__ = 144; break; } else { __label__ = 145; break; } //@line 2888 "xmlparse.c"
      case 144: // $bb156
        var $864=HEAP[$dtd]; //@line 2889 "xmlparse.c"
        var $865=(($864+132)&4294967295); //@line 2889 "xmlparse.c"
        var $866=(($865+4)&4294967295); //@line 2889 "xmlparse.c"
        var $867=HEAP[$866]; //@line 2889 "xmlparse.c"
        HEAP[$binding]=$867; //@line 2889 "xmlparse.c"
        var $868=HEAP[$tagNamePtr_addr]; //@line 2890 "xmlparse.c"
        var $869=(($868)&4294967295); //@line 2890 "xmlparse.c"
        var $870=HEAP[$869]; //@line 2890 "xmlparse.c"
        HEAP[$localPart]=$870; //@line 2890 "xmlparse.c"
        __label__ = 146; break; //@line 2890 "xmlparse.c"
      case 145: // $bb157
        HEAP[$0]=0; //@line 2893 "xmlparse.c"
        __label__ = 163; break; //@line 2893 "xmlparse.c"
      case 146: // $bb158
        HEAP[$prefixLen]=0; //@line 2894 "xmlparse.c"
        var $871=HEAP[$parser_addr]; //@line 2895 "xmlparse.c"
        var $872=(($871+233)&4294967295); //@line 2895 "xmlparse.c"
        var $873=HEAP[$872]; //@line 2895 "xmlparse.c"
        var $874=reSign(($873), 8, 0)!=0; //@line 2895 "xmlparse.c"
        if ($874) { __label__ = 147; break; } else { __label__ = 149; break; } //@line 2895 "xmlparse.c"
      case 147: // $bb159
        var $875=HEAP[$binding]; //@line 2895 "xmlparse.c"
        var $876=(($875)&4294967295); //@line 2895 "xmlparse.c"
        var $877=HEAP[$876]; //@line 2895 "xmlparse.c"
        var $878=(($877)&4294967295); //@line 2895 "xmlparse.c"
        var $879=HEAP[$878]; //@line 2895 "xmlparse.c"
        var $880=($879)!=0; //@line 2895 "xmlparse.c"
        if ($880) { __label__ = 148; break; } else { __label__ = 149; break; } //@line 2895 "xmlparse.c"
      case 148: // $bb160
        var $881=HEAP[$binding]; //@line 2896 "xmlparse.c"
        var $882=(($881)&4294967295); //@line 2896 "xmlparse.c"
        var $883=HEAP[$882]; //@line 2896 "xmlparse.c"
        var $884=(($883)&4294967295); //@line 2896 "xmlparse.c"
        var $885=HEAP[$884]; //@line 2896 "xmlparse.c"
        var $886=HEAP[$prefixLen]; //@line 2896 "xmlparse.c"
        var $887=(($885+$886)&4294967295); //@line 2896 "xmlparse.c"
        var $888=HEAP[$887]; //@line 2896 "xmlparse.c"
        var $889=reSign(($888), 8, 0)!=0; //@line 2896 "xmlparse.c"
        var $890=unSign(($889), 1, 0); //@line 2896 "xmlparse.c"
        var $891=HEAP[$prefixLen]; //@line 2896 "xmlparse.c"
        var $892=((($891) + 1)&4294967295); //@line 2896 "xmlparse.c"
        HEAP[$prefixLen]=$892; //@line 2896 "xmlparse.c"
        var $toBool161=reSign(($890), 8, 0)!=0; //@line 2896 "xmlparse.c"
        if ($toBool161) { __label__ = 148; break; } else { __label__ = 149; break; } //@line 2896 "xmlparse.c"
      case 149: // $bb162
        var $893=HEAP[$tagNamePtr_addr]; //@line 2899 "xmlparse.c"
        var $894=(($893+4)&4294967295); //@line 2899 "xmlparse.c"
        var $895=HEAP[$localPart]; //@line 2899 "xmlparse.c"
        HEAP[$894]=$895; //@line 2899 "xmlparse.c"
        var $896=HEAP[$binding]; //@line 2900 "xmlparse.c"
        var $897=(($896+20)&4294967295); //@line 2900 "xmlparse.c"
        var $898=HEAP[$897]; //@line 2900 "xmlparse.c"
        var $899=HEAP[$tagNamePtr_addr]; //@line 2900 "xmlparse.c"
        var $900=(($899+16)&4294967295); //@line 2900 "xmlparse.c"
        HEAP[$900]=$898; //@line 2900 "xmlparse.c"
        var $901=HEAP[$binding]; //@line 2901 "xmlparse.c"
        var $902=(($901)&4294967295); //@line 2901 "xmlparse.c"
        var $903=HEAP[$902]; //@line 2901 "xmlparse.c"
        var $904=(($903)&4294967295); //@line 2901 "xmlparse.c"
        var $905=HEAP[$904]; //@line 2901 "xmlparse.c"
        var $906=HEAP[$tagNamePtr_addr]; //@line 2901 "xmlparse.c"
        var $907=(($906+8)&4294967295); //@line 2901 "xmlparse.c"
        HEAP[$907]=$905; //@line 2901 "xmlparse.c"
        var $908=HEAP[$tagNamePtr_addr]; //@line 2902 "xmlparse.c"
        var $909=(($908+20)&4294967295); //@line 2902 "xmlparse.c"
        var $910=HEAP[$prefixLen]; //@line 2902 "xmlparse.c"
        HEAP[$909]=$910; //@line 2902 "xmlparse.c"
        HEAP[$i]=0; //@line 2903 "xmlparse.c"
        __label__ = 150; break; //@line 2903 "xmlparse.c"
      case 150: // $bb163
        var $911=HEAP[$localPart]; //@line 2903 "xmlparse.c"
        var $912=HEAP[$i]; //@line 2903 "xmlparse.c"
        var $913=(($911+$912)&4294967295); //@line 2903 "xmlparse.c"
        var $914=HEAP[$913]; //@line 2903 "xmlparse.c"
        var $915=reSign(($914), 8, 0)!=0; //@line 2903 "xmlparse.c"
        var $916=unSign(($915), 1, 0); //@line 2903 "xmlparse.c"
        var $917=HEAP[$i]; //@line 2903 "xmlparse.c"
        var $918=((($917) + 1)&4294967295); //@line 2903 "xmlparse.c"
        HEAP[$i]=$918; //@line 2903 "xmlparse.c"
        var $toBool164=reSign(($916), 8, 0)!=0; //@line 2903 "xmlparse.c"
        if ($toBool164) { __label__ = 150; break; } else { __label__ = 151; break; } //@line 2903 "xmlparse.c"
      case 151: // $bb165
        var $919=HEAP[$binding]; //@line 2905 "xmlparse.c"
        var $920=(($919+20)&4294967295); //@line 2905 "xmlparse.c"
        var $921=HEAP[$920]; //@line 2905 "xmlparse.c"
        var $922=HEAP[$i]; //@line 2905 "xmlparse.c"
        var $923=((($921) + ($922))&4294967295); //@line 2905 "xmlparse.c"
        var $924=HEAP[$prefixLen]; //@line 2905 "xmlparse.c"
        var $925=((($923) + ($924))&4294967295); //@line 2905 "xmlparse.c"
        HEAP[$n]=$925; //@line 2905 "xmlparse.c"
        var $926=HEAP[$binding]; //@line 2906 "xmlparse.c"
        var $927=(($926+24)&4294967295); //@line 2906 "xmlparse.c"
        var $928=HEAP[$927]; //@line 2906 "xmlparse.c"
        var $929=HEAP[$n]; //@line 2906 "xmlparse.c"
        var $930=((($928))|0) < ((($929))|0); //@line 2906 "xmlparse.c"
        if ($930) { __label__ = 152; break; } else { __label__ = 160; break; } //@line 2906 "xmlparse.c"
      case 152: // $bb166
        var $931=HEAP[$parser_addr]; //@line 2908 "xmlparse.c"
        var $932=(($931+12)&4294967295); //@line 2908 "xmlparse.c"
        var $933=(($932)&4294967295); //@line 2908 "xmlparse.c"
        var $934=HEAP[$933]; //@line 2908 "xmlparse.c"
        var $935=HEAP[$n]; //@line 2908 "xmlparse.c"
        var $936=((($935) + 24)&4294967295); //@line 2908 "xmlparse.c"
        var $937=FUNCTION_TABLE[$934]($936); //@line 2908 "xmlparse.c"
        HEAP[$uri]=$937; //@line 2908 "xmlparse.c"
        var $938=HEAP[$uri]; //@line 2909 "xmlparse.c"
        var $939=($938)==0; //@line 2909 "xmlparse.c"
        if ($939) { __label__ = 153; break; } else { __label__ = 154; break; } //@line 2909 "xmlparse.c"
      case 153: // $bb167
        HEAP[$0]=1; //@line 2910 "xmlparse.c"
        __label__ = 163; break; //@line 2910 "xmlparse.c"
      case 154: // $bb168
        var $940=HEAP[$n]; //@line 2911 "xmlparse.c"
        var $941=((($940) + 24)&4294967295); //@line 2911 "xmlparse.c"
        var $942=HEAP[$binding]; //@line 2911 "xmlparse.c"
        var $943=(($942+24)&4294967295); //@line 2911 "xmlparse.c"
        HEAP[$943]=$941; //@line 2911 "xmlparse.c"
        var $944=HEAP[$binding]; //@line 2912 "xmlparse.c"
        var $945=(($944+20)&4294967295); //@line 2912 "xmlparse.c"
        var $946=HEAP[$945]; //@line 2912 "xmlparse.c"
        var $947=HEAP[$binding]; //@line 2912 "xmlparse.c"
        var $948=(($947+16)&4294967295); //@line 2912 "xmlparse.c"
        var $949=HEAP[$948]; //@line 2912 "xmlparse.c"
        var $950=HEAP[$uri]; //@line 2912 "xmlparse.c"
        _llvm_memcpy_p0i8_p0i8_i32($950, $949, $946, 1, 0); //@line 2912 "xmlparse.c"
        var $951=HEAP[$parser_addr]; //@line 2913 "xmlparse.c"
        var $952=(($951+348)&4294967295); //@line 2913 "xmlparse.c"
        var $953=HEAP[$952]; //@line 2913 "xmlparse.c"
        HEAP[$p]=$953; //@line 2913 "xmlparse.c"
        __label__ = 158; break; //@line 2913 "xmlparse.c"
      case 155: // $bb169
        var $954=HEAP[$p]; //@line 2914 "xmlparse.c"
        var $955=(($954+12)&4294967295); //@line 2914 "xmlparse.c"
        var $956=(($955)&4294967295); //@line 2914 "xmlparse.c"
        var $957=HEAP[$956]; //@line 2914 "xmlparse.c"
        var $958=HEAP[$binding]; //@line 2914 "xmlparse.c"
        var $959=(($958+16)&4294967295); //@line 2914 "xmlparse.c"
        var $960=HEAP[$959]; //@line 2914 "xmlparse.c"
        var $961=($957)==($960); //@line 2914 "xmlparse.c"
        if ($961) { __label__ = 156; break; } else { __label__ = 157; break; } //@line 2914 "xmlparse.c"
      case 156: // $bb170
        var $962=HEAP[$p]; //@line 2915 "xmlparse.c"
        var $963=(($962+12)&4294967295); //@line 2915 "xmlparse.c"
        var $964=(($963)&4294967295); //@line 2915 "xmlparse.c"
        var $965=HEAP[$uri]; //@line 2915 "xmlparse.c"
        HEAP[$964]=$965; //@line 2915 "xmlparse.c"
        __label__ = 157; break; //@line 2915 "xmlparse.c"
      case 157: // $bb171
        var $966=HEAP[$p]; //@line 2913 "xmlparse.c"
        var $967=(($966)&4294967295); //@line 2913 "xmlparse.c"
        var $968=HEAP[$967]; //@line 2913 "xmlparse.c"
        HEAP[$p]=$968; //@line 2913 "xmlparse.c"
        __label__ = 158; break; //@line 2913 "xmlparse.c"
      case 158: // $bb172
        var $969=HEAP[$p]; //@line 2913 "xmlparse.c"
        var $970=($969)!=0; //@line 2913 "xmlparse.c"
        if ($970) { __label__ = 155; break; } else { __label__ = 159; break; } //@line 2913 "xmlparse.c"
      case 159: // $bb173
        var $971=HEAP[$parser_addr]; //@line 2916 "xmlparse.c"
        var $972=(($971+12)&4294967295); //@line 2916 "xmlparse.c"
        var $973=(($972+8)&4294967295); //@line 2916 "xmlparse.c"
        var $974=HEAP[$973]; //@line 2916 "xmlparse.c"
        var $975=HEAP[$binding]; //@line 2916 "xmlparse.c"
        var $976=(($975+16)&4294967295); //@line 2916 "xmlparse.c"
        var $977=HEAP[$976]; //@line 2916 "xmlparse.c"
        FUNCTION_TABLE[$974]($977); //@line 2916 "xmlparse.c"
        var $978=HEAP[$binding]; //@line 2917 "xmlparse.c"
        var $979=(($978+16)&4294967295); //@line 2917 "xmlparse.c"
        var $980=HEAP[$uri]; //@line 2917 "xmlparse.c"
        HEAP[$979]=$980; //@line 2917 "xmlparse.c"
        __label__ = 160; break; //@line 2917 "xmlparse.c"
      case 160: // $bb174
        var $981=HEAP[$binding]; //@line 2920 "xmlparse.c"
        var $982=(($981+16)&4294967295); //@line 2920 "xmlparse.c"
        var $983=HEAP[$982]; //@line 2920 "xmlparse.c"
        var $984=HEAP[$binding]; //@line 2920 "xmlparse.c"
        var $985=(($984+20)&4294967295); //@line 2920 "xmlparse.c"
        var $986=HEAP[$985]; //@line 2920 "xmlparse.c"
        var $987=(($983+$986)&4294967295); //@line 2920 "xmlparse.c"
        HEAP[$uri]=$987; //@line 2920 "xmlparse.c"
        var $988=HEAP[$i]; //@line 2921 "xmlparse.c"
        var $989=HEAP[$uri]; //@line 2921 "xmlparse.c"
        var $990=HEAP[$localPart]; //@line 2921 "xmlparse.c"
        _llvm_memcpy_p0i8_p0i8_i32($989, $990, $988, 1, 0); //@line 2921 "xmlparse.c"
        var $991=HEAP[$prefixLen]; //@line 2923 "xmlparse.c"
        var $992=((($991))|0)!=0; //@line 2923 "xmlparse.c"
        if ($992) { __label__ = 161; break; } else { __label__ = 162; break; } //@line 2923 "xmlparse.c"
      case 161: // $bb175
        var $993=HEAP[$i]; //@line 2924 "xmlparse.c"
        var $994=((($993) - 1)&4294967295); //@line 2924 "xmlparse.c"
        var $995=HEAP[$uri]; //@line 2924 "xmlparse.c"
        var $996=(($995+$994)&4294967295); //@line 2924 "xmlparse.c"
        HEAP[$uri]=$996; //@line 2924 "xmlparse.c"
        var $997=HEAP[$parser_addr]; //@line 2925 "xmlparse.c"
        var $998=(($997+456)&4294967295); //@line 2925 "xmlparse.c"
        var $999=HEAP[$998]; //@line 2925 "xmlparse.c"
        var $1000=HEAP[$uri]; //@line 2925 "xmlparse.c"
        HEAP[$1000]=$999; //@line 2925 "xmlparse.c"
        var $1001=HEAP[$prefixLen]; //@line 2926 "xmlparse.c"
        var $1002=HEAP[$binding]; //@line 2926 "xmlparse.c"
        var $1003=(($1002)&4294967295); //@line 2926 "xmlparse.c"
        var $1004=HEAP[$1003]; //@line 2926 "xmlparse.c"
        var $1005=(($1004)&4294967295); //@line 2926 "xmlparse.c"
        var $1006=HEAP[$1005]; //@line 2926 "xmlparse.c"
        var $1007=HEAP[$uri]; //@line 2926 "xmlparse.c"
        var $1008=(($1007+1)&4294967295); //@line 2926 "xmlparse.c"
        _llvm_memcpy_p0i8_p0i8_i32($1008, $1006, $1001, 1, 0); //@line 2926 "xmlparse.c"
        __label__ = 162; break; //@line 2926 "xmlparse.c"
      case 162: // $bb176
        var $1009=HEAP[$binding]; //@line 2928 "xmlparse.c"
        var $1010=(($1009+16)&4294967295); //@line 2928 "xmlparse.c"
        var $1011=HEAP[$1010]; //@line 2928 "xmlparse.c"
        var $1012=HEAP[$tagNamePtr_addr]; //@line 2928 "xmlparse.c"
        var $1013=(($1012)&4294967295); //@line 2928 "xmlparse.c"
        HEAP[$1013]=$1011; //@line 2928 "xmlparse.c"
        HEAP[$0]=0; //@line 2929 "xmlparse.c"
        __label__ = 163; break; //@line 2929 "xmlparse.c"
      case 163: // $bb177
        var $1014=HEAP[$0]; //@line 2625 "xmlparse.c"
        HEAP[$retval]=$1014; //@line 2625 "xmlparse.c"
        __label__ = 164; break; //@line 2625 "xmlparse.c"
      case 164: // $return
        var $retval178=HEAP[$retval]; //@line 2625 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval178; //@line 2625 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _addBinding($parser, $prefix, $attId, $uri, $bindingsPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 59; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 59);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $prefix_addr=__stackBase__+4;
        var $attId_addr=__stackBase__+8;
        var $uri_addr=__stackBase__+12;
        var $bindingsPtr_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $iftmp_125=__stackBase__+24;
        var $iftmp_123=__stackBase__+28;
        var $iftmp_121=__stackBase__+32;
        var $iftmp_119=__stackBase__+36;
        var $0=__stackBase__+40;
        var $mustBeXML=__stackBase__+44;
        var $isXML=__stackBase__+45;
        var $isXMLNS=__stackBase__+46;
        var $b=__stackBase__+47;
        var $len=__stackBase__+51;
        var $temp=__stackBase__+55;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$prefix_addr]=$prefix;
        HEAP[$attId_addr]=$attId;
        HEAP[$uri_addr]=$uri;
        HEAP[$bindingsPtr_addr]=$bindingsPtr;
        HEAP[$mustBeXML]=0; //@line 2955 "xmlparse.c"
        HEAP[$isXML]=1; //@line 2956 "xmlparse.c"
        HEAP[$isXMLNS]=1; //@line 2957 "xmlparse.c"
        var $1=HEAP[$uri_addr]; //@line 2963 "xmlparse.c"
        var $2=HEAP[$1]; //@line 2963 "xmlparse.c"
        var $3=reSign(($2), 8, 0)==0; //@line 2963 "xmlparse.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 2963 "xmlparse.c"
      case 1: // $bb
        var $4=HEAP[$prefix_addr]; //@line 2963 "xmlparse.c"
        var $5=(($4)&4294967295); //@line 2963 "xmlparse.c"
        var $6=HEAP[$5]; //@line 2963 "xmlparse.c"
        var $7=($6)!=0; //@line 2963 "xmlparse.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2963 "xmlparse.c"
      case 2: // $bb1
        HEAP[$0]=28; //@line 2964 "xmlparse.c"
        __label__ = 66; break; //@line 2964 "xmlparse.c"
      case 3: // $bb2
        var $8=HEAP[$prefix_addr]; //@line 2966 "xmlparse.c"
        var $9=(($8)&4294967295); //@line 2966 "xmlparse.c"
        var $10=HEAP[$9]; //@line 2966 "xmlparse.c"
        var $11=($10)!=0; //@line 2966 "xmlparse.c"
        if ($11) { __label__ = 4; break; } else { __label__ = 13; break; } //@line 2966 "xmlparse.c"
      case 4: // $bb3
        var $12=HEAP[$prefix_addr]; //@line 2966 "xmlparse.c"
        var $13=(($12)&4294967295); //@line 2966 "xmlparse.c"
        var $14=HEAP[$13]; //@line 2966 "xmlparse.c"
        var $15=(($14)&4294967295); //@line 2966 "xmlparse.c"
        var $16=HEAP[$15]; //@line 2966 "xmlparse.c"
        var $17=reSign(($16), 8, 0)==120; //@line 2966 "xmlparse.c"
        if ($17) { __label__ = 5; break; } else { __label__ = 13; break; } //@line 2966 "xmlparse.c"
      case 5: // $bb4
        var $18=HEAP[$prefix_addr]; //@line 2966 "xmlparse.c"
        var $19=(($18)&4294967295); //@line 2966 "xmlparse.c"
        var $20=HEAP[$19]; //@line 2966 "xmlparse.c"
        var $21=(($20+1)&4294967295); //@line 2966 "xmlparse.c"
        var $22=HEAP[$21]; //@line 2966 "xmlparse.c"
        var $23=reSign(($22), 8, 0)==109; //@line 2966 "xmlparse.c"
        if ($23) { __label__ = 6; break; } else { __label__ = 13; break; } //@line 2966 "xmlparse.c"
      case 6: // $bb5
        var $24=HEAP[$prefix_addr]; //@line 2966 "xmlparse.c"
        var $25=(($24)&4294967295); //@line 2966 "xmlparse.c"
        var $26=HEAP[$25]; //@line 2966 "xmlparse.c"
        var $27=(($26+2)&4294967295); //@line 2966 "xmlparse.c"
        var $28=HEAP[$27]; //@line 2966 "xmlparse.c"
        var $29=reSign(($28), 8, 0)==108; //@line 2966 "xmlparse.c"
        if ($29) { __label__ = 7; break; } else { __label__ = 13; break; } //@line 2966 "xmlparse.c"
      case 7: // $bb6
        var $30=HEAP[$prefix_addr]; //@line 2972 "xmlparse.c"
        var $31=(($30)&4294967295); //@line 2972 "xmlparse.c"
        var $32=HEAP[$31]; //@line 2972 "xmlparse.c"
        var $33=(($32+3)&4294967295); //@line 2972 "xmlparse.c"
        var $34=HEAP[$33]; //@line 2972 "xmlparse.c"
        var $35=reSign(($34), 8, 0)==110; //@line 2972 "xmlparse.c"
        if ($35) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 2972 "xmlparse.c"
      case 8: // $bb7
        var $36=HEAP[$prefix_addr]; //@line 2972 "xmlparse.c"
        var $37=(($36)&4294967295); //@line 2972 "xmlparse.c"
        var $38=HEAP[$37]; //@line 2972 "xmlparse.c"
        var $39=(($38+4)&4294967295); //@line 2972 "xmlparse.c"
        var $40=HEAP[$39]; //@line 2972 "xmlparse.c"
        var $41=reSign(($40), 8, 0)==115; //@line 2972 "xmlparse.c"
        if ($41) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 2972 "xmlparse.c"
      case 9: // $bb8
        var $42=HEAP[$prefix_addr]; //@line 2972 "xmlparse.c"
        var $43=(($42)&4294967295); //@line 2972 "xmlparse.c"
        var $44=HEAP[$43]; //@line 2972 "xmlparse.c"
        var $45=(($44+5)&4294967295); //@line 2972 "xmlparse.c"
        var $46=HEAP[$45]; //@line 2972 "xmlparse.c"
        var $47=reSign(($46), 8, 0)==0; //@line 2972 "xmlparse.c"
        if ($47) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 2972 "xmlparse.c"
      case 10: // $bb9
        HEAP[$0]=39; //@line 2975 "xmlparse.c"
        __label__ = 66; break; //@line 2975 "xmlparse.c"
      case 11: // $bb10
        var $48=HEAP[$prefix_addr]; //@line 2977 "xmlparse.c"
        var $49=(($48)&4294967295); //@line 2977 "xmlparse.c"
        var $50=HEAP[$49]; //@line 2977 "xmlparse.c"
        var $51=(($50+3)&4294967295); //@line 2977 "xmlparse.c"
        var $52=HEAP[$51]; //@line 2977 "xmlparse.c"
        var $53=reSign(($52), 8, 0)==0; //@line 2977 "xmlparse.c"
        if ($53) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 2977 "xmlparse.c"
      case 12: // $bb11
        HEAP[$mustBeXML]=1; //@line 2978 "xmlparse.c"
        __label__ = 13; break; //@line 2978 "xmlparse.c"
      case 13: // $bb12
        HEAP[$len]=0; //@line 2981 "xmlparse.c"
        __label__ = 24; break; //@line 2981 "xmlparse.c"
      case 14: // $bb13
        var $54=HEAP[$isXML]; //@line 2982 "xmlparse.c"
        var $55=reSign(($54), 8, 0)!=0; //@line 2982 "xmlparse.c"
        if ($55) { __label__ = 15; break; } else { __label__ = 18; break; } //@line 2982 "xmlparse.c"
      case 15: // $bb14
        var $56=HEAP[_xmlLen_5100]; //@line 2982 "xmlparse.c"
        var $57=HEAP[$len]; //@line 2982 "xmlparse.c"
        var $58=((($57))|0) > ((($56))|0); //@line 2982 "xmlparse.c"
        if ($58) { __label__ = 17; break; } else { __label__ = 16; break; } //@line 2982 "xmlparse.c"
      case 16: // $bb15
        var $59=HEAP[$uri_addr]; //@line 2982 "xmlparse.c"
        var $60=HEAP[$len]; //@line 2982 "xmlparse.c"
        var $61=(($59+$60)&4294967295); //@line 2982 "xmlparse.c"
        var $62=HEAP[$61]; //@line 2982 "xmlparse.c"
        var $63=HEAP[$len]; //@line 2982 "xmlparse.c"
        var $64=((_xmlNamespace_5099+$63)&4294967295); //@line 2982 "xmlparse.c"
        var $65=HEAP[$64]; //@line 2982 "xmlparse.c"
        var $66=reSign(($62), 8, 0)!=reSign(($65), 8, 0); //@line 2982 "xmlparse.c"
        if ($66) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 2982 "xmlparse.c"
      case 17: // $bb16
        HEAP[$isXML]=0; //@line 2983 "xmlparse.c"
        __label__ = 18; break; //@line 2983 "xmlparse.c"
      case 18: // $bb17
        var $67=HEAP[$mustBeXML]; //@line 2985 "xmlparse.c"
        var $68=reSign(($67), 8, 0)==0; //@line 2985 "xmlparse.c"
        if ($68) { __label__ = 19; break; } else { __label__ = 23; break; } //@line 2985 "xmlparse.c"
      case 19: // $bb18
        var $69=HEAP[$isXMLNS]; //@line 2985 "xmlparse.c"
        var $70=reSign(($69), 8, 0)!=0; //@line 2985 "xmlparse.c"
        if ($70) { __label__ = 20; break; } else { __label__ = 23; break; } //@line 2985 "xmlparse.c"
      case 20: // $bb19
        var $71=HEAP[_xmlnsLen_5102]; //@line 2985 "xmlparse.c"
        var $72=HEAP[$len]; //@line 2985 "xmlparse.c"
        var $73=((($72))|0) > ((($71))|0); //@line 2985 "xmlparse.c"
        if ($73) { __label__ = 22; break; } else { __label__ = 21; break; } //@line 2985 "xmlparse.c"
      case 21: // $bb20
        var $74=HEAP[$uri_addr]; //@line 2985 "xmlparse.c"
        var $75=HEAP[$len]; //@line 2985 "xmlparse.c"
        var $76=(($74+$75)&4294967295); //@line 2985 "xmlparse.c"
        var $77=HEAP[$76]; //@line 2985 "xmlparse.c"
        var $78=HEAP[$len]; //@line 2985 "xmlparse.c"
        var $79=((_xmlnsNamespace_5101+$78)&4294967295); //@line 2985 "xmlparse.c"
        var $80=HEAP[$79]; //@line 2985 "xmlparse.c"
        var $81=reSign(($77), 8, 0)!=reSign(($80), 8, 0); //@line 2985 "xmlparse.c"
        if ($81) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 2985 "xmlparse.c"
      case 22: // $bb21
        HEAP[$isXMLNS]=0; //@line 2987 "xmlparse.c"
        __label__ = 23; break; //@line 2987 "xmlparse.c"
      case 23: // $bb22
        var $82=HEAP[$len]; //@line 2981 "xmlparse.c"
        var $83=((($82) + 1)&4294967295); //@line 2981 "xmlparse.c"
        HEAP[$len]=$83; //@line 2981 "xmlparse.c"
        __label__ = 24; break; //@line 2981 "xmlparse.c"
      case 24: // $bb23
        var $84=HEAP[$uri_addr]; //@line 2981 "xmlparse.c"
        var $85=HEAP[$len]; //@line 2981 "xmlparse.c"
        var $86=(($84+$85)&4294967295); //@line 2981 "xmlparse.c"
        var $87=HEAP[$86]; //@line 2981 "xmlparse.c"
        var $88=reSign(($87), 8, 0)!=0; //@line 2981 "xmlparse.c"
        if ($88) { __label__ = 14; break; } else { __label__ = 25; break; } //@line 2981 "xmlparse.c"
      case 25: // $bb24
        var $89=HEAP[$isXML]; //@line 2989 "xmlparse.c"
        var $90=reSign(($89), 8, 0)==0; //@line 2989 "xmlparse.c"
        if ($90) { __label__ = 28; break; } else { __label__ = 26; break; } //@line 2989 "xmlparse.c"
      case 26: // $bb25
        var $91=HEAP[_xmlLen_5100]; //@line 2989 "xmlparse.c"
        var $92=HEAP[$len]; //@line 2989 "xmlparse.c"
        var $93=((($92))|0)!=((($91))|0); //@line 2989 "xmlparse.c"
        if ($93) { __label__ = 28; break; } else { __label__ = 27; break; } //@line 2989 "xmlparse.c"
      case 27: // $bb26
        HEAP[$iftmp_119]=1; //@line 2989 "xmlparse.c"
        __label__ = 29; break; //@line 2989 "xmlparse.c"
      case 28: // $bb27
        HEAP[$iftmp_119]=0; //@line 2989 "xmlparse.c"
        __label__ = 29; break; //@line 2989 "xmlparse.c"
      case 29: // $bb28
        var $94=HEAP[$iftmp_119]; //@line 2989 "xmlparse.c"
        var $95=((($94)) & 255); //@line 2989 "xmlparse.c"
        HEAP[$isXML]=$95; //@line 2989 "xmlparse.c"
        var $96=HEAP[$isXMLNS]; //@line 2990 "xmlparse.c"
        var $97=reSign(($96), 8, 0)==0; //@line 2990 "xmlparse.c"
        if ($97) { __label__ = 32; break; } else { __label__ = 30; break; } //@line 2990 "xmlparse.c"
      case 30: // $bb29
        var $98=HEAP[_xmlnsLen_5102]; //@line 2990 "xmlparse.c"
        var $99=HEAP[$len]; //@line 2990 "xmlparse.c"
        var $100=((($99))|0)!=((($98))|0); //@line 2990 "xmlparse.c"
        if ($100) { __label__ = 32; break; } else { __label__ = 31; break; } //@line 2990 "xmlparse.c"
      case 31: // $bb30
        HEAP[$iftmp_121]=1; //@line 2990 "xmlparse.c"
        __label__ = 33; break; //@line 2990 "xmlparse.c"
      case 32: // $bb31
        HEAP[$iftmp_121]=0; //@line 2990 "xmlparse.c"
        __label__ = 33; break; //@line 2990 "xmlparse.c"
      case 33: // $bb32
        var $101=HEAP[$iftmp_121]; //@line 2990 "xmlparse.c"
        var $102=((($101)) & 255); //@line 2990 "xmlparse.c"
        HEAP[$isXMLNS]=$102; //@line 2990 "xmlparse.c"
        var $103=HEAP[$mustBeXML]; //@line 2992 "xmlparse.c"
        var $104=HEAP[$isXML]; //@line 2992 "xmlparse.c"
        var $105=reSign(($103), 8, 0)!=reSign(($104), 8, 0); //@line 2992 "xmlparse.c"
        if ($105) { __label__ = 34; break; } else { __label__ = 38; break; } //@line 2992 "xmlparse.c"
      case 34: // $bb33
        var $106=HEAP[$mustBeXML]; //@line 2993 "xmlparse.c"
        var $107=reSign(($106), 8, 0)!=0; //@line 2993 "xmlparse.c"
        if ($107) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 2993 "xmlparse.c"
      case 35: // $bb34
        HEAP[$iftmp_123]=38; //@line 2993 "xmlparse.c"
        __label__ = 37; break; //@line 2993 "xmlparse.c"
      case 36: // $bb35
        HEAP[$iftmp_123]=40; //@line 2993 "xmlparse.c"
        __label__ = 37; break; //@line 2993 "xmlparse.c"
      case 37: // $bb36
        var $108=HEAP[$iftmp_123]; //@line 2993 "xmlparse.c"
        HEAP[$0]=$108; //@line 2993 "xmlparse.c"
        __label__ = 66; break; //@line 2993 "xmlparse.c"
      case 38: // $bb37
        var $109=HEAP[$isXMLNS]; //@line 2996 "xmlparse.c"
        var $110=reSign(($109), 8, 0)!=0; //@line 2996 "xmlparse.c"
        if ($110) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 2996 "xmlparse.c"
      case 39: // $bb38
        HEAP[$0]=40; //@line 2997 "xmlparse.c"
        __label__ = 66; break; //@line 2997 "xmlparse.c"
      case 40: // $bb39
        var $111=HEAP[$parser_addr]; //@line 2999 "xmlparse.c"
        var $112=(($111+456)&4294967295); //@line 2999 "xmlparse.c"
        var $113=HEAP[$112]; //@line 2999 "xmlparse.c"
        var $114=reSign(($113), 8, 0)!=0; //@line 2999 "xmlparse.c"
        if ($114) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 2999 "xmlparse.c"
      case 41: // $bb40
        var $115=HEAP[$len]; //@line 3000 "xmlparse.c"
        var $116=((($115) + 1)&4294967295); //@line 3000 "xmlparse.c"
        HEAP[$len]=$116; //@line 3000 "xmlparse.c"
        __label__ = 42; break; //@line 3000 "xmlparse.c"
      case 42: // $bb41
        var $117=HEAP[$parser_addr]; //@line 3001 "xmlparse.c"
        var $118=(($117+360)&4294967295); //@line 3001 "xmlparse.c"
        var $119=HEAP[$118]; //@line 3001 "xmlparse.c"
        var $120=($119)!=0; //@line 3001 "xmlparse.c"
        if ($120) { __label__ = 43; break; } else { __label__ = 48; break; } //@line 3001 "xmlparse.c"
      case 43: // $bb42
        var $121=HEAP[$parser_addr]; //@line 3002 "xmlparse.c"
        var $122=(($121+360)&4294967295); //@line 3002 "xmlparse.c"
        var $123=HEAP[$122]; //@line 3002 "xmlparse.c"
        HEAP[$b]=$123; //@line 3002 "xmlparse.c"
        var $124=HEAP[$b]; //@line 3003 "xmlparse.c"
        var $125=(($124+24)&4294967295); //@line 3003 "xmlparse.c"
        var $126=HEAP[$125]; //@line 3003 "xmlparse.c"
        var $127=HEAP[$len]; //@line 3003 "xmlparse.c"
        var $128=((($126))|0) < ((($127))|0); //@line 3003 "xmlparse.c"
        if ($128) { __label__ = 44; break; } else { __label__ = 47; break; } //@line 3003 "xmlparse.c"
      case 44: // $bb43
        var $129=HEAP[$parser_addr]; //@line 3004 "xmlparse.c"
        var $130=(($129+12)&4294967295); //@line 3004 "xmlparse.c"
        var $131=(($130+4)&4294967295); //@line 3004 "xmlparse.c"
        var $132=HEAP[$131]; //@line 3004 "xmlparse.c"
        var $133=HEAP[$len]; //@line 3004 "xmlparse.c"
        var $134=((($133) + 24)&4294967295); //@line 3004 "xmlparse.c"
        var $135=HEAP[$b]; //@line 3004 "xmlparse.c"
        var $136=(($135+16)&4294967295); //@line 3004 "xmlparse.c"
        var $137=HEAP[$136]; //@line 3004 "xmlparse.c"
        var $138=FUNCTION_TABLE[$132]($137, $134); //@line 3004 "xmlparse.c"
        HEAP[$temp]=$138; //@line 3004 "xmlparse.c"
        var $139=HEAP[$temp]; //@line 3006 "xmlparse.c"
        var $140=($139)==0; //@line 3006 "xmlparse.c"
        if ($140) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 3006 "xmlparse.c"
      case 45: // $bb44
        HEAP[$0]=1; //@line 3007 "xmlparse.c"
        __label__ = 66; break; //@line 3007 "xmlparse.c"
      case 46: // $bb45
        var $141=HEAP[$b]; //@line 3008 "xmlparse.c"
        var $142=(($141+16)&4294967295); //@line 3008 "xmlparse.c"
        var $143=HEAP[$temp]; //@line 3008 "xmlparse.c"
        HEAP[$142]=$143; //@line 3008 "xmlparse.c"
        var $144=HEAP[$len]; //@line 3009 "xmlparse.c"
        var $145=((($144) + 24)&4294967295); //@line 3009 "xmlparse.c"
        var $146=HEAP[$b]; //@line 3009 "xmlparse.c"
        var $147=(($146+24)&4294967295); //@line 3009 "xmlparse.c"
        HEAP[$147]=$145; //@line 3009 "xmlparse.c"
        __label__ = 47; break; //@line 3009 "xmlparse.c"
      case 47: // $bb46
        var $148=HEAP[$b]; //@line 3011 "xmlparse.c"
        var $149=(($148+4)&4294967295); //@line 3011 "xmlparse.c"
        var $150=HEAP[$149]; //@line 3011 "xmlparse.c"
        var $151=HEAP[$parser_addr]; //@line 3011 "xmlparse.c"
        var $152=(($151+360)&4294967295); //@line 3011 "xmlparse.c"
        HEAP[$152]=$150; //@line 3011 "xmlparse.c"
        __label__ = 53; break; //@line 3011 "xmlparse.c"
      case 48: // $bb47
        var $153=HEAP[$parser_addr]; //@line 3014 "xmlparse.c"
        var $154=(($153+12)&4294967295); //@line 3014 "xmlparse.c"
        var $155=(($154)&4294967295); //@line 3014 "xmlparse.c"
        var $156=HEAP[$155]; //@line 3014 "xmlparse.c"
        var $157=FUNCTION_TABLE[$156](28); //@line 3014 "xmlparse.c"
        var $158=$157; //@line 3014 "xmlparse.c"
        HEAP[$b]=$158; //@line 3014 "xmlparse.c"
        var $159=HEAP[$b]; //@line 3015 "xmlparse.c"
        var $160=($159)==0; //@line 3015 "xmlparse.c"
        if ($160) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 3015 "xmlparse.c"
      case 49: // $bb48
        HEAP[$0]=1; //@line 3016 "xmlparse.c"
        __label__ = 66; break; //@line 3016 "xmlparse.c"
      case 50: // $bb49
        var $161=HEAP[$parser_addr]; //@line 3017 "xmlparse.c"
        var $162=(($161+12)&4294967295); //@line 3017 "xmlparse.c"
        var $163=(($162)&4294967295); //@line 3017 "xmlparse.c"
        var $164=HEAP[$163]; //@line 3017 "xmlparse.c"
        var $165=HEAP[$len]; //@line 3017 "xmlparse.c"
        var $166=((($165) + 24)&4294967295); //@line 3017 "xmlparse.c"
        var $167=FUNCTION_TABLE[$164]($166); //@line 3017 "xmlparse.c"
        var $168=HEAP[$b]; //@line 3017 "xmlparse.c"
        var $169=(($168+16)&4294967295); //@line 3017 "xmlparse.c"
        HEAP[$169]=$167; //@line 3017 "xmlparse.c"
        var $170=HEAP[$b]; //@line 3018 "xmlparse.c"
        var $171=(($170+16)&4294967295); //@line 3018 "xmlparse.c"
        var $172=HEAP[$171]; //@line 3018 "xmlparse.c"
        var $173=($172)==0; //@line 3018 "xmlparse.c"
        if ($173) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 3018 "xmlparse.c"
      case 51: // $bb50
        var $174=HEAP[$parser_addr]; //@line 3019 "xmlparse.c"
        var $175=(($174+12)&4294967295); //@line 3019 "xmlparse.c"
        var $176=(($175+8)&4294967295); //@line 3019 "xmlparse.c"
        var $177=HEAP[$176]; //@line 3019 "xmlparse.c"
        var $178=HEAP[$b]; //@line 3019 "xmlparse.c"
        var $179=$178; //@line 3019 "xmlparse.c"
        FUNCTION_TABLE[$177]($179); //@line 3019 "xmlparse.c"
        HEAP[$0]=1; //@line 3020 "xmlparse.c"
        __label__ = 66; break; //@line 3020 "xmlparse.c"
      case 52: // $bb51
        var $180=HEAP[$len]; //@line 3022 "xmlparse.c"
        var $181=((($180) + 24)&4294967295); //@line 3022 "xmlparse.c"
        var $182=HEAP[$b]; //@line 3022 "xmlparse.c"
        var $183=(($182+24)&4294967295); //@line 3022 "xmlparse.c"
        HEAP[$183]=$181; //@line 3022 "xmlparse.c"
        __label__ = 53; break; //@line 3022 "xmlparse.c"
      case 53: // $bb52
        var $184=HEAP[$b]; //@line 3024 "xmlparse.c"
        var $185=(($184+20)&4294967295); //@line 3024 "xmlparse.c"
        var $186=HEAP[$len]; //@line 3024 "xmlparse.c"
        HEAP[$185]=$186; //@line 3024 "xmlparse.c"
        var $187=HEAP[$len]; //@line 3025 "xmlparse.c"
        var $188=HEAP[$b]; //@line 3025 "xmlparse.c"
        var $189=(($188+16)&4294967295); //@line 3025 "xmlparse.c"
        var $190=HEAP[$189]; //@line 3025 "xmlparse.c"
        var $191=HEAP[$uri_addr]; //@line 3025 "xmlparse.c"
        _llvm_memcpy_p0i8_p0i8_i32($190, $191, $187, 1, 0); //@line 3025 "xmlparse.c"
        var $192=HEAP[$parser_addr]; //@line 3026 "xmlparse.c"
        var $193=(($192+456)&4294967295); //@line 3026 "xmlparse.c"
        var $194=HEAP[$193]; //@line 3026 "xmlparse.c"
        var $195=reSign(($194), 8, 0)!=0; //@line 3026 "xmlparse.c"
        if ($195) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 3026 "xmlparse.c"
      case 54: // $bb53
        var $196=HEAP[$b]; //@line 3027 "xmlparse.c"
        var $197=(($196+16)&4294967295); //@line 3027 "xmlparse.c"
        var $198=HEAP[$197]; //@line 3027 "xmlparse.c"
        var $199=HEAP[$len]; //@line 3027 "xmlparse.c"
        var $200=((($199) - 1)&4294967295); //@line 3027 "xmlparse.c"
        var $201=HEAP[$parser_addr]; //@line 3027 "xmlparse.c"
        var $202=(($201+456)&4294967295); //@line 3027 "xmlparse.c"
        var $203=HEAP[$202]; //@line 3027 "xmlparse.c"
        var $204=(($198+$200)&4294967295); //@line 3027 "xmlparse.c"
        HEAP[$204]=$203; //@line 3027 "xmlparse.c"
        __label__ = 55; break; //@line 3027 "xmlparse.c"
      case 55: // $bb54
        var $205=HEAP[$b]; //@line 3028 "xmlparse.c"
        var $206=(($205)&4294967295); //@line 3028 "xmlparse.c"
        var $207=HEAP[$prefix_addr]; //@line 3028 "xmlparse.c"
        HEAP[$206]=$207; //@line 3028 "xmlparse.c"
        var $208=HEAP[$b]; //@line 3029 "xmlparse.c"
        var $209=(($208+12)&4294967295); //@line 3029 "xmlparse.c"
        var $210=HEAP[$attId_addr]; //@line 3029 "xmlparse.c"
        HEAP[$209]=$210; //@line 3029 "xmlparse.c"
        var $211=HEAP[$prefix_addr]; //@line 3030 "xmlparse.c"
        var $212=(($211+4)&4294967295); //@line 3030 "xmlparse.c"
        var $213=HEAP[$212]; //@line 3030 "xmlparse.c"
        var $214=HEAP[$b]; //@line 3030 "xmlparse.c"
        var $215=(($214+8)&4294967295); //@line 3030 "xmlparse.c"
        HEAP[$215]=$213; //@line 3030 "xmlparse.c"
        var $216=HEAP[$uri_addr]; //@line 3032 "xmlparse.c"
        var $217=HEAP[$216]; //@line 3032 "xmlparse.c"
        var $218=reSign(($217), 8, 0)!=0; //@line 3032 "xmlparse.c"
        if ($218) { __label__ = 58; break; } else { __label__ = 56; break; } //@line 3032 "xmlparse.c"
      case 56: // $bb55
        var $219=HEAP[$parser_addr]; //@line 3032 "xmlparse.c"
        var $220=(($219+340)&4294967295); //@line 3032 "xmlparse.c"
        var $221=HEAP[$220]; //@line 3032 "xmlparse.c"
        var $222=(($221+132)&4294967295); //@line 3032 "xmlparse.c"
        var $223=HEAP[$prefix_addr]; //@line 3032 "xmlparse.c"
        var $224=($222)!=($223); //@line 3032 "xmlparse.c"
        if ($224) { __label__ = 58; break; } else { __label__ = 57; break; } //@line 3032 "xmlparse.c"
      case 57: // $bb56
        var $225=HEAP[$prefix_addr]; //@line 3033 "xmlparse.c"
        var $226=(($225+4)&4294967295); //@line 3033 "xmlparse.c"
        HEAP[$226]=0; //@line 3033 "xmlparse.c"
        __label__ = 59; break; //@line 3033 "xmlparse.c"
      case 58: // $bb57
        var $227=HEAP[$prefix_addr]; //@line 3035 "xmlparse.c"
        var $228=(($227+4)&4294967295); //@line 3035 "xmlparse.c"
        var $229=HEAP[$b]; //@line 3035 "xmlparse.c"
        HEAP[$228]=$229; //@line 3035 "xmlparse.c"
        __label__ = 59; break; //@line 3035 "xmlparse.c"
      case 59: // $bb58
        var $230=HEAP[$bindingsPtr_addr]; //@line 3036 "xmlparse.c"
        var $231=HEAP[$230]; //@line 3036 "xmlparse.c"
        var $232=HEAP[$b]; //@line 3036 "xmlparse.c"
        var $233=(($232+4)&4294967295); //@line 3036 "xmlparse.c"
        HEAP[$233]=$231; //@line 3036 "xmlparse.c"
        var $234=HEAP[$bindingsPtr_addr]; //@line 3037 "xmlparse.c"
        var $235=HEAP[$b]; //@line 3037 "xmlparse.c"
        HEAP[$234]=$235; //@line 3037 "xmlparse.c"
        var $236=HEAP[$attId_addr]; //@line 3039 "xmlparse.c"
        var $237=($236)!=0; //@line 3039 "xmlparse.c"
        if ($237) { __label__ = 60; break; } else { __label__ = 65; break; } //@line 3039 "xmlparse.c"
      case 60: // $bb59
        var $238=HEAP[$parser_addr]; //@line 3039 "xmlparse.c"
        var $239=(($238+100)&4294967295); //@line 3039 "xmlparse.c"
        var $240=HEAP[$239]; //@line 3039 "xmlparse.c"
        var $241=($240)!=0; //@line 3039 "xmlparse.c"
        if ($241) { __label__ = 61; break; } else { __label__ = 65; break; } //@line 3039 "xmlparse.c"
      case 61: // $bb60
        var $242=HEAP[$parser_addr]; //@line 3040 "xmlparse.c"
        var $243=(($242+100)&4294967295); //@line 3040 "xmlparse.c"
        var $244=HEAP[$243]; //@line 3040 "xmlparse.c"
        var $245=HEAP[$prefix_addr]; //@line 3040 "xmlparse.c"
        var $246=(($245+4)&4294967295); //@line 3040 "xmlparse.c"
        var $247=HEAP[$246]; //@line 3040 "xmlparse.c"
        var $248=($247)!=0; //@line 3040 "xmlparse.c"
        if ($248) { __label__ = 62; break; } else { __label__ = 63; break; } //@line 3040 "xmlparse.c"
      case 62: // $bb61
        var $249=HEAP[$uri_addr]; //@line 3040 "xmlparse.c"
        HEAP[$iftmp_125]=$249; //@line 3040 "xmlparse.c"
        __label__ = 64; break; //@line 3040 "xmlparse.c"
      case 63: // $bb62
        HEAP[$iftmp_125]=0; //@line 3040 "xmlparse.c"
        __label__ = 64; break; //@line 3040 "xmlparse.c"
      case 64: // $bb63
        var $250=HEAP[$prefix_addr]; //@line 3040 "xmlparse.c"
        var $251=(($250)&4294967295); //@line 3040 "xmlparse.c"
        var $252=HEAP[$251]; //@line 3040 "xmlparse.c"
        var $253=HEAP[$parser_addr]; //@line 3040 "xmlparse.c"
        var $254=(($253+4)&4294967295); //@line 3040 "xmlparse.c"
        var $255=HEAP[$254]; //@line 3040 "xmlparse.c"
        var $256=HEAP[$iftmp_125]; //@line 3040 "xmlparse.c"
        FUNCTION_TABLE[$244]($255, $252, $256); //@line 3040 "xmlparse.c"
        __label__ = 65; break; //@line 3040 "xmlparse.c"
      case 65: // $bb64
        HEAP[$0]=0; //@line 3042 "xmlparse.c"
        __label__ = 66; break; //@line 3042 "xmlparse.c"
      case 66: // $bb65
        var $257=HEAP[$0]; //@line 2964 "xmlparse.c"
        HEAP[$retval]=$257; //@line 2964 "xmlparse.c"
        __label__ = 67; break; //@line 2964 "xmlparse.c"
      case 67: // $return
        var $retval66=HEAP[$retval]; //@line 2964 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval66; //@line 2964 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _cdataSectionProcessor($parser, $start, $end, $endPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $start_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $endPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $result=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$start_addr]=$start;
        HEAP[$end_addr]=$end;
        HEAP[$endPtr_addr]=$endPtr;
        var $1=HEAP[$parser_addr]; //@line 3055 "xmlparse.c"
        var $2=(($1+464)&4294967295); //@line 3055 "xmlparse.c"
        var $3=(($2+4)&4294967295); //@line 3055 "xmlparse.c"
        var $4=HEAP[$3]; //@line 3055 "xmlparse.c"
        var $5=reSign(($4), 8, 0)==0; //@line 3055 "xmlparse.c"
        var $6=unSign(($5), 1, 0); //@line 3055 "xmlparse.c"
        var $7=HEAP[$parser_addr]; //@line 3055 "xmlparse.c"
        var $8=(($7+144)&4294967295); //@line 3055 "xmlparse.c"
        var $9=HEAP[$8]; //@line 3055 "xmlparse.c"
        var $10=HEAP[$parser_addr]; //@line 3055 "xmlparse.c"
        var $11=HEAP[$end_addr]; //@line 3055 "xmlparse.c"
        var $12=HEAP[$endPtr_addr]; //@line 3055 "xmlparse.c"
        var $13=((($6)) & 255); //@line 3055 "xmlparse.c"
        var $14=_doCdataSection($10, $9, $start_addr, $11, $12, $13); //@line 3055 "xmlparse.c"
        HEAP[$result]=$14; //@line 3055 "xmlparse.c"
        var $15=HEAP[$result]; //@line 3056 "xmlparse.c"
        var $16=((($15))|0)!=0; //@line 3056 "xmlparse.c"
        if ($16) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3056 "xmlparse.c"
      case 1: // $bb
        var $17=HEAP[$result]; //@line 3057 "xmlparse.c"
        HEAP[$0]=$17; //@line 3057 "xmlparse.c"
        __label__ = 7; break; //@line 3057 "xmlparse.c"
      case 2: // $bb1
        var $18=HEAP[$start_addr]; //@line 3058 "xmlparse.c"
        var $19=($18)!=0; //@line 3058 "xmlparse.c"
        if ($19) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 3058 "xmlparse.c"
      case 3: // $bb2
        var $20=HEAP[$parser_addr]; //@line 3059 "xmlparse.c"
        var $21=(($20+460)&4294967295); //@line 3059 "xmlparse.c"
        var $22=HEAP[$21]; //@line 3059 "xmlparse.c"
        var $23=($22)!=0; //@line 3059 "xmlparse.c"
        if ($23) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 3059 "xmlparse.c"
      case 4: // $bb3
        var $24=HEAP[$parser_addr]; //@line 3060 "xmlparse.c"
        var $25=(($24+264)&4294967295); //@line 3060 "xmlparse.c"
        HEAP[$25]=(FUNCTION_TABLE_OFFSET + 58); //@line 3060 "xmlparse.c"
        var $26=HEAP[$start_addr]; //@line 3061 "xmlparse.c"
        var $27=HEAP[$parser_addr]; //@line 3061 "xmlparse.c"
        var $28=HEAP[$end_addr]; //@line 3061 "xmlparse.c"
        var $29=HEAP[$endPtr_addr]; //@line 3061 "xmlparse.c"
        var $30=_externalEntityContentProcessor($27, $26, $28, $29); //@line 3061 "xmlparse.c"
        HEAP[$0]=$30; //@line 3061 "xmlparse.c"
        __label__ = 7; break; //@line 3061 "xmlparse.c"
      case 5: // $bb4
        var $31=HEAP[$parser_addr]; //@line 3064 "xmlparse.c"
        var $32=(($31+264)&4294967295); //@line 3064 "xmlparse.c"
        HEAP[$32]=(FUNCTION_TABLE_OFFSET + 62); //@line 3064 "xmlparse.c"
        var $33=HEAP[$start_addr]; //@line 3065 "xmlparse.c"
        var $34=HEAP[$parser_addr]; //@line 3065 "xmlparse.c"
        var $35=HEAP[$end_addr]; //@line 3065 "xmlparse.c"
        var $36=HEAP[$endPtr_addr]; //@line 3065 "xmlparse.c"
        var $37=_contentProcessor($34, $33, $35, $36); //@line 3065 "xmlparse.c"
        HEAP[$0]=$37; //@line 3065 "xmlparse.c"
        __label__ = 7; break; //@line 3065 "xmlparse.c"
      case 6: // $bb5
        var $38=HEAP[$result]; //@line 3068 "xmlparse.c"
        HEAP[$0]=$38; //@line 3068 "xmlparse.c"
        __label__ = 7; break; //@line 3068 "xmlparse.c"
      case 7: // $bb6
        var $39=HEAP[$0]; //@line 3057 "xmlparse.c"
        HEAP[$retval]=$39; //@line 3057 "xmlparse.c"
        __label__ = 8; break; //@line 3057 "xmlparse.c"
      case 8: // $return
        var $retval7=HEAP[$retval]; //@line 3057 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 3057 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _doCdataSection($parser, $enc, $startPtr, $end, $nextPtr, $haveMore) {
    var __stackBase__  = STACKTOP; STACKTOP += 54; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 54);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $enc_addr=__stackBase__+4;
        var $startPtr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $nextPtr_addr=__stackBase__+16;
        var $haveMore_addr=__stackBase__+20;
        var $retval=__stackBase__+21;
        var $0=__stackBase__+25;
        var $s=__stackBase__+29;
        var $eventPP=__stackBase__+33;
        var $eventEndPP=__stackBase__+37;
        var $next=__stackBase__+41;
        var $tok=__stackBase__+45;
        var $c=__stackBase__+49;
        var $dataPtr=__stackBase__+50;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$enc_addr]=$enc;
        HEAP[$startPtr_addr]=$startPtr;
        HEAP[$end_addr]=$end;
        HEAP[$nextPtr_addr]=$nextPtr;
        HEAP[$haveMore_addr]=$haveMore;
        var $1=HEAP[$startPtr_addr]; //@line 3082 "xmlparse.c"
        var $2=HEAP[$1]; //@line 3082 "xmlparse.c"
        HEAP[$s]=$2; //@line 3082 "xmlparse.c"
        var $3=HEAP[$parser_addr]; //@line 3085 "xmlparse.c"
        var $4=(($3+144)&4294967295); //@line 3085 "xmlparse.c"
        var $5=HEAP[$4]; //@line 3085 "xmlparse.c"
        var $6=HEAP[$enc_addr]; //@line 3085 "xmlparse.c"
        var $7=($5)==($6); //@line 3085 "xmlparse.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3085 "xmlparse.c"
      case 1: // $bb
        var $8=HEAP[$parser_addr]; //@line 3086 "xmlparse.c"
        var $9=(($8+272)&4294967295); //@line 3086 "xmlparse.c"
        HEAP[$eventPP]=$9; //@line 3086 "xmlparse.c"
        var $10=HEAP[$s]; //@line 3087 "xmlparse.c"
        var $11=HEAP[$eventPP]; //@line 3087 "xmlparse.c"
        HEAP[$11]=$10; //@line 3087 "xmlparse.c"
        var $12=HEAP[$parser_addr]; //@line 3088 "xmlparse.c"
        var $13=(($12+276)&4294967295); //@line 3088 "xmlparse.c"
        HEAP[$eventEndPP]=$13; //@line 3088 "xmlparse.c"
        __label__ = 3; break; //@line 3088 "xmlparse.c"
      case 2: // $bb1
        var $14=HEAP[$parser_addr]; //@line 3091 "xmlparse.c"
        var $15=(($14+284)&4294967295); //@line 3091 "xmlparse.c"
        var $16=HEAP[$15]; //@line 3091 "xmlparse.c"
        var $17=(($16)&4294967295); //@line 3091 "xmlparse.c"
        HEAP[$eventPP]=$17; //@line 3091 "xmlparse.c"
        var $18=HEAP[$parser_addr]; //@line 3092 "xmlparse.c"
        var $19=(($18+284)&4294967295); //@line 3092 "xmlparse.c"
        var $20=HEAP[$19]; //@line 3092 "xmlparse.c"
        var $21=(($20+4)&4294967295); //@line 3092 "xmlparse.c"
        HEAP[$eventEndPP]=$21; //@line 3092 "xmlparse.c"
        __label__ = 3; break; //@line 3092 "xmlparse.c"
      case 3: // $bb2
        var $22=HEAP[$s]; //@line 3094 "xmlparse.c"
        var $23=HEAP[$eventPP]; //@line 3094 "xmlparse.c"
        HEAP[$23]=$22; //@line 3094 "xmlparse.c"
        var $24=HEAP[$startPtr_addr]; //@line 3095 "xmlparse.c"
        HEAP[$24]=0; //@line 3095 "xmlparse.c"
        __label__ = 4; break; //@line 3095 "xmlparse.c"
      case 4: // $bb3
        var $25=HEAP[$enc_addr]; //@line 3099 "xmlparse.c"
        var $26=(($25)&4294967295); //@line 3099 "xmlparse.c"
        var $27=(($26+8)&4294967295); //@line 3099 "xmlparse.c"
        var $28=HEAP[$27]; //@line 3099 "xmlparse.c"
        var $29=HEAP[$s]; //@line 3099 "xmlparse.c"
        var $30=HEAP[$enc_addr]; //@line 3099 "xmlparse.c"
        var $31=HEAP[$end_addr]; //@line 3099 "xmlparse.c"
        var $32=FUNCTION_TABLE[$28]($30, $29, $31, $next); //@line 3099 "xmlparse.c"
        HEAP[$tok]=$32; //@line 3099 "xmlparse.c"
        var $33=HEAP[$next]; //@line 3100 "xmlparse.c"
        var $34=HEAP[$eventEndPP]; //@line 3100 "xmlparse.c"
        HEAP[$34]=$33; //@line 3100 "xmlparse.c"
        var $35=HEAP[$tok]; //@line 3101 "xmlparse.c"
        if ($35 == -4) {
          __label__ = 31; break;
        }
        else if ($35 == -2) {
          __label__ = 28; break;
        }
        else if ($35 == -1) {
          __label__ = 31; break;
        }
        else if ($35 == 0) {
          __label__ = 27; break;
        }
        else if ($35 == 6) {
          __label__ = 17; break;
        }
        else if ($35 == 7) {
          __label__ = 12; break;
        }
        else if ($35 == 40) {
          __label__ = 5; break;
        }
        else {
        __label__ = 34; break;
        }
        
      case 5: // $bb4
        var $36=HEAP[$parser_addr]; //@line 3103 "xmlparse.c"
        var $37=(($36+76)&4294967295); //@line 3103 "xmlparse.c"
        var $38=HEAP[$37]; //@line 3103 "xmlparse.c"
        var $39=($38)!=0; //@line 3103 "xmlparse.c"
        if ($39) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3103 "xmlparse.c"
      case 6: // $bb5
        var $40=HEAP[$parser_addr]; //@line 3104 "xmlparse.c"
        var $41=(($40+76)&4294967295); //@line 3104 "xmlparse.c"
        var $42=HEAP[$41]; //@line 3104 "xmlparse.c"
        var $43=HEAP[$parser_addr]; //@line 3104 "xmlparse.c"
        var $44=(($43+4)&4294967295); //@line 3104 "xmlparse.c"
        var $45=HEAP[$44]; //@line 3104 "xmlparse.c"
        FUNCTION_TABLE[$42]($45); //@line 3104 "xmlparse.c"
        __label__ = 9; break; //@line 3104 "xmlparse.c"
      case 7: // $bb6
        var $46=HEAP[$parser_addr]; //@line 3110 "xmlparse.c"
        var $47=(($46+80)&4294967295); //@line 3110 "xmlparse.c"
        var $48=HEAP[$47]; //@line 3110 "xmlparse.c"
        var $49=($48)!=0; //@line 3110 "xmlparse.c"
        if ($49) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3110 "xmlparse.c"
      case 8: // $bb7
        var $50=HEAP[$next]; //@line 3111 "xmlparse.c"
        var $51=HEAP[$s]; //@line 3111 "xmlparse.c"
        var $52=HEAP[$parser_addr]; //@line 3111 "xmlparse.c"
        var $53=HEAP[$enc_addr]; //@line 3111 "xmlparse.c"
        _reportDefault($52, $53, $51, $50); //@line 3111 "xmlparse.c"
        __label__ = 9; break; //@line 3111 "xmlparse.c"
      case 9: // $bb8
        var $54=HEAP[$next]; //@line 3112 "xmlparse.c"
        var $55=HEAP[$startPtr_addr]; //@line 3112 "xmlparse.c"
        HEAP[$55]=$54; //@line 3112 "xmlparse.c"
        var $56=HEAP[$next]; //@line 3113 "xmlparse.c"
        var $57=HEAP[$nextPtr_addr]; //@line 3113 "xmlparse.c"
        HEAP[$57]=$56; //@line 3113 "xmlparse.c"
        var $58=HEAP[$parser_addr]; //@line 3114 "xmlparse.c"
        var $59=(($58+464)&4294967295); //@line 3114 "xmlparse.c"
        var $60=(($59)&4294967295); //@line 3114 "xmlparse.c"
        var $61=HEAP[$60]; //@line 3114 "xmlparse.c"
        var $62=((($61))|0)==2; //@line 3114 "xmlparse.c"
        if ($62) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3114 "xmlparse.c"
      case 10: // $bb9
        HEAP[$0]=35; //@line 3115 "xmlparse.c"
        __label__ = 39; break; //@line 3115 "xmlparse.c"
      case 11: // $bb10
        HEAP[$0]=0; //@line 3117 "xmlparse.c"
        __label__ = 39; break; //@line 3117 "xmlparse.c"
      case 12: // $bb11
        var $63=HEAP[$parser_addr]; //@line 3119 "xmlparse.c"
        var $64=(($63+60)&4294967295); //@line 3119 "xmlparse.c"
        var $65=HEAP[$64]; //@line 3119 "xmlparse.c"
        var $66=($65)!=0; //@line 3119 "xmlparse.c"
        if ($66) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 3119 "xmlparse.c"
      case 13: // $bb12
        HEAP[$c]=10; //@line 3120 "xmlparse.c"
        var $67=HEAP[$parser_addr]; //@line 3121 "xmlparse.c"
        var $68=(($67+60)&4294967295); //@line 3121 "xmlparse.c"
        var $69=HEAP[$68]; //@line 3121 "xmlparse.c"
        var $70=HEAP[$parser_addr]; //@line 3121 "xmlparse.c"
        var $71=(($70+4)&4294967295); //@line 3121 "xmlparse.c"
        var $72=HEAP[$71]; //@line 3121 "xmlparse.c"
        FUNCTION_TABLE[$69]($72, $c, 1); //@line 3121 "xmlparse.c"
        __label__ = 16; break; //@line 3121 "xmlparse.c"
      case 14: // $bb13
        var $73=HEAP[$parser_addr]; //@line 3123 "xmlparse.c"
        var $74=(($73+80)&4294967295); //@line 3123 "xmlparse.c"
        var $75=HEAP[$74]; //@line 3123 "xmlparse.c"
        var $76=($75)!=0; //@line 3123 "xmlparse.c"
        if ($76) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 3123 "xmlparse.c"
      case 15: // $bb14
        var $77=HEAP[$next]; //@line 3124 "xmlparse.c"
        var $78=HEAP[$s]; //@line 3124 "xmlparse.c"
        var $79=HEAP[$parser_addr]; //@line 3124 "xmlparse.c"
        var $80=HEAP[$enc_addr]; //@line 3124 "xmlparse.c"
        _reportDefault($79, $80, $78, $77); //@line 3124 "xmlparse.c"
        __label__ = 16; break; //@line 3124 "xmlparse.c"
      case 16: // $bb15
        __label__ = 35; break; //@line 3124 "xmlparse.c"
      case 17: // $bb16
        var $81=HEAP[$parser_addr]; //@line 3127 "xmlparse.c"
        var $82=(($81+60)&4294967295); //@line 3127 "xmlparse.c"
        var $83=HEAP[$82]; //@line 3127 "xmlparse.c"
        var $84=($83)!=0; //@line 3127 "xmlparse.c"
        if ($84) { __label__ = 18; break; } else { __label__ = 24; break; } //@line 3127 "xmlparse.c"
      case 18: // $bb17
        var $85=HEAP[$enc_addr]; //@line 3128 "xmlparse.c"
        var $86=(($85+68)&4294967295); //@line 3128 "xmlparse.c"
        var $87=HEAP[$86]; //@line 3128 "xmlparse.c"
        var $88=reSign(($87), 8, 0)==0; //@line 3128 "xmlparse.c"
        if ($88) { __label__ = 19; break; } else { __label__ = 22; break; } //@line 3128 "xmlparse.c"
      case 19: // $bb18
        var $89=HEAP[$parser_addr]; //@line 3130 "xmlparse.c"
        var $90=(($89+44)&4294967295); //@line 3130 "xmlparse.c"
        var $91=HEAP[$90]; //@line 3130 "xmlparse.c"
        HEAP[$dataPtr]=$91; //@line 3130 "xmlparse.c"
        var $92=HEAP[$enc_addr]; //@line 3131 "xmlparse.c"
        var $93=(($92+56)&4294967295); //@line 3131 "xmlparse.c"
        var $94=HEAP[$93]; //@line 3131 "xmlparse.c"
        var $95=HEAP[$parser_addr]; //@line 3131 "xmlparse.c"
        var $96=(($95+48)&4294967295); //@line 3131 "xmlparse.c"
        var $97=HEAP[$96]; //@line 3131 "xmlparse.c"
        var $98=HEAP[$next]; //@line 3131 "xmlparse.c"
        var $99=HEAP[$enc_addr]; //@line 3131 "xmlparse.c"
        FUNCTION_TABLE[$94]($99, $s, $98, $dataPtr, $97); //@line 3131 "xmlparse.c"
        var $100=HEAP[$next]; //@line 3132 "xmlparse.c"
        var $101=HEAP[$eventEndPP]; //@line 3132 "xmlparse.c"
        HEAP[$101]=$100; //@line 3132 "xmlparse.c"
        var $102=HEAP[$parser_addr]; //@line 3133 "xmlparse.c"
        var $103=(($102+60)&4294967295); //@line 3133 "xmlparse.c"
        var $104=HEAP[$103]; //@line 3133 "xmlparse.c"
        var $105=HEAP[$dataPtr]; //@line 3133 "xmlparse.c"
        var $106=($105); //@line 3133 "xmlparse.c"
        var $107=HEAP[$parser_addr]; //@line 3133 "xmlparse.c"
        var $108=(($107+44)&4294967295); //@line 3133 "xmlparse.c"
        var $109=HEAP[$108]; //@line 3133 "xmlparse.c"
        var $110=($109); //@line 3133 "xmlparse.c"
        var $111=((($106) - ($110))&4294967295); //@line 3133 "xmlparse.c"
        var $112=HEAP[$parser_addr]; //@line 3133 "xmlparse.c"
        var $113=(($112+44)&4294967295); //@line 3133 "xmlparse.c"
        var $114=HEAP[$113]; //@line 3133 "xmlparse.c"
        var $115=HEAP[$parser_addr]; //@line 3133 "xmlparse.c"
        var $116=(($115+4)&4294967295); //@line 3133 "xmlparse.c"
        var $117=HEAP[$116]; //@line 3133 "xmlparse.c"
        FUNCTION_TABLE[$104]($117, $114, $111); //@line 3133 "xmlparse.c"
        var $118=HEAP[$s]; //@line 3135 "xmlparse.c"
        var $119=HEAP[$next]; //@line 3135 "xmlparse.c"
        var $120=($118)==($119); //@line 3135 "xmlparse.c"
        if ($120) { __label__ = 21; break; } else { __label__ = 20; break; } //@line 3135 "xmlparse.c"
      case 20: // $bb19
        var $121=HEAP[$s]; //@line 3137 "xmlparse.c"
        var $122=HEAP[$eventPP]; //@line 3137 "xmlparse.c"
        HEAP[$122]=$121; //@line 3137 "xmlparse.c"
        __label__ = 19; break; //@line 3137 "xmlparse.c"
      case 21: // $bb20
        __label__ = 23; break; //@line 3137 "xmlparse.c"
      case 22: // $bb21
        var $123=HEAP[$parser_addr]; //@line 3141 "xmlparse.c"
        var $124=(($123+60)&4294967295); //@line 3141 "xmlparse.c"
        var $125=HEAP[$124]; //@line 3141 "xmlparse.c"
        var $126=HEAP[$next]; //@line 3141 "xmlparse.c"
        var $127=($126); //@line 3141 "xmlparse.c"
        var $128=HEAP[$s]; //@line 3141 "xmlparse.c"
        var $129=($128); //@line 3141 "xmlparse.c"
        var $130=((($127) - ($129))&4294967295); //@line 3141 "xmlparse.c"
        var $131=HEAP[$s]; //@line 3141 "xmlparse.c"
        var $132=HEAP[$parser_addr]; //@line 3141 "xmlparse.c"
        var $133=(($132+4)&4294967295); //@line 3141 "xmlparse.c"
        var $134=HEAP[$133]; //@line 3141 "xmlparse.c"
        FUNCTION_TABLE[$125]($134, $131, $130); //@line 3141 "xmlparse.c"
        __label__ = 23; break; //@line 3141 "xmlparse.c"
      case 23: // $bb22
        __label__ = 26; break; //@line 3141 "xmlparse.c"
      case 24: // $bb23
        var $135=HEAP[$parser_addr]; //@line 3145 "xmlparse.c"
        var $136=(($135+80)&4294967295); //@line 3145 "xmlparse.c"
        var $137=HEAP[$136]; //@line 3145 "xmlparse.c"
        var $138=($137)!=0; //@line 3145 "xmlparse.c"
        if ($138) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 3145 "xmlparse.c"
      case 25: // $bb24
        var $139=HEAP[$next]; //@line 3146 "xmlparse.c"
        var $140=HEAP[$s]; //@line 3146 "xmlparse.c"
        var $141=HEAP[$parser_addr]; //@line 3146 "xmlparse.c"
        var $142=HEAP[$enc_addr]; //@line 3146 "xmlparse.c"
        _reportDefault($141, $142, $140, $139); //@line 3146 "xmlparse.c"
        __label__ = 26; break; //@line 3146 "xmlparse.c"
      case 26: // $bb25
        __label__ = 35; break; //@line 3146 "xmlparse.c"
      case 27: // $bb26
        var $143=HEAP[$next]; //@line 3149 "xmlparse.c"
        var $144=HEAP[$eventPP]; //@line 3149 "xmlparse.c"
        HEAP[$144]=$143; //@line 3149 "xmlparse.c"
        HEAP[$0]=4; //@line 3150 "xmlparse.c"
        __label__ = 39; break; //@line 3150 "xmlparse.c"
      case 28: // $bb27
        var $145=HEAP[$haveMore_addr]; //@line 3152 "xmlparse.c"
        var $146=reSign(($145), 8, 0)!=0; //@line 3152 "xmlparse.c"
        if ($146) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 3152 "xmlparse.c"
      case 29: // $bb28
        var $147=HEAP[$s]; //@line 3153 "xmlparse.c"
        var $148=HEAP[$nextPtr_addr]; //@line 3153 "xmlparse.c"
        HEAP[$148]=$147; //@line 3153 "xmlparse.c"
        HEAP[$0]=0; //@line 3154 "xmlparse.c"
        __label__ = 39; break; //@line 3154 "xmlparse.c"
      case 30: // $bb29
        HEAP[$0]=6; //@line 3156 "xmlparse.c"
        __label__ = 39; break; //@line 3156 "xmlparse.c"
      case 31: // $bb30
        var $149=HEAP[$haveMore_addr]; //@line 3159 "xmlparse.c"
        var $150=reSign(($149), 8, 0)!=0; //@line 3159 "xmlparse.c"
        if ($150) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 3159 "xmlparse.c"
      case 32: // $bb31
        var $151=HEAP[$s]; //@line 3160 "xmlparse.c"
        var $152=HEAP[$nextPtr_addr]; //@line 3160 "xmlparse.c"
        HEAP[$152]=$151; //@line 3160 "xmlparse.c"
        HEAP[$0]=0; //@line 3161 "xmlparse.c"
        __label__ = 39; break; //@line 3161 "xmlparse.c"
      case 33: // $bb32
        HEAP[$0]=20; //@line 3163 "xmlparse.c"
        __label__ = 39; break; //@line 3163 "xmlparse.c"
      case 34: // $bb33
        var $153=HEAP[$next]; //@line 3165 "xmlparse.c"
        var $154=HEAP[$eventPP]; //@line 3165 "xmlparse.c"
        HEAP[$154]=$153; //@line 3165 "xmlparse.c"
        HEAP[$0]=23; //@line 3166 "xmlparse.c"
        __label__ = 39; break; //@line 3166 "xmlparse.c"
      case 35: // $bb34
        var $155=HEAP[$next]; //@line 3169 "xmlparse.c"
        HEAP[$s]=$155; //@line 3169 "xmlparse.c"
        var $156=HEAP[$s]; //@line 3169 "xmlparse.c"
        var $157=HEAP[$eventPP]; //@line 3169 "xmlparse.c"
        HEAP[$157]=$156; //@line 3169 "xmlparse.c"
        var $158=HEAP[$parser_addr]; //@line 3170 "xmlparse.c"
        var $159=(($158+464)&4294967295); //@line 3170 "xmlparse.c"
        var $160=(($159)&4294967295); //@line 3170 "xmlparse.c"
        var $161=HEAP[$160]; //@line 3170 "xmlparse.c"
        if ($161 == 2) {
          __label__ = 37; break;
        }
        else if ($161 == 3) {
          __label__ = 36; break;
        }
        else {
        __label__ = 38; break;
        }
        
      case 36: // $bb35
        var $162=HEAP[$next]; //@line 3172 "xmlparse.c"
        var $163=HEAP[$nextPtr_addr]; //@line 3172 "xmlparse.c"
        HEAP[$163]=$162; //@line 3172 "xmlparse.c"
        HEAP[$0]=0; //@line 3173 "xmlparse.c"
        __label__ = 39; break; //@line 3173 "xmlparse.c"
      case 37: // $bb36
        HEAP[$0]=35; //@line 3175 "xmlparse.c"
        __label__ = 39; break; //@line 3175 "xmlparse.c"
      case 38: // $bb37
        __label__ = 4; break; //@line 3175 "xmlparse.c"
      case 39: // $bb38
        var $164=HEAP[$0]; //@line 3115 "xmlparse.c"
        HEAP[$retval]=$164; //@line 3115 "xmlparse.c"
        __label__ = 40; break; //@line 3115 "xmlparse.c"
      case 40: // $return
        var $retval39=HEAP[$retval]; //@line 3115 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval39; //@line 3115 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _initializeEncoding($parser) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $s=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        var $1=HEAP[$parser_addr]; //@line 3290 "xmlparse.c"
        var $2=(($1+228)&4294967295); //@line 3290 "xmlparse.c"
        var $3=HEAP[$2]; //@line 3290 "xmlparse.c"
        HEAP[$s]=$3; //@line 3290 "xmlparse.c"
        var $4=HEAP[$parser_addr]; //@line 3292 "xmlparse.c"
        var $5=(($4+144)&4294967295); //@line 3292 "xmlparse.c"
        var $6=HEAP[$parser_addr]; //@line 3292 "xmlparse.c"
        var $7=(($6+148)&4294967295); //@line 3292 "xmlparse.c"
        var $8=HEAP[$s]; //@line 3292 "xmlparse.c"
        var $9=_PyExpat_XmlInitEncoding($7, $5, $8); //@line 3292 "xmlparse.c"
        var $10=((($9))|0)!=0; //@line 3292 "xmlparse.c"
        if ($10) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3292 "xmlparse.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 3293 "xmlparse.c"
        __label__ = 3; break; //@line 3293 "xmlparse.c"
      case 2: // $bb1
        var $11=HEAP[$parser_addr]; //@line 3294 "xmlparse.c"
        var $12=(($11+228)&4294967295); //@line 3294 "xmlparse.c"
        var $13=HEAP[$12]; //@line 3294 "xmlparse.c"
        var $14=HEAP[$parser_addr]; //@line 3294 "xmlparse.c"
        var $15=_handleUnknownEncoding($14, $13); //@line 3294 "xmlparse.c"
        HEAP[$0]=$15; //@line 3294 "xmlparse.c"
        __label__ = 3; break; //@line 3294 "xmlparse.c"
      case 3: // $bb2
        var $16=HEAP[$0]; //@line 3293 "xmlparse.c"
        HEAP[$retval]=$16; //@line 3293 "xmlparse.c"
        __label__ = 4; break; //@line 3293 "xmlparse.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 3293 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 3293 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _processXmlDecl($parser, $isGeneralTextEntity, $s, $next) {
    var __stackBase__  = STACKTOP; STACKTOP += 56; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 56);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $isGeneralTextEntity_addr=__stackBase__+4;
        var $s_addr=__stackBase__+8;
        var $next_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $encodingName=__stackBase__+24;
        var $storedEncName=__stackBase__+28;
        var $newEncoding=__stackBase__+32;
        var $version=__stackBase__+36;
        var $versionend=__stackBase__+40;
        var $storedversion=__stackBase__+44;
        var $standalone=__stackBase__+48;
        var $result=__stackBase__+52;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$isGeneralTextEntity_addr]=$isGeneralTextEntity;
        HEAP[$s_addr]=$s;
        HEAP[$next_addr]=$next;
        HEAP[$encodingName]=0; //@line 3301 "xmlparse.c"
        HEAP[$storedEncName]=0; //@line 3302 "xmlparse.c"
        HEAP[$newEncoding]=0; //@line 3303 "xmlparse.c"
        HEAP[$version]=0; //@line 3304 "xmlparse.c"
        HEAP[$storedversion]=0; //@line 3306 "xmlparse.c"
        HEAP[$standalone]=-1; //@line 3307 "xmlparse.c"
        var $1=HEAP[$parser_addr]; //@line 3308 "xmlparse.c"
        var $2=(($1+272)&4294967295); //@line 3308 "xmlparse.c"
        var $3=HEAP[$parser_addr]; //@line 3308 "xmlparse.c"
        var $4=(($3+144)&4294967295); //@line 3308 "xmlparse.c"
        var $5=HEAP[$4]; //@line 3308 "xmlparse.c"
        var $6=HEAP[$isGeneralTextEntity_addr]; //@line 3308 "xmlparse.c"
        var $7=HEAP[$s_addr]; //@line 3308 "xmlparse.c"
        var $8=HEAP[$next_addr]; //@line 3308 "xmlparse.c"
        var $9=_PyExpat_XmlParseXmlDecl($6, $5, $7, $8, $2, $version, $versionend, $encodingName, $newEncoding, $standalone); //@line 3308 "xmlparse.c"
        var $10=((($9))|0)==0; //@line 3308 "xmlparse.c"
        if ($10) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 3308 "xmlparse.c"
      case 1: // $bb
        var $11=HEAP[$isGeneralTextEntity_addr]; //@line 3320 "xmlparse.c"
        var $12=((($11))|0)!=0; //@line 3320 "xmlparse.c"
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3320 "xmlparse.c"
      case 2: // $bb1
        HEAP[$0]=31; //@line 3321 "xmlparse.c"
        __label__ = 34; break; //@line 3321 "xmlparse.c"
      case 3: // $bb2
        HEAP[$0]=30; //@line 3323 "xmlparse.c"
        __label__ = 34; break; //@line 3323 "xmlparse.c"
      case 4: // $bb3
        var $13=HEAP[$isGeneralTextEntity_addr]; //@line 3325 "xmlparse.c"
        var $14=((($13))|0)==0; //@line 3325 "xmlparse.c"
        if ($14) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 3325 "xmlparse.c"
      case 5: // $bb4
        var $15=HEAP[$standalone]; //@line 3325 "xmlparse.c"
        var $16=((($15))|0)==1; //@line 3325 "xmlparse.c"
        if ($16) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3325 "xmlparse.c"
      case 6: // $bb5
        var $17=HEAP[$parser_addr]; //@line 3326 "xmlparse.c"
        var $18=(($17+340)&4294967295); //@line 3326 "xmlparse.c"
        var $19=HEAP[$18]; //@line 3326 "xmlparse.c"
        var $20=(($19+130)&4294967295); //@line 3326 "xmlparse.c"
        HEAP[$20]=1; //@line 3326 "xmlparse.c"
        __label__ = 7; break; //@line 3326 "xmlparse.c"
      case 7: // $bb6
        var $21=HEAP[$parser_addr]; //@line 3332 "xmlparse.c"
        var $22=(($21+140)&4294967295); //@line 3332 "xmlparse.c"
        var $23=HEAP[$22]; //@line 3332 "xmlparse.c"
        var $24=($23)!=0; //@line 3332 "xmlparse.c"
        if ($24) { __label__ = 8; break; } else { __label__ = 16; break; } //@line 3332 "xmlparse.c"
      case 8: // $bb7
        var $25=HEAP[$encodingName]; //@line 3333 "xmlparse.c"
        var $26=($25)!=0; //@line 3333 "xmlparse.c"
        if ($26) { __label__ = 9; break; } else { __label__ = 12; break; } //@line 3333 "xmlparse.c"
      case 9: // $bb8
        var $27=HEAP[$encodingName]; //@line 3334 "xmlparse.c"
        var $28=HEAP[$parser_addr]; //@line 3334 "xmlparse.c"
        var $29=(($28+144)&4294967295); //@line 3334 "xmlparse.c"
        var $30=HEAP[$29]; //@line 3334 "xmlparse.c"
        var $31=(($30+28)&4294967295); //@line 3334 "xmlparse.c"
        var $32=HEAP[$31]; //@line 3334 "xmlparse.c"
        var $33=HEAP[$encodingName]; //@line 3334 "xmlparse.c"
        var $34=HEAP[$parser_addr]; //@line 3334 "xmlparse.c"
        var $35=(($34+144)&4294967295); //@line 3334 "xmlparse.c"
        var $36=HEAP[$35]; //@line 3334 "xmlparse.c"
        var $37=FUNCTION_TABLE[$32]($36, $33); //@line 3334 "xmlparse.c"
        var $38=(($27+$37)&4294967295); //@line 3334 "xmlparse.c"
        var $39=HEAP[$encodingName]; //@line 3334 "xmlparse.c"
        var $40=HEAP[$parser_addr]; //@line 3334 "xmlparse.c"
        var $41=(($40+144)&4294967295); //@line 3334 "xmlparse.c"
        var $42=HEAP[$41]; //@line 3334 "xmlparse.c"
        var $43=HEAP[$parser_addr]; //@line 3334 "xmlparse.c"
        var $44=(($43+424)&4294967295); //@line 3334 "xmlparse.c"
        var $45=_poolStoreString($44, $42, $39, $38); //@line 3334 "xmlparse.c"
        HEAP[$storedEncName]=$45; //@line 3334 "xmlparse.c"
        var $46=HEAP[$storedEncName]; //@line 3339 "xmlparse.c"
        var $47=($46)==0; //@line 3339 "xmlparse.c"
        if ($47) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3339 "xmlparse.c"
      case 10: // $bb9
        HEAP[$0]=1; //@line 3340 "xmlparse.c"
        __label__ = 34; break; //@line 3340 "xmlparse.c"
      case 11: // $bb10
        var $48=HEAP[$parser_addr]; //@line 3341 "xmlparse.c"
        var $49=(($48+424)&4294967295); //@line 3341 "xmlparse.c"
        var $50=(($49+12)&4294967295); //@line 3341 "xmlparse.c"
        var $51=HEAP[$50]; //@line 3341 "xmlparse.c"
        var $52=HEAP[$parser_addr]; //@line 3341 "xmlparse.c"
        var $53=(($52+424)&4294967295); //@line 3341 "xmlparse.c"
        var $54=(($53+16)&4294967295); //@line 3341 "xmlparse.c"
        HEAP[$54]=$51; //@line 3341 "xmlparse.c"
        __label__ = 12; break; //@line 3341 "xmlparse.c"
      case 12: // $bb11
        var $55=HEAP[$version]; //@line 3343 "xmlparse.c"
        var $56=($55)!=0; //@line 3343 "xmlparse.c"
        if ($56) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 3343 "xmlparse.c"
      case 13: // $bb12
        var $57=HEAP[$versionend]; //@line 3344 "xmlparse.c"
        var $58=HEAP[$parser_addr]; //@line 3344 "xmlparse.c"
        var $59=(($58+144)&4294967295); //@line 3344 "xmlparse.c"
        var $60=HEAP[$59]; //@line 3344 "xmlparse.c"
        var $61=(($60+64)&4294967295); //@line 3344 "xmlparse.c"
        var $62=HEAP[$61]; //@line 3344 "xmlparse.c"
        var $63=((0 - ($62))&4294967295); //@line 3344 "xmlparse.c"
        var $64=(($57+$63)&4294967295); //@line 3344 "xmlparse.c"
        var $65=HEAP[$version]; //@line 3344 "xmlparse.c"
        var $66=HEAP[$parser_addr]; //@line 3344 "xmlparse.c"
        var $67=(($66+144)&4294967295); //@line 3344 "xmlparse.c"
        var $68=HEAP[$67]; //@line 3344 "xmlparse.c"
        var $69=HEAP[$parser_addr]; //@line 3344 "xmlparse.c"
        var $70=(($69+424)&4294967295); //@line 3344 "xmlparse.c"
        var $71=_poolStoreString($70, $68, $65, $64); //@line 3344 "xmlparse.c"
        HEAP[$storedversion]=$71; //@line 3344 "xmlparse.c"
        var $72=HEAP[$storedversion]; //@line 3348 "xmlparse.c"
        var $73=($72)==0; //@line 3348 "xmlparse.c"
        if ($73) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 3348 "xmlparse.c"
      case 14: // $bb13
        HEAP[$0]=1; //@line 3349 "xmlparse.c"
        __label__ = 34; break; //@line 3349 "xmlparse.c"
      case 15: // $bb14
        var $74=HEAP[$parser_addr]; //@line 3351 "xmlparse.c"
        var $75=(($74+140)&4294967295); //@line 3351 "xmlparse.c"
        var $76=HEAP[$75]; //@line 3351 "xmlparse.c"
        var $77=HEAP[$standalone]; //@line 3351 "xmlparse.c"
        var $78=HEAP[$parser_addr]; //@line 3351 "xmlparse.c"
        var $79=(($78+4)&4294967295); //@line 3351 "xmlparse.c"
        var $80=HEAP[$79]; //@line 3351 "xmlparse.c"
        var $81=HEAP[$storedversion]; //@line 3351 "xmlparse.c"
        var $82=HEAP[$storedEncName]; //@line 3351 "xmlparse.c"
        FUNCTION_TABLE[$76]($80, $81, $82, $77); //@line 3351 "xmlparse.c"
        __label__ = 18; break; //@line 3351 "xmlparse.c"
      case 16: // $bb15
        var $83=HEAP[$parser_addr]; //@line 3353 "xmlparse.c"
        var $84=(($83+80)&4294967295); //@line 3353 "xmlparse.c"
        var $85=HEAP[$84]; //@line 3353 "xmlparse.c"
        var $86=($85)!=0; //@line 3353 "xmlparse.c"
        if ($86) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 3353 "xmlparse.c"
      case 17: // $bb16
        var $87=HEAP[$parser_addr]; //@line 3354 "xmlparse.c"
        var $88=(($87+144)&4294967295); //@line 3354 "xmlparse.c"
        var $89=HEAP[$88]; //@line 3354 "xmlparse.c"
        var $90=HEAP[$parser_addr]; //@line 3354 "xmlparse.c"
        var $91=HEAP[$s_addr]; //@line 3354 "xmlparse.c"
        var $92=HEAP[$next_addr]; //@line 3354 "xmlparse.c"
        _reportDefault($90, $89, $91, $92); //@line 3354 "xmlparse.c"
        __label__ = 18; break; //@line 3354 "xmlparse.c"
      case 18: // $bb17
        var $93=HEAP[$parser_addr]; //@line 3355 "xmlparse.c"
        var $94=(($93+228)&4294967295); //@line 3355 "xmlparse.c"
        var $95=HEAP[$94]; //@line 3355 "xmlparse.c"
        var $96=($95)==0; //@line 3355 "xmlparse.c"
        if ($96) { __label__ = 19; break; } else { __label__ = 30; break; } //@line 3355 "xmlparse.c"
      case 19: // $bb18
        var $97=HEAP[$newEncoding]; //@line 3356 "xmlparse.c"
        var $98=($97)!=0; //@line 3356 "xmlparse.c"
        if ($98) { __label__ = 20; break; } else { __label__ = 23; break; } //@line 3356 "xmlparse.c"
      case 20: // $bb19
        var $99=HEAP[$newEncoding]; //@line 3357 "xmlparse.c"
        var $100=(($99+64)&4294967295); //@line 3357 "xmlparse.c"
        var $101=HEAP[$100]; //@line 3357 "xmlparse.c"
        var $102=HEAP[$parser_addr]; //@line 3357 "xmlparse.c"
        var $103=(($102+144)&4294967295); //@line 3357 "xmlparse.c"
        var $104=HEAP[$103]; //@line 3357 "xmlparse.c"
        var $105=(($104+64)&4294967295); //@line 3357 "xmlparse.c"
        var $106=HEAP[$105]; //@line 3357 "xmlparse.c"
        var $107=((($101))|0)!=((($106))|0); //@line 3357 "xmlparse.c"
        if ($107) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 3357 "xmlparse.c"
      case 21: // $bb20
        var $108=HEAP[$encodingName]; //@line 3358 "xmlparse.c"
        var $109=HEAP[$parser_addr]; //@line 3358 "xmlparse.c"
        var $110=(($109+272)&4294967295); //@line 3358 "xmlparse.c"
        HEAP[$110]=$108; //@line 3358 "xmlparse.c"
        HEAP[$0]=19; //@line 3359 "xmlparse.c"
        __label__ = 34; break; //@line 3359 "xmlparse.c"
      case 22: // $bb21
        var $111=HEAP[$newEncoding]; //@line 3361 "xmlparse.c"
        var $112=HEAP[$parser_addr]; //@line 3361 "xmlparse.c"
        var $113=(($112+144)&4294967295); //@line 3361 "xmlparse.c"
        HEAP[$113]=$111; //@line 3361 "xmlparse.c"
        __label__ = 30; break; //@line 3361 "xmlparse.c"
      case 23: // $bb22
        var $114=HEAP[$encodingName]; //@line 3363 "xmlparse.c"
        var $115=($114)!=0; //@line 3363 "xmlparse.c"
        if ($115) { __label__ = 24; break; } else { __label__ = 30; break; } //@line 3363 "xmlparse.c"
      case 24: // $bb23
        var $116=HEAP[$storedEncName]; //@line 3365 "xmlparse.c"
        var $117=($116)==0; //@line 3365 "xmlparse.c"
        if ($117) { __label__ = 25; break; } else { __label__ = 27; break; } //@line 3365 "xmlparse.c"
      case 25: // $bb24
        var $118=HEAP[$encodingName]; //@line 3366 "xmlparse.c"
        var $119=HEAP[$parser_addr]; //@line 3366 "xmlparse.c"
        var $120=(($119+144)&4294967295); //@line 3366 "xmlparse.c"
        var $121=HEAP[$120]; //@line 3366 "xmlparse.c"
        var $122=(($121+28)&4294967295); //@line 3366 "xmlparse.c"
        var $123=HEAP[$122]; //@line 3366 "xmlparse.c"
        var $124=HEAP[$encodingName]; //@line 3366 "xmlparse.c"
        var $125=HEAP[$parser_addr]; //@line 3366 "xmlparse.c"
        var $126=(($125+144)&4294967295); //@line 3366 "xmlparse.c"
        var $127=HEAP[$126]; //@line 3366 "xmlparse.c"
        var $128=FUNCTION_TABLE[$123]($127, $124); //@line 3366 "xmlparse.c"
        var $129=(($118+$128)&4294967295); //@line 3366 "xmlparse.c"
        var $130=HEAP[$encodingName]; //@line 3366 "xmlparse.c"
        var $131=HEAP[$parser_addr]; //@line 3366 "xmlparse.c"
        var $132=(($131+144)&4294967295); //@line 3366 "xmlparse.c"
        var $133=HEAP[$132]; //@line 3366 "xmlparse.c"
        var $134=HEAP[$parser_addr]; //@line 3366 "xmlparse.c"
        var $135=(($134+424)&4294967295); //@line 3366 "xmlparse.c"
        var $136=_poolStoreString($135, $133, $130, $129); //@line 3366 "xmlparse.c"
        HEAP[$storedEncName]=$136; //@line 3366 "xmlparse.c"
        var $137=HEAP[$storedEncName]; //@line 3369 "xmlparse.c"
        var $138=($137)==0; //@line 3369 "xmlparse.c"
        if ($138) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 3369 "xmlparse.c"
      case 26: // $bb25
        HEAP[$0]=1; //@line 3370 "xmlparse.c"
        __label__ = 34; break; //@line 3370 "xmlparse.c"
      case 27: // $bb26
        var $139=HEAP[$parser_addr]; //@line 3372 "xmlparse.c"
        var $140=HEAP[$storedEncName]; //@line 3372 "xmlparse.c"
        var $141=_handleUnknownEncoding($139, $140); //@line 3372 "xmlparse.c"
        HEAP[$result]=$141; //@line 3372 "xmlparse.c"
        var $142=HEAP[$parser_addr]; //@line 3373 "xmlparse.c"
        var $143=(($142+424)&4294967295); //@line 3373 "xmlparse.c"
        _poolClear($143); //@line 3373 "xmlparse.c"
        var $144=HEAP[$result]; //@line 3374 "xmlparse.c"
        var $145=((($144))|0)==18; //@line 3374 "xmlparse.c"
        if ($145) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 3374 "xmlparse.c"
      case 28: // $bb27
        var $146=HEAP[$encodingName]; //@line 3375 "xmlparse.c"
        var $147=HEAP[$parser_addr]; //@line 3375 "xmlparse.c"
        var $148=(($147+272)&4294967295); //@line 3375 "xmlparse.c"
        HEAP[$148]=$146; //@line 3375 "xmlparse.c"
        __label__ = 29; break; //@line 3375 "xmlparse.c"
      case 29: // $bb28
        var $149=HEAP[$result]; //@line 3376 "xmlparse.c"
        HEAP[$0]=$149; //@line 3376 "xmlparse.c"
        __label__ = 34; break; //@line 3376 "xmlparse.c"
      case 30: // $bb29
        var $150=HEAP[$storedEncName]; //@line 3380 "xmlparse.c"
        var $151=($150)!=0; //@line 3380 "xmlparse.c"
        if ($151) { __label__ = 32; break; } else { __label__ = 31; break; } //@line 3380 "xmlparse.c"
      case 31: // $bb30
        var $152=HEAP[$storedversion]; //@line 3380 "xmlparse.c"
        var $153=($152)!=0; //@line 3380 "xmlparse.c"
        if ($153) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 3380 "xmlparse.c"
      case 32: // $bb31
        var $154=HEAP[$parser_addr]; //@line 3381 "xmlparse.c"
        var $155=(($154+424)&4294967295); //@line 3381 "xmlparse.c"
        _poolClear($155); //@line 3381 "xmlparse.c"
        __label__ = 33; break; //@line 3381 "xmlparse.c"
      case 33: // $bb32
        HEAP[$0]=0; //@line 3383 "xmlparse.c"
        __label__ = 34; break; //@line 3383 "xmlparse.c"
      case 34: // $bb33
        var $156=HEAP[$0]; //@line 3321 "xmlparse.c"
        HEAP[$retval]=$156; //@line 3321 "xmlparse.c"
        __label__ = 35; break; //@line 3321 "xmlparse.c"
      case 35: // $return
        var $retval34=HEAP[$retval]; //@line 3321 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval34; //@line 3321 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _handleUnknownEncoding($parser, $encodingName) {
    var __stackBase__  = STACKTOP; STACKTOP += 1060; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 1060);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $encodingName_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $info=__stackBase__+16;
        var $i=__stackBase__+1052;
        var $enc=__stackBase__+1056;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$encodingName_addr]=$encodingName;
        var $1=HEAP[$parser_addr]; //@line 3389 "xmlparse.c"
        var $2=(($1+124)&4294967295); //@line 3389 "xmlparse.c"
        var $3=HEAP[$2]; //@line 3389 "xmlparse.c"
        var $4=($3)!=0; //@line 3389 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 13; break; } //@line 3389 "xmlparse.c"
      case 1: // $bb
        HEAP[$i]=0; //@line 3392 "xmlparse.c"
        __label__ = 3; break; //@line 3392 "xmlparse.c"
      case 2: // $bb1
        var $5=HEAP[$i]; //@line 3393 "xmlparse.c"
        var $6=(($info)&4294967295); //@line 3393 "xmlparse.c"
        var $7=(($6+$5*4)&4294967295); //@line 3393 "xmlparse.c"
        HEAP[$7]=-1; //@line 3393 "xmlparse.c"
        var $8=HEAP[$i]; //@line 3392 "xmlparse.c"
        var $9=((($8) + 1)&4294967295); //@line 3392 "xmlparse.c"
        HEAP[$i]=$9; //@line 3392 "xmlparse.c"
        __label__ = 3; break; //@line 3392 "xmlparse.c"
      case 3: // $bb2
        var $10=HEAP[$i]; //@line 3392 "xmlparse.c"
        var $11=((($10))|0) <= 255; //@line 3392 "xmlparse.c"
        if ($11) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 3392 "xmlparse.c"
      case 4: // $bb3
        var $12=(($info+1028)&4294967295); //@line 3394 "xmlparse.c"
        HEAP[$12]=0; //@line 3394 "xmlparse.c"
        var $13=(($info+1024)&4294967295); //@line 3395 "xmlparse.c"
        HEAP[$13]=0; //@line 3395 "xmlparse.c"
        var $14=(($info+1032)&4294967295); //@line 3396 "xmlparse.c"
        HEAP[$14]=0; //@line 3396 "xmlparse.c"
        var $15=HEAP[$parser_addr]; //@line 3397 "xmlparse.c"
        var $16=(($15+124)&4294967295); //@line 3397 "xmlparse.c"
        var $17=HEAP[$16]; //@line 3397 "xmlparse.c"
        var $18=HEAP[$parser_addr]; //@line 3397 "xmlparse.c"
        var $19=(($18+244)&4294967295); //@line 3397 "xmlparse.c"
        var $20=HEAP[$19]; //@line 3397 "xmlparse.c"
        var $21=HEAP[$encodingName_addr]; //@line 3397 "xmlparse.c"
        var $22=FUNCTION_TABLE[$17]($20, $21, $info); //@line 3397 "xmlparse.c"
        var $23=((($22))|0)!=0; //@line 3397 "xmlparse.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 11; break; } //@line 3397 "xmlparse.c"
      case 5: // $bb4
        var $24=HEAP[$parser_addr]; //@line 3400 "xmlparse.c"
        var $25=(($24+12)&4294967295); //@line 3400 "xmlparse.c"
        var $26=(($25)&4294967295); //@line 3400 "xmlparse.c"
        var $27=HEAP[$26]; //@line 3400 "xmlparse.c"
        var $28=_PyExpat_XmlSizeOfUnknownEncoding(); //@line 3400 "xmlparse.c"
        var $29=FUNCTION_TABLE[$27]($28); //@line 3400 "xmlparse.c"
        var $30=HEAP[$parser_addr]; //@line 3400 "xmlparse.c"
        var $31=(($30+236)&4294967295); //@line 3400 "xmlparse.c"
        HEAP[$31]=$29; //@line 3400 "xmlparse.c"
        var $32=HEAP[$parser_addr]; //@line 3401 "xmlparse.c"
        var $33=(($32+236)&4294967295); //@line 3401 "xmlparse.c"
        var $34=HEAP[$33]; //@line 3401 "xmlparse.c"
        var $35=($34)==0; //@line 3401 "xmlparse.c"
        if ($35) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 3401 "xmlparse.c"
      case 6: // $bb5
        var $36=(($info+1032)&4294967295); //@line 3402 "xmlparse.c"
        var $37=HEAP[$36]; //@line 3402 "xmlparse.c"
        var $38=($37)!=0; //@line 3402 "xmlparse.c"
        if ($38) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3402 "xmlparse.c"
      case 7: // $bb6
        var $39=(($info+1032)&4294967295); //@line 3403 "xmlparse.c"
        var $40=HEAP[$39]; //@line 3403 "xmlparse.c"
        var $41=(($info+1024)&4294967295); //@line 3403 "xmlparse.c"
        var $42=HEAP[$41]; //@line 3403 "xmlparse.c"
        FUNCTION_TABLE[$40]($42); //@line 3403 "xmlparse.c"
        __label__ = 8; break; //@line 3403 "xmlparse.c"
      case 8: // $bb7
        HEAP[$0]=1; //@line 3404 "xmlparse.c"
        __label__ = 14; break; //@line 3404 "xmlparse.c"
      case 9: // $bb8
        var $43=(($info+1024)&4294967295); //@line 3406 "xmlparse.c"
        var $44=HEAP[$43]; //@line 3406 "xmlparse.c"
        var $45=(($info+1028)&4294967295); //@line 3406 "xmlparse.c"
        var $46=HEAP[$45]; //@line 3406 "xmlparse.c"
        var $47=HEAP[$parser_addr]; //@line 3406 "xmlparse.c"
        var $48=(($47+236)&4294967295); //@line 3406 "xmlparse.c"
        var $49=HEAP[$48]; //@line 3406 "xmlparse.c"
        var $50=(($info)&4294967295); //@line 3406 "xmlparse.c"
        var $51=(($50)&4294967295); //@line 3406 "xmlparse.c"
        var $52=_PyExpat_XmlInitUnknownEncoding($49, $51, $46, $44); //@line 3406 "xmlparse.c"
        HEAP[$enc]=$52; //@line 3406 "xmlparse.c"
        var $53=HEAP[$enc]; //@line 3412 "xmlparse.c"
        var $54=($53)!=0; //@line 3412 "xmlparse.c"
        if ($54) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3412 "xmlparse.c"
      case 10: // $bb9
        var $55=(($info+1024)&4294967295); //@line 3413 "xmlparse.c"
        var $56=HEAP[$55]; //@line 3413 "xmlparse.c"
        var $57=HEAP[$parser_addr]; //@line 3413 "xmlparse.c"
        var $58=(($57+240)&4294967295); //@line 3413 "xmlparse.c"
        HEAP[$58]=$56; //@line 3413 "xmlparse.c"
        var $59=(($info+1032)&4294967295); //@line 3414 "xmlparse.c"
        var $60=HEAP[$59]; //@line 3414 "xmlparse.c"
        var $61=HEAP[$parser_addr]; //@line 3414 "xmlparse.c"
        var $62=(($61+248)&4294967295); //@line 3414 "xmlparse.c"
        HEAP[$62]=$60; //@line 3414 "xmlparse.c"
        var $63=HEAP[$parser_addr]; //@line 3415 "xmlparse.c"
        var $64=(($63+144)&4294967295); //@line 3415 "xmlparse.c"
        var $65=HEAP[$enc]; //@line 3415 "xmlparse.c"
        HEAP[$64]=$65; //@line 3415 "xmlparse.c"
        HEAP[$0]=0; //@line 3416 "xmlparse.c"
        __label__ = 14; break; //@line 3416 "xmlparse.c"
      case 11: // $bb10
        var $66=(($info+1032)&4294967295); //@line 3419 "xmlparse.c"
        var $67=HEAP[$66]; //@line 3419 "xmlparse.c"
        var $68=($67)!=0; //@line 3419 "xmlparse.c"
        if ($68) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 3419 "xmlparse.c"
      case 12: // $bb11
        var $69=(($info+1032)&4294967295); //@line 3420 "xmlparse.c"
        var $70=HEAP[$69]; //@line 3420 "xmlparse.c"
        var $71=(($info+1024)&4294967295); //@line 3420 "xmlparse.c"
        var $72=HEAP[$71]; //@line 3420 "xmlparse.c"
        FUNCTION_TABLE[$70]($72); //@line 3420 "xmlparse.c"
        __label__ = 13; break; //@line 3420 "xmlparse.c"
      case 13: // $bb12
        HEAP[$0]=18; //@line 3422 "xmlparse.c"
        __label__ = 14; break; //@line 3422 "xmlparse.c"
      case 14: // $bb13
        var $73=HEAP[$0]; //@line 3404 "xmlparse.c"
        HEAP[$retval]=$73; //@line 3404 "xmlparse.c"
        __label__ = 15; break; //@line 3404 "xmlparse.c"
      case 15: // $return
        var $retval14=HEAP[$retval]; //@line 3404 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval14; //@line 3404 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _prologInitProcessor($parser, $s, $end, $nextPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $s_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $result=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$s_addr]=$s;
        HEAP[$end_addr]=$end;
        HEAP[$nextPtr_addr]=$nextPtr;
        var $1=HEAP[$parser_addr]; //@line 3431 "xmlparse.c"
        var $2=_initializeEncoding($1); //@line 3431 "xmlparse.c"
        HEAP[$result]=$2; //@line 3431 "xmlparse.c"
        var $3=HEAP[$result]; //@line 3432 "xmlparse.c"
        var $4=((($3))|0)!=0; //@line 3432 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3432 "xmlparse.c"
      case 1: // $bb
        var $5=HEAP[$result]; //@line 3433 "xmlparse.c"
        HEAP[$0]=$5; //@line 3433 "xmlparse.c"
        __label__ = 3; break; //@line 3433 "xmlparse.c"
      case 2: // $bb1
        var $6=HEAP[$parser_addr]; //@line 3434 "xmlparse.c"
        var $7=(($6+264)&4294967295); //@line 3434 "xmlparse.c"
        HEAP[$7]=(FUNCTION_TABLE_OFFSET + 64); //@line 3434 "xmlparse.c"
        var $8=HEAP[$parser_addr]; //@line 3435 "xmlparse.c"
        var $9=HEAP[$s_addr]; //@line 3435 "xmlparse.c"
        var $10=HEAP[$end_addr]; //@line 3435 "xmlparse.c"
        var $11=HEAP[$nextPtr_addr]; //@line 3435 "xmlparse.c"
        var $12=_prologProcessor($8, $9, $10, $11); //@line 3435 "xmlparse.c"
        HEAP[$0]=$12; //@line 3435 "xmlparse.c"
        __label__ = 3; break; //@line 3435 "xmlparse.c"
      case 3: // $bb2
        var $13=HEAP[$0]; //@line 3433 "xmlparse.c"
        HEAP[$retval]=$13; //@line 3433 "xmlparse.c"
        __label__ = 4; break; //@line 3433 "xmlparse.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 3433 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 3433 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _prologProcessor($parser, $s, $end, $nextPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $s_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $next=__stackBase__+24;
        var $tok=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$s_addr]=$s;
        HEAP[$end_addr]=$end;
        HEAP[$nextPtr_addr]=$nextPtr;
        var $1=HEAP[$s_addr]; //@line 3616 "xmlparse.c"
        HEAP[$next]=$1; //@line 3616 "xmlparse.c"
        var $2=HEAP[$parser_addr]; //@line 3617 "xmlparse.c"
        var $3=(($2+144)&4294967295); //@line 3617 "xmlparse.c"
        var $4=HEAP[$3]; //@line 3617 "xmlparse.c"
        var $5=(($4)&4294967295); //@line 3617 "xmlparse.c"
        var $6=(($5)&4294967295); //@line 3617 "xmlparse.c"
        var $7=HEAP[$6]; //@line 3617 "xmlparse.c"
        var $8=HEAP[$parser_addr]; //@line 3617 "xmlparse.c"
        var $9=(($8+144)&4294967295); //@line 3617 "xmlparse.c"
        var $10=HEAP[$9]; //@line 3617 "xmlparse.c"
        var $11=HEAP[$s_addr]; //@line 3617 "xmlparse.c"
        var $12=HEAP[$end_addr]; //@line 3617 "xmlparse.c"
        var $13=FUNCTION_TABLE[$7]($10, $11, $12, $next); //@line 3617 "xmlparse.c"
        HEAP[$tok]=$13; //@line 3617 "xmlparse.c"
        var $14=HEAP[$parser_addr]; //@line 3618 "xmlparse.c"
        var $15=(($14+464)&4294967295); //@line 3618 "xmlparse.c"
        var $16=(($15+4)&4294967295); //@line 3618 "xmlparse.c"
        var $17=HEAP[$16]; //@line 3618 "xmlparse.c"
        var $18=reSign(($17), 8, 0)==0; //@line 3618 "xmlparse.c"
        var $19=unSign(($18), 1, 0); //@line 3618 "xmlparse.c"
        var $20=HEAP[$next]; //@line 3618 "xmlparse.c"
        var $21=HEAP[$parser_addr]; //@line 3618 "xmlparse.c"
        var $22=(($21+144)&4294967295); //@line 3618 "xmlparse.c"
        var $23=HEAP[$22]; //@line 3618 "xmlparse.c"
        var $24=HEAP[$parser_addr]; //@line 3618 "xmlparse.c"
        var $25=HEAP[$s_addr]; //@line 3618 "xmlparse.c"
        var $26=HEAP[$end_addr]; //@line 3618 "xmlparse.c"
        var $27=HEAP[$tok]; //@line 3618 "xmlparse.c"
        var $28=HEAP[$nextPtr_addr]; //@line 3618 "xmlparse.c"
        var $29=((($19)) & 255); //@line 3618 "xmlparse.c"
        var $30=_doProlog($24, $23, $25, $26, $27, $20, $28, $29); //@line 3618 "xmlparse.c"
        HEAP[$0]=$30; //@line 3618 "xmlparse.c"
        var $31=HEAP[$0]; //@line 3618 "xmlparse.c"
        HEAP[$retval]=$31; //@line 3618 "xmlparse.c"
        __label__ = 1; break; //@line 3618 "xmlparse.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 3618 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 3618 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _doProlog($parser, $enc, $s, $end, $tok, $next, $nextPtr, $haveMore) {
    var __stackBase__  = STACKTOP; STACKTOP += 150; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 150);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $enc_addr=__stackBase__+4;
        var $s_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $tok_addr=__stackBase__+16;
        var $next_addr=__stackBase__+20;
        var $nextPtr_addr=__stackBase__+24;
        var $haveMore_addr=__stackBase__+28;
        var $retval=__stackBase__+29;
        var $iftmp_208=__stackBase__+33;
        var $iftmp_207=__stackBase__+37;
        var $iftmp_201=__stackBase__+41;
        var $iftmp_192=__stackBase__+45;
        var $0=__stackBase__+49;
        var $dtd=__stackBase__+53;
        var $eventPP=__stackBase__+57;
        var $eventEndPP=__stackBase__+61;
        var $quant=__stackBase__+65;
        var $role=__stackBase__+69;
        var $handleDefault=__stackBase__+73;
        var $result=__stackBase__+74;
        var $tem=__stackBase__+78;
        var $prefix=__stackBase__+82;
        var $attVal=__stackBase__+86;
        var $result95=__stackBase__+90;
        var $result115=__stackBase__+94;
        var $name=__stackBase__+98;
        var $tem181=__stackBase__+102;
        var $systemId=__stackBase__+106;
        var $temp=__stackBase__+110;
        var $temp205=__stackBase__+114;
        var $myindex=__stackBase__+118;
        var $content=__stackBase__+122;
        var $el=__stackBase__+126;
        var $name260=__stackBase__+130;
        var $nameLen=__stackBase__+134;
        var $nxt=__stackBase__+138;
        var $myindex261=__stackBase__+142;
        var $model=__stackBase__+146;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$enc_addr]=$enc;
        HEAP[$s_addr]=$s;
        HEAP[$end_addr]=$end;
        HEAP[$tok_addr]=$tok;
        HEAP[$next_addr]=$next;
        HEAP[$nextPtr_addr]=$nextPtr;
        HEAP[$haveMore_addr]=$haveMore;
        var $1=HEAP[$parser_addr]; //@line 3652 "xmlparse.c"
        var $2=(($1+340)&4294967295); //@line 3652 "xmlparse.c"
        var $3=HEAP[$2]; //@line 3652 "xmlparse.c"
        HEAP[$dtd]=$3; //@line 3652 "xmlparse.c"
        var $4=HEAP[$parser_addr]; //@line 3658 "xmlparse.c"
        var $5=(($4+144)&4294967295); //@line 3658 "xmlparse.c"
        var $6=HEAP[$5]; //@line 3658 "xmlparse.c"
        var $7=HEAP[$enc_addr]; //@line 3658 "xmlparse.c"
        var $8=($6)==($7); //@line 3658 "xmlparse.c"
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3658 "xmlparse.c"
      case 1: // $bb
        var $9=HEAP[$parser_addr]; //@line 3659 "xmlparse.c"
        var $10=(($9+272)&4294967295); //@line 3659 "xmlparse.c"
        HEAP[$eventPP]=$10; //@line 3659 "xmlparse.c"
        var $11=HEAP[$parser_addr]; //@line 3660 "xmlparse.c"
        var $12=(($11+276)&4294967295); //@line 3660 "xmlparse.c"
        HEAP[$eventEndPP]=$12; //@line 3660 "xmlparse.c"
        __label__ = 3; break; //@line 3660 "xmlparse.c"
      case 2: // $bb1
        var $13=HEAP[$parser_addr]; //@line 3663 "xmlparse.c"
        var $14=(($13+284)&4294967295); //@line 3663 "xmlparse.c"
        var $15=HEAP[$14]; //@line 3663 "xmlparse.c"
        var $16=(($15)&4294967295); //@line 3663 "xmlparse.c"
        HEAP[$eventPP]=$16; //@line 3663 "xmlparse.c"
        var $17=HEAP[$parser_addr]; //@line 3664 "xmlparse.c"
        var $18=(($17+284)&4294967295); //@line 3664 "xmlparse.c"
        var $19=HEAP[$18]; //@line 3664 "xmlparse.c"
        var $20=(($19+4)&4294967295); //@line 3664 "xmlparse.c"
        HEAP[$eventEndPP]=$20; //@line 3664 "xmlparse.c"
        __label__ = 3; break; //@line 3664 "xmlparse.c"
      case 3: // $bb2
        HEAP[$handleDefault]=1; //@line 3669 "xmlparse.c"
        var $21=HEAP[$eventPP]; //@line 3670 "xmlparse.c"
        var $22=HEAP[$s_addr]; //@line 3670 "xmlparse.c"
        HEAP[$21]=$22; //@line 3670 "xmlparse.c"
        var $23=HEAP[$next_addr]; //@line 3671 "xmlparse.c"
        var $24=HEAP[$eventEndPP]; //@line 3671 "xmlparse.c"
        HEAP[$24]=$23; //@line 3671 "xmlparse.c"
        var $25=HEAP[$tok_addr]; //@line 3672 "xmlparse.c"
        var $26=((($25))|0) <= 0; //@line 3672 "xmlparse.c"
        if ($26) { __label__ = 4; break; } else { __label__ = 14; break; } //@line 3672 "xmlparse.c"
      case 4: // $bb3
        var $27=HEAP[$haveMore_addr]; //@line 3673 "xmlparse.c"
        var $28=reSign(($27), 8, 0)!=0; //@line 3673 "xmlparse.c"
        if ($28) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 3673 "xmlparse.c"
      case 5: // $bb4
        var $29=HEAP[$tok_addr]; //@line 3673 "xmlparse.c"
        var $30=((($29))|0)!=0; //@line 3673 "xmlparse.c"
        if ($30) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3673 "xmlparse.c"
      case 6: // $bb5
        var $31=HEAP[$nextPtr_addr]; //@line 3674 "xmlparse.c"
        var $32=HEAP[$s_addr]; //@line 3674 "xmlparse.c"
        HEAP[$31]=$32; //@line 3674 "xmlparse.c"
        HEAP[$0]=0; //@line 3675 "xmlparse.c"
        __label__ = 317; break; //@line 3675 "xmlparse.c"
      case 7: // $bb6
        var $33=HEAP[$tok_addr]; //@line 3677 "xmlparse.c"
        if ($33 == -15) {
          __label__ = 11; break;
        }
        else if ($33 == -4) {
          __label__ = 12; break;
        }
        else if ($33 == -2) {
          __label__ = 10; break;
        }
        else if ($33 == -1) {
          __label__ = 9; break;
        }
        else if ($33 == 0) {
          __label__ = 8; break;
        }
        else {
        __label__ = 13; break;
        }
        
      case 8: // $bb7
        var $34=HEAP[$next_addr]; //@line 3679 "xmlparse.c"
        var $35=HEAP[$eventPP]; //@line 3679 "xmlparse.c"
        HEAP[$35]=$34; //@line 3679 "xmlparse.c"
        HEAP[$0]=4; //@line 3680 "xmlparse.c"
        __label__ = 317; break; //@line 3680 "xmlparse.c"
      case 9: // $bb8
        HEAP[$0]=5; //@line 3682 "xmlparse.c"
        __label__ = 317; break; //@line 3682 "xmlparse.c"
      case 10: // $bb9
        HEAP[$0]=6; //@line 3684 "xmlparse.c"
        __label__ = 317; break; //@line 3684 "xmlparse.c"
      case 11: // $bb10
        var $36=HEAP[$tok_addr]; //@line 3686 "xmlparse.c"
        var $37=((0 - ($36))&4294967295); //@line 3686 "xmlparse.c"
        HEAP[$tok_addr]=$37; //@line 3686 "xmlparse.c"
        __label__ = 14; break; //@line 3686 "xmlparse.c"
      case 12: // $bb11
        HEAP[$0]=3; //@line 3707 "xmlparse.c"
        __label__ = 317; break; //@line 3707 "xmlparse.c"
      case 13: // $bb12
        var $38=HEAP[$tok_addr]; //@line 3709 "xmlparse.c"
        var $39=((0 - ($38))&4294967295); //@line 3709 "xmlparse.c"
        HEAP[$tok_addr]=$39; //@line 3709 "xmlparse.c"
        var $40=HEAP[$end_addr]; //@line 3710 "xmlparse.c"
        HEAP[$next_addr]=$40; //@line 3710 "xmlparse.c"
        __label__ = 14; break; //@line 3710 "xmlparse.c"
      case 14: // $bb13
        var $41=HEAP[$parser_addr]; //@line 3714 "xmlparse.c"
        var $42=(($41+252)&4294967295); //@line 3714 "xmlparse.c"
        var $43=(($42)&4294967295); //@line 3714 "xmlparse.c"
        var $44=HEAP[$43]; //@line 3714 "xmlparse.c"
        var $45=HEAP[$next_addr]; //@line 3714 "xmlparse.c"
        var $46=HEAP[$parser_addr]; //@line 3714 "xmlparse.c"
        var $47=(($46+252)&4294967295); //@line 3714 "xmlparse.c"
        var $48=HEAP[$tok_addr]; //@line 3714 "xmlparse.c"
        var $49=HEAP[$s_addr]; //@line 3714 "xmlparse.c"
        var $50=HEAP[$enc_addr]; //@line 3714 "xmlparse.c"
        var $51=FUNCTION_TABLE[$44]($47, $48, $49, $45, $50); //@line 3714 "xmlparse.c"
        HEAP[$role]=$51; //@line 3714 "xmlparse.c"
        var $52=HEAP[$role]; //@line 3715 "xmlparse.c"
        if ($52 == -1) {
          __label__ = 195; break;
        }
        else if ($52 == 0) {
          __label__ = 291; break;
        }
        else if ($52 == 1) {
          __label__ = 15; break;
        }
        else if ($52 == 2) {
          __label__ = 46; break;
        }
        else if ($52 == 3) {
          __label__ = 294; break;
        }
        else if ($52 == 4) {
          __label__ = 18; break;
        }
        else if ($52 == 5) {
          __label__ = 124; break;
        }
        else if ($52 == 6) {
          __label__ = 26; break;
        }
        else if ($52 == 7) {
          __label__ = 23; break;
        }
        else if ($52 == 8) {
          __label__ = 41; break;
        }
        else if ($52 == 9) {
          __label__ = 154; break;
        }
        else if ($52 == 10) {
          __label__ = 172; break;
        }
        else if ($52 == 11) {
          __label__ = 297; break;
        }
        else if ($52 == 12) {
          __label__ = 115; break;
        }
        else if ($52 == 13) {
          __label__ = 133; break;
        }
        else if ($52 == 14) {
          __label__ = 32; break;
        }
        else if ($52 == 15) {
          __label__ = 140; break;
        }
        else if ($52 == 16) {
          __label__ = 145; break;
        }
        else if ($52 == 17) {
          __label__ = 301; break;
        }
        else if ($52 == 18) {
          __label__ = 173; break;
        }
        else if ($52 == 19) {
          __label__ = 185; break;
        }
        else if ($52 == 20) {
          __label__ = 191; break;
        }
        else if ($52 == 21) {
          __label__ = 178; break;
        }
        else if ($52 == 22) {
          __label__ = 50; break;
        }
        else if ($52 == 23) {
          __label__ = 53; break;
        }
        else if ($52 == 24) {
          __label__ = 54; break;
        }
        else if ($52 == 25) {
          __label__ = 55; break;
        }
        else if ($52 == 26) {
          __label__ = 56; break;
        }
        else if ($52 == 27) {
          __label__ = 57; break;
        }
        else if ($52 == 28) {
          __label__ = 58; break;
        }
        else if ($52 == 29) {
          __label__ = 59; break;
        }
        else if ($52 == 30) {
          __label__ = 60; break;
        }
        else if ($52 == 31) {
          __label__ = 65; break;
        }
        else if ($52 == 32) {
          __label__ = 65; break;
        }
        else if ($52 == 33) {
          __label__ = 304; break;
        }
        else if ($52 == 34) {
          __label__ = 47; break;
        }
        else if ($52 == 35) {
          __label__ = 79; break;
        }
        else if ($52 == 36) {
          __label__ = 79; break;
        }
        else if ($52 == 37) {
          __label__ = 96; break;
        }
        else if ($52 == 38) {
          __label__ = 96; break;
        }
        else if ($52 == 39) {
          __label__ = 308; break;
        }
        else if ($52 == 40) {
          __label__ = 235; break;
        }
        else if ($52 == 41) {
          __label__ = 240; break;
        }
        else if ($52 == 42) {
          __label__ = 240; break;
        }
        else if ($52 == 43) {
          __label__ = 250; break;
        }
        else if ($52 == 44) {
          __label__ = 199; break;
        }
        else if ($52 == 45) {
          __label__ = 271; break;
        }
        else if ($52 == 46) {
          __label__ = 273; break;
        }
        else if ($52 == 47) {
          __label__ = 272; break;
        }
        else if ($52 == 48) {
          __label__ = 274; break;
        }
        else if ($52 == 49) {
          __label__ = 222; break;
        }
        else if ($52 == 50) {
          __label__ = 216; break;
        }
        else if ($52 == 51) {
          __label__ = 254; break;
        }
        else if ($52 == 52) {
          __label__ = 256; break;
        }
        else if ($52 == 53) {
          __label__ = 255; break;
        }
        else if ($52 == 54) {
          __label__ = 257; break;
        }
        else if ($52 == 55) {
          __label__ = 285; break;
        }
        else if ($52 == 56) {
          __label__ = 288; break;
        }
        else if ($52 == 57) {
          __label__ = 230; break;
        }
        else {
        __label__ = 310; break;
        }
        
      case 15: // $bb14
        var $53=HEAP[$next_addr]; //@line 3718 "xmlparse.c"
        var $54=HEAP[$parser_addr]; //@line 3718 "xmlparse.c"
        var $55=HEAP[$s_addr]; //@line 3718 "xmlparse.c"
        var $56=_processXmlDecl($54, 0, $55, $53); //@line 3718 "xmlparse.c"
        HEAP[$result]=$56; //@line 3718 "xmlparse.c"
        var $57=HEAP[$result]; //@line 3719 "xmlparse.c"
        var $58=((($57))|0)!=0; //@line 3719 "xmlparse.c"
        if ($58) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 3719 "xmlparse.c"
      case 16: // $bb15
        var $59=HEAP[$result]; //@line 3720 "xmlparse.c"
        HEAP[$0]=$59; //@line 3720 "xmlparse.c"
        __label__ = 317; break; //@line 3720 "xmlparse.c"
      case 17: // $bb16
        var $60=HEAP[$parser_addr]; //@line 3721 "xmlparse.c"
        var $61=(($60+144)&4294967295); //@line 3721 "xmlparse.c"
        var $62=HEAP[$61]; //@line 3721 "xmlparse.c"
        HEAP[$enc_addr]=$62; //@line 3721 "xmlparse.c"
        HEAP[$handleDefault]=0; //@line 3722 "xmlparse.c"
        __label__ = 310; break; //@line 3722 "xmlparse.c"
      case 18: // $bb17
        var $63=HEAP[$parser_addr]; //@line 3726 "xmlparse.c"
        var $64=(($63+84)&4294967295); //@line 3726 "xmlparse.c"
        var $65=HEAP[$64]; //@line 3726 "xmlparse.c"
        var $66=($65)!=0; //@line 3726 "xmlparse.c"
        if ($66) { __label__ = 19; break; } else { __label__ = 22; break; } //@line 3726 "xmlparse.c"
      case 19: // $bb18
        var $67=HEAP[$next_addr]; //@line 3727 "xmlparse.c"
        var $68=HEAP[$parser_addr]; //@line 3727 "xmlparse.c"
        var $69=(($68+400)&4294967295); //@line 3727 "xmlparse.c"
        var $70=HEAP[$enc_addr]; //@line 3727 "xmlparse.c"
        var $71=HEAP[$s_addr]; //@line 3727 "xmlparse.c"
        var $72=_poolStoreString($69, $70, $71, $67); //@line 3727 "xmlparse.c"
        var $73=HEAP[$parser_addr]; //@line 3727 "xmlparse.c"
        var $74=(($73+304)&4294967295); //@line 3727 "xmlparse.c"
        HEAP[$74]=$72; //@line 3727 "xmlparse.c"
        var $75=HEAP[$parser_addr]; //@line 3728 "xmlparse.c"
        var $76=(($75+304)&4294967295); //@line 3728 "xmlparse.c"
        var $77=HEAP[$76]; //@line 3728 "xmlparse.c"
        var $78=($77)==0; //@line 3728 "xmlparse.c"
        if ($78) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 3728 "xmlparse.c"
      case 20: // $bb19
        HEAP[$0]=1; //@line 3729 "xmlparse.c"
        __label__ = 317; break; //@line 3729 "xmlparse.c"
      case 21: // $bb20
        var $79=HEAP[$parser_addr]; //@line 3730 "xmlparse.c"
        var $80=(($79+400)&4294967295); //@line 3730 "xmlparse.c"
        var $81=(($80+12)&4294967295); //@line 3730 "xmlparse.c"
        var $82=HEAP[$81]; //@line 3730 "xmlparse.c"
        var $83=HEAP[$parser_addr]; //@line 3730 "xmlparse.c"
        var $84=(($83+400)&4294967295); //@line 3730 "xmlparse.c"
        var $85=(($84+16)&4294967295); //@line 3730 "xmlparse.c"
        HEAP[$85]=$82; //@line 3730 "xmlparse.c"
        var $86=HEAP[$parser_addr]; //@line 3731 "xmlparse.c"
        var $87=(($86+312)&4294967295); //@line 3731 "xmlparse.c"
        HEAP[$87]=0; //@line 3731 "xmlparse.c"
        HEAP[$handleDefault]=0; //@line 3732 "xmlparse.c"
        __label__ = 22; break; //@line 3732 "xmlparse.c"
      case 22: // $bb21
        var $88=HEAP[$parser_addr]; //@line 3734 "xmlparse.c"
        var $89=(($88+308)&4294967295); //@line 3734 "xmlparse.c"
        HEAP[$89]=0; //@line 3734 "xmlparse.c"
        __label__ = 310; break; //@line 3734 "xmlparse.c"
      case 23: // $bb22
        var $90=HEAP[$parser_addr]; //@line 3737 "xmlparse.c"
        var $91=(($90+84)&4294967295); //@line 3737 "xmlparse.c"
        var $92=HEAP[$91]; //@line 3737 "xmlparse.c"
        var $93=($92)!=0; //@line 3737 "xmlparse.c"
        if ($93) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 3737 "xmlparse.c"
      case 24: // $bb23
        var $94=HEAP[$parser_addr]; //@line 3738 "xmlparse.c"
        var $95=(($94+84)&4294967295); //@line 3738 "xmlparse.c"
        var $96=HEAP[$95]; //@line 3738 "xmlparse.c"
        var $97=HEAP[$parser_addr]; //@line 3738 "xmlparse.c"
        var $98=(($97+312)&4294967295); //@line 3738 "xmlparse.c"
        var $99=HEAP[$98]; //@line 3738 "xmlparse.c"
        var $100=HEAP[$parser_addr]; //@line 3738 "xmlparse.c"
        var $101=(($100+308)&4294967295); //@line 3738 "xmlparse.c"
        var $102=HEAP[$101]; //@line 3738 "xmlparse.c"
        var $103=HEAP[$parser_addr]; //@line 3738 "xmlparse.c"
        var $104=(($103+304)&4294967295); //@line 3738 "xmlparse.c"
        var $105=HEAP[$104]; //@line 3738 "xmlparse.c"
        var $106=HEAP[$parser_addr]; //@line 3738 "xmlparse.c"
        var $107=(($106+4)&4294967295); //@line 3738 "xmlparse.c"
        var $108=HEAP[$107]; //@line 3738 "xmlparse.c"
        FUNCTION_TABLE[$96]($108, $105, $102, $99, 1); //@line 3738 "xmlparse.c"
        var $109=HEAP[$parser_addr]; //@line 3740 "xmlparse.c"
        var $110=(($109+304)&4294967295); //@line 3740 "xmlparse.c"
        HEAP[$110]=0; //@line 3740 "xmlparse.c"
        var $111=HEAP[$parser_addr]; //@line 3741 "xmlparse.c"
        var $112=(($111+400)&4294967295); //@line 3741 "xmlparse.c"
        _poolClear($112); //@line 3741 "xmlparse.c"
        HEAP[$handleDefault]=0; //@line 3742 "xmlparse.c"
        __label__ = 25; break; //@line 3742 "xmlparse.c"
      case 25: // $bb24
        __label__ = 310; break; //@line 3742 "xmlparse.c"
      case 26: // $bb25
        var $113=HEAP[$dtd]; //@line 3765 "xmlparse.c"
        var $114=(($113+129)&4294967295); //@line 3765 "xmlparse.c"
        HEAP[$114]=1; //@line 3765 "xmlparse.c"
        var $115=HEAP[$parser_addr]; //@line 3766 "xmlparse.c"
        var $116=(($115+84)&4294967295); //@line 3766 "xmlparse.c"
        var $117=HEAP[$116]; //@line 3766 "xmlparse.c"
        var $118=($117)!=0; //@line 3766 "xmlparse.c"
        if ($118) { __label__ = 27; break; } else { __label__ = 32; break; } //@line 3766 "xmlparse.c"
      case 27: // $bb26
        var $119=HEAP[$enc_addr]; //@line 3767 "xmlparse.c"
        var $120=(($119+52)&4294967295); //@line 3767 "xmlparse.c"
        var $121=HEAP[$120]; //@line 3767 "xmlparse.c"
        var $122=HEAP[$next_addr]; //@line 3767 "xmlparse.c"
        var $123=HEAP[$enc_addr]; //@line 3767 "xmlparse.c"
        var $124=HEAP[$s_addr]; //@line 3767 "xmlparse.c"
        var $125=HEAP[$eventPP]; //@line 3767 "xmlparse.c"
        var $126=FUNCTION_TABLE[$121]($123, $124, $122, $125); //@line 3767 "xmlparse.c"
        var $127=((($126))|0)==0; //@line 3767 "xmlparse.c"
        if ($127) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 3767 "xmlparse.c"
      case 28: // $bb27
        HEAP[$0]=32; //@line 3768 "xmlparse.c"
        __label__ = 317; break; //@line 3768 "xmlparse.c"
      case 29: // $bb28
        var $128=HEAP[$next_addr]; //@line 3769 "xmlparse.c"
        var $129=HEAP[$enc_addr]; //@line 3769 "xmlparse.c"
        var $130=(($129+64)&4294967295); //@line 3769 "xmlparse.c"
        var $131=HEAP[$130]; //@line 3769 "xmlparse.c"
        var $132=((0 - ($131))&4294967295); //@line 3769 "xmlparse.c"
        var $133=(($128+$132)&4294967295); //@line 3769 "xmlparse.c"
        var $134=HEAP[$enc_addr]; //@line 3769 "xmlparse.c"
        var $135=(($134+64)&4294967295); //@line 3769 "xmlparse.c"
        var $136=HEAP[$135]; //@line 3769 "xmlparse.c"
        var $137=HEAP[$s_addr]; //@line 3769 "xmlparse.c"
        var $138=(($137+$136)&4294967295); //@line 3769 "xmlparse.c"
        var $139=HEAP[$parser_addr]; //@line 3769 "xmlparse.c"
        var $140=(($139+400)&4294967295); //@line 3769 "xmlparse.c"
        var $141=HEAP[$enc_addr]; //@line 3769 "xmlparse.c"
        var $142=_poolStoreString($140, $141, $138, $133); //@line 3769 "xmlparse.c"
        var $143=HEAP[$parser_addr]; //@line 3769 "xmlparse.c"
        var $144=(($143+312)&4294967295); //@line 3769 "xmlparse.c"
        HEAP[$144]=$142; //@line 3769 "xmlparse.c"
        var $145=HEAP[$parser_addr]; //@line 3772 "xmlparse.c"
        var $146=(($145+312)&4294967295); //@line 3772 "xmlparse.c"
        var $147=HEAP[$146]; //@line 3772 "xmlparse.c"
        var $148=($147)==0; //@line 3772 "xmlparse.c"
        if ($148) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 3772 "xmlparse.c"
      case 30: // $bb29
        HEAP[$0]=1; //@line 3773 "xmlparse.c"
        __label__ = 317; break; //@line 3773 "xmlparse.c"
      case 31: // $bb30
        var $149=HEAP[$parser_addr]; //@line 3774 "xmlparse.c"
        var $150=(($149+312)&4294967295); //@line 3774 "xmlparse.c"
        var $151=HEAP[$150]; //@line 3774 "xmlparse.c"
        _normalizePublicId($151); //@line 3774 "xmlparse.c"
        var $152=HEAP[$parser_addr]; //@line 3775 "xmlparse.c"
        var $153=(($152+400)&4294967295); //@line 3775 "xmlparse.c"
        var $154=(($153+12)&4294967295); //@line 3775 "xmlparse.c"
        var $155=HEAP[$154]; //@line 3775 "xmlparse.c"
        var $156=HEAP[$parser_addr]; //@line 3775 "xmlparse.c"
        var $157=(($156+400)&4294967295); //@line 3775 "xmlparse.c"
        var $158=(($157+16)&4294967295); //@line 3775 "xmlparse.c"
        HEAP[$158]=$155; //@line 3775 "xmlparse.c"
        HEAP[$handleDefault]=0; //@line 3776 "xmlparse.c"
        __label__ = 34; break; //@line 3776 "xmlparse.c"
      case 32: // $bb31
        var $159=HEAP[$enc_addr]; //@line 3781 "xmlparse.c"
        var $160=(($159+52)&4294967295); //@line 3781 "xmlparse.c"
        var $161=HEAP[$160]; //@line 3781 "xmlparse.c"
        var $162=HEAP[$next_addr]; //@line 3781 "xmlparse.c"
        var $163=HEAP[$enc_addr]; //@line 3781 "xmlparse.c"
        var $164=HEAP[$s_addr]; //@line 3781 "xmlparse.c"
        var $165=HEAP[$eventPP]; //@line 3781 "xmlparse.c"
        var $166=FUNCTION_TABLE[$161]($163, $164, $162, $165); //@line 3781 "xmlparse.c"
        var $167=((($166))|0)==0; //@line 3781 "xmlparse.c"
        if ($167) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 3781 "xmlparse.c"
      case 33: // $bb32
        HEAP[$0]=32; //@line 3782 "xmlparse.c"
        __label__ = 317; break; //@line 3782 "xmlparse.c"
      case 34: // $alreadyChecked
        var $168=HEAP[$dtd]; //@line 3784 "xmlparse.c"
        var $169=(($168+128)&4294967295); //@line 3784 "xmlparse.c"
        var $170=HEAP[$169]; //@line 3784 "xmlparse.c"
        var $171=reSign(($170), 8, 0)!=0; //@line 3784 "xmlparse.c"
        if ($171) { __label__ = 35; break; } else { __label__ = 40; break; } //@line 3784 "xmlparse.c"
      case 35: // $bb33
        var $172=HEAP[$parser_addr]; //@line 3784 "xmlparse.c"
        var $173=(($172+300)&4294967295); //@line 3784 "xmlparse.c"
        var $174=HEAP[$173]; //@line 3784 "xmlparse.c"
        var $175=($174)!=0; //@line 3784 "xmlparse.c"
        if ($175) { __label__ = 36; break; } else { __label__ = 40; break; } //@line 3784 "xmlparse.c"
      case 36: // $bb34
        var $176=HEAP[$next_addr]; //@line 3788 "xmlparse.c"
        var $177=HEAP[$enc_addr]; //@line 3788 "xmlparse.c"
        var $178=(($177+64)&4294967295); //@line 3788 "xmlparse.c"
        var $179=HEAP[$178]; //@line 3788 "xmlparse.c"
        var $180=((0 - ($179))&4294967295); //@line 3788 "xmlparse.c"
        var $181=(($176+$180)&4294967295); //@line 3788 "xmlparse.c"
        var $182=HEAP[$enc_addr]; //@line 3788 "xmlparse.c"
        var $183=(($182+64)&4294967295); //@line 3788 "xmlparse.c"
        var $184=HEAP[$183]; //@line 3788 "xmlparse.c"
        var $185=HEAP[$s_addr]; //@line 3788 "xmlparse.c"
        var $186=(($185+$184)&4294967295); //@line 3788 "xmlparse.c"
        var $187=HEAP[$dtd]; //@line 3788 "xmlparse.c"
        var $188=(($187+80)&4294967295); //@line 3788 "xmlparse.c"
        var $189=HEAP[$enc_addr]; //@line 3788 "xmlparse.c"
        var $190=_poolStoreString($188, $189, $186, $181); //@line 3788 "xmlparse.c"
        HEAP[$tem]=$190; //@line 3788 "xmlparse.c"
        var $191=HEAP[$tem]; //@line 3789 "xmlparse.c"
        var $192=($191)==0; //@line 3789 "xmlparse.c"
        if ($192) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 3789 "xmlparse.c"
      case 37: // $bb35
        HEAP[$0]=1; //@line 3790 "xmlparse.c"
        __label__ = 317; break; //@line 3790 "xmlparse.c"
      case 38: // $bb36
        var $193=HEAP[$tem]; //@line 3791 "xmlparse.c"
        _normalizePublicId($193); //@line 3791 "xmlparse.c"
        var $194=HEAP[$parser_addr]; //@line 3792 "xmlparse.c"
        var $195=(($194+300)&4294967295); //@line 3792 "xmlparse.c"
        var $196=HEAP[$195]; //@line 3792 "xmlparse.c"
        var $197=(($196+24)&4294967295); //@line 3792 "xmlparse.c"
        var $198=HEAP[$tem]; //@line 3792 "xmlparse.c"
        HEAP[$197]=$198; //@line 3792 "xmlparse.c"
        var $199=HEAP[$dtd]; //@line 3793 "xmlparse.c"
        var $200=(($199+80)&4294967295); //@line 3793 "xmlparse.c"
        var $201=(($200+12)&4294967295); //@line 3793 "xmlparse.c"
        var $202=HEAP[$201]; //@line 3793 "xmlparse.c"
        var $203=HEAP[$dtd]; //@line 3793 "xmlparse.c"
        var $204=(($203+80)&4294967295); //@line 3793 "xmlparse.c"
        var $205=(($204+16)&4294967295); //@line 3793 "xmlparse.c"
        HEAP[$205]=$202; //@line 3793 "xmlparse.c"
        var $206=HEAP[$parser_addr]; //@line 3794 "xmlparse.c"
        var $207=(($206+136)&4294967295); //@line 3794 "xmlparse.c"
        var $208=HEAP[$207]; //@line 3794 "xmlparse.c"
        var $209=($208)!=0; //@line 3794 "xmlparse.c"
        if ($209) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 3794 "xmlparse.c"
      case 39: // $bb37
        HEAP[$handleDefault]=0; //@line 3795 "xmlparse.c"
        __label__ = 40; break; //@line 3795 "xmlparse.c"
      case 40: // $bb38
        __label__ = 310; break; //@line 3795 "xmlparse.c"
      case 41: // $bb39
        var $210=HEAP[$parser_addr]; //@line 3799 "xmlparse.c"
        var $211=(($210+304)&4294967295); //@line 3799 "xmlparse.c"
        var $212=HEAP[$211]; //@line 3799 "xmlparse.c"
        var $213=($212)!=0; //@line 3799 "xmlparse.c"
        if ($213) { __label__ = 42; break; } else { __label__ = 43; break; } //@line 3799 "xmlparse.c"
      case 42: // $bb40
        var $214=HEAP[$parser_addr]; //@line 3800 "xmlparse.c"
        var $215=(($214+84)&4294967295); //@line 3800 "xmlparse.c"
        var $216=HEAP[$215]; //@line 3800 "xmlparse.c"
        var $217=HEAP[$parser_addr]; //@line 3800 "xmlparse.c"
        var $218=(($217+312)&4294967295); //@line 3800 "xmlparse.c"
        var $219=HEAP[$218]; //@line 3800 "xmlparse.c"
        var $220=HEAP[$parser_addr]; //@line 3800 "xmlparse.c"
        var $221=(($220+308)&4294967295); //@line 3800 "xmlparse.c"
        var $222=HEAP[$221]; //@line 3800 "xmlparse.c"
        var $223=HEAP[$parser_addr]; //@line 3800 "xmlparse.c"
        var $224=(($223+304)&4294967295); //@line 3800 "xmlparse.c"
        var $225=HEAP[$224]; //@line 3800 "xmlparse.c"
        var $226=HEAP[$parser_addr]; //@line 3800 "xmlparse.c"
        var $227=(($226+4)&4294967295); //@line 3800 "xmlparse.c"
        var $228=HEAP[$227]; //@line 3800 "xmlparse.c"
        FUNCTION_TABLE[$216]($228, $225, $222, $219, 0); //@line 3800 "xmlparse.c"
        var $229=HEAP[$parser_addr]; //@line 3802 "xmlparse.c"
        var $230=(($229+400)&4294967295); //@line 3802 "xmlparse.c"
        _poolClear($230); //@line 3802 "xmlparse.c"
        HEAP[$handleDefault]=0; //@line 3803 "xmlparse.c"
        __label__ = 43; break; //@line 3803 "xmlparse.c"
      case 43: // $bb41
        var $231=HEAP[$parser_addr]; //@line 3844 "xmlparse.c"
        var $232=(($231+88)&4294967295); //@line 3844 "xmlparse.c"
        var $233=HEAP[$232]; //@line 3844 "xmlparse.c"
        var $234=($233)!=0; //@line 3844 "xmlparse.c"
        if ($234) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 3844 "xmlparse.c"
      case 44: // $bb42
        var $235=HEAP[$parser_addr]; //@line 3845 "xmlparse.c"
        var $236=(($235+88)&4294967295); //@line 3845 "xmlparse.c"
        var $237=HEAP[$236]; //@line 3845 "xmlparse.c"
        var $238=HEAP[$parser_addr]; //@line 3845 "xmlparse.c"
        var $239=(($238+4)&4294967295); //@line 3845 "xmlparse.c"
        var $240=HEAP[$239]; //@line 3845 "xmlparse.c"
        FUNCTION_TABLE[$237]($240); //@line 3845 "xmlparse.c"
        HEAP[$handleDefault]=0; //@line 3846 "xmlparse.c"
        __label__ = 45; break; //@line 3846 "xmlparse.c"
      case 45: // $bb43
        __label__ = 310; break; //@line 3846 "xmlparse.c"
      case 46: // $bb44
        var $241=HEAP[$parser_addr]; //@line 3886 "xmlparse.c"
        var $242=(($241+264)&4294967295); //@line 3886 "xmlparse.c"
        HEAP[$242]=(FUNCTION_TABLE_OFFSET + 62); //@line 3886 "xmlparse.c"
        var $243=HEAP[$parser_addr]; //@line 3887 "xmlparse.c"
        var $244=HEAP[$s_addr]; //@line 3887 "xmlparse.c"
        var $245=HEAP[$end_addr]; //@line 3887 "xmlparse.c"
        var $246=HEAP[$nextPtr_addr]; //@line 3887 "xmlparse.c"
        var $247=_contentProcessor($243, $244, $245, $246); //@line 3887 "xmlparse.c"
        HEAP[$0]=$247; //@line 3887 "xmlparse.c"
        __label__ = 317; break; //@line 3887 "xmlparse.c"
      case 47: // $bb45
        var $248=HEAP[$next_addr]; //@line 3889 "xmlparse.c"
        var $249=HEAP[$parser_addr]; //@line 3889 "xmlparse.c"
        var $250=HEAP[$enc_addr]; //@line 3889 "xmlparse.c"
        var $251=HEAP[$s_addr]; //@line 3889 "xmlparse.c"
        var $252=_getElementType($249, $250, $251, $248); //@line 3889 "xmlparse.c"
        var $253=HEAP[$parser_addr]; //@line 3889 "xmlparse.c"
        var $254=(($253+328)&4294967295); //@line 3889 "xmlparse.c"
        HEAP[$254]=$252; //@line 3889 "xmlparse.c"
        var $255=HEAP[$parser_addr]; //@line 3890 "xmlparse.c"
        var $256=(($255+328)&4294967295); //@line 3890 "xmlparse.c"
        var $257=HEAP[$256]; //@line 3890 "xmlparse.c"
        var $258=($257)==0; //@line 3890 "xmlparse.c"
        if ($258) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 3890 "xmlparse.c"
      case 48: // $bb46
        HEAP[$0]=1; //@line 3891 "xmlparse.c"
        __label__ = 317; break; //@line 3891 "xmlparse.c"
      case 49: // $bb47
        __label__ = 61; break; //@line 3891 "xmlparse.c"
      case 50: // $bb48
        var $259=HEAP[$next_addr]; //@line 3894 "xmlparse.c"
        var $260=HEAP[$parser_addr]; //@line 3894 "xmlparse.c"
        var $261=HEAP[$enc_addr]; //@line 3894 "xmlparse.c"
        var $262=HEAP[$s_addr]; //@line 3894 "xmlparse.c"
        var $263=_getAttributeId($260, $261, $262, $259); //@line 3894 "xmlparse.c"
        var $264=HEAP[$parser_addr]; //@line 3894 "xmlparse.c"
        var $265=(($264+332)&4294967295); //@line 3894 "xmlparse.c"
        HEAP[$265]=$263; //@line 3894 "xmlparse.c"
        var $266=HEAP[$parser_addr]; //@line 3895 "xmlparse.c"
        var $267=(($266+332)&4294967295); //@line 3895 "xmlparse.c"
        var $268=HEAP[$267]; //@line 3895 "xmlparse.c"
        var $269=($268)==0; //@line 3895 "xmlparse.c"
        if ($269) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 3895 "xmlparse.c"
      case 51: // $bb49
        HEAP[$0]=1; //@line 3896 "xmlparse.c"
        __label__ = 317; break; //@line 3896 "xmlparse.c"
      case 52: // $bb50
        var $270=HEAP[$parser_addr]; //@line 3897 "xmlparse.c"
        var $271=(($270+336)&4294967295); //@line 3897 "xmlparse.c"
        HEAP[$271]=0; //@line 3897 "xmlparse.c"
        var $272=HEAP[$parser_addr]; //@line 3898 "xmlparse.c"
        var $273=(($272+316)&4294967295); //@line 3898 "xmlparse.c"
        HEAP[$273]=0; //@line 3898 "xmlparse.c"
        var $274=HEAP[$parser_addr]; //@line 3899 "xmlparse.c"
        var $275=(($274+337)&4294967295); //@line 3899 "xmlparse.c"
        HEAP[$275]=0; //@line 3899 "xmlparse.c"
        __label__ = 61; break; //@line 3899 "xmlparse.c"
      case 53: // $bb51
        var $276=HEAP[$parser_addr]; //@line 3902 "xmlparse.c"
        var $277=(($276+336)&4294967295); //@line 3902 "xmlparse.c"
        HEAP[$277]=1; //@line 3902 "xmlparse.c"
        var $278=HEAP[$parser_addr]; //@line 3903 "xmlparse.c"
        var $279=(($278+316)&4294967295); //@line 3903 "xmlparse.c"
        HEAP[$279]=((_atypeCDATA_5618)&4294967295); //@line 3903 "xmlparse.c"
        __label__ = 61; break; //@line 3903 "xmlparse.c"
      case 54: // $bb52
        var $280=HEAP[$parser_addr]; //@line 3906 "xmlparse.c"
        var $281=(($280+337)&4294967295); //@line 3906 "xmlparse.c"
        HEAP[$281]=1; //@line 3906 "xmlparse.c"
        var $282=HEAP[$parser_addr]; //@line 3907 "xmlparse.c"
        var $283=(($282+316)&4294967295); //@line 3907 "xmlparse.c"
        HEAP[$283]=((_atypeID_5619)&4294967295); //@line 3907 "xmlparse.c"
        __label__ = 61; break; //@line 3907 "xmlparse.c"
      case 55: // $bb53
        var $284=HEAP[$parser_addr]; //@line 3910 "xmlparse.c"
        var $285=(($284+316)&4294967295); //@line 3910 "xmlparse.c"
        HEAP[$285]=((_atypeIDREF_5620)&4294967295); //@line 3910 "xmlparse.c"
        __label__ = 61; break; //@line 3910 "xmlparse.c"
      case 56: // $bb54
        var $286=HEAP[$parser_addr]; //@line 3913 "xmlparse.c"
        var $287=(($286+316)&4294967295); //@line 3913 "xmlparse.c"
        HEAP[$287]=((_atypeIDREFS_5621)&4294967295); //@line 3913 "xmlparse.c"
        __label__ = 61; break; //@line 3913 "xmlparse.c"
      case 57: // $bb55
        var $288=HEAP[$parser_addr]; //@line 3916 "xmlparse.c"
        var $289=(($288+316)&4294967295); //@line 3916 "xmlparse.c"
        HEAP[$289]=((_atypeENTITY_5622)&4294967295); //@line 3916 "xmlparse.c"
        __label__ = 61; break; //@line 3916 "xmlparse.c"
      case 58: // $bb56
        var $290=HEAP[$parser_addr]; //@line 3919 "xmlparse.c"
        var $291=(($290+316)&4294967295); //@line 3919 "xmlparse.c"
        HEAP[$291]=((_atypeENTITIES_5623)&4294967295); //@line 3919 "xmlparse.c"
        __label__ = 61; break; //@line 3919 "xmlparse.c"
      case 59: // $bb57
        var $292=HEAP[$parser_addr]; //@line 3922 "xmlparse.c"
        var $293=(($292+316)&4294967295); //@line 3922 "xmlparse.c"
        HEAP[$293]=((_atypeNMTOKEN_5624)&4294967295); //@line 3922 "xmlparse.c"
        __label__ = 61; break; //@line 3922 "xmlparse.c"
      case 60: // $bb58
        var $294=HEAP[$parser_addr]; //@line 3925 "xmlparse.c"
        var $295=(($294+316)&4294967295); //@line 3925 "xmlparse.c"
        HEAP[$295]=((_atypeNMTOKENS_5625)&4294967295); //@line 3925 "xmlparse.c"
        __label__ = 61; break; //@line 3926 "xmlparse.c"
      case 61: // $checkAttListDeclHandler
        var $296=HEAP[$dtd]; //@line 3927 "xmlparse.c"
        var $297=(($296+128)&4294967295); //@line 3927 "xmlparse.c"
        var $298=HEAP[$297]; //@line 3927 "xmlparse.c"
        var $299=reSign(($298), 8, 0)!=0; //@line 3927 "xmlparse.c"
        if ($299) { __label__ = 62; break; } else { __label__ = 64; break; } //@line 3927 "xmlparse.c"
      case 62: // $bb59
        var $300=HEAP[$parser_addr]; //@line 3927 "xmlparse.c"
        var $301=(($300+132)&4294967295); //@line 3927 "xmlparse.c"
        var $302=HEAP[$301]; //@line 3927 "xmlparse.c"
        var $303=($302)!=0; //@line 3927 "xmlparse.c"
        if ($303) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 3927 "xmlparse.c"
      case 63: // $bb60
        HEAP[$handleDefault]=0; //@line 3928 "xmlparse.c"
        __label__ = 64; break; //@line 3928 "xmlparse.c"
      case 64: // $bb61
        __label__ = 310; break; //@line 3928 "xmlparse.c"
      case 65: // $bb62
        var $304=HEAP[$dtd]; //@line 3932 "xmlparse.c"
        var $305=(($304+128)&4294967295); //@line 3932 "xmlparse.c"
        var $306=HEAP[$305]; //@line 3932 "xmlparse.c"
        var $307=reSign(($306), 8, 0)!=0; //@line 3932 "xmlparse.c"
        if ($307) { __label__ = 66; break; } else { __label__ = 78; break; } //@line 3932 "xmlparse.c"
      case 66: // $bb63
        var $308=HEAP[$parser_addr]; //@line 3932 "xmlparse.c"
        var $309=(($308+132)&4294967295); //@line 3932 "xmlparse.c"
        var $310=HEAP[$309]; //@line 3932 "xmlparse.c"
        var $311=($310)!=0; //@line 3932 "xmlparse.c"
        if ($311) { __label__ = 67; break; } else { __label__ = 78; break; } //@line 3932 "xmlparse.c"
      case 67: // $bb64
        var $312=HEAP[$parser_addr]; //@line 3934 "xmlparse.c"
        var $313=(($312+316)&4294967295); //@line 3934 "xmlparse.c"
        var $314=HEAP[$313]; //@line 3934 "xmlparse.c"
        var $315=($314)!=0; //@line 3934 "xmlparse.c"
        if ($315) { __label__ = 68; break; } else { __label__ = 69; break; } //@line 3934 "xmlparse.c"
      case 68: // $bb65
        HEAP[$prefix]=((_enumValueSep_5627)&4294967295); //@line 3935 "xmlparse.c"
        __label__ = 73; break; //@line 3935 "xmlparse.c"
      case 69: // $bb66
        var $316=HEAP[$role]; //@line 3938 "xmlparse.c"
        var $317=((($316))|0)==32; //@line 3938 "xmlparse.c"
        if ($317) { __label__ = 70; break; } else { __label__ = 71; break; } //@line 3938 "xmlparse.c"
      case 70: // $bb67
        HEAP[$iftmp_192]=((_notationPrefix_5626)&4294967295); //@line 3938 "xmlparse.c"
        __label__ = 72; break; //@line 3938 "xmlparse.c"
      case 71: // $bb68
        HEAP[$iftmp_192]=((_enumValueStart_5628)&4294967295); //@line 3938 "xmlparse.c"
        __label__ = 72; break; //@line 3938 "xmlparse.c"
      case 72: // $bb69
        var $318=HEAP[$iftmp_192]; //@line 3938 "xmlparse.c"
        HEAP[$prefix]=$318; //@line 3938 "xmlparse.c"
        __label__ = 73; break; //@line 3938 "xmlparse.c"
      case 73: // $bb70
        var $319=HEAP[$parser_addr]; //@line 3942 "xmlparse.c"
        var $320=(($319+400)&4294967295); //@line 3942 "xmlparse.c"
        var $321=HEAP[$prefix]; //@line 3942 "xmlparse.c"
        var $322=_poolAppendString($320, $321); //@line 3942 "xmlparse.c"
        var $323=($322)==0; //@line 3942 "xmlparse.c"
        if ($323) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 3942 "xmlparse.c"
      case 74: // $bb71
        HEAP[$0]=1; //@line 3943 "xmlparse.c"
        __label__ = 317; break; //@line 3943 "xmlparse.c"
      case 75: // $bb72
        var $324=HEAP[$next_addr]; //@line 3944 "xmlparse.c"
        var $325=HEAP[$parser_addr]; //@line 3944 "xmlparse.c"
        var $326=(($325+400)&4294967295); //@line 3944 "xmlparse.c"
        var $327=HEAP[$enc_addr]; //@line 3944 "xmlparse.c"
        var $328=HEAP[$s_addr]; //@line 3944 "xmlparse.c"
        var $329=_poolAppend($326, $327, $328, $324); //@line 3944 "xmlparse.c"
        var $330=($329)==0; //@line 3944 "xmlparse.c"
        if ($330) { __label__ = 76; break; } else { __label__ = 77; break; } //@line 3944 "xmlparse.c"
      case 76: // $bb73
        HEAP[$0]=1; //@line 3945 "xmlparse.c"
        __label__ = 317; break; //@line 3945 "xmlparse.c"
      case 77: // $bb74
        var $331=HEAP[$parser_addr]; //@line 3946 "xmlparse.c"
        var $332=(($331+400)&4294967295); //@line 3946 "xmlparse.c"
        var $333=(($332+16)&4294967295); //@line 3946 "xmlparse.c"
        var $334=HEAP[$333]; //@line 3946 "xmlparse.c"
        var $335=HEAP[$parser_addr]; //@line 3946 "xmlparse.c"
        var $336=(($335+316)&4294967295); //@line 3946 "xmlparse.c"
        HEAP[$336]=$334; //@line 3946 "xmlparse.c"
        HEAP[$handleDefault]=0; //@line 3947 "xmlparse.c"
        __label__ = 78; break; //@line 3947 "xmlparse.c"
      case 78: // $bb75
        __label__ = 310; break; //@line 3947 "xmlparse.c"
      case 79: // $bb76
        var $337=HEAP[$dtd]; //@line 3952 "xmlparse.c"
        var $338=(($337+128)&4294967295); //@line 3952 "xmlparse.c"
        var $339=HEAP[$338]; //@line 3952 "xmlparse.c"
        var $340=reSign(($339), 8, 0)!=0; //@line 3952 "xmlparse.c"
        if ($340) { __label__ = 80; break; } else { __label__ = 95; break; } //@line 3952 "xmlparse.c"
      case 80: // $bb77
        var $341=HEAP[$parser_addr]; //@line 3953 "xmlparse.c"
        var $342=(($341+337)&4294967295); //@line 3953 "xmlparse.c"
        var $343=HEAP[$342]; //@line 3953 "xmlparse.c"
        var $344=unSign(($343), 8, 0); //@line 3953 "xmlparse.c"
        var $345=HEAP[$parser_addr]; //@line 3953 "xmlparse.c"
        var $346=(($345+336)&4294967295); //@line 3953 "xmlparse.c"
        var $347=HEAP[$346]; //@line 3953 "xmlparse.c"
        var $348=unSign(($347), 8, 0); //@line 3953 "xmlparse.c"
        var $349=HEAP[$parser_addr]; //@line 3953 "xmlparse.c"
        var $350=(($349+332)&4294967295); //@line 3953 "xmlparse.c"
        var $351=HEAP[$350]; //@line 3953 "xmlparse.c"
        var $352=HEAP[$parser_addr]; //@line 3953 "xmlparse.c"
        var $353=(($352+328)&4294967295); //@line 3953 "xmlparse.c"
        var $354=HEAP[$353]; //@line 3953 "xmlparse.c"
        var $355=((($348)) & 255); //@line 3953 "xmlparse.c"
        var $356=((($344)) & 255); //@line 3953 "xmlparse.c"
        var $357=HEAP[$parser_addr]; //@line 3953 "xmlparse.c"
        var $358=_defineAttribute($354, $351, $355, $356, 0, $357); //@line 3953 "xmlparse.c"
        var $359=((($358))|0)==0; //@line 3953 "xmlparse.c"
        if ($359) { __label__ = 81; break; } else { __label__ = 82; break; } //@line 3953 "xmlparse.c"
      case 81: // $bb78
        HEAP[$0]=1; //@line 3956 "xmlparse.c"
        __label__ = 317; break; //@line 3956 "xmlparse.c"
      case 82: // $bb79
        var $360=HEAP[$parser_addr]; //@line 3957 "xmlparse.c"
        var $361=(($360+132)&4294967295); //@line 3957 "xmlparse.c"
        var $362=HEAP[$361]; //@line 3957 "xmlparse.c"
        var $363=($362)!=0; //@line 3957 "xmlparse.c"
        if ($363) { __label__ = 83; break; } else { __label__ = 95; break; } //@line 3957 "xmlparse.c"
      case 83: // $bb80
        var $364=HEAP[$parser_addr]; //@line 3957 "xmlparse.c"
        var $365=(($364+316)&4294967295); //@line 3957 "xmlparse.c"
        var $366=HEAP[$365]; //@line 3957 "xmlparse.c"
        var $367=($366)!=0; //@line 3957 "xmlparse.c"
        if ($367) { __label__ = 84; break; } else { __label__ = 95; break; } //@line 3957 "xmlparse.c"
      case 84: // $bb81
        var $368=HEAP[$parser_addr]; //@line 3958 "xmlparse.c"
        var $369=(($368+316)&4294967295); //@line 3958 "xmlparse.c"
        var $370=HEAP[$369]; //@line 3958 "xmlparse.c"
        var $371=HEAP[$370]; //@line 3958 "xmlparse.c"
        var $372=reSign(($371), 8, 0)==40; //@line 3958 "xmlparse.c"
        if ($372) { __label__ = 87; break; } else { __label__ = 85; break; } //@line 3958 "xmlparse.c"
      case 85: // $bb82
        var $373=HEAP[$parser_addr]; //@line 3958 "xmlparse.c"
        var $374=(($373+316)&4294967295); //@line 3958 "xmlparse.c"
        var $375=HEAP[$374]; //@line 3958 "xmlparse.c"
        var $376=HEAP[$375]; //@line 3958 "xmlparse.c"
        var $377=reSign(($376), 8, 0)!=78; //@line 3958 "xmlparse.c"
        if ($377) { __label__ = 94; break; } else { __label__ = 86; break; } //@line 3958 "xmlparse.c"
      case 86: // $bb83
        var $378=HEAP[$parser_addr]; //@line 3958 "xmlparse.c"
        var $379=(($378+316)&4294967295); //@line 3958 "xmlparse.c"
        var $380=HEAP[$379]; //@line 3958 "xmlparse.c"
        var $381=(($380+1)&4294967295); //@line 3958 "xmlparse.c"
        var $382=HEAP[$381]; //@line 3958 "xmlparse.c"
        var $383=reSign(($382), 8, 0)==79; //@line 3958 "xmlparse.c"
        if ($383) { __label__ = 87; break; } else { __label__ = 94; break; } //@line 3958 "xmlparse.c"
      case 87: // $bb84
        var $384=HEAP[$parser_addr]; //@line 3962 "xmlparse.c"
        var $385=(($384+400)&4294967295); //@line 3962 "xmlparse.c"
        var $386=(($385+12)&4294967295); //@line 3962 "xmlparse.c"
        var $387=HEAP[$386]; //@line 3962 "xmlparse.c"
        var $388=HEAP[$parser_addr]; //@line 3962 "xmlparse.c"
        var $389=(($388+400)&4294967295); //@line 3962 "xmlparse.c"
        var $390=(($389+8)&4294967295); //@line 3962 "xmlparse.c"
        var $391=HEAP[$390]; //@line 3962 "xmlparse.c"
        var $392=($387)!=($391); //@line 3962 "xmlparse.c"
        if ($392) { __label__ = 89; break; } else { __label__ = 88; break; } //@line 3962 "xmlparse.c"
      case 88: // $bb85
        var $393=HEAP[$parser_addr]; //@line 3962 "xmlparse.c"
        var $394=(($393+400)&4294967295); //@line 3962 "xmlparse.c"
        var $395=_poolGrow($394); //@line 3962 "xmlparse.c"
        var $396=reSign(($395), 8, 0)!=0; //@line 3962 "xmlparse.c"
        if ($396) { __label__ = 89; break; } else { __label__ = 90; break; } //@line 3962 "xmlparse.c"
      case 89: // $bb86
        var $397=HEAP[$parser_addr]; //@line 3962 "xmlparse.c"
        var $398=(($397+400)&4294967295); //@line 3962 "xmlparse.c"
        var $399=(($398+12)&4294967295); //@line 3962 "xmlparse.c"
        var $400=HEAP[$399]; //@line 3962 "xmlparse.c"
        HEAP[$400]=41; //@line 3962 "xmlparse.c"
        var $401=(($400+1)&4294967295); //@line 3962 "xmlparse.c"
        var $402=HEAP[$parser_addr]; //@line 3962 "xmlparse.c"
        var $403=(($402+400)&4294967295); //@line 3962 "xmlparse.c"
        var $404=(($403+12)&4294967295); //@line 3962 "xmlparse.c"
        HEAP[$404]=$401; //@line 3962 "xmlparse.c"
        var $405=HEAP[$parser_addr]; //@line 3962 "xmlparse.c"
        var $406=(($405+400)&4294967295); //@line 3962 "xmlparse.c"
        var $407=(($406+12)&4294967295); //@line 3962 "xmlparse.c"
        var $408=HEAP[$407]; //@line 3962 "xmlparse.c"
        var $409=HEAP[$parser_addr]; //@line 3962 "xmlparse.c"
        var $410=(($409+400)&4294967295); //@line 3962 "xmlparse.c"
        var $411=(($410+8)&4294967295); //@line 3962 "xmlparse.c"
        var $412=HEAP[$411]; //@line 3962 "xmlparse.c"
        var $413=($408)!=($412); //@line 3962 "xmlparse.c"
        if ($413) { __label__ = 92; break; } else { __label__ = 91; break; } //@line 3962 "xmlparse.c"
      case 90: // $bb87
        __label__ = 93; break; //@line 3962 "xmlparse.c"
      case 91: // $bb88
        var $414=HEAP[$parser_addr]; //@line 3962 "xmlparse.c"
        var $415=(($414+400)&4294967295); //@line 3962 "xmlparse.c"
        var $416=_poolGrow($415); //@line 3962 "xmlparse.c"
        var $417=reSign(($416), 8, 0)!=0; //@line 3962 "xmlparse.c"
        if ($417) { __label__ = 92; break; } else { __label__ = 93; break; } //@line 3962 "xmlparse.c"
      case 92: // $bb89
        var $418=HEAP[$parser_addr]; //@line 3962 "xmlparse.c"
        var $419=(($418+400)&4294967295); //@line 3962 "xmlparse.c"
        var $420=(($419+12)&4294967295); //@line 3962 "xmlparse.c"
        var $421=HEAP[$420]; //@line 3962 "xmlparse.c"
        HEAP[$421]=0; //@line 3962 "xmlparse.c"
        var $422=(($421+1)&4294967295); //@line 3962 "xmlparse.c"
        var $423=HEAP[$parser_addr]; //@line 3962 "xmlparse.c"
        var $424=(($423+400)&4294967295); //@line 3962 "xmlparse.c"
        var $425=(($424+12)&4294967295); //@line 3962 "xmlparse.c"
        HEAP[$425]=$422; //@line 3962 "xmlparse.c"
        var $426=HEAP[$parser_addr]; //@line 3965 "xmlparse.c"
        var $427=(($426+400)&4294967295); //@line 3965 "xmlparse.c"
        var $428=(($427+16)&4294967295); //@line 3965 "xmlparse.c"
        var $429=HEAP[$428]; //@line 3965 "xmlparse.c"
        var $430=HEAP[$parser_addr]; //@line 3965 "xmlparse.c"
        var $431=(($430+316)&4294967295); //@line 3965 "xmlparse.c"
        HEAP[$431]=$429; //@line 3965 "xmlparse.c"
        var $432=HEAP[$parser_addr]; //@line 3966 "xmlparse.c"
        var $433=(($432+400)&4294967295); //@line 3966 "xmlparse.c"
        var $434=(($433+12)&4294967295); //@line 3966 "xmlparse.c"
        var $435=HEAP[$434]; //@line 3966 "xmlparse.c"
        var $436=HEAP[$parser_addr]; //@line 3966 "xmlparse.c"
        var $437=(($436+400)&4294967295); //@line 3966 "xmlparse.c"
        var $438=(($437+16)&4294967295); //@line 3966 "xmlparse.c"
        HEAP[$438]=$435; //@line 3966 "xmlparse.c"
        __label__ = 94; break; //@line 3966 "xmlparse.c"
      case 93: // $bb90
        HEAP[$0]=1; //@line 3964 "xmlparse.c"
        __label__ = 317; break; //@line 3964 "xmlparse.c"
      case 94: // $bb91
        var $439=HEAP[$eventEndPP]; //@line 3968 "xmlparse.c"
        var $440=HEAP[$s_addr]; //@line 3968 "xmlparse.c"
        HEAP[$439]=$440; //@line 3968 "xmlparse.c"
        var $441=HEAP[$parser_addr]; //@line 3969 "xmlparse.c"
        var $442=(($441+132)&4294967295); //@line 3969 "xmlparse.c"
        var $443=HEAP[$442]; //@line 3969 "xmlparse.c"
        var $444=HEAP[$role]; //@line 3969 "xmlparse.c"
        var $445=((($444))|0)==36; //@line 3969 "xmlparse.c"
        var $446=unSign(($445), 1, 0); //@line 3969 "xmlparse.c"
        var $447=HEAP[$parser_addr]; //@line 3969 "xmlparse.c"
        var $448=(($447+316)&4294967295); //@line 3969 "xmlparse.c"
        var $449=HEAP[$448]; //@line 3969 "xmlparse.c"
        var $450=HEAP[$parser_addr]; //@line 3969 "xmlparse.c"
        var $451=(($450+332)&4294967295); //@line 3969 "xmlparse.c"
        var $452=HEAP[$451]; //@line 3969 "xmlparse.c"
        var $453=(($452)&4294967295); //@line 3969 "xmlparse.c"
        var $454=HEAP[$453]; //@line 3969 "xmlparse.c"
        var $455=HEAP[$parser_addr]; //@line 3969 "xmlparse.c"
        var $456=(($455+328)&4294967295); //@line 3969 "xmlparse.c"
        var $457=HEAP[$456]; //@line 3969 "xmlparse.c"
        var $458=(($457)&4294967295); //@line 3969 "xmlparse.c"
        var $459=HEAP[$458]; //@line 3969 "xmlparse.c"
        var $460=HEAP[$parser_addr]; //@line 3969 "xmlparse.c"
        var $461=(($460+4)&4294967295); //@line 3969 "xmlparse.c"
        var $462=HEAP[$461]; //@line 3969 "xmlparse.c"
        FUNCTION_TABLE[$443]($462, $459, $454, $449, 0, $446); //@line 3969 "xmlparse.c"
        var $463=HEAP[$parser_addr]; //@line 3972 "xmlparse.c"
        var $464=(($463+400)&4294967295); //@line 3972 "xmlparse.c"
        _poolClear($464); //@line 3972 "xmlparse.c"
        HEAP[$handleDefault]=0; //@line 3973 "xmlparse.c"
        __label__ = 95; break; //@line 3973 "xmlparse.c"
      case 95: // $bb92
        __label__ = 310; break; //@line 3973 "xmlparse.c"
      case 96: // $bb93
        var $465=HEAP[$dtd]; //@line 3979 "xmlparse.c"
        var $466=(($465+128)&4294967295); //@line 3979 "xmlparse.c"
        var $467=HEAP[$466]; //@line 3979 "xmlparse.c"
        var $468=reSign(($467), 8, 0)!=0; //@line 3979 "xmlparse.c"
        if ($468) { __label__ = 97; break; } else { __label__ = 114; break; } //@line 3979 "xmlparse.c"
      case 97: // $bb94
        var $469=HEAP[$dtd]; //@line 3985 "xmlparse.c"
        var $470=(($469+80)&4294967295); //@line 3985 "xmlparse.c"
        var $471=HEAP[$next_addr]; //@line 3985 "xmlparse.c"
        var $472=HEAP[$enc_addr]; //@line 3985 "xmlparse.c"
        var $473=(($472+64)&4294967295); //@line 3985 "xmlparse.c"
        var $474=HEAP[$473]; //@line 3985 "xmlparse.c"
        var $475=((0 - ($474))&4294967295); //@line 3985 "xmlparse.c"
        var $476=(($471+$475)&4294967295); //@line 3985 "xmlparse.c"
        var $477=HEAP[$enc_addr]; //@line 3985 "xmlparse.c"
        var $478=(($477+64)&4294967295); //@line 3985 "xmlparse.c"
        var $479=HEAP[$478]; //@line 3985 "xmlparse.c"
        var $480=HEAP[$s_addr]; //@line 3985 "xmlparse.c"
        var $481=(($480+$479)&4294967295); //@line 3985 "xmlparse.c"
        var $482=HEAP[$parser_addr]; //@line 3985 "xmlparse.c"
        var $483=(($482+336)&4294967295); //@line 3985 "xmlparse.c"
        var $484=HEAP[$483]; //@line 3985 "xmlparse.c"
        var $485=unSign(($484), 8, 0); //@line 3985 "xmlparse.c"
        var $486=HEAP[$parser_addr]; //@line 3985 "xmlparse.c"
        var $487=HEAP[$enc_addr]; //@line 3985 "xmlparse.c"
        var $488=((($485)) & 255); //@line 3985 "xmlparse.c"
        var $489=_storeAttributeValue($486, $487, $488, $481, $476, $470); //@line 3985 "xmlparse.c"
        HEAP[$result95]=$489; //@line 3985 "xmlparse.c"
        var $490=HEAP[$result95]; //@line 3986 "xmlparse.c"
        var $491=((($490))|0)!=0; //@line 3986 "xmlparse.c"
        if ($491) { __label__ = 98; break; } else { __label__ = 99; break; } //@line 3986 "xmlparse.c"
      case 98: // $bb96
        var $492=HEAP[$result95]; //@line 3987 "xmlparse.c"
        HEAP[$0]=$492; //@line 3987 "xmlparse.c"
        __label__ = 317; break; //@line 3987 "xmlparse.c"
      case 99: // $bb97
        var $493=HEAP[$dtd]; //@line 3988 "xmlparse.c"
        var $494=(($493+80)&4294967295); //@line 3988 "xmlparse.c"
        var $495=(($494+16)&4294967295); //@line 3988 "xmlparse.c"
        var $496=HEAP[$495]; //@line 3988 "xmlparse.c"
        HEAP[$attVal]=$496; //@line 3988 "xmlparse.c"
        var $497=HEAP[$dtd]; //@line 3989 "xmlparse.c"
        var $498=(($497+80)&4294967295); //@line 3989 "xmlparse.c"
        var $499=(($498+12)&4294967295); //@line 3989 "xmlparse.c"
        var $500=HEAP[$499]; //@line 3989 "xmlparse.c"
        var $501=HEAP[$dtd]; //@line 3989 "xmlparse.c"
        var $502=(($501+80)&4294967295); //@line 3989 "xmlparse.c"
        var $503=(($502+16)&4294967295); //@line 3989 "xmlparse.c"
        HEAP[$503]=$500; //@line 3989 "xmlparse.c"
        var $504=HEAP[$parser_addr]; //@line 3991 "xmlparse.c"
        var $505=(($504+336)&4294967295); //@line 3991 "xmlparse.c"
        var $506=HEAP[$505]; //@line 3991 "xmlparse.c"
        var $507=unSign(($506), 8, 0); //@line 3991 "xmlparse.c"
        var $508=HEAP[$parser_addr]; //@line 3991 "xmlparse.c"
        var $509=(($508+332)&4294967295); //@line 3991 "xmlparse.c"
        var $510=HEAP[$509]; //@line 3991 "xmlparse.c"
        var $511=HEAP[$parser_addr]; //@line 3991 "xmlparse.c"
        var $512=(($511+328)&4294967295); //@line 3991 "xmlparse.c"
        var $513=HEAP[$512]; //@line 3991 "xmlparse.c"
        var $514=((($507)) & 255); //@line 3991 "xmlparse.c"
        var $515=HEAP[$attVal]; //@line 3991 "xmlparse.c"
        var $516=HEAP[$parser_addr]; //@line 3991 "xmlparse.c"
        var $517=_defineAttribute($513, $510, $514, 0, $515, $516); //@line 3991 "xmlparse.c"
        var $518=((($517))|0)==0; //@line 3991 "xmlparse.c"
        if ($518) { __label__ = 100; break; } else { __label__ = 101; break; } //@line 3991 "xmlparse.c"
      case 100: // $bb98
        HEAP[$0]=1; //@line 3993 "xmlparse.c"
        __label__ = 317; break; //@line 3993 "xmlparse.c"
      case 101: // $bb99
        var $519=HEAP[$parser_addr]; //@line 3994 "xmlparse.c"
        var $520=(($519+132)&4294967295); //@line 3994 "xmlparse.c"
        var $521=HEAP[$520]; //@line 3994 "xmlparse.c"
        var $522=($521)!=0; //@line 3994 "xmlparse.c"
        if ($522) { __label__ = 102; break; } else { __label__ = 114; break; } //@line 3994 "xmlparse.c"
      case 102: // $bb100
        var $523=HEAP[$parser_addr]; //@line 3994 "xmlparse.c"
        var $524=(($523+316)&4294967295); //@line 3994 "xmlparse.c"
        var $525=HEAP[$524]; //@line 3994 "xmlparse.c"
        var $526=($525)!=0; //@line 3994 "xmlparse.c"
        if ($526) { __label__ = 103; break; } else { __label__ = 114; break; } //@line 3994 "xmlparse.c"
      case 103: // $bb101
        var $527=HEAP[$parser_addr]; //@line 3995 "xmlparse.c"
        var $528=(($527+316)&4294967295); //@line 3995 "xmlparse.c"
        var $529=HEAP[$528]; //@line 3995 "xmlparse.c"
        var $530=HEAP[$529]; //@line 3995 "xmlparse.c"
        var $531=reSign(($530), 8, 0)==40; //@line 3995 "xmlparse.c"
        if ($531) { __label__ = 106; break; } else { __label__ = 104; break; } //@line 3995 "xmlparse.c"
      case 104: // $bb102
        var $532=HEAP[$parser_addr]; //@line 3995 "xmlparse.c"
        var $533=(($532+316)&4294967295); //@line 3995 "xmlparse.c"
        var $534=HEAP[$533]; //@line 3995 "xmlparse.c"
        var $535=HEAP[$534]; //@line 3995 "xmlparse.c"
        var $536=reSign(($535), 8, 0)!=78; //@line 3995 "xmlparse.c"
        if ($536) { __label__ = 113; break; } else { __label__ = 105; break; } //@line 3995 "xmlparse.c"
      case 105: // $bb103
        var $537=HEAP[$parser_addr]; //@line 3995 "xmlparse.c"
        var $538=(($537+316)&4294967295); //@line 3995 "xmlparse.c"
        var $539=HEAP[$538]; //@line 3995 "xmlparse.c"
        var $540=(($539+1)&4294967295); //@line 3995 "xmlparse.c"
        var $541=HEAP[$540]; //@line 3995 "xmlparse.c"
        var $542=reSign(($541), 8, 0)==79; //@line 3995 "xmlparse.c"
        if ($542) { __label__ = 106; break; } else { __label__ = 113; break; } //@line 3995 "xmlparse.c"
      case 106: // $bb104
        var $543=HEAP[$parser_addr]; //@line 3999 "xmlparse.c"
        var $544=(($543+400)&4294967295); //@line 3999 "xmlparse.c"
        var $545=(($544+12)&4294967295); //@line 3999 "xmlparse.c"
        var $546=HEAP[$545]; //@line 3999 "xmlparse.c"
        var $547=HEAP[$parser_addr]; //@line 3999 "xmlparse.c"
        var $548=(($547+400)&4294967295); //@line 3999 "xmlparse.c"
        var $549=(($548+8)&4294967295); //@line 3999 "xmlparse.c"
        var $550=HEAP[$549]; //@line 3999 "xmlparse.c"
        var $551=($546)!=($550); //@line 3999 "xmlparse.c"
        if ($551) { __label__ = 108; break; } else { __label__ = 107; break; } //@line 3999 "xmlparse.c"
      case 107: // $bb105
        var $552=HEAP[$parser_addr]; //@line 3999 "xmlparse.c"
        var $553=(($552+400)&4294967295); //@line 3999 "xmlparse.c"
        var $554=_poolGrow($553); //@line 3999 "xmlparse.c"
        var $555=reSign(($554), 8, 0)!=0; //@line 3999 "xmlparse.c"
        if ($555) { __label__ = 108; break; } else { __label__ = 109; break; } //@line 3999 "xmlparse.c"
      case 108: // $bb106
        var $556=HEAP[$parser_addr]; //@line 3999 "xmlparse.c"
        var $557=(($556+400)&4294967295); //@line 3999 "xmlparse.c"
        var $558=(($557+12)&4294967295); //@line 3999 "xmlparse.c"
        var $559=HEAP[$558]; //@line 3999 "xmlparse.c"
        HEAP[$559]=41; //@line 3999 "xmlparse.c"
        var $560=(($559+1)&4294967295); //@line 3999 "xmlparse.c"
        var $561=HEAP[$parser_addr]; //@line 3999 "xmlparse.c"
        var $562=(($561+400)&4294967295); //@line 3999 "xmlparse.c"
        var $563=(($562+12)&4294967295); //@line 3999 "xmlparse.c"
        HEAP[$563]=$560; //@line 3999 "xmlparse.c"
        var $564=HEAP[$parser_addr]; //@line 3999 "xmlparse.c"
        var $565=(($564+400)&4294967295); //@line 3999 "xmlparse.c"
        var $566=(($565+12)&4294967295); //@line 3999 "xmlparse.c"
        var $567=HEAP[$566]; //@line 3999 "xmlparse.c"
        var $568=HEAP[$parser_addr]; //@line 3999 "xmlparse.c"
        var $569=(($568+400)&4294967295); //@line 3999 "xmlparse.c"
        var $570=(($569+8)&4294967295); //@line 3999 "xmlparse.c"
        var $571=HEAP[$570]; //@line 3999 "xmlparse.c"
        var $572=($567)!=($571); //@line 3999 "xmlparse.c"
        if ($572) { __label__ = 111; break; } else { __label__ = 110; break; } //@line 3999 "xmlparse.c"
      case 109: // $bb107
        __label__ = 112; break; //@line 3999 "xmlparse.c"
      case 110: // $bb108
        var $573=HEAP[$parser_addr]; //@line 3999 "xmlparse.c"
        var $574=(($573+400)&4294967295); //@line 3999 "xmlparse.c"
        var $575=_poolGrow($574); //@line 3999 "xmlparse.c"
        var $576=reSign(($575), 8, 0)!=0; //@line 3999 "xmlparse.c"
        if ($576) { __label__ = 111; break; } else { __label__ = 112; break; } //@line 3999 "xmlparse.c"
      case 111: // $bb109
        var $577=HEAP[$parser_addr]; //@line 3999 "xmlparse.c"
        var $578=(($577+400)&4294967295); //@line 3999 "xmlparse.c"
        var $579=(($578+12)&4294967295); //@line 3999 "xmlparse.c"
        var $580=HEAP[$579]; //@line 3999 "xmlparse.c"
        HEAP[$580]=0; //@line 3999 "xmlparse.c"
        var $581=(($580+1)&4294967295); //@line 3999 "xmlparse.c"
        var $582=HEAP[$parser_addr]; //@line 3999 "xmlparse.c"
        var $583=(($582+400)&4294967295); //@line 3999 "xmlparse.c"
        var $584=(($583+12)&4294967295); //@line 3999 "xmlparse.c"
        HEAP[$584]=$581; //@line 3999 "xmlparse.c"
        var $585=HEAP[$parser_addr]; //@line 4002 "xmlparse.c"
        var $586=(($585+400)&4294967295); //@line 4002 "xmlparse.c"
        var $587=(($586+16)&4294967295); //@line 4002 "xmlparse.c"
        var $588=HEAP[$587]; //@line 4002 "xmlparse.c"
        var $589=HEAP[$parser_addr]; //@line 4002 "xmlparse.c"
        var $590=(($589+316)&4294967295); //@line 4002 "xmlparse.c"
        HEAP[$590]=$588; //@line 4002 "xmlparse.c"
        var $591=HEAP[$parser_addr]; //@line 4003 "xmlparse.c"
        var $592=(($591+400)&4294967295); //@line 4003 "xmlparse.c"
        var $593=(($592+12)&4294967295); //@line 4003 "xmlparse.c"
        var $594=HEAP[$593]; //@line 4003 "xmlparse.c"
        var $595=HEAP[$parser_addr]; //@line 4003 "xmlparse.c"
        var $596=(($595+400)&4294967295); //@line 4003 "xmlparse.c"
        var $597=(($596+16)&4294967295); //@line 4003 "xmlparse.c"
        HEAP[$597]=$594; //@line 4003 "xmlparse.c"
        __label__ = 113; break; //@line 4003 "xmlparse.c"
      case 112: // $bb110
        HEAP[$0]=1; //@line 4001 "xmlparse.c"
        __label__ = 317; break; //@line 4001 "xmlparse.c"
      case 113: // $bb111
        var $598=HEAP[$eventEndPP]; //@line 4005 "xmlparse.c"
        var $599=HEAP[$s_addr]; //@line 4005 "xmlparse.c"
        HEAP[$598]=$599; //@line 4005 "xmlparse.c"
        var $600=HEAP[$parser_addr]; //@line 4006 "xmlparse.c"
        var $601=(($600+132)&4294967295); //@line 4006 "xmlparse.c"
        var $602=HEAP[$601]; //@line 4006 "xmlparse.c"
        var $603=HEAP[$role]; //@line 4006 "xmlparse.c"
        var $604=((($603))|0)==38; //@line 4006 "xmlparse.c"
        var $605=unSign(($604), 1, 0); //@line 4006 "xmlparse.c"
        var $606=HEAP[$parser_addr]; //@line 4006 "xmlparse.c"
        var $607=(($606+316)&4294967295); //@line 4006 "xmlparse.c"
        var $608=HEAP[$607]; //@line 4006 "xmlparse.c"
        var $609=HEAP[$parser_addr]; //@line 4006 "xmlparse.c"
        var $610=(($609+332)&4294967295); //@line 4006 "xmlparse.c"
        var $611=HEAP[$610]; //@line 4006 "xmlparse.c"
        var $612=(($611)&4294967295); //@line 4006 "xmlparse.c"
        var $613=HEAP[$612]; //@line 4006 "xmlparse.c"
        var $614=HEAP[$parser_addr]; //@line 4006 "xmlparse.c"
        var $615=(($614+328)&4294967295); //@line 4006 "xmlparse.c"
        var $616=HEAP[$615]; //@line 4006 "xmlparse.c"
        var $617=(($616)&4294967295); //@line 4006 "xmlparse.c"
        var $618=HEAP[$617]; //@line 4006 "xmlparse.c"
        var $619=HEAP[$parser_addr]; //@line 4006 "xmlparse.c"
        var $620=(($619+4)&4294967295); //@line 4006 "xmlparse.c"
        var $621=HEAP[$620]; //@line 4006 "xmlparse.c"
        var $622=HEAP[$attVal]; //@line 4006 "xmlparse.c"
        FUNCTION_TABLE[$602]($621, $618, $613, $608, $622, $605); //@line 4006 "xmlparse.c"
        var $623=HEAP[$parser_addr]; //@line 4010 "xmlparse.c"
        var $624=(($623+400)&4294967295); //@line 4010 "xmlparse.c"
        _poolClear($624); //@line 4010 "xmlparse.c"
        HEAP[$handleDefault]=0; //@line 4011 "xmlparse.c"
        __label__ = 114; break; //@line 4011 "xmlparse.c"
      case 114: // $bb112
        __label__ = 310; break; //@line 4011 "xmlparse.c"
      case 115: // $bb113
        var $625=HEAP[$dtd]; //@line 4016 "xmlparse.c"
        var $626=(($625+128)&4294967295); //@line 4016 "xmlparse.c"
        var $627=HEAP[$626]; //@line 4016 "xmlparse.c"
        var $628=reSign(($627), 8, 0)!=0; //@line 4016 "xmlparse.c"
        if ($628) { __label__ = 116; break; } else { __label__ = 123; break; } //@line 4016 "xmlparse.c"
      case 116: // $bb114
        var $629=HEAP[$next_addr]; //@line 4019 "xmlparse.c"
        var $630=HEAP[$enc_addr]; //@line 4019 "xmlparse.c"
        var $631=(($630+64)&4294967295); //@line 4019 "xmlparse.c"
        var $632=HEAP[$631]; //@line 4019 "xmlparse.c"
        var $633=((0 - ($632))&4294967295); //@line 4019 "xmlparse.c"
        var $634=(($629+$633)&4294967295); //@line 4019 "xmlparse.c"
        var $635=HEAP[$enc_addr]; //@line 4019 "xmlparse.c"
        var $636=(($635+64)&4294967295); //@line 4019 "xmlparse.c"
        var $637=HEAP[$636]; //@line 4019 "xmlparse.c"
        var $638=HEAP[$s_addr]; //@line 4019 "xmlparse.c"
        var $639=(($638+$637)&4294967295); //@line 4019 "xmlparse.c"
        var $640=HEAP[$parser_addr]; //@line 4019 "xmlparse.c"
        var $641=HEAP[$enc_addr]; //@line 4019 "xmlparse.c"
        var $642=_storeEntityValue($640, $641, $639, $634); //@line 4019 "xmlparse.c"
        HEAP[$result115]=$642; //@line 4019 "xmlparse.c"
        var $643=HEAP[$parser_addr]; //@line 4020 "xmlparse.c"
        var $644=(($643+300)&4294967295); //@line 4020 "xmlparse.c"
        var $645=HEAP[$644]; //@line 4020 "xmlparse.c"
        var $646=($645)!=0; //@line 4020 "xmlparse.c"
        if ($646) { __label__ = 117; break; } else { __label__ = 120; break; } //@line 4020 "xmlparse.c"
      case 117: // $bb116
        var $647=HEAP[$parser_addr]; //@line 4021 "xmlparse.c"
        var $648=(($647+300)&4294967295); //@line 4021 "xmlparse.c"
        var $649=HEAP[$648]; //@line 4021 "xmlparse.c"
        var $650=HEAP[$dtd]; //@line 4021 "xmlparse.c"
        var $651=(($650+104)&4294967295); //@line 4021 "xmlparse.c"
        var $652=(($651+16)&4294967295); //@line 4021 "xmlparse.c"
        var $653=HEAP[$652]; //@line 4021 "xmlparse.c"
        var $654=(($649+4)&4294967295); //@line 4021 "xmlparse.c"
        HEAP[$654]=$653; //@line 4021 "xmlparse.c"
        var $655=HEAP[$parser_addr]; //@line 4022 "xmlparse.c"
        var $656=(($655+300)&4294967295); //@line 4022 "xmlparse.c"
        var $657=HEAP[$656]; //@line 4022 "xmlparse.c"
        var $658=HEAP[$dtd]; //@line 4022 "xmlparse.c"
        var $659=(($658+104)&4294967295); //@line 4022 "xmlparse.c"
        var $660=(($659+12)&4294967295); //@line 4022 "xmlparse.c"
        var $661=HEAP[$660]; //@line 4022 "xmlparse.c"
        var $662=($661); //@line 4022 "xmlparse.c"
        var $663=HEAP[$dtd]; //@line 4022 "xmlparse.c"
        var $664=(($663+104)&4294967295); //@line 4022 "xmlparse.c"
        var $665=(($664+16)&4294967295); //@line 4022 "xmlparse.c"
        var $666=HEAP[$665]; //@line 4022 "xmlparse.c"
        var $667=($666); //@line 4022 "xmlparse.c"
        var $668=((($662) - ($667))&4294967295); //@line 4022 "xmlparse.c"
        var $669=(($657+8)&4294967295); //@line 4022 "xmlparse.c"
        HEAP[$669]=$668; //@line 4022 "xmlparse.c"
        var $670=HEAP[$dtd]; //@line 4023 "xmlparse.c"
        var $671=(($670+104)&4294967295); //@line 4023 "xmlparse.c"
        var $672=(($671+12)&4294967295); //@line 4023 "xmlparse.c"
        var $673=HEAP[$672]; //@line 4023 "xmlparse.c"
        var $674=HEAP[$dtd]; //@line 4023 "xmlparse.c"
        var $675=(($674+104)&4294967295); //@line 4023 "xmlparse.c"
        var $676=(($675+16)&4294967295); //@line 4023 "xmlparse.c"
        HEAP[$676]=$673; //@line 4023 "xmlparse.c"
        var $677=HEAP[$parser_addr]; //@line 4024 "xmlparse.c"
        var $678=(($677+136)&4294967295); //@line 4024 "xmlparse.c"
        var $679=HEAP[$678]; //@line 4024 "xmlparse.c"
        var $680=($679)!=0; //@line 4024 "xmlparse.c"
        if ($680) { __label__ = 118; break; } else { __label__ = 119; break; } //@line 4024 "xmlparse.c"
      case 118: // $bb117
        var $681=HEAP[$eventEndPP]; //@line 4025 "xmlparse.c"
        var $682=HEAP[$s_addr]; //@line 4025 "xmlparse.c"
        HEAP[$681]=$682; //@line 4025 "xmlparse.c"
        var $683=HEAP[$parser_addr]; //@line 4026 "xmlparse.c"
        var $684=(($683+136)&4294967295); //@line 4026 "xmlparse.c"
        var $685=HEAP[$684]; //@line 4026 "xmlparse.c"
        var $686=HEAP[$parser_addr]; //@line 4026 "xmlparse.c"
        var $687=(($686+344)&4294967295); //@line 4026 "xmlparse.c"
        var $688=HEAP[$687]; //@line 4026 "xmlparse.c"
        var $689=HEAP[$parser_addr]; //@line 4026 "xmlparse.c"
        var $690=(($689+300)&4294967295); //@line 4026 "xmlparse.c"
        var $691=HEAP[$690]; //@line 4026 "xmlparse.c"
        var $692=(($691+8)&4294967295); //@line 4026 "xmlparse.c"
        var $693=HEAP[$692]; //@line 4026 "xmlparse.c"
        var $694=HEAP[$parser_addr]; //@line 4026 "xmlparse.c"
        var $695=(($694+300)&4294967295); //@line 4026 "xmlparse.c"
        var $696=HEAP[$695]; //@line 4026 "xmlparse.c"
        var $697=(($696+4)&4294967295); //@line 4026 "xmlparse.c"
        var $698=HEAP[$697]; //@line 4026 "xmlparse.c"
        var $699=HEAP[$parser_addr]; //@line 4026 "xmlparse.c"
        var $700=(($699+300)&4294967295); //@line 4026 "xmlparse.c"
        var $701=HEAP[$700]; //@line 4026 "xmlparse.c"
        var $702=(($701+33)&4294967295); //@line 4026 "xmlparse.c"
        var $703=HEAP[$702]; //@line 4026 "xmlparse.c"
        var $704=unSign(($703), 8, 0); //@line 4026 "xmlparse.c"
        var $705=HEAP[$parser_addr]; //@line 4026 "xmlparse.c"
        var $706=(($705+300)&4294967295); //@line 4026 "xmlparse.c"
        var $707=HEAP[$706]; //@line 4026 "xmlparse.c"
        var $708=(($707)&4294967295); //@line 4026 "xmlparse.c"
        var $709=HEAP[$708]; //@line 4026 "xmlparse.c"
        var $710=HEAP[$parser_addr]; //@line 4026 "xmlparse.c"
        var $711=(($710+4)&4294967295); //@line 4026 "xmlparse.c"
        var $712=HEAP[$711]; //@line 4026 "xmlparse.c"
        FUNCTION_TABLE[$685]($712, $709, $704, $698, $693, $688, 0, 0, 0); //@line 4026 "xmlparse.c"
        HEAP[$handleDefault]=0; //@line 4032 "xmlparse.c"
        __label__ = 119; break; //@line 4032 "xmlparse.c"
      case 119: // $bb118
        __label__ = 121; break; //@line 4032 "xmlparse.c"
      case 120: // $bb119
        var $713=HEAP[$dtd]; //@line 4036 "xmlparse.c"
        var $714=(($713+104)&4294967295); //@line 4036 "xmlparse.c"
        var $715=(($714+16)&4294967295); //@line 4036 "xmlparse.c"
        var $716=HEAP[$715]; //@line 4036 "xmlparse.c"
        var $717=HEAP[$dtd]; //@line 4036 "xmlparse.c"
        var $718=(($717+104)&4294967295); //@line 4036 "xmlparse.c"
        var $719=(($718+12)&4294967295); //@line 4036 "xmlparse.c"
        HEAP[$719]=$716; //@line 4036 "xmlparse.c"
        __label__ = 121; break; //@line 4036 "xmlparse.c"
      case 121: // $bb120
        var $720=HEAP[$result115]; //@line 4037 "xmlparse.c"
        var $721=((($720))|0)!=0; //@line 4037 "xmlparse.c"
        if ($721) { __label__ = 122; break; } else { __label__ = 123; break; } //@line 4037 "xmlparse.c"
      case 122: // $bb121
        var $722=HEAP[$result115]; //@line 4038 "xmlparse.c"
        HEAP[$0]=$722; //@line 4038 "xmlparse.c"
        __label__ = 317; break; //@line 4038 "xmlparse.c"
      case 123: // $bb122
        __label__ = 310; break; //@line 4038 "xmlparse.c"
      case 124: // $bb123
        var $723=HEAP[$dtd]; //@line 4045 "xmlparse.c"
        var $724=(($723+129)&4294967295); //@line 4045 "xmlparse.c"
        HEAP[$724]=1; //@line 4045 "xmlparse.c"
        var $725=HEAP[$parser_addr]; //@line 4046 "xmlparse.c"
        var $726=(($725+84)&4294967295); //@line 4046 "xmlparse.c"
        var $727=HEAP[$726]; //@line 4046 "xmlparse.c"
        var $728=($727)!=0; //@line 4046 "xmlparse.c"
        if ($728) { __label__ = 125; break; } else { __label__ = 128; break; } //@line 4046 "xmlparse.c"
      case 125: // $bb124
        var $729=HEAP[$next_addr]; //@line 4047 "xmlparse.c"
        var $730=HEAP[$enc_addr]; //@line 4047 "xmlparse.c"
        var $731=(($730+64)&4294967295); //@line 4047 "xmlparse.c"
        var $732=HEAP[$731]; //@line 4047 "xmlparse.c"
        var $733=((0 - ($732))&4294967295); //@line 4047 "xmlparse.c"
        var $734=(($729+$733)&4294967295); //@line 4047 "xmlparse.c"
        var $735=HEAP[$enc_addr]; //@line 4047 "xmlparse.c"
        var $736=(($735+64)&4294967295); //@line 4047 "xmlparse.c"
        var $737=HEAP[$736]; //@line 4047 "xmlparse.c"
        var $738=HEAP[$s_addr]; //@line 4047 "xmlparse.c"
        var $739=(($738+$737)&4294967295); //@line 4047 "xmlparse.c"
        var $740=HEAP[$parser_addr]; //@line 4047 "xmlparse.c"
        var $741=(($740+400)&4294967295); //@line 4047 "xmlparse.c"
        var $742=HEAP[$enc_addr]; //@line 4047 "xmlparse.c"
        var $743=_poolStoreString($741, $742, $739, $734); //@line 4047 "xmlparse.c"
        var $744=HEAP[$parser_addr]; //@line 4047 "xmlparse.c"
        var $745=(($744+308)&4294967295); //@line 4047 "xmlparse.c"
        HEAP[$745]=$743; //@line 4047 "xmlparse.c"
        var $746=HEAP[$parser_addr]; //@line 4050 "xmlparse.c"
        var $747=(($746+308)&4294967295); //@line 4050 "xmlparse.c"
        var $748=HEAP[$747]; //@line 4050 "xmlparse.c"
        var $749=($748)==0; //@line 4050 "xmlparse.c"
        if ($749) { __label__ = 126; break; } else { __label__ = 127; break; } //@line 4050 "xmlparse.c"
      case 126: // $bb125
        HEAP[$0]=1; //@line 4051 "xmlparse.c"
        __label__ = 317; break; //@line 4051 "xmlparse.c"
      case 127: // $bb126
        var $750=HEAP[$parser_addr]; //@line 4052 "xmlparse.c"
        var $751=(($750+400)&4294967295); //@line 4052 "xmlparse.c"
        var $752=(($751+12)&4294967295); //@line 4052 "xmlparse.c"
        var $753=HEAP[$752]; //@line 4052 "xmlparse.c"
        var $754=HEAP[$parser_addr]; //@line 4052 "xmlparse.c"
        var $755=(($754+400)&4294967295); //@line 4052 "xmlparse.c"
        var $756=(($755+16)&4294967295); //@line 4052 "xmlparse.c"
        HEAP[$756]=$753; //@line 4052 "xmlparse.c"
        HEAP[$handleDefault]=0; //@line 4053 "xmlparse.c"
        __label__ = 128; break; //@line 4053 "xmlparse.c"
      case 128: // $bb127
        var $757=HEAP[$dtd]; //@line 4061 "xmlparse.c"
        var $758=(($757+130)&4294967295); //@line 4061 "xmlparse.c"
        var $759=HEAP[$758]; //@line 4061 "xmlparse.c"
        var $760=reSign(($759), 8, 0)==0; //@line 4061 "xmlparse.c"
        if ($760) { __label__ = 129; break; } else { __label__ = 132; break; } //@line 4061 "xmlparse.c"
      case 129: // $bb128
        var $761=HEAP[$parser_addr]; //@line 4061 "xmlparse.c"
        var $762=(($761+108)&4294967295); //@line 4061 "xmlparse.c"
        var $763=HEAP[$762]; //@line 4061 "xmlparse.c"
        var $764=($763)!=0; //@line 4061 "xmlparse.c"
        if ($764) { __label__ = 130; break; } else { __label__ = 132; break; } //@line 4061 "xmlparse.c"
      case 130: // $bb129
        var $765=HEAP[$parser_addr]; //@line 4061 "xmlparse.c"
        var $766=(($765+108)&4294967295); //@line 4061 "xmlparse.c"
        var $767=HEAP[$766]; //@line 4061 "xmlparse.c"
        var $768=HEAP[$parser_addr]; //@line 4061 "xmlparse.c"
        var $769=(($768+4)&4294967295); //@line 4061 "xmlparse.c"
        var $770=HEAP[$769]; //@line 4061 "xmlparse.c"
        var $771=FUNCTION_TABLE[$767]($770); //@line 4061 "xmlparse.c"
        var $772=((($771))|0)==0; //@line 4061 "xmlparse.c"
        if ($772) { __label__ = 131; break; } else { __label__ = 132; break; } //@line 4061 "xmlparse.c"
      case 131: // $bb130
        HEAP[$0]=22; //@line 4067 "xmlparse.c"
        __label__ = 317; break; //@line 4067 "xmlparse.c"
      case 132: // $bb131
        __label__ = 310; break; //@line 4067 "xmlparse.c"
      case 133: // $bb132
        var $773=HEAP[$dtd]; //@line 4082 "xmlparse.c"
        var $774=(($773+128)&4294967295); //@line 4082 "xmlparse.c"
        var $775=HEAP[$774]; //@line 4082 "xmlparse.c"
        var $776=reSign(($775), 8, 0)!=0; //@line 4082 "xmlparse.c"
        if ($776) { __label__ = 134; break; } else { __label__ = 139; break; } //@line 4082 "xmlparse.c"
      case 134: // $bb133
        var $777=HEAP[$parser_addr]; //@line 4082 "xmlparse.c"
        var $778=(($777+300)&4294967295); //@line 4082 "xmlparse.c"
        var $779=HEAP[$778]; //@line 4082 "xmlparse.c"
        var $780=($779)!=0; //@line 4082 "xmlparse.c"
        if ($780) { __label__ = 135; break; } else { __label__ = 139; break; } //@line 4082 "xmlparse.c"
      case 135: // $bb134
        var $781=HEAP[$parser_addr]; //@line 4083 "xmlparse.c"
        var $782=(($781+300)&4294967295); //@line 4083 "xmlparse.c"
        var $783=HEAP[$782]; //@line 4083 "xmlparse.c"
        var $784=HEAP[$next_addr]; //@line 4083 "xmlparse.c"
        var $785=HEAP[$enc_addr]; //@line 4083 "xmlparse.c"
        var $786=(($785+64)&4294967295); //@line 4083 "xmlparse.c"
        var $787=HEAP[$786]; //@line 4083 "xmlparse.c"
        var $788=((0 - ($787))&4294967295); //@line 4083 "xmlparse.c"
        var $789=(($784+$788)&4294967295); //@line 4083 "xmlparse.c"
        var $790=HEAP[$enc_addr]; //@line 4083 "xmlparse.c"
        var $791=(($790+64)&4294967295); //@line 4083 "xmlparse.c"
        var $792=HEAP[$791]; //@line 4083 "xmlparse.c"
        var $793=HEAP[$s_addr]; //@line 4083 "xmlparse.c"
        var $794=(($793+$792)&4294967295); //@line 4083 "xmlparse.c"
        var $795=HEAP[$dtd]; //@line 4083 "xmlparse.c"
        var $796=(($795+80)&4294967295); //@line 4083 "xmlparse.c"
        var $797=HEAP[$enc_addr]; //@line 4083 "xmlparse.c"
        var $798=_poolStoreString($796, $797, $794, $789); //@line 4083 "xmlparse.c"
        var $799=(($783+16)&4294967295); //@line 4083 "xmlparse.c"
        HEAP[$799]=$798; //@line 4083 "xmlparse.c"
        var $800=HEAP[$parser_addr]; //@line 4086 "xmlparse.c"
        var $801=(($800+300)&4294967295); //@line 4086 "xmlparse.c"
        var $802=HEAP[$801]; //@line 4086 "xmlparse.c"
        var $803=(($802+16)&4294967295); //@line 4086 "xmlparse.c"
        var $804=HEAP[$803]; //@line 4086 "xmlparse.c"
        var $805=($804)==0; //@line 4086 "xmlparse.c"
        if ($805) { __label__ = 136; break; } else { __label__ = 137; break; } //@line 4086 "xmlparse.c"
      case 136: // $bb135
        HEAP[$0]=1; //@line 4087 "xmlparse.c"
        __label__ = 317; break; //@line 4087 "xmlparse.c"
      case 137: // $bb136
        var $806=HEAP[$parser_addr]; //@line 4088 "xmlparse.c"
        var $807=(($806+300)&4294967295); //@line 4088 "xmlparse.c"
        var $808=HEAP[$807]; //@line 4088 "xmlparse.c"
        var $809=HEAP[$parser_addr]; //@line 4088 "xmlparse.c"
        var $810=(($809+344)&4294967295); //@line 4088 "xmlparse.c"
        var $811=HEAP[$810]; //@line 4088 "xmlparse.c"
        var $812=(($808+20)&4294967295); //@line 4088 "xmlparse.c"
        HEAP[$812]=$811; //@line 4088 "xmlparse.c"
        var $813=HEAP[$dtd]; //@line 4089 "xmlparse.c"
        var $814=(($813+80)&4294967295); //@line 4089 "xmlparse.c"
        var $815=(($814+12)&4294967295); //@line 4089 "xmlparse.c"
        var $816=HEAP[$815]; //@line 4089 "xmlparse.c"
        var $817=HEAP[$dtd]; //@line 4089 "xmlparse.c"
        var $818=(($817+80)&4294967295); //@line 4089 "xmlparse.c"
        var $819=(($818+16)&4294967295); //@line 4089 "xmlparse.c"
        HEAP[$819]=$816; //@line 4089 "xmlparse.c"
        var $820=HEAP[$parser_addr]; //@line 4090 "xmlparse.c"
        var $821=(($820+136)&4294967295); //@line 4090 "xmlparse.c"
        var $822=HEAP[$821]; //@line 4090 "xmlparse.c"
        var $823=($822)!=0; //@line 4090 "xmlparse.c"
        if ($823) { __label__ = 138; break; } else { __label__ = 139; break; } //@line 4090 "xmlparse.c"
      case 138: // $bb137
        HEAP[$handleDefault]=0; //@line 4091 "xmlparse.c"
        __label__ = 139; break; //@line 4091 "xmlparse.c"
      case 139: // $bb138
        __label__ = 310; break; //@line 4091 "xmlparse.c"
      case 140: // $bb139
        var $824=HEAP[$dtd]; //@line 4095 "xmlparse.c"
        var $825=(($824+128)&4294967295); //@line 4095 "xmlparse.c"
        var $826=HEAP[$825]; //@line 4095 "xmlparse.c"
        var $827=reSign(($826), 8, 0)!=0; //@line 4095 "xmlparse.c"
        if ($827) { __label__ = 141; break; } else { __label__ = 144; break; } //@line 4095 "xmlparse.c"
      case 141: // $bb140
        var $828=HEAP[$parser_addr]; //@line 4095 "xmlparse.c"
        var $829=(($828+300)&4294967295); //@line 4095 "xmlparse.c"
        var $830=HEAP[$829]; //@line 4095 "xmlparse.c"
        var $831=($830)!=0; //@line 4095 "xmlparse.c"
        if ($831) { __label__ = 142; break; } else { __label__ = 144; break; } //@line 4095 "xmlparse.c"
      case 142: // $bb141
        var $832=HEAP[$parser_addr]; //@line 4095 "xmlparse.c"
        var $833=(($832+136)&4294967295); //@line 4095 "xmlparse.c"
        var $834=HEAP[$833]; //@line 4095 "xmlparse.c"
        var $835=($834)!=0; //@line 4095 "xmlparse.c"
        if ($835) { __label__ = 143; break; } else { __label__ = 144; break; } //@line 4095 "xmlparse.c"
      case 143: // $bb142
        var $836=HEAP[$eventEndPP]; //@line 4096 "xmlparse.c"
        var $837=HEAP[$s_addr]; //@line 4096 "xmlparse.c"
        HEAP[$836]=$837; //@line 4096 "xmlparse.c"
        var $838=HEAP[$parser_addr]; //@line 4097 "xmlparse.c"
        var $839=(($838+136)&4294967295); //@line 4097 "xmlparse.c"
        var $840=HEAP[$839]; //@line 4097 "xmlparse.c"
        var $841=HEAP[$parser_addr]; //@line 4097 "xmlparse.c"
        var $842=(($841+300)&4294967295); //@line 4097 "xmlparse.c"
        var $843=HEAP[$842]; //@line 4097 "xmlparse.c"
        var $844=(($843+24)&4294967295); //@line 4097 "xmlparse.c"
        var $845=HEAP[$844]; //@line 4097 "xmlparse.c"
        var $846=HEAP[$parser_addr]; //@line 4097 "xmlparse.c"
        var $847=(($846+300)&4294967295); //@line 4097 "xmlparse.c"
        var $848=HEAP[$847]; //@line 4097 "xmlparse.c"
        var $849=(($848+16)&4294967295); //@line 4097 "xmlparse.c"
        var $850=HEAP[$849]; //@line 4097 "xmlparse.c"
        var $851=HEAP[$parser_addr]; //@line 4097 "xmlparse.c"
        var $852=(($851+300)&4294967295); //@line 4097 "xmlparse.c"
        var $853=HEAP[$852]; //@line 4097 "xmlparse.c"
        var $854=(($853+20)&4294967295); //@line 4097 "xmlparse.c"
        var $855=HEAP[$854]; //@line 4097 "xmlparse.c"
        var $856=HEAP[$parser_addr]; //@line 4097 "xmlparse.c"
        var $857=(($856+300)&4294967295); //@line 4097 "xmlparse.c"
        var $858=HEAP[$857]; //@line 4097 "xmlparse.c"
        var $859=(($858+33)&4294967295); //@line 4097 "xmlparse.c"
        var $860=HEAP[$859]; //@line 4097 "xmlparse.c"
        var $861=unSign(($860), 8, 0); //@line 4097 "xmlparse.c"
        var $862=HEAP[$parser_addr]; //@line 4097 "xmlparse.c"
        var $863=(($862+300)&4294967295); //@line 4097 "xmlparse.c"
        var $864=HEAP[$863]; //@line 4097 "xmlparse.c"
        var $865=(($864)&4294967295); //@line 4097 "xmlparse.c"
        var $866=HEAP[$865]; //@line 4097 "xmlparse.c"
        var $867=HEAP[$parser_addr]; //@line 4097 "xmlparse.c"
        var $868=(($867+4)&4294967295); //@line 4097 "xmlparse.c"
        var $869=HEAP[$868]; //@line 4097 "xmlparse.c"
        FUNCTION_TABLE[$840]($869, $866, $861, 0, 0, $855, $850, $845, 0); //@line 4097 "xmlparse.c"
        HEAP[$handleDefault]=0; //@line 4105 "xmlparse.c"
        __label__ = 144; break; //@line 4105 "xmlparse.c"
      case 144: // $bb143
        __label__ = 310; break; //@line 4105 "xmlparse.c"
      case 145: // $bb144
        var $870=HEAP[$dtd]; //@line 4109 "xmlparse.c"
        var $871=(($870+128)&4294967295); //@line 4109 "xmlparse.c"
        var $872=HEAP[$871]; //@line 4109 "xmlparse.c"
        var $873=reSign(($872), 8, 0)!=0; //@line 4109 "xmlparse.c"
        if ($873) { __label__ = 146; break; } else { __label__ = 153; break; } //@line 4109 "xmlparse.c"
      case 146: // $bb145
        var $874=HEAP[$parser_addr]; //@line 4109 "xmlparse.c"
        var $875=(($874+300)&4294967295); //@line 4109 "xmlparse.c"
        var $876=HEAP[$875]; //@line 4109 "xmlparse.c"
        var $877=($876)!=0; //@line 4109 "xmlparse.c"
        if ($877) { __label__ = 147; break; } else { __label__ = 153; break; } //@line 4109 "xmlparse.c"
      case 147: // $bb146
        var $878=HEAP[$parser_addr]; //@line 4110 "xmlparse.c"
        var $879=(($878+300)&4294967295); //@line 4110 "xmlparse.c"
        var $880=HEAP[$879]; //@line 4110 "xmlparse.c"
        var $881=HEAP[$next_addr]; //@line 4110 "xmlparse.c"
        var $882=HEAP[$dtd]; //@line 4110 "xmlparse.c"
        var $883=(($882+80)&4294967295); //@line 4110 "xmlparse.c"
        var $884=HEAP[$enc_addr]; //@line 4110 "xmlparse.c"
        var $885=HEAP[$s_addr]; //@line 4110 "xmlparse.c"
        var $886=_poolStoreString($883, $884, $885, $881); //@line 4110 "xmlparse.c"
        var $887=(($880+28)&4294967295); //@line 4110 "xmlparse.c"
        HEAP[$887]=$886; //@line 4110 "xmlparse.c"
        var $888=HEAP[$parser_addr]; //@line 4111 "xmlparse.c"
        var $889=(($888+300)&4294967295); //@line 4111 "xmlparse.c"
        var $890=HEAP[$889]; //@line 4111 "xmlparse.c"
        var $891=(($890+28)&4294967295); //@line 4111 "xmlparse.c"
        var $892=HEAP[$891]; //@line 4111 "xmlparse.c"
        var $893=($892)==0; //@line 4111 "xmlparse.c"
        if ($893) { __label__ = 148; break; } else { __label__ = 149; break; } //@line 4111 "xmlparse.c"
      case 148: // $bb147
        HEAP[$0]=1; //@line 4112 "xmlparse.c"
        __label__ = 317; break; //@line 4112 "xmlparse.c"
      case 149: // $bb148
        var $894=HEAP[$dtd]; //@line 4113 "xmlparse.c"
        var $895=(($894+80)&4294967295); //@line 4113 "xmlparse.c"
        var $896=(($895+12)&4294967295); //@line 4113 "xmlparse.c"
        var $897=HEAP[$896]; //@line 4113 "xmlparse.c"
        var $898=HEAP[$dtd]; //@line 4113 "xmlparse.c"
        var $899=(($898+80)&4294967295); //@line 4113 "xmlparse.c"
        var $900=(($899+16)&4294967295); //@line 4113 "xmlparse.c"
        HEAP[$900]=$897; //@line 4113 "xmlparse.c"
        var $901=HEAP[$parser_addr]; //@line 4114 "xmlparse.c"
        var $902=(($901+92)&4294967295); //@line 4114 "xmlparse.c"
        var $903=HEAP[$902]; //@line 4114 "xmlparse.c"
        var $904=($903)!=0; //@line 4114 "xmlparse.c"
        if ($904) { __label__ = 150; break; } else { __label__ = 151; break; } //@line 4114 "xmlparse.c"
      case 150: // $bb149
        var $905=HEAP[$eventEndPP]; //@line 4115 "xmlparse.c"
        var $906=HEAP[$s_addr]; //@line 4115 "xmlparse.c"
        HEAP[$905]=$906; //@line 4115 "xmlparse.c"
        var $907=HEAP[$parser_addr]; //@line 4116 "xmlparse.c"
        var $908=(($907+92)&4294967295); //@line 4116 "xmlparse.c"
        var $909=HEAP[$908]; //@line 4116 "xmlparse.c"
        var $910=HEAP[$parser_addr]; //@line 4116 "xmlparse.c"
        var $911=(($910+300)&4294967295); //@line 4116 "xmlparse.c"
        var $912=HEAP[$911]; //@line 4116 "xmlparse.c"
        var $913=(($912+28)&4294967295); //@line 4116 "xmlparse.c"
        var $914=HEAP[$913]; //@line 4116 "xmlparse.c"
        var $915=HEAP[$parser_addr]; //@line 4116 "xmlparse.c"
        var $916=(($915+300)&4294967295); //@line 4116 "xmlparse.c"
        var $917=HEAP[$916]; //@line 4116 "xmlparse.c"
        var $918=(($917+24)&4294967295); //@line 4116 "xmlparse.c"
        var $919=HEAP[$918]; //@line 4116 "xmlparse.c"
        var $920=HEAP[$parser_addr]; //@line 4116 "xmlparse.c"
        var $921=(($920+300)&4294967295); //@line 4116 "xmlparse.c"
        var $922=HEAP[$921]; //@line 4116 "xmlparse.c"
        var $923=(($922+16)&4294967295); //@line 4116 "xmlparse.c"
        var $924=HEAP[$923]; //@line 4116 "xmlparse.c"
        var $925=HEAP[$parser_addr]; //@line 4116 "xmlparse.c"
        var $926=(($925+300)&4294967295); //@line 4116 "xmlparse.c"
        var $927=HEAP[$926]; //@line 4116 "xmlparse.c"
        var $928=(($927+20)&4294967295); //@line 4116 "xmlparse.c"
        var $929=HEAP[$928]; //@line 4116 "xmlparse.c"
        var $930=HEAP[$parser_addr]; //@line 4116 "xmlparse.c"
        var $931=(($930+300)&4294967295); //@line 4116 "xmlparse.c"
        var $932=HEAP[$931]; //@line 4116 "xmlparse.c"
        var $933=(($932)&4294967295); //@line 4116 "xmlparse.c"
        var $934=HEAP[$933]; //@line 4116 "xmlparse.c"
        var $935=HEAP[$parser_addr]; //@line 4116 "xmlparse.c"
        var $936=(($935+4)&4294967295); //@line 4116 "xmlparse.c"
        var $937=HEAP[$936]; //@line 4116 "xmlparse.c"
        FUNCTION_TABLE[$909]($937, $934, $929, $924, $919, $914); //@line 4116 "xmlparse.c"
        HEAP[$handleDefault]=0; //@line 4122 "xmlparse.c"
        __label__ = 153; break; //@line 4122 "xmlparse.c"
      case 151: // $bb150
        var $938=HEAP[$parser_addr]; //@line 4124 "xmlparse.c"
        var $939=(($938+136)&4294967295); //@line 4124 "xmlparse.c"
        var $940=HEAP[$939]; //@line 4124 "xmlparse.c"
        var $941=($940)!=0; //@line 4124 "xmlparse.c"
        if ($941) { __label__ = 152; break; } else { __label__ = 153; break; } //@line 4124 "xmlparse.c"
      case 152: // $bb151
        var $942=HEAP[$eventEndPP]; //@line 4125 "xmlparse.c"
        var $943=HEAP[$s_addr]; //@line 4125 "xmlparse.c"
        HEAP[$942]=$943; //@line 4125 "xmlparse.c"
        var $944=HEAP[$parser_addr]; //@line 4126 "xmlparse.c"
        var $945=(($944+136)&4294967295); //@line 4126 "xmlparse.c"
        var $946=HEAP[$945]; //@line 4126 "xmlparse.c"
        var $947=HEAP[$parser_addr]; //@line 4126 "xmlparse.c"
        var $948=(($947+300)&4294967295); //@line 4126 "xmlparse.c"
        var $949=HEAP[$948]; //@line 4126 "xmlparse.c"
        var $950=(($949+28)&4294967295); //@line 4126 "xmlparse.c"
        var $951=HEAP[$950]; //@line 4126 "xmlparse.c"
        var $952=HEAP[$parser_addr]; //@line 4126 "xmlparse.c"
        var $953=(($952+300)&4294967295); //@line 4126 "xmlparse.c"
        var $954=HEAP[$953]; //@line 4126 "xmlparse.c"
        var $955=(($954+24)&4294967295); //@line 4126 "xmlparse.c"
        var $956=HEAP[$955]; //@line 4126 "xmlparse.c"
        var $957=HEAP[$parser_addr]; //@line 4126 "xmlparse.c"
        var $958=(($957+300)&4294967295); //@line 4126 "xmlparse.c"
        var $959=HEAP[$958]; //@line 4126 "xmlparse.c"
        var $960=(($959+16)&4294967295); //@line 4126 "xmlparse.c"
        var $961=HEAP[$960]; //@line 4126 "xmlparse.c"
        var $962=HEAP[$parser_addr]; //@line 4126 "xmlparse.c"
        var $963=(($962+300)&4294967295); //@line 4126 "xmlparse.c"
        var $964=HEAP[$963]; //@line 4126 "xmlparse.c"
        var $965=(($964+20)&4294967295); //@line 4126 "xmlparse.c"
        var $966=HEAP[$965]; //@line 4126 "xmlparse.c"
        var $967=HEAP[$parser_addr]; //@line 4126 "xmlparse.c"
        var $968=(($967+300)&4294967295); //@line 4126 "xmlparse.c"
        var $969=HEAP[$968]; //@line 4126 "xmlparse.c"
        var $970=(($969)&4294967295); //@line 4126 "xmlparse.c"
        var $971=HEAP[$970]; //@line 4126 "xmlparse.c"
        var $972=HEAP[$parser_addr]; //@line 4126 "xmlparse.c"
        var $973=(($972+4)&4294967295); //@line 4126 "xmlparse.c"
        var $974=HEAP[$973]; //@line 4126 "xmlparse.c"
        FUNCTION_TABLE[$946]($974, $971, 0, 0, 0, $966, $961, $956, $951); //@line 4126 "xmlparse.c"
        HEAP[$handleDefault]=0; //@line 4133 "xmlparse.c"
        __label__ = 153; break; //@line 4133 "xmlparse.c"
      case 153: // $bb152
        __label__ = 310; break; //@line 4133 "xmlparse.c"
      case 154: // $bb153
        var $975=HEAP[$enc_addr]; //@line 4139 "xmlparse.c"
        var $976=(($975+44)&4294967295); //@line 4139 "xmlparse.c"
        var $977=HEAP[$976]; //@line 4139 "xmlparse.c"
        var $978=HEAP[$next_addr]; //@line 4139 "xmlparse.c"
        var $979=HEAP[$enc_addr]; //@line 4139 "xmlparse.c"
        var $980=HEAP[$s_addr]; //@line 4139 "xmlparse.c"
        var $981=FUNCTION_TABLE[$977]($979, $980, $978); //@line 4139 "xmlparse.c"
        var $982=((($981))|0)!=0; //@line 4139 "xmlparse.c"
        if ($982) { __label__ = 155; break; } else { __label__ = 156; break; } //@line 4139 "xmlparse.c"
      case 155: // $bb154
        var $983=HEAP[$parser_addr]; //@line 4140 "xmlparse.c"
        var $984=(($983+300)&4294967295); //@line 4140 "xmlparse.c"
        HEAP[$984]=0; //@line 4140 "xmlparse.c"
        __label__ = 310; break; //@line 4140 "xmlparse.c"
      case 156: // $bb155
        var $985=HEAP[$dtd]; //@line 4143 "xmlparse.c"
        var $986=(($985+128)&4294967295); //@line 4143 "xmlparse.c"
        var $987=HEAP[$986]; //@line 4143 "xmlparse.c"
        var $988=reSign(($987), 8, 0)!=0; //@line 4143 "xmlparse.c"
        if ($988) { __label__ = 157; break; } else { __label__ = 170; break; } //@line 4143 "xmlparse.c"
      case 157: // $bb156
        var $989=HEAP[$next_addr]; //@line 4144 "xmlparse.c"
        var $990=HEAP[$dtd]; //@line 4144 "xmlparse.c"
        var $991=(($990+80)&4294967295); //@line 4144 "xmlparse.c"
        var $992=HEAP[$enc_addr]; //@line 4144 "xmlparse.c"
        var $993=HEAP[$s_addr]; //@line 4144 "xmlparse.c"
        var $994=_poolStoreString($991, $992, $993, $989); //@line 4144 "xmlparse.c"
        HEAP[$name]=$994; //@line 4144 "xmlparse.c"
        var $995=HEAP[$name]; //@line 4145 "xmlparse.c"
        var $996=($995)==0; //@line 4145 "xmlparse.c"
        if ($996) { __label__ = 158; break; } else { __label__ = 159; break; } //@line 4145 "xmlparse.c"
      case 158: // $bb157
        HEAP[$0]=1; //@line 4146 "xmlparse.c"
        __label__ = 317; break; //@line 4146 "xmlparse.c"
      case 159: // $bb158
        var $997=HEAP[$dtd]; //@line 4147 "xmlparse.c"
        var $998=(($997)&4294967295); //@line 4147 "xmlparse.c"
        var $999=HEAP[$name]; //@line 4147 "xmlparse.c"
        var $1000=_lookup($998, $999, 36); //@line 4147 "xmlparse.c"
        var $1001=$1000; //@line 4147 "xmlparse.c"
        var $1002=HEAP[$parser_addr]; //@line 4147 "xmlparse.c"
        var $1003=(($1002+300)&4294967295); //@line 4147 "xmlparse.c"
        HEAP[$1003]=$1001; //@line 4147 "xmlparse.c"
        var $1004=HEAP[$parser_addr]; //@line 4149 "xmlparse.c"
        var $1005=(($1004+300)&4294967295); //@line 4149 "xmlparse.c"
        var $1006=HEAP[$1005]; //@line 4149 "xmlparse.c"
        var $1007=($1006)==0; //@line 4149 "xmlparse.c"
        if ($1007) { __label__ = 160; break; } else { __label__ = 161; break; } //@line 4149 "xmlparse.c"
      case 160: // $bb159
        HEAP[$0]=1; //@line 4150 "xmlparse.c"
        __label__ = 317; break; //@line 4150 "xmlparse.c"
      case 161: // $bb160
        var $1008=HEAP[$parser_addr]; //@line 4151 "xmlparse.c"
        var $1009=(($1008+300)&4294967295); //@line 4151 "xmlparse.c"
        var $1010=HEAP[$1009]; //@line 4151 "xmlparse.c"
        var $1011=(($1010)&4294967295); //@line 4151 "xmlparse.c"
        var $1012=HEAP[$1011]; //@line 4151 "xmlparse.c"
        var $1013=HEAP[$name]; //@line 4151 "xmlparse.c"
        var $1014=($1012)!=($1013); //@line 4151 "xmlparse.c"
        if ($1014) { __label__ = 162; break; } else { __label__ = 163; break; } //@line 4151 "xmlparse.c"
      case 162: // $bb161
        var $1015=HEAP[$dtd]; //@line 4152 "xmlparse.c"
        var $1016=(($1015+80)&4294967295); //@line 4152 "xmlparse.c"
        var $1017=(($1016+16)&4294967295); //@line 4152 "xmlparse.c"
        var $1018=HEAP[$1017]; //@line 4152 "xmlparse.c"
        var $1019=HEAP[$dtd]; //@line 4152 "xmlparse.c"
        var $1020=(($1019+80)&4294967295); //@line 4152 "xmlparse.c"
        var $1021=(($1020+12)&4294967295); //@line 4152 "xmlparse.c"
        HEAP[$1021]=$1018; //@line 4152 "xmlparse.c"
        var $1022=HEAP[$parser_addr]; //@line 4153 "xmlparse.c"
        var $1023=(($1022+300)&4294967295); //@line 4153 "xmlparse.c"
        HEAP[$1023]=0; //@line 4153 "xmlparse.c"
        __label__ = 169; break; //@line 4153 "xmlparse.c"
      case 163: // $bb162
        var $1024=HEAP[$dtd]; //@line 4156 "xmlparse.c"
        var $1025=(($1024+80)&4294967295); //@line 4156 "xmlparse.c"
        var $1026=(($1025+12)&4294967295); //@line 4156 "xmlparse.c"
        var $1027=HEAP[$1026]; //@line 4156 "xmlparse.c"
        var $1028=HEAP[$dtd]; //@line 4156 "xmlparse.c"
        var $1029=(($1028+80)&4294967295); //@line 4156 "xmlparse.c"
        var $1030=(($1029+16)&4294967295); //@line 4156 "xmlparse.c"
        HEAP[$1030]=$1027; //@line 4156 "xmlparse.c"
        var $1031=HEAP[$parser_addr]; //@line 4157 "xmlparse.c"
        var $1032=(($1031+300)&4294967295); //@line 4157 "xmlparse.c"
        var $1033=HEAP[$1032]; //@line 4157 "xmlparse.c"
        var $1034=(($1033+24)&4294967295); //@line 4157 "xmlparse.c"
        HEAP[$1034]=0; //@line 4157 "xmlparse.c"
        var $1035=HEAP[$parser_addr]; //@line 4158 "xmlparse.c"
        var $1036=(($1035+300)&4294967295); //@line 4158 "xmlparse.c"
        var $1037=HEAP[$1036]; //@line 4158 "xmlparse.c"
        var $1038=(($1037+33)&4294967295); //@line 4158 "xmlparse.c"
        HEAP[$1038]=0; //@line 4158 "xmlparse.c"
        var $1039=HEAP[$parser_addr]; //@line 4162 "xmlparse.c"
        var $1040=(($1039+300)&4294967295); //@line 4162 "xmlparse.c"
        var $1041=HEAP[$1040]; //@line 4162 "xmlparse.c"
        var $1042=HEAP[$parser_addr]; //@line 4162 "xmlparse.c"
        var $1043=(($1042+460)&4294967295); //@line 4162 "xmlparse.c"
        var $1044=HEAP[$1043]; //@line 4162 "xmlparse.c"
        var $1045=($1044)!=0; //@line 4162 "xmlparse.c"
        if ($1045) { __label__ = 166; break; } else { __label__ = 164; break; } //@line 4162 "xmlparse.c"
      case 164: // $bb163
        var $1046=HEAP[$parser_addr]; //@line 4162 "xmlparse.c"
        var $1047=(($1046+284)&4294967295); //@line 4162 "xmlparse.c"
        var $1048=HEAP[$1047]; //@line 4162 "xmlparse.c"
        var $1049=($1048)!=0; //@line 4162 "xmlparse.c"
        if ($1049) { __label__ = 166; break; } else { __label__ = 165; break; } //@line 4162 "xmlparse.c"
      case 165: // $bb164
        HEAP[$iftmp_201]=1; //@line 4162 "xmlparse.c"
        __label__ = 167; break; //@line 4162 "xmlparse.c"
      case 166: // $bb165
        HEAP[$iftmp_201]=0; //@line 4162 "xmlparse.c"
        __label__ = 167; break; //@line 4162 "xmlparse.c"
      case 167: // $bb166
        var $1050=HEAP[$iftmp_201]; //@line 4162 "xmlparse.c"
        var $1051=((($1050)) & 255); //@line 4162 "xmlparse.c"
        var $1052=(($1041+34)&4294967295); //@line 4162 "xmlparse.c"
        HEAP[$1052]=$1051; //@line 4162 "xmlparse.c"
        var $1053=HEAP[$parser_addr]; //@line 4163 "xmlparse.c"
        var $1054=(($1053+136)&4294967295); //@line 4163 "xmlparse.c"
        var $1055=HEAP[$1054]; //@line 4163 "xmlparse.c"
        var $1056=($1055)!=0; //@line 4163 "xmlparse.c"
        if ($1056) { __label__ = 168; break; } else { __label__ = 169; break; } //@line 4163 "xmlparse.c"
      case 168: // $bb167
        HEAP[$handleDefault]=0; //@line 4164 "xmlparse.c"
        __label__ = 169; break; //@line 4164 "xmlparse.c"
      case 169: // $bb168
        __label__ = 171; break; //@line 4164 "xmlparse.c"
      case 170: // $bb169
        var $1057=HEAP[$dtd]; //@line 4168 "xmlparse.c"
        var $1058=(($1057+80)&4294967295); //@line 4168 "xmlparse.c"
        var $1059=(($1058+16)&4294967295); //@line 4168 "xmlparse.c"
        var $1060=HEAP[$1059]; //@line 4168 "xmlparse.c"
        var $1061=HEAP[$dtd]; //@line 4168 "xmlparse.c"
        var $1062=(($1061+80)&4294967295); //@line 4168 "xmlparse.c"
        var $1063=(($1062+12)&4294967295); //@line 4168 "xmlparse.c"
        HEAP[$1063]=$1060; //@line 4168 "xmlparse.c"
        var $1064=HEAP[$parser_addr]; //@line 4169 "xmlparse.c"
        var $1065=(($1064+300)&4294967295); //@line 4169 "xmlparse.c"
        HEAP[$1065]=0; //@line 4169 "xmlparse.c"
        __label__ = 171; break; //@line 4169 "xmlparse.c"
      case 171: // $bb170
        __label__ = 310; break; //@line 4169 "xmlparse.c"
      case 172: // $bb171
        var $1066=HEAP[$parser_addr]; //@line 4204 "xmlparse.c"
        var $1067=(($1066+300)&4294967295); //@line 4204 "xmlparse.c"
        HEAP[$1067]=0; //@line 4204 "xmlparse.c"
        __label__ = 310; break; //@line 4204 "xmlparse.c"
      case 173: // $bb172
        var $1068=HEAP[$parser_addr]; //@line 4208 "xmlparse.c"
        var $1069=(($1068+324)&4294967295); //@line 4208 "xmlparse.c"
        HEAP[$1069]=0; //@line 4208 "xmlparse.c"
        var $1070=HEAP[$parser_addr]; //@line 4209 "xmlparse.c"
        var $1071=(($1070+320)&4294967295); //@line 4209 "xmlparse.c"
        HEAP[$1071]=0; //@line 4209 "xmlparse.c"
        var $1072=HEAP[$parser_addr]; //@line 4210 "xmlparse.c"
        var $1073=(($1072+96)&4294967295); //@line 4210 "xmlparse.c"
        var $1074=HEAP[$1073]; //@line 4210 "xmlparse.c"
        var $1075=($1074)!=0; //@line 4210 "xmlparse.c"
        if ($1075) { __label__ = 174; break; } else { __label__ = 177; break; } //@line 4210 "xmlparse.c"
      case 174: // $bb173
        var $1076=HEAP[$next_addr]; //@line 4211 "xmlparse.c"
        var $1077=HEAP[$parser_addr]; //@line 4211 "xmlparse.c"
        var $1078=(($1077+400)&4294967295); //@line 4211 "xmlparse.c"
        var $1079=HEAP[$enc_addr]; //@line 4211 "xmlparse.c"
        var $1080=HEAP[$s_addr]; //@line 4211 "xmlparse.c"
        var $1081=_poolStoreString($1078, $1079, $1080, $1076); //@line 4211 "xmlparse.c"
        var $1082=HEAP[$parser_addr]; //@line 4211 "xmlparse.c"
        var $1083=(($1082+320)&4294967295); //@line 4211 "xmlparse.c"
        HEAP[$1083]=$1081; //@line 4211 "xmlparse.c"
        var $1084=HEAP[$parser_addr]; //@line 4212 "xmlparse.c"
        var $1085=(($1084+320)&4294967295); //@line 4212 "xmlparse.c"
        var $1086=HEAP[$1085]; //@line 4212 "xmlparse.c"
        var $1087=($1086)==0; //@line 4212 "xmlparse.c"
        if ($1087) { __label__ = 175; break; } else { __label__ = 176; break; } //@line 4212 "xmlparse.c"
      case 175: // $bb174
        HEAP[$0]=1; //@line 4213 "xmlparse.c"
        __label__ = 317; break; //@line 4213 "xmlparse.c"
      case 176: // $bb175
        var $1088=HEAP[$parser_addr]; //@line 4214 "xmlparse.c"
        var $1089=(($1088+400)&4294967295); //@line 4214 "xmlparse.c"
        var $1090=(($1089+12)&4294967295); //@line 4214 "xmlparse.c"
        var $1091=HEAP[$1090]; //@line 4214 "xmlparse.c"
        var $1092=HEAP[$parser_addr]; //@line 4214 "xmlparse.c"
        var $1093=(($1092+400)&4294967295); //@line 4214 "xmlparse.c"
        var $1094=(($1093+16)&4294967295); //@line 4214 "xmlparse.c"
        HEAP[$1094]=$1091; //@line 4214 "xmlparse.c"
        HEAP[$handleDefault]=0; //@line 4215 "xmlparse.c"
        __label__ = 177; break; //@line 4215 "xmlparse.c"
      case 177: // $bb176
        __label__ = 310; break; //@line 4215 "xmlparse.c"
      case 178: // $bb177
        var $1095=HEAP[$enc_addr]; //@line 4219 "xmlparse.c"
        var $1096=(($1095+52)&4294967295); //@line 4219 "xmlparse.c"
        var $1097=HEAP[$1096]; //@line 4219 "xmlparse.c"
        var $1098=HEAP[$next_addr]; //@line 4219 "xmlparse.c"
        var $1099=HEAP[$enc_addr]; //@line 4219 "xmlparse.c"
        var $1100=HEAP[$s_addr]; //@line 4219 "xmlparse.c"
        var $1101=HEAP[$eventPP]; //@line 4219 "xmlparse.c"
        var $1102=FUNCTION_TABLE[$1097]($1099, $1100, $1098, $1101); //@line 4219 "xmlparse.c"
        var $1103=((($1102))|0)==0; //@line 4219 "xmlparse.c"
        if ($1103) { __label__ = 179; break; } else { __label__ = 180; break; } //@line 4219 "xmlparse.c"
      case 179: // $bb178
        HEAP[$0]=32; //@line 4220 "xmlparse.c"
        __label__ = 317; break; //@line 4220 "xmlparse.c"
      case 180: // $bb179
        var $1104=HEAP[$parser_addr]; //@line 4221 "xmlparse.c"
        var $1105=(($1104+320)&4294967295); //@line 4221 "xmlparse.c"
        var $1106=HEAP[$1105]; //@line 4221 "xmlparse.c"
        var $1107=($1106)!=0; //@line 4221 "xmlparse.c"
        if ($1107) { __label__ = 181; break; } else { __label__ = 184; break; } //@line 4221 "xmlparse.c"
      case 181: // $bb180
        var $1108=HEAP[$next_addr]; //@line 4225 "xmlparse.c"
        var $1109=HEAP[$enc_addr]; //@line 4225 "xmlparse.c"
        var $1110=(($1109+64)&4294967295); //@line 4225 "xmlparse.c"
        var $1111=HEAP[$1110]; //@line 4225 "xmlparse.c"
        var $1112=((0 - ($1111))&4294967295); //@line 4225 "xmlparse.c"
        var $1113=(($1108+$1112)&4294967295); //@line 4225 "xmlparse.c"
        var $1114=HEAP[$enc_addr]; //@line 4225 "xmlparse.c"
        var $1115=(($1114+64)&4294967295); //@line 4225 "xmlparse.c"
        var $1116=HEAP[$1115]; //@line 4225 "xmlparse.c"
        var $1117=HEAP[$s_addr]; //@line 4225 "xmlparse.c"
        var $1118=(($1117+$1116)&4294967295); //@line 4225 "xmlparse.c"
        var $1119=HEAP[$parser_addr]; //@line 4225 "xmlparse.c"
        var $1120=(($1119+400)&4294967295); //@line 4225 "xmlparse.c"
        var $1121=HEAP[$enc_addr]; //@line 4225 "xmlparse.c"
        var $1122=_poolStoreString($1120, $1121, $1118, $1113); //@line 4225 "xmlparse.c"
        HEAP[$tem181]=$1122; //@line 4225 "xmlparse.c"
        var $1123=HEAP[$tem181]; //@line 4226 "xmlparse.c"
        var $1124=($1123)==0; //@line 4226 "xmlparse.c"
        if ($1124) { __label__ = 182; break; } else { __label__ = 183; break; } //@line 4226 "xmlparse.c"
      case 182: // $bb182
        HEAP[$0]=1; //@line 4227 "xmlparse.c"
        __label__ = 317; break; //@line 4227 "xmlparse.c"
      case 183: // $bb183
        var $1125=HEAP[$tem181]; //@line 4228 "xmlparse.c"
        _normalizePublicId($1125); //@line 4228 "xmlparse.c"
        var $1126=HEAP[$parser_addr]; //@line 4229 "xmlparse.c"
        var $1127=(($1126+324)&4294967295); //@line 4229 "xmlparse.c"
        var $1128=HEAP[$tem181]; //@line 4229 "xmlparse.c"
        HEAP[$1127]=$1128; //@line 4229 "xmlparse.c"
        var $1129=HEAP[$parser_addr]; //@line 4230 "xmlparse.c"
        var $1130=(($1129+400)&4294967295); //@line 4230 "xmlparse.c"
        var $1131=(($1130+12)&4294967295); //@line 4230 "xmlparse.c"
        var $1132=HEAP[$1131]; //@line 4230 "xmlparse.c"
        var $1133=HEAP[$parser_addr]; //@line 4230 "xmlparse.c"
        var $1134=(($1133+400)&4294967295); //@line 4230 "xmlparse.c"
        var $1135=(($1134+16)&4294967295); //@line 4230 "xmlparse.c"
        HEAP[$1135]=$1132; //@line 4230 "xmlparse.c"
        HEAP[$handleDefault]=0; //@line 4231 "xmlparse.c"
        __label__ = 184; break; //@line 4231 "xmlparse.c"
      case 184: // $bb184
        __label__ = 310; break; //@line 4231 "xmlparse.c"
      case 185: // $bb185
        var $1136=HEAP[$parser_addr]; //@line 4235 "xmlparse.c"
        var $1137=(($1136+320)&4294967295); //@line 4235 "xmlparse.c"
        var $1138=HEAP[$1137]; //@line 4235 "xmlparse.c"
        var $1139=($1138)!=0; //@line 4235 "xmlparse.c"
        if ($1139) { __label__ = 186; break; } else { __label__ = 190; break; } //@line 4235 "xmlparse.c"
      case 186: // $bb186
        var $1140=HEAP[$parser_addr]; //@line 4235 "xmlparse.c"
        var $1141=(($1140+96)&4294967295); //@line 4235 "xmlparse.c"
        var $1142=HEAP[$1141]; //@line 4235 "xmlparse.c"
        var $1143=($1142)!=0; //@line 4235 "xmlparse.c"
        if ($1143) { __label__ = 187; break; } else { __label__ = 190; break; } //@line 4235 "xmlparse.c"
      case 187: // $bb187
        var $1144=HEAP[$next_addr]; //@line 4239 "xmlparse.c"
        var $1145=HEAP[$enc_addr]; //@line 4239 "xmlparse.c"
        var $1146=(($1145+64)&4294967295); //@line 4239 "xmlparse.c"
        var $1147=HEAP[$1146]; //@line 4239 "xmlparse.c"
        var $1148=((0 - ($1147))&4294967295); //@line 4239 "xmlparse.c"
        var $1149=(($1144+$1148)&4294967295); //@line 4239 "xmlparse.c"
        var $1150=HEAP[$enc_addr]; //@line 4239 "xmlparse.c"
        var $1151=(($1150+64)&4294967295); //@line 4239 "xmlparse.c"
        var $1152=HEAP[$1151]; //@line 4239 "xmlparse.c"
        var $1153=HEAP[$s_addr]; //@line 4239 "xmlparse.c"
        var $1154=(($1153+$1152)&4294967295); //@line 4239 "xmlparse.c"
        var $1155=HEAP[$parser_addr]; //@line 4239 "xmlparse.c"
        var $1156=(($1155+400)&4294967295); //@line 4239 "xmlparse.c"
        var $1157=HEAP[$enc_addr]; //@line 4239 "xmlparse.c"
        var $1158=_poolStoreString($1156, $1157, $1154, $1149); //@line 4239 "xmlparse.c"
        HEAP[$systemId]=$1158; //@line 4239 "xmlparse.c"
        var $1159=HEAP[$systemId]; //@line 4240 "xmlparse.c"
        var $1160=($1159)==0; //@line 4240 "xmlparse.c"
        if ($1160) { __label__ = 188; break; } else { __label__ = 189; break; } //@line 4240 "xmlparse.c"
      case 188: // $bb188
        HEAP[$0]=1; //@line 4241 "xmlparse.c"
        __label__ = 317; break; //@line 4241 "xmlparse.c"
      case 189: // $bb189
        var $1161=HEAP[$eventEndPP]; //@line 4242 "xmlparse.c"
        var $1162=HEAP[$s_addr]; //@line 4242 "xmlparse.c"
        HEAP[$1161]=$1162; //@line 4242 "xmlparse.c"
        var $1163=HEAP[$parser_addr]; //@line 4243 "xmlparse.c"
        var $1164=(($1163+96)&4294967295); //@line 4243 "xmlparse.c"
        var $1165=HEAP[$1164]; //@line 4243 "xmlparse.c"
        var $1166=HEAP[$parser_addr]; //@line 4243 "xmlparse.c"
        var $1167=(($1166+324)&4294967295); //@line 4243 "xmlparse.c"
        var $1168=HEAP[$1167]; //@line 4243 "xmlparse.c"
        var $1169=HEAP[$parser_addr]; //@line 4243 "xmlparse.c"
        var $1170=(($1169+344)&4294967295); //@line 4243 "xmlparse.c"
        var $1171=HEAP[$1170]; //@line 4243 "xmlparse.c"
        var $1172=HEAP[$parser_addr]; //@line 4243 "xmlparse.c"
        var $1173=(($1172+320)&4294967295); //@line 4243 "xmlparse.c"
        var $1174=HEAP[$1173]; //@line 4243 "xmlparse.c"
        var $1175=HEAP[$parser_addr]; //@line 4243 "xmlparse.c"
        var $1176=(($1175+4)&4294967295); //@line 4243 "xmlparse.c"
        var $1177=HEAP[$1176]; //@line 4243 "xmlparse.c"
        var $1178=HEAP[$systemId]; //@line 4243 "xmlparse.c"
        FUNCTION_TABLE[$1165]($1177, $1174, $1171, $1178, $1168); //@line 4243 "xmlparse.c"
        HEAP[$handleDefault]=0; //@line 4248 "xmlparse.c"
        __label__ = 190; break; //@line 4248 "xmlparse.c"
      case 190: // $bb190
        var $1179=HEAP[$parser_addr]; //@line 4250 "xmlparse.c"
        var $1180=(($1179+400)&4294967295); //@line 4250 "xmlparse.c"
        _poolClear($1180); //@line 4250 "xmlparse.c"
        __label__ = 310; break; //@line 4250 "xmlparse.c"
      case 191: // $bb191
        var $1181=HEAP[$parser_addr]; //@line 4253 "xmlparse.c"
        var $1182=(($1181+324)&4294967295); //@line 4253 "xmlparse.c"
        var $1183=HEAP[$1182]; //@line 4253 "xmlparse.c"
        var $1184=($1183)!=0; //@line 4253 "xmlparse.c"
        if ($1184) { __label__ = 192; break; } else { __label__ = 194; break; } //@line 4253 "xmlparse.c"
      case 192: // $bb192
        var $1185=HEAP[$parser_addr]; //@line 4253 "xmlparse.c"
        var $1186=(($1185+96)&4294967295); //@line 4253 "xmlparse.c"
        var $1187=HEAP[$1186]; //@line 4253 "xmlparse.c"
        var $1188=($1187)!=0; //@line 4253 "xmlparse.c"
        if ($1188) { __label__ = 193; break; } else { __label__ = 194; break; } //@line 4253 "xmlparse.c"
      case 193: // $bb193
        var $1189=HEAP[$eventEndPP]; //@line 4254 "xmlparse.c"
        var $1190=HEAP[$s_addr]; //@line 4254 "xmlparse.c"
        HEAP[$1189]=$1190; //@line 4254 "xmlparse.c"
        var $1191=HEAP[$parser_addr]; //@line 4255 "xmlparse.c"
        var $1192=(($1191+96)&4294967295); //@line 4255 "xmlparse.c"
        var $1193=HEAP[$1192]; //@line 4255 "xmlparse.c"
        var $1194=HEAP[$parser_addr]; //@line 4255 "xmlparse.c"
        var $1195=(($1194+324)&4294967295); //@line 4255 "xmlparse.c"
        var $1196=HEAP[$1195]; //@line 4255 "xmlparse.c"
        var $1197=HEAP[$parser_addr]; //@line 4255 "xmlparse.c"
        var $1198=(($1197+344)&4294967295); //@line 4255 "xmlparse.c"
        var $1199=HEAP[$1198]; //@line 4255 "xmlparse.c"
        var $1200=HEAP[$parser_addr]; //@line 4255 "xmlparse.c"
        var $1201=(($1200+320)&4294967295); //@line 4255 "xmlparse.c"
        var $1202=HEAP[$1201]; //@line 4255 "xmlparse.c"
        var $1203=HEAP[$parser_addr]; //@line 4255 "xmlparse.c"
        var $1204=(($1203+4)&4294967295); //@line 4255 "xmlparse.c"
        var $1205=HEAP[$1204]; //@line 4255 "xmlparse.c"
        FUNCTION_TABLE[$1193]($1205, $1202, $1199, 0, $1196); //@line 4255 "xmlparse.c"
        HEAP[$handleDefault]=0; //@line 4260 "xmlparse.c"
        __label__ = 194; break; //@line 4260 "xmlparse.c"
      case 194: // $bb194
        var $1206=HEAP[$parser_addr]; //@line 4262 "xmlparse.c"
        var $1207=(($1206+400)&4294967295); //@line 4262 "xmlparse.c"
        _poolClear($1207); //@line 4262 "xmlparse.c"
        __label__ = 310; break; //@line 4262 "xmlparse.c"
      case 195: // $bb195
        var $1208=HEAP[$tok_addr]; //@line 4265 "xmlparse.c"
        if ($1208 == 12) {
          __label__ = 197; break;
        }
        else if ($1208 == 28) {
          __label__ = 196; break;
        }
        else {
        __label__ = 198; break;
        }
        
      case 196: // $bb196
        HEAP[$0]=10; //@line 4269 "xmlparse.c"
        __label__ = 317; break; //@line 4269 "xmlparse.c"
      case 197: // $bb197
        HEAP[$0]=17; //@line 4271 "xmlparse.c"
        __label__ = 317; break; //@line 4271 "xmlparse.c"
      case 198: // $bb198
        HEAP[$0]=2; //@line 4273 "xmlparse.c"
        __label__ = 317; break; //@line 4273 "xmlparse.c"
      case 199: // $bb199
        var $1209=HEAP[$parser_addr]; //@line 4293 "xmlparse.c"
        var $1210=(($1209+252)&4294967295); //@line 4293 "xmlparse.c"
        var $1211=(($1210+4)&4294967295); //@line 4293 "xmlparse.c"
        var $1212=HEAP[$1211]; //@line 4293 "xmlparse.c"
        var $1213=HEAP[$parser_addr]; //@line 4293 "xmlparse.c"
        var $1214=(($1213+452)&4294967295); //@line 4293 "xmlparse.c"
        var $1215=HEAP[$1214]; //@line 4293 "xmlparse.c"
        var $1216=((($1212))>>>0) >= ((($1215))>>>0); //@line 4293 "xmlparse.c"
        if ($1216) { __label__ = 200; break; } else { __label__ = 210; break; } //@line 4293 "xmlparse.c"
      case 200: // $bb200
        var $1217=HEAP[$parser_addr]; //@line 4294 "xmlparse.c"
        var $1218=(($1217+452)&4294967295); //@line 4294 "xmlparse.c"
        var $1219=HEAP[$1218]; //@line 4294 "xmlparse.c"
        var $1220=((($1219))|0)!=0; //@line 4294 "xmlparse.c"
        if ($1220) { __label__ = 201; break; } else { __label__ = 208; break; } //@line 4294 "xmlparse.c"
      case 201: // $bb201
        var $1221=HEAP[$parser_addr]; //@line 4295 "xmlparse.c"
        var $1222=(($1221+12)&4294967295); //@line 4295 "xmlparse.c"
        var $1223=(($1222+4)&4294967295); //@line 4295 "xmlparse.c"
        var $1224=HEAP[$1223]; //@line 4295 "xmlparse.c"
        var $1225=HEAP[$parser_addr]; //@line 4295 "xmlparse.c"
        var $1226=(($1225+452)&4294967295); //@line 4295 "xmlparse.c"
        var $1227=HEAP[$1226]; //@line 4295 "xmlparse.c"
        var $1228=((($1227) * 2)&4294967295); //@line 4295 "xmlparse.c"
        var $1229=HEAP[$parser_addr]; //@line 4295 "xmlparse.c"
        var $1230=(($1229+452)&4294967295); //@line 4295 "xmlparse.c"
        HEAP[$1230]=$1228; //@line 4295 "xmlparse.c"
        var $1231=HEAP[$parser_addr]; //@line 4295 "xmlparse.c"
        var $1232=(($1231+452)&4294967295); //@line 4295 "xmlparse.c"
        var $1233=HEAP[$1232]; //@line 4295 "xmlparse.c"
        var $1234=HEAP[$parser_addr]; //@line 4295 "xmlparse.c"
        var $1235=(($1234+448)&4294967295); //@line 4295 "xmlparse.c"
        var $1236=HEAP[$1235]; //@line 4295 "xmlparse.c"
        var $1237=FUNCTION_TABLE[$1224]($1236, $1233); //@line 4295 "xmlparse.c"
        HEAP[$temp]=$1237; //@line 4295 "xmlparse.c"
        var $1238=HEAP[$temp]; //@line 4296 "xmlparse.c"
        var $1239=($1238)==0; //@line 4296 "xmlparse.c"
        if ($1239) { __label__ = 202; break; } else { __label__ = 203; break; } //@line 4296 "xmlparse.c"
      case 202: // $bb202
        HEAP[$0]=1; //@line 4297 "xmlparse.c"
        __label__ = 317; break; //@line 4297 "xmlparse.c"
      case 203: // $bb203
        var $1240=HEAP[$parser_addr]; //@line 4298 "xmlparse.c"
        var $1241=(($1240+448)&4294967295); //@line 4298 "xmlparse.c"
        var $1242=HEAP[$temp]; //@line 4298 "xmlparse.c"
        HEAP[$1241]=$1242; //@line 4298 "xmlparse.c"
        var $1243=HEAP[$dtd]; //@line 4299 "xmlparse.c"
        var $1244=(($1243+164)&4294967295); //@line 4299 "xmlparse.c"
        var $1245=HEAP[$1244]; //@line 4299 "xmlparse.c"
        var $1246=($1245)!=0; //@line 4299 "xmlparse.c"
        if ($1246) { __label__ = 204; break; } else { __label__ = 207; break; } //@line 4299 "xmlparse.c"
      case 204: // $bb204
        var $1247=HEAP[$parser_addr]; //@line 4300 "xmlparse.c"
        var $1248=(($1247+12)&4294967295); //@line 4300 "xmlparse.c"
        var $1249=(($1248+4)&4294967295); //@line 4300 "xmlparse.c"
        var $1250=HEAP[$1249]; //@line 4300 "xmlparse.c"
        var $1251=HEAP[$parser_addr]; //@line 4300 "xmlparse.c"
        var $1252=(($1251+452)&4294967295); //@line 4300 "xmlparse.c"
        var $1253=HEAP[$1252]; //@line 4300 "xmlparse.c"
        var $1254=((($1253) * 4)&4294967295); //@line 4300 "xmlparse.c"
        var $1255=HEAP[$dtd]; //@line 4300 "xmlparse.c"
        var $1256=(($1255+164)&4294967295); //@line 4300 "xmlparse.c"
        var $1257=HEAP[$1256]; //@line 4300 "xmlparse.c"
        var $1258=$1257; //@line 4300 "xmlparse.c"
        var $1259=FUNCTION_TABLE[$1250]($1258, $1254); //@line 4300 "xmlparse.c"
        var $1260=$1259; //@line 4300 "xmlparse.c"
        HEAP[$temp205]=$1260; //@line 4300 "xmlparse.c"
        var $1261=HEAP[$temp205]; //@line 4302 "xmlparse.c"
        var $1262=($1261)==0; //@line 4302 "xmlparse.c"
        if ($1262) { __label__ = 205; break; } else { __label__ = 206; break; } //@line 4302 "xmlparse.c"
      case 205: // $bb206
        HEAP[$0]=1; //@line 4303 "xmlparse.c"
        __label__ = 317; break; //@line 4303 "xmlparse.c"
      case 206: // $bb207
        var $1263=HEAP[$dtd]; //@line 4304 "xmlparse.c"
        var $1264=(($1263+164)&4294967295); //@line 4304 "xmlparse.c"
        var $1265=HEAP[$temp205]; //@line 4304 "xmlparse.c"
        HEAP[$1264]=$1265; //@line 4304 "xmlparse.c"
        __label__ = 207; break; //@line 4304 "xmlparse.c"
      case 207: // $bb208
        __label__ = 210; break; //@line 4304 "xmlparse.c"
      case 208: // $bb209
        var $1266=HEAP[$parser_addr]; //@line 4308 "xmlparse.c"
        var $1267=(($1266+12)&4294967295); //@line 4308 "xmlparse.c"
        var $1268=(($1267)&4294967295); //@line 4308 "xmlparse.c"
        var $1269=HEAP[$1268]; //@line 4308 "xmlparse.c"
        var $1270=HEAP[$parser_addr]; //@line 4308 "xmlparse.c"
        var $1271=(($1270+452)&4294967295); //@line 4308 "xmlparse.c"
        HEAP[$1271]=32; //@line 4308 "xmlparse.c"
        var $1272=HEAP[$parser_addr]; //@line 4308 "xmlparse.c"
        var $1273=(($1272+452)&4294967295); //@line 4308 "xmlparse.c"
        var $1274=HEAP[$1273]; //@line 4308 "xmlparse.c"
        var $1275=FUNCTION_TABLE[$1269]($1274); //@line 4308 "xmlparse.c"
        var $1276=HEAP[$parser_addr]; //@line 4308 "xmlparse.c"
        var $1277=(($1276+448)&4294967295); //@line 4308 "xmlparse.c"
        HEAP[$1277]=$1275; //@line 4308 "xmlparse.c"
        var $1278=HEAP[$parser_addr]; //@line 4309 "xmlparse.c"
        var $1279=(($1278+448)&4294967295); //@line 4309 "xmlparse.c"
        var $1280=HEAP[$1279]; //@line 4309 "xmlparse.c"
        var $1281=($1280)==0; //@line 4309 "xmlparse.c"
        if ($1281) { __label__ = 209; break; } else { __label__ = 210; break; } //@line 4309 "xmlparse.c"
      case 209: // $bb210
        HEAP[$0]=1; //@line 4310 "xmlparse.c"
        __label__ = 317; break; //@line 4310 "xmlparse.c"
      case 210: // $bb211
        var $1282=HEAP[$parser_addr]; //@line 4313 "xmlparse.c"
        var $1283=(($1282+448)&4294967295); //@line 4313 "xmlparse.c"
        var $1284=HEAP[$1283]; //@line 4313 "xmlparse.c"
        var $1285=HEAP[$parser_addr]; //@line 4313 "xmlparse.c"
        var $1286=(($1285+252)&4294967295); //@line 4313 "xmlparse.c"
        var $1287=(($1286+4)&4294967295); //@line 4313 "xmlparse.c"
        var $1288=HEAP[$1287]; //@line 4313 "xmlparse.c"
        var $1289=(($1284+$1288)&4294967295); //@line 4313 "xmlparse.c"
        HEAP[$1289]=0; //@line 4313 "xmlparse.c"
        var $1290=HEAP[$dtd]; //@line 4314 "xmlparse.c"
        var $1291=(($1290+140)&4294967295); //@line 4314 "xmlparse.c"
        var $1292=HEAP[$1291]; //@line 4314 "xmlparse.c"
        var $1293=reSign(($1292), 8, 0)!=0; //@line 4314 "xmlparse.c"
        if ($1293) { __label__ = 211; break; } else { __label__ = 215; break; } //@line 4314 "xmlparse.c"
      case 211: // $bb212
        var $1294=HEAP[$parser_addr]; //@line 4315 "xmlparse.c"
        var $1295=_nextScaffoldPart($1294); //@line 4315 "xmlparse.c"
        HEAP[$myindex]=$1295; //@line 4315 "xmlparse.c"
        var $1296=HEAP[$myindex]; //@line 4316 "xmlparse.c"
        var $1297=((($1296))|0) < 0; //@line 4316 "xmlparse.c"
        if ($1297) { __label__ = 212; break; } else { __label__ = 213; break; } //@line 4316 "xmlparse.c"
      case 212: // $bb213
        HEAP[$0]=1; //@line 4317 "xmlparse.c"
        __label__ = 317; break; //@line 4317 "xmlparse.c"
      case 213: // $bb214
        var $1298=HEAP[$dtd]; //@line 4318 "xmlparse.c"
        var $1299=(($1298+164)&4294967295); //@line 4318 "xmlparse.c"
        var $1300=HEAP[$1299]; //@line 4318 "xmlparse.c"
        var $1301=HEAP[$dtd]; //@line 4318 "xmlparse.c"
        var $1302=(($1301+160)&4294967295); //@line 4318 "xmlparse.c"
        var $1303=HEAP[$1302]; //@line 4318 "xmlparse.c"
        var $1304=(($1300+4*$1303)&4294967295); //@line 4318 "xmlparse.c"
        var $1305=HEAP[$myindex]; //@line 4318 "xmlparse.c"
        HEAP[$1304]=$1305; //@line 4318 "xmlparse.c"
        var $1306=HEAP[$dtd]; //@line 4319 "xmlparse.c"
        var $1307=(($1306+160)&4294967295); //@line 4319 "xmlparse.c"
        var $1308=HEAP[$1307]; //@line 4319 "xmlparse.c"
        var $1309=((($1308) + 1)&4294967295); //@line 4319 "xmlparse.c"
        var $1310=HEAP[$dtd]; //@line 4319 "xmlparse.c"
        var $1311=(($1310+160)&4294967295); //@line 4319 "xmlparse.c"
        HEAP[$1311]=$1309; //@line 4319 "xmlparse.c"
        var $1312=HEAP[$dtd]; //@line 4320 "xmlparse.c"
        var $1313=(($1312+144)&4294967295); //@line 4320 "xmlparse.c"
        var $1314=HEAP[$1313]; //@line 4320 "xmlparse.c"
        var $1315=HEAP[$myindex]; //@line 4320 "xmlparse.c"
        var $1316=(($1314+28*$1315)&4294967295); //@line 4320 "xmlparse.c"
        var $1317=(($1316)&4294967295); //@line 4320 "xmlparse.c"
        HEAP[$1317]=6; //@line 4320 "xmlparse.c"
        var $1318=HEAP[$parser_addr]; //@line 4321 "xmlparse.c"
        var $1319=(($1318+128)&4294967295); //@line 4321 "xmlparse.c"
        var $1320=HEAP[$1319]; //@line 4321 "xmlparse.c"
        var $1321=($1320)!=0; //@line 4321 "xmlparse.c"
        if ($1321) { __label__ = 214; break; } else { __label__ = 215; break; } //@line 4321 "xmlparse.c"
      case 214: // $bb215
        HEAP[$handleDefault]=0; //@line 4322 "xmlparse.c"
        __label__ = 215; break; //@line 4322 "xmlparse.c"
      case 215: // $bb216
        __label__ = 310; break; //@line 4322 "xmlparse.c"
      case 216: // $bb217
        var $1322=HEAP[$parser_addr]; //@line 4326 "xmlparse.c"
        var $1323=(($1322+448)&4294967295); //@line 4326 "xmlparse.c"
        var $1324=HEAP[$1323]; //@line 4326 "xmlparse.c"
        var $1325=HEAP[$parser_addr]; //@line 4326 "xmlparse.c"
        var $1326=(($1325+252)&4294967295); //@line 4326 "xmlparse.c"
        var $1327=(($1326+4)&4294967295); //@line 4326 "xmlparse.c"
        var $1328=HEAP[$1327]; //@line 4326 "xmlparse.c"
        var $1329=(($1324+$1328)&4294967295); //@line 4326 "xmlparse.c"
        var $1330=HEAP[$1329]; //@line 4326 "xmlparse.c"
        var $1331=reSign(($1330), 8, 0)==124; //@line 4326 "xmlparse.c"
        if ($1331) { __label__ = 217; break; } else { __label__ = 218; break; } //@line 4326 "xmlparse.c"
      case 217: // $bb218
        HEAP[$0]=2; //@line 4327 "xmlparse.c"
        __label__ = 317; break; //@line 4327 "xmlparse.c"
      case 218: // $bb219
        var $1332=HEAP[$parser_addr]; //@line 4328 "xmlparse.c"
        var $1333=(($1332+448)&4294967295); //@line 4328 "xmlparse.c"
        var $1334=HEAP[$1333]; //@line 4328 "xmlparse.c"
        var $1335=HEAP[$parser_addr]; //@line 4328 "xmlparse.c"
        var $1336=(($1335+252)&4294967295); //@line 4328 "xmlparse.c"
        var $1337=(($1336+4)&4294967295); //@line 4328 "xmlparse.c"
        var $1338=HEAP[$1337]; //@line 4328 "xmlparse.c"
        var $1339=(($1334+$1338)&4294967295); //@line 4328 "xmlparse.c"
        HEAP[$1339]=44; //@line 4328 "xmlparse.c"
        var $1340=HEAP[$dtd]; //@line 4329 "xmlparse.c"
        var $1341=(($1340+140)&4294967295); //@line 4329 "xmlparse.c"
        var $1342=HEAP[$1341]; //@line 4329 "xmlparse.c"
        var $1343=reSign(($1342), 8, 0)!=0; //@line 4329 "xmlparse.c"
        if ($1343) { __label__ = 219; break; } else { __label__ = 221; break; } //@line 4329 "xmlparse.c"
      case 219: // $bb220
        var $1344=HEAP[$parser_addr]; //@line 4329 "xmlparse.c"
        var $1345=(($1344+128)&4294967295); //@line 4329 "xmlparse.c"
        var $1346=HEAP[$1345]; //@line 4329 "xmlparse.c"
        var $1347=($1346)!=0; //@line 4329 "xmlparse.c"
        if ($1347) { __label__ = 220; break; } else { __label__ = 221; break; } //@line 4329 "xmlparse.c"
      case 220: // $bb221
        HEAP[$handleDefault]=0; //@line 4330 "xmlparse.c"
        __label__ = 221; break; //@line 4330 "xmlparse.c"
      case 221: // $bb222
        __label__ = 310; break; //@line 4330 "xmlparse.c"
      case 222: // $bb223
        var $1348=HEAP[$parser_addr]; //@line 4333 "xmlparse.c"
        var $1349=(($1348+448)&4294967295); //@line 4333 "xmlparse.c"
        var $1350=HEAP[$1349]; //@line 4333 "xmlparse.c"
        var $1351=HEAP[$parser_addr]; //@line 4333 "xmlparse.c"
        var $1352=(($1351+252)&4294967295); //@line 4333 "xmlparse.c"
        var $1353=(($1352+4)&4294967295); //@line 4333 "xmlparse.c"
        var $1354=HEAP[$1353]; //@line 4333 "xmlparse.c"
        var $1355=(($1350+$1354)&4294967295); //@line 4333 "xmlparse.c"
        var $1356=HEAP[$1355]; //@line 4333 "xmlparse.c"
        var $1357=reSign(($1356), 8, 0)==44; //@line 4333 "xmlparse.c"
        if ($1357) { __label__ = 223; break; } else { __label__ = 224; break; } //@line 4333 "xmlparse.c"
      case 223: // $bb224
        HEAP[$0]=2; //@line 4334 "xmlparse.c"
        __label__ = 317; break; //@line 4334 "xmlparse.c"
      case 224: // $bb225
        var $1358=HEAP[$dtd]; //@line 4335 "xmlparse.c"
        var $1359=(($1358+140)&4294967295); //@line 4335 "xmlparse.c"
        var $1360=HEAP[$1359]; //@line 4335 "xmlparse.c"
        var $1361=reSign(($1360), 8, 0)!=0; //@line 4335 "xmlparse.c"
        if ($1361) { __label__ = 225; break; } else { __label__ = 229; break; } //@line 4335 "xmlparse.c"
      case 225: // $bb226
        var $1362=HEAP[$parser_addr]; //@line 4335 "xmlparse.c"
        var $1363=(($1362+448)&4294967295); //@line 4335 "xmlparse.c"
        var $1364=HEAP[$1363]; //@line 4335 "xmlparse.c"
        var $1365=HEAP[$parser_addr]; //@line 4335 "xmlparse.c"
        var $1366=(($1365+252)&4294967295); //@line 4335 "xmlparse.c"
        var $1367=(($1366+4)&4294967295); //@line 4335 "xmlparse.c"
        var $1368=HEAP[$1367]; //@line 4335 "xmlparse.c"
        var $1369=(($1364+$1368)&4294967295); //@line 4335 "xmlparse.c"
        var $1370=HEAP[$1369]; //@line 4335 "xmlparse.c"
        var $1371=reSign(($1370), 8, 0)==0; //@line 4335 "xmlparse.c"
        if ($1371) { __label__ = 226; break; } else { __label__ = 229; break; } //@line 4335 "xmlparse.c"
      case 226: // $bb227
        var $1372=HEAP[$dtd]; //@line 4335 "xmlparse.c"
        var $1373=(($1372+144)&4294967295); //@line 4335 "xmlparse.c"
        var $1374=HEAP[$1373]; //@line 4335 "xmlparse.c"
        var $1375=HEAP[$dtd]; //@line 4335 "xmlparse.c"
        var $1376=(($1375+164)&4294967295); //@line 4335 "xmlparse.c"
        var $1377=HEAP[$1376]; //@line 4335 "xmlparse.c"
        var $1378=HEAP[$dtd]; //@line 4335 "xmlparse.c"
        var $1379=(($1378+160)&4294967295); //@line 4335 "xmlparse.c"
        var $1380=HEAP[$1379]; //@line 4335 "xmlparse.c"
        var $1381=((($1380) - 1)&4294967295); //@line 4335 "xmlparse.c"
        var $1382=(($1377+4*$1381)&4294967295); //@line 4335 "xmlparse.c"
        var $1383=HEAP[$1382]; //@line 4335 "xmlparse.c"
        var $1384=(($1374+28*$1383)&4294967295); //@line 4335 "xmlparse.c"
        var $1385=(($1384)&4294967295); //@line 4335 "xmlparse.c"
        var $1386=HEAP[$1385]; //@line 4335 "xmlparse.c"
        var $1387=((($1386))|0)!=3; //@line 4335 "xmlparse.c"
        if ($1387) { __label__ = 227; break; } else { __label__ = 229; break; } //@line 4335 "xmlparse.c"
      case 227: // $bb228
        var $1388=HEAP[$dtd]; //@line 4340 "xmlparse.c"
        var $1389=(($1388+144)&4294967295); //@line 4340 "xmlparse.c"
        var $1390=HEAP[$1389]; //@line 4340 "xmlparse.c"
        var $1391=HEAP[$dtd]; //@line 4340 "xmlparse.c"
        var $1392=(($1391+164)&4294967295); //@line 4340 "xmlparse.c"
        var $1393=HEAP[$1392]; //@line 4340 "xmlparse.c"
        var $1394=HEAP[$dtd]; //@line 4340 "xmlparse.c"
        var $1395=(($1394+160)&4294967295); //@line 4340 "xmlparse.c"
        var $1396=HEAP[$1395]; //@line 4340 "xmlparse.c"
        var $1397=((($1396) - 1)&4294967295); //@line 4340 "xmlparse.c"
        var $1398=(($1393+4*$1397)&4294967295); //@line 4340 "xmlparse.c"
        var $1399=HEAP[$1398]; //@line 4340 "xmlparse.c"
        var $1400=(($1390+28*$1399)&4294967295); //@line 4340 "xmlparse.c"
        var $1401=(($1400)&4294967295); //@line 4340 "xmlparse.c"
        HEAP[$1401]=5; //@line 4340 "xmlparse.c"
        var $1402=HEAP[$parser_addr]; //@line 4342 "xmlparse.c"
        var $1403=(($1402+128)&4294967295); //@line 4342 "xmlparse.c"
        var $1404=HEAP[$1403]; //@line 4342 "xmlparse.c"
        var $1405=($1404)!=0; //@line 4342 "xmlparse.c"
        if ($1405) { __label__ = 228; break; } else { __label__ = 229; break; } //@line 4342 "xmlparse.c"
      case 228: // $bb229
        HEAP[$handleDefault]=0; //@line 4343 "xmlparse.c"
        __label__ = 229; break; //@line 4343 "xmlparse.c"
      case 229: // $bb230
        var $1406=HEAP[$parser_addr]; //@line 4345 "xmlparse.c"
        var $1407=(($1406+448)&4294967295); //@line 4345 "xmlparse.c"
        var $1408=HEAP[$1407]; //@line 4345 "xmlparse.c"
        var $1409=HEAP[$parser_addr]; //@line 4345 "xmlparse.c"
        var $1410=(($1409+252)&4294967295); //@line 4345 "xmlparse.c"
        var $1411=(($1410+4)&4294967295); //@line 4345 "xmlparse.c"
        var $1412=HEAP[$1411]; //@line 4345 "xmlparse.c"
        var $1413=(($1408+$1412)&4294967295); //@line 4345 "xmlparse.c"
        HEAP[$1413]=124; //@line 4345 "xmlparse.c"
        __label__ = 310; break; //@line 4345 "xmlparse.c"
      case 230: // $bb231
        var $1414=HEAP[$dtd]; //@line 4421 "xmlparse.c"
        var $1415=(($1414+130)&4294967295); //@line 4421 "xmlparse.c"
        var $1416=HEAP[$1415]; //@line 4421 "xmlparse.c"
        var $1417=reSign(($1416), 8, 0)==0; //@line 4421 "xmlparse.c"
        if ($1417) { __label__ = 231; break; } else { __label__ = 234; break; } //@line 4421 "xmlparse.c"
      case 231: // $bb232
        var $1418=HEAP[$parser_addr]; //@line 4421 "xmlparse.c"
        var $1419=(($1418+108)&4294967295); //@line 4421 "xmlparse.c"
        var $1420=HEAP[$1419]; //@line 4421 "xmlparse.c"
        var $1421=($1420)!=0; //@line 4421 "xmlparse.c"
        if ($1421) { __label__ = 232; break; } else { __label__ = 234; break; } //@line 4421 "xmlparse.c"
      case 232: // $bb233
        var $1422=HEAP[$parser_addr]; //@line 4421 "xmlparse.c"
        var $1423=(($1422+108)&4294967295); //@line 4421 "xmlparse.c"
        var $1424=HEAP[$1423]; //@line 4421 "xmlparse.c"
        var $1425=HEAP[$parser_addr]; //@line 4421 "xmlparse.c"
        var $1426=(($1425+4)&4294967295); //@line 4421 "xmlparse.c"
        var $1427=HEAP[$1426]; //@line 4421 "xmlparse.c"
        var $1428=FUNCTION_TABLE[$1424]($1427); //@line 4421 "xmlparse.c"
        var $1429=((($1428))|0)==0; //@line 4421 "xmlparse.c"
        if ($1429) { __label__ = 233; break; } else { __label__ = 234; break; } //@line 4421 "xmlparse.c"
      case 233: // $bb234
        HEAP[$0]=22; //@line 4424 "xmlparse.c"
        __label__ = 317; break; //@line 4424 "xmlparse.c"
      case 234: // $bb235
        __label__ = 310; break; //@line 4424 "xmlparse.c"
      case 235: // $bb236
        var $1430=HEAP[$parser_addr]; //@line 4430 "xmlparse.c"
        var $1431=(($1430+128)&4294967295); //@line 4430 "xmlparse.c"
        var $1432=HEAP[$1431]; //@line 4430 "xmlparse.c"
        var $1433=($1432)!=0; //@line 4430 "xmlparse.c"
        if ($1433) { __label__ = 236; break; } else { __label__ = 239; break; } //@line 4430 "xmlparse.c"
      case 236: // $bb237
        var $1434=HEAP[$next_addr]; //@line 4431 "xmlparse.c"
        var $1435=HEAP[$parser_addr]; //@line 4431 "xmlparse.c"
        var $1436=HEAP[$enc_addr]; //@line 4431 "xmlparse.c"
        var $1437=HEAP[$s_addr]; //@line 4431 "xmlparse.c"
        var $1438=_getElementType($1435, $1436, $1437, $1434); //@line 4431 "xmlparse.c"
        var $1439=HEAP[$parser_addr]; //@line 4431 "xmlparse.c"
        var $1440=(($1439+328)&4294967295); //@line 4431 "xmlparse.c"
        HEAP[$1440]=$1438; //@line 4431 "xmlparse.c"
        var $1441=HEAP[$parser_addr]; //@line 4432 "xmlparse.c"
        var $1442=(($1441+328)&4294967295); //@line 4432 "xmlparse.c"
        var $1443=HEAP[$1442]; //@line 4432 "xmlparse.c"
        var $1444=($1443)==0; //@line 4432 "xmlparse.c"
        if ($1444) { __label__ = 237; break; } else { __label__ = 238; break; } //@line 4432 "xmlparse.c"
      case 237: // $bb238
        HEAP[$0]=1; //@line 4433 "xmlparse.c"
        __label__ = 317; break; //@line 4433 "xmlparse.c"
      case 238: // $bb239
        var $1445=HEAP[$dtd]; //@line 4434 "xmlparse.c"
        var $1446=(($1445+160)&4294967295); //@line 4434 "xmlparse.c"
        HEAP[$1446]=0; //@line 4434 "xmlparse.c"
        var $1447=HEAP[$dtd]; //@line 4435 "xmlparse.c"
        var $1448=(($1447+156)&4294967295); //@line 4435 "xmlparse.c"
        HEAP[$1448]=0; //@line 4435 "xmlparse.c"
        var $1449=HEAP[$dtd]; //@line 4436 "xmlparse.c"
        var $1450=(($1449+140)&4294967295); //@line 4436 "xmlparse.c"
        HEAP[$1450]=1; //@line 4436 "xmlparse.c"
        HEAP[$handleDefault]=0; //@line 4437 "xmlparse.c"
        __label__ = 239; break; //@line 4437 "xmlparse.c"
      case 239: // $bb240
        __label__ = 310; break; //@line 4437 "xmlparse.c"
      case 240: // $bb241
        var $1451=HEAP[$dtd]; //@line 4443 "xmlparse.c"
        var $1452=(($1451+140)&4294967295); //@line 4443 "xmlparse.c"
        var $1453=HEAP[$1452]; //@line 4443 "xmlparse.c"
        var $1454=reSign(($1453), 8, 0)!=0; //@line 4443 "xmlparse.c"
        if ($1454) { __label__ = 241; break; } else { __label__ = 249; break; } //@line 4443 "xmlparse.c"
      case 241: // $bb242
        var $1455=HEAP[$parser_addr]; //@line 4444 "xmlparse.c"
        var $1456=(($1455+128)&4294967295); //@line 4444 "xmlparse.c"
        var $1457=HEAP[$1456]; //@line 4444 "xmlparse.c"
        var $1458=($1457)!=0; //@line 4444 "xmlparse.c"
        if ($1458) { __label__ = 242; break; } else { __label__ = 248; break; } //@line 4444 "xmlparse.c"
      case 242: // $bb243
        var $1459=HEAP[$parser_addr]; //@line 4445 "xmlparse.c"
        var $1460=(($1459+12)&4294967295); //@line 4445 "xmlparse.c"
        var $1461=(($1460)&4294967295); //@line 4445 "xmlparse.c"
        var $1462=HEAP[$1461]; //@line 4445 "xmlparse.c"
        var $1463=FUNCTION_TABLE[$1462](20); //@line 4445 "xmlparse.c"
        var $1464=$1463; //@line 4445 "xmlparse.c"
        HEAP[$content]=$1464; //@line 4445 "xmlparse.c"
        var $1465=HEAP[$content]; //@line 4446 "xmlparse.c"
        var $1466=($1465)==0; //@line 4446 "xmlparse.c"
        if ($1466) { __label__ = 243; break; } else { __label__ = 244; break; } //@line 4446 "xmlparse.c"
      case 243: // $bb244
        HEAP[$0]=1; //@line 4447 "xmlparse.c"
        __label__ = 317; break; //@line 4447 "xmlparse.c"
      case 244: // $bb245
        var $1467=HEAP[$content]; //@line 4448 "xmlparse.c"
        var $1468=(($1467+4)&4294967295); //@line 4448 "xmlparse.c"
        HEAP[$1468]=0; //@line 4448 "xmlparse.c"
        var $1469=HEAP[$content]; //@line 4449 "xmlparse.c"
        var $1470=(($1469+8)&4294967295); //@line 4449 "xmlparse.c"
        HEAP[$1470]=0; //@line 4449 "xmlparse.c"
        var $1471=HEAP[$content]; //@line 4450 "xmlparse.c"
        var $1472=(($1471+12)&4294967295); //@line 4450 "xmlparse.c"
        HEAP[$1472]=0; //@line 4450 "xmlparse.c"
        var $1473=HEAP[$content]; //@line 4451 "xmlparse.c"
        var $1474=(($1473+16)&4294967295); //@line 4451 "xmlparse.c"
        HEAP[$1474]=0; //@line 4451 "xmlparse.c"
        var $1475=HEAP[$role]; //@line 4452 "xmlparse.c"
        var $1476=((($1475))|0)==41; //@line 4452 "xmlparse.c"
        if ($1476) { __label__ = 245; break; } else { __label__ = 246; break; } //@line 4452 "xmlparse.c"
      case 245: // $bb246
        HEAP[$iftmp_207]=2; //@line 4452 "xmlparse.c"
        __label__ = 247; break; //@line 4452 "xmlparse.c"
      case 246: // $bb247
        HEAP[$iftmp_207]=1; //@line 4452 "xmlparse.c"
        __label__ = 247; break; //@line 4452 "xmlparse.c"
      case 247: // $bb248
        var $1477=HEAP[$content]; //@line 4452 "xmlparse.c"
        var $1478=(($1477)&4294967295); //@line 4452 "xmlparse.c"
        var $1479=HEAP[$iftmp_207]; //@line 4452 "xmlparse.c"
        HEAP[$1478]=$1479; //@line 4452 "xmlparse.c"
        var $1480=HEAP[$eventEndPP]; //@line 4455 "xmlparse.c"
        var $1481=HEAP[$s_addr]; //@line 4455 "xmlparse.c"
        HEAP[$1480]=$1481; //@line 4455 "xmlparse.c"
        var $1482=HEAP[$parser_addr]; //@line 4456 "xmlparse.c"
        var $1483=(($1482+128)&4294967295); //@line 4456 "xmlparse.c"
        var $1484=HEAP[$1483]; //@line 4456 "xmlparse.c"
        var $1485=HEAP[$parser_addr]; //@line 4456 "xmlparse.c"
        var $1486=(($1485+328)&4294967295); //@line 4456 "xmlparse.c"
        var $1487=HEAP[$1486]; //@line 4456 "xmlparse.c"
        var $1488=(($1487)&4294967295); //@line 4456 "xmlparse.c"
        var $1489=HEAP[$1488]; //@line 4456 "xmlparse.c"
        var $1490=HEAP[$parser_addr]; //@line 4456 "xmlparse.c"
        var $1491=(($1490+4)&4294967295); //@line 4456 "xmlparse.c"
        var $1492=HEAP[$1491]; //@line 4456 "xmlparse.c"
        var $1493=HEAP[$content]; //@line 4456 "xmlparse.c"
        FUNCTION_TABLE[$1484]($1492, $1489, $1493); //@line 4456 "xmlparse.c"
        HEAP[$handleDefault]=0; //@line 4457 "xmlparse.c"
        __label__ = 248; break; //@line 4457 "xmlparse.c"
      case 248: // $bb249
        var $1494=HEAP[$dtd]; //@line 4459 "xmlparse.c"
        var $1495=(($1494+140)&4294967295); //@line 4459 "xmlparse.c"
        HEAP[$1495]=0; //@line 4459 "xmlparse.c"
        __label__ = 249; break; //@line 4459 "xmlparse.c"
      case 249: // $bb250
        __label__ = 310; break; //@line 4459 "xmlparse.c"
      case 250: // $bb251
        var $1496=HEAP[$dtd]; //@line 4464 "xmlparse.c"
        var $1497=(($1496+140)&4294967295); //@line 4464 "xmlparse.c"
        var $1498=HEAP[$1497]; //@line 4464 "xmlparse.c"
        var $1499=reSign(($1498), 8, 0)!=0; //@line 4464 "xmlparse.c"
        if ($1499) { __label__ = 251; break; } else { __label__ = 253; break; } //@line 4464 "xmlparse.c"
      case 251: // $bb252
        var $1500=HEAP[$dtd]; //@line 4465 "xmlparse.c"
        var $1501=(($1500+144)&4294967295); //@line 4465 "xmlparse.c"
        var $1502=HEAP[$1501]; //@line 4465 "xmlparse.c"
        var $1503=HEAP[$dtd]; //@line 4465 "xmlparse.c"
        var $1504=(($1503+164)&4294967295); //@line 4465 "xmlparse.c"
        var $1505=HEAP[$1504]; //@line 4465 "xmlparse.c"
        var $1506=HEAP[$dtd]; //@line 4465 "xmlparse.c"
        var $1507=(($1506+160)&4294967295); //@line 4465 "xmlparse.c"
        var $1508=HEAP[$1507]; //@line 4465 "xmlparse.c"
        var $1509=((($1508) - 1)&4294967295); //@line 4465 "xmlparse.c"
        var $1510=(($1505+4*$1509)&4294967295); //@line 4465 "xmlparse.c"
        var $1511=HEAP[$1510]; //@line 4465 "xmlparse.c"
        var $1512=(($1502+28*$1511)&4294967295); //@line 4465 "xmlparse.c"
        var $1513=(($1512)&4294967295); //@line 4465 "xmlparse.c"
        HEAP[$1513]=3; //@line 4465 "xmlparse.c"
        var $1514=HEAP[$parser_addr]; //@line 4467 "xmlparse.c"
        var $1515=(($1514+128)&4294967295); //@line 4467 "xmlparse.c"
        var $1516=HEAP[$1515]; //@line 4467 "xmlparse.c"
        var $1517=($1516)!=0; //@line 4467 "xmlparse.c"
        if ($1517) { __label__ = 252; break; } else { __label__ = 253; break; } //@line 4467 "xmlparse.c"
      case 252: // $bb253
        HEAP[$handleDefault]=0; //@line 4468 "xmlparse.c"
        __label__ = 253; break; //@line 4468 "xmlparse.c"
      case 253: // $bb254
        __label__ = 310; break; //@line 4468 "xmlparse.c"
      case 254: // $bb255
        HEAP[$quant]=0; //@line 4473 "xmlparse.c"
        __label__ = 258; break; //@line 4473 "xmlparse.c"
      case 255: // $bb256
        HEAP[$quant]=1; //@line 4476 "xmlparse.c"
        __label__ = 258; break; //@line 4476 "xmlparse.c"
      case 256: // $bb257
        HEAP[$quant]=2; //@line 4479 "xmlparse.c"
        __label__ = 258; break; //@line 4479 "xmlparse.c"
      case 257: // $bb258
        HEAP[$quant]=3; //@line 4482 "xmlparse.c"
        __label__ = 258; break; //@line 4483 "xmlparse.c"
      case 258: // $elementContent
        var $1518=HEAP[$dtd]; //@line 4484 "xmlparse.c"
        var $1519=(($1518+140)&4294967295); //@line 4484 "xmlparse.c"
        var $1520=HEAP[$1519]; //@line 4484 "xmlparse.c"
        var $1521=reSign(($1520), 8, 0)!=0; //@line 4484 "xmlparse.c"
        if ($1521) { __label__ = 259; break; } else { __label__ = 270; break; } //@line 4484 "xmlparse.c"
      case 259: // $bb259
        var $1522=HEAP[$quant]; //@line 4490 "xmlparse.c"
        var $1523=((($1522))|0)!=0; //@line 4490 "xmlparse.c"
        if ($1523) { __label__ = 260; break; } else { __label__ = 261; break; } //@line 4490 "xmlparse.c"
      case 260: // $bb262
        var $1524=HEAP[$next_addr]; //@line 4490 "xmlparse.c"
        var $1525=HEAP[$enc_addr]; //@line 4490 "xmlparse.c"
        var $1526=(($1525+64)&4294967295); //@line 4490 "xmlparse.c"
        var $1527=HEAP[$1526]; //@line 4490 "xmlparse.c"
        var $1528=((0 - ($1527))&4294967295); //@line 4490 "xmlparse.c"
        var $1529=(($1524+$1528)&4294967295); //@line 4490 "xmlparse.c"
        HEAP[$iftmp_208]=$1529; //@line 4490 "xmlparse.c"
        __label__ = 262; break; //@line 4490 "xmlparse.c"
      case 261: // $bb263
        var $1530=HEAP[$next_addr]; //@line 4490 "xmlparse.c"
        HEAP[$iftmp_208]=$1530; //@line 4490 "xmlparse.c"
        __label__ = 262; break; //@line 4490 "xmlparse.c"
      case 262: // $bb264
        var $1531=HEAP[$iftmp_208]; //@line 4490 "xmlparse.c"
        HEAP[$nxt]=$1531; //@line 4490 "xmlparse.c"
        var $1532=HEAP[$parser_addr]; //@line 4491 "xmlparse.c"
        var $1533=_nextScaffoldPart($1532); //@line 4491 "xmlparse.c"
        HEAP[$myindex261]=$1533; //@line 4491 "xmlparse.c"
        var $1534=HEAP[$myindex261]; //@line 4492 "xmlparse.c"
        var $1535=((($1534))|0) < 0; //@line 4492 "xmlparse.c"
        if ($1535) { __label__ = 263; break; } else { __label__ = 264; break; } //@line 4492 "xmlparse.c"
      case 263: // $bb265
        HEAP[$0]=1; //@line 4493 "xmlparse.c"
        __label__ = 317; break; //@line 4493 "xmlparse.c"
      case 264: // $bb266
        var $1536=HEAP[$dtd]; //@line 4494 "xmlparse.c"
        var $1537=(($1536+144)&4294967295); //@line 4494 "xmlparse.c"
        var $1538=HEAP[$1537]; //@line 4494 "xmlparse.c"
        var $1539=HEAP[$myindex261]; //@line 4494 "xmlparse.c"
        var $1540=(($1538+28*$1539)&4294967295); //@line 4494 "xmlparse.c"
        var $1541=(($1540)&4294967295); //@line 4494 "xmlparse.c"
        HEAP[$1541]=4; //@line 4494 "xmlparse.c"
        var $1542=HEAP[$dtd]; //@line 4495 "xmlparse.c"
        var $1543=(($1542+144)&4294967295); //@line 4495 "xmlparse.c"
        var $1544=HEAP[$1543]; //@line 4495 "xmlparse.c"
        var $1545=HEAP[$myindex261]; //@line 4495 "xmlparse.c"
        var $1546=(($1544+28*$1545)&4294967295); //@line 4495 "xmlparse.c"
        var $1547=(($1546+4)&4294967295); //@line 4495 "xmlparse.c"
        var $1548=HEAP[$quant]; //@line 4495 "xmlparse.c"
        HEAP[$1547]=$1548; //@line 4495 "xmlparse.c"
        var $1549=HEAP[$parser_addr]; //@line 4496 "xmlparse.c"
        var $1550=HEAP[$enc_addr]; //@line 4496 "xmlparse.c"
        var $1551=HEAP[$s_addr]; //@line 4496 "xmlparse.c"
        var $1552=HEAP[$nxt]; //@line 4496 "xmlparse.c"
        var $1553=_getElementType($1549, $1550, $1551, $1552); //@line 4496 "xmlparse.c"
        HEAP[$el]=$1553; //@line 4496 "xmlparse.c"
        var $1554=HEAP[$el]; //@line 4497 "xmlparse.c"
        var $1555=($1554)==0; //@line 4497 "xmlparse.c"
        if ($1555) { __label__ = 265; break; } else { __label__ = 266; break; } //@line 4497 "xmlparse.c"
      case 265: // $bb267
        HEAP[$0]=1; //@line 4498 "xmlparse.c"
        __label__ = 317; break; //@line 4498 "xmlparse.c"
      case 266: // $bb268
        var $1556=HEAP[$el]; //@line 4499 "xmlparse.c"
        var $1557=(($1556)&4294967295); //@line 4499 "xmlparse.c"
        var $1558=HEAP[$1557]; //@line 4499 "xmlparse.c"
        HEAP[$name260]=$1558; //@line 4499 "xmlparse.c"
        var $1559=HEAP[$dtd]; //@line 4500 "xmlparse.c"
        var $1560=(($1559+144)&4294967295); //@line 4500 "xmlparse.c"
        var $1561=HEAP[$1560]; //@line 4500 "xmlparse.c"
        var $1562=HEAP[$myindex261]; //@line 4500 "xmlparse.c"
        var $1563=(($1561+28*$1562)&4294967295); //@line 4500 "xmlparse.c"
        var $1564=(($1563+8)&4294967295); //@line 4500 "xmlparse.c"
        var $1565=HEAP[$name260]; //@line 4500 "xmlparse.c"
        HEAP[$1564]=$1565; //@line 4500 "xmlparse.c"
        HEAP[$nameLen]=0; //@line 4501 "xmlparse.c"
        __label__ = 267; break; //@line 4501 "xmlparse.c"
      case 267: // $bb269
        var $1566=HEAP[$name260]; //@line 4502 "xmlparse.c"
        var $1567=HEAP[$nameLen]; //@line 4502 "xmlparse.c"
        var $1568=(($1566+$1567)&4294967295); //@line 4502 "xmlparse.c"
        var $1569=HEAP[$1568]; //@line 4502 "xmlparse.c"
        var $1570=reSign(($1569), 8, 0)!=0; //@line 4502 "xmlparse.c"
        var $1571=unSign(($1570), 1, 0); //@line 4502 "xmlparse.c"
        var $1572=HEAP[$nameLen]; //@line 4502 "xmlparse.c"
        var $1573=((($1572) + 1)&4294967295); //@line 4502 "xmlparse.c"
        HEAP[$nameLen]=$1573; //@line 4502 "xmlparse.c"
        var $toBool=reSign(($1571), 8, 0)!=0; //@line 4502 "xmlparse.c"
        if ($toBool) { __label__ = 267; break; } else { __label__ = 268; break; } //@line 4502 "xmlparse.c"
      case 268: // $bb270
        var $1574=HEAP[$dtd]; //@line 4503 "xmlparse.c"
        var $1575=(($1574+148)&4294967295); //@line 4503 "xmlparse.c"
        var $1576=HEAP[$1575]; //@line 4503 "xmlparse.c"
        var $1577=HEAP[$nameLen]; //@line 4503 "xmlparse.c"
        var $1578=((($1576) + ($1577))&4294967295); //@line 4503 "xmlparse.c"
        var $1579=HEAP[$dtd]; //@line 4503 "xmlparse.c"
        var $1580=(($1579+148)&4294967295); //@line 4503 "xmlparse.c"
        HEAP[$1580]=$1578; //@line 4503 "xmlparse.c"
        var $1581=HEAP[$parser_addr]; //@line 4504 "xmlparse.c"
        var $1582=(($1581+128)&4294967295); //@line 4504 "xmlparse.c"
        var $1583=HEAP[$1582]; //@line 4504 "xmlparse.c"
        var $1584=($1583)!=0; //@line 4504 "xmlparse.c"
        if ($1584) { __label__ = 269; break; } else { __label__ = 270; break; } //@line 4504 "xmlparse.c"
      case 269: // $bb271
        HEAP[$handleDefault]=0; //@line 4505 "xmlparse.c"
        __label__ = 270; break; //@line 4505 "xmlparse.c"
      case 270: // $bb272
        __label__ = 310; break; //@line 4505 "xmlparse.c"
      case 271: // $bb273
        HEAP[$quant]=0; //@line 4510 "xmlparse.c"
        __label__ = 275; break; //@line 4510 "xmlparse.c"
      case 272: // $bb274
        HEAP[$quant]=1; //@line 4513 "xmlparse.c"
        __label__ = 275; break; //@line 4513 "xmlparse.c"
      case 273: // $bb275
        HEAP[$quant]=2; //@line 4516 "xmlparse.c"
        __label__ = 275; break; //@line 4516 "xmlparse.c"
      case 274: // $bb276
        HEAP[$quant]=3; //@line 4519 "xmlparse.c"
        __label__ = 275; break; //@line 4520 "xmlparse.c"
      case 275: // $closeGroup
        var $1585=HEAP[$dtd]; //@line 4521 "xmlparse.c"
        var $1586=(($1585+140)&4294967295); //@line 4521 "xmlparse.c"
        var $1587=HEAP[$1586]; //@line 4521 "xmlparse.c"
        var $1588=reSign(($1587), 8, 0)!=0; //@line 4521 "xmlparse.c"
        if ($1588) { __label__ = 276; break; } else { __label__ = 284; break; } //@line 4521 "xmlparse.c"
      case 276: // $bb277
        var $1589=HEAP[$parser_addr]; //@line 4522 "xmlparse.c"
        var $1590=(($1589+128)&4294967295); //@line 4522 "xmlparse.c"
        var $1591=HEAP[$1590]; //@line 4522 "xmlparse.c"
        var $1592=($1591)!=0; //@line 4522 "xmlparse.c"
        if ($1592) { __label__ = 277; break; } else { __label__ = 278; break; } //@line 4522 "xmlparse.c"
      case 277: // $bb278
        HEAP[$handleDefault]=0; //@line 4523 "xmlparse.c"
        __label__ = 278; break; //@line 4523 "xmlparse.c"
      case 278: // $bb279
        var $1593=HEAP[$dtd]; //@line 4524 "xmlparse.c"
        var $1594=(($1593+160)&4294967295); //@line 4524 "xmlparse.c"
        var $1595=HEAP[$1594]; //@line 4524 "xmlparse.c"
        var $1596=((($1595) - 1)&4294967295); //@line 4524 "xmlparse.c"
        var $1597=HEAP[$dtd]; //@line 4524 "xmlparse.c"
        var $1598=(($1597+160)&4294967295); //@line 4524 "xmlparse.c"
        HEAP[$1598]=$1596; //@line 4524 "xmlparse.c"
        var $1599=HEAP[$dtd]; //@line 4525 "xmlparse.c"
        var $1600=(($1599+144)&4294967295); //@line 4525 "xmlparse.c"
        var $1601=HEAP[$1600]; //@line 4525 "xmlparse.c"
        var $1602=HEAP[$dtd]; //@line 4525 "xmlparse.c"
        var $1603=(($1602+164)&4294967295); //@line 4525 "xmlparse.c"
        var $1604=HEAP[$1603]; //@line 4525 "xmlparse.c"
        var $1605=HEAP[$dtd]; //@line 4525 "xmlparse.c"
        var $1606=(($1605+160)&4294967295); //@line 4525 "xmlparse.c"
        var $1607=HEAP[$1606]; //@line 4525 "xmlparse.c"
        var $1608=(($1604+4*$1607)&4294967295); //@line 4525 "xmlparse.c"
        var $1609=HEAP[$1608]; //@line 4525 "xmlparse.c"
        var $1610=(($1601+28*$1609)&4294967295); //@line 4525 "xmlparse.c"
        var $1611=(($1610+4)&4294967295); //@line 4525 "xmlparse.c"
        var $1612=HEAP[$quant]; //@line 4525 "xmlparse.c"
        HEAP[$1611]=$1612; //@line 4525 "xmlparse.c"
        var $1613=HEAP[$dtd]; //@line 4526 "xmlparse.c"
        var $1614=(($1613+160)&4294967295); //@line 4526 "xmlparse.c"
        var $1615=HEAP[$1614]; //@line 4526 "xmlparse.c"
        var $1616=((($1615))|0)==0; //@line 4526 "xmlparse.c"
        if ($1616) { __label__ = 279; break; } else { __label__ = 284; break; } //@line 4526 "xmlparse.c"
      case 279: // $bb280
        var $1617=HEAP[$handleDefault]; //@line 4527 "xmlparse.c"
        var $1618=reSign(($1617), 8, 0)==0; //@line 4527 "xmlparse.c"
        if ($1618) { __label__ = 280; break; } else { __label__ = 283; break; } //@line 4527 "xmlparse.c"
      case 280: // $bb281
        var $1619=HEAP[$parser_addr]; //@line 4528 "xmlparse.c"
        var $1620=_build_model($1619); //@line 4528 "xmlparse.c"
        HEAP[$model]=$1620; //@line 4528 "xmlparse.c"
        var $1621=HEAP[$model]; //@line 4529 "xmlparse.c"
        var $1622=($1621)==0; //@line 4529 "xmlparse.c"
        if ($1622) { __label__ = 281; break; } else { __label__ = 282; break; } //@line 4529 "xmlparse.c"
      case 281: // $bb282
        HEAP[$0]=1; //@line 4530 "xmlparse.c"
        __label__ = 317; break; //@line 4530 "xmlparse.c"
      case 282: // $bb283
        var $1623=HEAP[$eventEndPP]; //@line 4531 "xmlparse.c"
        var $1624=HEAP[$s_addr]; //@line 4531 "xmlparse.c"
        HEAP[$1623]=$1624; //@line 4531 "xmlparse.c"
        var $1625=HEAP[$parser_addr]; //@line 4532 "xmlparse.c"
        var $1626=(($1625+128)&4294967295); //@line 4532 "xmlparse.c"
        var $1627=HEAP[$1626]; //@line 4532 "xmlparse.c"
        var $1628=HEAP[$parser_addr]; //@line 4532 "xmlparse.c"
        var $1629=(($1628+328)&4294967295); //@line 4532 "xmlparse.c"
        var $1630=HEAP[$1629]; //@line 4532 "xmlparse.c"
        var $1631=(($1630)&4294967295); //@line 4532 "xmlparse.c"
        var $1632=HEAP[$1631]; //@line 4532 "xmlparse.c"
        var $1633=HEAP[$parser_addr]; //@line 4532 "xmlparse.c"
        var $1634=(($1633+4)&4294967295); //@line 4532 "xmlparse.c"
        var $1635=HEAP[$1634]; //@line 4532 "xmlparse.c"
        var $1636=HEAP[$model]; //@line 4532 "xmlparse.c"
        FUNCTION_TABLE[$1627]($1635, $1632, $1636); //@line 4532 "xmlparse.c"
        __label__ = 283; break; //@line 4532 "xmlparse.c"
      case 283: // $bb284
        var $1637=HEAP[$dtd]; //@line 4534 "xmlparse.c"
        var $1638=(($1637+140)&4294967295); //@line 4534 "xmlparse.c"
        HEAP[$1638]=0; //@line 4534 "xmlparse.c"
        var $1639=HEAP[$dtd]; //@line 4535 "xmlparse.c"
        var $1640=(($1639+148)&4294967295); //@line 4535 "xmlparse.c"
        HEAP[$1640]=0; //@line 4535 "xmlparse.c"
        __label__ = 284; break; //@line 4535 "xmlparse.c"
      case 284: // $bb285
        __label__ = 310; break; //@line 4535 "xmlparse.c"
      case 285: // $bb286
        var $1641=HEAP[$next_addr]; //@line 4542 "xmlparse.c"
        var $1642=HEAP[$parser_addr]; //@line 4542 "xmlparse.c"
        var $1643=HEAP[$enc_addr]; //@line 4542 "xmlparse.c"
        var $1644=HEAP[$s_addr]; //@line 4542 "xmlparse.c"
        var $1645=_reportProcessingInstruction($1642, $1643, $1644, $1641); //@line 4542 "xmlparse.c"
        var $1646=((($1645))|0)==0; //@line 4542 "xmlparse.c"
        if ($1646) { __label__ = 286; break; } else { __label__ = 287; break; } //@line 4542 "xmlparse.c"
      case 286: // $bb287
        HEAP[$0]=1; //@line 4543 "xmlparse.c"
        __label__ = 317; break; //@line 4543 "xmlparse.c"
      case 287: // $bb288
        HEAP[$handleDefault]=0; //@line 4544 "xmlparse.c"
        __label__ = 310; break; //@line 4544 "xmlparse.c"
      case 288: // $bb289
        var $1647=HEAP[$next_addr]; //@line 4547 "xmlparse.c"
        var $1648=HEAP[$parser_addr]; //@line 4547 "xmlparse.c"
        var $1649=HEAP[$enc_addr]; //@line 4547 "xmlparse.c"
        var $1650=HEAP[$s_addr]; //@line 4547 "xmlparse.c"
        var $1651=_reportComment($1648, $1649, $1650, $1647); //@line 4547 "xmlparse.c"
        var $1652=((($1651))|0)==0; //@line 4547 "xmlparse.c"
        if ($1652) { __label__ = 289; break; } else { __label__ = 290; break; } //@line 4547 "xmlparse.c"
      case 289: // $bb290
        HEAP[$0]=1; //@line 4548 "xmlparse.c"
        __label__ = 317; break; //@line 4548 "xmlparse.c"
      case 290: // $bb291
        HEAP[$handleDefault]=0; //@line 4549 "xmlparse.c"
        __label__ = 310; break; //@line 4549 "xmlparse.c"
      case 291: // $bb292
        var $1653=HEAP[$tok_addr]; //@line 4552 "xmlparse.c"
        if ($1653 == 14) {
          __label__ = 292; break;
        }
        else {
        __label__ = 293; break;
        }
        
      case 292: // $bb293
        HEAP[$handleDefault]=0; //@line 4554 "xmlparse.c"
        __label__ = 293; break; //@line 4554 "xmlparse.c"
      case 293: // $bb294
        __label__ = 310; break; //@line 4554 "xmlparse.c"
      case 294: // $bb295
        var $1654=HEAP[$parser_addr]; //@line 4559 "xmlparse.c"
        var $1655=(($1654+84)&4294967295); //@line 4559 "xmlparse.c"
        var $1656=HEAP[$1655]; //@line 4559 "xmlparse.c"
        var $1657=($1656)!=0; //@line 4559 "xmlparse.c"
        if ($1657) { __label__ = 295; break; } else { __label__ = 296; break; } //@line 4559 "xmlparse.c"
      case 295: // $bb296
        HEAP[$handleDefault]=0; //@line 4560 "xmlparse.c"
        __label__ = 296; break; //@line 4560 "xmlparse.c"
      case 296: // $bb297
        __label__ = 310; break; //@line 4560 "xmlparse.c"
      case 297: // $bb298
        var $1658=HEAP[$dtd]; //@line 4563 "xmlparse.c"
        var $1659=(($1658+128)&4294967295); //@line 4563 "xmlparse.c"
        var $1660=HEAP[$1659]; //@line 4563 "xmlparse.c"
        var $1661=reSign(($1660), 8, 0)!=0; //@line 4563 "xmlparse.c"
        if ($1661) { __label__ = 298; break; } else { __label__ = 300; break; } //@line 4563 "xmlparse.c"
      case 298: // $bb299
        var $1662=HEAP[$parser_addr]; //@line 4563 "xmlparse.c"
        var $1663=(($1662+136)&4294967295); //@line 4563 "xmlparse.c"
        var $1664=HEAP[$1663]; //@line 4563 "xmlparse.c"
        var $1665=($1664)!=0; //@line 4563 "xmlparse.c"
        if ($1665) { __label__ = 299; break; } else { __label__ = 300; break; } //@line 4563 "xmlparse.c"
      case 299: // $bb300
        HEAP[$handleDefault]=0; //@line 4564 "xmlparse.c"
        __label__ = 300; break; //@line 4564 "xmlparse.c"
      case 300: // $bb301
        __label__ = 310; break; //@line 4564 "xmlparse.c"
      case 301: // $bb302
        var $1666=HEAP[$parser_addr]; //@line 4567 "xmlparse.c"
        var $1667=(($1666+96)&4294967295); //@line 4567 "xmlparse.c"
        var $1668=HEAP[$1667]; //@line 4567 "xmlparse.c"
        var $1669=($1668)!=0; //@line 4567 "xmlparse.c"
        if ($1669) { __label__ = 302; break; } else { __label__ = 303; break; } //@line 4567 "xmlparse.c"
      case 302: // $bb303
        HEAP[$handleDefault]=0; //@line 4568 "xmlparse.c"
        __label__ = 303; break; //@line 4568 "xmlparse.c"
      case 303: // $bb304
        __label__ = 310; break; //@line 4568 "xmlparse.c"
      case 304: // $bb305
        var $1670=HEAP[$dtd]; //@line 4571 "xmlparse.c"
        var $1671=(($1670+128)&4294967295); //@line 4571 "xmlparse.c"
        var $1672=HEAP[$1671]; //@line 4571 "xmlparse.c"
        var $1673=reSign(($1672), 8, 0)!=0; //@line 4571 "xmlparse.c"
        if ($1673) { __label__ = 305; break; } else { __label__ = 307; break; } //@line 4571 "xmlparse.c"
      case 305: // $bb306
        var $1674=HEAP[$parser_addr]; //@line 4571 "xmlparse.c"
        var $1675=(($1674+132)&4294967295); //@line 4571 "xmlparse.c"
        var $1676=HEAP[$1675]; //@line 4571 "xmlparse.c"
        var $1677=($1676)!=0; //@line 4571 "xmlparse.c"
        if ($1677) { __label__ = 306; break; } else { __label__ = 307; break; } //@line 4571 "xmlparse.c"
      case 306: // $bb307
        HEAP[$handleDefault]=0; //@line 4572 "xmlparse.c"
        __label__ = 307; break; //@line 4572 "xmlparse.c"
      case 307: // $bb308
        __label__ = 310; break; //@line 4572 "xmlparse.c"
      case 308: // $bb309
        var $1678=HEAP[$parser_addr]; //@line 4575 "xmlparse.c"
        var $1679=(($1678+128)&4294967295); //@line 4575 "xmlparse.c"
        var $1680=HEAP[$1679]; //@line 4575 "xmlparse.c"
        var $1681=($1680)!=0; //@line 4575 "xmlparse.c"
        if ($1681) { __label__ = 309; break; } else { __label__ = 310; break; } //@line 4575 "xmlparse.c"
      case 309: // $bb310
        HEAP[$handleDefault]=0; //@line 4576 "xmlparse.c"
        __label__ = 310; break; //@line 4576 "xmlparse.c"
      case 310: // $bb311
        var $1682=HEAP[$handleDefault]; //@line 4580 "xmlparse.c"
        var $1683=reSign(($1682), 8, 0)!=0; //@line 4580 "xmlparse.c"
        if ($1683) { __label__ = 311; break; } else { __label__ = 313; break; } //@line 4580 "xmlparse.c"
      case 311: // $bb312
        var $1684=HEAP[$parser_addr]; //@line 4580 "xmlparse.c"
        var $1685=(($1684+80)&4294967295); //@line 4580 "xmlparse.c"
        var $1686=HEAP[$1685]; //@line 4580 "xmlparse.c"
        var $1687=($1686)!=0; //@line 4580 "xmlparse.c"
        if ($1687) { __label__ = 312; break; } else { __label__ = 313; break; } //@line 4580 "xmlparse.c"
      case 312: // $bb313
        var $1688=HEAP[$next_addr]; //@line 4581 "xmlparse.c"
        var $1689=HEAP[$parser_addr]; //@line 4581 "xmlparse.c"
        var $1690=HEAP[$enc_addr]; //@line 4581 "xmlparse.c"
        var $1691=HEAP[$s_addr]; //@line 4581 "xmlparse.c"
        _reportDefault($1689, $1690, $1691, $1688); //@line 4581 "xmlparse.c"
        __label__ = 313; break; //@line 4581 "xmlparse.c"
      case 313: // $bb314
        var $1692=HEAP[$parser_addr]; //@line 4583 "xmlparse.c"
        var $1693=(($1692+464)&4294967295); //@line 4583 "xmlparse.c"
        var $1694=(($1693)&4294967295); //@line 4583 "xmlparse.c"
        var $1695=HEAP[$1694]; //@line 4583 "xmlparse.c"
        if ($1695 == 2) {
          __label__ = 315; break;
        }
        else if ($1695 == 3) {
          __label__ = 314; break;
        }
        else {
        __label__ = 316; break;
        }
        
      case 314: // $bb315
        var $1696=HEAP[$next_addr]; //@line 4585 "xmlparse.c"
        var $1697=HEAP[$nextPtr_addr]; //@line 4585 "xmlparse.c"
        HEAP[$1697]=$1696; //@line 4585 "xmlparse.c"
        HEAP[$0]=0; //@line 4586 "xmlparse.c"
        __label__ = 317; break; //@line 4586 "xmlparse.c"
      case 315: // $bb316
        HEAP[$0]=35; //@line 4588 "xmlparse.c"
        __label__ = 317; break; //@line 4588 "xmlparse.c"
      case 316: // $bb317
        var $1698=HEAP[$next_addr]; //@line 4590 "xmlparse.c"
        HEAP[$s_addr]=$1698; //@line 4590 "xmlparse.c"
        var $1699=HEAP[$enc_addr]; //@line 4591 "xmlparse.c"
        var $1700=(($1699)&4294967295); //@line 4591 "xmlparse.c"
        var $1701=(($1700)&4294967295); //@line 4591 "xmlparse.c"
        var $1702=HEAP[$1701]; //@line 4591 "xmlparse.c"
        var $1703=HEAP[$enc_addr]; //@line 4591 "xmlparse.c"
        var $1704=HEAP[$s_addr]; //@line 4591 "xmlparse.c"
        var $1705=HEAP[$end_addr]; //@line 4591 "xmlparse.c"
        var $1706=FUNCTION_TABLE[$1702]($1703, $1704, $1705, $next_addr); //@line 4591 "xmlparse.c"
        HEAP[$tok_addr]=$1706; //@line 4591 "xmlparse.c"
        __label__ = 3; break; //@line 4591 "xmlparse.c"
      case 317: // $bb318
        var $1707=HEAP[$0]; //@line 3675 "xmlparse.c"
        HEAP[$retval]=$1707; //@line 3675 "xmlparse.c"
        __label__ = 318; break; //@line 3675 "xmlparse.c"
      case 318: // $return
        var $retval319=HEAP[$retval]; //@line 3675 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval319; //@line 3675 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _epilogProcessor($parser, $s, $end, $nextPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $s_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $next=__stackBase__+24;
        var $tok=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$s_addr]=$s;
        HEAP[$end_addr]=$end;
        HEAP[$nextPtr_addr]=$nextPtr;
        var $1=HEAP[$parser_addr]; //@line 4603 "xmlparse.c"
        var $2=(($1+264)&4294967295); //@line 4603 "xmlparse.c"
        HEAP[$2]=(FUNCTION_TABLE_OFFSET + 66); //@line 4603 "xmlparse.c"
        var $3=HEAP[$parser_addr]; //@line 4604 "xmlparse.c"
        var $4=(($3+272)&4294967295); //@line 4604 "xmlparse.c"
        var $5=HEAP[$s_addr]; //@line 4604 "xmlparse.c"
        HEAP[$4]=$5; //@line 4604 "xmlparse.c"
        __label__ = 1; break; //@line 4604 "xmlparse.c"
      case 1: // $bb
        HEAP[$next]=0; //@line 4606 "xmlparse.c"
        var $6=HEAP[$parser_addr]; //@line 4607 "xmlparse.c"
        var $7=(($6+144)&4294967295); //@line 4607 "xmlparse.c"
        var $8=HEAP[$7]; //@line 4607 "xmlparse.c"
        var $9=(($8)&4294967295); //@line 4607 "xmlparse.c"
        var $10=(($9)&4294967295); //@line 4607 "xmlparse.c"
        var $11=HEAP[$10]; //@line 4607 "xmlparse.c"
        var $12=HEAP[$parser_addr]; //@line 4607 "xmlparse.c"
        var $13=(($12+144)&4294967295); //@line 4607 "xmlparse.c"
        var $14=HEAP[$13]; //@line 4607 "xmlparse.c"
        var $15=HEAP[$s_addr]; //@line 4607 "xmlparse.c"
        var $16=HEAP[$end_addr]; //@line 4607 "xmlparse.c"
        var $17=FUNCTION_TABLE[$11]($14, $15, $16, $next); //@line 4607 "xmlparse.c"
        HEAP[$tok]=$17; //@line 4607 "xmlparse.c"
        var $18=HEAP[$next]; //@line 4608 "xmlparse.c"
        var $19=HEAP[$parser_addr]; //@line 4608 "xmlparse.c"
        var $20=(($19+276)&4294967295); //@line 4608 "xmlparse.c"
        HEAP[$20]=$18; //@line 4608 "xmlparse.c"
        var $21=HEAP[$tok]; //@line 4609 "xmlparse.c"
        if ($21 == -15) {
          __label__ = 2; break;
        }
        else if ($21 == -4) {
          __label__ = 6; break;
        }
        else if ($21 == -2) {
          __label__ = 20; break;
        }
        else if ($21 == -1) {
          __label__ = 17; break;
        }
        else if ($21 == 0) {
          __label__ = 16; break;
        }
        else if ($21 == 11) {
          __label__ = 10; break;
        }
        else if ($21 == 13) {
          __label__ = 13; break;
        }
        else if ($21 == 15) {
          __label__ = 7; break;
        }
        else {
        __label__ = 23; break;
        }
        
      case 2: // $bb1
        var $22=HEAP[$parser_addr]; //@line 4612 "xmlparse.c"
        var $23=(($22+80)&4294967295); //@line 4612 "xmlparse.c"
        var $24=HEAP[$23]; //@line 4612 "xmlparse.c"
        var $25=($24)!=0; //@line 4612 "xmlparse.c"
        if ($25) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 4612 "xmlparse.c"
      case 3: // $bb2
        var $26=HEAP[$next]; //@line 4613 "xmlparse.c"
        var $27=HEAP[$parser_addr]; //@line 4613 "xmlparse.c"
        var $28=(($27+144)&4294967295); //@line 4613 "xmlparse.c"
        var $29=HEAP[$28]; //@line 4613 "xmlparse.c"
        var $30=HEAP[$parser_addr]; //@line 4613 "xmlparse.c"
        var $31=HEAP[$s_addr]; //@line 4613 "xmlparse.c"
        _reportDefault($30, $29, $31, $26); //@line 4613 "xmlparse.c"
        var $32=HEAP[$parser_addr]; //@line 4614 "xmlparse.c"
        var $33=(($32+464)&4294967295); //@line 4614 "xmlparse.c"
        var $34=(($33)&4294967295); //@line 4614 "xmlparse.c"
        var $35=HEAP[$34]; //@line 4614 "xmlparse.c"
        var $36=((($35))|0)==2; //@line 4614 "xmlparse.c"
        if ($36) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4614 "xmlparse.c"
      case 4: // $bb3
        HEAP[$0]=35; //@line 4615 "xmlparse.c"
        __label__ = 28; break; //@line 4615 "xmlparse.c"
      case 5: // $bb4
        var $37=HEAP[$next]; //@line 4617 "xmlparse.c"
        var $38=HEAP[$nextPtr_addr]; //@line 4617 "xmlparse.c"
        HEAP[$38]=$37; //@line 4617 "xmlparse.c"
        HEAP[$0]=0; //@line 4618 "xmlparse.c"
        __label__ = 28; break; //@line 4618 "xmlparse.c"
      case 6: // $bb5
        var $39=HEAP[$nextPtr_addr]; //@line 4620 "xmlparse.c"
        var $40=HEAP[$s_addr]; //@line 4620 "xmlparse.c"
        HEAP[$39]=$40; //@line 4620 "xmlparse.c"
        HEAP[$0]=0; //@line 4621 "xmlparse.c"
        __label__ = 28; break; //@line 4621 "xmlparse.c"
      case 7: // $bb6
        var $41=HEAP[$parser_addr]; //@line 4623 "xmlparse.c"
        var $42=(($41+80)&4294967295); //@line 4623 "xmlparse.c"
        var $43=HEAP[$42]; //@line 4623 "xmlparse.c"
        var $44=($43)!=0; //@line 4623 "xmlparse.c"
        if ($44) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4623 "xmlparse.c"
      case 8: // $bb7
        var $45=HEAP[$next]; //@line 4624 "xmlparse.c"
        var $46=HEAP[$parser_addr]; //@line 4624 "xmlparse.c"
        var $47=(($46+144)&4294967295); //@line 4624 "xmlparse.c"
        var $48=HEAP[$47]; //@line 4624 "xmlparse.c"
        var $49=HEAP[$parser_addr]; //@line 4624 "xmlparse.c"
        var $50=HEAP[$s_addr]; //@line 4624 "xmlparse.c"
        _reportDefault($49, $48, $50, $45); //@line 4624 "xmlparse.c"
        __label__ = 9; break; //@line 4624 "xmlparse.c"
      case 9: // $bb8
        __label__ = 24; break; //@line 4624 "xmlparse.c"
      case 10: // $bb9
        var $51=HEAP[$next]; //@line 4627 "xmlparse.c"
        var $52=HEAP[$parser_addr]; //@line 4627 "xmlparse.c"
        var $53=(($52+144)&4294967295); //@line 4627 "xmlparse.c"
        var $54=HEAP[$53]; //@line 4627 "xmlparse.c"
        var $55=HEAP[$parser_addr]; //@line 4627 "xmlparse.c"
        var $56=HEAP[$s_addr]; //@line 4627 "xmlparse.c"
        var $57=_reportProcessingInstruction($55, $54, $56, $51); //@line 4627 "xmlparse.c"
        var $58=((($57))|0)==0; //@line 4627 "xmlparse.c"
        if ($58) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 4627 "xmlparse.c"
      case 11: // $bb10
        HEAP[$0]=1; //@line 4628 "xmlparse.c"
        __label__ = 28; break; //@line 4628 "xmlparse.c"
      case 12: // $bb11
        __label__ = 24; break; //@line 4628 "xmlparse.c"
      case 13: // $bb12
        var $59=HEAP[$next]; //@line 4631 "xmlparse.c"
        var $60=HEAP[$parser_addr]; //@line 4631 "xmlparse.c"
        var $61=(($60+144)&4294967295); //@line 4631 "xmlparse.c"
        var $62=HEAP[$61]; //@line 4631 "xmlparse.c"
        var $63=HEAP[$parser_addr]; //@line 4631 "xmlparse.c"
        var $64=HEAP[$s_addr]; //@line 4631 "xmlparse.c"
        var $65=_reportComment($63, $62, $64, $59); //@line 4631 "xmlparse.c"
        var $66=((($65))|0)==0; //@line 4631 "xmlparse.c"
        if ($66) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 4631 "xmlparse.c"
      case 14: // $bb13
        HEAP[$0]=1; //@line 4632 "xmlparse.c"
        __label__ = 28; break; //@line 4632 "xmlparse.c"
      case 15: // $bb14
        __label__ = 24; break; //@line 4632 "xmlparse.c"
      case 16: // $bb15
        var $67=HEAP[$next]; //@line 4635 "xmlparse.c"
        var $68=HEAP[$parser_addr]; //@line 4635 "xmlparse.c"
        var $69=(($68+272)&4294967295); //@line 4635 "xmlparse.c"
        HEAP[$69]=$67; //@line 4635 "xmlparse.c"
        HEAP[$0]=4; //@line 4636 "xmlparse.c"
        __label__ = 28; break; //@line 4636 "xmlparse.c"
      case 17: // $bb16
        var $70=HEAP[$parser_addr]; //@line 4638 "xmlparse.c"
        var $71=(($70+464)&4294967295); //@line 4638 "xmlparse.c"
        var $72=(($71+4)&4294967295); //@line 4638 "xmlparse.c"
        var $73=HEAP[$72]; //@line 4638 "xmlparse.c"
        var $74=reSign(($73), 8, 0)==0; //@line 4638 "xmlparse.c"
        if ($74) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 4638 "xmlparse.c"
      case 18: // $bb17
        var $75=HEAP[$nextPtr_addr]; //@line 4639 "xmlparse.c"
        var $76=HEAP[$s_addr]; //@line 4639 "xmlparse.c"
        HEAP[$75]=$76; //@line 4639 "xmlparse.c"
        HEAP[$0]=0; //@line 4640 "xmlparse.c"
        __label__ = 28; break; //@line 4640 "xmlparse.c"
      case 19: // $bb18
        HEAP[$0]=5; //@line 4642 "xmlparse.c"
        __label__ = 28; break; //@line 4642 "xmlparse.c"
      case 20: // $bb19
        var $77=HEAP[$parser_addr]; //@line 4644 "xmlparse.c"
        var $78=(($77+464)&4294967295); //@line 4644 "xmlparse.c"
        var $79=(($78+4)&4294967295); //@line 4644 "xmlparse.c"
        var $80=HEAP[$79]; //@line 4644 "xmlparse.c"
        var $81=reSign(($80), 8, 0)==0; //@line 4644 "xmlparse.c"
        if ($81) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 4644 "xmlparse.c"
      case 21: // $bb20
        var $82=HEAP[$nextPtr_addr]; //@line 4645 "xmlparse.c"
        var $83=HEAP[$s_addr]; //@line 4645 "xmlparse.c"
        HEAP[$82]=$83; //@line 4645 "xmlparse.c"
        HEAP[$0]=0; //@line 4646 "xmlparse.c"
        __label__ = 28; break; //@line 4646 "xmlparse.c"
      case 22: // $bb21
        HEAP[$0]=6; //@line 4648 "xmlparse.c"
        __label__ = 28; break; //@line 4648 "xmlparse.c"
      case 23: // $bb22
        HEAP[$0]=9; //@line 4650 "xmlparse.c"
        __label__ = 28; break; //@line 4650 "xmlparse.c"
      case 24: // $bb23
        var $84=HEAP[$next]; //@line 4652 "xmlparse.c"
        HEAP[$s_addr]=$84; //@line 4652 "xmlparse.c"
        var $85=HEAP[$parser_addr]; //@line 4652 "xmlparse.c"
        var $86=(($85+272)&4294967295); //@line 4652 "xmlparse.c"
        var $87=HEAP[$s_addr]; //@line 4652 "xmlparse.c"
        HEAP[$86]=$87; //@line 4652 "xmlparse.c"
        var $88=HEAP[$parser_addr]; //@line 4653 "xmlparse.c"
        var $89=(($88+464)&4294967295); //@line 4653 "xmlparse.c"
        var $90=(($89)&4294967295); //@line 4653 "xmlparse.c"
        var $91=HEAP[$90]; //@line 4653 "xmlparse.c"
        if ($91 == 2) {
          __label__ = 26; break;
        }
        else if ($91 == 3) {
          __label__ = 25; break;
        }
        else {
        __label__ = 27; break;
        }
        
      case 25: // $bb24
        var $92=HEAP[$next]; //@line 4655 "xmlparse.c"
        var $93=HEAP[$nextPtr_addr]; //@line 4655 "xmlparse.c"
        HEAP[$93]=$92; //@line 4655 "xmlparse.c"
        HEAP[$0]=0; //@line 4656 "xmlparse.c"
        __label__ = 28; break; //@line 4656 "xmlparse.c"
      case 26: // $bb25
        HEAP[$0]=35; //@line 4658 "xmlparse.c"
        __label__ = 28; break; //@line 4658 "xmlparse.c"
      case 27: // $bb26
        __label__ = 1; break; //@line 4658 "xmlparse.c"
      case 28: // $bb27
        var $94=HEAP[$0]; //@line 4615 "xmlparse.c"
        HEAP[$retval]=$94; //@line 4615 "xmlparse.c"
        __label__ = 29; break; //@line 4615 "xmlparse.c"
      case 29: // $return
        var $retval28=HEAP[$retval]; //@line 4615 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval28; //@line 4615 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _processInternalEntity($parser, $entity, $betweenDecl) {
    var __stackBase__  = STACKTOP; STACKTOP += 37; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 37);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $entity_addr=__stackBase__+4;
        var $betweenDecl_addr=__stackBase__+8;
        var $retval=__stackBase__+9;
        var $0=__stackBase__+13;
        var $textStart=__stackBase__+17;
        var $textEnd=__stackBase__+21;
        var $next=__stackBase__+25;
        var $result=__stackBase__+29;
        var $openEntity=__stackBase__+33;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$entity_addr]=$entity;
        HEAP[$betweenDecl_addr]=$betweenDecl;
        var $1=HEAP[$parser_addr]; //@line 4673 "xmlparse.c"
        var $2=(($1+288)&4294967295); //@line 4673 "xmlparse.c"
        var $3=HEAP[$2]; //@line 4673 "xmlparse.c"
        var $4=($3)!=0; //@line 4673 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4673 "xmlparse.c"
      case 1: // $bb
        var $5=HEAP[$parser_addr]; //@line 4674 "xmlparse.c"
        var $6=(($5+288)&4294967295); //@line 4674 "xmlparse.c"
        var $7=HEAP[$6]; //@line 4674 "xmlparse.c"
        HEAP[$openEntity]=$7; //@line 4674 "xmlparse.c"
        var $8=HEAP[$openEntity]; //@line 4675 "xmlparse.c"
        var $9=(($8+8)&4294967295); //@line 4675 "xmlparse.c"
        var $10=HEAP[$9]; //@line 4675 "xmlparse.c"
        var $11=HEAP[$parser_addr]; //@line 4675 "xmlparse.c"
        var $12=(($11+288)&4294967295); //@line 4675 "xmlparse.c"
        HEAP[$12]=$10; //@line 4675 "xmlparse.c"
        __label__ = 4; break; //@line 4675 "xmlparse.c"
      case 2: // $bb1
        var $13=HEAP[$parser_addr]; //@line 4678 "xmlparse.c"
        var $14=(($13+12)&4294967295); //@line 4678 "xmlparse.c"
        var $15=(($14)&4294967295); //@line 4678 "xmlparse.c"
        var $16=HEAP[$15]; //@line 4678 "xmlparse.c"
        var $17=FUNCTION_TABLE[$16](24); //@line 4678 "xmlparse.c"
        var $18=$17; //@line 4678 "xmlparse.c"
        HEAP[$openEntity]=$18; //@line 4678 "xmlparse.c"
        var $19=HEAP[$openEntity]; //@line 4679 "xmlparse.c"
        var $20=($19)==0; //@line 4679 "xmlparse.c"
        if ($20) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4679 "xmlparse.c"
      case 3: // $bb2
        HEAP[$0]=1; //@line 4680 "xmlparse.c"
        __label__ = 10; break; //@line 4680 "xmlparse.c"
      case 4: // $bb3
        var $21=HEAP[$entity_addr]; //@line 4682 "xmlparse.c"
        var $22=(($21+32)&4294967295); //@line 4682 "xmlparse.c"
        HEAP[$22]=1; //@line 4682 "xmlparse.c"
        var $23=HEAP[$entity_addr]; //@line 4683 "xmlparse.c"
        var $24=(($23+12)&4294967295); //@line 4683 "xmlparse.c"
        HEAP[$24]=0; //@line 4683 "xmlparse.c"
        var $25=HEAP[$parser_addr]; //@line 4684 "xmlparse.c"
        var $26=(($25+284)&4294967295); //@line 4684 "xmlparse.c"
        var $27=HEAP[$26]; //@line 4684 "xmlparse.c"
        var $28=HEAP[$openEntity]; //@line 4684 "xmlparse.c"
        var $29=(($28+8)&4294967295); //@line 4684 "xmlparse.c"
        HEAP[$29]=$27; //@line 4684 "xmlparse.c"
        var $30=HEAP[$parser_addr]; //@line 4685 "xmlparse.c"
        var $31=(($30+284)&4294967295); //@line 4685 "xmlparse.c"
        var $32=HEAP[$openEntity]; //@line 4685 "xmlparse.c"
        HEAP[$31]=$32; //@line 4685 "xmlparse.c"
        var $33=HEAP[$openEntity]; //@line 4686 "xmlparse.c"
        var $34=(($33+12)&4294967295); //@line 4686 "xmlparse.c"
        var $35=HEAP[$entity_addr]; //@line 4686 "xmlparse.c"
        HEAP[$34]=$35; //@line 4686 "xmlparse.c"
        var $36=HEAP[$parser_addr]; //@line 4687 "xmlparse.c"
        var $37=(($36+296)&4294967295); //@line 4687 "xmlparse.c"
        var $38=HEAP[$37]; //@line 4687 "xmlparse.c"
        var $39=HEAP[$openEntity]; //@line 4687 "xmlparse.c"
        var $40=(($39+16)&4294967295); //@line 4687 "xmlparse.c"
        HEAP[$40]=$38; //@line 4687 "xmlparse.c"
        var $41=HEAP[$openEntity]; //@line 4688 "xmlparse.c"
        var $42=(($41+20)&4294967295); //@line 4688 "xmlparse.c"
        var $43=HEAP[$betweenDecl_addr]; //@line 4688 "xmlparse.c"
        HEAP[$42]=$43; //@line 4688 "xmlparse.c"
        var $44=HEAP[$openEntity]; //@line 4689 "xmlparse.c"
        var $45=(($44)&4294967295); //@line 4689 "xmlparse.c"
        HEAP[$45]=0; //@line 4689 "xmlparse.c"
        var $46=HEAP[$openEntity]; //@line 4690 "xmlparse.c"
        var $47=(($46+4)&4294967295); //@line 4690 "xmlparse.c"
        HEAP[$47]=0; //@line 4690 "xmlparse.c"
        var $48=HEAP[$entity_addr]; //@line 4691 "xmlparse.c"
        var $49=(($48+4)&4294967295); //@line 4691 "xmlparse.c"
        var $50=HEAP[$49]; //@line 4691 "xmlparse.c"
        HEAP[$textStart]=$50; //@line 4691 "xmlparse.c"
        var $51=HEAP[$entity_addr]; //@line 4692 "xmlparse.c"
        var $52=(($51+4)&4294967295); //@line 4692 "xmlparse.c"
        var $53=HEAP[$52]; //@line 4692 "xmlparse.c"
        var $54=HEAP[$entity_addr]; //@line 4692 "xmlparse.c"
        var $55=(($54+8)&4294967295); //@line 4692 "xmlparse.c"
        var $56=HEAP[$55]; //@line 4692 "xmlparse.c"
        var $57=(($53+$56)&4294967295); //@line 4692 "xmlparse.c"
        HEAP[$textEnd]=$57; //@line 4692 "xmlparse.c"
        var $58=HEAP[$parser_addr]; //@line 4702 "xmlparse.c"
        var $59=(($58+224)&4294967295); //@line 4702 "xmlparse.c"
        var $60=HEAP[$59]; //@line 4702 "xmlparse.c"
        var $61=HEAP[$parser_addr]; //@line 4702 "xmlparse.c"
        var $62=(($61+296)&4294967295); //@line 4702 "xmlparse.c"
        var $63=HEAP[$62]; //@line 4702 "xmlparse.c"
        var $64=HEAP[$parser_addr]; //@line 4702 "xmlparse.c"
        var $65=HEAP[$textStart]; //@line 4702 "xmlparse.c"
        var $66=HEAP[$textEnd]; //@line 4702 "xmlparse.c"
        var $67=_doContent($64, $63, $60, $65, $66, $next, 0); //@line 4702 "xmlparse.c"
        HEAP[$result]=$67; //@line 4702 "xmlparse.c"
        var $68=HEAP[$result]; //@line 4705 "xmlparse.c"
        var $69=((($68))|0)==0; //@line 4705 "xmlparse.c"
        if ($69) { __label__ = 5; break; } else { __label__ = 9; break; } //@line 4705 "xmlparse.c"
      case 5: // $bb4
        var $70=HEAP[$next]; //@line 4706 "xmlparse.c"
        var $71=HEAP[$textEnd]; //@line 4706 "xmlparse.c"
        var $72=($71)==($70); //@line 4706 "xmlparse.c"
        if ($72) { __label__ = 8; break; } else { __label__ = 6; break; } //@line 4706 "xmlparse.c"
      case 6: // $bb5
        var $73=HEAP[$parser_addr]; //@line 4706 "xmlparse.c"
        var $74=(($73+464)&4294967295); //@line 4706 "xmlparse.c"
        var $75=(($74)&4294967295); //@line 4706 "xmlparse.c"
        var $76=HEAP[$75]; //@line 4706 "xmlparse.c"
        var $77=((($76))|0)!=3; //@line 4706 "xmlparse.c"
        if ($77) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 4706 "xmlparse.c"
      case 7: // $bb6
        var $78=HEAP[$next]; //@line 4707 "xmlparse.c"
        var $79=($78); //@line 4707 "xmlparse.c"
        var $80=HEAP[$textStart]; //@line 4707 "xmlparse.c"
        var $81=($80); //@line 4707 "xmlparse.c"
        var $82=((($79) - ($81))&4294967295); //@line 4707 "xmlparse.c"
        var $83=HEAP[$entity_addr]; //@line 4707 "xmlparse.c"
        var $84=(($83+12)&4294967295); //@line 4707 "xmlparse.c"
        HEAP[$84]=$82; //@line 4707 "xmlparse.c"
        var $85=HEAP[$parser_addr]; //@line 4708 "xmlparse.c"
        var $86=(($85+264)&4294967295); //@line 4708 "xmlparse.c"
        HEAP[$86]=(FUNCTION_TABLE_OFFSET + 68); //@line 4708 "xmlparse.c"
        __label__ = 9; break; //@line 4708 "xmlparse.c"
      case 8: // $bb7
        var $87=HEAP[$entity_addr]; //@line 4711 "xmlparse.c"
        var $88=(($87+32)&4294967295); //@line 4711 "xmlparse.c"
        HEAP[$88]=0; //@line 4711 "xmlparse.c"
        var $89=HEAP[$openEntity]; //@line 4712 "xmlparse.c"
        var $90=(($89+8)&4294967295); //@line 4712 "xmlparse.c"
        var $91=HEAP[$90]; //@line 4712 "xmlparse.c"
        var $92=HEAP[$parser_addr]; //@line 4712 "xmlparse.c"
        var $93=(($92+284)&4294967295); //@line 4712 "xmlparse.c"
        HEAP[$93]=$91; //@line 4712 "xmlparse.c"
        var $94=HEAP[$parser_addr]; //@line 4714 "xmlparse.c"
        var $95=(($94+288)&4294967295); //@line 4714 "xmlparse.c"
        var $96=HEAP[$95]; //@line 4714 "xmlparse.c"
        var $97=HEAP[$openEntity]; //@line 4714 "xmlparse.c"
        var $98=(($97+8)&4294967295); //@line 4714 "xmlparse.c"
        HEAP[$98]=$96; //@line 4714 "xmlparse.c"
        var $99=HEAP[$parser_addr]; //@line 4715 "xmlparse.c"
        var $100=(($99+288)&4294967295); //@line 4715 "xmlparse.c"
        var $101=HEAP[$openEntity]; //@line 4715 "xmlparse.c"
        HEAP[$100]=$101; //@line 4715 "xmlparse.c"
        __label__ = 9; break; //@line 4715 "xmlparse.c"
      case 9: // $bb8
        var $102=HEAP[$result]; //@line 4718 "xmlparse.c"
        HEAP[$0]=$102; //@line 4718 "xmlparse.c"
        __label__ = 10; break; //@line 4718 "xmlparse.c"
      case 10: // $bb9
        var $103=HEAP[$0]; //@line 4680 "xmlparse.c"
        HEAP[$retval]=$103; //@line 4680 "xmlparse.c"
        __label__ = 11; break; //@line 4680 "xmlparse.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 4680 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 4680 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _internalEntityProcessor($parser, $s, $end, $nextPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 48; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 48);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $s_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $entity=__stackBase__+24;
        var $textStart=__stackBase__+28;
        var $textEnd=__stackBase__+32;
        var $next=__stackBase__+36;
        var $result=__stackBase__+40;
        var $openEntity=__stackBase__+44;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$s_addr]=$s;
        HEAP[$end_addr]=$end;
        HEAP[$nextPtr_addr]=$nextPtr;
        var $1=HEAP[$parser_addr]; //@line 4731 "xmlparse.c"
        var $2=(($1+284)&4294967295); //@line 4731 "xmlparse.c"
        var $3=HEAP[$2]; //@line 4731 "xmlparse.c"
        HEAP[$openEntity]=$3; //@line 4731 "xmlparse.c"
        var $4=HEAP[$openEntity]; //@line 4732 "xmlparse.c"
        var $5=($4)==0; //@line 4732 "xmlparse.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4732 "xmlparse.c"
      case 1: // $bb
        HEAP[$0]=23; //@line 4733 "xmlparse.c"
        __label__ = 8; break; //@line 4733 "xmlparse.c"
      case 2: // $bb1
        var $6=HEAP[$openEntity]; //@line 4735 "xmlparse.c"
        var $7=(($6+12)&4294967295); //@line 4735 "xmlparse.c"
        var $8=HEAP[$7]; //@line 4735 "xmlparse.c"
        HEAP[$entity]=$8; //@line 4735 "xmlparse.c"
        var $9=HEAP[$entity]; //@line 4736 "xmlparse.c"
        var $10=(($9+4)&4294967295); //@line 4736 "xmlparse.c"
        var $11=HEAP[$10]; //@line 4736 "xmlparse.c"
        var $12=HEAP[$entity]; //@line 4736 "xmlparse.c"
        var $13=(($12+12)&4294967295); //@line 4736 "xmlparse.c"
        var $14=HEAP[$13]; //@line 4736 "xmlparse.c"
        var $15=(($11+$14)&4294967295); //@line 4736 "xmlparse.c"
        HEAP[$textStart]=$15; //@line 4736 "xmlparse.c"
        var $16=HEAP[$entity]; //@line 4737 "xmlparse.c"
        var $17=(($16+4)&4294967295); //@line 4737 "xmlparse.c"
        var $18=HEAP[$17]; //@line 4737 "xmlparse.c"
        var $19=HEAP[$entity]; //@line 4737 "xmlparse.c"
        var $20=(($19+8)&4294967295); //@line 4737 "xmlparse.c"
        var $21=HEAP[$20]; //@line 4737 "xmlparse.c"
        var $22=(($18+$21)&4294967295); //@line 4737 "xmlparse.c"
        HEAP[$textEnd]=$22; //@line 4737 "xmlparse.c"
        var $23=HEAP[$parser_addr]; //@line 4747 "xmlparse.c"
        var $24=(($23+224)&4294967295); //@line 4747 "xmlparse.c"
        var $25=HEAP[$24]; //@line 4747 "xmlparse.c"
        var $26=HEAP[$openEntity]; //@line 4747 "xmlparse.c"
        var $27=(($26+16)&4294967295); //@line 4747 "xmlparse.c"
        var $28=HEAP[$27]; //@line 4747 "xmlparse.c"
        var $29=HEAP[$parser_addr]; //@line 4747 "xmlparse.c"
        var $30=HEAP[$textStart]; //@line 4747 "xmlparse.c"
        var $31=HEAP[$textEnd]; //@line 4747 "xmlparse.c"
        var $32=_doContent($29, $28, $25, $30, $31, $next, 0); //@line 4747 "xmlparse.c"
        HEAP[$result]=$32; //@line 4747 "xmlparse.c"
        var $33=HEAP[$result]; //@line 4750 "xmlparse.c"
        var $34=((($33))|0)!=0; //@line 4750 "xmlparse.c"
        if ($34) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4750 "xmlparse.c"
      case 3: // $bb2
        var $35=HEAP[$result]; //@line 4751 "xmlparse.c"
        HEAP[$0]=$35; //@line 4751 "xmlparse.c"
        __label__ = 8; break; //@line 4751 "xmlparse.c"
      case 4: // $bb3
        var $36=HEAP[$next]; //@line 4752 "xmlparse.c"
        var $37=HEAP[$textEnd]; //@line 4752 "xmlparse.c"
        var $38=($37)==($36); //@line 4752 "xmlparse.c"
        if ($38) { __label__ = 7; break; } else { __label__ = 5; break; } //@line 4752 "xmlparse.c"
      case 5: // $bb4
        var $39=HEAP[$parser_addr]; //@line 4752 "xmlparse.c"
        var $40=(($39+464)&4294967295); //@line 4752 "xmlparse.c"
        var $41=(($40)&4294967295); //@line 4752 "xmlparse.c"
        var $42=HEAP[$41]; //@line 4752 "xmlparse.c"
        var $43=((($42))|0)!=3; //@line 4752 "xmlparse.c"
        if ($43) { __label__ = 7; break; } else { __label__ = 6; break; } //@line 4752 "xmlparse.c"
      case 6: // $bb5
        var $44=HEAP[$next]; //@line 4753 "xmlparse.c"
        var $45=($44); //@line 4753 "xmlparse.c"
        var $46=HEAP[$entity]; //@line 4753 "xmlparse.c"
        var $47=(($46+4)&4294967295); //@line 4753 "xmlparse.c"
        var $48=HEAP[$47]; //@line 4753 "xmlparse.c"
        var $49=($48); //@line 4753 "xmlparse.c"
        var $50=((($45) - ($49))&4294967295); //@line 4753 "xmlparse.c"
        var $51=HEAP[$entity]; //@line 4753 "xmlparse.c"
        var $52=(($51+12)&4294967295); //@line 4753 "xmlparse.c"
        HEAP[$52]=$50; //@line 4753 "xmlparse.c"
        var $53=HEAP[$result]; //@line 4754 "xmlparse.c"
        HEAP[$0]=$53; //@line 4754 "xmlparse.c"
        __label__ = 8; break; //@line 4754 "xmlparse.c"
      case 7: // $bb6
        var $54=HEAP[$entity]; //@line 4757 "xmlparse.c"
        var $55=(($54+32)&4294967295); //@line 4757 "xmlparse.c"
        HEAP[$55]=0; //@line 4757 "xmlparse.c"
        var $56=HEAP[$openEntity]; //@line 4758 "xmlparse.c"
        var $57=(($56+8)&4294967295); //@line 4758 "xmlparse.c"
        var $58=HEAP[$57]; //@line 4758 "xmlparse.c"
        var $59=HEAP[$parser_addr]; //@line 4758 "xmlparse.c"
        var $60=(($59+284)&4294967295); //@line 4758 "xmlparse.c"
        HEAP[$60]=$58; //@line 4758 "xmlparse.c"
        var $61=HEAP[$parser_addr]; //@line 4760 "xmlparse.c"
        var $62=(($61+288)&4294967295); //@line 4760 "xmlparse.c"
        var $63=HEAP[$62]; //@line 4760 "xmlparse.c"
        var $64=HEAP[$openEntity]; //@line 4760 "xmlparse.c"
        var $65=(($64+8)&4294967295); //@line 4760 "xmlparse.c"
        HEAP[$65]=$63; //@line 4760 "xmlparse.c"
        var $66=HEAP[$parser_addr]; //@line 4761 "xmlparse.c"
        var $67=(($66+288)&4294967295); //@line 4761 "xmlparse.c"
        var $68=HEAP[$openEntity]; //@line 4761 "xmlparse.c"
        HEAP[$67]=$68; //@line 4761 "xmlparse.c"
        var $69=HEAP[$parser_addr]; //@line 4775 "xmlparse.c"
        var $70=(($69+264)&4294967295); //@line 4775 "xmlparse.c"
        HEAP[$70]=(FUNCTION_TABLE_OFFSET + 62); //@line 4775 "xmlparse.c"
        var $71=HEAP[$parser_addr]; //@line 4777 "xmlparse.c"
        var $72=(($71+464)&4294967295); //@line 4777 "xmlparse.c"
        var $73=(($72+4)&4294967295); //@line 4777 "xmlparse.c"
        var $74=HEAP[$73]; //@line 4777 "xmlparse.c"
        var $75=reSign(($74), 8, 0)==0; //@line 4777 "xmlparse.c"
        var $76=unSign(($75), 1, 0); //@line 4777 "xmlparse.c"
        var $77=HEAP[$parser_addr]; //@line 4777 "xmlparse.c"
        var $78=(($77+144)&4294967295); //@line 4777 "xmlparse.c"
        var $79=HEAP[$78]; //@line 4777 "xmlparse.c"
        var $80=HEAP[$parser_addr]; //@line 4777 "xmlparse.c"
        var $81=(($80+460)&4294967295); //@line 4777 "xmlparse.c"
        var $82=HEAP[$81]; //@line 4777 "xmlparse.c"
        var $83=($82)!=0; //@line 4777 "xmlparse.c"
        var $84=unSign(($83), 1, 0); //@line 4777 "xmlparse.c"
        var $85=HEAP[$parser_addr]; //@line 4777 "xmlparse.c"
        var $86=HEAP[$s_addr]; //@line 4777 "xmlparse.c"
        var $87=HEAP[$end_addr]; //@line 4777 "xmlparse.c"
        var $88=HEAP[$nextPtr_addr]; //@line 4777 "xmlparse.c"
        var $89=((($76)) & 255); //@line 4777 "xmlparse.c"
        var $90=_doContent($85, $84, $79, $86, $87, $88, $89); //@line 4777 "xmlparse.c"
        HEAP[$0]=$90; //@line 4777 "xmlparse.c"
        __label__ = 8; break; //@line 4777 "xmlparse.c"
      case 8: // $bb7
        var $91=HEAP[$0]; //@line 4733 "xmlparse.c"
        HEAP[$retval]=$91; //@line 4733 "xmlparse.c"
        __label__ = 9; break; //@line 4733 "xmlparse.c"
      case 9: // $return
        var $retval8=HEAP[$retval]; //@line 4733 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval8; //@line 4733 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _errorProcessor($parser, $s, $end, $nextPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $s_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$s_addr]=$s;
        HEAP[$end_addr]=$end;
        HEAP[$nextPtr_addr]=$nextPtr;
        var $1=HEAP[$parser_addr]; //@line 4788 "xmlparse.c"
        var $2=(($1+268)&4294967295); //@line 4788 "xmlparse.c"
        var $3=HEAP[$2]; //@line 4788 "xmlparse.c"
        HEAP[$0]=$3; //@line 4788 "xmlparse.c"
        var $4=HEAP[$0]; //@line 4788 "xmlparse.c"
        HEAP[$retval]=$4; //@line 4788 "xmlparse.c"
        __label__ = 1; break; //@line 4788 "xmlparse.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 4788 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 4788 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _storeAttributeValue($parser, $enc, $isCdata, $ptr, $end, $pool) {
    var __stackBase__  = STACKTOP; STACKTOP += 34; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 34);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $enc_addr=__stackBase__+4;
        var $isCdata_addr=__stackBase__+8;
        var $ptr_addr=__stackBase__+9;
        var $end_addr=__stackBase__+13;
        var $pool_addr=__stackBase__+17;
        var $retval=__stackBase__+21;
        var $iftmp_230=__stackBase__+25;
        var $0=__stackBase__+26;
        var $result=__stackBase__+30;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$enc_addr]=$enc;
        HEAP[$isCdata_addr]=$isCdata;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$pool_addr]=$pool;
        var $1=HEAP[$isCdata_addr]; //@line 4797 "xmlparse.c"
        var $2=unSign(($1), 8, 0); //@line 4797 "xmlparse.c"
        var $3=HEAP[$parser_addr]; //@line 4797 "xmlparse.c"
        var $4=HEAP[$enc_addr]; //@line 4797 "xmlparse.c"
        var $5=((($2)) & 255); //@line 4797 "xmlparse.c"
        var $6=HEAP[$ptr_addr]; //@line 4797 "xmlparse.c"
        var $7=HEAP[$end_addr]; //@line 4797 "xmlparse.c"
        var $8=HEAP[$pool_addr]; //@line 4797 "xmlparse.c"
        var $9=_appendAttributeValue($3, $4, $5, $6, $7, $8); //@line 4797 "xmlparse.c"
        HEAP[$result]=$9; //@line 4797 "xmlparse.c"
        var $10=HEAP[$result]; //@line 4798 "xmlparse.c"
        var $11=((($10))|0)!=0; //@line 4798 "xmlparse.c"
        if ($11) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4798 "xmlparse.c"
      case 1: // $bb
        var $12=HEAP[$result]; //@line 4799 "xmlparse.c"
        HEAP[$0]=$12; //@line 4799 "xmlparse.c"
        __label__ = 13; break; //@line 4799 "xmlparse.c"
      case 2: // $bb1
        var $13=HEAP[$isCdata_addr]; //@line 4800 "xmlparse.c"
        var $14=reSign(($13), 8, 0)==0; //@line 4800 "xmlparse.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 4800 "xmlparse.c"
      case 3: // $bb2
        var $15=HEAP[$pool_addr]; //@line 4800 "xmlparse.c"
        var $16=(($15+12)&4294967295); //@line 4800 "xmlparse.c"
        var $17=HEAP[$16]; //@line 4800 "xmlparse.c"
        var $18=HEAP[$pool_addr]; //@line 4800 "xmlparse.c"
        var $19=(($18+16)&4294967295); //@line 4800 "xmlparse.c"
        var $20=HEAP[$19]; //@line 4800 "xmlparse.c"
        var $21=($17)!=($20); //@line 4800 "xmlparse.c"
        if ($21) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 4800 "xmlparse.c"
      case 4: // $bb3
        var $22=HEAP[$pool_addr]; //@line 4800 "xmlparse.c"
        var $23=(($22+12)&4294967295); //@line 4800 "xmlparse.c"
        var $24=HEAP[$23]; //@line 4800 "xmlparse.c"
        var $25=(($24+-1)&4294967295); //@line 4800 "xmlparse.c"
        var $26=HEAP[$25]; //@line 4800 "xmlparse.c"
        var $27=reSign(($26), 8, 0)==32; //@line 4800 "xmlparse.c"
        if ($27) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4800 "xmlparse.c"
      case 5: // $bb4
        var $28=HEAP[$pool_addr]; //@line 4801 "xmlparse.c"
        var $29=(($28+12)&4294967295); //@line 4801 "xmlparse.c"
        var $30=HEAP[$29]; //@line 4801 "xmlparse.c"
        var $31=(($30+-1)&4294967295); //@line 4801 "xmlparse.c"
        var $32=HEAP[$pool_addr]; //@line 4801 "xmlparse.c"
        var $33=(($32+12)&4294967295); //@line 4801 "xmlparse.c"
        HEAP[$33]=$31; //@line 4801 "xmlparse.c"
        __label__ = 6; break; //@line 4801 "xmlparse.c"
      case 6: // $bb5
        var $34=HEAP[$pool_addr]; //@line 4802 "xmlparse.c"
        var $35=(($34+12)&4294967295); //@line 4802 "xmlparse.c"
        var $36=HEAP[$35]; //@line 4802 "xmlparse.c"
        var $37=HEAP[$pool_addr]; //@line 4802 "xmlparse.c"
        var $38=(($37+8)&4294967295); //@line 4802 "xmlparse.c"
        var $39=HEAP[$38]; //@line 4802 "xmlparse.c"
        var $40=($36)!=($39); //@line 4802 "xmlparse.c"
        if ($40) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 4802 "xmlparse.c"
      case 7: // $bb6
        var $41=HEAP[$pool_addr]; //@line 4802 "xmlparse.c"
        var $42=_poolGrow($41); //@line 4802 "xmlparse.c"
        var $43=reSign(($42), 8, 0)!=0; //@line 4802 "xmlparse.c"
        if ($43) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4802 "xmlparse.c"
      case 8: // $bb7
        var $44=HEAP[$pool_addr]; //@line 4802 "xmlparse.c"
        var $45=(($44+12)&4294967295); //@line 4802 "xmlparse.c"
        var $46=HEAP[$45]; //@line 4802 "xmlparse.c"
        HEAP[$46]=0; //@line 4802 "xmlparse.c"
        var $47=(($46+1)&4294967295); //@line 4802 "xmlparse.c"
        var $48=HEAP[$pool_addr]; //@line 4802 "xmlparse.c"
        var $49=(($48+12)&4294967295); //@line 4802 "xmlparse.c"
        HEAP[$49]=$47; //@line 4802 "xmlparse.c"
        HEAP[$iftmp_230]=0; //@line 4802 "xmlparse.c"
        __label__ = 10; break; //@line 4802 "xmlparse.c"
      case 9: // $bb8
        HEAP[$iftmp_230]=1; //@line 4802 "xmlparse.c"
        __label__ = 10; break; //@line 4802 "xmlparse.c"
      case 10: // $bb9
        var $50=HEAP[$iftmp_230]; //@line 4802 "xmlparse.c"
        var $toBool=reSign(($50), 8, 0)!=0; //@line 4802 "xmlparse.c"
        if ($toBool) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 4802 "xmlparse.c"
      case 11: // $bb10
        HEAP[$0]=1; //@line 4803 "xmlparse.c"
        __label__ = 13; break; //@line 4803 "xmlparse.c"
      case 12: // $bb11
        HEAP[$0]=0; //@line 4804 "xmlparse.c"
        __label__ = 13; break; //@line 4804 "xmlparse.c"
      case 13: // $bb12
        var $51=HEAP[$0]; //@line 4799 "xmlparse.c"
        HEAP[$retval]=$51; //@line 4799 "xmlparse.c"
        __label__ = 14; break; //@line 4799 "xmlparse.c"
      case 14: // $return
        var $retval13=HEAP[$retval]; //@line 4799 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 4799 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _appendAttributeValue($parser, $enc, $isCdata, $ptr, $end, $pool) {
    var __stackBase__  = STACKTOP; STACKTOP += 79; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 79);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $enc_addr=__stackBase__+4;
        var $isCdata_addr=__stackBase__+8;
        var $ptr_addr=__stackBase__+9;
        var $end_addr=__stackBase__+13;
        var $pool_addr=__stackBase__+17;
        var $retval=__stackBase__+21;
        var $iftmp_240=__stackBase__+25;
        var $iftmp_239=__stackBase__+29;
        var $iftmp_237=__stackBase__+30;
        var $iftmp_235=__stackBase__+31;
        var $iftmp_232=__stackBase__+32;
        var $0=__stackBase__+33;
        var $dtd=__stackBase__+37;
        var $next=__stackBase__+41;
        var $tok=__stackBase__+45;
        var $buf=__stackBase__+49;
        var $i=__stackBase__+53;
        var $n=__stackBase__+57;
        var $name=__stackBase__+61;
        var $entity=__stackBase__+65;
        var $checkEntityDecl=__stackBase__+69;
        var $ch=__stackBase__+70;
        var $result=__stackBase__+71;
        var $textEnd=__stackBase__+75;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$enc_addr]=$enc;
        HEAP[$isCdata_addr]=$isCdata;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$pool_addr]=$pool;
        var $1=HEAP[$parser_addr]; //@line 4812 "xmlparse.c"
        var $2=(($1+340)&4294967295); //@line 4812 "xmlparse.c"
        var $3=HEAP[$2]; //@line 4812 "xmlparse.c"
        HEAP[$dtd]=$3; //@line 4812 "xmlparse.c"
        __label__ = 1; break; //@line 4812 "xmlparse.c"
      case 1: // $bb
        var $4=HEAP[$enc_addr]; //@line 4815 "xmlparse.c"
        var $5=(($4+12)&4294967295); //@line 4815 "xmlparse.c"
        var $6=(($5)&4294967295); //@line 4815 "xmlparse.c"
        var $7=HEAP[$6]; //@line 4815 "xmlparse.c"
        var $8=HEAP[$enc_addr]; //@line 4815 "xmlparse.c"
        var $9=HEAP[$ptr_addr]; //@line 4815 "xmlparse.c"
        var $10=HEAP[$end_addr]; //@line 4815 "xmlparse.c"
        var $11=FUNCTION_TABLE[$7]($8, $9, $10, $next); //@line 4815 "xmlparse.c"
        HEAP[$tok]=$11; //@line 4815 "xmlparse.c"
        var $12=HEAP[$tok]; //@line 4816 "xmlparse.c"
        if ($12 == -4) {
          __label__ = 2; break;
        }
        else if ($12 == -3) {
          __label__ = 34; break;
        }
        else if ($12 == -1) {
          __label__ = 6; break;
        }
        else if ($12 == 0) {
          __label__ = 3; break;
        }
        else if ($12 == 6) {
          __label__ = 31; break;
        }
        else if ($12 == 7) {
          __label__ = 35; break;
        }
        else if ($12 == 9) {
          __label__ = 45; break;
        }
        else if ($12 == 10) {
          __label__ = 9; break;
        }
        else if ($12 == 39) {
          __label__ = 35; break;
        }
        else {
        __label__ = 87; break;
        }
        
      case 2: // $bb1
        HEAP[$0]=0; //@line 4818 "xmlparse.c"
        __label__ = 91; break; //@line 4818 "xmlparse.c"
      case 3: // $bb2
        var $13=HEAP[$parser_addr]; //@line 4820 "xmlparse.c"
        var $14=(($13+144)&4294967295); //@line 4820 "xmlparse.c"
        var $15=HEAP[$14]; //@line 4820 "xmlparse.c"
        var $16=HEAP[$enc_addr]; //@line 4820 "xmlparse.c"
        var $17=($15)==($16); //@line 4820 "xmlparse.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4820 "xmlparse.c"
      case 4: // $bb3
        var $18=HEAP[$next]; //@line 4821 "xmlparse.c"
        var $19=HEAP[$parser_addr]; //@line 4821 "xmlparse.c"
        var $20=(($19+272)&4294967295); //@line 4821 "xmlparse.c"
        HEAP[$20]=$18; //@line 4821 "xmlparse.c"
        __label__ = 5; break; //@line 4821 "xmlparse.c"
      case 5: // $bb4
        HEAP[$0]=4; //@line 4822 "xmlparse.c"
        __label__ = 91; break; //@line 4822 "xmlparse.c"
      case 6: // $bb5
        var $21=HEAP[$parser_addr]; //@line 4824 "xmlparse.c"
        var $22=(($21+144)&4294967295); //@line 4824 "xmlparse.c"
        var $23=HEAP[$22]; //@line 4824 "xmlparse.c"
        var $24=HEAP[$enc_addr]; //@line 4824 "xmlparse.c"
        var $25=($23)==($24); //@line 4824 "xmlparse.c"
        if ($25) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4824 "xmlparse.c"
      case 7: // $bb6
        var $26=HEAP[$parser_addr]; //@line 4825 "xmlparse.c"
        var $27=(($26+272)&4294967295); //@line 4825 "xmlparse.c"
        var $28=HEAP[$ptr_addr]; //@line 4825 "xmlparse.c"
        HEAP[$27]=$28; //@line 4825 "xmlparse.c"
        __label__ = 8; break; //@line 4825 "xmlparse.c"
      case 8: // $bb7
        HEAP[$0]=4; //@line 4826 "xmlparse.c"
        __label__ = 91; break; //@line 4826 "xmlparse.c"
      case 9: // $bb8
        var $29=HEAP[$enc_addr]; //@line 4831 "xmlparse.c"
        var $30=(($29+40)&4294967295); //@line 4831 "xmlparse.c"
        var $31=HEAP[$30]; //@line 4831 "xmlparse.c"
        var $32=HEAP[$enc_addr]; //@line 4831 "xmlparse.c"
        var $33=HEAP[$ptr_addr]; //@line 4831 "xmlparse.c"
        var $34=FUNCTION_TABLE[$31]($32, $33); //@line 4831 "xmlparse.c"
        HEAP[$n]=$34; //@line 4831 "xmlparse.c"
        var $35=HEAP[$n]; //@line 4832 "xmlparse.c"
        var $36=((($35))|0) < 0; //@line 4832 "xmlparse.c"
        if ($36) { __label__ = 10; break; } else { __label__ = 13; break; } //@line 4832 "xmlparse.c"
      case 10: // $bb9
        var $37=HEAP[$parser_addr]; //@line 4833 "xmlparse.c"
        var $38=(($37+144)&4294967295); //@line 4833 "xmlparse.c"
        var $39=HEAP[$38]; //@line 4833 "xmlparse.c"
        var $40=HEAP[$enc_addr]; //@line 4833 "xmlparse.c"
        var $41=($39)==($40); //@line 4833 "xmlparse.c"
        if ($41) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 4833 "xmlparse.c"
      case 11: // $bb10
        var $42=HEAP[$parser_addr]; //@line 4834 "xmlparse.c"
        var $43=(($42+272)&4294967295); //@line 4834 "xmlparse.c"
        var $44=HEAP[$ptr_addr]; //@line 4834 "xmlparse.c"
        HEAP[$43]=$44; //@line 4834 "xmlparse.c"
        __label__ = 12; break; //@line 4834 "xmlparse.c"
      case 12: // $bb11
        HEAP[$0]=14; //@line 4835 "xmlparse.c"
        __label__ = 91; break; //@line 4835 "xmlparse.c"
      case 13: // $bb12
        var $45=HEAP[$isCdata_addr]; //@line 4837 "xmlparse.c"
        var $46=reSign(($45), 8, 0)==0; //@line 4837 "xmlparse.c"
        if ($46) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 4837 "xmlparse.c"
      case 14: // $bb13
        var $47=HEAP[$n]; //@line 4837 "xmlparse.c"
        var $48=((($47))|0)==32; //@line 4837 "xmlparse.c"
        if ($48) { __label__ = 15; break; } else { __label__ = 17; break; } //@line 4837 "xmlparse.c"
      case 15: // $bb14
        var $49=HEAP[$pool_addr]; //@line 4837 "xmlparse.c"
        var $50=(($49+12)&4294967295); //@line 4837 "xmlparse.c"
        var $51=HEAP[$50]; //@line 4837 "xmlparse.c"
        var $52=HEAP[$pool_addr]; //@line 4837 "xmlparse.c"
        var $53=(($52+16)&4294967295); //@line 4837 "xmlparse.c"
        var $54=HEAP[$53]; //@line 4837 "xmlparse.c"
        var $55=($51)==($54); //@line 4837 "xmlparse.c"
        if ($55) { __label__ = 90; break; } else { __label__ = 16; break; } //@line 4837 "xmlparse.c"
      case 16: // $bb15
        var $56=HEAP[$pool_addr]; //@line 4837 "xmlparse.c"
        var $57=(($56+12)&4294967295); //@line 4837 "xmlparse.c"
        var $58=HEAP[$57]; //@line 4837 "xmlparse.c"
        var $59=(($58+-1)&4294967295); //@line 4837 "xmlparse.c"
        var $60=HEAP[$59]; //@line 4837 "xmlparse.c"
        var $61=reSign(($60), 8, 0)==32; //@line 4837 "xmlparse.c"
        if ($61) { __label__ = 90; break; } else { __label__ = 17; break; } //@line 4837 "xmlparse.c"
      case 17: // $bb16
        var $62=HEAP[$n]; //@line 4841 "xmlparse.c"
        var $buf17=$buf; //@line 4841 "xmlparse.c"
        var $63=_PyExpat_XmlUtf8Encode($62, $buf17); //@line 4841 "xmlparse.c"
        HEAP[$n]=$63; //@line 4841 "xmlparse.c"
        var $64=HEAP[$n]; //@line 4842 "xmlparse.c"
        var $65=((($64))|0)==0; //@line 4842 "xmlparse.c"
        if ($65) { __label__ = 18; break; } else { __label__ = 21; break; } //@line 4842 "xmlparse.c"
      case 18: // $bb18
        var $66=HEAP[$parser_addr]; //@line 4843 "xmlparse.c"
        var $67=(($66+144)&4294967295); //@line 4843 "xmlparse.c"
        var $68=HEAP[$67]; //@line 4843 "xmlparse.c"
        var $69=HEAP[$enc_addr]; //@line 4843 "xmlparse.c"
        var $70=($68)==($69); //@line 4843 "xmlparse.c"
        if ($70) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 4843 "xmlparse.c"
      case 19: // $bb19
        var $71=HEAP[$parser_addr]; //@line 4844 "xmlparse.c"
        var $72=(($71+272)&4294967295); //@line 4844 "xmlparse.c"
        var $73=HEAP[$ptr_addr]; //@line 4844 "xmlparse.c"
        HEAP[$72]=$73; //@line 4844 "xmlparse.c"
        __label__ = 20; break; //@line 4844 "xmlparse.c"
      case 20: // $bb20
        HEAP[$0]=14; //@line 4845 "xmlparse.c"
        __label__ = 91; break; //@line 4845 "xmlparse.c"
      case 21: // $bb21
        HEAP[$i]=0; //@line 4847 "xmlparse.c"
        __label__ = 29; break; //@line 4847 "xmlparse.c"
      case 22: // $bb22
        var $74=HEAP[$pool_addr]; //@line 4848 "xmlparse.c"
        var $75=(($74+12)&4294967295); //@line 4848 "xmlparse.c"
        var $76=HEAP[$75]; //@line 4848 "xmlparse.c"
        var $77=HEAP[$pool_addr]; //@line 4848 "xmlparse.c"
        var $78=(($77+8)&4294967295); //@line 4848 "xmlparse.c"
        var $79=HEAP[$78]; //@line 4848 "xmlparse.c"
        var $80=($76)!=($79); //@line 4848 "xmlparse.c"
        if ($80) { __label__ = 24; break; } else { __label__ = 23; break; } //@line 4848 "xmlparse.c"
      case 23: // $bb23
        var $81=HEAP[$pool_addr]; //@line 4848 "xmlparse.c"
        var $82=_poolGrow($81); //@line 4848 "xmlparse.c"
        var $83=reSign(($82), 8, 0)!=0; //@line 4848 "xmlparse.c"
        if ($83) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 4848 "xmlparse.c"
      case 24: // $bb24
        var $84=HEAP[$pool_addr]; //@line 4848 "xmlparse.c"
        var $85=(($84+12)&4294967295); //@line 4848 "xmlparse.c"
        var $86=HEAP[$85]; //@line 4848 "xmlparse.c"
        var $87=HEAP[$i]; //@line 4848 "xmlparse.c"
        var $88=(($buf+$87)&4294967295); //@line 4848 "xmlparse.c"
        var $89=HEAP[$88]; //@line 4848 "xmlparse.c"
        HEAP[$86]=$89; //@line 4848 "xmlparse.c"
        var $90=(($86+1)&4294967295); //@line 4848 "xmlparse.c"
        var $91=HEAP[$pool_addr]; //@line 4848 "xmlparse.c"
        var $92=(($91+12)&4294967295); //@line 4848 "xmlparse.c"
        HEAP[$92]=$90; //@line 4848 "xmlparse.c"
        HEAP[$iftmp_232]=0; //@line 4848 "xmlparse.c"
        __label__ = 26; break; //@line 4848 "xmlparse.c"
      case 25: // $bb25
        HEAP[$iftmp_232]=1; //@line 4848 "xmlparse.c"
        __label__ = 26; break; //@line 4848 "xmlparse.c"
      case 26: // $bb26
        var $93=HEAP[$iftmp_232]; //@line 4848 "xmlparse.c"
        var $toBool=reSign(($93), 8, 0)!=0; //@line 4848 "xmlparse.c"
        if ($toBool) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 4848 "xmlparse.c"
      case 27: // $bb27
        HEAP[$0]=1; //@line 4849 "xmlparse.c"
        __label__ = 91; break; //@line 4849 "xmlparse.c"
      case 28: // $bb28
        var $94=HEAP[$i]; //@line 4847 "xmlparse.c"
        var $95=((($94) + 1)&4294967295); //@line 4847 "xmlparse.c"
        HEAP[$i]=$95; //@line 4847 "xmlparse.c"
        __label__ = 29; break; //@line 4847 "xmlparse.c"
      case 29: // $bb29
        var $96=HEAP[$i]; //@line 4847 "xmlparse.c"
        var $97=HEAP[$n]; //@line 4847 "xmlparse.c"
        var $98=((($96))|0) < ((($97))|0); //@line 4847 "xmlparse.c"
        if ($98) { __label__ = 22; break; } else { __label__ = 30; break; } //@line 4847 "xmlparse.c"
      case 30: // $bb30
        __label__ = 90; break; //@line 4847 "xmlparse.c"
      case 31: // $bb31
        var $99=HEAP[$next]; //@line 4854 "xmlparse.c"
        var $100=HEAP[$pool_addr]; //@line 4854 "xmlparse.c"
        var $101=HEAP[$enc_addr]; //@line 4854 "xmlparse.c"
        var $102=HEAP[$ptr_addr]; //@line 4854 "xmlparse.c"
        var $103=_poolAppend($100, $101, $102, $99); //@line 4854 "xmlparse.c"
        var $104=($103)==0; //@line 4854 "xmlparse.c"
        if ($104) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 4854 "xmlparse.c"
      case 32: // $bb32
        HEAP[$0]=1; //@line 4855 "xmlparse.c"
        __label__ = 91; break; //@line 4855 "xmlparse.c"
      case 33: // $bb33
        __label__ = 90; break; //@line 4855 "xmlparse.c"
      case 34: // $bb34
        var $105=HEAP[$enc_addr]; //@line 4858 "xmlparse.c"
        var $106=(($105+64)&4294967295); //@line 4858 "xmlparse.c"
        var $107=HEAP[$106]; //@line 4858 "xmlparse.c"
        var $108=HEAP[$ptr_addr]; //@line 4858 "xmlparse.c"
        var $109=(($108+$107)&4294967295); //@line 4858 "xmlparse.c"
        HEAP[$next]=$109; //@line 4858 "xmlparse.c"
        __label__ = 35; break; //@line 4858 "xmlparse.c"
      case 35: // $bb35
        var $110=HEAP[$isCdata_addr]; //@line 4862 "xmlparse.c"
        var $111=reSign(($110), 8, 0)==0; //@line 4862 "xmlparse.c"
        if ($111) { __label__ = 36; break; } else { __label__ = 38; break; } //@line 4862 "xmlparse.c"
      case 36: // $bb36
        var $112=HEAP[$pool_addr]; //@line 4862 "xmlparse.c"
        var $113=(($112+12)&4294967295); //@line 4862 "xmlparse.c"
        var $114=HEAP[$113]; //@line 4862 "xmlparse.c"
        var $115=HEAP[$pool_addr]; //@line 4862 "xmlparse.c"
        var $116=(($115+16)&4294967295); //@line 4862 "xmlparse.c"
        var $117=HEAP[$116]; //@line 4862 "xmlparse.c"
        var $118=($114)==($117); //@line 4862 "xmlparse.c"
        if ($118) { __label__ = 90; break; } else { __label__ = 37; break; } //@line 4862 "xmlparse.c"
      case 37: // $bb37
        var $119=HEAP[$pool_addr]; //@line 4862 "xmlparse.c"
        var $120=(($119+12)&4294967295); //@line 4862 "xmlparse.c"
        var $121=HEAP[$120]; //@line 4862 "xmlparse.c"
        var $122=(($121+-1)&4294967295); //@line 4862 "xmlparse.c"
        var $123=HEAP[$122]; //@line 4862 "xmlparse.c"
        var $124=reSign(($123), 8, 0)==32; //@line 4862 "xmlparse.c"
        if ($124) { __label__ = 90; break; } else { __label__ = 38; break; } //@line 4862 "xmlparse.c"
      case 38: // $bb38
        var $125=HEAP[$pool_addr]; //@line 4864 "xmlparse.c"
        var $126=(($125+12)&4294967295); //@line 4864 "xmlparse.c"
        var $127=HEAP[$126]; //@line 4864 "xmlparse.c"
        var $128=HEAP[$pool_addr]; //@line 4864 "xmlparse.c"
        var $129=(($128+8)&4294967295); //@line 4864 "xmlparse.c"
        var $130=HEAP[$129]; //@line 4864 "xmlparse.c"
        var $131=($127)!=($130); //@line 4864 "xmlparse.c"
        if ($131) { __label__ = 40; break; } else { __label__ = 39; break; } //@line 4864 "xmlparse.c"
      case 39: // $bb39
        var $132=HEAP[$pool_addr]; //@line 4864 "xmlparse.c"
        var $133=_poolGrow($132); //@line 4864 "xmlparse.c"
        var $134=reSign(($133), 8, 0)!=0; //@line 4864 "xmlparse.c"
        if ($134) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 4864 "xmlparse.c"
      case 40: // $bb40
        var $135=HEAP[$pool_addr]; //@line 4864 "xmlparse.c"
        var $136=(($135+12)&4294967295); //@line 4864 "xmlparse.c"
        var $137=HEAP[$136]; //@line 4864 "xmlparse.c"
        HEAP[$137]=32; //@line 4864 "xmlparse.c"
        var $138=(($137+1)&4294967295); //@line 4864 "xmlparse.c"
        var $139=HEAP[$pool_addr]; //@line 4864 "xmlparse.c"
        var $140=(($139+12)&4294967295); //@line 4864 "xmlparse.c"
        HEAP[$140]=$138; //@line 4864 "xmlparse.c"
        HEAP[$iftmp_235]=0; //@line 4864 "xmlparse.c"
        __label__ = 42; break; //@line 4864 "xmlparse.c"
      case 41: // $bb41
        HEAP[$iftmp_235]=1; //@line 4864 "xmlparse.c"
        __label__ = 42; break; //@line 4864 "xmlparse.c"
      case 42: // $bb42
        var $141=HEAP[$iftmp_235]; //@line 4864 "xmlparse.c"
        var $toBool43=reSign(($141), 8, 0)!=0; //@line 4864 "xmlparse.c"
        if ($toBool43) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 4864 "xmlparse.c"
      case 43: // $bb44
        HEAP[$0]=1; //@line 4865 "xmlparse.c"
        __label__ = 91; break; //@line 4865 "xmlparse.c"
      case 44: // $bb45
        __label__ = 90; break; //@line 4865 "xmlparse.c"
      case 45: // $bb46
        var $142=HEAP[$enc_addr]; //@line 4872 "xmlparse.c"
        var $143=(($142+44)&4294967295); //@line 4872 "xmlparse.c"
        var $144=HEAP[$143]; //@line 4872 "xmlparse.c"
        var $145=HEAP[$next]; //@line 4872 "xmlparse.c"
        var $146=HEAP[$enc_addr]; //@line 4872 "xmlparse.c"
        var $147=(($146+64)&4294967295); //@line 4872 "xmlparse.c"
        var $148=HEAP[$147]; //@line 4872 "xmlparse.c"
        var $149=((0 - ($148))&4294967295); //@line 4872 "xmlparse.c"
        var $150=(($145+$149)&4294967295); //@line 4872 "xmlparse.c"
        var $151=HEAP[$enc_addr]; //@line 4872 "xmlparse.c"
        var $152=(($151+64)&4294967295); //@line 4872 "xmlparse.c"
        var $153=HEAP[$152]; //@line 4872 "xmlparse.c"
        var $154=HEAP[$ptr_addr]; //@line 4872 "xmlparse.c"
        var $155=(($154+$153)&4294967295); //@line 4872 "xmlparse.c"
        var $156=HEAP[$enc_addr]; //@line 4872 "xmlparse.c"
        var $157=FUNCTION_TABLE[$144]($156, $155, $150); //@line 4872 "xmlparse.c"
        var $158=((($157)) & 255); //@line 4872 "xmlparse.c"
        HEAP[$ch]=$158; //@line 4872 "xmlparse.c"
        var $159=HEAP[$ch]; //@line 4875 "xmlparse.c"
        var $160=reSign(($159), 8, 0)!=0; //@line 4875 "xmlparse.c"
        if ($160) { __label__ = 46; break; } else { __label__ = 53; break; } //@line 4875 "xmlparse.c"
      case 46: // $bb47
        var $161=HEAP[$pool_addr]; //@line 4876 "xmlparse.c"
        var $162=(($161+12)&4294967295); //@line 4876 "xmlparse.c"
        var $163=HEAP[$162]; //@line 4876 "xmlparse.c"
        var $164=HEAP[$pool_addr]; //@line 4876 "xmlparse.c"
        var $165=(($164+8)&4294967295); //@line 4876 "xmlparse.c"
        var $166=HEAP[$165]; //@line 4876 "xmlparse.c"
        var $167=($163)!=($166); //@line 4876 "xmlparse.c"
        if ($167) { __label__ = 48; break; } else { __label__ = 47; break; } //@line 4876 "xmlparse.c"
      case 47: // $bb48
        var $168=HEAP[$pool_addr]; //@line 4876 "xmlparse.c"
        var $169=_poolGrow($168); //@line 4876 "xmlparse.c"
        var $170=reSign(($169), 8, 0)!=0; //@line 4876 "xmlparse.c"
        if ($170) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 4876 "xmlparse.c"
      case 48: // $bb49
        var $171=HEAP[$pool_addr]; //@line 4876 "xmlparse.c"
        var $172=(($171+12)&4294967295); //@line 4876 "xmlparse.c"
        var $173=HEAP[$172]; //@line 4876 "xmlparse.c"
        var $174=HEAP[$ch]; //@line 4876 "xmlparse.c"
        HEAP[$173]=$174; //@line 4876 "xmlparse.c"
        var $175=(($173+1)&4294967295); //@line 4876 "xmlparse.c"
        var $176=HEAP[$pool_addr]; //@line 4876 "xmlparse.c"
        var $177=(($176+12)&4294967295); //@line 4876 "xmlparse.c"
        HEAP[$177]=$175; //@line 4876 "xmlparse.c"
        HEAP[$iftmp_237]=0; //@line 4876 "xmlparse.c"
        __label__ = 50; break; //@line 4876 "xmlparse.c"
      case 49: // $bb50
        HEAP[$iftmp_237]=1; //@line 4876 "xmlparse.c"
        __label__ = 50; break; //@line 4876 "xmlparse.c"
      case 50: // $bb51
        var $178=HEAP[$iftmp_237]; //@line 4876 "xmlparse.c"
        var $toBool52=reSign(($178), 8, 0)!=0; //@line 4876 "xmlparse.c"
        if ($toBool52) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 4876 "xmlparse.c"
      case 51: // $bb53
        HEAP[$0]=1; //@line 4877 "xmlparse.c"
        __label__ = 91; break; //@line 4877 "xmlparse.c"
      case 52: // $bb54
        __label__ = 90; break; //@line 4877 "xmlparse.c"
      case 53: // $bb55
        var $179=HEAP[$next]; //@line 4880 "xmlparse.c"
        var $180=HEAP[$enc_addr]; //@line 4880 "xmlparse.c"
        var $181=(($180+64)&4294967295); //@line 4880 "xmlparse.c"
        var $182=HEAP[$181]; //@line 4880 "xmlparse.c"
        var $183=((0 - ($182))&4294967295); //@line 4880 "xmlparse.c"
        var $184=(($179+$183)&4294967295); //@line 4880 "xmlparse.c"
        var $185=HEAP[$enc_addr]; //@line 4880 "xmlparse.c"
        var $186=(($185+64)&4294967295); //@line 4880 "xmlparse.c"
        var $187=HEAP[$186]; //@line 4880 "xmlparse.c"
        var $188=HEAP[$ptr_addr]; //@line 4880 "xmlparse.c"
        var $189=(($188+$187)&4294967295); //@line 4880 "xmlparse.c"
        var $190=HEAP[$parser_addr]; //@line 4880 "xmlparse.c"
        var $191=(($190+424)&4294967295); //@line 4880 "xmlparse.c"
        var $192=HEAP[$enc_addr]; //@line 4880 "xmlparse.c"
        var $193=_poolStoreString($191, $192, $189, $184); //@line 4880 "xmlparse.c"
        HEAP[$name]=$193; //@line 4880 "xmlparse.c"
        var $194=HEAP[$name]; //@line 4883 "xmlparse.c"
        var $195=($194)==0; //@line 4883 "xmlparse.c"
        if ($195) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 4883 "xmlparse.c"
      case 54: // $bb56
        HEAP[$0]=1; //@line 4884 "xmlparse.c"
        __label__ = 91; break; //@line 4884 "xmlparse.c"
      case 55: // $bb57
        var $196=HEAP[$dtd]; //@line 4885 "xmlparse.c"
        var $197=(($196)&4294967295); //@line 4885 "xmlparse.c"
        var $198=HEAP[$name]; //@line 4885 "xmlparse.c"
        var $199=_lookup($197, $198, 0); //@line 4885 "xmlparse.c"
        var $200=$199; //@line 4885 "xmlparse.c"
        HEAP[$entity]=$200; //@line 4885 "xmlparse.c"
        var $201=HEAP[$parser_addr]; //@line 4886 "xmlparse.c"
        var $202=(($201+424)&4294967295); //@line 4886 "xmlparse.c"
        var $203=(($202+16)&4294967295); //@line 4886 "xmlparse.c"
        var $204=HEAP[$203]; //@line 4886 "xmlparse.c"
        var $205=HEAP[$parser_addr]; //@line 4886 "xmlparse.c"
        var $206=(($205+424)&4294967295); //@line 4886 "xmlparse.c"
        var $207=(($206+12)&4294967295); //@line 4886 "xmlparse.c"
        HEAP[$207]=$204; //@line 4886 "xmlparse.c"
        var $208=HEAP[$dtd]; //@line 4890 "xmlparse.c"
        var $209=(($208+80)&4294967295); //@line 4890 "xmlparse.c"
        var $210=HEAP[$pool_addr]; //@line 4890 "xmlparse.c"
        var $211=($209)==($210); //@line 4890 "xmlparse.c"
        if ($211) { __label__ = 56; break; } else { __label__ = 60; break; } //@line 4890 "xmlparse.c"
      case 56: // $bb58
        var $212=HEAP[$dtd]; //@line 4891 "xmlparse.c"
        var $213=(($212+130)&4294967295); //@line 4891 "xmlparse.c"
        var $214=HEAP[$213]; //@line 4891 "xmlparse.c"
        var $215=reSign(($214), 8, 0)!=0; //@line 4891 "xmlparse.c"
        if ($215) { __label__ = 57; break; } else { __label__ = 58; break; } //@line 4891 "xmlparse.c"
      case 57: // $bb59
        var $216=HEAP[$parser_addr]; //@line 4891 "xmlparse.c"
        var $217=(($216+284)&4294967295); //@line 4891 "xmlparse.c"
        var $218=HEAP[$217]; //@line 4891 "xmlparse.c"
        var $219=($218)==0; //@line 4891 "xmlparse.c"
        var $220=unSign(($219), 1, 0); //@line 4891 "xmlparse.c"
        HEAP[$iftmp_239]=$220; //@line 4891 "xmlparse.c"
        __label__ = 59; break; //@line 4891 "xmlparse.c"
      case 58: // $bb60
        var $221=HEAP[$dtd]; //@line 4891 "xmlparse.c"
        var $222=(($221+129)&4294967295); //@line 4891 "xmlparse.c"
        var $223=HEAP[$222]; //@line 4891 "xmlparse.c"
        var $224=reSign(($223), 8, 0)==0; //@line 4891 "xmlparse.c"
        var $225=unSign(($224), 1, 0); //@line 4891 "xmlparse.c"
        HEAP[$iftmp_239]=$225; //@line 4891 "xmlparse.c"
        __label__ = 59; break; //@line 4891 "xmlparse.c"
      case 59: // $bb61
        var $226=HEAP[$iftmp_239]; //@line 4891 "xmlparse.c"
        HEAP[$checkEntityDecl]=$226; //@line 4891 "xmlparse.c"
        __label__ = 65; break; //@line 4891 "xmlparse.c"
      case 60: // $bb62
        var $227=HEAP[$dtd]; //@line 4899 "xmlparse.c"
        var $228=(($227+129)&4294967295); //@line 4899 "xmlparse.c"
        var $229=HEAP[$228]; //@line 4899 "xmlparse.c"
        var $230=reSign(($229), 8, 0)==0; //@line 4899 "xmlparse.c"
        if ($230) { __label__ = 62; break; } else { __label__ = 61; break; } //@line 4899 "xmlparse.c"
      case 61: // $bb63
        var $231=HEAP[$dtd]; //@line 4899 "xmlparse.c"
        var $232=(($231+130)&4294967295); //@line 4899 "xmlparse.c"
        var $233=HEAP[$232]; //@line 4899 "xmlparse.c"
        var $234=reSign(($233), 8, 0)!=0; //@line 4899 "xmlparse.c"
        if ($234) { __label__ = 62; break; } else { __label__ = 63; break; } //@line 4899 "xmlparse.c"
      case 62: // $bb64
        HEAP[$iftmp_240]=1; //@line 4899 "xmlparse.c"
        __label__ = 64; break; //@line 4899 "xmlparse.c"
      case 63: // $bb65
        HEAP[$iftmp_240]=0; //@line 4899 "xmlparse.c"
        __label__ = 64; break; //@line 4899 "xmlparse.c"
      case 64: // $bb66
        var $235=HEAP[$iftmp_240]; //@line 4899 "xmlparse.c"
        var $236=((($235)) & 255); //@line 4899 "xmlparse.c"
        HEAP[$checkEntityDecl]=$236; //@line 4899 "xmlparse.c"
        __label__ = 65; break; //@line 4899 "xmlparse.c"
      case 65: // $bb67
        var $237=HEAP[$checkEntityDecl]; //@line 4900 "xmlparse.c"
        var $238=reSign(($237), 8, 0)!=0; //@line 4900 "xmlparse.c"
        if ($238) { __label__ = 66; break; } else { __label__ = 71; break; } //@line 4900 "xmlparse.c"
      case 66: // $bb68
        var $239=HEAP[$entity]; //@line 4901 "xmlparse.c"
        var $240=($239)==0; //@line 4901 "xmlparse.c"
        if ($240) { __label__ = 67; break; } else { __label__ = 68; break; } //@line 4901 "xmlparse.c"
      case 67: // $bb69
        HEAP[$0]=11; //@line 4902 "xmlparse.c"
        __label__ = 91; break; //@line 4902 "xmlparse.c"
      case 68: // $bb70
        var $241=HEAP[$entity]; //@line 4903 "xmlparse.c"
        var $242=(($241+34)&4294967295); //@line 4903 "xmlparse.c"
        var $243=HEAP[$242]; //@line 4903 "xmlparse.c"
        var $244=reSign(($243), 8, 0)==0; //@line 4903 "xmlparse.c"
        if ($244) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 4903 "xmlparse.c"
      case 69: // $bb71
        HEAP[$0]=24; //@line 4904 "xmlparse.c"
        __label__ = 91; break; //@line 4904 "xmlparse.c"
      case 70: // $bb72
        __label__ = 72; break; //@line 4904 "xmlparse.c"
      case 71: // $bb73
        var $245=HEAP[$entity]; //@line 4906 "xmlparse.c"
        var $246=($245)==0; //@line 4906 "xmlparse.c"
        if ($246) { __label__ = 90; break; } else { __label__ = 72; break; } //@line 4906 "xmlparse.c"
      case 72: // $bb74
        var $247=HEAP[$entity]; //@line 4919 "xmlparse.c"
        var $248=(($247+32)&4294967295); //@line 4919 "xmlparse.c"
        var $249=HEAP[$248]; //@line 4919 "xmlparse.c"
        var $250=reSign(($249), 8, 0)!=0; //@line 4919 "xmlparse.c"
        if ($250) { __label__ = 73; break; } else { __label__ = 76; break; } //@line 4919 "xmlparse.c"
      case 73: // $bb75
        var $251=HEAP[$parser_addr]; //@line 4920 "xmlparse.c"
        var $252=(($251+144)&4294967295); //@line 4920 "xmlparse.c"
        var $253=HEAP[$252]; //@line 4920 "xmlparse.c"
        var $254=HEAP[$enc_addr]; //@line 4920 "xmlparse.c"
        var $255=($253)==($254); //@line 4920 "xmlparse.c"
        if ($255) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 4920 "xmlparse.c"
      case 74: // $bb76
        var $256=HEAP[$parser_addr]; //@line 4921 "xmlparse.c"
        var $257=(($256+272)&4294967295); //@line 4921 "xmlparse.c"
        var $258=HEAP[$ptr_addr]; //@line 4921 "xmlparse.c"
        HEAP[$257]=$258; //@line 4921 "xmlparse.c"
        __label__ = 75; break; //@line 4921 "xmlparse.c"
      case 75: // $bb77
        HEAP[$0]=12; //@line 4922 "xmlparse.c"
        __label__ = 91; break; //@line 4922 "xmlparse.c"
      case 76: // $bb78
        var $259=HEAP[$entity]; //@line 4924 "xmlparse.c"
        var $260=(($259+28)&4294967295); //@line 4924 "xmlparse.c"
        var $261=HEAP[$260]; //@line 4924 "xmlparse.c"
        var $262=($261)!=0; //@line 4924 "xmlparse.c"
        if ($262) { __label__ = 77; break; } else { __label__ = 80; break; } //@line 4924 "xmlparse.c"
      case 77: // $bb79
        var $263=HEAP[$parser_addr]; //@line 4925 "xmlparse.c"
        var $264=(($263+144)&4294967295); //@line 4925 "xmlparse.c"
        var $265=HEAP[$264]; //@line 4925 "xmlparse.c"
        var $266=HEAP[$enc_addr]; //@line 4925 "xmlparse.c"
        var $267=($265)==($266); //@line 4925 "xmlparse.c"
        if ($267) { __label__ = 78; break; } else { __label__ = 79; break; } //@line 4925 "xmlparse.c"
      case 78: // $bb80
        var $268=HEAP[$parser_addr]; //@line 4926 "xmlparse.c"
        var $269=(($268+272)&4294967295); //@line 4926 "xmlparse.c"
        var $270=HEAP[$ptr_addr]; //@line 4926 "xmlparse.c"
        HEAP[$269]=$270; //@line 4926 "xmlparse.c"
        __label__ = 79; break; //@line 4926 "xmlparse.c"
      case 79: // $bb81
        HEAP[$0]=15; //@line 4927 "xmlparse.c"
        __label__ = 91; break; //@line 4927 "xmlparse.c"
      case 80: // $bb82
        var $271=HEAP[$entity]; //@line 4929 "xmlparse.c"
        var $272=(($271+4)&4294967295); //@line 4929 "xmlparse.c"
        var $273=HEAP[$272]; //@line 4929 "xmlparse.c"
        var $274=($273)==0; //@line 4929 "xmlparse.c"
        if ($274) { __label__ = 81; break; } else { __label__ = 84; break; } //@line 4929 "xmlparse.c"
      case 81: // $bb83
        var $275=HEAP[$parser_addr]; //@line 4930 "xmlparse.c"
        var $276=(($275+144)&4294967295); //@line 4930 "xmlparse.c"
        var $277=HEAP[$276]; //@line 4930 "xmlparse.c"
        var $278=HEAP[$enc_addr]; //@line 4930 "xmlparse.c"
        var $279=($277)==($278); //@line 4930 "xmlparse.c"
        if ($279) { __label__ = 82; break; } else { __label__ = 83; break; } //@line 4930 "xmlparse.c"
      case 82: // $bb84
        var $280=HEAP[$parser_addr]; //@line 4931 "xmlparse.c"
        var $281=(($280+272)&4294967295); //@line 4931 "xmlparse.c"
        var $282=HEAP[$ptr_addr]; //@line 4931 "xmlparse.c"
        HEAP[$281]=$282; //@line 4931 "xmlparse.c"
        __label__ = 83; break; //@line 4931 "xmlparse.c"
      case 83: // $bb85
        HEAP[$0]=16; //@line 4932 "xmlparse.c"
        __label__ = 91; break; //@line 4932 "xmlparse.c"
      case 84: // $bb86
        var $283=HEAP[$entity]; //@line 4936 "xmlparse.c"
        var $284=(($283+4)&4294967295); //@line 4936 "xmlparse.c"
        var $285=HEAP[$284]; //@line 4936 "xmlparse.c"
        var $286=HEAP[$entity]; //@line 4936 "xmlparse.c"
        var $287=(($286+8)&4294967295); //@line 4936 "xmlparse.c"
        var $288=HEAP[$287]; //@line 4936 "xmlparse.c"
        var $289=(($285+$288)&4294967295); //@line 4936 "xmlparse.c"
        HEAP[$textEnd]=$289; //@line 4936 "xmlparse.c"
        var $290=HEAP[$entity]; //@line 4937 "xmlparse.c"
        var $291=(($290+32)&4294967295); //@line 4937 "xmlparse.c"
        HEAP[$291]=1; //@line 4937 "xmlparse.c"
        var $292=HEAP[$entity]; //@line 4938 "xmlparse.c"
        var $293=(($292+4)&4294967295); //@line 4938 "xmlparse.c"
        var $294=HEAP[$293]; //@line 4938 "xmlparse.c"
        var $295=HEAP[$isCdata_addr]; //@line 4938 "xmlparse.c"
        var $296=unSign(($295), 8, 0); //@line 4938 "xmlparse.c"
        var $297=HEAP[$parser_addr]; //@line 4938 "xmlparse.c"
        var $298=(($297+224)&4294967295); //@line 4938 "xmlparse.c"
        var $299=HEAP[$298]; //@line 4938 "xmlparse.c"
        var $300=HEAP[$parser_addr]; //@line 4938 "xmlparse.c"
        var $301=((($296)) & 255); //@line 4938 "xmlparse.c"
        var $302=HEAP[$textEnd]; //@line 4938 "xmlparse.c"
        var $303=HEAP[$pool_addr]; //@line 4938 "xmlparse.c"
        var $304=_appendAttributeValue($300, $299, $301, $294, $302, $303); //@line 4938 "xmlparse.c"
        HEAP[$result]=$304; //@line 4938 "xmlparse.c"
        var $305=HEAP[$entity]; //@line 4941 "xmlparse.c"
        var $306=(($305+32)&4294967295); //@line 4941 "xmlparse.c"
        HEAP[$306]=0; //@line 4941 "xmlparse.c"
        var $307=HEAP[$result]; //@line 4942 "xmlparse.c"
        var $308=((($307))|0)!=0; //@line 4942 "xmlparse.c"
        if ($308) { __label__ = 85; break; } else { __label__ = 86; break; } //@line 4942 "xmlparse.c"
      case 85: // $bb87
        var $309=HEAP[$result]; //@line 4943 "xmlparse.c"
        HEAP[$0]=$309; //@line 4943 "xmlparse.c"
        __label__ = 91; break; //@line 4943 "xmlparse.c"
      case 86: // $bb88
        __label__ = 90; break; //@line 4943 "xmlparse.c"
      case 87: // $bb89
        var $310=HEAP[$parser_addr]; //@line 4948 "xmlparse.c"
        var $311=(($310+144)&4294967295); //@line 4948 "xmlparse.c"
        var $312=HEAP[$311]; //@line 4948 "xmlparse.c"
        var $313=HEAP[$enc_addr]; //@line 4948 "xmlparse.c"
        var $314=($312)==($313); //@line 4948 "xmlparse.c"
        if ($314) { __label__ = 88; break; } else { __label__ = 89; break; } //@line 4948 "xmlparse.c"
      case 88: // $bb90
        var $315=HEAP[$parser_addr]; //@line 4949 "xmlparse.c"
        var $316=(($315+272)&4294967295); //@line 4949 "xmlparse.c"
        var $317=HEAP[$ptr_addr]; //@line 4949 "xmlparse.c"
        HEAP[$316]=$317; //@line 4949 "xmlparse.c"
        __label__ = 89; break; //@line 4949 "xmlparse.c"
      case 89: // $bb91
        HEAP[$0]=23; //@line 4950 "xmlparse.c"
        __label__ = 91; break; //@line 4950 "xmlparse.c"
      case 90: // $bb92
        var $318=HEAP[$next]; //@line 4952 "xmlparse.c"
        HEAP[$ptr_addr]=$318; //@line 4952 "xmlparse.c"
        __label__ = 1; break; //@line 4952 "xmlparse.c"
      case 91: // $bb93
        var $319=HEAP[$0]; //@line 4818 "xmlparse.c"
        HEAP[$retval]=$319; //@line 4818 "xmlparse.c"
        __label__ = 92; break; //@line 4818 "xmlparse.c"
      case 92: // $return
        var $retval94=HEAP[$retval]; //@line 4818 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval94; //@line 4818 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _storeEntityValue($parser, $enc, $entityTextPtr, $entityTextEnd) {
    var __stackBase__  = STACKTOP; STACKTOP += 56; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 56);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $enc_addr=__stackBase__+4;
        var $entityTextPtr_addr=__stackBase__+8;
        var $entityTextEnd_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $dtd=__stackBase__+24;
        var $pool=__stackBase__+28;
        var $result=__stackBase__+32;
        var $next=__stackBase__+36;
        var $tok=__stackBase__+40;
        var $buf=__stackBase__+44;
        var $i=__stackBase__+48;
        var $n=__stackBase__+52;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$enc_addr]=$enc;
        HEAP[$entityTextPtr_addr]=$entityTextPtr;
        HEAP[$entityTextEnd_addr]=$entityTextEnd;
        var $1=HEAP[$parser_addr]; //@line 4963 "xmlparse.c"
        var $2=(($1+340)&4294967295); //@line 4963 "xmlparse.c"
        var $3=HEAP[$2]; //@line 4963 "xmlparse.c"
        HEAP[$dtd]=$3; //@line 4963 "xmlparse.c"
        var $4=HEAP[$dtd]; //@line 4964 "xmlparse.c"
        var $5=(($4+104)&4294967295); //@line 4964 "xmlparse.c"
        HEAP[$pool]=$5; //@line 4964 "xmlparse.c"
        HEAP[$result]=0; //@line 4965 "xmlparse.c"
        var $6=HEAP[$pool]; //@line 4973 "xmlparse.c"
        var $7=(($6)&4294967295); //@line 4973 "xmlparse.c"
        var $8=HEAP[$7]; //@line 4973 "xmlparse.c"
        var $9=($8)==0; //@line 4973 "xmlparse.c"
        if ($9) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 4973 "xmlparse.c"
      case 1: // $bb
        var $10=HEAP[$pool]; //@line 4974 "xmlparse.c"
        var $11=_poolGrow($10); //@line 4974 "xmlparse.c"
        var $12=reSign(($11), 8, 0)==0; //@line 4974 "xmlparse.c"
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 4974 "xmlparse.c"
      case 2: // $bb1
        HEAP[$0]=1; //@line 4975 "xmlparse.c"
        __label__ = 40; break; //@line 4975 "xmlparse.c"
      case 3: // $bb2
        var $13=HEAP[$enc_addr]; //@line 4980 "xmlparse.c"
        var $14=(($13+12)&4294967295); //@line 4980 "xmlparse.c"
        var $15=(($14+4)&4294967295); //@line 4980 "xmlparse.c"
        var $16=HEAP[$15]; //@line 4980 "xmlparse.c"
        var $17=HEAP[$enc_addr]; //@line 4980 "xmlparse.c"
        var $18=HEAP[$entityTextPtr_addr]; //@line 4980 "xmlparse.c"
        var $19=HEAP[$entityTextEnd_addr]; //@line 4980 "xmlparse.c"
        var $20=FUNCTION_TABLE[$16]($17, $18, $19, $next); //@line 4980 "xmlparse.c"
        HEAP[$tok]=$20; //@line 4980 "xmlparse.c"
        var $21=HEAP[$tok]; //@line 4981 "xmlparse.c"
        if ($21 == -4) {
          __label__ = 5; break;
        }
        else if ($21 == -3) {
          __label__ = 9; break;
        }
        else if ($21 == -1) {
          __label__ = 29; break;
        }
        else if ($21 == 0) {
          __label__ = 32; break;
        }
        else if ($21 == 6) {
          __label__ = 6; break;
        }
        else if ($21 == 7) {
          __label__ = 10; break;
        }
        else if ($21 == 9) {
          __label__ = 6; break;
        }
        else if ($21 == 10) {
          __label__ = 14; break;
        }
        else if ($21 == 28) {
          __label__ = 4; break;
        }
        else {
        __label__ = 35; break;
        }
        
      case 4: // $bb3
        var $22=HEAP[$parser_addr]; //@line 5048 "xmlparse.c"
        var $23=(($22+272)&4294967295); //@line 5048 "xmlparse.c"
        var $24=HEAP[$entityTextPtr_addr]; //@line 5048 "xmlparse.c"
        HEAP[$23]=$24; //@line 5048 "xmlparse.c"
        HEAP[$result]=10; //@line 5049 "xmlparse.c"
        __label__ = 39; break; //@line 5049 "xmlparse.c"
      case 5: // $bb4
        HEAP[$result]=0; //@line 5052 "xmlparse.c"
        __label__ = 39; break; //@line 5052 "xmlparse.c"
      case 6: // $bb5
        var $25=HEAP[$next]; //@line 5056 "xmlparse.c"
        var $26=HEAP[$pool]; //@line 5056 "xmlparse.c"
        var $27=HEAP[$enc_addr]; //@line 5056 "xmlparse.c"
        var $28=HEAP[$entityTextPtr_addr]; //@line 5056 "xmlparse.c"
        var $29=_poolAppend($26, $27, $28, $25); //@line 5056 "xmlparse.c"
        var $30=($29)==0; //@line 5056 "xmlparse.c"
        if ($30) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 5056 "xmlparse.c"
      case 7: // $bb6
        HEAP[$result]=1; //@line 5057 "xmlparse.c"
        __label__ = 39; break; //@line 5057 "xmlparse.c"
      case 8: // $bb7
        __label__ = 38; break; //@line 5057 "xmlparse.c"
      case 9: // $bb8
        var $31=HEAP[$enc_addr]; //@line 5062 "xmlparse.c"
        var $32=(($31+64)&4294967295); //@line 5062 "xmlparse.c"
        var $33=HEAP[$32]; //@line 5062 "xmlparse.c"
        var $34=HEAP[$entityTextPtr_addr]; //@line 5062 "xmlparse.c"
        var $35=(($34+$33)&4294967295); //@line 5062 "xmlparse.c"
        HEAP[$next]=$35; //@line 5062 "xmlparse.c"
        __label__ = 10; break; //@line 5062 "xmlparse.c"
      case 10: // $bb9
        var $36=HEAP[$pool]; //@line 5065 "xmlparse.c"
        var $37=(($36+8)&4294967295); //@line 5065 "xmlparse.c"
        var $38=HEAP[$37]; //@line 5065 "xmlparse.c"
        var $39=HEAP[$pool]; //@line 5065 "xmlparse.c"
        var $40=(($39+12)&4294967295); //@line 5065 "xmlparse.c"
        var $41=HEAP[$40]; //@line 5065 "xmlparse.c"
        var $42=($38)==($41); //@line 5065 "xmlparse.c"
        if ($42) { __label__ = 11; break; } else { __label__ = 13; break; } //@line 5065 "xmlparse.c"
      case 11: // $bb10
        var $43=HEAP[$pool]; //@line 5065 "xmlparse.c"
        var $44=_poolGrow($43); //@line 5065 "xmlparse.c"
        var $45=reSign(($44), 8, 0)==0; //@line 5065 "xmlparse.c"
        if ($45) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 5065 "xmlparse.c"
      case 12: // $bb11
        HEAP[$result]=1; //@line 5066 "xmlparse.c"
        __label__ = 39; break; //@line 5066 "xmlparse.c"
      case 13: // $bb12
        var $46=HEAP[$pool]; //@line 5069 "xmlparse.c"
        var $47=(($46+12)&4294967295); //@line 5069 "xmlparse.c"
        var $48=HEAP[$47]; //@line 5069 "xmlparse.c"
        HEAP[$48]=10; //@line 5069 "xmlparse.c"
        var $49=(($48+1)&4294967295); //@line 5069 "xmlparse.c"
        var $50=HEAP[$pool]; //@line 5069 "xmlparse.c"
        var $51=(($50+12)&4294967295); //@line 5069 "xmlparse.c"
        HEAP[$51]=$49; //@line 5069 "xmlparse.c"
        __label__ = 38; break; //@line 5069 "xmlparse.c"
      case 14: // $bb13
        var $52=HEAP[$enc_addr]; //@line 5075 "xmlparse.c"
        var $53=(($52+40)&4294967295); //@line 5075 "xmlparse.c"
        var $54=HEAP[$53]; //@line 5075 "xmlparse.c"
        var $55=HEAP[$enc_addr]; //@line 5075 "xmlparse.c"
        var $56=HEAP[$entityTextPtr_addr]; //@line 5075 "xmlparse.c"
        var $57=FUNCTION_TABLE[$54]($55, $56); //@line 5075 "xmlparse.c"
        HEAP[$n]=$57; //@line 5075 "xmlparse.c"
        var $58=HEAP[$n]; //@line 5076 "xmlparse.c"
        var $59=((($58))|0) < 0; //@line 5076 "xmlparse.c"
        if ($59) { __label__ = 15; break; } else { __label__ = 18; break; } //@line 5076 "xmlparse.c"
      case 15: // $bb14
        var $60=HEAP[$parser_addr]; //@line 5077 "xmlparse.c"
        var $61=(($60+144)&4294967295); //@line 5077 "xmlparse.c"
        var $62=HEAP[$61]; //@line 5077 "xmlparse.c"
        var $63=HEAP[$enc_addr]; //@line 5077 "xmlparse.c"
        var $64=($62)==($63); //@line 5077 "xmlparse.c"
        if ($64) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 5077 "xmlparse.c"
      case 16: // $bb15
        var $65=HEAP[$parser_addr]; //@line 5078 "xmlparse.c"
        var $66=(($65+272)&4294967295); //@line 5078 "xmlparse.c"
        var $67=HEAP[$entityTextPtr_addr]; //@line 5078 "xmlparse.c"
        HEAP[$66]=$67; //@line 5078 "xmlparse.c"
        __label__ = 17; break; //@line 5078 "xmlparse.c"
      case 17: // $bb16
        HEAP[$result]=14; //@line 5079 "xmlparse.c"
        __label__ = 39; break; //@line 5079 "xmlparse.c"
      case 18: // $bb17
        var $68=HEAP[$n]; //@line 5082 "xmlparse.c"
        var $buf18=$buf; //@line 5082 "xmlparse.c"
        var $69=_PyExpat_XmlUtf8Encode($68, $buf18); //@line 5082 "xmlparse.c"
        HEAP[$n]=$69; //@line 5082 "xmlparse.c"
        var $70=HEAP[$n]; //@line 5083 "xmlparse.c"
        var $71=((($70))|0)==0; //@line 5083 "xmlparse.c"
        if ($71) { __label__ = 19; break; } else { __label__ = 22; break; } //@line 5083 "xmlparse.c"
      case 19: // $bb19
        var $72=HEAP[$parser_addr]; //@line 5084 "xmlparse.c"
        var $73=(($72+144)&4294967295); //@line 5084 "xmlparse.c"
        var $74=HEAP[$73]; //@line 5084 "xmlparse.c"
        var $75=HEAP[$enc_addr]; //@line 5084 "xmlparse.c"
        var $76=($74)==($75); //@line 5084 "xmlparse.c"
        if ($76) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 5084 "xmlparse.c"
      case 20: // $bb20
        var $77=HEAP[$parser_addr]; //@line 5085 "xmlparse.c"
        var $78=(($77+272)&4294967295); //@line 5085 "xmlparse.c"
        var $79=HEAP[$entityTextPtr_addr]; //@line 5085 "xmlparse.c"
        HEAP[$78]=$79; //@line 5085 "xmlparse.c"
        __label__ = 21; break; //@line 5085 "xmlparse.c"
      case 21: // $bb21
        HEAP[$result]=14; //@line 5086 "xmlparse.c"
        __label__ = 39; break; //@line 5086 "xmlparse.c"
      case 22: // $bb22
        HEAP[$i]=0; //@line 5089 "xmlparse.c"
        __label__ = 27; break; //@line 5089 "xmlparse.c"
      case 23: // $bb23
        var $80=HEAP[$pool]; //@line 5090 "xmlparse.c"
        var $81=(($80+8)&4294967295); //@line 5090 "xmlparse.c"
        var $82=HEAP[$81]; //@line 5090 "xmlparse.c"
        var $83=HEAP[$pool]; //@line 5090 "xmlparse.c"
        var $84=(($83+12)&4294967295); //@line 5090 "xmlparse.c"
        var $85=HEAP[$84]; //@line 5090 "xmlparse.c"
        var $86=($82)==($85); //@line 5090 "xmlparse.c"
        if ($86) { __label__ = 24; break; } else { __label__ = 26; break; } //@line 5090 "xmlparse.c"
      case 24: // $bb24
        var $87=HEAP[$pool]; //@line 5090 "xmlparse.c"
        var $88=_poolGrow($87); //@line 5090 "xmlparse.c"
        var $89=reSign(($88), 8, 0)==0; //@line 5090 "xmlparse.c"
        if ($89) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 5090 "xmlparse.c"
      case 25: // $bb25
        HEAP[$result]=1; //@line 5091 "xmlparse.c"
        __label__ = 39; break; //@line 5091 "xmlparse.c"
      case 26: // $bb26
        var $90=HEAP[$pool]; //@line 5094 "xmlparse.c"
        var $91=(($90+12)&4294967295); //@line 5094 "xmlparse.c"
        var $92=HEAP[$91]; //@line 5094 "xmlparse.c"
        var $93=HEAP[$i]; //@line 5094 "xmlparse.c"
        var $94=(($buf+$93)&4294967295); //@line 5094 "xmlparse.c"
        var $95=HEAP[$94]; //@line 5094 "xmlparse.c"
        HEAP[$92]=$95; //@line 5094 "xmlparse.c"
        var $96=(($92+1)&4294967295); //@line 5094 "xmlparse.c"
        var $97=HEAP[$pool]; //@line 5094 "xmlparse.c"
        var $98=(($97+12)&4294967295); //@line 5094 "xmlparse.c"
        HEAP[$98]=$96; //@line 5094 "xmlparse.c"
        var $99=HEAP[$i]; //@line 5089 "xmlparse.c"
        var $100=((($99) + 1)&4294967295); //@line 5089 "xmlparse.c"
        HEAP[$i]=$100; //@line 5089 "xmlparse.c"
        __label__ = 27; break; //@line 5089 "xmlparse.c"
      case 27: // $bb27
        var $101=HEAP[$i]; //@line 5089 "xmlparse.c"
        var $102=HEAP[$n]; //@line 5089 "xmlparse.c"
        var $103=((($101))|0) < ((($102))|0); //@line 5089 "xmlparse.c"
        if ($103) { __label__ = 23; break; } else { __label__ = 28; break; } //@line 5089 "xmlparse.c"
      case 28: // $bb28
        __label__ = 38; break; //@line 5089 "xmlparse.c"
      case 29: // $bb29
        var $104=HEAP[$parser_addr]; //@line 5099 "xmlparse.c"
        var $105=(($104+144)&4294967295); //@line 5099 "xmlparse.c"
        var $106=HEAP[$105]; //@line 5099 "xmlparse.c"
        var $107=HEAP[$enc_addr]; //@line 5099 "xmlparse.c"
        var $108=($106)==($107); //@line 5099 "xmlparse.c"
        if ($108) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 5099 "xmlparse.c"
      case 30: // $bb30
        var $109=HEAP[$parser_addr]; //@line 5100 "xmlparse.c"
        var $110=(($109+272)&4294967295); //@line 5100 "xmlparse.c"
        var $111=HEAP[$entityTextPtr_addr]; //@line 5100 "xmlparse.c"
        HEAP[$110]=$111; //@line 5100 "xmlparse.c"
        __label__ = 31; break; //@line 5100 "xmlparse.c"
      case 31: // $bb31
        HEAP[$result]=4; //@line 5101 "xmlparse.c"
        __label__ = 39; break; //@line 5101 "xmlparse.c"
      case 32: // $bb32
        var $112=HEAP[$parser_addr]; //@line 5104 "xmlparse.c"
        var $113=(($112+144)&4294967295); //@line 5104 "xmlparse.c"
        var $114=HEAP[$113]; //@line 5104 "xmlparse.c"
        var $115=HEAP[$enc_addr]; //@line 5104 "xmlparse.c"
        var $116=($114)==($115); //@line 5104 "xmlparse.c"
        if ($116) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 5104 "xmlparse.c"
      case 33: // $bb33
        var $117=HEAP[$next]; //@line 5105 "xmlparse.c"
        var $118=HEAP[$parser_addr]; //@line 5105 "xmlparse.c"
        var $119=(($118+272)&4294967295); //@line 5105 "xmlparse.c"
        HEAP[$119]=$117; //@line 5105 "xmlparse.c"
        __label__ = 34; break; //@line 5105 "xmlparse.c"
      case 34: // $bb34
        HEAP[$result]=4; //@line 5106 "xmlparse.c"
        __label__ = 39; break; //@line 5106 "xmlparse.c"
      case 35: // $bb35
        var $120=HEAP[$parser_addr]; //@line 5109 "xmlparse.c"
        var $121=(($120+144)&4294967295); //@line 5109 "xmlparse.c"
        var $122=HEAP[$121]; //@line 5109 "xmlparse.c"
        var $123=HEAP[$enc_addr]; //@line 5109 "xmlparse.c"
        var $124=($122)==($123); //@line 5109 "xmlparse.c"
        if ($124) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 5109 "xmlparse.c"
      case 36: // $bb36
        var $125=HEAP[$parser_addr]; //@line 5110 "xmlparse.c"
        var $126=(($125+272)&4294967295); //@line 5110 "xmlparse.c"
        var $127=HEAP[$entityTextPtr_addr]; //@line 5110 "xmlparse.c"
        HEAP[$126]=$127; //@line 5110 "xmlparse.c"
        __label__ = 37; break; //@line 5110 "xmlparse.c"
      case 37: // $bb37
        HEAP[$result]=23; //@line 5111 "xmlparse.c"
        __label__ = 39; break; //@line 5111 "xmlparse.c"
      case 38: // $bb38
        var $128=HEAP[$next]; //@line 5114 "xmlparse.c"
        HEAP[$entityTextPtr_addr]=$128; //@line 5114 "xmlparse.c"
        __label__ = 3; break; //@line 5114 "xmlparse.c"
      case 39: // $endEntityValue
        var $129=HEAP[$result]; //@line 5120 "xmlparse.c"
        HEAP[$0]=$129; //@line 5120 "xmlparse.c"
        __label__ = 40; break; //@line 5120 "xmlparse.c"
      case 40: // $bb39
        var $130=HEAP[$0]; //@line 4975 "xmlparse.c"
        HEAP[$retval]=$130; //@line 4975 "xmlparse.c"
        __label__ = 41; break; //@line 4975 "xmlparse.c"
      case 41: // $return
        var $retval40=HEAP[$retval]; //@line 4975 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval40; //@line 4975 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normalizeLines($s) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $s_addr=__stackBase__;
        var $p=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$s_addr]=$s;
        __label__ = 1; break; //@line 5125 "xmlparse.c"
      case 1: // $bb
        var $0=HEAP[$s_addr]; //@line 5128 "xmlparse.c"
        var $1=HEAP[$0]; //@line 5128 "xmlparse.c"
        var $2=reSign(($1), 8, 0)==0; //@line 5128 "xmlparse.c"
        if ($2) { __label__ = 12; break; } else { __label__ = 2; break; } //@line 5128 "xmlparse.c"
      case 2: // $bb1
        var $3=HEAP[$s_addr]; //@line 5130 "xmlparse.c"
        var $4=HEAP[$3]; //@line 5130 "xmlparse.c"
        var $5=reSign(($4), 8, 0)==13; //@line 5130 "xmlparse.c"
        if ($5) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 5130 "xmlparse.c"
      case 3: // $bb2
        var $6=HEAP[$s_addr]; //@line 5127 "xmlparse.c"
        var $7=(($6+1)&4294967295); //@line 5127 "xmlparse.c"
        HEAP[$s_addr]=$7; //@line 5127 "xmlparse.c"
        __label__ = 1; break; //@line 5127 "xmlparse.c"
      case 4: // $bb3
        var $8=HEAP[$s_addr]; //@line 5133 "xmlparse.c"
        HEAP[$p]=$8; //@line 5133 "xmlparse.c"
        __label__ = 5; break; //@line 5133 "xmlparse.c"
      case 5: // $bb4
        var $9=HEAP[$s_addr]; //@line 5135 "xmlparse.c"
        var $10=HEAP[$9]; //@line 5135 "xmlparse.c"
        var $11=reSign(($10), 8, 0)==13; //@line 5135 "xmlparse.c"
        if ($11) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 5135 "xmlparse.c"
      case 6: // $bb5
        var $12=HEAP[$p]; //@line 5136 "xmlparse.c"
        HEAP[$12]=10; //@line 5136 "xmlparse.c"
        var $13=HEAP[$p]; //@line 5136 "xmlparse.c"
        var $14=(($13+1)&4294967295); //@line 5136 "xmlparse.c"
        HEAP[$p]=$14; //@line 5136 "xmlparse.c"
        var $15=HEAP[$s_addr]; //@line 5137 "xmlparse.c"
        var $16=(($15+1)&4294967295); //@line 5137 "xmlparse.c"
        HEAP[$s_addr]=$16; //@line 5137 "xmlparse.c"
        var $17=HEAP[$s_addr]; //@line 5137 "xmlparse.c"
        var $18=HEAP[$17]; //@line 5137 "xmlparse.c"
        var $19=reSign(($18), 8, 0)==10; //@line 5137 "xmlparse.c"
        if ($19) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 5137 "xmlparse.c"
      case 7: // $bb6
        var $20=HEAP[$s_addr]; //@line 5138 "xmlparse.c"
        var $21=(($20+1)&4294967295); //@line 5138 "xmlparse.c"
        HEAP[$s_addr]=$21; //@line 5138 "xmlparse.c"
        __label__ = 8; break; //@line 5138 "xmlparse.c"
      case 8: // $bb7
        __label__ = 10; break; //@line 5138 "xmlparse.c"
      case 9: // $bb8
        var $22=HEAP[$s_addr]; //@line 5141 "xmlparse.c"
        var $23=HEAP[$22]; //@line 5141 "xmlparse.c"
        var $24=HEAP[$p]; //@line 5141 "xmlparse.c"
        HEAP[$24]=$23; //@line 5141 "xmlparse.c"
        var $25=HEAP[$p]; //@line 5141 "xmlparse.c"
        var $26=(($25+1)&4294967295); //@line 5141 "xmlparse.c"
        HEAP[$p]=$26; //@line 5141 "xmlparse.c"
        var $27=HEAP[$s_addr]; //@line 5141 "xmlparse.c"
        var $28=(($27+1)&4294967295); //@line 5141 "xmlparse.c"
        HEAP[$s_addr]=$28; //@line 5141 "xmlparse.c"
        __label__ = 10; break; //@line 5141 "xmlparse.c"
      case 10: // $bb9
        var $29=HEAP[$s_addr]; //@line 5142 "xmlparse.c"
        var $30=HEAP[$29]; //@line 5142 "xmlparse.c"
        var $31=reSign(($30), 8, 0)!=0; //@line 5142 "xmlparse.c"
        if ($31) { __label__ = 5; break; } else { __label__ = 11; break; } //@line 5142 "xmlparse.c"
      case 11: // $bb10
        var $32=HEAP[$p]; //@line 5143 "xmlparse.c"
        HEAP[$32]=0; //@line 5143 "xmlparse.c"
        __label__ = 12; break; //@line 5143 "xmlparse.c"
      case 12: // $bb11
        __label__ = 13; break; //@line 5129 "xmlparse.c"
      case 13: // $return
        STACKTOP = __stackBase__;
        return; //@line 5129 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _reportProcessingInstruction($parser, $enc, $start, $end) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $enc_addr=__stackBase__+4;
        var $start_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $target=__stackBase__+24;
        var $data=__stackBase__+28;
        var $tem=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$enc_addr]=$enc;
        HEAP[$start_addr]=$start;
        HEAP[$end_addr]=$end;
        var $1=HEAP[$parser_addr]; //@line 5153 "xmlparse.c"
        var $2=(($1+64)&4294967295); //@line 5153 "xmlparse.c"
        var $3=HEAP[$2]; //@line 5153 "xmlparse.c"
        var $4=($3)==0; //@line 5153 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 5153 "xmlparse.c"
      case 1: // $bb
        var $5=HEAP[$parser_addr]; //@line 5154 "xmlparse.c"
        var $6=(($5+80)&4294967295); //@line 5154 "xmlparse.c"
        var $7=HEAP[$6]; //@line 5154 "xmlparse.c"
        var $8=($7)!=0; //@line 5154 "xmlparse.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 5154 "xmlparse.c"
      case 2: // $bb1
        var $9=HEAP[$parser_addr]; //@line 5155 "xmlparse.c"
        var $10=HEAP[$enc_addr]; //@line 5155 "xmlparse.c"
        var $11=HEAP[$start_addr]; //@line 5155 "xmlparse.c"
        var $12=HEAP[$end_addr]; //@line 5155 "xmlparse.c"
        _reportDefault($9, $10, $11, $12); //@line 5155 "xmlparse.c"
        __label__ = 3; break; //@line 5155 "xmlparse.c"
      case 3: // $bb2
        HEAP[$0]=1; //@line 5156 "xmlparse.c"
        __label__ = 9; break; //@line 5156 "xmlparse.c"
      case 4: // $bb3
        var $13=HEAP[$enc_addr]; //@line 5158 "xmlparse.c"
        var $14=(($13+64)&4294967295); //@line 5158 "xmlparse.c"
        var $15=HEAP[$14]; //@line 5158 "xmlparse.c"
        var $16=((($15) * 2)&4294967295); //@line 5158 "xmlparse.c"
        var $17=HEAP[$start_addr]; //@line 5158 "xmlparse.c"
        var $18=(($17+$16)&4294967295); //@line 5158 "xmlparse.c"
        HEAP[$start_addr]=$18; //@line 5158 "xmlparse.c"
        var $19=HEAP[$enc_addr]; //@line 5159 "xmlparse.c"
        var $20=(($19+28)&4294967295); //@line 5159 "xmlparse.c"
        var $21=HEAP[$20]; //@line 5159 "xmlparse.c"
        var $22=HEAP[$enc_addr]; //@line 5159 "xmlparse.c"
        var $23=HEAP[$start_addr]; //@line 5159 "xmlparse.c"
        var $24=FUNCTION_TABLE[$21]($22, $23); //@line 5159 "xmlparse.c"
        var $25=HEAP[$start_addr]; //@line 5159 "xmlparse.c"
        var $26=(($25+$24)&4294967295); //@line 5159 "xmlparse.c"
        HEAP[$tem]=$26; //@line 5159 "xmlparse.c"
        var $27=HEAP[$parser_addr]; //@line 5160 "xmlparse.c"
        var $28=(($27+400)&4294967295); //@line 5160 "xmlparse.c"
        var $29=HEAP[$enc_addr]; //@line 5160 "xmlparse.c"
        var $30=HEAP[$start_addr]; //@line 5160 "xmlparse.c"
        var $31=HEAP[$tem]; //@line 5160 "xmlparse.c"
        var $32=_poolStoreString($28, $29, $30, $31); //@line 5160 "xmlparse.c"
        HEAP[$target]=$32; //@line 5160 "xmlparse.c"
        var $33=HEAP[$target]; //@line 5161 "xmlparse.c"
        var $34=($33)==0; //@line 5161 "xmlparse.c"
        if ($34) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5161 "xmlparse.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 5162 "xmlparse.c"
        __label__ = 9; break; //@line 5162 "xmlparse.c"
      case 6: // $bb5
        var $35=HEAP[$parser_addr]; //@line 5163 "xmlparse.c"
        var $36=(($35+400)&4294967295); //@line 5163 "xmlparse.c"
        var $37=(($36+12)&4294967295); //@line 5163 "xmlparse.c"
        var $38=HEAP[$37]; //@line 5163 "xmlparse.c"
        var $39=HEAP[$parser_addr]; //@line 5163 "xmlparse.c"
        var $40=(($39+400)&4294967295); //@line 5163 "xmlparse.c"
        var $41=(($40+16)&4294967295); //@line 5163 "xmlparse.c"
        HEAP[$41]=$38; //@line 5163 "xmlparse.c"
        var $42=HEAP[$enc_addr]; //@line 5164 "xmlparse.c"
        var $43=(($42+64)&4294967295); //@line 5164 "xmlparse.c"
        var $44=HEAP[$43]; //@line 5164 "xmlparse.c"
        var $45=((($44) * -2)&4294967295); //@line 5164 "xmlparse.c"
        var $46=HEAP[$end_addr]; //@line 5164 "xmlparse.c"
        var $47=(($46+$45)&4294967295); //@line 5164 "xmlparse.c"
        var $48=HEAP[$enc_addr]; //@line 5164 "xmlparse.c"
        var $49=(($48+32)&4294967295); //@line 5164 "xmlparse.c"
        var $50=HEAP[$49]; //@line 5164 "xmlparse.c"
        var $51=HEAP[$enc_addr]; //@line 5164 "xmlparse.c"
        var $52=HEAP[$tem]; //@line 5164 "xmlparse.c"
        var $53=FUNCTION_TABLE[$50]($51, $52); //@line 5164 "xmlparse.c"
        var $54=HEAP[$parser_addr]; //@line 5164 "xmlparse.c"
        var $55=(($54+400)&4294967295); //@line 5164 "xmlparse.c"
        var $56=HEAP[$enc_addr]; //@line 5164 "xmlparse.c"
        var $57=_poolStoreString($55, $56, $53, $47); //@line 5164 "xmlparse.c"
        HEAP[$data]=$57; //@line 5164 "xmlparse.c"
        var $58=HEAP[$data]; //@line 5167 "xmlparse.c"
        var $59=($58)==0; //@line 5167 "xmlparse.c"
        if ($59) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 5167 "xmlparse.c"
      case 7: // $bb6
        HEAP[$0]=0; //@line 5168 "xmlparse.c"
        __label__ = 9; break; //@line 5168 "xmlparse.c"
      case 8: // $bb7
        var $60=HEAP[$data]; //@line 5169 "xmlparse.c"
        _normalizeLines($60); //@line 5169 "xmlparse.c"
        var $61=HEAP[$parser_addr]; //@line 5170 "xmlparse.c"
        var $62=(($61+64)&4294967295); //@line 5170 "xmlparse.c"
        var $63=HEAP[$62]; //@line 5170 "xmlparse.c"
        var $64=HEAP[$parser_addr]; //@line 5170 "xmlparse.c"
        var $65=(($64+4)&4294967295); //@line 5170 "xmlparse.c"
        var $66=HEAP[$65]; //@line 5170 "xmlparse.c"
        var $67=HEAP[$target]; //@line 5170 "xmlparse.c"
        var $68=HEAP[$data]; //@line 5170 "xmlparse.c"
        FUNCTION_TABLE[$63]($66, $67, $68); //@line 5170 "xmlparse.c"
        var $69=HEAP[$parser_addr]; //@line 5171 "xmlparse.c"
        var $70=(($69+400)&4294967295); //@line 5171 "xmlparse.c"
        _poolClear($70); //@line 5171 "xmlparse.c"
        HEAP[$0]=1; //@line 5172 "xmlparse.c"
        __label__ = 9; break; //@line 5172 "xmlparse.c"
      case 9: // $bb8
        var $71=HEAP[$0]; //@line 5156 "xmlparse.c"
        HEAP[$retval]=$71; //@line 5156 "xmlparse.c"
        __label__ = 10; break; //@line 5156 "xmlparse.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 5156 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 5156 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _reportComment($parser, $enc, $start, $end) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $enc_addr=__stackBase__+4;
        var $start_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $data=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$enc_addr]=$enc;
        HEAP[$start_addr]=$start;
        HEAP[$end_addr]=$end;
        var $1=HEAP[$parser_addr]; //@line 5180 "xmlparse.c"
        var $2=(($1+68)&4294967295); //@line 5180 "xmlparse.c"
        var $3=HEAP[$2]; //@line 5180 "xmlparse.c"
        var $4=($3)==0; //@line 5180 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 5180 "xmlparse.c"
      case 1: // $bb
        var $5=HEAP[$parser_addr]; //@line 5181 "xmlparse.c"
        var $6=(($5+80)&4294967295); //@line 5181 "xmlparse.c"
        var $7=HEAP[$6]; //@line 5181 "xmlparse.c"
        var $8=($7)!=0; //@line 5181 "xmlparse.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 5181 "xmlparse.c"
      case 2: // $bb1
        var $9=HEAP[$parser_addr]; //@line 5182 "xmlparse.c"
        var $10=HEAP[$enc_addr]; //@line 5182 "xmlparse.c"
        var $11=HEAP[$start_addr]; //@line 5182 "xmlparse.c"
        var $12=HEAP[$end_addr]; //@line 5182 "xmlparse.c"
        _reportDefault($9, $10, $11, $12); //@line 5182 "xmlparse.c"
        __label__ = 3; break; //@line 5182 "xmlparse.c"
      case 3: // $bb2
        HEAP[$0]=1; //@line 5183 "xmlparse.c"
        __label__ = 7; break; //@line 5183 "xmlparse.c"
      case 4: // $bb3
        var $13=HEAP[$enc_addr]; //@line 5185 "xmlparse.c"
        var $14=(($13+64)&4294967295); //@line 5185 "xmlparse.c"
        var $15=HEAP[$14]; //@line 5185 "xmlparse.c"
        var $16=((($15) * -3)&4294967295); //@line 5185 "xmlparse.c"
        var $17=HEAP[$end_addr]; //@line 5185 "xmlparse.c"
        var $18=(($17+$16)&4294967295); //@line 5185 "xmlparse.c"
        var $19=HEAP[$enc_addr]; //@line 5185 "xmlparse.c"
        var $20=(($19+64)&4294967295); //@line 5185 "xmlparse.c"
        var $21=HEAP[$20]; //@line 5185 "xmlparse.c"
        var $22=((($21) * 4)&4294967295); //@line 5185 "xmlparse.c"
        var $23=HEAP[$start_addr]; //@line 5185 "xmlparse.c"
        var $24=(($23+$22)&4294967295); //@line 5185 "xmlparse.c"
        var $25=HEAP[$parser_addr]; //@line 5185 "xmlparse.c"
        var $26=(($25+400)&4294967295); //@line 5185 "xmlparse.c"
        var $27=HEAP[$enc_addr]; //@line 5185 "xmlparse.c"
        var $28=_poolStoreString($26, $27, $24, $18); //@line 5185 "xmlparse.c"
        HEAP[$data]=$28; //@line 5185 "xmlparse.c"
        var $29=HEAP[$data]; //@line 5189 "xmlparse.c"
        var $30=($29)==0; //@line 5189 "xmlparse.c"
        if ($30) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5189 "xmlparse.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 5190 "xmlparse.c"
        __label__ = 7; break; //@line 5190 "xmlparse.c"
      case 6: // $bb5
        var $31=HEAP[$data]; //@line 5191 "xmlparse.c"
        _normalizeLines($31); //@line 5191 "xmlparse.c"
        var $32=HEAP[$parser_addr]; //@line 5192 "xmlparse.c"
        var $33=(($32+68)&4294967295); //@line 5192 "xmlparse.c"
        var $34=HEAP[$33]; //@line 5192 "xmlparse.c"
        var $35=HEAP[$parser_addr]; //@line 5192 "xmlparse.c"
        var $36=(($35+4)&4294967295); //@line 5192 "xmlparse.c"
        var $37=HEAP[$36]; //@line 5192 "xmlparse.c"
        var $38=HEAP[$data]; //@line 5192 "xmlparse.c"
        FUNCTION_TABLE[$34]($37, $38); //@line 5192 "xmlparse.c"
        var $39=HEAP[$parser_addr]; //@line 5193 "xmlparse.c"
        var $40=(($39+400)&4294967295); //@line 5193 "xmlparse.c"
        _poolClear($40); //@line 5193 "xmlparse.c"
        HEAP[$0]=1; //@line 5194 "xmlparse.c"
        __label__ = 7; break; //@line 5194 "xmlparse.c"
      case 7: // $bb6
        var $41=HEAP[$0]; //@line 5183 "xmlparse.c"
        HEAP[$retval]=$41; //@line 5183 "xmlparse.c"
        __label__ = 8; break; //@line 5183 "xmlparse.c"
      case 8: // $return
        var $retval7=HEAP[$retval]; //@line 5183 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 5183 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _reportDefault($parser, $enc, $s, $end) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $enc_addr=__stackBase__+4;
        var $s_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $eventPP=__stackBase__+16;
        var $eventEndPP=__stackBase__+20;
        var $dataPtr=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$enc_addr]=$enc;
        HEAP[$s_addr]=$s;
        HEAP[$end_addr]=$end;
        var $0=HEAP[$enc_addr]; //@line 5201 "xmlparse.c"
        var $1=(($0+68)&4294967295); //@line 5201 "xmlparse.c"
        var $2=HEAP[$1]; //@line 5201 "xmlparse.c"
        var $3=reSign(($2), 8, 0)==0; //@line 5201 "xmlparse.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 6; break; } //@line 5201 "xmlparse.c"
      case 1: // $bb
        var $4=HEAP[$parser_addr]; //@line 5204 "xmlparse.c"
        var $5=(($4+144)&4294967295); //@line 5204 "xmlparse.c"
        var $6=HEAP[$5]; //@line 5204 "xmlparse.c"
        var $7=HEAP[$enc_addr]; //@line 5204 "xmlparse.c"
        var $8=($6)==($7); //@line 5204 "xmlparse.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 5204 "xmlparse.c"
      case 2: // $bb1
        var $9=HEAP[$parser_addr]; //@line 5205 "xmlparse.c"
        var $10=(($9+272)&4294967295); //@line 5205 "xmlparse.c"
        HEAP[$eventPP]=$10; //@line 5205 "xmlparse.c"
        var $11=HEAP[$parser_addr]; //@line 5206 "xmlparse.c"
        var $12=(($11+276)&4294967295); //@line 5206 "xmlparse.c"
        HEAP[$eventEndPP]=$12; //@line 5206 "xmlparse.c"
        __label__ = 4; break; //@line 5206 "xmlparse.c"
      case 3: // $bb2
        var $13=HEAP[$parser_addr]; //@line 5209 "xmlparse.c"
        var $14=(($13+284)&4294967295); //@line 5209 "xmlparse.c"
        var $15=HEAP[$14]; //@line 5209 "xmlparse.c"
        var $16=(($15)&4294967295); //@line 5209 "xmlparse.c"
        HEAP[$eventPP]=$16; //@line 5209 "xmlparse.c"
        var $17=HEAP[$parser_addr]; //@line 5210 "xmlparse.c"
        var $18=(($17+284)&4294967295); //@line 5210 "xmlparse.c"
        var $19=HEAP[$18]; //@line 5210 "xmlparse.c"
        var $20=(($19+4)&4294967295); //@line 5210 "xmlparse.c"
        HEAP[$eventEndPP]=$20; //@line 5210 "xmlparse.c"
        __label__ = 4; break; //@line 5210 "xmlparse.c"
      case 4: // $bb3
        var $21=HEAP[$parser_addr]; //@line 5213 "xmlparse.c"
        var $22=(($21+44)&4294967295); //@line 5213 "xmlparse.c"
        var $23=HEAP[$22]; //@line 5213 "xmlparse.c"
        HEAP[$dataPtr]=$23; //@line 5213 "xmlparse.c"
        var $24=HEAP[$enc_addr]; //@line 5214 "xmlparse.c"
        var $25=(($24+56)&4294967295); //@line 5214 "xmlparse.c"
        var $26=HEAP[$25]; //@line 5214 "xmlparse.c"
        var $27=HEAP[$parser_addr]; //@line 5214 "xmlparse.c"
        var $28=(($27+48)&4294967295); //@line 5214 "xmlparse.c"
        var $29=HEAP[$28]; //@line 5214 "xmlparse.c"
        var $30=HEAP[$enc_addr]; //@line 5214 "xmlparse.c"
        var $31=HEAP[$end_addr]; //@line 5214 "xmlparse.c"
        FUNCTION_TABLE[$26]($30, $s_addr, $31, $dataPtr, $29); //@line 5214 "xmlparse.c"
        var $32=HEAP[$s_addr]; //@line 5215 "xmlparse.c"
        var $33=HEAP[$eventEndPP]; //@line 5215 "xmlparse.c"
        HEAP[$33]=$32; //@line 5215 "xmlparse.c"
        var $34=HEAP[$parser_addr]; //@line 5216 "xmlparse.c"
        var $35=(($34+80)&4294967295); //@line 5216 "xmlparse.c"
        var $36=HEAP[$35]; //@line 5216 "xmlparse.c"
        var $37=HEAP[$dataPtr]; //@line 5216 "xmlparse.c"
        var $38=($37); //@line 5216 "xmlparse.c"
        var $39=HEAP[$parser_addr]; //@line 5216 "xmlparse.c"
        var $40=(($39+44)&4294967295); //@line 5216 "xmlparse.c"
        var $41=HEAP[$40]; //@line 5216 "xmlparse.c"
        var $42=($41); //@line 5216 "xmlparse.c"
        var $43=((($38) - ($42))&4294967295); //@line 5216 "xmlparse.c"
        var $44=HEAP[$parser_addr]; //@line 5216 "xmlparse.c"
        var $45=(($44+44)&4294967295); //@line 5216 "xmlparse.c"
        var $46=HEAP[$45]; //@line 5216 "xmlparse.c"
        var $47=HEAP[$parser_addr]; //@line 5216 "xmlparse.c"
        var $48=(($47+4)&4294967295); //@line 5216 "xmlparse.c"
        var $49=HEAP[$48]; //@line 5216 "xmlparse.c"
        FUNCTION_TABLE[$36]($49, $46, $43); //@line 5216 "xmlparse.c"
        var $50=HEAP[$s_addr]; //@line 5217 "xmlparse.c"
        var $51=HEAP[$eventPP]; //@line 5217 "xmlparse.c"
        HEAP[$51]=$50; //@line 5217 "xmlparse.c"
        var $52=HEAP[$s_addr]; //@line 5218 "xmlparse.c"
        var $53=HEAP[$end_addr]; //@line 5218 "xmlparse.c"
        var $54=($52)!=($53); //@line 5218 "xmlparse.c"
        if ($54) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 5218 "xmlparse.c"
      case 5: // $bb4
        __label__ = 7; break; //@line 5218 "xmlparse.c"
      case 6: // $bb5
        var $55=HEAP[$parser_addr]; //@line 5221 "xmlparse.c"
        var $56=(($55+80)&4294967295); //@line 5221 "xmlparse.c"
        var $57=HEAP[$56]; //@line 5221 "xmlparse.c"
        var $58=HEAP[$end_addr]; //@line 5221 "xmlparse.c"
        var $59=($58); //@line 5221 "xmlparse.c"
        var $60=HEAP[$s_addr]; //@line 5221 "xmlparse.c"
        var $61=($60); //@line 5221 "xmlparse.c"
        var $62=((($59) - ($61))&4294967295); //@line 5221 "xmlparse.c"
        var $63=HEAP[$s_addr]; //@line 5221 "xmlparse.c"
        var $64=HEAP[$parser_addr]; //@line 5221 "xmlparse.c"
        var $65=(($64+4)&4294967295); //@line 5221 "xmlparse.c"
        var $66=HEAP[$65]; //@line 5221 "xmlparse.c"
        FUNCTION_TABLE[$57]($66, $63, $62); //@line 5221 "xmlparse.c"
        __label__ = 7; break; //@line 5221 "xmlparse.c"
      case 7: // $bb6
        __label__ = 8; break; //@line 5222 "xmlparse.c"
      case 8: // $return
        STACKTOP = __stackBase__;
        return; //@line 5222 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _defineAttribute($type, $attId, $isCdata, $isId, $value, $parser) {
    var __stackBase__  = STACKTOP; STACKTOP += 42; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 42);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $type_addr=__stackBase__;
        var $attId_addr=__stackBase__+4;
        var $isCdata_addr=__stackBase__+8;
        var $isId_addr=__stackBase__+9;
        var $value_addr=__stackBase__+10;
        var $parser_addr=__stackBase__+14;
        var $retval=__stackBase__+18;
        var $0=__stackBase__+22;
        var $att=__stackBase__+26;
        var $i=__stackBase__+30;
        var $temp=__stackBase__+34;
        var $count=__stackBase__+38;
        var $_alloca_point_=0;
        HEAP[$type_addr]=$type;
        HEAP[$attId_addr]=$attId;
        HEAP[$isCdata_addr]=$isCdata;
        HEAP[$isId_addr]=$isId;
        HEAP[$value_addr]=$value;
        HEAP[$parser_addr]=$parser;
        var $1=HEAP[$value_addr]; //@line 5230 "xmlparse.c"
        var $2=($1)!=0; //@line 5230 "xmlparse.c"
        if ($2) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 5230 "xmlparse.c"
      case 1: // $bb
        var $3=HEAP[$isId_addr]; //@line 5230 "xmlparse.c"
        var $4=reSign(($3), 8, 0)!=0; //@line 5230 "xmlparse.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 11; break; } //@line 5230 "xmlparse.c"
      case 2: // $bb1
        HEAP[$i]=0; //@line 5234 "xmlparse.c"
        __label__ = 6; break; //@line 5234 "xmlparse.c"
      case 3: // $bb2
        var $5=HEAP[$type_addr]; //@line 5235 "xmlparse.c"
        var $6=(($5+20)&4294967295); //@line 5235 "xmlparse.c"
        var $7=HEAP[$6]; //@line 5235 "xmlparse.c"
        var $8=HEAP[$i]; //@line 5235 "xmlparse.c"
        var $9=(($7+12*$8)&4294967295); //@line 5235 "xmlparse.c"
        var $10=(($9)&4294967295); //@line 5235 "xmlparse.c"
        var $11=HEAP[$10]; //@line 5235 "xmlparse.c"
        var $12=HEAP[$attId_addr]; //@line 5235 "xmlparse.c"
        var $13=($11)==($12); //@line 5235 "xmlparse.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 5235 "xmlparse.c"
      case 4: // $bb3
        HEAP[$0]=1; //@line 5236 "xmlparse.c"
        __label__ = 22; break; //@line 5236 "xmlparse.c"
      case 5: // $bb4
        var $14=HEAP[$i]; //@line 5234 "xmlparse.c"
        var $15=((($14) + 1)&4294967295); //@line 5234 "xmlparse.c"
        HEAP[$i]=$15; //@line 5234 "xmlparse.c"
        __label__ = 6; break; //@line 5234 "xmlparse.c"
      case 6: // $bb5
        var $16=HEAP[$type_addr]; //@line 5234 "xmlparse.c"
        var $17=(($16+12)&4294967295); //@line 5234 "xmlparse.c"
        var $18=HEAP[$17]; //@line 5234 "xmlparse.c"
        var $19=HEAP[$i]; //@line 5234 "xmlparse.c"
        var $20=((($18))|0) > ((($19))|0); //@line 5234 "xmlparse.c"
        if ($20) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 5234 "xmlparse.c"
      case 7: // $bb6
        var $21=HEAP[$isId_addr]; //@line 5237 "xmlparse.c"
        var $22=reSign(($21), 8, 0)!=0; //@line 5237 "xmlparse.c"
        if ($22) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 5237 "xmlparse.c"
      case 8: // $bb7
        var $23=HEAP[$type_addr]; //@line 5237 "xmlparse.c"
        var $24=(($23+8)&4294967295); //@line 5237 "xmlparse.c"
        var $25=HEAP[$24]; //@line 5237 "xmlparse.c"
        var $26=($25)==0; //@line 5237 "xmlparse.c"
        if ($26) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 5237 "xmlparse.c"
      case 9: // $bb8
        var $27=HEAP[$attId_addr]; //@line 5237 "xmlparse.c"
        var $28=(($27+9)&4294967295); //@line 5237 "xmlparse.c"
        var $29=HEAP[$28]; //@line 5237 "xmlparse.c"
        var $30=reSign(($29), 8, 0)==0; //@line 5237 "xmlparse.c"
        if ($30) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 5237 "xmlparse.c"
      case 10: // $bb9
        var $31=HEAP[$type_addr]; //@line 5238 "xmlparse.c"
        var $32=(($31+8)&4294967295); //@line 5238 "xmlparse.c"
        var $33=HEAP[$attId_addr]; //@line 5238 "xmlparse.c"
        HEAP[$32]=$33; //@line 5238 "xmlparse.c"
        __label__ = 11; break; //@line 5238 "xmlparse.c"
      case 11: // $bb10
        var $34=HEAP[$type_addr]; //@line 5240 "xmlparse.c"
        var $35=(($34+12)&4294967295); //@line 5240 "xmlparse.c"
        var $36=HEAP[$35]; //@line 5240 "xmlparse.c"
        var $37=HEAP[$type_addr]; //@line 5240 "xmlparse.c"
        var $38=(($37+16)&4294967295); //@line 5240 "xmlparse.c"
        var $39=HEAP[$38]; //@line 5240 "xmlparse.c"
        var $40=((($36))|0)==((($39))|0); //@line 5240 "xmlparse.c"
        if ($40) { __label__ = 12; break; } else { __label__ = 19; break; } //@line 5240 "xmlparse.c"
      case 12: // $bb11
        var $41=HEAP[$type_addr]; //@line 5241 "xmlparse.c"
        var $42=(($41+16)&4294967295); //@line 5241 "xmlparse.c"
        var $43=HEAP[$42]; //@line 5241 "xmlparse.c"
        var $44=((($43))|0)==0; //@line 5241 "xmlparse.c"
        if ($44) { __label__ = 13; break; } else { __label__ = 16; break; } //@line 5241 "xmlparse.c"
      case 13: // $bb12
        var $45=HEAP[$type_addr]; //@line 5242 "xmlparse.c"
        var $46=(($45+16)&4294967295); //@line 5242 "xmlparse.c"
        HEAP[$46]=8; //@line 5242 "xmlparse.c"
        var $47=HEAP[$parser_addr]; //@line 5243 "xmlparse.c"
        var $48=(($47+12)&4294967295); //@line 5243 "xmlparse.c"
        var $49=(($48)&4294967295); //@line 5243 "xmlparse.c"
        var $50=HEAP[$49]; //@line 5243 "xmlparse.c"
        var $51=HEAP[$type_addr]; //@line 5243 "xmlparse.c"
        var $52=(($51+16)&4294967295); //@line 5243 "xmlparse.c"
        var $53=HEAP[$52]; //@line 5243 "xmlparse.c"
        var $54=((($53) * 12)&4294967295); //@line 5243 "xmlparse.c"
        var $55=FUNCTION_TABLE[$50]($54); //@line 5243 "xmlparse.c"
        var $56=$55; //@line 5243 "xmlparse.c"
        var $57=HEAP[$type_addr]; //@line 5243 "xmlparse.c"
        var $58=(($57+20)&4294967295); //@line 5243 "xmlparse.c"
        HEAP[$58]=$56; //@line 5243 "xmlparse.c"
        var $59=HEAP[$type_addr]; //@line 5245 "xmlparse.c"
        var $60=(($59+20)&4294967295); //@line 5245 "xmlparse.c"
        var $61=HEAP[$60]; //@line 5245 "xmlparse.c"
        var $62=($61)==0; //@line 5245 "xmlparse.c"
        if ($62) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 5245 "xmlparse.c"
      case 14: // $bb13
        HEAP[$0]=0; //@line 5246 "xmlparse.c"
        __label__ = 22; break; //@line 5246 "xmlparse.c"
      case 15: // $bb14
        __label__ = 19; break; //@line 5246 "xmlparse.c"
      case 16: // $bb15
        var $63=HEAP[$type_addr]; //@line 5250 "xmlparse.c"
        var $64=(($63+16)&4294967295); //@line 5250 "xmlparse.c"
        var $65=HEAP[$64]; //@line 5250 "xmlparse.c"
        var $66=((($65) * 2)&4294967295); //@line 5250 "xmlparse.c"
        HEAP[$count]=$66; //@line 5250 "xmlparse.c"
        var $67=HEAP[$parser_addr]; //@line 5251 "xmlparse.c"
        var $68=(($67+12)&4294967295); //@line 5251 "xmlparse.c"
        var $69=(($68+4)&4294967295); //@line 5251 "xmlparse.c"
        var $70=HEAP[$69]; //@line 5251 "xmlparse.c"
        var $71=HEAP[$count]; //@line 5251 "xmlparse.c"
        var $72=((($71) * 12)&4294967295); //@line 5251 "xmlparse.c"
        var $73=HEAP[$type_addr]; //@line 5251 "xmlparse.c"
        var $74=(($73+20)&4294967295); //@line 5251 "xmlparse.c"
        var $75=HEAP[$74]; //@line 5251 "xmlparse.c"
        var $76=$75; //@line 5251 "xmlparse.c"
        var $77=FUNCTION_TABLE[$70]($76, $72); //@line 5251 "xmlparse.c"
        var $78=$77; //@line 5251 "xmlparse.c"
        HEAP[$temp]=$78; //@line 5251 "xmlparse.c"
        var $79=HEAP[$temp]; //@line 5253 "xmlparse.c"
        var $80=($79)==0; //@line 5253 "xmlparse.c"
        if ($80) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 5253 "xmlparse.c"
      case 17: // $bb16
        HEAP[$0]=0; //@line 5254 "xmlparse.c"
        __label__ = 22; break; //@line 5254 "xmlparse.c"
      case 18: // $bb17
        var $81=HEAP[$type_addr]; //@line 5255 "xmlparse.c"
        var $82=(($81+16)&4294967295); //@line 5255 "xmlparse.c"
        var $83=HEAP[$count]; //@line 5255 "xmlparse.c"
        HEAP[$82]=$83; //@line 5255 "xmlparse.c"
        var $84=HEAP[$type_addr]; //@line 5256 "xmlparse.c"
        var $85=(($84+20)&4294967295); //@line 5256 "xmlparse.c"
        var $86=HEAP[$temp]; //@line 5256 "xmlparse.c"
        HEAP[$85]=$86; //@line 5256 "xmlparse.c"
        __label__ = 19; break; //@line 5256 "xmlparse.c"
      case 19: // $bb18
        var $87=HEAP[$type_addr]; //@line 5259 "xmlparse.c"
        var $88=(($87+20)&4294967295); //@line 5259 "xmlparse.c"
        var $89=HEAP[$88]; //@line 5259 "xmlparse.c"
        var $90=HEAP[$type_addr]; //@line 5259 "xmlparse.c"
        var $91=(($90+12)&4294967295); //@line 5259 "xmlparse.c"
        var $92=HEAP[$91]; //@line 5259 "xmlparse.c"
        var $93=(($89+12*$92)&4294967295); //@line 5259 "xmlparse.c"
        HEAP[$att]=$93; //@line 5259 "xmlparse.c"
        var $94=HEAP[$att]; //@line 5260 "xmlparse.c"
        var $95=(($94)&4294967295); //@line 5260 "xmlparse.c"
        var $96=HEAP[$attId_addr]; //@line 5260 "xmlparse.c"
        HEAP[$95]=$96; //@line 5260 "xmlparse.c"
        var $97=HEAP[$att]; //@line 5261 "xmlparse.c"
        var $98=(($97+8)&4294967295); //@line 5261 "xmlparse.c"
        var $99=HEAP[$value_addr]; //@line 5261 "xmlparse.c"
        HEAP[$98]=$99; //@line 5261 "xmlparse.c"
        var $100=HEAP[$att]; //@line 5262 "xmlparse.c"
        var $101=(($100+4)&4294967295); //@line 5262 "xmlparse.c"
        var $102=HEAP[$isCdata_addr]; //@line 5262 "xmlparse.c"
        HEAP[$101]=$102; //@line 5262 "xmlparse.c"
        var $103=HEAP[$isCdata_addr]; //@line 5263 "xmlparse.c"
        var $104=reSign(($103), 8, 0)==0; //@line 5263 "xmlparse.c"
        if ($104) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 5263 "xmlparse.c"
      case 20: // $bb19
        var $105=HEAP[$attId_addr]; //@line 5264 "xmlparse.c"
        var $106=(($105+8)&4294967295); //@line 5264 "xmlparse.c"
        HEAP[$106]=1; //@line 5264 "xmlparse.c"
        __label__ = 21; break; //@line 5264 "xmlparse.c"
      case 21: // $bb20
        var $107=HEAP[$type_addr]; //@line 5265 "xmlparse.c"
        var $108=(($107+12)&4294967295); //@line 5265 "xmlparse.c"
        var $109=HEAP[$108]; //@line 5265 "xmlparse.c"
        var $110=((($109) + 1)&4294967295); //@line 5265 "xmlparse.c"
        var $111=HEAP[$type_addr]; //@line 5265 "xmlparse.c"
        var $112=(($111+12)&4294967295); //@line 5265 "xmlparse.c"
        HEAP[$112]=$110; //@line 5265 "xmlparse.c"
        HEAP[$0]=1; //@line 5266 "xmlparse.c"
        __label__ = 22; break; //@line 5266 "xmlparse.c"
      case 22: // $bb21
        var $113=HEAP[$0]; //@line 5236 "xmlparse.c"
        HEAP[$retval]=$113; //@line 5236 "xmlparse.c"
        __label__ = 23; break; //@line 5236 "xmlparse.c"
      case 23: // $return
        var $retval22=HEAP[$retval]; //@line 5236 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval22; //@line 5236 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _setElementTypePrefix($parser, $elementType) {
    var __stackBase__  = STACKTOP; STACKTOP += 34; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 34);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $elementType_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $iftmp_255=__stackBase__+12;
        var $0=__stackBase__+13;
        var $iftmp_254=__stackBase__+17;
        var $dtd=__stackBase__+18;
        var $name=__stackBase__+22;
        var $prefix=__stackBase__+26;
        var $s=__stackBase__+30;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$elementType_addr]=$elementType;
        var $1=HEAP[$parser_addr]; //@line 5272 "xmlparse.c"
        var $2=(($1+340)&4294967295); //@line 5272 "xmlparse.c"
        var $3=HEAP[$2]; //@line 5272 "xmlparse.c"
        HEAP[$dtd]=$3; //@line 5272 "xmlparse.c"
        var $4=HEAP[$elementType_addr]; //@line 5274 "xmlparse.c"
        var $5=(($4)&4294967295); //@line 5274 "xmlparse.c"
        var $6=HEAP[$5]; //@line 5274 "xmlparse.c"
        HEAP[$name]=$6; //@line 5274 "xmlparse.c"
        __label__ = 24; break; //@line 5274 "xmlparse.c"
      case 1: // $bb
        var $7=HEAP[$name]; //@line 5275 "xmlparse.c"
        var $8=HEAP[$7]; //@line 5275 "xmlparse.c"
        var $9=reSign(($8), 8, 0)==58; //@line 5275 "xmlparse.c"
        if ($9) { __label__ = 2; break; } else { __label__ = 23; break; } //@line 5275 "xmlparse.c"
      case 2: // $bb1
        var $10=HEAP[$elementType_addr]; //@line 5278 "xmlparse.c"
        var $11=(($10)&4294967295); //@line 5278 "xmlparse.c"
        var $12=HEAP[$11]; //@line 5278 "xmlparse.c"
        HEAP[$s]=$12; //@line 5278 "xmlparse.c"
        __label__ = 10; break; //@line 5278 "xmlparse.c"
      case 3: // $bb2
        var $13=HEAP[$dtd]; //@line 5279 "xmlparse.c"
        var $14=(($13+80)&4294967295); //@line 5279 "xmlparse.c"
        var $15=(($14+12)&4294967295); //@line 5279 "xmlparse.c"
        var $16=HEAP[$15]; //@line 5279 "xmlparse.c"
        var $17=HEAP[$dtd]; //@line 5279 "xmlparse.c"
        var $18=(($17+80)&4294967295); //@line 5279 "xmlparse.c"
        var $19=(($18+8)&4294967295); //@line 5279 "xmlparse.c"
        var $20=HEAP[$19]; //@line 5279 "xmlparse.c"
        var $21=($16)!=($20); //@line 5279 "xmlparse.c"
        if ($21) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 5279 "xmlparse.c"
      case 4: // $bb3
        var $22=HEAP[$dtd]; //@line 5279 "xmlparse.c"
        var $23=(($22+80)&4294967295); //@line 5279 "xmlparse.c"
        var $24=_poolGrow($23); //@line 5279 "xmlparse.c"
        var $25=reSign(($24), 8, 0)!=0; //@line 5279 "xmlparse.c"
        if ($25) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5279 "xmlparse.c"
      case 5: // $bb4
        var $26=HEAP[$dtd]; //@line 5279 "xmlparse.c"
        var $27=(($26+80)&4294967295); //@line 5279 "xmlparse.c"
        var $28=(($27+12)&4294967295); //@line 5279 "xmlparse.c"
        var $29=HEAP[$28]; //@line 5279 "xmlparse.c"
        var $30=HEAP[$s]; //@line 5279 "xmlparse.c"
        var $31=HEAP[$30]; //@line 5279 "xmlparse.c"
        HEAP[$29]=$31; //@line 5279 "xmlparse.c"
        var $32=(($29+1)&4294967295); //@line 5279 "xmlparse.c"
        var $33=HEAP[$dtd]; //@line 5279 "xmlparse.c"
        var $34=(($33+80)&4294967295); //@line 5279 "xmlparse.c"
        var $35=(($34+12)&4294967295); //@line 5279 "xmlparse.c"
        HEAP[$35]=$32; //@line 5279 "xmlparse.c"
        HEAP[$iftmp_254]=0; //@line 5279 "xmlparse.c"
        __label__ = 7; break; //@line 5279 "xmlparse.c"
      case 6: // $bb5
        HEAP[$iftmp_254]=1; //@line 5279 "xmlparse.c"
        __label__ = 7; break; //@line 5279 "xmlparse.c"
      case 7: // $bb6
        var $36=HEAP[$iftmp_254]; //@line 5279 "xmlparse.c"
        var $toBool=reSign(($36), 8, 0)!=0; //@line 5279 "xmlparse.c"
        if ($toBool) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 5279 "xmlparse.c"
      case 8: // $bb7
        HEAP[$0]=0; //@line 5280 "xmlparse.c"
        __label__ = 26; break; //@line 5280 "xmlparse.c"
      case 9: // $bb8
        var $37=HEAP[$s]; //@line 5278 "xmlparse.c"
        var $38=(($37+1)&4294967295); //@line 5278 "xmlparse.c"
        HEAP[$s]=$38; //@line 5278 "xmlparse.c"
        __label__ = 10; break; //@line 5278 "xmlparse.c"
      case 10: // $bb9
        var $39=HEAP[$s]; //@line 5278 "xmlparse.c"
        var $40=HEAP[$name]; //@line 5278 "xmlparse.c"
        var $41=($39)!=($40); //@line 5278 "xmlparse.c"
        if ($41) { __label__ = 3; break; } else { __label__ = 11; break; } //@line 5278 "xmlparse.c"
      case 11: // $bb10
        var $42=HEAP[$dtd]; //@line 5282 "xmlparse.c"
        var $43=(($42+80)&4294967295); //@line 5282 "xmlparse.c"
        var $44=(($43+12)&4294967295); //@line 5282 "xmlparse.c"
        var $45=HEAP[$44]; //@line 5282 "xmlparse.c"
        var $46=HEAP[$dtd]; //@line 5282 "xmlparse.c"
        var $47=(($46+80)&4294967295); //@line 5282 "xmlparse.c"
        var $48=(($47+8)&4294967295); //@line 5282 "xmlparse.c"
        var $49=HEAP[$48]; //@line 5282 "xmlparse.c"
        var $50=($45)!=($49); //@line 5282 "xmlparse.c"
        if ($50) { __label__ = 13; break; } else { __label__ = 12; break; } //@line 5282 "xmlparse.c"
      case 12: // $bb11
        var $51=HEAP[$dtd]; //@line 5282 "xmlparse.c"
        var $52=(($51+80)&4294967295); //@line 5282 "xmlparse.c"
        var $53=_poolGrow($52); //@line 5282 "xmlparse.c"
        var $54=reSign(($53), 8, 0)!=0; //@line 5282 "xmlparse.c"
        if ($54) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 5282 "xmlparse.c"
      case 13: // $bb12
        var $55=HEAP[$dtd]; //@line 5282 "xmlparse.c"
        var $56=(($55+80)&4294967295); //@line 5282 "xmlparse.c"
        var $57=(($56+12)&4294967295); //@line 5282 "xmlparse.c"
        var $58=HEAP[$57]; //@line 5282 "xmlparse.c"
        HEAP[$58]=0; //@line 5282 "xmlparse.c"
        var $59=(($58+1)&4294967295); //@line 5282 "xmlparse.c"
        var $60=HEAP[$dtd]; //@line 5282 "xmlparse.c"
        var $61=(($60+80)&4294967295); //@line 5282 "xmlparse.c"
        var $62=(($61+12)&4294967295); //@line 5282 "xmlparse.c"
        HEAP[$62]=$59; //@line 5282 "xmlparse.c"
        HEAP[$iftmp_255]=0; //@line 5282 "xmlparse.c"
        __label__ = 15; break; //@line 5282 "xmlparse.c"
      case 14: // $bb13
        HEAP[$iftmp_255]=1; //@line 5282 "xmlparse.c"
        __label__ = 15; break; //@line 5282 "xmlparse.c"
      case 15: // $bb14
        var $63=HEAP[$iftmp_255]; //@line 5282 "xmlparse.c"
        var $toBool15=reSign(($63), 8, 0)!=0; //@line 5282 "xmlparse.c"
        if ($toBool15) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 5282 "xmlparse.c"
      case 16: // $bb16
        HEAP[$0]=0; //@line 5283 "xmlparse.c"
        __label__ = 26; break; //@line 5283 "xmlparse.c"
      case 17: // $bb17
        var $64=HEAP[$dtd]; //@line 5284 "xmlparse.c"
        var $65=(($64+80)&4294967295); //@line 5284 "xmlparse.c"
        var $66=(($65+16)&4294967295); //@line 5284 "xmlparse.c"
        var $67=HEAP[$66]; //@line 5284 "xmlparse.c"
        var $68=HEAP[$dtd]; //@line 5284 "xmlparse.c"
        var $69=(($68+60)&4294967295); //@line 5284 "xmlparse.c"
        var $70=_lookup($69, $67, 8); //@line 5284 "xmlparse.c"
        var $71=$70; //@line 5284 "xmlparse.c"
        HEAP[$prefix]=$71; //@line 5284 "xmlparse.c"
        var $72=HEAP[$prefix]; //@line 5286 "xmlparse.c"
        var $73=($72)==0; //@line 5286 "xmlparse.c"
        if ($73) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 5286 "xmlparse.c"
      case 18: // $bb18
        HEAP[$0]=0; //@line 5287 "xmlparse.c"
        __label__ = 26; break; //@line 5287 "xmlparse.c"
      case 19: // $bb19
        var $74=HEAP[$prefix]; //@line 5288 "xmlparse.c"
        var $75=(($74)&4294967295); //@line 5288 "xmlparse.c"
        var $76=HEAP[$75]; //@line 5288 "xmlparse.c"
        var $77=HEAP[$dtd]; //@line 5288 "xmlparse.c"
        var $78=(($77+80)&4294967295); //@line 5288 "xmlparse.c"
        var $79=(($78+16)&4294967295); //@line 5288 "xmlparse.c"
        var $80=HEAP[$79]; //@line 5288 "xmlparse.c"
        var $81=($76)==($80); //@line 5288 "xmlparse.c"
        if ($81) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 5288 "xmlparse.c"
      case 20: // $bb20
        var $82=HEAP[$dtd]; //@line 5289 "xmlparse.c"
        var $83=(($82+80)&4294967295); //@line 5289 "xmlparse.c"
        var $84=(($83+12)&4294967295); //@line 5289 "xmlparse.c"
        var $85=HEAP[$84]; //@line 5289 "xmlparse.c"
        var $86=HEAP[$dtd]; //@line 5289 "xmlparse.c"
        var $87=(($86+80)&4294967295); //@line 5289 "xmlparse.c"
        var $88=(($87+16)&4294967295); //@line 5289 "xmlparse.c"
        HEAP[$88]=$85; //@line 5289 "xmlparse.c"
        __label__ = 22; break; //@line 5289 "xmlparse.c"
      case 21: // $bb21
        var $89=HEAP[$dtd]; //@line 5291 "xmlparse.c"
        var $90=(($89+80)&4294967295); //@line 5291 "xmlparse.c"
        var $91=(($90+16)&4294967295); //@line 5291 "xmlparse.c"
        var $92=HEAP[$91]; //@line 5291 "xmlparse.c"
        var $93=HEAP[$dtd]; //@line 5291 "xmlparse.c"
        var $94=(($93+80)&4294967295); //@line 5291 "xmlparse.c"
        var $95=(($94+12)&4294967295); //@line 5291 "xmlparse.c"
        HEAP[$95]=$92; //@line 5291 "xmlparse.c"
        __label__ = 22; break; //@line 5291 "xmlparse.c"
      case 22: // $bb22
        var $96=HEAP[$elementType_addr]; //@line 5292 "xmlparse.c"
        var $97=(($96+4)&4294967295); //@line 5292 "xmlparse.c"
        var $98=HEAP[$prefix]; //@line 5292 "xmlparse.c"
        HEAP[$97]=$98; //@line 5292 "xmlparse.c"
        __label__ = 23; break; //@line 5292 "xmlparse.c"
      case 23: // $bb23
        var $99=HEAP[$name]; //@line 5274 "xmlparse.c"
        var $100=(($99+1)&4294967295); //@line 5274 "xmlparse.c"
        HEAP[$name]=$100; //@line 5274 "xmlparse.c"
        __label__ = 24; break; //@line 5274 "xmlparse.c"
      case 24: // $bb24
        var $101=HEAP[$name]; //@line 5274 "xmlparse.c"
        var $102=HEAP[$101]; //@line 5274 "xmlparse.c"
        var $103=reSign(($102), 8, 0)!=0; //@line 5274 "xmlparse.c"
        if ($103) { __label__ = 1; break; } else { __label__ = 25; break; } //@line 5274 "xmlparse.c"
      case 25: // $bb25
        HEAP[$0]=1; //@line 5296 "xmlparse.c"
        __label__ = 26; break; //@line 5296 "xmlparse.c"
      case 26: // $bb26
        var $104=HEAP[$0]; //@line 5280 "xmlparse.c"
        HEAP[$retval]=$104; //@line 5280 "xmlparse.c"
        __label__ = 27; break; //@line 5280 "xmlparse.c"
      case 27: // $return
        var $retval27=HEAP[$retval]; //@line 5280 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval27; //@line 5280 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _getAttributeId($parser, $enc, $start, $end) {
    var __stackBase__  = STACKTOP; STACKTOP += 47; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 47);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $enc_addr=__stackBase__+4;
        var $start_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_258=__stackBase__+20;
        var $iftmp_257=__stackBase__+21;
        var $0=__stackBase__+22;
        var $iftmp_256=__stackBase__+26;
        var $dtd=__stackBase__+27;
        var $id=__stackBase__+31;
        var $name=__stackBase__+35;
        var $i=__stackBase__+39;
        var $j=__stackBase__+43;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$enc_addr]=$enc;
        HEAP[$start_addr]=$start;
        HEAP[$end_addr]=$end;
        var $1=HEAP[$parser_addr]; //@line 5303 "xmlparse.c"
        var $2=(($1+340)&4294967295); //@line 5303 "xmlparse.c"
        var $3=HEAP[$2]; //@line 5303 "xmlparse.c"
        HEAP[$dtd]=$3; //@line 5303 "xmlparse.c"
        var $4=HEAP[$dtd]; //@line 5306 "xmlparse.c"
        var $5=(($4+80)&4294967295); //@line 5306 "xmlparse.c"
        var $6=(($5+12)&4294967295); //@line 5306 "xmlparse.c"
        var $7=HEAP[$6]; //@line 5306 "xmlparse.c"
        var $8=HEAP[$dtd]; //@line 5306 "xmlparse.c"
        var $9=(($8+80)&4294967295); //@line 5306 "xmlparse.c"
        var $10=(($9+8)&4294967295); //@line 5306 "xmlparse.c"
        var $11=HEAP[$10]; //@line 5306 "xmlparse.c"
        var $12=($7)!=($11); //@line 5306 "xmlparse.c"
        if ($12) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 5306 "xmlparse.c"
      case 1: // $bb
        var $13=HEAP[$dtd]; //@line 5306 "xmlparse.c"
        var $14=(($13+80)&4294967295); //@line 5306 "xmlparse.c"
        var $15=_poolGrow($14); //@line 5306 "xmlparse.c"
        var $16=reSign(($15), 8, 0)!=0; //@line 5306 "xmlparse.c"
        if ($16) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 5306 "xmlparse.c"
      case 2: // $bb1
        var $17=HEAP[$dtd]; //@line 5306 "xmlparse.c"
        var $18=(($17+80)&4294967295); //@line 5306 "xmlparse.c"
        var $19=(($18+12)&4294967295); //@line 5306 "xmlparse.c"
        var $20=HEAP[$19]; //@line 5306 "xmlparse.c"
        HEAP[$20]=0; //@line 5306 "xmlparse.c"
        var $21=(($20+1)&4294967295); //@line 5306 "xmlparse.c"
        var $22=HEAP[$dtd]; //@line 5306 "xmlparse.c"
        var $23=(($22+80)&4294967295); //@line 5306 "xmlparse.c"
        var $24=(($23+12)&4294967295); //@line 5306 "xmlparse.c"
        HEAP[$24]=$21; //@line 5306 "xmlparse.c"
        HEAP[$iftmp_256]=0; //@line 5306 "xmlparse.c"
        __label__ = 4; break; //@line 5306 "xmlparse.c"
      case 3: // $bb2
        HEAP[$iftmp_256]=1; //@line 5306 "xmlparse.c"
        __label__ = 4; break; //@line 5306 "xmlparse.c"
      case 4: // $bb3
        var $25=HEAP[$iftmp_256]; //@line 5306 "xmlparse.c"
        var $toBool=reSign(($25), 8, 0)!=0; //@line 5306 "xmlparse.c"
        if ($toBool) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5306 "xmlparse.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 5307 "xmlparse.c"
        __label__ = 50; break; //@line 5307 "xmlparse.c"
      case 6: // $bb5
        var $26=HEAP[$dtd]; //@line 5308 "xmlparse.c"
        var $27=(($26+80)&4294967295); //@line 5308 "xmlparse.c"
        var $28=HEAP[$enc_addr]; //@line 5308 "xmlparse.c"
        var $29=HEAP[$start_addr]; //@line 5308 "xmlparse.c"
        var $30=HEAP[$end_addr]; //@line 5308 "xmlparse.c"
        var $31=_poolStoreString($27, $28, $29, $30); //@line 5308 "xmlparse.c"
        HEAP[$name]=$31; //@line 5308 "xmlparse.c"
        var $32=HEAP[$name]; //@line 5309 "xmlparse.c"
        var $33=($32)==0; //@line 5309 "xmlparse.c"
        if ($33) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 5309 "xmlparse.c"
      case 7: // $bb6
        HEAP[$0]=0; //@line 5310 "xmlparse.c"
        __label__ = 50; break; //@line 5310 "xmlparse.c"
      case 8: // $bb7
        var $34=HEAP[$name]; //@line 5312 "xmlparse.c"
        var $35=(($34+1)&4294967295); //@line 5312 "xmlparse.c"
        HEAP[$name]=$35; //@line 5312 "xmlparse.c"
        var $36=HEAP[$dtd]; //@line 5313 "xmlparse.c"
        var $37=(($36+40)&4294967295); //@line 5313 "xmlparse.c"
        var $38=HEAP[$name]; //@line 5313 "xmlparse.c"
        var $39=_lookup($37, $38, 12); //@line 5313 "xmlparse.c"
        var $40=$39; //@line 5313 "xmlparse.c"
        HEAP[$id]=$40; //@line 5313 "xmlparse.c"
        var $41=HEAP[$id]; //@line 5314 "xmlparse.c"
        var $42=($41)==0; //@line 5314 "xmlparse.c"
        if ($42) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 5314 "xmlparse.c"
      case 9: // $bb8
        HEAP[$0]=0; //@line 5315 "xmlparse.c"
        __label__ = 50; break; //@line 5315 "xmlparse.c"
      case 10: // $bb9
        var $43=HEAP[$id]; //@line 5316 "xmlparse.c"
        var $44=(($43)&4294967295); //@line 5316 "xmlparse.c"
        var $45=HEAP[$44]; //@line 5316 "xmlparse.c"
        var $46=HEAP[$name]; //@line 5316 "xmlparse.c"
        var $47=($45)!=($46); //@line 5316 "xmlparse.c"
        if ($47) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 5316 "xmlparse.c"
      case 11: // $bb10
        var $48=HEAP[$dtd]; //@line 5317 "xmlparse.c"
        var $49=(($48+80)&4294967295); //@line 5317 "xmlparse.c"
        var $50=(($49+16)&4294967295); //@line 5317 "xmlparse.c"
        var $51=HEAP[$50]; //@line 5317 "xmlparse.c"
        var $52=HEAP[$dtd]; //@line 5317 "xmlparse.c"
        var $53=(($52+80)&4294967295); //@line 5317 "xmlparse.c"
        var $54=(($53+12)&4294967295); //@line 5317 "xmlparse.c"
        HEAP[$54]=$51; //@line 5317 "xmlparse.c"
        __label__ = 49; break; //@line 5317 "xmlparse.c"
      case 12: // $bb11
        var $55=HEAP[$dtd]; //@line 5319 "xmlparse.c"
        var $56=(($55+80)&4294967295); //@line 5319 "xmlparse.c"
        var $57=(($56+12)&4294967295); //@line 5319 "xmlparse.c"
        var $58=HEAP[$57]; //@line 5319 "xmlparse.c"
        var $59=HEAP[$dtd]; //@line 5319 "xmlparse.c"
        var $60=(($59+80)&4294967295); //@line 5319 "xmlparse.c"
        var $61=(($60+16)&4294967295); //@line 5319 "xmlparse.c"
        HEAP[$61]=$58; //@line 5319 "xmlparse.c"
        var $62=HEAP[$parser_addr]; //@line 5320 "xmlparse.c"
        var $63=(($62+232)&4294967295); //@line 5320 "xmlparse.c"
        var $64=HEAP[$63]; //@line 5320 "xmlparse.c"
        var $65=reSign(($64), 8, 0)!=0; //@line 5320 "xmlparse.c"
        if ($65) { __label__ = 13; break; } else { __label__ = 49; break; } //@line 5320 "xmlparse.c"
      case 13: // $bb12
        var $66=HEAP[$name]; //@line 5322 "xmlparse.c"
        var $67=(($66)&4294967295); //@line 5322 "xmlparse.c"
        var $68=HEAP[$67]; //@line 5322 "xmlparse.c"
        var $69=reSign(($68), 8, 0)!=120; //@line 5322 "xmlparse.c"
        if ($69) { __label__ = 24; break; } else { __label__ = 14; break; } //@line 5322 "xmlparse.c"
      case 14: // $bb13
        var $70=HEAP[$name]; //@line 5322 "xmlparse.c"
        var $71=(($70+1)&4294967295); //@line 5322 "xmlparse.c"
        var $72=HEAP[$71]; //@line 5322 "xmlparse.c"
        var $73=reSign(($72), 8, 0)!=109; //@line 5322 "xmlparse.c"
        if ($73) { __label__ = 24; break; } else { __label__ = 15; break; } //@line 5322 "xmlparse.c"
      case 15: // $bb14
        var $74=HEAP[$name]; //@line 5322 "xmlparse.c"
        var $75=(($74+2)&4294967295); //@line 5322 "xmlparse.c"
        var $76=HEAP[$75]; //@line 5322 "xmlparse.c"
        var $77=reSign(($76), 8, 0)!=108; //@line 5322 "xmlparse.c"
        if ($77) { __label__ = 24; break; } else { __label__ = 16; break; } //@line 5322 "xmlparse.c"
      case 16: // $bb15
        var $78=HEAP[$name]; //@line 5322 "xmlparse.c"
        var $79=(($78+3)&4294967295); //@line 5322 "xmlparse.c"
        var $80=HEAP[$79]; //@line 5322 "xmlparse.c"
        var $81=reSign(($80), 8, 0)!=110; //@line 5322 "xmlparse.c"
        if ($81) { __label__ = 24; break; } else { __label__ = 17; break; } //@line 5322 "xmlparse.c"
      case 17: // $bb16
        var $82=HEAP[$name]; //@line 5322 "xmlparse.c"
        var $83=(($82+4)&4294967295); //@line 5322 "xmlparse.c"
        var $84=HEAP[$83]; //@line 5322 "xmlparse.c"
        var $85=reSign(($84), 8, 0)!=115; //@line 5322 "xmlparse.c"
        if ($85) { __label__ = 24; break; } else { __label__ = 18; break; } //@line 5322 "xmlparse.c"
      case 18: // $bb17
        var $86=HEAP[$name]; //@line 5322 "xmlparse.c"
        var $87=(($86+5)&4294967295); //@line 5322 "xmlparse.c"
        var $88=HEAP[$87]; //@line 5322 "xmlparse.c"
        var $89=reSign(($88), 8, 0)==0; //@line 5322 "xmlparse.c"
        if ($89) { __label__ = 20; break; } else { __label__ = 19; break; } //@line 5322 "xmlparse.c"
      case 19: // $bb18
        var $90=HEAP[$name]; //@line 5322 "xmlparse.c"
        var $91=(($90+5)&4294967295); //@line 5322 "xmlparse.c"
        var $92=HEAP[$91]; //@line 5322 "xmlparse.c"
        var $93=reSign(($92), 8, 0)==58; //@line 5322 "xmlparse.c"
        if ($93) { __label__ = 20; break; } else { __label__ = 24; break; } //@line 5322 "xmlparse.c"
      case 20: // $bb19
        var $94=HEAP[$name]; //@line 5328 "xmlparse.c"
        var $95=(($94+5)&4294967295); //@line 5328 "xmlparse.c"
        var $96=HEAP[$95]; //@line 5328 "xmlparse.c"
        var $97=reSign(($96), 8, 0)==0; //@line 5328 "xmlparse.c"
        if ($97) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 5328 "xmlparse.c"
      case 21: // $bb20
        var $98=HEAP[$dtd]; //@line 5329 "xmlparse.c"
        var $99=(($98+132)&4294967295); //@line 5329 "xmlparse.c"
        var $100=HEAP[$id]; //@line 5329 "xmlparse.c"
        var $101=(($100+4)&4294967295); //@line 5329 "xmlparse.c"
        HEAP[$101]=$99; //@line 5329 "xmlparse.c"
        __label__ = 23; break; //@line 5329 "xmlparse.c"
      case 22: // $bb21
        var $102=HEAP[$name]; //@line 5331 "xmlparse.c"
        var $103=(($102+6)&4294967295); //@line 5331 "xmlparse.c"
        var $104=HEAP[$dtd]; //@line 5331 "xmlparse.c"
        var $105=(($104+60)&4294967295); //@line 5331 "xmlparse.c"
        var $106=_lookup($105, $103, 8); //@line 5331 "xmlparse.c"
        var $107=$106; //@line 5331 "xmlparse.c"
        var $108=HEAP[$id]; //@line 5331 "xmlparse.c"
        var $109=(($108+4)&4294967295); //@line 5331 "xmlparse.c"
        HEAP[$109]=$107; //@line 5331 "xmlparse.c"
        __label__ = 23; break; //@line 5331 "xmlparse.c"
      case 23: // $bb22
        var $110=HEAP[$id]; //@line 5332 "xmlparse.c"
        var $111=(($110+9)&4294967295); //@line 5332 "xmlparse.c"
        HEAP[$111]=1; //@line 5332 "xmlparse.c"
        __label__ = 49; break; //@line 5332 "xmlparse.c"
      case 24: // $bb23
        HEAP[$i]=0; //@line 5336 "xmlparse.c"
        __label__ = 48; break; //@line 5336 "xmlparse.c"
      case 25: // $bb24
        var $112=HEAP[$name]; //@line 5338 "xmlparse.c"
        var $113=HEAP[$i]; //@line 5338 "xmlparse.c"
        var $114=(($112+$113)&4294967295); //@line 5338 "xmlparse.c"
        var $115=HEAP[$114]; //@line 5338 "xmlparse.c"
        var $116=reSign(($115), 8, 0)==58; //@line 5338 "xmlparse.c"
        if ($116) { __label__ = 26; break; } else { __label__ = 47; break; } //@line 5338 "xmlparse.c"
      case 26: // $bb25
        HEAP[$j]=0; //@line 5340 "xmlparse.c"
        __label__ = 34; break; //@line 5340 "xmlparse.c"
      case 27: // $bb26
        var $117=HEAP[$dtd]; //@line 5341 "xmlparse.c"
        var $118=(($117+80)&4294967295); //@line 5341 "xmlparse.c"
        var $119=(($118+12)&4294967295); //@line 5341 "xmlparse.c"
        var $120=HEAP[$119]; //@line 5341 "xmlparse.c"
        var $121=HEAP[$dtd]; //@line 5341 "xmlparse.c"
        var $122=(($121+80)&4294967295); //@line 5341 "xmlparse.c"
        var $123=(($122+8)&4294967295); //@line 5341 "xmlparse.c"
        var $124=HEAP[$123]; //@line 5341 "xmlparse.c"
        var $125=($120)!=($124); //@line 5341 "xmlparse.c"
        if ($125) { __label__ = 29; break; } else { __label__ = 28; break; } //@line 5341 "xmlparse.c"
      case 28: // $bb27
        var $126=HEAP[$dtd]; //@line 5341 "xmlparse.c"
        var $127=(($126+80)&4294967295); //@line 5341 "xmlparse.c"
        var $128=_poolGrow($127); //@line 5341 "xmlparse.c"
        var $129=reSign(($128), 8, 0)!=0; //@line 5341 "xmlparse.c"
        if ($129) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 5341 "xmlparse.c"
      case 29: // $bb28
        var $130=HEAP[$dtd]; //@line 5341 "xmlparse.c"
        var $131=(($130+80)&4294967295); //@line 5341 "xmlparse.c"
        var $132=(($131+12)&4294967295); //@line 5341 "xmlparse.c"
        var $133=HEAP[$132]; //@line 5341 "xmlparse.c"
        var $134=HEAP[$name]; //@line 5341 "xmlparse.c"
        var $135=HEAP[$j]; //@line 5341 "xmlparse.c"
        var $136=(($134+$135)&4294967295); //@line 5341 "xmlparse.c"
        var $137=HEAP[$136]; //@line 5341 "xmlparse.c"
        HEAP[$133]=$137; //@line 5341 "xmlparse.c"
        var $138=(($133+1)&4294967295); //@line 5341 "xmlparse.c"
        var $139=HEAP[$dtd]; //@line 5341 "xmlparse.c"
        var $140=(($139+80)&4294967295); //@line 5341 "xmlparse.c"
        var $141=(($140+12)&4294967295); //@line 5341 "xmlparse.c"
        HEAP[$141]=$138; //@line 5341 "xmlparse.c"
        HEAP[$iftmp_257]=0; //@line 5341 "xmlparse.c"
        __label__ = 31; break; //@line 5341 "xmlparse.c"
      case 30: // $bb29
        HEAP[$iftmp_257]=1; //@line 5341 "xmlparse.c"
        __label__ = 31; break; //@line 5341 "xmlparse.c"
      case 31: // $bb30
        var $142=HEAP[$iftmp_257]; //@line 5341 "xmlparse.c"
        var $toBool31=reSign(($142), 8, 0)!=0; //@line 5341 "xmlparse.c"
        if ($toBool31) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 5341 "xmlparse.c"
      case 32: // $bb32
        HEAP[$0]=0; //@line 5342 "xmlparse.c"
        __label__ = 50; break; //@line 5342 "xmlparse.c"
      case 33: // $bb33
        var $143=HEAP[$j]; //@line 5340 "xmlparse.c"
        var $144=((($143) + 1)&4294967295); //@line 5340 "xmlparse.c"
        HEAP[$j]=$144; //@line 5340 "xmlparse.c"
        __label__ = 34; break; //@line 5340 "xmlparse.c"
      case 34: // $bb34
        var $145=HEAP[$j]; //@line 5340 "xmlparse.c"
        var $146=HEAP[$i]; //@line 5340 "xmlparse.c"
        var $147=((($145))|0) < ((($146))|0); //@line 5340 "xmlparse.c"
        if ($147) { __label__ = 27; break; } else { __label__ = 35; break; } //@line 5340 "xmlparse.c"
      case 35: // $bb35
        var $148=HEAP[$dtd]; //@line 5344 "xmlparse.c"
        var $149=(($148+80)&4294967295); //@line 5344 "xmlparse.c"
        var $150=(($149+12)&4294967295); //@line 5344 "xmlparse.c"
        var $151=HEAP[$150]; //@line 5344 "xmlparse.c"
        var $152=HEAP[$dtd]; //@line 5344 "xmlparse.c"
        var $153=(($152+80)&4294967295); //@line 5344 "xmlparse.c"
        var $154=(($153+8)&4294967295); //@line 5344 "xmlparse.c"
        var $155=HEAP[$154]; //@line 5344 "xmlparse.c"
        var $156=($151)!=($155); //@line 5344 "xmlparse.c"
        if ($156) { __label__ = 37; break; } else { __label__ = 36; break; } //@line 5344 "xmlparse.c"
      case 36: // $bb36
        var $157=HEAP[$dtd]; //@line 5344 "xmlparse.c"
        var $158=(($157+80)&4294967295); //@line 5344 "xmlparse.c"
        var $159=_poolGrow($158); //@line 5344 "xmlparse.c"
        var $160=reSign(($159), 8, 0)!=0; //@line 5344 "xmlparse.c"
        if ($160) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 5344 "xmlparse.c"
      case 37: // $bb37
        var $161=HEAP[$dtd]; //@line 5344 "xmlparse.c"
        var $162=(($161+80)&4294967295); //@line 5344 "xmlparse.c"
        var $163=(($162+12)&4294967295); //@line 5344 "xmlparse.c"
        var $164=HEAP[$163]; //@line 5344 "xmlparse.c"
        HEAP[$164]=0; //@line 5344 "xmlparse.c"
        var $165=(($164+1)&4294967295); //@line 5344 "xmlparse.c"
        var $166=HEAP[$dtd]; //@line 5344 "xmlparse.c"
        var $167=(($166+80)&4294967295); //@line 5344 "xmlparse.c"
        var $168=(($167+12)&4294967295); //@line 5344 "xmlparse.c"
        HEAP[$168]=$165; //@line 5344 "xmlparse.c"
        HEAP[$iftmp_258]=0; //@line 5344 "xmlparse.c"
        __label__ = 39; break; //@line 5344 "xmlparse.c"
      case 38: // $bb38
        HEAP[$iftmp_258]=1; //@line 5344 "xmlparse.c"
        __label__ = 39; break; //@line 5344 "xmlparse.c"
      case 39: // $bb39
        var $169=HEAP[$iftmp_258]; //@line 5344 "xmlparse.c"
        var $toBool40=reSign(($169), 8, 0)!=0; //@line 5344 "xmlparse.c"
        if ($toBool40) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 5344 "xmlparse.c"
      case 40: // $bb41
        HEAP[$0]=0; //@line 5345 "xmlparse.c"
        __label__ = 50; break; //@line 5345 "xmlparse.c"
      case 41: // $bb42
        var $170=HEAP[$dtd]; //@line 5346 "xmlparse.c"
        var $171=(($170+80)&4294967295); //@line 5346 "xmlparse.c"
        var $172=(($171+16)&4294967295); //@line 5346 "xmlparse.c"
        var $173=HEAP[$172]; //@line 5346 "xmlparse.c"
        var $174=HEAP[$dtd]; //@line 5346 "xmlparse.c"
        var $175=(($174+60)&4294967295); //@line 5346 "xmlparse.c"
        var $176=_lookup($175, $173, 8); //@line 5346 "xmlparse.c"
        var $177=$176; //@line 5346 "xmlparse.c"
        var $178=HEAP[$id]; //@line 5346 "xmlparse.c"
        var $179=(($178+4)&4294967295); //@line 5346 "xmlparse.c"
        HEAP[$179]=$177; //@line 5346 "xmlparse.c"
        var $180=HEAP[$id]; //@line 5348 "xmlparse.c"
        var $181=(($180+4)&4294967295); //@line 5348 "xmlparse.c"
        var $182=HEAP[$181]; //@line 5348 "xmlparse.c"
        var $183=($182)==0; //@line 5348 "xmlparse.c"
        if ($183) { __label__ = 42; break; } else { __label__ = 43; break; } //@line 5348 "xmlparse.c"
      case 42: // $bb43
        HEAP[$0]=0; //@line 5349 "xmlparse.c"
        __label__ = 50; break; //@line 5349 "xmlparse.c"
      case 43: // $bb44
        var $184=HEAP[$id]; //@line 5350 "xmlparse.c"
        var $185=(($184+4)&4294967295); //@line 5350 "xmlparse.c"
        var $186=HEAP[$185]; //@line 5350 "xmlparse.c"
        var $187=(($186)&4294967295); //@line 5350 "xmlparse.c"
        var $188=HEAP[$187]; //@line 5350 "xmlparse.c"
        var $189=HEAP[$dtd]; //@line 5350 "xmlparse.c"
        var $190=(($189+80)&4294967295); //@line 5350 "xmlparse.c"
        var $191=(($190+16)&4294967295); //@line 5350 "xmlparse.c"
        var $192=HEAP[$191]; //@line 5350 "xmlparse.c"
        var $193=($188)==($192); //@line 5350 "xmlparse.c"
        if ($193) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 5350 "xmlparse.c"
      case 44: // $bb45
        var $194=HEAP[$dtd]; //@line 5351 "xmlparse.c"
        var $195=(($194+80)&4294967295); //@line 5351 "xmlparse.c"
        var $196=(($195+12)&4294967295); //@line 5351 "xmlparse.c"
        var $197=HEAP[$196]; //@line 5351 "xmlparse.c"
        var $198=HEAP[$dtd]; //@line 5351 "xmlparse.c"
        var $199=(($198+80)&4294967295); //@line 5351 "xmlparse.c"
        var $200=(($199+16)&4294967295); //@line 5351 "xmlparse.c"
        HEAP[$200]=$197; //@line 5351 "xmlparse.c"
        __label__ = 46; break; //@line 5351 "xmlparse.c"
      case 45: // $bb46
        var $201=HEAP[$dtd]; //@line 5353 "xmlparse.c"
        var $202=(($201+80)&4294967295); //@line 5353 "xmlparse.c"
        var $203=(($202+16)&4294967295); //@line 5353 "xmlparse.c"
        var $204=HEAP[$203]; //@line 5353 "xmlparse.c"
        var $205=HEAP[$dtd]; //@line 5353 "xmlparse.c"
        var $206=(($205+80)&4294967295); //@line 5353 "xmlparse.c"
        var $207=(($206+12)&4294967295); //@line 5353 "xmlparse.c"
        HEAP[$207]=$204; //@line 5353 "xmlparse.c"
        __label__ = 46; break; //@line 5353 "xmlparse.c"
      case 46: // $bb47
        __label__ = 49; break; //@line 5353 "xmlparse.c"
      case 47: // $bb48
        var $208=HEAP[$i]; //@line 5336 "xmlparse.c"
        var $209=((($208) + 1)&4294967295); //@line 5336 "xmlparse.c"
        HEAP[$i]=$209; //@line 5336 "xmlparse.c"
        __label__ = 48; break; //@line 5336 "xmlparse.c"
      case 48: // $bb49
        var $210=HEAP[$name]; //@line 5336 "xmlparse.c"
        var $211=HEAP[$i]; //@line 5336 "xmlparse.c"
        var $212=(($210+$211)&4294967295); //@line 5336 "xmlparse.c"
        var $213=HEAP[$212]; //@line 5336 "xmlparse.c"
        var $214=reSign(($213), 8, 0)!=0; //@line 5336 "xmlparse.c"
        if ($214) { __label__ = 25; break; } else { __label__ = 49; break; } //@line 5336 "xmlparse.c"
      case 49: // $bb50
        var $215=HEAP[$id]; //@line 5359 "xmlparse.c"
        HEAP[$0]=$215; //@line 5359 "xmlparse.c"
        __label__ = 50; break; //@line 5359 "xmlparse.c"
      case 50: // $bb51
        var $216=HEAP[$0]; //@line 5307 "xmlparse.c"
        HEAP[$retval]=$216; //@line 5307 "xmlparse.c"
        __label__ = 51; break; //@line 5307 "xmlparse.c"
      case 51: // $return
        var $retval52=HEAP[$retval]; //@line 5307 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval52; //@line 5307 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _getContext($parser) {
    var __stackBase__  = STACKTOP; STACKTOP += 66; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 66);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $iftmp_267=__stackBase__+8;
        var $iftmp_266=__stackBase__+9;
        var $iftmp_265=__stackBase__+10;
        var $iftmp_264=__stackBase__+11;
        var $iftmp_263=__stackBase__+12;
        var $iftmp_262=__stackBase__+13;
        var $iftmp_261=__stackBase__+14;
        var $iftmp_260=__stackBase__+15;
        var $0=__stackBase__+16;
        var $iftmp_259=__stackBase__+20;
        var $dtd=__stackBase__+21;
        var $iter=__stackBase__+25;
        var $needSep=__stackBase__+33;
        var $i=__stackBase__+34;
        var $len=__stackBase__+38;
        var $i21=__stackBase__+42;
        var $len22=__stackBase__+46;
        var $s=__stackBase__+50;
        var $prefix=__stackBase__+54;
        var $s65=__stackBase__+58;
        var $e=__stackBase__+62;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        var $1=HEAP[$parser_addr]; //@line 5367 "xmlparse.c"
        var $2=(($1+340)&4294967295); //@line 5367 "xmlparse.c"
        var $3=HEAP[$2]; //@line 5367 "xmlparse.c"
        HEAP[$dtd]=$3; //@line 5367 "xmlparse.c"
        HEAP[$needSep]=0; //@line 5369 "xmlparse.c"
        var $4=HEAP[$dtd]; //@line 5371 "xmlparse.c"
        var $5=(($4+132)&4294967295); //@line 5371 "xmlparse.c"
        var $6=(($5+4)&4294967295); //@line 5371 "xmlparse.c"
        var $7=HEAP[$6]; //@line 5371 "xmlparse.c"
        var $8=($7)!=0; //@line 5371 "xmlparse.c"
        if ($8) { __label__ = 1; break; } else { __label__ = 19; break; } //@line 5371 "xmlparse.c"
      case 1: // $bb
        var $9=HEAP[$parser_addr]; //@line 5374 "xmlparse.c"
        var $10=(($9+400)&4294967295); //@line 5374 "xmlparse.c"
        var $11=(($10+12)&4294967295); //@line 5374 "xmlparse.c"
        var $12=HEAP[$11]; //@line 5374 "xmlparse.c"
        var $13=HEAP[$parser_addr]; //@line 5374 "xmlparse.c"
        var $14=(($13+400)&4294967295); //@line 5374 "xmlparse.c"
        var $15=(($14+8)&4294967295); //@line 5374 "xmlparse.c"
        var $16=HEAP[$15]; //@line 5374 "xmlparse.c"
        var $17=($12)!=($16); //@line 5374 "xmlparse.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 5374 "xmlparse.c"
      case 2: // $bb1
        var $18=HEAP[$parser_addr]; //@line 5374 "xmlparse.c"
        var $19=(($18+400)&4294967295); //@line 5374 "xmlparse.c"
        var $20=_poolGrow($19); //@line 5374 "xmlparse.c"
        var $21=reSign(($20), 8, 0)!=0; //@line 5374 "xmlparse.c"
        if ($21) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 5374 "xmlparse.c"
      case 3: // $bb2
        var $22=HEAP[$parser_addr]; //@line 5374 "xmlparse.c"
        var $23=(($22+400)&4294967295); //@line 5374 "xmlparse.c"
        var $24=(($23+12)&4294967295); //@line 5374 "xmlparse.c"
        var $25=HEAP[$24]; //@line 5374 "xmlparse.c"
        HEAP[$25]=61; //@line 5374 "xmlparse.c"
        var $26=(($25+1)&4294967295); //@line 5374 "xmlparse.c"
        var $27=HEAP[$parser_addr]; //@line 5374 "xmlparse.c"
        var $28=(($27+400)&4294967295); //@line 5374 "xmlparse.c"
        var $29=(($28+12)&4294967295); //@line 5374 "xmlparse.c"
        HEAP[$29]=$26; //@line 5374 "xmlparse.c"
        HEAP[$iftmp_259]=0; //@line 5374 "xmlparse.c"
        __label__ = 5; break; //@line 5374 "xmlparse.c"
      case 4: // $bb3
        HEAP[$iftmp_259]=1; //@line 5374 "xmlparse.c"
        __label__ = 5; break; //@line 5374 "xmlparse.c"
      case 5: // $bb4
        var $30=HEAP[$iftmp_259]; //@line 5374 "xmlparse.c"
        var $toBool=reSign(($30), 8, 0)!=0; //@line 5374 "xmlparse.c"
        if ($toBool) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 5374 "xmlparse.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 5375 "xmlparse.c"
        __label__ = 85; break; //@line 5375 "xmlparse.c"
      case 7: // $bb6
        var $31=HEAP[$dtd]; //@line 5376 "xmlparse.c"
        var $32=(($31+132)&4294967295); //@line 5376 "xmlparse.c"
        var $33=(($32+4)&4294967295); //@line 5376 "xmlparse.c"
        var $34=HEAP[$33]; //@line 5376 "xmlparse.c"
        var $35=(($34+20)&4294967295); //@line 5376 "xmlparse.c"
        var $36=HEAP[$35]; //@line 5376 "xmlparse.c"
        HEAP[$len]=$36; //@line 5376 "xmlparse.c"
        var $37=HEAP[$parser_addr]; //@line 5377 "xmlparse.c"
        var $38=(($37+456)&4294967295); //@line 5377 "xmlparse.c"
        var $39=HEAP[$38]; //@line 5377 "xmlparse.c"
        var $40=reSign(($39), 8, 0)!=0; //@line 5377 "xmlparse.c"
        if ($40) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 5377 "xmlparse.c"
      case 8: // $bb7
        var $41=HEAP[$len]; //@line 5378 "xmlparse.c"
        var $42=((($41) - 1)&4294967295); //@line 5378 "xmlparse.c"
        HEAP[$len]=$42; //@line 5378 "xmlparse.c"
        __label__ = 9; break; //@line 5378 "xmlparse.c"
      case 9: // $bb8
        HEAP[$i]=0; //@line 5379 "xmlparse.c"
        __label__ = 17; break; //@line 5379 "xmlparse.c"
      case 10: // $bb9
        var $43=HEAP[$parser_addr]; //@line 5380 "xmlparse.c"
        var $44=(($43+400)&4294967295); //@line 5380 "xmlparse.c"
        var $45=(($44+12)&4294967295); //@line 5380 "xmlparse.c"
        var $46=HEAP[$45]; //@line 5380 "xmlparse.c"
        var $47=HEAP[$parser_addr]; //@line 5380 "xmlparse.c"
        var $48=(($47+400)&4294967295); //@line 5380 "xmlparse.c"
        var $49=(($48+8)&4294967295); //@line 5380 "xmlparse.c"
        var $50=HEAP[$49]; //@line 5380 "xmlparse.c"
        var $51=($46)!=($50); //@line 5380 "xmlparse.c"
        if ($51) { __label__ = 12; break; } else { __label__ = 11; break; } //@line 5380 "xmlparse.c"
      case 11: // $bb10
        var $52=HEAP[$parser_addr]; //@line 5380 "xmlparse.c"
        var $53=(($52+400)&4294967295); //@line 5380 "xmlparse.c"
        var $54=_poolGrow($53); //@line 5380 "xmlparse.c"
        var $55=reSign(($54), 8, 0)!=0; //@line 5380 "xmlparse.c"
        if ($55) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 5380 "xmlparse.c"
      case 12: // $bb11
        var $56=HEAP[$parser_addr]; //@line 5380 "xmlparse.c"
        var $57=(($56+400)&4294967295); //@line 5380 "xmlparse.c"
        var $58=(($57+12)&4294967295); //@line 5380 "xmlparse.c"
        var $59=HEAP[$58]; //@line 5380 "xmlparse.c"
        var $60=HEAP[$dtd]; //@line 5380 "xmlparse.c"
        var $61=(($60+132)&4294967295); //@line 5380 "xmlparse.c"
        var $62=(($61+4)&4294967295); //@line 5380 "xmlparse.c"
        var $63=HEAP[$62]; //@line 5380 "xmlparse.c"
        var $64=(($63+16)&4294967295); //@line 5380 "xmlparse.c"
        var $65=HEAP[$64]; //@line 5380 "xmlparse.c"
        var $66=HEAP[$i]; //@line 5380 "xmlparse.c"
        var $67=(($65+$66)&4294967295); //@line 5380 "xmlparse.c"
        var $68=HEAP[$67]; //@line 5380 "xmlparse.c"
        HEAP[$59]=$68; //@line 5380 "xmlparse.c"
        var $69=(($59+1)&4294967295); //@line 5380 "xmlparse.c"
        var $70=HEAP[$parser_addr]; //@line 5380 "xmlparse.c"
        var $71=(($70+400)&4294967295); //@line 5380 "xmlparse.c"
        var $72=(($71+12)&4294967295); //@line 5380 "xmlparse.c"
        HEAP[$72]=$69; //@line 5380 "xmlparse.c"
        HEAP[$iftmp_260]=0; //@line 5380 "xmlparse.c"
        __label__ = 14; break; //@line 5380 "xmlparse.c"
      case 13: // $bb12
        HEAP[$iftmp_260]=1; //@line 5380 "xmlparse.c"
        __label__ = 14; break; //@line 5380 "xmlparse.c"
      case 14: // $bb13
        var $73=HEAP[$iftmp_260]; //@line 5380 "xmlparse.c"
        var $toBool14=reSign(($73), 8, 0)!=0; //@line 5380 "xmlparse.c"
        if ($toBool14) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 5380 "xmlparse.c"
      case 15: // $bb15
        HEAP[$0]=0; //@line 5381 "xmlparse.c"
        __label__ = 85; break; //@line 5381 "xmlparse.c"
      case 16: // $bb16
        var $74=HEAP[$i]; //@line 5379 "xmlparse.c"
        var $75=((($74) + 1)&4294967295); //@line 5379 "xmlparse.c"
        HEAP[$i]=$75; //@line 5379 "xmlparse.c"
        __label__ = 17; break; //@line 5379 "xmlparse.c"
      case 17: // $bb17
        var $76=HEAP[$i]; //@line 5379 "xmlparse.c"
        var $77=HEAP[$len]; //@line 5379 "xmlparse.c"
        var $78=((($76))|0) < ((($77))|0); //@line 5379 "xmlparse.c"
        if ($78) { __label__ = 10; break; } else { __label__ = 18; break; } //@line 5379 "xmlparse.c"
      case 18: // $bb18
        HEAP[$needSep]=1; //@line 5382 "xmlparse.c"
        __label__ = 19; break; //@line 5382 "xmlparse.c"
      case 19: // $bb19
        var $79=HEAP[$dtd]; //@line 5385 "xmlparse.c"
        var $80=(($79+60)&4294967295); //@line 5385 "xmlparse.c"
        _hashTableIterInit($iter, $80); //@line 5385 "xmlparse.c"
        __label__ = 20; break; //@line 5385 "xmlparse.c"
      case 20: // $bb20
        var $81=_hashTableIterNext($iter); //@line 5390 "xmlparse.c"
        var $82=$81; //@line 5390 "xmlparse.c"
        HEAP[$prefix]=$82; //@line 5390 "xmlparse.c"
        var $83=HEAP[$prefix]; //@line 5391 "xmlparse.c"
        var $84=($83)==0; //@line 5391 "xmlparse.c"
        if ($84) { __label__ = 57; break; } else { __label__ = 21; break; } //@line 5391 "xmlparse.c"
      case 21: // $bb23
        var $85=HEAP[$prefix]; //@line 5393 "xmlparse.c"
        var $86=(($85+4)&4294967295); //@line 5393 "xmlparse.c"
        var $87=HEAP[$86]; //@line 5393 "xmlparse.c"
        var $88=($87)==0; //@line 5393 "xmlparse.c"
        if ($88) { __label__ = 56; break; } else { __label__ = 22; break; } //@line 5393 "xmlparse.c"
      case 22: // $bb24
        var $89=HEAP[$needSep]; //@line 5395 "xmlparse.c"
        var $90=reSign(($89), 8, 0)!=0; //@line 5395 "xmlparse.c"
        if ($90) { __label__ = 23; break; } else { __label__ = 29; break; } //@line 5395 "xmlparse.c"
      case 23: // $bb25
        var $91=HEAP[$parser_addr]; //@line 5395 "xmlparse.c"
        var $92=(($91+400)&4294967295); //@line 5395 "xmlparse.c"
        var $93=(($92+12)&4294967295); //@line 5395 "xmlparse.c"
        var $94=HEAP[$93]; //@line 5395 "xmlparse.c"
        var $95=HEAP[$parser_addr]; //@line 5395 "xmlparse.c"
        var $96=(($95+400)&4294967295); //@line 5395 "xmlparse.c"
        var $97=(($96+8)&4294967295); //@line 5395 "xmlparse.c"
        var $98=HEAP[$97]; //@line 5395 "xmlparse.c"
        var $99=($94)!=($98); //@line 5395 "xmlparse.c"
        if ($99) { __label__ = 25; break; } else { __label__ = 24; break; } //@line 5395 "xmlparse.c"
      case 24: // $bb26
        var $100=HEAP[$parser_addr]; //@line 5395 "xmlparse.c"
        var $101=(($100+400)&4294967295); //@line 5395 "xmlparse.c"
        var $102=_poolGrow($101); //@line 5395 "xmlparse.c"
        var $103=reSign(($102), 8, 0)!=0; //@line 5395 "xmlparse.c"
        if ($103) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 5395 "xmlparse.c"
      case 25: // $bb27
        var $104=HEAP[$parser_addr]; //@line 5395 "xmlparse.c"
        var $105=(($104+400)&4294967295); //@line 5395 "xmlparse.c"
        var $106=(($105+12)&4294967295); //@line 5395 "xmlparse.c"
        var $107=HEAP[$106]; //@line 5395 "xmlparse.c"
        HEAP[$107]=12; //@line 5395 "xmlparse.c"
        var $108=(($107+1)&4294967295); //@line 5395 "xmlparse.c"
        var $109=HEAP[$parser_addr]; //@line 5395 "xmlparse.c"
        var $110=(($109+400)&4294967295); //@line 5395 "xmlparse.c"
        var $111=(($110+12)&4294967295); //@line 5395 "xmlparse.c"
        HEAP[$111]=$108; //@line 5395 "xmlparse.c"
        HEAP[$iftmp_261]=0; //@line 5395 "xmlparse.c"
        __label__ = 27; break; //@line 5395 "xmlparse.c"
      case 26: // $bb28
        HEAP[$iftmp_261]=1; //@line 5395 "xmlparse.c"
        __label__ = 27; break; //@line 5395 "xmlparse.c"
      case 27: // $bb29
        var $112=HEAP[$iftmp_261]; //@line 5395 "xmlparse.c"
        var $toBool30=reSign(($112), 8, 0)!=0; //@line 5395 "xmlparse.c"
        if ($toBool30) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 5395 "xmlparse.c"
      case 28: // $bb31
        HEAP[$0]=0; //@line 5396 "xmlparse.c"
        __label__ = 85; break; //@line 5396 "xmlparse.c"
      case 29: // $bb32
        var $113=HEAP[$prefix]; //@line 5397 "xmlparse.c"
        var $114=(($113)&4294967295); //@line 5397 "xmlparse.c"
        var $115=HEAP[$114]; //@line 5397 "xmlparse.c"
        HEAP[$s]=$115; //@line 5397 "xmlparse.c"
        __label__ = 37; break; //@line 5397 "xmlparse.c"
      case 30: // $bb33
        var $116=HEAP[$parser_addr]; //@line 5398 "xmlparse.c"
        var $117=(($116+400)&4294967295); //@line 5398 "xmlparse.c"
        var $118=(($117+12)&4294967295); //@line 5398 "xmlparse.c"
        var $119=HEAP[$118]; //@line 5398 "xmlparse.c"
        var $120=HEAP[$parser_addr]; //@line 5398 "xmlparse.c"
        var $121=(($120+400)&4294967295); //@line 5398 "xmlparse.c"
        var $122=(($121+8)&4294967295); //@line 5398 "xmlparse.c"
        var $123=HEAP[$122]; //@line 5398 "xmlparse.c"
        var $124=($119)!=($123); //@line 5398 "xmlparse.c"
        if ($124) { __label__ = 32; break; } else { __label__ = 31; break; } //@line 5398 "xmlparse.c"
      case 31: // $bb34
        var $125=HEAP[$parser_addr]; //@line 5398 "xmlparse.c"
        var $126=(($125+400)&4294967295); //@line 5398 "xmlparse.c"
        var $127=_poolGrow($126); //@line 5398 "xmlparse.c"
        var $128=reSign(($127), 8, 0)!=0; //@line 5398 "xmlparse.c"
        if ($128) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 5398 "xmlparse.c"
      case 32: // $bb35
        var $129=HEAP[$parser_addr]; //@line 5398 "xmlparse.c"
        var $130=(($129+400)&4294967295); //@line 5398 "xmlparse.c"
        var $131=(($130+12)&4294967295); //@line 5398 "xmlparse.c"
        var $132=HEAP[$131]; //@line 5398 "xmlparse.c"
        var $133=HEAP[$s]; //@line 5398 "xmlparse.c"
        var $134=HEAP[$133]; //@line 5398 "xmlparse.c"
        HEAP[$132]=$134; //@line 5398 "xmlparse.c"
        var $135=(($132+1)&4294967295); //@line 5398 "xmlparse.c"
        var $136=HEAP[$parser_addr]; //@line 5398 "xmlparse.c"
        var $137=(($136+400)&4294967295); //@line 5398 "xmlparse.c"
        var $138=(($137+12)&4294967295); //@line 5398 "xmlparse.c"
        HEAP[$138]=$135; //@line 5398 "xmlparse.c"
        HEAP[$iftmp_262]=0; //@line 5398 "xmlparse.c"
        __label__ = 34; break; //@line 5398 "xmlparse.c"
      case 33: // $bb36
        HEAP[$iftmp_262]=1; //@line 5398 "xmlparse.c"
        __label__ = 34; break; //@line 5398 "xmlparse.c"
      case 34: // $bb37
        var $139=HEAP[$iftmp_262]; //@line 5398 "xmlparse.c"
        var $toBool38=reSign(($139), 8, 0)!=0; //@line 5398 "xmlparse.c"
        if ($toBool38) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 5398 "xmlparse.c"
      case 35: // $bb39
        HEAP[$0]=0; //@line 5399 "xmlparse.c"
        __label__ = 85; break; //@line 5399 "xmlparse.c"
      case 36: // $bb40
        var $140=HEAP[$s]; //@line 5397 "xmlparse.c"
        var $141=(($140+1)&4294967295); //@line 5397 "xmlparse.c"
        HEAP[$s]=$141; //@line 5397 "xmlparse.c"
        __label__ = 37; break; //@line 5397 "xmlparse.c"
      case 37: // $bb41
        var $142=HEAP[$s]; //@line 5397 "xmlparse.c"
        var $143=HEAP[$142]; //@line 5397 "xmlparse.c"
        var $144=reSign(($143), 8, 0)!=0; //@line 5397 "xmlparse.c"
        if ($144) { __label__ = 30; break; } else { __label__ = 38; break; } //@line 5397 "xmlparse.c"
      case 38: // $bb42
        var $145=HEAP[$parser_addr]; //@line 5400 "xmlparse.c"
        var $146=(($145+400)&4294967295); //@line 5400 "xmlparse.c"
        var $147=(($146+12)&4294967295); //@line 5400 "xmlparse.c"
        var $148=HEAP[$147]; //@line 5400 "xmlparse.c"
        var $149=HEAP[$parser_addr]; //@line 5400 "xmlparse.c"
        var $150=(($149+400)&4294967295); //@line 5400 "xmlparse.c"
        var $151=(($150+8)&4294967295); //@line 5400 "xmlparse.c"
        var $152=HEAP[$151]; //@line 5400 "xmlparse.c"
        var $153=($148)!=($152); //@line 5400 "xmlparse.c"
        if ($153) { __label__ = 40; break; } else { __label__ = 39; break; } //@line 5400 "xmlparse.c"
      case 39: // $bb43
        var $154=HEAP[$parser_addr]; //@line 5400 "xmlparse.c"
        var $155=(($154+400)&4294967295); //@line 5400 "xmlparse.c"
        var $156=_poolGrow($155); //@line 5400 "xmlparse.c"
        var $157=reSign(($156), 8, 0)!=0; //@line 5400 "xmlparse.c"
        if ($157) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 5400 "xmlparse.c"
      case 40: // $bb44
        var $158=HEAP[$parser_addr]; //@line 5400 "xmlparse.c"
        var $159=(($158+400)&4294967295); //@line 5400 "xmlparse.c"
        var $160=(($159+12)&4294967295); //@line 5400 "xmlparse.c"
        var $161=HEAP[$160]; //@line 5400 "xmlparse.c"
        HEAP[$161]=61; //@line 5400 "xmlparse.c"
        var $162=(($161+1)&4294967295); //@line 5400 "xmlparse.c"
        var $163=HEAP[$parser_addr]; //@line 5400 "xmlparse.c"
        var $164=(($163+400)&4294967295); //@line 5400 "xmlparse.c"
        var $165=(($164+12)&4294967295); //@line 5400 "xmlparse.c"
        HEAP[$165]=$162; //@line 5400 "xmlparse.c"
        HEAP[$iftmp_263]=0; //@line 5400 "xmlparse.c"
        __label__ = 42; break; //@line 5400 "xmlparse.c"
      case 41: // $bb45
        HEAP[$iftmp_263]=1; //@line 5400 "xmlparse.c"
        __label__ = 42; break; //@line 5400 "xmlparse.c"
      case 42: // $bb46
        var $166=HEAP[$iftmp_263]; //@line 5400 "xmlparse.c"
        var $toBool47=reSign(($166), 8, 0)!=0; //@line 5400 "xmlparse.c"
        if ($toBool47) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 5400 "xmlparse.c"
      case 43: // $bb48
        HEAP[$0]=0; //@line 5401 "xmlparse.c"
        __label__ = 85; break; //@line 5401 "xmlparse.c"
      case 44: // $bb49
        var $167=HEAP[$prefix]; //@line 5402 "xmlparse.c"
        var $168=(($167+4)&4294967295); //@line 5402 "xmlparse.c"
        var $169=HEAP[$168]; //@line 5402 "xmlparse.c"
        var $170=(($169+20)&4294967295); //@line 5402 "xmlparse.c"
        var $171=HEAP[$170]; //@line 5402 "xmlparse.c"
        HEAP[$len22]=$171; //@line 5402 "xmlparse.c"
        var $172=HEAP[$parser_addr]; //@line 5403 "xmlparse.c"
        var $173=(($172+456)&4294967295); //@line 5403 "xmlparse.c"
        var $174=HEAP[$173]; //@line 5403 "xmlparse.c"
        var $175=reSign(($174), 8, 0)!=0; //@line 5403 "xmlparse.c"
        if ($175) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 5403 "xmlparse.c"
      case 45: // $bb50
        var $176=HEAP[$len22]; //@line 5404 "xmlparse.c"
        var $177=((($176) - 1)&4294967295); //@line 5404 "xmlparse.c"
        HEAP[$len22]=$177; //@line 5404 "xmlparse.c"
        __label__ = 46; break; //@line 5404 "xmlparse.c"
      case 46: // $bb51
        HEAP[$i21]=0; //@line 5405 "xmlparse.c"
        __label__ = 54; break; //@line 5405 "xmlparse.c"
      case 47: // $bb52
        var $178=HEAP[$parser_addr]; //@line 5406 "xmlparse.c"
        var $179=(($178+400)&4294967295); //@line 5406 "xmlparse.c"
        var $180=(($179+12)&4294967295); //@line 5406 "xmlparse.c"
        var $181=HEAP[$180]; //@line 5406 "xmlparse.c"
        var $182=HEAP[$parser_addr]; //@line 5406 "xmlparse.c"
        var $183=(($182+400)&4294967295); //@line 5406 "xmlparse.c"
        var $184=(($183+8)&4294967295); //@line 5406 "xmlparse.c"
        var $185=HEAP[$184]; //@line 5406 "xmlparse.c"
        var $186=($181)!=($185); //@line 5406 "xmlparse.c"
        if ($186) { __label__ = 49; break; } else { __label__ = 48; break; } //@line 5406 "xmlparse.c"
      case 48: // $bb53
        var $187=HEAP[$parser_addr]; //@line 5406 "xmlparse.c"
        var $188=(($187+400)&4294967295); //@line 5406 "xmlparse.c"
        var $189=_poolGrow($188); //@line 5406 "xmlparse.c"
        var $190=reSign(($189), 8, 0)!=0; //@line 5406 "xmlparse.c"
        if ($190) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 5406 "xmlparse.c"
      case 49: // $bb54
        var $191=HEAP[$parser_addr]; //@line 5406 "xmlparse.c"
        var $192=(($191+400)&4294967295); //@line 5406 "xmlparse.c"
        var $193=(($192+12)&4294967295); //@line 5406 "xmlparse.c"
        var $194=HEAP[$193]; //@line 5406 "xmlparse.c"
        var $195=HEAP[$prefix]; //@line 5406 "xmlparse.c"
        var $196=(($195+4)&4294967295); //@line 5406 "xmlparse.c"
        var $197=HEAP[$196]; //@line 5406 "xmlparse.c"
        var $198=(($197+16)&4294967295); //@line 5406 "xmlparse.c"
        var $199=HEAP[$198]; //@line 5406 "xmlparse.c"
        var $200=HEAP[$i21]; //@line 5406 "xmlparse.c"
        var $201=(($199+$200)&4294967295); //@line 5406 "xmlparse.c"
        var $202=HEAP[$201]; //@line 5406 "xmlparse.c"
        HEAP[$194]=$202; //@line 5406 "xmlparse.c"
        var $203=(($194+1)&4294967295); //@line 5406 "xmlparse.c"
        var $204=HEAP[$parser_addr]; //@line 5406 "xmlparse.c"
        var $205=(($204+400)&4294967295); //@line 5406 "xmlparse.c"
        var $206=(($205+12)&4294967295); //@line 5406 "xmlparse.c"
        HEAP[$206]=$203; //@line 5406 "xmlparse.c"
        HEAP[$iftmp_264]=0; //@line 5406 "xmlparse.c"
        __label__ = 51; break; //@line 5406 "xmlparse.c"
      case 50: // $bb55
        HEAP[$iftmp_264]=1; //@line 5406 "xmlparse.c"
        __label__ = 51; break; //@line 5406 "xmlparse.c"
      case 51: // $bb56
        var $207=HEAP[$iftmp_264]; //@line 5406 "xmlparse.c"
        var $toBool57=reSign(($207), 8, 0)!=0; //@line 5406 "xmlparse.c"
        if ($toBool57) { __label__ = 52; break; } else { __label__ = 53; break; } //@line 5406 "xmlparse.c"
      case 52: // $bb58
        HEAP[$0]=0; //@line 5407 "xmlparse.c"
        __label__ = 85; break; //@line 5407 "xmlparse.c"
      case 53: // $bb59
        var $208=HEAP[$i21]; //@line 5405 "xmlparse.c"
        var $209=((($208) + 1)&4294967295); //@line 5405 "xmlparse.c"
        HEAP[$i21]=$209; //@line 5405 "xmlparse.c"
        __label__ = 54; break; //@line 5405 "xmlparse.c"
      case 54: // $bb60
        var $210=HEAP[$i21]; //@line 5405 "xmlparse.c"
        var $211=HEAP[$len22]; //@line 5405 "xmlparse.c"
        var $212=((($210))|0) < ((($211))|0); //@line 5405 "xmlparse.c"
        if ($212) { __label__ = 47; break; } else { __label__ = 55; break; } //@line 5405 "xmlparse.c"
      case 55: // $bb61
        HEAP[$needSep]=1; //@line 5408 "xmlparse.c"
        __label__ = 56; break; //@line 5408 "xmlparse.c"
      case 56: // $bb62
        __label__ = 20; break; //@line 5408 "xmlparse.c"
      case 57: // $bb63
        var $213=HEAP[$dtd]; //@line 5412 "xmlparse.c"
        var $214=(($213)&4294967295); //@line 5412 "xmlparse.c"
        _hashTableIterInit($iter, $214); //@line 5412 "xmlparse.c"
        __label__ = 58; break; //@line 5412 "xmlparse.c"
      case 58: // $bb64
        var $215=_hashTableIterNext($iter); //@line 5415 "xmlparse.c"
        var $216=$215; //@line 5415 "xmlparse.c"
        HEAP[$e]=$216; //@line 5415 "xmlparse.c"
        var $217=HEAP[$e]; //@line 5416 "xmlparse.c"
        var $218=($217)==0; //@line 5416 "xmlparse.c"
        if ($218) { __label__ = 78; break; } else { __label__ = 59; break; } //@line 5416 "xmlparse.c"
      case 59: // $bb66
        var $219=HEAP[$e]; //@line 5418 "xmlparse.c"
        var $220=(($219+32)&4294967295); //@line 5418 "xmlparse.c"
        var $221=HEAP[$220]; //@line 5418 "xmlparse.c"
        var $222=reSign(($221), 8, 0)==0; //@line 5418 "xmlparse.c"
        if ($222) { __label__ = 77; break; } else { __label__ = 60; break; } //@line 5418 "xmlparse.c"
      case 60: // $bb67
        var $223=HEAP[$needSep]; //@line 5420 "xmlparse.c"
        var $224=reSign(($223), 8, 0)!=0; //@line 5420 "xmlparse.c"
        if ($224) { __label__ = 61; break; } else { __label__ = 67; break; } //@line 5420 "xmlparse.c"
      case 61: // $bb68
        var $225=HEAP[$parser_addr]; //@line 5420 "xmlparse.c"
        var $226=(($225+400)&4294967295); //@line 5420 "xmlparse.c"
        var $227=(($226+12)&4294967295); //@line 5420 "xmlparse.c"
        var $228=HEAP[$227]; //@line 5420 "xmlparse.c"
        var $229=HEAP[$parser_addr]; //@line 5420 "xmlparse.c"
        var $230=(($229+400)&4294967295); //@line 5420 "xmlparse.c"
        var $231=(($230+8)&4294967295); //@line 5420 "xmlparse.c"
        var $232=HEAP[$231]; //@line 5420 "xmlparse.c"
        var $233=($228)!=($232); //@line 5420 "xmlparse.c"
        if ($233) { __label__ = 63; break; } else { __label__ = 62; break; } //@line 5420 "xmlparse.c"
      case 62: // $bb69
        var $234=HEAP[$parser_addr]; //@line 5420 "xmlparse.c"
        var $235=(($234+400)&4294967295); //@line 5420 "xmlparse.c"
        var $236=_poolGrow($235); //@line 5420 "xmlparse.c"
        var $237=reSign(($236), 8, 0)!=0; //@line 5420 "xmlparse.c"
        if ($237) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 5420 "xmlparse.c"
      case 63: // $bb70
        var $238=HEAP[$parser_addr]; //@line 5420 "xmlparse.c"
        var $239=(($238+400)&4294967295); //@line 5420 "xmlparse.c"
        var $240=(($239+12)&4294967295); //@line 5420 "xmlparse.c"
        var $241=HEAP[$240]; //@line 5420 "xmlparse.c"
        HEAP[$241]=12; //@line 5420 "xmlparse.c"
        var $242=(($241+1)&4294967295); //@line 5420 "xmlparse.c"
        var $243=HEAP[$parser_addr]; //@line 5420 "xmlparse.c"
        var $244=(($243+400)&4294967295); //@line 5420 "xmlparse.c"
        var $245=(($244+12)&4294967295); //@line 5420 "xmlparse.c"
        HEAP[$245]=$242; //@line 5420 "xmlparse.c"
        HEAP[$iftmp_265]=0; //@line 5420 "xmlparse.c"
        __label__ = 65; break; //@line 5420 "xmlparse.c"
      case 64: // $bb71
        HEAP[$iftmp_265]=1; //@line 5420 "xmlparse.c"
        __label__ = 65; break; //@line 5420 "xmlparse.c"
      case 65: // $bb72
        var $246=HEAP[$iftmp_265]; //@line 5420 "xmlparse.c"
        var $toBool73=reSign(($246), 8, 0)!=0; //@line 5420 "xmlparse.c"
        if ($toBool73) { __label__ = 66; break; } else { __label__ = 67; break; } //@line 5420 "xmlparse.c"
      case 66: // $bb74
        HEAP[$0]=0; //@line 5421 "xmlparse.c"
        __label__ = 85; break; //@line 5421 "xmlparse.c"
      case 67: // $bb75
        var $247=HEAP[$e]; //@line 5422 "xmlparse.c"
        var $248=(($247)&4294967295); //@line 5422 "xmlparse.c"
        var $249=HEAP[$248]; //@line 5422 "xmlparse.c"
        HEAP[$s65]=$249; //@line 5422 "xmlparse.c"
        __label__ = 75; break; //@line 5422 "xmlparse.c"
      case 68: // $bb76
        var $250=HEAP[$parser_addr]; //@line 5423 "xmlparse.c"
        var $251=(($250+400)&4294967295); //@line 5423 "xmlparse.c"
        var $252=(($251+12)&4294967295); //@line 5423 "xmlparse.c"
        var $253=HEAP[$252]; //@line 5423 "xmlparse.c"
        var $254=HEAP[$parser_addr]; //@line 5423 "xmlparse.c"
        var $255=(($254+400)&4294967295); //@line 5423 "xmlparse.c"
        var $256=(($255+8)&4294967295); //@line 5423 "xmlparse.c"
        var $257=HEAP[$256]; //@line 5423 "xmlparse.c"
        var $258=($253)!=($257); //@line 5423 "xmlparse.c"
        if ($258) { __label__ = 70; break; } else { __label__ = 69; break; } //@line 5423 "xmlparse.c"
      case 69: // $bb77
        var $259=HEAP[$parser_addr]; //@line 5423 "xmlparse.c"
        var $260=(($259+400)&4294967295); //@line 5423 "xmlparse.c"
        var $261=_poolGrow($260); //@line 5423 "xmlparse.c"
        var $262=reSign(($261), 8, 0)!=0; //@line 5423 "xmlparse.c"
        if ($262) { __label__ = 70; break; } else { __label__ = 71; break; } //@line 5423 "xmlparse.c"
      case 70: // $bb78
        var $263=HEAP[$parser_addr]; //@line 5423 "xmlparse.c"
        var $264=(($263+400)&4294967295); //@line 5423 "xmlparse.c"
        var $265=(($264+12)&4294967295); //@line 5423 "xmlparse.c"
        var $266=HEAP[$265]; //@line 5423 "xmlparse.c"
        var $267=HEAP[$s65]; //@line 5423 "xmlparse.c"
        var $268=HEAP[$267]; //@line 5423 "xmlparse.c"
        HEAP[$266]=$268; //@line 5423 "xmlparse.c"
        var $269=(($266+1)&4294967295); //@line 5423 "xmlparse.c"
        var $270=HEAP[$parser_addr]; //@line 5423 "xmlparse.c"
        var $271=(($270+400)&4294967295); //@line 5423 "xmlparse.c"
        var $272=(($271+12)&4294967295); //@line 5423 "xmlparse.c"
        HEAP[$272]=$269; //@line 5423 "xmlparse.c"
        HEAP[$iftmp_266]=0; //@line 5423 "xmlparse.c"
        __label__ = 72; break; //@line 5423 "xmlparse.c"
      case 71: // $bb79
        HEAP[$iftmp_266]=1; //@line 5423 "xmlparse.c"
        __label__ = 72; break; //@line 5423 "xmlparse.c"
      case 72: // $bb80
        var $273=HEAP[$iftmp_266]; //@line 5423 "xmlparse.c"
        var $toBool81=reSign(($273), 8, 0)!=0; //@line 5423 "xmlparse.c"
        if ($toBool81) { __label__ = 73; break; } else { __label__ = 74; break; } //@line 5423 "xmlparse.c"
      case 73: // $bb82
        HEAP[$0]=0; //@line 5424 "xmlparse.c"
        __label__ = 85; break; //@line 5424 "xmlparse.c"
      case 74: // $bb83
        var $274=HEAP[$s65]; //@line 5422 "xmlparse.c"
        var $275=(($274+1)&4294967295); //@line 5422 "xmlparse.c"
        HEAP[$s65]=$275; //@line 5422 "xmlparse.c"
        __label__ = 75; break; //@line 5422 "xmlparse.c"
      case 75: // $bb84
        var $276=HEAP[$s65]; //@line 5422 "xmlparse.c"
        var $277=HEAP[$276]; //@line 5422 "xmlparse.c"
        var $278=reSign(($277), 8, 0)!=0; //@line 5422 "xmlparse.c"
        if ($278) { __label__ = 68; break; } else { __label__ = 76; break; } //@line 5422 "xmlparse.c"
      case 76: // $bb85
        HEAP[$needSep]=1; //@line 5425 "xmlparse.c"
        __label__ = 77; break; //@line 5425 "xmlparse.c"
      case 77: // $bb86
        __label__ = 58; break; //@line 5425 "xmlparse.c"
      case 78: // $bb87
        var $279=HEAP[$parser_addr]; //@line 5428 "xmlparse.c"
        var $280=(($279+400)&4294967295); //@line 5428 "xmlparse.c"
        var $281=(($280+12)&4294967295); //@line 5428 "xmlparse.c"
        var $282=HEAP[$281]; //@line 5428 "xmlparse.c"
        var $283=HEAP[$parser_addr]; //@line 5428 "xmlparse.c"
        var $284=(($283+400)&4294967295); //@line 5428 "xmlparse.c"
        var $285=(($284+8)&4294967295); //@line 5428 "xmlparse.c"
        var $286=HEAP[$285]; //@line 5428 "xmlparse.c"
        var $287=($282)!=($286); //@line 5428 "xmlparse.c"
        if ($287) { __label__ = 80; break; } else { __label__ = 79; break; } //@line 5428 "xmlparse.c"
      case 79: // $bb88
        var $288=HEAP[$parser_addr]; //@line 5428 "xmlparse.c"
        var $289=(($288+400)&4294967295); //@line 5428 "xmlparse.c"
        var $290=_poolGrow($289); //@line 5428 "xmlparse.c"
        var $291=reSign(($290), 8, 0)!=0; //@line 5428 "xmlparse.c"
        if ($291) { __label__ = 80; break; } else { __label__ = 81; break; } //@line 5428 "xmlparse.c"
      case 80: // $bb89
        var $292=HEAP[$parser_addr]; //@line 5428 "xmlparse.c"
        var $293=(($292+400)&4294967295); //@line 5428 "xmlparse.c"
        var $294=(($293+12)&4294967295); //@line 5428 "xmlparse.c"
        var $295=HEAP[$294]; //@line 5428 "xmlparse.c"
        HEAP[$295]=0; //@line 5428 "xmlparse.c"
        var $296=(($295+1)&4294967295); //@line 5428 "xmlparse.c"
        var $297=HEAP[$parser_addr]; //@line 5428 "xmlparse.c"
        var $298=(($297+400)&4294967295); //@line 5428 "xmlparse.c"
        var $299=(($298+12)&4294967295); //@line 5428 "xmlparse.c"
        HEAP[$299]=$296; //@line 5428 "xmlparse.c"
        HEAP[$iftmp_267]=0; //@line 5428 "xmlparse.c"
        __label__ = 82; break; //@line 5428 "xmlparse.c"
      case 81: // $bb90
        HEAP[$iftmp_267]=1; //@line 5428 "xmlparse.c"
        __label__ = 82; break; //@line 5428 "xmlparse.c"
      case 82: // $bb91
        var $300=HEAP[$iftmp_267]; //@line 5428 "xmlparse.c"
        var $toBool92=reSign(($300), 8, 0)!=0; //@line 5428 "xmlparse.c"
        if ($toBool92) { __label__ = 83; break; } else { __label__ = 84; break; } //@line 5428 "xmlparse.c"
      case 83: // $bb93
        HEAP[$0]=0; //@line 5429 "xmlparse.c"
        __label__ = 85; break; //@line 5429 "xmlparse.c"
      case 84: // $bb94
        var $301=HEAP[$parser_addr]; //@line 5430 "xmlparse.c"
        var $302=(($301+400)&4294967295); //@line 5430 "xmlparse.c"
        var $303=(($302+16)&4294967295); //@line 5430 "xmlparse.c"
        var $304=HEAP[$303]; //@line 5430 "xmlparse.c"
        HEAP[$0]=$304; //@line 5430 "xmlparse.c"
        __label__ = 85; break; //@line 5430 "xmlparse.c"
      case 85: // $bb95
        var $305=HEAP[$0]; //@line 5375 "xmlparse.c"
        HEAP[$retval]=$305; //@line 5375 "xmlparse.c"
        __label__ = 86; break; //@line 5375 "xmlparse.c"
      case 86: // $return
        var $retval96=HEAP[$retval]; //@line 5375 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval96; //@line 5375 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _setContext($parser, $context) {
    var __stackBase__  = STACKTOP; STACKTOP += 37; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 37);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $context_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $iftmp_272=__stackBase__+12;
        var $iftmp_271=__stackBase__+13;
        var $iftmp_270=__stackBase__+14;
        var $iftmp_269=__stackBase__+15;
        var $0=__stackBase__+16;
        var $iftmp_268=__stackBase__+20;
        var $dtd=__stackBase__+21;
        var $s=__stackBase__+25;
        var $e=__stackBase__+29;
        var $prefix=__stackBase__+33;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$context_addr]=$context;
        var $1=HEAP[$parser_addr]; //@line 5436 "xmlparse.c"
        var $2=(($1+340)&4294967295); //@line 5436 "xmlparse.c"
        var $3=HEAP[$2]; //@line 5436 "xmlparse.c"
        HEAP[$dtd]=$3; //@line 5436 "xmlparse.c"
        var $4=HEAP[$context_addr]; //@line 5437 "xmlparse.c"
        HEAP[$s]=$4; //@line 5437 "xmlparse.c"
        __label__ = 57; break; //@line 5437 "xmlparse.c"
      case 1: // $bb
        var $5=HEAP[$s]; //@line 5440 "xmlparse.c"
        var $6=HEAP[$5]; //@line 5440 "xmlparse.c"
        var $7=reSign(($6), 8, 0)==12; //@line 5440 "xmlparse.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 5440 "xmlparse.c"
      case 2: // $bb1
        var $8=HEAP[$s]; //@line 5440 "xmlparse.c"
        var $9=HEAP[$8]; //@line 5440 "xmlparse.c"
        var $10=reSign(($9), 8, 0)==0; //@line 5440 "xmlparse.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 14; break; } //@line 5440 "xmlparse.c"
      case 3: // $bb2
        var $11=HEAP[$parser_addr]; //@line 5442 "xmlparse.c"
        var $12=(($11+400)&4294967295); //@line 5442 "xmlparse.c"
        var $13=(($12+12)&4294967295); //@line 5442 "xmlparse.c"
        var $14=HEAP[$13]; //@line 5442 "xmlparse.c"
        var $15=HEAP[$parser_addr]; //@line 5442 "xmlparse.c"
        var $16=(($15+400)&4294967295); //@line 5442 "xmlparse.c"
        var $17=(($16+8)&4294967295); //@line 5442 "xmlparse.c"
        var $18=HEAP[$17]; //@line 5442 "xmlparse.c"
        var $19=($14)!=($18); //@line 5442 "xmlparse.c"
        if ($19) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 5442 "xmlparse.c"
      case 4: // $bb3
        var $20=HEAP[$parser_addr]; //@line 5442 "xmlparse.c"
        var $21=(($20+400)&4294967295); //@line 5442 "xmlparse.c"
        var $22=_poolGrow($21); //@line 5442 "xmlparse.c"
        var $23=reSign(($22), 8, 0)!=0; //@line 5442 "xmlparse.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5442 "xmlparse.c"
      case 5: // $bb4
        var $24=HEAP[$parser_addr]; //@line 5442 "xmlparse.c"
        var $25=(($24+400)&4294967295); //@line 5442 "xmlparse.c"
        var $26=(($25+12)&4294967295); //@line 5442 "xmlparse.c"
        var $27=HEAP[$26]; //@line 5442 "xmlparse.c"
        HEAP[$27]=0; //@line 5442 "xmlparse.c"
        var $28=(($27+1)&4294967295); //@line 5442 "xmlparse.c"
        var $29=HEAP[$parser_addr]; //@line 5442 "xmlparse.c"
        var $30=(($29+400)&4294967295); //@line 5442 "xmlparse.c"
        var $31=(($30+12)&4294967295); //@line 5442 "xmlparse.c"
        HEAP[$31]=$28; //@line 5442 "xmlparse.c"
        HEAP[$iftmp_268]=0; //@line 5442 "xmlparse.c"
        __label__ = 7; break; //@line 5442 "xmlparse.c"
      case 6: // $bb5
        HEAP[$iftmp_268]=1; //@line 5442 "xmlparse.c"
        __label__ = 7; break; //@line 5442 "xmlparse.c"
      case 7: // $bb6
        var $32=HEAP[$iftmp_268]; //@line 5442 "xmlparse.c"
        var $toBool=reSign(($32), 8, 0)!=0; //@line 5442 "xmlparse.c"
        if ($toBool) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 5442 "xmlparse.c"
      case 8: // $bb7
        HEAP[$0]=0; //@line 5443 "xmlparse.c"
        __label__ = 59; break; //@line 5443 "xmlparse.c"
      case 9: // $bb8
        var $33=HEAP[$parser_addr]; //@line 5444 "xmlparse.c"
        var $34=(($33+400)&4294967295); //@line 5444 "xmlparse.c"
        var $35=(($34+16)&4294967295); //@line 5444 "xmlparse.c"
        var $36=HEAP[$35]; //@line 5444 "xmlparse.c"
        var $37=HEAP[$dtd]; //@line 5444 "xmlparse.c"
        var $38=(($37)&4294967295); //@line 5444 "xmlparse.c"
        var $39=_lookup($38, $36, 0); //@line 5444 "xmlparse.c"
        var $40=$39; //@line 5444 "xmlparse.c"
        HEAP[$e]=$40; //@line 5444 "xmlparse.c"
        var $41=HEAP[$e]; //@line 5445 "xmlparse.c"
        var $42=($41)!=0; //@line 5445 "xmlparse.c"
        if ($42) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 5445 "xmlparse.c"
      case 10: // $bb9
        var $43=HEAP[$e]; //@line 5446 "xmlparse.c"
        var $44=(($43+32)&4294967295); //@line 5446 "xmlparse.c"
        HEAP[$44]=1; //@line 5446 "xmlparse.c"
        __label__ = 11; break; //@line 5446 "xmlparse.c"
      case 11: // $bb10
        var $45=HEAP[$s]; //@line 5447 "xmlparse.c"
        var $46=HEAP[$45]; //@line 5447 "xmlparse.c"
        var $47=reSign(($46), 8, 0)!=0; //@line 5447 "xmlparse.c"
        if ($47) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 5447 "xmlparse.c"
      case 12: // $bb11
        var $48=HEAP[$s]; //@line 5448 "xmlparse.c"
        var $49=(($48+1)&4294967295); //@line 5448 "xmlparse.c"
        HEAP[$s]=$49; //@line 5448 "xmlparse.c"
        __label__ = 13; break; //@line 5448 "xmlparse.c"
      case 13: // $bb12
        var $50=HEAP[$s]; //@line 5449 "xmlparse.c"
        HEAP[$context_addr]=$50; //@line 5449 "xmlparse.c"
        var $51=HEAP[$parser_addr]; //@line 5450 "xmlparse.c"
        var $52=(($51+400)&4294967295); //@line 5450 "xmlparse.c"
        var $53=(($52+16)&4294967295); //@line 5450 "xmlparse.c"
        var $54=HEAP[$53]; //@line 5450 "xmlparse.c"
        var $55=HEAP[$parser_addr]; //@line 5450 "xmlparse.c"
        var $56=(($55+400)&4294967295); //@line 5450 "xmlparse.c"
        var $57=(($56+12)&4294967295); //@line 5450 "xmlparse.c"
        HEAP[$57]=$54; //@line 5450 "xmlparse.c"
        __label__ = 57; break; //@line 5450 "xmlparse.c"
      case 14: // $bb13
        var $58=HEAP[$s]; //@line 5452 "xmlparse.c"
        var $59=HEAP[$58]; //@line 5452 "xmlparse.c"
        var $60=reSign(($59), 8, 0)==61; //@line 5452 "xmlparse.c"
        if ($60) { __label__ = 15; break; } else { __label__ = 50; break; } //@line 5452 "xmlparse.c"
      case 15: // $bb14
        var $61=HEAP[$parser_addr]; //@line 5454 "xmlparse.c"
        var $62=(($61+400)&4294967295); //@line 5454 "xmlparse.c"
        var $63=(($62+12)&4294967295); //@line 5454 "xmlparse.c"
        var $64=HEAP[$63]; //@line 5454 "xmlparse.c"
        var $65=HEAP[$parser_addr]; //@line 5454 "xmlparse.c"
        var $66=(($65+400)&4294967295); //@line 5454 "xmlparse.c"
        var $67=(($66+16)&4294967295); //@line 5454 "xmlparse.c"
        var $68=HEAP[$67]; //@line 5454 "xmlparse.c"
        var $69=($64)==($68); //@line 5454 "xmlparse.c"
        if ($69) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 5454 "xmlparse.c"
      case 16: // $bb15
        var $70=HEAP[$dtd]; //@line 5455 "xmlparse.c"
        var $71=(($70+132)&4294967295); //@line 5455 "xmlparse.c"
        HEAP[$prefix]=$71; //@line 5455 "xmlparse.c"
        __label__ = 29; break; //@line 5455 "xmlparse.c"
      case 17: // $bb16
        var $72=HEAP[$parser_addr]; //@line 5457 "xmlparse.c"
        var $73=(($72+400)&4294967295); //@line 5457 "xmlparse.c"
        var $74=(($73+12)&4294967295); //@line 5457 "xmlparse.c"
        var $75=HEAP[$74]; //@line 5457 "xmlparse.c"
        var $76=HEAP[$parser_addr]; //@line 5457 "xmlparse.c"
        var $77=(($76+400)&4294967295); //@line 5457 "xmlparse.c"
        var $78=(($77+8)&4294967295); //@line 5457 "xmlparse.c"
        var $79=HEAP[$78]; //@line 5457 "xmlparse.c"
        var $80=($75)!=($79); //@line 5457 "xmlparse.c"
        if ($80) { __label__ = 19; break; } else { __label__ = 18; break; } //@line 5457 "xmlparse.c"
      case 18: // $bb17
        var $81=HEAP[$parser_addr]; //@line 5457 "xmlparse.c"
        var $82=(($81+400)&4294967295); //@line 5457 "xmlparse.c"
        var $83=_poolGrow($82); //@line 5457 "xmlparse.c"
        var $84=reSign(($83), 8, 0)!=0; //@line 5457 "xmlparse.c"
        if ($84) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 5457 "xmlparse.c"
      case 19: // $bb18
        var $85=HEAP[$parser_addr]; //@line 5457 "xmlparse.c"
        var $86=(($85+400)&4294967295); //@line 5457 "xmlparse.c"
        var $87=(($86+12)&4294967295); //@line 5457 "xmlparse.c"
        var $88=HEAP[$87]; //@line 5457 "xmlparse.c"
        HEAP[$88]=0; //@line 5457 "xmlparse.c"
        var $89=(($88+1)&4294967295); //@line 5457 "xmlparse.c"
        var $90=HEAP[$parser_addr]; //@line 5457 "xmlparse.c"
        var $91=(($90+400)&4294967295); //@line 5457 "xmlparse.c"
        var $92=(($91+12)&4294967295); //@line 5457 "xmlparse.c"
        HEAP[$92]=$89; //@line 5457 "xmlparse.c"
        HEAP[$iftmp_269]=0; //@line 5457 "xmlparse.c"
        __label__ = 21; break; //@line 5457 "xmlparse.c"
      case 20: // $bb19
        HEAP[$iftmp_269]=1; //@line 5457 "xmlparse.c"
        __label__ = 21; break; //@line 5457 "xmlparse.c"
      case 21: // $bb20
        var $93=HEAP[$iftmp_269]; //@line 5457 "xmlparse.c"
        var $toBool21=reSign(($93), 8, 0)!=0; //@line 5457 "xmlparse.c"
        if ($toBool21) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 5457 "xmlparse.c"
      case 22: // $bb22
        HEAP[$0]=0; //@line 5458 "xmlparse.c"
        __label__ = 59; break; //@line 5458 "xmlparse.c"
      case 23: // $bb23
        var $94=HEAP[$parser_addr]; //@line 5459 "xmlparse.c"
        var $95=(($94+400)&4294967295); //@line 5459 "xmlparse.c"
        var $96=(($95+16)&4294967295); //@line 5459 "xmlparse.c"
        var $97=HEAP[$96]; //@line 5459 "xmlparse.c"
        var $98=HEAP[$dtd]; //@line 5459 "xmlparse.c"
        var $99=(($98+60)&4294967295); //@line 5459 "xmlparse.c"
        var $100=_lookup($99, $97, 8); //@line 5459 "xmlparse.c"
        var $101=$100; //@line 5459 "xmlparse.c"
        HEAP[$prefix]=$101; //@line 5459 "xmlparse.c"
        var $102=HEAP[$prefix]; //@line 5461 "xmlparse.c"
        var $103=($102)==0; //@line 5461 "xmlparse.c"
        if ($103) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 5461 "xmlparse.c"
      case 24: // $bb24
        HEAP[$0]=0; //@line 5462 "xmlparse.c"
        __label__ = 59; break; //@line 5462 "xmlparse.c"
      case 25: // $bb25
        var $104=HEAP[$prefix]; //@line 5463 "xmlparse.c"
        var $105=(($104)&4294967295); //@line 5463 "xmlparse.c"
        var $106=HEAP[$105]; //@line 5463 "xmlparse.c"
        var $107=HEAP[$parser_addr]; //@line 5463 "xmlparse.c"
        var $108=(($107+400)&4294967295); //@line 5463 "xmlparse.c"
        var $109=(($108+16)&4294967295); //@line 5463 "xmlparse.c"
        var $110=HEAP[$109]; //@line 5463 "xmlparse.c"
        var $111=($106)==($110); //@line 5463 "xmlparse.c"
        if ($111) { __label__ = 26; break; } else { __label__ = 28; break; } //@line 5463 "xmlparse.c"
      case 26: // $bb26
        var $112=HEAP[$prefix]; //@line 5464 "xmlparse.c"
        var $113=(($112)&4294967295); //@line 5464 "xmlparse.c"
        var $114=HEAP[$113]; //@line 5464 "xmlparse.c"
        var $115=HEAP[$dtd]; //@line 5464 "xmlparse.c"
        var $116=(($115+80)&4294967295); //@line 5464 "xmlparse.c"
        var $117=_poolCopyString($116, $114); //@line 5464 "xmlparse.c"
        var $118=HEAP[$prefix]; //@line 5464 "xmlparse.c"
        var $119=(($118)&4294967295); //@line 5464 "xmlparse.c"
        HEAP[$119]=$117; //@line 5464 "xmlparse.c"
        var $120=HEAP[$prefix]; //@line 5465 "xmlparse.c"
        var $121=(($120)&4294967295); //@line 5465 "xmlparse.c"
        var $122=HEAP[$121]; //@line 5465 "xmlparse.c"
        var $123=($122)==0; //@line 5465 "xmlparse.c"
        if ($123) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 5465 "xmlparse.c"
      case 27: // $bb27
        HEAP[$0]=0; //@line 5466 "xmlparse.c"
        __label__ = 59; break; //@line 5466 "xmlparse.c"
      case 28: // $bb28
        var $124=HEAP[$parser_addr]; //@line 5468 "xmlparse.c"
        var $125=(($124+400)&4294967295); //@line 5468 "xmlparse.c"
        var $126=(($125+16)&4294967295); //@line 5468 "xmlparse.c"
        var $127=HEAP[$126]; //@line 5468 "xmlparse.c"
        var $128=HEAP[$parser_addr]; //@line 5468 "xmlparse.c"
        var $129=(($128+400)&4294967295); //@line 5468 "xmlparse.c"
        var $130=(($129+12)&4294967295); //@line 5468 "xmlparse.c"
        HEAP[$130]=$127; //@line 5468 "xmlparse.c"
        __label__ = 29; break; //@line 5468 "xmlparse.c"
      case 29: // $bb29
        var $131=HEAP[$s]; //@line 5470 "xmlparse.c"
        var $132=(($131+1)&4294967295); //@line 5470 "xmlparse.c"
        HEAP[$context_addr]=$132; //@line 5470 "xmlparse.c"
        __label__ = 37; break; //@line 5470 "xmlparse.c"
      case 30: // $bb30
        var $133=HEAP[$parser_addr]; //@line 5473 "xmlparse.c"
        var $134=(($133+400)&4294967295); //@line 5473 "xmlparse.c"
        var $135=(($134+12)&4294967295); //@line 5473 "xmlparse.c"
        var $136=HEAP[$135]; //@line 5473 "xmlparse.c"
        var $137=HEAP[$parser_addr]; //@line 5473 "xmlparse.c"
        var $138=(($137+400)&4294967295); //@line 5473 "xmlparse.c"
        var $139=(($138+8)&4294967295); //@line 5473 "xmlparse.c"
        var $140=HEAP[$139]; //@line 5473 "xmlparse.c"
        var $141=($136)!=($140); //@line 5473 "xmlparse.c"
        if ($141) { __label__ = 32; break; } else { __label__ = 31; break; } //@line 5473 "xmlparse.c"
      case 31: // $bb31
        var $142=HEAP[$parser_addr]; //@line 5473 "xmlparse.c"
        var $143=(($142+400)&4294967295); //@line 5473 "xmlparse.c"
        var $144=_poolGrow($143); //@line 5473 "xmlparse.c"
        var $145=reSign(($144), 8, 0)!=0; //@line 5473 "xmlparse.c"
        if ($145) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 5473 "xmlparse.c"
      case 32: // $bb32
        var $146=HEAP[$parser_addr]; //@line 5473 "xmlparse.c"
        var $147=(($146+400)&4294967295); //@line 5473 "xmlparse.c"
        var $148=(($147+12)&4294967295); //@line 5473 "xmlparse.c"
        var $149=HEAP[$148]; //@line 5473 "xmlparse.c"
        var $150=HEAP[$context_addr]; //@line 5473 "xmlparse.c"
        var $151=HEAP[$150]; //@line 5473 "xmlparse.c"
        HEAP[$149]=$151; //@line 5473 "xmlparse.c"
        var $152=(($149+1)&4294967295); //@line 5473 "xmlparse.c"
        var $153=HEAP[$parser_addr]; //@line 5473 "xmlparse.c"
        var $154=(($153+400)&4294967295); //@line 5473 "xmlparse.c"
        var $155=(($154+12)&4294967295); //@line 5473 "xmlparse.c"
        HEAP[$155]=$152; //@line 5473 "xmlparse.c"
        HEAP[$iftmp_270]=0; //@line 5473 "xmlparse.c"
        __label__ = 34; break; //@line 5473 "xmlparse.c"
      case 33: // $bb33
        HEAP[$iftmp_270]=1; //@line 5473 "xmlparse.c"
        __label__ = 34; break; //@line 5473 "xmlparse.c"
      case 34: // $bb34
        var $156=HEAP[$iftmp_270]; //@line 5473 "xmlparse.c"
        var $toBool35=reSign(($156), 8, 0)!=0; //@line 5473 "xmlparse.c"
        if ($toBool35) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 5473 "xmlparse.c"
      case 35: // $bb36
        HEAP[$0]=0; //@line 5474 "xmlparse.c"
        __label__ = 59; break; //@line 5474 "xmlparse.c"
      case 36: // $bb37
        var $157=HEAP[$context_addr]; //@line 5472 "xmlparse.c"
        var $158=(($157+1)&4294967295); //@line 5472 "xmlparse.c"
        HEAP[$context_addr]=$158; //@line 5472 "xmlparse.c"
        __label__ = 37; break; //@line 5472 "xmlparse.c"
      case 37: // $bb38
        var $159=HEAP[$context_addr]; //@line 5471 "xmlparse.c"
        var $160=HEAP[$159]; //@line 5471 "xmlparse.c"
        var $161=reSign(($160), 8, 0)==12; //@line 5471 "xmlparse.c"
        if ($161) { __label__ = 39; break; } else { __label__ = 38; break; } //@line 5471 "xmlparse.c"
      case 38: // $bb39
        var $162=HEAP[$context_addr]; //@line 5471 "xmlparse.c"
        var $163=HEAP[$162]; //@line 5471 "xmlparse.c"
        var $164=reSign(($163), 8, 0)!=0; //@line 5471 "xmlparse.c"
        if ($164) { __label__ = 30; break; } else { __label__ = 39; break; } //@line 5471 "xmlparse.c"
      case 39: // $bb40
        var $165=HEAP[$parser_addr]; //@line 5475 "xmlparse.c"
        var $166=(($165+400)&4294967295); //@line 5475 "xmlparse.c"
        var $167=(($166+12)&4294967295); //@line 5475 "xmlparse.c"
        var $168=HEAP[$167]; //@line 5475 "xmlparse.c"
        var $169=HEAP[$parser_addr]; //@line 5475 "xmlparse.c"
        var $170=(($169+400)&4294967295); //@line 5475 "xmlparse.c"
        var $171=(($170+8)&4294967295); //@line 5475 "xmlparse.c"
        var $172=HEAP[$171]; //@line 5475 "xmlparse.c"
        var $173=($168)!=($172); //@line 5475 "xmlparse.c"
        if ($173) { __label__ = 41; break; } else { __label__ = 40; break; } //@line 5475 "xmlparse.c"
      case 40: // $bb41
        var $174=HEAP[$parser_addr]; //@line 5475 "xmlparse.c"
        var $175=(($174+400)&4294967295); //@line 5475 "xmlparse.c"
        var $176=_poolGrow($175); //@line 5475 "xmlparse.c"
        var $177=reSign(($176), 8, 0)!=0; //@line 5475 "xmlparse.c"
        if ($177) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 5475 "xmlparse.c"
      case 41: // $bb42
        var $178=HEAP[$parser_addr]; //@line 5475 "xmlparse.c"
        var $179=(($178+400)&4294967295); //@line 5475 "xmlparse.c"
        var $180=(($179+12)&4294967295); //@line 5475 "xmlparse.c"
        var $181=HEAP[$180]; //@line 5475 "xmlparse.c"
        HEAP[$181]=0; //@line 5475 "xmlparse.c"
        var $182=(($181+1)&4294967295); //@line 5475 "xmlparse.c"
        var $183=HEAP[$parser_addr]; //@line 5475 "xmlparse.c"
        var $184=(($183+400)&4294967295); //@line 5475 "xmlparse.c"
        var $185=(($184+12)&4294967295); //@line 5475 "xmlparse.c"
        HEAP[$185]=$182; //@line 5475 "xmlparse.c"
        HEAP[$iftmp_271]=0; //@line 5475 "xmlparse.c"
        __label__ = 43; break; //@line 5475 "xmlparse.c"
      case 42: // $bb43
        HEAP[$iftmp_271]=1; //@line 5475 "xmlparse.c"
        __label__ = 43; break; //@line 5475 "xmlparse.c"
      case 43: // $bb44
        var $186=HEAP[$iftmp_271]; //@line 5475 "xmlparse.c"
        var $toBool45=reSign(($186), 8, 0)!=0; //@line 5475 "xmlparse.c"
        if ($toBool45) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 5475 "xmlparse.c"
      case 44: // $bb46
        HEAP[$0]=0; //@line 5476 "xmlparse.c"
        __label__ = 59; break; //@line 5476 "xmlparse.c"
      case 45: // $bb47
        var $187=HEAP[$parser_addr]; //@line 5477 "xmlparse.c"
        var $188=(($187+356)&4294967295); //@line 5477 "xmlparse.c"
        var $189=HEAP[$parser_addr]; //@line 5477 "xmlparse.c"
        var $190=(($189+400)&4294967295); //@line 5477 "xmlparse.c"
        var $191=(($190+16)&4294967295); //@line 5477 "xmlparse.c"
        var $192=HEAP[$191]; //@line 5477 "xmlparse.c"
        var $193=HEAP[$parser_addr]; //@line 5477 "xmlparse.c"
        var $194=HEAP[$prefix]; //@line 5477 "xmlparse.c"
        var $195=_addBinding($193, $194, 0, $192, $188); //@line 5477 "xmlparse.c"
        var $196=((($195))|0)!=0; //@line 5477 "xmlparse.c"
        if ($196) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 5477 "xmlparse.c"
      case 46: // $bb48
        HEAP[$0]=0; //@line 5479 "xmlparse.c"
        __label__ = 59; break; //@line 5479 "xmlparse.c"
      case 47: // $bb49
        var $197=HEAP[$parser_addr]; //@line 5480 "xmlparse.c"
        var $198=(($197+400)&4294967295); //@line 5480 "xmlparse.c"
        var $199=(($198+16)&4294967295); //@line 5480 "xmlparse.c"
        var $200=HEAP[$199]; //@line 5480 "xmlparse.c"
        var $201=HEAP[$parser_addr]; //@line 5480 "xmlparse.c"
        var $202=(($201+400)&4294967295); //@line 5480 "xmlparse.c"
        var $203=(($202+12)&4294967295); //@line 5480 "xmlparse.c"
        HEAP[$203]=$200; //@line 5480 "xmlparse.c"
        var $204=HEAP[$context_addr]; //@line 5481 "xmlparse.c"
        var $205=HEAP[$204]; //@line 5481 "xmlparse.c"
        var $206=reSign(($205), 8, 0)!=0; //@line 5481 "xmlparse.c"
        if ($206) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 5481 "xmlparse.c"
      case 48: // $bb50
        var $207=HEAP[$context_addr]; //@line 5482 "xmlparse.c"
        var $208=(($207+1)&4294967295); //@line 5482 "xmlparse.c"
        HEAP[$context_addr]=$208; //@line 5482 "xmlparse.c"
        __label__ = 49; break; //@line 5482 "xmlparse.c"
      case 49: // $bb51
        var $209=HEAP[$context_addr]; //@line 5483 "xmlparse.c"
        HEAP[$s]=$209; //@line 5483 "xmlparse.c"
        __label__ = 57; break; //@line 5483 "xmlparse.c"
      case 50: // $bb52
        var $210=HEAP[$parser_addr]; //@line 5486 "xmlparse.c"
        var $211=(($210+400)&4294967295); //@line 5486 "xmlparse.c"
        var $212=(($211+12)&4294967295); //@line 5486 "xmlparse.c"
        var $213=HEAP[$212]; //@line 5486 "xmlparse.c"
        var $214=HEAP[$parser_addr]; //@line 5486 "xmlparse.c"
        var $215=(($214+400)&4294967295); //@line 5486 "xmlparse.c"
        var $216=(($215+8)&4294967295); //@line 5486 "xmlparse.c"
        var $217=HEAP[$216]; //@line 5486 "xmlparse.c"
        var $218=($213)!=($217); //@line 5486 "xmlparse.c"
        if ($218) { __label__ = 52; break; } else { __label__ = 51; break; } //@line 5486 "xmlparse.c"
      case 51: // $bb53
        var $219=HEAP[$parser_addr]; //@line 5486 "xmlparse.c"
        var $220=(($219+400)&4294967295); //@line 5486 "xmlparse.c"
        var $221=_poolGrow($220); //@line 5486 "xmlparse.c"
        var $222=reSign(($221), 8, 0)!=0; //@line 5486 "xmlparse.c"
        if ($222) { __label__ = 52; break; } else { __label__ = 53; break; } //@line 5486 "xmlparse.c"
      case 52: // $bb54
        var $223=HEAP[$parser_addr]; //@line 5486 "xmlparse.c"
        var $224=(($223+400)&4294967295); //@line 5486 "xmlparse.c"
        var $225=(($224+12)&4294967295); //@line 5486 "xmlparse.c"
        var $226=HEAP[$225]; //@line 5486 "xmlparse.c"
        var $227=HEAP[$s]; //@line 5486 "xmlparse.c"
        var $228=HEAP[$227]; //@line 5486 "xmlparse.c"
        HEAP[$226]=$228; //@line 5486 "xmlparse.c"
        var $229=(($226+1)&4294967295); //@line 5486 "xmlparse.c"
        var $230=HEAP[$parser_addr]; //@line 5486 "xmlparse.c"
        var $231=(($230+400)&4294967295); //@line 5486 "xmlparse.c"
        var $232=(($231+12)&4294967295); //@line 5486 "xmlparse.c"
        HEAP[$232]=$229; //@line 5486 "xmlparse.c"
        HEAP[$iftmp_272]=0; //@line 5486 "xmlparse.c"
        __label__ = 54; break; //@line 5486 "xmlparse.c"
      case 53: // $bb55
        HEAP[$iftmp_272]=1; //@line 5486 "xmlparse.c"
        __label__ = 54; break; //@line 5486 "xmlparse.c"
      case 54: // $bb56
        var $233=HEAP[$iftmp_272]; //@line 5486 "xmlparse.c"
        var $toBool57=reSign(($233), 8, 0)!=0; //@line 5486 "xmlparse.c"
        if ($toBool57) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 5486 "xmlparse.c"
      case 55: // $bb58
        HEAP[$0]=0; //@line 5487 "xmlparse.c"
        __label__ = 59; break; //@line 5487 "xmlparse.c"
      case 56: // $bb59
        var $234=HEAP[$s]; //@line 5488 "xmlparse.c"
        var $235=(($234+1)&4294967295); //@line 5488 "xmlparse.c"
        HEAP[$s]=$235; //@line 5488 "xmlparse.c"
        __label__ = 57; break; //@line 5488 "xmlparse.c"
      case 57: // $bb60
        var $236=HEAP[$context_addr]; //@line 5439 "xmlparse.c"
        var $237=HEAP[$236]; //@line 5439 "xmlparse.c"
        var $238=reSign(($237), 8, 0)!=0; //@line 5439 "xmlparse.c"
        if ($238) { __label__ = 1; break; } else { __label__ = 58; break; } //@line 5439 "xmlparse.c"
      case 58: // $bb61
        HEAP[$0]=1; //@line 5491 "xmlparse.c"
        __label__ = 59; break; //@line 5491 "xmlparse.c"
      case 59: // $bb62
        var $239=HEAP[$0]; //@line 5443 "xmlparse.c"
        HEAP[$retval]=$239; //@line 5443 "xmlparse.c"
        __label__ = 60; break; //@line 5443 "xmlparse.c"
      case 60: // $return
        var $retval63=HEAP[$retval]; //@line 5443 "xmlparse.c"
        var $retval6364=((($retval63)) & 255); //@line 5443 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval6364; //@line 5443 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normalizePublicId($publicId) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $publicId_addr=__stackBase__;
        var $p=__stackBase__+4;
        var $s=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$publicId_addr]=$publicId;
        var $0=HEAP[$publicId_addr]; //@line 5497 "xmlparse.c"
        HEAP[$p]=$0; //@line 5497 "xmlparse.c"
        var $1=HEAP[$publicId_addr]; //@line 5499 "xmlparse.c"
        HEAP[$s]=$1; //@line 5499 "xmlparse.c"
        __label__ = 8; break; //@line 5499 "xmlparse.c"
      case 1: // $bb
        var $2=HEAP[$s]; //@line 5500 "xmlparse.c"
        var $3=HEAP[$2]; //@line 5500 "xmlparse.c"
        var $4=reSign(($3), 8, 0); //@line 5500 "xmlparse.c"
        if ($4 == 10) {
          __label__ = 2; break;
        }
        else if ($4 == 13) {
          __label__ = 2; break;
        }
        else if ($4 == 32) {
          __label__ = 2; break;
        }
        else {
        __label__ = 6; break;
        }
        
      case 2: // $bb1
        var $5=HEAP[$p]; //@line 5504 "xmlparse.c"
        var $6=HEAP[$publicId_addr]; //@line 5504 "xmlparse.c"
        var $7=($5)!=($6); //@line 5504 "xmlparse.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 5504 "xmlparse.c"
      case 3: // $bb2
        var $8=HEAP[$p]; //@line 5504 "xmlparse.c"
        var $9=(($8+-1)&4294967295); //@line 5504 "xmlparse.c"
        var $10=HEAP[$9]; //@line 5504 "xmlparse.c"
        var $11=reSign(($10), 8, 0)!=32; //@line 5504 "xmlparse.c"
        if ($11) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 5504 "xmlparse.c"
      case 4: // $bb3
        var $12=HEAP[$p]; //@line 5505 "xmlparse.c"
        HEAP[$12]=32; //@line 5505 "xmlparse.c"
        var $13=HEAP[$p]; //@line 5505 "xmlparse.c"
        var $14=(($13+1)&4294967295); //@line 5505 "xmlparse.c"
        HEAP[$p]=$14; //@line 5505 "xmlparse.c"
        __label__ = 5; break; //@line 5505 "xmlparse.c"
      case 5: // $bb4
        __label__ = 7; break; //@line 5505 "xmlparse.c"
      case 6: // $bb5
        var $15=HEAP[$s]; //@line 5508 "xmlparse.c"
        var $16=HEAP[$15]; //@line 5508 "xmlparse.c"
        var $17=HEAP[$p]; //@line 5508 "xmlparse.c"
        HEAP[$17]=$16; //@line 5508 "xmlparse.c"
        var $18=HEAP[$p]; //@line 5508 "xmlparse.c"
        var $19=(($18+1)&4294967295); //@line 5508 "xmlparse.c"
        HEAP[$p]=$19; //@line 5508 "xmlparse.c"
        __label__ = 7; break; //@line 5508 "xmlparse.c"
      case 7: // $bb6
        var $20=HEAP[$s]; //@line 5499 "xmlparse.c"
        var $21=(($20+1)&4294967295); //@line 5499 "xmlparse.c"
        HEAP[$s]=$21; //@line 5499 "xmlparse.c"
        __label__ = 8; break; //@line 5499 "xmlparse.c"
      case 8: // $bb7
        var $22=HEAP[$s]; //@line 5499 "xmlparse.c"
        var $23=HEAP[$22]; //@line 5499 "xmlparse.c"
        var $24=reSign(($23), 8, 0)!=0; //@line 5499 "xmlparse.c"
        if ($24) { __label__ = 1; break; } else { __label__ = 9; break; } //@line 5499 "xmlparse.c"
      case 9: // $bb8
        var $25=HEAP[$p]; //@line 5511 "xmlparse.c"
        var $26=HEAP[$publicId_addr]; //@line 5511 "xmlparse.c"
        var $27=($25)!=($26); //@line 5511 "xmlparse.c"
        if ($27) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 5511 "xmlparse.c"
      case 10: // $bb9
        var $28=HEAP[$p]; //@line 5511 "xmlparse.c"
        var $29=(($28+-1)&4294967295); //@line 5511 "xmlparse.c"
        var $30=HEAP[$29]; //@line 5511 "xmlparse.c"
        var $31=reSign(($30), 8, 0)==32; //@line 5511 "xmlparse.c"
        if ($31) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 5511 "xmlparse.c"
      case 11: // $bb10
        var $32=HEAP[$p]; //@line 5512 "xmlparse.c"
        var $33=(($32+-1)&4294967295); //@line 5512 "xmlparse.c"
        HEAP[$p]=$33; //@line 5512 "xmlparse.c"
        __label__ = 12; break; //@line 5512 "xmlparse.c"
      case 12: // $bb11
        var $34=HEAP[$p]; //@line 5513 "xmlparse.c"
        HEAP[$34]=0; //@line 5513 "xmlparse.c"
        __label__ = 13; break; //@line 5514 "xmlparse.c"
      case 13: // $return
        STACKTOP = __stackBase__;
        return; //@line 5514 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _dtdCreate($ms) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $ms_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $p=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$ms_addr]=$ms;
        var $1=HEAP[$ms_addr]; //@line 5519 "xmlparse.c"
        var $2=(($1)&4294967295); //@line 5519 "xmlparse.c"
        var $3=HEAP[$2]; //@line 5519 "xmlparse.c"
        var $4=FUNCTION_TABLE[$3](168); //@line 5519 "xmlparse.c"
        var $5=$4; //@line 5519 "xmlparse.c"
        HEAP[$p]=$5; //@line 5519 "xmlparse.c"
        var $6=HEAP[$p]; //@line 5520 "xmlparse.c"
        var $7=($6)==0; //@line 5520 "xmlparse.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 5520 "xmlparse.c"
      case 1: // $bb
        var $8=HEAP[$p]; //@line 5521 "xmlparse.c"
        HEAP[$0]=$8; //@line 5521 "xmlparse.c"
        __label__ = 3; break; //@line 5521 "xmlparse.c"
      case 2: // $bb1
        var $9=HEAP[$p]; //@line 5522 "xmlparse.c"
        var $10=(($9+80)&4294967295); //@line 5522 "xmlparse.c"
        var $11=HEAP[$ms_addr]; //@line 5522 "xmlparse.c"
        _poolInit($10, $11); //@line 5522 "xmlparse.c"
        var $12=HEAP[$p]; //@line 5523 "xmlparse.c"
        var $13=(($12+104)&4294967295); //@line 5523 "xmlparse.c"
        var $14=HEAP[$ms_addr]; //@line 5523 "xmlparse.c"
        _poolInit($13, $14); //@line 5523 "xmlparse.c"
        var $15=HEAP[$p]; //@line 5524 "xmlparse.c"
        var $16=(($15)&4294967295); //@line 5524 "xmlparse.c"
        var $17=HEAP[$ms_addr]; //@line 5524 "xmlparse.c"
        _hashTableInit($16, $17); //@line 5524 "xmlparse.c"
        var $18=HEAP[$p]; //@line 5525 "xmlparse.c"
        var $19=(($18+20)&4294967295); //@line 5525 "xmlparse.c"
        var $20=HEAP[$ms_addr]; //@line 5525 "xmlparse.c"
        _hashTableInit($19, $20); //@line 5525 "xmlparse.c"
        var $21=HEAP[$p]; //@line 5526 "xmlparse.c"
        var $22=(($21+40)&4294967295); //@line 5526 "xmlparse.c"
        var $23=HEAP[$ms_addr]; //@line 5526 "xmlparse.c"
        _hashTableInit($22, $23); //@line 5526 "xmlparse.c"
        var $24=HEAP[$p]; //@line 5527 "xmlparse.c"
        var $25=(($24+60)&4294967295); //@line 5527 "xmlparse.c"
        var $26=HEAP[$ms_addr]; //@line 5527 "xmlparse.c"
        _hashTableInit($25, $26); //@line 5527 "xmlparse.c"
        var $27=HEAP[$p]; //@line 5532 "xmlparse.c"
        var $28=(($27+132)&4294967295); //@line 5532 "xmlparse.c"
        var $29=(($28)&4294967295); //@line 5532 "xmlparse.c"
        HEAP[$29]=0; //@line 5532 "xmlparse.c"
        var $30=HEAP[$p]; //@line 5533 "xmlparse.c"
        var $31=(($30+132)&4294967295); //@line 5533 "xmlparse.c"
        var $32=(($31+4)&4294967295); //@line 5533 "xmlparse.c"
        HEAP[$32]=0; //@line 5533 "xmlparse.c"
        var $33=HEAP[$p]; //@line 5535 "xmlparse.c"
        var $34=(($33+140)&4294967295); //@line 5535 "xmlparse.c"
        HEAP[$34]=0; //@line 5535 "xmlparse.c"
        var $35=HEAP[$p]; //@line 5536 "xmlparse.c"
        var $36=(($35+164)&4294967295); //@line 5536 "xmlparse.c"
        HEAP[$36]=0; //@line 5536 "xmlparse.c"
        var $37=HEAP[$p]; //@line 5537 "xmlparse.c"
        var $38=(($37+144)&4294967295); //@line 5537 "xmlparse.c"
        HEAP[$38]=0; //@line 5537 "xmlparse.c"
        var $39=HEAP[$p]; //@line 5538 "xmlparse.c"
        var $40=(($39+160)&4294967295); //@line 5538 "xmlparse.c"
        HEAP[$40]=0; //@line 5538 "xmlparse.c"
        var $41=HEAP[$p]; //@line 5539 "xmlparse.c"
        var $42=(($41+152)&4294967295); //@line 5539 "xmlparse.c"
        HEAP[$42]=0; //@line 5539 "xmlparse.c"
        var $43=HEAP[$p]; //@line 5540 "xmlparse.c"
        var $44=(($43+156)&4294967295); //@line 5540 "xmlparse.c"
        HEAP[$44]=0; //@line 5540 "xmlparse.c"
        var $45=HEAP[$p]; //@line 5541 "xmlparse.c"
        var $46=(($45+148)&4294967295); //@line 5541 "xmlparse.c"
        HEAP[$46]=0; //@line 5541 "xmlparse.c"
        var $47=HEAP[$p]; //@line 5543 "xmlparse.c"
        var $48=(($47+128)&4294967295); //@line 5543 "xmlparse.c"
        HEAP[$48]=1; //@line 5543 "xmlparse.c"
        var $49=HEAP[$p]; //@line 5544 "xmlparse.c"
        var $50=(($49+129)&4294967295); //@line 5544 "xmlparse.c"
        HEAP[$50]=0; //@line 5544 "xmlparse.c"
        var $51=HEAP[$p]; //@line 5545 "xmlparse.c"
        var $52=(($51+130)&4294967295); //@line 5545 "xmlparse.c"
        HEAP[$52]=0; //@line 5545 "xmlparse.c"
        var $53=HEAP[$p]; //@line 5546 "xmlparse.c"
        HEAP[$0]=$53; //@line 5546 "xmlparse.c"
        __label__ = 3; break; //@line 5546 "xmlparse.c"
      case 3: // $bb2
        var $54=HEAP[$0]; //@line 5521 "xmlparse.c"
        HEAP[$retval]=$54; //@line 5521 "xmlparse.c"
        __label__ = 4; break; //@line 5521 "xmlparse.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 5521 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 5521 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _dtdReset($p, $ms) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $p_addr=__stackBase__;
        var $ms_addr=__stackBase__+4;
        var $iter=__stackBase__+8;
        var $e=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$p_addr]=$p;
        HEAP[$ms_addr]=$ms;
        var $0=HEAP[$p_addr]; //@line 5553 "xmlparse.c"
        var $1=(($0+20)&4294967295); //@line 5553 "xmlparse.c"
        _hashTableIterInit($iter, $1); //@line 5553 "xmlparse.c"
        __label__ = 1; break; //@line 5553 "xmlparse.c"
      case 1: // $bb
        var $2=_hashTableIterNext($iter); //@line 5555 "xmlparse.c"
        var $3=$2; //@line 5555 "xmlparse.c"
        HEAP[$e]=$3; //@line 5555 "xmlparse.c"
        var $4=HEAP[$e]; //@line 5556 "xmlparse.c"
        var $5=($4)==0; //@line 5556 "xmlparse.c"
        if ($5) { __label__ = 5; break; } else { __label__ = 2; break; } //@line 5556 "xmlparse.c"
      case 2: // $bb1
        var $6=HEAP[$e]; //@line 5558 "xmlparse.c"
        var $7=(($6+16)&4294967295); //@line 5558 "xmlparse.c"
        var $8=HEAP[$7]; //@line 5558 "xmlparse.c"
        var $9=((($8))|0)!=0; //@line 5558 "xmlparse.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 5558 "xmlparse.c"
      case 3: // $bb2
        var $10=HEAP[$ms_addr]; //@line 5559 "xmlparse.c"
        var $11=(($10+8)&4294967295); //@line 5559 "xmlparse.c"
        var $12=HEAP[$11]; //@line 5559 "xmlparse.c"
        var $13=HEAP[$e]; //@line 5559 "xmlparse.c"
        var $14=(($13+20)&4294967295); //@line 5559 "xmlparse.c"
        var $15=HEAP[$14]; //@line 5559 "xmlparse.c"
        var $16=$15; //@line 5559 "xmlparse.c"
        FUNCTION_TABLE[$12]($16); //@line 5559 "xmlparse.c"
        __label__ = 4; break; //@line 5559 "xmlparse.c"
      case 4: // $bb3
        __label__ = 1; break; //@line 5559 "xmlparse.c"
      case 5: // $bb4
        var $17=HEAP[$p_addr]; //@line 5561 "xmlparse.c"
        var $18=(($17)&4294967295); //@line 5561 "xmlparse.c"
        _hashTableClear($18); //@line 5561 "xmlparse.c"
        var $19=HEAP[$p_addr]; //@line 5566 "xmlparse.c"
        var $20=(($19+20)&4294967295); //@line 5566 "xmlparse.c"
        _hashTableClear($20); //@line 5566 "xmlparse.c"
        var $21=HEAP[$p_addr]; //@line 5567 "xmlparse.c"
        var $22=(($21+40)&4294967295); //@line 5567 "xmlparse.c"
        _hashTableClear($22); //@line 5567 "xmlparse.c"
        var $23=HEAP[$p_addr]; //@line 5568 "xmlparse.c"
        var $24=(($23+60)&4294967295); //@line 5568 "xmlparse.c"
        _hashTableClear($24); //@line 5568 "xmlparse.c"
        var $25=HEAP[$p_addr]; //@line 5569 "xmlparse.c"
        var $26=(($25+80)&4294967295); //@line 5569 "xmlparse.c"
        _poolClear($26); //@line 5569 "xmlparse.c"
        var $27=HEAP[$p_addr]; //@line 5570 "xmlparse.c"
        var $28=(($27+104)&4294967295); //@line 5570 "xmlparse.c"
        _poolClear($28); //@line 5570 "xmlparse.c"
        var $29=HEAP[$p_addr]; //@line 5571 "xmlparse.c"
        var $30=(($29+132)&4294967295); //@line 5571 "xmlparse.c"
        var $31=(($30)&4294967295); //@line 5571 "xmlparse.c"
        HEAP[$31]=0; //@line 5571 "xmlparse.c"
        var $32=HEAP[$p_addr]; //@line 5572 "xmlparse.c"
        var $33=(($32+132)&4294967295); //@line 5572 "xmlparse.c"
        var $34=(($33+4)&4294967295); //@line 5572 "xmlparse.c"
        HEAP[$34]=0; //@line 5572 "xmlparse.c"
        var $35=HEAP[$p_addr]; //@line 5574 "xmlparse.c"
        var $36=(($35+140)&4294967295); //@line 5574 "xmlparse.c"
        HEAP[$36]=0; //@line 5574 "xmlparse.c"
        var $37=HEAP[$ms_addr]; //@line 5576 "xmlparse.c"
        var $38=(($37+8)&4294967295); //@line 5576 "xmlparse.c"
        var $39=HEAP[$38]; //@line 5576 "xmlparse.c"
        var $40=HEAP[$p_addr]; //@line 5576 "xmlparse.c"
        var $41=(($40+164)&4294967295); //@line 5576 "xmlparse.c"
        var $42=HEAP[$41]; //@line 5576 "xmlparse.c"
        var $43=$42; //@line 5576 "xmlparse.c"
        FUNCTION_TABLE[$39]($43); //@line 5576 "xmlparse.c"
        var $44=HEAP[$p_addr]; //@line 5577 "xmlparse.c"
        var $45=(($44+164)&4294967295); //@line 5577 "xmlparse.c"
        HEAP[$45]=0; //@line 5577 "xmlparse.c"
        var $46=HEAP[$ms_addr]; //@line 5578 "xmlparse.c"
        var $47=(($46+8)&4294967295); //@line 5578 "xmlparse.c"
        var $48=HEAP[$47]; //@line 5578 "xmlparse.c"
        var $49=HEAP[$p_addr]; //@line 5578 "xmlparse.c"
        var $50=(($49+144)&4294967295); //@line 5578 "xmlparse.c"
        var $51=HEAP[$50]; //@line 5578 "xmlparse.c"
        var $52=$51; //@line 5578 "xmlparse.c"
        FUNCTION_TABLE[$48]($52); //@line 5578 "xmlparse.c"
        var $53=HEAP[$p_addr]; //@line 5579 "xmlparse.c"
        var $54=(($53+144)&4294967295); //@line 5579 "xmlparse.c"
        HEAP[$54]=0; //@line 5579 "xmlparse.c"
        var $55=HEAP[$p_addr]; //@line 5581 "xmlparse.c"
        var $56=(($55+160)&4294967295); //@line 5581 "xmlparse.c"
        HEAP[$56]=0; //@line 5581 "xmlparse.c"
        var $57=HEAP[$p_addr]; //@line 5582 "xmlparse.c"
        var $58=(($57+152)&4294967295); //@line 5582 "xmlparse.c"
        HEAP[$58]=0; //@line 5582 "xmlparse.c"
        var $59=HEAP[$p_addr]; //@line 5583 "xmlparse.c"
        var $60=(($59+156)&4294967295); //@line 5583 "xmlparse.c"
        HEAP[$60]=0; //@line 5583 "xmlparse.c"
        var $61=HEAP[$p_addr]; //@line 5584 "xmlparse.c"
        var $62=(($61+148)&4294967295); //@line 5584 "xmlparse.c"
        HEAP[$62]=0; //@line 5584 "xmlparse.c"
        var $63=HEAP[$p_addr]; //@line 5586 "xmlparse.c"
        var $64=(($63+128)&4294967295); //@line 5586 "xmlparse.c"
        HEAP[$64]=1; //@line 5586 "xmlparse.c"
        var $65=HEAP[$p_addr]; //@line 5587 "xmlparse.c"
        var $66=(($65+129)&4294967295); //@line 5587 "xmlparse.c"
        HEAP[$66]=0; //@line 5587 "xmlparse.c"
        var $67=HEAP[$p_addr]; //@line 5588 "xmlparse.c"
        var $68=(($67+130)&4294967295); //@line 5588 "xmlparse.c"
        HEAP[$68]=0; //@line 5588 "xmlparse.c"
        __label__ = 6; break; //@line 5589 "xmlparse.c"
      case 6: // $return
        STACKTOP = __stackBase__;
        return; //@line 5589 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _dtdDestroy($p, $isDocEntity, $ms) {
    var __stackBase__  = STACKTOP; STACKTOP += 21; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 21);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $p_addr=__stackBase__;
        var $isDocEntity_addr=__stackBase__+4;
        var $ms_addr=__stackBase__+5;
        var $iter=__stackBase__+9;
        var $e=__stackBase__+17;
        var $_alloca_point_=0;
        HEAP[$p_addr]=$p;
        HEAP[$isDocEntity_addr]=$isDocEntity;
        HEAP[$ms_addr]=$ms;
        var $0=HEAP[$p_addr]; //@line 5595 "xmlparse.c"
        var $1=(($0+20)&4294967295); //@line 5595 "xmlparse.c"
        _hashTableIterInit($iter, $1); //@line 5595 "xmlparse.c"
        __label__ = 1; break; //@line 5595 "xmlparse.c"
      case 1: // $bb
        var $2=_hashTableIterNext($iter); //@line 5597 "xmlparse.c"
        var $3=$2; //@line 5597 "xmlparse.c"
        HEAP[$e]=$3; //@line 5597 "xmlparse.c"
        var $4=HEAP[$e]; //@line 5598 "xmlparse.c"
        var $5=($4)==0; //@line 5598 "xmlparse.c"
        if ($5) { __label__ = 5; break; } else { __label__ = 2; break; } //@line 5598 "xmlparse.c"
      case 2: // $bb1
        var $6=HEAP[$e]; //@line 5600 "xmlparse.c"
        var $7=(($6+16)&4294967295); //@line 5600 "xmlparse.c"
        var $8=HEAP[$7]; //@line 5600 "xmlparse.c"
        var $9=((($8))|0)!=0; //@line 5600 "xmlparse.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 5600 "xmlparse.c"
      case 3: // $bb2
        var $10=HEAP[$ms_addr]; //@line 5601 "xmlparse.c"
        var $11=(($10+8)&4294967295); //@line 5601 "xmlparse.c"
        var $12=HEAP[$11]; //@line 5601 "xmlparse.c"
        var $13=HEAP[$e]; //@line 5601 "xmlparse.c"
        var $14=(($13+20)&4294967295); //@line 5601 "xmlparse.c"
        var $15=HEAP[$14]; //@line 5601 "xmlparse.c"
        var $16=$15; //@line 5601 "xmlparse.c"
        FUNCTION_TABLE[$12]($16); //@line 5601 "xmlparse.c"
        __label__ = 4; break; //@line 5601 "xmlparse.c"
      case 4: // $bb3
        __label__ = 1; break; //@line 5601 "xmlparse.c"
      case 5: // $bb4
        var $17=HEAP[$p_addr]; //@line 5603 "xmlparse.c"
        var $18=(($17)&4294967295); //@line 5603 "xmlparse.c"
        _hashTableDestroy($18); //@line 5603 "xmlparse.c"
        var $19=HEAP[$p_addr]; //@line 5607 "xmlparse.c"
        var $20=(($19+20)&4294967295); //@line 5607 "xmlparse.c"
        _hashTableDestroy($20); //@line 5607 "xmlparse.c"
        var $21=HEAP[$p_addr]; //@line 5608 "xmlparse.c"
        var $22=(($21+40)&4294967295); //@line 5608 "xmlparse.c"
        _hashTableDestroy($22); //@line 5608 "xmlparse.c"
        var $23=HEAP[$p_addr]; //@line 5609 "xmlparse.c"
        var $24=(($23+60)&4294967295); //@line 5609 "xmlparse.c"
        _hashTableDestroy($24); //@line 5609 "xmlparse.c"
        var $25=HEAP[$p_addr]; //@line 5610 "xmlparse.c"
        var $26=(($25+80)&4294967295); //@line 5610 "xmlparse.c"
        _poolDestroy($26); //@line 5610 "xmlparse.c"
        var $27=HEAP[$p_addr]; //@line 5611 "xmlparse.c"
        var $28=(($27+104)&4294967295); //@line 5611 "xmlparse.c"
        _poolDestroy($28); //@line 5611 "xmlparse.c"
        var $29=HEAP[$isDocEntity_addr]; //@line 5612 "xmlparse.c"
        var $30=reSign(($29), 8, 0)!=0; //@line 5612 "xmlparse.c"
        if ($30) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 5612 "xmlparse.c"
      case 6: // $bb5
        var $31=HEAP[$ms_addr]; //@line 5613 "xmlparse.c"
        var $32=(($31+8)&4294967295); //@line 5613 "xmlparse.c"
        var $33=HEAP[$32]; //@line 5613 "xmlparse.c"
        var $34=HEAP[$p_addr]; //@line 5613 "xmlparse.c"
        var $35=(($34+164)&4294967295); //@line 5613 "xmlparse.c"
        var $36=HEAP[$35]; //@line 5613 "xmlparse.c"
        var $37=$36; //@line 5613 "xmlparse.c"
        FUNCTION_TABLE[$33]($37); //@line 5613 "xmlparse.c"
        var $38=HEAP[$ms_addr]; //@line 5614 "xmlparse.c"
        var $39=(($38+8)&4294967295); //@line 5614 "xmlparse.c"
        var $40=HEAP[$39]; //@line 5614 "xmlparse.c"
        var $41=HEAP[$p_addr]; //@line 5614 "xmlparse.c"
        var $42=(($41+144)&4294967295); //@line 5614 "xmlparse.c"
        var $43=HEAP[$42]; //@line 5614 "xmlparse.c"
        var $44=$43; //@line 5614 "xmlparse.c"
        FUNCTION_TABLE[$40]($44); //@line 5614 "xmlparse.c"
        __label__ = 7; break; //@line 5614 "xmlparse.c"
      case 7: // $bb6
        var $45=HEAP[$ms_addr]; //@line 5616 "xmlparse.c"
        var $46=(($45+8)&4294967295); //@line 5616 "xmlparse.c"
        var $47=HEAP[$46]; //@line 5616 "xmlparse.c"
        var $48=HEAP[$p_addr]; //@line 5616 "xmlparse.c"
        var $49=$48; //@line 5616 "xmlparse.c"
        FUNCTION_TABLE[$47]($49); //@line 5616 "xmlparse.c"
        __label__ = 8; break; //@line 5617 "xmlparse.c"
      case 8: // $return
        STACKTOP = __stackBase__;
        return; //@line 5617 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _dtdCopy($newDtd, $oldDtd, $ms) {
    var __stackBase__  = STACKTOP; STACKTOP += 65; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 65);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $newDtd_addr=__stackBase__;
        var $oldDtd_addr=__stackBase__+4;
        var $ms_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $iftmp_273=__stackBase__+16;
        var $0=__stackBase__+17;
        var $iter=__stackBase__+21;
        var $name=__stackBase__+29;
        var $oldP=__stackBase__+33;
        var $newA=__stackBase__+37;
        var $name8=__stackBase__+41;
        var $oldA=__stackBase__+45;
        var $i=__stackBase__+49;
        var $newE=__stackBase__+53;
        var $name26=__stackBase__+57;
        var $oldE=__stackBase__+61;
        var $_alloca_point_=0;
        HEAP[$newDtd_addr]=$newDtd;
        HEAP[$oldDtd_addr]=$oldDtd;
        HEAP[$ms_addr]=$ms;
        var $1=HEAP[$oldDtd_addr]; //@line 5629 "xmlparse.c"
        var $2=(($1+60)&4294967295); //@line 5629 "xmlparse.c"
        _hashTableIterInit($iter, $2); //@line 5629 "xmlparse.c"
        __label__ = 1; break; //@line 5629 "xmlparse.c"
      case 1: // $bb
        var $3=_hashTableIterNext($iter); //@line 5632 "xmlparse.c"
        var $4=$3; //@line 5632 "xmlparse.c"
        HEAP[$oldP]=$4; //@line 5632 "xmlparse.c"
        var $5=HEAP[$oldP]; //@line 5633 "xmlparse.c"
        var $6=($5)==0; //@line 5633 "xmlparse.c"
        if ($6) { __label__ = 7; break; } else { __label__ = 2; break; } //@line 5633 "xmlparse.c"
      case 2: // $bb1
        var $7=HEAP[$oldP]; //@line 5635 "xmlparse.c"
        var $8=(($7)&4294967295); //@line 5635 "xmlparse.c"
        var $9=HEAP[$8]; //@line 5635 "xmlparse.c"
        var $10=HEAP[$newDtd_addr]; //@line 5635 "xmlparse.c"
        var $11=(($10+80)&4294967295); //@line 5635 "xmlparse.c"
        var $12=_poolCopyString($11, $9); //@line 5635 "xmlparse.c"
        HEAP[$name]=$12; //@line 5635 "xmlparse.c"
        var $13=HEAP[$name]; //@line 5636 "xmlparse.c"
        var $14=($13)==0; //@line 5636 "xmlparse.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 5636 "xmlparse.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 5637 "xmlparse.c"
        __label__ = 49; break; //@line 5637 "xmlparse.c"
      case 4: // $bb3
        var $15=HEAP[$newDtd_addr]; //@line 5638 "xmlparse.c"
        var $16=(($15+60)&4294967295); //@line 5638 "xmlparse.c"
        var $17=HEAP[$name]; //@line 5638 "xmlparse.c"
        var $18=_lookup($16, $17, 8); //@line 5638 "xmlparse.c"
        var $19=($18)==0; //@line 5638 "xmlparse.c"
        if ($19) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5638 "xmlparse.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 5639 "xmlparse.c"
        __label__ = 49; break; //@line 5639 "xmlparse.c"
      case 6: // $bb5
        __label__ = 1; break; //@line 5639 "xmlparse.c"
      case 7: // $bb6
        var $20=HEAP[$oldDtd_addr]; //@line 5642 "xmlparse.c"
        var $21=(($20+40)&4294967295); //@line 5642 "xmlparse.c"
        _hashTableIterInit($iter, $21); //@line 5642 "xmlparse.c"
        __label__ = 8; break; //@line 5642 "xmlparse.c"
      case 8: // $bb7
        var $22=_hashTableIterNext($iter); //@line 5649 "xmlparse.c"
        var $23=$22; //@line 5649 "xmlparse.c"
        HEAP[$oldA]=$23; //@line 5649 "xmlparse.c"
        var $24=HEAP[$oldA]; //@line 5651 "xmlparse.c"
        var $25=($24)==0; //@line 5651 "xmlparse.c"
        if ($25) { __label__ = 24; break; } else { __label__ = 9; break; } //@line 5651 "xmlparse.c"
      case 9: // $bb9
        var $26=HEAP[$newDtd_addr]; //@line 5654 "xmlparse.c"
        var $27=(($26+80)&4294967295); //@line 5654 "xmlparse.c"
        var $28=(($27+12)&4294967295); //@line 5654 "xmlparse.c"
        var $29=HEAP[$28]; //@line 5654 "xmlparse.c"
        var $30=HEAP[$newDtd_addr]; //@line 5654 "xmlparse.c"
        var $31=(($30+80)&4294967295); //@line 5654 "xmlparse.c"
        var $32=(($31+8)&4294967295); //@line 5654 "xmlparse.c"
        var $33=HEAP[$32]; //@line 5654 "xmlparse.c"
        var $34=($29)!=($33); //@line 5654 "xmlparse.c"
        if ($34) { __label__ = 11; break; } else { __label__ = 10; break; } //@line 5654 "xmlparse.c"
      case 10: // $bb10
        var $35=HEAP[$newDtd_addr]; //@line 5654 "xmlparse.c"
        var $36=(($35+80)&4294967295); //@line 5654 "xmlparse.c"
        var $37=_poolGrow($36); //@line 5654 "xmlparse.c"
        var $38=reSign(($37), 8, 0)!=0; //@line 5654 "xmlparse.c"
        if ($38) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 5654 "xmlparse.c"
      case 11: // $bb11
        var $39=HEAP[$newDtd_addr]; //@line 5654 "xmlparse.c"
        var $40=(($39+80)&4294967295); //@line 5654 "xmlparse.c"
        var $41=(($40+12)&4294967295); //@line 5654 "xmlparse.c"
        var $42=HEAP[$41]; //@line 5654 "xmlparse.c"
        HEAP[$42]=0; //@line 5654 "xmlparse.c"
        var $43=(($42+1)&4294967295); //@line 5654 "xmlparse.c"
        var $44=HEAP[$newDtd_addr]; //@line 5654 "xmlparse.c"
        var $45=(($44+80)&4294967295); //@line 5654 "xmlparse.c"
        var $46=(($45+12)&4294967295); //@line 5654 "xmlparse.c"
        HEAP[$46]=$43; //@line 5654 "xmlparse.c"
        HEAP[$iftmp_273]=0; //@line 5654 "xmlparse.c"
        __label__ = 13; break; //@line 5654 "xmlparse.c"
      case 12: // $bb12
        HEAP[$iftmp_273]=1; //@line 5654 "xmlparse.c"
        __label__ = 13; break; //@line 5654 "xmlparse.c"
      case 13: // $bb13
        var $47=HEAP[$iftmp_273]; //@line 5654 "xmlparse.c"
        var $toBool=reSign(($47), 8, 0)!=0; //@line 5654 "xmlparse.c"
        if ($toBool) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 5654 "xmlparse.c"
      case 14: // $bb14
        HEAP[$0]=0; //@line 5655 "xmlparse.c"
        __label__ = 49; break; //@line 5655 "xmlparse.c"
      case 15: // $bb15
        var $48=HEAP[$oldA]; //@line 5656 "xmlparse.c"
        var $49=(($48)&4294967295); //@line 5656 "xmlparse.c"
        var $50=HEAP[$49]; //@line 5656 "xmlparse.c"
        var $51=HEAP[$newDtd_addr]; //@line 5656 "xmlparse.c"
        var $52=(($51+80)&4294967295); //@line 5656 "xmlparse.c"
        var $53=_poolCopyString($52, $50); //@line 5656 "xmlparse.c"
        HEAP[$name8]=$53; //@line 5656 "xmlparse.c"
        var $54=HEAP[$name8]; //@line 5657 "xmlparse.c"
        var $55=($54)==0; //@line 5657 "xmlparse.c"
        if ($55) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 5657 "xmlparse.c"
      case 16: // $bb16
        HEAP[$0]=0; //@line 5658 "xmlparse.c"
        __label__ = 49; break; //@line 5658 "xmlparse.c"
      case 17: // $bb17
        var $56=HEAP[$name8]; //@line 5659 "xmlparse.c"
        var $57=(($56+1)&4294967295); //@line 5659 "xmlparse.c"
        HEAP[$name8]=$57; //@line 5659 "xmlparse.c"
        var $58=HEAP[$newDtd_addr]; //@line 5660 "xmlparse.c"
        var $59=(($58+40)&4294967295); //@line 5660 "xmlparse.c"
        var $60=HEAP[$name8]; //@line 5660 "xmlparse.c"
        var $61=_lookup($59, $60, 12); //@line 5660 "xmlparse.c"
        var $62=$61; //@line 5660 "xmlparse.c"
        HEAP[$newA]=$62; //@line 5660 "xmlparse.c"
        var $63=HEAP[$newA]; //@line 5662 "xmlparse.c"
        var $64=($63)==0; //@line 5662 "xmlparse.c"
        if ($64) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 5662 "xmlparse.c"
      case 18: // $bb18
        HEAP[$0]=0; //@line 5663 "xmlparse.c"
        __label__ = 49; break; //@line 5663 "xmlparse.c"
      case 19: // $bb19
        var $65=HEAP[$oldA]; //@line 5664 "xmlparse.c"
        var $66=(($65+8)&4294967295); //@line 5664 "xmlparse.c"
        var $67=HEAP[$66]; //@line 5664 "xmlparse.c"
        var $68=HEAP[$newA]; //@line 5664 "xmlparse.c"
        var $69=(($68+8)&4294967295); //@line 5664 "xmlparse.c"
        HEAP[$69]=$67; //@line 5664 "xmlparse.c"
        var $70=HEAP[$oldA]; //@line 5665 "xmlparse.c"
        var $71=(($70+4)&4294967295); //@line 5665 "xmlparse.c"
        var $72=HEAP[$71]; //@line 5665 "xmlparse.c"
        var $73=($72)!=0; //@line 5665 "xmlparse.c"
        if ($73) { __label__ = 20; break; } else { __label__ = 23; break; } //@line 5665 "xmlparse.c"
      case 20: // $bb20
        var $74=HEAP[$oldA]; //@line 5666 "xmlparse.c"
        var $75=(($74+9)&4294967295); //@line 5666 "xmlparse.c"
        var $76=HEAP[$75]; //@line 5666 "xmlparse.c"
        var $77=HEAP[$newA]; //@line 5666 "xmlparse.c"
        var $78=(($77+9)&4294967295); //@line 5666 "xmlparse.c"
        HEAP[$78]=$76; //@line 5666 "xmlparse.c"
        var $79=HEAP[$oldA]; //@line 5667 "xmlparse.c"
        var $80=(($79+4)&4294967295); //@line 5667 "xmlparse.c"
        var $81=HEAP[$80]; //@line 5667 "xmlparse.c"
        var $82=HEAP[$oldDtd_addr]; //@line 5667 "xmlparse.c"
        var $83=(($82+132)&4294967295); //@line 5667 "xmlparse.c"
        var $84=($81)==($83); //@line 5667 "xmlparse.c"
        if ($84) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 5667 "xmlparse.c"
      case 21: // $bb21
        var $85=HEAP[$newDtd_addr]; //@line 5668 "xmlparse.c"
        var $86=(($85+132)&4294967295); //@line 5668 "xmlparse.c"
        var $87=HEAP[$newA]; //@line 5668 "xmlparse.c"
        var $88=(($87+4)&4294967295); //@line 5668 "xmlparse.c"
        HEAP[$88]=$86; //@line 5668 "xmlparse.c"
        __label__ = 23; break; //@line 5668 "xmlparse.c"
      case 22: // $bb22
        var $89=HEAP[$oldA]; //@line 5670 "xmlparse.c"
        var $90=(($89+4)&4294967295); //@line 5670 "xmlparse.c"
        var $91=HEAP[$90]; //@line 5670 "xmlparse.c"
        var $92=(($91)&4294967295); //@line 5670 "xmlparse.c"
        var $93=HEAP[$92]; //@line 5670 "xmlparse.c"
        var $94=HEAP[$newDtd_addr]; //@line 5670 "xmlparse.c"
        var $95=(($94+60)&4294967295); //@line 5670 "xmlparse.c"
        var $96=_lookup($95, $93, 0); //@line 5670 "xmlparse.c"
        var $97=$96; //@line 5670 "xmlparse.c"
        var $98=HEAP[$newA]; //@line 5670 "xmlparse.c"
        var $99=(($98+4)&4294967295); //@line 5670 "xmlparse.c"
        HEAP[$99]=$97; //@line 5670 "xmlparse.c"
        __label__ = 23; break; //@line 5670 "xmlparse.c"
      case 23: // $bb23
        __label__ = 8; break; //@line 5670 "xmlparse.c"
      case 24: // $bb24
        var $100=HEAP[$oldDtd_addr]; //@line 5677 "xmlparse.c"
        var $101=(($100+20)&4294967295); //@line 5677 "xmlparse.c"
        _hashTableIterInit($iter, $101); //@line 5677 "xmlparse.c"
        __label__ = 25; break; //@line 5677 "xmlparse.c"
      case 25: // $bb25
        var $102=_hashTableIterNext($iter); //@line 5683 "xmlparse.c"
        var $103=$102; //@line 5683 "xmlparse.c"
        HEAP[$oldE]=$103; //@line 5683 "xmlparse.c"
        var $104=HEAP[$oldE]; //@line 5684 "xmlparse.c"
        var $105=($104)==0; //@line 5684 "xmlparse.c"
        if ($105) { __label__ = 46; break; } else { __label__ = 26; break; } //@line 5684 "xmlparse.c"
      case 26: // $bb27
        var $106=HEAP[$oldE]; //@line 5686 "xmlparse.c"
        var $107=(($106)&4294967295); //@line 5686 "xmlparse.c"
        var $108=HEAP[$107]; //@line 5686 "xmlparse.c"
        var $109=HEAP[$newDtd_addr]; //@line 5686 "xmlparse.c"
        var $110=(($109+80)&4294967295); //@line 5686 "xmlparse.c"
        var $111=_poolCopyString($110, $108); //@line 5686 "xmlparse.c"
        HEAP[$name26]=$111; //@line 5686 "xmlparse.c"
        var $112=HEAP[$name26]; //@line 5687 "xmlparse.c"
        var $113=($112)==0; //@line 5687 "xmlparse.c"
        if ($113) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 5687 "xmlparse.c"
      case 27: // $bb28
        HEAP[$0]=0; //@line 5688 "xmlparse.c"
        __label__ = 49; break; //@line 5688 "xmlparse.c"
      case 28: // $bb29
        var $114=HEAP[$newDtd_addr]; //@line 5689 "xmlparse.c"
        var $115=(($114+20)&4294967295); //@line 5689 "xmlparse.c"
        var $116=HEAP[$name26]; //@line 5689 "xmlparse.c"
        var $117=_lookup($115, $116, 24); //@line 5689 "xmlparse.c"
        var $118=$117; //@line 5689 "xmlparse.c"
        HEAP[$newE]=$118; //@line 5689 "xmlparse.c"
        var $119=HEAP[$newE]; //@line 5691 "xmlparse.c"
        var $120=($119)==0; //@line 5691 "xmlparse.c"
        if ($120) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 5691 "xmlparse.c"
      case 29: // $bb30
        HEAP[$0]=0; //@line 5692 "xmlparse.c"
        __label__ = 49; break; //@line 5692 "xmlparse.c"
      case 30: // $bb31
        var $121=HEAP[$oldE]; //@line 5693 "xmlparse.c"
        var $122=(($121+12)&4294967295); //@line 5693 "xmlparse.c"
        var $123=HEAP[$122]; //@line 5693 "xmlparse.c"
        var $124=((($123))|0)!=0; //@line 5693 "xmlparse.c"
        if ($124) { __label__ = 31; break; } else { __label__ = 33; break; } //@line 5693 "xmlparse.c"
      case 31: // $bb32
        var $125=HEAP[$ms_addr]; //@line 5694 "xmlparse.c"
        var $126=(($125)&4294967295); //@line 5694 "xmlparse.c"
        var $127=HEAP[$126]; //@line 5694 "xmlparse.c"
        var $128=HEAP[$oldE]; //@line 5694 "xmlparse.c"
        var $129=(($128+12)&4294967295); //@line 5694 "xmlparse.c"
        var $130=HEAP[$129]; //@line 5694 "xmlparse.c"
        var $131=((($130) * 12)&4294967295); //@line 5694 "xmlparse.c"
        var $132=FUNCTION_TABLE[$127]($131); //@line 5694 "xmlparse.c"
        var $133=$132; //@line 5694 "xmlparse.c"
        var $134=HEAP[$newE]; //@line 5694 "xmlparse.c"
        var $135=(($134+20)&4294967295); //@line 5694 "xmlparse.c"
        HEAP[$135]=$133; //@line 5694 "xmlparse.c"
        var $136=HEAP[$newE]; //@line 5696 "xmlparse.c"
        var $137=(($136+20)&4294967295); //@line 5696 "xmlparse.c"
        var $138=HEAP[$137]; //@line 5696 "xmlparse.c"
        var $139=($138)==0; //@line 5696 "xmlparse.c"
        if ($139) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 5696 "xmlparse.c"
      case 32: // $bb33
        var $140=HEAP[$ms_addr]; //@line 5697 "xmlparse.c"
        var $141=(($140+8)&4294967295); //@line 5697 "xmlparse.c"
        var $142=HEAP[$141]; //@line 5697 "xmlparse.c"
        var $143=HEAP[$newE]; //@line 5697 "xmlparse.c"
        var $144=$143; //@line 5697 "xmlparse.c"
        FUNCTION_TABLE[$142]($144); //@line 5697 "xmlparse.c"
        HEAP[$0]=0; //@line 5698 "xmlparse.c"
        __label__ = 49; break; //@line 5698 "xmlparse.c"
      case 33: // $bb34
        var $145=HEAP[$oldE]; //@line 5701 "xmlparse.c"
        var $146=(($145+8)&4294967295); //@line 5701 "xmlparse.c"
        var $147=HEAP[$146]; //@line 5701 "xmlparse.c"
        var $148=($147)!=0; //@line 5701 "xmlparse.c"
        if ($148) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 5701 "xmlparse.c"
      case 34: // $bb35
        var $149=HEAP[$oldE]; //@line 5702 "xmlparse.c"
        var $150=(($149+8)&4294967295); //@line 5702 "xmlparse.c"
        var $151=HEAP[$150]; //@line 5702 "xmlparse.c"
        var $152=(($151)&4294967295); //@line 5702 "xmlparse.c"
        var $153=HEAP[$152]; //@line 5702 "xmlparse.c"
        var $154=HEAP[$newDtd_addr]; //@line 5702 "xmlparse.c"
        var $155=(($154+40)&4294967295); //@line 5702 "xmlparse.c"
        var $156=_lookup($155, $153, 0); //@line 5702 "xmlparse.c"
        var $157=$156; //@line 5702 "xmlparse.c"
        var $158=HEAP[$newE]; //@line 5702 "xmlparse.c"
        var $159=(($158+8)&4294967295); //@line 5702 "xmlparse.c"
        HEAP[$159]=$157; //@line 5702 "xmlparse.c"
        __label__ = 35; break; //@line 5702 "xmlparse.c"
      case 35: // $bb36
        var $160=HEAP[$oldE]; //@line 5704 "xmlparse.c"
        var $161=(($160+12)&4294967295); //@line 5704 "xmlparse.c"
        var $162=HEAP[$161]; //@line 5704 "xmlparse.c"
        var $163=HEAP[$newE]; //@line 5704 "xmlparse.c"
        var $164=(($163+12)&4294967295); //@line 5704 "xmlparse.c"
        HEAP[$164]=$162; //@line 5704 "xmlparse.c"
        var $165=HEAP[$newE]; //@line 5704 "xmlparse.c"
        var $166=(($165+12)&4294967295); //@line 5704 "xmlparse.c"
        var $167=HEAP[$166]; //@line 5704 "xmlparse.c"
        var $168=HEAP[$newE]; //@line 5704 "xmlparse.c"
        var $169=(($168+16)&4294967295); //@line 5704 "xmlparse.c"
        HEAP[$169]=$167; //@line 5704 "xmlparse.c"
        var $170=HEAP[$oldE]; //@line 5705 "xmlparse.c"
        var $171=(($170+4)&4294967295); //@line 5705 "xmlparse.c"
        var $172=HEAP[$171]; //@line 5705 "xmlparse.c"
        var $173=($172)!=0; //@line 5705 "xmlparse.c"
        if ($173) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 5705 "xmlparse.c"
      case 36: // $bb37
        var $174=HEAP[$oldE]; //@line 5706 "xmlparse.c"
        var $175=(($174+4)&4294967295); //@line 5706 "xmlparse.c"
        var $176=HEAP[$175]; //@line 5706 "xmlparse.c"
        var $177=(($176)&4294967295); //@line 5706 "xmlparse.c"
        var $178=HEAP[$177]; //@line 5706 "xmlparse.c"
        var $179=HEAP[$newDtd_addr]; //@line 5706 "xmlparse.c"
        var $180=(($179+60)&4294967295); //@line 5706 "xmlparse.c"
        var $181=_lookup($180, $178, 0); //@line 5706 "xmlparse.c"
        var $182=$181; //@line 5706 "xmlparse.c"
        var $183=HEAP[$newE]; //@line 5706 "xmlparse.c"
        var $184=(($183+4)&4294967295); //@line 5706 "xmlparse.c"
        HEAP[$184]=$182; //@line 5706 "xmlparse.c"
        __label__ = 37; break; //@line 5706 "xmlparse.c"
      case 37: // $bb38
        HEAP[$i]=0; //@line 5708 "xmlparse.c"
        __label__ = 44; break; //@line 5708 "xmlparse.c"
      case 38: // $bb39
        var $185=HEAP[$newE]; //@line 5709 "xmlparse.c"
        var $186=(($185+20)&4294967295); //@line 5709 "xmlparse.c"
        var $187=HEAP[$186]; //@line 5709 "xmlparse.c"
        var $188=HEAP[$i]; //@line 5709 "xmlparse.c"
        var $189=(($187+12*$188)&4294967295); //@line 5709 "xmlparse.c"
        var $190=HEAP[$oldE]; //@line 5709 "xmlparse.c"
        var $191=(($190+20)&4294967295); //@line 5709 "xmlparse.c"
        var $192=HEAP[$191]; //@line 5709 "xmlparse.c"
        var $193=HEAP[$i]; //@line 5709 "xmlparse.c"
        var $194=(($192+12*$193)&4294967295); //@line 5709 "xmlparse.c"
        var $195=(($194)&4294967295); //@line 5709 "xmlparse.c"
        var $196=HEAP[$195]; //@line 5709 "xmlparse.c"
        var $197=(($196)&4294967295); //@line 5709 "xmlparse.c"
        var $198=HEAP[$197]; //@line 5709 "xmlparse.c"
        var $199=HEAP[$newDtd_addr]; //@line 5709 "xmlparse.c"
        var $200=(($199+40)&4294967295); //@line 5709 "xmlparse.c"
        var $201=_lookup($200, $198, 0); //@line 5709 "xmlparse.c"
        var $202=$201; //@line 5709 "xmlparse.c"
        var $203=(($189)&4294967295); //@line 5709 "xmlparse.c"
        HEAP[$203]=$202; //@line 5709 "xmlparse.c"
        var $204=HEAP[$newE]; //@line 5711 "xmlparse.c"
        var $205=(($204+20)&4294967295); //@line 5711 "xmlparse.c"
        var $206=HEAP[$205]; //@line 5711 "xmlparse.c"
        var $207=HEAP[$i]; //@line 5711 "xmlparse.c"
        var $208=(($206+12*$207)&4294967295); //@line 5711 "xmlparse.c"
        var $209=HEAP[$oldE]; //@line 5711 "xmlparse.c"
        var $210=(($209+20)&4294967295); //@line 5711 "xmlparse.c"
        var $211=HEAP[$210]; //@line 5711 "xmlparse.c"
        var $212=HEAP[$i]; //@line 5711 "xmlparse.c"
        var $213=(($211+12*$212)&4294967295); //@line 5711 "xmlparse.c"
        var $214=(($213+4)&4294967295); //@line 5711 "xmlparse.c"
        var $215=HEAP[$214]; //@line 5711 "xmlparse.c"
        var $216=(($208+4)&4294967295); //@line 5711 "xmlparse.c"
        HEAP[$216]=$215; //@line 5711 "xmlparse.c"
        var $217=HEAP[$oldE]; //@line 5712 "xmlparse.c"
        var $218=(($217+20)&4294967295); //@line 5712 "xmlparse.c"
        var $219=HEAP[$218]; //@line 5712 "xmlparse.c"
        var $220=HEAP[$i]; //@line 5712 "xmlparse.c"
        var $221=(($219+12*$220)&4294967295); //@line 5712 "xmlparse.c"
        var $222=(($221+8)&4294967295); //@line 5712 "xmlparse.c"
        var $223=HEAP[$222]; //@line 5712 "xmlparse.c"
        var $224=($223)!=0; //@line 5712 "xmlparse.c"
        if ($224) { __label__ = 39; break; } else { __label__ = 42; break; } //@line 5712 "xmlparse.c"
      case 39: // $bb40
        var $225=HEAP[$newE]; //@line 5713 "xmlparse.c"
        var $226=(($225+20)&4294967295); //@line 5713 "xmlparse.c"
        var $227=HEAP[$226]; //@line 5713 "xmlparse.c"
        var $228=HEAP[$i]; //@line 5713 "xmlparse.c"
        var $229=(($227+12*$228)&4294967295); //@line 5713 "xmlparse.c"
        var $230=HEAP[$oldE]; //@line 5713 "xmlparse.c"
        var $231=(($230+20)&4294967295); //@line 5713 "xmlparse.c"
        var $232=HEAP[$231]; //@line 5713 "xmlparse.c"
        var $233=HEAP[$i]; //@line 5713 "xmlparse.c"
        var $234=(($232+12*$233)&4294967295); //@line 5713 "xmlparse.c"
        var $235=(($234+8)&4294967295); //@line 5713 "xmlparse.c"
        var $236=HEAP[$235]; //@line 5713 "xmlparse.c"
        var $237=HEAP[$newDtd_addr]; //@line 5713 "xmlparse.c"
        var $238=(($237+80)&4294967295); //@line 5713 "xmlparse.c"
        var $239=_poolCopyString($238, $236); //@line 5713 "xmlparse.c"
        var $240=(($229+8)&4294967295); //@line 5713 "xmlparse.c"
        HEAP[$240]=$239; //@line 5713 "xmlparse.c"
        var $241=HEAP[$newE]; //@line 5715 "xmlparse.c"
        var $242=(($241+20)&4294967295); //@line 5715 "xmlparse.c"
        var $243=HEAP[$242]; //@line 5715 "xmlparse.c"
        var $244=HEAP[$i]; //@line 5715 "xmlparse.c"
        var $245=(($243+12*$244)&4294967295); //@line 5715 "xmlparse.c"
        var $246=(($245+8)&4294967295); //@line 5715 "xmlparse.c"
        var $247=HEAP[$246]; //@line 5715 "xmlparse.c"
        var $248=($247)==0; //@line 5715 "xmlparse.c"
        if ($248) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 5715 "xmlparse.c"
      case 40: // $bb41
        HEAP[$0]=0; //@line 5716 "xmlparse.c"
        __label__ = 49; break; //@line 5716 "xmlparse.c"
      case 41: // $bb42
        __label__ = 43; break; //@line 5716 "xmlparse.c"
      case 42: // $bb43
        var $249=HEAP[$newE]; //@line 5719 "xmlparse.c"
        var $250=(($249+20)&4294967295); //@line 5719 "xmlparse.c"
        var $251=HEAP[$250]; //@line 5719 "xmlparse.c"
        var $252=HEAP[$i]; //@line 5719 "xmlparse.c"
        var $253=(($251+12*$252)&4294967295); //@line 5719 "xmlparse.c"
        var $254=(($253+8)&4294967295); //@line 5719 "xmlparse.c"
        HEAP[$254]=0; //@line 5719 "xmlparse.c"
        __label__ = 43; break; //@line 5719 "xmlparse.c"
      case 43: // $bb44
        var $255=HEAP[$i]; //@line 5708 "xmlparse.c"
        var $256=((($255) + 1)&4294967295); //@line 5708 "xmlparse.c"
        HEAP[$i]=$256; //@line 5708 "xmlparse.c"
        __label__ = 44; break; //@line 5708 "xmlparse.c"
      case 44: // $bb45
        var $257=HEAP[$newE]; //@line 5708 "xmlparse.c"
        var $258=(($257+12)&4294967295); //@line 5708 "xmlparse.c"
        var $259=HEAP[$258]; //@line 5708 "xmlparse.c"
        var $260=HEAP[$i]; //@line 5708 "xmlparse.c"
        var $261=((($259))|0) > ((($260))|0); //@line 5708 "xmlparse.c"
        if ($261) { __label__ = 38; break; } else { __label__ = 45; break; } //@line 5708 "xmlparse.c"
      case 45: // $bb46
        __label__ = 25; break; //@line 5708 "xmlparse.c"
      case 46: // $bb47
        var $262=HEAP[$oldDtd_addr]; //@line 5724 "xmlparse.c"
        var $263=(($262)&4294967295); //@line 5724 "xmlparse.c"
        var $264=HEAP[$newDtd_addr]; //@line 5724 "xmlparse.c"
        var $265=(($264+80)&4294967295); //@line 5724 "xmlparse.c"
        var $266=HEAP[$newDtd_addr]; //@line 5724 "xmlparse.c"
        var $267=(($266)&4294967295); //@line 5724 "xmlparse.c"
        var $268=_copyEntityTable($267, $265, $263); //@line 5724 "xmlparse.c"
        var $269=((($268))|0)==0; //@line 5724 "xmlparse.c"
        if ($269) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 5724 "xmlparse.c"
      case 47: // $bb48
        HEAP[$0]=0; //@line 5727 "xmlparse.c"
        __label__ = 49; break; //@line 5727 "xmlparse.c"
      case 48: // $bb49
        var $270=HEAP[$oldDtd_addr]; //@line 5737 "xmlparse.c"
        var $271=(($270+128)&4294967295); //@line 5737 "xmlparse.c"
        var $272=HEAP[$271]; //@line 5737 "xmlparse.c"
        var $273=HEAP[$newDtd_addr]; //@line 5737 "xmlparse.c"
        var $274=(($273+128)&4294967295); //@line 5737 "xmlparse.c"
        HEAP[$274]=$272; //@line 5737 "xmlparse.c"
        var $275=HEAP[$oldDtd_addr]; //@line 5738 "xmlparse.c"
        var $276=(($275+129)&4294967295); //@line 5738 "xmlparse.c"
        var $277=HEAP[$276]; //@line 5738 "xmlparse.c"
        var $278=HEAP[$newDtd_addr]; //@line 5738 "xmlparse.c"
        var $279=(($278+129)&4294967295); //@line 5738 "xmlparse.c"
        HEAP[$279]=$277; //@line 5738 "xmlparse.c"
        var $280=HEAP[$oldDtd_addr]; //@line 5739 "xmlparse.c"
        var $281=(($280+130)&4294967295); //@line 5739 "xmlparse.c"
        var $282=HEAP[$281]; //@line 5739 "xmlparse.c"
        var $283=HEAP[$newDtd_addr]; //@line 5739 "xmlparse.c"
        var $284=(($283+130)&4294967295); //@line 5739 "xmlparse.c"
        HEAP[$284]=$282; //@line 5739 "xmlparse.c"
        var $285=HEAP[$oldDtd_addr]; //@line 5742 "xmlparse.c"
        var $286=(($285+140)&4294967295); //@line 5742 "xmlparse.c"
        var $287=HEAP[$286]; //@line 5742 "xmlparse.c"
        var $288=HEAP[$newDtd_addr]; //@line 5742 "xmlparse.c"
        var $289=(($288+140)&4294967295); //@line 5742 "xmlparse.c"
        HEAP[$289]=$287; //@line 5742 "xmlparse.c"
        var $290=HEAP[$oldDtd_addr]; //@line 5743 "xmlparse.c"
        var $291=(($290+144)&4294967295); //@line 5743 "xmlparse.c"
        var $292=HEAP[$291]; //@line 5743 "xmlparse.c"
        var $293=HEAP[$newDtd_addr]; //@line 5743 "xmlparse.c"
        var $294=(($293+144)&4294967295); //@line 5743 "xmlparse.c"
        HEAP[$294]=$292; //@line 5743 "xmlparse.c"
        var $295=HEAP[$oldDtd_addr]; //@line 5744 "xmlparse.c"
        var $296=(($295+148)&4294967295); //@line 5744 "xmlparse.c"
        var $297=HEAP[$296]; //@line 5744 "xmlparse.c"
        var $298=HEAP[$newDtd_addr]; //@line 5744 "xmlparse.c"
        var $299=(($298+148)&4294967295); //@line 5744 "xmlparse.c"
        HEAP[$299]=$297; //@line 5744 "xmlparse.c"
        var $300=HEAP[$oldDtd_addr]; //@line 5745 "xmlparse.c"
        var $301=(($300+152)&4294967295); //@line 5745 "xmlparse.c"
        var $302=HEAP[$301]; //@line 5745 "xmlparse.c"
        var $303=HEAP[$newDtd_addr]; //@line 5745 "xmlparse.c"
        var $304=(($303+152)&4294967295); //@line 5745 "xmlparse.c"
        HEAP[$304]=$302; //@line 5745 "xmlparse.c"
        var $305=HEAP[$oldDtd_addr]; //@line 5746 "xmlparse.c"
        var $306=(($305+160)&4294967295); //@line 5746 "xmlparse.c"
        var $307=HEAP[$306]; //@line 5746 "xmlparse.c"
        var $308=HEAP[$newDtd_addr]; //@line 5746 "xmlparse.c"
        var $309=(($308+160)&4294967295); //@line 5746 "xmlparse.c"
        HEAP[$309]=$307; //@line 5746 "xmlparse.c"
        var $310=HEAP[$oldDtd_addr]; //@line 5747 "xmlparse.c"
        var $311=(($310+164)&4294967295); //@line 5747 "xmlparse.c"
        var $312=HEAP[$311]; //@line 5747 "xmlparse.c"
        var $313=HEAP[$newDtd_addr]; //@line 5747 "xmlparse.c"
        var $314=(($313+164)&4294967295); //@line 5747 "xmlparse.c"
        HEAP[$314]=$312; //@line 5747 "xmlparse.c"
        HEAP[$0]=1; //@line 5749 "xmlparse.c"
        __label__ = 49; break; //@line 5749 "xmlparse.c"
      case 49: // $bb50
        var $315=HEAP[$0]; //@line 5637 "xmlparse.c"
        HEAP[$retval]=$315; //@line 5637 "xmlparse.c"
        __label__ = 50; break; //@line 5637 "xmlparse.c"
      case 50: // $return
        var $retval51=HEAP[$retval]; //@line 5637 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval51; //@line 5637 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _copyEntityTable($newTable, $newPool, $oldTable) {
    var __stackBase__  = STACKTOP; STACKTOP += 60; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 60);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $newTable_addr=__stackBase__;
        var $newPool_addr=__stackBase__+4;
        var $oldTable_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $iter=__stackBase__+20;
        var $cachedOldBase=__stackBase__+28;
        var $cachedNewBase=__stackBase__+32;
        var $newE=__stackBase__+36;
        var $name=__stackBase__+40;
        var $oldE=__stackBase__+44;
        var $tem=__stackBase__+48;
        var $tem20=__stackBase__+52;
        var $tem25=__stackBase__+56;
        var $_alloca_point_=0;
        HEAP[$newTable_addr]=$newTable;
        HEAP[$newPool_addr]=$newPool;
        HEAP[$oldTable_addr]=$oldTable;
        HEAP[$cachedOldBase]=0; //@line 5758 "xmlparse.c"
        HEAP[$cachedNewBase]=0; //@line 5759 "xmlparse.c"
        var $1=HEAP[$oldTable_addr]; //@line 5761 "xmlparse.c"
        _hashTableIterInit($iter, $1); //@line 5761 "xmlparse.c"
        __label__ = 1; break; //@line 5761 "xmlparse.c"
      case 1: // $bb
        var $2=_hashTableIterNext($iter); //@line 5766 "xmlparse.c"
        var $3=$2; //@line 5766 "xmlparse.c"
        HEAP[$oldE]=$3; //@line 5766 "xmlparse.c"
        var $4=HEAP[$oldE]; //@line 5767 "xmlparse.c"
        var $5=($4)==0; //@line 5767 "xmlparse.c"
        if ($5) { __label__ = 28; break; } else { __label__ = 2; break; } //@line 5767 "xmlparse.c"
      case 2: // $bb1
        var $6=HEAP[$oldE]; //@line 5769 "xmlparse.c"
        var $7=(($6)&4294967295); //@line 5769 "xmlparse.c"
        var $8=HEAP[$7]; //@line 5769 "xmlparse.c"
        var $9=HEAP[$newPool_addr]; //@line 5769 "xmlparse.c"
        var $10=_poolCopyString($9, $8); //@line 5769 "xmlparse.c"
        HEAP[$name]=$10; //@line 5769 "xmlparse.c"
        var $11=HEAP[$name]; //@line 5770 "xmlparse.c"
        var $12=($11)==0; //@line 5770 "xmlparse.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 5770 "xmlparse.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 5771 "xmlparse.c"
        __label__ = 29; break; //@line 5771 "xmlparse.c"
      case 4: // $bb3
        var $13=HEAP[$newTable_addr]; //@line 5772 "xmlparse.c"
        var $14=HEAP[$name]; //@line 5772 "xmlparse.c"
        var $15=_lookup($13, $14, 36); //@line 5772 "xmlparse.c"
        var $16=$15; //@line 5772 "xmlparse.c"
        HEAP[$newE]=$16; //@line 5772 "xmlparse.c"
        var $17=HEAP[$newE]; //@line 5773 "xmlparse.c"
        var $18=($17)==0; //@line 5773 "xmlparse.c"
        if ($18) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5773 "xmlparse.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 5774 "xmlparse.c"
        __label__ = 29; break; //@line 5774 "xmlparse.c"
      case 6: // $bb5
        var $19=HEAP[$oldE]; //@line 5775 "xmlparse.c"
        var $20=(($19+16)&4294967295); //@line 5775 "xmlparse.c"
        var $21=HEAP[$20]; //@line 5775 "xmlparse.c"
        var $22=($21)!=0; //@line 5775 "xmlparse.c"
        if ($22) { __label__ = 7; break; } else { __label__ = 20; break; } //@line 5775 "xmlparse.c"
      case 7: // $bb6
        var $23=HEAP[$oldE]; //@line 5776 "xmlparse.c"
        var $24=(($23+16)&4294967295); //@line 5776 "xmlparse.c"
        var $25=HEAP[$24]; //@line 5776 "xmlparse.c"
        var $26=HEAP[$newPool_addr]; //@line 5776 "xmlparse.c"
        var $27=_poolCopyString($26, $25); //@line 5776 "xmlparse.c"
        HEAP[$tem]=$27; //@line 5776 "xmlparse.c"
        var $28=HEAP[$tem]; //@line 5777 "xmlparse.c"
        var $29=($28)==0; //@line 5777 "xmlparse.c"
        if ($29) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 5777 "xmlparse.c"
      case 8: // $bb7
        HEAP[$0]=0; //@line 5778 "xmlparse.c"
        __label__ = 29; break; //@line 5778 "xmlparse.c"
      case 9: // $bb8
        var $30=HEAP[$newE]; //@line 5779 "xmlparse.c"
        var $31=(($30+16)&4294967295); //@line 5779 "xmlparse.c"
        var $32=HEAP[$tem]; //@line 5779 "xmlparse.c"
        HEAP[$31]=$32; //@line 5779 "xmlparse.c"
        var $33=HEAP[$oldE]; //@line 5780 "xmlparse.c"
        var $34=(($33+20)&4294967295); //@line 5780 "xmlparse.c"
        var $35=HEAP[$34]; //@line 5780 "xmlparse.c"
        var $36=($35)!=0; //@line 5780 "xmlparse.c"
        if ($36) { __label__ = 10; break; } else { __label__ = 15; break; } //@line 5780 "xmlparse.c"
      case 10: // $bb9
        var $37=HEAP[$oldE]; //@line 5781 "xmlparse.c"
        var $38=(($37+20)&4294967295); //@line 5781 "xmlparse.c"
        var $39=HEAP[$38]; //@line 5781 "xmlparse.c"
        var $40=HEAP[$cachedOldBase]; //@line 5781 "xmlparse.c"
        var $41=($39)==($40); //@line 5781 "xmlparse.c"
        if ($41) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 5781 "xmlparse.c"
      case 11: // $bb10
        var $42=HEAP[$newE]; //@line 5782 "xmlparse.c"
        var $43=(($42+20)&4294967295); //@line 5782 "xmlparse.c"
        var $44=HEAP[$cachedNewBase]; //@line 5782 "xmlparse.c"
        HEAP[$43]=$44; //@line 5782 "xmlparse.c"
        __label__ = 15; break; //@line 5782 "xmlparse.c"
      case 12: // $bb11
        var $45=HEAP[$oldE]; //@line 5784 "xmlparse.c"
        var $46=(($45+20)&4294967295); //@line 5784 "xmlparse.c"
        var $47=HEAP[$46]; //@line 5784 "xmlparse.c"
        HEAP[$cachedOldBase]=$47; //@line 5784 "xmlparse.c"
        var $48=HEAP[$newPool_addr]; //@line 5785 "xmlparse.c"
        var $49=HEAP[$cachedOldBase]; //@line 5785 "xmlparse.c"
        var $50=_poolCopyString($48, $49); //@line 5785 "xmlparse.c"
        HEAP[$tem]=$50; //@line 5785 "xmlparse.c"
        var $51=HEAP[$tem]; //@line 5786 "xmlparse.c"
        var $52=($51)==0; //@line 5786 "xmlparse.c"
        if ($52) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 5786 "xmlparse.c"
      case 13: // $bb12
        HEAP[$0]=0; //@line 5787 "xmlparse.c"
        __label__ = 29; break; //@line 5787 "xmlparse.c"
      case 14: // $bb13
        var $53=HEAP[$newE]; //@line 5788 "xmlparse.c"
        var $54=(($53+20)&4294967295); //@line 5788 "xmlparse.c"
        var $55=HEAP[$tem]; //@line 5788 "xmlparse.c"
        HEAP[$54]=$55; //@line 5788 "xmlparse.c"
        var $56=HEAP[$newE]; //@line 5788 "xmlparse.c"
        var $57=(($56+20)&4294967295); //@line 5788 "xmlparse.c"
        var $58=HEAP[$57]; //@line 5788 "xmlparse.c"
        HEAP[$cachedNewBase]=$58; //@line 5788 "xmlparse.c"
        __label__ = 15; break; //@line 5788 "xmlparse.c"
      case 15: // $bb14
        var $59=HEAP[$oldE]; //@line 5791 "xmlparse.c"
        var $60=(($59+24)&4294967295); //@line 5791 "xmlparse.c"
        var $61=HEAP[$60]; //@line 5791 "xmlparse.c"
        var $62=($61)!=0; //@line 5791 "xmlparse.c"
        if ($62) { __label__ = 16; break; } else { __label__ = 19; break; } //@line 5791 "xmlparse.c"
      case 16: // $bb15
        var $63=HEAP[$oldE]; //@line 5792 "xmlparse.c"
        var $64=(($63+24)&4294967295); //@line 5792 "xmlparse.c"
        var $65=HEAP[$64]; //@line 5792 "xmlparse.c"
        var $66=HEAP[$newPool_addr]; //@line 5792 "xmlparse.c"
        var $67=_poolCopyString($66, $65); //@line 5792 "xmlparse.c"
        HEAP[$tem]=$67; //@line 5792 "xmlparse.c"
        var $68=HEAP[$tem]; //@line 5793 "xmlparse.c"
        var $69=($68)==0; //@line 5793 "xmlparse.c"
        if ($69) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 5793 "xmlparse.c"
      case 17: // $bb16
        HEAP[$0]=0; //@line 5794 "xmlparse.c"
        __label__ = 29; break; //@line 5794 "xmlparse.c"
      case 18: // $bb17
        var $70=HEAP[$newE]; //@line 5795 "xmlparse.c"
        var $71=(($70+24)&4294967295); //@line 5795 "xmlparse.c"
        var $72=HEAP[$tem]; //@line 5795 "xmlparse.c"
        HEAP[$71]=$72; //@line 5795 "xmlparse.c"
        __label__ = 19; break; //@line 5795 "xmlparse.c"
      case 19: // $bb18
        __label__ = 23; break; //@line 5795 "xmlparse.c"
      case 20: // $bb19
        var $73=HEAP[$oldE]; //@line 5800 "xmlparse.c"
        var $74=(($73+8)&4294967295); //@line 5800 "xmlparse.c"
        var $75=HEAP[$74]; //@line 5800 "xmlparse.c"
        var $76=HEAP[$oldE]; //@line 5800 "xmlparse.c"
        var $77=(($76+4)&4294967295); //@line 5800 "xmlparse.c"
        var $78=HEAP[$77]; //@line 5800 "xmlparse.c"
        var $79=HEAP[$newPool_addr]; //@line 5800 "xmlparse.c"
        var $80=_poolCopyStringN($79, $78, $75); //@line 5800 "xmlparse.c"
        HEAP[$tem20]=$80; //@line 5800 "xmlparse.c"
        var $81=HEAP[$tem20]; //@line 5801 "xmlparse.c"
        var $82=($81)==0; //@line 5801 "xmlparse.c"
        if ($82) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 5801 "xmlparse.c"
      case 21: // $bb21
        HEAP[$0]=0; //@line 5802 "xmlparse.c"
        __label__ = 29; break; //@line 5802 "xmlparse.c"
      case 22: // $bb22
        var $83=HEAP[$newE]; //@line 5803 "xmlparse.c"
        var $84=(($83+4)&4294967295); //@line 5803 "xmlparse.c"
        var $85=HEAP[$tem20]; //@line 5803 "xmlparse.c"
        HEAP[$84]=$85; //@line 5803 "xmlparse.c"
        var $86=HEAP[$oldE]; //@line 5804 "xmlparse.c"
        var $87=(($86+8)&4294967295); //@line 5804 "xmlparse.c"
        var $88=HEAP[$87]; //@line 5804 "xmlparse.c"
        var $89=HEAP[$newE]; //@line 5804 "xmlparse.c"
        var $90=(($89+8)&4294967295); //@line 5804 "xmlparse.c"
        HEAP[$90]=$88; //@line 5804 "xmlparse.c"
        __label__ = 23; break; //@line 5804 "xmlparse.c"
      case 23: // $bb23
        var $91=HEAP[$oldE]; //@line 5806 "xmlparse.c"
        var $92=(($91+28)&4294967295); //@line 5806 "xmlparse.c"
        var $93=HEAP[$92]; //@line 5806 "xmlparse.c"
        var $94=($93)!=0; //@line 5806 "xmlparse.c"
        if ($94) { __label__ = 24; break; } else { __label__ = 27; break; } //@line 5806 "xmlparse.c"
      case 24: // $bb24
        var $95=HEAP[$oldE]; //@line 5807 "xmlparse.c"
        var $96=(($95+28)&4294967295); //@line 5807 "xmlparse.c"
        var $97=HEAP[$96]; //@line 5807 "xmlparse.c"
        var $98=HEAP[$newPool_addr]; //@line 5807 "xmlparse.c"
        var $99=_poolCopyString($98, $97); //@line 5807 "xmlparse.c"
        HEAP[$tem25]=$99; //@line 5807 "xmlparse.c"
        var $100=HEAP[$tem25]; //@line 5808 "xmlparse.c"
        var $101=($100)==0; //@line 5808 "xmlparse.c"
        if ($101) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 5808 "xmlparse.c"
      case 25: // $bb26
        HEAP[$0]=0; //@line 5809 "xmlparse.c"
        __label__ = 29; break; //@line 5809 "xmlparse.c"
      case 26: // $bb27
        var $102=HEAP[$newE]; //@line 5810 "xmlparse.c"
        var $103=(($102+28)&4294967295); //@line 5810 "xmlparse.c"
        var $104=HEAP[$tem25]; //@line 5810 "xmlparse.c"
        HEAP[$103]=$104; //@line 5810 "xmlparse.c"
        __label__ = 27; break; //@line 5810 "xmlparse.c"
      case 27: // $bb28
        var $105=HEAP[$oldE]; //@line 5812 "xmlparse.c"
        var $106=(($105+33)&4294967295); //@line 5812 "xmlparse.c"
        var $107=HEAP[$106]; //@line 5812 "xmlparse.c"
        var $108=HEAP[$newE]; //@line 5812 "xmlparse.c"
        var $109=(($108+33)&4294967295); //@line 5812 "xmlparse.c"
        HEAP[$109]=$107; //@line 5812 "xmlparse.c"
        var $110=HEAP[$oldE]; //@line 5813 "xmlparse.c"
        var $111=(($110+34)&4294967295); //@line 5813 "xmlparse.c"
        var $112=HEAP[$111]; //@line 5813 "xmlparse.c"
        var $113=HEAP[$newE]; //@line 5813 "xmlparse.c"
        var $114=(($113+34)&4294967295); //@line 5813 "xmlparse.c"
        HEAP[$114]=$112; //@line 5813 "xmlparse.c"
        __label__ = 1; break; //@line 5813 "xmlparse.c"
      case 28: // $bb29
        HEAP[$0]=1; //@line 5815 "xmlparse.c"
        __label__ = 29; break; //@line 5815 "xmlparse.c"
      case 29: // $bb30
        var $115=HEAP[$0]; //@line 5771 "xmlparse.c"
        HEAP[$retval]=$115; //@line 5771 "xmlparse.c"
        __label__ = 30; break; //@line 5771 "xmlparse.c"
      case 30: // $return
        var $retval31=HEAP[$retval]; //@line 5771 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval31; //@line 5771 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _keyeq($s1, $s2) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $s1_addr=__stackBase__;
        var $s2_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$s1_addr]=$s1;
        HEAP[$s2_addr]=$s2;
        __label__ = 4; break; //@line 5823 "xmlparse.c"
      case 1: // $bb
        var $1=HEAP[$s1_addr]; //@line 5824 "xmlparse.c"
        var $2=HEAP[$1]; //@line 5824 "xmlparse.c"
        var $3=reSign(($2), 8, 0)==0; //@line 5824 "xmlparse.c"
        if ($3) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 5824 "xmlparse.c"
      case 2: // $bb1
        HEAP[$0]=1; //@line 5825 "xmlparse.c"
        __label__ = 6; break; //@line 5825 "xmlparse.c"
      case 3: // $bb2
        var $4=HEAP[$s1_addr]; //@line 5823 "xmlparse.c"
        var $5=(($4+1)&4294967295); //@line 5823 "xmlparse.c"
        HEAP[$s1_addr]=$5; //@line 5823 "xmlparse.c"
        var $6=HEAP[$s2_addr]; //@line 5823 "xmlparse.c"
        var $7=(($6+1)&4294967295); //@line 5823 "xmlparse.c"
        HEAP[$s2_addr]=$7; //@line 5823 "xmlparse.c"
        __label__ = 4; break; //@line 5823 "xmlparse.c"
      case 4: // $bb3
        var $8=HEAP[$s1_addr]; //@line 5823 "xmlparse.c"
        var $9=HEAP[$8]; //@line 5823 "xmlparse.c"
        var $10=HEAP[$s2_addr]; //@line 5823 "xmlparse.c"
        var $11=HEAP[$10]; //@line 5823 "xmlparse.c"
        var $12=reSign(($9), 8, 0)==reSign(($11), 8, 0); //@line 5823 "xmlparse.c"
        if ($12) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 5823 "xmlparse.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 5826 "xmlparse.c"
        __label__ = 6; break; //@line 5826 "xmlparse.c"
      case 6: // $bb5
        var $13=HEAP[$0]; //@line 5825 "xmlparse.c"
        HEAP[$retval]=$13; //@line 5825 "xmlparse.c"
        __label__ = 7; break; //@line 5825 "xmlparse.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 5825 "xmlparse.c"
        var $retval67=((($retval6)) & 255); //@line 5825 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval67; //@line 5825 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _hash($s) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $s_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $h=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$s_addr]=$s;
        HEAP[$h]=0; //@line 5832 "xmlparse.c"
        __label__ = 2; break; //@line 5832 "xmlparse.c"
      case 1: // $bb
        var $1=HEAP[$h]; //@line 5834 "xmlparse.c"
        var $2=((($1) * 1000003)&4294967295); //@line 5834 "xmlparse.c"
        var $3=HEAP[$s_addr]; //@line 5834 "xmlparse.c"
        var $4=HEAP[$3]; //@line 5834 "xmlparse.c"
        var $5=unSign(($4), 8, 0); //@line 5834 "xmlparse.c"
        var $6=($2) ^ ($5); //@line 5834 "xmlparse.c"
        HEAP[$h]=$6; //@line 5834 "xmlparse.c"
        var $7=HEAP[$s_addr]; //@line 5834 "xmlparse.c"
        var $8=(($7+1)&4294967295); //@line 5834 "xmlparse.c"
        HEAP[$s_addr]=$8; //@line 5834 "xmlparse.c"
        __label__ = 2; break; //@line 5834 "xmlparse.c"
      case 2: // $bb1
        var $9=HEAP[$s_addr]; //@line 5833 "xmlparse.c"
        var $10=HEAP[$9]; //@line 5833 "xmlparse.c"
        var $11=reSign(($10), 8, 0)!=0; //@line 5833 "xmlparse.c"
        if ($11) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 5833 "xmlparse.c"
      case 3: // $bb2
        var $12=HEAP[$h]; //@line 5835 "xmlparse.c"
        HEAP[$0]=$12; //@line 5835 "xmlparse.c"
        var $13=HEAP[$0]; //@line 5835 "xmlparse.c"
        HEAP[$retval]=$13; //@line 5835 "xmlparse.c"
        __label__ = 4; break; //@line 5835 "xmlparse.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 5835 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 5835 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _lookup($table, $name, $createSize) {
    var __stackBase__  = STACKTOP; STACKTOP += 74; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 74);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $table_addr=__stackBase__;
        var $name_addr=__stackBase__+4;
        var $createSize_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $iftmp_276=__stackBase__+16;
        var $iftmp_275=__stackBase__+20;
        var $iftmp_274=__stackBase__+24;
        var $0=__stackBase__+28;
        var $i=__stackBase__+32;
        var $tsize=__stackBase__+36;
        var $h=__stackBase__+40;
        var $mask=__stackBase__+44;
        var $step=__stackBase__+48;
        var $newPower=__stackBase__+49;
        var $newSize=__stackBase__+50;
        var $newMask=__stackBase__+54;
        var $tsize19=__stackBase__+58;
        var $newV=__stackBase__+62;
        var $newHash=__stackBase__+66;
        var $j=__stackBase__+70;
        var $_alloca_point_=0;
        HEAP[$table_addr]=$table;
        HEAP[$name_addr]=$name;
        HEAP[$createSize_addr]=$createSize;
        var $1=HEAP[$table_addr]; //@line 5842 "xmlparse.c"
        var $2=(($1+8)&4294967295); //@line 5842 "xmlparse.c"
        var $3=HEAP[$2]; //@line 5842 "xmlparse.c"
        var $4=((($3))|0)==0; //@line 5842 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 6; break; } //@line 5842 "xmlparse.c"
      case 1: // $bb
        var $5=HEAP[$createSize_addr]; //@line 5844 "xmlparse.c"
        var $6=((($5))|0)==0; //@line 5844 "xmlparse.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 5844 "xmlparse.c"
      case 2: // $bb1
        HEAP[$0]=0; //@line 5845 "xmlparse.c"
        __label__ = 42; break; //@line 5845 "xmlparse.c"
      case 3: // $bb2
        var $7=HEAP[$table_addr]; //@line 5846 "xmlparse.c"
        var $8=(($7+4)&4294967295); //@line 5846 "xmlparse.c"
        HEAP[$8]=6; //@line 5846 "xmlparse.c"
        var $9=HEAP[$table_addr]; //@line 5848 "xmlparse.c"
        var $10=(($9+8)&4294967295); //@line 5848 "xmlparse.c"
        HEAP[$10]=64; //@line 5848 "xmlparse.c"
        var $11=HEAP[$table_addr]; //@line 5849 "xmlparse.c"
        var $12=(($11+8)&4294967295); //@line 5849 "xmlparse.c"
        var $13=HEAP[$12]; //@line 5849 "xmlparse.c"
        var $14=((($13) * 4)&4294967295); //@line 5849 "xmlparse.c"
        HEAP[$tsize]=$14; //@line 5849 "xmlparse.c"
        var $15=HEAP[$table_addr]; //@line 5850 "xmlparse.c"
        var $16=(($15+16)&4294967295); //@line 5850 "xmlparse.c"
        var $17=HEAP[$16]; //@line 5850 "xmlparse.c"
        var $18=(($17)&4294967295); //@line 5850 "xmlparse.c"
        var $19=HEAP[$18]; //@line 5850 "xmlparse.c"
        var $20=HEAP[$tsize]; //@line 5850 "xmlparse.c"
        var $21=FUNCTION_TABLE[$19]($20); //@line 5850 "xmlparse.c"
        var $22=$21; //@line 5850 "xmlparse.c"
        var $23=HEAP[$table_addr]; //@line 5850 "xmlparse.c"
        var $24=(($23)&4294967295); //@line 5850 "xmlparse.c"
        HEAP[$24]=$22; //@line 5850 "xmlparse.c"
        var $25=HEAP[$table_addr]; //@line 5851 "xmlparse.c"
        var $26=(($25)&4294967295); //@line 5851 "xmlparse.c"
        var $27=HEAP[$26]; //@line 5851 "xmlparse.c"
        var $28=($27)==0; //@line 5851 "xmlparse.c"
        if ($28) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 5851 "xmlparse.c"
      case 4: // $bb3
        var $29=HEAP[$table_addr]; //@line 5852 "xmlparse.c"
        var $30=(($29+8)&4294967295); //@line 5852 "xmlparse.c"
        HEAP[$30]=0; //@line 5852 "xmlparse.c"
        HEAP[$0]=0; //@line 5853 "xmlparse.c"
        __label__ = 42; break; //@line 5853 "xmlparse.c"
      case 5: // $bb4
        var $31=HEAP[$table_addr]; //@line 5855 "xmlparse.c"
        var $32=(($31)&4294967295); //@line 5855 "xmlparse.c"
        var $33=HEAP[$32]; //@line 5855 "xmlparse.c"
        var $34=HEAP[$tsize]; //@line 5855 "xmlparse.c"
        var $35=$33; //@line 5855 "xmlparse.c"
        _llvm_memset_p0i8_i32($35, 0, $34, 1, 0); //@line 5855 "xmlparse.c"
        var $36=HEAP[$name_addr]; //@line 5856 "xmlparse.c"
        var $37=_hash($36); //@line 5856 "xmlparse.c"
        var $38=HEAP[$table_addr]; //@line 5856 "xmlparse.c"
        var $39=(($38+8)&4294967295); //@line 5856 "xmlparse.c"
        var $40=HEAP[$39]; //@line 5856 "xmlparse.c"
        var $41=((($40) - 1)&4294967295); //@line 5856 "xmlparse.c"
        var $42=($37) & ($41); //@line 5856 "xmlparse.c"
        HEAP[$i]=$42; //@line 5856 "xmlparse.c"
        __label__ = 39; break; //@line 5856 "xmlparse.c"
      case 6: // $bb5
        var $43=HEAP[$name_addr]; //@line 5859 "xmlparse.c"
        var $44=_hash($43); //@line 5859 "xmlparse.c"
        HEAP[$h]=$44; //@line 5859 "xmlparse.c"
        var $45=HEAP[$table_addr]; //@line 5860 "xmlparse.c"
        var $46=(($45+8)&4294967295); //@line 5860 "xmlparse.c"
        var $47=HEAP[$46]; //@line 5860 "xmlparse.c"
        var $48=((($47) - 1)&4294967295); //@line 5860 "xmlparse.c"
        HEAP[$mask]=$48; //@line 5860 "xmlparse.c"
        HEAP[$step]=0; //@line 5861 "xmlparse.c"
        var $49=HEAP[$h]; //@line 5862 "xmlparse.c"
        var $50=HEAP[$mask]; //@line 5862 "xmlparse.c"
        var $51=($49) & ($50); //@line 5862 "xmlparse.c"
        HEAP[$i]=$51; //@line 5862 "xmlparse.c"
        __label__ = 14; break; //@line 5862 "xmlparse.c"
      case 7: // $bb6
        var $52=HEAP[$table_addr]; //@line 5864 "xmlparse.c"
        var $53=(($52)&4294967295); //@line 5864 "xmlparse.c"
        var $54=HEAP[$53]; //@line 5864 "xmlparse.c"
        var $55=HEAP[$i]; //@line 5864 "xmlparse.c"
        var $56=(($54+4*$55)&4294967295); //@line 5864 "xmlparse.c"
        var $57=HEAP[$56]; //@line 5864 "xmlparse.c"
        var $58=(($57)&4294967295); //@line 5864 "xmlparse.c"
        var $59=HEAP[$58]; //@line 5864 "xmlparse.c"
        var $60=HEAP[$name_addr]; //@line 5864 "xmlparse.c"
        var $61=_keyeq($60, $59); //@line 5864 "xmlparse.c"
        var $62=reSign(($61), 8, 0)!=0; //@line 5864 "xmlparse.c"
        if ($62) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 5864 "xmlparse.c"
      case 8: // $bb7
        var $63=HEAP[$table_addr]; //@line 5865 "xmlparse.c"
        var $64=(($63)&4294967295); //@line 5865 "xmlparse.c"
        var $65=HEAP[$64]; //@line 5865 "xmlparse.c"
        var $66=HEAP[$i]; //@line 5865 "xmlparse.c"
        var $67=(($65+4*$66)&4294967295); //@line 5865 "xmlparse.c"
        var $68=HEAP[$67]; //@line 5865 "xmlparse.c"
        HEAP[$0]=$68; //@line 5865 "xmlparse.c"
        __label__ = 42; break; //@line 5865 "xmlparse.c"
      case 9: // $bb8
        var $69=HEAP[$step]; //@line 5866 "xmlparse.c"
        var $70=reSign(($69), 8, 0)==0; //@line 5866 "xmlparse.c"
        if ($70) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 5866 "xmlparse.c"
      case 10: // $bb9
        var $71=HEAP[$mask]; //@line 5867 "xmlparse.c"
        var $not=($71) ^ -1; //@line 5867 "xmlparse.c"
        var $72=HEAP[$h]; //@line 5867 "xmlparse.c"
        var $73=($not) & ($72); //@line 5867 "xmlparse.c"
        var $74=HEAP[$table_addr]; //@line 5867 "xmlparse.c"
        var $75=(($74+4)&4294967295); //@line 5867 "xmlparse.c"
        var $76=HEAP[$75]; //@line 5867 "xmlparse.c"
        var $77=unSign(($76), 8, 0); //@line 5867 "xmlparse.c"
        var $78=((($77) - 1)&4294967295); //@line 5867 "xmlparse.c"
        var $79=((($73))>>>0) >>> ((($78))>>>0); //@line 5867 "xmlparse.c"
        var $80=((($79)) & 255); //@line 5867 "xmlparse.c"
        var $81=HEAP[$mask]; //@line 5867 "xmlparse.c"
        var $82=((($81))>>>0) >>> 2; //@line 5867 "xmlparse.c"
        var $83=((($82)) & 255); //@line 5867 "xmlparse.c"
        var $84=($80) & ($83); //@line 5867 "xmlparse.c"
        var $85=($84) | 1; //@line 5867 "xmlparse.c"
        HEAP[$step]=$85; //@line 5867 "xmlparse.c"
        __label__ = 11; break; //@line 5867 "xmlparse.c"
      case 11: // $bb11
        var $86=HEAP[$step]; //@line 5868 "xmlparse.c"
        var $87=unSign(($86), 8, 0); //@line 5868 "xmlparse.c"
        var $88=HEAP[$i]; //@line 5868 "xmlparse.c"
        var $89=((($87))>>>0) > ((($88))>>>0); //@line 5868 "xmlparse.c"
        if ($89) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 5868 "xmlparse.c"
      case 12: // $bb12
        var $90=HEAP[$table_addr]; //@line 5868 "xmlparse.c"
        var $91=(($90+8)&4294967295); //@line 5868 "xmlparse.c"
        var $92=HEAP[$91]; //@line 5868 "xmlparse.c"
        var $93=HEAP[$step]; //@line 5868 "xmlparse.c"
        var $94=unSign(($93), 8, 0); //@line 5868 "xmlparse.c"
        var $95=((($92) - ($94))&4294967295); //@line 5868 "xmlparse.c"
        var $96=HEAP[$i]; //@line 5868 "xmlparse.c"
        var $97=((($95) + ($96))&4294967295); //@line 5868 "xmlparse.c"
        HEAP[$i]=$97; //@line 5868 "xmlparse.c"
        var $98=HEAP[$i]; //@line 5868 "xmlparse.c"
        HEAP[$iftmp_274]=$98; //@line 5868 "xmlparse.c"
        __label__ = 14; break; //@line 5868 "xmlparse.c"
      case 13: // $bb13
        var $99=HEAP[$step]; //@line 5868 "xmlparse.c"
        var $100=unSign(($99), 8, 0); //@line 5868 "xmlparse.c"
        var $101=HEAP[$i]; //@line 5868 "xmlparse.c"
        var $102=((($101) - ($100))&4294967295); //@line 5868 "xmlparse.c"
        HEAP[$i]=$102; //@line 5868 "xmlparse.c"
        var $103=HEAP[$i]; //@line 5868 "xmlparse.c"
        HEAP[$iftmp_274]=$103; //@line 5868 "xmlparse.c"
        __label__ = 14; break; //@line 5868 "xmlparse.c"
      case 14: // $bb14
        var $104=HEAP[$table_addr]; //@line 5863 "xmlparse.c"
        var $105=(($104)&4294967295); //@line 5863 "xmlparse.c"
        var $106=HEAP[$105]; //@line 5863 "xmlparse.c"
        var $107=HEAP[$i]; //@line 5863 "xmlparse.c"
        var $108=(($106+4*$107)&4294967295); //@line 5863 "xmlparse.c"
        var $109=HEAP[$108]; //@line 5863 "xmlparse.c"
        var $110=($109)!=0; //@line 5863 "xmlparse.c"
        if ($110) { __label__ = 7; break; } else { __label__ = 15; break; } //@line 5863 "xmlparse.c"
      case 15: // $bb15
        var $111=HEAP[$createSize_addr]; //@line 5870 "xmlparse.c"
        var $112=((($111))|0)==0; //@line 5870 "xmlparse.c"
        if ($112) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 5870 "xmlparse.c"
      case 16: // $bb16
        HEAP[$0]=0; //@line 5871 "xmlparse.c"
        __label__ = 42; break; //@line 5871 "xmlparse.c"
      case 17: // $bb17
        var $113=HEAP[$table_addr]; //@line 5874 "xmlparse.c"
        var $114=(($113+12)&4294967295); //@line 5874 "xmlparse.c"
        var $115=HEAP[$114]; //@line 5874 "xmlparse.c"
        var $116=HEAP[$table_addr]; //@line 5874 "xmlparse.c"
        var $117=(($116+4)&4294967295); //@line 5874 "xmlparse.c"
        var $118=HEAP[$117]; //@line 5874 "xmlparse.c"
        var $119=unSign(($118), 8, 0); //@line 5874 "xmlparse.c"
        var $120=((($119) - 1)&4294967295); //@line 5874 "xmlparse.c"
        var $121=((($115))>>>0) >>> ((($120))>>>0); //@line 5874 "xmlparse.c"
        var $122=((($121))|0)!=0; //@line 5874 "xmlparse.c"
        if ($122) { __label__ = 18; break; } else { __label__ = 39; break; } //@line 5874 "xmlparse.c"
      case 18: // $bb18
        var $123=HEAP[$table_addr]; //@line 5875 "xmlparse.c"
        var $124=(($123+4)&4294967295); //@line 5875 "xmlparse.c"
        var $125=HEAP[$124]; //@line 5875 "xmlparse.c"
        var $126=((($125) + 1)&255); //@line 5875 "xmlparse.c"
        HEAP[$newPower]=$126; //@line 5875 "xmlparse.c"
        var $127=HEAP[$newPower]; //@line 5876 "xmlparse.c"
        var $128=unSign(($127), 8, 0); //@line 5876 "xmlparse.c"
        var $129=1 << ($128); //@line 5876 "xmlparse.c"
        HEAP[$newSize]=$129; //@line 5876 "xmlparse.c"
        var $130=HEAP[$newSize]; //@line 5877 "xmlparse.c"
        var $131=((($130) - 1)&4294967295); //@line 5877 "xmlparse.c"
        HEAP[$newMask]=$131; //@line 5877 "xmlparse.c"
        var $132=HEAP[$newSize]; //@line 5878 "xmlparse.c"
        var $133=((($132) * 4)&4294967295); //@line 5878 "xmlparse.c"
        HEAP[$tsize19]=$133; //@line 5878 "xmlparse.c"
        var $134=HEAP[$table_addr]; //@line 5879 "xmlparse.c"
        var $135=(($134+16)&4294967295); //@line 5879 "xmlparse.c"
        var $136=HEAP[$135]; //@line 5879 "xmlparse.c"
        var $137=(($136)&4294967295); //@line 5879 "xmlparse.c"
        var $138=HEAP[$137]; //@line 5879 "xmlparse.c"
        var $139=HEAP[$tsize19]; //@line 5879 "xmlparse.c"
        var $140=FUNCTION_TABLE[$138]($139); //@line 5879 "xmlparse.c"
        var $141=$140; //@line 5879 "xmlparse.c"
        HEAP[$newV]=$141; //@line 5879 "xmlparse.c"
        var $142=HEAP[$newV]; //@line 5880 "xmlparse.c"
        var $143=($142)==0; //@line 5880 "xmlparse.c"
        if ($143) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 5880 "xmlparse.c"
      case 19: // $bb20
        HEAP[$0]=0; //@line 5881 "xmlparse.c"
        __label__ = 42; break; //@line 5881 "xmlparse.c"
      case 20: // $bb21
        var $144=HEAP[$newV]; //@line 5882 "xmlparse.c"
        var $145=HEAP[$tsize19]; //@line 5882 "xmlparse.c"
        var $146=$144; //@line 5882 "xmlparse.c"
        _llvm_memset_p0i8_i32($146, 0, $145, 1, 0); //@line 5882 "xmlparse.c"
        HEAP[$i]=0; //@line 5883 "xmlparse.c"
        __label__ = 31; break; //@line 5883 "xmlparse.c"
      case 21: // $bb22
        var $147=HEAP[$table_addr]; //@line 5884 "xmlparse.c"
        var $148=(($147)&4294967295); //@line 5884 "xmlparse.c"
        var $149=HEAP[$148]; //@line 5884 "xmlparse.c"
        var $150=HEAP[$i]; //@line 5884 "xmlparse.c"
        var $151=(($149+4*$150)&4294967295); //@line 5884 "xmlparse.c"
        var $152=HEAP[$151]; //@line 5884 "xmlparse.c"
        var $153=($152)!=0; //@line 5884 "xmlparse.c"
        if ($153) { __label__ = 22; break; } else { __label__ = 30; break; } //@line 5884 "xmlparse.c"
      case 22: // $bb23
        var $154=HEAP[$table_addr]; //@line 5885 "xmlparse.c"
        var $155=(($154)&4294967295); //@line 5885 "xmlparse.c"
        var $156=HEAP[$155]; //@line 5885 "xmlparse.c"
        var $157=HEAP[$i]; //@line 5885 "xmlparse.c"
        var $158=(($156+4*$157)&4294967295); //@line 5885 "xmlparse.c"
        var $159=HEAP[$158]; //@line 5885 "xmlparse.c"
        var $160=(($159)&4294967295); //@line 5885 "xmlparse.c"
        var $161=HEAP[$160]; //@line 5885 "xmlparse.c"
        var $162=_hash($161); //@line 5885 "xmlparse.c"
        HEAP[$newHash]=$162; //@line 5885 "xmlparse.c"
        var $163=HEAP[$newHash]; //@line 5886 "xmlparse.c"
        var $164=HEAP[$newMask]; //@line 5886 "xmlparse.c"
        var $165=($163) & ($164); //@line 5886 "xmlparse.c"
        HEAP[$j]=$165; //@line 5886 "xmlparse.c"
        HEAP[$step]=0; //@line 5887 "xmlparse.c"
        __label__ = 28; break; //@line 5887 "xmlparse.c"
      case 23: // $bb24
        var $166=HEAP[$step]; //@line 5889 "xmlparse.c"
        var $167=reSign(($166), 8, 0)==0; //@line 5889 "xmlparse.c"
        if ($167) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 5889 "xmlparse.c"
      case 24: // $bb25
        var $168=HEAP[$newMask]; //@line 5890 "xmlparse.c"
        var $not26=($168) ^ -1; //@line 5890 "xmlparse.c"
        var $169=HEAP[$newHash]; //@line 5890 "xmlparse.c"
        var $170=($not26) & ($169); //@line 5890 "xmlparse.c"
        var $171=HEAP[$newPower]; //@line 5890 "xmlparse.c"
        var $172=unSign(($171), 8, 0); //@line 5890 "xmlparse.c"
        var $173=((($172) - 1)&4294967295); //@line 5890 "xmlparse.c"
        var $174=((($170))>>>0) >>> ((($173))>>>0); //@line 5890 "xmlparse.c"
        var $175=((($174)) & 255); //@line 5890 "xmlparse.c"
        var $176=HEAP[$newMask]; //@line 5890 "xmlparse.c"
        var $177=((($176))>>>0) >>> 2; //@line 5890 "xmlparse.c"
        var $178=((($177)) & 255); //@line 5890 "xmlparse.c"
        var $179=($175) & ($178); //@line 5890 "xmlparse.c"
        var $180=($179) | 1; //@line 5890 "xmlparse.c"
        HEAP[$step]=$180; //@line 5890 "xmlparse.c"
        __label__ = 25; break; //@line 5890 "xmlparse.c"
      case 25: // $bb28
        var $181=HEAP[$step]; //@line 5891 "xmlparse.c"
        var $182=unSign(($181), 8, 0); //@line 5891 "xmlparse.c"
        var $183=HEAP[$j]; //@line 5891 "xmlparse.c"
        var $184=((($182))>>>0) > ((($183))>>>0); //@line 5891 "xmlparse.c"
        if ($184) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 5891 "xmlparse.c"
      case 26: // $bb29
        var $185=HEAP[$step]; //@line 5891 "xmlparse.c"
        var $186=unSign(($185), 8, 0); //@line 5891 "xmlparse.c"
        var $187=HEAP[$newSize]; //@line 5891 "xmlparse.c"
        var $188=((($187) - ($186))&4294967295); //@line 5891 "xmlparse.c"
        var $189=HEAP[$j]; //@line 5891 "xmlparse.c"
        var $190=((($188) + ($189))&4294967295); //@line 5891 "xmlparse.c"
        HEAP[$j]=$190; //@line 5891 "xmlparse.c"
        var $191=HEAP[$j]; //@line 5891 "xmlparse.c"
        HEAP[$iftmp_275]=$191; //@line 5891 "xmlparse.c"
        __label__ = 28; break; //@line 5891 "xmlparse.c"
      case 27: // $bb30
        var $192=HEAP[$step]; //@line 5891 "xmlparse.c"
        var $193=unSign(($192), 8, 0); //@line 5891 "xmlparse.c"
        var $194=HEAP[$j]; //@line 5891 "xmlparse.c"
        var $195=((($194) - ($193))&4294967295); //@line 5891 "xmlparse.c"
        HEAP[$j]=$195; //@line 5891 "xmlparse.c"
        var $196=HEAP[$j]; //@line 5891 "xmlparse.c"
        HEAP[$iftmp_275]=$196; //@line 5891 "xmlparse.c"
        __label__ = 28; break; //@line 5891 "xmlparse.c"
      case 28: // $bb31
        var $197=HEAP[$newV]; //@line 5888 "xmlparse.c"
        var $198=HEAP[$j]; //@line 5888 "xmlparse.c"
        var $199=(($197+4*$198)&4294967295); //@line 5888 "xmlparse.c"
        var $200=HEAP[$199]; //@line 5888 "xmlparse.c"
        var $201=($200)!=0; //@line 5888 "xmlparse.c"
        if ($201) { __label__ = 23; break; } else { __label__ = 29; break; } //@line 5888 "xmlparse.c"
      case 29: // $bb32
        var $202=HEAP[$table_addr]; //@line 5893 "xmlparse.c"
        var $203=(($202)&4294967295); //@line 5893 "xmlparse.c"
        var $204=HEAP[$203]; //@line 5893 "xmlparse.c"
        var $205=HEAP[$i]; //@line 5893 "xmlparse.c"
        var $206=(($204+4*$205)&4294967295); //@line 5893 "xmlparse.c"
        var $207=HEAP[$206]; //@line 5893 "xmlparse.c"
        var $208=HEAP[$newV]; //@line 5893 "xmlparse.c"
        var $209=HEAP[$j]; //@line 5893 "xmlparse.c"
        var $210=(($208+4*$209)&4294967295); //@line 5893 "xmlparse.c"
        HEAP[$210]=$207; //@line 5893 "xmlparse.c"
        __label__ = 30; break; //@line 5893 "xmlparse.c"
      case 30: // $bb33
        var $211=HEAP[$i]; //@line 5883 "xmlparse.c"
        var $212=((($211) + 1)&4294967295); //@line 5883 "xmlparse.c"
        HEAP[$i]=$212; //@line 5883 "xmlparse.c"
        __label__ = 31; break; //@line 5883 "xmlparse.c"
      case 31: // $bb34
        var $213=HEAP[$table_addr]; //@line 5883 "xmlparse.c"
        var $214=(($213+8)&4294967295); //@line 5883 "xmlparse.c"
        var $215=HEAP[$214]; //@line 5883 "xmlparse.c"
        var $216=HEAP[$i]; //@line 5883 "xmlparse.c"
        var $217=((($215))>>>0) > ((($216))>>>0); //@line 5883 "xmlparse.c"
        if ($217) { __label__ = 21; break; } else { __label__ = 32; break; } //@line 5883 "xmlparse.c"
      case 32: // $bb35
        var $218=HEAP[$table_addr]; //@line 5895 "xmlparse.c"
        var $219=(($218+16)&4294967295); //@line 5895 "xmlparse.c"
        var $220=HEAP[$219]; //@line 5895 "xmlparse.c"
        var $221=(($220+8)&4294967295); //@line 5895 "xmlparse.c"
        var $222=HEAP[$221]; //@line 5895 "xmlparse.c"
        var $223=HEAP[$table_addr]; //@line 5895 "xmlparse.c"
        var $224=(($223)&4294967295); //@line 5895 "xmlparse.c"
        var $225=HEAP[$224]; //@line 5895 "xmlparse.c"
        var $226=$225; //@line 5895 "xmlparse.c"
        FUNCTION_TABLE[$222]($226); //@line 5895 "xmlparse.c"
        var $227=HEAP[$table_addr]; //@line 5896 "xmlparse.c"
        var $228=(($227)&4294967295); //@line 5896 "xmlparse.c"
        var $229=HEAP[$newV]; //@line 5896 "xmlparse.c"
        HEAP[$228]=$229; //@line 5896 "xmlparse.c"
        var $230=HEAP[$table_addr]; //@line 5897 "xmlparse.c"
        var $231=(($230+4)&4294967295); //@line 5897 "xmlparse.c"
        var $232=HEAP[$newPower]; //@line 5897 "xmlparse.c"
        HEAP[$231]=$232; //@line 5897 "xmlparse.c"
        var $233=HEAP[$table_addr]; //@line 5898 "xmlparse.c"
        var $234=(($233+8)&4294967295); //@line 5898 "xmlparse.c"
        var $235=HEAP[$newSize]; //@line 5898 "xmlparse.c"
        HEAP[$234]=$235; //@line 5898 "xmlparse.c"
        var $236=HEAP[$h]; //@line 5899 "xmlparse.c"
        var $237=HEAP[$newMask]; //@line 5899 "xmlparse.c"
        var $238=($236) & ($237); //@line 5899 "xmlparse.c"
        HEAP[$i]=$238; //@line 5899 "xmlparse.c"
        HEAP[$step]=0; //@line 5900 "xmlparse.c"
        __label__ = 38; break; //@line 5900 "xmlparse.c"
      case 33: // $bb36
        var $239=HEAP[$step]; //@line 5902 "xmlparse.c"
        var $240=reSign(($239), 8, 0)==0; //@line 5902 "xmlparse.c"
        if ($240) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 5902 "xmlparse.c"
      case 34: // $bb37
        var $241=HEAP[$newMask]; //@line 5903 "xmlparse.c"
        var $not38=($241) ^ -1; //@line 5903 "xmlparse.c"
        var $242=HEAP[$h]; //@line 5903 "xmlparse.c"
        var $243=($not38) & ($242); //@line 5903 "xmlparse.c"
        var $244=HEAP[$newPower]; //@line 5903 "xmlparse.c"
        var $245=unSign(($244), 8, 0); //@line 5903 "xmlparse.c"
        var $246=((($245) - 1)&4294967295); //@line 5903 "xmlparse.c"
        var $247=((($243))>>>0) >>> ((($246))>>>0); //@line 5903 "xmlparse.c"
        var $248=((($247)) & 255); //@line 5903 "xmlparse.c"
        var $249=HEAP[$newMask]; //@line 5903 "xmlparse.c"
        var $250=((($249))>>>0) >>> 2; //@line 5903 "xmlparse.c"
        var $251=((($250)) & 255); //@line 5903 "xmlparse.c"
        var $252=($248) & ($251); //@line 5903 "xmlparse.c"
        var $253=($252) | 1; //@line 5903 "xmlparse.c"
        HEAP[$step]=$253; //@line 5903 "xmlparse.c"
        __label__ = 35; break; //@line 5903 "xmlparse.c"
      case 35: // $bb40
        var $254=HEAP[$step]; //@line 5904 "xmlparse.c"
        var $255=unSign(($254), 8, 0); //@line 5904 "xmlparse.c"
        var $256=HEAP[$i]; //@line 5904 "xmlparse.c"
        var $257=((($255))>>>0) > ((($256))>>>0); //@line 5904 "xmlparse.c"
        if ($257) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 5904 "xmlparse.c"
      case 36: // $bb41
        var $258=HEAP[$step]; //@line 5904 "xmlparse.c"
        var $259=unSign(($258), 8, 0); //@line 5904 "xmlparse.c"
        var $260=HEAP[$newSize]; //@line 5904 "xmlparse.c"
        var $261=((($260) - ($259))&4294967295); //@line 5904 "xmlparse.c"
        var $262=HEAP[$i]; //@line 5904 "xmlparse.c"
        var $263=((($261) + ($262))&4294967295); //@line 5904 "xmlparse.c"
        HEAP[$i]=$263; //@line 5904 "xmlparse.c"
        var $264=HEAP[$i]; //@line 5904 "xmlparse.c"
        HEAP[$iftmp_276]=$264; //@line 5904 "xmlparse.c"
        __label__ = 38; break; //@line 5904 "xmlparse.c"
      case 37: // $bb42
        var $265=HEAP[$step]; //@line 5904 "xmlparse.c"
        var $266=unSign(($265), 8, 0); //@line 5904 "xmlparse.c"
        var $267=HEAP[$i]; //@line 5904 "xmlparse.c"
        var $268=((($267) - ($266))&4294967295); //@line 5904 "xmlparse.c"
        HEAP[$i]=$268; //@line 5904 "xmlparse.c"
        var $269=HEAP[$i]; //@line 5904 "xmlparse.c"
        HEAP[$iftmp_276]=$269; //@line 5904 "xmlparse.c"
        __label__ = 38; break; //@line 5904 "xmlparse.c"
      case 38: // $bb43
        var $270=HEAP[$table_addr]; //@line 5901 "xmlparse.c"
        var $271=(($270)&4294967295); //@line 5901 "xmlparse.c"
        var $272=HEAP[$271]; //@line 5901 "xmlparse.c"
        var $273=HEAP[$i]; //@line 5901 "xmlparse.c"
        var $274=(($272+4*$273)&4294967295); //@line 5901 "xmlparse.c"
        var $275=HEAP[$274]; //@line 5901 "xmlparse.c"
        var $276=($275)!=0; //@line 5901 "xmlparse.c"
        if ($276) { __label__ = 33; break; } else { __label__ = 39; break; } //@line 5901 "xmlparse.c"
      case 39: // $bb44
        var $277=HEAP[$table_addr]; //@line 5908 "xmlparse.c"
        var $278=(($277)&4294967295); //@line 5908 "xmlparse.c"
        var $279=HEAP[$278]; //@line 5908 "xmlparse.c"
        var $280=HEAP[$table_addr]; //@line 5908 "xmlparse.c"
        var $281=(($280+16)&4294967295); //@line 5908 "xmlparse.c"
        var $282=HEAP[$281]; //@line 5908 "xmlparse.c"
        var $283=(($282)&4294967295); //@line 5908 "xmlparse.c"
        var $284=HEAP[$283]; //@line 5908 "xmlparse.c"
        var $285=HEAP[$createSize_addr]; //@line 5908 "xmlparse.c"
        var $286=FUNCTION_TABLE[$284]($285); //@line 5908 "xmlparse.c"
        var $287=$286; //@line 5908 "xmlparse.c"
        var $288=HEAP[$i]; //@line 5908 "xmlparse.c"
        var $289=(($279+4*$288)&4294967295); //@line 5908 "xmlparse.c"
        HEAP[$289]=$287; //@line 5908 "xmlparse.c"
        var $290=HEAP[$table_addr]; //@line 5909 "xmlparse.c"
        var $291=(($290)&4294967295); //@line 5909 "xmlparse.c"
        var $292=HEAP[$291]; //@line 5909 "xmlparse.c"
        var $293=HEAP[$i]; //@line 5909 "xmlparse.c"
        var $294=(($292+4*$293)&4294967295); //@line 5909 "xmlparse.c"
        var $295=HEAP[$294]; //@line 5909 "xmlparse.c"
        var $296=($295)==0; //@line 5909 "xmlparse.c"
        if ($296) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 5909 "xmlparse.c"
      case 40: // $bb45
        HEAP[$0]=0; //@line 5910 "xmlparse.c"
        __label__ = 42; break; //@line 5910 "xmlparse.c"
      case 41: // $bb46
        var $297=HEAP[$table_addr]; //@line 5911 "xmlparse.c"
        var $298=(($297)&4294967295); //@line 5911 "xmlparse.c"
        var $299=HEAP[$298]; //@line 5911 "xmlparse.c"
        var $300=HEAP[$i]; //@line 5911 "xmlparse.c"
        var $301=(($299+4*$300)&4294967295); //@line 5911 "xmlparse.c"
        var $302=HEAP[$301]; //@line 5911 "xmlparse.c"
        var $303=HEAP[$createSize_addr]; //@line 5911 "xmlparse.c"
        var $304=$302; //@line 5911 "xmlparse.c"
        _llvm_memset_p0i8_i32($304, 0, $303, 1, 0); //@line 5911 "xmlparse.c"
        var $305=HEAP[$table_addr]; //@line 5912 "xmlparse.c"
        var $306=(($305)&4294967295); //@line 5912 "xmlparse.c"
        var $307=HEAP[$306]; //@line 5912 "xmlparse.c"
        var $308=HEAP[$i]; //@line 5912 "xmlparse.c"
        var $309=(($307+4*$308)&4294967295); //@line 5912 "xmlparse.c"
        var $310=HEAP[$309]; //@line 5912 "xmlparse.c"
        var $311=(($310)&4294967295); //@line 5912 "xmlparse.c"
        var $312=HEAP[$name_addr]; //@line 5912 "xmlparse.c"
        HEAP[$311]=$312; //@line 5912 "xmlparse.c"
        var $313=HEAP[$table_addr]; //@line 5913 "xmlparse.c"
        var $314=(($313+12)&4294967295); //@line 5913 "xmlparse.c"
        var $315=HEAP[$314]; //@line 5913 "xmlparse.c"
        var $316=((($315) + 1)&4294967295); //@line 5913 "xmlparse.c"
        var $317=HEAP[$table_addr]; //@line 5913 "xmlparse.c"
        var $318=(($317+12)&4294967295); //@line 5913 "xmlparse.c"
        HEAP[$318]=$316; //@line 5913 "xmlparse.c"
        var $319=HEAP[$table_addr]; //@line 5914 "xmlparse.c"
        var $320=(($319)&4294967295); //@line 5914 "xmlparse.c"
        var $321=HEAP[$320]; //@line 5914 "xmlparse.c"
        var $322=HEAP[$i]; //@line 5914 "xmlparse.c"
        var $323=(($321+4*$322)&4294967295); //@line 5914 "xmlparse.c"
        var $324=HEAP[$323]; //@line 5914 "xmlparse.c"
        HEAP[$0]=$324; //@line 5914 "xmlparse.c"
        __label__ = 42; break; //@line 5914 "xmlparse.c"
      case 42: // $bb47
        var $325=HEAP[$0]; //@line 5845 "xmlparse.c"
        HEAP[$retval]=$325; //@line 5845 "xmlparse.c"
        __label__ = 43; break; //@line 5845 "xmlparse.c"
      case 43: // $return
        var $retval48=HEAP[$retval]; //@line 5845 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval48; //@line 5845 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _hashTableClear($table) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $table_addr=__stackBase__;
        var $i=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$table_addr]=$table;
        HEAP[$i]=0; //@line 5921 "xmlparse.c"
        __label__ = 2; break; //@line 5921 "xmlparse.c"
      case 1: // $bb
        var $0=HEAP[$table_addr]; //@line 5922 "xmlparse.c"
        var $1=(($0+16)&4294967295); //@line 5922 "xmlparse.c"
        var $2=HEAP[$1]; //@line 5922 "xmlparse.c"
        var $3=(($2+8)&4294967295); //@line 5922 "xmlparse.c"
        var $4=HEAP[$3]; //@line 5922 "xmlparse.c"
        var $5=HEAP[$table_addr]; //@line 5922 "xmlparse.c"
        var $6=(($5)&4294967295); //@line 5922 "xmlparse.c"
        var $7=HEAP[$6]; //@line 5922 "xmlparse.c"
        var $8=HEAP[$i]; //@line 5922 "xmlparse.c"
        var $9=(($7+4*$8)&4294967295); //@line 5922 "xmlparse.c"
        var $10=HEAP[$9]; //@line 5922 "xmlparse.c"
        var $11=$10; //@line 5922 "xmlparse.c"
        FUNCTION_TABLE[$4]($11); //@line 5922 "xmlparse.c"
        var $12=HEAP[$table_addr]; //@line 5923 "xmlparse.c"
        var $13=(($12)&4294967295); //@line 5923 "xmlparse.c"
        var $14=HEAP[$13]; //@line 5923 "xmlparse.c"
        var $15=HEAP[$i]; //@line 5923 "xmlparse.c"
        var $16=(($14+4*$15)&4294967295); //@line 5923 "xmlparse.c"
        HEAP[$16]=0; //@line 5923 "xmlparse.c"
        var $17=HEAP[$i]; //@line 5921 "xmlparse.c"
        var $18=((($17) + 1)&4294967295); //@line 5921 "xmlparse.c"
        HEAP[$i]=$18; //@line 5921 "xmlparse.c"
        __label__ = 2; break; //@line 5921 "xmlparse.c"
      case 2: // $bb1
        var $19=HEAP[$table_addr]; //@line 5921 "xmlparse.c"
        var $20=(($19+8)&4294967295); //@line 5921 "xmlparse.c"
        var $21=HEAP[$20]; //@line 5921 "xmlparse.c"
        var $22=HEAP[$i]; //@line 5921 "xmlparse.c"
        var $23=((($21))>>>0) > ((($22))>>>0); //@line 5921 "xmlparse.c"
        if ($23) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 5921 "xmlparse.c"
      case 3: // $bb2
        var $24=HEAP[$table_addr]; //@line 5925 "xmlparse.c"
        var $25=(($24+12)&4294967295); //@line 5925 "xmlparse.c"
        HEAP[$25]=0; //@line 5925 "xmlparse.c"
        __label__ = 4; break; //@line 5926 "xmlparse.c"
      case 4: // $return
        STACKTOP = __stackBase__;
        return; //@line 5926 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _hashTableDestroy($table) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $table_addr=__stackBase__;
        var $i=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$table_addr]=$table;
        HEAP[$i]=0; //@line 5932 "xmlparse.c"
        __label__ = 2; break; //@line 5932 "xmlparse.c"
      case 1: // $bb
        var $0=HEAP[$table_addr]; //@line 5933 "xmlparse.c"
        var $1=(($0+16)&4294967295); //@line 5933 "xmlparse.c"
        var $2=HEAP[$1]; //@line 5933 "xmlparse.c"
        var $3=(($2+8)&4294967295); //@line 5933 "xmlparse.c"
        var $4=HEAP[$3]; //@line 5933 "xmlparse.c"
        var $5=HEAP[$table_addr]; //@line 5933 "xmlparse.c"
        var $6=(($5)&4294967295); //@line 5933 "xmlparse.c"
        var $7=HEAP[$6]; //@line 5933 "xmlparse.c"
        var $8=HEAP[$i]; //@line 5933 "xmlparse.c"
        var $9=(($7+4*$8)&4294967295); //@line 5933 "xmlparse.c"
        var $10=HEAP[$9]; //@line 5933 "xmlparse.c"
        var $11=$10; //@line 5933 "xmlparse.c"
        FUNCTION_TABLE[$4]($11); //@line 5933 "xmlparse.c"
        var $12=HEAP[$i]; //@line 5932 "xmlparse.c"
        var $13=((($12) + 1)&4294967295); //@line 5932 "xmlparse.c"
        HEAP[$i]=$13; //@line 5932 "xmlparse.c"
        __label__ = 2; break; //@line 5932 "xmlparse.c"
      case 2: // $bb1
        var $14=HEAP[$table_addr]; //@line 5932 "xmlparse.c"
        var $15=(($14+8)&4294967295); //@line 5932 "xmlparse.c"
        var $16=HEAP[$15]; //@line 5932 "xmlparse.c"
        var $17=HEAP[$i]; //@line 5932 "xmlparse.c"
        var $18=((($16))>>>0) > ((($17))>>>0); //@line 5932 "xmlparse.c"
        if ($18) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 5932 "xmlparse.c"
      case 3: // $bb2
        var $19=HEAP[$table_addr]; //@line 5934 "xmlparse.c"
        var $20=(($19+16)&4294967295); //@line 5934 "xmlparse.c"
        var $21=HEAP[$20]; //@line 5934 "xmlparse.c"
        var $22=(($21+8)&4294967295); //@line 5934 "xmlparse.c"
        var $23=HEAP[$22]; //@line 5934 "xmlparse.c"
        var $24=HEAP[$table_addr]; //@line 5934 "xmlparse.c"
        var $25=(($24)&4294967295); //@line 5934 "xmlparse.c"
        var $26=HEAP[$25]; //@line 5934 "xmlparse.c"
        var $27=$26; //@line 5934 "xmlparse.c"
        FUNCTION_TABLE[$23]($27); //@line 5934 "xmlparse.c"
        __label__ = 4; break; //@line 5935 "xmlparse.c"
      case 4: // $return
        STACKTOP = __stackBase__;
        return; //@line 5935 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _hashTableInit($p, $ms) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $p_addr=__stackBase__;
        var $ms_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$p_addr]=$p;
        HEAP[$ms_addr]=$ms;
        var $0=HEAP[$p_addr]; //@line 5940 "xmlparse.c"
        var $1=(($0+4)&4294967295); //@line 5940 "xmlparse.c"
        HEAP[$1]=0; //@line 5940 "xmlparse.c"
        var $2=HEAP[$p_addr]; //@line 5941 "xmlparse.c"
        var $3=(($2+8)&4294967295); //@line 5941 "xmlparse.c"
        HEAP[$3]=0; //@line 5941 "xmlparse.c"
        var $4=HEAP[$p_addr]; //@line 5942 "xmlparse.c"
        var $5=(($4+12)&4294967295); //@line 5942 "xmlparse.c"
        HEAP[$5]=0; //@line 5942 "xmlparse.c"
        var $6=HEAP[$p_addr]; //@line 5943 "xmlparse.c"
        var $7=(($6)&4294967295); //@line 5943 "xmlparse.c"
        HEAP[$7]=0; //@line 5943 "xmlparse.c"
        var $8=HEAP[$p_addr]; //@line 5944 "xmlparse.c"
        var $9=(($8+16)&4294967295); //@line 5944 "xmlparse.c"
        var $10=HEAP[$ms_addr]; //@line 5944 "xmlparse.c"
        HEAP[$9]=$10; //@line 5944 "xmlparse.c"
        __label__ = 1; break; //@line 5945 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 5945 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _hashTableIterInit($iter, $table) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $iter_addr=__stackBase__;
        var $table_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$iter_addr]=$iter;
        HEAP[$table_addr]=$table;
        var $0=HEAP[$table_addr]; //@line 5950 "xmlparse.c"
        var $1=(($0)&4294967295); //@line 5950 "xmlparse.c"
        var $2=HEAP[$1]; //@line 5950 "xmlparse.c"
        var $3=HEAP[$iter_addr]; //@line 5950 "xmlparse.c"
        var $4=(($3)&4294967295); //@line 5950 "xmlparse.c"
        HEAP[$4]=$2; //@line 5950 "xmlparse.c"
        var $5=HEAP[$iter_addr]; //@line 5951 "xmlparse.c"
        var $6=(($5)&4294967295); //@line 5951 "xmlparse.c"
        var $7=HEAP[$6]; //@line 5951 "xmlparse.c"
        var $8=HEAP[$table_addr]; //@line 5951 "xmlparse.c"
        var $9=(($8+8)&4294967295); //@line 5951 "xmlparse.c"
        var $10=HEAP[$9]; //@line 5951 "xmlparse.c"
        var $11=(($7+4*$10)&4294967295); //@line 5951 "xmlparse.c"
        var $12=HEAP[$iter_addr]; //@line 5951 "xmlparse.c"
        var $13=(($12+4)&4294967295); //@line 5951 "xmlparse.c"
        HEAP[$13]=$11; //@line 5951 "xmlparse.c"
        __label__ = 1; break; //@line 5952 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 5952 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _hashTableIterNext($iter) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $iter_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $tem=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$iter_addr]=$iter;
        __label__ = 3; break; //@line 5957 "xmlparse.c"
      case 1: // $bb
        var $1=HEAP[$iter_addr]; //@line 5958 "xmlparse.c"
        var $2=(($1)&4294967295); //@line 5958 "xmlparse.c"
        var $3=HEAP[$2]; //@line 5958 "xmlparse.c"
        var $4=HEAP[$3]; //@line 5958 "xmlparse.c"
        HEAP[$tem]=$4; //@line 5958 "xmlparse.c"
        var $5=(($3+4)&4294967295); //@line 5958 "xmlparse.c"
        var $6=HEAP[$iter_addr]; //@line 5958 "xmlparse.c"
        var $7=(($6)&4294967295); //@line 5958 "xmlparse.c"
        HEAP[$7]=$5; //@line 5958 "xmlparse.c"
        var $8=HEAP[$tem]; //@line 5959 "xmlparse.c"
        var $9=($8)!=0; //@line 5959 "xmlparse.c"
        if ($9) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 5959 "xmlparse.c"
      case 2: // $bb1
        var $10=HEAP[$tem]; //@line 5960 "xmlparse.c"
        HEAP[$0]=$10; //@line 5960 "xmlparse.c"
        __label__ = 5; break; //@line 5960 "xmlparse.c"
      case 3: // $bb2
        var $11=HEAP[$iter_addr]; //@line 5957 "xmlparse.c"
        var $12=(($11)&4294967295); //@line 5957 "xmlparse.c"
        var $13=HEAP[$12]; //@line 5957 "xmlparse.c"
        var $14=HEAP[$iter_addr]; //@line 5957 "xmlparse.c"
        var $15=(($14+4)&4294967295); //@line 5957 "xmlparse.c"
        var $16=HEAP[$15]; //@line 5957 "xmlparse.c"
        var $17=($13)!=($16); //@line 5957 "xmlparse.c"
        if ($17) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 5957 "xmlparse.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 5962 "xmlparse.c"
        __label__ = 5; break; //@line 5962 "xmlparse.c"
      case 5: // $bb4
        var $18=HEAP[$0]; //@line 5960 "xmlparse.c"
        HEAP[$retval]=$18; //@line 5960 "xmlparse.c"
        __label__ = 6; break; //@line 5960 "xmlparse.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 5960 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 5960 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _poolInit($pool, $ms) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $pool_addr=__stackBase__;
        var $ms_addr=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$pool_addr]=$pool;
        HEAP[$ms_addr]=$ms;
        var $0=HEAP[$pool_addr]; //@line 5968 "xmlparse.c"
        var $1=(($0)&4294967295); //@line 5968 "xmlparse.c"
        HEAP[$1]=0; //@line 5968 "xmlparse.c"
        var $2=HEAP[$pool_addr]; //@line 5969 "xmlparse.c"
        var $3=(($2+4)&4294967295); //@line 5969 "xmlparse.c"
        HEAP[$3]=0; //@line 5969 "xmlparse.c"
        var $4=HEAP[$pool_addr]; //@line 5970 "xmlparse.c"
        var $5=(($4+16)&4294967295); //@line 5970 "xmlparse.c"
        HEAP[$5]=0; //@line 5970 "xmlparse.c"
        var $6=HEAP[$pool_addr]; //@line 5971 "xmlparse.c"
        var $7=(($6+12)&4294967295); //@line 5971 "xmlparse.c"
        HEAP[$7]=0; //@line 5971 "xmlparse.c"
        var $8=HEAP[$pool_addr]; //@line 5972 "xmlparse.c"
        var $9=(($8+8)&4294967295); //@line 5972 "xmlparse.c"
        HEAP[$9]=0; //@line 5972 "xmlparse.c"
        var $10=HEAP[$pool_addr]; //@line 5973 "xmlparse.c"
        var $11=(($10+20)&4294967295); //@line 5973 "xmlparse.c"
        var $12=HEAP[$ms_addr]; //@line 5973 "xmlparse.c"
        HEAP[$11]=$12; //@line 5973 "xmlparse.c"
        __label__ = 1; break; //@line 5974 "xmlparse.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 5974 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _poolClear($pool) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $pool_addr=__stackBase__;
        var $p=__stackBase__+4;
        var $tem=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$pool_addr]=$pool;
        var $0=HEAP[$pool_addr]; //@line 5979 "xmlparse.c"
        var $1=(($0+4)&4294967295); //@line 5979 "xmlparse.c"
        var $2=HEAP[$1]; //@line 5979 "xmlparse.c"
        var $3=($2)==0; //@line 5979 "xmlparse.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 5979 "xmlparse.c"
      case 1: // $bb
        var $4=HEAP[$pool_addr]; //@line 5980 "xmlparse.c"
        var $5=(($4)&4294967295); //@line 5980 "xmlparse.c"
        var $6=HEAP[$5]; //@line 5980 "xmlparse.c"
        var $7=HEAP[$pool_addr]; //@line 5980 "xmlparse.c"
        var $8=(($7+4)&4294967295); //@line 5980 "xmlparse.c"
        HEAP[$8]=$6; //@line 5980 "xmlparse.c"
        __label__ = 5; break; //@line 5980 "xmlparse.c"
      case 2: // $bb1
        var $9=HEAP[$pool_addr]; //@line 5982 "xmlparse.c"
        var $10=(($9)&4294967295); //@line 5982 "xmlparse.c"
        var $11=HEAP[$10]; //@line 5982 "xmlparse.c"
        HEAP[$p]=$11; //@line 5982 "xmlparse.c"
        __label__ = 4; break; //@line 5982 "xmlparse.c"
      case 3: // $bb2
        var $12=HEAP[$p]; //@line 5984 "xmlparse.c"
        var $13=(($12)&4294967295); //@line 5984 "xmlparse.c"
        var $14=HEAP[$13]; //@line 5984 "xmlparse.c"
        HEAP[$tem]=$14; //@line 5984 "xmlparse.c"
        var $15=HEAP[$pool_addr]; //@line 5985 "xmlparse.c"
        var $16=(($15+4)&4294967295); //@line 5985 "xmlparse.c"
        var $17=HEAP[$16]; //@line 5985 "xmlparse.c"
        var $18=HEAP[$p]; //@line 5985 "xmlparse.c"
        var $19=(($18)&4294967295); //@line 5985 "xmlparse.c"
        HEAP[$19]=$17; //@line 5985 "xmlparse.c"
        var $20=HEAP[$pool_addr]; //@line 5986 "xmlparse.c"
        var $21=(($20+4)&4294967295); //@line 5986 "xmlparse.c"
        var $22=HEAP[$p]; //@line 5986 "xmlparse.c"
        HEAP[$21]=$22; //@line 5986 "xmlparse.c"
        var $23=HEAP[$tem]; //@line 5987 "xmlparse.c"
        HEAP[$p]=$23; //@line 5987 "xmlparse.c"
        __label__ = 4; break; //@line 5987 "xmlparse.c"
      case 4: // $bb3
        var $24=HEAP[$p]; //@line 5983 "xmlparse.c"
        var $25=($24)!=0; //@line 5983 "xmlparse.c"
        if ($25) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 5983 "xmlparse.c"
      case 5: // $bb4
        var $26=HEAP[$pool_addr]; //@line 5990 "xmlparse.c"
        var $27=(($26)&4294967295); //@line 5990 "xmlparse.c"
        HEAP[$27]=0; //@line 5990 "xmlparse.c"
        var $28=HEAP[$pool_addr]; //@line 5991 "xmlparse.c"
        var $29=(($28+16)&4294967295); //@line 5991 "xmlparse.c"
        HEAP[$29]=0; //@line 5991 "xmlparse.c"
        var $30=HEAP[$pool_addr]; //@line 5992 "xmlparse.c"
        var $31=(($30+12)&4294967295); //@line 5992 "xmlparse.c"
        HEAP[$31]=0; //@line 5992 "xmlparse.c"
        var $32=HEAP[$pool_addr]; //@line 5993 "xmlparse.c"
        var $33=(($32+8)&4294967295); //@line 5993 "xmlparse.c"
        HEAP[$33]=0; //@line 5993 "xmlparse.c"
        __label__ = 6; break; //@line 5994 "xmlparse.c"
      case 6: // $return
        STACKTOP = __stackBase__;
        return; //@line 5994 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _poolDestroy($pool) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $pool_addr=__stackBase__;
        var $p=__stackBase__+4;
        var $tem=__stackBase__+8;
        var $tem4=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$pool_addr]=$pool;
        var $0=HEAP[$pool_addr]; //@line 5999 "xmlparse.c"
        var $1=(($0)&4294967295); //@line 5999 "xmlparse.c"
        var $2=HEAP[$1]; //@line 5999 "xmlparse.c"
        HEAP[$p]=$2; //@line 5999 "xmlparse.c"
        __label__ = 2; break; //@line 5999 "xmlparse.c"
      case 1: // $bb
        var $3=HEAP[$p]; //@line 6001 "xmlparse.c"
        var $4=(($3)&4294967295); //@line 6001 "xmlparse.c"
        var $5=HEAP[$4]; //@line 6001 "xmlparse.c"
        HEAP[$tem]=$5; //@line 6001 "xmlparse.c"
        var $6=HEAP[$pool_addr]; //@line 6002 "xmlparse.c"
        var $7=(($6+20)&4294967295); //@line 6002 "xmlparse.c"
        var $8=HEAP[$7]; //@line 6002 "xmlparse.c"
        var $9=(($8+8)&4294967295); //@line 6002 "xmlparse.c"
        var $10=HEAP[$9]; //@line 6002 "xmlparse.c"
        var $11=HEAP[$p]; //@line 6002 "xmlparse.c"
        var $12=$11; //@line 6002 "xmlparse.c"
        FUNCTION_TABLE[$10]($12); //@line 6002 "xmlparse.c"
        var $13=HEAP[$tem]; //@line 6003 "xmlparse.c"
        HEAP[$p]=$13; //@line 6003 "xmlparse.c"
        __label__ = 2; break; //@line 6003 "xmlparse.c"
      case 2: // $bb1
        var $14=HEAP[$p]; //@line 6000 "xmlparse.c"
        var $15=($14)!=0; //@line 6000 "xmlparse.c"
        if ($15) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 6000 "xmlparse.c"
      case 3: // $bb2
        var $16=HEAP[$pool_addr]; //@line 6005 "xmlparse.c"
        var $17=(($16+4)&4294967295); //@line 6005 "xmlparse.c"
        var $18=HEAP[$17]; //@line 6005 "xmlparse.c"
        HEAP[$p]=$18; //@line 6005 "xmlparse.c"
        __label__ = 5; break; //@line 6005 "xmlparse.c"
      case 4: // $bb3
        var $19=HEAP[$p]; //@line 6007 "xmlparse.c"
        var $20=(($19)&4294967295); //@line 6007 "xmlparse.c"
        var $21=HEAP[$20]; //@line 6007 "xmlparse.c"
        HEAP[$tem4]=$21; //@line 6007 "xmlparse.c"
        var $22=HEAP[$pool_addr]; //@line 6008 "xmlparse.c"
        var $23=(($22+20)&4294967295); //@line 6008 "xmlparse.c"
        var $24=HEAP[$23]; //@line 6008 "xmlparse.c"
        var $25=(($24+8)&4294967295); //@line 6008 "xmlparse.c"
        var $26=HEAP[$25]; //@line 6008 "xmlparse.c"
        var $27=HEAP[$p]; //@line 6008 "xmlparse.c"
        var $28=$27; //@line 6008 "xmlparse.c"
        FUNCTION_TABLE[$26]($28); //@line 6008 "xmlparse.c"
        var $29=HEAP[$tem4]; //@line 6009 "xmlparse.c"
        HEAP[$p]=$29; //@line 6009 "xmlparse.c"
        __label__ = 5; break; //@line 6009 "xmlparse.c"
      case 5: // $bb5
        var $30=HEAP[$p]; //@line 6006 "xmlparse.c"
        var $31=($30)!=0; //@line 6006 "xmlparse.c"
        if ($31) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 6006 "xmlparse.c"
      case 6: // $bb6
        __label__ = 7; break; //@line 6011 "xmlparse.c"
      case 7: // $return
        STACKTOP = __stackBase__;
        return; //@line 6011 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _poolAppend($pool, $enc, $ptr, $end) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $pool_addr=__stackBase__;
        var $enc_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$pool_addr]=$pool;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        var $1=HEAP[$pool_addr]; //@line 6017 "xmlparse.c"
        var $2=(($1+12)&4294967295); //@line 6017 "xmlparse.c"
        var $3=HEAP[$2]; //@line 6017 "xmlparse.c"
        var $4=($3)==0; //@line 6017 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 6017 "xmlparse.c"
      case 1: // $bb
        var $5=HEAP[$pool_addr]; //@line 6017 "xmlparse.c"
        var $6=_poolGrow($5); //@line 6017 "xmlparse.c"
        var $7=reSign(($6), 8, 0)==0; //@line 6017 "xmlparse.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 6017 "xmlparse.c"
      case 2: // $bb1
        HEAP[$0]=0; //@line 6018 "xmlparse.c"
        __label__ = 8; break; //@line 6018 "xmlparse.c"
      case 3: // $bb2
        var $8=HEAP[$enc_addr]; //@line 6020 "xmlparse.c"
        var $9=(($8+56)&4294967295); //@line 6020 "xmlparse.c"
        var $10=HEAP[$9]; //@line 6020 "xmlparse.c"
        var $11=HEAP[$pool_addr]; //@line 6020 "xmlparse.c"
        var $12=(($11+8)&4294967295); //@line 6020 "xmlparse.c"
        var $13=HEAP[$12]; //@line 6020 "xmlparse.c"
        var $14=HEAP[$pool_addr]; //@line 6020 "xmlparse.c"
        var $15=(($14+12)&4294967295); //@line 6020 "xmlparse.c"
        var $16=HEAP[$enc_addr]; //@line 6020 "xmlparse.c"
        var $17=HEAP[$end_addr]; //@line 6020 "xmlparse.c"
        FUNCTION_TABLE[$10]($16, $ptr_addr, $17, $15, $13); //@line 6020 "xmlparse.c"
        var $18=HEAP[$ptr_addr]; //@line 6021 "xmlparse.c"
        var $19=HEAP[$end_addr]; //@line 6021 "xmlparse.c"
        var $20=($18)==($19); //@line 6021 "xmlparse.c"
        if ($20) { __label__ = 7; break; } else { __label__ = 4; break; } //@line 6021 "xmlparse.c"
      case 4: // $bb3
        var $21=HEAP[$pool_addr]; //@line 6023 "xmlparse.c"
        var $22=_poolGrow($21); //@line 6023 "xmlparse.c"
        var $23=reSign(($22), 8, 0)==0; //@line 6023 "xmlparse.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 6023 "xmlparse.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 6024 "xmlparse.c"
        __label__ = 8; break; //@line 6024 "xmlparse.c"
      case 6: // $bb5
        __label__ = 3; break; //@line 6024 "xmlparse.c"
      case 7: // $bb6
        var $24=HEAP[$pool_addr]; //@line 6026 "xmlparse.c"
        var $25=(($24+16)&4294967295); //@line 6026 "xmlparse.c"
        var $26=HEAP[$25]; //@line 6026 "xmlparse.c"
        HEAP[$0]=$26; //@line 6026 "xmlparse.c"
        __label__ = 8; break; //@line 6026 "xmlparse.c"
      case 8: // $bb7
        var $27=HEAP[$0]; //@line 6018 "xmlparse.c"
        HEAP[$retval]=$27; //@line 6018 "xmlparse.c"
        __label__ = 9; break; //@line 6018 "xmlparse.c"
      case 9: // $return
        var $retval8=HEAP[$retval]; //@line 6018 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval8; //@line 6018 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _poolCopyString($pool, $s) {
    var __stackBase__  = STACKTOP; STACKTOP += 17; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 17);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $pool_addr=__stackBase__;
        var $s_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $iftmp_278=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$pool_addr]=$pool;
        HEAP[$s_addr]=$s;
        __label__ = 1; break; //@line 6031 "xmlparse.c"
      case 1: // $bb
        var $1=HEAP[$pool_addr]; //@line 6033 "xmlparse.c"
        var $2=(($1+12)&4294967295); //@line 6033 "xmlparse.c"
        var $3=HEAP[$2]; //@line 6033 "xmlparse.c"
        var $4=HEAP[$pool_addr]; //@line 6033 "xmlparse.c"
        var $5=(($4+8)&4294967295); //@line 6033 "xmlparse.c"
        var $6=HEAP[$5]; //@line 6033 "xmlparse.c"
        var $7=($3)!=($6); //@line 6033 "xmlparse.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 6033 "xmlparse.c"
      case 2: // $bb1
        var $8=HEAP[$pool_addr]; //@line 6033 "xmlparse.c"
        var $9=_poolGrow($8); //@line 6033 "xmlparse.c"
        var $10=reSign(($9), 8, 0)!=0; //@line 6033 "xmlparse.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 6033 "xmlparse.c"
      case 3: // $bb2
        var $11=HEAP[$pool_addr]; //@line 6033 "xmlparse.c"
        var $12=(($11+12)&4294967295); //@line 6033 "xmlparse.c"
        var $13=HEAP[$12]; //@line 6033 "xmlparse.c"
        var $14=HEAP[$s_addr]; //@line 6033 "xmlparse.c"
        var $15=HEAP[$14]; //@line 6033 "xmlparse.c"
        HEAP[$13]=$15; //@line 6033 "xmlparse.c"
        var $16=(($13+1)&4294967295); //@line 6033 "xmlparse.c"
        var $17=HEAP[$pool_addr]; //@line 6033 "xmlparse.c"
        var $18=(($17+12)&4294967295); //@line 6033 "xmlparse.c"
        HEAP[$18]=$16; //@line 6033 "xmlparse.c"
        HEAP[$iftmp_278]=0; //@line 6033 "xmlparse.c"
        __label__ = 5; break; //@line 6033 "xmlparse.c"
      case 4: // $bb3
        HEAP[$iftmp_278]=1; //@line 6033 "xmlparse.c"
        __label__ = 5; break; //@line 6033 "xmlparse.c"
      case 5: // $bb4
        var $19=HEAP[$iftmp_278]; //@line 6033 "xmlparse.c"
        var $toBool=reSign(($19), 8, 0)!=0; //@line 6033 "xmlparse.c"
        if ($toBool) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 6033 "xmlparse.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 6034 "xmlparse.c"
        __label__ = 9; break; //@line 6034 "xmlparse.c"
      case 7: // $bb6
        var $20=HEAP[$s_addr]; //@line 6035 "xmlparse.c"
        var $21=HEAP[$20]; //@line 6035 "xmlparse.c"
        var $22=reSign(($21), 8, 0)!=0; //@line 6035 "xmlparse.c"
        var $23=unSign(($22), 1, 0); //@line 6035 "xmlparse.c"
        var $24=HEAP[$s_addr]; //@line 6035 "xmlparse.c"
        var $25=(($24+1)&4294967295); //@line 6035 "xmlparse.c"
        HEAP[$s_addr]=$25; //@line 6035 "xmlparse.c"
        var $toBool7=reSign(($23), 8, 0)!=0; //@line 6035 "xmlparse.c"
        if ($toBool7) { __label__ = 1; break; } else { __label__ = 8; break; } //@line 6035 "xmlparse.c"
      case 8: // $bb8
        var $26=HEAP[$pool_addr]; //@line 6036 "xmlparse.c"
        var $27=(($26+16)&4294967295); //@line 6036 "xmlparse.c"
        var $28=HEAP[$27]; //@line 6036 "xmlparse.c"
        HEAP[$s_addr]=$28; //@line 6036 "xmlparse.c"
        var $29=HEAP[$pool_addr]; //@line 6037 "xmlparse.c"
        var $30=(($29+12)&4294967295); //@line 6037 "xmlparse.c"
        var $31=HEAP[$30]; //@line 6037 "xmlparse.c"
        var $32=HEAP[$pool_addr]; //@line 6037 "xmlparse.c"
        var $33=(($32+16)&4294967295); //@line 6037 "xmlparse.c"
        HEAP[$33]=$31; //@line 6037 "xmlparse.c"
        var $34=HEAP[$s_addr]; //@line 6038 "xmlparse.c"
        HEAP[$0]=$34; //@line 6038 "xmlparse.c"
        __label__ = 9; break; //@line 6038 "xmlparse.c"
      case 9: // $bb9
        var $35=HEAP[$0]; //@line 6034 "xmlparse.c"
        HEAP[$retval]=$35; //@line 6034 "xmlparse.c"
        __label__ = 10; break; //@line 6034 "xmlparse.c"
      case 10: // $return
        var $retval10=HEAP[$retval]; //@line 6034 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 6034 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _poolCopyStringN($pool, $s, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 21; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 21);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $pool_addr=__stackBase__;
        var $s_addr=__stackBase__+4;
        var $n_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $iftmp_279=__stackBase__+16;
        var $0=__stackBase__+17;
        var $_alloca_point_=0;
        HEAP[$pool_addr]=$pool;
        HEAP[$s_addr]=$s;
        HEAP[$n_addr]=$n;
        var $1=HEAP[$pool_addr]; //@line 6044 "xmlparse.c"
        var $2=(($1+12)&4294967295); //@line 6044 "xmlparse.c"
        var $3=HEAP[$2]; //@line 6044 "xmlparse.c"
        var $4=($3)==0; //@line 6044 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 6044 "xmlparse.c"
      case 1: // $bb
        var $5=HEAP[$pool_addr]; //@line 6044 "xmlparse.c"
        var $6=_poolGrow($5); //@line 6044 "xmlparse.c"
        var $7=reSign(($6), 8, 0)==0; //@line 6044 "xmlparse.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 6044 "xmlparse.c"
      case 2: // $bb1
        HEAP[$0]=0; //@line 6045 "xmlparse.c"
        __label__ = 13; break; //@line 6045 "xmlparse.c"
      case 3: // $bb2
        __label__ = 11; break; //@line 6045 "xmlparse.c"
      case 4: // $bb3
        var $8=HEAP[$pool_addr]; //@line 6047 "xmlparse.c"
        var $9=(($8+12)&4294967295); //@line 6047 "xmlparse.c"
        var $10=HEAP[$9]; //@line 6047 "xmlparse.c"
        var $11=HEAP[$pool_addr]; //@line 6047 "xmlparse.c"
        var $12=(($11+8)&4294967295); //@line 6047 "xmlparse.c"
        var $13=HEAP[$12]; //@line 6047 "xmlparse.c"
        var $14=($10)!=($13); //@line 6047 "xmlparse.c"
        if ($14) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 6047 "xmlparse.c"
      case 5: // $bb4
        var $15=HEAP[$pool_addr]; //@line 6047 "xmlparse.c"
        var $16=_poolGrow($15); //@line 6047 "xmlparse.c"
        var $17=reSign(($16), 8, 0)!=0; //@line 6047 "xmlparse.c"
        if ($17) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 6047 "xmlparse.c"
      case 6: // $bb5
        var $18=HEAP[$pool_addr]; //@line 6047 "xmlparse.c"
        var $19=(($18+12)&4294967295); //@line 6047 "xmlparse.c"
        var $20=HEAP[$19]; //@line 6047 "xmlparse.c"
        var $21=HEAP[$s_addr]; //@line 6047 "xmlparse.c"
        var $22=HEAP[$21]; //@line 6047 "xmlparse.c"
        HEAP[$20]=$22; //@line 6047 "xmlparse.c"
        var $23=(($20+1)&4294967295); //@line 6047 "xmlparse.c"
        var $24=HEAP[$pool_addr]; //@line 6047 "xmlparse.c"
        var $25=(($24+12)&4294967295); //@line 6047 "xmlparse.c"
        HEAP[$25]=$23; //@line 6047 "xmlparse.c"
        HEAP[$iftmp_279]=0; //@line 6047 "xmlparse.c"
        __label__ = 8; break; //@line 6047 "xmlparse.c"
      case 7: // $bb6
        HEAP[$iftmp_279]=1; //@line 6047 "xmlparse.c"
        __label__ = 8; break; //@line 6047 "xmlparse.c"
      case 8: // $bb7
        var $26=HEAP[$iftmp_279]; //@line 6047 "xmlparse.c"
        var $toBool=reSign(($26), 8, 0)!=0; //@line 6047 "xmlparse.c"
        if ($toBool) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 6047 "xmlparse.c"
      case 9: // $bb8
        HEAP[$0]=0; //@line 6048 "xmlparse.c"
        __label__ = 13; break; //@line 6048 "xmlparse.c"
      case 10: // $bb9
        var $27=HEAP[$n_addr]; //@line 6046 "xmlparse.c"
        var $28=((($27) - 1)&4294967295); //@line 6046 "xmlparse.c"
        HEAP[$n_addr]=$28; //@line 6046 "xmlparse.c"
        var $29=HEAP[$s_addr]; //@line 6046 "xmlparse.c"
        var $30=(($29+1)&4294967295); //@line 6046 "xmlparse.c"
        HEAP[$s_addr]=$30; //@line 6046 "xmlparse.c"
        __label__ = 11; break; //@line 6046 "xmlparse.c"
      case 11: // $bb10
        var $31=HEAP[$n_addr]; //@line 6046 "xmlparse.c"
        var $32=((($31))|0) > 0; //@line 6046 "xmlparse.c"
        if ($32) { __label__ = 4; break; } else { __label__ = 12; break; } //@line 6046 "xmlparse.c"
      case 12: // $bb11
        var $33=HEAP[$pool_addr]; //@line 6050 "xmlparse.c"
        var $34=(($33+16)&4294967295); //@line 6050 "xmlparse.c"
        var $35=HEAP[$34]; //@line 6050 "xmlparse.c"
        HEAP[$s_addr]=$35; //@line 6050 "xmlparse.c"
        var $36=HEAP[$pool_addr]; //@line 6051 "xmlparse.c"
        var $37=(($36+12)&4294967295); //@line 6051 "xmlparse.c"
        var $38=HEAP[$37]; //@line 6051 "xmlparse.c"
        var $39=HEAP[$pool_addr]; //@line 6051 "xmlparse.c"
        var $40=(($39+16)&4294967295); //@line 6051 "xmlparse.c"
        HEAP[$40]=$38; //@line 6051 "xmlparse.c"
        var $41=HEAP[$s_addr]; //@line 6052 "xmlparse.c"
        HEAP[$0]=$41; //@line 6052 "xmlparse.c"
        __label__ = 13; break; //@line 6052 "xmlparse.c"
      case 13: // $bb12
        var $42=HEAP[$0]; //@line 6045 "xmlparse.c"
        HEAP[$retval]=$42; //@line 6045 "xmlparse.c"
        __label__ = 14; break; //@line 6045 "xmlparse.c"
      case 14: // $return
        var $retval13=HEAP[$retval]; //@line 6045 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 6045 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _poolAppendString($pool, $s) {
    var __stackBase__  = STACKTOP; STACKTOP += 17; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 17);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $pool_addr=__stackBase__;
        var $s_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $iftmp_280=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$pool_addr]=$pool;
        HEAP[$s_addr]=$s;
        __label__ = 8; break; //@line 6058 "xmlparse.c"
      case 1: // $bb
        var $1=HEAP[$pool_addr]; //@line 6059 "xmlparse.c"
        var $2=(($1+12)&4294967295); //@line 6059 "xmlparse.c"
        var $3=HEAP[$2]; //@line 6059 "xmlparse.c"
        var $4=HEAP[$pool_addr]; //@line 6059 "xmlparse.c"
        var $5=(($4+8)&4294967295); //@line 6059 "xmlparse.c"
        var $6=HEAP[$5]; //@line 6059 "xmlparse.c"
        var $7=($3)!=($6); //@line 6059 "xmlparse.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 6059 "xmlparse.c"
      case 2: // $bb1
        var $8=HEAP[$pool_addr]; //@line 6059 "xmlparse.c"
        var $9=_poolGrow($8); //@line 6059 "xmlparse.c"
        var $10=reSign(($9), 8, 0)!=0; //@line 6059 "xmlparse.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 6059 "xmlparse.c"
      case 3: // $bb2
        var $11=HEAP[$pool_addr]; //@line 6059 "xmlparse.c"
        var $12=(($11+12)&4294967295); //@line 6059 "xmlparse.c"
        var $13=HEAP[$12]; //@line 6059 "xmlparse.c"
        var $14=HEAP[$s_addr]; //@line 6059 "xmlparse.c"
        var $15=HEAP[$14]; //@line 6059 "xmlparse.c"
        HEAP[$13]=$15; //@line 6059 "xmlparse.c"
        var $16=(($13+1)&4294967295); //@line 6059 "xmlparse.c"
        var $17=HEAP[$pool_addr]; //@line 6059 "xmlparse.c"
        var $18=(($17+12)&4294967295); //@line 6059 "xmlparse.c"
        HEAP[$18]=$16; //@line 6059 "xmlparse.c"
        HEAP[$iftmp_280]=0; //@line 6059 "xmlparse.c"
        __label__ = 5; break; //@line 6059 "xmlparse.c"
      case 4: // $bb3
        HEAP[$iftmp_280]=1; //@line 6059 "xmlparse.c"
        __label__ = 5; break; //@line 6059 "xmlparse.c"
      case 5: // $bb4
        var $19=HEAP[$iftmp_280]; //@line 6059 "xmlparse.c"
        var $toBool=reSign(($19), 8, 0)!=0; //@line 6059 "xmlparse.c"
        if ($toBool) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 6059 "xmlparse.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 6060 "xmlparse.c"
        __label__ = 10; break; //@line 6060 "xmlparse.c"
      case 7: // $bb6
        var $20=HEAP[$s_addr]; //@line 6061 "xmlparse.c"
        var $21=(($20+1)&4294967295); //@line 6061 "xmlparse.c"
        HEAP[$s_addr]=$21; //@line 6061 "xmlparse.c"
        __label__ = 8; break; //@line 6061 "xmlparse.c"
      case 8: // $bb7
        var $22=HEAP[$s_addr]; //@line 6058 "xmlparse.c"
        var $23=HEAP[$22]; //@line 6058 "xmlparse.c"
        var $24=reSign(($23), 8, 0)!=0; //@line 6058 "xmlparse.c"
        if ($24) { __label__ = 1; break; } else { __label__ = 9; break; } //@line 6058 "xmlparse.c"
      case 9: // $bb8
        var $25=HEAP[$pool_addr]; //@line 6063 "xmlparse.c"
        var $26=(($25+16)&4294967295); //@line 6063 "xmlparse.c"
        var $27=HEAP[$26]; //@line 6063 "xmlparse.c"
        HEAP[$0]=$27; //@line 6063 "xmlparse.c"
        __label__ = 10; break; //@line 6063 "xmlparse.c"
      case 10: // $bb9
        var $28=HEAP[$0]; //@line 6060 "xmlparse.c"
        HEAP[$retval]=$28; //@line 6060 "xmlparse.c"
        __label__ = 11; break; //@line 6060 "xmlparse.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 6060 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 6060 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _poolStoreString($pool, $enc, $ptr, $end) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $pool_addr=__stackBase__;
        var $enc_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$pool_addr]=$pool;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        var $1=HEAP[$pool_addr]; //@line 6070 "xmlparse.c"
        var $2=HEAP[$enc_addr]; //@line 6070 "xmlparse.c"
        var $3=HEAP[$ptr_addr]; //@line 6070 "xmlparse.c"
        var $4=HEAP[$end_addr]; //@line 6070 "xmlparse.c"
        var $5=_poolAppend($1, $2, $3, $4); //@line 6070 "xmlparse.c"
        var $6=($5)==0; //@line 6070 "xmlparse.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 6070 "xmlparse.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 6071 "xmlparse.c"
        __label__ = 6; break; //@line 6071 "xmlparse.c"
      case 2: // $bb1
        var $7=HEAP[$pool_addr]; //@line 6072 "xmlparse.c"
        var $8=(($7+12)&4294967295); //@line 6072 "xmlparse.c"
        var $9=HEAP[$8]; //@line 6072 "xmlparse.c"
        var $10=HEAP[$pool_addr]; //@line 6072 "xmlparse.c"
        var $11=(($10+8)&4294967295); //@line 6072 "xmlparse.c"
        var $12=HEAP[$11]; //@line 6072 "xmlparse.c"
        var $13=($9)==($12); //@line 6072 "xmlparse.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 6072 "xmlparse.c"
      case 3: // $bb2
        var $14=HEAP[$pool_addr]; //@line 6072 "xmlparse.c"
        var $15=_poolGrow($14); //@line 6072 "xmlparse.c"
        var $16=reSign(($15), 8, 0)==0; //@line 6072 "xmlparse.c"
        if ($16) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 6072 "xmlparse.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 6073 "xmlparse.c"
        __label__ = 6; break; //@line 6073 "xmlparse.c"
      case 5: // $bb4
        var $17=HEAP[$pool_addr]; //@line 6074 "xmlparse.c"
        var $18=(($17+12)&4294967295); //@line 6074 "xmlparse.c"
        var $19=HEAP[$18]; //@line 6074 "xmlparse.c"
        HEAP[$19]=0; //@line 6074 "xmlparse.c"
        var $20=(($19+1)&4294967295); //@line 6074 "xmlparse.c"
        var $21=HEAP[$pool_addr]; //@line 6074 "xmlparse.c"
        var $22=(($21+12)&4294967295); //@line 6074 "xmlparse.c"
        HEAP[$22]=$20; //@line 6074 "xmlparse.c"
        var $23=HEAP[$pool_addr]; //@line 6075 "xmlparse.c"
        var $24=(($23+16)&4294967295); //@line 6075 "xmlparse.c"
        var $25=HEAP[$24]; //@line 6075 "xmlparse.c"
        HEAP[$0]=$25; //@line 6075 "xmlparse.c"
        __label__ = 6; break; //@line 6075 "xmlparse.c"
      case 6: // $bb5
        var $26=HEAP[$0]; //@line 6071 "xmlparse.c"
        HEAP[$retval]=$26; //@line 6071 "xmlparse.c"
        __label__ = 7; break; //@line 6071 "xmlparse.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 6071 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 6071 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _poolGrow($pool) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $pool_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $tem=__stackBase__+12;
        var $blockSize=__stackBase__+16;
        var $tem10=__stackBase__+20;
        var $blockSize11=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$pool_addr]=$pool;
        var $1=HEAP[$pool_addr]; //@line 6081 "xmlparse.c"
        var $2=(($1+4)&4294967295); //@line 6081 "xmlparse.c"
        var $3=HEAP[$2]; //@line 6081 "xmlparse.c"
        var $4=($3)!=0; //@line 6081 "xmlparse.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 6081 "xmlparse.c"
      case 1: // $bb
        var $5=HEAP[$pool_addr]; //@line 6082 "xmlparse.c"
        var $6=(($5+16)&4294967295); //@line 6082 "xmlparse.c"
        var $7=HEAP[$6]; //@line 6082 "xmlparse.c"
        var $8=($7)==0; //@line 6082 "xmlparse.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 6082 "xmlparse.c"
      case 2: // $bb1
        var $9=HEAP[$pool_addr]; //@line 6083 "xmlparse.c"
        var $10=(($9+4)&4294967295); //@line 6083 "xmlparse.c"
        var $11=HEAP[$10]; //@line 6083 "xmlparse.c"
        var $12=HEAP[$pool_addr]; //@line 6083 "xmlparse.c"
        var $13=(($12)&4294967295); //@line 6083 "xmlparse.c"
        HEAP[$13]=$11; //@line 6083 "xmlparse.c"
        var $14=HEAP[$pool_addr]; //@line 6084 "xmlparse.c"
        var $15=(($14+4)&4294967295); //@line 6084 "xmlparse.c"
        var $16=HEAP[$15]; //@line 6084 "xmlparse.c"
        var $17=(($16)&4294967295); //@line 6084 "xmlparse.c"
        var $18=HEAP[$17]; //@line 6084 "xmlparse.c"
        var $19=HEAP[$pool_addr]; //@line 6084 "xmlparse.c"
        var $20=(($19+4)&4294967295); //@line 6084 "xmlparse.c"
        HEAP[$20]=$18; //@line 6084 "xmlparse.c"
        var $21=HEAP[$pool_addr]; //@line 6085 "xmlparse.c"
        var $22=(($21)&4294967295); //@line 6085 "xmlparse.c"
        var $23=HEAP[$22]; //@line 6085 "xmlparse.c"
        var $24=(($23)&4294967295); //@line 6085 "xmlparse.c"
        HEAP[$24]=0; //@line 6085 "xmlparse.c"
        var $25=HEAP[$pool_addr]; //@line 6086 "xmlparse.c"
        var $26=(($25)&4294967295); //@line 6086 "xmlparse.c"
        var $27=HEAP[$26]; //@line 6086 "xmlparse.c"
        var $28=(($27+8)&4294967295); //@line 6086 "xmlparse.c"
        var $29=(($28)&4294967295); //@line 6086 "xmlparse.c"
        var $30=HEAP[$pool_addr]; //@line 6086 "xmlparse.c"
        var $31=(($30+16)&4294967295); //@line 6086 "xmlparse.c"
        HEAP[$31]=$29; //@line 6086 "xmlparse.c"
        var $32=HEAP[$pool_addr]; //@line 6087 "xmlparse.c"
        var $33=(($32+16)&4294967295); //@line 6087 "xmlparse.c"
        var $34=HEAP[$33]; //@line 6087 "xmlparse.c"
        var $35=HEAP[$pool_addr]; //@line 6087 "xmlparse.c"
        var $36=(($35)&4294967295); //@line 6087 "xmlparse.c"
        var $37=HEAP[$36]; //@line 6087 "xmlparse.c"
        var $38=(($37+4)&4294967295); //@line 6087 "xmlparse.c"
        var $39=HEAP[$38]; //@line 6087 "xmlparse.c"
        var $40=(($34+$39)&4294967295); //@line 6087 "xmlparse.c"
        var $41=HEAP[$pool_addr]; //@line 6087 "xmlparse.c"
        var $42=(($41+8)&4294967295); //@line 6087 "xmlparse.c"
        HEAP[$42]=$40; //@line 6087 "xmlparse.c"
        var $43=HEAP[$pool_addr]; //@line 6088 "xmlparse.c"
        var $44=(($43+16)&4294967295); //@line 6088 "xmlparse.c"
        var $45=HEAP[$44]; //@line 6088 "xmlparse.c"
        var $46=HEAP[$pool_addr]; //@line 6088 "xmlparse.c"
        var $47=(($46+12)&4294967295); //@line 6088 "xmlparse.c"
        HEAP[$47]=$45; //@line 6088 "xmlparse.c"
        HEAP[$0]=1; //@line 6089 "xmlparse.c"
        __label__ = 19; break; //@line 6089 "xmlparse.c"
      case 3: // $bb2
        var $48=HEAP[$pool_addr]; //@line 6091 "xmlparse.c"
        var $49=(($48+8)&4294967295); //@line 6091 "xmlparse.c"
        var $50=HEAP[$49]; //@line 6091 "xmlparse.c"
        var $51=($50); //@line 6091 "xmlparse.c"
        var $52=HEAP[$pool_addr]; //@line 6091 "xmlparse.c"
        var $53=(($52+16)&4294967295); //@line 6091 "xmlparse.c"
        var $54=HEAP[$53]; //@line 6091 "xmlparse.c"
        var $55=($54); //@line 6091 "xmlparse.c"
        var $56=((($51) - ($55))&4294967295); //@line 6091 "xmlparse.c"
        var $57=HEAP[$pool_addr]; //@line 6091 "xmlparse.c"
        var $58=(($57+4)&4294967295); //@line 6091 "xmlparse.c"
        var $59=HEAP[$58]; //@line 6091 "xmlparse.c"
        var $60=(($59+4)&4294967295); //@line 6091 "xmlparse.c"
        var $61=HEAP[$60]; //@line 6091 "xmlparse.c"
        var $62=((($56))|0) < ((($61))|0); //@line 6091 "xmlparse.c"
        if ($62) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 6091 "xmlparse.c"
      case 4: // $bb3
        var $63=HEAP[$pool_addr]; //@line 6092 "xmlparse.c"
        var $64=(($63+4)&4294967295); //@line 6092 "xmlparse.c"
        var $65=HEAP[$64]; //@line 6092 "xmlparse.c"
        var $66=(($65)&4294967295); //@line 6092 "xmlparse.c"
        var $67=HEAP[$66]; //@line 6092 "xmlparse.c"
        HEAP[$tem]=$67; //@line 6092 "xmlparse.c"
        var $68=HEAP[$pool_addr]; //@line 6093 "xmlparse.c"
        var $69=(($68+4)&4294967295); //@line 6093 "xmlparse.c"
        var $70=HEAP[$69]; //@line 6093 "xmlparse.c"
        var $71=HEAP[$pool_addr]; //@line 6093 "xmlparse.c"
        var $72=(($71)&4294967295); //@line 6093 "xmlparse.c"
        var $73=HEAP[$72]; //@line 6093 "xmlparse.c"
        var $74=(($70)&4294967295); //@line 6093 "xmlparse.c"
        HEAP[$74]=$73; //@line 6093 "xmlparse.c"
        var $75=HEAP[$pool_addr]; //@line 6094 "xmlparse.c"
        var $76=(($75+4)&4294967295); //@line 6094 "xmlparse.c"
        var $77=HEAP[$76]; //@line 6094 "xmlparse.c"
        var $78=HEAP[$pool_addr]; //@line 6094 "xmlparse.c"
        var $79=(($78)&4294967295); //@line 6094 "xmlparse.c"
        HEAP[$79]=$77; //@line 6094 "xmlparse.c"
        var $80=HEAP[$pool_addr]; //@line 6095 "xmlparse.c"
        var $81=(($80+4)&4294967295); //@line 6095 "xmlparse.c"
        var $82=HEAP[$tem]; //@line 6095 "xmlparse.c"
        HEAP[$81]=$82; //@line 6095 "xmlparse.c"
        var $83=HEAP[$pool_addr]; //@line 6096 "xmlparse.c"
        var $84=(($83+8)&4294967295); //@line 6096 "xmlparse.c"
        var $85=HEAP[$84]; //@line 6096 "xmlparse.c"
        var $86=($85); //@line 6096 "xmlparse.c"
        var $87=HEAP[$pool_addr]; //@line 6096 "xmlparse.c"
        var $88=(($87+16)&4294967295); //@line 6096 "xmlparse.c"
        var $89=HEAP[$88]; //@line 6096 "xmlparse.c"
        var $90=($89); //@line 6096 "xmlparse.c"
        var $91=((($86) - ($90))&4294967295); //@line 6096 "xmlparse.c"
        var $92=HEAP[$pool_addr]; //@line 6096 "xmlparse.c"
        var $93=(($92+16)&4294967295); //@line 6096 "xmlparse.c"
        var $94=HEAP[$93]; //@line 6096 "xmlparse.c"
        var $95=HEAP[$pool_addr]; //@line 6096 "xmlparse.c"
        var $96=(($95)&4294967295); //@line 6096 "xmlparse.c"
        var $97=HEAP[$96]; //@line 6096 "xmlparse.c"
        var $98=(($97+8)&4294967295); //@line 6096 "xmlparse.c"
        var $99=(($98)&4294967295); //@line 6096 "xmlparse.c"
        _llvm_memcpy_p0i8_p0i8_i32($99, $94, $91, 1, 0); //@line 6096 "xmlparse.c"
        var $100=HEAP[$pool_addr]; //@line 6098 "xmlparse.c"
        var $101=(($100)&4294967295); //@line 6098 "xmlparse.c"
        var $102=HEAP[$101]; //@line 6098 "xmlparse.c"
        var $103=(($102+8)&4294967295); //@line 6098 "xmlparse.c"
        var $104=(($103)&4294967295); //@line 6098 "xmlparse.c"
        var $105=HEAP[$pool_addr]; //@line 6098 "xmlparse.c"
        var $106=(($105+12)&4294967295); //@line 6098 "xmlparse.c"
        var $107=HEAP[$106]; //@line 6098 "xmlparse.c"
        var $108=($107); //@line 6098 "xmlparse.c"
        var $109=HEAP[$pool_addr]; //@line 6098 "xmlparse.c"
        var $110=(($109+16)&4294967295); //@line 6098 "xmlparse.c"
        var $111=HEAP[$110]; //@line 6098 "xmlparse.c"
        var $112=($111); //@line 6098 "xmlparse.c"
        var $113=((($108) - ($112))&4294967295); //@line 6098 "xmlparse.c"
        var $114=(($104+$113)&4294967295); //@line 6098 "xmlparse.c"
        var $115=HEAP[$pool_addr]; //@line 6098 "xmlparse.c"
        var $116=(($115+12)&4294967295); //@line 6098 "xmlparse.c"
        HEAP[$116]=$114; //@line 6098 "xmlparse.c"
        var $117=HEAP[$pool_addr]; //@line 6099 "xmlparse.c"
        var $118=(($117)&4294967295); //@line 6099 "xmlparse.c"
        var $119=HEAP[$118]; //@line 6099 "xmlparse.c"
        var $120=(($119+8)&4294967295); //@line 6099 "xmlparse.c"
        var $121=(($120)&4294967295); //@line 6099 "xmlparse.c"
        var $122=HEAP[$pool_addr]; //@line 6099 "xmlparse.c"
        var $123=(($122+16)&4294967295); //@line 6099 "xmlparse.c"
        HEAP[$123]=$121; //@line 6099 "xmlparse.c"
        var $124=HEAP[$pool_addr]; //@line 6100 "xmlparse.c"
        var $125=(($124+16)&4294967295); //@line 6100 "xmlparse.c"
        var $126=HEAP[$125]; //@line 6100 "xmlparse.c"
        var $127=HEAP[$pool_addr]; //@line 6100 "xmlparse.c"
        var $128=(($127)&4294967295); //@line 6100 "xmlparse.c"
        var $129=HEAP[$128]; //@line 6100 "xmlparse.c"
        var $130=(($129+4)&4294967295); //@line 6100 "xmlparse.c"
        var $131=HEAP[$130]; //@line 6100 "xmlparse.c"
        var $132=(($126+$131)&4294967295); //@line 6100 "xmlparse.c"
        var $133=HEAP[$pool_addr]; //@line 6100 "xmlparse.c"
        var $134=(($133+8)&4294967295); //@line 6100 "xmlparse.c"
        HEAP[$134]=$132; //@line 6100 "xmlparse.c"
        HEAP[$0]=1; //@line 6101 "xmlparse.c"
        __label__ = 19; break; //@line 6101 "xmlparse.c"
      case 5: // $bb4
        var $135=HEAP[$pool_addr]; //@line 6104 "xmlparse.c"
        var $136=(($135)&4294967295); //@line 6104 "xmlparse.c"
        var $137=HEAP[$136]; //@line 6104 "xmlparse.c"
        var $138=($137)==0; //@line 6104 "xmlparse.c"
        if ($138) { __label__ = 10; break; } else { __label__ = 6; break; } //@line 6104 "xmlparse.c"
      case 6: // $bb5
        var $139=HEAP[$pool_addr]; //@line 6104 "xmlparse.c"
        var $140=(($139+16)&4294967295); //@line 6104 "xmlparse.c"
        var $141=HEAP[$140]; //@line 6104 "xmlparse.c"
        var $142=HEAP[$pool_addr]; //@line 6104 "xmlparse.c"
        var $143=(($142)&4294967295); //@line 6104 "xmlparse.c"
        var $144=HEAP[$143]; //@line 6104 "xmlparse.c"
        var $145=(($144+8)&4294967295); //@line 6104 "xmlparse.c"
        var $146=(($145)&4294967295); //@line 6104 "xmlparse.c"
        var $147=($141)!=($146); //@line 6104 "xmlparse.c"
        if ($147) { __label__ = 10; break; } else { __label__ = 7; break; } //@line 6104 "xmlparse.c"
      case 7: // $bb6
        var $148=HEAP[$pool_addr]; //@line 6105 "xmlparse.c"
        var $149=(($148+8)&4294967295); //@line 6105 "xmlparse.c"
        var $150=HEAP[$149]; //@line 6105 "xmlparse.c"
        var $151=($150); //@line 6105 "xmlparse.c"
        var $152=HEAP[$pool_addr]; //@line 6105 "xmlparse.c"
        var $153=(($152+16)&4294967295); //@line 6105 "xmlparse.c"
        var $154=HEAP[$153]; //@line 6105 "xmlparse.c"
        var $155=($154); //@line 6105 "xmlparse.c"
        var $156=((($151) - ($155))&4294967295); //@line 6105 "xmlparse.c"
        var $157=((($156) * 2)&4294967295); //@line 6105 "xmlparse.c"
        HEAP[$blockSize]=$157; //@line 6105 "xmlparse.c"
        var $158=HEAP[$pool_addr]; //@line 6106 "xmlparse.c"
        var $159=(($158+20)&4294967295); //@line 6106 "xmlparse.c"
        var $160=HEAP[$159]; //@line 6106 "xmlparse.c"
        var $161=(($160+4)&4294967295); //@line 6106 "xmlparse.c"
        var $162=HEAP[$161]; //@line 6106 "xmlparse.c"
        var $163=HEAP[$blockSize]; //@line 6106 "xmlparse.c"
        var $164=((($163) + 8)&4294967295); //@line 6106 "xmlparse.c"
        var $165=HEAP[$pool_addr]; //@line 6106 "xmlparse.c"
        var $166=(($165)&4294967295); //@line 6106 "xmlparse.c"
        var $167=HEAP[$166]; //@line 6106 "xmlparse.c"
        var $168=$167; //@line 6106 "xmlparse.c"
        var $169=FUNCTION_TABLE[$162]($168, $164); //@line 6106 "xmlparse.c"
        var $170=$169; //@line 6106 "xmlparse.c"
        var $171=HEAP[$pool_addr]; //@line 6106 "xmlparse.c"
        var $172=(($171)&4294967295); //@line 6106 "xmlparse.c"
        HEAP[$172]=$170; //@line 6106 "xmlparse.c"
        var $173=HEAP[$pool_addr]; //@line 6110 "xmlparse.c"
        var $174=(($173)&4294967295); //@line 6110 "xmlparse.c"
        var $175=HEAP[$174]; //@line 6110 "xmlparse.c"
        var $176=($175)==0; //@line 6110 "xmlparse.c"
        if ($176) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 6110 "xmlparse.c"
      case 8: // $bb7
        HEAP[$0]=0; //@line 6111 "xmlparse.c"
        __label__ = 19; break; //@line 6111 "xmlparse.c"
      case 9: // $bb8
        var $177=HEAP[$pool_addr]; //@line 6112 "xmlparse.c"
        var $178=(($177)&4294967295); //@line 6112 "xmlparse.c"
        var $179=HEAP[$178]; //@line 6112 "xmlparse.c"
        var $180=(($179+4)&4294967295); //@line 6112 "xmlparse.c"
        var $181=HEAP[$blockSize]; //@line 6112 "xmlparse.c"
        HEAP[$180]=$181; //@line 6112 "xmlparse.c"
        var $182=HEAP[$pool_addr]; //@line 6113 "xmlparse.c"
        var $183=(($182)&4294967295); //@line 6113 "xmlparse.c"
        var $184=HEAP[$183]; //@line 6113 "xmlparse.c"
        var $185=(($184+8)&4294967295); //@line 6113 "xmlparse.c"
        var $186=(($185)&4294967295); //@line 6113 "xmlparse.c"
        var $187=HEAP[$pool_addr]; //@line 6113 "xmlparse.c"
        var $188=(($187+12)&4294967295); //@line 6113 "xmlparse.c"
        var $189=HEAP[$188]; //@line 6113 "xmlparse.c"
        var $190=($189); //@line 6113 "xmlparse.c"
        var $191=HEAP[$pool_addr]; //@line 6113 "xmlparse.c"
        var $192=(($191+16)&4294967295); //@line 6113 "xmlparse.c"
        var $193=HEAP[$192]; //@line 6113 "xmlparse.c"
        var $194=($193); //@line 6113 "xmlparse.c"
        var $195=((($190) - ($194))&4294967295); //@line 6113 "xmlparse.c"
        var $196=(($186+$195)&4294967295); //@line 6113 "xmlparse.c"
        var $197=HEAP[$pool_addr]; //@line 6113 "xmlparse.c"
        var $198=(($197+12)&4294967295); //@line 6113 "xmlparse.c"
        HEAP[$198]=$196; //@line 6113 "xmlparse.c"
        var $199=HEAP[$pool_addr]; //@line 6114 "xmlparse.c"
        var $200=(($199)&4294967295); //@line 6114 "xmlparse.c"
        var $201=HEAP[$200]; //@line 6114 "xmlparse.c"
        var $202=(($201+8)&4294967295); //@line 6114 "xmlparse.c"
        var $203=(($202)&4294967295); //@line 6114 "xmlparse.c"
        var $204=HEAP[$pool_addr]; //@line 6114 "xmlparse.c"
        var $205=(($204+16)&4294967295); //@line 6114 "xmlparse.c"
        HEAP[$205]=$203; //@line 6114 "xmlparse.c"
        var $206=HEAP[$pool_addr]; //@line 6115 "xmlparse.c"
        var $207=(($206+16)&4294967295); //@line 6115 "xmlparse.c"
        var $208=HEAP[$207]; //@line 6115 "xmlparse.c"
        var $209=HEAP[$blockSize]; //@line 6115 "xmlparse.c"
        var $210=(($208+$209)&4294967295); //@line 6115 "xmlparse.c"
        var $211=HEAP[$pool_addr]; //@line 6115 "xmlparse.c"
        var $212=(($211+8)&4294967295); //@line 6115 "xmlparse.c"
        HEAP[$212]=$210; //@line 6115 "xmlparse.c"
        __label__ = 18; break; //@line 6115 "xmlparse.c"
      case 10: // $bb9
        var $213=HEAP[$pool_addr]; //@line 6119 "xmlparse.c"
        var $214=(($213+8)&4294967295); //@line 6119 "xmlparse.c"
        var $215=HEAP[$214]; //@line 6119 "xmlparse.c"
        var $216=($215); //@line 6119 "xmlparse.c"
        var $217=HEAP[$pool_addr]; //@line 6119 "xmlparse.c"
        var $218=(($217+16)&4294967295); //@line 6119 "xmlparse.c"
        var $219=HEAP[$218]; //@line 6119 "xmlparse.c"
        var $220=($219); //@line 6119 "xmlparse.c"
        var $221=((($216) - ($220))&4294967295); //@line 6119 "xmlparse.c"
        HEAP[$blockSize11]=$221; //@line 6119 "xmlparse.c"
        var $222=HEAP[$blockSize11]; //@line 6120 "xmlparse.c"
        var $223=((($222))|0) <= 1023; //@line 6120 "xmlparse.c"
        if ($223) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 6120 "xmlparse.c"
      case 11: // $bb12
        HEAP[$blockSize11]=1024; //@line 6121 "xmlparse.c"
        __label__ = 13; break; //@line 6121 "xmlparse.c"
      case 12: // $bb13
        var $224=HEAP[$blockSize11]; //@line 6123 "xmlparse.c"
        var $225=((($224) * 2)&4294967295); //@line 6123 "xmlparse.c"
        HEAP[$blockSize11]=$225; //@line 6123 "xmlparse.c"
        __label__ = 13; break; //@line 6123 "xmlparse.c"
      case 13: // $bb14
        var $226=HEAP[$pool_addr]; //@line 6124 "xmlparse.c"
        var $227=(($226+20)&4294967295); //@line 6124 "xmlparse.c"
        var $228=HEAP[$227]; //@line 6124 "xmlparse.c"
        var $229=(($228)&4294967295); //@line 6124 "xmlparse.c"
        var $230=HEAP[$229]; //@line 6124 "xmlparse.c"
        var $231=HEAP[$blockSize11]; //@line 6124 "xmlparse.c"
        var $232=((($231) + 8)&4294967295); //@line 6124 "xmlparse.c"
        var $233=FUNCTION_TABLE[$230]($232); //@line 6124 "xmlparse.c"
        var $234=$233; //@line 6124 "xmlparse.c"
        HEAP[$tem10]=$234; //@line 6124 "xmlparse.c"
        var $235=HEAP[$tem10]; //@line 6126 "xmlparse.c"
        var $236=($235)==0; //@line 6126 "xmlparse.c"
        if ($236) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 6126 "xmlparse.c"
      case 14: // $bb15
        HEAP[$0]=0; //@line 6127 "xmlparse.c"
        __label__ = 19; break; //@line 6127 "xmlparse.c"
      case 15: // $bb16
        var $237=HEAP[$tem10]; //@line 6128 "xmlparse.c"
        var $238=(($237+4)&4294967295); //@line 6128 "xmlparse.c"
        var $239=HEAP[$blockSize11]; //@line 6128 "xmlparse.c"
        HEAP[$238]=$239; //@line 6128 "xmlparse.c"
        var $240=HEAP[$pool_addr]; //@line 6129 "xmlparse.c"
        var $241=(($240)&4294967295); //@line 6129 "xmlparse.c"
        var $242=HEAP[$241]; //@line 6129 "xmlparse.c"
        var $243=HEAP[$tem10]; //@line 6129 "xmlparse.c"
        var $244=(($243)&4294967295); //@line 6129 "xmlparse.c"
        HEAP[$244]=$242; //@line 6129 "xmlparse.c"
        var $245=HEAP[$pool_addr]; //@line 6130 "xmlparse.c"
        var $246=(($245)&4294967295); //@line 6130 "xmlparse.c"
        var $247=HEAP[$tem10]; //@line 6130 "xmlparse.c"
        HEAP[$246]=$247; //@line 6130 "xmlparse.c"
        var $248=HEAP[$pool_addr]; //@line 6131 "xmlparse.c"
        var $249=(($248+12)&4294967295); //@line 6131 "xmlparse.c"
        var $250=HEAP[$249]; //@line 6131 "xmlparse.c"
        var $251=HEAP[$pool_addr]; //@line 6131 "xmlparse.c"
        var $252=(($251+16)&4294967295); //@line 6131 "xmlparse.c"
        var $253=HEAP[$252]; //@line 6131 "xmlparse.c"
        var $254=($250)!=($253); //@line 6131 "xmlparse.c"
        if ($254) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 6131 "xmlparse.c"
      case 16: // $bb17
        var $255=HEAP[$pool_addr]; //@line 6132 "xmlparse.c"
        var $256=(($255+12)&4294967295); //@line 6132 "xmlparse.c"
        var $257=HEAP[$256]; //@line 6132 "xmlparse.c"
        var $258=($257); //@line 6132 "xmlparse.c"
        var $259=HEAP[$pool_addr]; //@line 6132 "xmlparse.c"
        var $260=(($259+16)&4294967295); //@line 6132 "xmlparse.c"
        var $261=HEAP[$260]; //@line 6132 "xmlparse.c"
        var $262=($261); //@line 6132 "xmlparse.c"
        var $263=((($258) - ($262))&4294967295); //@line 6132 "xmlparse.c"
        var $264=HEAP[$pool_addr]; //@line 6132 "xmlparse.c"
        var $265=(($264+16)&4294967295); //@line 6132 "xmlparse.c"
        var $266=HEAP[$265]; //@line 6132 "xmlparse.c"
        var $267=HEAP[$tem10]; //@line 6132 "xmlparse.c"
        var $268=(($267+8)&4294967295); //@line 6132 "xmlparse.c"
        var $269=(($268)&4294967295); //@line 6132 "xmlparse.c"
        _llvm_memcpy_p0i8_p0i8_i32($269, $266, $263, 1, 0); //@line 6132 "xmlparse.c"
        __label__ = 17; break; //@line 6132 "xmlparse.c"
      case 17: // $bb18
        var $270=HEAP[$tem10]; //@line 6134 "xmlparse.c"
        var $271=(($270+8)&4294967295); //@line 6134 "xmlparse.c"
        var $272=(($271)&4294967295); //@line 6134 "xmlparse.c"
        var $273=HEAP[$pool_addr]; //@line 6134 "xmlparse.c"
        var $274=(($273+12)&4294967295); //@line 6134 "xmlparse.c"
        var $275=HEAP[$274]; //@line 6134 "xmlparse.c"
        var $276=($275); //@line 6134 "xmlparse.c"
        var $277=HEAP[$pool_addr]; //@line 6134 "xmlparse.c"
        var $278=(($277+16)&4294967295); //@line 6134 "xmlparse.c"
        var $279=HEAP[$278]; //@line 6134 "xmlparse.c"
        var $280=($279); //@line 6134 "xmlparse.c"
        var $281=((($276) - ($280))&4294967295); //@line 6134 "xmlparse.c"
        var $282=(($272+$281)&4294967295); //@line 6134 "xmlparse.c"
        var $283=HEAP[$pool_addr]; //@line 6134 "xmlparse.c"
        var $284=(($283+12)&4294967295); //@line 6134 "xmlparse.c"
        HEAP[$284]=$282; //@line 6134 "xmlparse.c"
        var $285=HEAP[$tem10]; //@line 6135 "xmlparse.c"
        var $286=(($285+8)&4294967295); //@line 6135 "xmlparse.c"
        var $287=(($286)&4294967295); //@line 6135 "xmlparse.c"
        var $288=HEAP[$pool_addr]; //@line 6135 "xmlparse.c"
        var $289=(($288+16)&4294967295); //@line 6135 "xmlparse.c"
        HEAP[$289]=$287; //@line 6135 "xmlparse.c"
        var $290=HEAP[$tem10]; //@line 6136 "xmlparse.c"
        var $291=(($290+8)&4294967295); //@line 6136 "xmlparse.c"
        var $292=(($291)&4294967295); //@line 6136 "xmlparse.c"
        var $293=HEAP[$blockSize11]; //@line 6136 "xmlparse.c"
        var $294=(($292+$293)&4294967295); //@line 6136 "xmlparse.c"
        var $295=HEAP[$pool_addr]; //@line 6136 "xmlparse.c"
        var $296=(($295+8)&4294967295); //@line 6136 "xmlparse.c"
        HEAP[$296]=$294; //@line 6136 "xmlparse.c"
        __label__ = 18; break; //@line 6136 "xmlparse.c"
      case 18: // $bb19
        HEAP[$0]=1; //@line 6138 "xmlparse.c"
        __label__ = 19; break; //@line 6138 "xmlparse.c"
      case 19: // $bb20
        var $297=HEAP[$0]; //@line 6089 "xmlparse.c"
        HEAP[$retval]=$297; //@line 6089 "xmlparse.c"
        __label__ = 20; break; //@line 6089 "xmlparse.c"
      case 20: // $return
        var $retval21=HEAP[$retval]; //@line 6089 "xmlparse.c"
        var $retval2122=((($retval21)) & 255); //@line 6089 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval2122; //@line 6089 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _nextScaffoldPart($parser) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $dtd=__stackBase__+12;
        var $me=__stackBase__+16;
        var $next=__stackBase__+20;
        var $temp=__stackBase__+24;
        var $parent=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        var $1=HEAP[$parser_addr]; //@line 6144 "xmlparse.c"
        var $2=(($1+340)&4294967295); //@line 6144 "xmlparse.c"
        var $3=HEAP[$2]; //@line 6144 "xmlparse.c"
        HEAP[$dtd]=$3; //@line 6144 "xmlparse.c"
        var $4=HEAP[$dtd]; //@line 6148 "xmlparse.c"
        var $5=(($4+164)&4294967295); //@line 6148 "xmlparse.c"
        var $6=HEAP[$5]; //@line 6148 "xmlparse.c"
        var $7=($6)==0; //@line 6148 "xmlparse.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 6148 "xmlparse.c"
      case 1: // $bb
        var $8=HEAP[$parser_addr]; //@line 6149 "xmlparse.c"
        var $9=(($8+12)&4294967295); //@line 6149 "xmlparse.c"
        var $10=(($9)&4294967295); //@line 6149 "xmlparse.c"
        var $11=HEAP[$10]; //@line 6149 "xmlparse.c"
        var $12=HEAP[$parser_addr]; //@line 6149 "xmlparse.c"
        var $13=(($12+452)&4294967295); //@line 6149 "xmlparse.c"
        var $14=HEAP[$13]; //@line 6149 "xmlparse.c"
        var $15=((($14) * 4)&4294967295); //@line 6149 "xmlparse.c"
        var $16=FUNCTION_TABLE[$11]($15); //@line 6149 "xmlparse.c"
        var $17=$16; //@line 6149 "xmlparse.c"
        var $18=HEAP[$dtd]; //@line 6149 "xmlparse.c"
        var $19=(($18+164)&4294967295); //@line 6149 "xmlparse.c"
        HEAP[$19]=$17; //@line 6149 "xmlparse.c"
        var $20=HEAP[$dtd]; //@line 6150 "xmlparse.c"
        var $21=(($20+164)&4294967295); //@line 6150 "xmlparse.c"
        var $22=HEAP[$21]; //@line 6150 "xmlparse.c"
        var $23=($22)==0; //@line 6150 "xmlparse.c"
        if ($23) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 6150 "xmlparse.c"
      case 2: // $bb1
        HEAP[$0]=-1; //@line 6151 "xmlparse.c"
        __label__ = 20; break; //@line 6151 "xmlparse.c"
      case 3: // $bb2
        var $24=HEAP[$dtd]; //@line 6152 "xmlparse.c"
        var $25=(($24+164)&4294967295); //@line 6152 "xmlparse.c"
        var $26=HEAP[$25]; //@line 6152 "xmlparse.c"
        var $27=(($26)&4294967295); //@line 6152 "xmlparse.c"
        HEAP[$27]=0; //@line 6152 "xmlparse.c"
        __label__ = 4; break; //@line 6152 "xmlparse.c"
      case 4: // $bb3
        var $28=HEAP[$dtd]; //@line 6155 "xmlparse.c"
        var $29=(($28+156)&4294967295); //@line 6155 "xmlparse.c"
        var $30=HEAP[$29]; //@line 6155 "xmlparse.c"
        var $31=HEAP[$dtd]; //@line 6155 "xmlparse.c"
        var $32=(($31+152)&4294967295); //@line 6155 "xmlparse.c"
        var $33=HEAP[$32]; //@line 6155 "xmlparse.c"
        var $34=((($30))>>>0) >= ((($33))>>>0); //@line 6155 "xmlparse.c"
        if ($34) { __label__ = 5; break; } else { __label__ = 13; break; } //@line 6155 "xmlparse.c"
      case 5: // $bb4
        var $35=HEAP[$dtd]; //@line 6157 "xmlparse.c"
        var $36=(($35+144)&4294967295); //@line 6157 "xmlparse.c"
        var $37=HEAP[$36]; //@line 6157 "xmlparse.c"
        var $38=($37)!=0; //@line 6157 "xmlparse.c"
        if ($38) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 6157 "xmlparse.c"
      case 6: // $bb5
        var $39=HEAP[$parser_addr]; //@line 6158 "xmlparse.c"
        var $40=(($39+12)&4294967295); //@line 6158 "xmlparse.c"
        var $41=(($40+4)&4294967295); //@line 6158 "xmlparse.c"
        var $42=HEAP[$41]; //@line 6158 "xmlparse.c"
        var $43=HEAP[$dtd]; //@line 6158 "xmlparse.c"
        var $44=(($43+152)&4294967295); //@line 6158 "xmlparse.c"
        var $45=HEAP[$44]; //@line 6158 "xmlparse.c"
        var $46=((($45) * 56)&4294967295); //@line 6158 "xmlparse.c"
        var $47=HEAP[$dtd]; //@line 6158 "xmlparse.c"
        var $48=(($47+144)&4294967295); //@line 6158 "xmlparse.c"
        var $49=HEAP[$48]; //@line 6158 "xmlparse.c"
        var $50=$49; //@line 6158 "xmlparse.c"
        var $51=FUNCTION_TABLE[$42]($50, $46); //@line 6158 "xmlparse.c"
        var $52=$51; //@line 6158 "xmlparse.c"
        HEAP[$temp]=$52; //@line 6158 "xmlparse.c"
        var $53=HEAP[$temp]; //@line 6160 "xmlparse.c"
        var $54=($53)==0; //@line 6160 "xmlparse.c"
        if ($54) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 6160 "xmlparse.c"
      case 7: // $bb6
        HEAP[$0]=-1; //@line 6161 "xmlparse.c"
        __label__ = 20; break; //@line 6161 "xmlparse.c"
      case 8: // $bb7
        var $55=HEAP[$dtd]; //@line 6162 "xmlparse.c"
        var $56=(($55+152)&4294967295); //@line 6162 "xmlparse.c"
        var $57=HEAP[$56]; //@line 6162 "xmlparse.c"
        var $58=((($57) * 2)&4294967295); //@line 6162 "xmlparse.c"
        var $59=HEAP[$dtd]; //@line 6162 "xmlparse.c"
        var $60=(($59+152)&4294967295); //@line 6162 "xmlparse.c"
        HEAP[$60]=$58; //@line 6162 "xmlparse.c"
        __label__ = 12; break; //@line 6162 "xmlparse.c"
      case 9: // $bb8
        var $61=HEAP[$parser_addr]; //@line 6165 "xmlparse.c"
        var $62=(($61+12)&4294967295); //@line 6165 "xmlparse.c"
        var $63=(($62)&4294967295); //@line 6165 "xmlparse.c"
        var $64=HEAP[$63]; //@line 6165 "xmlparse.c"
        var $65=FUNCTION_TABLE[$64](896); //@line 6165 "xmlparse.c"
        var $66=$65; //@line 6165 "xmlparse.c"
        HEAP[$temp]=$66; //@line 6165 "xmlparse.c"
        var $67=HEAP[$temp]; //@line 6167 "xmlparse.c"
        var $68=($67)==0; //@line 6167 "xmlparse.c"
        if ($68) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 6167 "xmlparse.c"
      case 10: // $bb9
        HEAP[$0]=-1; //@line 6168 "xmlparse.c"
        __label__ = 20; break; //@line 6168 "xmlparse.c"
      case 11: // $bb10
        var $69=HEAP[$dtd]; //@line 6169 "xmlparse.c"
        var $70=(($69+152)&4294967295); //@line 6169 "xmlparse.c"
        HEAP[$70]=32; //@line 6169 "xmlparse.c"
        __label__ = 12; break; //@line 6169 "xmlparse.c"
      case 12: // $bb11
        var $71=HEAP[$dtd]; //@line 6171 "xmlparse.c"
        var $72=(($71+144)&4294967295); //@line 6171 "xmlparse.c"
        var $73=HEAP[$temp]; //@line 6171 "xmlparse.c"
        HEAP[$72]=$73; //@line 6171 "xmlparse.c"
        __label__ = 13; break; //@line 6171 "xmlparse.c"
      case 13: // $bb12
        var $74=HEAP[$dtd]; //@line 6173 "xmlparse.c"
        var $75=(($74+156)&4294967295); //@line 6173 "xmlparse.c"
        var $76=HEAP[$75]; //@line 6173 "xmlparse.c"
        HEAP[$next]=$76; //@line 6173 "xmlparse.c"
        var $77=((($76) + 1)&4294967295); //@line 6173 "xmlparse.c"
        var $78=HEAP[$dtd]; //@line 6173 "xmlparse.c"
        var $79=(($78+156)&4294967295); //@line 6173 "xmlparse.c"
        HEAP[$79]=$77; //@line 6173 "xmlparse.c"
        var $80=HEAP[$dtd]; //@line 6174 "xmlparse.c"
        var $81=(($80+144)&4294967295); //@line 6174 "xmlparse.c"
        var $82=HEAP[$81]; //@line 6174 "xmlparse.c"
        var $83=HEAP[$next]; //@line 6174 "xmlparse.c"
        var $84=(($82+28*$83)&4294967295); //@line 6174 "xmlparse.c"
        HEAP[$me]=$84; //@line 6174 "xmlparse.c"
        var $85=HEAP[$dtd]; //@line 6175 "xmlparse.c"
        var $86=(($85+160)&4294967295); //@line 6175 "xmlparse.c"
        var $87=HEAP[$86]; //@line 6175 "xmlparse.c"
        var $88=((($87))|0)!=0; //@line 6175 "xmlparse.c"
        if ($88) { __label__ = 14; break; } else { __label__ = 19; break; } //@line 6175 "xmlparse.c"
      case 14: // $bb13
        var $89=HEAP[$dtd]; //@line 6176 "xmlparse.c"
        var $90=(($89+144)&4294967295); //@line 6176 "xmlparse.c"
        var $91=HEAP[$90]; //@line 6176 "xmlparse.c"
        var $92=HEAP[$dtd]; //@line 6176 "xmlparse.c"
        var $93=(($92+164)&4294967295); //@line 6176 "xmlparse.c"
        var $94=HEAP[$93]; //@line 6176 "xmlparse.c"
        var $95=HEAP[$dtd]; //@line 6176 "xmlparse.c"
        var $96=(($95+160)&4294967295); //@line 6176 "xmlparse.c"
        var $97=HEAP[$96]; //@line 6176 "xmlparse.c"
        var $98=((($97) - 1)&4294967295); //@line 6176 "xmlparse.c"
        var $99=(($94+4*$98)&4294967295); //@line 6176 "xmlparse.c"
        var $100=HEAP[$99]; //@line 6176 "xmlparse.c"
        var $101=(($91+28*$100)&4294967295); //@line 6176 "xmlparse.c"
        HEAP[$parent]=$101; //@line 6176 "xmlparse.c"
        var $102=HEAP[$parent]; //@line 6177 "xmlparse.c"
        var $103=(($102+16)&4294967295); //@line 6177 "xmlparse.c"
        var $104=HEAP[$103]; //@line 6177 "xmlparse.c"
        var $105=((($104))|0)!=0; //@line 6177 "xmlparse.c"
        if ($105) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 6177 "xmlparse.c"
      case 15: // $bb14
        var $106=HEAP[$dtd]; //@line 6178 "xmlparse.c"
        var $107=(($106+144)&4294967295); //@line 6178 "xmlparse.c"
        var $108=HEAP[$107]; //@line 6178 "xmlparse.c"
        var $109=HEAP[$parent]; //@line 6178 "xmlparse.c"
        var $110=(($109+16)&4294967295); //@line 6178 "xmlparse.c"
        var $111=HEAP[$110]; //@line 6178 "xmlparse.c"
        var $112=(($108+28*$111)&4294967295); //@line 6178 "xmlparse.c"
        var $113=(($112+24)&4294967295); //@line 6178 "xmlparse.c"
        var $114=HEAP[$next]; //@line 6178 "xmlparse.c"
        HEAP[$113]=$114; //@line 6178 "xmlparse.c"
        __label__ = 16; break; //@line 6178 "xmlparse.c"
      case 16: // $bb15
        var $115=HEAP[$parent]; //@line 6180 "xmlparse.c"
        var $116=(($115+20)&4294967295); //@line 6180 "xmlparse.c"
        var $117=HEAP[$116]; //@line 6180 "xmlparse.c"
        var $118=((($117))|0)==0; //@line 6180 "xmlparse.c"
        if ($118) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 6180 "xmlparse.c"
      case 17: // $bb16
        var $119=HEAP[$parent]; //@line 6181 "xmlparse.c"
        var $120=(($119+12)&4294967295); //@line 6181 "xmlparse.c"
        var $121=HEAP[$next]; //@line 6181 "xmlparse.c"
        HEAP[$120]=$121; //@line 6181 "xmlparse.c"
        __label__ = 18; break; //@line 6181 "xmlparse.c"
      case 18: // $bb17
        var $122=HEAP[$parent]; //@line 6182 "xmlparse.c"
        var $123=(($122+16)&4294967295); //@line 6182 "xmlparse.c"
        var $124=HEAP[$next]; //@line 6182 "xmlparse.c"
        HEAP[$123]=$124; //@line 6182 "xmlparse.c"
        var $125=HEAP[$parent]; //@line 6183 "xmlparse.c"
        var $126=(($125+20)&4294967295); //@line 6183 "xmlparse.c"
        var $127=HEAP[$126]; //@line 6183 "xmlparse.c"
        var $128=((($127) + 1)&4294967295); //@line 6183 "xmlparse.c"
        var $129=HEAP[$parent]; //@line 6183 "xmlparse.c"
        var $130=(($129+20)&4294967295); //@line 6183 "xmlparse.c"
        HEAP[$130]=$128; //@line 6183 "xmlparse.c"
        __label__ = 19; break; //@line 6183 "xmlparse.c"
      case 19: // $bb18
        var $131=HEAP[$me]; //@line 6185 "xmlparse.c"
        var $132=(($131+24)&4294967295); //@line 6185 "xmlparse.c"
        HEAP[$132]=0; //@line 6185 "xmlparse.c"
        var $133=HEAP[$me]; //@line 6185 "xmlparse.c"
        var $134=(($133+24)&4294967295); //@line 6185 "xmlparse.c"
        var $135=HEAP[$134]; //@line 6185 "xmlparse.c"
        var $136=HEAP[$me]; //@line 6185 "xmlparse.c"
        var $137=(($136+20)&4294967295); //@line 6185 "xmlparse.c"
        HEAP[$137]=$135; //@line 6185 "xmlparse.c"
        var $138=HEAP[$me]; //@line 6185 "xmlparse.c"
        var $139=(($138+20)&4294967295); //@line 6185 "xmlparse.c"
        var $140=HEAP[$139]; //@line 6185 "xmlparse.c"
        var $141=HEAP[$me]; //@line 6185 "xmlparse.c"
        var $142=(($141+16)&4294967295); //@line 6185 "xmlparse.c"
        HEAP[$142]=$140; //@line 6185 "xmlparse.c"
        var $143=HEAP[$me]; //@line 6185 "xmlparse.c"
        var $144=(($143+16)&4294967295); //@line 6185 "xmlparse.c"
        var $145=HEAP[$144]; //@line 6185 "xmlparse.c"
        var $146=HEAP[$me]; //@line 6185 "xmlparse.c"
        var $147=(($146+12)&4294967295); //@line 6185 "xmlparse.c"
        HEAP[$147]=$145; //@line 6185 "xmlparse.c"
        var $148=HEAP[$next]; //@line 6186 "xmlparse.c"
        HEAP[$0]=$148; //@line 6186 "xmlparse.c"
        __label__ = 20; break; //@line 6186 "xmlparse.c"
      case 20: // $bb19
        var $149=HEAP[$0]; //@line 6151 "xmlparse.c"
        HEAP[$retval]=$149; //@line 6151 "xmlparse.c"
        __label__ = 21; break; //@line 6151 "xmlparse.c"
      case 21: // $return
        var $retval20=HEAP[$retval]; //@line 6151 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval20; //@line 6151 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _build_node($parser, $src_node, $dest, $contpos, $strpos) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $src_node_addr=__stackBase__+4;
        var $dest_addr=__stackBase__+8;
        var $contpos_addr=__stackBase__+12;
        var $strpos_addr=__stackBase__+16;
        var $dtd=__stackBase__+20;
        var $src=__stackBase__+24;
        var $i=__stackBase__+28;
        var $cn=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$src_node_addr]=$src_node;
        HEAP[$dest_addr]=$dest;
        HEAP[$contpos_addr]=$contpos;
        HEAP[$strpos_addr]=$strpos;
        var $0=HEAP[$parser_addr]; //@line 6196 "xmlparse.c"
        var $1=(($0+340)&4294967295); //@line 6196 "xmlparse.c"
        var $2=HEAP[$1]; //@line 6196 "xmlparse.c"
        HEAP[$dtd]=$2; //@line 6196 "xmlparse.c"
        var $3=HEAP[$dtd]; //@line 6197 "xmlparse.c"
        var $4=(($3+144)&4294967295); //@line 6197 "xmlparse.c"
        var $5=HEAP[$4]; //@line 6197 "xmlparse.c"
        var $6=HEAP[$src_node_addr]; //@line 6197 "xmlparse.c"
        var $7=(($5+28*$6)&4294967295); //@line 6197 "xmlparse.c"
        var $8=(($7)&4294967295); //@line 6197 "xmlparse.c"
        var $9=HEAP[$8]; //@line 6197 "xmlparse.c"
        var $10=HEAP[$dest_addr]; //@line 6197 "xmlparse.c"
        var $11=(($10)&4294967295); //@line 6197 "xmlparse.c"
        HEAP[$11]=$9; //@line 6197 "xmlparse.c"
        var $12=HEAP[$dtd]; //@line 6198 "xmlparse.c"
        var $13=(($12+144)&4294967295); //@line 6198 "xmlparse.c"
        var $14=HEAP[$13]; //@line 6198 "xmlparse.c"
        var $15=HEAP[$src_node_addr]; //@line 6198 "xmlparse.c"
        var $16=(($14+28*$15)&4294967295); //@line 6198 "xmlparse.c"
        var $17=(($16+4)&4294967295); //@line 6198 "xmlparse.c"
        var $18=HEAP[$17]; //@line 6198 "xmlparse.c"
        var $19=HEAP[$dest_addr]; //@line 6198 "xmlparse.c"
        var $20=(($19+4)&4294967295); //@line 6198 "xmlparse.c"
        HEAP[$20]=$18; //@line 6198 "xmlparse.c"
        var $21=HEAP[$dest_addr]; //@line 6199 "xmlparse.c"
        var $22=(($21)&4294967295); //@line 6199 "xmlparse.c"
        var $23=HEAP[$22]; //@line 6199 "xmlparse.c"
        var $24=((($23))|0)==4; //@line 6199 "xmlparse.c"
        if ($24) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 6199 "xmlparse.c"
      case 1: // $bb
        var $25=HEAP[$strpos_addr]; //@line 6201 "xmlparse.c"
        var $26=HEAP[$25]; //@line 6201 "xmlparse.c"
        var $27=HEAP[$dest_addr]; //@line 6201 "xmlparse.c"
        var $28=(($27+8)&4294967295); //@line 6201 "xmlparse.c"
        HEAP[$28]=$26; //@line 6201 "xmlparse.c"
        var $29=HEAP[$dtd]; //@line 6202 "xmlparse.c"
        var $30=(($29+144)&4294967295); //@line 6202 "xmlparse.c"
        var $31=HEAP[$30]; //@line 6202 "xmlparse.c"
        var $32=HEAP[$src_node_addr]; //@line 6202 "xmlparse.c"
        var $33=(($31+28*$32)&4294967295); //@line 6202 "xmlparse.c"
        var $34=(($33+8)&4294967295); //@line 6202 "xmlparse.c"
        var $35=HEAP[$34]; //@line 6202 "xmlparse.c"
        HEAP[$src]=$35; //@line 6202 "xmlparse.c"
        __label__ = 2; break; //@line 6202 "xmlparse.c"
      case 2: // $bb1
        var $36=HEAP[$strpos_addr]; //@line 6204 "xmlparse.c"
        var $37=HEAP[$36]; //@line 6204 "xmlparse.c"
        var $38=HEAP[$src]; //@line 6204 "xmlparse.c"
        var $39=HEAP[$38]; //@line 6204 "xmlparse.c"
        HEAP[$37]=$39; //@line 6204 "xmlparse.c"
        var $40=(($37+1)&4294967295); //@line 6204 "xmlparse.c"
        var $41=HEAP[$strpos_addr]; //@line 6204 "xmlparse.c"
        HEAP[$41]=$40; //@line 6204 "xmlparse.c"
        var $42=HEAP[$src]; //@line 6205 "xmlparse.c"
        var $43=HEAP[$42]; //@line 6205 "xmlparse.c"
        var $44=reSign(($43), 8, 0)==0; //@line 6205 "xmlparse.c"
        if ($44) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 6205 "xmlparse.c"
      case 3: // $bb2
        var $45=HEAP[$src]; //@line 6207 "xmlparse.c"
        var $46=(($45+1)&4294967295); //@line 6207 "xmlparse.c"
        HEAP[$src]=$46; //@line 6207 "xmlparse.c"
        __label__ = 2; break; //@line 6207 "xmlparse.c"
      case 4: // $bb3
        var $47=HEAP[$dest_addr]; //@line 6209 "xmlparse.c"
        var $48=(($47+12)&4294967295); //@line 6209 "xmlparse.c"
        HEAP[$48]=0; //@line 6209 "xmlparse.c"
        var $49=HEAP[$dest_addr]; //@line 6210 "xmlparse.c"
        var $50=(($49+16)&4294967295); //@line 6210 "xmlparse.c"
        HEAP[$50]=0; //@line 6210 "xmlparse.c"
        __label__ = 9; break; //@line 6210 "xmlparse.c"
      case 5: // $bb4
        var $51=HEAP[$dtd]; //@line 6215 "xmlparse.c"
        var $52=(($51+144)&4294967295); //@line 6215 "xmlparse.c"
        var $53=HEAP[$52]; //@line 6215 "xmlparse.c"
        var $54=HEAP[$src_node_addr]; //@line 6215 "xmlparse.c"
        var $55=(($53+28*$54)&4294967295); //@line 6215 "xmlparse.c"
        var $56=(($55+20)&4294967295); //@line 6215 "xmlparse.c"
        var $57=HEAP[$56]; //@line 6215 "xmlparse.c"
        var $58=HEAP[$dest_addr]; //@line 6215 "xmlparse.c"
        var $59=(($58+12)&4294967295); //@line 6215 "xmlparse.c"
        HEAP[$59]=$57; //@line 6215 "xmlparse.c"
        var $60=HEAP[$contpos_addr]; //@line 6216 "xmlparse.c"
        var $61=HEAP[$60]; //@line 6216 "xmlparse.c"
        var $62=HEAP[$dest_addr]; //@line 6216 "xmlparse.c"
        var $63=(($62+16)&4294967295); //@line 6216 "xmlparse.c"
        HEAP[$63]=$61; //@line 6216 "xmlparse.c"
        var $64=HEAP[$contpos_addr]; //@line 6217 "xmlparse.c"
        var $65=HEAP[$64]; //@line 6217 "xmlparse.c"
        var $66=HEAP[$dest_addr]; //@line 6217 "xmlparse.c"
        var $67=(($66+12)&4294967295); //@line 6217 "xmlparse.c"
        var $68=HEAP[$67]; //@line 6217 "xmlparse.c"
        var $69=(($65+20*$68)&4294967295); //@line 6217 "xmlparse.c"
        var $70=HEAP[$contpos_addr]; //@line 6217 "xmlparse.c"
        HEAP[$70]=$69; //@line 6217 "xmlparse.c"
        HEAP[$i]=0; //@line 6218 "xmlparse.c"
        var $71=HEAP[$dtd]; //@line 6218 "xmlparse.c"
        var $72=(($71+144)&4294967295); //@line 6218 "xmlparse.c"
        var $73=HEAP[$72]; //@line 6218 "xmlparse.c"
        var $74=HEAP[$src_node_addr]; //@line 6218 "xmlparse.c"
        var $75=(($73+28*$74)&4294967295); //@line 6218 "xmlparse.c"
        var $76=(($75+12)&4294967295); //@line 6218 "xmlparse.c"
        var $77=HEAP[$76]; //@line 6218 "xmlparse.c"
        HEAP[$cn]=$77; //@line 6218 "xmlparse.c"
        __label__ = 7; break; //@line 6218 "xmlparse.c"
      case 6: // $bb5
        var $78=HEAP[$dest_addr]; //@line 6221 "xmlparse.c"
        var $79=(($78+16)&4294967295); //@line 6221 "xmlparse.c"
        var $80=HEAP[$79]; //@line 6221 "xmlparse.c"
        var $81=HEAP[$i]; //@line 6221 "xmlparse.c"
        var $82=(($80+20*$81)&4294967295); //@line 6221 "xmlparse.c"
        var $83=HEAP[$parser_addr]; //@line 6221 "xmlparse.c"
        var $84=HEAP[$cn]; //@line 6221 "xmlparse.c"
        var $85=HEAP[$contpos_addr]; //@line 6221 "xmlparse.c"
        var $86=HEAP[$strpos_addr]; //@line 6221 "xmlparse.c"
        _build_node($83, $84, $82, $85, $86); //@line 6221 "xmlparse.c"
        var $87=HEAP[$i]; //@line 6220 "xmlparse.c"
        var $88=((($87) + 1)&4294967295); //@line 6220 "xmlparse.c"
        HEAP[$i]=$88; //@line 6220 "xmlparse.c"
        var $89=HEAP[$dtd]; //@line 6220 "xmlparse.c"
        var $90=(($89+144)&4294967295); //@line 6220 "xmlparse.c"
        var $91=HEAP[$90]; //@line 6220 "xmlparse.c"
        var $92=HEAP[$cn]; //@line 6220 "xmlparse.c"
        var $93=(($91+28*$92)&4294967295); //@line 6220 "xmlparse.c"
        var $94=(($93+24)&4294967295); //@line 6220 "xmlparse.c"
        var $95=HEAP[$94]; //@line 6220 "xmlparse.c"
        HEAP[$cn]=$95; //@line 6220 "xmlparse.c"
        __label__ = 7; break; //@line 6220 "xmlparse.c"
      case 7: // $bb6
        var $96=HEAP[$dest_addr]; //@line 6219 "xmlparse.c"
        var $97=(($96+12)&4294967295); //@line 6219 "xmlparse.c"
        var $98=HEAP[$97]; //@line 6219 "xmlparse.c"
        var $99=HEAP[$i]; //@line 6219 "xmlparse.c"
        var $100=((($98))>>>0) > ((($99))>>>0); //@line 6219 "xmlparse.c"
        if ($100) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 6219 "xmlparse.c"
      case 8: // $bb7
        var $101=HEAP[$dest_addr]; //@line 6223 "xmlparse.c"
        var $102=(($101+8)&4294967295); //@line 6223 "xmlparse.c"
        HEAP[$102]=0; //@line 6223 "xmlparse.c"
        __label__ = 9; break; //@line 6223 "xmlparse.c"
      case 9: // $bb8
        __label__ = 10; break; //@line 6225 "xmlparse.c"
      case 10: // $return
        STACKTOP = __stackBase__;
        return; //@line 6225 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _build_model($parser) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $dtd=__stackBase__+12;
        var $ret=__stackBase__+16;
        var $cpos=__stackBase__+20;
        var $str=__stackBase__+24;
        var $allocsize=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        var $1=HEAP[$parser_addr]; //@line 6230 "xmlparse.c"
        var $2=(($1+340)&4294967295); //@line 6230 "xmlparse.c"
        var $3=HEAP[$2]; //@line 6230 "xmlparse.c"
        HEAP[$dtd]=$3; //@line 6230 "xmlparse.c"
        var $4=HEAP[$dtd]; //@line 6235 "xmlparse.c"
        var $5=(($4+156)&4294967295); //@line 6235 "xmlparse.c"
        var $6=HEAP[$5]; //@line 6235 "xmlparse.c"
        var $7=((($6) * 20)&4294967295); //@line 6235 "xmlparse.c"
        var $8=HEAP[$dtd]; //@line 6235 "xmlparse.c"
        var $9=(($8+148)&4294967295); //@line 6235 "xmlparse.c"
        var $10=HEAP[$9]; //@line 6235 "xmlparse.c"
        var $11=((($7) + ($10))&4294967295); //@line 6235 "xmlparse.c"
        HEAP[$allocsize]=$11; //@line 6235 "xmlparse.c"
        var $12=HEAP[$parser_addr]; //@line 6237 "xmlparse.c"
        var $13=(($12+12)&4294967295); //@line 6237 "xmlparse.c"
        var $14=(($13)&4294967295); //@line 6237 "xmlparse.c"
        var $15=HEAP[$14]; //@line 6237 "xmlparse.c"
        var $16=HEAP[$allocsize]; //@line 6237 "xmlparse.c"
        var $17=FUNCTION_TABLE[$15]($16); //@line 6237 "xmlparse.c"
        var $18=$17; //@line 6237 "xmlparse.c"
        HEAP[$ret]=$18; //@line 6237 "xmlparse.c"
        var $19=HEAP[$ret]; //@line 6238 "xmlparse.c"
        var $20=($19)==0; //@line 6238 "xmlparse.c"
        if ($20) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 6238 "xmlparse.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 6239 "xmlparse.c"
        __label__ = 3; break; //@line 6239 "xmlparse.c"
      case 2: // $bb1
        var $21=HEAP[$dtd]; //@line 6241 "xmlparse.c"
        var $22=(($21+156)&4294967295); //@line 6241 "xmlparse.c"
        var $23=HEAP[$22]; //@line 6241 "xmlparse.c"
        var $24=HEAP[$ret]; //@line 6241 "xmlparse.c"
        var $25=(($24+20*$23)&4294967295); //@line 6241 "xmlparse.c"
        var $26=$25; //@line 6241 "xmlparse.c"
        HEAP[$str]=$26; //@line 6241 "xmlparse.c"
        var $27=HEAP[$ret]; //@line 6242 "xmlparse.c"
        var $28=(($27+20)&4294967295); //@line 6242 "xmlparse.c"
        HEAP[$cpos]=$28; //@line 6242 "xmlparse.c"
        var $29=HEAP[$parser_addr]; //@line 6244 "xmlparse.c"
        var $30=HEAP[$ret]; //@line 6244 "xmlparse.c"
        _build_node($29, 0, $30, $cpos, $str); //@line 6244 "xmlparse.c"
        var $31=HEAP[$ret]; //@line 6245 "xmlparse.c"
        HEAP[$0]=$31; //@line 6245 "xmlparse.c"
        __label__ = 3; break; //@line 6245 "xmlparse.c"
      case 3: // $bb2
        var $32=HEAP[$0]; //@line 6239 "xmlparse.c"
        HEAP[$retval]=$32; //@line 6239 "xmlparse.c"
        __label__ = 4; break; //@line 6239 "xmlparse.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 6239 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 6239 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _getElementType($parser, $enc, $ptr, $end) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $parser_addr=__stackBase__;
        var $enc_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $dtd=__stackBase__+24;
        var $name=__stackBase__+28;
        var $ret=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$parser_addr]=$parser;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        var $1=HEAP[$parser_addr]; //@line 6254 "xmlparse.c"
        var $2=(($1+340)&4294967295); //@line 6254 "xmlparse.c"
        var $3=HEAP[$2]; //@line 6254 "xmlparse.c"
        HEAP[$dtd]=$3; //@line 6254 "xmlparse.c"
        var $4=HEAP[$dtd]; //@line 6255 "xmlparse.c"
        var $5=(($4+80)&4294967295); //@line 6255 "xmlparse.c"
        var $6=HEAP[$enc_addr]; //@line 6255 "xmlparse.c"
        var $7=HEAP[$ptr_addr]; //@line 6255 "xmlparse.c"
        var $8=HEAP[$end_addr]; //@line 6255 "xmlparse.c"
        var $9=_poolStoreString($5, $6, $7, $8); //@line 6255 "xmlparse.c"
        HEAP[$name]=$9; //@line 6255 "xmlparse.c"
        var $10=HEAP[$name]; //@line 6258 "xmlparse.c"
        var $11=($10)==0; //@line 6258 "xmlparse.c"
        if ($11) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 6258 "xmlparse.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 6259 "xmlparse.c"
        __label__ = 9; break; //@line 6259 "xmlparse.c"
      case 2: // $bb1
        var $12=HEAP[$dtd]; //@line 6260 "xmlparse.c"
        var $13=(($12+20)&4294967295); //@line 6260 "xmlparse.c"
        var $14=HEAP[$name]; //@line 6260 "xmlparse.c"
        var $15=_lookup($13, $14, 24); //@line 6260 "xmlparse.c"
        var $16=$15; //@line 6260 "xmlparse.c"
        HEAP[$ret]=$16; //@line 6260 "xmlparse.c"
        var $17=HEAP[$ret]; //@line 6261 "xmlparse.c"
        var $18=($17)==0; //@line 6261 "xmlparse.c"
        if ($18) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 6261 "xmlparse.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 6262 "xmlparse.c"
        __label__ = 9; break; //@line 6262 "xmlparse.c"
      case 4: // $bb3
        var $19=HEAP[$ret]; //@line 6263 "xmlparse.c"
        var $20=(($19)&4294967295); //@line 6263 "xmlparse.c"
        var $21=HEAP[$20]; //@line 6263 "xmlparse.c"
        var $22=HEAP[$name]; //@line 6263 "xmlparse.c"
        var $23=($21)!=($22); //@line 6263 "xmlparse.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 6263 "xmlparse.c"
      case 5: // $bb4
        var $24=HEAP[$dtd]; //@line 6264 "xmlparse.c"
        var $25=(($24+80)&4294967295); //@line 6264 "xmlparse.c"
        var $26=(($25+16)&4294967295); //@line 6264 "xmlparse.c"
        var $27=HEAP[$26]; //@line 6264 "xmlparse.c"
        var $28=HEAP[$dtd]; //@line 6264 "xmlparse.c"
        var $29=(($28+80)&4294967295); //@line 6264 "xmlparse.c"
        var $30=(($29+12)&4294967295); //@line 6264 "xmlparse.c"
        HEAP[$30]=$27; //@line 6264 "xmlparse.c"
        __label__ = 8; break; //@line 6264 "xmlparse.c"
      case 6: // $bb5
        var $31=HEAP[$dtd]; //@line 6266 "xmlparse.c"
        var $32=(($31+80)&4294967295); //@line 6266 "xmlparse.c"
        var $33=(($32+12)&4294967295); //@line 6266 "xmlparse.c"
        var $34=HEAP[$33]; //@line 6266 "xmlparse.c"
        var $35=HEAP[$dtd]; //@line 6266 "xmlparse.c"
        var $36=(($35+80)&4294967295); //@line 6266 "xmlparse.c"
        var $37=(($36+16)&4294967295); //@line 6266 "xmlparse.c"
        HEAP[$37]=$34; //@line 6266 "xmlparse.c"
        var $38=HEAP[$parser_addr]; //@line 6267 "xmlparse.c"
        var $39=HEAP[$ret]; //@line 6267 "xmlparse.c"
        var $40=_setElementTypePrefix($38, $39); //@line 6267 "xmlparse.c"
        var $41=((($40))|0)==0; //@line 6267 "xmlparse.c"
        if ($41) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 6267 "xmlparse.c"
      case 7: // $bb6
        HEAP[$0]=0; //@line 6268 "xmlparse.c"
        __label__ = 9; break; //@line 6268 "xmlparse.c"
      case 8: // $bb7
        var $42=HEAP[$ret]; //@line 6270 "xmlparse.c"
        HEAP[$0]=$42; //@line 6270 "xmlparse.c"
        __label__ = 9; break; //@line 6270 "xmlparse.c"
      case 9: // $bb8
        var $43=HEAP[$0]; //@line 6259 "xmlparse.c"
        HEAP[$retval]=$43; //@line 6259 "xmlparse.c"
        __label__ = 10; break; //@line 6259 "xmlparse.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 6259 "xmlparse.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 6259 "xmlparse.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _prolog0($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 128 "xmlrole.c"
        if ($1 == 11) {
          __label__ = 3; break;
        }
        else if ($1 == 12) {
          __label__ = 2; break;
        }
        else if ($1 == 13) {
          __label__ = 4; break;
        }
        else if ($1 == 14) {
          __label__ = 5; break;
        }
        else if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 16) {
          __label__ = 6; break;
        }
        else if ($1 == 29) {
          __label__ = 8; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 1: // $bb
        var $2=HEAP[$state_addr]; //@line 130 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 130 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 70); //@line 130 "xmlrole.c"
        HEAP[$0]=0; //@line 131 "xmlrole.c"
        __label__ = 10; break; //@line 131 "xmlrole.c"
      case 2: // $bb1
        var $4=HEAP[$state_addr]; //@line 133 "xmlrole.c"
        var $5=(($4)&4294967295); //@line 133 "xmlrole.c"
        HEAP[$5]=(FUNCTION_TABLE_OFFSET + 70); //@line 133 "xmlrole.c"
        HEAP[$0]=1; //@line 134 "xmlrole.c"
        __label__ = 10; break; //@line 134 "xmlrole.c"
      case 3: // $bb2
        var $6=HEAP[$state_addr]; //@line 136 "xmlrole.c"
        var $7=(($6)&4294967295); //@line 136 "xmlrole.c"
        HEAP[$7]=(FUNCTION_TABLE_OFFSET + 70); //@line 136 "xmlrole.c"
        HEAP[$0]=55; //@line 137 "xmlrole.c"
        __label__ = 10; break; //@line 137 "xmlrole.c"
      case 4: // $bb3
        var $8=HEAP[$state_addr]; //@line 139 "xmlrole.c"
        var $9=(($8)&4294967295); //@line 139 "xmlrole.c"
        HEAP[$9]=(FUNCTION_TABLE_OFFSET + 70); //@line 139 "xmlrole.c"
        HEAP[$0]=56; //@line 140 "xmlrole.c"
        __label__ = 10; break; //@line 140 "xmlrole.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 142 "xmlrole.c"
        __label__ = 10; break; //@line 142 "xmlrole.c"
      case 6: // $bb5
        var $10=HEAP[$enc_addr]; //@line 144 "xmlrole.c"
        var $11=(($10+24)&4294967295); //@line 144 "xmlrole.c"
        var $12=HEAP[$11]; //@line 144 "xmlrole.c"
        var $13=HEAP[$enc_addr]; //@line 144 "xmlrole.c"
        var $14=(($13+64)&4294967295); //@line 144 "xmlrole.c"
        var $15=HEAP[$14]; //@line 144 "xmlrole.c"
        var $16=((($15) * 2)&4294967295); //@line 144 "xmlrole.c"
        var $17=HEAP[$ptr_addr]; //@line 144 "xmlrole.c"
        var $18=(($17+$16)&4294967295); //@line 144 "xmlrole.c"
        var $19=HEAP[$enc_addr]; //@line 144 "xmlrole.c"
        var $20=HEAP[$end_addr]; //@line 144 "xmlrole.c"
        var $21=FUNCTION_TABLE[$12]($19, $18, $20, ((_KW_DOCTYPE)&4294967295)); //@line 144 "xmlrole.c"
        var $22=((($21))|0)==0; //@line 144 "xmlrole.c"
        if ($22) { __label__ = 9; break; } else { __label__ = 7; break; } //@line 144 "xmlrole.c"
      case 7: // $bb6
        var $23=HEAP[$state_addr]; //@line 149 "xmlrole.c"
        var $24=(($23)&4294967295); //@line 149 "xmlrole.c"
        HEAP[$24]=(FUNCTION_TABLE_OFFSET + 72); //@line 149 "xmlrole.c"
        HEAP[$0]=3; //@line 150 "xmlrole.c"
        __label__ = 10; break; //@line 150 "xmlrole.c"
      case 8: // $bb7
        var $25=HEAP[$state_addr]; //@line 152 "xmlrole.c"
        var $26=(($25)&4294967295); //@line 152 "xmlrole.c"
        HEAP[$26]=(FUNCTION_TABLE_OFFSET + 74); //@line 152 "xmlrole.c"
        HEAP[$0]=2; //@line 153 "xmlrole.c"
        __label__ = 10; break; //@line 153 "xmlrole.c"
      case 9: // $bb8
        var $27=HEAP[$state_addr]; //@line 155 "xmlrole.c"
        var $28=HEAP[$tok_addr]; //@line 155 "xmlrole.c"
        var $29=_common($27, $28); //@line 155 "xmlrole.c"
        HEAP[$0]=$29; //@line 155 "xmlrole.c"
        __label__ = 10; break; //@line 155 "xmlrole.c"
      case 10: // $bb9
        var $30=HEAP[$0]; //@line 131 "xmlrole.c"
        HEAP[$retval]=$30; //@line 131 "xmlrole.c"
        __label__ = 11; break; //@line 131 "xmlrole.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 131 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 131 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _prolog1($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 165 "xmlrole.c"
        if ($1 == 11) {
          __label__ = 2; break;
        }
        else if ($1 == 13) {
          __label__ = 3; break;
        }
        else if ($1 == 14) {
          __label__ = 4; break;
        }
        else if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 16) {
          __label__ = 5; break;
        }
        else if ($1 == 29) {
          __label__ = 7; break;
        }
        else {
        __label__ = 8; break;
        }
        
      case 1: // $bb
        HEAP[$0]=0; //@line 167 "xmlrole.c"
        __label__ = 9; break; //@line 167 "xmlrole.c"
      case 2: // $bb1
        HEAP[$0]=55; //@line 169 "xmlrole.c"
        __label__ = 9; break; //@line 169 "xmlrole.c"
      case 3: // $bb2
        HEAP[$0]=56; //@line 171 "xmlrole.c"
        __label__ = 9; break; //@line 171 "xmlrole.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 173 "xmlrole.c"
        __label__ = 9; break; //@line 173 "xmlrole.c"
      case 5: // $bb4
        var $2=HEAP[$enc_addr]; //@line 175 "xmlrole.c"
        var $3=(($2+24)&4294967295); //@line 175 "xmlrole.c"
        var $4=HEAP[$3]; //@line 175 "xmlrole.c"
        var $5=HEAP[$enc_addr]; //@line 175 "xmlrole.c"
        var $6=(($5+64)&4294967295); //@line 175 "xmlrole.c"
        var $7=HEAP[$6]; //@line 175 "xmlrole.c"
        var $8=((($7) * 2)&4294967295); //@line 175 "xmlrole.c"
        var $9=HEAP[$ptr_addr]; //@line 175 "xmlrole.c"
        var $10=(($9+$8)&4294967295); //@line 175 "xmlrole.c"
        var $11=HEAP[$enc_addr]; //@line 175 "xmlrole.c"
        var $12=HEAP[$end_addr]; //@line 175 "xmlrole.c"
        var $13=FUNCTION_TABLE[$4]($11, $10, $12, ((_KW_DOCTYPE)&4294967295)); //@line 175 "xmlrole.c"
        var $14=((($13))|0)==0; //@line 175 "xmlrole.c"
        if ($14) { __label__ = 8; break; } else { __label__ = 6; break; } //@line 175 "xmlrole.c"
      case 6: // $bb5
        var $15=HEAP[$state_addr]; //@line 180 "xmlrole.c"
        var $16=(($15)&4294967295); //@line 180 "xmlrole.c"
        HEAP[$16]=(FUNCTION_TABLE_OFFSET + 72); //@line 180 "xmlrole.c"
        HEAP[$0]=3; //@line 181 "xmlrole.c"
        __label__ = 9; break; //@line 181 "xmlrole.c"
      case 7: // $bb6
        var $17=HEAP[$state_addr]; //@line 183 "xmlrole.c"
        var $18=(($17)&4294967295); //@line 183 "xmlrole.c"
        HEAP[$18]=(FUNCTION_TABLE_OFFSET + 74); //@line 183 "xmlrole.c"
        HEAP[$0]=2; //@line 184 "xmlrole.c"
        __label__ = 9; break; //@line 184 "xmlrole.c"
      case 8: // $bb7
        var $19=HEAP[$state_addr]; //@line 186 "xmlrole.c"
        var $20=HEAP[$tok_addr]; //@line 186 "xmlrole.c"
        var $21=_common($19, $20); //@line 186 "xmlrole.c"
        HEAP[$0]=$21; //@line 186 "xmlrole.c"
        __label__ = 9; break; //@line 186 "xmlrole.c"
      case 9: // $bb8
        var $22=HEAP[$0]; //@line 167 "xmlrole.c"
        HEAP[$retval]=$22; //@line 167 "xmlrole.c"
        __label__ = 10; break; //@line 167 "xmlrole.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 167 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 167 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _prolog2($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 196 "xmlrole.c"
        if ($1 == 11) {
          __label__ = 2; break;
        }
        else if ($1 == 13) {
          __label__ = 3; break;
        }
        else if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 29) {
          __label__ = 4; break;
        }
        else {
        __label__ = 5; break;
        }
        
      case 1: // $bb
        HEAP[$0]=0; //@line 198 "xmlrole.c"
        __label__ = 6; break; //@line 198 "xmlrole.c"
      case 2: // $bb1
        HEAP[$0]=55; //@line 200 "xmlrole.c"
        __label__ = 6; break; //@line 200 "xmlrole.c"
      case 3: // $bb2
        HEAP[$0]=56; //@line 202 "xmlrole.c"
        __label__ = 6; break; //@line 202 "xmlrole.c"
      case 4: // $bb3
        var $2=HEAP[$state_addr]; //@line 204 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 204 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 74); //@line 204 "xmlrole.c"
        HEAP[$0]=2; //@line 205 "xmlrole.c"
        __label__ = 6; break; //@line 205 "xmlrole.c"
      case 5: // $bb4
        var $4=HEAP[$state_addr]; //@line 207 "xmlrole.c"
        var $5=HEAP[$tok_addr]; //@line 207 "xmlrole.c"
        var $6=_common($4, $5); //@line 207 "xmlrole.c"
        HEAP[$0]=$6; //@line 207 "xmlrole.c"
        __label__ = 6; break; //@line 207 "xmlrole.c"
      case 6: // $bb5
        var $7=HEAP[$0]; //@line 198 "xmlrole.c"
        HEAP[$retval]=$7; //@line 198 "xmlrole.c"
        __label__ = 7; break; //@line 198 "xmlrole.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 198 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 198 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _doctype0($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 217 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 2; break;
        }
        else if ($1 == 41) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        HEAP[$0]=3; //@line 219 "xmlrole.c"
        __label__ = 4; break; //@line 219 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 222 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 222 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 76); //@line 222 "xmlrole.c"
        HEAP[$0]=4; //@line 223 "xmlrole.c"
        __label__ = 4; break; //@line 223 "xmlrole.c"
      case 3: // $bb2
        var $4=HEAP[$state_addr]; //@line 225 "xmlrole.c"
        var $5=HEAP[$tok_addr]; //@line 225 "xmlrole.c"
        var $6=_common($4, $5); //@line 225 "xmlrole.c"
        HEAP[$0]=$6; //@line 225 "xmlrole.c"
        __label__ = 4; break; //@line 225 "xmlrole.c"
      case 4: // $bb3
        var $7=HEAP[$0]; //@line 219 "xmlrole.c"
        HEAP[$retval]=$7; //@line 219 "xmlrole.c"
        __label__ = 5; break; //@line 219 "xmlrole.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 219 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 219 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _doctype1($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 235 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 17) {
          __label__ = 3; break;
        }
        else if ($1 == 18) {
          __label__ = 4; break;
        }
        else if ($1 == 25) {
          __label__ = 2; break;
        }
        else {
        __label__ = 8; break;
        }
        
      case 1: // $bb
        HEAP[$0]=3; //@line 237 "xmlrole.c"
        __label__ = 9; break; //@line 237 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 239 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 239 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 78); //@line 239 "xmlrole.c"
        HEAP[$0]=7; //@line 240 "xmlrole.c"
        __label__ = 9; break; //@line 240 "xmlrole.c"
      case 3: // $bb2
        var $4=HEAP[$state_addr]; //@line 242 "xmlrole.c"
        var $5=(($4)&4294967295); //@line 242 "xmlrole.c"
        HEAP[$5]=(FUNCTION_TABLE_OFFSET + 80); //@line 242 "xmlrole.c"
        HEAP[$0]=8; //@line 243 "xmlrole.c"
        __label__ = 9; break; //@line 243 "xmlrole.c"
      case 4: // $bb3
        var $6=HEAP[$enc_addr]; //@line 245 "xmlrole.c"
        var $7=(($6+24)&4294967295); //@line 245 "xmlrole.c"
        var $8=HEAP[$7]; //@line 245 "xmlrole.c"
        var $9=HEAP[$enc_addr]; //@line 245 "xmlrole.c"
        var $10=HEAP[$ptr_addr]; //@line 245 "xmlrole.c"
        var $11=HEAP[$end_addr]; //@line 245 "xmlrole.c"
        var $12=FUNCTION_TABLE[$8]($9, $10, $11, ((_KW_SYSTEM)&4294967295)); //@line 245 "xmlrole.c"
        var $13=((($12))|0)!=0; //@line 245 "xmlrole.c"
        if ($13) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 245 "xmlrole.c"
      case 5: // $bb4
        var $14=HEAP[$state_addr]; //@line 246 "xmlrole.c"
        var $15=(($14)&4294967295); //@line 246 "xmlrole.c"
        HEAP[$15]=(FUNCTION_TABLE_OFFSET + 82); //@line 246 "xmlrole.c"
        HEAP[$0]=3; //@line 247 "xmlrole.c"
        __label__ = 9; break; //@line 247 "xmlrole.c"
      case 6: // $bb5
        var $16=HEAP[$enc_addr]; //@line 249 "xmlrole.c"
        var $17=(($16+24)&4294967295); //@line 249 "xmlrole.c"
        var $18=HEAP[$17]; //@line 249 "xmlrole.c"
        var $19=HEAP[$enc_addr]; //@line 249 "xmlrole.c"
        var $20=HEAP[$ptr_addr]; //@line 249 "xmlrole.c"
        var $21=HEAP[$end_addr]; //@line 249 "xmlrole.c"
        var $22=FUNCTION_TABLE[$18]($19, $20, $21, ((_KW_PUBLIC)&4294967295)); //@line 249 "xmlrole.c"
        var $23=((($22))|0)!=0; //@line 249 "xmlrole.c"
        if ($23) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 249 "xmlrole.c"
      case 7: // $bb6
        var $24=HEAP[$state_addr]; //@line 250 "xmlrole.c"
        var $25=(($24)&4294967295); //@line 250 "xmlrole.c"
        HEAP[$25]=(FUNCTION_TABLE_OFFSET + 84); //@line 250 "xmlrole.c"
        HEAP[$0]=3; //@line 251 "xmlrole.c"
        __label__ = 9; break; //@line 251 "xmlrole.c"
      case 8: // $bb7
        var $26=HEAP[$state_addr]; //@line 255 "xmlrole.c"
        var $27=HEAP[$tok_addr]; //@line 255 "xmlrole.c"
        var $28=_common($26, $27); //@line 255 "xmlrole.c"
        HEAP[$0]=$28; //@line 255 "xmlrole.c"
        __label__ = 9; break; //@line 255 "xmlrole.c"
      case 9: // $bb8
        var $29=HEAP[$0]; //@line 237 "xmlrole.c"
        HEAP[$retval]=$29; //@line 237 "xmlrole.c"
        __label__ = 10; break; //@line 237 "xmlrole.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 237 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 237 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _doctype2($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 265 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 27) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        HEAP[$0]=3; //@line 267 "xmlrole.c"
        __label__ = 4; break; //@line 267 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 269 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 269 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 82); //@line 269 "xmlrole.c"
        HEAP[$0]=6; //@line 270 "xmlrole.c"
        __label__ = 4; break; //@line 270 "xmlrole.c"
      case 3: // $bb2
        var $4=HEAP[$state_addr]; //@line 272 "xmlrole.c"
        var $5=HEAP[$tok_addr]; //@line 272 "xmlrole.c"
        var $6=_common($4, $5); //@line 272 "xmlrole.c"
        HEAP[$0]=$6; //@line 272 "xmlrole.c"
        __label__ = 4; break; //@line 272 "xmlrole.c"
      case 4: // $bb3
        var $7=HEAP[$0]; //@line 267 "xmlrole.c"
        HEAP[$retval]=$7; //@line 267 "xmlrole.c"
        __label__ = 5; break; //@line 267 "xmlrole.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 267 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 267 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _doctype3($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 282 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 27) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        HEAP[$0]=3; //@line 284 "xmlrole.c"
        __label__ = 4; break; //@line 284 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 286 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 286 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 86); //@line 286 "xmlrole.c"
        HEAP[$0]=5; //@line 287 "xmlrole.c"
        __label__ = 4; break; //@line 287 "xmlrole.c"
      case 3: // $bb2
        var $4=HEAP[$state_addr]; //@line 289 "xmlrole.c"
        var $5=HEAP[$tok_addr]; //@line 289 "xmlrole.c"
        var $6=_common($4, $5); //@line 289 "xmlrole.c"
        HEAP[$0]=$6; //@line 289 "xmlrole.c"
        __label__ = 4; break; //@line 289 "xmlrole.c"
      case 4: // $bb3
        var $7=HEAP[$0]; //@line 284 "xmlrole.c"
        HEAP[$retval]=$7; //@line 284 "xmlrole.c"
        __label__ = 5; break; //@line 284 "xmlrole.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 284 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 284 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _doctype4($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 299 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 17) {
          __label__ = 3; break;
        }
        else if ($1 == 25) {
          __label__ = 2; break;
        }
        else {
        __label__ = 4; break;
        }
        
      case 1: // $bb
        HEAP[$0]=3; //@line 301 "xmlrole.c"
        __label__ = 5; break; //@line 301 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 303 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 303 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 78); //@line 303 "xmlrole.c"
        HEAP[$0]=7; //@line 304 "xmlrole.c"
        __label__ = 5; break; //@line 304 "xmlrole.c"
      case 3: // $bb2
        var $4=HEAP[$state_addr]; //@line 306 "xmlrole.c"
        var $5=(($4)&4294967295); //@line 306 "xmlrole.c"
        HEAP[$5]=(FUNCTION_TABLE_OFFSET + 80); //@line 306 "xmlrole.c"
        HEAP[$0]=8; //@line 307 "xmlrole.c"
        __label__ = 5; break; //@line 307 "xmlrole.c"
      case 4: // $bb3
        var $6=HEAP[$state_addr]; //@line 309 "xmlrole.c"
        var $7=HEAP[$tok_addr]; //@line 309 "xmlrole.c"
        var $8=_common($6, $7); //@line 309 "xmlrole.c"
        HEAP[$0]=$8; //@line 309 "xmlrole.c"
        __label__ = 5; break; //@line 309 "xmlrole.c"
      case 5: // $bb4
        var $9=HEAP[$0]; //@line 301 "xmlrole.c"
        HEAP[$retval]=$9; //@line 301 "xmlrole.c"
        __label__ = 6; break; //@line 301 "xmlrole.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 301 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 301 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _doctype5($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 319 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 17) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        HEAP[$0]=3; //@line 321 "xmlrole.c"
        __label__ = 4; break; //@line 321 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 323 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 323 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 80); //@line 323 "xmlrole.c"
        HEAP[$0]=8; //@line 324 "xmlrole.c"
        __label__ = 4; break; //@line 324 "xmlrole.c"
      case 3: // $bb2
        var $4=HEAP[$state_addr]; //@line 326 "xmlrole.c"
        var $5=HEAP[$tok_addr]; //@line 326 "xmlrole.c"
        var $6=_common($4, $5); //@line 326 "xmlrole.c"
        HEAP[$0]=$6; //@line 326 "xmlrole.c"
        __label__ = 4; break; //@line 326 "xmlrole.c"
      case 4: // $bb3
        var $7=HEAP[$0]; //@line 321 "xmlrole.c"
        HEAP[$retval]=$7; //@line 321 "xmlrole.c"
        __label__ = 5; break; //@line 321 "xmlrole.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 321 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 321 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _internalSubset($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 336 "xmlrole.c"
        if ($1 == -4) {
          __label__ = 15; break;
        }
        else if ($1 == 11) {
          __label__ = 11; break;
        }
        else if ($1 == 13) {
          __label__ = 12; break;
        }
        else if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 16) {
          __label__ = 2; break;
        }
        else if ($1 == 26) {
          __label__ = 14; break;
        }
        else if ($1 == 28) {
          __label__ = 13; break;
        }
        else {
        __label__ = 16; break;
        }
        
      case 1: // $bb
        HEAP[$0]=0; //@line 338 "xmlrole.c"
        __label__ = 17; break; //@line 338 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$enc_addr]; //@line 340 "xmlrole.c"
        var $3=(($2+24)&4294967295); //@line 340 "xmlrole.c"
        var $4=HEAP[$3]; //@line 340 "xmlrole.c"
        var $5=HEAP[$enc_addr]; //@line 340 "xmlrole.c"
        var $6=(($5+64)&4294967295); //@line 340 "xmlrole.c"
        var $7=HEAP[$6]; //@line 340 "xmlrole.c"
        var $8=((($7) * 2)&4294967295); //@line 340 "xmlrole.c"
        var $9=HEAP[$ptr_addr]; //@line 340 "xmlrole.c"
        var $10=(($9+$8)&4294967295); //@line 340 "xmlrole.c"
        var $11=HEAP[$enc_addr]; //@line 340 "xmlrole.c"
        var $12=HEAP[$end_addr]; //@line 340 "xmlrole.c"
        var $13=FUNCTION_TABLE[$4]($11, $10, $12, ((_KW_ENTITY)&4294967295)); //@line 340 "xmlrole.c"
        var $14=((($13))|0)!=0; //@line 340 "xmlrole.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 340 "xmlrole.c"
      case 3: // $bb2
        var $15=HEAP[$state_addr]; //@line 344 "xmlrole.c"
        var $16=(($15)&4294967295); //@line 344 "xmlrole.c"
        HEAP[$16]=(FUNCTION_TABLE_OFFSET + 88); //@line 344 "xmlrole.c"
        HEAP[$0]=11; //@line 345 "xmlrole.c"
        __label__ = 17; break; //@line 345 "xmlrole.c"
      case 4: // $bb3
        var $17=HEAP[$enc_addr]; //@line 347 "xmlrole.c"
        var $18=(($17+24)&4294967295); //@line 347 "xmlrole.c"
        var $19=HEAP[$18]; //@line 347 "xmlrole.c"
        var $20=HEAP[$enc_addr]; //@line 347 "xmlrole.c"
        var $21=(($20+64)&4294967295); //@line 347 "xmlrole.c"
        var $22=HEAP[$21]; //@line 347 "xmlrole.c"
        var $23=((($22) * 2)&4294967295); //@line 347 "xmlrole.c"
        var $24=HEAP[$ptr_addr]; //@line 347 "xmlrole.c"
        var $25=(($24+$23)&4294967295); //@line 347 "xmlrole.c"
        var $26=HEAP[$enc_addr]; //@line 347 "xmlrole.c"
        var $27=HEAP[$end_addr]; //@line 347 "xmlrole.c"
        var $28=FUNCTION_TABLE[$19]($26, $25, $27, ((_KW_ATTLIST)&4294967295)); //@line 347 "xmlrole.c"
        var $29=((($28))|0)!=0; //@line 347 "xmlrole.c"
        if ($29) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 347 "xmlrole.c"
      case 5: // $bb4
        var $30=HEAP[$state_addr]; //@line 351 "xmlrole.c"
        var $31=(($30)&4294967295); //@line 351 "xmlrole.c"
        HEAP[$31]=(FUNCTION_TABLE_OFFSET + 90); //@line 351 "xmlrole.c"
        HEAP[$0]=33; //@line 352 "xmlrole.c"
        __label__ = 17; break; //@line 352 "xmlrole.c"
      case 6: // $bb5
        var $32=HEAP[$enc_addr]; //@line 354 "xmlrole.c"
        var $33=(($32+24)&4294967295); //@line 354 "xmlrole.c"
        var $34=HEAP[$33]; //@line 354 "xmlrole.c"
        var $35=HEAP[$enc_addr]; //@line 354 "xmlrole.c"
        var $36=(($35+64)&4294967295); //@line 354 "xmlrole.c"
        var $37=HEAP[$36]; //@line 354 "xmlrole.c"
        var $38=((($37) * 2)&4294967295); //@line 354 "xmlrole.c"
        var $39=HEAP[$ptr_addr]; //@line 354 "xmlrole.c"
        var $40=(($39+$38)&4294967295); //@line 354 "xmlrole.c"
        var $41=HEAP[$enc_addr]; //@line 354 "xmlrole.c"
        var $42=HEAP[$end_addr]; //@line 354 "xmlrole.c"
        var $43=FUNCTION_TABLE[$34]($41, $40, $42, ((_KW_ELEMENT)&4294967295)); //@line 354 "xmlrole.c"
        var $44=((($43))|0)!=0; //@line 354 "xmlrole.c"
        if ($44) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 354 "xmlrole.c"
      case 7: // $bb6
        var $45=HEAP[$state_addr]; //@line 358 "xmlrole.c"
        var $46=(($45)&4294967295); //@line 358 "xmlrole.c"
        HEAP[$46]=(FUNCTION_TABLE_OFFSET + 92); //@line 358 "xmlrole.c"
        HEAP[$0]=39; //@line 359 "xmlrole.c"
        __label__ = 17; break; //@line 359 "xmlrole.c"
      case 8: // $bb7
        var $47=HEAP[$enc_addr]; //@line 361 "xmlrole.c"
        var $48=(($47+24)&4294967295); //@line 361 "xmlrole.c"
        var $49=HEAP[$48]; //@line 361 "xmlrole.c"
        var $50=HEAP[$enc_addr]; //@line 361 "xmlrole.c"
        var $51=(($50+64)&4294967295); //@line 361 "xmlrole.c"
        var $52=HEAP[$51]; //@line 361 "xmlrole.c"
        var $53=((($52) * 2)&4294967295); //@line 361 "xmlrole.c"
        var $54=HEAP[$ptr_addr]; //@line 361 "xmlrole.c"
        var $55=(($54+$53)&4294967295); //@line 361 "xmlrole.c"
        var $56=HEAP[$enc_addr]; //@line 361 "xmlrole.c"
        var $57=HEAP[$end_addr]; //@line 361 "xmlrole.c"
        var $58=FUNCTION_TABLE[$49]($56, $55, $57, ((_KW_NOTATION)&4294967295)); //@line 361 "xmlrole.c"
        var $59=((($58))|0)!=0; //@line 361 "xmlrole.c"
        if ($59) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 361 "xmlrole.c"
      case 9: // $bb8
        var $60=HEAP[$state_addr]; //@line 365 "xmlrole.c"
        var $61=(($60)&4294967295); //@line 365 "xmlrole.c"
        HEAP[$61]=(FUNCTION_TABLE_OFFSET + 94); //@line 365 "xmlrole.c"
        HEAP[$0]=17; //@line 366 "xmlrole.c"
        __label__ = 17; break; //@line 366 "xmlrole.c"
      case 10: // $bb9
        __label__ = 16; break; //@line 366 "xmlrole.c"
      case 11: // $bb10
        HEAP[$0]=55; //@line 370 "xmlrole.c"
        __label__ = 17; break; //@line 370 "xmlrole.c"
      case 12: // $bb11
        HEAP[$0]=56; //@line 372 "xmlrole.c"
        __label__ = 17; break; //@line 372 "xmlrole.c"
      case 13: // $bb12
        HEAP[$0]=57; //@line 374 "xmlrole.c"
        __label__ = 17; break; //@line 374 "xmlrole.c"
      case 14: // $bb13
        var $62=HEAP[$state_addr]; //@line 376 "xmlrole.c"
        var $63=(($62)&4294967295); //@line 376 "xmlrole.c"
        HEAP[$63]=(FUNCTION_TABLE_OFFSET + 96); //@line 376 "xmlrole.c"
        HEAP[$0]=3; //@line 377 "xmlrole.c"
        __label__ = 17; break; //@line 377 "xmlrole.c"
      case 15: // $bb14
        HEAP[$0]=0; //@line 379 "xmlrole.c"
        __label__ = 17; break; //@line 379 "xmlrole.c"
      case 16: // $bb15
        var $64=HEAP[$state_addr]; //@line 381 "xmlrole.c"
        var $65=HEAP[$tok_addr]; //@line 381 "xmlrole.c"
        var $66=_common($64, $65); //@line 381 "xmlrole.c"
        HEAP[$0]=$66; //@line 381 "xmlrole.c"
        __label__ = 17; break; //@line 381 "xmlrole.c"
      case 17: // $bb16
        var $67=HEAP[$0]; //@line 338 "xmlrole.c"
        HEAP[$retval]=$67; //@line 338 "xmlrole.c"
        __label__ = 18; break; //@line 338 "xmlrole.c"
      case 18: // $return
        var $retval17=HEAP[$retval]; //@line 338 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval17; //@line 338 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _entity0($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 438 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 3; break;
        }
        else if ($1 == 22) {
          __label__ = 2; break;
        }
        else {
        __label__ = 4; break;
        }
        
      case 1: // $bb
        HEAP[$0]=11; //@line 440 "xmlrole.c"
        __label__ = 5; break; //@line 440 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 442 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 442 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 98); //@line 442 "xmlrole.c"
        HEAP[$0]=11; //@line 443 "xmlrole.c"
        __label__ = 5; break; //@line 443 "xmlrole.c"
      case 3: // $bb2
        var $4=HEAP[$state_addr]; //@line 445 "xmlrole.c"
        var $5=(($4)&4294967295); //@line 445 "xmlrole.c"
        HEAP[$5]=(FUNCTION_TABLE_OFFSET + 100); //@line 445 "xmlrole.c"
        HEAP[$0]=9; //@line 446 "xmlrole.c"
        __label__ = 5; break; //@line 446 "xmlrole.c"
      case 4: // $bb3
        var $6=HEAP[$state_addr]; //@line 448 "xmlrole.c"
        var $7=HEAP[$tok_addr]; //@line 448 "xmlrole.c"
        var $8=_common($6, $7); //@line 448 "xmlrole.c"
        HEAP[$0]=$8; //@line 448 "xmlrole.c"
        __label__ = 5; break; //@line 448 "xmlrole.c"
      case 5: // $bb4
        var $9=HEAP[$0]; //@line 440 "xmlrole.c"
        HEAP[$retval]=$9; //@line 440 "xmlrole.c"
        __label__ = 6; break; //@line 440 "xmlrole.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 440 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 440 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _entity1($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 458 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        HEAP[$0]=11; //@line 460 "xmlrole.c"
        __label__ = 4; break; //@line 460 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 462 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 462 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 102); //@line 462 "xmlrole.c"
        HEAP[$0]=10; //@line 463 "xmlrole.c"
        __label__ = 4; break; //@line 463 "xmlrole.c"
      case 3: // $bb2
        var $4=HEAP[$state_addr]; //@line 465 "xmlrole.c"
        var $5=HEAP[$tok_addr]; //@line 465 "xmlrole.c"
        var $6=_common($4, $5); //@line 465 "xmlrole.c"
        HEAP[$0]=$6; //@line 465 "xmlrole.c"
        __label__ = 4; break; //@line 465 "xmlrole.c"
      case 4: // $bb3
        var $7=HEAP[$0]; //@line 460 "xmlrole.c"
        HEAP[$retval]=$7; //@line 460 "xmlrole.c"
        __label__ = 5; break; //@line 460 "xmlrole.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 460 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 460 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _entity2($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 475 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 2; break;
        }
        else if ($1 == 27) {
          __label__ = 7; break;
        }
        else {
        __label__ = 8; break;
        }
        
      case 1: // $bb
        HEAP[$0]=11; //@line 477 "xmlrole.c"
        __label__ = 9; break; //@line 477 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$enc_addr]; //@line 479 "xmlrole.c"
        var $3=(($2+24)&4294967295); //@line 479 "xmlrole.c"
        var $4=HEAP[$3]; //@line 479 "xmlrole.c"
        var $5=HEAP[$enc_addr]; //@line 479 "xmlrole.c"
        var $6=HEAP[$ptr_addr]; //@line 479 "xmlrole.c"
        var $7=HEAP[$end_addr]; //@line 479 "xmlrole.c"
        var $8=FUNCTION_TABLE[$4]($5, $6, $7, ((_KW_SYSTEM)&4294967295)); //@line 479 "xmlrole.c"
        var $9=((($8))|0)!=0; //@line 479 "xmlrole.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 479 "xmlrole.c"
      case 3: // $bb2
        var $10=HEAP[$state_addr]; //@line 480 "xmlrole.c"
        var $11=(($10)&4294967295); //@line 480 "xmlrole.c"
        HEAP[$11]=(FUNCTION_TABLE_OFFSET + 104); //@line 480 "xmlrole.c"
        HEAP[$0]=11; //@line 481 "xmlrole.c"
        __label__ = 9; break; //@line 481 "xmlrole.c"
      case 4: // $bb3
        var $12=HEAP[$enc_addr]; //@line 483 "xmlrole.c"
        var $13=(($12+24)&4294967295); //@line 483 "xmlrole.c"
        var $14=HEAP[$13]; //@line 483 "xmlrole.c"
        var $15=HEAP[$enc_addr]; //@line 483 "xmlrole.c"
        var $16=HEAP[$ptr_addr]; //@line 483 "xmlrole.c"
        var $17=HEAP[$end_addr]; //@line 483 "xmlrole.c"
        var $18=FUNCTION_TABLE[$14]($15, $16, $17, ((_KW_PUBLIC)&4294967295)); //@line 483 "xmlrole.c"
        var $19=((($18))|0)!=0; //@line 483 "xmlrole.c"
        if ($19) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 483 "xmlrole.c"
      case 5: // $bb4
        var $20=HEAP[$state_addr]; //@line 484 "xmlrole.c"
        var $21=(($20)&4294967295); //@line 484 "xmlrole.c"
        HEAP[$21]=(FUNCTION_TABLE_OFFSET + 106); //@line 484 "xmlrole.c"
        HEAP[$0]=11; //@line 485 "xmlrole.c"
        __label__ = 9; break; //@line 485 "xmlrole.c"
      case 6: // $bb5
        __label__ = 8; break; //@line 485 "xmlrole.c"
      case 7: // $bb6
        var $22=HEAP[$state_addr]; //@line 489 "xmlrole.c"
        var $23=(($22)&4294967295); //@line 489 "xmlrole.c"
        HEAP[$23]=(FUNCTION_TABLE_OFFSET + 108); //@line 489 "xmlrole.c"
        var $24=HEAP[$state_addr]; //@line 490 "xmlrole.c"
        var $25=(($24+8)&4294967295); //@line 490 "xmlrole.c"
        HEAP[$25]=11; //@line 490 "xmlrole.c"
        HEAP[$0]=12; //@line 491 "xmlrole.c"
        __label__ = 9; break; //@line 491 "xmlrole.c"
      case 8: // $bb7
        var $26=HEAP[$state_addr]; //@line 493 "xmlrole.c"
        var $27=HEAP[$tok_addr]; //@line 493 "xmlrole.c"
        var $28=_common($26, $27); //@line 493 "xmlrole.c"
        HEAP[$0]=$28; //@line 493 "xmlrole.c"
        __label__ = 9; break; //@line 493 "xmlrole.c"
      case 9: // $bb8
        var $29=HEAP[$0]; //@line 477 "xmlrole.c"
        HEAP[$retval]=$29; //@line 477 "xmlrole.c"
        __label__ = 10; break; //@line 477 "xmlrole.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 477 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 477 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _entity3($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 503 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 27) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        HEAP[$0]=11; //@line 505 "xmlrole.c"
        __label__ = 4; break; //@line 505 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 507 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 507 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 104); //@line 507 "xmlrole.c"
        HEAP[$0]=14; //@line 508 "xmlrole.c"
        __label__ = 4; break; //@line 508 "xmlrole.c"
      case 3: // $bb2
        var $4=HEAP[$state_addr]; //@line 510 "xmlrole.c"
        var $5=HEAP[$tok_addr]; //@line 510 "xmlrole.c"
        var $6=_common($4, $5); //@line 510 "xmlrole.c"
        HEAP[$0]=$6; //@line 510 "xmlrole.c"
        __label__ = 4; break; //@line 510 "xmlrole.c"
      case 4: // $bb3
        var $7=HEAP[$0]; //@line 505 "xmlrole.c"
        HEAP[$retval]=$7; //@line 505 "xmlrole.c"
        __label__ = 5; break; //@line 505 "xmlrole.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 505 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 505 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _entity4($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 520 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 27) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        HEAP[$0]=11; //@line 522 "xmlrole.c"
        __label__ = 4; break; //@line 522 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 524 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 524 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 110); //@line 524 "xmlrole.c"
        HEAP[$0]=13; //@line 525 "xmlrole.c"
        __label__ = 4; break; //@line 525 "xmlrole.c"
      case 3: // $bb2
        var $4=HEAP[$state_addr]; //@line 527 "xmlrole.c"
        var $5=HEAP[$tok_addr]; //@line 527 "xmlrole.c"
        var $6=_common($4, $5); //@line 527 "xmlrole.c"
        HEAP[$0]=$6; //@line 527 "xmlrole.c"
        __label__ = 4; break; //@line 527 "xmlrole.c"
      case 4: // $bb3
        var $7=HEAP[$0]; //@line 522 "xmlrole.c"
        HEAP[$retval]=$7; //@line 522 "xmlrole.c"
        __label__ = 5; break; //@line 522 "xmlrole.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 522 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 522 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _entity5($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 537 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 17) {
          __label__ = 2; break;
        }
        else if ($1 == 18) {
          __label__ = 3; break;
        }
        else {
        __label__ = 5; break;
        }
        
      case 1: // $bb
        HEAP[$0]=11; //@line 539 "xmlrole.c"
        __label__ = 6; break; //@line 539 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 541 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 541 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 78); //@line 541 "xmlrole.c"
        HEAP[$0]=15; //@line 542 "xmlrole.c"
        __label__ = 6; break; //@line 542 "xmlrole.c"
      case 3: // $bb2
        var $4=HEAP[$enc_addr]; //@line 544 "xmlrole.c"
        var $5=(($4+24)&4294967295); //@line 544 "xmlrole.c"
        var $6=HEAP[$5]; //@line 544 "xmlrole.c"
        var $7=HEAP[$enc_addr]; //@line 544 "xmlrole.c"
        var $8=HEAP[$ptr_addr]; //@line 544 "xmlrole.c"
        var $9=HEAP[$end_addr]; //@line 544 "xmlrole.c"
        var $10=FUNCTION_TABLE[$6]($7, $8, $9, ((_KW_NDATA)&4294967295)); //@line 544 "xmlrole.c"
        var $11=((($10))|0)!=0; //@line 544 "xmlrole.c"
        if ($11) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 544 "xmlrole.c"
      case 4: // $bb3
        var $12=HEAP[$state_addr]; //@line 545 "xmlrole.c"
        var $13=(($12)&4294967295); //@line 545 "xmlrole.c"
        HEAP[$13]=(FUNCTION_TABLE_OFFSET + 112); //@line 545 "xmlrole.c"
        HEAP[$0]=11; //@line 546 "xmlrole.c"
        __label__ = 6; break; //@line 546 "xmlrole.c"
      case 5: // $bb4
        var $14=HEAP[$state_addr]; //@line 550 "xmlrole.c"
        var $15=HEAP[$tok_addr]; //@line 550 "xmlrole.c"
        var $16=_common($14, $15); //@line 550 "xmlrole.c"
        HEAP[$0]=$16; //@line 550 "xmlrole.c"
        __label__ = 6; break; //@line 550 "xmlrole.c"
      case 6: // $bb5
        var $17=HEAP[$0]; //@line 539 "xmlrole.c"
        HEAP[$retval]=$17; //@line 539 "xmlrole.c"
        __label__ = 7; break; //@line 539 "xmlrole.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 539 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 539 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _entity6($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 560 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        HEAP[$0]=11; //@line 562 "xmlrole.c"
        __label__ = 4; break; //@line 562 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 564 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 564 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 108); //@line 564 "xmlrole.c"
        var $4=HEAP[$state_addr]; //@line 565 "xmlrole.c"
        var $5=(($4+8)&4294967295); //@line 565 "xmlrole.c"
        HEAP[$5]=11; //@line 565 "xmlrole.c"
        HEAP[$0]=16; //@line 566 "xmlrole.c"
        __label__ = 4; break; //@line 566 "xmlrole.c"
      case 3: // $bb2
        var $6=HEAP[$state_addr]; //@line 568 "xmlrole.c"
        var $7=HEAP[$tok_addr]; //@line 568 "xmlrole.c"
        var $8=_common($6, $7); //@line 568 "xmlrole.c"
        HEAP[$0]=$8; //@line 568 "xmlrole.c"
        __label__ = 4; break; //@line 568 "xmlrole.c"
      case 4: // $bb3
        var $9=HEAP[$0]; //@line 562 "xmlrole.c"
        HEAP[$retval]=$9; //@line 562 "xmlrole.c"
        __label__ = 5; break; //@line 562 "xmlrole.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 562 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 562 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _entity7($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 578 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 2; break;
        }
        else if ($1 == 27) {
          __label__ = 7; break;
        }
        else {
        __label__ = 8; break;
        }
        
      case 1: // $bb
        HEAP[$0]=11; //@line 580 "xmlrole.c"
        __label__ = 9; break; //@line 580 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$enc_addr]; //@line 582 "xmlrole.c"
        var $3=(($2+24)&4294967295); //@line 582 "xmlrole.c"
        var $4=HEAP[$3]; //@line 582 "xmlrole.c"
        var $5=HEAP[$enc_addr]; //@line 582 "xmlrole.c"
        var $6=HEAP[$ptr_addr]; //@line 582 "xmlrole.c"
        var $7=HEAP[$end_addr]; //@line 582 "xmlrole.c"
        var $8=FUNCTION_TABLE[$4]($5, $6, $7, ((_KW_SYSTEM)&4294967295)); //@line 582 "xmlrole.c"
        var $9=((($8))|0)!=0; //@line 582 "xmlrole.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 582 "xmlrole.c"
      case 3: // $bb2
        var $10=HEAP[$state_addr]; //@line 583 "xmlrole.c"
        var $11=(($10)&4294967295); //@line 583 "xmlrole.c"
        HEAP[$11]=(FUNCTION_TABLE_OFFSET + 114); //@line 583 "xmlrole.c"
        HEAP[$0]=11; //@line 584 "xmlrole.c"
        __label__ = 9; break; //@line 584 "xmlrole.c"
      case 4: // $bb3
        var $12=HEAP[$enc_addr]; //@line 586 "xmlrole.c"
        var $13=(($12+24)&4294967295); //@line 586 "xmlrole.c"
        var $14=HEAP[$13]; //@line 586 "xmlrole.c"
        var $15=HEAP[$enc_addr]; //@line 586 "xmlrole.c"
        var $16=HEAP[$ptr_addr]; //@line 586 "xmlrole.c"
        var $17=HEAP[$end_addr]; //@line 586 "xmlrole.c"
        var $18=FUNCTION_TABLE[$14]($15, $16, $17, ((_KW_PUBLIC)&4294967295)); //@line 586 "xmlrole.c"
        var $19=((($18))|0)!=0; //@line 586 "xmlrole.c"
        if ($19) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 586 "xmlrole.c"
      case 5: // $bb4
        var $20=HEAP[$state_addr]; //@line 587 "xmlrole.c"
        var $21=(($20)&4294967295); //@line 587 "xmlrole.c"
        HEAP[$21]=(FUNCTION_TABLE_OFFSET + 116); //@line 587 "xmlrole.c"
        HEAP[$0]=11; //@line 588 "xmlrole.c"
        __label__ = 9; break; //@line 588 "xmlrole.c"
      case 6: // $bb5
        __label__ = 8; break; //@line 588 "xmlrole.c"
      case 7: // $bb6
        var $22=HEAP[$state_addr]; //@line 592 "xmlrole.c"
        var $23=(($22)&4294967295); //@line 592 "xmlrole.c"
        HEAP[$23]=(FUNCTION_TABLE_OFFSET + 108); //@line 592 "xmlrole.c"
        var $24=HEAP[$state_addr]; //@line 593 "xmlrole.c"
        var $25=(($24+8)&4294967295); //@line 593 "xmlrole.c"
        HEAP[$25]=11; //@line 593 "xmlrole.c"
        HEAP[$0]=12; //@line 594 "xmlrole.c"
        __label__ = 9; break; //@line 594 "xmlrole.c"
      case 8: // $bb7
        var $26=HEAP[$state_addr]; //@line 596 "xmlrole.c"
        var $27=HEAP[$tok_addr]; //@line 596 "xmlrole.c"
        var $28=_common($26, $27); //@line 596 "xmlrole.c"
        HEAP[$0]=$28; //@line 596 "xmlrole.c"
        __label__ = 9; break; //@line 596 "xmlrole.c"
      case 9: // $bb8
        var $29=HEAP[$0]; //@line 580 "xmlrole.c"
        HEAP[$retval]=$29; //@line 580 "xmlrole.c"
        __label__ = 10; break; //@line 580 "xmlrole.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 580 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 580 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _entity8($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 606 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 27) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        HEAP[$0]=11; //@line 608 "xmlrole.c"
        __label__ = 4; break; //@line 608 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 610 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 610 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 114); //@line 610 "xmlrole.c"
        HEAP[$0]=14; //@line 611 "xmlrole.c"
        __label__ = 4; break; //@line 611 "xmlrole.c"
      case 3: // $bb2
        var $4=HEAP[$state_addr]; //@line 613 "xmlrole.c"
        var $5=HEAP[$tok_addr]; //@line 613 "xmlrole.c"
        var $6=_common($4, $5); //@line 613 "xmlrole.c"
        HEAP[$0]=$6; //@line 613 "xmlrole.c"
        __label__ = 4; break; //@line 613 "xmlrole.c"
      case 4: // $bb3
        var $7=HEAP[$0]; //@line 608 "xmlrole.c"
        HEAP[$retval]=$7; //@line 608 "xmlrole.c"
        __label__ = 5; break; //@line 608 "xmlrole.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 608 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 608 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _entity9($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 623 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 27) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        HEAP[$0]=11; //@line 625 "xmlrole.c"
        __label__ = 4; break; //@line 625 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 627 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 627 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 118); //@line 627 "xmlrole.c"
        HEAP[$0]=13; //@line 628 "xmlrole.c"
        __label__ = 4; break; //@line 628 "xmlrole.c"
      case 3: // $bb2
        var $4=HEAP[$state_addr]; //@line 630 "xmlrole.c"
        var $5=HEAP[$tok_addr]; //@line 630 "xmlrole.c"
        var $6=_common($4, $5); //@line 630 "xmlrole.c"
        HEAP[$0]=$6; //@line 630 "xmlrole.c"
        __label__ = 4; break; //@line 630 "xmlrole.c"
      case 4: // $bb3
        var $7=HEAP[$0]; //@line 625 "xmlrole.c"
        HEAP[$retval]=$7; //@line 625 "xmlrole.c"
        __label__ = 5; break; //@line 625 "xmlrole.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 625 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 625 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _entity10($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 640 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 17) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        HEAP[$0]=11; //@line 642 "xmlrole.c"
        __label__ = 4; break; //@line 642 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 644 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 644 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 78); //@line 644 "xmlrole.c"
        HEAP[$0]=15; //@line 645 "xmlrole.c"
        __label__ = 4; break; //@line 645 "xmlrole.c"
      case 3: // $bb2
        var $4=HEAP[$state_addr]; //@line 647 "xmlrole.c"
        var $5=HEAP[$tok_addr]; //@line 647 "xmlrole.c"
        var $6=_common($4, $5); //@line 647 "xmlrole.c"
        HEAP[$0]=$6; //@line 647 "xmlrole.c"
        __label__ = 4; break; //@line 647 "xmlrole.c"
      case 4: // $bb3
        var $7=HEAP[$0]; //@line 642 "xmlrole.c"
        HEAP[$retval]=$7; //@line 642 "xmlrole.c"
        __label__ = 5; break; //@line 642 "xmlrole.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 642 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 642 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _notation0($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 657 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        HEAP[$0]=17; //@line 659 "xmlrole.c"
        __label__ = 4; break; //@line 659 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 661 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 661 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 120); //@line 661 "xmlrole.c"
        HEAP[$0]=18; //@line 662 "xmlrole.c"
        __label__ = 4; break; //@line 662 "xmlrole.c"
      case 3: // $bb2
        var $4=HEAP[$state_addr]; //@line 664 "xmlrole.c"
        var $5=HEAP[$tok_addr]; //@line 664 "xmlrole.c"
        var $6=_common($4, $5); //@line 664 "xmlrole.c"
        HEAP[$0]=$6; //@line 664 "xmlrole.c"
        __label__ = 4; break; //@line 664 "xmlrole.c"
      case 4: // $bb3
        var $7=HEAP[$0]; //@line 659 "xmlrole.c"
        HEAP[$retval]=$7; //@line 659 "xmlrole.c"
        __label__ = 5; break; //@line 659 "xmlrole.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 659 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 659 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _notation1($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 674 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 2; break;
        }
        else {
        __label__ = 6; break;
        }
        
      case 1: // $bb
        HEAP[$0]=17; //@line 676 "xmlrole.c"
        __label__ = 7; break; //@line 676 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$enc_addr]; //@line 678 "xmlrole.c"
        var $3=(($2+24)&4294967295); //@line 678 "xmlrole.c"
        var $4=HEAP[$3]; //@line 678 "xmlrole.c"
        var $5=HEAP[$enc_addr]; //@line 678 "xmlrole.c"
        var $6=HEAP[$ptr_addr]; //@line 678 "xmlrole.c"
        var $7=HEAP[$end_addr]; //@line 678 "xmlrole.c"
        var $8=FUNCTION_TABLE[$4]($5, $6, $7, ((_KW_SYSTEM)&4294967295)); //@line 678 "xmlrole.c"
        var $9=((($8))|0)!=0; //@line 678 "xmlrole.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 678 "xmlrole.c"
      case 3: // $bb2
        var $10=HEAP[$state_addr]; //@line 679 "xmlrole.c"
        var $11=(($10)&4294967295); //@line 679 "xmlrole.c"
        HEAP[$11]=(FUNCTION_TABLE_OFFSET + 122); //@line 679 "xmlrole.c"
        HEAP[$0]=17; //@line 680 "xmlrole.c"
        __label__ = 7; break; //@line 680 "xmlrole.c"
      case 4: // $bb3
        var $12=HEAP[$enc_addr]; //@line 682 "xmlrole.c"
        var $13=(($12+24)&4294967295); //@line 682 "xmlrole.c"
        var $14=HEAP[$13]; //@line 682 "xmlrole.c"
        var $15=HEAP[$enc_addr]; //@line 682 "xmlrole.c"
        var $16=HEAP[$ptr_addr]; //@line 682 "xmlrole.c"
        var $17=HEAP[$end_addr]; //@line 682 "xmlrole.c"
        var $18=FUNCTION_TABLE[$14]($15, $16, $17, ((_KW_PUBLIC)&4294967295)); //@line 682 "xmlrole.c"
        var $19=((($18))|0)!=0; //@line 682 "xmlrole.c"
        if ($19) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 682 "xmlrole.c"
      case 5: // $bb4
        var $20=HEAP[$state_addr]; //@line 683 "xmlrole.c"
        var $21=(($20)&4294967295); //@line 683 "xmlrole.c"
        HEAP[$21]=(FUNCTION_TABLE_OFFSET + 124); //@line 683 "xmlrole.c"
        HEAP[$0]=17; //@line 684 "xmlrole.c"
        __label__ = 7; break; //@line 684 "xmlrole.c"
      case 6: // $bb5
        var $22=HEAP[$state_addr]; //@line 688 "xmlrole.c"
        var $23=HEAP[$tok_addr]; //@line 688 "xmlrole.c"
        var $24=_common($22, $23); //@line 688 "xmlrole.c"
        HEAP[$0]=$24; //@line 688 "xmlrole.c"
        __label__ = 7; break; //@line 688 "xmlrole.c"
      case 7: // $bb6
        var $25=HEAP[$0]; //@line 676 "xmlrole.c"
        HEAP[$retval]=$25; //@line 676 "xmlrole.c"
        __label__ = 8; break; //@line 676 "xmlrole.c"
      case 8: // $return
        var $retval7=HEAP[$retval]; //@line 676 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 676 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _notation2($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 698 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 27) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        HEAP[$0]=17; //@line 700 "xmlrole.c"
        __label__ = 4; break; //@line 700 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 702 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 702 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 126); //@line 702 "xmlrole.c"
        HEAP[$0]=21; //@line 703 "xmlrole.c"
        __label__ = 4; break; //@line 703 "xmlrole.c"
      case 3: // $bb2
        var $4=HEAP[$state_addr]; //@line 705 "xmlrole.c"
        var $5=HEAP[$tok_addr]; //@line 705 "xmlrole.c"
        var $6=_common($4, $5); //@line 705 "xmlrole.c"
        HEAP[$0]=$6; //@line 705 "xmlrole.c"
        __label__ = 4; break; //@line 705 "xmlrole.c"
      case 4: // $bb3
        var $7=HEAP[$0]; //@line 700 "xmlrole.c"
        HEAP[$retval]=$7; //@line 700 "xmlrole.c"
        __label__ = 5; break; //@line 700 "xmlrole.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 700 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 700 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _notation3($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 715 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 27) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        HEAP[$0]=17; //@line 717 "xmlrole.c"
        __label__ = 4; break; //@line 717 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 719 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 719 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 108); //@line 719 "xmlrole.c"
        var $4=HEAP[$state_addr]; //@line 720 "xmlrole.c"
        var $5=(($4+8)&4294967295); //@line 720 "xmlrole.c"
        HEAP[$5]=17; //@line 720 "xmlrole.c"
        HEAP[$0]=19; //@line 721 "xmlrole.c"
        __label__ = 4; break; //@line 721 "xmlrole.c"
      case 3: // $bb2
        var $6=HEAP[$state_addr]; //@line 723 "xmlrole.c"
        var $7=HEAP[$tok_addr]; //@line 723 "xmlrole.c"
        var $8=_common($6, $7); //@line 723 "xmlrole.c"
        HEAP[$0]=$8; //@line 723 "xmlrole.c"
        __label__ = 4; break; //@line 723 "xmlrole.c"
      case 4: // $bb3
        var $9=HEAP[$0]; //@line 717 "xmlrole.c"
        HEAP[$retval]=$9; //@line 717 "xmlrole.c"
        __label__ = 5; break; //@line 717 "xmlrole.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 717 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 717 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _notation4($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 733 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 17) {
          __label__ = 3; break;
        }
        else if ($1 == 27) {
          __label__ = 2; break;
        }
        else {
        __label__ = 4; break;
        }
        
      case 1: // $bb
        HEAP[$0]=17; //@line 735 "xmlrole.c"
        __label__ = 5; break; //@line 735 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 737 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 737 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 108); //@line 737 "xmlrole.c"
        var $4=HEAP[$state_addr]; //@line 738 "xmlrole.c"
        var $5=(($4+8)&4294967295); //@line 738 "xmlrole.c"
        HEAP[$5]=17; //@line 738 "xmlrole.c"
        HEAP[$0]=19; //@line 739 "xmlrole.c"
        __label__ = 5; break; //@line 739 "xmlrole.c"
      case 3: // $bb2
        var $6=HEAP[$state_addr]; //@line 741 "xmlrole.c"
        var $7=(($6)&4294967295); //@line 741 "xmlrole.c"
        HEAP[$7]=(FUNCTION_TABLE_OFFSET + 78); //@line 741 "xmlrole.c"
        HEAP[$0]=20; //@line 742 "xmlrole.c"
        __label__ = 5; break; //@line 742 "xmlrole.c"
      case 4: // $bb3
        var $8=HEAP[$state_addr]; //@line 744 "xmlrole.c"
        var $9=HEAP[$tok_addr]; //@line 744 "xmlrole.c"
        var $10=_common($8, $9); //@line 744 "xmlrole.c"
        HEAP[$0]=$10; //@line 744 "xmlrole.c"
        __label__ = 5; break; //@line 744 "xmlrole.c"
      case 5: // $bb4
        var $11=HEAP[$0]; //@line 735 "xmlrole.c"
        HEAP[$retval]=$11; //@line 735 "xmlrole.c"
        __label__ = 6; break; //@line 735 "xmlrole.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 735 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 735 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _attlist0($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 754 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 2; break;
        }
        else if ($1 == 41) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        HEAP[$0]=33; //@line 756 "xmlrole.c"
        __label__ = 4; break; //@line 756 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 759 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 759 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 128); //@line 759 "xmlrole.c"
        HEAP[$0]=34; //@line 760 "xmlrole.c"
        __label__ = 4; break; //@line 760 "xmlrole.c"
      case 3: // $bb2
        var $4=HEAP[$state_addr]; //@line 762 "xmlrole.c"
        var $5=HEAP[$tok_addr]; //@line 762 "xmlrole.c"
        var $6=_common($4, $5); //@line 762 "xmlrole.c"
        HEAP[$0]=$6; //@line 762 "xmlrole.c"
        __label__ = 4; break; //@line 762 "xmlrole.c"
      case 4: // $bb3
        var $7=HEAP[$0]; //@line 756 "xmlrole.c"
        HEAP[$retval]=$7; //@line 756 "xmlrole.c"
        __label__ = 5; break; //@line 756 "xmlrole.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 756 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 756 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _attlist1($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 772 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 17) {
          __label__ = 2; break;
        }
        else if ($1 == 18) {
          __label__ = 3; break;
        }
        else if ($1 == 41) {
          __label__ = 3; break;
        }
        else {
        __label__ = 4; break;
        }
        
      case 1: // $bb
        HEAP[$0]=33; //@line 774 "xmlrole.c"
        __label__ = 5; break; //@line 774 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 776 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 776 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 78); //@line 776 "xmlrole.c"
        HEAP[$0]=33; //@line 777 "xmlrole.c"
        __label__ = 5; break; //@line 777 "xmlrole.c"
      case 3: // $bb2
        var $4=HEAP[$state_addr]; //@line 780 "xmlrole.c"
        var $5=(($4)&4294967295); //@line 780 "xmlrole.c"
        HEAP[$5]=(FUNCTION_TABLE_OFFSET + 130); //@line 780 "xmlrole.c"
        HEAP[$0]=22; //@line 781 "xmlrole.c"
        __label__ = 5; break; //@line 781 "xmlrole.c"
      case 4: // $bb3
        var $6=HEAP[$state_addr]; //@line 783 "xmlrole.c"
        var $7=HEAP[$tok_addr]; //@line 783 "xmlrole.c"
        var $8=_common($6, $7); //@line 783 "xmlrole.c"
        HEAP[$0]=$8; //@line 783 "xmlrole.c"
        __label__ = 5; break; //@line 783 "xmlrole.c"
      case 5: // $bb4
        var $9=HEAP[$0]; //@line 774 "xmlrole.c"
        HEAP[$retval]=$9; //@line 774 "xmlrole.c"
        __label__ = 6; break; //@line 774 "xmlrole.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 774 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 774 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _attlist2($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $i=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 793 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 2; break;
        }
        else if ($1 == 23) {
          __label__ = 10; break;
        }
        else {
        __label__ = 11; break;
        }
        
      case 1: // $bb
        HEAP[$0]=33; //@line 795 "xmlrole.c"
        __label__ = 12; break; //@line 795 "xmlrole.c"
      case 2: // $bb1
        HEAP[$i]=0; //@line 809 "xmlrole.c"
        __label__ = 6; break; //@line 809 "xmlrole.c"
      case 3: // $bb2
        var $2=HEAP[$enc_addr]; //@line 810 "xmlrole.c"
        var $3=(($2+24)&4294967295); //@line 810 "xmlrole.c"
        var $4=HEAP[$3]; //@line 810 "xmlrole.c"
        var $5=HEAP[$i]; //@line 810 "xmlrole.c"
        var $6=((_types_1870+$5*4)&4294967295); //@line 810 "xmlrole.c"
        var $7=HEAP[$6]; //@line 810 "xmlrole.c"
        var $8=HEAP[$enc_addr]; //@line 810 "xmlrole.c"
        var $9=HEAP[$ptr_addr]; //@line 810 "xmlrole.c"
        var $10=HEAP[$end_addr]; //@line 810 "xmlrole.c"
        var $11=FUNCTION_TABLE[$4]($8, $9, $10, $7); //@line 810 "xmlrole.c"
        var $12=((($11))|0)!=0; //@line 810 "xmlrole.c"
        if ($12) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 810 "xmlrole.c"
      case 4: // $bb3
        var $13=HEAP[$state_addr]; //@line 811 "xmlrole.c"
        var $14=(($13)&4294967295); //@line 811 "xmlrole.c"
        HEAP[$14]=(FUNCTION_TABLE_OFFSET + 132); //@line 811 "xmlrole.c"
        var $15=HEAP[$i]; //@line 812 "xmlrole.c"
        var $16=((($15) + 23)&4294967295); //@line 812 "xmlrole.c"
        HEAP[$0]=$16; //@line 812 "xmlrole.c"
        __label__ = 12; break; //@line 812 "xmlrole.c"
      case 5: // $bb4
        var $17=HEAP[$i]; //@line 809 "xmlrole.c"
        var $18=((($17) + 1)&4294967295); //@line 809 "xmlrole.c"
        HEAP[$i]=$18; //@line 809 "xmlrole.c"
        __label__ = 6; break; //@line 809 "xmlrole.c"
      case 6: // $bb5
        var $19=HEAP[$i]; //@line 809 "xmlrole.c"
        var $20=((($19))|0) <= 7; //@line 809 "xmlrole.c"
        if ($20) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 809 "xmlrole.c"
      case 7: // $bb6
        var $21=HEAP[$enc_addr]; //@line 815 "xmlrole.c"
        var $22=(($21+24)&4294967295); //@line 815 "xmlrole.c"
        var $23=HEAP[$22]; //@line 815 "xmlrole.c"
        var $24=HEAP[$enc_addr]; //@line 815 "xmlrole.c"
        var $25=HEAP[$ptr_addr]; //@line 815 "xmlrole.c"
        var $26=HEAP[$end_addr]; //@line 815 "xmlrole.c"
        var $27=FUNCTION_TABLE[$23]($24, $25, $26, ((_KW_NOTATION)&4294967295)); //@line 815 "xmlrole.c"
        var $28=((($27))|0)!=0; //@line 815 "xmlrole.c"
        if ($28) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 815 "xmlrole.c"
      case 8: // $bb7
        var $29=HEAP[$state_addr]; //@line 816 "xmlrole.c"
        var $30=(($29)&4294967295); //@line 816 "xmlrole.c"
        HEAP[$30]=(FUNCTION_TABLE_OFFSET + 134); //@line 816 "xmlrole.c"
        HEAP[$0]=33; //@line 817 "xmlrole.c"
        __label__ = 12; break; //@line 817 "xmlrole.c"
      case 9: // $bb8
        __label__ = 11; break; //@line 817 "xmlrole.c"
      case 10: // $bb9
        var $31=HEAP[$state_addr]; //@line 821 "xmlrole.c"
        var $32=(($31)&4294967295); //@line 821 "xmlrole.c"
        HEAP[$32]=(FUNCTION_TABLE_OFFSET + 136); //@line 821 "xmlrole.c"
        HEAP[$0]=33; //@line 822 "xmlrole.c"
        __label__ = 12; break; //@line 822 "xmlrole.c"
      case 11: // $bb10
        var $33=HEAP[$state_addr]; //@line 824 "xmlrole.c"
        var $34=HEAP[$tok_addr]; //@line 824 "xmlrole.c"
        var $35=_common($33, $34); //@line 824 "xmlrole.c"
        HEAP[$0]=$35; //@line 824 "xmlrole.c"
        __label__ = 12; break; //@line 824 "xmlrole.c"
      case 12: // $bb11
        var $36=HEAP[$0]; //@line 795 "xmlrole.c"
        HEAP[$retval]=$36; //@line 795 "xmlrole.c"
        __label__ = 13; break; //@line 795 "xmlrole.c"
      case 13: // $return
        var $retval12=HEAP[$retval]; //@line 795 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval12; //@line 795 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _attlist3($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 834 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 2; break;
        }
        else if ($1 == 19) {
          __label__ = 2; break;
        }
        else if ($1 == 41) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        HEAP[$0]=33; //@line 836 "xmlrole.c"
        __label__ = 4; break; //@line 836 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 840 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 840 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 138); //@line 840 "xmlrole.c"
        HEAP[$0]=31; //@line 841 "xmlrole.c"
        __label__ = 4; break; //@line 841 "xmlrole.c"
      case 3: // $bb2
        var $4=HEAP[$state_addr]; //@line 843 "xmlrole.c"
        var $5=HEAP[$tok_addr]; //@line 843 "xmlrole.c"
        var $6=_common($4, $5); //@line 843 "xmlrole.c"
        HEAP[$0]=$6; //@line 843 "xmlrole.c"
        __label__ = 4; break; //@line 843 "xmlrole.c"
      case 4: // $bb3
        var $7=HEAP[$0]; //@line 836 "xmlrole.c"
        HEAP[$retval]=$7; //@line 836 "xmlrole.c"
        __label__ = 5; break; //@line 836 "xmlrole.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 836 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 836 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _attlist4($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 853 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 21) {
          __label__ = 3; break;
        }
        else if ($1 == 24) {
          __label__ = 2; break;
        }
        else {
        __label__ = 4; break;
        }
        
      case 1: // $bb
        HEAP[$0]=33; //@line 855 "xmlrole.c"
        __label__ = 5; break; //@line 855 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 857 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 857 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 132); //@line 857 "xmlrole.c"
        HEAP[$0]=33; //@line 858 "xmlrole.c"
        __label__ = 5; break; //@line 858 "xmlrole.c"
      case 3: // $bb2
        var $4=HEAP[$state_addr]; //@line 860 "xmlrole.c"
        var $5=(($4)&4294967295); //@line 860 "xmlrole.c"
        HEAP[$5]=(FUNCTION_TABLE_OFFSET + 136); //@line 860 "xmlrole.c"
        HEAP[$0]=33; //@line 861 "xmlrole.c"
        __label__ = 5; break; //@line 861 "xmlrole.c"
      case 4: // $bb3
        var $6=HEAP[$state_addr]; //@line 863 "xmlrole.c"
        var $7=HEAP[$tok_addr]; //@line 863 "xmlrole.c"
        var $8=_common($6, $7); //@line 863 "xmlrole.c"
        HEAP[$0]=$8; //@line 863 "xmlrole.c"
        __label__ = 5; break; //@line 863 "xmlrole.c"
      case 5: // $bb4
        var $9=HEAP[$0]; //@line 855 "xmlrole.c"
        HEAP[$retval]=$9; //@line 855 "xmlrole.c"
        __label__ = 6; break; //@line 855 "xmlrole.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 855 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 855 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _attlist5($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 873 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 23) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        HEAP[$0]=33; //@line 875 "xmlrole.c"
        __label__ = 4; break; //@line 875 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 877 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 877 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 140); //@line 877 "xmlrole.c"
        HEAP[$0]=33; //@line 878 "xmlrole.c"
        __label__ = 4; break; //@line 878 "xmlrole.c"
      case 3: // $bb2
        var $4=HEAP[$state_addr]; //@line 880 "xmlrole.c"
        var $5=HEAP[$tok_addr]; //@line 880 "xmlrole.c"
        var $6=_common($4, $5); //@line 880 "xmlrole.c"
        HEAP[$0]=$6; //@line 880 "xmlrole.c"
        __label__ = 4; break; //@line 880 "xmlrole.c"
      case 4: // $bb3
        var $7=HEAP[$0]; //@line 875 "xmlrole.c"
        HEAP[$retval]=$7; //@line 875 "xmlrole.c"
        __label__ = 5; break; //@line 875 "xmlrole.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 875 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 875 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _attlist6($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 890 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        HEAP[$0]=33; //@line 892 "xmlrole.c"
        __label__ = 4; break; //@line 892 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 894 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 894 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 142); //@line 894 "xmlrole.c"
        HEAP[$0]=32; //@line 895 "xmlrole.c"
        __label__ = 4; break; //@line 895 "xmlrole.c"
      case 3: // $bb2
        var $4=HEAP[$state_addr]; //@line 897 "xmlrole.c"
        var $5=HEAP[$tok_addr]; //@line 897 "xmlrole.c"
        var $6=_common($4, $5); //@line 897 "xmlrole.c"
        HEAP[$0]=$6; //@line 897 "xmlrole.c"
        __label__ = 4; break; //@line 897 "xmlrole.c"
      case 4: // $bb3
        var $7=HEAP[$0]; //@line 892 "xmlrole.c"
        HEAP[$retval]=$7; //@line 892 "xmlrole.c"
        __label__ = 5; break; //@line 892 "xmlrole.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 892 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 892 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _attlist7($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 907 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 21) {
          __label__ = 3; break;
        }
        else if ($1 == 24) {
          __label__ = 2; break;
        }
        else {
        __label__ = 4; break;
        }
        
      case 1: // $bb
        HEAP[$0]=33; //@line 909 "xmlrole.c"
        __label__ = 5; break; //@line 909 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 911 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 911 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 132); //@line 911 "xmlrole.c"
        HEAP[$0]=33; //@line 912 "xmlrole.c"
        __label__ = 5; break; //@line 912 "xmlrole.c"
      case 3: // $bb2
        var $4=HEAP[$state_addr]; //@line 914 "xmlrole.c"
        var $5=(($4)&4294967295); //@line 914 "xmlrole.c"
        HEAP[$5]=(FUNCTION_TABLE_OFFSET + 140); //@line 914 "xmlrole.c"
        HEAP[$0]=33; //@line 915 "xmlrole.c"
        __label__ = 5; break; //@line 915 "xmlrole.c"
      case 4: // $bb3
        var $6=HEAP[$state_addr]; //@line 917 "xmlrole.c"
        var $7=HEAP[$tok_addr]; //@line 917 "xmlrole.c"
        var $8=_common($6, $7); //@line 917 "xmlrole.c"
        HEAP[$0]=$8; //@line 917 "xmlrole.c"
        __label__ = 5; break; //@line 917 "xmlrole.c"
      case 5: // $bb4
        var $9=HEAP[$0]; //@line 909 "xmlrole.c"
        HEAP[$retval]=$9; //@line 909 "xmlrole.c"
        __label__ = 6; break; //@line 909 "xmlrole.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 909 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 909 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _attlist8($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 928 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 20) {
          __label__ = 2; break;
        }
        else if ($1 == 27) {
          __label__ = 9; break;
        }
        else {
        __label__ = 10; break;
        }
        
      case 1: // $bb
        HEAP[$0]=33; //@line 930 "xmlrole.c"
        __label__ = 11; break; //@line 930 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$enc_addr]; //@line 932 "xmlrole.c"
        var $3=(($2+24)&4294967295); //@line 932 "xmlrole.c"
        var $4=HEAP[$3]; //@line 932 "xmlrole.c"
        var $5=HEAP[$enc_addr]; //@line 932 "xmlrole.c"
        var $6=(($5+64)&4294967295); //@line 932 "xmlrole.c"
        var $7=HEAP[$6]; //@line 932 "xmlrole.c"
        var $8=HEAP[$ptr_addr]; //@line 932 "xmlrole.c"
        var $9=(($8+$7)&4294967295); //@line 932 "xmlrole.c"
        var $10=HEAP[$enc_addr]; //@line 932 "xmlrole.c"
        var $11=HEAP[$end_addr]; //@line 932 "xmlrole.c"
        var $12=FUNCTION_TABLE[$4]($10, $9, $11, ((_KW_IMPLIED)&4294967295)); //@line 932 "xmlrole.c"
        var $13=((($12))|0)!=0; //@line 932 "xmlrole.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 932 "xmlrole.c"
      case 3: // $bb2
        var $14=HEAP[$state_addr]; //@line 936 "xmlrole.c"
        var $15=(($14)&4294967295); //@line 936 "xmlrole.c"
        HEAP[$15]=(FUNCTION_TABLE_OFFSET + 128); //@line 936 "xmlrole.c"
        HEAP[$0]=35; //@line 937 "xmlrole.c"
        __label__ = 11; break; //@line 937 "xmlrole.c"
      case 4: // $bb3
        var $16=HEAP[$enc_addr]; //@line 939 "xmlrole.c"
        var $17=(($16+24)&4294967295); //@line 939 "xmlrole.c"
        var $18=HEAP[$17]; //@line 939 "xmlrole.c"
        var $19=HEAP[$enc_addr]; //@line 939 "xmlrole.c"
        var $20=(($19+64)&4294967295); //@line 939 "xmlrole.c"
        var $21=HEAP[$20]; //@line 939 "xmlrole.c"
        var $22=HEAP[$ptr_addr]; //@line 939 "xmlrole.c"
        var $23=(($22+$21)&4294967295); //@line 939 "xmlrole.c"
        var $24=HEAP[$enc_addr]; //@line 939 "xmlrole.c"
        var $25=HEAP[$end_addr]; //@line 939 "xmlrole.c"
        var $26=FUNCTION_TABLE[$18]($24, $23, $25, ((_KW_REQUIRED)&4294967295)); //@line 939 "xmlrole.c"
        var $27=((($26))|0)!=0; //@line 939 "xmlrole.c"
        if ($27) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 939 "xmlrole.c"
      case 5: // $bb4
        var $28=HEAP[$state_addr]; //@line 943 "xmlrole.c"
        var $29=(($28)&4294967295); //@line 943 "xmlrole.c"
        HEAP[$29]=(FUNCTION_TABLE_OFFSET + 128); //@line 943 "xmlrole.c"
        HEAP[$0]=36; //@line 944 "xmlrole.c"
        __label__ = 11; break; //@line 944 "xmlrole.c"
      case 6: // $bb5
        var $30=HEAP[$enc_addr]; //@line 946 "xmlrole.c"
        var $31=(($30+24)&4294967295); //@line 946 "xmlrole.c"
        var $32=HEAP[$31]; //@line 946 "xmlrole.c"
        var $33=HEAP[$enc_addr]; //@line 946 "xmlrole.c"
        var $34=(($33+64)&4294967295); //@line 946 "xmlrole.c"
        var $35=HEAP[$34]; //@line 946 "xmlrole.c"
        var $36=HEAP[$ptr_addr]; //@line 946 "xmlrole.c"
        var $37=(($36+$35)&4294967295); //@line 946 "xmlrole.c"
        var $38=HEAP[$enc_addr]; //@line 946 "xmlrole.c"
        var $39=HEAP[$end_addr]; //@line 946 "xmlrole.c"
        var $40=FUNCTION_TABLE[$32]($38, $37, $39, ((_KW_FIXED)&4294967295)); //@line 946 "xmlrole.c"
        var $41=((($40))|0)!=0; //@line 946 "xmlrole.c"
        if ($41) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 946 "xmlrole.c"
      case 7: // $bb6
        var $42=HEAP[$state_addr]; //@line 950 "xmlrole.c"
        var $43=(($42)&4294967295); //@line 950 "xmlrole.c"
        HEAP[$43]=(FUNCTION_TABLE_OFFSET + 144); //@line 950 "xmlrole.c"
        HEAP[$0]=33; //@line 951 "xmlrole.c"
        __label__ = 11; break; //@line 951 "xmlrole.c"
      case 8: // $bb7
        __label__ = 10; break; //@line 951 "xmlrole.c"
      case 9: // $bb8
        var $44=HEAP[$state_addr]; //@line 955 "xmlrole.c"
        var $45=(($44)&4294967295); //@line 955 "xmlrole.c"
        HEAP[$45]=(FUNCTION_TABLE_OFFSET + 128); //@line 955 "xmlrole.c"
        HEAP[$0]=37; //@line 956 "xmlrole.c"
        __label__ = 11; break; //@line 956 "xmlrole.c"
      case 10: // $bb9
        var $46=HEAP[$state_addr]; //@line 958 "xmlrole.c"
        var $47=HEAP[$tok_addr]; //@line 958 "xmlrole.c"
        var $48=_common($46, $47); //@line 958 "xmlrole.c"
        HEAP[$0]=$48; //@line 958 "xmlrole.c"
        __label__ = 11; break; //@line 958 "xmlrole.c"
      case 11: // $bb10
        var $49=HEAP[$0]; //@line 930 "xmlrole.c"
        HEAP[$retval]=$49; //@line 930 "xmlrole.c"
        __label__ = 12; break; //@line 930 "xmlrole.c"
      case 12: // $return
        var $retval11=HEAP[$retval]; //@line 930 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 930 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _attlist9($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 968 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 27) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        HEAP[$0]=33; //@line 970 "xmlrole.c"
        __label__ = 4; break; //@line 970 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 972 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 972 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 128); //@line 972 "xmlrole.c"
        HEAP[$0]=38; //@line 973 "xmlrole.c"
        __label__ = 4; break; //@line 973 "xmlrole.c"
      case 3: // $bb2
        var $4=HEAP[$state_addr]; //@line 975 "xmlrole.c"
        var $5=HEAP[$tok_addr]; //@line 975 "xmlrole.c"
        var $6=_common($4, $5); //@line 975 "xmlrole.c"
        HEAP[$0]=$6; //@line 975 "xmlrole.c"
        __label__ = 4; break; //@line 975 "xmlrole.c"
      case 4: // $bb3
        var $7=HEAP[$0]; //@line 970 "xmlrole.c"
        HEAP[$retval]=$7; //@line 970 "xmlrole.c"
        __label__ = 5; break; //@line 970 "xmlrole.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 970 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 970 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _element0($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 985 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 2; break;
        }
        else if ($1 == 41) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        HEAP[$0]=39; //@line 987 "xmlrole.c"
        __label__ = 4; break; //@line 987 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 990 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 990 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 146); //@line 990 "xmlrole.c"
        HEAP[$0]=40; //@line 991 "xmlrole.c"
        __label__ = 4; break; //@line 991 "xmlrole.c"
      case 3: // $bb2
        var $4=HEAP[$state_addr]; //@line 993 "xmlrole.c"
        var $5=HEAP[$tok_addr]; //@line 993 "xmlrole.c"
        var $6=_common($4, $5); //@line 993 "xmlrole.c"
        HEAP[$0]=$6; //@line 993 "xmlrole.c"
        __label__ = 4; break; //@line 993 "xmlrole.c"
      case 4: // $bb3
        var $7=HEAP[$0]; //@line 987 "xmlrole.c"
        HEAP[$retval]=$7; //@line 987 "xmlrole.c"
        __label__ = 5; break; //@line 987 "xmlrole.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 987 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 987 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _element1($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 1003 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 2; break;
        }
        else if ($1 == 23) {
          __label__ = 7; break;
        }
        else {
        __label__ = 8; break;
        }
        
      case 1: // $bb
        HEAP[$0]=39; //@line 1005 "xmlrole.c"
        __label__ = 9; break; //@line 1005 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$enc_addr]; //@line 1007 "xmlrole.c"
        var $3=(($2+24)&4294967295); //@line 1007 "xmlrole.c"
        var $4=HEAP[$3]; //@line 1007 "xmlrole.c"
        var $5=HEAP[$enc_addr]; //@line 1007 "xmlrole.c"
        var $6=HEAP[$ptr_addr]; //@line 1007 "xmlrole.c"
        var $7=HEAP[$end_addr]; //@line 1007 "xmlrole.c"
        var $8=FUNCTION_TABLE[$4]($5, $6, $7, ((_KW_EMPTY)&4294967295)); //@line 1007 "xmlrole.c"
        var $9=((($8))|0)!=0; //@line 1007 "xmlrole.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1007 "xmlrole.c"
      case 3: // $bb2
        var $10=HEAP[$state_addr]; //@line 1008 "xmlrole.c"
        var $11=(($10)&4294967295); //@line 1008 "xmlrole.c"
        HEAP[$11]=(FUNCTION_TABLE_OFFSET + 108); //@line 1008 "xmlrole.c"
        var $12=HEAP[$state_addr]; //@line 1009 "xmlrole.c"
        var $13=(($12+8)&4294967295); //@line 1009 "xmlrole.c"
        HEAP[$13]=39; //@line 1009 "xmlrole.c"
        HEAP[$0]=42; //@line 1010 "xmlrole.c"
        __label__ = 9; break; //@line 1010 "xmlrole.c"
      case 4: // $bb3
        var $14=HEAP[$enc_addr]; //@line 1012 "xmlrole.c"
        var $15=(($14+24)&4294967295); //@line 1012 "xmlrole.c"
        var $16=HEAP[$15]; //@line 1012 "xmlrole.c"
        var $17=HEAP[$enc_addr]; //@line 1012 "xmlrole.c"
        var $18=HEAP[$ptr_addr]; //@line 1012 "xmlrole.c"
        var $19=HEAP[$end_addr]; //@line 1012 "xmlrole.c"
        var $20=FUNCTION_TABLE[$16]($17, $18, $19, ((_KW_ANY)&4294967295)); //@line 1012 "xmlrole.c"
        var $21=((($20))|0)!=0; //@line 1012 "xmlrole.c"
        if ($21) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1012 "xmlrole.c"
      case 5: // $bb4
        var $22=HEAP[$state_addr]; //@line 1013 "xmlrole.c"
        var $23=(($22)&4294967295); //@line 1013 "xmlrole.c"
        HEAP[$23]=(FUNCTION_TABLE_OFFSET + 108); //@line 1013 "xmlrole.c"
        var $24=HEAP[$state_addr]; //@line 1014 "xmlrole.c"
        var $25=(($24+8)&4294967295); //@line 1014 "xmlrole.c"
        HEAP[$25]=39; //@line 1014 "xmlrole.c"
        HEAP[$0]=41; //@line 1015 "xmlrole.c"
        __label__ = 9; break; //@line 1015 "xmlrole.c"
      case 6: // $bb5
        __label__ = 8; break; //@line 1015 "xmlrole.c"
      case 7: // $bb6
        var $26=HEAP[$state_addr]; //@line 1019 "xmlrole.c"
        var $27=(($26)&4294967295); //@line 1019 "xmlrole.c"
        HEAP[$27]=(FUNCTION_TABLE_OFFSET + 148); //@line 1019 "xmlrole.c"
        var $28=HEAP[$state_addr]; //@line 1020 "xmlrole.c"
        var $29=(($28+4)&4294967295); //@line 1020 "xmlrole.c"
        HEAP[$29]=1; //@line 1020 "xmlrole.c"
        HEAP[$0]=44; //@line 1021 "xmlrole.c"
        __label__ = 9; break; //@line 1021 "xmlrole.c"
      case 8: // $bb7
        var $30=HEAP[$state_addr]; //@line 1023 "xmlrole.c"
        var $31=HEAP[$tok_addr]; //@line 1023 "xmlrole.c"
        var $32=_common($30, $31); //@line 1023 "xmlrole.c"
        HEAP[$0]=$32; //@line 1023 "xmlrole.c"
        __label__ = 9; break; //@line 1023 "xmlrole.c"
      case 9: // $bb8
        var $33=HEAP[$0]; //@line 1005 "xmlrole.c"
        HEAP[$retval]=$33; //@line 1005 "xmlrole.c"
        __label__ = 10; break; //@line 1005 "xmlrole.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 1005 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 1005 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _element2($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 1033 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 6; break;
        }
        else if ($1 == 20) {
          __label__ = 2; break;
        }
        else if ($1 == 23) {
          __label__ = 5; break;
        }
        else if ($1 == 30) {
          __label__ = 7; break;
        }
        else if ($1 == 31) {
          __label__ = 8; break;
        }
        else if ($1 == 32) {
          __label__ = 9; break;
        }
        else if ($1 == 41) {
          __label__ = 6; break;
        }
        else {
        __label__ = 10; break;
        }
        
      case 1: // $bb
        HEAP[$0]=39; //@line 1035 "xmlrole.c"
        __label__ = 11; break; //@line 1035 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$enc_addr]; //@line 1037 "xmlrole.c"
        var $3=(($2+24)&4294967295); //@line 1037 "xmlrole.c"
        var $4=HEAP[$3]; //@line 1037 "xmlrole.c"
        var $5=HEAP[$enc_addr]; //@line 1037 "xmlrole.c"
        var $6=(($5+64)&4294967295); //@line 1037 "xmlrole.c"
        var $7=HEAP[$6]; //@line 1037 "xmlrole.c"
        var $8=HEAP[$ptr_addr]; //@line 1037 "xmlrole.c"
        var $9=(($8+$7)&4294967295); //@line 1037 "xmlrole.c"
        var $10=HEAP[$enc_addr]; //@line 1037 "xmlrole.c"
        var $11=HEAP[$end_addr]; //@line 1037 "xmlrole.c"
        var $12=FUNCTION_TABLE[$4]($10, $9, $11, ((_KW_PCDATA)&4294967295)); //@line 1037 "xmlrole.c"
        var $13=((($12))|0)!=0; //@line 1037 "xmlrole.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1037 "xmlrole.c"
      case 3: // $bb2
        var $14=HEAP[$state_addr]; //@line 1041 "xmlrole.c"
        var $15=(($14)&4294967295); //@line 1041 "xmlrole.c"
        HEAP[$15]=(FUNCTION_TABLE_OFFSET + 150); //@line 1041 "xmlrole.c"
        HEAP[$0]=43; //@line 1042 "xmlrole.c"
        __label__ = 11; break; //@line 1042 "xmlrole.c"
      case 4: // $bb3
        __label__ = 10; break; //@line 1042 "xmlrole.c"
      case 5: // $bb4
        var $16=HEAP[$state_addr]; //@line 1046 "xmlrole.c"
        var $17=(($16+4)&4294967295); //@line 1046 "xmlrole.c"
        HEAP[$17]=2; //@line 1046 "xmlrole.c"
        var $18=HEAP[$state_addr]; //@line 1047 "xmlrole.c"
        var $19=(($18)&4294967295); //@line 1047 "xmlrole.c"
        HEAP[$19]=(FUNCTION_TABLE_OFFSET + 152); //@line 1047 "xmlrole.c"
        HEAP[$0]=44; //@line 1048 "xmlrole.c"
        __label__ = 11; break; //@line 1048 "xmlrole.c"
      case 6: // $bb5
        var $20=HEAP[$state_addr]; //@line 1051 "xmlrole.c"
        var $21=(($20)&4294967295); //@line 1051 "xmlrole.c"
        HEAP[$21]=(FUNCTION_TABLE_OFFSET + 154); //@line 1051 "xmlrole.c"
        HEAP[$0]=51; //@line 1052 "xmlrole.c"
        __label__ = 11; break; //@line 1052 "xmlrole.c"
      case 7: // $bb6
        var $22=HEAP[$state_addr]; //@line 1054 "xmlrole.c"
        var $23=(($22)&4294967295); //@line 1054 "xmlrole.c"
        HEAP[$23]=(FUNCTION_TABLE_OFFSET + 154); //@line 1054 "xmlrole.c"
        HEAP[$0]=53; //@line 1055 "xmlrole.c"
        __label__ = 11; break; //@line 1055 "xmlrole.c"
      case 8: // $bb7
        var $24=HEAP[$state_addr]; //@line 1057 "xmlrole.c"
        var $25=(($24)&4294967295); //@line 1057 "xmlrole.c"
        HEAP[$25]=(FUNCTION_TABLE_OFFSET + 154); //@line 1057 "xmlrole.c"
        HEAP[$0]=52; //@line 1058 "xmlrole.c"
        __label__ = 11; break; //@line 1058 "xmlrole.c"
      case 9: // $bb8
        var $26=HEAP[$state_addr]; //@line 1060 "xmlrole.c"
        var $27=(($26)&4294967295); //@line 1060 "xmlrole.c"
        HEAP[$27]=(FUNCTION_TABLE_OFFSET + 154); //@line 1060 "xmlrole.c"
        HEAP[$0]=54; //@line 1061 "xmlrole.c"
        __label__ = 11; break; //@line 1061 "xmlrole.c"
      case 10: // $bb9
        var $28=HEAP[$state_addr]; //@line 1063 "xmlrole.c"
        var $29=HEAP[$tok_addr]; //@line 1063 "xmlrole.c"
        var $30=_common($28, $29); //@line 1063 "xmlrole.c"
        HEAP[$0]=$30; //@line 1063 "xmlrole.c"
        __label__ = 11; break; //@line 1063 "xmlrole.c"
      case 11: // $bb10
        var $31=HEAP[$0]; //@line 1035 "xmlrole.c"
        HEAP[$retval]=$31; //@line 1035 "xmlrole.c"
        __label__ = 12; break; //@line 1035 "xmlrole.c"
      case 12: // $return
        var $retval11=HEAP[$retval]; //@line 1035 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 1035 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _element3($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 1073 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 21) {
          __label__ = 4; break;
        }
        else if ($1 == 24) {
          __label__ = 2; break;
        }
        else if ($1 == 36) {
          __label__ = 3; break;
        }
        else {
        __label__ = 5; break;
        }
        
      case 1: // $bb
        HEAP[$0]=39; //@line 1075 "xmlrole.c"
        __label__ = 6; break; //@line 1075 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 1077 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 1077 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 108); //@line 1077 "xmlrole.c"
        var $4=HEAP[$state_addr]; //@line 1078 "xmlrole.c"
        var $5=(($4+8)&4294967295); //@line 1078 "xmlrole.c"
        HEAP[$5]=39; //@line 1078 "xmlrole.c"
        HEAP[$0]=45; //@line 1079 "xmlrole.c"
        __label__ = 6; break; //@line 1079 "xmlrole.c"
      case 3: // $bb2
        var $6=HEAP[$state_addr]; //@line 1081 "xmlrole.c"
        var $7=(($6)&4294967295); //@line 1081 "xmlrole.c"
        HEAP[$7]=(FUNCTION_TABLE_OFFSET + 108); //@line 1081 "xmlrole.c"
        var $8=HEAP[$state_addr]; //@line 1082 "xmlrole.c"
        var $9=(($8+8)&4294967295); //@line 1082 "xmlrole.c"
        HEAP[$9]=39; //@line 1082 "xmlrole.c"
        HEAP[$0]=46; //@line 1083 "xmlrole.c"
        __label__ = 6; break; //@line 1083 "xmlrole.c"
      case 4: // $bb3
        var $10=HEAP[$state_addr]; //@line 1085 "xmlrole.c"
        var $11=(($10)&4294967295); //@line 1085 "xmlrole.c"
        HEAP[$11]=(FUNCTION_TABLE_OFFSET + 156); //@line 1085 "xmlrole.c"
        HEAP[$0]=39; //@line 1086 "xmlrole.c"
        __label__ = 6; break; //@line 1086 "xmlrole.c"
      case 5: // $bb4
        var $12=HEAP[$state_addr]; //@line 1088 "xmlrole.c"
        var $13=HEAP[$tok_addr]; //@line 1088 "xmlrole.c"
        var $14=_common($12, $13); //@line 1088 "xmlrole.c"
        HEAP[$0]=$14; //@line 1088 "xmlrole.c"
        __label__ = 6; break; //@line 1088 "xmlrole.c"
      case 6: // $bb5
        var $15=HEAP[$0]; //@line 1075 "xmlrole.c"
        HEAP[$retval]=$15; //@line 1075 "xmlrole.c"
        __label__ = 7; break; //@line 1075 "xmlrole.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 1075 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 1075 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _element4($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 1098 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 2; break;
        }
        else if ($1 == 41) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        HEAP[$0]=39; //@line 1100 "xmlrole.c"
        __label__ = 4; break; //@line 1100 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 1103 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 1103 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 158); //@line 1103 "xmlrole.c"
        HEAP[$0]=51; //@line 1104 "xmlrole.c"
        __label__ = 4; break; //@line 1104 "xmlrole.c"
      case 3: // $bb2
        var $4=HEAP[$state_addr]; //@line 1106 "xmlrole.c"
        var $5=HEAP[$tok_addr]; //@line 1106 "xmlrole.c"
        var $6=_common($4, $5); //@line 1106 "xmlrole.c"
        HEAP[$0]=$6; //@line 1106 "xmlrole.c"
        __label__ = 4; break; //@line 1106 "xmlrole.c"
      case 4: // $bb3
        var $7=HEAP[$0]; //@line 1100 "xmlrole.c"
        HEAP[$retval]=$7; //@line 1100 "xmlrole.c"
        __label__ = 5; break; //@line 1100 "xmlrole.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 1100 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 1100 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _element5($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 1116 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 21) {
          __label__ = 3; break;
        }
        else if ($1 == 36) {
          __label__ = 2; break;
        }
        else {
        __label__ = 4; break;
        }
        
      case 1: // $bb
        HEAP[$0]=39; //@line 1118 "xmlrole.c"
        __label__ = 5; break; //@line 1118 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 1120 "xmlrole.c"
        var $3=(($2)&4294967295); //@line 1120 "xmlrole.c"
        HEAP[$3]=(FUNCTION_TABLE_OFFSET + 108); //@line 1120 "xmlrole.c"
        var $4=HEAP[$state_addr]; //@line 1121 "xmlrole.c"
        var $5=(($4+8)&4294967295); //@line 1121 "xmlrole.c"
        HEAP[$5]=39; //@line 1121 "xmlrole.c"
        HEAP[$0]=46; //@line 1122 "xmlrole.c"
        __label__ = 5; break; //@line 1122 "xmlrole.c"
      case 3: // $bb2
        var $6=HEAP[$state_addr]; //@line 1124 "xmlrole.c"
        var $7=(($6)&4294967295); //@line 1124 "xmlrole.c"
        HEAP[$7]=(FUNCTION_TABLE_OFFSET + 156); //@line 1124 "xmlrole.c"
        HEAP[$0]=39; //@line 1125 "xmlrole.c"
        __label__ = 5; break; //@line 1125 "xmlrole.c"
      case 4: // $bb3
        var $8=HEAP[$state_addr]; //@line 1127 "xmlrole.c"
        var $9=HEAP[$tok_addr]; //@line 1127 "xmlrole.c"
        var $10=_common($8, $9); //@line 1127 "xmlrole.c"
        HEAP[$0]=$10; //@line 1127 "xmlrole.c"
        __label__ = 5; break; //@line 1127 "xmlrole.c"
      case 5: // $bb4
        var $11=HEAP[$0]; //@line 1118 "xmlrole.c"
        HEAP[$retval]=$11; //@line 1118 "xmlrole.c"
        __label__ = 6; break; //@line 1118 "xmlrole.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 1118 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 1118 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _element6($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 1137 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 18) {
          __label__ = 3; break;
        }
        else if ($1 == 23) {
          __label__ = 2; break;
        }
        else if ($1 == 30) {
          __label__ = 4; break;
        }
        else if ($1 == 31) {
          __label__ = 5; break;
        }
        else if ($1 == 32) {
          __label__ = 6; break;
        }
        else if ($1 == 41) {
          __label__ = 3; break;
        }
        else {
        __label__ = 7; break;
        }
        
      case 1: // $bb
        HEAP[$0]=39; //@line 1139 "xmlrole.c"
        __label__ = 8; break; //@line 1139 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 1141 "xmlrole.c"
        var $3=(($2+4)&4294967295); //@line 1141 "xmlrole.c"
        var $4=HEAP[$3]; //@line 1141 "xmlrole.c"
        var $5=((($4) + 1)&4294967295); //@line 1141 "xmlrole.c"
        var $6=HEAP[$state_addr]; //@line 1141 "xmlrole.c"
        var $7=(($6+4)&4294967295); //@line 1141 "xmlrole.c"
        HEAP[$7]=$5; //@line 1141 "xmlrole.c"
        HEAP[$0]=44; //@line 1142 "xmlrole.c"
        __label__ = 8; break; //@line 1142 "xmlrole.c"
      case 3: // $bb2
        var $8=HEAP[$state_addr]; //@line 1145 "xmlrole.c"
        var $9=(($8)&4294967295); //@line 1145 "xmlrole.c"
        HEAP[$9]=(FUNCTION_TABLE_OFFSET + 154); //@line 1145 "xmlrole.c"
        HEAP[$0]=51; //@line 1146 "xmlrole.c"
        __label__ = 8; break; //@line 1146 "xmlrole.c"
      case 4: // $bb3
        var $10=HEAP[$state_addr]; //@line 1148 "xmlrole.c"
        var $11=(($10)&4294967295); //@line 1148 "xmlrole.c"
        HEAP[$11]=(FUNCTION_TABLE_OFFSET + 154); //@line 1148 "xmlrole.c"
        HEAP[$0]=53; //@line 1149 "xmlrole.c"
        __label__ = 8; break; //@line 1149 "xmlrole.c"
      case 5: // $bb4
        var $12=HEAP[$state_addr]; //@line 1151 "xmlrole.c"
        var $13=(($12)&4294967295); //@line 1151 "xmlrole.c"
        HEAP[$13]=(FUNCTION_TABLE_OFFSET + 154); //@line 1151 "xmlrole.c"
        HEAP[$0]=52; //@line 1152 "xmlrole.c"
        __label__ = 8; break; //@line 1152 "xmlrole.c"
      case 6: // $bb5
        var $14=HEAP[$state_addr]; //@line 1154 "xmlrole.c"
        var $15=(($14)&4294967295); //@line 1154 "xmlrole.c"
        HEAP[$15]=(FUNCTION_TABLE_OFFSET + 154); //@line 1154 "xmlrole.c"
        HEAP[$0]=54; //@line 1155 "xmlrole.c"
        __label__ = 8; break; //@line 1155 "xmlrole.c"
      case 7: // $bb6
        var $16=HEAP[$state_addr]; //@line 1157 "xmlrole.c"
        var $17=HEAP[$tok_addr]; //@line 1157 "xmlrole.c"
        var $18=_common($16, $17); //@line 1157 "xmlrole.c"
        HEAP[$0]=$18; //@line 1157 "xmlrole.c"
        __label__ = 8; break; //@line 1157 "xmlrole.c"
      case 8: // $bb7
        var $19=HEAP[$0]; //@line 1139 "xmlrole.c"
        HEAP[$retval]=$19; //@line 1139 "xmlrole.c"
        __label__ = 9; break; //@line 1139 "xmlrole.c"
      case 9: // $return
        var $retval8=HEAP[$retval]; //@line 1139 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval8; //@line 1139 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _element7($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 1167 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 21) {
          __label__ = 15; break;
        }
        else if ($1 == 24) {
          __label__ = 2; break;
        }
        else if ($1 == 35) {
          __label__ = 8; break;
        }
        else if ($1 == 36) {
          __label__ = 5; break;
        }
        else if ($1 == 37) {
          __label__ = 11; break;
        }
        else if ($1 == 38) {
          __label__ = 14; break;
        }
        else {
        __label__ = 16; break;
        }
        
      case 1: // $bb
        HEAP[$0]=39; //@line 1169 "xmlrole.c"
        __label__ = 17; break; //@line 1169 "xmlrole.c"
      case 2: // $bb1
        var $2=HEAP[$state_addr]; //@line 1171 "xmlrole.c"
        var $3=(($2+4)&4294967295); //@line 1171 "xmlrole.c"
        var $4=HEAP[$3]; //@line 1171 "xmlrole.c"
        var $5=((($4) - 1)&4294967295); //@line 1171 "xmlrole.c"
        var $6=HEAP[$state_addr]; //@line 1171 "xmlrole.c"
        var $7=(($6+4)&4294967295); //@line 1171 "xmlrole.c"
        HEAP[$7]=$5; //@line 1171 "xmlrole.c"
        var $8=HEAP[$state_addr]; //@line 1172 "xmlrole.c"
        var $9=(($8+4)&4294967295); //@line 1172 "xmlrole.c"
        var $10=HEAP[$9]; //@line 1172 "xmlrole.c"
        var $11=((($10))|0)==0; //@line 1172 "xmlrole.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1172 "xmlrole.c"
      case 3: // $bb2
        var $12=HEAP[$state_addr]; //@line 1173 "xmlrole.c"
        var $13=(($12)&4294967295); //@line 1173 "xmlrole.c"
        HEAP[$13]=(FUNCTION_TABLE_OFFSET + 108); //@line 1173 "xmlrole.c"
        var $14=HEAP[$state_addr]; //@line 1174 "xmlrole.c"
        var $15=(($14+8)&4294967295); //@line 1174 "xmlrole.c"
        HEAP[$15]=39; //@line 1174 "xmlrole.c"
        __label__ = 4; break; //@line 1174 "xmlrole.c"
      case 4: // $bb3
        HEAP[$0]=45; //@line 1176 "xmlrole.c"
        __label__ = 17; break; //@line 1176 "xmlrole.c"
      case 5: // $bb4
        var $16=HEAP[$state_addr]; //@line 1178 "xmlrole.c"
        var $17=(($16+4)&4294967295); //@line 1178 "xmlrole.c"
        var $18=HEAP[$17]; //@line 1178 "xmlrole.c"
        var $19=((($18) - 1)&4294967295); //@line 1178 "xmlrole.c"
        var $20=HEAP[$state_addr]; //@line 1178 "xmlrole.c"
        var $21=(($20+4)&4294967295); //@line 1178 "xmlrole.c"
        HEAP[$21]=$19; //@line 1178 "xmlrole.c"
        var $22=HEAP[$state_addr]; //@line 1179 "xmlrole.c"
        var $23=(($22+4)&4294967295); //@line 1179 "xmlrole.c"
        var $24=HEAP[$23]; //@line 1179 "xmlrole.c"
        var $25=((($24))|0)==0; //@line 1179 "xmlrole.c"
        if ($25) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1179 "xmlrole.c"
      case 6: // $bb5
        var $26=HEAP[$state_addr]; //@line 1180 "xmlrole.c"
        var $27=(($26)&4294967295); //@line 1180 "xmlrole.c"
        HEAP[$27]=(FUNCTION_TABLE_OFFSET + 108); //@line 1180 "xmlrole.c"
        var $28=HEAP[$state_addr]; //@line 1181 "xmlrole.c"
        var $29=(($28+8)&4294967295); //@line 1181 "xmlrole.c"
        HEAP[$29]=39; //@line 1181 "xmlrole.c"
        __label__ = 7; break; //@line 1181 "xmlrole.c"
      case 7: // $bb6
        HEAP[$0]=46; //@line 1183 "xmlrole.c"
        __label__ = 17; break; //@line 1183 "xmlrole.c"
      case 8: // $bb7
        var $30=HEAP[$state_addr]; //@line 1185 "xmlrole.c"
        var $31=(($30+4)&4294967295); //@line 1185 "xmlrole.c"
        var $32=HEAP[$31]; //@line 1185 "xmlrole.c"
        var $33=((($32) - 1)&4294967295); //@line 1185 "xmlrole.c"
        var $34=HEAP[$state_addr]; //@line 1185 "xmlrole.c"
        var $35=(($34+4)&4294967295); //@line 1185 "xmlrole.c"
        HEAP[$35]=$33; //@line 1185 "xmlrole.c"
        var $36=HEAP[$state_addr]; //@line 1186 "xmlrole.c"
        var $37=(($36+4)&4294967295); //@line 1186 "xmlrole.c"
        var $38=HEAP[$37]; //@line 1186 "xmlrole.c"
        var $39=((($38))|0)==0; //@line 1186 "xmlrole.c"
        if ($39) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1186 "xmlrole.c"
      case 9: // $bb8
        var $40=HEAP[$state_addr]; //@line 1187 "xmlrole.c"
        var $41=(($40)&4294967295); //@line 1187 "xmlrole.c"
        HEAP[$41]=(FUNCTION_TABLE_OFFSET + 108); //@line 1187 "xmlrole.c"
        var $42=HEAP[$state_addr]; //@line 1188 "xmlrole.c"
        var $43=(($42+8)&4294967295); //@line 1188 "xmlrole.c"
        HEAP[$43]=39; //@line 1188 "xmlrole.c"
        __label__ = 10; break; //@line 1188 "xmlrole.c"
      case 10: // $bb9
        HEAP[$0]=47; //@line 1190 "xmlrole.c"
        __label__ = 17; break; //@line 1190 "xmlrole.c"
      case 11: // $bb10
        var $44=HEAP[$state_addr]; //@line 1192 "xmlrole.c"
        var $45=(($44+4)&4294967295); //@line 1192 "xmlrole.c"
        var $46=HEAP[$45]; //@line 1192 "xmlrole.c"
        var $47=((($46) - 1)&4294967295); //@line 1192 "xmlrole.c"
        var $48=HEAP[$state_addr]; //@line 1192 "xmlrole.c"
        var $49=(($48+4)&4294967295); //@line 1192 "xmlrole.c"
        HEAP[$49]=$47; //@line 1192 "xmlrole.c"
        var $50=HEAP[$state_addr]; //@line 1193 "xmlrole.c"
        var $51=(($50+4)&4294967295); //@line 1193 "xmlrole.c"
        var $52=HEAP[$51]; //@line 1193 "xmlrole.c"
        var $53=((($52))|0)==0; //@line 1193 "xmlrole.c"
        if ($53) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1193 "xmlrole.c"
      case 12: // $bb11
        var $54=HEAP[$state_addr]; //@line 1194 "xmlrole.c"
        var $55=(($54)&4294967295); //@line 1194 "xmlrole.c"
        HEAP[$55]=(FUNCTION_TABLE_OFFSET + 108); //@line 1194 "xmlrole.c"
        var $56=HEAP[$state_addr]; //@line 1195 "xmlrole.c"
        var $57=(($56+8)&4294967295); //@line 1195 "xmlrole.c"
        HEAP[$57]=39; //@line 1195 "xmlrole.c"
        __label__ = 13; break; //@line 1195 "xmlrole.c"
      case 13: // $bb12
        HEAP[$0]=48; //@line 1197 "xmlrole.c"
        __label__ = 17; break; //@line 1197 "xmlrole.c"
      case 14: // $bb13
        var $58=HEAP[$state_addr]; //@line 1199 "xmlrole.c"
        var $59=(($58)&4294967295); //@line 1199 "xmlrole.c"
        HEAP[$59]=(FUNCTION_TABLE_OFFSET + 152); //@line 1199 "xmlrole.c"
        HEAP[$0]=50; //@line 1200 "xmlrole.c"
        __label__ = 17; break; //@line 1200 "xmlrole.c"
      case 15: // $bb14
        var $60=HEAP[$state_addr]; //@line 1202 "xmlrole.c"
        var $61=(($60)&4294967295); //@line 1202 "xmlrole.c"
        HEAP[$61]=(FUNCTION_TABLE_OFFSET + 152); //@line 1202 "xmlrole.c"
        HEAP[$0]=49; //@line 1203 "xmlrole.c"
        __label__ = 17; break; //@line 1203 "xmlrole.c"
      case 16: // $bb15
        var $62=HEAP[$state_addr]; //@line 1205 "xmlrole.c"
        var $63=HEAP[$tok_addr]; //@line 1205 "xmlrole.c"
        var $64=_common($62, $63); //@line 1205 "xmlrole.c"
        HEAP[$0]=$64; //@line 1205 "xmlrole.c"
        __label__ = 17; break; //@line 1205 "xmlrole.c"
      case 17: // $bb16
        var $65=HEAP[$0]; //@line 1169 "xmlrole.c"
        HEAP[$retval]=$65; //@line 1169 "xmlrole.c"
        __label__ = 18; break; //@line 1169 "xmlrole.c"
      case 18: // $return
        var $retval17=HEAP[$retval]; //@line 1169 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval17; //@line 1169 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _declClose($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        var $1=HEAP[$tok_addr]; //@line 1278 "xmlrole.c"
        if ($1 == 15) {
          __label__ = 1; break;
        }
        else if ($1 == 17) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 1: // $bb
        var $2=HEAP[$state_addr]; //@line 1280 "xmlrole.c"
        var $3=(($2+8)&4294967295); //@line 1280 "xmlrole.c"
        var $4=HEAP[$3]; //@line 1280 "xmlrole.c"
        HEAP[$0]=$4; //@line 1280 "xmlrole.c"
        __label__ = 4; break; //@line 1280 "xmlrole.c"
      case 2: // $bb1
        var $5=HEAP[$state_addr]; //@line 1282 "xmlrole.c"
        var $6=(($5)&4294967295); //@line 1282 "xmlrole.c"
        HEAP[$6]=(FUNCTION_TABLE_OFFSET + 78); //@line 1282 "xmlrole.c"
        var $7=HEAP[$state_addr]; //@line 1283 "xmlrole.c"
        var $8=(($7+8)&4294967295); //@line 1283 "xmlrole.c"
        var $9=HEAP[$8]; //@line 1283 "xmlrole.c"
        HEAP[$0]=$9; //@line 1283 "xmlrole.c"
        __label__ = 4; break; //@line 1283 "xmlrole.c"
      case 3: // $bb2
        var $10=HEAP[$state_addr]; //@line 1285 "xmlrole.c"
        var $11=HEAP[$tok_addr]; //@line 1285 "xmlrole.c"
        var $12=_common($10, $11); //@line 1285 "xmlrole.c"
        HEAP[$0]=$12; //@line 1285 "xmlrole.c"
        __label__ = 4; break; //@line 1285 "xmlrole.c"
      case 4: // $bb3
        var $13=HEAP[$0]; //@line 1280 "xmlrole.c"
        HEAP[$retval]=$13; //@line 1280 "xmlrole.c"
        __label__ = 5; break; //@line 1280 "xmlrole.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 1280 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 1280 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _error($state, $tok, $ptr, $end, $enc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $enc_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$enc_addr]=$enc;
        HEAP[$0]=0; //@line 1295 "xmlrole.c"
        var $1=HEAP[$0]; //@line 1295 "xmlrole.c"
        HEAP[$retval]=$1; //@line 1295 "xmlrole.c"
        __label__ = 1; break; //@line 1295 "xmlrole.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 1295 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 1295 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _common($state, $tok) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $tok_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        HEAP[$tok_addr]=$tok;
        var $1=HEAP[$state_addr]; //@line 1305 "xmlrole.c"
        var $2=(($1)&4294967295); //@line 1305 "xmlrole.c"
        HEAP[$2]=(FUNCTION_TABLE_OFFSET + 74); //@line 1305 "xmlrole.c"
        HEAP[$0]=-1; //@line 1306 "xmlrole.c"
        var $3=HEAP[$0]; //@line 1306 "xmlrole.c"
        HEAP[$retval]=$3; //@line 1306 "xmlrole.c"
        __label__ = 1; break; //@line 1306 "xmlrole.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 1306 "xmlrole.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 1306 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XmlPrologStateInit($state) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $state_addr=__stackBase__;
        var $_alloca_point_=0;
        HEAP[$state_addr]=$state;
        var $0=HEAP[$state_addr]; //@line 1312 "xmlrole.c"
        var $1=(($0)&4294967295); //@line 1312 "xmlrole.c"
        HEAP[$1]=(FUNCTION_TABLE_OFFSET + 160); //@line 1312 "xmlrole.c"
        __label__ = 1; break; //@line 1318 "xmlrole.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1318 "xmlrole.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _isNever($enc, $p) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $p_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$p_addr]=$p;
        HEAP[$0]=0; //@line 125 "xmltok.c"
        var $1=HEAP[$0]; //@line 125 "xmltok.c"
        HEAP[$retval]=$1; //@line 125 "xmltok.c"
        __label__ = 1; break; //@line 125 "xmltok.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 125 "xmltok.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 125 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _utf8_isName2($enc, $p) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $p_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$p_addr]=$p;
        var $1=HEAP[$p_addr]; //@line 131 "xmltok.c"
        var $2=(($1)&4294967295); //@line 131 "xmltok.c"
        var $3=HEAP[$2]; //@line 131 "xmltok.c"
        var $4=unSign(($3), 8, 0) >>> 2; //@line 131 "xmltok.c"
        var $5=unSign(($4), 8, 0); //@line 131 "xmltok.c"
        var $6=($5) & 7; //@line 131 "xmltok.c"
        var $7=((_namePages+$6)&4294967295); //@line 131 "xmltok.c"
        var $8=HEAP[$7]; //@line 131 "xmltok.c"
        var $9=unSign(($8), 8, 0); //@line 131 "xmltok.c"
        var $10=($9) << 3; //@line 131 "xmltok.c"
        var $11=HEAP[$p_addr]; //@line 131 "xmltok.c"
        var $12=(($11)&4294967295); //@line 131 "xmltok.c"
        var $13=HEAP[$12]; //@line 131 "xmltok.c"
        var $14=unSign(($13), 8, 0); //@line 131 "xmltok.c"
        var $15=($14) & 3; //@line 131 "xmltok.c"
        var $16=($15) << 1; //@line 131 "xmltok.c"
        var $17=((($10) + ($16))&4294967295); //@line 131 "xmltok.c"
        var $18=HEAP[$p_addr]; //@line 131 "xmltok.c"
        var $19=(($18+1)&4294967295); //@line 131 "xmltok.c"
        var $20=HEAP[$19]; //@line 131 "xmltok.c"
        var $21=unSign(($20), 8, 0) >>> 5; //@line 131 "xmltok.c"
        var $22=unSign(($21), 8, 0); //@line 131 "xmltok.c"
        var $23=($22) & 1; //@line 131 "xmltok.c"
        var $24=((($17) + ($23))&4294967295); //@line 131 "xmltok.c"
        var $25=((_namingBitmap+$24*4)&4294967295); //@line 131 "xmltok.c"
        var $26=HEAP[$25]; //@line 131 "xmltok.c"
        var $27=HEAP[$p_addr]; //@line 131 "xmltok.c"
        var $28=(($27+1)&4294967295); //@line 131 "xmltok.c"
        var $29=HEAP[$28]; //@line 131 "xmltok.c"
        var $30=unSign(($29), 8, 0); //@line 131 "xmltok.c"
        var $31=($30) & 31; //@line 131 "xmltok.c"
        var $32=1 << ($31); //@line 131 "xmltok.c"
        var $33=($26) & ($32); //@line 131 "xmltok.c"
        HEAP[$0]=$33; //@line 131 "xmltok.c"
        var $34=HEAP[$0]; //@line 131 "xmltok.c"
        HEAP[$retval]=$34; //@line 131 "xmltok.c"
        __label__ = 1; break; //@line 131 "xmltok.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 131 "xmltok.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 131 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _utf8_isName3($enc, $p) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $p_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$p_addr]=$p;
        var $1=HEAP[$p_addr]; //@line 137 "xmltok.c"
        var $2=(($1)&4294967295); //@line 137 "xmltok.c"
        var $3=HEAP[$2]; //@line 137 "xmltok.c"
        var $4=unSign(($3), 8, 0); //@line 137 "xmltok.c"
        var $5=($4) & 15; //@line 137 "xmltok.c"
        var $6=($5) << 4; //@line 137 "xmltok.c"
        var $7=HEAP[$p_addr]; //@line 137 "xmltok.c"
        var $8=(($7+1)&4294967295); //@line 137 "xmltok.c"
        var $9=HEAP[$8]; //@line 137 "xmltok.c"
        var $10=unSign(($9), 8, 0) >>> 2; //@line 137 "xmltok.c"
        var $11=unSign(($10), 8, 0); //@line 137 "xmltok.c"
        var $12=($11) & 15; //@line 137 "xmltok.c"
        var $13=((($6) + ($12))&4294967295); //@line 137 "xmltok.c"
        var $14=((_namePages+$13)&4294967295); //@line 137 "xmltok.c"
        var $15=HEAP[$14]; //@line 137 "xmltok.c"
        var $16=unSign(($15), 8, 0); //@line 137 "xmltok.c"
        var $17=($16) << 3; //@line 137 "xmltok.c"
        var $18=HEAP[$p_addr]; //@line 137 "xmltok.c"
        var $19=(($18+1)&4294967295); //@line 137 "xmltok.c"
        var $20=HEAP[$19]; //@line 137 "xmltok.c"
        var $21=unSign(($20), 8, 0); //@line 137 "xmltok.c"
        var $22=($21) & 3; //@line 137 "xmltok.c"
        var $23=($22) << 1; //@line 137 "xmltok.c"
        var $24=((($17) + ($23))&4294967295); //@line 137 "xmltok.c"
        var $25=HEAP[$p_addr]; //@line 137 "xmltok.c"
        var $26=(($25+2)&4294967295); //@line 137 "xmltok.c"
        var $27=HEAP[$26]; //@line 137 "xmltok.c"
        var $28=unSign(($27), 8, 0) >>> 5; //@line 137 "xmltok.c"
        var $29=unSign(($28), 8, 0); //@line 137 "xmltok.c"
        var $30=($29) & 1; //@line 137 "xmltok.c"
        var $31=((($24) + ($30))&4294967295); //@line 137 "xmltok.c"
        var $32=((_namingBitmap+$31*4)&4294967295); //@line 137 "xmltok.c"
        var $33=HEAP[$32]; //@line 137 "xmltok.c"
        var $34=HEAP[$p_addr]; //@line 137 "xmltok.c"
        var $35=(($34+2)&4294967295); //@line 137 "xmltok.c"
        var $36=HEAP[$35]; //@line 137 "xmltok.c"
        var $37=unSign(($36), 8, 0); //@line 137 "xmltok.c"
        var $38=($37) & 31; //@line 137 "xmltok.c"
        var $39=1 << ($38); //@line 137 "xmltok.c"
        var $40=($33) & ($39); //@line 137 "xmltok.c"
        HEAP[$0]=$40; //@line 137 "xmltok.c"
        var $41=HEAP[$0]; //@line 137 "xmltok.c"
        HEAP[$retval]=$41; //@line 137 "xmltok.c"
        __label__ = 1; break; //@line 137 "xmltok.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 137 "xmltok.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 137 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _utf8_isNmstrt2($enc, $p) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $p_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$p_addr]=$p;
        var $1=HEAP[$p_addr]; //@line 145 "xmltok.c"
        var $2=(($1)&4294967295); //@line 145 "xmltok.c"
        var $3=HEAP[$2]; //@line 145 "xmltok.c"
        var $4=unSign(($3), 8, 0) >>> 2; //@line 145 "xmltok.c"
        var $5=unSign(($4), 8, 0); //@line 145 "xmltok.c"
        var $6=($5) & 7; //@line 145 "xmltok.c"
        var $7=((_nmstrtPages+$6)&4294967295); //@line 145 "xmltok.c"
        var $8=HEAP[$7]; //@line 145 "xmltok.c"
        var $9=unSign(($8), 8, 0); //@line 145 "xmltok.c"
        var $10=($9) << 3; //@line 145 "xmltok.c"
        var $11=HEAP[$p_addr]; //@line 145 "xmltok.c"
        var $12=(($11)&4294967295); //@line 145 "xmltok.c"
        var $13=HEAP[$12]; //@line 145 "xmltok.c"
        var $14=unSign(($13), 8, 0); //@line 145 "xmltok.c"
        var $15=($14) & 3; //@line 145 "xmltok.c"
        var $16=($15) << 1; //@line 145 "xmltok.c"
        var $17=((($10) + ($16))&4294967295); //@line 145 "xmltok.c"
        var $18=HEAP[$p_addr]; //@line 145 "xmltok.c"
        var $19=(($18+1)&4294967295); //@line 145 "xmltok.c"
        var $20=HEAP[$19]; //@line 145 "xmltok.c"
        var $21=unSign(($20), 8, 0) >>> 5; //@line 145 "xmltok.c"
        var $22=unSign(($21), 8, 0); //@line 145 "xmltok.c"
        var $23=($22) & 1; //@line 145 "xmltok.c"
        var $24=((($17) + ($23))&4294967295); //@line 145 "xmltok.c"
        var $25=((_namingBitmap+$24*4)&4294967295); //@line 145 "xmltok.c"
        var $26=HEAP[$25]; //@line 145 "xmltok.c"
        var $27=HEAP[$p_addr]; //@line 145 "xmltok.c"
        var $28=(($27+1)&4294967295); //@line 145 "xmltok.c"
        var $29=HEAP[$28]; //@line 145 "xmltok.c"
        var $30=unSign(($29), 8, 0); //@line 145 "xmltok.c"
        var $31=($30) & 31; //@line 145 "xmltok.c"
        var $32=1 << ($31); //@line 145 "xmltok.c"
        var $33=($26) & ($32); //@line 145 "xmltok.c"
        HEAP[$0]=$33; //@line 145 "xmltok.c"
        var $34=HEAP[$0]; //@line 145 "xmltok.c"
        HEAP[$retval]=$34; //@line 145 "xmltok.c"
        __label__ = 1; break; //@line 145 "xmltok.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 145 "xmltok.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 145 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _utf8_isNmstrt3($enc, $p) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $p_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$p_addr]=$p;
        var $1=HEAP[$p_addr]; //@line 151 "xmltok.c"
        var $2=(($1)&4294967295); //@line 151 "xmltok.c"
        var $3=HEAP[$2]; //@line 151 "xmltok.c"
        var $4=unSign(($3), 8, 0); //@line 151 "xmltok.c"
        var $5=($4) & 15; //@line 151 "xmltok.c"
        var $6=($5) << 4; //@line 151 "xmltok.c"
        var $7=HEAP[$p_addr]; //@line 151 "xmltok.c"
        var $8=(($7+1)&4294967295); //@line 151 "xmltok.c"
        var $9=HEAP[$8]; //@line 151 "xmltok.c"
        var $10=unSign(($9), 8, 0) >>> 2; //@line 151 "xmltok.c"
        var $11=unSign(($10), 8, 0); //@line 151 "xmltok.c"
        var $12=($11) & 15; //@line 151 "xmltok.c"
        var $13=((($6) + ($12))&4294967295); //@line 151 "xmltok.c"
        var $14=((_nmstrtPages+$13)&4294967295); //@line 151 "xmltok.c"
        var $15=HEAP[$14]; //@line 151 "xmltok.c"
        var $16=unSign(($15), 8, 0); //@line 151 "xmltok.c"
        var $17=($16) << 3; //@line 151 "xmltok.c"
        var $18=HEAP[$p_addr]; //@line 151 "xmltok.c"
        var $19=(($18+1)&4294967295); //@line 151 "xmltok.c"
        var $20=HEAP[$19]; //@line 151 "xmltok.c"
        var $21=unSign(($20), 8, 0); //@line 151 "xmltok.c"
        var $22=($21) & 3; //@line 151 "xmltok.c"
        var $23=($22) << 1; //@line 151 "xmltok.c"
        var $24=((($17) + ($23))&4294967295); //@line 151 "xmltok.c"
        var $25=HEAP[$p_addr]; //@line 151 "xmltok.c"
        var $26=(($25+2)&4294967295); //@line 151 "xmltok.c"
        var $27=HEAP[$26]; //@line 151 "xmltok.c"
        var $28=unSign(($27), 8, 0) >>> 5; //@line 151 "xmltok.c"
        var $29=unSign(($28), 8, 0); //@line 151 "xmltok.c"
        var $30=($29) & 1; //@line 151 "xmltok.c"
        var $31=((($24) + ($30))&4294967295); //@line 151 "xmltok.c"
        var $32=((_namingBitmap+$31*4)&4294967295); //@line 151 "xmltok.c"
        var $33=HEAP[$32]; //@line 151 "xmltok.c"
        var $34=HEAP[$p_addr]; //@line 151 "xmltok.c"
        var $35=(($34+2)&4294967295); //@line 151 "xmltok.c"
        var $36=HEAP[$35]; //@line 151 "xmltok.c"
        var $37=unSign(($36), 8, 0); //@line 151 "xmltok.c"
        var $38=($37) & 31; //@line 151 "xmltok.c"
        var $39=1 << ($38); //@line 151 "xmltok.c"
        var $40=($33) & ($39); //@line 151 "xmltok.c"
        HEAP[$0]=$40; //@line 151 "xmltok.c"
        var $41=HEAP[$0]; //@line 151 "xmltok.c"
        HEAP[$retval]=$41; //@line 151 "xmltok.c"
        __label__ = 1; break; //@line 151 "xmltok.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 151 "xmltok.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 151 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _utf8_isInvalid2($enc, $p) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $p_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $iftmp_18=__stackBase__+12;
        var $0=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$p_addr]=$p;
        var $1=HEAP[$p_addr]; //@line 159 "xmltok.c"
        var $2=HEAP[$1]; //@line 159 "xmltok.c"
        var $3=unSign(($2), 8, 0) <= 193; //@line 159 "xmltok.c"
        if ($3) { __label__ = 3; break; } else { __label__ = 1; break; } //@line 159 "xmltok.c"
      case 1: // $bb
        var $4=HEAP[$p_addr]; //@line 159 "xmltok.c"
        var $5=(($4+1)&4294967295); //@line 159 "xmltok.c"
        var $6=HEAP[$5]; //@line 159 "xmltok.c"
        var $7=reSign(($6), 8, 0) >= 0; //@line 159 "xmltok.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 159 "xmltok.c"
      case 2: // $bb1
        var $8=HEAP[$p_addr]; //@line 159 "xmltok.c"
        var $9=(($8+1)&4294967295); //@line 159 "xmltok.c"
        var $10=HEAP[$9]; //@line 159 "xmltok.c"
        var $11=unSign(($10), 8, 0); //@line 159 "xmltok.c"
        var $12=($11) & 192; //@line 159 "xmltok.c"
        var $13=((($12))|0)==192; //@line 159 "xmltok.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 159 "xmltok.c"
      case 3: // $bb2
        HEAP[$iftmp_18]=1; //@line 159 "xmltok.c"
        __label__ = 5; break; //@line 159 "xmltok.c"
      case 4: // $bb3
        HEAP[$iftmp_18]=0; //@line 159 "xmltok.c"
        __label__ = 5; break; //@line 159 "xmltok.c"
      case 5: // $bb4
        var $14=HEAP[$iftmp_18]; //@line 159 "xmltok.c"
        HEAP[$0]=$14; //@line 159 "xmltok.c"
        var $15=HEAP[$0]; //@line 159 "xmltok.c"
        HEAP[$retval]=$15; //@line 159 "xmltok.c"
        __label__ = 6; break; //@line 159 "xmltok.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 159 "xmltok.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 159 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _utf8_isInvalid3($enc, $p) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $p_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $iftmp_32=__stackBase__+12;
        var $iftmp_29=__stackBase__+16;
        var $iftmp_22=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$p_addr]=$p;
        var $1=HEAP[$p_addr]; //@line 165 "xmltok.c"
        var $2=(($1+2)&4294967295); //@line 165 "xmltok.c"
        var $3=HEAP[$2]; //@line 165 "xmltok.c"
        var $4=reSign(($3), 8, 0) >= 0; //@line 165 "xmltok.c"
        if ($4) { __label__ = 19; break; } else { __label__ = 1; break; } //@line 165 "xmltok.c"
      case 1: // $bb
        var $5=HEAP[$p_addr]; //@line 165 "xmltok.c"
        var $6=HEAP[$5]; //@line 165 "xmltok.c"
        var $7=reSign(($6), 8, 0)!=-17; //@line 165 "xmltok.c"
        if ($7) { __label__ = 5; break; } else { __label__ = 2; break; } //@line 165 "xmltok.c"
      case 2: // $bb1
        var $8=HEAP[$p_addr]; //@line 165 "xmltok.c"
        var $9=(($8+1)&4294967295); //@line 165 "xmltok.c"
        var $10=HEAP[$9]; //@line 165 "xmltok.c"
        var $11=reSign(($10), 8, 0)!=-65; //@line 165 "xmltok.c"
        if ($11) { __label__ = 5; break; } else { __label__ = 3; break; } //@line 165 "xmltok.c"
      case 3: // $bb2
        var $12=HEAP[$p_addr]; //@line 165 "xmltok.c"
        var $13=(($12+2)&4294967295); //@line 165 "xmltok.c"
        var $14=HEAP[$13]; //@line 165 "xmltok.c"
        var $15=unSign(($14), 8, 0) > 189; //@line 165 "xmltok.c"
        if ($15) { __label__ = 19; break; } else { __label__ = 4; break; } //@line 165 "xmltok.c"
      case 4: // $bb3
        __label__ = 6; break; //@line 165 "xmltok.c"
      case 5: // $bb4
        var $16=HEAP[$p_addr]; //@line 165 "xmltok.c"
        var $17=(($16+2)&4294967295); //@line 165 "xmltok.c"
        var $18=HEAP[$17]; //@line 165 "xmltok.c"
        var $19=unSign(($18), 8, 0); //@line 165 "xmltok.c"
        var $20=($19) & 192; //@line 165 "xmltok.c"
        var $21=((($20))|0)==192; //@line 165 "xmltok.c"
        if ($21) { __label__ = 19; break; } else { __label__ = 6; break; } //@line 165 "xmltok.c"
      case 6: // $bb5
        var $22=HEAP[$p_addr]; //@line 165 "xmltok.c"
        var $23=HEAP[$22]; //@line 165 "xmltok.c"
        var $24=reSign(($23), 8, 0)==-32; //@line 165 "xmltok.c"
        if ($24) { __label__ = 7; break; } else { __label__ = 12; break; } //@line 165 "xmltok.c"
      case 7: // $bb6
        var $25=HEAP[$p_addr]; //@line 165 "xmltok.c"
        var $26=(($25+1)&4294967295); //@line 165 "xmltok.c"
        var $27=HEAP[$26]; //@line 165 "xmltok.c"
        var $28=unSign(($27), 8, 0) <= 159; //@line 165 "xmltok.c"
        if ($28) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 165 "xmltok.c"
      case 8: // $bb7
        var $29=HEAP[$p_addr]; //@line 165 "xmltok.c"
        var $30=(($29+1)&4294967295); //@line 165 "xmltok.c"
        var $31=HEAP[$30]; //@line 165 "xmltok.c"
        var $32=unSign(($31), 8, 0); //@line 165 "xmltok.c"
        var $33=($32) & 192; //@line 165 "xmltok.c"
        var $34=((($33))|0)==192; //@line 165 "xmltok.c"
        if ($34) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 165 "xmltok.c"
      case 9: // $bb8
        HEAP[$iftmp_29]=1; //@line 165 "xmltok.c"
        __label__ = 11; break; //@line 165 "xmltok.c"
      case 10: // $bb9
        HEAP[$iftmp_29]=0; //@line 165 "xmltok.c"
        __label__ = 11; break; //@line 165 "xmltok.c"
      case 11: // $bb10
        var $35=HEAP[$iftmp_29]; //@line 165 "xmltok.c"
        var $36=((($35)) & 255); //@line 165 "xmltok.c"
        var $toBool=reSign(($36), 8, 0)!=0; //@line 165 "xmltok.c"
        if ($toBool) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 165 "xmltok.c"
      case 12: // $bb11
        var $37=HEAP[$p_addr]; //@line 165 "xmltok.c"
        var $38=(($37+1)&4294967295); //@line 165 "xmltok.c"
        var $39=HEAP[$38]; //@line 165 "xmltok.c"
        var $40=reSign(($39), 8, 0) >= 0; //@line 165 "xmltok.c"
        if ($40) { __label__ = 16; break; } else { __label__ = 13; break; } //@line 165 "xmltok.c"
      case 13: // $bb12
        var $41=HEAP[$p_addr]; //@line 165 "xmltok.c"
        var $42=HEAP[$41]; //@line 165 "xmltok.c"
        var $43=reSign(($42), 8, 0)==-19; //@line 165 "xmltok.c"
        if ($43) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 165 "xmltok.c"
      case 14: // $bb13
        var $44=HEAP[$p_addr]; //@line 165 "xmltok.c"
        var $45=(($44+1)&4294967295); //@line 165 "xmltok.c"
        var $46=HEAP[$45]; //@line 165 "xmltok.c"
        var $47=unSign(($46), 8, 0) > 159; //@line 165 "xmltok.c"
        if ($47) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 165 "xmltok.c"
      case 15: // $bb14
        var $48=HEAP[$p_addr]; //@line 165 "xmltok.c"
        var $49=(($48+1)&4294967295); //@line 165 "xmltok.c"
        var $50=HEAP[$49]; //@line 165 "xmltok.c"
        var $51=unSign(($50), 8, 0); //@line 165 "xmltok.c"
        var $52=($51) & 192; //@line 165 "xmltok.c"
        var $53=((($52))|0)==192; //@line 165 "xmltok.c"
        if ($53) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 165 "xmltok.c"
      case 16: // $bb15
        HEAP[$iftmp_32]=1; //@line 165 "xmltok.c"
        __label__ = 18; break; //@line 165 "xmltok.c"
      case 17: // $bb16
        HEAP[$iftmp_32]=0; //@line 165 "xmltok.c"
        __label__ = 18; break; //@line 165 "xmltok.c"
      case 18: // $bb17
        var $54=HEAP[$iftmp_32]; //@line 165 "xmltok.c"
        var $55=((($54)) & 255); //@line 165 "xmltok.c"
        var $toBool18=reSign(($55), 8, 0)!=0; //@line 165 "xmltok.c"
        if ($toBool18) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 165 "xmltok.c"
      case 19: // $bb19
        HEAP[$iftmp_22]=1; //@line 165 "xmltok.c"
        __label__ = 21; break; //@line 165 "xmltok.c"
      case 20: // $bb20
        HEAP[$iftmp_22]=0; //@line 165 "xmltok.c"
        __label__ = 21; break; //@line 165 "xmltok.c"
      case 21: // $bb21
        var $56=HEAP[$iftmp_22]; //@line 165 "xmltok.c"
        HEAP[$0]=$56; //@line 165 "xmltok.c"
        var $57=HEAP[$0]; //@line 165 "xmltok.c"
        HEAP[$retval]=$57; //@line 165 "xmltok.c"
        __label__ = 22; break; //@line 165 "xmltok.c"
      case 22: // $return
        var $retval22=HEAP[$retval]; //@line 165 "xmltok.c"
        STACKTOP = __stackBase__;
        return $retval22; //@line 165 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _utf8_isInvalid4($enc, $p) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $p_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $iftmp_46=__stackBase__+12;
        var $iftmp_43=__stackBase__+16;
        var $iftmp_37=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$p_addr]=$p;
        var $1=HEAP[$p_addr]; //@line 171 "xmltok.c"
        var $2=(($1+3)&4294967295); //@line 171 "xmltok.c"
        var $3=HEAP[$2]; //@line 171 "xmltok.c"
        var $4=reSign(($3), 8, 0) >= 0; //@line 171 "xmltok.c"
        if ($4) { __label__ = 17; break; } else { __label__ = 1; break; } //@line 171 "xmltok.c"
      case 1: // $bb
        var $5=HEAP[$p_addr]; //@line 171 "xmltok.c"
        var $6=(($5+3)&4294967295); //@line 171 "xmltok.c"
        var $7=HEAP[$6]; //@line 171 "xmltok.c"
        var $8=unSign(($7), 8, 0); //@line 171 "xmltok.c"
        var $9=($8) & 192; //@line 171 "xmltok.c"
        var $10=((($9))|0)==192; //@line 171 "xmltok.c"
        if ($10) { __label__ = 17; break; } else { __label__ = 2; break; } //@line 171 "xmltok.c"
      case 2: // $bb1
        var $11=HEAP[$p_addr]; //@line 171 "xmltok.c"
        var $12=(($11+2)&4294967295); //@line 171 "xmltok.c"
        var $13=HEAP[$12]; //@line 171 "xmltok.c"
        var $14=reSign(($13), 8, 0) >= 0; //@line 171 "xmltok.c"
        if ($14) { __label__ = 17; break; } else { __label__ = 3; break; } //@line 171 "xmltok.c"
      case 3: // $bb2
        var $15=HEAP[$p_addr]; //@line 171 "xmltok.c"
        var $16=(($15+2)&4294967295); //@line 171 "xmltok.c"
        var $17=HEAP[$16]; //@line 171 "xmltok.c"
        var $18=unSign(($17), 8, 0); //@line 171 "xmltok.c"
        var $19=($18) & 192; //@line 171 "xmltok.c"
        var $20=((($19))|0)==192; //@line 171 "xmltok.c"
        if ($20) { __label__ = 17; break; } else { __label__ = 4; break; } //@line 171 "xmltok.c"
      case 4: // $bb3
        var $21=HEAP[$p_addr]; //@line 171 "xmltok.c"
        var $22=HEAP[$21]; //@line 171 "xmltok.c"
        var $23=reSign(($22), 8, 0)==-16; //@line 171 "xmltok.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 10; break; } //@line 171 "xmltok.c"
      case 5: // $bb4
        var $24=HEAP[$p_addr]; //@line 171 "xmltok.c"
        var $25=(($24+1)&4294967295); //@line 171 "xmltok.c"
        var $26=HEAP[$25]; //@line 171 "xmltok.c"
        var $27=unSign(($26), 8, 0) <= 143; //@line 171 "xmltok.c"
        if ($27) { __label__ = 7; break; } else { __label__ = 6; break; } //@line 171 "xmltok.c"
      case 6: // $bb5
        var $28=HEAP[$p_addr]; //@line 171 "xmltok.c"
        var $29=(($28+1)&4294967295); //@line 171 "xmltok.c"
        var $30=HEAP[$29]; //@line 171 "xmltok.c"
        var $31=unSign(($30), 8, 0); //@line 171 "xmltok.c"
        var $32=($31) & 192; //@line 171 "xmltok.c"
        var $33=((($32))|0)==192; //@line 171 "xmltok.c"
        if ($33) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 171 "xmltok.c"
      case 7: // $bb6
        HEAP[$iftmp_43]=1; //@line 171 "xmltok.c"
        __label__ = 9; break; //@line 171 "xmltok.c"
      case 8: // $bb7
        HEAP[$iftmp_43]=0; //@line 171 "xmltok.c"
        __label__ = 9; break; //@line 171 "xmltok.c"
      case 9: // $bb8
        var $34=HEAP[$iftmp_43]; //@line 171 "xmltok.c"
        var $35=((($34)) & 255); //@line 171 "xmltok.c"
        var $toBool=reSign(($35), 8, 0)!=0; //@line 171 "xmltok.c"
        if ($toBool) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 171 "xmltok.c"
      case 10: // $bb9
        var $36=HEAP[$p_addr]; //@line 171 "xmltok.c"
        var $37=(($36+1)&4294967295); //@line 171 "xmltok.c"
        var $38=HEAP[$37]; //@line 171 "xmltok.c"
        var $39=reSign(($38), 8, 0) >= 0; //@line 171 "xmltok.c"
        if ($39) { __label__ = 14; break; } else { __label__ = 11; break; } //@line 171 "xmltok.c"
      case 11: // $bb10
        var $40=HEAP[$p_addr]; //@line 171 "xmltok.c"
        var $41=HEAP[$40]; //@line 171 "xmltok.c"
        var $42=reSign(($41), 8, 0)==-12; //@line 171 "xmltok.c"
        if ($42) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 171 "xmltok.c"
      case 12: // $bb11
        var $43=HEAP[$p_addr]; //@line 171 "xmltok.c"
        var $44=(($43+1)&4294967295); //@line 171 "xmltok.c"
        var $45=HEAP[$44]; //@line 171 "xmltok.c"
        var $46=unSign(($45), 8, 0) > 143; //@line 171 "xmltok.c"
        if ($46) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 171 "xmltok.c"
      case 13: // $bb12
        var $47=HEAP[$p_addr]; //@line 171 "xmltok.c"
        var $48=(($47+1)&4294967295); //@line 171 "xmltok.c"
        var $49=HEAP[$48]; //@line 171 "xmltok.c"
        var $50=unSign(($49), 8, 0); //@line 171 "xmltok.c"
        var $51=($50) & 192; //@line 171 "xmltok.c"
        var $52=((($51))|0)==192; //@line 171 "xmltok.c"
        if ($52) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 171 "xmltok.c"
      case 14: // $bb13
        HEAP[$iftmp_46]=1; //@line 171 "xmltok.c"
        __label__ = 16; break; //@line 171 "xmltok.c"
      case 15: // $bb14
        HEAP[$iftmp_46]=0; //@line 171 "xmltok.c"
        __label__ = 16; break; //@line 171 "xmltok.c"
      case 16: // $bb15
        var $53=HEAP[$iftmp_46]; //@line 171 "xmltok.c"
        var $54=((($53)) & 255); //@line 171 "xmltok.c"
        var $toBool16=reSign(($54), 8, 0)!=0; //@line 171 "xmltok.c"
        if ($toBool16) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 171 "xmltok.c"
      case 17: // $bb17
        HEAP[$iftmp_37]=1; //@line 171 "xmltok.c"
        __label__ = 19; break; //@line 171 "xmltok.c"
      case 18: // $bb18
        HEAP[$iftmp_37]=0; //@line 171 "xmltok.c"
        __label__ = 19; break; //@line 171 "xmltok.c"
      case 19: // $bb19
        var $55=HEAP[$iftmp_37]; //@line 171 "xmltok.c"
        HEAP[$0]=$55; //@line 171 "xmltok.c"
        var $56=HEAP[$0]; //@line 171 "xmltok.c"
        HEAP[$retval]=$56; //@line 171 "xmltok.c"
        __label__ = 20; break; //@line 171 "xmltok.c"
      case 20: // $return
        var $retval20=HEAP[$retval]; //@line 171 "xmltok.c"
        STACKTOP = __stackBase__;
        return $retval20; //@line 171 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_scanComment($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 93 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 93 "xmltok_impl.c"
        var $3=($1)!=($2); //@line 93 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 32; break; } //@line 93 "xmltok_impl.c"
      case 1: // $bb
        var $4=HEAP[$ptr_addr]; //@line 94 "xmltok_impl.c"
        var $5=HEAP[$4]; //@line 94 "xmltok_impl.c"
        var $6=reSign(($5), 8, 0)!=45; //@line 94 "xmltok_impl.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 94 "xmltok_impl.c"
      case 2: // $bb1
        var $7=HEAP[$nextTokPtr_addr]; //@line 95 "xmltok_impl.c"
        var $8=HEAP[$ptr_addr]; //@line 95 "xmltok_impl.c"
        HEAP[$7]=$8; //@line 95 "xmltok_impl.c"
        HEAP[$0]=0; //@line 96 "xmltok_impl.c"
        __label__ = 33; break; //@line 96 "xmltok_impl.c"
      case 3: // $bb2
        var $9=HEAP[$ptr_addr]; //@line 98 "xmltok_impl.c"
        var $10=(($9+1)&4294967295); //@line 98 "xmltok_impl.c"
        HEAP[$ptr_addr]=$10; //@line 98 "xmltok_impl.c"
        __label__ = 31; break; //@line 98 "xmltok_impl.c"
      case 4: // $bb3
        var $11=HEAP[$enc_addr]; //@line 100 "xmltok_impl.c"
        var $12=$11; //@line 100 "xmltok_impl.c"
        var $13=HEAP[$ptr_addr]; //@line 100 "xmltok_impl.c"
        var $14=HEAP[$13]; //@line 100 "xmltok_impl.c"
        var $15=unSign(($14), 8, 0); //@line 100 "xmltok_impl.c"
        var $16=(($12+72)&4294967295); //@line 100 "xmltok_impl.c"
        var $17=(($16+$15)&4294967295); //@line 100 "xmltok_impl.c"
        var $18=HEAP[$17]; //@line 100 "xmltok_impl.c"
        var $19=unSign(($18), 8, 0); //@line 100 "xmltok_impl.c"
        if ($19 == 0) {
          __label__ = 20; break;
        }
        else if ($19 == 1) {
          __label__ = 20; break;
        }
        else if ($19 == 5) {
          __label__ = 5; break;
        }
        else if ($19 == 6) {
          __label__ = 10; break;
        }
        else if ($19 == 7) {
          __label__ = 15; break;
        }
        else if ($19 == 8) {
          __label__ = 20; break;
        }
        else if ($19 == 27) {
          __label__ = 21; break;
        }
        else {
        __label__ = 30; break;
        }
        
      case 5: // $bb4
        var $20=HEAP[$end_addr]; //@line 101 "xmltok_impl.c"
        var $21=($20); //@line 101 "xmltok_impl.c"
        var $22=HEAP[$ptr_addr]; //@line 101 "xmltok_impl.c"
        var $23=($22); //@line 101 "xmltok_impl.c"
        var $24=((($21) - ($23))&4294967295); //@line 101 "xmltok_impl.c"
        var $25=((($24))|0) <= 1; //@line 101 "xmltok_impl.c"
        if ($25) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 101 "xmltok_impl.c"
      case 6: // $bb5
        HEAP[$0]=-2; //@line 101 "xmltok_impl.c"
        __label__ = 33; break; //@line 101 "xmltok_impl.c"
      case 7: // $bb6
        var $26=HEAP[$enc_addr]; //@line 101 "xmltok_impl.c"
        var $27=$26; //@line 101 "xmltok_impl.c"
        var $28=(($27+352)&4294967295); //@line 101 "xmltok_impl.c"
        var $29=HEAP[$28]; //@line 101 "xmltok_impl.c"
        var $30=HEAP[$enc_addr]; //@line 101 "xmltok_impl.c"
        var $31=HEAP[$ptr_addr]; //@line 101 "xmltok_impl.c"
        var $32=FUNCTION_TABLE[$29]($30, $31); //@line 101 "xmltok_impl.c"
        var $33=((($32))|0)!=0; //@line 101 "xmltok_impl.c"
        if ($33) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 101 "xmltok_impl.c"
      case 8: // $bb7
        var $34=HEAP[$nextTokPtr_addr]; //@line 101 "xmltok_impl.c"
        var $35=HEAP[$ptr_addr]; //@line 101 "xmltok_impl.c"
        HEAP[$34]=$35; //@line 101 "xmltok_impl.c"
        HEAP[$0]=0; //@line 101 "xmltok_impl.c"
        __label__ = 33; break; //@line 101 "xmltok_impl.c"
      case 9: // $bb8
        var $36=HEAP[$ptr_addr]; //@line 101 "xmltok_impl.c"
        var $37=(($36+2)&4294967295); //@line 101 "xmltok_impl.c"
        HEAP[$ptr_addr]=$37; //@line 101 "xmltok_impl.c"
        __label__ = 31; break; //@line 101 "xmltok_impl.c"
      case 10: // $bb9
        var $38=HEAP[$end_addr]; //@line 101 "xmltok_impl.c"
        var $39=($38); //@line 101 "xmltok_impl.c"
        var $40=HEAP[$ptr_addr]; //@line 101 "xmltok_impl.c"
        var $41=($40); //@line 101 "xmltok_impl.c"
        var $42=((($39) - ($41))&4294967295); //@line 101 "xmltok_impl.c"
        var $43=((($42))|0) <= 2; //@line 101 "xmltok_impl.c"
        if ($43) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 101 "xmltok_impl.c"
      case 11: // $bb10
        HEAP[$0]=-2; //@line 101 "xmltok_impl.c"
        __label__ = 33; break; //@line 101 "xmltok_impl.c"
      case 12: // $bb11
        var $44=HEAP[$enc_addr]; //@line 101 "xmltok_impl.c"
        var $45=$44; //@line 101 "xmltok_impl.c"
        var $46=(($45+356)&4294967295); //@line 101 "xmltok_impl.c"
        var $47=HEAP[$46]; //@line 101 "xmltok_impl.c"
        var $48=HEAP[$enc_addr]; //@line 101 "xmltok_impl.c"
        var $49=HEAP[$ptr_addr]; //@line 101 "xmltok_impl.c"
        var $50=FUNCTION_TABLE[$47]($48, $49); //@line 101 "xmltok_impl.c"
        var $51=((($50))|0)!=0; //@line 101 "xmltok_impl.c"
        if ($51) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 101 "xmltok_impl.c"
      case 13: // $bb12
        var $52=HEAP[$nextTokPtr_addr]; //@line 101 "xmltok_impl.c"
        var $53=HEAP[$ptr_addr]; //@line 101 "xmltok_impl.c"
        HEAP[$52]=$53; //@line 101 "xmltok_impl.c"
        HEAP[$0]=0; //@line 101 "xmltok_impl.c"
        __label__ = 33; break; //@line 101 "xmltok_impl.c"
      case 14: // $bb13
        var $54=HEAP[$ptr_addr]; //@line 101 "xmltok_impl.c"
        var $55=(($54+3)&4294967295); //@line 101 "xmltok_impl.c"
        HEAP[$ptr_addr]=$55; //@line 101 "xmltok_impl.c"
        __label__ = 31; break; //@line 101 "xmltok_impl.c"
      case 15: // $bb14
        var $56=HEAP[$end_addr]; //@line 101 "xmltok_impl.c"
        var $57=($56); //@line 101 "xmltok_impl.c"
        var $58=HEAP[$ptr_addr]; //@line 101 "xmltok_impl.c"
        var $59=($58); //@line 101 "xmltok_impl.c"
        var $60=((($57) - ($59))&4294967295); //@line 101 "xmltok_impl.c"
        var $61=((($60))|0) <= 3; //@line 101 "xmltok_impl.c"
        if ($61) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 101 "xmltok_impl.c"
      case 16: // $bb15
        HEAP[$0]=-2; //@line 101 "xmltok_impl.c"
        __label__ = 33; break; //@line 101 "xmltok_impl.c"
      case 17: // $bb16
        var $62=HEAP[$enc_addr]; //@line 101 "xmltok_impl.c"
        var $63=$62; //@line 101 "xmltok_impl.c"
        var $64=(($63+360)&4294967295); //@line 101 "xmltok_impl.c"
        var $65=HEAP[$64]; //@line 101 "xmltok_impl.c"
        var $66=HEAP[$enc_addr]; //@line 101 "xmltok_impl.c"
        var $67=HEAP[$ptr_addr]; //@line 101 "xmltok_impl.c"
        var $68=FUNCTION_TABLE[$65]($66, $67); //@line 101 "xmltok_impl.c"
        var $69=((($68))|0)!=0; //@line 101 "xmltok_impl.c"
        if ($69) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 101 "xmltok_impl.c"
      case 18: // $bb17
        var $70=HEAP[$nextTokPtr_addr]; //@line 101 "xmltok_impl.c"
        var $71=HEAP[$ptr_addr]; //@line 101 "xmltok_impl.c"
        HEAP[$70]=$71; //@line 101 "xmltok_impl.c"
        HEAP[$0]=0; //@line 101 "xmltok_impl.c"
        __label__ = 33; break; //@line 101 "xmltok_impl.c"
      case 19: // $bb18
        var $72=HEAP[$ptr_addr]; //@line 101 "xmltok_impl.c"
        var $73=(($72+4)&4294967295); //@line 101 "xmltok_impl.c"
        HEAP[$ptr_addr]=$73; //@line 101 "xmltok_impl.c"
        __label__ = 31; break; //@line 101 "xmltok_impl.c"
      case 20: // $bb19
        var $74=HEAP[$nextTokPtr_addr]; //@line 101 "xmltok_impl.c"
        var $75=HEAP[$ptr_addr]; //@line 101 "xmltok_impl.c"
        HEAP[$74]=$75; //@line 101 "xmltok_impl.c"
        HEAP[$0]=0; //@line 101 "xmltok_impl.c"
        __label__ = 33; break; //@line 101 "xmltok_impl.c"
      case 21: // $bb20
        var $76=HEAP[$ptr_addr]; //@line 103 "xmltok_impl.c"
        var $77=(($76+1)&4294967295); //@line 103 "xmltok_impl.c"
        HEAP[$ptr_addr]=$77; //@line 103 "xmltok_impl.c"
        var $78=HEAP[$ptr_addr]; //@line 103 "xmltok_impl.c"
        var $79=HEAP[$end_addr]; //@line 103 "xmltok_impl.c"
        var $80=($78)==($79); //@line 103 "xmltok_impl.c"
        if ($80) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 103 "xmltok_impl.c"
      case 22: // $bb21
        HEAP[$0]=-1; //@line 104 "xmltok_impl.c"
        __label__ = 33; break; //@line 104 "xmltok_impl.c"
      case 23: // $bb22
        var $81=HEAP[$ptr_addr]; //@line 105 "xmltok_impl.c"
        var $82=HEAP[$81]; //@line 105 "xmltok_impl.c"
        var $83=reSign(($82), 8, 0)==45; //@line 105 "xmltok_impl.c"
        if ($83) { __label__ = 24; break; } else { __label__ = 29; break; } //@line 105 "xmltok_impl.c"
      case 24: // $bb23
        var $84=HEAP[$ptr_addr]; //@line 106 "xmltok_impl.c"
        var $85=(($84+1)&4294967295); //@line 106 "xmltok_impl.c"
        HEAP[$ptr_addr]=$85; //@line 106 "xmltok_impl.c"
        var $86=HEAP[$ptr_addr]; //@line 106 "xmltok_impl.c"
        var $87=HEAP[$end_addr]; //@line 106 "xmltok_impl.c"
        var $88=($86)==($87); //@line 106 "xmltok_impl.c"
        if ($88) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 106 "xmltok_impl.c"
      case 25: // $bb24
        HEAP[$0]=-1; //@line 107 "xmltok_impl.c"
        __label__ = 33; break; //@line 107 "xmltok_impl.c"
      case 26: // $bb25
        var $89=HEAP[$ptr_addr]; //@line 108 "xmltok_impl.c"
        var $90=HEAP[$89]; //@line 108 "xmltok_impl.c"
        var $91=reSign(($90), 8, 0)!=62; //@line 108 "xmltok_impl.c"
        if ($91) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 108 "xmltok_impl.c"
      case 27: // $bb26
        var $92=HEAP[$nextTokPtr_addr]; //@line 109 "xmltok_impl.c"
        var $93=HEAP[$ptr_addr]; //@line 109 "xmltok_impl.c"
        HEAP[$92]=$93; //@line 109 "xmltok_impl.c"
        HEAP[$0]=0; //@line 110 "xmltok_impl.c"
        __label__ = 33; break; //@line 110 "xmltok_impl.c"
      case 28: // $bb27
        var $94=HEAP[$ptr_addr]; //@line 112 "xmltok_impl.c"
        var $95=(($94+1)&4294967295); //@line 112 "xmltok_impl.c"
        var $96=HEAP[$nextTokPtr_addr]; //@line 112 "xmltok_impl.c"
        HEAP[$96]=$95; //@line 112 "xmltok_impl.c"
        HEAP[$0]=13; //@line 113 "xmltok_impl.c"
        __label__ = 33; break; //@line 113 "xmltok_impl.c"
      case 29: // $bb28
        __label__ = 31; break; //@line 113 "xmltok_impl.c"
      case 30: // $bb29
        var $97=HEAP[$ptr_addr]; //@line 117 "xmltok_impl.c"
        var $98=(($97+1)&4294967295); //@line 117 "xmltok_impl.c"
        HEAP[$ptr_addr]=$98; //@line 117 "xmltok_impl.c"
        __label__ = 31; break; //@line 117 "xmltok_impl.c"
      case 31: // $bb30
        var $99=HEAP[$ptr_addr]; //@line 99 "xmltok_impl.c"
        var $100=HEAP[$end_addr]; //@line 99 "xmltok_impl.c"
        var $101=($99)!=($100); //@line 99 "xmltok_impl.c"
        if ($101) { __label__ = 4; break; } else { __label__ = 32; break; } //@line 99 "xmltok_impl.c"
      case 32: // $bb31
        HEAP[$0]=-1; //@line 122 "xmltok_impl.c"
        __label__ = 33; break; //@line 122 "xmltok_impl.c"
      case 33: // $bb32
        var $102=HEAP[$0]; //@line 96 "xmltok_impl.c"
        HEAP[$retval]=$102; //@line 96 "xmltok_impl.c"
        __label__ = 34; break; //@line 96 "xmltok_impl.c"
      case 34: // $return
        var $retval33=HEAP[$retval]; //@line 96 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval33; //@line 96 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_scanDecl($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 131 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 131 "xmltok_impl.c"
        var $3=($1)==($2); //@line 131 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 131 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 132 "xmltok_impl.c"
        __label__ = 17; break; //@line 132 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$enc_addr]; //@line 133 "xmltok_impl.c"
        var $5=$4; //@line 133 "xmltok_impl.c"
        var $6=HEAP[$ptr_addr]; //@line 133 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 133 "xmltok_impl.c"
        var $8=unSign(($7), 8, 0); //@line 133 "xmltok_impl.c"
        var $9=(($5+72)&4294967295); //@line 133 "xmltok_impl.c"
        var $10=(($9+$8)&4294967295); //@line 133 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 133 "xmltok_impl.c"
        var $12=unSign(($11), 8, 0); //@line 133 "xmltok_impl.c"
        if ($12 == 20) {
          __label__ = 4; break;
        }
        else if ($12 == 22) {
          __label__ = 5; break;
        }
        else if ($12 == 24) {
          __label__ = 5; break;
        }
        else if ($12 == 27) {
          __label__ = 3; break;
        }
        else {
        __label__ = 6; break;
        }
        
      case 3: // $bb2
        var $13=HEAP[$ptr_addr]; //@line 135 "xmltok_impl.c"
        var $14=(($13+1)&4294967295); //@line 135 "xmltok_impl.c"
        var $15=HEAP[$enc_addr]; //@line 135 "xmltok_impl.c"
        var $16=HEAP[$end_addr]; //@line 135 "xmltok_impl.c"
        var $17=HEAP[$nextTokPtr_addr]; //@line 135 "xmltok_impl.c"
        var $18=_normal_scanComment($15, $14, $16, $17); //@line 135 "xmltok_impl.c"
        HEAP[$0]=$18; //@line 135 "xmltok_impl.c"
        __label__ = 17; break; //@line 135 "xmltok_impl.c"
      case 4: // $bb3
        var $19=HEAP[$ptr_addr]; //@line 137 "xmltok_impl.c"
        var $20=(($19+1)&4294967295); //@line 137 "xmltok_impl.c"
        var $21=HEAP[$nextTokPtr_addr]; //@line 137 "xmltok_impl.c"
        HEAP[$21]=$20; //@line 137 "xmltok_impl.c"
        HEAP[$0]=33; //@line 138 "xmltok_impl.c"
        __label__ = 17; break; //@line 138 "xmltok_impl.c"
      case 5: // $bb4
        var $22=HEAP[$ptr_addr]; //@line 141 "xmltok_impl.c"
        var $23=(($22+1)&4294967295); //@line 141 "xmltok_impl.c"
        HEAP[$ptr_addr]=$23; //@line 141 "xmltok_impl.c"
        __label__ = 15; break; //@line 141 "xmltok_impl.c"
      case 6: // $bb5
        var $24=HEAP[$nextTokPtr_addr]; //@line 144 "xmltok_impl.c"
        var $25=HEAP[$ptr_addr]; //@line 144 "xmltok_impl.c"
        HEAP[$24]=$25; //@line 144 "xmltok_impl.c"
        HEAP[$0]=0; //@line 145 "xmltok_impl.c"
        __label__ = 17; break; //@line 145 "xmltok_impl.c"
      case 7: // $bb6
        var $26=HEAP[$enc_addr]; //@line 148 "xmltok_impl.c"
        var $27=$26; //@line 148 "xmltok_impl.c"
        var $28=HEAP[$ptr_addr]; //@line 148 "xmltok_impl.c"
        var $29=HEAP[$28]; //@line 148 "xmltok_impl.c"
        var $30=unSign(($29), 8, 0); //@line 148 "xmltok_impl.c"
        var $31=(($27+72)&4294967295); //@line 148 "xmltok_impl.c"
        var $32=(($31+$30)&4294967295); //@line 148 "xmltok_impl.c"
        var $33=HEAP[$32]; //@line 148 "xmltok_impl.c"
        var $34=unSign(($33), 8, 0); //@line 148 "xmltok_impl.c"
        if ($34 == 9) {
          __label__ = 12; break;
        }
        else if ($34 == 10) {
          __label__ = 12; break;
        }
        else if ($34 == 21) {
          __label__ = 12; break;
        }
        else if ($34 == 22) {
          __label__ = 13; break;
        }
        else if ($34 == 24) {
          __label__ = 13; break;
        }
        else if ($34 == 30) {
          __label__ = 8; break;
        }
        else {
        __label__ = 14; break;
        }
        
      case 8: // $bb7
        var $35=HEAP[$ptr_addr]; //@line 150 "xmltok_impl.c"
        var $36=(($35+1)&4294967295); //@line 150 "xmltok_impl.c"
        var $37=HEAP[$end_addr]; //@line 150 "xmltok_impl.c"
        var $38=($36)==($37); //@line 150 "xmltok_impl.c"
        if ($38) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 150 "xmltok_impl.c"
      case 9: // $bb8
        HEAP[$0]=-1; //@line 151 "xmltok_impl.c"
        __label__ = 17; break; //@line 151 "xmltok_impl.c"
      case 10: // $bb9
        var $39=HEAP[$enc_addr]; //@line 153 "xmltok_impl.c"
        var $40=$39; //@line 153 "xmltok_impl.c"
        var $41=HEAP[$ptr_addr]; //@line 153 "xmltok_impl.c"
        var $42=(($41+1)&4294967295); //@line 153 "xmltok_impl.c"
        var $43=HEAP[$42]; //@line 153 "xmltok_impl.c"
        var $44=unSign(($43), 8, 0); //@line 153 "xmltok_impl.c"
        var $45=(($40+72)&4294967295); //@line 153 "xmltok_impl.c"
        var $46=(($45+$44)&4294967295); //@line 153 "xmltok_impl.c"
        var $47=HEAP[$46]; //@line 153 "xmltok_impl.c"
        var $48=unSign(($47), 8, 0); //@line 153 "xmltok_impl.c"
        if ($48 == 9) {
          __label__ = 11; break;
        }
        else if ($48 == 10) {
          __label__ = 11; break;
        }
        else if ($48 == 21) {
          __label__ = 11; break;
        }
        else if ($48 == 30) {
          __label__ = 11; break;
        }
        else {
        __label__ = 12; break;
        }
        
      case 11: // $bb10
        var $49=HEAP[$nextTokPtr_addr]; //@line 155 "xmltok_impl.c"
        var $50=HEAP[$ptr_addr]; //@line 155 "xmltok_impl.c"
        HEAP[$49]=$50; //@line 155 "xmltok_impl.c"
        HEAP[$0]=0; //@line 156 "xmltok_impl.c"
        __label__ = 17; break; //@line 156 "xmltok_impl.c"
      case 12: // $bb11
        var $51=HEAP[$nextTokPtr_addr]; //@line 160 "xmltok_impl.c"
        var $52=HEAP[$ptr_addr]; //@line 160 "xmltok_impl.c"
        HEAP[$51]=$52; //@line 160 "xmltok_impl.c"
        HEAP[$0]=16; //@line 161 "xmltok_impl.c"
        __label__ = 17; break; //@line 161 "xmltok_impl.c"
      case 13: // $bb12
        var $53=HEAP[$ptr_addr]; //@line 164 "xmltok_impl.c"
        var $54=(($53+1)&4294967295); //@line 164 "xmltok_impl.c"
        HEAP[$ptr_addr]=$54; //@line 164 "xmltok_impl.c"
        __label__ = 15; break; //@line 164 "xmltok_impl.c"
      case 14: // $bb13
        var $55=HEAP[$nextTokPtr_addr]; //@line 167 "xmltok_impl.c"
        var $56=HEAP[$ptr_addr]; //@line 167 "xmltok_impl.c"
        HEAP[$55]=$56; //@line 167 "xmltok_impl.c"
        HEAP[$0]=0; //@line 168 "xmltok_impl.c"
        __label__ = 17; break; //@line 168 "xmltok_impl.c"
      case 15: // $bb14
        var $57=HEAP[$ptr_addr]; //@line 147 "xmltok_impl.c"
        var $58=HEAP[$end_addr]; //@line 147 "xmltok_impl.c"
        var $59=($57)!=($58); //@line 147 "xmltok_impl.c"
        if ($59) { __label__ = 7; break; } else { __label__ = 16; break; } //@line 147 "xmltok_impl.c"
      case 16: // $bb15
        HEAP[$0]=-1; //@line 171 "xmltok_impl.c"
        __label__ = 17; break; //@line 171 "xmltok_impl.c"
      case 17: // $bb16
        var $60=HEAP[$0]; //@line 132 "xmltok_impl.c"
        HEAP[$retval]=$60; //@line 132 "xmltok_impl.c"
        __label__ = 18; break; //@line 132 "xmltok_impl.c"
      case 18: // $return
        var $retval17=HEAP[$retval]; //@line 132 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval17; //@line 132 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_checkPiTarget($enc, $ptr, $end, $tokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $tokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $upper=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$tokPtr_addr]=$tokPtr;
        HEAP[$upper]=0; //@line 178 "xmltok_impl.c"
        var $1=HEAP[$tokPtr_addr]; //@line 179 "xmltok_impl.c"
        HEAP[$1]=11; //@line 179 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 180 "xmltok_impl.c"
        var $3=($2); //@line 180 "xmltok_impl.c"
        var $4=HEAP[$ptr_addr]; //@line 180 "xmltok_impl.c"
        var $5=($4); //@line 180 "xmltok_impl.c"
        var $6=((($3) - ($5))&4294967295); //@line 180 "xmltok_impl.c"
        var $7=((($6))|0)!=3; //@line 180 "xmltok_impl.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 180 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=1; //@line 181 "xmltok_impl.c"
        __label__ = 17; break; //@line 181 "xmltok_impl.c"
      case 2: // $bb1
        var $8=HEAP[$ptr_addr]; //@line 182 "xmltok_impl.c"
        var $9=HEAP[$8]; //@line 182 "xmltok_impl.c"
        var $10=reSign(($9), 8, 0); //@line 182 "xmltok_impl.c"
        if ($10 == 88) {
          __label__ = 4; break;
        }
        else if ($10 == 120) {
          __label__ = 3; break;
        }
        else {
        __label__ = 5; break;
        }
        
      case 3: // $bb2
        __label__ = 6; break; //@line 182 "xmltok_impl.c"
      case 4: // $bb3
        HEAP[$upper]=1; //@line 186 "xmltok_impl.c"
        __label__ = 6; break; //@line 186 "xmltok_impl.c"
      case 5: // $bb4
        HEAP[$0]=1; //@line 189 "xmltok_impl.c"
        __label__ = 17; break; //@line 189 "xmltok_impl.c"
      case 6: // $bb5
        var $11=HEAP[$ptr_addr]; //@line 191 "xmltok_impl.c"
        var $12=(($11+1)&4294967295); //@line 191 "xmltok_impl.c"
        HEAP[$ptr_addr]=$12; //@line 191 "xmltok_impl.c"
        var $13=HEAP[$ptr_addr]; //@line 192 "xmltok_impl.c"
        var $14=HEAP[$13]; //@line 192 "xmltok_impl.c"
        var $15=reSign(($14), 8, 0); //@line 192 "xmltok_impl.c"
        if ($15 == 77) {
          __label__ = 8; break;
        }
        else if ($15 == 109) {
          __label__ = 7; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 7: // $bb6
        __label__ = 10; break; //@line 192 "xmltok_impl.c"
      case 8: // $bb7
        HEAP[$upper]=1; //@line 196 "xmltok_impl.c"
        __label__ = 10; break; //@line 196 "xmltok_impl.c"
      case 9: // $bb8
        HEAP[$0]=1; //@line 199 "xmltok_impl.c"
        __label__ = 17; break; //@line 199 "xmltok_impl.c"
      case 10: // $bb9
        var $16=HEAP[$ptr_addr]; //@line 201 "xmltok_impl.c"
        var $17=(($16+1)&4294967295); //@line 201 "xmltok_impl.c"
        HEAP[$ptr_addr]=$17; //@line 201 "xmltok_impl.c"
        var $18=HEAP[$ptr_addr]; //@line 202 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 202 "xmltok_impl.c"
        var $20=reSign(($19), 8, 0); //@line 202 "xmltok_impl.c"
        if ($20 == 76) {
          __label__ = 12; break;
        }
        else if ($20 == 108) {
          __label__ = 11; break;
        }
        else {
        __label__ = 13; break;
        }
        
      case 11: // $bb10
        __label__ = 14; break; //@line 202 "xmltok_impl.c"
      case 12: // $bb11
        HEAP[$upper]=1; //@line 206 "xmltok_impl.c"
        __label__ = 14; break; //@line 206 "xmltok_impl.c"
      case 13: // $bb12
        HEAP[$0]=1; //@line 209 "xmltok_impl.c"
        __label__ = 17; break; //@line 209 "xmltok_impl.c"
      case 14: // $bb13
        var $21=HEAP[$upper]; //@line 211 "xmltok_impl.c"
        var $22=((($21))|0)!=0; //@line 211 "xmltok_impl.c"
        if ($22) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 211 "xmltok_impl.c"
      case 15: // $bb14
        HEAP[$0]=0; //@line 212 "xmltok_impl.c"
        __label__ = 17; break; //@line 212 "xmltok_impl.c"
      case 16: // $bb15
        var $23=HEAP[$tokPtr_addr]; //@line 213 "xmltok_impl.c"
        HEAP[$23]=12; //@line 213 "xmltok_impl.c"
        HEAP[$0]=1; //@line 214 "xmltok_impl.c"
        __label__ = 17; break; //@line 214 "xmltok_impl.c"
      case 17: // $bb16
        var $24=HEAP[$0]; //@line 181 "xmltok_impl.c"
        HEAP[$retval]=$24; //@line 181 "xmltok_impl.c"
        __label__ = 18; break; //@line 181 "xmltok_impl.c"
      case 18: // $return
        var $retval17=HEAP[$retval]; //@line 181 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval17; //@line 181 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_scanPi($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $tok=__stackBase__+24;
        var $target=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 224 "xmltok_impl.c"
        HEAP[$target]=$1; //@line 224 "xmltok_impl.c"
        var $2=HEAP[$ptr_addr]; //@line 225 "xmltok_impl.c"
        var $3=HEAP[$end_addr]; //@line 225 "xmltok_impl.c"
        var $4=($2)==($3); //@line 225 "xmltok_impl.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 225 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 226 "xmltok_impl.c"
        __label__ = 77; break; //@line 226 "xmltok_impl.c"
      case 2: // $bb1
        var $5=HEAP[$enc_addr]; //@line 227 "xmltok_impl.c"
        var $6=$5; //@line 227 "xmltok_impl.c"
        var $7=HEAP[$ptr_addr]; //@line 227 "xmltok_impl.c"
        var $8=HEAP[$7]; //@line 227 "xmltok_impl.c"
        var $9=unSign(($8), 8, 0); //@line 227 "xmltok_impl.c"
        var $10=(($6+72)&4294967295); //@line 227 "xmltok_impl.c"
        var $11=(($10+$9)&4294967295); //@line 227 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 227 "xmltok_impl.c"
        var $13=unSign(($12), 8, 0); //@line 227 "xmltok_impl.c"
        if ($13 == 5) {
          __label__ = 5; break;
        }
        else if ($13 == 6) {
          __label__ = 10; break;
        }
        else if ($13 == 7) {
          __label__ = 15; break;
        }
        else if ($13 == 22) {
          __label__ = 4; break;
        }
        else if ($13 == 24) {
          __label__ = 4; break;
        }
        else if ($13 == 29) {
          __label__ = 3; break;
        }
        else {
        __label__ = 20; break;
        }
        
      case 3: // $bb2
        var $14=HEAP[$nextTokPtr_addr]; //@line 228 "xmltok_impl.c"
        var $15=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        HEAP[$14]=$15; //@line 228 "xmltok_impl.c"
        HEAP[$0]=0; //@line 228 "xmltok_impl.c"
        __label__ = 77; break; //@line 228 "xmltok_impl.c"
      case 4: // $bb3
        var $16=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        var $17=(($16+1)&4294967295); //@line 228 "xmltok_impl.c"
        HEAP[$ptr_addr]=$17; //@line 228 "xmltok_impl.c"
        __label__ = 21; break; //@line 228 "xmltok_impl.c"
      case 5: // $bb4
        var $18=HEAP[$end_addr]; //@line 228 "xmltok_impl.c"
        var $19=($18); //@line 228 "xmltok_impl.c"
        var $20=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        var $21=($20); //@line 228 "xmltok_impl.c"
        var $22=((($19) - ($21))&4294967295); //@line 228 "xmltok_impl.c"
        var $23=((($22))|0) <= 1; //@line 228 "xmltok_impl.c"
        if ($23) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 228 "xmltok_impl.c"
      case 6: // $bb5
        HEAP[$0]=-2; //@line 228 "xmltok_impl.c"
        __label__ = 77; break; //@line 228 "xmltok_impl.c"
      case 7: // $bb6
        var $24=HEAP[$enc_addr]; //@line 228 "xmltok_impl.c"
        var $25=$24; //@line 228 "xmltok_impl.c"
        var $26=(($25+340)&4294967295); //@line 228 "xmltok_impl.c"
        var $27=HEAP[$26]; //@line 228 "xmltok_impl.c"
        var $28=HEAP[$enc_addr]; //@line 228 "xmltok_impl.c"
        var $29=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        var $30=FUNCTION_TABLE[$27]($28, $29); //@line 228 "xmltok_impl.c"
        var $31=((($30))|0)==0; //@line 228 "xmltok_impl.c"
        if ($31) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 228 "xmltok_impl.c"
      case 8: // $bb7
        var $32=HEAP[$nextTokPtr_addr]; //@line 228 "xmltok_impl.c"
        var $33=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        HEAP[$32]=$33; //@line 228 "xmltok_impl.c"
        HEAP[$0]=0; //@line 228 "xmltok_impl.c"
        __label__ = 77; break; //@line 228 "xmltok_impl.c"
      case 9: // $bb8
        var $34=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        var $35=(($34+2)&4294967295); //@line 228 "xmltok_impl.c"
        HEAP[$ptr_addr]=$35; //@line 228 "xmltok_impl.c"
        __label__ = 21; break; //@line 228 "xmltok_impl.c"
      case 10: // $bb9
        var $36=HEAP[$end_addr]; //@line 228 "xmltok_impl.c"
        var $37=($36); //@line 228 "xmltok_impl.c"
        var $38=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        var $39=($38); //@line 228 "xmltok_impl.c"
        var $40=((($37) - ($39))&4294967295); //@line 228 "xmltok_impl.c"
        var $41=((($40))|0) <= 2; //@line 228 "xmltok_impl.c"
        if ($41) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 228 "xmltok_impl.c"
      case 11: // $bb10
        HEAP[$0]=-2; //@line 228 "xmltok_impl.c"
        __label__ = 77; break; //@line 228 "xmltok_impl.c"
      case 12: // $bb11
        var $42=HEAP[$enc_addr]; //@line 228 "xmltok_impl.c"
        var $43=$42; //@line 228 "xmltok_impl.c"
        var $44=(($43+344)&4294967295); //@line 228 "xmltok_impl.c"
        var $45=HEAP[$44]; //@line 228 "xmltok_impl.c"
        var $46=HEAP[$enc_addr]; //@line 228 "xmltok_impl.c"
        var $47=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        var $48=FUNCTION_TABLE[$45]($46, $47); //@line 228 "xmltok_impl.c"
        var $49=((($48))|0)==0; //@line 228 "xmltok_impl.c"
        if ($49) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 228 "xmltok_impl.c"
      case 13: // $bb12
        var $50=HEAP[$nextTokPtr_addr]; //@line 228 "xmltok_impl.c"
        var $51=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        HEAP[$50]=$51; //@line 228 "xmltok_impl.c"
        HEAP[$0]=0; //@line 228 "xmltok_impl.c"
        __label__ = 77; break; //@line 228 "xmltok_impl.c"
      case 14: // $bb13
        var $52=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        var $53=(($52+3)&4294967295); //@line 228 "xmltok_impl.c"
        HEAP[$ptr_addr]=$53; //@line 228 "xmltok_impl.c"
        __label__ = 21; break; //@line 228 "xmltok_impl.c"
      case 15: // $bb14
        var $54=HEAP[$end_addr]; //@line 228 "xmltok_impl.c"
        var $55=($54); //@line 228 "xmltok_impl.c"
        var $56=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        var $57=($56); //@line 228 "xmltok_impl.c"
        var $58=((($55) - ($57))&4294967295); //@line 228 "xmltok_impl.c"
        var $59=((($58))|0) <= 3; //@line 228 "xmltok_impl.c"
        if ($59) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 228 "xmltok_impl.c"
      case 16: // $bb15
        HEAP[$0]=-2; //@line 228 "xmltok_impl.c"
        __label__ = 77; break; //@line 228 "xmltok_impl.c"
      case 17: // $bb16
        var $60=HEAP[$enc_addr]; //@line 228 "xmltok_impl.c"
        var $61=$60; //@line 228 "xmltok_impl.c"
        var $62=(($61+348)&4294967295); //@line 228 "xmltok_impl.c"
        var $63=HEAP[$62]; //@line 228 "xmltok_impl.c"
        var $64=HEAP[$enc_addr]; //@line 228 "xmltok_impl.c"
        var $65=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        var $66=FUNCTION_TABLE[$63]($64, $65); //@line 228 "xmltok_impl.c"
        var $67=((($66))|0)==0; //@line 228 "xmltok_impl.c"
        if ($67) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 228 "xmltok_impl.c"
      case 18: // $bb17
        var $68=HEAP[$nextTokPtr_addr]; //@line 228 "xmltok_impl.c"
        var $69=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        HEAP[$68]=$69; //@line 228 "xmltok_impl.c"
        HEAP[$0]=0; //@line 228 "xmltok_impl.c"
        __label__ = 77; break; //@line 228 "xmltok_impl.c"
      case 19: // $bb18
        var $70=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        var $71=(($70+4)&4294967295); //@line 228 "xmltok_impl.c"
        HEAP[$ptr_addr]=$71; //@line 228 "xmltok_impl.c"
        __label__ = 21; break; //@line 228 "xmltok_impl.c"
      case 20: // $bb19
        var $72=HEAP[$nextTokPtr_addr]; //@line 230 "xmltok_impl.c"
        var $73=HEAP[$ptr_addr]; //@line 230 "xmltok_impl.c"
        HEAP[$72]=$73; //@line 230 "xmltok_impl.c"
        HEAP[$0]=0; //@line 231 "xmltok_impl.c"
        __label__ = 77; break; //@line 231 "xmltok_impl.c"
      case 21: // $bb20
        __label__ = 75; break; //@line 231 "xmltok_impl.c"
      case 22: // $bb21
        var $74=HEAP[$enc_addr]; //@line 234 "xmltok_impl.c"
        var $75=$74; //@line 234 "xmltok_impl.c"
        var $76=HEAP[$ptr_addr]; //@line 234 "xmltok_impl.c"
        var $77=HEAP[$76]; //@line 234 "xmltok_impl.c"
        var $78=unSign(($77), 8, 0); //@line 234 "xmltok_impl.c"
        var $79=(($75+72)&4294967295); //@line 234 "xmltok_impl.c"
        var $80=(($79+$78)&4294967295); //@line 234 "xmltok_impl.c"
        var $81=HEAP[$80]; //@line 234 "xmltok_impl.c"
        var $82=unSign(($81), 8, 0); //@line 234 "xmltok_impl.c"
        if ($82 == 5) {
          __label__ = 25; break;
        }
        else if ($82 == 6) {
          __label__ = 30; break;
        }
        else if ($82 == 7) {
          __label__ = 35; break;
        }
        else if ($82 == 9) {
          __label__ = 40; break;
        }
        else if ($82 == 10) {
          __label__ = 40; break;
        }
        else if ($82 == 15) {
          __label__ = 68; break;
        }
        else if ($82 == 21) {
          __label__ = 40; break;
        }
        else if ($82 == 22) {
          __label__ = 24; break;
        }
        else if ($82 == 24) {
          __label__ = 24; break;
        }
        else if ($82 == 25) {
          __label__ = 24; break;
        }
        else if ($82 == 26) {
          __label__ = 24; break;
        }
        else if ($82 == 27) {
          __label__ = 24; break;
        }
        else if ($82 == 29) {
          __label__ = 23; break;
        }
        else {
        __label__ = 74; break;
        }
        
      case 23: // $bb22
        var $83=HEAP[$nextTokPtr_addr]; //@line 235 "xmltok_impl.c"
        var $84=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        HEAP[$83]=$84; //@line 235 "xmltok_impl.c"
        HEAP[$0]=0; //@line 235 "xmltok_impl.c"
        __label__ = 77; break; //@line 235 "xmltok_impl.c"
      case 24: // $bb23
        var $85=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        var $86=(($85+1)&4294967295); //@line 235 "xmltok_impl.c"
        HEAP[$ptr_addr]=$86; //@line 235 "xmltok_impl.c"
        __label__ = 75; break; //@line 235 "xmltok_impl.c"
      case 25: // $bb24
        var $87=HEAP[$end_addr]; //@line 235 "xmltok_impl.c"
        var $88=($87); //@line 235 "xmltok_impl.c"
        var $89=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        var $90=($89); //@line 235 "xmltok_impl.c"
        var $91=((($88) - ($90))&4294967295); //@line 235 "xmltok_impl.c"
        var $92=((($91))|0) <= 1; //@line 235 "xmltok_impl.c"
        if ($92) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 235 "xmltok_impl.c"
      case 26: // $bb25
        HEAP[$0]=-2; //@line 235 "xmltok_impl.c"
        __label__ = 77; break; //@line 235 "xmltok_impl.c"
      case 27: // $bb26
        var $93=HEAP[$enc_addr]; //@line 235 "xmltok_impl.c"
        var $94=$93; //@line 235 "xmltok_impl.c"
        var $95=(($94+328)&4294967295); //@line 235 "xmltok_impl.c"
        var $96=HEAP[$95]; //@line 235 "xmltok_impl.c"
        var $97=HEAP[$enc_addr]; //@line 235 "xmltok_impl.c"
        var $98=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        var $99=FUNCTION_TABLE[$96]($97, $98); //@line 235 "xmltok_impl.c"
        var $100=((($99))|0)==0; //@line 235 "xmltok_impl.c"
        if ($100) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 235 "xmltok_impl.c"
      case 28: // $bb27
        var $101=HEAP[$nextTokPtr_addr]; //@line 235 "xmltok_impl.c"
        var $102=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        HEAP[$101]=$102; //@line 235 "xmltok_impl.c"
        HEAP[$0]=0; //@line 235 "xmltok_impl.c"
        __label__ = 77; break; //@line 235 "xmltok_impl.c"
      case 29: // $bb28
        var $103=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        var $104=(($103+2)&4294967295); //@line 235 "xmltok_impl.c"
        HEAP[$ptr_addr]=$104; //@line 235 "xmltok_impl.c"
        __label__ = 75; break; //@line 235 "xmltok_impl.c"
      case 30: // $bb29
        var $105=HEAP[$end_addr]; //@line 235 "xmltok_impl.c"
        var $106=($105); //@line 235 "xmltok_impl.c"
        var $107=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        var $108=($107); //@line 235 "xmltok_impl.c"
        var $109=((($106) - ($108))&4294967295); //@line 235 "xmltok_impl.c"
        var $110=((($109))|0) <= 2; //@line 235 "xmltok_impl.c"
        if ($110) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 235 "xmltok_impl.c"
      case 31: // $bb30
        HEAP[$0]=-2; //@line 235 "xmltok_impl.c"
        __label__ = 77; break; //@line 235 "xmltok_impl.c"
      case 32: // $bb31
        var $111=HEAP[$enc_addr]; //@line 235 "xmltok_impl.c"
        var $112=$111; //@line 235 "xmltok_impl.c"
        var $113=(($112+332)&4294967295); //@line 235 "xmltok_impl.c"
        var $114=HEAP[$113]; //@line 235 "xmltok_impl.c"
        var $115=HEAP[$enc_addr]; //@line 235 "xmltok_impl.c"
        var $116=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        var $117=FUNCTION_TABLE[$114]($115, $116); //@line 235 "xmltok_impl.c"
        var $118=((($117))|0)==0; //@line 235 "xmltok_impl.c"
        if ($118) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 235 "xmltok_impl.c"
      case 33: // $bb32
        var $119=HEAP[$nextTokPtr_addr]; //@line 235 "xmltok_impl.c"
        var $120=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        HEAP[$119]=$120; //@line 235 "xmltok_impl.c"
        HEAP[$0]=0; //@line 235 "xmltok_impl.c"
        __label__ = 77; break; //@line 235 "xmltok_impl.c"
      case 34: // $bb33
        var $121=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        var $122=(($121+3)&4294967295); //@line 235 "xmltok_impl.c"
        HEAP[$ptr_addr]=$122; //@line 235 "xmltok_impl.c"
        __label__ = 75; break; //@line 235 "xmltok_impl.c"
      case 35: // $bb34
        var $123=HEAP[$end_addr]; //@line 235 "xmltok_impl.c"
        var $124=($123); //@line 235 "xmltok_impl.c"
        var $125=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        var $126=($125); //@line 235 "xmltok_impl.c"
        var $127=((($124) - ($126))&4294967295); //@line 235 "xmltok_impl.c"
        var $128=((($127))|0) <= 3; //@line 235 "xmltok_impl.c"
        if ($128) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 235 "xmltok_impl.c"
      case 36: // $bb35
        HEAP[$0]=-2; //@line 235 "xmltok_impl.c"
        __label__ = 77; break; //@line 235 "xmltok_impl.c"
      case 37: // $bb36
        var $129=HEAP[$enc_addr]; //@line 235 "xmltok_impl.c"
        var $130=$129; //@line 235 "xmltok_impl.c"
        var $131=(($130+336)&4294967295); //@line 235 "xmltok_impl.c"
        var $132=HEAP[$131]; //@line 235 "xmltok_impl.c"
        var $133=HEAP[$enc_addr]; //@line 235 "xmltok_impl.c"
        var $134=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        var $135=FUNCTION_TABLE[$132]($133, $134); //@line 235 "xmltok_impl.c"
        var $136=((($135))|0)==0; //@line 235 "xmltok_impl.c"
        if ($136) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 235 "xmltok_impl.c"
      case 38: // $bb37
        var $137=HEAP[$nextTokPtr_addr]; //@line 235 "xmltok_impl.c"
        var $138=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        HEAP[$137]=$138; //@line 235 "xmltok_impl.c"
        HEAP[$0]=0; //@line 235 "xmltok_impl.c"
        __label__ = 77; break; //@line 235 "xmltok_impl.c"
      case 39: // $bb38
        var $139=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        var $140=(($139+4)&4294967295); //@line 235 "xmltok_impl.c"
        HEAP[$ptr_addr]=$140; //@line 235 "xmltok_impl.c"
        __label__ = 75; break; //@line 235 "xmltok_impl.c"
      case 40: // $bb39
        var $141=HEAP[$enc_addr]; //@line 237 "xmltok_impl.c"
        var $142=HEAP[$target]; //@line 237 "xmltok_impl.c"
        var $143=HEAP[$ptr_addr]; //@line 237 "xmltok_impl.c"
        var $144=_normal_checkPiTarget($141, $142, $143, $tok); //@line 237 "xmltok_impl.c"
        var $145=((($144))|0)==0; //@line 237 "xmltok_impl.c"
        if ($145) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 237 "xmltok_impl.c"
      case 41: // $bb40
        var $146=HEAP[$nextTokPtr_addr]; //@line 238 "xmltok_impl.c"
        var $147=HEAP[$ptr_addr]; //@line 238 "xmltok_impl.c"
        HEAP[$146]=$147; //@line 238 "xmltok_impl.c"
        HEAP[$0]=0; //@line 239 "xmltok_impl.c"
        __label__ = 77; break; //@line 239 "xmltok_impl.c"
      case 42: // $bb41
        var $148=HEAP[$ptr_addr]; //@line 241 "xmltok_impl.c"
        var $149=(($148+1)&4294967295); //@line 241 "xmltok_impl.c"
        HEAP[$ptr_addr]=$149; //@line 241 "xmltok_impl.c"
        __label__ = 66; break; //@line 241 "xmltok_impl.c"
      case 43: // $bb42
        var $150=HEAP[$enc_addr]; //@line 243 "xmltok_impl.c"
        var $151=$150; //@line 243 "xmltok_impl.c"
        var $152=HEAP[$ptr_addr]; //@line 243 "xmltok_impl.c"
        var $153=HEAP[$152]; //@line 243 "xmltok_impl.c"
        var $154=unSign(($153), 8, 0); //@line 243 "xmltok_impl.c"
        var $155=(($151+72)&4294967295); //@line 243 "xmltok_impl.c"
        var $156=(($155+$154)&4294967295); //@line 243 "xmltok_impl.c"
        var $157=HEAP[$156]; //@line 243 "xmltok_impl.c"
        var $158=unSign(($157), 8, 0); //@line 243 "xmltok_impl.c"
        if ($158 == 0) {
          __label__ = 59; break;
        }
        else if ($158 == 1) {
          __label__ = 59; break;
        }
        else if ($158 == 5) {
          __label__ = 44; break;
        }
        else if ($158 == 6) {
          __label__ = 49; break;
        }
        else if ($158 == 7) {
          __label__ = 54; break;
        }
        else if ($158 == 8) {
          __label__ = 59; break;
        }
        else if ($158 == 15) {
          __label__ = 60; break;
        }
        else {
        __label__ = 65; break;
        }
        
      case 44: // $bb43
        var $159=HEAP[$end_addr]; //@line 244 "xmltok_impl.c"
        var $160=($159); //@line 244 "xmltok_impl.c"
        var $161=HEAP[$ptr_addr]; //@line 244 "xmltok_impl.c"
        var $162=($161); //@line 244 "xmltok_impl.c"
        var $163=((($160) - ($162))&4294967295); //@line 244 "xmltok_impl.c"
        var $164=((($163))|0) <= 1; //@line 244 "xmltok_impl.c"
        if ($164) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 244 "xmltok_impl.c"
      case 45: // $bb44
        HEAP[$0]=-2; //@line 244 "xmltok_impl.c"
        __label__ = 77; break; //@line 244 "xmltok_impl.c"
      case 46: // $bb45
        var $165=HEAP[$enc_addr]; //@line 244 "xmltok_impl.c"
        var $166=$165; //@line 244 "xmltok_impl.c"
        var $167=(($166+352)&4294967295); //@line 244 "xmltok_impl.c"
        var $168=HEAP[$167]; //@line 244 "xmltok_impl.c"
        var $169=HEAP[$enc_addr]; //@line 244 "xmltok_impl.c"
        var $170=HEAP[$ptr_addr]; //@line 244 "xmltok_impl.c"
        var $171=FUNCTION_TABLE[$168]($169, $170); //@line 244 "xmltok_impl.c"
        var $172=((($171))|0)!=0; //@line 244 "xmltok_impl.c"
        if ($172) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 244 "xmltok_impl.c"
      case 47: // $bb46
        var $173=HEAP[$nextTokPtr_addr]; //@line 244 "xmltok_impl.c"
        var $174=HEAP[$ptr_addr]; //@line 244 "xmltok_impl.c"
        HEAP[$173]=$174; //@line 244 "xmltok_impl.c"
        HEAP[$0]=0; //@line 244 "xmltok_impl.c"
        __label__ = 77; break; //@line 244 "xmltok_impl.c"
      case 48: // $bb47
        var $175=HEAP[$ptr_addr]; //@line 244 "xmltok_impl.c"
        var $176=(($175+2)&4294967295); //@line 244 "xmltok_impl.c"
        HEAP[$ptr_addr]=$176; //@line 244 "xmltok_impl.c"
        __label__ = 66; break; //@line 244 "xmltok_impl.c"
      case 49: // $bb48
        var $177=HEAP[$end_addr]; //@line 244 "xmltok_impl.c"
        var $178=($177); //@line 244 "xmltok_impl.c"
        var $179=HEAP[$ptr_addr]; //@line 244 "xmltok_impl.c"
        var $180=($179); //@line 244 "xmltok_impl.c"
        var $181=((($178) - ($180))&4294967295); //@line 244 "xmltok_impl.c"
        var $182=((($181))|0) <= 2; //@line 244 "xmltok_impl.c"
        if ($182) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 244 "xmltok_impl.c"
      case 50: // $bb49
        HEAP[$0]=-2; //@line 244 "xmltok_impl.c"
        __label__ = 77; break; //@line 244 "xmltok_impl.c"
      case 51: // $bb50
        var $183=HEAP[$enc_addr]; //@line 244 "xmltok_impl.c"
        var $184=$183; //@line 244 "xmltok_impl.c"
        var $185=(($184+356)&4294967295); //@line 244 "xmltok_impl.c"
        var $186=HEAP[$185]; //@line 244 "xmltok_impl.c"
        var $187=HEAP[$enc_addr]; //@line 244 "xmltok_impl.c"
        var $188=HEAP[$ptr_addr]; //@line 244 "xmltok_impl.c"
        var $189=FUNCTION_TABLE[$186]($187, $188); //@line 244 "xmltok_impl.c"
        var $190=((($189))|0)!=0; //@line 244 "xmltok_impl.c"
        if ($190) { __label__ = 52; break; } else { __label__ = 53; break; } //@line 244 "xmltok_impl.c"
      case 52: // $bb51
        var $191=HEAP[$nextTokPtr_addr]; //@line 244 "xmltok_impl.c"
        var $192=HEAP[$ptr_addr]; //@line 244 "xmltok_impl.c"
        HEAP[$191]=$192; //@line 244 "xmltok_impl.c"
        HEAP[$0]=0; //@line 244 "xmltok_impl.c"
        __label__ = 77; break; //@line 244 "xmltok_impl.c"
      case 53: // $bb52
        var $193=HEAP[$ptr_addr]; //@line 244 "xmltok_impl.c"
        var $194=(($193+3)&4294967295); //@line 244 "xmltok_impl.c"
        HEAP[$ptr_addr]=$194; //@line 244 "xmltok_impl.c"
        __label__ = 66; break; //@line 244 "xmltok_impl.c"
      case 54: // $bb53
        var $195=HEAP[$end_addr]; //@line 244 "xmltok_impl.c"
        var $196=($195); //@line 244 "xmltok_impl.c"
        var $197=HEAP[$ptr_addr]; //@line 244 "xmltok_impl.c"
        var $198=($197); //@line 244 "xmltok_impl.c"
        var $199=((($196) - ($198))&4294967295); //@line 244 "xmltok_impl.c"
        var $200=((($199))|0) <= 3; //@line 244 "xmltok_impl.c"
        if ($200) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 244 "xmltok_impl.c"
      case 55: // $bb54
        HEAP[$0]=-2; //@line 244 "xmltok_impl.c"
        __label__ = 77; break; //@line 244 "xmltok_impl.c"
      case 56: // $bb55
        var $201=HEAP[$enc_addr]; //@line 244 "xmltok_impl.c"
        var $202=$201; //@line 244 "xmltok_impl.c"
        var $203=(($202+360)&4294967295); //@line 244 "xmltok_impl.c"
        var $204=HEAP[$203]; //@line 244 "xmltok_impl.c"
        var $205=HEAP[$enc_addr]; //@line 244 "xmltok_impl.c"
        var $206=HEAP[$ptr_addr]; //@line 244 "xmltok_impl.c"
        var $207=FUNCTION_TABLE[$204]($205, $206); //@line 244 "xmltok_impl.c"
        var $208=((($207))|0)!=0; //@line 244 "xmltok_impl.c"
        if ($208) { __label__ = 57; break; } else { __label__ = 58; break; } //@line 244 "xmltok_impl.c"
      case 57: // $bb56
        var $209=HEAP[$nextTokPtr_addr]; //@line 244 "xmltok_impl.c"
        var $210=HEAP[$ptr_addr]; //@line 244 "xmltok_impl.c"
        HEAP[$209]=$210; //@line 244 "xmltok_impl.c"
        HEAP[$0]=0; //@line 244 "xmltok_impl.c"
        __label__ = 77; break; //@line 244 "xmltok_impl.c"
      case 58: // $bb57
        var $211=HEAP[$ptr_addr]; //@line 244 "xmltok_impl.c"
        var $212=(($211+4)&4294967295); //@line 244 "xmltok_impl.c"
        HEAP[$ptr_addr]=$212; //@line 244 "xmltok_impl.c"
        __label__ = 66; break; //@line 244 "xmltok_impl.c"
      case 59: // $bb58
        var $213=HEAP[$nextTokPtr_addr]; //@line 244 "xmltok_impl.c"
        var $214=HEAP[$ptr_addr]; //@line 244 "xmltok_impl.c"
        HEAP[$213]=$214; //@line 244 "xmltok_impl.c"
        HEAP[$0]=0; //@line 244 "xmltok_impl.c"
        __label__ = 77; break; //@line 244 "xmltok_impl.c"
      case 60: // $bb59
        var $215=HEAP[$ptr_addr]; //@line 246 "xmltok_impl.c"
        var $216=(($215+1)&4294967295); //@line 246 "xmltok_impl.c"
        HEAP[$ptr_addr]=$216; //@line 246 "xmltok_impl.c"
        var $217=HEAP[$ptr_addr]; //@line 247 "xmltok_impl.c"
        var $218=HEAP[$end_addr]; //@line 247 "xmltok_impl.c"
        var $219=($217)==($218); //@line 247 "xmltok_impl.c"
        if ($219) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 247 "xmltok_impl.c"
      case 61: // $bb60
        HEAP[$0]=-1; //@line 248 "xmltok_impl.c"
        __label__ = 77; break; //@line 248 "xmltok_impl.c"
      case 62: // $bb61
        var $220=HEAP[$ptr_addr]; //@line 249 "xmltok_impl.c"
        var $221=HEAP[$220]; //@line 249 "xmltok_impl.c"
        var $222=reSign(($221), 8, 0)==62; //@line 249 "xmltok_impl.c"
        if ($222) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 249 "xmltok_impl.c"
      case 63: // $bb62
        var $223=HEAP[$ptr_addr]; //@line 250 "xmltok_impl.c"
        var $224=(($223+1)&4294967295); //@line 250 "xmltok_impl.c"
        var $225=HEAP[$nextTokPtr_addr]; //@line 250 "xmltok_impl.c"
        HEAP[$225]=$224; //@line 250 "xmltok_impl.c"
        var $226=HEAP[$tok]; //@line 251 "xmltok_impl.c"
        HEAP[$0]=$226; //@line 251 "xmltok_impl.c"
        __label__ = 77; break; //@line 251 "xmltok_impl.c"
      case 64: // $bb63
        __label__ = 66; break; //@line 251 "xmltok_impl.c"
      case 65: // $bb64
        var $227=HEAP[$ptr_addr]; //@line 255 "xmltok_impl.c"
        var $228=(($227+1)&4294967295); //@line 255 "xmltok_impl.c"
        HEAP[$ptr_addr]=$228; //@line 255 "xmltok_impl.c"
        __label__ = 66; break; //@line 255 "xmltok_impl.c"
      case 66: // $bb65
        var $229=HEAP[$ptr_addr]; //@line 242 "xmltok_impl.c"
        var $230=HEAP[$end_addr]; //@line 242 "xmltok_impl.c"
        var $231=($229)!=($230); //@line 242 "xmltok_impl.c"
        if ($231) { __label__ = 43; break; } else { __label__ = 67; break; } //@line 242 "xmltok_impl.c"
      case 67: // $bb66
        HEAP[$0]=-1; //@line 259 "xmltok_impl.c"
        __label__ = 77; break; //@line 259 "xmltok_impl.c"
      case 68: // $bb67
        var $232=HEAP[$enc_addr]; //@line 261 "xmltok_impl.c"
        var $233=HEAP[$target]; //@line 261 "xmltok_impl.c"
        var $234=HEAP[$ptr_addr]; //@line 261 "xmltok_impl.c"
        var $235=_normal_checkPiTarget($232, $233, $234, $tok); //@line 261 "xmltok_impl.c"
        var $236=((($235))|0)==0; //@line 261 "xmltok_impl.c"
        if ($236) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 261 "xmltok_impl.c"
      case 69: // $bb68
        var $237=HEAP[$nextTokPtr_addr]; //@line 262 "xmltok_impl.c"
        var $238=HEAP[$ptr_addr]; //@line 262 "xmltok_impl.c"
        HEAP[$237]=$238; //@line 262 "xmltok_impl.c"
        HEAP[$0]=0; //@line 263 "xmltok_impl.c"
        __label__ = 77; break; //@line 263 "xmltok_impl.c"
      case 70: // $bb69
        var $239=HEAP[$ptr_addr]; //@line 265 "xmltok_impl.c"
        var $240=(($239+1)&4294967295); //@line 265 "xmltok_impl.c"
        HEAP[$ptr_addr]=$240; //@line 265 "xmltok_impl.c"
        var $241=HEAP[$ptr_addr]; //@line 266 "xmltok_impl.c"
        var $242=HEAP[$end_addr]; //@line 266 "xmltok_impl.c"
        var $243=($241)==($242); //@line 266 "xmltok_impl.c"
        if ($243) { __label__ = 71; break; } else { __label__ = 72; break; } //@line 266 "xmltok_impl.c"
      case 71: // $bb70
        HEAP[$0]=-1; //@line 267 "xmltok_impl.c"
        __label__ = 77; break; //@line 267 "xmltok_impl.c"
      case 72: // $bb71
        var $244=HEAP[$ptr_addr]; //@line 268 "xmltok_impl.c"
        var $245=HEAP[$244]; //@line 268 "xmltok_impl.c"
        var $246=reSign(($245), 8, 0)==62; //@line 268 "xmltok_impl.c"
        if ($246) { __label__ = 73; break; } else { __label__ = 74; break; } //@line 268 "xmltok_impl.c"
      case 73: // $bb72
        var $247=HEAP[$ptr_addr]; //@line 269 "xmltok_impl.c"
        var $248=(($247+1)&4294967295); //@line 269 "xmltok_impl.c"
        var $249=HEAP[$nextTokPtr_addr]; //@line 269 "xmltok_impl.c"
        HEAP[$249]=$248; //@line 269 "xmltok_impl.c"
        var $250=HEAP[$tok]; //@line 270 "xmltok_impl.c"
        HEAP[$0]=$250; //@line 270 "xmltok_impl.c"
        __label__ = 77; break; //@line 270 "xmltok_impl.c"
      case 74: // $bb73
        var $251=HEAP[$nextTokPtr_addr]; //@line 274 "xmltok_impl.c"
        var $252=HEAP[$ptr_addr]; //@line 274 "xmltok_impl.c"
        HEAP[$251]=$252; //@line 274 "xmltok_impl.c"
        HEAP[$0]=0; //@line 275 "xmltok_impl.c"
        __label__ = 77; break; //@line 275 "xmltok_impl.c"
      case 75: // $bb74
        var $253=HEAP[$ptr_addr]; //@line 233 "xmltok_impl.c"
        var $254=HEAP[$end_addr]; //@line 233 "xmltok_impl.c"
        var $255=($253)!=($254); //@line 233 "xmltok_impl.c"
        if ($255) { __label__ = 22; break; } else { __label__ = 76; break; } //@line 233 "xmltok_impl.c"
      case 76: // $bb75
        HEAP[$0]=-1; //@line 278 "xmltok_impl.c"
        __label__ = 77; break; //@line 278 "xmltok_impl.c"
      case 77: // $bb76
        var $256=HEAP[$0]; //@line 226 "xmltok_impl.c"
        HEAP[$retval]=$256; //@line 226 "xmltok_impl.c"
        __label__ = 78; break; //@line 226 "xmltok_impl.c"
      case 78: // $return
        var $retval77=HEAP[$retval]; //@line 226 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval77; //@line 226 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_scanCdataSection($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $i=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$end_addr]; //@line 289 "xmltok_impl.c"
        var $2=($1); //@line 289 "xmltok_impl.c"
        var $3=HEAP[$ptr_addr]; //@line 289 "xmltok_impl.c"
        var $4=($3); //@line 289 "xmltok_impl.c"
        var $5=((($2) - ($4))&4294967295); //@line 289 "xmltok_impl.c"
        var $6=((($5))|0) <= 5; //@line 289 "xmltok_impl.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 289 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 290 "xmltok_impl.c"
        __label__ = 8; break; //@line 290 "xmltok_impl.c"
      case 2: // $bb1
        HEAP[$i]=0; //@line 291 "xmltok_impl.c"
        __label__ = 6; break; //@line 291 "xmltok_impl.c"
      case 3: // $bb2
        var $7=HEAP[$ptr_addr]; //@line 292 "xmltok_impl.c"
        var $8=HEAP[$7]; //@line 292 "xmltok_impl.c"
        var $9=HEAP[$i]; //@line 292 "xmltok_impl.c"
        var $10=((_CDATA_LSQB_1955+$9)&4294967295); //@line 292 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 292 "xmltok_impl.c"
        var $12=reSign(($8), 8, 0)!=reSign(($11), 8, 0); //@line 292 "xmltok_impl.c"
        if ($12) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 292 "xmltok_impl.c"
      case 4: // $bb3
        var $13=HEAP[$nextTokPtr_addr]; //@line 293 "xmltok_impl.c"
        var $14=HEAP[$ptr_addr]; //@line 293 "xmltok_impl.c"
        HEAP[$13]=$14; //@line 293 "xmltok_impl.c"
        HEAP[$0]=0; //@line 294 "xmltok_impl.c"
        __label__ = 8; break; //@line 294 "xmltok_impl.c"
      case 5: // $bb4
        var $15=HEAP[$i]; //@line 291 "xmltok_impl.c"
        var $16=((($15) + 1)&4294967295); //@line 291 "xmltok_impl.c"
        HEAP[$i]=$16; //@line 291 "xmltok_impl.c"
        var $17=HEAP[$ptr_addr]; //@line 291 "xmltok_impl.c"
        var $18=(($17+1)&4294967295); //@line 291 "xmltok_impl.c"
        HEAP[$ptr_addr]=$18; //@line 291 "xmltok_impl.c"
        __label__ = 6; break; //@line 291 "xmltok_impl.c"
      case 6: // $bb5
        var $19=HEAP[$i]; //@line 291 "xmltok_impl.c"
        var $20=((($19))|0) <= 5; //@line 291 "xmltok_impl.c"
        if ($20) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 291 "xmltok_impl.c"
      case 7: // $bb6
        var $21=HEAP[$nextTokPtr_addr]; //@line 297 "xmltok_impl.c"
        var $22=HEAP[$ptr_addr]; //@line 297 "xmltok_impl.c"
        HEAP[$21]=$22; //@line 297 "xmltok_impl.c"
        HEAP[$0]=8; //@line 298 "xmltok_impl.c"
        __label__ = 8; break; //@line 298 "xmltok_impl.c"
      case 8: // $bb7
        var $23=HEAP[$0]; //@line 290 "xmltok_impl.c"
        HEAP[$retval]=$23; //@line 290 "xmltok_impl.c"
        __label__ = 9; break; //@line 290 "xmltok_impl.c"
      case 9: // $return
        var $retval8=HEAP[$retval]; //@line 290 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval8; //@line 290 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_cdataSectionTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 305 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 305 "xmltok_impl.c"
        var $3=($1)==($2); //@line 305 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 305 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-4; //@line 306 "xmltok_impl.c"
        __label__ = 52; break; //@line 306 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$enc_addr]; //@line 316 "xmltok_impl.c"
        var $5=$4; //@line 316 "xmltok_impl.c"
        var $6=HEAP[$ptr_addr]; //@line 316 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 316 "xmltok_impl.c"
        var $8=unSign(($7), 8, 0); //@line 316 "xmltok_impl.c"
        var $9=(($5+72)&4294967295); //@line 316 "xmltok_impl.c"
        var $10=(($9+$8)&4294967295); //@line 316 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 316 "xmltok_impl.c"
        var $12=unSign(($11), 8, 0); //@line 316 "xmltok_impl.c"
        if ($12 == 0) {
          __label__ = 32; break;
        }
        else if ($12 == 1) {
          __label__ = 32; break;
        }
        else if ($12 == 4) {
          __label__ = 3; break;
        }
        else if ($12 == 5) {
          __label__ = 17; break;
        }
        else if ($12 == 6) {
          __label__ = 22; break;
        }
        else if ($12 == 7) {
          __label__ = 27; break;
        }
        else if ($12 == 8) {
          __label__ = 32; break;
        }
        else if ($12 == 9) {
          __label__ = 11; break;
        }
        else if ($12 == 10) {
          __label__ = 16; break;
        }
        else {
        __label__ = 33; break;
        }
        
      case 3: // $bb2
        var $13=HEAP[$ptr_addr]; //@line 318 "xmltok_impl.c"
        var $14=(($13+1)&4294967295); //@line 318 "xmltok_impl.c"
        HEAP[$ptr_addr]=$14; //@line 318 "xmltok_impl.c"
        var $15=HEAP[$ptr_addr]; //@line 319 "xmltok_impl.c"
        var $16=HEAP[$end_addr]; //@line 319 "xmltok_impl.c"
        var $17=($15)==($16); //@line 319 "xmltok_impl.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 319 "xmltok_impl.c"
      case 4: // $bb3
        HEAP[$0]=-1; //@line 320 "xmltok_impl.c"
        __label__ = 52; break; //@line 320 "xmltok_impl.c"
      case 5: // $bb4
        var $18=HEAP[$ptr_addr]; //@line 321 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 321 "xmltok_impl.c"
        var $20=reSign(($19), 8, 0)!=93; //@line 321 "xmltok_impl.c"
        if ($20) { __label__ = 34; break; } else { __label__ = 6; break; } //@line 321 "xmltok_impl.c"
      case 6: // $bb5
        var $21=HEAP[$ptr_addr]; //@line 323 "xmltok_impl.c"
        var $22=(($21+1)&4294967295); //@line 323 "xmltok_impl.c"
        HEAP[$ptr_addr]=$22; //@line 323 "xmltok_impl.c"
        var $23=HEAP[$ptr_addr]; //@line 324 "xmltok_impl.c"
        var $24=HEAP[$end_addr]; //@line 324 "xmltok_impl.c"
        var $25=($23)==($24); //@line 324 "xmltok_impl.c"
        if ($25) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 324 "xmltok_impl.c"
      case 7: // $bb6
        HEAP[$0]=-1; //@line 325 "xmltok_impl.c"
        __label__ = 52; break; //@line 325 "xmltok_impl.c"
      case 8: // $bb7
        var $26=HEAP[$ptr_addr]; //@line 326 "xmltok_impl.c"
        var $27=HEAP[$26]; //@line 326 "xmltok_impl.c"
        var $28=reSign(($27), 8, 0)!=62; //@line 326 "xmltok_impl.c"
        if ($28) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 326 "xmltok_impl.c"
      case 9: // $bb8
        var $29=HEAP[$ptr_addr]; //@line 327 "xmltok_impl.c"
        var $30=(($29+-1)&4294967295); //@line 327 "xmltok_impl.c"
        HEAP[$ptr_addr]=$30; //@line 327 "xmltok_impl.c"
        __label__ = 34; break; //@line 327 "xmltok_impl.c"
      case 10: // $bb9
        var $31=HEAP[$ptr_addr]; //@line 330 "xmltok_impl.c"
        var $32=(($31+1)&4294967295); //@line 330 "xmltok_impl.c"
        var $33=HEAP[$nextTokPtr_addr]; //@line 330 "xmltok_impl.c"
        HEAP[$33]=$32; //@line 330 "xmltok_impl.c"
        HEAP[$0]=40; //@line 331 "xmltok_impl.c"
        __label__ = 52; break; //@line 331 "xmltok_impl.c"
      case 11: // $bb10
        var $34=HEAP[$ptr_addr]; //@line 333 "xmltok_impl.c"
        var $35=(($34+1)&4294967295); //@line 333 "xmltok_impl.c"
        HEAP[$ptr_addr]=$35; //@line 333 "xmltok_impl.c"
        var $36=HEAP[$ptr_addr]; //@line 334 "xmltok_impl.c"
        var $37=HEAP[$end_addr]; //@line 334 "xmltok_impl.c"
        var $38=($36)==($37); //@line 334 "xmltok_impl.c"
        if ($38) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 334 "xmltok_impl.c"
      case 12: // $bb11
        HEAP[$0]=-1; //@line 335 "xmltok_impl.c"
        __label__ = 52; break; //@line 335 "xmltok_impl.c"
      case 13: // $bb12
        var $39=HEAP[$enc_addr]; //@line 336 "xmltok_impl.c"
        var $40=$39; //@line 336 "xmltok_impl.c"
        var $41=HEAP[$ptr_addr]; //@line 336 "xmltok_impl.c"
        var $42=HEAP[$41]; //@line 336 "xmltok_impl.c"
        var $43=unSign(($42), 8, 0); //@line 336 "xmltok_impl.c"
        var $44=(($40+72)&4294967295); //@line 336 "xmltok_impl.c"
        var $45=(($44+$43)&4294967295); //@line 336 "xmltok_impl.c"
        var $46=HEAP[$45]; //@line 336 "xmltok_impl.c"
        var $47=reSign(($46), 8, 0)==10; //@line 336 "xmltok_impl.c"
        if ($47) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 336 "xmltok_impl.c"
      case 14: // $bb13
        var $48=HEAP[$ptr_addr]; //@line 337 "xmltok_impl.c"
        var $49=(($48+1)&4294967295); //@line 337 "xmltok_impl.c"
        HEAP[$ptr_addr]=$49; //@line 337 "xmltok_impl.c"
        __label__ = 15; break; //@line 337 "xmltok_impl.c"
      case 15: // $bb14
        var $50=HEAP[$nextTokPtr_addr]; //@line 338 "xmltok_impl.c"
        var $51=HEAP[$ptr_addr]; //@line 338 "xmltok_impl.c"
        HEAP[$50]=$51; //@line 338 "xmltok_impl.c"
        HEAP[$0]=7; //@line 339 "xmltok_impl.c"
        __label__ = 52; break; //@line 339 "xmltok_impl.c"
      case 16: // $bb15
        var $52=HEAP[$ptr_addr]; //@line 341 "xmltok_impl.c"
        var $53=(($52+1)&4294967295); //@line 341 "xmltok_impl.c"
        var $54=HEAP[$nextTokPtr_addr]; //@line 341 "xmltok_impl.c"
        HEAP[$54]=$53; //@line 341 "xmltok_impl.c"
        HEAP[$0]=7; //@line 342 "xmltok_impl.c"
        __label__ = 52; break; //@line 342 "xmltok_impl.c"
      case 17: // $bb16
        var $55=HEAP[$end_addr]; //@line 343 "xmltok_impl.c"
        var $56=($55); //@line 343 "xmltok_impl.c"
        var $57=HEAP[$ptr_addr]; //@line 343 "xmltok_impl.c"
        var $58=($57); //@line 343 "xmltok_impl.c"
        var $59=((($56) - ($58))&4294967295); //@line 343 "xmltok_impl.c"
        var $60=((($59))|0) <= 1; //@line 343 "xmltok_impl.c"
        if ($60) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 343 "xmltok_impl.c"
      case 18: // $bb17
        HEAP[$0]=-2; //@line 343 "xmltok_impl.c"
        __label__ = 52; break; //@line 343 "xmltok_impl.c"
      case 19: // $bb18
        var $61=HEAP[$enc_addr]; //@line 343 "xmltok_impl.c"
        var $62=$61; //@line 343 "xmltok_impl.c"
        var $63=(($62+352)&4294967295); //@line 343 "xmltok_impl.c"
        var $64=HEAP[$63]; //@line 343 "xmltok_impl.c"
        var $65=HEAP[$enc_addr]; //@line 343 "xmltok_impl.c"
        var $66=HEAP[$ptr_addr]; //@line 343 "xmltok_impl.c"
        var $67=FUNCTION_TABLE[$64]($65, $66); //@line 343 "xmltok_impl.c"
        var $68=((($67))|0)!=0; //@line 343 "xmltok_impl.c"
        if ($68) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 343 "xmltok_impl.c"
      case 20: // $bb19
        var $69=HEAP[$nextTokPtr_addr]; //@line 343 "xmltok_impl.c"
        var $70=HEAP[$ptr_addr]; //@line 343 "xmltok_impl.c"
        HEAP[$69]=$70; //@line 343 "xmltok_impl.c"
        HEAP[$0]=0; //@line 343 "xmltok_impl.c"
        __label__ = 52; break; //@line 343 "xmltok_impl.c"
      case 21: // $bb20
        var $71=HEAP[$ptr_addr]; //@line 343 "xmltok_impl.c"
        var $72=(($71+2)&4294967295); //@line 343 "xmltok_impl.c"
        HEAP[$ptr_addr]=$72; //@line 343 "xmltok_impl.c"
        __label__ = 34; break; //@line 343 "xmltok_impl.c"
      case 22: // $bb21
        var $73=HEAP[$end_addr]; //@line 343 "xmltok_impl.c"
        var $74=($73); //@line 343 "xmltok_impl.c"
        var $75=HEAP[$ptr_addr]; //@line 343 "xmltok_impl.c"
        var $76=($75); //@line 343 "xmltok_impl.c"
        var $77=((($74) - ($76))&4294967295); //@line 343 "xmltok_impl.c"
        var $78=((($77))|0) <= 2; //@line 343 "xmltok_impl.c"
        if ($78) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 343 "xmltok_impl.c"
      case 23: // $bb22
        HEAP[$0]=-2; //@line 343 "xmltok_impl.c"
        __label__ = 52; break; //@line 343 "xmltok_impl.c"
      case 24: // $bb23
        var $79=HEAP[$enc_addr]; //@line 343 "xmltok_impl.c"
        var $80=$79; //@line 343 "xmltok_impl.c"
        var $81=(($80+356)&4294967295); //@line 343 "xmltok_impl.c"
        var $82=HEAP[$81]; //@line 343 "xmltok_impl.c"
        var $83=HEAP[$enc_addr]; //@line 343 "xmltok_impl.c"
        var $84=HEAP[$ptr_addr]; //@line 343 "xmltok_impl.c"
        var $85=FUNCTION_TABLE[$82]($83, $84); //@line 343 "xmltok_impl.c"
        var $86=((($85))|0)!=0; //@line 343 "xmltok_impl.c"
        if ($86) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 343 "xmltok_impl.c"
      case 25: // $bb24
        var $87=HEAP[$nextTokPtr_addr]; //@line 343 "xmltok_impl.c"
        var $88=HEAP[$ptr_addr]; //@line 343 "xmltok_impl.c"
        HEAP[$87]=$88; //@line 343 "xmltok_impl.c"
        HEAP[$0]=0; //@line 343 "xmltok_impl.c"
        __label__ = 52; break; //@line 343 "xmltok_impl.c"
      case 26: // $bb25
        var $89=HEAP[$ptr_addr]; //@line 343 "xmltok_impl.c"
        var $90=(($89+3)&4294967295); //@line 343 "xmltok_impl.c"
        HEAP[$ptr_addr]=$90; //@line 343 "xmltok_impl.c"
        __label__ = 34; break; //@line 343 "xmltok_impl.c"
      case 27: // $bb26
        var $91=HEAP[$end_addr]; //@line 343 "xmltok_impl.c"
        var $92=($91); //@line 343 "xmltok_impl.c"
        var $93=HEAP[$ptr_addr]; //@line 343 "xmltok_impl.c"
        var $94=($93); //@line 343 "xmltok_impl.c"
        var $95=((($92) - ($94))&4294967295); //@line 343 "xmltok_impl.c"
        var $96=((($95))|0) <= 3; //@line 343 "xmltok_impl.c"
        if ($96) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 343 "xmltok_impl.c"
      case 28: // $bb27
        HEAP[$0]=-2; //@line 343 "xmltok_impl.c"
        __label__ = 52; break; //@line 343 "xmltok_impl.c"
      case 29: // $bb28
        var $97=HEAP[$enc_addr]; //@line 343 "xmltok_impl.c"
        var $98=$97; //@line 343 "xmltok_impl.c"
        var $99=(($98+360)&4294967295); //@line 343 "xmltok_impl.c"
        var $100=HEAP[$99]; //@line 343 "xmltok_impl.c"
        var $101=HEAP[$enc_addr]; //@line 343 "xmltok_impl.c"
        var $102=HEAP[$ptr_addr]; //@line 343 "xmltok_impl.c"
        var $103=FUNCTION_TABLE[$100]($101, $102); //@line 343 "xmltok_impl.c"
        var $104=((($103))|0)!=0; //@line 343 "xmltok_impl.c"
        if ($104) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 343 "xmltok_impl.c"
      case 30: // $bb29
        var $105=HEAP[$nextTokPtr_addr]; //@line 343 "xmltok_impl.c"
        var $106=HEAP[$ptr_addr]; //@line 343 "xmltok_impl.c"
        HEAP[$105]=$106; //@line 343 "xmltok_impl.c"
        HEAP[$0]=0; //@line 343 "xmltok_impl.c"
        __label__ = 52; break; //@line 343 "xmltok_impl.c"
      case 31: // $bb30
        var $107=HEAP[$ptr_addr]; //@line 343 "xmltok_impl.c"
        var $108=(($107+4)&4294967295); //@line 343 "xmltok_impl.c"
        HEAP[$ptr_addr]=$108; //@line 343 "xmltok_impl.c"
        __label__ = 34; break; //@line 343 "xmltok_impl.c"
      case 32: // $bb31
        var $109=HEAP[$nextTokPtr_addr]; //@line 343 "xmltok_impl.c"
        var $110=HEAP[$ptr_addr]; //@line 343 "xmltok_impl.c"
        HEAP[$109]=$110; //@line 343 "xmltok_impl.c"
        HEAP[$0]=0; //@line 343 "xmltok_impl.c"
        __label__ = 52; break; //@line 343 "xmltok_impl.c"
      case 33: // $bb32
        var $111=HEAP[$ptr_addr]; //@line 345 "xmltok_impl.c"
        var $112=(($111+1)&4294967295); //@line 345 "xmltok_impl.c"
        HEAP[$ptr_addr]=$112; //@line 345 "xmltok_impl.c"
        __label__ = 34; break; //@line 345 "xmltok_impl.c"
      case 34: // $bb33
        __label__ = 50; break; //@line 345 "xmltok_impl.c"
      case 35: // $bb34
        var $113=HEAP[$enc_addr]; //@line 349 "xmltok_impl.c"
        var $114=$113; //@line 349 "xmltok_impl.c"
        var $115=HEAP[$ptr_addr]; //@line 349 "xmltok_impl.c"
        var $116=HEAP[$115]; //@line 349 "xmltok_impl.c"
        var $117=unSign(($116), 8, 0); //@line 349 "xmltok_impl.c"
        var $118=(($114+72)&4294967295); //@line 349 "xmltok_impl.c"
        var $119=(($118+$117)&4294967295); //@line 349 "xmltok_impl.c"
        var $120=HEAP[$119]; //@line 349 "xmltok_impl.c"
        var $121=unSign(($120), 8, 0); //@line 349 "xmltok_impl.c"
        if ($121 == 0) {
          __label__ = 48; break;
        }
        else if ($121 == 1) {
          __label__ = 48; break;
        }
        else if ($121 == 4) {
          __label__ = 48; break;
        }
        else if ($121 == 5) {
          __label__ = 36; break;
        }
        else if ($121 == 6) {
          __label__ = 40; break;
        }
        else if ($121 == 7) {
          __label__ = 44; break;
        }
        else if ($121 == 8) {
          __label__ = 48; break;
        }
        else if ($121 == 9) {
          __label__ = 48; break;
        }
        else if ($121 == 10) {
          __label__ = 48; break;
        }
        else {
        __label__ = 49; break;
        }
        
      case 36: // $bb35
        var $122=HEAP[$end_addr]; //@line 358 "xmltok_impl.c"
        var $123=($122); //@line 358 "xmltok_impl.c"
        var $124=HEAP[$ptr_addr]; //@line 358 "xmltok_impl.c"
        var $125=($124); //@line 358 "xmltok_impl.c"
        var $126=((($123) - ($125))&4294967295); //@line 358 "xmltok_impl.c"
        var $127=((($126))|0) <= 1; //@line 358 "xmltok_impl.c"
        if ($127) { __label__ = 38; break; } else { __label__ = 37; break; } //@line 358 "xmltok_impl.c"
      case 37: // $bb36
        var $128=HEAP[$enc_addr]; //@line 358 "xmltok_impl.c"
        var $129=$128; //@line 358 "xmltok_impl.c"
        var $130=(($129+352)&4294967295); //@line 358 "xmltok_impl.c"
        var $131=HEAP[$130]; //@line 358 "xmltok_impl.c"
        var $132=HEAP[$enc_addr]; //@line 358 "xmltok_impl.c"
        var $133=HEAP[$ptr_addr]; //@line 358 "xmltok_impl.c"
        var $134=FUNCTION_TABLE[$131]($132, $133); //@line 358 "xmltok_impl.c"
        var $135=((($134))|0)!=0; //@line 358 "xmltok_impl.c"
        if ($135) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 358 "xmltok_impl.c"
      case 38: // $bb37
        var $136=HEAP[$nextTokPtr_addr]; //@line 358 "xmltok_impl.c"
        var $137=HEAP[$ptr_addr]; //@line 358 "xmltok_impl.c"
        HEAP[$136]=$137; //@line 358 "xmltok_impl.c"
        HEAP[$0]=6; //@line 358 "xmltok_impl.c"
        __label__ = 52; break; //@line 358 "xmltok_impl.c"
      case 39: // $bb38
        var $138=HEAP[$ptr_addr]; //@line 358 "xmltok_impl.c"
        var $139=(($138+2)&4294967295); //@line 358 "xmltok_impl.c"
        HEAP[$ptr_addr]=$139; //@line 358 "xmltok_impl.c"
        __label__ = 50; break; //@line 358 "xmltok_impl.c"
      case 40: // $bb39
        var $140=HEAP[$end_addr]; //@line 358 "xmltok_impl.c"
        var $141=($140); //@line 358 "xmltok_impl.c"
        var $142=HEAP[$ptr_addr]; //@line 358 "xmltok_impl.c"
        var $143=($142); //@line 358 "xmltok_impl.c"
        var $144=((($141) - ($143))&4294967295); //@line 358 "xmltok_impl.c"
        var $145=((($144))|0) <= 2; //@line 358 "xmltok_impl.c"
        if ($145) { __label__ = 42; break; } else { __label__ = 41; break; } //@line 358 "xmltok_impl.c"
      case 41: // $bb40
        var $146=HEAP[$enc_addr]; //@line 358 "xmltok_impl.c"
        var $147=$146; //@line 358 "xmltok_impl.c"
        var $148=(($147+356)&4294967295); //@line 358 "xmltok_impl.c"
        var $149=HEAP[$148]; //@line 358 "xmltok_impl.c"
        var $150=HEAP[$enc_addr]; //@line 358 "xmltok_impl.c"
        var $151=HEAP[$ptr_addr]; //@line 358 "xmltok_impl.c"
        var $152=FUNCTION_TABLE[$149]($150, $151); //@line 358 "xmltok_impl.c"
        var $153=((($152))|0)!=0; //@line 358 "xmltok_impl.c"
        if ($153) { __label__ = 42; break; } else { __label__ = 43; break; } //@line 358 "xmltok_impl.c"
      case 42: // $bb41
        var $154=HEAP[$nextTokPtr_addr]; //@line 358 "xmltok_impl.c"
        var $155=HEAP[$ptr_addr]; //@line 358 "xmltok_impl.c"
        HEAP[$154]=$155; //@line 358 "xmltok_impl.c"
        HEAP[$0]=6; //@line 358 "xmltok_impl.c"
        __label__ = 52; break; //@line 358 "xmltok_impl.c"
      case 43: // $bb42
        var $156=HEAP[$ptr_addr]; //@line 358 "xmltok_impl.c"
        var $157=(($156+3)&4294967295); //@line 358 "xmltok_impl.c"
        HEAP[$ptr_addr]=$157; //@line 358 "xmltok_impl.c"
        __label__ = 50; break; //@line 358 "xmltok_impl.c"
      case 44: // $bb43
        var $158=HEAP[$end_addr]; //@line 358 "xmltok_impl.c"
        var $159=($158); //@line 358 "xmltok_impl.c"
        var $160=HEAP[$ptr_addr]; //@line 358 "xmltok_impl.c"
        var $161=($160); //@line 358 "xmltok_impl.c"
        var $162=((($159) - ($161))&4294967295); //@line 358 "xmltok_impl.c"
        var $163=((($162))|0) <= 3; //@line 358 "xmltok_impl.c"
        if ($163) { __label__ = 46; break; } else { __label__ = 45; break; } //@line 358 "xmltok_impl.c"
      case 45: // $bb44
        var $164=HEAP[$enc_addr]; //@line 358 "xmltok_impl.c"
        var $165=$164; //@line 358 "xmltok_impl.c"
        var $166=(($165+360)&4294967295); //@line 358 "xmltok_impl.c"
        var $167=HEAP[$166]; //@line 358 "xmltok_impl.c"
        var $168=HEAP[$enc_addr]; //@line 358 "xmltok_impl.c"
        var $169=HEAP[$ptr_addr]; //@line 358 "xmltok_impl.c"
        var $170=FUNCTION_TABLE[$167]($168, $169); //@line 358 "xmltok_impl.c"
        var $171=((($170))|0)!=0; //@line 358 "xmltok_impl.c"
        if ($171) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 358 "xmltok_impl.c"
      case 46: // $bb45
        var $172=HEAP[$nextTokPtr_addr]; //@line 358 "xmltok_impl.c"
        var $173=HEAP[$ptr_addr]; //@line 358 "xmltok_impl.c"
        HEAP[$172]=$173; //@line 358 "xmltok_impl.c"
        HEAP[$0]=6; //@line 358 "xmltok_impl.c"
        __label__ = 52; break; //@line 358 "xmltok_impl.c"
      case 47: // $bb46
        var $174=HEAP[$ptr_addr]; //@line 358 "xmltok_impl.c"
        var $175=(($174+4)&4294967295); //@line 358 "xmltok_impl.c"
        HEAP[$ptr_addr]=$175; //@line 358 "xmltok_impl.c"
        __label__ = 50; break; //@line 358 "xmltok_impl.c"
      case 48: // $bb47
        var $176=HEAP[$nextTokPtr_addr]; //@line 366 "xmltok_impl.c"
        var $177=HEAP[$ptr_addr]; //@line 366 "xmltok_impl.c"
        HEAP[$176]=$177; //@line 366 "xmltok_impl.c"
        HEAP[$0]=6; //@line 367 "xmltok_impl.c"
        __label__ = 52; break; //@line 367 "xmltok_impl.c"
      case 49: // $bb48
        var $178=HEAP[$ptr_addr]; //@line 369 "xmltok_impl.c"
        var $179=(($178+1)&4294967295); //@line 369 "xmltok_impl.c"
        HEAP[$ptr_addr]=$179; //@line 369 "xmltok_impl.c"
        __label__ = 50; break; //@line 369 "xmltok_impl.c"
      case 50: // $bb49
        var $180=HEAP[$ptr_addr]; //@line 348 "xmltok_impl.c"
        var $181=HEAP[$end_addr]; //@line 348 "xmltok_impl.c"
        var $182=($180)!=($181); //@line 348 "xmltok_impl.c"
        if ($182) { __label__ = 35; break; } else { __label__ = 51; break; } //@line 348 "xmltok_impl.c"
      case 51: // $bb50
        var $183=HEAP[$nextTokPtr_addr]; //@line 373 "xmltok_impl.c"
        var $184=HEAP[$ptr_addr]; //@line 373 "xmltok_impl.c"
        HEAP[$183]=$184; //@line 373 "xmltok_impl.c"
        HEAP[$0]=6; //@line 374 "xmltok_impl.c"
        __label__ = 52; break; //@line 374 "xmltok_impl.c"
      case 52: // $bb51
        var $185=HEAP[$0]; //@line 306 "xmltok_impl.c"
        HEAP[$retval]=$185; //@line 306 "xmltok_impl.c"
        __label__ = 53; break; //@line 306 "xmltok_impl.c"
      case 53: // $return
        var $retval52=HEAP[$retval]; //@line 306 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval52; //@line 306 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_scanEndTag($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 383 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 383 "xmltok_impl.c"
        var $3=($1)==($2); //@line 383 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 383 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 384 "xmltok_impl.c"
        __label__ = 51; break; //@line 384 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$enc_addr]; //@line 385 "xmltok_impl.c"
        var $5=$4; //@line 385 "xmltok_impl.c"
        var $6=HEAP[$ptr_addr]; //@line 385 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 385 "xmltok_impl.c"
        var $8=unSign(($7), 8, 0); //@line 385 "xmltok_impl.c"
        var $9=(($5+72)&4294967295); //@line 385 "xmltok_impl.c"
        var $10=(($9+$8)&4294967295); //@line 385 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 385 "xmltok_impl.c"
        var $12=unSign(($11), 8, 0); //@line 385 "xmltok_impl.c"
        if ($12 == 5) {
          __label__ = 5; break;
        }
        else if ($12 == 6) {
          __label__ = 10; break;
        }
        else if ($12 == 7) {
          __label__ = 15; break;
        }
        else if ($12 == 22) {
          __label__ = 4; break;
        }
        else if ($12 == 24) {
          __label__ = 4; break;
        }
        else if ($12 == 29) {
          __label__ = 3; break;
        }
        else {
        __label__ = 20; break;
        }
        
      case 3: // $bb2
        var $13=HEAP[$nextTokPtr_addr]; //@line 386 "xmltok_impl.c"
        var $14=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        HEAP[$13]=$14; //@line 386 "xmltok_impl.c"
        HEAP[$0]=0; //@line 386 "xmltok_impl.c"
        __label__ = 51; break; //@line 386 "xmltok_impl.c"
      case 4: // $bb3
        var $15=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        var $16=(($15+1)&4294967295); //@line 386 "xmltok_impl.c"
        HEAP[$ptr_addr]=$16; //@line 386 "xmltok_impl.c"
        __label__ = 21; break; //@line 386 "xmltok_impl.c"
      case 5: // $bb4
        var $17=HEAP[$end_addr]; //@line 386 "xmltok_impl.c"
        var $18=($17); //@line 386 "xmltok_impl.c"
        var $19=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        var $20=($19); //@line 386 "xmltok_impl.c"
        var $21=((($18) - ($20))&4294967295); //@line 386 "xmltok_impl.c"
        var $22=((($21))|0) <= 1; //@line 386 "xmltok_impl.c"
        if ($22) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 386 "xmltok_impl.c"
      case 6: // $bb5
        HEAP[$0]=-2; //@line 386 "xmltok_impl.c"
        __label__ = 51; break; //@line 386 "xmltok_impl.c"
      case 7: // $bb6
        var $23=HEAP[$enc_addr]; //@line 386 "xmltok_impl.c"
        var $24=$23; //@line 386 "xmltok_impl.c"
        var $25=(($24+340)&4294967295); //@line 386 "xmltok_impl.c"
        var $26=HEAP[$25]; //@line 386 "xmltok_impl.c"
        var $27=HEAP[$enc_addr]; //@line 386 "xmltok_impl.c"
        var $28=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        var $29=FUNCTION_TABLE[$26]($27, $28); //@line 386 "xmltok_impl.c"
        var $30=((($29))|0)==0; //@line 386 "xmltok_impl.c"
        if ($30) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 386 "xmltok_impl.c"
      case 8: // $bb7
        var $31=HEAP[$nextTokPtr_addr]; //@line 386 "xmltok_impl.c"
        var $32=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        HEAP[$31]=$32; //@line 386 "xmltok_impl.c"
        HEAP[$0]=0; //@line 386 "xmltok_impl.c"
        __label__ = 51; break; //@line 386 "xmltok_impl.c"
      case 9: // $bb8
        var $33=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        var $34=(($33+2)&4294967295); //@line 386 "xmltok_impl.c"
        HEAP[$ptr_addr]=$34; //@line 386 "xmltok_impl.c"
        __label__ = 21; break; //@line 386 "xmltok_impl.c"
      case 10: // $bb9
        var $35=HEAP[$end_addr]; //@line 386 "xmltok_impl.c"
        var $36=($35); //@line 386 "xmltok_impl.c"
        var $37=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        var $38=($37); //@line 386 "xmltok_impl.c"
        var $39=((($36) - ($38))&4294967295); //@line 386 "xmltok_impl.c"
        var $40=((($39))|0) <= 2; //@line 386 "xmltok_impl.c"
        if ($40) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 386 "xmltok_impl.c"
      case 11: // $bb10
        HEAP[$0]=-2; //@line 386 "xmltok_impl.c"
        __label__ = 51; break; //@line 386 "xmltok_impl.c"
      case 12: // $bb11
        var $41=HEAP[$enc_addr]; //@line 386 "xmltok_impl.c"
        var $42=$41; //@line 386 "xmltok_impl.c"
        var $43=(($42+344)&4294967295); //@line 386 "xmltok_impl.c"
        var $44=HEAP[$43]; //@line 386 "xmltok_impl.c"
        var $45=HEAP[$enc_addr]; //@line 386 "xmltok_impl.c"
        var $46=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        var $47=FUNCTION_TABLE[$44]($45, $46); //@line 386 "xmltok_impl.c"
        var $48=((($47))|0)==0; //@line 386 "xmltok_impl.c"
        if ($48) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 386 "xmltok_impl.c"
      case 13: // $bb12
        var $49=HEAP[$nextTokPtr_addr]; //@line 386 "xmltok_impl.c"
        var $50=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        HEAP[$49]=$50; //@line 386 "xmltok_impl.c"
        HEAP[$0]=0; //@line 386 "xmltok_impl.c"
        __label__ = 51; break; //@line 386 "xmltok_impl.c"
      case 14: // $bb13
        var $51=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        var $52=(($51+3)&4294967295); //@line 386 "xmltok_impl.c"
        HEAP[$ptr_addr]=$52; //@line 386 "xmltok_impl.c"
        __label__ = 21; break; //@line 386 "xmltok_impl.c"
      case 15: // $bb14
        var $53=HEAP[$end_addr]; //@line 386 "xmltok_impl.c"
        var $54=($53); //@line 386 "xmltok_impl.c"
        var $55=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        var $56=($55); //@line 386 "xmltok_impl.c"
        var $57=((($54) - ($56))&4294967295); //@line 386 "xmltok_impl.c"
        var $58=((($57))|0) <= 3; //@line 386 "xmltok_impl.c"
        if ($58) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 386 "xmltok_impl.c"
      case 16: // $bb15
        HEAP[$0]=-2; //@line 386 "xmltok_impl.c"
        __label__ = 51; break; //@line 386 "xmltok_impl.c"
      case 17: // $bb16
        var $59=HEAP[$enc_addr]; //@line 386 "xmltok_impl.c"
        var $60=$59; //@line 386 "xmltok_impl.c"
        var $61=(($60+348)&4294967295); //@line 386 "xmltok_impl.c"
        var $62=HEAP[$61]; //@line 386 "xmltok_impl.c"
        var $63=HEAP[$enc_addr]; //@line 386 "xmltok_impl.c"
        var $64=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        var $65=FUNCTION_TABLE[$62]($63, $64); //@line 386 "xmltok_impl.c"
        var $66=((($65))|0)==0; //@line 386 "xmltok_impl.c"
        if ($66) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 386 "xmltok_impl.c"
      case 18: // $bb17
        var $67=HEAP[$nextTokPtr_addr]; //@line 386 "xmltok_impl.c"
        var $68=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        HEAP[$67]=$68; //@line 386 "xmltok_impl.c"
        HEAP[$0]=0; //@line 386 "xmltok_impl.c"
        __label__ = 51; break; //@line 386 "xmltok_impl.c"
      case 19: // $bb18
        var $69=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        var $70=(($69+4)&4294967295); //@line 386 "xmltok_impl.c"
        HEAP[$ptr_addr]=$70; //@line 386 "xmltok_impl.c"
        __label__ = 21; break; //@line 386 "xmltok_impl.c"
      case 20: // $bb19
        var $71=HEAP[$nextTokPtr_addr]; //@line 388 "xmltok_impl.c"
        var $72=HEAP[$ptr_addr]; //@line 388 "xmltok_impl.c"
        HEAP[$71]=$72; //@line 388 "xmltok_impl.c"
        HEAP[$0]=0; //@line 389 "xmltok_impl.c"
        __label__ = 51; break; //@line 389 "xmltok_impl.c"
      case 21: // $bb20
        __label__ = 49; break; //@line 389 "xmltok_impl.c"
      case 22: // $bb21
        var $73=HEAP[$enc_addr]; //@line 392 "xmltok_impl.c"
        var $74=$73; //@line 392 "xmltok_impl.c"
        var $75=HEAP[$ptr_addr]; //@line 392 "xmltok_impl.c"
        var $76=HEAP[$75]; //@line 392 "xmltok_impl.c"
        var $77=unSign(($76), 8, 0); //@line 392 "xmltok_impl.c"
        var $78=(($74+72)&4294967295); //@line 392 "xmltok_impl.c"
        var $79=(($78+$77)&4294967295); //@line 392 "xmltok_impl.c"
        var $80=HEAP[$79]; //@line 392 "xmltok_impl.c"
        var $81=unSign(($80), 8, 0); //@line 392 "xmltok_impl.c"
        if ($81 == 5) {
          __label__ = 25; break;
        }
        else if ($81 == 6) {
          __label__ = 30; break;
        }
        else if ($81 == 7) {
          __label__ = 35; break;
        }
        else if ($81 == 9) {
          __label__ = 40; break;
        }
        else if ($81 == 10) {
          __label__ = 40; break;
        }
        else if ($81 == 11) {
          __label__ = 47; break;
        }
        else if ($81 == 21) {
          __label__ = 40; break;
        }
        else if ($81 == 22) {
          __label__ = 24; break;
        }
        else if ($81 == 24) {
          __label__ = 24; break;
        }
        else if ($81 == 25) {
          __label__ = 24; break;
        }
        else if ($81 == 26) {
          __label__ = 24; break;
        }
        else if ($81 == 27) {
          __label__ = 24; break;
        }
        else if ($81 == 29) {
          __label__ = 23; break;
        }
        else {
        __label__ = 48; break;
        }
        
      case 23: // $bb22
        var $82=HEAP[$nextTokPtr_addr]; //@line 393 "xmltok_impl.c"
        var $83=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        HEAP[$82]=$83; //@line 393 "xmltok_impl.c"
        HEAP[$0]=0; //@line 393 "xmltok_impl.c"
        __label__ = 51; break; //@line 393 "xmltok_impl.c"
      case 24: // $bb23
        var $84=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        var $85=(($84+1)&4294967295); //@line 393 "xmltok_impl.c"
        HEAP[$ptr_addr]=$85; //@line 393 "xmltok_impl.c"
        __label__ = 49; break; //@line 393 "xmltok_impl.c"
      case 25: // $bb24
        var $86=HEAP[$end_addr]; //@line 393 "xmltok_impl.c"
        var $87=($86); //@line 393 "xmltok_impl.c"
        var $88=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        var $89=($88); //@line 393 "xmltok_impl.c"
        var $90=((($87) - ($89))&4294967295); //@line 393 "xmltok_impl.c"
        var $91=((($90))|0) <= 1; //@line 393 "xmltok_impl.c"
        if ($91) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 393 "xmltok_impl.c"
      case 26: // $bb25
        HEAP[$0]=-2; //@line 393 "xmltok_impl.c"
        __label__ = 51; break; //@line 393 "xmltok_impl.c"
      case 27: // $bb26
        var $92=HEAP[$enc_addr]; //@line 393 "xmltok_impl.c"
        var $93=$92; //@line 393 "xmltok_impl.c"
        var $94=(($93+328)&4294967295); //@line 393 "xmltok_impl.c"
        var $95=HEAP[$94]; //@line 393 "xmltok_impl.c"
        var $96=HEAP[$enc_addr]; //@line 393 "xmltok_impl.c"
        var $97=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        var $98=FUNCTION_TABLE[$95]($96, $97); //@line 393 "xmltok_impl.c"
        var $99=((($98))|0)==0; //@line 393 "xmltok_impl.c"
        if ($99) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 393 "xmltok_impl.c"
      case 28: // $bb27
        var $100=HEAP[$nextTokPtr_addr]; //@line 393 "xmltok_impl.c"
        var $101=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        HEAP[$100]=$101; //@line 393 "xmltok_impl.c"
        HEAP[$0]=0; //@line 393 "xmltok_impl.c"
        __label__ = 51; break; //@line 393 "xmltok_impl.c"
      case 29: // $bb28
        var $102=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        var $103=(($102+2)&4294967295); //@line 393 "xmltok_impl.c"
        HEAP[$ptr_addr]=$103; //@line 393 "xmltok_impl.c"
        __label__ = 49; break; //@line 393 "xmltok_impl.c"
      case 30: // $bb29
        var $104=HEAP[$end_addr]; //@line 393 "xmltok_impl.c"
        var $105=($104); //@line 393 "xmltok_impl.c"
        var $106=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        var $107=($106); //@line 393 "xmltok_impl.c"
        var $108=((($105) - ($107))&4294967295); //@line 393 "xmltok_impl.c"
        var $109=((($108))|0) <= 2; //@line 393 "xmltok_impl.c"
        if ($109) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 393 "xmltok_impl.c"
      case 31: // $bb30
        HEAP[$0]=-2; //@line 393 "xmltok_impl.c"
        __label__ = 51; break; //@line 393 "xmltok_impl.c"
      case 32: // $bb31
        var $110=HEAP[$enc_addr]; //@line 393 "xmltok_impl.c"
        var $111=$110; //@line 393 "xmltok_impl.c"
        var $112=(($111+332)&4294967295); //@line 393 "xmltok_impl.c"
        var $113=HEAP[$112]; //@line 393 "xmltok_impl.c"
        var $114=HEAP[$enc_addr]; //@line 393 "xmltok_impl.c"
        var $115=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        var $116=FUNCTION_TABLE[$113]($114, $115); //@line 393 "xmltok_impl.c"
        var $117=((($116))|0)==0; //@line 393 "xmltok_impl.c"
        if ($117) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 393 "xmltok_impl.c"
      case 33: // $bb32
        var $118=HEAP[$nextTokPtr_addr]; //@line 393 "xmltok_impl.c"
        var $119=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        HEAP[$118]=$119; //@line 393 "xmltok_impl.c"
        HEAP[$0]=0; //@line 393 "xmltok_impl.c"
        __label__ = 51; break; //@line 393 "xmltok_impl.c"
      case 34: // $bb33
        var $120=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        var $121=(($120+3)&4294967295); //@line 393 "xmltok_impl.c"
        HEAP[$ptr_addr]=$121; //@line 393 "xmltok_impl.c"
        __label__ = 49; break; //@line 393 "xmltok_impl.c"
      case 35: // $bb34
        var $122=HEAP[$end_addr]; //@line 393 "xmltok_impl.c"
        var $123=($122); //@line 393 "xmltok_impl.c"
        var $124=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        var $125=($124); //@line 393 "xmltok_impl.c"
        var $126=((($123) - ($125))&4294967295); //@line 393 "xmltok_impl.c"
        var $127=((($126))|0) <= 3; //@line 393 "xmltok_impl.c"
        if ($127) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 393 "xmltok_impl.c"
      case 36: // $bb35
        HEAP[$0]=-2; //@line 393 "xmltok_impl.c"
        __label__ = 51; break; //@line 393 "xmltok_impl.c"
      case 37: // $bb36
        var $128=HEAP[$enc_addr]; //@line 393 "xmltok_impl.c"
        var $129=$128; //@line 393 "xmltok_impl.c"
        var $130=(($129+336)&4294967295); //@line 393 "xmltok_impl.c"
        var $131=HEAP[$130]; //@line 393 "xmltok_impl.c"
        var $132=HEAP[$enc_addr]; //@line 393 "xmltok_impl.c"
        var $133=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        var $134=FUNCTION_TABLE[$131]($132, $133); //@line 393 "xmltok_impl.c"
        var $135=((($134))|0)==0; //@line 393 "xmltok_impl.c"
        if ($135) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 393 "xmltok_impl.c"
      case 38: // $bb37
        var $136=HEAP[$nextTokPtr_addr]; //@line 393 "xmltok_impl.c"
        var $137=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        HEAP[$136]=$137; //@line 393 "xmltok_impl.c"
        HEAP[$0]=0; //@line 393 "xmltok_impl.c"
        __label__ = 51; break; //@line 393 "xmltok_impl.c"
      case 39: // $bb38
        var $138=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        var $139=(($138+4)&4294967295); //@line 393 "xmltok_impl.c"
        HEAP[$ptr_addr]=$139; //@line 393 "xmltok_impl.c"
        __label__ = 49; break; //@line 393 "xmltok_impl.c"
      case 40: // $bb39
        var $140=HEAP[$ptr_addr]; //@line 395 "xmltok_impl.c"
        var $141=(($140+1)&4294967295); //@line 395 "xmltok_impl.c"
        HEAP[$ptr_addr]=$141; //@line 395 "xmltok_impl.c"
        __label__ = 45; break; //@line 395 "xmltok_impl.c"
      case 41: // $bb40
        var $142=HEAP[$enc_addr]; //@line 396 "xmltok_impl.c"
        var $143=$142; //@line 396 "xmltok_impl.c"
        var $144=HEAP[$ptr_addr]; //@line 396 "xmltok_impl.c"
        var $145=HEAP[$144]; //@line 396 "xmltok_impl.c"
        var $146=unSign(($145), 8, 0); //@line 396 "xmltok_impl.c"
        var $147=(($143+72)&4294967295); //@line 396 "xmltok_impl.c"
        var $148=(($147+$146)&4294967295); //@line 396 "xmltok_impl.c"
        var $149=HEAP[$148]; //@line 396 "xmltok_impl.c"
        var $150=unSign(($149), 8, 0); //@line 396 "xmltok_impl.c"
        if ($150 == 9) {
          __label__ = 42; break;
        }
        else if ($150 == 10) {
          __label__ = 42; break;
        }
        else if ($150 == 11) {
          __label__ = 43; break;
        }
        else if ($150 == 21) {
          __label__ = 42; break;
        }
        else {
        __label__ = 44; break;
        }
        
      case 42: // $bb41
        var $151=HEAP[$ptr_addr]; //@line 395 "xmltok_impl.c"
        var $152=(($151+1)&4294967295); //@line 395 "xmltok_impl.c"
        HEAP[$ptr_addr]=$152; //@line 395 "xmltok_impl.c"
        __label__ = 45; break; //@line 395 "xmltok_impl.c"
      case 43: // $bb42
        var $153=HEAP[$ptr_addr]; //@line 400 "xmltok_impl.c"
        var $154=(($153+1)&4294967295); //@line 400 "xmltok_impl.c"
        var $155=HEAP[$nextTokPtr_addr]; //@line 400 "xmltok_impl.c"
        HEAP[$155]=$154; //@line 400 "xmltok_impl.c"
        HEAP[$0]=5; //@line 401 "xmltok_impl.c"
        __label__ = 51; break; //@line 401 "xmltok_impl.c"
      case 44: // $bb43
        var $156=HEAP[$nextTokPtr_addr]; //@line 403 "xmltok_impl.c"
        var $157=HEAP[$ptr_addr]; //@line 403 "xmltok_impl.c"
        HEAP[$156]=$157; //@line 403 "xmltok_impl.c"
        HEAP[$0]=0; //@line 404 "xmltok_impl.c"
        __label__ = 51; break; //@line 404 "xmltok_impl.c"
      case 45: // $bb44
        var $158=HEAP[$ptr_addr]; //@line 395 "xmltok_impl.c"
        var $159=HEAP[$end_addr]; //@line 395 "xmltok_impl.c"
        var $160=($158)!=($159); //@line 395 "xmltok_impl.c"
        if ($160) { __label__ = 41; break; } else { __label__ = 46; break; } //@line 395 "xmltok_impl.c"
      case 46: // $bb45
        HEAP[$0]=-1; //@line 407 "xmltok_impl.c"
        __label__ = 51; break; //@line 407 "xmltok_impl.c"
      case 47: // $bb46
        var $161=HEAP[$ptr_addr]; //@line 416 "xmltok_impl.c"
        var $162=(($161+1)&4294967295); //@line 416 "xmltok_impl.c"
        var $163=HEAP[$nextTokPtr_addr]; //@line 416 "xmltok_impl.c"
        HEAP[$163]=$162; //@line 416 "xmltok_impl.c"
        HEAP[$0]=5; //@line 417 "xmltok_impl.c"
        __label__ = 51; break; //@line 417 "xmltok_impl.c"
      case 48: // $bb47
        var $164=HEAP[$nextTokPtr_addr]; //@line 419 "xmltok_impl.c"
        var $165=HEAP[$ptr_addr]; //@line 419 "xmltok_impl.c"
        HEAP[$164]=$165; //@line 419 "xmltok_impl.c"
        HEAP[$0]=0; //@line 420 "xmltok_impl.c"
        __label__ = 51; break; //@line 420 "xmltok_impl.c"
      case 49: // $bb48
        var $166=HEAP[$ptr_addr]; //@line 391 "xmltok_impl.c"
        var $167=HEAP[$end_addr]; //@line 391 "xmltok_impl.c"
        var $168=($166)!=($167); //@line 391 "xmltok_impl.c"
        if ($168) { __label__ = 22; break; } else { __label__ = 50; break; } //@line 391 "xmltok_impl.c"
      case 50: // $bb49
        HEAP[$0]=-1; //@line 423 "xmltok_impl.c"
        __label__ = 51; break; //@line 423 "xmltok_impl.c"
      case 51: // $bb50
        var $169=HEAP[$0]; //@line 384 "xmltok_impl.c"
        HEAP[$retval]=$169; //@line 384 "xmltok_impl.c"
        __label__ = 52; break; //@line 384 "xmltok_impl.c"
      case 52: // $return
        var $retval51=HEAP[$retval]; //@line 384 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval51; //@line 384 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_scanHexCharRef($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 432 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 432 "xmltok_impl.c"
        var $3=($1)!=($2); //@line 432 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 9; break; } //@line 432 "xmltok_impl.c"
      case 1: // $bb
        var $4=HEAP[$enc_addr]; //@line 433 "xmltok_impl.c"
        var $5=$4; //@line 433 "xmltok_impl.c"
        var $6=HEAP[$ptr_addr]; //@line 433 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 433 "xmltok_impl.c"
        var $8=unSign(($7), 8, 0); //@line 433 "xmltok_impl.c"
        var $9=(($5+72)&4294967295); //@line 433 "xmltok_impl.c"
        var $10=(($9+$8)&4294967295); //@line 433 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 433 "xmltok_impl.c"
        var $12=unSign(($11), 8, 0); //@line 433 "xmltok_impl.c"
        if ($12 == 24) {
          __label__ = 2; break;
        }
        else if ($12 == 25) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 2: // $bb1
        var $13=HEAP[$ptr_addr]; //@line 441 "xmltok_impl.c"
        var $14=(($13+1)&4294967295); //@line 441 "xmltok_impl.c"
        HEAP[$ptr_addr]=$14; //@line 441 "xmltok_impl.c"
        __label__ = 8; break; //@line 441 "xmltok_impl.c"
      case 3: // $bb2
        var $15=HEAP[$nextTokPtr_addr]; //@line 438 "xmltok_impl.c"
        var $16=HEAP[$ptr_addr]; //@line 438 "xmltok_impl.c"
        HEAP[$15]=$16; //@line 438 "xmltok_impl.c"
        HEAP[$0]=0; //@line 439 "xmltok_impl.c"
        __label__ = 10; break; //@line 439 "xmltok_impl.c"
      case 4: // $bb3
        var $17=HEAP[$enc_addr]; //@line 442 "xmltok_impl.c"
        var $18=$17; //@line 442 "xmltok_impl.c"
        var $19=HEAP[$ptr_addr]; //@line 442 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 442 "xmltok_impl.c"
        var $21=unSign(($20), 8, 0); //@line 442 "xmltok_impl.c"
        var $22=(($18+72)&4294967295); //@line 442 "xmltok_impl.c"
        var $23=(($22+$21)&4294967295); //@line 442 "xmltok_impl.c"
        var $24=HEAP[$23]; //@line 442 "xmltok_impl.c"
        var $25=unSign(($24), 8, 0); //@line 442 "xmltok_impl.c"
        if ($25 == 18) {
          __label__ = 6; break;
        }
        else if ($25 == 24) {
          __label__ = 5; break;
        }
        else if ($25 == 25) {
          __label__ = 5; break;
        }
        else {
        __label__ = 7; break;
        }
        
      case 5: // $bb4
        var $26=HEAP[$ptr_addr]; //@line 441 "xmltok_impl.c"
        var $27=(($26+1)&4294967295); //@line 441 "xmltok_impl.c"
        HEAP[$ptr_addr]=$27; //@line 441 "xmltok_impl.c"
        __label__ = 8; break; //@line 441 "xmltok_impl.c"
      case 6: // $bb5
        var $28=HEAP[$ptr_addr]; //@line 447 "xmltok_impl.c"
        var $29=(($28+1)&4294967295); //@line 447 "xmltok_impl.c"
        var $30=HEAP[$nextTokPtr_addr]; //@line 447 "xmltok_impl.c"
        HEAP[$30]=$29; //@line 447 "xmltok_impl.c"
        HEAP[$0]=10; //@line 448 "xmltok_impl.c"
        __label__ = 10; break; //@line 448 "xmltok_impl.c"
      case 7: // $bb6
        var $31=HEAP[$nextTokPtr_addr]; //@line 450 "xmltok_impl.c"
        var $32=HEAP[$ptr_addr]; //@line 450 "xmltok_impl.c"
        HEAP[$31]=$32; //@line 450 "xmltok_impl.c"
        HEAP[$0]=0; //@line 451 "xmltok_impl.c"
        __label__ = 10; break; //@line 451 "xmltok_impl.c"
      case 8: // $bb7
        var $33=HEAP[$ptr_addr]; //@line 441 "xmltok_impl.c"
        var $34=HEAP[$end_addr]; //@line 441 "xmltok_impl.c"
        var $35=($33)!=($34); //@line 441 "xmltok_impl.c"
        if ($35) { __label__ = 4; break; } else { __label__ = 9; break; } //@line 441 "xmltok_impl.c"
      case 9: // $bb8
        HEAP[$0]=-1; //@line 455 "xmltok_impl.c"
        __label__ = 10; break; //@line 455 "xmltok_impl.c"
      case 10: // $bb9
        var $36=HEAP[$0]; //@line 439 "xmltok_impl.c"
        HEAP[$retval]=$36; //@line 439 "xmltok_impl.c"
        __label__ = 11; break; //@line 439 "xmltok_impl.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 439 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 439 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_scanCharRef($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 464 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 464 "xmltok_impl.c"
        var $3=($1)!=($2); //@line 464 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 11; break; } //@line 464 "xmltok_impl.c"
      case 1: // $bb
        var $4=HEAP[$ptr_addr]; //@line 465 "xmltok_impl.c"
        var $5=HEAP[$4]; //@line 465 "xmltok_impl.c"
        var $6=reSign(($5), 8, 0)==120; //@line 465 "xmltok_impl.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 465 "xmltok_impl.c"
      case 2: // $bb1
        var $7=HEAP[$ptr_addr]; //@line 466 "xmltok_impl.c"
        var $8=(($7+1)&4294967295); //@line 466 "xmltok_impl.c"
        var $9=HEAP[$enc_addr]; //@line 466 "xmltok_impl.c"
        var $10=HEAP[$end_addr]; //@line 466 "xmltok_impl.c"
        var $11=HEAP[$nextTokPtr_addr]; //@line 466 "xmltok_impl.c"
        var $12=_normal_scanHexCharRef($9, $8, $10, $11); //@line 466 "xmltok_impl.c"
        HEAP[$0]=$12; //@line 466 "xmltok_impl.c"
        __label__ = 12; break; //@line 466 "xmltok_impl.c"
      case 3: // $bb2
        var $13=HEAP[$enc_addr]; //@line 467 "xmltok_impl.c"
        var $14=$13; //@line 467 "xmltok_impl.c"
        var $15=HEAP[$ptr_addr]; //@line 467 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 467 "xmltok_impl.c"
        var $17=unSign(($16), 8, 0); //@line 467 "xmltok_impl.c"
        var $18=(($14+72)&4294967295); //@line 467 "xmltok_impl.c"
        var $19=(($18+$17)&4294967295); //@line 467 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 467 "xmltok_impl.c"
        var $21=unSign(($20), 8, 0); //@line 467 "xmltok_impl.c"
        if ($21 == 25) {
          __label__ = 4; break;
        }
        else {
        __label__ = 5; break;
        }
        
      case 4: // $bb3
        var $22=HEAP[$ptr_addr]; //@line 474 "xmltok_impl.c"
        var $23=(($22+1)&4294967295); //@line 474 "xmltok_impl.c"
        HEAP[$ptr_addr]=$23; //@line 474 "xmltok_impl.c"
        __label__ = 10; break; //@line 474 "xmltok_impl.c"
      case 5: // $bb4
        var $24=HEAP[$nextTokPtr_addr]; //@line 471 "xmltok_impl.c"
        var $25=HEAP[$ptr_addr]; //@line 471 "xmltok_impl.c"
        HEAP[$24]=$25; //@line 471 "xmltok_impl.c"
        HEAP[$0]=0; //@line 472 "xmltok_impl.c"
        __label__ = 12; break; //@line 472 "xmltok_impl.c"
      case 6: // $bb5
        var $26=HEAP[$enc_addr]; //@line 475 "xmltok_impl.c"
        var $27=$26; //@line 475 "xmltok_impl.c"
        var $28=HEAP[$ptr_addr]; //@line 475 "xmltok_impl.c"
        var $29=HEAP[$28]; //@line 475 "xmltok_impl.c"
        var $30=unSign(($29), 8, 0); //@line 475 "xmltok_impl.c"
        var $31=(($27+72)&4294967295); //@line 475 "xmltok_impl.c"
        var $32=(($31+$30)&4294967295); //@line 475 "xmltok_impl.c"
        var $33=HEAP[$32]; //@line 475 "xmltok_impl.c"
        var $34=unSign(($33), 8, 0); //@line 475 "xmltok_impl.c"
        if ($34 == 18) {
          __label__ = 8; break;
        }
        else if ($34 == 25) {
          __label__ = 7; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 7: // $bb6
        var $35=HEAP[$ptr_addr]; //@line 474 "xmltok_impl.c"
        var $36=(($35+1)&4294967295); //@line 474 "xmltok_impl.c"
        HEAP[$ptr_addr]=$36; //@line 474 "xmltok_impl.c"
        __label__ = 10; break; //@line 474 "xmltok_impl.c"
      case 8: // $bb7
        var $37=HEAP[$ptr_addr]; //@line 479 "xmltok_impl.c"
        var $38=(($37+1)&4294967295); //@line 479 "xmltok_impl.c"
        var $39=HEAP[$nextTokPtr_addr]; //@line 479 "xmltok_impl.c"
        HEAP[$39]=$38; //@line 479 "xmltok_impl.c"
        HEAP[$0]=10; //@line 480 "xmltok_impl.c"
        __label__ = 12; break; //@line 480 "xmltok_impl.c"
      case 9: // $bb8
        var $40=HEAP[$nextTokPtr_addr]; //@line 482 "xmltok_impl.c"
        var $41=HEAP[$ptr_addr]; //@line 482 "xmltok_impl.c"
        HEAP[$40]=$41; //@line 482 "xmltok_impl.c"
        HEAP[$0]=0; //@line 483 "xmltok_impl.c"
        __label__ = 12; break; //@line 483 "xmltok_impl.c"
      case 10: // $bb9
        var $42=HEAP[$ptr_addr]; //@line 474 "xmltok_impl.c"
        var $43=HEAP[$end_addr]; //@line 474 "xmltok_impl.c"
        var $44=($42)!=($43); //@line 474 "xmltok_impl.c"
        if ($44) { __label__ = 6; break; } else { __label__ = 11; break; } //@line 474 "xmltok_impl.c"
      case 11: // $bb10
        HEAP[$0]=-1; //@line 487 "xmltok_impl.c"
        __label__ = 12; break; //@line 487 "xmltok_impl.c"
      case 12: // $bb11
        var $45=HEAP[$0]; //@line 466 "xmltok_impl.c"
        HEAP[$retval]=$45; //@line 466 "xmltok_impl.c"
        __label__ = 13; break; //@line 466 "xmltok_impl.c"
      case 13: // $return
        var $retval12=HEAP[$retval]; //@line 466 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval12; //@line 466 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_scanRef($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 496 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 496 "xmltok_impl.c"
        var $3=($1)==($2); //@line 496 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 496 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 497 "xmltok_impl.c"
        __label__ = 45; break; //@line 497 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$enc_addr]; //@line 498 "xmltok_impl.c"
        var $5=$4; //@line 498 "xmltok_impl.c"
        var $6=HEAP[$ptr_addr]; //@line 498 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 498 "xmltok_impl.c"
        var $8=unSign(($7), 8, 0); //@line 498 "xmltok_impl.c"
        var $9=(($5+72)&4294967295); //@line 498 "xmltok_impl.c"
        var $10=(($9+$8)&4294967295); //@line 498 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 498 "xmltok_impl.c"
        var $12=unSign(($11), 8, 0); //@line 498 "xmltok_impl.c"
        if ($12 == 5) {
          __label__ = 5; break;
        }
        else if ($12 == 6) {
          __label__ = 10; break;
        }
        else if ($12 == 7) {
          __label__ = 15; break;
        }
        else if ($12 == 19) {
          __label__ = 20; break;
        }
        else if ($12 == 22) {
          __label__ = 4; break;
        }
        else if ($12 == 24) {
          __label__ = 4; break;
        }
        else if ($12 == 29) {
          __label__ = 3; break;
        }
        else {
        __label__ = 21; break;
        }
        
      case 3: // $bb2
        var $13=HEAP[$nextTokPtr_addr]; //@line 499 "xmltok_impl.c"
        var $14=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        HEAP[$13]=$14; //@line 499 "xmltok_impl.c"
        HEAP[$0]=0; //@line 499 "xmltok_impl.c"
        __label__ = 45; break; //@line 499 "xmltok_impl.c"
      case 4: // $bb3
        var $15=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        var $16=(($15+1)&4294967295); //@line 499 "xmltok_impl.c"
        HEAP[$ptr_addr]=$16; //@line 499 "xmltok_impl.c"
        __label__ = 22; break; //@line 499 "xmltok_impl.c"
      case 5: // $bb4
        var $17=HEAP[$end_addr]; //@line 499 "xmltok_impl.c"
        var $18=($17); //@line 499 "xmltok_impl.c"
        var $19=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        var $20=($19); //@line 499 "xmltok_impl.c"
        var $21=((($18) - ($20))&4294967295); //@line 499 "xmltok_impl.c"
        var $22=((($21))|0) <= 1; //@line 499 "xmltok_impl.c"
        if ($22) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 499 "xmltok_impl.c"
      case 6: // $bb5
        HEAP[$0]=-2; //@line 499 "xmltok_impl.c"
        __label__ = 45; break; //@line 499 "xmltok_impl.c"
      case 7: // $bb6
        var $23=HEAP[$enc_addr]; //@line 499 "xmltok_impl.c"
        var $24=$23; //@line 499 "xmltok_impl.c"
        var $25=(($24+340)&4294967295); //@line 499 "xmltok_impl.c"
        var $26=HEAP[$25]; //@line 499 "xmltok_impl.c"
        var $27=HEAP[$enc_addr]; //@line 499 "xmltok_impl.c"
        var $28=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        var $29=FUNCTION_TABLE[$26]($27, $28); //@line 499 "xmltok_impl.c"
        var $30=((($29))|0)==0; //@line 499 "xmltok_impl.c"
        if ($30) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 499 "xmltok_impl.c"
      case 8: // $bb7
        var $31=HEAP[$nextTokPtr_addr]; //@line 499 "xmltok_impl.c"
        var $32=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        HEAP[$31]=$32; //@line 499 "xmltok_impl.c"
        HEAP[$0]=0; //@line 499 "xmltok_impl.c"
        __label__ = 45; break; //@line 499 "xmltok_impl.c"
      case 9: // $bb8
        var $33=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        var $34=(($33+2)&4294967295); //@line 499 "xmltok_impl.c"
        HEAP[$ptr_addr]=$34; //@line 499 "xmltok_impl.c"
        __label__ = 22; break; //@line 499 "xmltok_impl.c"
      case 10: // $bb9
        var $35=HEAP[$end_addr]; //@line 499 "xmltok_impl.c"
        var $36=($35); //@line 499 "xmltok_impl.c"
        var $37=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        var $38=($37); //@line 499 "xmltok_impl.c"
        var $39=((($36) - ($38))&4294967295); //@line 499 "xmltok_impl.c"
        var $40=((($39))|0) <= 2; //@line 499 "xmltok_impl.c"
        if ($40) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 499 "xmltok_impl.c"
      case 11: // $bb10
        HEAP[$0]=-2; //@line 499 "xmltok_impl.c"
        __label__ = 45; break; //@line 499 "xmltok_impl.c"
      case 12: // $bb11
        var $41=HEAP[$enc_addr]; //@line 499 "xmltok_impl.c"
        var $42=$41; //@line 499 "xmltok_impl.c"
        var $43=(($42+344)&4294967295); //@line 499 "xmltok_impl.c"
        var $44=HEAP[$43]; //@line 499 "xmltok_impl.c"
        var $45=HEAP[$enc_addr]; //@line 499 "xmltok_impl.c"
        var $46=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        var $47=FUNCTION_TABLE[$44]($45, $46); //@line 499 "xmltok_impl.c"
        var $48=((($47))|0)==0; //@line 499 "xmltok_impl.c"
        if ($48) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 499 "xmltok_impl.c"
      case 13: // $bb12
        var $49=HEAP[$nextTokPtr_addr]; //@line 499 "xmltok_impl.c"
        var $50=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        HEAP[$49]=$50; //@line 499 "xmltok_impl.c"
        HEAP[$0]=0; //@line 499 "xmltok_impl.c"
        __label__ = 45; break; //@line 499 "xmltok_impl.c"
      case 14: // $bb13
        var $51=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        var $52=(($51+3)&4294967295); //@line 499 "xmltok_impl.c"
        HEAP[$ptr_addr]=$52; //@line 499 "xmltok_impl.c"
        __label__ = 22; break; //@line 499 "xmltok_impl.c"
      case 15: // $bb14
        var $53=HEAP[$end_addr]; //@line 499 "xmltok_impl.c"
        var $54=($53); //@line 499 "xmltok_impl.c"
        var $55=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        var $56=($55); //@line 499 "xmltok_impl.c"
        var $57=((($54) - ($56))&4294967295); //@line 499 "xmltok_impl.c"
        var $58=((($57))|0) <= 3; //@line 499 "xmltok_impl.c"
        if ($58) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 499 "xmltok_impl.c"
      case 16: // $bb15
        HEAP[$0]=-2; //@line 499 "xmltok_impl.c"
        __label__ = 45; break; //@line 499 "xmltok_impl.c"
      case 17: // $bb16
        var $59=HEAP[$enc_addr]; //@line 499 "xmltok_impl.c"
        var $60=$59; //@line 499 "xmltok_impl.c"
        var $61=(($60+348)&4294967295); //@line 499 "xmltok_impl.c"
        var $62=HEAP[$61]; //@line 499 "xmltok_impl.c"
        var $63=HEAP[$enc_addr]; //@line 499 "xmltok_impl.c"
        var $64=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        var $65=FUNCTION_TABLE[$62]($63, $64); //@line 499 "xmltok_impl.c"
        var $66=((($65))|0)==0; //@line 499 "xmltok_impl.c"
        if ($66) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 499 "xmltok_impl.c"
      case 18: // $bb17
        var $67=HEAP[$nextTokPtr_addr]; //@line 499 "xmltok_impl.c"
        var $68=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        HEAP[$67]=$68; //@line 499 "xmltok_impl.c"
        HEAP[$0]=0; //@line 499 "xmltok_impl.c"
        __label__ = 45; break; //@line 499 "xmltok_impl.c"
      case 19: // $bb18
        var $69=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        var $70=(($69+4)&4294967295); //@line 499 "xmltok_impl.c"
        HEAP[$ptr_addr]=$70; //@line 499 "xmltok_impl.c"
        __label__ = 22; break; //@line 499 "xmltok_impl.c"
      case 20: // $bb19
        var $71=HEAP[$ptr_addr]; //@line 501 "xmltok_impl.c"
        var $72=(($71+1)&4294967295); //@line 501 "xmltok_impl.c"
        var $73=HEAP[$enc_addr]; //@line 501 "xmltok_impl.c"
        var $74=HEAP[$end_addr]; //@line 501 "xmltok_impl.c"
        var $75=HEAP[$nextTokPtr_addr]; //@line 501 "xmltok_impl.c"
        var $76=_normal_scanCharRef($73, $72, $74, $75); //@line 501 "xmltok_impl.c"
        HEAP[$0]=$76; //@line 501 "xmltok_impl.c"
        __label__ = 45; break; //@line 501 "xmltok_impl.c"
      case 21: // $bb20
        var $77=HEAP[$nextTokPtr_addr]; //@line 503 "xmltok_impl.c"
        var $78=HEAP[$ptr_addr]; //@line 503 "xmltok_impl.c"
        HEAP[$77]=$78; //@line 503 "xmltok_impl.c"
        HEAP[$0]=0; //@line 504 "xmltok_impl.c"
        __label__ = 45; break; //@line 504 "xmltok_impl.c"
      case 22: // $bb21
        __label__ = 43; break; //@line 504 "xmltok_impl.c"
      case 23: // $bb22
        var $79=HEAP[$enc_addr]; //@line 507 "xmltok_impl.c"
        var $80=$79; //@line 507 "xmltok_impl.c"
        var $81=HEAP[$ptr_addr]; //@line 507 "xmltok_impl.c"
        var $82=HEAP[$81]; //@line 507 "xmltok_impl.c"
        var $83=unSign(($82), 8, 0); //@line 507 "xmltok_impl.c"
        var $84=(($80+72)&4294967295); //@line 507 "xmltok_impl.c"
        var $85=(($84+$83)&4294967295); //@line 507 "xmltok_impl.c"
        var $86=HEAP[$85]; //@line 507 "xmltok_impl.c"
        var $87=unSign(($86), 8, 0); //@line 507 "xmltok_impl.c"
        if ($87 == 5) {
          __label__ = 26; break;
        }
        else if ($87 == 6) {
          __label__ = 31; break;
        }
        else if ($87 == 7) {
          __label__ = 36; break;
        }
        else if ($87 == 18) {
          __label__ = 41; break;
        }
        else if ($87 == 22) {
          __label__ = 25; break;
        }
        else if ($87 == 24) {
          __label__ = 25; break;
        }
        else if ($87 == 25) {
          __label__ = 25; break;
        }
        else if ($87 == 26) {
          __label__ = 25; break;
        }
        else if ($87 == 27) {
          __label__ = 25; break;
        }
        else if ($87 == 29) {
          __label__ = 24; break;
        }
        else {
        __label__ = 42; break;
        }
        
      case 24: // $bb23
        var $88=HEAP[$nextTokPtr_addr]; //@line 508 "xmltok_impl.c"
        var $89=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        HEAP[$88]=$89; //@line 508 "xmltok_impl.c"
        HEAP[$0]=0; //@line 508 "xmltok_impl.c"
        __label__ = 45; break; //@line 508 "xmltok_impl.c"
      case 25: // $bb24
        var $90=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        var $91=(($90+1)&4294967295); //@line 508 "xmltok_impl.c"
        HEAP[$ptr_addr]=$91; //@line 508 "xmltok_impl.c"
        __label__ = 43; break; //@line 508 "xmltok_impl.c"
      case 26: // $bb25
        var $92=HEAP[$end_addr]; //@line 508 "xmltok_impl.c"
        var $93=($92); //@line 508 "xmltok_impl.c"
        var $94=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        var $95=($94); //@line 508 "xmltok_impl.c"
        var $96=((($93) - ($95))&4294967295); //@line 508 "xmltok_impl.c"
        var $97=((($96))|0) <= 1; //@line 508 "xmltok_impl.c"
        if ($97) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 508 "xmltok_impl.c"
      case 27: // $bb26
        HEAP[$0]=-2; //@line 508 "xmltok_impl.c"
        __label__ = 45; break; //@line 508 "xmltok_impl.c"
      case 28: // $bb27
        var $98=HEAP[$enc_addr]; //@line 508 "xmltok_impl.c"
        var $99=$98; //@line 508 "xmltok_impl.c"
        var $100=(($99+328)&4294967295); //@line 508 "xmltok_impl.c"
        var $101=HEAP[$100]; //@line 508 "xmltok_impl.c"
        var $102=HEAP[$enc_addr]; //@line 508 "xmltok_impl.c"
        var $103=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        var $104=FUNCTION_TABLE[$101]($102, $103); //@line 508 "xmltok_impl.c"
        var $105=((($104))|0)==0; //@line 508 "xmltok_impl.c"
        if ($105) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 508 "xmltok_impl.c"
      case 29: // $bb28
        var $106=HEAP[$nextTokPtr_addr]; //@line 508 "xmltok_impl.c"
        var $107=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        HEAP[$106]=$107; //@line 508 "xmltok_impl.c"
        HEAP[$0]=0; //@line 508 "xmltok_impl.c"
        __label__ = 45; break; //@line 508 "xmltok_impl.c"
      case 30: // $bb29
        var $108=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        var $109=(($108+2)&4294967295); //@line 508 "xmltok_impl.c"
        HEAP[$ptr_addr]=$109; //@line 508 "xmltok_impl.c"
        __label__ = 43; break; //@line 508 "xmltok_impl.c"
      case 31: // $bb30
        var $110=HEAP[$end_addr]; //@line 508 "xmltok_impl.c"
        var $111=($110); //@line 508 "xmltok_impl.c"
        var $112=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        var $113=($112); //@line 508 "xmltok_impl.c"
        var $114=((($111) - ($113))&4294967295); //@line 508 "xmltok_impl.c"
        var $115=((($114))|0) <= 2; //@line 508 "xmltok_impl.c"
        if ($115) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 508 "xmltok_impl.c"
      case 32: // $bb31
        HEAP[$0]=-2; //@line 508 "xmltok_impl.c"
        __label__ = 45; break; //@line 508 "xmltok_impl.c"
      case 33: // $bb32
        var $116=HEAP[$enc_addr]; //@line 508 "xmltok_impl.c"
        var $117=$116; //@line 508 "xmltok_impl.c"
        var $118=(($117+332)&4294967295); //@line 508 "xmltok_impl.c"
        var $119=HEAP[$118]; //@line 508 "xmltok_impl.c"
        var $120=HEAP[$enc_addr]; //@line 508 "xmltok_impl.c"
        var $121=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        var $122=FUNCTION_TABLE[$119]($120, $121); //@line 508 "xmltok_impl.c"
        var $123=((($122))|0)==0; //@line 508 "xmltok_impl.c"
        if ($123) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 508 "xmltok_impl.c"
      case 34: // $bb33
        var $124=HEAP[$nextTokPtr_addr]; //@line 508 "xmltok_impl.c"
        var $125=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        HEAP[$124]=$125; //@line 508 "xmltok_impl.c"
        HEAP[$0]=0; //@line 508 "xmltok_impl.c"
        __label__ = 45; break; //@line 508 "xmltok_impl.c"
      case 35: // $bb34
        var $126=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        var $127=(($126+3)&4294967295); //@line 508 "xmltok_impl.c"
        HEAP[$ptr_addr]=$127; //@line 508 "xmltok_impl.c"
        __label__ = 43; break; //@line 508 "xmltok_impl.c"
      case 36: // $bb35
        var $128=HEAP[$end_addr]; //@line 508 "xmltok_impl.c"
        var $129=($128); //@line 508 "xmltok_impl.c"
        var $130=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        var $131=($130); //@line 508 "xmltok_impl.c"
        var $132=((($129) - ($131))&4294967295); //@line 508 "xmltok_impl.c"
        var $133=((($132))|0) <= 3; //@line 508 "xmltok_impl.c"
        if ($133) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 508 "xmltok_impl.c"
      case 37: // $bb36
        HEAP[$0]=-2; //@line 508 "xmltok_impl.c"
        __label__ = 45; break; //@line 508 "xmltok_impl.c"
      case 38: // $bb37
        var $134=HEAP[$enc_addr]; //@line 508 "xmltok_impl.c"
        var $135=$134; //@line 508 "xmltok_impl.c"
        var $136=(($135+336)&4294967295); //@line 508 "xmltok_impl.c"
        var $137=HEAP[$136]; //@line 508 "xmltok_impl.c"
        var $138=HEAP[$enc_addr]; //@line 508 "xmltok_impl.c"
        var $139=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        var $140=FUNCTION_TABLE[$137]($138, $139); //@line 508 "xmltok_impl.c"
        var $141=((($140))|0)==0; //@line 508 "xmltok_impl.c"
        if ($141) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 508 "xmltok_impl.c"
      case 39: // $bb38
        var $142=HEAP[$nextTokPtr_addr]; //@line 508 "xmltok_impl.c"
        var $143=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        HEAP[$142]=$143; //@line 508 "xmltok_impl.c"
        HEAP[$0]=0; //@line 508 "xmltok_impl.c"
        __label__ = 45; break; //@line 508 "xmltok_impl.c"
      case 40: // $bb39
        var $144=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        var $145=(($144+4)&4294967295); //@line 508 "xmltok_impl.c"
        HEAP[$ptr_addr]=$145; //@line 508 "xmltok_impl.c"
        __label__ = 43; break; //@line 508 "xmltok_impl.c"
      case 41: // $bb40
        var $146=HEAP[$ptr_addr]; //@line 510 "xmltok_impl.c"
        var $147=(($146+1)&4294967295); //@line 510 "xmltok_impl.c"
        var $148=HEAP[$nextTokPtr_addr]; //@line 510 "xmltok_impl.c"
        HEAP[$148]=$147; //@line 510 "xmltok_impl.c"
        HEAP[$0]=9; //@line 511 "xmltok_impl.c"
        __label__ = 45; break; //@line 511 "xmltok_impl.c"
      case 42: // $bb41
        var $149=HEAP[$nextTokPtr_addr]; //@line 513 "xmltok_impl.c"
        var $150=HEAP[$ptr_addr]; //@line 513 "xmltok_impl.c"
        HEAP[$149]=$150; //@line 513 "xmltok_impl.c"
        HEAP[$0]=0; //@line 514 "xmltok_impl.c"
        __label__ = 45; break; //@line 514 "xmltok_impl.c"
      case 43: // $bb42
        var $151=HEAP[$ptr_addr]; //@line 506 "xmltok_impl.c"
        var $152=HEAP[$end_addr]; //@line 506 "xmltok_impl.c"
        var $153=($151)!=($152); //@line 506 "xmltok_impl.c"
        if ($153) { __label__ = 23; break; } else { __label__ = 44; break; } //@line 506 "xmltok_impl.c"
      case 44: // $bb43
        HEAP[$0]=-1; //@line 517 "xmltok_impl.c"
        __label__ = 45; break; //@line 517 "xmltok_impl.c"
      case 45: // $bb44
        var $154=HEAP[$0]; //@line 497 "xmltok_impl.c"
        HEAP[$retval]=$154; //@line 497 "xmltok_impl.c"
        __label__ = 46; break; //@line 497 "xmltok_impl.c"
      case 46: // $return
        var $retval45=HEAP[$retval]; //@line 497 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval45; //@line 497 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_scanAtts($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $t=__stackBase__+24;
        var $open=__stackBase__+28;
        var $t33=__stackBase__+32;
        var $tok=__stackBase__+36;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        __label__ = 98; break; //@line 529 "xmltok_impl.c"
      case 1: // $bb
        var $1=HEAP[$enc_addr]; //@line 530 "xmltok_impl.c"
        var $2=$1; //@line 530 "xmltok_impl.c"
        var $3=HEAP[$ptr_addr]; //@line 530 "xmltok_impl.c"
        var $4=HEAP[$3]; //@line 530 "xmltok_impl.c"
        var $5=unSign(($4), 8, 0); //@line 530 "xmltok_impl.c"
        var $6=(($2+72)&4294967295); //@line 530 "xmltok_impl.c"
        var $7=(($6+$5)&4294967295); //@line 530 "xmltok_impl.c"
        var $8=HEAP[$7]; //@line 530 "xmltok_impl.c"
        var $9=unSign(($8), 8, 0); //@line 530 "xmltok_impl.c"
        if ($9 == 5) {
          __label__ = 4; break;
        }
        else if ($9 == 6) {
          __label__ = 9; break;
        }
        else if ($9 == 7) {
          __label__ = 14; break;
        }
        else if ($9 == 9) {
          __label__ = 19; break;
        }
        else if ($9 == 10) {
          __label__ = 19; break;
        }
        else if ($9 == 14) {
          __label__ = 25; break;
        }
        else if ($9 == 21) {
          __label__ = 19; break;
        }
        else if ($9 == 22) {
          __label__ = 3; break;
        }
        else if ($9 == 24) {
          __label__ = 3; break;
        }
        else if ($9 == 25) {
          __label__ = 3; break;
        }
        else if ($9 == 26) {
          __label__ = 3; break;
        }
        else if ($9 == 27) {
          __label__ = 3; break;
        }
        else if ($9 == 29) {
          __label__ = 2; break;
        }
        else {
        __label__ = 97; break;
        }
        
      case 2: // $bb1
        var $10=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $11=HEAP[$nextTokPtr_addr]; //@line 531 "xmltok_impl.c"
        HEAP[$11]=$10; //@line 531 "xmltok_impl.c"
        HEAP[$0]=0; //@line 531 "xmltok_impl.c"
        __label__ = 100; break; //@line 531 "xmltok_impl.c"
      case 3: // $bb2
        var $12=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $13=(($12+1)&4294967295); //@line 531 "xmltok_impl.c"
        HEAP[$ptr_addr]=$13; //@line 531 "xmltok_impl.c"
        __label__ = 98; break; //@line 531 "xmltok_impl.c"
      case 4: // $bb3
        var $14=HEAP[$end_addr]; //@line 531 "xmltok_impl.c"
        var $15=($14); //@line 531 "xmltok_impl.c"
        var $16=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $17=($16); //@line 531 "xmltok_impl.c"
        var $18=((($15) - ($17))&4294967295); //@line 531 "xmltok_impl.c"
        var $19=((($18))|0) <= 1; //@line 531 "xmltok_impl.c"
        if ($19) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 531 "xmltok_impl.c"
      case 5: // $bb4
        HEAP[$0]=-2; //@line 531 "xmltok_impl.c"
        __label__ = 100; break; //@line 531 "xmltok_impl.c"
      case 6: // $bb5
        var $20=HEAP[$enc_addr]; //@line 531 "xmltok_impl.c"
        var $21=$20; //@line 531 "xmltok_impl.c"
        var $22=(($21+328)&4294967295); //@line 531 "xmltok_impl.c"
        var $23=HEAP[$22]; //@line 531 "xmltok_impl.c"
        var $24=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $25=HEAP[$enc_addr]; //@line 531 "xmltok_impl.c"
        var $26=FUNCTION_TABLE[$23]($25, $24); //@line 531 "xmltok_impl.c"
        var $27=((($26))|0)==0; //@line 531 "xmltok_impl.c"
        if ($27) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 531 "xmltok_impl.c"
      case 7: // $bb6
        var $28=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $29=HEAP[$nextTokPtr_addr]; //@line 531 "xmltok_impl.c"
        HEAP[$29]=$28; //@line 531 "xmltok_impl.c"
        HEAP[$0]=0; //@line 531 "xmltok_impl.c"
        __label__ = 100; break; //@line 531 "xmltok_impl.c"
      case 8: // $bb7
        var $30=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $31=(($30+2)&4294967295); //@line 531 "xmltok_impl.c"
        HEAP[$ptr_addr]=$31; //@line 531 "xmltok_impl.c"
        __label__ = 98; break; //@line 531 "xmltok_impl.c"
      case 9: // $bb8
        var $32=HEAP[$end_addr]; //@line 531 "xmltok_impl.c"
        var $33=($32); //@line 531 "xmltok_impl.c"
        var $34=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $35=($34); //@line 531 "xmltok_impl.c"
        var $36=((($33) - ($35))&4294967295); //@line 531 "xmltok_impl.c"
        var $37=((($36))|0) <= 2; //@line 531 "xmltok_impl.c"
        if ($37) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 531 "xmltok_impl.c"
      case 10: // $bb9
        HEAP[$0]=-2; //@line 531 "xmltok_impl.c"
        __label__ = 100; break; //@line 531 "xmltok_impl.c"
      case 11: // $bb10
        var $38=HEAP[$enc_addr]; //@line 531 "xmltok_impl.c"
        var $39=$38; //@line 531 "xmltok_impl.c"
        var $40=(($39+332)&4294967295); //@line 531 "xmltok_impl.c"
        var $41=HEAP[$40]; //@line 531 "xmltok_impl.c"
        var $42=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $43=HEAP[$enc_addr]; //@line 531 "xmltok_impl.c"
        var $44=FUNCTION_TABLE[$41]($43, $42); //@line 531 "xmltok_impl.c"
        var $45=((($44))|0)==0; //@line 531 "xmltok_impl.c"
        if ($45) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 531 "xmltok_impl.c"
      case 12: // $bb11
        var $46=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $47=HEAP[$nextTokPtr_addr]; //@line 531 "xmltok_impl.c"
        HEAP[$47]=$46; //@line 531 "xmltok_impl.c"
        HEAP[$0]=0; //@line 531 "xmltok_impl.c"
        __label__ = 100; break; //@line 531 "xmltok_impl.c"
      case 13: // $bb12
        var $48=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $49=(($48+3)&4294967295); //@line 531 "xmltok_impl.c"
        HEAP[$ptr_addr]=$49; //@line 531 "xmltok_impl.c"
        __label__ = 98; break; //@line 531 "xmltok_impl.c"
      case 14: // $bb13
        var $50=HEAP[$end_addr]; //@line 531 "xmltok_impl.c"
        var $51=($50); //@line 531 "xmltok_impl.c"
        var $52=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $53=($52); //@line 531 "xmltok_impl.c"
        var $54=((($51) - ($53))&4294967295); //@line 531 "xmltok_impl.c"
        var $55=((($54))|0) <= 3; //@line 531 "xmltok_impl.c"
        if ($55) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 531 "xmltok_impl.c"
      case 15: // $bb14
        HEAP[$0]=-2; //@line 531 "xmltok_impl.c"
        __label__ = 100; break; //@line 531 "xmltok_impl.c"
      case 16: // $bb15
        var $56=HEAP[$enc_addr]; //@line 531 "xmltok_impl.c"
        var $57=$56; //@line 531 "xmltok_impl.c"
        var $58=(($57+336)&4294967295); //@line 531 "xmltok_impl.c"
        var $59=HEAP[$58]; //@line 531 "xmltok_impl.c"
        var $60=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $61=HEAP[$enc_addr]; //@line 531 "xmltok_impl.c"
        var $62=FUNCTION_TABLE[$59]($61, $60); //@line 531 "xmltok_impl.c"
        var $63=((($62))|0)==0; //@line 531 "xmltok_impl.c"
        if ($63) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 531 "xmltok_impl.c"
      case 17: // $bb16
        var $64=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $65=HEAP[$nextTokPtr_addr]; //@line 531 "xmltok_impl.c"
        HEAP[$65]=$64; //@line 531 "xmltok_impl.c"
        HEAP[$0]=0; //@line 531 "xmltok_impl.c"
        __label__ = 100; break; //@line 531 "xmltok_impl.c"
      case 18: // $bb17
        var $66=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $67=(($66+4)&4294967295); //@line 531 "xmltok_impl.c"
        HEAP[$ptr_addr]=$67; //@line 531 "xmltok_impl.c"
        __label__ = 98; break; //@line 531 "xmltok_impl.c"
      case 19: // $bb18
        var $68=HEAP[$ptr_addr]; //@line 554 "xmltok_impl.c"
        var $69=(($68+1)&4294967295); //@line 554 "xmltok_impl.c"
        HEAP[$ptr_addr]=$69; //@line 554 "xmltok_impl.c"
        var $70=HEAP[$ptr_addr]; //@line 555 "xmltok_impl.c"
        var $71=HEAP[$end_addr]; //@line 555 "xmltok_impl.c"
        var $72=($70)==($71); //@line 555 "xmltok_impl.c"
        if ($72) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 555 "xmltok_impl.c"
      case 20: // $bb19
        HEAP[$0]=-1; //@line 556 "xmltok_impl.c"
        __label__ = 100; break; //@line 556 "xmltok_impl.c"
      case 21: // $bb20
        var $73=HEAP[$enc_addr]; //@line 557 "xmltok_impl.c"
        var $74=$73; //@line 557 "xmltok_impl.c"
        var $75=HEAP[$ptr_addr]; //@line 557 "xmltok_impl.c"
        var $76=HEAP[$75]; //@line 557 "xmltok_impl.c"
        var $77=unSign(($76), 8, 0); //@line 557 "xmltok_impl.c"
        var $78=(($74+72)&4294967295); //@line 557 "xmltok_impl.c"
        var $79=(($78+$77)&4294967295); //@line 557 "xmltok_impl.c"
        var $80=HEAP[$79]; //@line 557 "xmltok_impl.c"
        var $81=unSign(($80), 8, 0); //@line 557 "xmltok_impl.c"
        HEAP[$t]=$81; //@line 557 "xmltok_impl.c"
        var $82=HEAP[$t]; //@line 558 "xmltok_impl.c"
        var $83=((($82))|0)==14; //@line 558 "xmltok_impl.c"
        if ($83) { __label__ = 25; break; } else { __label__ = 22; break; } //@line 558 "xmltok_impl.c"
      case 22: // $bb21
        var $84=HEAP[$t]; //@line 560 "xmltok_impl.c"
        if ($84 == 9) {
          __label__ = 23; break;
        }
        else if ($84 == 10) {
          __label__ = 23; break;
        }
        else if ($84 == 21) {
          __label__ = 23; break;
        }
        else {
        __label__ = 24; break;
        }
        
      case 23: // $bb22
        __label__ = 19; break; //@line 560 "xmltok_impl.c"
      case 24: // $bb23
        var $85=HEAP[$ptr_addr]; //@line 566 "xmltok_impl.c"
        var $86=HEAP[$nextTokPtr_addr]; //@line 566 "xmltok_impl.c"
        HEAP[$86]=$85; //@line 566 "xmltok_impl.c"
        HEAP[$0]=0; //@line 567 "xmltok_impl.c"
        __label__ = 100; break; //@line 567 "xmltok_impl.c"
      case 25: // $bb24
        var $87=HEAP[$ptr_addr]; //@line 578 "xmltok_impl.c"
        var $88=(($87+1)&4294967295); //@line 578 "xmltok_impl.c"
        HEAP[$ptr_addr]=$88; //@line 578 "xmltok_impl.c"
        var $89=HEAP[$ptr_addr]; //@line 579 "xmltok_impl.c"
        var $90=HEAP[$end_addr]; //@line 579 "xmltok_impl.c"
        var $91=($89)==($90); //@line 579 "xmltok_impl.c"
        if ($91) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 579 "xmltok_impl.c"
      case 26: // $bb25
        HEAP[$0]=-1; //@line 580 "xmltok_impl.c"
        __label__ = 100; break; //@line 580 "xmltok_impl.c"
      case 27: // $bb26
        var $92=HEAP[$enc_addr]; //@line 581 "xmltok_impl.c"
        var $93=$92; //@line 581 "xmltok_impl.c"
        var $94=HEAP[$ptr_addr]; //@line 581 "xmltok_impl.c"
        var $95=HEAP[$94]; //@line 581 "xmltok_impl.c"
        var $96=unSign(($95), 8, 0); //@line 581 "xmltok_impl.c"
        var $97=(($93+72)&4294967295); //@line 581 "xmltok_impl.c"
        var $98=(($97+$96)&4294967295); //@line 581 "xmltok_impl.c"
        var $99=HEAP[$98]; //@line 581 "xmltok_impl.c"
        var $100=unSign(($99), 8, 0); //@line 581 "xmltok_impl.c"
        HEAP[$open]=$100; //@line 581 "xmltok_impl.c"
        var $101=HEAP[$open]; //@line 582 "xmltok_impl.c"
        var $102=((($101))|0)==12; //@line 582 "xmltok_impl.c"
        if ($102) { __label__ = 32; break; } else { __label__ = 28; break; } //@line 582 "xmltok_impl.c"
      case 28: // $bb27
        var $103=HEAP[$open]; //@line 582 "xmltok_impl.c"
        var $104=((($103))|0)==13; //@line 582 "xmltok_impl.c"
        if ($104) { __label__ = 32; break; } else { __label__ = 29; break; } //@line 582 "xmltok_impl.c"
      case 29: // $bb28
        var $105=HEAP[$open]; //@line 584 "xmltok_impl.c"
        if ($105 == 9) {
          __label__ = 30; break;
        }
        else if ($105 == 10) {
          __label__ = 30; break;
        }
        else if ($105 == 21) {
          __label__ = 30; break;
        }
        else {
        __label__ = 31; break;
        }
        
      case 30: // $bb29
        __label__ = 25; break; //@line 584 "xmltok_impl.c"
      case 31: // $bb30
        var $106=HEAP[$ptr_addr]; //@line 590 "xmltok_impl.c"
        var $107=HEAP[$nextTokPtr_addr]; //@line 590 "xmltok_impl.c"
        HEAP[$107]=$106; //@line 590 "xmltok_impl.c"
        HEAP[$0]=0; //@line 591 "xmltok_impl.c"
        __label__ = 100; break; //@line 591 "xmltok_impl.c"
      case 32: // $bb31
        var $108=HEAP[$ptr_addr]; //@line 594 "xmltok_impl.c"
        var $109=(($108+1)&4294967295); //@line 594 "xmltok_impl.c"
        HEAP[$ptr_addr]=$109; //@line 594 "xmltok_impl.c"
        __label__ = 33; break; //@line 594 "xmltok_impl.c"
      case 33: // $bb32
        var $110=HEAP[$ptr_addr]; //@line 598 "xmltok_impl.c"
        var $111=HEAP[$end_addr]; //@line 598 "xmltok_impl.c"
        var $112=($110)==($111); //@line 598 "xmltok_impl.c"
        if ($112) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 598 "xmltok_impl.c"
      case 34: // $bb34
        HEAP[$0]=-1; //@line 599 "xmltok_impl.c"
        __label__ = 100; break; //@line 599 "xmltok_impl.c"
      case 35: // $bb35
        var $113=HEAP[$enc_addr]; //@line 600 "xmltok_impl.c"
        var $114=$113; //@line 600 "xmltok_impl.c"
        var $115=HEAP[$ptr_addr]; //@line 600 "xmltok_impl.c"
        var $116=HEAP[$115]; //@line 600 "xmltok_impl.c"
        var $117=unSign(($116), 8, 0); //@line 600 "xmltok_impl.c"
        var $118=(($114+72)&4294967295); //@line 600 "xmltok_impl.c"
        var $119=(($118+$117)&4294967295); //@line 600 "xmltok_impl.c"
        var $120=HEAP[$119]; //@line 600 "xmltok_impl.c"
        var $121=unSign(($120), 8, 0); //@line 600 "xmltok_impl.c"
        HEAP[$t33]=$121; //@line 600 "xmltok_impl.c"
        var $122=HEAP[$t33]; //@line 601 "xmltok_impl.c"
        var $123=HEAP[$open]; //@line 601 "xmltok_impl.c"
        var $124=((($122))|0)==((($123))|0); //@line 601 "xmltok_impl.c"
        if ($124) { __label__ = 61; break; } else { __label__ = 36; break; } //@line 601 "xmltok_impl.c"
      case 36: // $bb36
        var $125=HEAP[$t33]; //@line 603 "xmltok_impl.c"
        if ($125 == 0) {
          __label__ = 52; break;
        }
        else if ($125 == 1) {
          __label__ = 52; break;
        }
        else if ($125 == 2) {
          __label__ = 58; break;
        }
        else if ($125 == 3) {
          __label__ = 53; break;
        }
        else if ($125 == 5) {
          __label__ = 37; break;
        }
        else if ($125 == 6) {
          __label__ = 42; break;
        }
        else if ($125 == 7) {
          __label__ = 47; break;
        }
        else if ($125 == 8) {
          __label__ = 52; break;
        }
        else {
        __label__ = 59; break;
        }
        
      case 37: // $bb37
        var $126=HEAP[$end_addr]; //@line 604 "xmltok_impl.c"
        var $127=($126); //@line 604 "xmltok_impl.c"
        var $128=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $129=($128); //@line 604 "xmltok_impl.c"
        var $130=((($127) - ($129))&4294967295); //@line 604 "xmltok_impl.c"
        var $131=((($130))|0) <= 1; //@line 604 "xmltok_impl.c"
        if ($131) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 604 "xmltok_impl.c"
      case 38: // $bb38
        HEAP[$0]=-2; //@line 604 "xmltok_impl.c"
        __label__ = 100; break; //@line 604 "xmltok_impl.c"
      case 39: // $bb39
        var $132=HEAP[$enc_addr]; //@line 604 "xmltok_impl.c"
        var $133=$132; //@line 604 "xmltok_impl.c"
        var $134=(($133+352)&4294967295); //@line 604 "xmltok_impl.c"
        var $135=HEAP[$134]; //@line 604 "xmltok_impl.c"
        var $136=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $137=HEAP[$enc_addr]; //@line 604 "xmltok_impl.c"
        var $138=FUNCTION_TABLE[$135]($137, $136); //@line 604 "xmltok_impl.c"
        var $139=((($138))|0)!=0; //@line 604 "xmltok_impl.c"
        if ($139) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 604 "xmltok_impl.c"
      case 40: // $bb40
        var $140=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $141=HEAP[$nextTokPtr_addr]; //@line 604 "xmltok_impl.c"
        HEAP[$141]=$140; //@line 604 "xmltok_impl.c"
        HEAP[$0]=0; //@line 604 "xmltok_impl.c"
        __label__ = 100; break; //@line 604 "xmltok_impl.c"
      case 41: // $bb41
        var $142=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $143=(($142+2)&4294967295); //@line 604 "xmltok_impl.c"
        HEAP[$ptr_addr]=$143; //@line 604 "xmltok_impl.c"
        __label__ = 60; break; //@line 604 "xmltok_impl.c"
      case 42: // $bb42
        var $144=HEAP[$end_addr]; //@line 604 "xmltok_impl.c"
        var $145=($144); //@line 604 "xmltok_impl.c"
        var $146=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $147=($146); //@line 604 "xmltok_impl.c"
        var $148=((($145) - ($147))&4294967295); //@line 604 "xmltok_impl.c"
        var $149=((($148))|0) <= 2; //@line 604 "xmltok_impl.c"
        if ($149) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 604 "xmltok_impl.c"
      case 43: // $bb43
        HEAP[$0]=-2; //@line 604 "xmltok_impl.c"
        __label__ = 100; break; //@line 604 "xmltok_impl.c"
      case 44: // $bb44
        var $150=HEAP[$enc_addr]; //@line 604 "xmltok_impl.c"
        var $151=$150; //@line 604 "xmltok_impl.c"
        var $152=(($151+356)&4294967295); //@line 604 "xmltok_impl.c"
        var $153=HEAP[$152]; //@line 604 "xmltok_impl.c"
        var $154=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $155=HEAP[$enc_addr]; //@line 604 "xmltok_impl.c"
        var $156=FUNCTION_TABLE[$153]($155, $154); //@line 604 "xmltok_impl.c"
        var $157=((($156))|0)!=0; //@line 604 "xmltok_impl.c"
        if ($157) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 604 "xmltok_impl.c"
      case 45: // $bb45
        var $158=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $159=HEAP[$nextTokPtr_addr]; //@line 604 "xmltok_impl.c"
        HEAP[$159]=$158; //@line 604 "xmltok_impl.c"
        HEAP[$0]=0; //@line 604 "xmltok_impl.c"
        __label__ = 100; break; //@line 604 "xmltok_impl.c"
      case 46: // $bb46
        var $160=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $161=(($160+3)&4294967295); //@line 604 "xmltok_impl.c"
        HEAP[$ptr_addr]=$161; //@line 604 "xmltok_impl.c"
        __label__ = 60; break; //@line 604 "xmltok_impl.c"
      case 47: // $bb47
        var $162=HEAP[$end_addr]; //@line 604 "xmltok_impl.c"
        var $163=($162); //@line 604 "xmltok_impl.c"
        var $164=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $165=($164); //@line 604 "xmltok_impl.c"
        var $166=((($163) - ($165))&4294967295); //@line 604 "xmltok_impl.c"
        var $167=((($166))|0) <= 3; //@line 604 "xmltok_impl.c"
        if ($167) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 604 "xmltok_impl.c"
      case 48: // $bb48
        HEAP[$0]=-2; //@line 604 "xmltok_impl.c"
        __label__ = 100; break; //@line 604 "xmltok_impl.c"
      case 49: // $bb49
        var $168=HEAP[$enc_addr]; //@line 604 "xmltok_impl.c"
        var $169=$168; //@line 604 "xmltok_impl.c"
        var $170=(($169+360)&4294967295); //@line 604 "xmltok_impl.c"
        var $171=HEAP[$170]; //@line 604 "xmltok_impl.c"
        var $172=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $173=HEAP[$enc_addr]; //@line 604 "xmltok_impl.c"
        var $174=FUNCTION_TABLE[$171]($173, $172); //@line 604 "xmltok_impl.c"
        var $175=((($174))|0)!=0; //@line 604 "xmltok_impl.c"
        if ($175) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 604 "xmltok_impl.c"
      case 50: // $bb50
        var $176=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $177=HEAP[$nextTokPtr_addr]; //@line 604 "xmltok_impl.c"
        HEAP[$177]=$176; //@line 604 "xmltok_impl.c"
        HEAP[$0]=0; //@line 604 "xmltok_impl.c"
        __label__ = 100; break; //@line 604 "xmltok_impl.c"
      case 51: // $bb51
        var $178=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $179=(($178+4)&4294967295); //@line 604 "xmltok_impl.c"
        HEAP[$ptr_addr]=$179; //@line 604 "xmltok_impl.c"
        __label__ = 60; break; //@line 604 "xmltok_impl.c"
      case 52: // $bb52
        var $180=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $181=HEAP[$nextTokPtr_addr]; //@line 604 "xmltok_impl.c"
        HEAP[$181]=$180; //@line 604 "xmltok_impl.c"
        HEAP[$0]=0; //@line 604 "xmltok_impl.c"
        __label__ = 100; break; //@line 604 "xmltok_impl.c"
      case 53: // $bb53
        var $182=HEAP[$ptr_addr]; //@line 607 "xmltok_impl.c"
        var $183=(($182+1)&4294967295); //@line 607 "xmltok_impl.c"
        var $184=HEAP[$enc_addr]; //@line 607 "xmltok_impl.c"
        var $185=HEAP[$end_addr]; //@line 607 "xmltok_impl.c"
        var $186=_normal_scanRef($184, $183, $185, $ptr_addr); //@line 607 "xmltok_impl.c"
        HEAP[$tok]=$186; //@line 607 "xmltok_impl.c"
        var $187=HEAP[$tok]; //@line 608 "xmltok_impl.c"
        var $188=((($187))|0) <= 0; //@line 608 "xmltok_impl.c"
        if ($188) { __label__ = 54; break; } else { __label__ = 57; break; } //@line 608 "xmltok_impl.c"
      case 54: // $bb54
        var $189=HEAP[$tok]; //@line 609 "xmltok_impl.c"
        var $190=((($189))|0)==0; //@line 609 "xmltok_impl.c"
        if ($190) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 609 "xmltok_impl.c"
      case 55: // $bb55
        var $191=HEAP[$ptr_addr]; //@line 610 "xmltok_impl.c"
        var $192=HEAP[$nextTokPtr_addr]; //@line 610 "xmltok_impl.c"
        HEAP[$192]=$191; //@line 610 "xmltok_impl.c"
        __label__ = 56; break; //@line 610 "xmltok_impl.c"
      case 56: // $bb56
        var $193=HEAP[$tok]; //@line 611 "xmltok_impl.c"
        HEAP[$0]=$193; //@line 611 "xmltok_impl.c"
        __label__ = 100; break; //@line 611 "xmltok_impl.c"
      case 57: // $bb57
        __label__ = 60; break; //@line 611 "xmltok_impl.c"
      case 58: // $bb58
        var $194=HEAP[$ptr_addr]; //@line 616 "xmltok_impl.c"
        var $195=HEAP[$nextTokPtr_addr]; //@line 616 "xmltok_impl.c"
        HEAP[$195]=$194; //@line 616 "xmltok_impl.c"
        HEAP[$0]=0; //@line 617 "xmltok_impl.c"
        __label__ = 100; break; //@line 617 "xmltok_impl.c"
      case 59: // $bb59
        var $196=HEAP[$ptr_addr]; //@line 619 "xmltok_impl.c"
        var $197=(($196+1)&4294967295); //@line 619 "xmltok_impl.c"
        HEAP[$ptr_addr]=$197; //@line 619 "xmltok_impl.c"
        __label__ = 60; break; //@line 619 "xmltok_impl.c"
      case 60: // $bb60
        __label__ = 33; break; //@line 619 "xmltok_impl.c"
      case 61: // $bb61
        var $198=HEAP[$ptr_addr]; //@line 623 "xmltok_impl.c"
        var $199=(($198+1)&4294967295); //@line 623 "xmltok_impl.c"
        HEAP[$ptr_addr]=$199; //@line 623 "xmltok_impl.c"
        var $200=HEAP[$ptr_addr]; //@line 624 "xmltok_impl.c"
        var $201=HEAP[$end_addr]; //@line 624 "xmltok_impl.c"
        var $202=($200)==($201); //@line 624 "xmltok_impl.c"
        if ($202) { __label__ = 62; break; } else { __label__ = 63; break; } //@line 624 "xmltok_impl.c"
      case 62: // $bb62
        HEAP[$0]=-1; //@line 625 "xmltok_impl.c"
        __label__ = 100; break; //@line 625 "xmltok_impl.c"
      case 63: // $bb63
        var $203=HEAP[$enc_addr]; //@line 626 "xmltok_impl.c"
        var $204=$203; //@line 626 "xmltok_impl.c"
        var $205=HEAP[$ptr_addr]; //@line 626 "xmltok_impl.c"
        var $206=HEAP[$205]; //@line 626 "xmltok_impl.c"
        var $207=unSign(($206), 8, 0); //@line 626 "xmltok_impl.c"
        var $208=(($204+72)&4294967295); //@line 626 "xmltok_impl.c"
        var $209=(($208+$207)&4294967295); //@line 626 "xmltok_impl.c"
        var $210=HEAP[$209]; //@line 626 "xmltok_impl.c"
        var $211=unSign(($210), 8, 0); //@line 626 "xmltok_impl.c"
        if ($211 == 9) {
          __label__ = 64; break;
        }
        else if ($211 == 10) {
          __label__ = 64; break;
        }
        else if ($211 == 11) {
          __label__ = 66; break;
        }
        else if ($211 == 17) {
          __label__ = 65; break;
        }
        else if ($211 == 21) {
          __label__ = 64; break;
        }
        else {
        __label__ = 67; break;
        }
        
      case 64: // $bb64
        __label__ = 68; break; //@line 626 "xmltok_impl.c"
      case 65: // $bb65
        __label__ = 90; break; //@line 626 "xmltok_impl.c"
      case 66: // $bb66
        __label__ = 89; break; //@line 626 "xmltok_impl.c"
      case 67: // $bb67
        var $212=HEAP[$ptr_addr]; //@line 636 "xmltok_impl.c"
        var $213=HEAP[$nextTokPtr_addr]; //@line 636 "xmltok_impl.c"
        HEAP[$213]=$212; //@line 636 "xmltok_impl.c"
        HEAP[$0]=0; //@line 637 "xmltok_impl.c"
        __label__ = 100; break; //@line 637 "xmltok_impl.c"
      case 68: // $bb68
        var $214=HEAP[$ptr_addr]; //@line 641 "xmltok_impl.c"
        var $215=(($214+1)&4294967295); //@line 641 "xmltok_impl.c"
        HEAP[$ptr_addr]=$215; //@line 641 "xmltok_impl.c"
        var $216=HEAP[$ptr_addr]; //@line 642 "xmltok_impl.c"
        var $217=HEAP[$end_addr]; //@line 642 "xmltok_impl.c"
        var $218=($216)==($217); //@line 642 "xmltok_impl.c"
        if ($218) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 642 "xmltok_impl.c"
      case 69: // $bb69
        HEAP[$0]=-1; //@line 643 "xmltok_impl.c"
        __label__ = 100; break; //@line 643 "xmltok_impl.c"
      case 70: // $bb70
        var $219=HEAP[$enc_addr]; //@line 644 "xmltok_impl.c"
        var $220=$219; //@line 644 "xmltok_impl.c"
        var $221=HEAP[$ptr_addr]; //@line 644 "xmltok_impl.c"
        var $222=HEAP[$221]; //@line 644 "xmltok_impl.c"
        var $223=unSign(($222), 8, 0); //@line 644 "xmltok_impl.c"
        var $224=(($220+72)&4294967295); //@line 644 "xmltok_impl.c"
        var $225=(($224+$223)&4294967295); //@line 644 "xmltok_impl.c"
        var $226=HEAP[$225]; //@line 644 "xmltok_impl.c"
        var $227=unSign(($226), 8, 0); //@line 644 "xmltok_impl.c"
        if ($227 == 5) {
          __label__ = 73; break;
        }
        else if ($227 == 6) {
          __label__ = 78; break;
        }
        else if ($227 == 7) {
          __label__ = 83; break;
        }
        else if ($227 == 9) {
          __label__ = 88; break;
        }
        else if ($227 == 10) {
          __label__ = 88; break;
        }
        else if ($227 == 11) {
          __label__ = 89; break;
        }
        else if ($227 == 17) {
          __label__ = 90; break;
        }
        else if ($227 == 21) {
          __label__ = 88; break;
        }
        else if ($227 == 22) {
          __label__ = 72; break;
        }
        else if ($227 == 24) {
          __label__ = 72; break;
        }
        else if ($227 == 29) {
          __label__ = 71; break;
        }
        else {
        __label__ = 95; break;
        }
        
      case 71: // $bb71
        var $228=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $229=HEAP[$nextTokPtr_addr]; //@line 645 "xmltok_impl.c"
        HEAP[$229]=$228; //@line 645 "xmltok_impl.c"
        HEAP[$0]=0; //@line 645 "xmltok_impl.c"
        __label__ = 100; break; //@line 645 "xmltok_impl.c"
      case 72: // $bb72
        var $230=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $231=(($230+1)&4294967295); //@line 645 "xmltok_impl.c"
        HEAP[$ptr_addr]=$231; //@line 645 "xmltok_impl.c"
        __label__ = 96; break; //@line 645 "xmltok_impl.c"
      case 73: // $bb73
        var $232=HEAP[$end_addr]; //@line 645 "xmltok_impl.c"
        var $233=($232); //@line 645 "xmltok_impl.c"
        var $234=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $235=($234); //@line 645 "xmltok_impl.c"
        var $236=((($233) - ($235))&4294967295); //@line 645 "xmltok_impl.c"
        var $237=((($236))|0) <= 1; //@line 645 "xmltok_impl.c"
        if ($237) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 645 "xmltok_impl.c"
      case 74: // $bb74
        HEAP[$0]=-2; //@line 645 "xmltok_impl.c"
        __label__ = 100; break; //@line 645 "xmltok_impl.c"
      case 75: // $bb75
        var $238=HEAP[$enc_addr]; //@line 645 "xmltok_impl.c"
        var $239=$238; //@line 645 "xmltok_impl.c"
        var $240=(($239+340)&4294967295); //@line 645 "xmltok_impl.c"
        var $241=HEAP[$240]; //@line 645 "xmltok_impl.c"
        var $242=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $243=HEAP[$enc_addr]; //@line 645 "xmltok_impl.c"
        var $244=FUNCTION_TABLE[$241]($243, $242); //@line 645 "xmltok_impl.c"
        var $245=((($244))|0)==0; //@line 645 "xmltok_impl.c"
        if ($245) { __label__ = 76; break; } else { __label__ = 77; break; } //@line 645 "xmltok_impl.c"
      case 76: // $bb76
        var $246=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $247=HEAP[$nextTokPtr_addr]; //@line 645 "xmltok_impl.c"
        HEAP[$247]=$246; //@line 645 "xmltok_impl.c"
        HEAP[$0]=0; //@line 645 "xmltok_impl.c"
        __label__ = 100; break; //@line 645 "xmltok_impl.c"
      case 77: // $bb77
        var $248=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $249=(($248+2)&4294967295); //@line 645 "xmltok_impl.c"
        HEAP[$ptr_addr]=$249; //@line 645 "xmltok_impl.c"
        __label__ = 96; break; //@line 645 "xmltok_impl.c"
      case 78: // $bb78
        var $250=HEAP[$end_addr]; //@line 645 "xmltok_impl.c"
        var $251=($250); //@line 645 "xmltok_impl.c"
        var $252=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $253=($252); //@line 645 "xmltok_impl.c"
        var $254=((($251) - ($253))&4294967295); //@line 645 "xmltok_impl.c"
        var $255=((($254))|0) <= 2; //@line 645 "xmltok_impl.c"
        if ($255) { __label__ = 79; break; } else { __label__ = 80; break; } //@line 645 "xmltok_impl.c"
      case 79: // $bb79
        HEAP[$0]=-2; //@line 645 "xmltok_impl.c"
        __label__ = 100; break; //@line 645 "xmltok_impl.c"
      case 80: // $bb80
        var $256=HEAP[$enc_addr]; //@line 645 "xmltok_impl.c"
        var $257=$256; //@line 645 "xmltok_impl.c"
        var $258=(($257+344)&4294967295); //@line 645 "xmltok_impl.c"
        var $259=HEAP[$258]; //@line 645 "xmltok_impl.c"
        var $260=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $261=HEAP[$enc_addr]; //@line 645 "xmltok_impl.c"
        var $262=FUNCTION_TABLE[$259]($261, $260); //@line 645 "xmltok_impl.c"
        var $263=((($262))|0)==0; //@line 645 "xmltok_impl.c"
        if ($263) { __label__ = 81; break; } else { __label__ = 82; break; } //@line 645 "xmltok_impl.c"
      case 81: // $bb81
        var $264=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $265=HEAP[$nextTokPtr_addr]; //@line 645 "xmltok_impl.c"
        HEAP[$265]=$264; //@line 645 "xmltok_impl.c"
        HEAP[$0]=0; //@line 645 "xmltok_impl.c"
        __label__ = 100; break; //@line 645 "xmltok_impl.c"
      case 82: // $bb82
        var $266=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $267=(($266+3)&4294967295); //@line 645 "xmltok_impl.c"
        HEAP[$ptr_addr]=$267; //@line 645 "xmltok_impl.c"
        __label__ = 96; break; //@line 645 "xmltok_impl.c"
      case 83: // $bb83
        var $268=HEAP[$end_addr]; //@line 645 "xmltok_impl.c"
        var $269=($268); //@line 645 "xmltok_impl.c"
        var $270=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $271=($270); //@line 645 "xmltok_impl.c"
        var $272=((($269) - ($271))&4294967295); //@line 645 "xmltok_impl.c"
        var $273=((($272))|0) <= 3; //@line 645 "xmltok_impl.c"
        if ($273) { __label__ = 84; break; } else { __label__ = 85; break; } //@line 645 "xmltok_impl.c"
      case 84: // $bb84
        HEAP[$0]=-2; //@line 645 "xmltok_impl.c"
        __label__ = 100; break; //@line 645 "xmltok_impl.c"
      case 85: // $bb85
        var $274=HEAP[$enc_addr]; //@line 645 "xmltok_impl.c"
        var $275=$274; //@line 645 "xmltok_impl.c"
        var $276=(($275+348)&4294967295); //@line 645 "xmltok_impl.c"
        var $277=HEAP[$276]; //@line 645 "xmltok_impl.c"
        var $278=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $279=HEAP[$enc_addr]; //@line 645 "xmltok_impl.c"
        var $280=FUNCTION_TABLE[$277]($279, $278); //@line 645 "xmltok_impl.c"
        var $281=((($280))|0)==0; //@line 645 "xmltok_impl.c"
        if ($281) { __label__ = 86; break; } else { __label__ = 87; break; } //@line 645 "xmltok_impl.c"
      case 86: // $bb86
        var $282=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $283=HEAP[$nextTokPtr_addr]; //@line 645 "xmltok_impl.c"
        HEAP[$283]=$282; //@line 645 "xmltok_impl.c"
        HEAP[$0]=0; //@line 645 "xmltok_impl.c"
        __label__ = 100; break; //@line 645 "xmltok_impl.c"
      case 87: // $bb87
        var $284=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $285=(($284+4)&4294967295); //@line 645 "xmltok_impl.c"
        HEAP[$ptr_addr]=$285; //@line 645 "xmltok_impl.c"
        __label__ = 96; break; //@line 645 "xmltok_impl.c"
      case 88: // $bb88
        __label__ = 68; break; //@line 645 "xmltok_impl.c"
      case 89: // $gt
        var $286=HEAP[$ptr_addr]; //@line 650 "xmltok_impl.c"
        var $287=(($286+1)&4294967295); //@line 650 "xmltok_impl.c"
        var $288=HEAP[$nextTokPtr_addr]; //@line 650 "xmltok_impl.c"
        HEAP[$288]=$287; //@line 650 "xmltok_impl.c"
        HEAP[$0]=1; //@line 651 "xmltok_impl.c"
        __label__ = 100; break; //@line 651 "xmltok_impl.c"
      case 90: // $sol
        var $289=HEAP[$ptr_addr]; //@line 654 "xmltok_impl.c"
        var $290=(($289+1)&4294967295); //@line 654 "xmltok_impl.c"
        HEAP[$ptr_addr]=$290; //@line 654 "xmltok_impl.c"
        var $291=HEAP[$ptr_addr]; //@line 655 "xmltok_impl.c"
        var $292=HEAP[$end_addr]; //@line 655 "xmltok_impl.c"
        var $293=($291)==($292); //@line 655 "xmltok_impl.c"
        if ($293) { __label__ = 91; break; } else { __label__ = 92; break; } //@line 655 "xmltok_impl.c"
      case 91: // $bb89
        HEAP[$0]=-1; //@line 656 "xmltok_impl.c"
        __label__ = 100; break; //@line 656 "xmltok_impl.c"
      case 92: // $bb90
        var $294=HEAP[$ptr_addr]; //@line 657 "xmltok_impl.c"
        var $295=HEAP[$294]; //@line 657 "xmltok_impl.c"
        var $296=reSign(($295), 8, 0)!=62; //@line 657 "xmltok_impl.c"
        if ($296) { __label__ = 93; break; } else { __label__ = 94; break; } //@line 657 "xmltok_impl.c"
      case 93: // $bb91
        var $297=HEAP[$ptr_addr]; //@line 658 "xmltok_impl.c"
        var $298=HEAP[$nextTokPtr_addr]; //@line 658 "xmltok_impl.c"
        HEAP[$298]=$297; //@line 658 "xmltok_impl.c"
        HEAP[$0]=0; //@line 659 "xmltok_impl.c"
        __label__ = 100; break; //@line 659 "xmltok_impl.c"
      case 94: // $bb92
        var $299=HEAP[$ptr_addr]; //@line 661 "xmltok_impl.c"
        var $300=(($299+1)&4294967295); //@line 661 "xmltok_impl.c"
        var $301=HEAP[$nextTokPtr_addr]; //@line 661 "xmltok_impl.c"
        HEAP[$301]=$300; //@line 661 "xmltok_impl.c"
        HEAP[$0]=3; //@line 662 "xmltok_impl.c"
        __label__ = 100; break; //@line 662 "xmltok_impl.c"
      case 95: // $bb93
        var $302=HEAP[$ptr_addr]; //@line 664 "xmltok_impl.c"
        var $303=HEAP[$nextTokPtr_addr]; //@line 664 "xmltok_impl.c"
        HEAP[$303]=$302; //@line 664 "xmltok_impl.c"
        HEAP[$0]=0; //@line 665 "xmltok_impl.c"
        __label__ = 100; break; //@line 665 "xmltok_impl.c"
      case 96: // $bb94
        __label__ = 98; break; //@line 665 "xmltok_impl.c"
      case 97: // $bb95
        var $304=HEAP[$ptr_addr]; //@line 672 "xmltok_impl.c"
        var $305=HEAP[$nextTokPtr_addr]; //@line 672 "xmltok_impl.c"
        HEAP[$305]=$304; //@line 672 "xmltok_impl.c"
        HEAP[$0]=0; //@line 673 "xmltok_impl.c"
        __label__ = 100; break; //@line 673 "xmltok_impl.c"
      case 98: // $bb96
        var $306=HEAP[$ptr_addr]; //@line 529 "xmltok_impl.c"
        var $307=HEAP[$end_addr]; //@line 529 "xmltok_impl.c"
        var $308=($306)!=($307); //@line 529 "xmltok_impl.c"
        if ($308) { __label__ = 1; break; } else { __label__ = 99; break; } //@line 529 "xmltok_impl.c"
      case 99: // $bb97
        HEAP[$0]=-1; //@line 676 "xmltok_impl.c"
        __label__ = 100; break; //@line 676 "xmltok_impl.c"
      case 100: // $bb98
        var $309=HEAP[$0]; //@line 531 "xmltok_impl.c"
        HEAP[$retval]=$309; //@line 531 "xmltok_impl.c"
        __label__ = 101; break; //@line 531 "xmltok_impl.c"
      case 101: // $return
        var $retval99=HEAP[$retval]; //@line 531 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval99; //@line 531 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_scanLt($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 688 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 688 "xmltok_impl.c"
        var $3=($1)==($2); //@line 688 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 688 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 689 "xmltok_impl.c"
        __label__ = 83; break; //@line 689 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$enc_addr]; //@line 690 "xmltok_impl.c"
        var $5=$4; //@line 690 "xmltok_impl.c"
        var $6=HEAP[$ptr_addr]; //@line 690 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 690 "xmltok_impl.c"
        var $8=unSign(($7), 8, 0); //@line 690 "xmltok_impl.c"
        var $9=(($5+72)&4294967295); //@line 690 "xmltok_impl.c"
        var $10=(($9+$8)&4294967295); //@line 690 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 690 "xmltok_impl.c"
        var $12=unSign(($11), 8, 0); //@line 690 "xmltok_impl.c"
        if ($12 == 5) {
          __label__ = 5; break;
        }
        else if ($12 == 6) {
          __label__ = 10; break;
        }
        else if ($12 == 7) {
          __label__ = 15; break;
        }
        else if ($12 == 15) {
          __label__ = 26; break;
        }
        else if ($12 == 16) {
          __label__ = 20; break;
        }
        else if ($12 == 17) {
          __label__ = 27; break;
        }
        else if ($12 == 22) {
          __label__ = 4; break;
        }
        else if ($12 == 24) {
          __label__ = 4; break;
        }
        else if ($12 == 29) {
          __label__ = 3; break;
        }
        else {
        __label__ = 28; break;
        }
        
      case 3: // $bb2
        var $13=HEAP[$nextTokPtr_addr]; //@line 691 "xmltok_impl.c"
        var $14=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        HEAP[$13]=$14; //@line 691 "xmltok_impl.c"
        HEAP[$0]=0; //@line 691 "xmltok_impl.c"
        __label__ = 83; break; //@line 691 "xmltok_impl.c"
      case 4: // $bb3
        var $15=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        var $16=(($15+1)&4294967295); //@line 691 "xmltok_impl.c"
        HEAP[$ptr_addr]=$16; //@line 691 "xmltok_impl.c"
        __label__ = 29; break; //@line 691 "xmltok_impl.c"
      case 5: // $bb4
        var $17=HEAP[$end_addr]; //@line 691 "xmltok_impl.c"
        var $18=($17); //@line 691 "xmltok_impl.c"
        var $19=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        var $20=($19); //@line 691 "xmltok_impl.c"
        var $21=((($18) - ($20))&4294967295); //@line 691 "xmltok_impl.c"
        var $22=((($21))|0) <= 1; //@line 691 "xmltok_impl.c"
        if ($22) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 691 "xmltok_impl.c"
      case 6: // $bb5
        HEAP[$0]=-2; //@line 691 "xmltok_impl.c"
        __label__ = 83; break; //@line 691 "xmltok_impl.c"
      case 7: // $bb6
        var $23=HEAP[$enc_addr]; //@line 691 "xmltok_impl.c"
        var $24=$23; //@line 691 "xmltok_impl.c"
        var $25=(($24+340)&4294967295); //@line 691 "xmltok_impl.c"
        var $26=HEAP[$25]; //@line 691 "xmltok_impl.c"
        var $27=HEAP[$enc_addr]; //@line 691 "xmltok_impl.c"
        var $28=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        var $29=FUNCTION_TABLE[$26]($27, $28); //@line 691 "xmltok_impl.c"
        var $30=((($29))|0)==0; //@line 691 "xmltok_impl.c"
        if ($30) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 691 "xmltok_impl.c"
      case 8: // $bb7
        var $31=HEAP[$nextTokPtr_addr]; //@line 691 "xmltok_impl.c"
        var $32=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        HEAP[$31]=$32; //@line 691 "xmltok_impl.c"
        HEAP[$0]=0; //@line 691 "xmltok_impl.c"
        __label__ = 83; break; //@line 691 "xmltok_impl.c"
      case 9: // $bb8
        var $33=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        var $34=(($33+2)&4294967295); //@line 691 "xmltok_impl.c"
        HEAP[$ptr_addr]=$34; //@line 691 "xmltok_impl.c"
        __label__ = 29; break; //@line 691 "xmltok_impl.c"
      case 10: // $bb9
        var $35=HEAP[$end_addr]; //@line 691 "xmltok_impl.c"
        var $36=($35); //@line 691 "xmltok_impl.c"
        var $37=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        var $38=($37); //@line 691 "xmltok_impl.c"
        var $39=((($36) - ($38))&4294967295); //@line 691 "xmltok_impl.c"
        var $40=((($39))|0) <= 2; //@line 691 "xmltok_impl.c"
        if ($40) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 691 "xmltok_impl.c"
      case 11: // $bb10
        HEAP[$0]=-2; //@line 691 "xmltok_impl.c"
        __label__ = 83; break; //@line 691 "xmltok_impl.c"
      case 12: // $bb11
        var $41=HEAP[$enc_addr]; //@line 691 "xmltok_impl.c"
        var $42=$41; //@line 691 "xmltok_impl.c"
        var $43=(($42+344)&4294967295); //@line 691 "xmltok_impl.c"
        var $44=HEAP[$43]; //@line 691 "xmltok_impl.c"
        var $45=HEAP[$enc_addr]; //@line 691 "xmltok_impl.c"
        var $46=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        var $47=FUNCTION_TABLE[$44]($45, $46); //@line 691 "xmltok_impl.c"
        var $48=((($47))|0)==0; //@line 691 "xmltok_impl.c"
        if ($48) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 691 "xmltok_impl.c"
      case 13: // $bb12
        var $49=HEAP[$nextTokPtr_addr]; //@line 691 "xmltok_impl.c"
        var $50=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        HEAP[$49]=$50; //@line 691 "xmltok_impl.c"
        HEAP[$0]=0; //@line 691 "xmltok_impl.c"
        __label__ = 83; break; //@line 691 "xmltok_impl.c"
      case 14: // $bb13
        var $51=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        var $52=(($51+3)&4294967295); //@line 691 "xmltok_impl.c"
        HEAP[$ptr_addr]=$52; //@line 691 "xmltok_impl.c"
        __label__ = 29; break; //@line 691 "xmltok_impl.c"
      case 15: // $bb14
        var $53=HEAP[$end_addr]; //@line 691 "xmltok_impl.c"
        var $54=($53); //@line 691 "xmltok_impl.c"
        var $55=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        var $56=($55); //@line 691 "xmltok_impl.c"
        var $57=((($54) - ($56))&4294967295); //@line 691 "xmltok_impl.c"
        var $58=((($57))|0) <= 3; //@line 691 "xmltok_impl.c"
        if ($58) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 691 "xmltok_impl.c"
      case 16: // $bb15
        HEAP[$0]=-2; //@line 691 "xmltok_impl.c"
        __label__ = 83; break; //@line 691 "xmltok_impl.c"
      case 17: // $bb16
        var $59=HEAP[$enc_addr]; //@line 691 "xmltok_impl.c"
        var $60=$59; //@line 691 "xmltok_impl.c"
        var $61=(($60+348)&4294967295); //@line 691 "xmltok_impl.c"
        var $62=HEAP[$61]; //@line 691 "xmltok_impl.c"
        var $63=HEAP[$enc_addr]; //@line 691 "xmltok_impl.c"
        var $64=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        var $65=FUNCTION_TABLE[$62]($63, $64); //@line 691 "xmltok_impl.c"
        var $66=((($65))|0)==0; //@line 691 "xmltok_impl.c"
        if ($66) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 691 "xmltok_impl.c"
      case 18: // $bb17
        var $67=HEAP[$nextTokPtr_addr]; //@line 691 "xmltok_impl.c"
        var $68=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        HEAP[$67]=$68; //@line 691 "xmltok_impl.c"
        HEAP[$0]=0; //@line 691 "xmltok_impl.c"
        __label__ = 83; break; //@line 691 "xmltok_impl.c"
      case 19: // $bb18
        var $69=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        var $70=(($69+4)&4294967295); //@line 691 "xmltok_impl.c"
        HEAP[$ptr_addr]=$70; //@line 691 "xmltok_impl.c"
        __label__ = 29; break; //@line 691 "xmltok_impl.c"
      case 20: // $bb19
        var $71=HEAP[$ptr_addr]; //@line 693 "xmltok_impl.c"
        var $72=(($71+1)&4294967295); //@line 693 "xmltok_impl.c"
        HEAP[$ptr_addr]=$72; //@line 693 "xmltok_impl.c"
        var $73=HEAP[$ptr_addr]; //@line 693 "xmltok_impl.c"
        var $74=HEAP[$end_addr]; //@line 693 "xmltok_impl.c"
        var $75=($73)==($74); //@line 693 "xmltok_impl.c"
        if ($75) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 693 "xmltok_impl.c"
      case 21: // $bb20
        HEAP[$0]=-1; //@line 694 "xmltok_impl.c"
        __label__ = 83; break; //@line 694 "xmltok_impl.c"
      case 22: // $bb21
        var $76=HEAP[$enc_addr]; //@line 695 "xmltok_impl.c"
        var $77=$76; //@line 695 "xmltok_impl.c"
        var $78=HEAP[$ptr_addr]; //@line 695 "xmltok_impl.c"
        var $79=HEAP[$78]; //@line 695 "xmltok_impl.c"
        var $80=unSign(($79), 8, 0); //@line 695 "xmltok_impl.c"
        var $81=(($77+72)&4294967295); //@line 695 "xmltok_impl.c"
        var $82=(($81+$80)&4294967295); //@line 695 "xmltok_impl.c"
        var $83=HEAP[$82]; //@line 695 "xmltok_impl.c"
        var $84=unSign(($83), 8, 0); //@line 695 "xmltok_impl.c"
        if ($84 == 20) {
          __label__ = 24; break;
        }
        else if ($84 == 27) {
          __label__ = 23; break;
        }
        else {
        __label__ = 25; break;
        }
        
      case 23: // $bb22
        var $85=HEAP[$ptr_addr]; //@line 697 "xmltok_impl.c"
        var $86=(($85+1)&4294967295); //@line 697 "xmltok_impl.c"
        var $87=HEAP[$enc_addr]; //@line 697 "xmltok_impl.c"
        var $88=HEAP[$end_addr]; //@line 697 "xmltok_impl.c"
        var $89=HEAP[$nextTokPtr_addr]; //@line 697 "xmltok_impl.c"
        var $90=_normal_scanComment($87, $86, $88, $89); //@line 697 "xmltok_impl.c"
        HEAP[$0]=$90; //@line 697 "xmltok_impl.c"
        __label__ = 83; break; //@line 697 "xmltok_impl.c"
      case 24: // $bb23
        var $91=HEAP[$ptr_addr]; //@line 699 "xmltok_impl.c"
        var $92=(($91+1)&4294967295); //@line 699 "xmltok_impl.c"
        var $93=HEAP[$enc_addr]; //@line 699 "xmltok_impl.c"
        var $94=HEAP[$end_addr]; //@line 699 "xmltok_impl.c"
        var $95=HEAP[$nextTokPtr_addr]; //@line 699 "xmltok_impl.c"
        var $96=_normal_scanCdataSection($93, $92, $94, $95); //@line 699 "xmltok_impl.c"
        HEAP[$0]=$96; //@line 699 "xmltok_impl.c"
        __label__ = 83; break; //@line 699 "xmltok_impl.c"
      case 25: // $bb24
        var $97=HEAP[$nextTokPtr_addr]; //@line 702 "xmltok_impl.c"
        var $98=HEAP[$ptr_addr]; //@line 702 "xmltok_impl.c"
        HEAP[$97]=$98; //@line 702 "xmltok_impl.c"
        HEAP[$0]=0; //@line 703 "xmltok_impl.c"
        __label__ = 83; break; //@line 703 "xmltok_impl.c"
      case 26: // $bb25
        var $99=HEAP[$ptr_addr]; //@line 705 "xmltok_impl.c"
        var $100=(($99+1)&4294967295); //@line 705 "xmltok_impl.c"
        var $101=HEAP[$enc_addr]; //@line 705 "xmltok_impl.c"
        var $102=HEAP[$end_addr]; //@line 705 "xmltok_impl.c"
        var $103=HEAP[$nextTokPtr_addr]; //@line 705 "xmltok_impl.c"
        var $104=_normal_scanPi($101, $100, $102, $103); //@line 705 "xmltok_impl.c"
        HEAP[$0]=$104; //@line 705 "xmltok_impl.c"
        __label__ = 83; break; //@line 705 "xmltok_impl.c"
      case 27: // $bb26
        var $105=HEAP[$ptr_addr]; //@line 707 "xmltok_impl.c"
        var $106=(($105+1)&4294967295); //@line 707 "xmltok_impl.c"
        var $107=HEAP[$enc_addr]; //@line 707 "xmltok_impl.c"
        var $108=HEAP[$end_addr]; //@line 707 "xmltok_impl.c"
        var $109=HEAP[$nextTokPtr_addr]; //@line 707 "xmltok_impl.c"
        var $110=_normal_scanEndTag($107, $106, $108, $109); //@line 707 "xmltok_impl.c"
        HEAP[$0]=$110; //@line 707 "xmltok_impl.c"
        __label__ = 83; break; //@line 707 "xmltok_impl.c"
      case 28: // $bb27
        var $111=HEAP[$nextTokPtr_addr]; //@line 709 "xmltok_impl.c"
        var $112=HEAP[$ptr_addr]; //@line 709 "xmltok_impl.c"
        HEAP[$111]=$112; //@line 709 "xmltok_impl.c"
        HEAP[$0]=0; //@line 710 "xmltok_impl.c"
        __label__ = 83; break; //@line 710 "xmltok_impl.c"
      case 29: // $bb28
        __label__ = 81; break; //@line 710 "xmltok_impl.c"
      case 30: // $bb29
        var $113=HEAP[$enc_addr]; //@line 717 "xmltok_impl.c"
        var $114=$113; //@line 717 "xmltok_impl.c"
        var $115=HEAP[$ptr_addr]; //@line 717 "xmltok_impl.c"
        var $116=HEAP[$115]; //@line 717 "xmltok_impl.c"
        var $117=unSign(($116), 8, 0); //@line 717 "xmltok_impl.c"
        var $118=(($114+72)&4294967295); //@line 717 "xmltok_impl.c"
        var $119=(($118+$117)&4294967295); //@line 717 "xmltok_impl.c"
        var $120=HEAP[$119]; //@line 717 "xmltok_impl.c"
        var $121=unSign(($120), 8, 0); //@line 717 "xmltok_impl.c"
        if ($121 == 5) {
          __label__ = 33; break;
        }
        else if ($121 == 6) {
          __label__ = 38; break;
        }
        else if ($121 == 7) {
          __label__ = 43; break;
        }
        else if ($121 == 9) {
          __label__ = 48; break;
        }
        else if ($121 == 10) {
          __label__ = 48; break;
        }
        else if ($121 == 11) {
          __label__ = 74; break;
        }
        else if ($121 == 17) {
          __label__ = 75; break;
        }
        else if ($121 == 21) {
          __label__ = 48; break;
        }
        else if ($121 == 22) {
          __label__ = 32; break;
        }
        else if ($121 == 24) {
          __label__ = 32; break;
        }
        else if ($121 == 25) {
          __label__ = 32; break;
        }
        else if ($121 == 26) {
          __label__ = 32; break;
        }
        else if ($121 == 27) {
          __label__ = 32; break;
        }
        else if ($121 == 29) {
          __label__ = 31; break;
        }
        else {
        __label__ = 80; break;
        }
        
      case 31: // $bb30
        var $122=HEAP[$nextTokPtr_addr]; //@line 718 "xmltok_impl.c"
        var $123=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        HEAP[$122]=$123; //@line 718 "xmltok_impl.c"
        HEAP[$0]=0; //@line 718 "xmltok_impl.c"
        __label__ = 83; break; //@line 718 "xmltok_impl.c"
      case 32: // $bb31
        var $124=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        var $125=(($124+1)&4294967295); //@line 718 "xmltok_impl.c"
        HEAP[$ptr_addr]=$125; //@line 718 "xmltok_impl.c"
        __label__ = 81; break; //@line 718 "xmltok_impl.c"
      case 33: // $bb32
        var $126=HEAP[$end_addr]; //@line 718 "xmltok_impl.c"
        var $127=($126); //@line 718 "xmltok_impl.c"
        var $128=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        var $129=($128); //@line 718 "xmltok_impl.c"
        var $130=((($127) - ($129))&4294967295); //@line 718 "xmltok_impl.c"
        var $131=((($130))|0) <= 1; //@line 718 "xmltok_impl.c"
        if ($131) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 718 "xmltok_impl.c"
      case 34: // $bb33
        HEAP[$0]=-2; //@line 718 "xmltok_impl.c"
        __label__ = 83; break; //@line 718 "xmltok_impl.c"
      case 35: // $bb34
        var $132=HEAP[$enc_addr]; //@line 718 "xmltok_impl.c"
        var $133=$132; //@line 718 "xmltok_impl.c"
        var $134=(($133+328)&4294967295); //@line 718 "xmltok_impl.c"
        var $135=HEAP[$134]; //@line 718 "xmltok_impl.c"
        var $136=HEAP[$enc_addr]; //@line 718 "xmltok_impl.c"
        var $137=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        var $138=FUNCTION_TABLE[$135]($136, $137); //@line 718 "xmltok_impl.c"
        var $139=((($138))|0)==0; //@line 718 "xmltok_impl.c"
        if ($139) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 718 "xmltok_impl.c"
      case 36: // $bb35
        var $140=HEAP[$nextTokPtr_addr]; //@line 718 "xmltok_impl.c"
        var $141=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        HEAP[$140]=$141; //@line 718 "xmltok_impl.c"
        HEAP[$0]=0; //@line 718 "xmltok_impl.c"
        __label__ = 83; break; //@line 718 "xmltok_impl.c"
      case 37: // $bb36
        var $142=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        var $143=(($142+2)&4294967295); //@line 718 "xmltok_impl.c"
        HEAP[$ptr_addr]=$143; //@line 718 "xmltok_impl.c"
        __label__ = 81; break; //@line 718 "xmltok_impl.c"
      case 38: // $bb37
        var $144=HEAP[$end_addr]; //@line 718 "xmltok_impl.c"
        var $145=($144); //@line 718 "xmltok_impl.c"
        var $146=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        var $147=($146); //@line 718 "xmltok_impl.c"
        var $148=((($145) - ($147))&4294967295); //@line 718 "xmltok_impl.c"
        var $149=((($148))|0) <= 2; //@line 718 "xmltok_impl.c"
        if ($149) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 718 "xmltok_impl.c"
      case 39: // $bb38
        HEAP[$0]=-2; //@line 718 "xmltok_impl.c"
        __label__ = 83; break; //@line 718 "xmltok_impl.c"
      case 40: // $bb39
        var $150=HEAP[$enc_addr]; //@line 718 "xmltok_impl.c"
        var $151=$150; //@line 718 "xmltok_impl.c"
        var $152=(($151+332)&4294967295); //@line 718 "xmltok_impl.c"
        var $153=HEAP[$152]; //@line 718 "xmltok_impl.c"
        var $154=HEAP[$enc_addr]; //@line 718 "xmltok_impl.c"
        var $155=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        var $156=FUNCTION_TABLE[$153]($154, $155); //@line 718 "xmltok_impl.c"
        var $157=((($156))|0)==0; //@line 718 "xmltok_impl.c"
        if ($157) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 718 "xmltok_impl.c"
      case 41: // $bb40
        var $158=HEAP[$nextTokPtr_addr]; //@line 718 "xmltok_impl.c"
        var $159=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        HEAP[$158]=$159; //@line 718 "xmltok_impl.c"
        HEAP[$0]=0; //@line 718 "xmltok_impl.c"
        __label__ = 83; break; //@line 718 "xmltok_impl.c"
      case 42: // $bb41
        var $160=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        var $161=(($160+3)&4294967295); //@line 718 "xmltok_impl.c"
        HEAP[$ptr_addr]=$161; //@line 718 "xmltok_impl.c"
        __label__ = 81; break; //@line 718 "xmltok_impl.c"
      case 43: // $bb42
        var $162=HEAP[$end_addr]; //@line 718 "xmltok_impl.c"
        var $163=($162); //@line 718 "xmltok_impl.c"
        var $164=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        var $165=($164); //@line 718 "xmltok_impl.c"
        var $166=((($163) - ($165))&4294967295); //@line 718 "xmltok_impl.c"
        var $167=((($166))|0) <= 3; //@line 718 "xmltok_impl.c"
        if ($167) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 718 "xmltok_impl.c"
      case 44: // $bb43
        HEAP[$0]=-2; //@line 718 "xmltok_impl.c"
        __label__ = 83; break; //@line 718 "xmltok_impl.c"
      case 45: // $bb44
        var $168=HEAP[$enc_addr]; //@line 718 "xmltok_impl.c"
        var $169=$168; //@line 718 "xmltok_impl.c"
        var $170=(($169+336)&4294967295); //@line 718 "xmltok_impl.c"
        var $171=HEAP[$170]; //@line 718 "xmltok_impl.c"
        var $172=HEAP[$enc_addr]; //@line 718 "xmltok_impl.c"
        var $173=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        var $174=FUNCTION_TABLE[$171]($172, $173); //@line 718 "xmltok_impl.c"
        var $175=((($174))|0)==0; //@line 718 "xmltok_impl.c"
        if ($175) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 718 "xmltok_impl.c"
      case 46: // $bb45
        var $176=HEAP[$nextTokPtr_addr]; //@line 718 "xmltok_impl.c"
        var $177=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        HEAP[$176]=$177; //@line 718 "xmltok_impl.c"
        HEAP[$0]=0; //@line 718 "xmltok_impl.c"
        __label__ = 83; break; //@line 718 "xmltok_impl.c"
      case 47: // $bb46
        var $178=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        var $179=(($178+4)&4294967295); //@line 718 "xmltok_impl.c"
        HEAP[$ptr_addr]=$179; //@line 718 "xmltok_impl.c"
        __label__ = 81; break; //@line 718 "xmltok_impl.c"
      case 48: // $bb47
        var $180=HEAP[$ptr_addr]; //@line 739 "xmltok_impl.c"
        var $181=(($180+1)&4294967295); //@line 739 "xmltok_impl.c"
        HEAP[$ptr_addr]=$181; //@line 739 "xmltok_impl.c"
        __label__ = 72; break; //@line 739 "xmltok_impl.c"
      case 49: // $bb48
        var $182=HEAP[$enc_addr]; //@line 741 "xmltok_impl.c"
        var $183=$182; //@line 741 "xmltok_impl.c"
        var $184=HEAP[$ptr_addr]; //@line 741 "xmltok_impl.c"
        var $185=HEAP[$184]; //@line 741 "xmltok_impl.c"
        var $186=unSign(($185), 8, 0); //@line 741 "xmltok_impl.c"
        var $187=(($183+72)&4294967295); //@line 741 "xmltok_impl.c"
        var $188=(($187+$186)&4294967295); //@line 741 "xmltok_impl.c"
        var $189=HEAP[$188]; //@line 741 "xmltok_impl.c"
        var $190=unSign(($189), 8, 0); //@line 741 "xmltok_impl.c"
        if ($190 == 5) {
          __label__ = 52; break;
        }
        else if ($190 == 6) {
          __label__ = 57; break;
        }
        else if ($190 == 7) {
          __label__ = 62; break;
        }
        else if ($190 == 9) {
          __label__ = 69; break;
        }
        else if ($190 == 10) {
          __label__ = 69; break;
        }
        else if ($190 == 11) {
          __label__ = 67; break;
        }
        else if ($190 == 17) {
          __label__ = 68; break;
        }
        else if ($190 == 21) {
          __label__ = 69; break;
        }
        else if ($190 == 22) {
          __label__ = 51; break;
        }
        else if ($190 == 24) {
          __label__ = 51; break;
        }
        else if ($190 == 29) {
          __label__ = 50; break;
        }
        else {
        __label__ = 70; break;
        }
        
      case 50: // $bb49
        var $191=HEAP[$nextTokPtr_addr]; //@line 742 "xmltok_impl.c"
        var $192=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        HEAP[$191]=$192; //@line 742 "xmltok_impl.c"
        HEAP[$0]=0; //@line 742 "xmltok_impl.c"
        __label__ = 83; break; //@line 742 "xmltok_impl.c"
      case 51: // $bb50
        var $193=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        var $194=(($193+1)&4294967295); //@line 742 "xmltok_impl.c"
        HEAP[$ptr_addr]=$194; //@line 742 "xmltok_impl.c"
        __label__ = 71; break; //@line 742 "xmltok_impl.c"
      case 52: // $bb51
        var $195=HEAP[$end_addr]; //@line 742 "xmltok_impl.c"
        var $196=($195); //@line 742 "xmltok_impl.c"
        var $197=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        var $198=($197); //@line 742 "xmltok_impl.c"
        var $199=((($196) - ($198))&4294967295); //@line 742 "xmltok_impl.c"
        var $200=((($199))|0) <= 1; //@line 742 "xmltok_impl.c"
        if ($200) { __label__ = 53; break; } else { __label__ = 54; break; } //@line 742 "xmltok_impl.c"
      case 53: // $bb52
        HEAP[$0]=-2; //@line 742 "xmltok_impl.c"
        __label__ = 83; break; //@line 742 "xmltok_impl.c"
      case 54: // $bb53
        var $201=HEAP[$enc_addr]; //@line 742 "xmltok_impl.c"
        var $202=$201; //@line 742 "xmltok_impl.c"
        var $203=(($202+340)&4294967295); //@line 742 "xmltok_impl.c"
        var $204=HEAP[$203]; //@line 742 "xmltok_impl.c"
        var $205=HEAP[$enc_addr]; //@line 742 "xmltok_impl.c"
        var $206=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        var $207=FUNCTION_TABLE[$204]($205, $206); //@line 742 "xmltok_impl.c"
        var $208=((($207))|0)==0; //@line 742 "xmltok_impl.c"
        if ($208) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 742 "xmltok_impl.c"
      case 55: // $bb54
        var $209=HEAP[$nextTokPtr_addr]; //@line 742 "xmltok_impl.c"
        var $210=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        HEAP[$209]=$210; //@line 742 "xmltok_impl.c"
        HEAP[$0]=0; //@line 742 "xmltok_impl.c"
        __label__ = 83; break; //@line 742 "xmltok_impl.c"
      case 56: // $bb55
        var $211=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        var $212=(($211+2)&4294967295); //@line 742 "xmltok_impl.c"
        HEAP[$ptr_addr]=$212; //@line 742 "xmltok_impl.c"
        __label__ = 71; break; //@line 742 "xmltok_impl.c"
      case 57: // $bb56
        var $213=HEAP[$end_addr]; //@line 742 "xmltok_impl.c"
        var $214=($213); //@line 742 "xmltok_impl.c"
        var $215=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        var $216=($215); //@line 742 "xmltok_impl.c"
        var $217=((($214) - ($216))&4294967295); //@line 742 "xmltok_impl.c"
        var $218=((($217))|0) <= 2; //@line 742 "xmltok_impl.c"
        if ($218) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 742 "xmltok_impl.c"
      case 58: // $bb57
        HEAP[$0]=-2; //@line 742 "xmltok_impl.c"
        __label__ = 83; break; //@line 742 "xmltok_impl.c"
      case 59: // $bb58
        var $219=HEAP[$enc_addr]; //@line 742 "xmltok_impl.c"
        var $220=$219; //@line 742 "xmltok_impl.c"
        var $221=(($220+344)&4294967295); //@line 742 "xmltok_impl.c"
        var $222=HEAP[$221]; //@line 742 "xmltok_impl.c"
        var $223=HEAP[$enc_addr]; //@line 742 "xmltok_impl.c"
        var $224=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        var $225=FUNCTION_TABLE[$222]($223, $224); //@line 742 "xmltok_impl.c"
        var $226=((($225))|0)==0; //@line 742 "xmltok_impl.c"
        if ($226) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 742 "xmltok_impl.c"
      case 60: // $bb59
        var $227=HEAP[$nextTokPtr_addr]; //@line 742 "xmltok_impl.c"
        var $228=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        HEAP[$227]=$228; //@line 742 "xmltok_impl.c"
        HEAP[$0]=0; //@line 742 "xmltok_impl.c"
        __label__ = 83; break; //@line 742 "xmltok_impl.c"
      case 61: // $bb60
        var $229=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        var $230=(($229+3)&4294967295); //@line 742 "xmltok_impl.c"
        HEAP[$ptr_addr]=$230; //@line 742 "xmltok_impl.c"
        __label__ = 71; break; //@line 742 "xmltok_impl.c"
      case 62: // $bb61
        var $231=HEAP[$end_addr]; //@line 742 "xmltok_impl.c"
        var $232=($231); //@line 742 "xmltok_impl.c"
        var $233=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        var $234=($233); //@line 742 "xmltok_impl.c"
        var $235=((($232) - ($234))&4294967295); //@line 742 "xmltok_impl.c"
        var $236=((($235))|0) <= 3; //@line 742 "xmltok_impl.c"
        if ($236) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 742 "xmltok_impl.c"
      case 63: // $bb62
        HEAP[$0]=-2; //@line 742 "xmltok_impl.c"
        __label__ = 83; break; //@line 742 "xmltok_impl.c"
      case 64: // $bb63
        var $237=HEAP[$enc_addr]; //@line 742 "xmltok_impl.c"
        var $238=$237; //@line 742 "xmltok_impl.c"
        var $239=(($238+348)&4294967295); //@line 742 "xmltok_impl.c"
        var $240=HEAP[$239]; //@line 742 "xmltok_impl.c"
        var $241=HEAP[$enc_addr]; //@line 742 "xmltok_impl.c"
        var $242=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        var $243=FUNCTION_TABLE[$240]($241, $242); //@line 742 "xmltok_impl.c"
        var $244=((($243))|0)==0; //@line 742 "xmltok_impl.c"
        if ($244) { __label__ = 65; break; } else { __label__ = 66; break; } //@line 742 "xmltok_impl.c"
      case 65: // $bb64
        var $245=HEAP[$nextTokPtr_addr]; //@line 742 "xmltok_impl.c"
        var $246=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        HEAP[$245]=$246; //@line 742 "xmltok_impl.c"
        HEAP[$0]=0; //@line 742 "xmltok_impl.c"
        __label__ = 83; break; //@line 742 "xmltok_impl.c"
      case 66: // $bb65
        var $247=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        var $248=(($247+4)&4294967295); //@line 742 "xmltok_impl.c"
        HEAP[$ptr_addr]=$248; //@line 742 "xmltok_impl.c"
        __label__ = 71; break; //@line 742 "xmltok_impl.c"
      case 67: // $bb66
        __label__ = 74; break; //@line 742 "xmltok_impl.c"
      case 68: // $bb67
        __label__ = 75; break; //@line 742 "xmltok_impl.c"
      case 69: // $bb68
        var $249=HEAP[$ptr_addr]; //@line 748 "xmltok_impl.c"
        var $250=(($249+1)&4294967295); //@line 748 "xmltok_impl.c"
        HEAP[$ptr_addr]=$250; //@line 748 "xmltok_impl.c"
        __label__ = 72; break; //@line 748 "xmltok_impl.c"
      case 70: // $bb69
        var $251=HEAP[$nextTokPtr_addr]; //@line 751 "xmltok_impl.c"
        var $252=HEAP[$ptr_addr]; //@line 751 "xmltok_impl.c"
        HEAP[$251]=$252; //@line 751 "xmltok_impl.c"
        HEAP[$0]=0; //@line 752 "xmltok_impl.c"
        __label__ = 83; break; //@line 752 "xmltok_impl.c"
      case 71: // $bb70
        var $253=HEAP[$enc_addr]; //@line 754 "xmltok_impl.c"
        var $254=HEAP[$ptr_addr]; //@line 754 "xmltok_impl.c"
        var $255=HEAP[$end_addr]; //@line 754 "xmltok_impl.c"
        var $256=HEAP[$nextTokPtr_addr]; //@line 754 "xmltok_impl.c"
        var $257=_normal_scanAtts($253, $254, $255, $256); //@line 754 "xmltok_impl.c"
        HEAP[$0]=$257; //@line 754 "xmltok_impl.c"
        __label__ = 83; break; //@line 754 "xmltok_impl.c"
      case 72: // $bb71
        var $258=HEAP[$ptr_addr]; //@line 740 "xmltok_impl.c"
        var $259=HEAP[$end_addr]; //@line 740 "xmltok_impl.c"
        var $260=($258)!=($259); //@line 740 "xmltok_impl.c"
        if ($260) { __label__ = 49; break; } else { __label__ = 73; break; } //@line 740 "xmltok_impl.c"
      case 73: // $bb72
        HEAP[$0]=-1; //@line 756 "xmltok_impl.c"
        __label__ = 83; break; //@line 756 "xmltok_impl.c"
      case 74: // $gt
        var $261=HEAP[$ptr_addr]; //@line 760 "xmltok_impl.c"
        var $262=(($261+1)&4294967295); //@line 760 "xmltok_impl.c"
        var $263=HEAP[$nextTokPtr_addr]; //@line 760 "xmltok_impl.c"
        HEAP[$263]=$262; //@line 760 "xmltok_impl.c"
        HEAP[$0]=2; //@line 761 "xmltok_impl.c"
        __label__ = 83; break; //@line 761 "xmltok_impl.c"
      case 75: // $sol
        var $264=HEAP[$ptr_addr]; //@line 764 "xmltok_impl.c"
        var $265=(($264+1)&4294967295); //@line 764 "xmltok_impl.c"
        HEAP[$ptr_addr]=$265; //@line 764 "xmltok_impl.c"
        var $266=HEAP[$ptr_addr]; //@line 765 "xmltok_impl.c"
        var $267=HEAP[$end_addr]; //@line 765 "xmltok_impl.c"
        var $268=($266)==($267); //@line 765 "xmltok_impl.c"
        if ($268) { __label__ = 76; break; } else { __label__ = 77; break; } //@line 765 "xmltok_impl.c"
      case 76: // $bb73
        HEAP[$0]=-1; //@line 766 "xmltok_impl.c"
        __label__ = 83; break; //@line 766 "xmltok_impl.c"
      case 77: // $bb74
        var $269=HEAP[$ptr_addr]; //@line 767 "xmltok_impl.c"
        var $270=HEAP[$269]; //@line 767 "xmltok_impl.c"
        var $271=reSign(($270), 8, 0)!=62; //@line 767 "xmltok_impl.c"
        if ($271) { __label__ = 78; break; } else { __label__ = 79; break; } //@line 767 "xmltok_impl.c"
      case 78: // $bb75
        var $272=HEAP[$nextTokPtr_addr]; //@line 768 "xmltok_impl.c"
        var $273=HEAP[$ptr_addr]; //@line 768 "xmltok_impl.c"
        HEAP[$272]=$273; //@line 768 "xmltok_impl.c"
        HEAP[$0]=0; //@line 769 "xmltok_impl.c"
        __label__ = 83; break; //@line 769 "xmltok_impl.c"
      case 79: // $bb76
        var $274=HEAP[$ptr_addr]; //@line 771 "xmltok_impl.c"
        var $275=(($274+1)&4294967295); //@line 771 "xmltok_impl.c"
        var $276=HEAP[$nextTokPtr_addr]; //@line 771 "xmltok_impl.c"
        HEAP[$276]=$275; //@line 771 "xmltok_impl.c"
        HEAP[$0]=4; //@line 772 "xmltok_impl.c"
        __label__ = 83; break; //@line 772 "xmltok_impl.c"
      case 80: // $bb77
        var $277=HEAP[$nextTokPtr_addr]; //@line 774 "xmltok_impl.c"
        var $278=HEAP[$ptr_addr]; //@line 774 "xmltok_impl.c"
        HEAP[$277]=$278; //@line 774 "xmltok_impl.c"
        HEAP[$0]=0; //@line 775 "xmltok_impl.c"
        __label__ = 83; break; //@line 775 "xmltok_impl.c"
      case 81: // $bb78
        var $279=HEAP[$ptr_addr]; //@line 716 "xmltok_impl.c"
        var $280=HEAP[$end_addr]; //@line 716 "xmltok_impl.c"
        var $281=($279)!=($280); //@line 716 "xmltok_impl.c"
        if ($281) { __label__ = 30; break; } else { __label__ = 82; break; } //@line 716 "xmltok_impl.c"
      case 82: // $bb79
        HEAP[$0]=-1; //@line 778 "xmltok_impl.c"
        __label__ = 83; break; //@line 778 "xmltok_impl.c"
      case 83: // $bb80
        var $282=HEAP[$0]; //@line 689 "xmltok_impl.c"
        HEAP[$retval]=$282; //@line 689 "xmltok_impl.c"
        __label__ = 84; break; //@line 689 "xmltok_impl.c"
      case 84: // $return
        var $retval81=HEAP[$retval]; //@line 689 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval81; //@line 689 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_contentTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 785 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 785 "xmltok_impl.c"
        var $3=($1)==($2); //@line 785 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 785 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-4; //@line 786 "xmltok_impl.c"
        __label__ = 61; break; //@line 786 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$enc_addr]; //@line 796 "xmltok_impl.c"
        var $5=$4; //@line 796 "xmltok_impl.c"
        var $6=HEAP[$ptr_addr]; //@line 796 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 796 "xmltok_impl.c"
        var $8=unSign(($7), 8, 0); //@line 796 "xmltok_impl.c"
        var $9=(($5+72)&4294967295); //@line 796 "xmltok_impl.c"
        var $10=(($9+$8)&4294967295); //@line 796 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 796 "xmltok_impl.c"
        var $12=unSign(($11), 8, 0); //@line 796 "xmltok_impl.c"
        if ($12 == 0) {
          __label__ = 34; break;
        }
        else if ($12 == 1) {
          __label__ = 34; break;
        }
        else if ($12 == 2) {
          __label__ = 3; break;
        }
        else if ($12 == 3) {
          __label__ = 4; break;
        }
        else if ($12 == 4) {
          __label__ = 11; break;
        }
        else if ($12 == 5) {
          __label__ = 19; break;
        }
        else if ($12 == 6) {
          __label__ = 24; break;
        }
        else if ($12 == 7) {
          __label__ = 29; break;
        }
        else if ($12 == 8) {
          __label__ = 34; break;
        }
        else if ($12 == 9) {
          __label__ = 5; break;
        }
        else if ($12 == 10) {
          __label__ = 10; break;
        }
        else {
        __label__ = 35; break;
        }
        
      case 3: // $bb2
        var $13=HEAP[$ptr_addr]; //@line 798 "xmltok_impl.c"
        var $14=(($13+1)&4294967295); //@line 798 "xmltok_impl.c"
        var $15=HEAP[$enc_addr]; //@line 798 "xmltok_impl.c"
        var $16=HEAP[$end_addr]; //@line 798 "xmltok_impl.c"
        var $17=HEAP[$nextTokPtr_addr]; //@line 798 "xmltok_impl.c"
        var $18=_normal_scanLt($15, $14, $16, $17); //@line 798 "xmltok_impl.c"
        HEAP[$0]=$18; //@line 798 "xmltok_impl.c"
        __label__ = 61; break; //@line 798 "xmltok_impl.c"
      case 4: // $bb3
        var $19=HEAP[$ptr_addr]; //@line 800 "xmltok_impl.c"
        var $20=(($19+1)&4294967295); //@line 800 "xmltok_impl.c"
        var $21=HEAP[$enc_addr]; //@line 800 "xmltok_impl.c"
        var $22=HEAP[$end_addr]; //@line 800 "xmltok_impl.c"
        var $23=HEAP[$nextTokPtr_addr]; //@line 800 "xmltok_impl.c"
        var $24=_normal_scanRef($21, $20, $22, $23); //@line 800 "xmltok_impl.c"
        HEAP[$0]=$24; //@line 800 "xmltok_impl.c"
        __label__ = 61; break; //@line 800 "xmltok_impl.c"
      case 5: // $bb4
        var $25=HEAP[$ptr_addr]; //@line 802 "xmltok_impl.c"
        var $26=(($25+1)&4294967295); //@line 802 "xmltok_impl.c"
        HEAP[$ptr_addr]=$26; //@line 802 "xmltok_impl.c"
        var $27=HEAP[$ptr_addr]; //@line 803 "xmltok_impl.c"
        var $28=HEAP[$end_addr]; //@line 803 "xmltok_impl.c"
        var $29=($27)==($28); //@line 803 "xmltok_impl.c"
        if ($29) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 803 "xmltok_impl.c"
      case 6: // $bb5
        HEAP[$0]=-3; //@line 804 "xmltok_impl.c"
        __label__ = 61; break; //@line 804 "xmltok_impl.c"
      case 7: // $bb6
        var $30=HEAP[$enc_addr]; //@line 805 "xmltok_impl.c"
        var $31=$30; //@line 805 "xmltok_impl.c"
        var $32=HEAP[$ptr_addr]; //@line 805 "xmltok_impl.c"
        var $33=HEAP[$32]; //@line 805 "xmltok_impl.c"
        var $34=unSign(($33), 8, 0); //@line 805 "xmltok_impl.c"
        var $35=(($31+72)&4294967295); //@line 805 "xmltok_impl.c"
        var $36=(($35+$34)&4294967295); //@line 805 "xmltok_impl.c"
        var $37=HEAP[$36]; //@line 805 "xmltok_impl.c"
        var $38=reSign(($37), 8, 0)==10; //@line 805 "xmltok_impl.c"
        if ($38) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 805 "xmltok_impl.c"
      case 8: // $bb7
        var $39=HEAP[$ptr_addr]; //@line 806 "xmltok_impl.c"
        var $40=(($39+1)&4294967295); //@line 806 "xmltok_impl.c"
        HEAP[$ptr_addr]=$40; //@line 806 "xmltok_impl.c"
        __label__ = 9; break; //@line 806 "xmltok_impl.c"
      case 9: // $bb8
        var $41=HEAP[$nextTokPtr_addr]; //@line 807 "xmltok_impl.c"
        var $42=HEAP[$ptr_addr]; //@line 807 "xmltok_impl.c"
        HEAP[$41]=$42; //@line 807 "xmltok_impl.c"
        HEAP[$0]=7; //@line 808 "xmltok_impl.c"
        __label__ = 61; break; //@line 808 "xmltok_impl.c"
      case 10: // $bb9
        var $43=HEAP[$ptr_addr]; //@line 810 "xmltok_impl.c"
        var $44=(($43+1)&4294967295); //@line 810 "xmltok_impl.c"
        var $45=HEAP[$nextTokPtr_addr]; //@line 810 "xmltok_impl.c"
        HEAP[$45]=$44; //@line 810 "xmltok_impl.c"
        HEAP[$0]=7; //@line 811 "xmltok_impl.c"
        __label__ = 61; break; //@line 811 "xmltok_impl.c"
      case 11: // $bb10
        var $46=HEAP[$ptr_addr]; //@line 813 "xmltok_impl.c"
        var $47=(($46+1)&4294967295); //@line 813 "xmltok_impl.c"
        HEAP[$ptr_addr]=$47; //@line 813 "xmltok_impl.c"
        var $48=HEAP[$ptr_addr]; //@line 814 "xmltok_impl.c"
        var $49=HEAP[$end_addr]; //@line 814 "xmltok_impl.c"
        var $50=($48)==($49); //@line 814 "xmltok_impl.c"
        if ($50) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 814 "xmltok_impl.c"
      case 12: // $bb11
        HEAP[$0]=-5; //@line 815 "xmltok_impl.c"
        __label__ = 61; break; //@line 815 "xmltok_impl.c"
      case 13: // $bb12
        var $51=HEAP[$ptr_addr]; //@line 816 "xmltok_impl.c"
        var $52=HEAP[$51]; //@line 816 "xmltok_impl.c"
        var $53=reSign(($52), 8, 0)!=93; //@line 816 "xmltok_impl.c"
        if ($53) { __label__ = 36; break; } else { __label__ = 14; break; } //@line 816 "xmltok_impl.c"
      case 14: // $bb13
        var $54=HEAP[$ptr_addr]; //@line 818 "xmltok_impl.c"
        var $55=(($54+1)&4294967295); //@line 818 "xmltok_impl.c"
        HEAP[$ptr_addr]=$55; //@line 818 "xmltok_impl.c"
        var $56=HEAP[$ptr_addr]; //@line 819 "xmltok_impl.c"
        var $57=HEAP[$end_addr]; //@line 819 "xmltok_impl.c"
        var $58=($56)==($57); //@line 819 "xmltok_impl.c"
        if ($58) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 819 "xmltok_impl.c"
      case 15: // $bb14
        HEAP[$0]=-5; //@line 820 "xmltok_impl.c"
        __label__ = 61; break; //@line 820 "xmltok_impl.c"
      case 16: // $bb15
        var $59=HEAP[$ptr_addr]; //@line 821 "xmltok_impl.c"
        var $60=HEAP[$59]; //@line 821 "xmltok_impl.c"
        var $61=reSign(($60), 8, 0)!=62; //@line 821 "xmltok_impl.c"
        if ($61) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 821 "xmltok_impl.c"
      case 17: // $bb16
        var $62=HEAP[$ptr_addr]; //@line 822 "xmltok_impl.c"
        var $63=(($62+-1)&4294967295); //@line 822 "xmltok_impl.c"
        HEAP[$ptr_addr]=$63; //@line 822 "xmltok_impl.c"
        __label__ = 36; break; //@line 822 "xmltok_impl.c"
      case 18: // $bb17
        var $64=HEAP[$nextTokPtr_addr]; //@line 825 "xmltok_impl.c"
        var $65=HEAP[$ptr_addr]; //@line 825 "xmltok_impl.c"
        HEAP[$64]=$65; //@line 825 "xmltok_impl.c"
        HEAP[$0]=0; //@line 826 "xmltok_impl.c"
        __label__ = 61; break; //@line 826 "xmltok_impl.c"
      case 19: // $bb18
        var $66=HEAP[$end_addr]; //@line 827 "xmltok_impl.c"
        var $67=($66); //@line 827 "xmltok_impl.c"
        var $68=HEAP[$ptr_addr]; //@line 827 "xmltok_impl.c"
        var $69=($68); //@line 827 "xmltok_impl.c"
        var $70=((($67) - ($69))&4294967295); //@line 827 "xmltok_impl.c"
        var $71=((($70))|0) <= 1; //@line 827 "xmltok_impl.c"
        if ($71) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 827 "xmltok_impl.c"
      case 20: // $bb19
        HEAP[$0]=-2; //@line 827 "xmltok_impl.c"
        __label__ = 61; break; //@line 827 "xmltok_impl.c"
      case 21: // $bb20
        var $72=HEAP[$enc_addr]; //@line 827 "xmltok_impl.c"
        var $73=$72; //@line 827 "xmltok_impl.c"
        var $74=(($73+352)&4294967295); //@line 827 "xmltok_impl.c"
        var $75=HEAP[$74]; //@line 827 "xmltok_impl.c"
        var $76=HEAP[$enc_addr]; //@line 827 "xmltok_impl.c"
        var $77=HEAP[$ptr_addr]; //@line 827 "xmltok_impl.c"
        var $78=FUNCTION_TABLE[$75]($76, $77); //@line 827 "xmltok_impl.c"
        var $79=((($78))|0)!=0; //@line 827 "xmltok_impl.c"
        if ($79) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 827 "xmltok_impl.c"
      case 22: // $bb21
        var $80=HEAP[$nextTokPtr_addr]; //@line 827 "xmltok_impl.c"
        var $81=HEAP[$ptr_addr]; //@line 827 "xmltok_impl.c"
        HEAP[$80]=$81; //@line 827 "xmltok_impl.c"
        HEAP[$0]=0; //@line 827 "xmltok_impl.c"
        __label__ = 61; break; //@line 827 "xmltok_impl.c"
      case 23: // $bb22
        var $82=HEAP[$ptr_addr]; //@line 827 "xmltok_impl.c"
        var $83=(($82+2)&4294967295); //@line 827 "xmltok_impl.c"
        HEAP[$ptr_addr]=$83; //@line 827 "xmltok_impl.c"
        __label__ = 36; break; //@line 827 "xmltok_impl.c"
      case 24: // $bb23
        var $84=HEAP[$end_addr]; //@line 827 "xmltok_impl.c"
        var $85=($84); //@line 827 "xmltok_impl.c"
        var $86=HEAP[$ptr_addr]; //@line 827 "xmltok_impl.c"
        var $87=($86); //@line 827 "xmltok_impl.c"
        var $88=((($85) - ($87))&4294967295); //@line 827 "xmltok_impl.c"
        var $89=((($88))|0) <= 2; //@line 827 "xmltok_impl.c"
        if ($89) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 827 "xmltok_impl.c"
      case 25: // $bb24
        HEAP[$0]=-2; //@line 827 "xmltok_impl.c"
        __label__ = 61; break; //@line 827 "xmltok_impl.c"
      case 26: // $bb25
        var $90=HEAP[$enc_addr]; //@line 827 "xmltok_impl.c"
        var $91=$90; //@line 827 "xmltok_impl.c"
        var $92=(($91+356)&4294967295); //@line 827 "xmltok_impl.c"
        var $93=HEAP[$92]; //@line 827 "xmltok_impl.c"
        var $94=HEAP[$enc_addr]; //@line 827 "xmltok_impl.c"
        var $95=HEAP[$ptr_addr]; //@line 827 "xmltok_impl.c"
        var $96=FUNCTION_TABLE[$93]($94, $95); //@line 827 "xmltok_impl.c"
        var $97=((($96))|0)!=0; //@line 827 "xmltok_impl.c"
        if ($97) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 827 "xmltok_impl.c"
      case 27: // $bb26
        var $98=HEAP[$nextTokPtr_addr]; //@line 827 "xmltok_impl.c"
        var $99=HEAP[$ptr_addr]; //@line 827 "xmltok_impl.c"
        HEAP[$98]=$99; //@line 827 "xmltok_impl.c"
        HEAP[$0]=0; //@line 827 "xmltok_impl.c"
        __label__ = 61; break; //@line 827 "xmltok_impl.c"
      case 28: // $bb27
        var $100=HEAP[$ptr_addr]; //@line 827 "xmltok_impl.c"
        var $101=(($100+3)&4294967295); //@line 827 "xmltok_impl.c"
        HEAP[$ptr_addr]=$101; //@line 827 "xmltok_impl.c"
        __label__ = 36; break; //@line 827 "xmltok_impl.c"
      case 29: // $bb28
        var $102=HEAP[$end_addr]; //@line 827 "xmltok_impl.c"
        var $103=($102); //@line 827 "xmltok_impl.c"
        var $104=HEAP[$ptr_addr]; //@line 827 "xmltok_impl.c"
        var $105=($104); //@line 827 "xmltok_impl.c"
        var $106=((($103) - ($105))&4294967295); //@line 827 "xmltok_impl.c"
        var $107=((($106))|0) <= 3; //@line 827 "xmltok_impl.c"
        if ($107) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 827 "xmltok_impl.c"
      case 30: // $bb29
        HEAP[$0]=-2; //@line 827 "xmltok_impl.c"
        __label__ = 61; break; //@line 827 "xmltok_impl.c"
      case 31: // $bb30
        var $108=HEAP[$enc_addr]; //@line 827 "xmltok_impl.c"
        var $109=$108; //@line 827 "xmltok_impl.c"
        var $110=(($109+360)&4294967295); //@line 827 "xmltok_impl.c"
        var $111=HEAP[$110]; //@line 827 "xmltok_impl.c"
        var $112=HEAP[$enc_addr]; //@line 827 "xmltok_impl.c"
        var $113=HEAP[$ptr_addr]; //@line 827 "xmltok_impl.c"
        var $114=FUNCTION_TABLE[$111]($112, $113); //@line 827 "xmltok_impl.c"
        var $115=((($114))|0)!=0; //@line 827 "xmltok_impl.c"
        if ($115) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 827 "xmltok_impl.c"
      case 32: // $bb31
        var $116=HEAP[$nextTokPtr_addr]; //@line 827 "xmltok_impl.c"
        var $117=HEAP[$ptr_addr]; //@line 827 "xmltok_impl.c"
        HEAP[$116]=$117; //@line 827 "xmltok_impl.c"
        HEAP[$0]=0; //@line 827 "xmltok_impl.c"
        __label__ = 61; break; //@line 827 "xmltok_impl.c"
      case 33: // $bb32
        var $118=HEAP[$ptr_addr]; //@line 827 "xmltok_impl.c"
        var $119=(($118+4)&4294967295); //@line 827 "xmltok_impl.c"
        HEAP[$ptr_addr]=$119; //@line 827 "xmltok_impl.c"
        __label__ = 36; break; //@line 827 "xmltok_impl.c"
      case 34: // $bb33
        var $120=HEAP[$nextTokPtr_addr]; //@line 827 "xmltok_impl.c"
        var $121=HEAP[$ptr_addr]; //@line 827 "xmltok_impl.c"
        HEAP[$120]=$121; //@line 827 "xmltok_impl.c"
        HEAP[$0]=0; //@line 827 "xmltok_impl.c"
        __label__ = 61; break; //@line 827 "xmltok_impl.c"
      case 35: // $bb34
        var $122=HEAP[$ptr_addr]; //@line 829 "xmltok_impl.c"
        var $123=(($122+1)&4294967295); //@line 829 "xmltok_impl.c"
        HEAP[$ptr_addr]=$123; //@line 829 "xmltok_impl.c"
        __label__ = 36; break; //@line 829 "xmltok_impl.c"
      case 36: // $bb35
        __label__ = 59; break; //@line 829 "xmltok_impl.c"
      case 37: // $bb36
        var $124=HEAP[$enc_addr]; //@line 833 "xmltok_impl.c"
        var $125=$124; //@line 833 "xmltok_impl.c"
        var $126=HEAP[$ptr_addr]; //@line 833 "xmltok_impl.c"
        var $127=HEAP[$126]; //@line 833 "xmltok_impl.c"
        var $128=unSign(($127), 8, 0); //@line 833 "xmltok_impl.c"
        var $129=(($125+72)&4294967295); //@line 833 "xmltok_impl.c"
        var $130=(($129+$128)&4294967295); //@line 833 "xmltok_impl.c"
        var $131=HEAP[$130]; //@line 833 "xmltok_impl.c"
        var $132=unSign(($131), 8, 0); //@line 833 "xmltok_impl.c"
        if ($132 == 0) {
          __label__ = 57; break;
        }
        else if ($132 == 1) {
          __label__ = 57; break;
        }
        else if ($132 == 2) {
          __label__ = 57; break;
        }
        else if ($132 == 3) {
          __label__ = 57; break;
        }
        else if ($132 == 4) {
          __label__ = 50; break;
        }
        else if ($132 == 5) {
          __label__ = 38; break;
        }
        else if ($132 == 6) {
          __label__ = 42; break;
        }
        else if ($132 == 7) {
          __label__ = 46; break;
        }
        else if ($132 == 8) {
          __label__ = 57; break;
        }
        else if ($132 == 9) {
          __label__ = 57; break;
        }
        else if ($132 == 10) {
          __label__ = 57; break;
        }
        else {
        __label__ = 58; break;
        }
        
      case 38: // $bb37
        var $133=HEAP[$end_addr]; //@line 842 "xmltok_impl.c"
        var $134=($133); //@line 842 "xmltok_impl.c"
        var $135=HEAP[$ptr_addr]; //@line 842 "xmltok_impl.c"
        var $136=($135); //@line 842 "xmltok_impl.c"
        var $137=((($134) - ($136))&4294967295); //@line 842 "xmltok_impl.c"
        var $138=((($137))|0) <= 1; //@line 842 "xmltok_impl.c"
        if ($138) { __label__ = 40; break; } else { __label__ = 39; break; } //@line 842 "xmltok_impl.c"
      case 39: // $bb38
        var $139=HEAP[$enc_addr]; //@line 842 "xmltok_impl.c"
        var $140=$139; //@line 842 "xmltok_impl.c"
        var $141=(($140+352)&4294967295); //@line 842 "xmltok_impl.c"
        var $142=HEAP[$141]; //@line 842 "xmltok_impl.c"
        var $143=HEAP[$enc_addr]; //@line 842 "xmltok_impl.c"
        var $144=HEAP[$ptr_addr]; //@line 842 "xmltok_impl.c"
        var $145=FUNCTION_TABLE[$142]($143, $144); //@line 842 "xmltok_impl.c"
        var $146=((($145))|0)!=0; //@line 842 "xmltok_impl.c"
        if ($146) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 842 "xmltok_impl.c"
      case 40: // $bb39
        var $147=HEAP[$nextTokPtr_addr]; //@line 842 "xmltok_impl.c"
        var $148=HEAP[$ptr_addr]; //@line 842 "xmltok_impl.c"
        HEAP[$147]=$148; //@line 842 "xmltok_impl.c"
        HEAP[$0]=6; //@line 842 "xmltok_impl.c"
        __label__ = 61; break; //@line 842 "xmltok_impl.c"
      case 41: // $bb40
        var $149=HEAP[$ptr_addr]; //@line 842 "xmltok_impl.c"
        var $150=(($149+2)&4294967295); //@line 842 "xmltok_impl.c"
        HEAP[$ptr_addr]=$150; //@line 842 "xmltok_impl.c"
        __label__ = 59; break; //@line 842 "xmltok_impl.c"
      case 42: // $bb41
        var $151=HEAP[$end_addr]; //@line 842 "xmltok_impl.c"
        var $152=($151); //@line 842 "xmltok_impl.c"
        var $153=HEAP[$ptr_addr]; //@line 842 "xmltok_impl.c"
        var $154=($153); //@line 842 "xmltok_impl.c"
        var $155=((($152) - ($154))&4294967295); //@line 842 "xmltok_impl.c"
        var $156=((($155))|0) <= 2; //@line 842 "xmltok_impl.c"
        if ($156) { __label__ = 44; break; } else { __label__ = 43; break; } //@line 842 "xmltok_impl.c"
      case 43: // $bb42
        var $157=HEAP[$enc_addr]; //@line 842 "xmltok_impl.c"
        var $158=$157; //@line 842 "xmltok_impl.c"
        var $159=(($158+356)&4294967295); //@line 842 "xmltok_impl.c"
        var $160=HEAP[$159]; //@line 842 "xmltok_impl.c"
        var $161=HEAP[$enc_addr]; //@line 842 "xmltok_impl.c"
        var $162=HEAP[$ptr_addr]; //@line 842 "xmltok_impl.c"
        var $163=FUNCTION_TABLE[$160]($161, $162); //@line 842 "xmltok_impl.c"
        var $164=((($163))|0)!=0; //@line 842 "xmltok_impl.c"
        if ($164) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 842 "xmltok_impl.c"
      case 44: // $bb43
        var $165=HEAP[$nextTokPtr_addr]; //@line 842 "xmltok_impl.c"
        var $166=HEAP[$ptr_addr]; //@line 842 "xmltok_impl.c"
        HEAP[$165]=$166; //@line 842 "xmltok_impl.c"
        HEAP[$0]=6; //@line 842 "xmltok_impl.c"
        __label__ = 61; break; //@line 842 "xmltok_impl.c"
      case 45: // $bb44
        var $167=HEAP[$ptr_addr]; //@line 842 "xmltok_impl.c"
        var $168=(($167+3)&4294967295); //@line 842 "xmltok_impl.c"
        HEAP[$ptr_addr]=$168; //@line 842 "xmltok_impl.c"
        __label__ = 59; break; //@line 842 "xmltok_impl.c"
      case 46: // $bb45
        var $169=HEAP[$end_addr]; //@line 842 "xmltok_impl.c"
        var $170=($169); //@line 842 "xmltok_impl.c"
        var $171=HEAP[$ptr_addr]; //@line 842 "xmltok_impl.c"
        var $172=($171); //@line 842 "xmltok_impl.c"
        var $173=((($170) - ($172))&4294967295); //@line 842 "xmltok_impl.c"
        var $174=((($173))|0) <= 3; //@line 842 "xmltok_impl.c"
        if ($174) { __label__ = 48; break; } else { __label__ = 47; break; } //@line 842 "xmltok_impl.c"
      case 47: // $bb46
        var $175=HEAP[$enc_addr]; //@line 842 "xmltok_impl.c"
        var $176=$175; //@line 842 "xmltok_impl.c"
        var $177=(($176+360)&4294967295); //@line 842 "xmltok_impl.c"
        var $178=HEAP[$177]; //@line 842 "xmltok_impl.c"
        var $179=HEAP[$enc_addr]; //@line 842 "xmltok_impl.c"
        var $180=HEAP[$ptr_addr]; //@line 842 "xmltok_impl.c"
        var $181=FUNCTION_TABLE[$178]($179, $180); //@line 842 "xmltok_impl.c"
        var $182=((($181))|0)!=0; //@line 842 "xmltok_impl.c"
        if ($182) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 842 "xmltok_impl.c"
      case 48: // $bb47
        var $183=HEAP[$nextTokPtr_addr]; //@line 842 "xmltok_impl.c"
        var $184=HEAP[$ptr_addr]; //@line 842 "xmltok_impl.c"
        HEAP[$183]=$184; //@line 842 "xmltok_impl.c"
        HEAP[$0]=6; //@line 842 "xmltok_impl.c"
        __label__ = 61; break; //@line 842 "xmltok_impl.c"
      case 49: // $bb48
        var $185=HEAP[$ptr_addr]; //@line 842 "xmltok_impl.c"
        var $186=(($185+4)&4294967295); //@line 842 "xmltok_impl.c"
        HEAP[$ptr_addr]=$186; //@line 842 "xmltok_impl.c"
        __label__ = 59; break; //@line 842 "xmltok_impl.c"
      case 50: // $bb49
        var $187=HEAP[$ptr_addr]; //@line 845 "xmltok_impl.c"
        var $188=(($187+1)&4294967295); //@line 845 "xmltok_impl.c"
        var $189=HEAP[$end_addr]; //@line 845 "xmltok_impl.c"
        var $190=($188)!=($189); //@line 845 "xmltok_impl.c"
        if ($190) { __label__ = 51; break; } else { __label__ = 57; break; } //@line 845 "xmltok_impl.c"
      case 51: // $bb50
        var $191=HEAP[$ptr_addr]; //@line 846 "xmltok_impl.c"
        var $192=(($191+1)&4294967295); //@line 846 "xmltok_impl.c"
        var $193=HEAP[$192]; //@line 846 "xmltok_impl.c"
        var $194=reSign(($193), 8, 0)!=93; //@line 846 "xmltok_impl.c"
        if ($194) { __label__ = 52; break; } else { __label__ = 53; break; } //@line 846 "xmltok_impl.c"
      case 52: // $bb51
        var $195=HEAP[$ptr_addr]; //@line 847 "xmltok_impl.c"
        var $196=(($195+1)&4294967295); //@line 847 "xmltok_impl.c"
        HEAP[$ptr_addr]=$196; //@line 847 "xmltok_impl.c"
        __label__ = 59; break; //@line 847 "xmltok_impl.c"
      case 53: // $bb52
        var $197=HEAP[$ptr_addr]; //@line 850 "xmltok_impl.c"
        var $198=(($197+2)&4294967295); //@line 850 "xmltok_impl.c"
        var $199=HEAP[$end_addr]; //@line 850 "xmltok_impl.c"
        var $200=($198)!=($199); //@line 850 "xmltok_impl.c"
        if ($200) { __label__ = 54; break; } else { __label__ = 57; break; } //@line 850 "xmltok_impl.c"
      case 54: // $bb53
        var $201=HEAP[$ptr_addr]; //@line 851 "xmltok_impl.c"
        var $202=(($201+2)&4294967295); //@line 851 "xmltok_impl.c"
        var $203=HEAP[$202]; //@line 851 "xmltok_impl.c"
        var $204=reSign(($203), 8, 0)!=62; //@line 851 "xmltok_impl.c"
        if ($204) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 851 "xmltok_impl.c"
      case 55: // $bb54
        var $205=HEAP[$ptr_addr]; //@line 852 "xmltok_impl.c"
        var $206=(($205+1)&4294967295); //@line 852 "xmltok_impl.c"
        HEAP[$ptr_addr]=$206; //@line 852 "xmltok_impl.c"
        __label__ = 59; break; //@line 852 "xmltok_impl.c"
      case 56: // $bb55
        var $207=HEAP[$ptr_addr]; //@line 855 "xmltok_impl.c"
        var $208=(($207+2)&4294967295); //@line 855 "xmltok_impl.c"
        var $209=HEAP[$nextTokPtr_addr]; //@line 855 "xmltok_impl.c"
        HEAP[$209]=$208; //@line 855 "xmltok_impl.c"
        HEAP[$0]=0; //@line 856 "xmltok_impl.c"
        __label__ = 61; break; //@line 856 "xmltok_impl.c"
      case 57: // $bb56
        var $210=HEAP[$nextTokPtr_addr]; //@line 867 "xmltok_impl.c"
        var $211=HEAP[$ptr_addr]; //@line 867 "xmltok_impl.c"
        HEAP[$210]=$211; //@line 867 "xmltok_impl.c"
        HEAP[$0]=6; //@line 868 "xmltok_impl.c"
        __label__ = 61; break; //@line 868 "xmltok_impl.c"
      case 58: // $bb57
        var $212=HEAP[$ptr_addr]; //@line 870 "xmltok_impl.c"
        var $213=(($212+1)&4294967295); //@line 870 "xmltok_impl.c"
        HEAP[$ptr_addr]=$213; //@line 870 "xmltok_impl.c"
        __label__ = 59; break; //@line 870 "xmltok_impl.c"
      case 59: // $bb58
        var $214=HEAP[$ptr_addr]; //@line 832 "xmltok_impl.c"
        var $215=HEAP[$end_addr]; //@line 832 "xmltok_impl.c"
        var $216=($214)!=($215); //@line 832 "xmltok_impl.c"
        if ($216) { __label__ = 37; break; } else { __label__ = 60; break; } //@line 832 "xmltok_impl.c"
      case 60: // $bb59
        var $217=HEAP[$nextTokPtr_addr]; //@line 874 "xmltok_impl.c"
        var $218=HEAP[$ptr_addr]; //@line 874 "xmltok_impl.c"
        HEAP[$217]=$218; //@line 874 "xmltok_impl.c"
        HEAP[$0]=6; //@line 875 "xmltok_impl.c"
        __label__ = 61; break; //@line 875 "xmltok_impl.c"
      case 61: // $bb60
        var $219=HEAP[$0]; //@line 786 "xmltok_impl.c"
        HEAP[$retval]=$219; //@line 786 "xmltok_impl.c"
        __label__ = 62; break; //@line 786 "xmltok_impl.c"
      case 62: // $return
        var $retval61=HEAP[$retval]; //@line 786 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval61; //@line 786 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_scanPercent($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 884 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 884 "xmltok_impl.c"
        var $3=($1)==($2); //@line 884 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 884 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-22; //@line 885 "xmltok_impl.c"
        __label__ = 45; break; //@line 885 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$enc_addr]; //@line 886 "xmltok_impl.c"
        var $5=$4; //@line 886 "xmltok_impl.c"
        var $6=HEAP[$ptr_addr]; //@line 886 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 886 "xmltok_impl.c"
        var $8=unSign(($7), 8, 0); //@line 886 "xmltok_impl.c"
        var $9=(($5+72)&4294967295); //@line 886 "xmltok_impl.c"
        var $10=(($9+$8)&4294967295); //@line 886 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 886 "xmltok_impl.c"
        var $12=unSign(($11), 8, 0); //@line 886 "xmltok_impl.c"
        if ($12 == 5) {
          __label__ = 5; break;
        }
        else if ($12 == 6) {
          __label__ = 10; break;
        }
        else if ($12 == 7) {
          __label__ = 15; break;
        }
        else if ($12 == 9) {
          __label__ = 20; break;
        }
        else if ($12 == 10) {
          __label__ = 20; break;
        }
        else if ($12 == 21) {
          __label__ = 20; break;
        }
        else if ($12 == 22) {
          __label__ = 4; break;
        }
        else if ($12 == 24) {
          __label__ = 4; break;
        }
        else if ($12 == 29) {
          __label__ = 3; break;
        }
        else if ($12 == 30) {
          __label__ = 20; break;
        }
        else {
        __label__ = 21; break;
        }
        
      case 3: // $bb2
        var $13=HEAP[$nextTokPtr_addr]; //@line 887 "xmltok_impl.c"
        var $14=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        HEAP[$13]=$14; //@line 887 "xmltok_impl.c"
        HEAP[$0]=0; //@line 887 "xmltok_impl.c"
        __label__ = 45; break; //@line 887 "xmltok_impl.c"
      case 4: // $bb3
        var $15=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        var $16=(($15+1)&4294967295); //@line 887 "xmltok_impl.c"
        HEAP[$ptr_addr]=$16; //@line 887 "xmltok_impl.c"
        __label__ = 22; break; //@line 887 "xmltok_impl.c"
      case 5: // $bb4
        var $17=HEAP[$end_addr]; //@line 887 "xmltok_impl.c"
        var $18=($17); //@line 887 "xmltok_impl.c"
        var $19=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        var $20=($19); //@line 887 "xmltok_impl.c"
        var $21=((($18) - ($20))&4294967295); //@line 887 "xmltok_impl.c"
        var $22=((($21))|0) <= 1; //@line 887 "xmltok_impl.c"
        if ($22) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 887 "xmltok_impl.c"
      case 6: // $bb5
        HEAP[$0]=-2; //@line 887 "xmltok_impl.c"
        __label__ = 45; break; //@line 887 "xmltok_impl.c"
      case 7: // $bb6
        var $23=HEAP[$enc_addr]; //@line 887 "xmltok_impl.c"
        var $24=$23; //@line 887 "xmltok_impl.c"
        var $25=(($24+340)&4294967295); //@line 887 "xmltok_impl.c"
        var $26=HEAP[$25]; //@line 887 "xmltok_impl.c"
        var $27=HEAP[$enc_addr]; //@line 887 "xmltok_impl.c"
        var $28=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        var $29=FUNCTION_TABLE[$26]($27, $28); //@line 887 "xmltok_impl.c"
        var $30=((($29))|0)==0; //@line 887 "xmltok_impl.c"
        if ($30) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 887 "xmltok_impl.c"
      case 8: // $bb7
        var $31=HEAP[$nextTokPtr_addr]; //@line 887 "xmltok_impl.c"
        var $32=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        HEAP[$31]=$32; //@line 887 "xmltok_impl.c"
        HEAP[$0]=0; //@line 887 "xmltok_impl.c"
        __label__ = 45; break; //@line 887 "xmltok_impl.c"
      case 9: // $bb8
        var $33=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        var $34=(($33+2)&4294967295); //@line 887 "xmltok_impl.c"
        HEAP[$ptr_addr]=$34; //@line 887 "xmltok_impl.c"
        __label__ = 22; break; //@line 887 "xmltok_impl.c"
      case 10: // $bb9
        var $35=HEAP[$end_addr]; //@line 887 "xmltok_impl.c"
        var $36=($35); //@line 887 "xmltok_impl.c"
        var $37=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        var $38=($37); //@line 887 "xmltok_impl.c"
        var $39=((($36) - ($38))&4294967295); //@line 887 "xmltok_impl.c"
        var $40=((($39))|0) <= 2; //@line 887 "xmltok_impl.c"
        if ($40) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 887 "xmltok_impl.c"
      case 11: // $bb10
        HEAP[$0]=-2; //@line 887 "xmltok_impl.c"
        __label__ = 45; break; //@line 887 "xmltok_impl.c"
      case 12: // $bb11
        var $41=HEAP[$enc_addr]; //@line 887 "xmltok_impl.c"
        var $42=$41; //@line 887 "xmltok_impl.c"
        var $43=(($42+344)&4294967295); //@line 887 "xmltok_impl.c"
        var $44=HEAP[$43]; //@line 887 "xmltok_impl.c"
        var $45=HEAP[$enc_addr]; //@line 887 "xmltok_impl.c"
        var $46=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        var $47=FUNCTION_TABLE[$44]($45, $46); //@line 887 "xmltok_impl.c"
        var $48=((($47))|0)==0; //@line 887 "xmltok_impl.c"
        if ($48) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 887 "xmltok_impl.c"
      case 13: // $bb12
        var $49=HEAP[$nextTokPtr_addr]; //@line 887 "xmltok_impl.c"
        var $50=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        HEAP[$49]=$50; //@line 887 "xmltok_impl.c"
        HEAP[$0]=0; //@line 887 "xmltok_impl.c"
        __label__ = 45; break; //@line 887 "xmltok_impl.c"
      case 14: // $bb13
        var $51=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        var $52=(($51+3)&4294967295); //@line 887 "xmltok_impl.c"
        HEAP[$ptr_addr]=$52; //@line 887 "xmltok_impl.c"
        __label__ = 22; break; //@line 887 "xmltok_impl.c"
      case 15: // $bb14
        var $53=HEAP[$end_addr]; //@line 887 "xmltok_impl.c"
        var $54=($53); //@line 887 "xmltok_impl.c"
        var $55=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        var $56=($55); //@line 887 "xmltok_impl.c"
        var $57=((($54) - ($56))&4294967295); //@line 887 "xmltok_impl.c"
        var $58=((($57))|0) <= 3; //@line 887 "xmltok_impl.c"
        if ($58) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 887 "xmltok_impl.c"
      case 16: // $bb15
        HEAP[$0]=-2; //@line 887 "xmltok_impl.c"
        __label__ = 45; break; //@line 887 "xmltok_impl.c"
      case 17: // $bb16
        var $59=HEAP[$enc_addr]; //@line 887 "xmltok_impl.c"
        var $60=$59; //@line 887 "xmltok_impl.c"
        var $61=(($60+348)&4294967295); //@line 887 "xmltok_impl.c"
        var $62=HEAP[$61]; //@line 887 "xmltok_impl.c"
        var $63=HEAP[$enc_addr]; //@line 887 "xmltok_impl.c"
        var $64=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        var $65=FUNCTION_TABLE[$62]($63, $64); //@line 887 "xmltok_impl.c"
        var $66=((($65))|0)==0; //@line 887 "xmltok_impl.c"
        if ($66) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 887 "xmltok_impl.c"
      case 18: // $bb17
        var $67=HEAP[$nextTokPtr_addr]; //@line 887 "xmltok_impl.c"
        var $68=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        HEAP[$67]=$68; //@line 887 "xmltok_impl.c"
        HEAP[$0]=0; //@line 887 "xmltok_impl.c"
        __label__ = 45; break; //@line 887 "xmltok_impl.c"
      case 19: // $bb18
        var $69=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        var $70=(($69+4)&4294967295); //@line 887 "xmltok_impl.c"
        HEAP[$ptr_addr]=$70; //@line 887 "xmltok_impl.c"
        __label__ = 22; break; //@line 887 "xmltok_impl.c"
      case 20: // $bb19
        var $71=HEAP[$nextTokPtr_addr]; //@line 889 "xmltok_impl.c"
        var $72=HEAP[$ptr_addr]; //@line 889 "xmltok_impl.c"
        HEAP[$71]=$72; //@line 889 "xmltok_impl.c"
        HEAP[$0]=22; //@line 890 "xmltok_impl.c"
        __label__ = 45; break; //@line 890 "xmltok_impl.c"
      case 21: // $bb20
        var $73=HEAP[$nextTokPtr_addr]; //@line 892 "xmltok_impl.c"
        var $74=HEAP[$ptr_addr]; //@line 892 "xmltok_impl.c"
        HEAP[$73]=$74; //@line 892 "xmltok_impl.c"
        HEAP[$0]=0; //@line 893 "xmltok_impl.c"
        __label__ = 45; break; //@line 893 "xmltok_impl.c"
      case 22: // $bb21
        __label__ = 43; break; //@line 893 "xmltok_impl.c"
      case 23: // $bb22
        var $75=HEAP[$enc_addr]; //@line 896 "xmltok_impl.c"
        var $76=$75; //@line 896 "xmltok_impl.c"
        var $77=HEAP[$ptr_addr]; //@line 896 "xmltok_impl.c"
        var $78=HEAP[$77]; //@line 896 "xmltok_impl.c"
        var $79=unSign(($78), 8, 0); //@line 896 "xmltok_impl.c"
        var $80=(($76+72)&4294967295); //@line 896 "xmltok_impl.c"
        var $81=(($80+$79)&4294967295); //@line 896 "xmltok_impl.c"
        var $82=HEAP[$81]; //@line 896 "xmltok_impl.c"
        var $83=unSign(($82), 8, 0); //@line 896 "xmltok_impl.c"
        if ($83 == 5) {
          __label__ = 26; break;
        }
        else if ($83 == 6) {
          __label__ = 31; break;
        }
        else if ($83 == 7) {
          __label__ = 36; break;
        }
        else if ($83 == 18) {
          __label__ = 41; break;
        }
        else if ($83 == 22) {
          __label__ = 25; break;
        }
        else if ($83 == 24) {
          __label__ = 25; break;
        }
        else if ($83 == 25) {
          __label__ = 25; break;
        }
        else if ($83 == 26) {
          __label__ = 25; break;
        }
        else if ($83 == 27) {
          __label__ = 25; break;
        }
        else if ($83 == 29) {
          __label__ = 24; break;
        }
        else {
        __label__ = 42; break;
        }
        
      case 24: // $bb23
        var $84=HEAP[$nextTokPtr_addr]; //@line 897 "xmltok_impl.c"
        var $85=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        HEAP[$84]=$85; //@line 897 "xmltok_impl.c"
        HEAP[$0]=0; //@line 897 "xmltok_impl.c"
        __label__ = 45; break; //@line 897 "xmltok_impl.c"
      case 25: // $bb24
        var $86=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        var $87=(($86+1)&4294967295); //@line 897 "xmltok_impl.c"
        HEAP[$ptr_addr]=$87; //@line 897 "xmltok_impl.c"
        __label__ = 43; break; //@line 897 "xmltok_impl.c"
      case 26: // $bb25
        var $88=HEAP[$end_addr]; //@line 897 "xmltok_impl.c"
        var $89=($88); //@line 897 "xmltok_impl.c"
        var $90=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        var $91=($90); //@line 897 "xmltok_impl.c"
        var $92=((($89) - ($91))&4294967295); //@line 897 "xmltok_impl.c"
        var $93=((($92))|0) <= 1; //@line 897 "xmltok_impl.c"
        if ($93) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 897 "xmltok_impl.c"
      case 27: // $bb26
        HEAP[$0]=-2; //@line 897 "xmltok_impl.c"
        __label__ = 45; break; //@line 897 "xmltok_impl.c"
      case 28: // $bb27
        var $94=HEAP[$enc_addr]; //@line 897 "xmltok_impl.c"
        var $95=$94; //@line 897 "xmltok_impl.c"
        var $96=(($95+328)&4294967295); //@line 897 "xmltok_impl.c"
        var $97=HEAP[$96]; //@line 897 "xmltok_impl.c"
        var $98=HEAP[$enc_addr]; //@line 897 "xmltok_impl.c"
        var $99=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        var $100=FUNCTION_TABLE[$97]($98, $99); //@line 897 "xmltok_impl.c"
        var $101=((($100))|0)==0; //@line 897 "xmltok_impl.c"
        if ($101) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 897 "xmltok_impl.c"
      case 29: // $bb28
        var $102=HEAP[$nextTokPtr_addr]; //@line 897 "xmltok_impl.c"
        var $103=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        HEAP[$102]=$103; //@line 897 "xmltok_impl.c"
        HEAP[$0]=0; //@line 897 "xmltok_impl.c"
        __label__ = 45; break; //@line 897 "xmltok_impl.c"
      case 30: // $bb29
        var $104=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        var $105=(($104+2)&4294967295); //@line 897 "xmltok_impl.c"
        HEAP[$ptr_addr]=$105; //@line 897 "xmltok_impl.c"
        __label__ = 43; break; //@line 897 "xmltok_impl.c"
      case 31: // $bb30
        var $106=HEAP[$end_addr]; //@line 897 "xmltok_impl.c"
        var $107=($106); //@line 897 "xmltok_impl.c"
        var $108=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        var $109=($108); //@line 897 "xmltok_impl.c"
        var $110=((($107) - ($109))&4294967295); //@line 897 "xmltok_impl.c"
        var $111=((($110))|0) <= 2; //@line 897 "xmltok_impl.c"
        if ($111) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 897 "xmltok_impl.c"
      case 32: // $bb31
        HEAP[$0]=-2; //@line 897 "xmltok_impl.c"
        __label__ = 45; break; //@line 897 "xmltok_impl.c"
      case 33: // $bb32
        var $112=HEAP[$enc_addr]; //@line 897 "xmltok_impl.c"
        var $113=$112; //@line 897 "xmltok_impl.c"
        var $114=(($113+332)&4294967295); //@line 897 "xmltok_impl.c"
        var $115=HEAP[$114]; //@line 897 "xmltok_impl.c"
        var $116=HEAP[$enc_addr]; //@line 897 "xmltok_impl.c"
        var $117=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        var $118=FUNCTION_TABLE[$115]($116, $117); //@line 897 "xmltok_impl.c"
        var $119=((($118))|0)==0; //@line 897 "xmltok_impl.c"
        if ($119) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 897 "xmltok_impl.c"
      case 34: // $bb33
        var $120=HEAP[$nextTokPtr_addr]; //@line 897 "xmltok_impl.c"
        var $121=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        HEAP[$120]=$121; //@line 897 "xmltok_impl.c"
        HEAP[$0]=0; //@line 897 "xmltok_impl.c"
        __label__ = 45; break; //@line 897 "xmltok_impl.c"
      case 35: // $bb34
        var $122=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        var $123=(($122+3)&4294967295); //@line 897 "xmltok_impl.c"
        HEAP[$ptr_addr]=$123; //@line 897 "xmltok_impl.c"
        __label__ = 43; break; //@line 897 "xmltok_impl.c"
      case 36: // $bb35
        var $124=HEAP[$end_addr]; //@line 897 "xmltok_impl.c"
        var $125=($124); //@line 897 "xmltok_impl.c"
        var $126=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        var $127=($126); //@line 897 "xmltok_impl.c"
        var $128=((($125) - ($127))&4294967295); //@line 897 "xmltok_impl.c"
        var $129=((($128))|0) <= 3; //@line 897 "xmltok_impl.c"
        if ($129) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 897 "xmltok_impl.c"
      case 37: // $bb36
        HEAP[$0]=-2; //@line 897 "xmltok_impl.c"
        __label__ = 45; break; //@line 897 "xmltok_impl.c"
      case 38: // $bb37
        var $130=HEAP[$enc_addr]; //@line 897 "xmltok_impl.c"
        var $131=$130; //@line 897 "xmltok_impl.c"
        var $132=(($131+336)&4294967295); //@line 897 "xmltok_impl.c"
        var $133=HEAP[$132]; //@line 897 "xmltok_impl.c"
        var $134=HEAP[$enc_addr]; //@line 897 "xmltok_impl.c"
        var $135=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        var $136=FUNCTION_TABLE[$133]($134, $135); //@line 897 "xmltok_impl.c"
        var $137=((($136))|0)==0; //@line 897 "xmltok_impl.c"
        if ($137) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 897 "xmltok_impl.c"
      case 39: // $bb38
        var $138=HEAP[$nextTokPtr_addr]; //@line 897 "xmltok_impl.c"
        var $139=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        HEAP[$138]=$139; //@line 897 "xmltok_impl.c"
        HEAP[$0]=0; //@line 897 "xmltok_impl.c"
        __label__ = 45; break; //@line 897 "xmltok_impl.c"
      case 40: // $bb39
        var $140=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        var $141=(($140+4)&4294967295); //@line 897 "xmltok_impl.c"
        HEAP[$ptr_addr]=$141; //@line 897 "xmltok_impl.c"
        __label__ = 43; break; //@line 897 "xmltok_impl.c"
      case 41: // $bb40
        var $142=HEAP[$ptr_addr]; //@line 899 "xmltok_impl.c"
        var $143=(($142+1)&4294967295); //@line 899 "xmltok_impl.c"
        var $144=HEAP[$nextTokPtr_addr]; //@line 899 "xmltok_impl.c"
        HEAP[$144]=$143; //@line 899 "xmltok_impl.c"
        HEAP[$0]=28; //@line 900 "xmltok_impl.c"
        __label__ = 45; break; //@line 900 "xmltok_impl.c"
      case 42: // $bb41
        var $145=HEAP[$nextTokPtr_addr]; //@line 902 "xmltok_impl.c"
        var $146=HEAP[$ptr_addr]; //@line 902 "xmltok_impl.c"
        HEAP[$145]=$146; //@line 902 "xmltok_impl.c"
        HEAP[$0]=0; //@line 903 "xmltok_impl.c"
        __label__ = 45; break; //@line 903 "xmltok_impl.c"
      case 43: // $bb42
        var $147=HEAP[$ptr_addr]; //@line 895 "xmltok_impl.c"
        var $148=HEAP[$end_addr]; //@line 895 "xmltok_impl.c"
        var $149=($147)!=($148); //@line 895 "xmltok_impl.c"
        if ($149) { __label__ = 23; break; } else { __label__ = 44; break; } //@line 895 "xmltok_impl.c"
      case 44: // $bb43
        HEAP[$0]=-1; //@line 906 "xmltok_impl.c"
        __label__ = 45; break; //@line 906 "xmltok_impl.c"
      case 45: // $bb44
        var $150=HEAP[$0]; //@line 885 "xmltok_impl.c"
        HEAP[$retval]=$150; //@line 885 "xmltok_impl.c"
        __label__ = 46; break; //@line 885 "xmltok_impl.c"
      case 46: // $return
        var $retval45=HEAP[$retval]; //@line 885 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval45; //@line 885 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_scanPoundName($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 913 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 913 "xmltok_impl.c"
        var $3=($1)==($2); //@line 913 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 913 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 914 "xmltok_impl.c"
        __label__ = 44; break; //@line 914 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$enc_addr]; //@line 915 "xmltok_impl.c"
        var $5=$4; //@line 915 "xmltok_impl.c"
        var $6=HEAP[$ptr_addr]; //@line 915 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 915 "xmltok_impl.c"
        var $8=unSign(($7), 8, 0); //@line 915 "xmltok_impl.c"
        var $9=(($5+72)&4294967295); //@line 915 "xmltok_impl.c"
        var $10=(($9+$8)&4294967295); //@line 915 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 915 "xmltok_impl.c"
        var $12=unSign(($11), 8, 0); //@line 915 "xmltok_impl.c"
        if ($12 == 5) {
          __label__ = 5; break;
        }
        else if ($12 == 6) {
          __label__ = 10; break;
        }
        else if ($12 == 7) {
          __label__ = 15; break;
        }
        else if ($12 == 22) {
          __label__ = 4; break;
        }
        else if ($12 == 24) {
          __label__ = 4; break;
        }
        else if ($12 == 29) {
          __label__ = 3; break;
        }
        else {
        __label__ = 20; break;
        }
        
      case 3: // $bb2
        var $13=HEAP[$nextTokPtr_addr]; //@line 916 "xmltok_impl.c"
        var $14=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        HEAP[$13]=$14; //@line 916 "xmltok_impl.c"
        HEAP[$0]=0; //@line 916 "xmltok_impl.c"
        __label__ = 44; break; //@line 916 "xmltok_impl.c"
      case 4: // $bb3
        var $15=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        var $16=(($15+1)&4294967295); //@line 916 "xmltok_impl.c"
        HEAP[$ptr_addr]=$16; //@line 916 "xmltok_impl.c"
        __label__ = 21; break; //@line 916 "xmltok_impl.c"
      case 5: // $bb4
        var $17=HEAP[$end_addr]; //@line 916 "xmltok_impl.c"
        var $18=($17); //@line 916 "xmltok_impl.c"
        var $19=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        var $20=($19); //@line 916 "xmltok_impl.c"
        var $21=((($18) - ($20))&4294967295); //@line 916 "xmltok_impl.c"
        var $22=((($21))|0) <= 1; //@line 916 "xmltok_impl.c"
        if ($22) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 916 "xmltok_impl.c"
      case 6: // $bb5
        HEAP[$0]=-2; //@line 916 "xmltok_impl.c"
        __label__ = 44; break; //@line 916 "xmltok_impl.c"
      case 7: // $bb6
        var $23=HEAP[$enc_addr]; //@line 916 "xmltok_impl.c"
        var $24=$23; //@line 916 "xmltok_impl.c"
        var $25=(($24+340)&4294967295); //@line 916 "xmltok_impl.c"
        var $26=HEAP[$25]; //@line 916 "xmltok_impl.c"
        var $27=HEAP[$enc_addr]; //@line 916 "xmltok_impl.c"
        var $28=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        var $29=FUNCTION_TABLE[$26]($27, $28); //@line 916 "xmltok_impl.c"
        var $30=((($29))|0)==0; //@line 916 "xmltok_impl.c"
        if ($30) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 916 "xmltok_impl.c"
      case 8: // $bb7
        var $31=HEAP[$nextTokPtr_addr]; //@line 916 "xmltok_impl.c"
        var $32=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        HEAP[$31]=$32; //@line 916 "xmltok_impl.c"
        HEAP[$0]=0; //@line 916 "xmltok_impl.c"
        __label__ = 44; break; //@line 916 "xmltok_impl.c"
      case 9: // $bb8
        var $33=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        var $34=(($33+2)&4294967295); //@line 916 "xmltok_impl.c"
        HEAP[$ptr_addr]=$34; //@line 916 "xmltok_impl.c"
        __label__ = 21; break; //@line 916 "xmltok_impl.c"
      case 10: // $bb9
        var $35=HEAP[$end_addr]; //@line 916 "xmltok_impl.c"
        var $36=($35); //@line 916 "xmltok_impl.c"
        var $37=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        var $38=($37); //@line 916 "xmltok_impl.c"
        var $39=((($36) - ($38))&4294967295); //@line 916 "xmltok_impl.c"
        var $40=((($39))|0) <= 2; //@line 916 "xmltok_impl.c"
        if ($40) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 916 "xmltok_impl.c"
      case 11: // $bb10
        HEAP[$0]=-2; //@line 916 "xmltok_impl.c"
        __label__ = 44; break; //@line 916 "xmltok_impl.c"
      case 12: // $bb11
        var $41=HEAP[$enc_addr]; //@line 916 "xmltok_impl.c"
        var $42=$41; //@line 916 "xmltok_impl.c"
        var $43=(($42+344)&4294967295); //@line 916 "xmltok_impl.c"
        var $44=HEAP[$43]; //@line 916 "xmltok_impl.c"
        var $45=HEAP[$enc_addr]; //@line 916 "xmltok_impl.c"
        var $46=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        var $47=FUNCTION_TABLE[$44]($45, $46); //@line 916 "xmltok_impl.c"
        var $48=((($47))|0)==0; //@line 916 "xmltok_impl.c"
        if ($48) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 916 "xmltok_impl.c"
      case 13: // $bb12
        var $49=HEAP[$nextTokPtr_addr]; //@line 916 "xmltok_impl.c"
        var $50=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        HEAP[$49]=$50; //@line 916 "xmltok_impl.c"
        HEAP[$0]=0; //@line 916 "xmltok_impl.c"
        __label__ = 44; break; //@line 916 "xmltok_impl.c"
      case 14: // $bb13
        var $51=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        var $52=(($51+3)&4294967295); //@line 916 "xmltok_impl.c"
        HEAP[$ptr_addr]=$52; //@line 916 "xmltok_impl.c"
        __label__ = 21; break; //@line 916 "xmltok_impl.c"
      case 15: // $bb14
        var $53=HEAP[$end_addr]; //@line 916 "xmltok_impl.c"
        var $54=($53); //@line 916 "xmltok_impl.c"
        var $55=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        var $56=($55); //@line 916 "xmltok_impl.c"
        var $57=((($54) - ($56))&4294967295); //@line 916 "xmltok_impl.c"
        var $58=((($57))|0) <= 3; //@line 916 "xmltok_impl.c"
        if ($58) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 916 "xmltok_impl.c"
      case 16: // $bb15
        HEAP[$0]=-2; //@line 916 "xmltok_impl.c"
        __label__ = 44; break; //@line 916 "xmltok_impl.c"
      case 17: // $bb16
        var $59=HEAP[$enc_addr]; //@line 916 "xmltok_impl.c"
        var $60=$59; //@line 916 "xmltok_impl.c"
        var $61=(($60+348)&4294967295); //@line 916 "xmltok_impl.c"
        var $62=HEAP[$61]; //@line 916 "xmltok_impl.c"
        var $63=HEAP[$enc_addr]; //@line 916 "xmltok_impl.c"
        var $64=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        var $65=FUNCTION_TABLE[$62]($63, $64); //@line 916 "xmltok_impl.c"
        var $66=((($65))|0)==0; //@line 916 "xmltok_impl.c"
        if ($66) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 916 "xmltok_impl.c"
      case 18: // $bb17
        var $67=HEAP[$nextTokPtr_addr]; //@line 916 "xmltok_impl.c"
        var $68=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        HEAP[$67]=$68; //@line 916 "xmltok_impl.c"
        HEAP[$0]=0; //@line 916 "xmltok_impl.c"
        __label__ = 44; break; //@line 916 "xmltok_impl.c"
      case 19: // $bb18
        var $69=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        var $70=(($69+4)&4294967295); //@line 916 "xmltok_impl.c"
        HEAP[$ptr_addr]=$70; //@line 916 "xmltok_impl.c"
        __label__ = 21; break; //@line 916 "xmltok_impl.c"
      case 20: // $bb19
        var $71=HEAP[$nextTokPtr_addr]; //@line 918 "xmltok_impl.c"
        var $72=HEAP[$ptr_addr]; //@line 918 "xmltok_impl.c"
        HEAP[$71]=$72; //@line 918 "xmltok_impl.c"
        HEAP[$0]=0; //@line 919 "xmltok_impl.c"
        __label__ = 44; break; //@line 919 "xmltok_impl.c"
      case 21: // $bb20
        __label__ = 42; break; //@line 919 "xmltok_impl.c"
      case 22: // $bb21
        var $73=HEAP[$enc_addr]; //@line 922 "xmltok_impl.c"
        var $74=$73; //@line 922 "xmltok_impl.c"
        var $75=HEAP[$ptr_addr]; //@line 922 "xmltok_impl.c"
        var $76=HEAP[$75]; //@line 922 "xmltok_impl.c"
        var $77=unSign(($76), 8, 0); //@line 922 "xmltok_impl.c"
        var $78=(($74+72)&4294967295); //@line 922 "xmltok_impl.c"
        var $79=(($78+$77)&4294967295); //@line 922 "xmltok_impl.c"
        var $80=HEAP[$79]; //@line 922 "xmltok_impl.c"
        var $81=unSign(($80), 8, 0); //@line 922 "xmltok_impl.c"
        if ($81 == 5) {
          __label__ = 25; break;
        }
        else if ($81 == 6) {
          __label__ = 30; break;
        }
        else if ($81 == 7) {
          __label__ = 35; break;
        }
        else if ($81 == 9) {
          __label__ = 40; break;
        }
        else if ($81 == 10) {
          __label__ = 40; break;
        }
        else if ($81 == 11) {
          __label__ = 40; break;
        }
        else if ($81 == 21) {
          __label__ = 40; break;
        }
        else if ($81 == 22) {
          __label__ = 24; break;
        }
        else if ($81 == 24) {
          __label__ = 24; break;
        }
        else if ($81 == 25) {
          __label__ = 24; break;
        }
        else if ($81 == 26) {
          __label__ = 24; break;
        }
        else if ($81 == 27) {
          __label__ = 24; break;
        }
        else if ($81 == 29) {
          __label__ = 23; break;
        }
        else if ($81 == 30) {
          __label__ = 40; break;
        }
        else if ($81 == 32) {
          __label__ = 40; break;
        }
        else if ($81 == 36) {
          __label__ = 40; break;
        }
        else {
        __label__ = 41; break;
        }
        
      case 23: // $bb22
        var $82=HEAP[$nextTokPtr_addr]; //@line 923 "xmltok_impl.c"
        var $83=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        HEAP[$82]=$83; //@line 923 "xmltok_impl.c"
        HEAP[$0]=0; //@line 923 "xmltok_impl.c"
        __label__ = 44; break; //@line 923 "xmltok_impl.c"
      case 24: // $bb23
        var $84=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        var $85=(($84+1)&4294967295); //@line 923 "xmltok_impl.c"
        HEAP[$ptr_addr]=$85; //@line 923 "xmltok_impl.c"
        __label__ = 42; break; //@line 923 "xmltok_impl.c"
      case 25: // $bb24
        var $86=HEAP[$end_addr]; //@line 923 "xmltok_impl.c"
        var $87=($86); //@line 923 "xmltok_impl.c"
        var $88=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        var $89=($88); //@line 923 "xmltok_impl.c"
        var $90=((($87) - ($89))&4294967295); //@line 923 "xmltok_impl.c"
        var $91=((($90))|0) <= 1; //@line 923 "xmltok_impl.c"
        if ($91) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 923 "xmltok_impl.c"
      case 26: // $bb25
        HEAP[$0]=-2; //@line 923 "xmltok_impl.c"
        __label__ = 44; break; //@line 923 "xmltok_impl.c"
      case 27: // $bb26
        var $92=HEAP[$enc_addr]; //@line 923 "xmltok_impl.c"
        var $93=$92; //@line 923 "xmltok_impl.c"
        var $94=(($93+328)&4294967295); //@line 923 "xmltok_impl.c"
        var $95=HEAP[$94]; //@line 923 "xmltok_impl.c"
        var $96=HEAP[$enc_addr]; //@line 923 "xmltok_impl.c"
        var $97=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        var $98=FUNCTION_TABLE[$95]($96, $97); //@line 923 "xmltok_impl.c"
        var $99=((($98))|0)==0; //@line 923 "xmltok_impl.c"
        if ($99) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 923 "xmltok_impl.c"
      case 28: // $bb27
        var $100=HEAP[$nextTokPtr_addr]; //@line 923 "xmltok_impl.c"
        var $101=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        HEAP[$100]=$101; //@line 923 "xmltok_impl.c"
        HEAP[$0]=0; //@line 923 "xmltok_impl.c"
        __label__ = 44; break; //@line 923 "xmltok_impl.c"
      case 29: // $bb28
        var $102=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        var $103=(($102+2)&4294967295); //@line 923 "xmltok_impl.c"
        HEAP[$ptr_addr]=$103; //@line 923 "xmltok_impl.c"
        __label__ = 42; break; //@line 923 "xmltok_impl.c"
      case 30: // $bb29
        var $104=HEAP[$end_addr]; //@line 923 "xmltok_impl.c"
        var $105=($104); //@line 923 "xmltok_impl.c"
        var $106=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        var $107=($106); //@line 923 "xmltok_impl.c"
        var $108=((($105) - ($107))&4294967295); //@line 923 "xmltok_impl.c"
        var $109=((($108))|0) <= 2; //@line 923 "xmltok_impl.c"
        if ($109) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 923 "xmltok_impl.c"
      case 31: // $bb30
        HEAP[$0]=-2; //@line 923 "xmltok_impl.c"
        __label__ = 44; break; //@line 923 "xmltok_impl.c"
      case 32: // $bb31
        var $110=HEAP[$enc_addr]; //@line 923 "xmltok_impl.c"
        var $111=$110; //@line 923 "xmltok_impl.c"
        var $112=(($111+332)&4294967295); //@line 923 "xmltok_impl.c"
        var $113=HEAP[$112]; //@line 923 "xmltok_impl.c"
        var $114=HEAP[$enc_addr]; //@line 923 "xmltok_impl.c"
        var $115=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        var $116=FUNCTION_TABLE[$113]($114, $115); //@line 923 "xmltok_impl.c"
        var $117=((($116))|0)==0; //@line 923 "xmltok_impl.c"
        if ($117) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 923 "xmltok_impl.c"
      case 33: // $bb32
        var $118=HEAP[$nextTokPtr_addr]; //@line 923 "xmltok_impl.c"
        var $119=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        HEAP[$118]=$119; //@line 923 "xmltok_impl.c"
        HEAP[$0]=0; //@line 923 "xmltok_impl.c"
        __label__ = 44; break; //@line 923 "xmltok_impl.c"
      case 34: // $bb33
        var $120=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        var $121=(($120+3)&4294967295); //@line 923 "xmltok_impl.c"
        HEAP[$ptr_addr]=$121; //@line 923 "xmltok_impl.c"
        __label__ = 42; break; //@line 923 "xmltok_impl.c"
      case 35: // $bb34
        var $122=HEAP[$end_addr]; //@line 923 "xmltok_impl.c"
        var $123=($122); //@line 923 "xmltok_impl.c"
        var $124=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        var $125=($124); //@line 923 "xmltok_impl.c"
        var $126=((($123) - ($125))&4294967295); //@line 923 "xmltok_impl.c"
        var $127=((($126))|0) <= 3; //@line 923 "xmltok_impl.c"
        if ($127) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 923 "xmltok_impl.c"
      case 36: // $bb35
        HEAP[$0]=-2; //@line 923 "xmltok_impl.c"
        __label__ = 44; break; //@line 923 "xmltok_impl.c"
      case 37: // $bb36
        var $128=HEAP[$enc_addr]; //@line 923 "xmltok_impl.c"
        var $129=$128; //@line 923 "xmltok_impl.c"
        var $130=(($129+336)&4294967295); //@line 923 "xmltok_impl.c"
        var $131=HEAP[$130]; //@line 923 "xmltok_impl.c"
        var $132=HEAP[$enc_addr]; //@line 923 "xmltok_impl.c"
        var $133=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        var $134=FUNCTION_TABLE[$131]($132, $133); //@line 923 "xmltok_impl.c"
        var $135=((($134))|0)==0; //@line 923 "xmltok_impl.c"
        if ($135) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 923 "xmltok_impl.c"
      case 38: // $bb37
        var $136=HEAP[$nextTokPtr_addr]; //@line 923 "xmltok_impl.c"
        var $137=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        HEAP[$136]=$137; //@line 923 "xmltok_impl.c"
        HEAP[$0]=0; //@line 923 "xmltok_impl.c"
        __label__ = 44; break; //@line 923 "xmltok_impl.c"
      case 39: // $bb38
        var $138=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        var $139=(($138+4)&4294967295); //@line 923 "xmltok_impl.c"
        HEAP[$ptr_addr]=$139; //@line 923 "xmltok_impl.c"
        __label__ = 42; break; //@line 923 "xmltok_impl.c"
      case 40: // $bb39
        var $140=HEAP[$nextTokPtr_addr]; //@line 926 "xmltok_impl.c"
        var $141=HEAP[$ptr_addr]; //@line 926 "xmltok_impl.c"
        HEAP[$140]=$141; //@line 926 "xmltok_impl.c"
        HEAP[$0]=20; //@line 927 "xmltok_impl.c"
        __label__ = 44; break; //@line 927 "xmltok_impl.c"
      case 41: // $bb40
        var $142=HEAP[$nextTokPtr_addr]; //@line 929 "xmltok_impl.c"
        var $143=HEAP[$ptr_addr]; //@line 929 "xmltok_impl.c"
        HEAP[$142]=$143; //@line 929 "xmltok_impl.c"
        HEAP[$0]=0; //@line 930 "xmltok_impl.c"
        __label__ = 44; break; //@line 930 "xmltok_impl.c"
      case 42: // $bb41
        var $144=HEAP[$ptr_addr]; //@line 921 "xmltok_impl.c"
        var $145=HEAP[$end_addr]; //@line 921 "xmltok_impl.c"
        var $146=($144)!=($145); //@line 921 "xmltok_impl.c"
        if ($146) { __label__ = 22; break; } else { __label__ = 43; break; } //@line 921 "xmltok_impl.c"
      case 43: // $bb42
        HEAP[$0]=-20; //@line 933 "xmltok_impl.c"
        __label__ = 44; break; //@line 933 "xmltok_impl.c"
      case 44: // $bb43
        var $147=HEAP[$0]; //@line 914 "xmltok_impl.c"
        HEAP[$retval]=$147; //@line 914 "xmltok_impl.c"
        __label__ = 45; break; //@line 914 "xmltok_impl.c"
      case 45: // $return
        var $retval44=HEAP[$retval]; //@line 914 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval44; //@line 914 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_scanLit($open, $enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $open_addr=__stackBase__;
        var $enc_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $nextTokPtr_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $t=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$open_addr]=$open;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        __label__ = 25; break; //@line 941 "xmltok_impl.c"
      case 1: // $bb
        var $1=HEAP[$enc_addr]; //@line 942 "xmltok_impl.c"
        var $2=$1; //@line 942 "xmltok_impl.c"
        var $3=HEAP[$ptr_addr]; //@line 942 "xmltok_impl.c"
        var $4=HEAP[$3]; //@line 942 "xmltok_impl.c"
        var $5=unSign(($4), 8, 0); //@line 942 "xmltok_impl.c"
        var $6=(($2+72)&4294967295); //@line 942 "xmltok_impl.c"
        var $7=(($6+$5)&4294967295); //@line 942 "xmltok_impl.c"
        var $8=HEAP[$7]; //@line 942 "xmltok_impl.c"
        var $9=unSign(($8), 8, 0); //@line 942 "xmltok_impl.c"
        HEAP[$t]=$9; //@line 942 "xmltok_impl.c"
        var $10=HEAP[$t]; //@line 943 "xmltok_impl.c"
        if ($10 == 0) {
          __label__ = 17; break;
        }
        else if ($10 == 1) {
          __label__ = 17; break;
        }
        else if ($10 == 5) {
          __label__ = 2; break;
        }
        else if ($10 == 6) {
          __label__ = 7; break;
        }
        else if ($10 == 7) {
          __label__ = 12; break;
        }
        else if ($10 == 8) {
          __label__ = 17; break;
        }
        else if ($10 == 12) {
          __label__ = 18; break;
        }
        else if ($10 == 13) {
          __label__ = 18; break;
        }
        else {
        __label__ = 24; break;
        }
        
      case 2: // $bb1
        var $11=HEAP[$end_addr]; //@line 944 "xmltok_impl.c"
        var $12=($11); //@line 944 "xmltok_impl.c"
        var $13=HEAP[$ptr_addr]; //@line 944 "xmltok_impl.c"
        var $14=($13); //@line 944 "xmltok_impl.c"
        var $15=((($12) - ($14))&4294967295); //@line 944 "xmltok_impl.c"
        var $16=((($15))|0) <= 1; //@line 944 "xmltok_impl.c"
        if ($16) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 944 "xmltok_impl.c"
      case 3: // $bb2
        HEAP[$0]=-2; //@line 944 "xmltok_impl.c"
        __label__ = 27; break; //@line 944 "xmltok_impl.c"
      case 4: // $bb3
        var $17=HEAP[$enc_addr]; //@line 944 "xmltok_impl.c"
        var $18=$17; //@line 944 "xmltok_impl.c"
        var $19=(($18+352)&4294967295); //@line 944 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 944 "xmltok_impl.c"
        var $21=HEAP[$enc_addr]; //@line 944 "xmltok_impl.c"
        var $22=HEAP[$ptr_addr]; //@line 944 "xmltok_impl.c"
        var $23=FUNCTION_TABLE[$20]($21, $22); //@line 944 "xmltok_impl.c"
        var $24=((($23))|0)!=0; //@line 944 "xmltok_impl.c"
        if ($24) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 944 "xmltok_impl.c"
      case 5: // $bb4
        var $25=HEAP[$nextTokPtr_addr]; //@line 944 "xmltok_impl.c"
        var $26=HEAP[$ptr_addr]; //@line 944 "xmltok_impl.c"
        HEAP[$25]=$26; //@line 944 "xmltok_impl.c"
        HEAP[$0]=0; //@line 944 "xmltok_impl.c"
        __label__ = 27; break; //@line 944 "xmltok_impl.c"
      case 6: // $bb5
        var $27=HEAP[$ptr_addr]; //@line 944 "xmltok_impl.c"
        var $28=(($27+2)&4294967295); //@line 944 "xmltok_impl.c"
        HEAP[$ptr_addr]=$28; //@line 944 "xmltok_impl.c"
        __label__ = 25; break; //@line 944 "xmltok_impl.c"
      case 7: // $bb6
        var $29=HEAP[$end_addr]; //@line 944 "xmltok_impl.c"
        var $30=($29); //@line 944 "xmltok_impl.c"
        var $31=HEAP[$ptr_addr]; //@line 944 "xmltok_impl.c"
        var $32=($31); //@line 944 "xmltok_impl.c"
        var $33=((($30) - ($32))&4294967295); //@line 944 "xmltok_impl.c"
        var $34=((($33))|0) <= 2; //@line 944 "xmltok_impl.c"
        if ($34) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 944 "xmltok_impl.c"
      case 8: // $bb7
        HEAP[$0]=-2; //@line 944 "xmltok_impl.c"
        __label__ = 27; break; //@line 944 "xmltok_impl.c"
      case 9: // $bb8
        var $35=HEAP[$enc_addr]; //@line 944 "xmltok_impl.c"
        var $36=$35; //@line 944 "xmltok_impl.c"
        var $37=(($36+356)&4294967295); //@line 944 "xmltok_impl.c"
        var $38=HEAP[$37]; //@line 944 "xmltok_impl.c"
        var $39=HEAP[$enc_addr]; //@line 944 "xmltok_impl.c"
        var $40=HEAP[$ptr_addr]; //@line 944 "xmltok_impl.c"
        var $41=FUNCTION_TABLE[$38]($39, $40); //@line 944 "xmltok_impl.c"
        var $42=((($41))|0)!=0; //@line 944 "xmltok_impl.c"
        if ($42) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 944 "xmltok_impl.c"
      case 10: // $bb9
        var $43=HEAP[$nextTokPtr_addr]; //@line 944 "xmltok_impl.c"
        var $44=HEAP[$ptr_addr]; //@line 944 "xmltok_impl.c"
        HEAP[$43]=$44; //@line 944 "xmltok_impl.c"
        HEAP[$0]=0; //@line 944 "xmltok_impl.c"
        __label__ = 27; break; //@line 944 "xmltok_impl.c"
      case 11: // $bb10
        var $45=HEAP[$ptr_addr]; //@line 944 "xmltok_impl.c"
        var $46=(($45+3)&4294967295); //@line 944 "xmltok_impl.c"
        HEAP[$ptr_addr]=$46; //@line 944 "xmltok_impl.c"
        __label__ = 25; break; //@line 944 "xmltok_impl.c"
      case 12: // $bb11
        var $47=HEAP[$end_addr]; //@line 944 "xmltok_impl.c"
        var $48=($47); //@line 944 "xmltok_impl.c"
        var $49=HEAP[$ptr_addr]; //@line 944 "xmltok_impl.c"
        var $50=($49); //@line 944 "xmltok_impl.c"
        var $51=((($48) - ($50))&4294967295); //@line 944 "xmltok_impl.c"
        var $52=((($51))|0) <= 3; //@line 944 "xmltok_impl.c"
        if ($52) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 944 "xmltok_impl.c"
      case 13: // $bb12
        HEAP[$0]=-2; //@line 944 "xmltok_impl.c"
        __label__ = 27; break; //@line 944 "xmltok_impl.c"
      case 14: // $bb13
        var $53=HEAP[$enc_addr]; //@line 944 "xmltok_impl.c"
        var $54=$53; //@line 944 "xmltok_impl.c"
        var $55=(($54+360)&4294967295); //@line 944 "xmltok_impl.c"
        var $56=HEAP[$55]; //@line 944 "xmltok_impl.c"
        var $57=HEAP[$enc_addr]; //@line 944 "xmltok_impl.c"
        var $58=HEAP[$ptr_addr]; //@line 944 "xmltok_impl.c"
        var $59=FUNCTION_TABLE[$56]($57, $58); //@line 944 "xmltok_impl.c"
        var $60=((($59))|0)!=0; //@line 944 "xmltok_impl.c"
        if ($60) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 944 "xmltok_impl.c"
      case 15: // $bb14
        var $61=HEAP[$nextTokPtr_addr]; //@line 944 "xmltok_impl.c"
        var $62=HEAP[$ptr_addr]; //@line 944 "xmltok_impl.c"
        HEAP[$61]=$62; //@line 944 "xmltok_impl.c"
        HEAP[$0]=0; //@line 944 "xmltok_impl.c"
        __label__ = 27; break; //@line 944 "xmltok_impl.c"
      case 16: // $bb15
        var $63=HEAP[$ptr_addr]; //@line 944 "xmltok_impl.c"
        var $64=(($63+4)&4294967295); //@line 944 "xmltok_impl.c"
        HEAP[$ptr_addr]=$64; //@line 944 "xmltok_impl.c"
        __label__ = 25; break; //@line 944 "xmltok_impl.c"
      case 17: // $bb16
        var $65=HEAP[$nextTokPtr_addr]; //@line 944 "xmltok_impl.c"
        var $66=HEAP[$ptr_addr]; //@line 944 "xmltok_impl.c"
        HEAP[$65]=$66; //@line 944 "xmltok_impl.c"
        HEAP[$0]=0; //@line 944 "xmltok_impl.c"
        __label__ = 27; break; //@line 944 "xmltok_impl.c"
      case 18: // $bb17
        var $67=HEAP[$ptr_addr]; //@line 947 "xmltok_impl.c"
        var $68=(($67+1)&4294967295); //@line 947 "xmltok_impl.c"
        HEAP[$ptr_addr]=$68; //@line 947 "xmltok_impl.c"
        var $69=HEAP[$t]; //@line 948 "xmltok_impl.c"
        var $70=HEAP[$open_addr]; //@line 948 "xmltok_impl.c"
        var $71=((($69))|0)!=((($70))|0); //@line 948 "xmltok_impl.c"
        if ($71) { __label__ = 25; break; } else { __label__ = 19; break; } //@line 948 "xmltok_impl.c"
      case 19: // $bb18
        var $72=HEAP[$ptr_addr]; //@line 950 "xmltok_impl.c"
        var $73=HEAP[$end_addr]; //@line 950 "xmltok_impl.c"
        var $74=($72)==($73); //@line 950 "xmltok_impl.c"
        if ($74) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 950 "xmltok_impl.c"
      case 20: // $bb19
        HEAP[$0]=-27; //@line 951 "xmltok_impl.c"
        __label__ = 27; break; //@line 951 "xmltok_impl.c"
      case 21: // $bb20
        var $75=HEAP[$nextTokPtr_addr]; //@line 952 "xmltok_impl.c"
        var $76=HEAP[$ptr_addr]; //@line 952 "xmltok_impl.c"
        HEAP[$75]=$76; //@line 952 "xmltok_impl.c"
        var $77=HEAP[$enc_addr]; //@line 953 "xmltok_impl.c"
        var $78=$77; //@line 953 "xmltok_impl.c"
        var $79=HEAP[$ptr_addr]; //@line 953 "xmltok_impl.c"
        var $80=HEAP[$79]; //@line 953 "xmltok_impl.c"
        var $81=unSign(($80), 8, 0); //@line 953 "xmltok_impl.c"
        var $82=(($78+72)&4294967295); //@line 953 "xmltok_impl.c"
        var $83=(($82+$81)&4294967295); //@line 953 "xmltok_impl.c"
        var $84=HEAP[$83]; //@line 953 "xmltok_impl.c"
        var $85=unSign(($84), 8, 0); //@line 953 "xmltok_impl.c"
        if ($85 == 9) {
          __label__ = 22; break;
        }
        else if ($85 == 10) {
          __label__ = 22; break;
        }
        else if ($85 == 11) {
          __label__ = 22; break;
        }
        else if ($85 == 20) {
          __label__ = 22; break;
        }
        else if ($85 == 21) {
          __label__ = 22; break;
        }
        else if ($85 == 30) {
          __label__ = 22; break;
        }
        else {
        __label__ = 23; break;
        }
        
      case 22: // $bb21
        HEAP[$0]=27; //@line 956 "xmltok_impl.c"
        __label__ = 27; break; //@line 956 "xmltok_impl.c"
      case 23: // $bb22
        HEAP[$0]=0; //@line 958 "xmltok_impl.c"
        __label__ = 27; break; //@line 958 "xmltok_impl.c"
      case 24: // $bb23
        var $86=HEAP[$ptr_addr]; //@line 961 "xmltok_impl.c"
        var $87=(($86+1)&4294967295); //@line 961 "xmltok_impl.c"
        HEAP[$ptr_addr]=$87; //@line 961 "xmltok_impl.c"
        __label__ = 25; break; //@line 961 "xmltok_impl.c"
      case 25: // $bb24
        var $88=HEAP[$ptr_addr]; //@line 941 "xmltok_impl.c"
        var $89=HEAP[$end_addr]; //@line 941 "xmltok_impl.c"
        var $90=($88)!=($89); //@line 941 "xmltok_impl.c"
        if ($90) { __label__ = 1; break; } else { __label__ = 26; break; } //@line 941 "xmltok_impl.c"
      case 26: // $bb25
        HEAP[$0]=-1; //@line 965 "xmltok_impl.c"
        __label__ = 27; break; //@line 965 "xmltok_impl.c"
      case 27: // $bb26
        var $91=HEAP[$0]; //@line 944 "xmltok_impl.c"
        HEAP[$retval]=$91; //@line 944 "xmltok_impl.c"
        __label__ = 28; break; //@line 944 "xmltok_impl.c"
      case 28: // $return
        var $retval27=HEAP[$retval]; //@line 944 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval27; //@line 944 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_prologTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $tok=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 973 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 973 "xmltok_impl.c"
        var $3=($1)==($2); //@line 973 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 973 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-4; //@line 974 "xmltok_impl.c"
        __label__ = 100; break; //@line 974 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$enc_addr]; //@line 984 "xmltok_impl.c"
        var $5=$4; //@line 984 "xmltok_impl.c"
        var $6=HEAP[$ptr_addr]; //@line 984 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 984 "xmltok_impl.c"
        var $8=unSign(($7), 8, 0); //@line 984 "xmltok_impl.c"
        var $9=(($5+72)&4294967295); //@line 984 "xmltok_impl.c"
        var $10=(($9+$8)&4294967295); //@line 984 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 984 "xmltok_impl.c"
        var $12=unSign(($11), 8, 0); //@line 984 "xmltok_impl.c"
        if ($12 == 2) {
          __label__ = 5; break;
        }
        else if ($12 == 4) {
          __label__ = 24; break;
        }
        else if ($12 == 5) {
          __label__ = 44; break;
        }
        else if ($12 == 6) {
          __label__ = 51; break;
        }
        else if ($12 == 7) {
          __label__ = 58; break;
        }
        else if ($12 == 9) {
          __label__ = 12; break;
        }
        else if ($12 == 10) {
          __label__ = 14; break;
        }
        else if ($12 == 11) {
          __label__ = 42; break;
        }
        else if ($12 == 12) {
          __label__ = 3; break;
        }
        else if ($12 == 13) {
          __label__ = 4; break;
        }
        else if ($12 == 19) {
          __label__ = 43; break;
        }
        else if ($12 == 20) {
          __label__ = 23; break;
        }
        else if ($12 == 21) {
          __label__ = 14; break;
        }
        else if ($12 == 22) {
          __label__ = 65; break;
        }
        else if ($12 == 24) {
          __label__ = 65; break;
        }
        else if ($12 == 25) {
          __label__ = 66; break;
        }
        else if ($12 == 26) {
          __label__ = 66; break;
        }
        else if ($12 == 27) {
          __label__ = 66; break;
        }
        else if ($12 == 30) {
          __label__ = 21; break;
        }
        else if ($12 == 31) {
          __label__ = 32; break;
        }
        else if ($12 == 32) {
          __label__ = 33; break;
        }
        else if ($12 == 35) {
          __label__ = 22; break;
        }
        else if ($12 == 36) {
          __label__ = 41; break;
        }
        else {
        __label__ = 67; break;
        }
        
      case 3: // $bb2
        var $13=HEAP[$ptr_addr]; //@line 986 "xmltok_impl.c"
        var $14=(($13+1)&4294967295); //@line 986 "xmltok_impl.c"
        var $15=HEAP[$enc_addr]; //@line 986 "xmltok_impl.c"
        var $16=HEAP[$end_addr]; //@line 986 "xmltok_impl.c"
        var $17=HEAP[$nextTokPtr_addr]; //@line 986 "xmltok_impl.c"
        var $18=_normal_scanLit(12, $15, $14, $16, $17); //@line 986 "xmltok_impl.c"
        HEAP[$0]=$18; //@line 986 "xmltok_impl.c"
        __label__ = 100; break; //@line 986 "xmltok_impl.c"
      case 4: // $bb3
        var $19=HEAP[$ptr_addr]; //@line 988 "xmltok_impl.c"
        var $20=(($19+1)&4294967295); //@line 988 "xmltok_impl.c"
        var $21=HEAP[$enc_addr]; //@line 988 "xmltok_impl.c"
        var $22=HEAP[$end_addr]; //@line 988 "xmltok_impl.c"
        var $23=HEAP[$nextTokPtr_addr]; //@line 988 "xmltok_impl.c"
        var $24=_normal_scanLit(13, $21, $20, $22, $23); //@line 988 "xmltok_impl.c"
        HEAP[$0]=$24; //@line 988 "xmltok_impl.c"
        __label__ = 100; break; //@line 988 "xmltok_impl.c"
      case 5: // $bb4
        var $25=HEAP[$ptr_addr]; //@line 991 "xmltok_impl.c"
        var $26=(($25+1)&4294967295); //@line 991 "xmltok_impl.c"
        HEAP[$ptr_addr]=$26; //@line 991 "xmltok_impl.c"
        var $27=HEAP[$ptr_addr]; //@line 992 "xmltok_impl.c"
        var $28=HEAP[$end_addr]; //@line 992 "xmltok_impl.c"
        var $29=($27)==($28); //@line 992 "xmltok_impl.c"
        if ($29) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 992 "xmltok_impl.c"
      case 6: // $bb5
        HEAP[$0]=-1; //@line 993 "xmltok_impl.c"
        __label__ = 100; break; //@line 993 "xmltok_impl.c"
      case 7: // $bb6
        var $30=HEAP[$enc_addr]; //@line 994 "xmltok_impl.c"
        var $31=$30; //@line 994 "xmltok_impl.c"
        var $32=HEAP[$ptr_addr]; //@line 994 "xmltok_impl.c"
        var $33=HEAP[$32]; //@line 994 "xmltok_impl.c"
        var $34=unSign(($33), 8, 0); //@line 994 "xmltok_impl.c"
        var $35=(($31+72)&4294967295); //@line 994 "xmltok_impl.c"
        var $36=(($35+$34)&4294967295); //@line 994 "xmltok_impl.c"
        var $37=HEAP[$36]; //@line 994 "xmltok_impl.c"
        var $38=unSign(($37), 8, 0); //@line 994 "xmltok_impl.c"
        if ($38 == 5) {
          __label__ = 10; break;
        }
        else if ($38 == 6) {
          __label__ = 10; break;
        }
        else if ($38 == 7) {
          __label__ = 10; break;
        }
        else if ($38 == 15) {
          __label__ = 9; break;
        }
        else if ($38 == 16) {
          __label__ = 8; break;
        }
        else if ($38 == 22) {
          __label__ = 10; break;
        }
        else if ($38 == 24) {
          __label__ = 10; break;
        }
        else if ($38 == 29) {
          __label__ = 10; break;
        }
        else {
        __label__ = 11; break;
        }
        
      case 8: // $bb7
        var $39=HEAP[$ptr_addr]; //@line 996 "xmltok_impl.c"
        var $40=(($39+1)&4294967295); //@line 996 "xmltok_impl.c"
        var $41=HEAP[$enc_addr]; //@line 996 "xmltok_impl.c"
        var $42=HEAP[$end_addr]; //@line 996 "xmltok_impl.c"
        var $43=HEAP[$nextTokPtr_addr]; //@line 996 "xmltok_impl.c"
        var $44=_normal_scanDecl($41, $40, $42, $43); //@line 996 "xmltok_impl.c"
        HEAP[$0]=$44; //@line 996 "xmltok_impl.c"
        __label__ = 100; break; //@line 996 "xmltok_impl.c"
      case 9: // $bb8
        var $45=HEAP[$ptr_addr]; //@line 998 "xmltok_impl.c"
        var $46=(($45+1)&4294967295); //@line 998 "xmltok_impl.c"
        var $47=HEAP[$enc_addr]; //@line 998 "xmltok_impl.c"
        var $48=HEAP[$end_addr]; //@line 998 "xmltok_impl.c"
        var $49=HEAP[$nextTokPtr_addr]; //@line 998 "xmltok_impl.c"
        var $50=_normal_scanPi($47, $46, $48, $49); //@line 998 "xmltok_impl.c"
        HEAP[$0]=$50; //@line 998 "xmltok_impl.c"
        __label__ = 100; break; //@line 998 "xmltok_impl.c"
      case 10: // $bb9
        var $51=HEAP[$ptr_addr]; //@line 1005 "xmltok_impl.c"
        var $52=(($51+-1)&4294967295); //@line 1005 "xmltok_impl.c"
        var $53=HEAP[$nextTokPtr_addr]; //@line 1005 "xmltok_impl.c"
        HEAP[$53]=$52; //@line 1005 "xmltok_impl.c"
        HEAP[$0]=29; //@line 1006 "xmltok_impl.c"
        __label__ = 100; break; //@line 1006 "xmltok_impl.c"
      case 11: // $bb10
        var $54=HEAP[$nextTokPtr_addr]; //@line 1008 "xmltok_impl.c"
        var $55=HEAP[$ptr_addr]; //@line 1008 "xmltok_impl.c"
        HEAP[$54]=$55; //@line 1008 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1009 "xmltok_impl.c"
        __label__ = 100; break; //@line 1009 "xmltok_impl.c"
      case 12: // $bb11
        var $56=HEAP[$ptr_addr]; //@line 1012 "xmltok_impl.c"
        var $57=(($56+1)&4294967295); //@line 1012 "xmltok_impl.c"
        var $58=HEAP[$end_addr]; //@line 1012 "xmltok_impl.c"
        var $59=($57)==($58); //@line 1012 "xmltok_impl.c"
        if ($59) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1012 "xmltok_impl.c"
      case 13: // $bb12
        var $60=HEAP[$nextTokPtr_addr]; //@line 1013 "xmltok_impl.c"
        var $61=HEAP[$end_addr]; //@line 1013 "xmltok_impl.c"
        HEAP[$60]=$61; //@line 1013 "xmltok_impl.c"
        HEAP[$0]=-15; //@line 1015 "xmltok_impl.c"
        __label__ = 100; break; //@line 1015 "xmltok_impl.c"
      case 14: // $bb13
        var $62=HEAP[$ptr_addr]; //@line 1020 "xmltok_impl.c"
        var $63=(($62+1)&4294967295); //@line 1020 "xmltok_impl.c"
        HEAP[$ptr_addr]=$63; //@line 1020 "xmltok_impl.c"
        var $64=HEAP[$ptr_addr]; //@line 1021 "xmltok_impl.c"
        var $65=HEAP[$end_addr]; //@line 1021 "xmltok_impl.c"
        var $66=($64)==($65); //@line 1021 "xmltok_impl.c"
        if ($66) { __label__ = 20; break; } else { __label__ = 15; break; } //@line 1021 "xmltok_impl.c"
      case 15: // $bb14
        var $67=HEAP[$enc_addr]; //@line 1023 "xmltok_impl.c"
        var $68=$67; //@line 1023 "xmltok_impl.c"
        var $69=HEAP[$ptr_addr]; //@line 1023 "xmltok_impl.c"
        var $70=HEAP[$69]; //@line 1023 "xmltok_impl.c"
        var $71=unSign(($70), 8, 0); //@line 1023 "xmltok_impl.c"
        var $72=(($68+72)&4294967295); //@line 1023 "xmltok_impl.c"
        var $73=(($72+$71)&4294967295); //@line 1023 "xmltok_impl.c"
        var $74=HEAP[$73]; //@line 1023 "xmltok_impl.c"
        var $75=unSign(($74), 8, 0); //@line 1023 "xmltok_impl.c"
        if ($75 == 9) {
          __label__ = 17; break;
        }
        else if ($75 == 10) {
          __label__ = 16; break;
        }
        else if ($75 == 21) {
          __label__ = 16; break;
        }
        else {
        __label__ = 18; break;
        }
        
      case 16: // $bb15
        __label__ = 19; break; //@line 1023 "xmltok_impl.c"
      case 17: // $bb16
        var $76=HEAP[$ptr_addr]; //@line 1028 "xmltok_impl.c"
        var $77=(($76+1)&4294967295); //@line 1028 "xmltok_impl.c"
        var $78=HEAP[$end_addr]; //@line 1028 "xmltok_impl.c"
        var $79=($77)!=($78); //@line 1028 "xmltok_impl.c"
        if ($79) { __label__ = 19; break; } else { __label__ = 18; break; } //@line 1028 "xmltok_impl.c"
      case 18: // $bb17
        var $80=HEAP[$nextTokPtr_addr]; //@line 1032 "xmltok_impl.c"
        var $81=HEAP[$ptr_addr]; //@line 1032 "xmltok_impl.c"
        HEAP[$80]=$81; //@line 1032 "xmltok_impl.c"
        HEAP[$0]=15; //@line 1033 "xmltok_impl.c"
        __label__ = 100; break; //@line 1033 "xmltok_impl.c"
      case 19: // $bb18
        __label__ = 14; break; //@line 1033 "xmltok_impl.c"
      case 20: // $bb19
        var $82=HEAP[$nextTokPtr_addr]; //@line 1036 "xmltok_impl.c"
        var $83=HEAP[$ptr_addr]; //@line 1036 "xmltok_impl.c"
        HEAP[$82]=$83; //@line 1036 "xmltok_impl.c"
        HEAP[$0]=15; //@line 1037 "xmltok_impl.c"
        __label__ = 100; break; //@line 1037 "xmltok_impl.c"
      case 21: // $bb20
        var $84=HEAP[$ptr_addr]; //@line 1039 "xmltok_impl.c"
        var $85=(($84+1)&4294967295); //@line 1039 "xmltok_impl.c"
        var $86=HEAP[$enc_addr]; //@line 1039 "xmltok_impl.c"
        var $87=HEAP[$end_addr]; //@line 1039 "xmltok_impl.c"
        var $88=HEAP[$nextTokPtr_addr]; //@line 1039 "xmltok_impl.c"
        var $89=_normal_scanPercent($86, $85, $87, $88); //@line 1039 "xmltok_impl.c"
        HEAP[$0]=$89; //@line 1039 "xmltok_impl.c"
        __label__ = 100; break; //@line 1039 "xmltok_impl.c"
      case 22: // $bb21
        var $90=HEAP[$ptr_addr]; //@line 1041 "xmltok_impl.c"
        var $91=(($90+1)&4294967295); //@line 1041 "xmltok_impl.c"
        var $92=HEAP[$nextTokPtr_addr]; //@line 1041 "xmltok_impl.c"
        HEAP[$92]=$91; //@line 1041 "xmltok_impl.c"
        HEAP[$0]=38; //@line 1042 "xmltok_impl.c"
        __label__ = 100; break; //@line 1042 "xmltok_impl.c"
      case 23: // $bb22
        var $93=HEAP[$ptr_addr]; //@line 1044 "xmltok_impl.c"
        var $94=(($93+1)&4294967295); //@line 1044 "xmltok_impl.c"
        var $95=HEAP[$nextTokPtr_addr]; //@line 1044 "xmltok_impl.c"
        HEAP[$95]=$94; //@line 1044 "xmltok_impl.c"
        HEAP[$0]=25; //@line 1045 "xmltok_impl.c"
        __label__ = 100; break; //@line 1045 "xmltok_impl.c"
      case 24: // $bb23
        var $96=HEAP[$ptr_addr]; //@line 1047 "xmltok_impl.c"
        var $97=(($96+1)&4294967295); //@line 1047 "xmltok_impl.c"
        HEAP[$ptr_addr]=$97; //@line 1047 "xmltok_impl.c"
        var $98=HEAP[$ptr_addr]; //@line 1048 "xmltok_impl.c"
        var $99=HEAP[$end_addr]; //@line 1048 "xmltok_impl.c"
        var $100=($98)==($99); //@line 1048 "xmltok_impl.c"
        if ($100) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 1048 "xmltok_impl.c"
      case 25: // $bb24
        HEAP[$0]=-26; //@line 1049 "xmltok_impl.c"
        __label__ = 100; break; //@line 1049 "xmltok_impl.c"
      case 26: // $bb25
        var $101=HEAP[$ptr_addr]; //@line 1050 "xmltok_impl.c"
        var $102=HEAP[$101]; //@line 1050 "xmltok_impl.c"
        var $103=reSign(($102), 8, 0)==93; //@line 1050 "xmltok_impl.c"
        if ($103) { __label__ = 27; break; } else { __label__ = 31; break; } //@line 1050 "xmltok_impl.c"
      case 27: // $bb26
        var $104=HEAP[$ptr_addr]; //@line 1051 "xmltok_impl.c"
        var $105=(($104+1)&4294967295); //@line 1051 "xmltok_impl.c"
        var $106=HEAP[$end_addr]; //@line 1051 "xmltok_impl.c"
        var $107=($105)==($106); //@line 1051 "xmltok_impl.c"
        if ($107) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 1051 "xmltok_impl.c"
      case 28: // $bb27
        HEAP[$0]=-1; //@line 1052 "xmltok_impl.c"
        __label__ = 100; break; //@line 1052 "xmltok_impl.c"
      case 29: // $bb28
        var $108=HEAP[$ptr_addr]; //@line 1053 "xmltok_impl.c"
        var $109=(($108+1)&4294967295); //@line 1053 "xmltok_impl.c"
        var $110=HEAP[$109]; //@line 1053 "xmltok_impl.c"
        var $111=reSign(($110), 8, 0)==62; //@line 1053 "xmltok_impl.c"
        if ($111) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 1053 "xmltok_impl.c"
      case 30: // $bb29
        var $112=HEAP[$ptr_addr]; //@line 1054 "xmltok_impl.c"
        var $113=(($112+2)&4294967295); //@line 1054 "xmltok_impl.c"
        var $114=HEAP[$nextTokPtr_addr]; //@line 1054 "xmltok_impl.c"
        HEAP[$114]=$113; //@line 1054 "xmltok_impl.c"
        HEAP[$0]=34; //@line 1055 "xmltok_impl.c"
        __label__ = 100; break; //@line 1055 "xmltok_impl.c"
      case 31: // $bb30
        var $115=HEAP[$nextTokPtr_addr]; //@line 1058 "xmltok_impl.c"
        var $116=HEAP[$ptr_addr]; //@line 1058 "xmltok_impl.c"
        HEAP[$115]=$116; //@line 1058 "xmltok_impl.c"
        HEAP[$0]=26; //@line 1059 "xmltok_impl.c"
        __label__ = 100; break; //@line 1059 "xmltok_impl.c"
      case 32: // $bb31
        var $117=HEAP[$ptr_addr]; //@line 1061 "xmltok_impl.c"
        var $118=(($117+1)&4294967295); //@line 1061 "xmltok_impl.c"
        var $119=HEAP[$nextTokPtr_addr]; //@line 1061 "xmltok_impl.c"
        HEAP[$119]=$118; //@line 1061 "xmltok_impl.c"
        HEAP[$0]=23; //@line 1062 "xmltok_impl.c"
        __label__ = 100; break; //@line 1062 "xmltok_impl.c"
      case 33: // $bb32
        var $120=HEAP[$ptr_addr]; //@line 1064 "xmltok_impl.c"
        var $121=(($120+1)&4294967295); //@line 1064 "xmltok_impl.c"
        HEAP[$ptr_addr]=$121; //@line 1064 "xmltok_impl.c"
        var $122=HEAP[$ptr_addr]; //@line 1065 "xmltok_impl.c"
        var $123=HEAP[$end_addr]; //@line 1065 "xmltok_impl.c"
        var $124=($122)==($123); //@line 1065 "xmltok_impl.c"
        if ($124) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 1065 "xmltok_impl.c"
      case 34: // $bb33
        HEAP[$0]=-24; //@line 1066 "xmltok_impl.c"
        __label__ = 100; break; //@line 1066 "xmltok_impl.c"
      case 35: // $bb34
        var $125=HEAP[$enc_addr]; //@line 1067 "xmltok_impl.c"
        var $126=$125; //@line 1067 "xmltok_impl.c"
        var $127=HEAP[$ptr_addr]; //@line 1067 "xmltok_impl.c"
        var $128=HEAP[$127]; //@line 1067 "xmltok_impl.c"
        var $129=unSign(($128), 8, 0); //@line 1067 "xmltok_impl.c"
        var $130=(($126+72)&4294967295); //@line 1067 "xmltok_impl.c"
        var $131=(($130+$129)&4294967295); //@line 1067 "xmltok_impl.c"
        var $132=HEAP[$131]; //@line 1067 "xmltok_impl.c"
        var $133=unSign(($132), 8, 0); //@line 1067 "xmltok_impl.c"
        if ($133 == 9) {
          __label__ = 39; break;
        }
        else if ($133 == 10) {
          __label__ = 39; break;
        }
        else if ($133 == 11) {
          __label__ = 39; break;
        }
        else if ($133 == 15) {
          __label__ = 37; break;
        }
        else if ($133 == 21) {
          __label__ = 39; break;
        }
        else if ($133 == 32) {
          __label__ = 39; break;
        }
        else if ($133 == 33) {
          __label__ = 36; break;
        }
        else if ($133 == 34) {
          __label__ = 38; break;
        }
        else if ($133 == 35) {
          __label__ = 39; break;
        }
        else if ($133 == 36) {
          __label__ = 39; break;
        }
        else {
        __label__ = 40; break;
        }
        
      case 36: // $bb35
        var $134=HEAP[$ptr_addr]; //@line 1069 "xmltok_impl.c"
        var $135=(($134+1)&4294967295); //@line 1069 "xmltok_impl.c"
        var $136=HEAP[$nextTokPtr_addr]; //@line 1069 "xmltok_impl.c"
        HEAP[$136]=$135; //@line 1069 "xmltok_impl.c"
        HEAP[$0]=36; //@line 1070 "xmltok_impl.c"
        __label__ = 100; break; //@line 1070 "xmltok_impl.c"
      case 37: // $bb36
        var $137=HEAP[$ptr_addr]; //@line 1072 "xmltok_impl.c"
        var $138=(($137+1)&4294967295); //@line 1072 "xmltok_impl.c"
        var $139=HEAP[$nextTokPtr_addr]; //@line 1072 "xmltok_impl.c"
        HEAP[$139]=$138; //@line 1072 "xmltok_impl.c"
        HEAP[$0]=35; //@line 1073 "xmltok_impl.c"
        __label__ = 100; break; //@line 1073 "xmltok_impl.c"
      case 38: // $bb37
        var $140=HEAP[$ptr_addr]; //@line 1075 "xmltok_impl.c"
        var $141=(($140+1)&4294967295); //@line 1075 "xmltok_impl.c"
        var $142=HEAP[$nextTokPtr_addr]; //@line 1075 "xmltok_impl.c"
        HEAP[$142]=$141; //@line 1075 "xmltok_impl.c"
        HEAP[$0]=37; //@line 1076 "xmltok_impl.c"
        __label__ = 100; break; //@line 1076 "xmltok_impl.c"
      case 39: // $bb38
        var $143=HEAP[$nextTokPtr_addr]; //@line 1080 "xmltok_impl.c"
        var $144=HEAP[$ptr_addr]; //@line 1080 "xmltok_impl.c"
        HEAP[$143]=$144; //@line 1080 "xmltok_impl.c"
        HEAP[$0]=24; //@line 1081 "xmltok_impl.c"
        __label__ = 100; break; //@line 1081 "xmltok_impl.c"
      case 40: // $bb39
        var $145=HEAP[$nextTokPtr_addr]; //@line 1083 "xmltok_impl.c"
        var $146=HEAP[$ptr_addr]; //@line 1083 "xmltok_impl.c"
        HEAP[$145]=$146; //@line 1083 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1084 "xmltok_impl.c"
        __label__ = 100; break; //@line 1084 "xmltok_impl.c"
      case 41: // $bb40
        var $147=HEAP[$ptr_addr]; //@line 1086 "xmltok_impl.c"
        var $148=(($147+1)&4294967295); //@line 1086 "xmltok_impl.c"
        var $149=HEAP[$nextTokPtr_addr]; //@line 1086 "xmltok_impl.c"
        HEAP[$149]=$148; //@line 1086 "xmltok_impl.c"
        HEAP[$0]=21; //@line 1087 "xmltok_impl.c"
        __label__ = 100; break; //@line 1087 "xmltok_impl.c"
      case 42: // $bb41
        var $150=HEAP[$ptr_addr]; //@line 1089 "xmltok_impl.c"
        var $151=(($150+1)&4294967295); //@line 1089 "xmltok_impl.c"
        var $152=HEAP[$nextTokPtr_addr]; //@line 1089 "xmltok_impl.c"
        HEAP[$152]=$151; //@line 1089 "xmltok_impl.c"
        HEAP[$0]=17; //@line 1090 "xmltok_impl.c"
        __label__ = 100; break; //@line 1090 "xmltok_impl.c"
      case 43: // $bb42
        var $153=HEAP[$ptr_addr]; //@line 1092 "xmltok_impl.c"
        var $154=(($153+1)&4294967295); //@line 1092 "xmltok_impl.c"
        var $155=HEAP[$enc_addr]; //@line 1092 "xmltok_impl.c"
        var $156=HEAP[$end_addr]; //@line 1092 "xmltok_impl.c"
        var $157=HEAP[$nextTokPtr_addr]; //@line 1092 "xmltok_impl.c"
        var $158=_normal_scanPoundName($155, $154, $156, $157); //@line 1092 "xmltok_impl.c"
        HEAP[$0]=$158; //@line 1092 "xmltok_impl.c"
        __label__ = 100; break; //@line 1092 "xmltok_impl.c"
      case 44: // $bb43
        var $159=HEAP[$end_addr]; //@line 1109 "xmltok_impl.c"
        var $160=($159); //@line 1109 "xmltok_impl.c"
        var $161=HEAP[$ptr_addr]; //@line 1109 "xmltok_impl.c"
        var $162=($161); //@line 1109 "xmltok_impl.c"
        var $163=((($160) - ($162))&4294967295); //@line 1109 "xmltok_impl.c"
        var $164=((($163))|0) <= 1; //@line 1109 "xmltok_impl.c"
        if ($164) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 1109 "xmltok_impl.c"
      case 45: // $bb44
        HEAP[$0]=-2; //@line 1109 "xmltok_impl.c"
        __label__ = 100; break; //@line 1109 "xmltok_impl.c"
      case 46: // $bb45
        var $165=HEAP[$enc_addr]; //@line 1109 "xmltok_impl.c"
        var $166=$165; //@line 1109 "xmltok_impl.c"
        var $167=(($166+340)&4294967295); //@line 1109 "xmltok_impl.c"
        var $168=HEAP[$167]; //@line 1109 "xmltok_impl.c"
        var $169=HEAP[$enc_addr]; //@line 1109 "xmltok_impl.c"
        var $170=HEAP[$ptr_addr]; //@line 1109 "xmltok_impl.c"
        var $171=FUNCTION_TABLE[$168]($169, $170); //@line 1109 "xmltok_impl.c"
        var $172=((($171))|0)!=0; //@line 1109 "xmltok_impl.c"
        if ($172) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 1109 "xmltok_impl.c"
      case 47: // $bb46
        var $173=HEAP[$ptr_addr]; //@line 1109 "xmltok_impl.c"
        var $174=(($173+2)&4294967295); //@line 1109 "xmltok_impl.c"
        HEAP[$ptr_addr]=$174; //@line 1109 "xmltok_impl.c"
        HEAP[$tok]=18; //@line 1109 "xmltok_impl.c"
        __label__ = 68; break; //@line 1109 "xmltok_impl.c"
      case 48: // $bb47
        var $175=HEAP[$enc_addr]; //@line 1109 "xmltok_impl.c"
        var $176=$175; //@line 1109 "xmltok_impl.c"
        var $177=(($176+328)&4294967295); //@line 1109 "xmltok_impl.c"
        var $178=HEAP[$177]; //@line 1109 "xmltok_impl.c"
        var $179=HEAP[$enc_addr]; //@line 1109 "xmltok_impl.c"
        var $180=HEAP[$ptr_addr]; //@line 1109 "xmltok_impl.c"
        var $181=FUNCTION_TABLE[$178]($179, $180); //@line 1109 "xmltok_impl.c"
        var $182=((($181))|0)!=0; //@line 1109 "xmltok_impl.c"
        if ($182) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 1109 "xmltok_impl.c"
      case 49: // $bb48
        var $183=HEAP[$ptr_addr]; //@line 1109 "xmltok_impl.c"
        var $184=(($183+2)&4294967295); //@line 1109 "xmltok_impl.c"
        HEAP[$ptr_addr]=$184; //@line 1109 "xmltok_impl.c"
        HEAP[$tok]=19; //@line 1109 "xmltok_impl.c"
        __label__ = 68; break; //@line 1109 "xmltok_impl.c"
      case 50: // $bb49
        var $185=HEAP[$nextTokPtr_addr]; //@line 1109 "xmltok_impl.c"
        var $186=HEAP[$ptr_addr]; //@line 1109 "xmltok_impl.c"
        HEAP[$185]=$186; //@line 1109 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1109 "xmltok_impl.c"
        __label__ = 100; break; //@line 1109 "xmltok_impl.c"
      case 51: // $bb50
        var $187=HEAP[$end_addr]; //@line 1109 "xmltok_impl.c"
        var $188=($187); //@line 1109 "xmltok_impl.c"
        var $189=HEAP[$ptr_addr]; //@line 1109 "xmltok_impl.c"
        var $190=($189); //@line 1109 "xmltok_impl.c"
        var $191=((($188) - ($190))&4294967295); //@line 1109 "xmltok_impl.c"
        var $192=((($191))|0) <= 2; //@line 1109 "xmltok_impl.c"
        if ($192) { __label__ = 52; break; } else { __label__ = 53; break; } //@line 1109 "xmltok_impl.c"
      case 52: // $bb51
        HEAP[$0]=-2; //@line 1109 "xmltok_impl.c"
        __label__ = 100; break; //@line 1109 "xmltok_impl.c"
      case 53: // $bb52
        var $193=HEAP[$enc_addr]; //@line 1109 "xmltok_impl.c"
        var $194=$193; //@line 1109 "xmltok_impl.c"
        var $195=(($194+344)&4294967295); //@line 1109 "xmltok_impl.c"
        var $196=HEAP[$195]; //@line 1109 "xmltok_impl.c"
        var $197=HEAP[$enc_addr]; //@line 1109 "xmltok_impl.c"
        var $198=HEAP[$ptr_addr]; //@line 1109 "xmltok_impl.c"
        var $199=FUNCTION_TABLE[$196]($197, $198); //@line 1109 "xmltok_impl.c"
        var $200=((($199))|0)!=0; //@line 1109 "xmltok_impl.c"
        if ($200) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 1109 "xmltok_impl.c"
      case 54: // $bb53
        var $201=HEAP[$ptr_addr]; //@line 1109 "xmltok_impl.c"
        var $202=(($201+3)&4294967295); //@line 1109 "xmltok_impl.c"
        HEAP[$ptr_addr]=$202; //@line 1109 "xmltok_impl.c"
        HEAP[$tok]=18; //@line 1109 "xmltok_impl.c"
        __label__ = 68; break; //@line 1109 "xmltok_impl.c"
      case 55: // $bb54
        var $203=HEAP[$enc_addr]; //@line 1109 "xmltok_impl.c"
        var $204=$203; //@line 1109 "xmltok_impl.c"
        var $205=(($204+332)&4294967295); //@line 1109 "xmltok_impl.c"
        var $206=HEAP[$205]; //@line 1109 "xmltok_impl.c"
        var $207=HEAP[$enc_addr]; //@line 1109 "xmltok_impl.c"
        var $208=HEAP[$ptr_addr]; //@line 1109 "xmltok_impl.c"
        var $209=FUNCTION_TABLE[$206]($207, $208); //@line 1109 "xmltok_impl.c"
        var $210=((($209))|0)!=0; //@line 1109 "xmltok_impl.c"
        if ($210) { __label__ = 56; break; } else { __label__ = 57; break; } //@line 1109 "xmltok_impl.c"
      case 56: // $bb55
        var $211=HEAP[$ptr_addr]; //@line 1109 "xmltok_impl.c"
        var $212=(($211+3)&4294967295); //@line 1109 "xmltok_impl.c"
        HEAP[$ptr_addr]=$212; //@line 1109 "xmltok_impl.c"
        HEAP[$tok]=19; //@line 1109 "xmltok_impl.c"
        __label__ = 68; break; //@line 1109 "xmltok_impl.c"
      case 57: // $bb56
        var $213=HEAP[$nextTokPtr_addr]; //@line 1109 "xmltok_impl.c"
        var $214=HEAP[$ptr_addr]; //@line 1109 "xmltok_impl.c"
        HEAP[$213]=$214; //@line 1109 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1109 "xmltok_impl.c"
        __label__ = 100; break; //@line 1109 "xmltok_impl.c"
      case 58: // $bb57
        var $215=HEAP[$end_addr]; //@line 1109 "xmltok_impl.c"
        var $216=($215); //@line 1109 "xmltok_impl.c"
        var $217=HEAP[$ptr_addr]; //@line 1109 "xmltok_impl.c"
        var $218=($217); //@line 1109 "xmltok_impl.c"
        var $219=((($216) - ($218))&4294967295); //@line 1109 "xmltok_impl.c"
        var $220=((($219))|0) <= 3; //@line 1109 "xmltok_impl.c"
        if ($220) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 1109 "xmltok_impl.c"
      case 59: // $bb58
        HEAP[$0]=-2; //@line 1109 "xmltok_impl.c"
        __label__ = 100; break; //@line 1109 "xmltok_impl.c"
      case 60: // $bb59
        var $221=HEAP[$enc_addr]; //@line 1109 "xmltok_impl.c"
        var $222=$221; //@line 1109 "xmltok_impl.c"
        var $223=(($222+348)&4294967295); //@line 1109 "xmltok_impl.c"
        var $224=HEAP[$223]; //@line 1109 "xmltok_impl.c"
        var $225=HEAP[$enc_addr]; //@line 1109 "xmltok_impl.c"
        var $226=HEAP[$ptr_addr]; //@line 1109 "xmltok_impl.c"
        var $227=FUNCTION_TABLE[$224]($225, $226); //@line 1109 "xmltok_impl.c"
        var $228=((($227))|0)!=0; //@line 1109 "xmltok_impl.c"
        if ($228) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 1109 "xmltok_impl.c"
      case 61: // $bb60
        var $229=HEAP[$ptr_addr]; //@line 1109 "xmltok_impl.c"
        var $230=(($229+4)&4294967295); //@line 1109 "xmltok_impl.c"
        HEAP[$ptr_addr]=$230; //@line 1109 "xmltok_impl.c"
        HEAP[$tok]=18; //@line 1109 "xmltok_impl.c"
        __label__ = 68; break; //@line 1109 "xmltok_impl.c"
      case 62: // $bb61
        var $231=HEAP[$enc_addr]; //@line 1109 "xmltok_impl.c"
        var $232=$231; //@line 1109 "xmltok_impl.c"
        var $233=(($232+336)&4294967295); //@line 1109 "xmltok_impl.c"
        var $234=HEAP[$233]; //@line 1109 "xmltok_impl.c"
        var $235=HEAP[$enc_addr]; //@line 1109 "xmltok_impl.c"
        var $236=HEAP[$ptr_addr]; //@line 1109 "xmltok_impl.c"
        var $237=FUNCTION_TABLE[$234]($235, $236); //@line 1109 "xmltok_impl.c"
        var $238=((($237))|0)!=0; //@line 1109 "xmltok_impl.c"
        if ($238) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 1109 "xmltok_impl.c"
      case 63: // $bb62
        var $239=HEAP[$ptr_addr]; //@line 1109 "xmltok_impl.c"
        var $240=(($239+4)&4294967295); //@line 1109 "xmltok_impl.c"
        HEAP[$ptr_addr]=$240; //@line 1109 "xmltok_impl.c"
        HEAP[$tok]=19; //@line 1109 "xmltok_impl.c"
        __label__ = 68; break; //@line 1109 "xmltok_impl.c"
      case 64: // $bb63
        var $241=HEAP[$nextTokPtr_addr]; //@line 1109 "xmltok_impl.c"
        var $242=HEAP[$ptr_addr]; //@line 1109 "xmltok_impl.c"
        HEAP[$241]=$242; //@line 1109 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1109 "xmltok_impl.c"
        __label__ = 100; break; //@line 1109 "xmltok_impl.c"
      case 65: // $bb64
        HEAP[$tok]=18; //@line 1113 "xmltok_impl.c"
        var $243=HEAP[$ptr_addr]; //@line 1114 "xmltok_impl.c"
        var $244=(($243+1)&4294967295); //@line 1114 "xmltok_impl.c"
        HEAP[$ptr_addr]=$244; //@line 1114 "xmltok_impl.c"
        __label__ = 68; break; //@line 1114 "xmltok_impl.c"
      case 66: // $bb65
        HEAP[$tok]=19; //@line 1122 "xmltok_impl.c"
        var $245=HEAP[$ptr_addr]; //@line 1123 "xmltok_impl.c"
        var $246=(($245+1)&4294967295); //@line 1123 "xmltok_impl.c"
        HEAP[$ptr_addr]=$246; //@line 1123 "xmltok_impl.c"
        __label__ = 68; break; //@line 1123 "xmltok_impl.c"
      case 67: // $bb66
        var $247=HEAP[$nextTokPtr_addr]; //@line 1138 "xmltok_impl.c"
        var $248=HEAP[$ptr_addr]; //@line 1138 "xmltok_impl.c"
        HEAP[$247]=$248; //@line 1138 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1139 "xmltok_impl.c"
        __label__ = 100; break; //@line 1139 "xmltok_impl.c"
      case 68: // $bb67
        __label__ = 98; break; //@line 1139 "xmltok_impl.c"
      case 69: // $bb68
        var $249=HEAP[$enc_addr]; //@line 1142 "xmltok_impl.c"
        var $250=$249; //@line 1142 "xmltok_impl.c"
        var $251=HEAP[$ptr_addr]; //@line 1142 "xmltok_impl.c"
        var $252=HEAP[$251]; //@line 1142 "xmltok_impl.c"
        var $253=unSign(($252), 8, 0); //@line 1142 "xmltok_impl.c"
        var $254=(($250+72)&4294967295); //@line 1142 "xmltok_impl.c"
        var $255=(($254+$253)&4294967295); //@line 1142 "xmltok_impl.c"
        var $256=HEAP[$255]; //@line 1142 "xmltok_impl.c"
        var $257=unSign(($256), 8, 0); //@line 1142 "xmltok_impl.c"
        if ($257 == 5) {
          __label__ = 72; break;
        }
        else if ($257 == 6) {
          __label__ = 77; break;
        }
        else if ($257 == 7) {
          __label__ = 82; break;
        }
        else if ($257 == 9) {
          __label__ = 87; break;
        }
        else if ($257 == 10) {
          __label__ = 87; break;
        }
        else if ($257 == 11) {
          __label__ = 87; break;
        }
        else if ($257 == 15) {
          __label__ = 94; break;
        }
        else if ($257 == 20) {
          __label__ = 87; break;
        }
        else if ($257 == 21) {
          __label__ = 87; break;
        }
        else if ($257 == 22) {
          __label__ = 71; break;
        }
        else if ($257 == 24) {
          __label__ = 71; break;
        }
        else if ($257 == 25) {
          __label__ = 71; break;
        }
        else if ($257 == 26) {
          __label__ = 71; break;
        }
        else if ($257 == 27) {
          __label__ = 71; break;
        }
        else if ($257 == 29) {
          __label__ = 70; break;
        }
        else if ($257 == 30) {
          __label__ = 87; break;
        }
        else if ($257 == 32) {
          __label__ = 87; break;
        }
        else if ($257 == 33) {
          __label__ = 91; break;
        }
        else if ($257 == 34) {
          __label__ = 88; break;
        }
        else if ($257 == 35) {
          __label__ = 87; break;
        }
        else if ($257 == 36) {
          __label__ = 87; break;
        }
        else {
        __label__ = 97; break;
        }
        
      case 70: // $bb69
        var $258=HEAP[$nextTokPtr_addr]; //@line 1143 "xmltok_impl.c"
        var $259=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        HEAP[$258]=$259; //@line 1143 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1143 "xmltok_impl.c"
        __label__ = 100; break; //@line 1143 "xmltok_impl.c"
      case 71: // $bb70
        var $260=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        var $261=(($260+1)&4294967295); //@line 1143 "xmltok_impl.c"
        HEAP[$ptr_addr]=$261; //@line 1143 "xmltok_impl.c"
        __label__ = 98; break; //@line 1143 "xmltok_impl.c"
      case 72: // $bb71
        var $262=HEAP[$end_addr]; //@line 1143 "xmltok_impl.c"
        var $263=($262); //@line 1143 "xmltok_impl.c"
        var $264=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        var $265=($264); //@line 1143 "xmltok_impl.c"
        var $266=((($263) - ($265))&4294967295); //@line 1143 "xmltok_impl.c"
        var $267=((($266))|0) <= 1; //@line 1143 "xmltok_impl.c"
        if ($267) { __label__ = 73; break; } else { __label__ = 74; break; } //@line 1143 "xmltok_impl.c"
      case 73: // $bb72
        HEAP[$0]=-2; //@line 1143 "xmltok_impl.c"
        __label__ = 100; break; //@line 1143 "xmltok_impl.c"
      case 74: // $bb73
        var $268=HEAP[$enc_addr]; //@line 1143 "xmltok_impl.c"
        var $269=$268; //@line 1143 "xmltok_impl.c"
        var $270=(($269+328)&4294967295); //@line 1143 "xmltok_impl.c"
        var $271=HEAP[$270]; //@line 1143 "xmltok_impl.c"
        var $272=HEAP[$enc_addr]; //@line 1143 "xmltok_impl.c"
        var $273=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        var $274=FUNCTION_TABLE[$271]($272, $273); //@line 1143 "xmltok_impl.c"
        var $275=((($274))|0)==0; //@line 1143 "xmltok_impl.c"
        if ($275) { __label__ = 75; break; } else { __label__ = 76; break; } //@line 1143 "xmltok_impl.c"
      case 75: // $bb74
        var $276=HEAP[$nextTokPtr_addr]; //@line 1143 "xmltok_impl.c"
        var $277=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        HEAP[$276]=$277; //@line 1143 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1143 "xmltok_impl.c"
        __label__ = 100; break; //@line 1143 "xmltok_impl.c"
      case 76: // $bb75
        var $278=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        var $279=(($278+2)&4294967295); //@line 1143 "xmltok_impl.c"
        HEAP[$ptr_addr]=$279; //@line 1143 "xmltok_impl.c"
        __label__ = 98; break; //@line 1143 "xmltok_impl.c"
      case 77: // $bb76
        var $280=HEAP[$end_addr]; //@line 1143 "xmltok_impl.c"
        var $281=($280); //@line 1143 "xmltok_impl.c"
        var $282=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        var $283=($282); //@line 1143 "xmltok_impl.c"
        var $284=((($281) - ($283))&4294967295); //@line 1143 "xmltok_impl.c"
        var $285=((($284))|0) <= 2; //@line 1143 "xmltok_impl.c"
        if ($285) { __label__ = 78; break; } else { __label__ = 79; break; } //@line 1143 "xmltok_impl.c"
      case 78: // $bb77
        HEAP[$0]=-2; //@line 1143 "xmltok_impl.c"
        __label__ = 100; break; //@line 1143 "xmltok_impl.c"
      case 79: // $bb78
        var $286=HEAP[$enc_addr]; //@line 1143 "xmltok_impl.c"
        var $287=$286; //@line 1143 "xmltok_impl.c"
        var $288=(($287+332)&4294967295); //@line 1143 "xmltok_impl.c"
        var $289=HEAP[$288]; //@line 1143 "xmltok_impl.c"
        var $290=HEAP[$enc_addr]; //@line 1143 "xmltok_impl.c"
        var $291=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        var $292=FUNCTION_TABLE[$289]($290, $291); //@line 1143 "xmltok_impl.c"
        var $293=((($292))|0)==0; //@line 1143 "xmltok_impl.c"
        if ($293) { __label__ = 80; break; } else { __label__ = 81; break; } //@line 1143 "xmltok_impl.c"
      case 80: // $bb79
        var $294=HEAP[$nextTokPtr_addr]; //@line 1143 "xmltok_impl.c"
        var $295=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        HEAP[$294]=$295; //@line 1143 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1143 "xmltok_impl.c"
        __label__ = 100; break; //@line 1143 "xmltok_impl.c"
      case 81: // $bb80
        var $296=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        var $297=(($296+3)&4294967295); //@line 1143 "xmltok_impl.c"
        HEAP[$ptr_addr]=$297; //@line 1143 "xmltok_impl.c"
        __label__ = 98; break; //@line 1143 "xmltok_impl.c"
      case 82: // $bb81
        var $298=HEAP[$end_addr]; //@line 1143 "xmltok_impl.c"
        var $299=($298); //@line 1143 "xmltok_impl.c"
        var $300=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        var $301=($300); //@line 1143 "xmltok_impl.c"
        var $302=((($299) - ($301))&4294967295); //@line 1143 "xmltok_impl.c"
        var $303=((($302))|0) <= 3; //@line 1143 "xmltok_impl.c"
        if ($303) { __label__ = 83; break; } else { __label__ = 84; break; } //@line 1143 "xmltok_impl.c"
      case 83: // $bb82
        HEAP[$0]=-2; //@line 1143 "xmltok_impl.c"
        __label__ = 100; break; //@line 1143 "xmltok_impl.c"
      case 84: // $bb83
        var $304=HEAP[$enc_addr]; //@line 1143 "xmltok_impl.c"
        var $305=$304; //@line 1143 "xmltok_impl.c"
        var $306=(($305+336)&4294967295); //@line 1143 "xmltok_impl.c"
        var $307=HEAP[$306]; //@line 1143 "xmltok_impl.c"
        var $308=HEAP[$enc_addr]; //@line 1143 "xmltok_impl.c"
        var $309=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        var $310=FUNCTION_TABLE[$307]($308, $309); //@line 1143 "xmltok_impl.c"
        var $311=((($310))|0)==0; //@line 1143 "xmltok_impl.c"
        if ($311) { __label__ = 85; break; } else { __label__ = 86; break; } //@line 1143 "xmltok_impl.c"
      case 85: // $bb84
        var $312=HEAP[$nextTokPtr_addr]; //@line 1143 "xmltok_impl.c"
        var $313=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        HEAP[$312]=$313; //@line 1143 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1143 "xmltok_impl.c"
        __label__ = 100; break; //@line 1143 "xmltok_impl.c"
      case 86: // $bb85
        var $314=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        var $315=(($314+4)&4294967295); //@line 1143 "xmltok_impl.c"
        HEAP[$ptr_addr]=$315; //@line 1143 "xmltok_impl.c"
        __label__ = 98; break; //@line 1143 "xmltok_impl.c"
      case 87: // $bb86
        var $316=HEAP[$nextTokPtr_addr]; //@line 1147 "xmltok_impl.c"
        var $317=HEAP[$ptr_addr]; //@line 1147 "xmltok_impl.c"
        HEAP[$316]=$317; //@line 1147 "xmltok_impl.c"
        var $318=HEAP[$tok]; //@line 1148 "xmltok_impl.c"
        HEAP[$0]=$318; //@line 1148 "xmltok_impl.c"
        __label__ = 100; break; //@line 1148 "xmltok_impl.c"
      case 88: // $bb87
        var $319=HEAP[$tok]; //@line 1171 "xmltok_impl.c"
        var $320=((($319))|0)==19; //@line 1171 "xmltok_impl.c"
        if ($320) { __label__ = 89; break; } else { __label__ = 90; break; } //@line 1171 "xmltok_impl.c"
      case 89: // $bb88
        var $321=HEAP[$nextTokPtr_addr]; //@line 1172 "xmltok_impl.c"
        var $322=HEAP[$ptr_addr]; //@line 1172 "xmltok_impl.c"
        HEAP[$321]=$322; //@line 1172 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1173 "xmltok_impl.c"
        __label__ = 100; break; //@line 1173 "xmltok_impl.c"
      case 90: // $bb89
        var $323=HEAP[$ptr_addr]; //@line 1175 "xmltok_impl.c"
        var $324=(($323+1)&4294967295); //@line 1175 "xmltok_impl.c"
        var $325=HEAP[$nextTokPtr_addr]; //@line 1175 "xmltok_impl.c"
        HEAP[$325]=$324; //@line 1175 "xmltok_impl.c"
        HEAP[$0]=32; //@line 1176 "xmltok_impl.c"
        __label__ = 100; break; //@line 1176 "xmltok_impl.c"
      case 91: // $bb90
        var $326=HEAP[$tok]; //@line 1178 "xmltok_impl.c"
        var $327=((($326))|0)==19; //@line 1178 "xmltok_impl.c"
        if ($327) { __label__ = 92; break; } else { __label__ = 93; break; } //@line 1178 "xmltok_impl.c"
      case 92: // $bb91
        var $328=HEAP[$nextTokPtr_addr]; //@line 1179 "xmltok_impl.c"
        var $329=HEAP[$ptr_addr]; //@line 1179 "xmltok_impl.c"
        HEAP[$328]=$329; //@line 1179 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1180 "xmltok_impl.c"
        __label__ = 100; break; //@line 1180 "xmltok_impl.c"
      case 93: // $bb92
        var $330=HEAP[$ptr_addr]; //@line 1182 "xmltok_impl.c"
        var $331=(($330+1)&4294967295); //@line 1182 "xmltok_impl.c"
        var $332=HEAP[$nextTokPtr_addr]; //@line 1182 "xmltok_impl.c"
        HEAP[$332]=$331; //@line 1182 "xmltok_impl.c"
        HEAP[$0]=31; //@line 1183 "xmltok_impl.c"
        __label__ = 100; break; //@line 1183 "xmltok_impl.c"
      case 94: // $bb93
        var $333=HEAP[$tok]; //@line 1185 "xmltok_impl.c"
        var $334=((($333))|0)==19; //@line 1185 "xmltok_impl.c"
        if ($334) { __label__ = 95; break; } else { __label__ = 96; break; } //@line 1185 "xmltok_impl.c"
      case 95: // $bb94
        var $335=HEAP[$nextTokPtr_addr]; //@line 1186 "xmltok_impl.c"
        var $336=HEAP[$ptr_addr]; //@line 1186 "xmltok_impl.c"
        HEAP[$335]=$336; //@line 1186 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1187 "xmltok_impl.c"
        __label__ = 100; break; //@line 1187 "xmltok_impl.c"
      case 96: // $bb95
        var $337=HEAP[$ptr_addr]; //@line 1189 "xmltok_impl.c"
        var $338=(($337+1)&4294967295); //@line 1189 "xmltok_impl.c"
        var $339=HEAP[$nextTokPtr_addr]; //@line 1189 "xmltok_impl.c"
        HEAP[$339]=$338; //@line 1189 "xmltok_impl.c"
        HEAP[$0]=30; //@line 1190 "xmltok_impl.c"
        __label__ = 100; break; //@line 1190 "xmltok_impl.c"
      case 97: // $bb96
        var $340=HEAP[$nextTokPtr_addr]; //@line 1192 "xmltok_impl.c"
        var $341=HEAP[$ptr_addr]; //@line 1192 "xmltok_impl.c"
        HEAP[$340]=$341; //@line 1192 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1193 "xmltok_impl.c"
        __label__ = 100; break; //@line 1193 "xmltok_impl.c"
      case 98: // $bb97
        var $342=HEAP[$ptr_addr]; //@line 1141 "xmltok_impl.c"
        var $343=HEAP[$end_addr]; //@line 1141 "xmltok_impl.c"
        var $344=($342)!=($343); //@line 1141 "xmltok_impl.c"
        if ($344) { __label__ = 69; break; } else { __label__ = 99; break; } //@line 1141 "xmltok_impl.c"
      case 99: // $bb98
        var $345=HEAP[$tok]; //@line 1196 "xmltok_impl.c"
        var $346=((0 - ($345))&4294967295); //@line 1196 "xmltok_impl.c"
        HEAP[$0]=$346; //@line 1196 "xmltok_impl.c"
        __label__ = 100; break; //@line 1196 "xmltok_impl.c"
      case 100: // $bb99
        var $347=HEAP[$0]; //@line 974 "xmltok_impl.c"
        HEAP[$retval]=$347; //@line 974 "xmltok_impl.c"
        __label__ = 101; break; //@line 974 "xmltok_impl.c"
      case 101: // $return
        var $retval100=HEAP[$retval]; //@line 974 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval100; //@line 974 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_attributeValueTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $start=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 1204 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 1204 "xmltok_impl.c"
        var $3=($1)==($2); //@line 1204 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1204 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-4; //@line 1205 "xmltok_impl.c"
        __label__ = 27; break; //@line 1205 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$ptr_addr]; //@line 1206 "xmltok_impl.c"
        HEAP[$start]=$4; //@line 1206 "xmltok_impl.c"
        __label__ = 25; break; //@line 1206 "xmltok_impl.c"
      case 3: // $bb2
        var $5=HEAP[$enc_addr]; //@line 1208 "xmltok_impl.c"
        var $6=$5; //@line 1208 "xmltok_impl.c"
        var $7=HEAP[$ptr_addr]; //@line 1208 "xmltok_impl.c"
        var $8=HEAP[$7]; //@line 1208 "xmltok_impl.c"
        var $9=unSign(($8), 8, 0); //@line 1208 "xmltok_impl.c"
        var $10=(($6+72)&4294967295); //@line 1208 "xmltok_impl.c"
        var $11=(($10+$9)&4294967295); //@line 1208 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 1208 "xmltok_impl.c"
        var $13=unSign(($12), 8, 0); //@line 1208 "xmltok_impl.c"
        if ($13 == 2) {
          __label__ = 10; break;
        }
        else if ($13 == 3) {
          __label__ = 7; break;
        }
        else if ($13 == 5) {
          __label__ = 4; break;
        }
        else if ($13 == 6) {
          __label__ = 5; break;
        }
        else if ($13 == 7) {
          __label__ = 6; break;
        }
        else if ($13 == 9) {
          __label__ = 14; break;
        }
        else if ($13 == 10) {
          __label__ = 11; break;
        }
        else if ($13 == 21) {
          __label__ = 21; break;
        }
        else {
        __label__ = 24; break;
        }
        
      case 4: // $bb3
        var $14=HEAP[$ptr_addr]; //@line 1211 "xmltok_impl.c"
        var $15=(($14+2)&4294967295); //@line 1211 "xmltok_impl.c"
        HEAP[$ptr_addr]=$15; //@line 1211 "xmltok_impl.c"
        __label__ = 25; break; //@line 1211 "xmltok_impl.c"
      case 5: // $bb4
        var $16=HEAP[$ptr_addr]; //@line 1211 "xmltok_impl.c"
        var $17=(($16+3)&4294967295); //@line 1211 "xmltok_impl.c"
        HEAP[$ptr_addr]=$17; //@line 1211 "xmltok_impl.c"
        __label__ = 25; break; //@line 1211 "xmltok_impl.c"
      case 6: // $bb5
        var $18=HEAP[$ptr_addr]; //@line 1211 "xmltok_impl.c"
        var $19=(($18+4)&4294967295); //@line 1211 "xmltok_impl.c"
        HEAP[$ptr_addr]=$19; //@line 1211 "xmltok_impl.c"
        __label__ = 25; break; //@line 1211 "xmltok_impl.c"
      case 7: // $bb6
        var $20=HEAP[$ptr_addr]; //@line 1214 "xmltok_impl.c"
        var $21=HEAP[$start]; //@line 1214 "xmltok_impl.c"
        var $22=($20)==($21); //@line 1214 "xmltok_impl.c"
        if ($22) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1214 "xmltok_impl.c"
      case 8: // $bb7
        var $23=HEAP[$ptr_addr]; //@line 1215 "xmltok_impl.c"
        var $24=(($23+1)&4294967295); //@line 1215 "xmltok_impl.c"
        var $25=HEAP[$enc_addr]; //@line 1215 "xmltok_impl.c"
        var $26=HEAP[$end_addr]; //@line 1215 "xmltok_impl.c"
        var $27=HEAP[$nextTokPtr_addr]; //@line 1215 "xmltok_impl.c"
        var $28=_normal_scanRef($25, $24, $26, $27); //@line 1215 "xmltok_impl.c"
        HEAP[$0]=$28; //@line 1215 "xmltok_impl.c"
        __label__ = 27; break; //@line 1215 "xmltok_impl.c"
      case 9: // $bb8
        var $29=HEAP[$nextTokPtr_addr]; //@line 1216 "xmltok_impl.c"
        var $30=HEAP[$ptr_addr]; //@line 1216 "xmltok_impl.c"
        HEAP[$29]=$30; //@line 1216 "xmltok_impl.c"
        HEAP[$0]=6; //@line 1217 "xmltok_impl.c"
        __label__ = 27; break; //@line 1217 "xmltok_impl.c"
      case 10: // $bb9
        var $31=HEAP[$nextTokPtr_addr]; //@line 1220 "xmltok_impl.c"
        var $32=HEAP[$ptr_addr]; //@line 1220 "xmltok_impl.c"
        HEAP[$31]=$32; //@line 1220 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1221 "xmltok_impl.c"
        __label__ = 27; break; //@line 1221 "xmltok_impl.c"
      case 11: // $bb10
        var $33=HEAP[$ptr_addr]; //@line 1223 "xmltok_impl.c"
        var $34=HEAP[$start]; //@line 1223 "xmltok_impl.c"
        var $35=($33)==($34); //@line 1223 "xmltok_impl.c"
        if ($35) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1223 "xmltok_impl.c"
      case 12: // $bb11
        var $36=HEAP[$ptr_addr]; //@line 1224 "xmltok_impl.c"
        var $37=(($36+1)&4294967295); //@line 1224 "xmltok_impl.c"
        var $38=HEAP[$nextTokPtr_addr]; //@line 1224 "xmltok_impl.c"
        HEAP[$38]=$37; //@line 1224 "xmltok_impl.c"
        HEAP[$0]=7; //@line 1225 "xmltok_impl.c"
        __label__ = 27; break; //@line 1225 "xmltok_impl.c"
      case 13: // $bb12
        var $39=HEAP[$nextTokPtr_addr]; //@line 1227 "xmltok_impl.c"
        var $40=HEAP[$ptr_addr]; //@line 1227 "xmltok_impl.c"
        HEAP[$39]=$40; //@line 1227 "xmltok_impl.c"
        HEAP[$0]=6; //@line 1228 "xmltok_impl.c"
        __label__ = 27; break; //@line 1228 "xmltok_impl.c"
      case 14: // $bb13
        var $41=HEAP[$ptr_addr]; //@line 1230 "xmltok_impl.c"
        var $42=HEAP[$start]; //@line 1230 "xmltok_impl.c"
        var $43=($41)==($42); //@line 1230 "xmltok_impl.c"
        if ($43) { __label__ = 15; break; } else { __label__ = 20; break; } //@line 1230 "xmltok_impl.c"
      case 15: // $bb14
        var $44=HEAP[$ptr_addr]; //@line 1231 "xmltok_impl.c"
        var $45=(($44+1)&4294967295); //@line 1231 "xmltok_impl.c"
        HEAP[$ptr_addr]=$45; //@line 1231 "xmltok_impl.c"
        var $46=HEAP[$ptr_addr]; //@line 1232 "xmltok_impl.c"
        var $47=HEAP[$end_addr]; //@line 1232 "xmltok_impl.c"
        var $48=($46)==($47); //@line 1232 "xmltok_impl.c"
        if ($48) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 1232 "xmltok_impl.c"
      case 16: // $bb15
        HEAP[$0]=-3; //@line 1233 "xmltok_impl.c"
        __label__ = 27; break; //@line 1233 "xmltok_impl.c"
      case 17: // $bb16
        var $49=HEAP[$enc_addr]; //@line 1234 "xmltok_impl.c"
        var $50=$49; //@line 1234 "xmltok_impl.c"
        var $51=HEAP[$ptr_addr]; //@line 1234 "xmltok_impl.c"
        var $52=HEAP[$51]; //@line 1234 "xmltok_impl.c"
        var $53=unSign(($52), 8, 0); //@line 1234 "xmltok_impl.c"
        var $54=(($50+72)&4294967295); //@line 1234 "xmltok_impl.c"
        var $55=(($54+$53)&4294967295); //@line 1234 "xmltok_impl.c"
        var $56=HEAP[$55]; //@line 1234 "xmltok_impl.c"
        var $57=reSign(($56), 8, 0)==10; //@line 1234 "xmltok_impl.c"
        if ($57) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 1234 "xmltok_impl.c"
      case 18: // $bb17
        var $58=HEAP[$ptr_addr]; //@line 1235 "xmltok_impl.c"
        var $59=(($58+1)&4294967295); //@line 1235 "xmltok_impl.c"
        HEAP[$ptr_addr]=$59; //@line 1235 "xmltok_impl.c"
        __label__ = 19; break; //@line 1235 "xmltok_impl.c"
      case 19: // $bb18
        var $60=HEAP[$nextTokPtr_addr]; //@line 1236 "xmltok_impl.c"
        var $61=HEAP[$ptr_addr]; //@line 1236 "xmltok_impl.c"
        HEAP[$60]=$61; //@line 1236 "xmltok_impl.c"
        HEAP[$0]=7; //@line 1237 "xmltok_impl.c"
        __label__ = 27; break; //@line 1237 "xmltok_impl.c"
      case 20: // $bb19
        var $62=HEAP[$nextTokPtr_addr]; //@line 1239 "xmltok_impl.c"
        var $63=HEAP[$ptr_addr]; //@line 1239 "xmltok_impl.c"
        HEAP[$62]=$63; //@line 1239 "xmltok_impl.c"
        HEAP[$0]=6; //@line 1240 "xmltok_impl.c"
        __label__ = 27; break; //@line 1240 "xmltok_impl.c"
      case 21: // $bb20
        var $64=HEAP[$ptr_addr]; //@line 1242 "xmltok_impl.c"
        var $65=HEAP[$start]; //@line 1242 "xmltok_impl.c"
        var $66=($64)==($65); //@line 1242 "xmltok_impl.c"
        if ($66) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 1242 "xmltok_impl.c"
      case 22: // $bb21
        var $67=HEAP[$ptr_addr]; //@line 1243 "xmltok_impl.c"
        var $68=(($67+1)&4294967295); //@line 1243 "xmltok_impl.c"
        var $69=HEAP[$nextTokPtr_addr]; //@line 1243 "xmltok_impl.c"
        HEAP[$69]=$68; //@line 1243 "xmltok_impl.c"
        HEAP[$0]=39; //@line 1244 "xmltok_impl.c"
        __label__ = 27; break; //@line 1244 "xmltok_impl.c"
      case 23: // $bb22
        var $70=HEAP[$nextTokPtr_addr]; //@line 1246 "xmltok_impl.c"
        var $71=HEAP[$ptr_addr]; //@line 1246 "xmltok_impl.c"
        HEAP[$70]=$71; //@line 1246 "xmltok_impl.c"
        HEAP[$0]=6; //@line 1247 "xmltok_impl.c"
        __label__ = 27; break; //@line 1247 "xmltok_impl.c"
      case 24: // $bb23
        var $72=HEAP[$ptr_addr]; //@line 1249 "xmltok_impl.c"
        var $73=(($72+1)&4294967295); //@line 1249 "xmltok_impl.c"
        HEAP[$ptr_addr]=$73; //@line 1249 "xmltok_impl.c"
        __label__ = 25; break; //@line 1249 "xmltok_impl.c"
      case 25: // $bb24
        var $74=HEAP[$ptr_addr]; //@line 1207 "xmltok_impl.c"
        var $75=HEAP[$end_addr]; //@line 1207 "xmltok_impl.c"
        var $76=($74)!=($75); //@line 1207 "xmltok_impl.c"
        if ($76) { __label__ = 3; break; } else { __label__ = 26; break; } //@line 1207 "xmltok_impl.c"
      case 26: // $bb25
        var $77=HEAP[$nextTokPtr_addr]; //@line 1253 "xmltok_impl.c"
        var $78=HEAP[$ptr_addr]; //@line 1253 "xmltok_impl.c"
        HEAP[$77]=$78; //@line 1253 "xmltok_impl.c"
        HEAP[$0]=6; //@line 1254 "xmltok_impl.c"
        __label__ = 27; break; //@line 1254 "xmltok_impl.c"
      case 27: // $bb26
        var $79=HEAP[$0]; //@line 1205 "xmltok_impl.c"
        HEAP[$retval]=$79; //@line 1205 "xmltok_impl.c"
        __label__ = 28; break; //@line 1205 "xmltok_impl.c"
      case 28: // $return
        var $retval27=HEAP[$retval]; //@line 1205 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval27; //@line 1205 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_entityValueTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_409=__stackBase__+20;
        var $0=__stackBase__+24;
        var $start=__stackBase__+28;
        var $tok=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 1262 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 1262 "xmltok_impl.c"
        var $3=($1)==($2); //@line 1262 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1262 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-4; //@line 1263 "xmltok_impl.c"
        __label__ = 29; break; //@line 1263 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$ptr_addr]; //@line 1264 "xmltok_impl.c"
        HEAP[$start]=$4; //@line 1264 "xmltok_impl.c"
        __label__ = 27; break; //@line 1264 "xmltok_impl.c"
      case 3: // $bb2
        var $5=HEAP[$enc_addr]; //@line 1266 "xmltok_impl.c"
        var $6=$5; //@line 1266 "xmltok_impl.c"
        var $7=HEAP[$ptr_addr]; //@line 1266 "xmltok_impl.c"
        var $8=HEAP[$7]; //@line 1266 "xmltok_impl.c"
        var $9=unSign(($8), 8, 0); //@line 1266 "xmltok_impl.c"
        var $10=(($6+72)&4294967295); //@line 1266 "xmltok_impl.c"
        var $11=(($10+$9)&4294967295); //@line 1266 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 1266 "xmltok_impl.c"
        var $13=unSign(($12), 8, 0); //@line 1266 "xmltok_impl.c"
        if ($13 == 3) {
          __label__ = 7; break;
        }
        else if ($13 == 5) {
          __label__ = 4; break;
        }
        else if ($13 == 6) {
          __label__ = 5; break;
        }
        else if ($13 == 7) {
          __label__ = 6; break;
        }
        else if ($13 == 9) {
          __label__ = 19; break;
        }
        else if ($13 == 10) {
          __label__ = 16; break;
        }
        else if ($13 == 30) {
          __label__ = 10; break;
        }
        else {
        __label__ = 26; break;
        }
        
      case 4: // $bb3
        var $14=HEAP[$ptr_addr]; //@line 1269 "xmltok_impl.c"
        var $15=(($14+2)&4294967295); //@line 1269 "xmltok_impl.c"
        HEAP[$ptr_addr]=$15; //@line 1269 "xmltok_impl.c"
        __label__ = 27; break; //@line 1269 "xmltok_impl.c"
      case 5: // $bb4
        var $16=HEAP[$ptr_addr]; //@line 1269 "xmltok_impl.c"
        var $17=(($16+3)&4294967295); //@line 1269 "xmltok_impl.c"
        HEAP[$ptr_addr]=$17; //@line 1269 "xmltok_impl.c"
        __label__ = 27; break; //@line 1269 "xmltok_impl.c"
      case 6: // $bb5
        var $18=HEAP[$ptr_addr]; //@line 1269 "xmltok_impl.c"
        var $19=(($18+4)&4294967295); //@line 1269 "xmltok_impl.c"
        HEAP[$ptr_addr]=$19; //@line 1269 "xmltok_impl.c"
        __label__ = 27; break; //@line 1269 "xmltok_impl.c"
      case 7: // $bb6
        var $20=HEAP[$ptr_addr]; //@line 1272 "xmltok_impl.c"
        var $21=HEAP[$start]; //@line 1272 "xmltok_impl.c"
        var $22=($20)==($21); //@line 1272 "xmltok_impl.c"
        if ($22) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1272 "xmltok_impl.c"
      case 8: // $bb7
        var $23=HEAP[$ptr_addr]; //@line 1273 "xmltok_impl.c"
        var $24=(($23+1)&4294967295); //@line 1273 "xmltok_impl.c"
        var $25=HEAP[$enc_addr]; //@line 1273 "xmltok_impl.c"
        var $26=HEAP[$end_addr]; //@line 1273 "xmltok_impl.c"
        var $27=HEAP[$nextTokPtr_addr]; //@line 1273 "xmltok_impl.c"
        var $28=_normal_scanRef($25, $24, $26, $27); //@line 1273 "xmltok_impl.c"
        HEAP[$0]=$28; //@line 1273 "xmltok_impl.c"
        __label__ = 29; break; //@line 1273 "xmltok_impl.c"
      case 9: // $bb8
        var $29=HEAP[$nextTokPtr_addr]; //@line 1274 "xmltok_impl.c"
        var $30=HEAP[$ptr_addr]; //@line 1274 "xmltok_impl.c"
        HEAP[$29]=$30; //@line 1274 "xmltok_impl.c"
        HEAP[$0]=6; //@line 1275 "xmltok_impl.c"
        __label__ = 29; break; //@line 1275 "xmltok_impl.c"
      case 10: // $bb9
        var $31=HEAP[$ptr_addr]; //@line 1277 "xmltok_impl.c"
        var $32=HEAP[$start]; //@line 1277 "xmltok_impl.c"
        var $33=($31)==($32); //@line 1277 "xmltok_impl.c"
        if ($33) { __label__ = 11; break; } else { __label__ = 15; break; } //@line 1277 "xmltok_impl.c"
      case 11: // $bb10
        var $34=HEAP[$ptr_addr]; //@line 1279 "xmltok_impl.c"
        var $35=(($34+1)&4294967295); //@line 1279 "xmltok_impl.c"
        var $36=HEAP[$enc_addr]; //@line 1279 "xmltok_impl.c"
        var $37=HEAP[$end_addr]; //@line 1279 "xmltok_impl.c"
        var $38=HEAP[$nextTokPtr_addr]; //@line 1279 "xmltok_impl.c"
        var $39=_normal_scanPercent($36, $35, $37, $38); //@line 1279 "xmltok_impl.c"
        HEAP[$tok]=$39; //@line 1279 "xmltok_impl.c"
        var $40=HEAP[$tok]; //@line 1280 "xmltok_impl.c"
        var $41=((($40))|0)!=22; //@line 1280 "xmltok_impl.c"
        if ($41) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1280 "xmltok_impl.c"
      case 12: // $bb11
        var $42=HEAP[$tok]; //@line 1280 "xmltok_impl.c"
        HEAP[$iftmp_409]=$42; //@line 1280 "xmltok_impl.c"
        __label__ = 14; break; //@line 1280 "xmltok_impl.c"
      case 13: // $bb12
        HEAP[$iftmp_409]=0; //@line 1280 "xmltok_impl.c"
        __label__ = 14; break; //@line 1280 "xmltok_impl.c"
      case 14: // $bb13
        var $43=HEAP[$iftmp_409]; //@line 1280 "xmltok_impl.c"
        HEAP[$0]=$43; //@line 1280 "xmltok_impl.c"
        __label__ = 29; break; //@line 1280 "xmltok_impl.c"
      case 15: // $bb14
        var $44=HEAP[$nextTokPtr_addr]; //@line 1282 "xmltok_impl.c"
        var $45=HEAP[$ptr_addr]; //@line 1282 "xmltok_impl.c"
        HEAP[$44]=$45; //@line 1282 "xmltok_impl.c"
        HEAP[$0]=6; //@line 1283 "xmltok_impl.c"
        __label__ = 29; break; //@line 1283 "xmltok_impl.c"
      case 16: // $bb15
        var $46=HEAP[$ptr_addr]; //@line 1285 "xmltok_impl.c"
        var $47=HEAP[$start]; //@line 1285 "xmltok_impl.c"
        var $48=($46)==($47); //@line 1285 "xmltok_impl.c"
        if ($48) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 1285 "xmltok_impl.c"
      case 17: // $bb16
        var $49=HEAP[$ptr_addr]; //@line 1286 "xmltok_impl.c"
        var $50=(($49+1)&4294967295); //@line 1286 "xmltok_impl.c"
        var $51=HEAP[$nextTokPtr_addr]; //@line 1286 "xmltok_impl.c"
        HEAP[$51]=$50; //@line 1286 "xmltok_impl.c"
        HEAP[$0]=7; //@line 1287 "xmltok_impl.c"
        __label__ = 29; break; //@line 1287 "xmltok_impl.c"
      case 18: // $bb17
        var $52=HEAP[$nextTokPtr_addr]; //@line 1289 "xmltok_impl.c"
        var $53=HEAP[$ptr_addr]; //@line 1289 "xmltok_impl.c"
        HEAP[$52]=$53; //@line 1289 "xmltok_impl.c"
        HEAP[$0]=6; //@line 1290 "xmltok_impl.c"
        __label__ = 29; break; //@line 1290 "xmltok_impl.c"
      case 19: // $bb18
        var $54=HEAP[$ptr_addr]; //@line 1292 "xmltok_impl.c"
        var $55=HEAP[$start]; //@line 1292 "xmltok_impl.c"
        var $56=($54)==($55); //@line 1292 "xmltok_impl.c"
        if ($56) { __label__ = 20; break; } else { __label__ = 25; break; } //@line 1292 "xmltok_impl.c"
      case 20: // $bb19
        var $57=HEAP[$ptr_addr]; //@line 1293 "xmltok_impl.c"
        var $58=(($57+1)&4294967295); //@line 1293 "xmltok_impl.c"
        HEAP[$ptr_addr]=$58; //@line 1293 "xmltok_impl.c"
        var $59=HEAP[$ptr_addr]; //@line 1294 "xmltok_impl.c"
        var $60=HEAP[$end_addr]; //@line 1294 "xmltok_impl.c"
        var $61=($59)==($60); //@line 1294 "xmltok_impl.c"
        if ($61) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 1294 "xmltok_impl.c"
      case 21: // $bb20
        HEAP[$0]=-3; //@line 1295 "xmltok_impl.c"
        __label__ = 29; break; //@line 1295 "xmltok_impl.c"
      case 22: // $bb21
        var $62=HEAP[$enc_addr]; //@line 1296 "xmltok_impl.c"
        var $63=$62; //@line 1296 "xmltok_impl.c"
        var $64=HEAP[$ptr_addr]; //@line 1296 "xmltok_impl.c"
        var $65=HEAP[$64]; //@line 1296 "xmltok_impl.c"
        var $66=unSign(($65), 8, 0); //@line 1296 "xmltok_impl.c"
        var $67=(($63+72)&4294967295); //@line 1296 "xmltok_impl.c"
        var $68=(($67+$66)&4294967295); //@line 1296 "xmltok_impl.c"
        var $69=HEAP[$68]; //@line 1296 "xmltok_impl.c"
        var $70=reSign(($69), 8, 0)==10; //@line 1296 "xmltok_impl.c"
        if ($70) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 1296 "xmltok_impl.c"
      case 23: // $bb22
        var $71=HEAP[$ptr_addr]; //@line 1297 "xmltok_impl.c"
        var $72=(($71+1)&4294967295); //@line 1297 "xmltok_impl.c"
        HEAP[$ptr_addr]=$72; //@line 1297 "xmltok_impl.c"
        __label__ = 24; break; //@line 1297 "xmltok_impl.c"
      case 24: // $bb23
        var $73=HEAP[$nextTokPtr_addr]; //@line 1298 "xmltok_impl.c"
        var $74=HEAP[$ptr_addr]; //@line 1298 "xmltok_impl.c"
        HEAP[$73]=$74; //@line 1298 "xmltok_impl.c"
        HEAP[$0]=7; //@line 1299 "xmltok_impl.c"
        __label__ = 29; break; //@line 1299 "xmltok_impl.c"
      case 25: // $bb24
        var $75=HEAP[$nextTokPtr_addr]; //@line 1301 "xmltok_impl.c"
        var $76=HEAP[$ptr_addr]; //@line 1301 "xmltok_impl.c"
        HEAP[$75]=$76; //@line 1301 "xmltok_impl.c"
        HEAP[$0]=6; //@line 1302 "xmltok_impl.c"
        __label__ = 29; break; //@line 1302 "xmltok_impl.c"
      case 26: // $bb25
        var $77=HEAP[$ptr_addr]; //@line 1304 "xmltok_impl.c"
        var $78=(($77+1)&4294967295); //@line 1304 "xmltok_impl.c"
        HEAP[$ptr_addr]=$78; //@line 1304 "xmltok_impl.c"
        __label__ = 27; break; //@line 1304 "xmltok_impl.c"
      case 27: // $bb26
        var $79=HEAP[$ptr_addr]; //@line 1265 "xmltok_impl.c"
        var $80=HEAP[$end_addr]; //@line 1265 "xmltok_impl.c"
        var $81=($79)!=($80); //@line 1265 "xmltok_impl.c"
        if ($81) { __label__ = 3; break; } else { __label__ = 28; break; } //@line 1265 "xmltok_impl.c"
      case 28: // $bb27
        var $82=HEAP[$nextTokPtr_addr]; //@line 1308 "xmltok_impl.c"
        var $83=HEAP[$ptr_addr]; //@line 1308 "xmltok_impl.c"
        HEAP[$82]=$83; //@line 1308 "xmltok_impl.c"
        HEAP[$0]=6; //@line 1309 "xmltok_impl.c"
        __label__ = 29; break; //@line 1309 "xmltok_impl.c"
      case 29: // $bb28
        var $84=HEAP[$0]; //@line 1263 "xmltok_impl.c"
        HEAP[$retval]=$84; //@line 1263 "xmltok_impl.c"
        __label__ = 30; break; //@line 1263 "xmltok_impl.c"
      case 30: // $return
        var $retval29=HEAP[$retval]; //@line 1263 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval29; //@line 1263 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_isPublicId($enc, $ptr, $end, $badPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $badPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$badPtr_addr]=$badPtr;
        var $1=HEAP[$ptr_addr]; //@line 1371 "xmltok_impl.c"
        var $2=(($1+1)&4294967295); //@line 1371 "xmltok_impl.c"
        HEAP[$ptr_addr]=$2; //@line 1371 "xmltok_impl.c"
        var $3=HEAP[$end_addr]; //@line 1372 "xmltok_impl.c"
        var $4=(($3+-1)&4294967295); //@line 1372 "xmltok_impl.c"
        HEAP[$end_addr]=$4; //@line 1372 "xmltok_impl.c"
        __label__ = 11; break; //@line 1372 "xmltok_impl.c"
      case 1: // $bb
        var $5=HEAP[$enc_addr]; //@line 1374 "xmltok_impl.c"
        var $6=$5; //@line 1374 "xmltok_impl.c"
        var $7=HEAP[$ptr_addr]; //@line 1374 "xmltok_impl.c"
        var $8=HEAP[$7]; //@line 1374 "xmltok_impl.c"
        var $9=unSign(($8), 8, 0); //@line 1374 "xmltok_impl.c"
        var $10=(($6+72)&4294967295); //@line 1374 "xmltok_impl.c"
        var $11=(($10+$9)&4294967295); //@line 1374 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 1374 "xmltok_impl.c"
        var $13=unSign(($12), 8, 0); //@line 1374 "xmltok_impl.c"
        if ($13 == 9) {
          __label__ = 2; break;
        }
        else if ($13 == 10) {
          __label__ = 2; break;
        }
        else if ($13 == 13) {
          __label__ = 2; break;
        }
        else if ($13 == 14) {
          __label__ = 2; break;
        }
        else if ($13 == 15) {
          __label__ = 2; break;
        }
        else if ($13 == 16) {
          __label__ = 2; break;
        }
        else if ($13 == 17) {
          __label__ = 2; break;
        }
        else if ($13 == 18) {
          __label__ = 2; break;
        }
        else if ($13 == 19) {
          __label__ = 2; break;
        }
        else if ($13 == 21) {
          __label__ = 3; break;
        }
        else if ($13 == 22) {
          __label__ = 6; break;
        }
        else if ($13 == 24) {
          __label__ = 2; break;
        }
        else if ($13 == 25) {
          __label__ = 2; break;
        }
        else if ($13 == 26) {
          __label__ = 6; break;
        }
        else if ($13 == 27) {
          __label__ = 2; break;
        }
        else if ($13 == 30) {
          __label__ = 2; break;
        }
        else if ($13 == 31) {
          __label__ = 2; break;
        }
        else if ($13 == 32) {
          __label__ = 2; break;
        }
        else if ($13 == 33) {
          __label__ = 2; break;
        }
        else if ($13 == 34) {
          __label__ = 2; break;
        }
        else if ($13 == 35) {
          __label__ = 2; break;
        }
        else {
        __label__ = 7; break;
        }
        
      case 2: // $bb1
        __label__ = 10; break; //@line 1374 "xmltok_impl.c"
      case 3: // $bb2
        var $14=HEAP[$ptr_addr]; //@line 1398 "xmltok_impl.c"
        var $15=HEAP[$14]; //@line 1398 "xmltok_impl.c"
        var $16=reSign(($15), 8, 0)==9; //@line 1398 "xmltok_impl.c"
        if ($16) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1398 "xmltok_impl.c"
      case 4: // $bb3
        var $17=HEAP[$badPtr_addr]; //@line 1399 "xmltok_impl.c"
        var $18=HEAP[$ptr_addr]; //@line 1399 "xmltok_impl.c"
        HEAP[$17]=$18; //@line 1399 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1400 "xmltok_impl.c"
        __label__ = 13; break; //@line 1400 "xmltok_impl.c"
      case 5: // $bb4
        __label__ = 10; break; //@line 1400 "xmltok_impl.c"
      case 6: // $bb5
        var $19=HEAP[$ptr_addr]; //@line 1405 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 1405 "xmltok_impl.c"
        var $21=reSign(($20), 8, 0) >= 0; //@line 1405 "xmltok_impl.c"
        if ($21) { __label__ = 10; break; } else { __label__ = 7; break; } //@line 1405 "xmltok_impl.c"
      case 7: // $bb6
        var $22=HEAP[$ptr_addr]; //@line 1408 "xmltok_impl.c"
        var $23=HEAP[$22]; //@line 1408 "xmltok_impl.c"
        var $24=reSign(($23), 8, 0); //@line 1408 "xmltok_impl.c"
        if ($24 == 36) {
          __label__ = 8; break;
        }
        else if ($24 == 64) {
          __label__ = 8; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 8: // $bb7
        __label__ = 10; break; //@line 1408 "xmltok_impl.c"
      case 9: // $bb8
        var $25=HEAP[$badPtr_addr]; //@line 1413 "xmltok_impl.c"
        var $26=HEAP[$ptr_addr]; //@line 1413 "xmltok_impl.c"
        HEAP[$25]=$26; //@line 1413 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1414 "xmltok_impl.c"
        __label__ = 13; break; //@line 1414 "xmltok_impl.c"
      case 10: // $bb9
        var $27=HEAP[$ptr_addr]; //@line 1373 "xmltok_impl.c"
        var $28=(($27+1)&4294967295); //@line 1373 "xmltok_impl.c"
        HEAP[$ptr_addr]=$28; //@line 1373 "xmltok_impl.c"
        __label__ = 11; break; //@line 1373 "xmltok_impl.c"
      case 11: // $bb10
        var $29=HEAP[$ptr_addr]; //@line 1373 "xmltok_impl.c"
        var $30=HEAP[$end_addr]; //@line 1373 "xmltok_impl.c"
        var $31=($29)!=($30); //@line 1373 "xmltok_impl.c"
        if ($31) { __label__ = 1; break; } else { __label__ = 12; break; } //@line 1373 "xmltok_impl.c"
      case 12: // $bb11
        HEAP[$0]=1; //@line 1419 "xmltok_impl.c"
        __label__ = 13; break; //@line 1419 "xmltok_impl.c"
      case 13: // $bb12
        var $32=HEAP[$0]; //@line 1400 "xmltok_impl.c"
        HEAP[$retval]=$32; //@line 1400 "xmltok_impl.c"
        __label__ = 14; break; //@line 1400 "xmltok_impl.c"
      case 14: // $return
        var $retval13=HEAP[$retval]; //@line 1400 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 1400 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_getAtts($enc, $ptr, $attsMax, $atts) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $attsMax_addr=__stackBase__+8;
        var $atts_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $state=__stackBase__+24;
        var $nAtts=__stackBase__+28;
        var $open=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$attsMax_addr]=$attsMax;
        HEAP[$atts_addr]=$atts;
        HEAP[$state]=1; //@line 1431 "xmltok_impl.c"
        HEAP[$nAtts]=0; //@line 1432 "xmltok_impl.c"
        HEAP[$open]=0; //@line 1433 "xmltok_impl.c"
        var $1=HEAP[$ptr_addr]; //@line 1436 "xmltok_impl.c"
        var $2=(($1+1)&4294967295); //@line 1436 "xmltok_impl.c"
        HEAP[$ptr_addr]=$2; //@line 1436 "xmltok_impl.c"
        __label__ = 1; break; //@line 1436 "xmltok_impl.c"
      case 1: // $bb
        var $3=HEAP[$enc_addr]; //@line 1437 "xmltok_impl.c"
        var $4=$3; //@line 1437 "xmltok_impl.c"
        var $5=HEAP[$ptr_addr]; //@line 1437 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 1437 "xmltok_impl.c"
        var $7=unSign(($6), 8, 0); //@line 1437 "xmltok_impl.c"
        var $8=(($4+72)&4294967295); //@line 1437 "xmltok_impl.c"
        var $9=(($8+$7)&4294967295); //@line 1437 "xmltok_impl.c"
        var $10=HEAP[$9]; //@line 1437 "xmltok_impl.c"
        var $11=unSign(($10), 8, 0); //@line 1437 "xmltok_impl.c"
        if ($11 == 3) {
          __label__ = 40; break;
        }
        else if ($11 == 5) {
          __label__ = 2; break;
        }
        else if ($11 == 6) {
          __label__ = 7; break;
        }
        else if ($11 == 7) {
          __label__ = 12; break;
        }
        else if ($11 == 9) {
          __label__ = 54; break;
        }
        else if ($11 == 10) {
          __label__ = 54; break;
        }
        else if ($11 == 11) {
          __label__ = 60; break;
        }
        else if ($11 == 12) {
          __label__ = 22; break;
        }
        else if ($11 == 13) {
          __label__ = 31; break;
        }
        else if ($11 == 17) {
          __label__ = 60; break;
        }
        else if ($11 == 21) {
          __label__ = 43; break;
        }
        else if ($11 == 22) {
          __label__ = 17; break;
        }
        else if ($11 == 24) {
          __label__ = 17; break;
        }
        else if ($11 == 29) {
          __label__ = 17; break;
        }
        else {
        __label__ = 62; break;
        }
        
      case 2: // $bb1
        var $12=HEAP[$state]; //@line 1448 "xmltok_impl.c"
        var $13=((($12))|0)==0; //@line 1448 "xmltok_impl.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 1448 "xmltok_impl.c"
      case 3: // $bb2
        var $14=HEAP[$nAtts]; //@line 1448 "xmltok_impl.c"
        var $15=HEAP[$attsMax_addr]; //@line 1448 "xmltok_impl.c"
        var $16=((($14))|0) < ((($15))|0); //@line 1448 "xmltok_impl.c"
        if ($16) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1448 "xmltok_impl.c"
      case 4: // $bb3
        var $17=HEAP[$atts_addr]; //@line 1448 "xmltok_impl.c"
        var $18=HEAP[$nAtts]; //@line 1448 "xmltok_impl.c"
        var $19=(($17+16*$18)&4294967295); //@line 1448 "xmltok_impl.c"
        var $20=(($19)&4294967295); //@line 1448 "xmltok_impl.c"
        var $21=HEAP[$ptr_addr]; //@line 1448 "xmltok_impl.c"
        HEAP[$20]=$21; //@line 1448 "xmltok_impl.c"
        var $22=HEAP[$atts_addr]; //@line 1448 "xmltok_impl.c"
        var $23=HEAP[$nAtts]; //@line 1448 "xmltok_impl.c"
        var $24=(($22+16*$23)&4294967295); //@line 1448 "xmltok_impl.c"
        var $25=(($24+12)&4294967295); //@line 1448 "xmltok_impl.c"
        HEAP[$25]=1; //@line 1448 "xmltok_impl.c"
        __label__ = 5; break; //@line 1448 "xmltok_impl.c"
      case 5: // $bb4
        HEAP[$state]=1; //@line 1448 "xmltok_impl.c"
        __label__ = 6; break; //@line 1448 "xmltok_impl.c"
      case 6: // $bb5
        var $26=HEAP[$ptr_addr]; //@line 1448 "xmltok_impl.c"
        var $27=(($26+1)&4294967295); //@line 1448 "xmltok_impl.c"
        HEAP[$ptr_addr]=$27; //@line 1448 "xmltok_impl.c"
        __label__ = 62; break; //@line 1448 "xmltok_impl.c"
      case 7: // $bb6
        var $28=HEAP[$state]; //@line 1448 "xmltok_impl.c"
        var $29=((($28))|0)==0; //@line 1448 "xmltok_impl.c"
        if ($29) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 1448 "xmltok_impl.c"
      case 8: // $bb7
        var $30=HEAP[$nAtts]; //@line 1448 "xmltok_impl.c"
        var $31=HEAP[$attsMax_addr]; //@line 1448 "xmltok_impl.c"
        var $32=((($30))|0) < ((($31))|0); //@line 1448 "xmltok_impl.c"
        if ($32) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1448 "xmltok_impl.c"
      case 9: // $bb8
        var $33=HEAP[$atts_addr]; //@line 1448 "xmltok_impl.c"
        var $34=HEAP[$nAtts]; //@line 1448 "xmltok_impl.c"
        var $35=(($33+16*$34)&4294967295); //@line 1448 "xmltok_impl.c"
        var $36=(($35)&4294967295); //@line 1448 "xmltok_impl.c"
        var $37=HEAP[$ptr_addr]; //@line 1448 "xmltok_impl.c"
        HEAP[$36]=$37; //@line 1448 "xmltok_impl.c"
        var $38=HEAP[$atts_addr]; //@line 1448 "xmltok_impl.c"
        var $39=HEAP[$nAtts]; //@line 1448 "xmltok_impl.c"
        var $40=(($38+16*$39)&4294967295); //@line 1448 "xmltok_impl.c"
        var $41=(($40+12)&4294967295); //@line 1448 "xmltok_impl.c"
        HEAP[$41]=1; //@line 1448 "xmltok_impl.c"
        __label__ = 10; break; //@line 1448 "xmltok_impl.c"
      case 10: // $bb9
        HEAP[$state]=1; //@line 1448 "xmltok_impl.c"
        __label__ = 11; break; //@line 1448 "xmltok_impl.c"
      case 11: // $bb10
        var $42=HEAP[$ptr_addr]; //@line 1448 "xmltok_impl.c"
        var $43=(($42+2)&4294967295); //@line 1448 "xmltok_impl.c"
        HEAP[$ptr_addr]=$43; //@line 1448 "xmltok_impl.c"
        __label__ = 62; break; //@line 1448 "xmltok_impl.c"
      case 12: // $bb11
        var $44=HEAP[$state]; //@line 1448 "xmltok_impl.c"
        var $45=((($44))|0)==0; //@line 1448 "xmltok_impl.c"
        if ($45) { __label__ = 13; break; } else { __label__ = 16; break; } //@line 1448 "xmltok_impl.c"
      case 13: // $bb12
        var $46=HEAP[$nAtts]; //@line 1448 "xmltok_impl.c"
        var $47=HEAP[$attsMax_addr]; //@line 1448 "xmltok_impl.c"
        var $48=((($46))|0) < ((($47))|0); //@line 1448 "xmltok_impl.c"
        if ($48) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1448 "xmltok_impl.c"
      case 14: // $bb13
        var $49=HEAP[$atts_addr]; //@line 1448 "xmltok_impl.c"
        var $50=HEAP[$nAtts]; //@line 1448 "xmltok_impl.c"
        var $51=(($49+16*$50)&4294967295); //@line 1448 "xmltok_impl.c"
        var $52=(($51)&4294967295); //@line 1448 "xmltok_impl.c"
        var $53=HEAP[$ptr_addr]; //@line 1448 "xmltok_impl.c"
        HEAP[$52]=$53; //@line 1448 "xmltok_impl.c"
        var $54=HEAP[$atts_addr]; //@line 1448 "xmltok_impl.c"
        var $55=HEAP[$nAtts]; //@line 1448 "xmltok_impl.c"
        var $56=(($54+16*$55)&4294967295); //@line 1448 "xmltok_impl.c"
        var $57=(($56+12)&4294967295); //@line 1448 "xmltok_impl.c"
        HEAP[$57]=1; //@line 1448 "xmltok_impl.c"
        __label__ = 15; break; //@line 1448 "xmltok_impl.c"
      case 15: // $bb14
        HEAP[$state]=1; //@line 1448 "xmltok_impl.c"
        __label__ = 16; break; //@line 1448 "xmltok_impl.c"
      case 16: // $bb15
        var $58=HEAP[$ptr_addr]; //@line 1448 "xmltok_impl.c"
        var $59=(($58+3)&4294967295); //@line 1448 "xmltok_impl.c"
        HEAP[$ptr_addr]=$59; //@line 1448 "xmltok_impl.c"
        __label__ = 62; break; //@line 1448 "xmltok_impl.c"
      case 17: // $bb16
        var $60=HEAP[$state]; //@line 1453 "xmltok_impl.c"
        var $61=((($60))|0)==0; //@line 1453 "xmltok_impl.c"
        if ($61) { __label__ = 18; break; } else { __label__ = 21; break; } //@line 1453 "xmltok_impl.c"
      case 18: // $bb17
        var $62=HEAP[$nAtts]; //@line 1453 "xmltok_impl.c"
        var $63=HEAP[$attsMax_addr]; //@line 1453 "xmltok_impl.c"
        var $64=((($62))|0) < ((($63))|0); //@line 1453 "xmltok_impl.c"
        if ($64) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 1453 "xmltok_impl.c"
      case 19: // $bb18
        var $65=HEAP[$atts_addr]; //@line 1453 "xmltok_impl.c"
        var $66=HEAP[$nAtts]; //@line 1453 "xmltok_impl.c"
        var $67=(($65+16*$66)&4294967295); //@line 1453 "xmltok_impl.c"
        var $68=(($67)&4294967295); //@line 1453 "xmltok_impl.c"
        var $69=HEAP[$ptr_addr]; //@line 1453 "xmltok_impl.c"
        HEAP[$68]=$69; //@line 1453 "xmltok_impl.c"
        var $70=HEAP[$atts_addr]; //@line 1453 "xmltok_impl.c"
        var $71=HEAP[$nAtts]; //@line 1453 "xmltok_impl.c"
        var $72=(($70+16*$71)&4294967295); //@line 1453 "xmltok_impl.c"
        var $73=(($72+12)&4294967295); //@line 1453 "xmltok_impl.c"
        HEAP[$73]=1; //@line 1453 "xmltok_impl.c"
        __label__ = 20; break; //@line 1453 "xmltok_impl.c"
      case 20: // $bb19
        HEAP[$state]=1; //@line 1453 "xmltok_impl.c"
        __label__ = 21; break; //@line 1453 "xmltok_impl.c"
      case 21: // $bb20
        __label__ = 62; break; //@line 1453 "xmltok_impl.c"
      case 22: // $bb21
        var $74=HEAP[$state]; //@line 1457 "xmltok_impl.c"
        var $75=((($74))|0)!=2; //@line 1457 "xmltok_impl.c"
        if ($75) { __label__ = 23; break; } else { __label__ = 26; break; } //@line 1457 "xmltok_impl.c"
      case 23: // $bb22
        var $76=HEAP[$nAtts]; //@line 1458 "xmltok_impl.c"
        var $77=HEAP[$attsMax_addr]; //@line 1458 "xmltok_impl.c"
        var $78=((($76))|0) < ((($77))|0); //@line 1458 "xmltok_impl.c"
        if ($78) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 1458 "xmltok_impl.c"
      case 24: // $bb23
        var $79=HEAP[$atts_addr]; //@line 1459 "xmltok_impl.c"
        var $80=HEAP[$nAtts]; //@line 1459 "xmltok_impl.c"
        var $81=(($79+16*$80)&4294967295); //@line 1459 "xmltok_impl.c"
        var $82=HEAP[$ptr_addr]; //@line 1459 "xmltok_impl.c"
        var $83=(($82+1)&4294967295); //@line 1459 "xmltok_impl.c"
        var $84=(($81+4)&4294967295); //@line 1459 "xmltok_impl.c"
        HEAP[$84]=$83; //@line 1459 "xmltok_impl.c"
        __label__ = 25; break; //@line 1459 "xmltok_impl.c"
      case 25: // $bb24
        HEAP[$state]=2; //@line 1460 "xmltok_impl.c"
        HEAP[$open]=12; //@line 1461 "xmltok_impl.c"
        __label__ = 30; break; //@line 1461 "xmltok_impl.c"
      case 26: // $bb25
        var $85=HEAP[$open]; //@line 1463 "xmltok_impl.c"
        var $86=((($85))|0)==12; //@line 1463 "xmltok_impl.c"
        if ($86) { __label__ = 27; break; } else { __label__ = 30; break; } //@line 1463 "xmltok_impl.c"
      case 27: // $bb26
        HEAP[$state]=0; //@line 1464 "xmltok_impl.c"
        var $87=HEAP[$nAtts]; //@line 1465 "xmltok_impl.c"
        var $88=HEAP[$attsMax_addr]; //@line 1465 "xmltok_impl.c"
        var $89=((($87))|0) < ((($88))|0); //@line 1465 "xmltok_impl.c"
        if ($89) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 1465 "xmltok_impl.c"
      case 28: // $bb27
        var $90=HEAP[$atts_addr]; //@line 1466 "xmltok_impl.c"
        var $91=HEAP[$nAtts]; //@line 1466 "xmltok_impl.c"
        var $92=(($90+16*$91)&4294967295); //@line 1466 "xmltok_impl.c"
        var $93=(($92+8)&4294967295); //@line 1466 "xmltok_impl.c"
        var $94=HEAP[$ptr_addr]; //@line 1466 "xmltok_impl.c"
        HEAP[$93]=$94; //@line 1466 "xmltok_impl.c"
        __label__ = 29; break; //@line 1466 "xmltok_impl.c"
      case 29: // $bb28
        var $95=HEAP[$nAtts]; //@line 1467 "xmltok_impl.c"
        var $96=((($95) + 1)&4294967295); //@line 1467 "xmltok_impl.c"
        HEAP[$nAtts]=$96; //@line 1467 "xmltok_impl.c"
        __label__ = 30; break; //@line 1467 "xmltok_impl.c"
      case 30: // $bb29
        __label__ = 62; break; //@line 1467 "xmltok_impl.c"
      case 31: // $bb30
        var $97=HEAP[$state]; //@line 1471 "xmltok_impl.c"
        var $98=((($97))|0)!=2; //@line 1471 "xmltok_impl.c"
        if ($98) { __label__ = 32; break; } else { __label__ = 35; break; } //@line 1471 "xmltok_impl.c"
      case 32: // $bb31
        var $99=HEAP[$nAtts]; //@line 1472 "xmltok_impl.c"
        var $100=HEAP[$attsMax_addr]; //@line 1472 "xmltok_impl.c"
        var $101=((($99))|0) < ((($100))|0); //@line 1472 "xmltok_impl.c"
        if ($101) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 1472 "xmltok_impl.c"
      case 33: // $bb32
        var $102=HEAP[$atts_addr]; //@line 1473 "xmltok_impl.c"
        var $103=HEAP[$nAtts]; //@line 1473 "xmltok_impl.c"
        var $104=(($102+16*$103)&4294967295); //@line 1473 "xmltok_impl.c"
        var $105=HEAP[$ptr_addr]; //@line 1473 "xmltok_impl.c"
        var $106=(($105+1)&4294967295); //@line 1473 "xmltok_impl.c"
        var $107=(($104+4)&4294967295); //@line 1473 "xmltok_impl.c"
        HEAP[$107]=$106; //@line 1473 "xmltok_impl.c"
        __label__ = 34; break; //@line 1473 "xmltok_impl.c"
      case 34: // $bb33
        HEAP[$state]=2; //@line 1474 "xmltok_impl.c"
        HEAP[$open]=13; //@line 1475 "xmltok_impl.c"
        __label__ = 39; break; //@line 1475 "xmltok_impl.c"
      case 35: // $bb34
        var $108=HEAP[$open]; //@line 1477 "xmltok_impl.c"
        var $109=((($108))|0)==13; //@line 1477 "xmltok_impl.c"
        if ($109) { __label__ = 36; break; } else { __label__ = 39; break; } //@line 1477 "xmltok_impl.c"
      case 36: // $bb35
        HEAP[$state]=0; //@line 1478 "xmltok_impl.c"
        var $110=HEAP[$nAtts]; //@line 1479 "xmltok_impl.c"
        var $111=HEAP[$attsMax_addr]; //@line 1479 "xmltok_impl.c"
        var $112=((($110))|0) < ((($111))|0); //@line 1479 "xmltok_impl.c"
        if ($112) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 1479 "xmltok_impl.c"
      case 37: // $bb36
        var $113=HEAP[$atts_addr]; //@line 1480 "xmltok_impl.c"
        var $114=HEAP[$nAtts]; //@line 1480 "xmltok_impl.c"
        var $115=(($113+16*$114)&4294967295); //@line 1480 "xmltok_impl.c"
        var $116=(($115+8)&4294967295); //@line 1480 "xmltok_impl.c"
        var $117=HEAP[$ptr_addr]; //@line 1480 "xmltok_impl.c"
        HEAP[$116]=$117; //@line 1480 "xmltok_impl.c"
        __label__ = 38; break; //@line 1480 "xmltok_impl.c"
      case 38: // $bb37
        var $118=HEAP[$nAtts]; //@line 1481 "xmltok_impl.c"
        var $119=((($118) + 1)&4294967295); //@line 1481 "xmltok_impl.c"
        HEAP[$nAtts]=$119; //@line 1481 "xmltok_impl.c"
        __label__ = 39; break; //@line 1481 "xmltok_impl.c"
      case 39: // $bb38
        __label__ = 62; break; //@line 1481 "xmltok_impl.c"
      case 40: // $bb39
        var $120=HEAP[$nAtts]; //@line 1485 "xmltok_impl.c"
        var $121=HEAP[$attsMax_addr]; //@line 1485 "xmltok_impl.c"
        var $122=((($120))|0) < ((($121))|0); //@line 1485 "xmltok_impl.c"
        if ($122) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 1485 "xmltok_impl.c"
      case 41: // $bb40
        var $123=HEAP[$atts_addr]; //@line 1486 "xmltok_impl.c"
        var $124=HEAP[$nAtts]; //@line 1486 "xmltok_impl.c"
        var $125=(($123+16*$124)&4294967295); //@line 1486 "xmltok_impl.c"
        var $126=(($125+12)&4294967295); //@line 1486 "xmltok_impl.c"
        HEAP[$126]=0; //@line 1486 "xmltok_impl.c"
        __label__ = 42; break; //@line 1486 "xmltok_impl.c"
      case 42: // $bb41
        __label__ = 62; break; //@line 1486 "xmltok_impl.c"
      case 43: // $bb42
        var $127=HEAP[$state]; //@line 1489 "xmltok_impl.c"
        var $128=((($127))|0)==1; //@line 1489 "xmltok_impl.c"
        if ($128) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 1489 "xmltok_impl.c"
      case 44: // $bb43
        HEAP[$state]=0; //@line 1490 "xmltok_impl.c"
        __label__ = 53; break; //@line 1490 "xmltok_impl.c"
      case 45: // $bb44
        var $129=HEAP[$state]; //@line 1491 "xmltok_impl.c"
        var $130=((($129))|0)==2; //@line 1491 "xmltok_impl.c"
        if ($130) { __label__ = 46; break; } else { __label__ = 53; break; } //@line 1491 "xmltok_impl.c"
      case 46: // $bb45
        var $131=HEAP[$nAtts]; //@line 1491 "xmltok_impl.c"
        var $132=HEAP[$attsMax_addr]; //@line 1491 "xmltok_impl.c"
        var $133=((($131))|0) < ((($132))|0); //@line 1491 "xmltok_impl.c"
        if ($133) { __label__ = 47; break; } else { __label__ = 53; break; } //@line 1491 "xmltok_impl.c"
      case 47: // $bb46
        var $134=HEAP[$atts_addr]; //@line 1491 "xmltok_impl.c"
        var $135=HEAP[$nAtts]; //@line 1491 "xmltok_impl.c"
        var $136=(($134+16*$135)&4294967295); //@line 1491 "xmltok_impl.c"
        var $137=(($136+12)&4294967295); //@line 1491 "xmltok_impl.c"
        var $138=HEAP[$137]; //@line 1491 "xmltok_impl.c"
        var $139=reSign(($138), 8, 0)!=0; //@line 1491 "xmltok_impl.c"
        if ($139) { __label__ = 48; break; } else { __label__ = 53; break; } //@line 1491 "xmltok_impl.c"
      case 48: // $bb47
        var $140=HEAP[$atts_addr]; //@line 1491 "xmltok_impl.c"
        var $141=HEAP[$nAtts]; //@line 1491 "xmltok_impl.c"
        var $142=(($140+16*$141)&4294967295); //@line 1491 "xmltok_impl.c"
        var $143=(($142+4)&4294967295); //@line 1491 "xmltok_impl.c"
        var $144=HEAP[$143]; //@line 1491 "xmltok_impl.c"
        var $145=HEAP[$ptr_addr]; //@line 1491 "xmltok_impl.c"
        var $146=($144)==($145); //@line 1491 "xmltok_impl.c"
        if ($146) { __label__ = 52; break; } else { __label__ = 49; break; } //@line 1491 "xmltok_impl.c"
      case 49: // $bb48
        var $147=HEAP[$ptr_addr]; //@line 1491 "xmltok_impl.c"
        var $148=HEAP[$147]; //@line 1491 "xmltok_impl.c"
        var $149=reSign(($148), 8, 0)!=32; //@line 1491 "xmltok_impl.c"
        if ($149) { __label__ = 52; break; } else { __label__ = 50; break; } //@line 1491 "xmltok_impl.c"
      case 50: // $bb49
        var $150=HEAP[$ptr_addr]; //@line 1491 "xmltok_impl.c"
        var $151=(($150+1)&4294967295); //@line 1491 "xmltok_impl.c"
        var $152=HEAP[$151]; //@line 1491 "xmltok_impl.c"
        var $153=reSign(($152), 8, 0)==32; //@line 1491 "xmltok_impl.c"
        if ($153) { __label__ = 52; break; } else { __label__ = 51; break; } //@line 1491 "xmltok_impl.c"
      case 51: // $bb50
        var $154=HEAP[$enc_addr]; //@line 1491 "xmltok_impl.c"
        var $155=$154; //@line 1491 "xmltok_impl.c"
        var $156=HEAP[$ptr_addr]; //@line 1491 "xmltok_impl.c"
        var $157=(($156+1)&4294967295); //@line 1491 "xmltok_impl.c"
        var $158=HEAP[$157]; //@line 1491 "xmltok_impl.c"
        var $159=unSign(($158), 8, 0); //@line 1491 "xmltok_impl.c"
        var $160=(($155+72)&4294967295); //@line 1491 "xmltok_impl.c"
        var $161=(($160+$159)&4294967295); //@line 1491 "xmltok_impl.c"
        var $162=HEAP[$161]; //@line 1491 "xmltok_impl.c"
        var $163=unSign(($162), 8, 0); //@line 1491 "xmltok_impl.c"
        var $164=HEAP[$open]; //@line 1491 "xmltok_impl.c"
        var $165=((($163))|0)==((($164))|0); //@line 1491 "xmltok_impl.c"
        if ($165) { __label__ = 52; break; } else { __label__ = 53; break; } //@line 1491 "xmltok_impl.c"
      case 52: // $bb51
        var $166=HEAP[$atts_addr]; //@line 1498 "xmltok_impl.c"
        var $167=HEAP[$nAtts]; //@line 1498 "xmltok_impl.c"
        var $168=(($166+16*$167)&4294967295); //@line 1498 "xmltok_impl.c"
        var $169=(($168+12)&4294967295); //@line 1498 "xmltok_impl.c"
        HEAP[$169]=0; //@line 1498 "xmltok_impl.c"
        __label__ = 53; break; //@line 1498 "xmltok_impl.c"
      case 53: // $bb52
        __label__ = 62; break; //@line 1498 "xmltok_impl.c"
      case 54: // $bb53
        var $170=HEAP[$state]; //@line 1503 "xmltok_impl.c"
        var $171=((($170))|0)==1; //@line 1503 "xmltok_impl.c"
        if ($171) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 1503 "xmltok_impl.c"
      case 55: // $bb54
        HEAP[$state]=0; //@line 1504 "xmltok_impl.c"
        __label__ = 59; break; //@line 1504 "xmltok_impl.c"
      case 56: // $bb55
        var $172=HEAP[$state]; //@line 1505 "xmltok_impl.c"
        var $173=((($172))|0)==2; //@line 1505 "xmltok_impl.c"
        if ($173) { __label__ = 57; break; } else { __label__ = 59; break; } //@line 1505 "xmltok_impl.c"
      case 57: // $bb56
        var $174=HEAP[$nAtts]; //@line 1505 "xmltok_impl.c"
        var $175=HEAP[$attsMax_addr]; //@line 1505 "xmltok_impl.c"
        var $176=((($174))|0) < ((($175))|0); //@line 1505 "xmltok_impl.c"
        if ($176) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 1505 "xmltok_impl.c"
      case 58: // $bb57
        var $177=HEAP[$atts_addr]; //@line 1506 "xmltok_impl.c"
        var $178=HEAP[$nAtts]; //@line 1506 "xmltok_impl.c"
        var $179=(($177+16*$178)&4294967295); //@line 1506 "xmltok_impl.c"
        var $180=(($179+12)&4294967295); //@line 1506 "xmltok_impl.c"
        HEAP[$180]=0; //@line 1506 "xmltok_impl.c"
        __label__ = 59; break; //@line 1506 "xmltok_impl.c"
      case 59: // $bb58
        __label__ = 62; break; //@line 1506 "xmltok_impl.c"
      case 60: // $bb59
        var $181=HEAP[$state]; //@line 1510 "xmltok_impl.c"
        var $182=((($181))|0)!=2; //@line 1510 "xmltok_impl.c"
        if ($182) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 1510 "xmltok_impl.c"
      case 61: // $bb60
        var $183=HEAP[$nAtts]; //@line 1511 "xmltok_impl.c"
        HEAP[$0]=$183; //@line 1511 "xmltok_impl.c"
        var $184=HEAP[$0]; //@line 1511 "xmltok_impl.c"
        HEAP[$retval]=$184; //@line 1511 "xmltok_impl.c"
        __label__ = 63; break; //@line 1511 "xmltok_impl.c"
      case 62: // $bb61
        var $185=HEAP[$ptr_addr]; //@line 1436 "xmltok_impl.c"
        var $186=(($185+1)&4294967295); //@line 1436 "xmltok_impl.c"
        HEAP[$ptr_addr]=$186; //@line 1436 "xmltok_impl.c"
        __label__ = 1; break; //@line 1436 "xmltok_impl.c"
      case 63: // $return
        var $retval62=HEAP[$retval]; //@line 1436 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval62; //@line 1436 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_charRefNumber($enc, $ptr) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $result=__stackBase__+16;
        var $c=__stackBase__+20;
        var $c12=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$result]=0; //@line 1523 "xmltok_impl.c"
        var $1=HEAP[$ptr_addr]; //@line 1525 "xmltok_impl.c"
        var $2=(($1+2)&4294967295); //@line 1525 "xmltok_impl.c"
        HEAP[$ptr_addr]=$2; //@line 1525 "xmltok_impl.c"
        var $3=HEAP[$ptr_addr]; //@line 1526 "xmltok_impl.c"
        var $4=HEAP[$3]; //@line 1526 "xmltok_impl.c"
        var $5=reSign(($4), 8, 0)==120; //@line 1526 "xmltok_impl.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 11; break; } //@line 1526 "xmltok_impl.c"
      case 1: // $bb
        var $6=HEAP[$ptr_addr]; //@line 1527 "xmltok_impl.c"
        var $7=(($6+1)&4294967295); //@line 1527 "xmltok_impl.c"
        HEAP[$ptr_addr]=$7; //@line 1527 "xmltok_impl.c"
        __label__ = 9; break; //@line 1527 "xmltok_impl.c"
      case 2: // $bb1
        var $8=HEAP[$ptr_addr]; //@line 1530 "xmltok_impl.c"
        var $9=HEAP[$8]; //@line 1530 "xmltok_impl.c"
        var $10=reSign(($9), 8, 0); //@line 1530 "xmltok_impl.c"
        HEAP[$c]=$10; //@line 1530 "xmltok_impl.c"
        var $11=HEAP[$c]; //@line 1531 "xmltok_impl.c"
        if ($11 == 48) {
          __label__ = 3; break;
        }
        else if ($11 == 49) {
          __label__ = 3; break;
        }
        else if ($11 == 50) {
          __label__ = 3; break;
        }
        else if ($11 == 51) {
          __label__ = 3; break;
        }
        else if ($11 == 52) {
          __label__ = 3; break;
        }
        else if ($11 == 53) {
          __label__ = 3; break;
        }
        else if ($11 == 54) {
          __label__ = 3; break;
        }
        else if ($11 == 55) {
          __label__ = 3; break;
        }
        else if ($11 == 56) {
          __label__ = 3; break;
        }
        else if ($11 == 57) {
          __label__ = 3; break;
        }
        else if ($11 == 65) {
          __label__ = 4; break;
        }
        else if ($11 == 66) {
          __label__ = 4; break;
        }
        else if ($11 == 67) {
          __label__ = 4; break;
        }
        else if ($11 == 68) {
          __label__ = 4; break;
        }
        else if ($11 == 69) {
          __label__ = 4; break;
        }
        else if ($11 == 70) {
          __label__ = 4; break;
        }
        else if ($11 == 97) {
          __label__ = 5; break;
        }
        else if ($11 == 98) {
          __label__ = 5; break;
        }
        else if ($11 == 99) {
          __label__ = 5; break;
        }
        else if ($11 == 100) {
          __label__ = 5; break;
        }
        else if ($11 == 101) {
          __label__ = 5; break;
        }
        else if ($11 == 102) {
          __label__ = 5; break;
        }
        else {
        __label__ = 6; break;
        }
        
      case 3: // $bb2
        var $12=HEAP[$result]; //@line 1534 "xmltok_impl.c"
        var $13=($12) << 4; //@line 1534 "xmltok_impl.c"
        HEAP[$result]=$13; //@line 1534 "xmltok_impl.c"
        var $14=HEAP[$c]; //@line 1535 "xmltok_impl.c"
        var $15=((($14) - 48)&4294967295); //@line 1535 "xmltok_impl.c"
        var $16=HEAP[$result]; //@line 1535 "xmltok_impl.c"
        var $17=($15) | ($16); //@line 1535 "xmltok_impl.c"
        HEAP[$result]=$17; //@line 1535 "xmltok_impl.c"
        __label__ = 6; break; //@line 1535 "xmltok_impl.c"
      case 4: // $bb3
        var $18=HEAP[$result]; //@line 1539 "xmltok_impl.c"
        var $19=($18) << 4; //@line 1539 "xmltok_impl.c"
        HEAP[$result]=$19; //@line 1539 "xmltok_impl.c"
        var $20=HEAP[$c]; //@line 1540 "xmltok_impl.c"
        var $21=((($20) - 55)&4294967295); //@line 1540 "xmltok_impl.c"
        var $22=HEAP[$result]; //@line 1540 "xmltok_impl.c"
        var $23=((($21) + ($22))&4294967295); //@line 1540 "xmltok_impl.c"
        HEAP[$result]=$23; //@line 1540 "xmltok_impl.c"
        __label__ = 6; break; //@line 1540 "xmltok_impl.c"
      case 5: // $bb4
        var $24=HEAP[$result]; //@line 1544 "xmltok_impl.c"
        var $25=($24) << 4; //@line 1544 "xmltok_impl.c"
        HEAP[$result]=$25; //@line 1544 "xmltok_impl.c"
        var $26=HEAP[$c]; //@line 1545 "xmltok_impl.c"
        var $27=((($26) - 87)&4294967295); //@line 1545 "xmltok_impl.c"
        var $28=HEAP[$result]; //@line 1545 "xmltok_impl.c"
        var $29=((($27) + ($28))&4294967295); //@line 1545 "xmltok_impl.c"
        HEAP[$result]=$29; //@line 1545 "xmltok_impl.c"
        __label__ = 6; break; //@line 1545 "xmltok_impl.c"
      case 6: // $bb5
        var $30=HEAP[$result]; //@line 1548 "xmltok_impl.c"
        var $31=((($30))|0) > 1114111; //@line 1548 "xmltok_impl.c"
        if ($31) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1548 "xmltok_impl.c"
      case 7: // $bb6
        HEAP[$0]=-1; //@line 1549 "xmltok_impl.c"
        __label__ = 17; break; //@line 1549 "xmltok_impl.c"
      case 8: // $bb7
        var $32=HEAP[$ptr_addr]; //@line 1529 "xmltok_impl.c"
        var $33=(($32+1)&4294967295); //@line 1529 "xmltok_impl.c"
        HEAP[$ptr_addr]=$33; //@line 1529 "xmltok_impl.c"
        __label__ = 9; break; //@line 1529 "xmltok_impl.c"
      case 9: // $bb8
        var $34=HEAP[$ptr_addr]; //@line 1528 "xmltok_impl.c"
        var $35=HEAP[$34]; //@line 1528 "xmltok_impl.c"
        var $36=reSign(($35), 8, 0)!=59; //@line 1528 "xmltok_impl.c"
        if ($36) { __label__ = 2; break; } else { __label__ = 10; break; } //@line 1528 "xmltok_impl.c"
      case 10: // $bb9
        __label__ = 16; break; //@line 1528 "xmltok_impl.c"
      case 11: // $bb10
        __label__ = 15; break; //@line 1528 "xmltok_impl.c"
      case 12: // $bb11
        var $37=HEAP[$ptr_addr]; //@line 1554 "xmltok_impl.c"
        var $38=HEAP[$37]; //@line 1554 "xmltok_impl.c"
        var $39=reSign(($38), 8, 0); //@line 1554 "xmltok_impl.c"
        HEAP[$c12]=$39; //@line 1554 "xmltok_impl.c"
        var $40=HEAP[$result]; //@line 1555 "xmltok_impl.c"
        var $41=((($40) * 10)&4294967295); //@line 1555 "xmltok_impl.c"
        HEAP[$result]=$41; //@line 1555 "xmltok_impl.c"
        var $42=HEAP[$c12]; //@line 1556 "xmltok_impl.c"
        var $43=((($42) - 48)&4294967295); //@line 1556 "xmltok_impl.c"
        var $44=HEAP[$result]; //@line 1556 "xmltok_impl.c"
        var $45=((($43) + ($44))&4294967295); //@line 1556 "xmltok_impl.c"
        HEAP[$result]=$45; //@line 1556 "xmltok_impl.c"
        var $46=HEAP[$result]; //@line 1557 "xmltok_impl.c"
        var $47=((($46))|0) > 1114111; //@line 1557 "xmltok_impl.c"
        if ($47) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1557 "xmltok_impl.c"
      case 13: // $bb13
        HEAP[$0]=-1; //@line 1558 "xmltok_impl.c"
        __label__ = 17; break; //@line 1558 "xmltok_impl.c"
      case 14: // $bb14
        var $48=HEAP[$ptr_addr]; //@line 1553 "xmltok_impl.c"
        var $49=(($48+1)&4294967295); //@line 1553 "xmltok_impl.c"
        HEAP[$ptr_addr]=$49; //@line 1553 "xmltok_impl.c"
        __label__ = 15; break; //@line 1553 "xmltok_impl.c"
      case 15: // $bb15
        var $50=HEAP[$ptr_addr]; //@line 1553 "xmltok_impl.c"
        var $51=HEAP[$50]; //@line 1553 "xmltok_impl.c"
        var $52=reSign(($51), 8, 0)!=59; //@line 1553 "xmltok_impl.c"
        if ($52) { __label__ = 12; break; } else { __label__ = 16; break; } //@line 1553 "xmltok_impl.c"
      case 16: // $bb16
        var $53=HEAP[$result]; //@line 1561 "xmltok_impl.c"
        var $54=_checkCharRefNumber($53); //@line 1561 "xmltok_impl.c"
        HEAP[$0]=$54; //@line 1561 "xmltok_impl.c"
        __label__ = 17; break; //@line 1561 "xmltok_impl.c"
      case 17: // $bb17
        var $55=HEAP[$0]; //@line 1549 "xmltok_impl.c"
        HEAP[$retval]=$55; //@line 1549 "xmltok_impl.c"
        __label__ = 18; break; //@line 1549 "xmltok_impl.c"
      case 18: // $return
        var $retval18=HEAP[$retval]; //@line 1549 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval18; //@line 1549 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_predefinedEntityName($enc, $ptr, $end) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        var $1=HEAP[$end_addr]; //@line 1568 "xmltok_impl.c"
        var $2=($1); //@line 1568 "xmltok_impl.c"
        var $3=HEAP[$ptr_addr]; //@line 1568 "xmltok_impl.c"
        var $4=($3); //@line 1568 "xmltok_impl.c"
        var $5=((($2) - ($4))&4294967295); //@line 1568 "xmltok_impl.c"
        if ($5 == 2) {
          __label__ = 1; break;
        }
        else if ($5 == 3) {
          __label__ = 6; break;
        }
        else if ($5 == 4) {
          __label__ = 11; break;
        }
        else {
        __label__ = 21; break;
        }
        
      case 1: // $bb
        var $6=HEAP[$ptr_addr]; //@line 1570 "xmltok_impl.c"
        var $7=(($6+1)&4294967295); //@line 1570 "xmltok_impl.c"
        var $8=HEAP[$7]; //@line 1570 "xmltok_impl.c"
        var $9=reSign(($8), 8, 0)==116; //@line 1570 "xmltok_impl.c"
        if ($9) { __label__ = 2; break; } else { __label__ = 5; break; } //@line 1570 "xmltok_impl.c"
      case 2: // $bb1
        var $10=HEAP[$ptr_addr]; //@line 1571 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 1571 "xmltok_impl.c"
        var $12=reSign(($11), 8, 0); //@line 1571 "xmltok_impl.c"
        if ($12 == 103) {
          __label__ = 4; break;
        }
        else if ($12 == 108) {
          __label__ = 3; break;
        }
        else {
        __label__ = 5; break;
        }
        
      case 3: // $bb2
        HEAP[$0]=60; //@line 1573 "xmltok_impl.c"
        __label__ = 22; break; //@line 1573 "xmltok_impl.c"
      case 4: // $bb3
        HEAP[$0]=62; //@line 1575 "xmltok_impl.c"
        __label__ = 22; break; //@line 1575 "xmltok_impl.c"
      case 5: // $bb4
        __label__ = 21; break; //@line 1575 "xmltok_impl.c"
      case 6: // $bb5
        var $13=HEAP[$ptr_addr]; //@line 1580 "xmltok_impl.c"
        var $14=HEAP[$13]; //@line 1580 "xmltok_impl.c"
        var $15=reSign(($14), 8, 0)==97; //@line 1580 "xmltok_impl.c"
        if ($15) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 1580 "xmltok_impl.c"
      case 7: // $bb6
        var $16=HEAP[$ptr_addr]; //@line 1581 "xmltok_impl.c"
        var $17=(($16+1)&4294967295); //@line 1581 "xmltok_impl.c"
        HEAP[$ptr_addr]=$17; //@line 1581 "xmltok_impl.c"
        var $18=HEAP[$ptr_addr]; //@line 1582 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 1582 "xmltok_impl.c"
        var $20=reSign(($19), 8, 0)==109; //@line 1582 "xmltok_impl.c"
        if ($20) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 1582 "xmltok_impl.c"
      case 8: // $bb7
        var $21=HEAP[$ptr_addr]; //@line 1583 "xmltok_impl.c"
        var $22=(($21+1)&4294967295); //@line 1583 "xmltok_impl.c"
        HEAP[$ptr_addr]=$22; //@line 1583 "xmltok_impl.c"
        var $23=HEAP[$ptr_addr]; //@line 1584 "xmltok_impl.c"
        var $24=HEAP[$23]; //@line 1584 "xmltok_impl.c"
        var $25=reSign(($24), 8, 0)==112; //@line 1584 "xmltok_impl.c"
        if ($25) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1584 "xmltok_impl.c"
      case 9: // $bb8
        HEAP[$0]=38; //@line 1585 "xmltok_impl.c"
        __label__ = 22; break; //@line 1585 "xmltok_impl.c"
      case 10: // $bb9
        __label__ = 21; break; //@line 1585 "xmltok_impl.c"
      case 11: // $bb10
        var $26=HEAP[$ptr_addr]; //@line 1590 "xmltok_impl.c"
        var $27=HEAP[$26]; //@line 1590 "xmltok_impl.c"
        var $28=reSign(($27), 8, 0); //@line 1590 "xmltok_impl.c"
        if ($28 == 97) {
          __label__ = 17; break;
        }
        else if ($28 == 113) {
          __label__ = 12; break;
        }
        else {
        __label__ = 21; break;
        }
        
      case 12: // $bb11
        var $29=HEAP[$ptr_addr]; //@line 1592 "xmltok_impl.c"
        var $30=(($29+1)&4294967295); //@line 1592 "xmltok_impl.c"
        HEAP[$ptr_addr]=$30; //@line 1592 "xmltok_impl.c"
        var $31=HEAP[$ptr_addr]; //@line 1593 "xmltok_impl.c"
        var $32=HEAP[$31]; //@line 1593 "xmltok_impl.c"
        var $33=reSign(($32), 8, 0)==117; //@line 1593 "xmltok_impl.c"
        if ($33) { __label__ = 13; break; } else { __label__ = 16; break; } //@line 1593 "xmltok_impl.c"
      case 13: // $bb12
        var $34=HEAP[$ptr_addr]; //@line 1594 "xmltok_impl.c"
        var $35=(($34+1)&4294967295); //@line 1594 "xmltok_impl.c"
        HEAP[$ptr_addr]=$35; //@line 1594 "xmltok_impl.c"
        var $36=HEAP[$ptr_addr]; //@line 1595 "xmltok_impl.c"
        var $37=HEAP[$36]; //@line 1595 "xmltok_impl.c"
        var $38=reSign(($37), 8, 0)==111; //@line 1595 "xmltok_impl.c"
        if ($38) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 1595 "xmltok_impl.c"
      case 14: // $bb13
        var $39=HEAP[$ptr_addr]; //@line 1596 "xmltok_impl.c"
        var $40=(($39+1)&4294967295); //@line 1596 "xmltok_impl.c"
        HEAP[$ptr_addr]=$40; //@line 1596 "xmltok_impl.c"
        var $41=HEAP[$ptr_addr]; //@line 1597 "xmltok_impl.c"
        var $42=HEAP[$41]; //@line 1597 "xmltok_impl.c"
        var $43=reSign(($42), 8, 0)==116; //@line 1597 "xmltok_impl.c"
        if ($43) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1597 "xmltok_impl.c"
      case 15: // $bb14
        HEAP[$0]=34; //@line 1598 "xmltok_impl.c"
        __label__ = 22; break; //@line 1598 "xmltok_impl.c"
      case 16: // $bb15
        __label__ = 21; break; //@line 1598 "xmltok_impl.c"
      case 17: // $bb16
        var $44=HEAP[$ptr_addr]; //@line 1603 "xmltok_impl.c"
        var $45=(($44+1)&4294967295); //@line 1603 "xmltok_impl.c"
        HEAP[$ptr_addr]=$45; //@line 1603 "xmltok_impl.c"
        var $46=HEAP[$ptr_addr]; //@line 1604 "xmltok_impl.c"
        var $47=HEAP[$46]; //@line 1604 "xmltok_impl.c"
        var $48=reSign(($47), 8, 0)==112; //@line 1604 "xmltok_impl.c"
        if ($48) { __label__ = 18; break; } else { __label__ = 21; break; } //@line 1604 "xmltok_impl.c"
      case 18: // $bb17
        var $49=HEAP[$ptr_addr]; //@line 1605 "xmltok_impl.c"
        var $50=(($49+1)&4294967295); //@line 1605 "xmltok_impl.c"
        HEAP[$ptr_addr]=$50; //@line 1605 "xmltok_impl.c"
        var $51=HEAP[$ptr_addr]; //@line 1606 "xmltok_impl.c"
        var $52=HEAP[$51]; //@line 1606 "xmltok_impl.c"
        var $53=reSign(($52), 8, 0)==111; //@line 1606 "xmltok_impl.c"
        if ($53) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 1606 "xmltok_impl.c"
      case 19: // $bb18
        var $54=HEAP[$ptr_addr]; //@line 1607 "xmltok_impl.c"
        var $55=(($54+1)&4294967295); //@line 1607 "xmltok_impl.c"
        HEAP[$ptr_addr]=$55; //@line 1607 "xmltok_impl.c"
        var $56=HEAP[$ptr_addr]; //@line 1608 "xmltok_impl.c"
        var $57=HEAP[$56]; //@line 1608 "xmltok_impl.c"
        var $58=reSign(($57), 8, 0)==115; //@line 1608 "xmltok_impl.c"
        if ($58) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1608 "xmltok_impl.c"
      case 20: // $bb19
        HEAP[$0]=39; //@line 1609 "xmltok_impl.c"
        __label__ = 22; break; //@line 1609 "xmltok_impl.c"
      case 21: // $bb20
        HEAP[$0]=0; //@line 1615 "xmltok_impl.c"
        __label__ = 22; break; //@line 1615 "xmltok_impl.c"
      case 22: // $bb21
        var $59=HEAP[$0]; //@line 1573 "xmltok_impl.c"
        HEAP[$retval]=$59; //@line 1573 "xmltok_impl.c"
        __label__ = 23; break; //@line 1573 "xmltok_impl.c"
      case 23: // $return
        var $retval22=HEAP[$retval]; //@line 1573 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval22; //@line 1573 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_sameName($enc, $ptr1, $ptr2) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr1_addr=__stackBase__+4;
        var $ptr2_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr1_addr]=$ptr1;
        HEAP[$ptr2_addr]=$ptr2;
        __label__ = 1; break; //@line 1620 "xmltok.c"
      case 1: // $bb
        var $1=HEAP[$enc_addr]; //@line 1622 "xmltok_impl.c"
        var $2=$1; //@line 1622 "xmltok_impl.c"
        var $3=HEAP[$ptr1_addr]; //@line 1622 "xmltok_impl.c"
        var $4=HEAP[$3]; //@line 1622 "xmltok_impl.c"
        var $5=unSign(($4), 8, 0); //@line 1622 "xmltok_impl.c"
        var $6=(($2+72)&4294967295); //@line 1622 "xmltok_impl.c"
        var $7=(($6+$5)&4294967295); //@line 1622 "xmltok_impl.c"
        var $8=HEAP[$7]; //@line 1622 "xmltok_impl.c"
        var $9=unSign(($8), 8, 0); //@line 1622 "xmltok_impl.c"
        if ($9 == 5) {
          __label__ = 6; break;
        }
        else if ($9 == 6) {
          __label__ = 4; break;
        }
        else if ($9 == 7) {
          __label__ = 2; break;
        }
        else if ($9 == 22) {
          __label__ = 11; break;
        }
        else if ($9 == 24) {
          __label__ = 11; break;
        }
        else if ($9 == 25) {
          __label__ = 11; break;
        }
        else if ($9 == 26) {
          __label__ = 11; break;
        }
        else if ($9 == 27) {
          __label__ = 11; break;
        }
        else if ($9 == 29) {
          __label__ = 11; break;
        }
        else {
        __label__ = 14; break;
        }
        
      case 2: // $bb1
        var $10=HEAP[$ptr1_addr]; //@line 1627 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 1627 "xmltok_impl.c"
        var $12=HEAP[$ptr2_addr]; //@line 1627 "xmltok_impl.c"
        var $13=HEAP[$12]; //@line 1627 "xmltok_impl.c"
        var $14=reSign(($11), 8, 0)!=reSign(($13), 8, 0); //@line 1627 "xmltok_impl.c"
        var $15=unSign(($14), 1, 0); //@line 1627 "xmltok_impl.c"
        var $16=HEAP[$ptr1_addr]; //@line 1627 "xmltok_impl.c"
        var $17=(($16+1)&4294967295); //@line 1627 "xmltok_impl.c"
        HEAP[$ptr1_addr]=$17; //@line 1627 "xmltok_impl.c"
        var $18=HEAP[$ptr2_addr]; //@line 1627 "xmltok_impl.c"
        var $19=(($18+1)&4294967295); //@line 1627 "xmltok_impl.c"
        HEAP[$ptr2_addr]=$19; //@line 1627 "xmltok_impl.c"
        var $toBool=reSign(($15), 8, 0)!=0; //@line 1627 "xmltok_impl.c"
        if ($toBool) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1627 "xmltok_impl.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 1627 "xmltok_impl.c"
        __label__ = 20; break; //@line 1627 "xmltok_impl.c"
      case 4: // $bb3
        var $20=HEAP[$ptr1_addr]; //@line 1627 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 1627 "xmltok_impl.c"
        var $22=HEAP[$ptr2_addr]; //@line 1627 "xmltok_impl.c"
        var $23=HEAP[$22]; //@line 1627 "xmltok_impl.c"
        var $24=reSign(($21), 8, 0)!=reSign(($23), 8, 0); //@line 1627 "xmltok_impl.c"
        var $25=unSign(($24), 1, 0); //@line 1627 "xmltok_impl.c"
        var $26=HEAP[$ptr1_addr]; //@line 1627 "xmltok_impl.c"
        var $27=(($26+1)&4294967295); //@line 1627 "xmltok_impl.c"
        HEAP[$ptr1_addr]=$27; //@line 1627 "xmltok_impl.c"
        var $28=HEAP[$ptr2_addr]; //@line 1627 "xmltok_impl.c"
        var $29=(($28+1)&4294967295); //@line 1627 "xmltok_impl.c"
        HEAP[$ptr2_addr]=$29; //@line 1627 "xmltok_impl.c"
        var $toBool4=reSign(($25), 8, 0)!=0; //@line 1627 "xmltok_impl.c"
        if ($toBool4) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1627 "xmltok_impl.c"
      case 5: // $bb5
        HEAP[$0]=0; //@line 1627 "xmltok_impl.c"
        __label__ = 20; break; //@line 1627 "xmltok_impl.c"
      case 6: // $bb6
        var $30=HEAP[$ptr1_addr]; //@line 1627 "xmltok_impl.c"
        var $31=HEAP[$30]; //@line 1627 "xmltok_impl.c"
        var $32=HEAP[$ptr2_addr]; //@line 1627 "xmltok_impl.c"
        var $33=HEAP[$32]; //@line 1627 "xmltok_impl.c"
        var $34=reSign(($31), 8, 0)!=reSign(($33), 8, 0); //@line 1627 "xmltok_impl.c"
        var $35=unSign(($34), 1, 0); //@line 1627 "xmltok_impl.c"
        var $36=HEAP[$ptr1_addr]; //@line 1627 "xmltok_impl.c"
        var $37=(($36+1)&4294967295); //@line 1627 "xmltok_impl.c"
        HEAP[$ptr1_addr]=$37; //@line 1627 "xmltok_impl.c"
        var $38=HEAP[$ptr2_addr]; //@line 1627 "xmltok_impl.c"
        var $39=(($38+1)&4294967295); //@line 1627 "xmltok_impl.c"
        HEAP[$ptr2_addr]=$39; //@line 1627 "xmltok_impl.c"
        var $toBool7=reSign(($35), 8, 0)!=0; //@line 1627 "xmltok_impl.c"
        if ($toBool7) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1627 "xmltok_impl.c"
      case 7: // $bb8
        HEAP[$0]=0; //@line 1627 "xmltok_impl.c"
        __label__ = 20; break; //@line 1627 "xmltok_impl.c"
      case 8: // $bb9
        var $40=HEAP[$ptr1_addr]; //@line 1630 "xmltok_impl.c"
        var $41=HEAP[$40]; //@line 1630 "xmltok_impl.c"
        var $42=HEAP[$ptr2_addr]; //@line 1630 "xmltok_impl.c"
        var $43=HEAP[$42]; //@line 1630 "xmltok_impl.c"
        var $44=reSign(($41), 8, 0)!=reSign(($43), 8, 0); //@line 1630 "xmltok_impl.c"
        var $45=unSign(($44), 1, 0); //@line 1630 "xmltok_impl.c"
        var $46=HEAP[$ptr1_addr]; //@line 1630 "xmltok_impl.c"
        var $47=(($46+1)&4294967295); //@line 1630 "xmltok_impl.c"
        HEAP[$ptr1_addr]=$47; //@line 1630 "xmltok_impl.c"
        var $48=HEAP[$ptr2_addr]; //@line 1630 "xmltok_impl.c"
        var $49=(($48+1)&4294967295); //@line 1630 "xmltok_impl.c"
        HEAP[$ptr2_addr]=$49; //@line 1630 "xmltok_impl.c"
        var $toBool10=reSign(($45), 8, 0)!=0; //@line 1630 "xmltok_impl.c"
        if ($toBool10) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1630 "xmltok_impl.c"
      case 9: // $bb11
        HEAP[$0]=0; //@line 1631 "xmltok_impl.c"
        __label__ = 20; break; //@line 1631 "xmltok_impl.c"
      case 10: // $bb12
        __label__ = 19; break; //@line 1631 "xmltok_impl.c"
      case 11: // $bb13
        var $50=HEAP[$ptr2_addr]; //@line 1642 "xmltok_impl.c"
        var $51=HEAP[$50]; //@line 1642 "xmltok_impl.c"
        var $52=HEAP[$ptr1_addr]; //@line 1642 "xmltok_impl.c"
        var $53=HEAP[$52]; //@line 1642 "xmltok_impl.c"
        var $54=reSign(($51), 8, 0)!=reSign(($53), 8, 0); //@line 1642 "xmltok_impl.c"
        var $55=unSign(($54), 1, 0); //@line 1642 "xmltok_impl.c"
        var $56=HEAP[$ptr2_addr]; //@line 1642 "xmltok_impl.c"
        var $57=(($56+1)&4294967295); //@line 1642 "xmltok_impl.c"
        HEAP[$ptr2_addr]=$57; //@line 1642 "xmltok_impl.c"
        var $58=HEAP[$ptr1_addr]; //@line 1642 "xmltok_impl.c"
        var $59=(($58+1)&4294967295); //@line 1642 "xmltok_impl.c"
        HEAP[$ptr1_addr]=$59; //@line 1642 "xmltok_impl.c"
        var $toBool14=reSign(($55), 8, 0)!=0; //@line 1642 "xmltok_impl.c"
        if ($toBool14) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1642 "xmltok_impl.c"
      case 12: // $bb15
        HEAP[$0]=0; //@line 1643 "xmltok_impl.c"
        __label__ = 20; break; //@line 1643 "xmltok_impl.c"
      case 13: // $bb16
        __label__ = 19; break; //@line 1643 "xmltok_impl.c"
      case 14: // $bb17
        var $60=HEAP[$ptr1_addr]; //@line 1658 "xmltok_impl.c"
        var $61=HEAP[$60]; //@line 1658 "xmltok_impl.c"
        var $62=HEAP[$ptr2_addr]; //@line 1658 "xmltok_impl.c"
        var $63=HEAP[$62]; //@line 1658 "xmltok_impl.c"
        var $64=reSign(($61), 8, 0)==reSign(($63), 8, 0); //@line 1658 "xmltok_impl.c"
        if ($64) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1658 "xmltok_impl.c"
      case 15: // $bb18
        HEAP[$0]=1; //@line 1659 "xmltok_impl.c"
        __label__ = 20; break; //@line 1659 "xmltok_impl.c"
      case 16: // $bb19
        var $65=HEAP[$enc_addr]; //@line 1660 "xmltok_impl.c"
        var $66=$65; //@line 1660 "xmltok_impl.c"
        var $67=HEAP[$ptr2_addr]; //@line 1660 "xmltok_impl.c"
        var $68=HEAP[$67]; //@line 1660 "xmltok_impl.c"
        var $69=unSign(($68), 8, 0); //@line 1660 "xmltok_impl.c"
        var $70=(($66+72)&4294967295); //@line 1660 "xmltok_impl.c"
        var $71=(($70+$69)&4294967295); //@line 1660 "xmltok_impl.c"
        var $72=HEAP[$71]; //@line 1660 "xmltok_impl.c"
        var $73=unSign(($72), 8, 0); //@line 1660 "xmltok_impl.c"
        if ($73 == 5) {
          __label__ = 17; break;
        }
        else if ($73 == 6) {
          __label__ = 17; break;
        }
        else if ($73 == 7) {
          __label__ = 17; break;
        }
        else if ($73 == 22) {
          __label__ = 17; break;
        }
        else if ($73 == 24) {
          __label__ = 17; break;
        }
        else if ($73 == 25) {
          __label__ = 17; break;
        }
        else if ($73 == 26) {
          __label__ = 17; break;
        }
        else if ($73 == 27) {
          __label__ = 17; break;
        }
        else if ($73 == 29) {
          __label__ = 17; break;
        }
        else {
        __label__ = 18; break;
        }
        
      case 17: // $bb20
        HEAP[$0]=0; //@line 1673 "xmltok_impl.c"
        __label__ = 20; break; //@line 1673 "xmltok_impl.c"
      case 18: // $bb21
        HEAP[$0]=1; //@line 1675 "xmltok_impl.c"
        __label__ = 20; break; //@line 1675 "xmltok_impl.c"
      case 19: // $bb22
        __label__ = 1; break; //@line 1675 "xmltok_impl.c"
      case 20: // $bb23
        var $74=HEAP[$0]; //@line 1627 "xmltok_impl.c"
        HEAP[$retval]=$74; //@line 1627 "xmltok_impl.c"
        __label__ = 21; break; //@line 1627 "xmltok_impl.c"
      case 21: // $return
        var $retval24=HEAP[$retval]; //@line 1627 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval24; //@line 1627 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_nameMatchesAscii($enc, $ptr1, $end1, $ptr2) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr1_addr=__stackBase__+4;
        var $end1_addr=__stackBase__+8;
        var $ptr2_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr1_addr]=$ptr1;
        HEAP[$end1_addr]=$end1;
        HEAP[$ptr2_addr]=$ptr2;
        __label__ = 6; break; //@line 1686 "xmltok_impl.c"
      case 1: // $bb
        var $1=HEAP[$ptr1_addr]; //@line 1687 "xmltok_impl.c"
        var $2=HEAP[$end1_addr]; //@line 1687 "xmltok_impl.c"
        var $3=($1)==($2); //@line 1687 "xmltok_impl.c"
        if ($3) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1687 "xmltok_impl.c"
      case 2: // $bb1
        HEAP[$0]=0; //@line 1688 "xmltok_impl.c"
        __label__ = 8; break; //@line 1688 "xmltok_impl.c"
      case 3: // $bb2
        var $4=HEAP[$ptr1_addr]; //@line 1689 "xmltok_impl.c"
        var $5=HEAP[$4]; //@line 1689 "xmltok_impl.c"
        var $6=HEAP[$ptr2_addr]; //@line 1689 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 1689 "xmltok_impl.c"
        var $8=reSign(($5), 8, 0)!=reSign(($7), 8, 0); //@line 1689 "xmltok_impl.c"
        if ($8) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1689 "xmltok_impl.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 1690 "xmltok_impl.c"
        __label__ = 8; break; //@line 1690 "xmltok_impl.c"
      case 5: // $bb4
        var $9=HEAP[$ptr1_addr]; //@line 1686 "xmltok_impl.c"
        var $10=(($9+1)&4294967295); //@line 1686 "xmltok_impl.c"
        HEAP[$ptr1_addr]=$10; //@line 1686 "xmltok_impl.c"
        var $11=HEAP[$ptr2_addr]; //@line 1686 "xmltok_impl.c"
        var $12=(($11+1)&4294967295); //@line 1686 "xmltok_impl.c"
        HEAP[$ptr2_addr]=$12; //@line 1686 "xmltok_impl.c"
        __label__ = 6; break; //@line 1686 "xmltok_impl.c"
      case 6: // $bb5
        var $13=HEAP[$ptr2_addr]; //@line 1686 "xmltok_impl.c"
        var $14=HEAP[$13]; //@line 1686 "xmltok_impl.c"
        var $15=reSign(($14), 8, 0)!=0; //@line 1686 "xmltok_impl.c"
        if ($15) { __label__ = 1; break; } else { __label__ = 7; break; } //@line 1686 "xmltok_impl.c"
      case 7: // $bb6
        var $16=HEAP[$ptr1_addr]; //@line 1692 "xmltok_impl.c"
        var $17=HEAP[$end1_addr]; //@line 1692 "xmltok_impl.c"
        var $18=($16)==($17); //@line 1692 "xmltok_impl.c"
        var $19=unSign(($18), 1, 0); //@line 1692 "xmltok_impl.c"
        HEAP[$0]=$19; //@line 1692 "xmltok_impl.c"
        __label__ = 8; break; //@line 1692 "xmltok_impl.c"
      case 8: // $bb7
        var $20=HEAP[$0]; //@line 1688 "xmltok_impl.c"
        HEAP[$retval]=$20; //@line 1688 "xmltok_impl.c"
        __label__ = 9; break; //@line 1688 "xmltok_impl.c"
      case 9: // $return
        var $retval8=HEAP[$retval]; //@line 1688 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval8; //@line 1688 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_nameLength($enc, $ptr) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $start=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        var $1=HEAP[$ptr_addr]; //@line 1698 "xmltok_impl.c"
        HEAP[$start]=$1; //@line 1698 "xmltok_impl.c"
        __label__ = 1; break; //@line 1698 "xmltok_impl.c"
      case 1: // $bb
        var $2=HEAP[$enc_addr]; //@line 1700 "xmltok_impl.c"
        var $3=$2; //@line 1700 "xmltok_impl.c"
        var $4=HEAP[$ptr_addr]; //@line 1700 "xmltok_impl.c"
        var $5=HEAP[$4]; //@line 1700 "xmltok_impl.c"
        var $6=unSign(($5), 8, 0); //@line 1700 "xmltok_impl.c"
        var $7=(($3+72)&4294967295); //@line 1700 "xmltok_impl.c"
        var $8=(($7+$6)&4294967295); //@line 1700 "xmltok_impl.c"
        var $9=HEAP[$8]; //@line 1700 "xmltok_impl.c"
        var $10=unSign(($9), 8, 0); //@line 1700 "xmltok_impl.c"
        if ($10 == 5) {
          __label__ = 2; break;
        }
        else if ($10 == 6) {
          __label__ = 3; break;
        }
        else if ($10 == 7) {
          __label__ = 4; break;
        }
        else if ($10 == 22) {
          __label__ = 5; break;
        }
        else if ($10 == 24) {
          __label__ = 5; break;
        }
        else if ($10 == 25) {
          __label__ = 5; break;
        }
        else if ($10 == 26) {
          __label__ = 5; break;
        }
        else if ($10 == 27) {
          __label__ = 5; break;
        }
        else if ($10 == 29) {
          __label__ = 5; break;
        }
        else {
        __label__ = 6; break;
        }
        
      case 2: // $bb1
        var $11=HEAP[$ptr_addr]; //@line 1703 "xmltok_impl.c"
        var $12=(($11+2)&4294967295); //@line 1703 "xmltok_impl.c"
        HEAP[$ptr_addr]=$12; //@line 1703 "xmltok_impl.c"
        __label__ = 7; break; //@line 1703 "xmltok_impl.c"
      case 3: // $bb2
        var $13=HEAP[$ptr_addr]; //@line 1703 "xmltok_impl.c"
        var $14=(($13+3)&4294967295); //@line 1703 "xmltok_impl.c"
        HEAP[$ptr_addr]=$14; //@line 1703 "xmltok_impl.c"
        __label__ = 7; break; //@line 1703 "xmltok_impl.c"
      case 4: // $bb3
        var $15=HEAP[$ptr_addr]; //@line 1703 "xmltok_impl.c"
        var $16=(($15+4)&4294967295); //@line 1703 "xmltok_impl.c"
        HEAP[$ptr_addr]=$16; //@line 1703 "xmltok_impl.c"
        __label__ = 7; break; //@line 1703 "xmltok_impl.c"
      case 5: // $bb4
        var $17=HEAP[$ptr_addr]; //@line 1714 "xmltok_impl.c"
        var $18=(($17+1)&4294967295); //@line 1714 "xmltok_impl.c"
        HEAP[$ptr_addr]=$18; //@line 1714 "xmltok_impl.c"
        __label__ = 7; break; //@line 1714 "xmltok_impl.c"
      case 6: // $bb5
        var $19=HEAP[$ptr_addr]; //@line 1717 "xmltok_impl.c"
        var $20=($19); //@line 1717 "xmltok_impl.c"
        var $21=HEAP[$start]; //@line 1717 "xmltok_impl.c"
        var $22=($21); //@line 1717 "xmltok_impl.c"
        var $23=((($20) - ($22))&4294967295); //@line 1717 "xmltok_impl.c"
        HEAP[$0]=$23; //@line 1717 "xmltok_impl.c"
        var $24=HEAP[$0]; //@line 1717 "xmltok_impl.c"
        HEAP[$retval]=$24; //@line 1717 "xmltok_impl.c"
        __label__ = 8; break; //@line 1717 "xmltok_impl.c"
      case 7: // $bb6
        __label__ = 1; break; //@line 1717 "xmltok_impl.c"
      case 8: // $return
        var $retval7=HEAP[$retval]; //@line 1717 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 1717 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_skipS($enc, $ptr) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        __label__ = 1; break; //@line 1724 "xmltok.c"
      case 1: // $bb
        var $1=HEAP[$enc_addr]; //@line 1726 "xmltok_impl.c"
        var $2=$1; //@line 1726 "xmltok_impl.c"
        var $3=HEAP[$ptr_addr]; //@line 1726 "xmltok_impl.c"
        var $4=HEAP[$3]; //@line 1726 "xmltok_impl.c"
        var $5=unSign(($4), 8, 0); //@line 1726 "xmltok_impl.c"
        var $6=(($2+72)&4294967295); //@line 1726 "xmltok_impl.c"
        var $7=(($6+$5)&4294967295); //@line 1726 "xmltok_impl.c"
        var $8=HEAP[$7]; //@line 1726 "xmltok_impl.c"
        var $9=unSign(($8), 8, 0); //@line 1726 "xmltok_impl.c"
        if ($9 == 9) {
          __label__ = 2; break;
        }
        else if ($9 == 10) {
          __label__ = 2; break;
        }
        else if ($9 == 21) {
          __label__ = 2; break;
        }
        else {
        __label__ = 3; break;
        }
        
      case 2: // $bb1
        var $10=HEAP[$ptr_addr]; //@line 1730 "xmltok_impl.c"
        var $11=(($10+1)&4294967295); //@line 1730 "xmltok_impl.c"
        HEAP[$ptr_addr]=$11; //@line 1730 "xmltok_impl.c"
        __label__ = 1; break; //@line 1730 "xmltok_impl.c"
      case 3: // $bb2
        var $12=HEAP[$ptr_addr]; //@line 1733 "xmltok_impl.c"
        HEAP[$0]=$12; //@line 1733 "xmltok_impl.c"
        var $13=HEAP[$0]; //@line 1733 "xmltok_impl.c"
        HEAP[$retval]=$13; //@line 1733 "xmltok_impl.c"
        __label__ = 4; break; //@line 1733 "xmltok_impl.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 1733 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 1733 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normal_updatePosition($enc, $ptr, $end, $pos) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $pos_addr=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$pos_addr]=$pos;
        __label__ = 12; break; //@line 1744 "xmltok_impl.c"
      case 1: // $bb
        var $0=HEAP[$enc_addr]; //@line 1745 "xmltok_impl.c"
        var $1=$0; //@line 1745 "xmltok_impl.c"
        var $2=HEAP[$ptr_addr]; //@line 1745 "xmltok_impl.c"
        var $3=HEAP[$2]; //@line 1745 "xmltok_impl.c"
        var $4=unSign(($3), 8, 0); //@line 1745 "xmltok_impl.c"
        var $5=(($1+72)&4294967295); //@line 1745 "xmltok_impl.c"
        var $6=(($5+$4)&4294967295); //@line 1745 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 1745 "xmltok_impl.c"
        var $8=unSign(($7), 8, 0); //@line 1745 "xmltok_impl.c"
        if ($8 == 5) {
          __label__ = 2; break;
        }
        else if ($8 == 6) {
          __label__ = 3; break;
        }
        else if ($8 == 7) {
          __label__ = 4; break;
        }
        else if ($8 == 9) {
          __label__ = 6; break;
        }
        else if ($8 == 10) {
          __label__ = 5; break;
        }
        else {
        __label__ = 10; break;
        }
        
      case 2: // $bb1
        var $9=HEAP[$ptr_addr]; //@line 1750 "xmltok_impl.c"
        var $10=(($9+2)&4294967295); //@line 1750 "xmltok_impl.c"
        HEAP[$ptr_addr]=$10; //@line 1750 "xmltok_impl.c"
        __label__ = 11; break; //@line 1750 "xmltok_impl.c"
      case 3: // $bb2
        var $11=HEAP[$ptr_addr]; //@line 1750 "xmltok_impl.c"
        var $12=(($11+3)&4294967295); //@line 1750 "xmltok_impl.c"
        HEAP[$ptr_addr]=$12; //@line 1750 "xmltok_impl.c"
        __label__ = 11; break; //@line 1750 "xmltok_impl.c"
      case 4: // $bb3
        var $13=HEAP[$ptr_addr]; //@line 1750 "xmltok_impl.c"
        var $14=(($13+4)&4294967295); //@line 1750 "xmltok_impl.c"
        HEAP[$ptr_addr]=$14; //@line 1750 "xmltok_impl.c"
        __label__ = 11; break; //@line 1750 "xmltok_impl.c"
      case 5: // $bb4
        var $15=HEAP[$pos_addr]; //@line 1753 "xmltok_impl.c"
        var $16=(($15+4)&4294967295); //@line 1753 "xmltok_impl.c"
        HEAP[$16]=-1; //@line 1753 "xmltok_impl.c"
        var $17=HEAP[$pos_addr]; //@line 1754 "xmltok_impl.c"
        var $18=(($17)&4294967295); //@line 1754 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 1754 "xmltok_impl.c"
        var $20=((($19) + 1)&4294967295); //@line 1754 "xmltok_impl.c"
        var $21=HEAP[$pos_addr]; //@line 1754 "xmltok_impl.c"
        var $22=(($21)&4294967295); //@line 1754 "xmltok_impl.c"
        HEAP[$22]=$20; //@line 1754 "xmltok_impl.c"
        var $23=HEAP[$ptr_addr]; //@line 1755 "xmltok_impl.c"
        var $24=(($23+1)&4294967295); //@line 1755 "xmltok_impl.c"
        HEAP[$ptr_addr]=$24; //@line 1755 "xmltok_impl.c"
        __label__ = 11; break; //@line 1755 "xmltok_impl.c"
      case 6: // $bb5
        var $25=HEAP[$pos_addr]; //@line 1758 "xmltok_impl.c"
        var $26=(($25)&4294967295); //@line 1758 "xmltok_impl.c"
        var $27=HEAP[$26]; //@line 1758 "xmltok_impl.c"
        var $28=((($27) + 1)&4294967295); //@line 1758 "xmltok_impl.c"
        var $29=HEAP[$pos_addr]; //@line 1758 "xmltok_impl.c"
        var $30=(($29)&4294967295); //@line 1758 "xmltok_impl.c"
        HEAP[$30]=$28; //@line 1758 "xmltok_impl.c"
        var $31=HEAP[$ptr_addr]; //@line 1759 "xmltok_impl.c"
        var $32=(($31+1)&4294967295); //@line 1759 "xmltok_impl.c"
        HEAP[$ptr_addr]=$32; //@line 1759 "xmltok_impl.c"
        var $33=HEAP[$ptr_addr]; //@line 1760 "xmltok_impl.c"
        var $34=HEAP[$end_addr]; //@line 1760 "xmltok_impl.c"
        var $35=($33)!=($34); //@line 1760 "xmltok_impl.c"
        if ($35) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 1760 "xmltok_impl.c"
      case 7: // $bb6
        var $36=HEAP[$enc_addr]; //@line 1760 "xmltok_impl.c"
        var $37=$36; //@line 1760 "xmltok_impl.c"
        var $38=HEAP[$ptr_addr]; //@line 1760 "xmltok_impl.c"
        var $39=HEAP[$38]; //@line 1760 "xmltok_impl.c"
        var $40=unSign(($39), 8, 0); //@line 1760 "xmltok_impl.c"
        var $41=(($37+72)&4294967295); //@line 1760 "xmltok_impl.c"
        var $42=(($41+$40)&4294967295); //@line 1760 "xmltok_impl.c"
        var $43=HEAP[$42]; //@line 1760 "xmltok_impl.c"
        var $44=reSign(($43), 8, 0)==10; //@line 1760 "xmltok_impl.c"
        if ($44) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1760 "xmltok_impl.c"
      case 8: // $bb7
        var $45=HEAP[$ptr_addr]; //@line 1761 "xmltok_impl.c"
        var $46=(($45+1)&4294967295); //@line 1761 "xmltok_impl.c"
        HEAP[$ptr_addr]=$46; //@line 1761 "xmltok_impl.c"
        __label__ = 9; break; //@line 1761 "xmltok_impl.c"
      case 9: // $bb8
        var $47=HEAP[$pos_addr]; //@line 1762 "xmltok_impl.c"
        var $48=(($47+4)&4294967295); //@line 1762 "xmltok_impl.c"
        HEAP[$48]=-1; //@line 1762 "xmltok_impl.c"
        __label__ = 11; break; //@line 1762 "xmltok_impl.c"
      case 10: // $bb9
        var $49=HEAP[$ptr_addr]; //@line 1765 "xmltok_impl.c"
        var $50=(($49+1)&4294967295); //@line 1765 "xmltok_impl.c"
        HEAP[$ptr_addr]=$50; //@line 1765 "xmltok_impl.c"
        __label__ = 11; break; //@line 1765 "xmltok_impl.c"
      case 11: // $bb10
        var $51=HEAP[$pos_addr]; //@line 1768 "xmltok_impl.c"
        var $52=(($51+4)&4294967295); //@line 1768 "xmltok_impl.c"
        var $53=HEAP[$52]; //@line 1768 "xmltok_impl.c"
        var $54=((($53) + 1)&4294967295); //@line 1768 "xmltok_impl.c"
        var $55=HEAP[$pos_addr]; //@line 1768 "xmltok_impl.c"
        var $56=(($55+4)&4294967295); //@line 1768 "xmltok_impl.c"
        HEAP[$56]=$54; //@line 1768 "xmltok_impl.c"
        __label__ = 12; break; //@line 1768 "xmltok_impl.c"
      case 12: // $bb11
        var $57=HEAP[$ptr_addr]; //@line 1744 "xmltok_impl.c"
        var $58=HEAP[$end_addr]; //@line 1744 "xmltok_impl.c"
        var $59=($57) < ($58); //@line 1744 "xmltok_impl.c"
        if ($59) { __label__ = 1; break; } else { __label__ = 13; break; } //@line 1744 "xmltok_impl.c"
      case 13: // $bb12
        __label__ = 14; break; //@line 1770 "xmltok_impl.c"
      case 14: // $return
        STACKTOP = __stackBase__;
        return; //@line 1770 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _utf8_toUtf8($enc, $fromP, $fromLim, $toP, $toLim) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $fromP_addr=__stackBase__+4;
        var $fromLim_addr=__stackBase__+8;
        var $toP_addr=__stackBase__+12;
        var $toLim_addr=__stackBase__+16;
        var $to=__stackBase__+20;
        var $from=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$fromP_addr]=$fromP;
        HEAP[$fromLim_addr]=$fromLim;
        HEAP[$toP_addr]=$toP;
        HEAP[$toLim_addr]=$toLim;
        var $0=HEAP[$fromLim_addr]; //@line 324 "xmltok.c"
        var $1=($0); //@line 324 "xmltok.c"
        var $2=HEAP[$fromP_addr]; //@line 324 "xmltok.c"
        var $3=HEAP[$2]; //@line 324 "xmltok.c"
        var $4=($3); //@line 324 "xmltok.c"
        var $5=((($1) - ($4))&4294967295); //@line 324 "xmltok.c"
        var $6=HEAP[$toLim_addr]; //@line 324 "xmltok.c"
        var $7=($6); //@line 324 "xmltok.c"
        var $8=HEAP[$toP_addr]; //@line 324 "xmltok.c"
        var $9=HEAP[$8]; //@line 324 "xmltok.c"
        var $10=($9); //@line 324 "xmltok.c"
        var $11=((($7) - ($10))&4294967295); //@line 324 "xmltok.c"
        var $12=((($5))|0) > ((($11))|0); //@line 324 "xmltok.c"
        if ($12) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 324 "xmltok.c"
      case 1: // $bb
        var $13=HEAP[$fromP_addr]; //@line 326 "xmltok.c"
        var $14=HEAP[$13]; //@line 326 "xmltok.c"
        var $15=HEAP[$toLim_addr]; //@line 326 "xmltok.c"
        var $16=($15); //@line 326 "xmltok.c"
        var $17=HEAP[$toP_addr]; //@line 326 "xmltok.c"
        var $18=HEAP[$17]; //@line 326 "xmltok.c"
        var $19=($18); //@line 326 "xmltok.c"
        var $20=((($16) - ($19))&4294967295); //@line 326 "xmltok.c"
        var $21=(($14+$20)&4294967295); //@line 326 "xmltok.c"
        HEAP[$fromLim_addr]=$21; //@line 326 "xmltok.c"
        __label__ = 4; break; //@line 326 "xmltok.c"
      case 2: // $bb1
        var $22=HEAP[$fromLim_addr]; //@line 327 "xmltok.c"
        var $23=(($22+-1)&4294967295); //@line 327 "xmltok.c"
        var $24=HEAP[$23]; //@line 327 "xmltok.c"
        var $25=unSign(($24), 8, 0); //@line 327 "xmltok.c"
        var $26=($25) & 192; //@line 327 "xmltok.c"
        var $27=((($26))|0)!=128; //@line 327 "xmltok.c"
        if ($27) { __label__ = 5; break; } else { __label__ = 3; break; } //@line 327 "xmltok.c"
      case 3: // $bb2
        var $28=HEAP[$fromLim_addr]; //@line 326 "xmltok.c"
        var $29=(($28+-1)&4294967295); //@line 326 "xmltok.c"
        HEAP[$fromLim_addr]=$29; //@line 326 "xmltok.c"
        __label__ = 4; break; //@line 326 "xmltok.c"
      case 4: // $bb3
        var $30=HEAP[$fromP_addr]; //@line 326 "xmltok.c"
        var $31=HEAP[$30]; //@line 326 "xmltok.c"
        var $32=HEAP[$fromLim_addr]; //@line 326 "xmltok.c"
        var $33=($31) < ($32); //@line 326 "xmltok.c"
        if ($33) { __label__ = 2; break; } else { __label__ = 5; break; } //@line 326 "xmltok.c"
      case 5: // $bb4
        var $34=HEAP[$toP_addr]; //@line 330 "xmltok.c"
        var $35=HEAP[$34]; //@line 330 "xmltok.c"
        HEAP[$to]=$35; //@line 330 "xmltok.c"
        var $36=HEAP[$fromP_addr]; //@line 330 "xmltok.c"
        var $37=HEAP[$36]; //@line 330 "xmltok.c"
        HEAP[$from]=$37; //@line 330 "xmltok.c"
        __label__ = 7; break; //@line 330 "xmltok.c"
      case 6: // $bb5
        var $38=HEAP[$from]; //@line 331 "xmltok.c"
        var $39=HEAP[$38]; //@line 331 "xmltok.c"
        var $40=HEAP[$to]; //@line 331 "xmltok.c"
        HEAP[$40]=$39; //@line 331 "xmltok.c"
        var $41=HEAP[$from]; //@line 330 "xmltok.c"
        var $42=(($41+1)&4294967295); //@line 330 "xmltok.c"
        HEAP[$from]=$42; //@line 330 "xmltok.c"
        var $43=HEAP[$to]; //@line 330 "xmltok.c"
        var $44=(($43+1)&4294967295); //@line 330 "xmltok.c"
        HEAP[$to]=$44; //@line 330 "xmltok.c"
        __label__ = 7; break; //@line 330 "xmltok.c"
      case 7: // $bb6
        var $45=HEAP[$from]; //@line 330 "xmltok.c"
        var $46=HEAP[$fromLim_addr]; //@line 330 "xmltok.c"
        var $47=($45)!=($46); //@line 330 "xmltok.c"
        if ($47) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 330 "xmltok.c"
      case 8: // $bb7
        var $48=HEAP[$fromP_addr]; //@line 332 "xmltok.c"
        var $49=HEAP[$from]; //@line 332 "xmltok.c"
        HEAP[$48]=$49; //@line 332 "xmltok.c"
        var $50=HEAP[$toP_addr]; //@line 333 "xmltok.c"
        var $51=HEAP[$to]; //@line 333 "xmltok.c"
        HEAP[$50]=$51; //@line 333 "xmltok.c"
        __label__ = 9; break; //@line 334 "xmltok.c"
      case 9: // $return
        STACKTOP = __stackBase__;
        return; //@line 334 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _utf8_toUtf16($enc, $fromP, $fromLim, $toP, $toLim) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $fromP_addr=__stackBase__+4;
        var $fromLim_addr=__stackBase__+8;
        var $toP_addr=__stackBase__+12;
        var $toLim_addr=__stackBase__+16;
        var $to=__stackBase__+20;
        var $from=__stackBase__+24;
        var $n=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$fromP_addr]=$fromP;
        HEAP[$fromLim_addr]=$fromLim;
        HEAP[$toP_addr]=$toP;
        HEAP[$toLim_addr]=$toLim;
        var $0=HEAP[$toP_addr]; //@line 341 "xmltok.c"
        var $1=HEAP[$0]; //@line 341 "xmltok.c"
        HEAP[$to]=$1; //@line 341 "xmltok.c"
        var $2=HEAP[$fromP_addr]; //@line 342 "xmltok.c"
        var $3=HEAP[$2]; //@line 342 "xmltok.c"
        HEAP[$from]=$3; //@line 342 "xmltok.c"
        __label__ = 7; break; //@line 342 "xmltok.c"
      case 1: // $bb
        var $4=HEAP[$enc_addr]; //@line 344 "xmltok.c"
        var $5=$4; //@line 344 "xmltok.c"
        var $6=HEAP[$from]; //@line 344 "xmltok.c"
        var $7=HEAP[$6]; //@line 344 "xmltok.c"
        var $8=unSign(($7), 8, 0); //@line 344 "xmltok.c"
        var $9=(($5+72)&4294967295); //@line 344 "xmltok.c"
        var $10=(($9+$8)&4294967295); //@line 344 "xmltok.c"
        var $11=HEAP[$10]; //@line 344 "xmltok.c"
        var $12=unSign(($11), 8, 0); //@line 344 "xmltok.c"
        if ($12 == 5) {
          __label__ = 2; break;
        }
        else if ($12 == 6) {
          __label__ = 3; break;
        }
        else if ($12 == 7) {
          __label__ = 4; break;
        }
        else {
        __label__ = 6; break;
        }
        
      case 2: // $bb1
        var $13=HEAP[$from]; //@line 346 "xmltok.c"
        var $14=(($13)&4294967295); //@line 346 "xmltok.c"
        var $15=HEAP[$14]; //@line 346 "xmltok.c"
        var $16=reSign(($15), 8, 0); //@line 346 "xmltok.c"
        var $17=($16) & 31; //@line 346 "xmltok.c"
        var $18=($17) << 6; //@line 346 "xmltok.c"
        var $19=((($18)) & 65535); //@line 346 "xmltok.c"
        var $20=HEAP[$from]; //@line 346 "xmltok.c"
        var $21=(($20+1)&4294967295); //@line 346 "xmltok.c"
        var $22=HEAP[$21]; //@line 346 "xmltok.c"
        var $23=reSign(($22), 8, 0); //@line 346 "xmltok.c"
        var $24=($23) & 63; //@line 346 "xmltok.c"
        var $25=($19) | ($24); //@line 346 "xmltok.c"
        var $26=HEAP[$to]; //@line 346 "xmltok.c"
        HEAP[$26]=$25; //@line 346 "xmltok.c"
        var $27=HEAP[$to]; //@line 346 "xmltok.c"
        var $28=(($27+2)&4294967295); //@line 346 "xmltok.c"
        HEAP[$to]=$28; //@line 346 "xmltok.c"
        var $29=HEAP[$from]; //@line 347 "xmltok.c"
        var $30=(($29+2)&4294967295); //@line 347 "xmltok.c"
        HEAP[$from]=$30; //@line 347 "xmltok.c"
        __label__ = 7; break; //@line 347 "xmltok.c"
      case 3: // $bb2
        var $31=HEAP[$from]; //@line 350 "xmltok.c"
        var $32=(($31)&4294967295); //@line 350 "xmltok.c"
        var $33=HEAP[$32]; //@line 350 "xmltok.c"
        var $34=reSign(($33), 8, 0); //@line 350 "xmltok.c"
        var $35=($34) & 15; //@line 350 "xmltok.c"
        var $36=($35) << 12; //@line 350 "xmltok.c"
        var $37=((($36)) & 65535); //@line 350 "xmltok.c"
        var $38=HEAP[$from]; //@line 350 "xmltok.c"
        var $39=(($38+1)&4294967295); //@line 350 "xmltok.c"
        var $40=HEAP[$39]; //@line 350 "xmltok.c"
        var $41=reSign(($40), 8, 0); //@line 350 "xmltok.c"
        var $42=($41) & 63; //@line 350 "xmltok.c"
        var $43=($42) << 6; //@line 350 "xmltok.c"
        var $44=((($43)) & 65535); //@line 350 "xmltok.c"
        var $45=($37) | ($44); //@line 350 "xmltok.c"
        var $46=HEAP[$from]; //@line 350 "xmltok.c"
        var $47=(($46+2)&4294967295); //@line 350 "xmltok.c"
        var $48=HEAP[$47]; //@line 350 "xmltok.c"
        var $49=reSign(($48), 8, 0); //@line 350 "xmltok.c"
        var $50=($49) & 63; //@line 350 "xmltok.c"
        var $51=($45) | ($50); //@line 350 "xmltok.c"
        var $52=HEAP[$to]; //@line 350 "xmltok.c"
        HEAP[$52]=$51; //@line 350 "xmltok.c"
        var $53=HEAP[$to]; //@line 350 "xmltok.c"
        var $54=(($53+2)&4294967295); //@line 350 "xmltok.c"
        HEAP[$to]=$54; //@line 350 "xmltok.c"
        var $55=HEAP[$from]; //@line 352 "xmltok.c"
        var $56=(($55+3)&4294967295); //@line 352 "xmltok.c"
        HEAP[$from]=$56; //@line 352 "xmltok.c"
        __label__ = 7; break; //@line 352 "xmltok.c"
      case 4: // $bb3
        var $57=HEAP[$to]; //@line 357 "xmltok.c"
        var $58=(($57+2)&4294967295); //@line 357 "xmltok.c"
        var $59=HEAP[$toLim_addr]; //@line 357 "xmltok.c"
        var $60=($58)==($59); //@line 357 "xmltok.c"
        if ($60) { __label__ = 9; break; } else { __label__ = 5; break; } //@line 357 "xmltok.c"
      case 5: // $bb4
        var $61=HEAP[$from]; //@line 359 "xmltok.c"
        var $62=(($61)&4294967295); //@line 359 "xmltok.c"
        var $63=HEAP[$62]; //@line 359 "xmltok.c"
        var $64=reSign(($63), 8, 0); //@line 359 "xmltok.c"
        var $65=($64) & 7; //@line 359 "xmltok.c"
        var $66=($65) << 18; //@line 359 "xmltok.c"
        var $67=HEAP[$from]; //@line 359 "xmltok.c"
        var $68=(($67+1)&4294967295); //@line 359 "xmltok.c"
        var $69=HEAP[$68]; //@line 359 "xmltok.c"
        var $70=reSign(($69), 8, 0); //@line 359 "xmltok.c"
        var $71=($70) & 63; //@line 359 "xmltok.c"
        var $72=($71) << 12; //@line 359 "xmltok.c"
        var $73=($66) | ($72); //@line 359 "xmltok.c"
        var $74=HEAP[$from]; //@line 359 "xmltok.c"
        var $75=(($74+2)&4294967295); //@line 359 "xmltok.c"
        var $76=HEAP[$75]; //@line 359 "xmltok.c"
        var $77=reSign(($76), 8, 0); //@line 359 "xmltok.c"
        var $78=($77) & 63; //@line 359 "xmltok.c"
        var $79=($78) << 6; //@line 359 "xmltok.c"
        var $80=($73) | ($79); //@line 359 "xmltok.c"
        var $81=HEAP[$from]; //@line 359 "xmltok.c"
        var $82=(($81+3)&4294967295); //@line 359 "xmltok.c"
        var $83=HEAP[$82]; //@line 359 "xmltok.c"
        var $84=reSign(($83), 8, 0); //@line 359 "xmltok.c"
        var $85=($84) & 63; //@line 359 "xmltok.c"
        var $86=($80) | ($85); //@line 359 "xmltok.c"
        HEAP[$n]=$86; //@line 359 "xmltok.c"
        var $87=HEAP[$n]; //@line 361 "xmltok.c"
        var $88=((($87) - 65536)&4294967295); //@line 361 "xmltok.c"
        HEAP[$n]=$88; //@line 361 "xmltok.c"
        var $89=HEAP[$n]; //@line 362 "xmltok.c"
        var $90=((($89))>>>0) >>> 10; //@line 362 "xmltok.c"
        var $91=((($90)) & 65535); //@line 362 "xmltok.c"
        var $92=($91) | -10240; //@line 362 "xmltok.c"
        var $93=HEAP[$to]; //@line 362 "xmltok.c"
        var $94=(($93)&4294967295); //@line 362 "xmltok.c"
        HEAP[$94]=$92; //@line 362 "xmltok.c"
        var $95=HEAP[$n]; //@line 363 "xmltok.c"
        var $96=((($95)) & 65535); //@line 363 "xmltok.c"
        var $97=($96) & 1023; //@line 363 "xmltok.c"
        var $98=($97) | -9216; //@line 363 "xmltok.c"
        var $99=HEAP[$to]; //@line 363 "xmltok.c"
        var $100=(($99+2)&4294967295); //@line 363 "xmltok.c"
        HEAP[$100]=$98; //@line 363 "xmltok.c"
        var $101=HEAP[$to]; //@line 364 "xmltok.c"
        var $102=(($101+4)&4294967295); //@line 364 "xmltok.c"
        HEAP[$to]=$102; //@line 364 "xmltok.c"
        var $103=HEAP[$from]; //@line 365 "xmltok.c"
        var $104=(($103+4)&4294967295); //@line 365 "xmltok.c"
        HEAP[$from]=$104; //@line 365 "xmltok.c"
        __label__ = 7; break; //@line 365 "xmltok.c"
      case 6: // $bb5
        var $105=HEAP[$from]; //@line 369 "xmltok.c"
        var $106=HEAP[$105]; //@line 369 "xmltok.c"
        var $107=reSign(($106), 8, 0); //@line 369 "xmltok.c"
        var $108=HEAP[$to]; //@line 369 "xmltok.c"
        HEAP[$108]=$107; //@line 369 "xmltok.c"
        var $109=HEAP[$to]; //@line 369 "xmltok.c"
        var $110=(($109+2)&4294967295); //@line 369 "xmltok.c"
        HEAP[$to]=$110; //@line 369 "xmltok.c"
        var $111=HEAP[$from]; //@line 369 "xmltok.c"
        var $112=(($111+1)&4294967295); //@line 369 "xmltok.c"
        HEAP[$from]=$112; //@line 369 "xmltok.c"
        __label__ = 7; break; //@line 369 "xmltok.c"
      case 7: // $bb6
        var $113=HEAP[$from]; //@line 343 "xmltok.c"
        var $114=HEAP[$fromLim_addr]; //@line 343 "xmltok.c"
        var $115=($113)==($114); //@line 343 "xmltok.c"
        if ($115) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 343 "xmltok.c"
      case 8: // $bb7
        var $116=HEAP[$to]; //@line 343 "xmltok.c"
        var $117=HEAP[$toLim_addr]; //@line 343 "xmltok.c"
        var $118=($116)!=($117); //@line 343 "xmltok.c"
        if ($118) { __label__ = 1; break; } else { __label__ = 9; break; } //@line 343 "xmltok.c"
      case 9: // $after
        var $119=HEAP[$fromP_addr]; //@line 374 "xmltok.c"
        var $120=HEAP[$from]; //@line 374 "xmltok.c"
        HEAP[$119]=$120; //@line 374 "xmltok.c"
        var $121=HEAP[$toP_addr]; //@line 375 "xmltok.c"
        var $122=HEAP[$to]; //@line 375 "xmltok.c"
        HEAP[$121]=$122; //@line 375 "xmltok.c"
        __label__ = 10; break; //@line 376 "xmltok.c"
      case 10: // $return
        STACKTOP = __stackBase__;
        return; //@line 376 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _latin1_toUtf8($enc, $fromP, $fromLim, $toP, $toLim) {
    var __stackBase__  = STACKTOP; STACKTOP += 21; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 21);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $fromP_addr=__stackBase__+4;
        var $fromLim_addr=__stackBase__+8;
        var $toP_addr=__stackBase__+12;
        var $toLim_addr=__stackBase__+16;
        var $c=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$fromP_addr]=$fromP;
        HEAP[$fromLim_addr]=$fromLim;
        HEAP[$toP_addr]=$toP;
        HEAP[$toLim_addr]=$toLim;
        __label__ = 1; break; //@line 428 "xmltok.c"
      case 1: // $bb
        var $0=HEAP[$fromP_addr]; //@line 431 "xmltok.c"
        var $1=HEAP[$0]; //@line 431 "xmltok.c"
        var $2=HEAP[$fromLim_addr]; //@line 431 "xmltok.c"
        var $3=($1)==($2); //@line 431 "xmltok.c"
        if ($3) { __label__ = 8; break; } else { __label__ = 2; break; } //@line 431 "xmltok.c"
      case 2: // $bb1
        var $4=HEAP[$fromP_addr]; //@line 433 "xmltok.c"
        var $5=HEAP[$4]; //@line 433 "xmltok.c"
        var $6=HEAP[$5]; //@line 433 "xmltok.c"
        HEAP[$c]=$6; //@line 433 "xmltok.c"
        var $7=HEAP[$c]; //@line 434 "xmltok.c"
        var $8=reSign(($7), 8, 0) < 0; //@line 434 "xmltok.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 434 "xmltok.c"
      case 3: // $bb2
        var $9=HEAP[$toLim_addr]; //@line 435 "xmltok.c"
        var $10=($9); //@line 435 "xmltok.c"
        var $11=HEAP[$toP_addr]; //@line 435 "xmltok.c"
        var $12=HEAP[$11]; //@line 435 "xmltok.c"
        var $13=($12); //@line 435 "xmltok.c"
        var $14=((($10) - ($13))&4294967295); //@line 435 "xmltok.c"
        var $15=((($14))|0) <= 1; //@line 435 "xmltok.c"
        if ($15) { __label__ = 8; break; } else { __label__ = 4; break; } //@line 435 "xmltok.c"
      case 4: // $bb3
        var $16=HEAP[$toP_addr]; //@line 437 "xmltok.c"
        var $17=HEAP[$16]; //@line 437 "xmltok.c"
        var $18=HEAP[$c]; //@line 437 "xmltok.c"
        var $19=unSign(($18), 8, 0) >>> 6; //@line 437 "xmltok.c"
        var $20=($19) | -64; //@line 437 "xmltok.c"
        HEAP[$17]=$20; //@line 437 "xmltok.c"
        var $21=(($17+1)&4294967295); //@line 437 "xmltok.c"
        var $22=HEAP[$toP_addr]; //@line 437 "xmltok.c"
        HEAP[$22]=$21; //@line 437 "xmltok.c"
        var $23=HEAP[$toP_addr]; //@line 438 "xmltok.c"
        var $24=HEAP[$23]; //@line 438 "xmltok.c"
        var $25=HEAP[$c]; //@line 438 "xmltok.c"
        var $26=($25) & 63; //@line 438 "xmltok.c"
        var $27=($26) | -128; //@line 438 "xmltok.c"
        HEAP[$24]=$27; //@line 438 "xmltok.c"
        var $28=(($24+1)&4294967295); //@line 438 "xmltok.c"
        var $29=HEAP[$toP_addr]; //@line 438 "xmltok.c"
        HEAP[$29]=$28; //@line 438 "xmltok.c"
        var $30=HEAP[$fromP_addr]; //@line 439 "xmltok.c"
        var $31=HEAP[$30]; //@line 439 "xmltok.c"
        var $32=(($31+1)&4294967295); //@line 439 "xmltok.c"
        var $33=HEAP[$fromP_addr]; //@line 439 "xmltok.c"
        HEAP[$33]=$32; //@line 439 "xmltok.c"
        __label__ = 7; break; //@line 439 "xmltok.c"
      case 5: // $bb4
        var $34=HEAP[$toP_addr]; //@line 442 "xmltok.c"
        var $35=HEAP[$34]; //@line 442 "xmltok.c"
        var $36=HEAP[$toLim_addr]; //@line 442 "xmltok.c"
        var $37=($35)==($36); //@line 442 "xmltok.c"
        if ($37) { __label__ = 8; break; } else { __label__ = 6; break; } //@line 442 "xmltok.c"
      case 6: // $bb5
        var $38=HEAP[$toP_addr]; //@line 444 "xmltok.c"
        var $39=HEAP[$38]; //@line 444 "xmltok.c"
        var $40=HEAP[$fromP_addr]; //@line 444 "xmltok.c"
        var $41=HEAP[$40]; //@line 444 "xmltok.c"
        var $42=HEAP[$41]; //@line 444 "xmltok.c"
        HEAP[$39]=$42; //@line 444 "xmltok.c"
        var $43=(($39+1)&4294967295); //@line 444 "xmltok.c"
        var $44=HEAP[$toP_addr]; //@line 444 "xmltok.c"
        HEAP[$44]=$43; //@line 444 "xmltok.c"
        var $45=(($41+1)&4294967295); //@line 444 "xmltok.c"
        var $46=HEAP[$fromP_addr]; //@line 444 "xmltok.c"
        HEAP[$46]=$45; //@line 444 "xmltok.c"
        __label__ = 7; break; //@line 444 "xmltok.c"
      case 7: // $bb6
        __label__ = 1; break; //@line 444 "xmltok.c"
      case 8: // $bb7
        __label__ = 9; break; //@line 447 "xmltok.c"
      case 9: // $return
        STACKTOP = __stackBase__;
        return; //@line 447 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _latin1_toUtf16($enc, $fromP, $fromLim, $toP, $toLim) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $fromP_addr=__stackBase__+4;
        var $fromLim_addr=__stackBase__+8;
        var $toP_addr=__stackBase__+12;
        var $toLim_addr=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$fromP_addr]=$fromP;
        HEAP[$fromLim_addr]=$fromLim;
        HEAP[$toP_addr]=$toP;
        HEAP[$toLim_addr]=$toLim;
        __label__ = 2; break; //@line 454 "xmltok.c"
      case 1: // $bb
        var $0=HEAP[$toP_addr]; //@line 455 "xmltok.c"
        var $1=HEAP[$0]; //@line 455 "xmltok.c"
        var $2=HEAP[$fromP_addr]; //@line 455 "xmltok.c"
        var $3=HEAP[$2]; //@line 455 "xmltok.c"
        var $4=HEAP[$3]; //@line 455 "xmltok.c"
        var $5=unSign(($4), 8, 0); //@line 455 "xmltok.c"
        HEAP[$1]=$5; //@line 455 "xmltok.c"
        var $6=(($1+2)&4294967295); //@line 455 "xmltok.c"
        var $7=HEAP[$toP_addr]; //@line 455 "xmltok.c"
        HEAP[$7]=$6; //@line 455 "xmltok.c"
        var $8=(($3+1)&4294967295); //@line 455 "xmltok.c"
        var $9=HEAP[$fromP_addr]; //@line 455 "xmltok.c"
        HEAP[$9]=$8; //@line 455 "xmltok.c"
        __label__ = 2; break; //@line 455 "xmltok.c"
      case 2: // $bb1
        var $10=HEAP[$fromP_addr]; //@line 454 "xmltok.c"
        var $11=HEAP[$10]; //@line 454 "xmltok.c"
        var $12=HEAP[$fromLim_addr]; //@line 454 "xmltok.c"
        var $13=($11)==($12); //@line 454 "xmltok.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 454 "xmltok.c"
      case 3: // $bb2
        var $14=HEAP[$toP_addr]; //@line 454 "xmltok.c"
        var $15=HEAP[$14]; //@line 454 "xmltok.c"
        var $16=HEAP[$toLim_addr]; //@line 454 "xmltok.c"
        var $17=($15)!=($16); //@line 454 "xmltok.c"
        if ($17) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 454 "xmltok.c"
      case 4: // $bb3
        __label__ = 5; break; //@line 456 "xmltok.c"
      case 5: // $return
        STACKTOP = __stackBase__;
        return; //@line 456 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _ascii_toUtf8($enc, $fromP, $fromLim, $toP, $toLim) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $fromP_addr=__stackBase__+4;
        var $fromLim_addr=__stackBase__+8;
        var $toP_addr=__stackBase__+12;
        var $toLim_addr=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$fromP_addr]=$fromP;
        HEAP[$fromLim_addr]=$fromLim;
        HEAP[$toP_addr]=$toP;
        HEAP[$toLim_addr]=$toLim;
        __label__ = 2; break; //@line 487 "xmltok.c"
      case 1: // $bb
        var $0=HEAP[$toP_addr]; //@line 488 "xmltok.c"
        var $1=HEAP[$0]; //@line 488 "xmltok.c"
        var $2=HEAP[$fromP_addr]; //@line 488 "xmltok.c"
        var $3=HEAP[$2]; //@line 488 "xmltok.c"
        var $4=HEAP[$3]; //@line 488 "xmltok.c"
        HEAP[$1]=$4; //@line 488 "xmltok.c"
        var $5=(($1+1)&4294967295); //@line 488 "xmltok.c"
        var $6=HEAP[$toP_addr]; //@line 488 "xmltok.c"
        HEAP[$6]=$5; //@line 488 "xmltok.c"
        var $7=(($3+1)&4294967295); //@line 488 "xmltok.c"
        var $8=HEAP[$fromP_addr]; //@line 488 "xmltok.c"
        HEAP[$8]=$7; //@line 488 "xmltok.c"
        __label__ = 2; break; //@line 488 "xmltok.c"
      case 2: // $bb1
        var $9=HEAP[$fromP_addr]; //@line 487 "xmltok.c"
        var $10=HEAP[$9]; //@line 487 "xmltok.c"
        var $11=HEAP[$fromLim_addr]; //@line 487 "xmltok.c"
        var $12=($10)==($11); //@line 487 "xmltok.c"
        if ($12) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 487 "xmltok.c"
      case 3: // $bb2
        var $13=HEAP[$toP_addr]; //@line 487 "xmltok.c"
        var $14=HEAP[$13]; //@line 487 "xmltok.c"
        var $15=HEAP[$toLim_addr]; //@line 487 "xmltok.c"
        var $16=($14)!=($15); //@line 487 "xmltok.c"
        if ($16) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 487 "xmltok.c"
      case 4: // $bb3
        __label__ = 5; break; //@line 489 "xmltok.c"
      case 5: // $return
        STACKTOP = __stackBase__;
        return; //@line 489 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _unicode_byte_type($hi, $lo) {
    var __stackBase__  = STACKTOP; STACKTOP += 10; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 10);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $hi_addr=__stackBase__;
        var $lo_addr=__stackBase__+1;
        var $retval=__stackBase__+2;
        var $0=__stackBase__+6;
        var $_alloca_point_=0;
        HEAP[$hi_addr]=$hi;
        HEAP[$lo_addr]=$lo;
        var $1=HEAP[$hi_addr]; //@line 518 "xmltok.c"
        var $2=unSign(($1), 8, 0); //@line 518 "xmltok.c"
        if ($2 == 216) {
          __label__ = 1; break;
        }
        else if ($2 == 217) {
          __label__ = 1; break;
        }
        else if ($2 == 218) {
          __label__ = 1; break;
        }
        else if ($2 == 219) {
          __label__ = 1; break;
        }
        else if ($2 == 220) {
          __label__ = 2; break;
        }
        else if ($2 == 221) {
          __label__ = 2; break;
        }
        else if ($2 == 222) {
          __label__ = 2; break;
        }
        else if ($2 == 223) {
          __label__ = 2; break;
        }
        else if ($2 == 255) {
          __label__ = 3; break;
        }
        else {
        __label__ = 5; break;
        }
        
      case 1: // $bb
        HEAP[$0]=7; //@line 520 "xmltok.c"
        __label__ = 6; break; //@line 520 "xmltok.c"
      case 2: // $bb1
        HEAP[$0]=8; //@line 522 "xmltok.c"
        __label__ = 6; break; //@line 522 "xmltok.c"
      case 3: // $bb2
        var $3=HEAP[$lo_addr]; //@line 524 "xmltok.c"
        var $4=unSign(($3), 8, 0); //@line 524 "xmltok.c"
        if ($4 == 254) {
          __label__ = 4; break;
        }
        else if ($4 == 255) {
          __label__ = 4; break;
        }
        else {
        __label__ = 5; break;
        }
        
      case 4: // $bb3
        HEAP[$0]=0; //@line 527 "xmltok.c"
        __label__ = 6; break; //@line 527 "xmltok.c"
      case 5: // $bb4
        HEAP[$0]=29; //@line 531 "xmltok.c"
        __label__ = 6; break; //@line 531 "xmltok.c"
      case 6: // $bb5
        var $5=HEAP[$0]; //@line 520 "xmltok.c"
        HEAP[$retval]=$5; //@line 520 "xmltok.c"
        __label__ = 7; break; //@line 520 "xmltok.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 520 "xmltok.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 520 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_toUtf8($enc, $fromP, $fromLim, $toP, $toLim) {
    var __stackBase__  = STACKTOP; STACKTOP += 31; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 31);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $fromP_addr=__stackBase__+4;
        var $fromLim_addr=__stackBase__+8;
        var $toP_addr=__stackBase__+12;
        var $toLim_addr=__stackBase__+16;
        var $from=__stackBase__+20;
        var $plane=__stackBase__+24;
        var $lo2=__stackBase__+28;
        var $lo=__stackBase__+29;
        var $hi=__stackBase__+30;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$fromP_addr]=$fromP;
        HEAP[$fromLim_addr]=$fromLim;
        HEAP[$toP_addr]=$toP;
        HEAP[$toLim_addr]=$toLim;
        var $0=HEAP[$fromP_addr]; //@line 616 "xmltok.c"
        var $1=HEAP[$0]; //@line 616 "xmltok.c"
        HEAP[$from]=$1; //@line 616 "xmltok.c"
        __label__ = 16; break; //@line 616 "xmltok.c"
      case 1: // $bb
        var $2=HEAP[$from]; //@line 616 "xmltok.c"
        var $3=(($2)&4294967295); //@line 616 "xmltok.c"
        var $4=HEAP[$3]; //@line 616 "xmltok.c"
        HEAP[$lo]=$4; //@line 616 "xmltok.c"
        var $5=HEAP[$from]; //@line 616 "xmltok.c"
        var $6=(($5+1)&4294967295); //@line 616 "xmltok.c"
        var $7=HEAP[$6]; //@line 616 "xmltok.c"
        HEAP[$hi]=$7; //@line 616 "xmltok.c"
        var $8=HEAP[$hi]; //@line 616 "xmltok.c"
        var $9=unSign(($8), 8, 0); //@line 616 "xmltok.c"
        if ($9 == 0) {
          __label__ = 2; break;
        }
        else if ($9 == 1) {
          __label__ = 6; break;
        }
        else if ($9 == 2) {
          __label__ = 6; break;
        }
        else if ($9 == 3) {
          __label__ = 6; break;
        }
        else if ($9 == 4) {
          __label__ = 6; break;
        }
        else if ($9 == 5) {
          __label__ = 6; break;
        }
        else if ($9 == 6) {
          __label__ = 6; break;
        }
        else if ($9 == 7) {
          __label__ = 6; break;
        }
        else if ($9 == 216) {
          __label__ = 12; break;
        }
        else if ($9 == 217) {
          __label__ = 12; break;
        }
        else if ($9 == 218) {
          __label__ = 12; break;
        }
        else if ($9 == 219) {
          __label__ = 12; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 2: // $bb1
        var $10=HEAP[$lo]; //@line 616 "xmltok.c"
        var $11=reSign(($10), 8, 0) >= 0; //@line 616 "xmltok.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 616 "xmltok.c"
      case 3: // $bb2
        var $12=HEAP[$toP_addr]; //@line 616 "xmltok.c"
        var $13=HEAP[$12]; //@line 616 "xmltok.c"
        var $14=HEAP[$toLim_addr]; //@line 616 "xmltok.c"
        var $15=($13)==($14); //@line 616 "xmltok.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 616 "xmltok.c"
      case 4: // $bb3
        var $16=HEAP[$fromP_addr]; //@line 616 "xmltok.c"
        var $17=HEAP[$from]; //@line 616 "xmltok.c"
        HEAP[$16]=$17; //@line 616 "xmltok.c"
        __label__ = 18; break; //@line 616 "xmltok.c"
      case 5: // $bb4
        var $18=HEAP[$toP_addr]; //@line 616 "xmltok.c"
        var $19=HEAP[$18]; //@line 616 "xmltok.c"
        var $20=HEAP[$lo]; //@line 616 "xmltok.c"
        HEAP[$19]=$20; //@line 616 "xmltok.c"
        var $21=(($19+1)&4294967295); //@line 616 "xmltok.c"
        var $22=HEAP[$toP_addr]; //@line 616 "xmltok.c"
        HEAP[$22]=$21; //@line 616 "xmltok.c"
        __label__ = 15; break; //@line 616 "xmltok.c"
      case 6: // $bb5
        var $23=HEAP[$toLim_addr]; //@line 616 "xmltok.c"
        var $24=($23); //@line 616 "xmltok.c"
        var $25=HEAP[$toP_addr]; //@line 616 "xmltok.c"
        var $26=HEAP[$25]; //@line 616 "xmltok.c"
        var $27=($26); //@line 616 "xmltok.c"
        var $28=((($24) - ($27))&4294967295); //@line 616 "xmltok.c"
        var $29=((($28))|0) <= 1; //@line 616 "xmltok.c"
        if ($29) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 616 "xmltok.c"
      case 7: // $bb6
        var $30=HEAP[$fromP_addr]; //@line 616 "xmltok.c"
        var $31=HEAP[$from]; //@line 616 "xmltok.c"
        HEAP[$30]=$31; //@line 616 "xmltok.c"
        __label__ = 18; break; //@line 616 "xmltok.c"
      case 8: // $bb7
        var $32=HEAP[$toP_addr]; //@line 616 "xmltok.c"
        var $33=HEAP[$32]; //@line 616 "xmltok.c"
        var $34=HEAP[$lo]; //@line 616 "xmltok.c"
        var $35=unSign(($34), 8, 0) >>> 6; //@line 616 "xmltok.c"
        var $36=HEAP[$hi]; //@line 616 "xmltok.c"
        var $37=unSign(($36), 8, 0); //@line 616 "xmltok.c"
        var $38=($37) << 2; //@line 616 "xmltok.c"
        var $39=((($38)) & 255); //@line 616 "xmltok.c"
        var $40=($35) | ($39); //@line 616 "xmltok.c"
        var $41=($40) | -64; //@line 616 "xmltok.c"
        HEAP[$33]=$41; //@line 616 "xmltok.c"
        var $42=(($33+1)&4294967295); //@line 616 "xmltok.c"
        var $43=HEAP[$toP_addr]; //@line 616 "xmltok.c"
        HEAP[$43]=$42; //@line 616 "xmltok.c"
        var $44=HEAP[$toP_addr]; //@line 616 "xmltok.c"
        var $45=HEAP[$44]; //@line 616 "xmltok.c"
        var $46=HEAP[$lo]; //@line 616 "xmltok.c"
        var $47=($46) & 63; //@line 616 "xmltok.c"
        var $48=($47) | -128; //@line 616 "xmltok.c"
        HEAP[$45]=$48; //@line 616 "xmltok.c"
        var $49=(($45+1)&4294967295); //@line 616 "xmltok.c"
        var $50=HEAP[$toP_addr]; //@line 616 "xmltok.c"
        HEAP[$50]=$49; //@line 616 "xmltok.c"
        __label__ = 15; break; //@line 616 "xmltok.c"
      case 9: // $bb8
        var $51=HEAP[$toLim_addr]; //@line 616 "xmltok.c"
        var $52=($51); //@line 616 "xmltok.c"
        var $53=HEAP[$toP_addr]; //@line 616 "xmltok.c"
        var $54=HEAP[$53]; //@line 616 "xmltok.c"
        var $55=($54); //@line 616 "xmltok.c"
        var $56=((($52) - ($55))&4294967295); //@line 616 "xmltok.c"
        var $57=((($56))|0) <= 2; //@line 616 "xmltok.c"
        if ($57) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 616 "xmltok.c"
      case 10: // $bb9
        var $58=HEAP[$fromP_addr]; //@line 616 "xmltok.c"
        var $59=HEAP[$from]; //@line 616 "xmltok.c"
        HEAP[$58]=$59; //@line 616 "xmltok.c"
        __label__ = 18; break; //@line 616 "xmltok.c"
      case 11: // $bb10
        var $60=HEAP[$toP_addr]; //@line 616 "xmltok.c"
        var $61=HEAP[$60]; //@line 616 "xmltok.c"
        var $62=HEAP[$hi]; //@line 616 "xmltok.c"
        var $63=unSign(($62), 8, 0) >>> 4; //@line 616 "xmltok.c"
        var $64=($63) | -32; //@line 616 "xmltok.c"
        HEAP[$61]=$64; //@line 616 "xmltok.c"
        var $65=(($61+1)&4294967295); //@line 616 "xmltok.c"
        var $66=HEAP[$toP_addr]; //@line 616 "xmltok.c"
        HEAP[$66]=$65; //@line 616 "xmltok.c"
        var $67=HEAP[$toP_addr]; //@line 616 "xmltok.c"
        var $68=HEAP[$67]; //@line 616 "xmltok.c"
        var $69=HEAP[$hi]; //@line 616 "xmltok.c"
        var $70=unSign(($69), 8, 0); //@line 616 "xmltok.c"
        var $71=($70) & 15; //@line 616 "xmltok.c"
        var $72=($71) << 2; //@line 616 "xmltok.c"
        var $73=((($72)) & 255); //@line 616 "xmltok.c"
        var $74=HEAP[$lo]; //@line 616 "xmltok.c"
        var $75=unSign(($74), 8, 0) >>> 6; //@line 616 "xmltok.c"
        var $76=($73) | ($75); //@line 616 "xmltok.c"
        var $77=($76) | -128; //@line 616 "xmltok.c"
        HEAP[$68]=$77; //@line 616 "xmltok.c"
        var $78=(($68+1)&4294967295); //@line 616 "xmltok.c"
        var $79=HEAP[$toP_addr]; //@line 616 "xmltok.c"
        HEAP[$79]=$78; //@line 616 "xmltok.c"
        var $80=HEAP[$toP_addr]; //@line 616 "xmltok.c"
        var $81=HEAP[$80]; //@line 616 "xmltok.c"
        var $82=HEAP[$lo]; //@line 616 "xmltok.c"
        var $83=($82) & 63; //@line 616 "xmltok.c"
        var $84=($83) | -128; //@line 616 "xmltok.c"
        HEAP[$81]=$84; //@line 616 "xmltok.c"
        var $85=(($81+1)&4294967295); //@line 616 "xmltok.c"
        var $86=HEAP[$toP_addr]; //@line 616 "xmltok.c"
        HEAP[$86]=$85; //@line 616 "xmltok.c"
        __label__ = 15; break; //@line 616 "xmltok.c"
      case 12: // $bb11
        var $87=HEAP[$toLim_addr]; //@line 616 "xmltok.c"
        var $88=($87); //@line 616 "xmltok.c"
        var $89=HEAP[$toP_addr]; //@line 616 "xmltok.c"
        var $90=HEAP[$89]; //@line 616 "xmltok.c"
        var $91=($90); //@line 616 "xmltok.c"
        var $92=((($88) - ($91))&4294967295); //@line 616 "xmltok.c"
        var $93=((($92))|0) <= 3; //@line 616 "xmltok.c"
        if ($93) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 616 "xmltok.c"
      case 13: // $bb12
        var $94=HEAP[$fromP_addr]; //@line 616 "xmltok.c"
        var $95=HEAP[$from]; //@line 616 "xmltok.c"
        HEAP[$94]=$95; //@line 616 "xmltok.c"
        __label__ = 18; break; //@line 616 "xmltok.c"
      case 14: // $bb13
        var $96=HEAP[$hi]; //@line 616 "xmltok.c"
        var $97=unSign(($96), 8, 0); //@line 616 "xmltok.c"
        var $98=($97) & 3; //@line 616 "xmltok.c"
        var $99=($98) << 2; //@line 616 "xmltok.c"
        var $100=HEAP[$lo]; //@line 616 "xmltok.c"
        var $101=unSign(($100), 8, 0) >>> 6; //@line 616 "xmltok.c"
        var $102=unSign(($101), 8, 0); //@line 616 "xmltok.c"
        var $103=($102) & 3; //@line 616 "xmltok.c"
        var $104=($99) | ($103); //@line 616 "xmltok.c"
        var $105=((($104) + 1)&4294967295); //@line 616 "xmltok.c"
        HEAP[$plane]=$105; //@line 616 "xmltok.c"
        var $106=HEAP[$toP_addr]; //@line 616 "xmltok.c"
        var $107=HEAP[$106]; //@line 616 "xmltok.c"
        var $108=HEAP[$plane]; //@line 616 "xmltok.c"
        var $109=((($108))|0) >> 2; //@line 616 "xmltok.c"
        var $110=((($109)) & 255); //@line 616 "xmltok.c"
        var $111=($110) | -16; //@line 616 "xmltok.c"
        HEAP[$107]=$111; //@line 616 "xmltok.c"
        var $112=(($107+1)&4294967295); //@line 616 "xmltok.c"
        var $113=HEAP[$toP_addr]; //@line 616 "xmltok.c"
        HEAP[$113]=$112; //@line 616 "xmltok.c"
        var $114=HEAP[$toP_addr]; //@line 616 "xmltok.c"
        var $115=HEAP[$114]; //@line 616 "xmltok.c"
        var $116=HEAP[$lo]; //@line 616 "xmltok.c"
        var $117=unSign(($116), 8, 0) >>> 2; //@line 616 "xmltok.c"
        var $118=($117) & 15; //@line 616 "xmltok.c"
        var $119=HEAP[$plane]; //@line 616 "xmltok.c"
        var $120=($119) & 3; //@line 616 "xmltok.c"
        var $121=($120) << 4; //@line 616 "xmltok.c"
        var $122=((($121)) & 255); //@line 616 "xmltok.c"
        var $123=($118) | ($122); //@line 616 "xmltok.c"
        var $124=($123) | -128; //@line 616 "xmltok.c"
        HEAP[$115]=$124; //@line 616 "xmltok.c"
        var $125=(($115+1)&4294967295); //@line 616 "xmltok.c"
        var $126=HEAP[$toP_addr]; //@line 616 "xmltok.c"
        HEAP[$126]=$125; //@line 616 "xmltok.c"
        var $127=HEAP[$from]; //@line 616 "xmltok.c"
        var $128=(($127+2)&4294967295); //@line 616 "xmltok.c"
        HEAP[$from]=$128; //@line 616 "xmltok.c"
        var $129=HEAP[$from]; //@line 616 "xmltok.c"
        var $130=(($129)&4294967295); //@line 616 "xmltok.c"
        var $131=HEAP[$130]; //@line 616 "xmltok.c"
        HEAP[$lo2]=$131; //@line 616 "xmltok.c"
        var $132=HEAP[$toP_addr]; //@line 616 "xmltok.c"
        var $133=HEAP[$132]; //@line 616 "xmltok.c"
        var $134=HEAP[$lo]; //@line 616 "xmltok.c"
        var $135=unSign(($134), 8, 0); //@line 616 "xmltok.c"
        var $136=($135) & 3; //@line 616 "xmltok.c"
        var $137=($136) << 4; //@line 616 "xmltok.c"
        var $138=((($137)) & 255); //@line 616 "xmltok.c"
        var $139=HEAP[$from]; //@line 616 "xmltok.c"
        var $140=(($139+1)&4294967295); //@line 616 "xmltok.c"
        var $141=HEAP[$140]; //@line 616 "xmltok.c"
        var $142=unSign(($141), 8, 0); //@line 616 "xmltok.c"
        var $143=($142) & 3; //@line 616 "xmltok.c"
        var $144=($143) << 2; //@line 616 "xmltok.c"
        var $145=((($144)) & 255); //@line 616 "xmltok.c"
        var $146=($138) | ($145); //@line 616 "xmltok.c"
        var $147=HEAP[$lo2]; //@line 616 "xmltok.c"
        var $148=unSign(($147), 8, 0) >>> 6; //@line 616 "xmltok.c"
        var $149=($146) | ($148); //@line 616 "xmltok.c"
        var $150=($149) | -128; //@line 616 "xmltok.c"
        HEAP[$133]=$150; //@line 616 "xmltok.c"
        var $151=(($133+1)&4294967295); //@line 616 "xmltok.c"
        var $152=HEAP[$toP_addr]; //@line 616 "xmltok.c"
        HEAP[$152]=$151; //@line 616 "xmltok.c"
        var $153=HEAP[$toP_addr]; //@line 616 "xmltok.c"
        var $154=HEAP[$153]; //@line 616 "xmltok.c"
        var $155=HEAP[$lo2]; //@line 616 "xmltok.c"
        var $156=($155) & 63; //@line 616 "xmltok.c"
        var $157=($156) | -128; //@line 616 "xmltok.c"
        HEAP[$154]=$157; //@line 616 "xmltok.c"
        var $158=(($154+1)&4294967295); //@line 616 "xmltok.c"
        var $159=HEAP[$toP_addr]; //@line 616 "xmltok.c"
        HEAP[$159]=$158; //@line 616 "xmltok.c"
        __label__ = 15; break; //@line 616 "xmltok.c"
      case 15: // $bb14
        var $160=HEAP[$from]; //@line 616 "xmltok.c"
        var $161=(($160+2)&4294967295); //@line 616 "xmltok.c"
        HEAP[$from]=$161; //@line 616 "xmltok.c"
        __label__ = 16; break; //@line 616 "xmltok.c"
      case 16: // $bb15
        var $162=HEAP[$from]; //@line 616 "xmltok.c"
        var $163=HEAP[$fromLim_addr]; //@line 616 "xmltok.c"
        var $164=($162)!=($163); //@line 616 "xmltok.c"
        if ($164) { __label__ = 1; break; } else { __label__ = 17; break; } //@line 616 "xmltok.c"
      case 17: // $bb16
        var $165=HEAP[$fromP_addr]; //@line 616 "xmltok.c"
        var $166=HEAP[$from]; //@line 616 "xmltok.c"
        HEAP[$165]=$166; //@line 616 "xmltok.c"
        __label__ = 18; break; //@line 616 "xmltok.c"
      case 18: // $bb17
        __label__ = 19; break; //@line 616 "xmltok.c"
      case 19: // $return
        STACKTOP = __stackBase__;
        return; //@line 616 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_toUtf16($enc, $fromP, $fromLim, $toP, $toLim) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $fromP_addr=__stackBase__+4;
        var $fromLim_addr=__stackBase__+8;
        var $toP_addr=__stackBase__+12;
        var $toLim_addr=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$fromP_addr]=$fromP;
        HEAP[$fromLim_addr]=$fromLim;
        HEAP[$toP_addr]=$toP;
        HEAP[$toLim_addr]=$toLim;
        var $0=HEAP[$fromLim_addr]; //@line 617 "xmltok.c"
        var $1=($0); //@line 617 "xmltok.c"
        var $2=HEAP[$fromP_addr]; //@line 617 "xmltok.c"
        var $3=HEAP[$2]; //@line 617 "xmltok.c"
        var $4=($3); //@line 617 "xmltok.c"
        var $5=((($1) - ($4))&4294967295); //@line 617 "xmltok.c"
        var $6=HEAP[$toLim_addr]; //@line 617 "xmltok.c"
        var $7=($6); //@line 617 "xmltok.c"
        var $8=HEAP[$toP_addr]; //@line 617 "xmltok.c"
        var $9=HEAP[$8]; //@line 617 "xmltok.c"
        var $10=($9); //@line 617 "xmltok.c"
        var $11=((($7) - ($10))&4294967295); //@line 617 "xmltok.c"
        var $12=((((($11))|0)/2)|0); //@line 617 "xmltok.c"
        var $13=($12) << 1; //@line 617 "xmltok.c"
        var $14=((($5))|0) > ((($13))|0); //@line 617 "xmltok.c"
        if ($14) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 617 "xmltok.c"
      case 1: // $bb
        var $15=HEAP[$fromLim_addr]; //@line 617 "xmltok.c"
        var $16=(($15+-2)&4294967295); //@line 617 "xmltok.c"
        var $17=(($16+1)&4294967295); //@line 617 "xmltok.c"
        var $18=HEAP[$17]; //@line 617 "xmltok.c"
        var $19=unSign(($18), 8, 0); //@line 617 "xmltok.c"
        var $20=($19) & 248; //@line 617 "xmltok.c"
        var $21=((($20))|0)==216; //@line 617 "xmltok.c"
        if ($21) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 617 "xmltok.c"
      case 2: // $bb1
        var $22=HEAP[$fromLim_addr]; //@line 617 "xmltok.c"
        var $23=(($22+-2)&4294967295); //@line 617 "xmltok.c"
        HEAP[$fromLim_addr]=$23; //@line 617 "xmltok.c"
        __label__ = 3; break; //@line 617 "xmltok.c"
      case 3: // $bb2
        __label__ = 5; break; //@line 617 "xmltok.c"
      case 4: // $bb3
        var $24=HEAP[$toP_addr]; //@line 617 "xmltok.c"
        var $25=HEAP[$24]; //@line 617 "xmltok.c"
        var $26=HEAP[$fromP_addr]; //@line 617 "xmltok.c"
        var $27=HEAP[$26]; //@line 617 "xmltok.c"
        var $28=(($27+1)&4294967295); //@line 617 "xmltok.c"
        var $29=HEAP[$28]; //@line 617 "xmltok.c"
        var $30=unSign(($29), 8, 0); //@line 617 "xmltok.c"
        var $31=($30) << 8; //@line 617 "xmltok.c"
        var $32=((($31)) & 65535); //@line 617 "xmltok.c"
        var $33=HEAP[$fromP_addr]; //@line 617 "xmltok.c"
        var $34=HEAP[$33]; //@line 617 "xmltok.c"
        var $35=(($34)&4294967295); //@line 617 "xmltok.c"
        var $36=HEAP[$35]; //@line 617 "xmltok.c"
        var $37=unSign(($36), 8, 0); //@line 617 "xmltok.c"
        var $38=($32) | ($37); //@line 617 "xmltok.c"
        HEAP[$25]=$38; //@line 617 "xmltok.c"
        var $39=(($25+2)&4294967295); //@line 617 "xmltok.c"
        var $40=HEAP[$toP_addr]; //@line 617 "xmltok.c"
        HEAP[$40]=$39; //@line 617 "xmltok.c"
        var $41=HEAP[$fromP_addr]; //@line 617 "xmltok.c"
        var $42=HEAP[$41]; //@line 617 "xmltok.c"
        var $43=(($42+2)&4294967295); //@line 617 "xmltok.c"
        var $44=HEAP[$fromP_addr]; //@line 617 "xmltok.c"
        HEAP[$44]=$43; //@line 617 "xmltok.c"
        __label__ = 5; break; //@line 617 "xmltok.c"
      case 5: // $bb4
        var $45=HEAP[$fromP_addr]; //@line 617 "xmltok.c"
        var $46=HEAP[$45]; //@line 617 "xmltok.c"
        var $47=HEAP[$fromLim_addr]; //@line 617 "xmltok.c"
        var $48=($46)==($47); //@line 617 "xmltok.c"
        if ($48) { __label__ = 7; break; } else { __label__ = 6; break; } //@line 617 "xmltok.c"
      case 6: // $bb5
        var $49=HEAP[$toP_addr]; //@line 617 "xmltok.c"
        var $50=HEAP[$49]; //@line 617 "xmltok.c"
        var $51=HEAP[$toLim_addr]; //@line 617 "xmltok.c"
        var $52=($50)!=($51); //@line 617 "xmltok.c"
        if ($52) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 617 "xmltok.c"
      case 7: // $bb6
        __label__ = 8; break; //@line 617 "xmltok.c"
      case 8: // $return
        STACKTOP = __stackBase__;
        return; //@line 617 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_toUtf8($enc, $fromP, $fromLim, $toP, $toLim) {
    var __stackBase__  = STACKTOP; STACKTOP += 31; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 31);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $fromP_addr=__stackBase__+4;
        var $fromLim_addr=__stackBase__+8;
        var $toP_addr=__stackBase__+12;
        var $toLim_addr=__stackBase__+16;
        var $from=__stackBase__+20;
        var $plane=__stackBase__+24;
        var $lo2=__stackBase__+28;
        var $lo=__stackBase__+29;
        var $hi=__stackBase__+30;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$fromP_addr]=$fromP;
        HEAP[$fromLim_addr]=$fromLim;
        HEAP[$toP_addr]=$toP;
        HEAP[$toLim_addr]=$toLim;
        var $0=HEAP[$fromP_addr]; //@line 628 "xmltok.c"
        var $1=HEAP[$0]; //@line 628 "xmltok.c"
        HEAP[$from]=$1; //@line 628 "xmltok.c"
        __label__ = 16; break; //@line 628 "xmltok.c"
      case 1: // $bb
        var $2=HEAP[$from]; //@line 628 "xmltok.c"
        var $3=(($2+1)&4294967295); //@line 628 "xmltok.c"
        var $4=HEAP[$3]; //@line 628 "xmltok.c"
        HEAP[$lo]=$4; //@line 628 "xmltok.c"
        var $5=HEAP[$from]; //@line 628 "xmltok.c"
        var $6=(($5)&4294967295); //@line 628 "xmltok.c"
        var $7=HEAP[$6]; //@line 628 "xmltok.c"
        HEAP[$hi]=$7; //@line 628 "xmltok.c"
        var $8=HEAP[$hi]; //@line 628 "xmltok.c"
        var $9=unSign(($8), 8, 0); //@line 628 "xmltok.c"
        if ($9 == 0) {
          __label__ = 2; break;
        }
        else if ($9 == 1) {
          __label__ = 6; break;
        }
        else if ($9 == 2) {
          __label__ = 6; break;
        }
        else if ($9 == 3) {
          __label__ = 6; break;
        }
        else if ($9 == 4) {
          __label__ = 6; break;
        }
        else if ($9 == 5) {
          __label__ = 6; break;
        }
        else if ($9 == 6) {
          __label__ = 6; break;
        }
        else if ($9 == 7) {
          __label__ = 6; break;
        }
        else if ($9 == 216) {
          __label__ = 12; break;
        }
        else if ($9 == 217) {
          __label__ = 12; break;
        }
        else if ($9 == 218) {
          __label__ = 12; break;
        }
        else if ($9 == 219) {
          __label__ = 12; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 2: // $bb1
        var $10=HEAP[$lo]; //@line 628 "xmltok.c"
        var $11=reSign(($10), 8, 0) >= 0; //@line 628 "xmltok.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 628 "xmltok.c"
      case 3: // $bb2
        var $12=HEAP[$toP_addr]; //@line 628 "xmltok.c"
        var $13=HEAP[$12]; //@line 628 "xmltok.c"
        var $14=HEAP[$toLim_addr]; //@line 628 "xmltok.c"
        var $15=($13)==($14); //@line 628 "xmltok.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 628 "xmltok.c"
      case 4: // $bb3
        var $16=HEAP[$fromP_addr]; //@line 628 "xmltok.c"
        var $17=HEAP[$from]; //@line 628 "xmltok.c"
        HEAP[$16]=$17; //@line 628 "xmltok.c"
        __label__ = 18; break; //@line 628 "xmltok.c"
      case 5: // $bb4
        var $18=HEAP[$toP_addr]; //@line 628 "xmltok.c"
        var $19=HEAP[$18]; //@line 628 "xmltok.c"
        var $20=HEAP[$lo]; //@line 628 "xmltok.c"
        HEAP[$19]=$20; //@line 628 "xmltok.c"
        var $21=(($19+1)&4294967295); //@line 628 "xmltok.c"
        var $22=HEAP[$toP_addr]; //@line 628 "xmltok.c"
        HEAP[$22]=$21; //@line 628 "xmltok.c"
        __label__ = 15; break; //@line 628 "xmltok.c"
      case 6: // $bb5
        var $23=HEAP[$toLim_addr]; //@line 628 "xmltok.c"
        var $24=($23); //@line 628 "xmltok.c"
        var $25=HEAP[$toP_addr]; //@line 628 "xmltok.c"
        var $26=HEAP[$25]; //@line 628 "xmltok.c"
        var $27=($26); //@line 628 "xmltok.c"
        var $28=((($24) - ($27))&4294967295); //@line 628 "xmltok.c"
        var $29=((($28))|0) <= 1; //@line 628 "xmltok.c"
        if ($29) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 628 "xmltok.c"
      case 7: // $bb6
        var $30=HEAP[$fromP_addr]; //@line 628 "xmltok.c"
        var $31=HEAP[$from]; //@line 628 "xmltok.c"
        HEAP[$30]=$31; //@line 628 "xmltok.c"
        __label__ = 18; break; //@line 628 "xmltok.c"
      case 8: // $bb7
        var $32=HEAP[$toP_addr]; //@line 628 "xmltok.c"
        var $33=HEAP[$32]; //@line 628 "xmltok.c"
        var $34=HEAP[$lo]; //@line 628 "xmltok.c"
        var $35=unSign(($34), 8, 0) >>> 6; //@line 628 "xmltok.c"
        var $36=HEAP[$hi]; //@line 628 "xmltok.c"
        var $37=unSign(($36), 8, 0); //@line 628 "xmltok.c"
        var $38=($37) << 2; //@line 628 "xmltok.c"
        var $39=((($38)) & 255); //@line 628 "xmltok.c"
        var $40=($35) | ($39); //@line 628 "xmltok.c"
        var $41=($40) | -64; //@line 628 "xmltok.c"
        HEAP[$33]=$41; //@line 628 "xmltok.c"
        var $42=(($33+1)&4294967295); //@line 628 "xmltok.c"
        var $43=HEAP[$toP_addr]; //@line 628 "xmltok.c"
        HEAP[$43]=$42; //@line 628 "xmltok.c"
        var $44=HEAP[$toP_addr]; //@line 628 "xmltok.c"
        var $45=HEAP[$44]; //@line 628 "xmltok.c"
        var $46=HEAP[$lo]; //@line 628 "xmltok.c"
        var $47=($46) & 63; //@line 628 "xmltok.c"
        var $48=($47) | -128; //@line 628 "xmltok.c"
        HEAP[$45]=$48; //@line 628 "xmltok.c"
        var $49=(($45+1)&4294967295); //@line 628 "xmltok.c"
        var $50=HEAP[$toP_addr]; //@line 628 "xmltok.c"
        HEAP[$50]=$49; //@line 628 "xmltok.c"
        __label__ = 15; break; //@line 628 "xmltok.c"
      case 9: // $bb8
        var $51=HEAP[$toLim_addr]; //@line 628 "xmltok.c"
        var $52=($51); //@line 628 "xmltok.c"
        var $53=HEAP[$toP_addr]; //@line 628 "xmltok.c"
        var $54=HEAP[$53]; //@line 628 "xmltok.c"
        var $55=($54); //@line 628 "xmltok.c"
        var $56=((($52) - ($55))&4294967295); //@line 628 "xmltok.c"
        var $57=((($56))|0) <= 2; //@line 628 "xmltok.c"
        if ($57) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 628 "xmltok.c"
      case 10: // $bb9
        var $58=HEAP[$fromP_addr]; //@line 628 "xmltok.c"
        var $59=HEAP[$from]; //@line 628 "xmltok.c"
        HEAP[$58]=$59; //@line 628 "xmltok.c"
        __label__ = 18; break; //@line 628 "xmltok.c"
      case 11: // $bb10
        var $60=HEAP[$toP_addr]; //@line 628 "xmltok.c"
        var $61=HEAP[$60]; //@line 628 "xmltok.c"
        var $62=HEAP[$hi]; //@line 628 "xmltok.c"
        var $63=unSign(($62), 8, 0) >>> 4; //@line 628 "xmltok.c"
        var $64=($63) | -32; //@line 628 "xmltok.c"
        HEAP[$61]=$64; //@line 628 "xmltok.c"
        var $65=(($61+1)&4294967295); //@line 628 "xmltok.c"
        var $66=HEAP[$toP_addr]; //@line 628 "xmltok.c"
        HEAP[$66]=$65; //@line 628 "xmltok.c"
        var $67=HEAP[$toP_addr]; //@line 628 "xmltok.c"
        var $68=HEAP[$67]; //@line 628 "xmltok.c"
        var $69=HEAP[$hi]; //@line 628 "xmltok.c"
        var $70=unSign(($69), 8, 0); //@line 628 "xmltok.c"
        var $71=($70) & 15; //@line 628 "xmltok.c"
        var $72=($71) << 2; //@line 628 "xmltok.c"
        var $73=((($72)) & 255); //@line 628 "xmltok.c"
        var $74=HEAP[$lo]; //@line 628 "xmltok.c"
        var $75=unSign(($74), 8, 0) >>> 6; //@line 628 "xmltok.c"
        var $76=($73) | ($75); //@line 628 "xmltok.c"
        var $77=($76) | -128; //@line 628 "xmltok.c"
        HEAP[$68]=$77; //@line 628 "xmltok.c"
        var $78=(($68+1)&4294967295); //@line 628 "xmltok.c"
        var $79=HEAP[$toP_addr]; //@line 628 "xmltok.c"
        HEAP[$79]=$78; //@line 628 "xmltok.c"
        var $80=HEAP[$toP_addr]; //@line 628 "xmltok.c"
        var $81=HEAP[$80]; //@line 628 "xmltok.c"
        var $82=HEAP[$lo]; //@line 628 "xmltok.c"
        var $83=($82) & 63; //@line 628 "xmltok.c"
        var $84=($83) | -128; //@line 628 "xmltok.c"
        HEAP[$81]=$84; //@line 628 "xmltok.c"
        var $85=(($81+1)&4294967295); //@line 628 "xmltok.c"
        var $86=HEAP[$toP_addr]; //@line 628 "xmltok.c"
        HEAP[$86]=$85; //@line 628 "xmltok.c"
        __label__ = 15; break; //@line 628 "xmltok.c"
      case 12: // $bb11
        var $87=HEAP[$toLim_addr]; //@line 628 "xmltok.c"
        var $88=($87); //@line 628 "xmltok.c"
        var $89=HEAP[$toP_addr]; //@line 628 "xmltok.c"
        var $90=HEAP[$89]; //@line 628 "xmltok.c"
        var $91=($90); //@line 628 "xmltok.c"
        var $92=((($88) - ($91))&4294967295); //@line 628 "xmltok.c"
        var $93=((($92))|0) <= 3; //@line 628 "xmltok.c"
        if ($93) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 628 "xmltok.c"
      case 13: // $bb12
        var $94=HEAP[$fromP_addr]; //@line 628 "xmltok.c"
        var $95=HEAP[$from]; //@line 628 "xmltok.c"
        HEAP[$94]=$95; //@line 628 "xmltok.c"
        __label__ = 18; break; //@line 628 "xmltok.c"
      case 14: // $bb13
        var $96=HEAP[$hi]; //@line 628 "xmltok.c"
        var $97=unSign(($96), 8, 0); //@line 628 "xmltok.c"
        var $98=($97) & 3; //@line 628 "xmltok.c"
        var $99=($98) << 2; //@line 628 "xmltok.c"
        var $100=HEAP[$lo]; //@line 628 "xmltok.c"
        var $101=unSign(($100), 8, 0) >>> 6; //@line 628 "xmltok.c"
        var $102=unSign(($101), 8, 0); //@line 628 "xmltok.c"
        var $103=($102) & 3; //@line 628 "xmltok.c"
        var $104=($99) | ($103); //@line 628 "xmltok.c"
        var $105=((($104) + 1)&4294967295); //@line 628 "xmltok.c"
        HEAP[$plane]=$105; //@line 628 "xmltok.c"
        var $106=HEAP[$toP_addr]; //@line 628 "xmltok.c"
        var $107=HEAP[$106]; //@line 628 "xmltok.c"
        var $108=HEAP[$plane]; //@line 628 "xmltok.c"
        var $109=((($108))|0) >> 2; //@line 628 "xmltok.c"
        var $110=((($109)) & 255); //@line 628 "xmltok.c"
        var $111=($110) | -16; //@line 628 "xmltok.c"
        HEAP[$107]=$111; //@line 628 "xmltok.c"
        var $112=(($107+1)&4294967295); //@line 628 "xmltok.c"
        var $113=HEAP[$toP_addr]; //@line 628 "xmltok.c"
        HEAP[$113]=$112; //@line 628 "xmltok.c"
        var $114=HEAP[$toP_addr]; //@line 628 "xmltok.c"
        var $115=HEAP[$114]; //@line 628 "xmltok.c"
        var $116=HEAP[$lo]; //@line 628 "xmltok.c"
        var $117=unSign(($116), 8, 0) >>> 2; //@line 628 "xmltok.c"
        var $118=($117) & 15; //@line 628 "xmltok.c"
        var $119=HEAP[$plane]; //@line 628 "xmltok.c"
        var $120=($119) & 3; //@line 628 "xmltok.c"
        var $121=($120) << 4; //@line 628 "xmltok.c"
        var $122=((($121)) & 255); //@line 628 "xmltok.c"
        var $123=($118) | ($122); //@line 628 "xmltok.c"
        var $124=($123) | -128; //@line 628 "xmltok.c"
        HEAP[$115]=$124; //@line 628 "xmltok.c"
        var $125=(($115+1)&4294967295); //@line 628 "xmltok.c"
        var $126=HEAP[$toP_addr]; //@line 628 "xmltok.c"
        HEAP[$126]=$125; //@line 628 "xmltok.c"
        var $127=HEAP[$from]; //@line 628 "xmltok.c"
        var $128=(($127+2)&4294967295); //@line 628 "xmltok.c"
        HEAP[$from]=$128; //@line 628 "xmltok.c"
        var $129=HEAP[$from]; //@line 628 "xmltok.c"
        var $130=(($129+1)&4294967295); //@line 628 "xmltok.c"
        var $131=HEAP[$130]; //@line 628 "xmltok.c"
        HEAP[$lo2]=$131; //@line 628 "xmltok.c"
        var $132=HEAP[$toP_addr]; //@line 628 "xmltok.c"
        var $133=HEAP[$132]; //@line 628 "xmltok.c"
        var $134=HEAP[$lo]; //@line 628 "xmltok.c"
        var $135=unSign(($134), 8, 0); //@line 628 "xmltok.c"
        var $136=($135) & 3; //@line 628 "xmltok.c"
        var $137=($136) << 4; //@line 628 "xmltok.c"
        var $138=((($137)) & 255); //@line 628 "xmltok.c"
        var $139=HEAP[$from]; //@line 628 "xmltok.c"
        var $140=(($139)&4294967295); //@line 628 "xmltok.c"
        var $141=HEAP[$140]; //@line 628 "xmltok.c"
        var $142=unSign(($141), 8, 0); //@line 628 "xmltok.c"
        var $143=($142) & 3; //@line 628 "xmltok.c"
        var $144=($143) << 2; //@line 628 "xmltok.c"
        var $145=((($144)) & 255); //@line 628 "xmltok.c"
        var $146=($138) | ($145); //@line 628 "xmltok.c"
        var $147=HEAP[$lo2]; //@line 628 "xmltok.c"
        var $148=unSign(($147), 8, 0) >>> 6; //@line 628 "xmltok.c"
        var $149=($146) | ($148); //@line 628 "xmltok.c"
        var $150=($149) | -128; //@line 628 "xmltok.c"
        HEAP[$133]=$150; //@line 628 "xmltok.c"
        var $151=(($133+1)&4294967295); //@line 628 "xmltok.c"
        var $152=HEAP[$toP_addr]; //@line 628 "xmltok.c"
        HEAP[$152]=$151; //@line 628 "xmltok.c"
        var $153=HEAP[$toP_addr]; //@line 628 "xmltok.c"
        var $154=HEAP[$153]; //@line 628 "xmltok.c"
        var $155=HEAP[$lo2]; //@line 628 "xmltok.c"
        var $156=($155) & 63; //@line 628 "xmltok.c"
        var $157=($156) | -128; //@line 628 "xmltok.c"
        HEAP[$154]=$157; //@line 628 "xmltok.c"
        var $158=(($154+1)&4294967295); //@line 628 "xmltok.c"
        var $159=HEAP[$toP_addr]; //@line 628 "xmltok.c"
        HEAP[$159]=$158; //@line 628 "xmltok.c"
        __label__ = 15; break; //@line 628 "xmltok.c"
      case 15: // $bb14
        var $160=HEAP[$from]; //@line 628 "xmltok.c"
        var $161=(($160+2)&4294967295); //@line 628 "xmltok.c"
        HEAP[$from]=$161; //@line 628 "xmltok.c"
        __label__ = 16; break; //@line 628 "xmltok.c"
      case 16: // $bb15
        var $162=HEAP[$from]; //@line 628 "xmltok.c"
        var $163=HEAP[$fromLim_addr]; //@line 628 "xmltok.c"
        var $164=($162)!=($163); //@line 628 "xmltok.c"
        if ($164) { __label__ = 1; break; } else { __label__ = 17; break; } //@line 628 "xmltok.c"
      case 17: // $bb16
        var $165=HEAP[$fromP_addr]; //@line 628 "xmltok.c"
        var $166=HEAP[$from]; //@line 628 "xmltok.c"
        HEAP[$165]=$166; //@line 628 "xmltok.c"
        __label__ = 18; break; //@line 628 "xmltok.c"
      case 18: // $bb17
        __label__ = 19; break; //@line 628 "xmltok.c"
      case 19: // $return
        STACKTOP = __stackBase__;
        return; //@line 628 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_toUtf16($enc, $fromP, $fromLim, $toP, $toLim) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $fromP_addr=__stackBase__+4;
        var $fromLim_addr=__stackBase__+8;
        var $toP_addr=__stackBase__+12;
        var $toLim_addr=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$fromP_addr]=$fromP;
        HEAP[$fromLim_addr]=$fromLim;
        HEAP[$toP_addr]=$toP;
        HEAP[$toLim_addr]=$toLim;
        var $0=HEAP[$fromLim_addr]; //@line 629 "xmltok.c"
        var $1=($0); //@line 629 "xmltok.c"
        var $2=HEAP[$fromP_addr]; //@line 629 "xmltok.c"
        var $3=HEAP[$2]; //@line 629 "xmltok.c"
        var $4=($3); //@line 629 "xmltok.c"
        var $5=((($1) - ($4))&4294967295); //@line 629 "xmltok.c"
        var $6=HEAP[$toLim_addr]; //@line 629 "xmltok.c"
        var $7=($6); //@line 629 "xmltok.c"
        var $8=HEAP[$toP_addr]; //@line 629 "xmltok.c"
        var $9=HEAP[$8]; //@line 629 "xmltok.c"
        var $10=($9); //@line 629 "xmltok.c"
        var $11=((($7) - ($10))&4294967295); //@line 629 "xmltok.c"
        var $12=((((($11))|0)/2)|0); //@line 629 "xmltok.c"
        var $13=($12) << 1; //@line 629 "xmltok.c"
        var $14=((($5))|0) > ((($13))|0); //@line 629 "xmltok.c"
        if ($14) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 629 "xmltok.c"
      case 1: // $bb
        var $15=HEAP[$fromLim_addr]; //@line 629 "xmltok.c"
        var $16=(($15+-2)&4294967295); //@line 629 "xmltok.c"
        var $17=(($16)&4294967295); //@line 629 "xmltok.c"
        var $18=HEAP[$17]; //@line 629 "xmltok.c"
        var $19=unSign(($18), 8, 0); //@line 629 "xmltok.c"
        var $20=($19) & 248; //@line 629 "xmltok.c"
        var $21=((($20))|0)==216; //@line 629 "xmltok.c"
        if ($21) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 629 "xmltok.c"
      case 2: // $bb1
        var $22=HEAP[$fromLim_addr]; //@line 629 "xmltok.c"
        var $23=(($22+-2)&4294967295); //@line 629 "xmltok.c"
        HEAP[$fromLim_addr]=$23; //@line 629 "xmltok.c"
        __label__ = 3; break; //@line 629 "xmltok.c"
      case 3: // $bb2
        __label__ = 5; break; //@line 629 "xmltok.c"
      case 4: // $bb3
        var $24=HEAP[$toP_addr]; //@line 629 "xmltok.c"
        var $25=HEAP[$24]; //@line 629 "xmltok.c"
        var $26=HEAP[$fromP_addr]; //@line 629 "xmltok.c"
        var $27=HEAP[$26]; //@line 629 "xmltok.c"
        var $28=(($27)&4294967295); //@line 629 "xmltok.c"
        var $29=HEAP[$28]; //@line 629 "xmltok.c"
        var $30=unSign(($29), 8, 0); //@line 629 "xmltok.c"
        var $31=($30) << 8; //@line 629 "xmltok.c"
        var $32=((($31)) & 65535); //@line 629 "xmltok.c"
        var $33=HEAP[$fromP_addr]; //@line 629 "xmltok.c"
        var $34=HEAP[$33]; //@line 629 "xmltok.c"
        var $35=(($34+1)&4294967295); //@line 629 "xmltok.c"
        var $36=HEAP[$35]; //@line 629 "xmltok.c"
        var $37=unSign(($36), 8, 0); //@line 629 "xmltok.c"
        var $38=($32) | ($37); //@line 629 "xmltok.c"
        HEAP[$25]=$38; //@line 629 "xmltok.c"
        var $39=(($25+2)&4294967295); //@line 629 "xmltok.c"
        var $40=HEAP[$toP_addr]; //@line 629 "xmltok.c"
        HEAP[$40]=$39; //@line 629 "xmltok.c"
        var $41=HEAP[$fromP_addr]; //@line 629 "xmltok.c"
        var $42=HEAP[$41]; //@line 629 "xmltok.c"
        var $43=(($42+2)&4294967295); //@line 629 "xmltok.c"
        var $44=HEAP[$fromP_addr]; //@line 629 "xmltok.c"
        HEAP[$44]=$43; //@line 629 "xmltok.c"
        __label__ = 5; break; //@line 629 "xmltok.c"
      case 5: // $bb4
        var $45=HEAP[$fromP_addr]; //@line 629 "xmltok.c"
        var $46=HEAP[$45]; //@line 629 "xmltok.c"
        var $47=HEAP[$fromLim_addr]; //@line 629 "xmltok.c"
        var $48=($46)==($47); //@line 629 "xmltok.c"
        if ($48) { __label__ = 7; break; } else { __label__ = 6; break; } //@line 629 "xmltok.c"
      case 6: // $bb5
        var $49=HEAP[$toP_addr]; //@line 629 "xmltok.c"
        var $50=HEAP[$49]; //@line 629 "xmltok.c"
        var $51=HEAP[$toLim_addr]; //@line 629 "xmltok.c"
        var $52=($50)!=($51); //@line 629 "xmltok.c"
        if ($52) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 629 "xmltok.c"
      case 7: // $bb6
        __label__ = 8; break; //@line 629 "xmltok.c"
      case 8: // $return
        STACKTOP = __stackBase__;
        return; //@line 629 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_scanComment($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_453=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 93 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 93 "xmltok_impl.c"
        var $3=($1)!=($2); //@line 93 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 32; break; } //@line 93 "xmltok_impl.c"
      case 1: // $bb
        var $4=HEAP[$ptr_addr]; //@line 94 "xmltok_impl.c"
        var $5=(($4+1)&4294967295); //@line 94 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 94 "xmltok_impl.c"
        var $7=reSign(($6), 8, 0)!=0; //@line 94 "xmltok_impl.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 94 "xmltok_impl.c"
      case 2: // $bb1
        var $8=HEAP[$ptr_addr]; //@line 94 "xmltok_impl.c"
        var $9=(($8)&4294967295); //@line 94 "xmltok_impl.c"
        var $10=HEAP[$9]; //@line 94 "xmltok_impl.c"
        var $11=reSign(($10), 8, 0)!=45; //@line 94 "xmltok_impl.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 94 "xmltok_impl.c"
      case 3: // $bb2
        var $12=HEAP[$nextTokPtr_addr]; //@line 95 "xmltok_impl.c"
        var $13=HEAP[$ptr_addr]; //@line 95 "xmltok_impl.c"
        HEAP[$12]=$13; //@line 95 "xmltok_impl.c"
        HEAP[$0]=0; //@line 96 "xmltok_impl.c"
        __label__ = 33; break; //@line 96 "xmltok_impl.c"
      case 4: // $bb3
        var $14=HEAP[$ptr_addr]; //@line 98 "xmltok_impl.c"
        var $15=(($14+2)&4294967295); //@line 98 "xmltok_impl.c"
        HEAP[$ptr_addr]=$15; //@line 98 "xmltok_impl.c"
        __label__ = 31; break; //@line 98 "xmltok_impl.c"
      case 5: // $bb4
        var $16=HEAP[$ptr_addr]; //@line 100 "xmltok_impl.c"
        var $17=(($16+1)&4294967295); //@line 100 "xmltok_impl.c"
        var $18=HEAP[$17]; //@line 100 "xmltok_impl.c"
        var $19=reSign(($18), 8, 0)==0; //@line 100 "xmltok_impl.c"
        if ($19) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 100 "xmltok_impl.c"
      case 6: // $bb5
        var $20=HEAP[$enc_addr]; //@line 100 "xmltok_impl.c"
        var $21=$20; //@line 100 "xmltok_impl.c"
        var $22=HEAP[$ptr_addr]; //@line 100 "xmltok_impl.c"
        var $23=HEAP[$22]; //@line 100 "xmltok_impl.c"
        var $24=unSign(($23), 8, 0); //@line 100 "xmltok_impl.c"
        var $25=(($21+72)&4294967295); //@line 100 "xmltok_impl.c"
        var $26=(($25+$24)&4294967295); //@line 100 "xmltok_impl.c"
        var $27=HEAP[$26]; //@line 100 "xmltok_impl.c"
        var $28=unSign(($27), 8, 0); //@line 100 "xmltok_impl.c"
        HEAP[$iftmp_453]=$28; //@line 100 "xmltok_impl.c"
        __label__ = 8; break; //@line 100 "xmltok_impl.c"
      case 7: // $bb6
        var $29=HEAP[$ptr_addr]; //@line 100 "xmltok_impl.c"
        var $30=(($29)&4294967295); //@line 100 "xmltok_impl.c"
        var $31=HEAP[$30]; //@line 100 "xmltok_impl.c"
        var $32=reSign(($31), 8, 0); //@line 100 "xmltok_impl.c"
        var $33=HEAP[$ptr_addr]; //@line 100 "xmltok_impl.c"
        var $34=(($33+1)&4294967295); //@line 100 "xmltok_impl.c"
        var $35=HEAP[$34]; //@line 100 "xmltok_impl.c"
        var $36=reSign(($35), 8, 0); //@line 100 "xmltok_impl.c"
        var $37=((($36)) & 255); //@line 100 "xmltok_impl.c"
        var $38=((($32)) & 255); //@line 100 "xmltok_impl.c"
        var $39=_unicode_byte_type($37, $38); //@line 100 "xmltok_impl.c"
        HEAP[$iftmp_453]=$39; //@line 100 "xmltok_impl.c"
        __label__ = 8; break; //@line 100 "xmltok_impl.c"
      case 8: // $bb7
        var $40=HEAP[$iftmp_453]; //@line 100 "xmltok_impl.c"
        if ($40 == 0) {
          __label__ = 18; break;
        }
        else if ($40 == 1) {
          __label__ = 18; break;
        }
        else if ($40 == 5) {
          __label__ = 9; break;
        }
        else if ($40 == 6) {
          __label__ = 12; break;
        }
        else if ($40 == 7) {
          __label__ = 15; break;
        }
        else if ($40 == 8) {
          __label__ = 18; break;
        }
        else if ($40 == 27) {
          __label__ = 19; break;
        }
        else {
        __label__ = 30; break;
        }
        
      case 9: // $bb8
        var $41=HEAP[$end_addr]; //@line 101 "xmltok_impl.c"
        var $42=($41); //@line 101 "xmltok_impl.c"
        var $43=HEAP[$ptr_addr]; //@line 101 "xmltok_impl.c"
        var $44=($43); //@line 101 "xmltok_impl.c"
        var $45=((($42) - ($44))&4294967295); //@line 101 "xmltok_impl.c"
        var $46=((($45))|0) <= 1; //@line 101 "xmltok_impl.c"
        if ($46) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 101 "xmltok_impl.c"
      case 10: // $bb9
        HEAP[$0]=-2; //@line 101 "xmltok_impl.c"
        __label__ = 33; break; //@line 101 "xmltok_impl.c"
      case 11: // $bb10
        var $47=HEAP[$ptr_addr]; //@line 101 "xmltok_impl.c"
        var $48=(($47+2)&4294967295); //@line 101 "xmltok_impl.c"
        HEAP[$ptr_addr]=$48; //@line 101 "xmltok_impl.c"
        __label__ = 31; break; //@line 101 "xmltok_impl.c"
      case 12: // $bb11
        var $49=HEAP[$end_addr]; //@line 101 "xmltok_impl.c"
        var $50=($49); //@line 101 "xmltok_impl.c"
        var $51=HEAP[$ptr_addr]; //@line 101 "xmltok_impl.c"
        var $52=($51); //@line 101 "xmltok_impl.c"
        var $53=((($50) - ($52))&4294967295); //@line 101 "xmltok_impl.c"
        var $54=((($53))|0) <= 2; //@line 101 "xmltok_impl.c"
        if ($54) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 101 "xmltok_impl.c"
      case 13: // $bb12
        HEAP[$0]=-2; //@line 101 "xmltok_impl.c"
        __label__ = 33; break; //@line 101 "xmltok_impl.c"
      case 14: // $bb13
        var $55=HEAP[$ptr_addr]; //@line 101 "xmltok_impl.c"
        var $56=(($55+3)&4294967295); //@line 101 "xmltok_impl.c"
        HEAP[$ptr_addr]=$56; //@line 101 "xmltok_impl.c"
        __label__ = 31; break; //@line 101 "xmltok_impl.c"
      case 15: // $bb14
        var $57=HEAP[$end_addr]; //@line 101 "xmltok_impl.c"
        var $58=($57); //@line 101 "xmltok_impl.c"
        var $59=HEAP[$ptr_addr]; //@line 101 "xmltok_impl.c"
        var $60=($59); //@line 101 "xmltok_impl.c"
        var $61=((($58) - ($60))&4294967295); //@line 101 "xmltok_impl.c"
        var $62=((($61))|0) <= 3; //@line 101 "xmltok_impl.c"
        if ($62) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 101 "xmltok_impl.c"
      case 16: // $bb15
        HEAP[$0]=-2; //@line 101 "xmltok_impl.c"
        __label__ = 33; break; //@line 101 "xmltok_impl.c"
      case 17: // $bb16
        var $63=HEAP[$ptr_addr]; //@line 101 "xmltok_impl.c"
        var $64=(($63+4)&4294967295); //@line 101 "xmltok_impl.c"
        HEAP[$ptr_addr]=$64; //@line 101 "xmltok_impl.c"
        __label__ = 31; break; //@line 101 "xmltok_impl.c"
      case 18: // $bb17
        var $65=HEAP[$nextTokPtr_addr]; //@line 101 "xmltok_impl.c"
        var $66=HEAP[$ptr_addr]; //@line 101 "xmltok_impl.c"
        HEAP[$65]=$66; //@line 101 "xmltok_impl.c"
        HEAP[$0]=0; //@line 101 "xmltok_impl.c"
        __label__ = 33; break; //@line 101 "xmltok_impl.c"
      case 19: // $bb18
        var $67=HEAP[$ptr_addr]; //@line 103 "xmltok_impl.c"
        var $68=(($67+2)&4294967295); //@line 103 "xmltok_impl.c"
        HEAP[$ptr_addr]=$68; //@line 103 "xmltok_impl.c"
        var $69=HEAP[$ptr_addr]; //@line 103 "xmltok_impl.c"
        var $70=HEAP[$end_addr]; //@line 103 "xmltok_impl.c"
        var $71=($69)==($70); //@line 103 "xmltok_impl.c"
        if ($71) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 103 "xmltok_impl.c"
      case 20: // $bb19
        HEAP[$0]=-1; //@line 104 "xmltok_impl.c"
        __label__ = 33; break; //@line 104 "xmltok_impl.c"
      case 21: // $bb20
        var $72=HEAP[$ptr_addr]; //@line 105 "xmltok_impl.c"
        var $73=(($72+1)&4294967295); //@line 105 "xmltok_impl.c"
        var $74=HEAP[$73]; //@line 105 "xmltok_impl.c"
        var $75=reSign(($74), 8, 0)==0; //@line 105 "xmltok_impl.c"
        if ($75) { __label__ = 22; break; } else { __label__ = 29; break; } //@line 105 "xmltok_impl.c"
      case 22: // $bb21
        var $76=HEAP[$ptr_addr]; //@line 105 "xmltok_impl.c"
        var $77=(($76)&4294967295); //@line 105 "xmltok_impl.c"
        var $78=HEAP[$77]; //@line 105 "xmltok_impl.c"
        var $79=reSign(($78), 8, 0)==45; //@line 105 "xmltok_impl.c"
        if ($79) { __label__ = 23; break; } else { __label__ = 29; break; } //@line 105 "xmltok_impl.c"
      case 23: // $bb22
        var $80=HEAP[$ptr_addr]; //@line 106 "xmltok_impl.c"
        var $81=(($80+2)&4294967295); //@line 106 "xmltok_impl.c"
        HEAP[$ptr_addr]=$81; //@line 106 "xmltok_impl.c"
        var $82=HEAP[$ptr_addr]; //@line 106 "xmltok_impl.c"
        var $83=HEAP[$end_addr]; //@line 106 "xmltok_impl.c"
        var $84=($82)==($83); //@line 106 "xmltok_impl.c"
        if ($84) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 106 "xmltok_impl.c"
      case 24: // $bb23
        HEAP[$0]=-1; //@line 107 "xmltok_impl.c"
        __label__ = 33; break; //@line 107 "xmltok_impl.c"
      case 25: // $bb24
        var $85=HEAP[$ptr_addr]; //@line 108 "xmltok_impl.c"
        var $86=(($85+1)&4294967295); //@line 108 "xmltok_impl.c"
        var $87=HEAP[$86]; //@line 108 "xmltok_impl.c"
        var $88=reSign(($87), 8, 0)!=0; //@line 108 "xmltok_impl.c"
        if ($88) { __label__ = 27; break; } else { __label__ = 26; break; } //@line 108 "xmltok_impl.c"
      case 26: // $bb25
        var $89=HEAP[$ptr_addr]; //@line 108 "xmltok_impl.c"
        var $90=(($89)&4294967295); //@line 108 "xmltok_impl.c"
        var $91=HEAP[$90]; //@line 108 "xmltok_impl.c"
        var $92=reSign(($91), 8, 0)!=62; //@line 108 "xmltok_impl.c"
        if ($92) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 108 "xmltok_impl.c"
      case 27: // $bb26
        var $93=HEAP[$nextTokPtr_addr]; //@line 109 "xmltok_impl.c"
        var $94=HEAP[$ptr_addr]; //@line 109 "xmltok_impl.c"
        HEAP[$93]=$94; //@line 109 "xmltok_impl.c"
        HEAP[$0]=0; //@line 110 "xmltok_impl.c"
        __label__ = 33; break; //@line 110 "xmltok_impl.c"
      case 28: // $bb27
        var $95=HEAP[$ptr_addr]; //@line 112 "xmltok_impl.c"
        var $96=(($95+2)&4294967295); //@line 112 "xmltok_impl.c"
        var $97=HEAP[$nextTokPtr_addr]; //@line 112 "xmltok_impl.c"
        HEAP[$97]=$96; //@line 112 "xmltok_impl.c"
        HEAP[$0]=13; //@line 113 "xmltok_impl.c"
        __label__ = 33; break; //@line 113 "xmltok_impl.c"
      case 29: // $bb28
        __label__ = 31; break; //@line 113 "xmltok_impl.c"
      case 30: // $bb29
        var $98=HEAP[$ptr_addr]; //@line 117 "xmltok_impl.c"
        var $99=(($98+2)&4294967295); //@line 117 "xmltok_impl.c"
        HEAP[$ptr_addr]=$99; //@line 117 "xmltok_impl.c"
        __label__ = 31; break; //@line 117 "xmltok_impl.c"
      case 31: // $bb30
        var $100=HEAP[$ptr_addr]; //@line 99 "xmltok_impl.c"
        var $101=HEAP[$end_addr]; //@line 99 "xmltok_impl.c"
        var $102=($100)!=($101); //@line 99 "xmltok_impl.c"
        if ($102) { __label__ = 5; break; } else { __label__ = 32; break; } //@line 99 "xmltok_impl.c"
      case 32: // $bb31
        HEAP[$0]=-1; //@line 122 "xmltok_impl.c"
        __label__ = 33; break; //@line 122 "xmltok_impl.c"
      case 33: // $bb32
        var $103=HEAP[$0]; //@line 96 "xmltok_impl.c"
        HEAP[$retval]=$103; //@line 96 "xmltok_impl.c"
        __label__ = 34; break; //@line 96 "xmltok_impl.c"
      case 34: // $return
        var $retval33=HEAP[$retval]; //@line 96 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval33; //@line 96 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_scanDecl($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_465=__stackBase__+20;
        var $iftmp_463=__stackBase__+24;
        var $iftmp_461=__stackBase__+28;
        var $0=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 131 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 131 "xmltok_impl.c"
        var $3=($1)==($2); //@line 131 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 131 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 132 "xmltok_impl.c"
        __label__ = 26; break; //@line 132 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$ptr_addr]; //@line 133 "xmltok_impl.c"
        var $5=(($4+1)&4294967295); //@line 133 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 133 "xmltok_impl.c"
        var $7=reSign(($6), 8, 0)==0; //@line 133 "xmltok_impl.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 133 "xmltok_impl.c"
      case 3: // $bb2
        var $8=HEAP[$enc_addr]; //@line 133 "xmltok_impl.c"
        var $9=$8; //@line 133 "xmltok_impl.c"
        var $10=HEAP[$ptr_addr]; //@line 133 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 133 "xmltok_impl.c"
        var $12=unSign(($11), 8, 0); //@line 133 "xmltok_impl.c"
        var $13=(($9+72)&4294967295); //@line 133 "xmltok_impl.c"
        var $14=(($13+$12)&4294967295); //@line 133 "xmltok_impl.c"
        var $15=HEAP[$14]; //@line 133 "xmltok_impl.c"
        var $16=unSign(($15), 8, 0); //@line 133 "xmltok_impl.c"
        HEAP[$iftmp_461]=$16; //@line 133 "xmltok_impl.c"
        __label__ = 5; break; //@line 133 "xmltok_impl.c"
      case 4: // $bb3
        var $17=HEAP[$ptr_addr]; //@line 133 "xmltok_impl.c"
        var $18=(($17)&4294967295); //@line 133 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 133 "xmltok_impl.c"
        var $20=reSign(($19), 8, 0); //@line 133 "xmltok_impl.c"
        var $21=HEAP[$ptr_addr]; //@line 133 "xmltok_impl.c"
        var $22=(($21+1)&4294967295); //@line 133 "xmltok_impl.c"
        var $23=HEAP[$22]; //@line 133 "xmltok_impl.c"
        var $24=reSign(($23), 8, 0); //@line 133 "xmltok_impl.c"
        var $25=((($24)) & 255); //@line 133 "xmltok_impl.c"
        var $26=((($20)) & 255); //@line 133 "xmltok_impl.c"
        var $27=_unicode_byte_type($25, $26); //@line 133 "xmltok_impl.c"
        HEAP[$iftmp_461]=$27; //@line 133 "xmltok_impl.c"
        __label__ = 5; break; //@line 133 "xmltok_impl.c"
      case 5: // $bb4
        var $28=HEAP[$iftmp_461]; //@line 133 "xmltok_impl.c"
        if ($28 == 20) {
          __label__ = 7; break;
        }
        else if ($28 == 22) {
          __label__ = 8; break;
        }
        else if ($28 == 24) {
          __label__ = 8; break;
        }
        else if ($28 == 27) {
          __label__ = 6; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 6: // $bb5
        var $29=HEAP[$ptr_addr]; //@line 135 "xmltok_impl.c"
        var $30=(($29+2)&4294967295); //@line 135 "xmltok_impl.c"
        var $31=HEAP[$enc_addr]; //@line 135 "xmltok_impl.c"
        var $32=HEAP[$end_addr]; //@line 135 "xmltok_impl.c"
        var $33=HEAP[$nextTokPtr_addr]; //@line 135 "xmltok_impl.c"
        var $34=_little2_scanComment($31, $30, $32, $33); //@line 135 "xmltok_impl.c"
        HEAP[$0]=$34; //@line 135 "xmltok_impl.c"
        __label__ = 26; break; //@line 135 "xmltok_impl.c"
      case 7: // $bb6
        var $35=HEAP[$ptr_addr]; //@line 137 "xmltok_impl.c"
        var $36=(($35+2)&4294967295); //@line 137 "xmltok_impl.c"
        var $37=HEAP[$nextTokPtr_addr]; //@line 137 "xmltok_impl.c"
        HEAP[$37]=$36; //@line 137 "xmltok_impl.c"
        HEAP[$0]=33; //@line 138 "xmltok_impl.c"
        __label__ = 26; break; //@line 138 "xmltok_impl.c"
      case 8: // $bb7
        var $38=HEAP[$ptr_addr]; //@line 141 "xmltok_impl.c"
        var $39=(($38+2)&4294967295); //@line 141 "xmltok_impl.c"
        HEAP[$ptr_addr]=$39; //@line 141 "xmltok_impl.c"
        __label__ = 24; break; //@line 141 "xmltok_impl.c"
      case 9: // $bb8
        var $40=HEAP[$nextTokPtr_addr]; //@line 144 "xmltok_impl.c"
        var $41=HEAP[$ptr_addr]; //@line 144 "xmltok_impl.c"
        HEAP[$40]=$41; //@line 144 "xmltok_impl.c"
        HEAP[$0]=0; //@line 145 "xmltok_impl.c"
        __label__ = 26; break; //@line 145 "xmltok_impl.c"
      case 10: // $bb9
        var $42=HEAP[$ptr_addr]; //@line 148 "xmltok_impl.c"
        var $43=(($42+1)&4294967295); //@line 148 "xmltok_impl.c"
        var $44=HEAP[$43]; //@line 148 "xmltok_impl.c"
        var $45=reSign(($44), 8, 0)==0; //@line 148 "xmltok_impl.c"
        if ($45) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 148 "xmltok_impl.c"
      case 11: // $bb10
        var $46=HEAP[$enc_addr]; //@line 148 "xmltok_impl.c"
        var $47=$46; //@line 148 "xmltok_impl.c"
        var $48=HEAP[$ptr_addr]; //@line 148 "xmltok_impl.c"
        var $49=HEAP[$48]; //@line 148 "xmltok_impl.c"
        var $50=unSign(($49), 8, 0); //@line 148 "xmltok_impl.c"
        var $51=(($47+72)&4294967295); //@line 148 "xmltok_impl.c"
        var $52=(($51+$50)&4294967295); //@line 148 "xmltok_impl.c"
        var $53=HEAP[$52]; //@line 148 "xmltok_impl.c"
        var $54=unSign(($53), 8, 0); //@line 148 "xmltok_impl.c"
        HEAP[$iftmp_463]=$54; //@line 148 "xmltok_impl.c"
        __label__ = 13; break; //@line 148 "xmltok_impl.c"
      case 12: // $bb11
        var $55=HEAP[$ptr_addr]; //@line 148 "xmltok_impl.c"
        var $56=(($55)&4294967295); //@line 148 "xmltok_impl.c"
        var $57=HEAP[$56]; //@line 148 "xmltok_impl.c"
        var $58=reSign(($57), 8, 0); //@line 148 "xmltok_impl.c"
        var $59=HEAP[$ptr_addr]; //@line 148 "xmltok_impl.c"
        var $60=(($59+1)&4294967295); //@line 148 "xmltok_impl.c"
        var $61=HEAP[$60]; //@line 148 "xmltok_impl.c"
        var $62=reSign(($61), 8, 0); //@line 148 "xmltok_impl.c"
        var $63=((($62)) & 255); //@line 148 "xmltok_impl.c"
        var $64=((($58)) & 255); //@line 148 "xmltok_impl.c"
        var $65=_unicode_byte_type($63, $64); //@line 148 "xmltok_impl.c"
        HEAP[$iftmp_463]=$65; //@line 148 "xmltok_impl.c"
        __label__ = 13; break; //@line 148 "xmltok_impl.c"
      case 13: // $bb12
        var $66=HEAP[$iftmp_463]; //@line 148 "xmltok_impl.c"
        if ($66 == 9) {
          __label__ = 21; break;
        }
        else if ($66 == 10) {
          __label__ = 21; break;
        }
        else if ($66 == 21) {
          __label__ = 21; break;
        }
        else if ($66 == 22) {
          __label__ = 22; break;
        }
        else if ($66 == 24) {
          __label__ = 22; break;
        }
        else if ($66 == 30) {
          __label__ = 14; break;
        }
        else {
        __label__ = 23; break;
        }
        
      case 14: // $bb13
        var $67=HEAP[$ptr_addr]; //@line 150 "xmltok_impl.c"
        var $68=(($67+2)&4294967295); //@line 150 "xmltok_impl.c"
        var $69=HEAP[$end_addr]; //@line 150 "xmltok_impl.c"
        var $70=($68)==($69); //@line 150 "xmltok_impl.c"
        if ($70) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 150 "xmltok_impl.c"
      case 15: // $bb14
        HEAP[$0]=-1; //@line 151 "xmltok_impl.c"
        __label__ = 26; break; //@line 151 "xmltok_impl.c"
      case 16: // $bb15
        var $71=HEAP[$ptr_addr]; //@line 153 "xmltok_impl.c"
        var $72=(($71+2)&4294967295); //@line 153 "xmltok_impl.c"
        var $73=(($72+1)&4294967295); //@line 153 "xmltok_impl.c"
        var $74=HEAP[$73]; //@line 153 "xmltok_impl.c"
        var $75=reSign(($74), 8, 0)==0; //@line 153 "xmltok_impl.c"
        if ($75) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 153 "xmltok_impl.c"
      case 17: // $bb16
        var $76=HEAP[$enc_addr]; //@line 153 "xmltok_impl.c"
        var $77=$76; //@line 153 "xmltok_impl.c"
        var $78=HEAP[$ptr_addr]; //@line 153 "xmltok_impl.c"
        var $79=(($78+2)&4294967295); //@line 153 "xmltok_impl.c"
        var $80=HEAP[$79]; //@line 153 "xmltok_impl.c"
        var $81=unSign(($80), 8, 0); //@line 153 "xmltok_impl.c"
        var $82=(($77+72)&4294967295); //@line 153 "xmltok_impl.c"
        var $83=(($82+$81)&4294967295); //@line 153 "xmltok_impl.c"
        var $84=HEAP[$83]; //@line 153 "xmltok_impl.c"
        var $85=unSign(($84), 8, 0); //@line 153 "xmltok_impl.c"
        HEAP[$iftmp_465]=$85; //@line 153 "xmltok_impl.c"
        __label__ = 19; break; //@line 153 "xmltok_impl.c"
      case 18: // $bb17
        var $86=HEAP[$ptr_addr]; //@line 153 "xmltok_impl.c"
        var $87=(($86+2)&4294967295); //@line 153 "xmltok_impl.c"
        var $88=(($87)&4294967295); //@line 153 "xmltok_impl.c"
        var $89=HEAP[$88]; //@line 153 "xmltok_impl.c"
        var $90=reSign(($89), 8, 0); //@line 153 "xmltok_impl.c"
        var $91=HEAP[$ptr_addr]; //@line 153 "xmltok_impl.c"
        var $92=(($91+2)&4294967295); //@line 153 "xmltok_impl.c"
        var $93=(($92+1)&4294967295); //@line 153 "xmltok_impl.c"
        var $94=HEAP[$93]; //@line 153 "xmltok_impl.c"
        var $95=reSign(($94), 8, 0); //@line 153 "xmltok_impl.c"
        var $96=((($95)) & 255); //@line 153 "xmltok_impl.c"
        var $97=((($90)) & 255); //@line 153 "xmltok_impl.c"
        var $98=_unicode_byte_type($96, $97); //@line 153 "xmltok_impl.c"
        HEAP[$iftmp_465]=$98; //@line 153 "xmltok_impl.c"
        __label__ = 19; break; //@line 153 "xmltok_impl.c"
      case 19: // $bb18
        var $99=HEAP[$iftmp_465]; //@line 153 "xmltok_impl.c"
        if ($99 == 9) {
          __label__ = 20; break;
        }
        else if ($99 == 10) {
          __label__ = 20; break;
        }
        else if ($99 == 21) {
          __label__ = 20; break;
        }
        else if ($99 == 30) {
          __label__ = 20; break;
        }
        else {
        __label__ = 21; break;
        }
        
      case 20: // $bb19
        var $100=HEAP[$nextTokPtr_addr]; //@line 155 "xmltok_impl.c"
        var $101=HEAP[$ptr_addr]; //@line 155 "xmltok_impl.c"
        HEAP[$100]=$101; //@line 155 "xmltok_impl.c"
        HEAP[$0]=0; //@line 156 "xmltok_impl.c"
        __label__ = 26; break; //@line 156 "xmltok_impl.c"
      case 21: // $bb20
        var $102=HEAP[$nextTokPtr_addr]; //@line 160 "xmltok_impl.c"
        var $103=HEAP[$ptr_addr]; //@line 160 "xmltok_impl.c"
        HEAP[$102]=$103; //@line 160 "xmltok_impl.c"
        HEAP[$0]=16; //@line 161 "xmltok_impl.c"
        __label__ = 26; break; //@line 161 "xmltok_impl.c"
      case 22: // $bb21
        var $104=HEAP[$ptr_addr]; //@line 164 "xmltok_impl.c"
        var $105=(($104+2)&4294967295); //@line 164 "xmltok_impl.c"
        HEAP[$ptr_addr]=$105; //@line 164 "xmltok_impl.c"
        __label__ = 24; break; //@line 164 "xmltok_impl.c"
      case 23: // $bb22
        var $106=HEAP[$nextTokPtr_addr]; //@line 167 "xmltok_impl.c"
        var $107=HEAP[$ptr_addr]; //@line 167 "xmltok_impl.c"
        HEAP[$106]=$107; //@line 167 "xmltok_impl.c"
        HEAP[$0]=0; //@line 168 "xmltok_impl.c"
        __label__ = 26; break; //@line 168 "xmltok_impl.c"
      case 24: // $bb23
        var $108=HEAP[$ptr_addr]; //@line 147 "xmltok_impl.c"
        var $109=HEAP[$end_addr]; //@line 147 "xmltok_impl.c"
        var $110=($108)!=($109); //@line 147 "xmltok_impl.c"
        if ($110) { __label__ = 10; break; } else { __label__ = 25; break; } //@line 147 "xmltok_impl.c"
      case 25: // $bb24
        HEAP[$0]=-1; //@line 171 "xmltok_impl.c"
        __label__ = 26; break; //@line 171 "xmltok_impl.c"
      case 26: // $bb25
        var $111=HEAP[$0]; //@line 132 "xmltok_impl.c"
        HEAP[$retval]=$111; //@line 132 "xmltok_impl.c"
        __label__ = 27; break; //@line 132 "xmltok_impl.c"
      case 27: // $return
        var $retval26=HEAP[$retval]; //@line 132 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval26; //@line 132 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_checkPiTarget($enc, $ptr, $end, $tokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $tokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_471=__stackBase__+20;
        var $iftmp_470=__stackBase__+24;
        var $iftmp_469=__stackBase__+28;
        var $0=__stackBase__+32;
        var $upper=__stackBase__+36;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$tokPtr_addr]=$tokPtr;
        HEAP[$upper]=0; //@line 178 "xmltok_impl.c"
        var $1=HEAP[$tokPtr_addr]; //@line 179 "xmltok_impl.c"
        HEAP[$1]=11; //@line 179 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 180 "xmltok_impl.c"
        var $3=($2); //@line 180 "xmltok_impl.c"
        var $4=HEAP[$ptr_addr]; //@line 180 "xmltok_impl.c"
        var $5=($4); //@line 180 "xmltok_impl.c"
        var $6=((($3) - ($5))&4294967295); //@line 180 "xmltok_impl.c"
        var $7=((($6))|0)!=6; //@line 180 "xmltok_impl.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 180 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=1; //@line 181 "xmltok_impl.c"
        __label__ = 26; break; //@line 181 "xmltok_impl.c"
      case 2: // $bb1
        var $8=HEAP[$ptr_addr]; //@line 182 "xmltok_impl.c"
        var $9=(($8+1)&4294967295); //@line 182 "xmltok_impl.c"
        var $10=HEAP[$9]; //@line 182 "xmltok_impl.c"
        var $11=reSign(($10), 8, 0)==0; //@line 182 "xmltok_impl.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 182 "xmltok_impl.c"
      case 3: // $bb2
        var $12=HEAP[$ptr_addr]; //@line 182 "xmltok_impl.c"
        var $13=(($12)&4294967295); //@line 182 "xmltok_impl.c"
        var $14=HEAP[$13]; //@line 182 "xmltok_impl.c"
        var $15=reSign(($14), 8, 0); //@line 182 "xmltok_impl.c"
        HEAP[$iftmp_469]=$15; //@line 182 "xmltok_impl.c"
        __label__ = 5; break; //@line 182 "xmltok_impl.c"
      case 4: // $bb3
        HEAP[$iftmp_469]=-1; //@line 182 "xmltok_impl.c"
        __label__ = 5; break; //@line 182 "xmltok_impl.c"
      case 5: // $bb4
        var $16=HEAP[$iftmp_469]; //@line 182 "xmltok_impl.c"
        if ($16 == 88) {
          __label__ = 7; break;
        }
        else if ($16 == 120) {
          __label__ = 6; break;
        }
        else {
        __label__ = 8; break;
        }
        
      case 6: // $bb5
        __label__ = 9; break; //@line 182 "xmltok_impl.c"
      case 7: // $bb6
        HEAP[$upper]=1; //@line 186 "xmltok_impl.c"
        __label__ = 9; break; //@line 186 "xmltok_impl.c"
      case 8: // $bb7
        HEAP[$0]=1; //@line 189 "xmltok_impl.c"
        __label__ = 26; break; //@line 189 "xmltok_impl.c"
      case 9: // $bb8
        var $17=HEAP[$ptr_addr]; //@line 191 "xmltok_impl.c"
        var $18=(($17+2)&4294967295); //@line 191 "xmltok_impl.c"
        HEAP[$ptr_addr]=$18; //@line 191 "xmltok_impl.c"
        var $19=HEAP[$ptr_addr]; //@line 192 "xmltok_impl.c"
        var $20=(($19+1)&4294967295); //@line 192 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 192 "xmltok_impl.c"
        var $22=reSign(($21), 8, 0)==0; //@line 192 "xmltok_impl.c"
        if ($22) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 192 "xmltok_impl.c"
      case 10: // $bb9
        var $23=HEAP[$ptr_addr]; //@line 192 "xmltok_impl.c"
        var $24=(($23)&4294967295); //@line 192 "xmltok_impl.c"
        var $25=HEAP[$24]; //@line 192 "xmltok_impl.c"
        var $26=reSign(($25), 8, 0); //@line 192 "xmltok_impl.c"
        HEAP[$iftmp_470]=$26; //@line 192 "xmltok_impl.c"
        __label__ = 12; break; //@line 192 "xmltok_impl.c"
      case 11: // $bb10
        HEAP[$iftmp_470]=-1; //@line 192 "xmltok_impl.c"
        __label__ = 12; break; //@line 192 "xmltok_impl.c"
      case 12: // $bb11
        var $27=HEAP[$iftmp_470]; //@line 192 "xmltok_impl.c"
        if ($27 == 77) {
          __label__ = 14; break;
        }
        else if ($27 == 109) {
          __label__ = 13; break;
        }
        else {
        __label__ = 15; break;
        }
        
      case 13: // $bb12
        __label__ = 16; break; //@line 192 "xmltok_impl.c"
      case 14: // $bb13
        HEAP[$upper]=1; //@line 196 "xmltok_impl.c"
        __label__ = 16; break; //@line 196 "xmltok_impl.c"
      case 15: // $bb14
        HEAP[$0]=1; //@line 199 "xmltok_impl.c"
        __label__ = 26; break; //@line 199 "xmltok_impl.c"
      case 16: // $bb15
        var $28=HEAP[$ptr_addr]; //@line 201 "xmltok_impl.c"
        var $29=(($28+2)&4294967295); //@line 201 "xmltok_impl.c"
        HEAP[$ptr_addr]=$29; //@line 201 "xmltok_impl.c"
        var $30=HEAP[$ptr_addr]; //@line 202 "xmltok_impl.c"
        var $31=(($30+1)&4294967295); //@line 202 "xmltok_impl.c"
        var $32=HEAP[$31]; //@line 202 "xmltok_impl.c"
        var $33=reSign(($32), 8, 0)==0; //@line 202 "xmltok_impl.c"
        if ($33) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 202 "xmltok_impl.c"
      case 17: // $bb16
        var $34=HEAP[$ptr_addr]; //@line 202 "xmltok_impl.c"
        var $35=(($34)&4294967295); //@line 202 "xmltok_impl.c"
        var $36=HEAP[$35]; //@line 202 "xmltok_impl.c"
        var $37=reSign(($36), 8, 0); //@line 202 "xmltok_impl.c"
        HEAP[$iftmp_471]=$37; //@line 202 "xmltok_impl.c"
        __label__ = 19; break; //@line 202 "xmltok_impl.c"
      case 18: // $bb17
        HEAP[$iftmp_471]=-1; //@line 202 "xmltok_impl.c"
        __label__ = 19; break; //@line 202 "xmltok_impl.c"
      case 19: // $bb18
        var $38=HEAP[$iftmp_471]; //@line 202 "xmltok_impl.c"
        if ($38 == 76) {
          __label__ = 21; break;
        }
        else if ($38 == 108) {
          __label__ = 20; break;
        }
        else {
        __label__ = 22; break;
        }
        
      case 20: // $bb19
        __label__ = 23; break; //@line 202 "xmltok_impl.c"
      case 21: // $bb20
        HEAP[$upper]=1; //@line 206 "xmltok_impl.c"
        __label__ = 23; break; //@line 206 "xmltok_impl.c"
      case 22: // $bb21
        HEAP[$0]=1; //@line 209 "xmltok_impl.c"
        __label__ = 26; break; //@line 209 "xmltok_impl.c"
      case 23: // $bb22
        var $39=HEAP[$upper]; //@line 211 "xmltok_impl.c"
        var $40=((($39))|0)!=0; //@line 211 "xmltok_impl.c"
        if ($40) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 211 "xmltok_impl.c"
      case 24: // $bb23
        HEAP[$0]=0; //@line 212 "xmltok_impl.c"
        __label__ = 26; break; //@line 212 "xmltok_impl.c"
      case 25: // $bb24
        var $41=HEAP[$tokPtr_addr]; //@line 213 "xmltok_impl.c"
        HEAP[$41]=12; //@line 213 "xmltok_impl.c"
        HEAP[$0]=1; //@line 214 "xmltok_impl.c"
        __label__ = 26; break; //@line 214 "xmltok_impl.c"
      case 26: // $bb25
        var $42=HEAP[$0]; //@line 181 "xmltok_impl.c"
        HEAP[$retval]=$42; //@line 181 "xmltok_impl.c"
        __label__ = 27; break; //@line 181 "xmltok_impl.c"
      case 27: // $return
        var $retval26=HEAP[$retval]; //@line 181 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval26; //@line 181 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_scanPi($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 44);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_488=__stackBase__+20;
        var $iftmp_480=__stackBase__+24;
        var $iftmp_472=__stackBase__+28;
        var $0=__stackBase__+32;
        var $tok=__stackBase__+36;
        var $target=__stackBase__+40;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 224 "xmltok_impl.c"
        HEAP[$target]=$1; //@line 224 "xmltok_impl.c"
        var $2=HEAP[$ptr_addr]; //@line 225 "xmltok_impl.c"
        var $3=HEAP[$end_addr]; //@line 225 "xmltok_impl.c"
        var $4=($2)==($3); //@line 225 "xmltok_impl.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 225 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 226 "xmltok_impl.c"
        __label__ = 71; break; //@line 226 "xmltok_impl.c"
      case 2: // $bb1
        var $5=HEAP[$ptr_addr]; //@line 227 "xmltok_impl.c"
        var $6=(($5+1)&4294967295); //@line 227 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 227 "xmltok_impl.c"
        var $8=reSign(($7), 8, 0)==0; //@line 227 "xmltok_impl.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 227 "xmltok_impl.c"
      case 3: // $bb2
        var $9=HEAP[$enc_addr]; //@line 227 "xmltok_impl.c"
        var $10=$9; //@line 227 "xmltok_impl.c"
        var $11=HEAP[$ptr_addr]; //@line 227 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 227 "xmltok_impl.c"
        var $13=unSign(($12), 8, 0); //@line 227 "xmltok_impl.c"
        var $14=(($10+72)&4294967295); //@line 227 "xmltok_impl.c"
        var $15=(($14+$13)&4294967295); //@line 227 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 227 "xmltok_impl.c"
        var $17=unSign(($16), 8, 0); //@line 227 "xmltok_impl.c"
        HEAP[$iftmp_472]=$17; //@line 227 "xmltok_impl.c"
        __label__ = 5; break; //@line 227 "xmltok_impl.c"
      case 4: // $bb3
        var $18=HEAP[$ptr_addr]; //@line 227 "xmltok_impl.c"
        var $19=(($18)&4294967295); //@line 227 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 227 "xmltok_impl.c"
        var $21=reSign(($20), 8, 0); //@line 227 "xmltok_impl.c"
        var $22=HEAP[$ptr_addr]; //@line 227 "xmltok_impl.c"
        var $23=(($22+1)&4294967295); //@line 227 "xmltok_impl.c"
        var $24=HEAP[$23]; //@line 227 "xmltok_impl.c"
        var $25=reSign(($24), 8, 0); //@line 227 "xmltok_impl.c"
        var $26=((($25)) & 255); //@line 227 "xmltok_impl.c"
        var $27=((($21)) & 255); //@line 227 "xmltok_impl.c"
        var $28=_unicode_byte_type($26, $27); //@line 227 "xmltok_impl.c"
        HEAP[$iftmp_472]=$28; //@line 227 "xmltok_impl.c"
        __label__ = 5; break; //@line 227 "xmltok_impl.c"
      case 5: // $bb4
        var $29=HEAP[$iftmp_472]; //@line 227 "xmltok_impl.c"
        if ($29 == 5) {
          __label__ = 9; break;
        }
        else if ($29 == 6) {
          __label__ = 12; break;
        }
        else if ($29 == 7) {
          __label__ = 15; break;
        }
        else if ($29 == 22) {
          __label__ = 8; break;
        }
        else if ($29 == 24) {
          __label__ = 8; break;
        }
        else if ($29 == 29) {
          __label__ = 6; break;
        }
        else {
        __label__ = 18; break;
        }
        
      case 6: // $bb5
        var $30=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        var $31=(($30+1)&4294967295); //@line 228 "xmltok_impl.c"
        var $32=HEAP[$31]; //@line 228 "xmltok_impl.c"
        var $33=unSign(($32), 8, 0); //@line 228 "xmltok_impl.c"
        var $34=((_nmstrtPages+$33)&4294967295); //@line 228 "xmltok_impl.c"
        var $35=HEAP[$34]; //@line 228 "xmltok_impl.c"
        var $36=unSign(($35), 8, 0); //@line 228 "xmltok_impl.c"
        var $37=($36) << 3; //@line 228 "xmltok_impl.c"
        var $38=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        var $39=(($38)&4294967295); //@line 228 "xmltok_impl.c"
        var $40=HEAP[$39]; //@line 228 "xmltok_impl.c"
        var $41=unSign(($40), 8, 0) >>> 5; //@line 228 "xmltok_impl.c"
        var $42=unSign(($41), 8, 0); //@line 228 "xmltok_impl.c"
        var $43=((($37) + ($42))&4294967295); //@line 228 "xmltok_impl.c"
        var $44=((_namingBitmap+$43*4)&4294967295); //@line 228 "xmltok_impl.c"
        var $45=HEAP[$44]; //@line 228 "xmltok_impl.c"
        var $46=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        var $47=(($46)&4294967295); //@line 228 "xmltok_impl.c"
        var $48=HEAP[$47]; //@line 228 "xmltok_impl.c"
        var $49=unSign(($48), 8, 0); //@line 228 "xmltok_impl.c"
        var $50=($49) & 31; //@line 228 "xmltok_impl.c"
        var $51=1 << ($50); //@line 228 "xmltok_impl.c"
        var $52=($45) & ($51); //@line 228 "xmltok_impl.c"
        var $53=((($52))|0)==0; //@line 228 "xmltok_impl.c"
        if ($53) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 228 "xmltok_impl.c"
      case 7: // $bb6
        var $54=HEAP[$nextTokPtr_addr]; //@line 228 "xmltok_impl.c"
        var $55=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        HEAP[$54]=$55; //@line 228 "xmltok_impl.c"
        HEAP[$0]=0; //@line 228 "xmltok_impl.c"
        __label__ = 71; break; //@line 228 "xmltok_impl.c"
      case 8: // $bb7
        var $56=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        var $57=(($56+2)&4294967295); //@line 228 "xmltok_impl.c"
        HEAP[$ptr_addr]=$57; //@line 228 "xmltok_impl.c"
        __label__ = 69; break; //@line 228 "xmltok_impl.c"
      case 9: // $bb8
        var $58=HEAP[$end_addr]; //@line 228 "xmltok_impl.c"
        var $59=($58); //@line 228 "xmltok_impl.c"
        var $60=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        var $61=($60); //@line 228 "xmltok_impl.c"
        var $62=((($59) - ($61))&4294967295); //@line 228 "xmltok_impl.c"
        var $63=((($62))|0) <= 1; //@line 228 "xmltok_impl.c"
        if ($63) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 228 "xmltok_impl.c"
      case 10: // $bb9
        HEAP[$0]=-2; //@line 228 "xmltok_impl.c"
        __label__ = 71; break; //@line 228 "xmltok_impl.c"
      case 11: // $bb10
        var $64=HEAP[$nextTokPtr_addr]; //@line 228 "xmltok_impl.c"
        var $65=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        HEAP[$64]=$65; //@line 228 "xmltok_impl.c"
        HEAP[$0]=0; //@line 228 "xmltok_impl.c"
        __label__ = 71; break; //@line 228 "xmltok_impl.c"
      case 12: // $bb11
        var $66=HEAP[$end_addr]; //@line 228 "xmltok_impl.c"
        var $67=($66); //@line 228 "xmltok_impl.c"
        var $68=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        var $69=($68); //@line 228 "xmltok_impl.c"
        var $70=((($67) - ($69))&4294967295); //@line 228 "xmltok_impl.c"
        var $71=((($70))|0) <= 2; //@line 228 "xmltok_impl.c"
        if ($71) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 228 "xmltok_impl.c"
      case 13: // $bb12
        HEAP[$0]=-2; //@line 228 "xmltok_impl.c"
        __label__ = 71; break; //@line 228 "xmltok_impl.c"
      case 14: // $bb13
        var $72=HEAP[$nextTokPtr_addr]; //@line 228 "xmltok_impl.c"
        var $73=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        HEAP[$72]=$73; //@line 228 "xmltok_impl.c"
        HEAP[$0]=0; //@line 228 "xmltok_impl.c"
        __label__ = 71; break; //@line 228 "xmltok_impl.c"
      case 15: // $bb14
        var $74=HEAP[$end_addr]; //@line 228 "xmltok_impl.c"
        var $75=($74); //@line 228 "xmltok_impl.c"
        var $76=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        var $77=($76); //@line 228 "xmltok_impl.c"
        var $78=((($75) - ($77))&4294967295); //@line 228 "xmltok_impl.c"
        var $79=((($78))|0) <= 3; //@line 228 "xmltok_impl.c"
        if ($79) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 228 "xmltok_impl.c"
      case 16: // $bb15
        HEAP[$0]=-2; //@line 228 "xmltok_impl.c"
        __label__ = 71; break; //@line 228 "xmltok_impl.c"
      case 17: // $bb16
        var $80=HEAP[$nextTokPtr_addr]; //@line 228 "xmltok_impl.c"
        var $81=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        HEAP[$80]=$81; //@line 228 "xmltok_impl.c"
        HEAP[$0]=0; //@line 228 "xmltok_impl.c"
        __label__ = 71; break; //@line 228 "xmltok_impl.c"
      case 18: // $bb17
        var $82=HEAP[$nextTokPtr_addr]; //@line 230 "xmltok_impl.c"
        var $83=HEAP[$ptr_addr]; //@line 230 "xmltok_impl.c"
        HEAP[$82]=$83; //@line 230 "xmltok_impl.c"
        HEAP[$0]=0; //@line 231 "xmltok_impl.c"
        __label__ = 71; break; //@line 231 "xmltok_impl.c"
      case 19: // $bb18
        var $84=HEAP[$ptr_addr]; //@line 234 "xmltok_impl.c"
        var $85=(($84+1)&4294967295); //@line 234 "xmltok_impl.c"
        var $86=HEAP[$85]; //@line 234 "xmltok_impl.c"
        var $87=reSign(($86), 8, 0)==0; //@line 234 "xmltok_impl.c"
        if ($87) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 234 "xmltok_impl.c"
      case 20: // $bb19
        var $88=HEAP[$enc_addr]; //@line 234 "xmltok_impl.c"
        var $89=$88; //@line 234 "xmltok_impl.c"
        var $90=HEAP[$ptr_addr]; //@line 234 "xmltok_impl.c"
        var $91=HEAP[$90]; //@line 234 "xmltok_impl.c"
        var $92=unSign(($91), 8, 0); //@line 234 "xmltok_impl.c"
        var $93=(($89+72)&4294967295); //@line 234 "xmltok_impl.c"
        var $94=(($93+$92)&4294967295); //@line 234 "xmltok_impl.c"
        var $95=HEAP[$94]; //@line 234 "xmltok_impl.c"
        var $96=unSign(($95), 8, 0); //@line 234 "xmltok_impl.c"
        HEAP[$iftmp_480]=$96; //@line 234 "xmltok_impl.c"
        __label__ = 22; break; //@line 234 "xmltok_impl.c"
      case 21: // $bb20
        var $97=HEAP[$ptr_addr]; //@line 234 "xmltok_impl.c"
        var $98=(($97)&4294967295); //@line 234 "xmltok_impl.c"
        var $99=HEAP[$98]; //@line 234 "xmltok_impl.c"
        var $100=reSign(($99), 8, 0); //@line 234 "xmltok_impl.c"
        var $101=HEAP[$ptr_addr]; //@line 234 "xmltok_impl.c"
        var $102=(($101+1)&4294967295); //@line 234 "xmltok_impl.c"
        var $103=HEAP[$102]; //@line 234 "xmltok_impl.c"
        var $104=reSign(($103), 8, 0); //@line 234 "xmltok_impl.c"
        var $105=((($104)) & 255); //@line 234 "xmltok_impl.c"
        var $106=((($100)) & 255); //@line 234 "xmltok_impl.c"
        var $107=_unicode_byte_type($105, $106); //@line 234 "xmltok_impl.c"
        HEAP[$iftmp_480]=$107; //@line 234 "xmltok_impl.c"
        __label__ = 22; break; //@line 234 "xmltok_impl.c"
      case 22: // $bb21
        var $108=HEAP[$iftmp_480]; //@line 234 "xmltok_impl.c"
        if ($108 == 5) {
          __label__ = 26; break;
        }
        else if ($108 == 6) {
          __label__ = 29; break;
        }
        else if ($108 == 7) {
          __label__ = 32; break;
        }
        else if ($108 == 9) {
          __label__ = 35; break;
        }
        else if ($108 == 10) {
          __label__ = 35; break;
        }
        else if ($108 == 15) {
          __label__ = 61; break;
        }
        else if ($108 == 21) {
          __label__ = 35; break;
        }
        else if ($108 == 22) {
          __label__ = 25; break;
        }
        else if ($108 == 24) {
          __label__ = 25; break;
        }
        else if ($108 == 25) {
          __label__ = 25; break;
        }
        else if ($108 == 26) {
          __label__ = 25; break;
        }
        else if ($108 == 27) {
          __label__ = 25; break;
        }
        else if ($108 == 29) {
          __label__ = 23; break;
        }
        else {
        __label__ = 68; break;
        }
        
      case 23: // $bb22
        var $109=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        var $110=(($109+1)&4294967295); //@line 235 "xmltok_impl.c"
        var $111=HEAP[$110]; //@line 235 "xmltok_impl.c"
        var $112=unSign(($111), 8, 0); //@line 235 "xmltok_impl.c"
        var $113=((_namePages+$112)&4294967295); //@line 235 "xmltok_impl.c"
        var $114=HEAP[$113]; //@line 235 "xmltok_impl.c"
        var $115=unSign(($114), 8, 0); //@line 235 "xmltok_impl.c"
        var $116=($115) << 3; //@line 235 "xmltok_impl.c"
        var $117=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        var $118=(($117)&4294967295); //@line 235 "xmltok_impl.c"
        var $119=HEAP[$118]; //@line 235 "xmltok_impl.c"
        var $120=unSign(($119), 8, 0) >>> 5; //@line 235 "xmltok_impl.c"
        var $121=unSign(($120), 8, 0); //@line 235 "xmltok_impl.c"
        var $122=((($116) + ($121))&4294967295); //@line 235 "xmltok_impl.c"
        var $123=((_namingBitmap+$122*4)&4294967295); //@line 235 "xmltok_impl.c"
        var $124=HEAP[$123]; //@line 235 "xmltok_impl.c"
        var $125=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        var $126=(($125)&4294967295); //@line 235 "xmltok_impl.c"
        var $127=HEAP[$126]; //@line 235 "xmltok_impl.c"
        var $128=unSign(($127), 8, 0); //@line 235 "xmltok_impl.c"
        var $129=($128) & 31; //@line 235 "xmltok_impl.c"
        var $130=1 << ($129); //@line 235 "xmltok_impl.c"
        var $131=($124) & ($130); //@line 235 "xmltok_impl.c"
        var $132=((($131))|0)==0; //@line 235 "xmltok_impl.c"
        if ($132) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 235 "xmltok_impl.c"
      case 24: // $bb23
        var $133=HEAP[$nextTokPtr_addr]; //@line 235 "xmltok_impl.c"
        var $134=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        HEAP[$133]=$134; //@line 235 "xmltok_impl.c"
        HEAP[$0]=0; //@line 235 "xmltok_impl.c"
        __label__ = 71; break; //@line 235 "xmltok_impl.c"
      case 25: // $bb24
        var $135=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        var $136=(($135+2)&4294967295); //@line 235 "xmltok_impl.c"
        HEAP[$ptr_addr]=$136; //@line 235 "xmltok_impl.c"
        __label__ = 69; break; //@line 235 "xmltok_impl.c"
      case 26: // $bb25
        var $137=HEAP[$end_addr]; //@line 235 "xmltok_impl.c"
        var $138=($137); //@line 235 "xmltok_impl.c"
        var $139=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        var $140=($139); //@line 235 "xmltok_impl.c"
        var $141=((($138) - ($140))&4294967295); //@line 235 "xmltok_impl.c"
        var $142=((($141))|0) <= 1; //@line 235 "xmltok_impl.c"
        if ($142) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 235 "xmltok_impl.c"
      case 27: // $bb26
        HEAP[$0]=-2; //@line 235 "xmltok_impl.c"
        __label__ = 71; break; //@line 235 "xmltok_impl.c"
      case 28: // $bb27
        var $143=HEAP[$nextTokPtr_addr]; //@line 235 "xmltok_impl.c"
        var $144=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        HEAP[$143]=$144; //@line 235 "xmltok_impl.c"
        HEAP[$0]=0; //@line 235 "xmltok_impl.c"
        __label__ = 71; break; //@line 235 "xmltok_impl.c"
      case 29: // $bb28
        var $145=HEAP[$end_addr]; //@line 235 "xmltok_impl.c"
        var $146=($145); //@line 235 "xmltok_impl.c"
        var $147=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        var $148=($147); //@line 235 "xmltok_impl.c"
        var $149=((($146) - ($148))&4294967295); //@line 235 "xmltok_impl.c"
        var $150=((($149))|0) <= 2; //@line 235 "xmltok_impl.c"
        if ($150) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 235 "xmltok_impl.c"
      case 30: // $bb29
        HEAP[$0]=-2; //@line 235 "xmltok_impl.c"
        __label__ = 71; break; //@line 235 "xmltok_impl.c"
      case 31: // $bb30
        var $151=HEAP[$nextTokPtr_addr]; //@line 235 "xmltok_impl.c"
        var $152=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        HEAP[$151]=$152; //@line 235 "xmltok_impl.c"
        HEAP[$0]=0; //@line 235 "xmltok_impl.c"
        __label__ = 71; break; //@line 235 "xmltok_impl.c"
      case 32: // $bb31
        var $153=HEAP[$end_addr]; //@line 235 "xmltok_impl.c"
        var $154=($153); //@line 235 "xmltok_impl.c"
        var $155=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        var $156=($155); //@line 235 "xmltok_impl.c"
        var $157=((($154) - ($156))&4294967295); //@line 235 "xmltok_impl.c"
        var $158=((($157))|0) <= 3; //@line 235 "xmltok_impl.c"
        if ($158) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 235 "xmltok_impl.c"
      case 33: // $bb32
        HEAP[$0]=-2; //@line 235 "xmltok_impl.c"
        __label__ = 71; break; //@line 235 "xmltok_impl.c"
      case 34: // $bb33
        var $159=HEAP[$nextTokPtr_addr]; //@line 235 "xmltok_impl.c"
        var $160=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        HEAP[$159]=$160; //@line 235 "xmltok_impl.c"
        HEAP[$0]=0; //@line 235 "xmltok_impl.c"
        __label__ = 71; break; //@line 235 "xmltok_impl.c"
      case 35: // $bb34
        var $161=HEAP[$enc_addr]; //@line 237 "xmltok_impl.c"
        var $162=HEAP[$target]; //@line 237 "xmltok_impl.c"
        var $163=HEAP[$ptr_addr]; //@line 237 "xmltok_impl.c"
        var $164=_little2_checkPiTarget($161, $162, $163, $tok); //@line 237 "xmltok_impl.c"
        var $165=((($164))|0)==0; //@line 237 "xmltok_impl.c"
        if ($165) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 237 "xmltok_impl.c"
      case 36: // $bb35
        var $166=HEAP[$nextTokPtr_addr]; //@line 238 "xmltok_impl.c"
        var $167=HEAP[$ptr_addr]; //@line 238 "xmltok_impl.c"
        HEAP[$166]=$167; //@line 238 "xmltok_impl.c"
        HEAP[$0]=0; //@line 239 "xmltok_impl.c"
        __label__ = 71; break; //@line 239 "xmltok_impl.c"
      case 37: // $bb36
        var $168=HEAP[$ptr_addr]; //@line 241 "xmltok_impl.c"
        var $169=(($168+2)&4294967295); //@line 241 "xmltok_impl.c"
        HEAP[$ptr_addr]=$169; //@line 241 "xmltok_impl.c"
        __label__ = 59; break; //@line 241 "xmltok_impl.c"
      case 38: // $bb37
        var $170=HEAP[$ptr_addr]; //@line 243 "xmltok_impl.c"
        var $171=(($170+1)&4294967295); //@line 243 "xmltok_impl.c"
        var $172=HEAP[$171]; //@line 243 "xmltok_impl.c"
        var $173=reSign(($172), 8, 0)==0; //@line 243 "xmltok_impl.c"
        if ($173) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 243 "xmltok_impl.c"
      case 39: // $bb38
        var $174=HEAP[$enc_addr]; //@line 243 "xmltok_impl.c"
        var $175=$174; //@line 243 "xmltok_impl.c"
        var $176=HEAP[$ptr_addr]; //@line 243 "xmltok_impl.c"
        var $177=HEAP[$176]; //@line 243 "xmltok_impl.c"
        var $178=unSign(($177), 8, 0); //@line 243 "xmltok_impl.c"
        var $179=(($175+72)&4294967295); //@line 243 "xmltok_impl.c"
        var $180=(($179+$178)&4294967295); //@line 243 "xmltok_impl.c"
        var $181=HEAP[$180]; //@line 243 "xmltok_impl.c"
        var $182=unSign(($181), 8, 0); //@line 243 "xmltok_impl.c"
        HEAP[$iftmp_488]=$182; //@line 243 "xmltok_impl.c"
        __label__ = 41; break; //@line 243 "xmltok_impl.c"
      case 40: // $bb39
        var $183=HEAP[$ptr_addr]; //@line 243 "xmltok_impl.c"
        var $184=(($183)&4294967295); //@line 243 "xmltok_impl.c"
        var $185=HEAP[$184]; //@line 243 "xmltok_impl.c"
        var $186=reSign(($185), 8, 0); //@line 243 "xmltok_impl.c"
        var $187=HEAP[$ptr_addr]; //@line 243 "xmltok_impl.c"
        var $188=(($187+1)&4294967295); //@line 243 "xmltok_impl.c"
        var $189=HEAP[$188]; //@line 243 "xmltok_impl.c"
        var $190=reSign(($189), 8, 0); //@line 243 "xmltok_impl.c"
        var $191=((($190)) & 255); //@line 243 "xmltok_impl.c"
        var $192=((($186)) & 255); //@line 243 "xmltok_impl.c"
        var $193=_unicode_byte_type($191, $192); //@line 243 "xmltok_impl.c"
        HEAP[$iftmp_488]=$193; //@line 243 "xmltok_impl.c"
        __label__ = 41; break; //@line 243 "xmltok_impl.c"
      case 41: // $bb40
        var $194=HEAP[$iftmp_488]; //@line 243 "xmltok_impl.c"
        if ($194 == 0) {
          __label__ = 51; break;
        }
        else if ($194 == 1) {
          __label__ = 51; break;
        }
        else if ($194 == 5) {
          __label__ = 42; break;
        }
        else if ($194 == 6) {
          __label__ = 45; break;
        }
        else if ($194 == 7) {
          __label__ = 48; break;
        }
        else if ($194 == 8) {
          __label__ = 51; break;
        }
        else if ($194 == 15) {
          __label__ = 52; break;
        }
        else {
        __label__ = 58; break;
        }
        
      case 42: // $bb41
        var $195=HEAP[$end_addr]; //@line 244 "xmltok_impl.c"
        var $196=($195); //@line 244 "xmltok_impl.c"
        var $197=HEAP[$ptr_addr]; //@line 244 "xmltok_impl.c"
        var $198=($197); //@line 244 "xmltok_impl.c"
        var $199=((($196) - ($198))&4294967295); //@line 244 "xmltok_impl.c"
        var $200=((($199))|0) <= 1; //@line 244 "xmltok_impl.c"
        if ($200) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 244 "xmltok_impl.c"
      case 43: // $bb42
        HEAP[$0]=-2; //@line 244 "xmltok_impl.c"
        __label__ = 71; break; //@line 244 "xmltok_impl.c"
      case 44: // $bb43
        var $201=HEAP[$ptr_addr]; //@line 244 "xmltok_impl.c"
        var $202=(($201+2)&4294967295); //@line 244 "xmltok_impl.c"
        HEAP[$ptr_addr]=$202; //@line 244 "xmltok_impl.c"
        __label__ = 59; break; //@line 244 "xmltok_impl.c"
      case 45: // $bb44
        var $203=HEAP[$end_addr]; //@line 244 "xmltok_impl.c"
        var $204=($203); //@line 244 "xmltok_impl.c"
        var $205=HEAP[$ptr_addr]; //@line 244 "xmltok_impl.c"
        var $206=($205); //@line 244 "xmltok_impl.c"
        var $207=((($204) - ($206))&4294967295); //@line 244 "xmltok_impl.c"
        var $208=((($207))|0) <= 2; //@line 244 "xmltok_impl.c"
        if ($208) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 244 "xmltok_impl.c"
      case 46: // $bb45
        HEAP[$0]=-2; //@line 244 "xmltok_impl.c"
        __label__ = 71; break; //@line 244 "xmltok_impl.c"
      case 47: // $bb46
        var $209=HEAP[$ptr_addr]; //@line 244 "xmltok_impl.c"
        var $210=(($209+3)&4294967295); //@line 244 "xmltok_impl.c"
        HEAP[$ptr_addr]=$210; //@line 244 "xmltok_impl.c"
        __label__ = 59; break; //@line 244 "xmltok_impl.c"
      case 48: // $bb47
        var $211=HEAP[$end_addr]; //@line 244 "xmltok_impl.c"
        var $212=($211); //@line 244 "xmltok_impl.c"
        var $213=HEAP[$ptr_addr]; //@line 244 "xmltok_impl.c"
        var $214=($213); //@line 244 "xmltok_impl.c"
        var $215=((($212) - ($214))&4294967295); //@line 244 "xmltok_impl.c"
        var $216=((($215))|0) <= 3; //@line 244 "xmltok_impl.c"
        if ($216) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 244 "xmltok_impl.c"
      case 49: // $bb48
        HEAP[$0]=-2; //@line 244 "xmltok_impl.c"
        __label__ = 71; break; //@line 244 "xmltok_impl.c"
      case 50: // $bb49
        var $217=HEAP[$ptr_addr]; //@line 244 "xmltok_impl.c"
        var $218=(($217+4)&4294967295); //@line 244 "xmltok_impl.c"
        HEAP[$ptr_addr]=$218; //@line 244 "xmltok_impl.c"
        __label__ = 59; break; //@line 244 "xmltok_impl.c"
      case 51: // $bb50
        var $219=HEAP[$nextTokPtr_addr]; //@line 244 "xmltok_impl.c"
        var $220=HEAP[$ptr_addr]; //@line 244 "xmltok_impl.c"
        HEAP[$219]=$220; //@line 244 "xmltok_impl.c"
        HEAP[$0]=0; //@line 244 "xmltok_impl.c"
        __label__ = 71; break; //@line 244 "xmltok_impl.c"
      case 52: // $bb51
        var $221=HEAP[$ptr_addr]; //@line 246 "xmltok_impl.c"
        var $222=(($221+2)&4294967295); //@line 246 "xmltok_impl.c"
        HEAP[$ptr_addr]=$222; //@line 246 "xmltok_impl.c"
        var $223=HEAP[$ptr_addr]; //@line 247 "xmltok_impl.c"
        var $224=HEAP[$end_addr]; //@line 247 "xmltok_impl.c"
        var $225=($223)==($224); //@line 247 "xmltok_impl.c"
        if ($225) { __label__ = 53; break; } else { __label__ = 54; break; } //@line 247 "xmltok_impl.c"
      case 53: // $bb52
        HEAP[$0]=-1; //@line 248 "xmltok_impl.c"
        __label__ = 71; break; //@line 248 "xmltok_impl.c"
      case 54: // $bb53
        var $226=HEAP[$ptr_addr]; //@line 249 "xmltok_impl.c"
        var $227=(($226+1)&4294967295); //@line 249 "xmltok_impl.c"
        var $228=HEAP[$227]; //@line 249 "xmltok_impl.c"
        var $229=reSign(($228), 8, 0)==0; //@line 249 "xmltok_impl.c"
        if ($229) { __label__ = 55; break; } else { __label__ = 57; break; } //@line 249 "xmltok_impl.c"
      case 55: // $bb54
        var $230=HEAP[$ptr_addr]; //@line 249 "xmltok_impl.c"
        var $231=(($230)&4294967295); //@line 249 "xmltok_impl.c"
        var $232=HEAP[$231]; //@line 249 "xmltok_impl.c"
        var $233=reSign(($232), 8, 0)==62; //@line 249 "xmltok_impl.c"
        if ($233) { __label__ = 56; break; } else { __label__ = 57; break; } //@line 249 "xmltok_impl.c"
      case 56: // $bb55
        var $234=HEAP[$ptr_addr]; //@line 250 "xmltok_impl.c"
        var $235=(($234+2)&4294967295); //@line 250 "xmltok_impl.c"
        var $236=HEAP[$nextTokPtr_addr]; //@line 250 "xmltok_impl.c"
        HEAP[$236]=$235; //@line 250 "xmltok_impl.c"
        var $237=HEAP[$tok]; //@line 251 "xmltok_impl.c"
        HEAP[$0]=$237; //@line 251 "xmltok_impl.c"
        __label__ = 71; break; //@line 251 "xmltok_impl.c"
      case 57: // $bb56
        __label__ = 59; break; //@line 251 "xmltok_impl.c"
      case 58: // $bb57
        var $238=HEAP[$ptr_addr]; //@line 255 "xmltok_impl.c"
        var $239=(($238+2)&4294967295); //@line 255 "xmltok_impl.c"
        HEAP[$ptr_addr]=$239; //@line 255 "xmltok_impl.c"
        __label__ = 59; break; //@line 255 "xmltok_impl.c"
      case 59: // $bb58
        var $240=HEAP[$ptr_addr]; //@line 242 "xmltok_impl.c"
        var $241=HEAP[$end_addr]; //@line 242 "xmltok_impl.c"
        var $242=($240)!=($241); //@line 242 "xmltok_impl.c"
        if ($242) { __label__ = 38; break; } else { __label__ = 60; break; } //@line 242 "xmltok_impl.c"
      case 60: // $bb59
        HEAP[$0]=-1; //@line 259 "xmltok_impl.c"
        __label__ = 71; break; //@line 259 "xmltok_impl.c"
      case 61: // $bb60
        var $243=HEAP[$enc_addr]; //@line 261 "xmltok_impl.c"
        var $244=HEAP[$target]; //@line 261 "xmltok_impl.c"
        var $245=HEAP[$ptr_addr]; //@line 261 "xmltok_impl.c"
        var $246=_little2_checkPiTarget($243, $244, $245, $tok); //@line 261 "xmltok_impl.c"
        var $247=((($246))|0)==0; //@line 261 "xmltok_impl.c"
        if ($247) { __label__ = 62; break; } else { __label__ = 63; break; } //@line 261 "xmltok_impl.c"
      case 62: // $bb61
        var $248=HEAP[$nextTokPtr_addr]; //@line 262 "xmltok_impl.c"
        var $249=HEAP[$ptr_addr]; //@line 262 "xmltok_impl.c"
        HEAP[$248]=$249; //@line 262 "xmltok_impl.c"
        HEAP[$0]=0; //@line 263 "xmltok_impl.c"
        __label__ = 71; break; //@line 263 "xmltok_impl.c"
      case 63: // $bb62
        var $250=HEAP[$ptr_addr]; //@line 265 "xmltok_impl.c"
        var $251=(($250+2)&4294967295); //@line 265 "xmltok_impl.c"
        HEAP[$ptr_addr]=$251; //@line 265 "xmltok_impl.c"
        var $252=HEAP[$ptr_addr]; //@line 266 "xmltok_impl.c"
        var $253=HEAP[$end_addr]; //@line 266 "xmltok_impl.c"
        var $254=($252)==($253); //@line 266 "xmltok_impl.c"
        if ($254) { __label__ = 64; break; } else { __label__ = 65; break; } //@line 266 "xmltok_impl.c"
      case 64: // $bb63
        HEAP[$0]=-1; //@line 267 "xmltok_impl.c"
        __label__ = 71; break; //@line 267 "xmltok_impl.c"
      case 65: // $bb64
        var $255=HEAP[$ptr_addr]; //@line 268 "xmltok_impl.c"
        var $256=(($255+1)&4294967295); //@line 268 "xmltok_impl.c"
        var $257=HEAP[$256]; //@line 268 "xmltok_impl.c"
        var $258=reSign(($257), 8, 0)==0; //@line 268 "xmltok_impl.c"
        if ($258) { __label__ = 66; break; } else { __label__ = 68; break; } //@line 268 "xmltok_impl.c"
      case 66: // $bb65
        var $259=HEAP[$ptr_addr]; //@line 268 "xmltok_impl.c"
        var $260=(($259)&4294967295); //@line 268 "xmltok_impl.c"
        var $261=HEAP[$260]; //@line 268 "xmltok_impl.c"
        var $262=reSign(($261), 8, 0)==62; //@line 268 "xmltok_impl.c"
        if ($262) { __label__ = 67; break; } else { __label__ = 68; break; } //@line 268 "xmltok_impl.c"
      case 67: // $bb66
        var $263=HEAP[$ptr_addr]; //@line 269 "xmltok_impl.c"
        var $264=(($263+2)&4294967295); //@line 269 "xmltok_impl.c"
        var $265=HEAP[$nextTokPtr_addr]; //@line 269 "xmltok_impl.c"
        HEAP[$265]=$264; //@line 269 "xmltok_impl.c"
        var $266=HEAP[$tok]; //@line 270 "xmltok_impl.c"
        HEAP[$0]=$266; //@line 270 "xmltok_impl.c"
        __label__ = 71; break; //@line 270 "xmltok_impl.c"
      case 68: // $bb67
        var $267=HEAP[$nextTokPtr_addr]; //@line 274 "xmltok_impl.c"
        var $268=HEAP[$ptr_addr]; //@line 274 "xmltok_impl.c"
        HEAP[$267]=$268; //@line 274 "xmltok_impl.c"
        HEAP[$0]=0; //@line 275 "xmltok_impl.c"
        __label__ = 71; break; //@line 275 "xmltok_impl.c"
      case 69: // $bb68
        var $269=HEAP[$ptr_addr]; //@line 233 "xmltok_impl.c"
        var $270=HEAP[$end_addr]; //@line 233 "xmltok_impl.c"
        var $271=($269)!=($270); //@line 233 "xmltok_impl.c"
        if ($271) { __label__ = 19; break; } else { __label__ = 70; break; } //@line 233 "xmltok_impl.c"
      case 70: // $bb69
        HEAP[$0]=-1; //@line 278 "xmltok_impl.c"
        __label__ = 71; break; //@line 278 "xmltok_impl.c"
      case 71: // $bb70
        var $272=HEAP[$0]; //@line 226 "xmltok_impl.c"
        HEAP[$retval]=$272; //@line 226 "xmltok_impl.c"
        __label__ = 72; break; //@line 226 "xmltok_impl.c"
      case 72: // $return
        var $retval71=HEAP[$retval]; //@line 226 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval71; //@line 226 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_scanCdataSection($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $i=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$end_addr]; //@line 289 "xmltok_impl.c"
        var $2=($1); //@line 289 "xmltok_impl.c"
        var $3=HEAP[$ptr_addr]; //@line 289 "xmltok_impl.c"
        var $4=($3); //@line 289 "xmltok_impl.c"
        var $5=((($2) - ($4))&4294967295); //@line 289 "xmltok_impl.c"
        var $6=((($5))|0) <= 11; //@line 289 "xmltok_impl.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 289 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 290 "xmltok_impl.c"
        __label__ = 9; break; //@line 290 "xmltok_impl.c"
      case 2: // $bb1
        HEAP[$i]=0; //@line 291 "xmltok_impl.c"
        __label__ = 7; break; //@line 291 "xmltok_impl.c"
      case 3: // $bb2
        var $7=HEAP[$ptr_addr]; //@line 292 "xmltok_impl.c"
        var $8=(($7+1)&4294967295); //@line 292 "xmltok_impl.c"
        var $9=HEAP[$8]; //@line 292 "xmltok_impl.c"
        var $10=reSign(($9), 8, 0)!=0; //@line 292 "xmltok_impl.c"
        if ($10) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 292 "xmltok_impl.c"
      case 4: // $bb3
        var $11=HEAP[$ptr_addr]; //@line 292 "xmltok_impl.c"
        var $12=(($11)&4294967295); //@line 292 "xmltok_impl.c"
        var $13=HEAP[$12]; //@line 292 "xmltok_impl.c"
        var $14=HEAP[$i]; //@line 292 "xmltok_impl.c"
        var $15=((_CDATA_LSQB_5212+$14)&4294967295); //@line 292 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 292 "xmltok_impl.c"
        var $17=reSign(($13), 8, 0)!=reSign(($16), 8, 0); //@line 292 "xmltok_impl.c"
        if ($17) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 292 "xmltok_impl.c"
      case 5: // $bb4
        var $18=HEAP[$nextTokPtr_addr]; //@line 293 "xmltok_impl.c"
        var $19=HEAP[$ptr_addr]; //@line 293 "xmltok_impl.c"
        HEAP[$18]=$19; //@line 293 "xmltok_impl.c"
        HEAP[$0]=0; //@line 294 "xmltok_impl.c"
        __label__ = 9; break; //@line 294 "xmltok_impl.c"
      case 6: // $bb5
        var $20=HEAP[$i]; //@line 291 "xmltok_impl.c"
        var $21=((($20) + 1)&4294967295); //@line 291 "xmltok_impl.c"
        HEAP[$i]=$21; //@line 291 "xmltok_impl.c"
        var $22=HEAP[$ptr_addr]; //@line 291 "xmltok_impl.c"
        var $23=(($22+2)&4294967295); //@line 291 "xmltok_impl.c"
        HEAP[$ptr_addr]=$23; //@line 291 "xmltok_impl.c"
        __label__ = 7; break; //@line 291 "xmltok_impl.c"
      case 7: // $bb6
        var $24=HEAP[$i]; //@line 291 "xmltok_impl.c"
        var $25=((($24))|0) <= 5; //@line 291 "xmltok_impl.c"
        if ($25) { __label__ = 3; break; } else { __label__ = 8; break; } //@line 291 "xmltok_impl.c"
      case 8: // $bb7
        var $26=HEAP[$nextTokPtr_addr]; //@line 297 "xmltok_impl.c"
        var $27=HEAP[$ptr_addr]; //@line 297 "xmltok_impl.c"
        HEAP[$26]=$27; //@line 297 "xmltok_impl.c"
        HEAP[$0]=8; //@line 298 "xmltok_impl.c"
        __label__ = 9; break; //@line 298 "xmltok_impl.c"
      case 9: // $bb8
        var $28=HEAP[$0]; //@line 290 "xmltok_impl.c"
        HEAP[$retval]=$28; //@line 290 "xmltok_impl.c"
        __label__ = 10; break; //@line 290 "xmltok_impl.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 290 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 290 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_cdataSectionTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 37; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 37);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_512=__stackBase__+20;
        var $iftmp_504=__stackBase__+24;
        var $iftmp_502=__stackBase__+25;
        var $0=__stackBase__+29;
        var $n=__stackBase__+33;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 305 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 305 "xmltok_impl.c"
        var $3=($1)==($2); //@line 305 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 305 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-4; //@line 306 "xmltok_impl.c"
        __label__ = 58; break; //@line 306 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$end_addr]; //@line 308 "xmltok_impl.c"
        var $5=($4); //@line 308 "xmltok_impl.c"
        var $6=HEAP[$ptr_addr]; //@line 308 "xmltok_impl.c"
        var $7=($6); //@line 308 "xmltok_impl.c"
        var $8=((($5) - ($7))&4294967295); //@line 308 "xmltok_impl.c"
        HEAP[$n]=$8; //@line 308 "xmltok_impl.c"
        var $9=HEAP[$n]; //@line 309 "xmltok_impl.c"
        var $10=($9) & 1; //@line 309 "xmltok_impl.c"
        var $11=((($10)) & 255); //@line 309 "xmltok_impl.c"
        var $toBool=reSign(($11), 8, 0)!=0; //@line 309 "xmltok_impl.c"
        if ($toBool) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 309 "xmltok_impl.c"
      case 3: // $bb2
        var $12=HEAP[$n]; //@line 310 "xmltok_impl.c"
        var $13=($12) & -2; //@line 310 "xmltok_impl.c"
        HEAP[$n]=$13; //@line 310 "xmltok_impl.c"
        var $14=HEAP[$n]; //@line 311 "xmltok_impl.c"
        var $15=((($14))|0)==0; //@line 311 "xmltok_impl.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 311 "xmltok_impl.c"
      case 4: // $bb3
        HEAP[$0]=-1; //@line 312 "xmltok_impl.c"
        __label__ = 58; break; //@line 312 "xmltok_impl.c"
      case 5: // $bb4
        var $16=HEAP[$ptr_addr]; //@line 313 "xmltok_impl.c"
        var $17=HEAP[$n]; //@line 313 "xmltok_impl.c"
        var $18=(($16+$17)&4294967295); //@line 313 "xmltok_impl.c"
        HEAP[$end_addr]=$18; //@line 313 "xmltok_impl.c"
        __label__ = 6; break; //@line 313 "xmltok_impl.c"
      case 6: // $bb5
        var $19=HEAP[$ptr_addr]; //@line 316 "xmltok_impl.c"
        var $20=(($19+1)&4294967295); //@line 316 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 316 "xmltok_impl.c"
        var $22=reSign(($21), 8, 0)==0; //@line 316 "xmltok_impl.c"
        if ($22) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 316 "xmltok_impl.c"
      case 7: // $bb6
        var $23=HEAP[$enc_addr]; //@line 316 "xmltok_impl.c"
        var $24=$23; //@line 316 "xmltok_impl.c"
        var $25=HEAP[$ptr_addr]; //@line 316 "xmltok_impl.c"
        var $26=HEAP[$25]; //@line 316 "xmltok_impl.c"
        var $27=unSign(($26), 8, 0); //@line 316 "xmltok_impl.c"
        var $28=(($24+72)&4294967295); //@line 316 "xmltok_impl.c"
        var $29=(($28+$27)&4294967295); //@line 316 "xmltok_impl.c"
        var $30=HEAP[$29]; //@line 316 "xmltok_impl.c"
        var $31=unSign(($30), 8, 0); //@line 316 "xmltok_impl.c"
        HEAP[$iftmp_502]=$31; //@line 316 "xmltok_impl.c"
        __label__ = 9; break; //@line 316 "xmltok_impl.c"
      case 8: // $bb7
        var $32=HEAP[$ptr_addr]; //@line 316 "xmltok_impl.c"
        var $33=(($32)&4294967295); //@line 316 "xmltok_impl.c"
        var $34=HEAP[$33]; //@line 316 "xmltok_impl.c"
        var $35=reSign(($34), 8, 0); //@line 316 "xmltok_impl.c"
        var $36=HEAP[$ptr_addr]; //@line 316 "xmltok_impl.c"
        var $37=(($36+1)&4294967295); //@line 316 "xmltok_impl.c"
        var $38=HEAP[$37]; //@line 316 "xmltok_impl.c"
        var $39=reSign(($38), 8, 0); //@line 316 "xmltok_impl.c"
        var $40=((($39)) & 255); //@line 316 "xmltok_impl.c"
        var $41=((($35)) & 255); //@line 316 "xmltok_impl.c"
        var $42=_unicode_byte_type($40, $41); //@line 316 "xmltok_impl.c"
        HEAP[$iftmp_502]=$42; //@line 316 "xmltok_impl.c"
        __label__ = 9; break; //@line 316 "xmltok_impl.c"
      case 9: // $bb8
        var $43=HEAP[$iftmp_502]; //@line 316 "xmltok_impl.c"
        if ($43 == 0) {
          __label__ = 38; break;
        }
        else if ($43 == 1) {
          __label__ = 38; break;
        }
        else if ($43 == 4) {
          __label__ = 10; break;
        }
        else if ($43 == 5) {
          __label__ = 29; break;
        }
        else if ($43 == 6) {
          __label__ = 32; break;
        }
        else if ($43 == 7) {
          __label__ = 35; break;
        }
        else if ($43 == 8) {
          __label__ = 38; break;
        }
        else if ($43 == 9) {
          __label__ = 20; break;
        }
        else if ($43 == 10) {
          __label__ = 28; break;
        }
        else {
        __label__ = 39; break;
        }
        
      case 10: // $bb9
        var $44=HEAP[$ptr_addr]; //@line 318 "xmltok_impl.c"
        var $45=(($44+2)&4294967295); //@line 318 "xmltok_impl.c"
        HEAP[$ptr_addr]=$45; //@line 318 "xmltok_impl.c"
        var $46=HEAP[$ptr_addr]; //@line 319 "xmltok_impl.c"
        var $47=HEAP[$end_addr]; //@line 319 "xmltok_impl.c"
        var $48=($46)==($47); //@line 319 "xmltok_impl.c"
        if ($48) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 319 "xmltok_impl.c"
      case 11: // $bb10
        HEAP[$0]=-1; //@line 320 "xmltok_impl.c"
        __label__ = 58; break; //@line 320 "xmltok_impl.c"
      case 12: // $bb11
        var $49=HEAP[$ptr_addr]; //@line 321 "xmltok_impl.c"
        var $50=(($49+1)&4294967295); //@line 321 "xmltok_impl.c"
        var $51=HEAP[$50]; //@line 321 "xmltok_impl.c"
        var $52=reSign(($51), 8, 0)!=0; //@line 321 "xmltok_impl.c"
        if ($52) { __label__ = 40; break; } else { __label__ = 13; break; } //@line 321 "xmltok_impl.c"
      case 13: // $bb12
        var $53=HEAP[$ptr_addr]; //@line 321 "xmltok_impl.c"
        var $54=(($53)&4294967295); //@line 321 "xmltok_impl.c"
        var $55=HEAP[$54]; //@line 321 "xmltok_impl.c"
        var $56=reSign(($55), 8, 0)!=93; //@line 321 "xmltok_impl.c"
        if ($56) { __label__ = 40; break; } else { __label__ = 14; break; } //@line 321 "xmltok_impl.c"
      case 14: // $bb13
        var $57=HEAP[$ptr_addr]; //@line 323 "xmltok_impl.c"
        var $58=(($57+2)&4294967295); //@line 323 "xmltok_impl.c"
        HEAP[$ptr_addr]=$58; //@line 323 "xmltok_impl.c"
        var $59=HEAP[$ptr_addr]; //@line 324 "xmltok_impl.c"
        var $60=HEAP[$end_addr]; //@line 324 "xmltok_impl.c"
        var $61=($59)==($60); //@line 324 "xmltok_impl.c"
        if ($61) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 324 "xmltok_impl.c"
      case 15: // $bb14
        HEAP[$0]=-1; //@line 325 "xmltok_impl.c"
        __label__ = 58; break; //@line 325 "xmltok_impl.c"
      case 16: // $bb15
        var $62=HEAP[$ptr_addr]; //@line 326 "xmltok_impl.c"
        var $63=(($62+1)&4294967295); //@line 326 "xmltok_impl.c"
        var $64=HEAP[$63]; //@line 326 "xmltok_impl.c"
        var $65=reSign(($64), 8, 0)!=0; //@line 326 "xmltok_impl.c"
        if ($65) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 326 "xmltok_impl.c"
      case 17: // $bb16
        var $66=HEAP[$ptr_addr]; //@line 326 "xmltok_impl.c"
        var $67=(($66)&4294967295); //@line 326 "xmltok_impl.c"
        var $68=HEAP[$67]; //@line 326 "xmltok_impl.c"
        var $69=reSign(($68), 8, 0)!=62; //@line 326 "xmltok_impl.c"
        if ($69) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 326 "xmltok_impl.c"
      case 18: // $bb17
        var $70=HEAP[$ptr_addr]; //@line 327 "xmltok_impl.c"
        var $71=(($70+-2)&4294967295); //@line 327 "xmltok_impl.c"
        HEAP[$ptr_addr]=$71; //@line 327 "xmltok_impl.c"
        __label__ = 40; break; //@line 327 "xmltok_impl.c"
      case 19: // $bb18
        var $72=HEAP[$ptr_addr]; //@line 330 "xmltok_impl.c"
        var $73=(($72+2)&4294967295); //@line 330 "xmltok_impl.c"
        var $74=HEAP[$nextTokPtr_addr]; //@line 330 "xmltok_impl.c"
        HEAP[$74]=$73; //@line 330 "xmltok_impl.c"
        HEAP[$0]=40; //@line 331 "xmltok_impl.c"
        __label__ = 58; break; //@line 331 "xmltok_impl.c"
      case 20: // $bb19
        var $75=HEAP[$ptr_addr]; //@line 333 "xmltok_impl.c"
        var $76=(($75+2)&4294967295); //@line 333 "xmltok_impl.c"
        HEAP[$ptr_addr]=$76; //@line 333 "xmltok_impl.c"
        var $77=HEAP[$ptr_addr]; //@line 334 "xmltok_impl.c"
        var $78=HEAP[$end_addr]; //@line 334 "xmltok_impl.c"
        var $79=($77)==($78); //@line 334 "xmltok_impl.c"
        if ($79) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 334 "xmltok_impl.c"
      case 21: // $bb20
        HEAP[$0]=-1; //@line 335 "xmltok_impl.c"
        __label__ = 58; break; //@line 335 "xmltok_impl.c"
      case 22: // $bb21
        var $80=HEAP[$ptr_addr]; //@line 336 "xmltok_impl.c"
        var $81=(($80+1)&4294967295); //@line 336 "xmltok_impl.c"
        var $82=HEAP[$81]; //@line 336 "xmltok_impl.c"
        var $83=reSign(($82), 8, 0)==0; //@line 336 "xmltok_impl.c"
        if ($83) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 336 "xmltok_impl.c"
      case 23: // $bb22
        var $84=HEAP[$enc_addr]; //@line 336 "xmltok_impl.c"
        var $85=$84; //@line 336 "xmltok_impl.c"
        var $86=HEAP[$ptr_addr]; //@line 336 "xmltok_impl.c"
        var $87=HEAP[$86]; //@line 336 "xmltok_impl.c"
        var $88=unSign(($87), 8, 0); //@line 336 "xmltok_impl.c"
        var $89=(($85+72)&4294967295); //@line 336 "xmltok_impl.c"
        var $90=(($89+$88)&4294967295); //@line 336 "xmltok_impl.c"
        var $91=HEAP[$90]; //@line 336 "xmltok_impl.c"
        var $92=reSign(($91), 8, 0)==10; //@line 336 "xmltok_impl.c"
        var $93=unSign(($92), 1, 0); //@line 336 "xmltok_impl.c"
        HEAP[$iftmp_504]=$93; //@line 336 "xmltok_impl.c"
        __label__ = 25; break; //@line 336 "xmltok_impl.c"
      case 24: // $bb23
        var $94=HEAP[$ptr_addr]; //@line 336 "xmltok_impl.c"
        var $95=(($94)&4294967295); //@line 336 "xmltok_impl.c"
        var $96=HEAP[$95]; //@line 336 "xmltok_impl.c"
        var $97=reSign(($96), 8, 0); //@line 336 "xmltok_impl.c"
        var $98=HEAP[$ptr_addr]; //@line 336 "xmltok_impl.c"
        var $99=(($98+1)&4294967295); //@line 336 "xmltok_impl.c"
        var $100=HEAP[$99]; //@line 336 "xmltok_impl.c"
        var $101=reSign(($100), 8, 0); //@line 336 "xmltok_impl.c"
        var $102=((($101)) & 255); //@line 336 "xmltok_impl.c"
        var $103=((($97)) & 255); //@line 336 "xmltok_impl.c"
        var $104=_unicode_byte_type($102, $103); //@line 336 "xmltok_impl.c"
        var $105=((($104))|0)==10; //@line 336 "xmltok_impl.c"
        var $106=unSign(($105), 1, 0); //@line 336 "xmltok_impl.c"
        HEAP[$iftmp_504]=$106; //@line 336 "xmltok_impl.c"
        __label__ = 25; break; //@line 336 "xmltok_impl.c"
      case 25: // $bb24
        var $107=HEAP[$iftmp_504]; //@line 336 "xmltok_impl.c"
        var $toBool25=reSign(($107), 8, 0)!=0; //@line 336 "xmltok_impl.c"
        if ($toBool25) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 336 "xmltok_impl.c"
      case 26: // $bb26
        var $108=HEAP[$ptr_addr]; //@line 337 "xmltok_impl.c"
        var $109=(($108+2)&4294967295); //@line 337 "xmltok_impl.c"
        HEAP[$ptr_addr]=$109; //@line 337 "xmltok_impl.c"
        __label__ = 27; break; //@line 337 "xmltok_impl.c"
      case 27: // $bb27
        var $110=HEAP[$nextTokPtr_addr]; //@line 338 "xmltok_impl.c"
        var $111=HEAP[$ptr_addr]; //@line 338 "xmltok_impl.c"
        HEAP[$110]=$111; //@line 338 "xmltok_impl.c"
        HEAP[$0]=7; //@line 339 "xmltok_impl.c"
        __label__ = 58; break; //@line 339 "xmltok_impl.c"
      case 28: // $bb28
        var $112=HEAP[$ptr_addr]; //@line 341 "xmltok_impl.c"
        var $113=(($112+2)&4294967295); //@line 341 "xmltok_impl.c"
        var $114=HEAP[$nextTokPtr_addr]; //@line 341 "xmltok_impl.c"
        HEAP[$114]=$113; //@line 341 "xmltok_impl.c"
        HEAP[$0]=7; //@line 342 "xmltok_impl.c"
        __label__ = 58; break; //@line 342 "xmltok_impl.c"
      case 29: // $bb29
        var $115=HEAP[$end_addr]; //@line 343 "xmltok_impl.c"
        var $116=($115); //@line 343 "xmltok_impl.c"
        var $117=HEAP[$ptr_addr]; //@line 343 "xmltok_impl.c"
        var $118=($117); //@line 343 "xmltok_impl.c"
        var $119=((($116) - ($118))&4294967295); //@line 343 "xmltok_impl.c"
        var $120=((($119))|0) <= 1; //@line 343 "xmltok_impl.c"
        if ($120) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 343 "xmltok_impl.c"
      case 30: // $bb30
        HEAP[$0]=-2; //@line 343 "xmltok_impl.c"
        __label__ = 58; break; //@line 343 "xmltok_impl.c"
      case 31: // $bb31
        var $121=HEAP[$ptr_addr]; //@line 343 "xmltok_impl.c"
        var $122=(($121+2)&4294967295); //@line 343 "xmltok_impl.c"
        HEAP[$ptr_addr]=$122; //@line 343 "xmltok_impl.c"
        __label__ = 40; break; //@line 343 "xmltok_impl.c"
      case 32: // $bb32
        var $123=HEAP[$end_addr]; //@line 343 "xmltok_impl.c"
        var $124=($123); //@line 343 "xmltok_impl.c"
        var $125=HEAP[$ptr_addr]; //@line 343 "xmltok_impl.c"
        var $126=($125); //@line 343 "xmltok_impl.c"
        var $127=((($124) - ($126))&4294967295); //@line 343 "xmltok_impl.c"
        var $128=((($127))|0) <= 2; //@line 343 "xmltok_impl.c"
        if ($128) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 343 "xmltok_impl.c"
      case 33: // $bb33
        HEAP[$0]=-2; //@line 343 "xmltok_impl.c"
        __label__ = 58; break; //@line 343 "xmltok_impl.c"
      case 34: // $bb34
        var $129=HEAP[$ptr_addr]; //@line 343 "xmltok_impl.c"
        var $130=(($129+3)&4294967295); //@line 343 "xmltok_impl.c"
        HEAP[$ptr_addr]=$130; //@line 343 "xmltok_impl.c"
        __label__ = 40; break; //@line 343 "xmltok_impl.c"
      case 35: // $bb35
        var $131=HEAP[$end_addr]; //@line 343 "xmltok_impl.c"
        var $132=($131); //@line 343 "xmltok_impl.c"
        var $133=HEAP[$ptr_addr]; //@line 343 "xmltok_impl.c"
        var $134=($133); //@line 343 "xmltok_impl.c"
        var $135=((($132) - ($134))&4294967295); //@line 343 "xmltok_impl.c"
        var $136=((($135))|0) <= 3; //@line 343 "xmltok_impl.c"
        if ($136) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 343 "xmltok_impl.c"
      case 36: // $bb36
        HEAP[$0]=-2; //@line 343 "xmltok_impl.c"
        __label__ = 58; break; //@line 343 "xmltok_impl.c"
      case 37: // $bb37
        var $137=HEAP[$ptr_addr]; //@line 343 "xmltok_impl.c"
        var $138=(($137+4)&4294967295); //@line 343 "xmltok_impl.c"
        HEAP[$ptr_addr]=$138; //@line 343 "xmltok_impl.c"
        __label__ = 40; break; //@line 343 "xmltok_impl.c"
      case 38: // $bb38
        var $139=HEAP[$nextTokPtr_addr]; //@line 343 "xmltok_impl.c"
        var $140=HEAP[$ptr_addr]; //@line 343 "xmltok_impl.c"
        HEAP[$139]=$140; //@line 343 "xmltok_impl.c"
        HEAP[$0]=0; //@line 343 "xmltok_impl.c"
        __label__ = 58; break; //@line 343 "xmltok_impl.c"
      case 39: // $bb39
        var $141=HEAP[$ptr_addr]; //@line 345 "xmltok_impl.c"
        var $142=(($141+2)&4294967295); //@line 345 "xmltok_impl.c"
        HEAP[$ptr_addr]=$142; //@line 345 "xmltok_impl.c"
        __label__ = 40; break; //@line 345 "xmltok_impl.c"
      case 40: // $bb40
        __label__ = 56; break; //@line 345 "xmltok_impl.c"
      case 41: // $bb41
        var $143=HEAP[$ptr_addr]; //@line 349 "xmltok_impl.c"
        var $144=(($143+1)&4294967295); //@line 349 "xmltok_impl.c"
        var $145=HEAP[$144]; //@line 349 "xmltok_impl.c"
        var $146=reSign(($145), 8, 0)==0; //@line 349 "xmltok_impl.c"
        if ($146) { __label__ = 42; break; } else { __label__ = 43; break; } //@line 349 "xmltok_impl.c"
      case 42: // $bb42
        var $147=HEAP[$enc_addr]; //@line 349 "xmltok_impl.c"
        var $148=$147; //@line 349 "xmltok_impl.c"
        var $149=HEAP[$ptr_addr]; //@line 349 "xmltok_impl.c"
        var $150=HEAP[$149]; //@line 349 "xmltok_impl.c"
        var $151=unSign(($150), 8, 0); //@line 349 "xmltok_impl.c"
        var $152=(($148+72)&4294967295); //@line 349 "xmltok_impl.c"
        var $153=(($152+$151)&4294967295); //@line 349 "xmltok_impl.c"
        var $154=HEAP[$153]; //@line 349 "xmltok_impl.c"
        var $155=unSign(($154), 8, 0); //@line 349 "xmltok_impl.c"
        HEAP[$iftmp_512]=$155; //@line 349 "xmltok_impl.c"
        __label__ = 44; break; //@line 349 "xmltok_impl.c"
      case 43: // $bb43
        var $156=HEAP[$ptr_addr]; //@line 349 "xmltok_impl.c"
        var $157=(($156)&4294967295); //@line 349 "xmltok_impl.c"
        var $158=HEAP[$157]; //@line 349 "xmltok_impl.c"
        var $159=reSign(($158), 8, 0); //@line 349 "xmltok_impl.c"
        var $160=HEAP[$ptr_addr]; //@line 349 "xmltok_impl.c"
        var $161=(($160+1)&4294967295); //@line 349 "xmltok_impl.c"
        var $162=HEAP[$161]; //@line 349 "xmltok_impl.c"
        var $163=reSign(($162), 8, 0); //@line 349 "xmltok_impl.c"
        var $164=((($163)) & 255); //@line 349 "xmltok_impl.c"
        var $165=((($159)) & 255); //@line 349 "xmltok_impl.c"
        var $166=_unicode_byte_type($164, $165); //@line 349 "xmltok_impl.c"
        HEAP[$iftmp_512]=$166; //@line 349 "xmltok_impl.c"
        __label__ = 44; break; //@line 349 "xmltok_impl.c"
      case 44: // $bb44
        var $167=HEAP[$iftmp_512]; //@line 349 "xmltok_impl.c"
        if ($167 == 0) {
          __label__ = 54; break;
        }
        else if ($167 == 1) {
          __label__ = 54; break;
        }
        else if ($167 == 4) {
          __label__ = 54; break;
        }
        else if ($167 == 5) {
          __label__ = 45; break;
        }
        else if ($167 == 6) {
          __label__ = 48; break;
        }
        else if ($167 == 7) {
          __label__ = 51; break;
        }
        else if ($167 == 8) {
          __label__ = 54; break;
        }
        else if ($167 == 9) {
          __label__ = 54; break;
        }
        else if ($167 == 10) {
          __label__ = 54; break;
        }
        else {
        __label__ = 55; break;
        }
        
      case 45: // $bb45
        var $168=HEAP[$end_addr]; //@line 358 "xmltok_impl.c"
        var $169=($168); //@line 358 "xmltok_impl.c"
        var $170=HEAP[$ptr_addr]; //@line 358 "xmltok_impl.c"
        var $171=($170); //@line 358 "xmltok_impl.c"
        var $172=((($169) - ($171))&4294967295); //@line 358 "xmltok_impl.c"
        var $173=((($172))|0) <= 1; //@line 358 "xmltok_impl.c"
        if ($173) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 358 "xmltok_impl.c"
      case 46: // $bb46
        var $174=HEAP[$nextTokPtr_addr]; //@line 358 "xmltok_impl.c"
        var $175=HEAP[$ptr_addr]; //@line 358 "xmltok_impl.c"
        HEAP[$174]=$175; //@line 358 "xmltok_impl.c"
        HEAP[$0]=6; //@line 358 "xmltok_impl.c"
        __label__ = 58; break; //@line 358 "xmltok_impl.c"
      case 47: // $bb47
        var $176=HEAP[$ptr_addr]; //@line 358 "xmltok_impl.c"
        var $177=(($176+2)&4294967295); //@line 358 "xmltok_impl.c"
        HEAP[$ptr_addr]=$177; //@line 358 "xmltok_impl.c"
        __label__ = 56; break; //@line 358 "xmltok_impl.c"
      case 48: // $bb48
        var $178=HEAP[$end_addr]; //@line 358 "xmltok_impl.c"
        var $179=($178); //@line 358 "xmltok_impl.c"
        var $180=HEAP[$ptr_addr]; //@line 358 "xmltok_impl.c"
        var $181=($180); //@line 358 "xmltok_impl.c"
        var $182=((($179) - ($181))&4294967295); //@line 358 "xmltok_impl.c"
        var $183=((($182))|0) <= 2; //@line 358 "xmltok_impl.c"
        if ($183) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 358 "xmltok_impl.c"
      case 49: // $bb49
        var $184=HEAP[$nextTokPtr_addr]; //@line 358 "xmltok_impl.c"
        var $185=HEAP[$ptr_addr]; //@line 358 "xmltok_impl.c"
        HEAP[$184]=$185; //@line 358 "xmltok_impl.c"
        HEAP[$0]=6; //@line 358 "xmltok_impl.c"
        __label__ = 58; break; //@line 358 "xmltok_impl.c"
      case 50: // $bb50
        var $186=HEAP[$ptr_addr]; //@line 358 "xmltok_impl.c"
        var $187=(($186+3)&4294967295); //@line 358 "xmltok_impl.c"
        HEAP[$ptr_addr]=$187; //@line 358 "xmltok_impl.c"
        __label__ = 56; break; //@line 358 "xmltok_impl.c"
      case 51: // $bb51
        var $188=HEAP[$end_addr]; //@line 358 "xmltok_impl.c"
        var $189=($188); //@line 358 "xmltok_impl.c"
        var $190=HEAP[$ptr_addr]; //@line 358 "xmltok_impl.c"
        var $191=($190); //@line 358 "xmltok_impl.c"
        var $192=((($189) - ($191))&4294967295); //@line 358 "xmltok_impl.c"
        var $193=((($192))|0) <= 3; //@line 358 "xmltok_impl.c"
        if ($193) { __label__ = 52; break; } else { __label__ = 53; break; } //@line 358 "xmltok_impl.c"
      case 52: // $bb52
        var $194=HEAP[$nextTokPtr_addr]; //@line 358 "xmltok_impl.c"
        var $195=HEAP[$ptr_addr]; //@line 358 "xmltok_impl.c"
        HEAP[$194]=$195; //@line 358 "xmltok_impl.c"
        HEAP[$0]=6; //@line 358 "xmltok_impl.c"
        __label__ = 58; break; //@line 358 "xmltok_impl.c"
      case 53: // $bb53
        var $196=HEAP[$ptr_addr]; //@line 358 "xmltok_impl.c"
        var $197=(($196+4)&4294967295); //@line 358 "xmltok_impl.c"
        HEAP[$ptr_addr]=$197; //@line 358 "xmltok_impl.c"
        __label__ = 56; break; //@line 358 "xmltok_impl.c"
      case 54: // $bb54
        var $198=HEAP[$nextTokPtr_addr]; //@line 366 "xmltok_impl.c"
        var $199=HEAP[$ptr_addr]; //@line 366 "xmltok_impl.c"
        HEAP[$198]=$199; //@line 366 "xmltok_impl.c"
        HEAP[$0]=6; //@line 367 "xmltok_impl.c"
        __label__ = 58; break; //@line 367 "xmltok_impl.c"
      case 55: // $bb55
        var $200=HEAP[$ptr_addr]; //@line 369 "xmltok_impl.c"
        var $201=(($200+2)&4294967295); //@line 369 "xmltok_impl.c"
        HEAP[$ptr_addr]=$201; //@line 369 "xmltok_impl.c"
        __label__ = 56; break; //@line 369 "xmltok_impl.c"
      case 56: // $bb56
        var $202=HEAP[$ptr_addr]; //@line 348 "xmltok_impl.c"
        var $203=HEAP[$end_addr]; //@line 348 "xmltok_impl.c"
        var $204=($202)!=($203); //@line 348 "xmltok_impl.c"
        if ($204) { __label__ = 41; break; } else { __label__ = 57; break; } //@line 348 "xmltok_impl.c"
      case 57: // $bb57
        var $205=HEAP[$nextTokPtr_addr]; //@line 373 "xmltok_impl.c"
        var $206=HEAP[$ptr_addr]; //@line 373 "xmltok_impl.c"
        HEAP[$205]=$206; //@line 373 "xmltok_impl.c"
        HEAP[$0]=6; //@line 374 "xmltok_impl.c"
        __label__ = 58; break; //@line 374 "xmltok_impl.c"
      case 58: // $bb58
        var $207=HEAP[$0]; //@line 306 "xmltok_impl.c"
        HEAP[$retval]=$207; //@line 306 "xmltok_impl.c"
        __label__ = 59; break; //@line 306 "xmltok_impl.c"
      case 59: // $return
        var $retval59=HEAP[$retval]; //@line 306 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval59; //@line 306 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_scanEndTag($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_536=__stackBase__+20;
        var $iftmp_528=__stackBase__+24;
        var $iftmp_520=__stackBase__+28;
        var $0=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 383 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 383 "xmltok_impl.c"
        var $3=($1)==($2); //@line 383 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 383 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 384 "xmltok_impl.c"
        __label__ = 49; break; //@line 384 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$ptr_addr]; //@line 385 "xmltok_impl.c"
        var $5=(($4+1)&4294967295); //@line 385 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 385 "xmltok_impl.c"
        var $7=reSign(($6), 8, 0)==0; //@line 385 "xmltok_impl.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 385 "xmltok_impl.c"
      case 3: // $bb2
        var $8=HEAP[$enc_addr]; //@line 385 "xmltok_impl.c"
        var $9=$8; //@line 385 "xmltok_impl.c"
        var $10=HEAP[$ptr_addr]; //@line 385 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 385 "xmltok_impl.c"
        var $12=unSign(($11), 8, 0); //@line 385 "xmltok_impl.c"
        var $13=(($9+72)&4294967295); //@line 385 "xmltok_impl.c"
        var $14=(($13+$12)&4294967295); //@line 385 "xmltok_impl.c"
        var $15=HEAP[$14]; //@line 385 "xmltok_impl.c"
        var $16=unSign(($15), 8, 0); //@line 385 "xmltok_impl.c"
        HEAP[$iftmp_520]=$16; //@line 385 "xmltok_impl.c"
        __label__ = 5; break; //@line 385 "xmltok_impl.c"
      case 4: // $bb3
        var $17=HEAP[$ptr_addr]; //@line 385 "xmltok_impl.c"
        var $18=(($17)&4294967295); //@line 385 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 385 "xmltok_impl.c"
        var $20=reSign(($19), 8, 0); //@line 385 "xmltok_impl.c"
        var $21=HEAP[$ptr_addr]; //@line 385 "xmltok_impl.c"
        var $22=(($21+1)&4294967295); //@line 385 "xmltok_impl.c"
        var $23=HEAP[$22]; //@line 385 "xmltok_impl.c"
        var $24=reSign(($23), 8, 0); //@line 385 "xmltok_impl.c"
        var $25=((($24)) & 255); //@line 385 "xmltok_impl.c"
        var $26=((($20)) & 255); //@line 385 "xmltok_impl.c"
        var $27=_unicode_byte_type($25, $26); //@line 385 "xmltok_impl.c"
        HEAP[$iftmp_520]=$27; //@line 385 "xmltok_impl.c"
        __label__ = 5; break; //@line 385 "xmltok_impl.c"
      case 5: // $bb4
        var $28=HEAP[$iftmp_520]; //@line 385 "xmltok_impl.c"
        if ($28 == 5) {
          __label__ = 9; break;
        }
        else if ($28 == 6) {
          __label__ = 12; break;
        }
        else if ($28 == 7) {
          __label__ = 15; break;
        }
        else if ($28 == 22) {
          __label__ = 8; break;
        }
        else if ($28 == 24) {
          __label__ = 8; break;
        }
        else if ($28 == 29) {
          __label__ = 6; break;
        }
        else {
        __label__ = 18; break;
        }
        
      case 6: // $bb5
        var $29=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        var $30=(($29+1)&4294967295); //@line 386 "xmltok_impl.c"
        var $31=HEAP[$30]; //@line 386 "xmltok_impl.c"
        var $32=unSign(($31), 8, 0); //@line 386 "xmltok_impl.c"
        var $33=((_nmstrtPages+$32)&4294967295); //@line 386 "xmltok_impl.c"
        var $34=HEAP[$33]; //@line 386 "xmltok_impl.c"
        var $35=unSign(($34), 8, 0); //@line 386 "xmltok_impl.c"
        var $36=($35) << 3; //@line 386 "xmltok_impl.c"
        var $37=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        var $38=(($37)&4294967295); //@line 386 "xmltok_impl.c"
        var $39=HEAP[$38]; //@line 386 "xmltok_impl.c"
        var $40=unSign(($39), 8, 0) >>> 5; //@line 386 "xmltok_impl.c"
        var $41=unSign(($40), 8, 0); //@line 386 "xmltok_impl.c"
        var $42=((($36) + ($41))&4294967295); //@line 386 "xmltok_impl.c"
        var $43=((_namingBitmap+$42*4)&4294967295); //@line 386 "xmltok_impl.c"
        var $44=HEAP[$43]; //@line 386 "xmltok_impl.c"
        var $45=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        var $46=(($45)&4294967295); //@line 386 "xmltok_impl.c"
        var $47=HEAP[$46]; //@line 386 "xmltok_impl.c"
        var $48=unSign(($47), 8, 0); //@line 386 "xmltok_impl.c"
        var $49=($48) & 31; //@line 386 "xmltok_impl.c"
        var $50=1 << ($49); //@line 386 "xmltok_impl.c"
        var $51=($44) & ($50); //@line 386 "xmltok_impl.c"
        var $52=((($51))|0)==0; //@line 386 "xmltok_impl.c"
        if ($52) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 386 "xmltok_impl.c"
      case 7: // $bb6
        var $53=HEAP[$nextTokPtr_addr]; //@line 386 "xmltok_impl.c"
        var $54=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        HEAP[$53]=$54; //@line 386 "xmltok_impl.c"
        HEAP[$0]=0; //@line 386 "xmltok_impl.c"
        __label__ = 49; break; //@line 386 "xmltok_impl.c"
      case 8: // $bb7
        var $55=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        var $56=(($55+2)&4294967295); //@line 386 "xmltok_impl.c"
        HEAP[$ptr_addr]=$56; //@line 386 "xmltok_impl.c"
        __label__ = 47; break; //@line 386 "xmltok_impl.c"
      case 9: // $bb8
        var $57=HEAP[$end_addr]; //@line 386 "xmltok_impl.c"
        var $58=($57); //@line 386 "xmltok_impl.c"
        var $59=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        var $60=($59); //@line 386 "xmltok_impl.c"
        var $61=((($58) - ($60))&4294967295); //@line 386 "xmltok_impl.c"
        var $62=((($61))|0) <= 1; //@line 386 "xmltok_impl.c"
        if ($62) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 386 "xmltok_impl.c"
      case 10: // $bb9
        HEAP[$0]=-2; //@line 386 "xmltok_impl.c"
        __label__ = 49; break; //@line 386 "xmltok_impl.c"
      case 11: // $bb10
        var $63=HEAP[$nextTokPtr_addr]; //@line 386 "xmltok_impl.c"
        var $64=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        HEAP[$63]=$64; //@line 386 "xmltok_impl.c"
        HEAP[$0]=0; //@line 386 "xmltok_impl.c"
        __label__ = 49; break; //@line 386 "xmltok_impl.c"
      case 12: // $bb11
        var $65=HEAP[$end_addr]; //@line 386 "xmltok_impl.c"
        var $66=($65); //@line 386 "xmltok_impl.c"
        var $67=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        var $68=($67); //@line 386 "xmltok_impl.c"
        var $69=((($66) - ($68))&4294967295); //@line 386 "xmltok_impl.c"
        var $70=((($69))|0) <= 2; //@line 386 "xmltok_impl.c"
        if ($70) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 386 "xmltok_impl.c"
      case 13: // $bb12
        HEAP[$0]=-2; //@line 386 "xmltok_impl.c"
        __label__ = 49; break; //@line 386 "xmltok_impl.c"
      case 14: // $bb13
        var $71=HEAP[$nextTokPtr_addr]; //@line 386 "xmltok_impl.c"
        var $72=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        HEAP[$71]=$72; //@line 386 "xmltok_impl.c"
        HEAP[$0]=0; //@line 386 "xmltok_impl.c"
        __label__ = 49; break; //@line 386 "xmltok_impl.c"
      case 15: // $bb14
        var $73=HEAP[$end_addr]; //@line 386 "xmltok_impl.c"
        var $74=($73); //@line 386 "xmltok_impl.c"
        var $75=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        var $76=($75); //@line 386 "xmltok_impl.c"
        var $77=((($74) - ($76))&4294967295); //@line 386 "xmltok_impl.c"
        var $78=((($77))|0) <= 3; //@line 386 "xmltok_impl.c"
        if ($78) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 386 "xmltok_impl.c"
      case 16: // $bb15
        HEAP[$0]=-2; //@line 386 "xmltok_impl.c"
        __label__ = 49; break; //@line 386 "xmltok_impl.c"
      case 17: // $bb16
        var $79=HEAP[$nextTokPtr_addr]; //@line 386 "xmltok_impl.c"
        var $80=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        HEAP[$79]=$80; //@line 386 "xmltok_impl.c"
        HEAP[$0]=0; //@line 386 "xmltok_impl.c"
        __label__ = 49; break; //@line 386 "xmltok_impl.c"
      case 18: // $bb17
        var $81=HEAP[$nextTokPtr_addr]; //@line 388 "xmltok_impl.c"
        var $82=HEAP[$ptr_addr]; //@line 388 "xmltok_impl.c"
        HEAP[$81]=$82; //@line 388 "xmltok_impl.c"
        HEAP[$0]=0; //@line 389 "xmltok_impl.c"
        __label__ = 49; break; //@line 389 "xmltok_impl.c"
      case 19: // $bb18
        var $83=HEAP[$ptr_addr]; //@line 392 "xmltok_impl.c"
        var $84=(($83+1)&4294967295); //@line 392 "xmltok_impl.c"
        var $85=HEAP[$84]; //@line 392 "xmltok_impl.c"
        var $86=reSign(($85), 8, 0)==0; //@line 392 "xmltok_impl.c"
        if ($86) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 392 "xmltok_impl.c"
      case 20: // $bb19
        var $87=HEAP[$enc_addr]; //@line 392 "xmltok_impl.c"
        var $88=$87; //@line 392 "xmltok_impl.c"
        var $89=HEAP[$ptr_addr]; //@line 392 "xmltok_impl.c"
        var $90=HEAP[$89]; //@line 392 "xmltok_impl.c"
        var $91=unSign(($90), 8, 0); //@line 392 "xmltok_impl.c"
        var $92=(($88+72)&4294967295); //@line 392 "xmltok_impl.c"
        var $93=(($92+$91)&4294967295); //@line 392 "xmltok_impl.c"
        var $94=HEAP[$93]; //@line 392 "xmltok_impl.c"
        var $95=unSign(($94), 8, 0); //@line 392 "xmltok_impl.c"
        HEAP[$iftmp_528]=$95; //@line 392 "xmltok_impl.c"
        __label__ = 22; break; //@line 392 "xmltok_impl.c"
      case 21: // $bb20
        var $96=HEAP[$ptr_addr]; //@line 392 "xmltok_impl.c"
        var $97=(($96)&4294967295); //@line 392 "xmltok_impl.c"
        var $98=HEAP[$97]; //@line 392 "xmltok_impl.c"
        var $99=reSign(($98), 8, 0); //@line 392 "xmltok_impl.c"
        var $100=HEAP[$ptr_addr]; //@line 392 "xmltok_impl.c"
        var $101=(($100+1)&4294967295); //@line 392 "xmltok_impl.c"
        var $102=HEAP[$101]; //@line 392 "xmltok_impl.c"
        var $103=reSign(($102), 8, 0); //@line 392 "xmltok_impl.c"
        var $104=((($103)) & 255); //@line 392 "xmltok_impl.c"
        var $105=((($99)) & 255); //@line 392 "xmltok_impl.c"
        var $106=_unicode_byte_type($104, $105); //@line 392 "xmltok_impl.c"
        HEAP[$iftmp_528]=$106; //@line 392 "xmltok_impl.c"
        __label__ = 22; break; //@line 392 "xmltok_impl.c"
      case 22: // $bb21
        var $107=HEAP[$iftmp_528]; //@line 392 "xmltok_impl.c"
        if ($107 == 5) {
          __label__ = 26; break;
        }
        else if ($107 == 6) {
          __label__ = 29; break;
        }
        else if ($107 == 7) {
          __label__ = 32; break;
        }
        else if ($107 == 9) {
          __label__ = 35; break;
        }
        else if ($107 == 10) {
          __label__ = 35; break;
        }
        else if ($107 == 11) {
          __label__ = 45; break;
        }
        else if ($107 == 21) {
          __label__ = 35; break;
        }
        else if ($107 == 22) {
          __label__ = 25; break;
        }
        else if ($107 == 24) {
          __label__ = 25; break;
        }
        else if ($107 == 25) {
          __label__ = 25; break;
        }
        else if ($107 == 26) {
          __label__ = 25; break;
        }
        else if ($107 == 27) {
          __label__ = 25; break;
        }
        else if ($107 == 29) {
          __label__ = 23; break;
        }
        else {
        __label__ = 46; break;
        }
        
      case 23: // $bb22
        var $108=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        var $109=(($108+1)&4294967295); //@line 393 "xmltok_impl.c"
        var $110=HEAP[$109]; //@line 393 "xmltok_impl.c"
        var $111=unSign(($110), 8, 0); //@line 393 "xmltok_impl.c"
        var $112=((_namePages+$111)&4294967295); //@line 393 "xmltok_impl.c"
        var $113=HEAP[$112]; //@line 393 "xmltok_impl.c"
        var $114=unSign(($113), 8, 0); //@line 393 "xmltok_impl.c"
        var $115=($114) << 3; //@line 393 "xmltok_impl.c"
        var $116=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        var $117=(($116)&4294967295); //@line 393 "xmltok_impl.c"
        var $118=HEAP[$117]; //@line 393 "xmltok_impl.c"
        var $119=unSign(($118), 8, 0) >>> 5; //@line 393 "xmltok_impl.c"
        var $120=unSign(($119), 8, 0); //@line 393 "xmltok_impl.c"
        var $121=((($115) + ($120))&4294967295); //@line 393 "xmltok_impl.c"
        var $122=((_namingBitmap+$121*4)&4294967295); //@line 393 "xmltok_impl.c"
        var $123=HEAP[$122]; //@line 393 "xmltok_impl.c"
        var $124=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        var $125=(($124)&4294967295); //@line 393 "xmltok_impl.c"
        var $126=HEAP[$125]; //@line 393 "xmltok_impl.c"
        var $127=unSign(($126), 8, 0); //@line 393 "xmltok_impl.c"
        var $128=($127) & 31; //@line 393 "xmltok_impl.c"
        var $129=1 << ($128); //@line 393 "xmltok_impl.c"
        var $130=($123) & ($129); //@line 393 "xmltok_impl.c"
        var $131=((($130))|0)==0; //@line 393 "xmltok_impl.c"
        if ($131) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 393 "xmltok_impl.c"
      case 24: // $bb23
        var $132=HEAP[$nextTokPtr_addr]; //@line 393 "xmltok_impl.c"
        var $133=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        HEAP[$132]=$133; //@line 393 "xmltok_impl.c"
        HEAP[$0]=0; //@line 393 "xmltok_impl.c"
        __label__ = 49; break; //@line 393 "xmltok_impl.c"
      case 25: // $bb24
        var $134=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        var $135=(($134+2)&4294967295); //@line 393 "xmltok_impl.c"
        HEAP[$ptr_addr]=$135; //@line 393 "xmltok_impl.c"
        __label__ = 47; break; //@line 393 "xmltok_impl.c"
      case 26: // $bb25
        var $136=HEAP[$end_addr]; //@line 393 "xmltok_impl.c"
        var $137=($136); //@line 393 "xmltok_impl.c"
        var $138=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        var $139=($138); //@line 393 "xmltok_impl.c"
        var $140=((($137) - ($139))&4294967295); //@line 393 "xmltok_impl.c"
        var $141=((($140))|0) <= 1; //@line 393 "xmltok_impl.c"
        if ($141) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 393 "xmltok_impl.c"
      case 27: // $bb26
        HEAP[$0]=-2; //@line 393 "xmltok_impl.c"
        __label__ = 49; break; //@line 393 "xmltok_impl.c"
      case 28: // $bb27
        var $142=HEAP[$nextTokPtr_addr]; //@line 393 "xmltok_impl.c"
        var $143=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        HEAP[$142]=$143; //@line 393 "xmltok_impl.c"
        HEAP[$0]=0; //@line 393 "xmltok_impl.c"
        __label__ = 49; break; //@line 393 "xmltok_impl.c"
      case 29: // $bb28
        var $144=HEAP[$end_addr]; //@line 393 "xmltok_impl.c"
        var $145=($144); //@line 393 "xmltok_impl.c"
        var $146=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        var $147=($146); //@line 393 "xmltok_impl.c"
        var $148=((($145) - ($147))&4294967295); //@line 393 "xmltok_impl.c"
        var $149=((($148))|0) <= 2; //@line 393 "xmltok_impl.c"
        if ($149) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 393 "xmltok_impl.c"
      case 30: // $bb29
        HEAP[$0]=-2; //@line 393 "xmltok_impl.c"
        __label__ = 49; break; //@line 393 "xmltok_impl.c"
      case 31: // $bb30
        var $150=HEAP[$nextTokPtr_addr]; //@line 393 "xmltok_impl.c"
        var $151=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        HEAP[$150]=$151; //@line 393 "xmltok_impl.c"
        HEAP[$0]=0; //@line 393 "xmltok_impl.c"
        __label__ = 49; break; //@line 393 "xmltok_impl.c"
      case 32: // $bb31
        var $152=HEAP[$end_addr]; //@line 393 "xmltok_impl.c"
        var $153=($152); //@line 393 "xmltok_impl.c"
        var $154=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        var $155=($154); //@line 393 "xmltok_impl.c"
        var $156=((($153) - ($155))&4294967295); //@line 393 "xmltok_impl.c"
        var $157=((($156))|0) <= 3; //@line 393 "xmltok_impl.c"
        if ($157) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 393 "xmltok_impl.c"
      case 33: // $bb32
        HEAP[$0]=-2; //@line 393 "xmltok_impl.c"
        __label__ = 49; break; //@line 393 "xmltok_impl.c"
      case 34: // $bb33
        var $158=HEAP[$nextTokPtr_addr]; //@line 393 "xmltok_impl.c"
        var $159=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        HEAP[$158]=$159; //@line 393 "xmltok_impl.c"
        HEAP[$0]=0; //@line 393 "xmltok_impl.c"
        __label__ = 49; break; //@line 393 "xmltok_impl.c"
      case 35: // $bb34
        var $160=HEAP[$ptr_addr]; //@line 395 "xmltok_impl.c"
        var $161=(($160+2)&4294967295); //@line 395 "xmltok_impl.c"
        HEAP[$ptr_addr]=$161; //@line 395 "xmltok_impl.c"
        __label__ = 43; break; //@line 395 "xmltok_impl.c"
      case 36: // $bb35
        var $162=HEAP[$ptr_addr]; //@line 396 "xmltok_impl.c"
        var $163=(($162+1)&4294967295); //@line 396 "xmltok_impl.c"
        var $164=HEAP[$163]; //@line 396 "xmltok_impl.c"
        var $165=reSign(($164), 8, 0)==0; //@line 396 "xmltok_impl.c"
        if ($165) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 396 "xmltok_impl.c"
      case 37: // $bb36
        var $166=HEAP[$enc_addr]; //@line 396 "xmltok_impl.c"
        var $167=$166; //@line 396 "xmltok_impl.c"
        var $168=HEAP[$ptr_addr]; //@line 396 "xmltok_impl.c"
        var $169=HEAP[$168]; //@line 396 "xmltok_impl.c"
        var $170=unSign(($169), 8, 0); //@line 396 "xmltok_impl.c"
        var $171=(($167+72)&4294967295); //@line 396 "xmltok_impl.c"
        var $172=(($171+$170)&4294967295); //@line 396 "xmltok_impl.c"
        var $173=HEAP[$172]; //@line 396 "xmltok_impl.c"
        var $174=unSign(($173), 8, 0); //@line 396 "xmltok_impl.c"
        HEAP[$iftmp_536]=$174; //@line 396 "xmltok_impl.c"
        __label__ = 39; break; //@line 396 "xmltok_impl.c"
      case 38: // $bb37
        var $175=HEAP[$ptr_addr]; //@line 396 "xmltok_impl.c"
        var $176=(($175)&4294967295); //@line 396 "xmltok_impl.c"
        var $177=HEAP[$176]; //@line 396 "xmltok_impl.c"
        var $178=reSign(($177), 8, 0); //@line 396 "xmltok_impl.c"
        var $179=HEAP[$ptr_addr]; //@line 396 "xmltok_impl.c"
        var $180=(($179+1)&4294967295); //@line 396 "xmltok_impl.c"
        var $181=HEAP[$180]; //@line 396 "xmltok_impl.c"
        var $182=reSign(($181), 8, 0); //@line 396 "xmltok_impl.c"
        var $183=((($182)) & 255); //@line 396 "xmltok_impl.c"
        var $184=((($178)) & 255); //@line 396 "xmltok_impl.c"
        var $185=_unicode_byte_type($183, $184); //@line 396 "xmltok_impl.c"
        HEAP[$iftmp_536]=$185; //@line 396 "xmltok_impl.c"
        __label__ = 39; break; //@line 396 "xmltok_impl.c"
      case 39: // $bb38
        var $186=HEAP[$iftmp_536]; //@line 396 "xmltok_impl.c"
        if ($186 == 9) {
          __label__ = 40; break;
        }
        else if ($186 == 10) {
          __label__ = 40; break;
        }
        else if ($186 == 11) {
          __label__ = 41; break;
        }
        else if ($186 == 21) {
          __label__ = 40; break;
        }
        else {
        __label__ = 42; break;
        }
        
      case 40: // $bb39
        var $187=HEAP[$ptr_addr]; //@line 395 "xmltok_impl.c"
        var $188=(($187+2)&4294967295); //@line 395 "xmltok_impl.c"
        HEAP[$ptr_addr]=$188; //@line 395 "xmltok_impl.c"
        __label__ = 43; break; //@line 395 "xmltok_impl.c"
      case 41: // $bb40
        var $189=HEAP[$ptr_addr]; //@line 400 "xmltok_impl.c"
        var $190=(($189+2)&4294967295); //@line 400 "xmltok_impl.c"
        var $191=HEAP[$nextTokPtr_addr]; //@line 400 "xmltok_impl.c"
        HEAP[$191]=$190; //@line 400 "xmltok_impl.c"
        HEAP[$0]=5; //@line 401 "xmltok_impl.c"
        __label__ = 49; break; //@line 401 "xmltok_impl.c"
      case 42: // $bb41
        var $192=HEAP[$nextTokPtr_addr]; //@line 403 "xmltok_impl.c"
        var $193=HEAP[$ptr_addr]; //@line 403 "xmltok_impl.c"
        HEAP[$192]=$193; //@line 403 "xmltok_impl.c"
        HEAP[$0]=0; //@line 404 "xmltok_impl.c"
        __label__ = 49; break; //@line 404 "xmltok_impl.c"
      case 43: // $bb42
        var $194=HEAP[$ptr_addr]; //@line 395 "xmltok_impl.c"
        var $195=HEAP[$end_addr]; //@line 395 "xmltok_impl.c"
        var $196=($194)!=($195); //@line 395 "xmltok_impl.c"
        if ($196) { __label__ = 36; break; } else { __label__ = 44; break; } //@line 395 "xmltok_impl.c"
      case 44: // $bb43
        HEAP[$0]=-1; //@line 407 "xmltok_impl.c"
        __label__ = 49; break; //@line 407 "xmltok_impl.c"
      case 45: // $bb44
        var $197=HEAP[$ptr_addr]; //@line 416 "xmltok_impl.c"
        var $198=(($197+2)&4294967295); //@line 416 "xmltok_impl.c"
        var $199=HEAP[$nextTokPtr_addr]; //@line 416 "xmltok_impl.c"
        HEAP[$199]=$198; //@line 416 "xmltok_impl.c"
        HEAP[$0]=5; //@line 417 "xmltok_impl.c"
        __label__ = 49; break; //@line 417 "xmltok_impl.c"
      case 46: // $bb45
        var $200=HEAP[$nextTokPtr_addr]; //@line 419 "xmltok_impl.c"
        var $201=HEAP[$ptr_addr]; //@line 419 "xmltok_impl.c"
        HEAP[$200]=$201; //@line 419 "xmltok_impl.c"
        HEAP[$0]=0; //@line 420 "xmltok_impl.c"
        __label__ = 49; break; //@line 420 "xmltok_impl.c"
      case 47: // $bb46
        var $202=HEAP[$ptr_addr]; //@line 391 "xmltok_impl.c"
        var $203=HEAP[$end_addr]; //@line 391 "xmltok_impl.c"
        var $204=($202)!=($203); //@line 391 "xmltok_impl.c"
        if ($204) { __label__ = 19; break; } else { __label__ = 48; break; } //@line 391 "xmltok_impl.c"
      case 48: // $bb47
        HEAP[$0]=-1; //@line 423 "xmltok_impl.c"
        __label__ = 49; break; //@line 423 "xmltok_impl.c"
      case 49: // $bb48
        var $205=HEAP[$0]; //@line 384 "xmltok_impl.c"
        HEAP[$retval]=$205; //@line 384 "xmltok_impl.c"
        __label__ = 50; break; //@line 384 "xmltok_impl.c"
      case 50: // $return
        var $retval49=HEAP[$retval]; //@line 384 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval49; //@line 384 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_scanHexCharRef($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_540=__stackBase__+20;
        var $0=__stackBase__+24;
        var $iftmp_538=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 432 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 432 "xmltok_impl.c"
        var $3=($1)!=($2); //@line 432 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 15; break; } //@line 432 "xmltok_impl.c"
      case 1: // $bb
        var $4=HEAP[$ptr_addr]; //@line 433 "xmltok_impl.c"
        var $5=(($4+1)&4294967295); //@line 433 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 433 "xmltok_impl.c"
        var $7=reSign(($6), 8, 0)==0; //@line 433 "xmltok_impl.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 433 "xmltok_impl.c"
      case 2: // $bb1
        var $8=HEAP[$enc_addr]; //@line 433 "xmltok_impl.c"
        var $9=$8; //@line 433 "xmltok_impl.c"
        var $10=HEAP[$ptr_addr]; //@line 433 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 433 "xmltok_impl.c"
        var $12=unSign(($11), 8, 0); //@line 433 "xmltok_impl.c"
        var $13=(($9+72)&4294967295); //@line 433 "xmltok_impl.c"
        var $14=(($13+$12)&4294967295); //@line 433 "xmltok_impl.c"
        var $15=HEAP[$14]; //@line 433 "xmltok_impl.c"
        var $16=unSign(($15), 8, 0); //@line 433 "xmltok_impl.c"
        HEAP[$iftmp_538]=$16; //@line 433 "xmltok_impl.c"
        __label__ = 4; break; //@line 433 "xmltok_impl.c"
      case 3: // $bb2
        var $17=HEAP[$ptr_addr]; //@line 433 "xmltok_impl.c"
        var $18=(($17)&4294967295); //@line 433 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 433 "xmltok_impl.c"
        var $20=reSign(($19), 8, 0); //@line 433 "xmltok_impl.c"
        var $21=HEAP[$ptr_addr]; //@line 433 "xmltok_impl.c"
        var $22=(($21+1)&4294967295); //@line 433 "xmltok_impl.c"
        var $23=HEAP[$22]; //@line 433 "xmltok_impl.c"
        var $24=reSign(($23), 8, 0); //@line 433 "xmltok_impl.c"
        var $25=((($24)) & 255); //@line 433 "xmltok_impl.c"
        var $26=((($20)) & 255); //@line 433 "xmltok_impl.c"
        var $27=_unicode_byte_type($25, $26); //@line 433 "xmltok_impl.c"
        HEAP[$iftmp_538]=$27; //@line 433 "xmltok_impl.c"
        __label__ = 4; break; //@line 433 "xmltok_impl.c"
      case 4: // $bb3
        var $28=HEAP[$iftmp_538]; //@line 433 "xmltok_impl.c"
        if ($28 == 24) {
          __label__ = 5; break;
        }
        else if ($28 == 25) {
          __label__ = 5; break;
        }
        else {
        __label__ = 6; break;
        }
        
      case 5: // $bb4
        var $29=HEAP[$ptr_addr]; //@line 441 "xmltok_impl.c"
        var $30=(($29+2)&4294967295); //@line 441 "xmltok_impl.c"
        HEAP[$ptr_addr]=$30; //@line 441 "xmltok_impl.c"
        __label__ = 14; break; //@line 441 "xmltok_impl.c"
      case 6: // $bb5
        var $31=HEAP[$nextTokPtr_addr]; //@line 438 "xmltok_impl.c"
        var $32=HEAP[$ptr_addr]; //@line 438 "xmltok_impl.c"
        HEAP[$31]=$32; //@line 438 "xmltok_impl.c"
        HEAP[$0]=0; //@line 439 "xmltok_impl.c"
        __label__ = 16; break; //@line 439 "xmltok_impl.c"
      case 7: // $bb6
        var $33=HEAP[$ptr_addr]; //@line 442 "xmltok_impl.c"
        var $34=(($33+1)&4294967295); //@line 442 "xmltok_impl.c"
        var $35=HEAP[$34]; //@line 442 "xmltok_impl.c"
        var $36=reSign(($35), 8, 0)==0; //@line 442 "xmltok_impl.c"
        if ($36) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 442 "xmltok_impl.c"
      case 8: // $bb7
        var $37=HEAP[$enc_addr]; //@line 442 "xmltok_impl.c"
        var $38=$37; //@line 442 "xmltok_impl.c"
        var $39=HEAP[$ptr_addr]; //@line 442 "xmltok_impl.c"
        var $40=HEAP[$39]; //@line 442 "xmltok_impl.c"
        var $41=unSign(($40), 8, 0); //@line 442 "xmltok_impl.c"
        var $42=(($38+72)&4294967295); //@line 442 "xmltok_impl.c"
        var $43=(($42+$41)&4294967295); //@line 442 "xmltok_impl.c"
        var $44=HEAP[$43]; //@line 442 "xmltok_impl.c"
        var $45=unSign(($44), 8, 0); //@line 442 "xmltok_impl.c"
        HEAP[$iftmp_540]=$45; //@line 442 "xmltok_impl.c"
        __label__ = 10; break; //@line 442 "xmltok_impl.c"
      case 9: // $bb8
        var $46=HEAP[$ptr_addr]; //@line 442 "xmltok_impl.c"
        var $47=(($46)&4294967295); //@line 442 "xmltok_impl.c"
        var $48=HEAP[$47]; //@line 442 "xmltok_impl.c"
        var $49=reSign(($48), 8, 0); //@line 442 "xmltok_impl.c"
        var $50=HEAP[$ptr_addr]; //@line 442 "xmltok_impl.c"
        var $51=(($50+1)&4294967295); //@line 442 "xmltok_impl.c"
        var $52=HEAP[$51]; //@line 442 "xmltok_impl.c"
        var $53=reSign(($52), 8, 0); //@line 442 "xmltok_impl.c"
        var $54=((($53)) & 255); //@line 442 "xmltok_impl.c"
        var $55=((($49)) & 255); //@line 442 "xmltok_impl.c"
        var $56=_unicode_byte_type($54, $55); //@line 442 "xmltok_impl.c"
        HEAP[$iftmp_540]=$56; //@line 442 "xmltok_impl.c"
        __label__ = 10; break; //@line 442 "xmltok_impl.c"
      case 10: // $bb9
        var $57=HEAP[$iftmp_540]; //@line 442 "xmltok_impl.c"
        if ($57 == 18) {
          __label__ = 12; break;
        }
        else if ($57 == 24) {
          __label__ = 11; break;
        }
        else if ($57 == 25) {
          __label__ = 11; break;
        }
        else {
        __label__ = 13; break;
        }
        
      case 11: // $bb10
        var $58=HEAP[$ptr_addr]; //@line 441 "xmltok_impl.c"
        var $59=(($58+2)&4294967295); //@line 441 "xmltok_impl.c"
        HEAP[$ptr_addr]=$59; //@line 441 "xmltok_impl.c"
        __label__ = 14; break; //@line 441 "xmltok_impl.c"
      case 12: // $bb11
        var $60=HEAP[$ptr_addr]; //@line 447 "xmltok_impl.c"
        var $61=(($60+2)&4294967295); //@line 447 "xmltok_impl.c"
        var $62=HEAP[$nextTokPtr_addr]; //@line 447 "xmltok_impl.c"
        HEAP[$62]=$61; //@line 447 "xmltok_impl.c"
        HEAP[$0]=10; //@line 448 "xmltok_impl.c"
        __label__ = 16; break; //@line 448 "xmltok_impl.c"
      case 13: // $bb12
        var $63=HEAP[$nextTokPtr_addr]; //@line 450 "xmltok_impl.c"
        var $64=HEAP[$ptr_addr]; //@line 450 "xmltok_impl.c"
        HEAP[$63]=$64; //@line 450 "xmltok_impl.c"
        HEAP[$0]=0; //@line 451 "xmltok_impl.c"
        __label__ = 16; break; //@line 451 "xmltok_impl.c"
      case 14: // $bb13
        var $65=HEAP[$ptr_addr]; //@line 441 "xmltok_impl.c"
        var $66=HEAP[$end_addr]; //@line 441 "xmltok_impl.c"
        var $67=($65)!=($66); //@line 441 "xmltok_impl.c"
        if ($67) { __label__ = 7; break; } else { __label__ = 15; break; } //@line 441 "xmltok_impl.c"
      case 15: // $bb14
        HEAP[$0]=-1; //@line 455 "xmltok_impl.c"
        __label__ = 16; break; //@line 455 "xmltok_impl.c"
      case 16: // $bb15
        var $68=HEAP[$0]; //@line 439 "xmltok_impl.c"
        HEAP[$retval]=$68; //@line 439 "xmltok_impl.c"
        __label__ = 17; break; //@line 439 "xmltok_impl.c"
      case 17: // $return
        var $retval16=HEAP[$retval]; //@line 439 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval16; //@line 439 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_scanCharRef($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_544=__stackBase__+20;
        var $iftmp_542=__stackBase__+24;
        var $0=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 464 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 464 "xmltok_impl.c"
        var $3=($1)!=($2); //@line 464 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 18; break; } //@line 464 "xmltok_impl.c"
      case 1: // $bb
        var $4=HEAP[$ptr_addr]; //@line 465 "xmltok_impl.c"
        var $5=(($4+1)&4294967295); //@line 465 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 465 "xmltok_impl.c"
        var $7=reSign(($6), 8, 0)==0; //@line 465 "xmltok_impl.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 465 "xmltok_impl.c"
      case 2: // $bb1
        var $8=HEAP[$ptr_addr]; //@line 465 "xmltok_impl.c"
        var $9=(($8)&4294967295); //@line 465 "xmltok_impl.c"
        var $10=HEAP[$9]; //@line 465 "xmltok_impl.c"
        var $11=reSign(($10), 8, 0)==120; //@line 465 "xmltok_impl.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 465 "xmltok_impl.c"
      case 3: // $bb2
        var $12=HEAP[$ptr_addr]; //@line 466 "xmltok_impl.c"
        var $13=(($12+2)&4294967295); //@line 466 "xmltok_impl.c"
        var $14=HEAP[$enc_addr]; //@line 466 "xmltok_impl.c"
        var $15=HEAP[$end_addr]; //@line 466 "xmltok_impl.c"
        var $16=HEAP[$nextTokPtr_addr]; //@line 466 "xmltok_impl.c"
        var $17=_little2_scanHexCharRef($14, $13, $15, $16); //@line 466 "xmltok_impl.c"
        HEAP[$0]=$17; //@line 466 "xmltok_impl.c"
        __label__ = 19; break; //@line 466 "xmltok_impl.c"
      case 4: // $bb3
        var $18=HEAP[$ptr_addr]; //@line 467 "xmltok_impl.c"
        var $19=(($18+1)&4294967295); //@line 467 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 467 "xmltok_impl.c"
        var $21=reSign(($20), 8, 0)==0; //@line 467 "xmltok_impl.c"
        if ($21) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 467 "xmltok_impl.c"
      case 5: // $bb4
        var $22=HEAP[$enc_addr]; //@line 467 "xmltok_impl.c"
        var $23=$22; //@line 467 "xmltok_impl.c"
        var $24=HEAP[$ptr_addr]; //@line 467 "xmltok_impl.c"
        var $25=HEAP[$24]; //@line 467 "xmltok_impl.c"
        var $26=unSign(($25), 8, 0); //@line 467 "xmltok_impl.c"
        var $27=(($23+72)&4294967295); //@line 467 "xmltok_impl.c"
        var $28=(($27+$26)&4294967295); //@line 467 "xmltok_impl.c"
        var $29=HEAP[$28]; //@line 467 "xmltok_impl.c"
        var $30=unSign(($29), 8, 0); //@line 467 "xmltok_impl.c"
        HEAP[$iftmp_542]=$30; //@line 467 "xmltok_impl.c"
        __label__ = 7; break; //@line 467 "xmltok_impl.c"
      case 6: // $bb5
        var $31=HEAP[$ptr_addr]; //@line 467 "xmltok_impl.c"
        var $32=(($31)&4294967295); //@line 467 "xmltok_impl.c"
        var $33=HEAP[$32]; //@line 467 "xmltok_impl.c"
        var $34=reSign(($33), 8, 0); //@line 467 "xmltok_impl.c"
        var $35=HEAP[$ptr_addr]; //@line 467 "xmltok_impl.c"
        var $36=(($35+1)&4294967295); //@line 467 "xmltok_impl.c"
        var $37=HEAP[$36]; //@line 467 "xmltok_impl.c"
        var $38=reSign(($37), 8, 0); //@line 467 "xmltok_impl.c"
        var $39=((($38)) & 255); //@line 467 "xmltok_impl.c"
        var $40=((($34)) & 255); //@line 467 "xmltok_impl.c"
        var $41=_unicode_byte_type($39, $40); //@line 467 "xmltok_impl.c"
        HEAP[$iftmp_542]=$41; //@line 467 "xmltok_impl.c"
        __label__ = 7; break; //@line 467 "xmltok_impl.c"
      case 7: // $bb6
        var $42=HEAP[$iftmp_542]; //@line 467 "xmltok_impl.c"
        if ($42 == 25) {
          __label__ = 8; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 8: // $bb7
        var $43=HEAP[$ptr_addr]; //@line 474 "xmltok_impl.c"
        var $44=(($43+2)&4294967295); //@line 474 "xmltok_impl.c"
        HEAP[$ptr_addr]=$44; //@line 474 "xmltok_impl.c"
        __label__ = 17; break; //@line 474 "xmltok_impl.c"
      case 9: // $bb8
        var $45=HEAP[$nextTokPtr_addr]; //@line 471 "xmltok_impl.c"
        var $46=HEAP[$ptr_addr]; //@line 471 "xmltok_impl.c"
        HEAP[$45]=$46; //@line 471 "xmltok_impl.c"
        HEAP[$0]=0; //@line 472 "xmltok_impl.c"
        __label__ = 19; break; //@line 472 "xmltok_impl.c"
      case 10: // $bb9
        var $47=HEAP[$ptr_addr]; //@line 475 "xmltok_impl.c"
        var $48=(($47+1)&4294967295); //@line 475 "xmltok_impl.c"
        var $49=HEAP[$48]; //@line 475 "xmltok_impl.c"
        var $50=reSign(($49), 8, 0)==0; //@line 475 "xmltok_impl.c"
        if ($50) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 475 "xmltok_impl.c"
      case 11: // $bb10
        var $51=HEAP[$enc_addr]; //@line 475 "xmltok_impl.c"
        var $52=$51; //@line 475 "xmltok_impl.c"
        var $53=HEAP[$ptr_addr]; //@line 475 "xmltok_impl.c"
        var $54=HEAP[$53]; //@line 475 "xmltok_impl.c"
        var $55=unSign(($54), 8, 0); //@line 475 "xmltok_impl.c"
        var $56=(($52+72)&4294967295); //@line 475 "xmltok_impl.c"
        var $57=(($56+$55)&4294967295); //@line 475 "xmltok_impl.c"
        var $58=HEAP[$57]; //@line 475 "xmltok_impl.c"
        var $59=unSign(($58), 8, 0); //@line 475 "xmltok_impl.c"
        HEAP[$iftmp_544]=$59; //@line 475 "xmltok_impl.c"
        __label__ = 13; break; //@line 475 "xmltok_impl.c"
      case 12: // $bb11
        var $60=HEAP[$ptr_addr]; //@line 475 "xmltok_impl.c"
        var $61=(($60)&4294967295); //@line 475 "xmltok_impl.c"
        var $62=HEAP[$61]; //@line 475 "xmltok_impl.c"
        var $63=reSign(($62), 8, 0); //@line 475 "xmltok_impl.c"
        var $64=HEAP[$ptr_addr]; //@line 475 "xmltok_impl.c"
        var $65=(($64+1)&4294967295); //@line 475 "xmltok_impl.c"
        var $66=HEAP[$65]; //@line 475 "xmltok_impl.c"
        var $67=reSign(($66), 8, 0); //@line 475 "xmltok_impl.c"
        var $68=((($67)) & 255); //@line 475 "xmltok_impl.c"
        var $69=((($63)) & 255); //@line 475 "xmltok_impl.c"
        var $70=_unicode_byte_type($68, $69); //@line 475 "xmltok_impl.c"
        HEAP[$iftmp_544]=$70; //@line 475 "xmltok_impl.c"
        __label__ = 13; break; //@line 475 "xmltok_impl.c"
      case 13: // $bb12
        var $71=HEAP[$iftmp_544]; //@line 475 "xmltok_impl.c"
        if ($71 == 18) {
          __label__ = 15; break;
        }
        else if ($71 == 25) {
          __label__ = 14; break;
        }
        else {
        __label__ = 16; break;
        }
        
      case 14: // $bb13
        var $72=HEAP[$ptr_addr]; //@line 474 "xmltok_impl.c"
        var $73=(($72+2)&4294967295); //@line 474 "xmltok_impl.c"
        HEAP[$ptr_addr]=$73; //@line 474 "xmltok_impl.c"
        __label__ = 17; break; //@line 474 "xmltok_impl.c"
      case 15: // $bb14
        var $74=HEAP[$ptr_addr]; //@line 479 "xmltok_impl.c"
        var $75=(($74+2)&4294967295); //@line 479 "xmltok_impl.c"
        var $76=HEAP[$nextTokPtr_addr]; //@line 479 "xmltok_impl.c"
        HEAP[$76]=$75; //@line 479 "xmltok_impl.c"
        HEAP[$0]=10; //@line 480 "xmltok_impl.c"
        __label__ = 19; break; //@line 480 "xmltok_impl.c"
      case 16: // $bb15
        var $77=HEAP[$nextTokPtr_addr]; //@line 482 "xmltok_impl.c"
        var $78=HEAP[$ptr_addr]; //@line 482 "xmltok_impl.c"
        HEAP[$77]=$78; //@line 482 "xmltok_impl.c"
        HEAP[$0]=0; //@line 483 "xmltok_impl.c"
        __label__ = 19; break; //@line 483 "xmltok_impl.c"
      case 17: // $bb16
        var $79=HEAP[$ptr_addr]; //@line 474 "xmltok_impl.c"
        var $80=HEAP[$end_addr]; //@line 474 "xmltok_impl.c"
        var $81=($79)!=($80); //@line 474 "xmltok_impl.c"
        if ($81) { __label__ = 10; break; } else { __label__ = 18; break; } //@line 474 "xmltok_impl.c"
      case 18: // $bb17
        HEAP[$0]=-1; //@line 487 "xmltok_impl.c"
        __label__ = 19; break; //@line 487 "xmltok_impl.c"
      case 19: // $bb18
        var $82=HEAP[$0]; //@line 466 "xmltok_impl.c"
        HEAP[$retval]=$82; //@line 466 "xmltok_impl.c"
        __label__ = 20; break; //@line 466 "xmltok_impl.c"
      case 20: // $return
        var $retval19=HEAP[$retval]; //@line 466 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval19; //@line 466 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_scanRef($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_554=__stackBase__+20;
        var $iftmp_546=__stackBase__+24;
        var $0=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 496 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 496 "xmltok_impl.c"
        var $3=($1)==($2); //@line 496 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 496 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 497 "xmltok_impl.c"
        __label__ = 40; break; //@line 497 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$ptr_addr]; //@line 498 "xmltok_impl.c"
        var $5=(($4+1)&4294967295); //@line 498 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 498 "xmltok_impl.c"
        var $7=reSign(($6), 8, 0)==0; //@line 498 "xmltok_impl.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 498 "xmltok_impl.c"
      case 3: // $bb2
        var $8=HEAP[$enc_addr]; //@line 498 "xmltok_impl.c"
        var $9=$8; //@line 498 "xmltok_impl.c"
        var $10=HEAP[$ptr_addr]; //@line 498 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 498 "xmltok_impl.c"
        var $12=unSign(($11), 8, 0); //@line 498 "xmltok_impl.c"
        var $13=(($9+72)&4294967295); //@line 498 "xmltok_impl.c"
        var $14=(($13+$12)&4294967295); //@line 498 "xmltok_impl.c"
        var $15=HEAP[$14]; //@line 498 "xmltok_impl.c"
        var $16=unSign(($15), 8, 0); //@line 498 "xmltok_impl.c"
        HEAP[$iftmp_546]=$16; //@line 498 "xmltok_impl.c"
        __label__ = 5; break; //@line 498 "xmltok_impl.c"
      case 4: // $bb3
        var $17=HEAP[$ptr_addr]; //@line 498 "xmltok_impl.c"
        var $18=(($17)&4294967295); //@line 498 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 498 "xmltok_impl.c"
        var $20=reSign(($19), 8, 0); //@line 498 "xmltok_impl.c"
        var $21=HEAP[$ptr_addr]; //@line 498 "xmltok_impl.c"
        var $22=(($21+1)&4294967295); //@line 498 "xmltok_impl.c"
        var $23=HEAP[$22]; //@line 498 "xmltok_impl.c"
        var $24=reSign(($23), 8, 0); //@line 498 "xmltok_impl.c"
        var $25=((($24)) & 255); //@line 498 "xmltok_impl.c"
        var $26=((($20)) & 255); //@line 498 "xmltok_impl.c"
        var $27=_unicode_byte_type($25, $26); //@line 498 "xmltok_impl.c"
        HEAP[$iftmp_546]=$27; //@line 498 "xmltok_impl.c"
        __label__ = 5; break; //@line 498 "xmltok_impl.c"
      case 5: // $bb4
        var $28=HEAP[$iftmp_546]; //@line 498 "xmltok_impl.c"
        if ($28 == 5) {
          __label__ = 9; break;
        }
        else if ($28 == 6) {
          __label__ = 12; break;
        }
        else if ($28 == 7) {
          __label__ = 15; break;
        }
        else if ($28 == 19) {
          __label__ = 18; break;
        }
        else if ($28 == 22) {
          __label__ = 8; break;
        }
        else if ($28 == 24) {
          __label__ = 8; break;
        }
        else if ($28 == 29) {
          __label__ = 6; break;
        }
        else {
        __label__ = 19; break;
        }
        
      case 6: // $bb5
        var $29=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        var $30=(($29+1)&4294967295); //@line 499 "xmltok_impl.c"
        var $31=HEAP[$30]; //@line 499 "xmltok_impl.c"
        var $32=unSign(($31), 8, 0); //@line 499 "xmltok_impl.c"
        var $33=((_nmstrtPages+$32)&4294967295); //@line 499 "xmltok_impl.c"
        var $34=HEAP[$33]; //@line 499 "xmltok_impl.c"
        var $35=unSign(($34), 8, 0); //@line 499 "xmltok_impl.c"
        var $36=($35) << 3; //@line 499 "xmltok_impl.c"
        var $37=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        var $38=(($37)&4294967295); //@line 499 "xmltok_impl.c"
        var $39=HEAP[$38]; //@line 499 "xmltok_impl.c"
        var $40=unSign(($39), 8, 0) >>> 5; //@line 499 "xmltok_impl.c"
        var $41=unSign(($40), 8, 0); //@line 499 "xmltok_impl.c"
        var $42=((($36) + ($41))&4294967295); //@line 499 "xmltok_impl.c"
        var $43=((_namingBitmap+$42*4)&4294967295); //@line 499 "xmltok_impl.c"
        var $44=HEAP[$43]; //@line 499 "xmltok_impl.c"
        var $45=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        var $46=(($45)&4294967295); //@line 499 "xmltok_impl.c"
        var $47=HEAP[$46]; //@line 499 "xmltok_impl.c"
        var $48=unSign(($47), 8, 0); //@line 499 "xmltok_impl.c"
        var $49=($48) & 31; //@line 499 "xmltok_impl.c"
        var $50=1 << ($49); //@line 499 "xmltok_impl.c"
        var $51=($44) & ($50); //@line 499 "xmltok_impl.c"
        var $52=((($51))|0)==0; //@line 499 "xmltok_impl.c"
        if ($52) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 499 "xmltok_impl.c"
      case 7: // $bb6
        var $53=HEAP[$nextTokPtr_addr]; //@line 499 "xmltok_impl.c"
        var $54=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        HEAP[$53]=$54; //@line 499 "xmltok_impl.c"
        HEAP[$0]=0; //@line 499 "xmltok_impl.c"
        __label__ = 40; break; //@line 499 "xmltok_impl.c"
      case 8: // $bb7
        var $55=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        var $56=(($55+2)&4294967295); //@line 499 "xmltok_impl.c"
        HEAP[$ptr_addr]=$56; //@line 499 "xmltok_impl.c"
        __label__ = 38; break; //@line 499 "xmltok_impl.c"
      case 9: // $bb8
        var $57=HEAP[$end_addr]; //@line 499 "xmltok_impl.c"
        var $58=($57); //@line 499 "xmltok_impl.c"
        var $59=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        var $60=($59); //@line 499 "xmltok_impl.c"
        var $61=((($58) - ($60))&4294967295); //@line 499 "xmltok_impl.c"
        var $62=((($61))|0) <= 1; //@line 499 "xmltok_impl.c"
        if ($62) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 499 "xmltok_impl.c"
      case 10: // $bb9
        HEAP[$0]=-2; //@line 499 "xmltok_impl.c"
        __label__ = 40; break; //@line 499 "xmltok_impl.c"
      case 11: // $bb10
        var $63=HEAP[$nextTokPtr_addr]; //@line 499 "xmltok_impl.c"
        var $64=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        HEAP[$63]=$64; //@line 499 "xmltok_impl.c"
        HEAP[$0]=0; //@line 499 "xmltok_impl.c"
        __label__ = 40; break; //@line 499 "xmltok_impl.c"
      case 12: // $bb11
        var $65=HEAP[$end_addr]; //@line 499 "xmltok_impl.c"
        var $66=($65); //@line 499 "xmltok_impl.c"
        var $67=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        var $68=($67); //@line 499 "xmltok_impl.c"
        var $69=((($66) - ($68))&4294967295); //@line 499 "xmltok_impl.c"
        var $70=((($69))|0) <= 2; //@line 499 "xmltok_impl.c"
        if ($70) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 499 "xmltok_impl.c"
      case 13: // $bb12
        HEAP[$0]=-2; //@line 499 "xmltok_impl.c"
        __label__ = 40; break; //@line 499 "xmltok_impl.c"
      case 14: // $bb13
        var $71=HEAP[$nextTokPtr_addr]; //@line 499 "xmltok_impl.c"
        var $72=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        HEAP[$71]=$72; //@line 499 "xmltok_impl.c"
        HEAP[$0]=0; //@line 499 "xmltok_impl.c"
        __label__ = 40; break; //@line 499 "xmltok_impl.c"
      case 15: // $bb14
        var $73=HEAP[$end_addr]; //@line 499 "xmltok_impl.c"
        var $74=($73); //@line 499 "xmltok_impl.c"
        var $75=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        var $76=($75); //@line 499 "xmltok_impl.c"
        var $77=((($74) - ($76))&4294967295); //@line 499 "xmltok_impl.c"
        var $78=((($77))|0) <= 3; //@line 499 "xmltok_impl.c"
        if ($78) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 499 "xmltok_impl.c"
      case 16: // $bb15
        HEAP[$0]=-2; //@line 499 "xmltok_impl.c"
        __label__ = 40; break; //@line 499 "xmltok_impl.c"
      case 17: // $bb16
        var $79=HEAP[$nextTokPtr_addr]; //@line 499 "xmltok_impl.c"
        var $80=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        HEAP[$79]=$80; //@line 499 "xmltok_impl.c"
        HEAP[$0]=0; //@line 499 "xmltok_impl.c"
        __label__ = 40; break; //@line 499 "xmltok_impl.c"
      case 18: // $bb17
        var $81=HEAP[$ptr_addr]; //@line 501 "xmltok_impl.c"
        var $82=(($81+2)&4294967295); //@line 501 "xmltok_impl.c"
        var $83=HEAP[$enc_addr]; //@line 501 "xmltok_impl.c"
        var $84=HEAP[$end_addr]; //@line 501 "xmltok_impl.c"
        var $85=HEAP[$nextTokPtr_addr]; //@line 501 "xmltok_impl.c"
        var $86=_little2_scanCharRef($83, $82, $84, $85); //@line 501 "xmltok_impl.c"
        HEAP[$0]=$86; //@line 501 "xmltok_impl.c"
        __label__ = 40; break; //@line 501 "xmltok_impl.c"
      case 19: // $bb18
        var $87=HEAP[$nextTokPtr_addr]; //@line 503 "xmltok_impl.c"
        var $88=HEAP[$ptr_addr]; //@line 503 "xmltok_impl.c"
        HEAP[$87]=$88; //@line 503 "xmltok_impl.c"
        HEAP[$0]=0; //@line 504 "xmltok_impl.c"
        __label__ = 40; break; //@line 504 "xmltok_impl.c"
      case 20: // $bb19
        var $89=HEAP[$ptr_addr]; //@line 507 "xmltok_impl.c"
        var $90=(($89+1)&4294967295); //@line 507 "xmltok_impl.c"
        var $91=HEAP[$90]; //@line 507 "xmltok_impl.c"
        var $92=reSign(($91), 8, 0)==0; //@line 507 "xmltok_impl.c"
        if ($92) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 507 "xmltok_impl.c"
      case 21: // $bb20
        var $93=HEAP[$enc_addr]; //@line 507 "xmltok_impl.c"
        var $94=$93; //@line 507 "xmltok_impl.c"
        var $95=HEAP[$ptr_addr]; //@line 507 "xmltok_impl.c"
        var $96=HEAP[$95]; //@line 507 "xmltok_impl.c"
        var $97=unSign(($96), 8, 0); //@line 507 "xmltok_impl.c"
        var $98=(($94+72)&4294967295); //@line 507 "xmltok_impl.c"
        var $99=(($98+$97)&4294967295); //@line 507 "xmltok_impl.c"
        var $100=HEAP[$99]; //@line 507 "xmltok_impl.c"
        var $101=unSign(($100), 8, 0); //@line 507 "xmltok_impl.c"
        HEAP[$iftmp_554]=$101; //@line 507 "xmltok_impl.c"
        __label__ = 23; break; //@line 507 "xmltok_impl.c"
      case 22: // $bb21
        var $102=HEAP[$ptr_addr]; //@line 507 "xmltok_impl.c"
        var $103=(($102)&4294967295); //@line 507 "xmltok_impl.c"
        var $104=HEAP[$103]; //@line 507 "xmltok_impl.c"
        var $105=reSign(($104), 8, 0); //@line 507 "xmltok_impl.c"
        var $106=HEAP[$ptr_addr]; //@line 507 "xmltok_impl.c"
        var $107=(($106+1)&4294967295); //@line 507 "xmltok_impl.c"
        var $108=HEAP[$107]; //@line 507 "xmltok_impl.c"
        var $109=reSign(($108), 8, 0); //@line 507 "xmltok_impl.c"
        var $110=((($109)) & 255); //@line 507 "xmltok_impl.c"
        var $111=((($105)) & 255); //@line 507 "xmltok_impl.c"
        var $112=_unicode_byte_type($110, $111); //@line 507 "xmltok_impl.c"
        HEAP[$iftmp_554]=$112; //@line 507 "xmltok_impl.c"
        __label__ = 23; break; //@line 507 "xmltok_impl.c"
      case 23: // $bb22
        var $113=HEAP[$iftmp_554]; //@line 507 "xmltok_impl.c"
        if ($113 == 5) {
          __label__ = 27; break;
        }
        else if ($113 == 6) {
          __label__ = 30; break;
        }
        else if ($113 == 7) {
          __label__ = 33; break;
        }
        else if ($113 == 18) {
          __label__ = 36; break;
        }
        else if ($113 == 22) {
          __label__ = 26; break;
        }
        else if ($113 == 24) {
          __label__ = 26; break;
        }
        else if ($113 == 25) {
          __label__ = 26; break;
        }
        else if ($113 == 26) {
          __label__ = 26; break;
        }
        else if ($113 == 27) {
          __label__ = 26; break;
        }
        else if ($113 == 29) {
          __label__ = 24; break;
        }
        else {
        __label__ = 37; break;
        }
        
      case 24: // $bb23
        var $114=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        var $115=(($114+1)&4294967295); //@line 508 "xmltok_impl.c"
        var $116=HEAP[$115]; //@line 508 "xmltok_impl.c"
        var $117=unSign(($116), 8, 0); //@line 508 "xmltok_impl.c"
        var $118=((_namePages+$117)&4294967295); //@line 508 "xmltok_impl.c"
        var $119=HEAP[$118]; //@line 508 "xmltok_impl.c"
        var $120=unSign(($119), 8, 0); //@line 508 "xmltok_impl.c"
        var $121=($120) << 3; //@line 508 "xmltok_impl.c"
        var $122=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        var $123=(($122)&4294967295); //@line 508 "xmltok_impl.c"
        var $124=HEAP[$123]; //@line 508 "xmltok_impl.c"
        var $125=unSign(($124), 8, 0) >>> 5; //@line 508 "xmltok_impl.c"
        var $126=unSign(($125), 8, 0); //@line 508 "xmltok_impl.c"
        var $127=((($121) + ($126))&4294967295); //@line 508 "xmltok_impl.c"
        var $128=((_namingBitmap+$127*4)&4294967295); //@line 508 "xmltok_impl.c"
        var $129=HEAP[$128]; //@line 508 "xmltok_impl.c"
        var $130=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        var $131=(($130)&4294967295); //@line 508 "xmltok_impl.c"
        var $132=HEAP[$131]; //@line 508 "xmltok_impl.c"
        var $133=unSign(($132), 8, 0); //@line 508 "xmltok_impl.c"
        var $134=($133) & 31; //@line 508 "xmltok_impl.c"
        var $135=1 << ($134); //@line 508 "xmltok_impl.c"
        var $136=($129) & ($135); //@line 508 "xmltok_impl.c"
        var $137=((($136))|0)==0; //@line 508 "xmltok_impl.c"
        if ($137) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 508 "xmltok_impl.c"
      case 25: // $bb24
        var $138=HEAP[$nextTokPtr_addr]; //@line 508 "xmltok_impl.c"
        var $139=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        HEAP[$138]=$139; //@line 508 "xmltok_impl.c"
        HEAP[$0]=0; //@line 508 "xmltok_impl.c"
        __label__ = 40; break; //@line 508 "xmltok_impl.c"
      case 26: // $bb25
        var $140=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        var $141=(($140+2)&4294967295); //@line 508 "xmltok_impl.c"
        HEAP[$ptr_addr]=$141; //@line 508 "xmltok_impl.c"
        __label__ = 38; break; //@line 508 "xmltok_impl.c"
      case 27: // $bb26
        var $142=HEAP[$end_addr]; //@line 508 "xmltok_impl.c"
        var $143=($142); //@line 508 "xmltok_impl.c"
        var $144=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        var $145=($144); //@line 508 "xmltok_impl.c"
        var $146=((($143) - ($145))&4294967295); //@line 508 "xmltok_impl.c"
        var $147=((($146))|0) <= 1; //@line 508 "xmltok_impl.c"
        if ($147) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 508 "xmltok_impl.c"
      case 28: // $bb27
        HEAP[$0]=-2; //@line 508 "xmltok_impl.c"
        __label__ = 40; break; //@line 508 "xmltok_impl.c"
      case 29: // $bb28
        var $148=HEAP[$nextTokPtr_addr]; //@line 508 "xmltok_impl.c"
        var $149=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        HEAP[$148]=$149; //@line 508 "xmltok_impl.c"
        HEAP[$0]=0; //@line 508 "xmltok_impl.c"
        __label__ = 40; break; //@line 508 "xmltok_impl.c"
      case 30: // $bb29
        var $150=HEAP[$end_addr]; //@line 508 "xmltok_impl.c"
        var $151=($150); //@line 508 "xmltok_impl.c"
        var $152=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        var $153=($152); //@line 508 "xmltok_impl.c"
        var $154=((($151) - ($153))&4294967295); //@line 508 "xmltok_impl.c"
        var $155=((($154))|0) <= 2; //@line 508 "xmltok_impl.c"
        if ($155) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 508 "xmltok_impl.c"
      case 31: // $bb30
        HEAP[$0]=-2; //@line 508 "xmltok_impl.c"
        __label__ = 40; break; //@line 508 "xmltok_impl.c"
      case 32: // $bb31
        var $156=HEAP[$nextTokPtr_addr]; //@line 508 "xmltok_impl.c"
        var $157=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        HEAP[$156]=$157; //@line 508 "xmltok_impl.c"
        HEAP[$0]=0; //@line 508 "xmltok_impl.c"
        __label__ = 40; break; //@line 508 "xmltok_impl.c"
      case 33: // $bb32
        var $158=HEAP[$end_addr]; //@line 508 "xmltok_impl.c"
        var $159=($158); //@line 508 "xmltok_impl.c"
        var $160=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        var $161=($160); //@line 508 "xmltok_impl.c"
        var $162=((($159) - ($161))&4294967295); //@line 508 "xmltok_impl.c"
        var $163=((($162))|0) <= 3; //@line 508 "xmltok_impl.c"
        if ($163) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 508 "xmltok_impl.c"
      case 34: // $bb33
        HEAP[$0]=-2; //@line 508 "xmltok_impl.c"
        __label__ = 40; break; //@line 508 "xmltok_impl.c"
      case 35: // $bb34
        var $164=HEAP[$nextTokPtr_addr]; //@line 508 "xmltok_impl.c"
        var $165=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        HEAP[$164]=$165; //@line 508 "xmltok_impl.c"
        HEAP[$0]=0; //@line 508 "xmltok_impl.c"
        __label__ = 40; break; //@line 508 "xmltok_impl.c"
      case 36: // $bb35
        var $166=HEAP[$ptr_addr]; //@line 510 "xmltok_impl.c"
        var $167=(($166+2)&4294967295); //@line 510 "xmltok_impl.c"
        var $168=HEAP[$nextTokPtr_addr]; //@line 510 "xmltok_impl.c"
        HEAP[$168]=$167; //@line 510 "xmltok_impl.c"
        HEAP[$0]=9; //@line 511 "xmltok_impl.c"
        __label__ = 40; break; //@line 511 "xmltok_impl.c"
      case 37: // $bb36
        var $169=HEAP[$nextTokPtr_addr]; //@line 513 "xmltok_impl.c"
        var $170=HEAP[$ptr_addr]; //@line 513 "xmltok_impl.c"
        HEAP[$169]=$170; //@line 513 "xmltok_impl.c"
        HEAP[$0]=0; //@line 514 "xmltok_impl.c"
        __label__ = 40; break; //@line 514 "xmltok_impl.c"
      case 38: // $bb37
        var $171=HEAP[$ptr_addr]; //@line 506 "xmltok_impl.c"
        var $172=HEAP[$end_addr]; //@line 506 "xmltok_impl.c"
        var $173=($171)!=($172); //@line 506 "xmltok_impl.c"
        if ($173) { __label__ = 20; break; } else { __label__ = 39; break; } //@line 506 "xmltok_impl.c"
      case 39: // $bb38
        HEAP[$0]=-1; //@line 517 "xmltok_impl.c"
        __label__ = 40; break; //@line 517 "xmltok_impl.c"
      case 40: // $bb39
        var $174=HEAP[$0]; //@line 497 "xmltok_impl.c"
        HEAP[$retval]=$174; //@line 497 "xmltok_impl.c"
        __label__ = 41; break; //@line 497 "xmltok_impl.c"
      case 41: // $return
        var $retval40=HEAP[$retval]; //@line 497 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval40; //@line 497 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_scanAtts($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 64; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 64);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_645=__stackBase__+20;
        var $iftmp_636=__stackBase__+24;
        var $iftmp_608=__stackBase__+28;
        var $iftmp_599=__stackBase__+32;
        var $iftmp_590=__stackBase__+36;
        var $0=__stackBase__+40;
        var $iftmp_562=__stackBase__+44;
        var $t=__stackBase__+48;
        var $open=__stackBase__+52;
        var $t37=__stackBase__+56;
        var $tok=__stackBase__+60;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        __label__ = 100; break; //@line 529 "xmltok_impl.c"
      case 1: // $bb
        var $1=HEAP[$ptr_addr]; //@line 530 "xmltok_impl.c"
        var $2=(($1+1)&4294967295); //@line 530 "xmltok_impl.c"
        var $3=HEAP[$2]; //@line 530 "xmltok_impl.c"
        var $4=reSign(($3), 8, 0)==0; //@line 530 "xmltok_impl.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 530 "xmltok_impl.c"
      case 2: // $bb1
        var $5=HEAP[$enc_addr]; //@line 530 "xmltok_impl.c"
        var $6=$5; //@line 530 "xmltok_impl.c"
        var $7=HEAP[$ptr_addr]; //@line 530 "xmltok_impl.c"
        var $8=HEAP[$7]; //@line 530 "xmltok_impl.c"
        var $9=unSign(($8), 8, 0); //@line 530 "xmltok_impl.c"
        var $10=(($6+72)&4294967295); //@line 530 "xmltok_impl.c"
        var $11=(($10+$9)&4294967295); //@line 530 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 530 "xmltok_impl.c"
        var $13=unSign(($12), 8, 0); //@line 530 "xmltok_impl.c"
        HEAP[$iftmp_562]=$13; //@line 530 "xmltok_impl.c"
        __label__ = 4; break; //@line 530 "xmltok_impl.c"
      case 3: // $bb2
        var $14=HEAP[$ptr_addr]; //@line 530 "xmltok_impl.c"
        var $15=(($14)&4294967295); //@line 530 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 530 "xmltok_impl.c"
        var $17=reSign(($16), 8, 0); //@line 530 "xmltok_impl.c"
        var $18=HEAP[$ptr_addr]; //@line 530 "xmltok_impl.c"
        var $19=(($18+1)&4294967295); //@line 530 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 530 "xmltok_impl.c"
        var $21=reSign(($20), 8, 0); //@line 530 "xmltok_impl.c"
        var $22=((($21)) & 255); //@line 530 "xmltok_impl.c"
        var $23=((($17)) & 255); //@line 530 "xmltok_impl.c"
        var $24=_unicode_byte_type($22, $23); //@line 530 "xmltok_impl.c"
        HEAP[$iftmp_562]=$24; //@line 530 "xmltok_impl.c"
        __label__ = 4; break; //@line 530 "xmltok_impl.c"
      case 4: // $bb3
        var $25=HEAP[$iftmp_562]; //@line 530 "xmltok_impl.c"
        if ($25 == 5) {
          __label__ = 8; break;
        }
        else if ($25 == 6) {
          __label__ = 11; break;
        }
        else if ($25 == 7) {
          __label__ = 14; break;
        }
        else if ($25 == 9) {
          __label__ = 17; break;
        }
        else if ($25 == 10) {
          __label__ = 17; break;
        }
        else if ($25 == 14) {
          __label__ = 26; break;
        }
        else if ($25 == 21) {
          __label__ = 17; break;
        }
        else if ($25 == 22) {
          __label__ = 7; break;
        }
        else if ($25 == 24) {
          __label__ = 7; break;
        }
        else if ($25 == 25) {
          __label__ = 7; break;
        }
        else if ($25 == 26) {
          __label__ = 7; break;
        }
        else if ($25 == 27) {
          __label__ = 7; break;
        }
        else if ($25 == 29) {
          __label__ = 5; break;
        }
        else {
        __label__ = 99; break;
        }
        
      case 5: // $bb4
        var $26=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $27=(($26+1)&4294967295); //@line 531 "xmltok_impl.c"
        var $28=HEAP[$27]; //@line 531 "xmltok_impl.c"
        var $29=unSign(($28), 8, 0); //@line 531 "xmltok_impl.c"
        var $30=((_namePages+$29)&4294967295); //@line 531 "xmltok_impl.c"
        var $31=HEAP[$30]; //@line 531 "xmltok_impl.c"
        var $32=unSign(($31), 8, 0); //@line 531 "xmltok_impl.c"
        var $33=($32) << 3; //@line 531 "xmltok_impl.c"
        var $34=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $35=(($34)&4294967295); //@line 531 "xmltok_impl.c"
        var $36=HEAP[$35]; //@line 531 "xmltok_impl.c"
        var $37=unSign(($36), 8, 0) >>> 5; //@line 531 "xmltok_impl.c"
        var $38=unSign(($37), 8, 0); //@line 531 "xmltok_impl.c"
        var $39=((($33) + ($38))&4294967295); //@line 531 "xmltok_impl.c"
        var $40=((_namingBitmap+$39*4)&4294967295); //@line 531 "xmltok_impl.c"
        var $41=HEAP[$40]; //@line 531 "xmltok_impl.c"
        var $42=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $43=(($42)&4294967295); //@line 531 "xmltok_impl.c"
        var $44=HEAP[$43]; //@line 531 "xmltok_impl.c"
        var $45=unSign(($44), 8, 0); //@line 531 "xmltok_impl.c"
        var $46=($45) & 31; //@line 531 "xmltok_impl.c"
        var $47=1 << ($46); //@line 531 "xmltok_impl.c"
        var $48=($41) & ($47); //@line 531 "xmltok_impl.c"
        var $49=((($48))|0)==0; //@line 531 "xmltok_impl.c"
        if ($49) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 531 "xmltok_impl.c"
      case 6: // $bb5
        var $50=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $51=HEAP[$nextTokPtr_addr]; //@line 531 "xmltok_impl.c"
        HEAP[$51]=$50; //@line 531 "xmltok_impl.c"
        HEAP[$0]=0; //@line 531 "xmltok_impl.c"
        __label__ = 102; break; //@line 531 "xmltok_impl.c"
      case 7: // $bb6
        var $52=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $53=(($52+2)&4294967295); //@line 531 "xmltok_impl.c"
        HEAP[$ptr_addr]=$53; //@line 531 "xmltok_impl.c"
        __label__ = 100; break; //@line 531 "xmltok_impl.c"
      case 8: // $bb7
        var $54=HEAP[$end_addr]; //@line 531 "xmltok_impl.c"
        var $55=($54); //@line 531 "xmltok_impl.c"
        var $56=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $57=($56); //@line 531 "xmltok_impl.c"
        var $58=((($55) - ($57))&4294967295); //@line 531 "xmltok_impl.c"
        var $59=((($58))|0) <= 1; //@line 531 "xmltok_impl.c"
        if ($59) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 531 "xmltok_impl.c"
      case 9: // $bb8
        HEAP[$0]=-2; //@line 531 "xmltok_impl.c"
        __label__ = 102; break; //@line 531 "xmltok_impl.c"
      case 10: // $bb9
        var $60=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $61=HEAP[$nextTokPtr_addr]; //@line 531 "xmltok_impl.c"
        HEAP[$61]=$60; //@line 531 "xmltok_impl.c"
        HEAP[$0]=0; //@line 531 "xmltok_impl.c"
        __label__ = 102; break; //@line 531 "xmltok_impl.c"
      case 11: // $bb10
        var $62=HEAP[$end_addr]; //@line 531 "xmltok_impl.c"
        var $63=($62); //@line 531 "xmltok_impl.c"
        var $64=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $65=($64); //@line 531 "xmltok_impl.c"
        var $66=((($63) - ($65))&4294967295); //@line 531 "xmltok_impl.c"
        var $67=((($66))|0) <= 2; //@line 531 "xmltok_impl.c"
        if ($67) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 531 "xmltok_impl.c"
      case 12: // $bb11
        HEAP[$0]=-2; //@line 531 "xmltok_impl.c"
        __label__ = 102; break; //@line 531 "xmltok_impl.c"
      case 13: // $bb12
        var $68=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $69=HEAP[$nextTokPtr_addr]; //@line 531 "xmltok_impl.c"
        HEAP[$69]=$68; //@line 531 "xmltok_impl.c"
        HEAP[$0]=0; //@line 531 "xmltok_impl.c"
        __label__ = 102; break; //@line 531 "xmltok_impl.c"
      case 14: // $bb13
        var $70=HEAP[$end_addr]; //@line 531 "xmltok_impl.c"
        var $71=($70); //@line 531 "xmltok_impl.c"
        var $72=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $73=($72); //@line 531 "xmltok_impl.c"
        var $74=((($71) - ($73))&4294967295); //@line 531 "xmltok_impl.c"
        var $75=((($74))|0) <= 3; //@line 531 "xmltok_impl.c"
        if ($75) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 531 "xmltok_impl.c"
      case 15: // $bb14
        HEAP[$0]=-2; //@line 531 "xmltok_impl.c"
        __label__ = 102; break; //@line 531 "xmltok_impl.c"
      case 16: // $bb15
        var $76=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $77=HEAP[$nextTokPtr_addr]; //@line 531 "xmltok_impl.c"
        HEAP[$77]=$76; //@line 531 "xmltok_impl.c"
        HEAP[$0]=0; //@line 531 "xmltok_impl.c"
        __label__ = 102; break; //@line 531 "xmltok_impl.c"
      case 17: // $bb16
        var $78=HEAP[$ptr_addr]; //@line 554 "xmltok_impl.c"
        var $79=(($78+2)&4294967295); //@line 554 "xmltok_impl.c"
        HEAP[$ptr_addr]=$79; //@line 554 "xmltok_impl.c"
        var $80=HEAP[$ptr_addr]; //@line 555 "xmltok_impl.c"
        var $81=HEAP[$end_addr]; //@line 555 "xmltok_impl.c"
        var $82=($80)==($81); //@line 555 "xmltok_impl.c"
        if ($82) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 555 "xmltok_impl.c"
      case 18: // $bb17
        HEAP[$0]=-1; //@line 556 "xmltok_impl.c"
        __label__ = 102; break; //@line 556 "xmltok_impl.c"
      case 19: // $bb18
        var $83=HEAP[$ptr_addr]; //@line 557 "xmltok_impl.c"
        var $84=(($83+1)&4294967295); //@line 557 "xmltok_impl.c"
        var $85=HEAP[$84]; //@line 557 "xmltok_impl.c"
        var $86=reSign(($85), 8, 0)==0; //@line 557 "xmltok_impl.c"
        if ($86) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 557 "xmltok_impl.c"
      case 20: // $bb19
        var $87=HEAP[$enc_addr]; //@line 557 "xmltok_impl.c"
        var $88=$87; //@line 557 "xmltok_impl.c"
        var $89=HEAP[$ptr_addr]; //@line 557 "xmltok_impl.c"
        var $90=HEAP[$89]; //@line 557 "xmltok_impl.c"
        var $91=unSign(($90), 8, 0); //@line 557 "xmltok_impl.c"
        var $92=(($88+72)&4294967295); //@line 557 "xmltok_impl.c"
        var $93=(($92+$91)&4294967295); //@line 557 "xmltok_impl.c"
        var $94=HEAP[$93]; //@line 557 "xmltok_impl.c"
        var $95=unSign(($94), 8, 0); //@line 557 "xmltok_impl.c"
        HEAP[$iftmp_590]=$95; //@line 557 "xmltok_impl.c"
        __label__ = 22; break; //@line 557 "xmltok_impl.c"
      case 21: // $bb20
        var $96=HEAP[$ptr_addr]; //@line 557 "xmltok_impl.c"
        var $97=(($96)&4294967295); //@line 557 "xmltok_impl.c"
        var $98=HEAP[$97]; //@line 557 "xmltok_impl.c"
        var $99=reSign(($98), 8, 0); //@line 557 "xmltok_impl.c"
        var $100=HEAP[$ptr_addr]; //@line 557 "xmltok_impl.c"
        var $101=(($100+1)&4294967295); //@line 557 "xmltok_impl.c"
        var $102=HEAP[$101]; //@line 557 "xmltok_impl.c"
        var $103=reSign(($102), 8, 0); //@line 557 "xmltok_impl.c"
        var $104=((($103)) & 255); //@line 557 "xmltok_impl.c"
        var $105=((($99)) & 255); //@line 557 "xmltok_impl.c"
        var $106=_unicode_byte_type($104, $105); //@line 557 "xmltok_impl.c"
        HEAP[$iftmp_590]=$106; //@line 557 "xmltok_impl.c"
        __label__ = 22; break; //@line 557 "xmltok_impl.c"
      case 22: // $bb21
        var $107=HEAP[$iftmp_590]; //@line 557 "xmltok_impl.c"
        HEAP[$t]=$107; //@line 557 "xmltok_impl.c"
        var $108=HEAP[$t]; //@line 558 "xmltok_impl.c"
        var $109=((($108))|0)==14; //@line 558 "xmltok_impl.c"
        if ($109) { __label__ = 26; break; } else { __label__ = 23; break; } //@line 558 "xmltok_impl.c"
      case 23: // $bb22
        var $110=HEAP[$t]; //@line 560 "xmltok_impl.c"
        if ($110 == 9) {
          __label__ = 24; break;
        }
        else if ($110 == 10) {
          __label__ = 24; break;
        }
        else if ($110 == 21) {
          __label__ = 24; break;
        }
        else {
        __label__ = 25; break;
        }
        
      case 24: // $bb23
        __label__ = 17; break; //@line 560 "xmltok_impl.c"
      case 25: // $bb24
        var $111=HEAP[$ptr_addr]; //@line 566 "xmltok_impl.c"
        var $112=HEAP[$nextTokPtr_addr]; //@line 566 "xmltok_impl.c"
        HEAP[$112]=$111; //@line 566 "xmltok_impl.c"
        HEAP[$0]=0; //@line 567 "xmltok_impl.c"
        __label__ = 102; break; //@line 567 "xmltok_impl.c"
      case 26: // $bb25
        var $113=HEAP[$ptr_addr]; //@line 578 "xmltok_impl.c"
        var $114=(($113+2)&4294967295); //@line 578 "xmltok_impl.c"
        HEAP[$ptr_addr]=$114; //@line 578 "xmltok_impl.c"
        var $115=HEAP[$ptr_addr]; //@line 579 "xmltok_impl.c"
        var $116=HEAP[$end_addr]; //@line 579 "xmltok_impl.c"
        var $117=($115)==($116); //@line 579 "xmltok_impl.c"
        if ($117) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 579 "xmltok_impl.c"
      case 27: // $bb26
        HEAP[$0]=-1; //@line 580 "xmltok_impl.c"
        __label__ = 102; break; //@line 580 "xmltok_impl.c"
      case 28: // $bb27
        var $118=HEAP[$ptr_addr]; //@line 581 "xmltok_impl.c"
        var $119=(($118+1)&4294967295); //@line 581 "xmltok_impl.c"
        var $120=HEAP[$119]; //@line 581 "xmltok_impl.c"
        var $121=reSign(($120), 8, 0)==0; //@line 581 "xmltok_impl.c"
        if ($121) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 581 "xmltok_impl.c"
      case 29: // $bb28
        var $122=HEAP[$enc_addr]; //@line 581 "xmltok_impl.c"
        var $123=$122; //@line 581 "xmltok_impl.c"
        var $124=HEAP[$ptr_addr]; //@line 581 "xmltok_impl.c"
        var $125=HEAP[$124]; //@line 581 "xmltok_impl.c"
        var $126=unSign(($125), 8, 0); //@line 581 "xmltok_impl.c"
        var $127=(($123+72)&4294967295); //@line 581 "xmltok_impl.c"
        var $128=(($127+$126)&4294967295); //@line 581 "xmltok_impl.c"
        var $129=HEAP[$128]; //@line 581 "xmltok_impl.c"
        var $130=unSign(($129), 8, 0); //@line 581 "xmltok_impl.c"
        HEAP[$iftmp_599]=$130; //@line 581 "xmltok_impl.c"
        __label__ = 31; break; //@line 581 "xmltok_impl.c"
      case 30: // $bb29
        var $131=HEAP[$ptr_addr]; //@line 581 "xmltok_impl.c"
        var $132=(($131)&4294967295); //@line 581 "xmltok_impl.c"
        var $133=HEAP[$132]; //@line 581 "xmltok_impl.c"
        var $134=reSign(($133), 8, 0); //@line 581 "xmltok_impl.c"
        var $135=HEAP[$ptr_addr]; //@line 581 "xmltok_impl.c"
        var $136=(($135+1)&4294967295); //@line 581 "xmltok_impl.c"
        var $137=HEAP[$136]; //@line 581 "xmltok_impl.c"
        var $138=reSign(($137), 8, 0); //@line 581 "xmltok_impl.c"
        var $139=((($138)) & 255); //@line 581 "xmltok_impl.c"
        var $140=((($134)) & 255); //@line 581 "xmltok_impl.c"
        var $141=_unicode_byte_type($139, $140); //@line 581 "xmltok_impl.c"
        HEAP[$iftmp_599]=$141; //@line 581 "xmltok_impl.c"
        __label__ = 31; break; //@line 581 "xmltok_impl.c"
      case 31: // $bb30
        var $142=HEAP[$iftmp_599]; //@line 581 "xmltok_impl.c"
        HEAP[$open]=$142; //@line 581 "xmltok_impl.c"
        var $143=HEAP[$open]; //@line 582 "xmltok_impl.c"
        var $144=((($143))|0)==12; //@line 582 "xmltok_impl.c"
        if ($144) { __label__ = 36; break; } else { __label__ = 32; break; } //@line 582 "xmltok_impl.c"
      case 32: // $bb31
        var $145=HEAP[$open]; //@line 582 "xmltok_impl.c"
        var $146=((($145))|0)==13; //@line 582 "xmltok_impl.c"
        if ($146) { __label__ = 36; break; } else { __label__ = 33; break; } //@line 582 "xmltok_impl.c"
      case 33: // $bb32
        var $147=HEAP[$open]; //@line 584 "xmltok_impl.c"
        if ($147 == 9) {
          __label__ = 34; break;
        }
        else if ($147 == 10) {
          __label__ = 34; break;
        }
        else if ($147 == 21) {
          __label__ = 34; break;
        }
        else {
        __label__ = 35; break;
        }
        
      case 34: // $bb33
        __label__ = 26; break; //@line 584 "xmltok_impl.c"
      case 35: // $bb34
        var $148=HEAP[$ptr_addr]; //@line 590 "xmltok_impl.c"
        var $149=HEAP[$nextTokPtr_addr]; //@line 590 "xmltok_impl.c"
        HEAP[$149]=$148; //@line 590 "xmltok_impl.c"
        HEAP[$0]=0; //@line 591 "xmltok_impl.c"
        __label__ = 102; break; //@line 591 "xmltok_impl.c"
      case 36: // $bb35
        var $150=HEAP[$ptr_addr]; //@line 594 "xmltok_impl.c"
        var $151=(($150+2)&4294967295); //@line 594 "xmltok_impl.c"
        HEAP[$ptr_addr]=$151; //@line 594 "xmltok_impl.c"
        __label__ = 37; break; //@line 594 "xmltok_impl.c"
      case 37: // $bb36
        var $152=HEAP[$ptr_addr]; //@line 598 "xmltok_impl.c"
        var $153=HEAP[$end_addr]; //@line 598 "xmltok_impl.c"
        var $154=($152)==($153); //@line 598 "xmltok_impl.c"
        if ($154) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 598 "xmltok_impl.c"
      case 38: // $bb38
        HEAP[$0]=-1; //@line 599 "xmltok_impl.c"
        __label__ = 102; break; //@line 599 "xmltok_impl.c"
      case 39: // $bb39
        var $155=HEAP[$ptr_addr]; //@line 600 "xmltok_impl.c"
        var $156=(($155+1)&4294967295); //@line 600 "xmltok_impl.c"
        var $157=HEAP[$156]; //@line 600 "xmltok_impl.c"
        var $158=reSign(($157), 8, 0)==0; //@line 600 "xmltok_impl.c"
        if ($158) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 600 "xmltok_impl.c"
      case 40: // $bb40
        var $159=HEAP[$enc_addr]; //@line 600 "xmltok_impl.c"
        var $160=$159; //@line 600 "xmltok_impl.c"
        var $161=HEAP[$ptr_addr]; //@line 600 "xmltok_impl.c"
        var $162=HEAP[$161]; //@line 600 "xmltok_impl.c"
        var $163=unSign(($162), 8, 0); //@line 600 "xmltok_impl.c"
        var $164=(($160+72)&4294967295); //@line 600 "xmltok_impl.c"
        var $165=(($164+$163)&4294967295); //@line 600 "xmltok_impl.c"
        var $166=HEAP[$165]; //@line 600 "xmltok_impl.c"
        var $167=unSign(($166), 8, 0); //@line 600 "xmltok_impl.c"
        HEAP[$iftmp_608]=$167; //@line 600 "xmltok_impl.c"
        __label__ = 42; break; //@line 600 "xmltok_impl.c"
      case 41: // $bb41
        var $168=HEAP[$ptr_addr]; //@line 600 "xmltok_impl.c"
        var $169=(($168)&4294967295); //@line 600 "xmltok_impl.c"
        var $170=HEAP[$169]; //@line 600 "xmltok_impl.c"
        var $171=reSign(($170), 8, 0); //@line 600 "xmltok_impl.c"
        var $172=HEAP[$ptr_addr]; //@line 600 "xmltok_impl.c"
        var $173=(($172+1)&4294967295); //@line 600 "xmltok_impl.c"
        var $174=HEAP[$173]; //@line 600 "xmltok_impl.c"
        var $175=reSign(($174), 8, 0); //@line 600 "xmltok_impl.c"
        var $176=((($175)) & 255); //@line 600 "xmltok_impl.c"
        var $177=((($171)) & 255); //@line 600 "xmltok_impl.c"
        var $178=_unicode_byte_type($176, $177); //@line 600 "xmltok_impl.c"
        HEAP[$iftmp_608]=$178; //@line 600 "xmltok_impl.c"
        __label__ = 42; break; //@line 600 "xmltok_impl.c"
      case 42: // $bb42
        var $179=HEAP[$iftmp_608]; //@line 600 "xmltok_impl.c"
        HEAP[$t37]=$179; //@line 600 "xmltok_impl.c"
        var $180=HEAP[$t37]; //@line 601 "xmltok_impl.c"
        var $181=HEAP[$open]; //@line 601 "xmltok_impl.c"
        var $182=((($180))|0)==((($181))|0); //@line 601 "xmltok_impl.c"
        if ($182) { __label__ = 62; break; } else { __label__ = 43; break; } //@line 601 "xmltok_impl.c"
      case 43: // $bb43
        var $183=HEAP[$t37]; //@line 603 "xmltok_impl.c"
        if ($183 == 0) {
          __label__ = 53; break;
        }
        else if ($183 == 1) {
          __label__ = 53; break;
        }
        else if ($183 == 2) {
          __label__ = 59; break;
        }
        else if ($183 == 3) {
          __label__ = 54; break;
        }
        else if ($183 == 5) {
          __label__ = 44; break;
        }
        else if ($183 == 6) {
          __label__ = 47; break;
        }
        else if ($183 == 7) {
          __label__ = 50; break;
        }
        else if ($183 == 8) {
          __label__ = 53; break;
        }
        else {
        __label__ = 60; break;
        }
        
      case 44: // $bb44
        var $184=HEAP[$end_addr]; //@line 604 "xmltok_impl.c"
        var $185=($184); //@line 604 "xmltok_impl.c"
        var $186=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $187=($186); //@line 604 "xmltok_impl.c"
        var $188=((($185) - ($187))&4294967295); //@line 604 "xmltok_impl.c"
        var $189=((($188))|0) <= 1; //@line 604 "xmltok_impl.c"
        if ($189) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 604 "xmltok_impl.c"
      case 45: // $bb45
        HEAP[$0]=-2; //@line 604 "xmltok_impl.c"
        __label__ = 102; break; //@line 604 "xmltok_impl.c"
      case 46: // $bb46
        var $190=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $191=(($190+2)&4294967295); //@line 604 "xmltok_impl.c"
        HEAP[$ptr_addr]=$191; //@line 604 "xmltok_impl.c"
        __label__ = 61; break; //@line 604 "xmltok_impl.c"
      case 47: // $bb47
        var $192=HEAP[$end_addr]; //@line 604 "xmltok_impl.c"
        var $193=($192); //@line 604 "xmltok_impl.c"
        var $194=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $195=($194); //@line 604 "xmltok_impl.c"
        var $196=((($193) - ($195))&4294967295); //@line 604 "xmltok_impl.c"
        var $197=((($196))|0) <= 2; //@line 604 "xmltok_impl.c"
        if ($197) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 604 "xmltok_impl.c"
      case 48: // $bb48
        HEAP[$0]=-2; //@line 604 "xmltok_impl.c"
        __label__ = 102; break; //@line 604 "xmltok_impl.c"
      case 49: // $bb49
        var $198=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $199=(($198+3)&4294967295); //@line 604 "xmltok_impl.c"
        HEAP[$ptr_addr]=$199; //@line 604 "xmltok_impl.c"
        __label__ = 61; break; //@line 604 "xmltok_impl.c"
      case 50: // $bb50
        var $200=HEAP[$end_addr]; //@line 604 "xmltok_impl.c"
        var $201=($200); //@line 604 "xmltok_impl.c"
        var $202=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $203=($202); //@line 604 "xmltok_impl.c"
        var $204=((($201) - ($203))&4294967295); //@line 604 "xmltok_impl.c"
        var $205=((($204))|0) <= 3; //@line 604 "xmltok_impl.c"
        if ($205) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 604 "xmltok_impl.c"
      case 51: // $bb51
        HEAP[$0]=-2; //@line 604 "xmltok_impl.c"
        __label__ = 102; break; //@line 604 "xmltok_impl.c"
      case 52: // $bb52
        var $206=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $207=(($206+4)&4294967295); //@line 604 "xmltok_impl.c"
        HEAP[$ptr_addr]=$207; //@line 604 "xmltok_impl.c"
        __label__ = 61; break; //@line 604 "xmltok_impl.c"
      case 53: // $bb53
        var $208=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $209=HEAP[$nextTokPtr_addr]; //@line 604 "xmltok_impl.c"
        HEAP[$209]=$208; //@line 604 "xmltok_impl.c"
        HEAP[$0]=0; //@line 604 "xmltok_impl.c"
        __label__ = 102; break; //@line 604 "xmltok_impl.c"
      case 54: // $bb54
        var $210=HEAP[$ptr_addr]; //@line 607 "xmltok_impl.c"
        var $211=(($210+2)&4294967295); //@line 607 "xmltok_impl.c"
        var $212=HEAP[$enc_addr]; //@line 607 "xmltok_impl.c"
        var $213=HEAP[$end_addr]; //@line 607 "xmltok_impl.c"
        var $214=_little2_scanRef($212, $211, $213, $ptr_addr); //@line 607 "xmltok_impl.c"
        HEAP[$tok]=$214; //@line 607 "xmltok_impl.c"
        var $215=HEAP[$tok]; //@line 608 "xmltok_impl.c"
        var $216=((($215))|0) <= 0; //@line 608 "xmltok_impl.c"
        if ($216) { __label__ = 55; break; } else { __label__ = 58; break; } //@line 608 "xmltok_impl.c"
      case 55: // $bb55
        var $217=HEAP[$tok]; //@line 609 "xmltok_impl.c"
        var $218=((($217))|0)==0; //@line 609 "xmltok_impl.c"
        if ($218) { __label__ = 56; break; } else { __label__ = 57; break; } //@line 609 "xmltok_impl.c"
      case 56: // $bb56
        var $219=HEAP[$ptr_addr]; //@line 610 "xmltok_impl.c"
        var $220=HEAP[$nextTokPtr_addr]; //@line 610 "xmltok_impl.c"
        HEAP[$220]=$219; //@line 610 "xmltok_impl.c"
        __label__ = 57; break; //@line 610 "xmltok_impl.c"
      case 57: // $bb57
        var $221=HEAP[$tok]; //@line 611 "xmltok_impl.c"
        HEAP[$0]=$221; //@line 611 "xmltok_impl.c"
        __label__ = 102; break; //@line 611 "xmltok_impl.c"
      case 58: // $bb58
        __label__ = 61; break; //@line 611 "xmltok_impl.c"
      case 59: // $bb59
        var $222=HEAP[$ptr_addr]; //@line 616 "xmltok_impl.c"
        var $223=HEAP[$nextTokPtr_addr]; //@line 616 "xmltok_impl.c"
        HEAP[$223]=$222; //@line 616 "xmltok_impl.c"
        HEAP[$0]=0; //@line 617 "xmltok_impl.c"
        __label__ = 102; break; //@line 617 "xmltok_impl.c"
      case 60: // $bb60
        var $224=HEAP[$ptr_addr]; //@line 619 "xmltok_impl.c"
        var $225=(($224+2)&4294967295); //@line 619 "xmltok_impl.c"
        HEAP[$ptr_addr]=$225; //@line 619 "xmltok_impl.c"
        __label__ = 61; break; //@line 619 "xmltok_impl.c"
      case 61: // $bb61
        __label__ = 37; break; //@line 619 "xmltok_impl.c"
      case 62: // $bb62
        var $226=HEAP[$ptr_addr]; //@line 623 "xmltok_impl.c"
        var $227=(($226+2)&4294967295); //@line 623 "xmltok_impl.c"
        HEAP[$ptr_addr]=$227; //@line 623 "xmltok_impl.c"
        var $228=HEAP[$ptr_addr]; //@line 624 "xmltok_impl.c"
        var $229=HEAP[$end_addr]; //@line 624 "xmltok_impl.c"
        var $230=($228)==($229); //@line 624 "xmltok_impl.c"
        if ($230) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 624 "xmltok_impl.c"
      case 63: // $bb63
        HEAP[$0]=-1; //@line 625 "xmltok_impl.c"
        __label__ = 102; break; //@line 625 "xmltok_impl.c"
      case 64: // $bb64
        var $231=HEAP[$ptr_addr]; //@line 626 "xmltok_impl.c"
        var $232=(($231+1)&4294967295); //@line 626 "xmltok_impl.c"
        var $233=HEAP[$232]; //@line 626 "xmltok_impl.c"
        var $234=reSign(($233), 8, 0)==0; //@line 626 "xmltok_impl.c"
        if ($234) { __label__ = 65; break; } else { __label__ = 66; break; } //@line 626 "xmltok_impl.c"
      case 65: // $bb65
        var $235=HEAP[$enc_addr]; //@line 626 "xmltok_impl.c"
        var $236=$235; //@line 626 "xmltok_impl.c"
        var $237=HEAP[$ptr_addr]; //@line 626 "xmltok_impl.c"
        var $238=HEAP[$237]; //@line 626 "xmltok_impl.c"
        var $239=unSign(($238), 8, 0); //@line 626 "xmltok_impl.c"
        var $240=(($236+72)&4294967295); //@line 626 "xmltok_impl.c"
        var $241=(($240+$239)&4294967295); //@line 626 "xmltok_impl.c"
        var $242=HEAP[$241]; //@line 626 "xmltok_impl.c"
        var $243=unSign(($242), 8, 0); //@line 626 "xmltok_impl.c"
        HEAP[$iftmp_636]=$243; //@line 626 "xmltok_impl.c"
        __label__ = 67; break; //@line 626 "xmltok_impl.c"
      case 66: // $bb66
        var $244=HEAP[$ptr_addr]; //@line 626 "xmltok_impl.c"
        var $245=(($244)&4294967295); //@line 626 "xmltok_impl.c"
        var $246=HEAP[$245]; //@line 626 "xmltok_impl.c"
        var $247=reSign(($246), 8, 0); //@line 626 "xmltok_impl.c"
        var $248=HEAP[$ptr_addr]; //@line 626 "xmltok_impl.c"
        var $249=(($248+1)&4294967295); //@line 626 "xmltok_impl.c"
        var $250=HEAP[$249]; //@line 626 "xmltok_impl.c"
        var $251=reSign(($250), 8, 0); //@line 626 "xmltok_impl.c"
        var $252=((($251)) & 255); //@line 626 "xmltok_impl.c"
        var $253=((($247)) & 255); //@line 626 "xmltok_impl.c"
        var $254=_unicode_byte_type($252, $253); //@line 626 "xmltok_impl.c"
        HEAP[$iftmp_636]=$254; //@line 626 "xmltok_impl.c"
        __label__ = 67; break; //@line 626 "xmltok_impl.c"
      case 67: // $bb67
        var $255=HEAP[$iftmp_636]; //@line 626 "xmltok_impl.c"
        if ($255 == 9) {
          __label__ = 68; break;
        }
        else if ($255 == 10) {
          __label__ = 68; break;
        }
        else if ($255 == 11) {
          __label__ = 70; break;
        }
        else if ($255 == 17) {
          __label__ = 69; break;
        }
        else if ($255 == 21) {
          __label__ = 68; break;
        }
        else {
        __label__ = 71; break;
        }
        
      case 68: // $bb68
        __label__ = 72; break; //@line 626 "xmltok_impl.c"
      case 69: // $bb69
        __label__ = 92; break; //@line 626 "xmltok_impl.c"
      case 70: // $bb70
        __label__ = 91; break; //@line 626 "xmltok_impl.c"
      case 71: // $bb71
        var $256=HEAP[$ptr_addr]; //@line 636 "xmltok_impl.c"
        var $257=HEAP[$nextTokPtr_addr]; //@line 636 "xmltok_impl.c"
        HEAP[$257]=$256; //@line 636 "xmltok_impl.c"
        HEAP[$0]=0; //@line 637 "xmltok_impl.c"
        __label__ = 102; break; //@line 637 "xmltok_impl.c"
      case 72: // $bb72
        var $258=HEAP[$ptr_addr]; //@line 641 "xmltok_impl.c"
        var $259=(($258+2)&4294967295); //@line 641 "xmltok_impl.c"
        HEAP[$ptr_addr]=$259; //@line 641 "xmltok_impl.c"
        var $260=HEAP[$ptr_addr]; //@line 642 "xmltok_impl.c"
        var $261=HEAP[$end_addr]; //@line 642 "xmltok_impl.c"
        var $262=($260)==($261); //@line 642 "xmltok_impl.c"
        if ($262) { __label__ = 73; break; } else { __label__ = 74; break; } //@line 642 "xmltok_impl.c"
      case 73: // $bb73
        HEAP[$0]=-1; //@line 643 "xmltok_impl.c"
        __label__ = 102; break; //@line 643 "xmltok_impl.c"
      case 74: // $bb74
        var $263=HEAP[$ptr_addr]; //@line 644 "xmltok_impl.c"
        var $264=(($263+1)&4294967295); //@line 644 "xmltok_impl.c"
        var $265=HEAP[$264]; //@line 644 "xmltok_impl.c"
        var $266=reSign(($265), 8, 0)==0; //@line 644 "xmltok_impl.c"
        if ($266) { __label__ = 75; break; } else { __label__ = 76; break; } //@line 644 "xmltok_impl.c"
      case 75: // $bb75
        var $267=HEAP[$enc_addr]; //@line 644 "xmltok_impl.c"
        var $268=$267; //@line 644 "xmltok_impl.c"
        var $269=HEAP[$ptr_addr]; //@line 644 "xmltok_impl.c"
        var $270=HEAP[$269]; //@line 644 "xmltok_impl.c"
        var $271=unSign(($270), 8, 0); //@line 644 "xmltok_impl.c"
        var $272=(($268+72)&4294967295); //@line 644 "xmltok_impl.c"
        var $273=(($272+$271)&4294967295); //@line 644 "xmltok_impl.c"
        var $274=HEAP[$273]; //@line 644 "xmltok_impl.c"
        var $275=unSign(($274), 8, 0); //@line 644 "xmltok_impl.c"
        HEAP[$iftmp_645]=$275; //@line 644 "xmltok_impl.c"
        __label__ = 77; break; //@line 644 "xmltok_impl.c"
      case 76: // $bb76
        var $276=HEAP[$ptr_addr]; //@line 644 "xmltok_impl.c"
        var $277=(($276)&4294967295); //@line 644 "xmltok_impl.c"
        var $278=HEAP[$277]; //@line 644 "xmltok_impl.c"
        var $279=reSign(($278), 8, 0); //@line 644 "xmltok_impl.c"
        var $280=HEAP[$ptr_addr]; //@line 644 "xmltok_impl.c"
        var $281=(($280+1)&4294967295); //@line 644 "xmltok_impl.c"
        var $282=HEAP[$281]; //@line 644 "xmltok_impl.c"
        var $283=reSign(($282), 8, 0); //@line 644 "xmltok_impl.c"
        var $284=((($283)) & 255); //@line 644 "xmltok_impl.c"
        var $285=((($279)) & 255); //@line 644 "xmltok_impl.c"
        var $286=_unicode_byte_type($284, $285); //@line 644 "xmltok_impl.c"
        HEAP[$iftmp_645]=$286; //@line 644 "xmltok_impl.c"
        __label__ = 77; break; //@line 644 "xmltok_impl.c"
      case 77: // $bb77
        var $287=HEAP[$iftmp_645]; //@line 644 "xmltok_impl.c"
        if ($287 == 5) {
          __label__ = 81; break;
        }
        else if ($287 == 6) {
          __label__ = 84; break;
        }
        else if ($287 == 7) {
          __label__ = 87; break;
        }
        else if ($287 == 9) {
          __label__ = 90; break;
        }
        else if ($287 == 10) {
          __label__ = 90; break;
        }
        else if ($287 == 11) {
          __label__ = 91; break;
        }
        else if ($287 == 17) {
          __label__ = 92; break;
        }
        else if ($287 == 21) {
          __label__ = 90; break;
        }
        else if ($287 == 22) {
          __label__ = 80; break;
        }
        else if ($287 == 24) {
          __label__ = 80; break;
        }
        else if ($287 == 29) {
          __label__ = 78; break;
        }
        else {
        __label__ = 98; break;
        }
        
      case 78: // $bb78
        var $288=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $289=(($288+1)&4294967295); //@line 645 "xmltok_impl.c"
        var $290=HEAP[$289]; //@line 645 "xmltok_impl.c"
        var $291=unSign(($290), 8, 0); //@line 645 "xmltok_impl.c"
        var $292=((_nmstrtPages+$291)&4294967295); //@line 645 "xmltok_impl.c"
        var $293=HEAP[$292]; //@line 645 "xmltok_impl.c"
        var $294=unSign(($293), 8, 0); //@line 645 "xmltok_impl.c"
        var $295=($294) << 3; //@line 645 "xmltok_impl.c"
        var $296=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $297=(($296)&4294967295); //@line 645 "xmltok_impl.c"
        var $298=HEAP[$297]; //@line 645 "xmltok_impl.c"
        var $299=unSign(($298), 8, 0) >>> 5; //@line 645 "xmltok_impl.c"
        var $300=unSign(($299), 8, 0); //@line 645 "xmltok_impl.c"
        var $301=((($295) + ($300))&4294967295); //@line 645 "xmltok_impl.c"
        var $302=((_namingBitmap+$301*4)&4294967295); //@line 645 "xmltok_impl.c"
        var $303=HEAP[$302]; //@line 645 "xmltok_impl.c"
        var $304=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $305=(($304)&4294967295); //@line 645 "xmltok_impl.c"
        var $306=HEAP[$305]; //@line 645 "xmltok_impl.c"
        var $307=unSign(($306), 8, 0); //@line 645 "xmltok_impl.c"
        var $308=($307) & 31; //@line 645 "xmltok_impl.c"
        var $309=1 << ($308); //@line 645 "xmltok_impl.c"
        var $310=($303) & ($309); //@line 645 "xmltok_impl.c"
        var $311=((($310))|0)==0; //@line 645 "xmltok_impl.c"
        if ($311) { __label__ = 79; break; } else { __label__ = 80; break; } //@line 645 "xmltok_impl.c"
      case 79: // $bb79
        var $312=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $313=HEAP[$nextTokPtr_addr]; //@line 645 "xmltok_impl.c"
        HEAP[$313]=$312; //@line 645 "xmltok_impl.c"
        HEAP[$0]=0; //@line 645 "xmltok_impl.c"
        __label__ = 102; break; //@line 645 "xmltok_impl.c"
      case 80: // $bb80
        var $314=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $315=(($314+2)&4294967295); //@line 645 "xmltok_impl.c"
        HEAP[$ptr_addr]=$315; //@line 645 "xmltok_impl.c"
        __label__ = 100; break; //@line 645 "xmltok_impl.c"
      case 81: // $bb81
        var $316=HEAP[$end_addr]; //@line 645 "xmltok_impl.c"
        var $317=($316); //@line 645 "xmltok_impl.c"
        var $318=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $319=($318); //@line 645 "xmltok_impl.c"
        var $320=((($317) - ($319))&4294967295); //@line 645 "xmltok_impl.c"
        var $321=((($320))|0) <= 1; //@line 645 "xmltok_impl.c"
        if ($321) { __label__ = 82; break; } else { __label__ = 83; break; } //@line 645 "xmltok_impl.c"
      case 82: // $bb82
        HEAP[$0]=-2; //@line 645 "xmltok_impl.c"
        __label__ = 102; break; //@line 645 "xmltok_impl.c"
      case 83: // $bb83
        var $322=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $323=HEAP[$nextTokPtr_addr]; //@line 645 "xmltok_impl.c"
        HEAP[$323]=$322; //@line 645 "xmltok_impl.c"
        HEAP[$0]=0; //@line 645 "xmltok_impl.c"
        __label__ = 102; break; //@line 645 "xmltok_impl.c"
      case 84: // $bb84
        var $324=HEAP[$end_addr]; //@line 645 "xmltok_impl.c"
        var $325=($324); //@line 645 "xmltok_impl.c"
        var $326=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $327=($326); //@line 645 "xmltok_impl.c"
        var $328=((($325) - ($327))&4294967295); //@line 645 "xmltok_impl.c"
        var $329=((($328))|0) <= 2; //@line 645 "xmltok_impl.c"
        if ($329) { __label__ = 85; break; } else { __label__ = 86; break; } //@line 645 "xmltok_impl.c"
      case 85: // $bb85
        HEAP[$0]=-2; //@line 645 "xmltok_impl.c"
        __label__ = 102; break; //@line 645 "xmltok_impl.c"
      case 86: // $bb86
        var $330=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $331=HEAP[$nextTokPtr_addr]; //@line 645 "xmltok_impl.c"
        HEAP[$331]=$330; //@line 645 "xmltok_impl.c"
        HEAP[$0]=0; //@line 645 "xmltok_impl.c"
        __label__ = 102; break; //@line 645 "xmltok_impl.c"
      case 87: // $bb87
        var $332=HEAP[$end_addr]; //@line 645 "xmltok_impl.c"
        var $333=($332); //@line 645 "xmltok_impl.c"
        var $334=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $335=($334); //@line 645 "xmltok_impl.c"
        var $336=((($333) - ($335))&4294967295); //@line 645 "xmltok_impl.c"
        var $337=((($336))|0) <= 3; //@line 645 "xmltok_impl.c"
        if ($337) { __label__ = 88; break; } else { __label__ = 89; break; } //@line 645 "xmltok_impl.c"
      case 88: // $bb88
        HEAP[$0]=-2; //@line 645 "xmltok_impl.c"
        __label__ = 102; break; //@line 645 "xmltok_impl.c"
      case 89: // $bb89
        var $338=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $339=HEAP[$nextTokPtr_addr]; //@line 645 "xmltok_impl.c"
        HEAP[$339]=$338; //@line 645 "xmltok_impl.c"
        HEAP[$0]=0; //@line 645 "xmltok_impl.c"
        __label__ = 102; break; //@line 645 "xmltok_impl.c"
      case 90: // $bb90
        __label__ = 72; break; //@line 645 "xmltok_impl.c"
      case 91: // $gt
        var $340=HEAP[$ptr_addr]; //@line 650 "xmltok_impl.c"
        var $341=(($340+2)&4294967295); //@line 650 "xmltok_impl.c"
        var $342=HEAP[$nextTokPtr_addr]; //@line 650 "xmltok_impl.c"
        HEAP[$342]=$341; //@line 650 "xmltok_impl.c"
        HEAP[$0]=1; //@line 651 "xmltok_impl.c"
        __label__ = 102; break; //@line 651 "xmltok_impl.c"
      case 92: // $sol
        var $343=HEAP[$ptr_addr]; //@line 654 "xmltok_impl.c"
        var $344=(($343+2)&4294967295); //@line 654 "xmltok_impl.c"
        HEAP[$ptr_addr]=$344; //@line 654 "xmltok_impl.c"
        var $345=HEAP[$ptr_addr]; //@line 655 "xmltok_impl.c"
        var $346=HEAP[$end_addr]; //@line 655 "xmltok_impl.c"
        var $347=($345)==($346); //@line 655 "xmltok_impl.c"
        if ($347) { __label__ = 93; break; } else { __label__ = 94; break; } //@line 655 "xmltok_impl.c"
      case 93: // $bb91
        HEAP[$0]=-1; //@line 656 "xmltok_impl.c"
        __label__ = 102; break; //@line 656 "xmltok_impl.c"
      case 94: // $bb92
        var $348=HEAP[$ptr_addr]; //@line 657 "xmltok_impl.c"
        var $349=(($348+1)&4294967295); //@line 657 "xmltok_impl.c"
        var $350=HEAP[$349]; //@line 657 "xmltok_impl.c"
        var $351=reSign(($350), 8, 0)!=0; //@line 657 "xmltok_impl.c"
        if ($351) { __label__ = 96; break; } else { __label__ = 95; break; } //@line 657 "xmltok_impl.c"
      case 95: // $bb93
        var $352=HEAP[$ptr_addr]; //@line 657 "xmltok_impl.c"
        var $353=(($352)&4294967295); //@line 657 "xmltok_impl.c"
        var $354=HEAP[$353]; //@line 657 "xmltok_impl.c"
        var $355=reSign(($354), 8, 0)!=62; //@line 657 "xmltok_impl.c"
        if ($355) { __label__ = 96; break; } else { __label__ = 97; break; } //@line 657 "xmltok_impl.c"
      case 96: // $bb94
        var $356=HEAP[$ptr_addr]; //@line 658 "xmltok_impl.c"
        var $357=HEAP[$nextTokPtr_addr]; //@line 658 "xmltok_impl.c"
        HEAP[$357]=$356; //@line 658 "xmltok_impl.c"
        HEAP[$0]=0; //@line 659 "xmltok_impl.c"
        __label__ = 102; break; //@line 659 "xmltok_impl.c"
      case 97: // $bb95
        var $358=HEAP[$ptr_addr]; //@line 661 "xmltok_impl.c"
        var $359=(($358+2)&4294967295); //@line 661 "xmltok_impl.c"
        var $360=HEAP[$nextTokPtr_addr]; //@line 661 "xmltok_impl.c"
        HEAP[$360]=$359; //@line 661 "xmltok_impl.c"
        HEAP[$0]=3; //@line 662 "xmltok_impl.c"
        __label__ = 102; break; //@line 662 "xmltok_impl.c"
      case 98: // $bb96
        var $361=HEAP[$ptr_addr]; //@line 664 "xmltok_impl.c"
        var $362=HEAP[$nextTokPtr_addr]; //@line 664 "xmltok_impl.c"
        HEAP[$362]=$361; //@line 664 "xmltok_impl.c"
        HEAP[$0]=0; //@line 665 "xmltok_impl.c"
        __label__ = 102; break; //@line 665 "xmltok_impl.c"
      case 99: // $bb97
        var $363=HEAP[$ptr_addr]; //@line 672 "xmltok_impl.c"
        var $364=HEAP[$nextTokPtr_addr]; //@line 672 "xmltok_impl.c"
        HEAP[$364]=$363; //@line 672 "xmltok_impl.c"
        HEAP[$0]=0; //@line 673 "xmltok_impl.c"
        __label__ = 102; break; //@line 673 "xmltok_impl.c"
      case 100: // $bb98
        var $365=HEAP[$ptr_addr]; //@line 529 "xmltok_impl.c"
        var $366=HEAP[$end_addr]; //@line 529 "xmltok_impl.c"
        var $367=($365)!=($366); //@line 529 "xmltok_impl.c"
        if ($367) { __label__ = 1; break; } else { __label__ = 101; break; } //@line 529 "xmltok_impl.c"
      case 101: // $bb99
        HEAP[$0]=-1; //@line 676 "xmltok_impl.c"
        __label__ = 102; break; //@line 676 "xmltok_impl.c"
      case 102: // $bb100
        var $368=HEAP[$0]; //@line 531 "xmltok_impl.c"
        HEAP[$retval]=$368; //@line 531 "xmltok_impl.c"
        __label__ = 103; break; //@line 531 "xmltok_impl.c"
      case 103: // $return
        var $retval101=HEAP[$retval]; //@line 531 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval101; //@line 531 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_scanLt($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_699=__stackBase__+20;
        var $iftmp_691=__stackBase__+24;
        var $iftmp_689=__stackBase__+28;
        var $iftmp_681=__stackBase__+32;
        var $0=__stackBase__+36;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 688 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 688 "xmltok_impl.c"
        var $3=($1)==($2); //@line 688 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 688 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 689 "xmltok_impl.c"
        __label__ = 79; break; //@line 689 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$ptr_addr]; //@line 690 "xmltok_impl.c"
        var $5=(($4+1)&4294967295); //@line 690 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 690 "xmltok_impl.c"
        var $7=reSign(($6), 8, 0)==0; //@line 690 "xmltok_impl.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 690 "xmltok_impl.c"
      case 3: // $bb2
        var $8=HEAP[$enc_addr]; //@line 690 "xmltok_impl.c"
        var $9=$8; //@line 690 "xmltok_impl.c"
        var $10=HEAP[$ptr_addr]; //@line 690 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 690 "xmltok_impl.c"
        var $12=unSign(($11), 8, 0); //@line 690 "xmltok_impl.c"
        var $13=(($9+72)&4294967295); //@line 690 "xmltok_impl.c"
        var $14=(($13+$12)&4294967295); //@line 690 "xmltok_impl.c"
        var $15=HEAP[$14]; //@line 690 "xmltok_impl.c"
        var $16=unSign(($15), 8, 0); //@line 690 "xmltok_impl.c"
        HEAP[$iftmp_681]=$16; //@line 690 "xmltok_impl.c"
        __label__ = 5; break; //@line 690 "xmltok_impl.c"
      case 4: // $bb3
        var $17=HEAP[$ptr_addr]; //@line 690 "xmltok_impl.c"
        var $18=(($17)&4294967295); //@line 690 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 690 "xmltok_impl.c"
        var $20=reSign(($19), 8, 0); //@line 690 "xmltok_impl.c"
        var $21=HEAP[$ptr_addr]; //@line 690 "xmltok_impl.c"
        var $22=(($21+1)&4294967295); //@line 690 "xmltok_impl.c"
        var $23=HEAP[$22]; //@line 690 "xmltok_impl.c"
        var $24=reSign(($23), 8, 0); //@line 690 "xmltok_impl.c"
        var $25=((($24)) & 255); //@line 690 "xmltok_impl.c"
        var $26=((($20)) & 255); //@line 690 "xmltok_impl.c"
        var $27=_unicode_byte_type($25, $26); //@line 690 "xmltok_impl.c"
        HEAP[$iftmp_681]=$27; //@line 690 "xmltok_impl.c"
        __label__ = 5; break; //@line 690 "xmltok_impl.c"
      case 5: // $bb4
        var $28=HEAP[$iftmp_681]; //@line 690 "xmltok_impl.c"
        if ($28 == 5) {
          __label__ = 9; break;
        }
        else if ($28 == 6) {
          __label__ = 12; break;
        }
        else if ($28 == 7) {
          __label__ = 15; break;
        }
        else if ($28 == 15) {
          __label__ = 27; break;
        }
        else if ($28 == 16) {
          __label__ = 18; break;
        }
        else if ($28 == 17) {
          __label__ = 28; break;
        }
        else if ($28 == 22) {
          __label__ = 8; break;
        }
        else if ($28 == 24) {
          __label__ = 8; break;
        }
        else if ($28 == 29) {
          __label__ = 6; break;
        }
        else {
        __label__ = 29; break;
        }
        
      case 6: // $bb5
        var $29=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        var $30=(($29+1)&4294967295); //@line 691 "xmltok_impl.c"
        var $31=HEAP[$30]; //@line 691 "xmltok_impl.c"
        var $32=unSign(($31), 8, 0); //@line 691 "xmltok_impl.c"
        var $33=((_nmstrtPages+$32)&4294967295); //@line 691 "xmltok_impl.c"
        var $34=HEAP[$33]; //@line 691 "xmltok_impl.c"
        var $35=unSign(($34), 8, 0); //@line 691 "xmltok_impl.c"
        var $36=($35) << 3; //@line 691 "xmltok_impl.c"
        var $37=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        var $38=(($37)&4294967295); //@line 691 "xmltok_impl.c"
        var $39=HEAP[$38]; //@line 691 "xmltok_impl.c"
        var $40=unSign(($39), 8, 0) >>> 5; //@line 691 "xmltok_impl.c"
        var $41=unSign(($40), 8, 0); //@line 691 "xmltok_impl.c"
        var $42=((($36) + ($41))&4294967295); //@line 691 "xmltok_impl.c"
        var $43=((_namingBitmap+$42*4)&4294967295); //@line 691 "xmltok_impl.c"
        var $44=HEAP[$43]; //@line 691 "xmltok_impl.c"
        var $45=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        var $46=(($45)&4294967295); //@line 691 "xmltok_impl.c"
        var $47=HEAP[$46]; //@line 691 "xmltok_impl.c"
        var $48=unSign(($47), 8, 0); //@line 691 "xmltok_impl.c"
        var $49=($48) & 31; //@line 691 "xmltok_impl.c"
        var $50=1 << ($49); //@line 691 "xmltok_impl.c"
        var $51=($44) & ($50); //@line 691 "xmltok_impl.c"
        var $52=((($51))|0)==0; //@line 691 "xmltok_impl.c"
        if ($52) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 691 "xmltok_impl.c"
      case 7: // $bb6
        var $53=HEAP[$nextTokPtr_addr]; //@line 691 "xmltok_impl.c"
        var $54=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        HEAP[$53]=$54; //@line 691 "xmltok_impl.c"
        HEAP[$0]=0; //@line 691 "xmltok_impl.c"
        __label__ = 79; break; //@line 691 "xmltok_impl.c"
      case 8: // $bb7
        var $55=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        var $56=(($55+2)&4294967295); //@line 691 "xmltok_impl.c"
        HEAP[$ptr_addr]=$56; //@line 691 "xmltok_impl.c"
        __label__ = 77; break; //@line 691 "xmltok_impl.c"
      case 9: // $bb8
        var $57=HEAP[$end_addr]; //@line 691 "xmltok_impl.c"
        var $58=($57); //@line 691 "xmltok_impl.c"
        var $59=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        var $60=($59); //@line 691 "xmltok_impl.c"
        var $61=((($58) - ($60))&4294967295); //@line 691 "xmltok_impl.c"
        var $62=((($61))|0) <= 1; //@line 691 "xmltok_impl.c"
        if ($62) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 691 "xmltok_impl.c"
      case 10: // $bb9
        HEAP[$0]=-2; //@line 691 "xmltok_impl.c"
        __label__ = 79; break; //@line 691 "xmltok_impl.c"
      case 11: // $bb10
        var $63=HEAP[$nextTokPtr_addr]; //@line 691 "xmltok_impl.c"
        var $64=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        HEAP[$63]=$64; //@line 691 "xmltok_impl.c"
        HEAP[$0]=0; //@line 691 "xmltok_impl.c"
        __label__ = 79; break; //@line 691 "xmltok_impl.c"
      case 12: // $bb11
        var $65=HEAP[$end_addr]; //@line 691 "xmltok_impl.c"
        var $66=($65); //@line 691 "xmltok_impl.c"
        var $67=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        var $68=($67); //@line 691 "xmltok_impl.c"
        var $69=((($66) - ($68))&4294967295); //@line 691 "xmltok_impl.c"
        var $70=((($69))|0) <= 2; //@line 691 "xmltok_impl.c"
        if ($70) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 691 "xmltok_impl.c"
      case 13: // $bb12
        HEAP[$0]=-2; //@line 691 "xmltok_impl.c"
        __label__ = 79; break; //@line 691 "xmltok_impl.c"
      case 14: // $bb13
        var $71=HEAP[$nextTokPtr_addr]; //@line 691 "xmltok_impl.c"
        var $72=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        HEAP[$71]=$72; //@line 691 "xmltok_impl.c"
        HEAP[$0]=0; //@line 691 "xmltok_impl.c"
        __label__ = 79; break; //@line 691 "xmltok_impl.c"
      case 15: // $bb14
        var $73=HEAP[$end_addr]; //@line 691 "xmltok_impl.c"
        var $74=($73); //@line 691 "xmltok_impl.c"
        var $75=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        var $76=($75); //@line 691 "xmltok_impl.c"
        var $77=((($74) - ($76))&4294967295); //@line 691 "xmltok_impl.c"
        var $78=((($77))|0) <= 3; //@line 691 "xmltok_impl.c"
        if ($78) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 691 "xmltok_impl.c"
      case 16: // $bb15
        HEAP[$0]=-2; //@line 691 "xmltok_impl.c"
        __label__ = 79; break; //@line 691 "xmltok_impl.c"
      case 17: // $bb16
        var $79=HEAP[$nextTokPtr_addr]; //@line 691 "xmltok_impl.c"
        var $80=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        HEAP[$79]=$80; //@line 691 "xmltok_impl.c"
        HEAP[$0]=0; //@line 691 "xmltok_impl.c"
        __label__ = 79; break; //@line 691 "xmltok_impl.c"
      case 18: // $bb17
        var $81=HEAP[$ptr_addr]; //@line 693 "xmltok_impl.c"
        var $82=(($81+2)&4294967295); //@line 693 "xmltok_impl.c"
        HEAP[$ptr_addr]=$82; //@line 693 "xmltok_impl.c"
        var $83=HEAP[$ptr_addr]; //@line 693 "xmltok_impl.c"
        var $84=HEAP[$end_addr]; //@line 693 "xmltok_impl.c"
        var $85=($83)==($84); //@line 693 "xmltok_impl.c"
        if ($85) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 693 "xmltok_impl.c"
      case 19: // $bb18
        HEAP[$0]=-1; //@line 694 "xmltok_impl.c"
        __label__ = 79; break; //@line 694 "xmltok_impl.c"
      case 20: // $bb19
        var $86=HEAP[$ptr_addr]; //@line 695 "xmltok_impl.c"
        var $87=(($86+1)&4294967295); //@line 695 "xmltok_impl.c"
        var $88=HEAP[$87]; //@line 695 "xmltok_impl.c"
        var $89=reSign(($88), 8, 0)==0; //@line 695 "xmltok_impl.c"
        if ($89) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 695 "xmltok_impl.c"
      case 21: // $bb20
        var $90=HEAP[$enc_addr]; //@line 695 "xmltok_impl.c"
        var $91=$90; //@line 695 "xmltok_impl.c"
        var $92=HEAP[$ptr_addr]; //@line 695 "xmltok_impl.c"
        var $93=HEAP[$92]; //@line 695 "xmltok_impl.c"
        var $94=unSign(($93), 8, 0); //@line 695 "xmltok_impl.c"
        var $95=(($91+72)&4294967295); //@line 695 "xmltok_impl.c"
        var $96=(($95+$94)&4294967295); //@line 695 "xmltok_impl.c"
        var $97=HEAP[$96]; //@line 695 "xmltok_impl.c"
        var $98=unSign(($97), 8, 0); //@line 695 "xmltok_impl.c"
        HEAP[$iftmp_689]=$98; //@line 695 "xmltok_impl.c"
        __label__ = 23; break; //@line 695 "xmltok_impl.c"
      case 22: // $bb21
        var $99=HEAP[$ptr_addr]; //@line 695 "xmltok_impl.c"
        var $100=(($99)&4294967295); //@line 695 "xmltok_impl.c"
        var $101=HEAP[$100]; //@line 695 "xmltok_impl.c"
        var $102=reSign(($101), 8, 0); //@line 695 "xmltok_impl.c"
        var $103=HEAP[$ptr_addr]; //@line 695 "xmltok_impl.c"
        var $104=(($103+1)&4294967295); //@line 695 "xmltok_impl.c"
        var $105=HEAP[$104]; //@line 695 "xmltok_impl.c"
        var $106=reSign(($105), 8, 0); //@line 695 "xmltok_impl.c"
        var $107=((($106)) & 255); //@line 695 "xmltok_impl.c"
        var $108=((($102)) & 255); //@line 695 "xmltok_impl.c"
        var $109=_unicode_byte_type($107, $108); //@line 695 "xmltok_impl.c"
        HEAP[$iftmp_689]=$109; //@line 695 "xmltok_impl.c"
        __label__ = 23; break; //@line 695 "xmltok_impl.c"
      case 23: // $bb22
        var $110=HEAP[$iftmp_689]; //@line 695 "xmltok_impl.c"
        if ($110 == 20) {
          __label__ = 25; break;
        }
        else if ($110 == 27) {
          __label__ = 24; break;
        }
        else {
        __label__ = 26; break;
        }
        
      case 24: // $bb23
        var $111=HEAP[$ptr_addr]; //@line 697 "xmltok_impl.c"
        var $112=(($111+2)&4294967295); //@line 697 "xmltok_impl.c"
        var $113=HEAP[$enc_addr]; //@line 697 "xmltok_impl.c"
        var $114=HEAP[$end_addr]; //@line 697 "xmltok_impl.c"
        var $115=HEAP[$nextTokPtr_addr]; //@line 697 "xmltok_impl.c"
        var $116=_little2_scanComment($113, $112, $114, $115); //@line 697 "xmltok_impl.c"
        HEAP[$0]=$116; //@line 697 "xmltok_impl.c"
        __label__ = 79; break; //@line 697 "xmltok_impl.c"
      case 25: // $bb24
        var $117=HEAP[$ptr_addr]; //@line 699 "xmltok_impl.c"
        var $118=(($117+2)&4294967295); //@line 699 "xmltok_impl.c"
        var $119=HEAP[$enc_addr]; //@line 699 "xmltok_impl.c"
        var $120=HEAP[$end_addr]; //@line 699 "xmltok_impl.c"
        var $121=HEAP[$nextTokPtr_addr]; //@line 699 "xmltok_impl.c"
        var $122=_little2_scanCdataSection($119, $118, $120, $121); //@line 699 "xmltok_impl.c"
        HEAP[$0]=$122; //@line 699 "xmltok_impl.c"
        __label__ = 79; break; //@line 699 "xmltok_impl.c"
      case 26: // $bb25
        var $123=HEAP[$nextTokPtr_addr]; //@line 702 "xmltok_impl.c"
        var $124=HEAP[$ptr_addr]; //@line 702 "xmltok_impl.c"
        HEAP[$123]=$124; //@line 702 "xmltok_impl.c"
        HEAP[$0]=0; //@line 703 "xmltok_impl.c"
        __label__ = 79; break; //@line 703 "xmltok_impl.c"
      case 27: // $bb26
        var $125=HEAP[$ptr_addr]; //@line 705 "xmltok_impl.c"
        var $126=(($125+2)&4294967295); //@line 705 "xmltok_impl.c"
        var $127=HEAP[$enc_addr]; //@line 705 "xmltok_impl.c"
        var $128=HEAP[$end_addr]; //@line 705 "xmltok_impl.c"
        var $129=HEAP[$nextTokPtr_addr]; //@line 705 "xmltok_impl.c"
        var $130=_little2_scanPi($127, $126, $128, $129); //@line 705 "xmltok_impl.c"
        HEAP[$0]=$130; //@line 705 "xmltok_impl.c"
        __label__ = 79; break; //@line 705 "xmltok_impl.c"
      case 28: // $bb27
        var $131=HEAP[$ptr_addr]; //@line 707 "xmltok_impl.c"
        var $132=(($131+2)&4294967295); //@line 707 "xmltok_impl.c"
        var $133=HEAP[$enc_addr]; //@line 707 "xmltok_impl.c"
        var $134=HEAP[$end_addr]; //@line 707 "xmltok_impl.c"
        var $135=HEAP[$nextTokPtr_addr]; //@line 707 "xmltok_impl.c"
        var $136=_little2_scanEndTag($133, $132, $134, $135); //@line 707 "xmltok_impl.c"
        HEAP[$0]=$136; //@line 707 "xmltok_impl.c"
        __label__ = 79; break; //@line 707 "xmltok_impl.c"
      case 29: // $bb28
        var $137=HEAP[$nextTokPtr_addr]; //@line 709 "xmltok_impl.c"
        var $138=HEAP[$ptr_addr]; //@line 709 "xmltok_impl.c"
        HEAP[$137]=$138; //@line 709 "xmltok_impl.c"
        HEAP[$0]=0; //@line 710 "xmltok_impl.c"
        __label__ = 79; break; //@line 710 "xmltok_impl.c"
      case 30: // $bb29
        var $139=HEAP[$ptr_addr]; //@line 717 "xmltok_impl.c"
        var $140=(($139+1)&4294967295); //@line 717 "xmltok_impl.c"
        var $141=HEAP[$140]; //@line 717 "xmltok_impl.c"
        var $142=reSign(($141), 8, 0)==0; //@line 717 "xmltok_impl.c"
        if ($142) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 717 "xmltok_impl.c"
      case 31: // $bb30
        var $143=HEAP[$enc_addr]; //@line 717 "xmltok_impl.c"
        var $144=$143; //@line 717 "xmltok_impl.c"
        var $145=HEAP[$ptr_addr]; //@line 717 "xmltok_impl.c"
        var $146=HEAP[$145]; //@line 717 "xmltok_impl.c"
        var $147=unSign(($146), 8, 0); //@line 717 "xmltok_impl.c"
        var $148=(($144+72)&4294967295); //@line 717 "xmltok_impl.c"
        var $149=(($148+$147)&4294967295); //@line 717 "xmltok_impl.c"
        var $150=HEAP[$149]; //@line 717 "xmltok_impl.c"
        var $151=unSign(($150), 8, 0); //@line 717 "xmltok_impl.c"
        HEAP[$iftmp_691]=$151; //@line 717 "xmltok_impl.c"
        __label__ = 33; break; //@line 717 "xmltok_impl.c"
      case 32: // $bb31
        var $152=HEAP[$ptr_addr]; //@line 717 "xmltok_impl.c"
        var $153=(($152)&4294967295); //@line 717 "xmltok_impl.c"
        var $154=HEAP[$153]; //@line 717 "xmltok_impl.c"
        var $155=reSign(($154), 8, 0); //@line 717 "xmltok_impl.c"
        var $156=HEAP[$ptr_addr]; //@line 717 "xmltok_impl.c"
        var $157=(($156+1)&4294967295); //@line 717 "xmltok_impl.c"
        var $158=HEAP[$157]; //@line 717 "xmltok_impl.c"
        var $159=reSign(($158), 8, 0); //@line 717 "xmltok_impl.c"
        var $160=((($159)) & 255); //@line 717 "xmltok_impl.c"
        var $161=((($155)) & 255); //@line 717 "xmltok_impl.c"
        var $162=_unicode_byte_type($160, $161); //@line 717 "xmltok_impl.c"
        HEAP[$iftmp_691]=$162; //@line 717 "xmltok_impl.c"
        __label__ = 33; break; //@line 717 "xmltok_impl.c"
      case 33: // $bb32
        var $163=HEAP[$iftmp_691]; //@line 717 "xmltok_impl.c"
        if ($163 == 5) {
          __label__ = 37; break;
        }
        else if ($163 == 6) {
          __label__ = 40; break;
        }
        else if ($163 == 7) {
          __label__ = 43; break;
        }
        else if ($163 == 9) {
          __label__ = 46; break;
        }
        else if ($163 == 10) {
          __label__ = 46; break;
        }
        else if ($163 == 11) {
          __label__ = 69; break;
        }
        else if ($163 == 17) {
          __label__ = 70; break;
        }
        else if ($163 == 21) {
          __label__ = 46; break;
        }
        else if ($163 == 22) {
          __label__ = 36; break;
        }
        else if ($163 == 24) {
          __label__ = 36; break;
        }
        else if ($163 == 25) {
          __label__ = 36; break;
        }
        else if ($163 == 26) {
          __label__ = 36; break;
        }
        else if ($163 == 27) {
          __label__ = 36; break;
        }
        else if ($163 == 29) {
          __label__ = 34; break;
        }
        else {
        __label__ = 76; break;
        }
        
      case 34: // $bb33
        var $164=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        var $165=(($164+1)&4294967295); //@line 718 "xmltok_impl.c"
        var $166=HEAP[$165]; //@line 718 "xmltok_impl.c"
        var $167=unSign(($166), 8, 0); //@line 718 "xmltok_impl.c"
        var $168=((_namePages+$167)&4294967295); //@line 718 "xmltok_impl.c"
        var $169=HEAP[$168]; //@line 718 "xmltok_impl.c"
        var $170=unSign(($169), 8, 0); //@line 718 "xmltok_impl.c"
        var $171=($170) << 3; //@line 718 "xmltok_impl.c"
        var $172=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        var $173=(($172)&4294967295); //@line 718 "xmltok_impl.c"
        var $174=HEAP[$173]; //@line 718 "xmltok_impl.c"
        var $175=unSign(($174), 8, 0) >>> 5; //@line 718 "xmltok_impl.c"
        var $176=unSign(($175), 8, 0); //@line 718 "xmltok_impl.c"
        var $177=((($171) + ($176))&4294967295); //@line 718 "xmltok_impl.c"
        var $178=((_namingBitmap+$177*4)&4294967295); //@line 718 "xmltok_impl.c"
        var $179=HEAP[$178]; //@line 718 "xmltok_impl.c"
        var $180=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        var $181=(($180)&4294967295); //@line 718 "xmltok_impl.c"
        var $182=HEAP[$181]; //@line 718 "xmltok_impl.c"
        var $183=unSign(($182), 8, 0); //@line 718 "xmltok_impl.c"
        var $184=($183) & 31; //@line 718 "xmltok_impl.c"
        var $185=1 << ($184); //@line 718 "xmltok_impl.c"
        var $186=($179) & ($185); //@line 718 "xmltok_impl.c"
        var $187=((($186))|0)==0; //@line 718 "xmltok_impl.c"
        if ($187) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 718 "xmltok_impl.c"
      case 35: // $bb34
        var $188=HEAP[$nextTokPtr_addr]; //@line 718 "xmltok_impl.c"
        var $189=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        HEAP[$188]=$189; //@line 718 "xmltok_impl.c"
        HEAP[$0]=0; //@line 718 "xmltok_impl.c"
        __label__ = 79; break; //@line 718 "xmltok_impl.c"
      case 36: // $bb35
        var $190=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        var $191=(($190+2)&4294967295); //@line 718 "xmltok_impl.c"
        HEAP[$ptr_addr]=$191; //@line 718 "xmltok_impl.c"
        __label__ = 77; break; //@line 718 "xmltok_impl.c"
      case 37: // $bb36
        var $192=HEAP[$end_addr]; //@line 718 "xmltok_impl.c"
        var $193=($192); //@line 718 "xmltok_impl.c"
        var $194=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        var $195=($194); //@line 718 "xmltok_impl.c"
        var $196=((($193) - ($195))&4294967295); //@line 718 "xmltok_impl.c"
        var $197=((($196))|0) <= 1; //@line 718 "xmltok_impl.c"
        if ($197) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 718 "xmltok_impl.c"
      case 38: // $bb37
        HEAP[$0]=-2; //@line 718 "xmltok_impl.c"
        __label__ = 79; break; //@line 718 "xmltok_impl.c"
      case 39: // $bb38
        var $198=HEAP[$nextTokPtr_addr]; //@line 718 "xmltok_impl.c"
        var $199=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        HEAP[$198]=$199; //@line 718 "xmltok_impl.c"
        HEAP[$0]=0; //@line 718 "xmltok_impl.c"
        __label__ = 79; break; //@line 718 "xmltok_impl.c"
      case 40: // $bb39
        var $200=HEAP[$end_addr]; //@line 718 "xmltok_impl.c"
        var $201=($200); //@line 718 "xmltok_impl.c"
        var $202=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        var $203=($202); //@line 718 "xmltok_impl.c"
        var $204=((($201) - ($203))&4294967295); //@line 718 "xmltok_impl.c"
        var $205=((($204))|0) <= 2; //@line 718 "xmltok_impl.c"
        if ($205) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 718 "xmltok_impl.c"
      case 41: // $bb40
        HEAP[$0]=-2; //@line 718 "xmltok_impl.c"
        __label__ = 79; break; //@line 718 "xmltok_impl.c"
      case 42: // $bb41
        var $206=HEAP[$nextTokPtr_addr]; //@line 718 "xmltok_impl.c"
        var $207=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        HEAP[$206]=$207; //@line 718 "xmltok_impl.c"
        HEAP[$0]=0; //@line 718 "xmltok_impl.c"
        __label__ = 79; break; //@line 718 "xmltok_impl.c"
      case 43: // $bb42
        var $208=HEAP[$end_addr]; //@line 718 "xmltok_impl.c"
        var $209=($208); //@line 718 "xmltok_impl.c"
        var $210=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        var $211=($210); //@line 718 "xmltok_impl.c"
        var $212=((($209) - ($211))&4294967295); //@line 718 "xmltok_impl.c"
        var $213=((($212))|0) <= 3; //@line 718 "xmltok_impl.c"
        if ($213) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 718 "xmltok_impl.c"
      case 44: // $bb43
        HEAP[$0]=-2; //@line 718 "xmltok_impl.c"
        __label__ = 79; break; //@line 718 "xmltok_impl.c"
      case 45: // $bb44
        var $214=HEAP[$nextTokPtr_addr]; //@line 718 "xmltok_impl.c"
        var $215=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        HEAP[$214]=$215; //@line 718 "xmltok_impl.c"
        HEAP[$0]=0; //@line 718 "xmltok_impl.c"
        __label__ = 79; break; //@line 718 "xmltok_impl.c"
      case 46: // $bb45
        var $216=HEAP[$ptr_addr]; //@line 739 "xmltok_impl.c"
        var $217=(($216+2)&4294967295); //@line 739 "xmltok_impl.c"
        HEAP[$ptr_addr]=$217; //@line 739 "xmltok_impl.c"
        __label__ = 67; break; //@line 739 "xmltok_impl.c"
      case 47: // $bb46
        var $218=HEAP[$ptr_addr]; //@line 741 "xmltok_impl.c"
        var $219=(($218+1)&4294967295); //@line 741 "xmltok_impl.c"
        var $220=HEAP[$219]; //@line 741 "xmltok_impl.c"
        var $221=reSign(($220), 8, 0)==0; //@line 741 "xmltok_impl.c"
        if ($221) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 741 "xmltok_impl.c"
      case 48: // $bb47
        var $222=HEAP[$enc_addr]; //@line 741 "xmltok_impl.c"
        var $223=$222; //@line 741 "xmltok_impl.c"
        var $224=HEAP[$ptr_addr]; //@line 741 "xmltok_impl.c"
        var $225=HEAP[$224]; //@line 741 "xmltok_impl.c"
        var $226=unSign(($225), 8, 0); //@line 741 "xmltok_impl.c"
        var $227=(($223+72)&4294967295); //@line 741 "xmltok_impl.c"
        var $228=(($227+$226)&4294967295); //@line 741 "xmltok_impl.c"
        var $229=HEAP[$228]; //@line 741 "xmltok_impl.c"
        var $230=unSign(($229), 8, 0); //@line 741 "xmltok_impl.c"
        HEAP[$iftmp_699]=$230; //@line 741 "xmltok_impl.c"
        __label__ = 50; break; //@line 741 "xmltok_impl.c"
      case 49: // $bb48
        var $231=HEAP[$ptr_addr]; //@line 741 "xmltok_impl.c"
        var $232=(($231)&4294967295); //@line 741 "xmltok_impl.c"
        var $233=HEAP[$232]; //@line 741 "xmltok_impl.c"
        var $234=reSign(($233), 8, 0); //@line 741 "xmltok_impl.c"
        var $235=HEAP[$ptr_addr]; //@line 741 "xmltok_impl.c"
        var $236=(($235+1)&4294967295); //@line 741 "xmltok_impl.c"
        var $237=HEAP[$236]; //@line 741 "xmltok_impl.c"
        var $238=reSign(($237), 8, 0); //@line 741 "xmltok_impl.c"
        var $239=((($238)) & 255); //@line 741 "xmltok_impl.c"
        var $240=((($234)) & 255); //@line 741 "xmltok_impl.c"
        var $241=_unicode_byte_type($239, $240); //@line 741 "xmltok_impl.c"
        HEAP[$iftmp_699]=$241; //@line 741 "xmltok_impl.c"
        __label__ = 50; break; //@line 741 "xmltok_impl.c"
      case 50: // $bb49
        var $242=HEAP[$iftmp_699]; //@line 741 "xmltok_impl.c"
        if ($242 == 5) {
          __label__ = 54; break;
        }
        else if ($242 == 6) {
          __label__ = 57; break;
        }
        else if ($242 == 7) {
          __label__ = 60; break;
        }
        else if ($242 == 9) {
          __label__ = 65; break;
        }
        else if ($242 == 10) {
          __label__ = 65; break;
        }
        else if ($242 == 11) {
          __label__ = 63; break;
        }
        else if ($242 == 17) {
          __label__ = 64; break;
        }
        else if ($242 == 21) {
          __label__ = 65; break;
        }
        else if ($242 == 22) {
          __label__ = 53; break;
        }
        else if ($242 == 24) {
          __label__ = 53; break;
        }
        else if ($242 == 29) {
          __label__ = 51; break;
        }
        else {
        __label__ = 66; break;
        }
        
      case 51: // $bb50
        var $243=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        var $244=(($243+1)&4294967295); //@line 742 "xmltok_impl.c"
        var $245=HEAP[$244]; //@line 742 "xmltok_impl.c"
        var $246=unSign(($245), 8, 0); //@line 742 "xmltok_impl.c"
        var $247=((_nmstrtPages+$246)&4294967295); //@line 742 "xmltok_impl.c"
        var $248=HEAP[$247]; //@line 742 "xmltok_impl.c"
        var $249=unSign(($248), 8, 0); //@line 742 "xmltok_impl.c"
        var $250=($249) << 3; //@line 742 "xmltok_impl.c"
        var $251=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        var $252=(($251)&4294967295); //@line 742 "xmltok_impl.c"
        var $253=HEAP[$252]; //@line 742 "xmltok_impl.c"
        var $254=unSign(($253), 8, 0) >>> 5; //@line 742 "xmltok_impl.c"
        var $255=unSign(($254), 8, 0); //@line 742 "xmltok_impl.c"
        var $256=((($250) + ($255))&4294967295); //@line 742 "xmltok_impl.c"
        var $257=((_namingBitmap+$256*4)&4294967295); //@line 742 "xmltok_impl.c"
        var $258=HEAP[$257]; //@line 742 "xmltok_impl.c"
        var $259=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        var $260=(($259)&4294967295); //@line 742 "xmltok_impl.c"
        var $261=HEAP[$260]; //@line 742 "xmltok_impl.c"
        var $262=unSign(($261), 8, 0); //@line 742 "xmltok_impl.c"
        var $263=($262) & 31; //@line 742 "xmltok_impl.c"
        var $264=1 << ($263); //@line 742 "xmltok_impl.c"
        var $265=($258) & ($264); //@line 742 "xmltok_impl.c"
        var $266=((($265))|0)==0; //@line 742 "xmltok_impl.c"
        if ($266) { __label__ = 52; break; } else { __label__ = 53; break; } //@line 742 "xmltok_impl.c"
      case 52: // $bb51
        var $267=HEAP[$nextTokPtr_addr]; //@line 742 "xmltok_impl.c"
        var $268=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        HEAP[$267]=$268; //@line 742 "xmltok_impl.c"
        HEAP[$0]=0; //@line 742 "xmltok_impl.c"
        __label__ = 79; break; //@line 742 "xmltok_impl.c"
      case 53: // $bb52
        var $269=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        var $270=(($269+2)&4294967295); //@line 742 "xmltok_impl.c"
        HEAP[$ptr_addr]=$270; //@line 742 "xmltok_impl.c"
        var $271=HEAP[$enc_addr]; //@line 754 "xmltok_impl.c"
        var $272=HEAP[$ptr_addr]; //@line 754 "xmltok_impl.c"
        var $273=HEAP[$end_addr]; //@line 754 "xmltok_impl.c"
        var $274=HEAP[$nextTokPtr_addr]; //@line 754 "xmltok_impl.c"
        var $275=_little2_scanAtts($271, $272, $273, $274); //@line 754 "xmltok_impl.c"
        HEAP[$0]=$275; //@line 754 "xmltok_impl.c"
        __label__ = 79; break; //@line 754 "xmltok_impl.c"
      case 54: // $bb53
        var $276=HEAP[$end_addr]; //@line 742 "xmltok_impl.c"
        var $277=($276); //@line 742 "xmltok_impl.c"
        var $278=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        var $279=($278); //@line 742 "xmltok_impl.c"
        var $280=((($277) - ($279))&4294967295); //@line 742 "xmltok_impl.c"
        var $281=((($280))|0) <= 1; //@line 742 "xmltok_impl.c"
        if ($281) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 742 "xmltok_impl.c"
      case 55: // $bb54
        HEAP[$0]=-2; //@line 742 "xmltok_impl.c"
        __label__ = 79; break; //@line 742 "xmltok_impl.c"
      case 56: // $bb55
        var $282=HEAP[$nextTokPtr_addr]; //@line 742 "xmltok_impl.c"
        var $283=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        HEAP[$282]=$283; //@line 742 "xmltok_impl.c"
        HEAP[$0]=0; //@line 742 "xmltok_impl.c"
        __label__ = 79; break; //@line 742 "xmltok_impl.c"
      case 57: // $bb56
        var $284=HEAP[$end_addr]; //@line 742 "xmltok_impl.c"
        var $285=($284); //@line 742 "xmltok_impl.c"
        var $286=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        var $287=($286); //@line 742 "xmltok_impl.c"
        var $288=((($285) - ($287))&4294967295); //@line 742 "xmltok_impl.c"
        var $289=((($288))|0) <= 2; //@line 742 "xmltok_impl.c"
        if ($289) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 742 "xmltok_impl.c"
      case 58: // $bb57
        HEAP[$0]=-2; //@line 742 "xmltok_impl.c"
        __label__ = 79; break; //@line 742 "xmltok_impl.c"
      case 59: // $bb58
        var $290=HEAP[$nextTokPtr_addr]; //@line 742 "xmltok_impl.c"
        var $291=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        HEAP[$290]=$291; //@line 742 "xmltok_impl.c"
        HEAP[$0]=0; //@line 742 "xmltok_impl.c"
        __label__ = 79; break; //@line 742 "xmltok_impl.c"
      case 60: // $bb59
        var $292=HEAP[$end_addr]; //@line 742 "xmltok_impl.c"
        var $293=($292); //@line 742 "xmltok_impl.c"
        var $294=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        var $295=($294); //@line 742 "xmltok_impl.c"
        var $296=((($293) - ($295))&4294967295); //@line 742 "xmltok_impl.c"
        var $297=((($296))|0) <= 3; //@line 742 "xmltok_impl.c"
        if ($297) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 742 "xmltok_impl.c"
      case 61: // $bb60
        HEAP[$0]=-2; //@line 742 "xmltok_impl.c"
        __label__ = 79; break; //@line 742 "xmltok_impl.c"
      case 62: // $bb61
        var $298=HEAP[$nextTokPtr_addr]; //@line 742 "xmltok_impl.c"
        var $299=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        HEAP[$298]=$299; //@line 742 "xmltok_impl.c"
        HEAP[$0]=0; //@line 742 "xmltok_impl.c"
        __label__ = 79; break; //@line 742 "xmltok_impl.c"
      case 63: // $bb62
        __label__ = 69; break; //@line 742 "xmltok_impl.c"
      case 64: // $bb63
        __label__ = 70; break; //@line 742 "xmltok_impl.c"
      case 65: // $bb64
        var $300=HEAP[$ptr_addr]; //@line 748 "xmltok_impl.c"
        var $301=(($300+2)&4294967295); //@line 748 "xmltok_impl.c"
        HEAP[$ptr_addr]=$301; //@line 748 "xmltok_impl.c"
        __label__ = 67; break; //@line 748 "xmltok_impl.c"
      case 66: // $bb65
        var $302=HEAP[$nextTokPtr_addr]; //@line 751 "xmltok_impl.c"
        var $303=HEAP[$ptr_addr]; //@line 751 "xmltok_impl.c"
        HEAP[$302]=$303; //@line 751 "xmltok_impl.c"
        HEAP[$0]=0; //@line 752 "xmltok_impl.c"
        __label__ = 79; break; //@line 752 "xmltok_impl.c"
      case 67: // $bb66
        var $304=HEAP[$ptr_addr]; //@line 740 "xmltok_impl.c"
        var $305=HEAP[$end_addr]; //@line 740 "xmltok_impl.c"
        var $306=($304)!=($305); //@line 740 "xmltok_impl.c"
        if ($306) { __label__ = 47; break; } else { __label__ = 68; break; } //@line 740 "xmltok_impl.c"
      case 68: // $bb67
        HEAP[$0]=-1; //@line 756 "xmltok_impl.c"
        __label__ = 79; break; //@line 756 "xmltok_impl.c"
      case 69: // $gt
        var $307=HEAP[$ptr_addr]; //@line 760 "xmltok_impl.c"
        var $308=(($307+2)&4294967295); //@line 760 "xmltok_impl.c"
        var $309=HEAP[$nextTokPtr_addr]; //@line 760 "xmltok_impl.c"
        HEAP[$309]=$308; //@line 760 "xmltok_impl.c"
        HEAP[$0]=2; //@line 761 "xmltok_impl.c"
        __label__ = 79; break; //@line 761 "xmltok_impl.c"
      case 70: // $sol
        var $310=HEAP[$ptr_addr]; //@line 764 "xmltok_impl.c"
        var $311=(($310+2)&4294967295); //@line 764 "xmltok_impl.c"
        HEAP[$ptr_addr]=$311; //@line 764 "xmltok_impl.c"
        var $312=HEAP[$ptr_addr]; //@line 765 "xmltok_impl.c"
        var $313=HEAP[$end_addr]; //@line 765 "xmltok_impl.c"
        var $314=($312)==($313); //@line 765 "xmltok_impl.c"
        if ($314) { __label__ = 71; break; } else { __label__ = 72; break; } //@line 765 "xmltok_impl.c"
      case 71: // $bb68
        HEAP[$0]=-1; //@line 766 "xmltok_impl.c"
        __label__ = 79; break; //@line 766 "xmltok_impl.c"
      case 72: // $bb69
        var $315=HEAP[$ptr_addr]; //@line 767 "xmltok_impl.c"
        var $316=(($315+1)&4294967295); //@line 767 "xmltok_impl.c"
        var $317=HEAP[$316]; //@line 767 "xmltok_impl.c"
        var $318=reSign(($317), 8, 0)!=0; //@line 767 "xmltok_impl.c"
        if ($318) { __label__ = 74; break; } else { __label__ = 73; break; } //@line 767 "xmltok_impl.c"
      case 73: // $bb70
        var $319=HEAP[$ptr_addr]; //@line 767 "xmltok_impl.c"
        var $320=(($319)&4294967295); //@line 767 "xmltok_impl.c"
        var $321=HEAP[$320]; //@line 767 "xmltok_impl.c"
        var $322=reSign(($321), 8, 0)!=62; //@line 767 "xmltok_impl.c"
        if ($322) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 767 "xmltok_impl.c"
      case 74: // $bb71
        var $323=HEAP[$nextTokPtr_addr]; //@line 768 "xmltok_impl.c"
        var $324=HEAP[$ptr_addr]; //@line 768 "xmltok_impl.c"
        HEAP[$323]=$324; //@line 768 "xmltok_impl.c"
        HEAP[$0]=0; //@line 769 "xmltok_impl.c"
        __label__ = 79; break; //@line 769 "xmltok_impl.c"
      case 75: // $bb72
        var $325=HEAP[$ptr_addr]; //@line 771 "xmltok_impl.c"
        var $326=(($325+2)&4294967295); //@line 771 "xmltok_impl.c"
        var $327=HEAP[$nextTokPtr_addr]; //@line 771 "xmltok_impl.c"
        HEAP[$327]=$326; //@line 771 "xmltok_impl.c"
        HEAP[$0]=4; //@line 772 "xmltok_impl.c"
        __label__ = 79; break; //@line 772 "xmltok_impl.c"
      case 76: // $bb73
        var $328=HEAP[$nextTokPtr_addr]; //@line 774 "xmltok_impl.c"
        var $329=HEAP[$ptr_addr]; //@line 774 "xmltok_impl.c"
        HEAP[$328]=$329; //@line 774 "xmltok_impl.c"
        HEAP[$0]=0; //@line 775 "xmltok_impl.c"
        __label__ = 79; break; //@line 775 "xmltok_impl.c"
      case 77: // $bb74
        var $330=HEAP[$ptr_addr]; //@line 716 "xmltok_impl.c"
        var $331=HEAP[$end_addr]; //@line 716 "xmltok_impl.c"
        var $332=($330)!=($331); //@line 716 "xmltok_impl.c"
        if ($332) { __label__ = 30; break; } else { __label__ = 78; break; } //@line 716 "xmltok_impl.c"
      case 78: // $bb75
        HEAP[$0]=-1; //@line 778 "xmltok_impl.c"
        __label__ = 79; break; //@line 778 "xmltok_impl.c"
      case 79: // $bb76
        var $333=HEAP[$0]; //@line 689 "xmltok_impl.c"
        HEAP[$retval]=$333; //@line 689 "xmltok_impl.c"
        __label__ = 80; break; //@line 689 "xmltok_impl.c"
      case 80: // $return
        var $retval77=HEAP[$retval]; //@line 689 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval77; //@line 689 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_contentTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 37; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 37);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_720=__stackBase__+20;
        var $iftmp_712=__stackBase__+24;
        var $iftmp_710=__stackBase__+25;
        var $0=__stackBase__+29;
        var $n=__stackBase__+33;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 785 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 785 "xmltok_impl.c"
        var $3=($1)==($2); //@line 785 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 785 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-4; //@line 786 "xmltok_impl.c"
        __label__ = 69; break; //@line 786 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$end_addr]; //@line 788 "xmltok_impl.c"
        var $5=($4); //@line 788 "xmltok_impl.c"
        var $6=HEAP[$ptr_addr]; //@line 788 "xmltok_impl.c"
        var $7=($6); //@line 788 "xmltok_impl.c"
        var $8=((($5) - ($7))&4294967295); //@line 788 "xmltok_impl.c"
        HEAP[$n]=$8; //@line 788 "xmltok_impl.c"
        var $9=HEAP[$n]; //@line 789 "xmltok_impl.c"
        var $10=($9) & 1; //@line 789 "xmltok_impl.c"
        var $11=((($10)) & 255); //@line 789 "xmltok_impl.c"
        var $toBool=reSign(($11), 8, 0)!=0; //@line 789 "xmltok_impl.c"
        if ($toBool) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 789 "xmltok_impl.c"
      case 3: // $bb2
        var $12=HEAP[$n]; //@line 790 "xmltok_impl.c"
        var $13=($12) & -2; //@line 790 "xmltok_impl.c"
        HEAP[$n]=$13; //@line 790 "xmltok_impl.c"
        var $14=HEAP[$n]; //@line 791 "xmltok_impl.c"
        var $15=((($14))|0)==0; //@line 791 "xmltok_impl.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 791 "xmltok_impl.c"
      case 4: // $bb3
        HEAP[$0]=-1; //@line 792 "xmltok_impl.c"
        __label__ = 69; break; //@line 792 "xmltok_impl.c"
      case 5: // $bb4
        var $16=HEAP[$ptr_addr]; //@line 793 "xmltok_impl.c"
        var $17=HEAP[$n]; //@line 793 "xmltok_impl.c"
        var $18=(($16+$17)&4294967295); //@line 793 "xmltok_impl.c"
        HEAP[$end_addr]=$18; //@line 793 "xmltok_impl.c"
        __label__ = 6; break; //@line 793 "xmltok_impl.c"
      case 6: // $bb5
        var $19=HEAP[$ptr_addr]; //@line 796 "xmltok_impl.c"
        var $20=(($19+1)&4294967295); //@line 796 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 796 "xmltok_impl.c"
        var $22=reSign(($21), 8, 0)==0; //@line 796 "xmltok_impl.c"
        if ($22) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 796 "xmltok_impl.c"
      case 7: // $bb6
        var $23=HEAP[$enc_addr]; //@line 796 "xmltok_impl.c"
        var $24=$23; //@line 796 "xmltok_impl.c"
        var $25=HEAP[$ptr_addr]; //@line 796 "xmltok_impl.c"
        var $26=HEAP[$25]; //@line 796 "xmltok_impl.c"
        var $27=unSign(($26), 8, 0); //@line 796 "xmltok_impl.c"
        var $28=(($24+72)&4294967295); //@line 796 "xmltok_impl.c"
        var $29=(($28+$27)&4294967295); //@line 796 "xmltok_impl.c"
        var $30=HEAP[$29]; //@line 796 "xmltok_impl.c"
        var $31=unSign(($30), 8, 0); //@line 796 "xmltok_impl.c"
        HEAP[$iftmp_710]=$31; //@line 796 "xmltok_impl.c"
        __label__ = 9; break; //@line 796 "xmltok_impl.c"
      case 8: // $bb7
        var $32=HEAP[$ptr_addr]; //@line 796 "xmltok_impl.c"
        var $33=(($32)&4294967295); //@line 796 "xmltok_impl.c"
        var $34=HEAP[$33]; //@line 796 "xmltok_impl.c"
        var $35=reSign(($34), 8, 0); //@line 796 "xmltok_impl.c"
        var $36=HEAP[$ptr_addr]; //@line 796 "xmltok_impl.c"
        var $37=(($36+1)&4294967295); //@line 796 "xmltok_impl.c"
        var $38=HEAP[$37]; //@line 796 "xmltok_impl.c"
        var $39=reSign(($38), 8, 0); //@line 796 "xmltok_impl.c"
        var $40=((($39)) & 255); //@line 796 "xmltok_impl.c"
        var $41=((($35)) & 255); //@line 796 "xmltok_impl.c"
        var $42=_unicode_byte_type($40, $41); //@line 796 "xmltok_impl.c"
        HEAP[$iftmp_710]=$42; //@line 796 "xmltok_impl.c"
        __label__ = 9; break; //@line 796 "xmltok_impl.c"
      case 9: // $bb8
        var $43=HEAP[$iftmp_710]; //@line 796 "xmltok_impl.c"
        if ($43 == 0) {
          __label__ = 40; break;
        }
        else if ($43 == 1) {
          __label__ = 40; break;
        }
        else if ($43 == 2) {
          __label__ = 10; break;
        }
        else if ($43 == 3) {
          __label__ = 11; break;
        }
        else if ($43 == 4) {
          __label__ = 21; break;
        }
        else if ($43 == 5) {
          __label__ = 31; break;
        }
        else if ($43 == 6) {
          __label__ = 34; break;
        }
        else if ($43 == 7) {
          __label__ = 37; break;
        }
        else if ($43 == 8) {
          __label__ = 40; break;
        }
        else if ($43 == 9) {
          __label__ = 12; break;
        }
        else if ($43 == 10) {
          __label__ = 20; break;
        }
        else {
        __label__ = 41; break;
        }
        
      case 10: // $bb9
        var $44=HEAP[$ptr_addr]; //@line 798 "xmltok_impl.c"
        var $45=(($44+2)&4294967295); //@line 798 "xmltok_impl.c"
        var $46=HEAP[$enc_addr]; //@line 798 "xmltok_impl.c"
        var $47=HEAP[$end_addr]; //@line 798 "xmltok_impl.c"
        var $48=HEAP[$nextTokPtr_addr]; //@line 798 "xmltok_impl.c"
        var $49=_little2_scanLt($46, $45, $47, $48); //@line 798 "xmltok_impl.c"
        HEAP[$0]=$49; //@line 798 "xmltok_impl.c"
        __label__ = 69; break; //@line 798 "xmltok_impl.c"
      case 11: // $bb10
        var $50=HEAP[$ptr_addr]; //@line 800 "xmltok_impl.c"
        var $51=(($50+2)&4294967295); //@line 800 "xmltok_impl.c"
        var $52=HEAP[$enc_addr]; //@line 800 "xmltok_impl.c"
        var $53=HEAP[$end_addr]; //@line 800 "xmltok_impl.c"
        var $54=HEAP[$nextTokPtr_addr]; //@line 800 "xmltok_impl.c"
        var $55=_little2_scanRef($52, $51, $53, $54); //@line 800 "xmltok_impl.c"
        HEAP[$0]=$55; //@line 800 "xmltok_impl.c"
        __label__ = 69; break; //@line 800 "xmltok_impl.c"
      case 12: // $bb11
        var $56=HEAP[$ptr_addr]; //@line 802 "xmltok_impl.c"
        var $57=(($56+2)&4294967295); //@line 802 "xmltok_impl.c"
        HEAP[$ptr_addr]=$57; //@line 802 "xmltok_impl.c"
        var $58=HEAP[$ptr_addr]; //@line 803 "xmltok_impl.c"
        var $59=HEAP[$end_addr]; //@line 803 "xmltok_impl.c"
        var $60=($58)==($59); //@line 803 "xmltok_impl.c"
        if ($60) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 803 "xmltok_impl.c"
      case 13: // $bb12
        HEAP[$0]=-3; //@line 804 "xmltok_impl.c"
        __label__ = 69; break; //@line 804 "xmltok_impl.c"
      case 14: // $bb13
        var $61=HEAP[$ptr_addr]; //@line 805 "xmltok_impl.c"
        var $62=(($61+1)&4294967295); //@line 805 "xmltok_impl.c"
        var $63=HEAP[$62]; //@line 805 "xmltok_impl.c"
        var $64=reSign(($63), 8, 0)==0; //@line 805 "xmltok_impl.c"
        if ($64) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 805 "xmltok_impl.c"
      case 15: // $bb14
        var $65=HEAP[$enc_addr]; //@line 805 "xmltok_impl.c"
        var $66=$65; //@line 805 "xmltok_impl.c"
        var $67=HEAP[$ptr_addr]; //@line 805 "xmltok_impl.c"
        var $68=HEAP[$67]; //@line 805 "xmltok_impl.c"
        var $69=unSign(($68), 8, 0); //@line 805 "xmltok_impl.c"
        var $70=(($66+72)&4294967295); //@line 805 "xmltok_impl.c"
        var $71=(($70+$69)&4294967295); //@line 805 "xmltok_impl.c"
        var $72=HEAP[$71]; //@line 805 "xmltok_impl.c"
        var $73=reSign(($72), 8, 0)==10; //@line 805 "xmltok_impl.c"
        var $74=unSign(($73), 1, 0); //@line 805 "xmltok_impl.c"
        HEAP[$iftmp_712]=$74; //@line 805 "xmltok_impl.c"
        __label__ = 17; break; //@line 805 "xmltok_impl.c"
      case 16: // $bb15
        var $75=HEAP[$ptr_addr]; //@line 805 "xmltok_impl.c"
        var $76=(($75)&4294967295); //@line 805 "xmltok_impl.c"
        var $77=HEAP[$76]; //@line 805 "xmltok_impl.c"
        var $78=reSign(($77), 8, 0); //@line 805 "xmltok_impl.c"
        var $79=HEAP[$ptr_addr]; //@line 805 "xmltok_impl.c"
        var $80=(($79+1)&4294967295); //@line 805 "xmltok_impl.c"
        var $81=HEAP[$80]; //@line 805 "xmltok_impl.c"
        var $82=reSign(($81), 8, 0); //@line 805 "xmltok_impl.c"
        var $83=((($82)) & 255); //@line 805 "xmltok_impl.c"
        var $84=((($78)) & 255); //@line 805 "xmltok_impl.c"
        var $85=_unicode_byte_type($83, $84); //@line 805 "xmltok_impl.c"
        var $86=((($85))|0)==10; //@line 805 "xmltok_impl.c"
        var $87=unSign(($86), 1, 0); //@line 805 "xmltok_impl.c"
        HEAP[$iftmp_712]=$87; //@line 805 "xmltok_impl.c"
        __label__ = 17; break; //@line 805 "xmltok_impl.c"
      case 17: // $bb16
        var $88=HEAP[$iftmp_712]; //@line 805 "xmltok_impl.c"
        var $toBool17=reSign(($88), 8, 0)!=0; //@line 805 "xmltok_impl.c"
        if ($toBool17) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 805 "xmltok_impl.c"
      case 18: // $bb18
        var $89=HEAP[$ptr_addr]; //@line 806 "xmltok_impl.c"
        var $90=(($89+2)&4294967295); //@line 806 "xmltok_impl.c"
        HEAP[$ptr_addr]=$90; //@line 806 "xmltok_impl.c"
        __label__ = 19; break; //@line 806 "xmltok_impl.c"
      case 19: // $bb19
        var $91=HEAP[$nextTokPtr_addr]; //@line 807 "xmltok_impl.c"
        var $92=HEAP[$ptr_addr]; //@line 807 "xmltok_impl.c"
        HEAP[$91]=$92; //@line 807 "xmltok_impl.c"
        HEAP[$0]=7; //@line 808 "xmltok_impl.c"
        __label__ = 69; break; //@line 808 "xmltok_impl.c"
      case 20: // $bb20
        var $93=HEAP[$ptr_addr]; //@line 810 "xmltok_impl.c"
        var $94=(($93+2)&4294967295); //@line 810 "xmltok_impl.c"
        var $95=HEAP[$nextTokPtr_addr]; //@line 810 "xmltok_impl.c"
        HEAP[$95]=$94; //@line 810 "xmltok_impl.c"
        HEAP[$0]=7; //@line 811 "xmltok_impl.c"
        __label__ = 69; break; //@line 811 "xmltok_impl.c"
      case 21: // $bb21
        var $96=HEAP[$ptr_addr]; //@line 813 "xmltok_impl.c"
        var $97=(($96+2)&4294967295); //@line 813 "xmltok_impl.c"
        HEAP[$ptr_addr]=$97; //@line 813 "xmltok_impl.c"
        var $98=HEAP[$ptr_addr]; //@line 814 "xmltok_impl.c"
        var $99=HEAP[$end_addr]; //@line 814 "xmltok_impl.c"
        var $100=($98)==($99); //@line 814 "xmltok_impl.c"
        if ($100) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 814 "xmltok_impl.c"
      case 22: // $bb22
        HEAP[$0]=-5; //@line 815 "xmltok_impl.c"
        __label__ = 69; break; //@line 815 "xmltok_impl.c"
      case 23: // $bb23
        var $101=HEAP[$ptr_addr]; //@line 816 "xmltok_impl.c"
        var $102=(($101+1)&4294967295); //@line 816 "xmltok_impl.c"
        var $103=HEAP[$102]; //@line 816 "xmltok_impl.c"
        var $104=reSign(($103), 8, 0)!=0; //@line 816 "xmltok_impl.c"
        if ($104) { __label__ = 42; break; } else { __label__ = 24; break; } //@line 816 "xmltok_impl.c"
      case 24: // $bb24
        var $105=HEAP[$ptr_addr]; //@line 816 "xmltok_impl.c"
        var $106=(($105)&4294967295); //@line 816 "xmltok_impl.c"
        var $107=HEAP[$106]; //@line 816 "xmltok_impl.c"
        var $108=reSign(($107), 8, 0)!=93; //@line 816 "xmltok_impl.c"
        if ($108) { __label__ = 42; break; } else { __label__ = 25; break; } //@line 816 "xmltok_impl.c"
      case 25: // $bb25
        var $109=HEAP[$ptr_addr]; //@line 818 "xmltok_impl.c"
        var $110=(($109+2)&4294967295); //@line 818 "xmltok_impl.c"
        HEAP[$ptr_addr]=$110; //@line 818 "xmltok_impl.c"
        var $111=HEAP[$ptr_addr]; //@line 819 "xmltok_impl.c"
        var $112=HEAP[$end_addr]; //@line 819 "xmltok_impl.c"
        var $113=($111)==($112); //@line 819 "xmltok_impl.c"
        if ($113) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 819 "xmltok_impl.c"
      case 26: // $bb26
        HEAP[$0]=-5; //@line 820 "xmltok_impl.c"
        __label__ = 69; break; //@line 820 "xmltok_impl.c"
      case 27: // $bb27
        var $114=HEAP[$ptr_addr]; //@line 821 "xmltok_impl.c"
        var $115=(($114+1)&4294967295); //@line 821 "xmltok_impl.c"
        var $116=HEAP[$115]; //@line 821 "xmltok_impl.c"
        var $117=reSign(($116), 8, 0)!=0; //@line 821 "xmltok_impl.c"
        if ($117) { __label__ = 29; break; } else { __label__ = 28; break; } //@line 821 "xmltok_impl.c"
      case 28: // $bb28
        var $118=HEAP[$ptr_addr]; //@line 821 "xmltok_impl.c"
        var $119=(($118)&4294967295); //@line 821 "xmltok_impl.c"
        var $120=HEAP[$119]; //@line 821 "xmltok_impl.c"
        var $121=reSign(($120), 8, 0)!=62; //@line 821 "xmltok_impl.c"
        if ($121) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 821 "xmltok_impl.c"
      case 29: // $bb29
        var $122=HEAP[$ptr_addr]; //@line 822 "xmltok_impl.c"
        var $123=(($122+-2)&4294967295); //@line 822 "xmltok_impl.c"
        HEAP[$ptr_addr]=$123; //@line 822 "xmltok_impl.c"
        __label__ = 42; break; //@line 822 "xmltok_impl.c"
      case 30: // $bb30
        var $124=HEAP[$nextTokPtr_addr]; //@line 825 "xmltok_impl.c"
        var $125=HEAP[$ptr_addr]; //@line 825 "xmltok_impl.c"
        HEAP[$124]=$125; //@line 825 "xmltok_impl.c"
        HEAP[$0]=0; //@line 826 "xmltok_impl.c"
        __label__ = 69; break; //@line 826 "xmltok_impl.c"
      case 31: // $bb31
        var $126=HEAP[$end_addr]; //@line 827 "xmltok_impl.c"
        var $127=($126); //@line 827 "xmltok_impl.c"
        var $128=HEAP[$ptr_addr]; //@line 827 "xmltok_impl.c"
        var $129=($128); //@line 827 "xmltok_impl.c"
        var $130=((($127) - ($129))&4294967295); //@line 827 "xmltok_impl.c"
        var $131=((($130))|0) <= 1; //@line 827 "xmltok_impl.c"
        if ($131) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 827 "xmltok_impl.c"
      case 32: // $bb32
        HEAP[$0]=-2; //@line 827 "xmltok_impl.c"
        __label__ = 69; break; //@line 827 "xmltok_impl.c"
      case 33: // $bb33
        var $132=HEAP[$ptr_addr]; //@line 827 "xmltok_impl.c"
        var $133=(($132+2)&4294967295); //@line 827 "xmltok_impl.c"
        HEAP[$ptr_addr]=$133; //@line 827 "xmltok_impl.c"
        __label__ = 42; break; //@line 827 "xmltok_impl.c"
      case 34: // $bb34
        var $134=HEAP[$end_addr]; //@line 827 "xmltok_impl.c"
        var $135=($134); //@line 827 "xmltok_impl.c"
        var $136=HEAP[$ptr_addr]; //@line 827 "xmltok_impl.c"
        var $137=($136); //@line 827 "xmltok_impl.c"
        var $138=((($135) - ($137))&4294967295); //@line 827 "xmltok_impl.c"
        var $139=((($138))|0) <= 2; //@line 827 "xmltok_impl.c"
        if ($139) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 827 "xmltok_impl.c"
      case 35: // $bb35
        HEAP[$0]=-2; //@line 827 "xmltok_impl.c"
        __label__ = 69; break; //@line 827 "xmltok_impl.c"
      case 36: // $bb36
        var $140=HEAP[$ptr_addr]; //@line 827 "xmltok_impl.c"
        var $141=(($140+3)&4294967295); //@line 827 "xmltok_impl.c"
        HEAP[$ptr_addr]=$141; //@line 827 "xmltok_impl.c"
        __label__ = 42; break; //@line 827 "xmltok_impl.c"
      case 37: // $bb37
        var $142=HEAP[$end_addr]; //@line 827 "xmltok_impl.c"
        var $143=($142); //@line 827 "xmltok_impl.c"
        var $144=HEAP[$ptr_addr]; //@line 827 "xmltok_impl.c"
        var $145=($144); //@line 827 "xmltok_impl.c"
        var $146=((($143) - ($145))&4294967295); //@line 827 "xmltok_impl.c"
        var $147=((($146))|0) <= 3; //@line 827 "xmltok_impl.c"
        if ($147) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 827 "xmltok_impl.c"
      case 38: // $bb38
        HEAP[$0]=-2; //@line 827 "xmltok_impl.c"
        __label__ = 69; break; //@line 827 "xmltok_impl.c"
      case 39: // $bb39
        var $148=HEAP[$ptr_addr]; //@line 827 "xmltok_impl.c"
        var $149=(($148+4)&4294967295); //@line 827 "xmltok_impl.c"
        HEAP[$ptr_addr]=$149; //@line 827 "xmltok_impl.c"
        __label__ = 42; break; //@line 827 "xmltok_impl.c"
      case 40: // $bb40
        var $150=HEAP[$nextTokPtr_addr]; //@line 827 "xmltok_impl.c"
        var $151=HEAP[$ptr_addr]; //@line 827 "xmltok_impl.c"
        HEAP[$150]=$151; //@line 827 "xmltok_impl.c"
        HEAP[$0]=0; //@line 827 "xmltok_impl.c"
        __label__ = 69; break; //@line 827 "xmltok_impl.c"
      case 41: // $bb41
        var $152=HEAP[$ptr_addr]; //@line 829 "xmltok_impl.c"
        var $153=(($152+2)&4294967295); //@line 829 "xmltok_impl.c"
        HEAP[$ptr_addr]=$153; //@line 829 "xmltok_impl.c"
        __label__ = 42; break; //@line 829 "xmltok_impl.c"
      case 42: // $bb42
        __label__ = 67; break; //@line 829 "xmltok_impl.c"
      case 43: // $bb43
        var $154=HEAP[$ptr_addr]; //@line 833 "xmltok_impl.c"
        var $155=(($154+1)&4294967295); //@line 833 "xmltok_impl.c"
        var $156=HEAP[$155]; //@line 833 "xmltok_impl.c"
        var $157=reSign(($156), 8, 0)==0; //@line 833 "xmltok_impl.c"
        if ($157) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 833 "xmltok_impl.c"
      case 44: // $bb44
        var $158=HEAP[$enc_addr]; //@line 833 "xmltok_impl.c"
        var $159=$158; //@line 833 "xmltok_impl.c"
        var $160=HEAP[$ptr_addr]; //@line 833 "xmltok_impl.c"
        var $161=HEAP[$160]; //@line 833 "xmltok_impl.c"
        var $162=unSign(($161), 8, 0); //@line 833 "xmltok_impl.c"
        var $163=(($159+72)&4294967295); //@line 833 "xmltok_impl.c"
        var $164=(($163+$162)&4294967295); //@line 833 "xmltok_impl.c"
        var $165=HEAP[$164]; //@line 833 "xmltok_impl.c"
        var $166=unSign(($165), 8, 0); //@line 833 "xmltok_impl.c"
        HEAP[$iftmp_720]=$166; //@line 833 "xmltok_impl.c"
        __label__ = 46; break; //@line 833 "xmltok_impl.c"
      case 45: // $bb45
        var $167=HEAP[$ptr_addr]; //@line 833 "xmltok_impl.c"
        var $168=(($167)&4294967295); //@line 833 "xmltok_impl.c"
        var $169=HEAP[$168]; //@line 833 "xmltok_impl.c"
        var $170=reSign(($169), 8, 0); //@line 833 "xmltok_impl.c"
        var $171=HEAP[$ptr_addr]; //@line 833 "xmltok_impl.c"
        var $172=(($171+1)&4294967295); //@line 833 "xmltok_impl.c"
        var $173=HEAP[$172]; //@line 833 "xmltok_impl.c"
        var $174=reSign(($173), 8, 0); //@line 833 "xmltok_impl.c"
        var $175=((($174)) & 255); //@line 833 "xmltok_impl.c"
        var $176=((($170)) & 255); //@line 833 "xmltok_impl.c"
        var $177=_unicode_byte_type($175, $176); //@line 833 "xmltok_impl.c"
        HEAP[$iftmp_720]=$177; //@line 833 "xmltok_impl.c"
        __label__ = 46; break; //@line 833 "xmltok_impl.c"
      case 46: // $bb46
        var $178=HEAP[$iftmp_720]; //@line 833 "xmltok_impl.c"
        if ($178 == 0) {
          __label__ = 65; break;
        }
        else if ($178 == 1) {
          __label__ = 65; break;
        }
        else if ($178 == 2) {
          __label__ = 65; break;
        }
        else if ($178 == 3) {
          __label__ = 65; break;
        }
        else if ($178 == 4) {
          __label__ = 56; break;
        }
        else if ($178 == 5) {
          __label__ = 47; break;
        }
        else if ($178 == 6) {
          __label__ = 50; break;
        }
        else if ($178 == 7) {
          __label__ = 53; break;
        }
        else if ($178 == 8) {
          __label__ = 65; break;
        }
        else if ($178 == 9) {
          __label__ = 65; break;
        }
        else if ($178 == 10) {
          __label__ = 65; break;
        }
        else {
        __label__ = 66; break;
        }
        
      case 47: // $bb47
        var $179=HEAP[$end_addr]; //@line 842 "xmltok_impl.c"
        var $180=($179); //@line 842 "xmltok_impl.c"
        var $181=HEAP[$ptr_addr]; //@line 842 "xmltok_impl.c"
        var $182=($181); //@line 842 "xmltok_impl.c"
        var $183=((($180) - ($182))&4294967295); //@line 842 "xmltok_impl.c"
        var $184=((($183))|0) <= 1; //@line 842 "xmltok_impl.c"
        if ($184) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 842 "xmltok_impl.c"
      case 48: // $bb48
        var $185=HEAP[$nextTokPtr_addr]; //@line 842 "xmltok_impl.c"
        var $186=HEAP[$ptr_addr]; //@line 842 "xmltok_impl.c"
        HEAP[$185]=$186; //@line 842 "xmltok_impl.c"
        HEAP[$0]=6; //@line 842 "xmltok_impl.c"
        __label__ = 69; break; //@line 842 "xmltok_impl.c"
      case 49: // $bb49
        var $187=HEAP[$ptr_addr]; //@line 842 "xmltok_impl.c"
        var $188=(($187+2)&4294967295); //@line 842 "xmltok_impl.c"
        HEAP[$ptr_addr]=$188; //@line 842 "xmltok_impl.c"
        __label__ = 67; break; //@line 842 "xmltok_impl.c"
      case 50: // $bb50
        var $189=HEAP[$end_addr]; //@line 842 "xmltok_impl.c"
        var $190=($189); //@line 842 "xmltok_impl.c"
        var $191=HEAP[$ptr_addr]; //@line 842 "xmltok_impl.c"
        var $192=($191); //@line 842 "xmltok_impl.c"
        var $193=((($190) - ($192))&4294967295); //@line 842 "xmltok_impl.c"
        var $194=((($193))|0) <= 2; //@line 842 "xmltok_impl.c"
        if ($194) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 842 "xmltok_impl.c"
      case 51: // $bb51
        var $195=HEAP[$nextTokPtr_addr]; //@line 842 "xmltok_impl.c"
        var $196=HEAP[$ptr_addr]; //@line 842 "xmltok_impl.c"
        HEAP[$195]=$196; //@line 842 "xmltok_impl.c"
        HEAP[$0]=6; //@line 842 "xmltok_impl.c"
        __label__ = 69; break; //@line 842 "xmltok_impl.c"
      case 52: // $bb52
        var $197=HEAP[$ptr_addr]; //@line 842 "xmltok_impl.c"
        var $198=(($197+3)&4294967295); //@line 842 "xmltok_impl.c"
        HEAP[$ptr_addr]=$198; //@line 842 "xmltok_impl.c"
        __label__ = 67; break; //@line 842 "xmltok_impl.c"
      case 53: // $bb53
        var $199=HEAP[$end_addr]; //@line 842 "xmltok_impl.c"
        var $200=($199); //@line 842 "xmltok_impl.c"
        var $201=HEAP[$ptr_addr]; //@line 842 "xmltok_impl.c"
        var $202=($201); //@line 842 "xmltok_impl.c"
        var $203=((($200) - ($202))&4294967295); //@line 842 "xmltok_impl.c"
        var $204=((($203))|0) <= 3; //@line 842 "xmltok_impl.c"
        if ($204) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 842 "xmltok_impl.c"
      case 54: // $bb54
        var $205=HEAP[$nextTokPtr_addr]; //@line 842 "xmltok_impl.c"
        var $206=HEAP[$ptr_addr]; //@line 842 "xmltok_impl.c"
        HEAP[$205]=$206; //@line 842 "xmltok_impl.c"
        HEAP[$0]=6; //@line 842 "xmltok_impl.c"
        __label__ = 69; break; //@line 842 "xmltok_impl.c"
      case 55: // $bb55
        var $207=HEAP[$ptr_addr]; //@line 842 "xmltok_impl.c"
        var $208=(($207+4)&4294967295); //@line 842 "xmltok_impl.c"
        HEAP[$ptr_addr]=$208; //@line 842 "xmltok_impl.c"
        __label__ = 67; break; //@line 842 "xmltok_impl.c"
      case 56: // $bb56
        var $209=HEAP[$ptr_addr]; //@line 845 "xmltok_impl.c"
        var $210=(($209+2)&4294967295); //@line 845 "xmltok_impl.c"
        var $211=HEAP[$end_addr]; //@line 845 "xmltok_impl.c"
        var $212=($210)!=($211); //@line 845 "xmltok_impl.c"
        if ($212) { __label__ = 57; break; } else { __label__ = 65; break; } //@line 845 "xmltok_impl.c"
      case 57: // $bb57
        var $213=HEAP[$ptr_addr]; //@line 846 "xmltok_impl.c"
        var $214=(($213+2)&4294967295); //@line 846 "xmltok_impl.c"
        var $215=(($214+1)&4294967295); //@line 846 "xmltok_impl.c"
        var $216=HEAP[$215]; //@line 846 "xmltok_impl.c"
        var $217=reSign(($216), 8, 0)!=0; //@line 846 "xmltok_impl.c"
        if ($217) { __label__ = 59; break; } else { __label__ = 58; break; } //@line 846 "xmltok_impl.c"
      case 58: // $bb58
        var $218=HEAP[$ptr_addr]; //@line 846 "xmltok_impl.c"
        var $219=(($218+2)&4294967295); //@line 846 "xmltok_impl.c"
        var $220=(($219)&4294967295); //@line 846 "xmltok_impl.c"
        var $221=HEAP[$220]; //@line 846 "xmltok_impl.c"
        var $222=reSign(($221), 8, 0)!=93; //@line 846 "xmltok_impl.c"
        if ($222) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 846 "xmltok_impl.c"
      case 59: // $bb59
        var $223=HEAP[$ptr_addr]; //@line 847 "xmltok_impl.c"
        var $224=(($223+2)&4294967295); //@line 847 "xmltok_impl.c"
        HEAP[$ptr_addr]=$224; //@line 847 "xmltok_impl.c"
        __label__ = 67; break; //@line 847 "xmltok_impl.c"
      case 60: // $bb60
        var $225=HEAP[$ptr_addr]; //@line 850 "xmltok_impl.c"
        var $226=(($225+4)&4294967295); //@line 850 "xmltok_impl.c"
        var $227=HEAP[$end_addr]; //@line 850 "xmltok_impl.c"
        var $228=($226)!=($227); //@line 850 "xmltok_impl.c"
        if ($228) { __label__ = 61; break; } else { __label__ = 65; break; } //@line 850 "xmltok_impl.c"
      case 61: // $bb61
        var $229=HEAP[$ptr_addr]; //@line 851 "xmltok_impl.c"
        var $230=(($229+4)&4294967295); //@line 851 "xmltok_impl.c"
        var $231=(($230+1)&4294967295); //@line 851 "xmltok_impl.c"
        var $232=HEAP[$231]; //@line 851 "xmltok_impl.c"
        var $233=reSign(($232), 8, 0)!=0; //@line 851 "xmltok_impl.c"
        if ($233) { __label__ = 63; break; } else { __label__ = 62; break; } //@line 851 "xmltok_impl.c"
      case 62: // $bb62
        var $234=HEAP[$ptr_addr]; //@line 851 "xmltok_impl.c"
        var $235=(($234+4)&4294967295); //@line 851 "xmltok_impl.c"
        var $236=(($235)&4294967295); //@line 851 "xmltok_impl.c"
        var $237=HEAP[$236]; //@line 851 "xmltok_impl.c"
        var $238=reSign(($237), 8, 0)!=62; //@line 851 "xmltok_impl.c"
        if ($238) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 851 "xmltok_impl.c"
      case 63: // $bb63
        var $239=HEAP[$ptr_addr]; //@line 852 "xmltok_impl.c"
        var $240=(($239+2)&4294967295); //@line 852 "xmltok_impl.c"
        HEAP[$ptr_addr]=$240; //@line 852 "xmltok_impl.c"
        __label__ = 67; break; //@line 852 "xmltok_impl.c"
      case 64: // $bb64
        var $241=HEAP[$ptr_addr]; //@line 855 "xmltok_impl.c"
        var $242=(($241+4)&4294967295); //@line 855 "xmltok_impl.c"
        var $243=HEAP[$nextTokPtr_addr]; //@line 855 "xmltok_impl.c"
        HEAP[$243]=$242; //@line 855 "xmltok_impl.c"
        HEAP[$0]=0; //@line 856 "xmltok_impl.c"
        __label__ = 69; break; //@line 856 "xmltok_impl.c"
      case 65: // $bb65
        var $244=HEAP[$nextTokPtr_addr]; //@line 867 "xmltok_impl.c"
        var $245=HEAP[$ptr_addr]; //@line 867 "xmltok_impl.c"
        HEAP[$244]=$245; //@line 867 "xmltok_impl.c"
        HEAP[$0]=6; //@line 868 "xmltok_impl.c"
        __label__ = 69; break; //@line 868 "xmltok_impl.c"
      case 66: // $bb66
        var $246=HEAP[$ptr_addr]; //@line 870 "xmltok_impl.c"
        var $247=(($246+2)&4294967295); //@line 870 "xmltok_impl.c"
        HEAP[$ptr_addr]=$247; //@line 870 "xmltok_impl.c"
        __label__ = 67; break; //@line 870 "xmltok_impl.c"
      case 67: // $bb67
        var $248=HEAP[$ptr_addr]; //@line 832 "xmltok_impl.c"
        var $249=HEAP[$end_addr]; //@line 832 "xmltok_impl.c"
        var $250=($248)!=($249); //@line 832 "xmltok_impl.c"
        if ($250) { __label__ = 43; break; } else { __label__ = 68; break; } //@line 832 "xmltok_impl.c"
      case 68: // $bb68
        var $251=HEAP[$nextTokPtr_addr]; //@line 874 "xmltok_impl.c"
        var $252=HEAP[$ptr_addr]; //@line 874 "xmltok_impl.c"
        HEAP[$251]=$252; //@line 874 "xmltok_impl.c"
        HEAP[$0]=6; //@line 875 "xmltok_impl.c"
        __label__ = 69; break; //@line 875 "xmltok_impl.c"
      case 69: // $bb69
        var $253=HEAP[$0]; //@line 786 "xmltok_impl.c"
        HEAP[$retval]=$253; //@line 786 "xmltok_impl.c"
        __label__ = 70; break; //@line 786 "xmltok_impl.c"
      case 70: // $return
        var $retval70=HEAP[$retval]; //@line 786 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval70; //@line 786 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_scanPercent($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_736=__stackBase__+20;
        var $iftmp_728=__stackBase__+24;
        var $0=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 884 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 884 "xmltok_impl.c"
        var $3=($1)==($2); //@line 884 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 884 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-22; //@line 885 "xmltok_impl.c"
        __label__ = 40; break; //@line 885 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$ptr_addr]; //@line 886 "xmltok_impl.c"
        var $5=(($4+1)&4294967295); //@line 886 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 886 "xmltok_impl.c"
        var $7=reSign(($6), 8, 0)==0; //@line 886 "xmltok_impl.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 886 "xmltok_impl.c"
      case 3: // $bb2
        var $8=HEAP[$enc_addr]; //@line 886 "xmltok_impl.c"
        var $9=$8; //@line 886 "xmltok_impl.c"
        var $10=HEAP[$ptr_addr]; //@line 886 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 886 "xmltok_impl.c"
        var $12=unSign(($11), 8, 0); //@line 886 "xmltok_impl.c"
        var $13=(($9+72)&4294967295); //@line 886 "xmltok_impl.c"
        var $14=(($13+$12)&4294967295); //@line 886 "xmltok_impl.c"
        var $15=HEAP[$14]; //@line 886 "xmltok_impl.c"
        var $16=unSign(($15), 8, 0); //@line 886 "xmltok_impl.c"
        HEAP[$iftmp_728]=$16; //@line 886 "xmltok_impl.c"
        __label__ = 5; break; //@line 886 "xmltok_impl.c"
      case 4: // $bb3
        var $17=HEAP[$ptr_addr]; //@line 886 "xmltok_impl.c"
        var $18=(($17)&4294967295); //@line 886 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 886 "xmltok_impl.c"
        var $20=reSign(($19), 8, 0); //@line 886 "xmltok_impl.c"
        var $21=HEAP[$ptr_addr]; //@line 886 "xmltok_impl.c"
        var $22=(($21+1)&4294967295); //@line 886 "xmltok_impl.c"
        var $23=HEAP[$22]; //@line 886 "xmltok_impl.c"
        var $24=reSign(($23), 8, 0); //@line 886 "xmltok_impl.c"
        var $25=((($24)) & 255); //@line 886 "xmltok_impl.c"
        var $26=((($20)) & 255); //@line 886 "xmltok_impl.c"
        var $27=_unicode_byte_type($25, $26); //@line 886 "xmltok_impl.c"
        HEAP[$iftmp_728]=$27; //@line 886 "xmltok_impl.c"
        __label__ = 5; break; //@line 886 "xmltok_impl.c"
      case 5: // $bb4
        var $28=HEAP[$iftmp_728]; //@line 886 "xmltok_impl.c"
        if ($28 == 5) {
          __label__ = 9; break;
        }
        else if ($28 == 6) {
          __label__ = 12; break;
        }
        else if ($28 == 7) {
          __label__ = 15; break;
        }
        else if ($28 == 9) {
          __label__ = 18; break;
        }
        else if ($28 == 10) {
          __label__ = 18; break;
        }
        else if ($28 == 21) {
          __label__ = 18; break;
        }
        else if ($28 == 22) {
          __label__ = 8; break;
        }
        else if ($28 == 24) {
          __label__ = 8; break;
        }
        else if ($28 == 29) {
          __label__ = 6; break;
        }
        else if ($28 == 30) {
          __label__ = 18; break;
        }
        else {
        __label__ = 19; break;
        }
        
      case 6: // $bb5
        var $29=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        var $30=(($29+1)&4294967295); //@line 887 "xmltok_impl.c"
        var $31=HEAP[$30]; //@line 887 "xmltok_impl.c"
        var $32=unSign(($31), 8, 0); //@line 887 "xmltok_impl.c"
        var $33=((_nmstrtPages+$32)&4294967295); //@line 887 "xmltok_impl.c"
        var $34=HEAP[$33]; //@line 887 "xmltok_impl.c"
        var $35=unSign(($34), 8, 0); //@line 887 "xmltok_impl.c"
        var $36=($35) << 3; //@line 887 "xmltok_impl.c"
        var $37=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        var $38=(($37)&4294967295); //@line 887 "xmltok_impl.c"
        var $39=HEAP[$38]; //@line 887 "xmltok_impl.c"
        var $40=unSign(($39), 8, 0) >>> 5; //@line 887 "xmltok_impl.c"
        var $41=unSign(($40), 8, 0); //@line 887 "xmltok_impl.c"
        var $42=((($36) + ($41))&4294967295); //@line 887 "xmltok_impl.c"
        var $43=((_namingBitmap+$42*4)&4294967295); //@line 887 "xmltok_impl.c"
        var $44=HEAP[$43]; //@line 887 "xmltok_impl.c"
        var $45=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        var $46=(($45)&4294967295); //@line 887 "xmltok_impl.c"
        var $47=HEAP[$46]; //@line 887 "xmltok_impl.c"
        var $48=unSign(($47), 8, 0); //@line 887 "xmltok_impl.c"
        var $49=($48) & 31; //@line 887 "xmltok_impl.c"
        var $50=1 << ($49); //@line 887 "xmltok_impl.c"
        var $51=($44) & ($50); //@line 887 "xmltok_impl.c"
        var $52=((($51))|0)==0; //@line 887 "xmltok_impl.c"
        if ($52) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 887 "xmltok_impl.c"
      case 7: // $bb6
        var $53=HEAP[$nextTokPtr_addr]; //@line 887 "xmltok_impl.c"
        var $54=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        HEAP[$53]=$54; //@line 887 "xmltok_impl.c"
        HEAP[$0]=0; //@line 887 "xmltok_impl.c"
        __label__ = 40; break; //@line 887 "xmltok_impl.c"
      case 8: // $bb7
        var $55=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        var $56=(($55+2)&4294967295); //@line 887 "xmltok_impl.c"
        HEAP[$ptr_addr]=$56; //@line 887 "xmltok_impl.c"
        __label__ = 38; break; //@line 887 "xmltok_impl.c"
      case 9: // $bb8
        var $57=HEAP[$end_addr]; //@line 887 "xmltok_impl.c"
        var $58=($57); //@line 887 "xmltok_impl.c"
        var $59=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        var $60=($59); //@line 887 "xmltok_impl.c"
        var $61=((($58) - ($60))&4294967295); //@line 887 "xmltok_impl.c"
        var $62=((($61))|0) <= 1; //@line 887 "xmltok_impl.c"
        if ($62) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 887 "xmltok_impl.c"
      case 10: // $bb9
        HEAP[$0]=-2; //@line 887 "xmltok_impl.c"
        __label__ = 40; break; //@line 887 "xmltok_impl.c"
      case 11: // $bb10
        var $63=HEAP[$nextTokPtr_addr]; //@line 887 "xmltok_impl.c"
        var $64=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        HEAP[$63]=$64; //@line 887 "xmltok_impl.c"
        HEAP[$0]=0; //@line 887 "xmltok_impl.c"
        __label__ = 40; break; //@line 887 "xmltok_impl.c"
      case 12: // $bb11
        var $65=HEAP[$end_addr]; //@line 887 "xmltok_impl.c"
        var $66=($65); //@line 887 "xmltok_impl.c"
        var $67=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        var $68=($67); //@line 887 "xmltok_impl.c"
        var $69=((($66) - ($68))&4294967295); //@line 887 "xmltok_impl.c"
        var $70=((($69))|0) <= 2; //@line 887 "xmltok_impl.c"
        if ($70) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 887 "xmltok_impl.c"
      case 13: // $bb12
        HEAP[$0]=-2; //@line 887 "xmltok_impl.c"
        __label__ = 40; break; //@line 887 "xmltok_impl.c"
      case 14: // $bb13
        var $71=HEAP[$nextTokPtr_addr]; //@line 887 "xmltok_impl.c"
        var $72=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        HEAP[$71]=$72; //@line 887 "xmltok_impl.c"
        HEAP[$0]=0; //@line 887 "xmltok_impl.c"
        __label__ = 40; break; //@line 887 "xmltok_impl.c"
      case 15: // $bb14
        var $73=HEAP[$end_addr]; //@line 887 "xmltok_impl.c"
        var $74=($73); //@line 887 "xmltok_impl.c"
        var $75=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        var $76=($75); //@line 887 "xmltok_impl.c"
        var $77=((($74) - ($76))&4294967295); //@line 887 "xmltok_impl.c"
        var $78=((($77))|0) <= 3; //@line 887 "xmltok_impl.c"
        if ($78) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 887 "xmltok_impl.c"
      case 16: // $bb15
        HEAP[$0]=-2; //@line 887 "xmltok_impl.c"
        __label__ = 40; break; //@line 887 "xmltok_impl.c"
      case 17: // $bb16
        var $79=HEAP[$nextTokPtr_addr]; //@line 887 "xmltok_impl.c"
        var $80=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        HEAP[$79]=$80; //@line 887 "xmltok_impl.c"
        HEAP[$0]=0; //@line 887 "xmltok_impl.c"
        __label__ = 40; break; //@line 887 "xmltok_impl.c"
      case 18: // $bb17
        var $81=HEAP[$nextTokPtr_addr]; //@line 889 "xmltok_impl.c"
        var $82=HEAP[$ptr_addr]; //@line 889 "xmltok_impl.c"
        HEAP[$81]=$82; //@line 889 "xmltok_impl.c"
        HEAP[$0]=22; //@line 890 "xmltok_impl.c"
        __label__ = 40; break; //@line 890 "xmltok_impl.c"
      case 19: // $bb18
        var $83=HEAP[$nextTokPtr_addr]; //@line 892 "xmltok_impl.c"
        var $84=HEAP[$ptr_addr]; //@line 892 "xmltok_impl.c"
        HEAP[$83]=$84; //@line 892 "xmltok_impl.c"
        HEAP[$0]=0; //@line 893 "xmltok_impl.c"
        __label__ = 40; break; //@line 893 "xmltok_impl.c"
      case 20: // $bb19
        var $85=HEAP[$ptr_addr]; //@line 896 "xmltok_impl.c"
        var $86=(($85+1)&4294967295); //@line 896 "xmltok_impl.c"
        var $87=HEAP[$86]; //@line 896 "xmltok_impl.c"
        var $88=reSign(($87), 8, 0)==0; //@line 896 "xmltok_impl.c"
        if ($88) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 896 "xmltok_impl.c"
      case 21: // $bb20
        var $89=HEAP[$enc_addr]; //@line 896 "xmltok_impl.c"
        var $90=$89; //@line 896 "xmltok_impl.c"
        var $91=HEAP[$ptr_addr]; //@line 896 "xmltok_impl.c"
        var $92=HEAP[$91]; //@line 896 "xmltok_impl.c"
        var $93=unSign(($92), 8, 0); //@line 896 "xmltok_impl.c"
        var $94=(($90+72)&4294967295); //@line 896 "xmltok_impl.c"
        var $95=(($94+$93)&4294967295); //@line 896 "xmltok_impl.c"
        var $96=HEAP[$95]; //@line 896 "xmltok_impl.c"
        var $97=unSign(($96), 8, 0); //@line 896 "xmltok_impl.c"
        HEAP[$iftmp_736]=$97; //@line 896 "xmltok_impl.c"
        __label__ = 23; break; //@line 896 "xmltok_impl.c"
      case 22: // $bb21
        var $98=HEAP[$ptr_addr]; //@line 896 "xmltok_impl.c"
        var $99=(($98)&4294967295); //@line 896 "xmltok_impl.c"
        var $100=HEAP[$99]; //@line 896 "xmltok_impl.c"
        var $101=reSign(($100), 8, 0); //@line 896 "xmltok_impl.c"
        var $102=HEAP[$ptr_addr]; //@line 896 "xmltok_impl.c"
        var $103=(($102+1)&4294967295); //@line 896 "xmltok_impl.c"
        var $104=HEAP[$103]; //@line 896 "xmltok_impl.c"
        var $105=reSign(($104), 8, 0); //@line 896 "xmltok_impl.c"
        var $106=((($105)) & 255); //@line 896 "xmltok_impl.c"
        var $107=((($101)) & 255); //@line 896 "xmltok_impl.c"
        var $108=_unicode_byte_type($106, $107); //@line 896 "xmltok_impl.c"
        HEAP[$iftmp_736]=$108; //@line 896 "xmltok_impl.c"
        __label__ = 23; break; //@line 896 "xmltok_impl.c"
      case 23: // $bb22
        var $109=HEAP[$iftmp_736]; //@line 896 "xmltok_impl.c"
        if ($109 == 5) {
          __label__ = 27; break;
        }
        else if ($109 == 6) {
          __label__ = 30; break;
        }
        else if ($109 == 7) {
          __label__ = 33; break;
        }
        else if ($109 == 18) {
          __label__ = 36; break;
        }
        else if ($109 == 22) {
          __label__ = 26; break;
        }
        else if ($109 == 24) {
          __label__ = 26; break;
        }
        else if ($109 == 25) {
          __label__ = 26; break;
        }
        else if ($109 == 26) {
          __label__ = 26; break;
        }
        else if ($109 == 27) {
          __label__ = 26; break;
        }
        else if ($109 == 29) {
          __label__ = 24; break;
        }
        else {
        __label__ = 37; break;
        }
        
      case 24: // $bb23
        var $110=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        var $111=(($110+1)&4294967295); //@line 897 "xmltok_impl.c"
        var $112=HEAP[$111]; //@line 897 "xmltok_impl.c"
        var $113=unSign(($112), 8, 0); //@line 897 "xmltok_impl.c"
        var $114=((_namePages+$113)&4294967295); //@line 897 "xmltok_impl.c"
        var $115=HEAP[$114]; //@line 897 "xmltok_impl.c"
        var $116=unSign(($115), 8, 0); //@line 897 "xmltok_impl.c"
        var $117=($116) << 3; //@line 897 "xmltok_impl.c"
        var $118=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        var $119=(($118)&4294967295); //@line 897 "xmltok_impl.c"
        var $120=HEAP[$119]; //@line 897 "xmltok_impl.c"
        var $121=unSign(($120), 8, 0) >>> 5; //@line 897 "xmltok_impl.c"
        var $122=unSign(($121), 8, 0); //@line 897 "xmltok_impl.c"
        var $123=((($117) + ($122))&4294967295); //@line 897 "xmltok_impl.c"
        var $124=((_namingBitmap+$123*4)&4294967295); //@line 897 "xmltok_impl.c"
        var $125=HEAP[$124]; //@line 897 "xmltok_impl.c"
        var $126=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        var $127=(($126)&4294967295); //@line 897 "xmltok_impl.c"
        var $128=HEAP[$127]; //@line 897 "xmltok_impl.c"
        var $129=unSign(($128), 8, 0); //@line 897 "xmltok_impl.c"
        var $130=($129) & 31; //@line 897 "xmltok_impl.c"
        var $131=1 << ($130); //@line 897 "xmltok_impl.c"
        var $132=($125) & ($131); //@line 897 "xmltok_impl.c"
        var $133=((($132))|0)==0; //@line 897 "xmltok_impl.c"
        if ($133) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 897 "xmltok_impl.c"
      case 25: // $bb24
        var $134=HEAP[$nextTokPtr_addr]; //@line 897 "xmltok_impl.c"
        var $135=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        HEAP[$134]=$135; //@line 897 "xmltok_impl.c"
        HEAP[$0]=0; //@line 897 "xmltok_impl.c"
        __label__ = 40; break; //@line 897 "xmltok_impl.c"
      case 26: // $bb25
        var $136=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        var $137=(($136+2)&4294967295); //@line 897 "xmltok_impl.c"
        HEAP[$ptr_addr]=$137; //@line 897 "xmltok_impl.c"
        __label__ = 38; break; //@line 897 "xmltok_impl.c"
      case 27: // $bb26
        var $138=HEAP[$end_addr]; //@line 897 "xmltok_impl.c"
        var $139=($138); //@line 897 "xmltok_impl.c"
        var $140=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        var $141=($140); //@line 897 "xmltok_impl.c"
        var $142=((($139) - ($141))&4294967295); //@line 897 "xmltok_impl.c"
        var $143=((($142))|0) <= 1; //@line 897 "xmltok_impl.c"
        if ($143) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 897 "xmltok_impl.c"
      case 28: // $bb27
        HEAP[$0]=-2; //@line 897 "xmltok_impl.c"
        __label__ = 40; break; //@line 897 "xmltok_impl.c"
      case 29: // $bb28
        var $144=HEAP[$nextTokPtr_addr]; //@line 897 "xmltok_impl.c"
        var $145=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        HEAP[$144]=$145; //@line 897 "xmltok_impl.c"
        HEAP[$0]=0; //@line 897 "xmltok_impl.c"
        __label__ = 40; break; //@line 897 "xmltok_impl.c"
      case 30: // $bb29
        var $146=HEAP[$end_addr]; //@line 897 "xmltok_impl.c"
        var $147=($146); //@line 897 "xmltok_impl.c"
        var $148=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        var $149=($148); //@line 897 "xmltok_impl.c"
        var $150=((($147) - ($149))&4294967295); //@line 897 "xmltok_impl.c"
        var $151=((($150))|0) <= 2; //@line 897 "xmltok_impl.c"
        if ($151) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 897 "xmltok_impl.c"
      case 31: // $bb30
        HEAP[$0]=-2; //@line 897 "xmltok_impl.c"
        __label__ = 40; break; //@line 897 "xmltok_impl.c"
      case 32: // $bb31
        var $152=HEAP[$nextTokPtr_addr]; //@line 897 "xmltok_impl.c"
        var $153=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        HEAP[$152]=$153; //@line 897 "xmltok_impl.c"
        HEAP[$0]=0; //@line 897 "xmltok_impl.c"
        __label__ = 40; break; //@line 897 "xmltok_impl.c"
      case 33: // $bb32
        var $154=HEAP[$end_addr]; //@line 897 "xmltok_impl.c"
        var $155=($154); //@line 897 "xmltok_impl.c"
        var $156=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        var $157=($156); //@line 897 "xmltok_impl.c"
        var $158=((($155) - ($157))&4294967295); //@line 897 "xmltok_impl.c"
        var $159=((($158))|0) <= 3; //@line 897 "xmltok_impl.c"
        if ($159) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 897 "xmltok_impl.c"
      case 34: // $bb33
        HEAP[$0]=-2; //@line 897 "xmltok_impl.c"
        __label__ = 40; break; //@line 897 "xmltok_impl.c"
      case 35: // $bb34
        var $160=HEAP[$nextTokPtr_addr]; //@line 897 "xmltok_impl.c"
        var $161=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        HEAP[$160]=$161; //@line 897 "xmltok_impl.c"
        HEAP[$0]=0; //@line 897 "xmltok_impl.c"
        __label__ = 40; break; //@line 897 "xmltok_impl.c"
      case 36: // $bb35
        var $162=HEAP[$ptr_addr]; //@line 899 "xmltok_impl.c"
        var $163=(($162+2)&4294967295); //@line 899 "xmltok_impl.c"
        var $164=HEAP[$nextTokPtr_addr]; //@line 899 "xmltok_impl.c"
        HEAP[$164]=$163; //@line 899 "xmltok_impl.c"
        HEAP[$0]=28; //@line 900 "xmltok_impl.c"
        __label__ = 40; break; //@line 900 "xmltok_impl.c"
      case 37: // $bb36
        var $165=HEAP[$nextTokPtr_addr]; //@line 902 "xmltok_impl.c"
        var $166=HEAP[$ptr_addr]; //@line 902 "xmltok_impl.c"
        HEAP[$165]=$166; //@line 902 "xmltok_impl.c"
        HEAP[$0]=0; //@line 903 "xmltok_impl.c"
        __label__ = 40; break; //@line 903 "xmltok_impl.c"
      case 38: // $bb37
        var $167=HEAP[$ptr_addr]; //@line 895 "xmltok_impl.c"
        var $168=HEAP[$end_addr]; //@line 895 "xmltok_impl.c"
        var $169=($167)!=($168); //@line 895 "xmltok_impl.c"
        if ($169) { __label__ = 20; break; } else { __label__ = 39; break; } //@line 895 "xmltok_impl.c"
      case 39: // $bb38
        HEAP[$0]=-1; //@line 906 "xmltok_impl.c"
        __label__ = 40; break; //@line 906 "xmltok_impl.c"
      case 40: // $bb39
        var $170=HEAP[$0]; //@line 885 "xmltok_impl.c"
        HEAP[$retval]=$170; //@line 885 "xmltok_impl.c"
        __label__ = 41; break; //@line 885 "xmltok_impl.c"
      case 41: // $return
        var $retval40=HEAP[$retval]; //@line 885 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval40; //@line 885 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_scanPoundName($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_752=__stackBase__+20;
        var $iftmp_744=__stackBase__+24;
        var $0=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 913 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 913 "xmltok_impl.c"
        var $3=($1)==($2); //@line 913 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 913 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 914 "xmltok_impl.c"
        __label__ = 39; break; //@line 914 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$ptr_addr]; //@line 915 "xmltok_impl.c"
        var $5=(($4+1)&4294967295); //@line 915 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 915 "xmltok_impl.c"
        var $7=reSign(($6), 8, 0)==0; //@line 915 "xmltok_impl.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 915 "xmltok_impl.c"
      case 3: // $bb2
        var $8=HEAP[$enc_addr]; //@line 915 "xmltok_impl.c"
        var $9=$8; //@line 915 "xmltok_impl.c"
        var $10=HEAP[$ptr_addr]; //@line 915 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 915 "xmltok_impl.c"
        var $12=unSign(($11), 8, 0); //@line 915 "xmltok_impl.c"
        var $13=(($9+72)&4294967295); //@line 915 "xmltok_impl.c"
        var $14=(($13+$12)&4294967295); //@line 915 "xmltok_impl.c"
        var $15=HEAP[$14]; //@line 915 "xmltok_impl.c"
        var $16=unSign(($15), 8, 0); //@line 915 "xmltok_impl.c"
        HEAP[$iftmp_744]=$16; //@line 915 "xmltok_impl.c"
        __label__ = 5; break; //@line 915 "xmltok_impl.c"
      case 4: // $bb3
        var $17=HEAP[$ptr_addr]; //@line 915 "xmltok_impl.c"
        var $18=(($17)&4294967295); //@line 915 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 915 "xmltok_impl.c"
        var $20=reSign(($19), 8, 0); //@line 915 "xmltok_impl.c"
        var $21=HEAP[$ptr_addr]; //@line 915 "xmltok_impl.c"
        var $22=(($21+1)&4294967295); //@line 915 "xmltok_impl.c"
        var $23=HEAP[$22]; //@line 915 "xmltok_impl.c"
        var $24=reSign(($23), 8, 0); //@line 915 "xmltok_impl.c"
        var $25=((($24)) & 255); //@line 915 "xmltok_impl.c"
        var $26=((($20)) & 255); //@line 915 "xmltok_impl.c"
        var $27=_unicode_byte_type($25, $26); //@line 915 "xmltok_impl.c"
        HEAP[$iftmp_744]=$27; //@line 915 "xmltok_impl.c"
        __label__ = 5; break; //@line 915 "xmltok_impl.c"
      case 5: // $bb4
        var $28=HEAP[$iftmp_744]; //@line 915 "xmltok_impl.c"
        if ($28 == 5) {
          __label__ = 9; break;
        }
        else if ($28 == 6) {
          __label__ = 12; break;
        }
        else if ($28 == 7) {
          __label__ = 15; break;
        }
        else if ($28 == 22) {
          __label__ = 8; break;
        }
        else if ($28 == 24) {
          __label__ = 8; break;
        }
        else if ($28 == 29) {
          __label__ = 6; break;
        }
        else {
        __label__ = 18; break;
        }
        
      case 6: // $bb5
        var $29=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        var $30=(($29+1)&4294967295); //@line 916 "xmltok_impl.c"
        var $31=HEAP[$30]; //@line 916 "xmltok_impl.c"
        var $32=unSign(($31), 8, 0); //@line 916 "xmltok_impl.c"
        var $33=((_nmstrtPages+$32)&4294967295); //@line 916 "xmltok_impl.c"
        var $34=HEAP[$33]; //@line 916 "xmltok_impl.c"
        var $35=unSign(($34), 8, 0); //@line 916 "xmltok_impl.c"
        var $36=($35) << 3; //@line 916 "xmltok_impl.c"
        var $37=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        var $38=(($37)&4294967295); //@line 916 "xmltok_impl.c"
        var $39=HEAP[$38]; //@line 916 "xmltok_impl.c"
        var $40=unSign(($39), 8, 0) >>> 5; //@line 916 "xmltok_impl.c"
        var $41=unSign(($40), 8, 0); //@line 916 "xmltok_impl.c"
        var $42=((($36) + ($41))&4294967295); //@line 916 "xmltok_impl.c"
        var $43=((_namingBitmap+$42*4)&4294967295); //@line 916 "xmltok_impl.c"
        var $44=HEAP[$43]; //@line 916 "xmltok_impl.c"
        var $45=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        var $46=(($45)&4294967295); //@line 916 "xmltok_impl.c"
        var $47=HEAP[$46]; //@line 916 "xmltok_impl.c"
        var $48=unSign(($47), 8, 0); //@line 916 "xmltok_impl.c"
        var $49=($48) & 31; //@line 916 "xmltok_impl.c"
        var $50=1 << ($49); //@line 916 "xmltok_impl.c"
        var $51=($44) & ($50); //@line 916 "xmltok_impl.c"
        var $52=((($51))|0)==0; //@line 916 "xmltok_impl.c"
        if ($52) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 916 "xmltok_impl.c"
      case 7: // $bb6
        var $53=HEAP[$nextTokPtr_addr]; //@line 916 "xmltok_impl.c"
        var $54=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        HEAP[$53]=$54; //@line 916 "xmltok_impl.c"
        HEAP[$0]=0; //@line 916 "xmltok_impl.c"
        __label__ = 39; break; //@line 916 "xmltok_impl.c"
      case 8: // $bb7
        var $55=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        var $56=(($55+2)&4294967295); //@line 916 "xmltok_impl.c"
        HEAP[$ptr_addr]=$56; //@line 916 "xmltok_impl.c"
        __label__ = 37; break; //@line 916 "xmltok_impl.c"
      case 9: // $bb8
        var $57=HEAP[$end_addr]; //@line 916 "xmltok_impl.c"
        var $58=($57); //@line 916 "xmltok_impl.c"
        var $59=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        var $60=($59); //@line 916 "xmltok_impl.c"
        var $61=((($58) - ($60))&4294967295); //@line 916 "xmltok_impl.c"
        var $62=((($61))|0) <= 1; //@line 916 "xmltok_impl.c"
        if ($62) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 916 "xmltok_impl.c"
      case 10: // $bb9
        HEAP[$0]=-2; //@line 916 "xmltok_impl.c"
        __label__ = 39; break; //@line 916 "xmltok_impl.c"
      case 11: // $bb10
        var $63=HEAP[$nextTokPtr_addr]; //@line 916 "xmltok_impl.c"
        var $64=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        HEAP[$63]=$64; //@line 916 "xmltok_impl.c"
        HEAP[$0]=0; //@line 916 "xmltok_impl.c"
        __label__ = 39; break; //@line 916 "xmltok_impl.c"
      case 12: // $bb11
        var $65=HEAP[$end_addr]; //@line 916 "xmltok_impl.c"
        var $66=($65); //@line 916 "xmltok_impl.c"
        var $67=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        var $68=($67); //@line 916 "xmltok_impl.c"
        var $69=((($66) - ($68))&4294967295); //@line 916 "xmltok_impl.c"
        var $70=((($69))|0) <= 2; //@line 916 "xmltok_impl.c"
        if ($70) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 916 "xmltok_impl.c"
      case 13: // $bb12
        HEAP[$0]=-2; //@line 916 "xmltok_impl.c"
        __label__ = 39; break; //@line 916 "xmltok_impl.c"
      case 14: // $bb13
        var $71=HEAP[$nextTokPtr_addr]; //@line 916 "xmltok_impl.c"
        var $72=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        HEAP[$71]=$72; //@line 916 "xmltok_impl.c"
        HEAP[$0]=0; //@line 916 "xmltok_impl.c"
        __label__ = 39; break; //@line 916 "xmltok_impl.c"
      case 15: // $bb14
        var $73=HEAP[$end_addr]; //@line 916 "xmltok_impl.c"
        var $74=($73); //@line 916 "xmltok_impl.c"
        var $75=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        var $76=($75); //@line 916 "xmltok_impl.c"
        var $77=((($74) - ($76))&4294967295); //@line 916 "xmltok_impl.c"
        var $78=((($77))|0) <= 3; //@line 916 "xmltok_impl.c"
        if ($78) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 916 "xmltok_impl.c"
      case 16: // $bb15
        HEAP[$0]=-2; //@line 916 "xmltok_impl.c"
        __label__ = 39; break; //@line 916 "xmltok_impl.c"
      case 17: // $bb16
        var $79=HEAP[$nextTokPtr_addr]; //@line 916 "xmltok_impl.c"
        var $80=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        HEAP[$79]=$80; //@line 916 "xmltok_impl.c"
        HEAP[$0]=0; //@line 916 "xmltok_impl.c"
        __label__ = 39; break; //@line 916 "xmltok_impl.c"
      case 18: // $bb17
        var $81=HEAP[$nextTokPtr_addr]; //@line 918 "xmltok_impl.c"
        var $82=HEAP[$ptr_addr]; //@line 918 "xmltok_impl.c"
        HEAP[$81]=$82; //@line 918 "xmltok_impl.c"
        HEAP[$0]=0; //@line 919 "xmltok_impl.c"
        __label__ = 39; break; //@line 919 "xmltok_impl.c"
      case 19: // $bb18
        var $83=HEAP[$ptr_addr]; //@line 922 "xmltok_impl.c"
        var $84=(($83+1)&4294967295); //@line 922 "xmltok_impl.c"
        var $85=HEAP[$84]; //@line 922 "xmltok_impl.c"
        var $86=reSign(($85), 8, 0)==0; //@line 922 "xmltok_impl.c"
        if ($86) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 922 "xmltok_impl.c"
      case 20: // $bb19
        var $87=HEAP[$enc_addr]; //@line 922 "xmltok_impl.c"
        var $88=$87; //@line 922 "xmltok_impl.c"
        var $89=HEAP[$ptr_addr]; //@line 922 "xmltok_impl.c"
        var $90=HEAP[$89]; //@line 922 "xmltok_impl.c"
        var $91=unSign(($90), 8, 0); //@line 922 "xmltok_impl.c"
        var $92=(($88+72)&4294967295); //@line 922 "xmltok_impl.c"
        var $93=(($92+$91)&4294967295); //@line 922 "xmltok_impl.c"
        var $94=HEAP[$93]; //@line 922 "xmltok_impl.c"
        var $95=unSign(($94), 8, 0); //@line 922 "xmltok_impl.c"
        HEAP[$iftmp_752]=$95; //@line 922 "xmltok_impl.c"
        __label__ = 22; break; //@line 922 "xmltok_impl.c"
      case 21: // $bb20
        var $96=HEAP[$ptr_addr]; //@line 922 "xmltok_impl.c"
        var $97=(($96)&4294967295); //@line 922 "xmltok_impl.c"
        var $98=HEAP[$97]; //@line 922 "xmltok_impl.c"
        var $99=reSign(($98), 8, 0); //@line 922 "xmltok_impl.c"
        var $100=HEAP[$ptr_addr]; //@line 922 "xmltok_impl.c"
        var $101=(($100+1)&4294967295); //@line 922 "xmltok_impl.c"
        var $102=HEAP[$101]; //@line 922 "xmltok_impl.c"
        var $103=reSign(($102), 8, 0); //@line 922 "xmltok_impl.c"
        var $104=((($103)) & 255); //@line 922 "xmltok_impl.c"
        var $105=((($99)) & 255); //@line 922 "xmltok_impl.c"
        var $106=_unicode_byte_type($104, $105); //@line 922 "xmltok_impl.c"
        HEAP[$iftmp_752]=$106; //@line 922 "xmltok_impl.c"
        __label__ = 22; break; //@line 922 "xmltok_impl.c"
      case 22: // $bb21
        var $107=HEAP[$iftmp_752]; //@line 922 "xmltok_impl.c"
        if ($107 == 5) {
          __label__ = 26; break;
        }
        else if ($107 == 6) {
          __label__ = 29; break;
        }
        else if ($107 == 7) {
          __label__ = 32; break;
        }
        else if ($107 == 9) {
          __label__ = 35; break;
        }
        else if ($107 == 10) {
          __label__ = 35; break;
        }
        else if ($107 == 11) {
          __label__ = 35; break;
        }
        else if ($107 == 21) {
          __label__ = 35; break;
        }
        else if ($107 == 22) {
          __label__ = 25; break;
        }
        else if ($107 == 24) {
          __label__ = 25; break;
        }
        else if ($107 == 25) {
          __label__ = 25; break;
        }
        else if ($107 == 26) {
          __label__ = 25; break;
        }
        else if ($107 == 27) {
          __label__ = 25; break;
        }
        else if ($107 == 29) {
          __label__ = 23; break;
        }
        else if ($107 == 30) {
          __label__ = 35; break;
        }
        else if ($107 == 32) {
          __label__ = 35; break;
        }
        else if ($107 == 36) {
          __label__ = 35; break;
        }
        else {
        __label__ = 36; break;
        }
        
      case 23: // $bb22
        var $108=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        var $109=(($108+1)&4294967295); //@line 923 "xmltok_impl.c"
        var $110=HEAP[$109]; //@line 923 "xmltok_impl.c"
        var $111=unSign(($110), 8, 0); //@line 923 "xmltok_impl.c"
        var $112=((_namePages+$111)&4294967295); //@line 923 "xmltok_impl.c"
        var $113=HEAP[$112]; //@line 923 "xmltok_impl.c"
        var $114=unSign(($113), 8, 0); //@line 923 "xmltok_impl.c"
        var $115=($114) << 3; //@line 923 "xmltok_impl.c"
        var $116=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        var $117=(($116)&4294967295); //@line 923 "xmltok_impl.c"
        var $118=HEAP[$117]; //@line 923 "xmltok_impl.c"
        var $119=unSign(($118), 8, 0) >>> 5; //@line 923 "xmltok_impl.c"
        var $120=unSign(($119), 8, 0); //@line 923 "xmltok_impl.c"
        var $121=((($115) + ($120))&4294967295); //@line 923 "xmltok_impl.c"
        var $122=((_namingBitmap+$121*4)&4294967295); //@line 923 "xmltok_impl.c"
        var $123=HEAP[$122]; //@line 923 "xmltok_impl.c"
        var $124=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        var $125=(($124)&4294967295); //@line 923 "xmltok_impl.c"
        var $126=HEAP[$125]; //@line 923 "xmltok_impl.c"
        var $127=unSign(($126), 8, 0); //@line 923 "xmltok_impl.c"
        var $128=($127) & 31; //@line 923 "xmltok_impl.c"
        var $129=1 << ($128); //@line 923 "xmltok_impl.c"
        var $130=($123) & ($129); //@line 923 "xmltok_impl.c"
        var $131=((($130))|0)==0; //@line 923 "xmltok_impl.c"
        if ($131) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 923 "xmltok_impl.c"
      case 24: // $bb23
        var $132=HEAP[$nextTokPtr_addr]; //@line 923 "xmltok_impl.c"
        var $133=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        HEAP[$132]=$133; //@line 923 "xmltok_impl.c"
        HEAP[$0]=0; //@line 923 "xmltok_impl.c"
        __label__ = 39; break; //@line 923 "xmltok_impl.c"
      case 25: // $bb24
        var $134=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        var $135=(($134+2)&4294967295); //@line 923 "xmltok_impl.c"
        HEAP[$ptr_addr]=$135; //@line 923 "xmltok_impl.c"
        __label__ = 37; break; //@line 923 "xmltok_impl.c"
      case 26: // $bb25
        var $136=HEAP[$end_addr]; //@line 923 "xmltok_impl.c"
        var $137=($136); //@line 923 "xmltok_impl.c"
        var $138=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        var $139=($138); //@line 923 "xmltok_impl.c"
        var $140=((($137) - ($139))&4294967295); //@line 923 "xmltok_impl.c"
        var $141=((($140))|0) <= 1; //@line 923 "xmltok_impl.c"
        if ($141) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 923 "xmltok_impl.c"
      case 27: // $bb26
        HEAP[$0]=-2; //@line 923 "xmltok_impl.c"
        __label__ = 39; break; //@line 923 "xmltok_impl.c"
      case 28: // $bb27
        var $142=HEAP[$nextTokPtr_addr]; //@line 923 "xmltok_impl.c"
        var $143=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        HEAP[$142]=$143; //@line 923 "xmltok_impl.c"
        HEAP[$0]=0; //@line 923 "xmltok_impl.c"
        __label__ = 39; break; //@line 923 "xmltok_impl.c"
      case 29: // $bb28
        var $144=HEAP[$end_addr]; //@line 923 "xmltok_impl.c"
        var $145=($144); //@line 923 "xmltok_impl.c"
        var $146=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        var $147=($146); //@line 923 "xmltok_impl.c"
        var $148=((($145) - ($147))&4294967295); //@line 923 "xmltok_impl.c"
        var $149=((($148))|0) <= 2; //@line 923 "xmltok_impl.c"
        if ($149) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 923 "xmltok_impl.c"
      case 30: // $bb29
        HEAP[$0]=-2; //@line 923 "xmltok_impl.c"
        __label__ = 39; break; //@line 923 "xmltok_impl.c"
      case 31: // $bb30
        var $150=HEAP[$nextTokPtr_addr]; //@line 923 "xmltok_impl.c"
        var $151=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        HEAP[$150]=$151; //@line 923 "xmltok_impl.c"
        HEAP[$0]=0; //@line 923 "xmltok_impl.c"
        __label__ = 39; break; //@line 923 "xmltok_impl.c"
      case 32: // $bb31
        var $152=HEAP[$end_addr]; //@line 923 "xmltok_impl.c"
        var $153=($152); //@line 923 "xmltok_impl.c"
        var $154=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        var $155=($154); //@line 923 "xmltok_impl.c"
        var $156=((($153) - ($155))&4294967295); //@line 923 "xmltok_impl.c"
        var $157=((($156))|0) <= 3; //@line 923 "xmltok_impl.c"
        if ($157) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 923 "xmltok_impl.c"
      case 33: // $bb32
        HEAP[$0]=-2; //@line 923 "xmltok_impl.c"
        __label__ = 39; break; //@line 923 "xmltok_impl.c"
      case 34: // $bb33
        var $158=HEAP[$nextTokPtr_addr]; //@line 923 "xmltok_impl.c"
        var $159=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        HEAP[$158]=$159; //@line 923 "xmltok_impl.c"
        HEAP[$0]=0; //@line 923 "xmltok_impl.c"
        __label__ = 39; break; //@line 923 "xmltok_impl.c"
      case 35: // $bb34
        var $160=HEAP[$nextTokPtr_addr]; //@line 926 "xmltok_impl.c"
        var $161=HEAP[$ptr_addr]; //@line 926 "xmltok_impl.c"
        HEAP[$160]=$161; //@line 926 "xmltok_impl.c"
        HEAP[$0]=20; //@line 927 "xmltok_impl.c"
        __label__ = 39; break; //@line 927 "xmltok_impl.c"
      case 36: // $bb35
        var $162=HEAP[$nextTokPtr_addr]; //@line 929 "xmltok_impl.c"
        var $163=HEAP[$ptr_addr]; //@line 929 "xmltok_impl.c"
        HEAP[$162]=$163; //@line 929 "xmltok_impl.c"
        HEAP[$0]=0; //@line 930 "xmltok_impl.c"
        __label__ = 39; break; //@line 930 "xmltok_impl.c"
      case 37: // $bb36
        var $164=HEAP[$ptr_addr]; //@line 921 "xmltok_impl.c"
        var $165=HEAP[$end_addr]; //@line 921 "xmltok_impl.c"
        var $166=($164)!=($165); //@line 921 "xmltok_impl.c"
        if ($166) { __label__ = 19; break; } else { __label__ = 38; break; } //@line 921 "xmltok_impl.c"
      case 38: // $bb37
        HEAP[$0]=-20; //@line 933 "xmltok_impl.c"
        __label__ = 39; break; //@line 933 "xmltok_impl.c"
      case 39: // $bb38
        var $167=HEAP[$0]; //@line 914 "xmltok_impl.c"
        HEAP[$retval]=$167; //@line 914 "xmltok_impl.c"
        __label__ = 40; break; //@line 914 "xmltok_impl.c"
      case 40: // $return
        var $retval39=HEAP[$retval]; //@line 914 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval39; //@line 914 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_scanLit($open, $enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $open_addr=__stackBase__;
        var $enc_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $nextTokPtr_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $iftmp_768=__stackBase__+24;
        var $0=__stackBase__+28;
        var $iftmp_760=__stackBase__+32;
        var $t=__stackBase__+36;
        var $_alloca_point_=0;
        HEAP[$open_addr]=$open;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        __label__ = 25; break; //@line 941 "xmltok_impl.c"
      case 1: // $bb
        var $1=HEAP[$ptr_addr]; //@line 942 "xmltok_impl.c"
        var $2=(($1+1)&4294967295); //@line 942 "xmltok_impl.c"
        var $3=HEAP[$2]; //@line 942 "xmltok_impl.c"
        var $4=reSign(($3), 8, 0)==0; //@line 942 "xmltok_impl.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 942 "xmltok_impl.c"
      case 2: // $bb1
        var $5=HEAP[$enc_addr]; //@line 942 "xmltok_impl.c"
        var $6=$5; //@line 942 "xmltok_impl.c"
        var $7=HEAP[$ptr_addr]; //@line 942 "xmltok_impl.c"
        var $8=HEAP[$7]; //@line 942 "xmltok_impl.c"
        var $9=unSign(($8), 8, 0); //@line 942 "xmltok_impl.c"
        var $10=(($6+72)&4294967295); //@line 942 "xmltok_impl.c"
        var $11=(($10+$9)&4294967295); //@line 942 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 942 "xmltok_impl.c"
        var $13=unSign(($12), 8, 0); //@line 942 "xmltok_impl.c"
        HEAP[$iftmp_760]=$13; //@line 942 "xmltok_impl.c"
        __label__ = 4; break; //@line 942 "xmltok_impl.c"
      case 3: // $bb2
        var $14=HEAP[$ptr_addr]; //@line 942 "xmltok_impl.c"
        var $15=(($14)&4294967295); //@line 942 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 942 "xmltok_impl.c"
        var $17=reSign(($16), 8, 0); //@line 942 "xmltok_impl.c"
        var $18=HEAP[$ptr_addr]; //@line 942 "xmltok_impl.c"
        var $19=(($18+1)&4294967295); //@line 942 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 942 "xmltok_impl.c"
        var $21=reSign(($20), 8, 0); //@line 942 "xmltok_impl.c"
        var $22=((($21)) & 255); //@line 942 "xmltok_impl.c"
        var $23=((($17)) & 255); //@line 942 "xmltok_impl.c"
        var $24=_unicode_byte_type($22, $23); //@line 942 "xmltok_impl.c"
        HEAP[$iftmp_760]=$24; //@line 942 "xmltok_impl.c"
        __label__ = 4; break; //@line 942 "xmltok_impl.c"
      case 4: // $bb3
        var $25=HEAP[$iftmp_760]; //@line 942 "xmltok_impl.c"
        HEAP[$t]=$25; //@line 942 "xmltok_impl.c"
        var $26=HEAP[$t]; //@line 943 "xmltok_impl.c"
        if ($26 == 0) {
          __label__ = 14; break;
        }
        else if ($26 == 1) {
          __label__ = 14; break;
        }
        else if ($26 == 5) {
          __label__ = 5; break;
        }
        else if ($26 == 6) {
          __label__ = 8; break;
        }
        else if ($26 == 7) {
          __label__ = 11; break;
        }
        else if ($26 == 8) {
          __label__ = 14; break;
        }
        else if ($26 == 12) {
          __label__ = 15; break;
        }
        else if ($26 == 13) {
          __label__ = 15; break;
        }
        else {
        __label__ = 24; break;
        }
        
      case 5: // $bb4
        var $27=HEAP[$end_addr]; //@line 944 "xmltok_impl.c"
        var $28=($27); //@line 944 "xmltok_impl.c"
        var $29=HEAP[$ptr_addr]; //@line 944 "xmltok_impl.c"
        var $30=($29); //@line 944 "xmltok_impl.c"
        var $31=((($28) - ($30))&4294967295); //@line 944 "xmltok_impl.c"
        var $32=((($31))|0) <= 1; //@line 944 "xmltok_impl.c"
        if ($32) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 944 "xmltok_impl.c"
      case 6: // $bb5
        HEAP[$0]=-2; //@line 944 "xmltok_impl.c"
        __label__ = 27; break; //@line 944 "xmltok_impl.c"
      case 7: // $bb6
        var $33=HEAP[$ptr_addr]; //@line 944 "xmltok_impl.c"
        var $34=(($33+2)&4294967295); //@line 944 "xmltok_impl.c"
        HEAP[$ptr_addr]=$34; //@line 944 "xmltok_impl.c"
        __label__ = 25; break; //@line 944 "xmltok_impl.c"
      case 8: // $bb7
        var $35=HEAP[$end_addr]; //@line 944 "xmltok_impl.c"
        var $36=($35); //@line 944 "xmltok_impl.c"
        var $37=HEAP[$ptr_addr]; //@line 944 "xmltok_impl.c"
        var $38=($37); //@line 944 "xmltok_impl.c"
        var $39=((($36) - ($38))&4294967295); //@line 944 "xmltok_impl.c"
        var $40=((($39))|0) <= 2; //@line 944 "xmltok_impl.c"
        if ($40) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 944 "xmltok_impl.c"
      case 9: // $bb8
        HEAP[$0]=-2; //@line 944 "xmltok_impl.c"
        __label__ = 27; break; //@line 944 "xmltok_impl.c"
      case 10: // $bb9
        var $41=HEAP[$ptr_addr]; //@line 944 "xmltok_impl.c"
        var $42=(($41+3)&4294967295); //@line 944 "xmltok_impl.c"
        HEAP[$ptr_addr]=$42; //@line 944 "xmltok_impl.c"
        __label__ = 25; break; //@line 944 "xmltok_impl.c"
      case 11: // $bb10
        var $43=HEAP[$end_addr]; //@line 944 "xmltok_impl.c"
        var $44=($43); //@line 944 "xmltok_impl.c"
        var $45=HEAP[$ptr_addr]; //@line 944 "xmltok_impl.c"
        var $46=($45); //@line 944 "xmltok_impl.c"
        var $47=((($44) - ($46))&4294967295); //@line 944 "xmltok_impl.c"
        var $48=((($47))|0) <= 3; //@line 944 "xmltok_impl.c"
        if ($48) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 944 "xmltok_impl.c"
      case 12: // $bb11
        HEAP[$0]=-2; //@line 944 "xmltok_impl.c"
        __label__ = 27; break; //@line 944 "xmltok_impl.c"
      case 13: // $bb12
        var $49=HEAP[$ptr_addr]; //@line 944 "xmltok_impl.c"
        var $50=(($49+4)&4294967295); //@line 944 "xmltok_impl.c"
        HEAP[$ptr_addr]=$50; //@line 944 "xmltok_impl.c"
        __label__ = 25; break; //@line 944 "xmltok_impl.c"
      case 14: // $bb13
        var $51=HEAP[$nextTokPtr_addr]; //@line 944 "xmltok_impl.c"
        var $52=HEAP[$ptr_addr]; //@line 944 "xmltok_impl.c"
        HEAP[$51]=$52; //@line 944 "xmltok_impl.c"
        HEAP[$0]=0; //@line 944 "xmltok_impl.c"
        __label__ = 27; break; //@line 944 "xmltok_impl.c"
      case 15: // $bb14
        var $53=HEAP[$ptr_addr]; //@line 947 "xmltok_impl.c"
        var $54=(($53+2)&4294967295); //@line 947 "xmltok_impl.c"
        HEAP[$ptr_addr]=$54; //@line 947 "xmltok_impl.c"
        var $55=HEAP[$t]; //@line 948 "xmltok_impl.c"
        var $56=HEAP[$open_addr]; //@line 948 "xmltok_impl.c"
        var $57=((($55))|0)!=((($56))|0); //@line 948 "xmltok_impl.c"
        if ($57) { __label__ = 25; break; } else { __label__ = 16; break; } //@line 948 "xmltok_impl.c"
      case 16: // $bb15
        var $58=HEAP[$ptr_addr]; //@line 950 "xmltok_impl.c"
        var $59=HEAP[$end_addr]; //@line 950 "xmltok_impl.c"
        var $60=($58)==($59); //@line 950 "xmltok_impl.c"
        if ($60) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 950 "xmltok_impl.c"
      case 17: // $bb16
        HEAP[$0]=-27; //@line 951 "xmltok_impl.c"
        __label__ = 27; break; //@line 951 "xmltok_impl.c"
      case 18: // $bb17
        var $61=HEAP[$nextTokPtr_addr]; //@line 952 "xmltok_impl.c"
        var $62=HEAP[$ptr_addr]; //@line 952 "xmltok_impl.c"
        HEAP[$61]=$62; //@line 952 "xmltok_impl.c"
        var $63=HEAP[$ptr_addr]; //@line 953 "xmltok_impl.c"
        var $64=(($63+1)&4294967295); //@line 953 "xmltok_impl.c"
        var $65=HEAP[$64]; //@line 953 "xmltok_impl.c"
        var $66=reSign(($65), 8, 0)==0; //@line 953 "xmltok_impl.c"
        if ($66) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 953 "xmltok_impl.c"
      case 19: // $bb18
        var $67=HEAP[$enc_addr]; //@line 953 "xmltok_impl.c"
        var $68=$67; //@line 953 "xmltok_impl.c"
        var $69=HEAP[$ptr_addr]; //@line 953 "xmltok_impl.c"
        var $70=HEAP[$69]; //@line 953 "xmltok_impl.c"
        var $71=unSign(($70), 8, 0); //@line 953 "xmltok_impl.c"
        var $72=(($68+72)&4294967295); //@line 953 "xmltok_impl.c"
        var $73=(($72+$71)&4294967295); //@line 953 "xmltok_impl.c"
        var $74=HEAP[$73]; //@line 953 "xmltok_impl.c"
        var $75=unSign(($74), 8, 0); //@line 953 "xmltok_impl.c"
        HEAP[$iftmp_768]=$75; //@line 953 "xmltok_impl.c"
        __label__ = 21; break; //@line 953 "xmltok_impl.c"
      case 20: // $bb19
        var $76=HEAP[$ptr_addr]; //@line 953 "xmltok_impl.c"
        var $77=(($76)&4294967295); //@line 953 "xmltok_impl.c"
        var $78=HEAP[$77]; //@line 953 "xmltok_impl.c"
        var $79=reSign(($78), 8, 0); //@line 953 "xmltok_impl.c"
        var $80=HEAP[$ptr_addr]; //@line 953 "xmltok_impl.c"
        var $81=(($80+1)&4294967295); //@line 953 "xmltok_impl.c"
        var $82=HEAP[$81]; //@line 953 "xmltok_impl.c"
        var $83=reSign(($82), 8, 0); //@line 953 "xmltok_impl.c"
        var $84=((($83)) & 255); //@line 953 "xmltok_impl.c"
        var $85=((($79)) & 255); //@line 953 "xmltok_impl.c"
        var $86=_unicode_byte_type($84, $85); //@line 953 "xmltok_impl.c"
        HEAP[$iftmp_768]=$86; //@line 953 "xmltok_impl.c"
        __label__ = 21; break; //@line 953 "xmltok_impl.c"
      case 21: // $bb20
        var $87=HEAP[$iftmp_768]; //@line 953 "xmltok_impl.c"
        if ($87 == 9) {
          __label__ = 22; break;
        }
        else if ($87 == 10) {
          __label__ = 22; break;
        }
        else if ($87 == 11) {
          __label__ = 22; break;
        }
        else if ($87 == 20) {
          __label__ = 22; break;
        }
        else if ($87 == 21) {
          __label__ = 22; break;
        }
        else if ($87 == 30) {
          __label__ = 22; break;
        }
        else {
        __label__ = 23; break;
        }
        
      case 22: // $bb21
        HEAP[$0]=27; //@line 956 "xmltok_impl.c"
        __label__ = 27; break; //@line 956 "xmltok_impl.c"
      case 23: // $bb22
        HEAP[$0]=0; //@line 958 "xmltok_impl.c"
        __label__ = 27; break; //@line 958 "xmltok_impl.c"
      case 24: // $bb23
        var $88=HEAP[$ptr_addr]; //@line 961 "xmltok_impl.c"
        var $89=(($88+2)&4294967295); //@line 961 "xmltok_impl.c"
        HEAP[$ptr_addr]=$89; //@line 961 "xmltok_impl.c"
        __label__ = 25; break; //@line 961 "xmltok_impl.c"
      case 25: // $bb24
        var $90=HEAP[$ptr_addr]; //@line 941 "xmltok_impl.c"
        var $91=HEAP[$end_addr]; //@line 941 "xmltok_impl.c"
        var $92=($90)!=($91); //@line 941 "xmltok_impl.c"
        if ($92) { __label__ = 1; break; } else { __label__ = 26; break; } //@line 941 "xmltok_impl.c"
      case 26: // $bb25
        HEAP[$0]=-1; //@line 965 "xmltok_impl.c"
        __label__ = 27; break; //@line 965 "xmltok_impl.c"
      case 27: // $bb26
        var $93=HEAP[$0]; //@line 944 "xmltok_impl.c"
        HEAP[$retval]=$93; //@line 944 "xmltok_impl.c"
        __label__ = 28; break; //@line 944 "xmltok_impl.c"
      case 28: // $return
        var $retval27=HEAP[$retval]; //@line 944 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval27; //@line 944 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_prologTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 52; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 52);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_787=__stackBase__+20;
        var $iftmp_779=__stackBase__+24;
        var $iftmp_777=__stackBase__+28;
        var $iftmp_775=__stackBase__+32;
        var $iftmp_773=__stackBase__+36;
        var $0=__stackBase__+40;
        var $tok=__stackBase__+44;
        var $n=__stackBase__+48;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 973 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 973 "xmltok_impl.c"
        var $3=($1)==($2); //@line 973 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 973 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-4; //@line 974 "xmltok_impl.c"
        __label__ = 108; break; //@line 974 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$end_addr]; //@line 976 "xmltok_impl.c"
        var $5=($4); //@line 976 "xmltok_impl.c"
        var $6=HEAP[$ptr_addr]; //@line 976 "xmltok_impl.c"
        var $7=($6); //@line 976 "xmltok_impl.c"
        var $8=((($5) - ($7))&4294967295); //@line 976 "xmltok_impl.c"
        HEAP[$n]=$8; //@line 976 "xmltok_impl.c"
        var $9=HEAP[$n]; //@line 977 "xmltok_impl.c"
        var $10=($9) & 1; //@line 977 "xmltok_impl.c"
        var $11=((($10)) & 255); //@line 977 "xmltok_impl.c"
        var $toBool=reSign(($11), 8, 0)!=0; //@line 977 "xmltok_impl.c"
        if ($toBool) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 977 "xmltok_impl.c"
      case 3: // $bb2
        var $12=HEAP[$n]; //@line 978 "xmltok_impl.c"
        var $13=($12) & -2; //@line 978 "xmltok_impl.c"
        HEAP[$n]=$13; //@line 978 "xmltok_impl.c"
        var $14=HEAP[$n]; //@line 979 "xmltok_impl.c"
        var $15=((($14))|0)==0; //@line 979 "xmltok_impl.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 979 "xmltok_impl.c"
      case 4: // $bb3
        HEAP[$0]=-1; //@line 980 "xmltok_impl.c"
        __label__ = 108; break; //@line 980 "xmltok_impl.c"
      case 5: // $bb4
        var $16=HEAP[$ptr_addr]; //@line 981 "xmltok_impl.c"
        var $17=HEAP[$n]; //@line 981 "xmltok_impl.c"
        var $18=(($16+$17)&4294967295); //@line 981 "xmltok_impl.c"
        HEAP[$end_addr]=$18; //@line 981 "xmltok_impl.c"
        __label__ = 6; break; //@line 981 "xmltok_impl.c"
      case 6: // $bb5
        var $19=HEAP[$ptr_addr]; //@line 984 "xmltok_impl.c"
        var $20=(($19+1)&4294967295); //@line 984 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 984 "xmltok_impl.c"
        var $22=reSign(($21), 8, 0)==0; //@line 984 "xmltok_impl.c"
        if ($22) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 984 "xmltok_impl.c"
      case 7: // $bb6
        var $23=HEAP[$enc_addr]; //@line 984 "xmltok_impl.c"
        var $24=$23; //@line 984 "xmltok_impl.c"
        var $25=HEAP[$ptr_addr]; //@line 984 "xmltok_impl.c"
        var $26=HEAP[$25]; //@line 984 "xmltok_impl.c"
        var $27=unSign(($26), 8, 0); //@line 984 "xmltok_impl.c"
        var $28=(($24+72)&4294967295); //@line 984 "xmltok_impl.c"
        var $29=(($28+$27)&4294967295); //@line 984 "xmltok_impl.c"
        var $30=HEAP[$29]; //@line 984 "xmltok_impl.c"
        var $31=unSign(($30), 8, 0); //@line 984 "xmltok_impl.c"
        HEAP[$iftmp_773]=$31; //@line 984 "xmltok_impl.c"
        __label__ = 9; break; //@line 984 "xmltok_impl.c"
      case 8: // $bb7
        var $32=HEAP[$ptr_addr]; //@line 984 "xmltok_impl.c"
        var $33=(($32)&4294967295); //@line 984 "xmltok_impl.c"
        var $34=HEAP[$33]; //@line 984 "xmltok_impl.c"
        var $35=reSign(($34), 8, 0); //@line 984 "xmltok_impl.c"
        var $36=HEAP[$ptr_addr]; //@line 984 "xmltok_impl.c"
        var $37=(($36+1)&4294967295); //@line 984 "xmltok_impl.c"
        var $38=HEAP[$37]; //@line 984 "xmltok_impl.c"
        var $39=reSign(($38), 8, 0); //@line 984 "xmltok_impl.c"
        var $40=((($39)) & 255); //@line 984 "xmltok_impl.c"
        var $41=((($35)) & 255); //@line 984 "xmltok_impl.c"
        var $42=_unicode_byte_type($40, $41); //@line 984 "xmltok_impl.c"
        HEAP[$iftmp_773]=$42; //@line 984 "xmltok_impl.c"
        __label__ = 9; break; //@line 984 "xmltok_impl.c"
      case 9: // $bb8
        var $43=HEAP[$iftmp_773]; //@line 984 "xmltok_impl.c"
        if ($43 == 2) {
          __label__ = 12; break;
        }
        else if ($43 == 4) {
          __label__ = 37; break;
        }
        else if ($43 == 5) {
          __label__ = 62; break;
        }
        else if ($43 == 6) {
          __label__ = 65; break;
        }
        else if ($43 == 7) {
          __label__ = 68; break;
        }
        else if ($43 == 9) {
          __label__ = 22; break;
        }
        else if ($43 == 10) {
          __label__ = 24; break;
        }
        else if ($43 == 11) {
          __label__ = 60; break;
        }
        else if ($43 == 12) {
          __label__ = 10; break;
        }
        else if ($43 == 13) {
          __label__ = 11; break;
        }
        else if ($43 == 19) {
          __label__ = 61; break;
        }
        else if ($43 == 20) {
          __label__ = 36; break;
        }
        else if ($43 == 21) {
          __label__ = 24; break;
        }
        else if ($43 == 22) {
          __label__ = 71; break;
        }
        else if ($43 == 24) {
          __label__ = 71; break;
        }
        else if ($43 == 25) {
          __label__ = 72; break;
        }
        else if ($43 == 26) {
          __label__ = 72; break;
        }
        else if ($43 == 27) {
          __label__ = 72; break;
        }
        else if ($43 == 29) {
          __label__ = 73; break;
        }
        else if ($43 == 30) {
          __label__ = 34; break;
        }
        else if ($43 == 31) {
          __label__ = 47; break;
        }
        else if ($43 == 32) {
          __label__ = 48; break;
        }
        else if ($43 == 35) {
          __label__ = 35; break;
        }
        else if ($43 == 36) {
          __label__ = 59; break;
        }
        else {
        __label__ = 77; break;
        }
        
      case 10: // $bb9
        var $44=HEAP[$ptr_addr]; //@line 986 "xmltok_impl.c"
        var $45=(($44+2)&4294967295); //@line 986 "xmltok_impl.c"
        var $46=HEAP[$enc_addr]; //@line 986 "xmltok_impl.c"
        var $47=HEAP[$end_addr]; //@line 986 "xmltok_impl.c"
        var $48=HEAP[$nextTokPtr_addr]; //@line 986 "xmltok_impl.c"
        var $49=_little2_scanLit(12, $46, $45, $47, $48); //@line 986 "xmltok_impl.c"
        HEAP[$0]=$49; //@line 986 "xmltok_impl.c"
        __label__ = 108; break; //@line 986 "xmltok_impl.c"
      case 11: // $bb10
        var $50=HEAP[$ptr_addr]; //@line 988 "xmltok_impl.c"
        var $51=(($50+2)&4294967295); //@line 988 "xmltok_impl.c"
        var $52=HEAP[$enc_addr]; //@line 988 "xmltok_impl.c"
        var $53=HEAP[$end_addr]; //@line 988 "xmltok_impl.c"
        var $54=HEAP[$nextTokPtr_addr]; //@line 988 "xmltok_impl.c"
        var $55=_little2_scanLit(13, $52, $51, $53, $54); //@line 988 "xmltok_impl.c"
        HEAP[$0]=$55; //@line 988 "xmltok_impl.c"
        __label__ = 108; break; //@line 988 "xmltok_impl.c"
      case 12: // $bb11
        var $56=HEAP[$ptr_addr]; //@line 991 "xmltok_impl.c"
        var $57=(($56+2)&4294967295); //@line 991 "xmltok_impl.c"
        HEAP[$ptr_addr]=$57; //@line 991 "xmltok_impl.c"
        var $58=HEAP[$ptr_addr]; //@line 992 "xmltok_impl.c"
        var $59=HEAP[$end_addr]; //@line 992 "xmltok_impl.c"
        var $60=($58)==($59); //@line 992 "xmltok_impl.c"
        if ($60) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 992 "xmltok_impl.c"
      case 13: // $bb12
        HEAP[$0]=-1; //@line 993 "xmltok_impl.c"
        __label__ = 108; break; //@line 993 "xmltok_impl.c"
      case 14: // $bb13
        var $61=HEAP[$ptr_addr]; //@line 994 "xmltok_impl.c"
        var $62=(($61+1)&4294967295); //@line 994 "xmltok_impl.c"
        var $63=HEAP[$62]; //@line 994 "xmltok_impl.c"
        var $64=reSign(($63), 8, 0)==0; //@line 994 "xmltok_impl.c"
        if ($64) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 994 "xmltok_impl.c"
      case 15: // $bb14
        var $65=HEAP[$enc_addr]; //@line 994 "xmltok_impl.c"
        var $66=$65; //@line 994 "xmltok_impl.c"
        var $67=HEAP[$ptr_addr]; //@line 994 "xmltok_impl.c"
        var $68=HEAP[$67]; //@line 994 "xmltok_impl.c"
        var $69=unSign(($68), 8, 0); //@line 994 "xmltok_impl.c"
        var $70=(($66+72)&4294967295); //@line 994 "xmltok_impl.c"
        var $71=(($70+$69)&4294967295); //@line 994 "xmltok_impl.c"
        var $72=HEAP[$71]; //@line 994 "xmltok_impl.c"
        var $73=unSign(($72), 8, 0); //@line 994 "xmltok_impl.c"
        HEAP[$iftmp_775]=$73; //@line 994 "xmltok_impl.c"
        __label__ = 17; break; //@line 994 "xmltok_impl.c"
      case 16: // $bb15
        var $74=HEAP[$ptr_addr]; //@line 994 "xmltok_impl.c"
        var $75=(($74)&4294967295); //@line 994 "xmltok_impl.c"
        var $76=HEAP[$75]; //@line 994 "xmltok_impl.c"
        var $77=reSign(($76), 8, 0); //@line 994 "xmltok_impl.c"
        var $78=HEAP[$ptr_addr]; //@line 994 "xmltok_impl.c"
        var $79=(($78+1)&4294967295); //@line 994 "xmltok_impl.c"
        var $80=HEAP[$79]; //@line 994 "xmltok_impl.c"
        var $81=reSign(($80), 8, 0); //@line 994 "xmltok_impl.c"
        var $82=((($81)) & 255); //@line 994 "xmltok_impl.c"
        var $83=((($77)) & 255); //@line 994 "xmltok_impl.c"
        var $84=_unicode_byte_type($82, $83); //@line 994 "xmltok_impl.c"
        HEAP[$iftmp_775]=$84; //@line 994 "xmltok_impl.c"
        __label__ = 17; break; //@line 994 "xmltok_impl.c"
      case 17: // $bb16
        var $85=HEAP[$iftmp_775]; //@line 994 "xmltok_impl.c"
        if ($85 == 5) {
          __label__ = 20; break;
        }
        else if ($85 == 6) {
          __label__ = 20; break;
        }
        else if ($85 == 7) {
          __label__ = 20; break;
        }
        else if ($85 == 15) {
          __label__ = 19; break;
        }
        else if ($85 == 16) {
          __label__ = 18; break;
        }
        else if ($85 == 22) {
          __label__ = 20; break;
        }
        else if ($85 == 24) {
          __label__ = 20; break;
        }
        else if ($85 == 29) {
          __label__ = 20; break;
        }
        else {
        __label__ = 21; break;
        }
        
      case 18: // $bb17
        var $86=HEAP[$ptr_addr]; //@line 996 "xmltok_impl.c"
        var $87=(($86+2)&4294967295); //@line 996 "xmltok_impl.c"
        var $88=HEAP[$enc_addr]; //@line 996 "xmltok_impl.c"
        var $89=HEAP[$end_addr]; //@line 996 "xmltok_impl.c"
        var $90=HEAP[$nextTokPtr_addr]; //@line 996 "xmltok_impl.c"
        var $91=_little2_scanDecl($88, $87, $89, $90); //@line 996 "xmltok_impl.c"
        HEAP[$0]=$91; //@line 996 "xmltok_impl.c"
        __label__ = 108; break; //@line 996 "xmltok_impl.c"
      case 19: // $bb18
        var $92=HEAP[$ptr_addr]; //@line 998 "xmltok_impl.c"
        var $93=(($92+2)&4294967295); //@line 998 "xmltok_impl.c"
        var $94=HEAP[$enc_addr]; //@line 998 "xmltok_impl.c"
        var $95=HEAP[$end_addr]; //@line 998 "xmltok_impl.c"
        var $96=HEAP[$nextTokPtr_addr]; //@line 998 "xmltok_impl.c"
        var $97=_little2_scanPi($94, $93, $95, $96); //@line 998 "xmltok_impl.c"
        HEAP[$0]=$97; //@line 998 "xmltok_impl.c"
        __label__ = 108; break; //@line 998 "xmltok_impl.c"
      case 20: // $bb19
        var $98=HEAP[$ptr_addr]; //@line 1005 "xmltok_impl.c"
        var $99=(($98+-2)&4294967295); //@line 1005 "xmltok_impl.c"
        var $100=HEAP[$nextTokPtr_addr]; //@line 1005 "xmltok_impl.c"
        HEAP[$100]=$99; //@line 1005 "xmltok_impl.c"
        HEAP[$0]=29; //@line 1006 "xmltok_impl.c"
        __label__ = 108; break; //@line 1006 "xmltok_impl.c"
      case 21: // $bb20
        var $101=HEAP[$nextTokPtr_addr]; //@line 1008 "xmltok_impl.c"
        var $102=HEAP[$ptr_addr]; //@line 1008 "xmltok_impl.c"
        HEAP[$101]=$102; //@line 1008 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1009 "xmltok_impl.c"
        __label__ = 108; break; //@line 1009 "xmltok_impl.c"
      case 22: // $bb21
        var $103=HEAP[$ptr_addr]; //@line 1012 "xmltok_impl.c"
        var $104=(($103+2)&4294967295); //@line 1012 "xmltok_impl.c"
        var $105=HEAP[$end_addr]; //@line 1012 "xmltok_impl.c"
        var $106=($104)==($105); //@line 1012 "xmltok_impl.c"
        if ($106) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 1012 "xmltok_impl.c"
      case 23: // $bb22
        var $107=HEAP[$nextTokPtr_addr]; //@line 1013 "xmltok_impl.c"
        var $108=HEAP[$end_addr]; //@line 1013 "xmltok_impl.c"
        HEAP[$107]=$108; //@line 1013 "xmltok_impl.c"
        HEAP[$0]=-15; //@line 1015 "xmltok_impl.c"
        __label__ = 108; break; //@line 1015 "xmltok_impl.c"
      case 24: // $bb23
        var $109=HEAP[$ptr_addr]; //@line 1020 "xmltok_impl.c"
        var $110=(($109+2)&4294967295); //@line 1020 "xmltok_impl.c"
        HEAP[$ptr_addr]=$110; //@line 1020 "xmltok_impl.c"
        var $111=HEAP[$ptr_addr]; //@line 1021 "xmltok_impl.c"
        var $112=HEAP[$end_addr]; //@line 1021 "xmltok_impl.c"
        var $113=($111)==($112); //@line 1021 "xmltok_impl.c"
        if ($113) { __label__ = 33; break; } else { __label__ = 25; break; } //@line 1021 "xmltok_impl.c"
      case 25: // $bb24
        var $114=HEAP[$ptr_addr]; //@line 1023 "xmltok_impl.c"
        var $115=(($114+1)&4294967295); //@line 1023 "xmltok_impl.c"
        var $116=HEAP[$115]; //@line 1023 "xmltok_impl.c"
        var $117=reSign(($116), 8, 0)==0; //@line 1023 "xmltok_impl.c"
        if ($117) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1023 "xmltok_impl.c"
      case 26: // $bb25
        var $118=HEAP[$enc_addr]; //@line 1023 "xmltok_impl.c"
        var $119=$118; //@line 1023 "xmltok_impl.c"
        var $120=HEAP[$ptr_addr]; //@line 1023 "xmltok_impl.c"
        var $121=HEAP[$120]; //@line 1023 "xmltok_impl.c"
        var $122=unSign(($121), 8, 0); //@line 1023 "xmltok_impl.c"
        var $123=(($119+72)&4294967295); //@line 1023 "xmltok_impl.c"
        var $124=(($123+$122)&4294967295); //@line 1023 "xmltok_impl.c"
        var $125=HEAP[$124]; //@line 1023 "xmltok_impl.c"
        var $126=unSign(($125), 8, 0); //@line 1023 "xmltok_impl.c"
        HEAP[$iftmp_777]=$126; //@line 1023 "xmltok_impl.c"
        __label__ = 28; break; //@line 1023 "xmltok_impl.c"
      case 27: // $bb26
        var $127=HEAP[$ptr_addr]; //@line 1023 "xmltok_impl.c"
        var $128=(($127)&4294967295); //@line 1023 "xmltok_impl.c"
        var $129=HEAP[$128]; //@line 1023 "xmltok_impl.c"
        var $130=reSign(($129), 8, 0); //@line 1023 "xmltok_impl.c"
        var $131=HEAP[$ptr_addr]; //@line 1023 "xmltok_impl.c"
        var $132=(($131+1)&4294967295); //@line 1023 "xmltok_impl.c"
        var $133=HEAP[$132]; //@line 1023 "xmltok_impl.c"
        var $134=reSign(($133), 8, 0); //@line 1023 "xmltok_impl.c"
        var $135=((($134)) & 255); //@line 1023 "xmltok_impl.c"
        var $136=((($130)) & 255); //@line 1023 "xmltok_impl.c"
        var $137=_unicode_byte_type($135, $136); //@line 1023 "xmltok_impl.c"
        HEAP[$iftmp_777]=$137; //@line 1023 "xmltok_impl.c"
        __label__ = 28; break; //@line 1023 "xmltok_impl.c"
      case 28: // $bb27
        var $138=HEAP[$iftmp_777]; //@line 1023 "xmltok_impl.c"
        if ($138 == 9) {
          __label__ = 30; break;
        }
        else if ($138 == 10) {
          __label__ = 29; break;
        }
        else if ($138 == 21) {
          __label__ = 29; break;
        }
        else {
        __label__ = 31; break;
        }
        
      case 29: // $bb28
        __label__ = 32; break; //@line 1023 "xmltok_impl.c"
      case 30: // $bb29
        var $139=HEAP[$ptr_addr]; //@line 1028 "xmltok_impl.c"
        var $140=(($139+2)&4294967295); //@line 1028 "xmltok_impl.c"
        var $141=HEAP[$end_addr]; //@line 1028 "xmltok_impl.c"
        var $142=($140)!=($141); //@line 1028 "xmltok_impl.c"
        if ($142) { __label__ = 32; break; } else { __label__ = 31; break; } //@line 1028 "xmltok_impl.c"
      case 31: // $bb30
        var $143=HEAP[$nextTokPtr_addr]; //@line 1032 "xmltok_impl.c"
        var $144=HEAP[$ptr_addr]; //@line 1032 "xmltok_impl.c"
        HEAP[$143]=$144; //@line 1032 "xmltok_impl.c"
        HEAP[$0]=15; //@line 1033 "xmltok_impl.c"
        __label__ = 108; break; //@line 1033 "xmltok_impl.c"
      case 32: // $bb31
        __label__ = 24; break; //@line 1033 "xmltok_impl.c"
      case 33: // $bb32
        var $145=HEAP[$nextTokPtr_addr]; //@line 1036 "xmltok_impl.c"
        var $146=HEAP[$ptr_addr]; //@line 1036 "xmltok_impl.c"
        HEAP[$145]=$146; //@line 1036 "xmltok_impl.c"
        HEAP[$0]=15; //@line 1037 "xmltok_impl.c"
        __label__ = 108; break; //@line 1037 "xmltok_impl.c"
      case 34: // $bb33
        var $147=HEAP[$ptr_addr]; //@line 1039 "xmltok_impl.c"
        var $148=(($147+2)&4294967295); //@line 1039 "xmltok_impl.c"
        var $149=HEAP[$enc_addr]; //@line 1039 "xmltok_impl.c"
        var $150=HEAP[$end_addr]; //@line 1039 "xmltok_impl.c"
        var $151=HEAP[$nextTokPtr_addr]; //@line 1039 "xmltok_impl.c"
        var $152=_little2_scanPercent($149, $148, $150, $151); //@line 1039 "xmltok_impl.c"
        HEAP[$0]=$152; //@line 1039 "xmltok_impl.c"
        __label__ = 108; break; //@line 1039 "xmltok_impl.c"
      case 35: // $bb34
        var $153=HEAP[$ptr_addr]; //@line 1041 "xmltok_impl.c"
        var $154=(($153+2)&4294967295); //@line 1041 "xmltok_impl.c"
        var $155=HEAP[$nextTokPtr_addr]; //@line 1041 "xmltok_impl.c"
        HEAP[$155]=$154; //@line 1041 "xmltok_impl.c"
        HEAP[$0]=38; //@line 1042 "xmltok_impl.c"
        __label__ = 108; break; //@line 1042 "xmltok_impl.c"
      case 36: // $bb35
        var $156=HEAP[$ptr_addr]; //@line 1044 "xmltok_impl.c"
        var $157=(($156+2)&4294967295); //@line 1044 "xmltok_impl.c"
        var $158=HEAP[$nextTokPtr_addr]; //@line 1044 "xmltok_impl.c"
        HEAP[$158]=$157; //@line 1044 "xmltok_impl.c"
        HEAP[$0]=25; //@line 1045 "xmltok_impl.c"
        __label__ = 108; break; //@line 1045 "xmltok_impl.c"
      case 37: // $bb36
        var $159=HEAP[$ptr_addr]; //@line 1047 "xmltok_impl.c"
        var $160=(($159+2)&4294967295); //@line 1047 "xmltok_impl.c"
        HEAP[$ptr_addr]=$160; //@line 1047 "xmltok_impl.c"
        var $161=HEAP[$ptr_addr]; //@line 1048 "xmltok_impl.c"
        var $162=HEAP[$end_addr]; //@line 1048 "xmltok_impl.c"
        var $163=($161)==($162); //@line 1048 "xmltok_impl.c"
        if ($163) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 1048 "xmltok_impl.c"
      case 38: // $bb37
        HEAP[$0]=-26; //@line 1049 "xmltok_impl.c"
        __label__ = 108; break; //@line 1049 "xmltok_impl.c"
      case 39: // $bb38
        var $164=HEAP[$ptr_addr]; //@line 1050 "xmltok_impl.c"
        var $165=(($164+1)&4294967295); //@line 1050 "xmltok_impl.c"
        var $166=HEAP[$165]; //@line 1050 "xmltok_impl.c"
        var $167=reSign(($166), 8, 0)==0; //@line 1050 "xmltok_impl.c"
        if ($167) { __label__ = 40; break; } else { __label__ = 46; break; } //@line 1050 "xmltok_impl.c"
      case 40: // $bb39
        var $168=HEAP[$ptr_addr]; //@line 1050 "xmltok_impl.c"
        var $169=(($168)&4294967295); //@line 1050 "xmltok_impl.c"
        var $170=HEAP[$169]; //@line 1050 "xmltok_impl.c"
        var $171=reSign(($170), 8, 0)==93; //@line 1050 "xmltok_impl.c"
        if ($171) { __label__ = 41; break; } else { __label__ = 46; break; } //@line 1050 "xmltok_impl.c"
      case 41: // $bb40
        var $172=HEAP[$ptr_addr]; //@line 1051 "xmltok_impl.c"
        var $173=(($172+2)&4294967295); //@line 1051 "xmltok_impl.c"
        var $174=HEAP[$end_addr]; //@line 1051 "xmltok_impl.c"
        var $175=($173)==($174); //@line 1051 "xmltok_impl.c"
        if ($175) { __label__ = 42; break; } else { __label__ = 43; break; } //@line 1051 "xmltok_impl.c"
      case 42: // $bb41
        HEAP[$0]=-1; //@line 1052 "xmltok_impl.c"
        __label__ = 108; break; //@line 1052 "xmltok_impl.c"
      case 43: // $bb42
        var $176=HEAP[$ptr_addr]; //@line 1053 "xmltok_impl.c"
        var $177=(($176+2)&4294967295); //@line 1053 "xmltok_impl.c"
        var $178=(($177+1)&4294967295); //@line 1053 "xmltok_impl.c"
        var $179=HEAP[$178]; //@line 1053 "xmltok_impl.c"
        var $180=reSign(($179), 8, 0)==0; //@line 1053 "xmltok_impl.c"
        if ($180) { __label__ = 44; break; } else { __label__ = 46; break; } //@line 1053 "xmltok_impl.c"
      case 44: // $bb43
        var $181=HEAP[$ptr_addr]; //@line 1053 "xmltok_impl.c"
        var $182=(($181+2)&4294967295); //@line 1053 "xmltok_impl.c"
        var $183=(($182)&4294967295); //@line 1053 "xmltok_impl.c"
        var $184=HEAP[$183]; //@line 1053 "xmltok_impl.c"
        var $185=reSign(($184), 8, 0)==62; //@line 1053 "xmltok_impl.c"
        if ($185) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 1053 "xmltok_impl.c"
      case 45: // $bb44
        var $186=HEAP[$ptr_addr]; //@line 1054 "xmltok_impl.c"
        var $187=(($186+4)&4294967295); //@line 1054 "xmltok_impl.c"
        var $188=HEAP[$nextTokPtr_addr]; //@line 1054 "xmltok_impl.c"
        HEAP[$188]=$187; //@line 1054 "xmltok_impl.c"
        HEAP[$0]=34; //@line 1055 "xmltok_impl.c"
        __label__ = 108; break; //@line 1055 "xmltok_impl.c"
      case 46: // $bb45
        var $189=HEAP[$nextTokPtr_addr]; //@line 1058 "xmltok_impl.c"
        var $190=HEAP[$ptr_addr]; //@line 1058 "xmltok_impl.c"
        HEAP[$189]=$190; //@line 1058 "xmltok_impl.c"
        HEAP[$0]=26; //@line 1059 "xmltok_impl.c"
        __label__ = 108; break; //@line 1059 "xmltok_impl.c"
      case 47: // $bb46
        var $191=HEAP[$ptr_addr]; //@line 1061 "xmltok_impl.c"
        var $192=(($191+2)&4294967295); //@line 1061 "xmltok_impl.c"
        var $193=HEAP[$nextTokPtr_addr]; //@line 1061 "xmltok_impl.c"
        HEAP[$193]=$192; //@line 1061 "xmltok_impl.c"
        HEAP[$0]=23; //@line 1062 "xmltok_impl.c"
        __label__ = 108; break; //@line 1062 "xmltok_impl.c"
      case 48: // $bb47
        var $194=HEAP[$ptr_addr]; //@line 1064 "xmltok_impl.c"
        var $195=(($194+2)&4294967295); //@line 1064 "xmltok_impl.c"
        HEAP[$ptr_addr]=$195; //@line 1064 "xmltok_impl.c"
        var $196=HEAP[$ptr_addr]; //@line 1065 "xmltok_impl.c"
        var $197=HEAP[$end_addr]; //@line 1065 "xmltok_impl.c"
        var $198=($196)==($197); //@line 1065 "xmltok_impl.c"
        if ($198) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 1065 "xmltok_impl.c"
      case 49: // $bb48
        HEAP[$0]=-24; //@line 1066 "xmltok_impl.c"
        __label__ = 108; break; //@line 1066 "xmltok_impl.c"
      case 50: // $bb49
        var $199=HEAP[$ptr_addr]; //@line 1067 "xmltok_impl.c"
        var $200=(($199+1)&4294967295); //@line 1067 "xmltok_impl.c"
        var $201=HEAP[$200]; //@line 1067 "xmltok_impl.c"
        var $202=reSign(($201), 8, 0)==0; //@line 1067 "xmltok_impl.c"
        if ($202) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 1067 "xmltok_impl.c"
      case 51: // $bb50
        var $203=HEAP[$enc_addr]; //@line 1067 "xmltok_impl.c"
        var $204=$203; //@line 1067 "xmltok_impl.c"
        var $205=HEAP[$ptr_addr]; //@line 1067 "xmltok_impl.c"
        var $206=HEAP[$205]; //@line 1067 "xmltok_impl.c"
        var $207=unSign(($206), 8, 0); //@line 1067 "xmltok_impl.c"
        var $208=(($204+72)&4294967295); //@line 1067 "xmltok_impl.c"
        var $209=(($208+$207)&4294967295); //@line 1067 "xmltok_impl.c"
        var $210=HEAP[$209]; //@line 1067 "xmltok_impl.c"
        var $211=unSign(($210), 8, 0); //@line 1067 "xmltok_impl.c"
        HEAP[$iftmp_779]=$211; //@line 1067 "xmltok_impl.c"
        __label__ = 53; break; //@line 1067 "xmltok_impl.c"
      case 52: // $bb51
        var $212=HEAP[$ptr_addr]; //@line 1067 "xmltok_impl.c"
        var $213=(($212)&4294967295); //@line 1067 "xmltok_impl.c"
        var $214=HEAP[$213]; //@line 1067 "xmltok_impl.c"
        var $215=reSign(($214), 8, 0); //@line 1067 "xmltok_impl.c"
        var $216=HEAP[$ptr_addr]; //@line 1067 "xmltok_impl.c"
        var $217=(($216+1)&4294967295); //@line 1067 "xmltok_impl.c"
        var $218=HEAP[$217]; //@line 1067 "xmltok_impl.c"
        var $219=reSign(($218), 8, 0); //@line 1067 "xmltok_impl.c"
        var $220=((($219)) & 255); //@line 1067 "xmltok_impl.c"
        var $221=((($215)) & 255); //@line 1067 "xmltok_impl.c"
        var $222=_unicode_byte_type($220, $221); //@line 1067 "xmltok_impl.c"
        HEAP[$iftmp_779]=$222; //@line 1067 "xmltok_impl.c"
        __label__ = 53; break; //@line 1067 "xmltok_impl.c"
      case 53: // $bb52
        var $223=HEAP[$iftmp_779]; //@line 1067 "xmltok_impl.c"
        if ($223 == 9) {
          __label__ = 57; break;
        }
        else if ($223 == 10) {
          __label__ = 57; break;
        }
        else if ($223 == 11) {
          __label__ = 57; break;
        }
        else if ($223 == 15) {
          __label__ = 55; break;
        }
        else if ($223 == 21) {
          __label__ = 57; break;
        }
        else if ($223 == 32) {
          __label__ = 57; break;
        }
        else if ($223 == 33) {
          __label__ = 54; break;
        }
        else if ($223 == 34) {
          __label__ = 56; break;
        }
        else if ($223 == 35) {
          __label__ = 57; break;
        }
        else if ($223 == 36) {
          __label__ = 57; break;
        }
        else {
        __label__ = 58; break;
        }
        
      case 54: // $bb53
        var $224=HEAP[$ptr_addr]; //@line 1069 "xmltok_impl.c"
        var $225=(($224+2)&4294967295); //@line 1069 "xmltok_impl.c"
        var $226=HEAP[$nextTokPtr_addr]; //@line 1069 "xmltok_impl.c"
        HEAP[$226]=$225; //@line 1069 "xmltok_impl.c"
        HEAP[$0]=36; //@line 1070 "xmltok_impl.c"
        __label__ = 108; break; //@line 1070 "xmltok_impl.c"
      case 55: // $bb54
        var $227=HEAP[$ptr_addr]; //@line 1072 "xmltok_impl.c"
        var $228=(($227+2)&4294967295); //@line 1072 "xmltok_impl.c"
        var $229=HEAP[$nextTokPtr_addr]; //@line 1072 "xmltok_impl.c"
        HEAP[$229]=$228; //@line 1072 "xmltok_impl.c"
        HEAP[$0]=35; //@line 1073 "xmltok_impl.c"
        __label__ = 108; break; //@line 1073 "xmltok_impl.c"
      case 56: // $bb55
        var $230=HEAP[$ptr_addr]; //@line 1075 "xmltok_impl.c"
        var $231=(($230+2)&4294967295); //@line 1075 "xmltok_impl.c"
        var $232=HEAP[$nextTokPtr_addr]; //@line 1075 "xmltok_impl.c"
        HEAP[$232]=$231; //@line 1075 "xmltok_impl.c"
        HEAP[$0]=37; //@line 1076 "xmltok_impl.c"
        __label__ = 108; break; //@line 1076 "xmltok_impl.c"
      case 57: // $bb56
        var $233=HEAP[$nextTokPtr_addr]; //@line 1080 "xmltok_impl.c"
        var $234=HEAP[$ptr_addr]; //@line 1080 "xmltok_impl.c"
        HEAP[$233]=$234; //@line 1080 "xmltok_impl.c"
        HEAP[$0]=24; //@line 1081 "xmltok_impl.c"
        __label__ = 108; break; //@line 1081 "xmltok_impl.c"
      case 58: // $bb57
        var $235=HEAP[$nextTokPtr_addr]; //@line 1083 "xmltok_impl.c"
        var $236=HEAP[$ptr_addr]; //@line 1083 "xmltok_impl.c"
        HEAP[$235]=$236; //@line 1083 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1084 "xmltok_impl.c"
        __label__ = 108; break; //@line 1084 "xmltok_impl.c"
      case 59: // $bb58
        var $237=HEAP[$ptr_addr]; //@line 1086 "xmltok_impl.c"
        var $238=(($237+2)&4294967295); //@line 1086 "xmltok_impl.c"
        var $239=HEAP[$nextTokPtr_addr]; //@line 1086 "xmltok_impl.c"
        HEAP[$239]=$238; //@line 1086 "xmltok_impl.c"
        HEAP[$0]=21; //@line 1087 "xmltok_impl.c"
        __label__ = 108; break; //@line 1087 "xmltok_impl.c"
      case 60: // $bb59
        var $240=HEAP[$ptr_addr]; //@line 1089 "xmltok_impl.c"
        var $241=(($240+2)&4294967295); //@line 1089 "xmltok_impl.c"
        var $242=HEAP[$nextTokPtr_addr]; //@line 1089 "xmltok_impl.c"
        HEAP[$242]=$241; //@line 1089 "xmltok_impl.c"
        HEAP[$0]=17; //@line 1090 "xmltok_impl.c"
        __label__ = 108; break; //@line 1090 "xmltok_impl.c"
      case 61: // $bb60
        var $243=HEAP[$ptr_addr]; //@line 1092 "xmltok_impl.c"
        var $244=(($243+2)&4294967295); //@line 1092 "xmltok_impl.c"
        var $245=HEAP[$enc_addr]; //@line 1092 "xmltok_impl.c"
        var $246=HEAP[$end_addr]; //@line 1092 "xmltok_impl.c"
        var $247=HEAP[$nextTokPtr_addr]; //@line 1092 "xmltok_impl.c"
        var $248=_little2_scanPoundName($245, $244, $246, $247); //@line 1092 "xmltok_impl.c"
        HEAP[$0]=$248; //@line 1092 "xmltok_impl.c"
        __label__ = 108; break; //@line 1092 "xmltok_impl.c"
      case 62: // $bb61
        var $249=HEAP[$end_addr]; //@line 1109 "xmltok_impl.c"
        var $250=($249); //@line 1109 "xmltok_impl.c"
        var $251=HEAP[$ptr_addr]; //@line 1109 "xmltok_impl.c"
        var $252=($251); //@line 1109 "xmltok_impl.c"
        var $253=((($250) - ($252))&4294967295); //@line 1109 "xmltok_impl.c"
        var $254=((($253))|0) <= 1; //@line 1109 "xmltok_impl.c"
        if ($254) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 1109 "xmltok_impl.c"
      case 63: // $bb62
        HEAP[$0]=-2; //@line 1109 "xmltok_impl.c"
        __label__ = 108; break; //@line 1109 "xmltok_impl.c"
      case 64: // $bb63
        var $255=HEAP[$nextTokPtr_addr]; //@line 1109 "xmltok_impl.c"
        var $256=HEAP[$ptr_addr]; //@line 1109 "xmltok_impl.c"
        HEAP[$255]=$256; //@line 1109 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1109 "xmltok_impl.c"
        __label__ = 108; break; //@line 1109 "xmltok_impl.c"
      case 65: // $bb64
        var $257=HEAP[$end_addr]; //@line 1109 "xmltok_impl.c"
        var $258=($257); //@line 1109 "xmltok_impl.c"
        var $259=HEAP[$ptr_addr]; //@line 1109 "xmltok_impl.c"
        var $260=($259); //@line 1109 "xmltok_impl.c"
        var $261=((($258) - ($260))&4294967295); //@line 1109 "xmltok_impl.c"
        var $262=((($261))|0) <= 2; //@line 1109 "xmltok_impl.c"
        if ($262) { __label__ = 66; break; } else { __label__ = 67; break; } //@line 1109 "xmltok_impl.c"
      case 66: // $bb65
        HEAP[$0]=-2; //@line 1109 "xmltok_impl.c"
        __label__ = 108; break; //@line 1109 "xmltok_impl.c"
      case 67: // $bb66
        var $263=HEAP[$nextTokPtr_addr]; //@line 1109 "xmltok_impl.c"
        var $264=HEAP[$ptr_addr]; //@line 1109 "xmltok_impl.c"
        HEAP[$263]=$264; //@line 1109 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1109 "xmltok_impl.c"
        __label__ = 108; break; //@line 1109 "xmltok_impl.c"
      case 68: // $bb67
        var $265=HEAP[$end_addr]; //@line 1109 "xmltok_impl.c"
        var $266=($265); //@line 1109 "xmltok_impl.c"
        var $267=HEAP[$ptr_addr]; //@line 1109 "xmltok_impl.c"
        var $268=($267); //@line 1109 "xmltok_impl.c"
        var $269=((($266) - ($268))&4294967295); //@line 1109 "xmltok_impl.c"
        var $270=((($269))|0) <= 3; //@line 1109 "xmltok_impl.c"
        if ($270) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 1109 "xmltok_impl.c"
      case 69: // $bb68
        HEAP[$0]=-2; //@line 1109 "xmltok_impl.c"
        __label__ = 108; break; //@line 1109 "xmltok_impl.c"
      case 70: // $bb69
        var $271=HEAP[$nextTokPtr_addr]; //@line 1109 "xmltok_impl.c"
        var $272=HEAP[$ptr_addr]; //@line 1109 "xmltok_impl.c"
        HEAP[$271]=$272; //@line 1109 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1109 "xmltok_impl.c"
        __label__ = 108; break; //@line 1109 "xmltok_impl.c"
      case 71: // $bb70
        HEAP[$tok]=18; //@line 1113 "xmltok_impl.c"
        var $273=HEAP[$ptr_addr]; //@line 1114 "xmltok_impl.c"
        var $274=(($273+2)&4294967295); //@line 1114 "xmltok_impl.c"
        HEAP[$ptr_addr]=$274; //@line 1114 "xmltok_impl.c"
        __label__ = 78; break; //@line 1114 "xmltok_impl.c"
      case 72: // $bb71
        HEAP[$tok]=19; //@line 1122 "xmltok_impl.c"
        var $275=HEAP[$ptr_addr]; //@line 1123 "xmltok_impl.c"
        var $276=(($275+2)&4294967295); //@line 1123 "xmltok_impl.c"
        HEAP[$ptr_addr]=$276; //@line 1123 "xmltok_impl.c"
        __label__ = 78; break; //@line 1123 "xmltok_impl.c"
      case 73: // $bb72
        var $277=HEAP[$ptr_addr]; //@line 1126 "xmltok_impl.c"
        var $278=(($277+1)&4294967295); //@line 1126 "xmltok_impl.c"
        var $279=HEAP[$278]; //@line 1126 "xmltok_impl.c"
        var $280=unSign(($279), 8, 0); //@line 1126 "xmltok_impl.c"
        var $281=((_nmstrtPages+$280)&4294967295); //@line 1126 "xmltok_impl.c"
        var $282=HEAP[$281]; //@line 1126 "xmltok_impl.c"
        var $283=unSign(($282), 8, 0); //@line 1126 "xmltok_impl.c"
        var $284=($283) << 3; //@line 1126 "xmltok_impl.c"
        var $285=HEAP[$ptr_addr]; //@line 1126 "xmltok_impl.c"
        var $286=(($285)&4294967295); //@line 1126 "xmltok_impl.c"
        var $287=HEAP[$286]; //@line 1126 "xmltok_impl.c"
        var $288=unSign(($287), 8, 0) >>> 5; //@line 1126 "xmltok_impl.c"
        var $289=unSign(($288), 8, 0); //@line 1126 "xmltok_impl.c"
        var $290=((($284) + ($289))&4294967295); //@line 1126 "xmltok_impl.c"
        var $291=((_namingBitmap+$290*4)&4294967295); //@line 1126 "xmltok_impl.c"
        var $292=HEAP[$291]; //@line 1126 "xmltok_impl.c"
        var $293=HEAP[$ptr_addr]; //@line 1126 "xmltok_impl.c"
        var $294=(($293)&4294967295); //@line 1126 "xmltok_impl.c"
        var $295=HEAP[$294]; //@line 1126 "xmltok_impl.c"
        var $296=unSign(($295), 8, 0); //@line 1126 "xmltok_impl.c"
        var $297=($296) & 31; //@line 1126 "xmltok_impl.c"
        var $298=1 << ($297); //@line 1126 "xmltok_impl.c"
        var $299=($292) & ($298); //@line 1126 "xmltok_impl.c"
        var $300=((($299))|0)!=0; //@line 1126 "xmltok_impl.c"
        if ($300) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 1126 "xmltok_impl.c"
      case 74: // $bb73
        var $301=HEAP[$ptr_addr]; //@line 1127 "xmltok_impl.c"
        var $302=(($301+2)&4294967295); //@line 1127 "xmltok_impl.c"
        HEAP[$ptr_addr]=$302; //@line 1127 "xmltok_impl.c"
        HEAP[$tok]=18; //@line 1128 "xmltok_impl.c"
        __label__ = 78; break; //@line 1128 "xmltok_impl.c"
      case 75: // $bb74
        var $303=HEAP[$ptr_addr]; //@line 1131 "xmltok_impl.c"
        var $304=(($303+1)&4294967295); //@line 1131 "xmltok_impl.c"
        var $305=HEAP[$304]; //@line 1131 "xmltok_impl.c"
        var $306=unSign(($305), 8, 0); //@line 1131 "xmltok_impl.c"
        var $307=((_namePages+$306)&4294967295); //@line 1131 "xmltok_impl.c"
        var $308=HEAP[$307]; //@line 1131 "xmltok_impl.c"
        var $309=unSign(($308), 8, 0); //@line 1131 "xmltok_impl.c"
        var $310=($309) << 3; //@line 1131 "xmltok_impl.c"
        var $311=HEAP[$ptr_addr]; //@line 1131 "xmltok_impl.c"
        var $312=(($311)&4294967295); //@line 1131 "xmltok_impl.c"
        var $313=HEAP[$312]; //@line 1131 "xmltok_impl.c"
        var $314=unSign(($313), 8, 0) >>> 5; //@line 1131 "xmltok_impl.c"
        var $315=unSign(($314), 8, 0); //@line 1131 "xmltok_impl.c"
        var $316=((($310) + ($315))&4294967295); //@line 1131 "xmltok_impl.c"
        var $317=((_namingBitmap+$316*4)&4294967295); //@line 1131 "xmltok_impl.c"
        var $318=HEAP[$317]; //@line 1131 "xmltok_impl.c"
        var $319=HEAP[$ptr_addr]; //@line 1131 "xmltok_impl.c"
        var $320=(($319)&4294967295); //@line 1131 "xmltok_impl.c"
        var $321=HEAP[$320]; //@line 1131 "xmltok_impl.c"
        var $322=unSign(($321), 8, 0); //@line 1131 "xmltok_impl.c"
        var $323=($322) & 31; //@line 1131 "xmltok_impl.c"
        var $324=1 << ($323); //@line 1131 "xmltok_impl.c"
        var $325=($318) & ($324); //@line 1131 "xmltok_impl.c"
        var $326=((($325))|0)!=0; //@line 1131 "xmltok_impl.c"
        if ($326) { __label__ = 76; break; } else { __label__ = 77; break; } //@line 1131 "xmltok_impl.c"
      case 76: // $bb75
        var $327=HEAP[$ptr_addr]; //@line 1132 "xmltok_impl.c"
        var $328=(($327+2)&4294967295); //@line 1132 "xmltok_impl.c"
        HEAP[$ptr_addr]=$328; //@line 1132 "xmltok_impl.c"
        HEAP[$tok]=19; //@line 1133 "xmltok_impl.c"
        __label__ = 78; break; //@line 1133 "xmltok_impl.c"
      case 77: // $bb76
        var $329=HEAP[$nextTokPtr_addr]; //@line 1138 "xmltok_impl.c"
        var $330=HEAP[$ptr_addr]; //@line 1138 "xmltok_impl.c"
        HEAP[$329]=$330; //@line 1138 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1139 "xmltok_impl.c"
        __label__ = 108; break; //@line 1139 "xmltok_impl.c"
      case 78: // $bb77
        __label__ = 106; break; //@line 1139 "xmltok_impl.c"
      case 79: // $bb78
        var $331=HEAP[$ptr_addr]; //@line 1142 "xmltok_impl.c"
        var $332=(($331+1)&4294967295); //@line 1142 "xmltok_impl.c"
        var $333=HEAP[$332]; //@line 1142 "xmltok_impl.c"
        var $334=reSign(($333), 8, 0)==0; //@line 1142 "xmltok_impl.c"
        if ($334) { __label__ = 80; break; } else { __label__ = 81; break; } //@line 1142 "xmltok_impl.c"
      case 80: // $bb79
        var $335=HEAP[$enc_addr]; //@line 1142 "xmltok_impl.c"
        var $336=$335; //@line 1142 "xmltok_impl.c"
        var $337=HEAP[$ptr_addr]; //@line 1142 "xmltok_impl.c"
        var $338=HEAP[$337]; //@line 1142 "xmltok_impl.c"
        var $339=unSign(($338), 8, 0); //@line 1142 "xmltok_impl.c"
        var $340=(($336+72)&4294967295); //@line 1142 "xmltok_impl.c"
        var $341=(($340+$339)&4294967295); //@line 1142 "xmltok_impl.c"
        var $342=HEAP[$341]; //@line 1142 "xmltok_impl.c"
        var $343=unSign(($342), 8, 0); //@line 1142 "xmltok_impl.c"
        HEAP[$iftmp_787]=$343; //@line 1142 "xmltok_impl.c"
        __label__ = 82; break; //@line 1142 "xmltok_impl.c"
      case 81: // $bb80
        var $344=HEAP[$ptr_addr]; //@line 1142 "xmltok_impl.c"
        var $345=(($344)&4294967295); //@line 1142 "xmltok_impl.c"
        var $346=HEAP[$345]; //@line 1142 "xmltok_impl.c"
        var $347=reSign(($346), 8, 0); //@line 1142 "xmltok_impl.c"
        var $348=HEAP[$ptr_addr]; //@line 1142 "xmltok_impl.c"
        var $349=(($348+1)&4294967295); //@line 1142 "xmltok_impl.c"
        var $350=HEAP[$349]; //@line 1142 "xmltok_impl.c"
        var $351=reSign(($350), 8, 0); //@line 1142 "xmltok_impl.c"
        var $352=((($351)) & 255); //@line 1142 "xmltok_impl.c"
        var $353=((($347)) & 255); //@line 1142 "xmltok_impl.c"
        var $354=_unicode_byte_type($352, $353); //@line 1142 "xmltok_impl.c"
        HEAP[$iftmp_787]=$354; //@line 1142 "xmltok_impl.c"
        __label__ = 82; break; //@line 1142 "xmltok_impl.c"
      case 82: // $bb81
        var $355=HEAP[$iftmp_787]; //@line 1142 "xmltok_impl.c"
        if ($355 == 5) {
          __label__ = 86; break;
        }
        else if ($355 == 6) {
          __label__ = 89; break;
        }
        else if ($355 == 7) {
          __label__ = 92; break;
        }
        else if ($355 == 9) {
          __label__ = 95; break;
        }
        else if ($355 == 10) {
          __label__ = 95; break;
        }
        else if ($355 == 11) {
          __label__ = 95; break;
        }
        else if ($355 == 15) {
          __label__ = 102; break;
        }
        else if ($355 == 20) {
          __label__ = 95; break;
        }
        else if ($355 == 21) {
          __label__ = 95; break;
        }
        else if ($355 == 22) {
          __label__ = 85; break;
        }
        else if ($355 == 24) {
          __label__ = 85; break;
        }
        else if ($355 == 25) {
          __label__ = 85; break;
        }
        else if ($355 == 26) {
          __label__ = 85; break;
        }
        else if ($355 == 27) {
          __label__ = 85; break;
        }
        else if ($355 == 29) {
          __label__ = 83; break;
        }
        else if ($355 == 30) {
          __label__ = 95; break;
        }
        else if ($355 == 32) {
          __label__ = 95; break;
        }
        else if ($355 == 33) {
          __label__ = 99; break;
        }
        else if ($355 == 34) {
          __label__ = 96; break;
        }
        else if ($355 == 35) {
          __label__ = 95; break;
        }
        else if ($355 == 36) {
          __label__ = 95; break;
        }
        else {
        __label__ = 105; break;
        }
        
      case 83: // $bb82
        var $356=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        var $357=(($356+1)&4294967295); //@line 1143 "xmltok_impl.c"
        var $358=HEAP[$357]; //@line 1143 "xmltok_impl.c"
        var $359=unSign(($358), 8, 0); //@line 1143 "xmltok_impl.c"
        var $360=((_namePages+$359)&4294967295); //@line 1143 "xmltok_impl.c"
        var $361=HEAP[$360]; //@line 1143 "xmltok_impl.c"
        var $362=unSign(($361), 8, 0); //@line 1143 "xmltok_impl.c"
        var $363=($362) << 3; //@line 1143 "xmltok_impl.c"
        var $364=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        var $365=(($364)&4294967295); //@line 1143 "xmltok_impl.c"
        var $366=HEAP[$365]; //@line 1143 "xmltok_impl.c"
        var $367=unSign(($366), 8, 0) >>> 5; //@line 1143 "xmltok_impl.c"
        var $368=unSign(($367), 8, 0); //@line 1143 "xmltok_impl.c"
        var $369=((($363) + ($368))&4294967295); //@line 1143 "xmltok_impl.c"
        var $370=((_namingBitmap+$369*4)&4294967295); //@line 1143 "xmltok_impl.c"
        var $371=HEAP[$370]; //@line 1143 "xmltok_impl.c"
        var $372=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        var $373=(($372)&4294967295); //@line 1143 "xmltok_impl.c"
        var $374=HEAP[$373]; //@line 1143 "xmltok_impl.c"
        var $375=unSign(($374), 8, 0); //@line 1143 "xmltok_impl.c"
        var $376=($375) & 31; //@line 1143 "xmltok_impl.c"
        var $377=1 << ($376); //@line 1143 "xmltok_impl.c"
        var $378=($371) & ($377); //@line 1143 "xmltok_impl.c"
        var $379=((($378))|0)==0; //@line 1143 "xmltok_impl.c"
        if ($379) { __label__ = 84; break; } else { __label__ = 85; break; } //@line 1143 "xmltok_impl.c"
      case 84: // $bb83
        var $380=HEAP[$nextTokPtr_addr]; //@line 1143 "xmltok_impl.c"
        var $381=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        HEAP[$380]=$381; //@line 1143 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1143 "xmltok_impl.c"
        __label__ = 108; break; //@line 1143 "xmltok_impl.c"
      case 85: // $bb84
        var $382=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        var $383=(($382+2)&4294967295); //@line 1143 "xmltok_impl.c"
        HEAP[$ptr_addr]=$383; //@line 1143 "xmltok_impl.c"
        __label__ = 106; break; //@line 1143 "xmltok_impl.c"
      case 86: // $bb85
        var $384=HEAP[$end_addr]; //@line 1143 "xmltok_impl.c"
        var $385=($384); //@line 1143 "xmltok_impl.c"
        var $386=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        var $387=($386); //@line 1143 "xmltok_impl.c"
        var $388=((($385) - ($387))&4294967295); //@line 1143 "xmltok_impl.c"
        var $389=((($388))|0) <= 1; //@line 1143 "xmltok_impl.c"
        if ($389) { __label__ = 87; break; } else { __label__ = 88; break; } //@line 1143 "xmltok_impl.c"
      case 87: // $bb86
        HEAP[$0]=-2; //@line 1143 "xmltok_impl.c"
        __label__ = 108; break; //@line 1143 "xmltok_impl.c"
      case 88: // $bb87
        var $390=HEAP[$nextTokPtr_addr]; //@line 1143 "xmltok_impl.c"
        var $391=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        HEAP[$390]=$391; //@line 1143 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1143 "xmltok_impl.c"
        __label__ = 108; break; //@line 1143 "xmltok_impl.c"
      case 89: // $bb88
        var $392=HEAP[$end_addr]; //@line 1143 "xmltok_impl.c"
        var $393=($392); //@line 1143 "xmltok_impl.c"
        var $394=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        var $395=($394); //@line 1143 "xmltok_impl.c"
        var $396=((($393) - ($395))&4294967295); //@line 1143 "xmltok_impl.c"
        var $397=((($396))|0) <= 2; //@line 1143 "xmltok_impl.c"
        if ($397) { __label__ = 90; break; } else { __label__ = 91; break; } //@line 1143 "xmltok_impl.c"
      case 90: // $bb89
        HEAP[$0]=-2; //@line 1143 "xmltok_impl.c"
        __label__ = 108; break; //@line 1143 "xmltok_impl.c"
      case 91: // $bb90
        var $398=HEAP[$nextTokPtr_addr]; //@line 1143 "xmltok_impl.c"
        var $399=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        HEAP[$398]=$399; //@line 1143 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1143 "xmltok_impl.c"
        __label__ = 108; break; //@line 1143 "xmltok_impl.c"
      case 92: // $bb91
        var $400=HEAP[$end_addr]; //@line 1143 "xmltok_impl.c"
        var $401=($400); //@line 1143 "xmltok_impl.c"
        var $402=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        var $403=($402); //@line 1143 "xmltok_impl.c"
        var $404=((($401) - ($403))&4294967295); //@line 1143 "xmltok_impl.c"
        var $405=((($404))|0) <= 3; //@line 1143 "xmltok_impl.c"
        if ($405) { __label__ = 93; break; } else { __label__ = 94; break; } //@line 1143 "xmltok_impl.c"
      case 93: // $bb92
        HEAP[$0]=-2; //@line 1143 "xmltok_impl.c"
        __label__ = 108; break; //@line 1143 "xmltok_impl.c"
      case 94: // $bb93
        var $406=HEAP[$nextTokPtr_addr]; //@line 1143 "xmltok_impl.c"
        var $407=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        HEAP[$406]=$407; //@line 1143 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1143 "xmltok_impl.c"
        __label__ = 108; break; //@line 1143 "xmltok_impl.c"
      case 95: // $bb94
        var $408=HEAP[$nextTokPtr_addr]; //@line 1147 "xmltok_impl.c"
        var $409=HEAP[$ptr_addr]; //@line 1147 "xmltok_impl.c"
        HEAP[$408]=$409; //@line 1147 "xmltok_impl.c"
        var $410=HEAP[$tok]; //@line 1148 "xmltok_impl.c"
        HEAP[$0]=$410; //@line 1148 "xmltok_impl.c"
        __label__ = 108; break; //@line 1148 "xmltok_impl.c"
      case 96: // $bb95
        var $411=HEAP[$tok]; //@line 1171 "xmltok_impl.c"
        var $412=((($411))|0)==19; //@line 1171 "xmltok_impl.c"
        if ($412) { __label__ = 97; break; } else { __label__ = 98; break; } //@line 1171 "xmltok_impl.c"
      case 97: // $bb96
        var $413=HEAP[$nextTokPtr_addr]; //@line 1172 "xmltok_impl.c"
        var $414=HEAP[$ptr_addr]; //@line 1172 "xmltok_impl.c"
        HEAP[$413]=$414; //@line 1172 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1173 "xmltok_impl.c"
        __label__ = 108; break; //@line 1173 "xmltok_impl.c"
      case 98: // $bb97
        var $415=HEAP[$ptr_addr]; //@line 1175 "xmltok_impl.c"
        var $416=(($415+2)&4294967295); //@line 1175 "xmltok_impl.c"
        var $417=HEAP[$nextTokPtr_addr]; //@line 1175 "xmltok_impl.c"
        HEAP[$417]=$416; //@line 1175 "xmltok_impl.c"
        HEAP[$0]=32; //@line 1176 "xmltok_impl.c"
        __label__ = 108; break; //@line 1176 "xmltok_impl.c"
      case 99: // $bb98
        var $418=HEAP[$tok]; //@line 1178 "xmltok_impl.c"
        var $419=((($418))|0)==19; //@line 1178 "xmltok_impl.c"
        if ($419) { __label__ = 100; break; } else { __label__ = 101; break; } //@line 1178 "xmltok_impl.c"
      case 100: // $bb99
        var $420=HEAP[$nextTokPtr_addr]; //@line 1179 "xmltok_impl.c"
        var $421=HEAP[$ptr_addr]; //@line 1179 "xmltok_impl.c"
        HEAP[$420]=$421; //@line 1179 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1180 "xmltok_impl.c"
        __label__ = 108; break; //@line 1180 "xmltok_impl.c"
      case 101: // $bb100
        var $422=HEAP[$ptr_addr]; //@line 1182 "xmltok_impl.c"
        var $423=(($422+2)&4294967295); //@line 1182 "xmltok_impl.c"
        var $424=HEAP[$nextTokPtr_addr]; //@line 1182 "xmltok_impl.c"
        HEAP[$424]=$423; //@line 1182 "xmltok_impl.c"
        HEAP[$0]=31; //@line 1183 "xmltok_impl.c"
        __label__ = 108; break; //@line 1183 "xmltok_impl.c"
      case 102: // $bb101
        var $425=HEAP[$tok]; //@line 1185 "xmltok_impl.c"
        var $426=((($425))|0)==19; //@line 1185 "xmltok_impl.c"
        if ($426) { __label__ = 103; break; } else { __label__ = 104; break; } //@line 1185 "xmltok_impl.c"
      case 103: // $bb102
        var $427=HEAP[$nextTokPtr_addr]; //@line 1186 "xmltok_impl.c"
        var $428=HEAP[$ptr_addr]; //@line 1186 "xmltok_impl.c"
        HEAP[$427]=$428; //@line 1186 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1187 "xmltok_impl.c"
        __label__ = 108; break; //@line 1187 "xmltok_impl.c"
      case 104: // $bb103
        var $429=HEAP[$ptr_addr]; //@line 1189 "xmltok_impl.c"
        var $430=(($429+2)&4294967295); //@line 1189 "xmltok_impl.c"
        var $431=HEAP[$nextTokPtr_addr]; //@line 1189 "xmltok_impl.c"
        HEAP[$431]=$430; //@line 1189 "xmltok_impl.c"
        HEAP[$0]=30; //@line 1190 "xmltok_impl.c"
        __label__ = 108; break; //@line 1190 "xmltok_impl.c"
      case 105: // $bb104
        var $432=HEAP[$nextTokPtr_addr]; //@line 1192 "xmltok_impl.c"
        var $433=HEAP[$ptr_addr]; //@line 1192 "xmltok_impl.c"
        HEAP[$432]=$433; //@line 1192 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1193 "xmltok_impl.c"
        __label__ = 108; break; //@line 1193 "xmltok_impl.c"
      case 106: // $bb105
        var $434=HEAP[$ptr_addr]; //@line 1141 "xmltok_impl.c"
        var $435=HEAP[$end_addr]; //@line 1141 "xmltok_impl.c"
        var $436=($434)!=($435); //@line 1141 "xmltok_impl.c"
        if ($436) { __label__ = 79; break; } else { __label__ = 107; break; } //@line 1141 "xmltok_impl.c"
      case 107: // $bb106
        var $437=HEAP[$tok]; //@line 1196 "xmltok_impl.c"
        var $438=((0 - ($437))&4294967295); //@line 1196 "xmltok_impl.c"
        HEAP[$0]=$438; //@line 1196 "xmltok_impl.c"
        __label__ = 108; break; //@line 1196 "xmltok_impl.c"
      case 108: // $bb107
        var $439=HEAP[$0]; //@line 974 "xmltok_impl.c"
        HEAP[$retval]=$439; //@line 974 "xmltok_impl.c"
        __label__ = 109; break; //@line 974 "xmltok_impl.c"
      case 109: // $return
        var $retval108=HEAP[$retval]; //@line 974 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval108; //@line 974 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_attributeValueTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 33; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 33);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_797=__stackBase__+20;
        var $iftmp_795=__stackBase__+21;
        var $0=__stackBase__+25;
        var $start=__stackBase__+29;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 1204 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 1204 "xmltok_impl.c"
        var $3=($1)==($2); //@line 1204 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1204 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-4; //@line 1205 "xmltok_impl.c"
        __label__ = 33; break; //@line 1205 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$ptr_addr]; //@line 1206 "xmltok_impl.c"
        HEAP[$start]=$4; //@line 1206 "xmltok_impl.c"
        __label__ = 31; break; //@line 1206 "xmltok_impl.c"
      case 3: // $bb2
        var $5=HEAP[$ptr_addr]; //@line 1208 "xmltok_impl.c"
        var $6=(($5+1)&4294967295); //@line 1208 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 1208 "xmltok_impl.c"
        var $8=reSign(($7), 8, 0)==0; //@line 1208 "xmltok_impl.c"
        if ($8) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1208 "xmltok_impl.c"
      case 4: // $bb3
        var $9=HEAP[$enc_addr]; //@line 1208 "xmltok_impl.c"
        var $10=$9; //@line 1208 "xmltok_impl.c"
        var $11=HEAP[$ptr_addr]; //@line 1208 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 1208 "xmltok_impl.c"
        var $13=unSign(($12), 8, 0); //@line 1208 "xmltok_impl.c"
        var $14=(($10+72)&4294967295); //@line 1208 "xmltok_impl.c"
        var $15=(($14+$13)&4294967295); //@line 1208 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 1208 "xmltok_impl.c"
        var $17=unSign(($16), 8, 0); //@line 1208 "xmltok_impl.c"
        HEAP[$iftmp_795]=$17; //@line 1208 "xmltok_impl.c"
        __label__ = 6; break; //@line 1208 "xmltok_impl.c"
      case 5: // $bb4
        var $18=HEAP[$ptr_addr]; //@line 1208 "xmltok_impl.c"
        var $19=(($18)&4294967295); //@line 1208 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 1208 "xmltok_impl.c"
        var $21=reSign(($20), 8, 0); //@line 1208 "xmltok_impl.c"
        var $22=HEAP[$ptr_addr]; //@line 1208 "xmltok_impl.c"
        var $23=(($22+1)&4294967295); //@line 1208 "xmltok_impl.c"
        var $24=HEAP[$23]; //@line 1208 "xmltok_impl.c"
        var $25=reSign(($24), 8, 0); //@line 1208 "xmltok_impl.c"
        var $26=((($25)) & 255); //@line 1208 "xmltok_impl.c"
        var $27=((($21)) & 255); //@line 1208 "xmltok_impl.c"
        var $28=_unicode_byte_type($26, $27); //@line 1208 "xmltok_impl.c"
        HEAP[$iftmp_795]=$28; //@line 1208 "xmltok_impl.c"
        __label__ = 6; break; //@line 1208 "xmltok_impl.c"
      case 6: // $bb5
        var $29=HEAP[$iftmp_795]; //@line 1208 "xmltok_impl.c"
        if ($29 == 2) {
          __label__ = 13; break;
        }
        else if ($29 == 3) {
          __label__ = 10; break;
        }
        else if ($29 == 5) {
          __label__ = 7; break;
        }
        else if ($29 == 6) {
          __label__ = 8; break;
        }
        else if ($29 == 7) {
          __label__ = 9; break;
        }
        else if ($29 == 9) {
          __label__ = 17; break;
        }
        else if ($29 == 10) {
          __label__ = 14; break;
        }
        else if ($29 == 21) {
          __label__ = 27; break;
        }
        else {
        __label__ = 30; break;
        }
        
      case 7: // $bb6
        var $30=HEAP[$ptr_addr]; //@line 1211 "xmltok_impl.c"
        var $31=(($30+2)&4294967295); //@line 1211 "xmltok_impl.c"
        HEAP[$ptr_addr]=$31; //@line 1211 "xmltok_impl.c"
        __label__ = 31; break; //@line 1211 "xmltok_impl.c"
      case 8: // $bb7
        var $32=HEAP[$ptr_addr]; //@line 1211 "xmltok_impl.c"
        var $33=(($32+3)&4294967295); //@line 1211 "xmltok_impl.c"
        HEAP[$ptr_addr]=$33; //@line 1211 "xmltok_impl.c"
        __label__ = 31; break; //@line 1211 "xmltok_impl.c"
      case 9: // $bb8
        var $34=HEAP[$ptr_addr]; //@line 1211 "xmltok_impl.c"
        var $35=(($34+4)&4294967295); //@line 1211 "xmltok_impl.c"
        HEAP[$ptr_addr]=$35; //@line 1211 "xmltok_impl.c"
        __label__ = 31; break; //@line 1211 "xmltok_impl.c"
      case 10: // $bb9
        var $36=HEAP[$ptr_addr]; //@line 1214 "xmltok_impl.c"
        var $37=HEAP[$start]; //@line 1214 "xmltok_impl.c"
        var $38=($36)==($37); //@line 1214 "xmltok_impl.c"
        if ($38) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1214 "xmltok_impl.c"
      case 11: // $bb10
        var $39=HEAP[$ptr_addr]; //@line 1215 "xmltok_impl.c"
        var $40=(($39+2)&4294967295); //@line 1215 "xmltok_impl.c"
        var $41=HEAP[$enc_addr]; //@line 1215 "xmltok_impl.c"
        var $42=HEAP[$end_addr]; //@line 1215 "xmltok_impl.c"
        var $43=HEAP[$nextTokPtr_addr]; //@line 1215 "xmltok_impl.c"
        var $44=_little2_scanRef($41, $40, $42, $43); //@line 1215 "xmltok_impl.c"
        HEAP[$0]=$44; //@line 1215 "xmltok_impl.c"
        __label__ = 33; break; //@line 1215 "xmltok_impl.c"
      case 12: // $bb11
        var $45=HEAP[$nextTokPtr_addr]; //@line 1216 "xmltok_impl.c"
        var $46=HEAP[$ptr_addr]; //@line 1216 "xmltok_impl.c"
        HEAP[$45]=$46; //@line 1216 "xmltok_impl.c"
        HEAP[$0]=6; //@line 1217 "xmltok_impl.c"
        __label__ = 33; break; //@line 1217 "xmltok_impl.c"
      case 13: // $bb12
        var $47=HEAP[$nextTokPtr_addr]; //@line 1220 "xmltok_impl.c"
        var $48=HEAP[$ptr_addr]; //@line 1220 "xmltok_impl.c"
        HEAP[$47]=$48; //@line 1220 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1221 "xmltok_impl.c"
        __label__ = 33; break; //@line 1221 "xmltok_impl.c"
      case 14: // $bb13
        var $49=HEAP[$ptr_addr]; //@line 1223 "xmltok_impl.c"
        var $50=HEAP[$start]; //@line 1223 "xmltok_impl.c"
        var $51=($49)==($50); //@line 1223 "xmltok_impl.c"
        if ($51) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1223 "xmltok_impl.c"
      case 15: // $bb14
        var $52=HEAP[$ptr_addr]; //@line 1224 "xmltok_impl.c"
        var $53=(($52+2)&4294967295); //@line 1224 "xmltok_impl.c"
        var $54=HEAP[$nextTokPtr_addr]; //@line 1224 "xmltok_impl.c"
        HEAP[$54]=$53; //@line 1224 "xmltok_impl.c"
        HEAP[$0]=7; //@line 1225 "xmltok_impl.c"
        __label__ = 33; break; //@line 1225 "xmltok_impl.c"
      case 16: // $bb15
        var $55=HEAP[$nextTokPtr_addr]; //@line 1227 "xmltok_impl.c"
        var $56=HEAP[$ptr_addr]; //@line 1227 "xmltok_impl.c"
        HEAP[$55]=$56; //@line 1227 "xmltok_impl.c"
        HEAP[$0]=6; //@line 1228 "xmltok_impl.c"
        __label__ = 33; break; //@line 1228 "xmltok_impl.c"
      case 17: // $bb16
        var $57=HEAP[$ptr_addr]; //@line 1230 "xmltok_impl.c"
        var $58=HEAP[$start]; //@line 1230 "xmltok_impl.c"
        var $59=($57)==($58); //@line 1230 "xmltok_impl.c"
        if ($59) { __label__ = 18; break; } else { __label__ = 26; break; } //@line 1230 "xmltok_impl.c"
      case 18: // $bb17
        var $60=HEAP[$ptr_addr]; //@line 1231 "xmltok_impl.c"
        var $61=(($60+2)&4294967295); //@line 1231 "xmltok_impl.c"
        HEAP[$ptr_addr]=$61; //@line 1231 "xmltok_impl.c"
        var $62=HEAP[$ptr_addr]; //@line 1232 "xmltok_impl.c"
        var $63=HEAP[$end_addr]; //@line 1232 "xmltok_impl.c"
        var $64=($62)==($63); //@line 1232 "xmltok_impl.c"
        if ($64) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 1232 "xmltok_impl.c"
      case 19: // $bb18
        HEAP[$0]=-3; //@line 1233 "xmltok_impl.c"
        __label__ = 33; break; //@line 1233 "xmltok_impl.c"
      case 20: // $bb19
        var $65=HEAP[$ptr_addr]; //@line 1234 "xmltok_impl.c"
        var $66=(($65+1)&4294967295); //@line 1234 "xmltok_impl.c"
        var $67=HEAP[$66]; //@line 1234 "xmltok_impl.c"
        var $68=reSign(($67), 8, 0)==0; //@line 1234 "xmltok_impl.c"
        if ($68) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 1234 "xmltok_impl.c"
      case 21: // $bb20
        var $69=HEAP[$enc_addr]; //@line 1234 "xmltok_impl.c"
        var $70=$69; //@line 1234 "xmltok_impl.c"
        var $71=HEAP[$ptr_addr]; //@line 1234 "xmltok_impl.c"
        var $72=HEAP[$71]; //@line 1234 "xmltok_impl.c"
        var $73=unSign(($72), 8, 0); //@line 1234 "xmltok_impl.c"
        var $74=(($70+72)&4294967295); //@line 1234 "xmltok_impl.c"
        var $75=(($74+$73)&4294967295); //@line 1234 "xmltok_impl.c"
        var $76=HEAP[$75]; //@line 1234 "xmltok_impl.c"
        var $77=reSign(($76), 8, 0)==10; //@line 1234 "xmltok_impl.c"
        var $78=unSign(($77), 1, 0); //@line 1234 "xmltok_impl.c"
        HEAP[$iftmp_797]=$78; //@line 1234 "xmltok_impl.c"
        __label__ = 23; break; //@line 1234 "xmltok_impl.c"
      case 22: // $bb21
        var $79=HEAP[$ptr_addr]; //@line 1234 "xmltok_impl.c"
        var $80=(($79)&4294967295); //@line 1234 "xmltok_impl.c"
        var $81=HEAP[$80]; //@line 1234 "xmltok_impl.c"
        var $82=reSign(($81), 8, 0); //@line 1234 "xmltok_impl.c"
        var $83=HEAP[$ptr_addr]; //@line 1234 "xmltok_impl.c"
        var $84=(($83+1)&4294967295); //@line 1234 "xmltok_impl.c"
        var $85=HEAP[$84]; //@line 1234 "xmltok_impl.c"
        var $86=reSign(($85), 8, 0); //@line 1234 "xmltok_impl.c"
        var $87=((($86)) & 255); //@line 1234 "xmltok_impl.c"
        var $88=((($82)) & 255); //@line 1234 "xmltok_impl.c"
        var $89=_unicode_byte_type($87, $88); //@line 1234 "xmltok_impl.c"
        var $90=((($89))|0)==10; //@line 1234 "xmltok_impl.c"
        var $91=unSign(($90), 1, 0); //@line 1234 "xmltok_impl.c"
        HEAP[$iftmp_797]=$91; //@line 1234 "xmltok_impl.c"
        __label__ = 23; break; //@line 1234 "xmltok_impl.c"
      case 23: // $bb22
        var $92=HEAP[$iftmp_797]; //@line 1234 "xmltok_impl.c"
        var $toBool=reSign(($92), 8, 0)!=0; //@line 1234 "xmltok_impl.c"
        if ($toBool) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 1234 "xmltok_impl.c"
      case 24: // $bb23
        var $93=HEAP[$ptr_addr]; //@line 1235 "xmltok_impl.c"
        var $94=(($93+2)&4294967295); //@line 1235 "xmltok_impl.c"
        HEAP[$ptr_addr]=$94; //@line 1235 "xmltok_impl.c"
        __label__ = 25; break; //@line 1235 "xmltok_impl.c"
      case 25: // $bb24
        var $95=HEAP[$nextTokPtr_addr]; //@line 1236 "xmltok_impl.c"
        var $96=HEAP[$ptr_addr]; //@line 1236 "xmltok_impl.c"
        HEAP[$95]=$96; //@line 1236 "xmltok_impl.c"
        HEAP[$0]=7; //@line 1237 "xmltok_impl.c"
        __label__ = 33; break; //@line 1237 "xmltok_impl.c"
      case 26: // $bb25
        var $97=HEAP[$nextTokPtr_addr]; //@line 1239 "xmltok_impl.c"
        var $98=HEAP[$ptr_addr]; //@line 1239 "xmltok_impl.c"
        HEAP[$97]=$98; //@line 1239 "xmltok_impl.c"
        HEAP[$0]=6; //@line 1240 "xmltok_impl.c"
        __label__ = 33; break; //@line 1240 "xmltok_impl.c"
      case 27: // $bb26
        var $99=HEAP[$ptr_addr]; //@line 1242 "xmltok_impl.c"
        var $100=HEAP[$start]; //@line 1242 "xmltok_impl.c"
        var $101=($99)==($100); //@line 1242 "xmltok_impl.c"
        if ($101) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 1242 "xmltok_impl.c"
      case 28: // $bb27
        var $102=HEAP[$ptr_addr]; //@line 1243 "xmltok_impl.c"
        var $103=(($102+2)&4294967295); //@line 1243 "xmltok_impl.c"
        var $104=HEAP[$nextTokPtr_addr]; //@line 1243 "xmltok_impl.c"
        HEAP[$104]=$103; //@line 1243 "xmltok_impl.c"
        HEAP[$0]=39; //@line 1244 "xmltok_impl.c"
        __label__ = 33; break; //@line 1244 "xmltok_impl.c"
      case 29: // $bb28
        var $105=HEAP[$nextTokPtr_addr]; //@line 1246 "xmltok_impl.c"
        var $106=HEAP[$ptr_addr]; //@line 1246 "xmltok_impl.c"
        HEAP[$105]=$106; //@line 1246 "xmltok_impl.c"
        HEAP[$0]=6; //@line 1247 "xmltok_impl.c"
        __label__ = 33; break; //@line 1247 "xmltok_impl.c"
      case 30: // $bb29
        var $107=HEAP[$ptr_addr]; //@line 1249 "xmltok_impl.c"
        var $108=(($107+2)&4294967295); //@line 1249 "xmltok_impl.c"
        HEAP[$ptr_addr]=$108; //@line 1249 "xmltok_impl.c"
        __label__ = 31; break; //@line 1249 "xmltok_impl.c"
      case 31: // $bb30
        var $109=HEAP[$ptr_addr]; //@line 1207 "xmltok_impl.c"
        var $110=HEAP[$end_addr]; //@line 1207 "xmltok_impl.c"
        var $111=($109)!=($110); //@line 1207 "xmltok_impl.c"
        if ($111) { __label__ = 3; break; } else { __label__ = 32; break; } //@line 1207 "xmltok_impl.c"
      case 32: // $bb31
        var $112=HEAP[$nextTokPtr_addr]; //@line 1253 "xmltok_impl.c"
        var $113=HEAP[$ptr_addr]; //@line 1253 "xmltok_impl.c"
        HEAP[$112]=$113; //@line 1253 "xmltok_impl.c"
        HEAP[$0]=6; //@line 1254 "xmltok_impl.c"
        __label__ = 33; break; //@line 1254 "xmltok_impl.c"
      case 33: // $bb32
        var $114=HEAP[$0]; //@line 1205 "xmltok_impl.c"
        HEAP[$retval]=$114; //@line 1205 "xmltok_impl.c"
        __label__ = 34; break; //@line 1205 "xmltok_impl.c"
      case 34: // $return
        var $retval33=HEAP[$retval]; //@line 1205 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval33; //@line 1205 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_entityValueTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 41; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 41);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_802=__stackBase__+20;
        var $iftmp_801=__stackBase__+21;
        var $iftmp_799=__stackBase__+25;
        var $0=__stackBase__+29;
        var $start=__stackBase__+33;
        var $tok=__stackBase__+37;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 1262 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 1262 "xmltok_impl.c"
        var $3=($1)==($2); //@line 1262 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1262 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-4; //@line 1263 "xmltok_impl.c"
        __label__ = 35; break; //@line 1263 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$ptr_addr]; //@line 1264 "xmltok_impl.c"
        HEAP[$start]=$4; //@line 1264 "xmltok_impl.c"
        __label__ = 33; break; //@line 1264 "xmltok_impl.c"
      case 3: // $bb2
        var $5=HEAP[$ptr_addr]; //@line 1266 "xmltok_impl.c"
        var $6=(($5+1)&4294967295); //@line 1266 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 1266 "xmltok_impl.c"
        var $8=reSign(($7), 8, 0)==0; //@line 1266 "xmltok_impl.c"
        if ($8) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1266 "xmltok_impl.c"
      case 4: // $bb3
        var $9=HEAP[$enc_addr]; //@line 1266 "xmltok_impl.c"
        var $10=$9; //@line 1266 "xmltok_impl.c"
        var $11=HEAP[$ptr_addr]; //@line 1266 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 1266 "xmltok_impl.c"
        var $13=unSign(($12), 8, 0); //@line 1266 "xmltok_impl.c"
        var $14=(($10+72)&4294967295); //@line 1266 "xmltok_impl.c"
        var $15=(($14+$13)&4294967295); //@line 1266 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 1266 "xmltok_impl.c"
        var $17=unSign(($16), 8, 0); //@line 1266 "xmltok_impl.c"
        HEAP[$iftmp_799]=$17; //@line 1266 "xmltok_impl.c"
        __label__ = 6; break; //@line 1266 "xmltok_impl.c"
      case 5: // $bb4
        var $18=HEAP[$ptr_addr]; //@line 1266 "xmltok_impl.c"
        var $19=(($18)&4294967295); //@line 1266 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 1266 "xmltok_impl.c"
        var $21=reSign(($20), 8, 0); //@line 1266 "xmltok_impl.c"
        var $22=HEAP[$ptr_addr]; //@line 1266 "xmltok_impl.c"
        var $23=(($22+1)&4294967295); //@line 1266 "xmltok_impl.c"
        var $24=HEAP[$23]; //@line 1266 "xmltok_impl.c"
        var $25=reSign(($24), 8, 0); //@line 1266 "xmltok_impl.c"
        var $26=((($25)) & 255); //@line 1266 "xmltok_impl.c"
        var $27=((($21)) & 255); //@line 1266 "xmltok_impl.c"
        var $28=_unicode_byte_type($26, $27); //@line 1266 "xmltok_impl.c"
        HEAP[$iftmp_799]=$28; //@line 1266 "xmltok_impl.c"
        __label__ = 6; break; //@line 1266 "xmltok_impl.c"
      case 6: // $bb5
        var $29=HEAP[$iftmp_799]; //@line 1266 "xmltok_impl.c"
        if ($29 == 3) {
          __label__ = 10; break;
        }
        else if ($29 == 5) {
          __label__ = 7; break;
        }
        else if ($29 == 6) {
          __label__ = 8; break;
        }
        else if ($29 == 7) {
          __label__ = 9; break;
        }
        else if ($29 == 9) {
          __label__ = 22; break;
        }
        else if ($29 == 10) {
          __label__ = 19; break;
        }
        else if ($29 == 30) {
          __label__ = 13; break;
        }
        else {
        __label__ = 32; break;
        }
        
      case 7: // $bb6
        var $30=HEAP[$ptr_addr]; //@line 1269 "xmltok_impl.c"
        var $31=(($30+2)&4294967295); //@line 1269 "xmltok_impl.c"
        HEAP[$ptr_addr]=$31; //@line 1269 "xmltok_impl.c"
        __label__ = 33; break; //@line 1269 "xmltok_impl.c"
      case 8: // $bb7
        var $32=HEAP[$ptr_addr]; //@line 1269 "xmltok_impl.c"
        var $33=(($32+3)&4294967295); //@line 1269 "xmltok_impl.c"
        HEAP[$ptr_addr]=$33; //@line 1269 "xmltok_impl.c"
        __label__ = 33; break; //@line 1269 "xmltok_impl.c"
      case 9: // $bb8
        var $34=HEAP[$ptr_addr]; //@line 1269 "xmltok_impl.c"
        var $35=(($34+4)&4294967295); //@line 1269 "xmltok_impl.c"
        HEAP[$ptr_addr]=$35; //@line 1269 "xmltok_impl.c"
        __label__ = 33; break; //@line 1269 "xmltok_impl.c"
      case 10: // $bb9
        var $36=HEAP[$ptr_addr]; //@line 1272 "xmltok_impl.c"
        var $37=HEAP[$start]; //@line 1272 "xmltok_impl.c"
        var $38=($36)==($37); //@line 1272 "xmltok_impl.c"
        if ($38) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1272 "xmltok_impl.c"
      case 11: // $bb10
        var $39=HEAP[$ptr_addr]; //@line 1273 "xmltok_impl.c"
        var $40=(($39+2)&4294967295); //@line 1273 "xmltok_impl.c"
        var $41=HEAP[$enc_addr]; //@line 1273 "xmltok_impl.c"
        var $42=HEAP[$end_addr]; //@line 1273 "xmltok_impl.c"
        var $43=HEAP[$nextTokPtr_addr]; //@line 1273 "xmltok_impl.c"
        var $44=_little2_scanRef($41, $40, $42, $43); //@line 1273 "xmltok_impl.c"
        HEAP[$0]=$44; //@line 1273 "xmltok_impl.c"
        __label__ = 35; break; //@line 1273 "xmltok_impl.c"
      case 12: // $bb11
        var $45=HEAP[$nextTokPtr_addr]; //@line 1274 "xmltok_impl.c"
        var $46=HEAP[$ptr_addr]; //@line 1274 "xmltok_impl.c"
        HEAP[$45]=$46; //@line 1274 "xmltok_impl.c"
        HEAP[$0]=6; //@line 1275 "xmltok_impl.c"
        __label__ = 35; break; //@line 1275 "xmltok_impl.c"
      case 13: // $bb12
        var $47=HEAP[$ptr_addr]; //@line 1277 "xmltok_impl.c"
        var $48=HEAP[$start]; //@line 1277 "xmltok_impl.c"
        var $49=($47)==($48); //@line 1277 "xmltok_impl.c"
        if ($49) { __label__ = 14; break; } else { __label__ = 18; break; } //@line 1277 "xmltok_impl.c"
      case 14: // $bb13
        var $50=HEAP[$ptr_addr]; //@line 1279 "xmltok_impl.c"
        var $51=(($50+2)&4294967295); //@line 1279 "xmltok_impl.c"
        var $52=HEAP[$enc_addr]; //@line 1279 "xmltok_impl.c"
        var $53=HEAP[$end_addr]; //@line 1279 "xmltok_impl.c"
        var $54=HEAP[$nextTokPtr_addr]; //@line 1279 "xmltok_impl.c"
        var $55=_little2_scanPercent($52, $51, $53, $54); //@line 1279 "xmltok_impl.c"
        HEAP[$tok]=$55; //@line 1279 "xmltok_impl.c"
        var $56=HEAP[$tok]; //@line 1280 "xmltok_impl.c"
        var $57=((($56))|0)!=22; //@line 1280 "xmltok_impl.c"
        if ($57) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1280 "xmltok_impl.c"
      case 15: // $bb14
        var $58=HEAP[$tok]; //@line 1280 "xmltok_impl.c"
        HEAP[$iftmp_801]=$58; //@line 1280 "xmltok_impl.c"
        __label__ = 17; break; //@line 1280 "xmltok_impl.c"
      case 16: // $bb15
        HEAP[$iftmp_801]=0; //@line 1280 "xmltok_impl.c"
        __label__ = 17; break; //@line 1280 "xmltok_impl.c"
      case 17: // $bb16
        var $59=HEAP[$iftmp_801]; //@line 1280 "xmltok_impl.c"
        HEAP[$0]=$59; //@line 1280 "xmltok_impl.c"
        __label__ = 35; break; //@line 1280 "xmltok_impl.c"
      case 18: // $bb17
        var $60=HEAP[$nextTokPtr_addr]; //@line 1282 "xmltok_impl.c"
        var $61=HEAP[$ptr_addr]; //@line 1282 "xmltok_impl.c"
        HEAP[$60]=$61; //@line 1282 "xmltok_impl.c"
        HEAP[$0]=6; //@line 1283 "xmltok_impl.c"
        __label__ = 35; break; //@line 1283 "xmltok_impl.c"
      case 19: // $bb18
        var $62=HEAP[$ptr_addr]; //@line 1285 "xmltok_impl.c"
        var $63=HEAP[$start]; //@line 1285 "xmltok_impl.c"
        var $64=($62)==($63); //@line 1285 "xmltok_impl.c"
        if ($64) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1285 "xmltok_impl.c"
      case 20: // $bb19
        var $65=HEAP[$ptr_addr]; //@line 1286 "xmltok_impl.c"
        var $66=(($65+2)&4294967295); //@line 1286 "xmltok_impl.c"
        var $67=HEAP[$nextTokPtr_addr]; //@line 1286 "xmltok_impl.c"
        HEAP[$67]=$66; //@line 1286 "xmltok_impl.c"
        HEAP[$0]=7; //@line 1287 "xmltok_impl.c"
        __label__ = 35; break; //@line 1287 "xmltok_impl.c"
      case 21: // $bb20
        var $68=HEAP[$nextTokPtr_addr]; //@line 1289 "xmltok_impl.c"
        var $69=HEAP[$ptr_addr]; //@line 1289 "xmltok_impl.c"
        HEAP[$68]=$69; //@line 1289 "xmltok_impl.c"
        HEAP[$0]=6; //@line 1290 "xmltok_impl.c"
        __label__ = 35; break; //@line 1290 "xmltok_impl.c"
      case 22: // $bb21
        var $70=HEAP[$ptr_addr]; //@line 1292 "xmltok_impl.c"
        var $71=HEAP[$start]; //@line 1292 "xmltok_impl.c"
        var $72=($70)==($71); //@line 1292 "xmltok_impl.c"
        if ($72) { __label__ = 23; break; } else { __label__ = 31; break; } //@line 1292 "xmltok_impl.c"
      case 23: // $bb22
        var $73=HEAP[$ptr_addr]; //@line 1293 "xmltok_impl.c"
        var $74=(($73+2)&4294967295); //@line 1293 "xmltok_impl.c"
        HEAP[$ptr_addr]=$74; //@line 1293 "xmltok_impl.c"
        var $75=HEAP[$ptr_addr]; //@line 1294 "xmltok_impl.c"
        var $76=HEAP[$end_addr]; //@line 1294 "xmltok_impl.c"
        var $77=($75)==($76); //@line 1294 "xmltok_impl.c"
        if ($77) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 1294 "xmltok_impl.c"
      case 24: // $bb23
        HEAP[$0]=-3; //@line 1295 "xmltok_impl.c"
        __label__ = 35; break; //@line 1295 "xmltok_impl.c"
      case 25: // $bb24
        var $78=HEAP[$ptr_addr]; //@line 1296 "xmltok_impl.c"
        var $79=(($78+1)&4294967295); //@line 1296 "xmltok_impl.c"
        var $80=HEAP[$79]; //@line 1296 "xmltok_impl.c"
        var $81=reSign(($80), 8, 0)==0; //@line 1296 "xmltok_impl.c"
        if ($81) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1296 "xmltok_impl.c"
      case 26: // $bb25
        var $82=HEAP[$enc_addr]; //@line 1296 "xmltok_impl.c"
        var $83=$82; //@line 1296 "xmltok_impl.c"
        var $84=HEAP[$ptr_addr]; //@line 1296 "xmltok_impl.c"
        var $85=HEAP[$84]; //@line 1296 "xmltok_impl.c"
        var $86=unSign(($85), 8, 0); //@line 1296 "xmltok_impl.c"
        var $87=(($83+72)&4294967295); //@line 1296 "xmltok_impl.c"
        var $88=(($87+$86)&4294967295); //@line 1296 "xmltok_impl.c"
        var $89=HEAP[$88]; //@line 1296 "xmltok_impl.c"
        var $90=reSign(($89), 8, 0)==10; //@line 1296 "xmltok_impl.c"
        var $91=unSign(($90), 1, 0); //@line 1296 "xmltok_impl.c"
        HEAP[$iftmp_802]=$91; //@line 1296 "xmltok_impl.c"
        __label__ = 28; break; //@line 1296 "xmltok_impl.c"
      case 27: // $bb26
        var $92=HEAP[$ptr_addr]; //@line 1296 "xmltok_impl.c"
        var $93=(($92)&4294967295); //@line 1296 "xmltok_impl.c"
        var $94=HEAP[$93]; //@line 1296 "xmltok_impl.c"
        var $95=reSign(($94), 8, 0); //@line 1296 "xmltok_impl.c"
        var $96=HEAP[$ptr_addr]; //@line 1296 "xmltok_impl.c"
        var $97=(($96+1)&4294967295); //@line 1296 "xmltok_impl.c"
        var $98=HEAP[$97]; //@line 1296 "xmltok_impl.c"
        var $99=reSign(($98), 8, 0); //@line 1296 "xmltok_impl.c"
        var $100=((($99)) & 255); //@line 1296 "xmltok_impl.c"
        var $101=((($95)) & 255); //@line 1296 "xmltok_impl.c"
        var $102=_unicode_byte_type($100, $101); //@line 1296 "xmltok_impl.c"
        var $103=((($102))|0)==10; //@line 1296 "xmltok_impl.c"
        var $104=unSign(($103), 1, 0); //@line 1296 "xmltok_impl.c"
        HEAP[$iftmp_802]=$104; //@line 1296 "xmltok_impl.c"
        __label__ = 28; break; //@line 1296 "xmltok_impl.c"
      case 28: // $bb27
        var $105=HEAP[$iftmp_802]; //@line 1296 "xmltok_impl.c"
        var $toBool=reSign(($105), 8, 0)!=0; //@line 1296 "xmltok_impl.c"
        if ($toBool) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 1296 "xmltok_impl.c"
      case 29: // $bb28
        var $106=HEAP[$ptr_addr]; //@line 1297 "xmltok_impl.c"
        var $107=(($106+2)&4294967295); //@line 1297 "xmltok_impl.c"
        HEAP[$ptr_addr]=$107; //@line 1297 "xmltok_impl.c"
        __label__ = 30; break; //@line 1297 "xmltok_impl.c"
      case 30: // $bb29
        var $108=HEAP[$nextTokPtr_addr]; //@line 1298 "xmltok_impl.c"
        var $109=HEAP[$ptr_addr]; //@line 1298 "xmltok_impl.c"
        HEAP[$108]=$109; //@line 1298 "xmltok_impl.c"
        HEAP[$0]=7; //@line 1299 "xmltok_impl.c"
        __label__ = 35; break; //@line 1299 "xmltok_impl.c"
      case 31: // $bb30
        var $110=HEAP[$nextTokPtr_addr]; //@line 1301 "xmltok_impl.c"
        var $111=HEAP[$ptr_addr]; //@line 1301 "xmltok_impl.c"
        HEAP[$110]=$111; //@line 1301 "xmltok_impl.c"
        HEAP[$0]=6; //@line 1302 "xmltok_impl.c"
        __label__ = 35; break; //@line 1302 "xmltok_impl.c"
      case 32: // $bb31
        var $112=HEAP[$ptr_addr]; //@line 1304 "xmltok_impl.c"
        var $113=(($112+2)&4294967295); //@line 1304 "xmltok_impl.c"
        HEAP[$ptr_addr]=$113; //@line 1304 "xmltok_impl.c"
        __label__ = 33; break; //@line 1304 "xmltok_impl.c"
      case 33: // $bb32
        var $114=HEAP[$ptr_addr]; //@line 1265 "xmltok_impl.c"
        var $115=HEAP[$end_addr]; //@line 1265 "xmltok_impl.c"
        var $116=($114)!=($115); //@line 1265 "xmltok_impl.c"
        if ($116) { __label__ = 3; break; } else { __label__ = 34; break; } //@line 1265 "xmltok_impl.c"
      case 34: // $bb33
        var $117=HEAP[$nextTokPtr_addr]; //@line 1308 "xmltok_impl.c"
        var $118=HEAP[$ptr_addr]; //@line 1308 "xmltok_impl.c"
        HEAP[$117]=$118; //@line 1308 "xmltok_impl.c"
        HEAP[$0]=6; //@line 1309 "xmltok_impl.c"
        __label__ = 35; break; //@line 1309 "xmltok_impl.c"
      case 35: // $bb34
        var $119=HEAP[$0]; //@line 1263 "xmltok_impl.c"
        HEAP[$retval]=$119; //@line 1263 "xmltok_impl.c"
        __label__ = 36; break; //@line 1263 "xmltok_impl.c"
      case 36: // $return
        var $retval35=HEAP[$retval]; //@line 1263 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval35; //@line 1263 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_isPublicId($enc, $ptr, $end, $badPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $badPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_806=__stackBase__+20;
        var $0=__stackBase__+24;
        var $iftmp_804=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$badPtr_addr]=$badPtr;
        var $1=HEAP[$ptr_addr]; //@line 1371 "xmltok_impl.c"
        var $2=(($1+2)&4294967295); //@line 1371 "xmltok_impl.c"
        HEAP[$ptr_addr]=$2; //@line 1371 "xmltok_impl.c"
        var $3=HEAP[$end_addr]; //@line 1372 "xmltok_impl.c"
        var $4=(($3+-2)&4294967295); //@line 1372 "xmltok_impl.c"
        HEAP[$end_addr]=$4; //@line 1372 "xmltok_impl.c"
        __label__ = 19; break; //@line 1372 "xmltok_impl.c"
      case 1: // $bb
        var $5=HEAP[$ptr_addr]; //@line 1374 "xmltok_impl.c"
        var $6=(($5+1)&4294967295); //@line 1374 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 1374 "xmltok_impl.c"
        var $8=reSign(($7), 8, 0)==0; //@line 1374 "xmltok_impl.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1374 "xmltok_impl.c"
      case 2: // $bb1
        var $9=HEAP[$enc_addr]; //@line 1374 "xmltok_impl.c"
        var $10=$9; //@line 1374 "xmltok_impl.c"
        var $11=HEAP[$ptr_addr]; //@line 1374 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 1374 "xmltok_impl.c"
        var $13=unSign(($12), 8, 0); //@line 1374 "xmltok_impl.c"
        var $14=(($10+72)&4294967295); //@line 1374 "xmltok_impl.c"
        var $15=(($14+$13)&4294967295); //@line 1374 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 1374 "xmltok_impl.c"
        var $17=unSign(($16), 8, 0); //@line 1374 "xmltok_impl.c"
        HEAP[$iftmp_804]=$17; //@line 1374 "xmltok_impl.c"
        __label__ = 4; break; //@line 1374 "xmltok_impl.c"
      case 3: // $bb2
        var $18=HEAP[$ptr_addr]; //@line 1374 "xmltok_impl.c"
        var $19=(($18)&4294967295); //@line 1374 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 1374 "xmltok_impl.c"
        var $21=reSign(($20), 8, 0); //@line 1374 "xmltok_impl.c"
        var $22=HEAP[$ptr_addr]; //@line 1374 "xmltok_impl.c"
        var $23=(($22+1)&4294967295); //@line 1374 "xmltok_impl.c"
        var $24=HEAP[$23]; //@line 1374 "xmltok_impl.c"
        var $25=reSign(($24), 8, 0); //@line 1374 "xmltok_impl.c"
        var $26=((($25)) & 255); //@line 1374 "xmltok_impl.c"
        var $27=((($21)) & 255); //@line 1374 "xmltok_impl.c"
        var $28=_unicode_byte_type($26, $27); //@line 1374 "xmltok_impl.c"
        HEAP[$iftmp_804]=$28; //@line 1374 "xmltok_impl.c"
        __label__ = 4; break; //@line 1374 "xmltok_impl.c"
      case 4: // $bb3
        var $29=HEAP[$iftmp_804]; //@line 1374 "xmltok_impl.c"
        if ($29 == 9) {
          __label__ = 5; break;
        }
        else if ($29 == 10) {
          __label__ = 5; break;
        }
        else if ($29 == 13) {
          __label__ = 5; break;
        }
        else if ($29 == 14) {
          __label__ = 5; break;
        }
        else if ($29 == 15) {
          __label__ = 5; break;
        }
        else if ($29 == 16) {
          __label__ = 5; break;
        }
        else if ($29 == 17) {
          __label__ = 5; break;
        }
        else if ($29 == 18) {
          __label__ = 5; break;
        }
        else if ($29 == 19) {
          __label__ = 5; break;
        }
        else if ($29 == 21) {
          __label__ = 6; break;
        }
        else if ($29 == 22) {
          __label__ = 10; break;
        }
        else if ($29 == 24) {
          __label__ = 5; break;
        }
        else if ($29 == 25) {
          __label__ = 5; break;
        }
        else if ($29 == 26) {
          __label__ = 10; break;
        }
        else if ($29 == 27) {
          __label__ = 5; break;
        }
        else if ($29 == 30) {
          __label__ = 5; break;
        }
        else if ($29 == 31) {
          __label__ = 5; break;
        }
        else if ($29 == 32) {
          __label__ = 5; break;
        }
        else if ($29 == 33) {
          __label__ = 5; break;
        }
        else if ($29 == 34) {
          __label__ = 5; break;
        }
        else if ($29 == 35) {
          __label__ = 5; break;
        }
        else {
        __label__ = 12; break;
        }
        
      case 5: // $bb4
        __label__ = 18; break; //@line 1374 "xmltok_impl.c"
      case 6: // $bb5
        var $30=HEAP[$ptr_addr]; //@line 1398 "xmltok_impl.c"
        var $31=(($30+1)&4294967295); //@line 1398 "xmltok_impl.c"
        var $32=HEAP[$31]; //@line 1398 "xmltok_impl.c"
        var $33=reSign(($32), 8, 0)==0; //@line 1398 "xmltok_impl.c"
        if ($33) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 1398 "xmltok_impl.c"
      case 7: // $bb6
        var $34=HEAP[$ptr_addr]; //@line 1398 "xmltok_impl.c"
        var $35=(($34)&4294967295); //@line 1398 "xmltok_impl.c"
        var $36=HEAP[$35]; //@line 1398 "xmltok_impl.c"
        var $37=reSign(($36), 8, 0)==9; //@line 1398 "xmltok_impl.c"
        if ($37) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1398 "xmltok_impl.c"
      case 8: // $bb7
        var $38=HEAP[$badPtr_addr]; //@line 1399 "xmltok_impl.c"
        var $39=HEAP[$ptr_addr]; //@line 1399 "xmltok_impl.c"
        HEAP[$38]=$39; //@line 1399 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1400 "xmltok_impl.c"
        __label__ = 21; break; //@line 1400 "xmltok_impl.c"
      case 9: // $bb8
        __label__ = 18; break; //@line 1400 "xmltok_impl.c"
      case 10: // $bb9
        var $40=HEAP[$ptr_addr]; //@line 1405 "xmltok_impl.c"
        var $41=(($40+1)&4294967295); //@line 1405 "xmltok_impl.c"
        var $42=HEAP[$41]; //@line 1405 "xmltok_impl.c"
        var $43=reSign(($42), 8, 0)==0; //@line 1405 "xmltok_impl.c"
        if ($43) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1405 "xmltok_impl.c"
      case 11: // $bb10
        var $44=HEAP[$ptr_addr]; //@line 1405 "xmltok_impl.c"
        var $45=(($44)&4294967295); //@line 1405 "xmltok_impl.c"
        var $46=HEAP[$45]; //@line 1405 "xmltok_impl.c"
        var $47=reSign(($46), 8, 0); //@line 1405 "xmltok_impl.c"
        var $48=($47) & -128; //@line 1405 "xmltok_impl.c"
        var $49=((($48))|0)==0; //@line 1405 "xmltok_impl.c"
        if ($49) { __label__ = 18; break; } else { __label__ = 12; break; } //@line 1405 "xmltok_impl.c"
      case 12: // $bb11
        var $50=HEAP[$ptr_addr]; //@line 1408 "xmltok_impl.c"
        var $51=(($50+1)&4294967295); //@line 1408 "xmltok_impl.c"
        var $52=HEAP[$51]; //@line 1408 "xmltok_impl.c"
        var $53=reSign(($52), 8, 0)==0; //@line 1408 "xmltok_impl.c"
        if ($53) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1408 "xmltok_impl.c"
      case 13: // $bb12
        var $54=HEAP[$ptr_addr]; //@line 1408 "xmltok_impl.c"
        var $55=(($54)&4294967295); //@line 1408 "xmltok_impl.c"
        var $56=HEAP[$55]; //@line 1408 "xmltok_impl.c"
        var $57=reSign(($56), 8, 0); //@line 1408 "xmltok_impl.c"
        HEAP[$iftmp_806]=$57; //@line 1408 "xmltok_impl.c"
        __label__ = 15; break; //@line 1408 "xmltok_impl.c"
      case 14: // $bb13
        HEAP[$iftmp_806]=-1; //@line 1408 "xmltok_impl.c"
        __label__ = 15; break; //@line 1408 "xmltok_impl.c"
      case 15: // $bb14
        var $58=HEAP[$iftmp_806]; //@line 1408 "xmltok_impl.c"
        if ($58 == 36) {
          __label__ = 16; break;
        }
        else if ($58 == 64) {
          __label__ = 16; break;
        }
        else {
        __label__ = 17; break;
        }
        
      case 16: // $bb15
        __label__ = 18; break; //@line 1408 "xmltok_impl.c"
      case 17: // $bb16
        var $59=HEAP[$badPtr_addr]; //@line 1413 "xmltok_impl.c"
        var $60=HEAP[$ptr_addr]; //@line 1413 "xmltok_impl.c"
        HEAP[$59]=$60; //@line 1413 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1414 "xmltok_impl.c"
        __label__ = 21; break; //@line 1414 "xmltok_impl.c"
      case 18: // $bb17
        var $61=HEAP[$ptr_addr]; //@line 1373 "xmltok_impl.c"
        var $62=(($61+2)&4294967295); //@line 1373 "xmltok_impl.c"
        HEAP[$ptr_addr]=$62; //@line 1373 "xmltok_impl.c"
        __label__ = 19; break; //@line 1373 "xmltok_impl.c"
      case 19: // $bb18
        var $63=HEAP[$ptr_addr]; //@line 1373 "xmltok_impl.c"
        var $64=HEAP[$end_addr]; //@line 1373 "xmltok_impl.c"
        var $65=($63)!=($64); //@line 1373 "xmltok_impl.c"
        if ($65) { __label__ = 1; break; } else { __label__ = 20; break; } //@line 1373 "xmltok_impl.c"
      case 20: // $bb19
        HEAP[$0]=1; //@line 1419 "xmltok_impl.c"
        __label__ = 21; break; //@line 1419 "xmltok_impl.c"
      case 21: // $bb20
        var $66=HEAP[$0]; //@line 1400 "xmltok_impl.c"
        HEAP[$retval]=$66; //@line 1400 "xmltok_impl.c"
        __label__ = 22; break; //@line 1400 "xmltok_impl.c"
      case 22: // $return
        var $retval21=HEAP[$retval]; //@line 1400 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval21; //@line 1400 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_getAtts($enc, $ptr, $attsMax, $atts) {
    var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 44);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $attsMax_addr=__stackBase__+8;
        var $atts_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $iftmp_809=__stackBase__+24;
        var $iftmp_807=__stackBase__+28;
        var $state=__stackBase__+32;
        var $nAtts=__stackBase__+36;
        var $open=__stackBase__+40;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$attsMax_addr]=$attsMax;
        HEAP[$atts_addr]=$atts;
        HEAP[$state]=1; //@line 1431 "xmltok_impl.c"
        HEAP[$nAtts]=0; //@line 1432 "xmltok_impl.c"
        HEAP[$open]=0; //@line 1433 "xmltok_impl.c"
        var $1=HEAP[$ptr_addr]; //@line 1436 "xmltok_impl.c"
        var $2=(($1+2)&4294967295); //@line 1436 "xmltok_impl.c"
        HEAP[$ptr_addr]=$2; //@line 1436 "xmltok_impl.c"
        __label__ = 1; break; //@line 1436 "xmltok_impl.c"
      case 1: // $bb
        var $3=HEAP[$ptr_addr]; //@line 1437 "xmltok_impl.c"
        var $4=(($3+1)&4294967295); //@line 1437 "xmltok_impl.c"
        var $5=HEAP[$4]; //@line 1437 "xmltok_impl.c"
        var $6=reSign(($5), 8, 0)==0; //@line 1437 "xmltok_impl.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1437 "xmltok_impl.c"
      case 2: // $bb1
        var $7=HEAP[$enc_addr]; //@line 1437 "xmltok_impl.c"
        var $8=$7; //@line 1437 "xmltok_impl.c"
        var $9=HEAP[$ptr_addr]; //@line 1437 "xmltok_impl.c"
        var $10=HEAP[$9]; //@line 1437 "xmltok_impl.c"
        var $11=unSign(($10), 8, 0); //@line 1437 "xmltok_impl.c"
        var $12=(($8+72)&4294967295); //@line 1437 "xmltok_impl.c"
        var $13=(($12+$11)&4294967295); //@line 1437 "xmltok_impl.c"
        var $14=HEAP[$13]; //@line 1437 "xmltok_impl.c"
        var $15=unSign(($14), 8, 0); //@line 1437 "xmltok_impl.c"
        HEAP[$iftmp_807]=$15; //@line 1437 "xmltok_impl.c"
        __label__ = 4; break; //@line 1437 "xmltok_impl.c"
      case 3: // $bb2
        var $16=HEAP[$ptr_addr]; //@line 1437 "xmltok_impl.c"
        var $17=(($16)&4294967295); //@line 1437 "xmltok_impl.c"
        var $18=HEAP[$17]; //@line 1437 "xmltok_impl.c"
        var $19=reSign(($18), 8, 0); //@line 1437 "xmltok_impl.c"
        var $20=HEAP[$ptr_addr]; //@line 1437 "xmltok_impl.c"
        var $21=(($20+1)&4294967295); //@line 1437 "xmltok_impl.c"
        var $22=HEAP[$21]; //@line 1437 "xmltok_impl.c"
        var $23=reSign(($22), 8, 0); //@line 1437 "xmltok_impl.c"
        var $24=((($23)) & 255); //@line 1437 "xmltok_impl.c"
        var $25=((($19)) & 255); //@line 1437 "xmltok_impl.c"
        var $26=_unicode_byte_type($24, $25); //@line 1437 "xmltok_impl.c"
        HEAP[$iftmp_807]=$26; //@line 1437 "xmltok_impl.c"
        __label__ = 4; break; //@line 1437 "xmltok_impl.c"
      case 4: // $bb3
        var $27=HEAP[$iftmp_807]; //@line 1437 "xmltok_impl.c"
        if ($27 == 3) {
          __label__ = 43; break;
        }
        else if ($27 == 5) {
          __label__ = 5; break;
        }
        else if ($27 == 6) {
          __label__ = 10; break;
        }
        else if ($27 == 7) {
          __label__ = 15; break;
        }
        else if ($27 == 9) {
          __label__ = 62; break;
        }
        else if ($27 == 10) {
          __label__ = 62; break;
        }
        else if ($27 == 11) {
          __label__ = 68; break;
        }
        else if ($27 == 12) {
          __label__ = 25; break;
        }
        else if ($27 == 13) {
          __label__ = 34; break;
        }
        else if ($27 == 17) {
          __label__ = 68; break;
        }
        else if ($27 == 21) {
          __label__ = 46; break;
        }
        else if ($27 == 22) {
          __label__ = 20; break;
        }
        else if ($27 == 24) {
          __label__ = 20; break;
        }
        else if ($27 == 29) {
          __label__ = 20; break;
        }
        else {
        __label__ = 70; break;
        }
        
      case 5: // $bb4
        var $28=HEAP[$state]; //@line 1448 "xmltok_impl.c"
        var $29=((($28))|0)==0; //@line 1448 "xmltok_impl.c"
        if ($29) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 1448 "xmltok_impl.c"
      case 6: // $bb5
        var $30=HEAP[$nAtts]; //@line 1448 "xmltok_impl.c"
        var $31=HEAP[$attsMax_addr]; //@line 1448 "xmltok_impl.c"
        var $32=((($30))|0) < ((($31))|0); //@line 1448 "xmltok_impl.c"
        if ($32) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1448 "xmltok_impl.c"
      case 7: // $bb6
        var $33=HEAP[$atts_addr]; //@line 1448 "xmltok_impl.c"
        var $34=HEAP[$nAtts]; //@line 1448 "xmltok_impl.c"
        var $35=(($33+16*$34)&4294967295); //@line 1448 "xmltok_impl.c"
        var $36=(($35)&4294967295); //@line 1448 "xmltok_impl.c"
        var $37=HEAP[$ptr_addr]; //@line 1448 "xmltok_impl.c"
        HEAP[$36]=$37; //@line 1448 "xmltok_impl.c"
        var $38=HEAP[$atts_addr]; //@line 1448 "xmltok_impl.c"
        var $39=HEAP[$nAtts]; //@line 1448 "xmltok_impl.c"
        var $40=(($38+16*$39)&4294967295); //@line 1448 "xmltok_impl.c"
        var $41=(($40+12)&4294967295); //@line 1448 "xmltok_impl.c"
        HEAP[$41]=1; //@line 1448 "xmltok_impl.c"
        __label__ = 8; break; //@line 1448 "xmltok_impl.c"
      case 8: // $bb7
        HEAP[$state]=1; //@line 1448 "xmltok_impl.c"
        __label__ = 9; break; //@line 1448 "xmltok_impl.c"
      case 9: // $bb8
        var $42=HEAP[$ptr_addr]; //@line 1448 "xmltok_impl.c"
        var $43=(($42)&4294967295); //@line 1448 "xmltok_impl.c"
        HEAP[$ptr_addr]=$43; //@line 1448 "xmltok_impl.c"
        __label__ = 70; break; //@line 1448 "xmltok_impl.c"
      case 10: // $bb9
        var $44=HEAP[$state]; //@line 1448 "xmltok_impl.c"
        var $45=((($44))|0)==0; //@line 1448 "xmltok_impl.c"
        if ($45) { __label__ = 11; break; } else { __label__ = 14; break; } //@line 1448 "xmltok_impl.c"
      case 11: // $bb10
        var $46=HEAP[$nAtts]; //@line 1448 "xmltok_impl.c"
        var $47=HEAP[$attsMax_addr]; //@line 1448 "xmltok_impl.c"
        var $48=((($46))|0) < ((($47))|0); //@line 1448 "xmltok_impl.c"
        if ($48) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1448 "xmltok_impl.c"
      case 12: // $bb11
        var $49=HEAP[$atts_addr]; //@line 1448 "xmltok_impl.c"
        var $50=HEAP[$nAtts]; //@line 1448 "xmltok_impl.c"
        var $51=(($49+16*$50)&4294967295); //@line 1448 "xmltok_impl.c"
        var $52=(($51)&4294967295); //@line 1448 "xmltok_impl.c"
        var $53=HEAP[$ptr_addr]; //@line 1448 "xmltok_impl.c"
        HEAP[$52]=$53; //@line 1448 "xmltok_impl.c"
        var $54=HEAP[$atts_addr]; //@line 1448 "xmltok_impl.c"
        var $55=HEAP[$nAtts]; //@line 1448 "xmltok_impl.c"
        var $56=(($54+16*$55)&4294967295); //@line 1448 "xmltok_impl.c"
        var $57=(($56+12)&4294967295); //@line 1448 "xmltok_impl.c"
        HEAP[$57]=1; //@line 1448 "xmltok_impl.c"
        __label__ = 13; break; //@line 1448 "xmltok_impl.c"
      case 13: // $bb12
        HEAP[$state]=1; //@line 1448 "xmltok_impl.c"
        __label__ = 14; break; //@line 1448 "xmltok_impl.c"
      case 14: // $bb13
        var $58=HEAP[$ptr_addr]; //@line 1448 "xmltok_impl.c"
        var $59=(($58+1)&4294967295); //@line 1448 "xmltok_impl.c"
        HEAP[$ptr_addr]=$59; //@line 1448 "xmltok_impl.c"
        __label__ = 70; break; //@line 1448 "xmltok_impl.c"
      case 15: // $bb14
        var $60=HEAP[$state]; //@line 1448 "xmltok_impl.c"
        var $61=((($60))|0)==0; //@line 1448 "xmltok_impl.c"
        if ($61) { __label__ = 16; break; } else { __label__ = 19; break; } //@line 1448 "xmltok_impl.c"
      case 16: // $bb15
        var $62=HEAP[$nAtts]; //@line 1448 "xmltok_impl.c"
        var $63=HEAP[$attsMax_addr]; //@line 1448 "xmltok_impl.c"
        var $64=((($62))|0) < ((($63))|0); //@line 1448 "xmltok_impl.c"
        if ($64) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 1448 "xmltok_impl.c"
      case 17: // $bb16
        var $65=HEAP[$atts_addr]; //@line 1448 "xmltok_impl.c"
        var $66=HEAP[$nAtts]; //@line 1448 "xmltok_impl.c"
        var $67=(($65+16*$66)&4294967295); //@line 1448 "xmltok_impl.c"
        var $68=(($67)&4294967295); //@line 1448 "xmltok_impl.c"
        var $69=HEAP[$ptr_addr]; //@line 1448 "xmltok_impl.c"
        HEAP[$68]=$69; //@line 1448 "xmltok_impl.c"
        var $70=HEAP[$atts_addr]; //@line 1448 "xmltok_impl.c"
        var $71=HEAP[$nAtts]; //@line 1448 "xmltok_impl.c"
        var $72=(($70+16*$71)&4294967295); //@line 1448 "xmltok_impl.c"
        var $73=(($72+12)&4294967295); //@line 1448 "xmltok_impl.c"
        HEAP[$73]=1; //@line 1448 "xmltok_impl.c"
        __label__ = 18; break; //@line 1448 "xmltok_impl.c"
      case 18: // $bb17
        HEAP[$state]=1; //@line 1448 "xmltok_impl.c"
        __label__ = 19; break; //@line 1448 "xmltok_impl.c"
      case 19: // $bb18
        var $74=HEAP[$ptr_addr]; //@line 1448 "xmltok_impl.c"
        var $75=(($74+2)&4294967295); //@line 1448 "xmltok_impl.c"
        HEAP[$ptr_addr]=$75; //@line 1448 "xmltok_impl.c"
        __label__ = 70; break; //@line 1448 "xmltok_impl.c"
      case 20: // $bb19
        var $76=HEAP[$state]; //@line 1453 "xmltok_impl.c"
        var $77=((($76))|0)==0; //@line 1453 "xmltok_impl.c"
        if ($77) { __label__ = 21; break; } else { __label__ = 24; break; } //@line 1453 "xmltok_impl.c"
      case 21: // $bb20
        var $78=HEAP[$nAtts]; //@line 1453 "xmltok_impl.c"
        var $79=HEAP[$attsMax_addr]; //@line 1453 "xmltok_impl.c"
        var $80=((($78))|0) < ((($79))|0); //@line 1453 "xmltok_impl.c"
        if ($80) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 1453 "xmltok_impl.c"
      case 22: // $bb21
        var $81=HEAP[$atts_addr]; //@line 1453 "xmltok_impl.c"
        var $82=HEAP[$nAtts]; //@line 1453 "xmltok_impl.c"
        var $83=(($81+16*$82)&4294967295); //@line 1453 "xmltok_impl.c"
        var $84=(($83)&4294967295); //@line 1453 "xmltok_impl.c"
        var $85=HEAP[$ptr_addr]; //@line 1453 "xmltok_impl.c"
        HEAP[$84]=$85; //@line 1453 "xmltok_impl.c"
        var $86=HEAP[$atts_addr]; //@line 1453 "xmltok_impl.c"
        var $87=HEAP[$nAtts]; //@line 1453 "xmltok_impl.c"
        var $88=(($86+16*$87)&4294967295); //@line 1453 "xmltok_impl.c"
        var $89=(($88+12)&4294967295); //@line 1453 "xmltok_impl.c"
        HEAP[$89]=1; //@line 1453 "xmltok_impl.c"
        __label__ = 23; break; //@line 1453 "xmltok_impl.c"
      case 23: // $bb22
        HEAP[$state]=1; //@line 1453 "xmltok_impl.c"
        __label__ = 24; break; //@line 1453 "xmltok_impl.c"
      case 24: // $bb23
        __label__ = 70; break; //@line 1453 "xmltok_impl.c"
      case 25: // $bb24
        var $90=HEAP[$state]; //@line 1457 "xmltok_impl.c"
        var $91=((($90))|0)!=2; //@line 1457 "xmltok_impl.c"
        if ($91) { __label__ = 26; break; } else { __label__ = 29; break; } //@line 1457 "xmltok_impl.c"
      case 26: // $bb25
        var $92=HEAP[$nAtts]; //@line 1458 "xmltok_impl.c"
        var $93=HEAP[$attsMax_addr]; //@line 1458 "xmltok_impl.c"
        var $94=((($92))|0) < ((($93))|0); //@line 1458 "xmltok_impl.c"
        if ($94) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 1458 "xmltok_impl.c"
      case 27: // $bb26
        var $95=HEAP[$atts_addr]; //@line 1459 "xmltok_impl.c"
        var $96=HEAP[$nAtts]; //@line 1459 "xmltok_impl.c"
        var $97=(($95+16*$96)&4294967295); //@line 1459 "xmltok_impl.c"
        var $98=HEAP[$ptr_addr]; //@line 1459 "xmltok_impl.c"
        var $99=(($98+2)&4294967295); //@line 1459 "xmltok_impl.c"
        var $100=(($97+4)&4294967295); //@line 1459 "xmltok_impl.c"
        HEAP[$100]=$99; //@line 1459 "xmltok_impl.c"
        __label__ = 28; break; //@line 1459 "xmltok_impl.c"
      case 28: // $bb27
        HEAP[$state]=2; //@line 1460 "xmltok_impl.c"
        HEAP[$open]=12; //@line 1461 "xmltok_impl.c"
        __label__ = 33; break; //@line 1461 "xmltok_impl.c"
      case 29: // $bb28
        var $101=HEAP[$open]; //@line 1463 "xmltok_impl.c"
        var $102=((($101))|0)==12; //@line 1463 "xmltok_impl.c"
        if ($102) { __label__ = 30; break; } else { __label__ = 33; break; } //@line 1463 "xmltok_impl.c"
      case 30: // $bb29
        HEAP[$state]=0; //@line 1464 "xmltok_impl.c"
        var $103=HEAP[$nAtts]; //@line 1465 "xmltok_impl.c"
        var $104=HEAP[$attsMax_addr]; //@line 1465 "xmltok_impl.c"
        var $105=((($103))|0) < ((($104))|0); //@line 1465 "xmltok_impl.c"
        if ($105) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 1465 "xmltok_impl.c"
      case 31: // $bb30
        var $106=HEAP[$atts_addr]; //@line 1466 "xmltok_impl.c"
        var $107=HEAP[$nAtts]; //@line 1466 "xmltok_impl.c"
        var $108=(($106+16*$107)&4294967295); //@line 1466 "xmltok_impl.c"
        var $109=(($108+8)&4294967295); //@line 1466 "xmltok_impl.c"
        var $110=HEAP[$ptr_addr]; //@line 1466 "xmltok_impl.c"
        HEAP[$109]=$110; //@line 1466 "xmltok_impl.c"
        __label__ = 32; break; //@line 1466 "xmltok_impl.c"
      case 32: // $bb31
        var $111=HEAP[$nAtts]; //@line 1467 "xmltok_impl.c"
        var $112=((($111) + 1)&4294967295); //@line 1467 "xmltok_impl.c"
        HEAP[$nAtts]=$112; //@line 1467 "xmltok_impl.c"
        __label__ = 33; break; //@line 1467 "xmltok_impl.c"
      case 33: // $bb32
        __label__ = 70; break; //@line 1467 "xmltok_impl.c"
      case 34: // $bb33
        var $113=HEAP[$state]; //@line 1471 "xmltok_impl.c"
        var $114=((($113))|0)!=2; //@line 1471 "xmltok_impl.c"
        if ($114) { __label__ = 35; break; } else { __label__ = 38; break; } //@line 1471 "xmltok_impl.c"
      case 35: // $bb34
        var $115=HEAP[$nAtts]; //@line 1472 "xmltok_impl.c"
        var $116=HEAP[$attsMax_addr]; //@line 1472 "xmltok_impl.c"
        var $117=((($115))|0) < ((($116))|0); //@line 1472 "xmltok_impl.c"
        if ($117) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 1472 "xmltok_impl.c"
      case 36: // $bb35
        var $118=HEAP[$atts_addr]; //@line 1473 "xmltok_impl.c"
        var $119=HEAP[$nAtts]; //@line 1473 "xmltok_impl.c"
        var $120=(($118+16*$119)&4294967295); //@line 1473 "xmltok_impl.c"
        var $121=HEAP[$ptr_addr]; //@line 1473 "xmltok_impl.c"
        var $122=(($121+2)&4294967295); //@line 1473 "xmltok_impl.c"
        var $123=(($120+4)&4294967295); //@line 1473 "xmltok_impl.c"
        HEAP[$123]=$122; //@line 1473 "xmltok_impl.c"
        __label__ = 37; break; //@line 1473 "xmltok_impl.c"
      case 37: // $bb36
        HEAP[$state]=2; //@line 1474 "xmltok_impl.c"
        HEAP[$open]=13; //@line 1475 "xmltok_impl.c"
        __label__ = 42; break; //@line 1475 "xmltok_impl.c"
      case 38: // $bb37
        var $124=HEAP[$open]; //@line 1477 "xmltok_impl.c"
        var $125=((($124))|0)==13; //@line 1477 "xmltok_impl.c"
        if ($125) { __label__ = 39; break; } else { __label__ = 42; break; } //@line 1477 "xmltok_impl.c"
      case 39: // $bb38
        HEAP[$state]=0; //@line 1478 "xmltok_impl.c"
        var $126=HEAP[$nAtts]; //@line 1479 "xmltok_impl.c"
        var $127=HEAP[$attsMax_addr]; //@line 1479 "xmltok_impl.c"
        var $128=((($126))|0) < ((($127))|0); //@line 1479 "xmltok_impl.c"
        if ($128) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 1479 "xmltok_impl.c"
      case 40: // $bb39
        var $129=HEAP[$atts_addr]; //@line 1480 "xmltok_impl.c"
        var $130=HEAP[$nAtts]; //@line 1480 "xmltok_impl.c"
        var $131=(($129+16*$130)&4294967295); //@line 1480 "xmltok_impl.c"
        var $132=(($131+8)&4294967295); //@line 1480 "xmltok_impl.c"
        var $133=HEAP[$ptr_addr]; //@line 1480 "xmltok_impl.c"
        HEAP[$132]=$133; //@line 1480 "xmltok_impl.c"
        __label__ = 41; break; //@line 1480 "xmltok_impl.c"
      case 41: // $bb40
        var $134=HEAP[$nAtts]; //@line 1481 "xmltok_impl.c"
        var $135=((($134) + 1)&4294967295); //@line 1481 "xmltok_impl.c"
        HEAP[$nAtts]=$135; //@line 1481 "xmltok_impl.c"
        __label__ = 42; break; //@line 1481 "xmltok_impl.c"
      case 42: // $bb41
        __label__ = 70; break; //@line 1481 "xmltok_impl.c"
      case 43: // $bb42
        var $136=HEAP[$nAtts]; //@line 1485 "xmltok_impl.c"
        var $137=HEAP[$attsMax_addr]; //@line 1485 "xmltok_impl.c"
        var $138=((($136))|0) < ((($137))|0); //@line 1485 "xmltok_impl.c"
        if ($138) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 1485 "xmltok_impl.c"
      case 44: // $bb43
        var $139=HEAP[$atts_addr]; //@line 1486 "xmltok_impl.c"
        var $140=HEAP[$nAtts]; //@line 1486 "xmltok_impl.c"
        var $141=(($139+16*$140)&4294967295); //@line 1486 "xmltok_impl.c"
        var $142=(($141+12)&4294967295); //@line 1486 "xmltok_impl.c"
        HEAP[$142]=0; //@line 1486 "xmltok_impl.c"
        __label__ = 45; break; //@line 1486 "xmltok_impl.c"
      case 45: // $bb44
        __label__ = 70; break; //@line 1486 "xmltok_impl.c"
      case 46: // $bb45
        var $143=HEAP[$state]; //@line 1489 "xmltok_impl.c"
        var $144=((($143))|0)==1; //@line 1489 "xmltok_impl.c"
        if ($144) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 1489 "xmltok_impl.c"
      case 47: // $bb46
        HEAP[$state]=0; //@line 1490 "xmltok_impl.c"
        __label__ = 61; break; //@line 1490 "xmltok_impl.c"
      case 48: // $bb47
        var $145=HEAP[$state]; //@line 1491 "xmltok_impl.c"
        var $146=((($145))|0)==2; //@line 1491 "xmltok_impl.c"
        if ($146) { __label__ = 49; break; } else { __label__ = 61; break; } //@line 1491 "xmltok_impl.c"
      case 49: // $bb48
        var $147=HEAP[$nAtts]; //@line 1491 "xmltok_impl.c"
        var $148=HEAP[$attsMax_addr]; //@line 1491 "xmltok_impl.c"
        var $149=((($147))|0) < ((($148))|0); //@line 1491 "xmltok_impl.c"
        if ($149) { __label__ = 50; break; } else { __label__ = 61; break; } //@line 1491 "xmltok_impl.c"
      case 50: // $bb49
        var $150=HEAP[$atts_addr]; //@line 1491 "xmltok_impl.c"
        var $151=HEAP[$nAtts]; //@line 1491 "xmltok_impl.c"
        var $152=(($150+16*$151)&4294967295); //@line 1491 "xmltok_impl.c"
        var $153=(($152+12)&4294967295); //@line 1491 "xmltok_impl.c"
        var $154=HEAP[$153]; //@line 1491 "xmltok_impl.c"
        var $155=reSign(($154), 8, 0)!=0; //@line 1491 "xmltok_impl.c"
        if ($155) { __label__ = 51; break; } else { __label__ = 61; break; } //@line 1491 "xmltok_impl.c"
      case 51: // $bb50
        var $156=HEAP[$atts_addr]; //@line 1491 "xmltok_impl.c"
        var $157=HEAP[$nAtts]; //@line 1491 "xmltok_impl.c"
        var $158=(($156+16*$157)&4294967295); //@line 1491 "xmltok_impl.c"
        var $159=(($158+4)&4294967295); //@line 1491 "xmltok_impl.c"
        var $160=HEAP[$159]; //@line 1491 "xmltok_impl.c"
        var $161=HEAP[$ptr_addr]; //@line 1491 "xmltok_impl.c"
        var $162=($160)==($161); //@line 1491 "xmltok_impl.c"
        if ($162) { __label__ = 60; break; } else { __label__ = 52; break; } //@line 1491 "xmltok_impl.c"
      case 52: // $bb51
        var $163=HEAP[$ptr_addr]; //@line 1491 "xmltok_impl.c"
        var $164=(($163+1)&4294967295); //@line 1491 "xmltok_impl.c"
        var $165=HEAP[$164]; //@line 1491 "xmltok_impl.c"
        var $166=reSign(($165), 8, 0)!=0; //@line 1491 "xmltok_impl.c"
        if ($166) { __label__ = 60; break; } else { __label__ = 53; break; } //@line 1491 "xmltok_impl.c"
      case 53: // $bb52
        var $167=HEAP[$ptr_addr]; //@line 1491 "xmltok_impl.c"
        var $168=(($167)&4294967295); //@line 1491 "xmltok_impl.c"
        var $169=HEAP[$168]; //@line 1491 "xmltok_impl.c"
        var $170=reSign(($169), 8, 0)!=32; //@line 1491 "xmltok_impl.c"
        if ($170) { __label__ = 60; break; } else { __label__ = 54; break; } //@line 1491 "xmltok_impl.c"
      case 54: // $bb53
        var $171=HEAP[$ptr_addr]; //@line 1491 "xmltok_impl.c"
        var $172=(($171+2)&4294967295); //@line 1491 "xmltok_impl.c"
        var $173=(($172+1)&4294967295); //@line 1491 "xmltok_impl.c"
        var $174=HEAP[$173]; //@line 1491 "xmltok_impl.c"
        var $175=reSign(($174), 8, 0)!=0; //@line 1491 "xmltok_impl.c"
        if ($175) { __label__ = 56; break; } else { __label__ = 55; break; } //@line 1491 "xmltok_impl.c"
      case 55: // $bb54
        var $176=HEAP[$ptr_addr]; //@line 1491 "xmltok_impl.c"
        var $177=(($176+2)&4294967295); //@line 1491 "xmltok_impl.c"
        var $178=(($177)&4294967295); //@line 1491 "xmltok_impl.c"
        var $179=HEAP[$178]; //@line 1491 "xmltok_impl.c"
        var $180=reSign(($179), 8, 0)==32; //@line 1491 "xmltok_impl.c"
        if ($180) { __label__ = 60; break; } else { __label__ = 56; break; } //@line 1491 "xmltok_impl.c"
      case 56: // $bb55
        var $181=HEAP[$ptr_addr]; //@line 1491 "xmltok_impl.c"
        var $182=(($181+2)&4294967295); //@line 1491 "xmltok_impl.c"
        var $183=(($182+1)&4294967295); //@line 1491 "xmltok_impl.c"
        var $184=HEAP[$183]; //@line 1491 "xmltok_impl.c"
        var $185=reSign(($184), 8, 0)==0; //@line 1491 "xmltok_impl.c"
        if ($185) { __label__ = 57; break; } else { __label__ = 58; break; } //@line 1491 "xmltok_impl.c"
      case 57: // $bb56
        var $186=HEAP[$enc_addr]; //@line 1491 "xmltok_impl.c"
        var $187=$186; //@line 1491 "xmltok_impl.c"
        var $188=HEAP[$ptr_addr]; //@line 1491 "xmltok_impl.c"
        var $189=(($188+2)&4294967295); //@line 1491 "xmltok_impl.c"
        var $190=HEAP[$189]; //@line 1491 "xmltok_impl.c"
        var $191=unSign(($190), 8, 0); //@line 1491 "xmltok_impl.c"
        var $192=(($187+72)&4294967295); //@line 1491 "xmltok_impl.c"
        var $193=(($192+$191)&4294967295); //@line 1491 "xmltok_impl.c"
        var $194=HEAP[$193]; //@line 1491 "xmltok_impl.c"
        var $195=unSign(($194), 8, 0); //@line 1491 "xmltok_impl.c"
        HEAP[$iftmp_809]=$195; //@line 1491 "xmltok_impl.c"
        __label__ = 59; break; //@line 1491 "xmltok_impl.c"
      case 58: // $bb57
        var $196=HEAP[$ptr_addr]; //@line 1491 "xmltok_impl.c"
        var $197=(($196+2)&4294967295); //@line 1491 "xmltok_impl.c"
        var $198=(($197)&4294967295); //@line 1491 "xmltok_impl.c"
        var $199=HEAP[$198]; //@line 1491 "xmltok_impl.c"
        var $200=reSign(($199), 8, 0); //@line 1491 "xmltok_impl.c"
        var $201=HEAP[$ptr_addr]; //@line 1491 "xmltok_impl.c"
        var $202=(($201+2)&4294967295); //@line 1491 "xmltok_impl.c"
        var $203=(($202+1)&4294967295); //@line 1491 "xmltok_impl.c"
        var $204=HEAP[$203]; //@line 1491 "xmltok_impl.c"
        var $205=reSign(($204), 8, 0); //@line 1491 "xmltok_impl.c"
        var $206=((($205)) & 255); //@line 1491 "xmltok_impl.c"
        var $207=((($200)) & 255); //@line 1491 "xmltok_impl.c"
        var $208=_unicode_byte_type($206, $207); //@line 1491 "xmltok_impl.c"
        HEAP[$iftmp_809]=$208; //@line 1491 "xmltok_impl.c"
        __label__ = 59; break; //@line 1491 "xmltok_impl.c"
      case 59: // $bb58
        var $209=HEAP[$iftmp_809]; //@line 1491 "xmltok_impl.c"
        var $210=HEAP[$open]; //@line 1491 "xmltok_impl.c"
        var $211=((($209))|0)==((($210))|0); //@line 1491 "xmltok_impl.c"
        if ($211) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 1491 "xmltok_impl.c"
      case 60: // $bb59
        var $212=HEAP[$atts_addr]; //@line 1498 "xmltok_impl.c"
        var $213=HEAP[$nAtts]; //@line 1498 "xmltok_impl.c"
        var $214=(($212+16*$213)&4294967295); //@line 1498 "xmltok_impl.c"
        var $215=(($214+12)&4294967295); //@line 1498 "xmltok_impl.c"
        HEAP[$215]=0; //@line 1498 "xmltok_impl.c"
        __label__ = 61; break; //@line 1498 "xmltok_impl.c"
      case 61: // $bb60
        __label__ = 70; break; //@line 1498 "xmltok_impl.c"
      case 62: // $bb61
        var $216=HEAP[$state]; //@line 1503 "xmltok_impl.c"
        var $217=((($216))|0)==1; //@line 1503 "xmltok_impl.c"
        if ($217) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 1503 "xmltok_impl.c"
      case 63: // $bb62
        HEAP[$state]=0; //@line 1504 "xmltok_impl.c"
        __label__ = 67; break; //@line 1504 "xmltok_impl.c"
      case 64: // $bb63
        var $218=HEAP[$state]; //@line 1505 "xmltok_impl.c"
        var $219=((($218))|0)==2; //@line 1505 "xmltok_impl.c"
        if ($219) { __label__ = 65; break; } else { __label__ = 67; break; } //@line 1505 "xmltok_impl.c"
      case 65: // $bb64
        var $220=HEAP[$nAtts]; //@line 1505 "xmltok_impl.c"
        var $221=HEAP[$attsMax_addr]; //@line 1505 "xmltok_impl.c"
        var $222=((($220))|0) < ((($221))|0); //@line 1505 "xmltok_impl.c"
        if ($222) { __label__ = 66; break; } else { __label__ = 67; break; } //@line 1505 "xmltok_impl.c"
      case 66: // $bb65
        var $223=HEAP[$atts_addr]; //@line 1506 "xmltok_impl.c"
        var $224=HEAP[$nAtts]; //@line 1506 "xmltok_impl.c"
        var $225=(($223+16*$224)&4294967295); //@line 1506 "xmltok_impl.c"
        var $226=(($225+12)&4294967295); //@line 1506 "xmltok_impl.c"
        HEAP[$226]=0; //@line 1506 "xmltok_impl.c"
        __label__ = 67; break; //@line 1506 "xmltok_impl.c"
      case 67: // $bb66
        __label__ = 70; break; //@line 1506 "xmltok_impl.c"
      case 68: // $bb67
        var $227=HEAP[$state]; //@line 1510 "xmltok_impl.c"
        var $228=((($227))|0)!=2; //@line 1510 "xmltok_impl.c"
        if ($228) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 1510 "xmltok_impl.c"
      case 69: // $bb68
        var $229=HEAP[$nAtts]; //@line 1511 "xmltok_impl.c"
        HEAP[$0]=$229; //@line 1511 "xmltok_impl.c"
        var $230=HEAP[$0]; //@line 1511 "xmltok_impl.c"
        HEAP[$retval]=$230; //@line 1511 "xmltok_impl.c"
        __label__ = 71; break; //@line 1511 "xmltok_impl.c"
      case 70: // $bb69
        var $231=HEAP[$ptr_addr]; //@line 1436 "xmltok_impl.c"
        var $232=(($231+2)&4294967295); //@line 1436 "xmltok_impl.c"
        HEAP[$ptr_addr]=$232; //@line 1436 "xmltok_impl.c"
        __label__ = 1; break; //@line 1436 "xmltok_impl.c"
      case 71: // $return
        var $retval70=HEAP[$retval]; //@line 1436 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval70; //@line 1436 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_charRefNumber($enc, $ptr) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $iftmp_812=__stackBase__+12;
        var $0=__stackBase__+16;
        var $iftmp_811=__stackBase__+20;
        var $result=__stackBase__+24;
        var $c=__stackBase__+28;
        var $c17=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$result]=0; //@line 1523 "xmltok_impl.c"
        var $1=HEAP[$ptr_addr]; //@line 1525 "xmltok_impl.c"
        var $2=(($1+4)&4294967295); //@line 1525 "xmltok_impl.c"
        HEAP[$ptr_addr]=$2; //@line 1525 "xmltok_impl.c"
        var $3=HEAP[$ptr_addr]; //@line 1526 "xmltok_impl.c"
        var $4=(($3+1)&4294967295); //@line 1526 "xmltok_impl.c"
        var $5=HEAP[$4]; //@line 1526 "xmltok_impl.c"
        var $6=reSign(($5), 8, 0)!=0; //@line 1526 "xmltok_impl.c"
        if ($6) { __label__ = 16; break; } else { __label__ = 1; break; } //@line 1526 "xmltok_impl.c"
      case 1: // $bb
        var $7=HEAP[$ptr_addr]; //@line 1526 "xmltok_impl.c"
        var $8=(($7)&4294967295); //@line 1526 "xmltok_impl.c"
        var $9=HEAP[$8]; //@line 1526 "xmltok_impl.c"
        var $10=reSign(($9), 8, 0)!=120; //@line 1526 "xmltok_impl.c"
        if ($10) { __label__ = 16; break; } else { __label__ = 2; break; } //@line 1526 "xmltok_impl.c"
      case 2: // $bb1
        var $11=HEAP[$ptr_addr]; //@line 1527 "xmltok_impl.c"
        var $12=(($11+2)&4294967295); //@line 1527 "xmltok_impl.c"
        HEAP[$ptr_addr]=$12; //@line 1527 "xmltok_impl.c"
        __label__ = 13; break; //@line 1527 "xmltok_impl.c"
      case 3: // $bb2
        var $13=HEAP[$ptr_addr]; //@line 1530 "xmltok_impl.c"
        var $14=(($13+1)&4294967295); //@line 1530 "xmltok_impl.c"
        var $15=HEAP[$14]; //@line 1530 "xmltok_impl.c"
        var $16=reSign(($15), 8, 0)==0; //@line 1530 "xmltok_impl.c"
        if ($16) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1530 "xmltok_impl.c"
      case 4: // $bb3
        var $17=HEAP[$ptr_addr]; //@line 1530 "xmltok_impl.c"
        var $18=(($17)&4294967295); //@line 1530 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 1530 "xmltok_impl.c"
        var $20=reSign(($19), 8, 0); //@line 1530 "xmltok_impl.c"
        HEAP[$iftmp_811]=$20; //@line 1530 "xmltok_impl.c"
        __label__ = 6; break; //@line 1530 "xmltok_impl.c"
      case 5: // $bb4
        HEAP[$iftmp_811]=-1; //@line 1530 "xmltok_impl.c"
        __label__ = 6; break; //@line 1530 "xmltok_impl.c"
      case 6: // $bb5
        var $21=HEAP[$iftmp_811]; //@line 1530 "xmltok_impl.c"
        HEAP[$c]=$21; //@line 1530 "xmltok_impl.c"
        var $22=HEAP[$c]; //@line 1531 "xmltok_impl.c"
        if ($22 == 48) {
          __label__ = 7; break;
        }
        else if ($22 == 49) {
          __label__ = 7; break;
        }
        else if ($22 == 50) {
          __label__ = 7; break;
        }
        else if ($22 == 51) {
          __label__ = 7; break;
        }
        else if ($22 == 52) {
          __label__ = 7; break;
        }
        else if ($22 == 53) {
          __label__ = 7; break;
        }
        else if ($22 == 54) {
          __label__ = 7; break;
        }
        else if ($22 == 55) {
          __label__ = 7; break;
        }
        else if ($22 == 56) {
          __label__ = 7; break;
        }
        else if ($22 == 57) {
          __label__ = 7; break;
        }
        else if ($22 == 65) {
          __label__ = 8; break;
        }
        else if ($22 == 66) {
          __label__ = 8; break;
        }
        else if ($22 == 67) {
          __label__ = 8; break;
        }
        else if ($22 == 68) {
          __label__ = 8; break;
        }
        else if ($22 == 69) {
          __label__ = 8; break;
        }
        else if ($22 == 70) {
          __label__ = 8; break;
        }
        else if ($22 == 97) {
          __label__ = 9; break;
        }
        else if ($22 == 98) {
          __label__ = 9; break;
        }
        else if ($22 == 99) {
          __label__ = 9; break;
        }
        else if ($22 == 100) {
          __label__ = 9; break;
        }
        else if ($22 == 101) {
          __label__ = 9; break;
        }
        else if ($22 == 102) {
          __label__ = 9; break;
        }
        else {
        __label__ = 10; break;
        }
        
      case 7: // $bb6
        var $23=HEAP[$result]; //@line 1534 "xmltok_impl.c"
        var $24=($23) << 4; //@line 1534 "xmltok_impl.c"
        HEAP[$result]=$24; //@line 1534 "xmltok_impl.c"
        var $25=HEAP[$c]; //@line 1535 "xmltok_impl.c"
        var $26=((($25) - 48)&4294967295); //@line 1535 "xmltok_impl.c"
        var $27=HEAP[$result]; //@line 1535 "xmltok_impl.c"
        var $28=($26) | ($27); //@line 1535 "xmltok_impl.c"
        HEAP[$result]=$28; //@line 1535 "xmltok_impl.c"
        __label__ = 10; break; //@line 1535 "xmltok_impl.c"
      case 8: // $bb7
        var $29=HEAP[$result]; //@line 1539 "xmltok_impl.c"
        var $30=($29) << 4; //@line 1539 "xmltok_impl.c"
        HEAP[$result]=$30; //@line 1539 "xmltok_impl.c"
        var $31=HEAP[$c]; //@line 1540 "xmltok_impl.c"
        var $32=((($31) - 55)&4294967295); //@line 1540 "xmltok_impl.c"
        var $33=HEAP[$result]; //@line 1540 "xmltok_impl.c"
        var $34=((($32) + ($33))&4294967295); //@line 1540 "xmltok_impl.c"
        HEAP[$result]=$34; //@line 1540 "xmltok_impl.c"
        __label__ = 10; break; //@line 1540 "xmltok_impl.c"
      case 9: // $bb8
        var $35=HEAP[$result]; //@line 1544 "xmltok_impl.c"
        var $36=($35) << 4; //@line 1544 "xmltok_impl.c"
        HEAP[$result]=$36; //@line 1544 "xmltok_impl.c"
        var $37=HEAP[$c]; //@line 1545 "xmltok_impl.c"
        var $38=((($37) - 87)&4294967295); //@line 1545 "xmltok_impl.c"
        var $39=HEAP[$result]; //@line 1545 "xmltok_impl.c"
        var $40=((($38) + ($39))&4294967295); //@line 1545 "xmltok_impl.c"
        HEAP[$result]=$40; //@line 1545 "xmltok_impl.c"
        __label__ = 10; break; //@line 1545 "xmltok_impl.c"
      case 10: // $bb9
        var $41=HEAP[$result]; //@line 1548 "xmltok_impl.c"
        var $42=((($41))|0) > 1114111; //@line 1548 "xmltok_impl.c"
        if ($42) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1548 "xmltok_impl.c"
      case 11: // $bb10
        HEAP[$0]=-1; //@line 1549 "xmltok_impl.c"
        __label__ = 26; break; //@line 1549 "xmltok_impl.c"
      case 12: // $bb11
        var $43=HEAP[$ptr_addr]; //@line 1529 "xmltok_impl.c"
        var $44=(($43+2)&4294967295); //@line 1529 "xmltok_impl.c"
        HEAP[$ptr_addr]=$44; //@line 1529 "xmltok_impl.c"
        __label__ = 13; break; //@line 1529 "xmltok_impl.c"
      case 13: // $bb12
        var $45=HEAP[$ptr_addr]; //@line 1528 "xmltok_impl.c"
        var $46=(($45+1)&4294967295); //@line 1528 "xmltok_impl.c"
        var $47=HEAP[$46]; //@line 1528 "xmltok_impl.c"
        var $48=reSign(($47), 8, 0)!=0; //@line 1528 "xmltok_impl.c"
        if ($48) { __label__ = 3; break; } else { __label__ = 14; break; } //@line 1528 "xmltok_impl.c"
      case 14: // $bb13
        var $49=HEAP[$ptr_addr]; //@line 1528 "xmltok_impl.c"
        var $50=(($49)&4294967295); //@line 1528 "xmltok_impl.c"
        var $51=HEAP[$50]; //@line 1528 "xmltok_impl.c"
        var $52=reSign(($51), 8, 0)!=59; //@line 1528 "xmltok_impl.c"
        if ($52) { __label__ = 3; break; } else { __label__ = 15; break; } //@line 1528 "xmltok_impl.c"
      case 15: // $bb14
        __label__ = 25; break; //@line 1528 "xmltok_impl.c"
      case 16: // $bb15
        __label__ = 23; break; //@line 1528 "xmltok_impl.c"
      case 17: // $bb16
        var $53=HEAP[$ptr_addr]; //@line 1554 "xmltok_impl.c"
        var $54=(($53+1)&4294967295); //@line 1554 "xmltok_impl.c"
        var $55=HEAP[$54]; //@line 1554 "xmltok_impl.c"
        var $56=reSign(($55), 8, 0)==0; //@line 1554 "xmltok_impl.c"
        if ($56) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 1554 "xmltok_impl.c"
      case 18: // $bb18
        var $57=HEAP[$ptr_addr]; //@line 1554 "xmltok_impl.c"
        var $58=(($57)&4294967295); //@line 1554 "xmltok_impl.c"
        var $59=HEAP[$58]; //@line 1554 "xmltok_impl.c"
        var $60=reSign(($59), 8, 0); //@line 1554 "xmltok_impl.c"
        HEAP[$iftmp_812]=$60; //@line 1554 "xmltok_impl.c"
        __label__ = 20; break; //@line 1554 "xmltok_impl.c"
      case 19: // $bb19
        HEAP[$iftmp_812]=-1; //@line 1554 "xmltok_impl.c"
        __label__ = 20; break; //@line 1554 "xmltok_impl.c"
      case 20: // $bb20
        var $61=HEAP[$iftmp_812]; //@line 1554 "xmltok_impl.c"
        HEAP[$c17]=$61; //@line 1554 "xmltok_impl.c"
        var $62=HEAP[$result]; //@line 1555 "xmltok_impl.c"
        var $63=((($62) * 10)&4294967295); //@line 1555 "xmltok_impl.c"
        HEAP[$result]=$63; //@line 1555 "xmltok_impl.c"
        var $64=HEAP[$c17]; //@line 1556 "xmltok_impl.c"
        var $65=((($64) - 48)&4294967295); //@line 1556 "xmltok_impl.c"
        var $66=HEAP[$result]; //@line 1556 "xmltok_impl.c"
        var $67=((($65) + ($66))&4294967295); //@line 1556 "xmltok_impl.c"
        HEAP[$result]=$67; //@line 1556 "xmltok_impl.c"
        var $68=HEAP[$result]; //@line 1557 "xmltok_impl.c"
        var $69=((($68))|0) > 1114111; //@line 1557 "xmltok_impl.c"
        if ($69) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 1557 "xmltok_impl.c"
      case 21: // $bb21
        HEAP[$0]=-1; //@line 1558 "xmltok_impl.c"
        __label__ = 26; break; //@line 1558 "xmltok_impl.c"
      case 22: // $bb22
        var $70=HEAP[$ptr_addr]; //@line 1553 "xmltok_impl.c"
        var $71=(($70+2)&4294967295); //@line 1553 "xmltok_impl.c"
        HEAP[$ptr_addr]=$71; //@line 1553 "xmltok_impl.c"
        __label__ = 23; break; //@line 1553 "xmltok_impl.c"
      case 23: // $bb23
        var $72=HEAP[$ptr_addr]; //@line 1553 "xmltok_impl.c"
        var $73=(($72+1)&4294967295); //@line 1553 "xmltok_impl.c"
        var $74=HEAP[$73]; //@line 1553 "xmltok_impl.c"
        var $75=reSign(($74), 8, 0)!=0; //@line 1553 "xmltok_impl.c"
        if ($75) { __label__ = 17; break; } else { __label__ = 24; break; } //@line 1553 "xmltok_impl.c"
      case 24: // $bb24
        var $76=HEAP[$ptr_addr]; //@line 1553 "xmltok_impl.c"
        var $77=(($76)&4294967295); //@line 1553 "xmltok_impl.c"
        var $78=HEAP[$77]; //@line 1553 "xmltok_impl.c"
        var $79=reSign(($78), 8, 0)!=59; //@line 1553 "xmltok_impl.c"
        if ($79) { __label__ = 17; break; } else { __label__ = 25; break; } //@line 1553 "xmltok_impl.c"
      case 25: // $bb25
        var $80=HEAP[$result]; //@line 1561 "xmltok_impl.c"
        var $81=_checkCharRefNumber($80); //@line 1561 "xmltok_impl.c"
        HEAP[$0]=$81; //@line 1561 "xmltok_impl.c"
        __label__ = 26; break; //@line 1561 "xmltok_impl.c"
      case 26: // $bb26
        var $82=HEAP[$0]; //@line 1549 "xmltok_impl.c"
        HEAP[$retval]=$82; //@line 1549 "xmltok_impl.c"
        __label__ = 27; break; //@line 1549 "xmltok_impl.c"
      case 27: // $return
        var $retval27=HEAP[$retval]; //@line 1549 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval27; //@line 1549 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_predefinedEntityName($enc, $ptr, $end) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $iftmp_816=__stackBase__+16;
        var $0=__stackBase__+20;
        var $iftmp_815=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        var $1=HEAP[$end_addr]; //@line 1568 "xmltok_impl.c"
        var $2=($1); //@line 1568 "xmltok_impl.c"
        var $3=HEAP[$ptr_addr]; //@line 1568 "xmltok_impl.c"
        var $4=($3); //@line 1568 "xmltok_impl.c"
        var $5=((($2) - ($4))&4294967295); //@line 1568 "xmltok_impl.c"
        var $6=((((($5))|0)/2)|0); //@line 1568 "xmltok_impl.c"
        if ($6 == 2) {
          __label__ = 1; break;
        }
        else if ($6 == 3) {
          __label__ = 10; break;
        }
        else if ($6 == 4) {
          __label__ = 18; break;
        }
        else {
        __label__ = 37; break;
        }
        
      case 1: // $bb
        var $7=HEAP[$ptr_addr]; //@line 1570 "xmltok_impl.c"
        var $8=(($7+2)&4294967295); //@line 1570 "xmltok_impl.c"
        var $9=(($8+1)&4294967295); //@line 1570 "xmltok_impl.c"
        var $10=HEAP[$9]; //@line 1570 "xmltok_impl.c"
        var $11=reSign(($10), 8, 0)==0; //@line 1570 "xmltok_impl.c"
        if ($11) { __label__ = 2; break; } else { __label__ = 9; break; } //@line 1570 "xmltok_impl.c"
      case 2: // $bb1
        var $12=HEAP[$ptr_addr]; //@line 1570 "xmltok_impl.c"
        var $13=(($12+2)&4294967295); //@line 1570 "xmltok_impl.c"
        var $14=(($13)&4294967295); //@line 1570 "xmltok_impl.c"
        var $15=HEAP[$14]; //@line 1570 "xmltok_impl.c"
        var $16=reSign(($15), 8, 0)==116; //@line 1570 "xmltok_impl.c"
        if ($16) { __label__ = 3; break; } else { __label__ = 9; break; } //@line 1570 "xmltok_impl.c"
      case 3: // $bb2
        var $17=HEAP[$ptr_addr]; //@line 1571 "xmltok_impl.c"
        var $18=(($17+1)&4294967295); //@line 1571 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 1571 "xmltok_impl.c"
        var $20=reSign(($19), 8, 0)==0; //@line 1571 "xmltok_impl.c"
        if ($20) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1571 "xmltok_impl.c"
      case 4: // $bb3
        var $21=HEAP[$ptr_addr]; //@line 1571 "xmltok_impl.c"
        var $22=(($21)&4294967295); //@line 1571 "xmltok_impl.c"
        var $23=HEAP[$22]; //@line 1571 "xmltok_impl.c"
        var $24=reSign(($23), 8, 0); //@line 1571 "xmltok_impl.c"
        HEAP[$iftmp_815]=$24; //@line 1571 "xmltok_impl.c"
        __label__ = 6; break; //@line 1571 "xmltok_impl.c"
      case 5: // $bb4
        HEAP[$iftmp_815]=-1; //@line 1571 "xmltok_impl.c"
        __label__ = 6; break; //@line 1571 "xmltok_impl.c"
      case 6: // $bb5
        var $25=HEAP[$iftmp_815]; //@line 1571 "xmltok_impl.c"
        if ($25 == 103) {
          __label__ = 8; break;
        }
        else if ($25 == 108) {
          __label__ = 7; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 7: // $bb6
        HEAP[$0]=60; //@line 1573 "xmltok_impl.c"
        __label__ = 38; break; //@line 1573 "xmltok_impl.c"
      case 8: // $bb7
        HEAP[$0]=62; //@line 1575 "xmltok_impl.c"
        __label__ = 38; break; //@line 1575 "xmltok_impl.c"
      case 9: // $bb8
        __label__ = 37; break; //@line 1575 "xmltok_impl.c"
      case 10: // $bb9
        var $26=HEAP[$ptr_addr]; //@line 1580 "xmltok_impl.c"
        var $27=(($26+1)&4294967295); //@line 1580 "xmltok_impl.c"
        var $28=HEAP[$27]; //@line 1580 "xmltok_impl.c"
        var $29=reSign(($28), 8, 0)==0; //@line 1580 "xmltok_impl.c"
        if ($29) { __label__ = 11; break; } else { __label__ = 17; break; } //@line 1580 "xmltok_impl.c"
      case 11: // $bb10
        var $30=HEAP[$ptr_addr]; //@line 1580 "xmltok_impl.c"
        var $31=(($30)&4294967295); //@line 1580 "xmltok_impl.c"
        var $32=HEAP[$31]; //@line 1580 "xmltok_impl.c"
        var $33=reSign(($32), 8, 0)==97; //@line 1580 "xmltok_impl.c"
        if ($33) { __label__ = 12; break; } else { __label__ = 17; break; } //@line 1580 "xmltok_impl.c"
      case 12: // $bb11
        var $34=HEAP[$ptr_addr]; //@line 1581 "xmltok_impl.c"
        var $35=(($34+2)&4294967295); //@line 1581 "xmltok_impl.c"
        HEAP[$ptr_addr]=$35; //@line 1581 "xmltok_impl.c"
        var $36=HEAP[$ptr_addr]; //@line 1582 "xmltok_impl.c"
        var $37=(($36+1)&4294967295); //@line 1582 "xmltok_impl.c"
        var $38=HEAP[$37]; //@line 1582 "xmltok_impl.c"
        var $39=reSign(($38), 8, 0)==0; //@line 1582 "xmltok_impl.c"
        if ($39) { __label__ = 13; break; } else { __label__ = 17; break; } //@line 1582 "xmltok_impl.c"
      case 13: // $bb12
        var $40=HEAP[$ptr_addr]; //@line 1582 "xmltok_impl.c"
        var $41=(($40)&4294967295); //@line 1582 "xmltok_impl.c"
        var $42=HEAP[$41]; //@line 1582 "xmltok_impl.c"
        var $43=reSign(($42), 8, 0)==109; //@line 1582 "xmltok_impl.c"
        if ($43) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 1582 "xmltok_impl.c"
      case 14: // $bb13
        var $44=HEAP[$ptr_addr]; //@line 1583 "xmltok_impl.c"
        var $45=(($44+2)&4294967295); //@line 1583 "xmltok_impl.c"
        HEAP[$ptr_addr]=$45; //@line 1583 "xmltok_impl.c"
        var $46=HEAP[$ptr_addr]; //@line 1584 "xmltok_impl.c"
        var $47=(($46+1)&4294967295); //@line 1584 "xmltok_impl.c"
        var $48=HEAP[$47]; //@line 1584 "xmltok_impl.c"
        var $49=reSign(($48), 8, 0)==0; //@line 1584 "xmltok_impl.c"
        if ($49) { __label__ = 15; break; } else { __label__ = 17; break; } //@line 1584 "xmltok_impl.c"
      case 15: // $bb14
        var $50=HEAP[$ptr_addr]; //@line 1584 "xmltok_impl.c"
        var $51=(($50)&4294967295); //@line 1584 "xmltok_impl.c"
        var $52=HEAP[$51]; //@line 1584 "xmltok_impl.c"
        var $53=reSign(($52), 8, 0)==112; //@line 1584 "xmltok_impl.c"
        if ($53) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 1584 "xmltok_impl.c"
      case 16: // $bb15
        HEAP[$0]=38; //@line 1585 "xmltok_impl.c"
        __label__ = 38; break; //@line 1585 "xmltok_impl.c"
      case 17: // $bb16
        __label__ = 37; break; //@line 1585 "xmltok_impl.c"
      case 18: // $bb17
        var $54=HEAP[$ptr_addr]; //@line 1590 "xmltok_impl.c"
        var $55=(($54+1)&4294967295); //@line 1590 "xmltok_impl.c"
        var $56=HEAP[$55]; //@line 1590 "xmltok_impl.c"
        var $57=reSign(($56), 8, 0)==0; //@line 1590 "xmltok_impl.c"
        if ($57) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 1590 "xmltok_impl.c"
      case 19: // $bb18
        var $58=HEAP[$ptr_addr]; //@line 1590 "xmltok_impl.c"
        var $59=(($58)&4294967295); //@line 1590 "xmltok_impl.c"
        var $60=HEAP[$59]; //@line 1590 "xmltok_impl.c"
        var $61=reSign(($60), 8, 0); //@line 1590 "xmltok_impl.c"
        HEAP[$iftmp_816]=$61; //@line 1590 "xmltok_impl.c"
        __label__ = 21; break; //@line 1590 "xmltok_impl.c"
      case 20: // $bb19
        HEAP[$iftmp_816]=-1; //@line 1590 "xmltok_impl.c"
        __label__ = 21; break; //@line 1590 "xmltok_impl.c"
      case 21: // $bb20
        var $62=HEAP[$iftmp_816]; //@line 1590 "xmltok_impl.c"
        if ($62 == 97) {
          __label__ = 30; break;
        }
        else if ($62 == 113) {
          __label__ = 22; break;
        }
        else {
        __label__ = 37; break;
        }
        
      case 22: // $bb21
        var $63=HEAP[$ptr_addr]; //@line 1592 "xmltok_impl.c"
        var $64=(($63+2)&4294967295); //@line 1592 "xmltok_impl.c"
        HEAP[$ptr_addr]=$64; //@line 1592 "xmltok_impl.c"
        var $65=HEAP[$ptr_addr]; //@line 1593 "xmltok_impl.c"
        var $66=(($65+1)&4294967295); //@line 1593 "xmltok_impl.c"
        var $67=HEAP[$66]; //@line 1593 "xmltok_impl.c"
        var $68=reSign(($67), 8, 0)==0; //@line 1593 "xmltok_impl.c"
        if ($68) { __label__ = 23; break; } else { __label__ = 29; break; } //@line 1593 "xmltok_impl.c"
      case 23: // $bb22
        var $69=HEAP[$ptr_addr]; //@line 1593 "xmltok_impl.c"
        var $70=(($69)&4294967295); //@line 1593 "xmltok_impl.c"
        var $71=HEAP[$70]; //@line 1593 "xmltok_impl.c"
        var $72=reSign(($71), 8, 0)==117; //@line 1593 "xmltok_impl.c"
        if ($72) { __label__ = 24; break; } else { __label__ = 29; break; } //@line 1593 "xmltok_impl.c"
      case 24: // $bb23
        var $73=HEAP[$ptr_addr]; //@line 1594 "xmltok_impl.c"
        var $74=(($73+2)&4294967295); //@line 1594 "xmltok_impl.c"
        HEAP[$ptr_addr]=$74; //@line 1594 "xmltok_impl.c"
        var $75=HEAP[$ptr_addr]; //@line 1595 "xmltok_impl.c"
        var $76=(($75+1)&4294967295); //@line 1595 "xmltok_impl.c"
        var $77=HEAP[$76]; //@line 1595 "xmltok_impl.c"
        var $78=reSign(($77), 8, 0)==0; //@line 1595 "xmltok_impl.c"
        if ($78) { __label__ = 25; break; } else { __label__ = 29; break; } //@line 1595 "xmltok_impl.c"
      case 25: // $bb24
        var $79=HEAP[$ptr_addr]; //@line 1595 "xmltok_impl.c"
        var $80=(($79)&4294967295); //@line 1595 "xmltok_impl.c"
        var $81=HEAP[$80]; //@line 1595 "xmltok_impl.c"
        var $82=reSign(($81), 8, 0)==111; //@line 1595 "xmltok_impl.c"
        if ($82) { __label__ = 26; break; } else { __label__ = 29; break; } //@line 1595 "xmltok_impl.c"
      case 26: // $bb25
        var $83=HEAP[$ptr_addr]; //@line 1596 "xmltok_impl.c"
        var $84=(($83+2)&4294967295); //@line 1596 "xmltok_impl.c"
        HEAP[$ptr_addr]=$84; //@line 1596 "xmltok_impl.c"
        var $85=HEAP[$ptr_addr]; //@line 1597 "xmltok_impl.c"
        var $86=(($85+1)&4294967295); //@line 1597 "xmltok_impl.c"
        var $87=HEAP[$86]; //@line 1597 "xmltok_impl.c"
        var $88=reSign(($87), 8, 0)==0; //@line 1597 "xmltok_impl.c"
        if ($88) { __label__ = 27; break; } else { __label__ = 29; break; } //@line 1597 "xmltok_impl.c"
      case 27: // $bb26
        var $89=HEAP[$ptr_addr]; //@line 1597 "xmltok_impl.c"
        var $90=(($89)&4294967295); //@line 1597 "xmltok_impl.c"
        var $91=HEAP[$90]; //@line 1597 "xmltok_impl.c"
        var $92=reSign(($91), 8, 0)==116; //@line 1597 "xmltok_impl.c"
        if ($92) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 1597 "xmltok_impl.c"
      case 28: // $bb27
        HEAP[$0]=34; //@line 1598 "xmltok_impl.c"
        __label__ = 38; break; //@line 1598 "xmltok_impl.c"
      case 29: // $bb28
        __label__ = 37; break; //@line 1598 "xmltok_impl.c"
      case 30: // $bb29
        var $93=HEAP[$ptr_addr]; //@line 1603 "xmltok_impl.c"
        var $94=(($93+2)&4294967295); //@line 1603 "xmltok_impl.c"
        HEAP[$ptr_addr]=$94; //@line 1603 "xmltok_impl.c"
        var $95=HEAP[$ptr_addr]; //@line 1604 "xmltok_impl.c"
        var $96=(($95+1)&4294967295); //@line 1604 "xmltok_impl.c"
        var $97=HEAP[$96]; //@line 1604 "xmltok_impl.c"
        var $98=reSign(($97), 8, 0)==0; //@line 1604 "xmltok_impl.c"
        if ($98) { __label__ = 31; break; } else { __label__ = 37; break; } //@line 1604 "xmltok_impl.c"
      case 31: // $bb30
        var $99=HEAP[$ptr_addr]; //@line 1604 "xmltok_impl.c"
        var $100=(($99)&4294967295); //@line 1604 "xmltok_impl.c"
        var $101=HEAP[$100]; //@line 1604 "xmltok_impl.c"
        var $102=reSign(($101), 8, 0)==112; //@line 1604 "xmltok_impl.c"
        if ($102) { __label__ = 32; break; } else { __label__ = 37; break; } //@line 1604 "xmltok_impl.c"
      case 32: // $bb31
        var $103=HEAP[$ptr_addr]; //@line 1605 "xmltok_impl.c"
        var $104=(($103+2)&4294967295); //@line 1605 "xmltok_impl.c"
        HEAP[$ptr_addr]=$104; //@line 1605 "xmltok_impl.c"
        var $105=HEAP[$ptr_addr]; //@line 1606 "xmltok_impl.c"
        var $106=(($105+1)&4294967295); //@line 1606 "xmltok_impl.c"
        var $107=HEAP[$106]; //@line 1606 "xmltok_impl.c"
        var $108=reSign(($107), 8, 0)==0; //@line 1606 "xmltok_impl.c"
        if ($108) { __label__ = 33; break; } else { __label__ = 37; break; } //@line 1606 "xmltok_impl.c"
      case 33: // $bb32
        var $109=HEAP[$ptr_addr]; //@line 1606 "xmltok_impl.c"
        var $110=(($109)&4294967295); //@line 1606 "xmltok_impl.c"
        var $111=HEAP[$110]; //@line 1606 "xmltok_impl.c"
        var $112=reSign(($111), 8, 0)==111; //@line 1606 "xmltok_impl.c"
        if ($112) { __label__ = 34; break; } else { __label__ = 37; break; } //@line 1606 "xmltok_impl.c"
      case 34: // $bb33
        var $113=HEAP[$ptr_addr]; //@line 1607 "xmltok_impl.c"
        var $114=(($113+2)&4294967295); //@line 1607 "xmltok_impl.c"
        HEAP[$ptr_addr]=$114; //@line 1607 "xmltok_impl.c"
        var $115=HEAP[$ptr_addr]; //@line 1608 "xmltok_impl.c"
        var $116=(($115+1)&4294967295); //@line 1608 "xmltok_impl.c"
        var $117=HEAP[$116]; //@line 1608 "xmltok_impl.c"
        var $118=reSign(($117), 8, 0)==0; //@line 1608 "xmltok_impl.c"
        if ($118) { __label__ = 35; break; } else { __label__ = 37; break; } //@line 1608 "xmltok_impl.c"
      case 35: // $bb34
        var $119=HEAP[$ptr_addr]; //@line 1608 "xmltok_impl.c"
        var $120=(($119)&4294967295); //@line 1608 "xmltok_impl.c"
        var $121=HEAP[$120]; //@line 1608 "xmltok_impl.c"
        var $122=reSign(($121), 8, 0)==115; //@line 1608 "xmltok_impl.c"
        if ($122) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 1608 "xmltok_impl.c"
      case 36: // $bb35
        HEAP[$0]=39; //@line 1609 "xmltok_impl.c"
        __label__ = 38; break; //@line 1609 "xmltok_impl.c"
      case 37: // $bb36
        HEAP[$0]=0; //@line 1615 "xmltok_impl.c"
        __label__ = 38; break; //@line 1615 "xmltok_impl.c"
      case 38: // $bb37
        var $123=HEAP[$0]; //@line 1573 "xmltok_impl.c"
        HEAP[$retval]=$123; //@line 1573 "xmltok_impl.c"
        __label__ = 39; break; //@line 1573 "xmltok_impl.c"
      case 39: // $return
        var $retval38=HEAP[$retval]; //@line 1573 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval38; //@line 1573 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_sameName($enc, $ptr1, $ptr2) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr1_addr=__stackBase__+4;
        var $ptr2_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $iftmp_819=__stackBase__+16;
        var $0=__stackBase__+20;
        var $iftmp_817=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr1_addr]=$ptr1;
        HEAP[$ptr2_addr]=$ptr2;
        __label__ = 1; break; //@line 1620 "xmltok.c"
      case 1: // $bb
        var $1=HEAP[$ptr1_addr]; //@line 1622 "xmltok_impl.c"
        var $2=(($1+1)&4294967295); //@line 1622 "xmltok_impl.c"
        var $3=HEAP[$2]; //@line 1622 "xmltok_impl.c"
        var $4=reSign(($3), 8, 0)==0; //@line 1622 "xmltok_impl.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1622 "xmltok_impl.c"
      case 2: // $bb1
        var $5=HEAP[$enc_addr]; //@line 1622 "xmltok_impl.c"
        var $6=$5; //@line 1622 "xmltok_impl.c"
        var $7=HEAP[$ptr1_addr]; //@line 1622 "xmltok_impl.c"
        var $8=HEAP[$7]; //@line 1622 "xmltok_impl.c"
        var $9=unSign(($8), 8, 0); //@line 1622 "xmltok_impl.c"
        var $10=(($6+72)&4294967295); //@line 1622 "xmltok_impl.c"
        var $11=(($10+$9)&4294967295); //@line 1622 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 1622 "xmltok_impl.c"
        var $13=unSign(($12), 8, 0); //@line 1622 "xmltok_impl.c"
        HEAP[$iftmp_817]=$13; //@line 1622 "xmltok_impl.c"
        __label__ = 4; break; //@line 1622 "xmltok_impl.c"
      case 3: // $bb2
        var $14=HEAP[$ptr1_addr]; //@line 1622 "xmltok_impl.c"
        var $15=(($14)&4294967295); //@line 1622 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 1622 "xmltok_impl.c"
        var $17=reSign(($16), 8, 0); //@line 1622 "xmltok_impl.c"
        var $18=HEAP[$ptr1_addr]; //@line 1622 "xmltok_impl.c"
        var $19=(($18+1)&4294967295); //@line 1622 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 1622 "xmltok_impl.c"
        var $21=reSign(($20), 8, 0); //@line 1622 "xmltok_impl.c"
        var $22=((($21)) & 255); //@line 1622 "xmltok_impl.c"
        var $23=((($17)) & 255); //@line 1622 "xmltok_impl.c"
        var $24=_unicode_byte_type($22, $23); //@line 1622 "xmltok_impl.c"
        HEAP[$iftmp_817]=$24; //@line 1622 "xmltok_impl.c"
        __label__ = 4; break; //@line 1622 "xmltok_impl.c"
      case 4: // $bb3
        var $25=HEAP[$iftmp_817]; //@line 1622 "xmltok_impl.c"
        if ($25 == 5) {
          __label__ = 9; break;
        }
        else if ($25 == 6) {
          __label__ = 7; break;
        }
        else if ($25 == 7) {
          __label__ = 5; break;
        }
        else if ($25 == 22) {
          __label__ = 14; break;
        }
        else if ($25 == 24) {
          __label__ = 14; break;
        }
        else if ($25 == 25) {
          __label__ = 14; break;
        }
        else if ($25 == 26) {
          __label__ = 14; break;
        }
        else if ($25 == 27) {
          __label__ = 14; break;
        }
        else if ($25 == 29) {
          __label__ = 14; break;
        }
        else {
        __label__ = 19; break;
        }
        
      case 5: // $bb4
        var $26=HEAP[$ptr1_addr]; //@line 1627 "xmltok_impl.c"
        var $27=HEAP[$26]; //@line 1627 "xmltok_impl.c"
        var $28=HEAP[$ptr2_addr]; //@line 1627 "xmltok_impl.c"
        var $29=HEAP[$28]; //@line 1627 "xmltok_impl.c"
        var $30=reSign(($27), 8, 0)!=reSign(($29), 8, 0); //@line 1627 "xmltok_impl.c"
        var $31=unSign(($30), 1, 0); //@line 1627 "xmltok_impl.c"
        var $32=HEAP[$ptr1_addr]; //@line 1627 "xmltok_impl.c"
        var $33=(($32+1)&4294967295); //@line 1627 "xmltok_impl.c"
        HEAP[$ptr1_addr]=$33; //@line 1627 "xmltok_impl.c"
        var $34=HEAP[$ptr2_addr]; //@line 1627 "xmltok_impl.c"
        var $35=(($34+1)&4294967295); //@line 1627 "xmltok_impl.c"
        HEAP[$ptr2_addr]=$35; //@line 1627 "xmltok_impl.c"
        var $toBool=reSign(($31), 8, 0)!=0; //@line 1627 "xmltok_impl.c"
        if ($toBool) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1627 "xmltok_impl.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 1627 "xmltok_impl.c"
        __label__ = 26; break; //@line 1627 "xmltok_impl.c"
      case 7: // $bb6
        var $36=HEAP[$ptr1_addr]; //@line 1627 "xmltok_impl.c"
        var $37=HEAP[$36]; //@line 1627 "xmltok_impl.c"
        var $38=HEAP[$ptr2_addr]; //@line 1627 "xmltok_impl.c"
        var $39=HEAP[$38]; //@line 1627 "xmltok_impl.c"
        var $40=reSign(($37), 8, 0)!=reSign(($39), 8, 0); //@line 1627 "xmltok_impl.c"
        var $41=unSign(($40), 1, 0); //@line 1627 "xmltok_impl.c"
        var $42=HEAP[$ptr1_addr]; //@line 1627 "xmltok_impl.c"
        var $43=(($42+1)&4294967295); //@line 1627 "xmltok_impl.c"
        HEAP[$ptr1_addr]=$43; //@line 1627 "xmltok_impl.c"
        var $44=HEAP[$ptr2_addr]; //@line 1627 "xmltok_impl.c"
        var $45=(($44+1)&4294967295); //@line 1627 "xmltok_impl.c"
        HEAP[$ptr2_addr]=$45; //@line 1627 "xmltok_impl.c"
        var $toBool7=reSign(($41), 8, 0)!=0; //@line 1627 "xmltok_impl.c"
        if ($toBool7) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1627 "xmltok_impl.c"
      case 8: // $bb8
        HEAP[$0]=0; //@line 1627 "xmltok_impl.c"
        __label__ = 26; break; //@line 1627 "xmltok_impl.c"
      case 9: // $bb9
        var $46=HEAP[$ptr1_addr]; //@line 1627 "xmltok_impl.c"
        var $47=HEAP[$46]; //@line 1627 "xmltok_impl.c"
        var $48=HEAP[$ptr2_addr]; //@line 1627 "xmltok_impl.c"
        var $49=HEAP[$48]; //@line 1627 "xmltok_impl.c"
        var $50=reSign(($47), 8, 0)!=reSign(($49), 8, 0); //@line 1627 "xmltok_impl.c"
        var $51=unSign(($50), 1, 0); //@line 1627 "xmltok_impl.c"
        var $52=HEAP[$ptr1_addr]; //@line 1627 "xmltok_impl.c"
        var $53=(($52+1)&4294967295); //@line 1627 "xmltok_impl.c"
        HEAP[$ptr1_addr]=$53; //@line 1627 "xmltok_impl.c"
        var $54=HEAP[$ptr2_addr]; //@line 1627 "xmltok_impl.c"
        var $55=(($54+1)&4294967295); //@line 1627 "xmltok_impl.c"
        HEAP[$ptr2_addr]=$55; //@line 1627 "xmltok_impl.c"
        var $toBool10=reSign(($51), 8, 0)!=0; //@line 1627 "xmltok_impl.c"
        if ($toBool10) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1627 "xmltok_impl.c"
      case 10: // $bb11
        HEAP[$0]=0; //@line 1627 "xmltok_impl.c"
        __label__ = 26; break; //@line 1627 "xmltok_impl.c"
      case 11: // $bb12
        var $56=HEAP[$ptr1_addr]; //@line 1630 "xmltok_impl.c"
        var $57=HEAP[$56]; //@line 1630 "xmltok_impl.c"
        var $58=HEAP[$ptr2_addr]; //@line 1630 "xmltok_impl.c"
        var $59=HEAP[$58]; //@line 1630 "xmltok_impl.c"
        var $60=reSign(($57), 8, 0)!=reSign(($59), 8, 0); //@line 1630 "xmltok_impl.c"
        var $61=unSign(($60), 1, 0); //@line 1630 "xmltok_impl.c"
        var $62=HEAP[$ptr1_addr]; //@line 1630 "xmltok_impl.c"
        var $63=(($62+1)&4294967295); //@line 1630 "xmltok_impl.c"
        HEAP[$ptr1_addr]=$63; //@line 1630 "xmltok_impl.c"
        var $64=HEAP[$ptr2_addr]; //@line 1630 "xmltok_impl.c"
        var $65=(($64+1)&4294967295); //@line 1630 "xmltok_impl.c"
        HEAP[$ptr2_addr]=$65; //@line 1630 "xmltok_impl.c"
        var $toBool13=reSign(($61), 8, 0)!=0; //@line 1630 "xmltok_impl.c"
        if ($toBool13) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1630 "xmltok_impl.c"
      case 12: // $bb14
        HEAP[$0]=0; //@line 1631 "xmltok_impl.c"
        __label__ = 26; break; //@line 1631 "xmltok_impl.c"
      case 13: // $bb15
        __label__ = 25; break; //@line 1631 "xmltok_impl.c"
      case 14: // $bb16
        var $66=HEAP[$ptr2_addr]; //@line 1642 "xmltok_impl.c"
        var $67=HEAP[$66]; //@line 1642 "xmltok_impl.c"
        var $68=HEAP[$ptr1_addr]; //@line 1642 "xmltok_impl.c"
        var $69=HEAP[$68]; //@line 1642 "xmltok_impl.c"
        var $70=reSign(($67), 8, 0)!=reSign(($69), 8, 0); //@line 1642 "xmltok_impl.c"
        var $71=unSign(($70), 1, 0); //@line 1642 "xmltok_impl.c"
        var $72=HEAP[$ptr2_addr]; //@line 1642 "xmltok_impl.c"
        var $73=(($72+1)&4294967295); //@line 1642 "xmltok_impl.c"
        HEAP[$ptr2_addr]=$73; //@line 1642 "xmltok_impl.c"
        var $74=HEAP[$ptr1_addr]; //@line 1642 "xmltok_impl.c"
        var $75=(($74+1)&4294967295); //@line 1642 "xmltok_impl.c"
        HEAP[$ptr1_addr]=$75; //@line 1642 "xmltok_impl.c"
        var $toBool17=reSign(($71), 8, 0)!=0; //@line 1642 "xmltok_impl.c"
        if ($toBool17) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1642 "xmltok_impl.c"
      case 15: // $bb18
        HEAP[$0]=0; //@line 1643 "xmltok_impl.c"
        __label__ = 26; break; //@line 1643 "xmltok_impl.c"
      case 16: // $bb19
        var $76=HEAP[$ptr2_addr]; //@line 1645 "xmltok_impl.c"
        var $77=HEAP[$76]; //@line 1645 "xmltok_impl.c"
        var $78=HEAP[$ptr1_addr]; //@line 1645 "xmltok_impl.c"
        var $79=HEAP[$78]; //@line 1645 "xmltok_impl.c"
        var $80=reSign(($77), 8, 0)!=reSign(($79), 8, 0); //@line 1645 "xmltok_impl.c"
        var $81=unSign(($80), 1, 0); //@line 1645 "xmltok_impl.c"
        var $82=HEAP[$ptr2_addr]; //@line 1645 "xmltok_impl.c"
        var $83=(($82+1)&4294967295); //@line 1645 "xmltok_impl.c"
        HEAP[$ptr2_addr]=$83; //@line 1645 "xmltok_impl.c"
        var $84=HEAP[$ptr1_addr]; //@line 1645 "xmltok_impl.c"
        var $85=(($84+1)&4294967295); //@line 1645 "xmltok_impl.c"
        HEAP[$ptr1_addr]=$85; //@line 1645 "xmltok_impl.c"
        var $toBool20=reSign(($81), 8, 0)!=0; //@line 1645 "xmltok_impl.c"
        if ($toBool20) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 1645 "xmltok_impl.c"
      case 17: // $bb21
        HEAP[$0]=0; //@line 1646 "xmltok_impl.c"
        __label__ = 26; break; //@line 1646 "xmltok_impl.c"
      case 18: // $bb22
        __label__ = 25; break; //@line 1646 "xmltok_impl.c"
      case 19: // $bb23
        var $86=HEAP[$ptr2_addr]; //@line 1660 "xmltok_impl.c"
        var $87=(($86+1)&4294967295); //@line 1660 "xmltok_impl.c"
        var $88=HEAP[$87]; //@line 1660 "xmltok_impl.c"
        var $89=reSign(($88), 8, 0)==0; //@line 1660 "xmltok_impl.c"
        if ($89) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1660 "xmltok_impl.c"
      case 20: // $bb24
        var $90=HEAP[$enc_addr]; //@line 1660 "xmltok_impl.c"
        var $91=$90; //@line 1660 "xmltok_impl.c"
        var $92=HEAP[$ptr2_addr]; //@line 1660 "xmltok_impl.c"
        var $93=HEAP[$92]; //@line 1660 "xmltok_impl.c"
        var $94=unSign(($93), 8, 0); //@line 1660 "xmltok_impl.c"
        var $95=(($91+72)&4294967295); //@line 1660 "xmltok_impl.c"
        var $96=(($95+$94)&4294967295); //@line 1660 "xmltok_impl.c"
        var $97=HEAP[$96]; //@line 1660 "xmltok_impl.c"
        var $98=unSign(($97), 8, 0); //@line 1660 "xmltok_impl.c"
        HEAP[$iftmp_819]=$98; //@line 1660 "xmltok_impl.c"
        __label__ = 22; break; //@line 1660 "xmltok_impl.c"
      case 21: // $bb25
        var $99=HEAP[$ptr2_addr]; //@line 1660 "xmltok_impl.c"
        var $100=(($99)&4294967295); //@line 1660 "xmltok_impl.c"
        var $101=HEAP[$100]; //@line 1660 "xmltok_impl.c"
        var $102=reSign(($101), 8, 0); //@line 1660 "xmltok_impl.c"
        var $103=HEAP[$ptr2_addr]; //@line 1660 "xmltok_impl.c"
        var $104=(($103+1)&4294967295); //@line 1660 "xmltok_impl.c"
        var $105=HEAP[$104]; //@line 1660 "xmltok_impl.c"
        var $106=reSign(($105), 8, 0); //@line 1660 "xmltok_impl.c"
        var $107=((($106)) & 255); //@line 1660 "xmltok_impl.c"
        var $108=((($102)) & 255); //@line 1660 "xmltok_impl.c"
        var $109=_unicode_byte_type($107, $108); //@line 1660 "xmltok_impl.c"
        HEAP[$iftmp_819]=$109; //@line 1660 "xmltok_impl.c"
        __label__ = 22; break; //@line 1660 "xmltok_impl.c"
      case 22: // $bb26
        var $110=HEAP[$iftmp_819]; //@line 1660 "xmltok_impl.c"
        if ($110 == 5) {
          __label__ = 23; break;
        }
        else if ($110 == 6) {
          __label__ = 23; break;
        }
        else if ($110 == 7) {
          __label__ = 23; break;
        }
        else if ($110 == 22) {
          __label__ = 23; break;
        }
        else if ($110 == 24) {
          __label__ = 23; break;
        }
        else if ($110 == 25) {
          __label__ = 23; break;
        }
        else if ($110 == 26) {
          __label__ = 23; break;
        }
        else if ($110 == 27) {
          __label__ = 23; break;
        }
        else if ($110 == 29) {
          __label__ = 23; break;
        }
        else {
        __label__ = 24; break;
        }
        
      case 23: // $bb27
        HEAP[$0]=0; //@line 1673 "xmltok_impl.c"
        __label__ = 26; break; //@line 1673 "xmltok_impl.c"
      case 24: // $bb28
        HEAP[$0]=1; //@line 1675 "xmltok_impl.c"
        __label__ = 26; break; //@line 1675 "xmltok_impl.c"
      case 25: // $bb29
        __label__ = 1; break; //@line 1675 "xmltok_impl.c"
      case 26: // $bb30
        var $111=HEAP[$0]; //@line 1627 "xmltok_impl.c"
        HEAP[$retval]=$111; //@line 1627 "xmltok_impl.c"
        __label__ = 27; break; //@line 1627 "xmltok_impl.c"
      case 27: // $return
        var $retval31=HEAP[$retval]; //@line 1627 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval31; //@line 1627 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_nameMatchesAscii($enc, $ptr1, $end1, $ptr2) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr1_addr=__stackBase__+4;
        var $end1_addr=__stackBase__+8;
        var $ptr2_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr1_addr]=$ptr1;
        HEAP[$end1_addr]=$end1;
        HEAP[$ptr2_addr]=$ptr2;
        __label__ = 7; break; //@line 1686 "xmltok_impl.c"
      case 1: // $bb
        var $1=HEAP[$ptr1_addr]; //@line 1687 "xmltok_impl.c"
        var $2=HEAP[$end1_addr]; //@line 1687 "xmltok_impl.c"
        var $3=($1)==($2); //@line 1687 "xmltok_impl.c"
        if ($3) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1687 "xmltok_impl.c"
      case 2: // $bb1
        HEAP[$0]=0; //@line 1688 "xmltok_impl.c"
        __label__ = 9; break; //@line 1688 "xmltok_impl.c"
      case 3: // $bb2
        var $4=HEAP[$ptr1_addr]; //@line 1689 "xmltok_impl.c"
        var $5=(($4+1)&4294967295); //@line 1689 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 1689 "xmltok_impl.c"
        var $7=reSign(($6), 8, 0)!=0; //@line 1689 "xmltok_impl.c"
        if ($7) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 1689 "xmltok_impl.c"
      case 4: // $bb3
        var $8=HEAP[$ptr1_addr]; //@line 1689 "xmltok_impl.c"
        var $9=(($8)&4294967295); //@line 1689 "xmltok_impl.c"
        var $10=HEAP[$9]; //@line 1689 "xmltok_impl.c"
        var $11=HEAP[$ptr2_addr]; //@line 1689 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 1689 "xmltok_impl.c"
        var $13=reSign(($10), 8, 0)!=reSign(($12), 8, 0); //@line 1689 "xmltok_impl.c"
        if ($13) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1689 "xmltok_impl.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 1690 "xmltok_impl.c"
        __label__ = 9; break; //@line 1690 "xmltok_impl.c"
      case 6: // $bb5
        var $14=HEAP[$ptr1_addr]; //@line 1686 "xmltok_impl.c"
        var $15=(($14+2)&4294967295); //@line 1686 "xmltok_impl.c"
        HEAP[$ptr1_addr]=$15; //@line 1686 "xmltok_impl.c"
        var $16=HEAP[$ptr2_addr]; //@line 1686 "xmltok_impl.c"
        var $17=(($16+1)&4294967295); //@line 1686 "xmltok_impl.c"
        HEAP[$ptr2_addr]=$17; //@line 1686 "xmltok_impl.c"
        __label__ = 7; break; //@line 1686 "xmltok_impl.c"
      case 7: // $bb6
        var $18=HEAP[$ptr2_addr]; //@line 1686 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 1686 "xmltok_impl.c"
        var $20=reSign(($19), 8, 0)!=0; //@line 1686 "xmltok_impl.c"
        if ($20) { __label__ = 1; break; } else { __label__ = 8; break; } //@line 1686 "xmltok_impl.c"
      case 8: // $bb7
        var $21=HEAP[$ptr1_addr]; //@line 1692 "xmltok_impl.c"
        var $22=HEAP[$end1_addr]; //@line 1692 "xmltok_impl.c"
        var $23=($21)==($22); //@line 1692 "xmltok_impl.c"
        var $24=unSign(($23), 1, 0); //@line 1692 "xmltok_impl.c"
        HEAP[$0]=$24; //@line 1692 "xmltok_impl.c"
        __label__ = 9; break; //@line 1692 "xmltok_impl.c"
      case 9: // $bb8
        var $25=HEAP[$0]; //@line 1688 "xmltok_impl.c"
        HEAP[$retval]=$25; //@line 1688 "xmltok_impl.c"
        __label__ = 10; break; //@line 1688 "xmltok_impl.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 1688 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 1688 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_nameLength($enc, $ptr) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $iftmp_821=__stackBase__+16;
        var $start=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        var $1=HEAP[$ptr_addr]; //@line 1698 "xmltok_impl.c"
        HEAP[$start]=$1; //@line 1698 "xmltok_impl.c"
        __label__ = 1; break; //@line 1698 "xmltok_impl.c"
      case 1: // $bb
        var $2=HEAP[$ptr_addr]; //@line 1700 "xmltok_impl.c"
        var $3=(($2+1)&4294967295); //@line 1700 "xmltok_impl.c"
        var $4=HEAP[$3]; //@line 1700 "xmltok_impl.c"
        var $5=reSign(($4), 8, 0)==0; //@line 1700 "xmltok_impl.c"
        if ($5) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1700 "xmltok_impl.c"
      case 2: // $bb1
        var $6=HEAP[$enc_addr]; //@line 1700 "xmltok_impl.c"
        var $7=$6; //@line 1700 "xmltok_impl.c"
        var $8=HEAP[$ptr_addr]; //@line 1700 "xmltok_impl.c"
        var $9=HEAP[$8]; //@line 1700 "xmltok_impl.c"
        var $10=unSign(($9), 8, 0); //@line 1700 "xmltok_impl.c"
        var $11=(($7+72)&4294967295); //@line 1700 "xmltok_impl.c"
        var $12=(($11+$10)&4294967295); //@line 1700 "xmltok_impl.c"
        var $13=HEAP[$12]; //@line 1700 "xmltok_impl.c"
        var $14=unSign(($13), 8, 0); //@line 1700 "xmltok_impl.c"
        HEAP[$iftmp_821]=$14; //@line 1700 "xmltok_impl.c"
        __label__ = 4; break; //@line 1700 "xmltok_impl.c"
      case 3: // $bb2
        var $15=HEAP[$ptr_addr]; //@line 1700 "xmltok_impl.c"
        var $16=(($15)&4294967295); //@line 1700 "xmltok_impl.c"
        var $17=HEAP[$16]; //@line 1700 "xmltok_impl.c"
        var $18=reSign(($17), 8, 0); //@line 1700 "xmltok_impl.c"
        var $19=HEAP[$ptr_addr]; //@line 1700 "xmltok_impl.c"
        var $20=(($19+1)&4294967295); //@line 1700 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 1700 "xmltok_impl.c"
        var $22=reSign(($21), 8, 0); //@line 1700 "xmltok_impl.c"
        var $23=((($22)) & 255); //@line 1700 "xmltok_impl.c"
        var $24=((($18)) & 255); //@line 1700 "xmltok_impl.c"
        var $25=_unicode_byte_type($23, $24); //@line 1700 "xmltok_impl.c"
        HEAP[$iftmp_821]=$25; //@line 1700 "xmltok_impl.c"
        __label__ = 4; break; //@line 1700 "xmltok_impl.c"
      case 4: // $bb3
        var $26=HEAP[$iftmp_821]; //@line 1700 "xmltok_impl.c"
        if ($26 == 5) {
          __label__ = 5; break;
        }
        else if ($26 == 6) {
          __label__ = 6; break;
        }
        else if ($26 == 7) {
          __label__ = 7; break;
        }
        else if ($26 == 22) {
          __label__ = 8; break;
        }
        else if ($26 == 24) {
          __label__ = 8; break;
        }
        else if ($26 == 25) {
          __label__ = 8; break;
        }
        else if ($26 == 26) {
          __label__ = 8; break;
        }
        else if ($26 == 27) {
          __label__ = 8; break;
        }
        else if ($26 == 29) {
          __label__ = 8; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 5: // $bb4
        var $27=HEAP[$ptr_addr]; //@line 1703 "xmltok_impl.c"
        var $28=(($27+2)&4294967295); //@line 1703 "xmltok_impl.c"
        HEAP[$ptr_addr]=$28; //@line 1703 "xmltok_impl.c"
        __label__ = 10; break; //@line 1703 "xmltok_impl.c"
      case 6: // $bb5
        var $29=HEAP[$ptr_addr]; //@line 1703 "xmltok_impl.c"
        var $30=(($29+3)&4294967295); //@line 1703 "xmltok_impl.c"
        HEAP[$ptr_addr]=$30; //@line 1703 "xmltok_impl.c"
        __label__ = 10; break; //@line 1703 "xmltok_impl.c"
      case 7: // $bb6
        var $31=HEAP[$ptr_addr]; //@line 1703 "xmltok_impl.c"
        var $32=(($31+4)&4294967295); //@line 1703 "xmltok_impl.c"
        HEAP[$ptr_addr]=$32; //@line 1703 "xmltok_impl.c"
        __label__ = 10; break; //@line 1703 "xmltok_impl.c"
      case 8: // $bb7
        var $33=HEAP[$ptr_addr]; //@line 1714 "xmltok_impl.c"
        var $34=(($33+2)&4294967295); //@line 1714 "xmltok_impl.c"
        HEAP[$ptr_addr]=$34; //@line 1714 "xmltok_impl.c"
        __label__ = 10; break; //@line 1714 "xmltok_impl.c"
      case 9: // $bb8
        var $35=HEAP[$ptr_addr]; //@line 1717 "xmltok_impl.c"
        var $36=($35); //@line 1717 "xmltok_impl.c"
        var $37=HEAP[$start]; //@line 1717 "xmltok_impl.c"
        var $38=($37); //@line 1717 "xmltok_impl.c"
        var $39=((($36) - ($38))&4294967295); //@line 1717 "xmltok_impl.c"
        HEAP[$0]=$39; //@line 1717 "xmltok_impl.c"
        var $40=HEAP[$0]; //@line 1717 "xmltok_impl.c"
        HEAP[$retval]=$40; //@line 1717 "xmltok_impl.c"
        __label__ = 11; break; //@line 1717 "xmltok_impl.c"
      case 10: // $bb9
        __label__ = 1; break; //@line 1717 "xmltok_impl.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 1717 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 1717 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_skipS($enc, $ptr) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $iftmp_825=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        __label__ = 1; break; //@line 1724 "xmltok.c"
      case 1: // $bb
        var $1=HEAP[$ptr_addr]; //@line 1726 "xmltok_impl.c"
        var $2=(($1+1)&4294967295); //@line 1726 "xmltok_impl.c"
        var $3=HEAP[$2]; //@line 1726 "xmltok_impl.c"
        var $4=reSign(($3), 8, 0)==0; //@line 1726 "xmltok_impl.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1726 "xmltok_impl.c"
      case 2: // $bb1
        var $5=HEAP[$enc_addr]; //@line 1726 "xmltok_impl.c"
        var $6=$5; //@line 1726 "xmltok_impl.c"
        var $7=HEAP[$ptr_addr]; //@line 1726 "xmltok_impl.c"
        var $8=HEAP[$7]; //@line 1726 "xmltok_impl.c"
        var $9=unSign(($8), 8, 0); //@line 1726 "xmltok_impl.c"
        var $10=(($6+72)&4294967295); //@line 1726 "xmltok_impl.c"
        var $11=(($10+$9)&4294967295); //@line 1726 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 1726 "xmltok_impl.c"
        var $13=unSign(($12), 8, 0); //@line 1726 "xmltok_impl.c"
        HEAP[$iftmp_825]=$13; //@line 1726 "xmltok_impl.c"
        __label__ = 4; break; //@line 1726 "xmltok_impl.c"
      case 3: // $bb2
        var $14=HEAP[$ptr_addr]; //@line 1726 "xmltok_impl.c"
        var $15=(($14)&4294967295); //@line 1726 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 1726 "xmltok_impl.c"
        var $17=reSign(($16), 8, 0); //@line 1726 "xmltok_impl.c"
        var $18=HEAP[$ptr_addr]; //@line 1726 "xmltok_impl.c"
        var $19=(($18+1)&4294967295); //@line 1726 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 1726 "xmltok_impl.c"
        var $21=reSign(($20), 8, 0); //@line 1726 "xmltok_impl.c"
        var $22=((($21)) & 255); //@line 1726 "xmltok_impl.c"
        var $23=((($17)) & 255); //@line 1726 "xmltok_impl.c"
        var $24=_unicode_byte_type($22, $23); //@line 1726 "xmltok_impl.c"
        HEAP[$iftmp_825]=$24; //@line 1726 "xmltok_impl.c"
        __label__ = 4; break; //@line 1726 "xmltok_impl.c"
      case 4: // $bb3
        var $25=HEAP[$iftmp_825]; //@line 1726 "xmltok_impl.c"
        if ($25 == 9) {
          __label__ = 5; break;
        }
        else if ($25 == 10) {
          __label__ = 5; break;
        }
        else if ($25 == 21) {
          __label__ = 5; break;
        }
        else {
        __label__ = 6; break;
        }
        
      case 5: // $bb4
        var $26=HEAP[$ptr_addr]; //@line 1730 "xmltok_impl.c"
        var $27=(($26+2)&4294967295); //@line 1730 "xmltok_impl.c"
        HEAP[$ptr_addr]=$27; //@line 1730 "xmltok_impl.c"
        __label__ = 1; break; //@line 1730 "xmltok_impl.c"
      case 6: // $bb5
        var $28=HEAP[$ptr_addr]; //@line 1733 "xmltok_impl.c"
        HEAP[$0]=$28; //@line 1733 "xmltok_impl.c"
        var $29=HEAP[$0]; //@line 1733 "xmltok_impl.c"
        HEAP[$retval]=$29; //@line 1733 "xmltok_impl.c"
        __label__ = 7; break; //@line 1733 "xmltok_impl.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 1733 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 1733 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _little2_updatePosition($enc, $ptr, $end, $pos) {
    var __stackBase__  = STACKTOP; STACKTOP += 21; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 21);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $pos_addr=__stackBase__+12;
        var $iftmp_829=__stackBase__+16;
        var $iftmp_827=__stackBase__+17;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$pos_addr]=$pos;
        __label__ = 18; break; //@line 1744 "xmltok_impl.c"
      case 1: // $bb
        var $0=HEAP[$ptr_addr]; //@line 1745 "xmltok_impl.c"
        var $1=(($0+1)&4294967295); //@line 1745 "xmltok_impl.c"
        var $2=HEAP[$1]; //@line 1745 "xmltok_impl.c"
        var $3=reSign(($2), 8, 0)==0; //@line 1745 "xmltok_impl.c"
        if ($3) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1745 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$enc_addr]; //@line 1745 "xmltok_impl.c"
        var $5=$4; //@line 1745 "xmltok_impl.c"
        var $6=HEAP[$ptr_addr]; //@line 1745 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 1745 "xmltok_impl.c"
        var $8=unSign(($7), 8, 0); //@line 1745 "xmltok_impl.c"
        var $9=(($5+72)&4294967295); //@line 1745 "xmltok_impl.c"
        var $10=(($9+$8)&4294967295); //@line 1745 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 1745 "xmltok_impl.c"
        var $12=unSign(($11), 8, 0); //@line 1745 "xmltok_impl.c"
        HEAP[$iftmp_827]=$12; //@line 1745 "xmltok_impl.c"
        __label__ = 4; break; //@line 1745 "xmltok_impl.c"
      case 3: // $bb2
        var $13=HEAP[$ptr_addr]; //@line 1745 "xmltok_impl.c"
        var $14=(($13)&4294967295); //@line 1745 "xmltok_impl.c"
        var $15=HEAP[$14]; //@line 1745 "xmltok_impl.c"
        var $16=reSign(($15), 8, 0); //@line 1745 "xmltok_impl.c"
        var $17=HEAP[$ptr_addr]; //@line 1745 "xmltok_impl.c"
        var $18=(($17+1)&4294967295); //@line 1745 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 1745 "xmltok_impl.c"
        var $20=reSign(($19), 8, 0); //@line 1745 "xmltok_impl.c"
        var $21=((($20)) & 255); //@line 1745 "xmltok_impl.c"
        var $22=((($16)) & 255); //@line 1745 "xmltok_impl.c"
        var $23=_unicode_byte_type($21, $22); //@line 1745 "xmltok_impl.c"
        HEAP[$iftmp_827]=$23; //@line 1745 "xmltok_impl.c"
        __label__ = 4; break; //@line 1745 "xmltok_impl.c"
      case 4: // $bb3
        var $24=HEAP[$iftmp_827]; //@line 1745 "xmltok_impl.c"
        if ($24 == 5) {
          __label__ = 5; break;
        }
        else if ($24 == 6) {
          __label__ = 6; break;
        }
        else if ($24 == 7) {
          __label__ = 7; break;
        }
        else if ($24 == 9) {
          __label__ = 9; break;
        }
        else if ($24 == 10) {
          __label__ = 8; break;
        }
        else {
        __label__ = 16; break;
        }
        
      case 5: // $bb4
        var $25=HEAP[$ptr_addr]; //@line 1750 "xmltok_impl.c"
        var $26=(($25+2)&4294967295); //@line 1750 "xmltok_impl.c"
        HEAP[$ptr_addr]=$26; //@line 1750 "xmltok_impl.c"
        __label__ = 17; break; //@line 1750 "xmltok_impl.c"
      case 6: // $bb5
        var $27=HEAP[$ptr_addr]; //@line 1750 "xmltok_impl.c"
        var $28=(($27+3)&4294967295); //@line 1750 "xmltok_impl.c"
        HEAP[$ptr_addr]=$28; //@line 1750 "xmltok_impl.c"
        __label__ = 17; break; //@line 1750 "xmltok_impl.c"
      case 7: // $bb6
        var $29=HEAP[$ptr_addr]; //@line 1750 "xmltok_impl.c"
        var $30=(($29+4)&4294967295); //@line 1750 "xmltok_impl.c"
        HEAP[$ptr_addr]=$30; //@line 1750 "xmltok_impl.c"
        __label__ = 17; break; //@line 1750 "xmltok_impl.c"
      case 8: // $bb7
        var $31=HEAP[$pos_addr]; //@line 1753 "xmltok_impl.c"
        var $32=(($31+4)&4294967295); //@line 1753 "xmltok_impl.c"
        HEAP[$32]=-1; //@line 1753 "xmltok_impl.c"
        var $33=HEAP[$pos_addr]; //@line 1754 "xmltok_impl.c"
        var $34=(($33)&4294967295); //@line 1754 "xmltok_impl.c"
        var $35=HEAP[$34]; //@line 1754 "xmltok_impl.c"
        var $36=((($35) + 1)&4294967295); //@line 1754 "xmltok_impl.c"
        var $37=HEAP[$pos_addr]; //@line 1754 "xmltok_impl.c"
        var $38=(($37)&4294967295); //@line 1754 "xmltok_impl.c"
        HEAP[$38]=$36; //@line 1754 "xmltok_impl.c"
        var $39=HEAP[$ptr_addr]; //@line 1755 "xmltok_impl.c"
        var $40=(($39+2)&4294967295); //@line 1755 "xmltok_impl.c"
        HEAP[$ptr_addr]=$40; //@line 1755 "xmltok_impl.c"
        __label__ = 17; break; //@line 1755 "xmltok_impl.c"
      case 9: // $bb8
        var $41=HEAP[$pos_addr]; //@line 1758 "xmltok_impl.c"
        var $42=(($41)&4294967295); //@line 1758 "xmltok_impl.c"
        var $43=HEAP[$42]; //@line 1758 "xmltok_impl.c"
        var $44=((($43) + 1)&4294967295); //@line 1758 "xmltok_impl.c"
        var $45=HEAP[$pos_addr]; //@line 1758 "xmltok_impl.c"
        var $46=(($45)&4294967295); //@line 1758 "xmltok_impl.c"
        HEAP[$46]=$44; //@line 1758 "xmltok_impl.c"
        var $47=HEAP[$ptr_addr]; //@line 1759 "xmltok_impl.c"
        var $48=(($47+2)&4294967295); //@line 1759 "xmltok_impl.c"
        HEAP[$ptr_addr]=$48; //@line 1759 "xmltok_impl.c"
        var $49=HEAP[$ptr_addr]; //@line 1760 "xmltok_impl.c"
        var $50=HEAP[$end_addr]; //@line 1760 "xmltok_impl.c"
        var $51=($49)!=($50); //@line 1760 "xmltok_impl.c"
        if ($51) { __label__ = 10; break; } else { __label__ = 15; break; } //@line 1760 "xmltok_impl.c"
      case 10: // $bb9
        var $52=HEAP[$ptr_addr]; //@line 1760 "xmltok_impl.c"
        var $53=(($52+1)&4294967295); //@line 1760 "xmltok_impl.c"
        var $54=HEAP[$53]; //@line 1760 "xmltok_impl.c"
        var $55=reSign(($54), 8, 0)==0; //@line 1760 "xmltok_impl.c"
        if ($55) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1760 "xmltok_impl.c"
      case 11: // $bb10
        var $56=HEAP[$enc_addr]; //@line 1760 "xmltok_impl.c"
        var $57=$56; //@line 1760 "xmltok_impl.c"
        var $58=HEAP[$ptr_addr]; //@line 1760 "xmltok_impl.c"
        var $59=HEAP[$58]; //@line 1760 "xmltok_impl.c"
        var $60=unSign(($59), 8, 0); //@line 1760 "xmltok_impl.c"
        var $61=(($57+72)&4294967295); //@line 1760 "xmltok_impl.c"
        var $62=(($61+$60)&4294967295); //@line 1760 "xmltok_impl.c"
        var $63=HEAP[$62]; //@line 1760 "xmltok_impl.c"
        var $64=reSign(($63), 8, 0)==10; //@line 1760 "xmltok_impl.c"
        var $65=unSign(($64), 1, 0); //@line 1760 "xmltok_impl.c"
        HEAP[$iftmp_829]=$65; //@line 1760 "xmltok_impl.c"
        __label__ = 13; break; //@line 1760 "xmltok_impl.c"
      case 12: // $bb11
        var $66=HEAP[$ptr_addr]; //@line 1760 "xmltok_impl.c"
        var $67=(($66)&4294967295); //@line 1760 "xmltok_impl.c"
        var $68=HEAP[$67]; //@line 1760 "xmltok_impl.c"
        var $69=reSign(($68), 8, 0); //@line 1760 "xmltok_impl.c"
        var $70=HEAP[$ptr_addr]; //@line 1760 "xmltok_impl.c"
        var $71=(($70+1)&4294967295); //@line 1760 "xmltok_impl.c"
        var $72=HEAP[$71]; //@line 1760 "xmltok_impl.c"
        var $73=reSign(($72), 8, 0); //@line 1760 "xmltok_impl.c"
        var $74=((($73)) & 255); //@line 1760 "xmltok_impl.c"
        var $75=((($69)) & 255); //@line 1760 "xmltok_impl.c"
        var $76=_unicode_byte_type($74, $75); //@line 1760 "xmltok_impl.c"
        var $77=((($76))|0)==10; //@line 1760 "xmltok_impl.c"
        var $78=unSign(($77), 1, 0); //@line 1760 "xmltok_impl.c"
        HEAP[$iftmp_829]=$78; //@line 1760 "xmltok_impl.c"
        __label__ = 13; break; //@line 1760 "xmltok_impl.c"
      case 13: // $bb12
        var $79=HEAP[$iftmp_829]; //@line 1760 "xmltok_impl.c"
        var $toBool=reSign(($79), 8, 0)!=0; //@line 1760 "xmltok_impl.c"
        if ($toBool) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1760 "xmltok_impl.c"
      case 14: // $bb13
        var $80=HEAP[$ptr_addr]; //@line 1761 "xmltok_impl.c"
        var $81=(($80+2)&4294967295); //@line 1761 "xmltok_impl.c"
        HEAP[$ptr_addr]=$81; //@line 1761 "xmltok_impl.c"
        __label__ = 15; break; //@line 1761 "xmltok_impl.c"
      case 15: // $bb14
        var $82=HEAP[$pos_addr]; //@line 1762 "xmltok_impl.c"
        var $83=(($82+4)&4294967295); //@line 1762 "xmltok_impl.c"
        HEAP[$83]=-1; //@line 1762 "xmltok_impl.c"
        __label__ = 17; break; //@line 1762 "xmltok_impl.c"
      case 16: // $bb15
        var $84=HEAP[$ptr_addr]; //@line 1765 "xmltok_impl.c"
        var $85=(($84+2)&4294967295); //@line 1765 "xmltok_impl.c"
        HEAP[$ptr_addr]=$85; //@line 1765 "xmltok_impl.c"
        __label__ = 17; break; //@line 1765 "xmltok_impl.c"
      case 17: // $bb16
        var $86=HEAP[$pos_addr]; //@line 1768 "xmltok_impl.c"
        var $87=(($86+4)&4294967295); //@line 1768 "xmltok_impl.c"
        var $88=HEAP[$87]; //@line 1768 "xmltok_impl.c"
        var $89=((($88) + 1)&4294967295); //@line 1768 "xmltok_impl.c"
        var $90=HEAP[$pos_addr]; //@line 1768 "xmltok_impl.c"
        var $91=(($90+4)&4294967295); //@line 1768 "xmltok_impl.c"
        HEAP[$91]=$89; //@line 1768 "xmltok_impl.c"
        __label__ = 18; break; //@line 1768 "xmltok_impl.c"
      case 18: // $bb17
        var $92=HEAP[$ptr_addr]; //@line 1744 "xmltok_impl.c"
        var $93=HEAP[$end_addr]; //@line 1744 "xmltok_impl.c"
        var $94=($92) < ($93); //@line 1744 "xmltok_impl.c"
        if ($94) { __label__ = 1; break; } else { __label__ = 19; break; } //@line 1744 "xmltok_impl.c"
      case 19: // $bb18
        __label__ = 20; break; //@line 1770 "xmltok_impl.c"
      case 20: // $return
        STACKTOP = __stackBase__;
        return; //@line 1770 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_scanComment($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_831=__stackBase__+20;
        var $0=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 93 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 93 "xmltok_impl.c"
        var $3=($1)!=($2); //@line 93 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 32; break; } //@line 93 "xmltok_impl.c"
      case 1: // $bb
        var $4=HEAP[$ptr_addr]; //@line 94 "xmltok_impl.c"
        var $5=(($4)&4294967295); //@line 94 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 94 "xmltok_impl.c"
        var $7=reSign(($6), 8, 0)!=0; //@line 94 "xmltok_impl.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 94 "xmltok_impl.c"
      case 2: // $bb1
        var $8=HEAP[$ptr_addr]; //@line 94 "xmltok_impl.c"
        var $9=(($8+1)&4294967295); //@line 94 "xmltok_impl.c"
        var $10=HEAP[$9]; //@line 94 "xmltok_impl.c"
        var $11=reSign(($10), 8, 0)!=45; //@line 94 "xmltok_impl.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 94 "xmltok_impl.c"
      case 3: // $bb2
        var $12=HEAP[$nextTokPtr_addr]; //@line 95 "xmltok_impl.c"
        var $13=HEAP[$ptr_addr]; //@line 95 "xmltok_impl.c"
        HEAP[$12]=$13; //@line 95 "xmltok_impl.c"
        HEAP[$0]=0; //@line 96 "xmltok_impl.c"
        __label__ = 33; break; //@line 96 "xmltok_impl.c"
      case 4: // $bb3
        var $14=HEAP[$ptr_addr]; //@line 98 "xmltok_impl.c"
        var $15=(($14+2)&4294967295); //@line 98 "xmltok_impl.c"
        HEAP[$ptr_addr]=$15; //@line 98 "xmltok_impl.c"
        __label__ = 31; break; //@line 98 "xmltok_impl.c"
      case 5: // $bb4
        var $16=HEAP[$ptr_addr]; //@line 100 "xmltok_impl.c"
        var $17=(($16)&4294967295); //@line 100 "xmltok_impl.c"
        var $18=HEAP[$17]; //@line 100 "xmltok_impl.c"
        var $19=reSign(($18), 8, 0)==0; //@line 100 "xmltok_impl.c"
        if ($19) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 100 "xmltok_impl.c"
      case 6: // $bb5
        var $20=HEAP[$enc_addr]; //@line 100 "xmltok_impl.c"
        var $21=$20; //@line 100 "xmltok_impl.c"
        var $22=HEAP[$ptr_addr]; //@line 100 "xmltok_impl.c"
        var $23=(($22+1)&4294967295); //@line 100 "xmltok_impl.c"
        var $24=HEAP[$23]; //@line 100 "xmltok_impl.c"
        var $25=unSign(($24), 8, 0); //@line 100 "xmltok_impl.c"
        var $26=(($21+72)&4294967295); //@line 100 "xmltok_impl.c"
        var $27=(($26+$25)&4294967295); //@line 100 "xmltok_impl.c"
        var $28=HEAP[$27]; //@line 100 "xmltok_impl.c"
        var $29=unSign(($28), 8, 0); //@line 100 "xmltok_impl.c"
        HEAP[$iftmp_831]=$29; //@line 100 "xmltok_impl.c"
        __label__ = 8; break; //@line 100 "xmltok_impl.c"
      case 7: // $bb6
        var $30=HEAP[$ptr_addr]; //@line 100 "xmltok_impl.c"
        var $31=(($30+1)&4294967295); //@line 100 "xmltok_impl.c"
        var $32=HEAP[$31]; //@line 100 "xmltok_impl.c"
        var $33=reSign(($32), 8, 0); //@line 100 "xmltok_impl.c"
        var $34=HEAP[$ptr_addr]; //@line 100 "xmltok_impl.c"
        var $35=(($34)&4294967295); //@line 100 "xmltok_impl.c"
        var $36=HEAP[$35]; //@line 100 "xmltok_impl.c"
        var $37=reSign(($36), 8, 0); //@line 100 "xmltok_impl.c"
        var $38=((($37)) & 255); //@line 100 "xmltok_impl.c"
        var $39=((($33)) & 255); //@line 100 "xmltok_impl.c"
        var $40=_unicode_byte_type($38, $39); //@line 100 "xmltok_impl.c"
        HEAP[$iftmp_831]=$40; //@line 100 "xmltok_impl.c"
        __label__ = 8; break; //@line 100 "xmltok_impl.c"
      case 8: // $bb7
        var $41=HEAP[$iftmp_831]; //@line 100 "xmltok_impl.c"
        if ($41 == 0) {
          __label__ = 18; break;
        }
        else if ($41 == 1) {
          __label__ = 18; break;
        }
        else if ($41 == 5) {
          __label__ = 9; break;
        }
        else if ($41 == 6) {
          __label__ = 12; break;
        }
        else if ($41 == 7) {
          __label__ = 15; break;
        }
        else if ($41 == 8) {
          __label__ = 18; break;
        }
        else if ($41 == 27) {
          __label__ = 19; break;
        }
        else {
        __label__ = 30; break;
        }
        
      case 9: // $bb8
        var $42=HEAP[$end_addr]; //@line 101 "xmltok_impl.c"
        var $43=($42); //@line 101 "xmltok_impl.c"
        var $44=HEAP[$ptr_addr]; //@line 101 "xmltok_impl.c"
        var $45=($44); //@line 101 "xmltok_impl.c"
        var $46=((($43) - ($45))&4294967295); //@line 101 "xmltok_impl.c"
        var $47=((($46))|0) <= 1; //@line 101 "xmltok_impl.c"
        if ($47) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 101 "xmltok_impl.c"
      case 10: // $bb9
        HEAP[$0]=-2; //@line 101 "xmltok_impl.c"
        __label__ = 33; break; //@line 101 "xmltok_impl.c"
      case 11: // $bb10
        var $48=HEAP[$ptr_addr]; //@line 101 "xmltok_impl.c"
        var $49=(($48+2)&4294967295); //@line 101 "xmltok_impl.c"
        HEAP[$ptr_addr]=$49; //@line 101 "xmltok_impl.c"
        __label__ = 31; break; //@line 101 "xmltok_impl.c"
      case 12: // $bb11
        var $50=HEAP[$end_addr]; //@line 101 "xmltok_impl.c"
        var $51=($50); //@line 101 "xmltok_impl.c"
        var $52=HEAP[$ptr_addr]; //@line 101 "xmltok_impl.c"
        var $53=($52); //@line 101 "xmltok_impl.c"
        var $54=((($51) - ($53))&4294967295); //@line 101 "xmltok_impl.c"
        var $55=((($54))|0) <= 2; //@line 101 "xmltok_impl.c"
        if ($55) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 101 "xmltok_impl.c"
      case 13: // $bb12
        HEAP[$0]=-2; //@line 101 "xmltok_impl.c"
        __label__ = 33; break; //@line 101 "xmltok_impl.c"
      case 14: // $bb13
        var $56=HEAP[$ptr_addr]; //@line 101 "xmltok_impl.c"
        var $57=(($56+3)&4294967295); //@line 101 "xmltok_impl.c"
        HEAP[$ptr_addr]=$57; //@line 101 "xmltok_impl.c"
        __label__ = 31; break; //@line 101 "xmltok_impl.c"
      case 15: // $bb14
        var $58=HEAP[$end_addr]; //@line 101 "xmltok_impl.c"
        var $59=($58); //@line 101 "xmltok_impl.c"
        var $60=HEAP[$ptr_addr]; //@line 101 "xmltok_impl.c"
        var $61=($60); //@line 101 "xmltok_impl.c"
        var $62=((($59) - ($61))&4294967295); //@line 101 "xmltok_impl.c"
        var $63=((($62))|0) <= 3; //@line 101 "xmltok_impl.c"
        if ($63) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 101 "xmltok_impl.c"
      case 16: // $bb15
        HEAP[$0]=-2; //@line 101 "xmltok_impl.c"
        __label__ = 33; break; //@line 101 "xmltok_impl.c"
      case 17: // $bb16
        var $64=HEAP[$ptr_addr]; //@line 101 "xmltok_impl.c"
        var $65=(($64+4)&4294967295); //@line 101 "xmltok_impl.c"
        HEAP[$ptr_addr]=$65; //@line 101 "xmltok_impl.c"
        __label__ = 31; break; //@line 101 "xmltok_impl.c"
      case 18: // $bb17
        var $66=HEAP[$nextTokPtr_addr]; //@line 101 "xmltok_impl.c"
        var $67=HEAP[$ptr_addr]; //@line 101 "xmltok_impl.c"
        HEAP[$66]=$67; //@line 101 "xmltok_impl.c"
        HEAP[$0]=0; //@line 101 "xmltok_impl.c"
        __label__ = 33; break; //@line 101 "xmltok_impl.c"
      case 19: // $bb18
        var $68=HEAP[$ptr_addr]; //@line 103 "xmltok_impl.c"
        var $69=(($68+2)&4294967295); //@line 103 "xmltok_impl.c"
        HEAP[$ptr_addr]=$69; //@line 103 "xmltok_impl.c"
        var $70=HEAP[$ptr_addr]; //@line 103 "xmltok_impl.c"
        var $71=HEAP[$end_addr]; //@line 103 "xmltok_impl.c"
        var $72=($70)==($71); //@line 103 "xmltok_impl.c"
        if ($72) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 103 "xmltok_impl.c"
      case 20: // $bb19
        HEAP[$0]=-1; //@line 104 "xmltok_impl.c"
        __label__ = 33; break; //@line 104 "xmltok_impl.c"
      case 21: // $bb20
        var $73=HEAP[$ptr_addr]; //@line 105 "xmltok_impl.c"
        var $74=(($73)&4294967295); //@line 105 "xmltok_impl.c"
        var $75=HEAP[$74]; //@line 105 "xmltok_impl.c"
        var $76=reSign(($75), 8, 0)==0; //@line 105 "xmltok_impl.c"
        if ($76) { __label__ = 22; break; } else { __label__ = 29; break; } //@line 105 "xmltok_impl.c"
      case 22: // $bb21
        var $77=HEAP[$ptr_addr]; //@line 105 "xmltok_impl.c"
        var $78=(($77+1)&4294967295); //@line 105 "xmltok_impl.c"
        var $79=HEAP[$78]; //@line 105 "xmltok_impl.c"
        var $80=reSign(($79), 8, 0)==45; //@line 105 "xmltok_impl.c"
        if ($80) { __label__ = 23; break; } else { __label__ = 29; break; } //@line 105 "xmltok_impl.c"
      case 23: // $bb22
        var $81=HEAP[$ptr_addr]; //@line 106 "xmltok_impl.c"
        var $82=(($81+2)&4294967295); //@line 106 "xmltok_impl.c"
        HEAP[$ptr_addr]=$82; //@line 106 "xmltok_impl.c"
        var $83=HEAP[$ptr_addr]; //@line 106 "xmltok_impl.c"
        var $84=HEAP[$end_addr]; //@line 106 "xmltok_impl.c"
        var $85=($83)==($84); //@line 106 "xmltok_impl.c"
        if ($85) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 106 "xmltok_impl.c"
      case 24: // $bb23
        HEAP[$0]=-1; //@line 107 "xmltok_impl.c"
        __label__ = 33; break; //@line 107 "xmltok_impl.c"
      case 25: // $bb24
        var $86=HEAP[$ptr_addr]; //@line 108 "xmltok_impl.c"
        var $87=(($86)&4294967295); //@line 108 "xmltok_impl.c"
        var $88=HEAP[$87]; //@line 108 "xmltok_impl.c"
        var $89=reSign(($88), 8, 0)!=0; //@line 108 "xmltok_impl.c"
        if ($89) { __label__ = 27; break; } else { __label__ = 26; break; } //@line 108 "xmltok_impl.c"
      case 26: // $bb25
        var $90=HEAP[$ptr_addr]; //@line 108 "xmltok_impl.c"
        var $91=(($90+1)&4294967295); //@line 108 "xmltok_impl.c"
        var $92=HEAP[$91]; //@line 108 "xmltok_impl.c"
        var $93=reSign(($92), 8, 0)!=62; //@line 108 "xmltok_impl.c"
        if ($93) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 108 "xmltok_impl.c"
      case 27: // $bb26
        var $94=HEAP[$nextTokPtr_addr]; //@line 109 "xmltok_impl.c"
        var $95=HEAP[$ptr_addr]; //@line 109 "xmltok_impl.c"
        HEAP[$94]=$95; //@line 109 "xmltok_impl.c"
        HEAP[$0]=0; //@line 110 "xmltok_impl.c"
        __label__ = 33; break; //@line 110 "xmltok_impl.c"
      case 28: // $bb27
        var $96=HEAP[$ptr_addr]; //@line 112 "xmltok_impl.c"
        var $97=(($96+2)&4294967295); //@line 112 "xmltok_impl.c"
        var $98=HEAP[$nextTokPtr_addr]; //@line 112 "xmltok_impl.c"
        HEAP[$98]=$97; //@line 112 "xmltok_impl.c"
        HEAP[$0]=13; //@line 113 "xmltok_impl.c"
        __label__ = 33; break; //@line 113 "xmltok_impl.c"
      case 29: // $bb28
        __label__ = 31; break; //@line 113 "xmltok_impl.c"
      case 30: // $bb29
        var $99=HEAP[$ptr_addr]; //@line 117 "xmltok_impl.c"
        var $100=(($99+2)&4294967295); //@line 117 "xmltok_impl.c"
        HEAP[$ptr_addr]=$100; //@line 117 "xmltok_impl.c"
        __label__ = 31; break; //@line 117 "xmltok_impl.c"
      case 31: // $bb30
        var $101=HEAP[$ptr_addr]; //@line 99 "xmltok_impl.c"
        var $102=HEAP[$end_addr]; //@line 99 "xmltok_impl.c"
        var $103=($101)!=($102); //@line 99 "xmltok_impl.c"
        if ($103) { __label__ = 5; break; } else { __label__ = 32; break; } //@line 99 "xmltok_impl.c"
      case 32: // $bb31
        HEAP[$0]=-1; //@line 122 "xmltok_impl.c"
        __label__ = 33; break; //@line 122 "xmltok_impl.c"
      case 33: // $bb32
        var $104=HEAP[$0]; //@line 96 "xmltok_impl.c"
        HEAP[$retval]=$104; //@line 96 "xmltok_impl.c"
        __label__ = 34; break; //@line 96 "xmltok_impl.c"
      case 34: // $return
        var $retval33=HEAP[$retval]; //@line 96 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval33; //@line 96 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_scanDecl($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_843=__stackBase__+20;
        var $iftmp_841=__stackBase__+24;
        var $iftmp_839=__stackBase__+28;
        var $0=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 131 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 131 "xmltok_impl.c"
        var $3=($1)==($2); //@line 131 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 131 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 132 "xmltok_impl.c"
        __label__ = 26; break; //@line 132 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$ptr_addr]; //@line 133 "xmltok_impl.c"
        var $5=(($4)&4294967295); //@line 133 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 133 "xmltok_impl.c"
        var $7=reSign(($6), 8, 0)==0; //@line 133 "xmltok_impl.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 133 "xmltok_impl.c"
      case 3: // $bb2
        var $8=HEAP[$enc_addr]; //@line 133 "xmltok_impl.c"
        var $9=$8; //@line 133 "xmltok_impl.c"
        var $10=HEAP[$ptr_addr]; //@line 133 "xmltok_impl.c"
        var $11=(($10+1)&4294967295); //@line 133 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 133 "xmltok_impl.c"
        var $13=unSign(($12), 8, 0); //@line 133 "xmltok_impl.c"
        var $14=(($9+72)&4294967295); //@line 133 "xmltok_impl.c"
        var $15=(($14+$13)&4294967295); //@line 133 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 133 "xmltok_impl.c"
        var $17=unSign(($16), 8, 0); //@line 133 "xmltok_impl.c"
        HEAP[$iftmp_839]=$17; //@line 133 "xmltok_impl.c"
        __label__ = 5; break; //@line 133 "xmltok_impl.c"
      case 4: // $bb3
        var $18=HEAP[$ptr_addr]; //@line 133 "xmltok_impl.c"
        var $19=(($18+1)&4294967295); //@line 133 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 133 "xmltok_impl.c"
        var $21=reSign(($20), 8, 0); //@line 133 "xmltok_impl.c"
        var $22=HEAP[$ptr_addr]; //@line 133 "xmltok_impl.c"
        var $23=(($22)&4294967295); //@line 133 "xmltok_impl.c"
        var $24=HEAP[$23]; //@line 133 "xmltok_impl.c"
        var $25=reSign(($24), 8, 0); //@line 133 "xmltok_impl.c"
        var $26=((($25)) & 255); //@line 133 "xmltok_impl.c"
        var $27=((($21)) & 255); //@line 133 "xmltok_impl.c"
        var $28=_unicode_byte_type($26, $27); //@line 133 "xmltok_impl.c"
        HEAP[$iftmp_839]=$28; //@line 133 "xmltok_impl.c"
        __label__ = 5; break; //@line 133 "xmltok_impl.c"
      case 5: // $bb4
        var $29=HEAP[$iftmp_839]; //@line 133 "xmltok_impl.c"
        if ($29 == 20) {
          __label__ = 7; break;
        }
        else if ($29 == 22) {
          __label__ = 8; break;
        }
        else if ($29 == 24) {
          __label__ = 8; break;
        }
        else if ($29 == 27) {
          __label__ = 6; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 6: // $bb5
        var $30=HEAP[$ptr_addr]; //@line 135 "xmltok_impl.c"
        var $31=(($30+2)&4294967295); //@line 135 "xmltok_impl.c"
        var $32=HEAP[$enc_addr]; //@line 135 "xmltok_impl.c"
        var $33=HEAP[$end_addr]; //@line 135 "xmltok_impl.c"
        var $34=HEAP[$nextTokPtr_addr]; //@line 135 "xmltok_impl.c"
        var $35=_big2_scanComment($32, $31, $33, $34); //@line 135 "xmltok_impl.c"
        HEAP[$0]=$35; //@line 135 "xmltok_impl.c"
        __label__ = 26; break; //@line 135 "xmltok_impl.c"
      case 7: // $bb6
        var $36=HEAP[$ptr_addr]; //@line 137 "xmltok_impl.c"
        var $37=(($36+2)&4294967295); //@line 137 "xmltok_impl.c"
        var $38=HEAP[$nextTokPtr_addr]; //@line 137 "xmltok_impl.c"
        HEAP[$38]=$37; //@line 137 "xmltok_impl.c"
        HEAP[$0]=33; //@line 138 "xmltok_impl.c"
        __label__ = 26; break; //@line 138 "xmltok_impl.c"
      case 8: // $bb7
        var $39=HEAP[$ptr_addr]; //@line 141 "xmltok_impl.c"
        var $40=(($39+2)&4294967295); //@line 141 "xmltok_impl.c"
        HEAP[$ptr_addr]=$40; //@line 141 "xmltok_impl.c"
        __label__ = 24; break; //@line 141 "xmltok_impl.c"
      case 9: // $bb8
        var $41=HEAP[$nextTokPtr_addr]; //@line 144 "xmltok_impl.c"
        var $42=HEAP[$ptr_addr]; //@line 144 "xmltok_impl.c"
        HEAP[$41]=$42; //@line 144 "xmltok_impl.c"
        HEAP[$0]=0; //@line 145 "xmltok_impl.c"
        __label__ = 26; break; //@line 145 "xmltok_impl.c"
      case 10: // $bb9
        var $43=HEAP[$ptr_addr]; //@line 148 "xmltok_impl.c"
        var $44=(($43)&4294967295); //@line 148 "xmltok_impl.c"
        var $45=HEAP[$44]; //@line 148 "xmltok_impl.c"
        var $46=reSign(($45), 8, 0)==0; //@line 148 "xmltok_impl.c"
        if ($46) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 148 "xmltok_impl.c"
      case 11: // $bb10
        var $47=HEAP[$enc_addr]; //@line 148 "xmltok_impl.c"
        var $48=$47; //@line 148 "xmltok_impl.c"
        var $49=HEAP[$ptr_addr]; //@line 148 "xmltok_impl.c"
        var $50=(($49+1)&4294967295); //@line 148 "xmltok_impl.c"
        var $51=HEAP[$50]; //@line 148 "xmltok_impl.c"
        var $52=unSign(($51), 8, 0); //@line 148 "xmltok_impl.c"
        var $53=(($48+72)&4294967295); //@line 148 "xmltok_impl.c"
        var $54=(($53+$52)&4294967295); //@line 148 "xmltok_impl.c"
        var $55=HEAP[$54]; //@line 148 "xmltok_impl.c"
        var $56=unSign(($55), 8, 0); //@line 148 "xmltok_impl.c"
        HEAP[$iftmp_841]=$56; //@line 148 "xmltok_impl.c"
        __label__ = 13; break; //@line 148 "xmltok_impl.c"
      case 12: // $bb11
        var $57=HEAP[$ptr_addr]; //@line 148 "xmltok_impl.c"
        var $58=(($57+1)&4294967295); //@line 148 "xmltok_impl.c"
        var $59=HEAP[$58]; //@line 148 "xmltok_impl.c"
        var $60=reSign(($59), 8, 0); //@line 148 "xmltok_impl.c"
        var $61=HEAP[$ptr_addr]; //@line 148 "xmltok_impl.c"
        var $62=(($61)&4294967295); //@line 148 "xmltok_impl.c"
        var $63=HEAP[$62]; //@line 148 "xmltok_impl.c"
        var $64=reSign(($63), 8, 0); //@line 148 "xmltok_impl.c"
        var $65=((($64)) & 255); //@line 148 "xmltok_impl.c"
        var $66=((($60)) & 255); //@line 148 "xmltok_impl.c"
        var $67=_unicode_byte_type($65, $66); //@line 148 "xmltok_impl.c"
        HEAP[$iftmp_841]=$67; //@line 148 "xmltok_impl.c"
        __label__ = 13; break; //@line 148 "xmltok_impl.c"
      case 13: // $bb12
        var $68=HEAP[$iftmp_841]; //@line 148 "xmltok_impl.c"
        if ($68 == 9) {
          __label__ = 21; break;
        }
        else if ($68 == 10) {
          __label__ = 21; break;
        }
        else if ($68 == 21) {
          __label__ = 21; break;
        }
        else if ($68 == 22) {
          __label__ = 22; break;
        }
        else if ($68 == 24) {
          __label__ = 22; break;
        }
        else if ($68 == 30) {
          __label__ = 14; break;
        }
        else {
        __label__ = 23; break;
        }
        
      case 14: // $bb13
        var $69=HEAP[$ptr_addr]; //@line 150 "xmltok_impl.c"
        var $70=(($69+2)&4294967295); //@line 150 "xmltok_impl.c"
        var $71=HEAP[$end_addr]; //@line 150 "xmltok_impl.c"
        var $72=($70)==($71); //@line 150 "xmltok_impl.c"
        if ($72) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 150 "xmltok_impl.c"
      case 15: // $bb14
        HEAP[$0]=-1; //@line 151 "xmltok_impl.c"
        __label__ = 26; break; //@line 151 "xmltok_impl.c"
      case 16: // $bb15
        var $73=HEAP[$ptr_addr]; //@line 153 "xmltok_impl.c"
        var $74=(($73+2)&4294967295); //@line 153 "xmltok_impl.c"
        var $75=(($74)&4294967295); //@line 153 "xmltok_impl.c"
        var $76=HEAP[$75]; //@line 153 "xmltok_impl.c"
        var $77=reSign(($76), 8, 0)==0; //@line 153 "xmltok_impl.c"
        if ($77) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 153 "xmltok_impl.c"
      case 17: // $bb16
        var $78=HEAP[$enc_addr]; //@line 153 "xmltok_impl.c"
        var $79=$78; //@line 153 "xmltok_impl.c"
        var $80=HEAP[$ptr_addr]; //@line 153 "xmltok_impl.c"
        var $81=(($80+2)&4294967295); //@line 153 "xmltok_impl.c"
        var $82=(($81+1)&4294967295); //@line 153 "xmltok_impl.c"
        var $83=HEAP[$82]; //@line 153 "xmltok_impl.c"
        var $84=unSign(($83), 8, 0); //@line 153 "xmltok_impl.c"
        var $85=(($79+72)&4294967295); //@line 153 "xmltok_impl.c"
        var $86=(($85+$84)&4294967295); //@line 153 "xmltok_impl.c"
        var $87=HEAP[$86]; //@line 153 "xmltok_impl.c"
        var $88=unSign(($87), 8, 0); //@line 153 "xmltok_impl.c"
        HEAP[$iftmp_843]=$88; //@line 153 "xmltok_impl.c"
        __label__ = 19; break; //@line 153 "xmltok_impl.c"
      case 18: // $bb17
        var $89=HEAP[$ptr_addr]; //@line 153 "xmltok_impl.c"
        var $90=(($89+2)&4294967295); //@line 153 "xmltok_impl.c"
        var $91=(($90+1)&4294967295); //@line 153 "xmltok_impl.c"
        var $92=HEAP[$91]; //@line 153 "xmltok_impl.c"
        var $93=reSign(($92), 8, 0); //@line 153 "xmltok_impl.c"
        var $94=HEAP[$ptr_addr]; //@line 153 "xmltok_impl.c"
        var $95=(($94+2)&4294967295); //@line 153 "xmltok_impl.c"
        var $96=(($95)&4294967295); //@line 153 "xmltok_impl.c"
        var $97=HEAP[$96]; //@line 153 "xmltok_impl.c"
        var $98=reSign(($97), 8, 0); //@line 153 "xmltok_impl.c"
        var $99=((($98)) & 255); //@line 153 "xmltok_impl.c"
        var $100=((($93)) & 255); //@line 153 "xmltok_impl.c"
        var $101=_unicode_byte_type($99, $100); //@line 153 "xmltok_impl.c"
        HEAP[$iftmp_843]=$101; //@line 153 "xmltok_impl.c"
        __label__ = 19; break; //@line 153 "xmltok_impl.c"
      case 19: // $bb18
        var $102=HEAP[$iftmp_843]; //@line 153 "xmltok_impl.c"
        if ($102 == 9) {
          __label__ = 20; break;
        }
        else if ($102 == 10) {
          __label__ = 20; break;
        }
        else if ($102 == 21) {
          __label__ = 20; break;
        }
        else if ($102 == 30) {
          __label__ = 20; break;
        }
        else {
        __label__ = 21; break;
        }
        
      case 20: // $bb19
        var $103=HEAP[$nextTokPtr_addr]; //@line 155 "xmltok_impl.c"
        var $104=HEAP[$ptr_addr]; //@line 155 "xmltok_impl.c"
        HEAP[$103]=$104; //@line 155 "xmltok_impl.c"
        HEAP[$0]=0; //@line 156 "xmltok_impl.c"
        __label__ = 26; break; //@line 156 "xmltok_impl.c"
      case 21: // $bb20
        var $105=HEAP[$nextTokPtr_addr]; //@line 160 "xmltok_impl.c"
        var $106=HEAP[$ptr_addr]; //@line 160 "xmltok_impl.c"
        HEAP[$105]=$106; //@line 160 "xmltok_impl.c"
        HEAP[$0]=16; //@line 161 "xmltok_impl.c"
        __label__ = 26; break; //@line 161 "xmltok_impl.c"
      case 22: // $bb21
        var $107=HEAP[$ptr_addr]; //@line 164 "xmltok_impl.c"
        var $108=(($107+2)&4294967295); //@line 164 "xmltok_impl.c"
        HEAP[$ptr_addr]=$108; //@line 164 "xmltok_impl.c"
        __label__ = 24; break; //@line 164 "xmltok_impl.c"
      case 23: // $bb22
        var $109=HEAP[$nextTokPtr_addr]; //@line 167 "xmltok_impl.c"
        var $110=HEAP[$ptr_addr]; //@line 167 "xmltok_impl.c"
        HEAP[$109]=$110; //@line 167 "xmltok_impl.c"
        HEAP[$0]=0; //@line 168 "xmltok_impl.c"
        __label__ = 26; break; //@line 168 "xmltok_impl.c"
      case 24: // $bb23
        var $111=HEAP[$ptr_addr]; //@line 147 "xmltok_impl.c"
        var $112=HEAP[$end_addr]; //@line 147 "xmltok_impl.c"
        var $113=($111)!=($112); //@line 147 "xmltok_impl.c"
        if ($113) { __label__ = 10; break; } else { __label__ = 25; break; } //@line 147 "xmltok_impl.c"
      case 25: // $bb24
        HEAP[$0]=-1; //@line 171 "xmltok_impl.c"
        __label__ = 26; break; //@line 171 "xmltok_impl.c"
      case 26: // $bb25
        var $114=HEAP[$0]; //@line 132 "xmltok_impl.c"
        HEAP[$retval]=$114; //@line 132 "xmltok_impl.c"
        __label__ = 27; break; //@line 132 "xmltok_impl.c"
      case 27: // $return
        var $retval26=HEAP[$retval]; //@line 132 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval26; //@line 132 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_checkPiTarget($enc, $ptr, $end, $tokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $tokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_849=__stackBase__+20;
        var $iftmp_848=__stackBase__+24;
        var $iftmp_847=__stackBase__+28;
        var $0=__stackBase__+32;
        var $upper=__stackBase__+36;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$tokPtr_addr]=$tokPtr;
        HEAP[$upper]=0; //@line 178 "xmltok_impl.c"
        var $1=HEAP[$tokPtr_addr]; //@line 179 "xmltok_impl.c"
        HEAP[$1]=11; //@line 179 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 180 "xmltok_impl.c"
        var $3=($2); //@line 180 "xmltok_impl.c"
        var $4=HEAP[$ptr_addr]; //@line 180 "xmltok_impl.c"
        var $5=($4); //@line 180 "xmltok_impl.c"
        var $6=((($3) - ($5))&4294967295); //@line 180 "xmltok_impl.c"
        var $7=((($6))|0)!=6; //@line 180 "xmltok_impl.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 180 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=1; //@line 181 "xmltok_impl.c"
        __label__ = 26; break; //@line 181 "xmltok_impl.c"
      case 2: // $bb1
        var $8=HEAP[$ptr_addr]; //@line 182 "xmltok_impl.c"
        var $9=(($8)&4294967295); //@line 182 "xmltok_impl.c"
        var $10=HEAP[$9]; //@line 182 "xmltok_impl.c"
        var $11=reSign(($10), 8, 0)==0; //@line 182 "xmltok_impl.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 182 "xmltok_impl.c"
      case 3: // $bb2
        var $12=HEAP[$ptr_addr]; //@line 182 "xmltok_impl.c"
        var $13=(($12+1)&4294967295); //@line 182 "xmltok_impl.c"
        var $14=HEAP[$13]; //@line 182 "xmltok_impl.c"
        var $15=reSign(($14), 8, 0); //@line 182 "xmltok_impl.c"
        HEAP[$iftmp_847]=$15; //@line 182 "xmltok_impl.c"
        __label__ = 5; break; //@line 182 "xmltok_impl.c"
      case 4: // $bb3
        HEAP[$iftmp_847]=-1; //@line 182 "xmltok_impl.c"
        __label__ = 5; break; //@line 182 "xmltok_impl.c"
      case 5: // $bb4
        var $16=HEAP[$iftmp_847]; //@line 182 "xmltok_impl.c"
        if ($16 == 88) {
          __label__ = 7; break;
        }
        else if ($16 == 120) {
          __label__ = 6; break;
        }
        else {
        __label__ = 8; break;
        }
        
      case 6: // $bb5
        __label__ = 9; break; //@line 182 "xmltok_impl.c"
      case 7: // $bb6
        HEAP[$upper]=1; //@line 186 "xmltok_impl.c"
        __label__ = 9; break; //@line 186 "xmltok_impl.c"
      case 8: // $bb7
        HEAP[$0]=1; //@line 189 "xmltok_impl.c"
        __label__ = 26; break; //@line 189 "xmltok_impl.c"
      case 9: // $bb8
        var $17=HEAP[$ptr_addr]; //@line 191 "xmltok_impl.c"
        var $18=(($17+2)&4294967295); //@line 191 "xmltok_impl.c"
        HEAP[$ptr_addr]=$18; //@line 191 "xmltok_impl.c"
        var $19=HEAP[$ptr_addr]; //@line 192 "xmltok_impl.c"
        var $20=(($19)&4294967295); //@line 192 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 192 "xmltok_impl.c"
        var $22=reSign(($21), 8, 0)==0; //@line 192 "xmltok_impl.c"
        if ($22) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 192 "xmltok_impl.c"
      case 10: // $bb9
        var $23=HEAP[$ptr_addr]; //@line 192 "xmltok_impl.c"
        var $24=(($23+1)&4294967295); //@line 192 "xmltok_impl.c"
        var $25=HEAP[$24]; //@line 192 "xmltok_impl.c"
        var $26=reSign(($25), 8, 0); //@line 192 "xmltok_impl.c"
        HEAP[$iftmp_848]=$26; //@line 192 "xmltok_impl.c"
        __label__ = 12; break; //@line 192 "xmltok_impl.c"
      case 11: // $bb10
        HEAP[$iftmp_848]=-1; //@line 192 "xmltok_impl.c"
        __label__ = 12; break; //@line 192 "xmltok_impl.c"
      case 12: // $bb11
        var $27=HEAP[$iftmp_848]; //@line 192 "xmltok_impl.c"
        if ($27 == 77) {
          __label__ = 14; break;
        }
        else if ($27 == 109) {
          __label__ = 13; break;
        }
        else {
        __label__ = 15; break;
        }
        
      case 13: // $bb12
        __label__ = 16; break; //@line 192 "xmltok_impl.c"
      case 14: // $bb13
        HEAP[$upper]=1; //@line 196 "xmltok_impl.c"
        __label__ = 16; break; //@line 196 "xmltok_impl.c"
      case 15: // $bb14
        HEAP[$0]=1; //@line 199 "xmltok_impl.c"
        __label__ = 26; break; //@line 199 "xmltok_impl.c"
      case 16: // $bb15
        var $28=HEAP[$ptr_addr]; //@line 201 "xmltok_impl.c"
        var $29=(($28+2)&4294967295); //@line 201 "xmltok_impl.c"
        HEAP[$ptr_addr]=$29; //@line 201 "xmltok_impl.c"
        var $30=HEAP[$ptr_addr]; //@line 202 "xmltok_impl.c"
        var $31=(($30)&4294967295); //@line 202 "xmltok_impl.c"
        var $32=HEAP[$31]; //@line 202 "xmltok_impl.c"
        var $33=reSign(($32), 8, 0)==0; //@line 202 "xmltok_impl.c"
        if ($33) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 202 "xmltok_impl.c"
      case 17: // $bb16
        var $34=HEAP[$ptr_addr]; //@line 202 "xmltok_impl.c"
        var $35=(($34+1)&4294967295); //@line 202 "xmltok_impl.c"
        var $36=HEAP[$35]; //@line 202 "xmltok_impl.c"
        var $37=reSign(($36), 8, 0); //@line 202 "xmltok_impl.c"
        HEAP[$iftmp_849]=$37; //@line 202 "xmltok_impl.c"
        __label__ = 19; break; //@line 202 "xmltok_impl.c"
      case 18: // $bb17
        HEAP[$iftmp_849]=-1; //@line 202 "xmltok_impl.c"
        __label__ = 19; break; //@line 202 "xmltok_impl.c"
      case 19: // $bb18
        var $38=HEAP[$iftmp_849]; //@line 202 "xmltok_impl.c"
        if ($38 == 76) {
          __label__ = 21; break;
        }
        else if ($38 == 108) {
          __label__ = 20; break;
        }
        else {
        __label__ = 22; break;
        }
        
      case 20: // $bb19
        __label__ = 23; break; //@line 202 "xmltok_impl.c"
      case 21: // $bb20
        HEAP[$upper]=1; //@line 206 "xmltok_impl.c"
        __label__ = 23; break; //@line 206 "xmltok_impl.c"
      case 22: // $bb21
        HEAP[$0]=1; //@line 209 "xmltok_impl.c"
        __label__ = 26; break; //@line 209 "xmltok_impl.c"
      case 23: // $bb22
        var $39=HEAP[$upper]; //@line 211 "xmltok_impl.c"
        var $40=((($39))|0)!=0; //@line 211 "xmltok_impl.c"
        if ($40) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 211 "xmltok_impl.c"
      case 24: // $bb23
        HEAP[$0]=0; //@line 212 "xmltok_impl.c"
        __label__ = 26; break; //@line 212 "xmltok_impl.c"
      case 25: // $bb24
        var $41=HEAP[$tokPtr_addr]; //@line 213 "xmltok_impl.c"
        HEAP[$41]=12; //@line 213 "xmltok_impl.c"
        HEAP[$0]=1; //@line 214 "xmltok_impl.c"
        __label__ = 26; break; //@line 214 "xmltok_impl.c"
      case 26: // $bb25
        var $42=HEAP[$0]; //@line 181 "xmltok_impl.c"
        HEAP[$retval]=$42; //@line 181 "xmltok_impl.c"
        __label__ = 27; break; //@line 181 "xmltok_impl.c"
      case 27: // $return
        var $retval26=HEAP[$retval]; //@line 181 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval26; //@line 181 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_scanPi($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 44);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_866=__stackBase__+20;
        var $iftmp_858=__stackBase__+24;
        var $iftmp_850=__stackBase__+28;
        var $0=__stackBase__+32;
        var $tok=__stackBase__+36;
        var $target=__stackBase__+40;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 224 "xmltok_impl.c"
        HEAP[$target]=$1; //@line 224 "xmltok_impl.c"
        var $2=HEAP[$ptr_addr]; //@line 225 "xmltok_impl.c"
        var $3=HEAP[$end_addr]; //@line 225 "xmltok_impl.c"
        var $4=($2)==($3); //@line 225 "xmltok_impl.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 225 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 226 "xmltok_impl.c"
        __label__ = 71; break; //@line 226 "xmltok_impl.c"
      case 2: // $bb1
        var $5=HEAP[$ptr_addr]; //@line 227 "xmltok_impl.c"
        var $6=(($5)&4294967295); //@line 227 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 227 "xmltok_impl.c"
        var $8=reSign(($7), 8, 0)==0; //@line 227 "xmltok_impl.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 227 "xmltok_impl.c"
      case 3: // $bb2
        var $9=HEAP[$enc_addr]; //@line 227 "xmltok_impl.c"
        var $10=$9; //@line 227 "xmltok_impl.c"
        var $11=HEAP[$ptr_addr]; //@line 227 "xmltok_impl.c"
        var $12=(($11+1)&4294967295); //@line 227 "xmltok_impl.c"
        var $13=HEAP[$12]; //@line 227 "xmltok_impl.c"
        var $14=unSign(($13), 8, 0); //@line 227 "xmltok_impl.c"
        var $15=(($10+72)&4294967295); //@line 227 "xmltok_impl.c"
        var $16=(($15+$14)&4294967295); //@line 227 "xmltok_impl.c"
        var $17=HEAP[$16]; //@line 227 "xmltok_impl.c"
        var $18=unSign(($17), 8, 0); //@line 227 "xmltok_impl.c"
        HEAP[$iftmp_850]=$18; //@line 227 "xmltok_impl.c"
        __label__ = 5; break; //@line 227 "xmltok_impl.c"
      case 4: // $bb3
        var $19=HEAP[$ptr_addr]; //@line 227 "xmltok_impl.c"
        var $20=(($19+1)&4294967295); //@line 227 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 227 "xmltok_impl.c"
        var $22=reSign(($21), 8, 0); //@line 227 "xmltok_impl.c"
        var $23=HEAP[$ptr_addr]; //@line 227 "xmltok_impl.c"
        var $24=(($23)&4294967295); //@line 227 "xmltok_impl.c"
        var $25=HEAP[$24]; //@line 227 "xmltok_impl.c"
        var $26=reSign(($25), 8, 0); //@line 227 "xmltok_impl.c"
        var $27=((($26)) & 255); //@line 227 "xmltok_impl.c"
        var $28=((($22)) & 255); //@line 227 "xmltok_impl.c"
        var $29=_unicode_byte_type($27, $28); //@line 227 "xmltok_impl.c"
        HEAP[$iftmp_850]=$29; //@line 227 "xmltok_impl.c"
        __label__ = 5; break; //@line 227 "xmltok_impl.c"
      case 5: // $bb4
        var $30=HEAP[$iftmp_850]; //@line 227 "xmltok_impl.c"
        if ($30 == 5) {
          __label__ = 9; break;
        }
        else if ($30 == 6) {
          __label__ = 12; break;
        }
        else if ($30 == 7) {
          __label__ = 15; break;
        }
        else if ($30 == 22) {
          __label__ = 8; break;
        }
        else if ($30 == 24) {
          __label__ = 8; break;
        }
        else if ($30 == 29) {
          __label__ = 6; break;
        }
        else {
        __label__ = 18; break;
        }
        
      case 6: // $bb5
        var $31=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        var $32=(($31)&4294967295); //@line 228 "xmltok_impl.c"
        var $33=HEAP[$32]; //@line 228 "xmltok_impl.c"
        var $34=unSign(($33), 8, 0); //@line 228 "xmltok_impl.c"
        var $35=((_nmstrtPages+$34)&4294967295); //@line 228 "xmltok_impl.c"
        var $36=HEAP[$35]; //@line 228 "xmltok_impl.c"
        var $37=unSign(($36), 8, 0); //@line 228 "xmltok_impl.c"
        var $38=($37) << 3; //@line 228 "xmltok_impl.c"
        var $39=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        var $40=(($39+1)&4294967295); //@line 228 "xmltok_impl.c"
        var $41=HEAP[$40]; //@line 228 "xmltok_impl.c"
        var $42=unSign(($41), 8, 0) >>> 5; //@line 228 "xmltok_impl.c"
        var $43=unSign(($42), 8, 0); //@line 228 "xmltok_impl.c"
        var $44=((($38) + ($43))&4294967295); //@line 228 "xmltok_impl.c"
        var $45=((_namingBitmap+$44*4)&4294967295); //@line 228 "xmltok_impl.c"
        var $46=HEAP[$45]; //@line 228 "xmltok_impl.c"
        var $47=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        var $48=(($47+1)&4294967295); //@line 228 "xmltok_impl.c"
        var $49=HEAP[$48]; //@line 228 "xmltok_impl.c"
        var $50=unSign(($49), 8, 0); //@line 228 "xmltok_impl.c"
        var $51=($50) & 31; //@line 228 "xmltok_impl.c"
        var $52=1 << ($51); //@line 228 "xmltok_impl.c"
        var $53=($46) & ($52); //@line 228 "xmltok_impl.c"
        var $54=((($53))|0)==0; //@line 228 "xmltok_impl.c"
        if ($54) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 228 "xmltok_impl.c"
      case 7: // $bb6
        var $55=HEAP[$nextTokPtr_addr]; //@line 228 "xmltok_impl.c"
        var $56=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        HEAP[$55]=$56; //@line 228 "xmltok_impl.c"
        HEAP[$0]=0; //@line 228 "xmltok_impl.c"
        __label__ = 71; break; //@line 228 "xmltok_impl.c"
      case 8: // $bb7
        var $57=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        var $58=(($57+2)&4294967295); //@line 228 "xmltok_impl.c"
        HEAP[$ptr_addr]=$58; //@line 228 "xmltok_impl.c"
        __label__ = 69; break; //@line 228 "xmltok_impl.c"
      case 9: // $bb8
        var $59=HEAP[$end_addr]; //@line 228 "xmltok_impl.c"
        var $60=($59); //@line 228 "xmltok_impl.c"
        var $61=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        var $62=($61); //@line 228 "xmltok_impl.c"
        var $63=((($60) - ($62))&4294967295); //@line 228 "xmltok_impl.c"
        var $64=((($63))|0) <= 1; //@line 228 "xmltok_impl.c"
        if ($64) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 228 "xmltok_impl.c"
      case 10: // $bb9
        HEAP[$0]=-2; //@line 228 "xmltok_impl.c"
        __label__ = 71; break; //@line 228 "xmltok_impl.c"
      case 11: // $bb10
        var $65=HEAP[$nextTokPtr_addr]; //@line 228 "xmltok_impl.c"
        var $66=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        HEAP[$65]=$66; //@line 228 "xmltok_impl.c"
        HEAP[$0]=0; //@line 228 "xmltok_impl.c"
        __label__ = 71; break; //@line 228 "xmltok_impl.c"
      case 12: // $bb11
        var $67=HEAP[$end_addr]; //@line 228 "xmltok_impl.c"
        var $68=($67); //@line 228 "xmltok_impl.c"
        var $69=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        var $70=($69); //@line 228 "xmltok_impl.c"
        var $71=((($68) - ($70))&4294967295); //@line 228 "xmltok_impl.c"
        var $72=((($71))|0) <= 2; //@line 228 "xmltok_impl.c"
        if ($72) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 228 "xmltok_impl.c"
      case 13: // $bb12
        HEAP[$0]=-2; //@line 228 "xmltok_impl.c"
        __label__ = 71; break; //@line 228 "xmltok_impl.c"
      case 14: // $bb13
        var $73=HEAP[$nextTokPtr_addr]; //@line 228 "xmltok_impl.c"
        var $74=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        HEAP[$73]=$74; //@line 228 "xmltok_impl.c"
        HEAP[$0]=0; //@line 228 "xmltok_impl.c"
        __label__ = 71; break; //@line 228 "xmltok_impl.c"
      case 15: // $bb14
        var $75=HEAP[$end_addr]; //@line 228 "xmltok_impl.c"
        var $76=($75); //@line 228 "xmltok_impl.c"
        var $77=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        var $78=($77); //@line 228 "xmltok_impl.c"
        var $79=((($76) - ($78))&4294967295); //@line 228 "xmltok_impl.c"
        var $80=((($79))|0) <= 3; //@line 228 "xmltok_impl.c"
        if ($80) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 228 "xmltok_impl.c"
      case 16: // $bb15
        HEAP[$0]=-2; //@line 228 "xmltok_impl.c"
        __label__ = 71; break; //@line 228 "xmltok_impl.c"
      case 17: // $bb16
        var $81=HEAP[$nextTokPtr_addr]; //@line 228 "xmltok_impl.c"
        var $82=HEAP[$ptr_addr]; //@line 228 "xmltok_impl.c"
        HEAP[$81]=$82; //@line 228 "xmltok_impl.c"
        HEAP[$0]=0; //@line 228 "xmltok_impl.c"
        __label__ = 71; break; //@line 228 "xmltok_impl.c"
      case 18: // $bb17
        var $83=HEAP[$nextTokPtr_addr]; //@line 230 "xmltok_impl.c"
        var $84=HEAP[$ptr_addr]; //@line 230 "xmltok_impl.c"
        HEAP[$83]=$84; //@line 230 "xmltok_impl.c"
        HEAP[$0]=0; //@line 231 "xmltok_impl.c"
        __label__ = 71; break; //@line 231 "xmltok_impl.c"
      case 19: // $bb18
        var $85=HEAP[$ptr_addr]; //@line 234 "xmltok_impl.c"
        var $86=(($85)&4294967295); //@line 234 "xmltok_impl.c"
        var $87=HEAP[$86]; //@line 234 "xmltok_impl.c"
        var $88=reSign(($87), 8, 0)==0; //@line 234 "xmltok_impl.c"
        if ($88) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 234 "xmltok_impl.c"
      case 20: // $bb19
        var $89=HEAP[$enc_addr]; //@line 234 "xmltok_impl.c"
        var $90=$89; //@line 234 "xmltok_impl.c"
        var $91=HEAP[$ptr_addr]; //@line 234 "xmltok_impl.c"
        var $92=(($91+1)&4294967295); //@line 234 "xmltok_impl.c"
        var $93=HEAP[$92]; //@line 234 "xmltok_impl.c"
        var $94=unSign(($93), 8, 0); //@line 234 "xmltok_impl.c"
        var $95=(($90+72)&4294967295); //@line 234 "xmltok_impl.c"
        var $96=(($95+$94)&4294967295); //@line 234 "xmltok_impl.c"
        var $97=HEAP[$96]; //@line 234 "xmltok_impl.c"
        var $98=unSign(($97), 8, 0); //@line 234 "xmltok_impl.c"
        HEAP[$iftmp_858]=$98; //@line 234 "xmltok_impl.c"
        __label__ = 22; break; //@line 234 "xmltok_impl.c"
      case 21: // $bb20
        var $99=HEAP[$ptr_addr]; //@line 234 "xmltok_impl.c"
        var $100=(($99+1)&4294967295); //@line 234 "xmltok_impl.c"
        var $101=HEAP[$100]; //@line 234 "xmltok_impl.c"
        var $102=reSign(($101), 8, 0); //@line 234 "xmltok_impl.c"
        var $103=HEAP[$ptr_addr]; //@line 234 "xmltok_impl.c"
        var $104=(($103)&4294967295); //@line 234 "xmltok_impl.c"
        var $105=HEAP[$104]; //@line 234 "xmltok_impl.c"
        var $106=reSign(($105), 8, 0); //@line 234 "xmltok_impl.c"
        var $107=((($106)) & 255); //@line 234 "xmltok_impl.c"
        var $108=((($102)) & 255); //@line 234 "xmltok_impl.c"
        var $109=_unicode_byte_type($107, $108); //@line 234 "xmltok_impl.c"
        HEAP[$iftmp_858]=$109; //@line 234 "xmltok_impl.c"
        __label__ = 22; break; //@line 234 "xmltok_impl.c"
      case 22: // $bb21
        var $110=HEAP[$iftmp_858]; //@line 234 "xmltok_impl.c"
        if ($110 == 5) {
          __label__ = 26; break;
        }
        else if ($110 == 6) {
          __label__ = 29; break;
        }
        else if ($110 == 7) {
          __label__ = 32; break;
        }
        else if ($110 == 9) {
          __label__ = 35; break;
        }
        else if ($110 == 10) {
          __label__ = 35; break;
        }
        else if ($110 == 15) {
          __label__ = 61; break;
        }
        else if ($110 == 21) {
          __label__ = 35; break;
        }
        else if ($110 == 22) {
          __label__ = 25; break;
        }
        else if ($110 == 24) {
          __label__ = 25; break;
        }
        else if ($110 == 25) {
          __label__ = 25; break;
        }
        else if ($110 == 26) {
          __label__ = 25; break;
        }
        else if ($110 == 27) {
          __label__ = 25; break;
        }
        else if ($110 == 29) {
          __label__ = 23; break;
        }
        else {
        __label__ = 68; break;
        }
        
      case 23: // $bb22
        var $111=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        var $112=(($111)&4294967295); //@line 235 "xmltok_impl.c"
        var $113=HEAP[$112]; //@line 235 "xmltok_impl.c"
        var $114=unSign(($113), 8, 0); //@line 235 "xmltok_impl.c"
        var $115=((_namePages+$114)&4294967295); //@line 235 "xmltok_impl.c"
        var $116=HEAP[$115]; //@line 235 "xmltok_impl.c"
        var $117=unSign(($116), 8, 0); //@line 235 "xmltok_impl.c"
        var $118=($117) << 3; //@line 235 "xmltok_impl.c"
        var $119=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        var $120=(($119+1)&4294967295); //@line 235 "xmltok_impl.c"
        var $121=HEAP[$120]; //@line 235 "xmltok_impl.c"
        var $122=unSign(($121), 8, 0) >>> 5; //@line 235 "xmltok_impl.c"
        var $123=unSign(($122), 8, 0); //@line 235 "xmltok_impl.c"
        var $124=((($118) + ($123))&4294967295); //@line 235 "xmltok_impl.c"
        var $125=((_namingBitmap+$124*4)&4294967295); //@line 235 "xmltok_impl.c"
        var $126=HEAP[$125]; //@line 235 "xmltok_impl.c"
        var $127=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        var $128=(($127+1)&4294967295); //@line 235 "xmltok_impl.c"
        var $129=HEAP[$128]; //@line 235 "xmltok_impl.c"
        var $130=unSign(($129), 8, 0); //@line 235 "xmltok_impl.c"
        var $131=($130) & 31; //@line 235 "xmltok_impl.c"
        var $132=1 << ($131); //@line 235 "xmltok_impl.c"
        var $133=($126) & ($132); //@line 235 "xmltok_impl.c"
        var $134=((($133))|0)==0; //@line 235 "xmltok_impl.c"
        if ($134) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 235 "xmltok_impl.c"
      case 24: // $bb23
        var $135=HEAP[$nextTokPtr_addr]; //@line 235 "xmltok_impl.c"
        var $136=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        HEAP[$135]=$136; //@line 235 "xmltok_impl.c"
        HEAP[$0]=0; //@line 235 "xmltok_impl.c"
        __label__ = 71; break; //@line 235 "xmltok_impl.c"
      case 25: // $bb24
        var $137=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        var $138=(($137+2)&4294967295); //@line 235 "xmltok_impl.c"
        HEAP[$ptr_addr]=$138; //@line 235 "xmltok_impl.c"
        __label__ = 69; break; //@line 235 "xmltok_impl.c"
      case 26: // $bb25
        var $139=HEAP[$end_addr]; //@line 235 "xmltok_impl.c"
        var $140=($139); //@line 235 "xmltok_impl.c"
        var $141=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        var $142=($141); //@line 235 "xmltok_impl.c"
        var $143=((($140) - ($142))&4294967295); //@line 235 "xmltok_impl.c"
        var $144=((($143))|0) <= 1; //@line 235 "xmltok_impl.c"
        if ($144) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 235 "xmltok_impl.c"
      case 27: // $bb26
        HEAP[$0]=-2; //@line 235 "xmltok_impl.c"
        __label__ = 71; break; //@line 235 "xmltok_impl.c"
      case 28: // $bb27
        var $145=HEAP[$nextTokPtr_addr]; //@line 235 "xmltok_impl.c"
        var $146=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        HEAP[$145]=$146; //@line 235 "xmltok_impl.c"
        HEAP[$0]=0; //@line 235 "xmltok_impl.c"
        __label__ = 71; break; //@line 235 "xmltok_impl.c"
      case 29: // $bb28
        var $147=HEAP[$end_addr]; //@line 235 "xmltok_impl.c"
        var $148=($147); //@line 235 "xmltok_impl.c"
        var $149=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        var $150=($149); //@line 235 "xmltok_impl.c"
        var $151=((($148) - ($150))&4294967295); //@line 235 "xmltok_impl.c"
        var $152=((($151))|0) <= 2; //@line 235 "xmltok_impl.c"
        if ($152) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 235 "xmltok_impl.c"
      case 30: // $bb29
        HEAP[$0]=-2; //@line 235 "xmltok_impl.c"
        __label__ = 71; break; //@line 235 "xmltok_impl.c"
      case 31: // $bb30
        var $153=HEAP[$nextTokPtr_addr]; //@line 235 "xmltok_impl.c"
        var $154=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        HEAP[$153]=$154; //@line 235 "xmltok_impl.c"
        HEAP[$0]=0; //@line 235 "xmltok_impl.c"
        __label__ = 71; break; //@line 235 "xmltok_impl.c"
      case 32: // $bb31
        var $155=HEAP[$end_addr]; //@line 235 "xmltok_impl.c"
        var $156=($155); //@line 235 "xmltok_impl.c"
        var $157=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        var $158=($157); //@line 235 "xmltok_impl.c"
        var $159=((($156) - ($158))&4294967295); //@line 235 "xmltok_impl.c"
        var $160=((($159))|0) <= 3; //@line 235 "xmltok_impl.c"
        if ($160) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 235 "xmltok_impl.c"
      case 33: // $bb32
        HEAP[$0]=-2; //@line 235 "xmltok_impl.c"
        __label__ = 71; break; //@line 235 "xmltok_impl.c"
      case 34: // $bb33
        var $161=HEAP[$nextTokPtr_addr]; //@line 235 "xmltok_impl.c"
        var $162=HEAP[$ptr_addr]; //@line 235 "xmltok_impl.c"
        HEAP[$161]=$162; //@line 235 "xmltok_impl.c"
        HEAP[$0]=0; //@line 235 "xmltok_impl.c"
        __label__ = 71; break; //@line 235 "xmltok_impl.c"
      case 35: // $bb34
        var $163=HEAP[$enc_addr]; //@line 237 "xmltok_impl.c"
        var $164=HEAP[$target]; //@line 237 "xmltok_impl.c"
        var $165=HEAP[$ptr_addr]; //@line 237 "xmltok_impl.c"
        var $166=_big2_checkPiTarget($163, $164, $165, $tok); //@line 237 "xmltok_impl.c"
        var $167=((($166))|0)==0; //@line 237 "xmltok_impl.c"
        if ($167) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 237 "xmltok_impl.c"
      case 36: // $bb35
        var $168=HEAP[$nextTokPtr_addr]; //@line 238 "xmltok_impl.c"
        var $169=HEAP[$ptr_addr]; //@line 238 "xmltok_impl.c"
        HEAP[$168]=$169; //@line 238 "xmltok_impl.c"
        HEAP[$0]=0; //@line 239 "xmltok_impl.c"
        __label__ = 71; break; //@line 239 "xmltok_impl.c"
      case 37: // $bb36
        var $170=HEAP[$ptr_addr]; //@line 241 "xmltok_impl.c"
        var $171=(($170+2)&4294967295); //@line 241 "xmltok_impl.c"
        HEAP[$ptr_addr]=$171; //@line 241 "xmltok_impl.c"
        __label__ = 59; break; //@line 241 "xmltok_impl.c"
      case 38: // $bb37
        var $172=HEAP[$ptr_addr]; //@line 243 "xmltok_impl.c"
        var $173=(($172)&4294967295); //@line 243 "xmltok_impl.c"
        var $174=HEAP[$173]; //@line 243 "xmltok_impl.c"
        var $175=reSign(($174), 8, 0)==0; //@line 243 "xmltok_impl.c"
        if ($175) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 243 "xmltok_impl.c"
      case 39: // $bb38
        var $176=HEAP[$enc_addr]; //@line 243 "xmltok_impl.c"
        var $177=$176; //@line 243 "xmltok_impl.c"
        var $178=HEAP[$ptr_addr]; //@line 243 "xmltok_impl.c"
        var $179=(($178+1)&4294967295); //@line 243 "xmltok_impl.c"
        var $180=HEAP[$179]; //@line 243 "xmltok_impl.c"
        var $181=unSign(($180), 8, 0); //@line 243 "xmltok_impl.c"
        var $182=(($177+72)&4294967295); //@line 243 "xmltok_impl.c"
        var $183=(($182+$181)&4294967295); //@line 243 "xmltok_impl.c"
        var $184=HEAP[$183]; //@line 243 "xmltok_impl.c"
        var $185=unSign(($184), 8, 0); //@line 243 "xmltok_impl.c"
        HEAP[$iftmp_866]=$185; //@line 243 "xmltok_impl.c"
        __label__ = 41; break; //@line 243 "xmltok_impl.c"
      case 40: // $bb39
        var $186=HEAP[$ptr_addr]; //@line 243 "xmltok_impl.c"
        var $187=(($186+1)&4294967295); //@line 243 "xmltok_impl.c"
        var $188=HEAP[$187]; //@line 243 "xmltok_impl.c"
        var $189=reSign(($188), 8, 0); //@line 243 "xmltok_impl.c"
        var $190=HEAP[$ptr_addr]; //@line 243 "xmltok_impl.c"
        var $191=(($190)&4294967295); //@line 243 "xmltok_impl.c"
        var $192=HEAP[$191]; //@line 243 "xmltok_impl.c"
        var $193=reSign(($192), 8, 0); //@line 243 "xmltok_impl.c"
        var $194=((($193)) & 255); //@line 243 "xmltok_impl.c"
        var $195=((($189)) & 255); //@line 243 "xmltok_impl.c"
        var $196=_unicode_byte_type($194, $195); //@line 243 "xmltok_impl.c"
        HEAP[$iftmp_866]=$196; //@line 243 "xmltok_impl.c"
        __label__ = 41; break; //@line 243 "xmltok_impl.c"
      case 41: // $bb40
        var $197=HEAP[$iftmp_866]; //@line 243 "xmltok_impl.c"
        if ($197 == 0) {
          __label__ = 51; break;
        }
        else if ($197 == 1) {
          __label__ = 51; break;
        }
        else if ($197 == 5) {
          __label__ = 42; break;
        }
        else if ($197 == 6) {
          __label__ = 45; break;
        }
        else if ($197 == 7) {
          __label__ = 48; break;
        }
        else if ($197 == 8) {
          __label__ = 51; break;
        }
        else if ($197 == 15) {
          __label__ = 52; break;
        }
        else {
        __label__ = 58; break;
        }
        
      case 42: // $bb41
        var $198=HEAP[$end_addr]; //@line 244 "xmltok_impl.c"
        var $199=($198); //@line 244 "xmltok_impl.c"
        var $200=HEAP[$ptr_addr]; //@line 244 "xmltok_impl.c"
        var $201=($200); //@line 244 "xmltok_impl.c"
        var $202=((($199) - ($201))&4294967295); //@line 244 "xmltok_impl.c"
        var $203=((($202))|0) <= 1; //@line 244 "xmltok_impl.c"
        if ($203) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 244 "xmltok_impl.c"
      case 43: // $bb42
        HEAP[$0]=-2; //@line 244 "xmltok_impl.c"
        __label__ = 71; break; //@line 244 "xmltok_impl.c"
      case 44: // $bb43
        var $204=HEAP[$ptr_addr]; //@line 244 "xmltok_impl.c"
        var $205=(($204+2)&4294967295); //@line 244 "xmltok_impl.c"
        HEAP[$ptr_addr]=$205; //@line 244 "xmltok_impl.c"
        __label__ = 59; break; //@line 244 "xmltok_impl.c"
      case 45: // $bb44
        var $206=HEAP[$end_addr]; //@line 244 "xmltok_impl.c"
        var $207=($206); //@line 244 "xmltok_impl.c"
        var $208=HEAP[$ptr_addr]; //@line 244 "xmltok_impl.c"
        var $209=($208); //@line 244 "xmltok_impl.c"
        var $210=((($207) - ($209))&4294967295); //@line 244 "xmltok_impl.c"
        var $211=((($210))|0) <= 2; //@line 244 "xmltok_impl.c"
        if ($211) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 244 "xmltok_impl.c"
      case 46: // $bb45
        HEAP[$0]=-2; //@line 244 "xmltok_impl.c"
        __label__ = 71; break; //@line 244 "xmltok_impl.c"
      case 47: // $bb46
        var $212=HEAP[$ptr_addr]; //@line 244 "xmltok_impl.c"
        var $213=(($212+3)&4294967295); //@line 244 "xmltok_impl.c"
        HEAP[$ptr_addr]=$213; //@line 244 "xmltok_impl.c"
        __label__ = 59; break; //@line 244 "xmltok_impl.c"
      case 48: // $bb47
        var $214=HEAP[$end_addr]; //@line 244 "xmltok_impl.c"
        var $215=($214); //@line 244 "xmltok_impl.c"
        var $216=HEAP[$ptr_addr]; //@line 244 "xmltok_impl.c"
        var $217=($216); //@line 244 "xmltok_impl.c"
        var $218=((($215) - ($217))&4294967295); //@line 244 "xmltok_impl.c"
        var $219=((($218))|0) <= 3; //@line 244 "xmltok_impl.c"
        if ($219) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 244 "xmltok_impl.c"
      case 49: // $bb48
        HEAP[$0]=-2; //@line 244 "xmltok_impl.c"
        __label__ = 71; break; //@line 244 "xmltok_impl.c"
      case 50: // $bb49
        var $220=HEAP[$ptr_addr]; //@line 244 "xmltok_impl.c"
        var $221=(($220+4)&4294967295); //@line 244 "xmltok_impl.c"
        HEAP[$ptr_addr]=$221; //@line 244 "xmltok_impl.c"
        __label__ = 59; break; //@line 244 "xmltok_impl.c"
      case 51: // $bb50
        var $222=HEAP[$nextTokPtr_addr]; //@line 244 "xmltok_impl.c"
        var $223=HEAP[$ptr_addr]; //@line 244 "xmltok_impl.c"
        HEAP[$222]=$223; //@line 244 "xmltok_impl.c"
        HEAP[$0]=0; //@line 244 "xmltok_impl.c"
        __label__ = 71; break; //@line 244 "xmltok_impl.c"
      case 52: // $bb51
        var $224=HEAP[$ptr_addr]; //@line 246 "xmltok_impl.c"
        var $225=(($224+2)&4294967295); //@line 246 "xmltok_impl.c"
        HEAP[$ptr_addr]=$225; //@line 246 "xmltok_impl.c"
        var $226=HEAP[$ptr_addr]; //@line 247 "xmltok_impl.c"
        var $227=HEAP[$end_addr]; //@line 247 "xmltok_impl.c"
        var $228=($226)==($227); //@line 247 "xmltok_impl.c"
        if ($228) { __label__ = 53; break; } else { __label__ = 54; break; } //@line 247 "xmltok_impl.c"
      case 53: // $bb52
        HEAP[$0]=-1; //@line 248 "xmltok_impl.c"
        __label__ = 71; break; //@line 248 "xmltok_impl.c"
      case 54: // $bb53
        var $229=HEAP[$ptr_addr]; //@line 249 "xmltok_impl.c"
        var $230=(($229)&4294967295); //@line 249 "xmltok_impl.c"
        var $231=HEAP[$230]; //@line 249 "xmltok_impl.c"
        var $232=reSign(($231), 8, 0)==0; //@line 249 "xmltok_impl.c"
        if ($232) { __label__ = 55; break; } else { __label__ = 57; break; } //@line 249 "xmltok_impl.c"
      case 55: // $bb54
        var $233=HEAP[$ptr_addr]; //@line 249 "xmltok_impl.c"
        var $234=(($233+1)&4294967295); //@line 249 "xmltok_impl.c"
        var $235=HEAP[$234]; //@line 249 "xmltok_impl.c"
        var $236=reSign(($235), 8, 0)==62; //@line 249 "xmltok_impl.c"
        if ($236) { __label__ = 56; break; } else { __label__ = 57; break; } //@line 249 "xmltok_impl.c"
      case 56: // $bb55
        var $237=HEAP[$ptr_addr]; //@line 250 "xmltok_impl.c"
        var $238=(($237+2)&4294967295); //@line 250 "xmltok_impl.c"
        var $239=HEAP[$nextTokPtr_addr]; //@line 250 "xmltok_impl.c"
        HEAP[$239]=$238; //@line 250 "xmltok_impl.c"
        var $240=HEAP[$tok]; //@line 251 "xmltok_impl.c"
        HEAP[$0]=$240; //@line 251 "xmltok_impl.c"
        __label__ = 71; break; //@line 251 "xmltok_impl.c"
      case 57: // $bb56
        __label__ = 59; break; //@line 251 "xmltok_impl.c"
      case 58: // $bb57
        var $241=HEAP[$ptr_addr]; //@line 255 "xmltok_impl.c"
        var $242=(($241+2)&4294967295); //@line 255 "xmltok_impl.c"
        HEAP[$ptr_addr]=$242; //@line 255 "xmltok_impl.c"
        __label__ = 59; break; //@line 255 "xmltok_impl.c"
      case 59: // $bb58
        var $243=HEAP[$ptr_addr]; //@line 242 "xmltok_impl.c"
        var $244=HEAP[$end_addr]; //@line 242 "xmltok_impl.c"
        var $245=($243)!=($244); //@line 242 "xmltok_impl.c"
        if ($245) { __label__ = 38; break; } else { __label__ = 60; break; } //@line 242 "xmltok_impl.c"
      case 60: // $bb59
        HEAP[$0]=-1; //@line 259 "xmltok_impl.c"
        __label__ = 71; break; //@line 259 "xmltok_impl.c"
      case 61: // $bb60
        var $246=HEAP[$enc_addr]; //@line 261 "xmltok_impl.c"
        var $247=HEAP[$target]; //@line 261 "xmltok_impl.c"
        var $248=HEAP[$ptr_addr]; //@line 261 "xmltok_impl.c"
        var $249=_big2_checkPiTarget($246, $247, $248, $tok); //@line 261 "xmltok_impl.c"
        var $250=((($249))|0)==0; //@line 261 "xmltok_impl.c"
        if ($250) { __label__ = 62; break; } else { __label__ = 63; break; } //@line 261 "xmltok_impl.c"
      case 62: // $bb61
        var $251=HEAP[$nextTokPtr_addr]; //@line 262 "xmltok_impl.c"
        var $252=HEAP[$ptr_addr]; //@line 262 "xmltok_impl.c"
        HEAP[$251]=$252; //@line 262 "xmltok_impl.c"
        HEAP[$0]=0; //@line 263 "xmltok_impl.c"
        __label__ = 71; break; //@line 263 "xmltok_impl.c"
      case 63: // $bb62
        var $253=HEAP[$ptr_addr]; //@line 265 "xmltok_impl.c"
        var $254=(($253+2)&4294967295); //@line 265 "xmltok_impl.c"
        HEAP[$ptr_addr]=$254; //@line 265 "xmltok_impl.c"
        var $255=HEAP[$ptr_addr]; //@line 266 "xmltok_impl.c"
        var $256=HEAP[$end_addr]; //@line 266 "xmltok_impl.c"
        var $257=($255)==($256); //@line 266 "xmltok_impl.c"
        if ($257) { __label__ = 64; break; } else { __label__ = 65; break; } //@line 266 "xmltok_impl.c"
      case 64: // $bb63
        HEAP[$0]=-1; //@line 267 "xmltok_impl.c"
        __label__ = 71; break; //@line 267 "xmltok_impl.c"
      case 65: // $bb64
        var $258=HEAP[$ptr_addr]; //@line 268 "xmltok_impl.c"
        var $259=(($258)&4294967295); //@line 268 "xmltok_impl.c"
        var $260=HEAP[$259]; //@line 268 "xmltok_impl.c"
        var $261=reSign(($260), 8, 0)==0; //@line 268 "xmltok_impl.c"
        if ($261) { __label__ = 66; break; } else { __label__ = 68; break; } //@line 268 "xmltok_impl.c"
      case 66: // $bb65
        var $262=HEAP[$ptr_addr]; //@line 268 "xmltok_impl.c"
        var $263=(($262+1)&4294967295); //@line 268 "xmltok_impl.c"
        var $264=HEAP[$263]; //@line 268 "xmltok_impl.c"
        var $265=reSign(($264), 8, 0)==62; //@line 268 "xmltok_impl.c"
        if ($265) { __label__ = 67; break; } else { __label__ = 68; break; } //@line 268 "xmltok_impl.c"
      case 67: // $bb66
        var $266=HEAP[$ptr_addr]; //@line 269 "xmltok_impl.c"
        var $267=(($266+2)&4294967295); //@line 269 "xmltok_impl.c"
        var $268=HEAP[$nextTokPtr_addr]; //@line 269 "xmltok_impl.c"
        HEAP[$268]=$267; //@line 269 "xmltok_impl.c"
        var $269=HEAP[$tok]; //@line 270 "xmltok_impl.c"
        HEAP[$0]=$269; //@line 270 "xmltok_impl.c"
        __label__ = 71; break; //@line 270 "xmltok_impl.c"
      case 68: // $bb67
        var $270=HEAP[$nextTokPtr_addr]; //@line 274 "xmltok_impl.c"
        var $271=HEAP[$ptr_addr]; //@line 274 "xmltok_impl.c"
        HEAP[$270]=$271; //@line 274 "xmltok_impl.c"
        HEAP[$0]=0; //@line 275 "xmltok_impl.c"
        __label__ = 71; break; //@line 275 "xmltok_impl.c"
      case 69: // $bb68
        var $272=HEAP[$ptr_addr]; //@line 233 "xmltok_impl.c"
        var $273=HEAP[$end_addr]; //@line 233 "xmltok_impl.c"
        var $274=($272)!=($273); //@line 233 "xmltok_impl.c"
        if ($274) { __label__ = 19; break; } else { __label__ = 70; break; } //@line 233 "xmltok_impl.c"
      case 70: // $bb69
        HEAP[$0]=-1; //@line 278 "xmltok_impl.c"
        __label__ = 71; break; //@line 278 "xmltok_impl.c"
      case 71: // $bb70
        var $275=HEAP[$0]; //@line 226 "xmltok_impl.c"
        HEAP[$retval]=$275; //@line 226 "xmltok_impl.c"
        __label__ = 72; break; //@line 226 "xmltok_impl.c"
      case 72: // $return
        var $retval71=HEAP[$retval]; //@line 226 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval71; //@line 226 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_scanCdataSection($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $i=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$end_addr]; //@line 289 "xmltok_impl.c"
        var $2=($1); //@line 289 "xmltok_impl.c"
        var $3=HEAP[$ptr_addr]; //@line 289 "xmltok_impl.c"
        var $4=($3); //@line 289 "xmltok_impl.c"
        var $5=((($2) - ($4))&4294967295); //@line 289 "xmltok_impl.c"
        var $6=((($5))|0) <= 11; //@line 289 "xmltok_impl.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 289 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 290 "xmltok_impl.c"
        __label__ = 9; break; //@line 290 "xmltok_impl.c"
      case 2: // $bb1
        HEAP[$i]=0; //@line 291 "xmltok_impl.c"
        __label__ = 7; break; //@line 291 "xmltok_impl.c"
      case 3: // $bb2
        var $7=HEAP[$ptr_addr]; //@line 292 "xmltok_impl.c"
        var $8=(($7)&4294967295); //@line 292 "xmltok_impl.c"
        var $9=HEAP[$8]; //@line 292 "xmltok_impl.c"
        var $10=reSign(($9), 8, 0)!=0; //@line 292 "xmltok_impl.c"
        if ($10) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 292 "xmltok_impl.c"
      case 4: // $bb3
        var $11=HEAP[$ptr_addr]; //@line 292 "xmltok_impl.c"
        var $12=(($11+1)&4294967295); //@line 292 "xmltok_impl.c"
        var $13=HEAP[$12]; //@line 292 "xmltok_impl.c"
        var $14=HEAP[$i]; //@line 292 "xmltok_impl.c"
        var $15=((_CDATA_LSQB_8477+$14)&4294967295); //@line 292 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 292 "xmltok_impl.c"
        var $17=reSign(($13), 8, 0)!=reSign(($16), 8, 0); //@line 292 "xmltok_impl.c"
        if ($17) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 292 "xmltok_impl.c"
      case 5: // $bb4
        var $18=HEAP[$nextTokPtr_addr]; //@line 293 "xmltok_impl.c"
        var $19=HEAP[$ptr_addr]; //@line 293 "xmltok_impl.c"
        HEAP[$18]=$19; //@line 293 "xmltok_impl.c"
        HEAP[$0]=0; //@line 294 "xmltok_impl.c"
        __label__ = 9; break; //@line 294 "xmltok_impl.c"
      case 6: // $bb5
        var $20=HEAP[$i]; //@line 291 "xmltok_impl.c"
        var $21=((($20) + 1)&4294967295); //@line 291 "xmltok_impl.c"
        HEAP[$i]=$21; //@line 291 "xmltok_impl.c"
        var $22=HEAP[$ptr_addr]; //@line 291 "xmltok_impl.c"
        var $23=(($22+2)&4294967295); //@line 291 "xmltok_impl.c"
        HEAP[$ptr_addr]=$23; //@line 291 "xmltok_impl.c"
        __label__ = 7; break; //@line 291 "xmltok_impl.c"
      case 7: // $bb6
        var $24=HEAP[$i]; //@line 291 "xmltok_impl.c"
        var $25=((($24))|0) <= 5; //@line 291 "xmltok_impl.c"
        if ($25) { __label__ = 3; break; } else { __label__ = 8; break; } //@line 291 "xmltok_impl.c"
      case 8: // $bb7
        var $26=HEAP[$nextTokPtr_addr]; //@line 297 "xmltok_impl.c"
        var $27=HEAP[$ptr_addr]; //@line 297 "xmltok_impl.c"
        HEAP[$26]=$27; //@line 297 "xmltok_impl.c"
        HEAP[$0]=8; //@line 298 "xmltok_impl.c"
        __label__ = 9; break; //@line 298 "xmltok_impl.c"
      case 9: // $bb8
        var $28=HEAP[$0]; //@line 290 "xmltok_impl.c"
        HEAP[$retval]=$28; //@line 290 "xmltok_impl.c"
        __label__ = 10; break; //@line 290 "xmltok_impl.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 290 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 290 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_cdataSectionTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 37; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 37);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_890=__stackBase__+20;
        var $iftmp_882=__stackBase__+24;
        var $iftmp_880=__stackBase__+25;
        var $0=__stackBase__+29;
        var $n=__stackBase__+33;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 305 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 305 "xmltok_impl.c"
        var $3=($1)==($2); //@line 305 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 305 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-4; //@line 306 "xmltok_impl.c"
        __label__ = 58; break; //@line 306 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$end_addr]; //@line 308 "xmltok_impl.c"
        var $5=($4); //@line 308 "xmltok_impl.c"
        var $6=HEAP[$ptr_addr]; //@line 308 "xmltok_impl.c"
        var $7=($6); //@line 308 "xmltok_impl.c"
        var $8=((($5) - ($7))&4294967295); //@line 308 "xmltok_impl.c"
        HEAP[$n]=$8; //@line 308 "xmltok_impl.c"
        var $9=HEAP[$n]; //@line 309 "xmltok_impl.c"
        var $10=($9) & 1; //@line 309 "xmltok_impl.c"
        var $11=((($10)) & 255); //@line 309 "xmltok_impl.c"
        var $toBool=reSign(($11), 8, 0)!=0; //@line 309 "xmltok_impl.c"
        if ($toBool) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 309 "xmltok_impl.c"
      case 3: // $bb2
        var $12=HEAP[$n]; //@line 310 "xmltok_impl.c"
        var $13=($12) & -2; //@line 310 "xmltok_impl.c"
        HEAP[$n]=$13; //@line 310 "xmltok_impl.c"
        var $14=HEAP[$n]; //@line 311 "xmltok_impl.c"
        var $15=((($14))|0)==0; //@line 311 "xmltok_impl.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 311 "xmltok_impl.c"
      case 4: // $bb3
        HEAP[$0]=-1; //@line 312 "xmltok_impl.c"
        __label__ = 58; break; //@line 312 "xmltok_impl.c"
      case 5: // $bb4
        var $16=HEAP[$ptr_addr]; //@line 313 "xmltok_impl.c"
        var $17=HEAP[$n]; //@line 313 "xmltok_impl.c"
        var $18=(($16+$17)&4294967295); //@line 313 "xmltok_impl.c"
        HEAP[$end_addr]=$18; //@line 313 "xmltok_impl.c"
        __label__ = 6; break; //@line 313 "xmltok_impl.c"
      case 6: // $bb5
        var $19=HEAP[$ptr_addr]; //@line 316 "xmltok_impl.c"
        var $20=(($19)&4294967295); //@line 316 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 316 "xmltok_impl.c"
        var $22=reSign(($21), 8, 0)==0; //@line 316 "xmltok_impl.c"
        if ($22) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 316 "xmltok_impl.c"
      case 7: // $bb6
        var $23=HEAP[$enc_addr]; //@line 316 "xmltok_impl.c"
        var $24=$23; //@line 316 "xmltok_impl.c"
        var $25=HEAP[$ptr_addr]; //@line 316 "xmltok_impl.c"
        var $26=(($25+1)&4294967295); //@line 316 "xmltok_impl.c"
        var $27=HEAP[$26]; //@line 316 "xmltok_impl.c"
        var $28=unSign(($27), 8, 0); //@line 316 "xmltok_impl.c"
        var $29=(($24+72)&4294967295); //@line 316 "xmltok_impl.c"
        var $30=(($29+$28)&4294967295); //@line 316 "xmltok_impl.c"
        var $31=HEAP[$30]; //@line 316 "xmltok_impl.c"
        var $32=unSign(($31), 8, 0); //@line 316 "xmltok_impl.c"
        HEAP[$iftmp_880]=$32; //@line 316 "xmltok_impl.c"
        __label__ = 9; break; //@line 316 "xmltok_impl.c"
      case 8: // $bb7
        var $33=HEAP[$ptr_addr]; //@line 316 "xmltok_impl.c"
        var $34=(($33+1)&4294967295); //@line 316 "xmltok_impl.c"
        var $35=HEAP[$34]; //@line 316 "xmltok_impl.c"
        var $36=reSign(($35), 8, 0); //@line 316 "xmltok_impl.c"
        var $37=HEAP[$ptr_addr]; //@line 316 "xmltok_impl.c"
        var $38=(($37)&4294967295); //@line 316 "xmltok_impl.c"
        var $39=HEAP[$38]; //@line 316 "xmltok_impl.c"
        var $40=reSign(($39), 8, 0); //@line 316 "xmltok_impl.c"
        var $41=((($40)) & 255); //@line 316 "xmltok_impl.c"
        var $42=((($36)) & 255); //@line 316 "xmltok_impl.c"
        var $43=_unicode_byte_type($41, $42); //@line 316 "xmltok_impl.c"
        HEAP[$iftmp_880]=$43; //@line 316 "xmltok_impl.c"
        __label__ = 9; break; //@line 316 "xmltok_impl.c"
      case 9: // $bb8
        var $44=HEAP[$iftmp_880]; //@line 316 "xmltok_impl.c"
        if ($44 == 0) {
          __label__ = 38; break;
        }
        else if ($44 == 1) {
          __label__ = 38; break;
        }
        else if ($44 == 4) {
          __label__ = 10; break;
        }
        else if ($44 == 5) {
          __label__ = 29; break;
        }
        else if ($44 == 6) {
          __label__ = 32; break;
        }
        else if ($44 == 7) {
          __label__ = 35; break;
        }
        else if ($44 == 8) {
          __label__ = 38; break;
        }
        else if ($44 == 9) {
          __label__ = 20; break;
        }
        else if ($44 == 10) {
          __label__ = 28; break;
        }
        else {
        __label__ = 39; break;
        }
        
      case 10: // $bb9
        var $45=HEAP[$ptr_addr]; //@line 318 "xmltok_impl.c"
        var $46=(($45+2)&4294967295); //@line 318 "xmltok_impl.c"
        HEAP[$ptr_addr]=$46; //@line 318 "xmltok_impl.c"
        var $47=HEAP[$ptr_addr]; //@line 319 "xmltok_impl.c"
        var $48=HEAP[$end_addr]; //@line 319 "xmltok_impl.c"
        var $49=($47)==($48); //@line 319 "xmltok_impl.c"
        if ($49) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 319 "xmltok_impl.c"
      case 11: // $bb10
        HEAP[$0]=-1; //@line 320 "xmltok_impl.c"
        __label__ = 58; break; //@line 320 "xmltok_impl.c"
      case 12: // $bb11
        var $50=HEAP[$ptr_addr]; //@line 321 "xmltok_impl.c"
        var $51=(($50)&4294967295); //@line 321 "xmltok_impl.c"
        var $52=HEAP[$51]; //@line 321 "xmltok_impl.c"
        var $53=reSign(($52), 8, 0)!=0; //@line 321 "xmltok_impl.c"
        if ($53) { __label__ = 40; break; } else { __label__ = 13; break; } //@line 321 "xmltok_impl.c"
      case 13: // $bb12
        var $54=HEAP[$ptr_addr]; //@line 321 "xmltok_impl.c"
        var $55=(($54+1)&4294967295); //@line 321 "xmltok_impl.c"
        var $56=HEAP[$55]; //@line 321 "xmltok_impl.c"
        var $57=reSign(($56), 8, 0)!=93; //@line 321 "xmltok_impl.c"
        if ($57) { __label__ = 40; break; } else { __label__ = 14; break; } //@line 321 "xmltok_impl.c"
      case 14: // $bb13
        var $58=HEAP[$ptr_addr]; //@line 323 "xmltok_impl.c"
        var $59=(($58+2)&4294967295); //@line 323 "xmltok_impl.c"
        HEAP[$ptr_addr]=$59; //@line 323 "xmltok_impl.c"
        var $60=HEAP[$ptr_addr]; //@line 324 "xmltok_impl.c"
        var $61=HEAP[$end_addr]; //@line 324 "xmltok_impl.c"
        var $62=($60)==($61); //@line 324 "xmltok_impl.c"
        if ($62) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 324 "xmltok_impl.c"
      case 15: // $bb14
        HEAP[$0]=-1; //@line 325 "xmltok_impl.c"
        __label__ = 58; break; //@line 325 "xmltok_impl.c"
      case 16: // $bb15
        var $63=HEAP[$ptr_addr]; //@line 326 "xmltok_impl.c"
        var $64=(($63)&4294967295); //@line 326 "xmltok_impl.c"
        var $65=HEAP[$64]; //@line 326 "xmltok_impl.c"
        var $66=reSign(($65), 8, 0)!=0; //@line 326 "xmltok_impl.c"
        if ($66) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 326 "xmltok_impl.c"
      case 17: // $bb16
        var $67=HEAP[$ptr_addr]; //@line 326 "xmltok_impl.c"
        var $68=(($67+1)&4294967295); //@line 326 "xmltok_impl.c"
        var $69=HEAP[$68]; //@line 326 "xmltok_impl.c"
        var $70=reSign(($69), 8, 0)!=62; //@line 326 "xmltok_impl.c"
        if ($70) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 326 "xmltok_impl.c"
      case 18: // $bb17
        var $71=HEAP[$ptr_addr]; //@line 327 "xmltok_impl.c"
        var $72=(($71+-2)&4294967295); //@line 327 "xmltok_impl.c"
        HEAP[$ptr_addr]=$72; //@line 327 "xmltok_impl.c"
        __label__ = 40; break; //@line 327 "xmltok_impl.c"
      case 19: // $bb18
        var $73=HEAP[$ptr_addr]; //@line 330 "xmltok_impl.c"
        var $74=(($73+2)&4294967295); //@line 330 "xmltok_impl.c"
        var $75=HEAP[$nextTokPtr_addr]; //@line 330 "xmltok_impl.c"
        HEAP[$75]=$74; //@line 330 "xmltok_impl.c"
        HEAP[$0]=40; //@line 331 "xmltok_impl.c"
        __label__ = 58; break; //@line 331 "xmltok_impl.c"
      case 20: // $bb19
        var $76=HEAP[$ptr_addr]; //@line 333 "xmltok_impl.c"
        var $77=(($76+2)&4294967295); //@line 333 "xmltok_impl.c"
        HEAP[$ptr_addr]=$77; //@line 333 "xmltok_impl.c"
        var $78=HEAP[$ptr_addr]; //@line 334 "xmltok_impl.c"
        var $79=HEAP[$end_addr]; //@line 334 "xmltok_impl.c"
        var $80=($78)==($79); //@line 334 "xmltok_impl.c"
        if ($80) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 334 "xmltok_impl.c"
      case 21: // $bb20
        HEAP[$0]=-1; //@line 335 "xmltok_impl.c"
        __label__ = 58; break; //@line 335 "xmltok_impl.c"
      case 22: // $bb21
        var $81=HEAP[$ptr_addr]; //@line 336 "xmltok_impl.c"
        var $82=(($81)&4294967295); //@line 336 "xmltok_impl.c"
        var $83=HEAP[$82]; //@line 336 "xmltok_impl.c"
        var $84=reSign(($83), 8, 0)==0; //@line 336 "xmltok_impl.c"
        if ($84) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 336 "xmltok_impl.c"
      case 23: // $bb22
        var $85=HEAP[$enc_addr]; //@line 336 "xmltok_impl.c"
        var $86=$85; //@line 336 "xmltok_impl.c"
        var $87=HEAP[$ptr_addr]; //@line 336 "xmltok_impl.c"
        var $88=(($87+1)&4294967295); //@line 336 "xmltok_impl.c"
        var $89=HEAP[$88]; //@line 336 "xmltok_impl.c"
        var $90=unSign(($89), 8, 0); //@line 336 "xmltok_impl.c"
        var $91=(($86+72)&4294967295); //@line 336 "xmltok_impl.c"
        var $92=(($91+$90)&4294967295); //@line 336 "xmltok_impl.c"
        var $93=HEAP[$92]; //@line 336 "xmltok_impl.c"
        var $94=reSign(($93), 8, 0)==10; //@line 336 "xmltok_impl.c"
        var $95=unSign(($94), 1, 0); //@line 336 "xmltok_impl.c"
        HEAP[$iftmp_882]=$95; //@line 336 "xmltok_impl.c"
        __label__ = 25; break; //@line 336 "xmltok_impl.c"
      case 24: // $bb23
        var $96=HEAP[$ptr_addr]; //@line 336 "xmltok_impl.c"
        var $97=(($96+1)&4294967295); //@line 336 "xmltok_impl.c"
        var $98=HEAP[$97]; //@line 336 "xmltok_impl.c"
        var $99=reSign(($98), 8, 0); //@line 336 "xmltok_impl.c"
        var $100=HEAP[$ptr_addr]; //@line 336 "xmltok_impl.c"
        var $101=(($100)&4294967295); //@line 336 "xmltok_impl.c"
        var $102=HEAP[$101]; //@line 336 "xmltok_impl.c"
        var $103=reSign(($102), 8, 0); //@line 336 "xmltok_impl.c"
        var $104=((($103)) & 255); //@line 336 "xmltok_impl.c"
        var $105=((($99)) & 255); //@line 336 "xmltok_impl.c"
        var $106=_unicode_byte_type($104, $105); //@line 336 "xmltok_impl.c"
        var $107=((($106))|0)==10; //@line 336 "xmltok_impl.c"
        var $108=unSign(($107), 1, 0); //@line 336 "xmltok_impl.c"
        HEAP[$iftmp_882]=$108; //@line 336 "xmltok_impl.c"
        __label__ = 25; break; //@line 336 "xmltok_impl.c"
      case 25: // $bb24
        var $109=HEAP[$iftmp_882]; //@line 336 "xmltok_impl.c"
        var $toBool25=reSign(($109), 8, 0)!=0; //@line 336 "xmltok_impl.c"
        if ($toBool25) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 336 "xmltok_impl.c"
      case 26: // $bb26
        var $110=HEAP[$ptr_addr]; //@line 337 "xmltok_impl.c"
        var $111=(($110+2)&4294967295); //@line 337 "xmltok_impl.c"
        HEAP[$ptr_addr]=$111; //@line 337 "xmltok_impl.c"
        __label__ = 27; break; //@line 337 "xmltok_impl.c"
      case 27: // $bb27
        var $112=HEAP[$nextTokPtr_addr]; //@line 338 "xmltok_impl.c"
        var $113=HEAP[$ptr_addr]; //@line 338 "xmltok_impl.c"
        HEAP[$112]=$113; //@line 338 "xmltok_impl.c"
        HEAP[$0]=7; //@line 339 "xmltok_impl.c"
        __label__ = 58; break; //@line 339 "xmltok_impl.c"
      case 28: // $bb28
        var $114=HEAP[$ptr_addr]; //@line 341 "xmltok_impl.c"
        var $115=(($114+2)&4294967295); //@line 341 "xmltok_impl.c"
        var $116=HEAP[$nextTokPtr_addr]; //@line 341 "xmltok_impl.c"
        HEAP[$116]=$115; //@line 341 "xmltok_impl.c"
        HEAP[$0]=7; //@line 342 "xmltok_impl.c"
        __label__ = 58; break; //@line 342 "xmltok_impl.c"
      case 29: // $bb29
        var $117=HEAP[$end_addr]; //@line 343 "xmltok_impl.c"
        var $118=($117); //@line 343 "xmltok_impl.c"
        var $119=HEAP[$ptr_addr]; //@line 343 "xmltok_impl.c"
        var $120=($119); //@line 343 "xmltok_impl.c"
        var $121=((($118) - ($120))&4294967295); //@line 343 "xmltok_impl.c"
        var $122=((($121))|0) <= 1; //@line 343 "xmltok_impl.c"
        if ($122) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 343 "xmltok_impl.c"
      case 30: // $bb30
        HEAP[$0]=-2; //@line 343 "xmltok_impl.c"
        __label__ = 58; break; //@line 343 "xmltok_impl.c"
      case 31: // $bb31
        var $123=HEAP[$ptr_addr]; //@line 343 "xmltok_impl.c"
        var $124=(($123+2)&4294967295); //@line 343 "xmltok_impl.c"
        HEAP[$ptr_addr]=$124; //@line 343 "xmltok_impl.c"
        __label__ = 40; break; //@line 343 "xmltok_impl.c"
      case 32: // $bb32
        var $125=HEAP[$end_addr]; //@line 343 "xmltok_impl.c"
        var $126=($125); //@line 343 "xmltok_impl.c"
        var $127=HEAP[$ptr_addr]; //@line 343 "xmltok_impl.c"
        var $128=($127); //@line 343 "xmltok_impl.c"
        var $129=((($126) - ($128))&4294967295); //@line 343 "xmltok_impl.c"
        var $130=((($129))|0) <= 2; //@line 343 "xmltok_impl.c"
        if ($130) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 343 "xmltok_impl.c"
      case 33: // $bb33
        HEAP[$0]=-2; //@line 343 "xmltok_impl.c"
        __label__ = 58; break; //@line 343 "xmltok_impl.c"
      case 34: // $bb34
        var $131=HEAP[$ptr_addr]; //@line 343 "xmltok_impl.c"
        var $132=(($131+3)&4294967295); //@line 343 "xmltok_impl.c"
        HEAP[$ptr_addr]=$132; //@line 343 "xmltok_impl.c"
        __label__ = 40; break; //@line 343 "xmltok_impl.c"
      case 35: // $bb35
        var $133=HEAP[$end_addr]; //@line 343 "xmltok_impl.c"
        var $134=($133); //@line 343 "xmltok_impl.c"
        var $135=HEAP[$ptr_addr]; //@line 343 "xmltok_impl.c"
        var $136=($135); //@line 343 "xmltok_impl.c"
        var $137=((($134) - ($136))&4294967295); //@line 343 "xmltok_impl.c"
        var $138=((($137))|0) <= 3; //@line 343 "xmltok_impl.c"
        if ($138) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 343 "xmltok_impl.c"
      case 36: // $bb36
        HEAP[$0]=-2; //@line 343 "xmltok_impl.c"
        __label__ = 58; break; //@line 343 "xmltok_impl.c"
      case 37: // $bb37
        var $139=HEAP[$ptr_addr]; //@line 343 "xmltok_impl.c"
        var $140=(($139+4)&4294967295); //@line 343 "xmltok_impl.c"
        HEAP[$ptr_addr]=$140; //@line 343 "xmltok_impl.c"
        __label__ = 40; break; //@line 343 "xmltok_impl.c"
      case 38: // $bb38
        var $141=HEAP[$nextTokPtr_addr]; //@line 343 "xmltok_impl.c"
        var $142=HEAP[$ptr_addr]; //@line 343 "xmltok_impl.c"
        HEAP[$141]=$142; //@line 343 "xmltok_impl.c"
        HEAP[$0]=0; //@line 343 "xmltok_impl.c"
        __label__ = 58; break; //@line 343 "xmltok_impl.c"
      case 39: // $bb39
        var $143=HEAP[$ptr_addr]; //@line 345 "xmltok_impl.c"
        var $144=(($143+2)&4294967295); //@line 345 "xmltok_impl.c"
        HEAP[$ptr_addr]=$144; //@line 345 "xmltok_impl.c"
        __label__ = 40; break; //@line 345 "xmltok_impl.c"
      case 40: // $bb40
        __label__ = 56; break; //@line 345 "xmltok_impl.c"
      case 41: // $bb41
        var $145=HEAP[$ptr_addr]; //@line 349 "xmltok_impl.c"
        var $146=(($145)&4294967295); //@line 349 "xmltok_impl.c"
        var $147=HEAP[$146]; //@line 349 "xmltok_impl.c"
        var $148=reSign(($147), 8, 0)==0; //@line 349 "xmltok_impl.c"
        if ($148) { __label__ = 42; break; } else { __label__ = 43; break; } //@line 349 "xmltok_impl.c"
      case 42: // $bb42
        var $149=HEAP[$enc_addr]; //@line 349 "xmltok_impl.c"
        var $150=$149; //@line 349 "xmltok_impl.c"
        var $151=HEAP[$ptr_addr]; //@line 349 "xmltok_impl.c"
        var $152=(($151+1)&4294967295); //@line 349 "xmltok_impl.c"
        var $153=HEAP[$152]; //@line 349 "xmltok_impl.c"
        var $154=unSign(($153), 8, 0); //@line 349 "xmltok_impl.c"
        var $155=(($150+72)&4294967295); //@line 349 "xmltok_impl.c"
        var $156=(($155+$154)&4294967295); //@line 349 "xmltok_impl.c"
        var $157=HEAP[$156]; //@line 349 "xmltok_impl.c"
        var $158=unSign(($157), 8, 0); //@line 349 "xmltok_impl.c"
        HEAP[$iftmp_890]=$158; //@line 349 "xmltok_impl.c"
        __label__ = 44; break; //@line 349 "xmltok_impl.c"
      case 43: // $bb43
        var $159=HEAP[$ptr_addr]; //@line 349 "xmltok_impl.c"
        var $160=(($159+1)&4294967295); //@line 349 "xmltok_impl.c"
        var $161=HEAP[$160]; //@line 349 "xmltok_impl.c"
        var $162=reSign(($161), 8, 0); //@line 349 "xmltok_impl.c"
        var $163=HEAP[$ptr_addr]; //@line 349 "xmltok_impl.c"
        var $164=(($163)&4294967295); //@line 349 "xmltok_impl.c"
        var $165=HEAP[$164]; //@line 349 "xmltok_impl.c"
        var $166=reSign(($165), 8, 0); //@line 349 "xmltok_impl.c"
        var $167=((($166)) & 255); //@line 349 "xmltok_impl.c"
        var $168=((($162)) & 255); //@line 349 "xmltok_impl.c"
        var $169=_unicode_byte_type($167, $168); //@line 349 "xmltok_impl.c"
        HEAP[$iftmp_890]=$169; //@line 349 "xmltok_impl.c"
        __label__ = 44; break; //@line 349 "xmltok_impl.c"
      case 44: // $bb44
        var $170=HEAP[$iftmp_890]; //@line 349 "xmltok_impl.c"
        if ($170 == 0) {
          __label__ = 54; break;
        }
        else if ($170 == 1) {
          __label__ = 54; break;
        }
        else if ($170 == 4) {
          __label__ = 54; break;
        }
        else if ($170 == 5) {
          __label__ = 45; break;
        }
        else if ($170 == 6) {
          __label__ = 48; break;
        }
        else if ($170 == 7) {
          __label__ = 51; break;
        }
        else if ($170 == 8) {
          __label__ = 54; break;
        }
        else if ($170 == 9) {
          __label__ = 54; break;
        }
        else if ($170 == 10) {
          __label__ = 54; break;
        }
        else {
        __label__ = 55; break;
        }
        
      case 45: // $bb45
        var $171=HEAP[$end_addr]; //@line 358 "xmltok_impl.c"
        var $172=($171); //@line 358 "xmltok_impl.c"
        var $173=HEAP[$ptr_addr]; //@line 358 "xmltok_impl.c"
        var $174=($173); //@line 358 "xmltok_impl.c"
        var $175=((($172) - ($174))&4294967295); //@line 358 "xmltok_impl.c"
        var $176=((($175))|0) <= 1; //@line 358 "xmltok_impl.c"
        if ($176) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 358 "xmltok_impl.c"
      case 46: // $bb46
        var $177=HEAP[$nextTokPtr_addr]; //@line 358 "xmltok_impl.c"
        var $178=HEAP[$ptr_addr]; //@line 358 "xmltok_impl.c"
        HEAP[$177]=$178; //@line 358 "xmltok_impl.c"
        HEAP[$0]=6; //@line 358 "xmltok_impl.c"
        __label__ = 58; break; //@line 358 "xmltok_impl.c"
      case 47: // $bb47
        var $179=HEAP[$ptr_addr]; //@line 358 "xmltok_impl.c"
        var $180=(($179+2)&4294967295); //@line 358 "xmltok_impl.c"
        HEAP[$ptr_addr]=$180; //@line 358 "xmltok_impl.c"
        __label__ = 56; break; //@line 358 "xmltok_impl.c"
      case 48: // $bb48
        var $181=HEAP[$end_addr]; //@line 358 "xmltok_impl.c"
        var $182=($181); //@line 358 "xmltok_impl.c"
        var $183=HEAP[$ptr_addr]; //@line 358 "xmltok_impl.c"
        var $184=($183); //@line 358 "xmltok_impl.c"
        var $185=((($182) - ($184))&4294967295); //@line 358 "xmltok_impl.c"
        var $186=((($185))|0) <= 2; //@line 358 "xmltok_impl.c"
        if ($186) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 358 "xmltok_impl.c"
      case 49: // $bb49
        var $187=HEAP[$nextTokPtr_addr]; //@line 358 "xmltok_impl.c"
        var $188=HEAP[$ptr_addr]; //@line 358 "xmltok_impl.c"
        HEAP[$187]=$188; //@line 358 "xmltok_impl.c"
        HEAP[$0]=6; //@line 358 "xmltok_impl.c"
        __label__ = 58; break; //@line 358 "xmltok_impl.c"
      case 50: // $bb50
        var $189=HEAP[$ptr_addr]; //@line 358 "xmltok_impl.c"
        var $190=(($189+3)&4294967295); //@line 358 "xmltok_impl.c"
        HEAP[$ptr_addr]=$190; //@line 358 "xmltok_impl.c"
        __label__ = 56; break; //@line 358 "xmltok_impl.c"
      case 51: // $bb51
        var $191=HEAP[$end_addr]; //@line 358 "xmltok_impl.c"
        var $192=($191); //@line 358 "xmltok_impl.c"
        var $193=HEAP[$ptr_addr]; //@line 358 "xmltok_impl.c"
        var $194=($193); //@line 358 "xmltok_impl.c"
        var $195=((($192) - ($194))&4294967295); //@line 358 "xmltok_impl.c"
        var $196=((($195))|0) <= 3; //@line 358 "xmltok_impl.c"
        if ($196) { __label__ = 52; break; } else { __label__ = 53; break; } //@line 358 "xmltok_impl.c"
      case 52: // $bb52
        var $197=HEAP[$nextTokPtr_addr]; //@line 358 "xmltok_impl.c"
        var $198=HEAP[$ptr_addr]; //@line 358 "xmltok_impl.c"
        HEAP[$197]=$198; //@line 358 "xmltok_impl.c"
        HEAP[$0]=6; //@line 358 "xmltok_impl.c"
        __label__ = 58; break; //@line 358 "xmltok_impl.c"
      case 53: // $bb53
        var $199=HEAP[$ptr_addr]; //@line 358 "xmltok_impl.c"
        var $200=(($199+4)&4294967295); //@line 358 "xmltok_impl.c"
        HEAP[$ptr_addr]=$200; //@line 358 "xmltok_impl.c"
        __label__ = 56; break; //@line 358 "xmltok_impl.c"
      case 54: // $bb54
        var $201=HEAP[$nextTokPtr_addr]; //@line 366 "xmltok_impl.c"
        var $202=HEAP[$ptr_addr]; //@line 366 "xmltok_impl.c"
        HEAP[$201]=$202; //@line 366 "xmltok_impl.c"
        HEAP[$0]=6; //@line 367 "xmltok_impl.c"
        __label__ = 58; break; //@line 367 "xmltok_impl.c"
      case 55: // $bb55
        var $203=HEAP[$ptr_addr]; //@line 369 "xmltok_impl.c"
        var $204=(($203+2)&4294967295); //@line 369 "xmltok_impl.c"
        HEAP[$ptr_addr]=$204; //@line 369 "xmltok_impl.c"
        __label__ = 56; break; //@line 369 "xmltok_impl.c"
      case 56: // $bb56
        var $205=HEAP[$ptr_addr]; //@line 348 "xmltok_impl.c"
        var $206=HEAP[$end_addr]; //@line 348 "xmltok_impl.c"
        var $207=($205)!=($206); //@line 348 "xmltok_impl.c"
        if ($207) { __label__ = 41; break; } else { __label__ = 57; break; } //@line 348 "xmltok_impl.c"
      case 57: // $bb57
        var $208=HEAP[$nextTokPtr_addr]; //@line 373 "xmltok_impl.c"
        var $209=HEAP[$ptr_addr]; //@line 373 "xmltok_impl.c"
        HEAP[$208]=$209; //@line 373 "xmltok_impl.c"
        HEAP[$0]=6; //@line 374 "xmltok_impl.c"
        __label__ = 58; break; //@line 374 "xmltok_impl.c"
      case 58: // $bb58
        var $210=HEAP[$0]; //@line 306 "xmltok_impl.c"
        HEAP[$retval]=$210; //@line 306 "xmltok_impl.c"
        __label__ = 59; break; //@line 306 "xmltok_impl.c"
      case 59: // $return
        var $retval59=HEAP[$retval]; //@line 306 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval59; //@line 306 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_scanEndTag($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_914=__stackBase__+20;
        var $iftmp_906=__stackBase__+24;
        var $iftmp_898=__stackBase__+28;
        var $0=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 383 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 383 "xmltok_impl.c"
        var $3=($1)==($2); //@line 383 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 383 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 384 "xmltok_impl.c"
        __label__ = 49; break; //@line 384 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$ptr_addr]; //@line 385 "xmltok_impl.c"
        var $5=(($4)&4294967295); //@line 385 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 385 "xmltok_impl.c"
        var $7=reSign(($6), 8, 0)==0; //@line 385 "xmltok_impl.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 385 "xmltok_impl.c"
      case 3: // $bb2
        var $8=HEAP[$enc_addr]; //@line 385 "xmltok_impl.c"
        var $9=$8; //@line 385 "xmltok_impl.c"
        var $10=HEAP[$ptr_addr]; //@line 385 "xmltok_impl.c"
        var $11=(($10+1)&4294967295); //@line 385 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 385 "xmltok_impl.c"
        var $13=unSign(($12), 8, 0); //@line 385 "xmltok_impl.c"
        var $14=(($9+72)&4294967295); //@line 385 "xmltok_impl.c"
        var $15=(($14+$13)&4294967295); //@line 385 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 385 "xmltok_impl.c"
        var $17=unSign(($16), 8, 0); //@line 385 "xmltok_impl.c"
        HEAP[$iftmp_898]=$17; //@line 385 "xmltok_impl.c"
        __label__ = 5; break; //@line 385 "xmltok_impl.c"
      case 4: // $bb3
        var $18=HEAP[$ptr_addr]; //@line 385 "xmltok_impl.c"
        var $19=(($18+1)&4294967295); //@line 385 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 385 "xmltok_impl.c"
        var $21=reSign(($20), 8, 0); //@line 385 "xmltok_impl.c"
        var $22=HEAP[$ptr_addr]; //@line 385 "xmltok_impl.c"
        var $23=(($22)&4294967295); //@line 385 "xmltok_impl.c"
        var $24=HEAP[$23]; //@line 385 "xmltok_impl.c"
        var $25=reSign(($24), 8, 0); //@line 385 "xmltok_impl.c"
        var $26=((($25)) & 255); //@line 385 "xmltok_impl.c"
        var $27=((($21)) & 255); //@line 385 "xmltok_impl.c"
        var $28=_unicode_byte_type($26, $27); //@line 385 "xmltok_impl.c"
        HEAP[$iftmp_898]=$28; //@line 385 "xmltok_impl.c"
        __label__ = 5; break; //@line 385 "xmltok_impl.c"
      case 5: // $bb4
        var $29=HEAP[$iftmp_898]; //@line 385 "xmltok_impl.c"
        if ($29 == 5) {
          __label__ = 9; break;
        }
        else if ($29 == 6) {
          __label__ = 12; break;
        }
        else if ($29 == 7) {
          __label__ = 15; break;
        }
        else if ($29 == 22) {
          __label__ = 8; break;
        }
        else if ($29 == 24) {
          __label__ = 8; break;
        }
        else if ($29 == 29) {
          __label__ = 6; break;
        }
        else {
        __label__ = 18; break;
        }
        
      case 6: // $bb5
        var $30=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        var $31=(($30)&4294967295); //@line 386 "xmltok_impl.c"
        var $32=HEAP[$31]; //@line 386 "xmltok_impl.c"
        var $33=unSign(($32), 8, 0); //@line 386 "xmltok_impl.c"
        var $34=((_nmstrtPages+$33)&4294967295); //@line 386 "xmltok_impl.c"
        var $35=HEAP[$34]; //@line 386 "xmltok_impl.c"
        var $36=unSign(($35), 8, 0); //@line 386 "xmltok_impl.c"
        var $37=($36) << 3; //@line 386 "xmltok_impl.c"
        var $38=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        var $39=(($38+1)&4294967295); //@line 386 "xmltok_impl.c"
        var $40=HEAP[$39]; //@line 386 "xmltok_impl.c"
        var $41=unSign(($40), 8, 0) >>> 5; //@line 386 "xmltok_impl.c"
        var $42=unSign(($41), 8, 0); //@line 386 "xmltok_impl.c"
        var $43=((($37) + ($42))&4294967295); //@line 386 "xmltok_impl.c"
        var $44=((_namingBitmap+$43*4)&4294967295); //@line 386 "xmltok_impl.c"
        var $45=HEAP[$44]; //@line 386 "xmltok_impl.c"
        var $46=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        var $47=(($46+1)&4294967295); //@line 386 "xmltok_impl.c"
        var $48=HEAP[$47]; //@line 386 "xmltok_impl.c"
        var $49=unSign(($48), 8, 0); //@line 386 "xmltok_impl.c"
        var $50=($49) & 31; //@line 386 "xmltok_impl.c"
        var $51=1 << ($50); //@line 386 "xmltok_impl.c"
        var $52=($45) & ($51); //@line 386 "xmltok_impl.c"
        var $53=((($52))|0)==0; //@line 386 "xmltok_impl.c"
        if ($53) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 386 "xmltok_impl.c"
      case 7: // $bb6
        var $54=HEAP[$nextTokPtr_addr]; //@line 386 "xmltok_impl.c"
        var $55=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        HEAP[$54]=$55; //@line 386 "xmltok_impl.c"
        HEAP[$0]=0; //@line 386 "xmltok_impl.c"
        __label__ = 49; break; //@line 386 "xmltok_impl.c"
      case 8: // $bb7
        var $56=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        var $57=(($56+2)&4294967295); //@line 386 "xmltok_impl.c"
        HEAP[$ptr_addr]=$57; //@line 386 "xmltok_impl.c"
        __label__ = 47; break; //@line 386 "xmltok_impl.c"
      case 9: // $bb8
        var $58=HEAP[$end_addr]; //@line 386 "xmltok_impl.c"
        var $59=($58); //@line 386 "xmltok_impl.c"
        var $60=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        var $61=($60); //@line 386 "xmltok_impl.c"
        var $62=((($59) - ($61))&4294967295); //@line 386 "xmltok_impl.c"
        var $63=((($62))|0) <= 1; //@line 386 "xmltok_impl.c"
        if ($63) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 386 "xmltok_impl.c"
      case 10: // $bb9
        HEAP[$0]=-2; //@line 386 "xmltok_impl.c"
        __label__ = 49; break; //@line 386 "xmltok_impl.c"
      case 11: // $bb10
        var $64=HEAP[$nextTokPtr_addr]; //@line 386 "xmltok_impl.c"
        var $65=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        HEAP[$64]=$65; //@line 386 "xmltok_impl.c"
        HEAP[$0]=0; //@line 386 "xmltok_impl.c"
        __label__ = 49; break; //@line 386 "xmltok_impl.c"
      case 12: // $bb11
        var $66=HEAP[$end_addr]; //@line 386 "xmltok_impl.c"
        var $67=($66); //@line 386 "xmltok_impl.c"
        var $68=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        var $69=($68); //@line 386 "xmltok_impl.c"
        var $70=((($67) - ($69))&4294967295); //@line 386 "xmltok_impl.c"
        var $71=((($70))|0) <= 2; //@line 386 "xmltok_impl.c"
        if ($71) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 386 "xmltok_impl.c"
      case 13: // $bb12
        HEAP[$0]=-2; //@line 386 "xmltok_impl.c"
        __label__ = 49; break; //@line 386 "xmltok_impl.c"
      case 14: // $bb13
        var $72=HEAP[$nextTokPtr_addr]; //@line 386 "xmltok_impl.c"
        var $73=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        HEAP[$72]=$73; //@line 386 "xmltok_impl.c"
        HEAP[$0]=0; //@line 386 "xmltok_impl.c"
        __label__ = 49; break; //@line 386 "xmltok_impl.c"
      case 15: // $bb14
        var $74=HEAP[$end_addr]; //@line 386 "xmltok_impl.c"
        var $75=($74); //@line 386 "xmltok_impl.c"
        var $76=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        var $77=($76); //@line 386 "xmltok_impl.c"
        var $78=((($75) - ($77))&4294967295); //@line 386 "xmltok_impl.c"
        var $79=((($78))|0) <= 3; //@line 386 "xmltok_impl.c"
        if ($79) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 386 "xmltok_impl.c"
      case 16: // $bb15
        HEAP[$0]=-2; //@line 386 "xmltok_impl.c"
        __label__ = 49; break; //@line 386 "xmltok_impl.c"
      case 17: // $bb16
        var $80=HEAP[$nextTokPtr_addr]; //@line 386 "xmltok_impl.c"
        var $81=HEAP[$ptr_addr]; //@line 386 "xmltok_impl.c"
        HEAP[$80]=$81; //@line 386 "xmltok_impl.c"
        HEAP[$0]=0; //@line 386 "xmltok_impl.c"
        __label__ = 49; break; //@line 386 "xmltok_impl.c"
      case 18: // $bb17
        var $82=HEAP[$nextTokPtr_addr]; //@line 388 "xmltok_impl.c"
        var $83=HEAP[$ptr_addr]; //@line 388 "xmltok_impl.c"
        HEAP[$82]=$83; //@line 388 "xmltok_impl.c"
        HEAP[$0]=0; //@line 389 "xmltok_impl.c"
        __label__ = 49; break; //@line 389 "xmltok_impl.c"
      case 19: // $bb18
        var $84=HEAP[$ptr_addr]; //@line 392 "xmltok_impl.c"
        var $85=(($84)&4294967295); //@line 392 "xmltok_impl.c"
        var $86=HEAP[$85]; //@line 392 "xmltok_impl.c"
        var $87=reSign(($86), 8, 0)==0; //@line 392 "xmltok_impl.c"
        if ($87) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 392 "xmltok_impl.c"
      case 20: // $bb19
        var $88=HEAP[$enc_addr]; //@line 392 "xmltok_impl.c"
        var $89=$88; //@line 392 "xmltok_impl.c"
        var $90=HEAP[$ptr_addr]; //@line 392 "xmltok_impl.c"
        var $91=(($90+1)&4294967295); //@line 392 "xmltok_impl.c"
        var $92=HEAP[$91]; //@line 392 "xmltok_impl.c"
        var $93=unSign(($92), 8, 0); //@line 392 "xmltok_impl.c"
        var $94=(($89+72)&4294967295); //@line 392 "xmltok_impl.c"
        var $95=(($94+$93)&4294967295); //@line 392 "xmltok_impl.c"
        var $96=HEAP[$95]; //@line 392 "xmltok_impl.c"
        var $97=unSign(($96), 8, 0); //@line 392 "xmltok_impl.c"
        HEAP[$iftmp_906]=$97; //@line 392 "xmltok_impl.c"
        __label__ = 22; break; //@line 392 "xmltok_impl.c"
      case 21: // $bb20
        var $98=HEAP[$ptr_addr]; //@line 392 "xmltok_impl.c"
        var $99=(($98+1)&4294967295); //@line 392 "xmltok_impl.c"
        var $100=HEAP[$99]; //@line 392 "xmltok_impl.c"
        var $101=reSign(($100), 8, 0); //@line 392 "xmltok_impl.c"
        var $102=HEAP[$ptr_addr]; //@line 392 "xmltok_impl.c"
        var $103=(($102)&4294967295); //@line 392 "xmltok_impl.c"
        var $104=HEAP[$103]; //@line 392 "xmltok_impl.c"
        var $105=reSign(($104), 8, 0); //@line 392 "xmltok_impl.c"
        var $106=((($105)) & 255); //@line 392 "xmltok_impl.c"
        var $107=((($101)) & 255); //@line 392 "xmltok_impl.c"
        var $108=_unicode_byte_type($106, $107); //@line 392 "xmltok_impl.c"
        HEAP[$iftmp_906]=$108; //@line 392 "xmltok_impl.c"
        __label__ = 22; break; //@line 392 "xmltok_impl.c"
      case 22: // $bb21
        var $109=HEAP[$iftmp_906]; //@line 392 "xmltok_impl.c"
        if ($109 == 5) {
          __label__ = 26; break;
        }
        else if ($109 == 6) {
          __label__ = 29; break;
        }
        else if ($109 == 7) {
          __label__ = 32; break;
        }
        else if ($109 == 9) {
          __label__ = 35; break;
        }
        else if ($109 == 10) {
          __label__ = 35; break;
        }
        else if ($109 == 11) {
          __label__ = 45; break;
        }
        else if ($109 == 21) {
          __label__ = 35; break;
        }
        else if ($109 == 22) {
          __label__ = 25; break;
        }
        else if ($109 == 24) {
          __label__ = 25; break;
        }
        else if ($109 == 25) {
          __label__ = 25; break;
        }
        else if ($109 == 26) {
          __label__ = 25; break;
        }
        else if ($109 == 27) {
          __label__ = 25; break;
        }
        else if ($109 == 29) {
          __label__ = 23; break;
        }
        else {
        __label__ = 46; break;
        }
        
      case 23: // $bb22
        var $110=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        var $111=(($110)&4294967295); //@line 393 "xmltok_impl.c"
        var $112=HEAP[$111]; //@line 393 "xmltok_impl.c"
        var $113=unSign(($112), 8, 0); //@line 393 "xmltok_impl.c"
        var $114=((_namePages+$113)&4294967295); //@line 393 "xmltok_impl.c"
        var $115=HEAP[$114]; //@line 393 "xmltok_impl.c"
        var $116=unSign(($115), 8, 0); //@line 393 "xmltok_impl.c"
        var $117=($116) << 3; //@line 393 "xmltok_impl.c"
        var $118=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        var $119=(($118+1)&4294967295); //@line 393 "xmltok_impl.c"
        var $120=HEAP[$119]; //@line 393 "xmltok_impl.c"
        var $121=unSign(($120), 8, 0) >>> 5; //@line 393 "xmltok_impl.c"
        var $122=unSign(($121), 8, 0); //@line 393 "xmltok_impl.c"
        var $123=((($117) + ($122))&4294967295); //@line 393 "xmltok_impl.c"
        var $124=((_namingBitmap+$123*4)&4294967295); //@line 393 "xmltok_impl.c"
        var $125=HEAP[$124]; //@line 393 "xmltok_impl.c"
        var $126=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        var $127=(($126+1)&4294967295); //@line 393 "xmltok_impl.c"
        var $128=HEAP[$127]; //@line 393 "xmltok_impl.c"
        var $129=unSign(($128), 8, 0); //@line 393 "xmltok_impl.c"
        var $130=($129) & 31; //@line 393 "xmltok_impl.c"
        var $131=1 << ($130); //@line 393 "xmltok_impl.c"
        var $132=($125) & ($131); //@line 393 "xmltok_impl.c"
        var $133=((($132))|0)==0; //@line 393 "xmltok_impl.c"
        if ($133) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 393 "xmltok_impl.c"
      case 24: // $bb23
        var $134=HEAP[$nextTokPtr_addr]; //@line 393 "xmltok_impl.c"
        var $135=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        HEAP[$134]=$135; //@line 393 "xmltok_impl.c"
        HEAP[$0]=0; //@line 393 "xmltok_impl.c"
        __label__ = 49; break; //@line 393 "xmltok_impl.c"
      case 25: // $bb24
        var $136=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        var $137=(($136+2)&4294967295); //@line 393 "xmltok_impl.c"
        HEAP[$ptr_addr]=$137; //@line 393 "xmltok_impl.c"
        __label__ = 47; break; //@line 393 "xmltok_impl.c"
      case 26: // $bb25
        var $138=HEAP[$end_addr]; //@line 393 "xmltok_impl.c"
        var $139=($138); //@line 393 "xmltok_impl.c"
        var $140=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        var $141=($140); //@line 393 "xmltok_impl.c"
        var $142=((($139) - ($141))&4294967295); //@line 393 "xmltok_impl.c"
        var $143=((($142))|0) <= 1; //@line 393 "xmltok_impl.c"
        if ($143) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 393 "xmltok_impl.c"
      case 27: // $bb26
        HEAP[$0]=-2; //@line 393 "xmltok_impl.c"
        __label__ = 49; break; //@line 393 "xmltok_impl.c"
      case 28: // $bb27
        var $144=HEAP[$nextTokPtr_addr]; //@line 393 "xmltok_impl.c"
        var $145=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        HEAP[$144]=$145; //@line 393 "xmltok_impl.c"
        HEAP[$0]=0; //@line 393 "xmltok_impl.c"
        __label__ = 49; break; //@line 393 "xmltok_impl.c"
      case 29: // $bb28
        var $146=HEAP[$end_addr]; //@line 393 "xmltok_impl.c"
        var $147=($146); //@line 393 "xmltok_impl.c"
        var $148=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        var $149=($148); //@line 393 "xmltok_impl.c"
        var $150=((($147) - ($149))&4294967295); //@line 393 "xmltok_impl.c"
        var $151=((($150))|0) <= 2; //@line 393 "xmltok_impl.c"
        if ($151) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 393 "xmltok_impl.c"
      case 30: // $bb29
        HEAP[$0]=-2; //@line 393 "xmltok_impl.c"
        __label__ = 49; break; //@line 393 "xmltok_impl.c"
      case 31: // $bb30
        var $152=HEAP[$nextTokPtr_addr]; //@line 393 "xmltok_impl.c"
        var $153=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        HEAP[$152]=$153; //@line 393 "xmltok_impl.c"
        HEAP[$0]=0; //@line 393 "xmltok_impl.c"
        __label__ = 49; break; //@line 393 "xmltok_impl.c"
      case 32: // $bb31
        var $154=HEAP[$end_addr]; //@line 393 "xmltok_impl.c"
        var $155=($154); //@line 393 "xmltok_impl.c"
        var $156=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        var $157=($156); //@line 393 "xmltok_impl.c"
        var $158=((($155) - ($157))&4294967295); //@line 393 "xmltok_impl.c"
        var $159=((($158))|0) <= 3; //@line 393 "xmltok_impl.c"
        if ($159) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 393 "xmltok_impl.c"
      case 33: // $bb32
        HEAP[$0]=-2; //@line 393 "xmltok_impl.c"
        __label__ = 49; break; //@line 393 "xmltok_impl.c"
      case 34: // $bb33
        var $160=HEAP[$nextTokPtr_addr]; //@line 393 "xmltok_impl.c"
        var $161=HEAP[$ptr_addr]; //@line 393 "xmltok_impl.c"
        HEAP[$160]=$161; //@line 393 "xmltok_impl.c"
        HEAP[$0]=0; //@line 393 "xmltok_impl.c"
        __label__ = 49; break; //@line 393 "xmltok_impl.c"
      case 35: // $bb34
        var $162=HEAP[$ptr_addr]; //@line 395 "xmltok_impl.c"
        var $163=(($162+2)&4294967295); //@line 395 "xmltok_impl.c"
        HEAP[$ptr_addr]=$163; //@line 395 "xmltok_impl.c"
        __label__ = 43; break; //@line 395 "xmltok_impl.c"
      case 36: // $bb35
        var $164=HEAP[$ptr_addr]; //@line 396 "xmltok_impl.c"
        var $165=(($164)&4294967295); //@line 396 "xmltok_impl.c"
        var $166=HEAP[$165]; //@line 396 "xmltok_impl.c"
        var $167=reSign(($166), 8, 0)==0; //@line 396 "xmltok_impl.c"
        if ($167) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 396 "xmltok_impl.c"
      case 37: // $bb36
        var $168=HEAP[$enc_addr]; //@line 396 "xmltok_impl.c"
        var $169=$168; //@line 396 "xmltok_impl.c"
        var $170=HEAP[$ptr_addr]; //@line 396 "xmltok_impl.c"
        var $171=(($170+1)&4294967295); //@line 396 "xmltok_impl.c"
        var $172=HEAP[$171]; //@line 396 "xmltok_impl.c"
        var $173=unSign(($172), 8, 0); //@line 396 "xmltok_impl.c"
        var $174=(($169+72)&4294967295); //@line 396 "xmltok_impl.c"
        var $175=(($174+$173)&4294967295); //@line 396 "xmltok_impl.c"
        var $176=HEAP[$175]; //@line 396 "xmltok_impl.c"
        var $177=unSign(($176), 8, 0); //@line 396 "xmltok_impl.c"
        HEAP[$iftmp_914]=$177; //@line 396 "xmltok_impl.c"
        __label__ = 39; break; //@line 396 "xmltok_impl.c"
      case 38: // $bb37
        var $178=HEAP[$ptr_addr]; //@line 396 "xmltok_impl.c"
        var $179=(($178+1)&4294967295); //@line 396 "xmltok_impl.c"
        var $180=HEAP[$179]; //@line 396 "xmltok_impl.c"
        var $181=reSign(($180), 8, 0); //@line 396 "xmltok_impl.c"
        var $182=HEAP[$ptr_addr]; //@line 396 "xmltok_impl.c"
        var $183=(($182)&4294967295); //@line 396 "xmltok_impl.c"
        var $184=HEAP[$183]; //@line 396 "xmltok_impl.c"
        var $185=reSign(($184), 8, 0); //@line 396 "xmltok_impl.c"
        var $186=((($185)) & 255); //@line 396 "xmltok_impl.c"
        var $187=((($181)) & 255); //@line 396 "xmltok_impl.c"
        var $188=_unicode_byte_type($186, $187); //@line 396 "xmltok_impl.c"
        HEAP[$iftmp_914]=$188; //@line 396 "xmltok_impl.c"
        __label__ = 39; break; //@line 396 "xmltok_impl.c"
      case 39: // $bb38
        var $189=HEAP[$iftmp_914]; //@line 396 "xmltok_impl.c"
        if ($189 == 9) {
          __label__ = 40; break;
        }
        else if ($189 == 10) {
          __label__ = 40; break;
        }
        else if ($189 == 11) {
          __label__ = 41; break;
        }
        else if ($189 == 21) {
          __label__ = 40; break;
        }
        else {
        __label__ = 42; break;
        }
        
      case 40: // $bb39
        var $190=HEAP[$ptr_addr]; //@line 395 "xmltok_impl.c"
        var $191=(($190+2)&4294967295); //@line 395 "xmltok_impl.c"
        HEAP[$ptr_addr]=$191; //@line 395 "xmltok_impl.c"
        __label__ = 43; break; //@line 395 "xmltok_impl.c"
      case 41: // $bb40
        var $192=HEAP[$ptr_addr]; //@line 400 "xmltok_impl.c"
        var $193=(($192+2)&4294967295); //@line 400 "xmltok_impl.c"
        var $194=HEAP[$nextTokPtr_addr]; //@line 400 "xmltok_impl.c"
        HEAP[$194]=$193; //@line 400 "xmltok_impl.c"
        HEAP[$0]=5; //@line 401 "xmltok_impl.c"
        __label__ = 49; break; //@line 401 "xmltok_impl.c"
      case 42: // $bb41
        var $195=HEAP[$nextTokPtr_addr]; //@line 403 "xmltok_impl.c"
        var $196=HEAP[$ptr_addr]; //@line 403 "xmltok_impl.c"
        HEAP[$195]=$196; //@line 403 "xmltok_impl.c"
        HEAP[$0]=0; //@line 404 "xmltok_impl.c"
        __label__ = 49; break; //@line 404 "xmltok_impl.c"
      case 43: // $bb42
        var $197=HEAP[$ptr_addr]; //@line 395 "xmltok_impl.c"
        var $198=HEAP[$end_addr]; //@line 395 "xmltok_impl.c"
        var $199=($197)!=($198); //@line 395 "xmltok_impl.c"
        if ($199) { __label__ = 36; break; } else { __label__ = 44; break; } //@line 395 "xmltok_impl.c"
      case 44: // $bb43
        HEAP[$0]=-1; //@line 407 "xmltok_impl.c"
        __label__ = 49; break; //@line 407 "xmltok_impl.c"
      case 45: // $bb44
        var $200=HEAP[$ptr_addr]; //@line 416 "xmltok_impl.c"
        var $201=(($200+2)&4294967295); //@line 416 "xmltok_impl.c"
        var $202=HEAP[$nextTokPtr_addr]; //@line 416 "xmltok_impl.c"
        HEAP[$202]=$201; //@line 416 "xmltok_impl.c"
        HEAP[$0]=5; //@line 417 "xmltok_impl.c"
        __label__ = 49; break; //@line 417 "xmltok_impl.c"
      case 46: // $bb45
        var $203=HEAP[$nextTokPtr_addr]; //@line 419 "xmltok_impl.c"
        var $204=HEAP[$ptr_addr]; //@line 419 "xmltok_impl.c"
        HEAP[$203]=$204; //@line 419 "xmltok_impl.c"
        HEAP[$0]=0; //@line 420 "xmltok_impl.c"
        __label__ = 49; break; //@line 420 "xmltok_impl.c"
      case 47: // $bb46
        var $205=HEAP[$ptr_addr]; //@line 391 "xmltok_impl.c"
        var $206=HEAP[$end_addr]; //@line 391 "xmltok_impl.c"
        var $207=($205)!=($206); //@line 391 "xmltok_impl.c"
        if ($207) { __label__ = 19; break; } else { __label__ = 48; break; } //@line 391 "xmltok_impl.c"
      case 48: // $bb47
        HEAP[$0]=-1; //@line 423 "xmltok_impl.c"
        __label__ = 49; break; //@line 423 "xmltok_impl.c"
      case 49: // $bb48
        var $208=HEAP[$0]; //@line 384 "xmltok_impl.c"
        HEAP[$retval]=$208; //@line 384 "xmltok_impl.c"
        __label__ = 50; break; //@line 384 "xmltok_impl.c"
      case 50: // $return
        var $retval49=HEAP[$retval]; //@line 384 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval49; //@line 384 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_scanHexCharRef($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_918=__stackBase__+20;
        var $0=__stackBase__+24;
        var $iftmp_916=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 432 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 432 "xmltok_impl.c"
        var $3=($1)!=($2); //@line 432 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 15; break; } //@line 432 "xmltok_impl.c"
      case 1: // $bb
        var $4=HEAP[$ptr_addr]; //@line 433 "xmltok_impl.c"
        var $5=(($4)&4294967295); //@line 433 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 433 "xmltok_impl.c"
        var $7=reSign(($6), 8, 0)==0; //@line 433 "xmltok_impl.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 433 "xmltok_impl.c"
      case 2: // $bb1
        var $8=HEAP[$enc_addr]; //@line 433 "xmltok_impl.c"
        var $9=$8; //@line 433 "xmltok_impl.c"
        var $10=HEAP[$ptr_addr]; //@line 433 "xmltok_impl.c"
        var $11=(($10+1)&4294967295); //@line 433 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 433 "xmltok_impl.c"
        var $13=unSign(($12), 8, 0); //@line 433 "xmltok_impl.c"
        var $14=(($9+72)&4294967295); //@line 433 "xmltok_impl.c"
        var $15=(($14+$13)&4294967295); //@line 433 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 433 "xmltok_impl.c"
        var $17=unSign(($16), 8, 0); //@line 433 "xmltok_impl.c"
        HEAP[$iftmp_916]=$17; //@line 433 "xmltok_impl.c"
        __label__ = 4; break; //@line 433 "xmltok_impl.c"
      case 3: // $bb2
        var $18=HEAP[$ptr_addr]; //@line 433 "xmltok_impl.c"
        var $19=(($18+1)&4294967295); //@line 433 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 433 "xmltok_impl.c"
        var $21=reSign(($20), 8, 0); //@line 433 "xmltok_impl.c"
        var $22=HEAP[$ptr_addr]; //@line 433 "xmltok_impl.c"
        var $23=(($22)&4294967295); //@line 433 "xmltok_impl.c"
        var $24=HEAP[$23]; //@line 433 "xmltok_impl.c"
        var $25=reSign(($24), 8, 0); //@line 433 "xmltok_impl.c"
        var $26=((($25)) & 255); //@line 433 "xmltok_impl.c"
        var $27=((($21)) & 255); //@line 433 "xmltok_impl.c"
        var $28=_unicode_byte_type($26, $27); //@line 433 "xmltok_impl.c"
        HEAP[$iftmp_916]=$28; //@line 433 "xmltok_impl.c"
        __label__ = 4; break; //@line 433 "xmltok_impl.c"
      case 4: // $bb3
        var $29=HEAP[$iftmp_916]; //@line 433 "xmltok_impl.c"
        if ($29 == 24) {
          __label__ = 5; break;
        }
        else if ($29 == 25) {
          __label__ = 5; break;
        }
        else {
        __label__ = 6; break;
        }
        
      case 5: // $bb4
        var $30=HEAP[$ptr_addr]; //@line 441 "xmltok_impl.c"
        var $31=(($30+2)&4294967295); //@line 441 "xmltok_impl.c"
        HEAP[$ptr_addr]=$31; //@line 441 "xmltok_impl.c"
        __label__ = 14; break; //@line 441 "xmltok_impl.c"
      case 6: // $bb5
        var $32=HEAP[$nextTokPtr_addr]; //@line 438 "xmltok_impl.c"
        var $33=HEAP[$ptr_addr]; //@line 438 "xmltok_impl.c"
        HEAP[$32]=$33; //@line 438 "xmltok_impl.c"
        HEAP[$0]=0; //@line 439 "xmltok_impl.c"
        __label__ = 16; break; //@line 439 "xmltok_impl.c"
      case 7: // $bb6
        var $34=HEAP[$ptr_addr]; //@line 442 "xmltok_impl.c"
        var $35=(($34)&4294967295); //@line 442 "xmltok_impl.c"
        var $36=HEAP[$35]; //@line 442 "xmltok_impl.c"
        var $37=reSign(($36), 8, 0)==0; //@line 442 "xmltok_impl.c"
        if ($37) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 442 "xmltok_impl.c"
      case 8: // $bb7
        var $38=HEAP[$enc_addr]; //@line 442 "xmltok_impl.c"
        var $39=$38; //@line 442 "xmltok_impl.c"
        var $40=HEAP[$ptr_addr]; //@line 442 "xmltok_impl.c"
        var $41=(($40+1)&4294967295); //@line 442 "xmltok_impl.c"
        var $42=HEAP[$41]; //@line 442 "xmltok_impl.c"
        var $43=unSign(($42), 8, 0); //@line 442 "xmltok_impl.c"
        var $44=(($39+72)&4294967295); //@line 442 "xmltok_impl.c"
        var $45=(($44+$43)&4294967295); //@line 442 "xmltok_impl.c"
        var $46=HEAP[$45]; //@line 442 "xmltok_impl.c"
        var $47=unSign(($46), 8, 0); //@line 442 "xmltok_impl.c"
        HEAP[$iftmp_918]=$47; //@line 442 "xmltok_impl.c"
        __label__ = 10; break; //@line 442 "xmltok_impl.c"
      case 9: // $bb8
        var $48=HEAP[$ptr_addr]; //@line 442 "xmltok_impl.c"
        var $49=(($48+1)&4294967295); //@line 442 "xmltok_impl.c"
        var $50=HEAP[$49]; //@line 442 "xmltok_impl.c"
        var $51=reSign(($50), 8, 0); //@line 442 "xmltok_impl.c"
        var $52=HEAP[$ptr_addr]; //@line 442 "xmltok_impl.c"
        var $53=(($52)&4294967295); //@line 442 "xmltok_impl.c"
        var $54=HEAP[$53]; //@line 442 "xmltok_impl.c"
        var $55=reSign(($54), 8, 0); //@line 442 "xmltok_impl.c"
        var $56=((($55)) & 255); //@line 442 "xmltok_impl.c"
        var $57=((($51)) & 255); //@line 442 "xmltok_impl.c"
        var $58=_unicode_byte_type($56, $57); //@line 442 "xmltok_impl.c"
        HEAP[$iftmp_918]=$58; //@line 442 "xmltok_impl.c"
        __label__ = 10; break; //@line 442 "xmltok_impl.c"
      case 10: // $bb9
        var $59=HEAP[$iftmp_918]; //@line 442 "xmltok_impl.c"
        if ($59 == 18) {
          __label__ = 12; break;
        }
        else if ($59 == 24) {
          __label__ = 11; break;
        }
        else if ($59 == 25) {
          __label__ = 11; break;
        }
        else {
        __label__ = 13; break;
        }
        
      case 11: // $bb10
        var $60=HEAP[$ptr_addr]; //@line 441 "xmltok_impl.c"
        var $61=(($60+2)&4294967295); //@line 441 "xmltok_impl.c"
        HEAP[$ptr_addr]=$61; //@line 441 "xmltok_impl.c"
        __label__ = 14; break; //@line 441 "xmltok_impl.c"
      case 12: // $bb11
        var $62=HEAP[$ptr_addr]; //@line 447 "xmltok_impl.c"
        var $63=(($62+2)&4294967295); //@line 447 "xmltok_impl.c"
        var $64=HEAP[$nextTokPtr_addr]; //@line 447 "xmltok_impl.c"
        HEAP[$64]=$63; //@line 447 "xmltok_impl.c"
        HEAP[$0]=10; //@line 448 "xmltok_impl.c"
        __label__ = 16; break; //@line 448 "xmltok_impl.c"
      case 13: // $bb12
        var $65=HEAP[$nextTokPtr_addr]; //@line 450 "xmltok_impl.c"
        var $66=HEAP[$ptr_addr]; //@line 450 "xmltok_impl.c"
        HEAP[$65]=$66; //@line 450 "xmltok_impl.c"
        HEAP[$0]=0; //@line 451 "xmltok_impl.c"
        __label__ = 16; break; //@line 451 "xmltok_impl.c"
      case 14: // $bb13
        var $67=HEAP[$ptr_addr]; //@line 441 "xmltok_impl.c"
        var $68=HEAP[$end_addr]; //@line 441 "xmltok_impl.c"
        var $69=($67)!=($68); //@line 441 "xmltok_impl.c"
        if ($69) { __label__ = 7; break; } else { __label__ = 15; break; } //@line 441 "xmltok_impl.c"
      case 15: // $bb14
        HEAP[$0]=-1; //@line 455 "xmltok_impl.c"
        __label__ = 16; break; //@line 455 "xmltok_impl.c"
      case 16: // $bb15
        var $70=HEAP[$0]; //@line 439 "xmltok_impl.c"
        HEAP[$retval]=$70; //@line 439 "xmltok_impl.c"
        __label__ = 17; break; //@line 439 "xmltok_impl.c"
      case 17: // $return
        var $retval16=HEAP[$retval]; //@line 439 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval16; //@line 439 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_scanCharRef($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_922=__stackBase__+20;
        var $iftmp_920=__stackBase__+24;
        var $0=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 464 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 464 "xmltok_impl.c"
        var $3=($1)!=($2); //@line 464 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 18; break; } //@line 464 "xmltok_impl.c"
      case 1: // $bb
        var $4=HEAP[$ptr_addr]; //@line 465 "xmltok_impl.c"
        var $5=(($4)&4294967295); //@line 465 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 465 "xmltok_impl.c"
        var $7=reSign(($6), 8, 0)==0; //@line 465 "xmltok_impl.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 465 "xmltok_impl.c"
      case 2: // $bb1
        var $8=HEAP[$ptr_addr]; //@line 465 "xmltok_impl.c"
        var $9=(($8+1)&4294967295); //@line 465 "xmltok_impl.c"
        var $10=HEAP[$9]; //@line 465 "xmltok_impl.c"
        var $11=reSign(($10), 8, 0)==120; //@line 465 "xmltok_impl.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 465 "xmltok_impl.c"
      case 3: // $bb2
        var $12=HEAP[$ptr_addr]; //@line 466 "xmltok_impl.c"
        var $13=(($12+2)&4294967295); //@line 466 "xmltok_impl.c"
        var $14=HEAP[$enc_addr]; //@line 466 "xmltok_impl.c"
        var $15=HEAP[$end_addr]; //@line 466 "xmltok_impl.c"
        var $16=HEAP[$nextTokPtr_addr]; //@line 466 "xmltok_impl.c"
        var $17=_big2_scanHexCharRef($14, $13, $15, $16); //@line 466 "xmltok_impl.c"
        HEAP[$0]=$17; //@line 466 "xmltok_impl.c"
        __label__ = 19; break; //@line 466 "xmltok_impl.c"
      case 4: // $bb3
        var $18=HEAP[$ptr_addr]; //@line 467 "xmltok_impl.c"
        var $19=(($18)&4294967295); //@line 467 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 467 "xmltok_impl.c"
        var $21=reSign(($20), 8, 0)==0; //@line 467 "xmltok_impl.c"
        if ($21) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 467 "xmltok_impl.c"
      case 5: // $bb4
        var $22=HEAP[$enc_addr]; //@line 467 "xmltok_impl.c"
        var $23=$22; //@line 467 "xmltok_impl.c"
        var $24=HEAP[$ptr_addr]; //@line 467 "xmltok_impl.c"
        var $25=(($24+1)&4294967295); //@line 467 "xmltok_impl.c"
        var $26=HEAP[$25]; //@line 467 "xmltok_impl.c"
        var $27=unSign(($26), 8, 0); //@line 467 "xmltok_impl.c"
        var $28=(($23+72)&4294967295); //@line 467 "xmltok_impl.c"
        var $29=(($28+$27)&4294967295); //@line 467 "xmltok_impl.c"
        var $30=HEAP[$29]; //@line 467 "xmltok_impl.c"
        var $31=unSign(($30), 8, 0); //@line 467 "xmltok_impl.c"
        HEAP[$iftmp_920]=$31; //@line 467 "xmltok_impl.c"
        __label__ = 7; break; //@line 467 "xmltok_impl.c"
      case 6: // $bb5
        var $32=HEAP[$ptr_addr]; //@line 467 "xmltok_impl.c"
        var $33=(($32+1)&4294967295); //@line 467 "xmltok_impl.c"
        var $34=HEAP[$33]; //@line 467 "xmltok_impl.c"
        var $35=reSign(($34), 8, 0); //@line 467 "xmltok_impl.c"
        var $36=HEAP[$ptr_addr]; //@line 467 "xmltok_impl.c"
        var $37=(($36)&4294967295); //@line 467 "xmltok_impl.c"
        var $38=HEAP[$37]; //@line 467 "xmltok_impl.c"
        var $39=reSign(($38), 8, 0); //@line 467 "xmltok_impl.c"
        var $40=((($39)) & 255); //@line 467 "xmltok_impl.c"
        var $41=((($35)) & 255); //@line 467 "xmltok_impl.c"
        var $42=_unicode_byte_type($40, $41); //@line 467 "xmltok_impl.c"
        HEAP[$iftmp_920]=$42; //@line 467 "xmltok_impl.c"
        __label__ = 7; break; //@line 467 "xmltok_impl.c"
      case 7: // $bb6
        var $43=HEAP[$iftmp_920]; //@line 467 "xmltok_impl.c"
        if ($43 == 25) {
          __label__ = 8; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 8: // $bb7
        var $44=HEAP[$ptr_addr]; //@line 474 "xmltok_impl.c"
        var $45=(($44+2)&4294967295); //@line 474 "xmltok_impl.c"
        HEAP[$ptr_addr]=$45; //@line 474 "xmltok_impl.c"
        __label__ = 17; break; //@line 474 "xmltok_impl.c"
      case 9: // $bb8
        var $46=HEAP[$nextTokPtr_addr]; //@line 471 "xmltok_impl.c"
        var $47=HEAP[$ptr_addr]; //@line 471 "xmltok_impl.c"
        HEAP[$46]=$47; //@line 471 "xmltok_impl.c"
        HEAP[$0]=0; //@line 472 "xmltok_impl.c"
        __label__ = 19; break; //@line 472 "xmltok_impl.c"
      case 10: // $bb9
        var $48=HEAP[$ptr_addr]; //@line 475 "xmltok_impl.c"
        var $49=(($48)&4294967295); //@line 475 "xmltok_impl.c"
        var $50=HEAP[$49]; //@line 475 "xmltok_impl.c"
        var $51=reSign(($50), 8, 0)==0; //@line 475 "xmltok_impl.c"
        if ($51) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 475 "xmltok_impl.c"
      case 11: // $bb10
        var $52=HEAP[$enc_addr]; //@line 475 "xmltok_impl.c"
        var $53=$52; //@line 475 "xmltok_impl.c"
        var $54=HEAP[$ptr_addr]; //@line 475 "xmltok_impl.c"
        var $55=(($54+1)&4294967295); //@line 475 "xmltok_impl.c"
        var $56=HEAP[$55]; //@line 475 "xmltok_impl.c"
        var $57=unSign(($56), 8, 0); //@line 475 "xmltok_impl.c"
        var $58=(($53+72)&4294967295); //@line 475 "xmltok_impl.c"
        var $59=(($58+$57)&4294967295); //@line 475 "xmltok_impl.c"
        var $60=HEAP[$59]; //@line 475 "xmltok_impl.c"
        var $61=unSign(($60), 8, 0); //@line 475 "xmltok_impl.c"
        HEAP[$iftmp_922]=$61; //@line 475 "xmltok_impl.c"
        __label__ = 13; break; //@line 475 "xmltok_impl.c"
      case 12: // $bb11
        var $62=HEAP[$ptr_addr]; //@line 475 "xmltok_impl.c"
        var $63=(($62+1)&4294967295); //@line 475 "xmltok_impl.c"
        var $64=HEAP[$63]; //@line 475 "xmltok_impl.c"
        var $65=reSign(($64), 8, 0); //@line 475 "xmltok_impl.c"
        var $66=HEAP[$ptr_addr]; //@line 475 "xmltok_impl.c"
        var $67=(($66)&4294967295); //@line 475 "xmltok_impl.c"
        var $68=HEAP[$67]; //@line 475 "xmltok_impl.c"
        var $69=reSign(($68), 8, 0); //@line 475 "xmltok_impl.c"
        var $70=((($69)) & 255); //@line 475 "xmltok_impl.c"
        var $71=((($65)) & 255); //@line 475 "xmltok_impl.c"
        var $72=_unicode_byte_type($70, $71); //@line 475 "xmltok_impl.c"
        HEAP[$iftmp_922]=$72; //@line 475 "xmltok_impl.c"
        __label__ = 13; break; //@line 475 "xmltok_impl.c"
      case 13: // $bb12
        var $73=HEAP[$iftmp_922]; //@line 475 "xmltok_impl.c"
        if ($73 == 18) {
          __label__ = 15; break;
        }
        else if ($73 == 25) {
          __label__ = 14; break;
        }
        else {
        __label__ = 16; break;
        }
        
      case 14: // $bb13
        var $74=HEAP[$ptr_addr]; //@line 474 "xmltok_impl.c"
        var $75=(($74+2)&4294967295); //@line 474 "xmltok_impl.c"
        HEAP[$ptr_addr]=$75; //@line 474 "xmltok_impl.c"
        __label__ = 17; break; //@line 474 "xmltok_impl.c"
      case 15: // $bb14
        var $76=HEAP[$ptr_addr]; //@line 479 "xmltok_impl.c"
        var $77=(($76+2)&4294967295); //@line 479 "xmltok_impl.c"
        var $78=HEAP[$nextTokPtr_addr]; //@line 479 "xmltok_impl.c"
        HEAP[$78]=$77; //@line 479 "xmltok_impl.c"
        HEAP[$0]=10; //@line 480 "xmltok_impl.c"
        __label__ = 19; break; //@line 480 "xmltok_impl.c"
      case 16: // $bb15
        var $79=HEAP[$nextTokPtr_addr]; //@line 482 "xmltok_impl.c"
        var $80=HEAP[$ptr_addr]; //@line 482 "xmltok_impl.c"
        HEAP[$79]=$80; //@line 482 "xmltok_impl.c"
        HEAP[$0]=0; //@line 483 "xmltok_impl.c"
        __label__ = 19; break; //@line 483 "xmltok_impl.c"
      case 17: // $bb16
        var $81=HEAP[$ptr_addr]; //@line 474 "xmltok_impl.c"
        var $82=HEAP[$end_addr]; //@line 474 "xmltok_impl.c"
        var $83=($81)!=($82); //@line 474 "xmltok_impl.c"
        if ($83) { __label__ = 10; break; } else { __label__ = 18; break; } //@line 474 "xmltok_impl.c"
      case 18: // $bb17
        HEAP[$0]=-1; //@line 487 "xmltok_impl.c"
        __label__ = 19; break; //@line 487 "xmltok_impl.c"
      case 19: // $bb18
        var $84=HEAP[$0]; //@line 466 "xmltok_impl.c"
        HEAP[$retval]=$84; //@line 466 "xmltok_impl.c"
        __label__ = 20; break; //@line 466 "xmltok_impl.c"
      case 20: // $return
        var $retval19=HEAP[$retval]; //@line 466 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval19; //@line 466 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_scanRef($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_932=__stackBase__+20;
        var $iftmp_924=__stackBase__+24;
        var $0=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 496 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 496 "xmltok_impl.c"
        var $3=($1)==($2); //@line 496 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 496 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 497 "xmltok_impl.c"
        __label__ = 40; break; //@line 497 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$ptr_addr]; //@line 498 "xmltok_impl.c"
        var $5=(($4)&4294967295); //@line 498 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 498 "xmltok_impl.c"
        var $7=reSign(($6), 8, 0)==0; //@line 498 "xmltok_impl.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 498 "xmltok_impl.c"
      case 3: // $bb2
        var $8=HEAP[$enc_addr]; //@line 498 "xmltok_impl.c"
        var $9=$8; //@line 498 "xmltok_impl.c"
        var $10=HEAP[$ptr_addr]; //@line 498 "xmltok_impl.c"
        var $11=(($10+1)&4294967295); //@line 498 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 498 "xmltok_impl.c"
        var $13=unSign(($12), 8, 0); //@line 498 "xmltok_impl.c"
        var $14=(($9+72)&4294967295); //@line 498 "xmltok_impl.c"
        var $15=(($14+$13)&4294967295); //@line 498 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 498 "xmltok_impl.c"
        var $17=unSign(($16), 8, 0); //@line 498 "xmltok_impl.c"
        HEAP[$iftmp_924]=$17; //@line 498 "xmltok_impl.c"
        __label__ = 5; break; //@line 498 "xmltok_impl.c"
      case 4: // $bb3
        var $18=HEAP[$ptr_addr]; //@line 498 "xmltok_impl.c"
        var $19=(($18+1)&4294967295); //@line 498 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 498 "xmltok_impl.c"
        var $21=reSign(($20), 8, 0); //@line 498 "xmltok_impl.c"
        var $22=HEAP[$ptr_addr]; //@line 498 "xmltok_impl.c"
        var $23=(($22)&4294967295); //@line 498 "xmltok_impl.c"
        var $24=HEAP[$23]; //@line 498 "xmltok_impl.c"
        var $25=reSign(($24), 8, 0); //@line 498 "xmltok_impl.c"
        var $26=((($25)) & 255); //@line 498 "xmltok_impl.c"
        var $27=((($21)) & 255); //@line 498 "xmltok_impl.c"
        var $28=_unicode_byte_type($26, $27); //@line 498 "xmltok_impl.c"
        HEAP[$iftmp_924]=$28; //@line 498 "xmltok_impl.c"
        __label__ = 5; break; //@line 498 "xmltok_impl.c"
      case 5: // $bb4
        var $29=HEAP[$iftmp_924]; //@line 498 "xmltok_impl.c"
        if ($29 == 5) {
          __label__ = 9; break;
        }
        else if ($29 == 6) {
          __label__ = 12; break;
        }
        else if ($29 == 7) {
          __label__ = 15; break;
        }
        else if ($29 == 19) {
          __label__ = 18; break;
        }
        else if ($29 == 22) {
          __label__ = 8; break;
        }
        else if ($29 == 24) {
          __label__ = 8; break;
        }
        else if ($29 == 29) {
          __label__ = 6; break;
        }
        else {
        __label__ = 19; break;
        }
        
      case 6: // $bb5
        var $30=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        var $31=(($30)&4294967295); //@line 499 "xmltok_impl.c"
        var $32=HEAP[$31]; //@line 499 "xmltok_impl.c"
        var $33=unSign(($32), 8, 0); //@line 499 "xmltok_impl.c"
        var $34=((_nmstrtPages+$33)&4294967295); //@line 499 "xmltok_impl.c"
        var $35=HEAP[$34]; //@line 499 "xmltok_impl.c"
        var $36=unSign(($35), 8, 0); //@line 499 "xmltok_impl.c"
        var $37=($36) << 3; //@line 499 "xmltok_impl.c"
        var $38=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        var $39=(($38+1)&4294967295); //@line 499 "xmltok_impl.c"
        var $40=HEAP[$39]; //@line 499 "xmltok_impl.c"
        var $41=unSign(($40), 8, 0) >>> 5; //@line 499 "xmltok_impl.c"
        var $42=unSign(($41), 8, 0); //@line 499 "xmltok_impl.c"
        var $43=((($37) + ($42))&4294967295); //@line 499 "xmltok_impl.c"
        var $44=((_namingBitmap+$43*4)&4294967295); //@line 499 "xmltok_impl.c"
        var $45=HEAP[$44]; //@line 499 "xmltok_impl.c"
        var $46=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        var $47=(($46+1)&4294967295); //@line 499 "xmltok_impl.c"
        var $48=HEAP[$47]; //@line 499 "xmltok_impl.c"
        var $49=unSign(($48), 8, 0); //@line 499 "xmltok_impl.c"
        var $50=($49) & 31; //@line 499 "xmltok_impl.c"
        var $51=1 << ($50); //@line 499 "xmltok_impl.c"
        var $52=($45) & ($51); //@line 499 "xmltok_impl.c"
        var $53=((($52))|0)==0; //@line 499 "xmltok_impl.c"
        if ($53) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 499 "xmltok_impl.c"
      case 7: // $bb6
        var $54=HEAP[$nextTokPtr_addr]; //@line 499 "xmltok_impl.c"
        var $55=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        HEAP[$54]=$55; //@line 499 "xmltok_impl.c"
        HEAP[$0]=0; //@line 499 "xmltok_impl.c"
        __label__ = 40; break; //@line 499 "xmltok_impl.c"
      case 8: // $bb7
        var $56=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        var $57=(($56+2)&4294967295); //@line 499 "xmltok_impl.c"
        HEAP[$ptr_addr]=$57; //@line 499 "xmltok_impl.c"
        __label__ = 38; break; //@line 499 "xmltok_impl.c"
      case 9: // $bb8
        var $58=HEAP[$end_addr]; //@line 499 "xmltok_impl.c"
        var $59=($58); //@line 499 "xmltok_impl.c"
        var $60=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        var $61=($60); //@line 499 "xmltok_impl.c"
        var $62=((($59) - ($61))&4294967295); //@line 499 "xmltok_impl.c"
        var $63=((($62))|0) <= 1; //@line 499 "xmltok_impl.c"
        if ($63) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 499 "xmltok_impl.c"
      case 10: // $bb9
        HEAP[$0]=-2; //@line 499 "xmltok_impl.c"
        __label__ = 40; break; //@line 499 "xmltok_impl.c"
      case 11: // $bb10
        var $64=HEAP[$nextTokPtr_addr]; //@line 499 "xmltok_impl.c"
        var $65=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        HEAP[$64]=$65; //@line 499 "xmltok_impl.c"
        HEAP[$0]=0; //@line 499 "xmltok_impl.c"
        __label__ = 40; break; //@line 499 "xmltok_impl.c"
      case 12: // $bb11
        var $66=HEAP[$end_addr]; //@line 499 "xmltok_impl.c"
        var $67=($66); //@line 499 "xmltok_impl.c"
        var $68=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        var $69=($68); //@line 499 "xmltok_impl.c"
        var $70=((($67) - ($69))&4294967295); //@line 499 "xmltok_impl.c"
        var $71=((($70))|0) <= 2; //@line 499 "xmltok_impl.c"
        if ($71) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 499 "xmltok_impl.c"
      case 13: // $bb12
        HEAP[$0]=-2; //@line 499 "xmltok_impl.c"
        __label__ = 40; break; //@line 499 "xmltok_impl.c"
      case 14: // $bb13
        var $72=HEAP[$nextTokPtr_addr]; //@line 499 "xmltok_impl.c"
        var $73=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        HEAP[$72]=$73; //@line 499 "xmltok_impl.c"
        HEAP[$0]=0; //@line 499 "xmltok_impl.c"
        __label__ = 40; break; //@line 499 "xmltok_impl.c"
      case 15: // $bb14
        var $74=HEAP[$end_addr]; //@line 499 "xmltok_impl.c"
        var $75=($74); //@line 499 "xmltok_impl.c"
        var $76=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        var $77=($76); //@line 499 "xmltok_impl.c"
        var $78=((($75) - ($77))&4294967295); //@line 499 "xmltok_impl.c"
        var $79=((($78))|0) <= 3; //@line 499 "xmltok_impl.c"
        if ($79) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 499 "xmltok_impl.c"
      case 16: // $bb15
        HEAP[$0]=-2; //@line 499 "xmltok_impl.c"
        __label__ = 40; break; //@line 499 "xmltok_impl.c"
      case 17: // $bb16
        var $80=HEAP[$nextTokPtr_addr]; //@line 499 "xmltok_impl.c"
        var $81=HEAP[$ptr_addr]; //@line 499 "xmltok_impl.c"
        HEAP[$80]=$81; //@line 499 "xmltok_impl.c"
        HEAP[$0]=0; //@line 499 "xmltok_impl.c"
        __label__ = 40; break; //@line 499 "xmltok_impl.c"
      case 18: // $bb17
        var $82=HEAP[$ptr_addr]; //@line 501 "xmltok_impl.c"
        var $83=(($82+2)&4294967295); //@line 501 "xmltok_impl.c"
        var $84=HEAP[$enc_addr]; //@line 501 "xmltok_impl.c"
        var $85=HEAP[$end_addr]; //@line 501 "xmltok_impl.c"
        var $86=HEAP[$nextTokPtr_addr]; //@line 501 "xmltok_impl.c"
        var $87=_big2_scanCharRef($84, $83, $85, $86); //@line 501 "xmltok_impl.c"
        HEAP[$0]=$87; //@line 501 "xmltok_impl.c"
        __label__ = 40; break; //@line 501 "xmltok_impl.c"
      case 19: // $bb18
        var $88=HEAP[$nextTokPtr_addr]; //@line 503 "xmltok_impl.c"
        var $89=HEAP[$ptr_addr]; //@line 503 "xmltok_impl.c"
        HEAP[$88]=$89; //@line 503 "xmltok_impl.c"
        HEAP[$0]=0; //@line 504 "xmltok_impl.c"
        __label__ = 40; break; //@line 504 "xmltok_impl.c"
      case 20: // $bb19
        var $90=HEAP[$ptr_addr]; //@line 507 "xmltok_impl.c"
        var $91=(($90)&4294967295); //@line 507 "xmltok_impl.c"
        var $92=HEAP[$91]; //@line 507 "xmltok_impl.c"
        var $93=reSign(($92), 8, 0)==0; //@line 507 "xmltok_impl.c"
        if ($93) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 507 "xmltok_impl.c"
      case 21: // $bb20
        var $94=HEAP[$enc_addr]; //@line 507 "xmltok_impl.c"
        var $95=$94; //@line 507 "xmltok_impl.c"
        var $96=HEAP[$ptr_addr]; //@line 507 "xmltok_impl.c"
        var $97=(($96+1)&4294967295); //@line 507 "xmltok_impl.c"
        var $98=HEAP[$97]; //@line 507 "xmltok_impl.c"
        var $99=unSign(($98), 8, 0); //@line 507 "xmltok_impl.c"
        var $100=(($95+72)&4294967295); //@line 507 "xmltok_impl.c"
        var $101=(($100+$99)&4294967295); //@line 507 "xmltok_impl.c"
        var $102=HEAP[$101]; //@line 507 "xmltok_impl.c"
        var $103=unSign(($102), 8, 0); //@line 507 "xmltok_impl.c"
        HEAP[$iftmp_932]=$103; //@line 507 "xmltok_impl.c"
        __label__ = 23; break; //@line 507 "xmltok_impl.c"
      case 22: // $bb21
        var $104=HEAP[$ptr_addr]; //@line 507 "xmltok_impl.c"
        var $105=(($104+1)&4294967295); //@line 507 "xmltok_impl.c"
        var $106=HEAP[$105]; //@line 507 "xmltok_impl.c"
        var $107=reSign(($106), 8, 0); //@line 507 "xmltok_impl.c"
        var $108=HEAP[$ptr_addr]; //@line 507 "xmltok_impl.c"
        var $109=(($108)&4294967295); //@line 507 "xmltok_impl.c"
        var $110=HEAP[$109]; //@line 507 "xmltok_impl.c"
        var $111=reSign(($110), 8, 0); //@line 507 "xmltok_impl.c"
        var $112=((($111)) & 255); //@line 507 "xmltok_impl.c"
        var $113=((($107)) & 255); //@line 507 "xmltok_impl.c"
        var $114=_unicode_byte_type($112, $113); //@line 507 "xmltok_impl.c"
        HEAP[$iftmp_932]=$114; //@line 507 "xmltok_impl.c"
        __label__ = 23; break; //@line 507 "xmltok_impl.c"
      case 23: // $bb22
        var $115=HEAP[$iftmp_932]; //@line 507 "xmltok_impl.c"
        if ($115 == 5) {
          __label__ = 27; break;
        }
        else if ($115 == 6) {
          __label__ = 30; break;
        }
        else if ($115 == 7) {
          __label__ = 33; break;
        }
        else if ($115 == 18) {
          __label__ = 36; break;
        }
        else if ($115 == 22) {
          __label__ = 26; break;
        }
        else if ($115 == 24) {
          __label__ = 26; break;
        }
        else if ($115 == 25) {
          __label__ = 26; break;
        }
        else if ($115 == 26) {
          __label__ = 26; break;
        }
        else if ($115 == 27) {
          __label__ = 26; break;
        }
        else if ($115 == 29) {
          __label__ = 24; break;
        }
        else {
        __label__ = 37; break;
        }
        
      case 24: // $bb23
        var $116=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        var $117=(($116)&4294967295); //@line 508 "xmltok_impl.c"
        var $118=HEAP[$117]; //@line 508 "xmltok_impl.c"
        var $119=unSign(($118), 8, 0); //@line 508 "xmltok_impl.c"
        var $120=((_namePages+$119)&4294967295); //@line 508 "xmltok_impl.c"
        var $121=HEAP[$120]; //@line 508 "xmltok_impl.c"
        var $122=unSign(($121), 8, 0); //@line 508 "xmltok_impl.c"
        var $123=($122) << 3; //@line 508 "xmltok_impl.c"
        var $124=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        var $125=(($124+1)&4294967295); //@line 508 "xmltok_impl.c"
        var $126=HEAP[$125]; //@line 508 "xmltok_impl.c"
        var $127=unSign(($126), 8, 0) >>> 5; //@line 508 "xmltok_impl.c"
        var $128=unSign(($127), 8, 0); //@line 508 "xmltok_impl.c"
        var $129=((($123) + ($128))&4294967295); //@line 508 "xmltok_impl.c"
        var $130=((_namingBitmap+$129*4)&4294967295); //@line 508 "xmltok_impl.c"
        var $131=HEAP[$130]; //@line 508 "xmltok_impl.c"
        var $132=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        var $133=(($132+1)&4294967295); //@line 508 "xmltok_impl.c"
        var $134=HEAP[$133]; //@line 508 "xmltok_impl.c"
        var $135=unSign(($134), 8, 0); //@line 508 "xmltok_impl.c"
        var $136=($135) & 31; //@line 508 "xmltok_impl.c"
        var $137=1 << ($136); //@line 508 "xmltok_impl.c"
        var $138=($131) & ($137); //@line 508 "xmltok_impl.c"
        var $139=((($138))|0)==0; //@line 508 "xmltok_impl.c"
        if ($139) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 508 "xmltok_impl.c"
      case 25: // $bb24
        var $140=HEAP[$nextTokPtr_addr]; //@line 508 "xmltok_impl.c"
        var $141=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        HEAP[$140]=$141; //@line 508 "xmltok_impl.c"
        HEAP[$0]=0; //@line 508 "xmltok_impl.c"
        __label__ = 40; break; //@line 508 "xmltok_impl.c"
      case 26: // $bb25
        var $142=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        var $143=(($142+2)&4294967295); //@line 508 "xmltok_impl.c"
        HEAP[$ptr_addr]=$143; //@line 508 "xmltok_impl.c"
        __label__ = 38; break; //@line 508 "xmltok_impl.c"
      case 27: // $bb26
        var $144=HEAP[$end_addr]; //@line 508 "xmltok_impl.c"
        var $145=($144); //@line 508 "xmltok_impl.c"
        var $146=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        var $147=($146); //@line 508 "xmltok_impl.c"
        var $148=((($145) - ($147))&4294967295); //@line 508 "xmltok_impl.c"
        var $149=((($148))|0) <= 1; //@line 508 "xmltok_impl.c"
        if ($149) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 508 "xmltok_impl.c"
      case 28: // $bb27
        HEAP[$0]=-2; //@line 508 "xmltok_impl.c"
        __label__ = 40; break; //@line 508 "xmltok_impl.c"
      case 29: // $bb28
        var $150=HEAP[$nextTokPtr_addr]; //@line 508 "xmltok_impl.c"
        var $151=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        HEAP[$150]=$151; //@line 508 "xmltok_impl.c"
        HEAP[$0]=0; //@line 508 "xmltok_impl.c"
        __label__ = 40; break; //@line 508 "xmltok_impl.c"
      case 30: // $bb29
        var $152=HEAP[$end_addr]; //@line 508 "xmltok_impl.c"
        var $153=($152); //@line 508 "xmltok_impl.c"
        var $154=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        var $155=($154); //@line 508 "xmltok_impl.c"
        var $156=((($153) - ($155))&4294967295); //@line 508 "xmltok_impl.c"
        var $157=((($156))|0) <= 2; //@line 508 "xmltok_impl.c"
        if ($157) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 508 "xmltok_impl.c"
      case 31: // $bb30
        HEAP[$0]=-2; //@line 508 "xmltok_impl.c"
        __label__ = 40; break; //@line 508 "xmltok_impl.c"
      case 32: // $bb31
        var $158=HEAP[$nextTokPtr_addr]; //@line 508 "xmltok_impl.c"
        var $159=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        HEAP[$158]=$159; //@line 508 "xmltok_impl.c"
        HEAP[$0]=0; //@line 508 "xmltok_impl.c"
        __label__ = 40; break; //@line 508 "xmltok_impl.c"
      case 33: // $bb32
        var $160=HEAP[$end_addr]; //@line 508 "xmltok_impl.c"
        var $161=($160); //@line 508 "xmltok_impl.c"
        var $162=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        var $163=($162); //@line 508 "xmltok_impl.c"
        var $164=((($161) - ($163))&4294967295); //@line 508 "xmltok_impl.c"
        var $165=((($164))|0) <= 3; //@line 508 "xmltok_impl.c"
        if ($165) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 508 "xmltok_impl.c"
      case 34: // $bb33
        HEAP[$0]=-2; //@line 508 "xmltok_impl.c"
        __label__ = 40; break; //@line 508 "xmltok_impl.c"
      case 35: // $bb34
        var $166=HEAP[$nextTokPtr_addr]; //@line 508 "xmltok_impl.c"
        var $167=HEAP[$ptr_addr]; //@line 508 "xmltok_impl.c"
        HEAP[$166]=$167; //@line 508 "xmltok_impl.c"
        HEAP[$0]=0; //@line 508 "xmltok_impl.c"
        __label__ = 40; break; //@line 508 "xmltok_impl.c"
      case 36: // $bb35
        var $168=HEAP[$ptr_addr]; //@line 510 "xmltok_impl.c"
        var $169=(($168+2)&4294967295); //@line 510 "xmltok_impl.c"
        var $170=HEAP[$nextTokPtr_addr]; //@line 510 "xmltok_impl.c"
        HEAP[$170]=$169; //@line 510 "xmltok_impl.c"
        HEAP[$0]=9; //@line 511 "xmltok_impl.c"
        __label__ = 40; break; //@line 511 "xmltok_impl.c"
      case 37: // $bb36
        var $171=HEAP[$nextTokPtr_addr]; //@line 513 "xmltok_impl.c"
        var $172=HEAP[$ptr_addr]; //@line 513 "xmltok_impl.c"
        HEAP[$171]=$172; //@line 513 "xmltok_impl.c"
        HEAP[$0]=0; //@line 514 "xmltok_impl.c"
        __label__ = 40; break; //@line 514 "xmltok_impl.c"
      case 38: // $bb37
        var $173=HEAP[$ptr_addr]; //@line 506 "xmltok_impl.c"
        var $174=HEAP[$end_addr]; //@line 506 "xmltok_impl.c"
        var $175=($173)!=($174); //@line 506 "xmltok_impl.c"
        if ($175) { __label__ = 20; break; } else { __label__ = 39; break; } //@line 506 "xmltok_impl.c"
      case 39: // $bb38
        HEAP[$0]=-1; //@line 517 "xmltok_impl.c"
        __label__ = 40; break; //@line 517 "xmltok_impl.c"
      case 40: // $bb39
        var $176=HEAP[$0]; //@line 497 "xmltok_impl.c"
        HEAP[$retval]=$176; //@line 497 "xmltok_impl.c"
        __label__ = 41; break; //@line 497 "xmltok_impl.c"
      case 41: // $return
        var $retval40=HEAP[$retval]; //@line 497 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval40; //@line 497 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_scanAtts($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 64; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 64);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_1023=__stackBase__+20;
        var $iftmp_1014=__stackBase__+24;
        var $iftmp_986=__stackBase__+28;
        var $iftmp_977=__stackBase__+32;
        var $iftmp_968=__stackBase__+36;
        var $0=__stackBase__+40;
        var $iftmp_940=__stackBase__+44;
        var $t=__stackBase__+48;
        var $open=__stackBase__+52;
        var $t37=__stackBase__+56;
        var $tok=__stackBase__+60;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        __label__ = 100; break; //@line 529 "xmltok_impl.c"
      case 1: // $bb
        var $1=HEAP[$ptr_addr]; //@line 530 "xmltok_impl.c"
        var $2=(($1)&4294967295); //@line 530 "xmltok_impl.c"
        var $3=HEAP[$2]; //@line 530 "xmltok_impl.c"
        var $4=reSign(($3), 8, 0)==0; //@line 530 "xmltok_impl.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 530 "xmltok_impl.c"
      case 2: // $bb1
        var $5=HEAP[$enc_addr]; //@line 530 "xmltok_impl.c"
        var $6=$5; //@line 530 "xmltok_impl.c"
        var $7=HEAP[$ptr_addr]; //@line 530 "xmltok_impl.c"
        var $8=(($7+1)&4294967295); //@line 530 "xmltok_impl.c"
        var $9=HEAP[$8]; //@line 530 "xmltok_impl.c"
        var $10=unSign(($9), 8, 0); //@line 530 "xmltok_impl.c"
        var $11=(($6+72)&4294967295); //@line 530 "xmltok_impl.c"
        var $12=(($11+$10)&4294967295); //@line 530 "xmltok_impl.c"
        var $13=HEAP[$12]; //@line 530 "xmltok_impl.c"
        var $14=unSign(($13), 8, 0); //@line 530 "xmltok_impl.c"
        HEAP[$iftmp_940]=$14; //@line 530 "xmltok_impl.c"
        __label__ = 4; break; //@line 530 "xmltok_impl.c"
      case 3: // $bb2
        var $15=HEAP[$ptr_addr]; //@line 530 "xmltok_impl.c"
        var $16=(($15+1)&4294967295); //@line 530 "xmltok_impl.c"
        var $17=HEAP[$16]; //@line 530 "xmltok_impl.c"
        var $18=reSign(($17), 8, 0); //@line 530 "xmltok_impl.c"
        var $19=HEAP[$ptr_addr]; //@line 530 "xmltok_impl.c"
        var $20=(($19)&4294967295); //@line 530 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 530 "xmltok_impl.c"
        var $22=reSign(($21), 8, 0); //@line 530 "xmltok_impl.c"
        var $23=((($22)) & 255); //@line 530 "xmltok_impl.c"
        var $24=((($18)) & 255); //@line 530 "xmltok_impl.c"
        var $25=_unicode_byte_type($23, $24); //@line 530 "xmltok_impl.c"
        HEAP[$iftmp_940]=$25; //@line 530 "xmltok_impl.c"
        __label__ = 4; break; //@line 530 "xmltok_impl.c"
      case 4: // $bb3
        var $26=HEAP[$iftmp_940]; //@line 530 "xmltok_impl.c"
        if ($26 == 5) {
          __label__ = 8; break;
        }
        else if ($26 == 6) {
          __label__ = 11; break;
        }
        else if ($26 == 7) {
          __label__ = 14; break;
        }
        else if ($26 == 9) {
          __label__ = 17; break;
        }
        else if ($26 == 10) {
          __label__ = 17; break;
        }
        else if ($26 == 14) {
          __label__ = 26; break;
        }
        else if ($26 == 21) {
          __label__ = 17; break;
        }
        else if ($26 == 22) {
          __label__ = 7; break;
        }
        else if ($26 == 24) {
          __label__ = 7; break;
        }
        else if ($26 == 25) {
          __label__ = 7; break;
        }
        else if ($26 == 26) {
          __label__ = 7; break;
        }
        else if ($26 == 27) {
          __label__ = 7; break;
        }
        else if ($26 == 29) {
          __label__ = 5; break;
        }
        else {
        __label__ = 99; break;
        }
        
      case 5: // $bb4
        var $27=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $28=(($27)&4294967295); //@line 531 "xmltok_impl.c"
        var $29=HEAP[$28]; //@line 531 "xmltok_impl.c"
        var $30=unSign(($29), 8, 0); //@line 531 "xmltok_impl.c"
        var $31=((_namePages+$30)&4294967295); //@line 531 "xmltok_impl.c"
        var $32=HEAP[$31]; //@line 531 "xmltok_impl.c"
        var $33=unSign(($32), 8, 0); //@line 531 "xmltok_impl.c"
        var $34=($33) << 3; //@line 531 "xmltok_impl.c"
        var $35=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $36=(($35+1)&4294967295); //@line 531 "xmltok_impl.c"
        var $37=HEAP[$36]; //@line 531 "xmltok_impl.c"
        var $38=unSign(($37), 8, 0) >>> 5; //@line 531 "xmltok_impl.c"
        var $39=unSign(($38), 8, 0); //@line 531 "xmltok_impl.c"
        var $40=((($34) + ($39))&4294967295); //@line 531 "xmltok_impl.c"
        var $41=((_namingBitmap+$40*4)&4294967295); //@line 531 "xmltok_impl.c"
        var $42=HEAP[$41]; //@line 531 "xmltok_impl.c"
        var $43=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $44=(($43+1)&4294967295); //@line 531 "xmltok_impl.c"
        var $45=HEAP[$44]; //@line 531 "xmltok_impl.c"
        var $46=unSign(($45), 8, 0); //@line 531 "xmltok_impl.c"
        var $47=($46) & 31; //@line 531 "xmltok_impl.c"
        var $48=1 << ($47); //@line 531 "xmltok_impl.c"
        var $49=($42) & ($48); //@line 531 "xmltok_impl.c"
        var $50=((($49))|0)==0; //@line 531 "xmltok_impl.c"
        if ($50) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 531 "xmltok_impl.c"
      case 6: // $bb5
        var $51=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $52=HEAP[$nextTokPtr_addr]; //@line 531 "xmltok_impl.c"
        HEAP[$52]=$51; //@line 531 "xmltok_impl.c"
        HEAP[$0]=0; //@line 531 "xmltok_impl.c"
        __label__ = 102; break; //@line 531 "xmltok_impl.c"
      case 7: // $bb6
        var $53=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $54=(($53+2)&4294967295); //@line 531 "xmltok_impl.c"
        HEAP[$ptr_addr]=$54; //@line 531 "xmltok_impl.c"
        __label__ = 100; break; //@line 531 "xmltok_impl.c"
      case 8: // $bb7
        var $55=HEAP[$end_addr]; //@line 531 "xmltok_impl.c"
        var $56=($55); //@line 531 "xmltok_impl.c"
        var $57=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $58=($57); //@line 531 "xmltok_impl.c"
        var $59=((($56) - ($58))&4294967295); //@line 531 "xmltok_impl.c"
        var $60=((($59))|0) <= 1; //@line 531 "xmltok_impl.c"
        if ($60) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 531 "xmltok_impl.c"
      case 9: // $bb8
        HEAP[$0]=-2; //@line 531 "xmltok_impl.c"
        __label__ = 102; break; //@line 531 "xmltok_impl.c"
      case 10: // $bb9
        var $61=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $62=HEAP[$nextTokPtr_addr]; //@line 531 "xmltok_impl.c"
        HEAP[$62]=$61; //@line 531 "xmltok_impl.c"
        HEAP[$0]=0; //@line 531 "xmltok_impl.c"
        __label__ = 102; break; //@line 531 "xmltok_impl.c"
      case 11: // $bb10
        var $63=HEAP[$end_addr]; //@line 531 "xmltok_impl.c"
        var $64=($63); //@line 531 "xmltok_impl.c"
        var $65=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $66=($65); //@line 531 "xmltok_impl.c"
        var $67=((($64) - ($66))&4294967295); //@line 531 "xmltok_impl.c"
        var $68=((($67))|0) <= 2; //@line 531 "xmltok_impl.c"
        if ($68) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 531 "xmltok_impl.c"
      case 12: // $bb11
        HEAP[$0]=-2; //@line 531 "xmltok_impl.c"
        __label__ = 102; break; //@line 531 "xmltok_impl.c"
      case 13: // $bb12
        var $69=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $70=HEAP[$nextTokPtr_addr]; //@line 531 "xmltok_impl.c"
        HEAP[$70]=$69; //@line 531 "xmltok_impl.c"
        HEAP[$0]=0; //@line 531 "xmltok_impl.c"
        __label__ = 102; break; //@line 531 "xmltok_impl.c"
      case 14: // $bb13
        var $71=HEAP[$end_addr]; //@line 531 "xmltok_impl.c"
        var $72=($71); //@line 531 "xmltok_impl.c"
        var $73=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $74=($73); //@line 531 "xmltok_impl.c"
        var $75=((($72) - ($74))&4294967295); //@line 531 "xmltok_impl.c"
        var $76=((($75))|0) <= 3; //@line 531 "xmltok_impl.c"
        if ($76) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 531 "xmltok_impl.c"
      case 15: // $bb14
        HEAP[$0]=-2; //@line 531 "xmltok_impl.c"
        __label__ = 102; break; //@line 531 "xmltok_impl.c"
      case 16: // $bb15
        var $77=HEAP[$ptr_addr]; //@line 531 "xmltok_impl.c"
        var $78=HEAP[$nextTokPtr_addr]; //@line 531 "xmltok_impl.c"
        HEAP[$78]=$77; //@line 531 "xmltok_impl.c"
        HEAP[$0]=0; //@line 531 "xmltok_impl.c"
        __label__ = 102; break; //@line 531 "xmltok_impl.c"
      case 17: // $bb16
        var $79=HEAP[$ptr_addr]; //@line 554 "xmltok_impl.c"
        var $80=(($79+2)&4294967295); //@line 554 "xmltok_impl.c"
        HEAP[$ptr_addr]=$80; //@line 554 "xmltok_impl.c"
        var $81=HEAP[$ptr_addr]; //@line 555 "xmltok_impl.c"
        var $82=HEAP[$end_addr]; //@line 555 "xmltok_impl.c"
        var $83=($81)==($82); //@line 555 "xmltok_impl.c"
        if ($83) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 555 "xmltok_impl.c"
      case 18: // $bb17
        HEAP[$0]=-1; //@line 556 "xmltok_impl.c"
        __label__ = 102; break; //@line 556 "xmltok_impl.c"
      case 19: // $bb18
        var $84=HEAP[$ptr_addr]; //@line 557 "xmltok_impl.c"
        var $85=(($84)&4294967295); //@line 557 "xmltok_impl.c"
        var $86=HEAP[$85]; //@line 557 "xmltok_impl.c"
        var $87=reSign(($86), 8, 0)==0; //@line 557 "xmltok_impl.c"
        if ($87) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 557 "xmltok_impl.c"
      case 20: // $bb19
        var $88=HEAP[$enc_addr]; //@line 557 "xmltok_impl.c"
        var $89=$88; //@line 557 "xmltok_impl.c"
        var $90=HEAP[$ptr_addr]; //@line 557 "xmltok_impl.c"
        var $91=(($90+1)&4294967295); //@line 557 "xmltok_impl.c"
        var $92=HEAP[$91]; //@line 557 "xmltok_impl.c"
        var $93=unSign(($92), 8, 0); //@line 557 "xmltok_impl.c"
        var $94=(($89+72)&4294967295); //@line 557 "xmltok_impl.c"
        var $95=(($94+$93)&4294967295); //@line 557 "xmltok_impl.c"
        var $96=HEAP[$95]; //@line 557 "xmltok_impl.c"
        var $97=unSign(($96), 8, 0); //@line 557 "xmltok_impl.c"
        HEAP[$iftmp_968]=$97; //@line 557 "xmltok_impl.c"
        __label__ = 22; break; //@line 557 "xmltok_impl.c"
      case 21: // $bb20
        var $98=HEAP[$ptr_addr]; //@line 557 "xmltok_impl.c"
        var $99=(($98+1)&4294967295); //@line 557 "xmltok_impl.c"
        var $100=HEAP[$99]; //@line 557 "xmltok_impl.c"
        var $101=reSign(($100), 8, 0); //@line 557 "xmltok_impl.c"
        var $102=HEAP[$ptr_addr]; //@line 557 "xmltok_impl.c"
        var $103=(($102)&4294967295); //@line 557 "xmltok_impl.c"
        var $104=HEAP[$103]; //@line 557 "xmltok_impl.c"
        var $105=reSign(($104), 8, 0); //@line 557 "xmltok_impl.c"
        var $106=((($105)) & 255); //@line 557 "xmltok_impl.c"
        var $107=((($101)) & 255); //@line 557 "xmltok_impl.c"
        var $108=_unicode_byte_type($106, $107); //@line 557 "xmltok_impl.c"
        HEAP[$iftmp_968]=$108; //@line 557 "xmltok_impl.c"
        __label__ = 22; break; //@line 557 "xmltok_impl.c"
      case 22: // $bb21
        var $109=HEAP[$iftmp_968]; //@line 557 "xmltok_impl.c"
        HEAP[$t]=$109; //@line 557 "xmltok_impl.c"
        var $110=HEAP[$t]; //@line 558 "xmltok_impl.c"
        var $111=((($110))|0)==14; //@line 558 "xmltok_impl.c"
        if ($111) { __label__ = 26; break; } else { __label__ = 23; break; } //@line 558 "xmltok_impl.c"
      case 23: // $bb22
        var $112=HEAP[$t]; //@line 560 "xmltok_impl.c"
        if ($112 == 9) {
          __label__ = 24; break;
        }
        else if ($112 == 10) {
          __label__ = 24; break;
        }
        else if ($112 == 21) {
          __label__ = 24; break;
        }
        else {
        __label__ = 25; break;
        }
        
      case 24: // $bb23
        __label__ = 17; break; //@line 560 "xmltok_impl.c"
      case 25: // $bb24
        var $113=HEAP[$ptr_addr]; //@line 566 "xmltok_impl.c"
        var $114=HEAP[$nextTokPtr_addr]; //@line 566 "xmltok_impl.c"
        HEAP[$114]=$113; //@line 566 "xmltok_impl.c"
        HEAP[$0]=0; //@line 567 "xmltok_impl.c"
        __label__ = 102; break; //@line 567 "xmltok_impl.c"
      case 26: // $bb25
        var $115=HEAP[$ptr_addr]; //@line 578 "xmltok_impl.c"
        var $116=(($115+2)&4294967295); //@line 578 "xmltok_impl.c"
        HEAP[$ptr_addr]=$116; //@line 578 "xmltok_impl.c"
        var $117=HEAP[$ptr_addr]; //@line 579 "xmltok_impl.c"
        var $118=HEAP[$end_addr]; //@line 579 "xmltok_impl.c"
        var $119=($117)==($118); //@line 579 "xmltok_impl.c"
        if ($119) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 579 "xmltok_impl.c"
      case 27: // $bb26
        HEAP[$0]=-1; //@line 580 "xmltok_impl.c"
        __label__ = 102; break; //@line 580 "xmltok_impl.c"
      case 28: // $bb27
        var $120=HEAP[$ptr_addr]; //@line 581 "xmltok_impl.c"
        var $121=(($120)&4294967295); //@line 581 "xmltok_impl.c"
        var $122=HEAP[$121]; //@line 581 "xmltok_impl.c"
        var $123=reSign(($122), 8, 0)==0; //@line 581 "xmltok_impl.c"
        if ($123) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 581 "xmltok_impl.c"
      case 29: // $bb28
        var $124=HEAP[$enc_addr]; //@line 581 "xmltok_impl.c"
        var $125=$124; //@line 581 "xmltok_impl.c"
        var $126=HEAP[$ptr_addr]; //@line 581 "xmltok_impl.c"
        var $127=(($126+1)&4294967295); //@line 581 "xmltok_impl.c"
        var $128=HEAP[$127]; //@line 581 "xmltok_impl.c"
        var $129=unSign(($128), 8, 0); //@line 581 "xmltok_impl.c"
        var $130=(($125+72)&4294967295); //@line 581 "xmltok_impl.c"
        var $131=(($130+$129)&4294967295); //@line 581 "xmltok_impl.c"
        var $132=HEAP[$131]; //@line 581 "xmltok_impl.c"
        var $133=unSign(($132), 8, 0); //@line 581 "xmltok_impl.c"
        HEAP[$iftmp_977]=$133; //@line 581 "xmltok_impl.c"
        __label__ = 31; break; //@line 581 "xmltok_impl.c"
      case 30: // $bb29
        var $134=HEAP[$ptr_addr]; //@line 581 "xmltok_impl.c"
        var $135=(($134+1)&4294967295); //@line 581 "xmltok_impl.c"
        var $136=HEAP[$135]; //@line 581 "xmltok_impl.c"
        var $137=reSign(($136), 8, 0); //@line 581 "xmltok_impl.c"
        var $138=HEAP[$ptr_addr]; //@line 581 "xmltok_impl.c"
        var $139=(($138)&4294967295); //@line 581 "xmltok_impl.c"
        var $140=HEAP[$139]; //@line 581 "xmltok_impl.c"
        var $141=reSign(($140), 8, 0); //@line 581 "xmltok_impl.c"
        var $142=((($141)) & 255); //@line 581 "xmltok_impl.c"
        var $143=((($137)) & 255); //@line 581 "xmltok_impl.c"
        var $144=_unicode_byte_type($142, $143); //@line 581 "xmltok_impl.c"
        HEAP[$iftmp_977]=$144; //@line 581 "xmltok_impl.c"
        __label__ = 31; break; //@line 581 "xmltok_impl.c"
      case 31: // $bb30
        var $145=HEAP[$iftmp_977]; //@line 581 "xmltok_impl.c"
        HEAP[$open]=$145; //@line 581 "xmltok_impl.c"
        var $146=HEAP[$open]; //@line 582 "xmltok_impl.c"
        var $147=((($146))|0)==12; //@line 582 "xmltok_impl.c"
        if ($147) { __label__ = 36; break; } else { __label__ = 32; break; } //@line 582 "xmltok_impl.c"
      case 32: // $bb31
        var $148=HEAP[$open]; //@line 582 "xmltok_impl.c"
        var $149=((($148))|0)==13; //@line 582 "xmltok_impl.c"
        if ($149) { __label__ = 36; break; } else { __label__ = 33; break; } //@line 582 "xmltok_impl.c"
      case 33: // $bb32
        var $150=HEAP[$open]; //@line 584 "xmltok_impl.c"
        if ($150 == 9) {
          __label__ = 34; break;
        }
        else if ($150 == 10) {
          __label__ = 34; break;
        }
        else if ($150 == 21) {
          __label__ = 34; break;
        }
        else {
        __label__ = 35; break;
        }
        
      case 34: // $bb33
        __label__ = 26; break; //@line 584 "xmltok_impl.c"
      case 35: // $bb34
        var $151=HEAP[$ptr_addr]; //@line 590 "xmltok_impl.c"
        var $152=HEAP[$nextTokPtr_addr]; //@line 590 "xmltok_impl.c"
        HEAP[$152]=$151; //@line 590 "xmltok_impl.c"
        HEAP[$0]=0; //@line 591 "xmltok_impl.c"
        __label__ = 102; break; //@line 591 "xmltok_impl.c"
      case 36: // $bb35
        var $153=HEAP[$ptr_addr]; //@line 594 "xmltok_impl.c"
        var $154=(($153+2)&4294967295); //@line 594 "xmltok_impl.c"
        HEAP[$ptr_addr]=$154; //@line 594 "xmltok_impl.c"
        __label__ = 37; break; //@line 594 "xmltok_impl.c"
      case 37: // $bb36
        var $155=HEAP[$ptr_addr]; //@line 598 "xmltok_impl.c"
        var $156=HEAP[$end_addr]; //@line 598 "xmltok_impl.c"
        var $157=($155)==($156); //@line 598 "xmltok_impl.c"
        if ($157) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 598 "xmltok_impl.c"
      case 38: // $bb38
        HEAP[$0]=-1; //@line 599 "xmltok_impl.c"
        __label__ = 102; break; //@line 599 "xmltok_impl.c"
      case 39: // $bb39
        var $158=HEAP[$ptr_addr]; //@line 600 "xmltok_impl.c"
        var $159=(($158)&4294967295); //@line 600 "xmltok_impl.c"
        var $160=HEAP[$159]; //@line 600 "xmltok_impl.c"
        var $161=reSign(($160), 8, 0)==0; //@line 600 "xmltok_impl.c"
        if ($161) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 600 "xmltok_impl.c"
      case 40: // $bb40
        var $162=HEAP[$enc_addr]; //@line 600 "xmltok_impl.c"
        var $163=$162; //@line 600 "xmltok_impl.c"
        var $164=HEAP[$ptr_addr]; //@line 600 "xmltok_impl.c"
        var $165=(($164+1)&4294967295); //@line 600 "xmltok_impl.c"
        var $166=HEAP[$165]; //@line 600 "xmltok_impl.c"
        var $167=unSign(($166), 8, 0); //@line 600 "xmltok_impl.c"
        var $168=(($163+72)&4294967295); //@line 600 "xmltok_impl.c"
        var $169=(($168+$167)&4294967295); //@line 600 "xmltok_impl.c"
        var $170=HEAP[$169]; //@line 600 "xmltok_impl.c"
        var $171=unSign(($170), 8, 0); //@line 600 "xmltok_impl.c"
        HEAP[$iftmp_986]=$171; //@line 600 "xmltok_impl.c"
        __label__ = 42; break; //@line 600 "xmltok_impl.c"
      case 41: // $bb41
        var $172=HEAP[$ptr_addr]; //@line 600 "xmltok_impl.c"
        var $173=(($172+1)&4294967295); //@line 600 "xmltok_impl.c"
        var $174=HEAP[$173]; //@line 600 "xmltok_impl.c"
        var $175=reSign(($174), 8, 0); //@line 600 "xmltok_impl.c"
        var $176=HEAP[$ptr_addr]; //@line 600 "xmltok_impl.c"
        var $177=(($176)&4294967295); //@line 600 "xmltok_impl.c"
        var $178=HEAP[$177]; //@line 600 "xmltok_impl.c"
        var $179=reSign(($178), 8, 0); //@line 600 "xmltok_impl.c"
        var $180=((($179)) & 255); //@line 600 "xmltok_impl.c"
        var $181=((($175)) & 255); //@line 600 "xmltok_impl.c"
        var $182=_unicode_byte_type($180, $181); //@line 600 "xmltok_impl.c"
        HEAP[$iftmp_986]=$182; //@line 600 "xmltok_impl.c"
        __label__ = 42; break; //@line 600 "xmltok_impl.c"
      case 42: // $bb42
        var $183=HEAP[$iftmp_986]; //@line 600 "xmltok_impl.c"
        HEAP[$t37]=$183; //@line 600 "xmltok_impl.c"
        var $184=HEAP[$t37]; //@line 601 "xmltok_impl.c"
        var $185=HEAP[$open]; //@line 601 "xmltok_impl.c"
        var $186=((($184))|0)==((($185))|0); //@line 601 "xmltok_impl.c"
        if ($186) { __label__ = 62; break; } else { __label__ = 43; break; } //@line 601 "xmltok_impl.c"
      case 43: // $bb43
        var $187=HEAP[$t37]; //@line 603 "xmltok_impl.c"
        if ($187 == 0) {
          __label__ = 53; break;
        }
        else if ($187 == 1) {
          __label__ = 53; break;
        }
        else if ($187 == 2) {
          __label__ = 59; break;
        }
        else if ($187 == 3) {
          __label__ = 54; break;
        }
        else if ($187 == 5) {
          __label__ = 44; break;
        }
        else if ($187 == 6) {
          __label__ = 47; break;
        }
        else if ($187 == 7) {
          __label__ = 50; break;
        }
        else if ($187 == 8) {
          __label__ = 53; break;
        }
        else {
        __label__ = 60; break;
        }
        
      case 44: // $bb44
        var $188=HEAP[$end_addr]; //@line 604 "xmltok_impl.c"
        var $189=($188); //@line 604 "xmltok_impl.c"
        var $190=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $191=($190); //@line 604 "xmltok_impl.c"
        var $192=((($189) - ($191))&4294967295); //@line 604 "xmltok_impl.c"
        var $193=((($192))|0) <= 1; //@line 604 "xmltok_impl.c"
        if ($193) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 604 "xmltok_impl.c"
      case 45: // $bb45
        HEAP[$0]=-2; //@line 604 "xmltok_impl.c"
        __label__ = 102; break; //@line 604 "xmltok_impl.c"
      case 46: // $bb46
        var $194=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $195=(($194+2)&4294967295); //@line 604 "xmltok_impl.c"
        HEAP[$ptr_addr]=$195; //@line 604 "xmltok_impl.c"
        __label__ = 61; break; //@line 604 "xmltok_impl.c"
      case 47: // $bb47
        var $196=HEAP[$end_addr]; //@line 604 "xmltok_impl.c"
        var $197=($196); //@line 604 "xmltok_impl.c"
        var $198=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $199=($198); //@line 604 "xmltok_impl.c"
        var $200=((($197) - ($199))&4294967295); //@line 604 "xmltok_impl.c"
        var $201=((($200))|0) <= 2; //@line 604 "xmltok_impl.c"
        if ($201) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 604 "xmltok_impl.c"
      case 48: // $bb48
        HEAP[$0]=-2; //@line 604 "xmltok_impl.c"
        __label__ = 102; break; //@line 604 "xmltok_impl.c"
      case 49: // $bb49
        var $202=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $203=(($202+3)&4294967295); //@line 604 "xmltok_impl.c"
        HEAP[$ptr_addr]=$203; //@line 604 "xmltok_impl.c"
        __label__ = 61; break; //@line 604 "xmltok_impl.c"
      case 50: // $bb50
        var $204=HEAP[$end_addr]; //@line 604 "xmltok_impl.c"
        var $205=($204); //@line 604 "xmltok_impl.c"
        var $206=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $207=($206); //@line 604 "xmltok_impl.c"
        var $208=((($205) - ($207))&4294967295); //@line 604 "xmltok_impl.c"
        var $209=((($208))|0) <= 3; //@line 604 "xmltok_impl.c"
        if ($209) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 604 "xmltok_impl.c"
      case 51: // $bb51
        HEAP[$0]=-2; //@line 604 "xmltok_impl.c"
        __label__ = 102; break; //@line 604 "xmltok_impl.c"
      case 52: // $bb52
        var $210=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $211=(($210+4)&4294967295); //@line 604 "xmltok_impl.c"
        HEAP[$ptr_addr]=$211; //@line 604 "xmltok_impl.c"
        __label__ = 61; break; //@line 604 "xmltok_impl.c"
      case 53: // $bb53
        var $212=HEAP[$ptr_addr]; //@line 604 "xmltok_impl.c"
        var $213=HEAP[$nextTokPtr_addr]; //@line 604 "xmltok_impl.c"
        HEAP[$213]=$212; //@line 604 "xmltok_impl.c"
        HEAP[$0]=0; //@line 604 "xmltok_impl.c"
        __label__ = 102; break; //@line 604 "xmltok_impl.c"
      case 54: // $bb54
        var $214=HEAP[$ptr_addr]; //@line 607 "xmltok_impl.c"
        var $215=(($214+2)&4294967295); //@line 607 "xmltok_impl.c"
        var $216=HEAP[$enc_addr]; //@line 607 "xmltok_impl.c"
        var $217=HEAP[$end_addr]; //@line 607 "xmltok_impl.c"
        var $218=_big2_scanRef($216, $215, $217, $ptr_addr); //@line 607 "xmltok_impl.c"
        HEAP[$tok]=$218; //@line 607 "xmltok_impl.c"
        var $219=HEAP[$tok]; //@line 608 "xmltok_impl.c"
        var $220=((($219))|0) <= 0; //@line 608 "xmltok_impl.c"
        if ($220) { __label__ = 55; break; } else { __label__ = 58; break; } //@line 608 "xmltok_impl.c"
      case 55: // $bb55
        var $221=HEAP[$tok]; //@line 609 "xmltok_impl.c"
        var $222=((($221))|0)==0; //@line 609 "xmltok_impl.c"
        if ($222) { __label__ = 56; break; } else { __label__ = 57; break; } //@line 609 "xmltok_impl.c"
      case 56: // $bb56
        var $223=HEAP[$ptr_addr]; //@line 610 "xmltok_impl.c"
        var $224=HEAP[$nextTokPtr_addr]; //@line 610 "xmltok_impl.c"
        HEAP[$224]=$223; //@line 610 "xmltok_impl.c"
        __label__ = 57; break; //@line 610 "xmltok_impl.c"
      case 57: // $bb57
        var $225=HEAP[$tok]; //@line 611 "xmltok_impl.c"
        HEAP[$0]=$225; //@line 611 "xmltok_impl.c"
        __label__ = 102; break; //@line 611 "xmltok_impl.c"
      case 58: // $bb58
        __label__ = 61; break; //@line 611 "xmltok_impl.c"
      case 59: // $bb59
        var $226=HEAP[$ptr_addr]; //@line 616 "xmltok_impl.c"
        var $227=HEAP[$nextTokPtr_addr]; //@line 616 "xmltok_impl.c"
        HEAP[$227]=$226; //@line 616 "xmltok_impl.c"
        HEAP[$0]=0; //@line 617 "xmltok_impl.c"
        __label__ = 102; break; //@line 617 "xmltok_impl.c"
      case 60: // $bb60
        var $228=HEAP[$ptr_addr]; //@line 619 "xmltok_impl.c"
        var $229=(($228+2)&4294967295); //@line 619 "xmltok_impl.c"
        HEAP[$ptr_addr]=$229; //@line 619 "xmltok_impl.c"
        __label__ = 61; break; //@line 619 "xmltok_impl.c"
      case 61: // $bb61
        __label__ = 37; break; //@line 619 "xmltok_impl.c"
      case 62: // $bb62
        var $230=HEAP[$ptr_addr]; //@line 623 "xmltok_impl.c"
        var $231=(($230+2)&4294967295); //@line 623 "xmltok_impl.c"
        HEAP[$ptr_addr]=$231; //@line 623 "xmltok_impl.c"
        var $232=HEAP[$ptr_addr]; //@line 624 "xmltok_impl.c"
        var $233=HEAP[$end_addr]; //@line 624 "xmltok_impl.c"
        var $234=($232)==($233); //@line 624 "xmltok_impl.c"
        if ($234) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 624 "xmltok_impl.c"
      case 63: // $bb63
        HEAP[$0]=-1; //@line 625 "xmltok_impl.c"
        __label__ = 102; break; //@line 625 "xmltok_impl.c"
      case 64: // $bb64
        var $235=HEAP[$ptr_addr]; //@line 626 "xmltok_impl.c"
        var $236=(($235)&4294967295); //@line 626 "xmltok_impl.c"
        var $237=HEAP[$236]; //@line 626 "xmltok_impl.c"
        var $238=reSign(($237), 8, 0)==0; //@line 626 "xmltok_impl.c"
        if ($238) { __label__ = 65; break; } else { __label__ = 66; break; } //@line 626 "xmltok_impl.c"
      case 65: // $bb65
        var $239=HEAP[$enc_addr]; //@line 626 "xmltok_impl.c"
        var $240=$239; //@line 626 "xmltok_impl.c"
        var $241=HEAP[$ptr_addr]; //@line 626 "xmltok_impl.c"
        var $242=(($241+1)&4294967295); //@line 626 "xmltok_impl.c"
        var $243=HEAP[$242]; //@line 626 "xmltok_impl.c"
        var $244=unSign(($243), 8, 0); //@line 626 "xmltok_impl.c"
        var $245=(($240+72)&4294967295); //@line 626 "xmltok_impl.c"
        var $246=(($245+$244)&4294967295); //@line 626 "xmltok_impl.c"
        var $247=HEAP[$246]; //@line 626 "xmltok_impl.c"
        var $248=unSign(($247), 8, 0); //@line 626 "xmltok_impl.c"
        HEAP[$iftmp_1014]=$248; //@line 626 "xmltok_impl.c"
        __label__ = 67; break; //@line 626 "xmltok_impl.c"
      case 66: // $bb66
        var $249=HEAP[$ptr_addr]; //@line 626 "xmltok_impl.c"
        var $250=(($249+1)&4294967295); //@line 626 "xmltok_impl.c"
        var $251=HEAP[$250]; //@line 626 "xmltok_impl.c"
        var $252=reSign(($251), 8, 0); //@line 626 "xmltok_impl.c"
        var $253=HEAP[$ptr_addr]; //@line 626 "xmltok_impl.c"
        var $254=(($253)&4294967295); //@line 626 "xmltok_impl.c"
        var $255=HEAP[$254]; //@line 626 "xmltok_impl.c"
        var $256=reSign(($255), 8, 0); //@line 626 "xmltok_impl.c"
        var $257=((($256)) & 255); //@line 626 "xmltok_impl.c"
        var $258=((($252)) & 255); //@line 626 "xmltok_impl.c"
        var $259=_unicode_byte_type($257, $258); //@line 626 "xmltok_impl.c"
        HEAP[$iftmp_1014]=$259; //@line 626 "xmltok_impl.c"
        __label__ = 67; break; //@line 626 "xmltok_impl.c"
      case 67: // $bb67
        var $260=HEAP[$iftmp_1014]; //@line 626 "xmltok_impl.c"
        if ($260 == 9) {
          __label__ = 68; break;
        }
        else if ($260 == 10) {
          __label__ = 68; break;
        }
        else if ($260 == 11) {
          __label__ = 70; break;
        }
        else if ($260 == 17) {
          __label__ = 69; break;
        }
        else if ($260 == 21) {
          __label__ = 68; break;
        }
        else {
        __label__ = 71; break;
        }
        
      case 68: // $bb68
        __label__ = 72; break; //@line 626 "xmltok_impl.c"
      case 69: // $bb69
        __label__ = 92; break; //@line 626 "xmltok_impl.c"
      case 70: // $bb70
        __label__ = 91; break; //@line 626 "xmltok_impl.c"
      case 71: // $bb71
        var $261=HEAP[$ptr_addr]; //@line 636 "xmltok_impl.c"
        var $262=HEAP[$nextTokPtr_addr]; //@line 636 "xmltok_impl.c"
        HEAP[$262]=$261; //@line 636 "xmltok_impl.c"
        HEAP[$0]=0; //@line 637 "xmltok_impl.c"
        __label__ = 102; break; //@line 637 "xmltok_impl.c"
      case 72: // $bb72
        var $263=HEAP[$ptr_addr]; //@line 641 "xmltok_impl.c"
        var $264=(($263+2)&4294967295); //@line 641 "xmltok_impl.c"
        HEAP[$ptr_addr]=$264; //@line 641 "xmltok_impl.c"
        var $265=HEAP[$ptr_addr]; //@line 642 "xmltok_impl.c"
        var $266=HEAP[$end_addr]; //@line 642 "xmltok_impl.c"
        var $267=($265)==($266); //@line 642 "xmltok_impl.c"
        if ($267) { __label__ = 73; break; } else { __label__ = 74; break; } //@line 642 "xmltok_impl.c"
      case 73: // $bb73
        HEAP[$0]=-1; //@line 643 "xmltok_impl.c"
        __label__ = 102; break; //@line 643 "xmltok_impl.c"
      case 74: // $bb74
        var $268=HEAP[$ptr_addr]; //@line 644 "xmltok_impl.c"
        var $269=(($268)&4294967295); //@line 644 "xmltok_impl.c"
        var $270=HEAP[$269]; //@line 644 "xmltok_impl.c"
        var $271=reSign(($270), 8, 0)==0; //@line 644 "xmltok_impl.c"
        if ($271) { __label__ = 75; break; } else { __label__ = 76; break; } //@line 644 "xmltok_impl.c"
      case 75: // $bb75
        var $272=HEAP[$enc_addr]; //@line 644 "xmltok_impl.c"
        var $273=$272; //@line 644 "xmltok_impl.c"
        var $274=HEAP[$ptr_addr]; //@line 644 "xmltok_impl.c"
        var $275=(($274+1)&4294967295); //@line 644 "xmltok_impl.c"
        var $276=HEAP[$275]; //@line 644 "xmltok_impl.c"
        var $277=unSign(($276), 8, 0); //@line 644 "xmltok_impl.c"
        var $278=(($273+72)&4294967295); //@line 644 "xmltok_impl.c"
        var $279=(($278+$277)&4294967295); //@line 644 "xmltok_impl.c"
        var $280=HEAP[$279]; //@line 644 "xmltok_impl.c"
        var $281=unSign(($280), 8, 0); //@line 644 "xmltok_impl.c"
        HEAP[$iftmp_1023]=$281; //@line 644 "xmltok_impl.c"
        __label__ = 77; break; //@line 644 "xmltok_impl.c"
      case 76: // $bb76
        var $282=HEAP[$ptr_addr]; //@line 644 "xmltok_impl.c"
        var $283=(($282+1)&4294967295); //@line 644 "xmltok_impl.c"
        var $284=HEAP[$283]; //@line 644 "xmltok_impl.c"
        var $285=reSign(($284), 8, 0); //@line 644 "xmltok_impl.c"
        var $286=HEAP[$ptr_addr]; //@line 644 "xmltok_impl.c"
        var $287=(($286)&4294967295); //@line 644 "xmltok_impl.c"
        var $288=HEAP[$287]; //@line 644 "xmltok_impl.c"
        var $289=reSign(($288), 8, 0); //@line 644 "xmltok_impl.c"
        var $290=((($289)) & 255); //@line 644 "xmltok_impl.c"
        var $291=((($285)) & 255); //@line 644 "xmltok_impl.c"
        var $292=_unicode_byte_type($290, $291); //@line 644 "xmltok_impl.c"
        HEAP[$iftmp_1023]=$292; //@line 644 "xmltok_impl.c"
        __label__ = 77; break; //@line 644 "xmltok_impl.c"
      case 77: // $bb77
        var $293=HEAP[$iftmp_1023]; //@line 644 "xmltok_impl.c"
        if ($293 == 5) {
          __label__ = 81; break;
        }
        else if ($293 == 6) {
          __label__ = 84; break;
        }
        else if ($293 == 7) {
          __label__ = 87; break;
        }
        else if ($293 == 9) {
          __label__ = 90; break;
        }
        else if ($293 == 10) {
          __label__ = 90; break;
        }
        else if ($293 == 11) {
          __label__ = 91; break;
        }
        else if ($293 == 17) {
          __label__ = 92; break;
        }
        else if ($293 == 21) {
          __label__ = 90; break;
        }
        else if ($293 == 22) {
          __label__ = 80; break;
        }
        else if ($293 == 24) {
          __label__ = 80; break;
        }
        else if ($293 == 29) {
          __label__ = 78; break;
        }
        else {
        __label__ = 98; break;
        }
        
      case 78: // $bb78
        var $294=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $295=(($294)&4294967295); //@line 645 "xmltok_impl.c"
        var $296=HEAP[$295]; //@line 645 "xmltok_impl.c"
        var $297=unSign(($296), 8, 0); //@line 645 "xmltok_impl.c"
        var $298=((_nmstrtPages+$297)&4294967295); //@line 645 "xmltok_impl.c"
        var $299=HEAP[$298]; //@line 645 "xmltok_impl.c"
        var $300=unSign(($299), 8, 0); //@line 645 "xmltok_impl.c"
        var $301=($300) << 3; //@line 645 "xmltok_impl.c"
        var $302=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $303=(($302+1)&4294967295); //@line 645 "xmltok_impl.c"
        var $304=HEAP[$303]; //@line 645 "xmltok_impl.c"
        var $305=unSign(($304), 8, 0) >>> 5; //@line 645 "xmltok_impl.c"
        var $306=unSign(($305), 8, 0); //@line 645 "xmltok_impl.c"
        var $307=((($301) + ($306))&4294967295); //@line 645 "xmltok_impl.c"
        var $308=((_namingBitmap+$307*4)&4294967295); //@line 645 "xmltok_impl.c"
        var $309=HEAP[$308]; //@line 645 "xmltok_impl.c"
        var $310=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $311=(($310+1)&4294967295); //@line 645 "xmltok_impl.c"
        var $312=HEAP[$311]; //@line 645 "xmltok_impl.c"
        var $313=unSign(($312), 8, 0); //@line 645 "xmltok_impl.c"
        var $314=($313) & 31; //@line 645 "xmltok_impl.c"
        var $315=1 << ($314); //@line 645 "xmltok_impl.c"
        var $316=($309) & ($315); //@line 645 "xmltok_impl.c"
        var $317=((($316))|0)==0; //@line 645 "xmltok_impl.c"
        if ($317) { __label__ = 79; break; } else { __label__ = 80; break; } //@line 645 "xmltok_impl.c"
      case 79: // $bb79
        var $318=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $319=HEAP[$nextTokPtr_addr]; //@line 645 "xmltok_impl.c"
        HEAP[$319]=$318; //@line 645 "xmltok_impl.c"
        HEAP[$0]=0; //@line 645 "xmltok_impl.c"
        __label__ = 102; break; //@line 645 "xmltok_impl.c"
      case 80: // $bb80
        var $320=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $321=(($320+2)&4294967295); //@line 645 "xmltok_impl.c"
        HEAP[$ptr_addr]=$321; //@line 645 "xmltok_impl.c"
        __label__ = 100; break; //@line 645 "xmltok_impl.c"
      case 81: // $bb81
        var $322=HEAP[$end_addr]; //@line 645 "xmltok_impl.c"
        var $323=($322); //@line 645 "xmltok_impl.c"
        var $324=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $325=($324); //@line 645 "xmltok_impl.c"
        var $326=((($323) - ($325))&4294967295); //@line 645 "xmltok_impl.c"
        var $327=((($326))|0) <= 1; //@line 645 "xmltok_impl.c"
        if ($327) { __label__ = 82; break; } else { __label__ = 83; break; } //@line 645 "xmltok_impl.c"
      case 82: // $bb82
        HEAP[$0]=-2; //@line 645 "xmltok_impl.c"
        __label__ = 102; break; //@line 645 "xmltok_impl.c"
      case 83: // $bb83
        var $328=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $329=HEAP[$nextTokPtr_addr]; //@line 645 "xmltok_impl.c"
        HEAP[$329]=$328; //@line 645 "xmltok_impl.c"
        HEAP[$0]=0; //@line 645 "xmltok_impl.c"
        __label__ = 102; break; //@line 645 "xmltok_impl.c"
      case 84: // $bb84
        var $330=HEAP[$end_addr]; //@line 645 "xmltok_impl.c"
        var $331=($330); //@line 645 "xmltok_impl.c"
        var $332=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $333=($332); //@line 645 "xmltok_impl.c"
        var $334=((($331) - ($333))&4294967295); //@line 645 "xmltok_impl.c"
        var $335=((($334))|0) <= 2; //@line 645 "xmltok_impl.c"
        if ($335) { __label__ = 85; break; } else { __label__ = 86; break; } //@line 645 "xmltok_impl.c"
      case 85: // $bb85
        HEAP[$0]=-2; //@line 645 "xmltok_impl.c"
        __label__ = 102; break; //@line 645 "xmltok_impl.c"
      case 86: // $bb86
        var $336=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $337=HEAP[$nextTokPtr_addr]; //@line 645 "xmltok_impl.c"
        HEAP[$337]=$336; //@line 645 "xmltok_impl.c"
        HEAP[$0]=0; //@line 645 "xmltok_impl.c"
        __label__ = 102; break; //@line 645 "xmltok_impl.c"
      case 87: // $bb87
        var $338=HEAP[$end_addr]; //@line 645 "xmltok_impl.c"
        var $339=($338); //@line 645 "xmltok_impl.c"
        var $340=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $341=($340); //@line 645 "xmltok_impl.c"
        var $342=((($339) - ($341))&4294967295); //@line 645 "xmltok_impl.c"
        var $343=((($342))|0) <= 3; //@line 645 "xmltok_impl.c"
        if ($343) { __label__ = 88; break; } else { __label__ = 89; break; } //@line 645 "xmltok_impl.c"
      case 88: // $bb88
        HEAP[$0]=-2; //@line 645 "xmltok_impl.c"
        __label__ = 102; break; //@line 645 "xmltok_impl.c"
      case 89: // $bb89
        var $344=HEAP[$ptr_addr]; //@line 645 "xmltok_impl.c"
        var $345=HEAP[$nextTokPtr_addr]; //@line 645 "xmltok_impl.c"
        HEAP[$345]=$344; //@line 645 "xmltok_impl.c"
        HEAP[$0]=0; //@line 645 "xmltok_impl.c"
        __label__ = 102; break; //@line 645 "xmltok_impl.c"
      case 90: // $bb90
        __label__ = 72; break; //@line 645 "xmltok_impl.c"
      case 91: // $gt
        var $346=HEAP[$ptr_addr]; //@line 650 "xmltok_impl.c"
        var $347=(($346+2)&4294967295); //@line 650 "xmltok_impl.c"
        var $348=HEAP[$nextTokPtr_addr]; //@line 650 "xmltok_impl.c"
        HEAP[$348]=$347; //@line 650 "xmltok_impl.c"
        HEAP[$0]=1; //@line 651 "xmltok_impl.c"
        __label__ = 102; break; //@line 651 "xmltok_impl.c"
      case 92: // $sol
        var $349=HEAP[$ptr_addr]; //@line 654 "xmltok_impl.c"
        var $350=(($349+2)&4294967295); //@line 654 "xmltok_impl.c"
        HEAP[$ptr_addr]=$350; //@line 654 "xmltok_impl.c"
        var $351=HEAP[$ptr_addr]; //@line 655 "xmltok_impl.c"
        var $352=HEAP[$end_addr]; //@line 655 "xmltok_impl.c"
        var $353=($351)==($352); //@line 655 "xmltok_impl.c"
        if ($353) { __label__ = 93; break; } else { __label__ = 94; break; } //@line 655 "xmltok_impl.c"
      case 93: // $bb91
        HEAP[$0]=-1; //@line 656 "xmltok_impl.c"
        __label__ = 102; break; //@line 656 "xmltok_impl.c"
      case 94: // $bb92
        var $354=HEAP[$ptr_addr]; //@line 657 "xmltok_impl.c"
        var $355=(($354)&4294967295); //@line 657 "xmltok_impl.c"
        var $356=HEAP[$355]; //@line 657 "xmltok_impl.c"
        var $357=reSign(($356), 8, 0)!=0; //@line 657 "xmltok_impl.c"
        if ($357) { __label__ = 96; break; } else { __label__ = 95; break; } //@line 657 "xmltok_impl.c"
      case 95: // $bb93
        var $358=HEAP[$ptr_addr]; //@line 657 "xmltok_impl.c"
        var $359=(($358+1)&4294967295); //@line 657 "xmltok_impl.c"
        var $360=HEAP[$359]; //@line 657 "xmltok_impl.c"
        var $361=reSign(($360), 8, 0)!=62; //@line 657 "xmltok_impl.c"
        if ($361) { __label__ = 96; break; } else { __label__ = 97; break; } //@line 657 "xmltok_impl.c"
      case 96: // $bb94
        var $362=HEAP[$ptr_addr]; //@line 658 "xmltok_impl.c"
        var $363=HEAP[$nextTokPtr_addr]; //@line 658 "xmltok_impl.c"
        HEAP[$363]=$362; //@line 658 "xmltok_impl.c"
        HEAP[$0]=0; //@line 659 "xmltok_impl.c"
        __label__ = 102; break; //@line 659 "xmltok_impl.c"
      case 97: // $bb95
        var $364=HEAP[$ptr_addr]; //@line 661 "xmltok_impl.c"
        var $365=(($364+2)&4294967295); //@line 661 "xmltok_impl.c"
        var $366=HEAP[$nextTokPtr_addr]; //@line 661 "xmltok_impl.c"
        HEAP[$366]=$365; //@line 661 "xmltok_impl.c"
        HEAP[$0]=3; //@line 662 "xmltok_impl.c"
        __label__ = 102; break; //@line 662 "xmltok_impl.c"
      case 98: // $bb96
        var $367=HEAP[$ptr_addr]; //@line 664 "xmltok_impl.c"
        var $368=HEAP[$nextTokPtr_addr]; //@line 664 "xmltok_impl.c"
        HEAP[$368]=$367; //@line 664 "xmltok_impl.c"
        HEAP[$0]=0; //@line 665 "xmltok_impl.c"
        __label__ = 102; break; //@line 665 "xmltok_impl.c"
      case 99: // $bb97
        var $369=HEAP[$ptr_addr]; //@line 672 "xmltok_impl.c"
        var $370=HEAP[$nextTokPtr_addr]; //@line 672 "xmltok_impl.c"
        HEAP[$370]=$369; //@line 672 "xmltok_impl.c"
        HEAP[$0]=0; //@line 673 "xmltok_impl.c"
        __label__ = 102; break; //@line 673 "xmltok_impl.c"
      case 100: // $bb98
        var $371=HEAP[$ptr_addr]; //@line 529 "xmltok_impl.c"
        var $372=HEAP[$end_addr]; //@line 529 "xmltok_impl.c"
        var $373=($371)!=($372); //@line 529 "xmltok_impl.c"
        if ($373) { __label__ = 1; break; } else { __label__ = 101; break; } //@line 529 "xmltok_impl.c"
      case 101: // $bb99
        HEAP[$0]=-1; //@line 676 "xmltok_impl.c"
        __label__ = 102; break; //@line 676 "xmltok_impl.c"
      case 102: // $bb100
        var $374=HEAP[$0]; //@line 531 "xmltok_impl.c"
        HEAP[$retval]=$374; //@line 531 "xmltok_impl.c"
        __label__ = 103; break; //@line 531 "xmltok_impl.c"
      case 103: // $return
        var $retval101=HEAP[$retval]; //@line 531 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval101; //@line 531 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_scanLt($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_1077=__stackBase__+20;
        var $iftmp_1069=__stackBase__+24;
        var $iftmp_1067=__stackBase__+28;
        var $iftmp_1059=__stackBase__+32;
        var $0=__stackBase__+36;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 688 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 688 "xmltok_impl.c"
        var $3=($1)==($2); //@line 688 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 688 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 689 "xmltok_impl.c"
        __label__ = 79; break; //@line 689 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$ptr_addr]; //@line 690 "xmltok_impl.c"
        var $5=(($4)&4294967295); //@line 690 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 690 "xmltok_impl.c"
        var $7=reSign(($6), 8, 0)==0; //@line 690 "xmltok_impl.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 690 "xmltok_impl.c"
      case 3: // $bb2
        var $8=HEAP[$enc_addr]; //@line 690 "xmltok_impl.c"
        var $9=$8; //@line 690 "xmltok_impl.c"
        var $10=HEAP[$ptr_addr]; //@line 690 "xmltok_impl.c"
        var $11=(($10+1)&4294967295); //@line 690 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 690 "xmltok_impl.c"
        var $13=unSign(($12), 8, 0); //@line 690 "xmltok_impl.c"
        var $14=(($9+72)&4294967295); //@line 690 "xmltok_impl.c"
        var $15=(($14+$13)&4294967295); //@line 690 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 690 "xmltok_impl.c"
        var $17=unSign(($16), 8, 0); //@line 690 "xmltok_impl.c"
        HEAP[$iftmp_1059]=$17; //@line 690 "xmltok_impl.c"
        __label__ = 5; break; //@line 690 "xmltok_impl.c"
      case 4: // $bb3
        var $18=HEAP[$ptr_addr]; //@line 690 "xmltok_impl.c"
        var $19=(($18+1)&4294967295); //@line 690 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 690 "xmltok_impl.c"
        var $21=reSign(($20), 8, 0); //@line 690 "xmltok_impl.c"
        var $22=HEAP[$ptr_addr]; //@line 690 "xmltok_impl.c"
        var $23=(($22)&4294967295); //@line 690 "xmltok_impl.c"
        var $24=HEAP[$23]; //@line 690 "xmltok_impl.c"
        var $25=reSign(($24), 8, 0); //@line 690 "xmltok_impl.c"
        var $26=((($25)) & 255); //@line 690 "xmltok_impl.c"
        var $27=((($21)) & 255); //@line 690 "xmltok_impl.c"
        var $28=_unicode_byte_type($26, $27); //@line 690 "xmltok_impl.c"
        HEAP[$iftmp_1059]=$28; //@line 690 "xmltok_impl.c"
        __label__ = 5; break; //@line 690 "xmltok_impl.c"
      case 5: // $bb4
        var $29=HEAP[$iftmp_1059]; //@line 690 "xmltok_impl.c"
        if ($29 == 5) {
          __label__ = 9; break;
        }
        else if ($29 == 6) {
          __label__ = 12; break;
        }
        else if ($29 == 7) {
          __label__ = 15; break;
        }
        else if ($29 == 15) {
          __label__ = 27; break;
        }
        else if ($29 == 16) {
          __label__ = 18; break;
        }
        else if ($29 == 17) {
          __label__ = 28; break;
        }
        else if ($29 == 22) {
          __label__ = 8; break;
        }
        else if ($29 == 24) {
          __label__ = 8; break;
        }
        else if ($29 == 29) {
          __label__ = 6; break;
        }
        else {
        __label__ = 29; break;
        }
        
      case 6: // $bb5
        var $30=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        var $31=(($30)&4294967295); //@line 691 "xmltok_impl.c"
        var $32=HEAP[$31]; //@line 691 "xmltok_impl.c"
        var $33=unSign(($32), 8, 0); //@line 691 "xmltok_impl.c"
        var $34=((_nmstrtPages+$33)&4294967295); //@line 691 "xmltok_impl.c"
        var $35=HEAP[$34]; //@line 691 "xmltok_impl.c"
        var $36=unSign(($35), 8, 0); //@line 691 "xmltok_impl.c"
        var $37=($36) << 3; //@line 691 "xmltok_impl.c"
        var $38=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        var $39=(($38+1)&4294967295); //@line 691 "xmltok_impl.c"
        var $40=HEAP[$39]; //@line 691 "xmltok_impl.c"
        var $41=unSign(($40), 8, 0) >>> 5; //@line 691 "xmltok_impl.c"
        var $42=unSign(($41), 8, 0); //@line 691 "xmltok_impl.c"
        var $43=((($37) + ($42))&4294967295); //@line 691 "xmltok_impl.c"
        var $44=((_namingBitmap+$43*4)&4294967295); //@line 691 "xmltok_impl.c"
        var $45=HEAP[$44]; //@line 691 "xmltok_impl.c"
        var $46=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        var $47=(($46+1)&4294967295); //@line 691 "xmltok_impl.c"
        var $48=HEAP[$47]; //@line 691 "xmltok_impl.c"
        var $49=unSign(($48), 8, 0); //@line 691 "xmltok_impl.c"
        var $50=($49) & 31; //@line 691 "xmltok_impl.c"
        var $51=1 << ($50); //@line 691 "xmltok_impl.c"
        var $52=($45) & ($51); //@line 691 "xmltok_impl.c"
        var $53=((($52))|0)==0; //@line 691 "xmltok_impl.c"
        if ($53) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 691 "xmltok_impl.c"
      case 7: // $bb6
        var $54=HEAP[$nextTokPtr_addr]; //@line 691 "xmltok_impl.c"
        var $55=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        HEAP[$54]=$55; //@line 691 "xmltok_impl.c"
        HEAP[$0]=0; //@line 691 "xmltok_impl.c"
        __label__ = 79; break; //@line 691 "xmltok_impl.c"
      case 8: // $bb7
        var $56=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        var $57=(($56+2)&4294967295); //@line 691 "xmltok_impl.c"
        HEAP[$ptr_addr]=$57; //@line 691 "xmltok_impl.c"
        __label__ = 77; break; //@line 691 "xmltok_impl.c"
      case 9: // $bb8
        var $58=HEAP[$end_addr]; //@line 691 "xmltok_impl.c"
        var $59=($58); //@line 691 "xmltok_impl.c"
        var $60=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        var $61=($60); //@line 691 "xmltok_impl.c"
        var $62=((($59) - ($61))&4294967295); //@line 691 "xmltok_impl.c"
        var $63=((($62))|0) <= 1; //@line 691 "xmltok_impl.c"
        if ($63) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 691 "xmltok_impl.c"
      case 10: // $bb9
        HEAP[$0]=-2; //@line 691 "xmltok_impl.c"
        __label__ = 79; break; //@line 691 "xmltok_impl.c"
      case 11: // $bb10
        var $64=HEAP[$nextTokPtr_addr]; //@line 691 "xmltok_impl.c"
        var $65=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        HEAP[$64]=$65; //@line 691 "xmltok_impl.c"
        HEAP[$0]=0; //@line 691 "xmltok_impl.c"
        __label__ = 79; break; //@line 691 "xmltok_impl.c"
      case 12: // $bb11
        var $66=HEAP[$end_addr]; //@line 691 "xmltok_impl.c"
        var $67=($66); //@line 691 "xmltok_impl.c"
        var $68=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        var $69=($68); //@line 691 "xmltok_impl.c"
        var $70=((($67) - ($69))&4294967295); //@line 691 "xmltok_impl.c"
        var $71=((($70))|0) <= 2; //@line 691 "xmltok_impl.c"
        if ($71) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 691 "xmltok_impl.c"
      case 13: // $bb12
        HEAP[$0]=-2; //@line 691 "xmltok_impl.c"
        __label__ = 79; break; //@line 691 "xmltok_impl.c"
      case 14: // $bb13
        var $72=HEAP[$nextTokPtr_addr]; //@line 691 "xmltok_impl.c"
        var $73=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        HEAP[$72]=$73; //@line 691 "xmltok_impl.c"
        HEAP[$0]=0; //@line 691 "xmltok_impl.c"
        __label__ = 79; break; //@line 691 "xmltok_impl.c"
      case 15: // $bb14
        var $74=HEAP[$end_addr]; //@line 691 "xmltok_impl.c"
        var $75=($74); //@line 691 "xmltok_impl.c"
        var $76=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        var $77=($76); //@line 691 "xmltok_impl.c"
        var $78=((($75) - ($77))&4294967295); //@line 691 "xmltok_impl.c"
        var $79=((($78))|0) <= 3; //@line 691 "xmltok_impl.c"
        if ($79) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 691 "xmltok_impl.c"
      case 16: // $bb15
        HEAP[$0]=-2; //@line 691 "xmltok_impl.c"
        __label__ = 79; break; //@line 691 "xmltok_impl.c"
      case 17: // $bb16
        var $80=HEAP[$nextTokPtr_addr]; //@line 691 "xmltok_impl.c"
        var $81=HEAP[$ptr_addr]; //@line 691 "xmltok_impl.c"
        HEAP[$80]=$81; //@line 691 "xmltok_impl.c"
        HEAP[$0]=0; //@line 691 "xmltok_impl.c"
        __label__ = 79; break; //@line 691 "xmltok_impl.c"
      case 18: // $bb17
        var $82=HEAP[$ptr_addr]; //@line 693 "xmltok_impl.c"
        var $83=(($82+2)&4294967295); //@line 693 "xmltok_impl.c"
        HEAP[$ptr_addr]=$83; //@line 693 "xmltok_impl.c"
        var $84=HEAP[$ptr_addr]; //@line 693 "xmltok_impl.c"
        var $85=HEAP[$end_addr]; //@line 693 "xmltok_impl.c"
        var $86=($84)==($85); //@line 693 "xmltok_impl.c"
        if ($86) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 693 "xmltok_impl.c"
      case 19: // $bb18
        HEAP[$0]=-1; //@line 694 "xmltok_impl.c"
        __label__ = 79; break; //@line 694 "xmltok_impl.c"
      case 20: // $bb19
        var $87=HEAP[$ptr_addr]; //@line 695 "xmltok_impl.c"
        var $88=(($87)&4294967295); //@line 695 "xmltok_impl.c"
        var $89=HEAP[$88]; //@line 695 "xmltok_impl.c"
        var $90=reSign(($89), 8, 0)==0; //@line 695 "xmltok_impl.c"
        if ($90) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 695 "xmltok_impl.c"
      case 21: // $bb20
        var $91=HEAP[$enc_addr]; //@line 695 "xmltok_impl.c"
        var $92=$91; //@line 695 "xmltok_impl.c"
        var $93=HEAP[$ptr_addr]; //@line 695 "xmltok_impl.c"
        var $94=(($93+1)&4294967295); //@line 695 "xmltok_impl.c"
        var $95=HEAP[$94]; //@line 695 "xmltok_impl.c"
        var $96=unSign(($95), 8, 0); //@line 695 "xmltok_impl.c"
        var $97=(($92+72)&4294967295); //@line 695 "xmltok_impl.c"
        var $98=(($97+$96)&4294967295); //@line 695 "xmltok_impl.c"
        var $99=HEAP[$98]; //@line 695 "xmltok_impl.c"
        var $100=unSign(($99), 8, 0); //@line 695 "xmltok_impl.c"
        HEAP[$iftmp_1067]=$100; //@line 695 "xmltok_impl.c"
        __label__ = 23; break; //@line 695 "xmltok_impl.c"
      case 22: // $bb21
        var $101=HEAP[$ptr_addr]; //@line 695 "xmltok_impl.c"
        var $102=(($101+1)&4294967295); //@line 695 "xmltok_impl.c"
        var $103=HEAP[$102]; //@line 695 "xmltok_impl.c"
        var $104=reSign(($103), 8, 0); //@line 695 "xmltok_impl.c"
        var $105=HEAP[$ptr_addr]; //@line 695 "xmltok_impl.c"
        var $106=(($105)&4294967295); //@line 695 "xmltok_impl.c"
        var $107=HEAP[$106]; //@line 695 "xmltok_impl.c"
        var $108=reSign(($107), 8, 0); //@line 695 "xmltok_impl.c"
        var $109=((($108)) & 255); //@line 695 "xmltok_impl.c"
        var $110=((($104)) & 255); //@line 695 "xmltok_impl.c"
        var $111=_unicode_byte_type($109, $110); //@line 695 "xmltok_impl.c"
        HEAP[$iftmp_1067]=$111; //@line 695 "xmltok_impl.c"
        __label__ = 23; break; //@line 695 "xmltok_impl.c"
      case 23: // $bb22
        var $112=HEAP[$iftmp_1067]; //@line 695 "xmltok_impl.c"
        if ($112 == 20) {
          __label__ = 25; break;
        }
        else if ($112 == 27) {
          __label__ = 24; break;
        }
        else {
        __label__ = 26; break;
        }
        
      case 24: // $bb23
        var $113=HEAP[$ptr_addr]; //@line 697 "xmltok_impl.c"
        var $114=(($113+2)&4294967295); //@line 697 "xmltok_impl.c"
        var $115=HEAP[$enc_addr]; //@line 697 "xmltok_impl.c"
        var $116=HEAP[$end_addr]; //@line 697 "xmltok_impl.c"
        var $117=HEAP[$nextTokPtr_addr]; //@line 697 "xmltok_impl.c"
        var $118=_big2_scanComment($115, $114, $116, $117); //@line 697 "xmltok_impl.c"
        HEAP[$0]=$118; //@line 697 "xmltok_impl.c"
        __label__ = 79; break; //@line 697 "xmltok_impl.c"
      case 25: // $bb24
        var $119=HEAP[$ptr_addr]; //@line 699 "xmltok_impl.c"
        var $120=(($119+2)&4294967295); //@line 699 "xmltok_impl.c"
        var $121=HEAP[$enc_addr]; //@line 699 "xmltok_impl.c"
        var $122=HEAP[$end_addr]; //@line 699 "xmltok_impl.c"
        var $123=HEAP[$nextTokPtr_addr]; //@line 699 "xmltok_impl.c"
        var $124=_big2_scanCdataSection($121, $120, $122, $123); //@line 699 "xmltok_impl.c"
        HEAP[$0]=$124; //@line 699 "xmltok_impl.c"
        __label__ = 79; break; //@line 699 "xmltok_impl.c"
      case 26: // $bb25
        var $125=HEAP[$nextTokPtr_addr]; //@line 702 "xmltok_impl.c"
        var $126=HEAP[$ptr_addr]; //@line 702 "xmltok_impl.c"
        HEAP[$125]=$126; //@line 702 "xmltok_impl.c"
        HEAP[$0]=0; //@line 703 "xmltok_impl.c"
        __label__ = 79; break; //@line 703 "xmltok_impl.c"
      case 27: // $bb26
        var $127=HEAP[$ptr_addr]; //@line 705 "xmltok_impl.c"
        var $128=(($127+2)&4294967295); //@line 705 "xmltok_impl.c"
        var $129=HEAP[$enc_addr]; //@line 705 "xmltok_impl.c"
        var $130=HEAP[$end_addr]; //@line 705 "xmltok_impl.c"
        var $131=HEAP[$nextTokPtr_addr]; //@line 705 "xmltok_impl.c"
        var $132=_big2_scanPi($129, $128, $130, $131); //@line 705 "xmltok_impl.c"
        HEAP[$0]=$132; //@line 705 "xmltok_impl.c"
        __label__ = 79; break; //@line 705 "xmltok_impl.c"
      case 28: // $bb27
        var $133=HEAP[$ptr_addr]; //@line 707 "xmltok_impl.c"
        var $134=(($133+2)&4294967295); //@line 707 "xmltok_impl.c"
        var $135=HEAP[$enc_addr]; //@line 707 "xmltok_impl.c"
        var $136=HEAP[$end_addr]; //@line 707 "xmltok_impl.c"
        var $137=HEAP[$nextTokPtr_addr]; //@line 707 "xmltok_impl.c"
        var $138=_big2_scanEndTag($135, $134, $136, $137); //@line 707 "xmltok_impl.c"
        HEAP[$0]=$138; //@line 707 "xmltok_impl.c"
        __label__ = 79; break; //@line 707 "xmltok_impl.c"
      case 29: // $bb28
        var $139=HEAP[$nextTokPtr_addr]; //@line 709 "xmltok_impl.c"
        var $140=HEAP[$ptr_addr]; //@line 709 "xmltok_impl.c"
        HEAP[$139]=$140; //@line 709 "xmltok_impl.c"
        HEAP[$0]=0; //@line 710 "xmltok_impl.c"
        __label__ = 79; break; //@line 710 "xmltok_impl.c"
      case 30: // $bb29
        var $141=HEAP[$ptr_addr]; //@line 717 "xmltok_impl.c"
        var $142=(($141)&4294967295); //@line 717 "xmltok_impl.c"
        var $143=HEAP[$142]; //@line 717 "xmltok_impl.c"
        var $144=reSign(($143), 8, 0)==0; //@line 717 "xmltok_impl.c"
        if ($144) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 717 "xmltok_impl.c"
      case 31: // $bb30
        var $145=HEAP[$enc_addr]; //@line 717 "xmltok_impl.c"
        var $146=$145; //@line 717 "xmltok_impl.c"
        var $147=HEAP[$ptr_addr]; //@line 717 "xmltok_impl.c"
        var $148=(($147+1)&4294967295); //@line 717 "xmltok_impl.c"
        var $149=HEAP[$148]; //@line 717 "xmltok_impl.c"
        var $150=unSign(($149), 8, 0); //@line 717 "xmltok_impl.c"
        var $151=(($146+72)&4294967295); //@line 717 "xmltok_impl.c"
        var $152=(($151+$150)&4294967295); //@line 717 "xmltok_impl.c"
        var $153=HEAP[$152]; //@line 717 "xmltok_impl.c"
        var $154=unSign(($153), 8, 0); //@line 717 "xmltok_impl.c"
        HEAP[$iftmp_1069]=$154; //@line 717 "xmltok_impl.c"
        __label__ = 33; break; //@line 717 "xmltok_impl.c"
      case 32: // $bb31
        var $155=HEAP[$ptr_addr]; //@line 717 "xmltok_impl.c"
        var $156=(($155+1)&4294967295); //@line 717 "xmltok_impl.c"
        var $157=HEAP[$156]; //@line 717 "xmltok_impl.c"
        var $158=reSign(($157), 8, 0); //@line 717 "xmltok_impl.c"
        var $159=HEAP[$ptr_addr]; //@line 717 "xmltok_impl.c"
        var $160=(($159)&4294967295); //@line 717 "xmltok_impl.c"
        var $161=HEAP[$160]; //@line 717 "xmltok_impl.c"
        var $162=reSign(($161), 8, 0); //@line 717 "xmltok_impl.c"
        var $163=((($162)) & 255); //@line 717 "xmltok_impl.c"
        var $164=((($158)) & 255); //@line 717 "xmltok_impl.c"
        var $165=_unicode_byte_type($163, $164); //@line 717 "xmltok_impl.c"
        HEAP[$iftmp_1069]=$165; //@line 717 "xmltok_impl.c"
        __label__ = 33; break; //@line 717 "xmltok_impl.c"
      case 33: // $bb32
        var $166=HEAP[$iftmp_1069]; //@line 717 "xmltok_impl.c"
        if ($166 == 5) {
          __label__ = 37; break;
        }
        else if ($166 == 6) {
          __label__ = 40; break;
        }
        else if ($166 == 7) {
          __label__ = 43; break;
        }
        else if ($166 == 9) {
          __label__ = 46; break;
        }
        else if ($166 == 10) {
          __label__ = 46; break;
        }
        else if ($166 == 11) {
          __label__ = 69; break;
        }
        else if ($166 == 17) {
          __label__ = 70; break;
        }
        else if ($166 == 21) {
          __label__ = 46; break;
        }
        else if ($166 == 22) {
          __label__ = 36; break;
        }
        else if ($166 == 24) {
          __label__ = 36; break;
        }
        else if ($166 == 25) {
          __label__ = 36; break;
        }
        else if ($166 == 26) {
          __label__ = 36; break;
        }
        else if ($166 == 27) {
          __label__ = 36; break;
        }
        else if ($166 == 29) {
          __label__ = 34; break;
        }
        else {
        __label__ = 76; break;
        }
        
      case 34: // $bb33
        var $167=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        var $168=(($167)&4294967295); //@line 718 "xmltok_impl.c"
        var $169=HEAP[$168]; //@line 718 "xmltok_impl.c"
        var $170=unSign(($169), 8, 0); //@line 718 "xmltok_impl.c"
        var $171=((_namePages+$170)&4294967295); //@line 718 "xmltok_impl.c"
        var $172=HEAP[$171]; //@line 718 "xmltok_impl.c"
        var $173=unSign(($172), 8, 0); //@line 718 "xmltok_impl.c"
        var $174=($173) << 3; //@line 718 "xmltok_impl.c"
        var $175=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        var $176=(($175+1)&4294967295); //@line 718 "xmltok_impl.c"
        var $177=HEAP[$176]; //@line 718 "xmltok_impl.c"
        var $178=unSign(($177), 8, 0) >>> 5; //@line 718 "xmltok_impl.c"
        var $179=unSign(($178), 8, 0); //@line 718 "xmltok_impl.c"
        var $180=((($174) + ($179))&4294967295); //@line 718 "xmltok_impl.c"
        var $181=((_namingBitmap+$180*4)&4294967295); //@line 718 "xmltok_impl.c"
        var $182=HEAP[$181]; //@line 718 "xmltok_impl.c"
        var $183=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        var $184=(($183+1)&4294967295); //@line 718 "xmltok_impl.c"
        var $185=HEAP[$184]; //@line 718 "xmltok_impl.c"
        var $186=unSign(($185), 8, 0); //@line 718 "xmltok_impl.c"
        var $187=($186) & 31; //@line 718 "xmltok_impl.c"
        var $188=1 << ($187); //@line 718 "xmltok_impl.c"
        var $189=($182) & ($188); //@line 718 "xmltok_impl.c"
        var $190=((($189))|0)==0; //@line 718 "xmltok_impl.c"
        if ($190) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 718 "xmltok_impl.c"
      case 35: // $bb34
        var $191=HEAP[$nextTokPtr_addr]; //@line 718 "xmltok_impl.c"
        var $192=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        HEAP[$191]=$192; //@line 718 "xmltok_impl.c"
        HEAP[$0]=0; //@line 718 "xmltok_impl.c"
        __label__ = 79; break; //@line 718 "xmltok_impl.c"
      case 36: // $bb35
        var $193=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        var $194=(($193+2)&4294967295); //@line 718 "xmltok_impl.c"
        HEAP[$ptr_addr]=$194; //@line 718 "xmltok_impl.c"
        __label__ = 77; break; //@line 718 "xmltok_impl.c"
      case 37: // $bb36
        var $195=HEAP[$end_addr]; //@line 718 "xmltok_impl.c"
        var $196=($195); //@line 718 "xmltok_impl.c"
        var $197=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        var $198=($197); //@line 718 "xmltok_impl.c"
        var $199=((($196) - ($198))&4294967295); //@line 718 "xmltok_impl.c"
        var $200=((($199))|0) <= 1; //@line 718 "xmltok_impl.c"
        if ($200) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 718 "xmltok_impl.c"
      case 38: // $bb37
        HEAP[$0]=-2; //@line 718 "xmltok_impl.c"
        __label__ = 79; break; //@line 718 "xmltok_impl.c"
      case 39: // $bb38
        var $201=HEAP[$nextTokPtr_addr]; //@line 718 "xmltok_impl.c"
        var $202=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        HEAP[$201]=$202; //@line 718 "xmltok_impl.c"
        HEAP[$0]=0; //@line 718 "xmltok_impl.c"
        __label__ = 79; break; //@line 718 "xmltok_impl.c"
      case 40: // $bb39
        var $203=HEAP[$end_addr]; //@line 718 "xmltok_impl.c"
        var $204=($203); //@line 718 "xmltok_impl.c"
        var $205=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        var $206=($205); //@line 718 "xmltok_impl.c"
        var $207=((($204) - ($206))&4294967295); //@line 718 "xmltok_impl.c"
        var $208=((($207))|0) <= 2; //@line 718 "xmltok_impl.c"
        if ($208) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 718 "xmltok_impl.c"
      case 41: // $bb40
        HEAP[$0]=-2; //@line 718 "xmltok_impl.c"
        __label__ = 79; break; //@line 718 "xmltok_impl.c"
      case 42: // $bb41
        var $209=HEAP[$nextTokPtr_addr]; //@line 718 "xmltok_impl.c"
        var $210=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        HEAP[$209]=$210; //@line 718 "xmltok_impl.c"
        HEAP[$0]=0; //@line 718 "xmltok_impl.c"
        __label__ = 79; break; //@line 718 "xmltok_impl.c"
      case 43: // $bb42
        var $211=HEAP[$end_addr]; //@line 718 "xmltok_impl.c"
        var $212=($211); //@line 718 "xmltok_impl.c"
        var $213=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        var $214=($213); //@line 718 "xmltok_impl.c"
        var $215=((($212) - ($214))&4294967295); //@line 718 "xmltok_impl.c"
        var $216=((($215))|0) <= 3; //@line 718 "xmltok_impl.c"
        if ($216) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 718 "xmltok_impl.c"
      case 44: // $bb43
        HEAP[$0]=-2; //@line 718 "xmltok_impl.c"
        __label__ = 79; break; //@line 718 "xmltok_impl.c"
      case 45: // $bb44
        var $217=HEAP[$nextTokPtr_addr]; //@line 718 "xmltok_impl.c"
        var $218=HEAP[$ptr_addr]; //@line 718 "xmltok_impl.c"
        HEAP[$217]=$218; //@line 718 "xmltok_impl.c"
        HEAP[$0]=0; //@line 718 "xmltok_impl.c"
        __label__ = 79; break; //@line 718 "xmltok_impl.c"
      case 46: // $bb45
        var $219=HEAP[$ptr_addr]; //@line 739 "xmltok_impl.c"
        var $220=(($219+2)&4294967295); //@line 739 "xmltok_impl.c"
        HEAP[$ptr_addr]=$220; //@line 739 "xmltok_impl.c"
        __label__ = 67; break; //@line 739 "xmltok_impl.c"
      case 47: // $bb46
        var $221=HEAP[$ptr_addr]; //@line 741 "xmltok_impl.c"
        var $222=(($221)&4294967295); //@line 741 "xmltok_impl.c"
        var $223=HEAP[$222]; //@line 741 "xmltok_impl.c"
        var $224=reSign(($223), 8, 0)==0; //@line 741 "xmltok_impl.c"
        if ($224) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 741 "xmltok_impl.c"
      case 48: // $bb47
        var $225=HEAP[$enc_addr]; //@line 741 "xmltok_impl.c"
        var $226=$225; //@line 741 "xmltok_impl.c"
        var $227=HEAP[$ptr_addr]; //@line 741 "xmltok_impl.c"
        var $228=(($227+1)&4294967295); //@line 741 "xmltok_impl.c"
        var $229=HEAP[$228]; //@line 741 "xmltok_impl.c"
        var $230=unSign(($229), 8, 0); //@line 741 "xmltok_impl.c"
        var $231=(($226+72)&4294967295); //@line 741 "xmltok_impl.c"
        var $232=(($231+$230)&4294967295); //@line 741 "xmltok_impl.c"
        var $233=HEAP[$232]; //@line 741 "xmltok_impl.c"
        var $234=unSign(($233), 8, 0); //@line 741 "xmltok_impl.c"
        HEAP[$iftmp_1077]=$234; //@line 741 "xmltok_impl.c"
        __label__ = 50; break; //@line 741 "xmltok_impl.c"
      case 49: // $bb48
        var $235=HEAP[$ptr_addr]; //@line 741 "xmltok_impl.c"
        var $236=(($235+1)&4294967295); //@line 741 "xmltok_impl.c"
        var $237=HEAP[$236]; //@line 741 "xmltok_impl.c"
        var $238=reSign(($237), 8, 0); //@line 741 "xmltok_impl.c"
        var $239=HEAP[$ptr_addr]; //@line 741 "xmltok_impl.c"
        var $240=(($239)&4294967295); //@line 741 "xmltok_impl.c"
        var $241=HEAP[$240]; //@line 741 "xmltok_impl.c"
        var $242=reSign(($241), 8, 0); //@line 741 "xmltok_impl.c"
        var $243=((($242)) & 255); //@line 741 "xmltok_impl.c"
        var $244=((($238)) & 255); //@line 741 "xmltok_impl.c"
        var $245=_unicode_byte_type($243, $244); //@line 741 "xmltok_impl.c"
        HEAP[$iftmp_1077]=$245; //@line 741 "xmltok_impl.c"
        __label__ = 50; break; //@line 741 "xmltok_impl.c"
      case 50: // $bb49
        var $246=HEAP[$iftmp_1077]; //@line 741 "xmltok_impl.c"
        if ($246 == 5) {
          __label__ = 54; break;
        }
        else if ($246 == 6) {
          __label__ = 57; break;
        }
        else if ($246 == 7) {
          __label__ = 60; break;
        }
        else if ($246 == 9) {
          __label__ = 65; break;
        }
        else if ($246 == 10) {
          __label__ = 65; break;
        }
        else if ($246 == 11) {
          __label__ = 63; break;
        }
        else if ($246 == 17) {
          __label__ = 64; break;
        }
        else if ($246 == 21) {
          __label__ = 65; break;
        }
        else if ($246 == 22) {
          __label__ = 53; break;
        }
        else if ($246 == 24) {
          __label__ = 53; break;
        }
        else if ($246 == 29) {
          __label__ = 51; break;
        }
        else {
        __label__ = 66; break;
        }
        
      case 51: // $bb50
        var $247=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        var $248=(($247)&4294967295); //@line 742 "xmltok_impl.c"
        var $249=HEAP[$248]; //@line 742 "xmltok_impl.c"
        var $250=unSign(($249), 8, 0); //@line 742 "xmltok_impl.c"
        var $251=((_nmstrtPages+$250)&4294967295); //@line 742 "xmltok_impl.c"
        var $252=HEAP[$251]; //@line 742 "xmltok_impl.c"
        var $253=unSign(($252), 8, 0); //@line 742 "xmltok_impl.c"
        var $254=($253) << 3; //@line 742 "xmltok_impl.c"
        var $255=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        var $256=(($255+1)&4294967295); //@line 742 "xmltok_impl.c"
        var $257=HEAP[$256]; //@line 742 "xmltok_impl.c"
        var $258=unSign(($257), 8, 0) >>> 5; //@line 742 "xmltok_impl.c"
        var $259=unSign(($258), 8, 0); //@line 742 "xmltok_impl.c"
        var $260=((($254) + ($259))&4294967295); //@line 742 "xmltok_impl.c"
        var $261=((_namingBitmap+$260*4)&4294967295); //@line 742 "xmltok_impl.c"
        var $262=HEAP[$261]; //@line 742 "xmltok_impl.c"
        var $263=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        var $264=(($263+1)&4294967295); //@line 742 "xmltok_impl.c"
        var $265=HEAP[$264]; //@line 742 "xmltok_impl.c"
        var $266=unSign(($265), 8, 0); //@line 742 "xmltok_impl.c"
        var $267=($266) & 31; //@line 742 "xmltok_impl.c"
        var $268=1 << ($267); //@line 742 "xmltok_impl.c"
        var $269=($262) & ($268); //@line 742 "xmltok_impl.c"
        var $270=((($269))|0)==0; //@line 742 "xmltok_impl.c"
        if ($270) { __label__ = 52; break; } else { __label__ = 53; break; } //@line 742 "xmltok_impl.c"
      case 52: // $bb51
        var $271=HEAP[$nextTokPtr_addr]; //@line 742 "xmltok_impl.c"
        var $272=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        HEAP[$271]=$272; //@line 742 "xmltok_impl.c"
        HEAP[$0]=0; //@line 742 "xmltok_impl.c"
        __label__ = 79; break; //@line 742 "xmltok_impl.c"
      case 53: // $bb52
        var $273=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        var $274=(($273+2)&4294967295); //@line 742 "xmltok_impl.c"
        HEAP[$ptr_addr]=$274; //@line 742 "xmltok_impl.c"
        var $275=HEAP[$enc_addr]; //@line 754 "xmltok_impl.c"
        var $276=HEAP[$ptr_addr]; //@line 754 "xmltok_impl.c"
        var $277=HEAP[$end_addr]; //@line 754 "xmltok_impl.c"
        var $278=HEAP[$nextTokPtr_addr]; //@line 754 "xmltok_impl.c"
        var $279=_big2_scanAtts($275, $276, $277, $278); //@line 754 "xmltok_impl.c"
        HEAP[$0]=$279; //@line 754 "xmltok_impl.c"
        __label__ = 79; break; //@line 754 "xmltok_impl.c"
      case 54: // $bb53
        var $280=HEAP[$end_addr]; //@line 742 "xmltok_impl.c"
        var $281=($280); //@line 742 "xmltok_impl.c"
        var $282=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        var $283=($282); //@line 742 "xmltok_impl.c"
        var $284=((($281) - ($283))&4294967295); //@line 742 "xmltok_impl.c"
        var $285=((($284))|0) <= 1; //@line 742 "xmltok_impl.c"
        if ($285) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 742 "xmltok_impl.c"
      case 55: // $bb54
        HEAP[$0]=-2; //@line 742 "xmltok_impl.c"
        __label__ = 79; break; //@line 742 "xmltok_impl.c"
      case 56: // $bb55
        var $286=HEAP[$nextTokPtr_addr]; //@line 742 "xmltok_impl.c"
        var $287=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        HEAP[$286]=$287; //@line 742 "xmltok_impl.c"
        HEAP[$0]=0; //@line 742 "xmltok_impl.c"
        __label__ = 79; break; //@line 742 "xmltok_impl.c"
      case 57: // $bb56
        var $288=HEAP[$end_addr]; //@line 742 "xmltok_impl.c"
        var $289=($288); //@line 742 "xmltok_impl.c"
        var $290=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        var $291=($290); //@line 742 "xmltok_impl.c"
        var $292=((($289) - ($291))&4294967295); //@line 742 "xmltok_impl.c"
        var $293=((($292))|0) <= 2; //@line 742 "xmltok_impl.c"
        if ($293) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 742 "xmltok_impl.c"
      case 58: // $bb57
        HEAP[$0]=-2; //@line 742 "xmltok_impl.c"
        __label__ = 79; break; //@line 742 "xmltok_impl.c"
      case 59: // $bb58
        var $294=HEAP[$nextTokPtr_addr]; //@line 742 "xmltok_impl.c"
        var $295=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        HEAP[$294]=$295; //@line 742 "xmltok_impl.c"
        HEAP[$0]=0; //@line 742 "xmltok_impl.c"
        __label__ = 79; break; //@line 742 "xmltok_impl.c"
      case 60: // $bb59
        var $296=HEAP[$end_addr]; //@line 742 "xmltok_impl.c"
        var $297=($296); //@line 742 "xmltok_impl.c"
        var $298=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        var $299=($298); //@line 742 "xmltok_impl.c"
        var $300=((($297) - ($299))&4294967295); //@line 742 "xmltok_impl.c"
        var $301=((($300))|0) <= 3; //@line 742 "xmltok_impl.c"
        if ($301) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 742 "xmltok_impl.c"
      case 61: // $bb60
        HEAP[$0]=-2; //@line 742 "xmltok_impl.c"
        __label__ = 79; break; //@line 742 "xmltok_impl.c"
      case 62: // $bb61
        var $302=HEAP[$nextTokPtr_addr]; //@line 742 "xmltok_impl.c"
        var $303=HEAP[$ptr_addr]; //@line 742 "xmltok_impl.c"
        HEAP[$302]=$303; //@line 742 "xmltok_impl.c"
        HEAP[$0]=0; //@line 742 "xmltok_impl.c"
        __label__ = 79; break; //@line 742 "xmltok_impl.c"
      case 63: // $bb62
        __label__ = 69; break; //@line 742 "xmltok_impl.c"
      case 64: // $bb63
        __label__ = 70; break; //@line 742 "xmltok_impl.c"
      case 65: // $bb64
        var $304=HEAP[$ptr_addr]; //@line 748 "xmltok_impl.c"
        var $305=(($304+2)&4294967295); //@line 748 "xmltok_impl.c"
        HEAP[$ptr_addr]=$305; //@line 748 "xmltok_impl.c"
        __label__ = 67; break; //@line 748 "xmltok_impl.c"
      case 66: // $bb65
        var $306=HEAP[$nextTokPtr_addr]; //@line 751 "xmltok_impl.c"
        var $307=HEAP[$ptr_addr]; //@line 751 "xmltok_impl.c"
        HEAP[$306]=$307; //@line 751 "xmltok_impl.c"
        HEAP[$0]=0; //@line 752 "xmltok_impl.c"
        __label__ = 79; break; //@line 752 "xmltok_impl.c"
      case 67: // $bb66
        var $308=HEAP[$ptr_addr]; //@line 740 "xmltok_impl.c"
        var $309=HEAP[$end_addr]; //@line 740 "xmltok_impl.c"
        var $310=($308)!=($309); //@line 740 "xmltok_impl.c"
        if ($310) { __label__ = 47; break; } else { __label__ = 68; break; } //@line 740 "xmltok_impl.c"
      case 68: // $bb67
        HEAP[$0]=-1; //@line 756 "xmltok_impl.c"
        __label__ = 79; break; //@line 756 "xmltok_impl.c"
      case 69: // $gt
        var $311=HEAP[$ptr_addr]; //@line 760 "xmltok_impl.c"
        var $312=(($311+2)&4294967295); //@line 760 "xmltok_impl.c"
        var $313=HEAP[$nextTokPtr_addr]; //@line 760 "xmltok_impl.c"
        HEAP[$313]=$312; //@line 760 "xmltok_impl.c"
        HEAP[$0]=2; //@line 761 "xmltok_impl.c"
        __label__ = 79; break; //@line 761 "xmltok_impl.c"
      case 70: // $sol
        var $314=HEAP[$ptr_addr]; //@line 764 "xmltok_impl.c"
        var $315=(($314+2)&4294967295); //@line 764 "xmltok_impl.c"
        HEAP[$ptr_addr]=$315; //@line 764 "xmltok_impl.c"
        var $316=HEAP[$ptr_addr]; //@line 765 "xmltok_impl.c"
        var $317=HEAP[$end_addr]; //@line 765 "xmltok_impl.c"
        var $318=($316)==($317); //@line 765 "xmltok_impl.c"
        if ($318) { __label__ = 71; break; } else { __label__ = 72; break; } //@line 765 "xmltok_impl.c"
      case 71: // $bb68
        HEAP[$0]=-1; //@line 766 "xmltok_impl.c"
        __label__ = 79; break; //@line 766 "xmltok_impl.c"
      case 72: // $bb69
        var $319=HEAP[$ptr_addr]; //@line 767 "xmltok_impl.c"
        var $320=(($319)&4294967295); //@line 767 "xmltok_impl.c"
        var $321=HEAP[$320]; //@line 767 "xmltok_impl.c"
        var $322=reSign(($321), 8, 0)!=0; //@line 767 "xmltok_impl.c"
        if ($322) { __label__ = 74; break; } else { __label__ = 73; break; } //@line 767 "xmltok_impl.c"
      case 73: // $bb70
        var $323=HEAP[$ptr_addr]; //@line 767 "xmltok_impl.c"
        var $324=(($323+1)&4294967295); //@line 767 "xmltok_impl.c"
        var $325=HEAP[$324]; //@line 767 "xmltok_impl.c"
        var $326=reSign(($325), 8, 0)!=62; //@line 767 "xmltok_impl.c"
        if ($326) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 767 "xmltok_impl.c"
      case 74: // $bb71
        var $327=HEAP[$nextTokPtr_addr]; //@line 768 "xmltok_impl.c"
        var $328=HEAP[$ptr_addr]; //@line 768 "xmltok_impl.c"
        HEAP[$327]=$328; //@line 768 "xmltok_impl.c"
        HEAP[$0]=0; //@line 769 "xmltok_impl.c"
        __label__ = 79; break; //@line 769 "xmltok_impl.c"
      case 75: // $bb72
        var $329=HEAP[$ptr_addr]; //@line 771 "xmltok_impl.c"
        var $330=(($329+2)&4294967295); //@line 771 "xmltok_impl.c"
        var $331=HEAP[$nextTokPtr_addr]; //@line 771 "xmltok_impl.c"
        HEAP[$331]=$330; //@line 771 "xmltok_impl.c"
        HEAP[$0]=4; //@line 772 "xmltok_impl.c"
        __label__ = 79; break; //@line 772 "xmltok_impl.c"
      case 76: // $bb73
        var $332=HEAP[$nextTokPtr_addr]; //@line 774 "xmltok_impl.c"
        var $333=HEAP[$ptr_addr]; //@line 774 "xmltok_impl.c"
        HEAP[$332]=$333; //@line 774 "xmltok_impl.c"
        HEAP[$0]=0; //@line 775 "xmltok_impl.c"
        __label__ = 79; break; //@line 775 "xmltok_impl.c"
      case 77: // $bb74
        var $334=HEAP[$ptr_addr]; //@line 716 "xmltok_impl.c"
        var $335=HEAP[$end_addr]; //@line 716 "xmltok_impl.c"
        var $336=($334)!=($335); //@line 716 "xmltok_impl.c"
        if ($336) { __label__ = 30; break; } else { __label__ = 78; break; } //@line 716 "xmltok_impl.c"
      case 78: // $bb75
        HEAP[$0]=-1; //@line 778 "xmltok_impl.c"
        __label__ = 79; break; //@line 778 "xmltok_impl.c"
      case 79: // $bb76
        var $337=HEAP[$0]; //@line 689 "xmltok_impl.c"
        HEAP[$retval]=$337; //@line 689 "xmltok_impl.c"
        __label__ = 80; break; //@line 689 "xmltok_impl.c"
      case 80: // $return
        var $retval77=HEAP[$retval]; //@line 689 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval77; //@line 689 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_contentTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 37; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 37);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_1098=__stackBase__+20;
        var $iftmp_1090=__stackBase__+24;
        var $iftmp_1088=__stackBase__+25;
        var $0=__stackBase__+29;
        var $n=__stackBase__+33;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 785 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 785 "xmltok_impl.c"
        var $3=($1)==($2); //@line 785 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 785 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-4; //@line 786 "xmltok_impl.c"
        __label__ = 69; break; //@line 786 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$end_addr]; //@line 788 "xmltok_impl.c"
        var $5=($4); //@line 788 "xmltok_impl.c"
        var $6=HEAP[$ptr_addr]; //@line 788 "xmltok_impl.c"
        var $7=($6); //@line 788 "xmltok_impl.c"
        var $8=((($5) - ($7))&4294967295); //@line 788 "xmltok_impl.c"
        HEAP[$n]=$8; //@line 788 "xmltok_impl.c"
        var $9=HEAP[$n]; //@line 789 "xmltok_impl.c"
        var $10=($9) & 1; //@line 789 "xmltok_impl.c"
        var $11=((($10)) & 255); //@line 789 "xmltok_impl.c"
        var $toBool=reSign(($11), 8, 0)!=0; //@line 789 "xmltok_impl.c"
        if ($toBool) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 789 "xmltok_impl.c"
      case 3: // $bb2
        var $12=HEAP[$n]; //@line 790 "xmltok_impl.c"
        var $13=($12) & -2; //@line 790 "xmltok_impl.c"
        HEAP[$n]=$13; //@line 790 "xmltok_impl.c"
        var $14=HEAP[$n]; //@line 791 "xmltok_impl.c"
        var $15=((($14))|0)==0; //@line 791 "xmltok_impl.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 791 "xmltok_impl.c"
      case 4: // $bb3
        HEAP[$0]=-1; //@line 792 "xmltok_impl.c"
        __label__ = 69; break; //@line 792 "xmltok_impl.c"
      case 5: // $bb4
        var $16=HEAP[$ptr_addr]; //@line 793 "xmltok_impl.c"
        var $17=HEAP[$n]; //@line 793 "xmltok_impl.c"
        var $18=(($16+$17)&4294967295); //@line 793 "xmltok_impl.c"
        HEAP[$end_addr]=$18; //@line 793 "xmltok_impl.c"
        __label__ = 6; break; //@line 793 "xmltok_impl.c"
      case 6: // $bb5
        var $19=HEAP[$ptr_addr]; //@line 796 "xmltok_impl.c"
        var $20=(($19)&4294967295); //@line 796 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 796 "xmltok_impl.c"
        var $22=reSign(($21), 8, 0)==0; //@line 796 "xmltok_impl.c"
        if ($22) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 796 "xmltok_impl.c"
      case 7: // $bb6
        var $23=HEAP[$enc_addr]; //@line 796 "xmltok_impl.c"
        var $24=$23; //@line 796 "xmltok_impl.c"
        var $25=HEAP[$ptr_addr]; //@line 796 "xmltok_impl.c"
        var $26=(($25+1)&4294967295); //@line 796 "xmltok_impl.c"
        var $27=HEAP[$26]; //@line 796 "xmltok_impl.c"
        var $28=unSign(($27), 8, 0); //@line 796 "xmltok_impl.c"
        var $29=(($24+72)&4294967295); //@line 796 "xmltok_impl.c"
        var $30=(($29+$28)&4294967295); //@line 796 "xmltok_impl.c"
        var $31=HEAP[$30]; //@line 796 "xmltok_impl.c"
        var $32=unSign(($31), 8, 0); //@line 796 "xmltok_impl.c"
        HEAP[$iftmp_1088]=$32; //@line 796 "xmltok_impl.c"
        __label__ = 9; break; //@line 796 "xmltok_impl.c"
      case 8: // $bb7
        var $33=HEAP[$ptr_addr]; //@line 796 "xmltok_impl.c"
        var $34=(($33+1)&4294967295); //@line 796 "xmltok_impl.c"
        var $35=HEAP[$34]; //@line 796 "xmltok_impl.c"
        var $36=reSign(($35), 8, 0); //@line 796 "xmltok_impl.c"
        var $37=HEAP[$ptr_addr]; //@line 796 "xmltok_impl.c"
        var $38=(($37)&4294967295); //@line 796 "xmltok_impl.c"
        var $39=HEAP[$38]; //@line 796 "xmltok_impl.c"
        var $40=reSign(($39), 8, 0); //@line 796 "xmltok_impl.c"
        var $41=((($40)) & 255); //@line 796 "xmltok_impl.c"
        var $42=((($36)) & 255); //@line 796 "xmltok_impl.c"
        var $43=_unicode_byte_type($41, $42); //@line 796 "xmltok_impl.c"
        HEAP[$iftmp_1088]=$43; //@line 796 "xmltok_impl.c"
        __label__ = 9; break; //@line 796 "xmltok_impl.c"
      case 9: // $bb8
        var $44=HEAP[$iftmp_1088]; //@line 796 "xmltok_impl.c"
        if ($44 == 0) {
          __label__ = 40; break;
        }
        else if ($44 == 1) {
          __label__ = 40; break;
        }
        else if ($44 == 2) {
          __label__ = 10; break;
        }
        else if ($44 == 3) {
          __label__ = 11; break;
        }
        else if ($44 == 4) {
          __label__ = 21; break;
        }
        else if ($44 == 5) {
          __label__ = 31; break;
        }
        else if ($44 == 6) {
          __label__ = 34; break;
        }
        else if ($44 == 7) {
          __label__ = 37; break;
        }
        else if ($44 == 8) {
          __label__ = 40; break;
        }
        else if ($44 == 9) {
          __label__ = 12; break;
        }
        else if ($44 == 10) {
          __label__ = 20; break;
        }
        else {
        __label__ = 41; break;
        }
        
      case 10: // $bb9
        var $45=HEAP[$ptr_addr]; //@line 798 "xmltok_impl.c"
        var $46=(($45+2)&4294967295); //@line 798 "xmltok_impl.c"
        var $47=HEAP[$enc_addr]; //@line 798 "xmltok_impl.c"
        var $48=HEAP[$end_addr]; //@line 798 "xmltok_impl.c"
        var $49=HEAP[$nextTokPtr_addr]; //@line 798 "xmltok_impl.c"
        var $50=_big2_scanLt($47, $46, $48, $49); //@line 798 "xmltok_impl.c"
        HEAP[$0]=$50; //@line 798 "xmltok_impl.c"
        __label__ = 69; break; //@line 798 "xmltok_impl.c"
      case 11: // $bb10
        var $51=HEAP[$ptr_addr]; //@line 800 "xmltok_impl.c"
        var $52=(($51+2)&4294967295); //@line 800 "xmltok_impl.c"
        var $53=HEAP[$enc_addr]; //@line 800 "xmltok_impl.c"
        var $54=HEAP[$end_addr]; //@line 800 "xmltok_impl.c"
        var $55=HEAP[$nextTokPtr_addr]; //@line 800 "xmltok_impl.c"
        var $56=_big2_scanRef($53, $52, $54, $55); //@line 800 "xmltok_impl.c"
        HEAP[$0]=$56; //@line 800 "xmltok_impl.c"
        __label__ = 69; break; //@line 800 "xmltok_impl.c"
      case 12: // $bb11
        var $57=HEAP[$ptr_addr]; //@line 802 "xmltok_impl.c"
        var $58=(($57+2)&4294967295); //@line 802 "xmltok_impl.c"
        HEAP[$ptr_addr]=$58; //@line 802 "xmltok_impl.c"
        var $59=HEAP[$ptr_addr]; //@line 803 "xmltok_impl.c"
        var $60=HEAP[$end_addr]; //@line 803 "xmltok_impl.c"
        var $61=($59)==($60); //@line 803 "xmltok_impl.c"
        if ($61) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 803 "xmltok_impl.c"
      case 13: // $bb12
        HEAP[$0]=-3; //@line 804 "xmltok_impl.c"
        __label__ = 69; break; //@line 804 "xmltok_impl.c"
      case 14: // $bb13
        var $62=HEAP[$ptr_addr]; //@line 805 "xmltok_impl.c"
        var $63=(($62)&4294967295); //@line 805 "xmltok_impl.c"
        var $64=HEAP[$63]; //@line 805 "xmltok_impl.c"
        var $65=reSign(($64), 8, 0)==0; //@line 805 "xmltok_impl.c"
        if ($65) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 805 "xmltok_impl.c"
      case 15: // $bb14
        var $66=HEAP[$enc_addr]; //@line 805 "xmltok_impl.c"
        var $67=$66; //@line 805 "xmltok_impl.c"
        var $68=HEAP[$ptr_addr]; //@line 805 "xmltok_impl.c"
        var $69=(($68+1)&4294967295); //@line 805 "xmltok_impl.c"
        var $70=HEAP[$69]; //@line 805 "xmltok_impl.c"
        var $71=unSign(($70), 8, 0); //@line 805 "xmltok_impl.c"
        var $72=(($67+72)&4294967295); //@line 805 "xmltok_impl.c"
        var $73=(($72+$71)&4294967295); //@line 805 "xmltok_impl.c"
        var $74=HEAP[$73]; //@line 805 "xmltok_impl.c"
        var $75=reSign(($74), 8, 0)==10; //@line 805 "xmltok_impl.c"
        var $76=unSign(($75), 1, 0); //@line 805 "xmltok_impl.c"
        HEAP[$iftmp_1090]=$76; //@line 805 "xmltok_impl.c"
        __label__ = 17; break; //@line 805 "xmltok_impl.c"
      case 16: // $bb15
        var $77=HEAP[$ptr_addr]; //@line 805 "xmltok_impl.c"
        var $78=(($77+1)&4294967295); //@line 805 "xmltok_impl.c"
        var $79=HEAP[$78]; //@line 805 "xmltok_impl.c"
        var $80=reSign(($79), 8, 0); //@line 805 "xmltok_impl.c"
        var $81=HEAP[$ptr_addr]; //@line 805 "xmltok_impl.c"
        var $82=(($81)&4294967295); //@line 805 "xmltok_impl.c"
        var $83=HEAP[$82]; //@line 805 "xmltok_impl.c"
        var $84=reSign(($83), 8, 0); //@line 805 "xmltok_impl.c"
        var $85=((($84)) & 255); //@line 805 "xmltok_impl.c"
        var $86=((($80)) & 255); //@line 805 "xmltok_impl.c"
        var $87=_unicode_byte_type($85, $86); //@line 805 "xmltok_impl.c"
        var $88=((($87))|0)==10; //@line 805 "xmltok_impl.c"
        var $89=unSign(($88), 1, 0); //@line 805 "xmltok_impl.c"
        HEAP[$iftmp_1090]=$89; //@line 805 "xmltok_impl.c"
        __label__ = 17; break; //@line 805 "xmltok_impl.c"
      case 17: // $bb16
        var $90=HEAP[$iftmp_1090]; //@line 805 "xmltok_impl.c"
        var $toBool17=reSign(($90), 8, 0)!=0; //@line 805 "xmltok_impl.c"
        if ($toBool17) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 805 "xmltok_impl.c"
      case 18: // $bb18
        var $91=HEAP[$ptr_addr]; //@line 806 "xmltok_impl.c"
        var $92=(($91+2)&4294967295); //@line 806 "xmltok_impl.c"
        HEAP[$ptr_addr]=$92; //@line 806 "xmltok_impl.c"
        __label__ = 19; break; //@line 806 "xmltok_impl.c"
      case 19: // $bb19
        var $93=HEAP[$nextTokPtr_addr]; //@line 807 "xmltok_impl.c"
        var $94=HEAP[$ptr_addr]; //@line 807 "xmltok_impl.c"
        HEAP[$93]=$94; //@line 807 "xmltok_impl.c"
        HEAP[$0]=7; //@line 808 "xmltok_impl.c"
        __label__ = 69; break; //@line 808 "xmltok_impl.c"
      case 20: // $bb20
        var $95=HEAP[$ptr_addr]; //@line 810 "xmltok_impl.c"
        var $96=(($95+2)&4294967295); //@line 810 "xmltok_impl.c"
        var $97=HEAP[$nextTokPtr_addr]; //@line 810 "xmltok_impl.c"
        HEAP[$97]=$96; //@line 810 "xmltok_impl.c"
        HEAP[$0]=7; //@line 811 "xmltok_impl.c"
        __label__ = 69; break; //@line 811 "xmltok_impl.c"
      case 21: // $bb21
        var $98=HEAP[$ptr_addr]; //@line 813 "xmltok_impl.c"
        var $99=(($98+2)&4294967295); //@line 813 "xmltok_impl.c"
        HEAP[$ptr_addr]=$99; //@line 813 "xmltok_impl.c"
        var $100=HEAP[$ptr_addr]; //@line 814 "xmltok_impl.c"
        var $101=HEAP[$end_addr]; //@line 814 "xmltok_impl.c"
        var $102=($100)==($101); //@line 814 "xmltok_impl.c"
        if ($102) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 814 "xmltok_impl.c"
      case 22: // $bb22
        HEAP[$0]=-5; //@line 815 "xmltok_impl.c"
        __label__ = 69; break; //@line 815 "xmltok_impl.c"
      case 23: // $bb23
        var $103=HEAP[$ptr_addr]; //@line 816 "xmltok_impl.c"
        var $104=(($103)&4294967295); //@line 816 "xmltok_impl.c"
        var $105=HEAP[$104]; //@line 816 "xmltok_impl.c"
        var $106=reSign(($105), 8, 0)!=0; //@line 816 "xmltok_impl.c"
        if ($106) { __label__ = 42; break; } else { __label__ = 24; break; } //@line 816 "xmltok_impl.c"
      case 24: // $bb24
        var $107=HEAP[$ptr_addr]; //@line 816 "xmltok_impl.c"
        var $108=(($107+1)&4294967295); //@line 816 "xmltok_impl.c"
        var $109=HEAP[$108]; //@line 816 "xmltok_impl.c"
        var $110=reSign(($109), 8, 0)!=93; //@line 816 "xmltok_impl.c"
        if ($110) { __label__ = 42; break; } else { __label__ = 25; break; } //@line 816 "xmltok_impl.c"
      case 25: // $bb25
        var $111=HEAP[$ptr_addr]; //@line 818 "xmltok_impl.c"
        var $112=(($111+2)&4294967295); //@line 818 "xmltok_impl.c"
        HEAP[$ptr_addr]=$112; //@line 818 "xmltok_impl.c"
        var $113=HEAP[$ptr_addr]; //@line 819 "xmltok_impl.c"
        var $114=HEAP[$end_addr]; //@line 819 "xmltok_impl.c"
        var $115=($113)==($114); //@line 819 "xmltok_impl.c"
        if ($115) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 819 "xmltok_impl.c"
      case 26: // $bb26
        HEAP[$0]=-5; //@line 820 "xmltok_impl.c"
        __label__ = 69; break; //@line 820 "xmltok_impl.c"
      case 27: // $bb27
        var $116=HEAP[$ptr_addr]; //@line 821 "xmltok_impl.c"
        var $117=(($116)&4294967295); //@line 821 "xmltok_impl.c"
        var $118=HEAP[$117]; //@line 821 "xmltok_impl.c"
        var $119=reSign(($118), 8, 0)!=0; //@line 821 "xmltok_impl.c"
        if ($119) { __label__ = 29; break; } else { __label__ = 28; break; } //@line 821 "xmltok_impl.c"
      case 28: // $bb28
        var $120=HEAP[$ptr_addr]; //@line 821 "xmltok_impl.c"
        var $121=(($120+1)&4294967295); //@line 821 "xmltok_impl.c"
        var $122=HEAP[$121]; //@line 821 "xmltok_impl.c"
        var $123=reSign(($122), 8, 0)!=62; //@line 821 "xmltok_impl.c"
        if ($123) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 821 "xmltok_impl.c"
      case 29: // $bb29
        var $124=HEAP[$ptr_addr]; //@line 822 "xmltok_impl.c"
        var $125=(($124+-2)&4294967295); //@line 822 "xmltok_impl.c"
        HEAP[$ptr_addr]=$125; //@line 822 "xmltok_impl.c"
        __label__ = 42; break; //@line 822 "xmltok_impl.c"
      case 30: // $bb30
        var $126=HEAP[$nextTokPtr_addr]; //@line 825 "xmltok_impl.c"
        var $127=HEAP[$ptr_addr]; //@line 825 "xmltok_impl.c"
        HEAP[$126]=$127; //@line 825 "xmltok_impl.c"
        HEAP[$0]=0; //@line 826 "xmltok_impl.c"
        __label__ = 69; break; //@line 826 "xmltok_impl.c"
      case 31: // $bb31
        var $128=HEAP[$end_addr]; //@line 827 "xmltok_impl.c"
        var $129=($128); //@line 827 "xmltok_impl.c"
        var $130=HEAP[$ptr_addr]; //@line 827 "xmltok_impl.c"
        var $131=($130); //@line 827 "xmltok_impl.c"
        var $132=((($129) - ($131))&4294967295); //@line 827 "xmltok_impl.c"
        var $133=((($132))|0) <= 1; //@line 827 "xmltok_impl.c"
        if ($133) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 827 "xmltok_impl.c"
      case 32: // $bb32
        HEAP[$0]=-2; //@line 827 "xmltok_impl.c"
        __label__ = 69; break; //@line 827 "xmltok_impl.c"
      case 33: // $bb33
        var $134=HEAP[$ptr_addr]; //@line 827 "xmltok_impl.c"
        var $135=(($134+2)&4294967295); //@line 827 "xmltok_impl.c"
        HEAP[$ptr_addr]=$135; //@line 827 "xmltok_impl.c"
        __label__ = 42; break; //@line 827 "xmltok_impl.c"
      case 34: // $bb34
        var $136=HEAP[$end_addr]; //@line 827 "xmltok_impl.c"
        var $137=($136); //@line 827 "xmltok_impl.c"
        var $138=HEAP[$ptr_addr]; //@line 827 "xmltok_impl.c"
        var $139=($138); //@line 827 "xmltok_impl.c"
        var $140=((($137) - ($139))&4294967295); //@line 827 "xmltok_impl.c"
        var $141=((($140))|0) <= 2; //@line 827 "xmltok_impl.c"
        if ($141) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 827 "xmltok_impl.c"
      case 35: // $bb35
        HEAP[$0]=-2; //@line 827 "xmltok_impl.c"
        __label__ = 69; break; //@line 827 "xmltok_impl.c"
      case 36: // $bb36
        var $142=HEAP[$ptr_addr]; //@line 827 "xmltok_impl.c"
        var $143=(($142+3)&4294967295); //@line 827 "xmltok_impl.c"
        HEAP[$ptr_addr]=$143; //@line 827 "xmltok_impl.c"
        __label__ = 42; break; //@line 827 "xmltok_impl.c"
      case 37: // $bb37
        var $144=HEAP[$end_addr]; //@line 827 "xmltok_impl.c"
        var $145=($144); //@line 827 "xmltok_impl.c"
        var $146=HEAP[$ptr_addr]; //@line 827 "xmltok_impl.c"
        var $147=($146); //@line 827 "xmltok_impl.c"
        var $148=((($145) - ($147))&4294967295); //@line 827 "xmltok_impl.c"
        var $149=((($148))|0) <= 3; //@line 827 "xmltok_impl.c"
        if ($149) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 827 "xmltok_impl.c"
      case 38: // $bb38
        HEAP[$0]=-2; //@line 827 "xmltok_impl.c"
        __label__ = 69; break; //@line 827 "xmltok_impl.c"
      case 39: // $bb39
        var $150=HEAP[$ptr_addr]; //@line 827 "xmltok_impl.c"
        var $151=(($150+4)&4294967295); //@line 827 "xmltok_impl.c"
        HEAP[$ptr_addr]=$151; //@line 827 "xmltok_impl.c"
        __label__ = 42; break; //@line 827 "xmltok_impl.c"
      case 40: // $bb40
        var $152=HEAP[$nextTokPtr_addr]; //@line 827 "xmltok_impl.c"
        var $153=HEAP[$ptr_addr]; //@line 827 "xmltok_impl.c"
        HEAP[$152]=$153; //@line 827 "xmltok_impl.c"
        HEAP[$0]=0; //@line 827 "xmltok_impl.c"
        __label__ = 69; break; //@line 827 "xmltok_impl.c"
      case 41: // $bb41
        var $154=HEAP[$ptr_addr]; //@line 829 "xmltok_impl.c"
        var $155=(($154+2)&4294967295); //@line 829 "xmltok_impl.c"
        HEAP[$ptr_addr]=$155; //@line 829 "xmltok_impl.c"
        __label__ = 42; break; //@line 829 "xmltok_impl.c"
      case 42: // $bb42
        __label__ = 67; break; //@line 829 "xmltok_impl.c"
      case 43: // $bb43
        var $156=HEAP[$ptr_addr]; //@line 833 "xmltok_impl.c"
        var $157=(($156)&4294967295); //@line 833 "xmltok_impl.c"
        var $158=HEAP[$157]; //@line 833 "xmltok_impl.c"
        var $159=reSign(($158), 8, 0)==0; //@line 833 "xmltok_impl.c"
        if ($159) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 833 "xmltok_impl.c"
      case 44: // $bb44
        var $160=HEAP[$enc_addr]; //@line 833 "xmltok_impl.c"
        var $161=$160; //@line 833 "xmltok_impl.c"
        var $162=HEAP[$ptr_addr]; //@line 833 "xmltok_impl.c"
        var $163=(($162+1)&4294967295); //@line 833 "xmltok_impl.c"
        var $164=HEAP[$163]; //@line 833 "xmltok_impl.c"
        var $165=unSign(($164), 8, 0); //@line 833 "xmltok_impl.c"
        var $166=(($161+72)&4294967295); //@line 833 "xmltok_impl.c"
        var $167=(($166+$165)&4294967295); //@line 833 "xmltok_impl.c"
        var $168=HEAP[$167]; //@line 833 "xmltok_impl.c"
        var $169=unSign(($168), 8, 0); //@line 833 "xmltok_impl.c"
        HEAP[$iftmp_1098]=$169; //@line 833 "xmltok_impl.c"
        __label__ = 46; break; //@line 833 "xmltok_impl.c"
      case 45: // $bb45
        var $170=HEAP[$ptr_addr]; //@line 833 "xmltok_impl.c"
        var $171=(($170+1)&4294967295); //@line 833 "xmltok_impl.c"
        var $172=HEAP[$171]; //@line 833 "xmltok_impl.c"
        var $173=reSign(($172), 8, 0); //@line 833 "xmltok_impl.c"
        var $174=HEAP[$ptr_addr]; //@line 833 "xmltok_impl.c"
        var $175=(($174)&4294967295); //@line 833 "xmltok_impl.c"
        var $176=HEAP[$175]; //@line 833 "xmltok_impl.c"
        var $177=reSign(($176), 8, 0); //@line 833 "xmltok_impl.c"
        var $178=((($177)) & 255); //@line 833 "xmltok_impl.c"
        var $179=((($173)) & 255); //@line 833 "xmltok_impl.c"
        var $180=_unicode_byte_type($178, $179); //@line 833 "xmltok_impl.c"
        HEAP[$iftmp_1098]=$180; //@line 833 "xmltok_impl.c"
        __label__ = 46; break; //@line 833 "xmltok_impl.c"
      case 46: // $bb46
        var $181=HEAP[$iftmp_1098]; //@line 833 "xmltok_impl.c"
        if ($181 == 0) {
          __label__ = 65; break;
        }
        else if ($181 == 1) {
          __label__ = 65; break;
        }
        else if ($181 == 2) {
          __label__ = 65; break;
        }
        else if ($181 == 3) {
          __label__ = 65; break;
        }
        else if ($181 == 4) {
          __label__ = 56; break;
        }
        else if ($181 == 5) {
          __label__ = 47; break;
        }
        else if ($181 == 6) {
          __label__ = 50; break;
        }
        else if ($181 == 7) {
          __label__ = 53; break;
        }
        else if ($181 == 8) {
          __label__ = 65; break;
        }
        else if ($181 == 9) {
          __label__ = 65; break;
        }
        else if ($181 == 10) {
          __label__ = 65; break;
        }
        else {
        __label__ = 66; break;
        }
        
      case 47: // $bb47
        var $182=HEAP[$end_addr]; //@line 842 "xmltok_impl.c"
        var $183=($182); //@line 842 "xmltok_impl.c"
        var $184=HEAP[$ptr_addr]; //@line 842 "xmltok_impl.c"
        var $185=($184); //@line 842 "xmltok_impl.c"
        var $186=((($183) - ($185))&4294967295); //@line 842 "xmltok_impl.c"
        var $187=((($186))|0) <= 1; //@line 842 "xmltok_impl.c"
        if ($187) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 842 "xmltok_impl.c"
      case 48: // $bb48
        var $188=HEAP[$nextTokPtr_addr]; //@line 842 "xmltok_impl.c"
        var $189=HEAP[$ptr_addr]; //@line 842 "xmltok_impl.c"
        HEAP[$188]=$189; //@line 842 "xmltok_impl.c"
        HEAP[$0]=6; //@line 842 "xmltok_impl.c"
        __label__ = 69; break; //@line 842 "xmltok_impl.c"
      case 49: // $bb49
        var $190=HEAP[$ptr_addr]; //@line 842 "xmltok_impl.c"
        var $191=(($190+2)&4294967295); //@line 842 "xmltok_impl.c"
        HEAP[$ptr_addr]=$191; //@line 842 "xmltok_impl.c"
        __label__ = 67; break; //@line 842 "xmltok_impl.c"
      case 50: // $bb50
        var $192=HEAP[$end_addr]; //@line 842 "xmltok_impl.c"
        var $193=($192); //@line 842 "xmltok_impl.c"
        var $194=HEAP[$ptr_addr]; //@line 842 "xmltok_impl.c"
        var $195=($194); //@line 842 "xmltok_impl.c"
        var $196=((($193) - ($195))&4294967295); //@line 842 "xmltok_impl.c"
        var $197=((($196))|0) <= 2; //@line 842 "xmltok_impl.c"
        if ($197) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 842 "xmltok_impl.c"
      case 51: // $bb51
        var $198=HEAP[$nextTokPtr_addr]; //@line 842 "xmltok_impl.c"
        var $199=HEAP[$ptr_addr]; //@line 842 "xmltok_impl.c"
        HEAP[$198]=$199; //@line 842 "xmltok_impl.c"
        HEAP[$0]=6; //@line 842 "xmltok_impl.c"
        __label__ = 69; break; //@line 842 "xmltok_impl.c"
      case 52: // $bb52
        var $200=HEAP[$ptr_addr]; //@line 842 "xmltok_impl.c"
        var $201=(($200+3)&4294967295); //@line 842 "xmltok_impl.c"
        HEAP[$ptr_addr]=$201; //@line 842 "xmltok_impl.c"
        __label__ = 67; break; //@line 842 "xmltok_impl.c"
      case 53: // $bb53
        var $202=HEAP[$end_addr]; //@line 842 "xmltok_impl.c"
        var $203=($202); //@line 842 "xmltok_impl.c"
        var $204=HEAP[$ptr_addr]; //@line 842 "xmltok_impl.c"
        var $205=($204); //@line 842 "xmltok_impl.c"
        var $206=((($203) - ($205))&4294967295); //@line 842 "xmltok_impl.c"
        var $207=((($206))|0) <= 3; //@line 842 "xmltok_impl.c"
        if ($207) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 842 "xmltok_impl.c"
      case 54: // $bb54
        var $208=HEAP[$nextTokPtr_addr]; //@line 842 "xmltok_impl.c"
        var $209=HEAP[$ptr_addr]; //@line 842 "xmltok_impl.c"
        HEAP[$208]=$209; //@line 842 "xmltok_impl.c"
        HEAP[$0]=6; //@line 842 "xmltok_impl.c"
        __label__ = 69; break; //@line 842 "xmltok_impl.c"
      case 55: // $bb55
        var $210=HEAP[$ptr_addr]; //@line 842 "xmltok_impl.c"
        var $211=(($210+4)&4294967295); //@line 842 "xmltok_impl.c"
        HEAP[$ptr_addr]=$211; //@line 842 "xmltok_impl.c"
        __label__ = 67; break; //@line 842 "xmltok_impl.c"
      case 56: // $bb56
        var $212=HEAP[$ptr_addr]; //@line 845 "xmltok_impl.c"
        var $213=(($212+2)&4294967295); //@line 845 "xmltok_impl.c"
        var $214=HEAP[$end_addr]; //@line 845 "xmltok_impl.c"
        var $215=($213)!=($214); //@line 845 "xmltok_impl.c"
        if ($215) { __label__ = 57; break; } else { __label__ = 65; break; } //@line 845 "xmltok_impl.c"
      case 57: // $bb57
        var $216=HEAP[$ptr_addr]; //@line 846 "xmltok_impl.c"
        var $217=(($216+2)&4294967295); //@line 846 "xmltok_impl.c"
        var $218=(($217)&4294967295); //@line 846 "xmltok_impl.c"
        var $219=HEAP[$218]; //@line 846 "xmltok_impl.c"
        var $220=reSign(($219), 8, 0)!=0; //@line 846 "xmltok_impl.c"
        if ($220) { __label__ = 59; break; } else { __label__ = 58; break; } //@line 846 "xmltok_impl.c"
      case 58: // $bb58
        var $221=HEAP[$ptr_addr]; //@line 846 "xmltok_impl.c"
        var $222=(($221+2)&4294967295); //@line 846 "xmltok_impl.c"
        var $223=(($222+1)&4294967295); //@line 846 "xmltok_impl.c"
        var $224=HEAP[$223]; //@line 846 "xmltok_impl.c"
        var $225=reSign(($224), 8, 0)!=93; //@line 846 "xmltok_impl.c"
        if ($225) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 846 "xmltok_impl.c"
      case 59: // $bb59
        var $226=HEAP[$ptr_addr]; //@line 847 "xmltok_impl.c"
        var $227=(($226+2)&4294967295); //@line 847 "xmltok_impl.c"
        HEAP[$ptr_addr]=$227; //@line 847 "xmltok_impl.c"
        __label__ = 67; break; //@line 847 "xmltok_impl.c"
      case 60: // $bb60
        var $228=HEAP[$ptr_addr]; //@line 850 "xmltok_impl.c"
        var $229=(($228+4)&4294967295); //@line 850 "xmltok_impl.c"
        var $230=HEAP[$end_addr]; //@line 850 "xmltok_impl.c"
        var $231=($229)!=($230); //@line 850 "xmltok_impl.c"
        if ($231) { __label__ = 61; break; } else { __label__ = 65; break; } //@line 850 "xmltok_impl.c"
      case 61: // $bb61
        var $232=HEAP[$ptr_addr]; //@line 851 "xmltok_impl.c"
        var $233=(($232+4)&4294967295); //@line 851 "xmltok_impl.c"
        var $234=(($233)&4294967295); //@line 851 "xmltok_impl.c"
        var $235=HEAP[$234]; //@line 851 "xmltok_impl.c"
        var $236=reSign(($235), 8, 0)!=0; //@line 851 "xmltok_impl.c"
        if ($236) { __label__ = 63; break; } else { __label__ = 62; break; } //@line 851 "xmltok_impl.c"
      case 62: // $bb62
        var $237=HEAP[$ptr_addr]; //@line 851 "xmltok_impl.c"
        var $238=(($237+4)&4294967295); //@line 851 "xmltok_impl.c"
        var $239=(($238+1)&4294967295); //@line 851 "xmltok_impl.c"
        var $240=HEAP[$239]; //@line 851 "xmltok_impl.c"
        var $241=reSign(($240), 8, 0)!=62; //@line 851 "xmltok_impl.c"
        if ($241) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 851 "xmltok_impl.c"
      case 63: // $bb63
        var $242=HEAP[$ptr_addr]; //@line 852 "xmltok_impl.c"
        var $243=(($242+2)&4294967295); //@line 852 "xmltok_impl.c"
        HEAP[$ptr_addr]=$243; //@line 852 "xmltok_impl.c"
        __label__ = 67; break; //@line 852 "xmltok_impl.c"
      case 64: // $bb64
        var $244=HEAP[$ptr_addr]; //@line 855 "xmltok_impl.c"
        var $245=(($244+4)&4294967295); //@line 855 "xmltok_impl.c"
        var $246=HEAP[$nextTokPtr_addr]; //@line 855 "xmltok_impl.c"
        HEAP[$246]=$245; //@line 855 "xmltok_impl.c"
        HEAP[$0]=0; //@line 856 "xmltok_impl.c"
        __label__ = 69; break; //@line 856 "xmltok_impl.c"
      case 65: // $bb65
        var $247=HEAP[$nextTokPtr_addr]; //@line 867 "xmltok_impl.c"
        var $248=HEAP[$ptr_addr]; //@line 867 "xmltok_impl.c"
        HEAP[$247]=$248; //@line 867 "xmltok_impl.c"
        HEAP[$0]=6; //@line 868 "xmltok_impl.c"
        __label__ = 69; break; //@line 868 "xmltok_impl.c"
      case 66: // $bb66
        var $249=HEAP[$ptr_addr]; //@line 870 "xmltok_impl.c"
        var $250=(($249+2)&4294967295); //@line 870 "xmltok_impl.c"
        HEAP[$ptr_addr]=$250; //@line 870 "xmltok_impl.c"
        __label__ = 67; break; //@line 870 "xmltok_impl.c"
      case 67: // $bb67
        var $251=HEAP[$ptr_addr]; //@line 832 "xmltok_impl.c"
        var $252=HEAP[$end_addr]; //@line 832 "xmltok_impl.c"
        var $253=($251)!=($252); //@line 832 "xmltok_impl.c"
        if ($253) { __label__ = 43; break; } else { __label__ = 68; break; } //@line 832 "xmltok_impl.c"
      case 68: // $bb68
        var $254=HEAP[$nextTokPtr_addr]; //@line 874 "xmltok_impl.c"
        var $255=HEAP[$ptr_addr]; //@line 874 "xmltok_impl.c"
        HEAP[$254]=$255; //@line 874 "xmltok_impl.c"
        HEAP[$0]=6; //@line 875 "xmltok_impl.c"
        __label__ = 69; break; //@line 875 "xmltok_impl.c"
      case 69: // $bb69
        var $256=HEAP[$0]; //@line 786 "xmltok_impl.c"
        HEAP[$retval]=$256; //@line 786 "xmltok_impl.c"
        __label__ = 70; break; //@line 786 "xmltok_impl.c"
      case 70: // $return
        var $retval70=HEAP[$retval]; //@line 786 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval70; //@line 786 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_scanPercent($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_1114=__stackBase__+20;
        var $iftmp_1106=__stackBase__+24;
        var $0=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 884 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 884 "xmltok_impl.c"
        var $3=($1)==($2); //@line 884 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 884 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-22; //@line 885 "xmltok_impl.c"
        __label__ = 40; break; //@line 885 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$ptr_addr]; //@line 886 "xmltok_impl.c"
        var $5=(($4)&4294967295); //@line 886 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 886 "xmltok_impl.c"
        var $7=reSign(($6), 8, 0)==0; //@line 886 "xmltok_impl.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 886 "xmltok_impl.c"
      case 3: // $bb2
        var $8=HEAP[$enc_addr]; //@line 886 "xmltok_impl.c"
        var $9=$8; //@line 886 "xmltok_impl.c"
        var $10=HEAP[$ptr_addr]; //@line 886 "xmltok_impl.c"
        var $11=(($10+1)&4294967295); //@line 886 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 886 "xmltok_impl.c"
        var $13=unSign(($12), 8, 0); //@line 886 "xmltok_impl.c"
        var $14=(($9+72)&4294967295); //@line 886 "xmltok_impl.c"
        var $15=(($14+$13)&4294967295); //@line 886 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 886 "xmltok_impl.c"
        var $17=unSign(($16), 8, 0); //@line 886 "xmltok_impl.c"
        HEAP[$iftmp_1106]=$17; //@line 886 "xmltok_impl.c"
        __label__ = 5; break; //@line 886 "xmltok_impl.c"
      case 4: // $bb3
        var $18=HEAP[$ptr_addr]; //@line 886 "xmltok_impl.c"
        var $19=(($18+1)&4294967295); //@line 886 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 886 "xmltok_impl.c"
        var $21=reSign(($20), 8, 0); //@line 886 "xmltok_impl.c"
        var $22=HEAP[$ptr_addr]; //@line 886 "xmltok_impl.c"
        var $23=(($22)&4294967295); //@line 886 "xmltok_impl.c"
        var $24=HEAP[$23]; //@line 886 "xmltok_impl.c"
        var $25=reSign(($24), 8, 0); //@line 886 "xmltok_impl.c"
        var $26=((($25)) & 255); //@line 886 "xmltok_impl.c"
        var $27=((($21)) & 255); //@line 886 "xmltok_impl.c"
        var $28=_unicode_byte_type($26, $27); //@line 886 "xmltok_impl.c"
        HEAP[$iftmp_1106]=$28; //@line 886 "xmltok_impl.c"
        __label__ = 5; break; //@line 886 "xmltok_impl.c"
      case 5: // $bb4
        var $29=HEAP[$iftmp_1106]; //@line 886 "xmltok_impl.c"
        if ($29 == 5) {
          __label__ = 9; break;
        }
        else if ($29 == 6) {
          __label__ = 12; break;
        }
        else if ($29 == 7) {
          __label__ = 15; break;
        }
        else if ($29 == 9) {
          __label__ = 18; break;
        }
        else if ($29 == 10) {
          __label__ = 18; break;
        }
        else if ($29 == 21) {
          __label__ = 18; break;
        }
        else if ($29 == 22) {
          __label__ = 8; break;
        }
        else if ($29 == 24) {
          __label__ = 8; break;
        }
        else if ($29 == 29) {
          __label__ = 6; break;
        }
        else if ($29 == 30) {
          __label__ = 18; break;
        }
        else {
        __label__ = 19; break;
        }
        
      case 6: // $bb5
        var $30=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        var $31=(($30)&4294967295); //@line 887 "xmltok_impl.c"
        var $32=HEAP[$31]; //@line 887 "xmltok_impl.c"
        var $33=unSign(($32), 8, 0); //@line 887 "xmltok_impl.c"
        var $34=((_nmstrtPages+$33)&4294967295); //@line 887 "xmltok_impl.c"
        var $35=HEAP[$34]; //@line 887 "xmltok_impl.c"
        var $36=unSign(($35), 8, 0); //@line 887 "xmltok_impl.c"
        var $37=($36) << 3; //@line 887 "xmltok_impl.c"
        var $38=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        var $39=(($38+1)&4294967295); //@line 887 "xmltok_impl.c"
        var $40=HEAP[$39]; //@line 887 "xmltok_impl.c"
        var $41=unSign(($40), 8, 0) >>> 5; //@line 887 "xmltok_impl.c"
        var $42=unSign(($41), 8, 0); //@line 887 "xmltok_impl.c"
        var $43=((($37) + ($42))&4294967295); //@line 887 "xmltok_impl.c"
        var $44=((_namingBitmap+$43*4)&4294967295); //@line 887 "xmltok_impl.c"
        var $45=HEAP[$44]; //@line 887 "xmltok_impl.c"
        var $46=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        var $47=(($46+1)&4294967295); //@line 887 "xmltok_impl.c"
        var $48=HEAP[$47]; //@line 887 "xmltok_impl.c"
        var $49=unSign(($48), 8, 0); //@line 887 "xmltok_impl.c"
        var $50=($49) & 31; //@line 887 "xmltok_impl.c"
        var $51=1 << ($50); //@line 887 "xmltok_impl.c"
        var $52=($45) & ($51); //@line 887 "xmltok_impl.c"
        var $53=((($52))|0)==0; //@line 887 "xmltok_impl.c"
        if ($53) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 887 "xmltok_impl.c"
      case 7: // $bb6
        var $54=HEAP[$nextTokPtr_addr]; //@line 887 "xmltok_impl.c"
        var $55=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        HEAP[$54]=$55; //@line 887 "xmltok_impl.c"
        HEAP[$0]=0; //@line 887 "xmltok_impl.c"
        __label__ = 40; break; //@line 887 "xmltok_impl.c"
      case 8: // $bb7
        var $56=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        var $57=(($56+2)&4294967295); //@line 887 "xmltok_impl.c"
        HEAP[$ptr_addr]=$57; //@line 887 "xmltok_impl.c"
        __label__ = 38; break; //@line 887 "xmltok_impl.c"
      case 9: // $bb8
        var $58=HEAP[$end_addr]; //@line 887 "xmltok_impl.c"
        var $59=($58); //@line 887 "xmltok_impl.c"
        var $60=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        var $61=($60); //@line 887 "xmltok_impl.c"
        var $62=((($59) - ($61))&4294967295); //@line 887 "xmltok_impl.c"
        var $63=((($62))|0) <= 1; //@line 887 "xmltok_impl.c"
        if ($63) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 887 "xmltok_impl.c"
      case 10: // $bb9
        HEAP[$0]=-2; //@line 887 "xmltok_impl.c"
        __label__ = 40; break; //@line 887 "xmltok_impl.c"
      case 11: // $bb10
        var $64=HEAP[$nextTokPtr_addr]; //@line 887 "xmltok_impl.c"
        var $65=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        HEAP[$64]=$65; //@line 887 "xmltok_impl.c"
        HEAP[$0]=0; //@line 887 "xmltok_impl.c"
        __label__ = 40; break; //@line 887 "xmltok_impl.c"
      case 12: // $bb11
        var $66=HEAP[$end_addr]; //@line 887 "xmltok_impl.c"
        var $67=($66); //@line 887 "xmltok_impl.c"
        var $68=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        var $69=($68); //@line 887 "xmltok_impl.c"
        var $70=((($67) - ($69))&4294967295); //@line 887 "xmltok_impl.c"
        var $71=((($70))|0) <= 2; //@line 887 "xmltok_impl.c"
        if ($71) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 887 "xmltok_impl.c"
      case 13: // $bb12
        HEAP[$0]=-2; //@line 887 "xmltok_impl.c"
        __label__ = 40; break; //@line 887 "xmltok_impl.c"
      case 14: // $bb13
        var $72=HEAP[$nextTokPtr_addr]; //@line 887 "xmltok_impl.c"
        var $73=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        HEAP[$72]=$73; //@line 887 "xmltok_impl.c"
        HEAP[$0]=0; //@line 887 "xmltok_impl.c"
        __label__ = 40; break; //@line 887 "xmltok_impl.c"
      case 15: // $bb14
        var $74=HEAP[$end_addr]; //@line 887 "xmltok_impl.c"
        var $75=($74); //@line 887 "xmltok_impl.c"
        var $76=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        var $77=($76); //@line 887 "xmltok_impl.c"
        var $78=((($75) - ($77))&4294967295); //@line 887 "xmltok_impl.c"
        var $79=((($78))|0) <= 3; //@line 887 "xmltok_impl.c"
        if ($79) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 887 "xmltok_impl.c"
      case 16: // $bb15
        HEAP[$0]=-2; //@line 887 "xmltok_impl.c"
        __label__ = 40; break; //@line 887 "xmltok_impl.c"
      case 17: // $bb16
        var $80=HEAP[$nextTokPtr_addr]; //@line 887 "xmltok_impl.c"
        var $81=HEAP[$ptr_addr]; //@line 887 "xmltok_impl.c"
        HEAP[$80]=$81; //@line 887 "xmltok_impl.c"
        HEAP[$0]=0; //@line 887 "xmltok_impl.c"
        __label__ = 40; break; //@line 887 "xmltok_impl.c"
      case 18: // $bb17
        var $82=HEAP[$nextTokPtr_addr]; //@line 889 "xmltok_impl.c"
        var $83=HEAP[$ptr_addr]; //@line 889 "xmltok_impl.c"
        HEAP[$82]=$83; //@line 889 "xmltok_impl.c"
        HEAP[$0]=22; //@line 890 "xmltok_impl.c"
        __label__ = 40; break; //@line 890 "xmltok_impl.c"
      case 19: // $bb18
        var $84=HEAP[$nextTokPtr_addr]; //@line 892 "xmltok_impl.c"
        var $85=HEAP[$ptr_addr]; //@line 892 "xmltok_impl.c"
        HEAP[$84]=$85; //@line 892 "xmltok_impl.c"
        HEAP[$0]=0; //@line 893 "xmltok_impl.c"
        __label__ = 40; break; //@line 893 "xmltok_impl.c"
      case 20: // $bb19
        var $86=HEAP[$ptr_addr]; //@line 896 "xmltok_impl.c"
        var $87=(($86)&4294967295); //@line 896 "xmltok_impl.c"
        var $88=HEAP[$87]; //@line 896 "xmltok_impl.c"
        var $89=reSign(($88), 8, 0)==0; //@line 896 "xmltok_impl.c"
        if ($89) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 896 "xmltok_impl.c"
      case 21: // $bb20
        var $90=HEAP[$enc_addr]; //@line 896 "xmltok_impl.c"
        var $91=$90; //@line 896 "xmltok_impl.c"
        var $92=HEAP[$ptr_addr]; //@line 896 "xmltok_impl.c"
        var $93=(($92+1)&4294967295); //@line 896 "xmltok_impl.c"
        var $94=HEAP[$93]; //@line 896 "xmltok_impl.c"
        var $95=unSign(($94), 8, 0); //@line 896 "xmltok_impl.c"
        var $96=(($91+72)&4294967295); //@line 896 "xmltok_impl.c"
        var $97=(($96+$95)&4294967295); //@line 896 "xmltok_impl.c"
        var $98=HEAP[$97]; //@line 896 "xmltok_impl.c"
        var $99=unSign(($98), 8, 0); //@line 896 "xmltok_impl.c"
        HEAP[$iftmp_1114]=$99; //@line 896 "xmltok_impl.c"
        __label__ = 23; break; //@line 896 "xmltok_impl.c"
      case 22: // $bb21
        var $100=HEAP[$ptr_addr]; //@line 896 "xmltok_impl.c"
        var $101=(($100+1)&4294967295); //@line 896 "xmltok_impl.c"
        var $102=HEAP[$101]; //@line 896 "xmltok_impl.c"
        var $103=reSign(($102), 8, 0); //@line 896 "xmltok_impl.c"
        var $104=HEAP[$ptr_addr]; //@line 896 "xmltok_impl.c"
        var $105=(($104)&4294967295); //@line 896 "xmltok_impl.c"
        var $106=HEAP[$105]; //@line 896 "xmltok_impl.c"
        var $107=reSign(($106), 8, 0); //@line 896 "xmltok_impl.c"
        var $108=((($107)) & 255); //@line 896 "xmltok_impl.c"
        var $109=((($103)) & 255); //@line 896 "xmltok_impl.c"
        var $110=_unicode_byte_type($108, $109); //@line 896 "xmltok_impl.c"
        HEAP[$iftmp_1114]=$110; //@line 896 "xmltok_impl.c"
        __label__ = 23; break; //@line 896 "xmltok_impl.c"
      case 23: // $bb22
        var $111=HEAP[$iftmp_1114]; //@line 896 "xmltok_impl.c"
        if ($111 == 5) {
          __label__ = 27; break;
        }
        else if ($111 == 6) {
          __label__ = 30; break;
        }
        else if ($111 == 7) {
          __label__ = 33; break;
        }
        else if ($111 == 18) {
          __label__ = 36; break;
        }
        else if ($111 == 22) {
          __label__ = 26; break;
        }
        else if ($111 == 24) {
          __label__ = 26; break;
        }
        else if ($111 == 25) {
          __label__ = 26; break;
        }
        else if ($111 == 26) {
          __label__ = 26; break;
        }
        else if ($111 == 27) {
          __label__ = 26; break;
        }
        else if ($111 == 29) {
          __label__ = 24; break;
        }
        else {
        __label__ = 37; break;
        }
        
      case 24: // $bb23
        var $112=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        var $113=(($112)&4294967295); //@line 897 "xmltok_impl.c"
        var $114=HEAP[$113]; //@line 897 "xmltok_impl.c"
        var $115=unSign(($114), 8, 0); //@line 897 "xmltok_impl.c"
        var $116=((_namePages+$115)&4294967295); //@line 897 "xmltok_impl.c"
        var $117=HEAP[$116]; //@line 897 "xmltok_impl.c"
        var $118=unSign(($117), 8, 0); //@line 897 "xmltok_impl.c"
        var $119=($118) << 3; //@line 897 "xmltok_impl.c"
        var $120=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        var $121=(($120+1)&4294967295); //@line 897 "xmltok_impl.c"
        var $122=HEAP[$121]; //@line 897 "xmltok_impl.c"
        var $123=unSign(($122), 8, 0) >>> 5; //@line 897 "xmltok_impl.c"
        var $124=unSign(($123), 8, 0); //@line 897 "xmltok_impl.c"
        var $125=((($119) + ($124))&4294967295); //@line 897 "xmltok_impl.c"
        var $126=((_namingBitmap+$125*4)&4294967295); //@line 897 "xmltok_impl.c"
        var $127=HEAP[$126]; //@line 897 "xmltok_impl.c"
        var $128=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        var $129=(($128+1)&4294967295); //@line 897 "xmltok_impl.c"
        var $130=HEAP[$129]; //@line 897 "xmltok_impl.c"
        var $131=unSign(($130), 8, 0); //@line 897 "xmltok_impl.c"
        var $132=($131) & 31; //@line 897 "xmltok_impl.c"
        var $133=1 << ($132); //@line 897 "xmltok_impl.c"
        var $134=($127) & ($133); //@line 897 "xmltok_impl.c"
        var $135=((($134))|0)==0; //@line 897 "xmltok_impl.c"
        if ($135) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 897 "xmltok_impl.c"
      case 25: // $bb24
        var $136=HEAP[$nextTokPtr_addr]; //@line 897 "xmltok_impl.c"
        var $137=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        HEAP[$136]=$137; //@line 897 "xmltok_impl.c"
        HEAP[$0]=0; //@line 897 "xmltok_impl.c"
        __label__ = 40; break; //@line 897 "xmltok_impl.c"
      case 26: // $bb25
        var $138=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        var $139=(($138+2)&4294967295); //@line 897 "xmltok_impl.c"
        HEAP[$ptr_addr]=$139; //@line 897 "xmltok_impl.c"
        __label__ = 38; break; //@line 897 "xmltok_impl.c"
      case 27: // $bb26
        var $140=HEAP[$end_addr]; //@line 897 "xmltok_impl.c"
        var $141=($140); //@line 897 "xmltok_impl.c"
        var $142=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        var $143=($142); //@line 897 "xmltok_impl.c"
        var $144=((($141) - ($143))&4294967295); //@line 897 "xmltok_impl.c"
        var $145=((($144))|0) <= 1; //@line 897 "xmltok_impl.c"
        if ($145) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 897 "xmltok_impl.c"
      case 28: // $bb27
        HEAP[$0]=-2; //@line 897 "xmltok_impl.c"
        __label__ = 40; break; //@line 897 "xmltok_impl.c"
      case 29: // $bb28
        var $146=HEAP[$nextTokPtr_addr]; //@line 897 "xmltok_impl.c"
        var $147=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        HEAP[$146]=$147; //@line 897 "xmltok_impl.c"
        HEAP[$0]=0; //@line 897 "xmltok_impl.c"
        __label__ = 40; break; //@line 897 "xmltok_impl.c"
      case 30: // $bb29
        var $148=HEAP[$end_addr]; //@line 897 "xmltok_impl.c"
        var $149=($148); //@line 897 "xmltok_impl.c"
        var $150=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        var $151=($150); //@line 897 "xmltok_impl.c"
        var $152=((($149) - ($151))&4294967295); //@line 897 "xmltok_impl.c"
        var $153=((($152))|0) <= 2; //@line 897 "xmltok_impl.c"
        if ($153) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 897 "xmltok_impl.c"
      case 31: // $bb30
        HEAP[$0]=-2; //@line 897 "xmltok_impl.c"
        __label__ = 40; break; //@line 897 "xmltok_impl.c"
      case 32: // $bb31
        var $154=HEAP[$nextTokPtr_addr]; //@line 897 "xmltok_impl.c"
        var $155=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        HEAP[$154]=$155; //@line 897 "xmltok_impl.c"
        HEAP[$0]=0; //@line 897 "xmltok_impl.c"
        __label__ = 40; break; //@line 897 "xmltok_impl.c"
      case 33: // $bb32
        var $156=HEAP[$end_addr]; //@line 897 "xmltok_impl.c"
        var $157=($156); //@line 897 "xmltok_impl.c"
        var $158=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        var $159=($158); //@line 897 "xmltok_impl.c"
        var $160=((($157) - ($159))&4294967295); //@line 897 "xmltok_impl.c"
        var $161=((($160))|0) <= 3; //@line 897 "xmltok_impl.c"
        if ($161) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 897 "xmltok_impl.c"
      case 34: // $bb33
        HEAP[$0]=-2; //@line 897 "xmltok_impl.c"
        __label__ = 40; break; //@line 897 "xmltok_impl.c"
      case 35: // $bb34
        var $162=HEAP[$nextTokPtr_addr]; //@line 897 "xmltok_impl.c"
        var $163=HEAP[$ptr_addr]; //@line 897 "xmltok_impl.c"
        HEAP[$162]=$163; //@line 897 "xmltok_impl.c"
        HEAP[$0]=0; //@line 897 "xmltok_impl.c"
        __label__ = 40; break; //@line 897 "xmltok_impl.c"
      case 36: // $bb35
        var $164=HEAP[$ptr_addr]; //@line 899 "xmltok_impl.c"
        var $165=(($164+2)&4294967295); //@line 899 "xmltok_impl.c"
        var $166=HEAP[$nextTokPtr_addr]; //@line 899 "xmltok_impl.c"
        HEAP[$166]=$165; //@line 899 "xmltok_impl.c"
        HEAP[$0]=28; //@line 900 "xmltok_impl.c"
        __label__ = 40; break; //@line 900 "xmltok_impl.c"
      case 37: // $bb36
        var $167=HEAP[$nextTokPtr_addr]; //@line 902 "xmltok_impl.c"
        var $168=HEAP[$ptr_addr]; //@line 902 "xmltok_impl.c"
        HEAP[$167]=$168; //@line 902 "xmltok_impl.c"
        HEAP[$0]=0; //@line 903 "xmltok_impl.c"
        __label__ = 40; break; //@line 903 "xmltok_impl.c"
      case 38: // $bb37
        var $169=HEAP[$ptr_addr]; //@line 895 "xmltok_impl.c"
        var $170=HEAP[$end_addr]; //@line 895 "xmltok_impl.c"
        var $171=($169)!=($170); //@line 895 "xmltok_impl.c"
        if ($171) { __label__ = 20; break; } else { __label__ = 39; break; } //@line 895 "xmltok_impl.c"
      case 39: // $bb38
        HEAP[$0]=-1; //@line 906 "xmltok_impl.c"
        __label__ = 40; break; //@line 906 "xmltok_impl.c"
      case 40: // $bb39
        var $172=HEAP[$0]; //@line 885 "xmltok_impl.c"
        HEAP[$retval]=$172; //@line 885 "xmltok_impl.c"
        __label__ = 41; break; //@line 885 "xmltok_impl.c"
      case 41: // $return
        var $retval40=HEAP[$retval]; //@line 885 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval40; //@line 885 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_scanPoundName($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_1130=__stackBase__+20;
        var $iftmp_1122=__stackBase__+24;
        var $0=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 913 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 913 "xmltok_impl.c"
        var $3=($1)==($2); //@line 913 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 913 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 914 "xmltok_impl.c"
        __label__ = 39; break; //@line 914 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$ptr_addr]; //@line 915 "xmltok_impl.c"
        var $5=(($4)&4294967295); //@line 915 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 915 "xmltok_impl.c"
        var $7=reSign(($6), 8, 0)==0; //@line 915 "xmltok_impl.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 915 "xmltok_impl.c"
      case 3: // $bb2
        var $8=HEAP[$enc_addr]; //@line 915 "xmltok_impl.c"
        var $9=$8; //@line 915 "xmltok_impl.c"
        var $10=HEAP[$ptr_addr]; //@line 915 "xmltok_impl.c"
        var $11=(($10+1)&4294967295); //@line 915 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 915 "xmltok_impl.c"
        var $13=unSign(($12), 8, 0); //@line 915 "xmltok_impl.c"
        var $14=(($9+72)&4294967295); //@line 915 "xmltok_impl.c"
        var $15=(($14+$13)&4294967295); //@line 915 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 915 "xmltok_impl.c"
        var $17=unSign(($16), 8, 0); //@line 915 "xmltok_impl.c"
        HEAP[$iftmp_1122]=$17; //@line 915 "xmltok_impl.c"
        __label__ = 5; break; //@line 915 "xmltok_impl.c"
      case 4: // $bb3
        var $18=HEAP[$ptr_addr]; //@line 915 "xmltok_impl.c"
        var $19=(($18+1)&4294967295); //@line 915 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 915 "xmltok_impl.c"
        var $21=reSign(($20), 8, 0); //@line 915 "xmltok_impl.c"
        var $22=HEAP[$ptr_addr]; //@line 915 "xmltok_impl.c"
        var $23=(($22)&4294967295); //@line 915 "xmltok_impl.c"
        var $24=HEAP[$23]; //@line 915 "xmltok_impl.c"
        var $25=reSign(($24), 8, 0); //@line 915 "xmltok_impl.c"
        var $26=((($25)) & 255); //@line 915 "xmltok_impl.c"
        var $27=((($21)) & 255); //@line 915 "xmltok_impl.c"
        var $28=_unicode_byte_type($26, $27); //@line 915 "xmltok_impl.c"
        HEAP[$iftmp_1122]=$28; //@line 915 "xmltok_impl.c"
        __label__ = 5; break; //@line 915 "xmltok_impl.c"
      case 5: // $bb4
        var $29=HEAP[$iftmp_1122]; //@line 915 "xmltok_impl.c"
        if ($29 == 5) {
          __label__ = 9; break;
        }
        else if ($29 == 6) {
          __label__ = 12; break;
        }
        else if ($29 == 7) {
          __label__ = 15; break;
        }
        else if ($29 == 22) {
          __label__ = 8; break;
        }
        else if ($29 == 24) {
          __label__ = 8; break;
        }
        else if ($29 == 29) {
          __label__ = 6; break;
        }
        else {
        __label__ = 18; break;
        }
        
      case 6: // $bb5
        var $30=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        var $31=(($30)&4294967295); //@line 916 "xmltok_impl.c"
        var $32=HEAP[$31]; //@line 916 "xmltok_impl.c"
        var $33=unSign(($32), 8, 0); //@line 916 "xmltok_impl.c"
        var $34=((_nmstrtPages+$33)&4294967295); //@line 916 "xmltok_impl.c"
        var $35=HEAP[$34]; //@line 916 "xmltok_impl.c"
        var $36=unSign(($35), 8, 0); //@line 916 "xmltok_impl.c"
        var $37=($36) << 3; //@line 916 "xmltok_impl.c"
        var $38=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        var $39=(($38+1)&4294967295); //@line 916 "xmltok_impl.c"
        var $40=HEAP[$39]; //@line 916 "xmltok_impl.c"
        var $41=unSign(($40), 8, 0) >>> 5; //@line 916 "xmltok_impl.c"
        var $42=unSign(($41), 8, 0); //@line 916 "xmltok_impl.c"
        var $43=((($37) + ($42))&4294967295); //@line 916 "xmltok_impl.c"
        var $44=((_namingBitmap+$43*4)&4294967295); //@line 916 "xmltok_impl.c"
        var $45=HEAP[$44]; //@line 916 "xmltok_impl.c"
        var $46=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        var $47=(($46+1)&4294967295); //@line 916 "xmltok_impl.c"
        var $48=HEAP[$47]; //@line 916 "xmltok_impl.c"
        var $49=unSign(($48), 8, 0); //@line 916 "xmltok_impl.c"
        var $50=($49) & 31; //@line 916 "xmltok_impl.c"
        var $51=1 << ($50); //@line 916 "xmltok_impl.c"
        var $52=($45) & ($51); //@line 916 "xmltok_impl.c"
        var $53=((($52))|0)==0; //@line 916 "xmltok_impl.c"
        if ($53) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 916 "xmltok_impl.c"
      case 7: // $bb6
        var $54=HEAP[$nextTokPtr_addr]; //@line 916 "xmltok_impl.c"
        var $55=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        HEAP[$54]=$55; //@line 916 "xmltok_impl.c"
        HEAP[$0]=0; //@line 916 "xmltok_impl.c"
        __label__ = 39; break; //@line 916 "xmltok_impl.c"
      case 8: // $bb7
        var $56=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        var $57=(($56+2)&4294967295); //@line 916 "xmltok_impl.c"
        HEAP[$ptr_addr]=$57; //@line 916 "xmltok_impl.c"
        __label__ = 37; break; //@line 916 "xmltok_impl.c"
      case 9: // $bb8
        var $58=HEAP[$end_addr]; //@line 916 "xmltok_impl.c"
        var $59=($58); //@line 916 "xmltok_impl.c"
        var $60=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        var $61=($60); //@line 916 "xmltok_impl.c"
        var $62=((($59) - ($61))&4294967295); //@line 916 "xmltok_impl.c"
        var $63=((($62))|0) <= 1; //@line 916 "xmltok_impl.c"
        if ($63) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 916 "xmltok_impl.c"
      case 10: // $bb9
        HEAP[$0]=-2; //@line 916 "xmltok_impl.c"
        __label__ = 39; break; //@line 916 "xmltok_impl.c"
      case 11: // $bb10
        var $64=HEAP[$nextTokPtr_addr]; //@line 916 "xmltok_impl.c"
        var $65=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        HEAP[$64]=$65; //@line 916 "xmltok_impl.c"
        HEAP[$0]=0; //@line 916 "xmltok_impl.c"
        __label__ = 39; break; //@line 916 "xmltok_impl.c"
      case 12: // $bb11
        var $66=HEAP[$end_addr]; //@line 916 "xmltok_impl.c"
        var $67=($66); //@line 916 "xmltok_impl.c"
        var $68=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        var $69=($68); //@line 916 "xmltok_impl.c"
        var $70=((($67) - ($69))&4294967295); //@line 916 "xmltok_impl.c"
        var $71=((($70))|0) <= 2; //@line 916 "xmltok_impl.c"
        if ($71) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 916 "xmltok_impl.c"
      case 13: // $bb12
        HEAP[$0]=-2; //@line 916 "xmltok_impl.c"
        __label__ = 39; break; //@line 916 "xmltok_impl.c"
      case 14: // $bb13
        var $72=HEAP[$nextTokPtr_addr]; //@line 916 "xmltok_impl.c"
        var $73=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        HEAP[$72]=$73; //@line 916 "xmltok_impl.c"
        HEAP[$0]=0; //@line 916 "xmltok_impl.c"
        __label__ = 39; break; //@line 916 "xmltok_impl.c"
      case 15: // $bb14
        var $74=HEAP[$end_addr]; //@line 916 "xmltok_impl.c"
        var $75=($74); //@line 916 "xmltok_impl.c"
        var $76=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        var $77=($76); //@line 916 "xmltok_impl.c"
        var $78=((($75) - ($77))&4294967295); //@line 916 "xmltok_impl.c"
        var $79=((($78))|0) <= 3; //@line 916 "xmltok_impl.c"
        if ($79) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 916 "xmltok_impl.c"
      case 16: // $bb15
        HEAP[$0]=-2; //@line 916 "xmltok_impl.c"
        __label__ = 39; break; //@line 916 "xmltok_impl.c"
      case 17: // $bb16
        var $80=HEAP[$nextTokPtr_addr]; //@line 916 "xmltok_impl.c"
        var $81=HEAP[$ptr_addr]; //@line 916 "xmltok_impl.c"
        HEAP[$80]=$81; //@line 916 "xmltok_impl.c"
        HEAP[$0]=0; //@line 916 "xmltok_impl.c"
        __label__ = 39; break; //@line 916 "xmltok_impl.c"
      case 18: // $bb17
        var $82=HEAP[$nextTokPtr_addr]; //@line 918 "xmltok_impl.c"
        var $83=HEAP[$ptr_addr]; //@line 918 "xmltok_impl.c"
        HEAP[$82]=$83; //@line 918 "xmltok_impl.c"
        HEAP[$0]=0; //@line 919 "xmltok_impl.c"
        __label__ = 39; break; //@line 919 "xmltok_impl.c"
      case 19: // $bb18
        var $84=HEAP[$ptr_addr]; //@line 922 "xmltok_impl.c"
        var $85=(($84)&4294967295); //@line 922 "xmltok_impl.c"
        var $86=HEAP[$85]; //@line 922 "xmltok_impl.c"
        var $87=reSign(($86), 8, 0)==0; //@line 922 "xmltok_impl.c"
        if ($87) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 922 "xmltok_impl.c"
      case 20: // $bb19
        var $88=HEAP[$enc_addr]; //@line 922 "xmltok_impl.c"
        var $89=$88; //@line 922 "xmltok_impl.c"
        var $90=HEAP[$ptr_addr]; //@line 922 "xmltok_impl.c"
        var $91=(($90+1)&4294967295); //@line 922 "xmltok_impl.c"
        var $92=HEAP[$91]; //@line 922 "xmltok_impl.c"
        var $93=unSign(($92), 8, 0); //@line 922 "xmltok_impl.c"
        var $94=(($89+72)&4294967295); //@line 922 "xmltok_impl.c"
        var $95=(($94+$93)&4294967295); //@line 922 "xmltok_impl.c"
        var $96=HEAP[$95]; //@line 922 "xmltok_impl.c"
        var $97=unSign(($96), 8, 0); //@line 922 "xmltok_impl.c"
        HEAP[$iftmp_1130]=$97; //@line 922 "xmltok_impl.c"
        __label__ = 22; break; //@line 922 "xmltok_impl.c"
      case 21: // $bb20
        var $98=HEAP[$ptr_addr]; //@line 922 "xmltok_impl.c"
        var $99=(($98+1)&4294967295); //@line 922 "xmltok_impl.c"
        var $100=HEAP[$99]; //@line 922 "xmltok_impl.c"
        var $101=reSign(($100), 8, 0); //@line 922 "xmltok_impl.c"
        var $102=HEAP[$ptr_addr]; //@line 922 "xmltok_impl.c"
        var $103=(($102)&4294967295); //@line 922 "xmltok_impl.c"
        var $104=HEAP[$103]; //@line 922 "xmltok_impl.c"
        var $105=reSign(($104), 8, 0); //@line 922 "xmltok_impl.c"
        var $106=((($105)) & 255); //@line 922 "xmltok_impl.c"
        var $107=((($101)) & 255); //@line 922 "xmltok_impl.c"
        var $108=_unicode_byte_type($106, $107); //@line 922 "xmltok_impl.c"
        HEAP[$iftmp_1130]=$108; //@line 922 "xmltok_impl.c"
        __label__ = 22; break; //@line 922 "xmltok_impl.c"
      case 22: // $bb21
        var $109=HEAP[$iftmp_1130]; //@line 922 "xmltok_impl.c"
        if ($109 == 5) {
          __label__ = 26; break;
        }
        else if ($109 == 6) {
          __label__ = 29; break;
        }
        else if ($109 == 7) {
          __label__ = 32; break;
        }
        else if ($109 == 9) {
          __label__ = 35; break;
        }
        else if ($109 == 10) {
          __label__ = 35; break;
        }
        else if ($109 == 11) {
          __label__ = 35; break;
        }
        else if ($109 == 21) {
          __label__ = 35; break;
        }
        else if ($109 == 22) {
          __label__ = 25; break;
        }
        else if ($109 == 24) {
          __label__ = 25; break;
        }
        else if ($109 == 25) {
          __label__ = 25; break;
        }
        else if ($109 == 26) {
          __label__ = 25; break;
        }
        else if ($109 == 27) {
          __label__ = 25; break;
        }
        else if ($109 == 29) {
          __label__ = 23; break;
        }
        else if ($109 == 30) {
          __label__ = 35; break;
        }
        else if ($109 == 32) {
          __label__ = 35; break;
        }
        else if ($109 == 36) {
          __label__ = 35; break;
        }
        else {
        __label__ = 36; break;
        }
        
      case 23: // $bb22
        var $110=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        var $111=(($110)&4294967295); //@line 923 "xmltok_impl.c"
        var $112=HEAP[$111]; //@line 923 "xmltok_impl.c"
        var $113=unSign(($112), 8, 0); //@line 923 "xmltok_impl.c"
        var $114=((_namePages+$113)&4294967295); //@line 923 "xmltok_impl.c"
        var $115=HEAP[$114]; //@line 923 "xmltok_impl.c"
        var $116=unSign(($115), 8, 0); //@line 923 "xmltok_impl.c"
        var $117=($116) << 3; //@line 923 "xmltok_impl.c"
        var $118=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        var $119=(($118+1)&4294967295); //@line 923 "xmltok_impl.c"
        var $120=HEAP[$119]; //@line 923 "xmltok_impl.c"
        var $121=unSign(($120), 8, 0) >>> 5; //@line 923 "xmltok_impl.c"
        var $122=unSign(($121), 8, 0); //@line 923 "xmltok_impl.c"
        var $123=((($117) + ($122))&4294967295); //@line 923 "xmltok_impl.c"
        var $124=((_namingBitmap+$123*4)&4294967295); //@line 923 "xmltok_impl.c"
        var $125=HEAP[$124]; //@line 923 "xmltok_impl.c"
        var $126=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        var $127=(($126+1)&4294967295); //@line 923 "xmltok_impl.c"
        var $128=HEAP[$127]; //@line 923 "xmltok_impl.c"
        var $129=unSign(($128), 8, 0); //@line 923 "xmltok_impl.c"
        var $130=($129) & 31; //@line 923 "xmltok_impl.c"
        var $131=1 << ($130); //@line 923 "xmltok_impl.c"
        var $132=($125) & ($131); //@line 923 "xmltok_impl.c"
        var $133=((($132))|0)==0; //@line 923 "xmltok_impl.c"
        if ($133) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 923 "xmltok_impl.c"
      case 24: // $bb23
        var $134=HEAP[$nextTokPtr_addr]; //@line 923 "xmltok_impl.c"
        var $135=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        HEAP[$134]=$135; //@line 923 "xmltok_impl.c"
        HEAP[$0]=0; //@line 923 "xmltok_impl.c"
        __label__ = 39; break; //@line 923 "xmltok_impl.c"
      case 25: // $bb24
        var $136=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        var $137=(($136+2)&4294967295); //@line 923 "xmltok_impl.c"
        HEAP[$ptr_addr]=$137; //@line 923 "xmltok_impl.c"
        __label__ = 37; break; //@line 923 "xmltok_impl.c"
      case 26: // $bb25
        var $138=HEAP[$end_addr]; //@line 923 "xmltok_impl.c"
        var $139=($138); //@line 923 "xmltok_impl.c"
        var $140=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        var $141=($140); //@line 923 "xmltok_impl.c"
        var $142=((($139) - ($141))&4294967295); //@line 923 "xmltok_impl.c"
        var $143=((($142))|0) <= 1; //@line 923 "xmltok_impl.c"
        if ($143) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 923 "xmltok_impl.c"
      case 27: // $bb26
        HEAP[$0]=-2; //@line 923 "xmltok_impl.c"
        __label__ = 39; break; //@line 923 "xmltok_impl.c"
      case 28: // $bb27
        var $144=HEAP[$nextTokPtr_addr]; //@line 923 "xmltok_impl.c"
        var $145=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        HEAP[$144]=$145; //@line 923 "xmltok_impl.c"
        HEAP[$0]=0; //@line 923 "xmltok_impl.c"
        __label__ = 39; break; //@line 923 "xmltok_impl.c"
      case 29: // $bb28
        var $146=HEAP[$end_addr]; //@line 923 "xmltok_impl.c"
        var $147=($146); //@line 923 "xmltok_impl.c"
        var $148=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        var $149=($148); //@line 923 "xmltok_impl.c"
        var $150=((($147) - ($149))&4294967295); //@line 923 "xmltok_impl.c"
        var $151=((($150))|0) <= 2; //@line 923 "xmltok_impl.c"
        if ($151) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 923 "xmltok_impl.c"
      case 30: // $bb29
        HEAP[$0]=-2; //@line 923 "xmltok_impl.c"
        __label__ = 39; break; //@line 923 "xmltok_impl.c"
      case 31: // $bb30
        var $152=HEAP[$nextTokPtr_addr]; //@line 923 "xmltok_impl.c"
        var $153=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        HEAP[$152]=$153; //@line 923 "xmltok_impl.c"
        HEAP[$0]=0; //@line 923 "xmltok_impl.c"
        __label__ = 39; break; //@line 923 "xmltok_impl.c"
      case 32: // $bb31
        var $154=HEAP[$end_addr]; //@line 923 "xmltok_impl.c"
        var $155=($154); //@line 923 "xmltok_impl.c"
        var $156=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        var $157=($156); //@line 923 "xmltok_impl.c"
        var $158=((($155) - ($157))&4294967295); //@line 923 "xmltok_impl.c"
        var $159=((($158))|0) <= 3; //@line 923 "xmltok_impl.c"
        if ($159) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 923 "xmltok_impl.c"
      case 33: // $bb32
        HEAP[$0]=-2; //@line 923 "xmltok_impl.c"
        __label__ = 39; break; //@line 923 "xmltok_impl.c"
      case 34: // $bb33
        var $160=HEAP[$nextTokPtr_addr]; //@line 923 "xmltok_impl.c"
        var $161=HEAP[$ptr_addr]; //@line 923 "xmltok_impl.c"
        HEAP[$160]=$161; //@line 923 "xmltok_impl.c"
        HEAP[$0]=0; //@line 923 "xmltok_impl.c"
        __label__ = 39; break; //@line 923 "xmltok_impl.c"
      case 35: // $bb34
        var $162=HEAP[$nextTokPtr_addr]; //@line 926 "xmltok_impl.c"
        var $163=HEAP[$ptr_addr]; //@line 926 "xmltok_impl.c"
        HEAP[$162]=$163; //@line 926 "xmltok_impl.c"
        HEAP[$0]=20; //@line 927 "xmltok_impl.c"
        __label__ = 39; break; //@line 927 "xmltok_impl.c"
      case 36: // $bb35
        var $164=HEAP[$nextTokPtr_addr]; //@line 929 "xmltok_impl.c"
        var $165=HEAP[$ptr_addr]; //@line 929 "xmltok_impl.c"
        HEAP[$164]=$165; //@line 929 "xmltok_impl.c"
        HEAP[$0]=0; //@line 930 "xmltok_impl.c"
        __label__ = 39; break; //@line 930 "xmltok_impl.c"
      case 37: // $bb36
        var $166=HEAP[$ptr_addr]; //@line 921 "xmltok_impl.c"
        var $167=HEAP[$end_addr]; //@line 921 "xmltok_impl.c"
        var $168=($166)!=($167); //@line 921 "xmltok_impl.c"
        if ($168) { __label__ = 19; break; } else { __label__ = 38; break; } //@line 921 "xmltok_impl.c"
      case 38: // $bb37
        HEAP[$0]=-20; //@line 933 "xmltok_impl.c"
        __label__ = 39; break; //@line 933 "xmltok_impl.c"
      case 39: // $bb38
        var $169=HEAP[$0]; //@line 914 "xmltok_impl.c"
        HEAP[$retval]=$169; //@line 914 "xmltok_impl.c"
        __label__ = 40; break; //@line 914 "xmltok_impl.c"
      case 40: // $return
        var $retval39=HEAP[$retval]; //@line 914 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval39; //@line 914 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_scanLit($open, $enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $open_addr=__stackBase__;
        var $enc_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $nextTokPtr_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $iftmp_1146=__stackBase__+24;
        var $0=__stackBase__+28;
        var $iftmp_1138=__stackBase__+32;
        var $t=__stackBase__+36;
        var $_alloca_point_=0;
        HEAP[$open_addr]=$open;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        __label__ = 25; break; //@line 941 "xmltok_impl.c"
      case 1: // $bb
        var $1=HEAP[$ptr_addr]; //@line 942 "xmltok_impl.c"
        var $2=(($1)&4294967295); //@line 942 "xmltok_impl.c"
        var $3=HEAP[$2]; //@line 942 "xmltok_impl.c"
        var $4=reSign(($3), 8, 0)==0; //@line 942 "xmltok_impl.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 942 "xmltok_impl.c"
      case 2: // $bb1
        var $5=HEAP[$enc_addr]; //@line 942 "xmltok_impl.c"
        var $6=$5; //@line 942 "xmltok_impl.c"
        var $7=HEAP[$ptr_addr]; //@line 942 "xmltok_impl.c"
        var $8=(($7+1)&4294967295); //@line 942 "xmltok_impl.c"
        var $9=HEAP[$8]; //@line 942 "xmltok_impl.c"
        var $10=unSign(($9), 8, 0); //@line 942 "xmltok_impl.c"
        var $11=(($6+72)&4294967295); //@line 942 "xmltok_impl.c"
        var $12=(($11+$10)&4294967295); //@line 942 "xmltok_impl.c"
        var $13=HEAP[$12]; //@line 942 "xmltok_impl.c"
        var $14=unSign(($13), 8, 0); //@line 942 "xmltok_impl.c"
        HEAP[$iftmp_1138]=$14; //@line 942 "xmltok_impl.c"
        __label__ = 4; break; //@line 942 "xmltok_impl.c"
      case 3: // $bb2
        var $15=HEAP[$ptr_addr]; //@line 942 "xmltok_impl.c"
        var $16=(($15+1)&4294967295); //@line 942 "xmltok_impl.c"
        var $17=HEAP[$16]; //@line 942 "xmltok_impl.c"
        var $18=reSign(($17), 8, 0); //@line 942 "xmltok_impl.c"
        var $19=HEAP[$ptr_addr]; //@line 942 "xmltok_impl.c"
        var $20=(($19)&4294967295); //@line 942 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 942 "xmltok_impl.c"
        var $22=reSign(($21), 8, 0); //@line 942 "xmltok_impl.c"
        var $23=((($22)) & 255); //@line 942 "xmltok_impl.c"
        var $24=((($18)) & 255); //@line 942 "xmltok_impl.c"
        var $25=_unicode_byte_type($23, $24); //@line 942 "xmltok_impl.c"
        HEAP[$iftmp_1138]=$25; //@line 942 "xmltok_impl.c"
        __label__ = 4; break; //@line 942 "xmltok_impl.c"
      case 4: // $bb3
        var $26=HEAP[$iftmp_1138]; //@line 942 "xmltok_impl.c"
        HEAP[$t]=$26; //@line 942 "xmltok_impl.c"
        var $27=HEAP[$t]; //@line 943 "xmltok_impl.c"
        if ($27 == 0) {
          __label__ = 14; break;
        }
        else if ($27 == 1) {
          __label__ = 14; break;
        }
        else if ($27 == 5) {
          __label__ = 5; break;
        }
        else if ($27 == 6) {
          __label__ = 8; break;
        }
        else if ($27 == 7) {
          __label__ = 11; break;
        }
        else if ($27 == 8) {
          __label__ = 14; break;
        }
        else if ($27 == 12) {
          __label__ = 15; break;
        }
        else if ($27 == 13) {
          __label__ = 15; break;
        }
        else {
        __label__ = 24; break;
        }
        
      case 5: // $bb4
        var $28=HEAP[$end_addr]; //@line 944 "xmltok_impl.c"
        var $29=($28); //@line 944 "xmltok_impl.c"
        var $30=HEAP[$ptr_addr]; //@line 944 "xmltok_impl.c"
        var $31=($30); //@line 944 "xmltok_impl.c"
        var $32=((($29) - ($31))&4294967295); //@line 944 "xmltok_impl.c"
        var $33=((($32))|0) <= 1; //@line 944 "xmltok_impl.c"
        if ($33) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 944 "xmltok_impl.c"
      case 6: // $bb5
        HEAP[$0]=-2; //@line 944 "xmltok_impl.c"
        __label__ = 27; break; //@line 944 "xmltok_impl.c"
      case 7: // $bb6
        var $34=HEAP[$ptr_addr]; //@line 944 "xmltok_impl.c"
        var $35=(($34+2)&4294967295); //@line 944 "xmltok_impl.c"
        HEAP[$ptr_addr]=$35; //@line 944 "xmltok_impl.c"
        __label__ = 25; break; //@line 944 "xmltok_impl.c"
      case 8: // $bb7
        var $36=HEAP[$end_addr]; //@line 944 "xmltok_impl.c"
        var $37=($36); //@line 944 "xmltok_impl.c"
        var $38=HEAP[$ptr_addr]; //@line 944 "xmltok_impl.c"
        var $39=($38); //@line 944 "xmltok_impl.c"
        var $40=((($37) - ($39))&4294967295); //@line 944 "xmltok_impl.c"
        var $41=((($40))|0) <= 2; //@line 944 "xmltok_impl.c"
        if ($41) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 944 "xmltok_impl.c"
      case 9: // $bb8
        HEAP[$0]=-2; //@line 944 "xmltok_impl.c"
        __label__ = 27; break; //@line 944 "xmltok_impl.c"
      case 10: // $bb9
        var $42=HEAP[$ptr_addr]; //@line 944 "xmltok_impl.c"
        var $43=(($42+3)&4294967295); //@line 944 "xmltok_impl.c"
        HEAP[$ptr_addr]=$43; //@line 944 "xmltok_impl.c"
        __label__ = 25; break; //@line 944 "xmltok_impl.c"
      case 11: // $bb10
        var $44=HEAP[$end_addr]; //@line 944 "xmltok_impl.c"
        var $45=($44); //@line 944 "xmltok_impl.c"
        var $46=HEAP[$ptr_addr]; //@line 944 "xmltok_impl.c"
        var $47=($46); //@line 944 "xmltok_impl.c"
        var $48=((($45) - ($47))&4294967295); //@line 944 "xmltok_impl.c"
        var $49=((($48))|0) <= 3; //@line 944 "xmltok_impl.c"
        if ($49) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 944 "xmltok_impl.c"
      case 12: // $bb11
        HEAP[$0]=-2; //@line 944 "xmltok_impl.c"
        __label__ = 27; break; //@line 944 "xmltok_impl.c"
      case 13: // $bb12
        var $50=HEAP[$ptr_addr]; //@line 944 "xmltok_impl.c"
        var $51=(($50+4)&4294967295); //@line 944 "xmltok_impl.c"
        HEAP[$ptr_addr]=$51; //@line 944 "xmltok_impl.c"
        __label__ = 25; break; //@line 944 "xmltok_impl.c"
      case 14: // $bb13
        var $52=HEAP[$nextTokPtr_addr]; //@line 944 "xmltok_impl.c"
        var $53=HEAP[$ptr_addr]; //@line 944 "xmltok_impl.c"
        HEAP[$52]=$53; //@line 944 "xmltok_impl.c"
        HEAP[$0]=0; //@line 944 "xmltok_impl.c"
        __label__ = 27; break; //@line 944 "xmltok_impl.c"
      case 15: // $bb14
        var $54=HEAP[$ptr_addr]; //@line 947 "xmltok_impl.c"
        var $55=(($54+2)&4294967295); //@line 947 "xmltok_impl.c"
        HEAP[$ptr_addr]=$55; //@line 947 "xmltok_impl.c"
        var $56=HEAP[$t]; //@line 948 "xmltok_impl.c"
        var $57=HEAP[$open_addr]; //@line 948 "xmltok_impl.c"
        var $58=((($56))|0)!=((($57))|0); //@line 948 "xmltok_impl.c"
        if ($58) { __label__ = 25; break; } else { __label__ = 16; break; } //@line 948 "xmltok_impl.c"
      case 16: // $bb15
        var $59=HEAP[$ptr_addr]; //@line 950 "xmltok_impl.c"
        var $60=HEAP[$end_addr]; //@line 950 "xmltok_impl.c"
        var $61=($59)==($60); //@line 950 "xmltok_impl.c"
        if ($61) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 950 "xmltok_impl.c"
      case 17: // $bb16
        HEAP[$0]=-27; //@line 951 "xmltok_impl.c"
        __label__ = 27; break; //@line 951 "xmltok_impl.c"
      case 18: // $bb17
        var $62=HEAP[$nextTokPtr_addr]; //@line 952 "xmltok_impl.c"
        var $63=HEAP[$ptr_addr]; //@line 952 "xmltok_impl.c"
        HEAP[$62]=$63; //@line 952 "xmltok_impl.c"
        var $64=HEAP[$ptr_addr]; //@line 953 "xmltok_impl.c"
        var $65=(($64)&4294967295); //@line 953 "xmltok_impl.c"
        var $66=HEAP[$65]; //@line 953 "xmltok_impl.c"
        var $67=reSign(($66), 8, 0)==0; //@line 953 "xmltok_impl.c"
        if ($67) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 953 "xmltok_impl.c"
      case 19: // $bb18
        var $68=HEAP[$enc_addr]; //@line 953 "xmltok_impl.c"
        var $69=$68; //@line 953 "xmltok_impl.c"
        var $70=HEAP[$ptr_addr]; //@line 953 "xmltok_impl.c"
        var $71=(($70+1)&4294967295); //@line 953 "xmltok_impl.c"
        var $72=HEAP[$71]; //@line 953 "xmltok_impl.c"
        var $73=unSign(($72), 8, 0); //@line 953 "xmltok_impl.c"
        var $74=(($69+72)&4294967295); //@line 953 "xmltok_impl.c"
        var $75=(($74+$73)&4294967295); //@line 953 "xmltok_impl.c"
        var $76=HEAP[$75]; //@line 953 "xmltok_impl.c"
        var $77=unSign(($76), 8, 0); //@line 953 "xmltok_impl.c"
        HEAP[$iftmp_1146]=$77; //@line 953 "xmltok_impl.c"
        __label__ = 21; break; //@line 953 "xmltok_impl.c"
      case 20: // $bb19
        var $78=HEAP[$ptr_addr]; //@line 953 "xmltok_impl.c"
        var $79=(($78+1)&4294967295); //@line 953 "xmltok_impl.c"
        var $80=HEAP[$79]; //@line 953 "xmltok_impl.c"
        var $81=reSign(($80), 8, 0); //@line 953 "xmltok_impl.c"
        var $82=HEAP[$ptr_addr]; //@line 953 "xmltok_impl.c"
        var $83=(($82)&4294967295); //@line 953 "xmltok_impl.c"
        var $84=HEAP[$83]; //@line 953 "xmltok_impl.c"
        var $85=reSign(($84), 8, 0); //@line 953 "xmltok_impl.c"
        var $86=((($85)) & 255); //@line 953 "xmltok_impl.c"
        var $87=((($81)) & 255); //@line 953 "xmltok_impl.c"
        var $88=_unicode_byte_type($86, $87); //@line 953 "xmltok_impl.c"
        HEAP[$iftmp_1146]=$88; //@line 953 "xmltok_impl.c"
        __label__ = 21; break; //@line 953 "xmltok_impl.c"
      case 21: // $bb20
        var $89=HEAP[$iftmp_1146]; //@line 953 "xmltok_impl.c"
        if ($89 == 9) {
          __label__ = 22; break;
        }
        else if ($89 == 10) {
          __label__ = 22; break;
        }
        else if ($89 == 11) {
          __label__ = 22; break;
        }
        else if ($89 == 20) {
          __label__ = 22; break;
        }
        else if ($89 == 21) {
          __label__ = 22; break;
        }
        else if ($89 == 30) {
          __label__ = 22; break;
        }
        else {
        __label__ = 23; break;
        }
        
      case 22: // $bb21
        HEAP[$0]=27; //@line 956 "xmltok_impl.c"
        __label__ = 27; break; //@line 956 "xmltok_impl.c"
      case 23: // $bb22
        HEAP[$0]=0; //@line 958 "xmltok_impl.c"
        __label__ = 27; break; //@line 958 "xmltok_impl.c"
      case 24: // $bb23
        var $90=HEAP[$ptr_addr]; //@line 961 "xmltok_impl.c"
        var $91=(($90+2)&4294967295); //@line 961 "xmltok_impl.c"
        HEAP[$ptr_addr]=$91; //@line 961 "xmltok_impl.c"
        __label__ = 25; break; //@line 961 "xmltok_impl.c"
      case 25: // $bb24
        var $92=HEAP[$ptr_addr]; //@line 941 "xmltok_impl.c"
        var $93=HEAP[$end_addr]; //@line 941 "xmltok_impl.c"
        var $94=($92)!=($93); //@line 941 "xmltok_impl.c"
        if ($94) { __label__ = 1; break; } else { __label__ = 26; break; } //@line 941 "xmltok_impl.c"
      case 26: // $bb25
        HEAP[$0]=-1; //@line 965 "xmltok_impl.c"
        __label__ = 27; break; //@line 965 "xmltok_impl.c"
      case 27: // $bb26
        var $95=HEAP[$0]; //@line 944 "xmltok_impl.c"
        HEAP[$retval]=$95; //@line 944 "xmltok_impl.c"
        __label__ = 28; break; //@line 944 "xmltok_impl.c"
      case 28: // $return
        var $retval27=HEAP[$retval]; //@line 944 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval27; //@line 944 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_prologTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 52; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 52);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_1165=__stackBase__+20;
        var $iftmp_1157=__stackBase__+24;
        var $iftmp_1155=__stackBase__+28;
        var $iftmp_1153=__stackBase__+32;
        var $iftmp_1151=__stackBase__+36;
        var $0=__stackBase__+40;
        var $tok=__stackBase__+44;
        var $n=__stackBase__+48;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 973 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 973 "xmltok_impl.c"
        var $3=($1)==($2); //@line 973 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 973 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-4; //@line 974 "xmltok_impl.c"
        __label__ = 108; break; //@line 974 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$end_addr]; //@line 976 "xmltok_impl.c"
        var $5=($4); //@line 976 "xmltok_impl.c"
        var $6=HEAP[$ptr_addr]; //@line 976 "xmltok_impl.c"
        var $7=($6); //@line 976 "xmltok_impl.c"
        var $8=((($5) - ($7))&4294967295); //@line 976 "xmltok_impl.c"
        HEAP[$n]=$8; //@line 976 "xmltok_impl.c"
        var $9=HEAP[$n]; //@line 977 "xmltok_impl.c"
        var $10=($9) & 1; //@line 977 "xmltok_impl.c"
        var $11=((($10)) & 255); //@line 977 "xmltok_impl.c"
        var $toBool=reSign(($11), 8, 0)!=0; //@line 977 "xmltok_impl.c"
        if ($toBool) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 977 "xmltok_impl.c"
      case 3: // $bb2
        var $12=HEAP[$n]; //@line 978 "xmltok_impl.c"
        var $13=($12) & -2; //@line 978 "xmltok_impl.c"
        HEAP[$n]=$13; //@line 978 "xmltok_impl.c"
        var $14=HEAP[$n]; //@line 979 "xmltok_impl.c"
        var $15=((($14))|0)==0; //@line 979 "xmltok_impl.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 979 "xmltok_impl.c"
      case 4: // $bb3
        HEAP[$0]=-1; //@line 980 "xmltok_impl.c"
        __label__ = 108; break; //@line 980 "xmltok_impl.c"
      case 5: // $bb4
        var $16=HEAP[$ptr_addr]; //@line 981 "xmltok_impl.c"
        var $17=HEAP[$n]; //@line 981 "xmltok_impl.c"
        var $18=(($16+$17)&4294967295); //@line 981 "xmltok_impl.c"
        HEAP[$end_addr]=$18; //@line 981 "xmltok_impl.c"
        __label__ = 6; break; //@line 981 "xmltok_impl.c"
      case 6: // $bb5
        var $19=HEAP[$ptr_addr]; //@line 984 "xmltok_impl.c"
        var $20=(($19)&4294967295); //@line 984 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 984 "xmltok_impl.c"
        var $22=reSign(($21), 8, 0)==0; //@line 984 "xmltok_impl.c"
        if ($22) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 984 "xmltok_impl.c"
      case 7: // $bb6
        var $23=HEAP[$enc_addr]; //@line 984 "xmltok_impl.c"
        var $24=$23; //@line 984 "xmltok_impl.c"
        var $25=HEAP[$ptr_addr]; //@line 984 "xmltok_impl.c"
        var $26=(($25+1)&4294967295); //@line 984 "xmltok_impl.c"
        var $27=HEAP[$26]; //@line 984 "xmltok_impl.c"
        var $28=unSign(($27), 8, 0); //@line 984 "xmltok_impl.c"
        var $29=(($24+72)&4294967295); //@line 984 "xmltok_impl.c"
        var $30=(($29+$28)&4294967295); //@line 984 "xmltok_impl.c"
        var $31=HEAP[$30]; //@line 984 "xmltok_impl.c"
        var $32=unSign(($31), 8, 0); //@line 984 "xmltok_impl.c"
        HEAP[$iftmp_1151]=$32; //@line 984 "xmltok_impl.c"
        __label__ = 9; break; //@line 984 "xmltok_impl.c"
      case 8: // $bb7
        var $33=HEAP[$ptr_addr]; //@line 984 "xmltok_impl.c"
        var $34=(($33+1)&4294967295); //@line 984 "xmltok_impl.c"
        var $35=HEAP[$34]; //@line 984 "xmltok_impl.c"
        var $36=reSign(($35), 8, 0); //@line 984 "xmltok_impl.c"
        var $37=HEAP[$ptr_addr]; //@line 984 "xmltok_impl.c"
        var $38=(($37)&4294967295); //@line 984 "xmltok_impl.c"
        var $39=HEAP[$38]; //@line 984 "xmltok_impl.c"
        var $40=reSign(($39), 8, 0); //@line 984 "xmltok_impl.c"
        var $41=((($40)) & 255); //@line 984 "xmltok_impl.c"
        var $42=((($36)) & 255); //@line 984 "xmltok_impl.c"
        var $43=_unicode_byte_type($41, $42); //@line 984 "xmltok_impl.c"
        HEAP[$iftmp_1151]=$43; //@line 984 "xmltok_impl.c"
        __label__ = 9; break; //@line 984 "xmltok_impl.c"
      case 9: // $bb8
        var $44=HEAP[$iftmp_1151]; //@line 984 "xmltok_impl.c"
        if ($44 == 2) {
          __label__ = 12; break;
        }
        else if ($44 == 4) {
          __label__ = 37; break;
        }
        else if ($44 == 5) {
          __label__ = 62; break;
        }
        else if ($44 == 6) {
          __label__ = 65; break;
        }
        else if ($44 == 7) {
          __label__ = 68; break;
        }
        else if ($44 == 9) {
          __label__ = 22; break;
        }
        else if ($44 == 10) {
          __label__ = 24; break;
        }
        else if ($44 == 11) {
          __label__ = 60; break;
        }
        else if ($44 == 12) {
          __label__ = 10; break;
        }
        else if ($44 == 13) {
          __label__ = 11; break;
        }
        else if ($44 == 19) {
          __label__ = 61; break;
        }
        else if ($44 == 20) {
          __label__ = 36; break;
        }
        else if ($44 == 21) {
          __label__ = 24; break;
        }
        else if ($44 == 22) {
          __label__ = 71; break;
        }
        else if ($44 == 24) {
          __label__ = 71; break;
        }
        else if ($44 == 25) {
          __label__ = 72; break;
        }
        else if ($44 == 26) {
          __label__ = 72; break;
        }
        else if ($44 == 27) {
          __label__ = 72; break;
        }
        else if ($44 == 29) {
          __label__ = 73; break;
        }
        else if ($44 == 30) {
          __label__ = 34; break;
        }
        else if ($44 == 31) {
          __label__ = 47; break;
        }
        else if ($44 == 32) {
          __label__ = 48; break;
        }
        else if ($44 == 35) {
          __label__ = 35; break;
        }
        else if ($44 == 36) {
          __label__ = 59; break;
        }
        else {
        __label__ = 77; break;
        }
        
      case 10: // $bb9
        var $45=HEAP[$ptr_addr]; //@line 986 "xmltok_impl.c"
        var $46=(($45+2)&4294967295); //@line 986 "xmltok_impl.c"
        var $47=HEAP[$enc_addr]; //@line 986 "xmltok_impl.c"
        var $48=HEAP[$end_addr]; //@line 986 "xmltok_impl.c"
        var $49=HEAP[$nextTokPtr_addr]; //@line 986 "xmltok_impl.c"
        var $50=_big2_scanLit(12, $47, $46, $48, $49); //@line 986 "xmltok_impl.c"
        HEAP[$0]=$50; //@line 986 "xmltok_impl.c"
        __label__ = 108; break; //@line 986 "xmltok_impl.c"
      case 11: // $bb10
        var $51=HEAP[$ptr_addr]; //@line 988 "xmltok_impl.c"
        var $52=(($51+2)&4294967295); //@line 988 "xmltok_impl.c"
        var $53=HEAP[$enc_addr]; //@line 988 "xmltok_impl.c"
        var $54=HEAP[$end_addr]; //@line 988 "xmltok_impl.c"
        var $55=HEAP[$nextTokPtr_addr]; //@line 988 "xmltok_impl.c"
        var $56=_big2_scanLit(13, $53, $52, $54, $55); //@line 988 "xmltok_impl.c"
        HEAP[$0]=$56; //@line 988 "xmltok_impl.c"
        __label__ = 108; break; //@line 988 "xmltok_impl.c"
      case 12: // $bb11
        var $57=HEAP[$ptr_addr]; //@line 991 "xmltok_impl.c"
        var $58=(($57+2)&4294967295); //@line 991 "xmltok_impl.c"
        HEAP[$ptr_addr]=$58; //@line 991 "xmltok_impl.c"
        var $59=HEAP[$ptr_addr]; //@line 992 "xmltok_impl.c"
        var $60=HEAP[$end_addr]; //@line 992 "xmltok_impl.c"
        var $61=($59)==($60); //@line 992 "xmltok_impl.c"
        if ($61) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 992 "xmltok_impl.c"
      case 13: // $bb12
        HEAP[$0]=-1; //@line 993 "xmltok_impl.c"
        __label__ = 108; break; //@line 993 "xmltok_impl.c"
      case 14: // $bb13
        var $62=HEAP[$ptr_addr]; //@line 994 "xmltok_impl.c"
        var $63=(($62)&4294967295); //@line 994 "xmltok_impl.c"
        var $64=HEAP[$63]; //@line 994 "xmltok_impl.c"
        var $65=reSign(($64), 8, 0)==0; //@line 994 "xmltok_impl.c"
        if ($65) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 994 "xmltok_impl.c"
      case 15: // $bb14
        var $66=HEAP[$enc_addr]; //@line 994 "xmltok_impl.c"
        var $67=$66; //@line 994 "xmltok_impl.c"
        var $68=HEAP[$ptr_addr]; //@line 994 "xmltok_impl.c"
        var $69=(($68+1)&4294967295); //@line 994 "xmltok_impl.c"
        var $70=HEAP[$69]; //@line 994 "xmltok_impl.c"
        var $71=unSign(($70), 8, 0); //@line 994 "xmltok_impl.c"
        var $72=(($67+72)&4294967295); //@line 994 "xmltok_impl.c"
        var $73=(($72+$71)&4294967295); //@line 994 "xmltok_impl.c"
        var $74=HEAP[$73]; //@line 994 "xmltok_impl.c"
        var $75=unSign(($74), 8, 0); //@line 994 "xmltok_impl.c"
        HEAP[$iftmp_1153]=$75; //@line 994 "xmltok_impl.c"
        __label__ = 17; break; //@line 994 "xmltok_impl.c"
      case 16: // $bb15
        var $76=HEAP[$ptr_addr]; //@line 994 "xmltok_impl.c"
        var $77=(($76+1)&4294967295); //@line 994 "xmltok_impl.c"
        var $78=HEAP[$77]; //@line 994 "xmltok_impl.c"
        var $79=reSign(($78), 8, 0); //@line 994 "xmltok_impl.c"
        var $80=HEAP[$ptr_addr]; //@line 994 "xmltok_impl.c"
        var $81=(($80)&4294967295); //@line 994 "xmltok_impl.c"
        var $82=HEAP[$81]; //@line 994 "xmltok_impl.c"
        var $83=reSign(($82), 8, 0); //@line 994 "xmltok_impl.c"
        var $84=((($83)) & 255); //@line 994 "xmltok_impl.c"
        var $85=((($79)) & 255); //@line 994 "xmltok_impl.c"
        var $86=_unicode_byte_type($84, $85); //@line 994 "xmltok_impl.c"
        HEAP[$iftmp_1153]=$86; //@line 994 "xmltok_impl.c"
        __label__ = 17; break; //@line 994 "xmltok_impl.c"
      case 17: // $bb16
        var $87=HEAP[$iftmp_1153]; //@line 994 "xmltok_impl.c"
        if ($87 == 5) {
          __label__ = 20; break;
        }
        else if ($87 == 6) {
          __label__ = 20; break;
        }
        else if ($87 == 7) {
          __label__ = 20; break;
        }
        else if ($87 == 15) {
          __label__ = 19; break;
        }
        else if ($87 == 16) {
          __label__ = 18; break;
        }
        else if ($87 == 22) {
          __label__ = 20; break;
        }
        else if ($87 == 24) {
          __label__ = 20; break;
        }
        else if ($87 == 29) {
          __label__ = 20; break;
        }
        else {
        __label__ = 21; break;
        }
        
      case 18: // $bb17
        var $88=HEAP[$ptr_addr]; //@line 996 "xmltok_impl.c"
        var $89=(($88+2)&4294967295); //@line 996 "xmltok_impl.c"
        var $90=HEAP[$enc_addr]; //@line 996 "xmltok_impl.c"
        var $91=HEAP[$end_addr]; //@line 996 "xmltok_impl.c"
        var $92=HEAP[$nextTokPtr_addr]; //@line 996 "xmltok_impl.c"
        var $93=_big2_scanDecl($90, $89, $91, $92); //@line 996 "xmltok_impl.c"
        HEAP[$0]=$93; //@line 996 "xmltok_impl.c"
        __label__ = 108; break; //@line 996 "xmltok_impl.c"
      case 19: // $bb18
        var $94=HEAP[$ptr_addr]; //@line 998 "xmltok_impl.c"
        var $95=(($94+2)&4294967295); //@line 998 "xmltok_impl.c"
        var $96=HEAP[$enc_addr]; //@line 998 "xmltok_impl.c"
        var $97=HEAP[$end_addr]; //@line 998 "xmltok_impl.c"
        var $98=HEAP[$nextTokPtr_addr]; //@line 998 "xmltok_impl.c"
        var $99=_big2_scanPi($96, $95, $97, $98); //@line 998 "xmltok_impl.c"
        HEAP[$0]=$99; //@line 998 "xmltok_impl.c"
        __label__ = 108; break; //@line 998 "xmltok_impl.c"
      case 20: // $bb19
        var $100=HEAP[$ptr_addr]; //@line 1005 "xmltok_impl.c"
        var $101=(($100+-2)&4294967295); //@line 1005 "xmltok_impl.c"
        var $102=HEAP[$nextTokPtr_addr]; //@line 1005 "xmltok_impl.c"
        HEAP[$102]=$101; //@line 1005 "xmltok_impl.c"
        HEAP[$0]=29; //@line 1006 "xmltok_impl.c"
        __label__ = 108; break; //@line 1006 "xmltok_impl.c"
      case 21: // $bb20
        var $103=HEAP[$nextTokPtr_addr]; //@line 1008 "xmltok_impl.c"
        var $104=HEAP[$ptr_addr]; //@line 1008 "xmltok_impl.c"
        HEAP[$103]=$104; //@line 1008 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1009 "xmltok_impl.c"
        __label__ = 108; break; //@line 1009 "xmltok_impl.c"
      case 22: // $bb21
        var $105=HEAP[$ptr_addr]; //@line 1012 "xmltok_impl.c"
        var $106=(($105+2)&4294967295); //@line 1012 "xmltok_impl.c"
        var $107=HEAP[$end_addr]; //@line 1012 "xmltok_impl.c"
        var $108=($106)==($107); //@line 1012 "xmltok_impl.c"
        if ($108) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 1012 "xmltok_impl.c"
      case 23: // $bb22
        var $109=HEAP[$nextTokPtr_addr]; //@line 1013 "xmltok_impl.c"
        var $110=HEAP[$end_addr]; //@line 1013 "xmltok_impl.c"
        HEAP[$109]=$110; //@line 1013 "xmltok_impl.c"
        HEAP[$0]=-15; //@line 1015 "xmltok_impl.c"
        __label__ = 108; break; //@line 1015 "xmltok_impl.c"
      case 24: // $bb23
        var $111=HEAP[$ptr_addr]; //@line 1020 "xmltok_impl.c"
        var $112=(($111+2)&4294967295); //@line 1020 "xmltok_impl.c"
        HEAP[$ptr_addr]=$112; //@line 1020 "xmltok_impl.c"
        var $113=HEAP[$ptr_addr]; //@line 1021 "xmltok_impl.c"
        var $114=HEAP[$end_addr]; //@line 1021 "xmltok_impl.c"
        var $115=($113)==($114); //@line 1021 "xmltok_impl.c"
        if ($115) { __label__ = 33; break; } else { __label__ = 25; break; } //@line 1021 "xmltok_impl.c"
      case 25: // $bb24
        var $116=HEAP[$ptr_addr]; //@line 1023 "xmltok_impl.c"
        var $117=(($116)&4294967295); //@line 1023 "xmltok_impl.c"
        var $118=HEAP[$117]; //@line 1023 "xmltok_impl.c"
        var $119=reSign(($118), 8, 0)==0; //@line 1023 "xmltok_impl.c"
        if ($119) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1023 "xmltok_impl.c"
      case 26: // $bb25
        var $120=HEAP[$enc_addr]; //@line 1023 "xmltok_impl.c"
        var $121=$120; //@line 1023 "xmltok_impl.c"
        var $122=HEAP[$ptr_addr]; //@line 1023 "xmltok_impl.c"
        var $123=(($122+1)&4294967295); //@line 1023 "xmltok_impl.c"
        var $124=HEAP[$123]; //@line 1023 "xmltok_impl.c"
        var $125=unSign(($124), 8, 0); //@line 1023 "xmltok_impl.c"
        var $126=(($121+72)&4294967295); //@line 1023 "xmltok_impl.c"
        var $127=(($126+$125)&4294967295); //@line 1023 "xmltok_impl.c"
        var $128=HEAP[$127]; //@line 1023 "xmltok_impl.c"
        var $129=unSign(($128), 8, 0); //@line 1023 "xmltok_impl.c"
        HEAP[$iftmp_1155]=$129; //@line 1023 "xmltok_impl.c"
        __label__ = 28; break; //@line 1023 "xmltok_impl.c"
      case 27: // $bb26
        var $130=HEAP[$ptr_addr]; //@line 1023 "xmltok_impl.c"
        var $131=(($130+1)&4294967295); //@line 1023 "xmltok_impl.c"
        var $132=HEAP[$131]; //@line 1023 "xmltok_impl.c"
        var $133=reSign(($132), 8, 0); //@line 1023 "xmltok_impl.c"
        var $134=HEAP[$ptr_addr]; //@line 1023 "xmltok_impl.c"
        var $135=(($134)&4294967295); //@line 1023 "xmltok_impl.c"
        var $136=HEAP[$135]; //@line 1023 "xmltok_impl.c"
        var $137=reSign(($136), 8, 0); //@line 1023 "xmltok_impl.c"
        var $138=((($137)) & 255); //@line 1023 "xmltok_impl.c"
        var $139=((($133)) & 255); //@line 1023 "xmltok_impl.c"
        var $140=_unicode_byte_type($138, $139); //@line 1023 "xmltok_impl.c"
        HEAP[$iftmp_1155]=$140; //@line 1023 "xmltok_impl.c"
        __label__ = 28; break; //@line 1023 "xmltok_impl.c"
      case 28: // $bb27
        var $141=HEAP[$iftmp_1155]; //@line 1023 "xmltok_impl.c"
        if ($141 == 9) {
          __label__ = 30; break;
        }
        else if ($141 == 10) {
          __label__ = 29; break;
        }
        else if ($141 == 21) {
          __label__ = 29; break;
        }
        else {
        __label__ = 31; break;
        }
        
      case 29: // $bb28
        __label__ = 32; break; //@line 1023 "xmltok_impl.c"
      case 30: // $bb29
        var $142=HEAP[$ptr_addr]; //@line 1028 "xmltok_impl.c"
        var $143=(($142+2)&4294967295); //@line 1028 "xmltok_impl.c"
        var $144=HEAP[$end_addr]; //@line 1028 "xmltok_impl.c"
        var $145=($143)!=($144); //@line 1028 "xmltok_impl.c"
        if ($145) { __label__ = 32; break; } else { __label__ = 31; break; } //@line 1028 "xmltok_impl.c"
      case 31: // $bb30
        var $146=HEAP[$nextTokPtr_addr]; //@line 1032 "xmltok_impl.c"
        var $147=HEAP[$ptr_addr]; //@line 1032 "xmltok_impl.c"
        HEAP[$146]=$147; //@line 1032 "xmltok_impl.c"
        HEAP[$0]=15; //@line 1033 "xmltok_impl.c"
        __label__ = 108; break; //@line 1033 "xmltok_impl.c"
      case 32: // $bb31
        __label__ = 24; break; //@line 1033 "xmltok_impl.c"
      case 33: // $bb32
        var $148=HEAP[$nextTokPtr_addr]; //@line 1036 "xmltok_impl.c"
        var $149=HEAP[$ptr_addr]; //@line 1036 "xmltok_impl.c"
        HEAP[$148]=$149; //@line 1036 "xmltok_impl.c"
        HEAP[$0]=15; //@line 1037 "xmltok_impl.c"
        __label__ = 108; break; //@line 1037 "xmltok_impl.c"
      case 34: // $bb33
        var $150=HEAP[$ptr_addr]; //@line 1039 "xmltok_impl.c"
        var $151=(($150+2)&4294967295); //@line 1039 "xmltok_impl.c"
        var $152=HEAP[$enc_addr]; //@line 1039 "xmltok_impl.c"
        var $153=HEAP[$end_addr]; //@line 1039 "xmltok_impl.c"
        var $154=HEAP[$nextTokPtr_addr]; //@line 1039 "xmltok_impl.c"
        var $155=_big2_scanPercent($152, $151, $153, $154); //@line 1039 "xmltok_impl.c"
        HEAP[$0]=$155; //@line 1039 "xmltok_impl.c"
        __label__ = 108; break; //@line 1039 "xmltok_impl.c"
      case 35: // $bb34
        var $156=HEAP[$ptr_addr]; //@line 1041 "xmltok_impl.c"
        var $157=(($156+2)&4294967295); //@line 1041 "xmltok_impl.c"
        var $158=HEAP[$nextTokPtr_addr]; //@line 1041 "xmltok_impl.c"
        HEAP[$158]=$157; //@line 1041 "xmltok_impl.c"
        HEAP[$0]=38; //@line 1042 "xmltok_impl.c"
        __label__ = 108; break; //@line 1042 "xmltok_impl.c"
      case 36: // $bb35
        var $159=HEAP[$ptr_addr]; //@line 1044 "xmltok_impl.c"
        var $160=(($159+2)&4294967295); //@line 1044 "xmltok_impl.c"
        var $161=HEAP[$nextTokPtr_addr]; //@line 1044 "xmltok_impl.c"
        HEAP[$161]=$160; //@line 1044 "xmltok_impl.c"
        HEAP[$0]=25; //@line 1045 "xmltok_impl.c"
        __label__ = 108; break; //@line 1045 "xmltok_impl.c"
      case 37: // $bb36
        var $162=HEAP[$ptr_addr]; //@line 1047 "xmltok_impl.c"
        var $163=(($162+2)&4294967295); //@line 1047 "xmltok_impl.c"
        HEAP[$ptr_addr]=$163; //@line 1047 "xmltok_impl.c"
        var $164=HEAP[$ptr_addr]; //@line 1048 "xmltok_impl.c"
        var $165=HEAP[$end_addr]; //@line 1048 "xmltok_impl.c"
        var $166=($164)==($165); //@line 1048 "xmltok_impl.c"
        if ($166) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 1048 "xmltok_impl.c"
      case 38: // $bb37
        HEAP[$0]=-26; //@line 1049 "xmltok_impl.c"
        __label__ = 108; break; //@line 1049 "xmltok_impl.c"
      case 39: // $bb38
        var $167=HEAP[$ptr_addr]; //@line 1050 "xmltok_impl.c"
        var $168=(($167)&4294967295); //@line 1050 "xmltok_impl.c"
        var $169=HEAP[$168]; //@line 1050 "xmltok_impl.c"
        var $170=reSign(($169), 8, 0)==0; //@line 1050 "xmltok_impl.c"
        if ($170) { __label__ = 40; break; } else { __label__ = 46; break; } //@line 1050 "xmltok_impl.c"
      case 40: // $bb39
        var $171=HEAP[$ptr_addr]; //@line 1050 "xmltok_impl.c"
        var $172=(($171+1)&4294967295); //@line 1050 "xmltok_impl.c"
        var $173=HEAP[$172]; //@line 1050 "xmltok_impl.c"
        var $174=reSign(($173), 8, 0)==93; //@line 1050 "xmltok_impl.c"
        if ($174) { __label__ = 41; break; } else { __label__ = 46; break; } //@line 1050 "xmltok_impl.c"
      case 41: // $bb40
        var $175=HEAP[$ptr_addr]; //@line 1051 "xmltok_impl.c"
        var $176=(($175+2)&4294967295); //@line 1051 "xmltok_impl.c"
        var $177=HEAP[$end_addr]; //@line 1051 "xmltok_impl.c"
        var $178=($176)==($177); //@line 1051 "xmltok_impl.c"
        if ($178) { __label__ = 42; break; } else { __label__ = 43; break; } //@line 1051 "xmltok_impl.c"
      case 42: // $bb41
        HEAP[$0]=-1; //@line 1052 "xmltok_impl.c"
        __label__ = 108; break; //@line 1052 "xmltok_impl.c"
      case 43: // $bb42
        var $179=HEAP[$ptr_addr]; //@line 1053 "xmltok_impl.c"
        var $180=(($179+2)&4294967295); //@line 1053 "xmltok_impl.c"
        var $181=(($180)&4294967295); //@line 1053 "xmltok_impl.c"
        var $182=HEAP[$181]; //@line 1053 "xmltok_impl.c"
        var $183=reSign(($182), 8, 0)==0; //@line 1053 "xmltok_impl.c"
        if ($183) { __label__ = 44; break; } else { __label__ = 46; break; } //@line 1053 "xmltok_impl.c"
      case 44: // $bb43
        var $184=HEAP[$ptr_addr]; //@line 1053 "xmltok_impl.c"
        var $185=(($184+2)&4294967295); //@line 1053 "xmltok_impl.c"
        var $186=(($185+1)&4294967295); //@line 1053 "xmltok_impl.c"
        var $187=HEAP[$186]; //@line 1053 "xmltok_impl.c"
        var $188=reSign(($187), 8, 0)==62; //@line 1053 "xmltok_impl.c"
        if ($188) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 1053 "xmltok_impl.c"
      case 45: // $bb44
        var $189=HEAP[$ptr_addr]; //@line 1054 "xmltok_impl.c"
        var $190=(($189+4)&4294967295); //@line 1054 "xmltok_impl.c"
        var $191=HEAP[$nextTokPtr_addr]; //@line 1054 "xmltok_impl.c"
        HEAP[$191]=$190; //@line 1054 "xmltok_impl.c"
        HEAP[$0]=34; //@line 1055 "xmltok_impl.c"
        __label__ = 108; break; //@line 1055 "xmltok_impl.c"
      case 46: // $bb45
        var $192=HEAP[$nextTokPtr_addr]; //@line 1058 "xmltok_impl.c"
        var $193=HEAP[$ptr_addr]; //@line 1058 "xmltok_impl.c"
        HEAP[$192]=$193; //@line 1058 "xmltok_impl.c"
        HEAP[$0]=26; //@line 1059 "xmltok_impl.c"
        __label__ = 108; break; //@line 1059 "xmltok_impl.c"
      case 47: // $bb46
        var $194=HEAP[$ptr_addr]; //@line 1061 "xmltok_impl.c"
        var $195=(($194+2)&4294967295); //@line 1061 "xmltok_impl.c"
        var $196=HEAP[$nextTokPtr_addr]; //@line 1061 "xmltok_impl.c"
        HEAP[$196]=$195; //@line 1061 "xmltok_impl.c"
        HEAP[$0]=23; //@line 1062 "xmltok_impl.c"
        __label__ = 108; break; //@line 1062 "xmltok_impl.c"
      case 48: // $bb47
        var $197=HEAP[$ptr_addr]; //@line 1064 "xmltok_impl.c"
        var $198=(($197+2)&4294967295); //@line 1064 "xmltok_impl.c"
        HEAP[$ptr_addr]=$198; //@line 1064 "xmltok_impl.c"
        var $199=HEAP[$ptr_addr]; //@line 1065 "xmltok_impl.c"
        var $200=HEAP[$end_addr]; //@line 1065 "xmltok_impl.c"
        var $201=($199)==($200); //@line 1065 "xmltok_impl.c"
        if ($201) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 1065 "xmltok_impl.c"
      case 49: // $bb48
        HEAP[$0]=-24; //@line 1066 "xmltok_impl.c"
        __label__ = 108; break; //@line 1066 "xmltok_impl.c"
      case 50: // $bb49
        var $202=HEAP[$ptr_addr]; //@line 1067 "xmltok_impl.c"
        var $203=(($202)&4294967295); //@line 1067 "xmltok_impl.c"
        var $204=HEAP[$203]; //@line 1067 "xmltok_impl.c"
        var $205=reSign(($204), 8, 0)==0; //@line 1067 "xmltok_impl.c"
        if ($205) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 1067 "xmltok_impl.c"
      case 51: // $bb50
        var $206=HEAP[$enc_addr]; //@line 1067 "xmltok_impl.c"
        var $207=$206; //@line 1067 "xmltok_impl.c"
        var $208=HEAP[$ptr_addr]; //@line 1067 "xmltok_impl.c"
        var $209=(($208+1)&4294967295); //@line 1067 "xmltok_impl.c"
        var $210=HEAP[$209]; //@line 1067 "xmltok_impl.c"
        var $211=unSign(($210), 8, 0); //@line 1067 "xmltok_impl.c"
        var $212=(($207+72)&4294967295); //@line 1067 "xmltok_impl.c"
        var $213=(($212+$211)&4294967295); //@line 1067 "xmltok_impl.c"
        var $214=HEAP[$213]; //@line 1067 "xmltok_impl.c"
        var $215=unSign(($214), 8, 0); //@line 1067 "xmltok_impl.c"
        HEAP[$iftmp_1157]=$215; //@line 1067 "xmltok_impl.c"
        __label__ = 53; break; //@line 1067 "xmltok_impl.c"
      case 52: // $bb51
        var $216=HEAP[$ptr_addr]; //@line 1067 "xmltok_impl.c"
        var $217=(($216+1)&4294967295); //@line 1067 "xmltok_impl.c"
        var $218=HEAP[$217]; //@line 1067 "xmltok_impl.c"
        var $219=reSign(($218), 8, 0); //@line 1067 "xmltok_impl.c"
        var $220=HEAP[$ptr_addr]; //@line 1067 "xmltok_impl.c"
        var $221=(($220)&4294967295); //@line 1067 "xmltok_impl.c"
        var $222=HEAP[$221]; //@line 1067 "xmltok_impl.c"
        var $223=reSign(($222), 8, 0); //@line 1067 "xmltok_impl.c"
        var $224=((($223)) & 255); //@line 1067 "xmltok_impl.c"
        var $225=((($219)) & 255); //@line 1067 "xmltok_impl.c"
        var $226=_unicode_byte_type($224, $225); //@line 1067 "xmltok_impl.c"
        HEAP[$iftmp_1157]=$226; //@line 1067 "xmltok_impl.c"
        __label__ = 53; break; //@line 1067 "xmltok_impl.c"
      case 53: // $bb52
        var $227=HEAP[$iftmp_1157]; //@line 1067 "xmltok_impl.c"
        if ($227 == 9) {
          __label__ = 57; break;
        }
        else if ($227 == 10) {
          __label__ = 57; break;
        }
        else if ($227 == 11) {
          __label__ = 57; break;
        }
        else if ($227 == 15) {
          __label__ = 55; break;
        }
        else if ($227 == 21) {
          __label__ = 57; break;
        }
        else if ($227 == 32) {
          __label__ = 57; break;
        }
        else if ($227 == 33) {
          __label__ = 54; break;
        }
        else if ($227 == 34) {
          __label__ = 56; break;
        }
        else if ($227 == 35) {
          __label__ = 57; break;
        }
        else if ($227 == 36) {
          __label__ = 57; break;
        }
        else {
        __label__ = 58; break;
        }
        
      case 54: // $bb53
        var $228=HEAP[$ptr_addr]; //@line 1069 "xmltok_impl.c"
        var $229=(($228+2)&4294967295); //@line 1069 "xmltok_impl.c"
        var $230=HEAP[$nextTokPtr_addr]; //@line 1069 "xmltok_impl.c"
        HEAP[$230]=$229; //@line 1069 "xmltok_impl.c"
        HEAP[$0]=36; //@line 1070 "xmltok_impl.c"
        __label__ = 108; break; //@line 1070 "xmltok_impl.c"
      case 55: // $bb54
        var $231=HEAP[$ptr_addr]; //@line 1072 "xmltok_impl.c"
        var $232=(($231+2)&4294967295); //@line 1072 "xmltok_impl.c"
        var $233=HEAP[$nextTokPtr_addr]; //@line 1072 "xmltok_impl.c"
        HEAP[$233]=$232; //@line 1072 "xmltok_impl.c"
        HEAP[$0]=35; //@line 1073 "xmltok_impl.c"
        __label__ = 108; break; //@line 1073 "xmltok_impl.c"
      case 56: // $bb55
        var $234=HEAP[$ptr_addr]; //@line 1075 "xmltok_impl.c"
        var $235=(($234+2)&4294967295); //@line 1075 "xmltok_impl.c"
        var $236=HEAP[$nextTokPtr_addr]; //@line 1075 "xmltok_impl.c"
        HEAP[$236]=$235; //@line 1075 "xmltok_impl.c"
        HEAP[$0]=37; //@line 1076 "xmltok_impl.c"
        __label__ = 108; break; //@line 1076 "xmltok_impl.c"
      case 57: // $bb56
        var $237=HEAP[$nextTokPtr_addr]; //@line 1080 "xmltok_impl.c"
        var $238=HEAP[$ptr_addr]; //@line 1080 "xmltok_impl.c"
        HEAP[$237]=$238; //@line 1080 "xmltok_impl.c"
        HEAP[$0]=24; //@line 1081 "xmltok_impl.c"
        __label__ = 108; break; //@line 1081 "xmltok_impl.c"
      case 58: // $bb57
        var $239=HEAP[$nextTokPtr_addr]; //@line 1083 "xmltok_impl.c"
        var $240=HEAP[$ptr_addr]; //@line 1083 "xmltok_impl.c"
        HEAP[$239]=$240; //@line 1083 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1084 "xmltok_impl.c"
        __label__ = 108; break; //@line 1084 "xmltok_impl.c"
      case 59: // $bb58
        var $241=HEAP[$ptr_addr]; //@line 1086 "xmltok_impl.c"
        var $242=(($241+2)&4294967295); //@line 1086 "xmltok_impl.c"
        var $243=HEAP[$nextTokPtr_addr]; //@line 1086 "xmltok_impl.c"
        HEAP[$243]=$242; //@line 1086 "xmltok_impl.c"
        HEAP[$0]=21; //@line 1087 "xmltok_impl.c"
        __label__ = 108; break; //@line 1087 "xmltok_impl.c"
      case 60: // $bb59
        var $244=HEAP[$ptr_addr]; //@line 1089 "xmltok_impl.c"
        var $245=(($244+2)&4294967295); //@line 1089 "xmltok_impl.c"
        var $246=HEAP[$nextTokPtr_addr]; //@line 1089 "xmltok_impl.c"
        HEAP[$246]=$245; //@line 1089 "xmltok_impl.c"
        HEAP[$0]=17; //@line 1090 "xmltok_impl.c"
        __label__ = 108; break; //@line 1090 "xmltok_impl.c"
      case 61: // $bb60
        var $247=HEAP[$ptr_addr]; //@line 1092 "xmltok_impl.c"
        var $248=(($247+2)&4294967295); //@line 1092 "xmltok_impl.c"
        var $249=HEAP[$enc_addr]; //@line 1092 "xmltok_impl.c"
        var $250=HEAP[$end_addr]; //@line 1092 "xmltok_impl.c"
        var $251=HEAP[$nextTokPtr_addr]; //@line 1092 "xmltok_impl.c"
        var $252=_big2_scanPoundName($249, $248, $250, $251); //@line 1092 "xmltok_impl.c"
        HEAP[$0]=$252; //@line 1092 "xmltok_impl.c"
        __label__ = 108; break; //@line 1092 "xmltok_impl.c"
      case 62: // $bb61
        var $253=HEAP[$end_addr]; //@line 1109 "xmltok_impl.c"
        var $254=($253); //@line 1109 "xmltok_impl.c"
        var $255=HEAP[$ptr_addr]; //@line 1109 "xmltok_impl.c"
        var $256=($255); //@line 1109 "xmltok_impl.c"
        var $257=((($254) - ($256))&4294967295); //@line 1109 "xmltok_impl.c"
        var $258=((($257))|0) <= 1; //@line 1109 "xmltok_impl.c"
        if ($258) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 1109 "xmltok_impl.c"
      case 63: // $bb62
        HEAP[$0]=-2; //@line 1109 "xmltok_impl.c"
        __label__ = 108; break; //@line 1109 "xmltok_impl.c"
      case 64: // $bb63
        var $259=HEAP[$nextTokPtr_addr]; //@line 1109 "xmltok_impl.c"
        var $260=HEAP[$ptr_addr]; //@line 1109 "xmltok_impl.c"
        HEAP[$259]=$260; //@line 1109 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1109 "xmltok_impl.c"
        __label__ = 108; break; //@line 1109 "xmltok_impl.c"
      case 65: // $bb64
        var $261=HEAP[$end_addr]; //@line 1109 "xmltok_impl.c"
        var $262=($261); //@line 1109 "xmltok_impl.c"
        var $263=HEAP[$ptr_addr]; //@line 1109 "xmltok_impl.c"
        var $264=($263); //@line 1109 "xmltok_impl.c"
        var $265=((($262) - ($264))&4294967295); //@line 1109 "xmltok_impl.c"
        var $266=((($265))|0) <= 2; //@line 1109 "xmltok_impl.c"
        if ($266) { __label__ = 66; break; } else { __label__ = 67; break; } //@line 1109 "xmltok_impl.c"
      case 66: // $bb65
        HEAP[$0]=-2; //@line 1109 "xmltok_impl.c"
        __label__ = 108; break; //@line 1109 "xmltok_impl.c"
      case 67: // $bb66
        var $267=HEAP[$nextTokPtr_addr]; //@line 1109 "xmltok_impl.c"
        var $268=HEAP[$ptr_addr]; //@line 1109 "xmltok_impl.c"
        HEAP[$267]=$268; //@line 1109 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1109 "xmltok_impl.c"
        __label__ = 108; break; //@line 1109 "xmltok_impl.c"
      case 68: // $bb67
        var $269=HEAP[$end_addr]; //@line 1109 "xmltok_impl.c"
        var $270=($269); //@line 1109 "xmltok_impl.c"
        var $271=HEAP[$ptr_addr]; //@line 1109 "xmltok_impl.c"
        var $272=($271); //@line 1109 "xmltok_impl.c"
        var $273=((($270) - ($272))&4294967295); //@line 1109 "xmltok_impl.c"
        var $274=((($273))|0) <= 3; //@line 1109 "xmltok_impl.c"
        if ($274) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 1109 "xmltok_impl.c"
      case 69: // $bb68
        HEAP[$0]=-2; //@line 1109 "xmltok_impl.c"
        __label__ = 108; break; //@line 1109 "xmltok_impl.c"
      case 70: // $bb69
        var $275=HEAP[$nextTokPtr_addr]; //@line 1109 "xmltok_impl.c"
        var $276=HEAP[$ptr_addr]; //@line 1109 "xmltok_impl.c"
        HEAP[$275]=$276; //@line 1109 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1109 "xmltok_impl.c"
        __label__ = 108; break; //@line 1109 "xmltok_impl.c"
      case 71: // $bb70
        HEAP[$tok]=18; //@line 1113 "xmltok_impl.c"
        var $277=HEAP[$ptr_addr]; //@line 1114 "xmltok_impl.c"
        var $278=(($277+2)&4294967295); //@line 1114 "xmltok_impl.c"
        HEAP[$ptr_addr]=$278; //@line 1114 "xmltok_impl.c"
        __label__ = 78; break; //@line 1114 "xmltok_impl.c"
      case 72: // $bb71
        HEAP[$tok]=19; //@line 1122 "xmltok_impl.c"
        var $279=HEAP[$ptr_addr]; //@line 1123 "xmltok_impl.c"
        var $280=(($279+2)&4294967295); //@line 1123 "xmltok_impl.c"
        HEAP[$ptr_addr]=$280; //@line 1123 "xmltok_impl.c"
        __label__ = 78; break; //@line 1123 "xmltok_impl.c"
      case 73: // $bb72
        var $281=HEAP[$ptr_addr]; //@line 1126 "xmltok_impl.c"
        var $282=(($281)&4294967295); //@line 1126 "xmltok_impl.c"
        var $283=HEAP[$282]; //@line 1126 "xmltok_impl.c"
        var $284=unSign(($283), 8, 0); //@line 1126 "xmltok_impl.c"
        var $285=((_nmstrtPages+$284)&4294967295); //@line 1126 "xmltok_impl.c"
        var $286=HEAP[$285]; //@line 1126 "xmltok_impl.c"
        var $287=unSign(($286), 8, 0); //@line 1126 "xmltok_impl.c"
        var $288=($287) << 3; //@line 1126 "xmltok_impl.c"
        var $289=HEAP[$ptr_addr]; //@line 1126 "xmltok_impl.c"
        var $290=(($289+1)&4294967295); //@line 1126 "xmltok_impl.c"
        var $291=HEAP[$290]; //@line 1126 "xmltok_impl.c"
        var $292=unSign(($291), 8, 0) >>> 5; //@line 1126 "xmltok_impl.c"
        var $293=unSign(($292), 8, 0); //@line 1126 "xmltok_impl.c"
        var $294=((($288) + ($293))&4294967295); //@line 1126 "xmltok_impl.c"
        var $295=((_namingBitmap+$294*4)&4294967295); //@line 1126 "xmltok_impl.c"
        var $296=HEAP[$295]; //@line 1126 "xmltok_impl.c"
        var $297=HEAP[$ptr_addr]; //@line 1126 "xmltok_impl.c"
        var $298=(($297+1)&4294967295); //@line 1126 "xmltok_impl.c"
        var $299=HEAP[$298]; //@line 1126 "xmltok_impl.c"
        var $300=unSign(($299), 8, 0); //@line 1126 "xmltok_impl.c"
        var $301=($300) & 31; //@line 1126 "xmltok_impl.c"
        var $302=1 << ($301); //@line 1126 "xmltok_impl.c"
        var $303=($296) & ($302); //@line 1126 "xmltok_impl.c"
        var $304=((($303))|0)!=0; //@line 1126 "xmltok_impl.c"
        if ($304) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 1126 "xmltok_impl.c"
      case 74: // $bb73
        var $305=HEAP[$ptr_addr]; //@line 1127 "xmltok_impl.c"
        var $306=(($305+2)&4294967295); //@line 1127 "xmltok_impl.c"
        HEAP[$ptr_addr]=$306; //@line 1127 "xmltok_impl.c"
        HEAP[$tok]=18; //@line 1128 "xmltok_impl.c"
        __label__ = 78; break; //@line 1128 "xmltok_impl.c"
      case 75: // $bb74
        var $307=HEAP[$ptr_addr]; //@line 1131 "xmltok_impl.c"
        var $308=(($307)&4294967295); //@line 1131 "xmltok_impl.c"
        var $309=HEAP[$308]; //@line 1131 "xmltok_impl.c"
        var $310=unSign(($309), 8, 0); //@line 1131 "xmltok_impl.c"
        var $311=((_namePages+$310)&4294967295); //@line 1131 "xmltok_impl.c"
        var $312=HEAP[$311]; //@line 1131 "xmltok_impl.c"
        var $313=unSign(($312), 8, 0); //@line 1131 "xmltok_impl.c"
        var $314=($313) << 3; //@line 1131 "xmltok_impl.c"
        var $315=HEAP[$ptr_addr]; //@line 1131 "xmltok_impl.c"
        var $316=(($315+1)&4294967295); //@line 1131 "xmltok_impl.c"
        var $317=HEAP[$316]; //@line 1131 "xmltok_impl.c"
        var $318=unSign(($317), 8, 0) >>> 5; //@line 1131 "xmltok_impl.c"
        var $319=unSign(($318), 8, 0); //@line 1131 "xmltok_impl.c"
        var $320=((($314) + ($319))&4294967295); //@line 1131 "xmltok_impl.c"
        var $321=((_namingBitmap+$320*4)&4294967295); //@line 1131 "xmltok_impl.c"
        var $322=HEAP[$321]; //@line 1131 "xmltok_impl.c"
        var $323=HEAP[$ptr_addr]; //@line 1131 "xmltok_impl.c"
        var $324=(($323+1)&4294967295); //@line 1131 "xmltok_impl.c"
        var $325=HEAP[$324]; //@line 1131 "xmltok_impl.c"
        var $326=unSign(($325), 8, 0); //@line 1131 "xmltok_impl.c"
        var $327=($326) & 31; //@line 1131 "xmltok_impl.c"
        var $328=1 << ($327); //@line 1131 "xmltok_impl.c"
        var $329=($322) & ($328); //@line 1131 "xmltok_impl.c"
        var $330=((($329))|0)!=0; //@line 1131 "xmltok_impl.c"
        if ($330) { __label__ = 76; break; } else { __label__ = 77; break; } //@line 1131 "xmltok_impl.c"
      case 76: // $bb75
        var $331=HEAP[$ptr_addr]; //@line 1132 "xmltok_impl.c"
        var $332=(($331+2)&4294967295); //@line 1132 "xmltok_impl.c"
        HEAP[$ptr_addr]=$332; //@line 1132 "xmltok_impl.c"
        HEAP[$tok]=19; //@line 1133 "xmltok_impl.c"
        __label__ = 78; break; //@line 1133 "xmltok_impl.c"
      case 77: // $bb76
        var $333=HEAP[$nextTokPtr_addr]; //@line 1138 "xmltok_impl.c"
        var $334=HEAP[$ptr_addr]; //@line 1138 "xmltok_impl.c"
        HEAP[$333]=$334; //@line 1138 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1139 "xmltok_impl.c"
        __label__ = 108; break; //@line 1139 "xmltok_impl.c"
      case 78: // $bb77
        __label__ = 106; break; //@line 1139 "xmltok_impl.c"
      case 79: // $bb78
        var $335=HEAP[$ptr_addr]; //@line 1142 "xmltok_impl.c"
        var $336=(($335)&4294967295); //@line 1142 "xmltok_impl.c"
        var $337=HEAP[$336]; //@line 1142 "xmltok_impl.c"
        var $338=reSign(($337), 8, 0)==0; //@line 1142 "xmltok_impl.c"
        if ($338) { __label__ = 80; break; } else { __label__ = 81; break; } //@line 1142 "xmltok_impl.c"
      case 80: // $bb79
        var $339=HEAP[$enc_addr]; //@line 1142 "xmltok_impl.c"
        var $340=$339; //@line 1142 "xmltok_impl.c"
        var $341=HEAP[$ptr_addr]; //@line 1142 "xmltok_impl.c"
        var $342=(($341+1)&4294967295); //@line 1142 "xmltok_impl.c"
        var $343=HEAP[$342]; //@line 1142 "xmltok_impl.c"
        var $344=unSign(($343), 8, 0); //@line 1142 "xmltok_impl.c"
        var $345=(($340+72)&4294967295); //@line 1142 "xmltok_impl.c"
        var $346=(($345+$344)&4294967295); //@line 1142 "xmltok_impl.c"
        var $347=HEAP[$346]; //@line 1142 "xmltok_impl.c"
        var $348=unSign(($347), 8, 0); //@line 1142 "xmltok_impl.c"
        HEAP[$iftmp_1165]=$348; //@line 1142 "xmltok_impl.c"
        __label__ = 82; break; //@line 1142 "xmltok_impl.c"
      case 81: // $bb80
        var $349=HEAP[$ptr_addr]; //@line 1142 "xmltok_impl.c"
        var $350=(($349+1)&4294967295); //@line 1142 "xmltok_impl.c"
        var $351=HEAP[$350]; //@line 1142 "xmltok_impl.c"
        var $352=reSign(($351), 8, 0); //@line 1142 "xmltok_impl.c"
        var $353=HEAP[$ptr_addr]; //@line 1142 "xmltok_impl.c"
        var $354=(($353)&4294967295); //@line 1142 "xmltok_impl.c"
        var $355=HEAP[$354]; //@line 1142 "xmltok_impl.c"
        var $356=reSign(($355), 8, 0); //@line 1142 "xmltok_impl.c"
        var $357=((($356)) & 255); //@line 1142 "xmltok_impl.c"
        var $358=((($352)) & 255); //@line 1142 "xmltok_impl.c"
        var $359=_unicode_byte_type($357, $358); //@line 1142 "xmltok_impl.c"
        HEAP[$iftmp_1165]=$359; //@line 1142 "xmltok_impl.c"
        __label__ = 82; break; //@line 1142 "xmltok_impl.c"
      case 82: // $bb81
        var $360=HEAP[$iftmp_1165]; //@line 1142 "xmltok_impl.c"
        if ($360 == 5) {
          __label__ = 86; break;
        }
        else if ($360 == 6) {
          __label__ = 89; break;
        }
        else if ($360 == 7) {
          __label__ = 92; break;
        }
        else if ($360 == 9) {
          __label__ = 95; break;
        }
        else if ($360 == 10) {
          __label__ = 95; break;
        }
        else if ($360 == 11) {
          __label__ = 95; break;
        }
        else if ($360 == 15) {
          __label__ = 102; break;
        }
        else if ($360 == 20) {
          __label__ = 95; break;
        }
        else if ($360 == 21) {
          __label__ = 95; break;
        }
        else if ($360 == 22) {
          __label__ = 85; break;
        }
        else if ($360 == 24) {
          __label__ = 85; break;
        }
        else if ($360 == 25) {
          __label__ = 85; break;
        }
        else if ($360 == 26) {
          __label__ = 85; break;
        }
        else if ($360 == 27) {
          __label__ = 85; break;
        }
        else if ($360 == 29) {
          __label__ = 83; break;
        }
        else if ($360 == 30) {
          __label__ = 95; break;
        }
        else if ($360 == 32) {
          __label__ = 95; break;
        }
        else if ($360 == 33) {
          __label__ = 99; break;
        }
        else if ($360 == 34) {
          __label__ = 96; break;
        }
        else if ($360 == 35) {
          __label__ = 95; break;
        }
        else if ($360 == 36) {
          __label__ = 95; break;
        }
        else {
        __label__ = 105; break;
        }
        
      case 83: // $bb82
        var $361=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        var $362=(($361)&4294967295); //@line 1143 "xmltok_impl.c"
        var $363=HEAP[$362]; //@line 1143 "xmltok_impl.c"
        var $364=unSign(($363), 8, 0); //@line 1143 "xmltok_impl.c"
        var $365=((_namePages+$364)&4294967295); //@line 1143 "xmltok_impl.c"
        var $366=HEAP[$365]; //@line 1143 "xmltok_impl.c"
        var $367=unSign(($366), 8, 0); //@line 1143 "xmltok_impl.c"
        var $368=($367) << 3; //@line 1143 "xmltok_impl.c"
        var $369=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        var $370=(($369+1)&4294967295); //@line 1143 "xmltok_impl.c"
        var $371=HEAP[$370]; //@line 1143 "xmltok_impl.c"
        var $372=unSign(($371), 8, 0) >>> 5; //@line 1143 "xmltok_impl.c"
        var $373=unSign(($372), 8, 0); //@line 1143 "xmltok_impl.c"
        var $374=((($368) + ($373))&4294967295); //@line 1143 "xmltok_impl.c"
        var $375=((_namingBitmap+$374*4)&4294967295); //@line 1143 "xmltok_impl.c"
        var $376=HEAP[$375]; //@line 1143 "xmltok_impl.c"
        var $377=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        var $378=(($377+1)&4294967295); //@line 1143 "xmltok_impl.c"
        var $379=HEAP[$378]; //@line 1143 "xmltok_impl.c"
        var $380=unSign(($379), 8, 0); //@line 1143 "xmltok_impl.c"
        var $381=($380) & 31; //@line 1143 "xmltok_impl.c"
        var $382=1 << ($381); //@line 1143 "xmltok_impl.c"
        var $383=($376) & ($382); //@line 1143 "xmltok_impl.c"
        var $384=((($383))|0)==0; //@line 1143 "xmltok_impl.c"
        if ($384) { __label__ = 84; break; } else { __label__ = 85; break; } //@line 1143 "xmltok_impl.c"
      case 84: // $bb83
        var $385=HEAP[$nextTokPtr_addr]; //@line 1143 "xmltok_impl.c"
        var $386=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        HEAP[$385]=$386; //@line 1143 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1143 "xmltok_impl.c"
        __label__ = 108; break; //@line 1143 "xmltok_impl.c"
      case 85: // $bb84
        var $387=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        var $388=(($387+2)&4294967295); //@line 1143 "xmltok_impl.c"
        HEAP[$ptr_addr]=$388; //@line 1143 "xmltok_impl.c"
        __label__ = 106; break; //@line 1143 "xmltok_impl.c"
      case 86: // $bb85
        var $389=HEAP[$end_addr]; //@line 1143 "xmltok_impl.c"
        var $390=($389); //@line 1143 "xmltok_impl.c"
        var $391=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        var $392=($391); //@line 1143 "xmltok_impl.c"
        var $393=((($390) - ($392))&4294967295); //@line 1143 "xmltok_impl.c"
        var $394=((($393))|0) <= 1; //@line 1143 "xmltok_impl.c"
        if ($394) { __label__ = 87; break; } else { __label__ = 88; break; } //@line 1143 "xmltok_impl.c"
      case 87: // $bb86
        HEAP[$0]=-2; //@line 1143 "xmltok_impl.c"
        __label__ = 108; break; //@line 1143 "xmltok_impl.c"
      case 88: // $bb87
        var $395=HEAP[$nextTokPtr_addr]; //@line 1143 "xmltok_impl.c"
        var $396=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        HEAP[$395]=$396; //@line 1143 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1143 "xmltok_impl.c"
        __label__ = 108; break; //@line 1143 "xmltok_impl.c"
      case 89: // $bb88
        var $397=HEAP[$end_addr]; //@line 1143 "xmltok_impl.c"
        var $398=($397); //@line 1143 "xmltok_impl.c"
        var $399=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        var $400=($399); //@line 1143 "xmltok_impl.c"
        var $401=((($398) - ($400))&4294967295); //@line 1143 "xmltok_impl.c"
        var $402=((($401))|0) <= 2; //@line 1143 "xmltok_impl.c"
        if ($402) { __label__ = 90; break; } else { __label__ = 91; break; } //@line 1143 "xmltok_impl.c"
      case 90: // $bb89
        HEAP[$0]=-2; //@line 1143 "xmltok_impl.c"
        __label__ = 108; break; //@line 1143 "xmltok_impl.c"
      case 91: // $bb90
        var $403=HEAP[$nextTokPtr_addr]; //@line 1143 "xmltok_impl.c"
        var $404=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        HEAP[$403]=$404; //@line 1143 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1143 "xmltok_impl.c"
        __label__ = 108; break; //@line 1143 "xmltok_impl.c"
      case 92: // $bb91
        var $405=HEAP[$end_addr]; //@line 1143 "xmltok_impl.c"
        var $406=($405); //@line 1143 "xmltok_impl.c"
        var $407=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        var $408=($407); //@line 1143 "xmltok_impl.c"
        var $409=((($406) - ($408))&4294967295); //@line 1143 "xmltok_impl.c"
        var $410=((($409))|0) <= 3; //@line 1143 "xmltok_impl.c"
        if ($410) { __label__ = 93; break; } else { __label__ = 94; break; } //@line 1143 "xmltok_impl.c"
      case 93: // $bb92
        HEAP[$0]=-2; //@line 1143 "xmltok_impl.c"
        __label__ = 108; break; //@line 1143 "xmltok_impl.c"
      case 94: // $bb93
        var $411=HEAP[$nextTokPtr_addr]; //@line 1143 "xmltok_impl.c"
        var $412=HEAP[$ptr_addr]; //@line 1143 "xmltok_impl.c"
        HEAP[$411]=$412; //@line 1143 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1143 "xmltok_impl.c"
        __label__ = 108; break; //@line 1143 "xmltok_impl.c"
      case 95: // $bb94
        var $413=HEAP[$nextTokPtr_addr]; //@line 1147 "xmltok_impl.c"
        var $414=HEAP[$ptr_addr]; //@line 1147 "xmltok_impl.c"
        HEAP[$413]=$414; //@line 1147 "xmltok_impl.c"
        var $415=HEAP[$tok]; //@line 1148 "xmltok_impl.c"
        HEAP[$0]=$415; //@line 1148 "xmltok_impl.c"
        __label__ = 108; break; //@line 1148 "xmltok_impl.c"
      case 96: // $bb95
        var $416=HEAP[$tok]; //@line 1171 "xmltok_impl.c"
        var $417=((($416))|0)==19; //@line 1171 "xmltok_impl.c"
        if ($417) { __label__ = 97; break; } else { __label__ = 98; break; } //@line 1171 "xmltok_impl.c"
      case 97: // $bb96
        var $418=HEAP[$nextTokPtr_addr]; //@line 1172 "xmltok_impl.c"
        var $419=HEAP[$ptr_addr]; //@line 1172 "xmltok_impl.c"
        HEAP[$418]=$419; //@line 1172 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1173 "xmltok_impl.c"
        __label__ = 108; break; //@line 1173 "xmltok_impl.c"
      case 98: // $bb97
        var $420=HEAP[$ptr_addr]; //@line 1175 "xmltok_impl.c"
        var $421=(($420+2)&4294967295); //@line 1175 "xmltok_impl.c"
        var $422=HEAP[$nextTokPtr_addr]; //@line 1175 "xmltok_impl.c"
        HEAP[$422]=$421; //@line 1175 "xmltok_impl.c"
        HEAP[$0]=32; //@line 1176 "xmltok_impl.c"
        __label__ = 108; break; //@line 1176 "xmltok_impl.c"
      case 99: // $bb98
        var $423=HEAP[$tok]; //@line 1178 "xmltok_impl.c"
        var $424=((($423))|0)==19; //@line 1178 "xmltok_impl.c"
        if ($424) { __label__ = 100; break; } else { __label__ = 101; break; } //@line 1178 "xmltok_impl.c"
      case 100: // $bb99
        var $425=HEAP[$nextTokPtr_addr]; //@line 1179 "xmltok_impl.c"
        var $426=HEAP[$ptr_addr]; //@line 1179 "xmltok_impl.c"
        HEAP[$425]=$426; //@line 1179 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1180 "xmltok_impl.c"
        __label__ = 108; break; //@line 1180 "xmltok_impl.c"
      case 101: // $bb100
        var $427=HEAP[$ptr_addr]; //@line 1182 "xmltok_impl.c"
        var $428=(($427+2)&4294967295); //@line 1182 "xmltok_impl.c"
        var $429=HEAP[$nextTokPtr_addr]; //@line 1182 "xmltok_impl.c"
        HEAP[$429]=$428; //@line 1182 "xmltok_impl.c"
        HEAP[$0]=31; //@line 1183 "xmltok_impl.c"
        __label__ = 108; break; //@line 1183 "xmltok_impl.c"
      case 102: // $bb101
        var $430=HEAP[$tok]; //@line 1185 "xmltok_impl.c"
        var $431=((($430))|0)==19; //@line 1185 "xmltok_impl.c"
        if ($431) { __label__ = 103; break; } else { __label__ = 104; break; } //@line 1185 "xmltok_impl.c"
      case 103: // $bb102
        var $432=HEAP[$nextTokPtr_addr]; //@line 1186 "xmltok_impl.c"
        var $433=HEAP[$ptr_addr]; //@line 1186 "xmltok_impl.c"
        HEAP[$432]=$433; //@line 1186 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1187 "xmltok_impl.c"
        __label__ = 108; break; //@line 1187 "xmltok_impl.c"
      case 104: // $bb103
        var $434=HEAP[$ptr_addr]; //@line 1189 "xmltok_impl.c"
        var $435=(($434+2)&4294967295); //@line 1189 "xmltok_impl.c"
        var $436=HEAP[$nextTokPtr_addr]; //@line 1189 "xmltok_impl.c"
        HEAP[$436]=$435; //@line 1189 "xmltok_impl.c"
        HEAP[$0]=30; //@line 1190 "xmltok_impl.c"
        __label__ = 108; break; //@line 1190 "xmltok_impl.c"
      case 105: // $bb104
        var $437=HEAP[$nextTokPtr_addr]; //@line 1192 "xmltok_impl.c"
        var $438=HEAP[$ptr_addr]; //@line 1192 "xmltok_impl.c"
        HEAP[$437]=$438; //@line 1192 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1193 "xmltok_impl.c"
        __label__ = 108; break; //@line 1193 "xmltok_impl.c"
      case 106: // $bb105
        var $439=HEAP[$ptr_addr]; //@line 1141 "xmltok_impl.c"
        var $440=HEAP[$end_addr]; //@line 1141 "xmltok_impl.c"
        var $441=($439)!=($440); //@line 1141 "xmltok_impl.c"
        if ($441) { __label__ = 79; break; } else { __label__ = 107; break; } //@line 1141 "xmltok_impl.c"
      case 107: // $bb106
        var $442=HEAP[$tok]; //@line 1196 "xmltok_impl.c"
        var $443=((0 - ($442))&4294967295); //@line 1196 "xmltok_impl.c"
        HEAP[$0]=$443; //@line 1196 "xmltok_impl.c"
        __label__ = 108; break; //@line 1196 "xmltok_impl.c"
      case 108: // $bb107
        var $444=HEAP[$0]; //@line 974 "xmltok_impl.c"
        HEAP[$retval]=$444; //@line 974 "xmltok_impl.c"
        __label__ = 109; break; //@line 974 "xmltok_impl.c"
      case 109: // $return
        var $retval108=HEAP[$retval]; //@line 974 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval108; //@line 974 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_attributeValueTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 33; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 33);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_1175=__stackBase__+20;
        var $iftmp_1173=__stackBase__+21;
        var $0=__stackBase__+25;
        var $start=__stackBase__+29;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 1204 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 1204 "xmltok_impl.c"
        var $3=($1)==($2); //@line 1204 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1204 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-4; //@line 1205 "xmltok_impl.c"
        __label__ = 33; break; //@line 1205 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$ptr_addr]; //@line 1206 "xmltok_impl.c"
        HEAP[$start]=$4; //@line 1206 "xmltok_impl.c"
        __label__ = 31; break; //@line 1206 "xmltok_impl.c"
      case 3: // $bb2
        var $5=HEAP[$ptr_addr]; //@line 1208 "xmltok_impl.c"
        var $6=(($5)&4294967295); //@line 1208 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 1208 "xmltok_impl.c"
        var $8=reSign(($7), 8, 0)==0; //@line 1208 "xmltok_impl.c"
        if ($8) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1208 "xmltok_impl.c"
      case 4: // $bb3
        var $9=HEAP[$enc_addr]; //@line 1208 "xmltok_impl.c"
        var $10=$9; //@line 1208 "xmltok_impl.c"
        var $11=HEAP[$ptr_addr]; //@line 1208 "xmltok_impl.c"
        var $12=(($11+1)&4294967295); //@line 1208 "xmltok_impl.c"
        var $13=HEAP[$12]; //@line 1208 "xmltok_impl.c"
        var $14=unSign(($13), 8, 0); //@line 1208 "xmltok_impl.c"
        var $15=(($10+72)&4294967295); //@line 1208 "xmltok_impl.c"
        var $16=(($15+$14)&4294967295); //@line 1208 "xmltok_impl.c"
        var $17=HEAP[$16]; //@line 1208 "xmltok_impl.c"
        var $18=unSign(($17), 8, 0); //@line 1208 "xmltok_impl.c"
        HEAP[$iftmp_1173]=$18; //@line 1208 "xmltok_impl.c"
        __label__ = 6; break; //@line 1208 "xmltok_impl.c"
      case 5: // $bb4
        var $19=HEAP[$ptr_addr]; //@line 1208 "xmltok_impl.c"
        var $20=(($19+1)&4294967295); //@line 1208 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 1208 "xmltok_impl.c"
        var $22=reSign(($21), 8, 0); //@line 1208 "xmltok_impl.c"
        var $23=HEAP[$ptr_addr]; //@line 1208 "xmltok_impl.c"
        var $24=(($23)&4294967295); //@line 1208 "xmltok_impl.c"
        var $25=HEAP[$24]; //@line 1208 "xmltok_impl.c"
        var $26=reSign(($25), 8, 0); //@line 1208 "xmltok_impl.c"
        var $27=((($26)) & 255); //@line 1208 "xmltok_impl.c"
        var $28=((($22)) & 255); //@line 1208 "xmltok_impl.c"
        var $29=_unicode_byte_type($27, $28); //@line 1208 "xmltok_impl.c"
        HEAP[$iftmp_1173]=$29; //@line 1208 "xmltok_impl.c"
        __label__ = 6; break; //@line 1208 "xmltok_impl.c"
      case 6: // $bb5
        var $30=HEAP[$iftmp_1173]; //@line 1208 "xmltok_impl.c"
        if ($30 == 2) {
          __label__ = 13; break;
        }
        else if ($30 == 3) {
          __label__ = 10; break;
        }
        else if ($30 == 5) {
          __label__ = 7; break;
        }
        else if ($30 == 6) {
          __label__ = 8; break;
        }
        else if ($30 == 7) {
          __label__ = 9; break;
        }
        else if ($30 == 9) {
          __label__ = 17; break;
        }
        else if ($30 == 10) {
          __label__ = 14; break;
        }
        else if ($30 == 21) {
          __label__ = 27; break;
        }
        else {
        __label__ = 30; break;
        }
        
      case 7: // $bb6
        var $31=HEAP[$ptr_addr]; //@line 1211 "xmltok_impl.c"
        var $32=(($31+2)&4294967295); //@line 1211 "xmltok_impl.c"
        HEAP[$ptr_addr]=$32; //@line 1211 "xmltok_impl.c"
        __label__ = 31; break; //@line 1211 "xmltok_impl.c"
      case 8: // $bb7
        var $33=HEAP[$ptr_addr]; //@line 1211 "xmltok_impl.c"
        var $34=(($33+3)&4294967295); //@line 1211 "xmltok_impl.c"
        HEAP[$ptr_addr]=$34; //@line 1211 "xmltok_impl.c"
        __label__ = 31; break; //@line 1211 "xmltok_impl.c"
      case 9: // $bb8
        var $35=HEAP[$ptr_addr]; //@line 1211 "xmltok_impl.c"
        var $36=(($35+4)&4294967295); //@line 1211 "xmltok_impl.c"
        HEAP[$ptr_addr]=$36; //@line 1211 "xmltok_impl.c"
        __label__ = 31; break; //@line 1211 "xmltok_impl.c"
      case 10: // $bb9
        var $37=HEAP[$ptr_addr]; //@line 1214 "xmltok_impl.c"
        var $38=HEAP[$start]; //@line 1214 "xmltok_impl.c"
        var $39=($37)==($38); //@line 1214 "xmltok_impl.c"
        if ($39) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1214 "xmltok_impl.c"
      case 11: // $bb10
        var $40=HEAP[$ptr_addr]; //@line 1215 "xmltok_impl.c"
        var $41=(($40+2)&4294967295); //@line 1215 "xmltok_impl.c"
        var $42=HEAP[$enc_addr]; //@line 1215 "xmltok_impl.c"
        var $43=HEAP[$end_addr]; //@line 1215 "xmltok_impl.c"
        var $44=HEAP[$nextTokPtr_addr]; //@line 1215 "xmltok_impl.c"
        var $45=_big2_scanRef($42, $41, $43, $44); //@line 1215 "xmltok_impl.c"
        HEAP[$0]=$45; //@line 1215 "xmltok_impl.c"
        __label__ = 33; break; //@line 1215 "xmltok_impl.c"
      case 12: // $bb11
        var $46=HEAP[$nextTokPtr_addr]; //@line 1216 "xmltok_impl.c"
        var $47=HEAP[$ptr_addr]; //@line 1216 "xmltok_impl.c"
        HEAP[$46]=$47; //@line 1216 "xmltok_impl.c"
        HEAP[$0]=6; //@line 1217 "xmltok_impl.c"
        __label__ = 33; break; //@line 1217 "xmltok_impl.c"
      case 13: // $bb12
        var $48=HEAP[$nextTokPtr_addr]; //@line 1220 "xmltok_impl.c"
        var $49=HEAP[$ptr_addr]; //@line 1220 "xmltok_impl.c"
        HEAP[$48]=$49; //@line 1220 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1221 "xmltok_impl.c"
        __label__ = 33; break; //@line 1221 "xmltok_impl.c"
      case 14: // $bb13
        var $50=HEAP[$ptr_addr]; //@line 1223 "xmltok_impl.c"
        var $51=HEAP[$start]; //@line 1223 "xmltok_impl.c"
        var $52=($50)==($51); //@line 1223 "xmltok_impl.c"
        if ($52) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1223 "xmltok_impl.c"
      case 15: // $bb14
        var $53=HEAP[$ptr_addr]; //@line 1224 "xmltok_impl.c"
        var $54=(($53+2)&4294967295); //@line 1224 "xmltok_impl.c"
        var $55=HEAP[$nextTokPtr_addr]; //@line 1224 "xmltok_impl.c"
        HEAP[$55]=$54; //@line 1224 "xmltok_impl.c"
        HEAP[$0]=7; //@line 1225 "xmltok_impl.c"
        __label__ = 33; break; //@line 1225 "xmltok_impl.c"
      case 16: // $bb15
        var $56=HEAP[$nextTokPtr_addr]; //@line 1227 "xmltok_impl.c"
        var $57=HEAP[$ptr_addr]; //@line 1227 "xmltok_impl.c"
        HEAP[$56]=$57; //@line 1227 "xmltok_impl.c"
        HEAP[$0]=6; //@line 1228 "xmltok_impl.c"
        __label__ = 33; break; //@line 1228 "xmltok_impl.c"
      case 17: // $bb16
        var $58=HEAP[$ptr_addr]; //@line 1230 "xmltok_impl.c"
        var $59=HEAP[$start]; //@line 1230 "xmltok_impl.c"
        var $60=($58)==($59); //@line 1230 "xmltok_impl.c"
        if ($60) { __label__ = 18; break; } else { __label__ = 26; break; } //@line 1230 "xmltok_impl.c"
      case 18: // $bb17
        var $61=HEAP[$ptr_addr]; //@line 1231 "xmltok_impl.c"
        var $62=(($61+2)&4294967295); //@line 1231 "xmltok_impl.c"
        HEAP[$ptr_addr]=$62; //@line 1231 "xmltok_impl.c"
        var $63=HEAP[$ptr_addr]; //@line 1232 "xmltok_impl.c"
        var $64=HEAP[$end_addr]; //@line 1232 "xmltok_impl.c"
        var $65=($63)==($64); //@line 1232 "xmltok_impl.c"
        if ($65) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 1232 "xmltok_impl.c"
      case 19: // $bb18
        HEAP[$0]=-3; //@line 1233 "xmltok_impl.c"
        __label__ = 33; break; //@line 1233 "xmltok_impl.c"
      case 20: // $bb19
        var $66=HEAP[$ptr_addr]; //@line 1234 "xmltok_impl.c"
        var $67=(($66)&4294967295); //@line 1234 "xmltok_impl.c"
        var $68=HEAP[$67]; //@line 1234 "xmltok_impl.c"
        var $69=reSign(($68), 8, 0)==0; //@line 1234 "xmltok_impl.c"
        if ($69) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 1234 "xmltok_impl.c"
      case 21: // $bb20
        var $70=HEAP[$enc_addr]; //@line 1234 "xmltok_impl.c"
        var $71=$70; //@line 1234 "xmltok_impl.c"
        var $72=HEAP[$ptr_addr]; //@line 1234 "xmltok_impl.c"
        var $73=(($72+1)&4294967295); //@line 1234 "xmltok_impl.c"
        var $74=HEAP[$73]; //@line 1234 "xmltok_impl.c"
        var $75=unSign(($74), 8, 0); //@line 1234 "xmltok_impl.c"
        var $76=(($71+72)&4294967295); //@line 1234 "xmltok_impl.c"
        var $77=(($76+$75)&4294967295); //@line 1234 "xmltok_impl.c"
        var $78=HEAP[$77]; //@line 1234 "xmltok_impl.c"
        var $79=reSign(($78), 8, 0)==10; //@line 1234 "xmltok_impl.c"
        var $80=unSign(($79), 1, 0); //@line 1234 "xmltok_impl.c"
        HEAP[$iftmp_1175]=$80; //@line 1234 "xmltok_impl.c"
        __label__ = 23; break; //@line 1234 "xmltok_impl.c"
      case 22: // $bb21
        var $81=HEAP[$ptr_addr]; //@line 1234 "xmltok_impl.c"
        var $82=(($81+1)&4294967295); //@line 1234 "xmltok_impl.c"
        var $83=HEAP[$82]; //@line 1234 "xmltok_impl.c"
        var $84=reSign(($83), 8, 0); //@line 1234 "xmltok_impl.c"
        var $85=HEAP[$ptr_addr]; //@line 1234 "xmltok_impl.c"
        var $86=(($85)&4294967295); //@line 1234 "xmltok_impl.c"
        var $87=HEAP[$86]; //@line 1234 "xmltok_impl.c"
        var $88=reSign(($87), 8, 0); //@line 1234 "xmltok_impl.c"
        var $89=((($88)) & 255); //@line 1234 "xmltok_impl.c"
        var $90=((($84)) & 255); //@line 1234 "xmltok_impl.c"
        var $91=_unicode_byte_type($89, $90); //@line 1234 "xmltok_impl.c"
        var $92=((($91))|0)==10; //@line 1234 "xmltok_impl.c"
        var $93=unSign(($92), 1, 0); //@line 1234 "xmltok_impl.c"
        HEAP[$iftmp_1175]=$93; //@line 1234 "xmltok_impl.c"
        __label__ = 23; break; //@line 1234 "xmltok_impl.c"
      case 23: // $bb22
        var $94=HEAP[$iftmp_1175]; //@line 1234 "xmltok_impl.c"
        var $toBool=reSign(($94), 8, 0)!=0; //@line 1234 "xmltok_impl.c"
        if ($toBool) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 1234 "xmltok_impl.c"
      case 24: // $bb23
        var $95=HEAP[$ptr_addr]; //@line 1235 "xmltok_impl.c"
        var $96=(($95+2)&4294967295); //@line 1235 "xmltok_impl.c"
        HEAP[$ptr_addr]=$96; //@line 1235 "xmltok_impl.c"
        __label__ = 25; break; //@line 1235 "xmltok_impl.c"
      case 25: // $bb24
        var $97=HEAP[$nextTokPtr_addr]; //@line 1236 "xmltok_impl.c"
        var $98=HEAP[$ptr_addr]; //@line 1236 "xmltok_impl.c"
        HEAP[$97]=$98; //@line 1236 "xmltok_impl.c"
        HEAP[$0]=7; //@line 1237 "xmltok_impl.c"
        __label__ = 33; break; //@line 1237 "xmltok_impl.c"
      case 26: // $bb25
        var $99=HEAP[$nextTokPtr_addr]; //@line 1239 "xmltok_impl.c"
        var $100=HEAP[$ptr_addr]; //@line 1239 "xmltok_impl.c"
        HEAP[$99]=$100; //@line 1239 "xmltok_impl.c"
        HEAP[$0]=6; //@line 1240 "xmltok_impl.c"
        __label__ = 33; break; //@line 1240 "xmltok_impl.c"
      case 27: // $bb26
        var $101=HEAP[$ptr_addr]; //@line 1242 "xmltok_impl.c"
        var $102=HEAP[$start]; //@line 1242 "xmltok_impl.c"
        var $103=($101)==($102); //@line 1242 "xmltok_impl.c"
        if ($103) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 1242 "xmltok_impl.c"
      case 28: // $bb27
        var $104=HEAP[$ptr_addr]; //@line 1243 "xmltok_impl.c"
        var $105=(($104+2)&4294967295); //@line 1243 "xmltok_impl.c"
        var $106=HEAP[$nextTokPtr_addr]; //@line 1243 "xmltok_impl.c"
        HEAP[$106]=$105; //@line 1243 "xmltok_impl.c"
        HEAP[$0]=39; //@line 1244 "xmltok_impl.c"
        __label__ = 33; break; //@line 1244 "xmltok_impl.c"
      case 29: // $bb28
        var $107=HEAP[$nextTokPtr_addr]; //@line 1246 "xmltok_impl.c"
        var $108=HEAP[$ptr_addr]; //@line 1246 "xmltok_impl.c"
        HEAP[$107]=$108; //@line 1246 "xmltok_impl.c"
        HEAP[$0]=6; //@line 1247 "xmltok_impl.c"
        __label__ = 33; break; //@line 1247 "xmltok_impl.c"
      case 30: // $bb29
        var $109=HEAP[$ptr_addr]; //@line 1249 "xmltok_impl.c"
        var $110=(($109+2)&4294967295); //@line 1249 "xmltok_impl.c"
        HEAP[$ptr_addr]=$110; //@line 1249 "xmltok_impl.c"
        __label__ = 31; break; //@line 1249 "xmltok_impl.c"
      case 31: // $bb30
        var $111=HEAP[$ptr_addr]; //@line 1207 "xmltok_impl.c"
        var $112=HEAP[$end_addr]; //@line 1207 "xmltok_impl.c"
        var $113=($111)!=($112); //@line 1207 "xmltok_impl.c"
        if ($113) { __label__ = 3; break; } else { __label__ = 32; break; } //@line 1207 "xmltok_impl.c"
      case 32: // $bb31
        var $114=HEAP[$nextTokPtr_addr]; //@line 1253 "xmltok_impl.c"
        var $115=HEAP[$ptr_addr]; //@line 1253 "xmltok_impl.c"
        HEAP[$114]=$115; //@line 1253 "xmltok_impl.c"
        HEAP[$0]=6; //@line 1254 "xmltok_impl.c"
        __label__ = 33; break; //@line 1254 "xmltok_impl.c"
      case 33: // $bb32
        var $116=HEAP[$0]; //@line 1205 "xmltok_impl.c"
        HEAP[$retval]=$116; //@line 1205 "xmltok_impl.c"
        __label__ = 34; break; //@line 1205 "xmltok_impl.c"
      case 34: // $return
        var $retval33=HEAP[$retval]; //@line 1205 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval33; //@line 1205 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_entityValueTok($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 41; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 41);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_1180=__stackBase__+20;
        var $iftmp_1179=__stackBase__+21;
        var $iftmp_1177=__stackBase__+25;
        var $0=__stackBase__+29;
        var $start=__stackBase__+33;
        var $tok=__stackBase__+37;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 1262 "xmltok_impl.c"
        var $2=HEAP[$end_addr]; //@line 1262 "xmltok_impl.c"
        var $3=($1)==($2); //@line 1262 "xmltok_impl.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1262 "xmltok_impl.c"
      case 1: // $bb
        HEAP[$0]=-4; //@line 1263 "xmltok_impl.c"
        __label__ = 35; break; //@line 1263 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$ptr_addr]; //@line 1264 "xmltok_impl.c"
        HEAP[$start]=$4; //@line 1264 "xmltok_impl.c"
        __label__ = 33; break; //@line 1264 "xmltok_impl.c"
      case 3: // $bb2
        var $5=HEAP[$ptr_addr]; //@line 1266 "xmltok_impl.c"
        var $6=(($5)&4294967295); //@line 1266 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 1266 "xmltok_impl.c"
        var $8=reSign(($7), 8, 0)==0; //@line 1266 "xmltok_impl.c"
        if ($8) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1266 "xmltok_impl.c"
      case 4: // $bb3
        var $9=HEAP[$enc_addr]; //@line 1266 "xmltok_impl.c"
        var $10=$9; //@line 1266 "xmltok_impl.c"
        var $11=HEAP[$ptr_addr]; //@line 1266 "xmltok_impl.c"
        var $12=(($11+1)&4294967295); //@line 1266 "xmltok_impl.c"
        var $13=HEAP[$12]; //@line 1266 "xmltok_impl.c"
        var $14=unSign(($13), 8, 0); //@line 1266 "xmltok_impl.c"
        var $15=(($10+72)&4294967295); //@line 1266 "xmltok_impl.c"
        var $16=(($15+$14)&4294967295); //@line 1266 "xmltok_impl.c"
        var $17=HEAP[$16]; //@line 1266 "xmltok_impl.c"
        var $18=unSign(($17), 8, 0); //@line 1266 "xmltok_impl.c"
        HEAP[$iftmp_1177]=$18; //@line 1266 "xmltok_impl.c"
        __label__ = 6; break; //@line 1266 "xmltok_impl.c"
      case 5: // $bb4
        var $19=HEAP[$ptr_addr]; //@line 1266 "xmltok_impl.c"
        var $20=(($19+1)&4294967295); //@line 1266 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 1266 "xmltok_impl.c"
        var $22=reSign(($21), 8, 0); //@line 1266 "xmltok_impl.c"
        var $23=HEAP[$ptr_addr]; //@line 1266 "xmltok_impl.c"
        var $24=(($23)&4294967295); //@line 1266 "xmltok_impl.c"
        var $25=HEAP[$24]; //@line 1266 "xmltok_impl.c"
        var $26=reSign(($25), 8, 0); //@line 1266 "xmltok_impl.c"
        var $27=((($26)) & 255); //@line 1266 "xmltok_impl.c"
        var $28=((($22)) & 255); //@line 1266 "xmltok_impl.c"
        var $29=_unicode_byte_type($27, $28); //@line 1266 "xmltok_impl.c"
        HEAP[$iftmp_1177]=$29; //@line 1266 "xmltok_impl.c"
        __label__ = 6; break; //@line 1266 "xmltok_impl.c"
      case 6: // $bb5
        var $30=HEAP[$iftmp_1177]; //@line 1266 "xmltok_impl.c"
        if ($30 == 3) {
          __label__ = 10; break;
        }
        else if ($30 == 5) {
          __label__ = 7; break;
        }
        else if ($30 == 6) {
          __label__ = 8; break;
        }
        else if ($30 == 7) {
          __label__ = 9; break;
        }
        else if ($30 == 9) {
          __label__ = 22; break;
        }
        else if ($30 == 10) {
          __label__ = 19; break;
        }
        else if ($30 == 30) {
          __label__ = 13; break;
        }
        else {
        __label__ = 32; break;
        }
        
      case 7: // $bb6
        var $31=HEAP[$ptr_addr]; //@line 1269 "xmltok_impl.c"
        var $32=(($31+2)&4294967295); //@line 1269 "xmltok_impl.c"
        HEAP[$ptr_addr]=$32; //@line 1269 "xmltok_impl.c"
        __label__ = 33; break; //@line 1269 "xmltok_impl.c"
      case 8: // $bb7
        var $33=HEAP[$ptr_addr]; //@line 1269 "xmltok_impl.c"
        var $34=(($33+3)&4294967295); //@line 1269 "xmltok_impl.c"
        HEAP[$ptr_addr]=$34; //@line 1269 "xmltok_impl.c"
        __label__ = 33; break; //@line 1269 "xmltok_impl.c"
      case 9: // $bb8
        var $35=HEAP[$ptr_addr]; //@line 1269 "xmltok_impl.c"
        var $36=(($35+4)&4294967295); //@line 1269 "xmltok_impl.c"
        HEAP[$ptr_addr]=$36; //@line 1269 "xmltok_impl.c"
        __label__ = 33; break; //@line 1269 "xmltok_impl.c"
      case 10: // $bb9
        var $37=HEAP[$ptr_addr]; //@line 1272 "xmltok_impl.c"
        var $38=HEAP[$start]; //@line 1272 "xmltok_impl.c"
        var $39=($37)==($38); //@line 1272 "xmltok_impl.c"
        if ($39) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1272 "xmltok_impl.c"
      case 11: // $bb10
        var $40=HEAP[$ptr_addr]; //@line 1273 "xmltok_impl.c"
        var $41=(($40+2)&4294967295); //@line 1273 "xmltok_impl.c"
        var $42=HEAP[$enc_addr]; //@line 1273 "xmltok_impl.c"
        var $43=HEAP[$end_addr]; //@line 1273 "xmltok_impl.c"
        var $44=HEAP[$nextTokPtr_addr]; //@line 1273 "xmltok_impl.c"
        var $45=_big2_scanRef($42, $41, $43, $44); //@line 1273 "xmltok_impl.c"
        HEAP[$0]=$45; //@line 1273 "xmltok_impl.c"
        __label__ = 35; break; //@line 1273 "xmltok_impl.c"
      case 12: // $bb11
        var $46=HEAP[$nextTokPtr_addr]; //@line 1274 "xmltok_impl.c"
        var $47=HEAP[$ptr_addr]; //@line 1274 "xmltok_impl.c"
        HEAP[$46]=$47; //@line 1274 "xmltok_impl.c"
        HEAP[$0]=6; //@line 1275 "xmltok_impl.c"
        __label__ = 35; break; //@line 1275 "xmltok_impl.c"
      case 13: // $bb12
        var $48=HEAP[$ptr_addr]; //@line 1277 "xmltok_impl.c"
        var $49=HEAP[$start]; //@line 1277 "xmltok_impl.c"
        var $50=($48)==($49); //@line 1277 "xmltok_impl.c"
        if ($50) { __label__ = 14; break; } else { __label__ = 18; break; } //@line 1277 "xmltok_impl.c"
      case 14: // $bb13
        var $51=HEAP[$ptr_addr]; //@line 1279 "xmltok_impl.c"
        var $52=(($51+2)&4294967295); //@line 1279 "xmltok_impl.c"
        var $53=HEAP[$enc_addr]; //@line 1279 "xmltok_impl.c"
        var $54=HEAP[$end_addr]; //@line 1279 "xmltok_impl.c"
        var $55=HEAP[$nextTokPtr_addr]; //@line 1279 "xmltok_impl.c"
        var $56=_big2_scanPercent($53, $52, $54, $55); //@line 1279 "xmltok_impl.c"
        HEAP[$tok]=$56; //@line 1279 "xmltok_impl.c"
        var $57=HEAP[$tok]; //@line 1280 "xmltok_impl.c"
        var $58=((($57))|0)!=22; //@line 1280 "xmltok_impl.c"
        if ($58) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1280 "xmltok_impl.c"
      case 15: // $bb14
        var $59=HEAP[$tok]; //@line 1280 "xmltok_impl.c"
        HEAP[$iftmp_1179]=$59; //@line 1280 "xmltok_impl.c"
        __label__ = 17; break; //@line 1280 "xmltok_impl.c"
      case 16: // $bb15
        HEAP[$iftmp_1179]=0; //@line 1280 "xmltok_impl.c"
        __label__ = 17; break; //@line 1280 "xmltok_impl.c"
      case 17: // $bb16
        var $60=HEAP[$iftmp_1179]; //@line 1280 "xmltok_impl.c"
        HEAP[$0]=$60; //@line 1280 "xmltok_impl.c"
        __label__ = 35; break; //@line 1280 "xmltok_impl.c"
      case 18: // $bb17
        var $61=HEAP[$nextTokPtr_addr]; //@line 1282 "xmltok_impl.c"
        var $62=HEAP[$ptr_addr]; //@line 1282 "xmltok_impl.c"
        HEAP[$61]=$62; //@line 1282 "xmltok_impl.c"
        HEAP[$0]=6; //@line 1283 "xmltok_impl.c"
        __label__ = 35; break; //@line 1283 "xmltok_impl.c"
      case 19: // $bb18
        var $63=HEAP[$ptr_addr]; //@line 1285 "xmltok_impl.c"
        var $64=HEAP[$start]; //@line 1285 "xmltok_impl.c"
        var $65=($63)==($64); //@line 1285 "xmltok_impl.c"
        if ($65) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1285 "xmltok_impl.c"
      case 20: // $bb19
        var $66=HEAP[$ptr_addr]; //@line 1286 "xmltok_impl.c"
        var $67=(($66+2)&4294967295); //@line 1286 "xmltok_impl.c"
        var $68=HEAP[$nextTokPtr_addr]; //@line 1286 "xmltok_impl.c"
        HEAP[$68]=$67; //@line 1286 "xmltok_impl.c"
        HEAP[$0]=7; //@line 1287 "xmltok_impl.c"
        __label__ = 35; break; //@line 1287 "xmltok_impl.c"
      case 21: // $bb20
        var $69=HEAP[$nextTokPtr_addr]; //@line 1289 "xmltok_impl.c"
        var $70=HEAP[$ptr_addr]; //@line 1289 "xmltok_impl.c"
        HEAP[$69]=$70; //@line 1289 "xmltok_impl.c"
        HEAP[$0]=6; //@line 1290 "xmltok_impl.c"
        __label__ = 35; break; //@line 1290 "xmltok_impl.c"
      case 22: // $bb21
        var $71=HEAP[$ptr_addr]; //@line 1292 "xmltok_impl.c"
        var $72=HEAP[$start]; //@line 1292 "xmltok_impl.c"
        var $73=($71)==($72); //@line 1292 "xmltok_impl.c"
        if ($73) { __label__ = 23; break; } else { __label__ = 31; break; } //@line 1292 "xmltok_impl.c"
      case 23: // $bb22
        var $74=HEAP[$ptr_addr]; //@line 1293 "xmltok_impl.c"
        var $75=(($74+2)&4294967295); //@line 1293 "xmltok_impl.c"
        HEAP[$ptr_addr]=$75; //@line 1293 "xmltok_impl.c"
        var $76=HEAP[$ptr_addr]; //@line 1294 "xmltok_impl.c"
        var $77=HEAP[$end_addr]; //@line 1294 "xmltok_impl.c"
        var $78=($76)==($77); //@line 1294 "xmltok_impl.c"
        if ($78) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 1294 "xmltok_impl.c"
      case 24: // $bb23
        HEAP[$0]=-3; //@line 1295 "xmltok_impl.c"
        __label__ = 35; break; //@line 1295 "xmltok_impl.c"
      case 25: // $bb24
        var $79=HEAP[$ptr_addr]; //@line 1296 "xmltok_impl.c"
        var $80=(($79)&4294967295); //@line 1296 "xmltok_impl.c"
        var $81=HEAP[$80]; //@line 1296 "xmltok_impl.c"
        var $82=reSign(($81), 8, 0)==0; //@line 1296 "xmltok_impl.c"
        if ($82) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1296 "xmltok_impl.c"
      case 26: // $bb25
        var $83=HEAP[$enc_addr]; //@line 1296 "xmltok_impl.c"
        var $84=$83; //@line 1296 "xmltok_impl.c"
        var $85=HEAP[$ptr_addr]; //@line 1296 "xmltok_impl.c"
        var $86=(($85+1)&4294967295); //@line 1296 "xmltok_impl.c"
        var $87=HEAP[$86]; //@line 1296 "xmltok_impl.c"
        var $88=unSign(($87), 8, 0); //@line 1296 "xmltok_impl.c"
        var $89=(($84+72)&4294967295); //@line 1296 "xmltok_impl.c"
        var $90=(($89+$88)&4294967295); //@line 1296 "xmltok_impl.c"
        var $91=HEAP[$90]; //@line 1296 "xmltok_impl.c"
        var $92=reSign(($91), 8, 0)==10; //@line 1296 "xmltok_impl.c"
        var $93=unSign(($92), 1, 0); //@line 1296 "xmltok_impl.c"
        HEAP[$iftmp_1180]=$93; //@line 1296 "xmltok_impl.c"
        __label__ = 28; break; //@line 1296 "xmltok_impl.c"
      case 27: // $bb26
        var $94=HEAP[$ptr_addr]; //@line 1296 "xmltok_impl.c"
        var $95=(($94+1)&4294967295); //@line 1296 "xmltok_impl.c"
        var $96=HEAP[$95]; //@line 1296 "xmltok_impl.c"
        var $97=reSign(($96), 8, 0); //@line 1296 "xmltok_impl.c"
        var $98=HEAP[$ptr_addr]; //@line 1296 "xmltok_impl.c"
        var $99=(($98)&4294967295); //@line 1296 "xmltok_impl.c"
        var $100=HEAP[$99]; //@line 1296 "xmltok_impl.c"
        var $101=reSign(($100), 8, 0); //@line 1296 "xmltok_impl.c"
        var $102=((($101)) & 255); //@line 1296 "xmltok_impl.c"
        var $103=((($97)) & 255); //@line 1296 "xmltok_impl.c"
        var $104=_unicode_byte_type($102, $103); //@line 1296 "xmltok_impl.c"
        var $105=((($104))|0)==10; //@line 1296 "xmltok_impl.c"
        var $106=unSign(($105), 1, 0); //@line 1296 "xmltok_impl.c"
        HEAP[$iftmp_1180]=$106; //@line 1296 "xmltok_impl.c"
        __label__ = 28; break; //@line 1296 "xmltok_impl.c"
      case 28: // $bb27
        var $107=HEAP[$iftmp_1180]; //@line 1296 "xmltok_impl.c"
        var $toBool=reSign(($107), 8, 0)!=0; //@line 1296 "xmltok_impl.c"
        if ($toBool) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 1296 "xmltok_impl.c"
      case 29: // $bb28
        var $108=HEAP[$ptr_addr]; //@line 1297 "xmltok_impl.c"
        var $109=(($108+2)&4294967295); //@line 1297 "xmltok_impl.c"
        HEAP[$ptr_addr]=$109; //@line 1297 "xmltok_impl.c"
        __label__ = 30; break; //@line 1297 "xmltok_impl.c"
      case 30: // $bb29
        var $110=HEAP[$nextTokPtr_addr]; //@line 1298 "xmltok_impl.c"
        var $111=HEAP[$ptr_addr]; //@line 1298 "xmltok_impl.c"
        HEAP[$110]=$111; //@line 1298 "xmltok_impl.c"
        HEAP[$0]=7; //@line 1299 "xmltok_impl.c"
        __label__ = 35; break; //@line 1299 "xmltok_impl.c"
      case 31: // $bb30
        var $112=HEAP[$nextTokPtr_addr]; //@line 1301 "xmltok_impl.c"
        var $113=HEAP[$ptr_addr]; //@line 1301 "xmltok_impl.c"
        HEAP[$112]=$113; //@line 1301 "xmltok_impl.c"
        HEAP[$0]=6; //@line 1302 "xmltok_impl.c"
        __label__ = 35; break; //@line 1302 "xmltok_impl.c"
      case 32: // $bb31
        var $114=HEAP[$ptr_addr]; //@line 1304 "xmltok_impl.c"
        var $115=(($114+2)&4294967295); //@line 1304 "xmltok_impl.c"
        HEAP[$ptr_addr]=$115; //@line 1304 "xmltok_impl.c"
        __label__ = 33; break; //@line 1304 "xmltok_impl.c"
      case 33: // $bb32
        var $116=HEAP[$ptr_addr]; //@line 1265 "xmltok_impl.c"
        var $117=HEAP[$end_addr]; //@line 1265 "xmltok_impl.c"
        var $118=($116)!=($117); //@line 1265 "xmltok_impl.c"
        if ($118) { __label__ = 3; break; } else { __label__ = 34; break; } //@line 1265 "xmltok_impl.c"
      case 34: // $bb33
        var $119=HEAP[$nextTokPtr_addr]; //@line 1308 "xmltok_impl.c"
        var $120=HEAP[$ptr_addr]; //@line 1308 "xmltok_impl.c"
        HEAP[$119]=$120; //@line 1308 "xmltok_impl.c"
        HEAP[$0]=6; //@line 1309 "xmltok_impl.c"
        __label__ = 35; break; //@line 1309 "xmltok_impl.c"
      case 35: // $bb34
        var $121=HEAP[$0]; //@line 1263 "xmltok_impl.c"
        HEAP[$retval]=$121; //@line 1263 "xmltok_impl.c"
        __label__ = 36; break; //@line 1263 "xmltok_impl.c"
      case 36: // $return
        var $retval35=HEAP[$retval]; //@line 1263 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval35; //@line 1263 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_isPublicId($enc, $ptr, $end, $badPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $badPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_1184=__stackBase__+20;
        var $0=__stackBase__+24;
        var $iftmp_1182=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$badPtr_addr]=$badPtr;
        var $1=HEAP[$ptr_addr]; //@line 1371 "xmltok_impl.c"
        var $2=(($1+2)&4294967295); //@line 1371 "xmltok_impl.c"
        HEAP[$ptr_addr]=$2; //@line 1371 "xmltok_impl.c"
        var $3=HEAP[$end_addr]; //@line 1372 "xmltok_impl.c"
        var $4=(($3+-2)&4294967295); //@line 1372 "xmltok_impl.c"
        HEAP[$end_addr]=$4; //@line 1372 "xmltok_impl.c"
        __label__ = 19; break; //@line 1372 "xmltok_impl.c"
      case 1: // $bb
        var $5=HEAP[$ptr_addr]; //@line 1374 "xmltok_impl.c"
        var $6=(($5)&4294967295); //@line 1374 "xmltok_impl.c"
        var $7=HEAP[$6]; //@line 1374 "xmltok_impl.c"
        var $8=reSign(($7), 8, 0)==0; //@line 1374 "xmltok_impl.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1374 "xmltok_impl.c"
      case 2: // $bb1
        var $9=HEAP[$enc_addr]; //@line 1374 "xmltok_impl.c"
        var $10=$9; //@line 1374 "xmltok_impl.c"
        var $11=HEAP[$ptr_addr]; //@line 1374 "xmltok_impl.c"
        var $12=(($11+1)&4294967295); //@line 1374 "xmltok_impl.c"
        var $13=HEAP[$12]; //@line 1374 "xmltok_impl.c"
        var $14=unSign(($13), 8, 0); //@line 1374 "xmltok_impl.c"
        var $15=(($10+72)&4294967295); //@line 1374 "xmltok_impl.c"
        var $16=(($15+$14)&4294967295); //@line 1374 "xmltok_impl.c"
        var $17=HEAP[$16]; //@line 1374 "xmltok_impl.c"
        var $18=unSign(($17), 8, 0); //@line 1374 "xmltok_impl.c"
        HEAP[$iftmp_1182]=$18; //@line 1374 "xmltok_impl.c"
        __label__ = 4; break; //@line 1374 "xmltok_impl.c"
      case 3: // $bb2
        var $19=HEAP[$ptr_addr]; //@line 1374 "xmltok_impl.c"
        var $20=(($19+1)&4294967295); //@line 1374 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 1374 "xmltok_impl.c"
        var $22=reSign(($21), 8, 0); //@line 1374 "xmltok_impl.c"
        var $23=HEAP[$ptr_addr]; //@line 1374 "xmltok_impl.c"
        var $24=(($23)&4294967295); //@line 1374 "xmltok_impl.c"
        var $25=HEAP[$24]; //@line 1374 "xmltok_impl.c"
        var $26=reSign(($25), 8, 0); //@line 1374 "xmltok_impl.c"
        var $27=((($26)) & 255); //@line 1374 "xmltok_impl.c"
        var $28=((($22)) & 255); //@line 1374 "xmltok_impl.c"
        var $29=_unicode_byte_type($27, $28); //@line 1374 "xmltok_impl.c"
        HEAP[$iftmp_1182]=$29; //@line 1374 "xmltok_impl.c"
        __label__ = 4; break; //@line 1374 "xmltok_impl.c"
      case 4: // $bb3
        var $30=HEAP[$iftmp_1182]; //@line 1374 "xmltok_impl.c"
        if ($30 == 9) {
          __label__ = 5; break;
        }
        else if ($30 == 10) {
          __label__ = 5; break;
        }
        else if ($30 == 13) {
          __label__ = 5; break;
        }
        else if ($30 == 14) {
          __label__ = 5; break;
        }
        else if ($30 == 15) {
          __label__ = 5; break;
        }
        else if ($30 == 16) {
          __label__ = 5; break;
        }
        else if ($30 == 17) {
          __label__ = 5; break;
        }
        else if ($30 == 18) {
          __label__ = 5; break;
        }
        else if ($30 == 19) {
          __label__ = 5; break;
        }
        else if ($30 == 21) {
          __label__ = 6; break;
        }
        else if ($30 == 22) {
          __label__ = 10; break;
        }
        else if ($30 == 24) {
          __label__ = 5; break;
        }
        else if ($30 == 25) {
          __label__ = 5; break;
        }
        else if ($30 == 26) {
          __label__ = 10; break;
        }
        else if ($30 == 27) {
          __label__ = 5; break;
        }
        else if ($30 == 30) {
          __label__ = 5; break;
        }
        else if ($30 == 31) {
          __label__ = 5; break;
        }
        else if ($30 == 32) {
          __label__ = 5; break;
        }
        else if ($30 == 33) {
          __label__ = 5; break;
        }
        else if ($30 == 34) {
          __label__ = 5; break;
        }
        else if ($30 == 35) {
          __label__ = 5; break;
        }
        else {
        __label__ = 12; break;
        }
        
      case 5: // $bb4
        __label__ = 18; break; //@line 1374 "xmltok_impl.c"
      case 6: // $bb5
        var $31=HEAP[$ptr_addr]; //@line 1398 "xmltok_impl.c"
        var $32=(($31)&4294967295); //@line 1398 "xmltok_impl.c"
        var $33=HEAP[$32]; //@line 1398 "xmltok_impl.c"
        var $34=reSign(($33), 8, 0)==0; //@line 1398 "xmltok_impl.c"
        if ($34) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 1398 "xmltok_impl.c"
      case 7: // $bb6
        var $35=HEAP[$ptr_addr]; //@line 1398 "xmltok_impl.c"
        var $36=(($35+1)&4294967295); //@line 1398 "xmltok_impl.c"
        var $37=HEAP[$36]; //@line 1398 "xmltok_impl.c"
        var $38=reSign(($37), 8, 0)==9; //@line 1398 "xmltok_impl.c"
        if ($38) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1398 "xmltok_impl.c"
      case 8: // $bb7
        var $39=HEAP[$badPtr_addr]; //@line 1399 "xmltok_impl.c"
        var $40=HEAP[$ptr_addr]; //@line 1399 "xmltok_impl.c"
        HEAP[$39]=$40; //@line 1399 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1400 "xmltok_impl.c"
        __label__ = 21; break; //@line 1400 "xmltok_impl.c"
      case 9: // $bb8
        __label__ = 18; break; //@line 1400 "xmltok_impl.c"
      case 10: // $bb9
        var $41=HEAP[$ptr_addr]; //@line 1405 "xmltok_impl.c"
        var $42=(($41)&4294967295); //@line 1405 "xmltok_impl.c"
        var $43=HEAP[$42]; //@line 1405 "xmltok_impl.c"
        var $44=reSign(($43), 8, 0)==0; //@line 1405 "xmltok_impl.c"
        if ($44) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1405 "xmltok_impl.c"
      case 11: // $bb10
        var $45=HEAP[$ptr_addr]; //@line 1405 "xmltok_impl.c"
        var $46=(($45+1)&4294967295); //@line 1405 "xmltok_impl.c"
        var $47=HEAP[$46]; //@line 1405 "xmltok_impl.c"
        var $48=reSign(($47), 8, 0); //@line 1405 "xmltok_impl.c"
        var $49=($48) & -128; //@line 1405 "xmltok_impl.c"
        var $50=((($49))|0)==0; //@line 1405 "xmltok_impl.c"
        if ($50) { __label__ = 18; break; } else { __label__ = 12; break; } //@line 1405 "xmltok_impl.c"
      case 12: // $bb11
        var $51=HEAP[$ptr_addr]; //@line 1408 "xmltok_impl.c"
        var $52=(($51)&4294967295); //@line 1408 "xmltok_impl.c"
        var $53=HEAP[$52]; //@line 1408 "xmltok_impl.c"
        var $54=reSign(($53), 8, 0)==0; //@line 1408 "xmltok_impl.c"
        if ($54) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1408 "xmltok_impl.c"
      case 13: // $bb12
        var $55=HEAP[$ptr_addr]; //@line 1408 "xmltok_impl.c"
        var $56=(($55+1)&4294967295); //@line 1408 "xmltok_impl.c"
        var $57=HEAP[$56]; //@line 1408 "xmltok_impl.c"
        var $58=reSign(($57), 8, 0); //@line 1408 "xmltok_impl.c"
        HEAP[$iftmp_1184]=$58; //@line 1408 "xmltok_impl.c"
        __label__ = 15; break; //@line 1408 "xmltok_impl.c"
      case 14: // $bb13
        HEAP[$iftmp_1184]=-1; //@line 1408 "xmltok_impl.c"
        __label__ = 15; break; //@line 1408 "xmltok_impl.c"
      case 15: // $bb14
        var $59=HEAP[$iftmp_1184]; //@line 1408 "xmltok_impl.c"
        if ($59 == 36) {
          __label__ = 16; break;
        }
        else if ($59 == 64) {
          __label__ = 16; break;
        }
        else {
        __label__ = 17; break;
        }
        
      case 16: // $bb15
        __label__ = 18; break; //@line 1408 "xmltok_impl.c"
      case 17: // $bb16
        var $60=HEAP[$badPtr_addr]; //@line 1413 "xmltok_impl.c"
        var $61=HEAP[$ptr_addr]; //@line 1413 "xmltok_impl.c"
        HEAP[$60]=$61; //@line 1413 "xmltok_impl.c"
        HEAP[$0]=0; //@line 1414 "xmltok_impl.c"
        __label__ = 21; break; //@line 1414 "xmltok_impl.c"
      case 18: // $bb17
        var $62=HEAP[$ptr_addr]; //@line 1373 "xmltok_impl.c"
        var $63=(($62+2)&4294967295); //@line 1373 "xmltok_impl.c"
        HEAP[$ptr_addr]=$63; //@line 1373 "xmltok_impl.c"
        __label__ = 19; break; //@line 1373 "xmltok_impl.c"
      case 19: // $bb18
        var $64=HEAP[$ptr_addr]; //@line 1373 "xmltok_impl.c"
        var $65=HEAP[$end_addr]; //@line 1373 "xmltok_impl.c"
        var $66=($64)!=($65); //@line 1373 "xmltok_impl.c"
        if ($66) { __label__ = 1; break; } else { __label__ = 20; break; } //@line 1373 "xmltok_impl.c"
      case 20: // $bb19
        HEAP[$0]=1; //@line 1419 "xmltok_impl.c"
        __label__ = 21; break; //@line 1419 "xmltok_impl.c"
      case 21: // $bb20
        var $67=HEAP[$0]; //@line 1400 "xmltok_impl.c"
        HEAP[$retval]=$67; //@line 1400 "xmltok_impl.c"
        __label__ = 22; break; //@line 1400 "xmltok_impl.c"
      case 22: // $return
        var $retval21=HEAP[$retval]; //@line 1400 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval21; //@line 1400 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_getAtts($enc, $ptr, $attsMax, $atts) {
    var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 44);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $attsMax_addr=__stackBase__+8;
        var $atts_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $iftmp_1187=__stackBase__+24;
        var $iftmp_1185=__stackBase__+28;
        var $state=__stackBase__+32;
        var $nAtts=__stackBase__+36;
        var $open=__stackBase__+40;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$attsMax_addr]=$attsMax;
        HEAP[$atts_addr]=$atts;
        HEAP[$state]=1; //@line 1431 "xmltok_impl.c"
        HEAP[$nAtts]=0; //@line 1432 "xmltok_impl.c"
        HEAP[$open]=0; //@line 1433 "xmltok_impl.c"
        var $1=HEAP[$ptr_addr]; //@line 1436 "xmltok_impl.c"
        var $2=(($1+2)&4294967295); //@line 1436 "xmltok_impl.c"
        HEAP[$ptr_addr]=$2; //@line 1436 "xmltok_impl.c"
        __label__ = 1; break; //@line 1436 "xmltok_impl.c"
      case 1: // $bb
        var $3=HEAP[$ptr_addr]; //@line 1437 "xmltok_impl.c"
        var $4=(($3)&4294967295); //@line 1437 "xmltok_impl.c"
        var $5=HEAP[$4]; //@line 1437 "xmltok_impl.c"
        var $6=reSign(($5), 8, 0)==0; //@line 1437 "xmltok_impl.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1437 "xmltok_impl.c"
      case 2: // $bb1
        var $7=HEAP[$enc_addr]; //@line 1437 "xmltok_impl.c"
        var $8=$7; //@line 1437 "xmltok_impl.c"
        var $9=HEAP[$ptr_addr]; //@line 1437 "xmltok_impl.c"
        var $10=(($9+1)&4294967295); //@line 1437 "xmltok_impl.c"
        var $11=HEAP[$10]; //@line 1437 "xmltok_impl.c"
        var $12=unSign(($11), 8, 0); //@line 1437 "xmltok_impl.c"
        var $13=(($8+72)&4294967295); //@line 1437 "xmltok_impl.c"
        var $14=(($13+$12)&4294967295); //@line 1437 "xmltok_impl.c"
        var $15=HEAP[$14]; //@line 1437 "xmltok_impl.c"
        var $16=unSign(($15), 8, 0); //@line 1437 "xmltok_impl.c"
        HEAP[$iftmp_1185]=$16; //@line 1437 "xmltok_impl.c"
        __label__ = 4; break; //@line 1437 "xmltok_impl.c"
      case 3: // $bb2
        var $17=HEAP[$ptr_addr]; //@line 1437 "xmltok_impl.c"
        var $18=(($17+1)&4294967295); //@line 1437 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 1437 "xmltok_impl.c"
        var $20=reSign(($19), 8, 0); //@line 1437 "xmltok_impl.c"
        var $21=HEAP[$ptr_addr]; //@line 1437 "xmltok_impl.c"
        var $22=(($21)&4294967295); //@line 1437 "xmltok_impl.c"
        var $23=HEAP[$22]; //@line 1437 "xmltok_impl.c"
        var $24=reSign(($23), 8, 0); //@line 1437 "xmltok_impl.c"
        var $25=((($24)) & 255); //@line 1437 "xmltok_impl.c"
        var $26=((($20)) & 255); //@line 1437 "xmltok_impl.c"
        var $27=_unicode_byte_type($25, $26); //@line 1437 "xmltok_impl.c"
        HEAP[$iftmp_1185]=$27; //@line 1437 "xmltok_impl.c"
        __label__ = 4; break; //@line 1437 "xmltok_impl.c"
      case 4: // $bb3
        var $28=HEAP[$iftmp_1185]; //@line 1437 "xmltok_impl.c"
        if ($28 == 3) {
          __label__ = 43; break;
        }
        else if ($28 == 5) {
          __label__ = 5; break;
        }
        else if ($28 == 6) {
          __label__ = 10; break;
        }
        else if ($28 == 7) {
          __label__ = 15; break;
        }
        else if ($28 == 9) {
          __label__ = 62; break;
        }
        else if ($28 == 10) {
          __label__ = 62; break;
        }
        else if ($28 == 11) {
          __label__ = 68; break;
        }
        else if ($28 == 12) {
          __label__ = 25; break;
        }
        else if ($28 == 13) {
          __label__ = 34; break;
        }
        else if ($28 == 17) {
          __label__ = 68; break;
        }
        else if ($28 == 21) {
          __label__ = 46; break;
        }
        else if ($28 == 22) {
          __label__ = 20; break;
        }
        else if ($28 == 24) {
          __label__ = 20; break;
        }
        else if ($28 == 29) {
          __label__ = 20; break;
        }
        else {
        __label__ = 70; break;
        }
        
      case 5: // $bb4
        var $29=HEAP[$state]; //@line 1448 "xmltok_impl.c"
        var $30=((($29))|0)==0; //@line 1448 "xmltok_impl.c"
        if ($30) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 1448 "xmltok_impl.c"
      case 6: // $bb5
        var $31=HEAP[$nAtts]; //@line 1448 "xmltok_impl.c"
        var $32=HEAP[$attsMax_addr]; //@line 1448 "xmltok_impl.c"
        var $33=((($31))|0) < ((($32))|0); //@line 1448 "xmltok_impl.c"
        if ($33) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1448 "xmltok_impl.c"
      case 7: // $bb6
        var $34=HEAP[$atts_addr]; //@line 1448 "xmltok_impl.c"
        var $35=HEAP[$nAtts]; //@line 1448 "xmltok_impl.c"
        var $36=(($34+16*$35)&4294967295); //@line 1448 "xmltok_impl.c"
        var $37=(($36)&4294967295); //@line 1448 "xmltok_impl.c"
        var $38=HEAP[$ptr_addr]; //@line 1448 "xmltok_impl.c"
        HEAP[$37]=$38; //@line 1448 "xmltok_impl.c"
        var $39=HEAP[$atts_addr]; //@line 1448 "xmltok_impl.c"
        var $40=HEAP[$nAtts]; //@line 1448 "xmltok_impl.c"
        var $41=(($39+16*$40)&4294967295); //@line 1448 "xmltok_impl.c"
        var $42=(($41+12)&4294967295); //@line 1448 "xmltok_impl.c"
        HEAP[$42]=1; //@line 1448 "xmltok_impl.c"
        __label__ = 8; break; //@line 1448 "xmltok_impl.c"
      case 8: // $bb7
        HEAP[$state]=1; //@line 1448 "xmltok_impl.c"
        __label__ = 9; break; //@line 1448 "xmltok_impl.c"
      case 9: // $bb8
        var $43=HEAP[$ptr_addr]; //@line 1448 "xmltok_impl.c"
        var $44=(($43)&4294967295); //@line 1448 "xmltok_impl.c"
        HEAP[$ptr_addr]=$44; //@line 1448 "xmltok_impl.c"
        __label__ = 70; break; //@line 1448 "xmltok_impl.c"
      case 10: // $bb9
        var $45=HEAP[$state]; //@line 1448 "xmltok_impl.c"
        var $46=((($45))|0)==0; //@line 1448 "xmltok_impl.c"
        if ($46) { __label__ = 11; break; } else { __label__ = 14; break; } //@line 1448 "xmltok_impl.c"
      case 11: // $bb10
        var $47=HEAP[$nAtts]; //@line 1448 "xmltok_impl.c"
        var $48=HEAP[$attsMax_addr]; //@line 1448 "xmltok_impl.c"
        var $49=((($47))|0) < ((($48))|0); //@line 1448 "xmltok_impl.c"
        if ($49) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1448 "xmltok_impl.c"
      case 12: // $bb11
        var $50=HEAP[$atts_addr]; //@line 1448 "xmltok_impl.c"
        var $51=HEAP[$nAtts]; //@line 1448 "xmltok_impl.c"
        var $52=(($50+16*$51)&4294967295); //@line 1448 "xmltok_impl.c"
        var $53=(($52)&4294967295); //@line 1448 "xmltok_impl.c"
        var $54=HEAP[$ptr_addr]; //@line 1448 "xmltok_impl.c"
        HEAP[$53]=$54; //@line 1448 "xmltok_impl.c"
        var $55=HEAP[$atts_addr]; //@line 1448 "xmltok_impl.c"
        var $56=HEAP[$nAtts]; //@line 1448 "xmltok_impl.c"
        var $57=(($55+16*$56)&4294967295); //@line 1448 "xmltok_impl.c"
        var $58=(($57+12)&4294967295); //@line 1448 "xmltok_impl.c"
        HEAP[$58]=1; //@line 1448 "xmltok_impl.c"
        __label__ = 13; break; //@line 1448 "xmltok_impl.c"
      case 13: // $bb12
        HEAP[$state]=1; //@line 1448 "xmltok_impl.c"
        __label__ = 14; break; //@line 1448 "xmltok_impl.c"
      case 14: // $bb13
        var $59=HEAP[$ptr_addr]; //@line 1448 "xmltok_impl.c"
        var $60=(($59+1)&4294967295); //@line 1448 "xmltok_impl.c"
        HEAP[$ptr_addr]=$60; //@line 1448 "xmltok_impl.c"
        __label__ = 70; break; //@line 1448 "xmltok_impl.c"
      case 15: // $bb14
        var $61=HEAP[$state]; //@line 1448 "xmltok_impl.c"
        var $62=((($61))|0)==0; //@line 1448 "xmltok_impl.c"
        if ($62) { __label__ = 16; break; } else { __label__ = 19; break; } //@line 1448 "xmltok_impl.c"
      case 16: // $bb15
        var $63=HEAP[$nAtts]; //@line 1448 "xmltok_impl.c"
        var $64=HEAP[$attsMax_addr]; //@line 1448 "xmltok_impl.c"
        var $65=((($63))|0) < ((($64))|0); //@line 1448 "xmltok_impl.c"
        if ($65) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 1448 "xmltok_impl.c"
      case 17: // $bb16
        var $66=HEAP[$atts_addr]; //@line 1448 "xmltok_impl.c"
        var $67=HEAP[$nAtts]; //@line 1448 "xmltok_impl.c"
        var $68=(($66+16*$67)&4294967295); //@line 1448 "xmltok_impl.c"
        var $69=(($68)&4294967295); //@line 1448 "xmltok_impl.c"
        var $70=HEAP[$ptr_addr]; //@line 1448 "xmltok_impl.c"
        HEAP[$69]=$70; //@line 1448 "xmltok_impl.c"
        var $71=HEAP[$atts_addr]; //@line 1448 "xmltok_impl.c"
        var $72=HEAP[$nAtts]; //@line 1448 "xmltok_impl.c"
        var $73=(($71+16*$72)&4294967295); //@line 1448 "xmltok_impl.c"
        var $74=(($73+12)&4294967295); //@line 1448 "xmltok_impl.c"
        HEAP[$74]=1; //@line 1448 "xmltok_impl.c"
        __label__ = 18; break; //@line 1448 "xmltok_impl.c"
      case 18: // $bb17
        HEAP[$state]=1; //@line 1448 "xmltok_impl.c"
        __label__ = 19; break; //@line 1448 "xmltok_impl.c"
      case 19: // $bb18
        var $75=HEAP[$ptr_addr]; //@line 1448 "xmltok_impl.c"
        var $76=(($75+2)&4294967295); //@line 1448 "xmltok_impl.c"
        HEAP[$ptr_addr]=$76; //@line 1448 "xmltok_impl.c"
        __label__ = 70; break; //@line 1448 "xmltok_impl.c"
      case 20: // $bb19
        var $77=HEAP[$state]; //@line 1453 "xmltok_impl.c"
        var $78=((($77))|0)==0; //@line 1453 "xmltok_impl.c"
        if ($78) { __label__ = 21; break; } else { __label__ = 24; break; } //@line 1453 "xmltok_impl.c"
      case 21: // $bb20
        var $79=HEAP[$nAtts]; //@line 1453 "xmltok_impl.c"
        var $80=HEAP[$attsMax_addr]; //@line 1453 "xmltok_impl.c"
        var $81=((($79))|0) < ((($80))|0); //@line 1453 "xmltok_impl.c"
        if ($81) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 1453 "xmltok_impl.c"
      case 22: // $bb21
        var $82=HEAP[$atts_addr]; //@line 1453 "xmltok_impl.c"
        var $83=HEAP[$nAtts]; //@line 1453 "xmltok_impl.c"
        var $84=(($82+16*$83)&4294967295); //@line 1453 "xmltok_impl.c"
        var $85=(($84)&4294967295); //@line 1453 "xmltok_impl.c"
        var $86=HEAP[$ptr_addr]; //@line 1453 "xmltok_impl.c"
        HEAP[$85]=$86; //@line 1453 "xmltok_impl.c"
        var $87=HEAP[$atts_addr]; //@line 1453 "xmltok_impl.c"
        var $88=HEAP[$nAtts]; //@line 1453 "xmltok_impl.c"
        var $89=(($87+16*$88)&4294967295); //@line 1453 "xmltok_impl.c"
        var $90=(($89+12)&4294967295); //@line 1453 "xmltok_impl.c"
        HEAP[$90]=1; //@line 1453 "xmltok_impl.c"
        __label__ = 23; break; //@line 1453 "xmltok_impl.c"
      case 23: // $bb22
        HEAP[$state]=1; //@line 1453 "xmltok_impl.c"
        __label__ = 24; break; //@line 1453 "xmltok_impl.c"
      case 24: // $bb23
        __label__ = 70; break; //@line 1453 "xmltok_impl.c"
      case 25: // $bb24
        var $91=HEAP[$state]; //@line 1457 "xmltok_impl.c"
        var $92=((($91))|0)!=2; //@line 1457 "xmltok_impl.c"
        if ($92) { __label__ = 26; break; } else { __label__ = 29; break; } //@line 1457 "xmltok_impl.c"
      case 26: // $bb25
        var $93=HEAP[$nAtts]; //@line 1458 "xmltok_impl.c"
        var $94=HEAP[$attsMax_addr]; //@line 1458 "xmltok_impl.c"
        var $95=((($93))|0) < ((($94))|0); //@line 1458 "xmltok_impl.c"
        if ($95) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 1458 "xmltok_impl.c"
      case 27: // $bb26
        var $96=HEAP[$atts_addr]; //@line 1459 "xmltok_impl.c"
        var $97=HEAP[$nAtts]; //@line 1459 "xmltok_impl.c"
        var $98=(($96+16*$97)&4294967295); //@line 1459 "xmltok_impl.c"
        var $99=HEAP[$ptr_addr]; //@line 1459 "xmltok_impl.c"
        var $100=(($99+2)&4294967295); //@line 1459 "xmltok_impl.c"
        var $101=(($98+4)&4294967295); //@line 1459 "xmltok_impl.c"
        HEAP[$101]=$100; //@line 1459 "xmltok_impl.c"
        __label__ = 28; break; //@line 1459 "xmltok_impl.c"
      case 28: // $bb27
        HEAP[$state]=2; //@line 1460 "xmltok_impl.c"
        HEAP[$open]=12; //@line 1461 "xmltok_impl.c"
        __label__ = 33; break; //@line 1461 "xmltok_impl.c"
      case 29: // $bb28
        var $102=HEAP[$open]; //@line 1463 "xmltok_impl.c"
        var $103=((($102))|0)==12; //@line 1463 "xmltok_impl.c"
        if ($103) { __label__ = 30; break; } else { __label__ = 33; break; } //@line 1463 "xmltok_impl.c"
      case 30: // $bb29
        HEAP[$state]=0; //@line 1464 "xmltok_impl.c"
        var $104=HEAP[$nAtts]; //@line 1465 "xmltok_impl.c"
        var $105=HEAP[$attsMax_addr]; //@line 1465 "xmltok_impl.c"
        var $106=((($104))|0) < ((($105))|0); //@line 1465 "xmltok_impl.c"
        if ($106) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 1465 "xmltok_impl.c"
      case 31: // $bb30
        var $107=HEAP[$atts_addr]; //@line 1466 "xmltok_impl.c"
        var $108=HEAP[$nAtts]; //@line 1466 "xmltok_impl.c"
        var $109=(($107+16*$108)&4294967295); //@line 1466 "xmltok_impl.c"
        var $110=(($109+8)&4294967295); //@line 1466 "xmltok_impl.c"
        var $111=HEAP[$ptr_addr]; //@line 1466 "xmltok_impl.c"
        HEAP[$110]=$111; //@line 1466 "xmltok_impl.c"
        __label__ = 32; break; //@line 1466 "xmltok_impl.c"
      case 32: // $bb31
        var $112=HEAP[$nAtts]; //@line 1467 "xmltok_impl.c"
        var $113=((($112) + 1)&4294967295); //@line 1467 "xmltok_impl.c"
        HEAP[$nAtts]=$113; //@line 1467 "xmltok_impl.c"
        __label__ = 33; break; //@line 1467 "xmltok_impl.c"
      case 33: // $bb32
        __label__ = 70; break; //@line 1467 "xmltok_impl.c"
      case 34: // $bb33
        var $114=HEAP[$state]; //@line 1471 "xmltok_impl.c"
        var $115=((($114))|0)!=2; //@line 1471 "xmltok_impl.c"
        if ($115) { __label__ = 35; break; } else { __label__ = 38; break; } //@line 1471 "xmltok_impl.c"
      case 35: // $bb34
        var $116=HEAP[$nAtts]; //@line 1472 "xmltok_impl.c"
        var $117=HEAP[$attsMax_addr]; //@line 1472 "xmltok_impl.c"
        var $118=((($116))|0) < ((($117))|0); //@line 1472 "xmltok_impl.c"
        if ($118) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 1472 "xmltok_impl.c"
      case 36: // $bb35
        var $119=HEAP[$atts_addr]; //@line 1473 "xmltok_impl.c"
        var $120=HEAP[$nAtts]; //@line 1473 "xmltok_impl.c"
        var $121=(($119+16*$120)&4294967295); //@line 1473 "xmltok_impl.c"
        var $122=HEAP[$ptr_addr]; //@line 1473 "xmltok_impl.c"
        var $123=(($122+2)&4294967295); //@line 1473 "xmltok_impl.c"
        var $124=(($121+4)&4294967295); //@line 1473 "xmltok_impl.c"
        HEAP[$124]=$123; //@line 1473 "xmltok_impl.c"
        __label__ = 37; break; //@line 1473 "xmltok_impl.c"
      case 37: // $bb36
        HEAP[$state]=2; //@line 1474 "xmltok_impl.c"
        HEAP[$open]=13; //@line 1475 "xmltok_impl.c"
        __label__ = 42; break; //@line 1475 "xmltok_impl.c"
      case 38: // $bb37
        var $125=HEAP[$open]; //@line 1477 "xmltok_impl.c"
        var $126=((($125))|0)==13; //@line 1477 "xmltok_impl.c"
        if ($126) { __label__ = 39; break; } else { __label__ = 42; break; } //@line 1477 "xmltok_impl.c"
      case 39: // $bb38
        HEAP[$state]=0; //@line 1478 "xmltok_impl.c"
        var $127=HEAP[$nAtts]; //@line 1479 "xmltok_impl.c"
        var $128=HEAP[$attsMax_addr]; //@line 1479 "xmltok_impl.c"
        var $129=((($127))|0) < ((($128))|0); //@line 1479 "xmltok_impl.c"
        if ($129) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 1479 "xmltok_impl.c"
      case 40: // $bb39
        var $130=HEAP[$atts_addr]; //@line 1480 "xmltok_impl.c"
        var $131=HEAP[$nAtts]; //@line 1480 "xmltok_impl.c"
        var $132=(($130+16*$131)&4294967295); //@line 1480 "xmltok_impl.c"
        var $133=(($132+8)&4294967295); //@line 1480 "xmltok_impl.c"
        var $134=HEAP[$ptr_addr]; //@line 1480 "xmltok_impl.c"
        HEAP[$133]=$134; //@line 1480 "xmltok_impl.c"
        __label__ = 41; break; //@line 1480 "xmltok_impl.c"
      case 41: // $bb40
        var $135=HEAP[$nAtts]; //@line 1481 "xmltok_impl.c"
        var $136=((($135) + 1)&4294967295); //@line 1481 "xmltok_impl.c"
        HEAP[$nAtts]=$136; //@line 1481 "xmltok_impl.c"
        __label__ = 42; break; //@line 1481 "xmltok_impl.c"
      case 42: // $bb41
        __label__ = 70; break; //@line 1481 "xmltok_impl.c"
      case 43: // $bb42
        var $137=HEAP[$nAtts]; //@line 1485 "xmltok_impl.c"
        var $138=HEAP[$attsMax_addr]; //@line 1485 "xmltok_impl.c"
        var $139=((($137))|0) < ((($138))|0); //@line 1485 "xmltok_impl.c"
        if ($139) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 1485 "xmltok_impl.c"
      case 44: // $bb43
        var $140=HEAP[$atts_addr]; //@line 1486 "xmltok_impl.c"
        var $141=HEAP[$nAtts]; //@line 1486 "xmltok_impl.c"
        var $142=(($140+16*$141)&4294967295); //@line 1486 "xmltok_impl.c"
        var $143=(($142+12)&4294967295); //@line 1486 "xmltok_impl.c"
        HEAP[$143]=0; //@line 1486 "xmltok_impl.c"
        __label__ = 45; break; //@line 1486 "xmltok_impl.c"
      case 45: // $bb44
        __label__ = 70; break; //@line 1486 "xmltok_impl.c"
      case 46: // $bb45
        var $144=HEAP[$state]; //@line 1489 "xmltok_impl.c"
        var $145=((($144))|0)==1; //@line 1489 "xmltok_impl.c"
        if ($145) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 1489 "xmltok_impl.c"
      case 47: // $bb46
        HEAP[$state]=0; //@line 1490 "xmltok_impl.c"
        __label__ = 61; break; //@line 1490 "xmltok_impl.c"
      case 48: // $bb47
        var $146=HEAP[$state]; //@line 1491 "xmltok_impl.c"
        var $147=((($146))|0)==2; //@line 1491 "xmltok_impl.c"
        if ($147) { __label__ = 49; break; } else { __label__ = 61; break; } //@line 1491 "xmltok_impl.c"
      case 49: // $bb48
        var $148=HEAP[$nAtts]; //@line 1491 "xmltok_impl.c"
        var $149=HEAP[$attsMax_addr]; //@line 1491 "xmltok_impl.c"
        var $150=((($148))|0) < ((($149))|0); //@line 1491 "xmltok_impl.c"
        if ($150) { __label__ = 50; break; } else { __label__ = 61; break; } //@line 1491 "xmltok_impl.c"
      case 50: // $bb49
        var $151=HEAP[$atts_addr]; //@line 1491 "xmltok_impl.c"
        var $152=HEAP[$nAtts]; //@line 1491 "xmltok_impl.c"
        var $153=(($151+16*$152)&4294967295); //@line 1491 "xmltok_impl.c"
        var $154=(($153+12)&4294967295); //@line 1491 "xmltok_impl.c"
        var $155=HEAP[$154]; //@line 1491 "xmltok_impl.c"
        var $156=reSign(($155), 8, 0)!=0; //@line 1491 "xmltok_impl.c"
        if ($156) { __label__ = 51; break; } else { __label__ = 61; break; } //@line 1491 "xmltok_impl.c"
      case 51: // $bb50
        var $157=HEAP[$atts_addr]; //@line 1491 "xmltok_impl.c"
        var $158=HEAP[$nAtts]; //@line 1491 "xmltok_impl.c"
        var $159=(($157+16*$158)&4294967295); //@line 1491 "xmltok_impl.c"
        var $160=(($159+4)&4294967295); //@line 1491 "xmltok_impl.c"
        var $161=HEAP[$160]; //@line 1491 "xmltok_impl.c"
        var $162=HEAP[$ptr_addr]; //@line 1491 "xmltok_impl.c"
        var $163=($161)==($162); //@line 1491 "xmltok_impl.c"
        if ($163) { __label__ = 60; break; } else { __label__ = 52; break; } //@line 1491 "xmltok_impl.c"
      case 52: // $bb51
        var $164=HEAP[$ptr_addr]; //@line 1491 "xmltok_impl.c"
        var $165=(($164)&4294967295); //@line 1491 "xmltok_impl.c"
        var $166=HEAP[$165]; //@line 1491 "xmltok_impl.c"
        var $167=reSign(($166), 8, 0)!=0; //@line 1491 "xmltok_impl.c"
        if ($167) { __label__ = 60; break; } else { __label__ = 53; break; } //@line 1491 "xmltok_impl.c"
      case 53: // $bb52
        var $168=HEAP[$ptr_addr]; //@line 1491 "xmltok_impl.c"
        var $169=(($168+1)&4294967295); //@line 1491 "xmltok_impl.c"
        var $170=HEAP[$169]; //@line 1491 "xmltok_impl.c"
        var $171=reSign(($170), 8, 0)!=32; //@line 1491 "xmltok_impl.c"
        if ($171) { __label__ = 60; break; } else { __label__ = 54; break; } //@line 1491 "xmltok_impl.c"
      case 54: // $bb53
        var $172=HEAP[$ptr_addr]; //@line 1491 "xmltok_impl.c"
        var $173=(($172+2)&4294967295); //@line 1491 "xmltok_impl.c"
        var $174=(($173)&4294967295); //@line 1491 "xmltok_impl.c"
        var $175=HEAP[$174]; //@line 1491 "xmltok_impl.c"
        var $176=reSign(($175), 8, 0)!=0; //@line 1491 "xmltok_impl.c"
        if ($176) { __label__ = 56; break; } else { __label__ = 55; break; } //@line 1491 "xmltok_impl.c"
      case 55: // $bb54
        var $177=HEAP[$ptr_addr]; //@line 1491 "xmltok_impl.c"
        var $178=(($177+2)&4294967295); //@line 1491 "xmltok_impl.c"
        var $179=(($178+1)&4294967295); //@line 1491 "xmltok_impl.c"
        var $180=HEAP[$179]; //@line 1491 "xmltok_impl.c"
        var $181=reSign(($180), 8, 0)==32; //@line 1491 "xmltok_impl.c"
        if ($181) { __label__ = 60; break; } else { __label__ = 56; break; } //@line 1491 "xmltok_impl.c"
      case 56: // $bb55
        var $182=HEAP[$ptr_addr]; //@line 1491 "xmltok_impl.c"
        var $183=(($182+2)&4294967295); //@line 1491 "xmltok_impl.c"
        var $184=(($183)&4294967295); //@line 1491 "xmltok_impl.c"
        var $185=HEAP[$184]; //@line 1491 "xmltok_impl.c"
        var $186=reSign(($185), 8, 0)==0; //@line 1491 "xmltok_impl.c"
        if ($186) { __label__ = 57; break; } else { __label__ = 58; break; } //@line 1491 "xmltok_impl.c"
      case 57: // $bb56
        var $187=HEAP[$enc_addr]; //@line 1491 "xmltok_impl.c"
        var $188=$187; //@line 1491 "xmltok_impl.c"
        var $189=HEAP[$ptr_addr]; //@line 1491 "xmltok_impl.c"
        var $190=(($189+2)&4294967295); //@line 1491 "xmltok_impl.c"
        var $191=(($190+1)&4294967295); //@line 1491 "xmltok_impl.c"
        var $192=HEAP[$191]; //@line 1491 "xmltok_impl.c"
        var $193=unSign(($192), 8, 0); //@line 1491 "xmltok_impl.c"
        var $194=(($188+72)&4294967295); //@line 1491 "xmltok_impl.c"
        var $195=(($194+$193)&4294967295); //@line 1491 "xmltok_impl.c"
        var $196=HEAP[$195]; //@line 1491 "xmltok_impl.c"
        var $197=unSign(($196), 8, 0); //@line 1491 "xmltok_impl.c"
        HEAP[$iftmp_1187]=$197; //@line 1491 "xmltok_impl.c"
        __label__ = 59; break; //@line 1491 "xmltok_impl.c"
      case 58: // $bb57
        var $198=HEAP[$ptr_addr]; //@line 1491 "xmltok_impl.c"
        var $199=(($198+2)&4294967295); //@line 1491 "xmltok_impl.c"
        var $200=(($199+1)&4294967295); //@line 1491 "xmltok_impl.c"
        var $201=HEAP[$200]; //@line 1491 "xmltok_impl.c"
        var $202=reSign(($201), 8, 0); //@line 1491 "xmltok_impl.c"
        var $203=HEAP[$ptr_addr]; //@line 1491 "xmltok_impl.c"
        var $204=(($203+2)&4294967295); //@line 1491 "xmltok_impl.c"
        var $205=(($204)&4294967295); //@line 1491 "xmltok_impl.c"
        var $206=HEAP[$205]; //@line 1491 "xmltok_impl.c"
        var $207=reSign(($206), 8, 0); //@line 1491 "xmltok_impl.c"
        var $208=((($207)) & 255); //@line 1491 "xmltok_impl.c"
        var $209=((($202)) & 255); //@line 1491 "xmltok_impl.c"
        var $210=_unicode_byte_type($208, $209); //@line 1491 "xmltok_impl.c"
        HEAP[$iftmp_1187]=$210; //@line 1491 "xmltok_impl.c"
        __label__ = 59; break; //@line 1491 "xmltok_impl.c"
      case 59: // $bb58
        var $211=HEAP[$iftmp_1187]; //@line 1491 "xmltok_impl.c"
        var $212=HEAP[$open]; //@line 1491 "xmltok_impl.c"
        var $213=((($211))|0)==((($212))|0); //@line 1491 "xmltok_impl.c"
        if ($213) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 1491 "xmltok_impl.c"
      case 60: // $bb59
        var $214=HEAP[$atts_addr]; //@line 1498 "xmltok_impl.c"
        var $215=HEAP[$nAtts]; //@line 1498 "xmltok_impl.c"
        var $216=(($214+16*$215)&4294967295); //@line 1498 "xmltok_impl.c"
        var $217=(($216+12)&4294967295); //@line 1498 "xmltok_impl.c"
        HEAP[$217]=0; //@line 1498 "xmltok_impl.c"
        __label__ = 61; break; //@line 1498 "xmltok_impl.c"
      case 61: // $bb60
        __label__ = 70; break; //@line 1498 "xmltok_impl.c"
      case 62: // $bb61
        var $218=HEAP[$state]; //@line 1503 "xmltok_impl.c"
        var $219=((($218))|0)==1; //@line 1503 "xmltok_impl.c"
        if ($219) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 1503 "xmltok_impl.c"
      case 63: // $bb62
        HEAP[$state]=0; //@line 1504 "xmltok_impl.c"
        __label__ = 67; break; //@line 1504 "xmltok_impl.c"
      case 64: // $bb63
        var $220=HEAP[$state]; //@line 1505 "xmltok_impl.c"
        var $221=((($220))|0)==2; //@line 1505 "xmltok_impl.c"
        if ($221) { __label__ = 65; break; } else { __label__ = 67; break; } //@line 1505 "xmltok_impl.c"
      case 65: // $bb64
        var $222=HEAP[$nAtts]; //@line 1505 "xmltok_impl.c"
        var $223=HEAP[$attsMax_addr]; //@line 1505 "xmltok_impl.c"
        var $224=((($222))|0) < ((($223))|0); //@line 1505 "xmltok_impl.c"
        if ($224) { __label__ = 66; break; } else { __label__ = 67; break; } //@line 1505 "xmltok_impl.c"
      case 66: // $bb65
        var $225=HEAP[$atts_addr]; //@line 1506 "xmltok_impl.c"
        var $226=HEAP[$nAtts]; //@line 1506 "xmltok_impl.c"
        var $227=(($225+16*$226)&4294967295); //@line 1506 "xmltok_impl.c"
        var $228=(($227+12)&4294967295); //@line 1506 "xmltok_impl.c"
        HEAP[$228]=0; //@line 1506 "xmltok_impl.c"
        __label__ = 67; break; //@line 1506 "xmltok_impl.c"
      case 67: // $bb66
        __label__ = 70; break; //@line 1506 "xmltok_impl.c"
      case 68: // $bb67
        var $229=HEAP[$state]; //@line 1510 "xmltok_impl.c"
        var $230=((($229))|0)!=2; //@line 1510 "xmltok_impl.c"
        if ($230) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 1510 "xmltok_impl.c"
      case 69: // $bb68
        var $231=HEAP[$nAtts]; //@line 1511 "xmltok_impl.c"
        HEAP[$0]=$231; //@line 1511 "xmltok_impl.c"
        var $232=HEAP[$0]; //@line 1511 "xmltok_impl.c"
        HEAP[$retval]=$232; //@line 1511 "xmltok_impl.c"
        __label__ = 71; break; //@line 1511 "xmltok_impl.c"
      case 70: // $bb69
        var $233=HEAP[$ptr_addr]; //@line 1436 "xmltok_impl.c"
        var $234=(($233+2)&4294967295); //@line 1436 "xmltok_impl.c"
        HEAP[$ptr_addr]=$234; //@line 1436 "xmltok_impl.c"
        __label__ = 1; break; //@line 1436 "xmltok_impl.c"
      case 71: // $return
        var $retval70=HEAP[$retval]; //@line 1436 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval70; //@line 1436 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_charRefNumber($enc, $ptr) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $iftmp_1190=__stackBase__+12;
        var $0=__stackBase__+16;
        var $iftmp_1189=__stackBase__+20;
        var $result=__stackBase__+24;
        var $c=__stackBase__+28;
        var $c17=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$result]=0; //@line 1523 "xmltok_impl.c"
        var $1=HEAP[$ptr_addr]; //@line 1525 "xmltok_impl.c"
        var $2=(($1+4)&4294967295); //@line 1525 "xmltok_impl.c"
        HEAP[$ptr_addr]=$2; //@line 1525 "xmltok_impl.c"
        var $3=HEAP[$ptr_addr]; //@line 1526 "xmltok_impl.c"
        var $4=(($3)&4294967295); //@line 1526 "xmltok_impl.c"
        var $5=HEAP[$4]; //@line 1526 "xmltok_impl.c"
        var $6=reSign(($5), 8, 0)!=0; //@line 1526 "xmltok_impl.c"
        if ($6) { __label__ = 16; break; } else { __label__ = 1; break; } //@line 1526 "xmltok_impl.c"
      case 1: // $bb
        var $7=HEAP[$ptr_addr]; //@line 1526 "xmltok_impl.c"
        var $8=(($7+1)&4294967295); //@line 1526 "xmltok_impl.c"
        var $9=HEAP[$8]; //@line 1526 "xmltok_impl.c"
        var $10=reSign(($9), 8, 0)!=120; //@line 1526 "xmltok_impl.c"
        if ($10) { __label__ = 16; break; } else { __label__ = 2; break; } //@line 1526 "xmltok_impl.c"
      case 2: // $bb1
        var $11=HEAP[$ptr_addr]; //@line 1527 "xmltok_impl.c"
        var $12=(($11+2)&4294967295); //@line 1527 "xmltok_impl.c"
        HEAP[$ptr_addr]=$12; //@line 1527 "xmltok_impl.c"
        __label__ = 13; break; //@line 1527 "xmltok_impl.c"
      case 3: // $bb2
        var $13=HEAP[$ptr_addr]; //@line 1530 "xmltok_impl.c"
        var $14=(($13)&4294967295); //@line 1530 "xmltok_impl.c"
        var $15=HEAP[$14]; //@line 1530 "xmltok_impl.c"
        var $16=reSign(($15), 8, 0)==0; //@line 1530 "xmltok_impl.c"
        if ($16) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1530 "xmltok_impl.c"
      case 4: // $bb3
        var $17=HEAP[$ptr_addr]; //@line 1530 "xmltok_impl.c"
        var $18=(($17+1)&4294967295); //@line 1530 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 1530 "xmltok_impl.c"
        var $20=reSign(($19), 8, 0); //@line 1530 "xmltok_impl.c"
        HEAP[$iftmp_1189]=$20; //@line 1530 "xmltok_impl.c"
        __label__ = 6; break; //@line 1530 "xmltok_impl.c"
      case 5: // $bb4
        HEAP[$iftmp_1189]=-1; //@line 1530 "xmltok_impl.c"
        __label__ = 6; break; //@line 1530 "xmltok_impl.c"
      case 6: // $bb5
        var $21=HEAP[$iftmp_1189]; //@line 1530 "xmltok_impl.c"
        HEAP[$c]=$21; //@line 1530 "xmltok_impl.c"
        var $22=HEAP[$c]; //@line 1531 "xmltok_impl.c"
        if ($22 == 48) {
          __label__ = 7; break;
        }
        else if ($22 == 49) {
          __label__ = 7; break;
        }
        else if ($22 == 50) {
          __label__ = 7; break;
        }
        else if ($22 == 51) {
          __label__ = 7; break;
        }
        else if ($22 == 52) {
          __label__ = 7; break;
        }
        else if ($22 == 53) {
          __label__ = 7; break;
        }
        else if ($22 == 54) {
          __label__ = 7; break;
        }
        else if ($22 == 55) {
          __label__ = 7; break;
        }
        else if ($22 == 56) {
          __label__ = 7; break;
        }
        else if ($22 == 57) {
          __label__ = 7; break;
        }
        else if ($22 == 65) {
          __label__ = 8; break;
        }
        else if ($22 == 66) {
          __label__ = 8; break;
        }
        else if ($22 == 67) {
          __label__ = 8; break;
        }
        else if ($22 == 68) {
          __label__ = 8; break;
        }
        else if ($22 == 69) {
          __label__ = 8; break;
        }
        else if ($22 == 70) {
          __label__ = 8; break;
        }
        else if ($22 == 97) {
          __label__ = 9; break;
        }
        else if ($22 == 98) {
          __label__ = 9; break;
        }
        else if ($22 == 99) {
          __label__ = 9; break;
        }
        else if ($22 == 100) {
          __label__ = 9; break;
        }
        else if ($22 == 101) {
          __label__ = 9; break;
        }
        else if ($22 == 102) {
          __label__ = 9; break;
        }
        else {
        __label__ = 10; break;
        }
        
      case 7: // $bb6
        var $23=HEAP[$result]; //@line 1534 "xmltok_impl.c"
        var $24=($23) << 4; //@line 1534 "xmltok_impl.c"
        HEAP[$result]=$24; //@line 1534 "xmltok_impl.c"
        var $25=HEAP[$c]; //@line 1535 "xmltok_impl.c"
        var $26=((($25) - 48)&4294967295); //@line 1535 "xmltok_impl.c"
        var $27=HEAP[$result]; //@line 1535 "xmltok_impl.c"
        var $28=($26) | ($27); //@line 1535 "xmltok_impl.c"
        HEAP[$result]=$28; //@line 1535 "xmltok_impl.c"
        __label__ = 10; break; //@line 1535 "xmltok_impl.c"
      case 8: // $bb7
        var $29=HEAP[$result]; //@line 1539 "xmltok_impl.c"
        var $30=($29) << 4; //@line 1539 "xmltok_impl.c"
        HEAP[$result]=$30; //@line 1539 "xmltok_impl.c"
        var $31=HEAP[$c]; //@line 1540 "xmltok_impl.c"
        var $32=((($31) - 55)&4294967295); //@line 1540 "xmltok_impl.c"
        var $33=HEAP[$result]; //@line 1540 "xmltok_impl.c"
        var $34=((($32) + ($33))&4294967295); //@line 1540 "xmltok_impl.c"
        HEAP[$result]=$34; //@line 1540 "xmltok_impl.c"
        __label__ = 10; break; //@line 1540 "xmltok_impl.c"
      case 9: // $bb8
        var $35=HEAP[$result]; //@line 1544 "xmltok_impl.c"
        var $36=($35) << 4; //@line 1544 "xmltok_impl.c"
        HEAP[$result]=$36; //@line 1544 "xmltok_impl.c"
        var $37=HEAP[$c]; //@line 1545 "xmltok_impl.c"
        var $38=((($37) - 87)&4294967295); //@line 1545 "xmltok_impl.c"
        var $39=HEAP[$result]; //@line 1545 "xmltok_impl.c"
        var $40=((($38) + ($39))&4294967295); //@line 1545 "xmltok_impl.c"
        HEAP[$result]=$40; //@line 1545 "xmltok_impl.c"
        __label__ = 10; break; //@line 1545 "xmltok_impl.c"
      case 10: // $bb9
        var $41=HEAP[$result]; //@line 1548 "xmltok_impl.c"
        var $42=((($41))|0) > 1114111; //@line 1548 "xmltok_impl.c"
        if ($42) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1548 "xmltok_impl.c"
      case 11: // $bb10
        HEAP[$0]=-1; //@line 1549 "xmltok_impl.c"
        __label__ = 26; break; //@line 1549 "xmltok_impl.c"
      case 12: // $bb11
        var $43=HEAP[$ptr_addr]; //@line 1529 "xmltok_impl.c"
        var $44=(($43+2)&4294967295); //@line 1529 "xmltok_impl.c"
        HEAP[$ptr_addr]=$44; //@line 1529 "xmltok_impl.c"
        __label__ = 13; break; //@line 1529 "xmltok_impl.c"
      case 13: // $bb12
        var $45=HEAP[$ptr_addr]; //@line 1528 "xmltok_impl.c"
        var $46=(($45)&4294967295); //@line 1528 "xmltok_impl.c"
        var $47=HEAP[$46]; //@line 1528 "xmltok_impl.c"
        var $48=reSign(($47), 8, 0)!=0; //@line 1528 "xmltok_impl.c"
        if ($48) { __label__ = 3; break; } else { __label__ = 14; break; } //@line 1528 "xmltok_impl.c"
      case 14: // $bb13
        var $49=HEAP[$ptr_addr]; //@line 1528 "xmltok_impl.c"
        var $50=(($49+1)&4294967295); //@line 1528 "xmltok_impl.c"
        var $51=HEAP[$50]; //@line 1528 "xmltok_impl.c"
        var $52=reSign(($51), 8, 0)!=59; //@line 1528 "xmltok_impl.c"
        if ($52) { __label__ = 3; break; } else { __label__ = 15; break; } //@line 1528 "xmltok_impl.c"
      case 15: // $bb14
        __label__ = 25; break; //@line 1528 "xmltok_impl.c"
      case 16: // $bb15
        __label__ = 23; break; //@line 1528 "xmltok_impl.c"
      case 17: // $bb16
        var $53=HEAP[$ptr_addr]; //@line 1554 "xmltok_impl.c"
        var $54=(($53)&4294967295); //@line 1554 "xmltok_impl.c"
        var $55=HEAP[$54]; //@line 1554 "xmltok_impl.c"
        var $56=reSign(($55), 8, 0)==0; //@line 1554 "xmltok_impl.c"
        if ($56) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 1554 "xmltok_impl.c"
      case 18: // $bb18
        var $57=HEAP[$ptr_addr]; //@line 1554 "xmltok_impl.c"
        var $58=(($57+1)&4294967295); //@line 1554 "xmltok_impl.c"
        var $59=HEAP[$58]; //@line 1554 "xmltok_impl.c"
        var $60=reSign(($59), 8, 0); //@line 1554 "xmltok_impl.c"
        HEAP[$iftmp_1190]=$60; //@line 1554 "xmltok_impl.c"
        __label__ = 20; break; //@line 1554 "xmltok_impl.c"
      case 19: // $bb19
        HEAP[$iftmp_1190]=-1; //@line 1554 "xmltok_impl.c"
        __label__ = 20; break; //@line 1554 "xmltok_impl.c"
      case 20: // $bb20
        var $61=HEAP[$iftmp_1190]; //@line 1554 "xmltok_impl.c"
        HEAP[$c17]=$61; //@line 1554 "xmltok_impl.c"
        var $62=HEAP[$result]; //@line 1555 "xmltok_impl.c"
        var $63=((($62) * 10)&4294967295); //@line 1555 "xmltok_impl.c"
        HEAP[$result]=$63; //@line 1555 "xmltok_impl.c"
        var $64=HEAP[$c17]; //@line 1556 "xmltok_impl.c"
        var $65=((($64) - 48)&4294967295); //@line 1556 "xmltok_impl.c"
        var $66=HEAP[$result]; //@line 1556 "xmltok_impl.c"
        var $67=((($65) + ($66))&4294967295); //@line 1556 "xmltok_impl.c"
        HEAP[$result]=$67; //@line 1556 "xmltok_impl.c"
        var $68=HEAP[$result]; //@line 1557 "xmltok_impl.c"
        var $69=((($68))|0) > 1114111; //@line 1557 "xmltok_impl.c"
        if ($69) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 1557 "xmltok_impl.c"
      case 21: // $bb21
        HEAP[$0]=-1; //@line 1558 "xmltok_impl.c"
        __label__ = 26; break; //@line 1558 "xmltok_impl.c"
      case 22: // $bb22
        var $70=HEAP[$ptr_addr]; //@line 1553 "xmltok_impl.c"
        var $71=(($70+2)&4294967295); //@line 1553 "xmltok_impl.c"
        HEAP[$ptr_addr]=$71; //@line 1553 "xmltok_impl.c"
        __label__ = 23; break; //@line 1553 "xmltok_impl.c"
      case 23: // $bb23
        var $72=HEAP[$ptr_addr]; //@line 1553 "xmltok_impl.c"
        var $73=(($72)&4294967295); //@line 1553 "xmltok_impl.c"
        var $74=HEAP[$73]; //@line 1553 "xmltok_impl.c"
        var $75=reSign(($74), 8, 0)!=0; //@line 1553 "xmltok_impl.c"
        if ($75) { __label__ = 17; break; } else { __label__ = 24; break; } //@line 1553 "xmltok_impl.c"
      case 24: // $bb24
        var $76=HEAP[$ptr_addr]; //@line 1553 "xmltok_impl.c"
        var $77=(($76+1)&4294967295); //@line 1553 "xmltok_impl.c"
        var $78=HEAP[$77]; //@line 1553 "xmltok_impl.c"
        var $79=reSign(($78), 8, 0)!=59; //@line 1553 "xmltok_impl.c"
        if ($79) { __label__ = 17; break; } else { __label__ = 25; break; } //@line 1553 "xmltok_impl.c"
      case 25: // $bb25
        var $80=HEAP[$result]; //@line 1561 "xmltok_impl.c"
        var $81=_checkCharRefNumber($80); //@line 1561 "xmltok_impl.c"
        HEAP[$0]=$81; //@line 1561 "xmltok_impl.c"
        __label__ = 26; break; //@line 1561 "xmltok_impl.c"
      case 26: // $bb26
        var $82=HEAP[$0]; //@line 1549 "xmltok_impl.c"
        HEAP[$retval]=$82; //@line 1549 "xmltok_impl.c"
        __label__ = 27; break; //@line 1549 "xmltok_impl.c"
      case 27: // $return
        var $retval27=HEAP[$retval]; //@line 1549 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval27; //@line 1549 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_predefinedEntityName($enc, $ptr, $end) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $iftmp_1194=__stackBase__+16;
        var $0=__stackBase__+20;
        var $iftmp_1193=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        var $1=HEAP[$end_addr]; //@line 1568 "xmltok_impl.c"
        var $2=($1); //@line 1568 "xmltok_impl.c"
        var $3=HEAP[$ptr_addr]; //@line 1568 "xmltok_impl.c"
        var $4=($3); //@line 1568 "xmltok_impl.c"
        var $5=((($2) - ($4))&4294967295); //@line 1568 "xmltok_impl.c"
        var $6=((((($5))|0)/2)|0); //@line 1568 "xmltok_impl.c"
        if ($6 == 2) {
          __label__ = 1; break;
        }
        else if ($6 == 3) {
          __label__ = 10; break;
        }
        else if ($6 == 4) {
          __label__ = 18; break;
        }
        else {
        __label__ = 37; break;
        }
        
      case 1: // $bb
        var $7=HEAP[$ptr_addr]; //@line 1570 "xmltok_impl.c"
        var $8=(($7+2)&4294967295); //@line 1570 "xmltok_impl.c"
        var $9=(($8)&4294967295); //@line 1570 "xmltok_impl.c"
        var $10=HEAP[$9]; //@line 1570 "xmltok_impl.c"
        var $11=reSign(($10), 8, 0)==0; //@line 1570 "xmltok_impl.c"
        if ($11) { __label__ = 2; break; } else { __label__ = 9; break; } //@line 1570 "xmltok_impl.c"
      case 2: // $bb1
        var $12=HEAP[$ptr_addr]; //@line 1570 "xmltok_impl.c"
        var $13=(($12+2)&4294967295); //@line 1570 "xmltok_impl.c"
        var $14=(($13+1)&4294967295); //@line 1570 "xmltok_impl.c"
        var $15=HEAP[$14]; //@line 1570 "xmltok_impl.c"
        var $16=reSign(($15), 8, 0)==116; //@line 1570 "xmltok_impl.c"
        if ($16) { __label__ = 3; break; } else { __label__ = 9; break; } //@line 1570 "xmltok_impl.c"
      case 3: // $bb2
        var $17=HEAP[$ptr_addr]; //@line 1571 "xmltok_impl.c"
        var $18=(($17)&4294967295); //@line 1571 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 1571 "xmltok_impl.c"
        var $20=reSign(($19), 8, 0)==0; //@line 1571 "xmltok_impl.c"
        if ($20) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1571 "xmltok_impl.c"
      case 4: // $bb3
        var $21=HEAP[$ptr_addr]; //@line 1571 "xmltok_impl.c"
        var $22=(($21+1)&4294967295); //@line 1571 "xmltok_impl.c"
        var $23=HEAP[$22]; //@line 1571 "xmltok_impl.c"
        var $24=reSign(($23), 8, 0); //@line 1571 "xmltok_impl.c"
        HEAP[$iftmp_1193]=$24; //@line 1571 "xmltok_impl.c"
        __label__ = 6; break; //@line 1571 "xmltok_impl.c"
      case 5: // $bb4
        HEAP[$iftmp_1193]=-1; //@line 1571 "xmltok_impl.c"
        __label__ = 6; break; //@line 1571 "xmltok_impl.c"
      case 6: // $bb5
        var $25=HEAP[$iftmp_1193]; //@line 1571 "xmltok_impl.c"
        if ($25 == 103) {
          __label__ = 8; break;
        }
        else if ($25 == 108) {
          __label__ = 7; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 7: // $bb6
        HEAP[$0]=60; //@line 1573 "xmltok_impl.c"
        __label__ = 38; break; //@line 1573 "xmltok_impl.c"
      case 8: // $bb7
        HEAP[$0]=62; //@line 1575 "xmltok_impl.c"
        __label__ = 38; break; //@line 1575 "xmltok_impl.c"
      case 9: // $bb8
        __label__ = 37; break; //@line 1575 "xmltok_impl.c"
      case 10: // $bb9
        var $26=HEAP[$ptr_addr]; //@line 1580 "xmltok_impl.c"
        var $27=(($26)&4294967295); //@line 1580 "xmltok_impl.c"
        var $28=HEAP[$27]; //@line 1580 "xmltok_impl.c"
        var $29=reSign(($28), 8, 0)==0; //@line 1580 "xmltok_impl.c"
        if ($29) { __label__ = 11; break; } else { __label__ = 17; break; } //@line 1580 "xmltok_impl.c"
      case 11: // $bb10
        var $30=HEAP[$ptr_addr]; //@line 1580 "xmltok_impl.c"
        var $31=(($30+1)&4294967295); //@line 1580 "xmltok_impl.c"
        var $32=HEAP[$31]; //@line 1580 "xmltok_impl.c"
        var $33=reSign(($32), 8, 0)==97; //@line 1580 "xmltok_impl.c"
        if ($33) { __label__ = 12; break; } else { __label__ = 17; break; } //@line 1580 "xmltok_impl.c"
      case 12: // $bb11
        var $34=HEAP[$ptr_addr]; //@line 1581 "xmltok_impl.c"
        var $35=(($34+2)&4294967295); //@line 1581 "xmltok_impl.c"
        HEAP[$ptr_addr]=$35; //@line 1581 "xmltok_impl.c"
        var $36=HEAP[$ptr_addr]; //@line 1582 "xmltok_impl.c"
        var $37=(($36)&4294967295); //@line 1582 "xmltok_impl.c"
        var $38=HEAP[$37]; //@line 1582 "xmltok_impl.c"
        var $39=reSign(($38), 8, 0)==0; //@line 1582 "xmltok_impl.c"
        if ($39) { __label__ = 13; break; } else { __label__ = 17; break; } //@line 1582 "xmltok_impl.c"
      case 13: // $bb12
        var $40=HEAP[$ptr_addr]; //@line 1582 "xmltok_impl.c"
        var $41=(($40+1)&4294967295); //@line 1582 "xmltok_impl.c"
        var $42=HEAP[$41]; //@line 1582 "xmltok_impl.c"
        var $43=reSign(($42), 8, 0)==109; //@line 1582 "xmltok_impl.c"
        if ($43) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 1582 "xmltok_impl.c"
      case 14: // $bb13
        var $44=HEAP[$ptr_addr]; //@line 1583 "xmltok_impl.c"
        var $45=(($44+2)&4294967295); //@line 1583 "xmltok_impl.c"
        HEAP[$ptr_addr]=$45; //@line 1583 "xmltok_impl.c"
        var $46=HEAP[$ptr_addr]; //@line 1584 "xmltok_impl.c"
        var $47=(($46)&4294967295); //@line 1584 "xmltok_impl.c"
        var $48=HEAP[$47]; //@line 1584 "xmltok_impl.c"
        var $49=reSign(($48), 8, 0)==0; //@line 1584 "xmltok_impl.c"
        if ($49) { __label__ = 15; break; } else { __label__ = 17; break; } //@line 1584 "xmltok_impl.c"
      case 15: // $bb14
        var $50=HEAP[$ptr_addr]; //@line 1584 "xmltok_impl.c"
        var $51=(($50+1)&4294967295); //@line 1584 "xmltok_impl.c"
        var $52=HEAP[$51]; //@line 1584 "xmltok_impl.c"
        var $53=reSign(($52), 8, 0)==112; //@line 1584 "xmltok_impl.c"
        if ($53) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 1584 "xmltok_impl.c"
      case 16: // $bb15
        HEAP[$0]=38; //@line 1585 "xmltok_impl.c"
        __label__ = 38; break; //@line 1585 "xmltok_impl.c"
      case 17: // $bb16
        __label__ = 37; break; //@line 1585 "xmltok_impl.c"
      case 18: // $bb17
        var $54=HEAP[$ptr_addr]; //@line 1590 "xmltok_impl.c"
        var $55=(($54)&4294967295); //@line 1590 "xmltok_impl.c"
        var $56=HEAP[$55]; //@line 1590 "xmltok_impl.c"
        var $57=reSign(($56), 8, 0)==0; //@line 1590 "xmltok_impl.c"
        if ($57) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 1590 "xmltok_impl.c"
      case 19: // $bb18
        var $58=HEAP[$ptr_addr]; //@line 1590 "xmltok_impl.c"
        var $59=(($58+1)&4294967295); //@line 1590 "xmltok_impl.c"
        var $60=HEAP[$59]; //@line 1590 "xmltok_impl.c"
        var $61=reSign(($60), 8, 0); //@line 1590 "xmltok_impl.c"
        HEAP[$iftmp_1194]=$61; //@line 1590 "xmltok_impl.c"
        __label__ = 21; break; //@line 1590 "xmltok_impl.c"
      case 20: // $bb19
        HEAP[$iftmp_1194]=-1; //@line 1590 "xmltok_impl.c"
        __label__ = 21; break; //@line 1590 "xmltok_impl.c"
      case 21: // $bb20
        var $62=HEAP[$iftmp_1194]; //@line 1590 "xmltok_impl.c"
        if ($62 == 97) {
          __label__ = 30; break;
        }
        else if ($62 == 113) {
          __label__ = 22; break;
        }
        else {
        __label__ = 37; break;
        }
        
      case 22: // $bb21
        var $63=HEAP[$ptr_addr]; //@line 1592 "xmltok_impl.c"
        var $64=(($63+2)&4294967295); //@line 1592 "xmltok_impl.c"
        HEAP[$ptr_addr]=$64; //@line 1592 "xmltok_impl.c"
        var $65=HEAP[$ptr_addr]; //@line 1593 "xmltok_impl.c"
        var $66=(($65)&4294967295); //@line 1593 "xmltok_impl.c"
        var $67=HEAP[$66]; //@line 1593 "xmltok_impl.c"
        var $68=reSign(($67), 8, 0)==0; //@line 1593 "xmltok_impl.c"
        if ($68) { __label__ = 23; break; } else { __label__ = 29; break; } //@line 1593 "xmltok_impl.c"
      case 23: // $bb22
        var $69=HEAP[$ptr_addr]; //@line 1593 "xmltok_impl.c"
        var $70=(($69+1)&4294967295); //@line 1593 "xmltok_impl.c"
        var $71=HEAP[$70]; //@line 1593 "xmltok_impl.c"
        var $72=reSign(($71), 8, 0)==117; //@line 1593 "xmltok_impl.c"
        if ($72) { __label__ = 24; break; } else { __label__ = 29; break; } //@line 1593 "xmltok_impl.c"
      case 24: // $bb23
        var $73=HEAP[$ptr_addr]; //@line 1594 "xmltok_impl.c"
        var $74=(($73+2)&4294967295); //@line 1594 "xmltok_impl.c"
        HEAP[$ptr_addr]=$74; //@line 1594 "xmltok_impl.c"
        var $75=HEAP[$ptr_addr]; //@line 1595 "xmltok_impl.c"
        var $76=(($75)&4294967295); //@line 1595 "xmltok_impl.c"
        var $77=HEAP[$76]; //@line 1595 "xmltok_impl.c"
        var $78=reSign(($77), 8, 0)==0; //@line 1595 "xmltok_impl.c"
        if ($78) { __label__ = 25; break; } else { __label__ = 29; break; } //@line 1595 "xmltok_impl.c"
      case 25: // $bb24
        var $79=HEAP[$ptr_addr]; //@line 1595 "xmltok_impl.c"
        var $80=(($79+1)&4294967295); //@line 1595 "xmltok_impl.c"
        var $81=HEAP[$80]; //@line 1595 "xmltok_impl.c"
        var $82=reSign(($81), 8, 0)==111; //@line 1595 "xmltok_impl.c"
        if ($82) { __label__ = 26; break; } else { __label__ = 29; break; } //@line 1595 "xmltok_impl.c"
      case 26: // $bb25
        var $83=HEAP[$ptr_addr]; //@line 1596 "xmltok_impl.c"
        var $84=(($83+2)&4294967295); //@line 1596 "xmltok_impl.c"
        HEAP[$ptr_addr]=$84; //@line 1596 "xmltok_impl.c"
        var $85=HEAP[$ptr_addr]; //@line 1597 "xmltok_impl.c"
        var $86=(($85)&4294967295); //@line 1597 "xmltok_impl.c"
        var $87=HEAP[$86]; //@line 1597 "xmltok_impl.c"
        var $88=reSign(($87), 8, 0)==0; //@line 1597 "xmltok_impl.c"
        if ($88) { __label__ = 27; break; } else { __label__ = 29; break; } //@line 1597 "xmltok_impl.c"
      case 27: // $bb26
        var $89=HEAP[$ptr_addr]; //@line 1597 "xmltok_impl.c"
        var $90=(($89+1)&4294967295); //@line 1597 "xmltok_impl.c"
        var $91=HEAP[$90]; //@line 1597 "xmltok_impl.c"
        var $92=reSign(($91), 8, 0)==116; //@line 1597 "xmltok_impl.c"
        if ($92) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 1597 "xmltok_impl.c"
      case 28: // $bb27
        HEAP[$0]=34; //@line 1598 "xmltok_impl.c"
        __label__ = 38; break; //@line 1598 "xmltok_impl.c"
      case 29: // $bb28
        __label__ = 37; break; //@line 1598 "xmltok_impl.c"
      case 30: // $bb29
        var $93=HEAP[$ptr_addr]; //@line 1603 "xmltok_impl.c"
        var $94=(($93+2)&4294967295); //@line 1603 "xmltok_impl.c"
        HEAP[$ptr_addr]=$94; //@line 1603 "xmltok_impl.c"
        var $95=HEAP[$ptr_addr]; //@line 1604 "xmltok_impl.c"
        var $96=(($95)&4294967295); //@line 1604 "xmltok_impl.c"
        var $97=HEAP[$96]; //@line 1604 "xmltok_impl.c"
        var $98=reSign(($97), 8, 0)==0; //@line 1604 "xmltok_impl.c"
        if ($98) { __label__ = 31; break; } else { __label__ = 37; break; } //@line 1604 "xmltok_impl.c"
      case 31: // $bb30
        var $99=HEAP[$ptr_addr]; //@line 1604 "xmltok_impl.c"
        var $100=(($99+1)&4294967295); //@line 1604 "xmltok_impl.c"
        var $101=HEAP[$100]; //@line 1604 "xmltok_impl.c"
        var $102=reSign(($101), 8, 0)==112; //@line 1604 "xmltok_impl.c"
        if ($102) { __label__ = 32; break; } else { __label__ = 37; break; } //@line 1604 "xmltok_impl.c"
      case 32: // $bb31
        var $103=HEAP[$ptr_addr]; //@line 1605 "xmltok_impl.c"
        var $104=(($103+2)&4294967295); //@line 1605 "xmltok_impl.c"
        HEAP[$ptr_addr]=$104; //@line 1605 "xmltok_impl.c"
        var $105=HEAP[$ptr_addr]; //@line 1606 "xmltok_impl.c"
        var $106=(($105)&4294967295); //@line 1606 "xmltok_impl.c"
        var $107=HEAP[$106]; //@line 1606 "xmltok_impl.c"
        var $108=reSign(($107), 8, 0)==0; //@line 1606 "xmltok_impl.c"
        if ($108) { __label__ = 33; break; } else { __label__ = 37; break; } //@line 1606 "xmltok_impl.c"
      case 33: // $bb32
        var $109=HEAP[$ptr_addr]; //@line 1606 "xmltok_impl.c"
        var $110=(($109+1)&4294967295); //@line 1606 "xmltok_impl.c"
        var $111=HEAP[$110]; //@line 1606 "xmltok_impl.c"
        var $112=reSign(($111), 8, 0)==111; //@line 1606 "xmltok_impl.c"
        if ($112) { __label__ = 34; break; } else { __label__ = 37; break; } //@line 1606 "xmltok_impl.c"
      case 34: // $bb33
        var $113=HEAP[$ptr_addr]; //@line 1607 "xmltok_impl.c"
        var $114=(($113+2)&4294967295); //@line 1607 "xmltok_impl.c"
        HEAP[$ptr_addr]=$114; //@line 1607 "xmltok_impl.c"
        var $115=HEAP[$ptr_addr]; //@line 1608 "xmltok_impl.c"
        var $116=(($115)&4294967295); //@line 1608 "xmltok_impl.c"
        var $117=HEAP[$116]; //@line 1608 "xmltok_impl.c"
        var $118=reSign(($117), 8, 0)==0; //@line 1608 "xmltok_impl.c"
        if ($118) { __label__ = 35; break; } else { __label__ = 37; break; } //@line 1608 "xmltok_impl.c"
      case 35: // $bb34
        var $119=HEAP[$ptr_addr]; //@line 1608 "xmltok_impl.c"
        var $120=(($119+1)&4294967295); //@line 1608 "xmltok_impl.c"
        var $121=HEAP[$120]; //@line 1608 "xmltok_impl.c"
        var $122=reSign(($121), 8, 0)==115; //@line 1608 "xmltok_impl.c"
        if ($122) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 1608 "xmltok_impl.c"
      case 36: // $bb35
        HEAP[$0]=39; //@line 1609 "xmltok_impl.c"
        __label__ = 38; break; //@line 1609 "xmltok_impl.c"
      case 37: // $bb36
        HEAP[$0]=0; //@line 1615 "xmltok_impl.c"
        __label__ = 38; break; //@line 1615 "xmltok_impl.c"
      case 38: // $bb37
        var $123=HEAP[$0]; //@line 1573 "xmltok_impl.c"
        HEAP[$retval]=$123; //@line 1573 "xmltok_impl.c"
        __label__ = 39; break; //@line 1573 "xmltok_impl.c"
      case 39: // $return
        var $retval38=HEAP[$retval]; //@line 1573 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval38; //@line 1573 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_sameName($enc, $ptr1, $ptr2) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr1_addr=__stackBase__+4;
        var $ptr2_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $iftmp_1197=__stackBase__+16;
        var $0=__stackBase__+20;
        var $iftmp_1195=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr1_addr]=$ptr1;
        HEAP[$ptr2_addr]=$ptr2;
        __label__ = 1; break; //@line 1620 "xmltok.c"
      case 1: // $bb
        var $1=HEAP[$ptr1_addr]; //@line 1622 "xmltok_impl.c"
        var $2=(($1)&4294967295); //@line 1622 "xmltok_impl.c"
        var $3=HEAP[$2]; //@line 1622 "xmltok_impl.c"
        var $4=reSign(($3), 8, 0)==0; //@line 1622 "xmltok_impl.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1622 "xmltok_impl.c"
      case 2: // $bb1
        var $5=HEAP[$enc_addr]; //@line 1622 "xmltok_impl.c"
        var $6=$5; //@line 1622 "xmltok_impl.c"
        var $7=HEAP[$ptr1_addr]; //@line 1622 "xmltok_impl.c"
        var $8=(($7+1)&4294967295); //@line 1622 "xmltok_impl.c"
        var $9=HEAP[$8]; //@line 1622 "xmltok_impl.c"
        var $10=unSign(($9), 8, 0); //@line 1622 "xmltok_impl.c"
        var $11=(($6+72)&4294967295); //@line 1622 "xmltok_impl.c"
        var $12=(($11+$10)&4294967295); //@line 1622 "xmltok_impl.c"
        var $13=HEAP[$12]; //@line 1622 "xmltok_impl.c"
        var $14=unSign(($13), 8, 0); //@line 1622 "xmltok_impl.c"
        HEAP[$iftmp_1195]=$14; //@line 1622 "xmltok_impl.c"
        __label__ = 4; break; //@line 1622 "xmltok_impl.c"
      case 3: // $bb2
        var $15=HEAP[$ptr1_addr]; //@line 1622 "xmltok_impl.c"
        var $16=(($15+1)&4294967295); //@line 1622 "xmltok_impl.c"
        var $17=HEAP[$16]; //@line 1622 "xmltok_impl.c"
        var $18=reSign(($17), 8, 0); //@line 1622 "xmltok_impl.c"
        var $19=HEAP[$ptr1_addr]; //@line 1622 "xmltok_impl.c"
        var $20=(($19)&4294967295); //@line 1622 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 1622 "xmltok_impl.c"
        var $22=reSign(($21), 8, 0); //@line 1622 "xmltok_impl.c"
        var $23=((($22)) & 255); //@line 1622 "xmltok_impl.c"
        var $24=((($18)) & 255); //@line 1622 "xmltok_impl.c"
        var $25=_unicode_byte_type($23, $24); //@line 1622 "xmltok_impl.c"
        HEAP[$iftmp_1195]=$25; //@line 1622 "xmltok_impl.c"
        __label__ = 4; break; //@line 1622 "xmltok_impl.c"
      case 4: // $bb3
        var $26=HEAP[$iftmp_1195]; //@line 1622 "xmltok_impl.c"
        if ($26 == 5) {
          __label__ = 9; break;
        }
        else if ($26 == 6) {
          __label__ = 7; break;
        }
        else if ($26 == 7) {
          __label__ = 5; break;
        }
        else if ($26 == 22) {
          __label__ = 14; break;
        }
        else if ($26 == 24) {
          __label__ = 14; break;
        }
        else if ($26 == 25) {
          __label__ = 14; break;
        }
        else if ($26 == 26) {
          __label__ = 14; break;
        }
        else if ($26 == 27) {
          __label__ = 14; break;
        }
        else if ($26 == 29) {
          __label__ = 14; break;
        }
        else {
        __label__ = 19; break;
        }
        
      case 5: // $bb4
        var $27=HEAP[$ptr1_addr]; //@line 1627 "xmltok_impl.c"
        var $28=HEAP[$27]; //@line 1627 "xmltok_impl.c"
        var $29=HEAP[$ptr2_addr]; //@line 1627 "xmltok_impl.c"
        var $30=HEAP[$29]; //@line 1627 "xmltok_impl.c"
        var $31=reSign(($28), 8, 0)!=reSign(($30), 8, 0); //@line 1627 "xmltok_impl.c"
        var $32=unSign(($31), 1, 0); //@line 1627 "xmltok_impl.c"
        var $33=HEAP[$ptr1_addr]; //@line 1627 "xmltok_impl.c"
        var $34=(($33+1)&4294967295); //@line 1627 "xmltok_impl.c"
        HEAP[$ptr1_addr]=$34; //@line 1627 "xmltok_impl.c"
        var $35=HEAP[$ptr2_addr]; //@line 1627 "xmltok_impl.c"
        var $36=(($35+1)&4294967295); //@line 1627 "xmltok_impl.c"
        HEAP[$ptr2_addr]=$36; //@line 1627 "xmltok_impl.c"
        var $toBool=reSign(($32), 8, 0)!=0; //@line 1627 "xmltok_impl.c"
        if ($toBool) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1627 "xmltok_impl.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 1627 "xmltok_impl.c"
        __label__ = 26; break; //@line 1627 "xmltok_impl.c"
      case 7: // $bb6
        var $37=HEAP[$ptr1_addr]; //@line 1627 "xmltok_impl.c"
        var $38=HEAP[$37]; //@line 1627 "xmltok_impl.c"
        var $39=HEAP[$ptr2_addr]; //@line 1627 "xmltok_impl.c"
        var $40=HEAP[$39]; //@line 1627 "xmltok_impl.c"
        var $41=reSign(($38), 8, 0)!=reSign(($40), 8, 0); //@line 1627 "xmltok_impl.c"
        var $42=unSign(($41), 1, 0); //@line 1627 "xmltok_impl.c"
        var $43=HEAP[$ptr1_addr]; //@line 1627 "xmltok_impl.c"
        var $44=(($43+1)&4294967295); //@line 1627 "xmltok_impl.c"
        HEAP[$ptr1_addr]=$44; //@line 1627 "xmltok_impl.c"
        var $45=HEAP[$ptr2_addr]; //@line 1627 "xmltok_impl.c"
        var $46=(($45+1)&4294967295); //@line 1627 "xmltok_impl.c"
        HEAP[$ptr2_addr]=$46; //@line 1627 "xmltok_impl.c"
        var $toBool7=reSign(($42), 8, 0)!=0; //@line 1627 "xmltok_impl.c"
        if ($toBool7) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1627 "xmltok_impl.c"
      case 8: // $bb8
        HEAP[$0]=0; //@line 1627 "xmltok_impl.c"
        __label__ = 26; break; //@line 1627 "xmltok_impl.c"
      case 9: // $bb9
        var $47=HEAP[$ptr1_addr]; //@line 1627 "xmltok_impl.c"
        var $48=HEAP[$47]; //@line 1627 "xmltok_impl.c"
        var $49=HEAP[$ptr2_addr]; //@line 1627 "xmltok_impl.c"
        var $50=HEAP[$49]; //@line 1627 "xmltok_impl.c"
        var $51=reSign(($48), 8, 0)!=reSign(($50), 8, 0); //@line 1627 "xmltok_impl.c"
        var $52=unSign(($51), 1, 0); //@line 1627 "xmltok_impl.c"
        var $53=HEAP[$ptr1_addr]; //@line 1627 "xmltok_impl.c"
        var $54=(($53+1)&4294967295); //@line 1627 "xmltok_impl.c"
        HEAP[$ptr1_addr]=$54; //@line 1627 "xmltok_impl.c"
        var $55=HEAP[$ptr2_addr]; //@line 1627 "xmltok_impl.c"
        var $56=(($55+1)&4294967295); //@line 1627 "xmltok_impl.c"
        HEAP[$ptr2_addr]=$56; //@line 1627 "xmltok_impl.c"
        var $toBool10=reSign(($52), 8, 0)!=0; //@line 1627 "xmltok_impl.c"
        if ($toBool10) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1627 "xmltok_impl.c"
      case 10: // $bb11
        HEAP[$0]=0; //@line 1627 "xmltok_impl.c"
        __label__ = 26; break; //@line 1627 "xmltok_impl.c"
      case 11: // $bb12
        var $57=HEAP[$ptr1_addr]; //@line 1630 "xmltok_impl.c"
        var $58=HEAP[$57]; //@line 1630 "xmltok_impl.c"
        var $59=HEAP[$ptr2_addr]; //@line 1630 "xmltok_impl.c"
        var $60=HEAP[$59]; //@line 1630 "xmltok_impl.c"
        var $61=reSign(($58), 8, 0)!=reSign(($60), 8, 0); //@line 1630 "xmltok_impl.c"
        var $62=unSign(($61), 1, 0); //@line 1630 "xmltok_impl.c"
        var $63=HEAP[$ptr1_addr]; //@line 1630 "xmltok_impl.c"
        var $64=(($63+1)&4294967295); //@line 1630 "xmltok_impl.c"
        HEAP[$ptr1_addr]=$64; //@line 1630 "xmltok_impl.c"
        var $65=HEAP[$ptr2_addr]; //@line 1630 "xmltok_impl.c"
        var $66=(($65+1)&4294967295); //@line 1630 "xmltok_impl.c"
        HEAP[$ptr2_addr]=$66; //@line 1630 "xmltok_impl.c"
        var $toBool13=reSign(($62), 8, 0)!=0; //@line 1630 "xmltok_impl.c"
        if ($toBool13) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1630 "xmltok_impl.c"
      case 12: // $bb14
        HEAP[$0]=0; //@line 1631 "xmltok_impl.c"
        __label__ = 26; break; //@line 1631 "xmltok_impl.c"
      case 13: // $bb15
        __label__ = 25; break; //@line 1631 "xmltok_impl.c"
      case 14: // $bb16
        var $67=HEAP[$ptr2_addr]; //@line 1642 "xmltok_impl.c"
        var $68=HEAP[$67]; //@line 1642 "xmltok_impl.c"
        var $69=HEAP[$ptr1_addr]; //@line 1642 "xmltok_impl.c"
        var $70=HEAP[$69]; //@line 1642 "xmltok_impl.c"
        var $71=reSign(($68), 8, 0)!=reSign(($70), 8, 0); //@line 1642 "xmltok_impl.c"
        var $72=unSign(($71), 1, 0); //@line 1642 "xmltok_impl.c"
        var $73=HEAP[$ptr2_addr]; //@line 1642 "xmltok_impl.c"
        var $74=(($73+1)&4294967295); //@line 1642 "xmltok_impl.c"
        HEAP[$ptr2_addr]=$74; //@line 1642 "xmltok_impl.c"
        var $75=HEAP[$ptr1_addr]; //@line 1642 "xmltok_impl.c"
        var $76=(($75+1)&4294967295); //@line 1642 "xmltok_impl.c"
        HEAP[$ptr1_addr]=$76; //@line 1642 "xmltok_impl.c"
        var $toBool17=reSign(($72), 8, 0)!=0; //@line 1642 "xmltok_impl.c"
        if ($toBool17) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1642 "xmltok_impl.c"
      case 15: // $bb18
        HEAP[$0]=0; //@line 1643 "xmltok_impl.c"
        __label__ = 26; break; //@line 1643 "xmltok_impl.c"
      case 16: // $bb19
        var $77=HEAP[$ptr2_addr]; //@line 1645 "xmltok_impl.c"
        var $78=HEAP[$77]; //@line 1645 "xmltok_impl.c"
        var $79=HEAP[$ptr1_addr]; //@line 1645 "xmltok_impl.c"
        var $80=HEAP[$79]; //@line 1645 "xmltok_impl.c"
        var $81=reSign(($78), 8, 0)!=reSign(($80), 8, 0); //@line 1645 "xmltok_impl.c"
        var $82=unSign(($81), 1, 0); //@line 1645 "xmltok_impl.c"
        var $83=HEAP[$ptr2_addr]; //@line 1645 "xmltok_impl.c"
        var $84=(($83+1)&4294967295); //@line 1645 "xmltok_impl.c"
        HEAP[$ptr2_addr]=$84; //@line 1645 "xmltok_impl.c"
        var $85=HEAP[$ptr1_addr]; //@line 1645 "xmltok_impl.c"
        var $86=(($85+1)&4294967295); //@line 1645 "xmltok_impl.c"
        HEAP[$ptr1_addr]=$86; //@line 1645 "xmltok_impl.c"
        var $toBool20=reSign(($82), 8, 0)!=0; //@line 1645 "xmltok_impl.c"
        if ($toBool20) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 1645 "xmltok_impl.c"
      case 17: // $bb21
        HEAP[$0]=0; //@line 1646 "xmltok_impl.c"
        __label__ = 26; break; //@line 1646 "xmltok_impl.c"
      case 18: // $bb22
        __label__ = 25; break; //@line 1646 "xmltok_impl.c"
      case 19: // $bb23
        var $87=HEAP[$ptr2_addr]; //@line 1660 "xmltok_impl.c"
        var $88=(($87)&4294967295); //@line 1660 "xmltok_impl.c"
        var $89=HEAP[$88]; //@line 1660 "xmltok_impl.c"
        var $90=reSign(($89), 8, 0)==0; //@line 1660 "xmltok_impl.c"
        if ($90) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1660 "xmltok_impl.c"
      case 20: // $bb24
        var $91=HEAP[$enc_addr]; //@line 1660 "xmltok_impl.c"
        var $92=$91; //@line 1660 "xmltok_impl.c"
        var $93=HEAP[$ptr2_addr]; //@line 1660 "xmltok_impl.c"
        var $94=(($93+1)&4294967295); //@line 1660 "xmltok_impl.c"
        var $95=HEAP[$94]; //@line 1660 "xmltok_impl.c"
        var $96=unSign(($95), 8, 0); //@line 1660 "xmltok_impl.c"
        var $97=(($92+72)&4294967295); //@line 1660 "xmltok_impl.c"
        var $98=(($97+$96)&4294967295); //@line 1660 "xmltok_impl.c"
        var $99=HEAP[$98]; //@line 1660 "xmltok_impl.c"
        var $100=unSign(($99), 8, 0); //@line 1660 "xmltok_impl.c"
        HEAP[$iftmp_1197]=$100; //@line 1660 "xmltok_impl.c"
        __label__ = 22; break; //@line 1660 "xmltok_impl.c"
      case 21: // $bb25
        var $101=HEAP[$ptr2_addr]; //@line 1660 "xmltok_impl.c"
        var $102=(($101+1)&4294967295); //@line 1660 "xmltok_impl.c"
        var $103=HEAP[$102]; //@line 1660 "xmltok_impl.c"
        var $104=reSign(($103), 8, 0); //@line 1660 "xmltok_impl.c"
        var $105=HEAP[$ptr2_addr]; //@line 1660 "xmltok_impl.c"
        var $106=(($105)&4294967295); //@line 1660 "xmltok_impl.c"
        var $107=HEAP[$106]; //@line 1660 "xmltok_impl.c"
        var $108=reSign(($107), 8, 0); //@line 1660 "xmltok_impl.c"
        var $109=((($108)) & 255); //@line 1660 "xmltok_impl.c"
        var $110=((($104)) & 255); //@line 1660 "xmltok_impl.c"
        var $111=_unicode_byte_type($109, $110); //@line 1660 "xmltok_impl.c"
        HEAP[$iftmp_1197]=$111; //@line 1660 "xmltok_impl.c"
        __label__ = 22; break; //@line 1660 "xmltok_impl.c"
      case 22: // $bb26
        var $112=HEAP[$iftmp_1197]; //@line 1660 "xmltok_impl.c"
        if ($112 == 5) {
          __label__ = 23; break;
        }
        else if ($112 == 6) {
          __label__ = 23; break;
        }
        else if ($112 == 7) {
          __label__ = 23; break;
        }
        else if ($112 == 22) {
          __label__ = 23; break;
        }
        else if ($112 == 24) {
          __label__ = 23; break;
        }
        else if ($112 == 25) {
          __label__ = 23; break;
        }
        else if ($112 == 26) {
          __label__ = 23; break;
        }
        else if ($112 == 27) {
          __label__ = 23; break;
        }
        else if ($112 == 29) {
          __label__ = 23; break;
        }
        else {
        __label__ = 24; break;
        }
        
      case 23: // $bb27
        HEAP[$0]=0; //@line 1673 "xmltok_impl.c"
        __label__ = 26; break; //@line 1673 "xmltok_impl.c"
      case 24: // $bb28
        HEAP[$0]=1; //@line 1675 "xmltok_impl.c"
        __label__ = 26; break; //@line 1675 "xmltok_impl.c"
      case 25: // $bb29
        __label__ = 1; break; //@line 1675 "xmltok_impl.c"
      case 26: // $bb30
        var $113=HEAP[$0]; //@line 1627 "xmltok_impl.c"
        HEAP[$retval]=$113; //@line 1627 "xmltok_impl.c"
        __label__ = 27; break; //@line 1627 "xmltok_impl.c"
      case 27: // $return
        var $retval31=HEAP[$retval]; //@line 1627 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval31; //@line 1627 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_nameMatchesAscii($enc, $ptr1, $end1, $ptr2) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr1_addr=__stackBase__+4;
        var $end1_addr=__stackBase__+8;
        var $ptr2_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr1_addr]=$ptr1;
        HEAP[$end1_addr]=$end1;
        HEAP[$ptr2_addr]=$ptr2;
        __label__ = 7; break; //@line 1686 "xmltok_impl.c"
      case 1: // $bb
        var $1=HEAP[$ptr1_addr]; //@line 1687 "xmltok_impl.c"
        var $2=HEAP[$end1_addr]; //@line 1687 "xmltok_impl.c"
        var $3=($1)==($2); //@line 1687 "xmltok_impl.c"
        if ($3) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1687 "xmltok_impl.c"
      case 2: // $bb1
        HEAP[$0]=0; //@line 1688 "xmltok_impl.c"
        __label__ = 9; break; //@line 1688 "xmltok_impl.c"
      case 3: // $bb2
        var $4=HEAP[$ptr1_addr]; //@line 1689 "xmltok_impl.c"
        var $5=(($4)&4294967295); //@line 1689 "xmltok_impl.c"
        var $6=HEAP[$5]; //@line 1689 "xmltok_impl.c"
        var $7=reSign(($6), 8, 0)!=0; //@line 1689 "xmltok_impl.c"
        if ($7) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 1689 "xmltok_impl.c"
      case 4: // $bb3
        var $8=HEAP[$ptr1_addr]; //@line 1689 "xmltok_impl.c"
        var $9=(($8+1)&4294967295); //@line 1689 "xmltok_impl.c"
        var $10=HEAP[$9]; //@line 1689 "xmltok_impl.c"
        var $11=HEAP[$ptr2_addr]; //@line 1689 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 1689 "xmltok_impl.c"
        var $13=reSign(($10), 8, 0)!=reSign(($12), 8, 0); //@line 1689 "xmltok_impl.c"
        if ($13) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1689 "xmltok_impl.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 1690 "xmltok_impl.c"
        __label__ = 9; break; //@line 1690 "xmltok_impl.c"
      case 6: // $bb5
        var $14=HEAP[$ptr1_addr]; //@line 1686 "xmltok_impl.c"
        var $15=(($14+2)&4294967295); //@line 1686 "xmltok_impl.c"
        HEAP[$ptr1_addr]=$15; //@line 1686 "xmltok_impl.c"
        var $16=HEAP[$ptr2_addr]; //@line 1686 "xmltok_impl.c"
        var $17=(($16+1)&4294967295); //@line 1686 "xmltok_impl.c"
        HEAP[$ptr2_addr]=$17; //@line 1686 "xmltok_impl.c"
        __label__ = 7; break; //@line 1686 "xmltok_impl.c"
      case 7: // $bb6
        var $18=HEAP[$ptr2_addr]; //@line 1686 "xmltok_impl.c"
        var $19=HEAP[$18]; //@line 1686 "xmltok_impl.c"
        var $20=reSign(($19), 8, 0)!=0; //@line 1686 "xmltok_impl.c"
        if ($20) { __label__ = 1; break; } else { __label__ = 8; break; } //@line 1686 "xmltok_impl.c"
      case 8: // $bb7
        var $21=HEAP[$ptr1_addr]; //@line 1692 "xmltok_impl.c"
        var $22=HEAP[$end1_addr]; //@line 1692 "xmltok_impl.c"
        var $23=($21)==($22); //@line 1692 "xmltok_impl.c"
        var $24=unSign(($23), 1, 0); //@line 1692 "xmltok_impl.c"
        HEAP[$0]=$24; //@line 1692 "xmltok_impl.c"
        __label__ = 9; break; //@line 1692 "xmltok_impl.c"
      case 9: // $bb8
        var $25=HEAP[$0]; //@line 1688 "xmltok_impl.c"
        HEAP[$retval]=$25; //@line 1688 "xmltok_impl.c"
        __label__ = 10; break; //@line 1688 "xmltok_impl.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 1688 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 1688 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_nameLength($enc, $ptr) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $iftmp_1199=__stackBase__+16;
        var $start=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        var $1=HEAP[$ptr_addr]; //@line 1698 "xmltok_impl.c"
        HEAP[$start]=$1; //@line 1698 "xmltok_impl.c"
        __label__ = 1; break; //@line 1698 "xmltok_impl.c"
      case 1: // $bb
        var $2=HEAP[$ptr_addr]; //@line 1700 "xmltok_impl.c"
        var $3=(($2)&4294967295); //@line 1700 "xmltok_impl.c"
        var $4=HEAP[$3]; //@line 1700 "xmltok_impl.c"
        var $5=reSign(($4), 8, 0)==0; //@line 1700 "xmltok_impl.c"
        if ($5) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1700 "xmltok_impl.c"
      case 2: // $bb1
        var $6=HEAP[$enc_addr]; //@line 1700 "xmltok_impl.c"
        var $7=$6; //@line 1700 "xmltok_impl.c"
        var $8=HEAP[$ptr_addr]; //@line 1700 "xmltok_impl.c"
        var $9=(($8+1)&4294967295); //@line 1700 "xmltok_impl.c"
        var $10=HEAP[$9]; //@line 1700 "xmltok_impl.c"
        var $11=unSign(($10), 8, 0); //@line 1700 "xmltok_impl.c"
        var $12=(($7+72)&4294967295); //@line 1700 "xmltok_impl.c"
        var $13=(($12+$11)&4294967295); //@line 1700 "xmltok_impl.c"
        var $14=HEAP[$13]; //@line 1700 "xmltok_impl.c"
        var $15=unSign(($14), 8, 0); //@line 1700 "xmltok_impl.c"
        HEAP[$iftmp_1199]=$15; //@line 1700 "xmltok_impl.c"
        __label__ = 4; break; //@line 1700 "xmltok_impl.c"
      case 3: // $bb2
        var $16=HEAP[$ptr_addr]; //@line 1700 "xmltok_impl.c"
        var $17=(($16+1)&4294967295); //@line 1700 "xmltok_impl.c"
        var $18=HEAP[$17]; //@line 1700 "xmltok_impl.c"
        var $19=reSign(($18), 8, 0); //@line 1700 "xmltok_impl.c"
        var $20=HEAP[$ptr_addr]; //@line 1700 "xmltok_impl.c"
        var $21=(($20)&4294967295); //@line 1700 "xmltok_impl.c"
        var $22=HEAP[$21]; //@line 1700 "xmltok_impl.c"
        var $23=reSign(($22), 8, 0); //@line 1700 "xmltok_impl.c"
        var $24=((($23)) & 255); //@line 1700 "xmltok_impl.c"
        var $25=((($19)) & 255); //@line 1700 "xmltok_impl.c"
        var $26=_unicode_byte_type($24, $25); //@line 1700 "xmltok_impl.c"
        HEAP[$iftmp_1199]=$26; //@line 1700 "xmltok_impl.c"
        __label__ = 4; break; //@line 1700 "xmltok_impl.c"
      case 4: // $bb3
        var $27=HEAP[$iftmp_1199]; //@line 1700 "xmltok_impl.c"
        if ($27 == 5) {
          __label__ = 5; break;
        }
        else if ($27 == 6) {
          __label__ = 6; break;
        }
        else if ($27 == 7) {
          __label__ = 7; break;
        }
        else if ($27 == 22) {
          __label__ = 8; break;
        }
        else if ($27 == 24) {
          __label__ = 8; break;
        }
        else if ($27 == 25) {
          __label__ = 8; break;
        }
        else if ($27 == 26) {
          __label__ = 8; break;
        }
        else if ($27 == 27) {
          __label__ = 8; break;
        }
        else if ($27 == 29) {
          __label__ = 8; break;
        }
        else {
        __label__ = 9; break;
        }
        
      case 5: // $bb4
        var $28=HEAP[$ptr_addr]; //@line 1703 "xmltok_impl.c"
        var $29=(($28+2)&4294967295); //@line 1703 "xmltok_impl.c"
        HEAP[$ptr_addr]=$29; //@line 1703 "xmltok_impl.c"
        __label__ = 10; break; //@line 1703 "xmltok_impl.c"
      case 6: // $bb5
        var $30=HEAP[$ptr_addr]; //@line 1703 "xmltok_impl.c"
        var $31=(($30+3)&4294967295); //@line 1703 "xmltok_impl.c"
        HEAP[$ptr_addr]=$31; //@line 1703 "xmltok_impl.c"
        __label__ = 10; break; //@line 1703 "xmltok_impl.c"
      case 7: // $bb6
        var $32=HEAP[$ptr_addr]; //@line 1703 "xmltok_impl.c"
        var $33=(($32+4)&4294967295); //@line 1703 "xmltok_impl.c"
        HEAP[$ptr_addr]=$33; //@line 1703 "xmltok_impl.c"
        __label__ = 10; break; //@line 1703 "xmltok_impl.c"
      case 8: // $bb7
        var $34=HEAP[$ptr_addr]; //@line 1714 "xmltok_impl.c"
        var $35=(($34+2)&4294967295); //@line 1714 "xmltok_impl.c"
        HEAP[$ptr_addr]=$35; //@line 1714 "xmltok_impl.c"
        __label__ = 10; break; //@line 1714 "xmltok_impl.c"
      case 9: // $bb8
        var $36=HEAP[$ptr_addr]; //@line 1717 "xmltok_impl.c"
        var $37=($36); //@line 1717 "xmltok_impl.c"
        var $38=HEAP[$start]; //@line 1717 "xmltok_impl.c"
        var $39=($38); //@line 1717 "xmltok_impl.c"
        var $40=((($37) - ($39))&4294967295); //@line 1717 "xmltok_impl.c"
        HEAP[$0]=$40; //@line 1717 "xmltok_impl.c"
        var $41=HEAP[$0]; //@line 1717 "xmltok_impl.c"
        HEAP[$retval]=$41; //@line 1717 "xmltok_impl.c"
        __label__ = 11; break; //@line 1717 "xmltok_impl.c"
      case 10: // $bb9
        __label__ = 1; break; //@line 1717 "xmltok_impl.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 1717 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 1717 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_skipS($enc, $ptr) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $iftmp_1203=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        __label__ = 1; break; //@line 1724 "xmltok.c"
      case 1: // $bb
        var $1=HEAP[$ptr_addr]; //@line 1726 "xmltok_impl.c"
        var $2=(($1)&4294967295); //@line 1726 "xmltok_impl.c"
        var $3=HEAP[$2]; //@line 1726 "xmltok_impl.c"
        var $4=reSign(($3), 8, 0)==0; //@line 1726 "xmltok_impl.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1726 "xmltok_impl.c"
      case 2: // $bb1
        var $5=HEAP[$enc_addr]; //@line 1726 "xmltok_impl.c"
        var $6=$5; //@line 1726 "xmltok_impl.c"
        var $7=HEAP[$ptr_addr]; //@line 1726 "xmltok_impl.c"
        var $8=(($7+1)&4294967295); //@line 1726 "xmltok_impl.c"
        var $9=HEAP[$8]; //@line 1726 "xmltok_impl.c"
        var $10=unSign(($9), 8, 0); //@line 1726 "xmltok_impl.c"
        var $11=(($6+72)&4294967295); //@line 1726 "xmltok_impl.c"
        var $12=(($11+$10)&4294967295); //@line 1726 "xmltok_impl.c"
        var $13=HEAP[$12]; //@line 1726 "xmltok_impl.c"
        var $14=unSign(($13), 8, 0); //@line 1726 "xmltok_impl.c"
        HEAP[$iftmp_1203]=$14; //@line 1726 "xmltok_impl.c"
        __label__ = 4; break; //@line 1726 "xmltok_impl.c"
      case 3: // $bb2
        var $15=HEAP[$ptr_addr]; //@line 1726 "xmltok_impl.c"
        var $16=(($15+1)&4294967295); //@line 1726 "xmltok_impl.c"
        var $17=HEAP[$16]; //@line 1726 "xmltok_impl.c"
        var $18=reSign(($17), 8, 0); //@line 1726 "xmltok_impl.c"
        var $19=HEAP[$ptr_addr]; //@line 1726 "xmltok_impl.c"
        var $20=(($19)&4294967295); //@line 1726 "xmltok_impl.c"
        var $21=HEAP[$20]; //@line 1726 "xmltok_impl.c"
        var $22=reSign(($21), 8, 0); //@line 1726 "xmltok_impl.c"
        var $23=((($22)) & 255); //@line 1726 "xmltok_impl.c"
        var $24=((($18)) & 255); //@line 1726 "xmltok_impl.c"
        var $25=_unicode_byte_type($23, $24); //@line 1726 "xmltok_impl.c"
        HEAP[$iftmp_1203]=$25; //@line 1726 "xmltok_impl.c"
        __label__ = 4; break; //@line 1726 "xmltok_impl.c"
      case 4: // $bb3
        var $26=HEAP[$iftmp_1203]; //@line 1726 "xmltok_impl.c"
        if ($26 == 9) {
          __label__ = 5; break;
        }
        else if ($26 == 10) {
          __label__ = 5; break;
        }
        else if ($26 == 21) {
          __label__ = 5; break;
        }
        else {
        __label__ = 6; break;
        }
        
      case 5: // $bb4
        var $27=HEAP[$ptr_addr]; //@line 1730 "xmltok_impl.c"
        var $28=(($27+2)&4294967295); //@line 1730 "xmltok_impl.c"
        HEAP[$ptr_addr]=$28; //@line 1730 "xmltok_impl.c"
        __label__ = 1; break; //@line 1730 "xmltok_impl.c"
      case 6: // $bb5
        var $29=HEAP[$ptr_addr]; //@line 1733 "xmltok_impl.c"
        HEAP[$0]=$29; //@line 1733 "xmltok_impl.c"
        var $30=HEAP[$0]; //@line 1733 "xmltok_impl.c"
        HEAP[$retval]=$30; //@line 1733 "xmltok_impl.c"
        __label__ = 7; break; //@line 1733 "xmltok_impl.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 1733 "xmltok_impl.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 1733 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _big2_updatePosition($enc, $ptr, $end, $pos) {
    var __stackBase__  = STACKTOP; STACKTOP += 21; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 21);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $pos_addr=__stackBase__+12;
        var $iftmp_1207=__stackBase__+16;
        var $iftmp_1205=__stackBase__+17;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$pos_addr]=$pos;
        __label__ = 18; break; //@line 1744 "xmltok_impl.c"
      case 1: // $bb
        var $0=HEAP[$ptr_addr]; //@line 1745 "xmltok_impl.c"
        var $1=(($0)&4294967295); //@line 1745 "xmltok_impl.c"
        var $2=HEAP[$1]; //@line 1745 "xmltok_impl.c"
        var $3=reSign(($2), 8, 0)==0; //@line 1745 "xmltok_impl.c"
        if ($3) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1745 "xmltok_impl.c"
      case 2: // $bb1
        var $4=HEAP[$enc_addr]; //@line 1745 "xmltok_impl.c"
        var $5=$4; //@line 1745 "xmltok_impl.c"
        var $6=HEAP[$ptr_addr]; //@line 1745 "xmltok_impl.c"
        var $7=(($6+1)&4294967295); //@line 1745 "xmltok_impl.c"
        var $8=HEAP[$7]; //@line 1745 "xmltok_impl.c"
        var $9=unSign(($8), 8, 0); //@line 1745 "xmltok_impl.c"
        var $10=(($5+72)&4294967295); //@line 1745 "xmltok_impl.c"
        var $11=(($10+$9)&4294967295); //@line 1745 "xmltok_impl.c"
        var $12=HEAP[$11]; //@line 1745 "xmltok_impl.c"
        var $13=unSign(($12), 8, 0); //@line 1745 "xmltok_impl.c"
        HEAP[$iftmp_1205]=$13; //@line 1745 "xmltok_impl.c"
        __label__ = 4; break; //@line 1745 "xmltok_impl.c"
      case 3: // $bb2
        var $14=HEAP[$ptr_addr]; //@line 1745 "xmltok_impl.c"
        var $15=(($14+1)&4294967295); //@line 1745 "xmltok_impl.c"
        var $16=HEAP[$15]; //@line 1745 "xmltok_impl.c"
        var $17=reSign(($16), 8, 0); //@line 1745 "xmltok_impl.c"
        var $18=HEAP[$ptr_addr]; //@line 1745 "xmltok_impl.c"
        var $19=(($18)&4294967295); //@line 1745 "xmltok_impl.c"
        var $20=HEAP[$19]; //@line 1745 "xmltok_impl.c"
        var $21=reSign(($20), 8, 0); //@line 1745 "xmltok_impl.c"
        var $22=((($21)) & 255); //@line 1745 "xmltok_impl.c"
        var $23=((($17)) & 255); //@line 1745 "xmltok_impl.c"
        var $24=_unicode_byte_type($22, $23); //@line 1745 "xmltok_impl.c"
        HEAP[$iftmp_1205]=$24; //@line 1745 "xmltok_impl.c"
        __label__ = 4; break; //@line 1745 "xmltok_impl.c"
      case 4: // $bb3
        var $25=HEAP[$iftmp_1205]; //@line 1745 "xmltok_impl.c"
        if ($25 == 5) {
          __label__ = 5; break;
        }
        else if ($25 == 6) {
          __label__ = 6; break;
        }
        else if ($25 == 7) {
          __label__ = 7; break;
        }
        else if ($25 == 9) {
          __label__ = 9; break;
        }
        else if ($25 == 10) {
          __label__ = 8; break;
        }
        else {
        __label__ = 16; break;
        }
        
      case 5: // $bb4
        var $26=HEAP[$ptr_addr]; //@line 1750 "xmltok_impl.c"
        var $27=(($26+2)&4294967295); //@line 1750 "xmltok_impl.c"
        HEAP[$ptr_addr]=$27; //@line 1750 "xmltok_impl.c"
        __label__ = 17; break; //@line 1750 "xmltok_impl.c"
      case 6: // $bb5
        var $28=HEAP[$ptr_addr]; //@line 1750 "xmltok_impl.c"
        var $29=(($28+3)&4294967295); //@line 1750 "xmltok_impl.c"
        HEAP[$ptr_addr]=$29; //@line 1750 "xmltok_impl.c"
        __label__ = 17; break; //@line 1750 "xmltok_impl.c"
      case 7: // $bb6
        var $30=HEAP[$ptr_addr]; //@line 1750 "xmltok_impl.c"
        var $31=(($30+4)&4294967295); //@line 1750 "xmltok_impl.c"
        HEAP[$ptr_addr]=$31; //@line 1750 "xmltok_impl.c"
        __label__ = 17; break; //@line 1750 "xmltok_impl.c"
      case 8: // $bb7
        var $32=HEAP[$pos_addr]; //@line 1753 "xmltok_impl.c"
        var $33=(($32+4)&4294967295); //@line 1753 "xmltok_impl.c"
        HEAP[$33]=-1; //@line 1753 "xmltok_impl.c"
        var $34=HEAP[$pos_addr]; //@line 1754 "xmltok_impl.c"
        var $35=(($34)&4294967295); //@line 1754 "xmltok_impl.c"
        var $36=HEAP[$35]; //@line 1754 "xmltok_impl.c"
        var $37=((($36) + 1)&4294967295); //@line 1754 "xmltok_impl.c"
        var $38=HEAP[$pos_addr]; //@line 1754 "xmltok_impl.c"
        var $39=(($38)&4294967295); //@line 1754 "xmltok_impl.c"
        HEAP[$39]=$37; //@line 1754 "xmltok_impl.c"
        var $40=HEAP[$ptr_addr]; //@line 1755 "xmltok_impl.c"
        var $41=(($40+2)&4294967295); //@line 1755 "xmltok_impl.c"
        HEAP[$ptr_addr]=$41; //@line 1755 "xmltok_impl.c"
        __label__ = 17; break; //@line 1755 "xmltok_impl.c"
      case 9: // $bb8
        var $42=HEAP[$pos_addr]; //@line 1758 "xmltok_impl.c"
        var $43=(($42)&4294967295); //@line 1758 "xmltok_impl.c"
        var $44=HEAP[$43]; //@line 1758 "xmltok_impl.c"
        var $45=((($44) + 1)&4294967295); //@line 1758 "xmltok_impl.c"
        var $46=HEAP[$pos_addr]; //@line 1758 "xmltok_impl.c"
        var $47=(($46)&4294967295); //@line 1758 "xmltok_impl.c"
        HEAP[$47]=$45; //@line 1758 "xmltok_impl.c"
        var $48=HEAP[$ptr_addr]; //@line 1759 "xmltok_impl.c"
        var $49=(($48+2)&4294967295); //@line 1759 "xmltok_impl.c"
        HEAP[$ptr_addr]=$49; //@line 1759 "xmltok_impl.c"
        var $50=HEAP[$ptr_addr]; //@line 1760 "xmltok_impl.c"
        var $51=HEAP[$end_addr]; //@line 1760 "xmltok_impl.c"
        var $52=($50)!=($51); //@line 1760 "xmltok_impl.c"
        if ($52) { __label__ = 10; break; } else { __label__ = 15; break; } //@line 1760 "xmltok_impl.c"
      case 10: // $bb9
        var $53=HEAP[$ptr_addr]; //@line 1760 "xmltok_impl.c"
        var $54=(($53)&4294967295); //@line 1760 "xmltok_impl.c"
        var $55=HEAP[$54]; //@line 1760 "xmltok_impl.c"
        var $56=reSign(($55), 8, 0)==0; //@line 1760 "xmltok_impl.c"
        if ($56) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1760 "xmltok_impl.c"
      case 11: // $bb10
        var $57=HEAP[$enc_addr]; //@line 1760 "xmltok_impl.c"
        var $58=$57; //@line 1760 "xmltok_impl.c"
        var $59=HEAP[$ptr_addr]; //@line 1760 "xmltok_impl.c"
        var $60=(($59+1)&4294967295); //@line 1760 "xmltok_impl.c"
        var $61=HEAP[$60]; //@line 1760 "xmltok_impl.c"
        var $62=unSign(($61), 8, 0); //@line 1760 "xmltok_impl.c"
        var $63=(($58+72)&4294967295); //@line 1760 "xmltok_impl.c"
        var $64=(($63+$62)&4294967295); //@line 1760 "xmltok_impl.c"
        var $65=HEAP[$64]; //@line 1760 "xmltok_impl.c"
        var $66=reSign(($65), 8, 0)==10; //@line 1760 "xmltok_impl.c"
        var $67=unSign(($66), 1, 0); //@line 1760 "xmltok_impl.c"
        HEAP[$iftmp_1207]=$67; //@line 1760 "xmltok_impl.c"
        __label__ = 13; break; //@line 1760 "xmltok_impl.c"
      case 12: // $bb11
        var $68=HEAP[$ptr_addr]; //@line 1760 "xmltok_impl.c"
        var $69=(($68+1)&4294967295); //@line 1760 "xmltok_impl.c"
        var $70=HEAP[$69]; //@line 1760 "xmltok_impl.c"
        var $71=reSign(($70), 8, 0); //@line 1760 "xmltok_impl.c"
        var $72=HEAP[$ptr_addr]; //@line 1760 "xmltok_impl.c"
        var $73=(($72)&4294967295); //@line 1760 "xmltok_impl.c"
        var $74=HEAP[$73]; //@line 1760 "xmltok_impl.c"
        var $75=reSign(($74), 8, 0); //@line 1760 "xmltok_impl.c"
        var $76=((($75)) & 255); //@line 1760 "xmltok_impl.c"
        var $77=((($71)) & 255); //@line 1760 "xmltok_impl.c"
        var $78=_unicode_byte_type($76, $77); //@line 1760 "xmltok_impl.c"
        var $79=((($78))|0)==10; //@line 1760 "xmltok_impl.c"
        var $80=unSign(($79), 1, 0); //@line 1760 "xmltok_impl.c"
        HEAP[$iftmp_1207]=$80; //@line 1760 "xmltok_impl.c"
        __label__ = 13; break; //@line 1760 "xmltok_impl.c"
      case 13: // $bb12
        var $81=HEAP[$iftmp_1207]; //@line 1760 "xmltok_impl.c"
        var $toBool=reSign(($81), 8, 0)!=0; //@line 1760 "xmltok_impl.c"
        if ($toBool) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1760 "xmltok_impl.c"
      case 14: // $bb13
        var $82=HEAP[$ptr_addr]; //@line 1761 "xmltok_impl.c"
        var $83=(($82+2)&4294967295); //@line 1761 "xmltok_impl.c"
        HEAP[$ptr_addr]=$83; //@line 1761 "xmltok_impl.c"
        __label__ = 15; break; //@line 1761 "xmltok_impl.c"
      case 15: // $bb14
        var $84=HEAP[$pos_addr]; //@line 1762 "xmltok_impl.c"
        var $85=(($84+4)&4294967295); //@line 1762 "xmltok_impl.c"
        HEAP[$85]=-1; //@line 1762 "xmltok_impl.c"
        __label__ = 17; break; //@line 1762 "xmltok_impl.c"
      case 16: // $bb15
        var $86=HEAP[$ptr_addr]; //@line 1765 "xmltok_impl.c"
        var $87=(($86+2)&4294967295); //@line 1765 "xmltok_impl.c"
        HEAP[$ptr_addr]=$87; //@line 1765 "xmltok_impl.c"
        __label__ = 17; break; //@line 1765 "xmltok_impl.c"
      case 17: // $bb16
        var $88=HEAP[$pos_addr]; //@line 1768 "xmltok_impl.c"
        var $89=(($88+4)&4294967295); //@line 1768 "xmltok_impl.c"
        var $90=HEAP[$89]; //@line 1768 "xmltok_impl.c"
        var $91=((($90) + 1)&4294967295); //@line 1768 "xmltok_impl.c"
        var $92=HEAP[$pos_addr]; //@line 1768 "xmltok_impl.c"
        var $93=(($92+4)&4294967295); //@line 1768 "xmltok_impl.c"
        HEAP[$93]=$91; //@line 1768 "xmltok_impl.c"
        __label__ = 18; break; //@line 1768 "xmltok_impl.c"
      case 18: // $bb17
        var $94=HEAP[$ptr_addr]; //@line 1744 "xmltok_impl.c"
        var $95=HEAP[$end_addr]; //@line 1744 "xmltok_impl.c"
        var $96=($94) < ($95); //@line 1744 "xmltok_impl.c"
        if ($96) { __label__ = 1; break; } else { __label__ = 19; break; } //@line 1744 "xmltok_impl.c"
      case 19: // $bb18
        __label__ = 20; break; //@line 1770 "xmltok_impl.c"
      case 20: // $return
        STACKTOP = __stackBase__;
        return; //@line 1770 "xmltok_impl.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _streqci($s1, $s2) {
    var __stackBase__  = STACKTOP; STACKTOP += 18; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 18);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $s1_addr=__stackBase__;
        var $s2_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $c1=__stackBase__+16;
        var $c2=__stackBase__+17;
        var $_alloca_point_=0;
        HEAP[$s1_addr]=$s1;
        HEAP[$s2_addr]=$s2;
        __label__ = 1; break; //@line 916 "xmltok.c"
      case 1: // $bb
        var $1=HEAP[$s1_addr]; //@line 918 "xmltok.c"
        var $2=HEAP[$1]; //@line 918 "xmltok.c"
        HEAP[$c1]=$2; //@line 918 "xmltok.c"
        var $3=HEAP[$s1_addr]; //@line 918 "xmltok.c"
        var $4=(($3+1)&4294967295); //@line 918 "xmltok.c"
        HEAP[$s1_addr]=$4; //@line 918 "xmltok.c"
        var $5=HEAP[$s2_addr]; //@line 919 "xmltok.c"
        var $6=HEAP[$5]; //@line 919 "xmltok.c"
        HEAP[$c2]=$6; //@line 919 "xmltok.c"
        var $7=HEAP[$s2_addr]; //@line 919 "xmltok.c"
        var $8=(($7+1)&4294967295); //@line 919 "xmltok.c"
        HEAP[$s2_addr]=$8; //@line 919 "xmltok.c"
        var $9=HEAP[$c1]; //@line 920 "xmltok.c"
        var $10=reSign(($9), 8, 0) > 96; //@line 920 "xmltok.c"
        if ($10) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 920 "xmltok.c"
      case 2: // $bb1
        var $11=HEAP[$c1]; //@line 920 "xmltok.c"
        var $12=reSign(($11), 8, 0) <= 122; //@line 920 "xmltok.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 920 "xmltok.c"
      case 3: // $bb2
        var $13=HEAP[$c1]; //@line 921 "xmltok.c"
        var $14=((($13) + -32)&255); //@line 921 "xmltok.c"
        HEAP[$c1]=$14; //@line 921 "xmltok.c"
        __label__ = 4; break; //@line 921 "xmltok.c"
      case 4: // $bb3
        var $15=HEAP[$c2]; //@line 922 "xmltok.c"
        var $16=reSign(($15), 8, 0) > 96; //@line 922 "xmltok.c"
        if ($16) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 922 "xmltok.c"
      case 5: // $bb4
        var $17=HEAP[$c2]; //@line 922 "xmltok.c"
        var $18=reSign(($17), 8, 0) <= 122; //@line 922 "xmltok.c"
        if ($18) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 922 "xmltok.c"
      case 6: // $bb5
        var $19=HEAP[$c2]; //@line 923 "xmltok.c"
        var $20=((($19) + -32)&255); //@line 923 "xmltok.c"
        HEAP[$c2]=$20; //@line 923 "xmltok.c"
        __label__ = 7; break; //@line 923 "xmltok.c"
      case 7: // $bb6
        var $21=HEAP[$c1]; //@line 924 "xmltok.c"
        var $22=HEAP[$c2]; //@line 924 "xmltok.c"
        var $23=reSign(($21), 8, 0)!=reSign(($22), 8, 0); //@line 924 "xmltok.c"
        if ($23) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 924 "xmltok.c"
      case 8: // $bb7
        HEAP[$0]=0; //@line 925 "xmltok.c"
        __label__ = 12; break; //@line 925 "xmltok.c"
      case 9: // $bb8
        var $24=HEAP[$c1]; //@line 926 "xmltok.c"
        var $25=reSign(($24), 8, 0)==0; //@line 926 "xmltok.c"
        if ($25) { __label__ = 11; break; } else { __label__ = 10; break; } //@line 926 "xmltok.c"
      case 10: // $bb9
        __label__ = 1; break; //@line 926 "xmltok.c"
      case 11: // $bb10
        HEAP[$0]=1; //@line 929 "xmltok.c"
        __label__ = 12; break; //@line 929 "xmltok.c"
      case 12: // $bb11
        var $26=HEAP[$0]; //@line 925 "xmltok.c"
        HEAP[$retval]=$26; //@line 925 "xmltok.c"
        __label__ = 13; break; //@line 925 "xmltok.c"
      case 13: // $return
        var $retval12=HEAP[$retval]; //@line 925 "xmltok.c"
        STACKTOP = __stackBase__;
        return $retval12; //@line 925 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _initUpdatePosition($enc, $ptr, $end, $pos) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $pos_addr=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$pos_addr]=$pos;
        var $0=HEAP[$ptr_addr]; //@line 936 "xmltok.c"
        var $1=HEAP[$end_addr]; //@line 936 "xmltok.c"
        var $2=HEAP[$pos_addr]; //@line 936 "xmltok.c"
        _normal_updatePosition(((_utf8_encoding)&4294967295), $0, $1, $2); //@line 936 "xmltok.c"
        __label__ = 1; break; //@line 937 "xmltok.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 937 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _toAscii($enc, $ptr, $end) {
    var __stackBase__  = STACKTOP; STACKTOP += 25; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 25);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $buf=__stackBase__+20;
        var $p=__stackBase__+21;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        var $buf1=$buf; //@line 943 "xmltok.c"
        HEAP[$p]=$buf1; //@line 943 "xmltok.c"
        var $1=HEAP[$enc_addr]; //@line 944 "xmltok.c"
        var $2=(($1+56)&4294967295); //@line 944 "xmltok.c"
        var $3=HEAP[$2]; //@line 944 "xmltok.c"
        var $4=HEAP[$p]; //@line 944 "xmltok.c"
        var $5=(($4+1)&4294967295); //@line 944 "xmltok.c"
        var $6=HEAP[$enc_addr]; //@line 944 "xmltok.c"
        var $7=HEAP[$end_addr]; //@line 944 "xmltok.c"
        FUNCTION_TABLE[$3]($6, $ptr_addr, $7, $p, $5); //@line 944 "xmltok.c"
        var $8=HEAP[$p]; //@line 945 "xmltok.c"
        var $buf2=$buf; //@line 945 "xmltok.c"
        var $9=($buf2)==($8); //@line 945 "xmltok.c"
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 945 "xmltok.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 946 "xmltok.c"
        __label__ = 3; break; //@line 946 "xmltok.c"
      case 2: // $bb3
        var $10=(($buf)&4294967295); //@line 948 "xmltok.c"
        var $11=HEAP[$10]; //@line 948 "xmltok.c"
        var $12=reSign(($11), 8, 0); //@line 948 "xmltok.c"
        HEAP[$0]=$12; //@line 948 "xmltok.c"
        __label__ = 3; break; //@line 948 "xmltok.c"
      case 3: // $bb4
        var $13=HEAP[$0]; //@line 946 "xmltok.c"
        HEAP[$retval]=$13; //@line 946 "xmltok.c"
        __label__ = 4; break; //@line 946 "xmltok.c"
      case 4: // $return
        var $retval5=HEAP[$retval]; //@line 946 "xmltok.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 946 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _isSpace($c) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $c_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$c_addr]=$c;
        var $1=HEAP[$c_addr]; //@line 954 "xmltok.c"
        if ($1 == 9) {
          __label__ = 1; break;
        }
        else if ($1 == 10) {
          __label__ = 1; break;
        }
        else if ($1 == 13) {
          __label__ = 1; break;
        }
        else if ($1 == 32) {
          __label__ = 1; break;
        }
        else {
        __label__ = 2; break;
        }
        
      case 1: // $bb
        HEAP[$0]=1; //@line 959 "xmltok.c"
        __label__ = 3; break; //@line 959 "xmltok.c"
      case 2: // $bb1
        HEAP[$0]=0; //@line 961 "xmltok.c"
        __label__ = 3; break; //@line 961 "xmltok.c"
      case 3: // $bb2
        var $2=HEAP[$0]; //@line 959 "xmltok.c"
        HEAP[$retval]=$2; //@line 959 "xmltok.c"
        __label__ = 4; break; //@line 959 "xmltok.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 959 "xmltok.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 959 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _parsePseudoAttribute($enc, $ptr, $end, $namePtr, $nameEndPtr, $valPtr, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 41; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 41);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $namePtr_addr=__stackBase__+12;
        var $nameEndPtr_addr=__stackBase__+16;
        var $valPtr_addr=__stackBase__+20;
        var $nextTokPtr_addr=__stackBase__+24;
        var $retval=__stackBase__+28;
        var $0=__stackBase__+32;
        var $c=__stackBase__+36;
        var $open=__stackBase__+40;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$namePtr_addr]=$namePtr;
        HEAP[$nameEndPtr_addr]=$nameEndPtr;
        HEAP[$valPtr_addr]=$valPtr;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 978 "xmltok.c"
        var $2=HEAP[$end_addr]; //@line 978 "xmltok.c"
        var $3=($1)==($2); //@line 978 "xmltok.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 978 "xmltok.c"
      case 1: // $bb
        var $4=HEAP[$namePtr_addr]; //@line 979 "xmltok.c"
        HEAP[$4]=0; //@line 979 "xmltok.c"
        HEAP[$0]=1; //@line 980 "xmltok.c"
        __label__ = 41; break; //@line 980 "xmltok.c"
      case 2: // $bb1
        var $5=HEAP[$enc_addr]; //@line 982 "xmltok.c"
        var $6=HEAP[$ptr_addr]; //@line 982 "xmltok.c"
        var $7=HEAP[$end_addr]; //@line 982 "xmltok.c"
        var $8=_toAscii($5, $6, $7); //@line 982 "xmltok.c"
        var $9=_isSpace($8); //@line 982 "xmltok.c"
        var $10=((($9))|0)==0; //@line 982 "xmltok.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 982 "xmltok.c"
      case 3: // $bb2
        var $11=HEAP[$nextTokPtr_addr]; //@line 983 "xmltok.c"
        var $12=HEAP[$ptr_addr]; //@line 983 "xmltok.c"
        HEAP[$11]=$12; //@line 983 "xmltok.c"
        HEAP[$0]=0; //@line 984 "xmltok.c"
        __label__ = 41; break; //@line 984 "xmltok.c"
      case 4: // $bb3
        var $13=HEAP[$enc_addr]; //@line 987 "xmltok.c"
        var $14=(($13+64)&4294967295); //@line 987 "xmltok.c"
        var $15=HEAP[$14]; //@line 987 "xmltok.c"
        var $16=HEAP[$ptr_addr]; //@line 987 "xmltok.c"
        var $17=(($16+$15)&4294967295); //@line 987 "xmltok.c"
        HEAP[$ptr_addr]=$17; //@line 987 "xmltok.c"
        var $18=HEAP[$enc_addr]; //@line 988 "xmltok.c"
        var $19=HEAP[$ptr_addr]; //@line 988 "xmltok.c"
        var $20=HEAP[$end_addr]; //@line 988 "xmltok.c"
        var $21=_toAscii($18, $19, $20); //@line 988 "xmltok.c"
        var $22=_isSpace($21); //@line 988 "xmltok.c"
        var $23=((($22))|0)!=0; //@line 988 "xmltok.c"
        if ($23) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 988 "xmltok.c"
      case 5: // $bb4
        var $24=HEAP[$ptr_addr]; //@line 989 "xmltok.c"
        var $25=HEAP[$end_addr]; //@line 989 "xmltok.c"
        var $26=($24)==($25); //@line 989 "xmltok.c"
        if ($26) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 989 "xmltok.c"
      case 6: // $bb5
        var $27=HEAP[$namePtr_addr]; //@line 990 "xmltok.c"
        HEAP[$27]=0; //@line 990 "xmltok.c"
        HEAP[$0]=1; //@line 991 "xmltok.c"
        __label__ = 41; break; //@line 991 "xmltok.c"
      case 7: // $bb6
        var $28=HEAP[$namePtr_addr]; //@line 993 "xmltok.c"
        var $29=HEAP[$ptr_addr]; //@line 993 "xmltok.c"
        HEAP[$28]=$29; //@line 993 "xmltok.c"
        __label__ = 8; break; //@line 993 "xmltok.c"
      case 8: // $bb7
        var $30=HEAP[$enc_addr]; //@line 995 "xmltok.c"
        var $31=HEAP[$ptr_addr]; //@line 995 "xmltok.c"
        var $32=HEAP[$end_addr]; //@line 995 "xmltok.c"
        var $33=_toAscii($30, $31, $32); //@line 995 "xmltok.c"
        HEAP[$c]=$33; //@line 995 "xmltok.c"
        var $34=HEAP[$c]; //@line 996 "xmltok.c"
        var $35=((($34))|0)==-1; //@line 996 "xmltok.c"
        if ($35) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 996 "xmltok.c"
      case 9: // $bb8
        var $36=HEAP[$nextTokPtr_addr]; //@line 997 "xmltok.c"
        var $37=HEAP[$ptr_addr]; //@line 997 "xmltok.c"
        HEAP[$36]=$37; //@line 997 "xmltok.c"
        HEAP[$0]=0; //@line 998 "xmltok.c"
        __label__ = 41; break; //@line 998 "xmltok.c"
      case 10: // $bb9
        var $38=HEAP[$c]; //@line 1000 "xmltok.c"
        var $39=((($38))|0)==61; //@line 1000 "xmltok.c"
        if ($39) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1000 "xmltok.c"
      case 11: // $bb10
        var $40=HEAP[$nameEndPtr_addr]; //@line 1001 "xmltok.c"
        var $41=HEAP[$ptr_addr]; //@line 1001 "xmltok.c"
        HEAP[$40]=$41; //@line 1001 "xmltok.c"
        __label__ = 19; break; //@line 1001 "xmltok.c"
      case 12: // $bb11
        var $42=HEAP[$c]; //@line 1004 "xmltok.c"
        var $43=_isSpace($42); //@line 1004 "xmltok.c"
        var $44=((($43))|0)!=0; //@line 1004 "xmltok.c"
        if ($44) { __label__ = 13; break; } else { __label__ = 18; break; } //@line 1004 "xmltok.c"
      case 13: // $bb12
        var $45=HEAP[$nameEndPtr_addr]; //@line 1005 "xmltok.c"
        var $46=HEAP[$ptr_addr]; //@line 1005 "xmltok.c"
        HEAP[$45]=$46; //@line 1005 "xmltok.c"
        __label__ = 14; break; //@line 1005 "xmltok.c"
      case 14: // $bb13
        var $47=HEAP[$enc_addr]; //@line 1007 "xmltok.c"
        var $48=(($47+64)&4294967295); //@line 1007 "xmltok.c"
        var $49=HEAP[$48]; //@line 1007 "xmltok.c"
        var $50=HEAP[$ptr_addr]; //@line 1007 "xmltok.c"
        var $51=(($50+$49)&4294967295); //@line 1007 "xmltok.c"
        HEAP[$ptr_addr]=$51; //@line 1007 "xmltok.c"
        var $52=HEAP[$enc_addr]; //@line 1008 "xmltok.c"
        var $53=HEAP[$ptr_addr]; //@line 1008 "xmltok.c"
        var $54=HEAP[$end_addr]; //@line 1008 "xmltok.c"
        var $55=_toAscii($52, $53, $54); //@line 1008 "xmltok.c"
        HEAP[$c]=$55; //@line 1008 "xmltok.c"
        var $56=HEAP[$c]; //@line 1008 "xmltok.c"
        var $57=_isSpace($56); //@line 1008 "xmltok.c"
        var $58=((($57))|0)!=0; //@line 1008 "xmltok.c"
        if ($58) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1008 "xmltok.c"
      case 15: // $bb14
        var $59=HEAP[$c]; //@line 1009 "xmltok.c"
        var $60=((($59))|0)!=61; //@line 1009 "xmltok.c"
        if ($60) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 1009 "xmltok.c"
      case 16: // $bb15
        var $61=HEAP[$nextTokPtr_addr]; //@line 1010 "xmltok.c"
        var $62=HEAP[$ptr_addr]; //@line 1010 "xmltok.c"
        HEAP[$61]=$62; //@line 1010 "xmltok.c"
        HEAP[$0]=0; //@line 1011 "xmltok.c"
        __label__ = 41; break; //@line 1011 "xmltok.c"
      case 17: // $bb16
        __label__ = 19; break; //@line 1011 "xmltok.c"
      case 18: // $bb17
        var $63=HEAP[$enc_addr]; //@line 1015 "xmltok.c"
        var $64=(($63+64)&4294967295); //@line 1015 "xmltok.c"
        var $65=HEAP[$64]; //@line 1015 "xmltok.c"
        var $66=HEAP[$ptr_addr]; //@line 1015 "xmltok.c"
        var $67=(($66+$65)&4294967295); //@line 1015 "xmltok.c"
        HEAP[$ptr_addr]=$67; //@line 1015 "xmltok.c"
        __label__ = 8; break; //@line 1015 "xmltok.c"
      case 19: // $bb18
        var $68=HEAP[$namePtr_addr]; //@line 1017 "xmltok.c"
        var $69=HEAP[$68]; //@line 1017 "xmltok.c"
        var $70=HEAP[$ptr_addr]; //@line 1017 "xmltok.c"
        var $71=($69)==($70); //@line 1017 "xmltok.c"
        if ($71) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1017 "xmltok.c"
      case 20: // $bb19
        var $72=HEAP[$nextTokPtr_addr]; //@line 1018 "xmltok.c"
        var $73=HEAP[$ptr_addr]; //@line 1018 "xmltok.c"
        HEAP[$72]=$73; //@line 1018 "xmltok.c"
        HEAP[$0]=0; //@line 1019 "xmltok.c"
        __label__ = 41; break; //@line 1019 "xmltok.c"
      case 21: // $bb20
        var $74=HEAP[$enc_addr]; //@line 1021 "xmltok.c"
        var $75=(($74+64)&4294967295); //@line 1021 "xmltok.c"
        var $76=HEAP[$75]; //@line 1021 "xmltok.c"
        var $77=HEAP[$ptr_addr]; //@line 1021 "xmltok.c"
        var $78=(($77+$76)&4294967295); //@line 1021 "xmltok.c"
        HEAP[$ptr_addr]=$78; //@line 1021 "xmltok.c"
        var $79=HEAP[$enc_addr]; //@line 1022 "xmltok.c"
        var $80=HEAP[$ptr_addr]; //@line 1022 "xmltok.c"
        var $81=HEAP[$end_addr]; //@line 1022 "xmltok.c"
        var $82=_toAscii($79, $80, $81); //@line 1022 "xmltok.c"
        HEAP[$c]=$82; //@line 1022 "xmltok.c"
        __label__ = 23; break; //@line 1022 "xmltok.c"
      case 22: // $bb21
        var $83=HEAP[$enc_addr]; //@line 1024 "xmltok.c"
        var $84=(($83+64)&4294967295); //@line 1024 "xmltok.c"
        var $85=HEAP[$84]; //@line 1024 "xmltok.c"
        var $86=HEAP[$ptr_addr]; //@line 1024 "xmltok.c"
        var $87=(($86+$85)&4294967295); //@line 1024 "xmltok.c"
        HEAP[$ptr_addr]=$87; //@line 1024 "xmltok.c"
        var $88=HEAP[$enc_addr]; //@line 1025 "xmltok.c"
        var $89=HEAP[$ptr_addr]; //@line 1025 "xmltok.c"
        var $90=HEAP[$end_addr]; //@line 1025 "xmltok.c"
        var $91=_toAscii($88, $89, $90); //@line 1025 "xmltok.c"
        HEAP[$c]=$91; //@line 1025 "xmltok.c"
        __label__ = 23; break; //@line 1025 "xmltok.c"
      case 23: // $bb22
        var $92=HEAP[$c]; //@line 1023 "xmltok.c"
        var $93=_isSpace($92); //@line 1023 "xmltok.c"
        var $94=((($93))|0)!=0; //@line 1023 "xmltok.c"
        if ($94) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 1023 "xmltok.c"
      case 24: // $bb23
        var $95=HEAP[$c]; //@line 1027 "xmltok.c"
        var $96=((($95))|0)!=34; //@line 1027 "xmltok.c"
        if ($96) { __label__ = 25; break; } else { __label__ = 27; break; } //@line 1027 "xmltok.c"
      case 25: // $bb24
        var $97=HEAP[$c]; //@line 1027 "xmltok.c"
        var $98=((($97))|0)!=39; //@line 1027 "xmltok.c"
        if ($98) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1027 "xmltok.c"
      case 26: // $bb25
        var $99=HEAP[$nextTokPtr_addr]; //@line 1028 "xmltok.c"
        var $100=HEAP[$ptr_addr]; //@line 1028 "xmltok.c"
        HEAP[$99]=$100; //@line 1028 "xmltok.c"
        HEAP[$0]=0; //@line 1029 "xmltok.c"
        __label__ = 41; break; //@line 1029 "xmltok.c"
      case 27: // $bb26
        var $101=HEAP[$c]; //@line 1031 "xmltok.c"
        var $102=((($101)) & 255); //@line 1031 "xmltok.c"
        HEAP[$open]=$102; //@line 1031 "xmltok.c"
        var $103=HEAP[$enc_addr]; //@line 1032 "xmltok.c"
        var $104=(($103+64)&4294967295); //@line 1032 "xmltok.c"
        var $105=HEAP[$104]; //@line 1032 "xmltok.c"
        var $106=HEAP[$ptr_addr]; //@line 1032 "xmltok.c"
        var $107=(($106+$105)&4294967295); //@line 1032 "xmltok.c"
        HEAP[$ptr_addr]=$107; //@line 1032 "xmltok.c"
        var $108=HEAP[$valPtr_addr]; //@line 1033 "xmltok.c"
        var $109=HEAP[$ptr_addr]; //@line 1033 "xmltok.c"
        HEAP[$108]=$109; //@line 1033 "xmltok.c"
        __label__ = 28; break; //@line 1033 "xmltok.c"
      case 28: // $bb27
        var $110=HEAP[$enc_addr]; //@line 1035 "xmltok.c"
        var $111=HEAP[$ptr_addr]; //@line 1035 "xmltok.c"
        var $112=HEAP[$end_addr]; //@line 1035 "xmltok.c"
        var $113=_toAscii($110, $111, $112); //@line 1035 "xmltok.c"
        HEAP[$c]=$113; //@line 1035 "xmltok.c"
        var $114=HEAP[$open]; //@line 1036 "xmltok.c"
        var $115=reSign(($114), 8, 0); //@line 1036 "xmltok.c"
        var $116=HEAP[$c]; //@line 1036 "xmltok.c"
        var $117=((($115))|0)==((($116))|0); //@line 1036 "xmltok.c"
        if ($117) { __label__ = 40; break; } else { __label__ = 29; break; } //@line 1036 "xmltok.c"
      case 29: // $bb28
        var $118=HEAP[$c]; //@line 1038 "xmltok.c"
        var $119=((($118))|0) <= 96; //@line 1038 "xmltok.c"
        if ($119) { __label__ = 31; break; } else { __label__ = 30; break; } //@line 1038 "xmltok.c"
      case 30: // $bb29
        var $120=HEAP[$c]; //@line 1038 "xmltok.c"
        var $121=((($120))|0) > 122; //@line 1038 "xmltok.c"
        if ($121) { __label__ = 31; break; } else { __label__ = 39; break; } //@line 1038 "xmltok.c"
      case 31: // $bb30
        var $122=HEAP[$c]; //@line 1038 "xmltok.c"
        var $123=((($122))|0) <= 64; //@line 1038 "xmltok.c"
        if ($123) { __label__ = 33; break; } else { __label__ = 32; break; } //@line 1038 "xmltok.c"
      case 32: // $bb31
        var $124=HEAP[$c]; //@line 1038 "xmltok.c"
        var $125=((($124))|0) > 90; //@line 1038 "xmltok.c"
        if ($125) { __label__ = 33; break; } else { __label__ = 39; break; } //@line 1038 "xmltok.c"
      case 33: // $bb32
        var $126=HEAP[$c]; //@line 1038 "xmltok.c"
        var $127=((($126))|0) <= 47; //@line 1038 "xmltok.c"
        if ($127) { __label__ = 35; break; } else { __label__ = 34; break; } //@line 1038 "xmltok.c"
      case 34: // $bb33
        var $128=HEAP[$c]; //@line 1038 "xmltok.c"
        var $129=((($128))|0) > 57; //@line 1038 "xmltok.c"
        if ($129) { __label__ = 35; break; } else { __label__ = 39; break; } //@line 1038 "xmltok.c"
      case 35: // $bb34
        var $130=HEAP[$c]; //@line 1038 "xmltok.c"
        var $131=((($130))|0)!=46; //@line 1038 "xmltok.c"
        if ($131) { __label__ = 36; break; } else { __label__ = 39; break; } //@line 1038 "xmltok.c"
      case 36: // $bb35
        var $132=HEAP[$c]; //@line 1038 "xmltok.c"
        var $133=((($132))|0)!=45; //@line 1038 "xmltok.c"
        if ($133) { __label__ = 37; break; } else { __label__ = 39; break; } //@line 1038 "xmltok.c"
      case 37: // $bb36
        var $134=HEAP[$c]; //@line 1038 "xmltok.c"
        var $135=((($134))|0)!=95; //@line 1038 "xmltok.c"
        if ($135) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 1038 "xmltok.c"
      case 38: // $bb37
        var $136=HEAP[$nextTokPtr_addr]; //@line 1044 "xmltok.c"
        var $137=HEAP[$ptr_addr]; //@line 1044 "xmltok.c"
        HEAP[$136]=$137; //@line 1044 "xmltok.c"
        HEAP[$0]=0; //@line 1045 "xmltok.c"
        __label__ = 41; break; //@line 1045 "xmltok.c"
      case 39: // $bb38
        var $138=HEAP[$enc_addr]; //@line 1034 "xmltok.c"
        var $139=(($138+64)&4294967295); //@line 1034 "xmltok.c"
        var $140=HEAP[$139]; //@line 1034 "xmltok.c"
        var $141=HEAP[$ptr_addr]; //@line 1034 "xmltok.c"
        var $142=(($141+$140)&4294967295); //@line 1034 "xmltok.c"
        HEAP[$ptr_addr]=$142; //@line 1034 "xmltok.c"
        __label__ = 28; break; //@line 1034 "xmltok.c"
      case 40: // $bb39
        var $143=HEAP[$enc_addr]; //@line 1048 "xmltok.c"
        var $144=(($143+64)&4294967295); //@line 1048 "xmltok.c"
        var $145=HEAP[$144]; //@line 1048 "xmltok.c"
        var $146=HEAP[$ptr_addr]; //@line 1048 "xmltok.c"
        var $147=(($146+$145)&4294967295); //@line 1048 "xmltok.c"
        var $148=HEAP[$nextTokPtr_addr]; //@line 1048 "xmltok.c"
        HEAP[$148]=$147; //@line 1048 "xmltok.c"
        HEAP[$0]=1; //@line 1049 "xmltok.c"
        __label__ = 41; break; //@line 1049 "xmltok.c"
      case 41: // $bb40
        var $149=HEAP[$0]; //@line 980 "xmltok.c"
        HEAP[$retval]=$149; //@line 980 "xmltok.c"
        __label__ = 42; break; //@line 980 "xmltok.c"
      case 42: // $return
        var $retval41=HEAP[$retval]; //@line 980 "xmltok.c"
        STACKTOP = __stackBase__;
        return $retval41; //@line 980 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _doParseXmlDecl($encodingFinder, $isGeneralTextEntity, $enc, $ptr, $end, $badPtr, $versionPtr, $versionEndPtr, $encodingName, $encoding, $standalone) {
    var __stackBase__  = STACKTOP; STACKTOP += 68; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 68);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $encodingFinder_addr=__stackBase__;
        var $isGeneralTextEntity_addr=__stackBase__+4;
        var $enc_addr=__stackBase__+8;
        var $ptr_addr=__stackBase__+12;
        var $end_addr=__stackBase__+16;
        var $badPtr_addr=__stackBase__+20;
        var $versionPtr_addr=__stackBase__+24;
        var $versionEndPtr_addr=__stackBase__+28;
        var $encodingName_addr=__stackBase__+32;
        var $encoding_addr=__stackBase__+36;
        var $standalone_addr=__stackBase__+40;
        var $retval=__stackBase__+44;
        var $0=__stackBase__+48;
        var $val=__stackBase__+52;
        var $name=__stackBase__+56;
        var $nameEnd=__stackBase__+60;
        var $c=__stackBase__+64;
        var $_alloca_point_=0;
        HEAP[$encodingFinder_addr]=$encodingFinder;
        HEAP[$isGeneralTextEntity_addr]=$isGeneralTextEntity;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$badPtr_addr]=$badPtr;
        HEAP[$versionPtr_addr]=$versionPtr;
        HEAP[$versionEndPtr_addr]=$versionEndPtr;
        HEAP[$encodingName_addr]=$encodingName;
        HEAP[$encoding_addr]=$encoding;
        HEAP[$standalone_addr]=$standalone;
        HEAP[$val]=0; //@line 1088 "xmltok.c"
        HEAP[$name]=0; //@line 1089 "xmltok.c"
        HEAP[$nameEnd]=0; //@line 1090 "xmltok.c"
        var $1=HEAP[$ptr_addr]; //@line 1091 "xmltok.c"
        var $2=HEAP[$enc_addr]; //@line 1091 "xmltok.c"
        var $3=(($2+64)&4294967295); //@line 1091 "xmltok.c"
        var $4=HEAP[$3]; //@line 1091 "xmltok.c"
        var $5=((($4) * 5)&4294967295); //@line 1091 "xmltok.c"
        var $6=(($1+$5)&4294967295); //@line 1091 "xmltok.c"
        HEAP[$ptr_addr]=$6; //@line 1091 "xmltok.c"
        var $7=HEAP[$enc_addr]; //@line 1092 "xmltok.c"
        var $8=(($7+64)&4294967295); //@line 1092 "xmltok.c"
        var $9=HEAP[$8]; //@line 1092 "xmltok.c"
        var $10=((($9) * -2)&4294967295); //@line 1092 "xmltok.c"
        var $11=HEAP[$end_addr]; //@line 1092 "xmltok.c"
        var $12=(($11+$10)&4294967295); //@line 1092 "xmltok.c"
        HEAP[$end_addr]=$12; //@line 1092 "xmltok.c"
        var $13=HEAP[$ptr_addr]; //@line 1093 "xmltok.c"
        var $14=HEAP[$enc_addr]; //@line 1093 "xmltok.c"
        var $15=HEAP[$end_addr]; //@line 1093 "xmltok.c"
        var $16=_parsePseudoAttribute($14, $13, $15, $name, $nameEnd, $val, $ptr_addr); //@line 1093 "xmltok.c"
        var $17=((($16))|0)==0; //@line 1093 "xmltok.c"
        if ($17) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 1093 "xmltok.c"
      case 1: // $bb
        var $18=HEAP[$name]; //@line 1093 "xmltok.c"
        var $19=($18)==0; //@line 1093 "xmltok.c"
        if ($19) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1093 "xmltok.c"
      case 2: // $bb1
        var $20=HEAP[$ptr_addr]; //@line 1095 "xmltok.c"
        var $21=HEAP[$badPtr_addr]; //@line 1095 "xmltok.c"
        HEAP[$21]=$20; //@line 1095 "xmltok.c"
        HEAP[$0]=0; //@line 1096 "xmltok.c"
        __label__ = 49; break; //@line 1096 "xmltok.c"
      case 3: // $bb2
        var $22=HEAP[$enc_addr]; //@line 1098 "xmltok.c"
        var $23=(($22+24)&4294967295); //@line 1098 "xmltok.c"
        var $24=HEAP[$23]; //@line 1098 "xmltok.c"
        var $25=HEAP[$nameEnd]; //@line 1098 "xmltok.c"
        var $26=HEAP[$name]; //@line 1098 "xmltok.c"
        var $27=HEAP[$enc_addr]; //@line 1098 "xmltok.c"
        var $28=FUNCTION_TABLE[$24]($27, $26, $25, ((_KW_version)&4294967295)); //@line 1098 "xmltok.c"
        var $29=((($28))|0)==0; //@line 1098 "xmltok.c"
        if ($29) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 1098 "xmltok.c"
      case 4: // $bb3
        var $30=HEAP[$isGeneralTextEntity_addr]; //@line 1099 "xmltok.c"
        var $31=((($30))|0)==0; //@line 1099 "xmltok.c"
        if ($31) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1099 "xmltok.c"
      case 5: // $bb4
        var $32=HEAP[$name]; //@line 1100 "xmltok.c"
        var $33=HEAP[$badPtr_addr]; //@line 1100 "xmltok.c"
        HEAP[$33]=$32; //@line 1100 "xmltok.c"
        HEAP[$0]=0; //@line 1101 "xmltok.c"
        __label__ = 49; break; //@line 1101 "xmltok.c"
      case 6: // $bb5
        __label__ = 17; break; //@line 1101 "xmltok.c"
      case 7: // $bb6
        var $34=HEAP[$versionPtr_addr]; //@line 1105 "xmltok.c"
        var $35=($34)!=0; //@line 1105 "xmltok.c"
        if ($35) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1105 "xmltok.c"
      case 8: // $bb7
        var $36=HEAP[$val]; //@line 1106 "xmltok.c"
        var $37=HEAP[$versionPtr_addr]; //@line 1106 "xmltok.c"
        HEAP[$37]=$36; //@line 1106 "xmltok.c"
        __label__ = 9; break; //@line 1106 "xmltok.c"
      case 9: // $bb8
        var $38=HEAP[$versionEndPtr_addr]; //@line 1107 "xmltok.c"
        var $39=($38)!=0; //@line 1107 "xmltok.c"
        if ($39) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1107 "xmltok.c"
      case 10: // $bb9
        var $40=HEAP[$ptr_addr]; //@line 1108 "xmltok.c"
        var $41=HEAP[$versionEndPtr_addr]; //@line 1108 "xmltok.c"
        HEAP[$41]=$40; //@line 1108 "xmltok.c"
        __label__ = 11; break; //@line 1108 "xmltok.c"
      case 11: // $bb10
        var $42=HEAP[$ptr_addr]; //@line 1109 "xmltok.c"
        var $43=HEAP[$enc_addr]; //@line 1109 "xmltok.c"
        var $44=HEAP[$end_addr]; //@line 1109 "xmltok.c"
        var $45=_parsePseudoAttribute($43, $42, $44, $name, $nameEnd, $val, $ptr_addr); //@line 1109 "xmltok.c"
        var $46=((($45))|0)==0; //@line 1109 "xmltok.c"
        if ($46) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1109 "xmltok.c"
      case 12: // $bb11
        var $47=HEAP[$ptr_addr]; //@line 1110 "xmltok.c"
        var $48=HEAP[$badPtr_addr]; //@line 1110 "xmltok.c"
        HEAP[$48]=$47; //@line 1110 "xmltok.c"
        HEAP[$0]=0; //@line 1111 "xmltok.c"
        __label__ = 49; break; //@line 1111 "xmltok.c"
      case 13: // $bb12
        var $49=HEAP[$name]; //@line 1113 "xmltok.c"
        var $50=($49)==0; //@line 1113 "xmltok.c"
        if ($50) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 1113 "xmltok.c"
      case 14: // $bb13
        var $51=HEAP[$isGeneralTextEntity_addr]; //@line 1114 "xmltok.c"
        var $52=((($51))|0)!=0; //@line 1114 "xmltok.c"
        if ($52) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1114 "xmltok.c"
      case 15: // $bb14
        var $53=HEAP[$ptr_addr]; //@line 1116 "xmltok.c"
        var $54=HEAP[$badPtr_addr]; //@line 1116 "xmltok.c"
        HEAP[$54]=$53; //@line 1116 "xmltok.c"
        HEAP[$0]=0; //@line 1117 "xmltok.c"
        __label__ = 49; break; //@line 1117 "xmltok.c"
      case 16: // $bb15
        HEAP[$0]=1; //@line 1119 "xmltok.c"
        __label__ = 49; break; //@line 1119 "xmltok.c"
      case 17: // $bb16
        var $55=HEAP[$enc_addr]; //@line 1122 "xmltok.c"
        var $56=(($55+24)&4294967295); //@line 1122 "xmltok.c"
        var $57=HEAP[$56]; //@line 1122 "xmltok.c"
        var $58=HEAP[$nameEnd]; //@line 1122 "xmltok.c"
        var $59=HEAP[$name]; //@line 1122 "xmltok.c"
        var $60=HEAP[$enc_addr]; //@line 1122 "xmltok.c"
        var $61=FUNCTION_TABLE[$57]($60, $59, $58, ((_KW_encoding)&4294967295)); //@line 1122 "xmltok.c"
        var $62=((($61))|0)!=0; //@line 1122 "xmltok.c"
        if ($62) { __label__ = 18; break; } else { __label__ = 31; break; } //@line 1122 "xmltok.c"
      case 18: // $bb17
        var $63=HEAP[$val]; //@line 1123 "xmltok.c"
        var $64=HEAP[$enc_addr]; //@line 1123 "xmltok.c"
        var $65=HEAP[$end_addr]; //@line 1123 "xmltok.c"
        var $66=_toAscii($64, $63, $65); //@line 1123 "xmltok.c"
        HEAP[$c]=$66; //@line 1123 "xmltok.c"
        var $67=HEAP[$c]; //@line 1124 "xmltok.c"
        var $68=((($67))|0) <= 96; //@line 1124 "xmltok.c"
        if ($68) { __label__ = 20; break; } else { __label__ = 19; break; } //@line 1124 "xmltok.c"
      case 19: // $bb18
        var $69=HEAP[$c]; //@line 1124 "xmltok.c"
        var $70=((($69))|0) > 122; //@line 1124 "xmltok.c"
        if ($70) { __label__ = 20; break; } else { __label__ = 23; break; } //@line 1124 "xmltok.c"
      case 20: // $bb19
        var $71=HEAP[$c]; //@line 1124 "xmltok.c"
        var $72=((($71))|0) <= 64; //@line 1124 "xmltok.c"
        if ($72) { __label__ = 22; break; } else { __label__ = 21; break; } //@line 1124 "xmltok.c"
      case 21: // $bb20
        var $73=HEAP[$c]; //@line 1124 "xmltok.c"
        var $74=((($73))|0) > 90; //@line 1124 "xmltok.c"
        if ($74) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 1124 "xmltok.c"
      case 22: // $bb21
        var $75=HEAP[$val]; //@line 1125 "xmltok.c"
        var $76=HEAP[$badPtr_addr]; //@line 1125 "xmltok.c"
        HEAP[$76]=$75; //@line 1125 "xmltok.c"
        HEAP[$0]=0; //@line 1126 "xmltok.c"
        __label__ = 49; break; //@line 1126 "xmltok.c"
      case 23: // $bb22
        var $77=HEAP[$encodingName_addr]; //@line 1128 "xmltok.c"
        var $78=($77)!=0; //@line 1128 "xmltok.c"
        if ($78) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 1128 "xmltok.c"
      case 24: // $bb23
        var $79=HEAP[$val]; //@line 1129 "xmltok.c"
        var $80=HEAP[$encodingName_addr]; //@line 1129 "xmltok.c"
        HEAP[$80]=$79; //@line 1129 "xmltok.c"
        __label__ = 25; break; //@line 1129 "xmltok.c"
      case 25: // $bb24
        var $81=HEAP[$encoding_addr]; //@line 1130 "xmltok.c"
        var $82=($81)!=0; //@line 1130 "xmltok.c"
        if ($82) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1130 "xmltok.c"
      case 26: // $bb25
        var $83=HEAP[$ptr_addr]; //@line 1131 "xmltok.c"
        var $84=HEAP[$enc_addr]; //@line 1131 "xmltok.c"
        var $85=(($84+64)&4294967295); //@line 1131 "xmltok.c"
        var $86=HEAP[$85]; //@line 1131 "xmltok.c"
        var $87=((0 - ($86))&4294967295); //@line 1131 "xmltok.c"
        var $88=(($83+$87)&4294967295); //@line 1131 "xmltok.c"
        var $89=HEAP[$val]; //@line 1131 "xmltok.c"
        var $90=HEAP[$encodingFinder_addr]; //@line 1131 "xmltok.c"
        var $91=HEAP[$enc_addr]; //@line 1131 "xmltok.c"
        var $92=FUNCTION_TABLE[$90]($91, $89, $88); //@line 1131 "xmltok.c"
        var $93=HEAP[$encoding_addr]; //@line 1131 "xmltok.c"
        HEAP[$93]=$92; //@line 1131 "xmltok.c"
        __label__ = 27; break; //@line 1131 "xmltok.c"
      case 27: // $bb26
        var $94=HEAP[$ptr_addr]; //@line 1132 "xmltok.c"
        var $95=HEAP[$enc_addr]; //@line 1132 "xmltok.c"
        var $96=HEAP[$end_addr]; //@line 1132 "xmltok.c"
        var $97=_parsePseudoAttribute($95, $94, $96, $name, $nameEnd, $val, $ptr_addr); //@line 1132 "xmltok.c"
        var $98=((($97))|0)==0; //@line 1132 "xmltok.c"
        if ($98) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 1132 "xmltok.c"
      case 28: // $bb27
        var $99=HEAP[$ptr_addr]; //@line 1133 "xmltok.c"
        var $100=HEAP[$badPtr_addr]; //@line 1133 "xmltok.c"
        HEAP[$100]=$99; //@line 1133 "xmltok.c"
        HEAP[$0]=0; //@line 1134 "xmltok.c"
        __label__ = 49; break; //@line 1134 "xmltok.c"
      case 29: // $bb28
        var $101=HEAP[$name]; //@line 1136 "xmltok.c"
        var $102=($101)==0; //@line 1136 "xmltok.c"
        if ($102) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 1136 "xmltok.c"
      case 30: // $bb29
        HEAP[$0]=1; //@line 1137 "xmltok.c"
        __label__ = 49; break; //@line 1137 "xmltok.c"
      case 31: // $bb30
        var $103=HEAP[$enc_addr]; //@line 1139 "xmltok.c"
        var $104=(($103+24)&4294967295); //@line 1139 "xmltok.c"
        var $105=HEAP[$104]; //@line 1139 "xmltok.c"
        var $106=HEAP[$nameEnd]; //@line 1139 "xmltok.c"
        var $107=HEAP[$name]; //@line 1139 "xmltok.c"
        var $108=HEAP[$enc_addr]; //@line 1139 "xmltok.c"
        var $109=FUNCTION_TABLE[$105]($108, $107, $106, ((_KW_standalone)&4294967295)); //@line 1139 "xmltok.c"
        var $110=((($109))|0)==0; //@line 1139 "xmltok.c"
        if ($110) { __label__ = 33; break; } else { __label__ = 32; break; } //@line 1139 "xmltok.c"
      case 32: // $bb31
        var $111=HEAP[$isGeneralTextEntity_addr]; //@line 1139 "xmltok.c"
        var $112=((($111))|0)!=0; //@line 1139 "xmltok.c"
        if ($112) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 1139 "xmltok.c"
      case 33: // $bb32
        var $113=HEAP[$name]; //@line 1141 "xmltok.c"
        var $114=HEAP[$badPtr_addr]; //@line 1141 "xmltok.c"
        HEAP[$114]=$113; //@line 1141 "xmltok.c"
        HEAP[$0]=0; //@line 1142 "xmltok.c"
        __label__ = 49; break; //@line 1142 "xmltok.c"
      case 34: // $bb33
        var $115=HEAP[$enc_addr]; //@line 1144 "xmltok.c"
        var $116=(($115+24)&4294967295); //@line 1144 "xmltok.c"
        var $117=HEAP[$116]; //@line 1144 "xmltok.c"
        var $118=HEAP[$ptr_addr]; //@line 1144 "xmltok.c"
        var $119=HEAP[$enc_addr]; //@line 1144 "xmltok.c"
        var $120=(($119+64)&4294967295); //@line 1144 "xmltok.c"
        var $121=HEAP[$120]; //@line 1144 "xmltok.c"
        var $122=((0 - ($121))&4294967295); //@line 1144 "xmltok.c"
        var $123=(($118+$122)&4294967295); //@line 1144 "xmltok.c"
        var $124=HEAP[$val]; //@line 1144 "xmltok.c"
        var $125=HEAP[$enc_addr]; //@line 1144 "xmltok.c"
        var $126=FUNCTION_TABLE[$117]($125, $124, $123, ((_KW_yes)&4294967295)); //@line 1144 "xmltok.c"
        var $127=((($126))|0)!=0; //@line 1144 "xmltok.c"
        if ($127) { __label__ = 35; break; } else { __label__ = 38; break; } //@line 1144 "xmltok.c"
      case 35: // $bb34
        var $128=HEAP[$standalone_addr]; //@line 1145 "xmltok.c"
        var $129=($128)!=0; //@line 1145 "xmltok.c"
        if ($129) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 1145 "xmltok.c"
      case 36: // $bb35
        var $130=HEAP[$standalone_addr]; //@line 1146 "xmltok.c"
        HEAP[$130]=1; //@line 1146 "xmltok.c"
        __label__ = 37; break; //@line 1146 "xmltok.c"
      case 37: // $bb36
        __label__ = 43; break; //@line 1146 "xmltok.c"
      case 38: // $bb37
        var $131=HEAP[$enc_addr]; //@line 1148 "xmltok.c"
        var $132=(($131+24)&4294967295); //@line 1148 "xmltok.c"
        var $133=HEAP[$132]; //@line 1148 "xmltok.c"
        var $134=HEAP[$ptr_addr]; //@line 1148 "xmltok.c"
        var $135=HEAP[$enc_addr]; //@line 1148 "xmltok.c"
        var $136=(($135+64)&4294967295); //@line 1148 "xmltok.c"
        var $137=HEAP[$136]; //@line 1148 "xmltok.c"
        var $138=((0 - ($137))&4294967295); //@line 1148 "xmltok.c"
        var $139=(($134+$138)&4294967295); //@line 1148 "xmltok.c"
        var $140=HEAP[$val]; //@line 1148 "xmltok.c"
        var $141=HEAP[$enc_addr]; //@line 1148 "xmltok.c"
        var $142=FUNCTION_TABLE[$133]($141, $140, $139, ((_KW_no)&4294967295)); //@line 1148 "xmltok.c"
        var $143=((($142))|0)!=0; //@line 1148 "xmltok.c"
        if ($143) { __label__ = 39; break; } else { __label__ = 42; break; } //@line 1148 "xmltok.c"
      case 39: // $bb38
        var $144=HEAP[$standalone_addr]; //@line 1149 "xmltok.c"
        var $145=($144)!=0; //@line 1149 "xmltok.c"
        if ($145) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 1149 "xmltok.c"
      case 40: // $bb39
        var $146=HEAP[$standalone_addr]; //@line 1150 "xmltok.c"
        HEAP[$146]=0; //@line 1150 "xmltok.c"
        __label__ = 41; break; //@line 1150 "xmltok.c"
      case 41: // $bb40
        __label__ = 43; break; //@line 1150 "xmltok.c"
      case 42: // $bb41
        var $147=HEAP[$val]; //@line 1153 "xmltok.c"
        var $148=HEAP[$badPtr_addr]; //@line 1153 "xmltok.c"
        HEAP[$148]=$147; //@line 1153 "xmltok.c"
        HEAP[$0]=0; //@line 1154 "xmltok.c"
        __label__ = 49; break; //@line 1154 "xmltok.c"
      case 43: // $bb42
        __label__ = 45; break; //@line 1154 "xmltok.c"
      case 44: // $bb43
        var $149=HEAP[$ptr_addr]; //@line 1157 "xmltok.c"
        var $150=HEAP[$enc_addr]; //@line 1157 "xmltok.c"
        var $151=(($150+64)&4294967295); //@line 1157 "xmltok.c"
        var $152=HEAP[$151]; //@line 1157 "xmltok.c"
        var $153=(($149+$152)&4294967295); //@line 1157 "xmltok.c"
        HEAP[$ptr_addr]=$153; //@line 1157 "xmltok.c"
        __label__ = 45; break; //@line 1157 "xmltok.c"
      case 45: // $bb44
        var $154=HEAP[$ptr_addr]; //@line 1156 "xmltok.c"
        var $155=HEAP[$enc_addr]; //@line 1156 "xmltok.c"
        var $156=HEAP[$end_addr]; //@line 1156 "xmltok.c"
        var $157=_toAscii($155, $154, $156); //@line 1156 "xmltok.c"
        var $158=_isSpace($157); //@line 1156 "xmltok.c"
        var $159=((($158))|0)!=0; //@line 1156 "xmltok.c"
        if ($159) { __label__ = 44; break; } else { __label__ = 46; break; } //@line 1156 "xmltok.c"
      case 46: // $bb45
        var $160=HEAP[$ptr_addr]; //@line 1158 "xmltok.c"
        var $161=HEAP[$end_addr]; //@line 1158 "xmltok.c"
        var $162=($160)!=($161); //@line 1158 "xmltok.c"
        if ($162) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 1158 "xmltok.c"
      case 47: // $bb46
        var $163=HEAP[$ptr_addr]; //@line 1159 "xmltok.c"
        var $164=HEAP[$badPtr_addr]; //@line 1159 "xmltok.c"
        HEAP[$164]=$163; //@line 1159 "xmltok.c"
        HEAP[$0]=0; //@line 1160 "xmltok.c"
        __label__ = 49; break; //@line 1160 "xmltok.c"
      case 48: // $bb47
        HEAP[$0]=1; //@line 1162 "xmltok.c"
        __label__ = 49; break; //@line 1162 "xmltok.c"
      case 49: // $bb48
        var $165=HEAP[$0]; //@line 1096 "xmltok.c"
        HEAP[$retval]=$165; //@line 1096 "xmltok.c"
        __label__ = 50; break; //@line 1096 "xmltok.c"
      case 50: // $return
        var $retval49=HEAP[$retval]; //@line 1096 "xmltok.c"
        STACKTOP = __stackBase__;
        return $retval49; //@line 1096 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _checkCharRefNumber($result) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $result_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$result_addr]=$result;
        var $1=HEAP[$result_addr]; //@line 1168 "xmltok.c"
        var $2=((($1))|0) >> 8; //@line 1168 "xmltok.c"
        if ($2 == 0) {
          __label__ = 2; break;
        }
        else if ($2 == 216) {
          __label__ = 1; break;
        }
        else if ($2 == 217) {
          __label__ = 1; break;
        }
        else if ($2 == 218) {
          __label__ = 1; break;
        }
        else if ($2 == 219) {
          __label__ = 1; break;
        }
        else if ($2 == 220) {
          __label__ = 1; break;
        }
        else if ($2 == 221) {
          __label__ = 1; break;
        }
        else if ($2 == 222) {
          __label__ = 1; break;
        }
        else if ($2 == 223) {
          __label__ = 1; break;
        }
        else if ($2 == 255) {
          __label__ = 5; break;
        }
        else {
        __label__ = 8; break;
        }
        
      case 1: // $bb
        HEAP[$0]=-1; //@line 1171 "xmltok.c"
        __label__ = 9; break; //@line 1171 "xmltok.c"
      case 2: // $bb1
        var $3=HEAP[$result_addr]; //@line 1173 "xmltok.c"
        var $4=((((_latin1_encoding+72)&4294967295)+$3)&4294967295); //@line 1173 "xmltok.c"
        var $5=HEAP[$4]; //@line 1173 "xmltok.c"
        var $6=reSign(($5), 8, 0)==0; //@line 1173 "xmltok.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1173 "xmltok.c"
      case 3: // $bb2
        HEAP[$0]=-1; //@line 1174 "xmltok.c"
        __label__ = 9; break; //@line 1174 "xmltok.c"
      case 4: // $bb3
        __label__ = 8; break; //@line 1174 "xmltok.c"
      case 5: // $bb4
        var $7=HEAP[$result_addr]; //@line 1177 "xmltok.c"
        var $8=((($7))|0)==65534; //@line 1177 "xmltok.c"
        if ($8) { __label__ = 7; break; } else { __label__ = 6; break; } //@line 1177 "xmltok.c"
      case 6: // $bb5
        var $9=HEAP[$result_addr]; //@line 1177 "xmltok.c"
        var $10=((($9))|0)==65535; //@line 1177 "xmltok.c"
        if ($10) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1177 "xmltok.c"
      case 7: // $bb6
        HEAP[$0]=-1; //@line 1178 "xmltok.c"
        __label__ = 9; break; //@line 1178 "xmltok.c"
      case 8: // $bb7
        var $11=HEAP[$result_addr]; //@line 1181 "xmltok.c"
        HEAP[$0]=$11; //@line 1181 "xmltok.c"
        __label__ = 9; break; //@line 1181 "xmltok.c"
      case 9: // $bb8
        var $12=HEAP[$0]; //@line 1171 "xmltok.c"
        HEAP[$retval]=$12; //@line 1171 "xmltok.c"
        __label__ = 10; break; //@line 1171 "xmltok.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 1171 "xmltok.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 1171 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XmlUtf8Encode($c, $buf) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $c_addr=__stackBase__;
        var $buf_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$c_addr]=$c;
        HEAP[$buf_addr]=$buf;
        var $1=HEAP[$c_addr]; //@line 1194 "xmltok.c"
        var $2=((($1))|0) < 0; //@line 1194 "xmltok.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1194 "xmltok.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 1195 "xmltok.c"
        __label__ = 11; break; //@line 1195 "xmltok.c"
      case 2: // $bb1
        var $3=HEAP[$c_addr]; //@line 1196 "xmltok.c"
        var $4=((($3))|0) <= 127; //@line 1196 "xmltok.c"
        if ($4) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1196 "xmltok.c"
      case 3: // $bb2
        var $5=HEAP[$c_addr]; //@line 1197 "xmltok.c"
        var $6=((($5)) & 255); //@line 1197 "xmltok.c"
        var $7=HEAP[$buf_addr]; //@line 1197 "xmltok.c"
        var $8=(($7)&4294967295); //@line 1197 "xmltok.c"
        HEAP[$8]=$6; //@line 1197 "xmltok.c"
        HEAP[$0]=1; //@line 1198 "xmltok.c"
        __label__ = 11; break; //@line 1198 "xmltok.c"
      case 4: // $bb3
        var $9=HEAP[$c_addr]; //@line 1200 "xmltok.c"
        var $10=((($9))|0) <= 2047; //@line 1200 "xmltok.c"
        if ($10) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1200 "xmltok.c"
      case 5: // $bb4
        var $11=HEAP[$c_addr]; //@line 1201 "xmltok.c"
        var $12=((($11))|0) >> 6; //@line 1201 "xmltok.c"
        var $13=((($12)) & 255); //@line 1201 "xmltok.c"
        var $14=($13) | -64; //@line 1201 "xmltok.c"
        var $15=HEAP[$buf_addr]; //@line 1201 "xmltok.c"
        var $16=(($15)&4294967295); //@line 1201 "xmltok.c"
        HEAP[$16]=$14; //@line 1201 "xmltok.c"
        var $17=HEAP[$c_addr]; //@line 1202 "xmltok.c"
        var $18=((($17)) & 255); //@line 1202 "xmltok.c"
        var $19=($18) & 63; //@line 1202 "xmltok.c"
        var $20=($19) | -128; //@line 1202 "xmltok.c"
        var $21=HEAP[$buf_addr]; //@line 1202 "xmltok.c"
        var $22=(($21+1)&4294967295); //@line 1202 "xmltok.c"
        HEAP[$22]=$20; //@line 1202 "xmltok.c"
        HEAP[$0]=2; //@line 1203 "xmltok.c"
        __label__ = 11; break; //@line 1203 "xmltok.c"
      case 6: // $bb5
        var $23=HEAP[$c_addr]; //@line 1205 "xmltok.c"
        var $24=((($23))|0) <= 65535; //@line 1205 "xmltok.c"
        if ($24) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1205 "xmltok.c"
      case 7: // $bb6
        var $25=HEAP[$c_addr]; //@line 1206 "xmltok.c"
        var $26=((($25))|0) >> 12; //@line 1206 "xmltok.c"
        var $27=((($26)) & 255); //@line 1206 "xmltok.c"
        var $28=($27) | -32; //@line 1206 "xmltok.c"
        var $29=HEAP[$buf_addr]; //@line 1206 "xmltok.c"
        var $30=(($29)&4294967295); //@line 1206 "xmltok.c"
        HEAP[$30]=$28; //@line 1206 "xmltok.c"
        var $31=HEAP[$c_addr]; //@line 1207 "xmltok.c"
        var $32=((($31))|0) >> 6; //@line 1207 "xmltok.c"
        var $33=((($32)) & 255); //@line 1207 "xmltok.c"
        var $34=($33) & 63; //@line 1207 "xmltok.c"
        var $35=($34) | -128; //@line 1207 "xmltok.c"
        var $36=HEAP[$buf_addr]; //@line 1207 "xmltok.c"
        var $37=(($36+1)&4294967295); //@line 1207 "xmltok.c"
        HEAP[$37]=$35; //@line 1207 "xmltok.c"
        var $38=HEAP[$c_addr]; //@line 1208 "xmltok.c"
        var $39=((($38)) & 255); //@line 1208 "xmltok.c"
        var $40=($39) & 63; //@line 1208 "xmltok.c"
        var $41=($40) | -128; //@line 1208 "xmltok.c"
        var $42=HEAP[$buf_addr]; //@line 1208 "xmltok.c"
        var $43=(($42+2)&4294967295); //@line 1208 "xmltok.c"
        HEAP[$43]=$41; //@line 1208 "xmltok.c"
        HEAP[$0]=3; //@line 1209 "xmltok.c"
        __label__ = 11; break; //@line 1209 "xmltok.c"
      case 8: // $bb7
        var $44=HEAP[$c_addr]; //@line 1211 "xmltok.c"
        var $45=((($44))|0) <= 1114111; //@line 1211 "xmltok.c"
        if ($45) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1211 "xmltok.c"
      case 9: // $bb8
        var $46=HEAP[$c_addr]; //@line 1212 "xmltok.c"
        var $47=((($46))|0) >> 18; //@line 1212 "xmltok.c"
        var $48=((($47)) & 255); //@line 1212 "xmltok.c"
        var $49=($48) | -16; //@line 1212 "xmltok.c"
        var $50=HEAP[$buf_addr]; //@line 1212 "xmltok.c"
        var $51=(($50)&4294967295); //@line 1212 "xmltok.c"
        HEAP[$51]=$49; //@line 1212 "xmltok.c"
        var $52=HEAP[$c_addr]; //@line 1213 "xmltok.c"
        var $53=((($52))|0) >> 12; //@line 1213 "xmltok.c"
        var $54=((($53)) & 255); //@line 1213 "xmltok.c"
        var $55=($54) & 63; //@line 1213 "xmltok.c"
        var $56=($55) | -128; //@line 1213 "xmltok.c"
        var $57=HEAP[$buf_addr]; //@line 1213 "xmltok.c"
        var $58=(($57+1)&4294967295); //@line 1213 "xmltok.c"
        HEAP[$58]=$56; //@line 1213 "xmltok.c"
        var $59=HEAP[$c_addr]; //@line 1214 "xmltok.c"
        var $60=((($59))|0) >> 6; //@line 1214 "xmltok.c"
        var $61=((($60)) & 255); //@line 1214 "xmltok.c"
        var $62=($61) & 63; //@line 1214 "xmltok.c"
        var $63=($62) | -128; //@line 1214 "xmltok.c"
        var $64=HEAP[$buf_addr]; //@line 1214 "xmltok.c"
        var $65=(($64+2)&4294967295); //@line 1214 "xmltok.c"
        HEAP[$65]=$63; //@line 1214 "xmltok.c"
        var $66=HEAP[$c_addr]; //@line 1215 "xmltok.c"
        var $67=((($66)) & 255); //@line 1215 "xmltok.c"
        var $68=($67) & 63; //@line 1215 "xmltok.c"
        var $69=($68) | -128; //@line 1215 "xmltok.c"
        var $70=HEAP[$buf_addr]; //@line 1215 "xmltok.c"
        var $71=(($70+3)&4294967295); //@line 1215 "xmltok.c"
        HEAP[$71]=$69; //@line 1215 "xmltok.c"
        HEAP[$0]=4; //@line 1216 "xmltok.c"
        __label__ = 11; break; //@line 1216 "xmltok.c"
      case 10: // $bb9
        HEAP[$0]=0; //@line 1218 "xmltok.c"
        __label__ = 11; break; //@line 1218 "xmltok.c"
      case 11: // $bb10
        var $72=HEAP[$0]; //@line 1195 "xmltok.c"
        HEAP[$retval]=$72; //@line 1195 "xmltok.c"
        __label__ = 12; break; //@line 1195 "xmltok.c"
      case 12: // $return
        var $retval11=HEAP[$retval]; //@line 1195 "xmltok.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 1195 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XmlUtf16Encode($charNum, $buf) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $charNum_addr=__stackBase__;
        var $buf_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$charNum_addr]=$charNum;
        HEAP[$buf_addr]=$buf;
        var $1=HEAP[$charNum_addr]; //@line 1224 "xmltok.c"
        var $2=((($1))|0) < 0; //@line 1224 "xmltok.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1224 "xmltok.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 1225 "xmltok.c"
        __label__ = 7; break; //@line 1225 "xmltok.c"
      case 2: // $bb1
        var $3=HEAP[$charNum_addr]; //@line 1226 "xmltok.c"
        var $4=((($3))|0) <= 65535; //@line 1226 "xmltok.c"
        if ($4) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1226 "xmltok.c"
      case 3: // $bb2
        var $5=HEAP[$charNum_addr]; //@line 1227 "xmltok.c"
        var $6=((($5)) & 65535); //@line 1227 "xmltok.c"
        var $7=HEAP[$buf_addr]; //@line 1227 "xmltok.c"
        var $8=(($7)&4294967295); //@line 1227 "xmltok.c"
        HEAP[$8]=$6; //@line 1227 "xmltok.c"
        HEAP[$0]=1; //@line 1228 "xmltok.c"
        __label__ = 7; break; //@line 1228 "xmltok.c"
      case 4: // $bb3
        var $9=HEAP[$charNum_addr]; //@line 1230 "xmltok.c"
        var $10=((($9))|0) <= 1114111; //@line 1230 "xmltok.c"
        if ($10) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1230 "xmltok.c"
      case 5: // $bb4
        var $11=HEAP[$charNum_addr]; //@line 1231 "xmltok.c"
        var $12=((($11) - 65536)&4294967295); //@line 1231 "xmltok.c"
        HEAP[$charNum_addr]=$12; //@line 1231 "xmltok.c"
        var $13=HEAP[$charNum_addr]; //@line 1232 "xmltok.c"
        var $14=((($13))|0) >> 10; //@line 1232 "xmltok.c"
        var $15=((($14)) & 65535); //@line 1232 "xmltok.c"
        var $16=((($15) + -10240)&65535); //@line 1232 "xmltok.c"
        var $17=HEAP[$buf_addr]; //@line 1232 "xmltok.c"
        var $18=(($17)&4294967295); //@line 1232 "xmltok.c"
        HEAP[$18]=$16; //@line 1232 "xmltok.c"
        var $19=HEAP[$charNum_addr]; //@line 1233 "xmltok.c"
        var $20=((($19)) & 65535); //@line 1233 "xmltok.c"
        var $21=($20) & 1023; //@line 1233 "xmltok.c"
        var $22=((($21) + -9216)&65535); //@line 1233 "xmltok.c"
        var $23=HEAP[$buf_addr]; //@line 1233 "xmltok.c"
        var $24=(($23+2)&4294967295); //@line 1233 "xmltok.c"
        HEAP[$24]=$22; //@line 1233 "xmltok.c"
        HEAP[$0]=2; //@line 1234 "xmltok.c"
        __label__ = 7; break; //@line 1234 "xmltok.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 1236 "xmltok.c"
        __label__ = 7; break; //@line 1236 "xmltok.c"
      case 7: // $bb6
        var $25=HEAP[$0]; //@line 1225 "xmltok.c"
        HEAP[$retval]=$25; //@line 1225 "xmltok.c"
        __label__ = 8; break; //@line 1225 "xmltok.c"
      case 8: // $return
        var $retval7=HEAP[$retval]; //@line 1225 "xmltok.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 1225 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XmlSizeOfUnknownEncoding() {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval=__stackBase__;
        var $0=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$0]=1908; //@line 1252 "xmltok.c"
        var $1=HEAP[$0]; //@line 1252 "xmltok.c"
        HEAP[$retval]=$1; //@line 1252 "xmltok.c"
        __label__ = 1; break; //@line 1252 "xmltok.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 1252 "xmltok.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 1252 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _unknown_isName($enc, $p) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $p_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $uenc=__stackBase__+16;
        var $c=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$p_addr]=$p;
        var $1=HEAP[$enc_addr]; //@line 1258 "xmltok.c"
        var $2=$1; //@line 1258 "xmltok.c"
        HEAP[$uenc]=$2; //@line 1258 "xmltok.c"
        var $3=HEAP[$uenc]; //@line 1259 "xmltok.c"
        var $4=(($3+364)&4294967295); //@line 1259 "xmltok.c"
        var $5=HEAP[$4]; //@line 1259 "xmltok.c"
        var $6=HEAP[$uenc]; //@line 1259 "xmltok.c"
        var $7=(($6+368)&4294967295); //@line 1259 "xmltok.c"
        var $8=HEAP[$7]; //@line 1259 "xmltok.c"
        var $9=HEAP[$p_addr]; //@line 1259 "xmltok.c"
        var $10=FUNCTION_TABLE[$5]($8, $9); //@line 1259 "xmltok.c"
        HEAP[$c]=$10; //@line 1259 "xmltok.c"
        var $11=HEAP[$c]; //@line 1260 "xmltok.c"
        var $12=($11) & -65536; //@line 1260 "xmltok.c"
        var $13=((($12))|0)!=0; //@line 1260 "xmltok.c"
        if ($13) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1260 "xmltok.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 1261 "xmltok.c"
        __label__ = 3; break; //@line 1261 "xmltok.c"
      case 2: // $bb1
        var $14=HEAP[$c]; //@line 1262 "xmltok.c"
        var $15=((($14))|0) >> 8; //@line 1262 "xmltok.c"
        var $16=((_namePages+$15)&4294967295); //@line 1262 "xmltok.c"
        var $17=HEAP[$16]; //@line 1262 "xmltok.c"
        var $18=unSign(($17), 8, 0); //@line 1262 "xmltok.c"
        var $19=($18) << 3; //@line 1262 "xmltok.c"
        var $20=HEAP[$c]; //@line 1262 "xmltok.c"
        var $21=($20) & 255; //@line 1262 "xmltok.c"
        var $22=((($21))|0) >> 5; //@line 1262 "xmltok.c"
        var $23=((($19) + ($22))&4294967295); //@line 1262 "xmltok.c"
        var $24=((_namingBitmap+$23*4)&4294967295); //@line 1262 "xmltok.c"
        var $25=HEAP[$24]; //@line 1262 "xmltok.c"
        var $26=HEAP[$c]; //@line 1262 "xmltok.c"
        var $27=($26) & 31; //@line 1262 "xmltok.c"
        var $28=1 << ($27); //@line 1262 "xmltok.c"
        var $29=($25) & ($28); //@line 1262 "xmltok.c"
        HEAP[$0]=$29; //@line 1262 "xmltok.c"
        __label__ = 3; break; //@line 1262 "xmltok.c"
      case 3: // $bb2
        var $30=HEAP[$0]; //@line 1261 "xmltok.c"
        HEAP[$retval]=$30; //@line 1261 "xmltok.c"
        __label__ = 4; break; //@line 1261 "xmltok.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 1261 "xmltok.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 1261 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _unknown_isNmstrt($enc, $p) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $p_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $uenc=__stackBase__+16;
        var $c=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$p_addr]=$p;
        var $1=HEAP[$enc_addr]; //@line 1268 "xmltok.c"
        var $2=$1; //@line 1268 "xmltok.c"
        HEAP[$uenc]=$2; //@line 1268 "xmltok.c"
        var $3=HEAP[$uenc]; //@line 1269 "xmltok.c"
        var $4=(($3+364)&4294967295); //@line 1269 "xmltok.c"
        var $5=HEAP[$4]; //@line 1269 "xmltok.c"
        var $6=HEAP[$uenc]; //@line 1269 "xmltok.c"
        var $7=(($6+368)&4294967295); //@line 1269 "xmltok.c"
        var $8=HEAP[$7]; //@line 1269 "xmltok.c"
        var $9=HEAP[$p_addr]; //@line 1269 "xmltok.c"
        var $10=FUNCTION_TABLE[$5]($8, $9); //@line 1269 "xmltok.c"
        HEAP[$c]=$10; //@line 1269 "xmltok.c"
        var $11=HEAP[$c]; //@line 1270 "xmltok.c"
        var $12=($11) & -65536; //@line 1270 "xmltok.c"
        var $13=((($12))|0)!=0; //@line 1270 "xmltok.c"
        if ($13) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1270 "xmltok.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 1271 "xmltok.c"
        __label__ = 3; break; //@line 1271 "xmltok.c"
      case 2: // $bb1
        var $14=HEAP[$c]; //@line 1272 "xmltok.c"
        var $15=((($14))|0) >> 8; //@line 1272 "xmltok.c"
        var $16=((_nmstrtPages+$15)&4294967295); //@line 1272 "xmltok.c"
        var $17=HEAP[$16]; //@line 1272 "xmltok.c"
        var $18=unSign(($17), 8, 0); //@line 1272 "xmltok.c"
        var $19=($18) << 3; //@line 1272 "xmltok.c"
        var $20=HEAP[$c]; //@line 1272 "xmltok.c"
        var $21=($20) & 255; //@line 1272 "xmltok.c"
        var $22=((($21))|0) >> 5; //@line 1272 "xmltok.c"
        var $23=((($19) + ($22))&4294967295); //@line 1272 "xmltok.c"
        var $24=((_namingBitmap+$23*4)&4294967295); //@line 1272 "xmltok.c"
        var $25=HEAP[$24]; //@line 1272 "xmltok.c"
        var $26=HEAP[$c]; //@line 1272 "xmltok.c"
        var $27=($26) & 31; //@line 1272 "xmltok.c"
        var $28=1 << ($27); //@line 1272 "xmltok.c"
        var $29=($25) & ($28); //@line 1272 "xmltok.c"
        HEAP[$0]=$29; //@line 1272 "xmltok.c"
        __label__ = 3; break; //@line 1272 "xmltok.c"
      case 3: // $bb2
        var $30=HEAP[$0]; //@line 1271 "xmltok.c"
        HEAP[$retval]=$30; //@line 1271 "xmltok.c"
        __label__ = 4; break; //@line 1271 "xmltok.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 1271 "xmltok.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 1271 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _unknown_isInvalid($enc, $p) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $p_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $iftmp_1249=__stackBase__+12;
        var $0=__stackBase__+16;
        var $uenc=__stackBase__+20;
        var $c=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$p_addr]=$p;
        var $1=HEAP[$enc_addr]; //@line 1278 "xmltok.c"
        var $2=$1; //@line 1278 "xmltok.c"
        HEAP[$uenc]=$2; //@line 1278 "xmltok.c"
        var $3=HEAP[$uenc]; //@line 1279 "xmltok.c"
        var $4=(($3+364)&4294967295); //@line 1279 "xmltok.c"
        var $5=HEAP[$4]; //@line 1279 "xmltok.c"
        var $6=HEAP[$uenc]; //@line 1279 "xmltok.c"
        var $7=(($6+368)&4294967295); //@line 1279 "xmltok.c"
        var $8=HEAP[$7]; //@line 1279 "xmltok.c"
        var $9=HEAP[$p_addr]; //@line 1279 "xmltok.c"
        var $10=FUNCTION_TABLE[$5]($8, $9); //@line 1279 "xmltok.c"
        HEAP[$c]=$10; //@line 1279 "xmltok.c"
        var $11=HEAP[$c]; //@line 1280 "xmltok.c"
        var $12=($11) & -65536; //@line 1280 "xmltok.c"
        var $13=((($12))|0)!=0; //@line 1280 "xmltok.c"
        if ($13) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 1280 "xmltok.c"
      case 1: // $bb
        var $14=HEAP[$c]; //@line 1280 "xmltok.c"
        var $15=_checkCharRefNumber($14); //@line 1280 "xmltok.c"
        var $16=((($15))|0) < 0; //@line 1280 "xmltok.c"
        if ($16) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1280 "xmltok.c"
      case 2: // $bb1
        HEAP[$iftmp_1249]=1; //@line 1280 "xmltok.c"
        __label__ = 4; break; //@line 1280 "xmltok.c"
      case 3: // $bb2
        HEAP[$iftmp_1249]=0; //@line 1280 "xmltok.c"
        __label__ = 4; break; //@line 1280 "xmltok.c"
      case 4: // $bb3
        var $17=HEAP[$iftmp_1249]; //@line 1280 "xmltok.c"
        HEAP[$0]=$17; //@line 1280 "xmltok.c"
        var $18=HEAP[$0]; //@line 1280 "xmltok.c"
        HEAP[$retval]=$18; //@line 1280 "xmltok.c"
        __label__ = 5; break; //@line 1280 "xmltok.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 1280 "xmltok.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 1280 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _unknown_toUtf8($enc, $fromP, $fromLim, $toP, $toLim) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $fromP_addr=__stackBase__+4;
        var $fromLim_addr=__stackBase__+8;
        var $toP_addr=__stackBase__+12;
        var $toLim_addr=__stackBase__+16;
        var $uenc=__stackBase__+20;
        var $buf=__stackBase__+24;
        var $utf8=__stackBase__+28;
        var $n=__stackBase__+32;
        var $c=__stackBase__+36;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$fromP_addr]=$fromP;
        HEAP[$fromLim_addr]=$fromLim;
        HEAP[$toP_addr]=$toP;
        HEAP[$toLim_addr]=$toLim;
        var $0=HEAP[$enc_addr]; //@line 1288 "xmltok.c"
        var $1=$0; //@line 1288 "xmltok.c"
        HEAP[$uenc]=$1; //@line 1288 "xmltok.c"
        __label__ = 1; break; //@line 1288 "xmltok.c"
      case 1: // $bb
        var $2=HEAP[$fromP_addr]; //@line 1293 "xmltok.c"
        var $3=HEAP[$2]; //@line 1293 "xmltok.c"
        var $4=HEAP[$fromLim_addr]; //@line 1293 "xmltok.c"
        var $5=($3)==($4); //@line 1293 "xmltok.c"
        if ($5) { __label__ = 9; break; } else { __label__ = 2; break; } //@line 1293 "xmltok.c"
      case 2: // $bb1
        var $6=HEAP[$fromP_addr]; //@line 1295 "xmltok.c"
        var $7=HEAP[$6]; //@line 1295 "xmltok.c"
        var $8=HEAP[$7]; //@line 1295 "xmltok.c"
        var $9=unSign(($8), 8, 0); //@line 1295 "xmltok.c"
        var $10=HEAP[$uenc]; //@line 1295 "xmltok.c"
        var $11=(($10+884)&4294967295); //@line 1295 "xmltok.c"
        var $12=(($11+$9*4)&4294967295); //@line 1295 "xmltok.c"
        var $13=(($12)&4294967295); //@line 1295 "xmltok.c"
        HEAP[$utf8]=$13; //@line 1295 "xmltok.c"
        var $14=HEAP[$utf8]; //@line 1296 "xmltok.c"
        var $15=HEAP[$14]; //@line 1296 "xmltok.c"
        var $16=reSign(($15), 8, 0); //@line 1296 "xmltok.c"
        HEAP[$n]=$16; //@line 1296 "xmltok.c"
        var $17=HEAP[$utf8]; //@line 1296 "xmltok.c"
        var $18=(($17+1)&4294967295); //@line 1296 "xmltok.c"
        HEAP[$utf8]=$18; //@line 1296 "xmltok.c"
        var $19=HEAP[$n]; //@line 1297 "xmltok.c"
        var $20=((($19))|0)==0; //@line 1297 "xmltok.c"
        if ($20) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 1297 "xmltok.c"
      case 3: // $bb2
        var $21=HEAP[$uenc]; //@line 1298 "xmltok.c"
        var $22=(($21+364)&4294967295); //@line 1298 "xmltok.c"
        var $23=HEAP[$22]; //@line 1298 "xmltok.c"
        var $24=HEAP[$fromP_addr]; //@line 1298 "xmltok.c"
        var $25=HEAP[$24]; //@line 1298 "xmltok.c"
        var $26=HEAP[$uenc]; //@line 1298 "xmltok.c"
        var $27=(($26+368)&4294967295); //@line 1298 "xmltok.c"
        var $28=HEAP[$27]; //@line 1298 "xmltok.c"
        var $29=FUNCTION_TABLE[$23]($28, $25); //@line 1298 "xmltok.c"
        HEAP[$c]=$29; //@line 1298 "xmltok.c"
        var $30=HEAP[$c]; //@line 1299 "xmltok.c"
        var $buf3=$buf; //@line 1299 "xmltok.c"
        var $31=_PyExpat_XmlUtf8Encode($30, $buf3); //@line 1299 "xmltok.c"
        HEAP[$n]=$31; //@line 1299 "xmltok.c"
        var $32=HEAP[$toLim_addr]; //@line 1300 "xmltok.c"
        var $33=($32); //@line 1300 "xmltok.c"
        var $34=HEAP[$toP_addr]; //@line 1300 "xmltok.c"
        var $35=HEAP[$34]; //@line 1300 "xmltok.c"
        var $36=($35); //@line 1300 "xmltok.c"
        var $37=((($33) - ($36))&4294967295); //@line 1300 "xmltok.c"
        var $38=HEAP[$n]; //@line 1300 "xmltok.c"
        var $39=((($37))|0) < ((($38))|0); //@line 1300 "xmltok.c"
        if ($39) { __label__ = 9; break; } else { __label__ = 4; break; } //@line 1300 "xmltok.c"
      case 4: // $bb4
        var $buf5=$buf; //@line 1302 "xmltok.c"
        HEAP[$utf8]=$buf5; //@line 1302 "xmltok.c"
        var $40=HEAP[$fromP_addr]; //@line 1303 "xmltok.c"
        var $41=HEAP[$40]; //@line 1303 "xmltok.c"
        var $42=HEAP[$enc_addr]; //@line 1303 "xmltok.c"
        var $43=$42; //@line 1303 "xmltok.c"
        var $44=HEAP[$fromP_addr]; //@line 1303 "xmltok.c"
        var $45=HEAP[$44]; //@line 1303 "xmltok.c"
        var $46=HEAP[$45]; //@line 1303 "xmltok.c"
        var $47=unSign(($46), 8, 0); //@line 1303 "xmltok.c"
        var $48=(($43+72)&4294967295); //@line 1303 "xmltok.c"
        var $49=(($48+$47)&4294967295); //@line 1303 "xmltok.c"
        var $50=HEAP[$49]; //@line 1303 "xmltok.c"
        var $51=unSign(($50), 8, 0); //@line 1303 "xmltok.c"
        var $52=((($51) - 3)&4294967295); //@line 1303 "xmltok.c"
        var $53=(($41+$52)&4294967295); //@line 1303 "xmltok.c"
        var $54=HEAP[$fromP_addr]; //@line 1303 "xmltok.c"
        HEAP[$54]=$53; //@line 1303 "xmltok.c"
        __label__ = 7; break; //@line 1303 "xmltok.c"
      case 5: // $bb6
        var $55=HEAP[$toLim_addr]; //@line 1307 "xmltok.c"
        var $56=($55); //@line 1307 "xmltok.c"
        var $57=HEAP[$toP_addr]; //@line 1307 "xmltok.c"
        var $58=HEAP[$57]; //@line 1307 "xmltok.c"
        var $59=($58); //@line 1307 "xmltok.c"
        var $60=((($56) - ($59))&4294967295); //@line 1307 "xmltok.c"
        var $61=HEAP[$n]; //@line 1307 "xmltok.c"
        var $62=((($60))|0) < ((($61))|0); //@line 1307 "xmltok.c"
        if ($62) { __label__ = 9; break; } else { __label__ = 6; break; } //@line 1307 "xmltok.c"
      case 6: // $bb7
        var $63=HEAP[$fromP_addr]; //@line 1309 "xmltok.c"
        var $64=HEAP[$63]; //@line 1309 "xmltok.c"
        var $65=(($64+1)&4294967295); //@line 1309 "xmltok.c"
        var $66=HEAP[$fromP_addr]; //@line 1309 "xmltok.c"
        HEAP[$66]=$65; //@line 1309 "xmltok.c"
        __label__ = 7; break; //@line 1309 "xmltok.c"
      case 7: // $bb8
        var $67=HEAP[$toP_addr]; //@line 1312 "xmltok.c"
        var $68=HEAP[$67]; //@line 1312 "xmltok.c"
        var $69=HEAP[$utf8]; //@line 1312 "xmltok.c"
        var $70=HEAP[$69]; //@line 1312 "xmltok.c"
        HEAP[$68]=$70; //@line 1312 "xmltok.c"
        var $71=(($68+1)&4294967295); //@line 1312 "xmltok.c"
        var $72=HEAP[$toP_addr]; //@line 1312 "xmltok.c"
        HEAP[$72]=$71; //@line 1312 "xmltok.c"
        var $73=HEAP[$utf8]; //@line 1312 "xmltok.c"
        var $74=(($73+1)&4294967295); //@line 1312 "xmltok.c"
        HEAP[$utf8]=$74; //@line 1312 "xmltok.c"
        var $75=HEAP[$n]; //@line 1313 "xmltok.c"
        var $76=((($75) - 1)&4294967295); //@line 1313 "xmltok.c"
        HEAP[$n]=$76; //@line 1313 "xmltok.c"
        var $77=HEAP[$n]; //@line 1313 "xmltok.c"
        var $78=((($77))|0)!=0; //@line 1313 "xmltok.c"
        if ($78) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1313 "xmltok.c"
      case 8: // $bb9
        __label__ = 1; break; //@line 1313 "xmltok.c"
      case 9: // $bb10
        __label__ = 10; break; //@line 1315 "xmltok.c"
      case 10: // $return
        STACKTOP = __stackBase__;
        return; //@line 1315 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _unknown_toUtf16($enc, $fromP, $fromLim, $toP, $toLim) {
    var __stackBase__  = STACKTOP; STACKTOP += 26; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 26);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $fromP_addr=__stackBase__+4;
        var $fromLim_addr=__stackBase__+8;
        var $toP_addr=__stackBase__+12;
        var $toLim_addr=__stackBase__+16;
        var $uenc=__stackBase__+20;
        var $c=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$fromP_addr]=$fromP;
        HEAP[$fromLim_addr]=$fromLim;
        HEAP[$toP_addr]=$toP;
        HEAP[$toLim_addr]=$toLim;
        var $0=HEAP[$enc_addr]; //@line 1322 "xmltok.c"
        var $1=$0; //@line 1322 "xmltok.c"
        HEAP[$uenc]=$1; //@line 1322 "xmltok.c"
        __label__ = 5; break; //@line 1322 "xmltok.c"
      case 1: // $bb
        var $2=HEAP[$fromP_addr]; //@line 1324 "xmltok.c"
        var $3=HEAP[$2]; //@line 1324 "xmltok.c"
        var $4=HEAP[$3]; //@line 1324 "xmltok.c"
        var $5=unSign(($4), 8, 0); //@line 1324 "xmltok.c"
        var $6=HEAP[$uenc]; //@line 1324 "xmltok.c"
        var $7=(($6+372)&4294967295); //@line 1324 "xmltok.c"
        var $8=(($7+$5*2)&4294967295); //@line 1324 "xmltok.c"
        var $9=HEAP[$8]; //@line 1324 "xmltok.c"
        HEAP[$c]=$9; //@line 1324 "xmltok.c"
        var $10=HEAP[$c]; //@line 1325 "xmltok.c"
        var $11=reSign(($10), 16, 0)==0; //@line 1325 "xmltok.c"
        if ($11) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1325 "xmltok.c"
      case 2: // $bb1
        var $12=HEAP[$uenc]; //@line 1326 "xmltok.c"
        var $13=(($12+364)&4294967295); //@line 1326 "xmltok.c"
        var $14=HEAP[$13]; //@line 1326 "xmltok.c"
        var $15=HEAP[$fromP_addr]; //@line 1326 "xmltok.c"
        var $16=HEAP[$15]; //@line 1326 "xmltok.c"
        var $17=HEAP[$uenc]; //@line 1326 "xmltok.c"
        var $18=(($17+368)&4294967295); //@line 1326 "xmltok.c"
        var $19=HEAP[$18]; //@line 1326 "xmltok.c"
        var $20=FUNCTION_TABLE[$14]($19, $16); //@line 1326 "xmltok.c"
        var $21=((($20)) & 65535); //@line 1326 "xmltok.c"
        HEAP[$c]=$21; //@line 1326 "xmltok.c"
        var $22=HEAP[$fromP_addr]; //@line 1328 "xmltok.c"
        var $23=HEAP[$22]; //@line 1328 "xmltok.c"
        var $24=HEAP[$enc_addr]; //@line 1328 "xmltok.c"
        var $25=$24; //@line 1328 "xmltok.c"
        var $26=HEAP[$fromP_addr]; //@line 1328 "xmltok.c"
        var $27=HEAP[$26]; //@line 1328 "xmltok.c"
        var $28=HEAP[$27]; //@line 1328 "xmltok.c"
        var $29=unSign(($28), 8, 0); //@line 1328 "xmltok.c"
        var $30=(($25+72)&4294967295); //@line 1328 "xmltok.c"
        var $31=(($30+$29)&4294967295); //@line 1328 "xmltok.c"
        var $32=HEAP[$31]; //@line 1328 "xmltok.c"
        var $33=unSign(($32), 8, 0); //@line 1328 "xmltok.c"
        var $34=((($33) - 3)&4294967295); //@line 1328 "xmltok.c"
        var $35=(($23+$34)&4294967295); //@line 1328 "xmltok.c"
        var $36=HEAP[$fromP_addr]; //@line 1328 "xmltok.c"
        HEAP[$36]=$35; //@line 1328 "xmltok.c"
        __label__ = 4; break; //@line 1328 "xmltok.c"
      case 3: // $bb2
        var $37=HEAP[$fromP_addr]; //@line 1332 "xmltok.c"
        var $38=HEAP[$37]; //@line 1332 "xmltok.c"
        var $39=(($38+1)&4294967295); //@line 1332 "xmltok.c"
        var $40=HEAP[$fromP_addr]; //@line 1332 "xmltok.c"
        HEAP[$40]=$39; //@line 1332 "xmltok.c"
        __label__ = 4; break; //@line 1332 "xmltok.c"
      case 4: // $bb3
        var $41=HEAP[$toP_addr]; //@line 1333 "xmltok.c"
        var $42=HEAP[$41]; //@line 1333 "xmltok.c"
        var $43=HEAP[$c]; //@line 1333 "xmltok.c"
        HEAP[$42]=$43; //@line 1333 "xmltok.c"
        var $44=(($42+2)&4294967295); //@line 1333 "xmltok.c"
        var $45=HEAP[$toP_addr]; //@line 1333 "xmltok.c"
        HEAP[$45]=$44; //@line 1333 "xmltok.c"
        __label__ = 5; break; //@line 1333 "xmltok.c"
      case 5: // $bb4
        var $46=HEAP[$fromP_addr]; //@line 1323 "xmltok.c"
        var $47=HEAP[$46]; //@line 1323 "xmltok.c"
        var $48=HEAP[$fromLim_addr]; //@line 1323 "xmltok.c"
        var $49=($47)==($48); //@line 1323 "xmltok.c"
        if ($49) { __label__ = 7; break; } else { __label__ = 6; break; } //@line 1323 "xmltok.c"
      case 6: // $bb5
        var $50=HEAP[$toP_addr]; //@line 1323 "xmltok.c"
        var $51=HEAP[$50]; //@line 1323 "xmltok.c"
        var $52=HEAP[$toLim_addr]; //@line 1323 "xmltok.c"
        var $53=($51)!=($52); //@line 1323 "xmltok.c"
        if ($53) { __label__ = 1; break; } else { __label__ = 7; break; } //@line 1323 "xmltok.c"
      case 7: // $bb6
        __label__ = 8; break; //@line 1335 "xmltok.c"
      case 8: // $return
        STACKTOP = __stackBase__;
        return; //@line 1335 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XmlInitUnknownEncoding($mem, $table, $convert, $userData) {
    var __stackBase__  = STACKTOP; STACKTOP += 38; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 38);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $mem_addr=__stackBase__;
        var $table_addr=__stackBase__+4;
        var $convert_addr=__stackBase__+8;
        var $userData_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_1272=__stackBase__+20;
        var $0=__stackBase__+22;
        var $i=__stackBase__+26;
        var $e=__stackBase__+30;
        var $c=__stackBase__+34;
        var $_alloca_point_=0;
        HEAP[$mem_addr]=$mem;
        HEAP[$table_addr]=$table;
        HEAP[$convert_addr]=$convert;
        HEAP[$userData_addr]=$userData;
        var $1=HEAP[$mem_addr]; //@line 1344 "xmltok.c"
        var $2=$1; //@line 1344 "xmltok.c"
        HEAP[$e]=$2; //@line 1344 "xmltok.c"
        HEAP[$i]=0; //@line 1345 "xmltok.c"
        __label__ = 2; break; //@line 1345 "xmltok.c"
      case 1: // $bb
        var $3=HEAP[$mem_addr]; //@line 1346 "xmltok.c"
        var $4=HEAP[$i]; //@line 1346 "xmltok.c"
        var $5=((_latin1_encoding+$4)&4294967295); //@line 1346 "xmltok.c"
        var $6=HEAP[$5]; //@line 1346 "xmltok.c"
        var $7=HEAP[$i]; //@line 1346 "xmltok.c"
        var $8=(($3+$7)&4294967295); //@line 1346 "xmltok.c"
        HEAP[$8]=$6; //@line 1346 "xmltok.c"
        var $9=HEAP[$i]; //@line 1345 "xmltok.c"
        var $10=((($9) + 1)&4294967295); //@line 1345 "xmltok.c"
        HEAP[$i]=$10; //@line 1345 "xmltok.c"
        __label__ = 2; break; //@line 1345 "xmltok.c"
      case 2: // $bb1
        var $11=HEAP[$i]; //@line 1345 "xmltok.c"
        var $12=((($11))|0) <= 363; //@line 1345 "xmltok.c"
        if ($12) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 1345 "xmltok.c"
      case 3: // $bb2
        HEAP[$i]=0; //@line 1347 "xmltok.c"
        __label__ = 9; break; //@line 1347 "xmltok.c"
      case 4: // $bb3
        var $13=HEAP[$i]; //@line 1348 "xmltok.c"
        var $14=((((_latin1_encoding+72)&4294967295)+$13)&4294967295); //@line 1348 "xmltok.c"
        var $15=HEAP[$14]; //@line 1348 "xmltok.c"
        var $16=reSign(($15), 8, 0)!=28; //@line 1348 "xmltok.c"
        if ($16) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 1348 "xmltok.c"
      case 5: // $bb4
        var $17=HEAP[$i]; //@line 1348 "xmltok.c"
        var $18=((((_latin1_encoding+72)&4294967295)+$17)&4294967295); //@line 1348 "xmltok.c"
        var $19=HEAP[$18]; //@line 1348 "xmltok.c"
        var $20=reSign(($19), 8, 0)!=0; //@line 1348 "xmltok.c"
        if ($20) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 1348 "xmltok.c"
      case 6: // $bb5
        var $21=HEAP[$table_addr]; //@line 1348 "xmltok.c"
        var $22=HEAP[$i]; //@line 1348 "xmltok.c"
        var $23=(($21+4*$22)&4294967295); //@line 1348 "xmltok.c"
        var $24=HEAP[$23]; //@line 1348 "xmltok.c"
        var $25=HEAP[$i]; //@line 1348 "xmltok.c"
        var $26=((($24))|0)!=((($25))|0); //@line 1348 "xmltok.c"
        if ($26) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1348 "xmltok.c"
      case 7: // $bb6
        HEAP[$0]=0; //@line 1351 "xmltok.c"
        __label__ = 41; break; //@line 1351 "xmltok.c"
      case 8: // $bb7
        var $27=HEAP[$i]; //@line 1347 "xmltok.c"
        var $28=((($27) + 1)&4294967295); //@line 1347 "xmltok.c"
        HEAP[$i]=$28; //@line 1347 "xmltok.c"
        __label__ = 9; break; //@line 1347 "xmltok.c"
      case 9: // $bb8
        var $29=HEAP[$i]; //@line 1347 "xmltok.c"
        var $30=((($29))|0) <= 127; //@line 1347 "xmltok.c"
        if ($30) { __label__ = 4; break; } else { __label__ = 10; break; } //@line 1347 "xmltok.c"
      case 10: // $bb9
        HEAP[$i]=0; //@line 1352 "xmltok.c"
        __label__ = 37; break; //@line 1352 "xmltok.c"
      case 11: // $bb10
        var $31=HEAP[$table_addr]; //@line 1353 "xmltok.c"
        var $32=HEAP[$i]; //@line 1353 "xmltok.c"
        var $33=(($31+4*$32)&4294967295); //@line 1353 "xmltok.c"
        var $34=HEAP[$33]; //@line 1353 "xmltok.c"
        HEAP[$c]=$34; //@line 1353 "xmltok.c"
        var $35=HEAP[$c]; //@line 1354 "xmltok.c"
        var $36=((($35))|0)==-1; //@line 1354 "xmltok.c"
        if ($36) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1354 "xmltok.c"
      case 12: // $bb11
        var $37=HEAP[$i]; //@line 1355 "xmltok.c"
        var $38=HEAP[$e]; //@line 1355 "xmltok.c"
        var $39=(($38)&4294967295); //@line 1355 "xmltok.c"
        var $40=(($39+72)&4294967295); //@line 1355 "xmltok.c"
        var $41=(($40+$37)&4294967295); //@line 1355 "xmltok.c"
        HEAP[$41]=1; //@line 1355 "xmltok.c"
        var $42=HEAP[$i]; //@line 1357 "xmltok.c"
        var $43=HEAP[$e]; //@line 1357 "xmltok.c"
        var $44=(($43+372)&4294967295); //@line 1357 "xmltok.c"
        var $45=(($44+$42*2)&4294967295); //@line 1357 "xmltok.c"
        HEAP[$45]=-1; //@line 1357 "xmltok.c"
        var $46=HEAP[$i]; //@line 1358 "xmltok.c"
        var $47=HEAP[$e]; //@line 1358 "xmltok.c"
        var $48=(($47+884)&4294967295); //@line 1358 "xmltok.c"
        var $49=(($48+$46*4)&4294967295); //@line 1358 "xmltok.c"
        var $50=(($49)&4294967295); //@line 1358 "xmltok.c"
        HEAP[$50]=1; //@line 1358 "xmltok.c"
        var $51=HEAP[$i]; //@line 1359 "xmltok.c"
        var $52=HEAP[$e]; //@line 1359 "xmltok.c"
        var $53=(($52+884)&4294967295); //@line 1359 "xmltok.c"
        var $54=(($53+$51*4)&4294967295); //@line 1359 "xmltok.c"
        var $55=(($54+1)&4294967295); //@line 1359 "xmltok.c"
        HEAP[$55]=0; //@line 1359 "xmltok.c"
        __label__ = 36; break; //@line 1359 "xmltok.c"
      case 13: // $bb12
        var $56=HEAP[$c]; //@line 1361 "xmltok.c"
        var $57=((($56))|0) < 0; //@line 1361 "xmltok.c"
        if ($57) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 1361 "xmltok.c"
      case 14: // $bb13
        var $58=HEAP[$c]; //@line 1362 "xmltok.c"
        var $59=((($58))|0) < -4; //@line 1362 "xmltok.c"
        if ($59) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1362 "xmltok.c"
      case 15: // $bb14
        HEAP[$0]=0; //@line 1363 "xmltok.c"
        __label__ = 41; break; //@line 1363 "xmltok.c"
      case 16: // $bb15
        var $60=HEAP[$i]; //@line 1364 "xmltok.c"
        var $61=HEAP[$c]; //@line 1364 "xmltok.c"
        var $62=((($61)) & 255); //@line 1364 "xmltok.c"
        var $63=((3 - ($62))&255); //@line 1364 "xmltok.c"
        var $64=HEAP[$e]; //@line 1364 "xmltok.c"
        var $65=(($64)&4294967295); //@line 1364 "xmltok.c"
        var $66=(($65+72)&4294967295); //@line 1364 "xmltok.c"
        var $67=(($66+$60)&4294967295); //@line 1364 "xmltok.c"
        HEAP[$67]=$63; //@line 1364 "xmltok.c"
        var $68=HEAP[$i]; //@line 1365 "xmltok.c"
        var $69=HEAP[$e]; //@line 1365 "xmltok.c"
        var $70=(($69+884)&4294967295); //@line 1365 "xmltok.c"
        var $71=(($70+$68*4)&4294967295); //@line 1365 "xmltok.c"
        var $72=(($71)&4294967295); //@line 1365 "xmltok.c"
        HEAP[$72]=0; //@line 1365 "xmltok.c"
        var $73=HEAP[$i]; //@line 1366 "xmltok.c"
        var $74=HEAP[$e]; //@line 1366 "xmltok.c"
        var $75=(($74+372)&4294967295); //@line 1366 "xmltok.c"
        var $76=(($75+$73*2)&4294967295); //@line 1366 "xmltok.c"
        HEAP[$76]=0; //@line 1366 "xmltok.c"
        __label__ = 36; break; //@line 1366 "xmltok.c"
      case 17: // $bb16
        var $77=HEAP[$c]; //@line 1368 "xmltok.c"
        var $78=((($77))|0) <= 127; //@line 1368 "xmltok.c"
        if ($78) { __label__ = 18; break; } else { __label__ = 26; break; } //@line 1368 "xmltok.c"
      case 18: // $bb17
        var $79=HEAP[$c]; //@line 1369 "xmltok.c"
        var $80=((((_latin1_encoding+72)&4294967295)+$79)&4294967295); //@line 1369 "xmltok.c"
        var $81=HEAP[$80]; //@line 1369 "xmltok.c"
        var $82=reSign(($81), 8, 0)!=28; //@line 1369 "xmltok.c"
        if ($82) { __label__ = 19; break; } else { __label__ = 22; break; } //@line 1369 "xmltok.c"
      case 19: // $bb18
        var $83=HEAP[$c]; //@line 1369 "xmltok.c"
        var $84=((((_latin1_encoding+72)&4294967295)+$83)&4294967295); //@line 1369 "xmltok.c"
        var $85=HEAP[$84]; //@line 1369 "xmltok.c"
        var $86=reSign(($85), 8, 0)!=0; //@line 1369 "xmltok.c"
        if ($86) { __label__ = 20; break; } else { __label__ = 22; break; } //@line 1369 "xmltok.c"
      case 20: // $bb19
        var $87=HEAP[$c]; //@line 1369 "xmltok.c"
        var $88=HEAP[$i]; //@line 1369 "xmltok.c"
        var $89=((($87))|0)!=((($88))|0); //@line 1369 "xmltok.c"
        if ($89) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 1369 "xmltok.c"
      case 21: // $bb20
        HEAP[$0]=0; //@line 1372 "xmltok.c"
        __label__ = 41; break; //@line 1372 "xmltok.c"
      case 22: // $bb21
        var $90=HEAP[$i]; //@line 1373 "xmltok.c"
        var $91=HEAP[$c]; //@line 1373 "xmltok.c"
        var $92=((((_latin1_encoding+72)&4294967295)+$91)&4294967295); //@line 1373 "xmltok.c"
        var $93=HEAP[$92]; //@line 1373 "xmltok.c"
        var $94=HEAP[$e]; //@line 1373 "xmltok.c"
        var $95=(($94)&4294967295); //@line 1373 "xmltok.c"
        var $96=(($95+72)&4294967295); //@line 1373 "xmltok.c"
        var $97=(($96+$90)&4294967295); //@line 1373 "xmltok.c"
        HEAP[$97]=$93; //@line 1373 "xmltok.c"
        var $98=HEAP[$i]; //@line 1374 "xmltok.c"
        var $99=HEAP[$e]; //@line 1374 "xmltok.c"
        var $100=(($99+884)&4294967295); //@line 1374 "xmltok.c"
        var $101=(($100+$98*4)&4294967295); //@line 1374 "xmltok.c"
        var $102=(($101)&4294967295); //@line 1374 "xmltok.c"
        HEAP[$102]=1; //@line 1374 "xmltok.c"
        var $103=HEAP[$i]; //@line 1375 "xmltok.c"
        var $104=HEAP[$c]; //@line 1375 "xmltok.c"
        var $105=((($104)) & 255); //@line 1375 "xmltok.c"
        var $106=HEAP[$e]; //@line 1375 "xmltok.c"
        var $107=(($106+884)&4294967295); //@line 1375 "xmltok.c"
        var $108=(($107+$103*4)&4294967295); //@line 1375 "xmltok.c"
        var $109=(($108+1)&4294967295); //@line 1375 "xmltok.c"
        HEAP[$109]=$105; //@line 1375 "xmltok.c"
        var $110=HEAP[$i]; //@line 1376 "xmltok.c"
        var $111=HEAP[$c]; //@line 1376 "xmltok.c"
        var $112=((($111))|0)!=0; //@line 1376 "xmltok.c"
        if ($112) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 1376 "xmltok.c"
      case 23: // $bb22
        var $113=HEAP[$c]; //@line 1376 "xmltok.c"
        var $114=((($113)) & 65535); //@line 1376 "xmltok.c"
        HEAP[$iftmp_1272]=$114; //@line 1376 "xmltok.c"
        __label__ = 25; break; //@line 1376 "xmltok.c"
      case 24: // $bb23
        HEAP[$iftmp_1272]=-1; //@line 1376 "xmltok.c"
        __label__ = 25; break; //@line 1376 "xmltok.c"
      case 25: // $bb24
        var $115=HEAP[$e]; //@line 1376 "xmltok.c"
        var $116=(($115+372)&4294967295); //@line 1376 "xmltok.c"
        var $117=(($116+$110*2)&4294967295); //@line 1376 "xmltok.c"
        var $118=HEAP[$iftmp_1272]; //@line 1376 "xmltok.c"
        HEAP[$117]=$118; //@line 1376 "xmltok.c"
        __label__ = 36; break; //@line 1376 "xmltok.c"
      case 26: // $bb25
        var $119=HEAP[$c]; //@line 1378 "xmltok.c"
        var $120=_checkCharRefNumber($119); //@line 1378 "xmltok.c"
        var $121=((($120))|0) < 0; //@line 1378 "xmltok.c"
        if ($121) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 1378 "xmltok.c"
      case 27: // $bb26
        var $122=HEAP[$i]; //@line 1379 "xmltok.c"
        var $123=HEAP[$e]; //@line 1379 "xmltok.c"
        var $124=(($123)&4294967295); //@line 1379 "xmltok.c"
        var $125=(($124+72)&4294967295); //@line 1379 "xmltok.c"
        var $126=(($125+$122)&4294967295); //@line 1379 "xmltok.c"
        HEAP[$126]=0; //@line 1379 "xmltok.c"
        var $127=HEAP[$i]; //@line 1381 "xmltok.c"
        var $128=HEAP[$e]; //@line 1381 "xmltok.c"
        var $129=(($128+372)&4294967295); //@line 1381 "xmltok.c"
        var $130=(($129+$127*2)&4294967295); //@line 1381 "xmltok.c"
        HEAP[$130]=-1; //@line 1381 "xmltok.c"
        var $131=HEAP[$i]; //@line 1382 "xmltok.c"
        var $132=HEAP[$e]; //@line 1382 "xmltok.c"
        var $133=(($132+884)&4294967295); //@line 1382 "xmltok.c"
        var $134=(($133+$131*4)&4294967295); //@line 1382 "xmltok.c"
        var $135=(($134)&4294967295); //@line 1382 "xmltok.c"
        HEAP[$135]=1; //@line 1382 "xmltok.c"
        var $136=HEAP[$i]; //@line 1383 "xmltok.c"
        var $137=HEAP[$e]; //@line 1383 "xmltok.c"
        var $138=(($137+884)&4294967295); //@line 1383 "xmltok.c"
        var $139=(($138+$136*4)&4294967295); //@line 1383 "xmltok.c"
        var $140=(($139+1)&4294967295); //@line 1383 "xmltok.c"
        HEAP[$140]=0; //@line 1383 "xmltok.c"
        __label__ = 36; break; //@line 1383 "xmltok.c"
      case 28: // $bb27
        var $141=HEAP[$c]; //@line 1386 "xmltok.c"
        var $142=((($141))|0) > 65535; //@line 1386 "xmltok.c"
        if ($142) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 1386 "xmltok.c"
      case 29: // $bb28
        HEAP[$0]=0; //@line 1387 "xmltok.c"
        __label__ = 41; break; //@line 1387 "xmltok.c"
      case 30: // $bb29
        var $143=HEAP[$c]; //@line 1388 "xmltok.c"
        var $144=((($143))|0) >> 8; //@line 1388 "xmltok.c"
        var $145=((_nmstrtPages+$144)&4294967295); //@line 1388 "xmltok.c"
        var $146=HEAP[$145]; //@line 1388 "xmltok.c"
        var $147=unSign(($146), 8, 0); //@line 1388 "xmltok.c"
        var $148=($147) << 3; //@line 1388 "xmltok.c"
        var $149=HEAP[$c]; //@line 1388 "xmltok.c"
        var $150=($149) & 255; //@line 1388 "xmltok.c"
        var $151=((($150))|0) >> 5; //@line 1388 "xmltok.c"
        var $152=((($148) + ($151))&4294967295); //@line 1388 "xmltok.c"
        var $153=((_namingBitmap+$152*4)&4294967295); //@line 1388 "xmltok.c"
        var $154=HEAP[$153]; //@line 1388 "xmltok.c"
        var $155=HEAP[$c]; //@line 1388 "xmltok.c"
        var $156=($155) & 31; //@line 1388 "xmltok.c"
        var $157=1 << ($156); //@line 1388 "xmltok.c"
        var $158=($154) & ($157); //@line 1388 "xmltok.c"
        var $159=((($158))|0)!=0; //@line 1388 "xmltok.c"
        if ($159) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 1388 "xmltok.c"
      case 31: // $bb30
        var $160=HEAP[$i]; //@line 1389 "xmltok.c"
        var $161=HEAP[$e]; //@line 1389 "xmltok.c"
        var $162=(($161)&4294967295); //@line 1389 "xmltok.c"
        var $163=(($162+72)&4294967295); //@line 1389 "xmltok.c"
        var $164=(($163+$160)&4294967295); //@line 1389 "xmltok.c"
        HEAP[$164]=22; //@line 1389 "xmltok.c"
        __label__ = 35; break; //@line 1389 "xmltok.c"
      case 32: // $bb31
        var $165=HEAP[$c]; //@line 1390 "xmltok.c"
        var $166=((($165))|0) >> 8; //@line 1390 "xmltok.c"
        var $167=((_namePages+$166)&4294967295); //@line 1390 "xmltok.c"
        var $168=HEAP[$167]; //@line 1390 "xmltok.c"
        var $169=unSign(($168), 8, 0); //@line 1390 "xmltok.c"
        var $170=($169) << 3; //@line 1390 "xmltok.c"
        var $171=HEAP[$c]; //@line 1390 "xmltok.c"
        var $172=($171) & 255; //@line 1390 "xmltok.c"
        var $173=((($172))|0) >> 5; //@line 1390 "xmltok.c"
        var $174=((($170) + ($173))&4294967295); //@line 1390 "xmltok.c"
        var $175=((_namingBitmap+$174*4)&4294967295); //@line 1390 "xmltok.c"
        var $176=HEAP[$175]; //@line 1390 "xmltok.c"
        var $177=HEAP[$c]; //@line 1390 "xmltok.c"
        var $178=($177) & 31; //@line 1390 "xmltok.c"
        var $179=1 << ($178); //@line 1390 "xmltok.c"
        var $180=($176) & ($179); //@line 1390 "xmltok.c"
        var $181=((($180))|0)!=0; //@line 1390 "xmltok.c"
        if ($181) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 1390 "xmltok.c"
      case 33: // $bb32
        var $182=HEAP[$i]; //@line 1391 "xmltok.c"
        var $183=HEAP[$e]; //@line 1391 "xmltok.c"
        var $184=(($183)&4294967295); //@line 1391 "xmltok.c"
        var $185=(($184+72)&4294967295); //@line 1391 "xmltok.c"
        var $186=(($185+$182)&4294967295); //@line 1391 "xmltok.c"
        HEAP[$186]=26; //@line 1391 "xmltok.c"
        __label__ = 35; break; //@line 1391 "xmltok.c"
      case 34: // $bb33
        var $187=HEAP[$i]; //@line 1393 "xmltok.c"
        var $188=HEAP[$e]; //@line 1393 "xmltok.c"
        var $189=(($188)&4294967295); //@line 1393 "xmltok.c"
        var $190=(($189+72)&4294967295); //@line 1393 "xmltok.c"
        var $191=(($190+$187)&4294967295); //@line 1393 "xmltok.c"
        HEAP[$191]=28; //@line 1393 "xmltok.c"
        __label__ = 35; break; //@line 1393 "xmltok.c"
      case 35: // $bb34
        var $192=HEAP[$i]; //@line 1394 "xmltok.c"
        var $193=HEAP[$i]; //@line 1394 "xmltok.c"
        var $194=HEAP[$e]; //@line 1394 "xmltok.c"
        var $195=(($194+884)&4294967295); //@line 1394 "xmltok.c"
        var $196=(($195+$193*4)&4294967295); //@line 1394 "xmltok.c"
        var $197=(($196)&4294967295); //@line 1394 "xmltok.c"
        var $198=(($197+1)&4294967295); //@line 1394 "xmltok.c"
        var $199=HEAP[$c]; //@line 1394 "xmltok.c"
        var $200=_PyExpat_XmlUtf8Encode($199, $198); //@line 1394 "xmltok.c"
        var $201=((($200)) & 255); //@line 1394 "xmltok.c"
        var $202=HEAP[$e]; //@line 1394 "xmltok.c"
        var $203=(($202+884)&4294967295); //@line 1394 "xmltok.c"
        var $204=(($203+$192*4)&4294967295); //@line 1394 "xmltok.c"
        var $205=(($204)&4294967295); //@line 1394 "xmltok.c"
        HEAP[$205]=$201; //@line 1394 "xmltok.c"
        var $206=HEAP[$i]; //@line 1395 "xmltok.c"
        var $207=HEAP[$c]; //@line 1395 "xmltok.c"
        var $208=((($207)) & 65535); //@line 1395 "xmltok.c"
        var $209=HEAP[$e]; //@line 1395 "xmltok.c"
        var $210=(($209+372)&4294967295); //@line 1395 "xmltok.c"
        var $211=(($210+$206*2)&4294967295); //@line 1395 "xmltok.c"
        HEAP[$211]=$208; //@line 1395 "xmltok.c"
        __label__ = 36; break; //@line 1395 "xmltok.c"
      case 36: // $bb35
        var $212=HEAP[$i]; //@line 1352 "xmltok.c"
        var $213=((($212) + 1)&4294967295); //@line 1352 "xmltok.c"
        HEAP[$i]=$213; //@line 1352 "xmltok.c"
        __label__ = 37; break; //@line 1352 "xmltok.c"
      case 37: // $bb36
        var $214=HEAP[$i]; //@line 1352 "xmltok.c"
        var $215=((($214))|0) <= 255; //@line 1352 "xmltok.c"
        if ($215) { __label__ = 11; break; } else { __label__ = 38; break; } //@line 1352 "xmltok.c"
      case 38: // $bb37
        var $216=HEAP[$e]; //@line 1398 "xmltok.c"
        var $217=(($216+368)&4294967295); //@line 1398 "xmltok.c"
        var $218=HEAP[$userData_addr]; //@line 1398 "xmltok.c"
        HEAP[$217]=$218; //@line 1398 "xmltok.c"
        var $219=HEAP[$e]; //@line 1399 "xmltok.c"
        var $220=(($219+364)&4294967295); //@line 1399 "xmltok.c"
        var $221=HEAP[$convert_addr]; //@line 1399 "xmltok.c"
        HEAP[$220]=$221; //@line 1399 "xmltok.c"
        var $222=HEAP[$convert_addr]; //@line 1400 "xmltok.c"
        var $223=($222)!=0; //@line 1400 "xmltok.c"
        if ($223) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 1400 "xmltok.c"
      case 39: // $bb38
        var $224=HEAP[$e]; //@line 1401 "xmltok.c"
        var $225=(($224)&4294967295); //@line 1401 "xmltok.c"
        var $226=(($225+328)&4294967295); //@line 1401 "xmltok.c"
        HEAP[$226]=(FUNCTION_TABLE_OFFSET + 162); //@line 1401 "xmltok.c"
        var $227=HEAP[$e]; //@line 1402 "xmltok.c"
        var $228=(($227)&4294967295); //@line 1402 "xmltok.c"
        var $229=(($228+332)&4294967295); //@line 1402 "xmltok.c"
        HEAP[$229]=(FUNCTION_TABLE_OFFSET + 162); //@line 1402 "xmltok.c"
        var $230=HEAP[$e]; //@line 1403 "xmltok.c"
        var $231=(($230)&4294967295); //@line 1403 "xmltok.c"
        var $232=(($231+336)&4294967295); //@line 1403 "xmltok.c"
        HEAP[$232]=(FUNCTION_TABLE_OFFSET + 162); //@line 1403 "xmltok.c"
        var $233=HEAP[$e]; //@line 1404 "xmltok.c"
        var $234=(($233)&4294967295); //@line 1404 "xmltok.c"
        var $235=(($234+340)&4294967295); //@line 1404 "xmltok.c"
        HEAP[$235]=(FUNCTION_TABLE_OFFSET + 164); //@line 1404 "xmltok.c"
        var $236=HEAP[$e]; //@line 1405 "xmltok.c"
        var $237=(($236)&4294967295); //@line 1405 "xmltok.c"
        var $238=(($237+344)&4294967295); //@line 1405 "xmltok.c"
        HEAP[$238]=(FUNCTION_TABLE_OFFSET + 164); //@line 1405 "xmltok.c"
        var $239=HEAP[$e]; //@line 1406 "xmltok.c"
        var $240=(($239)&4294967295); //@line 1406 "xmltok.c"
        var $241=(($240+348)&4294967295); //@line 1406 "xmltok.c"
        HEAP[$241]=(FUNCTION_TABLE_OFFSET + 164); //@line 1406 "xmltok.c"
        var $242=HEAP[$e]; //@line 1407 "xmltok.c"
        var $243=(($242)&4294967295); //@line 1407 "xmltok.c"
        var $244=(($243+352)&4294967295); //@line 1407 "xmltok.c"
        HEAP[$244]=(FUNCTION_TABLE_OFFSET + 166); //@line 1407 "xmltok.c"
        var $245=HEAP[$e]; //@line 1408 "xmltok.c"
        var $246=(($245)&4294967295); //@line 1408 "xmltok.c"
        var $247=(($246+356)&4294967295); //@line 1408 "xmltok.c"
        HEAP[$247]=(FUNCTION_TABLE_OFFSET + 166); //@line 1408 "xmltok.c"
        var $248=HEAP[$e]; //@line 1409 "xmltok.c"
        var $249=(($248)&4294967295); //@line 1409 "xmltok.c"
        var $250=(($249+360)&4294967295); //@line 1409 "xmltok.c"
        HEAP[$250]=(FUNCTION_TABLE_OFFSET + 166); //@line 1409 "xmltok.c"
        __label__ = 40; break; //@line 1409 "xmltok.c"
      case 40: // $bb39
        var $251=HEAP[$e]; //@line 1411 "xmltok.c"
        var $252=(($251)&4294967295); //@line 1411 "xmltok.c"
        var $253=(($252)&4294967295); //@line 1411 "xmltok.c"
        var $254=(($253+56)&4294967295); //@line 1411 "xmltok.c"
        HEAP[$254]=(FUNCTION_TABLE_OFFSET + 168); //@line 1411 "xmltok.c"
        var $255=HEAP[$e]; //@line 1412 "xmltok.c"
        var $256=(($255)&4294967295); //@line 1412 "xmltok.c"
        var $257=(($256)&4294967295); //@line 1412 "xmltok.c"
        var $258=(($257+60)&4294967295); //@line 1412 "xmltok.c"
        HEAP[$258]=(FUNCTION_TABLE_OFFSET + 170); //@line 1412 "xmltok.c"
        var $259=HEAP[$e]; //@line 1413 "xmltok.c"
        var $260=(($259)&4294967295); //@line 1413 "xmltok.c"
        var $261=(($260)&4294967295); //@line 1413 "xmltok.c"
        HEAP[$0]=$261; //@line 1413 "xmltok.c"
        __label__ = 41; break; //@line 1413 "xmltok.c"
      case 41: // $bb40
        var $262=HEAP[$0]; //@line 1351 "xmltok.c"
        HEAP[$retval]=$262; //@line 1351 "xmltok.c"
        __label__ = 42; break; //@line 1351 "xmltok.c"
      case 42: // $return
        var $retval41=HEAP[$retval]; //@line 1351 "xmltok.c"
        STACKTOP = __stackBase__;
        return $retval41; //@line 1351 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _getEncodingIndex($name) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $name_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $i=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$name_addr]=$name;
        var $1=HEAP[$name_addr]; //@line 1465 "xmltok.c"
        var $2=($1)==0; //@line 1465 "xmltok.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1465 "xmltok.c"
      case 1: // $bb
        HEAP[$0]=6; //@line 1466 "xmltok.c"
        __label__ = 8; break; //@line 1466 "xmltok.c"
      case 2: // $bb1
        HEAP[$i]=0; //@line 1467 "xmltok.c"
        __label__ = 6; break; //@line 1467 "xmltok.c"
      case 3: // $bb2
        var $3=HEAP[$i]; //@line 1468 "xmltok.c"
        var $4=((_encodingNames_12027+$3*4)&4294967295); //@line 1468 "xmltok.c"
        var $5=HEAP[$4]; //@line 1468 "xmltok.c"
        var $6=HEAP[$name_addr]; //@line 1468 "xmltok.c"
        var $7=_streqci($6, $5); //@line 1468 "xmltok.c"
        var $8=((($7))|0)!=0; //@line 1468 "xmltok.c"
        if ($8) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1468 "xmltok.c"
      case 4: // $bb3
        var $9=HEAP[$i]; //@line 1469 "xmltok.c"
        HEAP[$0]=$9; //@line 1469 "xmltok.c"
        __label__ = 8; break; //@line 1469 "xmltok.c"
      case 5: // $bb4
        var $10=HEAP[$i]; //@line 1467 "xmltok.c"
        var $11=((($10) + 1)&4294967295); //@line 1467 "xmltok.c"
        HEAP[$i]=$11; //@line 1467 "xmltok.c"
        __label__ = 6; break; //@line 1467 "xmltok.c"
      case 6: // $bb5
        var $12=HEAP[$i]; //@line 1467 "xmltok.c"
        var $13=((($12))|0) <= 5; //@line 1467 "xmltok.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 1467 "xmltok.c"
      case 7: // $bb6
        HEAP[$0]=-1; //@line 1470 "xmltok.c"
        __label__ = 8; break; //@line 1470 "xmltok.c"
      case 8: // $bb7
        var $14=HEAP[$0]; //@line 1466 "xmltok.c"
        HEAP[$retval]=$14; //@line 1466 "xmltok.c"
        __label__ = 9; break; //@line 1466 "xmltok.c"
      case 9: // $return
        var $retval8=HEAP[$retval]; //@line 1466 "xmltok.c"
        STACKTOP = __stackBase__;
        return $retval8; //@line 1466 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _initScan($encodingTable, $enc, $state, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $encodingTable_addr=__stackBase__;
        var $enc_addr=__stackBase__+4;
        var $state_addr=__stackBase__+8;
        var $ptr_addr=__stackBase__+12;
        var $end_addr=__stackBase__+16;
        var $nextTokPtr_addr=__stackBase__+20;
        var $retval=__stackBase__+24;
        var $0=__stackBase__+28;
        var $encPtr=__stackBase__+32;
        var $e=__stackBase__+36;
        var $_alloca_point_=0;
        HEAP[$encodingTable_addr]=$encodingTable;
        HEAP[$enc_addr]=$enc;
        HEAP[$state_addr]=$state;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$ptr_addr]; //@line 1498 "xmltok.c"
        var $2=HEAP[$end_addr]; //@line 1498 "xmltok.c"
        var $3=($1)==($2); //@line 1498 "xmltok.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1498 "xmltok.c"
      case 1: // $bb
        HEAP[$0]=-4; //@line 1499 "xmltok.c"
        __label__ = 41; break; //@line 1499 "xmltok.c"
      case 2: // $bb1
        var $4=HEAP[$enc_addr]; //@line 1500 "xmltok.c"
        var $5=(($4+72)&4294967295); //@line 1500 "xmltok.c"
        var $6=HEAP[$5]; //@line 1500 "xmltok.c"
        HEAP[$encPtr]=$6; //@line 1500 "xmltok.c"
        var $7=HEAP[$ptr_addr]; //@line 1501 "xmltok.c"
        var $8=(($7+1)&4294967295); //@line 1501 "xmltok.c"
        var $9=HEAP[$end_addr]; //@line 1501 "xmltok.c"
        var $10=($8)==($9); //@line 1501 "xmltok.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 12; break; } //@line 1501 "xmltok.c"
      case 3: // $bb2
        var $11=HEAP[$state_addr]; //@line 1505 "xmltok.c"
        var $12=((($11))|0)!=1; //@line 1505 "xmltok.c"
        if ($12) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1505 "xmltok.c"
      case 4: // $bb3
        HEAP[$0]=-1; //@line 1506 "xmltok.c"
        __label__ = 41; break; //@line 1506 "xmltok.c"
      case 5: // $bb4
        var $13=HEAP[$enc_addr]; //@line 1510 "xmltok.c"
        var $14=(($13)&4294967295); //@line 1510 "xmltok.c"
        var $15=(($14+69)&4294967295); //@line 1510 "xmltok.c"
        var $16=HEAP[$15]; //@line 1510 "xmltok.c"
        var $17=reSign(($16), 8, 0); //@line 1510 "xmltok.c"
        if ($17 == 3) {
          __label__ = 6; break;
        }
        else if ($17 == 4) {
          __label__ = 6; break;
        }
        else if ($17 == 5) {
          __label__ = 6; break;
        }
        else {
        __label__ = 7; break;
        }
        
      case 6: // $bb5
        HEAP[$0]=-1; //@line 1514 "xmltok.c"
        __label__ = 41; break; //@line 1514 "xmltok.c"
      case 7: // $bb6
        var $18=HEAP[$ptr_addr]; //@line 1516 "xmltok.c"
        var $19=HEAP[$18]; //@line 1516 "xmltok.c"
        var $20=unSign(($19), 8, 0); //@line 1516 "xmltok.c"
        if ($20 == 0) {
          __label__ = 10; break;
        }
        else if ($20 == 60) {
          __label__ = 10; break;
        }
        else if ($20 == 239) {
          __label__ = 8; break;
        }
        else if ($20 == 254) {
          __label__ = 8; break;
        }
        else if ($20 == 255) {
          __label__ = 8; break;
        }
        else {
        __label__ = 11; break;
        }
        
      case 8: // $bb7
        var $21=HEAP[$enc_addr]; //@line 1520 "xmltok.c"
        var $22=(($21)&4294967295); //@line 1520 "xmltok.c"
        var $23=(($22+69)&4294967295); //@line 1520 "xmltok.c"
        var $24=HEAP[$23]; //@line 1520 "xmltok.c"
        var $25=reSign(($24), 8, 0)==0; //@line 1520 "xmltok.c"
        if ($25) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1520 "xmltok.c"
      case 9: // $bb8
        var $26=HEAP[$state_addr]; //@line 1520 "xmltok.c"
        var $27=((($26))|0)==1; //@line 1520 "xmltok.c"
        if ($27) { __label__ = 11; break; } else { __label__ = 10; break; } //@line 1520 "xmltok.c"
      case 10: // $bb9
        HEAP[$0]=-1; //@line 1526 "xmltok.c"
        __label__ = 41; break; //@line 1526 "xmltok.c"
      case 11: // $bb10
        __label__ = 40; break; //@line 1526 "xmltok.c"
      case 12: // $bb11
        var $28=HEAP[$ptr_addr]; //@line 1530 "xmltok.c"
        var $29=(($28)&4294967295); //@line 1530 "xmltok.c"
        var $30=HEAP[$29]; //@line 1530 "xmltok.c"
        var $31=unSign(($30), 8, 0); //@line 1530 "xmltok.c"
        var $32=($31) << 8; //@line 1530 "xmltok.c"
        var $33=HEAP[$ptr_addr]; //@line 1530 "xmltok.c"
        var $34=(($33+1)&4294967295); //@line 1530 "xmltok.c"
        var $35=HEAP[$34]; //@line 1530 "xmltok.c"
        var $36=unSign(($35), 8, 0); //@line 1530 "xmltok.c"
        var $37=($32) | ($36); //@line 1530 "xmltok.c"
        if ($37 == 15360) {
          __label__ = 16; break;
        }
        else if ($37 == 61371) {
          __label__ = 23; break;
        }
        else if ($37 == 65279) {
          __label__ = 13; break;
        }
        else if ($37 == 65534) {
          __label__ = 20; break;
        }
        else {
        __label__ = 33; break;
        }
        
      case 13: // $bb12
        var $38=HEAP[$enc_addr]; //@line 1532 "xmltok.c"
        var $39=(($38)&4294967295); //@line 1532 "xmltok.c"
        var $40=(($39+69)&4294967295); //@line 1532 "xmltok.c"
        var $41=HEAP[$40]; //@line 1532 "xmltok.c"
        var $42=reSign(($41), 8, 0)==0; //@line 1532 "xmltok.c"
        if ($42) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1532 "xmltok.c"
      case 14: // $bb13
        var $43=HEAP[$state_addr]; //@line 1532 "xmltok.c"
        var $44=((($43))|0)==1; //@line 1532 "xmltok.c"
        if ($44) { __label__ = 40; break; } else { __label__ = 15; break; } //@line 1532 "xmltok.c"
      case 15: // $bb14
        var $45=HEAP[$ptr_addr]; //@line 1535 "xmltok.c"
        var $46=(($45+2)&4294967295); //@line 1535 "xmltok.c"
        var $47=HEAP[$nextTokPtr_addr]; //@line 1535 "xmltok.c"
        HEAP[$47]=$46; //@line 1535 "xmltok.c"
        var $48=HEAP[$encodingTable_addr]; //@line 1536 "xmltok.c"
        var $49=(($48+16)&4294967295); //@line 1536 "xmltok.c"
        var $50=HEAP[$49]; //@line 1536 "xmltok.c"
        var $51=HEAP[$encPtr]; //@line 1536 "xmltok.c"
        HEAP[$51]=$50; //@line 1536 "xmltok.c"
        HEAP[$0]=14; //@line 1537 "xmltok.c"
        __label__ = 41; break; //@line 1537 "xmltok.c"
      case 16: // $bb15
        var $52=HEAP[$enc_addr]; //@line 1540 "xmltok.c"
        var $53=(($52)&4294967295); //@line 1540 "xmltok.c"
        var $54=(($53+69)&4294967295); //@line 1540 "xmltok.c"
        var $55=HEAP[$54]; //@line 1540 "xmltok.c"
        var $56=reSign(($55), 8, 0)==4; //@line 1540 "xmltok.c"
        if ($56) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 1540 "xmltok.c"
      case 17: // $bb16
        var $57=HEAP[$enc_addr]; //@line 1540 "xmltok.c"
        var $58=(($57)&4294967295); //@line 1540 "xmltok.c"
        var $59=(($58+69)&4294967295); //@line 1540 "xmltok.c"
        var $60=HEAP[$59]; //@line 1540 "xmltok.c"
        var $61=reSign(($60), 8, 0)==3; //@line 1540 "xmltok.c"
        if ($61) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 1540 "xmltok.c"
      case 18: // $bb17
        var $62=HEAP[$state_addr]; //@line 1540 "xmltok.c"
        var $63=((($62))|0)==1; //@line 1540 "xmltok.c"
        if ($63) { __label__ = 40; break; } else { __label__ = 19; break; } //@line 1540 "xmltok.c"
      case 19: // $bb18
        var $64=HEAP[$encodingTable_addr]; //@line 1544 "xmltok.c"
        var $65=(($64+20)&4294967295); //@line 1544 "xmltok.c"
        var $66=HEAP[$65]; //@line 1544 "xmltok.c"
        var $67=HEAP[$encPtr]; //@line 1544 "xmltok.c"
        HEAP[$67]=$66; //@line 1544 "xmltok.c"
        var $68=HEAP[$encPtr]; //@line 1545 "xmltok.c"
        var $69=HEAP[$68]; //@line 1545 "xmltok.c"
        var $70=HEAP[$state_addr]; //@line 1545 "xmltok.c"
        var $71=(($69)&4294967295); //@line 1545 "xmltok.c"
        var $72=(($71+$70*4)&4294967295); //@line 1545 "xmltok.c"
        var $73=HEAP[$72]; //@line 1545 "xmltok.c"
        var $74=HEAP[$encPtr]; //@line 1545 "xmltok.c"
        var $75=HEAP[$74]; //@line 1545 "xmltok.c"
        var $76=HEAP[$ptr_addr]; //@line 1545 "xmltok.c"
        var $77=HEAP[$end_addr]; //@line 1545 "xmltok.c"
        var $78=HEAP[$nextTokPtr_addr]; //@line 1545 "xmltok.c"
        var $79=FUNCTION_TABLE[$73]($75, $76, $77, $78); //@line 1545 "xmltok.c"
        HEAP[$0]=$79; //@line 1545 "xmltok.c"
        __label__ = 41; break; //@line 1545 "xmltok.c"
      case 20: // $bb19
        var $80=HEAP[$enc_addr]; //@line 1547 "xmltok.c"
        var $81=(($80)&4294967295); //@line 1547 "xmltok.c"
        var $82=(($81+69)&4294967295); //@line 1547 "xmltok.c"
        var $83=HEAP[$82]; //@line 1547 "xmltok.c"
        var $84=reSign(($83), 8, 0)==0; //@line 1547 "xmltok.c"
        if ($84) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 1547 "xmltok.c"
      case 21: // $bb20
        var $85=HEAP[$state_addr]; //@line 1547 "xmltok.c"
        var $86=((($85))|0)==1; //@line 1547 "xmltok.c"
        if ($86) { __label__ = 40; break; } else { __label__ = 22; break; } //@line 1547 "xmltok.c"
      case 22: // $bb21
        var $87=HEAP[$ptr_addr]; //@line 1550 "xmltok.c"
        var $88=(($87+2)&4294967295); //@line 1550 "xmltok.c"
        var $89=HEAP[$nextTokPtr_addr]; //@line 1550 "xmltok.c"
        HEAP[$89]=$88; //@line 1550 "xmltok.c"
        var $90=HEAP[$encodingTable_addr]; //@line 1551 "xmltok.c"
        var $91=(($90+20)&4294967295); //@line 1551 "xmltok.c"
        var $92=HEAP[$91]; //@line 1551 "xmltok.c"
        var $93=HEAP[$encPtr]; //@line 1551 "xmltok.c"
        HEAP[$93]=$92; //@line 1551 "xmltok.c"
        HEAP[$0]=14; //@line 1552 "xmltok.c"
        __label__ = 41; break; //@line 1552 "xmltok.c"
      case 23: // $bb22
        var $94=HEAP[$state_addr]; //@line 1561 "xmltok.c"
        var $95=((($94))|0)==1; //@line 1561 "xmltok.c"
        if ($95) { __label__ = 24; break; } else { __label__ = 28; break; } //@line 1561 "xmltok.c"
      case 24: // $bb23
        var $96=HEAP[$enc_addr]; //@line 1562 "xmltok.c"
        var $97=(($96)&4294967295); //@line 1562 "xmltok.c"
        var $98=(($97+69)&4294967295); //@line 1562 "xmltok.c"
        var $99=HEAP[$98]; //@line 1562 "xmltok.c"
        var $100=reSign(($99), 8, 0); //@line 1562 "xmltok.c"
        HEAP[$e]=$100; //@line 1562 "xmltok.c"
        var $101=HEAP[$e]; //@line 1563 "xmltok.c"
        var $102=((($101))|0)==0; //@line 1563 "xmltok.c"
        if ($102) { __label__ = 40; break; } else { __label__ = 25; break; } //@line 1563 "xmltok.c"
      case 25: // $bb24
        var $103=HEAP[$e]; //@line 1563 "xmltok.c"
        var $104=((($103))|0)==4; //@line 1563 "xmltok.c"
        if ($104) { __label__ = 40; break; } else { __label__ = 26; break; } //@line 1563 "xmltok.c"
      case 26: // $bb25
        var $105=HEAP[$e]; //@line 1563 "xmltok.c"
        var $106=((($105))|0)==5; //@line 1563 "xmltok.c"
        if ($106) { __label__ = 40; break; } else { __label__ = 27; break; } //@line 1563 "xmltok.c"
      case 27: // $bb26
        var $107=HEAP[$e]; //@line 1563 "xmltok.c"
        var $108=((($107))|0)==3; //@line 1563 "xmltok.c"
        if ($108) { __label__ = 40; break; } else { __label__ = 28; break; } //@line 1563 "xmltok.c"
      case 28: // $bb27
        var $109=HEAP[$ptr_addr]; //@line 1567 "xmltok.c"
        var $110=(($109+2)&4294967295); //@line 1567 "xmltok.c"
        var $111=HEAP[$end_addr]; //@line 1567 "xmltok.c"
        var $112=($110)==($111); //@line 1567 "xmltok.c"
        if ($112) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 1567 "xmltok.c"
      case 29: // $bb28
        HEAP[$0]=-1; //@line 1568 "xmltok.c"
        __label__ = 41; break; //@line 1568 "xmltok.c"
      case 30: // $bb29
        var $113=HEAP[$ptr_addr]; //@line 1569 "xmltok.c"
        var $114=(($113+2)&4294967295); //@line 1569 "xmltok.c"
        var $115=HEAP[$114]; //@line 1569 "xmltok.c"
        var $116=reSign(($115), 8, 0)==-65; //@line 1569 "xmltok.c"
        if ($116) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 1569 "xmltok.c"
      case 31: // $bb30
        var $117=HEAP[$ptr_addr]; //@line 1570 "xmltok.c"
        var $118=(($117+3)&4294967295); //@line 1570 "xmltok.c"
        var $119=HEAP[$nextTokPtr_addr]; //@line 1570 "xmltok.c"
        HEAP[$119]=$118; //@line 1570 "xmltok.c"
        var $120=HEAP[$encodingTable_addr]; //@line 1571 "xmltok.c"
        var $121=(($120+8)&4294967295); //@line 1571 "xmltok.c"
        var $122=HEAP[$121]; //@line 1571 "xmltok.c"
        var $123=HEAP[$encPtr]; //@line 1571 "xmltok.c"
        HEAP[$123]=$122; //@line 1571 "xmltok.c"
        HEAP[$0]=14; //@line 1572 "xmltok.c"
        __label__ = 41; break; //@line 1572 "xmltok.c"
      case 32: // $bb31
        __label__ = 40; break; //@line 1572 "xmltok.c"
      case 33: // $bb32
        var $124=HEAP[$ptr_addr]; //@line 1576 "xmltok.c"
        var $125=(($124)&4294967295); //@line 1576 "xmltok.c"
        var $126=HEAP[$125]; //@line 1576 "xmltok.c"
        var $127=reSign(($126), 8, 0)==0; //@line 1576 "xmltok.c"
        if ($127) { __label__ = 34; break; } else { __label__ = 37; break; } //@line 1576 "xmltok.c"
      case 34: // $bb33
        var $128=HEAP[$state_addr]; //@line 1583 "xmltok.c"
        var $129=((($128))|0)==1; //@line 1583 "xmltok.c"
        if ($129) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 1583 "xmltok.c"
      case 35: // $bb34
        var $130=HEAP[$enc_addr]; //@line 1583 "xmltok.c"
        var $131=(($130)&4294967295); //@line 1583 "xmltok.c"
        var $132=(($131+69)&4294967295); //@line 1583 "xmltok.c"
        var $133=HEAP[$132]; //@line 1583 "xmltok.c"
        var $134=reSign(($133), 8, 0)==5; //@line 1583 "xmltok.c"
        if ($134) { __label__ = 40; break; } else { __label__ = 36; break; } //@line 1583 "xmltok.c"
      case 36: // $bb35
        var $135=HEAP[$encodingTable_addr]; //@line 1585 "xmltok.c"
        var $136=(($135+16)&4294967295); //@line 1585 "xmltok.c"
        var $137=HEAP[$136]; //@line 1585 "xmltok.c"
        var $138=HEAP[$encPtr]; //@line 1585 "xmltok.c"
        HEAP[$138]=$137; //@line 1585 "xmltok.c"
        var $139=HEAP[$encPtr]; //@line 1586 "xmltok.c"
        var $140=HEAP[$139]; //@line 1586 "xmltok.c"
        var $141=HEAP[$state_addr]; //@line 1586 "xmltok.c"
        var $142=(($140)&4294967295); //@line 1586 "xmltok.c"
        var $143=(($142+$141*4)&4294967295); //@line 1586 "xmltok.c"
        var $144=HEAP[$143]; //@line 1586 "xmltok.c"
        var $145=HEAP[$encPtr]; //@line 1586 "xmltok.c"
        var $146=HEAP[$145]; //@line 1586 "xmltok.c"
        var $147=HEAP[$ptr_addr]; //@line 1586 "xmltok.c"
        var $148=HEAP[$end_addr]; //@line 1586 "xmltok.c"
        var $149=HEAP[$nextTokPtr_addr]; //@line 1586 "xmltok.c"
        var $150=FUNCTION_TABLE[$144]($146, $147, $148, $149); //@line 1586 "xmltok.c"
        HEAP[$0]=$150; //@line 1586 "xmltok.c"
        __label__ = 41; break; //@line 1586 "xmltok.c"
      case 37: // $bb36
        var $151=HEAP[$ptr_addr]; //@line 1588 "xmltok.c"
        var $152=(($151+1)&4294967295); //@line 1588 "xmltok.c"
        var $153=HEAP[$152]; //@line 1588 "xmltok.c"
        var $154=reSign(($153), 8, 0)==0; //@line 1588 "xmltok.c"
        if ($154) { __label__ = 38; break; } else { __label__ = 40; break; } //@line 1588 "xmltok.c"
      case 38: // $bb37
        var $155=HEAP[$state_addr]; //@line 1598 "xmltok.c"
        var $156=((($155))|0)==1; //@line 1598 "xmltok.c"
        if ($156) { __label__ = 40; break; } else { __label__ = 39; break; } //@line 1598 "xmltok.c"
      case 39: // $bb38
        var $157=HEAP[$encodingTable_addr]; //@line 1600 "xmltok.c"
        var $158=(($157+20)&4294967295); //@line 1600 "xmltok.c"
        var $159=HEAP[$158]; //@line 1600 "xmltok.c"
        var $160=HEAP[$encPtr]; //@line 1600 "xmltok.c"
        HEAP[$160]=$159; //@line 1600 "xmltok.c"
        var $161=HEAP[$encPtr]; //@line 1601 "xmltok.c"
        var $162=HEAP[$161]; //@line 1601 "xmltok.c"
        var $163=HEAP[$state_addr]; //@line 1601 "xmltok.c"
        var $164=(($162)&4294967295); //@line 1601 "xmltok.c"
        var $165=(($164+$163*4)&4294967295); //@line 1601 "xmltok.c"
        var $166=HEAP[$165]; //@line 1601 "xmltok.c"
        var $167=HEAP[$encPtr]; //@line 1601 "xmltok.c"
        var $168=HEAP[$167]; //@line 1601 "xmltok.c"
        var $169=HEAP[$ptr_addr]; //@line 1601 "xmltok.c"
        var $170=HEAP[$end_addr]; //@line 1601 "xmltok.c"
        var $171=HEAP[$nextTokPtr_addr]; //@line 1601 "xmltok.c"
        var $172=FUNCTION_TABLE[$166]($168, $169, $170, $171); //@line 1601 "xmltok.c"
        HEAP[$0]=$172; //@line 1601 "xmltok.c"
        __label__ = 41; break; //@line 1601 "xmltok.c"
      case 40: // $bb39
        var $173=HEAP[$enc_addr]; //@line 1606 "xmltok.c"
        var $174=(($173)&4294967295); //@line 1606 "xmltok.c"
        var $175=(($174+69)&4294967295); //@line 1606 "xmltok.c"
        var $176=HEAP[$175]; //@line 1606 "xmltok.c"
        var $177=reSign(($176), 8, 0); //@line 1606 "xmltok.c"
        var $178=HEAP[$encodingTable_addr]; //@line 1606 "xmltok.c"
        var $179=(($178+4*$177)&4294967295); //@line 1606 "xmltok.c"
        var $180=HEAP[$179]; //@line 1606 "xmltok.c"
        var $181=HEAP[$encPtr]; //@line 1606 "xmltok.c"
        HEAP[$181]=$180; //@line 1606 "xmltok.c"
        var $182=HEAP[$encPtr]; //@line 1607 "xmltok.c"
        var $183=HEAP[$182]; //@line 1607 "xmltok.c"
        var $184=HEAP[$state_addr]; //@line 1607 "xmltok.c"
        var $185=(($183)&4294967295); //@line 1607 "xmltok.c"
        var $186=(($185+$184*4)&4294967295); //@line 1607 "xmltok.c"
        var $187=HEAP[$186]; //@line 1607 "xmltok.c"
        var $188=HEAP[$encPtr]; //@line 1607 "xmltok.c"
        var $189=HEAP[$188]; //@line 1607 "xmltok.c"
        var $190=HEAP[$ptr_addr]; //@line 1607 "xmltok.c"
        var $191=HEAP[$end_addr]; //@line 1607 "xmltok.c"
        var $192=HEAP[$nextTokPtr_addr]; //@line 1607 "xmltok.c"
        var $193=FUNCTION_TABLE[$187]($189, $190, $191, $192); //@line 1607 "xmltok.c"
        HEAP[$0]=$193; //@line 1607 "xmltok.c"
        __label__ = 41; break; //@line 1607 "xmltok.c"
      case 41: // $bb40
        var $194=HEAP[$0]; //@line 1499 "xmltok.c"
        HEAP[$retval]=$194; //@line 1499 "xmltok.c"
        __label__ = 42; break; //@line 1499 "xmltok.c"
      case 42: // $return
        var $retval41=HEAP[$retval]; //@line 1499 "xmltok.c"
        STACKTOP = __stackBase__;
        return $retval41; //@line 1499 "xmltok.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XmlGetUtf8InternalEncoding() {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval=__stackBase__;
        var $0=__stackBase__+4;
        var $_alloca_point_=0;
        HEAP[$0]=((_internal_utf8_encoding)&4294967295); //@line 4 "xmltok_ns.c"
        var $1=HEAP[$0]; //@line 4 "xmltok_ns.c"
        HEAP[$retval]=$1; //@line 4 "xmltok_ns.c"
        __label__ = 1; break; //@line 4 "xmltok_ns.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 4 "xmltok_ns.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 4 "xmltok_ns.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XmlGetUtf16InternalEncoding() {
    var __stackBase__  = STACKTOP; STACKTOP += 14; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 14);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval=__stackBase__;
        var $iftmp_1289=__stackBase__+4;
        var $0=__stackBase__+8;
        var $n=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$n]=1; //@line 15 "xmltok_ns.c"
        var $n1=$n; //@line 16 "xmltok_ns.c"
        var $1=HEAP[$n1]; //@line 16 "xmltok_ns.c"
        var $2=reSign(($1), 8, 0)!=0; //@line 16 "xmltok_ns.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 16 "xmltok_ns.c"
      case 1: // $bb
        HEAP[$iftmp_1289]=((_internal_little2_encoding)&4294967295); //@line 16 "xmltok_ns.c"
        __label__ = 3; break; //@line 16 "xmltok_ns.c"
      case 2: // $bb3
        HEAP[$iftmp_1289]=((_internal_big2_encoding)&4294967295); //@line 16 "xmltok_ns.c"
        __label__ = 3; break; //@line 16 "xmltok_ns.c"
      case 3: // $bb4
        var $3=HEAP[$iftmp_1289]; //@line 16 "xmltok_ns.c"
        HEAP[$0]=$3; //@line 16 "xmltok_ns.c"
        var $4=HEAP[$0]; //@line 16 "xmltok_ns.c"
        HEAP[$retval]=$4; //@line 16 "xmltok_ns.c"
        __label__ = 4; break; //@line 16 "xmltok_ns.c"
      case 4: // $return
        var $retval5=HEAP[$retval]; //@line 16 "xmltok_ns.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 16 "xmltok_ns.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _initScanProlog($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$enc_addr]; //@line 36 "xmltok_ns.c"
        var $2=$1; //@line 36 "xmltok_ns.c"
        var $3=HEAP[$ptr_addr]; //@line 36 "xmltok_ns.c"
        var $4=HEAP[$end_addr]; //@line 36 "xmltok_ns.c"
        var $5=HEAP[$nextTokPtr_addr]; //@line 36 "xmltok_ns.c"
        var $6=_initScan(((_encodings)&4294967295), $2, 0, $3, $4, $5); //@line 36 "xmltok_ns.c"
        HEAP[$0]=$6; //@line 36 "xmltok_ns.c"
        var $7=HEAP[$0]; //@line 36 "xmltok_ns.c"
        HEAP[$retval]=$7; //@line 36 "xmltok_ns.c"
        __label__ = 1; break; //@line 36 "xmltok_ns.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 36 "xmltok_ns.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 36 "xmltok_ns.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _initScanContent($enc, $ptr, $end, $nextTokPtr) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $nextTokPtr_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$nextTokPtr_addr]=$nextTokPtr;
        var $1=HEAP[$enc_addr]; //@line 44 "xmltok_ns.c"
        var $2=$1; //@line 44 "xmltok_ns.c"
        var $3=HEAP[$ptr_addr]; //@line 44 "xmltok_ns.c"
        var $4=HEAP[$end_addr]; //@line 44 "xmltok_ns.c"
        var $5=HEAP[$nextTokPtr_addr]; //@line 44 "xmltok_ns.c"
        var $6=_initScan(((_encodings)&4294967295), $2, 1, $3, $4, $5); //@line 44 "xmltok_ns.c"
        HEAP[$0]=$6; //@line 44 "xmltok_ns.c"
        var $7=HEAP[$0]; //@line 44 "xmltok_ns.c"
        HEAP[$retval]=$7; //@line 44 "xmltok_ns.c"
        __label__ = 1; break; //@line 44 "xmltok_ns.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 44 "xmltok_ns.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 44 "xmltok_ns.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XmlInitEncoding($p, $encPtr, $name) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $p_addr=__stackBase__;
        var $encPtr_addr=__stackBase__+4;
        var $name_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $i=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$p_addr]=$p;
        HEAP[$encPtr_addr]=$encPtr;
        HEAP[$name_addr]=$name;
        var $1=HEAP[$name_addr]; //@line 52 "xmltok_ns.c"
        var $2=_getEncodingIndex($1); //@line 52 "xmltok_ns.c"
        HEAP[$i]=$2; //@line 52 "xmltok_ns.c"
        var $3=HEAP[$i]; //@line 53 "xmltok_ns.c"
        var $4=((($3))|0)==-1; //@line 53 "xmltok_ns.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 53 "xmltok_ns.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 54 "xmltok_ns.c"
        __label__ = 3; break; //@line 54 "xmltok_ns.c"
      case 2: // $bb1
        var $5=HEAP[$i]; //@line 55 "xmltok_ns.c"
        var $6=((($5)) & 255); //@line 55 "xmltok_ns.c"
        var $7=HEAP[$p_addr]; //@line 55 "xmltok_ns.c"
        var $8=(($7)&4294967295); //@line 55 "xmltok_ns.c"
        var $9=(($8+69)&4294967295); //@line 55 "xmltok_ns.c"
        HEAP[$9]=$6; //@line 55 "xmltok_ns.c"
        var $10=HEAP[$p_addr]; //@line 56 "xmltok_ns.c"
        var $11=(($10)&4294967295); //@line 56 "xmltok_ns.c"
        var $12=(($11)&4294967295); //@line 56 "xmltok_ns.c"
        var $13=(($12)&4294967295); //@line 56 "xmltok_ns.c"
        HEAP[$13]=(FUNCTION_TABLE_OFFSET + 172); //@line 56 "xmltok_ns.c"
        var $14=HEAP[$p_addr]; //@line 57 "xmltok_ns.c"
        var $15=(($14)&4294967295); //@line 57 "xmltok_ns.c"
        var $16=(($15)&4294967295); //@line 57 "xmltok_ns.c"
        var $17=(($16+4)&4294967295); //@line 57 "xmltok_ns.c"
        HEAP[$17]=(FUNCTION_TABLE_OFFSET + 174); //@line 57 "xmltok_ns.c"
        var $18=HEAP[$p_addr]; //@line 58 "xmltok_ns.c"
        var $19=(($18)&4294967295); //@line 58 "xmltok_ns.c"
        var $20=(($19+48)&4294967295); //@line 58 "xmltok_ns.c"
        HEAP[$20]=(FUNCTION_TABLE_OFFSET + 176); //@line 58 "xmltok_ns.c"
        var $21=HEAP[$p_addr]; //@line 59 "xmltok_ns.c"
        var $22=(($21+72)&4294967295); //@line 59 "xmltok_ns.c"
        var $23=HEAP[$encPtr_addr]; //@line 59 "xmltok_ns.c"
        HEAP[$22]=$23; //@line 59 "xmltok_ns.c"
        var $24=HEAP[$p_addr]; //@line 60 "xmltok_ns.c"
        var $25=(($24)&4294967295); //@line 60 "xmltok_ns.c"
        var $26=HEAP[$encPtr_addr]; //@line 60 "xmltok_ns.c"
        HEAP[$26]=$25; //@line 60 "xmltok_ns.c"
        HEAP[$0]=1; //@line 61 "xmltok_ns.c"
        __label__ = 3; break; //@line 61 "xmltok_ns.c"
      case 3: // $bb2
        var $27=HEAP[$0]; //@line 54 "xmltok_ns.c"
        HEAP[$retval]=$27; //@line 54 "xmltok_ns.c"
        __label__ = 4; break; //@line 54 "xmltok_ns.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 54 "xmltok_ns.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 54 "xmltok_ns.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _findEncoding($enc, $ptr, $end) {
    var __stackBase__  = STACKTOP; STACKTOP += 156; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 156);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $enc_addr=__stackBase__;
        var $ptr_addr=__stackBase__+4;
        var $end_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $buf=__stackBase__+20;
        var $p=__stackBase__+148;
        var $i=__stackBase__+152;
        var $_alloca_point_=0;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        var $buf1=$buf; //@line 69 "xmltok_ns.c"
        HEAP[$p]=$buf1; //@line 69 "xmltok_ns.c"
        var $1=HEAP[$enc_addr]; //@line 71 "xmltok_ns.c"
        var $2=(($1+56)&4294967295); //@line 71 "xmltok_ns.c"
        var $3=HEAP[$2]; //@line 71 "xmltok_ns.c"
        var $4=HEAP[$p]; //@line 71 "xmltok_ns.c"
        var $5=(($4+128)&4294967295); //@line 71 "xmltok_ns.c"
        var $6=(($5+-1)&4294967295); //@line 71 "xmltok_ns.c"
        var $7=HEAP[$enc_addr]; //@line 71 "xmltok_ns.c"
        var $8=HEAP[$end_addr]; //@line 71 "xmltok_ns.c"
        FUNCTION_TABLE[$3]($7, $ptr_addr, $8, $p, $6); //@line 71 "xmltok_ns.c"
        var $9=HEAP[$ptr_addr]; //@line 72 "xmltok_ns.c"
        var $10=HEAP[$end_addr]; //@line 72 "xmltok_ns.c"
        var $11=($9)!=($10); //@line 72 "xmltok_ns.c"
        if ($11) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 72 "xmltok_ns.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 73 "xmltok_ns.c"
        __label__ = 8; break; //@line 73 "xmltok_ns.c"
      case 2: // $bb2
        var $12=HEAP[$p]; //@line 74 "xmltok_ns.c"
        HEAP[$12]=0; //@line 74 "xmltok_ns.c"
        var $buf3=$buf; //@line 75 "xmltok_ns.c"
        var $13=_streqci($buf3, ((_KW_UTF_16)&4294967295)); //@line 75 "xmltok_ns.c"
        var $14=((($13))|0)!=0; //@line 75 "xmltok_ns.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 75 "xmltok_ns.c"
      case 3: // $bb4
        var $15=HEAP[$enc_addr]; //@line 75 "xmltok_ns.c"
        var $16=(($15+64)&4294967295); //@line 75 "xmltok_ns.c"
        var $17=HEAP[$16]; //@line 75 "xmltok_ns.c"
        var $18=((($17))|0)==2; //@line 75 "xmltok_ns.c"
        if ($18) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 75 "xmltok_ns.c"
      case 4: // $bb5
        var $19=HEAP[$enc_addr]; //@line 76 "xmltok_ns.c"
        HEAP[$0]=$19; //@line 76 "xmltok_ns.c"
        __label__ = 8; break; //@line 76 "xmltok_ns.c"
      case 5: // $bb6
        var $buf7=$buf; //@line 77 "xmltok_ns.c"
        var $20=_getEncodingIndex($buf7); //@line 77 "xmltok_ns.c"
        HEAP[$i]=$20; //@line 77 "xmltok_ns.c"
        var $21=HEAP[$i]; //@line 78 "xmltok_ns.c"
        var $22=((($21))|0)==-1; //@line 78 "xmltok_ns.c"
        if ($22) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 78 "xmltok_ns.c"
      case 6: // $bb8
        HEAP[$0]=0; //@line 79 "xmltok_ns.c"
        __label__ = 8; break; //@line 79 "xmltok_ns.c"
      case 7: // $bb9
        var $23=HEAP[$i]; //@line 80 "xmltok_ns.c"
        var $24=((_encodings+$23*4)&4294967295); //@line 80 "xmltok_ns.c"
        var $25=HEAP[$24]; //@line 80 "xmltok_ns.c"
        HEAP[$0]=$25; //@line 80 "xmltok_ns.c"
        __label__ = 8; break; //@line 80 "xmltok_ns.c"
      case 8: // $bb10
        var $26=HEAP[$0]; //@line 73 "xmltok_ns.c"
        HEAP[$retval]=$26; //@line 73 "xmltok_ns.c"
        __label__ = 9; break; //@line 73 "xmltok_ns.c"
      case 9: // $return
        var $retval11=HEAP[$retval]; //@line 73 "xmltok_ns.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 73 "xmltok_ns.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyExpat_XmlParseXmlDecl($isGeneralTextEntity, $enc, $ptr, $end, $badPtr, $versionPtr, $versionEndPtr, $encodingName, $encoding, $standalone) {
    var __stackBase__  = STACKTOP; STACKTOP += 48; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 48);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $isGeneralTextEntity_addr=__stackBase__;
        var $enc_addr=__stackBase__+4;
        var $ptr_addr=__stackBase__+8;
        var $end_addr=__stackBase__+12;
        var $badPtr_addr=__stackBase__+16;
        var $versionPtr_addr=__stackBase__+20;
        var $versionEndPtr_addr=__stackBase__+24;
        var $encodingName_addr=__stackBase__+28;
        var $encoding_addr=__stackBase__+32;
        var $standalone_addr=__stackBase__+36;
        var $retval=__stackBase__+40;
        var $0=__stackBase__+44;
        var $_alloca_point_=0;
        HEAP[$isGeneralTextEntity_addr]=$isGeneralTextEntity;
        HEAP[$enc_addr]=$enc;
        HEAP[$ptr_addr]=$ptr;
        HEAP[$end_addr]=$end;
        HEAP[$badPtr_addr]=$badPtr;
        HEAP[$versionPtr_addr]=$versionPtr;
        HEAP[$versionEndPtr_addr]=$versionEndPtr;
        HEAP[$encodingName_addr]=$encodingName;
        HEAP[$encoding_addr]=$encoding;
        HEAP[$standalone_addr]=$standalone;
        var $1=HEAP[$isGeneralTextEntity_addr]; //@line 95 "xmltok_ns.c"
        var $2=HEAP[$enc_addr]; //@line 95 "xmltok_ns.c"
        var $3=HEAP[$ptr_addr]; //@line 95 "xmltok_ns.c"
        var $4=HEAP[$end_addr]; //@line 95 "xmltok_ns.c"
        var $5=HEAP[$badPtr_addr]; //@line 95 "xmltok_ns.c"
        var $6=HEAP[$versionPtr_addr]; //@line 95 "xmltok_ns.c"
        var $7=HEAP[$versionEndPtr_addr]; //@line 95 "xmltok_ns.c"
        var $8=HEAP[$encodingName_addr]; //@line 95 "xmltok_ns.c"
        var $9=HEAP[$encoding_addr]; //@line 95 "xmltok_ns.c"
        var $10=HEAP[$standalone_addr]; //@line 95 "xmltok_ns.c"
        var $11=_doParseXmlDecl((FUNCTION_TABLE_OFFSET + 178), $1, $2, $3, $4, $5, $6, $7, $8, $9, $10); //@line 95 "xmltok_ns.c"
        HEAP[$0]=$11; //@line 95 "xmltok_ns.c"
        var $12=HEAP[$0]; //@line 95 "xmltok_ns.c"
        HEAP[$retval]=$12; //@line 95 "xmltok_ns.c"
        __label__ = 1; break; //@line 95 "xmltok_ns.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 95 "xmltok_ns.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 95 "xmltok_ns.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  
FUNCTION_TABLE = FUNCTION_TABLE.concat([0,0,_error_external_entity_ref_handler,0,_conv_string_to_unicode,0,_conv_string_to_utf8,0,_noop_character_data_handler,0,_PyUnknownEncodingHandler,0,_XML_ErrorString,0,_XML_GetErrorCode,0,_XML_GetCurrentColumnNumber,0,_XML_GetCurrentLineNumber,0,_XML_Parse,0,_XML_ParserCreate_MM,0,_XML_ParserFree,0,_XML_SetCharacterDataHandler,0,_XML_SetCommentHandler,0,_XML_SetDefaultHandlerExpand,0,_XML_SetElementHandler,0,_XML_SetNamespaceDeclHandler,0,_XML_SetProcessingInstructionHandler,0,_XML_SetUnknownEncodingHandler,0,_XML_SetUserData,0,_malloc,0,_realloc,0,_free,0,_prologInitProcessor,0,_externalEntityInitProcessor,0,_errorProcessor,0,_externalEntityInitProcessor2,0,_externalEntityInitProcessor3,0,_externalEntityContentProcessor,0,_cdataSectionProcessor,0,_contentProcessor,0,_prologProcessor,0,_epilogProcessor,0,_internalEntityProcessor,0,_prolog1,0,_doctype0,0,_error,0,_doctype1,0,_internalSubset,0,_prolog2,0,_doctype3,0,_doctype2,0,_doctype4,0,_entity0,0,_attlist0,0,_element0,0,_notation0,0,_doctype5,0,_entity1,0,_entity2,0,_entity7,0,_entity4,0,_entity3,0,_declClose,0,_entity5,0,_entity6,0,_entity9,0,_entity8,0,_entity10,0,_notation1,0,_notation3,0,_notation2,0,_notation4,0,_attlist1,0,_attlist2,0,_attlist8,0,_attlist5,0,_attlist3,0,_attlist4,0,_attlist6,0,_attlist7,0,_attlist9,0,_element1,0,_element2,0,_element3,0,_element6,0,_element7,0,_element4,0,_element5,0,_prolog0,0,_unknown_isName,0,_unknown_isNmstrt,0,_unknown_isInvalid,0,_unknown_toUtf8,0,_unknown_toUtf16,0,_initScanProlog,0,_initScanContent,0,_initUpdatePosition,0,_findEncoding,0,_xmlparse_Parse,0,_xmlparse_ParseFile,0,_xmlparse_SetBase,0,_xmlparse_GetBase,0,_xmlparse_ExternalEntityParserCreate,0,_xmlparse_SetParamEntityParsing,0,_xmlparse_GetInputContext,0,_xmlparse_UseForeignDTD,0,_xmlparse_dealloc,0,_xmlparse_getattr,0,_xmlparse_setattr,0,_xmlparse_traverse,0,_xmlparse_clear,0,_pyexpat_ParserCreate,0,_pyexpat_ErrorString,0,_XML_SetStartElementHandler,0,_my_StartElementHandler,0,_XML_SetEndElementHandler,0,_my_EndElementHandler,0,_my_ProcessingInstructionHandler,0,_my_CharacterDataHandler,0,_XML_SetUnparsedEntityDeclHandler,0,_my_UnparsedEntityDeclHandler,0,_XML_SetNotationDeclHandler,0,_my_NotationDeclHandler,0,_XML_SetStartNamespaceDeclHandler,0,_my_StartNamespaceDeclHandler,0,_XML_SetEndNamespaceDeclHandler,0,_my_EndNamespaceDeclHandler,0,_my_CommentHandler,0,_XML_SetStartCdataSectionHandler,0,_my_StartCdataSectionHandler,0,_XML_SetEndCdataSectionHandler,0,_my_EndCdataSectionHandler,0,_XML_SetDefaultHandler,0,_my_DefaultHandler,0,_my_DefaultHandlerExpandHandler,0,_XML_SetNotStandaloneHandler,0,_my_NotStandaloneHandler,0,_XML_SetExternalEntityRefHandler,0,_my_ExternalEntityRefHandler,0,_XML_SetStartDoctypeDeclHandler,0,_my_StartDoctypeDeclHandler,0,_XML_SetEndDoctypeDeclHandler,0,_my_EndDoctypeDeclHandler,0,_XML_SetEntityDeclHandler,0,_my_EntityDeclHandler,0,_XML_SetXmlDeclHandler,0,_my_XmlDeclHandler,0,_XML_SetElementDeclHandler,0,_my_ElementDeclHandler,0,_XML_SetAttlistDeclHandler,0,_my_AttlistDeclHandler,0,_XML_SetSkippedEntityHandler,0,_my_SkippedEntityHandler,0,_normal_prologTok,0,_normal_contentTok,0,_normal_cdataSectionTok,0,_normal_attributeValueTok,0,_normal_entityValueTok,0,_normal_sameName,0,_normal_nameMatchesAscii,0,_normal_nameLength,0,_normal_skipS,0,_normal_getAtts,0,_normal_charRefNumber,0,_normal_predefinedEntityName,0,_normal_updatePosition,0,_normal_isPublicId,0,_utf8_toUtf8,0,_utf8_toUtf16,0,_utf8_isName2,0,_utf8_isName3,0,_isNever,0,_utf8_isNmstrt2,0,_utf8_isNmstrt3,0,_utf8_isInvalid2,0,_utf8_isInvalid3,0,_utf8_isInvalid4,0,_latin1_toUtf8,0,_latin1_toUtf16,0,_ascii_toUtf8,0,_little2_prologTok,0,_little2_contentTok,0,_little2_cdataSectionTok,0,_little2_attributeValueTok,0,_little2_entityValueTok,0,_little2_sameName,0,_little2_nameMatchesAscii,0,_little2_nameLength,0,_little2_skipS,0,_little2_getAtts,0,_little2_charRefNumber,0,_little2_predefinedEntityName,0,_little2_updatePosition,0,_little2_isPublicId,0,_little2_toUtf8,0,_little2_toUtf16,0,_big2_prologTok,0,_big2_contentTok,0,_big2_cdataSectionTok,0,_big2_attributeValueTok,0,_big2_entityValueTok,0,_big2_sameName,0,_big2_nameMatchesAscii,0,_big2_nameLength,0,_big2_skipS,0,_big2_getAtts,0,_big2_charRefNumber,0,_big2_predefinedEntityName,0,_big2_updatePosition,0,_big2_isPublicId,0,_big2_toUtf8,0,_big2_toUtf16,0]);

// === Auto-generated postamble setup entry stuff ===

function run(args) {
  
__str=allocate([37,46,50,48,48,115,58,32,108,105,110,101,32,37,105,44,32,99,111,108,117,109,110,32,37,105,0] /* %.200s: line %i, col */, "i8", ALLOC_NORMAL);
_ErrorObject=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str1=allocate([115,0] /* s\00 */, "i8", ALLOC_NORMAL);
__str2=allocate([99,111,100,101,0] /* code\00 */, "i8", ALLOC_NORMAL);
__str3=allocate([111,102,102,115,101,116,0] /* offset\00 */, "i8", ALLOC_NORMAL);
__str4=allocate([108,105,110,101,110,111,0] /* lineno\00 */, "i8", ALLOC_NORMAL);
__str5=allocate([115,116,114,105,99,116,0] /* strict\00 */, "i8", ALLOC_NORMAL);
__str6=allocate([46,46,47,99,112,121,116,104,111,110,47,77,111,100,117,108,101,115,47,112,121,101,120,112,97,116,46,99,0] /* ../cpython/Modules/p */, "i8", ALLOC_NORMAL);
__str7=allocate([67,104,97,114,97,99,116,101,114,68,97,116,97,0] /* CharacterData\00 */, "i8", ALLOC_NORMAL);
__str8=allocate([40,78,78,41,0] /* (NN)\00 */, "i8", ALLOC_NORMAL);
__str9=allocate([83,116,97,114,116,69,108,101,109,101,110,116,0] /* StartElement\00 */, "i8", ALLOC_NORMAL);
__str10=allocate([40,78,41,0] /* (N)\00 */, "i8", ALLOC_NORMAL);
__str11=allocate([69,110,100,69,108,101,109,101,110,116,0] /* EndElement\00 */, "i8", ALLOC_NORMAL);
__str12=allocate([40,78,79,38,41,0] /* (NO&)\00 */, "i8", ALLOC_NORMAL);
__str13=allocate([80,114,111,99,101,115,115,105,110,103,73,110,115,116,114,117,99,116,105,111,110,0] /* ProcessingInstructio */, "i8", ALLOC_NORMAL);
__str14=allocate([40,78,78,78,78,78,41,0] /* (NNNNN)\00 */, "i8", ALLOC_NORMAL);
__str15=allocate([85,110,112,97,114,115,101,100,69,110,116,105,116,121,68,101,99,108,0] /* UnparsedEntityDecl\0 */, "i8", ALLOC_NORMAL);
__str16=allocate([78,105,78,78,78,78,78,0] /* NiNNNNN\00 */, "i8", ALLOC_NORMAL);
__str17=allocate([69,110,116,105,116,121,68,101,99,108,0] /* EntityDecl\00 */, "i8", ALLOC_NORMAL);
__str18=allocate([40,79,38,79,38,105,41,0] /* (O&O&i)\00 */, "i8", ALLOC_NORMAL);
__str19=allocate([88,109,108,68,101,99,108,0] /* XmlDecl\00 */, "i8", ALLOC_NORMAL);
__str20=allocate([109,111,100,101,108,45,62,110,117,109,99,104,105,108,100,114,101,110,32,60,32,50,49,52,55,52,56,51,54,52,55,0] /* model->numchildren < */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___9748=allocate([99,111,110,118,95,99,111,110,116,101,110,116,95,109,111,100,101,108,0] /* conv_content_model\0 */, "i8", ALLOC_NORMAL);
__str21=allocate([40,105,105,79,38,78,41,0] /* (iiO&N)\00 */, "i8", ALLOC_NORMAL);
__str22=allocate([78,78,0] /* NN\00 */, "i8", ALLOC_NORMAL);
__str23=allocate([69,108,101,109,101,110,116,68,101,99,108,0] /* ElementDecl\00 */, "i8", ALLOC_NORMAL);
__str24=allocate([40,78,78,79,38,79,38,105,41,0] /* (NNO&O&i)\00 */, "i8", ALLOC_NORMAL);
__str25=allocate([65,116,116,108,105,115,116,68,101,99,108,0] /* AttlistDecl\00 */, "i8", ALLOC_NORMAL);
__str26=allocate([78,105,0] /* Ni\00 */, "i8", ALLOC_NORMAL);
__str27=allocate([83,107,105,112,112,101,100,69,110,116,105,116,121,0] /* SkippedEntity\00 */, "i8", ALLOC_NORMAL);
__str28=allocate([40,78,78,78,78,41,0] /* (NNNN)\00 */, "i8", ALLOC_NORMAL);
__str29=allocate([78,111,116,97,116,105,111,110,68,101,99,108,0] /* NotationDecl\00 */, "i8", ALLOC_NORMAL);
__str30=allocate([83,116,97,114,116,78,97,109,101,115,112,97,99,101,68,101,99,108,0] /* StartNamespaceDecl\0 */, "i8", ALLOC_NORMAL);
__str31=allocate([69,110,100,78,97,109,101,115,112,97,99,101,68,101,99,108,0] /* EndNamespaceDecl\00 */, "i8", ALLOC_NORMAL);
__str32=allocate([40,79,38,41,0] /* (O&)\00 */, "i8", ALLOC_NORMAL);
__str33=allocate([67,111,109,109,101,110,116,0] /* Comment\00 */, "i8", ALLOC_NORMAL);
__str34=allocate([40,41,0] /* ()\00 */, "i8", ALLOC_NORMAL);
__str35=allocate([83,116,97,114,116,67,100,97,116,97,83,101,99,116,105,111,110,0] /* StartCdataSection\00 */, "i8", ALLOC_NORMAL);
__str36=allocate([69,110,100,67,100,97,116,97,83,101,99,116,105,111,110,0] /* EndCdataSection\00 */, "i8", ALLOC_NORMAL);
__str37=allocate([68,101,102,97,117,108,116,0] /* Default\00 */, "i8", ALLOC_NORMAL);
__str38=allocate([68,101,102,97,117,108,116,72,97,110,100,108,101,114,69,120,112,97,110,100,0] /* DefaultHandlerExpand */, "i8", ALLOC_NORMAL);
__str39=allocate([78,111,116,83,116,97,110,100,97,108,111,110,101,0] /* NotStandalone\00 */, "i8", ALLOC_NORMAL);
__str40=allocate([40,79,38,78,78,78,41,0] /* (O&NNN)\00 */, "i8", ALLOC_NORMAL);
__str41=allocate([69,120,116,101,114,110,97,108,69,110,116,105,116,121,82,101,102,0] /* ExternalEntityRef\00 */, "i8", ALLOC_NORMAL);
__str42=allocate([40,78,78,78,105,41,0] /* (NNNi)\00 */, "i8", ALLOC_NORMAL);
__str43=allocate([83,116,97,114,116,68,111,99,116,121,112,101,68,101,99,108,0] /* StartDoctypeDecl\00 */, "i8", ALLOC_NORMAL);
__str44=allocate([69,110,100,68,111,99,116,121,112,101,68,101,99,108,0] /* EndDoctypeDecl\00 */, "i8", ALLOC_NORMAL);
_xmlparse_Parse__doc__=allocate([80,97,114,115,101,40,100,97,116,97,91,44,32,105,115,102,105,110,97,108,93,41,10,80,97,114,115,101,32,88,77,76,32,100,97,116,97,46,32,32,96,105,115,102,105,110,97,108,39,32,115,104,111,117,108,100,32,98,101,32,116,114,117,101,32,97,116,32,101,110,100,32,111,102,32,105,110,112,117,116,46,0] /* Parse(data[, isfinal */, "i8", ALLOC_NORMAL);
__str45=allocate([115,35,124,105,58,80,97,114,115,101,0] /* s#|i:Parse\00 */, "i8", ALLOC_NORMAL);
__str46=allocate([114,101,97,100,40,41,32,100,105,100,32,110,111,116,32,114,101,116,117,114,110,32,97,32,115,116,114,105,110,103,32,111,98,106,101,99,116,32,40,116,121,112,101,61,37,46,52,48,48,115,41,0] /* read() did not retur */, "i8", ALLOC_NORMAL);
__str47=allocate([114,101,97,100,40,41,32,114,101,116,117,114,110,101,100,32,116,111,111,32,109,117,99,104,32,100,97,116,97,58,32,37,105,32,98,121,116,101,115,32,114,101,113,117,101,115,116,101,100,44,32,37,105,32,114,101,116,117,114,110,101,100,0] /* read() returned too  */, "i8", ALLOC_NORMAL);
_xmlparse_ParseFile__doc__=allocate([80,97,114,115,101,70,105,108,101,40,102,105,108,101,41,10,80,97,114,115,101,32,88,77,76,32,100,97,116,97,32,102,114,111,109,32,102,105,108,101,45,108,105,107,101,32,111,98,106,101,99,116,46,0] /* ParseFile(file)\0APa */, "i8", ALLOC_NORMAL);
__str48=allocate([114,101,97,100,0] /* read\00 */, "i8", ALLOC_NORMAL);
__str49=allocate([97,114,103,117,109,101,110,116,32,109,117,115,116,32,104,97,118,101,32,39,114,101,97,100,39,32,97,116,116,114,105,98,117,116,101,0] /* argument must have ' */, "i8", ALLOC_NORMAL);
_xmlparse_SetBase__doc__=allocate([83,101,116,66,97,115,101,40,98,97,115,101,95,117,114,108,41,10,83,101,116,32,116,104,101,32,98,97,115,101,32,85,82,76,32,102,111,114,32,116,104,101,32,112,97,114,115,101,114,46,0] /* SetBase(base_url)\0A */, "i8", ALLOC_NORMAL);
__str50=allocate([115,58,83,101,116,66,97,115,101,0] /* s:SetBase\00 */, "i8", ALLOC_NORMAL);
_xmlparse_GetBase__doc__=allocate([71,101,116,66,97,115,101,40,41,32,45,62,32,117,114,108,10,82,101,116,117,114,110,32,98,97,115,101,32,85,82,76,32,115,116,114,105,110,103,32,102,111,114,32,116,104,101,32,112,97,114,115,101,114,46,0] /* GetBase() -> url\0AR */, "i8", ALLOC_NORMAL);
__str51=allocate([122,0] /* z\00 */, "i8", ALLOC_NORMAL);
_xmlparse_GetInputContext__doc__=allocate([71,101,116,73,110,112,117,116,67,111,110,116,101,120,116,40,41,32,45,62,32,115,116,114,105,110,103,10,82,101,116,117,114,110,32,116,104,101,32,117,110,116,114,97,110,115,108,97,116,101,100,32,116,101,120,116,32,111,102,32,116,104,101,32,105,110,112,117,116,32,116,104,97,116,32,99,97,117,115,101,100,32,116,104,101,32,99,117,114,114,101,110,116,32,101,118,101,110,116,46,10,73,102,32,116,104,101,32,101,118,101,110,116,32,119,97,115,32,103,101,110,101,114,97,116,101,100,32,98,121,32,97,32,108,97,114,103,101,32,97,109,111,117,110,116,32,111,102,32,116,101,120,116,32,40,115,117,99,104,32,97,115,32,97,32,115,116,97,114,116,32,116,97,103,10,102,111,114,32,97,110,32,101,108,101,109,101,110,116,32,119,105,116,104,32,109,97,110,121,32,97,116,116,114,105,98,117,116,101,115,41,44,32,110,111,116,32,97,108,108,32,111,102,32,116,104,101,32,116,101,120,116,32,109,97,121,32,98,101,32,97,118,97,105,108,97,98,108,101,46,0] /* GetInputContext() -> */, "i8", ALLOC_NORMAL);
_xmlparse_ExternalEntityParserCreate__doc__=allocate([69,120,116,101,114,110,97,108,69,110,116,105,116,121,80,97,114,115,101,114,67,114,101,97,116,101,40,99,111,110,116,101,120,116,91,44,32,101,110,99,111,100,105,110,103,93,41,10,67,114,101,97,116,101,32,97,32,112,97,114,115,101,114,32,102,111,114,32,112,97,114,115,105,110,103,32,97,110,32,101,120,116,101,114,110,97,108,32,101,110,116,105,116,121,32,98,97,115,101,100,32,111,110,32,116,104,101,10,105,110,102,111,114,109,97,116,105,111,110,32,112,97,115,115,101,100,32,116,111,32,116,104,101,32,69,120,116,101,114,110,97,108,69,110,116,105,116,121,82,101,102,72,97,110,100,108,101,114,46,0] /* ExternalEntityParser */, "i8", ALLOC_NORMAL);
__str52=allocate([122,124,115,58,69,120,116,101,114,110,97,108,69,110,116,105,116,121,80,97,114,115,101,114,67,114,101,97,116,101,0] /* z|s:ExternalEntityPa */, "i8", ALLOC_NORMAL);
_xmlparse_SetParamEntityParsing__doc__=allocate([83,101,116,80,97,114,97,109,69,110,116,105,116,121,80,97,114,115,105,110,103,40,102,108,97,103,41,32,45,62,32,115,117,99,99,101,115,115,10,67,111,110,116,114,111,108,115,32,112,97,114,115,105,110,103,32,111,102,32,112,97,114,97,109,101,116,101,114,32,101,110,116,105,116,105,101,115,32,40,105,110,99,108,117,100,105,110,103,32,116,104,101,32,101,120,116,101,114,110,97,108,32,68,84,68,10,115,117,98,115,101,116,41,46,32,80,111,115,115,105,98,108,101,32,102,108,97,103,32,118,97,108,117,101,115,32,97,114,101,32,88,77,76,95,80,65,82,65,77,95,69,78,84,73,84,89,95,80,65,82,83,73,78,71,95,78,69,86,69,82,44,10,88,77,76,95,80,65,82,65,77,95,69,78,84,73,84,89,95,80,65,82,83,73,78,71,95,85,78,76,69,83,83,95,83,84,65,78,68,65,76,79,78,69,32,97,110,100,10,88,77,76,95,80,65,82,65,77,95,69,78,84,73,84,89,95,80,65,82,83,73,78,71,95,65,76,87,65,89,83,46,32,82,101,116,117,114,110,115,32,116,114,117,101,32,105,102,32,115,101,116,116,105,110,103,32,116,104,101,32,102,108,97,103,10,119,97,115,32,115,117,99,99,101,115,115,102,117,108,46,0] /* SetParamEntityParsin */, "i8", ALLOC_NORMAL);
__str53=allocate([105,0] /* i\00 */, "i8", ALLOC_NORMAL);
_xmlparse_UseForeignDTD__doc__=allocate([85,115,101,70,111,114,101,105,103,110,68,84,68,40,91,102,108,97,103,93,41,10,65,108,108,111,119,115,32,116,104,101,32,97,112,112,108,105,99,97,116,105,111,110,32,116,111,32,112,114,111,118,105,100,101,32,97,110,32,97,114,116,105,102,105,99,105,97,108,32,101,120,116,101,114,110,97,108,32,115,117,98,115,101,116,32,105,102,32,111,110,101,32,105,115,10,110,111,116,32,115,112,101,99,105,102,105,101,100,32,97,115,32,112,97,114,116,32,111,102,32,116,104,101,32,100,111,99,117,109,101,110,116,32,105,110,115,116,97,110,99,101,46,32,32,84,104,105,115,32,114,101,97,100,105,108,121,32,97,108,108,111,119,115,32,116,104,101,10,117,115,101,32,111,102,32,97,32,39,100,101,102,97,117,108,116,39,32,100,111,99,117,109,101,110,116,32,116,121,112,101,32,99,111,110,116,114,111,108,108,101,100,32,98,121,32,116,104,101,32,97,112,112,108,105,99,97,116,105,111,110,44,32,119,104,105,108,101,32,115,116,105,108,108,10,103,101,116,116,105,110,103,32,116,104,101,32,97,100,118,97,110,116,97,103,101,32,111,102,32,112,114,111,118,105,100,105,110,103,32,100,111,99,117,109,101,110,116,32,116,121,112,101,32,105,110,102,111,114,109,97,116,105,111,110,32,116,111,32,116,104,101,32,112,97,114,115,101,114,46,10,39,102,108,97,103,39,32,100,101,102,97,117,108,116,115,32,116,111,32,84,114,117,101,32,105,102,32,110,111,116,32,112,114,111,118,105,100,101,100,46,0] /* UseForeignDTD([flag] */, "i8", ALLOC_NORMAL);
__str54=allocate([85,115,101,70,111,114,101,105,103,110,68,84,68,0] /* UseForeignDTD\00 */, "i8", ALLOC_NORMAL);
__str55=allocate([80,97,114,115,101,0] /* Parse\00 */, "i8", ALLOC_NORMAL);
__str56=allocate([80,97,114,115,101,70,105,108,101,0] /* ParseFile\00 */, "i8", ALLOC_NORMAL);
__str57=allocate([83,101,116,66,97,115,101,0] /* SetBase\00 */, "i8", ALLOC_NORMAL);
__str58=allocate([71,101,116,66,97,115,101,0] /* GetBase\00 */, "i8", ALLOC_NORMAL);
__str59=allocate([69,120,116,101,114,110,97,108,69,110,116,105,116,121,80,97,114,115,101,114,67,114,101,97,116,101,0] /* ExternalEntityParser */, "i8", ALLOC_NORMAL);
__str60=allocate([83,101,116,80,97,114,97,109,69,110,116,105,116,121,80,97,114,115,105,110,103,0] /* SetParamEntityParsin */, "i8", ALLOC_NORMAL);
__str61=allocate([71,101,116,73,110,112,117,116,67,111,110,116,101,120,116,0] /* GetInputContext\00 */, "i8", ALLOC_NORMAL);
_xmlparse_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_template_string=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
_template_buffer=allocate(257, "i8", ALLOC_NORMAL);
__str62=allocate([114,101,112,108,97,99,101,0] /* replace\00 */, "i8", ALLOC_NORMAL);
__str63=allocate([88,77,76,95,80,97,114,115,101,114,67,114,101,97,116,101,32,102,97,105,108,101,100,0] /* XML_ParserCreate fai */, "i8", ALLOC_NORMAL);
__str64=allocate([69,114,114,111,114,67,111,100,101,0] /* ErrorCode\00 */, "i8", ALLOC_NORMAL);
__str65=allocate([69,114,114,111,114,76,105,110,101,78,117,109,98,101,114,0] /* ErrorLineNumber\00 */, "i8", ALLOC_NORMAL);
__str66=allocate([69,114,114,111,114,67,111,108,117,109,110,78,117,109,98,101,114,0] /* ErrorColumnNumber\00 */, "i8", ALLOC_NORMAL);
__str67=allocate([69,114,114,111,114,66,121,116,101,73,110,100,101,120,0] /* ErrorByteIndex\00 */, "i8", ALLOC_NORMAL);
__str68=allocate([67,117,114,114,101,110,116,76,105,110,101,78,117,109,98,101,114,0] /* CurrentLineNumber\00 */, "i8", ALLOC_NORMAL);
__str69=allocate([67,117,114,114,101,110,116,67,111,108,117,109,110,78,117,109,98,101,114,0] /* CurrentColumnNumber\ */, "i8", ALLOC_NORMAL);
__str70=allocate([67,117,114,114,101,110,116,66,121,116,101,73,110,100,101,120,0] /* CurrentByteIndex\00 */, "i8", ALLOC_NORMAL);
__str71=allocate([98,117,102,102,101,114,95,115,105,122,101,0] /* buffer_size\00 */, "i8", ALLOC_NORMAL);
__str72=allocate([98,117,102,102,101,114,95,116,101,120,116,0] /* buffer_text\00 */, "i8", ALLOC_NORMAL);
__str73=allocate([98,117,102,102,101,114,95,117,115,101,100,0] /* buffer_used\00 */, "i8", ALLOC_NORMAL);
__str74=allocate([110,97,109,101,115,112,97,99,101,95,112,114,101,102,105,120,101,115,0] /* namespace_prefixes\0 */, "i8", ALLOC_NORMAL);
__str75=allocate([111,114,100,101,114,101,100,95,97,116,116,114,105,98,117,116,101,115,0] /* ordered_attributes\0 */, "i8", ALLOC_NORMAL);
__str76=allocate([114,101,116,117,114,110,115,95,117,110,105,99,111,100,101,0] /* returns_unicode\00 */, "i8", ALLOC_NORMAL);
__str77=allocate([115,112,101,99,105,102,105,101,100,95,97,116,116,114,105,98,117,116,101,115,0] /* specified_attributes */, "i8", ALLOC_NORMAL);
__str78=allocate([105,110,116,101,114,110,0] /* intern\00 */, "i8", ALLOC_NORMAL);
__str79=allocate([95,95,109,101,109,98,101,114,115,95,95,0] /* __members__\00 */, "i8", ALLOC_NORMAL);
__str80=allocate([67,97,110,110,111,116,32,100,101,108,101,116,101,32,97,116,116,114,105,98,117,116,101,0] /* Cannot delete attrib */, "i8", ALLOC_NORMAL);
__str81=allocate([98,117,102,102,101,114,95,115,105,122,101,32,109,117,115,116,32,98,101,32,97,110,32,105,110,116,101,103,101,114,0] /* buffer_size must be  */, "i8", ALLOC_NORMAL);
__str82=allocate([98,117,102,102,101,114,95,115,105,122,101,32,109,117,115,116,32,98,101,32,103,114,101,97,116,101,114,32,116,104,97,110,32,122,101,114,111,0] /* buffer_size must be  */, "i8", ALLOC_NORMAL);
__str83=allocate([67,104,97,114,97,99,116,101,114,68,97,116,97,72,97,110,100,108,101,114,0] /* CharacterDataHandler */, "i8", ALLOC_NORMAL);
_Xmlparsetype__doc__=allocate([88,77,76,32,112,97,114,115,101,114,0] /* XML parser\00 */, "i8", ALLOC_NORMAL);
__str84=allocate([112,121,101,120,112,97,116,46,120,109,108,112,97,114,115,101,114,0] /* pyexpat.xmlparser\00 */, "i8", ALLOC_NORMAL);
_Xmlparsetype=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 147947, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_pyexpat_ParserCreate__doc__=allocate([80,97,114,115,101,114,67,114,101,97,116,101,40,91,101,110,99,111,100,105,110,103,91,44,32,110,97,109,101,115,112,97,99,101,95,115,101,112,97,114,97,116,111,114,93,93,41,32,45,62,32,112,97,114,115,101,114,10,82,101,116,117,114,110,32,97,32,110,101,119,32,88,77,76,32,112,97,114,115,101,114,32,111,98,106,101,99,116,46,0] /* ParserCreate([encodi */, "i8", ALLOC_NORMAL);
__str85=allocate([124,122,122,79,58,80,97,114,115,101,114,67,114,101,97,116,101,0] /* |zzO:ParserCreate\00 */, "i8", ALLOC_NORMAL);
_kwlist_11531=allocate(16, "i8*", ALLOC_NORMAL);
__str86=allocate([101,110,99,111,100,105,110,103,0] /* encoding\00 */, "i8", ALLOC_NORMAL);
__str87=allocate([110,97,109,101,115,112,97,99,101,95,115,101,112,97,114,97,116,111,114,0] /* namespace_separator\ */, "i8", ALLOC_NORMAL);
__str88=allocate([110,97,109,101,115,112,97,99,101,95,115,101,112,97,114,97,116,111,114,32,109,117,115,116,32,98,101,32,97,116,32,109,111,115,116,32,111,110,101,32,99,104,97,114,97,99,116,101,114,44,32,111,109,105,116,116,101,100,44,32,111,114,32,78,111,110,101,0] /* namespace_separator  */, "i8", ALLOC_NORMAL);
__str89=allocate([105,110,116,101,114,110,32,109,117,115,116,32,98,101,32,97,32,100,105,99,116,105,111,110,97,114,121,0] /* intern must be a dic */, "i8", ALLOC_NORMAL);
_pyexpat_ErrorString__doc__=allocate([69,114,114,111,114,83,116,114,105,110,103,40,101,114,114,110,111,41,32,45,62,32,115,116,114,105,110,103,10,82,101,116,117,114,110,115,32,115,116,114,105,110,103,32,101,114,114,111,114,32,102,111,114,32,103,105,118,101,110,32,110,117,109,98,101,114,46,0] /* ErrorString(errno) - */, "i8", ALLOC_NORMAL);
__str90=allocate([108,58,69,114,114,111,114,83,116,114,105,110,103,0] /* l:ErrorString\00 */, "i8", ALLOC_NORMAL);
_pyexpat_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0], ALLOC_NORMAL);
__str91=allocate([80,97,114,115,101,114,67,114,101,97,116,101,0] /* ParserCreate\00 */, "i8", ALLOC_NORMAL);
__str92=allocate([69,114,114,111,114,83,116,114,105,110,103,0] /* ErrorString\00 */, "i8", ALLOC_NORMAL);
_pyexpat_module_documentation=allocate([80,121,116,104,111,110,32,119,114,97,112,112,101,114,32,102,111,114,32,69,120,112,97,116,32,112,97,114,115,101,114,46,0] /* Python wrapper for E */, "i8", ALLOC_NORMAL);
__str93=allocate([112,121,101,120,112,97,116,46,101,114,114,111,114,115,0] /* pyexpat.errors\00 */, "i8", ALLOC_NORMAL);
__str94=allocate([112,121,101,120,112,97,116,46,109,111,100,101,108,0] /* pyexpat.model\00 */, "i8", ALLOC_NORMAL);
__str95=allocate([112,121,101,120,112,97,116,0] /* pyexpat\00 */, "i8", ALLOC_NORMAL);
__str96=allocate([120,109,108,46,112,97,114,115,101,114,115,46,101,120,112,97,116,46,69,120,112,97,116,69,114,114,111,114,0] /* xml.parsers.expat.Ex */, "i8", ALLOC_NORMAL);
__str97=allocate([101,114,114,111,114,0] /* error\00 */, "i8", ALLOC_NORMAL);
__str98=allocate([69,120,112,97,116,69,114,114,111,114,0] /* ExpatError\00 */, "i8", ALLOC_NORMAL);
__str99=allocate([88,77,76,80,97,114,115,101,114,84,121,112,101,0] /* XMLParserType\00 */, "i8", ALLOC_NORMAL);
__str100=allocate([50,46,55,46,50,0] /* 2.7.2\00 */, "i8", ALLOC_NORMAL);
__str101=allocate([95,95,118,101,114,115,105,111,110,95,95,0] /* __version__\00 */, "i8", ALLOC_NORMAL);
__str102=allocate([69,88,80,65,84,95,86,69,82,83,73,79,78,0] /* EXPAT_VERSION\00 */, "i8", ALLOC_NORMAL);
__str103=allocate([40,105,105,105,41,0] /* (iii)\00 */, "i8", ALLOC_NORMAL);
__str104=allocate([118,101,114,115,105,111,110,95,105,110,102,111,0] /* version_info\00 */, "i8", ALLOC_NORMAL);
__str105=allocate([110,97,116,105,118,101,95,101,110,99,111,100,105,110,103,0] /* native_encoding\00 */, "i8", ALLOC_NORMAL);
__str106=allocate([85,84,70,45,56,0] /* UTF-8\00 */, "i8", ALLOC_NORMAL);
__str107=allocate([109,111,100,117,108,101,115,0] /* modules\00 */, "i8", ALLOC_NORMAL);
__str108=allocate([101,114,114,111,114,115,0] /* errors\00 */, "i8", ALLOC_NORMAL);
__str109=allocate([109,111,100,101,108,0] /* model\00 */, "i8", ALLOC_NORMAL);
__str110=allocate([115,105,0] /* si\00 */, "i8", ALLOC_NORMAL);
__str111=allocate([102,101,97,116,117,114,101,115,0] /* features\00 */, "i8", ALLOC_NORMAL);
__str112=allocate([88,77,76,95,69,82,82,79,82,95,78,79,95,77,69,77,79,82,89,0] /* XML_ERROR_NO_MEMORY\ */, "i8", ALLOC_NORMAL);
__str113=allocate([88,77,76,95,69,82,82,79,82,95,83,89,78,84,65,88,0] /* XML_ERROR_SYNTAX\00 */, "i8", ALLOC_NORMAL);
__str114=allocate([88,77,76,95,69,82,82,79,82,95,78,79,95,69,76,69,77,69,78,84,83,0] /* XML_ERROR_NO_ELEMENT */, "i8", ALLOC_NORMAL);
__str115=allocate([88,77,76,95,69,82,82,79,82,95,73,78,86,65,76,73,68,95,84,79,75,69,78,0] /* XML_ERROR_INVALID_TO */, "i8", ALLOC_NORMAL);
__str116=allocate([88,77,76,95,69,82,82,79,82,95,85,78,67,76,79,83,69,68,95,84,79,75,69,78,0] /* XML_ERROR_UNCLOSED_T */, "i8", ALLOC_NORMAL);
__str117=allocate([88,77,76,95,69,82,82,79,82,95,80,65,82,84,73,65,76,95,67,72,65,82,0] /* XML_ERROR_PARTIAL_CH */, "i8", ALLOC_NORMAL);
__str118=allocate([88,77,76,95,69,82,82,79,82,95,84,65,71,95,77,73,83,77,65,84,67,72,0] /* XML_ERROR_TAG_MISMAT */, "i8", ALLOC_NORMAL);
__str119=allocate([88,77,76,95,69,82,82,79,82,95,68,85,80,76,73,67,65,84,69,95,65,84,84,82,73,66,85,84,69,0] /* XML_ERROR_DUPLICATE_ */, "i8", ALLOC_NORMAL);
__str120=allocate([88,77,76,95,69,82,82,79,82,95,74,85,78,75,95,65,70,84,69,82,95,68,79,67,95,69,76,69,77,69,78,84,0] /* XML_ERROR_JUNK_AFTER */, "i8", ALLOC_NORMAL);
__str121=allocate([88,77,76,95,69,82,82,79,82,95,80,65,82,65,77,95,69,78,84,73,84,89,95,82,69,70,0] /* XML_ERROR_PARAM_ENTI */, "i8", ALLOC_NORMAL);
__str122=allocate([88,77,76,95,69,82,82,79,82,95,85,78,68,69,70,73,78,69,68,95,69,78,84,73,84,89,0] /* XML_ERROR_UNDEFINED_ */, "i8", ALLOC_NORMAL);
__str123=allocate([88,77,76,95,69,82,82,79,82,95,82,69,67,85,82,83,73,86,69,95,69,78,84,73,84,89,95,82,69,70,0] /* XML_ERROR_RECURSIVE_ */, "i8", ALLOC_NORMAL);
__str124=allocate([88,77,76,95,69,82,82,79,82,95,65,83,89,78,67,95,69,78,84,73,84,89,0] /* XML_ERROR_ASYNC_ENTI */, "i8", ALLOC_NORMAL);
__str125=allocate([88,77,76,95,69,82,82,79,82,95,66,65,68,95,67,72,65,82,95,82,69,70,0] /* XML_ERROR_BAD_CHAR_R */, "i8", ALLOC_NORMAL);
__str126=allocate([88,77,76,95,69,82,82,79,82,95,66,73,78,65,82,89,95,69,78,84,73,84,89,95,82,69,70,0] /* XML_ERROR_BINARY_ENT */, "i8", ALLOC_NORMAL);
__str127=allocate([88,77,76,95,69,82,82,79,82,95,65,84,84,82,73,66,85,84,69,95,69,88,84,69,82,78,65,76,95,69,78,84,73,84,89,95,82,69,70,0] /* XML_ERROR_ATTRIBUTE_ */, "i8", ALLOC_NORMAL);
__str128=allocate([88,77,76,95,69,82,82,79,82,95,77,73,83,80,76,65,67,69,68,95,88,77,76,95,80,73,0] /* XML_ERROR_MISPLACED_ */, "i8", ALLOC_NORMAL);
__str129=allocate([88,77,76,95,69,82,82,79,82,95,85,78,75,78,79,87,78,95,69,78,67,79,68,73,78,71,0] /* XML_ERROR_UNKNOWN_EN */, "i8", ALLOC_NORMAL);
__str130=allocate([88,77,76,95,69,82,82,79,82,95,73,78,67,79,82,82,69,67,84,95,69,78,67,79,68,73,78,71,0] /* XML_ERROR_INCORRECT_ */, "i8", ALLOC_NORMAL);
__str131=allocate([88,77,76,95,69,82,82,79,82,95,85,78,67,76,79,83,69,68,95,67,68,65,84,65,95,83,69,67,84,73,79,78,0] /* XML_ERROR_UNCLOSED_C */, "i8", ALLOC_NORMAL);
__str132=allocate([88,77,76,95,69,82,82,79,82,95,69,88,84,69,82,78,65,76,95,69,78,84,73,84,89,95,72,65,78,68,76,73,78,71,0] /* XML_ERROR_EXTERNAL_E */, "i8", ALLOC_NORMAL);
__str133=allocate([88,77,76,95,69,82,82,79,82,95,78,79,84,95,83,84,65,78,68,65,76,79,78,69,0] /* XML_ERROR_NOT_STANDA */, "i8", ALLOC_NORMAL);
__str134=allocate([88,77,76,95,69,82,82,79,82,95,85,78,69,88,80,69,67,84,69,68,95,83,84,65,84,69,0] /* XML_ERROR_UNEXPECTED */, "i8", ALLOC_NORMAL);
__str135=allocate([88,77,76,95,69,82,82,79,82,95,69,78,84,73,84,89,95,68,69,67,76,65,82,69,68,95,73,78,95,80,69,0] /* XML_ERROR_ENTITY_DEC */, "i8", ALLOC_NORMAL);
__str136=allocate([88,77,76,95,69,82,82,79,82,95,70,69,65,84,85,82,69,95,82,69,81,85,73,82,69,83,95,88,77,76,95,68,84,68,0] /* XML_ERROR_FEATURE_RE */, "i8", ALLOC_NORMAL);
__str137=allocate([88,77,76,95,69,82,82,79,82,95,67,65,78,84,95,67,72,65,78,71,69,95,70,69,65,84,85,82,69,95,79,78,67,69,95,80,65,82,83,73,78,71,0] /* XML_ERROR_CANT_CHANG */, "i8", ALLOC_NORMAL);
__str138=allocate([88,77,76,95,69,82,82,79,82,95,85,78,66,79,85,78,68,95,80,82,69,70,73,88,0] /* XML_ERROR_UNBOUND_PR */, "i8", ALLOC_NORMAL);
__str139=allocate([88,77,76,95,69,82,82,79,82,95,85,78,68,69,67,76,65,82,73,78,71,95,80,82,69,70,73,88,0] /* XML_ERROR_UNDECLARIN */, "i8", ALLOC_NORMAL);
__str140=allocate([88,77,76,95,69,82,82,79,82,95,73,78,67,79,77,80,76,69,84,69,95,80,69,0] /* XML_ERROR_INCOMPLETE */, "i8", ALLOC_NORMAL);
__str141=allocate([88,77,76,95,69,82,82,79,82,95,88,77,76,95,68,69,67,76,0] /* XML_ERROR_XML_DECL\0 */, "i8", ALLOC_NORMAL);
__str142=allocate([88,77,76,95,69,82,82,79,82,95,84,69,88,84,95,68,69,67,76,0] /* XML_ERROR_TEXT_DECL\ */, "i8", ALLOC_NORMAL);
__str143=allocate([88,77,76,95,69,82,82,79,82,95,80,85,66,76,73,67,73,68,0] /* XML_ERROR_PUBLICID\0 */, "i8", ALLOC_NORMAL);
__str144=allocate([88,77,76,95,69,82,82,79,82,95,83,85,83,80,69,78,68,69,68,0] /* XML_ERROR_SUSPENDED\ */, "i8", ALLOC_NORMAL);
__str145=allocate([88,77,76,95,69,82,82,79,82,95,78,79,84,95,83,85,83,80,69,78,68,69,68,0] /* XML_ERROR_NOT_SUSPEN */, "i8", ALLOC_NORMAL);
__str146=allocate([88,77,76,95,69,82,82,79,82,95,65,66,79,82,84,69,68,0] /* XML_ERROR_ABORTED\00 */, "i8", ALLOC_NORMAL);
__str147=allocate([88,77,76,95,69,82,82,79,82,95,70,73,78,73,83,72,69,68,0] /* XML_ERROR_FINISHED\0 */, "i8", ALLOC_NORMAL);
__str148=allocate([88,77,76,95,69,82,82,79,82,95,83,85,83,80,69,78,68,95,80,69,0] /* XML_ERROR_SUSPEND_PE */, "i8", ALLOC_NORMAL);
__str149=allocate([95,95,100,111,99,95,95,0] /* __doc__\00 */, "i8", ALLOC_NORMAL);
__str150=allocate([67,111,110,115,116,97,110,116,115,32,117,115,101,100,32,116,111,32,100,101,115,99,114,105,98,101,32,101,114,114,111,114,32,99,111,110,100,105,116,105,111,110,115,46,0] /* Constants used to de */, "i8", ALLOC_NORMAL);
__str151=allocate([88,77,76,95,80,65,82,65,77,95,69,78,84,73,84,89,95,80,65,82,83,73,78,71,95,78,69,86,69,82,0] /* XML_PARAM_ENTITY_PAR */, "i8", ALLOC_NORMAL);
__str152=allocate([88,77,76,95,80,65,82,65,77,95,69,78,84,73,84,89,95,80,65,82,83,73,78,71,95,85,78,76,69,83,83,95,83,84,65,78,68,65,76,79,78,69,0] /* XML_PARAM_ENTITY_PAR */, "i8", ALLOC_NORMAL);
__str153=allocate([88,77,76,95,80,65,82,65,77,95,69,78,84,73,84,89,95,80,65,82,83,73,78,71,95,65,76,87,65,89,83,0] /* XML_PARAM_ENTITY_PAR */, "i8", ALLOC_NORMAL);
__str154=allocate([67,111,110,115,116,97,110,116,115,32,117,115,101,100,32,116,111,32,105,110,116,101,114,112,114,101,116,32,99,111,110,116,101,110,116,32,109,111,100,101,108,32,105,110,102,111,114,109,97,116,105,111,110,46,0] /* Constants used to in */, "i8", ALLOC_NORMAL);
__str155=allocate([88,77,76,95,67,84,89,80,69,95,69,77,80,84,89,0] /* XML_CTYPE_EMPTY\00 */, "i8", ALLOC_NORMAL);
__str156=allocate([88,77,76,95,67,84,89,80,69,95,65,78,89,0] /* XML_CTYPE_ANY\00 */, "i8", ALLOC_NORMAL);
__str157=allocate([88,77,76,95,67,84,89,80,69,95,77,73,88,69,68,0] /* XML_CTYPE_MIXED\00 */, "i8", ALLOC_NORMAL);
__str158=allocate([88,77,76,95,67,84,89,80,69,95,78,65,77,69,0] /* XML_CTYPE_NAME\00 */, "i8", ALLOC_NORMAL);
__str159=allocate([88,77,76,95,67,84,89,80,69,95,67,72,79,73,67,69,0] /* XML_CTYPE_CHOICE\00 */, "i8", ALLOC_NORMAL);
__str160=allocate([88,77,76,95,67,84,89,80,69,95,83,69,81,0] /* XML_CTYPE_SEQ\00 */, "i8", ALLOC_NORMAL);
__str161=allocate([88,77,76,95,67,81,85,65,78,84,95,78,79,78,69,0] /* XML_CQUANT_NONE\00 */, "i8", ALLOC_NORMAL);
__str162=allocate([88,77,76,95,67,81,85,65,78,84,95,79,80,84,0] /* XML_CQUANT_OPT\00 */, "i8", ALLOC_NORMAL);
__str163=allocate([88,77,76,95,67,81,85,65,78,84,95,82,69,80,0] /* XML_CQUANT_REP\00 */, "i8", ALLOC_NORMAL);
__str164=allocate([88,77,76,95,67,81,85,65,78,84,95,80,76,85,83,0] /* XML_CQUANT_PLUS\00 */, "i8", ALLOC_NORMAL);
_capi_11610=allocate(80, ["i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8* (i32)*",0,0,0,"i32 (%struct.XML_ParserStruct*)*",0,0,0,"i32 (%struct.XML_ParserStruct*)*",0,0,0,"i32 (%struct.XML_ParserStruct*)*",0,0,0,"i32 (%struct.XML_ParserStruct*, i8*, i32, i32)*",0,0,0,"%struct.XML_ParserStruct* (i8*, %struct.XML_Memory_Handling_Suite*, i8*)*",0,0,0,"void (%struct.XML_ParserStruct*)*",0,0,0,"void (%struct.XML_ParserStruct*, void (i8*, i8*, i32)*)*",0,0,0,"void (%struct.XML_ParserStruct*, void (i8*, i8*)*)*",0,0,0,"void (%struct.XML_ParserStruct*, void (i8*, i8*, i32)*)*",0,0,0,"void (%struct.XML_ParserStruct*, void (i8*, i8*, i8**)*, void (i8*, i8*)*)*",0,0,0,"void (%struct.XML_ParserStruct*, void (i8*, i8*, i8*)*, void (i8*, i8*)*)*",0,0,0,"void (%struct.XML_ParserStruct*, void (i8*, i8*, i8*)*)*",0,0,0,"void (%struct.XML_ParserStruct*, i32 (i8*, i8*, %struct.XML_Encoding*)*, i8*)*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0], ALLOC_NORMAL);
__str165=allocate([112,121,101,120,112,97,116,46,101,120,112,97,116,95,67,65,80,73,32,49,46,48,0] /* pyexpat.expat_CAPI 1 */, "i8", ALLOC_NORMAL);
__str166=allocate([112,121,101,120,112,97,116,46,101,120,112,97,116,95,67,65,80,73,0] /* pyexpat.expat_CAPI\0 */, "i8", ALLOC_NORMAL);
__str167=allocate([101,120,112,97,116,95,67,65,80,73,0] /* expat_CAPI\00 */, "i8", ALLOC_NORMAL);
__str168=allocate([83,116,97,114,116,69,108,101,109,101,110,116,72,97,110,100,108,101,114,0] /* StartElementHandler\ */, "i8", ALLOC_NORMAL);
__str169=allocate([69,110,100,69,108,101,109,101,110,116,72,97,110,100,108,101,114,0] /* EndElementHandler\00 */, "i8", ALLOC_NORMAL);
__str170=allocate([80,114,111,99,101,115,115,105,110,103,73,110,115,116,114,117,99,116,105,111,110,72,97,110,100,108,101,114,0] /* ProcessingInstructio */, "i8", ALLOC_NORMAL);
__str171=allocate([85,110,112,97,114,115,101,100,69,110,116,105,116,121,68,101,99,108,72,97,110,100,108,101,114,0] /* UnparsedEntityDeclHa */, "i8", ALLOC_NORMAL);
__str172=allocate([78,111,116,97,116,105,111,110,68,101,99,108,72,97,110,100,108,101,114,0] /* NotationDeclHandler\ */, "i8", ALLOC_NORMAL);
__str173=allocate([83,116,97,114,116,78,97,109,101,115,112,97,99,101,68,101,99,108,72,97,110,100,108,101,114,0] /* StartNamespaceDeclHa */, "i8", ALLOC_NORMAL);
__str174=allocate([69,110,100,78,97,109,101,115,112,97,99,101,68,101,99,108,72,97,110,100,108,101,114,0] /* EndNamespaceDeclHand */, "i8", ALLOC_NORMAL);
__str175=allocate([67,111,109,109,101,110,116,72,97,110,100,108,101,114,0] /* CommentHandler\00 */, "i8", ALLOC_NORMAL);
__str176=allocate([83,116,97,114,116,67,100,97,116,97,83,101,99,116,105,111,110,72,97,110,100,108,101,114,0] /* StartCdataSectionHan */, "i8", ALLOC_NORMAL);
__str177=allocate([69,110,100,67,100,97,116,97,83,101,99,116,105,111,110,72,97,110,100,108,101,114,0] /* EndCdataSectionHandl */, "i8", ALLOC_NORMAL);
__str178=allocate([68,101,102,97,117,108,116,72,97,110,100,108,101,114,0] /* DefaultHandler\00 */, "i8", ALLOC_NORMAL);
__str179=allocate([78,111,116,83,116,97,110,100,97,108,111,110,101,72,97,110,100,108,101,114,0] /* NotStandaloneHandler */, "i8", ALLOC_NORMAL);
__str180=allocate([69,120,116,101,114,110,97,108,69,110,116,105,116,121,82,101,102,72,97,110,100,108,101,114,0] /* ExternalEntityRefHan */, "i8", ALLOC_NORMAL);
__str181=allocate([83,116,97,114,116,68,111,99,116,121,112,101,68,101,99,108,72,97,110,100,108,101,114,0] /* StartDoctypeDeclHand */, "i8", ALLOC_NORMAL);
__str182=allocate([69,110,100,68,111,99,116,121,112,101,68,101,99,108,72,97,110,100,108,101,114,0] /* EndDoctypeDeclHandle */, "i8", ALLOC_NORMAL);
__str183=allocate([69,110,116,105,116,121,68,101,99,108,72,97,110,100,108,101,114,0] /* EntityDeclHandler\00 */, "i8", ALLOC_NORMAL);
__str184=allocate([88,109,108,68,101,99,108,72,97,110,100,108,101,114,0] /* XmlDeclHandler\00 */, "i8", ALLOC_NORMAL);
__str185=allocate([69,108,101,109,101,110,116,68,101,99,108,72,97,110,100,108,101,114,0] /* ElementDeclHandler\0 */, "i8", ALLOC_NORMAL);
__str186=allocate([65,116,116,108,105,115,116,68,101,99,108,72,97,110,100,108,101,114,0] /* AttlistDeclHandler\0 */, "i8", ALLOC_NORMAL);
__str187=allocate([83,107,105,112,112,101,100,69,110,116,105,116,121,72,97,110,100,108,101,114,0] /* SkippedEntityHandler */, "i8", ALLOC_NORMAL);
_handler_info=allocate(1280, ["i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"void (%struct.XML_ParserStruct*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_implicitContext=allocate([120,109,108,61,104,116,116,112,58,47,47,119,119,119,46,119,51,46,111,114,103,47,88,77,76,47,49,57,57,56,47,110,97,109,101,115,112,97,99,101,0] /* xml=http://www.w3.or */, "i8", ALLOC_NORMAL);
__str188=allocate([115,116,97,116,117,115,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* status != ((void _)0 */, "i8", ALLOC_NORMAL);
__str1189=allocate([46,46,47,99,112,121,116,104,111,110,47,77,111,100,117,108,101,115,47,101,120,112,97,116,47,120,109,108,112,97,114,115,101,46,99,0] /* ../cpython/Modules/e */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___3675=allocate([80,121,69,120,112,97,116,95,88,77,76,95,71,101,116,80,97,114,115,105,110,103,83,116,97,116,117,115,0] /* PyExpat_XML_GetParsi */, "i8", ALLOC_NORMAL);
_message_3807=allocate(164, "i8*", ALLOC_NORMAL);
__str2190=allocate([111,117,116,32,111,102,32,109,101,109,111,114,121,0] /* out of memory\00 */, "i8", ALLOC_NORMAL);
__str3191=allocate([115,121,110,116,97,120,32,101,114,114,111,114,0] /* syntax error\00 */, "i8", ALLOC_NORMAL);
__str4192=allocate([110,111,32,101,108,101,109,101,110,116,32,102,111,117,110,100,0] /* no element found\00 */, "i8", ALLOC_NORMAL);
__str5193=allocate([110,111,116,32,119,101,108,108,45,102,111,114,109,101,100,32,40,105,110,118,97,108,105,100,32,116,111,107,101,110,41,0] /* not well-formed (inv */, "i8", ALLOC_NORMAL);
__str6194=allocate([117,110,99,108,111,115,101,100,32,116,111,107,101,110,0] /* unclosed token\00 */, "i8", ALLOC_NORMAL);
__str7195=allocate([112,97,114,116,105,97,108,32,99,104,97,114,97,99,116,101,114,0] /* partial character\00 */, "i8", ALLOC_NORMAL);
__str8196=allocate([109,105,115,109,97,116,99,104,101,100,32,116,97,103,0] /* mismatched tag\00 */, "i8", ALLOC_NORMAL);
__str9197=allocate([100,117,112,108,105,99,97,116,101,32,97,116,116,114,105,98,117,116,101,0] /* duplicate attribute\ */, "i8", ALLOC_NORMAL);
__str10198=allocate([106,117,110,107,32,97,102,116,101,114,32,100,111,99,117,109,101,110,116,32,101,108,101,109,101,110,116,0] /* junk after document  */, "i8", ALLOC_NORMAL);
__str11199=allocate([105,108,108,101,103,97,108,32,112,97,114,97,109,101,116,101,114,32,101,110,116,105,116,121,32,114,101,102,101,114,101,110,99,101,0] /* illegal parameter en */, "i8", ALLOC_NORMAL);
__str12200=allocate([117,110,100,101,102,105,110,101,100,32,101,110,116,105,116,121,0] /* undefined entity\00 */, "i8", ALLOC_NORMAL);
__str13201=allocate([114,101,99,117,114,115,105,118,101,32,101,110,116,105,116,121,32,114,101,102,101,114,101,110,99,101,0] /* recursive entity ref */, "i8", ALLOC_NORMAL);
__str14202=allocate([97,115,121,110,99,104,114,111,110,111,117,115,32,101,110,116,105,116,121,0] /* asynchronous entity\ */, "i8", ALLOC_NORMAL);
__str15203=allocate([114,101,102,101,114,101,110,99,101,32,116,111,32,105,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,32,110,117,109,98,101,114,0] /* reference to invalid */, "i8", ALLOC_NORMAL);
__str16204=allocate([114,101,102,101,114,101,110,99,101,32,116,111,32,98,105,110,97,114,121,32,101,110,116,105,116,121,0] /* reference to binary  */, "i8", ALLOC_NORMAL);
__str17205=allocate([114,101,102,101,114,101,110,99,101,32,116,111,32,101,120,116,101,114,110,97,108,32,101,110,116,105,116,121,32,105,110,32,97,116,116,114,105,98,117,116,101,0] /* reference to externa */, "i8", ALLOC_NORMAL);
__str18206=allocate([88,77,76,32,111,114,32,116,101,120,116,32,100,101,99,108,97,114,97,116,105,111,110,32,110,111,116,32,97,116,32,115,116,97,114,116,32,111,102,32,101,110,116,105,116,121,0] /* XML or text declarat */, "i8", ALLOC_NORMAL);
__str19207=allocate([117,110,107,110,111,119,110,32,101,110,99,111,100,105,110,103,0] /* unknown encoding\00 */, "i8", ALLOC_NORMAL);
__str20208=allocate([101,110,99,111,100,105,110,103,32,115,112,101,99,105,102,105,101,100,32,105,110,32,88,77,76,32,100,101,99,108,97,114,97,116,105,111,110,32,105,115,32,105,110,99,111,114,114,101,99,116,0] /* encoding specified i */, "i8", ALLOC_NORMAL);
__str21209=allocate([117,110,99,108,111,115,101,100,32,67,68,65,84,65,32,115,101,99,116,105,111,110,0] /* unclosed CDATA secti */, "i8", ALLOC_NORMAL);
__str22210=allocate([101,114,114,111,114,32,105,110,32,112,114,111,99,101,115,115,105,110,103,32,101,120,116,101,114,110,97,108,32,101,110,116,105,116,121,32,114,101,102,101,114,101,110,99,101,0] /* error in processing  */, "i8", ALLOC_NORMAL);
__str23211=allocate([100,111,99,117,109,101,110,116,32,105,115,32,110,111,116,32,115,116,97,110,100,97,108,111,110,101,0] /* document is not stan */, "i8", ALLOC_NORMAL);
__str24212=allocate([117,110,101,120,112,101,99,116,101,100,32,112,97,114,115,101,114,32,115,116,97,116,101,32,45,32,112,108,101,97,115,101,32,115,101,110,100,32,97,32,98,117,103,32,114,101,112,111,114,116,0] /* unexpected parser st */, "i8", ALLOC_NORMAL);
__str25213=allocate([101,110,116,105,116,121,32,100,101,99,108,97,114,101,100,32,105,110,32,112,97,114,97,109,101,116,101,114,32,101,110,116,105,116,121,0] /* entity declared in p */, "i8", ALLOC_NORMAL);
__str26214=allocate([114,101,113,117,101,115,116,101,100,32,102,101,97,116,117,114,101,32,114,101,113,117,105,114,101,115,32,88,77,76,95,68,84,68,32,115,117,112,112,111,114,116,32,105,110,32,69,120,112,97,116,0] /* requested feature re */, "i8", ALLOC_NORMAL);
__str27215=allocate([99,97,110,110,111,116,32,99,104,97,110,103,101,32,115,101,116,116,105,110,103,32,111,110,99,101,32,112,97,114,115,105,110,103,32,104,97,115,32,98,101,103,117,110,0] /* cannot change settin */, "i8", ALLOC_NORMAL);
__str28216=allocate([117,110,98,111,117,110,100,32,112,114,101,102,105,120,0] /* unbound prefix\00 */, "i8", ALLOC_NORMAL);
__str29217=allocate([109,117,115,116,32,110,111,116,32,117,110,100,101,99,108,97,114,101,32,112,114,101,102,105,120,0] /* must not undeclare p */, "i8", ALLOC_NORMAL);
__str30218=allocate([105,110,99,111,109,112,108,101,116,101,32,109,97,114,107,117,112,32,105,110,32,112,97,114,97,109,101,116,101,114,32,101,110,116,105,116,121,0] /* incomplete markup in */, "i8", ALLOC_NORMAL);
__str31219=allocate([88,77,76,32,100,101,99,108,97,114,97,116,105,111,110,32,110,111,116,32,119,101,108,108,45,102,111,114,109,101,100,0] /* XML declaration not  */, "i8", ALLOC_NORMAL);
__str32220=allocate([116,101,120,116,32,100,101,99,108,97,114,97,116,105,111,110,32,110,111,116,32,119,101,108,108,45,102,111,114,109,101,100,0] /* text declaration not */, "i8", ALLOC_NORMAL);
__str33221=allocate([105,108,108,101,103,97,108,32,99,104,97,114,97,99,116,101,114,40,115,41,32,105,110,32,112,117,98,108,105,99,32,105,100,0] /* illegal character(s) */, "i8", ALLOC_NORMAL);
__str34222=allocate([112,97,114,115,101,114,32,115,117,115,112,101,110,100,101,100,0] /* parser suspended\00 */, "i8", ALLOC_NORMAL);
__str35223=allocate([112,97,114,115,101,114,32,110,111,116,32,115,117,115,112,101,110,100,101,100,0] /* parser not suspended */, "i8", ALLOC_NORMAL);
__str36224=allocate([112,97,114,115,105,110,103,32,97,98,111,114,116,101,100,0] /* parsing aborted\00 */, "i8", ALLOC_NORMAL);
__str37225=allocate([112,97,114,115,105,110,103,32,102,105,110,105,115,104,101,100,0] /* parsing finished\00 */, "i8", ALLOC_NORMAL);
__str38226=allocate([99,97,110,110,111,116,32,115,117,115,112,101,110,100,32,105,110,32,101,120,116,101,114,110,97,108,32,112,97,114,97,109,101,116,101,114,32,101,110,116,105,116,121,0] /* cannot suspend in ex */, "i8", ALLOC_NORMAL);
__str39227=allocate([114,101,115,101,114,118,101,100,32,112,114,101,102,105,120,32,40,120,109,108,41,32,109,117,115,116,32,110,111,116,32,98,101,32,117,110,100,101,99,108,97,114,101,100,32,111,114,32,98,111,117,110,100,32,116,111,32,97,110,111,116,104,101,114,32,110,97,109,101,115,112,97,99,101,32,110,97,109,101,0] /* reserved prefix (xml */, "i8", ALLOC_NORMAL);
__str40228=allocate([114,101,115,101,114,118,101,100,32,112,114,101,102,105,120,32,40,120,109,108,110,115,41,32,109,117,115,116,32,110,111,116,32,98,101,32,100,101,99,108,97,114,101,100,32,111,114,32,117,110,100,101,99,108,97,114,101,100,0] /* reserved prefix (xml */, "i8", ALLOC_NORMAL);
__str41229=allocate([112,114,101,102,105,120,32,109,117,115,116,32,110,111,116,32,98,101,32,98,111,117,110,100,32,116,111,32,111,110,101,32,111,102,32,116,104,101,32,114,101,115,101,114,118,101,100,32,110,97,109,101,115,112,97,99,101,32,110,97,109,101,115,0] /* prefix must not be b */, "i8", ALLOC_NORMAL);
__str42230=allocate([101,120,112,97,116,95,50,46,48,46,48,0] /* expat_2.0.0\00 */, "i8", ALLOC_NORMAL);
_features_3829=allocate([6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0], ALLOC_NORMAL);
__str43231=allocate([115,105,122,101,111,102,40,88,77,76,95,67,104,97,114,41,0] /* sizeof(XML_Char)\00 */, "i8", ALLOC_NORMAL);
__str44232=allocate([115,105,122,101,111,102,40,88,77,76,95,76,67,104,97,114,41,0] /* sizeof(XML_LChar)\00 */, "i8", ALLOC_NORMAL);
_xmlLen_5100=allocate([36], "i32", ALLOC_NORMAL);
_xmlNamespace_5099=allocate([104,116,116,112,58,47,47,119,119,119,46,119,51,46,111,114,103,47,88,77,76,47,49,57,57,56,47,110,97,109,101,115,112,97,99,101,0] /* http://www.w3.org/XM */, "i8", ALLOC_NORMAL);
_xmlnsLen_5102=allocate([29], "i32", ALLOC_NORMAL);
_xmlnsNamespace_5101=allocate([104,116,116,112,58,47,47,119,119,119,46,119,51,46,111,114,103,47,50,48,48,48,47,120,109,108,110,115,47,0] /* http://www.w3.org/20 */, "i8", ALLOC_NORMAL);
_atypeCDATA_5618=allocate([67,68,65,84,65,0] /* CDATA\00 */, "i8", ALLOC_NORMAL);
_atypeID_5619=allocate([73,68,0] /* ID\00 */, "i8", ALLOC_NORMAL);
_atypeIDREF_5620=allocate([73,68,82,69,70,0] /* IDREF\00 */, "i8", ALLOC_NORMAL);
_atypeIDREFS_5621=allocate([73,68,82,69,70,83,0] /* IDREFS\00 */, "i8", ALLOC_NORMAL);
_atypeENTITY_5622=allocate([69,78,84,73,84,89,0] /* ENTITY\00 */, "i8", ALLOC_NORMAL);
_atypeENTITIES_5623=allocate([69,78,84,73,84,73,69,83,0] /* ENTITIES\00 */, "i8", ALLOC_NORMAL);
_atypeNMTOKEN_5624=allocate([78,77,84,79,75,69,78,0] /* NMTOKEN\00 */, "i8", ALLOC_NORMAL);
_atypeNMTOKENS_5625=allocate([78,77,84,79,75,69,78,83,0] /* NMTOKENS\00 */, "i8", ALLOC_NORMAL);
_enumValueSep_5627=allocate([124,0] /* |\00 */, "i8", ALLOC_NORMAL);
_notationPrefix_5626=allocate([78,79,84,65,84,73,79,78,40,0] /* NOTATION(\00 */, "i8", ALLOC_NORMAL);
_enumValueStart_5628=allocate([40,0] /* (\00 */, "i8", ALLOC_NORMAL);
_KW_ANY=allocate([65,78,89,0] /* ANY\00 */, "i8", ALLOC_NORMAL);
_KW_ATTLIST=allocate([65,84,84,76,73,83,84,0] /* ATTLIST\00 */, "i8", ALLOC_NORMAL);
_KW_CDATA=allocate([67,68,65,84,65,0] /* CDATA\00 */, "i8", ALLOC_NORMAL);
_KW_DOCTYPE=allocate([68,79,67,84,89,80,69,0] /* DOCTYPE\00 */, "i8", ALLOC_NORMAL);
_KW_ELEMENT=allocate([69,76,69,77,69,78,84,0] /* ELEMENT\00 */, "i8", ALLOC_NORMAL);
_KW_EMPTY=allocate([69,77,80,84,89,0] /* EMPTY\00 */, "i8", ALLOC_NORMAL);
_KW_ENTITIES=allocate([69,78,84,73,84,73,69,83,0] /* ENTITIES\00 */, "i8", ALLOC_NORMAL);
_KW_ENTITY=allocate([69,78,84,73,84,89,0] /* ENTITY\00 */, "i8", ALLOC_NORMAL);
_KW_FIXED=allocate([70,73,88,69,68,0] /* FIXED\00 */, "i8", ALLOC_NORMAL);
_KW_ID=allocate([73,68,0] /* ID\00 */, "i8", ALLOC_NORMAL);
_KW_IDREF=allocate([73,68,82,69,70,0] /* IDREF\00 */, "i8", ALLOC_NORMAL);
_KW_IDREFS=allocate([73,68,82,69,70,83,0] /* IDREFS\00 */, "i8", ALLOC_NORMAL);
_KW_IGNORE=allocate([73,71,78,79,82,69,0] /* IGNORE\00 */, "i8", ALLOC_NORMAL);
_KW_IMPLIED=allocate([73,77,80,76,73,69,68,0] /* IMPLIED\00 */, "i8", ALLOC_NORMAL);
_KW_INCLUDE=allocate([73,78,67,76,85,68,69,0] /* INCLUDE\00 */, "i8", ALLOC_NORMAL);
_KW_NDATA=allocate([78,68,65,84,65,0] /* NDATA\00 */, "i8", ALLOC_NORMAL);
_KW_NMTOKEN=allocate([78,77,84,79,75,69,78,0] /* NMTOKEN\00 */, "i8", ALLOC_NORMAL);
_KW_NMTOKENS=allocate([78,77,84,79,75,69,78,83,0] /* NMTOKENS\00 */, "i8", ALLOC_NORMAL);
_KW_NOTATION=allocate([78,79,84,65,84,73,79,78,0] /* NOTATION\00 */, "i8", ALLOC_NORMAL);
_KW_PCDATA=allocate([80,67,68,65,84,65,0] /* PCDATA\00 */, "i8", ALLOC_NORMAL);
_KW_PUBLIC=allocate([80,85,66,76,73,67,0] /* PUBLIC\00 */, "i8", ALLOC_NORMAL);
_KW_REQUIRED=allocate([82,69,81,85,73,82,69,68,0] /* REQUIRED\00 */, "i8", ALLOC_NORMAL);
_KW_SYSTEM=allocate([83,89,83,84,69,77,0] /* SYSTEM\00 */, "i8", ALLOC_NORMAL);
_types_1870=allocate(32, "i8*", ALLOC_NORMAL);
_namingBitmap=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 67108864, 0, 0, 0, -2013265922, 0, 0, 0, 134217726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8388609, 0, 0, 0, -8388609, 0, 0, 0, -1, 0, 0, 0, 2146697215, 0, 0, 0, -514, 0, 0, 0, 2147483647, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -8177, 0, 0, 0, -63832065, 0, 0, 0, 16777215, 0, 0, 0, 0, 0, 0, 0, -65536, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -134217217, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10432, 0, 0, 0, -5, 0, 0, 0, 1417641983, 0, 0, 0, 1048573, 0, 0, 0, -8194, 0, 0, 0, -1, 0, 0, 0, -536936449, 0, 0, 0, -1, 0, 0, 0, -65533, 0, 0, 0, -1, 0, 0, 0, -58977, 0, 0, 0, 54513663, 0, 0, 0, 0, 0, 0, 0, -131072, 0, 0, 0, 41943039, 0, 0, 0, -2, 0, 0, 0, 127, 0, 0, 0, 0, 0, 0, 0, -65536, 0, 0, 0, 460799, 0, 0, 0, 0, 0, 0, 0, 134217726, 0, 0, 0, 2046, 0, 0, 0, -131072, 0, 0, 0, -1, 0, 0, 0, 2097151999, 0, 0, 0, 3112959, 0, 0, 0, 96, 0, 0, 0, -32, 0, 0, 0, 603979775, 0, 0, 0, -16777216, 0, 0, 0, 3, 0, 0, 0, -417824, 0, 0, 0, 63307263, 0, 0, 0, -1342177280, 0, 0, 0, 196611, 0, 0, 0, -423968, 0, 0, 0, 57540095, 0, 0, 0, 1577058304, 0, 0, 0, 1835008, 0, 0, 0, -282656, 0, 0, 0, 602799615, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -417824, 0, 0, 0, 600702463, 0, 0, 0, -1342177280, 0, 0, 0, 3, 0, 0, 0, -700594208, 0, 0, 0, 62899992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -139296, 0, 0, 0, 66059775, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, -139296, 0, 0, 0, 66059775, 0, 0, 0, 1073741824, 0, 0, 0, 3, 0, 0, 0, -139296, 0, 0, 0, 67108351, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, 884735, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, -17816170, 0, 0, 0, 537750702, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -257, 0, 0, 0, 1023, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -65473, 0, 0, 0, 8388607, 0, 0, 0, 514797, 0, 0, 0, 1342177280, 0, 0, 0, -2110697471, 0, 0, 0, 2908843, 0, 0, 0, 1073741824, 0, 0, 0, -176109312, 0, 0, 0, 7, 0, 0, 0, 33622016, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 268435455, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 67108863, 0, 0, 0, 1061158911, 0, 0, 0, -1, 0, 0, 0, -1426112705, 0, 0, 0, 1073741823, 0, 0, 0, -1, 0, 0, 0, 1608515583, 0, 0, 0, 265232348, 0, 0, 0, 534519807, 0, 0, 0, 0, 0, 0, 0, 19520, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 1022, 0, 0, 0, -2, 0, 0, 0, -1, 0, 0, 0, 2097151, 0, 0, 0, -2, 0, 0, 0, -1, 0, 0, 0, 134217727, 0, 0, 0, -32, 0, 0, 0, 8191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 134176768, 0, 0, 0, -2013265922, 0, 0, 0, 134217726, 0, 0, 0, 0, 0, 0, 0, 8388608, 0, 0, 0, -8388609, 0, 0, 0, -8388609, 0, 0, 0, 16777215, 0, 0, 0, 0, 0, 0, 0, -65536, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -134217217, 0, 0, 0, 196611, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 63, 0, 0, 0, 3, 0, 0, 0, -10304, 0, 0, 0, -5, 0, 0, 0, 1417641983, 0, 0, 0, 1048573, 0, 0, 0, -8194, 0, 0, 0, -1, 0, 0, 0, -536936449, 0, 0, 0, -1, 0, 0, 0, -65413, 0, 0, 0, -1, 0, 0, 0, -58977, 0, 0, 0, 54513663, 0, 0, 0, 0, 0, 0, 0, -131072, 0, 0, 0, 41943039, 0, 0, 0, -2, 0, 0, 0, -130945, 0, 0, 0, -1140850693, 0, 0, 0, -65514, 0, 0, 0, 460799, 0, 0, 0, 0, 0, 0, 0, 134217726, 0, 0, 0, 524287, 0, 0, 0, -64513, 0, 0, 0, -1, 0, 0, 0, 2097151999, 0, 0, 0, -1081345, 0, 0, 0, 67059199, 0, 0, 0, -18, 0, 0, 0, -201326593, 0, 0, 0, -14794753, 0, 0, 0, 65487, 0, 0, 0, -417810, 0, 0, 0, -741999105, 0, 0, 0, -1333773921, 0, 0, 0, 262095, 0, 0, 0, -423964, 0, 0, 0, -747766273, 0, 0, 0, 1577073031, 0, 0, 0, 2097088, 0, 0, 0, -282642, 0, 0, 0, -202506753, 0, 0, 0, 15295, 0, 0, 0, 65473, 0, 0, 0, -417810, 0, 0, 0, -204603905, 0, 0, 0, -1329579633, 0, 0, 0, 65475, 0, 0, 0, -700594196, 0, 0, 0, -1010841832, 0, 0, 0, 8404423, 0, 0, 0, 65408, 0, 0, 0, -139282, 0, 0, 0, -1007682049, 0, 0, 0, 6307295, 0, 0, 0, 65475, 0, 0, 0, -139284, 0, 0, 0, -1007682049, 0, 0, 0, 1080049119, 0, 0, 0, 65475, 0, 0, 0, -139284, 0, 0, 0, -1006633473, 0, 0, 0, 8404431, 0, 0, 0, 65475, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, 134184959, 0, 0, 0, 67076095, 0, 0, 0, 0, 0, 0, 0, -17816170, 0, 0, 0, 1006595246, 0, 0, 0, 67059551, 0, 0, 0, 0, 0, 0, 0, 50331648, 0, 0, 0, -1029700609, 0, 0, 0, -257, 0, 0, 0, -130049, 0, 0, 0, -21032993, 0, 0, 0, 50216959, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536805376, 0, 0, 0, 2, 0, 0, 0, 160, 0, 0, 0, 4128766, 0, 0, 0, -2, 0, 0, 0, -1, 0, 0, 0, 1713373183, 0, 0, 0, -2, 0, 0, 0, -1, 0, 0, 0, 2013265919, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_NORMAL);
_nmstrtPages=allocate([2,3,4,5,6,7,8,0,0,9,10,11,12,13,14,15,16,17,0,0,0,0,0,0,0,0,0,0,0,0,18,19,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,23,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] /* \02\03\04\05\06\07\0 */, "i8", ALLOC_NORMAL);
_namePages=allocate([25,3,26,27,28,29,30,0,0,31,32,33,34,35,36,37,16,17,0,0,0,0,0,0,0,0,0,0,0,0,18,19,38,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,23,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] /* \19\03\1A\1B\1C\1D\1 */, "i8", ALLOC_NORMAL);
_CDATA_LSQB_1955=allocate([67,68,65,84,65,91] /* CDATA[ */, "i8", ALLOC_NORMAL);
_utf8_encoding=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 22, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0], ALLOC_NORMAL);
_internal_utf8_encoding=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 22, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0], ALLOC_NORMAL);
_latin1_encoding=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 22, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 26, 28, 28, 22, 28, 28, 28, 28, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_ascii_encoding=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 22, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_CDATA_LSQB_5212=allocate([67,68,65,84,65,91] /* CDATA[ */, "i8", ALLOC_NORMAL);
_little2_encoding=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 22, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 26, 28, 28, 22, 28, 28, 28, 28, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_internal_little2_encoding=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 22, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 26, 28, 28, 22, 28, 28, 28, 28, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_CDATA_LSQB_8477=allocate([67,68,65,84,65,91] /* CDATA[ */, "i8", ALLOC_NORMAL);
_big2_encoding=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 22, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 26, 28, 28, 22, 28, 28, 28, 28, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_internal_big2_encoding=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 10, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 16, 12, 19, 28, 30, 3, 13, 31, 32, 33, 34, 35, 27, 26, 17, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 22, 18, 2, 14, 11, 15, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 20, 28, 4, 28, 22, 28, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 36, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 28, 26, 28, 28, 22, 28, 28, 28, 28, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 28, 22, 22, 22, 22, 22, 22, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i8* (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i32, %struct.ATTRIBUTE*)*",0,0,0,"i32 (%struct.ENCODING*, i8*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*)*",0,0,0,"void (%struct.ENCODING*, i8*, i8*, %struct.POSITION*)*",0,0,0,"i32 (%struct.ENCODING*, i8*, i8*, i8**)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i8**, i8*)*",0,0,0,"void (%struct.ENCODING*, i8**, i8*, i16**, i16*)*",0,0,0,"i32",0,0,0,"i8","i8",0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_KW_version=allocate([118,101,114,115,105,111,110,0] /* version\00 */, "i8", ALLOC_NORMAL);
_KW_encoding=allocate([101,110,99,111,100,105,110,103,0] /* encoding\00 */, "i8", ALLOC_NORMAL);
_KW_standalone=allocate([115,116,97,110,100,97,108,111,110,101,0] /* standalone\00 */, "i8", ALLOC_NORMAL);
_KW_yes=allocate([121,101,115,0] /* yes\00 */, "i8", ALLOC_NORMAL);
_KW_no=allocate([110,111,0] /* no\00 */, "i8", ALLOC_NORMAL);
_KW_ISO_8859_1=allocate([73,83,79,45,56,56,53,57,45,49,0] /* ISO-8859-1\00 */, "i8", ALLOC_NORMAL);
_KW_US_ASCII=allocate([85,83,45,65,83,67,73,73,0] /* US-ASCII\00 */, "i8", ALLOC_NORMAL);
_KW_UTF_8=allocate([85,84,70,45,56,0] /* UTF-8\00 */, "i8", ALLOC_NORMAL);
_KW_UTF_16=allocate([85,84,70,45,49,54,0] /* UTF-16\00 */, "i8", ALLOC_NORMAL);
_KW_UTF_16BE=allocate([85,84,70,45,49,54,66,69,0] /* UTF-16BE\00 */, "i8", ALLOC_NORMAL);
_KW_UTF_16LE=allocate([85,84,70,45,49,54,76,69,0] /* UTF-16LE\00 */, "i8", ALLOC_NORMAL);
_encodingNames_12027=allocate(24, "i8*", ALLOC_NORMAL);
_encodings=allocate(28, "%struct.ENCODING*", ALLOC_NORMAL);
HEAP[_xmlparse_methods]=((__str55)&4294967295);
HEAP[_xmlparse_methods+4]=(FUNCTION_TABLE_OFFSET + 180);
HEAP[_xmlparse_methods+12]=((_xmlparse_Parse__doc__)&4294967295);
HEAP[_xmlparse_methods+16]=((__str56)&4294967295);
HEAP[_xmlparse_methods+20]=(FUNCTION_TABLE_OFFSET + 182);
HEAP[_xmlparse_methods+28]=((_xmlparse_ParseFile__doc__)&4294967295);
HEAP[_xmlparse_methods+32]=((__str57)&4294967295);
HEAP[_xmlparse_methods+36]=(FUNCTION_TABLE_OFFSET + 184);
HEAP[_xmlparse_methods+44]=((_xmlparse_SetBase__doc__)&4294967295);
HEAP[_xmlparse_methods+48]=((__str58)&4294967295);
HEAP[_xmlparse_methods+52]=(FUNCTION_TABLE_OFFSET + 186);
HEAP[_xmlparse_methods+60]=((_xmlparse_GetBase__doc__)&4294967295);
HEAP[_xmlparse_methods+64]=((__str59)&4294967295);
HEAP[_xmlparse_methods+68]=(FUNCTION_TABLE_OFFSET + 188);
HEAP[_xmlparse_methods+76]=((_xmlparse_ExternalEntityParserCreate__doc__)&4294967295);
HEAP[_xmlparse_methods+80]=((__str60)&4294967295);
HEAP[_xmlparse_methods+84]=(FUNCTION_TABLE_OFFSET + 190);
HEAP[_xmlparse_methods+92]=((_xmlparse_SetParamEntityParsing__doc__)&4294967295);
HEAP[_xmlparse_methods+96]=((__str61)&4294967295);
HEAP[_xmlparse_methods+100]=(FUNCTION_TABLE_OFFSET + 192);
HEAP[_xmlparse_methods+108]=((_xmlparse_GetInputContext__doc__)&4294967295);
HEAP[_xmlparse_methods+112]=((__str54)&4294967295);
HEAP[_xmlparse_methods+116]=(FUNCTION_TABLE_OFFSET + 194);
HEAP[_xmlparse_methods+124]=((_xmlparse_UseForeignDTD__doc__)&4294967295);
HEAP[_Xmlparsetype+12]=((__str84)&4294967295);
HEAP[_Xmlparsetype+24]=(FUNCTION_TABLE_OFFSET + 196);
HEAP[_Xmlparsetype+32]=(FUNCTION_TABLE_OFFSET + 198);
HEAP[_Xmlparsetype+36]=(FUNCTION_TABLE_OFFSET + 200);
HEAP[_Xmlparsetype+88]=((_Xmlparsetype__doc__)&4294967295);
HEAP[_Xmlparsetype+92]=(FUNCTION_TABLE_OFFSET + 202);
HEAP[_Xmlparsetype+96]=(FUNCTION_TABLE_OFFSET + 204);
HEAP[_kwlist_11531]=((__str86)&4294967295);
HEAP[_kwlist_11531+4]=((__str87)&4294967295);
HEAP[_kwlist_11531+8]=((__str78)&4294967295);
HEAP[_pyexpat_methods]=((__str91)&4294967295);
HEAP[_pyexpat_methods+4]=(FUNCTION_TABLE_OFFSET + 206);
HEAP[_pyexpat_methods+12]=((_pyexpat_ParserCreate__doc__)&4294967295);
HEAP[_pyexpat_methods+16]=((__str92)&4294967295);
HEAP[_pyexpat_methods+20]=(FUNCTION_TABLE_OFFSET + 208);
HEAP[_pyexpat_methods+28]=((_pyexpat_ErrorString__doc__)&4294967295);
HEAP[_handler_info]=((__str168)&4294967295);
HEAP[_handler_info+4]=(FUNCTION_TABLE_OFFSET + 210);
HEAP[_handler_info+8]=(FUNCTION_TABLE_OFFSET + 212);
HEAP[_handler_info+20]=((__str169)&4294967295);
HEAP[_handler_info+24]=(FUNCTION_TABLE_OFFSET + 214);
HEAP[_handler_info+28]=(FUNCTION_TABLE_OFFSET + 216);
HEAP[_handler_info+40]=((__str170)&4294967295);
HEAP[_handler_info+44]=(FUNCTION_TABLE_OFFSET + 36);
HEAP[_handler_info+48]=(FUNCTION_TABLE_OFFSET + 218);
HEAP[_handler_info+60]=((__str83)&4294967295);
HEAP[_handler_info+64]=(FUNCTION_TABLE_OFFSET + 26);
HEAP[_handler_info+68]=(FUNCTION_TABLE_OFFSET + 220);
HEAP[_handler_info+80]=((__str171)&4294967295);
HEAP[_handler_info+84]=(FUNCTION_TABLE_OFFSET + 222);
HEAP[_handler_info+88]=(FUNCTION_TABLE_OFFSET + 224);
HEAP[_handler_info+100]=((__str172)&4294967295);
HEAP[_handler_info+104]=(FUNCTION_TABLE_OFFSET + 226);
HEAP[_handler_info+108]=(FUNCTION_TABLE_OFFSET + 228);
HEAP[_handler_info+120]=((__str173)&4294967295);
HEAP[_handler_info+124]=(FUNCTION_TABLE_OFFSET + 230);
HEAP[_handler_info+128]=(FUNCTION_TABLE_OFFSET + 232);
HEAP[_handler_info+140]=((__str174)&4294967295);
HEAP[_handler_info+144]=(FUNCTION_TABLE_OFFSET + 234);
HEAP[_handler_info+148]=(FUNCTION_TABLE_OFFSET + 236);
HEAP[_handler_info+160]=((__str175)&4294967295);
HEAP[_handler_info+164]=(FUNCTION_TABLE_OFFSET + 28);
HEAP[_handler_info+168]=(FUNCTION_TABLE_OFFSET + 238);
HEAP[_handler_info+180]=((__str176)&4294967295);
HEAP[_handler_info+184]=(FUNCTION_TABLE_OFFSET + 240);
HEAP[_handler_info+188]=(FUNCTION_TABLE_OFFSET + 242);
HEAP[_handler_info+200]=((__str177)&4294967295);
HEAP[_handler_info+204]=(FUNCTION_TABLE_OFFSET + 244);
HEAP[_handler_info+208]=(FUNCTION_TABLE_OFFSET + 246);
HEAP[_handler_info+220]=((__str178)&4294967295);
HEAP[_handler_info+224]=(FUNCTION_TABLE_OFFSET + 248);
HEAP[_handler_info+228]=(FUNCTION_TABLE_OFFSET + 250);
HEAP[_handler_info+240]=((__str38)&4294967295);
HEAP[_handler_info+244]=(FUNCTION_TABLE_OFFSET + 30);
HEAP[_handler_info+248]=(FUNCTION_TABLE_OFFSET + 252);
HEAP[_handler_info+260]=((__str179)&4294967295);
HEAP[_handler_info+264]=(FUNCTION_TABLE_OFFSET + 254);
HEAP[_handler_info+268]=(FUNCTION_TABLE_OFFSET + 256);
HEAP[_handler_info+280]=((__str180)&4294967295);
HEAP[_handler_info+284]=(FUNCTION_TABLE_OFFSET + 258);
HEAP[_handler_info+288]=(FUNCTION_TABLE_OFFSET + 260);
HEAP[_handler_info+300]=((__str181)&4294967295);
HEAP[_handler_info+304]=(FUNCTION_TABLE_OFFSET + 262);
HEAP[_handler_info+308]=(FUNCTION_TABLE_OFFSET + 264);
HEAP[_handler_info+320]=((__str182)&4294967295);
HEAP[_handler_info+324]=(FUNCTION_TABLE_OFFSET + 266);
HEAP[_handler_info+328]=(FUNCTION_TABLE_OFFSET + 268);
HEAP[_handler_info+340]=((__str183)&4294967295);
HEAP[_handler_info+344]=(FUNCTION_TABLE_OFFSET + 270);
HEAP[_handler_info+348]=(FUNCTION_TABLE_OFFSET + 272);
HEAP[_handler_info+360]=((__str184)&4294967295);
HEAP[_handler_info+364]=(FUNCTION_TABLE_OFFSET + 274);
HEAP[_handler_info+368]=(FUNCTION_TABLE_OFFSET + 276);
HEAP[_handler_info+380]=((__str185)&4294967295);
HEAP[_handler_info+384]=(FUNCTION_TABLE_OFFSET + 278);
HEAP[_handler_info+388]=(FUNCTION_TABLE_OFFSET + 280);
HEAP[_handler_info+400]=((__str186)&4294967295);
HEAP[_handler_info+404]=(FUNCTION_TABLE_OFFSET + 282);
HEAP[_handler_info+408]=(FUNCTION_TABLE_OFFSET + 284);
HEAP[_handler_info+420]=((__str187)&4294967295);
HEAP[_handler_info+424]=(FUNCTION_TABLE_OFFSET + 286);
HEAP[_handler_info+428]=(FUNCTION_TABLE_OFFSET + 288);
HEAP[_message_3807+4]=((__str2190)&4294967295);
HEAP[_message_3807+8]=((__str3191)&4294967295);
HEAP[_message_3807+12]=((__str4192)&4294967295);
HEAP[_message_3807+16]=((__str5193)&4294967295);
HEAP[_message_3807+20]=((__str6194)&4294967295);
HEAP[_message_3807+24]=((__str7195)&4294967295);
HEAP[_message_3807+28]=((__str8196)&4294967295);
HEAP[_message_3807+32]=((__str9197)&4294967295);
HEAP[_message_3807+36]=((__str10198)&4294967295);
HEAP[_message_3807+40]=((__str11199)&4294967295);
HEAP[_message_3807+44]=((__str12200)&4294967295);
HEAP[_message_3807+48]=((__str13201)&4294967295);
HEAP[_message_3807+52]=((__str14202)&4294967295);
HEAP[_message_3807+56]=((__str15203)&4294967295);
HEAP[_message_3807+60]=((__str16204)&4294967295);
HEAP[_message_3807+64]=((__str17205)&4294967295);
HEAP[_message_3807+68]=((__str18206)&4294967295);
HEAP[_message_3807+72]=((__str19207)&4294967295);
HEAP[_message_3807+76]=((__str20208)&4294967295);
HEAP[_message_3807+80]=((__str21209)&4294967295);
HEAP[_message_3807+84]=((__str22210)&4294967295);
HEAP[_message_3807+88]=((__str23211)&4294967295);
HEAP[_message_3807+92]=((__str24212)&4294967295);
HEAP[_message_3807+96]=((__str25213)&4294967295);
HEAP[_message_3807+100]=((__str26214)&4294967295);
HEAP[_message_3807+104]=((__str27215)&4294967295);
HEAP[_message_3807+108]=((__str28216)&4294967295);
HEAP[_message_3807+112]=((__str29217)&4294967295);
HEAP[_message_3807+116]=((__str30218)&4294967295);
HEAP[_message_3807+120]=((__str31219)&4294967295);
HEAP[_message_3807+124]=((__str32220)&4294967295);
HEAP[_message_3807+128]=((__str33221)&4294967295);
HEAP[_message_3807+132]=((__str34222)&4294967295);
HEAP[_message_3807+136]=((__str35223)&4294967295);
HEAP[_message_3807+140]=((__str36224)&4294967295);
HEAP[_message_3807+144]=((__str37225)&4294967295);
HEAP[_message_3807+148]=((__str38226)&4294967295);
HEAP[_message_3807+152]=((__str39227)&4294967295);
HEAP[_message_3807+156]=((__str40228)&4294967295);
HEAP[_message_3807+160]=((__str41229)&4294967295);
HEAP[_features_3829+4]=((__str43231)&4294967295);
HEAP[_features_3829+16]=((__str44232)&4294967295);
HEAP[_types_1870]=((_KW_CDATA)&4294967295);
HEAP[_types_1870+4]=((_KW_ID)&4294967295);
HEAP[_types_1870+8]=((_KW_IDREF)&4294967295);
HEAP[_types_1870+12]=((_KW_IDREFS)&4294967295);
HEAP[_types_1870+16]=((_KW_ENTITY)&4294967295);
HEAP[_types_1870+20]=((_KW_ENTITIES)&4294967295);
HEAP[_types_1870+24]=((_KW_NMTOKEN)&4294967295);
HEAP[_types_1870+28]=((_KW_NMTOKENS)&4294967295);
HEAP[_utf8_encoding]=(FUNCTION_TABLE_OFFSET + 290);
HEAP[_utf8_encoding+4]=(FUNCTION_TABLE_OFFSET + 292);
HEAP[_utf8_encoding+8]=(FUNCTION_TABLE_OFFSET + 294);
HEAP[_utf8_encoding+12]=(FUNCTION_TABLE_OFFSET + 296);
HEAP[_utf8_encoding+16]=(FUNCTION_TABLE_OFFSET + 298);
HEAP[_utf8_encoding+20]=(FUNCTION_TABLE_OFFSET + 300);
HEAP[_utf8_encoding+24]=(FUNCTION_TABLE_OFFSET + 302);
HEAP[_utf8_encoding+28]=(FUNCTION_TABLE_OFFSET + 304);
HEAP[_utf8_encoding+32]=(FUNCTION_TABLE_OFFSET + 306);
HEAP[_utf8_encoding+36]=(FUNCTION_TABLE_OFFSET + 308);
HEAP[_utf8_encoding+40]=(FUNCTION_TABLE_OFFSET + 310);
HEAP[_utf8_encoding+44]=(FUNCTION_TABLE_OFFSET + 312);
HEAP[_utf8_encoding+48]=(FUNCTION_TABLE_OFFSET + 314);
HEAP[_utf8_encoding+52]=(FUNCTION_TABLE_OFFSET + 316);
HEAP[_utf8_encoding+56]=(FUNCTION_TABLE_OFFSET + 318);
HEAP[_utf8_encoding+60]=(FUNCTION_TABLE_OFFSET + 320);
HEAP[_utf8_encoding+328]=(FUNCTION_TABLE_OFFSET + 322);
HEAP[_utf8_encoding+332]=(FUNCTION_TABLE_OFFSET + 324);
HEAP[_utf8_encoding+336]=(FUNCTION_TABLE_OFFSET + 326);
HEAP[_utf8_encoding+340]=(FUNCTION_TABLE_OFFSET + 328);
HEAP[_utf8_encoding+344]=(FUNCTION_TABLE_OFFSET + 330);
HEAP[_utf8_encoding+348]=(FUNCTION_TABLE_OFFSET + 326);
HEAP[_utf8_encoding+352]=(FUNCTION_TABLE_OFFSET + 332);
HEAP[_utf8_encoding+356]=(FUNCTION_TABLE_OFFSET + 334);
HEAP[_utf8_encoding+360]=(FUNCTION_TABLE_OFFSET + 336);
HEAP[_internal_utf8_encoding]=(FUNCTION_TABLE_OFFSET + 290);
HEAP[_internal_utf8_encoding+4]=(FUNCTION_TABLE_OFFSET + 292);
HEAP[_internal_utf8_encoding+8]=(FUNCTION_TABLE_OFFSET + 294);
HEAP[_internal_utf8_encoding+12]=(FUNCTION_TABLE_OFFSET + 296);
HEAP[_internal_utf8_encoding+16]=(FUNCTION_TABLE_OFFSET + 298);
HEAP[_internal_utf8_encoding+20]=(FUNCTION_TABLE_OFFSET + 300);
HEAP[_internal_utf8_encoding+24]=(FUNCTION_TABLE_OFFSET + 302);
HEAP[_internal_utf8_encoding+28]=(FUNCTION_TABLE_OFFSET + 304);
HEAP[_internal_utf8_encoding+32]=(FUNCTION_TABLE_OFFSET + 306);
HEAP[_internal_utf8_encoding+36]=(FUNCTION_TABLE_OFFSET + 308);
HEAP[_internal_utf8_encoding+40]=(FUNCTION_TABLE_OFFSET + 310);
HEAP[_internal_utf8_encoding+44]=(FUNCTION_TABLE_OFFSET + 312);
HEAP[_internal_utf8_encoding+48]=(FUNCTION_TABLE_OFFSET + 314);
HEAP[_internal_utf8_encoding+52]=(FUNCTION_TABLE_OFFSET + 316);
HEAP[_internal_utf8_encoding+56]=(FUNCTION_TABLE_OFFSET + 318);
HEAP[_internal_utf8_encoding+60]=(FUNCTION_TABLE_OFFSET + 320);
HEAP[_internal_utf8_encoding+328]=(FUNCTION_TABLE_OFFSET + 322);
HEAP[_internal_utf8_encoding+332]=(FUNCTION_TABLE_OFFSET + 324);
HEAP[_internal_utf8_encoding+336]=(FUNCTION_TABLE_OFFSET + 326);
HEAP[_internal_utf8_encoding+340]=(FUNCTION_TABLE_OFFSET + 328);
HEAP[_internal_utf8_encoding+344]=(FUNCTION_TABLE_OFFSET + 330);
HEAP[_internal_utf8_encoding+348]=(FUNCTION_TABLE_OFFSET + 326);
HEAP[_internal_utf8_encoding+352]=(FUNCTION_TABLE_OFFSET + 332);
HEAP[_internal_utf8_encoding+356]=(FUNCTION_TABLE_OFFSET + 334);
HEAP[_internal_utf8_encoding+360]=(FUNCTION_TABLE_OFFSET + 336);
HEAP[_latin1_encoding]=(FUNCTION_TABLE_OFFSET + 290);
HEAP[_latin1_encoding+4]=(FUNCTION_TABLE_OFFSET + 292);
HEAP[_latin1_encoding+8]=(FUNCTION_TABLE_OFFSET + 294);
HEAP[_latin1_encoding+12]=(FUNCTION_TABLE_OFFSET + 296);
HEAP[_latin1_encoding+16]=(FUNCTION_TABLE_OFFSET + 298);
HEAP[_latin1_encoding+20]=(FUNCTION_TABLE_OFFSET + 300);
HEAP[_latin1_encoding+24]=(FUNCTION_TABLE_OFFSET + 302);
HEAP[_latin1_encoding+28]=(FUNCTION_TABLE_OFFSET + 304);
HEAP[_latin1_encoding+32]=(FUNCTION_TABLE_OFFSET + 306);
HEAP[_latin1_encoding+36]=(FUNCTION_TABLE_OFFSET + 308);
HEAP[_latin1_encoding+40]=(FUNCTION_TABLE_OFFSET + 310);
HEAP[_latin1_encoding+44]=(FUNCTION_TABLE_OFFSET + 312);
HEAP[_latin1_encoding+48]=(FUNCTION_TABLE_OFFSET + 314);
HEAP[_latin1_encoding+52]=(FUNCTION_TABLE_OFFSET + 316);
HEAP[_latin1_encoding+56]=(FUNCTION_TABLE_OFFSET + 338);
HEAP[_latin1_encoding+60]=(FUNCTION_TABLE_OFFSET + 340);
HEAP[_ascii_encoding]=(FUNCTION_TABLE_OFFSET + 290);
HEAP[_ascii_encoding+4]=(FUNCTION_TABLE_OFFSET + 292);
HEAP[_ascii_encoding+8]=(FUNCTION_TABLE_OFFSET + 294);
HEAP[_ascii_encoding+12]=(FUNCTION_TABLE_OFFSET + 296);
HEAP[_ascii_encoding+16]=(FUNCTION_TABLE_OFFSET + 298);
HEAP[_ascii_encoding+20]=(FUNCTION_TABLE_OFFSET + 300);
HEAP[_ascii_encoding+24]=(FUNCTION_TABLE_OFFSET + 302);
HEAP[_ascii_encoding+28]=(FUNCTION_TABLE_OFFSET + 304);
HEAP[_ascii_encoding+32]=(FUNCTION_TABLE_OFFSET + 306);
HEAP[_ascii_encoding+36]=(FUNCTION_TABLE_OFFSET + 308);
HEAP[_ascii_encoding+40]=(FUNCTION_TABLE_OFFSET + 310);
HEAP[_ascii_encoding+44]=(FUNCTION_TABLE_OFFSET + 312);
HEAP[_ascii_encoding+48]=(FUNCTION_TABLE_OFFSET + 314);
HEAP[_ascii_encoding+52]=(FUNCTION_TABLE_OFFSET + 316);
HEAP[_ascii_encoding+56]=(FUNCTION_TABLE_OFFSET + 342);
HEAP[_ascii_encoding+60]=(FUNCTION_TABLE_OFFSET + 340);
HEAP[_little2_encoding]=(FUNCTION_TABLE_OFFSET + 344);
HEAP[_little2_encoding+4]=(FUNCTION_TABLE_OFFSET + 346);
HEAP[_little2_encoding+8]=(FUNCTION_TABLE_OFFSET + 348);
HEAP[_little2_encoding+12]=(FUNCTION_TABLE_OFFSET + 350);
HEAP[_little2_encoding+16]=(FUNCTION_TABLE_OFFSET + 352);
HEAP[_little2_encoding+20]=(FUNCTION_TABLE_OFFSET + 354);
HEAP[_little2_encoding+24]=(FUNCTION_TABLE_OFFSET + 356);
HEAP[_little2_encoding+28]=(FUNCTION_TABLE_OFFSET + 358);
HEAP[_little2_encoding+32]=(FUNCTION_TABLE_OFFSET + 360);
HEAP[_little2_encoding+36]=(FUNCTION_TABLE_OFFSET + 362);
HEAP[_little2_encoding+40]=(FUNCTION_TABLE_OFFSET + 364);
HEAP[_little2_encoding+44]=(FUNCTION_TABLE_OFFSET + 366);
HEAP[_little2_encoding+48]=(FUNCTION_TABLE_OFFSET + 368);
HEAP[_little2_encoding+52]=(FUNCTION_TABLE_OFFSET + 370);
HEAP[_little2_encoding+56]=(FUNCTION_TABLE_OFFSET + 372);
HEAP[_little2_encoding+60]=(FUNCTION_TABLE_OFFSET + 374);
HEAP[_internal_little2_encoding]=(FUNCTION_TABLE_OFFSET + 344);
HEAP[_internal_little2_encoding+4]=(FUNCTION_TABLE_OFFSET + 346);
HEAP[_internal_little2_encoding+8]=(FUNCTION_TABLE_OFFSET + 348);
HEAP[_internal_little2_encoding+12]=(FUNCTION_TABLE_OFFSET + 350);
HEAP[_internal_little2_encoding+16]=(FUNCTION_TABLE_OFFSET + 352);
HEAP[_internal_little2_encoding+20]=(FUNCTION_TABLE_OFFSET + 354);
HEAP[_internal_little2_encoding+24]=(FUNCTION_TABLE_OFFSET + 356);
HEAP[_internal_little2_encoding+28]=(FUNCTION_TABLE_OFFSET + 358);
HEAP[_internal_little2_encoding+32]=(FUNCTION_TABLE_OFFSET + 360);
HEAP[_internal_little2_encoding+36]=(FUNCTION_TABLE_OFFSET + 362);
HEAP[_internal_little2_encoding+40]=(FUNCTION_TABLE_OFFSET + 364);
HEAP[_internal_little2_encoding+44]=(FUNCTION_TABLE_OFFSET + 366);
HEAP[_internal_little2_encoding+48]=(FUNCTION_TABLE_OFFSET + 368);
HEAP[_internal_little2_encoding+52]=(FUNCTION_TABLE_OFFSET + 370);
HEAP[_internal_little2_encoding+56]=(FUNCTION_TABLE_OFFSET + 372);
HEAP[_internal_little2_encoding+60]=(FUNCTION_TABLE_OFFSET + 374);
HEAP[_big2_encoding]=(FUNCTION_TABLE_OFFSET + 376);
HEAP[_big2_encoding+4]=(FUNCTION_TABLE_OFFSET + 378);
HEAP[_big2_encoding+8]=(FUNCTION_TABLE_OFFSET + 380);
HEAP[_big2_encoding+12]=(FUNCTION_TABLE_OFFSET + 382);
HEAP[_big2_encoding+16]=(FUNCTION_TABLE_OFFSET + 384);
HEAP[_big2_encoding+20]=(FUNCTION_TABLE_OFFSET + 386);
HEAP[_big2_encoding+24]=(FUNCTION_TABLE_OFFSET + 388);
HEAP[_big2_encoding+28]=(FUNCTION_TABLE_OFFSET + 390);
HEAP[_big2_encoding+32]=(FUNCTION_TABLE_OFFSET + 392);
HEAP[_big2_encoding+36]=(FUNCTION_TABLE_OFFSET + 394);
HEAP[_big2_encoding+40]=(FUNCTION_TABLE_OFFSET + 396);
HEAP[_big2_encoding+44]=(FUNCTION_TABLE_OFFSET + 398);
HEAP[_big2_encoding+48]=(FUNCTION_TABLE_OFFSET + 400);
HEAP[_big2_encoding+52]=(FUNCTION_TABLE_OFFSET + 402);
HEAP[_big2_encoding+56]=(FUNCTION_TABLE_OFFSET + 404);
HEAP[_big2_encoding+60]=(FUNCTION_TABLE_OFFSET + 406);
HEAP[_internal_big2_encoding]=(FUNCTION_TABLE_OFFSET + 376);
HEAP[_internal_big2_encoding+4]=(FUNCTION_TABLE_OFFSET + 378);
HEAP[_internal_big2_encoding+8]=(FUNCTION_TABLE_OFFSET + 380);
HEAP[_internal_big2_encoding+12]=(FUNCTION_TABLE_OFFSET + 382);
HEAP[_internal_big2_encoding+16]=(FUNCTION_TABLE_OFFSET + 384);
HEAP[_internal_big2_encoding+20]=(FUNCTION_TABLE_OFFSET + 386);
HEAP[_internal_big2_encoding+24]=(FUNCTION_TABLE_OFFSET + 388);
HEAP[_internal_big2_encoding+28]=(FUNCTION_TABLE_OFFSET + 390);
HEAP[_internal_big2_encoding+32]=(FUNCTION_TABLE_OFFSET + 392);
HEAP[_internal_big2_encoding+36]=(FUNCTION_TABLE_OFFSET + 394);
HEAP[_internal_big2_encoding+40]=(FUNCTION_TABLE_OFFSET + 396);
HEAP[_internal_big2_encoding+44]=(FUNCTION_TABLE_OFFSET + 398);
HEAP[_internal_big2_encoding+48]=(FUNCTION_TABLE_OFFSET + 400);
HEAP[_internal_big2_encoding+52]=(FUNCTION_TABLE_OFFSET + 402);
HEAP[_internal_big2_encoding+56]=(FUNCTION_TABLE_OFFSET + 404);
HEAP[_internal_big2_encoding+60]=(FUNCTION_TABLE_OFFSET + 406);
HEAP[_encodingNames_12027]=((_KW_ISO_8859_1)&4294967295);
HEAP[_encodingNames_12027+4]=((_KW_US_ASCII)&4294967295);
HEAP[_encodingNames_12027+8]=((_KW_UTF_8)&4294967295);
HEAP[_encodingNames_12027+12]=((_KW_UTF_16)&4294967295);
HEAP[_encodingNames_12027+16]=((_KW_UTF_16BE)&4294967295);
HEAP[_encodingNames_12027+20]=((_KW_UTF_16LE)&4294967295);
HEAP[_encodings]=((_latin1_encoding)&4294967295);
HEAP[_encodings+4]=((_ascii_encoding)&4294967295);
HEAP[_encodings+8]=((_utf8_encoding)&4294967295);
HEAP[_encodings+12]=((_big2_encoding)&4294967295);
HEAP[_encodings+16]=((_big2_encoding)&4294967295);
HEAP[_encodings+20]=((_little2_encoding)&4294967295);
HEAP[_encodings+24]=((_utf8_encoding)&4294967295);

  __globalConstructor__();
}
Module['run'] = run;

// {{PRE_RUN_ADDITIONS}}

run();

// {{POST_RUN_ADDITIONS}}





  // {{MODULE_ADDITIONS}}

  return Module;
});

