// Warning: Cannot correct overflows of this many bits: 64 at line 3093
// Warning: Cannot correct overflows of this many bits: 64 at line 3664
// Warning: Cannot correct overflows of this many bits: 64 at line 4013
// Warning: Cannot correct overflows of this many bits: 64 at line 4043
// Warning: Cannot correct overflows of this many bits: 64 at line 4729
// Warning: Cannot correct overflows of this many bits: 64 at line 4740
// Warning: Cannot correct overflows of this many bits: 64 at line 4962
// Warning: Cannot correct overflows of this many bits: 64 at line 5025
// Warning: Cannot correct overflows of this many bits: 64 at line 5036
// Warning: Cannot correct overflows of this many bits: 64 at line 5038
// Warning: Cannot correct overflows of this many bits: 64 at line 5051
// Warning: Cannot correct overflows of this many bits: 64 at line 5067
// Warning: Cannot correct overflows of this many bits: 64 at line 5073
// Warning: Cannot correct overflows of this many bits: 64 at line 5075
// Warning: Cannot correct overflows of this many bits: 64 at line 5180
// Warning: Cannot correct overflows of this many bits: 64 at line 5191
// Warning: Cannot correct overflows of this many bits: 64 at line 5402
// Warning: Cannot correct overflows of this many bits: 64 at line 6159
// Warning: Cannot correct overflows of this many bits: 64 at line 6803
// Warning: Cannot correct overflows of this many bits: 64 at line 6906
// Warning: Cannot correct overflows of this many bits: 64 at line 7309
// Warning: Cannot correct overflows of this many bits: 64 at line 7347
// Warning: Cannot correct overflows of this many bits: 64 at line 7955
// Warning: Cannot correct overflows of this many bits: 64 at line 8063
// Warning: Cannot correct overflows of this many bits: 64 at line 8078
// Warning: Cannot correct overflows of this many bits: 64 at line 8080
// Warning: Cannot correct overflows of this many bits: 64 at line 8088
// Warning: Cannot correct overflows of this many bits: 64 at line 8101
// Warning: Cannot correct overflows of this many bits: 64 at line 8151
// Warning: Cannot correct overflows of this many bits: 64 at line 8176
// Warning: Cannot correct overflows of this many bits: 64 at line 8215
// Warning: Cannot correct overflows of this many bits: 64 at line 8235
// Warning: Cannot correct overflows of this many bits: 64 at line 8481
// Warning: Cannot correct overflows of this many bits: 64 at line 8616
// Warning: Cannot correct overflows of this many bits: 64 at line 8626
// Warning: Cannot correct overflows of this many bits: 64 at line 8636
// Warning: Cannot correct overflows of this many bits: 64 at line 8679
// Warning: Cannot correct overflows of this many bits: 64 at line 8706
// Warning: Cannot correct overflows of this many bits: 64 at line 8790
// Warning: Cannot correct overflows of this many bits: 64 at line 8807
// Warning: Cannot correct overflows of this many bits: 64 at line 8818
// Warning: 64 bit OR - precision limit may be hit
// Warning: Cannot correct overflows of this many bits: 64 at line 35256
// Warning: Cannot correct overflows of this many bits: 64 at line 35482
"use strict";

// Capture the output of this into a variable, if you want
(function(FUNCTION_TABLE_OFFSET) {
  var Module = {};
  var args = [];
  Module.arguments = [];

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime essentials
//========================================

var __globalConstructor__ = function globalConstructor() {
}

// === Body ===



var $0___SIZE = 96; // %0
  
var $1___SIZE = 16; // %1
  
var $2___SIZE = 196; // %2
  
var $3___SIZE = 256; // %3
  
var $4___SIZE = 16; // %4
  
var $5___SIZE = 40; // %5
  
var $6___SIZE = 20; // %6
  
var $7___SIZE = 20; // %7
  
var $8___SIZE = 80; // %8
  
var $9___SIZE = 20; // %9
  
var $10___SIZE = 208; // %10
  
var $11___SIZE = 176; // %11
  
var $12___SIZE = 40; // %12
  
var $13___SIZE = 288; // %13
  
var $14___SIZE = 320; // %14
  
var $15___SIZE = 224; // %15
  
var $16___SIZE = 196; // %16
  
var $17___SIZE = 320; // %17
  
var $18___SIZE = 48; // %18
  
var $19___SIZE = 32; // %19
  
var $20___SIZE = 224; // %20
  
var $21___SIZE = 80; // %21
  
var $22___SIZE = 80; // %22
  
var $23___SIZE = 16; // %23
  
var $24___SIZE = 240; // %24
  
var $25___SIZE = 80; // %25
  
var $26___SIZE = 120; // %26
  
var $struct_FILE___SIZE = 148; // %struct.FILE
  var $struct_FILE___FLATTENER = [0,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64,68,70,71,72,76,84,88,92,96,100,104,108];
var $struct_PyBlockingIOErrorObject___SIZE = 36; // %struct.PyBlockingIOErrorObject
  
var $struct_PyBufferProcs___SIZE = 24; // %struct.PyBufferProcs
  
var $struct_PyByteArrayObject___SIZE = 24; // %struct.PyByteArrayObject
  
var $struct_PyEnvironmentErrorObject___SIZE = 32; // %struct.PyEnvironmentErrorObject
  
var $struct_PyGetSetDef___SIZE = 20; // %struct.PyGetSetDef
  
var $struct_PyIntObject___SIZE = 12; // %struct.PyIntObject
  
var $struct_PyLongObject___SIZE = 0; // %struct.PyLongObject
  var $struct_PyLongObject___FLATTENER = [];
var $struct_PyMappingMethods___SIZE = 12; // %struct.PyMappingMethods
  
var $struct_PyMemberDef___SIZE = 20; // %struct.PyMemberDef
  
var $struct_PyMethodDef___SIZE = 16; // %struct.PyMethodDef
  
var $struct_PyNumberMethods___SIZE = 156; // %struct.PyNumberMethods
  
var $struct_PyObject___SIZE = 8; // %struct.PyObject
  
var $struct_PySequenceMethods___SIZE = 40; // %struct.PySequenceMethods
  
var $struct_PyStringObject___SIZE = 24; // %struct.PyStringObject
  
var $struct_PyTupleObject___SIZE = 16; // %struct.PyTupleObject
  
var $struct_PyUnicodeObject___SIZE = 24; // %struct.PyUnicodeObject
  
var $struct_PyVarObject___SIZE = 12; // %struct.PyVarObject
  
var $struct_Py_buffer___SIZE = 52; // %struct.Py_buffer
  var $struct_Py_buffer___FLATTENER = [0,4,8,12,16,20,24,28,32,36,40,48];
var $struct__IO_marker___SIZE = 12; // %struct._IO_marker
  
var $struct__typeobject___SIZE = 196; // %struct._typeobject
  
var $struct_anon___SIZE = 12; // %struct.anon
  
var $struct_buffered___SIZE = 100; // %struct.buffered
  var $struct_buffered___FLATTENER = [0,4,8,12,16,20,24,28,32,40,44,52,60,68,76,84,88,92,96];
var $struct_bytesio___SIZE = 32; // %struct.bytesio
  
var $struct_cookie_type___SIZE = 24; // %struct.cookie_type
  var $struct_cookie_type___FLATTENER = [0,8,12,16,20];
var $struct_encodefuncentry___SIZE = 8; // %struct.encodefuncentry
  
var $struct_fileio___SIZE = 24; // %struct.fileio
  
var $struct_iobase___SIZE = 16; // %struct.iobase
  
var $struct_nldecoder_object___SIZE = 20; // %struct.nldecoder_object
  
var $struct_rwpair___SIZE = 24; // %struct.rwpair
  
var $struct_stat___SIZE = 96; // %struct.stat
  var $struct_stat___FLATTENER = [0,8,12,16,20,24,28,32,40,44,52,56,64,72,80,88];
var $struct_stringio___SIZE = 48; // %struct.stringio
  var $struct_stringio___FLATTENER = [0,4,8,12,16,20,24,25,26,27,28,32,36,40,44];
var $struct_textio___SIZE = 96; // %struct.textio
  var $struct_textio___FLATTENER = [0,4,8,12,16,20,24,28,32,36,40,44,48,49,50,51,52,53,56,60,64,68,72,76,80,84,88,92];
var $struct_timespec___SIZE = 8; // %struct.timespec
  
var $union_PyGC_Head___SIZE = 12; // %union.PyGC_Head
  
var _bufferediobase_doc;
var __str;
var __str1;
var __str2;
var _PyExc_TypeError;
var __str3;
var _bufferediobase_detach_doc;
var __str4;
var _bufferediobase_read_doc;
var _bufferediobase_read1_doc;
var __str5;
var _bufferediobase_write_doc;
var __str6;
var __str7;
var _bufferediobase_methods;
var __str8;
var _PyBufferedIOBase_Type;
var __str9;
var __str10;
var ___PRETTY_FUNCTION___8563;
var _PyExc_ValueError;
var __str11;
var __str12;
var __Py_NoneStruct;
var __str13;
var __str14;
var _PyExc_IOError;
var __str15;
var __str16;
var _eintr_int_9093;
var __str17;
var ___PRETTY_FUNCTION___9098;
var _PyExc_EnvironmentError;
var __str18;
var __str19;
var __str20;
var __str21;
var __str22;
var __str23;
var __str24;
var __str25;
var __str26;
var __str27;
var __str28;
var __str29;
var __str30;
var __str31;
var __str32;
var _PyExc_AttributeError;
var __str33;
var __str34;
var _bufferedreader_doc;
var _C_170_10029;
var __str35;
var __str36;
var __str37;
var __Py_TrueStruct;
var __str38;
var __str39;
var ___PRETTY_FUNCTION___10369;
var __str40;
var __str41;
var __str42;
var __str43;
var __str44;
var __str45;
var __str46;
var __str47;
var __str48;
var __str49;
var __str50;
var __str51;
var _bufferedreader_methods;
var _bufferedreader_members;
var __str52;
var _bufferedreader_getset;
var __str53;
var _PyBufferedReader_Type;
var _PyExc_DeprecationWarning;
var __str54;
var _bufferedwriter_doc;
var _C_210_10564;
var __str55;
var __str56;
var __str57;
var __str58;
var __str59;
var __str60;
var ___PRETTY_FUNCTION___10762;
var _bufferedwriter_methods;
var _bufferedwriter_members;
var _bufferedwriter_getset;
var __str61;
var _PyBufferedWriter_Type;
var _bufferedrwpair_doc;
var __str62;
var __str63;
var ___PRETTY_FUNCTION___11129;
var __Py_ZeroStruct;
var _bufferedrwpair_methods;
var _bufferedrwpair_getset;
var __str64;
var _PyBufferedRWPair_Type;
var _bufferedrandom_doc;
var _C_248_11327;
var _bufferedrandom_methods;
var _bufferedrandom_members;
var _bufferedrandom_getset;
var __str65;
var _PyBufferedRandom_Type;
var __str66;
var __str167;
var ___PRETTY_FUNCTION___8438;
var __str268;
var __str369;
var ___PRETTY_FUNCTION___8477;
var _PyExc_OverflowError;
var __str470;
var ___PRETTY_FUNCTION___8514;
var __str571;
var _flush_doc;
var __str672;
var _getval_doc;
var _isatty_doc;
var _tell_doc;
var _read_doc;
var __str773;
var __str874;
var ___PRETTY_FUNCTION___8642;
var _read1_doc;
var _readline_doc;
var __str975;
var _readlines_doc;
var __str1076;
var _readinto_doc;
var __str1177;
var __str1278;
var ___PRETTY_FUNCTION___8844;
var _truncate_doc;
var __str1379;
var __str1480;
var _seek_doc;
var __str1581;
var __str1682;
var __str1783;
var __str1884;
var _write_doc;
var _writelines_doc;
var _close_doc;
var __str1985;
var __str2086;
var ___PRETTY_FUNCTION___9134;
var __str2187;
var __str2288;
var __str2389;
var __str2490;
var __str2591;
var ___PRETTY_FUNCTION___9218;
var __str2692;
var ___PRETTY_FUNCTION___9255;
var _C_82_9290;
var __str2793;
var __str2894;
var __str2995;
var __str3096;
var _bytesio_getsetlist;
var __str3197;
var __str3298;
var __str3399;
var __str34100;
var __str35101;
var __str36102;
var __str37103;
var __str38104;
var __str39105;
var __str40106;
var __str41107;
var __str42108;
var __str43109;
var __str44110;
var __str45111;
var __str46112;
var __str47113;
var __str48114;
var __str49115;
var _bytesio_methods;
var _bytesio_doc;
var __str50116;
var _PyBytesIO_Type;
var __str117;
var __str1118;
var __str2119;
var __str3120;
var ___PRETTY_FUNCTION___8576;
var __str4121;
var _PyExc_OSError;
var __str5122;
var __str6123;
var __str7124;
var ___PRETTY_FUNCTION___8670;
var __str8125;
var _kwlist_8657;
var __str9126;
var __str10127;
var __str11128;
var _PyFloat_Type;
var __str12129;
var __str13130;
var _PyByteArray_Type;
var _Py_FileSystemDefaultEncoding;
var __str14131;
var __str15132;
var __str16133;
var __str17134;
var __str18135;
var __str19136;
var ___PRETTY_FUNCTION___8879;
var __str20137;
var __str21138;
var __str22139;
var __str23140;
var __str24141;
var __str25142;
var __str26143;
var __str27144;
var __str28145;
var __str29146;
var __str30147;
var __str31148;
var __str32149;
var __str33150;
var __str34151;
var __str35152;
var __str36153;
var _fileio_doc;
var _read_doc154;
var _readall_doc;
var _write_doc155;
var _fileno_doc;
var _seek_doc156;
var _truncate_doc157;
var _tell_doc158;
var _readinto_doc159;
var _close_doc160;
var _isatty_doc161;
var _seekable_doc;
var _readable_doc;
var _writable_doc;
var __str37162;
var __str38163;
var __str39164;
var __str40165;
var __str41166;
var __str42167;
var __str43168;
var __str44169;
var __str45170;
var __str46171;
var __str47172;
var __str48173;
var _fileio_methods;
var __str49174;
var __str50175;
var __str51176;
var __str52177;
var _fileio_getsetlist;
var __str53178;
var _PyFileIO_Type;
var _iobase_doc;
var _iobase_seek_doc;
var __str181;
var _iobase_tell_doc;
var __str1182;
var _iobase_truncate_doc;
var __str2183;
var _iobase_flush_doc;
var __str3184;
var __str4185;
var _iobase_close_doc;
var __str5186;
var __str6187;
var ___PRETTY_FUNCTION___8634;
var _iobase_seekable_doc;
var __str7188;
var _iobase_readable_doc;
var __str8189;
var _iobase_writable_doc;
var __str9190;
var _iobase_fileno_doc;
var __str10191;
var _iobase_isatty_doc;
var _iobase_readline_doc;
var __str11192;
var __str12193;
var __str13194;
var __str14195;
var __str15196;
var __str16197;
var __str17198;
var __str18199;
var ___PRETTY_FUNCTION___8875;
var __PyByteArray_empty_string;
var _iobase_readlines_doc;
var __str19200;
var __str20201;
var __str21202;
var __str22203;
var __str23204;
var __str24205;
var __str25206;
var __str26207;
var __str27208;
var __str28209;
var __str29210;
var __str30211;
var __str31212;
var __str32213;
var __str33214;
var __str34215;
var __str35216;
var __str36217;
var __str37218;
var __str38219;
var _iobase_methods;
var __str39220;
var _iobase_getset;
var __str40221;
var _PyIOBase_Type;
var _rawiobase_doc;
var __str41223;
var __str42224;
var _rawiobase_readall_doc;
var __str43225;
var _rawiobase_methods;
var __str44226;
var _PyRawIOBase_Type;
var _module_doc;
var __str232;
var __str1233;
var ___PRETTY_FUNCTION___8454;
var __str2234;
var __str3235;
var _blockingioerror_members;
var __str4236;
var __str5237;
var __PyExc_BlockingIOError;
var _PyExc_BlockingIOError;
var _open_doc;
var _C_6_8548;
var __str6239;
var __str7240;
var __str8241;
var __str9242;
var __str10243;
var __str11244;
var __str12245;
var __str13246;
var __str14247;
var __str15248;
var __str16249;
var __str17250;
var __str18251;
var __str19252;
var __str20253;
var __str21254;
var __str22255;
var __str23256;
var __str24257;
var __str25258;
var __str26259;
var __str27260;
var __str28261;
var __str29262;
var __str30263;
var __str31264;
var ___PRETTY_FUNCTION___8811;
var __str32265;
var __str33266;
var __PyIO_os_module;
var __PyIO_locale_module;
var __PyIO_unsupported_operation;
var __str34268;
var _module_methods;
var __str35269;
var __str36270;
var __str37271;
var _PyType_Type;
var __str38272;
var __str39273;
var __str40274;
var __str41275;
var __str42276;
var __str43277;
var __str44278;
var __str45279;
var __str46280;
var __str47281;
var __str48282;
var __str49283;
var __str50284;
var __str51285;
var __str52286;
var __str53287;
var __PyIO_str_close;
var __str54289;
var __PyIO_str_closed;
var __str55291;
var __PyIO_str_decode;
var __str56292;
var __PyIO_str_encode;
var __PyIO_str_fileno;
var __str57294;
var __PyIO_str_flush;
var __str58296;
var __PyIO_str_getstate;
var __PyIO_str_isatty;
var __str59298;
var __PyIO_str_newlines;
var __str60299;
var __PyIO_str_nl;
var __str61300;
var __PyIO_str_read;
var __str62302;
var __PyIO_str_read1;
var __str63303;
var __PyIO_str_readable;
var __str64305;
var __PyIO_str_readinto;
var __str65307;
var __PyIO_str_readline;
var __str66309;
var __PyIO_str_reset;
var __str67;
var __PyIO_str_seek;
var __str68;
var __PyIO_str_seekable;
var __str69;
var __PyIO_str_setstate;
var __str70;
var __PyIO_str_tell;
var __str71;
var __PyIO_str_truncate;
var __str72;
var __PyIO_str_write;
var __str73;
var __PyIO_str_writable;
var __PyIO_empty_str;
var __PyIO_empty_bytes;
var __PyIO_zero;
var _stringio_doc;
var __str319;
var __str1320;
var ___PRETTY_FUNCTION___8442;
var __str2321;
var ___PRETTY_FUNCTION___8484;
var __str3322;
var __str4323;
var __str5324;
var __str6325;
var _stringio_getvalue_doc;
var __str7326;
var __str8327;
var _stringio_tell_doc;
var _stringio_read_doc;
var __str9328;
var __str10329;
var __str11330;
var _stringio_readline_doc;
var __str12331;
var __str13332;
var _stringio_truncate_doc;
var __str14333;
var __str15334;
var _stringio_seek_doc;
var __str16335;
var __str17336;
var __str18337;
var __str19338;
var _stringio_write_doc;
var __str20339;
var _stringio_close_doc;
var __str21340;
var ___PRETTY_FUNCTION___9021;
var __str22341;
var ___PRETTY_FUNCTION___9091;
var _C_71_9130;
var __str23342;
var __str24343;
var __str25344;
var __str26345;
var __str27346;
var __str28347;
var __str29348;
var __str30349;
var __str31350;
var ___PRETTY_FUNCTION___9352;
var __str32351;
var __str33352;
var __str34353;
var __str35354;
var __str36355;
var __str37356;
var __str38357;
var __str39358;
var __str40359;
var __str41360;
var __str42361;
var __str43362;
var __str44363;
var __str45364;
var __str46365;
var __str47366;
var __str48367;
var _stringio_methods;
var __str49368;
var __str50369;
var __str51370;
var _stringio_getset;
var __str52371;
var _PyStringIO_Type;
var _textiobase_doc;
var _textiobase_detach_doc;
var __str374;
var _textiobase_read_doc;
var __str1375;
var _textiobase_readline_doc;
var __str2376;
var _textiobase_write_doc;
var __str3377;
var _textiobase_encoding_doc;
var _textiobase_newlines_doc;
var _textiobase_errors_doc;
var _textiobase_methods;
var __str4378;
var __str5379;
var __str6380;
var _textiobase_getset;
var __str7381;
var _PyTextIOBase_Type;
var _incrementalnewlinedecoder_doc;
var _C_1_8505;
var __str8383;
var __str9384;
var __str10385;
var __str11386;
var __str12387;
var __str13388;
var __str14389;
var __str15390;
var ___PRETTY_FUNCTION___8596;
var _C_56_8818;
var __str16391;
var __str17392;
var __str18393;
var __str19394;
var __str20395;
var __str21396;
var __str22397;
var __str23398;
var __str24399;
var __str25400;
var __str26401;
var __str27402;
var __str28403;
var __str29404;
var __str30405;
var __str31406;
var _incrementalnewlinedecoder_methods;
var _incrementalnewlinedecoder_getset;
var __str32407;
var _PyIncrementalNewlineDecoder_Type;
var _textiowrapper_doc;
var _encodefuncs;
var __str33409;
var __str34410;
var __str35411;
var __str36412;
var __str37413;
var __str38414;
var __str39415;
var __str40416;
var __str41417;
var _C_89_9154;
var __str42418;
var __str43419;
var __str44420;
var __str45421;
var __str46422;
var __str47423;
var __str48424;
var _PyExc_ImportError;
var __str49425;
var __str50426;
var __str51427;
var __str52428;
var __str53429;
var __str54430;
var __str55431;
var __str56432;
var ___PRETTY_FUNCTION___9695;
var __str57433;
var __str58434;
var __str59435;
var __str60436;
var __str61437;
var __str62438;
var __str63439;
var ___PRETTY_FUNCTION___10189;
var __str64440;
var __str65441;
var __str66442;
var ___PRETTY_FUNCTION___10233;
var __str67443;
var __str68444;
var __str69445;
var __str70446;
var ___PRETTY_FUNCTION___10735;
var __str71447;
var __str72448;
var __str73449;
var __str74;
var __str75;
var __str76;
var __str77;
var __str78;
var __str79;
var __str80;
var __str81;
var __str82;
var __str83;
var __str84;
var ___PRETTY_FUNCTION___11188;
var __str85;
var __str86;
var __str87;
var __str88;
var __str89;
var ___PRETTY_FUNCTION___11475;
var __str90;
var __str91;
var __str92;
var __str93;
var __str94;
var __str95;
var __str96;
var __str97;
var __str98;
var __str99;
var __str100;
var __str101;
var __str102;
var __str103;
var __str104;
var __str105;
var _textiowrapper_methods;
var _textiowrapper_members;
var __str106;
var __str107;
var _textiowrapper_getset;
var __str108;
var _PyTextIOWrapper_Type;


































































































































  function _bufferediobase_readinto($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 76; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 76);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $buf=__stackBase__+16;
        var $len=__stackBase__+68;
        var $data=__stackBase__+72;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$args_addr]; //@line 42 "bufferedio.c"
        var $2=__PyArg_ParseTuple_SizeT($1, ((__str)&4294967295), $buf); //@line 42 "bufferedio.c"
        var $3=((($2))|0)==0; //@line 42 "bufferedio.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 42 "bufferedio.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 43 "bufferedio.c"
        __label__ = 11; break; //@line 43 "bufferedio.c"
      case 2: // $bb1
        var $4=(($buf+8)&4294967295); //@line 46 "bufferedio.c"
        var $5=HEAP[$4]; //@line 46 "bufferedio.c"
        var $6=HEAP[$self_addr]; //@line 46 "bufferedio.c"
        var $7=__PyObject_CallMethod_SizeT($6, ((__str1)&4294967295), ((__str2)&4294967295), $5); //@line 46 "bufferedio.c"
        HEAP[$data]=$7; //@line 46 "bufferedio.c"
        var $8=HEAP[$data]; //@line 47 "bufferedio.c"
        var $9=($8)==0; //@line 47 "bufferedio.c"
        if ($9) { __label__ = 10; break; } else { __label__ = 3; break; } //@line 47 "bufferedio.c"
      case 3: // $bb2
        var $10=HEAP[$data]; //@line 50 "bufferedio.c"
        var $11=(($10+4)&4294967295); //@line 50 "bufferedio.c"
        var $12=HEAP[$11]; //@line 50 "bufferedio.c"
        var $13=(($12+84)&4294967295); //@line 50 "bufferedio.c"
        var $14=HEAP[$13]; //@line 50 "bufferedio.c"
        var $15=($14) & 134217728; //@line 50 "bufferedio.c"
        var $16=((($15))|0)==0; //@line 50 "bufferedio.c"
        if ($16) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 50 "bufferedio.c"
      case 4: // $bb3
        var $17=HEAP[$data]; //@line 51 "bufferedio.c"
        var $18=(($17)&4294967295); //@line 51 "bufferedio.c"
        var $19=HEAP[$18]; //@line 51 "bufferedio.c"
        var $20=((($19) - 1)&4294967295); //@line 51 "bufferedio.c"
        var $21=HEAP[$data]; //@line 51 "bufferedio.c"
        var $22=(($21)&4294967295); //@line 51 "bufferedio.c"
        HEAP[$22]=$20; //@line 51 "bufferedio.c"
        var $23=HEAP[$data]; //@line 51 "bufferedio.c"
        var $24=(($23)&4294967295); //@line 51 "bufferedio.c"
        var $25=HEAP[$24]; //@line 51 "bufferedio.c"
        var $26=((($25))|0)==0; //@line 51 "bufferedio.c"
        if ($26) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 51 "bufferedio.c"
      case 5: // $bb4
        var $27=HEAP[$data]; //@line 51 "bufferedio.c"
        var $28=(($27+4)&4294967295); //@line 51 "bufferedio.c"
        var $29=HEAP[$28]; //@line 51 "bufferedio.c"
        var $30=(($29+24)&4294967295); //@line 51 "bufferedio.c"
        var $31=HEAP[$30]; //@line 51 "bufferedio.c"
        var $32=HEAP[$data]; //@line 51 "bufferedio.c"
        FUNCTION_TABLE[$31]($32); //@line 51 "bufferedio.c"
        __label__ = 6; break; //@line 51 "bufferedio.c"
      case 6: // $bb5
        var $33=HEAP[_PyExc_TypeError]; //@line 52 "bufferedio.c"
        _PyErr_SetString($33, ((__str3)&4294967295)); //@line 52 "bufferedio.c"
        __label__ = 10; break; //@line 52 "bufferedio.c"
      case 7: // $bb6
        var $34=HEAP[$data]; //@line 56 "bufferedio.c"
        var $35=$34; //@line 56 "bufferedio.c"
        var $36=(($35+8)&4294967295); //@line 56 "bufferedio.c"
        var $37=HEAP[$36]; //@line 56 "bufferedio.c"
        HEAP[$len]=$37; //@line 56 "bufferedio.c"
        var $38=HEAP[$len]; //@line 57 "bufferedio.c"
        var $39=HEAP[$data]; //@line 57 "bufferedio.c"
        var $40=$39; //@line 57 "bufferedio.c"
        var $41=(($40+20)&4294967295); //@line 57 "bufferedio.c"
        var $42=(($41)&4294967295); //@line 57 "bufferedio.c"
        var $43=(($buf)&4294967295); //@line 57 "bufferedio.c"
        var $44=HEAP[$43]; //@line 57 "bufferedio.c"
        _llvm_memcpy_p0i8_p0i8_i32($44, $42, $38, 1, 0); //@line 57 "bufferedio.c"
        _PyBuffer_Release($buf); //@line 59 "bufferedio.c"
        var $45=HEAP[$data]; //@line 60 "bufferedio.c"
        var $46=(($45)&4294967295); //@line 60 "bufferedio.c"
        var $47=HEAP[$46]; //@line 60 "bufferedio.c"
        var $48=((($47) - 1)&4294967295); //@line 60 "bufferedio.c"
        var $49=HEAP[$data]; //@line 60 "bufferedio.c"
        var $50=(($49)&4294967295); //@line 60 "bufferedio.c"
        HEAP[$50]=$48; //@line 60 "bufferedio.c"
        var $51=HEAP[$data]; //@line 60 "bufferedio.c"
        var $52=(($51)&4294967295); //@line 60 "bufferedio.c"
        var $53=HEAP[$52]; //@line 60 "bufferedio.c"
        var $54=((($53))|0)==0; //@line 60 "bufferedio.c"
        if ($54) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 60 "bufferedio.c"
      case 8: // $bb7
        var $55=HEAP[$data]; //@line 60 "bufferedio.c"
        var $56=(($55+4)&4294967295); //@line 60 "bufferedio.c"
        var $57=HEAP[$56]; //@line 60 "bufferedio.c"
        var $58=(($57+24)&4294967295); //@line 60 "bufferedio.c"
        var $59=HEAP[$58]; //@line 60 "bufferedio.c"
        var $60=HEAP[$data]; //@line 60 "bufferedio.c"
        FUNCTION_TABLE[$59]($60); //@line 60 "bufferedio.c"
        __label__ = 9; break; //@line 60 "bufferedio.c"
      case 9: // $bb8
        var $61=HEAP[$len]; //@line 62 "bufferedio.c"
        var $62=_PyLong_FromSsize_t($61); //@line 62 "bufferedio.c"
        HEAP[$0]=$62; //@line 62 "bufferedio.c"
        __label__ = 11; break; //@line 62 "bufferedio.c"
      case 10: // $error
        _PyBuffer_Release($buf); //@line 65 "bufferedio.c"
        HEAP[$0]=0; //@line 66 "bufferedio.c"
        __label__ = 11; break; //@line 66 "bufferedio.c"
      case 11: // $bb9
        var $63=HEAP[$0]; //@line 43 "bufferedio.c"
        HEAP[$retval]=$63; //@line 43 "bufferedio.c"
        __label__ = 12; break; //@line 43 "bufferedio.c"
      case 12: // $return
        var $retval10=HEAP[$retval]; //@line 43 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 43 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferediobase_unsupported($message) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $message_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$message_addr]=$message;
        var $1=HEAP[__PyIO_unsupported_operation]; //@line 72 "bufferedio.c"
        var $2=HEAP[$message_addr]; //@line 72 "bufferedio.c"
        _PyErr_SetString($1, $2); //@line 72 "bufferedio.c"
        HEAP[$0]=0; //@line 73 "bufferedio.c"
        var $3=HEAP[$0]; //@line 73 "bufferedio.c"
        HEAP[$retval]=$3; //@line 73 "bufferedio.c"
        __label__ = 1; break; //@line 73 "bufferedio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 73 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 73 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferediobase_detach($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=_bufferediobase_unsupported(((__str4)&4294967295)); //@line 85 "bufferedio.c"
        HEAP[$0]=$1; //@line 85 "bufferedio.c"
        var $2=HEAP[$0]; //@line 85 "bufferedio.c"
        HEAP[$retval]=$2; //@line 85 "bufferedio.c"
        __label__ = 1; break; //@line 85 "bufferedio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 85 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 85 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferediobase_read($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=_bufferediobase_unsupported(((__str1)&4294967295)); //@line 109 "bufferedio.c"
        HEAP[$0]=$1; //@line 109 "bufferedio.c"
        var $2=HEAP[$0]; //@line 109 "bufferedio.c"
        HEAP[$retval]=$2; //@line 109 "bufferedio.c"
        __label__ = 1; break; //@line 109 "bufferedio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 109 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 109 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferediobase_read1($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=_bufferediobase_unsupported(((__str5)&4294967295)); //@line 122 "bufferedio.c"
        HEAP[$0]=$1; //@line 122 "bufferedio.c"
        var $2=HEAP[$0]; //@line 122 "bufferedio.c"
        HEAP[$retval]=$2; //@line 122 "bufferedio.c"
        __label__ = 1; break; //@line 122 "bufferedio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 122 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 122 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferediobase_write($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=_bufferediobase_unsupported(((__str6)&4294967295)); //@line 137 "bufferedio.c"
        HEAP[$0]=$1; //@line 137 "bufferedio.c"
        var $2=HEAP[$0]; //@line 137 "bufferedio.c"
        HEAP[$retval]=$2; //@line 137 "bufferedio.c"
        __label__ = 1; break; //@line 137 "bufferedio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 137 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 137 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_dealloc($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $g=__stackBase__+4;
        var $_py_tmp=__stackBase__+8;
        var $_py_tmp12=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $0=HEAP[$self_addr]; //@line 368 "bufferedio.c"
        var $1=(($0+12)&4294967295); //@line 368 "bufferedio.c"
        var $2=HEAP[$1]; //@line 368 "bufferedio.c"
        var $3=((($2))|0)!=0; //@line 368 "bufferedio.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 368 "bufferedio.c"
      case 1: // $bb
        var $4=HEAP[$self_addr]; //@line 368 "bufferedio.c"
        var $5=$4; //@line 368 "bufferedio.c"
        var $6=__PyIOBase_finalize($5); //@line 368 "bufferedio.c"
        var $7=((($6))|0) < 0; //@line 368 "bufferedio.c"
        if ($7) { __label__ = 15; break; } else { __label__ = 2; break; } //@line 368 "bufferedio.c"
      case 2: // $bb1
        var $8=HEAP[$self_addr]; //@line 370 "bufferedio.c"
        var $9=$8; //@line 370 "bufferedio.c"
        var $10=(($9+-12)&4294967295); //@line 370 "bufferedio.c"
        HEAP[$g]=$10; //@line 370 "bufferedio.c"
        var $11=HEAP[$g]; //@line 370 "bufferedio.c"
        var $12=(($11)&4294967295); //@line 370 "bufferedio.c"
        var $13=(($12+8)&4294967295); //@line 370 "bufferedio.c"
        var $14=HEAP[$13]; //@line 370 "bufferedio.c"
        var $15=((($14))|0)==-2; //@line 370 "bufferedio.c"
        if ($15) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 370 "bufferedio.c"
      case 3: // $bb2
        ___assert_fail(((__str9)&4294967295), ((__str10)&4294967295), 370, ((___PRETTY_FUNCTION___8563)&4294967295)); //@line 370 "bufferedio.c"
        throw "Reached an unreachable! Original .ll line: 1035"; //@line 370 "bufferedio.c"
      case 4: // $bb3
        var $16=HEAP[$g]; //@line 370 "bufferedio.c"
        var $17=(($16)&4294967295); //@line 370 "bufferedio.c"
        var $18=(($17+8)&4294967295); //@line 370 "bufferedio.c"
        HEAP[$18]=-2; //@line 370 "bufferedio.c"
        var $19=HEAP[$g]; //@line 370 "bufferedio.c"
        var $20=(($19)&4294967295); //@line 370 "bufferedio.c"
        var $21=(($20+4)&4294967295); //@line 370 "bufferedio.c"
        var $22=HEAP[$21]; //@line 370 "bufferedio.c"
        var $23=HEAP[$g]; //@line 370 "bufferedio.c"
        var $24=(($23)&4294967295); //@line 370 "bufferedio.c"
        var $25=(($24)&4294967295); //@line 370 "bufferedio.c"
        var $26=HEAP[$25]; //@line 370 "bufferedio.c"
        var $27=(($22)&4294967295); //@line 370 "bufferedio.c"
        var $28=(($27)&4294967295); //@line 370 "bufferedio.c"
        HEAP[$28]=$26; //@line 370 "bufferedio.c"
        var $29=HEAP[$g]; //@line 370 "bufferedio.c"
        var $30=(($29)&4294967295); //@line 370 "bufferedio.c"
        var $31=(($30)&4294967295); //@line 370 "bufferedio.c"
        var $32=HEAP[$31]; //@line 370 "bufferedio.c"
        var $33=HEAP[$g]; //@line 370 "bufferedio.c"
        var $34=(($33)&4294967295); //@line 370 "bufferedio.c"
        var $35=(($34+4)&4294967295); //@line 370 "bufferedio.c"
        var $36=HEAP[$35]; //@line 370 "bufferedio.c"
        var $37=(($32)&4294967295); //@line 370 "bufferedio.c"
        var $38=(($37+4)&4294967295); //@line 370 "bufferedio.c"
        HEAP[$38]=$36; //@line 370 "bufferedio.c"
        var $39=HEAP[$g]; //@line 370 "bufferedio.c"
        var $40=(($39)&4294967295); //@line 370 "bufferedio.c"
        var $41=(($40)&4294967295); //@line 370 "bufferedio.c"
        HEAP[$41]=0; //@line 370 "bufferedio.c"
        var $42=HEAP[$self_addr]; //@line 371 "bufferedio.c"
        var $43=(($42+12)&4294967295); //@line 371 "bufferedio.c"
        HEAP[$43]=0; //@line 371 "bufferedio.c"
        var $44=HEAP[$self_addr]; //@line 372 "bufferedio.c"
        var $45=(($44+96)&4294967295); //@line 372 "bufferedio.c"
        var $46=HEAP[$45]; //@line 372 "bufferedio.c"
        var $47=($46)!=0; //@line 372 "bufferedio.c"
        if ($47) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 372 "bufferedio.c"
      case 5: // $bb4
        var $48=HEAP[$self_addr]; //@line 373 "bufferedio.c"
        var $49=$48; //@line 373 "bufferedio.c"
        _PyObject_ClearWeakRefs($49); //@line 373 "bufferedio.c"
        __label__ = 6; break; //@line 373 "bufferedio.c"
      case 6: // $bb5
        var $50=HEAP[$self_addr]; //@line 374 "bufferedio.c"
        var $51=(($50+8)&4294967295); //@line 374 "bufferedio.c"
        var $52=HEAP[$51]; //@line 374 "bufferedio.c"
        var $53=($52)!=0; //@line 374 "bufferedio.c"
        if ($53) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 374 "bufferedio.c"
      case 7: // $bb6
        var $54=HEAP[$self_addr]; //@line 374 "bufferedio.c"
        var $55=(($54+8)&4294967295); //@line 374 "bufferedio.c"
        var $56=HEAP[$55]; //@line 374 "bufferedio.c"
        HEAP[$_py_tmp]=$56; //@line 374 "bufferedio.c"
        var $57=HEAP[$self_addr]; //@line 374 "bufferedio.c"
        var $58=(($57+8)&4294967295); //@line 374 "bufferedio.c"
        HEAP[$58]=0; //@line 374 "bufferedio.c"
        var $59=HEAP[$_py_tmp]; //@line 374 "bufferedio.c"
        var $60=(($59)&4294967295); //@line 374 "bufferedio.c"
        var $61=HEAP[$60]; //@line 374 "bufferedio.c"
        var $62=((($61) - 1)&4294967295); //@line 374 "bufferedio.c"
        var $63=HEAP[$_py_tmp]; //@line 374 "bufferedio.c"
        var $64=(($63)&4294967295); //@line 374 "bufferedio.c"
        HEAP[$64]=$62; //@line 374 "bufferedio.c"
        var $65=HEAP[$_py_tmp]; //@line 374 "bufferedio.c"
        var $66=(($65)&4294967295); //@line 374 "bufferedio.c"
        var $67=HEAP[$66]; //@line 374 "bufferedio.c"
        var $68=((($67))|0)==0; //@line 374 "bufferedio.c"
        if ($68) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 374 "bufferedio.c"
      case 8: // $bb7
        var $69=HEAP[$_py_tmp]; //@line 374 "bufferedio.c"
        var $70=(($69+4)&4294967295); //@line 374 "bufferedio.c"
        var $71=HEAP[$70]; //@line 374 "bufferedio.c"
        var $72=(($71+24)&4294967295); //@line 374 "bufferedio.c"
        var $73=HEAP[$72]; //@line 374 "bufferedio.c"
        var $74=HEAP[$_py_tmp]; //@line 374 "bufferedio.c"
        FUNCTION_TABLE[$73]($74); //@line 374 "bufferedio.c"
        __label__ = 9; break; //@line 374 "bufferedio.c"
      case 9: // $bb8
        var $75=HEAP[$self_addr]; //@line 375 "bufferedio.c"
        var $76=(($75+40)&4294967295); //@line 375 "bufferedio.c"
        var $77=HEAP[$76]; //@line 375 "bufferedio.c"
        var $78=($77)!=0; //@line 375 "bufferedio.c"
        if ($78) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 375 "bufferedio.c"
      case 10: // $bb9
        var $79=HEAP[$self_addr]; //@line 376 "bufferedio.c"
        var $80=(($79+40)&4294967295); //@line 376 "bufferedio.c"
        var $81=HEAP[$80]; //@line 376 "bufferedio.c"
        _PyMem_Free($81); //@line 376 "bufferedio.c"
        var $82=HEAP[$self_addr]; //@line 377 "bufferedio.c"
        var $83=(($82+40)&4294967295); //@line 377 "bufferedio.c"
        HEAP[$83]=0; //@line 377 "bufferedio.c"
        __label__ = 11; break; //@line 377 "bufferedio.c"
      case 11: // $bb10
        var $84=HEAP[$self_addr]; //@line 385 "bufferedio.c"
        var $85=(($84+92)&4294967295); //@line 385 "bufferedio.c"
        var $86=HEAP[$85]; //@line 385 "bufferedio.c"
        var $87=($86)!=0; //@line 385 "bufferedio.c"
        if ($87) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 385 "bufferedio.c"
      case 12: // $bb11
        var $88=HEAP[$self_addr]; //@line 385 "bufferedio.c"
        var $89=(($88+92)&4294967295); //@line 385 "bufferedio.c"
        var $90=HEAP[$89]; //@line 385 "bufferedio.c"
        HEAP[$_py_tmp12]=$90; //@line 385 "bufferedio.c"
        var $91=HEAP[$self_addr]; //@line 385 "bufferedio.c"
        var $92=(($91+92)&4294967295); //@line 385 "bufferedio.c"
        HEAP[$92]=0; //@line 385 "bufferedio.c"
        var $93=HEAP[$_py_tmp12]; //@line 385 "bufferedio.c"
        var $94=(($93)&4294967295); //@line 385 "bufferedio.c"
        var $95=HEAP[$94]; //@line 385 "bufferedio.c"
        var $96=((($95) - 1)&4294967295); //@line 385 "bufferedio.c"
        var $97=HEAP[$_py_tmp12]; //@line 385 "bufferedio.c"
        var $98=(($97)&4294967295); //@line 385 "bufferedio.c"
        HEAP[$98]=$96; //@line 385 "bufferedio.c"
        var $99=HEAP[$_py_tmp12]; //@line 385 "bufferedio.c"
        var $100=(($99)&4294967295); //@line 385 "bufferedio.c"
        var $101=HEAP[$100]; //@line 385 "bufferedio.c"
        var $102=((($101))|0)==0; //@line 385 "bufferedio.c"
        if ($102) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 385 "bufferedio.c"
      case 13: // $bb13
        var $103=HEAP[$_py_tmp12]; //@line 385 "bufferedio.c"
        var $104=(($103+4)&4294967295); //@line 385 "bufferedio.c"
        var $105=HEAP[$104]; //@line 385 "bufferedio.c"
        var $106=(($105+24)&4294967295); //@line 385 "bufferedio.c"
        var $107=HEAP[$106]; //@line 385 "bufferedio.c"
        var $108=HEAP[$_py_tmp12]; //@line 385 "bufferedio.c"
        FUNCTION_TABLE[$107]($108); //@line 385 "bufferedio.c"
        __label__ = 14; break; //@line 385 "bufferedio.c"
      case 14: // $bb14
        var $109=HEAP[$self_addr]; //@line 386 "bufferedio.c"
        var $110=$109; //@line 386 "bufferedio.c"
        var $111=(($110+4)&4294967295); //@line 386 "bufferedio.c"
        var $112=HEAP[$111]; //@line 386 "bufferedio.c"
        var $113=(($112+160)&4294967295); //@line 386 "bufferedio.c"
        var $114=HEAP[$113]; //@line 386 "bufferedio.c"
        var $115=HEAP[$self_addr]; //@line 386 "bufferedio.c"
        var $116=$115; //@line 386 "bufferedio.c"
        FUNCTION_TABLE[$114]($116); //@line 386 "bufferedio.c"
        __label__ = 15; break; //@line 386 "bufferedio.c"
      case 15: // $bb15
        __label__ = 16; break; //@line 369 "bufferedio.c"
      case 16: // $return
        STACKTOP = __stackBase__;
        return; //@line 369 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_traverse($self, $visit, $arg) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $visit_addr=__stackBase__+4;
        var $arg_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $vret=__stackBase__+20;
        var $vret4=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$visit_addr]=$visit;
        HEAP[$arg_addr]=$arg;
        var $1=HEAP[$self_addr]; //@line 392 "bufferedio.c"
        var $2=(($1+8)&4294967295); //@line 392 "bufferedio.c"
        var $3=HEAP[$2]; //@line 392 "bufferedio.c"
        var $4=($3)!=0; //@line 392 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 392 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 392 "bufferedio.c"
        var $6=(($5+8)&4294967295); //@line 392 "bufferedio.c"
        var $7=HEAP[$6]; //@line 392 "bufferedio.c"
        var $8=HEAP[$visit_addr]; //@line 392 "bufferedio.c"
        var $9=HEAP[$arg_addr]; //@line 392 "bufferedio.c"
        var $10=FUNCTION_TABLE[$8]($7, $9); //@line 392 "bufferedio.c"
        HEAP[$vret]=$10; //@line 392 "bufferedio.c"
        var $11=HEAP[$vret]; //@line 392 "bufferedio.c"
        var $12=((($11))|0)!=0; //@line 392 "bufferedio.c"
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 392 "bufferedio.c"
      case 2: // $bb1
        var $13=HEAP[$vret]; //@line 392 "bufferedio.c"
        HEAP[$0]=$13; //@line 392 "bufferedio.c"
        __label__ = 7; break; //@line 392 "bufferedio.c"
      case 3: // $bb2
        var $14=HEAP[$self_addr]; //@line 393 "bufferedio.c"
        var $15=(($14+92)&4294967295); //@line 393 "bufferedio.c"
        var $16=HEAP[$15]; //@line 393 "bufferedio.c"
        var $17=($16)!=0; //@line 393 "bufferedio.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 393 "bufferedio.c"
      case 4: // $bb3
        var $18=HEAP[$self_addr]; //@line 393 "bufferedio.c"
        var $19=(($18+92)&4294967295); //@line 393 "bufferedio.c"
        var $20=HEAP[$19]; //@line 393 "bufferedio.c"
        var $21=HEAP[$visit_addr]; //@line 393 "bufferedio.c"
        var $22=HEAP[$arg_addr]; //@line 393 "bufferedio.c"
        var $23=FUNCTION_TABLE[$21]($20, $22); //@line 393 "bufferedio.c"
        HEAP[$vret4]=$23; //@line 393 "bufferedio.c"
        var $24=HEAP[$vret4]; //@line 393 "bufferedio.c"
        var $25=((($24))|0)!=0; //@line 393 "bufferedio.c"
        if ($25) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 393 "bufferedio.c"
      case 5: // $bb5
        var $26=HEAP[$vret4]; //@line 393 "bufferedio.c"
        HEAP[$0]=$26; //@line 393 "bufferedio.c"
        __label__ = 7; break; //@line 393 "bufferedio.c"
      case 6: // $bb6
        HEAP[$0]=0; //@line 394 "bufferedio.c"
        __label__ = 7; break; //@line 394 "bufferedio.c"
      case 7: // $bb7
        var $27=HEAP[$0]; //@line 392 "bufferedio.c"
        HEAP[$retval]=$27; //@line 392 "bufferedio.c"
        __label__ = 8; break; //@line 392 "bufferedio.c"
      case 8: // $return
        var $retval8=HEAP[$retval]; //@line 392 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval8; //@line 392 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_clear($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_py_tmp=__stackBase__+12;
        var $_py_tmp7=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 400 "bufferedio.c"
        var $2=(($1+12)&4294967295); //@line 400 "bufferedio.c"
        var $3=HEAP[$2]; //@line 400 "bufferedio.c"
        var $4=((($3))|0)!=0; //@line 400 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 400 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 400 "bufferedio.c"
        var $6=$5; //@line 400 "bufferedio.c"
        var $7=__PyIOBase_finalize($6); //@line 400 "bufferedio.c"
        var $8=((($7))|0) < 0; //@line 400 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 400 "bufferedio.c"
      case 2: // $bb1
        HEAP[$0]=-1; //@line 401 "bufferedio.c"
        __label__ = 10; break; //@line 401 "bufferedio.c"
      case 3: // $bb2
        var $9=HEAP[$self_addr]; //@line 402 "bufferedio.c"
        var $10=(($9+12)&4294967295); //@line 402 "bufferedio.c"
        HEAP[$10]=0; //@line 402 "bufferedio.c"
        var $11=HEAP[$self_addr]; //@line 403 "bufferedio.c"
        var $12=(($11+8)&4294967295); //@line 403 "bufferedio.c"
        var $13=HEAP[$12]; //@line 403 "bufferedio.c"
        var $14=($13)!=0; //@line 403 "bufferedio.c"
        if ($14) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 403 "bufferedio.c"
      case 4: // $bb3
        var $15=HEAP[$self_addr]; //@line 403 "bufferedio.c"
        var $16=(($15+8)&4294967295); //@line 403 "bufferedio.c"
        var $17=HEAP[$16]; //@line 403 "bufferedio.c"
        HEAP[$_py_tmp]=$17; //@line 403 "bufferedio.c"
        var $18=HEAP[$self_addr]; //@line 403 "bufferedio.c"
        var $19=(($18+8)&4294967295); //@line 403 "bufferedio.c"
        HEAP[$19]=0; //@line 403 "bufferedio.c"
        var $20=HEAP[$_py_tmp]; //@line 403 "bufferedio.c"
        var $21=(($20)&4294967295); //@line 403 "bufferedio.c"
        var $22=HEAP[$21]; //@line 403 "bufferedio.c"
        var $23=((($22) - 1)&4294967295); //@line 403 "bufferedio.c"
        var $24=HEAP[$_py_tmp]; //@line 403 "bufferedio.c"
        var $25=(($24)&4294967295); //@line 403 "bufferedio.c"
        HEAP[$25]=$23; //@line 403 "bufferedio.c"
        var $26=HEAP[$_py_tmp]; //@line 403 "bufferedio.c"
        var $27=(($26)&4294967295); //@line 403 "bufferedio.c"
        var $28=HEAP[$27]; //@line 403 "bufferedio.c"
        var $29=((($28))|0)==0; //@line 403 "bufferedio.c"
        if ($29) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 403 "bufferedio.c"
      case 5: // $bb4
        var $30=HEAP[$_py_tmp]; //@line 403 "bufferedio.c"
        var $31=(($30+4)&4294967295); //@line 403 "bufferedio.c"
        var $32=HEAP[$31]; //@line 403 "bufferedio.c"
        var $33=(($32+24)&4294967295); //@line 403 "bufferedio.c"
        var $34=HEAP[$33]; //@line 403 "bufferedio.c"
        var $35=HEAP[$_py_tmp]; //@line 403 "bufferedio.c"
        FUNCTION_TABLE[$34]($35); //@line 403 "bufferedio.c"
        __label__ = 6; break; //@line 403 "bufferedio.c"
      case 6: // $bb5
        var $36=HEAP[$self_addr]; //@line 404 "bufferedio.c"
        var $37=(($36+92)&4294967295); //@line 404 "bufferedio.c"
        var $38=HEAP[$37]; //@line 404 "bufferedio.c"
        var $39=($38)!=0; //@line 404 "bufferedio.c"
        if ($39) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 404 "bufferedio.c"
      case 7: // $bb6
        var $40=HEAP[$self_addr]; //@line 404 "bufferedio.c"
        var $41=(($40+92)&4294967295); //@line 404 "bufferedio.c"
        var $42=HEAP[$41]; //@line 404 "bufferedio.c"
        HEAP[$_py_tmp7]=$42; //@line 404 "bufferedio.c"
        var $43=HEAP[$self_addr]; //@line 404 "bufferedio.c"
        var $44=(($43+92)&4294967295); //@line 404 "bufferedio.c"
        HEAP[$44]=0; //@line 404 "bufferedio.c"
        var $45=HEAP[$_py_tmp7]; //@line 404 "bufferedio.c"
        var $46=(($45)&4294967295); //@line 404 "bufferedio.c"
        var $47=HEAP[$46]; //@line 404 "bufferedio.c"
        var $48=((($47) - 1)&4294967295); //@line 404 "bufferedio.c"
        var $49=HEAP[$_py_tmp7]; //@line 404 "bufferedio.c"
        var $50=(($49)&4294967295); //@line 404 "bufferedio.c"
        HEAP[$50]=$48; //@line 404 "bufferedio.c"
        var $51=HEAP[$_py_tmp7]; //@line 404 "bufferedio.c"
        var $52=(($51)&4294967295); //@line 404 "bufferedio.c"
        var $53=HEAP[$52]; //@line 404 "bufferedio.c"
        var $54=((($53))|0)==0; //@line 404 "bufferedio.c"
        if ($54) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 404 "bufferedio.c"
      case 8: // $bb8
        var $55=HEAP[$_py_tmp7]; //@line 404 "bufferedio.c"
        var $56=(($55+4)&4294967295); //@line 404 "bufferedio.c"
        var $57=HEAP[$56]; //@line 404 "bufferedio.c"
        var $58=(($57+24)&4294967295); //@line 404 "bufferedio.c"
        var $59=HEAP[$58]; //@line 404 "bufferedio.c"
        var $60=HEAP[$_py_tmp7]; //@line 404 "bufferedio.c"
        FUNCTION_TABLE[$59]($60); //@line 404 "bufferedio.c"
        __label__ = 9; break; //@line 404 "bufferedio.c"
      case 9: // $bb9
        HEAP[$0]=0; //@line 405 "bufferedio.c"
        __label__ = 10; break; //@line 405 "bufferedio.c"
      case 10: // $bb10
        var $61=HEAP[$0]; //@line 401 "bufferedio.c"
        HEAP[$retval]=$61; //@line 401 "bufferedio.c"
        __label__ = 11; break; //@line 401 "bufferedio.c"
      case 11: // $return
        var $retval11=HEAP[$retval]; //@line 401 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 401 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_simple_flush($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 419 "bufferedio.c"
        var $2=(($1+12)&4294967295); //@line 419 "bufferedio.c"
        var $3=HEAP[$2]; //@line 419 "bufferedio.c"
        var $4=((($3))|0) <= 0; //@line 419 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 419 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 419 "bufferedio.c"
        var $6=(($5+16)&4294967295); //@line 419 "bufferedio.c"
        var $7=HEAP[$6]; //@line 419 "bufferedio.c"
        var $8=((($7))|0)!=0; //@line 419 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 419 "bufferedio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 419 "bufferedio.c"
        _PyErr_SetString($9, ((__str11)&4294967295)); //@line 419 "bufferedio.c"
        __label__ = 4; break; //@line 419 "bufferedio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 419 "bufferedio.c"
        _PyErr_SetString($10, ((__str12)&4294967295)); //@line 419 "bufferedio.c"
        __label__ = 4; break; //@line 419 "bufferedio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 419 "bufferedio.c"
        __label__ = 6; break; //@line 419 "bufferedio.c"
      case 5: // $bb4
        var $11=HEAP[__PyIO_str_flush]; //@line 420 "bufferedio.c"
        var $12=HEAP[$self_addr]; //@line 420 "bufferedio.c"
        var $13=(($12+8)&4294967295); //@line 420 "bufferedio.c"
        var $14=HEAP[$13]; //@line 420 "bufferedio.c"
        var $15=_PyObject_CallMethodObjArgs($14, $11, 0); //@line 420 "bufferedio.c"
        HEAP[$0]=$15; //@line 420 "bufferedio.c"
        __label__ = 6; break; //@line 420 "bufferedio.c"
      case 6: // $bb5
        var $16=HEAP[$0]; //@line 419 "bufferedio.c"
        HEAP[$retval]=$16; //@line 419 "bufferedio.c"
        __label__ = 7; break; //@line 419 "bufferedio.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 419 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 419 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_closed($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $closed=__stackBase__+12;
        var $res=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 428 "bufferedio.c"
        var $2=(($1+12)&4294967295); //@line 428 "bufferedio.c"
        var $3=HEAP[$2]; //@line 428 "bufferedio.c"
        var $4=((($3))|0) <= 0; //@line 428 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 428 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 428 "bufferedio.c"
        var $6=(($5+16)&4294967295); //@line 428 "bufferedio.c"
        var $7=HEAP[$6]; //@line 428 "bufferedio.c"
        var $8=((($7))|0)!=0; //@line 428 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 428 "bufferedio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 428 "bufferedio.c"
        _PyErr_SetString($9, ((__str11)&4294967295)); //@line 428 "bufferedio.c"
        __label__ = 4; break; //@line 428 "bufferedio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 428 "bufferedio.c"
        _PyErr_SetString($10, ((__str12)&4294967295)); //@line 428 "bufferedio.c"
        __label__ = 4; break; //@line 428 "bufferedio.c"
      case 4: // $bb3
        HEAP[$0]=-1; //@line 428 "bufferedio.c"
        __label__ = 10; break; //@line 428 "bufferedio.c"
      case 5: // $bb4
        var $11=HEAP[__PyIO_str_closed]; //@line 429 "bufferedio.c"
        var $12=HEAP[$self_addr]; //@line 429 "bufferedio.c"
        var $13=(($12+8)&4294967295); //@line 429 "bufferedio.c"
        var $14=HEAP[$13]; //@line 429 "bufferedio.c"
        var $15=_PyObject_GetAttr($14, $11); //@line 429 "bufferedio.c"
        HEAP[$res]=$15; //@line 429 "bufferedio.c"
        var $16=HEAP[$res]; //@line 430 "bufferedio.c"
        var $17=($16)==0; //@line 430 "bufferedio.c"
        if ($17) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 430 "bufferedio.c"
      case 6: // $bb5
        HEAP[$0]=-1; //@line 431 "bufferedio.c"
        __label__ = 10; break; //@line 431 "bufferedio.c"
      case 7: // $bb6
        var $18=HEAP[$res]; //@line 432 "bufferedio.c"
        var $19=_PyObject_IsTrue($18); //@line 432 "bufferedio.c"
        HEAP[$closed]=$19; //@line 432 "bufferedio.c"
        var $20=HEAP[$res]; //@line 433 "bufferedio.c"
        var $21=(($20)&4294967295); //@line 433 "bufferedio.c"
        var $22=HEAP[$21]; //@line 433 "bufferedio.c"
        var $23=((($22) - 1)&4294967295); //@line 433 "bufferedio.c"
        var $24=HEAP[$res]; //@line 433 "bufferedio.c"
        var $25=(($24)&4294967295); //@line 433 "bufferedio.c"
        HEAP[$25]=$23; //@line 433 "bufferedio.c"
        var $26=HEAP[$res]; //@line 433 "bufferedio.c"
        var $27=(($26)&4294967295); //@line 433 "bufferedio.c"
        var $28=HEAP[$27]; //@line 433 "bufferedio.c"
        var $29=((($28))|0)==0; //@line 433 "bufferedio.c"
        if ($29) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 433 "bufferedio.c"
      case 8: // $bb7
        var $30=HEAP[$res]; //@line 433 "bufferedio.c"
        var $31=(($30+4)&4294967295); //@line 433 "bufferedio.c"
        var $32=HEAP[$31]; //@line 433 "bufferedio.c"
        var $33=(($32+24)&4294967295); //@line 433 "bufferedio.c"
        var $34=HEAP[$33]; //@line 433 "bufferedio.c"
        var $35=HEAP[$res]; //@line 433 "bufferedio.c"
        FUNCTION_TABLE[$34]($35); //@line 433 "bufferedio.c"
        __label__ = 9; break; //@line 433 "bufferedio.c"
      case 9: // $bb8
        var $36=HEAP[$closed]; //@line 434 "bufferedio.c"
        HEAP[$0]=$36; //@line 434 "bufferedio.c"
        __label__ = 10; break; //@line 434 "bufferedio.c"
      case 10: // $bb9
        var $37=HEAP[$0]; //@line 428 "bufferedio.c"
        HEAP[$retval]=$37; //@line 428 "bufferedio.c"
        __label__ = 11; break; //@line 428 "bufferedio.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 428 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 428 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_closed_get($self, $context) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $context_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$context_addr]=$context;
        var $1=HEAP[$self_addr]; //@line 440 "bufferedio.c"
        var $2=(($1+12)&4294967295); //@line 440 "bufferedio.c"
        var $3=HEAP[$2]; //@line 440 "bufferedio.c"
        var $4=((($3))|0) <= 0; //@line 440 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 440 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 440 "bufferedio.c"
        var $6=(($5+16)&4294967295); //@line 440 "bufferedio.c"
        var $7=HEAP[$6]; //@line 440 "bufferedio.c"
        var $8=((($7))|0)!=0; //@line 440 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 440 "bufferedio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 440 "bufferedio.c"
        _PyErr_SetString($9, ((__str11)&4294967295)); //@line 440 "bufferedio.c"
        __label__ = 4; break; //@line 440 "bufferedio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 440 "bufferedio.c"
        _PyErr_SetString($10, ((__str12)&4294967295)); //@line 440 "bufferedio.c"
        __label__ = 4; break; //@line 440 "bufferedio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 440 "bufferedio.c"
        __label__ = 6; break; //@line 440 "bufferedio.c"
      case 5: // $bb4
        var $11=HEAP[__PyIO_str_closed]; //@line 441 "bufferedio.c"
        var $12=HEAP[$self_addr]; //@line 441 "bufferedio.c"
        var $13=(($12+8)&4294967295); //@line 441 "bufferedio.c"
        var $14=HEAP[$13]; //@line 441 "bufferedio.c"
        var $15=_PyObject_GetAttr($14, $11); //@line 441 "bufferedio.c"
        HEAP[$0]=$15; //@line 441 "bufferedio.c"
        __label__ = 6; break; //@line 441 "bufferedio.c"
      case 6: // $bb5
        var $16=HEAP[$0]; //@line 440 "bufferedio.c"
        HEAP[$retval]=$16; //@line 440 "bufferedio.c"
        __label__ = 7; break; //@line 440 "bufferedio.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 440 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 440 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_close($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $res=__stackBase__+16;
        var $r=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$res]=0; //@line 447 "bufferedio.c"
        var $1=HEAP[$self_addr]; //@line 450 "bufferedio.c"
        var $2=(($1+12)&4294967295); //@line 450 "bufferedio.c"
        var $3=HEAP[$2]; //@line 450 "bufferedio.c"
        var $4=((($3))|0) <= 0; //@line 450 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 450 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 450 "bufferedio.c"
        var $6=(($5+16)&4294967295); //@line 450 "bufferedio.c"
        var $7=HEAP[$6]; //@line 450 "bufferedio.c"
        var $8=((($7))|0)!=0; //@line 450 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 450 "bufferedio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 450 "bufferedio.c"
        _PyErr_SetString($9, ((__str11)&4294967295)); //@line 450 "bufferedio.c"
        __label__ = 4; break; //@line 450 "bufferedio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 450 "bufferedio.c"
        _PyErr_SetString($10, ((__str12)&4294967295)); //@line 450 "bufferedio.c"
        __label__ = 4; break; //@line 450 "bufferedio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 450 "bufferedio.c"
        __label__ = 14; break; //@line 450 "bufferedio.c"
      case 5: // $bb4
        var $11=HEAP[$self_addr]; //@line 454 "bufferedio.c"
        var $12=_buffered_closed($11); //@line 454 "bufferedio.c"
        HEAP[$r]=$12; //@line 454 "bufferedio.c"
        var $13=HEAP[$r]; //@line 455 "bufferedio.c"
        var $14=((($13))|0) < 0; //@line 455 "bufferedio.c"
        if ($14) { __label__ = 13; break; } else { __label__ = 6; break; } //@line 455 "bufferedio.c"
      case 6: // $bb5
        var $15=HEAP[$r]; //@line 457 "bufferedio.c"
        var $16=((($15))|0) > 0; //@line 457 "bufferedio.c"
        if ($16) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 457 "bufferedio.c"
      case 7: // $bb6
        HEAP[$res]=__Py_NoneStruct; //@line 458 "bufferedio.c"
        var $17=HEAP[$res]; //@line 459 "bufferedio.c"
        var $18=(($17)&4294967295); //@line 459 "bufferedio.c"
        var $19=HEAP[$18]; //@line 459 "bufferedio.c"
        var $20=((($19) + 1)&4294967295); //@line 459 "bufferedio.c"
        var $21=HEAP[$res]; //@line 459 "bufferedio.c"
        var $22=(($21)&4294967295); //@line 459 "bufferedio.c"
        HEAP[$22]=$20; //@line 459 "bufferedio.c"
        __label__ = 13; break; //@line 459 "bufferedio.c"
      case 8: // $bb7
        var $23=HEAP[__PyIO_str_flush]; //@line 464 "bufferedio.c"
        var $24=HEAP[$self_addr]; //@line 464 "bufferedio.c"
        var $25=$24; //@line 464 "bufferedio.c"
        var $26=_PyObject_CallMethodObjArgs($25, $23, 0); //@line 464 "bufferedio.c"
        HEAP[$res]=$26; //@line 464 "bufferedio.c"
        var $27=HEAP[$res]; //@line 467 "bufferedio.c"
        var $28=($27)==0; //@line 467 "bufferedio.c"
        if ($28) { __label__ = 13; break; } else { __label__ = 9; break; } //@line 467 "bufferedio.c"
      case 9: // $bb8
        var $29=HEAP[$res]; //@line 470 "bufferedio.c"
        var $30=($29)!=0; //@line 470 "bufferedio.c"
        if ($30) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 470 "bufferedio.c"
      case 10: // $bb9
        var $31=HEAP[$res]; //@line 470 "bufferedio.c"
        var $32=(($31)&4294967295); //@line 470 "bufferedio.c"
        var $33=HEAP[$32]; //@line 470 "bufferedio.c"
        var $34=((($33) - 1)&4294967295); //@line 470 "bufferedio.c"
        var $35=HEAP[$res]; //@line 470 "bufferedio.c"
        var $36=(($35)&4294967295); //@line 470 "bufferedio.c"
        HEAP[$36]=$34; //@line 470 "bufferedio.c"
        var $37=HEAP[$res]; //@line 470 "bufferedio.c"
        var $38=(($37)&4294967295); //@line 470 "bufferedio.c"
        var $39=HEAP[$38]; //@line 470 "bufferedio.c"
        var $40=((($39))|0)==0; //@line 470 "bufferedio.c"
        if ($40) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 470 "bufferedio.c"
      case 11: // $bb10
        var $41=HEAP[$res]; //@line 470 "bufferedio.c"
        var $42=(($41+4)&4294967295); //@line 470 "bufferedio.c"
        var $43=HEAP[$42]; //@line 470 "bufferedio.c"
        var $44=(($43+24)&4294967295); //@line 470 "bufferedio.c"
        var $45=HEAP[$44]; //@line 470 "bufferedio.c"
        var $46=HEAP[$res]; //@line 470 "bufferedio.c"
        FUNCTION_TABLE[$45]($46); //@line 470 "bufferedio.c"
        __label__ = 12; break; //@line 470 "bufferedio.c"
      case 12: // $bb11
        var $47=HEAP[__PyIO_str_close]; //@line 472 "bufferedio.c"
        var $48=HEAP[$self_addr]; //@line 472 "bufferedio.c"
        var $49=(($48+8)&4294967295); //@line 472 "bufferedio.c"
        var $50=HEAP[$49]; //@line 472 "bufferedio.c"
        var $51=_PyObject_CallMethodObjArgs($50, $47, 0); //@line 472 "bufferedio.c"
        HEAP[$res]=$51; //@line 472 "bufferedio.c"
        __label__ = 13; break; //@line 474 "bufferedio.c"
      case 13: // $end
        var $52=HEAP[$res]; //@line 476 "bufferedio.c"
        HEAP[$0]=$52; //@line 476 "bufferedio.c"
        __label__ = 14; break; //@line 476 "bufferedio.c"
      case 14: // $bb12
        var $53=HEAP[$0]; //@line 450 "bufferedio.c"
        HEAP[$retval]=$53; //@line 450 "bufferedio.c"
        __label__ = 15; break; //@line 450 "bufferedio.c"
      case 15: // $return
        var $retval13=HEAP[$retval]; //@line 450 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 450 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_detach($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $raw=__stackBase__+16;
        var $res=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 485 "bufferedio.c"
        var $2=(($1+12)&4294967295); //@line 485 "bufferedio.c"
        var $3=HEAP[$2]; //@line 485 "bufferedio.c"
        var $4=((($3))|0) <= 0; //@line 485 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 485 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 485 "bufferedio.c"
        var $6=(($5+16)&4294967295); //@line 485 "bufferedio.c"
        var $7=HEAP[$6]; //@line 485 "bufferedio.c"
        var $8=((($7))|0)!=0; //@line 485 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 485 "bufferedio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 485 "bufferedio.c"
        _PyErr_SetString($9, ((__str11)&4294967295)); //@line 485 "bufferedio.c"
        __label__ = 4; break; //@line 485 "bufferedio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 485 "bufferedio.c"
        _PyErr_SetString($10, ((__str12)&4294967295)); //@line 485 "bufferedio.c"
        __label__ = 4; break; //@line 485 "bufferedio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 485 "bufferedio.c"
        __label__ = 10; break; //@line 485 "bufferedio.c"
      case 5: // $bb4
        var $11=HEAP[__PyIO_str_flush]; //@line 486 "bufferedio.c"
        var $12=HEAP[$self_addr]; //@line 486 "bufferedio.c"
        var $13=$12; //@line 486 "bufferedio.c"
        var $14=_PyObject_CallMethodObjArgs($13, $11, 0); //@line 486 "bufferedio.c"
        HEAP[$res]=$14; //@line 486 "bufferedio.c"
        var $15=HEAP[$res]; //@line 487 "bufferedio.c"
        var $16=($15)==0; //@line 487 "bufferedio.c"
        if ($16) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 487 "bufferedio.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 488 "bufferedio.c"
        __label__ = 10; break; //@line 488 "bufferedio.c"
      case 7: // $bb6
        var $17=HEAP[$res]; //@line 489 "bufferedio.c"
        var $18=(($17)&4294967295); //@line 489 "bufferedio.c"
        var $19=HEAP[$18]; //@line 489 "bufferedio.c"
        var $20=((($19) - 1)&4294967295); //@line 489 "bufferedio.c"
        var $21=HEAP[$res]; //@line 489 "bufferedio.c"
        var $22=(($21)&4294967295); //@line 489 "bufferedio.c"
        HEAP[$22]=$20; //@line 489 "bufferedio.c"
        var $23=HEAP[$res]; //@line 489 "bufferedio.c"
        var $24=(($23)&4294967295); //@line 489 "bufferedio.c"
        var $25=HEAP[$24]; //@line 489 "bufferedio.c"
        var $26=((($25))|0)==0; //@line 489 "bufferedio.c"
        if ($26) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 489 "bufferedio.c"
      case 8: // $bb7
        var $27=HEAP[$res]; //@line 489 "bufferedio.c"
        var $28=(($27+4)&4294967295); //@line 489 "bufferedio.c"
        var $29=HEAP[$28]; //@line 489 "bufferedio.c"
        var $30=(($29+24)&4294967295); //@line 489 "bufferedio.c"
        var $31=HEAP[$30]; //@line 489 "bufferedio.c"
        var $32=HEAP[$res]; //@line 489 "bufferedio.c"
        FUNCTION_TABLE[$31]($32); //@line 489 "bufferedio.c"
        __label__ = 9; break; //@line 489 "bufferedio.c"
      case 9: // $bb8
        var $33=HEAP[$self_addr]; //@line 490 "bufferedio.c"
        var $34=(($33+8)&4294967295); //@line 490 "bufferedio.c"
        var $35=HEAP[$34]; //@line 490 "bufferedio.c"
        HEAP[$raw]=$35; //@line 490 "bufferedio.c"
        var $36=HEAP[$self_addr]; //@line 491 "bufferedio.c"
        var $37=(($36+8)&4294967295); //@line 491 "bufferedio.c"
        HEAP[$37]=0; //@line 491 "bufferedio.c"
        var $38=HEAP[$self_addr]; //@line 492 "bufferedio.c"
        var $39=(($38+16)&4294967295); //@line 492 "bufferedio.c"
        HEAP[$39]=1; //@line 492 "bufferedio.c"
        var $40=HEAP[$self_addr]; //@line 493 "bufferedio.c"
        var $41=(($40+12)&4294967295); //@line 493 "bufferedio.c"
        HEAP[$41]=0; //@line 493 "bufferedio.c"
        var $42=HEAP[$raw]; //@line 494 "bufferedio.c"
        HEAP[$0]=$42; //@line 494 "bufferedio.c"
        __label__ = 10; break; //@line 494 "bufferedio.c"
      case 10: // $bb9
        var $43=HEAP[$0]; //@line 485 "bufferedio.c"
        HEAP[$retval]=$43; //@line 485 "bufferedio.c"
        __label__ = 11; break; //@line 485 "bufferedio.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 485 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 485 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_seekable($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 502 "bufferedio.c"
        var $2=(($1+12)&4294967295); //@line 502 "bufferedio.c"
        var $3=HEAP[$2]; //@line 502 "bufferedio.c"
        var $4=((($3))|0) <= 0; //@line 502 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 502 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 502 "bufferedio.c"
        var $6=(($5+16)&4294967295); //@line 502 "bufferedio.c"
        var $7=HEAP[$6]; //@line 502 "bufferedio.c"
        var $8=((($7))|0)!=0; //@line 502 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 502 "bufferedio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 502 "bufferedio.c"
        _PyErr_SetString($9, ((__str11)&4294967295)); //@line 502 "bufferedio.c"
        __label__ = 4; break; //@line 502 "bufferedio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 502 "bufferedio.c"
        _PyErr_SetString($10, ((__str12)&4294967295)); //@line 502 "bufferedio.c"
        __label__ = 4; break; //@line 502 "bufferedio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 502 "bufferedio.c"
        __label__ = 6; break; //@line 502 "bufferedio.c"
      case 5: // $bb4
        var $11=HEAP[__PyIO_str_seekable]; //@line 503 "bufferedio.c"
        var $12=HEAP[$self_addr]; //@line 503 "bufferedio.c"
        var $13=(($12+8)&4294967295); //@line 503 "bufferedio.c"
        var $14=HEAP[$13]; //@line 503 "bufferedio.c"
        var $15=_PyObject_CallMethodObjArgs($14, $11, 0); //@line 503 "bufferedio.c"
        HEAP[$0]=$15; //@line 503 "bufferedio.c"
        __label__ = 6; break; //@line 503 "bufferedio.c"
      case 6: // $bb5
        var $16=HEAP[$0]; //@line 502 "bufferedio.c"
        HEAP[$retval]=$16; //@line 502 "bufferedio.c"
        __label__ = 7; break; //@line 502 "bufferedio.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 502 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 502 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_readable($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 509 "bufferedio.c"
        var $2=(($1+12)&4294967295); //@line 509 "bufferedio.c"
        var $3=HEAP[$2]; //@line 509 "bufferedio.c"
        var $4=((($3))|0) <= 0; //@line 509 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 509 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 509 "bufferedio.c"
        var $6=(($5+16)&4294967295); //@line 509 "bufferedio.c"
        var $7=HEAP[$6]; //@line 509 "bufferedio.c"
        var $8=((($7))|0)!=0; //@line 509 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 509 "bufferedio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 509 "bufferedio.c"
        _PyErr_SetString($9, ((__str11)&4294967295)); //@line 509 "bufferedio.c"
        __label__ = 4; break; //@line 509 "bufferedio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 509 "bufferedio.c"
        _PyErr_SetString($10, ((__str12)&4294967295)); //@line 509 "bufferedio.c"
        __label__ = 4; break; //@line 509 "bufferedio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 509 "bufferedio.c"
        __label__ = 6; break; //@line 509 "bufferedio.c"
      case 5: // $bb4
        var $11=HEAP[__PyIO_str_readable]; //@line 510 "bufferedio.c"
        var $12=HEAP[$self_addr]; //@line 510 "bufferedio.c"
        var $13=(($12+8)&4294967295); //@line 510 "bufferedio.c"
        var $14=HEAP[$13]; //@line 510 "bufferedio.c"
        var $15=_PyObject_CallMethodObjArgs($14, $11, 0); //@line 510 "bufferedio.c"
        HEAP[$0]=$15; //@line 510 "bufferedio.c"
        __label__ = 6; break; //@line 510 "bufferedio.c"
      case 6: // $bb5
        var $16=HEAP[$0]; //@line 509 "bufferedio.c"
        HEAP[$retval]=$16; //@line 509 "bufferedio.c"
        __label__ = 7; break; //@line 509 "bufferedio.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 509 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 509 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_writable($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 516 "bufferedio.c"
        var $2=(($1+12)&4294967295); //@line 516 "bufferedio.c"
        var $3=HEAP[$2]; //@line 516 "bufferedio.c"
        var $4=((($3))|0) <= 0; //@line 516 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 516 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 516 "bufferedio.c"
        var $6=(($5+16)&4294967295); //@line 516 "bufferedio.c"
        var $7=HEAP[$6]; //@line 516 "bufferedio.c"
        var $8=((($7))|0)!=0; //@line 516 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 516 "bufferedio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 516 "bufferedio.c"
        _PyErr_SetString($9, ((__str11)&4294967295)); //@line 516 "bufferedio.c"
        __label__ = 4; break; //@line 516 "bufferedio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 516 "bufferedio.c"
        _PyErr_SetString($10, ((__str12)&4294967295)); //@line 516 "bufferedio.c"
        __label__ = 4; break; //@line 516 "bufferedio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 516 "bufferedio.c"
        __label__ = 6; break; //@line 516 "bufferedio.c"
      case 5: // $bb4
        var $11=HEAP[__PyIO_str_writable]; //@line 517 "bufferedio.c"
        var $12=HEAP[$self_addr]; //@line 517 "bufferedio.c"
        var $13=(($12+8)&4294967295); //@line 517 "bufferedio.c"
        var $14=HEAP[$13]; //@line 517 "bufferedio.c"
        var $15=_PyObject_CallMethodObjArgs($14, $11, 0); //@line 517 "bufferedio.c"
        HEAP[$0]=$15; //@line 517 "bufferedio.c"
        __label__ = 6; break; //@line 517 "bufferedio.c"
      case 6: // $bb5
        var $16=HEAP[$0]; //@line 516 "bufferedio.c"
        HEAP[$retval]=$16; //@line 516 "bufferedio.c"
        __label__ = 7; break; //@line 516 "bufferedio.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 516 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 516 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_name_get($self, $context) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $context_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$context_addr]=$context;
        var $1=HEAP[$self_addr]; //@line 523 "bufferedio.c"
        var $2=(($1+12)&4294967295); //@line 523 "bufferedio.c"
        var $3=HEAP[$2]; //@line 523 "bufferedio.c"
        var $4=((($3))|0) <= 0; //@line 523 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 523 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 523 "bufferedio.c"
        var $6=(($5+16)&4294967295); //@line 523 "bufferedio.c"
        var $7=HEAP[$6]; //@line 523 "bufferedio.c"
        var $8=((($7))|0)!=0; //@line 523 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 523 "bufferedio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 523 "bufferedio.c"
        _PyErr_SetString($9, ((__str11)&4294967295)); //@line 523 "bufferedio.c"
        __label__ = 4; break; //@line 523 "bufferedio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 523 "bufferedio.c"
        _PyErr_SetString($10, ((__str12)&4294967295)); //@line 523 "bufferedio.c"
        __label__ = 4; break; //@line 523 "bufferedio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 523 "bufferedio.c"
        __label__ = 6; break; //@line 523 "bufferedio.c"
      case 5: // $bb4
        var $11=HEAP[$self_addr]; //@line 524 "bufferedio.c"
        var $12=(($11+8)&4294967295); //@line 524 "bufferedio.c"
        var $13=HEAP[$12]; //@line 524 "bufferedio.c"
        var $14=_PyObject_GetAttrString($13, ((__str13)&4294967295)); //@line 524 "bufferedio.c"
        HEAP[$0]=$14; //@line 524 "bufferedio.c"
        __label__ = 6; break; //@line 524 "bufferedio.c"
      case 6: // $bb5
        var $15=HEAP[$0]; //@line 523 "bufferedio.c"
        HEAP[$retval]=$15; //@line 523 "bufferedio.c"
        __label__ = 7; break; //@line 523 "bufferedio.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 523 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 523 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_mode_get($self, $context) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $context_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$context_addr]=$context;
        var $1=HEAP[$self_addr]; //@line 530 "bufferedio.c"
        var $2=(($1+12)&4294967295); //@line 530 "bufferedio.c"
        var $3=HEAP[$2]; //@line 530 "bufferedio.c"
        var $4=((($3))|0) <= 0; //@line 530 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 530 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 530 "bufferedio.c"
        var $6=(($5+16)&4294967295); //@line 530 "bufferedio.c"
        var $7=HEAP[$6]; //@line 530 "bufferedio.c"
        var $8=((($7))|0)!=0; //@line 530 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 530 "bufferedio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 530 "bufferedio.c"
        _PyErr_SetString($9, ((__str11)&4294967295)); //@line 530 "bufferedio.c"
        __label__ = 4; break; //@line 530 "bufferedio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 530 "bufferedio.c"
        _PyErr_SetString($10, ((__str12)&4294967295)); //@line 530 "bufferedio.c"
        __label__ = 4; break; //@line 530 "bufferedio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 530 "bufferedio.c"
        __label__ = 6; break; //@line 530 "bufferedio.c"
      case 5: // $bb4
        var $11=HEAP[$self_addr]; //@line 531 "bufferedio.c"
        var $12=(($11+8)&4294967295); //@line 531 "bufferedio.c"
        var $13=HEAP[$12]; //@line 531 "bufferedio.c"
        var $14=_PyObject_GetAttrString($13, ((__str14)&4294967295)); //@line 531 "bufferedio.c"
        HEAP[$0]=$14; //@line 531 "bufferedio.c"
        __label__ = 6; break; //@line 531 "bufferedio.c"
      case 6: // $bb5
        var $15=HEAP[$0]; //@line 530 "bufferedio.c"
        HEAP[$retval]=$15; //@line 530 "bufferedio.c"
        __label__ = 7; break; //@line 530 "bufferedio.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 530 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 530 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_fileno($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 539 "bufferedio.c"
        var $2=(($1+12)&4294967295); //@line 539 "bufferedio.c"
        var $3=HEAP[$2]; //@line 539 "bufferedio.c"
        var $4=((($3))|0) <= 0; //@line 539 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 539 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 539 "bufferedio.c"
        var $6=(($5+16)&4294967295); //@line 539 "bufferedio.c"
        var $7=HEAP[$6]; //@line 539 "bufferedio.c"
        var $8=((($7))|0)!=0; //@line 539 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 539 "bufferedio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 539 "bufferedio.c"
        _PyErr_SetString($9, ((__str11)&4294967295)); //@line 539 "bufferedio.c"
        __label__ = 4; break; //@line 539 "bufferedio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 539 "bufferedio.c"
        _PyErr_SetString($10, ((__str12)&4294967295)); //@line 539 "bufferedio.c"
        __label__ = 4; break; //@line 539 "bufferedio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 539 "bufferedio.c"
        __label__ = 6; break; //@line 539 "bufferedio.c"
      case 5: // $bb4
        var $11=HEAP[__PyIO_str_fileno]; //@line 540 "bufferedio.c"
        var $12=HEAP[$self_addr]; //@line 540 "bufferedio.c"
        var $13=(($12+8)&4294967295); //@line 540 "bufferedio.c"
        var $14=HEAP[$13]; //@line 540 "bufferedio.c"
        var $15=_PyObject_CallMethodObjArgs($14, $11, 0); //@line 540 "bufferedio.c"
        HEAP[$0]=$15; //@line 540 "bufferedio.c"
        __label__ = 6; break; //@line 540 "bufferedio.c"
      case 6: // $bb5
        var $16=HEAP[$0]; //@line 539 "bufferedio.c"
        HEAP[$retval]=$16; //@line 539 "bufferedio.c"
        __label__ = 7; break; //@line 539 "bufferedio.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 539 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 539 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_isatty($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 546 "bufferedio.c"
        var $2=(($1+12)&4294967295); //@line 546 "bufferedio.c"
        var $3=HEAP[$2]; //@line 546 "bufferedio.c"
        var $4=((($3))|0) <= 0; //@line 546 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 546 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 546 "bufferedio.c"
        var $6=(($5+16)&4294967295); //@line 546 "bufferedio.c"
        var $7=HEAP[$6]; //@line 546 "bufferedio.c"
        var $8=((($7))|0)!=0; //@line 546 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 546 "bufferedio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 546 "bufferedio.c"
        _PyErr_SetString($9, ((__str11)&4294967295)); //@line 546 "bufferedio.c"
        __label__ = 4; break; //@line 546 "bufferedio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 546 "bufferedio.c"
        _PyErr_SetString($10, ((__str12)&4294967295)); //@line 546 "bufferedio.c"
        __label__ = 4; break; //@line 546 "bufferedio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 546 "bufferedio.c"
        __label__ = 6; break; //@line 546 "bufferedio.c"
      case 5: // $bb4
        var $11=HEAP[__PyIO_str_isatty]; //@line 547 "bufferedio.c"
        var $12=HEAP[$self_addr]; //@line 547 "bufferedio.c"
        var $13=(($12+8)&4294967295); //@line 547 "bufferedio.c"
        var $14=HEAP[$13]; //@line 547 "bufferedio.c"
        var $15=_PyObject_CallMethodObjArgs($14, $11, 0); //@line 547 "bufferedio.c"
        HEAP[$0]=$15; //@line 547 "bufferedio.c"
        __label__ = 6; break; //@line 547 "bufferedio.c"
      case 6: // $bb5
        var $16=HEAP[$0]; //@line 546 "bufferedio.c"
        HEAP[$retval]=$16; //@line 546 "bufferedio.c"
        __label__ = 7; break; //@line 546 "bufferedio.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 546 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 546 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __buffered_check_blocking_error() {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval=__stackBase__;
        var $0=__stackBase__+4;
        var $t=__stackBase__+8;
        var $v=__stackBase__+12;
        var $tb=__stackBase__+16;
        var $err=__stackBase__+20;
        var $_alloca_point_=0;
        _PyErr_Fetch($t, $v, $tb); //@line 582 "bufferedio.c"
        var $1=HEAP[$v]; //@line 583 "bufferedio.c"
        var $2=($1)==0; //@line 583 "bufferedio.c"
        if ($2) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 583 "bufferedio.c"
      case 1: // $bb
        var $3=HEAP[_PyExc_BlockingIOError]; //@line 583 "bufferedio.c"
        var $4=HEAP[$v]; //@line 583 "bufferedio.c"
        var $5=_PyErr_GivenExceptionMatches($4, $3); //@line 583 "bufferedio.c"
        var $6=((($5))|0)==0; //@line 583 "bufferedio.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 583 "bufferedio.c"
      case 2: // $bb1
        var $7=HEAP[$tb]; //@line 584 "bufferedio.c"
        var $8=HEAP[$v]; //@line 584 "bufferedio.c"
        var $9=HEAP[$t]; //@line 584 "bufferedio.c"
        _PyErr_Restore($9, $8, $7); //@line 584 "bufferedio.c"
        HEAP[$0]=0; //@line 585 "bufferedio.c"
        __label__ = 4; break; //@line 585 "bufferedio.c"
      case 3: // $bb2
        var $10=HEAP[$v]; //@line 587 "bufferedio.c"
        var $11=$10; //@line 587 "bufferedio.c"
        HEAP[$err]=$11; //@line 587 "bufferedio.c"
        var $12=HEAP[$tb]; //@line 589 "bufferedio.c"
        var $13=HEAP[$v]; //@line 589 "bufferedio.c"
        var $14=HEAP[$t]; //@line 589 "bufferedio.c"
        _PyErr_Restore($14, $13, $12); //@line 589 "bufferedio.c"
        var $15=HEAP[$err]; //@line 590 "bufferedio.c"
        var $16=(($15+32)&4294967295); //@line 590 "bufferedio.c"
        HEAP[$0]=$16; //@line 590 "bufferedio.c"
        __label__ = 4; break; //@line 590 "bufferedio.c"
      case 4: // $bb3
        var $17=HEAP[$0]; //@line 585 "bufferedio.c"
        HEAP[$retval]=$17; //@line 585 "bufferedio.c"
        __label__ = 5; break; //@line 585 "bufferedio.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 585 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 585 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __buffered_raw_tell($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+12;
        var $n=__stackBase__+20;
        var $res=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[__PyIO_str_tell]; //@line 598 "bufferedio.c"
        var $2=HEAP[$self_addr]; //@line 598 "bufferedio.c"
        var $3=(($2+8)&4294967295); //@line 598 "bufferedio.c"
        var $4=HEAP[$3]; //@line 598 "bufferedio.c"
        var $5=_PyObject_CallMethodObjArgs($4, $1, 0); //@line 598 "bufferedio.c"
        HEAP[$res]=$5; //@line 598 "bufferedio.c"
        var $6=HEAP[$res]; //@line 599 "bufferedio.c"
        var $7=($6)==0; //@line 599 "bufferedio.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 599 "bufferedio.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 600 "bufferedio.c"
        __label__ = 9; break; //@line 600 "bufferedio.c"
      case 2: // $bb1
        var $8=HEAP[_PyExc_ValueError]; //@line 601 "bufferedio.c"
        var $9=HEAP[$res]; //@line 601 "bufferedio.c"
        var $10=_PyNumber_AsOff_t($9, $8); //@line 601 "bufferedio.c"
        HEAP[$n]=$10; //@line 601 "bufferedio.c"
        var $11=HEAP[$res]; //@line 602 "bufferedio.c"
        var $12=(($11)&4294967295); //@line 602 "bufferedio.c"
        var $13=HEAP[$12]; //@line 602 "bufferedio.c"
        var $14=((($13) - 1)&4294967295); //@line 602 "bufferedio.c"
        var $15=HEAP[$res]; //@line 602 "bufferedio.c"
        var $16=(($15)&4294967295); //@line 602 "bufferedio.c"
        HEAP[$16]=$14; //@line 602 "bufferedio.c"
        var $17=HEAP[$res]; //@line 602 "bufferedio.c"
        var $18=(($17)&4294967295); //@line 602 "bufferedio.c"
        var $19=HEAP[$18]; //@line 602 "bufferedio.c"
        var $20=((($19))|0)==0; //@line 602 "bufferedio.c"
        if ($20) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 602 "bufferedio.c"
      case 3: // $bb2
        var $21=HEAP[$res]; //@line 602 "bufferedio.c"
        var $22=(($21+4)&4294967295); //@line 602 "bufferedio.c"
        var $23=HEAP[$22]; //@line 602 "bufferedio.c"
        var $24=(($23+24)&4294967295); //@line 602 "bufferedio.c"
        var $25=HEAP[$24]; //@line 602 "bufferedio.c"
        var $26=HEAP[$res]; //@line 602 "bufferedio.c"
        FUNCTION_TABLE[$25]($26); //@line 602 "bufferedio.c"
        __label__ = 4; break; //@line 602 "bufferedio.c"
      case 4: // $bb3
        var $27=HEAP[$n]; //@line 603 "bufferedio.c"
        var $28=reSign(($27), 64, 0) < 0; //@line 603 "bufferedio.c"
        if ($28) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 603 "bufferedio.c"
      case 5: // $bb4
        var $29=_PyErr_Occurred(); //@line 604 "bufferedio.c"
        var $30=($29)==0; //@line 604 "bufferedio.c"
        if ($30) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 604 "bufferedio.c"
      case 6: // $bb5
        var $31=HEAP[_PyExc_IOError]; //@line 605 "bufferedio.c"
        var $32=HEAP[$n]; //@line 605 "bufferedio.c"
        var $33=_PyErr_Format($31, ((__str15)&4294967295), $32); //@line 605 "bufferedio.c"
        __label__ = 7; break; //@line 605 "bufferedio.c"
      case 7: // $bb6
        HEAP[$0]=-1; //@line 608 "bufferedio.c"
        __label__ = 9; break; //@line 608 "bufferedio.c"
      case 8: // $bb7
        var $34=HEAP[$self_addr]; //@line 610 "bufferedio.c"
        var $35=(($34+32)&4294967295); //@line 610 "bufferedio.c"
        var $36=HEAP[$n]; //@line 610 "bufferedio.c"
        HEAP[$35]=$36; //@line 610 "bufferedio.c"
        var $37=HEAP[$n]; //@line 611 "bufferedio.c"
        HEAP[$0]=$37; //@line 611 "bufferedio.c"
        __label__ = 9; break; //@line 611 "bufferedio.c"
      case 9: // $bb8
        var $38=HEAP[$0]; //@line 600 "bufferedio.c"
        HEAP[$retval]=$38; //@line 600 "bufferedio.c"
        __label__ = 10; break; //@line 600 "bufferedio.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 600 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 600 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __buffered_raw_seek($self, $target, $whence) {
    var __stackBase__  = STACKTOP; STACKTOP += 52; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 52);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $target_addr=__stackBase__+4;
        var $whence_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+24;
        var $res=__stackBase__+32;
        var $posobj=__stackBase__+36;
        var $whenceobj=__stackBase__+40;
        var $n=__stackBase__+44;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$target_addr]=$target;
        HEAP[$whence_addr]=$whence;
        var $1=HEAP[$target_addr]; //@line 620 "bufferedio.c"
        var $2=_PyLong_FromLongLong($1); //@line 620 "bufferedio.c"
        HEAP[$posobj]=$2; //@line 620 "bufferedio.c"
        var $3=HEAP[$posobj]; //@line 621 "bufferedio.c"
        var $4=($3)==0; //@line 621 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 621 "bufferedio.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 622 "bufferedio.c"
        __label__ = 19; break; //@line 622 "bufferedio.c"
      case 2: // $bb1
        var $5=HEAP[$whence_addr]; //@line 623 "bufferedio.c"
        var $6=_PyLong_FromLong($5); //@line 623 "bufferedio.c"
        HEAP[$whenceobj]=$6; //@line 623 "bufferedio.c"
        var $7=HEAP[$whenceobj]; //@line 624 "bufferedio.c"
        var $8=($7)==0; //@line 624 "bufferedio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 624 "bufferedio.c"
      case 3: // $bb2
        var $9=HEAP[$posobj]; //@line 625 "bufferedio.c"
        var $10=(($9)&4294967295); //@line 625 "bufferedio.c"
        var $11=HEAP[$10]; //@line 625 "bufferedio.c"
        var $12=((($11) - 1)&4294967295); //@line 625 "bufferedio.c"
        var $13=HEAP[$posobj]; //@line 625 "bufferedio.c"
        var $14=(($13)&4294967295); //@line 625 "bufferedio.c"
        HEAP[$14]=$12; //@line 625 "bufferedio.c"
        var $15=HEAP[$posobj]; //@line 625 "bufferedio.c"
        var $16=(($15)&4294967295); //@line 625 "bufferedio.c"
        var $17=HEAP[$16]; //@line 625 "bufferedio.c"
        var $18=((($17))|0)==0; //@line 625 "bufferedio.c"
        if ($18) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 625 "bufferedio.c"
      case 4: // $bb3
        var $19=HEAP[$posobj]; //@line 625 "bufferedio.c"
        var $20=(($19+4)&4294967295); //@line 625 "bufferedio.c"
        var $21=HEAP[$20]; //@line 625 "bufferedio.c"
        var $22=(($21+24)&4294967295); //@line 625 "bufferedio.c"
        var $23=HEAP[$22]; //@line 625 "bufferedio.c"
        var $24=HEAP[$posobj]; //@line 625 "bufferedio.c"
        FUNCTION_TABLE[$23]($24); //@line 625 "bufferedio.c"
        __label__ = 5; break; //@line 625 "bufferedio.c"
      case 5: // $bb4
        HEAP[$0]=-1; //@line 626 "bufferedio.c"
        __label__ = 19; break; //@line 626 "bufferedio.c"
      case 6: // $bb5
        var $25=HEAP[__PyIO_str_seek]; //@line 628 "bufferedio.c"
        var $26=HEAP[$self_addr]; //@line 628 "bufferedio.c"
        var $27=(($26+8)&4294967295); //@line 628 "bufferedio.c"
        var $28=HEAP[$27]; //@line 628 "bufferedio.c"
        var $29=HEAP[$posobj]; //@line 628 "bufferedio.c"
        var $30=HEAP[$whenceobj]; //@line 628 "bufferedio.c"
        var $31=_PyObject_CallMethodObjArgs($28, $25, $29, $30, 0); //@line 628 "bufferedio.c"
        HEAP[$res]=$31; //@line 628 "bufferedio.c"
        var $32=HEAP[$posobj]; //@line 630 "bufferedio.c"
        var $33=(($32)&4294967295); //@line 630 "bufferedio.c"
        var $34=HEAP[$33]; //@line 630 "bufferedio.c"
        var $35=((($34) - 1)&4294967295); //@line 630 "bufferedio.c"
        var $36=HEAP[$posobj]; //@line 630 "bufferedio.c"
        var $37=(($36)&4294967295); //@line 630 "bufferedio.c"
        HEAP[$37]=$35; //@line 630 "bufferedio.c"
        var $38=HEAP[$posobj]; //@line 630 "bufferedio.c"
        var $39=(($38)&4294967295); //@line 630 "bufferedio.c"
        var $40=HEAP[$39]; //@line 630 "bufferedio.c"
        var $41=((($40))|0)==0; //@line 630 "bufferedio.c"
        if ($41) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 630 "bufferedio.c"
      case 7: // $bb6
        var $42=HEAP[$posobj]; //@line 630 "bufferedio.c"
        var $43=(($42+4)&4294967295); //@line 630 "bufferedio.c"
        var $44=HEAP[$43]; //@line 630 "bufferedio.c"
        var $45=(($44+24)&4294967295); //@line 630 "bufferedio.c"
        var $46=HEAP[$45]; //@line 630 "bufferedio.c"
        var $47=HEAP[$posobj]; //@line 630 "bufferedio.c"
        FUNCTION_TABLE[$46]($47); //@line 630 "bufferedio.c"
        __label__ = 8; break; //@line 630 "bufferedio.c"
      case 8: // $bb7
        var $48=HEAP[$whenceobj]; //@line 631 "bufferedio.c"
        var $49=(($48)&4294967295); //@line 631 "bufferedio.c"
        var $50=HEAP[$49]; //@line 631 "bufferedio.c"
        var $51=((($50) - 1)&4294967295); //@line 631 "bufferedio.c"
        var $52=HEAP[$whenceobj]; //@line 631 "bufferedio.c"
        var $53=(($52)&4294967295); //@line 631 "bufferedio.c"
        HEAP[$53]=$51; //@line 631 "bufferedio.c"
        var $54=HEAP[$whenceobj]; //@line 631 "bufferedio.c"
        var $55=(($54)&4294967295); //@line 631 "bufferedio.c"
        var $56=HEAP[$55]; //@line 631 "bufferedio.c"
        var $57=((($56))|0)==0; //@line 631 "bufferedio.c"
        if ($57) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 631 "bufferedio.c"
      case 9: // $bb8
        var $58=HEAP[$whenceobj]; //@line 631 "bufferedio.c"
        var $59=(($58+4)&4294967295); //@line 631 "bufferedio.c"
        var $60=HEAP[$59]; //@line 631 "bufferedio.c"
        var $61=(($60+24)&4294967295); //@line 631 "bufferedio.c"
        var $62=HEAP[$61]; //@line 631 "bufferedio.c"
        var $63=HEAP[$whenceobj]; //@line 631 "bufferedio.c"
        FUNCTION_TABLE[$62]($63); //@line 631 "bufferedio.c"
        __label__ = 10; break; //@line 631 "bufferedio.c"
      case 10: // $bb9
        var $64=HEAP[$res]; //@line 632 "bufferedio.c"
        var $65=($64)==0; //@line 632 "bufferedio.c"
        if ($65) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 632 "bufferedio.c"
      case 11: // $bb10
        HEAP[$0]=-1; //@line 633 "bufferedio.c"
        __label__ = 19; break; //@line 633 "bufferedio.c"
      case 12: // $bb11
        var $66=HEAP[_PyExc_ValueError]; //@line 634 "bufferedio.c"
        var $67=HEAP[$res]; //@line 634 "bufferedio.c"
        var $68=_PyNumber_AsOff_t($67, $66); //@line 634 "bufferedio.c"
        HEAP[$n]=$68; //@line 634 "bufferedio.c"
        var $69=HEAP[$res]; //@line 635 "bufferedio.c"
        var $70=(($69)&4294967295); //@line 635 "bufferedio.c"
        var $71=HEAP[$70]; //@line 635 "bufferedio.c"
        var $72=((($71) - 1)&4294967295); //@line 635 "bufferedio.c"
        var $73=HEAP[$res]; //@line 635 "bufferedio.c"
        var $74=(($73)&4294967295); //@line 635 "bufferedio.c"
        HEAP[$74]=$72; //@line 635 "bufferedio.c"
        var $75=HEAP[$res]; //@line 635 "bufferedio.c"
        var $76=(($75)&4294967295); //@line 635 "bufferedio.c"
        var $77=HEAP[$76]; //@line 635 "bufferedio.c"
        var $78=((($77))|0)==0; //@line 635 "bufferedio.c"
        if ($78) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 635 "bufferedio.c"
      case 13: // $bb12
        var $79=HEAP[$res]; //@line 635 "bufferedio.c"
        var $80=(($79+4)&4294967295); //@line 635 "bufferedio.c"
        var $81=HEAP[$80]; //@line 635 "bufferedio.c"
        var $82=(($81+24)&4294967295); //@line 635 "bufferedio.c"
        var $83=HEAP[$82]; //@line 635 "bufferedio.c"
        var $84=HEAP[$res]; //@line 635 "bufferedio.c"
        FUNCTION_TABLE[$83]($84); //@line 635 "bufferedio.c"
        __label__ = 14; break; //@line 635 "bufferedio.c"
      case 14: // $bb13
        var $85=HEAP[$n]; //@line 636 "bufferedio.c"
        var $86=reSign(($85), 64, 0) < 0; //@line 636 "bufferedio.c"
        if ($86) { __label__ = 15; break; } else { __label__ = 18; break; } //@line 636 "bufferedio.c"
      case 15: // $bb14
        var $87=_PyErr_Occurred(); //@line 637 "bufferedio.c"
        var $88=($87)==0; //@line 637 "bufferedio.c"
        if ($88) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 637 "bufferedio.c"
      case 16: // $bb15
        var $89=HEAP[_PyExc_IOError]; //@line 638 "bufferedio.c"
        var $90=HEAP[$n]; //@line 638 "bufferedio.c"
        var $91=_PyErr_Format($89, ((__str15)&4294967295), $90); //@line 638 "bufferedio.c"
        __label__ = 17; break; //@line 638 "bufferedio.c"
      case 17: // $bb16
        HEAP[$0]=-1; //@line 641 "bufferedio.c"
        __label__ = 19; break; //@line 641 "bufferedio.c"
      case 18: // $bb17
        var $92=HEAP[$self_addr]; //@line 643 "bufferedio.c"
        var $93=(($92+32)&4294967295); //@line 643 "bufferedio.c"
        var $94=HEAP[$n]; //@line 643 "bufferedio.c"
        HEAP[$93]=$94; //@line 643 "bufferedio.c"
        var $95=HEAP[$n]; //@line 644 "bufferedio.c"
        HEAP[$0]=$95; //@line 644 "bufferedio.c"
        __label__ = 19; break; //@line 644 "bufferedio.c"
      case 19: // $bb18
        var $96=HEAP[$0]; //@line 622 "bufferedio.c"
        HEAP[$retval]=$96; //@line 622 "bufferedio.c"
        __label__ = 20; break; //@line 622 "bufferedio.c"
      case 20: // $return
        var $retval19=HEAP[$retval]; //@line 622 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval19; //@line 622 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __buffered_init($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $n=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 651 "bufferedio.c"
        var $2=(($1+84)&4294967295); //@line 651 "bufferedio.c"
        var $3=HEAP[$2]; //@line 651 "bufferedio.c"
        var $4=((($3))|0) <= 0; //@line 651 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 651 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 652 "bufferedio.c"
        _PyErr_SetString($5, ((__str16)&4294967295)); //@line 652 "bufferedio.c"
        HEAP[$0]=-1; //@line 654 "bufferedio.c"
        __label__ = 15; break; //@line 654 "bufferedio.c"
      case 2: // $bb1
        var $6=HEAP[$self_addr]; //@line 656 "bufferedio.c"
        var $7=(($6+40)&4294967295); //@line 656 "bufferedio.c"
        var $8=HEAP[$7]; //@line 656 "bufferedio.c"
        var $9=($8)!=0; //@line 656 "bufferedio.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 656 "bufferedio.c"
      case 3: // $bb2
        var $10=HEAP[$self_addr]; //@line 657 "bufferedio.c"
        var $11=(($10+40)&4294967295); //@line 657 "bufferedio.c"
        var $12=HEAP[$11]; //@line 657 "bufferedio.c"
        _PyMem_Free($12); //@line 657 "bufferedio.c"
        __label__ = 4; break; //@line 657 "bufferedio.c"
      case 4: // $bb3
        var $13=HEAP[$self_addr]; //@line 658 "bufferedio.c"
        var $14=(($13+84)&4294967295); //@line 658 "bufferedio.c"
        var $15=HEAP[$14]; //@line 658 "bufferedio.c"
        var $16=_PyMem_Malloc($15); //@line 658 "bufferedio.c"
        var $17=HEAP[$self_addr]; //@line 658 "bufferedio.c"
        var $18=(($17+40)&4294967295); //@line 658 "bufferedio.c"
        HEAP[$18]=$16; //@line 658 "bufferedio.c"
        var $19=HEAP[$self_addr]; //@line 659 "bufferedio.c"
        var $20=(($19+40)&4294967295); //@line 659 "bufferedio.c"
        var $21=HEAP[$20]; //@line 659 "bufferedio.c"
        var $22=($21)==0; //@line 659 "bufferedio.c"
        if ($22) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 659 "bufferedio.c"
      case 5: // $bb4
        var $23=_PyErr_NoMemory(); //@line 660 "bufferedio.c"
        HEAP[$0]=-1; //@line 661 "bufferedio.c"
        __label__ = 15; break; //@line 661 "bufferedio.c"
      case 6: // $bb5
        var $24=HEAP[$self_addr]; //@line 675 "bufferedio.c"
        var $25=(($24+84)&4294967295); //@line 675 "bufferedio.c"
        var $26=HEAP[$25]; //@line 675 "bufferedio.c"
        var $27=((($26) - 1)&4294967295); //@line 675 "bufferedio.c"
        HEAP[$n]=$27; //@line 675 "bufferedio.c"
        __label__ = 8; break; //@line 675 "bufferedio.c"
      case 7: // $bb6
        var $28=HEAP[$n]; //@line 675 "bufferedio.c"
        var $29=((($28))|0) >> 1; //@line 675 "bufferedio.c"
        HEAP[$n]=$29; //@line 675 "bufferedio.c"
        __label__ = 8; break; //@line 675 "bufferedio.c"
      case 8: // $bb7
        var $30=HEAP[$n]; //@line 675 "bufferedio.c"
        var $31=($30) & 1; //@line 675 "bufferedio.c"
        var $32=((($31)) & 255); //@line 675 "bufferedio.c"
        var $toBool=reSign(($32), 8, 0)!=0; //@line 675 "bufferedio.c"
        if ($toBool) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 675 "bufferedio.c"
      case 9: // $bb8
        var $33=HEAP[$n]; //@line 677 "bufferedio.c"
        var $34=((($33))|0)==0; //@line 677 "bufferedio.c"
        if ($34) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 677 "bufferedio.c"
      case 10: // $bb9
        var $35=HEAP[$self_addr]; //@line 678 "bufferedio.c"
        var $36=(($35+84)&4294967295); //@line 678 "bufferedio.c"
        var $37=HEAP[$36]; //@line 678 "bufferedio.c"
        var $38=((($37) - 1)&4294967295); //@line 678 "bufferedio.c"
        var $39=HEAP[$self_addr]; //@line 678 "bufferedio.c"
        var $40=(($39+88)&4294967295); //@line 678 "bufferedio.c"
        HEAP[$40]=$38; //@line 678 "bufferedio.c"
        __label__ = 12; break; //@line 678 "bufferedio.c"
      case 11: // $bb10
        var $41=HEAP[$self_addr]; //@line 680 "bufferedio.c"
        var $42=(($41+88)&4294967295); //@line 680 "bufferedio.c"
        HEAP[$42]=0; //@line 680 "bufferedio.c"
        __label__ = 12; break; //@line 680 "bufferedio.c"
      case 12: // $bb11
        var $43=HEAP[$self_addr]; //@line 681 "bufferedio.c"
        var $44=__buffered_raw_tell($43); //@line 681 "bufferedio.c"
        var $45=reSign(($44), 64, 0)==-1; //@line 681 "bufferedio.c"
        if ($45) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 681 "bufferedio.c"
      case 13: // $bb12
        _PyErr_Clear(); //@line 682 "bufferedio.c"
        __label__ = 14; break; //@line 682 "bufferedio.c"
      case 14: // $bb13
        HEAP[$0]=0; //@line 683 "bufferedio.c"
        __label__ = 15; break; //@line 683 "bufferedio.c"
      case 15: // $bb14
        var $46=HEAP[$0]; //@line 654 "bufferedio.c"
        HEAP[$retval]=$46; //@line 654 "bufferedio.c"
        __label__ = 16; break; //@line 654 "bufferedio.c"
      case 16: // $return
        var $retval15=HEAP[$retval]; //@line 654 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval15; //@line 654 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __trap_eintr() {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval=__stackBase__;
        var $0=__stackBase__+4;
        var $typ=__stackBase__+8;
        var $val=__stackBase__+12;
        var $tb=__stackBase__+16;
        var $env_err=__stackBase__+20;
        var $_alloca_point_=0;
        var $1=HEAP[_eintr_int_9093]; //@line 697 "bufferedio.c"
        var $2=($1)==0; //@line 697 "bufferedio.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 697 "bufferedio.c"
      case 1: // $bb
        var $3=_PyLong_FromLong(4); //@line 698 "bufferedio.c"
        HEAP[_eintr_int_9093]=$3; //@line 698 "bufferedio.c"
        var $4=HEAP[_eintr_int_9093]; //@line 699 "bufferedio.c"
        var $5=($4)==0; //@line 699 "bufferedio.c"
        if ($5) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 699 "bufferedio.c"
      case 2: // $bb1
        ___assert_fail(((__str17)&4294967295), ((__str10)&4294967295), 699, ((___PRETTY_FUNCTION___9098)&4294967295)); //@line 699 "bufferedio.c"
        throw "Reached an unreachable! Original .ll line: 2810"; //@line 699 "bufferedio.c"
      case 3: // $bb2
        var $6=HEAP[_PyExc_EnvironmentError]; //@line 701 "bufferedio.c"
        var $7=_PyErr_ExceptionMatches($6); //@line 701 "bufferedio.c"
        var $8=((($7))|0)==0; //@line 701 "bufferedio.c"
        if ($8) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 701 "bufferedio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 702 "bufferedio.c"
        __label__ = 18; break; //@line 702 "bufferedio.c"
      case 5: // $bb4
        _PyErr_Fetch($typ, $val, $tb); //@line 703 "bufferedio.c"
        _PyErr_NormalizeException($typ, $val, $tb); //@line 704 "bufferedio.c"
        var $9=HEAP[$val]; //@line 705 "bufferedio.c"
        var $10=$9; //@line 705 "bufferedio.c"
        HEAP[$env_err]=$10; //@line 705 "bufferedio.c"
        var $11=HEAP[$env_err]; //@line 706 "bufferedio.c"
        var $12=($11)==0; //@line 706 "bufferedio.c"
        if ($12) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 706 "bufferedio.c"
      case 6: // $bb5
        ___assert_fail(((__str18)&4294967295), ((__str10)&4294967295), 706, ((___PRETTY_FUNCTION___9098)&4294967295)); //@line 706 "bufferedio.c"
        throw "Reached an unreachable! Original .ll line: 2834"; //@line 706 "bufferedio.c"
      case 7: // $bb6
        var $13=HEAP[$env_err]; //@line 707 "bufferedio.c"
        var $14=(($13+20)&4294967295); //@line 707 "bufferedio.c"
        var $15=HEAP[$14]; //@line 707 "bufferedio.c"
        var $16=($15)!=0; //@line 707 "bufferedio.c"
        if ($16) { __label__ = 8; break; } else { __label__ = 17; break; } //@line 707 "bufferedio.c"
      case 8: // $bb7
        var $17=HEAP[_eintr_int_9093]; //@line 707 "bufferedio.c"
        var $18=HEAP[$env_err]; //@line 707 "bufferedio.c"
        var $19=(($18+20)&4294967295); //@line 707 "bufferedio.c"
        var $20=HEAP[$19]; //@line 707 "bufferedio.c"
        var $21=_PyObject_RichCompareBool($20, $17, 2); //@line 707 "bufferedio.c"
        var $22=((($21))|0) > 0; //@line 707 "bufferedio.c"
        if ($22) { __label__ = 9; break; } else { __label__ = 17; break; } //@line 707 "bufferedio.c"
      case 9: // $bb8
        var $23=HEAP[$typ]; //@line 709 "bufferedio.c"
        var $24=(($23)&4294967295); //@line 709 "bufferedio.c"
        var $25=HEAP[$24]; //@line 709 "bufferedio.c"
        var $26=((($25) - 1)&4294967295); //@line 709 "bufferedio.c"
        var $27=(($23)&4294967295); //@line 709 "bufferedio.c"
        HEAP[$27]=$26; //@line 709 "bufferedio.c"
        var $28=(($23)&4294967295); //@line 709 "bufferedio.c"
        var $29=HEAP[$28]; //@line 709 "bufferedio.c"
        var $30=((($29))|0)==0; //@line 709 "bufferedio.c"
        if ($30) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 709 "bufferedio.c"
      case 10: // $bb9
        var $31=HEAP[$typ]; //@line 709 "bufferedio.c"
        var $32=(($31+4)&4294967295); //@line 709 "bufferedio.c"
        var $33=HEAP[$32]; //@line 709 "bufferedio.c"
        var $34=(($33+24)&4294967295); //@line 709 "bufferedio.c"
        var $35=HEAP[$34]; //@line 709 "bufferedio.c"
        var $36=HEAP[$typ]; //@line 709 "bufferedio.c"
        FUNCTION_TABLE[$35]($36); //@line 709 "bufferedio.c"
        __label__ = 11; break; //@line 709 "bufferedio.c"
      case 11: // $bb10
        var $37=HEAP[$val]; //@line 710 "bufferedio.c"
        var $38=(($37)&4294967295); //@line 710 "bufferedio.c"
        var $39=HEAP[$38]; //@line 710 "bufferedio.c"
        var $40=((($39) - 1)&4294967295); //@line 710 "bufferedio.c"
        var $41=(($37)&4294967295); //@line 710 "bufferedio.c"
        HEAP[$41]=$40; //@line 710 "bufferedio.c"
        var $42=(($37)&4294967295); //@line 710 "bufferedio.c"
        var $43=HEAP[$42]; //@line 710 "bufferedio.c"
        var $44=((($43))|0)==0; //@line 710 "bufferedio.c"
        if ($44) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 710 "bufferedio.c"
      case 12: // $bb11
        var $45=HEAP[$val]; //@line 710 "bufferedio.c"
        var $46=(($45+4)&4294967295); //@line 710 "bufferedio.c"
        var $47=HEAP[$46]; //@line 710 "bufferedio.c"
        var $48=(($47+24)&4294967295); //@line 710 "bufferedio.c"
        var $49=HEAP[$48]; //@line 710 "bufferedio.c"
        var $50=HEAP[$val]; //@line 710 "bufferedio.c"
        FUNCTION_TABLE[$49]($50); //@line 710 "bufferedio.c"
        __label__ = 13; break; //@line 710 "bufferedio.c"
      case 13: // $bb12
        var $51=HEAP[$tb]; //@line 711 "bufferedio.c"
        var $52=($51)!=0; //@line 711 "bufferedio.c"
        if ($52) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 711 "bufferedio.c"
      case 14: // $bb13
        var $53=HEAP[$tb]; //@line 711 "bufferedio.c"
        var $54=(($53)&4294967295); //@line 711 "bufferedio.c"
        var $55=HEAP[$54]; //@line 711 "bufferedio.c"
        var $56=((($55) - 1)&4294967295); //@line 711 "bufferedio.c"
        var $57=(($53)&4294967295); //@line 711 "bufferedio.c"
        HEAP[$57]=$56; //@line 711 "bufferedio.c"
        var $58=(($53)&4294967295); //@line 711 "bufferedio.c"
        var $59=HEAP[$58]; //@line 711 "bufferedio.c"
        var $60=((($59))|0)==0; //@line 711 "bufferedio.c"
        if ($60) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 711 "bufferedio.c"
      case 15: // $bb14
        var $61=HEAP[$tb]; //@line 711 "bufferedio.c"
        var $62=(($61+4)&4294967295); //@line 711 "bufferedio.c"
        var $63=HEAP[$62]; //@line 711 "bufferedio.c"
        var $64=(($63+24)&4294967295); //@line 711 "bufferedio.c"
        var $65=HEAP[$64]; //@line 711 "bufferedio.c"
        var $66=HEAP[$tb]; //@line 711 "bufferedio.c"
        FUNCTION_TABLE[$65]($66); //@line 711 "bufferedio.c"
        __label__ = 16; break; //@line 711 "bufferedio.c"
      case 16: // $bb15
        HEAP[$0]=1; //@line 712 "bufferedio.c"
        __label__ = 18; break; //@line 712 "bufferedio.c"
      case 17: // $bb16
        var $67=HEAP[$tb]; //@line 715 "bufferedio.c"
        var $68=HEAP[$val]; //@line 715 "bufferedio.c"
        var $69=HEAP[$typ]; //@line 715 "bufferedio.c"
        _PyErr_Restore($69, $68, $67); //@line 715 "bufferedio.c"
        HEAP[$0]=0; //@line 716 "bufferedio.c"
        __label__ = 18; break; //@line 716 "bufferedio.c"
      case 18: // $bb17
        var $70=HEAP[$0]; //@line 702 "bufferedio.c"
        HEAP[$retval]=$70; //@line 702 "bufferedio.c"
        __label__ = 19; break; //@line 702 "bufferedio.c"
      case 19: // $return
        var $retval18=HEAP[$retval]; //@line 702 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval18; //@line 702 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_flush($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 41; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 41);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $iftmp_86=__stackBase__+12;
        var $iftmp_84=__stackBase__+20;
        var $0=__stackBase__+21;
        var $res=__stackBase__+25;
        var $n=__stackBase__+29;
        var $_py_tmp=__stackBase__+37;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 728 "bufferedio.c"
        var $2=(($1+12)&4294967295); //@line 728 "bufferedio.c"
        var $3=HEAP[$2]; //@line 728 "bufferedio.c"
        var $4=((($3))|0) <= 0; //@line 728 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 728 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 728 "bufferedio.c"
        var $6=(($5+16)&4294967295); //@line 728 "bufferedio.c"
        var $7=HEAP[$6]; //@line 728 "bufferedio.c"
        var $8=((($7))|0)!=0; //@line 728 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 728 "bufferedio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 728 "bufferedio.c"
        _PyErr_SetString($9, ((__str11)&4294967295)); //@line 728 "bufferedio.c"
        __label__ = 4; break; //@line 728 "bufferedio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 728 "bufferedio.c"
        _PyErr_SetString($10, ((__str12)&4294967295)); //@line 728 "bufferedio.c"
        __label__ = 4; break; //@line 728 "bufferedio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 728 "bufferedio.c"
        __label__ = 25; break; //@line 728 "bufferedio.c"
      case 5: // $bb4
        var $11=HEAP[$self_addr]; //@line 729 "bufferedio.c"
        var $12=(($11+28)&4294967295); //@line 729 "bufferedio.c"
        var $13=HEAP[$12]; //@line 729 "bufferedio.c"
        var $14=((($13))|0)!=0; //@line 729 "bufferedio.c"
        if ($14) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 729 "bufferedio.c"
      case 6: // $bb5
        var $15=HEAP[$self_addr]; //@line 729 "bufferedio.c"
        var $16=(($15+8)&4294967295); //@line 729 "bufferedio.c"
        var $17=HEAP[$16]; //@line 729 "bufferedio.c"
        var $18=__PyFileIO_closed($17); //@line 729 "bufferedio.c"
        var $19=((($18))|0)!=0; //@line 729 "bufferedio.c"
        var $20=unSign(($19), 1, 0); //@line 729 "bufferedio.c"
        HEAP[$iftmp_84]=$20; //@line 729 "bufferedio.c"
        __label__ = 8; break; //@line 729 "bufferedio.c"
      case 7: // $bb6
        var $21=HEAP[$self_addr]; //@line 729 "bufferedio.c"
        var $22=_buffered_closed($21); //@line 729 "bufferedio.c"
        var $23=((($22))|0)!=0; //@line 729 "bufferedio.c"
        var $24=unSign(($23), 1, 0); //@line 729 "bufferedio.c"
        HEAP[$iftmp_84]=$24; //@line 729 "bufferedio.c"
        __label__ = 8; break; //@line 729 "bufferedio.c"
      case 8: // $bb7
        var $25=HEAP[$iftmp_84]; //@line 729 "bufferedio.c"
        var $toBool=reSign(($25), 8, 0)!=0; //@line 729 "bufferedio.c"
        if ($toBool) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 729 "bufferedio.c"
      case 9: // $bb8
        var $26=HEAP[_PyExc_ValueError]; //@line 729 "bufferedio.c"
        _PyErr_SetString($26, ((__str19)&4294967295)); //@line 729 "bufferedio.c"
        HEAP[$0]=0; //@line 729 "bufferedio.c"
        __label__ = 25; break; //@line 729 "bufferedio.c"
      case 10: // $bb9
        var $27=HEAP[$self_addr]; //@line 733 "bufferedio.c"
        var $28=__bufferedwriter_flush_unlocked($27, 0); //@line 733 "bufferedio.c"
        HEAP[$res]=$28; //@line 733 "bufferedio.c"
        var $29=HEAP[$res]; //@line 734 "bufferedio.c"
        var $30=($29)!=0; //@line 734 "bufferedio.c"
        if ($30) { __label__ = 11; break; } else { __label__ = 24; break; } //@line 734 "bufferedio.c"
      case 11: // $bb10
        var $31=HEAP[$self_addr]; //@line 734 "bufferedio.c"
        var $32=(($31+20)&4294967295); //@line 734 "bufferedio.c"
        var $33=HEAP[$32]; //@line 734 "bufferedio.c"
        var $34=((($33))|0)!=0; //@line 734 "bufferedio.c"
        if ($34) { __label__ = 12; break; } else { __label__ = 24; break; } //@line 734 "bufferedio.c"
      case 12: // $bb11
        var $35=HEAP[$self_addr]; //@line 738 "bufferedio.c"
        var $36=(($35+20)&4294967295); //@line 738 "bufferedio.c"
        var $37=HEAP[$36]; //@line 738 "bufferedio.c"
        var $38=((($37))|0)==0; //@line 738 "bufferedio.c"
        if ($38) { __label__ = 14; break; } else { __label__ = 13; break; } //@line 738 "bufferedio.c"
      case 13: // $bb12
        var $39=HEAP[$self_addr]; //@line 738 "bufferedio.c"
        var $40=(($39+60)&4294967295); //@line 738 "bufferedio.c"
        var $41=HEAP[$40]; //@line 738 "bufferedio.c"
        var $42=reSign(($41), 64, 0)!=-1; //@line 738 "bufferedio.c"
        if ($42) { __label__ = 16; break; } else { __label__ = 14; break; } //@line 738 "bufferedio.c"
      case 14: // $bb13
        var $43=HEAP[$self_addr]; //@line 738 "bufferedio.c"
        var $44=(($43+24)&4294967295); //@line 738 "bufferedio.c"
        var $45=HEAP[$44]; //@line 738 "bufferedio.c"
        var $46=((($45))|0)==0; //@line 738 "bufferedio.c"
        if ($46) { __label__ = 18; break; } else { __label__ = 15; break; } //@line 738 "bufferedio.c"
      case 15: // $bb14
        var $47=HEAP[$self_addr]; //@line 738 "bufferedio.c"
        var $48=(($47+76)&4294967295); //@line 738 "bufferedio.c"
        var $49=HEAP[$48]; //@line 738 "bufferedio.c"
        var $50=reSign(($49), 64, 0)!=-1; //@line 738 "bufferedio.c"
        if ($50) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 738 "bufferedio.c"
      case 16: // $bb15
        var $51=HEAP[$self_addr]; //@line 738 "bufferedio.c"
        var $52=(($51+52)&4294967295); //@line 738 "bufferedio.c"
        var $53=HEAP[$52]; //@line 738 "bufferedio.c"
        var $54=reSign(($53), 64, 0) < 0; //@line 738 "bufferedio.c"
        if ($54) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 738 "bufferedio.c"
      case 17: // $bb16
        var $55=HEAP[$self_addr]; //@line 738 "bufferedio.c"
        var $56=(($55+44)&4294967295); //@line 738 "bufferedio.c"
        var $57=HEAP[$56]; //@line 738 "bufferedio.c"
        var $58=HEAP[$self_addr]; //@line 738 "bufferedio.c"
        var $59=(($58+52)&4294967295); //@line 738 "bufferedio.c"
        var $60=HEAP[$59]; //@line 738 "bufferedio.c"
        var $61=($57) - ($60); //@line 738 "bufferedio.c"
        HEAP[$iftmp_86]=$61; //@line 738 "bufferedio.c"
        __label__ = 19; break; //@line 738 "bufferedio.c"
      case 18: // $bb17
        HEAP[$iftmp_86]=0; //@line 738 "bufferedio.c"
        __label__ = 19; break; //@line 738 "bufferedio.c"
      case 19: // $bb18
        var $62=HEAP[$self_addr]; //@line 738 "bufferedio.c"
        var $63=HEAP[$iftmp_86]; //@line 738 "bufferedio.c"
        var $64=__buffered_raw_seek($62, $63, 1); //@line 738 "bufferedio.c"
        HEAP[$n]=$64; //@line 738 "bufferedio.c"
        var $65=HEAP[$n]; //@line 739 "bufferedio.c"
        var $66=reSign(($65), 64, 0)==-1; //@line 739 "bufferedio.c"
        if ($66) { __label__ = 20; break; } else { __label__ = 23; break; } //@line 739 "bufferedio.c"
      case 20: // $bb19
        var $67=HEAP[$res]; //@line 740 "bufferedio.c"
        var $68=($67)!=0; //@line 740 "bufferedio.c"
        if ($68) { __label__ = 21; break; } else { __label__ = 23; break; } //@line 740 "bufferedio.c"
      case 21: // $bb20
        var $69=HEAP[$res]; //@line 740 "bufferedio.c"
        HEAP[$_py_tmp]=$69; //@line 740 "bufferedio.c"
        HEAP[$res]=0; //@line 740 "bufferedio.c"
        var $70=HEAP[$_py_tmp]; //@line 740 "bufferedio.c"
        var $71=(($70)&4294967295); //@line 740 "bufferedio.c"
        var $72=HEAP[$71]; //@line 740 "bufferedio.c"
        var $73=((($72) - 1)&4294967295); //@line 740 "bufferedio.c"
        var $74=HEAP[$_py_tmp]; //@line 740 "bufferedio.c"
        var $75=(($74)&4294967295); //@line 740 "bufferedio.c"
        HEAP[$75]=$73; //@line 740 "bufferedio.c"
        var $76=HEAP[$_py_tmp]; //@line 740 "bufferedio.c"
        var $77=(($76)&4294967295); //@line 740 "bufferedio.c"
        var $78=HEAP[$77]; //@line 740 "bufferedio.c"
        var $79=((($78))|0)==0; //@line 740 "bufferedio.c"
        if ($79) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 740 "bufferedio.c"
      case 22: // $bb21
        var $80=HEAP[$_py_tmp]; //@line 740 "bufferedio.c"
        var $81=(($80+4)&4294967295); //@line 740 "bufferedio.c"
        var $82=HEAP[$81]; //@line 740 "bufferedio.c"
        var $83=(($82+24)&4294967295); //@line 740 "bufferedio.c"
        var $84=HEAP[$83]; //@line 740 "bufferedio.c"
        var $85=HEAP[$_py_tmp]; //@line 740 "bufferedio.c"
        FUNCTION_TABLE[$84]($85); //@line 740 "bufferedio.c"
        __label__ = 23; break; //@line 740 "bufferedio.c"
      case 23: // $bb22
        var $86=HEAP[$self_addr]; //@line 741 "bufferedio.c"
        __bufferedreader_reset_buf($86); //@line 741 "bufferedio.c"
        __label__ = 24; break; //@line 741 "bufferedio.c"
      case 24: // $bb23
        var $87=HEAP[$res]; //@line 745 "bufferedio.c"
        HEAP[$0]=$87; //@line 745 "bufferedio.c"
        __label__ = 25; break; //@line 745 "bufferedio.c"
      case 25: // $bb24
        var $88=HEAP[$0]; //@line 728 "bufferedio.c"
        HEAP[$retval]=$88; //@line 728 "bufferedio.c"
        __label__ = 26; break; //@line 728 "bufferedio.c"
      case 26: // $return
        var $retval25=HEAP[$retval]; //@line 728 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval25; //@line 728 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_peek($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $n=__stackBase__+16;
        var $res=__stackBase__+20;
        var $_py_tmp=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$n]=0; //@line 751 "bufferedio.c"
        HEAP[$res]=0; //@line 752 "bufferedio.c"
        var $1=HEAP[$self_addr]; //@line 754 "bufferedio.c"
        var $2=(($1+12)&4294967295); //@line 754 "bufferedio.c"
        var $3=HEAP[$2]; //@line 754 "bufferedio.c"
        var $4=((($3))|0) <= 0; //@line 754 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 754 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 754 "bufferedio.c"
        var $6=(($5+16)&4294967295); //@line 754 "bufferedio.c"
        var $7=HEAP[$6]; //@line 754 "bufferedio.c"
        var $8=((($7))|0)!=0; //@line 754 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 754 "bufferedio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 754 "bufferedio.c"
        _PyErr_SetString($9, ((__str11)&4294967295)); //@line 754 "bufferedio.c"
        __label__ = 4; break; //@line 754 "bufferedio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 754 "bufferedio.c"
        _PyErr_SetString($10, ((__str12)&4294967295)); //@line 754 "bufferedio.c"
        __label__ = 4; break; //@line 754 "bufferedio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 754 "bufferedio.c"
        __label__ = 14; break; //@line 754 "bufferedio.c"
      case 5: // $bb4
        var $11=HEAP[$args_addr]; //@line 755 "bufferedio.c"
        var $12=__PyArg_ParseTuple_SizeT($11, ((__str20)&4294967295), $n); //@line 755 "bufferedio.c"
        var $13=((($12))|0)==0; //@line 755 "bufferedio.c"
        if ($13) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 755 "bufferedio.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 756 "bufferedio.c"
        __label__ = 14; break; //@line 756 "bufferedio.c"
      case 7: // $bb6
        var $14=HEAP[$self_addr]; //@line 762 "bufferedio.c"
        var $15=(($14+24)&4294967295); //@line 762 "bufferedio.c"
        var $16=HEAP[$15]; //@line 762 "bufferedio.c"
        var $17=((($16))|0)!=0; //@line 762 "bufferedio.c"
        if ($17) { __label__ = 8; break; } else { __label__ = 12; break; } //@line 762 "bufferedio.c"
      case 8: // $bb7
        var $18=HEAP[$self_addr]; //@line 763 "bufferedio.c"
        var $19=__bufferedwriter_flush_unlocked($18, 1); //@line 763 "bufferedio.c"
        HEAP[$res]=$19; //@line 763 "bufferedio.c"
        var $20=HEAP[$res]; //@line 764 "bufferedio.c"
        var $21=($20)==0; //@line 764 "bufferedio.c"
        if ($21) { __label__ = 13; break; } else { __label__ = 9; break; } //@line 764 "bufferedio.c"
      case 9: // $bb8
        var $22=HEAP[$res]; //@line 766 "bufferedio.c"
        var $23=($22)!=0; //@line 766 "bufferedio.c"
        if ($23) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 766 "bufferedio.c"
      case 10: // $bb9
        var $24=HEAP[$res]; //@line 766 "bufferedio.c"
        HEAP[$_py_tmp]=$24; //@line 766 "bufferedio.c"
        HEAP[$res]=0; //@line 766 "bufferedio.c"
        var $25=HEAP[$_py_tmp]; //@line 766 "bufferedio.c"
        var $26=(($25)&4294967295); //@line 766 "bufferedio.c"
        var $27=HEAP[$26]; //@line 766 "bufferedio.c"
        var $28=((($27) - 1)&4294967295); //@line 766 "bufferedio.c"
        var $29=HEAP[$_py_tmp]; //@line 766 "bufferedio.c"
        var $30=(($29)&4294967295); //@line 766 "bufferedio.c"
        HEAP[$30]=$28; //@line 766 "bufferedio.c"
        var $31=HEAP[$_py_tmp]; //@line 766 "bufferedio.c"
        var $32=(($31)&4294967295); //@line 766 "bufferedio.c"
        var $33=HEAP[$32]; //@line 766 "bufferedio.c"
        var $34=((($33))|0)==0; //@line 766 "bufferedio.c"
        if ($34) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 766 "bufferedio.c"
      case 11: // $bb10
        var $35=HEAP[$_py_tmp]; //@line 766 "bufferedio.c"
        var $36=(($35+4)&4294967295); //@line 766 "bufferedio.c"
        var $37=HEAP[$36]; //@line 766 "bufferedio.c"
        var $38=(($37+24)&4294967295); //@line 766 "bufferedio.c"
        var $39=HEAP[$38]; //@line 766 "bufferedio.c"
        var $40=HEAP[$_py_tmp]; //@line 766 "bufferedio.c"
        FUNCTION_TABLE[$39]($40); //@line 766 "bufferedio.c"
        __label__ = 12; break; //@line 766 "bufferedio.c"
      case 12: // $bb11
        var $41=HEAP[$n]; //@line 768 "bufferedio.c"
        var $42=HEAP[$self_addr]; //@line 768 "bufferedio.c"
        var $43=__bufferedreader_peek_unlocked($42, $41); //@line 768 "bufferedio.c"
        HEAP[$res]=$43; //@line 768 "bufferedio.c"
        __label__ = 13; break; //@line 770 "bufferedio.c"
      case 13: // $end
        var $44=HEAP[$res]; //@line 772 "bufferedio.c"
        HEAP[$0]=$44; //@line 772 "bufferedio.c"
        __label__ = 14; break; //@line 772 "bufferedio.c"
      case 14: // $bb12
        var $45=HEAP[$0]; //@line 754 "bufferedio.c"
        HEAP[$retval]=$45; //@line 754 "bufferedio.c"
        __label__ = 15; break; //@line 754 "bufferedio.c"
      case 15: // $return
        var $retval13=HEAP[$retval]; //@line 754 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 754 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_read($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 25; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 25);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $iftmp_94=__stackBase__+12;
        var $0=__stackBase__+13;
        var $n=__stackBase__+17;
        var $res=__stackBase__+21;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$n]=-1; //@line 778 "bufferedio.c"
        var $1=HEAP[$self_addr]; //@line 781 "bufferedio.c"
        var $2=(($1+12)&4294967295); //@line 781 "bufferedio.c"
        var $3=HEAP[$2]; //@line 781 "bufferedio.c"
        var $4=((($3))|0) <= 0; //@line 781 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 781 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 781 "bufferedio.c"
        var $6=(($5+16)&4294967295); //@line 781 "bufferedio.c"
        var $7=HEAP[$6]; //@line 781 "bufferedio.c"
        var $8=((($7))|0)!=0; //@line 781 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 781 "bufferedio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 781 "bufferedio.c"
        _PyErr_SetString($9, ((__str11)&4294967295)); //@line 781 "bufferedio.c"
        __label__ = 4; break; //@line 781 "bufferedio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 781 "bufferedio.c"
        _PyErr_SetString($10, ((__str12)&4294967295)); //@line 781 "bufferedio.c"
        __label__ = 4; break; //@line 781 "bufferedio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 781 "bufferedio.c"
        __label__ = 21; break; //@line 781 "bufferedio.c"
      case 5: // $bb4
        var $11=HEAP[$args_addr]; //@line 782 "bufferedio.c"
        var $12=__PyArg_ParseTuple_SizeT($11, ((__str21)&4294967295), (FUNCTION_TABLE_OFFSET + 2), $n); //@line 782 "bufferedio.c"
        var $13=((($12))|0)==0; //@line 782 "bufferedio.c"
        if ($13) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 782 "bufferedio.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 783 "bufferedio.c"
        __label__ = 21; break; //@line 783 "bufferedio.c"
      case 7: // $bb6
        var $14=HEAP[$n]; //@line 785 "bufferedio.c"
        var $15=((($14))|0) < -1; //@line 785 "bufferedio.c"
        if ($15) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 785 "bufferedio.c"
      case 8: // $bb7
        var $16=HEAP[_PyExc_ValueError]; //@line 786 "bufferedio.c"
        _PyErr_SetString($16, ((__str22)&4294967295)); //@line 786 "bufferedio.c"
        HEAP[$0]=0; //@line 788 "bufferedio.c"
        __label__ = 21; break; //@line 788 "bufferedio.c"
      case 9: // $bb8
        var $17=HEAP[$self_addr]; //@line 791 "bufferedio.c"
        var $18=(($17+28)&4294967295); //@line 791 "bufferedio.c"
        var $19=HEAP[$18]; //@line 791 "bufferedio.c"
        var $20=((($19))|0)!=0; //@line 791 "bufferedio.c"
        if ($20) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 791 "bufferedio.c"
      case 10: // $bb9
        var $21=HEAP[$self_addr]; //@line 791 "bufferedio.c"
        var $22=(($21+8)&4294967295); //@line 791 "bufferedio.c"
        var $23=HEAP[$22]; //@line 791 "bufferedio.c"
        var $24=__PyFileIO_closed($23); //@line 791 "bufferedio.c"
        var $25=((($24))|0)!=0; //@line 791 "bufferedio.c"
        var $26=unSign(($25), 1, 0); //@line 791 "bufferedio.c"
        HEAP[$iftmp_94]=$26; //@line 791 "bufferedio.c"
        __label__ = 12; break; //@line 791 "bufferedio.c"
      case 11: // $bb10
        var $27=HEAP[$self_addr]; //@line 791 "bufferedio.c"
        var $28=_buffered_closed($27); //@line 791 "bufferedio.c"
        var $29=((($28))|0)!=0; //@line 791 "bufferedio.c"
        var $30=unSign(($29), 1, 0); //@line 791 "bufferedio.c"
        HEAP[$iftmp_94]=$30; //@line 791 "bufferedio.c"
        __label__ = 12; break; //@line 791 "bufferedio.c"
      case 12: // $bb11
        var $31=HEAP[$iftmp_94]; //@line 791 "bufferedio.c"
        var $toBool=reSign(($31), 8, 0)!=0; //@line 791 "bufferedio.c"
        if ($toBool) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 791 "bufferedio.c"
      case 13: // $bb12
        var $32=HEAP[_PyExc_ValueError]; //@line 791 "bufferedio.c"
        _PyErr_SetString($32, ((__str23)&4294967295)); //@line 791 "bufferedio.c"
        HEAP[$0]=0; //@line 791 "bufferedio.c"
        __label__ = 21; break; //@line 791 "bufferedio.c"
      case 14: // $bb13
        var $33=HEAP[$n]; //@line 793 "bufferedio.c"
        var $34=((($33))|0)==-1; //@line 793 "bufferedio.c"
        if ($34) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 793 "bufferedio.c"
      case 15: // $bb14
        var $35=HEAP[$self_addr]; //@line 797 "bufferedio.c"
        var $36=__bufferedreader_read_all($35); //@line 797 "bufferedio.c"
        HEAP[$res]=$36; //@line 797 "bufferedio.c"
        __label__ = 20; break; //@line 797 "bufferedio.c"
      case 16: // $bb15
        var $37=HEAP[$n]; //@line 801 "bufferedio.c"
        var $38=HEAP[$self_addr]; //@line 801 "bufferedio.c"
        var $39=__bufferedreader_read_fast($38, $37); //@line 801 "bufferedio.c"
        HEAP[$res]=$39; //@line 801 "bufferedio.c"
        var $40=HEAP[$res]; //@line 802 "bufferedio.c"
        var $41=($40)==(__Py_NoneStruct); //@line 802 "bufferedio.c"
        if ($41) { __label__ = 17; break; } else { __label__ = 20; break; } //@line 802 "bufferedio.c"
      case 17: // $bb16
        var $42=HEAP[$res]; //@line 803 "bufferedio.c"
        var $43=(($42)&4294967295); //@line 803 "bufferedio.c"
        var $44=HEAP[$43]; //@line 803 "bufferedio.c"
        var $45=((($44) - 1)&4294967295); //@line 803 "bufferedio.c"
        var $46=HEAP[$res]; //@line 803 "bufferedio.c"
        var $47=(($46)&4294967295); //@line 803 "bufferedio.c"
        HEAP[$47]=$45; //@line 803 "bufferedio.c"
        var $48=HEAP[$res]; //@line 803 "bufferedio.c"
        var $49=(($48)&4294967295); //@line 803 "bufferedio.c"
        var $50=HEAP[$49]; //@line 803 "bufferedio.c"
        var $51=((($50))|0)==0; //@line 803 "bufferedio.c"
        if ($51) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 803 "bufferedio.c"
      case 18: // $bb17
        var $52=HEAP[$res]; //@line 803 "bufferedio.c"
        var $53=(($52+4)&4294967295); //@line 803 "bufferedio.c"
        var $54=HEAP[$53]; //@line 803 "bufferedio.c"
        var $55=(($54+24)&4294967295); //@line 803 "bufferedio.c"
        var $56=HEAP[$55]; //@line 803 "bufferedio.c"
        var $57=HEAP[$res]; //@line 803 "bufferedio.c"
        FUNCTION_TABLE[$56]($57); //@line 803 "bufferedio.c"
        __label__ = 19; break; //@line 803 "bufferedio.c"
      case 19: // $bb18
        var $58=HEAP[$n]; //@line 806 "bufferedio.c"
        var $59=HEAP[$self_addr]; //@line 806 "bufferedio.c"
        var $60=__bufferedreader_read_generic($59, $58); //@line 806 "bufferedio.c"
        HEAP[$res]=$60; //@line 806 "bufferedio.c"
        __label__ = 20; break; //@line 806 "bufferedio.c"
      case 20: // $bb19
        var $61=HEAP[$res]; //@line 811 "bufferedio.c"
        HEAP[$0]=$61; //@line 811 "bufferedio.c"
        __label__ = 21; break; //@line 811 "bufferedio.c"
      case 21: // $bb20
        var $62=HEAP[$0]; //@line 781 "bufferedio.c"
        HEAP[$retval]=$62; //@line 781 "bufferedio.c"
        __label__ = 22; break; //@line 781 "bufferedio.c"
      case 22: // $return
        var $retval21=HEAP[$retval]; //@line 781 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval21; //@line 781 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_read1($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $iftmp_104=__stackBase__+12;
        var $0=__stackBase__+16;
        var $n=__stackBase__+20;
        var $have=__stackBase__+24;
        var $r=__stackBase__+28;
        var $res=__stackBase__+32;
        var $_py_tmp=__stackBase__+36;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$res]=0; //@line 818 "bufferedio.c"
        var $1=HEAP[$self_addr]; //@line 820 "bufferedio.c"
        var $2=(($1+12)&4294967295); //@line 820 "bufferedio.c"
        var $3=HEAP[$2]; //@line 820 "bufferedio.c"
        var $4=((($3))|0) <= 0; //@line 820 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 820 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 820 "bufferedio.c"
        var $6=(($5+16)&4294967295); //@line 820 "bufferedio.c"
        var $7=HEAP[$6]; //@line 820 "bufferedio.c"
        var $8=((($7))|0)!=0; //@line 820 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 820 "bufferedio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 820 "bufferedio.c"
        _PyErr_SetString($9, ((__str11)&4294967295)); //@line 820 "bufferedio.c"
        __label__ = 4; break; //@line 820 "bufferedio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 820 "bufferedio.c"
        _PyErr_SetString($10, ((__str12)&4294967295)); //@line 820 "bufferedio.c"
        __label__ = 4; break; //@line 820 "bufferedio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 820 "bufferedio.c"
        __label__ = 34; break; //@line 820 "bufferedio.c"
      case 5: // $bb4
        var $11=HEAP[$args_addr]; //@line 821 "bufferedio.c"
        var $12=__PyArg_ParseTuple_SizeT($11, ((__str24)&4294967295), $n); //@line 821 "bufferedio.c"
        var $13=((($12))|0)==0; //@line 821 "bufferedio.c"
        if ($13) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 821 "bufferedio.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 822 "bufferedio.c"
        __label__ = 34; break; //@line 822 "bufferedio.c"
      case 7: // $bb6
        var $14=HEAP[$n]; //@line 825 "bufferedio.c"
        var $15=((($14))|0) < 0; //@line 825 "bufferedio.c"
        if ($15) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 825 "bufferedio.c"
      case 8: // $bb7
        var $16=HEAP[_PyExc_ValueError]; //@line 826 "bufferedio.c"
        _PyErr_SetString($16, ((__str25)&4294967295)); //@line 826 "bufferedio.c"
        HEAP[$0]=0; //@line 828 "bufferedio.c"
        __label__ = 34; break; //@line 828 "bufferedio.c"
      case 9: // $bb8
        var $17=HEAP[$n]; //@line 830 "bufferedio.c"
        var $18=((($17))|0)==0; //@line 830 "bufferedio.c"
        if ($18) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 830 "bufferedio.c"
      case 10: // $bb9
        var $19=_PyString_FromStringAndSize(0, 0); //@line 831 "bufferedio.c"
        HEAP[$0]=$19; //@line 831 "bufferedio.c"
        __label__ = 34; break; //@line 831 "bufferedio.c"
      case 11: // $bb10
        var $20=HEAP[$self_addr]; //@line 836 "bufferedio.c"
        var $21=(($20+24)&4294967295); //@line 836 "bufferedio.c"
        var $22=HEAP[$21]; //@line 836 "bufferedio.c"
        var $23=((($22))|0)!=0; //@line 836 "bufferedio.c"
        if ($23) { __label__ = 12; break; } else { __label__ = 16; break; } //@line 836 "bufferedio.c"
      case 12: // $bb11
        var $24=HEAP[$self_addr]; //@line 837 "bufferedio.c"
        var $25=__bufferedwriter_flush_unlocked($24, 1); //@line 837 "bufferedio.c"
        HEAP[$res]=$25; //@line 837 "bufferedio.c"
        var $26=HEAP[$res]; //@line 838 "bufferedio.c"
        var $27=($26)==0; //@line 838 "bufferedio.c"
        if ($27) { __label__ = 33; break; } else { __label__ = 13; break; } //@line 838 "bufferedio.c"
      case 13: // $bb12
        var $28=HEAP[$res]; //@line 840 "bufferedio.c"
        var $29=($28)!=0; //@line 840 "bufferedio.c"
        if ($29) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 840 "bufferedio.c"
      case 14: // $bb13
        var $30=HEAP[$res]; //@line 840 "bufferedio.c"
        HEAP[$_py_tmp]=$30; //@line 840 "bufferedio.c"
        HEAP[$res]=0; //@line 840 "bufferedio.c"
        var $31=HEAP[$_py_tmp]; //@line 840 "bufferedio.c"
        var $32=(($31)&4294967295); //@line 840 "bufferedio.c"
        var $33=HEAP[$32]; //@line 840 "bufferedio.c"
        var $34=((($33) - 1)&4294967295); //@line 840 "bufferedio.c"
        var $35=HEAP[$_py_tmp]; //@line 840 "bufferedio.c"
        var $36=(($35)&4294967295); //@line 840 "bufferedio.c"
        HEAP[$36]=$34; //@line 840 "bufferedio.c"
        var $37=HEAP[$_py_tmp]; //@line 840 "bufferedio.c"
        var $38=(($37)&4294967295); //@line 840 "bufferedio.c"
        var $39=HEAP[$38]; //@line 840 "bufferedio.c"
        var $40=((($39))|0)==0; //@line 840 "bufferedio.c"
        if ($40) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 840 "bufferedio.c"
      case 15: // $bb14
        var $41=HEAP[$_py_tmp]; //@line 840 "bufferedio.c"
        var $42=(($41+4)&4294967295); //@line 840 "bufferedio.c"
        var $43=HEAP[$42]; //@line 840 "bufferedio.c"
        var $44=(($43+24)&4294967295); //@line 840 "bufferedio.c"
        var $45=HEAP[$44]; //@line 840 "bufferedio.c"
        var $46=HEAP[$_py_tmp]; //@line 840 "bufferedio.c"
        FUNCTION_TABLE[$45]($46); //@line 840 "bufferedio.c"
        __label__ = 16; break; //@line 840 "bufferedio.c"
      case 16: // $bb15
        var $47=HEAP[$self_addr]; //@line 851 "bufferedio.c"
        var $48=(($47+20)&4294967295); //@line 851 "bufferedio.c"
        var $49=HEAP[$48]; //@line 851 "bufferedio.c"
        var $50=((($49))|0)==0; //@line 851 "bufferedio.c"
        if ($50) { __label__ = 20; break; } else { __label__ = 17; break; } //@line 851 "bufferedio.c"
      case 17: // $bb16
        var $51=HEAP[$self_addr]; //@line 851 "bufferedio.c"
        var $52=(($51+20)&4294967295); //@line 851 "bufferedio.c"
        var $53=HEAP[$52]; //@line 851 "bufferedio.c"
        var $54=((($53))|0)==0; //@line 851 "bufferedio.c"
        if ($54) { __label__ = 20; break; } else { __label__ = 18; break; } //@line 851 "bufferedio.c"
      case 18: // $bb17
        var $55=HEAP[$self_addr]; //@line 851 "bufferedio.c"
        var $56=(($55+60)&4294967295); //@line 851 "bufferedio.c"
        var $57=HEAP[$56]; //@line 851 "bufferedio.c"
        var $58=reSign(($57), 64, 0)==-1; //@line 851 "bufferedio.c"
        if ($58) { __label__ = 20; break; } else { __label__ = 19; break; } //@line 851 "bufferedio.c"
      case 19: // $bb18
        var $59=HEAP[$self_addr]; //@line 851 "bufferedio.c"
        var $60=(($59+60)&4294967295); //@line 851 "bufferedio.c"
        var $61=HEAP[$60]; //@line 851 "bufferedio.c"
        var $62=((($61)) & 4294967295); //@line 851 "bufferedio.c"
        var $63=HEAP[$self_addr]; //@line 851 "bufferedio.c"
        var $64=(($63+44)&4294967295); //@line 851 "bufferedio.c"
        var $65=HEAP[$64]; //@line 851 "bufferedio.c"
        var $66=((($65)) & 4294967295); //@line 851 "bufferedio.c"
        var $67=((($62) - ($66))&4294967295); //@line 851 "bufferedio.c"
        HEAP[$iftmp_104]=$67; //@line 851 "bufferedio.c"
        __label__ = 21; break; //@line 851 "bufferedio.c"
      case 20: // $bb19
        HEAP[$iftmp_104]=0; //@line 851 "bufferedio.c"
        __label__ = 21; break; //@line 851 "bufferedio.c"
      case 21: // $bb20
        var $68=HEAP[$iftmp_104]; //@line 851 "bufferedio.c"
        HEAP[$have]=$68; //@line 851 "bufferedio.c"
        var $69=HEAP[$have]; //@line 852 "bufferedio.c"
        var $70=((($69))|0) > 0; //@line 852 "bufferedio.c"
        if ($70) { __label__ = 22; break; } else { __label__ = 26; break; } //@line 852 "bufferedio.c"
      case 22: // $bb21
        var $71=HEAP[$n]; //@line 853 "bufferedio.c"
        var $72=HEAP[$have]; //@line 853 "bufferedio.c"
        var $73=((($71))|0) > ((($72))|0); //@line 853 "bufferedio.c"
        if ($73) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 853 "bufferedio.c"
      case 23: // $bb22
        var $74=HEAP[$have]; //@line 854 "bufferedio.c"
        HEAP[$n]=$74; //@line 854 "bufferedio.c"
        __label__ = 24; break; //@line 854 "bufferedio.c"
      case 24: // $bb23
        var $75=HEAP[$n]; //@line 855 "bufferedio.c"
        var $76=HEAP[$self_addr]; //@line 855 "bufferedio.c"
        var $77=(($76+40)&4294967295); //@line 855 "bufferedio.c"
        var $78=HEAP[$77]; //@line 855 "bufferedio.c"
        var $79=HEAP[$self_addr]; //@line 855 "bufferedio.c"
        var $80=(($79+44)&4294967295); //@line 855 "bufferedio.c"
        var $81=HEAP[$80]; //@line 855 "bufferedio.c"
        var $82=((($81)) & 4294967295); //@line 855 "bufferedio.c"
        var $83=(($78+$82)&4294967295); //@line 855 "bufferedio.c"
        var $84=_PyString_FromStringAndSize($83, $75); //@line 855 "bufferedio.c"
        HEAP[$res]=$84; //@line 855 "bufferedio.c"
        var $85=HEAP[$res]; //@line 856 "bufferedio.c"
        var $86=($85)==0; //@line 856 "bufferedio.c"
        if ($86) { __label__ = 33; break; } else { __label__ = 25; break; } //@line 856 "bufferedio.c"
      case 25: // $bb24
        var $87=HEAP[$self_addr]; //@line 858 "bufferedio.c"
        var $88=(($87+44)&4294967295); //@line 858 "bufferedio.c"
        var $89=HEAP[$88]; //@line 858 "bufferedio.c"
        var $90=HEAP[$n]; //@line 858 "bufferedio.c"
        var $91=((($90))|0); //@line 858 "bufferedio.c"
        var $92=($89) + ($91); //@line 858 "bufferedio.c"
        var $93=HEAP[$self_addr]; //@line 858 "bufferedio.c"
        var $94=(($93+44)&4294967295); //@line 858 "bufferedio.c"
        HEAP[$94]=$92; //@line 858 "bufferedio.c"
        __label__ = 33; break; //@line 858 "bufferedio.c"
      case 26: // $bb25
        var $95=HEAP[$self_addr]; //@line 863 "bufferedio.c"
        __bufferedreader_reset_buf($95); //@line 863 "bufferedio.c"
        var $96=HEAP[$self_addr]; //@line 864 "bufferedio.c"
        var $97=__bufferedreader_fill_buffer($96); //@line 864 "bufferedio.c"
        HEAP[$r]=$97; //@line 864 "bufferedio.c"
        var $98=HEAP[$r]; //@line 865 "bufferedio.c"
        var $99=((($98))|0)==-1; //@line 865 "bufferedio.c"
        if ($99) { __label__ = 33; break; } else { __label__ = 27; break; } //@line 865 "bufferedio.c"
      case 27: // $bb26
        var $100=HEAP[$r]; //@line 867 "bufferedio.c"
        var $101=((($100))|0)==-2; //@line 867 "bufferedio.c"
        if ($101) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 867 "bufferedio.c"
      case 28: // $bb27
        HEAP[$r]=0; //@line 868 "bufferedio.c"
        __label__ = 29; break; //@line 868 "bufferedio.c"
      case 29: // $bb28
        var $102=HEAP[$n]; //@line 869 "bufferedio.c"
        var $103=HEAP[$r]; //@line 869 "bufferedio.c"
        var $104=((($102))|0) > ((($103))|0); //@line 869 "bufferedio.c"
        if ($104) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 869 "bufferedio.c"
      case 30: // $bb29
        var $105=HEAP[$r]; //@line 870 "bufferedio.c"
        HEAP[$n]=$105; //@line 870 "bufferedio.c"
        __label__ = 31; break; //@line 870 "bufferedio.c"
      case 31: // $bb30
        var $106=HEAP[$n]; //@line 871 "bufferedio.c"
        var $107=HEAP[$self_addr]; //@line 871 "bufferedio.c"
        var $108=(($107+40)&4294967295); //@line 871 "bufferedio.c"
        var $109=HEAP[$108]; //@line 871 "bufferedio.c"
        var $110=_PyString_FromStringAndSize($109, $106); //@line 871 "bufferedio.c"
        HEAP[$res]=$110; //@line 871 "bufferedio.c"
        var $111=HEAP[$res]; //@line 872 "bufferedio.c"
        var $112=($111)==0; //@line 872 "bufferedio.c"
        if ($112) { __label__ = 33; break; } else { __label__ = 32; break; } //@line 872 "bufferedio.c"
      case 32: // $bb31
        var $113=HEAP[$n]; //@line 874 "bufferedio.c"
        var $114=((($113))|0); //@line 874 "bufferedio.c"
        var $115=HEAP[$self_addr]; //@line 874 "bufferedio.c"
        var $116=(($115+44)&4294967295); //@line 874 "bufferedio.c"
        HEAP[$116]=$114; //@line 874 "bufferedio.c"
        __label__ = 33; break; //@line 876 "bufferedio.c"
      case 33: // $end
        var $117=HEAP[$res]; //@line 878 "bufferedio.c"
        HEAP[$0]=$117; //@line 878 "bufferedio.c"
        __label__ = 34; break; //@line 878 "bufferedio.c"
      case 34: // $bb32
        var $118=HEAP[$0]; //@line 820 "bufferedio.c"
        HEAP[$retval]=$118; //@line 820 "bufferedio.c"
        __label__ = 35; break; //@line 820 "bufferedio.c"
      case 35: // $return
        var $retval33=HEAP[$retval]; //@line 820 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval33; //@line 820 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_readinto($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $res=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$res]=0; //@line 884 "bufferedio.c"
        var $1=HEAP[$self_addr]; //@line 886 "bufferedio.c"
        var $2=(($1+12)&4294967295); //@line 886 "bufferedio.c"
        var $3=HEAP[$2]; //@line 886 "bufferedio.c"
        var $4=((($3))|0) <= 0; //@line 886 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 886 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 886 "bufferedio.c"
        var $6=(($5+16)&4294967295); //@line 886 "bufferedio.c"
        var $7=HEAP[$6]; //@line 886 "bufferedio.c"
        var $8=((($7))|0)!=0; //@line 886 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 886 "bufferedio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 886 "bufferedio.c"
        _PyErr_SetString($9, ((__str11)&4294967295)); //@line 886 "bufferedio.c"
        __label__ = 4; break; //@line 886 "bufferedio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 886 "bufferedio.c"
        _PyErr_SetString($10, ((__str12)&4294967295)); //@line 886 "bufferedio.c"
        __label__ = 4; break; //@line 886 "bufferedio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 886 "bufferedio.c"
        __label__ = 11; break; //@line 886 "bufferedio.c"
      case 5: // $bb4
        var $11=HEAP[$self_addr]; //@line 889 "bufferedio.c"
        var $12=(($11+24)&4294967295); //@line 889 "bufferedio.c"
        var $13=HEAP[$12]; //@line 889 "bufferedio.c"
        var $14=((($13))|0)!=0; //@line 889 "bufferedio.c"
        if ($14) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 889 "bufferedio.c"
      case 6: // $bb5
        var $15=HEAP[$self_addr]; //@line 892 "bufferedio.c"
        var $16=__bufferedwriter_flush_unlocked($15, 0); //@line 892 "bufferedio.c"
        HEAP[$res]=$16; //@line 892 "bufferedio.c"
        var $17=HEAP[$res]; //@line 894 "bufferedio.c"
        var $18=($17)==0; //@line 894 "bufferedio.c"
        if ($18) { __label__ = 10; break; } else { __label__ = 7; break; } //@line 894 "bufferedio.c"
      case 7: // $bb6
        var $19=HEAP[$res]; //@line 896 "bufferedio.c"
        var $20=(($19)&4294967295); //@line 896 "bufferedio.c"
        var $21=HEAP[$20]; //@line 896 "bufferedio.c"
        var $22=((($21) - 1)&4294967295); //@line 896 "bufferedio.c"
        var $23=HEAP[$res]; //@line 896 "bufferedio.c"
        var $24=(($23)&4294967295); //@line 896 "bufferedio.c"
        HEAP[$24]=$22; //@line 896 "bufferedio.c"
        var $25=HEAP[$res]; //@line 896 "bufferedio.c"
        var $26=(($25)&4294967295); //@line 896 "bufferedio.c"
        var $27=HEAP[$26]; //@line 896 "bufferedio.c"
        var $28=((($27))|0)==0; //@line 896 "bufferedio.c"
        if ($28) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 896 "bufferedio.c"
      case 8: // $bb7
        var $29=HEAP[$res]; //@line 896 "bufferedio.c"
        var $30=(($29+4)&4294967295); //@line 896 "bufferedio.c"
        var $31=HEAP[$30]; //@line 896 "bufferedio.c"
        var $32=(($31+24)&4294967295); //@line 896 "bufferedio.c"
        var $33=HEAP[$32]; //@line 896 "bufferedio.c"
        var $34=HEAP[$res]; //@line 896 "bufferedio.c"
        FUNCTION_TABLE[$33]($34); //@line 896 "bufferedio.c"
        __label__ = 9; break; //@line 896 "bufferedio.c"
      case 9: // $bb8
        var $35=HEAP[$self_addr]; //@line 898 "bufferedio.c"
        var $36=$35; //@line 898 "bufferedio.c"
        var $37=HEAP[$args_addr]; //@line 898 "bufferedio.c"
        var $38=_bufferediobase_readinto($36, $37); //@line 898 "bufferedio.c"
        HEAP[$res]=$38; //@line 898 "bufferedio.c"
        __label__ = 10; break; //@line 900 "bufferedio.c"
      case 10: // $end
        var $39=HEAP[$res]; //@line 901 "bufferedio.c"
        HEAP[$0]=$39; //@line 901 "bufferedio.c"
        __label__ = 11; break; //@line 901 "bufferedio.c"
      case 11: // $bb9
        var $40=HEAP[$0]; //@line 886 "bufferedio.c"
        HEAP[$retval]=$40; //@line 886 "bufferedio.c"
        __label__ = 12; break; //@line 886 "bufferedio.c"
      case 12: // $return
        var $retval10=HEAP[$retval]; //@line 886 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 886 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __buffered_readline($self, $limit) {
    var __stackBase__  = STACKTOP; STACKTOP += 77; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 77);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $limit_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $iftmp_116=__stackBase__+12;
        var $0=__stackBase__+16;
        var $iftmp_114=__stackBase__+20;
        var $res=__stackBase__+21;
        var $chunks=__stackBase__+25;
        var $n=__stackBase__+29;
        var $written=__stackBase__+33;
        var $start=__stackBase__+37;
        var $s=__stackBase__+41;
        var $end=__stackBase__+45;
        var $_py_tmp=__stackBase__+49;
        var $_py_tmp31=__stackBase__+53;
        var $_py_tmp36=__stackBase__+57;
        var $_py_tmp57=__stackBase__+61;
        var $_py_tmp62=__stackBase__+65;
        var $_py_tmp70=__stackBase__+69;
        var $_py_tmp75=__stackBase__+73;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$limit_addr]=$limit;
        HEAP[$res]=0; //@line 907 "bufferedio.c"
        HEAP[$chunks]=0; //@line 908 "bufferedio.c"
        HEAP[$written]=0; //@line 909 "bufferedio.c"
        var $1=HEAP[$self_addr]; //@line 912 "bufferedio.c"
        var $2=(($1+28)&4294967295); //@line 912 "bufferedio.c"
        var $3=HEAP[$2]; //@line 912 "bufferedio.c"
        var $4=((($3))|0)!=0; //@line 912 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 912 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 912 "bufferedio.c"
        var $6=(($5+8)&4294967295); //@line 912 "bufferedio.c"
        var $7=HEAP[$6]; //@line 912 "bufferedio.c"
        var $8=__PyFileIO_closed($7); //@line 912 "bufferedio.c"
        var $9=((($8))|0)!=0; //@line 912 "bufferedio.c"
        var $10=unSign(($9), 1, 0); //@line 912 "bufferedio.c"
        HEAP[$iftmp_114]=$10; //@line 912 "bufferedio.c"
        __label__ = 3; break; //@line 912 "bufferedio.c"
      case 2: // $bb1
        var $11=HEAP[$self_addr]; //@line 912 "bufferedio.c"
        var $12=_buffered_closed($11); //@line 912 "bufferedio.c"
        var $13=((($12))|0)!=0; //@line 912 "bufferedio.c"
        var $14=unSign(($13), 1, 0); //@line 912 "bufferedio.c"
        HEAP[$iftmp_114]=$14; //@line 912 "bufferedio.c"
        __label__ = 3; break; //@line 912 "bufferedio.c"
      case 3: // $bb2
        var $15=HEAP[$iftmp_114]; //@line 912 "bufferedio.c"
        var $toBool=reSign(($15), 8, 0)!=0; //@line 912 "bufferedio.c"
        if ($toBool) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 912 "bufferedio.c"
      case 4: // $bb3
        var $16=HEAP[_PyExc_ValueError]; //@line 912 "bufferedio.c"
        _PyErr_SetString($16, ((__str26)&4294967295)); //@line 912 "bufferedio.c"
        HEAP[$0]=0; //@line 912 "bufferedio.c"
        __label__ = 78; break; //@line 912 "bufferedio.c"
      case 5: // $bb4
        var $17=HEAP[$self_addr]; //@line 917 "bufferedio.c"
        var $18=(($17+20)&4294967295); //@line 917 "bufferedio.c"
        var $19=HEAP[$18]; //@line 917 "bufferedio.c"
        var $20=((($19))|0)==0; //@line 917 "bufferedio.c"
        if ($20) { __label__ = 9; break; } else { __label__ = 6; break; } //@line 917 "bufferedio.c"
      case 6: // $bb5
        var $21=HEAP[$self_addr]; //@line 917 "bufferedio.c"
        var $22=(($21+20)&4294967295); //@line 917 "bufferedio.c"
        var $23=HEAP[$22]; //@line 917 "bufferedio.c"
        var $24=((($23))|0)==0; //@line 917 "bufferedio.c"
        if ($24) { __label__ = 9; break; } else { __label__ = 7; break; } //@line 917 "bufferedio.c"
      case 7: // $bb6
        var $25=HEAP[$self_addr]; //@line 917 "bufferedio.c"
        var $26=(($25+60)&4294967295); //@line 917 "bufferedio.c"
        var $27=HEAP[$26]; //@line 917 "bufferedio.c"
        var $28=reSign(($27), 64, 0)==-1; //@line 917 "bufferedio.c"
        if ($28) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 917 "bufferedio.c"
      case 8: // $bb7
        var $29=HEAP[$self_addr]; //@line 917 "bufferedio.c"
        var $30=(($29+60)&4294967295); //@line 917 "bufferedio.c"
        var $31=HEAP[$30]; //@line 917 "bufferedio.c"
        var $32=((($31)) & 4294967295); //@line 917 "bufferedio.c"
        var $33=HEAP[$self_addr]; //@line 917 "bufferedio.c"
        var $34=(($33+44)&4294967295); //@line 917 "bufferedio.c"
        var $35=HEAP[$34]; //@line 917 "bufferedio.c"
        var $36=((($35)) & 4294967295); //@line 917 "bufferedio.c"
        var $37=((($32) - ($36))&4294967295); //@line 917 "bufferedio.c"
        HEAP[$iftmp_116]=$37; //@line 917 "bufferedio.c"
        __label__ = 10; break; //@line 917 "bufferedio.c"
      case 9: // $bb8
        HEAP[$iftmp_116]=0; //@line 917 "bufferedio.c"
        __label__ = 10; break; //@line 917 "bufferedio.c"
      case 10: // $bb9
        var $38=HEAP[$iftmp_116]; //@line 917 "bufferedio.c"
        HEAP[$n]=$38; //@line 917 "bufferedio.c"
        var $39=HEAP[$limit_addr]; //@line 918 "bufferedio.c"
        var $40=((($39))|0) >= 0; //@line 918 "bufferedio.c"
        if ($40) { __label__ = 11; break; } else { __label__ = 13; break; } //@line 918 "bufferedio.c"
      case 11: // $bb10
        var $41=HEAP[$n]; //@line 918 "bufferedio.c"
        var $42=HEAP[$limit_addr]; //@line 918 "bufferedio.c"
        var $43=((($41))|0) > ((($42))|0); //@line 918 "bufferedio.c"
        if ($43) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 918 "bufferedio.c"
      case 12: // $bb11
        var $44=HEAP[$limit_addr]; //@line 919 "bufferedio.c"
        HEAP[$n]=$44; //@line 919 "bufferedio.c"
        __label__ = 13; break; //@line 919 "bufferedio.c"
      case 13: // $bb12
        var $45=HEAP[$self_addr]; //@line 920 "bufferedio.c"
        var $46=(($45+40)&4294967295); //@line 920 "bufferedio.c"
        var $47=HEAP[$46]; //@line 920 "bufferedio.c"
        var $48=HEAP[$self_addr]; //@line 920 "bufferedio.c"
        var $49=(($48+44)&4294967295); //@line 920 "bufferedio.c"
        var $50=HEAP[$49]; //@line 920 "bufferedio.c"
        var $51=((($50)) & 4294967295); //@line 920 "bufferedio.c"
        var $52=(($47+$51)&4294967295); //@line 920 "bufferedio.c"
        HEAP[$start]=$52; //@line 920 "bufferedio.c"
        var $53=HEAP[$n]; //@line 921 "bufferedio.c"
        var $54=HEAP[$start]; //@line 921 "bufferedio.c"
        var $55=_memchr($54, 10, $53); //@line 921 "bufferedio.c"
        HEAP[$s]=$55; //@line 921 "bufferedio.c"
        var $56=HEAP[$s]; //@line 922 "bufferedio.c"
        var $57=($56)!=0; //@line 922 "bufferedio.c"
        if ($57) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 922 "bufferedio.c"
      case 14: // $bb13
        var $58=HEAP[$s]; //@line 923 "bufferedio.c"
        var $59=($58); //@line 923 "bufferedio.c"
        var $60=HEAP[$start]; //@line 923 "bufferedio.c"
        var $61=($60); //@line 923 "bufferedio.c"
        var $62=((($59) - ($61))&4294967295); //@line 923 "bufferedio.c"
        var $63=((($62) + 1)&4294967295); //@line 923 "bufferedio.c"
        var $64=HEAP[$start]; //@line 923 "bufferedio.c"
        var $65=_PyString_FromStringAndSize($64, $63); //@line 923 "bufferedio.c"
        HEAP[$res]=$65; //@line 923 "bufferedio.c"
        var $66=HEAP[$res]; //@line 924 "bufferedio.c"
        var $67=($66)!=0; //@line 924 "bufferedio.c"
        if ($67) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 924 "bufferedio.c"
      case 15: // $bb14
        var $68=HEAP[$self_addr]; //@line 925 "bufferedio.c"
        var $69=(($68+44)&4294967295); //@line 925 "bufferedio.c"
        var $70=HEAP[$69]; //@line 925 "bufferedio.c"
        var $71=HEAP[$s]; //@line 925 "bufferedio.c"
        var $72=($71); //@line 925 "bufferedio.c"
        var $73=HEAP[$start]; //@line 925 "bufferedio.c"
        var $74=($73); //@line 925 "bufferedio.c"
        var $75=((($72) - ($74))&4294967295); //@line 925 "bufferedio.c"
        var $76=((($75) + 1)&4294967295); //@line 925 "bufferedio.c"
        var $77=((($76))|0); //@line 925 "bufferedio.c"
        var $78=($70) + ($77); //@line 925 "bufferedio.c"
        var $79=HEAP[$self_addr]; //@line 925 "bufferedio.c"
        var $80=(($79+44)&4294967295); //@line 925 "bufferedio.c"
        HEAP[$80]=$78; //@line 925 "bufferedio.c"
        __label__ = 16; break; //@line 925 "bufferedio.c"
      case 16: // $bb15
        __label__ = 73; break; //@line 925 "bufferedio.c"
      case 17: // $bb16
        var $81=HEAP[$n]; //@line 928 "bufferedio.c"
        var $82=HEAP[$limit_addr]; //@line 928 "bufferedio.c"
        var $83=((($81))|0)==((($82))|0); //@line 928 "bufferedio.c"
        if ($83) { __label__ = 18; break; } else { __label__ = 21; break; } //@line 928 "bufferedio.c"
      case 18: // $bb17
        var $84=HEAP[$start]; //@line 929 "bufferedio.c"
        var $85=HEAP[$n]; //@line 929 "bufferedio.c"
        var $86=_PyString_FromStringAndSize($84, $85); //@line 929 "bufferedio.c"
        HEAP[$res]=$86; //@line 929 "bufferedio.c"
        var $87=HEAP[$res]; //@line 930 "bufferedio.c"
        var $88=($87)!=0; //@line 930 "bufferedio.c"
        if ($88) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 930 "bufferedio.c"
      case 19: // $bb18
        var $89=HEAP[$self_addr]; //@line 931 "bufferedio.c"
        var $90=(($89+44)&4294967295); //@line 931 "bufferedio.c"
        var $91=HEAP[$90]; //@line 931 "bufferedio.c"
        var $92=HEAP[$n]; //@line 931 "bufferedio.c"
        var $93=((($92))|0); //@line 931 "bufferedio.c"
        var $94=($91) + ($93); //@line 931 "bufferedio.c"
        var $95=HEAP[$self_addr]; //@line 931 "bufferedio.c"
        var $96=(($95+44)&4294967295); //@line 931 "bufferedio.c"
        HEAP[$96]=$94; //@line 931 "bufferedio.c"
        __label__ = 20; break; //@line 931 "bufferedio.c"
      case 20: // $bb19
        __label__ = 73; break; //@line 931 "bufferedio.c"
      case 21: // $bb20
        var $97=HEAP[$self_addr]; //@line 939 "bufferedio.c"
        var $98=(($97+24)&4294967295); //@line 939 "bufferedio.c"
        var $99=HEAP[$98]; //@line 939 "bufferedio.c"
        var $100=((($99))|0)!=0; //@line 939 "bufferedio.c"
        if ($100) { __label__ = 22; break; } else { __label__ = 26; break; } //@line 939 "bufferedio.c"
      case 22: // $bb21
        var $101=HEAP[$self_addr]; //@line 940 "bufferedio.c"
        var $102=__bufferedwriter_flush_unlocked($101, 1); //@line 940 "bufferedio.c"
        HEAP[$res]=$102; //@line 940 "bufferedio.c"
        var $103=HEAP[$res]; //@line 941 "bufferedio.c"
        var $104=($103)==0; //@line 941 "bufferedio.c"
        if ($104) { __label__ = 73; break; } else { __label__ = 23; break; } //@line 941 "bufferedio.c"
      case 23: // $bb22
        var $105=HEAP[$res]; //@line 943 "bufferedio.c"
        var $106=($105)!=0; //@line 943 "bufferedio.c"
        if ($106) { __label__ = 24; break; } else { __label__ = 26; break; } //@line 943 "bufferedio.c"
      case 24: // $bb23
        var $107=HEAP[$res]; //@line 943 "bufferedio.c"
        HEAP[$_py_tmp]=$107; //@line 943 "bufferedio.c"
        HEAP[$res]=0; //@line 943 "bufferedio.c"
        var $108=HEAP[$_py_tmp]; //@line 943 "bufferedio.c"
        var $109=(($108)&4294967295); //@line 943 "bufferedio.c"
        var $110=HEAP[$109]; //@line 943 "bufferedio.c"
        var $111=((($110) - 1)&4294967295); //@line 943 "bufferedio.c"
        var $112=HEAP[$_py_tmp]; //@line 943 "bufferedio.c"
        var $113=(($112)&4294967295); //@line 943 "bufferedio.c"
        HEAP[$113]=$111; //@line 943 "bufferedio.c"
        var $114=HEAP[$_py_tmp]; //@line 943 "bufferedio.c"
        var $115=(($114)&4294967295); //@line 943 "bufferedio.c"
        var $116=HEAP[$115]; //@line 943 "bufferedio.c"
        var $117=((($116))|0)==0; //@line 943 "bufferedio.c"
        if ($117) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 943 "bufferedio.c"
      case 25: // $bb24
        var $118=HEAP[$_py_tmp]; //@line 943 "bufferedio.c"
        var $119=(($118+4)&4294967295); //@line 943 "bufferedio.c"
        var $120=HEAP[$119]; //@line 943 "bufferedio.c"
        var $121=(($120+24)&4294967295); //@line 943 "bufferedio.c"
        var $122=HEAP[$121]; //@line 943 "bufferedio.c"
        var $123=HEAP[$_py_tmp]; //@line 943 "bufferedio.c"
        FUNCTION_TABLE[$122]($123); //@line 943 "bufferedio.c"
        __label__ = 26; break; //@line 943 "bufferedio.c"
      case 26: // $bb25
        var $124=_PyList_New(0); //@line 945 "bufferedio.c"
        HEAP[$chunks]=$124; //@line 945 "bufferedio.c"
        var $125=HEAP[$chunks]; //@line 946 "bufferedio.c"
        var $126=($125)==0; //@line 946 "bufferedio.c"
        if ($126) { __label__ = 73; break; } else { __label__ = 27; break; } //@line 946 "bufferedio.c"
      case 27: // $bb26
        var $127=HEAP[$n]; //@line 948 "bufferedio.c"
        var $128=((($127))|0) > 0; //@line 948 "bufferedio.c"
        if ($128) { __label__ = 28; break; } else { __label__ = 39; break; } //@line 948 "bufferedio.c"
      case 28: // $bb27
        var $129=HEAP[$start]; //@line 949 "bufferedio.c"
        var $130=HEAP[$n]; //@line 949 "bufferedio.c"
        var $131=_PyString_FromStringAndSize($129, $130); //@line 949 "bufferedio.c"
        HEAP[$res]=$131; //@line 949 "bufferedio.c"
        var $132=HEAP[$res]; //@line 950 "bufferedio.c"
        var $133=($132)==0; //@line 950 "bufferedio.c"
        if ($133) { __label__ = 73; break; } else { __label__ = 29; break; } //@line 950 "bufferedio.c"
      case 29: // $bb28
        var $134=HEAP[$chunks]; //@line 952 "bufferedio.c"
        var $135=HEAP[$res]; //@line 952 "bufferedio.c"
        var $136=_PyList_Append($134, $135); //@line 952 "bufferedio.c"
        var $137=((($136))|0) < 0; //@line 952 "bufferedio.c"
        if ($137) { __label__ = 30; break; } else { __label__ = 34; break; } //@line 952 "bufferedio.c"
      case 30: // $bb29
        var $138=HEAP[$res]; //@line 953 "bufferedio.c"
        var $139=($138)!=0; //@line 953 "bufferedio.c"
        if ($139) { __label__ = 31; break; } else { __label__ = 33; break; } //@line 953 "bufferedio.c"
      case 31: // $bb30
        var $140=HEAP[$res]; //@line 953 "bufferedio.c"
        HEAP[$_py_tmp31]=$140; //@line 953 "bufferedio.c"
        HEAP[$res]=0; //@line 953 "bufferedio.c"
        var $141=HEAP[$_py_tmp31]; //@line 953 "bufferedio.c"
        var $142=(($141)&4294967295); //@line 953 "bufferedio.c"
        var $143=HEAP[$142]; //@line 953 "bufferedio.c"
        var $144=((($143) - 1)&4294967295); //@line 953 "bufferedio.c"
        var $145=HEAP[$_py_tmp31]; //@line 953 "bufferedio.c"
        var $146=(($145)&4294967295); //@line 953 "bufferedio.c"
        HEAP[$146]=$144; //@line 953 "bufferedio.c"
        var $147=HEAP[$_py_tmp31]; //@line 953 "bufferedio.c"
        var $148=(($147)&4294967295); //@line 953 "bufferedio.c"
        var $149=HEAP[$148]; //@line 953 "bufferedio.c"
        var $150=((($149))|0)==0; //@line 953 "bufferedio.c"
        if ($150) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 953 "bufferedio.c"
      case 32: // $bb32
        var $151=HEAP[$_py_tmp31]; //@line 953 "bufferedio.c"
        var $152=(($151+4)&4294967295); //@line 953 "bufferedio.c"
        var $153=HEAP[$152]; //@line 953 "bufferedio.c"
        var $154=(($153+24)&4294967295); //@line 953 "bufferedio.c"
        var $155=HEAP[$154]; //@line 953 "bufferedio.c"
        var $156=HEAP[$_py_tmp31]; //@line 953 "bufferedio.c"
        FUNCTION_TABLE[$155]($156); //@line 953 "bufferedio.c"
        __label__ = 33; break; //@line 953 "bufferedio.c"
      case 33: // $bb33
        __label__ = 73; break; //@line 953 "bufferedio.c"
      case 34: // $bb34
        var $157=HEAP[$res]; //@line 956 "bufferedio.c"
        var $158=($157)!=0; //@line 956 "bufferedio.c"
        if ($158) { __label__ = 35; break; } else { __label__ = 37; break; } //@line 956 "bufferedio.c"
      case 35: // $bb35
        var $159=HEAP[$res]; //@line 956 "bufferedio.c"
        HEAP[$_py_tmp36]=$159; //@line 956 "bufferedio.c"
        HEAP[$res]=0; //@line 956 "bufferedio.c"
        var $160=HEAP[$_py_tmp36]; //@line 956 "bufferedio.c"
        var $161=(($160)&4294967295); //@line 956 "bufferedio.c"
        var $162=HEAP[$161]; //@line 956 "bufferedio.c"
        var $163=((($162) - 1)&4294967295); //@line 956 "bufferedio.c"
        var $164=HEAP[$_py_tmp36]; //@line 956 "bufferedio.c"
        var $165=(($164)&4294967295); //@line 956 "bufferedio.c"
        HEAP[$165]=$163; //@line 956 "bufferedio.c"
        var $166=HEAP[$_py_tmp36]; //@line 956 "bufferedio.c"
        var $167=(($166)&4294967295); //@line 956 "bufferedio.c"
        var $168=HEAP[$167]; //@line 956 "bufferedio.c"
        var $169=((($168))|0)==0; //@line 956 "bufferedio.c"
        if ($169) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 956 "bufferedio.c"
      case 36: // $bb37
        var $170=HEAP[$_py_tmp36]; //@line 956 "bufferedio.c"
        var $171=(($170+4)&4294967295); //@line 956 "bufferedio.c"
        var $172=HEAP[$171]; //@line 956 "bufferedio.c"
        var $173=(($172+24)&4294967295); //@line 956 "bufferedio.c"
        var $174=HEAP[$173]; //@line 956 "bufferedio.c"
        var $175=HEAP[$_py_tmp36]; //@line 956 "bufferedio.c"
        FUNCTION_TABLE[$174]($175); //@line 956 "bufferedio.c"
        __label__ = 37; break; //@line 956 "bufferedio.c"
      case 37: // $bb38
        var $176=HEAP[$written]; //@line 957 "bufferedio.c"
        var $177=HEAP[$n]; //@line 957 "bufferedio.c"
        var $178=((($176) + ($177))&4294967295); //@line 957 "bufferedio.c"
        HEAP[$written]=$178; //@line 957 "bufferedio.c"
        var $179=HEAP[$limit_addr]; //@line 958 "bufferedio.c"
        var $180=((($179))|0) >= 0; //@line 958 "bufferedio.c"
        if ($180) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 958 "bufferedio.c"
      case 38: // $bb39
        var $181=HEAP[$limit_addr]; //@line 959 "bufferedio.c"
        var $182=HEAP[$n]; //@line 959 "bufferedio.c"
        var $183=((($181) - ($182))&4294967295); //@line 959 "bufferedio.c"
        HEAP[$limit_addr]=$183; //@line 959 "bufferedio.c"
        __label__ = 39; break; //@line 959 "bufferedio.c"
      case 39: // $bb40
        var $184=HEAP[$self_addr]; //@line 963 "bufferedio.c"
        __bufferedreader_reset_buf($184); //@line 963 "bufferedio.c"
        var $185=HEAP[$self_addr]; //@line 964 "bufferedio.c"
        var $186=__bufferedreader_fill_buffer($185); //@line 964 "bufferedio.c"
        HEAP[$n]=$186; //@line 964 "bufferedio.c"
        var $187=HEAP[$n]; //@line 965 "bufferedio.c"
        var $188=((($187))|0)==-1; //@line 965 "bufferedio.c"
        if ($188) { __label__ = 73; break; } else { __label__ = 40; break; } //@line 965 "bufferedio.c"
      case 40: // $bb41
        var $189=HEAP[$n]; //@line 967 "bufferedio.c"
        var $190=((($189))|0) <= 0; //@line 967 "bufferedio.c"
        if ($190) { __label__ = 63; break; } else { __label__ = 41; break; } //@line 967 "bufferedio.c"
      case 41: // $bb42
        var $191=HEAP[$limit_addr]; //@line 969 "bufferedio.c"
        var $192=((($191))|0) >= 0; //@line 969 "bufferedio.c"
        if ($192) { __label__ = 42; break; } else { __label__ = 44; break; } //@line 969 "bufferedio.c"
      case 42: // $bb43
        var $193=HEAP[$n]; //@line 969 "bufferedio.c"
        var $194=HEAP[$limit_addr]; //@line 969 "bufferedio.c"
        var $195=((($193))|0) > ((($194))|0); //@line 969 "bufferedio.c"
        if ($195) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 969 "bufferedio.c"
      case 43: // $bb44
        var $196=HEAP[$limit_addr]; //@line 970 "bufferedio.c"
        HEAP[$n]=$196; //@line 970 "bufferedio.c"
        __label__ = 44; break; //@line 970 "bufferedio.c"
      case 44: // $bb45
        var $197=HEAP[$self_addr]; //@line 971 "bufferedio.c"
        var $198=(($197+40)&4294967295); //@line 971 "bufferedio.c"
        var $199=HEAP[$198]; //@line 971 "bufferedio.c"
        HEAP[$start]=$199; //@line 971 "bufferedio.c"
        var $200=HEAP[$start]; //@line 972 "bufferedio.c"
        var $201=HEAP[$n]; //@line 972 "bufferedio.c"
        var $202=(($200+$201)&4294967295); //@line 972 "bufferedio.c"
        HEAP[$end]=$202; //@line 972 "bufferedio.c"
        var $203=HEAP[$start]; //@line 973 "bufferedio.c"
        HEAP[$s]=$203; //@line 973 "bufferedio.c"
        __label__ = 48; break; //@line 973 "bufferedio.c"
      case 45: // $bb46
        var $204=HEAP[$s]; //@line 975 "bufferedio.c"
        var $205=HEAP[$204]; //@line 975 "bufferedio.c"
        var $206=reSign(($205), 8, 0)==10; //@line 975 "bufferedio.c"
        var $207=unSign(($206), 1, 0); //@line 975 "bufferedio.c"
        var $208=HEAP[$s]; //@line 975 "bufferedio.c"
        var $209=(($208+1)&4294967295); //@line 975 "bufferedio.c"
        HEAP[$s]=$209; //@line 975 "bufferedio.c"
        var $toBool47=reSign(($207), 8, 0)!=0; //@line 975 "bufferedio.c"
        if ($toBool47) { __label__ = 46; break; } else { __label__ = 48; break; } //@line 975 "bufferedio.c"
      case 46: // $bb48
        var $210=HEAP[$s]; //@line 976 "bufferedio.c"
        var $211=($210); //@line 976 "bufferedio.c"
        var $212=HEAP[$start]; //@line 976 "bufferedio.c"
        var $213=($212); //@line 976 "bufferedio.c"
        var $214=((($211) - ($213))&4294967295); //@line 976 "bufferedio.c"
        var $215=HEAP[$start]; //@line 976 "bufferedio.c"
        var $216=_PyString_FromStringAndSize($215, $214); //@line 976 "bufferedio.c"
        HEAP[$res]=$216; //@line 976 "bufferedio.c"
        var $217=HEAP[$res]; //@line 977 "bufferedio.c"
        var $218=($217)==0; //@line 977 "bufferedio.c"
        if ($218) { __label__ = 73; break; } else { __label__ = 47; break; } //@line 977 "bufferedio.c"
      case 47: // $bb49
        var $219=HEAP[$s]; //@line 979 "bufferedio.c"
        var $220=($219); //@line 979 "bufferedio.c"
        var $221=HEAP[$start]; //@line 979 "bufferedio.c"
        var $222=($221); //@line 979 "bufferedio.c"
        var $223=((($220) - ($222))&4294967295); //@line 979 "bufferedio.c"
        var $224=((($223))|0); //@line 979 "bufferedio.c"
        var $225=HEAP[$self_addr]; //@line 979 "bufferedio.c"
        var $226=(($225+44)&4294967295); //@line 979 "bufferedio.c"
        HEAP[$226]=$224; //@line 979 "bufferedio.c"
        __label__ = 63; break; //@line 979 "bufferedio.c"
      case 48: // $bb50
        var $227=HEAP[$s]; //@line 974 "bufferedio.c"
        var $228=HEAP[$end]; //@line 974 "bufferedio.c"
        var $229=($227) < ($228); //@line 974 "bufferedio.c"
        if ($229) { __label__ = 45; break; } else { __label__ = 49; break; } //@line 974 "bufferedio.c"
      case 49: // $bb51
        var $230=HEAP[$start]; //@line 983 "bufferedio.c"
        var $231=HEAP[$n]; //@line 983 "bufferedio.c"
        var $232=_PyString_FromStringAndSize($230, $231); //@line 983 "bufferedio.c"
        HEAP[$res]=$232; //@line 983 "bufferedio.c"
        var $233=HEAP[$res]; //@line 984 "bufferedio.c"
        var $234=($233)==0; //@line 984 "bufferedio.c"
        if ($234) { __label__ = 73; break; } else { __label__ = 50; break; } //@line 984 "bufferedio.c"
      case 50: // $bb52
        var $235=HEAP[$n]; //@line 986 "bufferedio.c"
        var $236=HEAP[$limit_addr]; //@line 986 "bufferedio.c"
        var $237=((($235))|0)==((($236))|0); //@line 986 "bufferedio.c"
        if ($237) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 986 "bufferedio.c"
      case 51: // $bb53
        var $238=HEAP[$n]; //@line 987 "bufferedio.c"
        var $239=((($238))|0); //@line 987 "bufferedio.c"
        var $240=HEAP[$self_addr]; //@line 987 "bufferedio.c"
        var $241=(($240+44)&4294967295); //@line 987 "bufferedio.c"
        HEAP[$241]=$239; //@line 987 "bufferedio.c"
        __label__ = 63; break; //@line 987 "bufferedio.c"
      case 52: // $bb54
        var $242=HEAP[$chunks]; //@line 990 "bufferedio.c"
        var $243=HEAP[$res]; //@line 990 "bufferedio.c"
        var $244=_PyList_Append($242, $243); //@line 990 "bufferedio.c"
        var $245=((($244))|0) < 0; //@line 990 "bufferedio.c"
        if ($245) { __label__ = 53; break; } else { __label__ = 57; break; } //@line 990 "bufferedio.c"
      case 53: // $bb55
        var $246=HEAP[$res]; //@line 991 "bufferedio.c"
        var $247=($246)!=0; //@line 991 "bufferedio.c"
        if ($247) { __label__ = 54; break; } else { __label__ = 56; break; } //@line 991 "bufferedio.c"
      case 54: // $bb56
        var $248=HEAP[$res]; //@line 991 "bufferedio.c"
        HEAP[$_py_tmp57]=$248; //@line 991 "bufferedio.c"
        HEAP[$res]=0; //@line 991 "bufferedio.c"
        var $249=HEAP[$_py_tmp57]; //@line 991 "bufferedio.c"
        var $250=(($249)&4294967295); //@line 991 "bufferedio.c"
        var $251=HEAP[$250]; //@line 991 "bufferedio.c"
        var $252=((($251) - 1)&4294967295); //@line 991 "bufferedio.c"
        var $253=HEAP[$_py_tmp57]; //@line 991 "bufferedio.c"
        var $254=(($253)&4294967295); //@line 991 "bufferedio.c"
        HEAP[$254]=$252; //@line 991 "bufferedio.c"
        var $255=HEAP[$_py_tmp57]; //@line 991 "bufferedio.c"
        var $256=(($255)&4294967295); //@line 991 "bufferedio.c"
        var $257=HEAP[$256]; //@line 991 "bufferedio.c"
        var $258=((($257))|0)==0; //@line 991 "bufferedio.c"
        if ($258) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 991 "bufferedio.c"
      case 55: // $bb58
        var $259=HEAP[$_py_tmp57]; //@line 991 "bufferedio.c"
        var $260=(($259+4)&4294967295); //@line 991 "bufferedio.c"
        var $261=HEAP[$260]; //@line 991 "bufferedio.c"
        var $262=(($261+24)&4294967295); //@line 991 "bufferedio.c"
        var $263=HEAP[$262]; //@line 991 "bufferedio.c"
        var $264=HEAP[$_py_tmp57]; //@line 991 "bufferedio.c"
        FUNCTION_TABLE[$263]($264); //@line 991 "bufferedio.c"
        __label__ = 56; break; //@line 991 "bufferedio.c"
      case 56: // $bb59
        __label__ = 73; break; //@line 991 "bufferedio.c"
      case 57: // $bb60
        var $265=HEAP[$res]; //@line 994 "bufferedio.c"
        var $266=($265)!=0; //@line 994 "bufferedio.c"
        if ($266) { __label__ = 58; break; } else { __label__ = 60; break; } //@line 994 "bufferedio.c"
      case 58: // $bb61
        var $267=HEAP[$res]; //@line 994 "bufferedio.c"
        HEAP[$_py_tmp62]=$267; //@line 994 "bufferedio.c"
        HEAP[$res]=0; //@line 994 "bufferedio.c"
        var $268=HEAP[$_py_tmp62]; //@line 994 "bufferedio.c"
        var $269=(($268)&4294967295); //@line 994 "bufferedio.c"
        var $270=HEAP[$269]; //@line 994 "bufferedio.c"
        var $271=((($270) - 1)&4294967295); //@line 994 "bufferedio.c"
        var $272=HEAP[$_py_tmp62]; //@line 994 "bufferedio.c"
        var $273=(($272)&4294967295); //@line 994 "bufferedio.c"
        HEAP[$273]=$271; //@line 994 "bufferedio.c"
        var $274=HEAP[$_py_tmp62]; //@line 994 "bufferedio.c"
        var $275=(($274)&4294967295); //@line 994 "bufferedio.c"
        var $276=HEAP[$275]; //@line 994 "bufferedio.c"
        var $277=((($276))|0)==0; //@line 994 "bufferedio.c"
        if ($277) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 994 "bufferedio.c"
      case 59: // $bb63
        var $278=HEAP[$_py_tmp62]; //@line 994 "bufferedio.c"
        var $279=(($278+4)&4294967295); //@line 994 "bufferedio.c"
        var $280=HEAP[$279]; //@line 994 "bufferedio.c"
        var $281=(($280+24)&4294967295); //@line 994 "bufferedio.c"
        var $282=HEAP[$281]; //@line 994 "bufferedio.c"
        var $283=HEAP[$_py_tmp62]; //@line 994 "bufferedio.c"
        FUNCTION_TABLE[$282]($283); //@line 994 "bufferedio.c"
        __label__ = 60; break; //@line 994 "bufferedio.c"
      case 60: // $bb64
        var $284=HEAP[$written]; //@line 995 "bufferedio.c"
        var $285=HEAP[$n]; //@line 995 "bufferedio.c"
        var $286=((($284) + ($285))&4294967295); //@line 995 "bufferedio.c"
        HEAP[$written]=$286; //@line 995 "bufferedio.c"
        var $287=HEAP[$limit_addr]; //@line 996 "bufferedio.c"
        var $288=((($287))|0) >= 0; //@line 996 "bufferedio.c"
        if ($288) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 996 "bufferedio.c"
      case 61: // $bb65
        var $289=HEAP[$limit_addr]; //@line 997 "bufferedio.c"
        var $290=HEAP[$n]; //@line 997 "bufferedio.c"
        var $291=((($289) - ($290))&4294967295); //@line 997 "bufferedio.c"
        HEAP[$limit_addr]=$291; //@line 997 "bufferedio.c"
        __label__ = 62; break; //@line 997 "bufferedio.c"
      case 62: // $bb66
        __label__ = 39; break; //@line 997 "bufferedio.c"
      case 63: // $found
        var $292=HEAP[$res]; //@line 1000 "bufferedio.c"
        var $293=($292)!=0; //@line 1000 "bufferedio.c"
        if ($293) { __label__ = 64; break; } else { __label__ = 69; break; } //@line 1000 "bufferedio.c"
      case 64: // $bb67
        var $294=HEAP[$chunks]; //@line 1000 "bufferedio.c"
        var $295=HEAP[$res]; //@line 1000 "bufferedio.c"
        var $296=_PyList_Append($294, $295); //@line 1000 "bufferedio.c"
        var $297=((($296))|0) < 0; //@line 1000 "bufferedio.c"
        if ($297) { __label__ = 65; break; } else { __label__ = 69; break; } //@line 1000 "bufferedio.c"
      case 65: // $bb68
        var $298=HEAP[$res]; //@line 1001 "bufferedio.c"
        var $299=($298)!=0; //@line 1001 "bufferedio.c"
        if ($299) { __label__ = 66; break; } else { __label__ = 68; break; } //@line 1001 "bufferedio.c"
      case 66: // $bb69
        var $300=HEAP[$res]; //@line 1001 "bufferedio.c"
        HEAP[$_py_tmp70]=$300; //@line 1001 "bufferedio.c"
        HEAP[$res]=0; //@line 1001 "bufferedio.c"
        var $301=HEAP[$_py_tmp70]; //@line 1001 "bufferedio.c"
        var $302=(($301)&4294967295); //@line 1001 "bufferedio.c"
        var $303=HEAP[$302]; //@line 1001 "bufferedio.c"
        var $304=((($303) - 1)&4294967295); //@line 1001 "bufferedio.c"
        var $305=HEAP[$_py_tmp70]; //@line 1001 "bufferedio.c"
        var $306=(($305)&4294967295); //@line 1001 "bufferedio.c"
        HEAP[$306]=$304; //@line 1001 "bufferedio.c"
        var $307=HEAP[$_py_tmp70]; //@line 1001 "bufferedio.c"
        var $308=(($307)&4294967295); //@line 1001 "bufferedio.c"
        var $309=HEAP[$308]; //@line 1001 "bufferedio.c"
        var $310=((($309))|0)==0; //@line 1001 "bufferedio.c"
        if ($310) { __label__ = 67; break; } else { __label__ = 68; break; } //@line 1001 "bufferedio.c"
      case 67: // $bb71
        var $311=HEAP[$_py_tmp70]; //@line 1001 "bufferedio.c"
        var $312=(($311+4)&4294967295); //@line 1001 "bufferedio.c"
        var $313=HEAP[$312]; //@line 1001 "bufferedio.c"
        var $314=(($313+24)&4294967295); //@line 1001 "bufferedio.c"
        var $315=HEAP[$314]; //@line 1001 "bufferedio.c"
        var $316=HEAP[$_py_tmp70]; //@line 1001 "bufferedio.c"
        FUNCTION_TABLE[$315]($316); //@line 1001 "bufferedio.c"
        __label__ = 68; break; //@line 1001 "bufferedio.c"
      case 68: // $bb72
        __label__ = 73; break; //@line 1001 "bufferedio.c"
      case 69: // $bb73
        var $317=HEAP[$res]; //@line 1004 "bufferedio.c"
        var $318=($317)!=0; //@line 1004 "bufferedio.c"
        if ($318) { __label__ = 70; break; } else { __label__ = 72; break; } //@line 1004 "bufferedio.c"
      case 70: // $bb74
        var $319=HEAP[$res]; //@line 1004 "bufferedio.c"
        HEAP[$_py_tmp75]=$319; //@line 1004 "bufferedio.c"
        HEAP[$res]=0; //@line 1004 "bufferedio.c"
        var $320=HEAP[$_py_tmp75]; //@line 1004 "bufferedio.c"
        var $321=(($320)&4294967295); //@line 1004 "bufferedio.c"
        var $322=HEAP[$321]; //@line 1004 "bufferedio.c"
        var $323=((($322) - 1)&4294967295); //@line 1004 "bufferedio.c"
        var $324=HEAP[$_py_tmp75]; //@line 1004 "bufferedio.c"
        var $325=(($324)&4294967295); //@line 1004 "bufferedio.c"
        HEAP[$325]=$323; //@line 1004 "bufferedio.c"
        var $326=HEAP[$_py_tmp75]; //@line 1004 "bufferedio.c"
        var $327=(($326)&4294967295); //@line 1004 "bufferedio.c"
        var $328=HEAP[$327]; //@line 1004 "bufferedio.c"
        var $329=((($328))|0)==0; //@line 1004 "bufferedio.c"
        if ($329) { __label__ = 71; break; } else { __label__ = 72; break; } //@line 1004 "bufferedio.c"
      case 71: // $bb76
        var $330=HEAP[$_py_tmp75]; //@line 1004 "bufferedio.c"
        var $331=(($330+4)&4294967295); //@line 1004 "bufferedio.c"
        var $332=HEAP[$331]; //@line 1004 "bufferedio.c"
        var $333=(($332+24)&4294967295); //@line 1004 "bufferedio.c"
        var $334=HEAP[$333]; //@line 1004 "bufferedio.c"
        var $335=HEAP[$_py_tmp75]; //@line 1004 "bufferedio.c"
        FUNCTION_TABLE[$334]($335); //@line 1004 "bufferedio.c"
        __label__ = 72; break; //@line 1004 "bufferedio.c"
      case 72: // $bb77
        var $336=HEAP[__PyIO_empty_bytes]; //@line 1005 "bufferedio.c"
        var $337=HEAP[$chunks]; //@line 1005 "bufferedio.c"
        var $338=__PyString_Join($336, $337); //@line 1005 "bufferedio.c"
        HEAP[$res]=$338; //@line 1005 "bufferedio.c"
        __label__ = 73; break; //@line 1007 "bufferedio.c"
      case 73: // $end78
        __label__ = 74; break; //@line 1009 "bufferedio.c"
      case 74: // $end_unlocked
        var $339=HEAP[$chunks]; //@line 1010 "bufferedio.c"
        var $340=($339)!=0; //@line 1010 "bufferedio.c"
        if ($340) { __label__ = 75; break; } else { __label__ = 77; break; } //@line 1010 "bufferedio.c"
      case 75: // $bb79
        var $341=HEAP[$chunks]; //@line 1010 "bufferedio.c"
        var $342=(($341)&4294967295); //@line 1010 "bufferedio.c"
        var $343=HEAP[$342]; //@line 1010 "bufferedio.c"
        var $344=((($343) - 1)&4294967295); //@line 1010 "bufferedio.c"
        var $345=HEAP[$chunks]; //@line 1010 "bufferedio.c"
        var $346=(($345)&4294967295); //@line 1010 "bufferedio.c"
        HEAP[$346]=$344; //@line 1010 "bufferedio.c"
        var $347=HEAP[$chunks]; //@line 1010 "bufferedio.c"
        var $348=(($347)&4294967295); //@line 1010 "bufferedio.c"
        var $349=HEAP[$348]; //@line 1010 "bufferedio.c"
        var $350=((($349))|0)==0; //@line 1010 "bufferedio.c"
        if ($350) { __label__ = 76; break; } else { __label__ = 77; break; } //@line 1010 "bufferedio.c"
      case 76: // $bb80
        var $351=HEAP[$chunks]; //@line 1010 "bufferedio.c"
        var $352=(($351+4)&4294967295); //@line 1010 "bufferedio.c"
        var $353=HEAP[$352]; //@line 1010 "bufferedio.c"
        var $354=(($353+24)&4294967295); //@line 1010 "bufferedio.c"
        var $355=HEAP[$354]; //@line 1010 "bufferedio.c"
        var $356=HEAP[$chunks]; //@line 1010 "bufferedio.c"
        FUNCTION_TABLE[$355]($356); //@line 1010 "bufferedio.c"
        __label__ = 77; break; //@line 1010 "bufferedio.c"
      case 77: // $bb81
        var $357=HEAP[$res]; //@line 1011 "bufferedio.c"
        HEAP[$0]=$357; //@line 1011 "bufferedio.c"
        __label__ = 78; break; //@line 1011 "bufferedio.c"
      case 78: // $bb82
        var $358=HEAP[$0]; //@line 912 "bufferedio.c"
        HEAP[$retval]=$358; //@line 912 "bufferedio.c"
        __label__ = 79; break; //@line 912 "bufferedio.c"
      case 79: // $return
        var $retval83=HEAP[$retval]; //@line 912 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval83; //@line 912 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_readline($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $limit=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$limit]=-1; //@line 1017 "bufferedio.c"
        var $1=HEAP[$self_addr]; //@line 1019 "bufferedio.c"
        var $2=(($1+12)&4294967295); //@line 1019 "bufferedio.c"
        var $3=HEAP[$2]; //@line 1019 "bufferedio.c"
        var $4=((($3))|0) <= 0; //@line 1019 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 1019 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 1019 "bufferedio.c"
        var $6=(($5+16)&4294967295); //@line 1019 "bufferedio.c"
        var $7=HEAP[$6]; //@line 1019 "bufferedio.c"
        var $8=((($7))|0)!=0; //@line 1019 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1019 "bufferedio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 1019 "bufferedio.c"
        _PyErr_SetString($9, ((__str11)&4294967295)); //@line 1019 "bufferedio.c"
        __label__ = 4; break; //@line 1019 "bufferedio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 1019 "bufferedio.c"
        _PyErr_SetString($10, ((__str12)&4294967295)); //@line 1019 "bufferedio.c"
        __label__ = 4; break; //@line 1019 "bufferedio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 1019 "bufferedio.c"
        __label__ = 8; break; //@line 1019 "bufferedio.c"
      case 5: // $bb4
        var $11=HEAP[$args_addr]; //@line 1020 "bufferedio.c"
        var $12=__PyArg_ParseTuple_SizeT($11, ((__str27)&4294967295), (FUNCTION_TABLE_OFFSET + 2), $limit); //@line 1020 "bufferedio.c"
        var $13=((($12))|0)==0; //@line 1020 "bufferedio.c"
        if ($13) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1020 "bufferedio.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 1021 "bufferedio.c"
        __label__ = 8; break; //@line 1021 "bufferedio.c"
      case 7: // $bb6
        var $14=HEAP[$limit]; //@line 1022 "bufferedio.c"
        var $15=HEAP[$self_addr]; //@line 1022 "bufferedio.c"
        var $16=__buffered_readline($15, $14); //@line 1022 "bufferedio.c"
        HEAP[$0]=$16; //@line 1022 "bufferedio.c"
        __label__ = 8; break; //@line 1022 "bufferedio.c"
      case 8: // $bb7
        var $17=HEAP[$0]; //@line 1019 "bufferedio.c"
        HEAP[$retval]=$17; //@line 1019 "bufferedio.c"
        __label__ = 9; break; //@line 1019 "bufferedio.c"
      case 9: // $return
        var $retval8=HEAP[$retval]; //@line 1019 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval8; //@line 1019 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_tell($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $iftmp_133=__stackBase__+12;
        var $0=__stackBase__+20;
        var $pos=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 1031 "bufferedio.c"
        var $2=(($1+12)&4294967295); //@line 1031 "bufferedio.c"
        var $3=HEAP[$2]; //@line 1031 "bufferedio.c"
        var $4=((($3))|0) <= 0; //@line 1031 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 1031 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 1031 "bufferedio.c"
        var $6=(($5+16)&4294967295); //@line 1031 "bufferedio.c"
        var $7=HEAP[$6]; //@line 1031 "bufferedio.c"
        var $8=((($7))|0)!=0; //@line 1031 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1031 "bufferedio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 1031 "bufferedio.c"
        _PyErr_SetString($9, ((__str11)&4294967295)); //@line 1031 "bufferedio.c"
        __label__ = 4; break; //@line 1031 "bufferedio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 1031 "bufferedio.c"
        _PyErr_SetString($10, ((__str12)&4294967295)); //@line 1031 "bufferedio.c"
        __label__ = 4; break; //@line 1031 "bufferedio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 1031 "bufferedio.c"
        __label__ = 15; break; //@line 1031 "bufferedio.c"
      case 5: // $bb4
        var $11=HEAP[$self_addr]; //@line 1032 "bufferedio.c"
        var $12=__buffered_raw_tell($11); //@line 1032 "bufferedio.c"
        HEAP[$pos]=$12; //@line 1032 "bufferedio.c"
        var $13=HEAP[$pos]; //@line 1033 "bufferedio.c"
        var $14=reSign(($13), 64, 0)==-1; //@line 1033 "bufferedio.c"
        if ($14) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1033 "bufferedio.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 1034 "bufferedio.c"
        __label__ = 15; break; //@line 1034 "bufferedio.c"
      case 7: // $bb6
        var $15=HEAP[$self_addr]; //@line 1035 "bufferedio.c"
        var $16=(($15+20)&4294967295); //@line 1035 "bufferedio.c"
        var $17=HEAP[$16]; //@line 1035 "bufferedio.c"
        var $18=((($17))|0)==0; //@line 1035 "bufferedio.c"
        if ($18) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 1035 "bufferedio.c"
      case 8: // $bb7
        var $19=HEAP[$self_addr]; //@line 1035 "bufferedio.c"
        var $20=(($19+60)&4294967295); //@line 1035 "bufferedio.c"
        var $21=HEAP[$20]; //@line 1035 "bufferedio.c"
        var $22=reSign(($21), 64, 0)!=-1; //@line 1035 "bufferedio.c"
        if ($22) { __label__ = 11; break; } else { __label__ = 9; break; } //@line 1035 "bufferedio.c"
      case 9: // $bb8
        var $23=HEAP[$self_addr]; //@line 1035 "bufferedio.c"
        var $24=(($23+24)&4294967295); //@line 1035 "bufferedio.c"
        var $25=HEAP[$24]; //@line 1035 "bufferedio.c"
        var $26=((($25))|0)==0; //@line 1035 "bufferedio.c"
        if ($26) { __label__ = 13; break; } else { __label__ = 10; break; } //@line 1035 "bufferedio.c"
      case 10: // $bb9
        var $27=HEAP[$self_addr]; //@line 1035 "bufferedio.c"
        var $28=(($27+76)&4294967295); //@line 1035 "bufferedio.c"
        var $29=HEAP[$28]; //@line 1035 "bufferedio.c"
        var $30=reSign(($29), 64, 0)!=-1; //@line 1035 "bufferedio.c"
        if ($30) { __label__ = 11; break; } else { __label__ = 13; break; } //@line 1035 "bufferedio.c"
      case 11: // $bb10
        var $31=HEAP[$self_addr]; //@line 1035 "bufferedio.c"
        var $32=(($31+52)&4294967295); //@line 1035 "bufferedio.c"
        var $33=HEAP[$32]; //@line 1035 "bufferedio.c"
        var $34=reSign(($33), 64, 0) < 0; //@line 1035 "bufferedio.c"
        if ($34) { __label__ = 13; break; } else { __label__ = 12; break; } //@line 1035 "bufferedio.c"
      case 12: // $bb11
        var $35=HEAP[$self_addr]; //@line 1035 "bufferedio.c"
        var $36=(($35+52)&4294967295); //@line 1035 "bufferedio.c"
        var $37=HEAP[$36]; //@line 1035 "bufferedio.c"
        var $38=HEAP[$self_addr]; //@line 1035 "bufferedio.c"
        var $39=(($38+44)&4294967295); //@line 1035 "bufferedio.c"
        var $40=HEAP[$39]; //@line 1035 "bufferedio.c"
        var $41=($37) - ($40); //@line 1035 "bufferedio.c"
        HEAP[$iftmp_133]=$41; //@line 1035 "bufferedio.c"
        __label__ = 14; break; //@line 1035 "bufferedio.c"
      case 13: // $bb12
        HEAP[$iftmp_133]=0; //@line 1035 "bufferedio.c"
        __label__ = 14; break; //@line 1035 "bufferedio.c"
      case 14: // $bb13
        var $42=HEAP[$pos]; //@line 1035 "bufferedio.c"
        var $43=HEAP[$iftmp_133]; //@line 1035 "bufferedio.c"
        var $44=($42) - ($43); //@line 1035 "bufferedio.c"
        HEAP[$pos]=$44; //@line 1035 "bufferedio.c"
        var $45=HEAP[$pos]; //@line 1037 "bufferedio.c"
        var $46=_PyLong_FromLongLong($45); //@line 1037 "bufferedio.c"
        HEAP[$0]=$46; //@line 1037 "bufferedio.c"
        __label__ = 15; break; //@line 1037 "bufferedio.c"
      case 15: // $bb14
        var $47=HEAP[$0]; //@line 1031 "bufferedio.c"
        HEAP[$retval]=$47; //@line 1031 "bufferedio.c"
        __label__ = 16; break; //@line 1031 "bufferedio.c"
      case 16: // $return
        var $retval15=HEAP[$retval]; //@line 1031 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval15; //@line 1031 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_seek($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 105; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 105);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $iftmp_150=__stackBase__+12;
        var $iftmp_148=__stackBase__+20;
        var $iftmp_146=__stackBase__+28;
        var $iftmp_145=__stackBase__+36;
        var $iftmp_140=__stackBase__+44;
        var $0=__stackBase__+45;
        var $target=__stackBase__+49;
        var $n=__stackBase__+57;
        var $whence=__stackBase__+65;
        var $targetobj=__stackBase__+69;
        var $res=__stackBase__+73;
        var $current=__stackBase__+77;
        var $avail=__stackBase__+85;
        var $offset=__stackBase__+93;
        var $_py_tmp=__stackBase__+101;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$whence]=0; //@line 1044 "bufferedio.c"
        HEAP[$res]=0; //@line 1045 "bufferedio.c"
        var $1=HEAP[$self_addr]; //@line 1047 "bufferedio.c"
        var $2=(($1+12)&4294967295); //@line 1047 "bufferedio.c"
        var $3=HEAP[$2]; //@line 1047 "bufferedio.c"
        var $4=((($3))|0) <= 0; //@line 1047 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 1047 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 1047 "bufferedio.c"
        var $6=(($5+16)&4294967295); //@line 1047 "bufferedio.c"
        var $7=HEAP[$6]; //@line 1047 "bufferedio.c"
        var $8=((($7))|0)!=0; //@line 1047 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1047 "bufferedio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 1047 "bufferedio.c"
        _PyErr_SetString($9, ((__str11)&4294967295)); //@line 1047 "bufferedio.c"
        __label__ = 4; break; //@line 1047 "bufferedio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 1047 "bufferedio.c"
        _PyErr_SetString($10, ((__str12)&4294967295)); //@line 1047 "bufferedio.c"
        __label__ = 4; break; //@line 1047 "bufferedio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 1047 "bufferedio.c"
        __label__ = 62; break; //@line 1047 "bufferedio.c"
      case 5: // $bb4
        var $11=HEAP[$args_addr]; //@line 1048 "bufferedio.c"
        var $12=__PyArg_ParseTuple_SizeT($11, ((__str28)&4294967295), $targetobj, $whence); //@line 1048 "bufferedio.c"
        var $13=((($12))|0)==0; //@line 1048 "bufferedio.c"
        if ($13) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1048 "bufferedio.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 1049 "bufferedio.c"
        __label__ = 62; break; //@line 1049 "bufferedio.c"
      case 7: // $bb6
        var $14=HEAP[$whence]; //@line 1051 "bufferedio.c"
        var $15=((($14))|0) < 0; //@line 1051 "bufferedio.c"
        if ($15) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 1051 "bufferedio.c"
      case 8: // $bb7
        var $16=HEAP[$whence]; //@line 1051 "bufferedio.c"
        var $17=((($16))|0) > 2; //@line 1051 "bufferedio.c"
        if ($17) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1051 "bufferedio.c"
      case 9: // $bb8
        var $18=HEAP[$whence]; //@line 1052 "bufferedio.c"
        var $19=HEAP[_PyExc_ValueError]; //@line 1052 "bufferedio.c"
        var $20=_PyErr_Format($19, ((__str29)&4294967295), $18); //@line 1052 "bufferedio.c"
        HEAP[$0]=0; //@line 1054 "bufferedio.c"
        __label__ = 62; break; //@line 1054 "bufferedio.c"
      case 10: // $bb9
        var $21=HEAP[$self_addr]; //@line 1057 "bufferedio.c"
        var $22=(($21+28)&4294967295); //@line 1057 "bufferedio.c"
        var $23=HEAP[$22]; //@line 1057 "bufferedio.c"
        var $24=((($23))|0)!=0; //@line 1057 "bufferedio.c"
        if ($24) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1057 "bufferedio.c"
      case 11: // $bb10
        var $25=HEAP[$self_addr]; //@line 1057 "bufferedio.c"
        var $26=(($25+8)&4294967295); //@line 1057 "bufferedio.c"
        var $27=HEAP[$26]; //@line 1057 "bufferedio.c"
        var $28=__PyFileIO_closed($27); //@line 1057 "bufferedio.c"
        var $29=((($28))|0)!=0; //@line 1057 "bufferedio.c"
        var $30=unSign(($29), 1, 0); //@line 1057 "bufferedio.c"
        HEAP[$iftmp_140]=$30; //@line 1057 "bufferedio.c"
        __label__ = 13; break; //@line 1057 "bufferedio.c"
      case 12: // $bb11
        var $31=HEAP[$self_addr]; //@line 1057 "bufferedio.c"
        var $32=_buffered_closed($31); //@line 1057 "bufferedio.c"
        var $33=((($32))|0)!=0; //@line 1057 "bufferedio.c"
        var $34=unSign(($33), 1, 0); //@line 1057 "bufferedio.c"
        HEAP[$iftmp_140]=$34; //@line 1057 "bufferedio.c"
        __label__ = 13; break; //@line 1057 "bufferedio.c"
      case 13: // $bb12
        var $35=HEAP[$iftmp_140]; //@line 1057 "bufferedio.c"
        var $toBool=reSign(($35), 8, 0)!=0; //@line 1057 "bufferedio.c"
        if ($toBool) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1057 "bufferedio.c"
      case 14: // $bb13
        var $36=HEAP[_PyExc_ValueError]; //@line 1057 "bufferedio.c"
        _PyErr_SetString($36, ((__str30)&4294967295)); //@line 1057 "bufferedio.c"
        HEAP[$0]=0; //@line 1057 "bufferedio.c"
        __label__ = 62; break; //@line 1057 "bufferedio.c"
      case 15: // $bb14
        var $37=HEAP[_PyExc_ValueError]; //@line 1059 "bufferedio.c"
        var $38=HEAP[$targetobj]; //@line 1059 "bufferedio.c"
        var $39=_PyNumber_AsOff_t($38, $37); //@line 1059 "bufferedio.c"
        HEAP[$target]=$39; //@line 1059 "bufferedio.c"
        var $40=HEAP[$target]; //@line 1060 "bufferedio.c"
        var $41=reSign(($40), 64, 0)==-1; //@line 1060 "bufferedio.c"
        if ($41) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 1060 "bufferedio.c"
      case 16: // $bb15
        var $42=_PyErr_Occurred(); //@line 1060 "bufferedio.c"
        var $43=($42)!=0; //@line 1060 "bufferedio.c"
        if ($43) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 1060 "bufferedio.c"
      case 17: // $bb16
        HEAP[$0]=0; //@line 1061 "bufferedio.c"
        __label__ = 62; break; //@line 1061 "bufferedio.c"
      case 18: // $bb17
        var $44=HEAP[$whence]; //@line 1063 "bufferedio.c"
        var $45=((($44))|0)!=2; //@line 1063 "bufferedio.c"
        if ($45) { __label__ = 19; break; } else { __label__ = 42; break; } //@line 1063 "bufferedio.c"
      case 19: // $bb18
        var $46=HEAP[$self_addr]; //@line 1063 "bufferedio.c"
        var $47=(($46+20)&4294967295); //@line 1063 "bufferedio.c"
        var $48=HEAP[$47]; //@line 1063 "bufferedio.c"
        var $49=((($48))|0)!=0; //@line 1063 "bufferedio.c"
        if ($49) { __label__ = 20; break; } else { __label__ = 42; break; } //@line 1063 "bufferedio.c"
      case 20: // $bb19
        var $50=HEAP[$self_addr]; //@line 1071 "bufferedio.c"
        var $51=(($50+32)&4294967295); //@line 1071 "bufferedio.c"
        var $52=HEAP[$51]; //@line 1071 "bufferedio.c"
        var $53=reSign(($52), 64, 0)!=-1; //@line 1071 "bufferedio.c"
        if ($53) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 1071 "bufferedio.c"
      case 21: // $bb20
        var $54=HEAP[$self_addr]; //@line 1071 "bufferedio.c"
        var $55=(($54+32)&4294967295); //@line 1071 "bufferedio.c"
        var $56=HEAP[$55]; //@line 1071 "bufferedio.c"
        HEAP[$iftmp_145]=$56; //@line 1071 "bufferedio.c"
        __label__ = 23; break; //@line 1071 "bufferedio.c"
      case 22: // $bb21
        var $57=HEAP[$self_addr]; //@line 1071 "bufferedio.c"
        var $58=__buffered_raw_tell($57); //@line 1071 "bufferedio.c"
        HEAP[$iftmp_145]=$58; //@line 1071 "bufferedio.c"
        __label__ = 23; break; //@line 1071 "bufferedio.c"
      case 23: // $bb22
        var $59=HEAP[$iftmp_145]; //@line 1071 "bufferedio.c"
        HEAP[$current]=$59; //@line 1071 "bufferedio.c"
        var $60=HEAP[$self_addr]; //@line 1072 "bufferedio.c"
        var $61=(($60+20)&4294967295); //@line 1072 "bufferedio.c"
        var $62=HEAP[$61]; //@line 1072 "bufferedio.c"
        var $63=((($62))|0)==0; //@line 1072 "bufferedio.c"
        if ($63) { __label__ = 27; break; } else { __label__ = 24; break; } //@line 1072 "bufferedio.c"
      case 24: // $bb23
        var $64=HEAP[$self_addr]; //@line 1072 "bufferedio.c"
        var $65=(($64+20)&4294967295); //@line 1072 "bufferedio.c"
        var $66=HEAP[$65]; //@line 1072 "bufferedio.c"
        var $67=((($66))|0)==0; //@line 1072 "bufferedio.c"
        if ($67) { __label__ = 27; break; } else { __label__ = 25; break; } //@line 1072 "bufferedio.c"
      case 25: // $bb24
        var $68=HEAP[$self_addr]; //@line 1072 "bufferedio.c"
        var $69=(($68+60)&4294967295); //@line 1072 "bufferedio.c"
        var $70=HEAP[$69]; //@line 1072 "bufferedio.c"
        var $71=reSign(($70), 64, 0)==-1; //@line 1072 "bufferedio.c"
        if ($71) { __label__ = 27; break; } else { __label__ = 26; break; } //@line 1072 "bufferedio.c"
      case 26: // $bb25
        var $72=HEAP[$self_addr]; //@line 1072 "bufferedio.c"
        var $73=(($72+60)&4294967295); //@line 1072 "bufferedio.c"
        var $74=HEAP[$73]; //@line 1072 "bufferedio.c"
        var $75=HEAP[$self_addr]; //@line 1072 "bufferedio.c"
        var $76=(($75+44)&4294967295); //@line 1072 "bufferedio.c"
        var $77=HEAP[$76]; //@line 1072 "bufferedio.c"
        var $78=($74) - ($77); //@line 1072 "bufferedio.c"
        HEAP[$iftmp_146]=$78; //@line 1072 "bufferedio.c"
        __label__ = 28; break; //@line 1072 "bufferedio.c"
      case 27: // $bb26
        HEAP[$iftmp_146]=0; //@line 1072 "bufferedio.c"
        __label__ = 28; break; //@line 1072 "bufferedio.c"
      case 28: // $bb27
        var $79=HEAP[$iftmp_146]; //@line 1072 "bufferedio.c"
        HEAP[$avail]=$79; //@line 1072 "bufferedio.c"
        var $80=HEAP[$avail]; //@line 1073 "bufferedio.c"
        var $81=reSign(($80), 64, 0) > 0; //@line 1073 "bufferedio.c"
        if ($81) { __label__ = 29; break; } else { __label__ = 42; break; } //@line 1073 "bufferedio.c"
      case 29: // $bb28
        var $82=HEAP[$whence]; //@line 1075 "bufferedio.c"
        var $83=((($82))|0)==0; //@line 1075 "bufferedio.c"
        if ($83) { __label__ = 30; break; } else { __label__ = 38; break; } //@line 1075 "bufferedio.c"
      case 30: // $bb29
        var $84=HEAP[$self_addr]; //@line 1076 "bufferedio.c"
        var $85=(($84+20)&4294967295); //@line 1076 "bufferedio.c"
        var $86=HEAP[$85]; //@line 1076 "bufferedio.c"
        var $87=((($86))|0)==0; //@line 1076 "bufferedio.c"
        if ($87) { __label__ = 32; break; } else { __label__ = 31; break; } //@line 1076 "bufferedio.c"
      case 31: // $bb30
        var $88=HEAP[$self_addr]; //@line 1076 "bufferedio.c"
        var $89=(($88+60)&4294967295); //@line 1076 "bufferedio.c"
        var $90=HEAP[$89]; //@line 1076 "bufferedio.c"
        var $91=reSign(($90), 64, 0)!=-1; //@line 1076 "bufferedio.c"
        if ($91) { __label__ = 34; break; } else { __label__ = 32; break; } //@line 1076 "bufferedio.c"
      case 32: // $bb31
        var $92=HEAP[$self_addr]; //@line 1076 "bufferedio.c"
        var $93=(($92+24)&4294967295); //@line 1076 "bufferedio.c"
        var $94=HEAP[$93]; //@line 1076 "bufferedio.c"
        var $95=((($94))|0)==0; //@line 1076 "bufferedio.c"
        if ($95) { __label__ = 36; break; } else { __label__ = 33; break; } //@line 1076 "bufferedio.c"
      case 33: // $bb32
        var $96=HEAP[$self_addr]; //@line 1076 "bufferedio.c"
        var $97=(($96+76)&4294967295); //@line 1076 "bufferedio.c"
        var $98=HEAP[$97]; //@line 1076 "bufferedio.c"
        var $99=reSign(($98), 64, 0)!=-1; //@line 1076 "bufferedio.c"
        if ($99) { __label__ = 34; break; } else { __label__ = 36; break; } //@line 1076 "bufferedio.c"
      case 34: // $bb33
        var $100=HEAP[$self_addr]; //@line 1076 "bufferedio.c"
        var $101=(($100+52)&4294967295); //@line 1076 "bufferedio.c"
        var $102=HEAP[$101]; //@line 1076 "bufferedio.c"
        var $103=reSign(($102), 64, 0) < 0; //@line 1076 "bufferedio.c"
        if ($103) { __label__ = 36; break; } else { __label__ = 35; break; } //@line 1076 "bufferedio.c"
      case 35: // $bb34
        var $104=HEAP[$self_addr]; //@line 1076 "bufferedio.c"
        var $105=(($104+52)&4294967295); //@line 1076 "bufferedio.c"
        var $106=HEAP[$105]; //@line 1076 "bufferedio.c"
        var $107=HEAP[$self_addr]; //@line 1076 "bufferedio.c"
        var $108=(($107+44)&4294967295); //@line 1076 "bufferedio.c"
        var $109=HEAP[$108]; //@line 1076 "bufferedio.c"
        var $110=($106) - ($109); //@line 1076 "bufferedio.c"
        HEAP[$iftmp_148]=$110; //@line 1076 "bufferedio.c"
        __label__ = 37; break; //@line 1076 "bufferedio.c"
      case 36: // $bb35
        HEAP[$iftmp_148]=0; //@line 1076 "bufferedio.c"
        __label__ = 37; break; //@line 1076 "bufferedio.c"
      case 37: // $bb36
        var $111=HEAP[$current]; //@line 1076 "bufferedio.c"
        var $112=HEAP[$iftmp_148]; //@line 1076 "bufferedio.c"
        var $113=($111) - ($112); //@line 1076 "bufferedio.c"
        var $114=HEAP[$target]; //@line 1076 "bufferedio.c"
        var $115=($114) - ($113); //@line 1076 "bufferedio.c"
        HEAP[$offset]=$115; //@line 1076 "bufferedio.c"
        __label__ = 39; break; //@line 1076 "bufferedio.c"
      case 38: // $bb37
        var $116=HEAP[$target]; //@line 1078 "bufferedio.c"
        HEAP[$offset]=$116; //@line 1078 "bufferedio.c"
        __label__ = 39; break; //@line 1078 "bufferedio.c"
      case 39: // $bb38
        var $117=HEAP[$self_addr]; //@line 1079 "bufferedio.c"
        var $118=(($117+44)&4294967295); //@line 1079 "bufferedio.c"
        var $119=HEAP[$118]; //@line 1079 "bufferedio.c"
        var $120=0 - ($119); //@line 1079 "bufferedio.c"
        var $121=HEAP[$offset]; //@line 1079 "bufferedio.c"
        var $122=reSign(($120), 64, 0) <= reSign(($121), 64, 0); //@line 1079 "bufferedio.c"
        if ($122) { __label__ = 40; break; } else { __label__ = 42; break; } //@line 1079 "bufferedio.c"
      case 40: // $bb39
        var $123=HEAP[$offset]; //@line 1079 "bufferedio.c"
        var $124=HEAP[$avail]; //@line 1079 "bufferedio.c"
        var $125=reSign(($123), 64, 0) <= reSign(($124), 64, 0); //@line 1079 "bufferedio.c"
        if ($125) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 1079 "bufferedio.c"
      case 41: // $bb40
        var $126=HEAP[$self_addr]; //@line 1080 "bufferedio.c"
        var $127=(($126+44)&4294967295); //@line 1080 "bufferedio.c"
        var $128=HEAP[$127]; //@line 1080 "bufferedio.c"
        var $129=HEAP[$offset]; //@line 1080 "bufferedio.c"
        var $130=($128) + ($129); //@line 1080 "bufferedio.c"
        var $131=HEAP[$self_addr]; //@line 1080 "bufferedio.c"
        var $132=(($131+44)&4294967295); //@line 1080 "bufferedio.c"
        HEAP[$132]=$130; //@line 1080 "bufferedio.c"
        var $133=HEAP[$current]; //@line 1081 "bufferedio.c"
        var $134=HEAP[$avail]; //@line 1081 "bufferedio.c"
        var $135=($133) - ($134); //@line 1081 "bufferedio.c"
        var $136=HEAP[$offset]; //@line 1081 "bufferedio.c"
        var $137=($135) + ($136); //@line 1081 "bufferedio.c"
        var $138=_PyLong_FromLongLong($137); //@line 1081 "bufferedio.c"
        HEAP[$0]=$138; //@line 1081 "bufferedio.c"
        __label__ = 62; break; //@line 1081 "bufferedio.c"
      case 42: // $bb41
        var $139=HEAP[$self_addr]; //@line 1090 "bufferedio.c"
        var $140=(($139+24)&4294967295); //@line 1090 "bufferedio.c"
        var $141=HEAP[$140]; //@line 1090 "bufferedio.c"
        var $142=((($141))|0)!=0; //@line 1090 "bufferedio.c"
        if ($142) { __label__ = 43; break; } else { __label__ = 48; break; } //@line 1090 "bufferedio.c"
      case 43: // $bb42
        var $143=HEAP[$self_addr]; //@line 1091 "bufferedio.c"
        var $144=__bufferedwriter_flush_unlocked($143, 0); //@line 1091 "bufferedio.c"
        HEAP[$res]=$144; //@line 1091 "bufferedio.c"
        var $145=HEAP[$res]; //@line 1092 "bufferedio.c"
        var $146=($145)==0; //@line 1092 "bufferedio.c"
        if ($146) { __label__ = 61; break; } else { __label__ = 44; break; } //@line 1092 "bufferedio.c"
      case 44: // $bb43
        var $147=HEAP[$res]; //@line 1094 "bufferedio.c"
        var $148=($147)!=0; //@line 1094 "bufferedio.c"
        if ($148) { __label__ = 45; break; } else { __label__ = 47; break; } //@line 1094 "bufferedio.c"
      case 45: // $bb44
        var $149=HEAP[$res]; //@line 1094 "bufferedio.c"
        HEAP[$_py_tmp]=$149; //@line 1094 "bufferedio.c"
        HEAP[$res]=0; //@line 1094 "bufferedio.c"
        var $150=HEAP[$_py_tmp]; //@line 1094 "bufferedio.c"
        var $151=(($150)&4294967295); //@line 1094 "bufferedio.c"
        var $152=HEAP[$151]; //@line 1094 "bufferedio.c"
        var $153=((($152) - 1)&4294967295); //@line 1094 "bufferedio.c"
        var $154=HEAP[$_py_tmp]; //@line 1094 "bufferedio.c"
        var $155=(($154)&4294967295); //@line 1094 "bufferedio.c"
        HEAP[$155]=$153; //@line 1094 "bufferedio.c"
        var $156=HEAP[$_py_tmp]; //@line 1094 "bufferedio.c"
        var $157=(($156)&4294967295); //@line 1094 "bufferedio.c"
        var $158=HEAP[$157]; //@line 1094 "bufferedio.c"
        var $159=((($158))|0)==0; //@line 1094 "bufferedio.c"
        if ($159) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 1094 "bufferedio.c"
      case 46: // $bb45
        var $160=HEAP[$_py_tmp]; //@line 1094 "bufferedio.c"
        var $161=(($160+4)&4294967295); //@line 1094 "bufferedio.c"
        var $162=HEAP[$161]; //@line 1094 "bufferedio.c"
        var $163=(($162+24)&4294967295); //@line 1094 "bufferedio.c"
        var $164=HEAP[$163]; //@line 1094 "bufferedio.c"
        var $165=HEAP[$_py_tmp]; //@line 1094 "bufferedio.c"
        FUNCTION_TABLE[$164]($165); //@line 1094 "bufferedio.c"
        __label__ = 47; break; //@line 1094 "bufferedio.c"
      case 47: // $bb46
        var $166=HEAP[$self_addr]; //@line 1095 "bufferedio.c"
        __bufferedwriter_reset_buf($166); //@line 1095 "bufferedio.c"
        __label__ = 48; break; //@line 1095 "bufferedio.c"
      case 48: // $bb47
        var $167=HEAP[$whence]; //@line 1099 "bufferedio.c"
        var $168=((($167))|0)==1; //@line 1099 "bufferedio.c"
        if ($168) { __label__ = 49; break; } else { __label__ = 57; break; } //@line 1099 "bufferedio.c"
      case 49: // $bb48
        var $169=HEAP[$self_addr]; //@line 1100 "bufferedio.c"
        var $170=(($169+20)&4294967295); //@line 1100 "bufferedio.c"
        var $171=HEAP[$170]; //@line 1100 "bufferedio.c"
        var $172=((($171))|0)==0; //@line 1100 "bufferedio.c"
        if ($172) { __label__ = 51; break; } else { __label__ = 50; break; } //@line 1100 "bufferedio.c"
      case 50: // $bb49
        var $173=HEAP[$self_addr]; //@line 1100 "bufferedio.c"
        var $174=(($173+60)&4294967295); //@line 1100 "bufferedio.c"
        var $175=HEAP[$174]; //@line 1100 "bufferedio.c"
        var $176=reSign(($175), 64, 0)!=-1; //@line 1100 "bufferedio.c"
        if ($176) { __label__ = 53; break; } else { __label__ = 51; break; } //@line 1100 "bufferedio.c"
      case 51: // $bb50
        var $177=HEAP[$self_addr]; //@line 1100 "bufferedio.c"
        var $178=(($177+24)&4294967295); //@line 1100 "bufferedio.c"
        var $179=HEAP[$178]; //@line 1100 "bufferedio.c"
        var $180=((($179))|0)==0; //@line 1100 "bufferedio.c"
        if ($180) { __label__ = 55; break; } else { __label__ = 52; break; } //@line 1100 "bufferedio.c"
      case 52: // $bb51
        var $181=HEAP[$self_addr]; //@line 1100 "bufferedio.c"
        var $182=(($181+76)&4294967295); //@line 1100 "bufferedio.c"
        var $183=HEAP[$182]; //@line 1100 "bufferedio.c"
        var $184=reSign(($183), 64, 0)!=-1; //@line 1100 "bufferedio.c"
        if ($184) { __label__ = 53; break; } else { __label__ = 55; break; } //@line 1100 "bufferedio.c"
      case 53: // $bb52
        var $185=HEAP[$self_addr]; //@line 1100 "bufferedio.c"
        var $186=(($185+52)&4294967295); //@line 1100 "bufferedio.c"
        var $187=HEAP[$186]; //@line 1100 "bufferedio.c"
        var $188=reSign(($187), 64, 0) < 0; //@line 1100 "bufferedio.c"
        if ($188) { __label__ = 55; break; } else { __label__ = 54; break; } //@line 1100 "bufferedio.c"
      case 54: // $bb53
        var $189=HEAP[$self_addr]; //@line 1100 "bufferedio.c"
        var $190=(($189+52)&4294967295); //@line 1100 "bufferedio.c"
        var $191=HEAP[$190]; //@line 1100 "bufferedio.c"
        var $192=HEAP[$self_addr]; //@line 1100 "bufferedio.c"
        var $193=(($192+44)&4294967295); //@line 1100 "bufferedio.c"
        var $194=HEAP[$193]; //@line 1100 "bufferedio.c"
        var $195=($191) - ($194); //@line 1100 "bufferedio.c"
        HEAP[$iftmp_150]=$195; //@line 1100 "bufferedio.c"
        __label__ = 56; break; //@line 1100 "bufferedio.c"
      case 55: // $bb54
        HEAP[$iftmp_150]=0; //@line 1100 "bufferedio.c"
        __label__ = 56; break; //@line 1100 "bufferedio.c"
      case 56: // $bb55
        var $196=HEAP[$target]; //@line 1100 "bufferedio.c"
        var $197=HEAP[$iftmp_150]; //@line 1100 "bufferedio.c"
        var $198=($196) - ($197); //@line 1100 "bufferedio.c"
        HEAP[$target]=$198; //@line 1100 "bufferedio.c"
        __label__ = 57; break; //@line 1100 "bufferedio.c"
      case 57: // $bb56
        var $199=HEAP[$whence]; //@line 1101 "bufferedio.c"
        var $200=HEAP[$self_addr]; //@line 1101 "bufferedio.c"
        var $201=HEAP[$target]; //@line 1101 "bufferedio.c"
        var $202=__buffered_raw_seek($200, $201, $199); //@line 1101 "bufferedio.c"
        HEAP[$n]=$202; //@line 1101 "bufferedio.c"
        var $203=HEAP[$n]; //@line 1102 "bufferedio.c"
        var $204=reSign(($203), 64, 0)==-1; //@line 1102 "bufferedio.c"
        if ($204) { __label__ = 61; break; } else { __label__ = 58; break; } //@line 1102 "bufferedio.c"
      case 58: // $bb57
        var $205=HEAP[$self_addr]; //@line 1104 "bufferedio.c"
        var $206=(($205+52)&4294967295); //@line 1104 "bufferedio.c"
        HEAP[$206]=-1; //@line 1104 "bufferedio.c"
        var $207=HEAP[$n]; //@line 1105 "bufferedio.c"
        var $208=_PyLong_FromLongLong($207); //@line 1105 "bufferedio.c"
        HEAP[$res]=$208; //@line 1105 "bufferedio.c"
        var $209=HEAP[$res]; //@line 1106 "bufferedio.c"
        var $210=($209)!=0; //@line 1106 "bufferedio.c"
        if ($210) { __label__ = 59; break; } else { __label__ = 61; break; } //@line 1106 "bufferedio.c"
      case 59: // $bb58
        var $211=HEAP[$self_addr]; //@line 1106 "bufferedio.c"
        var $212=(($211+20)&4294967295); //@line 1106 "bufferedio.c"
        var $213=HEAP[$212]; //@line 1106 "bufferedio.c"
        var $214=((($213))|0)!=0; //@line 1106 "bufferedio.c"
        if ($214) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 1106 "bufferedio.c"
      case 60: // $bb59
        var $215=HEAP[$self_addr]; //@line 1107 "bufferedio.c"
        __bufferedreader_reset_buf($215); //@line 1107 "bufferedio.c"
        __label__ = 61; break; //@line 1109 "bufferedio.c"
      case 61: // $end
        var $216=HEAP[$res]; //@line 1111 "bufferedio.c"
        HEAP[$0]=$216; //@line 1111 "bufferedio.c"
        __label__ = 62; break; //@line 1111 "bufferedio.c"
      case 62: // $bb60
        var $217=HEAP[$0]; //@line 1047 "bufferedio.c"
        HEAP[$retval]=$217; //@line 1047 "bufferedio.c"
        __label__ = 63; break; //@line 1047 "bufferedio.c"
      case 63: // $return
        var $retval61=HEAP[$retval]; //@line 1047 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval61; //@line 1047 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_truncate($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $iftmp_155=__stackBase__+12;
        var $0=__stackBase__+20;
        var $pos=__stackBase__+24;
        var $res=__stackBase__+28;
        var $_py_tmp=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$pos]=__Py_NoneStruct; //@line 1117 "bufferedio.c"
        HEAP[$res]=0; //@line 1118 "bufferedio.c"
        var $1=HEAP[$self_addr]; //@line 1120 "bufferedio.c"
        var $2=(($1+12)&4294967295); //@line 1120 "bufferedio.c"
        var $3=HEAP[$2]; //@line 1120 "bufferedio.c"
        var $4=((($3))|0) <= 0; //@line 1120 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 1120 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 1120 "bufferedio.c"
        var $6=(($5+16)&4294967295); //@line 1120 "bufferedio.c"
        var $7=HEAP[$6]; //@line 1120 "bufferedio.c"
        var $8=((($7))|0)!=0; //@line 1120 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1120 "bufferedio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 1120 "bufferedio.c"
        _PyErr_SetString($9, ((__str11)&4294967295)); //@line 1120 "bufferedio.c"
        __label__ = 4; break; //@line 1120 "bufferedio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 1120 "bufferedio.c"
        _PyErr_SetString($10, ((__str12)&4294967295)); //@line 1120 "bufferedio.c"
        __label__ = 4; break; //@line 1120 "bufferedio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 1120 "bufferedio.c"
        __label__ = 27; break; //@line 1120 "bufferedio.c"
      case 5: // $bb4
        var $11=HEAP[$args_addr]; //@line 1121 "bufferedio.c"
        var $12=__PyArg_ParseTuple_SizeT($11, ((__str31)&4294967295), $pos); //@line 1121 "bufferedio.c"
        var $13=((($12))|0)==0; //@line 1121 "bufferedio.c"
        if ($13) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1121 "bufferedio.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 1122 "bufferedio.c"
        __label__ = 27; break; //@line 1122 "bufferedio.c"
      case 7: // $bb6
        var $14=HEAP[$self_addr]; //@line 1128 "bufferedio.c"
        var $15=(($14+24)&4294967295); //@line 1128 "bufferedio.c"
        var $16=HEAP[$15]; //@line 1128 "bufferedio.c"
        var $17=((($16))|0)!=0; //@line 1128 "bufferedio.c"
        if ($17) { __label__ = 8; break; } else { __label__ = 12; break; } //@line 1128 "bufferedio.c"
      case 8: // $bb7
        var $18=HEAP[$self_addr]; //@line 1129 "bufferedio.c"
        var $19=__bufferedwriter_flush_unlocked($18, 0); //@line 1129 "bufferedio.c"
        HEAP[$res]=$19; //@line 1129 "bufferedio.c"
        var $20=HEAP[$res]; //@line 1130 "bufferedio.c"
        var $21=($20)==0; //@line 1130 "bufferedio.c"
        if ($21) { __label__ = 26; break; } else { __label__ = 9; break; } //@line 1130 "bufferedio.c"
      case 9: // $bb8
        var $22=HEAP[$res]; //@line 1132 "bufferedio.c"
        var $23=($22)!=0; //@line 1132 "bufferedio.c"
        if ($23) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 1132 "bufferedio.c"
      case 10: // $bb9
        var $24=HEAP[$res]; //@line 1132 "bufferedio.c"
        HEAP[$_py_tmp]=$24; //@line 1132 "bufferedio.c"
        HEAP[$res]=0; //@line 1132 "bufferedio.c"
        var $25=HEAP[$_py_tmp]; //@line 1132 "bufferedio.c"
        var $26=(($25)&4294967295); //@line 1132 "bufferedio.c"
        var $27=HEAP[$26]; //@line 1132 "bufferedio.c"
        var $28=((($27) - 1)&4294967295); //@line 1132 "bufferedio.c"
        var $29=HEAP[$_py_tmp]; //@line 1132 "bufferedio.c"
        var $30=(($29)&4294967295); //@line 1132 "bufferedio.c"
        HEAP[$30]=$28; //@line 1132 "bufferedio.c"
        var $31=HEAP[$_py_tmp]; //@line 1132 "bufferedio.c"
        var $32=(($31)&4294967295); //@line 1132 "bufferedio.c"
        var $33=HEAP[$32]; //@line 1132 "bufferedio.c"
        var $34=((($33))|0)==0; //@line 1132 "bufferedio.c"
        if ($34) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1132 "bufferedio.c"
      case 11: // $bb10
        var $35=HEAP[$_py_tmp]; //@line 1132 "bufferedio.c"
        var $36=(($35+4)&4294967295); //@line 1132 "bufferedio.c"
        var $37=HEAP[$36]; //@line 1132 "bufferedio.c"
        var $38=(($37+24)&4294967295); //@line 1132 "bufferedio.c"
        var $39=HEAP[$38]; //@line 1132 "bufferedio.c"
        var $40=HEAP[$_py_tmp]; //@line 1132 "bufferedio.c"
        FUNCTION_TABLE[$39]($40); //@line 1132 "bufferedio.c"
        __label__ = 12; break; //@line 1132 "bufferedio.c"
      case 12: // $bb11
        var $41=HEAP[$self_addr]; //@line 1134 "bufferedio.c"
        var $42=(($41+20)&4294967295); //@line 1134 "bufferedio.c"
        var $43=HEAP[$42]; //@line 1134 "bufferedio.c"
        var $44=((($43))|0)!=0; //@line 1134 "bufferedio.c"
        if ($44) { __label__ = 13; break; } else { __label__ = 23; break; } //@line 1134 "bufferedio.c"
      case 13: // $bb12
        var $45=HEAP[$pos]; //@line 1135 "bufferedio.c"
        var $46=($45)==(__Py_NoneStruct); //@line 1135 "bufferedio.c"
        if ($46) { __label__ = 14; break; } else { __label__ = 22; break; } //@line 1135 "bufferedio.c"
      case 14: // $bb13
        var $47=HEAP[$self_addr]; //@line 1138 "bufferedio.c"
        var $48=(($47+20)&4294967295); //@line 1138 "bufferedio.c"
        var $49=HEAP[$48]; //@line 1138 "bufferedio.c"
        var $50=((($49))|0)==0; //@line 1138 "bufferedio.c"
        if ($50) { __label__ = 16; break; } else { __label__ = 15; break; } //@line 1138 "bufferedio.c"
      case 15: // $bb14
        var $51=HEAP[$self_addr]; //@line 1138 "bufferedio.c"
        var $52=(($51+60)&4294967295); //@line 1138 "bufferedio.c"
        var $53=HEAP[$52]; //@line 1138 "bufferedio.c"
        var $54=reSign(($53), 64, 0)!=-1; //@line 1138 "bufferedio.c"
        if ($54) { __label__ = 18; break; } else { __label__ = 16; break; } //@line 1138 "bufferedio.c"
      case 16: // $bb15
        var $55=HEAP[$self_addr]; //@line 1138 "bufferedio.c"
        var $56=(($55+24)&4294967295); //@line 1138 "bufferedio.c"
        var $57=HEAP[$56]; //@line 1138 "bufferedio.c"
        var $58=((($57))|0)==0; //@line 1138 "bufferedio.c"
        if ($58) { __label__ = 20; break; } else { __label__ = 17; break; } //@line 1138 "bufferedio.c"
      case 17: // $bb16
        var $59=HEAP[$self_addr]; //@line 1138 "bufferedio.c"
        var $60=(($59+76)&4294967295); //@line 1138 "bufferedio.c"
        var $61=HEAP[$60]; //@line 1138 "bufferedio.c"
        var $62=reSign(($61), 64, 0)!=-1; //@line 1138 "bufferedio.c"
        if ($62) { __label__ = 18; break; } else { __label__ = 20; break; } //@line 1138 "bufferedio.c"
      case 18: // $bb17
        var $63=HEAP[$self_addr]; //@line 1138 "bufferedio.c"
        var $64=(($63+52)&4294967295); //@line 1138 "bufferedio.c"
        var $65=HEAP[$64]; //@line 1138 "bufferedio.c"
        var $66=reSign(($65), 64, 0) < 0; //@line 1138 "bufferedio.c"
        if ($66) { __label__ = 20; break; } else { __label__ = 19; break; } //@line 1138 "bufferedio.c"
      case 19: // $bb18
        var $67=HEAP[$self_addr]; //@line 1138 "bufferedio.c"
        var $68=(($67+44)&4294967295); //@line 1138 "bufferedio.c"
        var $69=HEAP[$68]; //@line 1138 "bufferedio.c"
        var $70=HEAP[$self_addr]; //@line 1138 "bufferedio.c"
        var $71=(($70+52)&4294967295); //@line 1138 "bufferedio.c"
        var $72=HEAP[$71]; //@line 1138 "bufferedio.c"
        var $73=($69) - ($72); //@line 1138 "bufferedio.c"
        HEAP[$iftmp_155]=$73; //@line 1138 "bufferedio.c"
        __label__ = 21; break; //@line 1138 "bufferedio.c"
      case 20: // $bb19
        HEAP[$iftmp_155]=0; //@line 1138 "bufferedio.c"
        __label__ = 21; break; //@line 1138 "bufferedio.c"
      case 21: // $bb20
        var $74=HEAP[$self_addr]; //@line 1138 "bufferedio.c"
        var $75=HEAP[$iftmp_155]; //@line 1138 "bufferedio.c"
        var $76=__buffered_raw_seek($74, $75, 1); //@line 1138 "bufferedio.c"
        var $77=reSign(($76), 64, 0)==-1; //@line 1138 "bufferedio.c"
        if ($77) { __label__ = 26; break; } else { __label__ = 22; break; } //@line 1138 "bufferedio.c"
      case 22: // $bb21
        var $78=HEAP[$self_addr]; //@line 1141 "bufferedio.c"
        __bufferedreader_reset_buf($78); //@line 1141 "bufferedio.c"
        __label__ = 23; break; //@line 1141 "bufferedio.c"
      case 23: // $bb22
        var $79=HEAP[$pos]; //@line 1143 "bufferedio.c"
        var $80=HEAP[__PyIO_str_truncate]; //@line 1143 "bufferedio.c"
        var $81=HEAP[$self_addr]; //@line 1143 "bufferedio.c"
        var $82=(($81+8)&4294967295); //@line 1143 "bufferedio.c"
        var $83=HEAP[$82]; //@line 1143 "bufferedio.c"
        var $84=_PyObject_CallMethodObjArgs($83, $80, $79, 0); //@line 1143 "bufferedio.c"
        HEAP[$res]=$84; //@line 1143 "bufferedio.c"
        var $85=HEAP[$res]; //@line 1144 "bufferedio.c"
        var $86=($85)==0; //@line 1144 "bufferedio.c"
        if ($86) { __label__ = 26; break; } else { __label__ = 24; break; } //@line 1144 "bufferedio.c"
      case 24: // $bb23
        var $87=HEAP[$self_addr]; //@line 1147 "bufferedio.c"
        var $88=__buffered_raw_tell($87); //@line 1147 "bufferedio.c"
        var $89=reSign(($88), 64, 0)==-1; //@line 1147 "bufferedio.c"
        if ($89) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 1147 "bufferedio.c"
      case 25: // $bb24
        _PyErr_Clear(); //@line 1148 "bufferedio.c"
        __label__ = 26; break; //@line 1150 "bufferedio.c"
      case 26: // $end
        var $90=HEAP[$res]; //@line 1152 "bufferedio.c"
        HEAP[$0]=$90; //@line 1152 "bufferedio.c"
        __label__ = 27; break; //@line 1152 "bufferedio.c"
      case 27: // $bb25
        var $91=HEAP[$0]; //@line 1120 "bufferedio.c"
        HEAP[$retval]=$91; //@line 1120 "bufferedio.c"
        __label__ = 28; break; //@line 1120 "bufferedio.c"
      case 28: // $return
        var $retval26=HEAP[$retval]; //@line 1120 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval26; //@line 1120 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_iternext($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $line=__stackBase__+12;
        var $tp=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 1161 "bufferedio.c"
        var $2=(($1+12)&4294967295); //@line 1161 "bufferedio.c"
        var $3=HEAP[$2]; //@line 1161 "bufferedio.c"
        var $4=((($3))|0) <= 0; //@line 1161 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 1161 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 1161 "bufferedio.c"
        var $6=(($5+16)&4294967295); //@line 1161 "bufferedio.c"
        var $7=HEAP[$6]; //@line 1161 "bufferedio.c"
        var $8=((($7))|0)!=0; //@line 1161 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1161 "bufferedio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 1161 "bufferedio.c"
        _PyErr_SetString($9, ((__str11)&4294967295)); //@line 1161 "bufferedio.c"
        __label__ = 4; break; //@line 1161 "bufferedio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 1161 "bufferedio.c"
        _PyErr_SetString($10, ((__str12)&4294967295)); //@line 1161 "bufferedio.c"
        __label__ = 4; break; //@line 1161 "bufferedio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 1161 "bufferedio.c"
        __label__ = 20; break; //@line 1161 "bufferedio.c"
      case 5: // $bb4
        var $11=HEAP[$self_addr]; //@line 1163 "bufferedio.c"
        var $12=$11; //@line 1163 "bufferedio.c"
        var $13=(($12+4)&4294967295); //@line 1163 "bufferedio.c"
        var $14=HEAP[$13]; //@line 1163 "bufferedio.c"
        HEAP[$tp]=$14; //@line 1163 "bufferedio.c"
        var $15=HEAP[$tp]; //@line 1164 "bufferedio.c"
        var $16=($15)==(_PyBufferedReader_Type); //@line 1164 "bufferedio.c"
        if ($16) { __label__ = 7; break; } else { __label__ = 6; break; } //@line 1164 "bufferedio.c"
      case 6: // $bb5
        var $17=HEAP[$tp]; //@line 1164 "bufferedio.c"
        var $18=($17)==(_PyBufferedRandom_Type); //@line 1164 "bufferedio.c"
        if ($18) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1164 "bufferedio.c"
      case 7: // $bb6
        var $19=HEAP[$self_addr]; //@line 1167 "bufferedio.c"
        var $20=__buffered_readline($19, -1); //@line 1167 "bufferedio.c"
        HEAP[$line]=$20; //@line 1167 "bufferedio.c"
        __label__ = 13; break; //@line 1167 "bufferedio.c"
      case 8: // $bb7
        var $21=HEAP[__PyIO_str_readline]; //@line 1170 "bufferedio.c"
        var $22=HEAP[$self_addr]; //@line 1170 "bufferedio.c"
        var $23=$22; //@line 1170 "bufferedio.c"
        var $24=_PyObject_CallMethodObjArgs($23, $21, 0); //@line 1170 "bufferedio.c"
        HEAP[$line]=$24; //@line 1170 "bufferedio.c"
        var $25=HEAP[$line]; //@line 1172 "bufferedio.c"
        var $26=($25)!=0; //@line 1172 "bufferedio.c"
        if ($26) { __label__ = 9; break; } else { __label__ = 13; break; } //@line 1172 "bufferedio.c"
      case 9: // $bb8
        var $27=HEAP[$line]; //@line 1172 "bufferedio.c"
        var $28=(($27+4)&4294967295); //@line 1172 "bufferedio.c"
        var $29=HEAP[$28]; //@line 1172 "bufferedio.c"
        var $30=(($29+84)&4294967295); //@line 1172 "bufferedio.c"
        var $31=HEAP[$30]; //@line 1172 "bufferedio.c"
        var $32=($31) & 134217728; //@line 1172 "bufferedio.c"
        var $33=((($32))|0)==0; //@line 1172 "bufferedio.c"
        if ($33) { __label__ = 10; break; } else { __label__ = 13; break; } //@line 1172 "bufferedio.c"
      case 10: // $bb9
        var $34=HEAP[$line]; //@line 1173 "bufferedio.c"
        var $35=(($34+4)&4294967295); //@line 1173 "bufferedio.c"
        var $36=HEAP[$35]; //@line 1173 "bufferedio.c"
        var $37=(($36+12)&4294967295); //@line 1173 "bufferedio.c"
        var $38=HEAP[$37]; //@line 1173 "bufferedio.c"
        var $39=HEAP[_PyExc_IOError]; //@line 1173 "bufferedio.c"
        var $40=_PyErr_Format($39, ((__str32)&4294967295), $38); //@line 1173 "bufferedio.c"
        var $41=HEAP[$line]; //@line 1176 "bufferedio.c"
        var $42=(($41)&4294967295); //@line 1176 "bufferedio.c"
        var $43=HEAP[$42]; //@line 1176 "bufferedio.c"
        var $44=((($43) - 1)&4294967295); //@line 1176 "bufferedio.c"
        var $45=HEAP[$line]; //@line 1176 "bufferedio.c"
        var $46=(($45)&4294967295); //@line 1176 "bufferedio.c"
        HEAP[$46]=$44; //@line 1176 "bufferedio.c"
        var $47=HEAP[$line]; //@line 1176 "bufferedio.c"
        var $48=(($47)&4294967295); //@line 1176 "bufferedio.c"
        var $49=HEAP[$48]; //@line 1176 "bufferedio.c"
        var $50=((($49))|0)==0; //@line 1176 "bufferedio.c"
        if ($50) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1176 "bufferedio.c"
      case 11: // $bb10
        var $51=HEAP[$line]; //@line 1176 "bufferedio.c"
        var $52=(($51+4)&4294967295); //@line 1176 "bufferedio.c"
        var $53=HEAP[$52]; //@line 1176 "bufferedio.c"
        var $54=(($53+24)&4294967295); //@line 1176 "bufferedio.c"
        var $55=HEAP[$54]; //@line 1176 "bufferedio.c"
        var $56=HEAP[$line]; //@line 1176 "bufferedio.c"
        FUNCTION_TABLE[$55]($56); //@line 1176 "bufferedio.c"
        __label__ = 12; break; //@line 1176 "bufferedio.c"
      case 12: // $bb11
        HEAP[$0]=0; //@line 1177 "bufferedio.c"
        __label__ = 20; break; //@line 1177 "bufferedio.c"
      case 13: // $bb12
        var $57=HEAP[$line]; //@line 1181 "bufferedio.c"
        var $58=($57)==0; //@line 1181 "bufferedio.c"
        if ($58) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1181 "bufferedio.c"
      case 14: // $bb13
        HEAP[$0]=0; //@line 1182 "bufferedio.c"
        __label__ = 20; break; //@line 1182 "bufferedio.c"
      case 15: // $bb14
        var $59=HEAP[$line]; //@line 1184 "bufferedio.c"
        var $60=$59; //@line 1184 "bufferedio.c"
        var $61=(($60+8)&4294967295); //@line 1184 "bufferedio.c"
        var $62=HEAP[$61]; //@line 1184 "bufferedio.c"
        var $63=((($62))|0)==0; //@line 1184 "bufferedio.c"
        if ($63) { __label__ = 16; break; } else { __label__ = 19; break; } //@line 1184 "bufferedio.c"
      case 16: // $bb15
        var $64=HEAP[$line]; //@line 1186 "bufferedio.c"
        var $65=(($64)&4294967295); //@line 1186 "bufferedio.c"
        var $66=HEAP[$65]; //@line 1186 "bufferedio.c"
        var $67=((($66) - 1)&4294967295); //@line 1186 "bufferedio.c"
        var $68=HEAP[$line]; //@line 1186 "bufferedio.c"
        var $69=(($68)&4294967295); //@line 1186 "bufferedio.c"
        HEAP[$69]=$67; //@line 1186 "bufferedio.c"
        var $70=HEAP[$line]; //@line 1186 "bufferedio.c"
        var $71=(($70)&4294967295); //@line 1186 "bufferedio.c"
        var $72=HEAP[$71]; //@line 1186 "bufferedio.c"
        var $73=((($72))|0)==0; //@line 1186 "bufferedio.c"
        if ($73) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 1186 "bufferedio.c"
      case 17: // $bb16
        var $74=HEAP[$line]; //@line 1186 "bufferedio.c"
        var $75=(($74+4)&4294967295); //@line 1186 "bufferedio.c"
        var $76=HEAP[$75]; //@line 1186 "bufferedio.c"
        var $77=(($76+24)&4294967295); //@line 1186 "bufferedio.c"
        var $78=HEAP[$77]; //@line 1186 "bufferedio.c"
        var $79=HEAP[$line]; //@line 1186 "bufferedio.c"
        FUNCTION_TABLE[$78]($79); //@line 1186 "bufferedio.c"
        __label__ = 18; break; //@line 1186 "bufferedio.c"
      case 18: // $bb17
        HEAP[$0]=0; //@line 1187 "bufferedio.c"
        __label__ = 20; break; //@line 1187 "bufferedio.c"
      case 19: // $bb18
        var $80=HEAP[$line]; //@line 1190 "bufferedio.c"
        HEAP[$0]=$80; //@line 1190 "bufferedio.c"
        __label__ = 20; break; //@line 1190 "bufferedio.c"
      case 20: // $bb19
        var $81=HEAP[$0]; //@line 1161 "bufferedio.c"
        HEAP[$retval]=$81; //@line 1161 "bufferedio.c"
        __label__ = 21; break; //@line 1161 "bufferedio.c"
      case 21: // $return
        var $retval20=HEAP[$retval]; //@line 1161 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval20; //@line 1161 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_repr($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $nameobj=__stackBase__+12;
        var $res=__stackBase__+16;
        var $repr=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 1198 "bufferedio.c"
        var $2=$1; //@line 1198 "bufferedio.c"
        var $3=_PyObject_GetAttrString($2, ((__str13)&4294967295)); //@line 1198 "bufferedio.c"
        HEAP[$nameobj]=$3; //@line 1198 "bufferedio.c"
        var $4=HEAP[$nameobj]; //@line 1199 "bufferedio.c"
        var $5=($4)==0; //@line 1199 "bufferedio.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 1199 "bufferedio.c"
      case 1: // $bb
        var $6=HEAP[_PyExc_AttributeError]; //@line 1200 "bufferedio.c"
        var $7=_PyErr_ExceptionMatches($6); //@line 1200 "bufferedio.c"
        var $8=((($7))|0)!=0; //@line 1200 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1200 "bufferedio.c"
      case 2: // $bb1
        _PyErr_Clear(); //@line 1201 "bufferedio.c"
        var $9=HEAP[$self_addr]; //@line 1204 "bufferedio.c"
        var $10=$9; //@line 1204 "bufferedio.c"
        var $11=(($10+4)&4294967295); //@line 1204 "bufferedio.c"
        var $12=HEAP[$11]; //@line 1204 "bufferedio.c"
        var $13=(($12+12)&4294967295); //@line 1204 "bufferedio.c"
        var $14=HEAP[$13]; //@line 1204 "bufferedio.c"
        var $15=_PyString_FromFormat(((__str33)&4294967295), $14); //@line 1204 "bufferedio.c"
        HEAP[$res]=$15; //@line 1204 "bufferedio.c"
        __label__ = 10; break; //@line 1204 "bufferedio.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 1203 "bufferedio.c"
        __label__ = 11; break; //@line 1203 "bufferedio.c"
      case 4: // $bb3
        var $16=HEAP[$nameobj]; //@line 1207 "bufferedio.c"
        var $17=_PyObject_Repr($16); //@line 1207 "bufferedio.c"
        HEAP[$repr]=$17; //@line 1207 "bufferedio.c"
        var $18=HEAP[$nameobj]; //@line 1208 "bufferedio.c"
        var $19=(($18)&4294967295); //@line 1208 "bufferedio.c"
        var $20=HEAP[$19]; //@line 1208 "bufferedio.c"
        var $21=((($20) - 1)&4294967295); //@line 1208 "bufferedio.c"
        var $22=HEAP[$nameobj]; //@line 1208 "bufferedio.c"
        var $23=(($22)&4294967295); //@line 1208 "bufferedio.c"
        HEAP[$23]=$21; //@line 1208 "bufferedio.c"
        var $24=HEAP[$nameobj]; //@line 1208 "bufferedio.c"
        var $25=(($24)&4294967295); //@line 1208 "bufferedio.c"
        var $26=HEAP[$25]; //@line 1208 "bufferedio.c"
        var $27=((($26))|0)==0; //@line 1208 "bufferedio.c"
        if ($27) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1208 "bufferedio.c"
      case 5: // $bb4
        var $28=HEAP[$nameobj]; //@line 1208 "bufferedio.c"
        var $29=(($28+4)&4294967295); //@line 1208 "bufferedio.c"
        var $30=HEAP[$29]; //@line 1208 "bufferedio.c"
        var $31=(($30+24)&4294967295); //@line 1208 "bufferedio.c"
        var $32=HEAP[$31]; //@line 1208 "bufferedio.c"
        var $33=HEAP[$nameobj]; //@line 1208 "bufferedio.c"
        FUNCTION_TABLE[$32]($33); //@line 1208 "bufferedio.c"
        __label__ = 6; break; //@line 1208 "bufferedio.c"
      case 6: // $bb5
        var $34=HEAP[$repr]; //@line 1209 "bufferedio.c"
        var $35=($34)==0; //@line 1209 "bufferedio.c"
        if ($35) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1209 "bufferedio.c"
      case 7: // $bb6
        HEAP[$0]=0; //@line 1210 "bufferedio.c"
        __label__ = 11; break; //@line 1210 "bufferedio.c"
      case 8: // $bb7
        var $36=HEAP[$repr]; //@line 1211 "bufferedio.c"
        var $37=$36; //@line 1211 "bufferedio.c"
        var $38=(($37+20)&4294967295); //@line 1211 "bufferedio.c"
        var $39=(($38)&4294967295); //@line 1211 "bufferedio.c"
        var $40=HEAP[$self_addr]; //@line 1211 "bufferedio.c"
        var $41=$40; //@line 1211 "bufferedio.c"
        var $42=(($41+4)&4294967295); //@line 1211 "bufferedio.c"
        var $43=HEAP[$42]; //@line 1211 "bufferedio.c"
        var $44=(($43+12)&4294967295); //@line 1211 "bufferedio.c"
        var $45=HEAP[$44]; //@line 1211 "bufferedio.c"
        var $46=_PyString_FromFormat(((__str34)&4294967295), $45, $39); //@line 1211 "bufferedio.c"
        HEAP[$res]=$46; //@line 1211 "bufferedio.c"
        var $47=HEAP[$repr]; //@line 1214 "bufferedio.c"
        var $48=(($47)&4294967295); //@line 1214 "bufferedio.c"
        var $49=HEAP[$48]; //@line 1214 "bufferedio.c"
        var $50=((($49) - 1)&4294967295); //@line 1214 "bufferedio.c"
        var $51=HEAP[$repr]; //@line 1214 "bufferedio.c"
        var $52=(($51)&4294967295); //@line 1214 "bufferedio.c"
        HEAP[$52]=$50; //@line 1214 "bufferedio.c"
        var $53=HEAP[$repr]; //@line 1214 "bufferedio.c"
        var $54=(($53)&4294967295); //@line 1214 "bufferedio.c"
        var $55=HEAP[$54]; //@line 1214 "bufferedio.c"
        var $56=((($55))|0)==0; //@line 1214 "bufferedio.c"
        if ($56) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1214 "bufferedio.c"
      case 9: // $bb8
        var $57=HEAP[$repr]; //@line 1214 "bufferedio.c"
        var $58=(($57+4)&4294967295); //@line 1214 "bufferedio.c"
        var $59=HEAP[$58]; //@line 1214 "bufferedio.c"
        var $60=(($59+24)&4294967295); //@line 1214 "bufferedio.c"
        var $61=HEAP[$60]; //@line 1214 "bufferedio.c"
        var $62=HEAP[$repr]; //@line 1214 "bufferedio.c"
        FUNCTION_TABLE[$61]($62); //@line 1214 "bufferedio.c"
        __label__ = 10; break; //@line 1214 "bufferedio.c"
      case 10: // $bb9
        var $63=HEAP[$res]; //@line 1216 "bufferedio.c"
        HEAP[$0]=$63; //@line 1216 "bufferedio.c"
        __label__ = 11; break; //@line 1216 "bufferedio.c"
      case 11: // $bb10
        var $64=HEAP[$0]; //@line 1203 "bufferedio.c"
        HEAP[$retval]=$64; //@line 1203 "bufferedio.c"
        __label__ = 12; break; //@line 1203 "bufferedio.c"
      case 12: // $return
        var $retval11=HEAP[$retval]; //@line 1203 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 1203 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __bufferedreader_reset_buf($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $0=HEAP[$self_addr]; //@line 1228 "bufferedio.c"
        var $1=(($0+60)&4294967295); //@line 1228 "bufferedio.c"
        HEAP[$1]=-1; //@line 1228 "bufferedio.c"
        __label__ = 1; break; //@line 1229 "bufferedio.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1229 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferedreader_init($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 48; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 48);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kwds_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $iftmp_176=__stackBase__+16;
        var $0=__stackBase__+20;
        var $kwlist=__stackBase__+24;
        var $buffer_size=__stackBase__+36;
        var $raw=__stackBase__+40;
        var $_py_tmp=__stackBase__+44;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$kwds_addr]=$kwds;
        var $1=(($kwlist)&4294967295); //@line 1234 "bufferedio.c"
        var $2=HEAP[((_C_170_10029)&4294967295)]; //@line 1234 "bufferedio.c"
        HEAP[$1]=$2; //@line 1234 "bufferedio.c"
        var $3=(($kwlist+4)&4294967295); //@line 1234 "bufferedio.c"
        var $4=HEAP[((_C_170_10029+4)&4294967295)]; //@line 1234 "bufferedio.c"
        HEAP[$3]=$4; //@line 1234 "bufferedio.c"
        var $5=(($kwlist+8)&4294967295); //@line 1234 "bufferedio.c"
        var $6=HEAP[((_C_170_10029+8)&4294967295)]; //@line 1234 "bufferedio.c"
        HEAP[$5]=$6; //@line 1234 "bufferedio.c"
        HEAP[$buffer_size]=8192; //@line 1235 "bufferedio.c"
        var $7=HEAP[$self_addr]; //@line 1238 "bufferedio.c"
        var $8=(($7+12)&4294967295); //@line 1238 "bufferedio.c"
        HEAP[$8]=0; //@line 1238 "bufferedio.c"
        var $9=HEAP[$self_addr]; //@line 1239 "bufferedio.c"
        var $10=(($9+16)&4294967295); //@line 1239 "bufferedio.c"
        HEAP[$10]=0; //@line 1239 "bufferedio.c"
        var $11=HEAP[$args_addr]; //@line 1241 "bufferedio.c"
        var $12=HEAP[$kwds_addr]; //@line 1241 "bufferedio.c"
        var $kwlist1=$kwlist; //@line 1241 "bufferedio.c"
        var $13=__PyArg_ParseTupleAndKeywords_SizeT($11, $12, ((__str37)&4294967295), $kwlist1, $raw, $buffer_size); //@line 1241 "bufferedio.c"
        var $14=((($13))|0)==0; //@line 1241 "bufferedio.c"
        if ($14) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1241 "bufferedio.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 1243 "bufferedio.c"
        __label__ = 14; break; //@line 1243 "bufferedio.c"
      case 2: // $bb2
        var $15=HEAP[$raw]; //@line 1246 "bufferedio.c"
        var $16=__PyIOBase_check_readable($15, __Py_TrueStruct); //@line 1246 "bufferedio.c"
        var $17=($16)==0; //@line 1246 "bufferedio.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1246 "bufferedio.c"
      case 3: // $bb3
        HEAP[$0]=-1; //@line 1247 "bufferedio.c"
        __label__ = 14; break; //@line 1247 "bufferedio.c"
      case 4: // $bb4
        var $18=HEAP[$self_addr]; //@line 1249 "bufferedio.c"
        var $19=(($18+8)&4294967295); //@line 1249 "bufferedio.c"
        var $20=HEAP[$19]; //@line 1249 "bufferedio.c"
        var $21=($20)!=0; //@line 1249 "bufferedio.c"
        if ($21) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 1249 "bufferedio.c"
      case 5: // $bb5
        var $22=HEAP[$self_addr]; //@line 1249 "bufferedio.c"
        var $23=(($22+8)&4294967295); //@line 1249 "bufferedio.c"
        var $24=HEAP[$23]; //@line 1249 "bufferedio.c"
        HEAP[$_py_tmp]=$24; //@line 1249 "bufferedio.c"
        var $25=HEAP[$self_addr]; //@line 1249 "bufferedio.c"
        var $26=(($25+8)&4294967295); //@line 1249 "bufferedio.c"
        HEAP[$26]=0; //@line 1249 "bufferedio.c"
        var $27=HEAP[$_py_tmp]; //@line 1249 "bufferedio.c"
        var $28=(($27)&4294967295); //@line 1249 "bufferedio.c"
        var $29=HEAP[$28]; //@line 1249 "bufferedio.c"
        var $30=((($29) - 1)&4294967295); //@line 1249 "bufferedio.c"
        var $31=HEAP[$_py_tmp]; //@line 1249 "bufferedio.c"
        var $32=(($31)&4294967295); //@line 1249 "bufferedio.c"
        HEAP[$32]=$30; //@line 1249 "bufferedio.c"
        var $33=HEAP[$_py_tmp]; //@line 1249 "bufferedio.c"
        var $34=(($33)&4294967295); //@line 1249 "bufferedio.c"
        var $35=HEAP[$34]; //@line 1249 "bufferedio.c"
        var $36=((($35))|0)==0; //@line 1249 "bufferedio.c"
        if ($36) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1249 "bufferedio.c"
      case 6: // $bb6
        var $37=HEAP[$_py_tmp]; //@line 1249 "bufferedio.c"
        var $38=(($37+4)&4294967295); //@line 1249 "bufferedio.c"
        var $39=HEAP[$38]; //@line 1249 "bufferedio.c"
        var $40=(($39+24)&4294967295); //@line 1249 "bufferedio.c"
        var $41=HEAP[$40]; //@line 1249 "bufferedio.c"
        var $42=HEAP[$_py_tmp]; //@line 1249 "bufferedio.c"
        FUNCTION_TABLE[$41]($42); //@line 1249 "bufferedio.c"
        __label__ = 7; break; //@line 1249 "bufferedio.c"
      case 7: // $bb7
        var $43=HEAP[$raw]; //@line 1250 "bufferedio.c"
        var $44=(($43)&4294967295); //@line 1250 "bufferedio.c"
        var $45=HEAP[$44]; //@line 1250 "bufferedio.c"
        var $46=((($45) + 1)&4294967295); //@line 1250 "bufferedio.c"
        var $47=(($43)&4294967295); //@line 1250 "bufferedio.c"
        HEAP[$47]=$46; //@line 1250 "bufferedio.c"
        var $48=HEAP[$raw]; //@line 1251 "bufferedio.c"
        var $49=HEAP[$self_addr]; //@line 1251 "bufferedio.c"
        var $50=(($49+8)&4294967295); //@line 1251 "bufferedio.c"
        HEAP[$50]=$48; //@line 1251 "bufferedio.c"
        var $51=HEAP[$buffer_size]; //@line 1252 "bufferedio.c"
        var $52=HEAP[$self_addr]; //@line 1252 "bufferedio.c"
        var $53=(($52+84)&4294967295); //@line 1252 "bufferedio.c"
        HEAP[$53]=$51; //@line 1252 "bufferedio.c"
        var $54=HEAP[$self_addr]; //@line 1253 "bufferedio.c"
        var $55=(($54+20)&4294967295); //@line 1253 "bufferedio.c"
        HEAP[$55]=1; //@line 1253 "bufferedio.c"
        var $56=HEAP[$self_addr]; //@line 1254 "bufferedio.c"
        var $57=(($56+24)&4294967295); //@line 1254 "bufferedio.c"
        HEAP[$57]=0; //@line 1254 "bufferedio.c"
        var $58=HEAP[$self_addr]; //@line 1256 "bufferedio.c"
        var $59=__buffered_init($58); //@line 1256 "bufferedio.c"
        var $60=((($59))|0) < 0; //@line 1256 "bufferedio.c"
        if ($60) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1256 "bufferedio.c"
      case 8: // $bb8
        HEAP[$0]=-1; //@line 1257 "bufferedio.c"
        __label__ = 14; break; //@line 1257 "bufferedio.c"
      case 9: // $bb9
        var $61=HEAP[$self_addr]; //@line 1258 "bufferedio.c"
        __bufferedreader_reset_buf($61); //@line 1258 "bufferedio.c"
        var $62=HEAP[$self_addr]; //@line 1260 "bufferedio.c"
        var $63=$62; //@line 1260 "bufferedio.c"
        var $64=(($63+4)&4294967295); //@line 1260 "bufferedio.c"
        var $65=HEAP[$64]; //@line 1260 "bufferedio.c"
        var $66=($65)!=(_PyBufferedReader_Type); //@line 1260 "bufferedio.c"
        if ($66) { __label__ = 12; break; } else { __label__ = 10; break; } //@line 1260 "bufferedio.c"
      case 10: // $bb10
        var $67=HEAP[$raw]; //@line 1260 "bufferedio.c"
        var $68=(($67+4)&4294967295); //@line 1260 "bufferedio.c"
        var $69=HEAP[$68]; //@line 1260 "bufferedio.c"
        var $70=($69)!=(_PyFileIO_Type); //@line 1260 "bufferedio.c"
        if ($70) { __label__ = 12; break; } else { __label__ = 11; break; } //@line 1260 "bufferedio.c"
      case 11: // $bb11
        HEAP[$iftmp_176]=1; //@line 1260 "bufferedio.c"
        __label__ = 13; break; //@line 1260 "bufferedio.c"
      case 12: // $bb12
        HEAP[$iftmp_176]=0; //@line 1260 "bufferedio.c"
        __label__ = 13; break; //@line 1260 "bufferedio.c"
      case 13: // $bb13
        var $71=HEAP[$self_addr]; //@line 1260 "bufferedio.c"
        var $72=(($71+28)&4294967295); //@line 1260 "bufferedio.c"
        var $73=HEAP[$iftmp_176]; //@line 1260 "bufferedio.c"
        HEAP[$72]=$73; //@line 1260 "bufferedio.c"
        var $74=HEAP[$self_addr]; //@line 1263 "bufferedio.c"
        var $75=(($74+12)&4294967295); //@line 1263 "bufferedio.c"
        HEAP[$75]=1; //@line 1263 "bufferedio.c"
        HEAP[$0]=0; //@line 1264 "bufferedio.c"
        __label__ = 14; break; //@line 1264 "bufferedio.c"
      case 14: // $bb14
        var $76=HEAP[$0]; //@line 1243 "bufferedio.c"
        HEAP[$retval]=$76; //@line 1243 "bufferedio.c"
        __label__ = 15; break; //@line 1243 "bufferedio.c"
      case 15: // $return
        var $retval15=HEAP[$retval]; //@line 1243 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval15; //@line 1243 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __bufferedreader_raw_read($self, $start, $len) {
    var __stackBase__  = STACKTOP; STACKTOP += 84; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 84);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $start_addr=__stackBase__+4;
        var $len_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $buf=__stackBase__+20;
        var $memobj=__stackBase__+72;
        var $res=__stackBase__+76;
        var $n=__stackBase__+80;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$start_addr]=$start;
        HEAP[$len_addr]=$len;
        var $1=HEAP[$start_addr]; //@line 1274 "bufferedio.c"
        var $2=HEAP[$len_addr]; //@line 1274 "bufferedio.c"
        var $3=_PyBuffer_FillInfo($buf, 0, $1, $2, 0, 9); //@line 1274 "bufferedio.c"
        var $4=((($3))|0)==-1; //@line 1274 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1274 "bufferedio.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 1275 "bufferedio.c"
        __label__ = 23; break; //@line 1275 "bufferedio.c"
      case 2: // $bb1
        var $5=_PyMemoryView_FromBuffer($buf); //@line 1276 "bufferedio.c"
        HEAP[$memobj]=$5; //@line 1276 "bufferedio.c"
        var $6=HEAP[$memobj]; //@line 1277 "bufferedio.c"
        var $7=($6)==0; //@line 1277 "bufferedio.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1277 "bufferedio.c"
      case 3: // $bb2
        HEAP[$0]=-1; //@line 1278 "bufferedio.c"
        __label__ = 23; break; //@line 1278 "bufferedio.c"
      case 4: // $bb3
        var $8=HEAP[__PyIO_str_readinto]; //@line 1285 "bufferedio.c"
        var $9=HEAP[$self_addr]; //@line 1285 "bufferedio.c"
        var $10=(($9+8)&4294967295); //@line 1285 "bufferedio.c"
        var $11=HEAP[$10]; //@line 1285 "bufferedio.c"
        var $12=HEAP[$memobj]; //@line 1285 "bufferedio.c"
        var $13=_PyObject_CallMethodObjArgs($11, $8, $12, 0); //@line 1285 "bufferedio.c"
        HEAP[$res]=$13; //@line 1285 "bufferedio.c"
        var $14=HEAP[$res]; //@line 1286 "bufferedio.c"
        var $15=($14)!=0; //@line 1286 "bufferedio.c"
        if ($15) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 1286 "bufferedio.c"
      case 5: // $bb4
        var $16=__trap_eintr(); //@line 1286 "bufferedio.c"
        var $17=((($16))|0)!=0; //@line 1286 "bufferedio.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 1286 "bufferedio.c"
      case 6: // $bb5
        var $18=HEAP[$memobj]; //@line 1287 "bufferedio.c"
        var $19=(($18)&4294967295); //@line 1287 "bufferedio.c"
        var $20=HEAP[$19]; //@line 1287 "bufferedio.c"
        var $21=((($20) - 1)&4294967295); //@line 1287 "bufferedio.c"
        var $22=HEAP[$memobj]; //@line 1287 "bufferedio.c"
        var $23=(($22)&4294967295); //@line 1287 "bufferedio.c"
        HEAP[$23]=$21; //@line 1287 "bufferedio.c"
        var $24=HEAP[$memobj]; //@line 1287 "bufferedio.c"
        var $25=(($24)&4294967295); //@line 1287 "bufferedio.c"
        var $26=HEAP[$25]; //@line 1287 "bufferedio.c"
        var $27=((($26))|0)==0; //@line 1287 "bufferedio.c"
        if ($27) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1287 "bufferedio.c"
      case 7: // $bb6
        var $28=HEAP[$memobj]; //@line 1287 "bufferedio.c"
        var $29=(($28+4)&4294967295); //@line 1287 "bufferedio.c"
        var $30=HEAP[$29]; //@line 1287 "bufferedio.c"
        var $31=(($30+24)&4294967295); //@line 1287 "bufferedio.c"
        var $32=HEAP[$31]; //@line 1287 "bufferedio.c"
        var $33=HEAP[$memobj]; //@line 1287 "bufferedio.c"
        FUNCTION_TABLE[$32]($33); //@line 1287 "bufferedio.c"
        __label__ = 8; break; //@line 1287 "bufferedio.c"
      case 8: // $bb7
        var $34=HEAP[$res]; //@line 1288 "bufferedio.c"
        var $35=($34)==0; //@line 1288 "bufferedio.c"
        if ($35) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1288 "bufferedio.c"
      case 9: // $bb8
        HEAP[$0]=-1; //@line 1289 "bufferedio.c"
        __label__ = 23; break; //@line 1289 "bufferedio.c"
      case 10: // $bb9
        var $36=HEAP[$res]; //@line 1290 "bufferedio.c"
        var $37=($36)==(__Py_NoneStruct); //@line 1290 "bufferedio.c"
        if ($37) { __label__ = 11; break; } else { __label__ = 14; break; } //@line 1290 "bufferedio.c"
      case 11: // $bb10
        var $38=HEAP[$res]; //@line 1292 "bufferedio.c"
        var $39=(($38)&4294967295); //@line 1292 "bufferedio.c"
        var $40=HEAP[$39]; //@line 1292 "bufferedio.c"
        var $41=((($40) - 1)&4294967295); //@line 1292 "bufferedio.c"
        var $42=HEAP[$res]; //@line 1292 "bufferedio.c"
        var $43=(($42)&4294967295); //@line 1292 "bufferedio.c"
        HEAP[$43]=$41; //@line 1292 "bufferedio.c"
        var $44=HEAP[$res]; //@line 1292 "bufferedio.c"
        var $45=(($44)&4294967295); //@line 1292 "bufferedio.c"
        var $46=HEAP[$45]; //@line 1292 "bufferedio.c"
        var $47=((($46))|0)==0; //@line 1292 "bufferedio.c"
        if ($47) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1292 "bufferedio.c"
      case 12: // $bb11
        var $48=HEAP[$res]; //@line 1292 "bufferedio.c"
        var $49=(($48+4)&4294967295); //@line 1292 "bufferedio.c"
        var $50=HEAP[$49]; //@line 1292 "bufferedio.c"
        var $51=(($50+24)&4294967295); //@line 1292 "bufferedio.c"
        var $52=HEAP[$51]; //@line 1292 "bufferedio.c"
        var $53=HEAP[$res]; //@line 1292 "bufferedio.c"
        FUNCTION_TABLE[$52]($53); //@line 1292 "bufferedio.c"
        __label__ = 13; break; //@line 1292 "bufferedio.c"
      case 13: // $bb12
        HEAP[$0]=-2; //@line 1293 "bufferedio.c"
        __label__ = 23; break; //@line 1293 "bufferedio.c"
      case 14: // $bb13
        var $54=HEAP[_PyExc_ValueError]; //@line 1295 "bufferedio.c"
        var $55=HEAP[$res]; //@line 1295 "bufferedio.c"
        var $56=_PyNumber_AsSsize_t($55, $54); //@line 1295 "bufferedio.c"
        HEAP[$n]=$56; //@line 1295 "bufferedio.c"
        var $57=HEAP[$res]; //@line 1296 "bufferedio.c"
        var $58=(($57)&4294967295); //@line 1296 "bufferedio.c"
        var $59=HEAP[$58]; //@line 1296 "bufferedio.c"
        var $60=((($59) - 1)&4294967295); //@line 1296 "bufferedio.c"
        var $61=HEAP[$res]; //@line 1296 "bufferedio.c"
        var $62=(($61)&4294967295); //@line 1296 "bufferedio.c"
        HEAP[$62]=$60; //@line 1296 "bufferedio.c"
        var $63=HEAP[$res]; //@line 1296 "bufferedio.c"
        var $64=(($63)&4294967295); //@line 1296 "bufferedio.c"
        var $65=HEAP[$64]; //@line 1296 "bufferedio.c"
        var $66=((($65))|0)==0; //@line 1296 "bufferedio.c"
        if ($66) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1296 "bufferedio.c"
      case 15: // $bb14
        var $67=HEAP[$res]; //@line 1296 "bufferedio.c"
        var $68=(($67+4)&4294967295); //@line 1296 "bufferedio.c"
        var $69=HEAP[$68]; //@line 1296 "bufferedio.c"
        var $70=(($69+24)&4294967295); //@line 1296 "bufferedio.c"
        var $71=HEAP[$70]; //@line 1296 "bufferedio.c"
        var $72=HEAP[$res]; //@line 1296 "bufferedio.c"
        FUNCTION_TABLE[$71]($72); //@line 1296 "bufferedio.c"
        __label__ = 16; break; //@line 1296 "bufferedio.c"
      case 16: // $bb15
        var $73=HEAP[$n]; //@line 1297 "bufferedio.c"
        var $74=((($73))|0) < 0; //@line 1297 "bufferedio.c"
        if ($74) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 1297 "bufferedio.c"
      case 17: // $bb16
        var $75=HEAP[$n]; //@line 1297 "bufferedio.c"
        var $76=HEAP[$len_addr]; //@line 1297 "bufferedio.c"
        var $77=((($75))|0) > ((($76))|0); //@line 1297 "bufferedio.c"
        if ($77) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 1297 "bufferedio.c"
      case 18: // $bb17
        var $78=HEAP[_PyExc_IOError]; //@line 1298 "bufferedio.c"
        var $79=HEAP[$n]; //@line 1298 "bufferedio.c"
        var $80=HEAP[$len_addr]; //@line 1298 "bufferedio.c"
        var $81=_PyErr_Format($78, ((__str38)&4294967295), $79, $80); //@line 1298 "bufferedio.c"
        HEAP[$0]=-1; //@line 1301 "bufferedio.c"
        __label__ = 23; break; //@line 1301 "bufferedio.c"
      case 19: // $bb18
        var $82=HEAP[$n]; //@line 1303 "bufferedio.c"
        var $83=((($82))|0) > 0; //@line 1303 "bufferedio.c"
        if ($83) { __label__ = 20; break; } else { __label__ = 22; break; } //@line 1303 "bufferedio.c"
      case 20: // $bb19
        var $84=HEAP[$self_addr]; //@line 1303 "bufferedio.c"
        var $85=(($84+32)&4294967295); //@line 1303 "bufferedio.c"
        var $86=HEAP[$85]; //@line 1303 "bufferedio.c"
        var $87=reSign(($86), 64, 0)!=-1; //@line 1303 "bufferedio.c"
        if ($87) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 1303 "bufferedio.c"
      case 21: // $bb20
        var $88=HEAP[$self_addr]; //@line 1304 "bufferedio.c"
        var $89=(($88+32)&4294967295); //@line 1304 "bufferedio.c"
        var $90=HEAP[$89]; //@line 1304 "bufferedio.c"
        var $91=HEAP[$n]; //@line 1304 "bufferedio.c"
        var $92=((($91))|0); //@line 1304 "bufferedio.c"
        var $93=($90) + ($92); //@line 1304 "bufferedio.c"
        var $94=HEAP[$self_addr]; //@line 1304 "bufferedio.c"
        var $95=(($94+32)&4294967295); //@line 1304 "bufferedio.c"
        HEAP[$95]=$93; //@line 1304 "bufferedio.c"
        __label__ = 22; break; //@line 1304 "bufferedio.c"
      case 22: // $bb21
        var $96=HEAP[$n]; //@line 1305 "bufferedio.c"
        HEAP[$0]=$96; //@line 1305 "bufferedio.c"
        __label__ = 23; break; //@line 1305 "bufferedio.c"
      case 23: // $bb22
        var $97=HEAP[$0]; //@line 1275 "bufferedio.c"
        HEAP[$retval]=$97; //@line 1275 "bufferedio.c"
        __label__ = 24; break; //@line 1275 "bufferedio.c"
      case 24: // $return
        var $retval23=HEAP[$retval]; //@line 1275 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval23; //@line 1275 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __bufferedreader_fill_buffer($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $start=__stackBase__+12;
        var $len=__stackBase__+16;
        var $n=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 1312 "bufferedio.c"
        var $2=(($1+20)&4294967295); //@line 1312 "bufferedio.c"
        var $3=HEAP[$2]; //@line 1312 "bufferedio.c"
        var $4=((($3))|0)==0; //@line 1312 "bufferedio.c"
        if ($4) { __label__ = 3; break; } else { __label__ = 1; break; } //@line 1312 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 1312 "bufferedio.c"
        var $6=(($5+60)&4294967295); //@line 1312 "bufferedio.c"
        var $7=HEAP[$6]; //@line 1312 "bufferedio.c"
        var $8=reSign(($7), 64, 0)==-1; //@line 1312 "bufferedio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 1312 "bufferedio.c"
      case 2: // $bb1
        var $9=HEAP[$self_addr]; //@line 1313 "bufferedio.c"
        var $10=(($9+60)&4294967295); //@line 1313 "bufferedio.c"
        var $11=HEAP[$10]; //@line 1313 "bufferedio.c"
        var $12=((($11)) & 4294967295); //@line 1313 "bufferedio.c"
        HEAP[$start]=$12; //@line 1313 "bufferedio.c"
        __label__ = 4; break; //@line 1313 "bufferedio.c"
      case 3: // $bb2
        HEAP[$start]=0; //@line 1315 "bufferedio.c"
        __label__ = 4; break; //@line 1315 "bufferedio.c"
      case 4: // $bb3
        var $13=HEAP[$self_addr]; //@line 1316 "bufferedio.c"
        var $14=(($13+84)&4294967295); //@line 1316 "bufferedio.c"
        var $15=HEAP[$14]; //@line 1316 "bufferedio.c"
        var $16=HEAP[$start]; //@line 1316 "bufferedio.c"
        var $17=((($15) - ($16))&4294967295); //@line 1316 "bufferedio.c"
        HEAP[$len]=$17; //@line 1316 "bufferedio.c"
        var $18=HEAP[$self_addr]; //@line 1317 "bufferedio.c"
        var $19=(($18+40)&4294967295); //@line 1317 "bufferedio.c"
        var $20=HEAP[$19]; //@line 1317 "bufferedio.c"
        var $21=HEAP[$start]; //@line 1317 "bufferedio.c"
        var $22=(($20+$21)&4294967295); //@line 1317 "bufferedio.c"
        var $23=HEAP[$self_addr]; //@line 1317 "bufferedio.c"
        var $24=HEAP[$len]; //@line 1317 "bufferedio.c"
        var $25=__bufferedreader_raw_read($23, $22, $24); //@line 1317 "bufferedio.c"
        HEAP[$n]=$25; //@line 1317 "bufferedio.c"
        var $26=HEAP[$n]; //@line 1318 "bufferedio.c"
        var $27=((($26))|0) <= 0; //@line 1318 "bufferedio.c"
        if ($27) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1318 "bufferedio.c"
      case 5: // $bb4
        var $28=HEAP[$n]; //@line 1319 "bufferedio.c"
        HEAP[$0]=$28; //@line 1319 "bufferedio.c"
        __label__ = 7; break; //@line 1319 "bufferedio.c"
      case 6: // $bb5
        var $29=HEAP[$start]; //@line 1320 "bufferedio.c"
        var $30=HEAP[$n]; //@line 1320 "bufferedio.c"
        var $31=((($29) + ($30))&4294967295); //@line 1320 "bufferedio.c"
        var $32=((($31))|0); //@line 1320 "bufferedio.c"
        var $33=HEAP[$self_addr]; //@line 1320 "bufferedio.c"
        var $34=(($33+60)&4294967295); //@line 1320 "bufferedio.c"
        HEAP[$34]=$32; //@line 1320 "bufferedio.c"
        var $35=HEAP[$start]; //@line 1321 "bufferedio.c"
        var $36=HEAP[$n]; //@line 1321 "bufferedio.c"
        var $37=((($35) + ($36))&4294967295); //@line 1321 "bufferedio.c"
        var $38=((($37))|0); //@line 1321 "bufferedio.c"
        var $39=HEAP[$self_addr]; //@line 1321 "bufferedio.c"
        var $40=(($39+52)&4294967295); //@line 1321 "bufferedio.c"
        HEAP[$40]=$38; //@line 1321 "bufferedio.c"
        var $41=HEAP[$n]; //@line 1322 "bufferedio.c"
        HEAP[$0]=$41; //@line 1322 "bufferedio.c"
        __label__ = 7; break; //@line 1322 "bufferedio.c"
      case 7: // $bb6
        var $42=HEAP[$0]; //@line 1319 "bufferedio.c"
        HEAP[$retval]=$42; //@line 1319 "bufferedio.c"
        __label__ = 8; break; //@line 1319 "bufferedio.c"
      case 8: // $return
        var $retval7=HEAP[$retval]; //@line 1319 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 1319 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __bufferedreader_read_all($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $iftmp_182=__stackBase__+8;
        var $0=__stackBase__+12;
        var $current_size=__stackBase__+16;
        var $res=__stackBase__+20;
        var $data=__stackBase__+24;
        var $chunks=__stackBase__+28;
        var $_py_tmp=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$data]=0; //@line 1329 "bufferedio.c"
        var $1=_PyList_New(0); //@line 1330 "bufferedio.c"
        HEAP[$chunks]=$1; //@line 1330 "bufferedio.c"
        var $2=HEAP[$chunks]; //@line 1332 "bufferedio.c"
        var $3=($2)==0; //@line 1332 "bufferedio.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1332 "bufferedio.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 1333 "bufferedio.c"
        __label__ = 54; break; //@line 1333 "bufferedio.c"
      case 2: // $bb1
        var $4=HEAP[$self_addr]; //@line 1336 "bufferedio.c"
        var $5=(($4+20)&4294967295); //@line 1336 "bufferedio.c"
        var $6=HEAP[$5]; //@line 1336 "bufferedio.c"
        var $7=((($6))|0)==0; //@line 1336 "bufferedio.c"
        if ($7) { __label__ = 6; break; } else { __label__ = 3; break; } //@line 1336 "bufferedio.c"
      case 3: // $bb2
        var $8=HEAP[$self_addr]; //@line 1336 "bufferedio.c"
        var $9=(($8+20)&4294967295); //@line 1336 "bufferedio.c"
        var $10=HEAP[$9]; //@line 1336 "bufferedio.c"
        var $11=((($10))|0)==0; //@line 1336 "bufferedio.c"
        if ($11) { __label__ = 6; break; } else { __label__ = 4; break; } //@line 1336 "bufferedio.c"
      case 4: // $bb3
        var $12=HEAP[$self_addr]; //@line 1336 "bufferedio.c"
        var $13=(($12+60)&4294967295); //@line 1336 "bufferedio.c"
        var $14=HEAP[$13]; //@line 1336 "bufferedio.c"
        var $15=reSign(($14), 64, 0)==-1; //@line 1336 "bufferedio.c"
        if ($15) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 1336 "bufferedio.c"
      case 5: // $bb4
        var $16=HEAP[$self_addr]; //@line 1336 "bufferedio.c"
        var $17=(($16+60)&4294967295); //@line 1336 "bufferedio.c"
        var $18=HEAP[$17]; //@line 1336 "bufferedio.c"
        var $19=((($18)) & 4294967295); //@line 1336 "bufferedio.c"
        var $20=HEAP[$self_addr]; //@line 1336 "bufferedio.c"
        var $21=(($20+44)&4294967295); //@line 1336 "bufferedio.c"
        var $22=HEAP[$21]; //@line 1336 "bufferedio.c"
        var $23=((($22)) & 4294967295); //@line 1336 "bufferedio.c"
        var $24=((($19) - ($23))&4294967295); //@line 1336 "bufferedio.c"
        HEAP[$iftmp_182]=$24; //@line 1336 "bufferedio.c"
        __label__ = 7; break; //@line 1336 "bufferedio.c"
      case 6: // $bb5
        HEAP[$iftmp_182]=0; //@line 1336 "bufferedio.c"
        __label__ = 7; break; //@line 1336 "bufferedio.c"
      case 7: // $bb6
        var $25=HEAP[$iftmp_182]; //@line 1336 "bufferedio.c"
        HEAP[$current_size]=$25; //@line 1336 "bufferedio.c"
        var $26=HEAP[$current_size]; //@line 1337 "bufferedio.c"
        var $27=((($26))|0)!=0; //@line 1337 "bufferedio.c"
        if ($27) { __label__ = 8; break; } else { __label__ = 12; break; } //@line 1337 "bufferedio.c"
      case 8: // $bb7
        var $28=HEAP[$self_addr]; //@line 1338 "bufferedio.c"
        var $29=(($28+40)&4294967295); //@line 1338 "bufferedio.c"
        var $30=HEAP[$29]; //@line 1338 "bufferedio.c"
        var $31=HEAP[$self_addr]; //@line 1338 "bufferedio.c"
        var $32=(($31+44)&4294967295); //@line 1338 "bufferedio.c"
        var $33=HEAP[$32]; //@line 1338 "bufferedio.c"
        var $34=((($33)) & 4294967295); //@line 1338 "bufferedio.c"
        var $35=(($30+$34)&4294967295); //@line 1338 "bufferedio.c"
        var $36=HEAP[$current_size]; //@line 1338 "bufferedio.c"
        var $37=_PyString_FromStringAndSize($35, $36); //@line 1338 "bufferedio.c"
        HEAP[$data]=$37; //@line 1338 "bufferedio.c"
        var $38=HEAP[$data]; //@line 1340 "bufferedio.c"
        var $39=($38)==0; //@line 1340 "bufferedio.c"
        if ($39) { __label__ = 9; break; } else { __label__ = 12; break; } //@line 1340 "bufferedio.c"
      case 9: // $bb8
        var $40=HEAP[$chunks]; //@line 1341 "bufferedio.c"
        var $41=(($40)&4294967295); //@line 1341 "bufferedio.c"
        var $42=HEAP[$41]; //@line 1341 "bufferedio.c"
        var $43=((($42) - 1)&4294967295); //@line 1341 "bufferedio.c"
        var $44=HEAP[$chunks]; //@line 1341 "bufferedio.c"
        var $45=(($44)&4294967295); //@line 1341 "bufferedio.c"
        HEAP[$45]=$43; //@line 1341 "bufferedio.c"
        var $46=HEAP[$chunks]; //@line 1341 "bufferedio.c"
        var $47=(($46)&4294967295); //@line 1341 "bufferedio.c"
        var $48=HEAP[$47]; //@line 1341 "bufferedio.c"
        var $49=((($48))|0)==0; //@line 1341 "bufferedio.c"
        if ($49) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1341 "bufferedio.c"
      case 10: // $bb9
        var $50=HEAP[$chunks]; //@line 1341 "bufferedio.c"
        var $51=(($50+4)&4294967295); //@line 1341 "bufferedio.c"
        var $52=HEAP[$51]; //@line 1341 "bufferedio.c"
        var $53=(($52+24)&4294967295); //@line 1341 "bufferedio.c"
        var $54=HEAP[$53]; //@line 1341 "bufferedio.c"
        var $55=HEAP[$chunks]; //@line 1341 "bufferedio.c"
        FUNCTION_TABLE[$54]($55); //@line 1341 "bufferedio.c"
        __label__ = 11; break; //@line 1341 "bufferedio.c"
      case 11: // $bb10
        HEAP[$0]=0; //@line 1342 "bufferedio.c"
        __label__ = 54; break; //@line 1342 "bufferedio.c"
      case 12: // $bb11
        var $56=HEAP[$self_addr]; //@line 1345 "bufferedio.c"
        __bufferedreader_reset_buf($56); //@line 1345 "bufferedio.c"
        var $57=HEAP[$self_addr]; //@line 1347 "bufferedio.c"
        var $58=(($57+24)&4294967295); //@line 1347 "bufferedio.c"
        var $59=HEAP[$58]; //@line 1347 "bufferedio.c"
        var $60=((($59))|0)!=0; //@line 1347 "bufferedio.c"
        if ($60) { __label__ = 13; break; } else { __label__ = 20; break; } //@line 1347 "bufferedio.c"
      case 13: // $bb12
        var $61=HEAP[$self_addr]; //@line 1348 "bufferedio.c"
        var $62=__bufferedwriter_flush_unlocked($61, 1); //@line 1348 "bufferedio.c"
        HEAP[$res]=$62; //@line 1348 "bufferedio.c"
        var $63=HEAP[$res]; //@line 1349 "bufferedio.c"
        var $64=($63)==0; //@line 1349 "bufferedio.c"
        if ($64) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 1349 "bufferedio.c"
      case 14: // $bb13
        var $65=HEAP[$chunks]; //@line 1350 "bufferedio.c"
        var $66=(($65)&4294967295); //@line 1350 "bufferedio.c"
        var $67=HEAP[$66]; //@line 1350 "bufferedio.c"
        var $68=((($67) - 1)&4294967295); //@line 1350 "bufferedio.c"
        var $69=HEAP[$chunks]; //@line 1350 "bufferedio.c"
        var $70=(($69)&4294967295); //@line 1350 "bufferedio.c"
        HEAP[$70]=$68; //@line 1350 "bufferedio.c"
        var $71=HEAP[$chunks]; //@line 1350 "bufferedio.c"
        var $72=(($71)&4294967295); //@line 1350 "bufferedio.c"
        var $73=HEAP[$72]; //@line 1350 "bufferedio.c"
        var $74=((($73))|0)==0; //@line 1350 "bufferedio.c"
        if ($74) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1350 "bufferedio.c"
      case 15: // $bb14
        var $75=HEAP[$chunks]; //@line 1350 "bufferedio.c"
        var $76=(($75+4)&4294967295); //@line 1350 "bufferedio.c"
        var $77=HEAP[$76]; //@line 1350 "bufferedio.c"
        var $78=(($77+24)&4294967295); //@line 1350 "bufferedio.c"
        var $79=HEAP[$78]; //@line 1350 "bufferedio.c"
        var $80=HEAP[$chunks]; //@line 1350 "bufferedio.c"
        FUNCTION_TABLE[$79]($80); //@line 1350 "bufferedio.c"
        __label__ = 16; break; //@line 1350 "bufferedio.c"
      case 16: // $bb15
        HEAP[$0]=0; //@line 1351 "bufferedio.c"
        __label__ = 54; break; //@line 1351 "bufferedio.c"
      case 17: // $bb16
        var $81=HEAP[$res]; //@line 1353 "bufferedio.c"
        var $82=($81)!=0; //@line 1353 "bufferedio.c"
        if ($82) { __label__ = 18; break; } else { __label__ = 20; break; } //@line 1353 "bufferedio.c"
      case 18: // $bb17
        var $83=HEAP[$res]; //@line 1353 "bufferedio.c"
        HEAP[$_py_tmp]=$83; //@line 1353 "bufferedio.c"
        HEAP[$res]=0; //@line 1353 "bufferedio.c"
        var $84=HEAP[$_py_tmp]; //@line 1353 "bufferedio.c"
        var $85=(($84)&4294967295); //@line 1353 "bufferedio.c"
        var $86=HEAP[$85]; //@line 1353 "bufferedio.c"
        var $87=((($86) - 1)&4294967295); //@line 1353 "bufferedio.c"
        var $88=HEAP[$_py_tmp]; //@line 1353 "bufferedio.c"
        var $89=(($88)&4294967295); //@line 1353 "bufferedio.c"
        HEAP[$89]=$87; //@line 1353 "bufferedio.c"
        var $90=HEAP[$_py_tmp]; //@line 1353 "bufferedio.c"
        var $91=(($90)&4294967295); //@line 1353 "bufferedio.c"
        var $92=HEAP[$91]; //@line 1353 "bufferedio.c"
        var $93=((($92))|0)==0; //@line 1353 "bufferedio.c"
        if ($93) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 1353 "bufferedio.c"
      case 19: // $bb18
        var $94=HEAP[$_py_tmp]; //@line 1353 "bufferedio.c"
        var $95=(($94+4)&4294967295); //@line 1353 "bufferedio.c"
        var $96=HEAP[$95]; //@line 1353 "bufferedio.c"
        var $97=(($96+24)&4294967295); //@line 1353 "bufferedio.c"
        var $98=HEAP[$97]; //@line 1353 "bufferedio.c"
        var $99=HEAP[$_py_tmp]; //@line 1353 "bufferedio.c"
        FUNCTION_TABLE[$98]($99); //@line 1353 "bufferedio.c"
        __label__ = 20; break; //@line 1353 "bufferedio.c"
      case 20: // $bb19
        var $100=HEAP[$data]; //@line 1356 "bufferedio.c"
        var $101=($100)!=0; //@line 1356 "bufferedio.c"
        if ($101) { __label__ = 21; break; } else { __label__ = 29; break; } //@line 1356 "bufferedio.c"
      case 21: // $bb20
        var $102=HEAP[$chunks]; //@line 1357 "bufferedio.c"
        var $103=HEAP[$data]; //@line 1357 "bufferedio.c"
        var $104=_PyList_Append($102, $103); //@line 1357 "bufferedio.c"
        var $105=((($104))|0) < 0; //@line 1357 "bufferedio.c"
        if ($105) { __label__ = 22; break; } else { __label__ = 27; break; } //@line 1357 "bufferedio.c"
      case 22: // $bb21
        var $106=HEAP[$data]; //@line 1358 "bufferedio.c"
        var $107=(($106)&4294967295); //@line 1358 "bufferedio.c"
        var $108=HEAP[$107]; //@line 1358 "bufferedio.c"
        var $109=((($108) - 1)&4294967295); //@line 1358 "bufferedio.c"
        var $110=HEAP[$data]; //@line 1358 "bufferedio.c"
        var $111=(($110)&4294967295); //@line 1358 "bufferedio.c"
        HEAP[$111]=$109; //@line 1358 "bufferedio.c"
        var $112=HEAP[$data]; //@line 1358 "bufferedio.c"
        var $113=(($112)&4294967295); //@line 1358 "bufferedio.c"
        var $114=HEAP[$113]; //@line 1358 "bufferedio.c"
        var $115=((($114))|0)==0; //@line 1358 "bufferedio.c"
        if ($115) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 1358 "bufferedio.c"
      case 23: // $bb22
        var $116=HEAP[$data]; //@line 1358 "bufferedio.c"
        var $117=(($116+4)&4294967295); //@line 1358 "bufferedio.c"
        var $118=HEAP[$117]; //@line 1358 "bufferedio.c"
        var $119=(($118+24)&4294967295); //@line 1358 "bufferedio.c"
        var $120=HEAP[$119]; //@line 1358 "bufferedio.c"
        var $121=HEAP[$data]; //@line 1358 "bufferedio.c"
        FUNCTION_TABLE[$120]($121); //@line 1358 "bufferedio.c"
        __label__ = 24; break; //@line 1358 "bufferedio.c"
      case 24: // $bb23
        var $122=HEAP[$chunks]; //@line 1359 "bufferedio.c"
        var $123=(($122)&4294967295); //@line 1359 "bufferedio.c"
        var $124=HEAP[$123]; //@line 1359 "bufferedio.c"
        var $125=((($124) - 1)&4294967295); //@line 1359 "bufferedio.c"
        var $126=HEAP[$chunks]; //@line 1359 "bufferedio.c"
        var $127=(($126)&4294967295); //@line 1359 "bufferedio.c"
        HEAP[$127]=$125; //@line 1359 "bufferedio.c"
        var $128=HEAP[$chunks]; //@line 1359 "bufferedio.c"
        var $129=(($128)&4294967295); //@line 1359 "bufferedio.c"
        var $130=HEAP[$129]; //@line 1359 "bufferedio.c"
        var $131=((($130))|0)==0; //@line 1359 "bufferedio.c"
        if ($131) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 1359 "bufferedio.c"
      case 25: // $bb24
        var $132=HEAP[$chunks]; //@line 1359 "bufferedio.c"
        var $133=(($132+4)&4294967295); //@line 1359 "bufferedio.c"
        var $134=HEAP[$133]; //@line 1359 "bufferedio.c"
        var $135=(($134+24)&4294967295); //@line 1359 "bufferedio.c"
        var $136=HEAP[$135]; //@line 1359 "bufferedio.c"
        var $137=HEAP[$chunks]; //@line 1359 "bufferedio.c"
        FUNCTION_TABLE[$136]($137); //@line 1359 "bufferedio.c"
        __label__ = 26; break; //@line 1359 "bufferedio.c"
      case 26: // $bb25
        HEAP[$0]=0; //@line 1360 "bufferedio.c"
        __label__ = 54; break; //@line 1360 "bufferedio.c"
      case 27: // $bb26
        var $138=HEAP[$data]; //@line 1362 "bufferedio.c"
        var $139=(($138)&4294967295); //@line 1362 "bufferedio.c"
        var $140=HEAP[$139]; //@line 1362 "bufferedio.c"
        var $141=((($140) - 1)&4294967295); //@line 1362 "bufferedio.c"
        var $142=HEAP[$data]; //@line 1362 "bufferedio.c"
        var $143=(($142)&4294967295); //@line 1362 "bufferedio.c"
        HEAP[$143]=$141; //@line 1362 "bufferedio.c"
        var $144=HEAP[$data]; //@line 1362 "bufferedio.c"
        var $145=(($144)&4294967295); //@line 1362 "bufferedio.c"
        var $146=HEAP[$145]; //@line 1362 "bufferedio.c"
        var $147=((($146))|0)==0; //@line 1362 "bufferedio.c"
        if ($147) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 1362 "bufferedio.c"
      case 28: // $bb27
        var $148=HEAP[$data]; //@line 1362 "bufferedio.c"
        var $149=(($148+4)&4294967295); //@line 1362 "bufferedio.c"
        var $150=HEAP[$149]; //@line 1362 "bufferedio.c"
        var $151=(($150+24)&4294967295); //@line 1362 "bufferedio.c"
        var $152=HEAP[$151]; //@line 1362 "bufferedio.c"
        var $153=HEAP[$data]; //@line 1362 "bufferedio.c"
        FUNCTION_TABLE[$152]($153); //@line 1362 "bufferedio.c"
        __label__ = 29; break; //@line 1362 "bufferedio.c"
      case 29: // $bb28
        var $154=HEAP[__PyIO_str_read]; //@line 1366 "bufferedio.c"
        var $155=HEAP[$self_addr]; //@line 1366 "bufferedio.c"
        var $156=(($155+8)&4294967295); //@line 1366 "bufferedio.c"
        var $157=HEAP[$156]; //@line 1366 "bufferedio.c"
        var $158=_PyObject_CallMethodObjArgs($157, $154, 0); //@line 1366 "bufferedio.c"
        HEAP[$data]=$158; //@line 1366 "bufferedio.c"
        var $159=HEAP[$data]; //@line 1367 "bufferedio.c"
        var $160=($159)==0; //@line 1367 "bufferedio.c"
        if ($160) { __label__ = 30; break; } else { __label__ = 33; break; } //@line 1367 "bufferedio.c"
      case 30: // $bb29
        var $161=HEAP[$chunks]; //@line 1368 "bufferedio.c"
        var $162=(($161)&4294967295); //@line 1368 "bufferedio.c"
        var $163=HEAP[$162]; //@line 1368 "bufferedio.c"
        var $164=((($163) - 1)&4294967295); //@line 1368 "bufferedio.c"
        var $165=HEAP[$chunks]; //@line 1368 "bufferedio.c"
        var $166=(($165)&4294967295); //@line 1368 "bufferedio.c"
        HEAP[$166]=$164; //@line 1368 "bufferedio.c"
        var $167=HEAP[$chunks]; //@line 1368 "bufferedio.c"
        var $168=(($167)&4294967295); //@line 1368 "bufferedio.c"
        var $169=HEAP[$168]; //@line 1368 "bufferedio.c"
        var $170=((($169))|0)==0; //@line 1368 "bufferedio.c"
        if ($170) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 1368 "bufferedio.c"
      case 31: // $bb30
        var $171=HEAP[$chunks]; //@line 1368 "bufferedio.c"
        var $172=(($171+4)&4294967295); //@line 1368 "bufferedio.c"
        var $173=HEAP[$172]; //@line 1368 "bufferedio.c"
        var $174=(($173+24)&4294967295); //@line 1368 "bufferedio.c"
        var $175=HEAP[$174]; //@line 1368 "bufferedio.c"
        var $176=HEAP[$chunks]; //@line 1368 "bufferedio.c"
        FUNCTION_TABLE[$175]($176); //@line 1368 "bufferedio.c"
        __label__ = 32; break; //@line 1368 "bufferedio.c"
      case 32: // $bb31
        HEAP[$0]=0; //@line 1369 "bufferedio.c"
        __label__ = 54; break; //@line 1369 "bufferedio.c"
      case 33: // $bb32
        var $177=HEAP[$data]; //@line 1371 "bufferedio.c"
        var $178=($177)!=(__Py_NoneStruct); //@line 1371 "bufferedio.c"
        if ($178) { __label__ = 34; break; } else { __label__ = 40; break; } //@line 1371 "bufferedio.c"
      case 34: // $bb33
        var $179=HEAP[$data]; //@line 1371 "bufferedio.c"
        var $180=(($179+4)&4294967295); //@line 1371 "bufferedio.c"
        var $181=HEAP[$180]; //@line 1371 "bufferedio.c"
        var $182=(($181+84)&4294967295); //@line 1371 "bufferedio.c"
        var $183=HEAP[$182]; //@line 1371 "bufferedio.c"
        var $184=($183) & 134217728; //@line 1371 "bufferedio.c"
        var $185=((($184))|0)==0; //@line 1371 "bufferedio.c"
        if ($185) { __label__ = 35; break; } else { __label__ = 40; break; } //@line 1371 "bufferedio.c"
      case 35: // $bb34
        var $186=HEAP[$data]; //@line 1372 "bufferedio.c"
        var $187=(($186)&4294967295); //@line 1372 "bufferedio.c"
        var $188=HEAP[$187]; //@line 1372 "bufferedio.c"
        var $189=((($188) - 1)&4294967295); //@line 1372 "bufferedio.c"
        var $190=HEAP[$data]; //@line 1372 "bufferedio.c"
        var $191=(($190)&4294967295); //@line 1372 "bufferedio.c"
        HEAP[$191]=$189; //@line 1372 "bufferedio.c"
        var $192=HEAP[$data]; //@line 1372 "bufferedio.c"
        var $193=(($192)&4294967295); //@line 1372 "bufferedio.c"
        var $194=HEAP[$193]; //@line 1372 "bufferedio.c"
        var $195=((($194))|0)==0; //@line 1372 "bufferedio.c"
        if ($195) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 1372 "bufferedio.c"
      case 36: // $bb35
        var $196=HEAP[$data]; //@line 1372 "bufferedio.c"
        var $197=(($196+4)&4294967295); //@line 1372 "bufferedio.c"
        var $198=HEAP[$197]; //@line 1372 "bufferedio.c"
        var $199=(($198+24)&4294967295); //@line 1372 "bufferedio.c"
        var $200=HEAP[$199]; //@line 1372 "bufferedio.c"
        var $201=HEAP[$data]; //@line 1372 "bufferedio.c"
        FUNCTION_TABLE[$200]($201); //@line 1372 "bufferedio.c"
        __label__ = 37; break; //@line 1372 "bufferedio.c"
      case 37: // $bb36
        var $202=HEAP[$chunks]; //@line 1373 "bufferedio.c"
        var $203=(($202)&4294967295); //@line 1373 "bufferedio.c"
        var $204=HEAP[$203]; //@line 1373 "bufferedio.c"
        var $205=((($204) - 1)&4294967295); //@line 1373 "bufferedio.c"
        var $206=HEAP[$chunks]; //@line 1373 "bufferedio.c"
        var $207=(($206)&4294967295); //@line 1373 "bufferedio.c"
        HEAP[$207]=$205; //@line 1373 "bufferedio.c"
        var $208=HEAP[$chunks]; //@line 1373 "bufferedio.c"
        var $209=(($208)&4294967295); //@line 1373 "bufferedio.c"
        var $210=HEAP[$209]; //@line 1373 "bufferedio.c"
        var $211=((($210))|0)==0; //@line 1373 "bufferedio.c"
        if ($211) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 1373 "bufferedio.c"
      case 38: // $bb37
        var $212=HEAP[$chunks]; //@line 1373 "bufferedio.c"
        var $213=(($212+4)&4294967295); //@line 1373 "bufferedio.c"
        var $214=HEAP[$213]; //@line 1373 "bufferedio.c"
        var $215=(($214+24)&4294967295); //@line 1373 "bufferedio.c"
        var $216=HEAP[$215]; //@line 1373 "bufferedio.c"
        var $217=HEAP[$chunks]; //@line 1373 "bufferedio.c"
        FUNCTION_TABLE[$216]($217); //@line 1373 "bufferedio.c"
        __label__ = 39; break; //@line 1373 "bufferedio.c"
      case 39: // $bb38
        var $218=HEAP[_PyExc_TypeError]; //@line 1374 "bufferedio.c"
        _PyErr_SetString($218, ((__str3)&4294967295)); //@line 1374 "bufferedio.c"
        HEAP[$0]=0; //@line 1375 "bufferedio.c"
        __label__ = 54; break; //@line 1375 "bufferedio.c"
      case 40: // $bb39
        var $219=HEAP[$data]; //@line 1377 "bufferedio.c"
        var $220=($219)==(__Py_NoneStruct); //@line 1377 "bufferedio.c"
        if ($220) { __label__ = 42; break; } else { __label__ = 41; break; } //@line 1377 "bufferedio.c"
      case 41: // $bb40
        var $221=HEAP[$data]; //@line 1377 "bufferedio.c"
        var $222=$221; //@line 1377 "bufferedio.c"
        var $223=(($222+8)&4294967295); //@line 1377 "bufferedio.c"
        var $224=HEAP[$223]; //@line 1377 "bufferedio.c"
        var $225=((($224))|0)==0; //@line 1377 "bufferedio.c"
        if ($225) { __label__ = 42; break; } else { __label__ = 51; break; } //@line 1377 "bufferedio.c"
      case 42: // $bb41
        var $226=HEAP[$current_size]; //@line 1378 "bufferedio.c"
        var $227=((($226))|0)==0; //@line 1378 "bufferedio.c"
        if ($227) { __label__ = 43; break; } else { __label__ = 46; break; } //@line 1378 "bufferedio.c"
      case 43: // $bb42
        var $228=HEAP[$chunks]; //@line 1379 "bufferedio.c"
        var $229=(($228)&4294967295); //@line 1379 "bufferedio.c"
        var $230=HEAP[$229]; //@line 1379 "bufferedio.c"
        var $231=((($230) - 1)&4294967295); //@line 1379 "bufferedio.c"
        var $232=HEAP[$chunks]; //@line 1379 "bufferedio.c"
        var $233=(($232)&4294967295); //@line 1379 "bufferedio.c"
        HEAP[$233]=$231; //@line 1379 "bufferedio.c"
        var $234=HEAP[$chunks]; //@line 1379 "bufferedio.c"
        var $235=(($234)&4294967295); //@line 1379 "bufferedio.c"
        var $236=HEAP[$235]; //@line 1379 "bufferedio.c"
        var $237=((($236))|0)==0; //@line 1379 "bufferedio.c"
        if ($237) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 1379 "bufferedio.c"
      case 44: // $bb43
        var $238=HEAP[$chunks]; //@line 1379 "bufferedio.c"
        var $239=(($238+4)&4294967295); //@line 1379 "bufferedio.c"
        var $240=HEAP[$239]; //@line 1379 "bufferedio.c"
        var $241=(($240+24)&4294967295); //@line 1379 "bufferedio.c"
        var $242=HEAP[$241]; //@line 1379 "bufferedio.c"
        var $243=HEAP[$chunks]; //@line 1379 "bufferedio.c"
        FUNCTION_TABLE[$242]($243); //@line 1379 "bufferedio.c"
        __label__ = 45; break; //@line 1379 "bufferedio.c"
      case 45: // $bb44
        var $244=HEAP[$data]; //@line 1380 "bufferedio.c"
        HEAP[$0]=$244; //@line 1380 "bufferedio.c"
        __label__ = 54; break; //@line 1380 "bufferedio.c"
      case 46: // $bb45
        var $245=HEAP[__PyIO_empty_bytes]; //@line 1383 "bufferedio.c"
        var $246=HEAP[$chunks]; //@line 1383 "bufferedio.c"
        var $247=__PyString_Join($245, $246); //@line 1383 "bufferedio.c"
        HEAP[$res]=$247; //@line 1383 "bufferedio.c"
        var $248=HEAP[$data]; //@line 1384 "bufferedio.c"
        var $249=(($248)&4294967295); //@line 1384 "bufferedio.c"
        var $250=HEAP[$249]; //@line 1384 "bufferedio.c"
        var $251=((($250) - 1)&4294967295); //@line 1384 "bufferedio.c"
        var $252=HEAP[$data]; //@line 1384 "bufferedio.c"
        var $253=(($252)&4294967295); //@line 1384 "bufferedio.c"
        HEAP[$253]=$251; //@line 1384 "bufferedio.c"
        var $254=HEAP[$data]; //@line 1384 "bufferedio.c"
        var $255=(($254)&4294967295); //@line 1384 "bufferedio.c"
        var $256=HEAP[$255]; //@line 1384 "bufferedio.c"
        var $257=((($256))|0)==0; //@line 1384 "bufferedio.c"
        if ($257) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 1384 "bufferedio.c"
      case 47: // $bb46
        var $258=HEAP[$data]; //@line 1384 "bufferedio.c"
        var $259=(($258+4)&4294967295); //@line 1384 "bufferedio.c"
        var $260=HEAP[$259]; //@line 1384 "bufferedio.c"
        var $261=(($260+24)&4294967295); //@line 1384 "bufferedio.c"
        var $262=HEAP[$261]; //@line 1384 "bufferedio.c"
        var $263=HEAP[$data]; //@line 1384 "bufferedio.c"
        FUNCTION_TABLE[$262]($263); //@line 1384 "bufferedio.c"
        __label__ = 48; break; //@line 1384 "bufferedio.c"
      case 48: // $bb47
        var $264=HEAP[$chunks]; //@line 1385 "bufferedio.c"
        var $265=(($264)&4294967295); //@line 1385 "bufferedio.c"
        var $266=HEAP[$265]; //@line 1385 "bufferedio.c"
        var $267=((($266) - 1)&4294967295); //@line 1385 "bufferedio.c"
        var $268=HEAP[$chunks]; //@line 1385 "bufferedio.c"
        var $269=(($268)&4294967295); //@line 1385 "bufferedio.c"
        HEAP[$269]=$267; //@line 1385 "bufferedio.c"
        var $270=HEAP[$chunks]; //@line 1385 "bufferedio.c"
        var $271=(($270)&4294967295); //@line 1385 "bufferedio.c"
        var $272=HEAP[$271]; //@line 1385 "bufferedio.c"
        var $273=((($272))|0)==0; //@line 1385 "bufferedio.c"
        if ($273) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 1385 "bufferedio.c"
      case 49: // $bb48
        var $274=HEAP[$chunks]; //@line 1385 "bufferedio.c"
        var $275=(($274+4)&4294967295); //@line 1385 "bufferedio.c"
        var $276=HEAP[$275]; //@line 1385 "bufferedio.c"
        var $277=(($276+24)&4294967295); //@line 1385 "bufferedio.c"
        var $278=HEAP[$277]; //@line 1385 "bufferedio.c"
        var $279=HEAP[$chunks]; //@line 1385 "bufferedio.c"
        FUNCTION_TABLE[$278]($279); //@line 1385 "bufferedio.c"
        __label__ = 50; break; //@line 1385 "bufferedio.c"
      case 50: // $bb49
        var $280=HEAP[$res]; //@line 1386 "bufferedio.c"
        HEAP[$0]=$280; //@line 1386 "bufferedio.c"
        __label__ = 54; break; //@line 1386 "bufferedio.c"
      case 51: // $bb50
        var $281=HEAP[$data]; //@line 1389 "bufferedio.c"
        var $282=$281; //@line 1389 "bufferedio.c"
        var $283=(($282+8)&4294967295); //@line 1389 "bufferedio.c"
        var $284=HEAP[$283]; //@line 1389 "bufferedio.c"
        var $285=HEAP[$current_size]; //@line 1389 "bufferedio.c"
        var $286=((($284) + ($285))&4294967295); //@line 1389 "bufferedio.c"
        HEAP[$current_size]=$286; //@line 1389 "bufferedio.c"
        var $287=HEAP[$self_addr]; //@line 1390 "bufferedio.c"
        var $288=(($287+32)&4294967295); //@line 1390 "bufferedio.c"
        var $289=HEAP[$288]; //@line 1390 "bufferedio.c"
        var $290=reSign(($289), 64, 0)!=-1; //@line 1390 "bufferedio.c"
        if ($290) { __label__ = 52; break; } else { __label__ = 53; break; } //@line 1390 "bufferedio.c"
      case 52: // $bb51
        var $291=HEAP[$self_addr]; //@line 1391 "bufferedio.c"
        var $292=(($291+32)&4294967295); //@line 1391 "bufferedio.c"
        var $293=HEAP[$292]; //@line 1391 "bufferedio.c"
        var $294=HEAP[$data]; //@line 1391 "bufferedio.c"
        var $295=$294; //@line 1391 "bufferedio.c"
        var $296=(($295+8)&4294967295); //@line 1391 "bufferedio.c"
        var $297=HEAP[$296]; //@line 1391 "bufferedio.c"
        var $298=((($297))|0); //@line 1391 "bufferedio.c"
        var $299=($293) + ($298); //@line 1391 "bufferedio.c"
        var $300=HEAP[$self_addr]; //@line 1391 "bufferedio.c"
        var $301=(($300+32)&4294967295); //@line 1391 "bufferedio.c"
        HEAP[$301]=$299; //@line 1391 "bufferedio.c"
        __label__ = 53; break; //@line 1391 "bufferedio.c"
      case 53: // $bb52
        __label__ = 20; break; //@line 1391 "bufferedio.c"
      case 54: // $bb53
        var $302=HEAP[$0]; //@line 1333 "bufferedio.c"
        HEAP[$retval]=$302; //@line 1333 "bufferedio.c"
        __label__ = 55; break; //@line 1333 "bufferedio.c"
      case 55: // $return
        var $retval54=HEAP[$retval]; //@line 1333 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval54; //@line 1333 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __bufferedreader_read_fast($self, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $n_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $iftmp_189=__stackBase__+16;
        var $current_size=__stackBase__+20;
        var $res=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$n_addr]=$n;
        var $1=HEAP[$self_addr]; //@line 1402 "bufferedio.c"
        var $2=(($1+20)&4294967295); //@line 1402 "bufferedio.c"
        var $3=HEAP[$2]; //@line 1402 "bufferedio.c"
        var $4=((($3))|0)==0; //@line 1402 "bufferedio.c"
        if ($4) { __label__ = 4; break; } else { __label__ = 1; break; } //@line 1402 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 1402 "bufferedio.c"
        var $6=(($5+20)&4294967295); //@line 1402 "bufferedio.c"
        var $7=HEAP[$6]; //@line 1402 "bufferedio.c"
        var $8=((($7))|0)==0; //@line 1402 "bufferedio.c"
        if ($8) { __label__ = 4; break; } else { __label__ = 2; break; } //@line 1402 "bufferedio.c"
      case 2: // $bb1
        var $9=HEAP[$self_addr]; //@line 1402 "bufferedio.c"
        var $10=(($9+60)&4294967295); //@line 1402 "bufferedio.c"
        var $11=HEAP[$10]; //@line 1402 "bufferedio.c"
        var $12=reSign(($11), 64, 0)==-1; //@line 1402 "bufferedio.c"
        if ($12) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 1402 "bufferedio.c"
      case 3: // $bb2
        var $13=HEAP[$self_addr]; //@line 1402 "bufferedio.c"
        var $14=(($13+60)&4294967295); //@line 1402 "bufferedio.c"
        var $15=HEAP[$14]; //@line 1402 "bufferedio.c"
        var $16=((($15)) & 4294967295); //@line 1402 "bufferedio.c"
        var $17=HEAP[$self_addr]; //@line 1402 "bufferedio.c"
        var $18=(($17+44)&4294967295); //@line 1402 "bufferedio.c"
        var $19=HEAP[$18]; //@line 1402 "bufferedio.c"
        var $20=((($19)) & 4294967295); //@line 1402 "bufferedio.c"
        var $21=((($16) - ($20))&4294967295); //@line 1402 "bufferedio.c"
        HEAP[$iftmp_189]=$21; //@line 1402 "bufferedio.c"
        __label__ = 5; break; //@line 1402 "bufferedio.c"
      case 4: // $bb3
        HEAP[$iftmp_189]=0; //@line 1402 "bufferedio.c"
        __label__ = 5; break; //@line 1402 "bufferedio.c"
      case 5: // $bb4
        var $22=HEAP[$iftmp_189]; //@line 1402 "bufferedio.c"
        HEAP[$current_size]=$22; //@line 1402 "bufferedio.c"
        var $23=HEAP[$n_addr]; //@line 1403 "bufferedio.c"
        var $24=HEAP[$current_size]; //@line 1403 "bufferedio.c"
        var $25=((($23))|0) <= ((($24))|0); //@line 1403 "bufferedio.c"
        if ($25) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 1403 "bufferedio.c"
      case 6: // $bb5
        var $26=HEAP[$self_addr]; //@line 1405 "bufferedio.c"
        var $27=(($26+40)&4294967295); //@line 1405 "bufferedio.c"
        var $28=HEAP[$27]; //@line 1405 "bufferedio.c"
        var $29=HEAP[$self_addr]; //@line 1405 "bufferedio.c"
        var $30=(($29+44)&4294967295); //@line 1405 "bufferedio.c"
        var $31=HEAP[$30]; //@line 1405 "bufferedio.c"
        var $32=((($31)) & 4294967295); //@line 1405 "bufferedio.c"
        var $33=(($28+$32)&4294967295); //@line 1405 "bufferedio.c"
        var $34=HEAP[$n_addr]; //@line 1405 "bufferedio.c"
        var $35=_PyString_FromStringAndSize($33, $34); //@line 1405 "bufferedio.c"
        HEAP[$res]=$35; //@line 1405 "bufferedio.c"
        var $36=HEAP[$res]; //@line 1406 "bufferedio.c"
        var $37=($36)!=0; //@line 1406 "bufferedio.c"
        if ($37) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1406 "bufferedio.c"
      case 7: // $bb6
        var $38=HEAP[$self_addr]; //@line 1407 "bufferedio.c"
        var $39=(($38+44)&4294967295); //@line 1407 "bufferedio.c"
        var $40=HEAP[$39]; //@line 1407 "bufferedio.c"
        var $41=HEAP[$n_addr]; //@line 1407 "bufferedio.c"
        var $42=((($41))|0); //@line 1407 "bufferedio.c"
        var $43=($40) + ($42); //@line 1407 "bufferedio.c"
        var $44=HEAP[$self_addr]; //@line 1407 "bufferedio.c"
        var $45=(($44+44)&4294967295); //@line 1407 "bufferedio.c"
        HEAP[$45]=$43; //@line 1407 "bufferedio.c"
        __label__ = 8; break; //@line 1407 "bufferedio.c"
      case 8: // $bb7
        var $46=HEAP[$res]; //@line 1408 "bufferedio.c"
        HEAP[$0]=$46; //@line 1408 "bufferedio.c"
        __label__ = 10; break; //@line 1408 "bufferedio.c"
      case 9: // $bb8
        var $47=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 1410 "bufferedio.c"
        var $48=((($47) + 1)&4294967295); //@line 1410 "bufferedio.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$48; //@line 1410 "bufferedio.c"
        HEAP[$0]=__Py_NoneStruct; //@line 1410 "bufferedio.c"
        __label__ = 10; break; //@line 1410 "bufferedio.c"
      case 10: // $bb9
        var $49=HEAP[$0]; //@line 1408 "bufferedio.c"
        HEAP[$retval]=$49; //@line 1408 "bufferedio.c"
        __label__ = 11; break; //@line 1408 "bufferedio.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 1408 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 1408 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __bufferedreader_read_generic($self, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 52; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 52);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $n_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $iftmp_195=__stackBase__+12;
        var $0=__stackBase__+16;
        var $iftmp_190=__stackBase__+20;
        var $res=__stackBase__+24;
        var $current_size=__stackBase__+28;
        var $remaining=__stackBase__+32;
        var $written=__stackBase__+36;
        var $out=__stackBase__+40;
        var $r=__stackBase__+44;
        var $r31=__stackBase__+48;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$n_addr]=$n;
        HEAP[$res]=0; //@line 1419 "bufferedio.c"
        var $1=HEAP[$self_addr]; //@line 1423 "bufferedio.c"
        var $2=(($1+20)&4294967295); //@line 1423 "bufferedio.c"
        var $3=HEAP[$2]; //@line 1423 "bufferedio.c"
        var $4=((($3))|0)==0; //@line 1423 "bufferedio.c"
        if ($4) { __label__ = 4; break; } else { __label__ = 1; break; } //@line 1423 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 1423 "bufferedio.c"
        var $6=(($5+20)&4294967295); //@line 1423 "bufferedio.c"
        var $7=HEAP[$6]; //@line 1423 "bufferedio.c"
        var $8=((($7))|0)==0; //@line 1423 "bufferedio.c"
        if ($8) { __label__ = 4; break; } else { __label__ = 2; break; } //@line 1423 "bufferedio.c"
      case 2: // $bb1
        var $9=HEAP[$self_addr]; //@line 1423 "bufferedio.c"
        var $10=(($9+60)&4294967295); //@line 1423 "bufferedio.c"
        var $11=HEAP[$10]; //@line 1423 "bufferedio.c"
        var $12=reSign(($11), 64, 0)==-1; //@line 1423 "bufferedio.c"
        if ($12) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 1423 "bufferedio.c"
      case 3: // $bb2
        var $13=HEAP[$self_addr]; //@line 1423 "bufferedio.c"
        var $14=(($13+60)&4294967295); //@line 1423 "bufferedio.c"
        var $15=HEAP[$14]; //@line 1423 "bufferedio.c"
        var $16=((($15)) & 4294967295); //@line 1423 "bufferedio.c"
        var $17=HEAP[$self_addr]; //@line 1423 "bufferedio.c"
        var $18=(($17+44)&4294967295); //@line 1423 "bufferedio.c"
        var $19=HEAP[$18]; //@line 1423 "bufferedio.c"
        var $20=((($19)) & 4294967295); //@line 1423 "bufferedio.c"
        var $21=((($16) - ($20))&4294967295); //@line 1423 "bufferedio.c"
        HEAP[$iftmp_190]=$21; //@line 1423 "bufferedio.c"
        __label__ = 5; break; //@line 1423 "bufferedio.c"
      case 4: // $bb3
        HEAP[$iftmp_190]=0; //@line 1423 "bufferedio.c"
        __label__ = 5; break; //@line 1423 "bufferedio.c"
      case 5: // $bb4
        var $22=HEAP[$iftmp_190]; //@line 1423 "bufferedio.c"
        HEAP[$current_size]=$22; //@line 1423 "bufferedio.c"
        var $23=HEAP[$n_addr]; //@line 1424 "bufferedio.c"
        var $24=HEAP[$current_size]; //@line 1424 "bufferedio.c"
        var $25=((($23))|0) <= ((($24))|0); //@line 1424 "bufferedio.c"
        if ($25) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1424 "bufferedio.c"
      case 6: // $bb5
        var $26=HEAP[$self_addr]; //@line 1425 "bufferedio.c"
        var $27=HEAP[$n_addr]; //@line 1425 "bufferedio.c"
        var $28=__bufferedreader_read_fast($26, $27); //@line 1425 "bufferedio.c"
        HEAP[$0]=$28; //@line 1425 "bufferedio.c"
        __label__ = 52; break; //@line 1425 "bufferedio.c"
      case 7: // $bb6
        var $29=HEAP[$n_addr]; //@line 1427 "bufferedio.c"
        var $30=_PyString_FromStringAndSize(0, $29); //@line 1427 "bufferedio.c"
        HEAP[$res]=$30; //@line 1427 "bufferedio.c"
        var $31=HEAP[$res]; //@line 1428 "bufferedio.c"
        var $32=($31)==0; //@line 1428 "bufferedio.c"
        if ($32) { __label__ = 48; break; } else { __label__ = 8; break; } //@line 1428 "bufferedio.c"
      case 8: // $bb7
        var $33=HEAP[$res]; //@line 1430 "bufferedio.c"
        var $34=$33; //@line 1430 "bufferedio.c"
        var $35=(($34+20)&4294967295); //@line 1430 "bufferedio.c"
        var $36=(($35)&4294967295); //@line 1430 "bufferedio.c"
        HEAP[$out]=$36; //@line 1430 "bufferedio.c"
        var $37=HEAP[$n_addr]; //@line 1431 "bufferedio.c"
        HEAP[$remaining]=$37; //@line 1431 "bufferedio.c"
        HEAP[$written]=0; //@line 1432 "bufferedio.c"
        var $38=HEAP[$current_size]; //@line 1433 "bufferedio.c"
        var $39=((($38))|0) > 0; //@line 1433 "bufferedio.c"
        if ($39) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1433 "bufferedio.c"
      case 9: // $bb8
        var $40=HEAP[$current_size]; //@line 1434 "bufferedio.c"
        var $41=HEAP[$self_addr]; //@line 1434 "bufferedio.c"
        var $42=(($41+40)&4294967295); //@line 1434 "bufferedio.c"
        var $43=HEAP[$42]; //@line 1434 "bufferedio.c"
        var $44=HEAP[$self_addr]; //@line 1434 "bufferedio.c"
        var $45=(($44+44)&4294967295); //@line 1434 "bufferedio.c"
        var $46=HEAP[$45]; //@line 1434 "bufferedio.c"
        var $47=((($46)) & 4294967295); //@line 1434 "bufferedio.c"
        var $48=(($43+$47)&4294967295); //@line 1434 "bufferedio.c"
        var $49=HEAP[$out]; //@line 1434 "bufferedio.c"
        _llvm_memcpy_p0i8_p0i8_i32($49, $48, $40, 1, 0); //@line 1434 "bufferedio.c"
        var $50=HEAP[$remaining]; //@line 1435 "bufferedio.c"
        var $51=HEAP[$current_size]; //@line 1435 "bufferedio.c"
        var $52=((($50) - ($51))&4294967295); //@line 1435 "bufferedio.c"
        HEAP[$remaining]=$52; //@line 1435 "bufferedio.c"
        var $53=HEAP[$written]; //@line 1436 "bufferedio.c"
        var $54=HEAP[$current_size]; //@line 1436 "bufferedio.c"
        var $55=((($53) + ($54))&4294967295); //@line 1436 "bufferedio.c"
        HEAP[$written]=$55; //@line 1436 "bufferedio.c"
        __label__ = 10; break; //@line 1436 "bufferedio.c"
      case 10: // $bb9
        var $56=HEAP[$self_addr]; //@line 1438 "bufferedio.c"
        __bufferedreader_reset_buf($56); //@line 1438 "bufferedio.c"
        __label__ = 26; break; //@line 1438 "bufferedio.c"
      case 11: // $bb10
        var $57=HEAP[$self_addr]; //@line 1442 "bufferedio.c"
        var $58=(($57+88)&4294967295); //@line 1442 "bufferedio.c"
        var $59=HEAP[$58]; //@line 1442 "bufferedio.c"
        var $60=((($59))|0)!=0; //@line 1442 "bufferedio.c"
        if ($60) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1442 "bufferedio.c"
      case 12: // $bb11
        var $61=HEAP[$self_addr]; //@line 1442 "bufferedio.c"
        var $62=(($61+88)&4294967295); //@line 1442 "bufferedio.c"
        var $63=HEAP[$62]; //@line 1442 "bufferedio.c"
        var $not=($63) ^ -1; //@line 1442 "bufferedio.c"
        var $64=HEAP[$remaining]; //@line 1442 "bufferedio.c"
        var $65=($not) & ($64); //@line 1442 "bufferedio.c"
        HEAP[$iftmp_195]=$65; //@line 1442 "bufferedio.c"
        __label__ = 14; break; //@line 1442 "bufferedio.c"
      case 13: // $bb13
        var $66=HEAP[$self_addr]; //@line 1442 "bufferedio.c"
        var $67=(($66+84)&4294967295); //@line 1442 "bufferedio.c"
        var $68=HEAP[$67]; //@line 1442 "bufferedio.c"
        var $69=HEAP[$self_addr]; //@line 1442 "bufferedio.c"
        var $70=(($69+84)&4294967295); //@line 1442 "bufferedio.c"
        var $71=HEAP[$70]; //@line 1442 "bufferedio.c"
        var $72=HEAP[$remaining]; //@line 1442 "bufferedio.c"
        var $73=((((($72))|0)/((($71))|0))|0); //@line 1442 "bufferedio.c"
        var $74=((($68) * ($73))&4294967295); //@line 1442 "bufferedio.c"
        HEAP[$iftmp_195]=$74; //@line 1442 "bufferedio.c"
        __label__ = 14; break; //@line 1442 "bufferedio.c"
      case 14: // $bb14
        var $75=HEAP[$iftmp_195]; //@line 1442 "bufferedio.c"
        HEAP[$r]=$75; //@line 1442 "bufferedio.c"
        var $76=HEAP[$r]; //@line 1443 "bufferedio.c"
        var $77=((($76))|0)==0; //@line 1443 "bufferedio.c"
        if ($77) { __label__ = 27; break; } else { __label__ = 15; break; } //@line 1443 "bufferedio.c"
      case 15: // $bb15
        var $78=HEAP[$out]; //@line 1445 "bufferedio.c"
        var $79=HEAP[$written]; //@line 1445 "bufferedio.c"
        var $80=(($78+$79)&4294967295); //@line 1445 "bufferedio.c"
        var $81=HEAP[$self_addr]; //@line 1445 "bufferedio.c"
        var $82=HEAP[$r]; //@line 1445 "bufferedio.c"
        var $83=__bufferedreader_raw_read($81, $80, $82); //@line 1445 "bufferedio.c"
        HEAP[$r]=$83; //@line 1445 "bufferedio.c"
        var $84=HEAP[$r]; //@line 1446 "bufferedio.c"
        var $85=((($84))|0)==-1; //@line 1446 "bufferedio.c"
        if ($85) { __label__ = 48; break; } else { __label__ = 16; break; } //@line 1446 "bufferedio.c"
      case 16: // $bb16
        var $86=HEAP[$r]; //@line 1448 "bufferedio.c"
        var $87=((($86))|0)==0; //@line 1448 "bufferedio.c"
        if ($87) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 1448 "bufferedio.c"
      case 17: // $bb17
        var $88=HEAP[$r]; //@line 1448 "bufferedio.c"
        var $89=((($88))|0)==-2; //@line 1448 "bufferedio.c"
        if ($89) { __label__ = 18; break; } else { __label__ = 25; break; } //@line 1448 "bufferedio.c"
      case 18: // $bb18
        var $90=HEAP[$r]; //@line 1450 "bufferedio.c"
        var $91=((($90))|0)==0; //@line 1450 "bufferedio.c"
        if ($91) { __label__ = 20; break; } else { __label__ = 19; break; } //@line 1450 "bufferedio.c"
      case 19: // $bb19
        var $92=HEAP[$written]; //@line 1450 "bufferedio.c"
        var $93=((($92))|0) > 0; //@line 1450 "bufferedio.c"
        if ($93) { __label__ = 20; break; } else { __label__ = 22; break; } //@line 1450 "bufferedio.c"
      case 20: // $bb20
        var $94=HEAP[$written]; //@line 1451 "bufferedio.c"
        var $95=__PyString_Resize($res, $94); //@line 1451 "bufferedio.c"
        var $96=((($95))|0)!=0; //@line 1451 "bufferedio.c"
        if ($96) { __label__ = 48; break; } else { __label__ = 21; break; } //@line 1451 "bufferedio.c"
      case 21: // $bb21
        var $97=HEAP[$res]; //@line 1453 "bufferedio.c"
        HEAP[$0]=$97; //@line 1453 "bufferedio.c"
        __label__ = 52; break; //@line 1453 "bufferedio.c"
      case 22: // $bb22
        var $98=HEAP[$res]; //@line 1455 "bufferedio.c"
        var $99=(($98)&4294967295); //@line 1455 "bufferedio.c"
        var $100=HEAP[$99]; //@line 1455 "bufferedio.c"
        var $101=((($100) - 1)&4294967295); //@line 1455 "bufferedio.c"
        var $102=(($98)&4294967295); //@line 1455 "bufferedio.c"
        HEAP[$102]=$101; //@line 1455 "bufferedio.c"
        var $103=(($98)&4294967295); //@line 1455 "bufferedio.c"
        var $104=HEAP[$103]; //@line 1455 "bufferedio.c"
        var $105=((($104))|0)==0; //@line 1455 "bufferedio.c"
        if ($105) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 1455 "bufferedio.c"
      case 23: // $bb23
        var $106=HEAP[$res]; //@line 1455 "bufferedio.c"
        var $107=(($106+4)&4294967295); //@line 1455 "bufferedio.c"
        var $108=HEAP[$107]; //@line 1455 "bufferedio.c"
        var $109=(($108+24)&4294967295); //@line 1455 "bufferedio.c"
        var $110=HEAP[$109]; //@line 1455 "bufferedio.c"
        var $111=HEAP[$res]; //@line 1455 "bufferedio.c"
        FUNCTION_TABLE[$110]($111); //@line 1455 "bufferedio.c"
        __label__ = 24; break; //@line 1455 "bufferedio.c"
      case 24: // $bb24
        var $112=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 1456 "bufferedio.c"
        var $113=((($112) + 1)&4294967295); //@line 1456 "bufferedio.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$113; //@line 1456 "bufferedio.c"
        HEAP[$0]=__Py_NoneStruct; //@line 1457 "bufferedio.c"
        __label__ = 52; break; //@line 1457 "bufferedio.c"
      case 25: // $bb25
        var $114=HEAP[$remaining]; //@line 1459 "bufferedio.c"
        var $115=HEAP[$r]; //@line 1459 "bufferedio.c"
        var $116=((($114) - ($115))&4294967295); //@line 1459 "bufferedio.c"
        HEAP[$remaining]=$116; //@line 1459 "bufferedio.c"
        var $117=HEAP[$written]; //@line 1460 "bufferedio.c"
        var $118=HEAP[$r]; //@line 1460 "bufferedio.c"
        var $119=((($117) + ($118))&4294967295); //@line 1460 "bufferedio.c"
        HEAP[$written]=$119; //@line 1460 "bufferedio.c"
        __label__ = 26; break; //@line 1460 "bufferedio.c"
      case 26: // $bb26
        var $120=HEAP[$remaining]; //@line 1439 "bufferedio.c"
        var $121=((($120))|0) > 0; //@line 1439 "bufferedio.c"
        if ($121) { __label__ = 11; break; } else { __label__ = 27; break; } //@line 1439 "bufferedio.c"
      case 27: // $bb27
        var $122=HEAP[$self_addr]; //@line 1462 "bufferedio.c"
        var $123=(($122+84)&4294967295); //@line 1462 "bufferedio.c"
        var $124=HEAP[$123]; //@line 1462 "bufferedio.c"
        var $125=HEAP[$remaining]; //@line 1462 "bufferedio.c"
        var $126=((($124))|0) < ((($125))|0); //@line 1462 "bufferedio.c"
        if ($126) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 1462 "bufferedio.c"
      case 28: // $bb28
        ___assert_fail(((__str39)&4294967295), ((__str10)&4294967295), 1462, ((___PRETTY_FUNCTION___10369)&4294967295)); //@line 1462 "bufferedio.c"
        throw "Reached an unreachable! Original .ll line: 7197"; //@line 1462 "bufferedio.c"
      case 29: // $bb29
        var $127=HEAP[$self_addr]; //@line 1463 "bufferedio.c"
        var $128=(($127+44)&4294967295); //@line 1463 "bufferedio.c"
        HEAP[$128]=0; //@line 1463 "bufferedio.c"
        var $129=HEAP[$self_addr]; //@line 1464 "bufferedio.c"
        var $130=(($129+52)&4294967295); //@line 1464 "bufferedio.c"
        HEAP[$130]=0; //@line 1464 "bufferedio.c"
        var $131=HEAP[$self_addr]; //@line 1465 "bufferedio.c"
        var $132=(($131+60)&4294967295); //@line 1465 "bufferedio.c"
        HEAP[$132]=0; //@line 1465 "bufferedio.c"
        __label__ = 45; break; //@line 1465 "bufferedio.c"
      case 30: // $bb30
        var $133=HEAP[$self_addr]; //@line 1470 "bufferedio.c"
        var $134=__bufferedreader_fill_buffer($133); //@line 1470 "bufferedio.c"
        HEAP[$r31]=$134; //@line 1470 "bufferedio.c"
        var $135=HEAP[$r31]; //@line 1471 "bufferedio.c"
        var $136=((($135))|0)==-1; //@line 1471 "bufferedio.c"
        if ($136) { __label__ = 48; break; } else { __label__ = 31; break; } //@line 1471 "bufferedio.c"
      case 31: // $bb32
        var $137=HEAP[$r31]; //@line 1473 "bufferedio.c"
        var $138=((($137))|0)==0; //@line 1473 "bufferedio.c"
        if ($138) { __label__ = 33; break; } else { __label__ = 32; break; } //@line 1473 "bufferedio.c"
      case 32: // $bb33
        var $139=HEAP[$r31]; //@line 1473 "bufferedio.c"
        var $140=((($139))|0)==-2; //@line 1473 "bufferedio.c"
        if ($140) { __label__ = 33; break; } else { __label__ = 40; break; } //@line 1473 "bufferedio.c"
      case 33: // $bb34
        var $141=HEAP[$r31]; //@line 1475 "bufferedio.c"
        var $142=((($141))|0)==0; //@line 1475 "bufferedio.c"
        if ($142) { __label__ = 35; break; } else { __label__ = 34; break; } //@line 1475 "bufferedio.c"
      case 34: // $bb35
        var $143=HEAP[$written]; //@line 1475 "bufferedio.c"
        var $144=((($143))|0) > 0; //@line 1475 "bufferedio.c"
        if ($144) { __label__ = 35; break; } else { __label__ = 37; break; } //@line 1475 "bufferedio.c"
      case 35: // $bb36
        var $145=HEAP[$written]; //@line 1476 "bufferedio.c"
        var $146=__PyString_Resize($res, $145); //@line 1476 "bufferedio.c"
        var $147=((($146))|0)!=0; //@line 1476 "bufferedio.c"
        if ($147) { __label__ = 48; break; } else { __label__ = 36; break; } //@line 1476 "bufferedio.c"
      case 36: // $bb37
        var $148=HEAP[$res]; //@line 1478 "bufferedio.c"
        HEAP[$0]=$148; //@line 1478 "bufferedio.c"
        __label__ = 52; break; //@line 1478 "bufferedio.c"
      case 37: // $bb38
        var $149=HEAP[$res]; //@line 1480 "bufferedio.c"
        var $150=(($149)&4294967295); //@line 1480 "bufferedio.c"
        var $151=HEAP[$150]; //@line 1480 "bufferedio.c"
        var $152=((($151) - 1)&4294967295); //@line 1480 "bufferedio.c"
        var $153=(($149)&4294967295); //@line 1480 "bufferedio.c"
        HEAP[$153]=$152; //@line 1480 "bufferedio.c"
        var $154=(($149)&4294967295); //@line 1480 "bufferedio.c"
        var $155=HEAP[$154]; //@line 1480 "bufferedio.c"
        var $156=((($155))|0)==0; //@line 1480 "bufferedio.c"
        if ($156) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 1480 "bufferedio.c"
      case 38: // $bb39
        var $157=HEAP[$res]; //@line 1480 "bufferedio.c"
        var $158=(($157+4)&4294967295); //@line 1480 "bufferedio.c"
        var $159=HEAP[$158]; //@line 1480 "bufferedio.c"
        var $160=(($159+24)&4294967295); //@line 1480 "bufferedio.c"
        var $161=HEAP[$160]; //@line 1480 "bufferedio.c"
        var $162=HEAP[$res]; //@line 1480 "bufferedio.c"
        FUNCTION_TABLE[$161]($162); //@line 1480 "bufferedio.c"
        __label__ = 39; break; //@line 1480 "bufferedio.c"
      case 39: // $bb40
        var $163=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 1481 "bufferedio.c"
        var $164=((($163) + 1)&4294967295); //@line 1481 "bufferedio.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$164; //@line 1481 "bufferedio.c"
        HEAP[$0]=__Py_NoneStruct; //@line 1482 "bufferedio.c"
        __label__ = 52; break; //@line 1482 "bufferedio.c"
      case 40: // $bb41
        var $165=HEAP[$remaining]; //@line 1484 "bufferedio.c"
        var $166=HEAP[$r31]; //@line 1484 "bufferedio.c"
        var $167=((($165))|0) > ((($166))|0); //@line 1484 "bufferedio.c"
        if ($167) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 1484 "bufferedio.c"
      case 41: // $bb42
        var $168=HEAP[$r31]; //@line 1485 "bufferedio.c"
        var $169=HEAP[$self_addr]; //@line 1485 "bufferedio.c"
        var $170=(($169+40)&4294967295); //@line 1485 "bufferedio.c"
        var $171=HEAP[$170]; //@line 1485 "bufferedio.c"
        var $172=HEAP[$self_addr]; //@line 1485 "bufferedio.c"
        var $173=(($172+44)&4294967295); //@line 1485 "bufferedio.c"
        var $174=HEAP[$173]; //@line 1485 "bufferedio.c"
        var $175=((($174)) & 4294967295); //@line 1485 "bufferedio.c"
        var $176=(($171+$175)&4294967295); //@line 1485 "bufferedio.c"
        var $177=HEAP[$out]; //@line 1485 "bufferedio.c"
        var $178=HEAP[$written]; //@line 1485 "bufferedio.c"
        var $179=(($177+$178)&4294967295); //@line 1485 "bufferedio.c"
        _llvm_memcpy_p0i8_p0i8_i32($179, $176, $168, 1, 0); //@line 1485 "bufferedio.c"
        var $180=HEAP[$written]; //@line 1486 "bufferedio.c"
        var $181=HEAP[$r31]; //@line 1486 "bufferedio.c"
        var $182=((($180) + ($181))&4294967295); //@line 1486 "bufferedio.c"
        HEAP[$written]=$182; //@line 1486 "bufferedio.c"
        var $183=HEAP[$self_addr]; //@line 1487 "bufferedio.c"
        var $184=(($183+44)&4294967295); //@line 1487 "bufferedio.c"
        var $185=HEAP[$184]; //@line 1487 "bufferedio.c"
        var $186=HEAP[$r31]; //@line 1487 "bufferedio.c"
        var $187=((($186))|0); //@line 1487 "bufferedio.c"
        var $188=($185) + ($187); //@line 1487 "bufferedio.c"
        var $189=HEAP[$self_addr]; //@line 1487 "bufferedio.c"
        var $190=(($189+44)&4294967295); //@line 1487 "bufferedio.c"
        HEAP[$190]=$188; //@line 1487 "bufferedio.c"
        var $191=HEAP[$remaining]; //@line 1488 "bufferedio.c"
        var $192=HEAP[$r31]; //@line 1488 "bufferedio.c"
        var $193=((($191) - ($192))&4294967295); //@line 1488 "bufferedio.c"
        HEAP[$remaining]=$193; //@line 1488 "bufferedio.c"
        __label__ = 44; break; //@line 1488 "bufferedio.c"
      case 42: // $bb43
        var $194=HEAP[$remaining]; //@line 1490 "bufferedio.c"
        var $195=((($194))|0) > 0; //@line 1490 "bufferedio.c"
        if ($195) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 1490 "bufferedio.c"
      case 43: // $bb44
        var $196=HEAP[$remaining]; //@line 1491 "bufferedio.c"
        var $197=HEAP[$self_addr]; //@line 1491 "bufferedio.c"
        var $198=(($197+40)&4294967295); //@line 1491 "bufferedio.c"
        var $199=HEAP[$198]; //@line 1491 "bufferedio.c"
        var $200=HEAP[$self_addr]; //@line 1491 "bufferedio.c"
        var $201=(($200+44)&4294967295); //@line 1491 "bufferedio.c"
        var $202=HEAP[$201]; //@line 1491 "bufferedio.c"
        var $203=((($202)) & 4294967295); //@line 1491 "bufferedio.c"
        var $204=(($199+$203)&4294967295); //@line 1491 "bufferedio.c"
        var $205=HEAP[$out]; //@line 1491 "bufferedio.c"
        var $206=HEAP[$written]; //@line 1491 "bufferedio.c"
        var $207=(($205+$206)&4294967295); //@line 1491 "bufferedio.c"
        _llvm_memcpy_p0i8_p0i8_i32($207, $204, $196, 1, 0); //@line 1491 "bufferedio.c"
        var $208=HEAP[$written]; //@line 1492 "bufferedio.c"
        var $209=HEAP[$remaining]; //@line 1492 "bufferedio.c"
        var $210=((($208) + ($209))&4294967295); //@line 1492 "bufferedio.c"
        HEAP[$written]=$210; //@line 1492 "bufferedio.c"
        var $211=HEAP[$self_addr]; //@line 1493 "bufferedio.c"
        var $212=(($211+44)&4294967295); //@line 1493 "bufferedio.c"
        var $213=HEAP[$212]; //@line 1493 "bufferedio.c"
        var $214=HEAP[$remaining]; //@line 1493 "bufferedio.c"
        var $215=((($214))|0); //@line 1493 "bufferedio.c"
        var $216=($213) + ($215); //@line 1493 "bufferedio.c"
        var $217=HEAP[$self_addr]; //@line 1493 "bufferedio.c"
        var $218=(($217+44)&4294967295); //@line 1493 "bufferedio.c"
        HEAP[$218]=$216; //@line 1493 "bufferedio.c"
        HEAP[$remaining]=0; //@line 1494 "bufferedio.c"
        __label__ = 44; break; //@line 1494 "bufferedio.c"
      case 44: // $bb45
        var $219=HEAP[$remaining]; //@line 1496 "bufferedio.c"
        var $220=((($219))|0)==0; //@line 1496 "bufferedio.c"
        if ($220) { __label__ = 47; break; } else { __label__ = 45; break; } //@line 1496 "bufferedio.c"
      case 45: // $bb46
        var $221=HEAP[$remaining]; //@line 1469 "bufferedio.c"
        var $222=((($221))|0) <= 0; //@line 1469 "bufferedio.c"
        if ($222) { __label__ = 47; break; } else { __label__ = 46; break; } //@line 1469 "bufferedio.c"
      case 46: // $bb47
        var $223=HEAP[$self_addr]; //@line 1469 "bufferedio.c"
        var $224=(($223+60)&4294967295); //@line 1469 "bufferedio.c"
        var $225=HEAP[$224]; //@line 1469 "bufferedio.c"
        var $226=HEAP[$self_addr]; //@line 1469 "bufferedio.c"
        var $227=(($226+84)&4294967295); //@line 1469 "bufferedio.c"
        var $228=HEAP[$227]; //@line 1469 "bufferedio.c"
        var $229=((($228))|0); //@line 1469 "bufferedio.c"
        var $230=reSign(($225), 64, 0) < reSign(($229), 64, 0); //@line 1469 "bufferedio.c"
        if ($230) { __label__ = 30; break; } else { __label__ = 47; break; } //@line 1469 "bufferedio.c"
      case 47: // $bb48
        var $231=HEAP[$res]; //@line 1500 "bufferedio.c"
        HEAP[$0]=$231; //@line 1500 "bufferedio.c"
        __label__ = 52; break; //@line 1500 "bufferedio.c"
      case 48: // $error
        var $232=HEAP[$res]; //@line 1503 "bufferedio.c"
        var $233=($232)!=0; //@line 1503 "bufferedio.c"
        if ($233) { __label__ = 49; break; } else { __label__ = 51; break; } //@line 1503 "bufferedio.c"
      case 49: // $bb49
        var $234=HEAP[$res]; //@line 1503 "bufferedio.c"
        var $235=(($234)&4294967295); //@line 1503 "bufferedio.c"
        var $236=HEAP[$235]; //@line 1503 "bufferedio.c"
        var $237=((($236) - 1)&4294967295); //@line 1503 "bufferedio.c"
        var $238=(($234)&4294967295); //@line 1503 "bufferedio.c"
        HEAP[$238]=$237; //@line 1503 "bufferedio.c"
        var $239=(($234)&4294967295); //@line 1503 "bufferedio.c"
        var $240=HEAP[$239]; //@line 1503 "bufferedio.c"
        var $241=((($240))|0)==0; //@line 1503 "bufferedio.c"
        if ($241) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 1503 "bufferedio.c"
      case 50: // $bb50
        var $242=HEAP[$res]; //@line 1503 "bufferedio.c"
        var $243=(($242+4)&4294967295); //@line 1503 "bufferedio.c"
        var $244=HEAP[$243]; //@line 1503 "bufferedio.c"
        var $245=(($244+24)&4294967295); //@line 1503 "bufferedio.c"
        var $246=HEAP[$245]; //@line 1503 "bufferedio.c"
        var $247=HEAP[$res]; //@line 1503 "bufferedio.c"
        FUNCTION_TABLE[$246]($247); //@line 1503 "bufferedio.c"
        __label__ = 51; break; //@line 1503 "bufferedio.c"
      case 51: // $bb51
        HEAP[$0]=0; //@line 1504 "bufferedio.c"
        __label__ = 52; break; //@line 1504 "bufferedio.c"
      case 52: // $bb52
        var $248=HEAP[$0]; //@line 1425 "bufferedio.c"
        HEAP[$retval]=$248; //@line 1425 "bufferedio.c"
        __label__ = 53; break; //@line 1425 "bufferedio.c"
      case 53: // $return
        var $retval53=HEAP[$retval]; //@line 1425 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval53; //@line 1425 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __bufferedreader_peek_unlocked($self, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $n_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $iftmp_208=__stackBase__+16;
        var $have=__stackBase__+20;
        var $r=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$n_addr]=$n;
        var $1=HEAP[$self_addr]; //@line 1512 "bufferedio.c"
        var $2=(($1+20)&4294967295); //@line 1512 "bufferedio.c"
        var $3=HEAP[$2]; //@line 1512 "bufferedio.c"
        var $4=((($3))|0)==0; //@line 1512 "bufferedio.c"
        if ($4) { __label__ = 4; break; } else { __label__ = 1; break; } //@line 1512 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 1512 "bufferedio.c"
        var $6=(($5+20)&4294967295); //@line 1512 "bufferedio.c"
        var $7=HEAP[$6]; //@line 1512 "bufferedio.c"
        var $8=((($7))|0)==0; //@line 1512 "bufferedio.c"
        if ($8) { __label__ = 4; break; } else { __label__ = 2; break; } //@line 1512 "bufferedio.c"
      case 2: // $bb1
        var $9=HEAP[$self_addr]; //@line 1512 "bufferedio.c"
        var $10=(($9+60)&4294967295); //@line 1512 "bufferedio.c"
        var $11=HEAP[$10]; //@line 1512 "bufferedio.c"
        var $12=reSign(($11), 64, 0)==-1; //@line 1512 "bufferedio.c"
        if ($12) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 1512 "bufferedio.c"
      case 3: // $bb2
        var $13=HEAP[$self_addr]; //@line 1512 "bufferedio.c"
        var $14=(($13+60)&4294967295); //@line 1512 "bufferedio.c"
        var $15=HEAP[$14]; //@line 1512 "bufferedio.c"
        var $16=((($15)) & 4294967295); //@line 1512 "bufferedio.c"
        var $17=HEAP[$self_addr]; //@line 1512 "bufferedio.c"
        var $18=(($17+44)&4294967295); //@line 1512 "bufferedio.c"
        var $19=HEAP[$18]; //@line 1512 "bufferedio.c"
        var $20=((($19)) & 4294967295); //@line 1512 "bufferedio.c"
        var $21=((($16) - ($20))&4294967295); //@line 1512 "bufferedio.c"
        HEAP[$iftmp_208]=$21; //@line 1512 "bufferedio.c"
        __label__ = 5; break; //@line 1512 "bufferedio.c"
      case 4: // $bb3
        HEAP[$iftmp_208]=0; //@line 1512 "bufferedio.c"
        __label__ = 5; break; //@line 1512 "bufferedio.c"
      case 5: // $bb4
        var $22=HEAP[$iftmp_208]; //@line 1512 "bufferedio.c"
        HEAP[$have]=$22; //@line 1512 "bufferedio.c"
        var $23=HEAP[$have]; //@line 1519 "bufferedio.c"
        var $24=((($23))|0) > 0; //@line 1519 "bufferedio.c"
        if ($24) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1519 "bufferedio.c"
      case 6: // $bb5
        var $25=HEAP[$self_addr]; //@line 1520 "bufferedio.c"
        var $26=(($25+40)&4294967295); //@line 1520 "bufferedio.c"
        var $27=HEAP[$26]; //@line 1520 "bufferedio.c"
        var $28=HEAP[$self_addr]; //@line 1520 "bufferedio.c"
        var $29=(($28+44)&4294967295); //@line 1520 "bufferedio.c"
        var $30=HEAP[$29]; //@line 1520 "bufferedio.c"
        var $31=((($30)) & 4294967295); //@line 1520 "bufferedio.c"
        var $32=(($27+$31)&4294967295); //@line 1520 "bufferedio.c"
        var $33=HEAP[$have]; //@line 1520 "bufferedio.c"
        var $34=_PyString_FromStringAndSize($32, $33); //@line 1520 "bufferedio.c"
        HEAP[$0]=$34; //@line 1520 "bufferedio.c"
        __label__ = 12; break; //@line 1520 "bufferedio.c"
      case 7: // $bb6
        var $35=HEAP[$self_addr]; //@line 1524 "bufferedio.c"
        __bufferedreader_reset_buf($35); //@line 1524 "bufferedio.c"
        var $36=HEAP[$self_addr]; //@line 1525 "bufferedio.c"
        var $37=__bufferedreader_fill_buffer($36); //@line 1525 "bufferedio.c"
        HEAP[$r]=$37; //@line 1525 "bufferedio.c"
        var $38=HEAP[$r]; //@line 1526 "bufferedio.c"
        var $39=((($38))|0)==-1; //@line 1526 "bufferedio.c"
        if ($39) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1526 "bufferedio.c"
      case 8: // $bb7
        HEAP[$0]=0; //@line 1527 "bufferedio.c"
        __label__ = 12; break; //@line 1527 "bufferedio.c"
      case 9: // $bb8
        var $40=HEAP[$r]; //@line 1528 "bufferedio.c"
        var $41=((($40))|0)==-2; //@line 1528 "bufferedio.c"
        if ($41) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1528 "bufferedio.c"
      case 10: // $bb9
        HEAP[$r]=0; //@line 1529 "bufferedio.c"
        __label__ = 11; break; //@line 1529 "bufferedio.c"
      case 11: // $bb10
        var $42=HEAP[$self_addr]; //@line 1530 "bufferedio.c"
        var $43=(($42+44)&4294967295); //@line 1530 "bufferedio.c"
        HEAP[$43]=0; //@line 1530 "bufferedio.c"
        var $44=HEAP[$self_addr]; //@line 1531 "bufferedio.c"
        var $45=(($44+40)&4294967295); //@line 1531 "bufferedio.c"
        var $46=HEAP[$45]; //@line 1531 "bufferedio.c"
        var $47=HEAP[$r]; //@line 1531 "bufferedio.c"
        var $48=_PyString_FromStringAndSize($46, $47); //@line 1531 "bufferedio.c"
        HEAP[$0]=$48; //@line 1531 "bufferedio.c"
        __label__ = 12; break; //@line 1531 "bufferedio.c"
      case 12: // $bb11
        var $49=HEAP[$0]; //@line 1520 "bufferedio.c"
        HEAP[$retval]=$49; //@line 1520 "bufferedio.c"
        __label__ = 13; break; //@line 1520 "bufferedio.c"
      case 13: // $return
        var $retval12=HEAP[$retval]; //@line 1520 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval12; //@line 1520 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _complain_about_max_buffer_size() {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval=__stackBase__;
        var $0=__stackBase__+4;
        var $_alloca_point_=0;
        var $1=HEAP[_PyExc_DeprecationWarning]; //@line 1615 "bufferedio.c"
        var $2=_PyErr_WarnEx($1, ((__str54)&4294967295), 1); //@line 1615 "bufferedio.c"
        var $3=((($2))|0) < 0; //@line 1615 "bufferedio.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1615 "bufferedio.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 1617 "bufferedio.c"
        __label__ = 3; break; //@line 1617 "bufferedio.c"
      case 2: // $bb1
        HEAP[$0]=1; //@line 1618 "bufferedio.c"
        __label__ = 3; break; //@line 1618 "bufferedio.c"
      case 3: // $bb2
        var $4=HEAP[$0]; //@line 1617 "bufferedio.c"
        HEAP[$retval]=$4; //@line 1617 "bufferedio.c"
        __label__ = 4; break; //@line 1617 "bufferedio.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 1617 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 1617 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __bufferedwriter_reset_buf($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $0=HEAP[$self_addr]; //@line 1635 "bufferedio.c"
        var $1=(($0+68)&4294967295); //@line 1635 "bufferedio.c"
        HEAP[$1]=0; //@line 1635 "bufferedio.c"
        var $2=HEAP[$self_addr]; //@line 1636 "bufferedio.c"
        var $3=(($2+76)&4294967295); //@line 1636 "bufferedio.c"
        HEAP[$3]=-1; //@line 1636 "bufferedio.c"
        __label__ = 1; break; //@line 1637 "bufferedio.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 1637 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferedwriter_init($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 56; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 56);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kwds_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $iftmp_217=__stackBase__+16;
        var $0=__stackBase__+20;
        var $kwlist=__stackBase__+24;
        var $buffer_size=__stackBase__+40;
        var $max_buffer_size=__stackBase__+44;
        var $raw=__stackBase__+48;
        var $_py_tmp=__stackBase__+52;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$kwds_addr]=$kwds;
        var $1=(($kwlist)&4294967295); //@line 1643 "bufferedio.c"
        var $2=HEAP[((_C_210_10564)&4294967295)]; //@line 1643 "bufferedio.c"
        HEAP[$1]=$2; //@line 1643 "bufferedio.c"
        var $3=(($kwlist+4)&4294967295); //@line 1643 "bufferedio.c"
        var $4=HEAP[((_C_210_10564+4)&4294967295)]; //@line 1643 "bufferedio.c"
        HEAP[$3]=$4; //@line 1643 "bufferedio.c"
        var $5=(($kwlist+8)&4294967295); //@line 1643 "bufferedio.c"
        var $6=HEAP[((_C_210_10564+8)&4294967295)]; //@line 1643 "bufferedio.c"
        HEAP[$5]=$6; //@line 1643 "bufferedio.c"
        var $7=(($kwlist+12)&4294967295); //@line 1643 "bufferedio.c"
        var $8=HEAP[((_C_210_10564+12)&4294967295)]; //@line 1643 "bufferedio.c"
        HEAP[$7]=$8; //@line 1643 "bufferedio.c"
        HEAP[$buffer_size]=8192; //@line 1644 "bufferedio.c"
        HEAP[$max_buffer_size]=-234; //@line 1645 "bufferedio.c"
        var $9=HEAP[$self_addr]; //@line 1648 "bufferedio.c"
        var $10=(($9+12)&4294967295); //@line 1648 "bufferedio.c"
        HEAP[$10]=0; //@line 1648 "bufferedio.c"
        var $11=HEAP[$self_addr]; //@line 1649 "bufferedio.c"
        var $12=(($11+16)&4294967295); //@line 1649 "bufferedio.c"
        HEAP[$12]=0; //@line 1649 "bufferedio.c"
        var $13=HEAP[$args_addr]; //@line 1651 "bufferedio.c"
        var $14=HEAP[$kwds_addr]; //@line 1651 "bufferedio.c"
        var $kwlist1=$kwlist; //@line 1651 "bufferedio.c"
        var $15=__PyArg_ParseTupleAndKeywords_SizeT($13, $14, ((__str56)&4294967295), $kwlist1, $raw, $buffer_size, $max_buffer_size); //@line 1651 "bufferedio.c"
        var $16=((($15))|0)==0; //@line 1651 "bufferedio.c"
        if ($16) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1651 "bufferedio.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 1653 "bufferedio.c"
        __label__ = 17; break; //@line 1653 "bufferedio.c"
      case 2: // $bb2
        var $17=HEAP[$max_buffer_size]; //@line 1656 "bufferedio.c"
        var $18=((($17))|0)!=-234; //@line 1656 "bufferedio.c"
        if ($18) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 1656 "bufferedio.c"
      case 3: // $bb3
        var $19=_complain_about_max_buffer_size(); //@line 1656 "bufferedio.c"
        var $20=((($19))|0)==0; //@line 1656 "bufferedio.c"
        if ($20) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1656 "bufferedio.c"
      case 4: // $bb4
        HEAP[$0]=-1; //@line 1657 "bufferedio.c"
        __label__ = 17; break; //@line 1657 "bufferedio.c"
      case 5: // $bb5
        var $21=HEAP[$raw]; //@line 1659 "bufferedio.c"
        var $22=__PyIOBase_check_writable($21, __Py_TrueStruct); //@line 1659 "bufferedio.c"
        var $23=($22)==0; //@line 1659 "bufferedio.c"
        if ($23) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1659 "bufferedio.c"
      case 6: // $bb6
        HEAP[$0]=-1; //@line 1660 "bufferedio.c"
        __label__ = 17; break; //@line 1660 "bufferedio.c"
      case 7: // $bb7
        var $24=HEAP[$self_addr]; //@line 1662 "bufferedio.c"
        var $25=(($24+8)&4294967295); //@line 1662 "bufferedio.c"
        var $26=HEAP[$25]; //@line 1662 "bufferedio.c"
        var $27=($26)!=0; //@line 1662 "bufferedio.c"
        if ($27) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 1662 "bufferedio.c"
      case 8: // $bb8
        var $28=HEAP[$self_addr]; //@line 1662 "bufferedio.c"
        var $29=(($28+8)&4294967295); //@line 1662 "bufferedio.c"
        var $30=HEAP[$29]; //@line 1662 "bufferedio.c"
        HEAP[$_py_tmp]=$30; //@line 1662 "bufferedio.c"
        var $31=HEAP[$self_addr]; //@line 1662 "bufferedio.c"
        var $32=(($31+8)&4294967295); //@line 1662 "bufferedio.c"
        HEAP[$32]=0; //@line 1662 "bufferedio.c"
        var $33=HEAP[$_py_tmp]; //@line 1662 "bufferedio.c"
        var $34=(($33)&4294967295); //@line 1662 "bufferedio.c"
        var $35=HEAP[$34]; //@line 1662 "bufferedio.c"
        var $36=((($35) - 1)&4294967295); //@line 1662 "bufferedio.c"
        var $37=HEAP[$_py_tmp]; //@line 1662 "bufferedio.c"
        var $38=(($37)&4294967295); //@line 1662 "bufferedio.c"
        HEAP[$38]=$36; //@line 1662 "bufferedio.c"
        var $39=HEAP[$_py_tmp]; //@line 1662 "bufferedio.c"
        var $40=(($39)&4294967295); //@line 1662 "bufferedio.c"
        var $41=HEAP[$40]; //@line 1662 "bufferedio.c"
        var $42=((($41))|0)==0; //@line 1662 "bufferedio.c"
        if ($42) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1662 "bufferedio.c"
      case 9: // $bb9
        var $43=HEAP[$_py_tmp]; //@line 1662 "bufferedio.c"
        var $44=(($43+4)&4294967295); //@line 1662 "bufferedio.c"
        var $45=HEAP[$44]; //@line 1662 "bufferedio.c"
        var $46=(($45+24)&4294967295); //@line 1662 "bufferedio.c"
        var $47=HEAP[$46]; //@line 1662 "bufferedio.c"
        var $48=HEAP[$_py_tmp]; //@line 1662 "bufferedio.c"
        FUNCTION_TABLE[$47]($48); //@line 1662 "bufferedio.c"
        __label__ = 10; break; //@line 1662 "bufferedio.c"
      case 10: // $bb10
        var $49=HEAP[$raw]; //@line 1663 "bufferedio.c"
        var $50=(($49)&4294967295); //@line 1663 "bufferedio.c"
        var $51=HEAP[$50]; //@line 1663 "bufferedio.c"
        var $52=((($51) + 1)&4294967295); //@line 1663 "bufferedio.c"
        var $53=(($49)&4294967295); //@line 1663 "bufferedio.c"
        HEAP[$53]=$52; //@line 1663 "bufferedio.c"
        var $54=HEAP[$raw]; //@line 1664 "bufferedio.c"
        var $55=HEAP[$self_addr]; //@line 1664 "bufferedio.c"
        var $56=(($55+8)&4294967295); //@line 1664 "bufferedio.c"
        HEAP[$56]=$54; //@line 1664 "bufferedio.c"
        var $57=HEAP[$self_addr]; //@line 1665 "bufferedio.c"
        var $58=(($57+20)&4294967295); //@line 1665 "bufferedio.c"
        HEAP[$58]=0; //@line 1665 "bufferedio.c"
        var $59=HEAP[$self_addr]; //@line 1666 "bufferedio.c"
        var $60=(($59+24)&4294967295); //@line 1666 "bufferedio.c"
        HEAP[$60]=1; //@line 1666 "bufferedio.c"
        var $61=HEAP[$buffer_size]; //@line 1668 "bufferedio.c"
        var $62=HEAP[$self_addr]; //@line 1668 "bufferedio.c"
        var $63=(($62+84)&4294967295); //@line 1668 "bufferedio.c"
        HEAP[$63]=$61; //@line 1668 "bufferedio.c"
        var $64=HEAP[$self_addr]; //@line 1669 "bufferedio.c"
        var $65=__buffered_init($64); //@line 1669 "bufferedio.c"
        var $66=((($65))|0) < 0; //@line 1669 "bufferedio.c"
        if ($66) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1669 "bufferedio.c"
      case 11: // $bb11
        HEAP[$0]=-1; //@line 1670 "bufferedio.c"
        __label__ = 17; break; //@line 1670 "bufferedio.c"
      case 12: // $bb12
        var $67=HEAP[$self_addr]; //@line 1671 "bufferedio.c"
        __bufferedwriter_reset_buf($67); //@line 1671 "bufferedio.c"
        var $68=HEAP[$self_addr]; //@line 1672 "bufferedio.c"
        var $69=(($68+44)&4294967295); //@line 1672 "bufferedio.c"
        HEAP[$69]=0; //@line 1672 "bufferedio.c"
        var $70=HEAP[$self_addr]; //@line 1674 "bufferedio.c"
        var $71=$70; //@line 1674 "bufferedio.c"
        var $72=(($71+4)&4294967295); //@line 1674 "bufferedio.c"
        var $73=HEAP[$72]; //@line 1674 "bufferedio.c"
        var $74=($73)!=(_PyBufferedWriter_Type); //@line 1674 "bufferedio.c"
        if ($74) { __label__ = 15; break; } else { __label__ = 13; break; } //@line 1674 "bufferedio.c"
      case 13: // $bb13
        var $75=HEAP[$raw]; //@line 1674 "bufferedio.c"
        var $76=(($75+4)&4294967295); //@line 1674 "bufferedio.c"
        var $77=HEAP[$76]; //@line 1674 "bufferedio.c"
        var $78=($77)!=(_PyFileIO_Type); //@line 1674 "bufferedio.c"
        if ($78) { __label__ = 15; break; } else { __label__ = 14; break; } //@line 1674 "bufferedio.c"
      case 14: // $bb14
        HEAP[$iftmp_217]=1; //@line 1674 "bufferedio.c"
        __label__ = 16; break; //@line 1674 "bufferedio.c"
      case 15: // $bb15
        HEAP[$iftmp_217]=0; //@line 1674 "bufferedio.c"
        __label__ = 16; break; //@line 1674 "bufferedio.c"
      case 16: // $bb16
        var $79=HEAP[$self_addr]; //@line 1674 "bufferedio.c"
        var $80=(($79+28)&4294967295); //@line 1674 "bufferedio.c"
        var $81=HEAP[$iftmp_217]; //@line 1674 "bufferedio.c"
        HEAP[$80]=$81; //@line 1674 "bufferedio.c"
        var $82=HEAP[$self_addr]; //@line 1677 "bufferedio.c"
        var $83=(($82+12)&4294967295); //@line 1677 "bufferedio.c"
        HEAP[$83]=1; //@line 1677 "bufferedio.c"
        HEAP[$0]=0; //@line 1678 "bufferedio.c"
        __label__ = 17; break; //@line 1678 "bufferedio.c"
      case 17: // $bb17
        var $84=HEAP[$0]; //@line 1653 "bufferedio.c"
        HEAP[$retval]=$84; //@line 1653 "bufferedio.c"
        __label__ = 18; break; //@line 1653 "bufferedio.c"
      case 18: // $return
        var $retval18=HEAP[$retval]; //@line 1653 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval18; //@line 1653 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __bufferedwriter_raw_write($self, $start, $len) {
    var __stackBase__  = STACKTOP; STACKTOP += 84; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 84);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $start_addr=__stackBase__+4;
        var $len_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $buf=__stackBase__+20;
        var $memobj=__stackBase__+72;
        var $res=__stackBase__+76;
        var $n=__stackBase__+80;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$start_addr]=$start;
        HEAP[$len_addr]=$len;
        var $1=HEAP[$start_addr]; //@line 1688 "bufferedio.c"
        var $2=HEAP[$len_addr]; //@line 1688 "bufferedio.c"
        var $3=_PyBuffer_FillInfo($buf, 0, $1, $2, 1, 8); //@line 1688 "bufferedio.c"
        var $4=((($3))|0)==-1; //@line 1688 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1688 "bufferedio.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 1689 "bufferedio.c"
        __label__ = 19; break; //@line 1689 "bufferedio.c"
      case 2: // $bb1
        var $5=_PyMemoryView_FromBuffer($buf); //@line 1690 "bufferedio.c"
        HEAP[$memobj]=$5; //@line 1690 "bufferedio.c"
        var $6=HEAP[$memobj]; //@line 1691 "bufferedio.c"
        var $7=($6)==0; //@line 1691 "bufferedio.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1691 "bufferedio.c"
      case 3: // $bb2
        HEAP[$0]=-1; //@line 1692 "bufferedio.c"
        __label__ = 19; break; //@line 1692 "bufferedio.c"
      case 4: // $bb3
        var $8=HEAP[__PyIO_str_write]; //@line 1699 "bufferedio.c"
        var $9=HEAP[$self_addr]; //@line 1699 "bufferedio.c"
        var $10=(($9+8)&4294967295); //@line 1699 "bufferedio.c"
        var $11=HEAP[$10]; //@line 1699 "bufferedio.c"
        var $12=HEAP[$memobj]; //@line 1699 "bufferedio.c"
        var $13=_PyObject_CallMethodObjArgs($11, $8, $12, 0); //@line 1699 "bufferedio.c"
        HEAP[$res]=$13; //@line 1699 "bufferedio.c"
        var $14=HEAP[$res]; //@line 1700 "bufferedio.c"
        var $15=($14)!=0; //@line 1700 "bufferedio.c"
        if ($15) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 1700 "bufferedio.c"
      case 5: // $bb4
        var $16=__trap_eintr(); //@line 1700 "bufferedio.c"
        var $17=((($16))|0)!=0; //@line 1700 "bufferedio.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 1700 "bufferedio.c"
      case 6: // $bb5
        var $18=HEAP[$memobj]; //@line 1701 "bufferedio.c"
        var $19=(($18)&4294967295); //@line 1701 "bufferedio.c"
        var $20=HEAP[$19]; //@line 1701 "bufferedio.c"
        var $21=((($20) - 1)&4294967295); //@line 1701 "bufferedio.c"
        var $22=HEAP[$memobj]; //@line 1701 "bufferedio.c"
        var $23=(($22)&4294967295); //@line 1701 "bufferedio.c"
        HEAP[$23]=$21; //@line 1701 "bufferedio.c"
        var $24=HEAP[$memobj]; //@line 1701 "bufferedio.c"
        var $25=(($24)&4294967295); //@line 1701 "bufferedio.c"
        var $26=HEAP[$25]; //@line 1701 "bufferedio.c"
        var $27=((($26))|0)==0; //@line 1701 "bufferedio.c"
        if ($27) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1701 "bufferedio.c"
      case 7: // $bb6
        var $28=HEAP[$memobj]; //@line 1701 "bufferedio.c"
        var $29=(($28+4)&4294967295); //@line 1701 "bufferedio.c"
        var $30=HEAP[$29]; //@line 1701 "bufferedio.c"
        var $31=(($30+24)&4294967295); //@line 1701 "bufferedio.c"
        var $32=HEAP[$31]; //@line 1701 "bufferedio.c"
        var $33=HEAP[$memobj]; //@line 1701 "bufferedio.c"
        FUNCTION_TABLE[$32]($33); //@line 1701 "bufferedio.c"
        __label__ = 8; break; //@line 1701 "bufferedio.c"
      case 8: // $bb7
        var $34=HEAP[$res]; //@line 1702 "bufferedio.c"
        var $35=($34)==0; //@line 1702 "bufferedio.c"
        if ($35) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1702 "bufferedio.c"
      case 9: // $bb8
        HEAP[$0]=-1; //@line 1703 "bufferedio.c"
        __label__ = 19; break; //@line 1703 "bufferedio.c"
      case 10: // $bb9
        var $36=HEAP[_PyExc_ValueError]; //@line 1704 "bufferedio.c"
        var $37=HEAP[$res]; //@line 1704 "bufferedio.c"
        var $38=_PyNumber_AsSsize_t($37, $36); //@line 1704 "bufferedio.c"
        HEAP[$n]=$38; //@line 1704 "bufferedio.c"
        var $39=HEAP[$res]; //@line 1705 "bufferedio.c"
        var $40=(($39)&4294967295); //@line 1705 "bufferedio.c"
        var $41=HEAP[$40]; //@line 1705 "bufferedio.c"
        var $42=((($41) - 1)&4294967295); //@line 1705 "bufferedio.c"
        var $43=HEAP[$res]; //@line 1705 "bufferedio.c"
        var $44=(($43)&4294967295); //@line 1705 "bufferedio.c"
        HEAP[$44]=$42; //@line 1705 "bufferedio.c"
        var $45=HEAP[$res]; //@line 1705 "bufferedio.c"
        var $46=(($45)&4294967295); //@line 1705 "bufferedio.c"
        var $47=HEAP[$46]; //@line 1705 "bufferedio.c"
        var $48=((($47))|0)==0; //@line 1705 "bufferedio.c"
        if ($48) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1705 "bufferedio.c"
      case 11: // $bb10
        var $49=HEAP[$res]; //@line 1705 "bufferedio.c"
        var $50=(($49+4)&4294967295); //@line 1705 "bufferedio.c"
        var $51=HEAP[$50]; //@line 1705 "bufferedio.c"
        var $52=(($51+24)&4294967295); //@line 1705 "bufferedio.c"
        var $53=HEAP[$52]; //@line 1705 "bufferedio.c"
        var $54=HEAP[$res]; //@line 1705 "bufferedio.c"
        FUNCTION_TABLE[$53]($54); //@line 1705 "bufferedio.c"
        __label__ = 12; break; //@line 1705 "bufferedio.c"
      case 12: // $bb11
        var $55=HEAP[$n]; //@line 1706 "bufferedio.c"
        var $56=((($55))|0) < 0; //@line 1706 "bufferedio.c"
        if ($56) { __label__ = 14; break; } else { __label__ = 13; break; } //@line 1706 "bufferedio.c"
      case 13: // $bb12
        var $57=HEAP[$n]; //@line 1706 "bufferedio.c"
        var $58=HEAP[$len_addr]; //@line 1706 "bufferedio.c"
        var $59=((($57))|0) > ((($58))|0); //@line 1706 "bufferedio.c"
        if ($59) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1706 "bufferedio.c"
      case 14: // $bb13
        var $60=HEAP[_PyExc_IOError]; //@line 1707 "bufferedio.c"
        var $61=HEAP[$n]; //@line 1707 "bufferedio.c"
        var $62=HEAP[$len_addr]; //@line 1707 "bufferedio.c"
        var $63=_PyErr_Format($60, ((__str57)&4294967295), $61, $62); //@line 1707 "bufferedio.c"
        HEAP[$0]=-1; //@line 1710 "bufferedio.c"
        __label__ = 19; break; //@line 1710 "bufferedio.c"
      case 15: // $bb14
        var $64=HEAP[$n]; //@line 1712 "bufferedio.c"
        var $65=((($64))|0) > 0; //@line 1712 "bufferedio.c"
        if ($65) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 1712 "bufferedio.c"
      case 16: // $bb15
        var $66=HEAP[$self_addr]; //@line 1712 "bufferedio.c"
        var $67=(($66+32)&4294967295); //@line 1712 "bufferedio.c"
        var $68=HEAP[$67]; //@line 1712 "bufferedio.c"
        var $69=reSign(($68), 64, 0)!=-1; //@line 1712 "bufferedio.c"
        if ($69) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 1712 "bufferedio.c"
      case 17: // $bb16
        var $70=HEAP[$self_addr]; //@line 1713 "bufferedio.c"
        var $71=(($70+32)&4294967295); //@line 1713 "bufferedio.c"
        var $72=HEAP[$71]; //@line 1713 "bufferedio.c"
        var $73=HEAP[$n]; //@line 1713 "bufferedio.c"
        var $74=((($73))|0); //@line 1713 "bufferedio.c"
        var $75=($72) + ($74); //@line 1713 "bufferedio.c"
        var $76=HEAP[$self_addr]; //@line 1713 "bufferedio.c"
        var $77=(($76+32)&4294967295); //@line 1713 "bufferedio.c"
        HEAP[$77]=$75; //@line 1713 "bufferedio.c"
        __label__ = 18; break; //@line 1713 "bufferedio.c"
      case 18: // $bb17
        var $78=HEAP[$n]; //@line 1714 "bufferedio.c"
        HEAP[$0]=$78; //@line 1714 "bufferedio.c"
        __label__ = 19; break; //@line 1714 "bufferedio.c"
      case 19: // $bb18
        var $79=HEAP[$0]; //@line 1689 "bufferedio.c"
        HEAP[$retval]=$79; //@line 1689 "bufferedio.c"
        __label__ = 20; break; //@line 1689 "bufferedio.c"
      case 20: // $return
        var $retval19=HEAP[$retval]; //@line 1689 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval19; //@line 1689 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __bufferedwriter_flush_unlocked($self, $restore_pos) {
    var __stackBase__  = STACKTOP; STACKTOP += 56; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 56);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $restore_pos_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $iftmp_223=__stackBase__+16;
        var $written=__stackBase__+24;
        var $n=__stackBase__+28;
        var $rewind=__stackBase__+36;
        var $w=__stackBase__+44;
        var $forward=__stackBase__+48;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$restore_pos_addr]=$restore_pos;
        HEAP[$written]=0; //@line 1722 "bufferedio.c"
        var $1=HEAP[$self_addr]; //@line 1725 "bufferedio.c"
        var $2=(($1+24)&4294967295); //@line 1725 "bufferedio.c"
        var $3=HEAP[$2]; //@line 1725 "bufferedio.c"
        var $4=((($3))|0)==0; //@line 1725 "bufferedio.c"
        if ($4) { __label__ = 24; break; } else { __label__ = 1; break; } //@line 1725 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 1725 "bufferedio.c"
        var $6=(($5+76)&4294967295); //@line 1725 "bufferedio.c"
        var $7=HEAP[$6]; //@line 1725 "bufferedio.c"
        var $8=reSign(($7), 64, 0)==-1; //@line 1725 "bufferedio.c"
        if ($8) { __label__ = 24; break; } else { __label__ = 2; break; } //@line 1725 "bufferedio.c"
      case 2: // $bb1
        var $9=HEAP[$self_addr]; //@line 1725 "bufferedio.c"
        var $10=(($9+68)&4294967295); //@line 1725 "bufferedio.c"
        var $11=HEAP[$10]; //@line 1725 "bufferedio.c"
        var $12=HEAP[$self_addr]; //@line 1725 "bufferedio.c"
        var $13=(($12+76)&4294967295); //@line 1725 "bufferedio.c"
        var $14=HEAP[$13]; //@line 1725 "bufferedio.c"
        var $15=reSign(($11), 64, 0)==reSign(($14), 64, 0); //@line 1725 "bufferedio.c"
        if ($15) { __label__ = 24; break; } else { __label__ = 3; break; } //@line 1725 "bufferedio.c"
      case 3: // $bb2
        var $16=HEAP[$self_addr]; //@line 1728 "bufferedio.c"
        var $17=(($16+20)&4294967295); //@line 1728 "bufferedio.c"
        var $18=HEAP[$17]; //@line 1728 "bufferedio.c"
        var $19=((($18))|0)==0; //@line 1728 "bufferedio.c"
        if ($19) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 1728 "bufferedio.c"
      case 4: // $bb3
        var $20=HEAP[$self_addr]; //@line 1728 "bufferedio.c"
        var $21=(($20+60)&4294967295); //@line 1728 "bufferedio.c"
        var $22=HEAP[$21]; //@line 1728 "bufferedio.c"
        var $23=reSign(($22), 64, 0)!=-1; //@line 1728 "bufferedio.c"
        if ($23) { __label__ = 7; break; } else { __label__ = 5; break; } //@line 1728 "bufferedio.c"
      case 5: // $bb4
        var $24=HEAP[$self_addr]; //@line 1728 "bufferedio.c"
        var $25=(($24+24)&4294967295); //@line 1728 "bufferedio.c"
        var $26=HEAP[$25]; //@line 1728 "bufferedio.c"
        var $27=((($26))|0)==0; //@line 1728 "bufferedio.c"
        if ($27) { __label__ = 9; break; } else { __label__ = 6; break; } //@line 1728 "bufferedio.c"
      case 6: // $bb5
        var $28=HEAP[$self_addr]; //@line 1728 "bufferedio.c"
        var $29=(($28+76)&4294967295); //@line 1728 "bufferedio.c"
        var $30=HEAP[$29]; //@line 1728 "bufferedio.c"
        var $31=reSign(($30), 64, 0)!=-1; //@line 1728 "bufferedio.c"
        if ($31) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 1728 "bufferedio.c"
      case 7: // $bb6
        var $32=HEAP[$self_addr]; //@line 1728 "bufferedio.c"
        var $33=(($32+52)&4294967295); //@line 1728 "bufferedio.c"
        var $34=HEAP[$33]; //@line 1728 "bufferedio.c"
        var $35=reSign(($34), 64, 0) < 0; //@line 1728 "bufferedio.c"
        if ($35) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 1728 "bufferedio.c"
      case 8: // $bb7
        var $36=HEAP[$self_addr]; //@line 1728 "bufferedio.c"
        var $37=(($36+52)&4294967295); //@line 1728 "bufferedio.c"
        var $38=HEAP[$37]; //@line 1728 "bufferedio.c"
        var $39=HEAP[$self_addr]; //@line 1728 "bufferedio.c"
        var $40=(($39+44)&4294967295); //@line 1728 "bufferedio.c"
        var $41=HEAP[$40]; //@line 1728 "bufferedio.c"
        var $42=($38) - ($41); //@line 1728 "bufferedio.c"
        HEAP[$iftmp_223]=$42; //@line 1728 "bufferedio.c"
        __label__ = 10; break; //@line 1728 "bufferedio.c"
      case 9: // $bb8
        HEAP[$iftmp_223]=0; //@line 1728 "bufferedio.c"
        __label__ = 10; break; //@line 1728 "bufferedio.c"
      case 10: // $bb9
        var $43=HEAP[$self_addr]; //@line 1728 "bufferedio.c"
        var $44=(($43+44)&4294967295); //@line 1728 "bufferedio.c"
        var $45=HEAP[$44]; //@line 1728 "bufferedio.c"
        var $46=HEAP[$self_addr]; //@line 1728 "bufferedio.c"
        var $47=(($46+68)&4294967295); //@line 1728 "bufferedio.c"
        var $48=HEAP[$47]; //@line 1728 "bufferedio.c"
        var $49=($45) - ($48); //@line 1728 "bufferedio.c"
        var $50=HEAP[$iftmp_223]; //@line 1728 "bufferedio.c"
        var $51=($50) + ($49); //@line 1728 "bufferedio.c"
        HEAP[$rewind]=$51; //@line 1728 "bufferedio.c"
        var $52=HEAP[$rewind]; //@line 1729 "bufferedio.c"
        var $53=reSign(($52), 64, 0)!=0; //@line 1729 "bufferedio.c"
        if ($53) { __label__ = 11; break; } else { __label__ = 13; break; } //@line 1729 "bufferedio.c"
      case 11: // $bb10
        var $54=HEAP[$rewind]; //@line 1730 "bufferedio.c"
        var $55=0 - ($54); //@line 1730 "bufferedio.c"
        var $56=HEAP[$self_addr]; //@line 1730 "bufferedio.c"
        var $57=__buffered_raw_seek($56, $55, 1); //@line 1730 "bufferedio.c"
        HEAP[$n]=$57; //@line 1730 "bufferedio.c"
        var $58=HEAP[$n]; //@line 1731 "bufferedio.c"
        var $59=reSign(($58), 64, 0) < 0; //@line 1731 "bufferedio.c"
        if ($59) { __label__ = 25; break; } else { __label__ = 12; break; } //@line 1731 "bufferedio.c"
      case 12: // $bb11
        var $60=HEAP[$self_addr]; //@line 1734 "bufferedio.c"
        var $61=(($60+52)&4294967295); //@line 1734 "bufferedio.c"
        var $62=HEAP[$61]; //@line 1734 "bufferedio.c"
        var $63=HEAP[$rewind]; //@line 1734 "bufferedio.c"
        var $64=($62) - ($63); //@line 1734 "bufferedio.c"
        var $65=HEAP[$self_addr]; //@line 1734 "bufferedio.c"
        var $66=(($65+52)&4294967295); //@line 1734 "bufferedio.c"
        HEAP[$66]=$64; //@line 1734 "bufferedio.c"
        __label__ = 13; break; //@line 1734 "bufferedio.c"
      case 13: // $bb12
        __label__ = 18; break; //@line 1734 "bufferedio.c"
      case 14: // $bb13
        var $67=HEAP[$self_addr]; //@line 1737 "bufferedio.c"
        var $68=(($67+76)&4294967295); //@line 1737 "bufferedio.c"
        var $69=HEAP[$68]; //@line 1737 "bufferedio.c"
        var $70=((($69)) & 4294967295); //@line 1737 "bufferedio.c"
        var $71=HEAP[$self_addr]; //@line 1737 "bufferedio.c"
        var $72=(($71+68)&4294967295); //@line 1737 "bufferedio.c"
        var $73=HEAP[$72]; //@line 1737 "bufferedio.c"
        var $74=((($73)) & 4294967295); //@line 1737 "bufferedio.c"
        var $75=((($70) - ($74))&4294967295); //@line 1737 "bufferedio.c"
        var $76=HEAP[$self_addr]; //@line 1737 "bufferedio.c"
        var $77=(($76+40)&4294967295); //@line 1737 "bufferedio.c"
        var $78=HEAP[$77]; //@line 1737 "bufferedio.c"
        var $79=HEAP[$self_addr]; //@line 1737 "bufferedio.c"
        var $80=(($79+68)&4294967295); //@line 1737 "bufferedio.c"
        var $81=HEAP[$80]; //@line 1737 "bufferedio.c"
        var $82=((($81)) & 4294967295); //@line 1737 "bufferedio.c"
        var $83=(($78+$82)&4294967295); //@line 1737 "bufferedio.c"
        var $84=HEAP[$self_addr]; //@line 1737 "bufferedio.c"
        var $85=__bufferedwriter_raw_write($84, $83, $75); //@line 1737 "bufferedio.c"
        var $86=((($85))|0); //@line 1737 "bufferedio.c"
        HEAP[$n]=$86; //@line 1737 "bufferedio.c"
        var $87=HEAP[$n]; //@line 1741 "bufferedio.c"
        var $88=reSign(($87), 64, 0)==-1; //@line 1741 "bufferedio.c"
        if ($88) { __label__ = 15; break; } else { __label__ = 17; break; } //@line 1741 "bufferedio.c"
      case 15: // $bb14
        var $89=__buffered_check_blocking_error(); //@line 1742 "bufferedio.c"
        HEAP[$w]=$89; //@line 1742 "bufferedio.c"
        var $90=HEAP[$w]; //@line 1743 "bufferedio.c"
        var $91=($90)==0; //@line 1743 "bufferedio.c"
        if ($91) { __label__ = 25; break; } else { __label__ = 16; break; } //@line 1743 "bufferedio.c"
      case 16: // $bb15
        var $92=HEAP[$self_addr]; //@line 1745 "bufferedio.c"
        var $93=(($92+68)&4294967295); //@line 1745 "bufferedio.c"
        var $94=HEAP[$93]; //@line 1745 "bufferedio.c"
        var $95=HEAP[$w]; //@line 1745 "bufferedio.c"
        var $96=HEAP[$95]; //@line 1745 "bufferedio.c"
        var $97=((($96))|0); //@line 1745 "bufferedio.c"
        var $98=($94) + ($97); //@line 1745 "bufferedio.c"
        var $99=HEAP[$self_addr]; //@line 1745 "bufferedio.c"
        var $100=(($99+68)&4294967295); //@line 1745 "bufferedio.c"
        HEAP[$100]=$98; //@line 1745 "bufferedio.c"
        var $101=HEAP[$self_addr]; //@line 1746 "bufferedio.c"
        var $102=(($101+68)&4294967295); //@line 1746 "bufferedio.c"
        var $103=HEAP[$102]; //@line 1746 "bufferedio.c"
        var $104=HEAP[$self_addr]; //@line 1746 "bufferedio.c"
        var $105=(($104+52)&4294967295); //@line 1746 "bufferedio.c"
        HEAP[$105]=$103; //@line 1746 "bufferedio.c"
        var $106=HEAP[$w]; //@line 1747 "bufferedio.c"
        var $107=HEAP[$106]; //@line 1747 "bufferedio.c"
        var $108=HEAP[$written]; //@line 1747 "bufferedio.c"
        var $109=((($107) + ($108))&4294967295); //@line 1747 "bufferedio.c"
        HEAP[$written]=$109; //@line 1747 "bufferedio.c"
        var $110=HEAP[$w]; //@line 1748 "bufferedio.c"
        var $111=HEAP[$written]; //@line 1748 "bufferedio.c"
        HEAP[$110]=$111; //@line 1748 "bufferedio.c"
        __label__ = 25; break; //@line 1748 "bufferedio.c"
      case 17: // $bb16
        var $112=HEAP[$self_addr]; //@line 1752 "bufferedio.c"
        var $113=(($112+68)&4294967295); //@line 1752 "bufferedio.c"
        var $114=HEAP[$113]; //@line 1752 "bufferedio.c"
        var $115=HEAP[$n]; //@line 1752 "bufferedio.c"
        var $116=($114) + ($115); //@line 1752 "bufferedio.c"
        var $117=HEAP[$self_addr]; //@line 1752 "bufferedio.c"
        var $118=(($117+68)&4294967295); //@line 1752 "bufferedio.c"
        HEAP[$118]=$116; //@line 1752 "bufferedio.c"
        var $119=HEAP[$self_addr]; //@line 1753 "bufferedio.c"
        var $120=(($119+68)&4294967295); //@line 1753 "bufferedio.c"
        var $121=HEAP[$120]; //@line 1753 "bufferedio.c"
        var $122=HEAP[$self_addr]; //@line 1753 "bufferedio.c"
        var $123=(($122+52)&4294967295); //@line 1753 "bufferedio.c"
        HEAP[$123]=$121; //@line 1753 "bufferedio.c"
        var $124=HEAP[$n]; //@line 1754 "bufferedio.c"
        var $125=((($124)) & 4294967295); //@line 1754 "bufferedio.c"
        var $126=HEAP[$written]; //@line 1754 "bufferedio.c"
        var $127=((($125) + ($126))&4294967295); //@line 1754 "bufferedio.c"
        HEAP[$written]=$127; //@line 1754 "bufferedio.c"
        var $128=_PyErr_CheckSignals(); //@line 1758 "bufferedio.c"
        var $129=((($128))|0) < 0; //@line 1758 "bufferedio.c"
        if ($129) { __label__ = 25; break; } else { __label__ = 18; break; } //@line 1758 "bufferedio.c"
      case 18: // $bb17
        var $130=HEAP[$self_addr]; //@line 1736 "bufferedio.c"
        var $131=(($130+68)&4294967295); //@line 1736 "bufferedio.c"
        var $132=HEAP[$131]; //@line 1736 "bufferedio.c"
        var $133=HEAP[$self_addr]; //@line 1736 "bufferedio.c"
        var $134=(($133+76)&4294967295); //@line 1736 "bufferedio.c"
        var $135=HEAP[$134]; //@line 1736 "bufferedio.c"
        var $136=reSign(($132), 64, 0) < reSign(($135), 64, 0); //@line 1736 "bufferedio.c"
        if ($136) { __label__ = 14; break; } else { __label__ = 19; break; } //@line 1736 "bufferedio.c"
      case 19: // $bb18
        var $137=HEAP[$restore_pos_addr]; //@line 1762 "bufferedio.c"
        var $138=((($137))|0)!=0; //@line 1762 "bufferedio.c"
        if ($138) { __label__ = 20; break; } else { __label__ = 23; break; } //@line 1762 "bufferedio.c"
      case 20: // $bb19
        var $139=HEAP[$written]; //@line 1763 "bufferedio.c"
        var $140=((($139))|0); //@line 1763 "bufferedio.c"
        var $141=HEAP[$rewind]; //@line 1763 "bufferedio.c"
        var $142=($141) - ($140); //@line 1763 "bufferedio.c"
        HEAP[$forward]=$142; //@line 1763 "bufferedio.c"
        var $143=HEAP[$forward]; //@line 1764 "bufferedio.c"
        var $144=reSign(($143), 64, 0)!=0; //@line 1764 "bufferedio.c"
        if ($144) { __label__ = 21; break; } else { __label__ = 23; break; } //@line 1764 "bufferedio.c"
      case 21: // $bb20
        var $145=HEAP[$self_addr]; //@line 1765 "bufferedio.c"
        var $146=HEAP[$forward]; //@line 1765 "bufferedio.c"
        var $147=__buffered_raw_seek($145, $146, 1); //@line 1765 "bufferedio.c"
        HEAP[$n]=$147; //@line 1765 "bufferedio.c"
        var $148=HEAP[$n]; //@line 1766 "bufferedio.c"
        var $149=reSign(($148), 64, 0) < 0; //@line 1766 "bufferedio.c"
        if ($149) { __label__ = 25; break; } else { __label__ = 22; break; } //@line 1766 "bufferedio.c"
      case 22: // $bb21
        var $150=HEAP[$self_addr]; //@line 1769 "bufferedio.c"
        var $151=(($150+52)&4294967295); //@line 1769 "bufferedio.c"
        var $152=HEAP[$151]; //@line 1769 "bufferedio.c"
        var $153=HEAP[$forward]; //@line 1769 "bufferedio.c"
        var $154=($152) + ($153); //@line 1769 "bufferedio.c"
        var $155=HEAP[$self_addr]; //@line 1769 "bufferedio.c"
        var $156=(($155+52)&4294967295); //@line 1769 "bufferedio.c"
        HEAP[$156]=$154; //@line 1769 "bufferedio.c"
        __label__ = 23; break; //@line 1769 "bufferedio.c"
      case 23: // $bb22
        var $157=HEAP[$self_addr]; //@line 1772 "bufferedio.c"
        __bufferedwriter_reset_buf($157); //@line 1772 "bufferedio.c"
        __label__ = 24; break; //@line 1774 "bufferedio.c"
      case 24: // $end
        var $158=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 1775 "bufferedio.c"
        var $159=((($158) + 1)&4294967295); //@line 1775 "bufferedio.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$159; //@line 1775 "bufferedio.c"
        HEAP[$0]=__Py_NoneStruct; //@line 1775 "bufferedio.c"
        __label__ = 26; break; //@line 1775 "bufferedio.c"
      case 25: // $error
        HEAP[$0]=0; //@line 1778 "bufferedio.c"
        __label__ = 26; break; //@line 1778 "bufferedio.c"
      case 26: // $bb23
        var $160=HEAP[$0]; //@line 1775 "bufferedio.c"
        HEAP[$retval]=$160; //@line 1775 "bufferedio.c"
        __label__ = 27; break; //@line 1775 "bufferedio.c"
      case 27: // $return
        var $retval24=HEAP[$retval]; //@line 1775 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval24; //@line 1775 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferedwriter_write($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 117; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 117);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $iftmp_229=__stackBase__+12;
        var $iftmp_226=__stackBase__+20;
        var $0=__stackBase__+21;
        var $res=__stackBase__+25;
        var $buf=__stackBase__+29;
        var $written=__stackBase__+81;
        var $avail=__stackBase__+85;
        var $remaining=__stackBase__+89;
        var $offset=__stackBase__+93;
        var $w=__stackBase__+101;
        var $_py_tmp=__stackBase__+105;
        var $n=__stackBase__+109;
        var $w54=__stackBase__+113;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$res]=0; //@line 1784 "bufferedio.c"
        var $1=HEAP[$self_addr]; //@line 1789 "bufferedio.c"
        var $2=(($1+12)&4294967295); //@line 1789 "bufferedio.c"
        var $3=HEAP[$2]; //@line 1789 "bufferedio.c"
        var $4=((($3))|0) <= 0; //@line 1789 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 1789 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 1789 "bufferedio.c"
        var $6=(($5+16)&4294967295); //@line 1789 "bufferedio.c"
        var $7=HEAP[$6]; //@line 1789 "bufferedio.c"
        var $8=((($7))|0)!=0; //@line 1789 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1789 "bufferedio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 1789 "bufferedio.c"
        _PyErr_SetString($9, ((__str11)&4294967295)); //@line 1789 "bufferedio.c"
        __label__ = 4; break; //@line 1789 "bufferedio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 1789 "bufferedio.c"
        _PyErr_SetString($10, ((__str12)&4294967295)); //@line 1789 "bufferedio.c"
        __label__ = 4; break; //@line 1789 "bufferedio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 1789 "bufferedio.c"
        __label__ = 75; break; //@line 1789 "bufferedio.c"
      case 5: // $bb4
        var $11=HEAP[$args_addr]; //@line 1790 "bufferedio.c"
        var $12=__PyArg_ParseTuple_SizeT($11, ((__str58)&4294967295), $buf); //@line 1790 "bufferedio.c"
        var $13=((($12))|0)==0; //@line 1790 "bufferedio.c"
        if ($13) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1790 "bufferedio.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 1791 "bufferedio.c"
        __label__ = 75; break; //@line 1791 "bufferedio.c"
      case 7: // $bb6
        var $14=HEAP[$self_addr]; //@line 1794 "bufferedio.c"
        var $15=(($14+28)&4294967295); //@line 1794 "bufferedio.c"
        var $16=HEAP[$15]; //@line 1794 "bufferedio.c"
        var $17=((($16))|0)!=0; //@line 1794 "bufferedio.c"
        if ($17) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1794 "bufferedio.c"
      case 8: // $bb7
        var $18=HEAP[$self_addr]; //@line 1794 "bufferedio.c"
        var $19=(($18+8)&4294967295); //@line 1794 "bufferedio.c"
        var $20=HEAP[$19]; //@line 1794 "bufferedio.c"
        var $21=__PyFileIO_closed($20); //@line 1794 "bufferedio.c"
        var $22=((($21))|0)!=0; //@line 1794 "bufferedio.c"
        var $23=unSign(($22), 1, 0); //@line 1794 "bufferedio.c"
        HEAP[$iftmp_226]=$23; //@line 1794 "bufferedio.c"
        __label__ = 10; break; //@line 1794 "bufferedio.c"
      case 9: // $bb8
        var $24=HEAP[$self_addr]; //@line 1794 "bufferedio.c"
        var $25=_buffered_closed($24); //@line 1794 "bufferedio.c"
        var $26=((($25))|0)!=0; //@line 1794 "bufferedio.c"
        var $27=unSign(($26), 1, 0); //@line 1794 "bufferedio.c"
        HEAP[$iftmp_226]=$27; //@line 1794 "bufferedio.c"
        __label__ = 10; break; //@line 1794 "bufferedio.c"
      case 10: // $bb9
        var $28=HEAP[$iftmp_226]; //@line 1794 "bufferedio.c"
        var $toBool=reSign(($28), 8, 0)!=0; //@line 1794 "bufferedio.c"
        if ($toBool) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1794 "bufferedio.c"
      case 11: // $bb10
        var $29=HEAP[_PyExc_ValueError]; //@line 1795 "bufferedio.c"
        _PyErr_SetString($29, ((__str59)&4294967295)); //@line 1795 "bufferedio.c"
        _PyBuffer_Release($buf); //@line 1796 "bufferedio.c"
        HEAP[$0]=0; //@line 1797 "bufferedio.c"
        __label__ = 75; break; //@line 1797 "bufferedio.c"
      case 12: // $bb11
        var $30=HEAP[$self_addr]; //@line 1806 "bufferedio.c"
        var $31=(($30+20)&4294967295); //@line 1806 "bufferedio.c"
        var $32=HEAP[$31]; //@line 1806 "bufferedio.c"
        var $33=((($32))|0)==0; //@line 1806 "bufferedio.c"
        if ($33) { __label__ = 14; break; } else { __label__ = 13; break; } //@line 1806 "bufferedio.c"
      case 13: // $bb12
        var $34=HEAP[$self_addr]; //@line 1806 "bufferedio.c"
        var $35=(($34+60)&4294967295); //@line 1806 "bufferedio.c"
        var $36=HEAP[$35]; //@line 1806 "bufferedio.c"
        var $37=reSign(($36), 64, 0)==-1; //@line 1806 "bufferedio.c"
        if ($37) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 1806 "bufferedio.c"
      case 14: // $bb13
        var $38=HEAP[$self_addr]; //@line 1806 "bufferedio.c"
        var $39=(($38+24)&4294967295); //@line 1806 "bufferedio.c"
        var $40=HEAP[$39]; //@line 1806 "bufferedio.c"
        var $41=((($40))|0)==0; //@line 1806 "bufferedio.c"
        if ($41) { __label__ = 16; break; } else { __label__ = 15; break; } //@line 1806 "bufferedio.c"
      case 15: // $bb14
        var $42=HEAP[$self_addr]; //@line 1806 "bufferedio.c"
        var $43=(($42+76)&4294967295); //@line 1806 "bufferedio.c"
        var $44=HEAP[$43]; //@line 1806 "bufferedio.c"
        var $45=reSign(($44), 64, 0)==-1; //@line 1806 "bufferedio.c"
        if ($45) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 1806 "bufferedio.c"
      case 16: // $bb15
        var $46=HEAP[$self_addr]; //@line 1807 "bufferedio.c"
        var $47=(($46+44)&4294967295); //@line 1807 "bufferedio.c"
        HEAP[$47]=0; //@line 1807 "bufferedio.c"
        var $48=HEAP[$self_addr]; //@line 1808 "bufferedio.c"
        var $49=(($48+52)&4294967295); //@line 1808 "bufferedio.c"
        HEAP[$49]=0; //@line 1808 "bufferedio.c"
        __label__ = 17; break; //@line 1808 "bufferedio.c"
      case 17: // $bb16
        var $50=HEAP[$self_addr]; //@line 1810 "bufferedio.c"
        var $51=(($50+84)&4294967295); //@line 1810 "bufferedio.c"
        var $52=HEAP[$51]; //@line 1810 "bufferedio.c"
        var $53=HEAP[$self_addr]; //@line 1810 "bufferedio.c"
        var $54=(($53+44)&4294967295); //@line 1810 "bufferedio.c"
        var $55=HEAP[$54]; //@line 1810 "bufferedio.c"
        var $56=((($55)) & 4294967295); //@line 1810 "bufferedio.c"
        var $57=((($52) - ($56))&4294967295); //@line 1810 "bufferedio.c"
        HEAP[$avail]=$57; //@line 1810 "bufferedio.c"
        var $58=(($buf+8)&4294967295); //@line 1811 "bufferedio.c"
        var $59=HEAP[$58]; //@line 1811 "bufferedio.c"
        var $60=HEAP[$avail]; //@line 1811 "bufferedio.c"
        var $61=((($59))|0) <= ((($60))|0); //@line 1811 "bufferedio.c"
        if ($61) { __label__ = 18; break; } else { __label__ = 29; break; } //@line 1811 "bufferedio.c"
      case 18: // $bb17
        var $62=(($buf+8)&4294967295); //@line 1812 "bufferedio.c"
        var $63=HEAP[$62]; //@line 1812 "bufferedio.c"
        var $64=(($buf)&4294967295); //@line 1812 "bufferedio.c"
        var $65=HEAP[$64]; //@line 1812 "bufferedio.c"
        var $66=HEAP[$self_addr]; //@line 1812 "bufferedio.c"
        var $67=(($66+40)&4294967295); //@line 1812 "bufferedio.c"
        var $68=HEAP[$67]; //@line 1812 "bufferedio.c"
        var $69=HEAP[$self_addr]; //@line 1812 "bufferedio.c"
        var $70=(($69+44)&4294967295); //@line 1812 "bufferedio.c"
        var $71=HEAP[$70]; //@line 1812 "bufferedio.c"
        var $72=((($71)) & 4294967295); //@line 1812 "bufferedio.c"
        var $73=(($68+$72)&4294967295); //@line 1812 "bufferedio.c"
        _llvm_memcpy_p0i8_p0i8_i32($73, $65, $63, 1, 0); //@line 1812 "bufferedio.c"
        var $74=HEAP[$self_addr]; //@line 1813 "bufferedio.c"
        var $75=(($74+24)&4294967295); //@line 1813 "bufferedio.c"
        var $76=HEAP[$75]; //@line 1813 "bufferedio.c"
        var $77=((($76))|0)==0; //@line 1813 "bufferedio.c"
        if ($77) { __label__ = 21; break; } else { __label__ = 19; break; } //@line 1813 "bufferedio.c"
      case 19: // $bb18
        var $78=HEAP[$self_addr]; //@line 1813 "bufferedio.c"
        var $79=(($78+76)&4294967295); //@line 1813 "bufferedio.c"
        var $80=HEAP[$79]; //@line 1813 "bufferedio.c"
        var $81=reSign(($80), 64, 0)==-1; //@line 1813 "bufferedio.c"
        if ($81) { __label__ = 21; break; } else { __label__ = 20; break; } //@line 1813 "bufferedio.c"
      case 20: // $bb19
        var $82=HEAP[$self_addr]; //@line 1813 "bufferedio.c"
        var $83=(($82+68)&4294967295); //@line 1813 "bufferedio.c"
        var $84=HEAP[$83]; //@line 1813 "bufferedio.c"
        var $85=HEAP[$self_addr]; //@line 1813 "bufferedio.c"
        var $86=(($85+44)&4294967295); //@line 1813 "bufferedio.c"
        var $87=HEAP[$86]; //@line 1813 "bufferedio.c"
        var $88=reSign(($84), 64, 0) > reSign(($87), 64, 0); //@line 1813 "bufferedio.c"
        if ($88) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 1813 "bufferedio.c"
      case 21: // $bb20
        var $89=HEAP[$self_addr]; //@line 1814 "bufferedio.c"
        var $90=(($89+44)&4294967295); //@line 1814 "bufferedio.c"
        var $91=HEAP[$90]; //@line 1814 "bufferedio.c"
        var $92=HEAP[$self_addr]; //@line 1814 "bufferedio.c"
        var $93=(($92+68)&4294967295); //@line 1814 "bufferedio.c"
        HEAP[$93]=$91; //@line 1814 "bufferedio.c"
        __label__ = 22; break; //@line 1814 "bufferedio.c"
      case 22: // $bb21
        var $94=HEAP[$self_addr]; //@line 1816 "bufferedio.c"
        var $95=(($94+44)&4294967295); //@line 1816 "bufferedio.c"
        var $96=HEAP[$95]; //@line 1816 "bufferedio.c"
        var $97=(($buf+8)&4294967295); //@line 1816 "bufferedio.c"
        var $98=HEAP[$97]; //@line 1816 "bufferedio.c"
        var $99=((($98))|0); //@line 1816 "bufferedio.c"
        var $100=($96) + ($99); //@line 1816 "bufferedio.c"
        var $101=HEAP[$self_addr]; //@line 1816 "bufferedio.c"
        var $102=(($101+44)&4294967295); //@line 1816 "bufferedio.c"
        HEAP[$102]=$100; //@line 1816 "bufferedio.c"
        var $103=HEAP[$self_addr]; //@line 1816 "bufferedio.c"
        var $104=(($103+20)&4294967295); //@line 1816 "bufferedio.c"
        var $105=HEAP[$104]; //@line 1816 "bufferedio.c"
        var $106=((($105))|0)!=0; //@line 1816 "bufferedio.c"
        if ($106) { __label__ = 23; break; } else { __label__ = 26; break; } //@line 1816 "bufferedio.c"
      case 23: // $bb22
        var $107=HEAP[$self_addr]; //@line 1816 "bufferedio.c"
        var $108=(($107+60)&4294967295); //@line 1816 "bufferedio.c"
        var $109=HEAP[$108]; //@line 1816 "bufferedio.c"
        var $110=reSign(($109), 64, 0)!=-1; //@line 1816 "bufferedio.c"
        if ($110) { __label__ = 24; break; } else { __label__ = 26; break; } //@line 1816 "bufferedio.c"
      case 24: // $bb23
        var $111=HEAP[$self_addr]; //@line 1816 "bufferedio.c"
        var $112=(($111+60)&4294967295); //@line 1816 "bufferedio.c"
        var $113=HEAP[$112]; //@line 1816 "bufferedio.c"
        var $114=HEAP[$self_addr]; //@line 1816 "bufferedio.c"
        var $115=(($114+44)&4294967295); //@line 1816 "bufferedio.c"
        var $116=HEAP[$115]; //@line 1816 "bufferedio.c"
        var $117=reSign(($113), 64, 0) < reSign(($116), 64, 0); //@line 1816 "bufferedio.c"
        if ($117) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 1816 "bufferedio.c"
      case 25: // $bb24
        var $118=HEAP[$self_addr]; //@line 1816 "bufferedio.c"
        var $119=(($118+44)&4294967295); //@line 1816 "bufferedio.c"
        var $120=HEAP[$119]; //@line 1816 "bufferedio.c"
        var $121=HEAP[$self_addr]; //@line 1816 "bufferedio.c"
        var $122=(($121+60)&4294967295); //@line 1816 "bufferedio.c"
        HEAP[$122]=$120; //@line 1816 "bufferedio.c"
        __label__ = 26; break; //@line 1816 "bufferedio.c"
      case 26: // $bb25
        var $123=HEAP[$self_addr]; //@line 1817 "bufferedio.c"
        var $124=(($123+44)&4294967295); //@line 1817 "bufferedio.c"
        var $125=HEAP[$124]; //@line 1817 "bufferedio.c"
        var $126=HEAP[$self_addr]; //@line 1817 "bufferedio.c"
        var $127=(($126+76)&4294967295); //@line 1817 "bufferedio.c"
        var $128=HEAP[$127]; //@line 1817 "bufferedio.c"
        var $129=reSign(($125), 64, 0) > reSign(($128), 64, 0); //@line 1817 "bufferedio.c"
        if ($129) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 1817 "bufferedio.c"
      case 27: // $bb26
        var $130=HEAP[$self_addr]; //@line 1818 "bufferedio.c"
        var $131=(($130+44)&4294967295); //@line 1818 "bufferedio.c"
        var $132=HEAP[$131]; //@line 1818 "bufferedio.c"
        var $133=HEAP[$self_addr]; //@line 1818 "bufferedio.c"
        var $134=(($133+76)&4294967295); //@line 1818 "bufferedio.c"
        HEAP[$134]=$132; //@line 1818 "bufferedio.c"
        __label__ = 28; break; //@line 1818 "bufferedio.c"
      case 28: // $bb27
        var $135=(($buf+8)&4294967295); //@line 1819 "bufferedio.c"
        var $136=HEAP[$135]; //@line 1819 "bufferedio.c"
        HEAP[$written]=$136; //@line 1819 "bufferedio.c"
        __label__ = 73; break; //@line 1819 "bufferedio.c"
      case 29: // $bb28
        var $137=HEAP[$self_addr]; //@line 1824 "bufferedio.c"
        var $138=__bufferedwriter_flush_unlocked($137, 0); //@line 1824 "bufferedio.c"
        HEAP[$res]=$138; //@line 1824 "bufferedio.c"
        var $139=HEAP[$res]; //@line 1825 "bufferedio.c"
        var $140=($139)==0; //@line 1825 "bufferedio.c"
        if ($140) { __label__ = 30; break; } else { __label__ = 39; break; } //@line 1825 "bufferedio.c"
      case 30: // $bb29
        var $141=__buffered_check_blocking_error(); //@line 1826 "bufferedio.c"
        HEAP[$w]=$141; //@line 1826 "bufferedio.c"
        var $142=HEAP[$w]; //@line 1827 "bufferedio.c"
        var $143=($142)==0; //@line 1827 "bufferedio.c"
        if ($143) { __label__ = 74; break; } else { __label__ = 31; break; } //@line 1827 "bufferedio.c"
      case 31: // $bb30
        var $144=HEAP[$self_addr]; //@line 1829 "bufferedio.c"
        var $145=(($144+20)&4294967295); //@line 1829 "bufferedio.c"
        var $146=HEAP[$145]; //@line 1829 "bufferedio.c"
        var $147=((($146))|0)!=0; //@line 1829 "bufferedio.c"
        if ($147) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 1829 "bufferedio.c"
      case 32: // $bb31
        var $148=HEAP[$self_addr]; //@line 1830 "bufferedio.c"
        __bufferedreader_reset_buf($148); //@line 1830 "bufferedio.c"
        __label__ = 33; break; //@line 1830 "bufferedio.c"
      case 33: // $bb32
        var $149=HEAP[$self_addr]; //@line 1832 "bufferedio.c"
        var $150=(($149+24)&4294967295); //@line 1832 "bufferedio.c"
        var $151=HEAP[$150]; //@line 1832 "bufferedio.c"
        var $152=((($151))|0)==0; //@line 1832 "bufferedio.c"
        if ($152) { __label__ = 35; break; } else { __label__ = 34; break; } //@line 1832 "bufferedio.c"
      case 34: // $bb33
        var $153=HEAP[$self_addr]; //@line 1832 "bufferedio.c"
        var $154=(($153+76)&4294967295); //@line 1832 "bufferedio.c"
        var $155=HEAP[$154]; //@line 1832 "bufferedio.c"
        var $156=reSign(($155), 64, 0)==-1; //@line 1832 "bufferedio.c"
        if ($156) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 1832 "bufferedio.c"
      case 35: // $bb34
        ___assert_fail(((__str60)&4294967295), ((__str10)&4294967295), 1832, ((___PRETTY_FUNCTION___10762)&4294967295)); //@line 1832 "bufferedio.c"
        throw "Reached an unreachable! Original .ll line: 8586"; //@line 1832 "bufferedio.c"
      case 36: // $bb35
        var $157=HEAP[$self_addr]; //@line 1833 "bufferedio.c"
        var $158=(($157+76)&4294967295); //@line 1833 "bufferedio.c"
        var $159=HEAP[$158]; //@line 1833 "bufferedio.c"
        var $160=((($159)) & 4294967295); //@line 1833 "bufferedio.c"
        var $161=HEAP[$self_addr]; //@line 1833 "bufferedio.c"
        var $162=(($161+68)&4294967295); //@line 1833 "bufferedio.c"
        var $163=HEAP[$162]; //@line 1833 "bufferedio.c"
        var $164=((($163)) & 4294967295); //@line 1833 "bufferedio.c"
        var $165=((($160) - ($164))&4294967295); //@line 1833 "bufferedio.c"
        var $166=HEAP[$self_addr]; //@line 1833 "bufferedio.c"
        var $167=(($166+40)&4294967295); //@line 1833 "bufferedio.c"
        var $168=HEAP[$167]; //@line 1833 "bufferedio.c"
        var $169=HEAP[$self_addr]; //@line 1833 "bufferedio.c"
        var $170=(($169+68)&4294967295); //@line 1833 "bufferedio.c"
        var $171=HEAP[$170]; //@line 1833 "bufferedio.c"
        var $172=((($171)) & 4294967295); //@line 1833 "bufferedio.c"
        var $173=(($168+$172)&4294967295); //@line 1833 "bufferedio.c"
        var $174=HEAP[$self_addr]; //@line 1833 "bufferedio.c"
        var $175=(($174+40)&4294967295); //@line 1833 "bufferedio.c"
        var $176=HEAP[$175]; //@line 1833 "bufferedio.c"
        _llvm_memmove_p0i8_p0i8_i32($176, $173, $165, 1, 0); //@line 1833 "bufferedio.c"
        var $177=HEAP[$self_addr]; //@line 1836 "bufferedio.c"
        var $178=(($177+76)&4294967295); //@line 1836 "bufferedio.c"
        var $179=HEAP[$178]; //@line 1836 "bufferedio.c"
        var $180=HEAP[$self_addr]; //@line 1836 "bufferedio.c"
        var $181=(($180+68)&4294967295); //@line 1836 "bufferedio.c"
        var $182=HEAP[$181]; //@line 1836 "bufferedio.c"
        var $183=($179) - ($182); //@line 1836 "bufferedio.c"
        var $184=HEAP[$self_addr]; //@line 1836 "bufferedio.c"
        var $185=(($184+76)&4294967295); //@line 1836 "bufferedio.c"
        HEAP[$185]=$183; //@line 1836 "bufferedio.c"
        var $186=HEAP[$self_addr]; //@line 1837 "bufferedio.c"
        var $187=(($186+52)&4294967295); //@line 1837 "bufferedio.c"
        var $188=HEAP[$187]; //@line 1837 "bufferedio.c"
        var $189=HEAP[$self_addr]; //@line 1837 "bufferedio.c"
        var $190=(($189+68)&4294967295); //@line 1837 "bufferedio.c"
        var $191=HEAP[$190]; //@line 1837 "bufferedio.c"
        var $192=($188) - ($191); //@line 1837 "bufferedio.c"
        var $193=HEAP[$self_addr]; //@line 1837 "bufferedio.c"
        var $194=(($193+52)&4294967295); //@line 1837 "bufferedio.c"
        HEAP[$194]=$192; //@line 1837 "bufferedio.c"
        var $195=HEAP[$self_addr]; //@line 1838 "bufferedio.c"
        var $196=(($195+44)&4294967295); //@line 1838 "bufferedio.c"
        var $197=HEAP[$196]; //@line 1838 "bufferedio.c"
        var $198=HEAP[$self_addr]; //@line 1838 "bufferedio.c"
        var $199=(($198+68)&4294967295); //@line 1838 "bufferedio.c"
        var $200=HEAP[$199]; //@line 1838 "bufferedio.c"
        var $201=($197) - ($200); //@line 1838 "bufferedio.c"
        var $202=HEAP[$self_addr]; //@line 1838 "bufferedio.c"
        var $203=(($202+44)&4294967295); //@line 1838 "bufferedio.c"
        HEAP[$203]=$201; //@line 1838 "bufferedio.c"
        var $204=HEAP[$self_addr]; //@line 1839 "bufferedio.c"
        var $205=(($204+68)&4294967295); //@line 1839 "bufferedio.c"
        HEAP[$205]=0; //@line 1839 "bufferedio.c"
        var $206=HEAP[$self_addr]; //@line 1840 "bufferedio.c"
        var $207=(($206+84)&4294967295); //@line 1840 "bufferedio.c"
        var $208=HEAP[$207]; //@line 1840 "bufferedio.c"
        var $209=HEAP[$self_addr]; //@line 1840 "bufferedio.c"
        var $210=(($209+76)&4294967295); //@line 1840 "bufferedio.c"
        var $211=HEAP[$210]; //@line 1840 "bufferedio.c"
        var $212=((($211)) & 4294967295); //@line 1840 "bufferedio.c"
        var $213=((($208) - ($212))&4294967295); //@line 1840 "bufferedio.c"
        HEAP[$avail]=$213; //@line 1840 "bufferedio.c"
        var $214=(($buf+8)&4294967295); //@line 1842 "bufferedio.c"
        var $215=HEAP[$214]; //@line 1842 "bufferedio.c"
        var $216=HEAP[$avail]; //@line 1842 "bufferedio.c"
        var $217=((($215))|0) <= ((($216))|0); //@line 1842 "bufferedio.c"
        if ($217) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 1842 "bufferedio.c"
      case 37: // $bb36
        _PyErr_Clear(); //@line 1844 "bufferedio.c"
        var $218=(($buf+8)&4294967295); //@line 1845 "bufferedio.c"
        var $219=HEAP[$218]; //@line 1845 "bufferedio.c"
        var $220=(($buf)&4294967295); //@line 1845 "bufferedio.c"
        var $221=HEAP[$220]; //@line 1845 "bufferedio.c"
        var $222=HEAP[$self_addr]; //@line 1845 "bufferedio.c"
        var $223=(($222+40)&4294967295); //@line 1845 "bufferedio.c"
        var $224=HEAP[$223]; //@line 1845 "bufferedio.c"
        var $225=HEAP[$self_addr]; //@line 1845 "bufferedio.c"
        var $226=(($225+76)&4294967295); //@line 1845 "bufferedio.c"
        var $227=HEAP[$226]; //@line 1845 "bufferedio.c"
        var $228=((($227)) & 4294967295); //@line 1845 "bufferedio.c"
        var $229=(($224+$228)&4294967295); //@line 1845 "bufferedio.c"
        _llvm_memcpy_p0i8_p0i8_i32($229, $221, $219, 1, 0); //@line 1845 "bufferedio.c"
        var $230=HEAP[$self_addr]; //@line 1846 "bufferedio.c"
        var $231=(($230+76)&4294967295); //@line 1846 "bufferedio.c"
        var $232=HEAP[$231]; //@line 1846 "bufferedio.c"
        var $233=(($buf+8)&4294967295); //@line 1846 "bufferedio.c"
        var $234=HEAP[$233]; //@line 1846 "bufferedio.c"
        var $235=((($234))|0); //@line 1846 "bufferedio.c"
        var $236=($232) + ($235); //@line 1846 "bufferedio.c"
        var $237=HEAP[$self_addr]; //@line 1846 "bufferedio.c"
        var $238=(($237+76)&4294967295); //@line 1846 "bufferedio.c"
        HEAP[$238]=$236; //@line 1846 "bufferedio.c"
        var $239=(($buf+8)&4294967295); //@line 1847 "bufferedio.c"
        var $240=HEAP[$239]; //@line 1847 "bufferedio.c"
        HEAP[$written]=$240; //@line 1847 "bufferedio.c"
        __label__ = 73; break; //@line 1847 "bufferedio.c"
      case 38: // $bb37
        var $241=HEAP[$avail]; //@line 1851 "bufferedio.c"
        var $242=(($buf)&4294967295); //@line 1851 "bufferedio.c"
        var $243=HEAP[$242]; //@line 1851 "bufferedio.c"
        var $244=HEAP[$self_addr]; //@line 1851 "bufferedio.c"
        var $245=(($244+40)&4294967295); //@line 1851 "bufferedio.c"
        var $246=HEAP[$245]; //@line 1851 "bufferedio.c"
        var $247=HEAP[$self_addr]; //@line 1851 "bufferedio.c"
        var $248=(($247+76)&4294967295); //@line 1851 "bufferedio.c"
        var $249=HEAP[$248]; //@line 1851 "bufferedio.c"
        var $250=((($249)) & 4294967295); //@line 1851 "bufferedio.c"
        var $251=(($246+$250)&4294967295); //@line 1851 "bufferedio.c"
        _llvm_memcpy_p0i8_p0i8_i32($251, $243, $241, 1, 0); //@line 1851 "bufferedio.c"
        var $252=HEAP[$self_addr]; //@line 1852 "bufferedio.c"
        var $253=(($252+76)&4294967295); //@line 1852 "bufferedio.c"
        var $254=HEAP[$253]; //@line 1852 "bufferedio.c"
        var $255=HEAP[$avail]; //@line 1852 "bufferedio.c"
        var $256=((($255))|0); //@line 1852 "bufferedio.c"
        var $257=($254) + ($256); //@line 1852 "bufferedio.c"
        var $258=HEAP[$self_addr]; //@line 1852 "bufferedio.c"
        var $259=(($258+76)&4294967295); //@line 1852 "bufferedio.c"
        HEAP[$259]=$257; //@line 1852 "bufferedio.c"
        var $260=HEAP[$w]; //@line 1854 "bufferedio.c"
        var $261=HEAP[$avail]; //@line 1854 "bufferedio.c"
        HEAP[$260]=$261; //@line 1854 "bufferedio.c"
        __label__ = 74; break; //@line 1854 "bufferedio.c"
      case 39: // $bb38
        var $262=HEAP[$res]; //@line 1857 "bufferedio.c"
        var $263=($262)!=0; //@line 1857 "bufferedio.c"
        if ($263) { __label__ = 40; break; } else { __label__ = 42; break; } //@line 1857 "bufferedio.c"
      case 40: // $bb39
        var $264=HEAP[$res]; //@line 1857 "bufferedio.c"
        HEAP[$_py_tmp]=$264; //@line 1857 "bufferedio.c"
        HEAP[$res]=0; //@line 1857 "bufferedio.c"
        var $265=HEAP[$_py_tmp]; //@line 1857 "bufferedio.c"
        var $266=(($265)&4294967295); //@line 1857 "bufferedio.c"
        var $267=HEAP[$266]; //@line 1857 "bufferedio.c"
        var $268=((($267) - 1)&4294967295); //@line 1857 "bufferedio.c"
        var $269=HEAP[$_py_tmp]; //@line 1857 "bufferedio.c"
        var $270=(($269)&4294967295); //@line 1857 "bufferedio.c"
        HEAP[$270]=$268; //@line 1857 "bufferedio.c"
        var $271=HEAP[$_py_tmp]; //@line 1857 "bufferedio.c"
        var $272=(($271)&4294967295); //@line 1857 "bufferedio.c"
        var $273=HEAP[$272]; //@line 1857 "bufferedio.c"
        var $274=((($273))|0)==0; //@line 1857 "bufferedio.c"
        if ($274) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 1857 "bufferedio.c"
      case 41: // $bb40
        var $275=HEAP[$_py_tmp]; //@line 1857 "bufferedio.c"
        var $276=(($275+4)&4294967295); //@line 1857 "bufferedio.c"
        var $277=HEAP[$276]; //@line 1857 "bufferedio.c"
        var $278=(($277+24)&4294967295); //@line 1857 "bufferedio.c"
        var $279=HEAP[$278]; //@line 1857 "bufferedio.c"
        var $280=HEAP[$_py_tmp]; //@line 1857 "bufferedio.c"
        FUNCTION_TABLE[$279]($280); //@line 1857 "bufferedio.c"
        __label__ = 42; break; //@line 1857 "bufferedio.c"
      case 42: // $bb41
        var $281=HEAP[$self_addr]; //@line 1865 "bufferedio.c"
        var $282=(($281+20)&4294967295); //@line 1865 "bufferedio.c"
        var $283=HEAP[$282]; //@line 1865 "bufferedio.c"
        var $284=((($283))|0)==0; //@line 1865 "bufferedio.c"
        if ($284) { __label__ = 44; break; } else { __label__ = 43; break; } //@line 1865 "bufferedio.c"
      case 43: // $bb42
        var $285=HEAP[$self_addr]; //@line 1865 "bufferedio.c"
        var $286=(($285+60)&4294967295); //@line 1865 "bufferedio.c"
        var $287=HEAP[$286]; //@line 1865 "bufferedio.c"
        var $288=reSign(($287), 64, 0)!=-1; //@line 1865 "bufferedio.c"
        if ($288) { __label__ = 46; break; } else { __label__ = 44; break; } //@line 1865 "bufferedio.c"
      case 44: // $bb43
        var $289=HEAP[$self_addr]; //@line 1865 "bufferedio.c"
        var $290=(($289+24)&4294967295); //@line 1865 "bufferedio.c"
        var $291=HEAP[$290]; //@line 1865 "bufferedio.c"
        var $292=((($291))|0)==0; //@line 1865 "bufferedio.c"
        if ($292) { __label__ = 48; break; } else { __label__ = 45; break; } //@line 1865 "bufferedio.c"
      case 45: // $bb44
        var $293=HEAP[$self_addr]; //@line 1865 "bufferedio.c"
        var $294=(($293+76)&4294967295); //@line 1865 "bufferedio.c"
        var $295=HEAP[$294]; //@line 1865 "bufferedio.c"
        var $296=reSign(($295), 64, 0)!=-1; //@line 1865 "bufferedio.c"
        if ($296) { __label__ = 46; break; } else { __label__ = 48; break; } //@line 1865 "bufferedio.c"
      case 46: // $bb45
        var $297=HEAP[$self_addr]; //@line 1865 "bufferedio.c"
        var $298=(($297+52)&4294967295); //@line 1865 "bufferedio.c"
        var $299=HEAP[$298]; //@line 1865 "bufferedio.c"
        var $300=reSign(($299), 64, 0) < 0; //@line 1865 "bufferedio.c"
        if ($300) { __label__ = 48; break; } else { __label__ = 47; break; } //@line 1865 "bufferedio.c"
      case 47: // $bb46
        var $301=HEAP[$self_addr]; //@line 1865 "bufferedio.c"
        var $302=(($301+52)&4294967295); //@line 1865 "bufferedio.c"
        var $303=HEAP[$302]; //@line 1865 "bufferedio.c"
        var $304=HEAP[$self_addr]; //@line 1865 "bufferedio.c"
        var $305=(($304+44)&4294967295); //@line 1865 "bufferedio.c"
        var $306=HEAP[$305]; //@line 1865 "bufferedio.c"
        var $307=($303) - ($306); //@line 1865 "bufferedio.c"
        HEAP[$iftmp_229]=$307; //@line 1865 "bufferedio.c"
        __label__ = 49; break; //@line 1865 "bufferedio.c"
      case 48: // $bb47
        HEAP[$iftmp_229]=0; //@line 1865 "bufferedio.c"
        __label__ = 49; break; //@line 1865 "bufferedio.c"
      case 49: // $bb48
        var $308=HEAP[$iftmp_229]; //@line 1865 "bufferedio.c"
        HEAP[$offset]=$308; //@line 1865 "bufferedio.c"
        var $309=HEAP[$offset]; //@line 1866 "bufferedio.c"
        var $310=reSign(($309), 64, 0)!=0; //@line 1866 "bufferedio.c"
        if ($310) { __label__ = 50; break; } else { __label__ = 52; break; } //@line 1866 "bufferedio.c"
      case 50: // $bb49
        var $311=HEAP[$offset]; //@line 1867 "bufferedio.c"
        var $312=0 - ($311); //@line 1867 "bufferedio.c"
        var $313=HEAP[$self_addr]; //@line 1867 "bufferedio.c"
        var $314=__buffered_raw_seek($313, $312, 1); //@line 1867 "bufferedio.c"
        var $315=reSign(($314), 64, 0) < 0; //@line 1867 "bufferedio.c"
        if ($315) { __label__ = 74; break; } else { __label__ = 51; break; } //@line 1867 "bufferedio.c"
      case 51: // $bb50
        var $316=HEAP[$self_addr]; //@line 1869 "bufferedio.c"
        var $317=(($316+52)&4294967295); //@line 1869 "bufferedio.c"
        var $318=HEAP[$317]; //@line 1869 "bufferedio.c"
        var $319=HEAP[$offset]; //@line 1869 "bufferedio.c"
        var $320=($318) - ($319); //@line 1869 "bufferedio.c"
        var $321=HEAP[$self_addr]; //@line 1869 "bufferedio.c"
        var $322=(($321+52)&4294967295); //@line 1869 "bufferedio.c"
        HEAP[$322]=$320; //@line 1869 "bufferedio.c"
        __label__ = 52; break; //@line 1869 "bufferedio.c"
      case 52: // $bb51
        var $323=(($buf+8)&4294967295); //@line 1873 "bufferedio.c"
        var $324=HEAP[$323]; //@line 1873 "bufferedio.c"
        HEAP[$remaining]=$324; //@line 1873 "bufferedio.c"
        HEAP[$written]=0; //@line 1874 "bufferedio.c"
        __label__ = 63; break; //@line 1874 "bufferedio.c"
      case 53: // $bb52
        var $325=(($buf+8)&4294967295); //@line 1877 "bufferedio.c"
        var $326=HEAP[$325]; //@line 1877 "bufferedio.c"
        var $327=HEAP[$written]; //@line 1877 "bufferedio.c"
        var $328=((($326) - ($327))&4294967295); //@line 1877 "bufferedio.c"
        var $329=(($buf)&4294967295); //@line 1877 "bufferedio.c"
        var $330=HEAP[$329]; //@line 1877 "bufferedio.c"
        var $331=HEAP[$written]; //@line 1877 "bufferedio.c"
        var $332=(($330+$331)&4294967295); //@line 1877 "bufferedio.c"
        var $333=HEAP[$self_addr]; //@line 1877 "bufferedio.c"
        var $334=__bufferedwriter_raw_write($333, $332, $328); //@line 1877 "bufferedio.c"
        HEAP[$n]=$334; //@line 1877 "bufferedio.c"
        var $335=HEAP[$n]; //@line 1878 "bufferedio.c"
        var $336=((($335))|0)==-1; //@line 1878 "bufferedio.c"
        if ($336) { __label__ = 54; break; } else { __label__ = 62; break; } //@line 1878 "bufferedio.c"
      case 54: // $bb53
        var $337=__buffered_check_blocking_error(); //@line 1879 "bufferedio.c"
        HEAP[$w54]=$337; //@line 1879 "bufferedio.c"
        var $338=HEAP[$w54]; //@line 1880 "bufferedio.c"
        var $339=($338)==0; //@line 1880 "bufferedio.c"
        if ($339) { __label__ = 74; break; } else { __label__ = 55; break; } //@line 1880 "bufferedio.c"
      case 55: // $bb55
        var $340=HEAP[$w54]; //@line 1882 "bufferedio.c"
        var $341=HEAP[$340]; //@line 1882 "bufferedio.c"
        var $342=HEAP[$written]; //@line 1882 "bufferedio.c"
        var $343=((($341) + ($342))&4294967295); //@line 1882 "bufferedio.c"
        HEAP[$written]=$343; //@line 1882 "bufferedio.c"
        var $344=HEAP[$w54]; //@line 1883 "bufferedio.c"
        var $345=HEAP[$344]; //@line 1883 "bufferedio.c"
        var $346=HEAP[$remaining]; //@line 1883 "bufferedio.c"
        var $347=((($346) - ($345))&4294967295); //@line 1883 "bufferedio.c"
        HEAP[$remaining]=$347; //@line 1883 "bufferedio.c"
        var $348=HEAP[$self_addr]; //@line 1884 "bufferedio.c"
        var $349=(($348+84)&4294967295); //@line 1884 "bufferedio.c"
        var $350=HEAP[$349]; //@line 1884 "bufferedio.c"
        var $351=HEAP[$remaining]; //@line 1884 "bufferedio.c"
        var $352=((($350))|0) < ((($351))|0); //@line 1884 "bufferedio.c"
        if ($352) { __label__ = 56; break; } else { __label__ = 61; break; } //@line 1884 "bufferedio.c"
      case 56: // $bb56
        var $353=HEAP[$self_addr]; //@line 1886 "bufferedio.c"
        var $354=(($353+84)&4294967295); //@line 1886 "bufferedio.c"
        var $355=HEAP[$354]; //@line 1886 "bufferedio.c"
        var $356=(($buf)&4294967295); //@line 1886 "bufferedio.c"
        var $357=HEAP[$356]; //@line 1886 "bufferedio.c"
        var $358=HEAP[$written]; //@line 1886 "bufferedio.c"
        var $359=(($357+$358)&4294967295); //@line 1886 "bufferedio.c"
        var $360=HEAP[$self_addr]; //@line 1886 "bufferedio.c"
        var $361=(($360+40)&4294967295); //@line 1886 "bufferedio.c"
        var $362=HEAP[$361]; //@line 1886 "bufferedio.c"
        _llvm_memcpy_p0i8_p0i8_i32($362, $359, $355, 1, 0); //@line 1886 "bufferedio.c"
        var $363=HEAP[$self_addr]; //@line 1888 "bufferedio.c"
        var $364=(($363+52)&4294967295); //@line 1888 "bufferedio.c"
        HEAP[$364]=0; //@line 1888 "bufferedio.c"
        var $365=HEAP[$self_addr]; //@line 1889 "bufferedio.c"
        var $366=(($365+84)&4294967295); //@line 1889 "bufferedio.c"
        var $367=HEAP[$366]; //@line 1889 "bufferedio.c"
        var $368=((($367))|0); //@line 1889 "bufferedio.c"
        var $369=HEAP[$self_addr]; //@line 1889 "bufferedio.c"
        var $370=(($369+44)&4294967295); //@line 1889 "bufferedio.c"
        HEAP[$370]=$368; //@line 1889 "bufferedio.c"
        var $371=HEAP[$self_addr]; //@line 1889 "bufferedio.c"
        var $372=(($371+20)&4294967295); //@line 1889 "bufferedio.c"
        var $373=HEAP[$372]; //@line 1889 "bufferedio.c"
        var $374=((($373))|0)!=0; //@line 1889 "bufferedio.c"
        if ($374) { __label__ = 57; break; } else { __label__ = 60; break; } //@line 1889 "bufferedio.c"
      case 57: // $bb57
        var $375=HEAP[$self_addr]; //@line 1889 "bufferedio.c"
        var $376=(($375+60)&4294967295); //@line 1889 "bufferedio.c"
        var $377=HEAP[$376]; //@line 1889 "bufferedio.c"
        var $378=reSign(($377), 64, 0)!=-1; //@line 1889 "bufferedio.c"
        if ($378) { __label__ = 58; break; } else { __label__ = 60; break; } //@line 1889 "bufferedio.c"
      case 58: // $bb58
        var $379=HEAP[$self_addr]; //@line 1889 "bufferedio.c"
        var $380=(($379+60)&4294967295); //@line 1889 "bufferedio.c"
        var $381=HEAP[$380]; //@line 1889 "bufferedio.c"
        var $382=HEAP[$self_addr]; //@line 1889 "bufferedio.c"
        var $383=(($382+44)&4294967295); //@line 1889 "bufferedio.c"
        var $384=HEAP[$383]; //@line 1889 "bufferedio.c"
        var $385=reSign(($381), 64, 0) < reSign(($384), 64, 0); //@line 1889 "bufferedio.c"
        if ($385) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 1889 "bufferedio.c"
      case 59: // $bb59
        var $386=HEAP[$self_addr]; //@line 1889 "bufferedio.c"
        var $387=(($386+44)&4294967295); //@line 1889 "bufferedio.c"
        var $388=HEAP[$387]; //@line 1889 "bufferedio.c"
        var $389=HEAP[$self_addr]; //@line 1889 "bufferedio.c"
        var $390=(($389+60)&4294967295); //@line 1889 "bufferedio.c"
        HEAP[$390]=$388; //@line 1889 "bufferedio.c"
        __label__ = 60; break; //@line 1889 "bufferedio.c"
      case 60: // $bb60
        var $391=HEAP[$self_addr]; //@line 1890 "bufferedio.c"
        var $392=(($391+84)&4294967295); //@line 1890 "bufferedio.c"
        var $393=HEAP[$392]; //@line 1890 "bufferedio.c"
        var $394=((($393))|0); //@line 1890 "bufferedio.c"
        var $395=HEAP[$self_addr]; //@line 1890 "bufferedio.c"
        var $396=(($395+76)&4294967295); //@line 1890 "bufferedio.c"
        HEAP[$396]=$394; //@line 1890 "bufferedio.c"
        var $397=HEAP[$self_addr]; //@line 1891 "bufferedio.c"
        var $398=(($397+84)&4294967295); //@line 1891 "bufferedio.c"
        var $399=HEAP[$398]; //@line 1891 "bufferedio.c"
        var $400=HEAP[$written]; //@line 1891 "bufferedio.c"
        var $401=((($399) + ($400))&4294967295); //@line 1891 "bufferedio.c"
        var $402=HEAP[$w54]; //@line 1891 "bufferedio.c"
        HEAP[$402]=$401; //@line 1891 "bufferedio.c"
        __label__ = 74; break; //@line 1891 "bufferedio.c"
      case 61: // $bb61
        _PyErr_Clear(); //@line 1895 "bufferedio.c"
        __label__ = 64; break; //@line 1895 "bufferedio.c"
      case 62: // $bb62
        var $403=HEAP[$written]; //@line 1898 "bufferedio.c"
        var $404=HEAP[$n]; //@line 1898 "bufferedio.c"
        var $405=((($403) + ($404))&4294967295); //@line 1898 "bufferedio.c"
        HEAP[$written]=$405; //@line 1898 "bufferedio.c"
        var $406=HEAP[$remaining]; //@line 1899 "bufferedio.c"
        var $407=HEAP[$n]; //@line 1899 "bufferedio.c"
        var $408=((($406) - ($407))&4294967295); //@line 1899 "bufferedio.c"
        HEAP[$remaining]=$408; //@line 1899 "bufferedio.c"
        var $409=_PyErr_CheckSignals(); //@line 1903 "bufferedio.c"
        var $410=((($409))|0) < 0; //@line 1903 "bufferedio.c"
        if ($410) { __label__ = 74; break; } else { __label__ = 63; break; } //@line 1903 "bufferedio.c"
      case 63: // $bb63
        var $411=HEAP[$self_addr]; //@line 1875 "bufferedio.c"
        var $412=(($411+84)&4294967295); //@line 1875 "bufferedio.c"
        var $413=HEAP[$412]; //@line 1875 "bufferedio.c"
        var $414=HEAP[$remaining]; //@line 1875 "bufferedio.c"
        var $415=((($413))|0) < ((($414))|0); //@line 1875 "bufferedio.c"
        if ($415) { __label__ = 53; break; } else { __label__ = 64; break; } //@line 1875 "bufferedio.c"
      case 64: // $bb64
        var $416=HEAP[$self_addr]; //@line 1906 "bufferedio.c"
        var $417=(($416+20)&4294967295); //@line 1906 "bufferedio.c"
        var $418=HEAP[$417]; //@line 1906 "bufferedio.c"
        var $419=((($418))|0)!=0; //@line 1906 "bufferedio.c"
        if ($419) { __label__ = 65; break; } else { __label__ = 66; break; } //@line 1906 "bufferedio.c"
      case 65: // $bb65
        var $420=HEAP[$self_addr]; //@line 1907 "bufferedio.c"
        __bufferedreader_reset_buf($420); //@line 1907 "bufferedio.c"
        __label__ = 66; break; //@line 1907 "bufferedio.c"
      case 66: // $bb66
        var $421=HEAP[$remaining]; //@line 1908 "bufferedio.c"
        var $422=((($421))|0) > 0; //@line 1908 "bufferedio.c"
        if ($422) { __label__ = 67; break; } else { __label__ = 68; break; } //@line 1908 "bufferedio.c"
      case 67: // $bb67
        var $423=HEAP[$remaining]; //@line 1909 "bufferedio.c"
        var $424=(($buf)&4294967295); //@line 1909 "bufferedio.c"
        var $425=HEAP[$424]; //@line 1909 "bufferedio.c"
        var $426=HEAP[$written]; //@line 1909 "bufferedio.c"
        var $427=(($425+$426)&4294967295); //@line 1909 "bufferedio.c"
        var $428=HEAP[$self_addr]; //@line 1909 "bufferedio.c"
        var $429=(($428+40)&4294967295); //@line 1909 "bufferedio.c"
        var $430=HEAP[$429]; //@line 1909 "bufferedio.c"
        _llvm_memcpy_p0i8_p0i8_i32($430, $427, $423, 1, 0); //@line 1909 "bufferedio.c"
        var $431=HEAP[$written]; //@line 1910 "bufferedio.c"
        var $432=HEAP[$remaining]; //@line 1910 "bufferedio.c"
        var $433=((($431) + ($432))&4294967295); //@line 1910 "bufferedio.c"
        HEAP[$written]=$433; //@line 1910 "bufferedio.c"
        __label__ = 68; break; //@line 1910 "bufferedio.c"
      case 68: // $bb68
        var $434=HEAP[$self_addr]; //@line 1912 "bufferedio.c"
        var $435=(($434+68)&4294967295); //@line 1912 "bufferedio.c"
        HEAP[$435]=0; //@line 1912 "bufferedio.c"
        var $436=HEAP[$remaining]; //@line 1914 "bufferedio.c"
        var $437=((($436))|0); //@line 1914 "bufferedio.c"
        var $438=HEAP[$self_addr]; //@line 1914 "bufferedio.c"
        var $439=(($438+76)&4294967295); //@line 1914 "bufferedio.c"
        HEAP[$439]=$437; //@line 1914 "bufferedio.c"
        var $440=HEAP[$remaining]; //@line 1915 "bufferedio.c"
        var $441=((($440))|0); //@line 1915 "bufferedio.c"
        var $442=HEAP[$self_addr]; //@line 1915 "bufferedio.c"
        var $443=(($442+44)&4294967295); //@line 1915 "bufferedio.c"
        HEAP[$443]=$441; //@line 1915 "bufferedio.c"
        var $444=HEAP[$self_addr]; //@line 1915 "bufferedio.c"
        var $445=(($444+20)&4294967295); //@line 1915 "bufferedio.c"
        var $446=HEAP[$445]; //@line 1915 "bufferedio.c"
        var $447=((($446))|0)!=0; //@line 1915 "bufferedio.c"
        if ($447) { __label__ = 69; break; } else { __label__ = 72; break; } //@line 1915 "bufferedio.c"
      case 69: // $bb69
        var $448=HEAP[$self_addr]; //@line 1915 "bufferedio.c"
        var $449=(($448+60)&4294967295); //@line 1915 "bufferedio.c"
        var $450=HEAP[$449]; //@line 1915 "bufferedio.c"
        var $451=reSign(($450), 64, 0)!=-1; //@line 1915 "bufferedio.c"
        if ($451) { __label__ = 70; break; } else { __label__ = 72; break; } //@line 1915 "bufferedio.c"
      case 70: // $bb70
        var $452=HEAP[$self_addr]; //@line 1915 "bufferedio.c"
        var $453=(($452+60)&4294967295); //@line 1915 "bufferedio.c"
        var $454=HEAP[$453]; //@line 1915 "bufferedio.c"
        var $455=HEAP[$self_addr]; //@line 1915 "bufferedio.c"
        var $456=(($455+44)&4294967295); //@line 1915 "bufferedio.c"
        var $457=HEAP[$456]; //@line 1915 "bufferedio.c"
        var $458=reSign(($454), 64, 0) < reSign(($457), 64, 0); //@line 1915 "bufferedio.c"
        if ($458) { __label__ = 71; break; } else { __label__ = 72; break; } //@line 1915 "bufferedio.c"
      case 71: // $bb71
        var $459=HEAP[$self_addr]; //@line 1915 "bufferedio.c"
        var $460=(($459+44)&4294967295); //@line 1915 "bufferedio.c"
        var $461=HEAP[$460]; //@line 1915 "bufferedio.c"
        var $462=HEAP[$self_addr]; //@line 1915 "bufferedio.c"
        var $463=(($462+60)&4294967295); //@line 1915 "bufferedio.c"
        HEAP[$463]=$461; //@line 1915 "bufferedio.c"
        __label__ = 72; break; //@line 1915 "bufferedio.c"
      case 72: // $bb72
        var $464=HEAP[$self_addr]; //@line 1916 "bufferedio.c"
        var $465=(($464+52)&4294967295); //@line 1916 "bufferedio.c"
        HEAP[$465]=0; //@line 1916 "bufferedio.c"
        __label__ = 73; break; //@line 1918 "bufferedio.c"
      case 73: // $end
        var $466=HEAP[$written]; //@line 1919 "bufferedio.c"
        var $467=_PyLong_FromSsize_t($466); //@line 1919 "bufferedio.c"
        HEAP[$res]=$467; //@line 1919 "bufferedio.c"
        __label__ = 74; break; //@line 1921 "bufferedio.c"
      case 74: // $error
        _PyBuffer_Release($buf); //@line 1923 "bufferedio.c"
        var $468=HEAP[$res]; //@line 1924 "bufferedio.c"
        HEAP[$0]=$468; //@line 1924 "bufferedio.c"
        __label__ = 75; break; //@line 1924 "bufferedio.c"
      case 75: // $bb73
        var $469=HEAP[$0]; //@line 1789 "bufferedio.c"
        HEAP[$retval]=$469; //@line 1789 "bufferedio.c"
        __label__ = 76; break; //@line 1789 "bufferedio.c"
      case 76: // $return
        var $retval74=HEAP[$retval]; //@line 1789 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval74; //@line 1789 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferedrwpair_init($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kwds_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $reader=__stackBase__+20;
        var $writer=__stackBase__+24;
        var $buffer_size=__stackBase__+28;
        var $max_buffer_size=__stackBase__+32;
        var $_py_tmp=__stackBase__+36;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$kwds_addr]=$kwds;
        HEAP[$buffer_size]=8192; //@line 2034 "bufferedio.c"
        HEAP[$max_buffer_size]=-234; //@line 2035 "bufferedio.c"
        var $1=HEAP[$args_addr]; //@line 2037 "bufferedio.c"
        var $2=__PyArg_ParseTuple_SizeT($1, ((__str62)&4294967295), $reader, $writer, $buffer_size, $max_buffer_size); //@line 2037 "bufferedio.c"
        var $3=((($2))|0)==0; //@line 2037 "bufferedio.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2037 "bufferedio.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 2039 "bufferedio.c"
        __label__ = 17; break; //@line 2039 "bufferedio.c"
      case 2: // $bb1
        var $4=HEAP[$max_buffer_size]; //@line 2042 "bufferedio.c"
        var $5=((($4))|0)!=-234; //@line 2042 "bufferedio.c"
        if ($5) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 2042 "bufferedio.c"
      case 3: // $bb2
        var $6=_complain_about_max_buffer_size(); //@line 2042 "bufferedio.c"
        var $7=((($6))|0)==0; //@line 2042 "bufferedio.c"
        if ($7) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 2042 "bufferedio.c"
      case 4: // $bb3
        HEAP[$0]=-1; //@line 2043 "bufferedio.c"
        __label__ = 17; break; //@line 2043 "bufferedio.c"
      case 5: // $bb4
        var $8=HEAP[$reader]; //@line 2045 "bufferedio.c"
        var $9=__PyIOBase_check_readable($8, __Py_TrueStruct); //@line 2045 "bufferedio.c"
        var $10=($9)==0; //@line 2045 "bufferedio.c"
        if ($10) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 2045 "bufferedio.c"
      case 6: // $bb5
        HEAP[$0]=-1; //@line 2046 "bufferedio.c"
        __label__ = 17; break; //@line 2046 "bufferedio.c"
      case 7: // $bb6
        var $11=HEAP[$writer]; //@line 2047 "bufferedio.c"
        var $12=__PyIOBase_check_writable($11, __Py_TrueStruct); //@line 2047 "bufferedio.c"
        var $13=($12)==0; //@line 2047 "bufferedio.c"
        if ($13) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 2047 "bufferedio.c"
      case 8: // $bb7
        HEAP[$0]=-1; //@line 2048 "bufferedio.c"
        __label__ = 17; break; //@line 2048 "bufferedio.c"
      case 9: // $bb8
        var $14=HEAP[$buffer_size]; //@line 2050 "bufferedio.c"
        var $15=HEAP[$reader]; //@line 2050 "bufferedio.c"
        var $16=__PyObject_CallFunction_SizeT(_PyBufferedReader_Type, ((__str63)&4294967295), $15, $14); //@line 2050 "bufferedio.c"
        var $17=$16; //@line 2050 "bufferedio.c"
        var $18=HEAP[$self_addr]; //@line 2050 "bufferedio.c"
        var $19=(($18+8)&4294967295); //@line 2050 "bufferedio.c"
        HEAP[$19]=$17; //@line 2050 "bufferedio.c"
        var $20=HEAP[$self_addr]; //@line 2052 "bufferedio.c"
        var $21=(($20+8)&4294967295); //@line 2052 "bufferedio.c"
        var $22=HEAP[$21]; //@line 2052 "bufferedio.c"
        var $23=($22)==0; //@line 2052 "bufferedio.c"
        if ($23) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 2052 "bufferedio.c"
      case 10: // $bb9
        HEAP[$0]=-1; //@line 2053 "bufferedio.c"
        __label__ = 17; break; //@line 2053 "bufferedio.c"
      case 11: // $bb10
        var $24=HEAP[$buffer_size]; //@line 2055 "bufferedio.c"
        var $25=HEAP[$writer]; //@line 2055 "bufferedio.c"
        var $26=__PyObject_CallFunction_SizeT(_PyBufferedWriter_Type, ((__str63)&4294967295), $25, $24); //@line 2055 "bufferedio.c"
        var $27=$26; //@line 2055 "bufferedio.c"
        var $28=HEAP[$self_addr]; //@line 2055 "bufferedio.c"
        var $29=(($28+12)&4294967295); //@line 2055 "bufferedio.c"
        HEAP[$29]=$27; //@line 2055 "bufferedio.c"
        var $30=HEAP[$self_addr]; //@line 2057 "bufferedio.c"
        var $31=(($30+12)&4294967295); //@line 2057 "bufferedio.c"
        var $32=HEAP[$31]; //@line 2057 "bufferedio.c"
        var $33=($32)==0; //@line 2057 "bufferedio.c"
        if ($33) { __label__ = 12; break; } else { __label__ = 16; break; } //@line 2057 "bufferedio.c"
      case 12: // $bb11
        var $34=HEAP[$self_addr]; //@line 2058 "bufferedio.c"
        var $35=(($34+8)&4294967295); //@line 2058 "bufferedio.c"
        var $36=HEAP[$35]; //@line 2058 "bufferedio.c"
        var $37=($36)!=0; //@line 2058 "bufferedio.c"
        if ($37) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 2058 "bufferedio.c"
      case 13: // $bb12
        var $38=HEAP[$self_addr]; //@line 2058 "bufferedio.c"
        var $39=(($38+8)&4294967295); //@line 2058 "bufferedio.c"
        var $40=HEAP[$39]; //@line 2058 "bufferedio.c"
        var $41=$40; //@line 2058 "bufferedio.c"
        HEAP[$_py_tmp]=$41; //@line 2058 "bufferedio.c"
        var $42=HEAP[$self_addr]; //@line 2058 "bufferedio.c"
        var $43=(($42+8)&4294967295); //@line 2058 "bufferedio.c"
        HEAP[$43]=0; //@line 2058 "bufferedio.c"
        var $44=HEAP[$_py_tmp]; //@line 2058 "bufferedio.c"
        var $45=(($44)&4294967295); //@line 2058 "bufferedio.c"
        var $46=HEAP[$45]; //@line 2058 "bufferedio.c"
        var $47=((($46) - 1)&4294967295); //@line 2058 "bufferedio.c"
        var $48=HEAP[$_py_tmp]; //@line 2058 "bufferedio.c"
        var $49=(($48)&4294967295); //@line 2058 "bufferedio.c"
        HEAP[$49]=$47; //@line 2058 "bufferedio.c"
        var $50=HEAP[$_py_tmp]; //@line 2058 "bufferedio.c"
        var $51=(($50)&4294967295); //@line 2058 "bufferedio.c"
        var $52=HEAP[$51]; //@line 2058 "bufferedio.c"
        var $53=((($52))|0)==0; //@line 2058 "bufferedio.c"
        if ($53) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 2058 "bufferedio.c"
      case 14: // $bb13
        var $54=HEAP[$_py_tmp]; //@line 2058 "bufferedio.c"
        var $55=(($54+4)&4294967295); //@line 2058 "bufferedio.c"
        var $56=HEAP[$55]; //@line 2058 "bufferedio.c"
        var $57=(($56+24)&4294967295); //@line 2058 "bufferedio.c"
        var $58=HEAP[$57]; //@line 2058 "bufferedio.c"
        var $59=HEAP[$_py_tmp]; //@line 2058 "bufferedio.c"
        FUNCTION_TABLE[$58]($59); //@line 2058 "bufferedio.c"
        __label__ = 15; break; //@line 2058 "bufferedio.c"
      case 15: // $bb14
        HEAP[$0]=-1; //@line 2059 "bufferedio.c"
        __label__ = 17; break; //@line 2059 "bufferedio.c"
      case 16: // $bb15
        HEAP[$0]=0; //@line 2062 "bufferedio.c"
        __label__ = 17; break; //@line 2062 "bufferedio.c"
      case 17: // $bb16
        var $60=HEAP[$0]; //@line 2039 "bufferedio.c"
        HEAP[$retval]=$60; //@line 2039 "bufferedio.c"
        __label__ = 18; break; //@line 2039 "bufferedio.c"
      case 18: // $return
        var $retval17=HEAP[$retval]; //@line 2039 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval17; //@line 2039 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferedrwpair_traverse($self, $visit, $arg) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $visit_addr=__stackBase__+4;
        var $arg_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $vret=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$visit_addr]=$visit;
        HEAP[$arg_addr]=$arg;
        var $1=HEAP[$self_addr]; //@line 2068 "bufferedio.c"
        var $2=(($1+16)&4294967295); //@line 2068 "bufferedio.c"
        var $3=HEAP[$2]; //@line 2068 "bufferedio.c"
        var $4=($3)!=0; //@line 2068 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 2068 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 2068 "bufferedio.c"
        var $6=(($5+16)&4294967295); //@line 2068 "bufferedio.c"
        var $7=HEAP[$6]; //@line 2068 "bufferedio.c"
        var $8=HEAP[$visit_addr]; //@line 2068 "bufferedio.c"
        var $9=HEAP[$arg_addr]; //@line 2068 "bufferedio.c"
        var $10=FUNCTION_TABLE[$8]($7, $9); //@line 2068 "bufferedio.c"
        HEAP[$vret]=$10; //@line 2068 "bufferedio.c"
        var $11=HEAP[$vret]; //@line 2068 "bufferedio.c"
        var $12=((($11))|0)!=0; //@line 2068 "bufferedio.c"
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2068 "bufferedio.c"
      case 2: // $bb1
        var $13=HEAP[$vret]; //@line 2068 "bufferedio.c"
        HEAP[$0]=$13; //@line 2068 "bufferedio.c"
        __label__ = 4; break; //@line 2068 "bufferedio.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 2069 "bufferedio.c"
        __label__ = 4; break; //@line 2069 "bufferedio.c"
      case 4: // $bb3
        var $14=HEAP[$0]; //@line 2068 "bufferedio.c"
        HEAP[$retval]=$14; //@line 2068 "bufferedio.c"
        __label__ = 5; break; //@line 2068 "bufferedio.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 2068 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 2068 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferedrwpair_clear($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_py_tmp=__stackBase__+12;
        var $_py_tmp4=__stackBase__+16;
        var $_py_tmp8=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 2075 "bufferedio.c"
        var $2=(($1+8)&4294967295); //@line 2075 "bufferedio.c"
        var $3=HEAP[$2]; //@line 2075 "bufferedio.c"
        var $4=($3)!=0; //@line 2075 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 2075 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 2075 "bufferedio.c"
        var $6=(($5+8)&4294967295); //@line 2075 "bufferedio.c"
        var $7=HEAP[$6]; //@line 2075 "bufferedio.c"
        var $8=$7; //@line 2075 "bufferedio.c"
        HEAP[$_py_tmp]=$8; //@line 2075 "bufferedio.c"
        var $9=HEAP[$self_addr]; //@line 2075 "bufferedio.c"
        var $10=(($9+8)&4294967295); //@line 2075 "bufferedio.c"
        HEAP[$10]=0; //@line 2075 "bufferedio.c"
        var $11=HEAP[$_py_tmp]; //@line 2075 "bufferedio.c"
        var $12=(($11)&4294967295); //@line 2075 "bufferedio.c"
        var $13=HEAP[$12]; //@line 2075 "bufferedio.c"
        var $14=((($13) - 1)&4294967295); //@line 2075 "bufferedio.c"
        var $15=HEAP[$_py_tmp]; //@line 2075 "bufferedio.c"
        var $16=(($15)&4294967295); //@line 2075 "bufferedio.c"
        HEAP[$16]=$14; //@line 2075 "bufferedio.c"
        var $17=HEAP[$_py_tmp]; //@line 2075 "bufferedio.c"
        var $18=(($17)&4294967295); //@line 2075 "bufferedio.c"
        var $19=HEAP[$18]; //@line 2075 "bufferedio.c"
        var $20=((($19))|0)==0; //@line 2075 "bufferedio.c"
        if ($20) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2075 "bufferedio.c"
      case 2: // $bb1
        var $21=HEAP[$_py_tmp]; //@line 2075 "bufferedio.c"
        var $22=(($21+4)&4294967295); //@line 2075 "bufferedio.c"
        var $23=HEAP[$22]; //@line 2075 "bufferedio.c"
        var $24=(($23+24)&4294967295); //@line 2075 "bufferedio.c"
        var $25=HEAP[$24]; //@line 2075 "bufferedio.c"
        var $26=HEAP[$_py_tmp]; //@line 2075 "bufferedio.c"
        FUNCTION_TABLE[$25]($26); //@line 2075 "bufferedio.c"
        __label__ = 3; break; //@line 2075 "bufferedio.c"
      case 3: // $bb2
        var $27=HEAP[$self_addr]; //@line 2076 "bufferedio.c"
        var $28=(($27+12)&4294967295); //@line 2076 "bufferedio.c"
        var $29=HEAP[$28]; //@line 2076 "bufferedio.c"
        var $30=($29)!=0; //@line 2076 "bufferedio.c"
        if ($30) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 2076 "bufferedio.c"
      case 4: // $bb3
        var $31=HEAP[$self_addr]; //@line 2076 "bufferedio.c"
        var $32=(($31+12)&4294967295); //@line 2076 "bufferedio.c"
        var $33=HEAP[$32]; //@line 2076 "bufferedio.c"
        var $34=$33; //@line 2076 "bufferedio.c"
        HEAP[$_py_tmp4]=$34; //@line 2076 "bufferedio.c"
        var $35=HEAP[$self_addr]; //@line 2076 "bufferedio.c"
        var $36=(($35+12)&4294967295); //@line 2076 "bufferedio.c"
        HEAP[$36]=0; //@line 2076 "bufferedio.c"
        var $37=HEAP[$_py_tmp4]; //@line 2076 "bufferedio.c"
        var $38=(($37)&4294967295); //@line 2076 "bufferedio.c"
        var $39=HEAP[$38]; //@line 2076 "bufferedio.c"
        var $40=((($39) - 1)&4294967295); //@line 2076 "bufferedio.c"
        var $41=HEAP[$_py_tmp4]; //@line 2076 "bufferedio.c"
        var $42=(($41)&4294967295); //@line 2076 "bufferedio.c"
        HEAP[$42]=$40; //@line 2076 "bufferedio.c"
        var $43=HEAP[$_py_tmp4]; //@line 2076 "bufferedio.c"
        var $44=(($43)&4294967295); //@line 2076 "bufferedio.c"
        var $45=HEAP[$44]; //@line 2076 "bufferedio.c"
        var $46=((($45))|0)==0; //@line 2076 "bufferedio.c"
        if ($46) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 2076 "bufferedio.c"
      case 5: // $bb5
        var $47=HEAP[$_py_tmp4]; //@line 2076 "bufferedio.c"
        var $48=(($47+4)&4294967295); //@line 2076 "bufferedio.c"
        var $49=HEAP[$48]; //@line 2076 "bufferedio.c"
        var $50=(($49+24)&4294967295); //@line 2076 "bufferedio.c"
        var $51=HEAP[$50]; //@line 2076 "bufferedio.c"
        var $52=HEAP[$_py_tmp4]; //@line 2076 "bufferedio.c"
        FUNCTION_TABLE[$51]($52); //@line 2076 "bufferedio.c"
        __label__ = 6; break; //@line 2076 "bufferedio.c"
      case 6: // $bb6
        var $53=HEAP[$self_addr]; //@line 2077 "bufferedio.c"
        var $54=(($53+16)&4294967295); //@line 2077 "bufferedio.c"
        var $55=HEAP[$54]; //@line 2077 "bufferedio.c"
        var $56=($55)!=0; //@line 2077 "bufferedio.c"
        if ($56) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 2077 "bufferedio.c"
      case 7: // $bb7
        var $57=HEAP[$self_addr]; //@line 2077 "bufferedio.c"
        var $58=(($57+16)&4294967295); //@line 2077 "bufferedio.c"
        var $59=HEAP[$58]; //@line 2077 "bufferedio.c"
        HEAP[$_py_tmp8]=$59; //@line 2077 "bufferedio.c"
        var $60=HEAP[$self_addr]; //@line 2077 "bufferedio.c"
        var $61=(($60+16)&4294967295); //@line 2077 "bufferedio.c"
        HEAP[$61]=0; //@line 2077 "bufferedio.c"
        var $62=HEAP[$_py_tmp8]; //@line 2077 "bufferedio.c"
        var $63=(($62)&4294967295); //@line 2077 "bufferedio.c"
        var $64=HEAP[$63]; //@line 2077 "bufferedio.c"
        var $65=((($64) - 1)&4294967295); //@line 2077 "bufferedio.c"
        var $66=HEAP[$_py_tmp8]; //@line 2077 "bufferedio.c"
        var $67=(($66)&4294967295); //@line 2077 "bufferedio.c"
        HEAP[$67]=$65; //@line 2077 "bufferedio.c"
        var $68=HEAP[$_py_tmp8]; //@line 2077 "bufferedio.c"
        var $69=(($68)&4294967295); //@line 2077 "bufferedio.c"
        var $70=HEAP[$69]; //@line 2077 "bufferedio.c"
        var $71=((($70))|0)==0; //@line 2077 "bufferedio.c"
        if ($71) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 2077 "bufferedio.c"
      case 8: // $bb9
        var $72=HEAP[$_py_tmp8]; //@line 2077 "bufferedio.c"
        var $73=(($72+4)&4294967295); //@line 2077 "bufferedio.c"
        var $74=HEAP[$73]; //@line 2077 "bufferedio.c"
        var $75=(($74+24)&4294967295); //@line 2077 "bufferedio.c"
        var $76=HEAP[$75]; //@line 2077 "bufferedio.c"
        var $77=HEAP[$_py_tmp8]; //@line 2077 "bufferedio.c"
        FUNCTION_TABLE[$76]($77); //@line 2077 "bufferedio.c"
        __label__ = 9; break; //@line 2077 "bufferedio.c"
      case 9: // $bb10
        HEAP[$0]=0; //@line 2078 "bufferedio.c"
        var $78=HEAP[$0]; //@line 2078 "bufferedio.c"
        HEAP[$retval]=$78; //@line 2078 "bufferedio.c"
        __label__ = 10; break; //@line 2078 "bufferedio.c"
      case 10: // $return
        var $retval11=HEAP[$retval]; //@line 2078 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 2078 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferedrwpair_dealloc($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $g=__stackBase__+4;
        var $_py_tmp=__stackBase__+8;
        var $_py_tmp6=__stackBase__+12;
        var $_py_tmp10=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $0=HEAP[$self_addr]; //@line 2084 "bufferedio.c"
        var $1=$0; //@line 2084 "bufferedio.c"
        var $2=(($1+-12)&4294967295); //@line 2084 "bufferedio.c"
        HEAP[$g]=$2; //@line 2084 "bufferedio.c"
        var $3=HEAP[$g]; //@line 2084 "bufferedio.c"
        var $4=(($3)&4294967295); //@line 2084 "bufferedio.c"
        var $5=(($4+8)&4294967295); //@line 2084 "bufferedio.c"
        var $6=HEAP[$5]; //@line 2084 "bufferedio.c"
        var $7=((($6))|0)==-2; //@line 2084 "bufferedio.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2084 "bufferedio.c"
      case 1: // $bb
        ___assert_fail(((__str9)&4294967295), ((__str10)&4294967295), 2084, ((___PRETTY_FUNCTION___11129)&4294967295)); //@line 2084 "bufferedio.c"
        throw "Reached an unreachable! Original .ll line: 9462"; //@line 2084 "bufferedio.c"
      case 2: // $bb1
        var $8=HEAP[$g]; //@line 2084 "bufferedio.c"
        var $9=(($8)&4294967295); //@line 2084 "bufferedio.c"
        var $10=(($9+8)&4294967295); //@line 2084 "bufferedio.c"
        HEAP[$10]=-2; //@line 2084 "bufferedio.c"
        var $11=HEAP[$g]; //@line 2084 "bufferedio.c"
        var $12=(($11)&4294967295); //@line 2084 "bufferedio.c"
        var $13=(($12+4)&4294967295); //@line 2084 "bufferedio.c"
        var $14=HEAP[$13]; //@line 2084 "bufferedio.c"
        var $15=HEAP[$g]; //@line 2084 "bufferedio.c"
        var $16=(($15)&4294967295); //@line 2084 "bufferedio.c"
        var $17=(($16)&4294967295); //@line 2084 "bufferedio.c"
        var $18=HEAP[$17]; //@line 2084 "bufferedio.c"
        var $19=(($14)&4294967295); //@line 2084 "bufferedio.c"
        var $20=(($19)&4294967295); //@line 2084 "bufferedio.c"
        HEAP[$20]=$18; //@line 2084 "bufferedio.c"
        var $21=HEAP[$g]; //@line 2084 "bufferedio.c"
        var $22=(($21)&4294967295); //@line 2084 "bufferedio.c"
        var $23=(($22)&4294967295); //@line 2084 "bufferedio.c"
        var $24=HEAP[$23]; //@line 2084 "bufferedio.c"
        var $25=HEAP[$g]; //@line 2084 "bufferedio.c"
        var $26=(($25)&4294967295); //@line 2084 "bufferedio.c"
        var $27=(($26+4)&4294967295); //@line 2084 "bufferedio.c"
        var $28=HEAP[$27]; //@line 2084 "bufferedio.c"
        var $29=(($24)&4294967295); //@line 2084 "bufferedio.c"
        var $30=(($29+4)&4294967295); //@line 2084 "bufferedio.c"
        HEAP[$30]=$28; //@line 2084 "bufferedio.c"
        var $31=HEAP[$g]; //@line 2084 "bufferedio.c"
        var $32=(($31)&4294967295); //@line 2084 "bufferedio.c"
        var $33=(($32)&4294967295); //@line 2084 "bufferedio.c"
        HEAP[$33]=0; //@line 2084 "bufferedio.c"
        var $34=HEAP[$self_addr]; //@line 2085 "bufferedio.c"
        var $35=(($34+8)&4294967295); //@line 2085 "bufferedio.c"
        var $36=HEAP[$35]; //@line 2085 "bufferedio.c"
        var $37=($36)!=0; //@line 2085 "bufferedio.c"
        if ($37) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 2085 "bufferedio.c"
      case 3: // $bb2
        var $38=HEAP[$self_addr]; //@line 2085 "bufferedio.c"
        var $39=(($38+8)&4294967295); //@line 2085 "bufferedio.c"
        var $40=HEAP[$39]; //@line 2085 "bufferedio.c"
        var $41=$40; //@line 2085 "bufferedio.c"
        HEAP[$_py_tmp]=$41; //@line 2085 "bufferedio.c"
        var $42=HEAP[$self_addr]; //@line 2085 "bufferedio.c"
        var $43=(($42+8)&4294967295); //@line 2085 "bufferedio.c"
        HEAP[$43]=0; //@line 2085 "bufferedio.c"
        var $44=HEAP[$_py_tmp]; //@line 2085 "bufferedio.c"
        var $45=(($44)&4294967295); //@line 2085 "bufferedio.c"
        var $46=HEAP[$45]; //@line 2085 "bufferedio.c"
        var $47=((($46) - 1)&4294967295); //@line 2085 "bufferedio.c"
        var $48=HEAP[$_py_tmp]; //@line 2085 "bufferedio.c"
        var $49=(($48)&4294967295); //@line 2085 "bufferedio.c"
        HEAP[$49]=$47; //@line 2085 "bufferedio.c"
        var $50=HEAP[$_py_tmp]; //@line 2085 "bufferedio.c"
        var $51=(($50)&4294967295); //@line 2085 "bufferedio.c"
        var $52=HEAP[$51]; //@line 2085 "bufferedio.c"
        var $53=((($52))|0)==0; //@line 2085 "bufferedio.c"
        if ($53) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 2085 "bufferedio.c"
      case 4: // $bb3
        var $54=HEAP[$_py_tmp]; //@line 2085 "bufferedio.c"
        var $55=(($54+4)&4294967295); //@line 2085 "bufferedio.c"
        var $56=HEAP[$55]; //@line 2085 "bufferedio.c"
        var $57=(($56+24)&4294967295); //@line 2085 "bufferedio.c"
        var $58=HEAP[$57]; //@line 2085 "bufferedio.c"
        var $59=HEAP[$_py_tmp]; //@line 2085 "bufferedio.c"
        FUNCTION_TABLE[$58]($59); //@line 2085 "bufferedio.c"
        __label__ = 5; break; //@line 2085 "bufferedio.c"
      case 5: // $bb4
        var $60=HEAP[$self_addr]; //@line 2086 "bufferedio.c"
        var $61=(($60+12)&4294967295); //@line 2086 "bufferedio.c"
        var $62=HEAP[$61]; //@line 2086 "bufferedio.c"
        var $63=($62)!=0; //@line 2086 "bufferedio.c"
        if ($63) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 2086 "bufferedio.c"
      case 6: // $bb5
        var $64=HEAP[$self_addr]; //@line 2086 "bufferedio.c"
        var $65=(($64+12)&4294967295); //@line 2086 "bufferedio.c"
        var $66=HEAP[$65]; //@line 2086 "bufferedio.c"
        var $67=$66; //@line 2086 "bufferedio.c"
        HEAP[$_py_tmp6]=$67; //@line 2086 "bufferedio.c"
        var $68=HEAP[$self_addr]; //@line 2086 "bufferedio.c"
        var $69=(($68+12)&4294967295); //@line 2086 "bufferedio.c"
        HEAP[$69]=0; //@line 2086 "bufferedio.c"
        var $70=HEAP[$_py_tmp6]; //@line 2086 "bufferedio.c"
        var $71=(($70)&4294967295); //@line 2086 "bufferedio.c"
        var $72=HEAP[$71]; //@line 2086 "bufferedio.c"
        var $73=((($72) - 1)&4294967295); //@line 2086 "bufferedio.c"
        var $74=HEAP[$_py_tmp6]; //@line 2086 "bufferedio.c"
        var $75=(($74)&4294967295); //@line 2086 "bufferedio.c"
        HEAP[$75]=$73; //@line 2086 "bufferedio.c"
        var $76=HEAP[$_py_tmp6]; //@line 2086 "bufferedio.c"
        var $77=(($76)&4294967295); //@line 2086 "bufferedio.c"
        var $78=HEAP[$77]; //@line 2086 "bufferedio.c"
        var $79=((($78))|0)==0; //@line 2086 "bufferedio.c"
        if ($79) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 2086 "bufferedio.c"
      case 7: // $bb7
        var $80=HEAP[$_py_tmp6]; //@line 2086 "bufferedio.c"
        var $81=(($80+4)&4294967295); //@line 2086 "bufferedio.c"
        var $82=HEAP[$81]; //@line 2086 "bufferedio.c"
        var $83=(($82+24)&4294967295); //@line 2086 "bufferedio.c"
        var $84=HEAP[$83]; //@line 2086 "bufferedio.c"
        var $85=HEAP[$_py_tmp6]; //@line 2086 "bufferedio.c"
        FUNCTION_TABLE[$84]($85); //@line 2086 "bufferedio.c"
        __label__ = 8; break; //@line 2086 "bufferedio.c"
      case 8: // $bb8
        var $86=HEAP[$self_addr]; //@line 2087 "bufferedio.c"
        var $87=(($86+16)&4294967295); //@line 2087 "bufferedio.c"
        var $88=HEAP[$87]; //@line 2087 "bufferedio.c"
        var $89=($88)!=0; //@line 2087 "bufferedio.c"
        if ($89) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 2087 "bufferedio.c"
      case 9: // $bb9
        var $90=HEAP[$self_addr]; //@line 2087 "bufferedio.c"
        var $91=(($90+16)&4294967295); //@line 2087 "bufferedio.c"
        var $92=HEAP[$91]; //@line 2087 "bufferedio.c"
        HEAP[$_py_tmp10]=$92; //@line 2087 "bufferedio.c"
        var $93=HEAP[$self_addr]; //@line 2087 "bufferedio.c"
        var $94=(($93+16)&4294967295); //@line 2087 "bufferedio.c"
        HEAP[$94]=0; //@line 2087 "bufferedio.c"
        var $95=HEAP[$_py_tmp10]; //@line 2087 "bufferedio.c"
        var $96=(($95)&4294967295); //@line 2087 "bufferedio.c"
        var $97=HEAP[$96]; //@line 2087 "bufferedio.c"
        var $98=((($97) - 1)&4294967295); //@line 2087 "bufferedio.c"
        var $99=HEAP[$_py_tmp10]; //@line 2087 "bufferedio.c"
        var $100=(($99)&4294967295); //@line 2087 "bufferedio.c"
        HEAP[$100]=$98; //@line 2087 "bufferedio.c"
        var $101=HEAP[$_py_tmp10]; //@line 2087 "bufferedio.c"
        var $102=(($101)&4294967295); //@line 2087 "bufferedio.c"
        var $103=HEAP[$102]; //@line 2087 "bufferedio.c"
        var $104=((($103))|0)==0; //@line 2087 "bufferedio.c"
        if ($104) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 2087 "bufferedio.c"
      case 10: // $bb11
        var $105=HEAP[$_py_tmp10]; //@line 2087 "bufferedio.c"
        var $106=(($105+4)&4294967295); //@line 2087 "bufferedio.c"
        var $107=HEAP[$106]; //@line 2087 "bufferedio.c"
        var $108=(($107+24)&4294967295); //@line 2087 "bufferedio.c"
        var $109=HEAP[$108]; //@line 2087 "bufferedio.c"
        var $110=HEAP[$_py_tmp10]; //@line 2087 "bufferedio.c"
        FUNCTION_TABLE[$109]($110); //@line 2087 "bufferedio.c"
        __label__ = 11; break; //@line 2087 "bufferedio.c"
      case 11: // $bb12
        var $111=HEAP[$self_addr]; //@line 2088 "bufferedio.c"
        var $112=$111; //@line 2088 "bufferedio.c"
        var $113=(($112+4)&4294967295); //@line 2088 "bufferedio.c"
        var $114=HEAP[$113]; //@line 2088 "bufferedio.c"
        var $115=(($114+160)&4294967295); //@line 2088 "bufferedio.c"
        var $116=HEAP[$115]; //@line 2088 "bufferedio.c"
        var $117=HEAP[$self_addr]; //@line 2088 "bufferedio.c"
        var $118=$117; //@line 2088 "bufferedio.c"
        FUNCTION_TABLE[$116]($118); //@line 2088 "bufferedio.c"
        __label__ = 12; break; //@line 2089 "bufferedio.c"
      case 12: // $return
        STACKTOP = __stackBase__;
        return; //@line 2089 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __forward_call($self, $name, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $name_addr=__stackBase__+4;
        var $args_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $func=__stackBase__+20;
        var $ret=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$name_addr]=$name;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 2094 "bufferedio.c"
        var $2=$1; //@line 2094 "bufferedio.c"
        var $3=HEAP[$name_addr]; //@line 2094 "bufferedio.c"
        var $4=_PyObject_GetAttrString($2, $3); //@line 2094 "bufferedio.c"
        HEAP[$func]=$4; //@line 2094 "bufferedio.c"
        var $5=HEAP[$func]; //@line 2097 "bufferedio.c"
        var $6=($5)==0; //@line 2097 "bufferedio.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2097 "bufferedio.c"
      case 1: // $bb
        var $7=HEAP[_PyExc_AttributeError]; //@line 2098 "bufferedio.c"
        var $8=HEAP[$name_addr]; //@line 2098 "bufferedio.c"
        _PyErr_SetString($7, $8); //@line 2098 "bufferedio.c"
        HEAP[$0]=0; //@line 2099 "bufferedio.c"
        __label__ = 5; break; //@line 2099 "bufferedio.c"
      case 2: // $bb1
        var $9=HEAP[$func]; //@line 2102 "bufferedio.c"
        var $10=HEAP[$args_addr]; //@line 2102 "bufferedio.c"
        var $11=_PyObject_CallObject($9, $10); //@line 2102 "bufferedio.c"
        HEAP[$ret]=$11; //@line 2102 "bufferedio.c"
        var $12=HEAP[$func]; //@line 2103 "bufferedio.c"
        var $13=(($12)&4294967295); //@line 2103 "bufferedio.c"
        var $14=HEAP[$13]; //@line 2103 "bufferedio.c"
        var $15=((($14) - 1)&4294967295); //@line 2103 "bufferedio.c"
        var $16=HEAP[$func]; //@line 2103 "bufferedio.c"
        var $17=(($16)&4294967295); //@line 2103 "bufferedio.c"
        HEAP[$17]=$15; //@line 2103 "bufferedio.c"
        var $18=HEAP[$func]; //@line 2103 "bufferedio.c"
        var $19=(($18)&4294967295); //@line 2103 "bufferedio.c"
        var $20=HEAP[$19]; //@line 2103 "bufferedio.c"
        var $21=((($20))|0)==0; //@line 2103 "bufferedio.c"
        if ($21) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 2103 "bufferedio.c"
      case 3: // $bb2
        var $22=HEAP[$func]; //@line 2103 "bufferedio.c"
        var $23=(($22+4)&4294967295); //@line 2103 "bufferedio.c"
        var $24=HEAP[$23]; //@line 2103 "bufferedio.c"
        var $25=(($24+24)&4294967295); //@line 2103 "bufferedio.c"
        var $26=HEAP[$25]; //@line 2103 "bufferedio.c"
        var $27=HEAP[$func]; //@line 2103 "bufferedio.c"
        FUNCTION_TABLE[$26]($27); //@line 2103 "bufferedio.c"
        __label__ = 4; break; //@line 2103 "bufferedio.c"
      case 4: // $bb3
        var $28=HEAP[$ret]; //@line 2104 "bufferedio.c"
        HEAP[$0]=$28; //@line 2104 "bufferedio.c"
        __label__ = 5; break; //@line 2104 "bufferedio.c"
      case 5: // $bb4
        var $29=HEAP[$0]; //@line 2099 "bufferedio.c"
        HEAP[$retval]=$29; //@line 2099 "bufferedio.c"
        __label__ = 6; break; //@line 2099 "bufferedio.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 2099 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 2099 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferedrwpair_read($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 2110 "bufferedio.c"
        var $2=(($1+8)&4294967295); //@line 2110 "bufferedio.c"
        var $3=HEAP[$2]; //@line 2110 "bufferedio.c"
        var $4=HEAP[$args_addr]; //@line 2110 "bufferedio.c"
        var $5=__forward_call($3, ((__str1)&4294967295), $4); //@line 2110 "bufferedio.c"
        HEAP[$0]=$5; //@line 2110 "bufferedio.c"
        var $6=HEAP[$0]; //@line 2110 "bufferedio.c"
        HEAP[$retval]=$6; //@line 2110 "bufferedio.c"
        __label__ = 1; break; //@line 2110 "bufferedio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 2110 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 2110 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferedrwpair_peek($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 2116 "bufferedio.c"
        var $2=(($1+8)&4294967295); //@line 2116 "bufferedio.c"
        var $3=HEAP[$2]; //@line 2116 "bufferedio.c"
        var $4=HEAP[$args_addr]; //@line 2116 "bufferedio.c"
        var $5=__forward_call($3, ((__str47)&4294967295), $4); //@line 2116 "bufferedio.c"
        HEAP[$0]=$5; //@line 2116 "bufferedio.c"
        var $6=HEAP[$0]; //@line 2116 "bufferedio.c"
        HEAP[$retval]=$6; //@line 2116 "bufferedio.c"
        __label__ = 1; break; //@line 2116 "bufferedio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 2116 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 2116 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferedrwpair_read1($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 2122 "bufferedio.c"
        var $2=(($1+8)&4294967295); //@line 2122 "bufferedio.c"
        var $3=HEAP[$2]; //@line 2122 "bufferedio.c"
        var $4=HEAP[$args_addr]; //@line 2122 "bufferedio.c"
        var $5=__forward_call($3, ((__str5)&4294967295), $4); //@line 2122 "bufferedio.c"
        HEAP[$0]=$5; //@line 2122 "bufferedio.c"
        var $6=HEAP[$0]; //@line 2122 "bufferedio.c"
        HEAP[$retval]=$6; //@line 2122 "bufferedio.c"
        __label__ = 1; break; //@line 2122 "bufferedio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 2122 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 2122 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferedrwpair_readinto($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 2128 "bufferedio.c"
        var $2=(($1+8)&4294967295); //@line 2128 "bufferedio.c"
        var $3=HEAP[$2]; //@line 2128 "bufferedio.c"
        var $4=HEAP[$args_addr]; //@line 2128 "bufferedio.c"
        var $5=__forward_call($3, ((__str7)&4294967295), $4); //@line 2128 "bufferedio.c"
        HEAP[$0]=$5; //@line 2128 "bufferedio.c"
        var $6=HEAP[$0]; //@line 2128 "bufferedio.c"
        HEAP[$retval]=$6; //@line 2128 "bufferedio.c"
        __label__ = 1; break; //@line 2128 "bufferedio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 2128 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 2128 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferedrwpair_write($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 2134 "bufferedio.c"
        var $2=(($1+12)&4294967295); //@line 2134 "bufferedio.c"
        var $3=HEAP[$2]; //@line 2134 "bufferedio.c"
        var $4=HEAP[$args_addr]; //@line 2134 "bufferedio.c"
        var $5=__forward_call($3, ((__str6)&4294967295), $4); //@line 2134 "bufferedio.c"
        HEAP[$0]=$5; //@line 2134 "bufferedio.c"
        var $6=HEAP[$0]; //@line 2134 "bufferedio.c"
        HEAP[$retval]=$6; //@line 2134 "bufferedio.c"
        __label__ = 1; break; //@line 2134 "bufferedio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 2134 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 2134 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferedrwpair_flush($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 2140 "bufferedio.c"
        var $2=(($1+12)&4294967295); //@line 2140 "bufferedio.c"
        var $3=HEAP[$2]; //@line 2140 "bufferedio.c"
        var $4=HEAP[$args_addr]; //@line 2140 "bufferedio.c"
        var $5=__forward_call($3, ((__str40)&4294967295), $4); //@line 2140 "bufferedio.c"
        HEAP[$0]=$5; //@line 2140 "bufferedio.c"
        var $6=HEAP[$0]; //@line 2140 "bufferedio.c"
        HEAP[$retval]=$6; //@line 2140 "bufferedio.c"
        __label__ = 1; break; //@line 2140 "bufferedio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 2140 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 2140 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferedrwpair_readable($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 2146 "bufferedio.c"
        var $2=(($1+8)&4294967295); //@line 2146 "bufferedio.c"
        var $3=HEAP[$2]; //@line 2146 "bufferedio.c"
        var $4=HEAP[$args_addr]; //@line 2146 "bufferedio.c"
        var $5=__forward_call($3, ((__str43)&4294967295), $4); //@line 2146 "bufferedio.c"
        HEAP[$0]=$5; //@line 2146 "bufferedio.c"
        var $6=HEAP[$0]; //@line 2146 "bufferedio.c"
        HEAP[$retval]=$6; //@line 2146 "bufferedio.c"
        __label__ = 1; break; //@line 2146 "bufferedio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 2146 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 2146 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferedrwpair_writable($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 2152 "bufferedio.c"
        var $2=(($1+12)&4294967295); //@line 2152 "bufferedio.c"
        var $3=HEAP[$2]; //@line 2152 "bufferedio.c"
        var $4=HEAP[$args_addr]; //@line 2152 "bufferedio.c"
        var $5=__forward_call($3, ((__str44)&4294967295), $4); //@line 2152 "bufferedio.c"
        HEAP[$0]=$5; //@line 2152 "bufferedio.c"
        var $6=HEAP[$0]; //@line 2152 "bufferedio.c"
        HEAP[$retval]=$6; //@line 2152 "bufferedio.c"
        __label__ = 1; break; //@line 2152 "bufferedio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 2152 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 2152 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferedrwpair_close($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $ret=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 2158 "bufferedio.c"
        var $2=(($1+12)&4294967295); //@line 2158 "bufferedio.c"
        var $3=HEAP[$2]; //@line 2158 "bufferedio.c"
        var $4=HEAP[$args_addr]; //@line 2158 "bufferedio.c"
        var $5=__forward_call($3, ((__str41)&4294967295), $4); //@line 2158 "bufferedio.c"
        HEAP[$ret]=$5; //@line 2158 "bufferedio.c"
        var $6=HEAP[$ret]; //@line 2159 "bufferedio.c"
        var $7=($6)==0; //@line 2159 "bufferedio.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2159 "bufferedio.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 2160 "bufferedio.c"
        __label__ = 5; break; //@line 2160 "bufferedio.c"
      case 2: // $bb1
        var $8=HEAP[$ret]; //@line 2161 "bufferedio.c"
        var $9=(($8)&4294967295); //@line 2161 "bufferedio.c"
        var $10=HEAP[$9]; //@line 2161 "bufferedio.c"
        var $11=((($10) - 1)&4294967295); //@line 2161 "bufferedio.c"
        var $12=HEAP[$ret]; //@line 2161 "bufferedio.c"
        var $13=(($12)&4294967295); //@line 2161 "bufferedio.c"
        HEAP[$13]=$11; //@line 2161 "bufferedio.c"
        var $14=HEAP[$ret]; //@line 2161 "bufferedio.c"
        var $15=(($14)&4294967295); //@line 2161 "bufferedio.c"
        var $16=HEAP[$15]; //@line 2161 "bufferedio.c"
        var $17=((($16))|0)==0; //@line 2161 "bufferedio.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 2161 "bufferedio.c"
      case 3: // $bb2
        var $18=HEAP[$ret]; //@line 2161 "bufferedio.c"
        var $19=(($18+4)&4294967295); //@line 2161 "bufferedio.c"
        var $20=HEAP[$19]; //@line 2161 "bufferedio.c"
        var $21=(($20+24)&4294967295); //@line 2161 "bufferedio.c"
        var $22=HEAP[$21]; //@line 2161 "bufferedio.c"
        var $23=HEAP[$ret]; //@line 2161 "bufferedio.c"
        FUNCTION_TABLE[$22]($23); //@line 2161 "bufferedio.c"
        __label__ = 4; break; //@line 2161 "bufferedio.c"
      case 4: // $bb3
        var $24=HEAP[$self_addr]; //@line 2163 "bufferedio.c"
        var $25=(($24+8)&4294967295); //@line 2163 "bufferedio.c"
        var $26=HEAP[$25]; //@line 2163 "bufferedio.c"
        var $27=HEAP[$args_addr]; //@line 2163 "bufferedio.c"
        var $28=__forward_call($26, ((__str41)&4294967295), $27); //@line 2163 "bufferedio.c"
        HEAP[$0]=$28; //@line 2163 "bufferedio.c"
        __label__ = 5; break; //@line 2163 "bufferedio.c"
      case 5: // $bb4
        var $29=HEAP[$0]; //@line 2160 "bufferedio.c"
        HEAP[$retval]=$29; //@line 2160 "bufferedio.c"
        __label__ = 6; break; //@line 2160 "bufferedio.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 2160 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 2160 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferedrwpair_isatty($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $ret=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 2169 "bufferedio.c"
        var $2=(($1+12)&4294967295); //@line 2169 "bufferedio.c"
        var $3=HEAP[$2]; //@line 2169 "bufferedio.c"
        var $4=HEAP[$args_addr]; //@line 2169 "bufferedio.c"
        var $5=__forward_call($3, ((__str46)&4294967295), $4); //@line 2169 "bufferedio.c"
        HEAP[$ret]=$5; //@line 2169 "bufferedio.c"
        var $6=HEAP[$ret]; //@line 2171 "bufferedio.c"
        var $7=($6)!=(__Py_ZeroStruct); //@line 2171 "bufferedio.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2171 "bufferedio.c"
      case 1: // $bb
        var $8=HEAP[$ret]; //@line 2173 "bufferedio.c"
        HEAP[$0]=$8; //@line 2173 "bufferedio.c"
        __label__ = 5; break; //@line 2173 "bufferedio.c"
      case 2: // $bb1
        var $9=HEAP[$ret]; //@line 2175 "bufferedio.c"
        var $10=(($9)&4294967295); //@line 2175 "bufferedio.c"
        var $11=HEAP[$10]; //@line 2175 "bufferedio.c"
        var $12=((($11) - 1)&4294967295); //@line 2175 "bufferedio.c"
        var $13=HEAP[$ret]; //@line 2175 "bufferedio.c"
        var $14=(($13)&4294967295); //@line 2175 "bufferedio.c"
        HEAP[$14]=$12; //@line 2175 "bufferedio.c"
        var $15=HEAP[$ret]; //@line 2175 "bufferedio.c"
        var $16=(($15)&4294967295); //@line 2175 "bufferedio.c"
        var $17=HEAP[$16]; //@line 2175 "bufferedio.c"
        var $18=((($17))|0)==0; //@line 2175 "bufferedio.c"
        if ($18) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 2175 "bufferedio.c"
      case 3: // $bb2
        var $19=HEAP[$ret]; //@line 2175 "bufferedio.c"
        var $20=(($19+4)&4294967295); //@line 2175 "bufferedio.c"
        var $21=HEAP[$20]; //@line 2175 "bufferedio.c"
        var $22=(($21+24)&4294967295); //@line 2175 "bufferedio.c"
        var $23=HEAP[$22]; //@line 2175 "bufferedio.c"
        var $24=HEAP[$ret]; //@line 2175 "bufferedio.c"
        FUNCTION_TABLE[$23]($24); //@line 2175 "bufferedio.c"
        __label__ = 4; break; //@line 2175 "bufferedio.c"
      case 4: // $bb3
        var $25=HEAP[$self_addr]; //@line 2177 "bufferedio.c"
        var $26=(($25+8)&4294967295); //@line 2177 "bufferedio.c"
        var $27=HEAP[$26]; //@line 2177 "bufferedio.c"
        var $28=HEAP[$args_addr]; //@line 2177 "bufferedio.c"
        var $29=__forward_call($27, ((__str46)&4294967295), $28); //@line 2177 "bufferedio.c"
        HEAP[$0]=$29; //@line 2177 "bufferedio.c"
        __label__ = 5; break; //@line 2177 "bufferedio.c"
      case 5: // $bb4
        var $30=HEAP[$0]; //@line 2173 "bufferedio.c"
        HEAP[$retval]=$30; //@line 2173 "bufferedio.c"
        __label__ = 6; break; //@line 2173 "bufferedio.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 2173 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 2173 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferedrwpair_closed_get($self, $context) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $context_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$context_addr]=$context;
        var $1=HEAP[__PyIO_str_closed]; //@line 2183 "bufferedio.c"
        var $2=HEAP[$self_addr]; //@line 2183 "bufferedio.c"
        var $3=(($2+12)&4294967295); //@line 2183 "bufferedio.c"
        var $4=HEAP[$3]; //@line 2183 "bufferedio.c"
        var $5=$4; //@line 2183 "bufferedio.c"
        var $6=_PyObject_GetAttr($5, $1); //@line 2183 "bufferedio.c"
        HEAP[$0]=$6; //@line 2183 "bufferedio.c"
        var $7=HEAP[$0]; //@line 2183 "bufferedio.c"
        HEAP[$retval]=$7; //@line 2183 "bufferedio.c"
        __label__ = 1; break; //@line 2183 "bufferedio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 2183 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 2183 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferedrandom_init($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 56; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 56);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kwds_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $iftmp_259=__stackBase__+16;
        var $0=__stackBase__+20;
        var $kwlist=__stackBase__+24;
        var $buffer_size=__stackBase__+40;
        var $max_buffer_size=__stackBase__+44;
        var $raw=__stackBase__+48;
        var $_py_tmp=__stackBase__+52;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$kwds_addr]=$kwds;
        var $1=(($kwlist)&4294967295); //@line 2268 "bufferedio.c"
        var $2=HEAP[((_C_248_11327)&4294967295)]; //@line 2268 "bufferedio.c"
        HEAP[$1]=$2; //@line 2268 "bufferedio.c"
        var $3=(($kwlist+4)&4294967295); //@line 2268 "bufferedio.c"
        var $4=HEAP[((_C_248_11327+4)&4294967295)]; //@line 2268 "bufferedio.c"
        HEAP[$3]=$4; //@line 2268 "bufferedio.c"
        var $5=(($kwlist+8)&4294967295); //@line 2268 "bufferedio.c"
        var $6=HEAP[((_C_248_11327+8)&4294967295)]; //@line 2268 "bufferedio.c"
        HEAP[$5]=$6; //@line 2268 "bufferedio.c"
        var $7=(($kwlist+12)&4294967295); //@line 2268 "bufferedio.c"
        var $8=HEAP[((_C_248_11327+12)&4294967295)]; //@line 2268 "bufferedio.c"
        HEAP[$7]=$8; //@line 2268 "bufferedio.c"
        HEAP[$buffer_size]=8192; //@line 2269 "bufferedio.c"
        HEAP[$max_buffer_size]=-234; //@line 2270 "bufferedio.c"
        var $9=HEAP[$self_addr]; //@line 2273 "bufferedio.c"
        var $10=(($9+12)&4294967295); //@line 2273 "bufferedio.c"
        HEAP[$10]=0; //@line 2273 "bufferedio.c"
        var $11=HEAP[$self_addr]; //@line 2274 "bufferedio.c"
        var $12=(($11+16)&4294967295); //@line 2274 "bufferedio.c"
        HEAP[$12]=0; //@line 2274 "bufferedio.c"
        var $13=HEAP[$args_addr]; //@line 2276 "bufferedio.c"
        var $14=HEAP[$kwds_addr]; //@line 2276 "bufferedio.c"
        var $kwlist1=$kwlist; //@line 2276 "bufferedio.c"
        var $15=__PyArg_ParseTupleAndKeywords_SizeT($13, $14, ((__str56)&4294967295), $kwlist1, $raw, $buffer_size, $max_buffer_size); //@line 2276 "bufferedio.c"
        var $16=((($15))|0)==0; //@line 2276 "bufferedio.c"
        if ($16) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2276 "bufferedio.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 2278 "bufferedio.c"
        __label__ = 21; break; //@line 2278 "bufferedio.c"
      case 2: // $bb2
        var $17=HEAP[$max_buffer_size]; //@line 2281 "bufferedio.c"
        var $18=((($17))|0)!=-234; //@line 2281 "bufferedio.c"
        if ($18) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 2281 "bufferedio.c"
      case 3: // $bb3
        var $19=_complain_about_max_buffer_size(); //@line 2281 "bufferedio.c"
        var $20=((($19))|0)==0; //@line 2281 "bufferedio.c"
        if ($20) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 2281 "bufferedio.c"
      case 4: // $bb4
        HEAP[$0]=-1; //@line 2282 "bufferedio.c"
        __label__ = 21; break; //@line 2282 "bufferedio.c"
      case 5: // $bb5
        var $21=HEAP[$raw]; //@line 2284 "bufferedio.c"
        var $22=__PyIOBase_check_seekable($21, __Py_TrueStruct); //@line 2284 "bufferedio.c"
        var $23=($22)==0; //@line 2284 "bufferedio.c"
        if ($23) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 2284 "bufferedio.c"
      case 6: // $bb6
        HEAP[$0]=-1; //@line 2285 "bufferedio.c"
        __label__ = 21; break; //@line 2285 "bufferedio.c"
      case 7: // $bb7
        var $24=HEAP[$raw]; //@line 2286 "bufferedio.c"
        var $25=__PyIOBase_check_readable($24, __Py_TrueStruct); //@line 2286 "bufferedio.c"
        var $26=($25)==0; //@line 2286 "bufferedio.c"
        if ($26) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 2286 "bufferedio.c"
      case 8: // $bb8
        HEAP[$0]=-1; //@line 2287 "bufferedio.c"
        __label__ = 21; break; //@line 2287 "bufferedio.c"
      case 9: // $bb9
        var $27=HEAP[$raw]; //@line 2288 "bufferedio.c"
        var $28=__PyIOBase_check_writable($27, __Py_TrueStruct); //@line 2288 "bufferedio.c"
        var $29=($28)==0; //@line 2288 "bufferedio.c"
        if ($29) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 2288 "bufferedio.c"
      case 10: // $bb10
        HEAP[$0]=-1; //@line 2289 "bufferedio.c"
        __label__ = 21; break; //@line 2289 "bufferedio.c"
      case 11: // $bb11
        var $30=HEAP[$self_addr]; //@line 2291 "bufferedio.c"
        var $31=(($30+8)&4294967295); //@line 2291 "bufferedio.c"
        var $32=HEAP[$31]; //@line 2291 "bufferedio.c"
        var $33=($32)!=0; //@line 2291 "bufferedio.c"
        if ($33) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 2291 "bufferedio.c"
      case 12: // $bb12
        var $34=HEAP[$self_addr]; //@line 2291 "bufferedio.c"
        var $35=(($34+8)&4294967295); //@line 2291 "bufferedio.c"
        var $36=HEAP[$35]; //@line 2291 "bufferedio.c"
        HEAP[$_py_tmp]=$36; //@line 2291 "bufferedio.c"
        var $37=HEAP[$self_addr]; //@line 2291 "bufferedio.c"
        var $38=(($37+8)&4294967295); //@line 2291 "bufferedio.c"
        HEAP[$38]=0; //@line 2291 "bufferedio.c"
        var $39=HEAP[$_py_tmp]; //@line 2291 "bufferedio.c"
        var $40=(($39)&4294967295); //@line 2291 "bufferedio.c"
        var $41=HEAP[$40]; //@line 2291 "bufferedio.c"
        var $42=((($41) - 1)&4294967295); //@line 2291 "bufferedio.c"
        var $43=HEAP[$_py_tmp]; //@line 2291 "bufferedio.c"
        var $44=(($43)&4294967295); //@line 2291 "bufferedio.c"
        HEAP[$44]=$42; //@line 2291 "bufferedio.c"
        var $45=HEAP[$_py_tmp]; //@line 2291 "bufferedio.c"
        var $46=(($45)&4294967295); //@line 2291 "bufferedio.c"
        var $47=HEAP[$46]; //@line 2291 "bufferedio.c"
        var $48=((($47))|0)==0; //@line 2291 "bufferedio.c"
        if ($48) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 2291 "bufferedio.c"
      case 13: // $bb13
        var $49=HEAP[$_py_tmp]; //@line 2291 "bufferedio.c"
        var $50=(($49+4)&4294967295); //@line 2291 "bufferedio.c"
        var $51=HEAP[$50]; //@line 2291 "bufferedio.c"
        var $52=(($51+24)&4294967295); //@line 2291 "bufferedio.c"
        var $53=HEAP[$52]; //@line 2291 "bufferedio.c"
        var $54=HEAP[$_py_tmp]; //@line 2291 "bufferedio.c"
        FUNCTION_TABLE[$53]($54); //@line 2291 "bufferedio.c"
        __label__ = 14; break; //@line 2291 "bufferedio.c"
      case 14: // $bb14
        var $55=HEAP[$raw]; //@line 2292 "bufferedio.c"
        var $56=(($55)&4294967295); //@line 2292 "bufferedio.c"
        var $57=HEAP[$56]; //@line 2292 "bufferedio.c"
        var $58=((($57) + 1)&4294967295); //@line 2292 "bufferedio.c"
        var $59=(($55)&4294967295); //@line 2292 "bufferedio.c"
        HEAP[$59]=$58; //@line 2292 "bufferedio.c"
        var $60=HEAP[$raw]; //@line 2293 "bufferedio.c"
        var $61=HEAP[$self_addr]; //@line 2293 "bufferedio.c"
        var $62=(($61+8)&4294967295); //@line 2293 "bufferedio.c"
        HEAP[$62]=$60; //@line 2293 "bufferedio.c"
        var $63=HEAP[$buffer_size]; //@line 2294 "bufferedio.c"
        var $64=HEAP[$self_addr]; //@line 2294 "bufferedio.c"
        var $65=(($64+84)&4294967295); //@line 2294 "bufferedio.c"
        HEAP[$65]=$63; //@line 2294 "bufferedio.c"
        var $66=HEAP[$self_addr]; //@line 2295 "bufferedio.c"
        var $67=(($66+20)&4294967295); //@line 2295 "bufferedio.c"
        HEAP[$67]=1; //@line 2295 "bufferedio.c"
        var $68=HEAP[$self_addr]; //@line 2296 "bufferedio.c"
        var $69=(($68+24)&4294967295); //@line 2296 "bufferedio.c"
        HEAP[$69]=1; //@line 2296 "bufferedio.c"
        var $70=HEAP[$self_addr]; //@line 2298 "bufferedio.c"
        var $71=__buffered_init($70); //@line 2298 "bufferedio.c"
        var $72=((($71))|0) < 0; //@line 2298 "bufferedio.c"
        if ($72) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 2298 "bufferedio.c"
      case 15: // $bb15
        HEAP[$0]=-1; //@line 2299 "bufferedio.c"
        __label__ = 21; break; //@line 2299 "bufferedio.c"
      case 16: // $bb16
        var $73=HEAP[$self_addr]; //@line 2300 "bufferedio.c"
        __bufferedreader_reset_buf($73); //@line 2300 "bufferedio.c"
        var $74=HEAP[$self_addr]; //@line 2301 "bufferedio.c"
        __bufferedwriter_reset_buf($74); //@line 2301 "bufferedio.c"
        var $75=HEAP[$self_addr]; //@line 2302 "bufferedio.c"
        var $76=(($75+44)&4294967295); //@line 2302 "bufferedio.c"
        HEAP[$76]=0; //@line 2302 "bufferedio.c"
        var $77=HEAP[$self_addr]; //@line 2304 "bufferedio.c"
        var $78=$77; //@line 2304 "bufferedio.c"
        var $79=(($78+4)&4294967295); //@line 2304 "bufferedio.c"
        var $80=HEAP[$79]; //@line 2304 "bufferedio.c"
        var $81=($80)!=(_PyBufferedRandom_Type); //@line 2304 "bufferedio.c"
        if ($81) { __label__ = 19; break; } else { __label__ = 17; break; } //@line 2304 "bufferedio.c"
      case 17: // $bb17
        var $82=HEAP[$raw]; //@line 2304 "bufferedio.c"
        var $83=(($82+4)&4294967295); //@line 2304 "bufferedio.c"
        var $84=HEAP[$83]; //@line 2304 "bufferedio.c"
        var $85=($84)!=(_PyFileIO_Type); //@line 2304 "bufferedio.c"
        if ($85) { __label__ = 19; break; } else { __label__ = 18; break; } //@line 2304 "bufferedio.c"
      case 18: // $bb18
        HEAP[$iftmp_259]=1; //@line 2304 "bufferedio.c"
        __label__ = 20; break; //@line 2304 "bufferedio.c"
      case 19: // $bb19
        HEAP[$iftmp_259]=0; //@line 2304 "bufferedio.c"
        __label__ = 20; break; //@line 2304 "bufferedio.c"
      case 20: // $bb20
        var $86=HEAP[$self_addr]; //@line 2304 "bufferedio.c"
        var $87=(($86+28)&4294967295); //@line 2304 "bufferedio.c"
        var $88=HEAP[$iftmp_259]; //@line 2304 "bufferedio.c"
        HEAP[$87]=$88; //@line 2304 "bufferedio.c"
        var $89=HEAP[$self_addr]; //@line 2307 "bufferedio.c"
        var $90=(($89+12)&4294967295); //@line 2307 "bufferedio.c"
        HEAP[$90]=1; //@line 2307 "bufferedio.c"
        HEAP[$0]=0; //@line 2308 "bufferedio.c"
        __label__ = 21; break; //@line 2308 "bufferedio.c"
      case 21: // $bb21
        var $91=HEAP[$0]; //@line 2278 "bufferedio.c"
        HEAP[$retval]=$91; //@line 2278 "bufferedio.c"
        __label__ = 22; break; //@line 2278 "bufferedio.c"
      case 22: // $return
        var $retval22=HEAP[$retval]; //@line 2278 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval22; //@line 2278 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _get_line($self, $output) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $output_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $n=__stackBase__+16;
        var $str_end=__stackBase__+20;
        var $len=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$output_addr]=$output;
        var $1=HEAP[$self_addr]; //@line 32 "bytesio.c"
        var $2=(($1+8)&4294967295); //@line 32 "bytesio.c"
        var $3=HEAP[$2]; //@line 32 "bytesio.c"
        var $4=($3)==0; //@line 32 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 32 "bytesio.c"
      case 1: // $bb
        ___assert_fail(((__str66)&4294967295), ((__str167)&4294967295), 32, ((___PRETTY_FUNCTION___8438)&4294967295)); //@line 32 "bytesio.c"
        throw "Reached an unreachable! Original .ll line: 10343"; //@line 32 "bytesio.c"
      case 2: // $bb1
        var $5=HEAP[$self_addr]; //@line 35 "bytesio.c"
        var $6=(($5+8)&4294967295); //@line 35 "bytesio.c"
        var $7=HEAP[$6]; //@line 35 "bytesio.c"
        var $8=HEAP[$self_addr]; //@line 35 "bytesio.c"
        var $9=(($8+16)&4294967295); //@line 35 "bytesio.c"
        var $10=HEAP[$9]; //@line 35 "bytesio.c"
        var $11=(($7+$10)&4294967295); //@line 35 "bytesio.c"
        HEAP[$str_end]=$11; //@line 35 "bytesio.c"
        var $12=HEAP[$self_addr]; //@line 36 "bytesio.c"
        var $13=(($12+8)&4294967295); //@line 36 "bytesio.c"
        var $14=HEAP[$13]; //@line 36 "bytesio.c"
        var $15=HEAP[$self_addr]; //@line 36 "bytesio.c"
        var $16=(($15+12)&4294967295); //@line 36 "bytesio.c"
        var $17=HEAP[$16]; //@line 36 "bytesio.c"
        var $18=(($14+$17)&4294967295); //@line 36 "bytesio.c"
        HEAP[$n]=$18; //@line 36 "bytesio.c"
        __label__ = 4; break; //@line 36 "bytesio.c"
      case 3: // $bb2
        var $19=HEAP[$n]; //@line 38 "bytesio.c"
        var $20=(($19+1)&4294967295); //@line 38 "bytesio.c"
        HEAP[$n]=$20; //@line 38 "bytesio.c"
        __label__ = 4; break; //@line 38 "bytesio.c"
      case 4: // $bb3
        var $21=HEAP[$n]; //@line 37 "bytesio.c"
        var $22=HEAP[$str_end]; //@line 37 "bytesio.c"
        var $23=($21) >= ($22); //@line 37 "bytesio.c"
        if ($23) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 37 "bytesio.c"
      case 5: // $bb4
        var $24=HEAP[$n]; //@line 37 "bytesio.c"
        var $25=HEAP[$24]; //@line 37 "bytesio.c"
        var $26=reSign(($25), 8, 0)!=10; //@line 37 "bytesio.c"
        if ($26) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 37 "bytesio.c"
      case 6: // $bb5
        var $27=HEAP[$n]; //@line 41 "bytesio.c"
        var $28=HEAP[$str_end]; //@line 41 "bytesio.c"
        var $29=($27) < ($28); //@line 41 "bytesio.c"
        if ($29) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 41 "bytesio.c"
      case 7: // $bb6
        var $30=HEAP[$n]; //@line 42 "bytesio.c"
        var $31=(($30+1)&4294967295); //@line 42 "bytesio.c"
        HEAP[$n]=$31; //@line 42 "bytesio.c"
        __label__ = 8; break; //@line 42 "bytesio.c"
      case 8: // $bb7
        var $32=HEAP[$n]; //@line 45 "bytesio.c"
        var $33=($32); //@line 45 "bytesio.c"
        var $34=HEAP[$self_addr]; //@line 45 "bytesio.c"
        var $35=(($34+8)&4294967295); //@line 45 "bytesio.c"
        var $36=HEAP[$35]; //@line 45 "bytesio.c"
        var $37=HEAP[$self_addr]; //@line 45 "bytesio.c"
        var $38=(($37+12)&4294967295); //@line 45 "bytesio.c"
        var $39=HEAP[$38]; //@line 45 "bytesio.c"
        var $40=(($36+$39)&4294967295); //@line 45 "bytesio.c"
        var $41=($40); //@line 45 "bytesio.c"
        var $42=((($33) - ($41))&4294967295); //@line 45 "bytesio.c"
        HEAP[$len]=$42; //@line 45 "bytesio.c"
        var $43=HEAP[$self_addr]; //@line 46 "bytesio.c"
        var $44=(($43+8)&4294967295); //@line 46 "bytesio.c"
        var $45=HEAP[$44]; //@line 46 "bytesio.c"
        var $46=HEAP[$self_addr]; //@line 46 "bytesio.c"
        var $47=(($46+12)&4294967295); //@line 46 "bytesio.c"
        var $48=HEAP[$47]; //@line 46 "bytesio.c"
        var $49=(($45+$48)&4294967295); //@line 46 "bytesio.c"
        var $50=HEAP[$output_addr]; //@line 46 "bytesio.c"
        HEAP[$50]=$49; //@line 46 "bytesio.c"
        var $51=HEAP[$len]; //@line 48 "bytesio.c"
        var $52=((($51))|0) < 0; //@line 48 "bytesio.c"
        if ($52) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 48 "bytesio.c"
      case 9: // $bb8
        ___assert_fail(((__str268)&4294967295), ((__str167)&4294967295), 48, ((___PRETTY_FUNCTION___8438)&4294967295)); //@line 48 "bytesio.c"
        throw "Reached an unreachable! Original .ll line: 10422"; //@line 48 "bytesio.c"
      case 10: // $bb9
        var $53=HEAP[$self_addr]; //@line 49 "bytesio.c"
        var $54=(($53+12)&4294967295); //@line 49 "bytesio.c"
        var $55=HEAP[$54]; //@line 49 "bytesio.c"
        var $56=HEAP[$len]; //@line 49 "bytesio.c"
        var $57=((2147483647 - ($56))&4294967295); //@line 49 "bytesio.c"
        var $58=((($55))|0) >= ((($57))|0); //@line 49 "bytesio.c"
        if ($58) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 49 "bytesio.c"
      case 11: // $bb10
        ___assert_fail(((__str369)&4294967295), ((__str167)&4294967295), 49, ((___PRETTY_FUNCTION___8438)&4294967295)); //@line 49 "bytesio.c"
        throw "Reached an unreachable! Original .ll line: 10435"; //@line 49 "bytesio.c"
      case 12: // $bb11
        var $59=HEAP[$self_addr]; //@line 50 "bytesio.c"
        var $60=(($59+12)&4294967295); //@line 50 "bytesio.c"
        var $61=HEAP[$60]; //@line 50 "bytesio.c"
        var $62=HEAP[$len]; //@line 50 "bytesio.c"
        var $63=((($61) + ($62))&4294967295); //@line 50 "bytesio.c"
        var $64=HEAP[$self_addr]; //@line 50 "bytesio.c"
        var $65=(($64+12)&4294967295); //@line 50 "bytesio.c"
        HEAP[$65]=$63; //@line 50 "bytesio.c"
        var $66=HEAP[$len]; //@line 52 "bytesio.c"
        HEAP[$0]=$66; //@line 52 "bytesio.c"
        var $67=HEAP[$0]; //@line 52 "bytesio.c"
        HEAP[$retval]=$67; //@line 52 "bytesio.c"
        __label__ = 13; break; //@line 52 "bytesio.c"
      case 13: // $return
        var $retval12=HEAP[$retval]; //@line 52 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval12; //@line 52 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _resize_buffer($self, $size) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $size_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $iftmp_2=__stackBase__+12;
        var $0=__stackBase__+16;
        var $alloc=__stackBase__+20;
        var $new_buf=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$size_addr]=$size;
        var $1=HEAP[$self_addr]; //@line 63 "bytesio.c"
        var $2=(($1+20)&4294967295); //@line 63 "bytesio.c"
        var $3=HEAP[$2]; //@line 63 "bytesio.c"
        HEAP[$alloc]=$3; //@line 63 "bytesio.c"
        HEAP[$new_buf]=0; //@line 64 "bytesio.c"
        var $4=HEAP[$self_addr]; //@line 66 "bytesio.c"
        var $5=(($4+8)&4294967295); //@line 66 "bytesio.c"
        var $6=HEAP[$5]; //@line 66 "bytesio.c"
        var $7=($6)==0; //@line 66 "bytesio.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 66 "bytesio.c"
      case 1: // $bb
        ___assert_fail(((__str66)&4294967295), ((__str167)&4294967295), 66, ((___PRETTY_FUNCTION___8477)&4294967295)); //@line 66 "bytesio.c"
        throw "Reached an unreachable! Original .ll line: 10487"; //@line 66 "bytesio.c"
      case 2: // $bb1
        var $8=HEAP[$size_addr]; //@line 70 "bytesio.c"
        var $9=((($8))|0) < 0; //@line 70 "bytesio.c"
        if ($9) { __label__ = 16; break; } else { __label__ = 3; break; } //@line 70 "bytesio.c"
      case 3: // $bb2
        var $10=HEAP[$alloc]; //@line 73 "bytesio.c"
        var $11=Math.floor(((($10))>>>0)/2); //@line 73 "bytesio.c"
        var $12=HEAP[$size_addr]; //@line 73 "bytesio.c"
        var $13=((($11))>>>0) > ((($12))>>>0); //@line 73 "bytesio.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 73 "bytesio.c"
      case 4: // $bb3
        var $14=HEAP[$size_addr]; //@line 75 "bytesio.c"
        var $15=((($14) + 1)&4294967295); //@line 75 "bytesio.c"
        HEAP[$alloc]=$15; //@line 75 "bytesio.c"
        __label__ = 13; break; //@line 75 "bytesio.c"
      case 5: // $bb4
        var $16=HEAP[$size_addr]; //@line 77 "bytesio.c"
        var $17=HEAP[$alloc]; //@line 77 "bytesio.c"
        var $18=((($16))>>>0) < ((($17))>>>0); //@line 77 "bytesio.c"
        if ($18) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 77 "bytesio.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 79 "bytesio.c"
        __label__ = 17; break; //@line 79 "bytesio.c"
      case 7: // $bb6
        var $19=HEAP[$size_addr]; //@line 81 "bytesio.c"
        var $20=((($19))>>>0); //@line 81 "bytesio.c"
        var $21=HEAP[$alloc]; //@line 81 "bytesio.c"
        var $22=((($21))>>>0); //@line 81 "bytesio.c"
        var $23=($22) * 1.125; //@line 81 "bytesio.c"
        var $24=($20) <= ($23); //@line 81 "bytesio.c"
        if ($24) { __label__ = 8; break; } else { __label__ = 12; break; } //@line 81 "bytesio.c"
      case 8: // $bb7
        var $25=HEAP[$size_addr]; //@line 83 "bytesio.c"
        var $26=((($25))>>>0) >>> 3; //@line 83 "bytesio.c"
        var $27=HEAP[$size_addr]; //@line 83 "bytesio.c"
        var $28=((($26) + ($27))&4294967295); //@line 83 "bytesio.c"
        var $29=HEAP[$size_addr]; //@line 83 "bytesio.c"
        var $30=((($29))>>>0) <= 8; //@line 83 "bytesio.c"
        if ($30) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 83 "bytesio.c"
      case 9: // $bb8
        HEAP[$iftmp_2]=3; //@line 83 "bytesio.c"
        __label__ = 11; break; //@line 83 "bytesio.c"
      case 10: // $bb9
        HEAP[$iftmp_2]=6; //@line 83 "bytesio.c"
        __label__ = 11; break; //@line 83 "bytesio.c"
      case 11: // $bb10
        var $31=HEAP[$iftmp_2]; //@line 83 "bytesio.c"
        var $32=((($28) + ($31))&4294967295); //@line 83 "bytesio.c"
        HEAP[$alloc]=$32; //@line 83 "bytesio.c"
        __label__ = 13; break; //@line 83 "bytesio.c"
      case 12: // $bb11
        var $33=HEAP[$size_addr]; //@line 87 "bytesio.c"
        var $34=((($33) + 1)&4294967295); //@line 87 "bytesio.c"
        HEAP[$alloc]=$34; //@line 87 "bytesio.c"
        __label__ = 13; break; //@line 87 "bytesio.c"
      case 13: // $bb12
        var $35=HEAP[$self_addr]; //@line 92 "bytesio.c"
        var $36=(($35+8)&4294967295); //@line 92 "bytesio.c"
        var $37=HEAP[$36]; //@line 92 "bytesio.c"
        var $38=HEAP[$alloc]; //@line 92 "bytesio.c"
        var $39=_PyMem_Realloc($37, $38); //@line 92 "bytesio.c"
        HEAP[$new_buf]=$39; //@line 92 "bytesio.c"
        var $40=HEAP[$new_buf]; //@line 93 "bytesio.c"
        var $41=($40)==0; //@line 93 "bytesio.c"
        if ($41) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 93 "bytesio.c"
      case 14: // $bb13
        var $42=_PyErr_NoMemory(); //@line 94 "bytesio.c"
        HEAP[$0]=-1; //@line 95 "bytesio.c"
        __label__ = 17; break; //@line 95 "bytesio.c"
      case 15: // $bb14
        var $43=HEAP[$self_addr]; //@line 97 "bytesio.c"
        var $44=(($43+20)&4294967295); //@line 97 "bytesio.c"
        var $45=HEAP[$alloc]; //@line 97 "bytesio.c"
        HEAP[$44]=$45; //@line 97 "bytesio.c"
        var $46=HEAP[$self_addr]; //@line 98 "bytesio.c"
        var $47=(($46+8)&4294967295); //@line 98 "bytesio.c"
        var $48=HEAP[$new_buf]; //@line 98 "bytesio.c"
        HEAP[$47]=$48; //@line 98 "bytesio.c"
        HEAP[$0]=0; //@line 100 "bytesio.c"
        __label__ = 17; break; //@line 100 "bytesio.c"
      case 16: // $overflow
        var $49=HEAP[_PyExc_OverflowError]; //@line 103 "bytesio.c"
        _PyErr_SetString($49, ((__str470)&4294967295)); //@line 103 "bytesio.c"
        HEAP[$0]=-1; //@line 105 "bytesio.c"
        __label__ = 17; break; //@line 105 "bytesio.c"
      case 17: // $bb15
        var $50=HEAP[$0]; //@line 79 "bytesio.c"
        HEAP[$retval]=$50; //@line 79 "bytesio.c"
        __label__ = 18; break; //@line 79 "bytesio.c"
      case 18: // $return
        var $retval16=HEAP[$retval]; //@line 79 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval16; //@line 79 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _write_bytes($self, $bytes, $len) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $bytes_addr=__stackBase__+4;
        var $len_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$bytes_addr]=$bytes;
        HEAP[$len_addr]=$len;
        var $1=HEAP[$self_addr]; //@line 113 "bytesio.c"
        var $2=(($1+8)&4294967295); //@line 113 "bytesio.c"
        var $3=HEAP[$2]; //@line 113 "bytesio.c"
        var $4=($3)==0; //@line 113 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 113 "bytesio.c"
      case 1: // $bb
        ___assert_fail(((__str66)&4294967295), ((__str167)&4294967295), 113, ((___PRETTY_FUNCTION___8514)&4294967295)); //@line 113 "bytesio.c"
        throw "Reached an unreachable! Original .ll line: 10625"; //@line 113 "bytesio.c"
      case 2: // $bb1
        var $5=HEAP[$self_addr]; //@line 114 "bytesio.c"
        var $6=(($5+12)&4294967295); //@line 114 "bytesio.c"
        var $7=HEAP[$6]; //@line 114 "bytesio.c"
        var $8=((($7))|0) < 0; //@line 114 "bytesio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 114 "bytesio.c"
      case 3: // $bb2
        ___assert_fail(((__str571)&4294967295), ((__str167)&4294967295), 114, ((___PRETTY_FUNCTION___8514)&4294967295)); //@line 114 "bytesio.c"
        throw "Reached an unreachable! Original .ll line: 10636"; //@line 114 "bytesio.c"
      case 4: // $bb3
        var $9=HEAP[$len_addr]; //@line 115 "bytesio.c"
        var $10=((($9))|0) < 0; //@line 115 "bytesio.c"
        if ($10) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 115 "bytesio.c"
      case 5: // $bb4
        ___assert_fail(((__str268)&4294967295), ((__str167)&4294967295), 115, ((___PRETTY_FUNCTION___8514)&4294967295)); //@line 115 "bytesio.c"
        throw "Reached an unreachable! Original .ll line: 10645"; //@line 115 "bytesio.c"
      case 6: // $bb5
        var $11=HEAP[$self_addr]; //@line 117 "bytesio.c"
        var $12=(($11+12)&4294967295); //@line 117 "bytesio.c"
        var $13=HEAP[$12]; //@line 117 "bytesio.c"
        var $14=HEAP[$len_addr]; //@line 117 "bytesio.c"
        var $15=((($13) + ($14))&4294967295); //@line 117 "bytesio.c"
        var $16=HEAP[$self_addr]; //@line 117 "bytesio.c"
        var $17=(($16+20)&4294967295); //@line 117 "bytesio.c"
        var $18=HEAP[$17]; //@line 117 "bytesio.c"
        var $19=((($15))>>>0) > ((($18))>>>0); //@line 117 "bytesio.c"
        if ($19) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 117 "bytesio.c"
      case 7: // $bb6
        var $20=HEAP[$self_addr]; //@line 118 "bytesio.c"
        var $21=(($20+12)&4294967295); //@line 118 "bytesio.c"
        var $22=HEAP[$21]; //@line 118 "bytesio.c"
        var $23=HEAP[$len_addr]; //@line 118 "bytesio.c"
        var $24=((($22) + ($23))&4294967295); //@line 118 "bytesio.c"
        var $25=HEAP[$self_addr]; //@line 118 "bytesio.c"
        var $26=_resize_buffer($25, $24); //@line 118 "bytesio.c"
        var $27=((($26))|0) < 0; //@line 118 "bytesio.c"
        if ($27) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 118 "bytesio.c"
      case 8: // $bb7
        HEAP[$0]=-1; //@line 119 "bytesio.c"
        __label__ = 14; break; //@line 119 "bytesio.c"
      case 9: // $bb8
        var $28=HEAP[$self_addr]; //@line 122 "bytesio.c"
        var $29=(($28+12)&4294967295); //@line 122 "bytesio.c"
        var $30=HEAP[$29]; //@line 122 "bytesio.c"
        var $31=HEAP[$self_addr]; //@line 122 "bytesio.c"
        var $32=(($31+16)&4294967295); //@line 122 "bytesio.c"
        var $33=HEAP[$32]; //@line 122 "bytesio.c"
        var $34=((($30))|0) > ((($33))|0); //@line 122 "bytesio.c"
        if ($34) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 122 "bytesio.c"
      case 10: // $bb9
        var $35=HEAP[$self_addr]; //@line 131 "bytesio.c"
        var $36=(($35+12)&4294967295); //@line 131 "bytesio.c"
        var $37=HEAP[$36]; //@line 131 "bytesio.c"
        var $38=HEAP[$self_addr]; //@line 131 "bytesio.c"
        var $39=(($38+16)&4294967295); //@line 131 "bytesio.c"
        var $40=HEAP[$39]; //@line 131 "bytesio.c"
        var $41=((($37) - ($40))&4294967295); //@line 131 "bytesio.c"
        var $42=HEAP[$self_addr]; //@line 131 "bytesio.c"
        var $43=(($42+8)&4294967295); //@line 131 "bytesio.c"
        var $44=HEAP[$43]; //@line 131 "bytesio.c"
        var $45=HEAP[$self_addr]; //@line 131 "bytesio.c"
        var $46=(($45+16)&4294967295); //@line 131 "bytesio.c"
        var $47=HEAP[$46]; //@line 131 "bytesio.c"
        var $48=(($44+$47)&4294967295); //@line 131 "bytesio.c"
        _llvm_memset_p0i8_i32($48, 0, $41, 1, 0); //@line 131 "bytesio.c"
        __label__ = 11; break; //@line 131 "bytesio.c"
      case 11: // $bb10
        var $49=HEAP[$len_addr]; //@line 137 "bytesio.c"
        var $50=HEAP[$self_addr]; //@line 137 "bytesio.c"
        var $51=(($50+8)&4294967295); //@line 137 "bytesio.c"
        var $52=HEAP[$51]; //@line 137 "bytesio.c"
        var $53=HEAP[$self_addr]; //@line 137 "bytesio.c"
        var $54=(($53+12)&4294967295); //@line 137 "bytesio.c"
        var $55=HEAP[$54]; //@line 137 "bytesio.c"
        var $56=(($52+$55)&4294967295); //@line 137 "bytesio.c"
        var $57=HEAP[$bytes_addr]; //@line 137 "bytesio.c"
        _llvm_memcpy_p0i8_p0i8_i32($56, $57, $49, 1, 0); //@line 137 "bytesio.c"
        var $58=HEAP[$self_addr]; //@line 138 "bytesio.c"
        var $59=(($58+12)&4294967295); //@line 138 "bytesio.c"
        var $60=HEAP[$59]; //@line 138 "bytesio.c"
        var $61=HEAP[$len_addr]; //@line 138 "bytesio.c"
        var $62=((($60) + ($61))&4294967295); //@line 138 "bytesio.c"
        var $63=HEAP[$self_addr]; //@line 138 "bytesio.c"
        var $64=(($63+12)&4294967295); //@line 138 "bytesio.c"
        HEAP[$64]=$62; //@line 138 "bytesio.c"
        var $65=HEAP[$self_addr]; //@line 141 "bytesio.c"
        var $66=(($65+16)&4294967295); //@line 141 "bytesio.c"
        var $67=HEAP[$66]; //@line 141 "bytesio.c"
        var $68=HEAP[$self_addr]; //@line 141 "bytesio.c"
        var $69=(($68+12)&4294967295); //@line 141 "bytesio.c"
        var $70=HEAP[$69]; //@line 141 "bytesio.c"
        var $71=((($67))|0) < ((($70))|0); //@line 141 "bytesio.c"
        if ($71) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 141 "bytesio.c"
      case 12: // $bb11
        var $72=HEAP[$self_addr]; //@line 142 "bytesio.c"
        var $73=(($72+12)&4294967295); //@line 142 "bytesio.c"
        var $74=HEAP[$73]; //@line 142 "bytesio.c"
        var $75=HEAP[$self_addr]; //@line 142 "bytesio.c"
        var $76=(($75+16)&4294967295); //@line 142 "bytesio.c"
        HEAP[$76]=$74; //@line 142 "bytesio.c"
        __label__ = 13; break; //@line 142 "bytesio.c"
      case 13: // $bb12
        var $77=HEAP[$len_addr]; //@line 145 "bytesio.c"
        HEAP[$0]=$77; //@line 145 "bytesio.c"
        __label__ = 14; break; //@line 145 "bytesio.c"
      case 14: // $bb13
        var $78=HEAP[$0]; //@line 119 "bytesio.c"
        HEAP[$retval]=$78; //@line 119 "bytesio.c"
        __label__ = 15; break; //@line 119 "bytesio.c"
      case 15: // $return
        var $retval14=HEAP[$retval]; //@line 119 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval14; //@line 119 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_get_closed($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 151 "bytesio.c"
        var $2=(($1+8)&4294967295); //@line 151 "bytesio.c"
        var $3=HEAP[$2]; //@line 151 "bytesio.c"
        var $4=($3)==0; //@line 151 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 151 "bytesio.c"
      case 1: // $bb
        var $5=((__Py_TrueStruct)&4294967295); //@line 152 "bytesio.c"
        var $6=HEAP[$5]; //@line 152 "bytesio.c"
        var $7=((($6) + 1)&4294967295); //@line 152 "bytesio.c"
        var $8=((__Py_TrueStruct)&4294967295); //@line 152 "bytesio.c"
        HEAP[$8]=$7; //@line 152 "bytesio.c"
        HEAP[$0]=__Py_TrueStruct; //@line 152 "bytesio.c"
        __label__ = 3; break; //@line 152 "bytesio.c"
      case 2: // $bb1
        var $9=((__Py_ZeroStruct)&4294967295); //@line 155 "bytesio.c"
        var $10=HEAP[$9]; //@line 155 "bytesio.c"
        var $11=((($10) + 1)&4294967295); //@line 155 "bytesio.c"
        var $12=((__Py_ZeroStruct)&4294967295); //@line 155 "bytesio.c"
        HEAP[$12]=$11; //@line 155 "bytesio.c"
        HEAP[$0]=__Py_ZeroStruct; //@line 155 "bytesio.c"
        __label__ = 3; break; //@line 155 "bytesio.c"
      case 3: // $bb2
        var $13=HEAP[$0]; //@line 152 "bytesio.c"
        HEAP[$retval]=$13; //@line 152 "bytesio.c"
        __label__ = 4; break; //@line 152 "bytesio.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 152 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 152 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _return_true($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=((__Py_TrueStruct)&4294967295); //@line 163 "bytesio.c"
        var $2=HEAP[$1]; //@line 163 "bytesio.c"
        var $3=((($2) + 1)&4294967295); //@line 163 "bytesio.c"
        var $4=((__Py_TrueStruct)&4294967295); //@line 163 "bytesio.c"
        HEAP[$4]=$3; //@line 163 "bytesio.c"
        HEAP[$0]=__Py_TrueStruct; //@line 163 "bytesio.c"
        var $5=HEAP[$0]; //@line 163 "bytesio.c"
        HEAP[$retval]=$5; //@line 163 "bytesio.c"
        __label__ = 1; break; //@line 163 "bytesio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 163 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 163 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_flush($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 172 "bytesio.c"
        var $2=(($1+8)&4294967295); //@line 172 "bytesio.c"
        var $3=HEAP[$2]; //@line 172 "bytesio.c"
        var $4=($3)==0; //@line 172 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 172 "bytesio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 172 "bytesio.c"
        _PyErr_SetString($5, ((__str672)&4294967295)); //@line 172 "bytesio.c"
        HEAP[$0]=0; //@line 172 "bytesio.c"
        __label__ = 3; break; //@line 172 "bytesio.c"
      case 2: // $bb1
        var $6=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 173 "bytesio.c"
        var $7=((($6) + 1)&4294967295); //@line 173 "bytesio.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$7; //@line 173 "bytesio.c"
        HEAP[$0]=__Py_NoneStruct; //@line 173 "bytesio.c"
        __label__ = 3; break; //@line 173 "bytesio.c"
      case 3: // $bb2
        var $8=HEAP[$0]; //@line 172 "bytesio.c"
        HEAP[$retval]=$8; //@line 172 "bytesio.c"
        __label__ = 4; break; //@line 172 "bytesio.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 172 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 172 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_getvalue($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 184 "bytesio.c"
        var $2=(($1+8)&4294967295); //@line 184 "bytesio.c"
        var $3=HEAP[$2]; //@line 184 "bytesio.c"
        var $4=($3)==0; //@line 184 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 184 "bytesio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 184 "bytesio.c"
        _PyErr_SetString($5, ((__str672)&4294967295)); //@line 184 "bytesio.c"
        HEAP[$0]=0; //@line 184 "bytesio.c"
        __label__ = 3; break; //@line 184 "bytesio.c"
      case 2: // $bb1
        var $6=HEAP[$self_addr]; //@line 185 "bytesio.c"
        var $7=(($6+16)&4294967295); //@line 185 "bytesio.c"
        var $8=HEAP[$7]; //@line 185 "bytesio.c"
        var $9=HEAP[$self_addr]; //@line 185 "bytesio.c"
        var $10=(($9+8)&4294967295); //@line 185 "bytesio.c"
        var $11=HEAP[$10]; //@line 185 "bytesio.c"
        var $12=_PyString_FromStringAndSize($11, $8); //@line 185 "bytesio.c"
        HEAP[$0]=$12; //@line 185 "bytesio.c"
        __label__ = 3; break; //@line 185 "bytesio.c"
      case 3: // $bb2
        var $13=HEAP[$0]; //@line 184 "bytesio.c"
        HEAP[$retval]=$13; //@line 184 "bytesio.c"
        __label__ = 4; break; //@line 184 "bytesio.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 184 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 184 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_isatty($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 197 "bytesio.c"
        var $2=(($1+8)&4294967295); //@line 197 "bytesio.c"
        var $3=HEAP[$2]; //@line 197 "bytesio.c"
        var $4=($3)==0; //@line 197 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 197 "bytesio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 197 "bytesio.c"
        _PyErr_SetString($5, ((__str672)&4294967295)); //@line 197 "bytesio.c"
        HEAP[$0]=0; //@line 197 "bytesio.c"
        __label__ = 3; break; //@line 197 "bytesio.c"
      case 2: // $bb1
        var $6=((__Py_ZeroStruct)&4294967295); //@line 198 "bytesio.c"
        var $7=HEAP[$6]; //@line 198 "bytesio.c"
        var $8=((($7) + 1)&4294967295); //@line 198 "bytesio.c"
        var $9=((__Py_ZeroStruct)&4294967295); //@line 198 "bytesio.c"
        HEAP[$9]=$8; //@line 198 "bytesio.c"
        HEAP[$0]=__Py_ZeroStruct; //@line 198 "bytesio.c"
        __label__ = 3; break; //@line 198 "bytesio.c"
      case 3: // $bb2
        var $10=HEAP[$0]; //@line 197 "bytesio.c"
        HEAP[$retval]=$10; //@line 197 "bytesio.c"
        __label__ = 4; break; //@line 197 "bytesio.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 197 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 197 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_tell($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 207 "bytesio.c"
        var $2=(($1+8)&4294967295); //@line 207 "bytesio.c"
        var $3=HEAP[$2]; //@line 207 "bytesio.c"
        var $4=($3)==0; //@line 207 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 207 "bytesio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 207 "bytesio.c"
        _PyErr_SetString($5, ((__str672)&4294967295)); //@line 207 "bytesio.c"
        HEAP[$0]=0; //@line 207 "bytesio.c"
        __label__ = 3; break; //@line 207 "bytesio.c"
      case 2: // $bb1
        var $6=HEAP[$self_addr]; //@line 208 "bytesio.c"
        var $7=(($6+12)&4294967295); //@line 208 "bytesio.c"
        var $8=HEAP[$7]; //@line 208 "bytesio.c"
        var $9=_PyLong_FromSsize_t($8); //@line 208 "bytesio.c"
        HEAP[$0]=$9; //@line 208 "bytesio.c"
        __label__ = 3; break; //@line 208 "bytesio.c"
      case 3: // $bb2
        var $10=HEAP[$0]; //@line 207 "bytesio.c"
        HEAP[$retval]=$10; //@line 207 "bytesio.c"
        __label__ = 4; break; //@line 207 "bytesio.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 207 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 207 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_read($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $size=__stackBase__+16;
        var $n=__stackBase__+20;
        var $output=__stackBase__+24;
        var $arg=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$arg]=__Py_NoneStruct; //@line 222 "bytesio.c"
        var $1=HEAP[$self_addr]; //@line 224 "bytesio.c"
        var $2=(($1+8)&4294967295); //@line 224 "bytesio.c"
        var $3=HEAP[$2]; //@line 224 "bytesio.c"
        var $4=($3)==0; //@line 224 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 224 "bytesio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 224 "bytesio.c"
        _PyErr_SetString($5, ((__str672)&4294967295)); //@line 224 "bytesio.c"
        HEAP[$0]=0; //@line 224 "bytesio.c"
        __label__ = 19; break; //@line 224 "bytesio.c"
      case 2: // $bb1
        var $6=HEAP[$args_addr]; //@line 226 "bytesio.c"
        var $7=_PyArg_ParseTuple($6, ((__str773)&4294967295), $arg); //@line 226 "bytesio.c"
        var $8=((($7))|0)==0; //@line 226 "bytesio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 226 "bytesio.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 227 "bytesio.c"
        __label__ = 19; break; //@line 227 "bytesio.c"
      case 4: // $bb3
        var $9=HEAP[$arg]; //@line 229 "bytesio.c"
        var $10=_PyNumber_Check($9); //@line 229 "bytesio.c"
        var $11=((($10))|0)!=0; //@line 229 "bytesio.c"
        if ($11) { __label__ = 5; break; } else { __label__ = 9; break; } //@line 229 "bytesio.c"
      case 5: // $bb4
        var $12=HEAP[_PyExc_OverflowError]; //@line 230 "bytesio.c"
        var $13=HEAP[$arg]; //@line 230 "bytesio.c"
        var $14=_PyNumber_AsSsize_t($13, $12); //@line 230 "bytesio.c"
        HEAP[$size]=$14; //@line 230 "bytesio.c"
        var $15=HEAP[$size]; //@line 231 "bytesio.c"
        var $16=((($15))|0)==-1; //@line 231 "bytesio.c"
        if ($16) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 231 "bytesio.c"
      case 6: // $bb5
        var $17=_PyErr_Occurred(); //@line 231 "bytesio.c"
        var $18=($17)!=0; //@line 231 "bytesio.c"
        if ($18) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 231 "bytesio.c"
      case 7: // $bb6
        HEAP[$0]=0; //@line 232 "bytesio.c"
        __label__ = 19; break; //@line 232 "bytesio.c"
      case 8: // $bb7
        __label__ = 12; break; //@line 232 "bytesio.c"
      case 9: // $bb8
        var $19=HEAP[$arg]; //@line 234 "bytesio.c"
        var $20=($19)==(__Py_NoneStruct); //@line 234 "bytesio.c"
        if ($20) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 234 "bytesio.c"
      case 10: // $bb9
        HEAP[$size]=-1; //@line 236 "bytesio.c"
        __label__ = 12; break; //@line 236 "bytesio.c"
      case 11: // $bb10
        var $21=HEAP[$arg]; //@line 239 "bytesio.c"
        var $22=(($21+4)&4294967295); //@line 239 "bytesio.c"
        var $23=HEAP[$22]; //@line 239 "bytesio.c"
        var $24=(($23+12)&4294967295); //@line 239 "bytesio.c"
        var $25=HEAP[$24]; //@line 239 "bytesio.c"
        var $26=HEAP[_PyExc_TypeError]; //@line 239 "bytesio.c"
        var $27=_PyErr_Format($26, ((__str874)&4294967295), $25); //@line 239 "bytesio.c"
        HEAP[$0]=0; //@line 241 "bytesio.c"
        __label__ = 19; break; //@line 241 "bytesio.c"
      case 12: // $bb11
        var $28=HEAP[$self_addr]; //@line 245 "bytesio.c"
        var $29=(($28+16)&4294967295); //@line 245 "bytesio.c"
        var $30=HEAP[$29]; //@line 245 "bytesio.c"
        var $31=HEAP[$self_addr]; //@line 245 "bytesio.c"
        var $32=(($31+12)&4294967295); //@line 245 "bytesio.c"
        var $33=HEAP[$32]; //@line 245 "bytesio.c"
        var $34=((($30) - ($33))&4294967295); //@line 245 "bytesio.c"
        HEAP[$n]=$34; //@line 245 "bytesio.c"
        var $35=HEAP[$size]; //@line 246 "bytesio.c"
        var $36=((($35))|0) < 0; //@line 246 "bytesio.c"
        if ($36) { __label__ = 14; break; } else { __label__ = 13; break; } //@line 246 "bytesio.c"
      case 13: // $bb12
        var $37=HEAP[$size]; //@line 246 "bytesio.c"
        var $38=HEAP[$n]; //@line 246 "bytesio.c"
        var $39=((($37))|0) > ((($38))|0); //@line 246 "bytesio.c"
        if ($39) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 246 "bytesio.c"
      case 14: // $bb13
        var $40=HEAP[$n]; //@line 247 "bytesio.c"
        HEAP[$size]=$40; //@line 247 "bytesio.c"
        var $41=HEAP[$size]; //@line 248 "bytesio.c"
        var $42=((($41))|0) < 0; //@line 248 "bytesio.c"
        if ($42) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 248 "bytesio.c"
      case 15: // $bb14
        HEAP[$size]=0; //@line 249 "bytesio.c"
        __label__ = 16; break; //@line 249 "bytesio.c"
      case 16: // $bb15
        var $43=HEAP[$self_addr]; //@line 252 "bytesio.c"
        var $44=(($43+8)&4294967295); //@line 252 "bytesio.c"
        var $45=HEAP[$44]; //@line 252 "bytesio.c"
        var $46=($45)==0; //@line 252 "bytesio.c"
        if ($46) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 252 "bytesio.c"
      case 17: // $bb16
        ___assert_fail(((__str66)&4294967295), ((__str167)&4294967295), 252, ((___PRETTY_FUNCTION___8642)&4294967295)); //@line 252 "bytesio.c"
        throw "Reached an unreachable! Original .ll line: 11112"; //@line 252 "bytesio.c"
      case 18: // $bb17
        var $47=HEAP[$self_addr]; //@line 253 "bytesio.c"
        var $48=(($47+8)&4294967295); //@line 253 "bytesio.c"
        var $49=HEAP[$48]; //@line 253 "bytesio.c"
        var $50=HEAP[$self_addr]; //@line 253 "bytesio.c"
        var $51=(($50+12)&4294967295); //@line 253 "bytesio.c"
        var $52=HEAP[$51]; //@line 253 "bytesio.c"
        var $53=(($49+$52)&4294967295); //@line 253 "bytesio.c"
        HEAP[$output]=$53; //@line 253 "bytesio.c"
        var $54=HEAP[$self_addr]; //@line 254 "bytesio.c"
        var $55=(($54+12)&4294967295); //@line 254 "bytesio.c"
        var $56=HEAP[$55]; //@line 254 "bytesio.c"
        var $57=HEAP[$size]; //@line 254 "bytesio.c"
        var $58=((($56) + ($57))&4294967295); //@line 254 "bytesio.c"
        var $59=HEAP[$self_addr]; //@line 254 "bytesio.c"
        var $60=(($59+12)&4294967295); //@line 254 "bytesio.c"
        HEAP[$60]=$58; //@line 254 "bytesio.c"
        var $61=HEAP[$output]; //@line 256 "bytesio.c"
        var $62=HEAP[$size]; //@line 256 "bytesio.c"
        var $63=_PyString_FromStringAndSize($61, $62); //@line 256 "bytesio.c"
        HEAP[$0]=$63; //@line 256 "bytesio.c"
        __label__ = 19; break; //@line 256 "bytesio.c"
      case 19: // $bb18
        var $64=HEAP[$0]; //@line 224 "bytesio.c"
        HEAP[$retval]=$64; //@line 224 "bytesio.c"
        __label__ = 20; break; //@line 224 "bytesio.c"
      case 20: // $return
        var $retval19=HEAP[$retval]; //@line 224 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval19; //@line 224 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_read1($self, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $n_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $arg=__stackBase__+16;
        var $res=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$n_addr]=$n;
        var $1=HEAP[$n_addr]; //@line 271 "bytesio.c"
        var $2=_PyTuple_Pack(1, $1); //@line 271 "bytesio.c"
        HEAP[$arg]=$2; //@line 271 "bytesio.c"
        var $3=HEAP[$arg]; //@line 272 "bytesio.c"
        var $4=($3)==0; //@line 272 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 272 "bytesio.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 273 "bytesio.c"
        __label__ = 5; break; //@line 273 "bytesio.c"
      case 2: // $bb1
        var $5=HEAP[$self_addr]; //@line 274 "bytesio.c"
        var $6=HEAP[$arg]; //@line 274 "bytesio.c"
        var $7=_bytesio_read($5, $6); //@line 274 "bytesio.c"
        HEAP[$res]=$7; //@line 274 "bytesio.c"
        var $8=HEAP[$arg]; //@line 275 "bytesio.c"
        var $9=(($8)&4294967295); //@line 275 "bytesio.c"
        var $10=HEAP[$9]; //@line 275 "bytesio.c"
        var $11=((($10) - 1)&4294967295); //@line 275 "bytesio.c"
        var $12=HEAP[$arg]; //@line 275 "bytesio.c"
        var $13=(($12)&4294967295); //@line 275 "bytesio.c"
        HEAP[$13]=$11; //@line 275 "bytesio.c"
        var $14=HEAP[$arg]; //@line 275 "bytesio.c"
        var $15=(($14)&4294967295); //@line 275 "bytesio.c"
        var $16=HEAP[$15]; //@line 275 "bytesio.c"
        var $17=((($16))|0)==0; //@line 275 "bytesio.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 275 "bytesio.c"
      case 3: // $bb2
        var $18=HEAP[$arg]; //@line 275 "bytesio.c"
        var $19=(($18+4)&4294967295); //@line 275 "bytesio.c"
        var $20=HEAP[$19]; //@line 275 "bytesio.c"
        var $21=(($20+24)&4294967295); //@line 275 "bytesio.c"
        var $22=HEAP[$21]; //@line 275 "bytesio.c"
        var $23=HEAP[$arg]; //@line 275 "bytesio.c"
        FUNCTION_TABLE[$22]($23); //@line 275 "bytesio.c"
        __label__ = 4; break; //@line 275 "bytesio.c"
      case 4: // $bb3
        var $24=HEAP[$res]; //@line 276 "bytesio.c"
        HEAP[$0]=$24; //@line 276 "bytesio.c"
        __label__ = 5; break; //@line 276 "bytesio.c"
      case 5: // $bb4
        var $25=HEAP[$0]; //@line 273 "bytesio.c"
        HEAP[$retval]=$25; //@line 273 "bytesio.c"
        __label__ = 6; break; //@line 273 "bytesio.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 273 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 273 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_readline($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $size=__stackBase__+16;
        var $n=__stackBase__+20;
        var $output=__stackBase__+24;
        var $arg=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$arg]=__Py_NoneStruct; //@line 291 "bytesio.c"
        var $1=HEAP[$self_addr]; //@line 293 "bytesio.c"
        var $2=(($1+8)&4294967295); //@line 293 "bytesio.c"
        var $3=HEAP[$2]; //@line 293 "bytesio.c"
        var $4=($3)==0; //@line 293 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 293 "bytesio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 293 "bytesio.c"
        _PyErr_SetString($5, ((__str672)&4294967295)); //@line 293 "bytesio.c"
        HEAP[$0]=0; //@line 293 "bytesio.c"
        __label__ = 16; break; //@line 293 "bytesio.c"
      case 2: // $bb1
        var $6=HEAP[$args_addr]; //@line 295 "bytesio.c"
        var $7=_PyArg_ParseTuple($6, ((__str975)&4294967295), $arg); //@line 295 "bytesio.c"
        var $8=((($7))|0)==0; //@line 295 "bytesio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 295 "bytesio.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 296 "bytesio.c"
        __label__ = 16; break; //@line 296 "bytesio.c"
      case 4: // $bb3
        var $9=HEAP[$arg]; //@line 298 "bytesio.c"
        var $10=_PyNumber_Check($9); //@line 298 "bytesio.c"
        var $11=((($10))|0)!=0; //@line 298 "bytesio.c"
        if ($11) { __label__ = 5; break; } else { __label__ = 9; break; } //@line 298 "bytesio.c"
      case 5: // $bb4
        var $12=HEAP[_PyExc_OverflowError]; //@line 299 "bytesio.c"
        var $13=HEAP[$arg]; //@line 299 "bytesio.c"
        var $14=_PyNumber_AsSsize_t($13, $12); //@line 299 "bytesio.c"
        HEAP[$size]=$14; //@line 299 "bytesio.c"
        var $15=HEAP[$size]; //@line 300 "bytesio.c"
        var $16=((($15))|0)==-1; //@line 300 "bytesio.c"
        if ($16) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 300 "bytesio.c"
      case 6: // $bb5
        var $17=_PyErr_Occurred(); //@line 300 "bytesio.c"
        var $18=($17)!=0; //@line 300 "bytesio.c"
        if ($18) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 300 "bytesio.c"
      case 7: // $bb6
        HEAP[$0]=0; //@line 301 "bytesio.c"
        __label__ = 16; break; //@line 301 "bytesio.c"
      case 8: // $bb7
        __label__ = 12; break; //@line 301 "bytesio.c"
      case 9: // $bb8
        var $19=HEAP[$arg]; //@line 303 "bytesio.c"
        var $20=($19)==(__Py_NoneStruct); //@line 303 "bytesio.c"
        if ($20) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 303 "bytesio.c"
      case 10: // $bb9
        HEAP[$size]=-1; //@line 305 "bytesio.c"
        __label__ = 12; break; //@line 305 "bytesio.c"
      case 11: // $bb10
        var $21=HEAP[$arg]; //@line 308 "bytesio.c"
        var $22=(($21+4)&4294967295); //@line 308 "bytesio.c"
        var $23=HEAP[$22]; //@line 308 "bytesio.c"
        var $24=(($23+12)&4294967295); //@line 308 "bytesio.c"
        var $25=HEAP[$24]; //@line 308 "bytesio.c"
        var $26=HEAP[_PyExc_TypeError]; //@line 308 "bytesio.c"
        var $27=_PyErr_Format($26, ((__str874)&4294967295), $25); //@line 308 "bytesio.c"
        HEAP[$0]=0; //@line 310 "bytesio.c"
        __label__ = 16; break; //@line 310 "bytesio.c"
      case 12: // $bb11
        var $28=HEAP[$self_addr]; //@line 313 "bytesio.c"
        var $29=_get_line($28, $output); //@line 313 "bytesio.c"
        HEAP[$n]=$29; //@line 313 "bytesio.c"
        var $30=HEAP[$size]; //@line 315 "bytesio.c"
        var $31=((($30))|0) >= 0; //@line 315 "bytesio.c"
        if ($31) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 315 "bytesio.c"
      case 13: // $bb12
        var $32=HEAP[$size]; //@line 315 "bytesio.c"
        var $33=HEAP[$n]; //@line 315 "bytesio.c"
        var $34=((($32))|0) < ((($33))|0); //@line 315 "bytesio.c"
        if ($34) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 315 "bytesio.c"
      case 14: // $bb13
        var $35=HEAP[$n]; //@line 316 "bytesio.c"
        var $36=HEAP[$size]; //@line 316 "bytesio.c"
        var $37=((($35) - ($36))&4294967295); //@line 316 "bytesio.c"
        HEAP[$size]=$37; //@line 316 "bytesio.c"
        var $38=HEAP[$n]; //@line 317 "bytesio.c"
        var $39=HEAP[$size]; //@line 317 "bytesio.c"
        var $40=((($38) - ($39))&4294967295); //@line 317 "bytesio.c"
        HEAP[$n]=$40; //@line 317 "bytesio.c"
        var $41=HEAP[$self_addr]; //@line 318 "bytesio.c"
        var $42=(($41+12)&4294967295); //@line 318 "bytesio.c"
        var $43=HEAP[$42]; //@line 318 "bytesio.c"
        var $44=HEAP[$size]; //@line 318 "bytesio.c"
        var $45=((($43) - ($44))&4294967295); //@line 318 "bytesio.c"
        var $46=HEAP[$self_addr]; //@line 318 "bytesio.c"
        var $47=(($46+12)&4294967295); //@line 318 "bytesio.c"
        HEAP[$47]=$45; //@line 318 "bytesio.c"
        __label__ = 15; break; //@line 318 "bytesio.c"
      case 15: // $bb14
        var $48=HEAP[$output]; //@line 321 "bytesio.c"
        var $49=HEAP[$n]; //@line 321 "bytesio.c"
        var $50=_PyString_FromStringAndSize($48, $49); //@line 321 "bytesio.c"
        HEAP[$0]=$50; //@line 321 "bytesio.c"
        __label__ = 16; break; //@line 321 "bytesio.c"
      case 16: // $bb15
        var $51=HEAP[$0]; //@line 293 "bytesio.c"
        HEAP[$retval]=$51; //@line 293 "bytesio.c"
        __label__ = 17; break; //@line 293 "bytesio.c"
      case 17: // $return
        var $retval16=HEAP[$retval]; //@line 293 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval16; //@line 293 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_readlines($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 44);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $maxsize=__stackBase__+16;
        var $size=__stackBase__+20;
        var $n=__stackBase__+24;
        var $result=__stackBase__+28;
        var $line=__stackBase__+32;
        var $output=__stackBase__+36;
        var $arg=__stackBase__+40;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$arg]=__Py_NoneStruct; //@line 337 "bytesio.c"
        var $1=HEAP[$self_addr]; //@line 339 "bytesio.c"
        var $2=(($1+8)&4294967295); //@line 339 "bytesio.c"
        var $3=HEAP[$2]; //@line 339 "bytesio.c"
        var $4=($3)==0; //@line 339 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 339 "bytesio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 339 "bytesio.c"
        _PyErr_SetString($5, ((__str672)&4294967295)); //@line 339 "bytesio.c"
        HEAP[$0]=0; //@line 339 "bytesio.c"
        __label__ = 29; break; //@line 339 "bytesio.c"
      case 2: // $bb1
        var $6=HEAP[$args_addr]; //@line 341 "bytesio.c"
        var $7=_PyArg_ParseTuple($6, ((__str1076)&4294967295), $arg); //@line 341 "bytesio.c"
        var $8=((($7))|0)==0; //@line 341 "bytesio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 341 "bytesio.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 342 "bytesio.c"
        __label__ = 29; break; //@line 342 "bytesio.c"
      case 4: // $bb3
        var $9=HEAP[$arg]; //@line 344 "bytesio.c"
        var $10=_PyNumber_Check($9); //@line 344 "bytesio.c"
        var $11=((($10))|0)!=0; //@line 344 "bytesio.c"
        if ($11) { __label__ = 5; break; } else { __label__ = 9; break; } //@line 344 "bytesio.c"
      case 5: // $bb4
        var $12=HEAP[_PyExc_OverflowError]; //@line 345 "bytesio.c"
        var $13=HEAP[$arg]; //@line 345 "bytesio.c"
        var $14=_PyNumber_AsSsize_t($13, $12); //@line 345 "bytesio.c"
        HEAP[$maxsize]=$14; //@line 345 "bytesio.c"
        var $15=HEAP[$maxsize]; //@line 346 "bytesio.c"
        var $16=((($15))|0)==-1; //@line 346 "bytesio.c"
        if ($16) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 346 "bytesio.c"
      case 6: // $bb5
        var $17=_PyErr_Occurred(); //@line 346 "bytesio.c"
        var $18=($17)!=0; //@line 346 "bytesio.c"
        if ($18) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 346 "bytesio.c"
      case 7: // $bb6
        HEAP[$0]=0; //@line 347 "bytesio.c"
        __label__ = 29; break; //@line 347 "bytesio.c"
      case 8: // $bb7
        __label__ = 12; break; //@line 347 "bytesio.c"
      case 9: // $bb8
        var $19=HEAP[$arg]; //@line 349 "bytesio.c"
        var $20=($19)==(__Py_NoneStruct); //@line 349 "bytesio.c"
        if ($20) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 349 "bytesio.c"
      case 10: // $bb9
        HEAP[$maxsize]=-1; //@line 351 "bytesio.c"
        __label__ = 12; break; //@line 351 "bytesio.c"
      case 11: // $bb10
        var $21=HEAP[$arg]; //@line 354 "bytesio.c"
        var $22=(($21+4)&4294967295); //@line 354 "bytesio.c"
        var $23=HEAP[$22]; //@line 354 "bytesio.c"
        var $24=(($23+12)&4294967295); //@line 354 "bytesio.c"
        var $25=HEAP[$24]; //@line 354 "bytesio.c"
        var $26=HEAP[_PyExc_TypeError]; //@line 354 "bytesio.c"
        var $27=_PyErr_Format($26, ((__str874)&4294967295), $25); //@line 354 "bytesio.c"
        HEAP[$0]=0; //@line 356 "bytesio.c"
        __label__ = 29; break; //@line 356 "bytesio.c"
      case 12: // $bb11
        HEAP[$size]=0; //@line 359 "bytesio.c"
        var $28=_PyList_New(0); //@line 360 "bytesio.c"
        HEAP[$result]=$28; //@line 360 "bytesio.c"
        var $29=HEAP[$result]; //@line 361 "bytesio.c"
        var $30=($29)==0; //@line 361 "bytesio.c"
        if ($30) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 361 "bytesio.c"
      case 13: // $bb12
        HEAP[$0]=0; //@line 362 "bytesio.c"
        __label__ = 29; break; //@line 362 "bytesio.c"
      case 14: // $bb13
        __label__ = 24; break; //@line 362 "bytesio.c"
      case 15: // $bb14
        var $31=HEAP[$output]; //@line 365 "bytesio.c"
        var $32=HEAP[$n]; //@line 365 "bytesio.c"
        var $33=_PyString_FromStringAndSize($31, $32); //@line 365 "bytesio.c"
        HEAP[$line]=$33; //@line 365 "bytesio.c"
        var $34=HEAP[$line]; //@line 366 "bytesio.c"
        var $35=($34)==0; //@line 366 "bytesio.c"
        if ($35) { __label__ = 26; break; } else { __label__ = 16; break; } //@line 366 "bytesio.c"
      case 16: // $bb15
        var $36=HEAP[$result]; //@line 368 "bytesio.c"
        var $37=HEAP[$line]; //@line 368 "bytesio.c"
        var $38=_PyList_Append($36, $37); //@line 368 "bytesio.c"
        var $39=((($38))|0)==-1; //@line 368 "bytesio.c"
        if ($39) { __label__ = 17; break; } else { __label__ = 20; break; } //@line 368 "bytesio.c"
      case 17: // $bb16
        var $40=HEAP[$line]; //@line 369 "bytesio.c"
        var $41=(($40)&4294967295); //@line 369 "bytesio.c"
        var $42=HEAP[$41]; //@line 369 "bytesio.c"
        var $43=((($42) - 1)&4294967295); //@line 369 "bytesio.c"
        var $44=HEAP[$line]; //@line 369 "bytesio.c"
        var $45=(($44)&4294967295); //@line 369 "bytesio.c"
        HEAP[$45]=$43; //@line 369 "bytesio.c"
        var $46=HEAP[$line]; //@line 369 "bytesio.c"
        var $47=(($46)&4294967295); //@line 369 "bytesio.c"
        var $48=HEAP[$47]; //@line 369 "bytesio.c"
        var $49=((($48))|0)==0; //@line 369 "bytesio.c"
        if ($49) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 369 "bytesio.c"
      case 18: // $bb17
        var $50=HEAP[$line]; //@line 369 "bytesio.c"
        var $51=(($50+4)&4294967295); //@line 369 "bytesio.c"
        var $52=HEAP[$51]; //@line 369 "bytesio.c"
        var $53=(($52+24)&4294967295); //@line 369 "bytesio.c"
        var $54=HEAP[$53]; //@line 369 "bytesio.c"
        var $55=HEAP[$line]; //@line 369 "bytesio.c"
        FUNCTION_TABLE[$54]($55); //@line 369 "bytesio.c"
        __label__ = 19; break; //@line 369 "bytesio.c"
      case 19: // $bb18
        __label__ = 26; break; //@line 369 "bytesio.c"
      case 20: // $bb19
        var $56=HEAP[$line]; //@line 372 "bytesio.c"
        var $57=(($56)&4294967295); //@line 372 "bytesio.c"
        var $58=HEAP[$57]; //@line 372 "bytesio.c"
        var $59=((($58) - 1)&4294967295); //@line 372 "bytesio.c"
        var $60=HEAP[$line]; //@line 372 "bytesio.c"
        var $61=(($60)&4294967295); //@line 372 "bytesio.c"
        HEAP[$61]=$59; //@line 372 "bytesio.c"
        var $62=HEAP[$line]; //@line 372 "bytesio.c"
        var $63=(($62)&4294967295); //@line 372 "bytesio.c"
        var $64=HEAP[$63]; //@line 372 "bytesio.c"
        var $65=((($64))|0)==0; //@line 372 "bytesio.c"
        if ($65) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 372 "bytesio.c"
      case 21: // $bb20
        var $66=HEAP[$line]; //@line 372 "bytesio.c"
        var $67=(($66+4)&4294967295); //@line 372 "bytesio.c"
        var $68=HEAP[$67]; //@line 372 "bytesio.c"
        var $69=(($68+24)&4294967295); //@line 372 "bytesio.c"
        var $70=HEAP[$69]; //@line 372 "bytesio.c"
        var $71=HEAP[$line]; //@line 372 "bytesio.c"
        FUNCTION_TABLE[$70]($71); //@line 372 "bytesio.c"
        __label__ = 22; break; //@line 372 "bytesio.c"
      case 22: // $bb21
        var $72=HEAP[$size]; //@line 373 "bytesio.c"
        var $73=HEAP[$n]; //@line 373 "bytesio.c"
        var $74=((($72) + ($73))&4294967295); //@line 373 "bytesio.c"
        HEAP[$size]=$74; //@line 373 "bytesio.c"
        var $75=HEAP[$maxsize]; //@line 374 "bytesio.c"
        var $76=((($75))|0) > 0; //@line 374 "bytesio.c"
        if ($76) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 374 "bytesio.c"
      case 23: // $bb22
        var $77=HEAP[$size]; //@line 374 "bytesio.c"
        var $78=HEAP[$maxsize]; //@line 374 "bytesio.c"
        var $79=((($77))|0) >= ((($78))|0); //@line 374 "bytesio.c"
        if ($79) { __label__ = 25; break; } else { __label__ = 24; break; } //@line 374 "bytesio.c"
      case 24: // $bb23
        var $80=HEAP[$self_addr]; //@line 364 "bytesio.c"
        var $81=_get_line($80, $output); //@line 364 "bytesio.c"
        HEAP[$n]=$81; //@line 364 "bytesio.c"
        var $82=HEAP[$n]; //@line 364 "bytesio.c"
        var $83=((($82))|0)!=0; //@line 364 "bytesio.c"
        if ($83) { __label__ = 15; break; } else { __label__ = 25; break; } //@line 364 "bytesio.c"
      case 25: // $bb24
        var $84=HEAP[$result]; //@line 377 "bytesio.c"
        HEAP[$0]=$84; //@line 377 "bytesio.c"
        __label__ = 29; break; //@line 377 "bytesio.c"
      case 26: // $on_error
        var $85=HEAP[$result]; //@line 380 "bytesio.c"
        var $86=(($85)&4294967295); //@line 380 "bytesio.c"
        var $87=HEAP[$86]; //@line 380 "bytesio.c"
        var $88=((($87) - 1)&4294967295); //@line 380 "bytesio.c"
        var $89=HEAP[$result]; //@line 380 "bytesio.c"
        var $90=(($89)&4294967295); //@line 380 "bytesio.c"
        HEAP[$90]=$88; //@line 380 "bytesio.c"
        var $91=HEAP[$result]; //@line 380 "bytesio.c"
        var $92=(($91)&4294967295); //@line 380 "bytesio.c"
        var $93=HEAP[$92]; //@line 380 "bytesio.c"
        var $94=((($93))|0)==0; //@line 380 "bytesio.c"
        if ($94) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 380 "bytesio.c"
      case 27: // $bb25
        var $95=HEAP[$result]; //@line 380 "bytesio.c"
        var $96=(($95+4)&4294967295); //@line 380 "bytesio.c"
        var $97=HEAP[$96]; //@line 380 "bytesio.c"
        var $98=(($97+24)&4294967295); //@line 380 "bytesio.c"
        var $99=HEAP[$98]; //@line 380 "bytesio.c"
        var $100=HEAP[$result]; //@line 380 "bytesio.c"
        FUNCTION_TABLE[$99]($100); //@line 380 "bytesio.c"
        __label__ = 28; break; //@line 380 "bytesio.c"
      case 28: // $bb26
        HEAP[$0]=0; //@line 381 "bytesio.c"
        __label__ = 29; break; //@line 381 "bytesio.c"
      case 29: // $bb27
        var $101=HEAP[$0]; //@line 339 "bytesio.c"
        HEAP[$retval]=$101; //@line 339 "bytesio.c"
        __label__ = 30; break; //@line 339 "bytesio.c"
      case 30: // $return
        var $retval28=HEAP[$retval]; //@line 339 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval28; //@line 339 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_readinto($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 76; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 76);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $buf=__stackBase__+16;
        var $len=__stackBase__+68;
        var $n=__stackBase__+72;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 396 "bytesio.c"
        var $2=(($1+8)&4294967295); //@line 396 "bytesio.c"
        var $3=HEAP[$2]; //@line 396 "bytesio.c"
        var $4=($3)==0; //@line 396 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 396 "bytesio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 396 "bytesio.c"
        _PyErr_SetString($5, ((__str672)&4294967295)); //@line 396 "bytesio.c"
        HEAP[$0]=0; //@line 396 "bytesio.c"
        __label__ = 12; break; //@line 396 "bytesio.c"
      case 2: // $bb1
        var $6=HEAP[$args_addr]; //@line 398 "bytesio.c"
        var $7=_PyArg_ParseTuple($6, ((__str1177)&4294967295), $buf); //@line 398 "bytesio.c"
        var $8=((($7))|0)==0; //@line 398 "bytesio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 398 "bytesio.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 399 "bytesio.c"
        __label__ = 12; break; //@line 399 "bytesio.c"
      case 4: // $bb3
        var $9=(($buf+8)&4294967295); //@line 401 "bytesio.c"
        var $10=HEAP[$9]; //@line 401 "bytesio.c"
        HEAP[$len]=$10; //@line 401 "bytesio.c"
        var $11=HEAP[$self_addr]; //@line 403 "bytesio.c"
        var $12=(($11+16)&4294967295); //@line 403 "bytesio.c"
        var $13=HEAP[$12]; //@line 403 "bytesio.c"
        var $14=HEAP[$self_addr]; //@line 403 "bytesio.c"
        var $15=(($14+12)&4294967295); //@line 403 "bytesio.c"
        var $16=HEAP[$15]; //@line 403 "bytesio.c"
        var $17=((($13) - ($16))&4294967295); //@line 403 "bytesio.c"
        HEAP[$n]=$17; //@line 403 "bytesio.c"
        var $18=HEAP[$len]; //@line 404 "bytesio.c"
        var $19=HEAP[$n]; //@line 404 "bytesio.c"
        var $20=((($18))|0) > ((($19))|0); //@line 404 "bytesio.c"
        if ($20) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 404 "bytesio.c"
      case 5: // $bb4
        var $21=HEAP[$n]; //@line 405 "bytesio.c"
        HEAP[$len]=$21; //@line 405 "bytesio.c"
        var $22=HEAP[$len]; //@line 406 "bytesio.c"
        var $23=((($22))|0) < 0; //@line 406 "bytesio.c"
        if ($23) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 406 "bytesio.c"
      case 6: // $bb5
        HEAP[$len]=0; //@line 407 "bytesio.c"
        __label__ = 7; break; //@line 407 "bytesio.c"
      case 7: // $bb6
        var $24=HEAP[$len]; //@line 410 "bytesio.c"
        var $25=HEAP[$self_addr]; //@line 410 "bytesio.c"
        var $26=(($25+8)&4294967295); //@line 410 "bytesio.c"
        var $27=HEAP[$26]; //@line 410 "bytesio.c"
        var $28=HEAP[$self_addr]; //@line 410 "bytesio.c"
        var $29=(($28+12)&4294967295); //@line 410 "bytesio.c"
        var $30=HEAP[$29]; //@line 410 "bytesio.c"
        var $31=(($27+$30)&4294967295); //@line 410 "bytesio.c"
        var $32=(($buf)&4294967295); //@line 410 "bytesio.c"
        var $33=HEAP[$32]; //@line 410 "bytesio.c"
        _llvm_memcpy_p0i8_p0i8_i32($33, $31, $24, 1, 0); //@line 410 "bytesio.c"
        var $34=HEAP[$self_addr]; //@line 411 "bytesio.c"
        var $35=(($34+12)&4294967295); //@line 411 "bytesio.c"
        var $36=HEAP[$35]; //@line 411 "bytesio.c"
        var $37=HEAP[$len]; //@line 411 "bytesio.c"
        var $38=((($36) + ($37))&4294967295); //@line 411 "bytesio.c"
        var $39=((($38))|0)==2147483647; //@line 411 "bytesio.c"
        if ($39) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 411 "bytesio.c"
      case 8: // $bb7
        ___assert_fail(((__str1278)&4294967295), ((__str167)&4294967295), 411, ((___PRETTY_FUNCTION___8844)&4294967295)); //@line 411 "bytesio.c"
        throw "Reached an unreachable! Original .ll line: 11700"; //@line 411 "bytesio.c"
      case 9: // $bb8
        var $40=HEAP[$len]; //@line 412 "bytesio.c"
        var $41=((($40))|0) < 0; //@line 412 "bytesio.c"
        if ($41) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 412 "bytesio.c"
      case 10: // $bb9
        ___assert_fail(((__str268)&4294967295), ((__str167)&4294967295), 412, ((___PRETTY_FUNCTION___8844)&4294967295)); //@line 412 "bytesio.c"
        throw "Reached an unreachable! Original .ll line: 11709"; //@line 412 "bytesio.c"
      case 11: // $bb10
        var $42=HEAP[$self_addr]; //@line 413 "bytesio.c"
        var $43=(($42+12)&4294967295); //@line 413 "bytesio.c"
        var $44=HEAP[$43]; //@line 413 "bytesio.c"
        var $45=HEAP[$len]; //@line 413 "bytesio.c"
        var $46=((($44) + ($45))&4294967295); //@line 413 "bytesio.c"
        var $47=HEAP[$self_addr]; //@line 413 "bytesio.c"
        var $48=(($47+12)&4294967295); //@line 413 "bytesio.c"
        HEAP[$48]=$46; //@line 413 "bytesio.c"
        _PyBuffer_Release($buf); //@line 415 "bytesio.c"
        var $49=HEAP[$len]; //@line 416 "bytesio.c"
        var $50=_PyLong_FromSsize_t($49); //@line 416 "bytesio.c"
        HEAP[$0]=$50; //@line 416 "bytesio.c"
        __label__ = 12; break; //@line 416 "bytesio.c"
      case 12: // $bb11
        var $51=HEAP[$0]; //@line 396 "bytesio.c"
        HEAP[$retval]=$51; //@line 396 "bytesio.c"
        __label__ = 13; break; //@line 396 "bytesio.c"
      case 13: // $return
        var $retval12=HEAP[$retval]; //@line 396 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval12; //@line 396 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_truncate($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $size=__stackBase__+16;
        var $arg=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$arg]=__Py_NoneStruct; //@line 429 "bytesio.c"
        var $1=HEAP[$self_addr]; //@line 431 "bytesio.c"
        var $2=(($1+8)&4294967295); //@line 431 "bytesio.c"
        var $3=HEAP[$2]; //@line 431 "bytesio.c"
        var $4=($3)==0; //@line 431 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 431 "bytesio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 431 "bytesio.c"
        _PyErr_SetString($5, ((__str672)&4294967295)); //@line 431 "bytesio.c"
        HEAP[$0]=0; //@line 431 "bytesio.c"
        __label__ = 18; break; //@line 431 "bytesio.c"
      case 2: // $bb1
        var $6=HEAP[$args_addr]; //@line 433 "bytesio.c"
        var $7=_PyArg_ParseTuple($6, ((__str1379)&4294967295), $arg); //@line 433 "bytesio.c"
        var $8=((($7))|0)==0; //@line 433 "bytesio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 433 "bytesio.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 434 "bytesio.c"
        __label__ = 18; break; //@line 434 "bytesio.c"
      case 4: // $bb3
        var $9=HEAP[$arg]; //@line 436 "bytesio.c"
        var $10=_PyNumber_Check($9); //@line 436 "bytesio.c"
        var $11=((($10))|0)!=0; //@line 436 "bytesio.c"
        if ($11) { __label__ = 5; break; } else { __label__ = 9; break; } //@line 436 "bytesio.c"
      case 5: // $bb4
        var $12=HEAP[_PyExc_OverflowError]; //@line 437 "bytesio.c"
        var $13=HEAP[$arg]; //@line 437 "bytesio.c"
        var $14=_PyNumber_AsSsize_t($13, $12); //@line 437 "bytesio.c"
        HEAP[$size]=$14; //@line 437 "bytesio.c"
        var $15=HEAP[$size]; //@line 438 "bytesio.c"
        var $16=((($15))|0)==-1; //@line 438 "bytesio.c"
        if ($16) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 438 "bytesio.c"
      case 6: // $bb5
        var $17=_PyErr_Occurred(); //@line 438 "bytesio.c"
        var $18=($17)!=0; //@line 438 "bytesio.c"
        if ($18) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 438 "bytesio.c"
      case 7: // $bb6
        HEAP[$0]=0; //@line 439 "bytesio.c"
        __label__ = 18; break; //@line 439 "bytesio.c"
      case 8: // $bb7
        __label__ = 12; break; //@line 439 "bytesio.c"
      case 9: // $bb8
        var $19=HEAP[$arg]; //@line 441 "bytesio.c"
        var $20=($19)==(__Py_NoneStruct); //@line 441 "bytesio.c"
        if ($20) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 441 "bytesio.c"
      case 10: // $bb9
        var $21=HEAP[$self_addr]; //@line 443 "bytesio.c"
        var $22=(($21+12)&4294967295); //@line 443 "bytesio.c"
        var $23=HEAP[$22]; //@line 443 "bytesio.c"
        HEAP[$size]=$23; //@line 443 "bytesio.c"
        __label__ = 12; break; //@line 443 "bytesio.c"
      case 11: // $bb10
        var $24=HEAP[$arg]; //@line 446 "bytesio.c"
        var $25=(($24+4)&4294967295); //@line 446 "bytesio.c"
        var $26=HEAP[$25]; //@line 446 "bytesio.c"
        var $27=(($26+12)&4294967295); //@line 446 "bytesio.c"
        var $28=HEAP[$27]; //@line 446 "bytesio.c"
        var $29=HEAP[_PyExc_TypeError]; //@line 446 "bytesio.c"
        var $30=_PyErr_Format($29, ((__str874)&4294967295), $28); //@line 446 "bytesio.c"
        HEAP[$0]=0; //@line 448 "bytesio.c"
        __label__ = 18; break; //@line 448 "bytesio.c"
      case 12: // $bb11
        var $31=HEAP[$size]; //@line 451 "bytesio.c"
        var $32=((($31))|0) < 0; //@line 451 "bytesio.c"
        if ($32) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 451 "bytesio.c"
      case 13: // $bb12
        var $33=HEAP[_PyExc_ValueError]; //@line 452 "bytesio.c"
        var $34=HEAP[$size]; //@line 452 "bytesio.c"
        var $35=_PyErr_Format($33, ((__str1480)&4294967295), $34); //@line 452 "bytesio.c"
        HEAP[$0]=0; //@line 454 "bytesio.c"
        __label__ = 18; break; //@line 454 "bytesio.c"
      case 14: // $bb13
        var $36=HEAP[$self_addr]; //@line 457 "bytesio.c"
        var $37=(($36+16)&4294967295); //@line 457 "bytesio.c"
        var $38=HEAP[$37]; //@line 457 "bytesio.c"
        var $39=HEAP[$size]; //@line 457 "bytesio.c"
        var $40=((($38))|0) > ((($39))|0); //@line 457 "bytesio.c"
        if ($40) { __label__ = 15; break; } else { __label__ = 17; break; } //@line 457 "bytesio.c"
      case 15: // $bb14
        var $41=HEAP[$self_addr]; //@line 458 "bytesio.c"
        var $42=(($41+16)&4294967295); //@line 458 "bytesio.c"
        var $43=HEAP[$size]; //@line 458 "bytesio.c"
        HEAP[$42]=$43; //@line 458 "bytesio.c"
        var $44=HEAP[$size]; //@line 459 "bytesio.c"
        var $45=HEAP[$self_addr]; //@line 459 "bytesio.c"
        var $46=_resize_buffer($45, $44); //@line 459 "bytesio.c"
        var $47=((($46))|0) < 0; //@line 459 "bytesio.c"
        if ($47) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 459 "bytesio.c"
      case 16: // $bb15
        HEAP[$0]=0; //@line 460 "bytesio.c"
        __label__ = 18; break; //@line 460 "bytesio.c"
      case 17: // $bb16
        var $48=HEAP[$size]; //@line 463 "bytesio.c"
        var $49=_PyLong_FromSsize_t($48); //@line 463 "bytesio.c"
        HEAP[$0]=$49; //@line 463 "bytesio.c"
        __label__ = 18; break; //@line 463 "bytesio.c"
      case 18: // $bb17
        var $50=HEAP[$0]; //@line 431 "bytesio.c"
        HEAP[$retval]=$50; //@line 431 "bytesio.c"
        __label__ = 19; break; //@line 431 "bytesio.c"
      case 19: // $return
        var $retval18=HEAP[$retval]; //@line 431 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval18; //@line 431 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_iternext($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $next=__stackBase__+12;
        var $n=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 472 "bytesio.c"
        var $2=(($1+8)&4294967295); //@line 472 "bytesio.c"
        var $3=HEAP[$2]; //@line 472 "bytesio.c"
        var $4=($3)==0; //@line 472 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 472 "bytesio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 472 "bytesio.c"
        _PyErr_SetString($5, ((__str672)&4294967295)); //@line 472 "bytesio.c"
        HEAP[$0]=0; //@line 472 "bytesio.c"
        __label__ = 6; break; //@line 472 "bytesio.c"
      case 2: // $bb1
        var $6=HEAP[$self_addr]; //@line 474 "bytesio.c"
        var $7=_get_line($6, $next); //@line 474 "bytesio.c"
        HEAP[$n]=$7; //@line 474 "bytesio.c"
        var $8=HEAP[$next]; //@line 476 "bytesio.c"
        var $9=($8)==0; //@line 476 "bytesio.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 476 "bytesio.c"
      case 3: // $bb2
        var $10=HEAP[$n]; //@line 476 "bytesio.c"
        var $11=((($10))|0)==0; //@line 476 "bytesio.c"
        if ($11) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 476 "bytesio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 477 "bytesio.c"
        __label__ = 6; break; //@line 477 "bytesio.c"
      case 5: // $bb4
        var $12=HEAP[$next]; //@line 479 "bytesio.c"
        var $13=HEAP[$n]; //@line 479 "bytesio.c"
        var $14=_PyString_FromStringAndSize($12, $13); //@line 479 "bytesio.c"
        HEAP[$0]=$14; //@line 479 "bytesio.c"
        __label__ = 6; break; //@line 479 "bytesio.c"
      case 6: // $bb5
        var $15=HEAP[$0]; //@line 472 "bytesio.c"
        HEAP[$retval]=$15; //@line 472 "bytesio.c"
        __label__ = 7; break; //@line 472 "bytesio.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 472 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 472 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_seek($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $posobj=__stackBase__+16;
        var $pos=__stackBase__+20;
        var $mode=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$mode]=0; //@line 496 "bytesio.c"
        var $1=HEAP[$self_addr]; //@line 498 "bytesio.c"
        var $2=(($1+8)&4294967295); //@line 498 "bytesio.c"
        var $3=HEAP[$2]; //@line 498 "bytesio.c"
        var $4=($3)==0; //@line 498 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 498 "bytesio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 498 "bytesio.c"
        _PyErr_SetString($5, ((__str672)&4294967295)); //@line 498 "bytesio.c"
        HEAP[$0]=0; //@line 498 "bytesio.c"
        __label__ = 23; break; //@line 498 "bytesio.c"
      case 2: // $bb1
        var $6=HEAP[$args_addr]; //@line 500 "bytesio.c"
        var $7=_PyArg_ParseTuple($6, ((__str1581)&4294967295), $posobj, $mode); //@line 500 "bytesio.c"
        var $8=((($7))|0)==0; //@line 500 "bytesio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 500 "bytesio.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 501 "bytesio.c"
        __label__ = 23; break; //@line 501 "bytesio.c"
      case 4: // $bb3
        var $9=HEAP[_PyExc_OverflowError]; //@line 503 "bytesio.c"
        var $10=HEAP[$posobj]; //@line 503 "bytesio.c"
        var $11=_PyNumber_AsSsize_t($10, $9); //@line 503 "bytesio.c"
        HEAP[$pos]=$11; //@line 503 "bytesio.c"
        var $12=HEAP[$pos]; //@line 504 "bytesio.c"
        var $13=((($12))|0)==-1; //@line 504 "bytesio.c"
        if ($13) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 504 "bytesio.c"
      case 5: // $bb4
        var $14=_PyErr_Occurred(); //@line 504 "bytesio.c"
        var $15=($14)!=0; //@line 504 "bytesio.c"
        if ($15) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 504 "bytesio.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 505 "bytesio.c"
        __label__ = 23; break; //@line 505 "bytesio.c"
      case 7: // $bb6
        var $16=HEAP[$pos]; //@line 507 "bytesio.c"
        var $17=((($16))|0) < 0; //@line 507 "bytesio.c"
        if ($17) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 507 "bytesio.c"
      case 8: // $bb7
        var $18=HEAP[$mode]; //@line 507 "bytesio.c"
        var $19=((($18))|0)==0; //@line 507 "bytesio.c"
        if ($19) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 507 "bytesio.c"
      case 9: // $bb8
        var $20=HEAP[_PyExc_ValueError]; //@line 508 "bytesio.c"
        var $21=HEAP[$pos]; //@line 508 "bytesio.c"
        var $22=_PyErr_Format($20, ((__str1682)&4294967295), $21); //@line 508 "bytesio.c"
        HEAP[$0]=0; //@line 510 "bytesio.c"
        __label__ = 23; break; //@line 510 "bytesio.c"
      case 10: // $bb9
        var $23=HEAP[$mode]; //@line 516 "bytesio.c"
        var $24=((($23))|0)==1; //@line 516 "bytesio.c"
        if ($24) { __label__ = 11; break; } else { __label__ = 14; break; } //@line 516 "bytesio.c"
      case 11: // $bb10
        var $25=HEAP[$self_addr]; //@line 517 "bytesio.c"
        var $26=(($25+12)&4294967295); //@line 517 "bytesio.c"
        var $27=HEAP[$26]; //@line 517 "bytesio.c"
        var $28=((2147483647 - ($27))&4294967295); //@line 517 "bytesio.c"
        var $29=HEAP[$pos]; //@line 517 "bytesio.c"
        var $30=((($28))|0) < ((($29))|0); //@line 517 "bytesio.c"
        if ($30) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 517 "bytesio.c"
      case 12: // $bb11
        var $31=HEAP[_PyExc_OverflowError]; //@line 518 "bytesio.c"
        _PyErr_SetString($31, ((__str1783)&4294967295)); //@line 518 "bytesio.c"
        HEAP[$0]=0; //@line 520 "bytesio.c"
        __label__ = 23; break; //@line 520 "bytesio.c"
      case 13: // $bb12
        var $32=HEAP[$self_addr]; //@line 522 "bytesio.c"
        var $33=(($32+12)&4294967295); //@line 522 "bytesio.c"
        var $34=HEAP[$33]; //@line 522 "bytesio.c"
        var $35=HEAP[$pos]; //@line 522 "bytesio.c"
        var $36=((($34) + ($35))&4294967295); //@line 522 "bytesio.c"
        HEAP[$pos]=$36; //@line 522 "bytesio.c"
        __label__ = 20; break; //@line 522 "bytesio.c"
      case 14: // $bb13
        var $37=HEAP[$mode]; //@line 524 "bytesio.c"
        var $38=((($37))|0)==2; //@line 524 "bytesio.c"
        if ($38) { __label__ = 15; break; } else { __label__ = 18; break; } //@line 524 "bytesio.c"
      case 15: // $bb14
        var $39=HEAP[$self_addr]; //@line 525 "bytesio.c"
        var $40=(($39+16)&4294967295); //@line 525 "bytesio.c"
        var $41=HEAP[$40]; //@line 525 "bytesio.c"
        var $42=((2147483647 - ($41))&4294967295); //@line 525 "bytesio.c"
        var $43=HEAP[$pos]; //@line 525 "bytesio.c"
        var $44=((($42))|0) < ((($43))|0); //@line 525 "bytesio.c"
        if ($44) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 525 "bytesio.c"
      case 16: // $bb15
        var $45=HEAP[_PyExc_OverflowError]; //@line 526 "bytesio.c"
        _PyErr_SetString($45, ((__str1783)&4294967295)); //@line 526 "bytesio.c"
        HEAP[$0]=0; //@line 528 "bytesio.c"
        __label__ = 23; break; //@line 528 "bytesio.c"
      case 17: // $bb16
        var $46=HEAP[$self_addr]; //@line 530 "bytesio.c"
        var $47=(($46+16)&4294967295); //@line 530 "bytesio.c"
        var $48=HEAP[$47]; //@line 530 "bytesio.c"
        var $49=HEAP[$pos]; //@line 530 "bytesio.c"
        var $50=((($48) + ($49))&4294967295); //@line 530 "bytesio.c"
        HEAP[$pos]=$50; //@line 530 "bytesio.c"
        __label__ = 20; break; //@line 530 "bytesio.c"
      case 18: // $bb17
        var $51=HEAP[$mode]; //@line 532 "bytesio.c"
        var $52=((($51))|0)!=0; //@line 532 "bytesio.c"
        if ($52) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 532 "bytesio.c"
      case 19: // $bb18
        var $53=HEAP[$mode]; //@line 533 "bytesio.c"
        var $54=HEAP[_PyExc_ValueError]; //@line 533 "bytesio.c"
        var $55=_PyErr_Format($54, ((__str1884)&4294967295), $53); //@line 533 "bytesio.c"
        HEAP[$0]=0; //@line 535 "bytesio.c"
        __label__ = 23; break; //@line 535 "bytesio.c"
      case 20: // $bb19
        var $56=HEAP[$pos]; //@line 538 "bytesio.c"
        var $57=((($56))|0) < 0; //@line 538 "bytesio.c"
        if ($57) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 538 "bytesio.c"
      case 21: // $bb20
        HEAP[$pos]=0; //@line 539 "bytesio.c"
        __label__ = 22; break; //@line 539 "bytesio.c"
      case 22: // $bb21
        var $58=HEAP[$self_addr]; //@line 540 "bytesio.c"
        var $59=(($58+12)&4294967295); //@line 540 "bytesio.c"
        var $60=HEAP[$pos]; //@line 540 "bytesio.c"
        HEAP[$59]=$60; //@line 540 "bytesio.c"
        var $61=HEAP[$self_addr]; //@line 542 "bytesio.c"
        var $62=(($61+12)&4294967295); //@line 542 "bytesio.c"
        var $63=HEAP[$62]; //@line 542 "bytesio.c"
        var $64=_PyLong_FromSsize_t($63); //@line 542 "bytesio.c"
        HEAP[$0]=$64; //@line 542 "bytesio.c"
        __label__ = 23; break; //@line 542 "bytesio.c"
      case 23: // $bb22
        var $65=HEAP[$0]; //@line 498 "bytesio.c"
        HEAP[$retval]=$65; //@line 498 "bytesio.c"
        __label__ = 24; break; //@line 498 "bytesio.c"
      case 24: // $return
        var $retval23=HEAP[$retval]; //@line 498 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval23; //@line 498 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_write($self, $obj) {
    var __stackBase__  = STACKTOP; STACKTOP += 76; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 76);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $obj_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $n=__stackBase__+16;
        var $buf=__stackBase__+20;
        var $result=__stackBase__+72;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$obj_addr]=$obj;
        HEAP[$n]=0; //@line 553 "bytesio.c"
        HEAP[$result]=0; //@line 555 "bytesio.c"
        var $1=HEAP[$self_addr]; //@line 557 "bytesio.c"
        var $2=(($1+8)&4294967295); //@line 557 "bytesio.c"
        var $3=HEAP[$2]; //@line 557 "bytesio.c"
        var $4=($3)==0; //@line 557 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 557 "bytesio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 557 "bytesio.c"
        _PyErr_SetString($5, ((__str672)&4294967295)); //@line 557 "bytesio.c"
        HEAP[$0]=0; //@line 557 "bytesio.c"
        __label__ = 9; break; //@line 557 "bytesio.c"
      case 2: // $bb1
        var $6=HEAP[$obj_addr]; //@line 559 "bytesio.c"
        var $7=_PyObject_GetBuffer($6, $buf, 8); //@line 559 "bytesio.c"
        var $8=((($7))|0) < 0; //@line 559 "bytesio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 559 "bytesio.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 560 "bytesio.c"
        __label__ = 9; break; //@line 560 "bytesio.c"
      case 4: // $bb3
        var $9=(($buf+8)&4294967295); //@line 562 "bytesio.c"
        var $10=HEAP[$9]; //@line 562 "bytesio.c"
        var $11=((($10))|0)!=0; //@line 562 "bytesio.c"
        if ($11) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 562 "bytesio.c"
      case 5: // $bb4
        var $12=(($buf+8)&4294967295); //@line 563 "bytesio.c"
        var $13=HEAP[$12]; //@line 563 "bytesio.c"
        var $14=(($buf)&4294967295); //@line 563 "bytesio.c"
        var $15=HEAP[$14]; //@line 563 "bytesio.c"
        var $16=HEAP[$self_addr]; //@line 563 "bytesio.c"
        var $17=_write_bytes($16, $15, $13); //@line 563 "bytesio.c"
        HEAP[$n]=$17; //@line 563 "bytesio.c"
        __label__ = 6; break; //@line 563 "bytesio.c"
      case 6: // $bb5
        var $18=HEAP[$n]; //@line 564 "bytesio.c"
        var $19=((($18))|0) >= 0; //@line 564 "bytesio.c"
        if ($19) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 564 "bytesio.c"
      case 7: // $bb6
        var $20=HEAP[$n]; //@line 565 "bytesio.c"
        var $21=_PyLong_FromSsize_t($20); //@line 565 "bytesio.c"
        HEAP[$result]=$21; //@line 565 "bytesio.c"
        __label__ = 8; break; //@line 565 "bytesio.c"
      case 8: // $bb7
        _PyBuffer_Release($buf); //@line 567 "bytesio.c"
        var $22=HEAP[$result]; //@line 568 "bytesio.c"
        HEAP[$0]=$22; //@line 568 "bytesio.c"
        __label__ = 9; break; //@line 568 "bytesio.c"
      case 9: // $bb8
        var $23=HEAP[$0]; //@line 557 "bytesio.c"
        HEAP[$retval]=$23; //@line 557 "bytesio.c"
        __label__ = 10; break; //@line 557 "bytesio.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 557 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 557 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_writelines($self, $v) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $v_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $it=__stackBase__+16;
        var $item=__stackBase__+20;
        var $ret=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$v_addr]=$v;
        var $1=HEAP[$self_addr]; //@line 584 "bytesio.c"
        var $2=(($1+8)&4294967295); //@line 584 "bytesio.c"
        var $3=HEAP[$2]; //@line 584 "bytesio.c"
        var $4=($3)==0; //@line 584 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 584 "bytesio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 584 "bytesio.c"
        _PyErr_SetString($5, ((__str672)&4294967295)); //@line 584 "bytesio.c"
        HEAP[$0]=0; //@line 584 "bytesio.c"
        __label__ = 19; break; //@line 584 "bytesio.c"
      case 2: // $bb1
        var $6=HEAP[$v_addr]; //@line 586 "bytesio.c"
        var $7=_PyObject_GetIter($6); //@line 586 "bytesio.c"
        HEAP[$it]=$7; //@line 586 "bytesio.c"
        var $8=HEAP[$it]; //@line 587 "bytesio.c"
        var $9=($8)==0; //@line 587 "bytesio.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 587 "bytesio.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 588 "bytesio.c"
        __label__ = 19; break; //@line 588 "bytesio.c"
      case 4: // $bb3
        __label__ = 13; break; //@line 588 "bytesio.c"
      case 5: // $bb4
        var $10=HEAP[$self_addr]; //@line 591 "bytesio.c"
        var $11=HEAP[$item]; //@line 591 "bytesio.c"
        var $12=_bytesio_write($10, $11); //@line 591 "bytesio.c"
        HEAP[$ret]=$12; //@line 591 "bytesio.c"
        var $13=HEAP[$item]; //@line 592 "bytesio.c"
        var $14=(($13)&4294967295); //@line 592 "bytesio.c"
        var $15=HEAP[$14]; //@line 592 "bytesio.c"
        var $16=((($15) - 1)&4294967295); //@line 592 "bytesio.c"
        var $17=HEAP[$item]; //@line 592 "bytesio.c"
        var $18=(($17)&4294967295); //@line 592 "bytesio.c"
        HEAP[$18]=$16; //@line 592 "bytesio.c"
        var $19=HEAP[$item]; //@line 592 "bytesio.c"
        var $20=(($19)&4294967295); //@line 592 "bytesio.c"
        var $21=HEAP[$20]; //@line 592 "bytesio.c"
        var $22=((($21))|0)==0; //@line 592 "bytesio.c"
        if ($22) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 592 "bytesio.c"
      case 6: // $bb5
        var $23=HEAP[$item]; //@line 592 "bytesio.c"
        var $24=(($23+4)&4294967295); //@line 592 "bytesio.c"
        var $25=HEAP[$24]; //@line 592 "bytesio.c"
        var $26=(($25+24)&4294967295); //@line 592 "bytesio.c"
        var $27=HEAP[$26]; //@line 592 "bytesio.c"
        var $28=HEAP[$item]; //@line 592 "bytesio.c"
        FUNCTION_TABLE[$27]($28); //@line 592 "bytesio.c"
        __label__ = 7; break; //@line 592 "bytesio.c"
      case 7: // $bb6
        var $29=HEAP[$ret]; //@line 593 "bytesio.c"
        var $30=($29)==0; //@line 593 "bytesio.c"
        if ($30) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 593 "bytesio.c"
      case 8: // $bb7
        var $31=HEAP[$it]; //@line 594 "bytesio.c"
        var $32=(($31)&4294967295); //@line 594 "bytesio.c"
        var $33=HEAP[$32]; //@line 594 "bytesio.c"
        var $34=((($33) - 1)&4294967295); //@line 594 "bytesio.c"
        var $35=HEAP[$it]; //@line 594 "bytesio.c"
        var $36=(($35)&4294967295); //@line 594 "bytesio.c"
        HEAP[$36]=$34; //@line 594 "bytesio.c"
        var $37=HEAP[$it]; //@line 594 "bytesio.c"
        var $38=(($37)&4294967295); //@line 594 "bytesio.c"
        var $39=HEAP[$38]; //@line 594 "bytesio.c"
        var $40=((($39))|0)==0; //@line 594 "bytesio.c"
        if ($40) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 594 "bytesio.c"
      case 9: // $bb8
        var $41=HEAP[$it]; //@line 594 "bytesio.c"
        var $42=(($41+4)&4294967295); //@line 594 "bytesio.c"
        var $43=HEAP[$42]; //@line 594 "bytesio.c"
        var $44=(($43+24)&4294967295); //@line 594 "bytesio.c"
        var $45=HEAP[$44]; //@line 594 "bytesio.c"
        var $46=HEAP[$it]; //@line 594 "bytesio.c"
        FUNCTION_TABLE[$45]($46); //@line 594 "bytesio.c"
        __label__ = 10; break; //@line 594 "bytesio.c"
      case 10: // $bb9
        HEAP[$0]=0; //@line 595 "bytesio.c"
        __label__ = 19; break; //@line 595 "bytesio.c"
      case 11: // $bb10
        var $47=HEAP[$ret]; //@line 597 "bytesio.c"
        var $48=(($47)&4294967295); //@line 597 "bytesio.c"
        var $49=HEAP[$48]; //@line 597 "bytesio.c"
        var $50=((($49) - 1)&4294967295); //@line 597 "bytesio.c"
        var $51=HEAP[$ret]; //@line 597 "bytesio.c"
        var $52=(($51)&4294967295); //@line 597 "bytesio.c"
        HEAP[$52]=$50; //@line 597 "bytesio.c"
        var $53=HEAP[$ret]; //@line 597 "bytesio.c"
        var $54=(($53)&4294967295); //@line 597 "bytesio.c"
        var $55=HEAP[$54]; //@line 597 "bytesio.c"
        var $56=((($55))|0)==0; //@line 597 "bytesio.c"
        if ($56) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 597 "bytesio.c"
      case 12: // $bb11
        var $57=HEAP[$ret]; //@line 597 "bytesio.c"
        var $58=(($57+4)&4294967295); //@line 597 "bytesio.c"
        var $59=HEAP[$58]; //@line 597 "bytesio.c"
        var $60=(($59+24)&4294967295); //@line 597 "bytesio.c"
        var $61=HEAP[$60]; //@line 597 "bytesio.c"
        var $62=HEAP[$ret]; //@line 597 "bytesio.c"
        FUNCTION_TABLE[$61]($62); //@line 597 "bytesio.c"
        __label__ = 13; break; //@line 597 "bytesio.c"
      case 13: // $bb12
        var $63=HEAP[$it]; //@line 590 "bytesio.c"
        var $64=_PyIter_Next($63); //@line 590 "bytesio.c"
        HEAP[$item]=$64; //@line 590 "bytesio.c"
        var $65=HEAP[$item]; //@line 590 "bytesio.c"
        var $66=($65)!=0; //@line 590 "bytesio.c"
        if ($66) { __label__ = 5; break; } else { __label__ = 14; break; } //@line 590 "bytesio.c"
      case 14: // $bb13
        var $67=HEAP[$it]; //@line 599 "bytesio.c"
        var $68=(($67)&4294967295); //@line 599 "bytesio.c"
        var $69=HEAP[$68]; //@line 599 "bytesio.c"
        var $70=((($69) - 1)&4294967295); //@line 599 "bytesio.c"
        var $71=HEAP[$it]; //@line 599 "bytesio.c"
        var $72=(($71)&4294967295); //@line 599 "bytesio.c"
        HEAP[$72]=$70; //@line 599 "bytesio.c"
        var $73=HEAP[$it]; //@line 599 "bytesio.c"
        var $74=(($73)&4294967295); //@line 599 "bytesio.c"
        var $75=HEAP[$74]; //@line 599 "bytesio.c"
        var $76=((($75))|0)==0; //@line 599 "bytesio.c"
        if ($76) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 599 "bytesio.c"
      case 15: // $bb14
        var $77=HEAP[$it]; //@line 599 "bytesio.c"
        var $78=(($77+4)&4294967295); //@line 599 "bytesio.c"
        var $79=HEAP[$78]; //@line 599 "bytesio.c"
        var $80=(($79+24)&4294967295); //@line 599 "bytesio.c"
        var $81=HEAP[$80]; //@line 599 "bytesio.c"
        var $82=HEAP[$it]; //@line 599 "bytesio.c"
        FUNCTION_TABLE[$81]($82); //@line 599 "bytesio.c"
        __label__ = 16; break; //@line 599 "bytesio.c"
      case 16: // $bb15
        var $83=_PyErr_Occurred(); //@line 602 "bytesio.c"
        var $84=($83)!=0; //@line 602 "bytesio.c"
        if ($84) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 602 "bytesio.c"
      case 17: // $bb16
        HEAP[$0]=0; //@line 603 "bytesio.c"
        __label__ = 19; break; //@line 603 "bytesio.c"
      case 18: // $bb17
        var $85=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 605 "bytesio.c"
        var $86=((($85) + 1)&4294967295); //@line 605 "bytesio.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$86; //@line 605 "bytesio.c"
        HEAP[$0]=__Py_NoneStruct; //@line 605 "bytesio.c"
        __label__ = 19; break; //@line 605 "bytesio.c"
      case 19: // $bb18
        var $87=HEAP[$0]; //@line 584 "bytesio.c"
        HEAP[$retval]=$87; //@line 584 "bytesio.c"
        __label__ = 20; break; //@line 584 "bytesio.c"
      case 20: // $return
        var $retval19=HEAP[$retval]; //@line 584 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval19; //@line 584 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_close($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 614 "bytesio.c"
        var $2=(($1+8)&4294967295); //@line 614 "bytesio.c"
        var $3=HEAP[$2]; //@line 614 "bytesio.c"
        var $4=($3)!=0; //@line 614 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 614 "bytesio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 615 "bytesio.c"
        var $6=(($5+8)&4294967295); //@line 615 "bytesio.c"
        var $7=HEAP[$6]; //@line 615 "bytesio.c"
        _PyMem_Free($7); //@line 615 "bytesio.c"
        var $8=HEAP[$self_addr]; //@line 616 "bytesio.c"
        var $9=(($8+8)&4294967295); //@line 616 "bytesio.c"
        HEAP[$9]=0; //@line 616 "bytesio.c"
        __label__ = 2; break; //@line 616 "bytesio.c"
      case 2: // $bb1
        var $10=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 618 "bytesio.c"
        var $11=((($10) + 1)&4294967295); //@line 618 "bytesio.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$11; //@line 618 "bytesio.c"
        HEAP[$0]=__Py_NoneStruct; //@line 618 "bytesio.c"
        var $12=HEAP[$0]; //@line 618 "bytesio.c"
        HEAP[$retval]=$12; //@line 618 "bytesio.c"
        __label__ = 3; break; //@line 618 "bytesio.c"
      case 3: // $return
        var $retval2=HEAP[$retval]; //@line 618 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval2; //@line 618 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_getstate($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $initvalue=__stackBase__+12;
        var $dict=__stackBase__+16;
        var $state=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 639 "bytesio.c"
        var $2=_bytesio_getvalue($1); //@line 639 "bytesio.c"
        HEAP[$initvalue]=$2; //@line 639 "bytesio.c"
        var $3=HEAP[$initvalue]; //@line 643 "bytesio.c"
        var $4=($3)==0; //@line 643 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 643 "bytesio.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 644 "bytesio.c"
        __label__ = 9; break; //@line 644 "bytesio.c"
      case 2: // $bb1
        var $5=HEAP[$self_addr]; //@line 645 "bytesio.c"
        var $6=(($5+24)&4294967295); //@line 645 "bytesio.c"
        var $7=HEAP[$6]; //@line 645 "bytesio.c"
        var $8=($7)==0; //@line 645 "bytesio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 645 "bytesio.c"
      case 3: // $bb2
        var $9=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 646 "bytesio.c"
        var $10=((($9) + 1)&4294967295); //@line 646 "bytesio.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$10; //@line 646 "bytesio.c"
        HEAP[$dict]=__Py_NoneStruct; //@line 647 "bytesio.c"
        __label__ = 6; break; //@line 647 "bytesio.c"
      case 4: // $bb3
        var $11=HEAP[$self_addr]; //@line 650 "bytesio.c"
        var $12=(($11+24)&4294967295); //@line 650 "bytesio.c"
        var $13=HEAP[$12]; //@line 650 "bytesio.c"
        var $14=_PyDict_Copy($13); //@line 650 "bytesio.c"
        HEAP[$dict]=$14; //@line 650 "bytesio.c"
        var $15=HEAP[$dict]; //@line 651 "bytesio.c"
        var $16=($15)==0; //@line 651 "bytesio.c"
        if ($16) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 651 "bytesio.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 652 "bytesio.c"
        __label__ = 9; break; //@line 652 "bytesio.c"
      case 6: // $bb5
        var $17=HEAP[$self_addr]; //@line 655 "bytesio.c"
        var $18=(($17+12)&4294967295); //@line 655 "bytesio.c"
        var $19=HEAP[$18]; //@line 655 "bytesio.c"
        var $20=HEAP[$initvalue]; //@line 655 "bytesio.c"
        var $21=HEAP[$dict]; //@line 655 "bytesio.c"
        var $22=_Py_BuildValue(((__str1985)&4294967295), $20, $19, $21); //@line 655 "bytesio.c"
        HEAP[$state]=$22; //@line 655 "bytesio.c"
        var $23=HEAP[$initvalue]; //@line 656 "bytesio.c"
        var $24=(($23)&4294967295); //@line 656 "bytesio.c"
        var $25=HEAP[$24]; //@line 656 "bytesio.c"
        var $26=((($25) - 1)&4294967295); //@line 656 "bytesio.c"
        var $27=HEAP[$initvalue]; //@line 656 "bytesio.c"
        var $28=(($27)&4294967295); //@line 656 "bytesio.c"
        HEAP[$28]=$26; //@line 656 "bytesio.c"
        var $29=HEAP[$initvalue]; //@line 656 "bytesio.c"
        var $30=(($29)&4294967295); //@line 656 "bytesio.c"
        var $31=HEAP[$30]; //@line 656 "bytesio.c"
        var $32=((($31))|0)==0; //@line 656 "bytesio.c"
        if ($32) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 656 "bytesio.c"
      case 7: // $bb6
        var $33=HEAP[$initvalue]; //@line 656 "bytesio.c"
        var $34=(($33+4)&4294967295); //@line 656 "bytesio.c"
        var $35=HEAP[$34]; //@line 656 "bytesio.c"
        var $36=(($35+24)&4294967295); //@line 656 "bytesio.c"
        var $37=HEAP[$36]; //@line 656 "bytesio.c"
        var $38=HEAP[$initvalue]; //@line 656 "bytesio.c"
        FUNCTION_TABLE[$37]($38); //@line 656 "bytesio.c"
        __label__ = 8; break; //@line 656 "bytesio.c"
      case 8: // $bb7
        var $39=HEAP[$state]; //@line 657 "bytesio.c"
        HEAP[$0]=$39; //@line 657 "bytesio.c"
        __label__ = 9; break; //@line 657 "bytesio.c"
      case 9: // $bb8
        var $40=HEAP[$0]; //@line 644 "bytesio.c"
        HEAP[$retval]=$40; //@line 644 "bytesio.c"
        __label__ = 10; break; //@line 644 "bytesio.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 644 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 644 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_setstate($self, $state) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $state_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $result=__stackBase__+16;
        var $position_obj=__stackBase__+20;
        var $dict=__stackBase__+24;
        var $pos=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$state_addr]=$state;
        var $1=HEAP[$state_addr]; //@line 668 "bytesio.c"
        var $2=($1)==0; //@line 668 "bytesio.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 668 "bytesio.c"
      case 1: // $bb
        ___assert_fail(((__str2086)&4294967295), ((__str167)&4294967295), 668, ((___PRETTY_FUNCTION___9134)&4294967295)); //@line 668 "bytesio.c"
        throw "Reached an unreachable! Original .ll line: 12565"; //@line 668 "bytesio.c"
      case 2: // $bb1
        var $3=HEAP[$state_addr]; //@line 673 "bytesio.c"
        var $4=(($3+4)&4294967295); //@line 673 "bytesio.c"
        var $5=HEAP[$4]; //@line 673 "bytesio.c"
        var $6=(($5+84)&4294967295); //@line 673 "bytesio.c"
        var $7=HEAP[$6]; //@line 673 "bytesio.c"
        var $8=($7) & 67108864; //@line 673 "bytesio.c"
        var $9=((($8))|0)==0; //@line 673 "bytesio.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 673 "bytesio.c"
      case 3: // $bb2
        var $10=HEAP[$state_addr]; //@line 673 "bytesio.c"
        var $11=$10; //@line 673 "bytesio.c"
        var $12=(($11+8)&4294967295); //@line 673 "bytesio.c"
        var $13=HEAP[$12]; //@line 673 "bytesio.c"
        var $14=((($13))|0) <= 2; //@line 673 "bytesio.c"
        if ($14) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 673 "bytesio.c"
      case 4: // $bb3
        var $15=HEAP[$state_addr]; //@line 674 "bytesio.c"
        var $16=(($15+4)&4294967295); //@line 674 "bytesio.c"
        var $17=HEAP[$16]; //@line 674 "bytesio.c"
        var $18=(($17+12)&4294967295); //@line 674 "bytesio.c"
        var $19=HEAP[$18]; //@line 674 "bytesio.c"
        var $20=HEAP[$self_addr]; //@line 674 "bytesio.c"
        var $21=$20; //@line 674 "bytesio.c"
        var $22=(($21+4)&4294967295); //@line 674 "bytesio.c"
        var $23=HEAP[$22]; //@line 674 "bytesio.c"
        var $24=(($23+12)&4294967295); //@line 674 "bytesio.c"
        var $25=HEAP[$24]; //@line 674 "bytesio.c"
        var $26=HEAP[_PyExc_TypeError]; //@line 674 "bytesio.c"
        var $27=_PyErr_Format($26, ((__str2187)&4294967295), $25, $19); //@line 674 "bytesio.c"
        HEAP[$0]=0; //@line 677 "bytesio.c"
        __label__ = 27; break; //@line 677 "bytesio.c"
      case 5: // $bb4
        var $28=HEAP[$self_addr]; //@line 681 "bytesio.c"
        var $29=(($28+16)&4294967295); //@line 681 "bytesio.c"
        HEAP[$29]=0; //@line 681 "bytesio.c"
        var $30=HEAP[$self_addr]; //@line 682 "bytesio.c"
        var $31=(($30+12)&4294967295); //@line 682 "bytesio.c"
        HEAP[$31]=0; //@line 682 "bytesio.c"
        var $32=HEAP[$state_addr]; //@line 686 "bytesio.c"
        var $33=$32; //@line 686 "bytesio.c"
        var $34=(($33+12)&4294967295); //@line 686 "bytesio.c"
        var $35=(($34)&4294967295); //@line 686 "bytesio.c"
        var $36=HEAP[$35]; //@line 686 "bytesio.c"
        var $37=HEAP[$self_addr]; //@line 686 "bytesio.c"
        var $38=_bytesio_write($37, $36); //@line 686 "bytesio.c"
        HEAP[$result]=$38; //@line 686 "bytesio.c"
        var $39=HEAP[$result]; //@line 687 "bytesio.c"
        var $40=($39)==0; //@line 687 "bytesio.c"
        if ($40) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 687 "bytesio.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 688 "bytesio.c"
        __label__ = 27; break; //@line 688 "bytesio.c"
      case 7: // $bb6
        var $41=HEAP[$result]; //@line 689 "bytesio.c"
        var $42=(($41)&4294967295); //@line 689 "bytesio.c"
        var $43=HEAP[$42]; //@line 689 "bytesio.c"
        var $44=((($43) - 1)&4294967295); //@line 689 "bytesio.c"
        var $45=HEAP[$result]; //@line 689 "bytesio.c"
        var $46=(($45)&4294967295); //@line 689 "bytesio.c"
        HEAP[$46]=$44; //@line 689 "bytesio.c"
        var $47=HEAP[$result]; //@line 689 "bytesio.c"
        var $48=(($47)&4294967295); //@line 689 "bytesio.c"
        var $49=HEAP[$48]; //@line 689 "bytesio.c"
        var $50=((($49))|0)==0; //@line 689 "bytesio.c"
        if ($50) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 689 "bytesio.c"
      case 8: // $bb7
        var $51=HEAP[$result]; //@line 689 "bytesio.c"
        var $52=(($51+4)&4294967295); //@line 689 "bytesio.c"
        var $53=HEAP[$52]; //@line 689 "bytesio.c"
        var $54=(($53+24)&4294967295); //@line 689 "bytesio.c"
        var $55=HEAP[$54]; //@line 689 "bytesio.c"
        var $56=HEAP[$result]; //@line 689 "bytesio.c"
        FUNCTION_TABLE[$55]($56); //@line 689 "bytesio.c"
        __label__ = 9; break; //@line 689 "bytesio.c"
      case 9: // $bb8
        var $57=HEAP[$state_addr]; //@line 694 "bytesio.c"
        var $58=$57; //@line 694 "bytesio.c"
        var $59=(($58+12)&4294967295); //@line 694 "bytesio.c"
        var $60=(($59+4)&4294967295); //@line 694 "bytesio.c"
        var $61=HEAP[$60]; //@line 694 "bytesio.c"
        HEAP[$position_obj]=$61; //@line 694 "bytesio.c"
        var $62=HEAP[$position_obj]; //@line 695 "bytesio.c"
        var $63=(($62+4)&4294967295); //@line 695 "bytesio.c"
        var $64=HEAP[$63]; //@line 695 "bytesio.c"
        var $65=(($64+48)&4294967295); //@line 695 "bytesio.c"
        var $66=HEAP[$65]; //@line 695 "bytesio.c"
        var $67=($66)==0; //@line 695 "bytesio.c"
        if ($67) { __label__ = 12; break; } else { __label__ = 10; break; } //@line 695 "bytesio.c"
      case 10: // $bb9
        var $68=HEAP[$position_obj]; //@line 695 "bytesio.c"
        var $69=(($68+4)&4294967295); //@line 695 "bytesio.c"
        var $70=HEAP[$69]; //@line 695 "bytesio.c"
        var $71=(($70+84)&4294967295); //@line 695 "bytesio.c"
        var $72=HEAP[$71]; //@line 695 "bytesio.c"
        var $73=($72) & 131072; //@line 695 "bytesio.c"
        var $74=((($73))|0)==0; //@line 695 "bytesio.c"
        if ($74) { __label__ = 12; break; } else { __label__ = 11; break; } //@line 695 "bytesio.c"
      case 11: // $bb10
        var $75=HEAP[$position_obj]; //@line 695 "bytesio.c"
        var $76=(($75+4)&4294967295); //@line 695 "bytesio.c"
        var $77=HEAP[$76]; //@line 695 "bytesio.c"
        var $78=(($77+48)&4294967295); //@line 695 "bytesio.c"
        var $79=HEAP[$78]; //@line 695 "bytesio.c"
        var $80=(($79+152)&4294967295); //@line 695 "bytesio.c"
        var $81=HEAP[$80]; //@line 695 "bytesio.c"
        var $82=($81)==0; //@line 695 "bytesio.c"
        if ($82) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 695 "bytesio.c"
      case 12: // $bb11
        var $83=HEAP[$position_obj]; //@line 696 "bytesio.c"
        var $84=(($83+4)&4294967295); //@line 696 "bytesio.c"
        var $85=HEAP[$84]; //@line 696 "bytesio.c"
        var $86=(($85+12)&4294967295); //@line 696 "bytesio.c"
        var $87=HEAP[$86]; //@line 696 "bytesio.c"
        var $88=HEAP[_PyExc_TypeError]; //@line 696 "bytesio.c"
        var $89=_PyErr_Format($88, ((__str2288)&4294967295), $87); //@line 696 "bytesio.c"
        HEAP[$0]=0; //@line 699 "bytesio.c"
        __label__ = 27; break; //@line 699 "bytesio.c"
      case 13: // $bb12
        var $90=HEAP[_PyExc_OverflowError]; //@line 701 "bytesio.c"
        var $91=HEAP[$position_obj]; //@line 701 "bytesio.c"
        var $92=_PyNumber_AsSsize_t($91, $90); //@line 701 "bytesio.c"
        HEAP[$pos]=$92; //@line 701 "bytesio.c"
        var $93=HEAP[$pos]; //@line 702 "bytesio.c"
        var $94=((($93))|0)==-1; //@line 702 "bytesio.c"
        if ($94) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 702 "bytesio.c"
      case 14: // $bb13
        var $95=_PyErr_Occurred(); //@line 702 "bytesio.c"
        var $96=($95)!=0; //@line 702 "bytesio.c"
        if ($96) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 702 "bytesio.c"
      case 15: // $bb14
        HEAP[$0]=0; //@line 703 "bytesio.c"
        __label__ = 27; break; //@line 703 "bytesio.c"
      case 16: // $bb15
        var $97=HEAP[$pos]; //@line 704 "bytesio.c"
        var $98=((($97))|0) < 0; //@line 704 "bytesio.c"
        if ($98) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 704 "bytesio.c"
      case 17: // $bb16
        var $99=HEAP[_PyExc_ValueError]; //@line 705 "bytesio.c"
        _PyErr_SetString($99, ((__str2389)&4294967295)); //@line 705 "bytesio.c"
        HEAP[$0]=0; //@line 707 "bytesio.c"
        __label__ = 27; break; //@line 707 "bytesio.c"
      case 18: // $bb17
        var $100=HEAP[$self_addr]; //@line 709 "bytesio.c"
        var $101=(($100+12)&4294967295); //@line 709 "bytesio.c"
        var $102=HEAP[$pos]; //@line 709 "bytesio.c"
        HEAP[$101]=$102; //@line 709 "bytesio.c"
        var $103=HEAP[$state_addr]; //@line 712 "bytesio.c"
        var $104=$103; //@line 712 "bytesio.c"
        var $105=(($104+12)&4294967295); //@line 712 "bytesio.c"
        var $106=(($105+8)&4294967295); //@line 712 "bytesio.c"
        var $107=HEAP[$106]; //@line 712 "bytesio.c"
        HEAP[$dict]=$107; //@line 712 "bytesio.c"
        var $108=HEAP[$dict]; //@line 713 "bytesio.c"
        var $109=($108)!=(__Py_NoneStruct); //@line 713 "bytesio.c"
        if ($109) { __label__ = 19; break; } else { __label__ = 26; break; } //@line 713 "bytesio.c"
      case 19: // $bb18
        var $110=HEAP[$dict]; //@line 714 "bytesio.c"
        var $111=(($110+4)&4294967295); //@line 714 "bytesio.c"
        var $112=HEAP[$111]; //@line 714 "bytesio.c"
        var $113=(($112+84)&4294967295); //@line 714 "bytesio.c"
        var $114=HEAP[$113]; //@line 714 "bytesio.c"
        var $115=($114) & 536870912; //@line 714 "bytesio.c"
        var $116=((($115))|0)==0; //@line 714 "bytesio.c"
        if ($116) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 714 "bytesio.c"
      case 20: // $bb19
        var $117=HEAP[$dict]; //@line 715 "bytesio.c"
        var $118=(($117+4)&4294967295); //@line 715 "bytesio.c"
        var $119=HEAP[$118]; //@line 715 "bytesio.c"
        var $120=(($119+12)&4294967295); //@line 715 "bytesio.c"
        var $121=HEAP[$120]; //@line 715 "bytesio.c"
        var $122=HEAP[_PyExc_TypeError]; //@line 715 "bytesio.c"
        var $123=_PyErr_Format($122, ((__str2490)&4294967295), $121); //@line 715 "bytesio.c"
        HEAP[$0]=0; //@line 718 "bytesio.c"
        __label__ = 27; break; //@line 718 "bytesio.c"
      case 21: // $bb20
        var $124=HEAP[$self_addr]; //@line 720 "bytesio.c"
        var $125=(($124+24)&4294967295); //@line 720 "bytesio.c"
        var $126=HEAP[$125]; //@line 720 "bytesio.c"
        var $127=($126)!=0; //@line 720 "bytesio.c"
        if ($127) { __label__ = 22; break; } else { __label__ = 25; break; } //@line 720 "bytesio.c"
      case 22: // $bb21
        var $128=HEAP[$self_addr]; //@line 723 "bytesio.c"
        var $129=(($128+24)&4294967295); //@line 723 "bytesio.c"
        var $130=HEAP[$129]; //@line 723 "bytesio.c"
        var $131=HEAP[$dict]; //@line 723 "bytesio.c"
        var $132=_PyDict_Update($130, $131); //@line 723 "bytesio.c"
        var $133=((($132))|0) < 0; //@line 723 "bytesio.c"
        if ($133) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 723 "bytesio.c"
      case 23: // $bb22
        HEAP[$0]=0; //@line 724 "bytesio.c"
        __label__ = 27; break; //@line 724 "bytesio.c"
      case 24: // $bb23
        __label__ = 26; break; //@line 724 "bytesio.c"
      case 25: // $bb24
        var $134=HEAP[$dict]; //@line 727 "bytesio.c"
        var $135=(($134)&4294967295); //@line 727 "bytesio.c"
        var $136=HEAP[$135]; //@line 727 "bytesio.c"
        var $137=((($136) + 1)&4294967295); //@line 727 "bytesio.c"
        var $138=HEAP[$dict]; //@line 727 "bytesio.c"
        var $139=(($138)&4294967295); //@line 727 "bytesio.c"
        HEAP[$139]=$137; //@line 727 "bytesio.c"
        var $140=HEAP[$self_addr]; //@line 728 "bytesio.c"
        var $141=(($140+24)&4294967295); //@line 728 "bytesio.c"
        var $142=HEAP[$dict]; //@line 728 "bytesio.c"
        HEAP[$141]=$142; //@line 728 "bytesio.c"
        __label__ = 26; break; //@line 728 "bytesio.c"
      case 26: // $bb25
        var $143=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 732 "bytesio.c"
        var $144=((($143) + 1)&4294967295); //@line 732 "bytesio.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$144; //@line 732 "bytesio.c"
        HEAP[$0]=__Py_NoneStruct; //@line 732 "bytesio.c"
        __label__ = 27; break; //@line 732 "bytesio.c"
      case 27: // $bb26
        var $145=HEAP[$0]; //@line 677 "bytesio.c"
        HEAP[$retval]=$145; //@line 677 "bytesio.c"
        __label__ = 28; break; //@line 677 "bytesio.c"
      case 28: // $return
        var $retval27=HEAP[$retval]; //@line 677 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval27; //@line 677 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_dealloc($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $g=__stackBase__+4;
        var $_py_tmp=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $0=HEAP[$self_addr]; //@line 738 "bytesio.c"
        var $1=$0; //@line 738 "bytesio.c"
        var $2=(($1+-12)&4294967295); //@line 738 "bytesio.c"
        HEAP[$g]=$2; //@line 738 "bytesio.c"
        var $3=HEAP[$g]; //@line 738 "bytesio.c"
        var $4=(($3)&4294967295); //@line 738 "bytesio.c"
        var $5=(($4+8)&4294967295); //@line 738 "bytesio.c"
        var $6=HEAP[$5]; //@line 738 "bytesio.c"
        var $7=((($6))|0)==-2; //@line 738 "bytesio.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 738 "bytesio.c"
      case 1: // $bb
        ___assert_fail(((__str2591)&4294967295), ((__str167)&4294967295), 738, ((___PRETTY_FUNCTION___9218)&4294967295)); //@line 738 "bytesio.c"
        throw "Reached an unreachable! Original .ll line: 12841"; //@line 738 "bytesio.c"
      case 2: // $bb1
        var $8=HEAP[$g]; //@line 738 "bytesio.c"
        var $9=(($8)&4294967295); //@line 738 "bytesio.c"
        var $10=(($9+8)&4294967295); //@line 738 "bytesio.c"
        HEAP[$10]=-2; //@line 738 "bytesio.c"
        var $11=HEAP[$g]; //@line 738 "bytesio.c"
        var $12=(($11)&4294967295); //@line 738 "bytesio.c"
        var $13=(($12+4)&4294967295); //@line 738 "bytesio.c"
        var $14=HEAP[$13]; //@line 738 "bytesio.c"
        var $15=HEAP[$g]; //@line 738 "bytesio.c"
        var $16=(($15)&4294967295); //@line 738 "bytesio.c"
        var $17=(($16)&4294967295); //@line 738 "bytesio.c"
        var $18=HEAP[$17]; //@line 738 "bytesio.c"
        var $19=(($14)&4294967295); //@line 738 "bytesio.c"
        var $20=(($19)&4294967295); //@line 738 "bytesio.c"
        HEAP[$20]=$18; //@line 738 "bytesio.c"
        var $21=HEAP[$g]; //@line 738 "bytesio.c"
        var $22=(($21)&4294967295); //@line 738 "bytesio.c"
        var $23=(($22)&4294967295); //@line 738 "bytesio.c"
        var $24=HEAP[$23]; //@line 738 "bytesio.c"
        var $25=HEAP[$g]; //@line 738 "bytesio.c"
        var $26=(($25)&4294967295); //@line 738 "bytesio.c"
        var $27=(($26+4)&4294967295); //@line 738 "bytesio.c"
        var $28=HEAP[$27]; //@line 738 "bytesio.c"
        var $29=(($24)&4294967295); //@line 738 "bytesio.c"
        var $30=(($29+4)&4294967295); //@line 738 "bytesio.c"
        HEAP[$30]=$28; //@line 738 "bytesio.c"
        var $31=HEAP[$g]; //@line 738 "bytesio.c"
        var $32=(($31)&4294967295); //@line 738 "bytesio.c"
        var $33=(($32)&4294967295); //@line 738 "bytesio.c"
        HEAP[$33]=0; //@line 738 "bytesio.c"
        var $34=HEAP[$self_addr]; //@line 739 "bytesio.c"
        var $35=(($34+8)&4294967295); //@line 739 "bytesio.c"
        var $36=HEAP[$35]; //@line 739 "bytesio.c"
        var $37=($36)!=0; //@line 739 "bytesio.c"
        if ($37) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 739 "bytesio.c"
      case 3: // $bb2
        var $38=HEAP[$self_addr]; //@line 740 "bytesio.c"
        var $39=(($38+8)&4294967295); //@line 740 "bytesio.c"
        var $40=HEAP[$39]; //@line 740 "bytesio.c"
        _PyMem_Free($40); //@line 740 "bytesio.c"
        var $41=HEAP[$self_addr]; //@line 741 "bytesio.c"
        var $42=(($41+8)&4294967295); //@line 741 "bytesio.c"
        HEAP[$42]=0; //@line 741 "bytesio.c"
        __label__ = 4; break; //@line 741 "bytesio.c"
      case 4: // $bb3
        var $43=HEAP[$self_addr]; //@line 743 "bytesio.c"
        var $44=(($43+24)&4294967295); //@line 743 "bytesio.c"
        var $45=HEAP[$44]; //@line 743 "bytesio.c"
        var $46=($45)!=0; //@line 743 "bytesio.c"
        if ($46) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 743 "bytesio.c"
      case 5: // $bb4
        var $47=HEAP[$self_addr]; //@line 743 "bytesio.c"
        var $48=(($47+24)&4294967295); //@line 743 "bytesio.c"
        var $49=HEAP[$48]; //@line 743 "bytesio.c"
        HEAP[$_py_tmp]=$49; //@line 743 "bytesio.c"
        var $50=HEAP[$self_addr]; //@line 743 "bytesio.c"
        var $51=(($50+24)&4294967295); //@line 743 "bytesio.c"
        HEAP[$51]=0; //@line 743 "bytesio.c"
        var $52=HEAP[$_py_tmp]; //@line 743 "bytesio.c"
        var $53=(($52)&4294967295); //@line 743 "bytesio.c"
        var $54=HEAP[$53]; //@line 743 "bytesio.c"
        var $55=((($54) - 1)&4294967295); //@line 743 "bytesio.c"
        var $56=HEAP[$_py_tmp]; //@line 743 "bytesio.c"
        var $57=(($56)&4294967295); //@line 743 "bytesio.c"
        HEAP[$57]=$55; //@line 743 "bytesio.c"
        var $58=HEAP[$_py_tmp]; //@line 743 "bytesio.c"
        var $59=(($58)&4294967295); //@line 743 "bytesio.c"
        var $60=HEAP[$59]; //@line 743 "bytesio.c"
        var $61=((($60))|0)==0; //@line 743 "bytesio.c"
        if ($61) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 743 "bytesio.c"
      case 6: // $bb5
        var $62=HEAP[$_py_tmp]; //@line 743 "bytesio.c"
        var $63=(($62+4)&4294967295); //@line 743 "bytesio.c"
        var $64=HEAP[$63]; //@line 743 "bytesio.c"
        var $65=(($64+24)&4294967295); //@line 743 "bytesio.c"
        var $66=HEAP[$65]; //@line 743 "bytesio.c"
        var $67=HEAP[$_py_tmp]; //@line 743 "bytesio.c"
        FUNCTION_TABLE[$66]($67); //@line 743 "bytesio.c"
        __label__ = 7; break; //@line 743 "bytesio.c"
      case 7: // $bb6
        var $68=HEAP[$self_addr]; //@line 744 "bytesio.c"
        var $69=(($68+28)&4294967295); //@line 744 "bytesio.c"
        var $70=HEAP[$69]; //@line 744 "bytesio.c"
        var $71=($70)!=0; //@line 744 "bytesio.c"
        if ($71) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 744 "bytesio.c"
      case 8: // $bb7
        var $72=HEAP[$self_addr]; //@line 745 "bytesio.c"
        var $73=$72; //@line 745 "bytesio.c"
        _PyObject_ClearWeakRefs($73); //@line 745 "bytesio.c"
        __label__ = 9; break; //@line 745 "bytesio.c"
      case 9: // $bb8
        var $74=HEAP[$self_addr]; //@line 746 "bytesio.c"
        var $75=$74; //@line 746 "bytesio.c"
        var $76=(($75+4)&4294967295); //@line 746 "bytesio.c"
        var $77=HEAP[$76]; //@line 746 "bytesio.c"
        var $78=(($77+160)&4294967295); //@line 746 "bytesio.c"
        var $79=HEAP[$78]; //@line 746 "bytesio.c"
        var $80=HEAP[$self_addr]; //@line 746 "bytesio.c"
        var $81=$80; //@line 746 "bytesio.c"
        FUNCTION_TABLE[$79]($81); //@line 746 "bytesio.c"
        __label__ = 10; break; //@line 747 "bytesio.c"
      case 10: // $return
        STACKTOP = __stackBase__;
        return; //@line 747 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_new($type, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $type_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kwds_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $self=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$type_addr]=$type;
        HEAP[$args_addr]=$args;
        HEAP[$kwds_addr]=$kwds;
        var $1=HEAP[$type_addr]; //@line 754 "bytesio.c"
        var $2=($1)==0; //@line 754 "bytesio.c"
        if ($2) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 754 "bytesio.c"
      case 1: // $bb
        var $3=HEAP[$type_addr]; //@line 754 "bytesio.c"
        var $4=(($3+152)&4294967295); //@line 754 "bytesio.c"
        var $5=HEAP[$4]; //@line 754 "bytesio.c"
        var $6=($5)==0; //@line 754 "bytesio.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 754 "bytesio.c"
      case 2: // $bb1
        ___assert_fail(((__str2692)&4294967295), ((__str167)&4294967295), 754, ((___PRETTY_FUNCTION___9255)&4294967295)); //@line 754 "bytesio.c"
        throw "Reached an unreachable! Original .ll line: 12988"; //@line 754 "bytesio.c"
      case 3: // $bb2
        var $7=HEAP[$type_addr]; //@line 755 "bytesio.c"
        var $8=(($7+152)&4294967295); //@line 755 "bytesio.c"
        var $9=HEAP[$8]; //@line 755 "bytesio.c"
        var $10=HEAP[$type_addr]; //@line 755 "bytesio.c"
        var $11=FUNCTION_TABLE[$9]($10, 0); //@line 755 "bytesio.c"
        var $12=$11; //@line 755 "bytesio.c"
        HEAP[$self]=$12; //@line 755 "bytesio.c"
        var $13=HEAP[$self]; //@line 756 "bytesio.c"
        var $14=($13)==0; //@line 756 "bytesio.c"
        if ($14) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 756 "bytesio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 757 "bytesio.c"
        __label__ = 10; break; //@line 757 "bytesio.c"
      case 5: // $bb4
        var $15=_PyMem_Malloc(0); //@line 762 "bytesio.c"
        var $16=HEAP[$self]; //@line 762 "bytesio.c"
        var $17=(($16+8)&4294967295); //@line 762 "bytesio.c"
        HEAP[$17]=$15; //@line 762 "bytesio.c"
        var $18=HEAP[$self]; //@line 763 "bytesio.c"
        var $19=(($18+8)&4294967295); //@line 763 "bytesio.c"
        var $20=HEAP[$19]; //@line 763 "bytesio.c"
        var $21=($20)==0; //@line 763 "bytesio.c"
        if ($21) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 763 "bytesio.c"
      case 6: // $bb5
        var $22=HEAP[$self]; //@line 764 "bytesio.c"
        var $23=$22; //@line 764 "bytesio.c"
        var $24=(($23)&4294967295); //@line 764 "bytesio.c"
        var $25=HEAP[$24]; //@line 764 "bytesio.c"
        var $26=((($25) - 1)&4294967295); //@line 764 "bytesio.c"
        var $27=(($23)&4294967295); //@line 764 "bytesio.c"
        HEAP[$27]=$26; //@line 764 "bytesio.c"
        var $28=(($23)&4294967295); //@line 764 "bytesio.c"
        var $29=HEAP[$28]; //@line 764 "bytesio.c"
        var $30=((($29))|0)==0; //@line 764 "bytesio.c"
        if ($30) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 764 "bytesio.c"
      case 7: // $bb6
        var $31=HEAP[$self]; //@line 764 "bytesio.c"
        var $32=$31; //@line 764 "bytesio.c"
        var $33=(($32+4)&4294967295); //@line 764 "bytesio.c"
        var $34=HEAP[$33]; //@line 764 "bytesio.c"
        var $35=(($34+24)&4294967295); //@line 764 "bytesio.c"
        var $36=HEAP[$35]; //@line 764 "bytesio.c"
        var $37=HEAP[$self]; //@line 764 "bytesio.c"
        var $38=$37; //@line 764 "bytesio.c"
        FUNCTION_TABLE[$36]($38); //@line 764 "bytesio.c"
        __label__ = 8; break; //@line 764 "bytesio.c"
      case 8: // $bb7
        var $39=_PyErr_NoMemory(); //@line 765 "bytesio.c"
        HEAP[$0]=$39; //@line 765 "bytesio.c"
        __label__ = 10; break; //@line 765 "bytesio.c"
      case 9: // $bb8
        var $40=HEAP[$self]; //@line 768 "bytesio.c"
        var $41=$40; //@line 768 "bytesio.c"
        HEAP[$0]=$41; //@line 768 "bytesio.c"
        __label__ = 10; break; //@line 768 "bytesio.c"
      case 10: // $bb9
        var $42=HEAP[$0]; //@line 757 "bytesio.c"
        HEAP[$retval]=$42; //@line 757 "bytesio.c"
        __label__ = 11; break; //@line 757 "bytesio.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 757 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 757 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_init($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kwds_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $kwlist=__stackBase__+20;
        var $initvalue=__stackBase__+28;
        var $res=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$kwds_addr]=$kwds;
        var $1=(($kwlist)&4294967295); //@line 774 "bytesio.c"
        var $2=HEAP[((_C_82_9290)&4294967295)]; //@line 774 "bytesio.c"
        HEAP[$1]=$2; //@line 774 "bytesio.c"
        var $3=(($kwlist+4)&4294967295); //@line 774 "bytesio.c"
        var $4=HEAP[((_C_82_9290+4)&4294967295)]; //@line 774 "bytesio.c"
        HEAP[$3]=$4; //@line 774 "bytesio.c"
        HEAP[$initvalue]=0; //@line 775 "bytesio.c"
        var $5=HEAP[$args_addr]; //@line 777 "bytesio.c"
        var $6=HEAP[$kwds_addr]; //@line 777 "bytesio.c"
        var $kwlist1=$kwlist; //@line 777 "bytesio.c"
        var $7=_PyArg_ParseTupleAndKeywords($5, $6, ((__str2894)&4294967295), $kwlist1, $initvalue); //@line 777 "bytesio.c"
        var $8=((($7))|0)==0; //@line 777 "bytesio.c"
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 777 "bytesio.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 779 "bytesio.c"
        __label__ = 10; break; //@line 779 "bytesio.c"
      case 2: // $bb2
        var $9=HEAP[$self_addr]; //@line 782 "bytesio.c"
        var $10=(($9+16)&4294967295); //@line 782 "bytesio.c"
        HEAP[$10]=0; //@line 782 "bytesio.c"
        var $11=HEAP[$self_addr]; //@line 783 "bytesio.c"
        var $12=(($11+12)&4294967295); //@line 783 "bytesio.c"
        HEAP[$12]=0; //@line 783 "bytesio.c"
        var $13=HEAP[$initvalue]; //@line 785 "bytesio.c"
        var $14=($13)!=0; //@line 785 "bytesio.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 9; break; } //@line 785 "bytesio.c"
      case 3: // $bb3
        var $15=HEAP[$initvalue]; //@line 785 "bytesio.c"
        var $16=($15)!=(__Py_NoneStruct); //@line 785 "bytesio.c"
        if ($16) { __label__ = 4; break; } else { __label__ = 9; break; } //@line 785 "bytesio.c"
      case 4: // $bb4
        var $17=HEAP[$initvalue]; //@line 787 "bytesio.c"
        var $18=HEAP[$self_addr]; //@line 787 "bytesio.c"
        var $19=_bytesio_write($18, $17); //@line 787 "bytesio.c"
        HEAP[$res]=$19; //@line 787 "bytesio.c"
        var $20=HEAP[$res]; //@line 788 "bytesio.c"
        var $21=($20)==0; //@line 788 "bytesio.c"
        if ($21) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 788 "bytesio.c"
      case 5: // $bb5
        HEAP[$0]=-1; //@line 789 "bytesio.c"
        __label__ = 10; break; //@line 789 "bytesio.c"
      case 6: // $bb6
        var $22=HEAP[$res]; //@line 790 "bytesio.c"
        var $23=(($22)&4294967295); //@line 790 "bytesio.c"
        var $24=HEAP[$23]; //@line 790 "bytesio.c"
        var $25=((($24) - 1)&4294967295); //@line 790 "bytesio.c"
        var $26=HEAP[$res]; //@line 790 "bytesio.c"
        var $27=(($26)&4294967295); //@line 790 "bytesio.c"
        HEAP[$27]=$25; //@line 790 "bytesio.c"
        var $28=HEAP[$res]; //@line 790 "bytesio.c"
        var $29=(($28)&4294967295); //@line 790 "bytesio.c"
        var $30=HEAP[$29]; //@line 790 "bytesio.c"
        var $31=((($30))|0)==0; //@line 790 "bytesio.c"
        if ($31) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 790 "bytesio.c"
      case 7: // $bb7
        var $32=HEAP[$res]; //@line 790 "bytesio.c"
        var $33=(($32+4)&4294967295); //@line 790 "bytesio.c"
        var $34=HEAP[$33]; //@line 790 "bytesio.c"
        var $35=(($34+24)&4294967295); //@line 790 "bytesio.c"
        var $36=HEAP[$35]; //@line 790 "bytesio.c"
        var $37=HEAP[$res]; //@line 790 "bytesio.c"
        FUNCTION_TABLE[$36]($37); //@line 790 "bytesio.c"
        __label__ = 8; break; //@line 790 "bytesio.c"
      case 8: // $bb8
        var $38=HEAP[$self_addr]; //@line 791 "bytesio.c"
        var $39=(($38+12)&4294967295); //@line 791 "bytesio.c"
        HEAP[$39]=0; //@line 791 "bytesio.c"
        __label__ = 9; break; //@line 791 "bytesio.c"
      case 9: // $bb9
        HEAP[$0]=0; //@line 794 "bytesio.c"
        __label__ = 10; break; //@line 794 "bytesio.c"
      case 10: // $bb10
        var $40=HEAP[$0]; //@line 779 "bytesio.c"
        HEAP[$retval]=$40; //@line 779 "bytesio.c"
        __label__ = 11; break; //@line 779 "bytesio.c"
      case 11: // $return
        var $retval11=HEAP[$retval]; //@line 779 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 779 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_traverse($self, $visit, $arg) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $visit_addr=__stackBase__+4;
        var $arg_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $vret=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$visit_addr]=$visit;
        HEAP[$arg_addr]=$arg;
        var $1=HEAP[$self_addr]; //@line 800 "bytesio.c"
        var $2=(($1+24)&4294967295); //@line 800 "bytesio.c"
        var $3=HEAP[$2]; //@line 800 "bytesio.c"
        var $4=($3)!=0; //@line 800 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 800 "bytesio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 800 "bytesio.c"
        var $6=(($5+24)&4294967295); //@line 800 "bytesio.c"
        var $7=HEAP[$6]; //@line 800 "bytesio.c"
        var $8=HEAP[$visit_addr]; //@line 800 "bytesio.c"
        var $9=HEAP[$arg_addr]; //@line 800 "bytesio.c"
        var $10=FUNCTION_TABLE[$8]($7, $9); //@line 800 "bytesio.c"
        HEAP[$vret]=$10; //@line 800 "bytesio.c"
        var $11=HEAP[$vret]; //@line 800 "bytesio.c"
        var $12=((($11))|0)!=0; //@line 800 "bytesio.c"
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 800 "bytesio.c"
      case 2: // $bb1
        var $13=HEAP[$vret]; //@line 800 "bytesio.c"
        HEAP[$0]=$13; //@line 800 "bytesio.c"
        __label__ = 4; break; //@line 800 "bytesio.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 801 "bytesio.c"
        __label__ = 4; break; //@line 801 "bytesio.c"
      case 4: // $bb3
        var $14=HEAP[$0]; //@line 800 "bytesio.c"
        HEAP[$retval]=$14; //@line 800 "bytesio.c"
        __label__ = 5; break; //@line 800 "bytesio.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 800 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 800 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_clear($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_py_tmp=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 807 "bytesio.c"
        var $2=(($1+24)&4294967295); //@line 807 "bytesio.c"
        var $3=HEAP[$2]; //@line 807 "bytesio.c"
        var $4=($3)!=0; //@line 807 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 807 "bytesio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 807 "bytesio.c"
        var $6=(($5+24)&4294967295); //@line 807 "bytesio.c"
        var $7=HEAP[$6]; //@line 807 "bytesio.c"
        HEAP[$_py_tmp]=$7; //@line 807 "bytesio.c"
        var $8=HEAP[$self_addr]; //@line 807 "bytesio.c"
        var $9=(($8+24)&4294967295); //@line 807 "bytesio.c"
        HEAP[$9]=0; //@line 807 "bytesio.c"
        var $10=HEAP[$_py_tmp]; //@line 807 "bytesio.c"
        var $11=(($10)&4294967295); //@line 807 "bytesio.c"
        var $12=HEAP[$11]; //@line 807 "bytesio.c"
        var $13=((($12) - 1)&4294967295); //@line 807 "bytesio.c"
        var $14=HEAP[$_py_tmp]; //@line 807 "bytesio.c"
        var $15=(($14)&4294967295); //@line 807 "bytesio.c"
        HEAP[$15]=$13; //@line 807 "bytesio.c"
        var $16=HEAP[$_py_tmp]; //@line 807 "bytesio.c"
        var $17=(($16)&4294967295); //@line 807 "bytesio.c"
        var $18=HEAP[$17]; //@line 807 "bytesio.c"
        var $19=((($18))|0)==0; //@line 807 "bytesio.c"
        if ($19) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 807 "bytesio.c"
      case 2: // $bb1
        var $20=HEAP[$_py_tmp]; //@line 807 "bytesio.c"
        var $21=(($20+4)&4294967295); //@line 807 "bytesio.c"
        var $22=HEAP[$21]; //@line 807 "bytesio.c"
        var $23=(($22+24)&4294967295); //@line 807 "bytesio.c"
        var $24=HEAP[$23]; //@line 807 "bytesio.c"
        var $25=HEAP[$_py_tmp]; //@line 807 "bytesio.c"
        FUNCTION_TABLE[$24]($25); //@line 807 "bytesio.c"
        __label__ = 3; break; //@line 807 "bytesio.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 808 "bytesio.c"
        var $26=HEAP[$0]; //@line 808 "bytesio.c"
        HEAP[$retval]=$26; //@line 808 "bytesio.c"
        __label__ = 4; break; //@line 808 "bytesio.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 808 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 808 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __PyFileIO_closed($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 69 "fileio.c"
        var $2=$1; //@line 69 "fileio.c"
        var $3=(($2+8)&4294967295); //@line 69 "fileio.c"
        var $4=HEAP[$3]; //@line 69 "fileio.c"
        var $5=((($4))|0) < 0; //@line 69 "fileio.c"
        var $6=unSign(($5), 1, 0); //@line 69 "fileio.c"
        HEAP[$0]=$6; //@line 69 "fileio.c"
        var $7=HEAP[$0]; //@line 69 "fileio.c"
        HEAP[$retval]=$7; //@line 69 "fileio.c"
        __label__ = 1; break; //@line 69 "fileio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 69 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 69 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _internal_close($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $err=__stackBase__+12;
        var $save_errno=__stackBase__+16;
        var $fd=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$err]=0; //@line 81 "fileio.c"
        HEAP[$save_errno]=0; //@line 82 "fileio.c"
        var $1=HEAP[$self_addr]; //@line 83 "fileio.c"
        var $2=(($1+8)&4294967295); //@line 83 "fileio.c"
        var $3=HEAP[$2]; //@line 83 "fileio.c"
        var $4=((($3))|0) >= 0; //@line 83 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 83 "fileio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 84 "fileio.c"
        var $6=(($5+8)&4294967295); //@line 84 "fileio.c"
        var $7=HEAP[$6]; //@line 84 "fileio.c"
        HEAP[$fd]=$7; //@line 84 "fileio.c"
        var $8=HEAP[$self_addr]; //@line 85 "fileio.c"
        var $9=(($8+8)&4294967295); //@line 85 "fileio.c"
        HEAP[$9]=-1; //@line 85 "fileio.c"
        var $10=HEAP[$fd]; //@line 89 "fileio.c"
        var $11=_close($10); //@line 89 "fileio.c"
        HEAP[$err]=$11; //@line 89 "fileio.c"
        var $12=HEAP[$err]; //@line 90 "fileio.c"
        var $13=((($12))|0) < 0; //@line 90 "fileio.c"
        if ($13) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 90 "fileio.c"
      case 2: // $bb1
        var $14=___errno_location(); //@line 91 "fileio.c"
        var $15=HEAP[$14]; //@line 91 "fileio.c"
        HEAP[$save_errno]=$15; //@line 91 "fileio.c"
        __label__ = 3; break; //@line 91 "fileio.c"
      case 3: // $bb2
        var $16=HEAP[$err]; //@line 98 "fileio.c"
        var $17=((($16))|0) < 0; //@line 98 "fileio.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 98 "fileio.c"
      case 4: // $bb3
        var $18=___errno_location(); //@line 99 "fileio.c"
        var $19=HEAP[$save_errno]; //@line 99 "fileio.c"
        HEAP[$18]=$19; //@line 99 "fileio.c"
        var $20=HEAP[_PyExc_IOError]; //@line 100 "fileio.c"
        var $21=_PyErr_SetFromErrno($20); //@line 100 "fileio.c"
        HEAP[$0]=-1; //@line 101 "fileio.c"
        __label__ = 6; break; //@line 101 "fileio.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 103 "fileio.c"
        __label__ = 6; break; //@line 103 "fileio.c"
      case 6: // $bb5
        var $22=HEAP[$0]; //@line 101 "fileio.c"
        HEAP[$retval]=$22; //@line 101 "fileio.c"
        __label__ = 7; break; //@line 101 "fileio.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 101 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 101 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_close($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 109 "fileio.c"
        var $2=(($1+12)&4294967295); //@line 109 "fileio.c"
        var $3=HEAP[$2]; //@line 109 "fileio.c"
        var $4=($3) << 27; //@line 109 "fileio.c"
        var $5=((($4))>>>0) >>> 31; //@line 109 "fileio.c"
        var $6=((($5)) & 1); //@line 109 "fileio.c"
        var $7=reSign(($6), 1, 0)==0; //@line 109 "fileio.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 109 "fileio.c"
      case 1: // $bb
        var $8=HEAP[$self_addr]; //@line 110 "fileio.c"
        var $9=(($8+8)&4294967295); //@line 110 "fileio.c"
        HEAP[$9]=-1; //@line 110 "fileio.c"
        var $10=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 111 "fileio.c"
        var $11=((($10) + 1)&4294967295); //@line 111 "fileio.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$11; //@line 111 "fileio.c"
        HEAP[$0]=__Py_NoneStruct; //@line 111 "fileio.c"
        __label__ = 5; break; //@line 111 "fileio.c"
      case 2: // $bb1
        var $12=___errno_location(); //@line 113 "fileio.c"
        var $13=HEAP[$self_addr]; //@line 113 "fileio.c"
        var $14=_internal_close($13); //@line 113 "fileio.c"
        HEAP[$12]=$14; //@line 113 "fileio.c"
        var $15=___errno_location(); //@line 114 "fileio.c"
        var $16=HEAP[$15]; //@line 114 "fileio.c"
        var $17=((($16))|0) < 0; //@line 114 "fileio.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 114 "fileio.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 115 "fileio.c"
        __label__ = 5; break; //@line 115 "fileio.c"
      case 4: // $bb3
        var $18=HEAP[$self_addr]; //@line 117 "fileio.c"
        var $19=__PyObject_CallMethod_SizeT(_PyRawIOBase_Type, ((__str117)&4294967295), ((__str1118)&4294967295), $18); //@line 117 "fileio.c"
        HEAP[$0]=$19; //@line 117 "fileio.c"
        __label__ = 5; break; //@line 117 "fileio.c"
      case 5: // $bb4
        var $20=HEAP[$0]; //@line 111 "fileio.c"
        HEAP[$retval]=$20; //@line 111 "fileio.c"
        __label__ = 6; break; //@line 111 "fileio.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 111 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 111 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_new($type, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $type_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kwds_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $self=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$type_addr]=$type;
        HEAP[$args_addr]=$args;
        HEAP[$kwds_addr]=$kwds;
        var $1=HEAP[$type_addr]; //@line 126 "fileio.c"
        var $2=($1)==0; //@line 126 "fileio.c"
        if ($2) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 126 "fileio.c"
      case 1: // $bb
        var $3=HEAP[$type_addr]; //@line 126 "fileio.c"
        var $4=(($3+152)&4294967295); //@line 126 "fileio.c"
        var $5=HEAP[$4]; //@line 126 "fileio.c"
        var $6=($5)==0; //@line 126 "fileio.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 126 "fileio.c"
      case 2: // $bb1
        ___assert_fail(((__str2119)&4294967295), ((__str3120)&4294967295), 126, ((___PRETTY_FUNCTION___8576)&4294967295)); //@line 126 "fileio.c"
        throw "Reached an unreachable! Original .ll line: 13488"; //@line 126 "fileio.c"
      case 3: // $bb2
        var $7=HEAP[$type_addr]; //@line 128 "fileio.c"
        var $8=(($7+152)&4294967295); //@line 128 "fileio.c"
        var $9=HEAP[$8]; //@line 128 "fileio.c"
        var $10=HEAP[$type_addr]; //@line 128 "fileio.c"
        var $11=FUNCTION_TABLE[$9]($10, 0); //@line 128 "fileio.c"
        var $12=$11; //@line 128 "fileio.c"
        HEAP[$self]=$12; //@line 128 "fileio.c"
        var $13=HEAP[$self]; //@line 129 "fileio.c"
        var $14=($13)!=0; //@line 129 "fileio.c"
        if ($14) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 129 "fileio.c"
      case 4: // $bb3
        var $15=HEAP[$self]; //@line 130 "fileio.c"
        var $16=(($15+8)&4294967295); //@line 130 "fileio.c"
        HEAP[$16]=-1; //@line 130 "fileio.c"
        var $17=HEAP[$self]; //@line 131 "fileio.c"
        var $18=(($17+12)&4294967295); //@line 131 "fileio.c"
        var $19=HEAP[$18]; //@line 131 "fileio.c"
        var $20=($19) & -2; //@line 131 "fileio.c"
        HEAP[$18]=$20; //@line 131 "fileio.c"
        var $21=HEAP[$self]; //@line 132 "fileio.c"
        var $22=(($21+12)&4294967295); //@line 132 "fileio.c"
        var $23=HEAP[$22]; //@line 132 "fileio.c"
        var $24=($23) & -3; //@line 132 "fileio.c"
        HEAP[$22]=$24; //@line 132 "fileio.c"
        var $25=HEAP[$self]; //@line 133 "fileio.c"
        var $26=(($25+12)&4294967295); //@line 133 "fileio.c"
        var $27=HEAP[$26]; //@line 133 "fileio.c"
        var $28=($27) & -13; //@line 133 "fileio.c"
        var $29=($28) | 12; //@line 133 "fileio.c"
        HEAP[$26]=$29; //@line 133 "fileio.c"
        var $30=HEAP[$self]; //@line 134 "fileio.c"
        var $31=(($30+12)&4294967295); //@line 134 "fileio.c"
        var $32=HEAP[$31]; //@line 134 "fileio.c"
        var $33=($32) & -17; //@line 134 "fileio.c"
        var $34=($33) | 16; //@line 134 "fileio.c"
        HEAP[$31]=$34; //@line 134 "fileio.c"
        var $35=HEAP[$self]; //@line 135 "fileio.c"
        var $36=(($35+16)&4294967295); //@line 135 "fileio.c"
        HEAP[$36]=0; //@line 135 "fileio.c"
        __label__ = 5; break; //@line 135 "fileio.c"
      case 5: // $bb4
        var $37=HEAP[$self]; //@line 138 "fileio.c"
        var $38=$37; //@line 138 "fileio.c"
        HEAP[$0]=$38; //@line 138 "fileio.c"
        var $39=HEAP[$0]; //@line 138 "fileio.c"
        HEAP[$retval]=$39; //@line 138 "fileio.c"
        __label__ = 6; break; //@line 138 "fileio.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 138 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 138 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _dircheck($self, $name) {
    var __stackBase__  = STACKTOP; STACKTOP += 120; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 120);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $name_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $buf=__stackBase__+16;
        var $msg=__stackBase__+112;
        var $exc=__stackBase__+116;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$name_addr]=$name;
        var $1=HEAP[$self_addr]; //@line 150 "fileio.c"
        var $2=(($1+8)&4294967295); //@line 150 "fileio.c"
        var $3=HEAP[$2]; //@line 150 "fileio.c"
        var $4=((($3))|0) < 0; //@line 150 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 150 "fileio.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 151 "fileio.c"
        __label__ = 11; break; //@line 151 "fileio.c"
      case 2: // $bb1
        var $5=HEAP[$self_addr]; //@line 152 "fileio.c"
        var $6=(($5+8)&4294967295); //@line 152 "fileio.c"
        var $7=HEAP[$6]; //@line 152 "fileio.c"
        var $8=___01fstat64_($7, $buf); //@line 152 "fileio.c"
        var $9=((($8))|0)==0; //@line 152 "fileio.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 10; break; } //@line 152 "fileio.c"
      case 3: // $bb2
        var $10=(($buf+16)&4294967295); //@line 152 "fileio.c"
        var $11=HEAP[$10]; //@line 152 "fileio.c"
        var $12=($11) & 61440; //@line 152 "fileio.c"
        var $13=((($12))|0)==16384; //@line 152 "fileio.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 10; break; } //@line 152 "fileio.c"
      case 4: // $bb3
        var $14=_strerror(21); //@line 153 "fileio.c"
        HEAP[$msg]=$14; //@line 153 "fileio.c"
        var $15=HEAP[$self_addr]; //@line 155 "fileio.c"
        var $16=_internal_close($15); //@line 155 "fileio.c"
        var $17=((($16))|0)!=0; //@line 155 "fileio.c"
        if ($17) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 155 "fileio.c"
      case 5: // $bb4
        HEAP[$0]=-1; //@line 156 "fileio.c"
        __label__ = 11; break; //@line 156 "fileio.c"
      case 6: // $bb5
        var $18=HEAP[_PyExc_IOError]; //@line 158 "fileio.c"
        var $19=HEAP[$msg]; //@line 158 "fileio.c"
        var $20=HEAP[$name_addr]; //@line 158 "fileio.c"
        var $21=__PyObject_CallFunction_SizeT($18, ((__str4121)&4294967295), 21, $19, $20); //@line 158 "fileio.c"
        HEAP[$exc]=$21; //@line 158 "fileio.c"
        var $22=HEAP[_PyExc_IOError]; //@line 160 "fileio.c"
        var $23=HEAP[$exc]; //@line 160 "fileio.c"
        _PyErr_SetObject($22, $23); //@line 160 "fileio.c"
        var $24=HEAP[$exc]; //@line 161 "fileio.c"
        var $25=($24)!=0; //@line 161 "fileio.c"
        if ($25) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 161 "fileio.c"
      case 7: // $bb6
        var $26=HEAP[$exc]; //@line 161 "fileio.c"
        var $27=(($26)&4294967295); //@line 161 "fileio.c"
        var $28=HEAP[$27]; //@line 161 "fileio.c"
        var $29=((($28) - 1)&4294967295); //@line 161 "fileio.c"
        var $30=HEAP[$exc]; //@line 161 "fileio.c"
        var $31=(($30)&4294967295); //@line 161 "fileio.c"
        HEAP[$31]=$29; //@line 161 "fileio.c"
        var $32=HEAP[$exc]; //@line 161 "fileio.c"
        var $33=(($32)&4294967295); //@line 161 "fileio.c"
        var $34=HEAP[$33]; //@line 161 "fileio.c"
        var $35=((($34))|0)==0; //@line 161 "fileio.c"
        if ($35) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 161 "fileio.c"
      case 8: // $bb7
        var $36=HEAP[$exc]; //@line 161 "fileio.c"
        var $37=(($36+4)&4294967295); //@line 161 "fileio.c"
        var $38=HEAP[$37]; //@line 161 "fileio.c"
        var $39=(($38+24)&4294967295); //@line 161 "fileio.c"
        var $40=HEAP[$39]; //@line 161 "fileio.c"
        var $41=HEAP[$exc]; //@line 161 "fileio.c"
        FUNCTION_TABLE[$40]($41); //@line 161 "fileio.c"
        __label__ = 9; break; //@line 161 "fileio.c"
      case 9: // $bb8
        HEAP[$0]=-1; //@line 162 "fileio.c"
        __label__ = 11; break; //@line 162 "fileio.c"
      case 10: // $bb9
        HEAP[$0]=0; //@line 165 "fileio.c"
        __label__ = 11; break; //@line 165 "fileio.c"
      case 11: // $bb10
        var $42=HEAP[$0]; //@line 151 "fileio.c"
        HEAP[$retval]=$42; //@line 151 "fileio.c"
        __label__ = 12; break; //@line 151 "fileio.c"
      case 12: // $return
        var $retval11=HEAP[$retval]; //@line 151 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 151 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _check_fd($fd) {
    var __stackBase__  = STACKTOP; STACKTOP += 116; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 116);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $fd_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $buf=__stackBase__+12;
        var $exc=__stackBase__+108;
        var $msg=__stackBase__+112;
        var $_alloca_point_=0;
        HEAP[$fd_addr]=$fd;
        var $1=HEAP[$fd_addr]; //@line 173 "fileio.c"
        var $2=___01fstat64_($1, $buf); //@line 173 "fileio.c"
        var $3=((($2))|0) < 0; //@line 173 "fileio.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 6; break; } //@line 173 "fileio.c"
      case 1: // $bb
        var $4=___errno_location(); //@line 173 "fileio.c"
        var $5=HEAP[$4]; //@line 173 "fileio.c"
        var $6=((($5))|0)==9; //@line 173 "fileio.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 6; break; } //@line 173 "fileio.c"
      case 2: // $bb1
        var $7=_strerror(9); //@line 175 "fileio.c"
        HEAP[$msg]=$7; //@line 175 "fileio.c"
        var $8=HEAP[_PyExc_OSError]; //@line 176 "fileio.c"
        var $9=HEAP[$msg]; //@line 176 "fileio.c"
        var $10=__PyObject_CallFunction_SizeT($8, ((__str5122)&4294967295), 9, $9); //@line 176 "fileio.c"
        HEAP[$exc]=$10; //@line 176 "fileio.c"
        var $11=HEAP[_PyExc_OSError]; //@line 178 "fileio.c"
        var $12=HEAP[$exc]; //@line 178 "fileio.c"
        _PyErr_SetObject($11, $12); //@line 178 "fileio.c"
        var $13=HEAP[$exc]; //@line 179 "fileio.c"
        var $14=($13)!=0; //@line 179 "fileio.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 179 "fileio.c"
      case 3: // $bb2
        var $15=HEAP[$exc]; //@line 179 "fileio.c"
        var $16=(($15)&4294967295); //@line 179 "fileio.c"
        var $17=HEAP[$16]; //@line 179 "fileio.c"
        var $18=((($17) - 1)&4294967295); //@line 179 "fileio.c"
        var $19=HEAP[$exc]; //@line 179 "fileio.c"
        var $20=(($19)&4294967295); //@line 179 "fileio.c"
        HEAP[$20]=$18; //@line 179 "fileio.c"
        var $21=HEAP[$exc]; //@line 179 "fileio.c"
        var $22=(($21)&4294967295); //@line 179 "fileio.c"
        var $23=HEAP[$22]; //@line 179 "fileio.c"
        var $24=((($23))|0)==0; //@line 179 "fileio.c"
        if ($24) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 179 "fileio.c"
      case 4: // $bb3
        var $25=HEAP[$exc]; //@line 179 "fileio.c"
        var $26=(($25+4)&4294967295); //@line 179 "fileio.c"
        var $27=HEAP[$26]; //@line 179 "fileio.c"
        var $28=(($27+24)&4294967295); //@line 179 "fileio.c"
        var $29=HEAP[$28]; //@line 179 "fileio.c"
        var $30=HEAP[$exc]; //@line 179 "fileio.c"
        FUNCTION_TABLE[$29]($30); //@line 179 "fileio.c"
        __label__ = 5; break; //@line 179 "fileio.c"
      case 5: // $bb4
        HEAP[$0]=-1; //@line 180 "fileio.c"
        __label__ = 7; break; //@line 180 "fileio.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 183 "fileio.c"
        __label__ = 7; break; //@line 183 "fileio.c"
      case 7: // $bb6
        var $31=HEAP[$0]; //@line 180 "fileio.c"
        HEAP[$retval]=$31; //@line 180 "fileio.c"
        __label__ = 8; break; //@line 180 "fileio.c"
      case 8: // $return
        var $retval7=HEAP[$retval]; //@line 180 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 180 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_init($oself, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 88; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 88);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $oself_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kwds_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $self=__stackBase__+20;
        var $name=__stackBase__+24;
        var $nameobj=__stackBase__+28;
        var $stringobj=__stackBase__+32;
        var $mode=__stackBase__+36;
        var $s=__stackBase__+40;
        var $ret=__stackBase__+44;
        var $rwa=__stackBase__+48;
        var $plus=__stackBase__+52;
        var $append=__stackBase__+56;
        var $flags=__stackBase__+60;
        var $fd=__stackBase__+64;
        var $closefd=__stackBase__+68;
        var $namelen=__stackBase__+72;
        var $u=__stackBase__+76;
        var $pos=__stackBase__+80;
        var $_py_tmp=__stackBase__+84;
        var $_alloca_point_=0;
        HEAP[$oself_addr]=$oself;
        HEAP[$args_addr]=$args;
        HEAP[$kwds_addr]=$kwds;
        var $1=HEAP[$oself_addr]; //@line 190 "fileio.c"
        var $2=$1; //@line 190 "fileio.c"
        HEAP[$self]=$2; //@line 190 "fileio.c"
        HEAP[$name]=0; //@line 192 "fileio.c"
        HEAP[$stringobj]=0; //@line 193 "fileio.c"
        HEAP[$mode]=((__str6123)&4294967295); //@line 194 "fileio.c"
        HEAP[$ret]=0; //@line 199 "fileio.c"
        HEAP[$rwa]=0; //@line 200 "fileio.c"
        HEAP[$plus]=0; //@line 200 "fileio.c"
        HEAP[$append]=0; //@line 200 "fileio.c"
        HEAP[$flags]=0; //@line 201 "fileio.c"
        HEAP[$fd]=-1; //@line 202 "fileio.c"
        HEAP[$closefd]=1; //@line 203 "fileio.c"
        var $3=HEAP[$oself_addr]; //@line 205 "fileio.c"
        var $4=(($3+4)&4294967295); //@line 205 "fileio.c"
        var $5=HEAP[$4]; //@line 205 "fileio.c"
        var $6=($5)!=(_PyFileIO_Type); //@line 205 "fileio.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 205 "fileio.c"
      case 1: // $bb
        var $7=HEAP[$oself_addr]; //@line 205 "fileio.c"
        var $8=(($7+4)&4294967295); //@line 205 "fileio.c"
        var $9=HEAP[$8]; //@line 205 "fileio.c"
        var $10=_PyType_IsSubtype($9, _PyFileIO_Type); //@line 205 "fileio.c"
        var $11=((($10))|0)==0; //@line 205 "fileio.c"
        if ($11) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 205 "fileio.c"
      case 2: // $bb1
        ___assert_fail(((__str7124)&4294967295), ((__str3120)&4294967295), 205, ((___PRETTY_FUNCTION___8670)&4294967295)); //@line 205 "fileio.c"
        throw "Reached an unreachable! Original .ll line: 13821"; //@line 205 "fileio.c"
      case 3: // $bb2
        var $12=HEAP[$self]; //@line 206 "fileio.c"
        var $13=(($12+8)&4294967295); //@line 206 "fileio.c"
        var $14=HEAP[$13]; //@line 206 "fileio.c"
        var $15=((($14))|0) >= 0; //@line 206 "fileio.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 206 "fileio.c"
      case 4: // $bb3
        var $16=HEAP[$self]; //@line 208 "fileio.c"
        var $17=_internal_close($16); //@line 208 "fileio.c"
        var $18=((($17))|0) < 0; //@line 208 "fileio.c"
        if ($18) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 208 "fileio.c"
      case 5: // $bb4
        HEAP[$0]=-1; //@line 209 "fileio.c"
        __label__ = 76; break; //@line 209 "fileio.c"
      case 6: // $bb5
        var $19=HEAP[$args_addr]; //@line 212 "fileio.c"
        var $20=HEAP[$kwds_addr]; //@line 212 "fileio.c"
        var $21=__PyArg_ParseTupleAndKeywords_SizeT($19, $20, ((__str8125)&4294967295), ((_kwlist_8657)&4294967295), $nameobj, $mode, $closefd); //@line 212 "fileio.c"
        var $22=((($21))|0)==0; //@line 212 "fileio.c"
        if ($22) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 212 "fileio.c"
      case 7: // $bb6
        HEAP[$0]=-1; //@line 214 "fileio.c"
        __label__ = 76; break; //@line 214 "fileio.c"
      case 8: // $bb7
        var $23=HEAP[$nameobj]; //@line 216 "fileio.c"
        var $24=(($23+4)&4294967295); //@line 216 "fileio.c"
        var $25=HEAP[$24]; //@line 216 "fileio.c"
        var $26=($25)==(_PyFloat_Type); //@line 216 "fileio.c"
        if ($26) { __label__ = 10; break; } else { __label__ = 9; break; } //@line 216 "fileio.c"
      case 9: // $bb8
        var $27=HEAP[$nameobj]; //@line 216 "fileio.c"
        var $28=(($27+4)&4294967295); //@line 216 "fileio.c"
        var $29=HEAP[$28]; //@line 216 "fileio.c"
        var $30=_PyType_IsSubtype($29, _PyFloat_Type); //@line 216 "fileio.c"
        var $31=((($30))|0)!=0; //@line 216 "fileio.c"
        if ($31) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 216 "fileio.c"
      case 10: // $bb9
        var $32=HEAP[_PyExc_TypeError]; //@line 217 "fileio.c"
        _PyErr_SetString($32, ((__str12129)&4294967295)); //@line 217 "fileio.c"
        HEAP[$0]=-1; //@line 219 "fileio.c"
        __label__ = 76; break; //@line 219 "fileio.c"
      case 11: // $bb10
        var $33=HEAP[$nameobj]; //@line 222 "fileio.c"
        var $34=_PyLong_AsLong($33); //@line 222 "fileio.c"
        HEAP[$fd]=$34; //@line 222 "fileio.c"
        var $35=HEAP[$fd]; //@line 223 "fileio.c"
        var $36=((($35))|0) < 0; //@line 223 "fileio.c"
        if ($36) { __label__ = 12; break; } else { __label__ = 15; break; } //@line 223 "fileio.c"
      case 12: // $bb11
        var $37=_PyErr_Occurred(); //@line 224 "fileio.c"
        var $38=($37)==0; //@line 224 "fileio.c"
        if ($38) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 224 "fileio.c"
      case 13: // $bb12
        var $39=HEAP[_PyExc_ValueError]; //@line 225 "fileio.c"
        _PyErr_SetString($39, ((__str13130)&4294967295)); //@line 225 "fileio.c"
        HEAP[$0]=-1; //@line 227 "fileio.c"
        __label__ = 76; break; //@line 227 "fileio.c"
      case 14: // $bb13
        _PyErr_Clear(); //@line 229 "fileio.c"
        __label__ = 15; break; //@line 229 "fileio.c"
      case 15: // $bb14
        var $40=HEAP[$fd]; //@line 237 "fileio.c"
        var $41=((($40))|0) < 0; //@line 237 "fileio.c"
        if ($41) { __label__ = 16; break; } else { __label__ = 31; break; } //@line 237 "fileio.c"
      case 16: // $bb15
        var $42=HEAP[$nameobj]; //@line 239 "fileio.c"
        var $43=(($42+4)&4294967295); //@line 239 "fileio.c"
        var $44=HEAP[$43]; //@line 239 "fileio.c"
        var $45=(($44+84)&4294967295); //@line 239 "fileio.c"
        var $46=HEAP[$45]; //@line 239 "fileio.c"
        var $47=($46) & 134217728; //@line 239 "fileio.c"
        var $48=((($47))|0)!=0; //@line 239 "fileio.c"
        if ($48) { __label__ = 19; break; } else { __label__ = 17; break; } //@line 239 "fileio.c"
      case 17: // $bb16
        var $49=HEAP[$nameobj]; //@line 239 "fileio.c"
        var $50=(($49+4)&4294967295); //@line 239 "fileio.c"
        var $51=HEAP[$50]; //@line 239 "fileio.c"
        var $52=($51)==(_PyByteArray_Type); //@line 239 "fileio.c"
        if ($52) { __label__ = 19; break; } else { __label__ = 18; break; } //@line 239 "fileio.c"
      case 18: // $bb17
        var $53=HEAP[$nameobj]; //@line 239 "fileio.c"
        var $54=(($53+4)&4294967295); //@line 239 "fileio.c"
        var $55=HEAP[$54]; //@line 239 "fileio.c"
        var $56=_PyType_IsSubtype($55, _PyByteArray_Type); //@line 239 "fileio.c"
        var $57=((($56))|0)!=0; //@line 239 "fileio.c"
        if ($57) { __label__ = 19; break; } else { __label__ = 22; break; } //@line 239 "fileio.c"
      case 19: // $bb18
        var $58=HEAP[$nameobj]; //@line 241 "fileio.c"
        var $59=_PyObject_AsCharBuffer($58, $name, $namelen); //@line 241 "fileio.c"
        var $60=((($59))|0) < 0; //@line 241 "fileio.c"
        if ($60) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 241 "fileio.c"
      case 20: // $bb19
        HEAP[$0]=-1; //@line 242 "fileio.c"
        __label__ = 76; break; //@line 242 "fileio.c"
      case 21: // $bb20
        __label__ = 31; break; //@line 242 "fileio.c"
      case 22: // $bb21
        var $61=HEAP[$nameobj]; //@line 245 "fileio.c"
        var $62=_PyUnicodeUCS2_FromObject($61); //@line 245 "fileio.c"
        HEAP[$u]=$62; //@line 245 "fileio.c"
        var $63=HEAP[$u]; //@line 247 "fileio.c"
        var $64=($63)==0; //@line 247 "fileio.c"
        if ($64) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 247 "fileio.c"
      case 23: // $bb22
        HEAP[$0]=-1; //@line 248 "fileio.c"
        __label__ = 76; break; //@line 248 "fileio.c"
      case 24: // $bb23
        var $65=HEAP[_Py_FileSystemDefaultEncoding]; //@line 250 "fileio.c"
        var $66=HEAP[$u]; //@line 250 "fileio.c"
        var $67=_PyUnicodeUCS2_AsEncodedString($66, $65, 0); //@line 250 "fileio.c"
        HEAP[$stringobj]=$67; //@line 250 "fileio.c"
        var $68=HEAP[$u]; //@line 252 "fileio.c"
        var $69=(($68)&4294967295); //@line 252 "fileio.c"
        var $70=HEAP[$69]; //@line 252 "fileio.c"
        var $71=((($70) - 1)&4294967295); //@line 252 "fileio.c"
        var $72=HEAP[$u]; //@line 252 "fileio.c"
        var $73=(($72)&4294967295); //@line 252 "fileio.c"
        HEAP[$73]=$71; //@line 252 "fileio.c"
        var $74=HEAP[$u]; //@line 252 "fileio.c"
        var $75=(($74)&4294967295); //@line 252 "fileio.c"
        var $76=HEAP[$75]; //@line 252 "fileio.c"
        var $77=((($76))|0)==0; //@line 252 "fileio.c"
        if ($77) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 252 "fileio.c"
      case 25: // $bb24
        var $78=HEAP[$u]; //@line 252 "fileio.c"
        var $79=(($78+4)&4294967295); //@line 252 "fileio.c"
        var $80=HEAP[$79]; //@line 252 "fileio.c"
        var $81=(($80+24)&4294967295); //@line 252 "fileio.c"
        var $82=HEAP[$81]; //@line 252 "fileio.c"
        var $83=HEAP[$u]; //@line 252 "fileio.c"
        FUNCTION_TABLE[$82]($83); //@line 252 "fileio.c"
        __label__ = 26; break; //@line 252 "fileio.c"
      case 26: // $bb25
        var $84=HEAP[$stringobj]; //@line 253 "fileio.c"
        var $85=($84)==0; //@line 253 "fileio.c"
        if ($85) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 253 "fileio.c"
      case 27: // $bb26
        HEAP[$0]=-1; //@line 254 "fileio.c"
        __label__ = 76; break; //@line 254 "fileio.c"
      case 28: // $bb27
        var $86=HEAP[$stringobj]; //@line 255 "fileio.c"
        var $87=(($86+4)&4294967295); //@line 255 "fileio.c"
        var $88=HEAP[$87]; //@line 255 "fileio.c"
        var $89=(($88+84)&4294967295); //@line 255 "fileio.c"
        var $90=HEAP[$89]; //@line 255 "fileio.c"
        var $91=($90) & 134217728; //@line 255 "fileio.c"
        var $92=((($91))|0)==0; //@line 255 "fileio.c"
        if ($92) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 255 "fileio.c"
      case 29: // $bb28
        var $93=HEAP[_PyExc_TypeError]; //@line 256 "fileio.c"
        _PyErr_SetString($93, ((__str14131)&4294967295)); //@line 256 "fileio.c"
        __label__ = 71; break; //@line 256 "fileio.c"
      case 30: // $bb29
        var $94=HEAP[$stringobj]; //@line 260 "fileio.c"
        var $95=$94; //@line 260 "fileio.c"
        var $96=(($95+20)&4294967295); //@line 260 "fileio.c"
        var $97=(($96)&4294967295); //@line 260 "fileio.c"
        HEAP[$name]=$97; //@line 260 "fileio.c"
        __label__ = 31; break; //@line 260 "fileio.c"
      case 31: // $bb30
        var $98=HEAP[$mode]; //@line 264 "fileio.c"
        HEAP[$s]=$98; //@line 264 "fileio.c"
        __label__ = 44; break; //@line 264 "fileio.c"
      case 32: // $bb31
        var $99=HEAP[$s]; //@line 266 "fileio.c"
        var $100=HEAP[$99]; //@line 266 "fileio.c"
        var $101=reSign(($100), 8, 0); //@line 266 "fileio.c"
        var $102=HEAP[$s]; //@line 266 "fileio.c"
        var $103=(($102+1)&4294967295); //@line 266 "fileio.c"
        HEAP[$s]=$103; //@line 266 "fileio.c"
        if ($101 == 43) {
          __label__ = 41; break;
        }
        else if ($101 == 97) {
          __label__ = 38; break;
        }
        else if ($101 == 98) {
          __label__ = 40; break;
        }
        else if ($101 == 114) {
          __label__ = 33; break;
        }
        else if ($101 == 119) {
          __label__ = 36; break;
        }
        else {
        __label__ = 43; break;
        }
        
      case 33: // $bb32
        var $104=HEAP[$rwa]; //@line 268 "fileio.c"
        var $105=((($104))|0)!=0; //@line 268 "fileio.c"
        if ($105) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 268 "fileio.c"
      case 34: // $bad_mode
        var $106=HEAP[_PyExc_ValueError]; //@line 270 "fileio.c"
        _PyErr_SetString($106, ((__str15132)&4294967295)); //@line 270 "fileio.c"
        __label__ = 71; break; //@line 270 "fileio.c"
      case 35: // $bb33
        HEAP[$rwa]=1; //@line 275 "fileio.c"
        var $107=HEAP[$self]; //@line 276 "fileio.c"
        var $108=(($107+12)&4294967295); //@line 276 "fileio.c"
        var $109=HEAP[$108]; //@line 276 "fileio.c"
        var $110=($109) & -2; //@line 276 "fileio.c"
        var $111=($110) | 1; //@line 276 "fileio.c"
        HEAP[$108]=$111; //@line 276 "fileio.c"
        __label__ = 44; break; //@line 276 "fileio.c"
      case 36: // $bb34
        var $112=HEAP[$rwa]; //@line 279 "fileio.c"
        var $113=((($112))|0)!=0; //@line 279 "fileio.c"
        if ($113) { __label__ = 34; break; } else { __label__ = 37; break; } //@line 279 "fileio.c"
      case 37: // $bb35
        HEAP[$rwa]=1; //@line 281 "fileio.c"
        var $114=HEAP[$self]; //@line 282 "fileio.c"
        var $115=(($114+12)&4294967295); //@line 282 "fileio.c"
        var $116=HEAP[$115]; //@line 282 "fileio.c"
        var $117=($116) & -3; //@line 282 "fileio.c"
        var $118=($117) | 2; //@line 282 "fileio.c"
        HEAP[$115]=$118; //@line 282 "fileio.c"
        var $119=HEAP[$flags]; //@line 283 "fileio.c"
        var $120=($119) | 576; //@line 283 "fileio.c"
        HEAP[$flags]=$120; //@line 283 "fileio.c"
        __label__ = 44; break; //@line 283 "fileio.c"
      case 38: // $bb36
        var $121=HEAP[$rwa]; //@line 286 "fileio.c"
        var $122=((($121))|0)!=0; //@line 286 "fileio.c"
        if ($122) { __label__ = 34; break; } else { __label__ = 39; break; } //@line 286 "fileio.c"
      case 39: // $bb37
        HEAP[$rwa]=1; //@line 288 "fileio.c"
        var $123=HEAP[$self]; //@line 289 "fileio.c"
        var $124=(($123+12)&4294967295); //@line 289 "fileio.c"
        var $125=HEAP[$124]; //@line 289 "fileio.c"
        var $126=($125) & -3; //@line 289 "fileio.c"
        var $127=($126) | 2; //@line 289 "fileio.c"
        HEAP[$124]=$127; //@line 289 "fileio.c"
        var $128=HEAP[$flags]; //@line 290 "fileio.c"
        var $129=($128) | 64; //@line 290 "fileio.c"
        HEAP[$flags]=$129; //@line 290 "fileio.c"
        HEAP[$append]=1; //@line 291 "fileio.c"
        __label__ = 44; break; //@line 291 "fileio.c"
      case 40: // $bb38
        __label__ = 44; break; //@line 291 "fileio.c"
      case 41: // $bb39
        var $130=HEAP[$plus]; //@line 296 "fileio.c"
        var $131=((($130))|0)!=0; //@line 296 "fileio.c"
        if ($131) { __label__ = 34; break; } else { __label__ = 42; break; } //@line 296 "fileio.c"
      case 42: // $bb40
        var $132=HEAP[$self]; //@line 298 "fileio.c"
        var $133=(($132+12)&4294967295); //@line 298 "fileio.c"
        var $134=HEAP[$133]; //@line 298 "fileio.c"
        var $135=($134) & -3; //@line 298 "fileio.c"
        var $136=($135) | 2; //@line 298 "fileio.c"
        HEAP[$133]=$136; //@line 298 "fileio.c"
        var $137=HEAP[$self]; //@line 298 "fileio.c"
        var $138=(($137+12)&4294967295); //@line 298 "fileio.c"
        var $139=HEAP[$138]; //@line 298 "fileio.c"
        var $140=($139) << 30; //@line 298 "fileio.c"
        var $141=((($140))>>>0) >>> 31; //@line 298 "fileio.c"
        var $142=((($141)) & 1); //@line 298 "fileio.c"
        var $143=HEAP[$self]; //@line 298 "fileio.c"
        var $144=(($143+12)&4294967295); //@line 298 "fileio.c"
        var $145=unSign(($142), 1, 0); //@line 298 "fileio.c"
        var $146=HEAP[$144]; //@line 298 "fileio.c"
        var $147=($145) & 1; //@line 298 "fileio.c"
        var $148=($146) & -2; //@line 298 "fileio.c"
        var $149=($148) | ($147); //@line 298 "fileio.c"
        HEAP[$144]=$149; //@line 298 "fileio.c"
        HEAP[$plus]=1; //@line 299 "fileio.c"
        __label__ = 44; break; //@line 299 "fileio.c"
      case 43: // $bb41
        var $150=HEAP[$mode]; //@line 302 "fileio.c"
        var $151=HEAP[_PyExc_ValueError]; //@line 302 "fileio.c"
        var $152=_PyErr_Format($151, ((__str16133)&4294967295), $150); //@line 302 "fileio.c"
        __label__ = 71; break; //@line 302 "fileio.c"
      case 44: // $bb42
        var $153=HEAP[$s]; //@line 265 "fileio.c"
        var $154=HEAP[$153]; //@line 265 "fileio.c"
        var $155=reSign(($154), 8, 0)!=0; //@line 265 "fileio.c"
        if ($155) { __label__ = 32; break; } else { __label__ = 45; break; } //@line 265 "fileio.c"
      case 45: // $bb43
        var $156=HEAP[$rwa]; //@line 308 "fileio.c"
        var $157=((($156))|0)==0; //@line 308 "fileio.c"
        if ($157) { __label__ = 34; break; } else { __label__ = 46; break; } //@line 308 "fileio.c"
      case 46: // $bb44
        var $158=HEAP[$self]; //@line 311 "fileio.c"
        var $159=(($158+12)&4294967295); //@line 311 "fileio.c"
        var $160=HEAP[$159]; //@line 311 "fileio.c"
        var $161=($160) << 31; //@line 311 "fileio.c"
        var $162=((($161))>>>0) >>> 31; //@line 311 "fileio.c"
        var $163=((($162)) & 1); //@line 311 "fileio.c"
        var $164=reSign(($163), 1, 0)==0; //@line 311 "fileio.c"
        if ($164) { __label__ = 49; break; } else { __label__ = 47; break; } //@line 311 "fileio.c"
      case 47: // $bb45
        var $165=HEAP[$self]; //@line 311 "fileio.c"
        var $166=(($165+12)&4294967295); //@line 311 "fileio.c"
        var $167=HEAP[$166]; //@line 311 "fileio.c"
        var $168=($167) << 30; //@line 311 "fileio.c"
        var $169=((($168))>>>0) >>> 31; //@line 311 "fileio.c"
        var $170=((($169)) & 1); //@line 311 "fileio.c"
        var $171=reSign(($170), 1, 0)==0; //@line 311 "fileio.c"
        if ($171) { __label__ = 49; break; } else { __label__ = 48; break; } //@line 311 "fileio.c"
      case 48: // $bb46
        var $172=HEAP[$flags]; //@line 312 "fileio.c"
        var $173=($172) | 2; //@line 312 "fileio.c"
        HEAP[$flags]=$173; //@line 312 "fileio.c"
        __label__ = 52; break; //@line 312 "fileio.c"
      case 49: // $bb47
        var $174=HEAP[$self]; //@line 313 "fileio.c"
        var $175=(($174+12)&4294967295); //@line 313 "fileio.c"
        var $176=HEAP[$175]; //@line 313 "fileio.c"
        var $177=($176) << 31; //@line 313 "fileio.c"
        var $178=((($177))>>>0) >>> 31; //@line 313 "fileio.c"
        var $179=((($178)) & 1); //@line 313 "fileio.c"
        var $180=reSign(($179), 1, 0)!=0; //@line 313 "fileio.c"
        if ($180) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 313 "fileio.c"
      case 50: // $bb48
        var $181=HEAP[$flags]; //@line 314 "fileio.c"
        HEAP[$flags]=$181; //@line 314 "fileio.c"
        __label__ = 52; break; //@line 314 "fileio.c"
      case 51: // $bb49
        var $182=HEAP[$flags]; //@line 316 "fileio.c"
        var $183=($182) | 1; //@line 316 "fileio.c"
        HEAP[$flags]=$183; //@line 316 "fileio.c"
        __label__ = 52; break; //@line 316 "fileio.c"
      case 52: // $bb50
        var $184=HEAP[$append]; //@line 323 "fileio.c"
        var $185=((($184))|0)!=0; //@line 323 "fileio.c"
        if ($185) { __label__ = 53; break; } else { __label__ = 54; break; } //@line 323 "fileio.c"
      case 53: // $bb51
        var $186=HEAP[$flags]; //@line 324 "fileio.c"
        var $187=($186) | 1024; //@line 324 "fileio.c"
        HEAP[$flags]=$187; //@line 324 "fileio.c"
        __label__ = 54; break; //@line 324 "fileio.c"
      case 54: // $bb52
        var $188=HEAP[$fd]; //@line 327 "fileio.c"
        var $189=((($188))|0) >= 0; //@line 327 "fileio.c"
        if ($189) { __label__ = 55; break; } else { __label__ = 57; break; } //@line 327 "fileio.c"
      case 55: // $bb53
        var $190=HEAP[$fd]; //@line 328 "fileio.c"
        var $191=_check_fd($190); //@line 328 "fileio.c"
        var $192=((($191))|0)!=0; //@line 328 "fileio.c"
        if ($192) { __label__ = 71; break; } else { __label__ = 56; break; } //@line 328 "fileio.c"
      case 56: // $bb54
        var $193=HEAP[$self]; //@line 330 "fileio.c"
        var $194=(($193+8)&4294967295); //@line 330 "fileio.c"
        var $195=HEAP[$fd]; //@line 330 "fileio.c"
        HEAP[$194]=$195; //@line 330 "fileio.c"
        var $196=HEAP[$closefd]; //@line 331 "fileio.c"
        var $197=((($196)) & 255); //@line 331 "fileio.c"
        var $198=((($197)) & 1); //@line 331 "fileio.c"
        var $199=HEAP[$self]; //@line 331 "fileio.c"
        var $200=(($199+12)&4294967295); //@line 331 "fileio.c"
        var $201=unSign(($198), 1, 0); //@line 331 "fileio.c"
        var $202=HEAP[$200]; //@line 331 "fileio.c"
        var $203=($201) << 4; //@line 331 "fileio.c"
        var $204=($203) & 16; //@line 331 "fileio.c"
        var $205=($202) & -17; //@line 331 "fileio.c"
        var $206=($205) | ($204); //@line 331 "fileio.c"
        HEAP[$200]=$206; //@line 331 "fileio.c"
        __label__ = 62; break; //@line 331 "fileio.c"
      case 57: // $bb55
        var $207=HEAP[$self]; //@line 334 "fileio.c"
        var $208=(($207+12)&4294967295); //@line 334 "fileio.c"
        var $209=HEAP[$208]; //@line 334 "fileio.c"
        var $210=($209) & -17; //@line 334 "fileio.c"
        var $211=($210) | 16; //@line 334 "fileio.c"
        HEAP[$208]=$211; //@line 334 "fileio.c"
        var $212=HEAP[$closefd]; //@line 335 "fileio.c"
        var $213=((($212))|0)==0; //@line 335 "fileio.c"
        if ($213) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 335 "fileio.c"
      case 58: // $bb56
        var $214=HEAP[_PyExc_ValueError]; //@line 336 "fileio.c"
        _PyErr_SetString($214, ((__str17134)&4294967295)); //@line 336 "fileio.c"
        __label__ = 71; break; //@line 336 "fileio.c"
      case 59: // $bb57
        var $215=___errno_location(); //@line 342 "fileio.c"
        HEAP[$215]=0; //@line 342 "fileio.c"
        var $216=HEAP[$name]; //@line 348 "fileio.c"
        var $217=HEAP[$flags]; //@line 348 "fileio.c"
        var $218=___01open64_($216, $217, 438); //@line 348 "fileio.c"
        var $219=HEAP[$self]; //@line 348 "fileio.c"
        var $220=(($219+8)&4294967295); //@line 348 "fileio.c"
        HEAP[$220]=$218; //@line 348 "fileio.c"
        var $221=HEAP[$self]; //@line 350 "fileio.c"
        var $222=(($221+8)&4294967295); //@line 350 "fileio.c"
        var $223=HEAP[$222]; //@line 350 "fileio.c"
        var $224=((($223))|0) < 0; //@line 350 "fileio.c"
        if ($224) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 350 "fileio.c"
      case 60: // $bb58
        var $225=HEAP[$name]; //@line 356 "fileio.c"
        var $226=HEAP[_PyExc_IOError]; //@line 356 "fileio.c"
        var $227=_PyErr_SetFromErrnoWithFilename($226, $225); //@line 356 "fileio.c"
        __label__ = 71; break; //@line 356 "fileio.c"
      case 61: // $bb59
        var $228=HEAP[$name]; //@line 359 "fileio.c"
        var $229=HEAP[$self]; //@line 359 "fileio.c"
        var $230=_dircheck($229, $228); //@line 359 "fileio.c"
        var $231=((($230))|0) < 0; //@line 359 "fileio.c"
        if ($231) { __label__ = 71; break; } else { __label__ = 62; break; } //@line 359 "fileio.c"
      case 62: // $bb60
        var $232=HEAP[$nameobj]; //@line 363 "fileio.c"
        var $233=HEAP[$self]; //@line 363 "fileio.c"
        var $234=$233; //@line 363 "fileio.c"
        var $235=_PyObject_SetAttrString($234, ((__str18135)&4294967295), $232); //@line 363 "fileio.c"
        var $236=((($235))|0) < 0; //@line 363 "fileio.c"
        if ($236) { __label__ = 71; break; } else { __label__ = 63; break; } //@line 363 "fileio.c"
      case 63: // $bb61
        var $237=HEAP[$append]; //@line 366 "fileio.c"
        var $238=((($237))|0)!=0; //@line 366 "fileio.c"
        if ($238) { __label__ = 64; break; } else { __label__ = 70; break; } //@line 366 "fileio.c"
      case 64: // $bb62
        var $239=HEAP[$self]; //@line 370 "fileio.c"
        var $240=(($239+8)&4294967295); //@line 370 "fileio.c"
        var $241=HEAP[$240]; //@line 370 "fileio.c"
        var $242=_portable_lseek($241, 0, 2); //@line 370 "fileio.c"
        HEAP[$pos]=$242; //@line 370 "fileio.c"
        var $243=HEAP[$pos]; //@line 371 "fileio.c"
        var $244=($243)==0; //@line 371 "fileio.c"
        if ($244) { __label__ = 65; break; } else { __label__ = 68; break; } //@line 371 "fileio.c"
      case 65: // $bb63
        var $245=HEAP[$closefd]; //@line 372 "fileio.c"
        var $246=((($245))|0)!=0; //@line 372 "fileio.c"
        if ($246) { __label__ = 66; break; } else { __label__ = 67; break; } //@line 372 "fileio.c"
      case 66: // $bb64
        var $247=HEAP[$self]; //@line 373 "fileio.c"
        var $248=(($247+8)&4294967295); //@line 373 "fileio.c"
        var $249=HEAP[$248]; //@line 373 "fileio.c"
        var $250=_close($249); //@line 373 "fileio.c"
        var $251=HEAP[$self]; //@line 374 "fileio.c"
        var $252=(($251+8)&4294967295); //@line 374 "fileio.c"
        HEAP[$252]=-1; //@line 374 "fileio.c"
        __label__ = 67; break; //@line 374 "fileio.c"
      case 67: // $bb65
        __label__ = 71; break; //@line 374 "fileio.c"
      case 68: // $bb66
        var $253=HEAP[$pos]; //@line 378 "fileio.c"
        var $254=(($253)&4294967295); //@line 378 "fileio.c"
        var $255=HEAP[$254]; //@line 378 "fileio.c"
        var $256=((($255) - 1)&4294967295); //@line 378 "fileio.c"
        var $257=HEAP[$pos]; //@line 378 "fileio.c"
        var $258=(($257)&4294967295); //@line 378 "fileio.c"
        HEAP[$258]=$256; //@line 378 "fileio.c"
        var $259=HEAP[$pos]; //@line 378 "fileio.c"
        var $260=(($259)&4294967295); //@line 378 "fileio.c"
        var $261=HEAP[$260]; //@line 378 "fileio.c"
        var $262=((($261))|0)==0; //@line 378 "fileio.c"
        if ($262) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 378 "fileio.c"
      case 69: // $bb67
        var $263=HEAP[$pos]; //@line 378 "fileio.c"
        var $264=(($263+4)&4294967295); //@line 378 "fileio.c"
        var $265=HEAP[$264]; //@line 378 "fileio.c"
        var $266=(($265+24)&4294967295); //@line 378 "fileio.c"
        var $267=HEAP[$266]; //@line 378 "fileio.c"
        var $268=HEAP[$pos]; //@line 378 "fileio.c"
        FUNCTION_TABLE[$267]($268); //@line 378 "fileio.c"
        __label__ = 70; break; //@line 378 "fileio.c"
      case 70: // $bb68
        __label__ = 72; break; //@line 378 "fileio.c"
      case 71: // $error
        HEAP[$ret]=-1; //@line 384 "fileio.c"
        __label__ = 72; break; //@line 386 "fileio.c"
      case 72: // $done
        var $269=HEAP[$stringobj]; //@line 387 "fileio.c"
        var $270=($269)!=0; //@line 387 "fileio.c"
        if ($270) { __label__ = 73; break; } else { __label__ = 75; break; } //@line 387 "fileio.c"
      case 73: // $bb69
        var $271=HEAP[$stringobj]; //@line 387 "fileio.c"
        HEAP[$_py_tmp]=$271; //@line 387 "fileio.c"
        HEAP[$stringobj]=0; //@line 387 "fileio.c"
        var $272=HEAP[$_py_tmp]; //@line 387 "fileio.c"
        var $273=(($272)&4294967295); //@line 387 "fileio.c"
        var $274=HEAP[$273]; //@line 387 "fileio.c"
        var $275=((($274) - 1)&4294967295); //@line 387 "fileio.c"
        var $276=HEAP[$_py_tmp]; //@line 387 "fileio.c"
        var $277=(($276)&4294967295); //@line 387 "fileio.c"
        HEAP[$277]=$275; //@line 387 "fileio.c"
        var $278=HEAP[$_py_tmp]; //@line 387 "fileio.c"
        var $279=(($278)&4294967295); //@line 387 "fileio.c"
        var $280=HEAP[$279]; //@line 387 "fileio.c"
        var $281=((($280))|0)==0; //@line 387 "fileio.c"
        if ($281) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 387 "fileio.c"
      case 74: // $bb70
        var $282=HEAP[$_py_tmp]; //@line 387 "fileio.c"
        var $283=(($282+4)&4294967295); //@line 387 "fileio.c"
        var $284=HEAP[$283]; //@line 387 "fileio.c"
        var $285=(($284+24)&4294967295); //@line 387 "fileio.c"
        var $286=HEAP[$285]; //@line 387 "fileio.c"
        var $287=HEAP[$_py_tmp]; //@line 387 "fileio.c"
        FUNCTION_TABLE[$286]($287); //@line 387 "fileio.c"
        __label__ = 75; break; //@line 387 "fileio.c"
      case 75: // $bb71
        var $288=HEAP[$ret]; //@line 388 "fileio.c"
        HEAP[$0]=$288; //@line 388 "fileio.c"
        __label__ = 76; break; //@line 388 "fileio.c"
      case 76: // $bb72
        var $289=HEAP[$0]; //@line 209 "fileio.c"
        HEAP[$retval]=$289; //@line 209 "fileio.c"
        __label__ = 77; break; //@line 209 "fileio.c"
      case 77: // $return
        var $retval73=HEAP[$retval]; //@line 209 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval73; //@line 209 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_traverse($self, $visit, $arg) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $visit_addr=__stackBase__+4;
        var $arg_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $vret=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$visit_addr]=$visit;
        HEAP[$arg_addr]=$arg;
        var $1=HEAP[$self_addr]; //@line 394 "fileio.c"
        var $2=(($1+20)&4294967295); //@line 394 "fileio.c"
        var $3=HEAP[$2]; //@line 394 "fileio.c"
        var $4=($3)!=0; //@line 394 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 394 "fileio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 394 "fileio.c"
        var $6=(($5+20)&4294967295); //@line 394 "fileio.c"
        var $7=HEAP[$6]; //@line 394 "fileio.c"
        var $8=HEAP[$visit_addr]; //@line 394 "fileio.c"
        var $9=HEAP[$arg_addr]; //@line 394 "fileio.c"
        var $10=FUNCTION_TABLE[$8]($7, $9); //@line 394 "fileio.c"
        HEAP[$vret]=$10; //@line 394 "fileio.c"
        var $11=HEAP[$vret]; //@line 394 "fileio.c"
        var $12=((($11))|0)!=0; //@line 394 "fileio.c"
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 394 "fileio.c"
      case 2: // $bb1
        var $13=HEAP[$vret]; //@line 394 "fileio.c"
        HEAP[$0]=$13; //@line 394 "fileio.c"
        __label__ = 4; break; //@line 394 "fileio.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 395 "fileio.c"
        __label__ = 4; break; //@line 395 "fileio.c"
      case 4: // $bb3
        var $14=HEAP[$0]; //@line 394 "fileio.c"
        HEAP[$retval]=$14; //@line 394 "fileio.c"
        __label__ = 5; break; //@line 394 "fileio.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 394 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 394 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_clear($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_py_tmp=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 401 "fileio.c"
        var $2=(($1+20)&4294967295); //@line 401 "fileio.c"
        var $3=HEAP[$2]; //@line 401 "fileio.c"
        var $4=($3)!=0; //@line 401 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 401 "fileio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 401 "fileio.c"
        var $6=(($5+20)&4294967295); //@line 401 "fileio.c"
        var $7=HEAP[$6]; //@line 401 "fileio.c"
        HEAP[$_py_tmp]=$7; //@line 401 "fileio.c"
        var $8=HEAP[$self_addr]; //@line 401 "fileio.c"
        var $9=(($8+20)&4294967295); //@line 401 "fileio.c"
        HEAP[$9]=0; //@line 401 "fileio.c"
        var $10=HEAP[$_py_tmp]; //@line 401 "fileio.c"
        var $11=(($10)&4294967295); //@line 401 "fileio.c"
        var $12=HEAP[$11]; //@line 401 "fileio.c"
        var $13=((($12) - 1)&4294967295); //@line 401 "fileio.c"
        var $14=HEAP[$_py_tmp]; //@line 401 "fileio.c"
        var $15=(($14)&4294967295); //@line 401 "fileio.c"
        HEAP[$15]=$13; //@line 401 "fileio.c"
        var $16=HEAP[$_py_tmp]; //@line 401 "fileio.c"
        var $17=(($16)&4294967295); //@line 401 "fileio.c"
        var $18=HEAP[$17]; //@line 401 "fileio.c"
        var $19=((($18))|0)==0; //@line 401 "fileio.c"
        if ($19) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 401 "fileio.c"
      case 2: // $bb1
        var $20=HEAP[$_py_tmp]; //@line 401 "fileio.c"
        var $21=(($20+4)&4294967295); //@line 401 "fileio.c"
        var $22=HEAP[$21]; //@line 401 "fileio.c"
        var $23=(($22+24)&4294967295); //@line 401 "fileio.c"
        var $24=HEAP[$23]; //@line 401 "fileio.c"
        var $25=HEAP[$_py_tmp]; //@line 401 "fileio.c"
        FUNCTION_TABLE[$24]($25); //@line 401 "fileio.c"
        __label__ = 3; break; //@line 401 "fileio.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 402 "fileio.c"
        var $26=HEAP[$0]; //@line 402 "fileio.c"
        HEAP[$retval]=$26; //@line 402 "fileio.c"
        __label__ = 4; break; //@line 402 "fileio.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 402 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 402 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_dealloc($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $g=__stackBase__+4;
        var $_py_tmp=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $0=HEAP[$self_addr]; //@line 408 "fileio.c"
        var $1=$0; //@line 408 "fileio.c"
        var $2=__PyIOBase_finalize($1); //@line 408 "fileio.c"
        var $3=((($2))|0) < 0; //@line 408 "fileio.c"
        if ($3) { __label__ = 9; break; } else { __label__ = 1; break; } //@line 408 "fileio.c"
      case 1: // $bb
        var $4=HEAP[$self_addr]; //@line 410 "fileio.c"
        var $5=$4; //@line 410 "fileio.c"
        var $6=(($5+-12)&4294967295); //@line 410 "fileio.c"
        HEAP[$g]=$6; //@line 410 "fileio.c"
        var $7=HEAP[$g]; //@line 410 "fileio.c"
        var $8=(($7)&4294967295); //@line 410 "fileio.c"
        var $9=(($8+8)&4294967295); //@line 410 "fileio.c"
        var $10=HEAP[$9]; //@line 410 "fileio.c"
        var $11=((($10))|0)==-2; //@line 410 "fileio.c"
        if ($11) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 410 "fileio.c"
      case 2: // $bb1
        ___assert_fail(((__str19136)&4294967295), ((__str3120)&4294967295), 410, ((___PRETTY_FUNCTION___8879)&4294967295)); //@line 410 "fileio.c"
        throw "Reached an unreachable! Original .ll line: 14558"; //@line 410 "fileio.c"
      case 3: // $bb2
        var $12=HEAP[$g]; //@line 410 "fileio.c"
        var $13=(($12)&4294967295); //@line 410 "fileio.c"
        var $14=(($13+8)&4294967295); //@line 410 "fileio.c"
        HEAP[$14]=-2; //@line 410 "fileio.c"
        var $15=HEAP[$g]; //@line 410 "fileio.c"
        var $16=(($15)&4294967295); //@line 410 "fileio.c"
        var $17=(($16+4)&4294967295); //@line 410 "fileio.c"
        var $18=HEAP[$17]; //@line 410 "fileio.c"
        var $19=HEAP[$g]; //@line 410 "fileio.c"
        var $20=(($19)&4294967295); //@line 410 "fileio.c"
        var $21=(($20)&4294967295); //@line 410 "fileio.c"
        var $22=HEAP[$21]; //@line 410 "fileio.c"
        var $23=(($18)&4294967295); //@line 410 "fileio.c"
        var $24=(($23)&4294967295); //@line 410 "fileio.c"
        HEAP[$24]=$22; //@line 410 "fileio.c"
        var $25=HEAP[$g]; //@line 410 "fileio.c"
        var $26=(($25)&4294967295); //@line 410 "fileio.c"
        var $27=(($26)&4294967295); //@line 410 "fileio.c"
        var $28=HEAP[$27]; //@line 410 "fileio.c"
        var $29=HEAP[$g]; //@line 410 "fileio.c"
        var $30=(($29)&4294967295); //@line 410 "fileio.c"
        var $31=(($30+4)&4294967295); //@line 410 "fileio.c"
        var $32=HEAP[$31]; //@line 410 "fileio.c"
        var $33=(($28)&4294967295); //@line 410 "fileio.c"
        var $34=(($33+4)&4294967295); //@line 410 "fileio.c"
        HEAP[$34]=$32; //@line 410 "fileio.c"
        var $35=HEAP[$g]; //@line 410 "fileio.c"
        var $36=(($35)&4294967295); //@line 410 "fileio.c"
        var $37=(($36)&4294967295); //@line 410 "fileio.c"
        HEAP[$37]=0; //@line 410 "fileio.c"
        var $38=HEAP[$self_addr]; //@line 411 "fileio.c"
        var $39=(($38+16)&4294967295); //@line 411 "fileio.c"
        var $40=HEAP[$39]; //@line 411 "fileio.c"
        var $41=($40)!=0; //@line 411 "fileio.c"
        if ($41) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 411 "fileio.c"
      case 4: // $bb3
        var $42=HEAP[$self_addr]; //@line 412 "fileio.c"
        var $43=$42; //@line 412 "fileio.c"
        _PyObject_ClearWeakRefs($43); //@line 412 "fileio.c"
        __label__ = 5; break; //@line 412 "fileio.c"
      case 5: // $bb4
        var $44=HEAP[$self_addr]; //@line 413 "fileio.c"
        var $45=(($44+20)&4294967295); //@line 413 "fileio.c"
        var $46=HEAP[$45]; //@line 413 "fileio.c"
        var $47=($46)!=0; //@line 413 "fileio.c"
        if ($47) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 413 "fileio.c"
      case 6: // $bb5
        var $48=HEAP[$self_addr]; //@line 413 "fileio.c"
        var $49=(($48+20)&4294967295); //@line 413 "fileio.c"
        var $50=HEAP[$49]; //@line 413 "fileio.c"
        HEAP[$_py_tmp]=$50; //@line 413 "fileio.c"
        var $51=HEAP[$self_addr]; //@line 413 "fileio.c"
        var $52=(($51+20)&4294967295); //@line 413 "fileio.c"
        HEAP[$52]=0; //@line 413 "fileio.c"
        var $53=HEAP[$_py_tmp]; //@line 413 "fileio.c"
        var $54=(($53)&4294967295); //@line 413 "fileio.c"
        var $55=HEAP[$54]; //@line 413 "fileio.c"
        var $56=((($55) - 1)&4294967295); //@line 413 "fileio.c"
        var $57=HEAP[$_py_tmp]; //@line 413 "fileio.c"
        var $58=(($57)&4294967295); //@line 413 "fileio.c"
        HEAP[$58]=$56; //@line 413 "fileio.c"
        var $59=HEAP[$_py_tmp]; //@line 413 "fileio.c"
        var $60=(($59)&4294967295); //@line 413 "fileio.c"
        var $61=HEAP[$60]; //@line 413 "fileio.c"
        var $62=((($61))|0)==0; //@line 413 "fileio.c"
        if ($62) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 413 "fileio.c"
      case 7: // $bb6
        var $63=HEAP[$_py_tmp]; //@line 413 "fileio.c"
        var $64=(($63+4)&4294967295); //@line 413 "fileio.c"
        var $65=HEAP[$64]; //@line 413 "fileio.c"
        var $66=(($65+24)&4294967295); //@line 413 "fileio.c"
        var $67=HEAP[$66]; //@line 413 "fileio.c"
        var $68=HEAP[$_py_tmp]; //@line 413 "fileio.c"
        FUNCTION_TABLE[$67]($68); //@line 413 "fileio.c"
        __label__ = 8; break; //@line 413 "fileio.c"
      case 8: // $bb7
        var $69=HEAP[$self_addr]; //@line 414 "fileio.c"
        var $70=$69; //@line 414 "fileio.c"
        var $71=(($70+4)&4294967295); //@line 414 "fileio.c"
        var $72=HEAP[$71]; //@line 414 "fileio.c"
        var $73=(($72+160)&4294967295); //@line 414 "fileio.c"
        var $74=HEAP[$73]; //@line 414 "fileio.c"
        var $75=HEAP[$self_addr]; //@line 414 "fileio.c"
        var $76=$75; //@line 414 "fileio.c"
        FUNCTION_TABLE[$74]($76); //@line 414 "fileio.c"
        __label__ = 9; break; //@line 414 "fileio.c"
      case 9: // $bb8
        __label__ = 10; break; //@line 409 "fileio.c"
      case 10: // $return
        STACKTOP = __stackBase__;
        return; //@line 409 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _err_closed() {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval=__stackBase__;
        var $0=__stackBase__+4;
        var $_alloca_point_=0;
        var $1=HEAP[_PyExc_ValueError]; //@line 420 "fileio.c"
        _PyErr_SetString($1, ((__str20137)&4294967295)); //@line 420 "fileio.c"
        HEAP[$0]=0; //@line 421 "fileio.c"
        var $2=HEAP[$0]; //@line 421 "fileio.c"
        HEAP[$retval]=$2; //@line 421 "fileio.c"
        __label__ = 1; break; //@line 421 "fileio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 421 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 421 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _err_mode($action) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $action_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$action_addr]=$action;
        var $1=HEAP[_PyExc_ValueError]; //@line 427 "fileio.c"
        var $2=HEAP[$action_addr]; //@line 427 "fileio.c"
        var $3=_PyErr_Format($1, ((__str21138)&4294967295), $2); //@line 427 "fileio.c"
        HEAP[$0]=0; //@line 428 "fileio.c"
        var $4=HEAP[$0]; //@line 428 "fileio.c"
        HEAP[$retval]=$4; //@line 428 "fileio.c"
        __label__ = 1; break; //@line 428 "fileio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 428 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 428 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_fileno($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 434 "fileio.c"
        var $2=(($1+8)&4294967295); //@line 434 "fileio.c"
        var $3=HEAP[$2]; //@line 434 "fileio.c"
        var $4=((($3))|0) < 0; //@line 434 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 434 "fileio.c"
      case 1: // $bb
        var $5=_err_closed(); //@line 435 "fileio.c"
        HEAP[$0]=$5; //@line 435 "fileio.c"
        __label__ = 3; break; //@line 435 "fileio.c"
      case 2: // $bb1
        var $6=HEAP[$self_addr]; //@line 436 "fileio.c"
        var $7=(($6+8)&4294967295); //@line 436 "fileio.c"
        var $8=HEAP[$7]; //@line 436 "fileio.c"
        var $9=_PyInt_FromLong($8); //@line 436 "fileio.c"
        HEAP[$0]=$9; //@line 436 "fileio.c"
        __label__ = 3; break; //@line 436 "fileio.c"
      case 3: // $bb2
        var $10=HEAP[$0]; //@line 435 "fileio.c"
        HEAP[$retval]=$10; //@line 435 "fileio.c"
        __label__ = 4; break; //@line 435 "fileio.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 435 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 435 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_readable($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 442 "fileio.c"
        var $2=(($1+8)&4294967295); //@line 442 "fileio.c"
        var $3=HEAP[$2]; //@line 442 "fileio.c"
        var $4=((($3))|0) < 0; //@line 442 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 442 "fileio.c"
      case 1: // $bb
        var $5=_err_closed(); //@line 443 "fileio.c"
        HEAP[$0]=$5; //@line 443 "fileio.c"
        __label__ = 3; break; //@line 443 "fileio.c"
      case 2: // $bb1
        var $6=HEAP[$self_addr]; //@line 444 "fileio.c"
        var $7=(($6+12)&4294967295); //@line 444 "fileio.c"
        var $8=HEAP[$7]; //@line 444 "fileio.c"
        var $9=($8) << 31; //@line 444 "fileio.c"
        var $10=((($9))>>>0) >>> 31; //@line 444 "fileio.c"
        var $11=((($10)) & 1); //@line 444 "fileio.c"
        var $12=unSign(($11), 1, 0); //@line 444 "fileio.c"
        var $13=_PyBool_FromLong($12); //@line 444 "fileio.c"
        HEAP[$0]=$13; //@line 444 "fileio.c"
        __label__ = 3; break; //@line 444 "fileio.c"
      case 3: // $bb2
        var $14=HEAP[$0]; //@line 443 "fileio.c"
        HEAP[$retval]=$14; //@line 443 "fileio.c"
        __label__ = 4; break; //@line 443 "fileio.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 443 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 443 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_writable($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 450 "fileio.c"
        var $2=(($1+8)&4294967295); //@line 450 "fileio.c"
        var $3=HEAP[$2]; //@line 450 "fileio.c"
        var $4=((($3))|0) < 0; //@line 450 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 450 "fileio.c"
      case 1: // $bb
        var $5=_err_closed(); //@line 451 "fileio.c"
        HEAP[$0]=$5; //@line 451 "fileio.c"
        __label__ = 3; break; //@line 451 "fileio.c"
      case 2: // $bb1
        var $6=HEAP[$self_addr]; //@line 452 "fileio.c"
        var $7=(($6+12)&4294967295); //@line 452 "fileio.c"
        var $8=HEAP[$7]; //@line 452 "fileio.c"
        var $9=($8) << 30; //@line 452 "fileio.c"
        var $10=((($9))>>>0) >>> 31; //@line 452 "fileio.c"
        var $11=((($10)) & 1); //@line 452 "fileio.c"
        var $12=unSign(($11), 1, 0); //@line 452 "fileio.c"
        var $13=_PyBool_FromLong($12); //@line 452 "fileio.c"
        HEAP[$0]=$13; //@line 452 "fileio.c"
        __label__ = 3; break; //@line 452 "fileio.c"
      case 3: // $bb2
        var $14=HEAP[$0]; //@line 451 "fileio.c"
        HEAP[$retval]=$14; //@line 451 "fileio.c"
        __label__ = 4; break; //@line 451 "fileio.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 451 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 451 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_seekable($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $pos=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 458 "fileio.c"
        var $2=(($1+8)&4294967295); //@line 458 "fileio.c"
        var $3=HEAP[$2]; //@line 458 "fileio.c"
        var $4=((($3))|0) < 0; //@line 458 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 458 "fileio.c"
      case 1: // $bb
        var $5=_err_closed(); //@line 459 "fileio.c"
        HEAP[$0]=$5; //@line 459 "fileio.c"
        __label__ = 9; break; //@line 459 "fileio.c"
      case 2: // $bb1
        var $6=HEAP[$self_addr]; //@line 460 "fileio.c"
        var $7=(($6+12)&4294967295); //@line 460 "fileio.c"
        var $8=HEAP[$7]; //@line 460 "fileio.c"
        var $9=($8) << 28; //@line 460 "fileio.c"
        var $10=((($9))|0) >> 30; //@line 460 "fileio.c"
        var $11=((($10)) & 3); //@line 460 "fileio.c"
        var $12=($11) < 0; //@line 460 "fileio.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 8; break; } //@line 460 "fileio.c"
      case 3: // $bb2
        var $13=HEAP[$self_addr]; //@line 461 "fileio.c"
        var $14=(($13+8)&4294967295); //@line 461 "fileio.c"
        var $15=HEAP[$14]; //@line 461 "fileio.c"
        var $16=_portable_lseek($15, 0, 1); //@line 461 "fileio.c"
        HEAP[$pos]=$16; //@line 461 "fileio.c"
        var $17=HEAP[$pos]; //@line 462 "fileio.c"
        var $18=($17)==0; //@line 462 "fileio.c"
        if ($18) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 462 "fileio.c"
      case 4: // $bb3
        _PyErr_Clear(); //@line 463 "fileio.c"
        var $19=HEAP[$self_addr]; //@line 464 "fileio.c"
        var $20=(($19+12)&4294967295); //@line 464 "fileio.c"
        var $21=HEAP[$20]; //@line 464 "fileio.c"
        var $22=($21) & -13; //@line 464 "fileio.c"
        HEAP[$20]=$22; //@line 464 "fileio.c"
        __label__ = 8; break; //@line 464 "fileio.c"
      case 5: // $bb4
        var $23=HEAP[$pos]; //@line 466 "fileio.c"
        var $24=(($23)&4294967295); //@line 466 "fileio.c"
        var $25=HEAP[$24]; //@line 466 "fileio.c"
        var $26=((($25) - 1)&4294967295); //@line 466 "fileio.c"
        var $27=HEAP[$pos]; //@line 466 "fileio.c"
        var $28=(($27)&4294967295); //@line 466 "fileio.c"
        HEAP[$28]=$26; //@line 466 "fileio.c"
        var $29=HEAP[$pos]; //@line 466 "fileio.c"
        var $30=(($29)&4294967295); //@line 466 "fileio.c"
        var $31=HEAP[$30]; //@line 466 "fileio.c"
        var $32=((($31))|0)==0; //@line 466 "fileio.c"
        if ($32) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 466 "fileio.c"
      case 6: // $bb5
        var $33=HEAP[$pos]; //@line 466 "fileio.c"
        var $34=(($33+4)&4294967295); //@line 466 "fileio.c"
        var $35=HEAP[$34]; //@line 466 "fileio.c"
        var $36=(($35+24)&4294967295); //@line 466 "fileio.c"
        var $37=HEAP[$36]; //@line 466 "fileio.c"
        var $38=HEAP[$pos]; //@line 466 "fileio.c"
        FUNCTION_TABLE[$37]($38); //@line 466 "fileio.c"
        __label__ = 7; break; //@line 466 "fileio.c"
      case 7: // $bb6
        var $39=HEAP[$self_addr]; //@line 467 "fileio.c"
        var $40=(($39+12)&4294967295); //@line 467 "fileio.c"
        var $41=HEAP[$40]; //@line 467 "fileio.c"
        var $42=($41) & -13; //@line 467 "fileio.c"
        var $43=($42) | 4; //@line 467 "fileio.c"
        HEAP[$40]=$43; //@line 467 "fileio.c"
        __label__ = 8; break; //@line 467 "fileio.c"
      case 8: // $bb7
        var $44=HEAP[$self_addr]; //@line 470 "fileio.c"
        var $45=(($44+12)&4294967295); //@line 470 "fileio.c"
        var $46=HEAP[$45]; //@line 470 "fileio.c"
        var $47=($46) << 28; //@line 470 "fileio.c"
        var $48=((($47))|0) >> 30; //@line 470 "fileio.c"
        var $49=((($48)) & 3); //@line 470 "fileio.c"
        var $50=($49); //@line 470 "fileio.c"
        var $51=_PyBool_FromLong($50); //@line 470 "fileio.c"
        HEAP[$0]=$51; //@line 470 "fileio.c"
        __label__ = 9; break; //@line 470 "fileio.c"
      case 9: // $bb8
        var $52=HEAP[$0]; //@line 459 "fileio.c"
        HEAP[$retval]=$52; //@line 459 "fileio.c"
        __label__ = 10; break; //@line 459 "fileio.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 459 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 459 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_readinto($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 72; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 72);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $pbuf=__stackBase__+16;
        var $n=__stackBase__+68;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 479 "fileio.c"
        var $2=(($1+8)&4294967295); //@line 479 "fileio.c"
        var $3=HEAP[$2]; //@line 479 "fileio.c"
        var $4=((($3))|0) < 0; //@line 479 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 479 "fileio.c"
      case 1: // $bb
        var $5=_err_closed(); //@line 480 "fileio.c"
        HEAP[$0]=$5; //@line 480 "fileio.c"
        __label__ = 11; break; //@line 480 "fileio.c"
      case 2: // $bb1
        var $6=HEAP[$self_addr]; //@line 481 "fileio.c"
        var $7=(($6+12)&4294967295); //@line 481 "fileio.c"
        var $8=HEAP[$7]; //@line 481 "fileio.c"
        var $9=($8) << 31; //@line 481 "fileio.c"
        var $10=((($9))>>>0) >>> 31; //@line 481 "fileio.c"
        var $11=((($10)) & 1); //@line 481 "fileio.c"
        var $12=reSign(($11), 1, 0)==0; //@line 481 "fileio.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 481 "fileio.c"
      case 3: // $bb2
        var $13=_err_mode(((__str22139)&4294967295)); //@line 482 "fileio.c"
        HEAP[$0]=$13; //@line 482 "fileio.c"
        __label__ = 11; break; //@line 482 "fileio.c"
      case 4: // $bb3
        var $14=HEAP[$args_addr]; //@line 484 "fileio.c"
        var $15=__PyArg_ParseTuple_SizeT($14, ((__str23140)&4294967295), $pbuf); //@line 484 "fileio.c"
        var $16=((($15))|0)==0; //@line 484 "fileio.c"
        if ($16) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 484 "fileio.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 485 "fileio.c"
        __label__ = 11; break; //@line 485 "fileio.c"
      case 6: // $bb5
        var $17=___errno_location(); //@line 489 "fileio.c"
        HEAP[$17]=0; //@line 489 "fileio.c"
        var $18=(($pbuf+8)&4294967295); //@line 490 "fileio.c"
        var $19=HEAP[$18]; //@line 490 "fileio.c"
        var $20=(($pbuf)&4294967295); //@line 490 "fileio.c"
        var $21=HEAP[$20]; //@line 490 "fileio.c"
        var $22=HEAP[$self_addr]; //@line 490 "fileio.c"
        var $23=(($22+8)&4294967295); //@line 490 "fileio.c"
        var $24=HEAP[$23]; //@line 490 "fileio.c"
        var $25=_read($24, $21, $19); //@line 490 "fileio.c"
        HEAP[$n]=$25; //@line 490 "fileio.c"
        _PyBuffer_Release($pbuf); //@line 494 "fileio.c"
        var $26=HEAP[$n]; //@line 495 "fileio.c"
        var $27=((($26))|0) < 0; //@line 495 "fileio.c"
        if ($27) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 495 "fileio.c"
      case 7: // $bb6
        var $28=___errno_location(); //@line 496 "fileio.c"
        var $29=HEAP[$28]; //@line 496 "fileio.c"
        var $30=((($29))|0)==11; //@line 496 "fileio.c"
        if ($30) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 496 "fileio.c"
      case 8: // $bb7
        var $31=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 497 "fileio.c"
        var $32=((($31) + 1)&4294967295); //@line 497 "fileio.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$32; //@line 497 "fileio.c"
        HEAP[$0]=__Py_NoneStruct; //@line 497 "fileio.c"
        __label__ = 11; break; //@line 497 "fileio.c"
      case 9: // $bb8
        var $33=HEAP[_PyExc_IOError]; //@line 498 "fileio.c"
        var $34=_PyErr_SetFromErrno($33); //@line 498 "fileio.c"
        HEAP[$0]=0; //@line 499 "fileio.c"
        __label__ = 11; break; //@line 499 "fileio.c"
      case 10: // $bb9
        var $35=HEAP[$n]; //@line 502 "fileio.c"
        var $36=_PyLong_FromSsize_t($35); //@line 502 "fileio.c"
        HEAP[$0]=$36; //@line 502 "fileio.c"
        __label__ = 11; break; //@line 502 "fileio.c"
      case 11: // $bb10
        var $37=HEAP[$0]; //@line 480 "fileio.c"
        HEAP[$retval]=$37; //@line 480 "fileio.c"
        __label__ = 12; break; //@line 480 "fileio.c"
      case 12: // $return
        var $retval11=HEAP[$retval]; //@line 480 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 480 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _new_buffersize($self, $currentsize) {
    var __stackBase__  = STACKTOP; STACKTOP += 128; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 128);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $currentsize_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $pos=__stackBase__+16;
        var $end=__stackBase__+24;
        var $st=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$currentsize_addr]=$currentsize;
        var $1=HEAP[$self_addr]; //@line 511 "fileio.c"
        var $2=(($1+8)&4294967295); //@line 511 "fileio.c"
        var $3=HEAP[$2]; //@line 511 "fileio.c"
        var $4=___01fstat64_($3, $st); //@line 511 "fileio.c"
        var $5=((($4))|0)==0; //@line 511 "fileio.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 511 "fileio.c"
      case 1: // $bb
        var $6=(($st+44)&4294967295); //@line 512 "fileio.c"
        var $7=HEAP[$6]; //@line 512 "fileio.c"
        HEAP[$end]=$7; //@line 512 "fileio.c"
        var $8=HEAP[$self_addr]; //@line 513 "fileio.c"
        var $9=(($8+8)&4294967295); //@line 513 "fileio.c"
        var $10=HEAP[$9]; //@line 513 "fileio.c"
        var $11=___01lseek64_($10, 0, 1); //@line 513 "fileio.c"
        HEAP[$pos]=$11; //@line 513 "fileio.c"
        var $12=HEAP[$end]; //@line 518 "fileio.c"
        var $13=reSign(($12), 64, 0) > 8191; //@line 518 "fileio.c"
        if ($13) { __label__ = 2; break; } else { __label__ = 5; break; } //@line 518 "fileio.c"
      case 2: // $bb1
        var $14=HEAP[$end]; //@line 518 "fileio.c"
        var $15=HEAP[$pos]; //@line 518 "fileio.c"
        var $16=reSign(($14), 64, 0) >= reSign(($15), 64, 0); //@line 518 "fileio.c"
        if ($16) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 518 "fileio.c"
      case 3: // $bb2
        var $17=HEAP[$pos]; //@line 518 "fileio.c"
        var $18=reSign(($17), 64, 0) >= 0; //@line 518 "fileio.c"
        if ($18) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 518 "fileio.c"
      case 4: // $bb3
        var $19=HEAP[$end]; //@line 520 "fileio.c"
        var $20=((($19)) & 4294967295); //@line 520 "fileio.c"
        var $21=HEAP[$currentsize_addr]; //@line 520 "fileio.c"
        var $22=((($20) + ($21))&4294967295); //@line 520 "fileio.c"
        var $23=HEAP[$pos]; //@line 520 "fileio.c"
        var $24=((($23)) & 4294967295); //@line 520 "fileio.c"
        var $25=((($22) - ($24))&4294967295); //@line 520 "fileio.c"
        var $26=((($25) + 1)&4294967295); //@line 520 "fileio.c"
        HEAP[$0]=$26; //@line 520 "fileio.c"
        __label__ = 10; break; //@line 520 "fileio.c"
      case 5: // $bb4
        var $27=HEAP[$currentsize_addr]; //@line 524 "fileio.c"
        var $28=((($27))>>>0) > 8192; //@line 524 "fileio.c"
        if ($28) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 524 "fileio.c"
      case 6: // $bb5
        var $29=HEAP[$currentsize_addr]; //@line 527 "fileio.c"
        var $30=((($29))>>>0) <= 524288; //@line 527 "fileio.c"
        if ($30) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 527 "fileio.c"
      case 7: // $bb6
        var $31=HEAP[$currentsize_addr]; //@line 528 "fileio.c"
        var $32=HEAP[$currentsize_addr]; //@line 528 "fileio.c"
        var $33=((($31) + ($32))&4294967295); //@line 528 "fileio.c"
        HEAP[$0]=$33; //@line 528 "fileio.c"
        __label__ = 10; break; //@line 528 "fileio.c"
      case 8: // $bb7
        var $34=HEAP[$currentsize_addr]; //@line 530 "fileio.c"
        var $35=((($34) + 524288)&4294967295); //@line 530 "fileio.c"
        HEAP[$0]=$35; //@line 530 "fileio.c"
        __label__ = 10; break; //@line 530 "fileio.c"
      case 9: // $bb8
        var $36=HEAP[$currentsize_addr]; //@line 532 "fileio.c"
        var $37=((($36) + 8192)&4294967295); //@line 532 "fileio.c"
        HEAP[$0]=$37; //@line 532 "fileio.c"
        __label__ = 10; break; //@line 532 "fileio.c"
      case 10: // $bb9
        var $38=HEAP[$0]; //@line 520 "fileio.c"
        HEAP[$retval]=$38; //@line 520 "fileio.c"
        __label__ = 11; break; //@line 520 "fileio.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 520 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 520 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_readall($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $result=__stackBase__+12;
        var $total=__stackBase__+16;
        var $n=__stackBase__+20;
        var $newsize=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$total]=0; //@line 539 "fileio.c"
        var $1=HEAP[$self_addr]; //@line 542 "fileio.c"
        var $2=(($1+8)&4294967295); //@line 542 "fileio.c"
        var $3=HEAP[$2]; //@line 542 "fileio.c"
        var $4=((($3))|0) < 0; //@line 542 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 542 "fileio.c"
      case 1: // $bb
        var $5=_err_closed(); //@line 543 "fileio.c"
        HEAP[$0]=$5; //@line 543 "fileio.c"
        __label__ = 33; break; //@line 543 "fileio.c"
      case 2: // $bb1
        var $6=_PyString_FromStringAndSize(0, 8192); //@line 547 "fileio.c"
        HEAP[$result]=$6; //@line 547 "fileio.c"
        var $7=HEAP[$result]; //@line 548 "fileio.c"
        var $8=($7)==0; //@line 548 "fileio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 548 "fileio.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 549 "fileio.c"
        __label__ = 33; break; //@line 549 "fileio.c"
      case 4: // $bb3
        var $9=HEAP[$total]; //@line 552 "fileio.c"
        var $10=HEAP[$self_addr]; //@line 552 "fileio.c"
        var $11=_new_buffersize($10, $9); //@line 552 "fileio.c"
        HEAP[$newsize]=$11; //@line 552 "fileio.c"
        var $12=HEAP[$newsize]; //@line 553 "fileio.c"
        var $13=((($12))|0) < 0; //@line 553 "fileio.c"
        if ($13) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 553 "fileio.c"
      case 5: // $bb4
        var $14=HEAP[$newsize]; //@line 553 "fileio.c"
        var $15=((($14))|0)==0; //@line 553 "fileio.c"
        if ($15) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 553 "fileio.c"
      case 6: // $bb5
        var $16=HEAP[_PyExc_OverflowError]; //@line 554 "fileio.c"
        _PyErr_SetString($16, ((__str24141)&4294967295)); //@line 554 "fileio.c"
        var $17=HEAP[$result]; //@line 557 "fileio.c"
        var $18=(($17)&4294967295); //@line 557 "fileio.c"
        var $19=HEAP[$18]; //@line 557 "fileio.c"
        var $20=((($19) - 1)&4294967295); //@line 557 "fileio.c"
        var $21=(($17)&4294967295); //@line 557 "fileio.c"
        HEAP[$21]=$20; //@line 557 "fileio.c"
        var $22=(($17)&4294967295); //@line 557 "fileio.c"
        var $23=HEAP[$22]; //@line 557 "fileio.c"
        var $24=((($23))|0)==0; //@line 557 "fileio.c"
        if ($24) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 557 "fileio.c"
      case 7: // $bb6
        var $25=HEAP[$result]; //@line 557 "fileio.c"
        var $26=(($25+4)&4294967295); //@line 557 "fileio.c"
        var $27=HEAP[$26]; //@line 557 "fileio.c"
        var $28=(($27+24)&4294967295); //@line 557 "fileio.c"
        var $29=HEAP[$28]; //@line 557 "fileio.c"
        var $30=HEAP[$result]; //@line 557 "fileio.c"
        FUNCTION_TABLE[$29]($30); //@line 557 "fileio.c"
        __label__ = 8; break; //@line 557 "fileio.c"
      case 8: // $bb7
        HEAP[$0]=0; //@line 558 "fileio.c"
        __label__ = 33; break; //@line 558 "fileio.c"
      case 9: // $bb8
        var $31=HEAP[$result]; //@line 561 "fileio.c"
        var $32=$31; //@line 561 "fileio.c"
        var $33=(($32+8)&4294967295); //@line 561 "fileio.c"
        var $34=HEAP[$33]; //@line 561 "fileio.c"
        var $35=HEAP[$newsize]; //@line 561 "fileio.c"
        var $36=((($34))|0) < ((($35))|0); //@line 561 "fileio.c"
        if ($36) { __label__ = 10; break; } else { __label__ = 16; break; } //@line 561 "fileio.c"
      case 10: // $bb9
        var $37=HEAP[$newsize]; //@line 562 "fileio.c"
        var $38=__PyString_Resize($result, $37); //@line 562 "fileio.c"
        var $39=((($38))|0) < 0; //@line 562 "fileio.c"
        if ($39) { __label__ = 11; break; } else { __label__ = 16; break; } //@line 562 "fileio.c"
      case 11: // $bb10
        var $40=HEAP[$total]; //@line 563 "fileio.c"
        var $41=((($40))|0)==0; //@line 563 "fileio.c"
        if ($41) { __label__ = 12; break; } else { __label__ = 15; break; } //@line 563 "fileio.c"
      case 12: // $bb11
        var $42=HEAP[$result]; //@line 564 "fileio.c"
        var $43=(($42)&4294967295); //@line 564 "fileio.c"
        var $44=HEAP[$43]; //@line 564 "fileio.c"
        var $45=((($44) - 1)&4294967295); //@line 564 "fileio.c"
        var $46=(($42)&4294967295); //@line 564 "fileio.c"
        HEAP[$46]=$45; //@line 564 "fileio.c"
        var $47=(($42)&4294967295); //@line 564 "fileio.c"
        var $48=HEAP[$47]; //@line 564 "fileio.c"
        var $49=((($48))|0)==0; //@line 564 "fileio.c"
        if ($49) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 564 "fileio.c"
      case 13: // $bb12
        var $50=HEAP[$result]; //@line 564 "fileio.c"
        var $51=(($50+4)&4294967295); //@line 564 "fileio.c"
        var $52=HEAP[$51]; //@line 564 "fileio.c"
        var $53=(($52+24)&4294967295); //@line 564 "fileio.c"
        var $54=HEAP[$53]; //@line 564 "fileio.c"
        var $55=HEAP[$result]; //@line 564 "fileio.c"
        FUNCTION_TABLE[$54]($55); //@line 564 "fileio.c"
        __label__ = 14; break; //@line 564 "fileio.c"
      case 14: // $bb13
        HEAP[$0]=0; //@line 565 "fileio.c"
        __label__ = 33; break; //@line 565 "fileio.c"
      case 15: // $bb14
        _PyErr_Clear(); //@line 567 "fileio.c"
        __label__ = 27; break; //@line 567 "fileio.c"
      case 16: // $bb15
        var $56=___errno_location(); //@line 572 "fileio.c"
        HEAP[$56]=0; //@line 572 "fileio.c"
        var $57=HEAP[$total]; //@line 573 "fileio.c"
        var $58=HEAP[$newsize]; //@line 573 "fileio.c"
        var $59=((($58) - ($57))&4294967295); //@line 573 "fileio.c"
        var $60=HEAP[$result]; //@line 573 "fileio.c"
        var $61=$60; //@line 573 "fileio.c"
        var $62=(($61+20)&4294967295); //@line 573 "fileio.c"
        var $63=(($62)&4294967295); //@line 573 "fileio.c"
        var $64=HEAP[$total]; //@line 573 "fileio.c"
        var $65=(($63+$64)&4294967295); //@line 573 "fileio.c"
        var $66=HEAP[$self_addr]; //@line 573 "fileio.c"
        var $67=(($66+8)&4294967295); //@line 573 "fileio.c"
        var $68=HEAP[$67]; //@line 573 "fileio.c"
        var $69=_read($68, $65, $59); //@line 573 "fileio.c"
        HEAP[$n]=$69; //@line 573 "fileio.c"
        var $70=HEAP[$n]; //@line 577 "fileio.c"
        var $71=((($70))|0)==0; //@line 577 "fileio.c"
        if ($71) { __label__ = 27; break; } else { __label__ = 17; break; } //@line 577 "fileio.c"
      case 17: // $bb16
        var $72=HEAP[$n]; //@line 579 "fileio.c"
        var $73=((($72))|0) < 0; //@line 579 "fileio.c"
        if ($73) { __label__ = 18; break; } else { __label__ = 26; break; } //@line 579 "fileio.c"
      case 18: // $bb17
        var $74=HEAP[$total]; //@line 580 "fileio.c"
        var $75=((($74))|0) > 0; //@line 580 "fileio.c"
        if ($75) { __label__ = 27; break; } else { __label__ = 19; break; } //@line 580 "fileio.c"
      case 19: // $bb18
        var $76=___errno_location(); //@line 582 "fileio.c"
        var $77=HEAP[$76]; //@line 582 "fileio.c"
        var $78=((($77))|0)==11; //@line 582 "fileio.c"
        if ($78) { __label__ = 20; break; } else { __label__ = 23; break; } //@line 582 "fileio.c"
      case 20: // $bb19
        var $79=HEAP[$result]; //@line 583 "fileio.c"
        var $80=(($79)&4294967295); //@line 583 "fileio.c"
        var $81=HEAP[$80]; //@line 583 "fileio.c"
        var $82=((($81) - 1)&4294967295); //@line 583 "fileio.c"
        var $83=(($79)&4294967295); //@line 583 "fileio.c"
        HEAP[$83]=$82; //@line 583 "fileio.c"
        var $84=(($79)&4294967295); //@line 583 "fileio.c"
        var $85=HEAP[$84]; //@line 583 "fileio.c"
        var $86=((($85))|0)==0; //@line 583 "fileio.c"
        if ($86) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 583 "fileio.c"
      case 21: // $bb20
        var $87=HEAP[$result]; //@line 583 "fileio.c"
        var $88=(($87+4)&4294967295); //@line 583 "fileio.c"
        var $89=HEAP[$88]; //@line 583 "fileio.c"
        var $90=(($89+24)&4294967295); //@line 583 "fileio.c"
        var $91=HEAP[$90]; //@line 583 "fileio.c"
        var $92=HEAP[$result]; //@line 583 "fileio.c"
        FUNCTION_TABLE[$91]($92); //@line 583 "fileio.c"
        __label__ = 22; break; //@line 583 "fileio.c"
      case 22: // $bb21
        var $93=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 584 "fileio.c"
        var $94=((($93) + 1)&4294967295); //@line 584 "fileio.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$94; //@line 584 "fileio.c"
        HEAP[$0]=__Py_NoneStruct; //@line 584 "fileio.c"
        __label__ = 33; break; //@line 584 "fileio.c"
      case 23: // $bb22
        var $95=HEAP[$result]; //@line 586 "fileio.c"
        var $96=(($95)&4294967295); //@line 586 "fileio.c"
        var $97=HEAP[$96]; //@line 586 "fileio.c"
        var $98=((($97) - 1)&4294967295); //@line 586 "fileio.c"
        var $99=(($95)&4294967295); //@line 586 "fileio.c"
        HEAP[$99]=$98; //@line 586 "fileio.c"
        var $100=(($95)&4294967295); //@line 586 "fileio.c"
        var $101=HEAP[$100]; //@line 586 "fileio.c"
        var $102=((($101))|0)==0; //@line 586 "fileio.c"
        if ($102) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 586 "fileio.c"
      case 24: // $bb23
        var $103=HEAP[$result]; //@line 586 "fileio.c"
        var $104=(($103+4)&4294967295); //@line 586 "fileio.c"
        var $105=HEAP[$104]; //@line 586 "fileio.c"
        var $106=(($105+24)&4294967295); //@line 586 "fileio.c"
        var $107=HEAP[$106]; //@line 586 "fileio.c"
        var $108=HEAP[$result]; //@line 586 "fileio.c"
        FUNCTION_TABLE[$107]($108); //@line 586 "fileio.c"
        __label__ = 25; break; //@line 586 "fileio.c"
      case 25: // $bb24
        var $109=HEAP[_PyExc_IOError]; //@line 587 "fileio.c"
        var $110=_PyErr_SetFromErrno($109); //@line 587 "fileio.c"
        HEAP[$0]=0; //@line 588 "fileio.c"
        __label__ = 33; break; //@line 588 "fileio.c"
      case 26: // $bb25
        var $111=HEAP[$total]; //@line 590 "fileio.c"
        var $112=HEAP[$n]; //@line 590 "fileio.c"
        var $113=((($111) + ($112))&4294967295); //@line 590 "fileio.c"
        HEAP[$total]=$113; //@line 590 "fileio.c"
        __label__ = 4; break; //@line 590 "fileio.c"
      case 27: // $bb26
        var $114=HEAP[$result]; //@line 593 "fileio.c"
        var $115=$114; //@line 593 "fileio.c"
        var $116=(($115+8)&4294967295); //@line 593 "fileio.c"
        var $117=HEAP[$116]; //@line 593 "fileio.c"
        var $118=HEAP[$total]; //@line 593 "fileio.c"
        var $119=((($117))|0) > ((($118))|0); //@line 593 "fileio.c"
        if ($119) { __label__ = 28; break; } else { __label__ = 32; break; } //@line 593 "fileio.c"
      case 28: // $bb27
        var $120=HEAP[$total]; //@line 594 "fileio.c"
        var $121=__PyString_Resize($result, $120); //@line 594 "fileio.c"
        var $122=((($121))|0) < 0; //@line 594 "fileio.c"
        if ($122) { __label__ = 29; break; } else { __label__ = 32; break; } //@line 594 "fileio.c"
      case 29: // $bb28
        var $123=HEAP[$result]; //@line 596 "fileio.c"
        var $124=(($123)&4294967295); //@line 596 "fileio.c"
        var $125=HEAP[$124]; //@line 596 "fileio.c"
        var $126=((($125) - 1)&4294967295); //@line 596 "fileio.c"
        var $127=(($123)&4294967295); //@line 596 "fileio.c"
        HEAP[$127]=$126; //@line 596 "fileio.c"
        var $128=(($123)&4294967295); //@line 596 "fileio.c"
        var $129=HEAP[$128]; //@line 596 "fileio.c"
        var $130=((($129))|0)==0; //@line 596 "fileio.c"
        if ($130) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 596 "fileio.c"
      case 30: // $bb29
        var $131=HEAP[$result]; //@line 596 "fileio.c"
        var $132=(($131+4)&4294967295); //@line 596 "fileio.c"
        var $133=HEAP[$132]; //@line 596 "fileio.c"
        var $134=(($133+24)&4294967295); //@line 596 "fileio.c"
        var $135=HEAP[$134]; //@line 596 "fileio.c"
        var $136=HEAP[$result]; //@line 596 "fileio.c"
        FUNCTION_TABLE[$135]($136); //@line 596 "fileio.c"
        __label__ = 31; break; //@line 596 "fileio.c"
      case 31: // $bb30
        HEAP[$0]=0; //@line 597 "fileio.c"
        __label__ = 33; break; //@line 597 "fileio.c"
      case 32: // $bb31
        var $137=HEAP[$result]; //@line 600 "fileio.c"
        HEAP[$0]=$137; //@line 600 "fileio.c"
        __label__ = 33; break; //@line 600 "fileio.c"
      case 33: // $bb32
        var $138=HEAP[$0]; //@line 543 "fileio.c"
        HEAP[$retval]=$138; //@line 543 "fileio.c"
        __label__ = 34; break; //@line 543 "fileio.c"
      case 34: // $return
        var $retval33=HEAP[$retval]; //@line 543 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval33; //@line 543 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_read($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $ptr=__stackBase__+16;
        var $n=__stackBase__+20;
        var $size=__stackBase__+24;
        var $bytes=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$size]=-1; //@line 608 "fileio.c"
        var $1=HEAP[$self_addr]; //@line 611 "fileio.c"
        var $2=(($1+8)&4294967295); //@line 611 "fileio.c"
        var $3=HEAP[$2]; //@line 611 "fileio.c"
        var $4=((($3))|0) < 0; //@line 611 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 611 "fileio.c"
      case 1: // $bb
        var $5=_err_closed(); //@line 612 "fileio.c"
        HEAP[$0]=$5; //@line 612 "fileio.c"
        __label__ = 22; break; //@line 612 "fileio.c"
      case 2: // $bb1
        var $6=HEAP[$self_addr]; //@line 613 "fileio.c"
        var $7=(($6+12)&4294967295); //@line 613 "fileio.c"
        var $8=HEAP[$7]; //@line 613 "fileio.c"
        var $9=($8) << 31; //@line 613 "fileio.c"
        var $10=((($9))>>>0) >>> 31; //@line 613 "fileio.c"
        var $11=((($10)) & 1); //@line 613 "fileio.c"
        var $12=reSign(($11), 1, 0)==0; //@line 613 "fileio.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 613 "fileio.c"
      case 3: // $bb2
        var $13=_err_mode(((__str22139)&4294967295)); //@line 614 "fileio.c"
        HEAP[$0]=$13; //@line 614 "fileio.c"
        __label__ = 22; break; //@line 614 "fileio.c"
      case 4: // $bb3
        var $14=HEAP[$args_addr]; //@line 616 "fileio.c"
        var $15=__PyArg_ParseTuple_SizeT($14, ((__str25142)&4294967295), (FUNCTION_TABLE_OFFSET + 2), $size); //@line 616 "fileio.c"
        var $16=((($15))|0)==0; //@line 616 "fileio.c"
        if ($16) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 616 "fileio.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 617 "fileio.c"
        __label__ = 22; break; //@line 617 "fileio.c"
      case 6: // $bb5
        var $17=HEAP[$size]; //@line 619 "fileio.c"
        var $18=((($17))|0) < 0; //@line 619 "fileio.c"
        if ($18) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 619 "fileio.c"
      case 7: // $bb6
        var $19=HEAP[$self_addr]; //@line 620 "fileio.c"
        var $20=_fileio_readall($19); //@line 620 "fileio.c"
        HEAP[$0]=$20; //@line 620 "fileio.c"
        __label__ = 22; break; //@line 620 "fileio.c"
      case 8: // $bb7
        var $21=HEAP[$size]; //@line 623 "fileio.c"
        var $22=_PyString_FromStringAndSize(0, $21); //@line 623 "fileio.c"
        HEAP[$bytes]=$22; //@line 623 "fileio.c"
        var $23=HEAP[$bytes]; //@line 624 "fileio.c"
        var $24=($23)==0; //@line 624 "fileio.c"
        if ($24) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 624 "fileio.c"
      case 9: // $bb8
        HEAP[$0]=0; //@line 625 "fileio.c"
        __label__ = 22; break; //@line 625 "fileio.c"
      case 10: // $bb9
        var $25=HEAP[$bytes]; //@line 626 "fileio.c"
        var $26=$25; //@line 626 "fileio.c"
        var $27=(($26+20)&4294967295); //@line 626 "fileio.c"
        var $28=(($27)&4294967295); //@line 626 "fileio.c"
        HEAP[$ptr]=$28; //@line 626 "fileio.c"
        var $29=___errno_location(); //@line 630 "fileio.c"
        HEAP[$29]=0; //@line 630 "fileio.c"
        var $30=HEAP[$size]; //@line 631 "fileio.c"
        var $31=HEAP[$self_addr]; //@line 631 "fileio.c"
        var $32=(($31+8)&4294967295); //@line 631 "fileio.c"
        var $33=HEAP[$32]; //@line 631 "fileio.c"
        var $34=HEAP[$ptr]; //@line 631 "fileio.c"
        var $35=_read($33, $34, $30); //@line 631 "fileio.c"
        HEAP[$n]=$35; //@line 631 "fileio.c"
        var $36=HEAP[$n]; //@line 636 "fileio.c"
        var $37=((($36))|0) < 0; //@line 636 "fileio.c"
        if ($37) { __label__ = 11; break; } else { __label__ = 16; break; } //@line 636 "fileio.c"
      case 11: // $bb10
        var $38=HEAP[$bytes]; //@line 637 "fileio.c"
        var $39=(($38)&4294967295); //@line 637 "fileio.c"
        var $40=HEAP[$39]; //@line 637 "fileio.c"
        var $41=((($40) - 1)&4294967295); //@line 637 "fileio.c"
        var $42=(($38)&4294967295); //@line 637 "fileio.c"
        HEAP[$42]=$41; //@line 637 "fileio.c"
        var $43=(($38)&4294967295); //@line 637 "fileio.c"
        var $44=HEAP[$43]; //@line 637 "fileio.c"
        var $45=((($44))|0)==0; //@line 637 "fileio.c"
        if ($45) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 637 "fileio.c"
      case 12: // $bb11
        var $46=HEAP[$bytes]; //@line 637 "fileio.c"
        var $47=(($46+4)&4294967295); //@line 637 "fileio.c"
        var $48=HEAP[$47]; //@line 637 "fileio.c"
        var $49=(($48+24)&4294967295); //@line 637 "fileio.c"
        var $50=HEAP[$49]; //@line 637 "fileio.c"
        var $51=HEAP[$bytes]; //@line 637 "fileio.c"
        FUNCTION_TABLE[$50]($51); //@line 637 "fileio.c"
        __label__ = 13; break; //@line 637 "fileio.c"
      case 13: // $bb12
        var $52=___errno_location(); //@line 638 "fileio.c"
        var $53=HEAP[$52]; //@line 638 "fileio.c"
        var $54=((($53))|0)==11; //@line 638 "fileio.c"
        if ($54) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 638 "fileio.c"
      case 14: // $bb13
        var $55=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 639 "fileio.c"
        var $56=((($55) + 1)&4294967295); //@line 639 "fileio.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$56; //@line 639 "fileio.c"
        HEAP[$0]=__Py_NoneStruct; //@line 639 "fileio.c"
        __label__ = 22; break; //@line 639 "fileio.c"
      case 15: // $bb14
        var $57=HEAP[_PyExc_IOError]; //@line 640 "fileio.c"
        var $58=_PyErr_SetFromErrno($57); //@line 640 "fileio.c"
        HEAP[$0]=0; //@line 641 "fileio.c"
        __label__ = 22; break; //@line 641 "fileio.c"
      case 16: // $bb15
        var $59=HEAP[$size]; //@line 644 "fileio.c"
        var $60=HEAP[$n]; //@line 644 "fileio.c"
        var $61=((($60))|0)!=((($59))|0); //@line 644 "fileio.c"
        if ($61) { __label__ = 17; break; } else { __label__ = 21; break; } //@line 644 "fileio.c"
      case 17: // $bb16
        var $62=HEAP[$n]; //@line 645 "fileio.c"
        var $63=__PyString_Resize($bytes, $62); //@line 645 "fileio.c"
        var $64=((($63))|0) < 0; //@line 645 "fileio.c"
        if ($64) { __label__ = 18; break; } else { __label__ = 21; break; } //@line 645 "fileio.c"
      case 18: // $bb17
        var $65=HEAP[$bytes]; //@line 646 "fileio.c"
        var $66=(($65)&4294967295); //@line 646 "fileio.c"
        var $67=HEAP[$66]; //@line 646 "fileio.c"
        var $68=((($67) - 1)&4294967295); //@line 646 "fileio.c"
        var $69=(($65)&4294967295); //@line 646 "fileio.c"
        HEAP[$69]=$68; //@line 646 "fileio.c"
        var $70=(($65)&4294967295); //@line 646 "fileio.c"
        var $71=HEAP[$70]; //@line 646 "fileio.c"
        var $72=((($71))|0)==0; //@line 646 "fileio.c"
        if ($72) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 646 "fileio.c"
      case 19: // $bb18
        var $73=HEAP[$bytes]; //@line 646 "fileio.c"
        var $74=(($73+4)&4294967295); //@line 646 "fileio.c"
        var $75=HEAP[$74]; //@line 646 "fileio.c"
        var $76=(($75+24)&4294967295); //@line 646 "fileio.c"
        var $77=HEAP[$76]; //@line 646 "fileio.c"
        var $78=HEAP[$bytes]; //@line 646 "fileio.c"
        FUNCTION_TABLE[$77]($78); //@line 646 "fileio.c"
        __label__ = 20; break; //@line 646 "fileio.c"
      case 20: // $bb19
        HEAP[$0]=0; //@line 647 "fileio.c"
        __label__ = 22; break; //@line 647 "fileio.c"
      case 21: // $bb20
        var $79=HEAP[$bytes]; //@line 651 "fileio.c"
        HEAP[$0]=$79; //@line 651 "fileio.c"
        __label__ = 22; break; //@line 651 "fileio.c"
      case 22: // $bb21
        var $80=HEAP[$0]; //@line 612 "fileio.c"
        HEAP[$retval]=$80; //@line 612 "fileio.c"
        __label__ = 23; break; //@line 612 "fileio.c"
      case 23: // $return
        var $retval22=HEAP[$retval]; //@line 612 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval22; //@line 612 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_write($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 72; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 72);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $pbuf=__stackBase__+16;
        var $n=__stackBase__+68;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 660 "fileio.c"
        var $2=(($1+8)&4294967295); //@line 660 "fileio.c"
        var $3=HEAP[$2]; //@line 660 "fileio.c"
        var $4=((($3))|0) < 0; //@line 660 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 660 "fileio.c"
      case 1: // $bb
        var $5=_err_closed(); //@line 661 "fileio.c"
        HEAP[$0]=$5; //@line 661 "fileio.c"
        __label__ = 11; break; //@line 661 "fileio.c"
      case 2: // $bb1
        var $6=HEAP[$self_addr]; //@line 662 "fileio.c"
        var $7=(($6+12)&4294967295); //@line 662 "fileio.c"
        var $8=HEAP[$7]; //@line 662 "fileio.c"
        var $9=($8) << 30; //@line 662 "fileio.c"
        var $10=((($9))>>>0) >>> 31; //@line 662 "fileio.c"
        var $11=((($10)) & 1); //@line 662 "fileio.c"
        var $12=reSign(($11), 1, 0)==0; //@line 662 "fileio.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 662 "fileio.c"
      case 3: // $bb2
        var $13=_err_mode(((__str26143)&4294967295)); //@line 663 "fileio.c"
        HEAP[$0]=$13; //@line 663 "fileio.c"
        __label__ = 11; break; //@line 663 "fileio.c"
      case 4: // $bb3
        var $14=HEAP[$args_addr]; //@line 665 "fileio.c"
        var $15=__PyArg_ParseTuple_SizeT($14, ((__str27144)&4294967295), $pbuf); //@line 665 "fileio.c"
        var $16=((($15))|0)==0; //@line 665 "fileio.c"
        if ($16) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 665 "fileio.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 666 "fileio.c"
        __label__ = 11; break; //@line 666 "fileio.c"
      case 6: // $bb5
        var $17=___errno_location(); //@line 670 "fileio.c"
        HEAP[$17]=0; //@line 670 "fileio.c"
        var $18=(($pbuf+8)&4294967295); //@line 671 "fileio.c"
        var $19=HEAP[$18]; //@line 671 "fileio.c"
        var $20=(($pbuf)&4294967295); //@line 671 "fileio.c"
        var $21=HEAP[$20]; //@line 671 "fileio.c"
        var $22=HEAP[$self_addr]; //@line 671 "fileio.c"
        var $23=(($22+8)&4294967295); //@line 671 "fileio.c"
        var $24=HEAP[$23]; //@line 671 "fileio.c"
        var $25=_write($24, $21, $19); //@line 671 "fileio.c"
        HEAP[$n]=$25; //@line 671 "fileio.c"
        _PyBuffer_Release($pbuf); //@line 676 "fileio.c"
        var $26=HEAP[$n]; //@line 678 "fileio.c"
        var $27=((($26))|0) < 0; //@line 678 "fileio.c"
        if ($27) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 678 "fileio.c"
      case 7: // $bb6
        var $28=___errno_location(); //@line 679 "fileio.c"
        var $29=HEAP[$28]; //@line 679 "fileio.c"
        var $30=((($29))|0)==11; //@line 679 "fileio.c"
        if ($30) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 679 "fileio.c"
      case 8: // $bb7
        var $31=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 680 "fileio.c"
        var $32=((($31) + 1)&4294967295); //@line 680 "fileio.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$32; //@line 680 "fileio.c"
        HEAP[$0]=__Py_NoneStruct; //@line 680 "fileio.c"
        __label__ = 11; break; //@line 680 "fileio.c"
      case 9: // $bb8
        var $33=HEAP[_PyExc_IOError]; //@line 681 "fileio.c"
        var $34=_PyErr_SetFromErrno($33); //@line 681 "fileio.c"
        HEAP[$0]=0; //@line 682 "fileio.c"
        __label__ = 11; break; //@line 682 "fileio.c"
      case 10: // $bb9
        var $35=HEAP[$n]; //@line 685 "fileio.c"
        var $36=_PyLong_FromSsize_t($35); //@line 685 "fileio.c"
        HEAP[$0]=$36; //@line 685 "fileio.c"
        __label__ = 11; break; //@line 685 "fileio.c"
      case 11: // $bb10
        var $37=HEAP[$0]; //@line 661 "fileio.c"
        HEAP[$retval]=$37; //@line 661 "fileio.c"
        __label__ = 12; break; //@line 661 "fileio.c"
      case 12: // $return
        var $retval11=HEAP[$retval]; //@line 661 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 661 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _portable_lseek($fd, $posobj, $whence) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $fd_addr=__stackBase__;
        var $posobj_addr=__stackBase__+4;
        var $whence_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $pos=__stackBase__+20;
        var $res=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$fd_addr]=$fd;
        HEAP[$posobj_addr]=$posobj;
        HEAP[$whence_addr]=$whence;
        var $1=HEAP[$posobj_addr]; //@line 711 "fileio.c"
        var $2=($1)==0; //@line 711 "fileio.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 711 "fileio.c"
      case 1: // $bb
        HEAP[$pos]=0; //@line 712 "fileio.c"
        __label__ = 7; break; //@line 712 "fileio.c"
      case 2: // $bb1
        var $3=HEAP[$posobj_addr]; //@line 714 "fileio.c"
        var $4=(($3+4)&4294967295); //@line 714 "fileio.c"
        var $5=HEAP[$4]; //@line 714 "fileio.c"
        var $6=($5)==(_PyFloat_Type); //@line 714 "fileio.c"
        if ($6) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 714 "fileio.c"
      case 3: // $bb2
        var $7=HEAP[$posobj_addr]; //@line 714 "fileio.c"
        var $8=(($7+4)&4294967295); //@line 714 "fileio.c"
        var $9=HEAP[$8]; //@line 714 "fileio.c"
        var $10=_PyType_IsSubtype($9, _PyFloat_Type); //@line 714 "fileio.c"
        var $11=((($10))|0)!=0; //@line 714 "fileio.c"
        if ($11) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 714 "fileio.c"
      case 4: // $bb3
        var $12=HEAP[_PyExc_TypeError]; //@line 715 "fileio.c"
        _PyErr_SetString($12, ((__str28145)&4294967295)); //@line 715 "fileio.c"
        HEAP[$0]=0; //@line 716 "fileio.c"
        __label__ = 10; break; //@line 716 "fileio.c"
      case 5: // $bb4
        var $13=HEAP[$posobj_addr]; //@line 719 "fileio.c"
        var $14=_PyLong_AsLongLong($13); //@line 719 "fileio.c"
        HEAP[$pos]=$14; //@line 719 "fileio.c"
        var $15=_PyErr_Occurred(); //@line 723 "fileio.c"
        var $16=($15)!=0; //@line 723 "fileio.c"
        if ($16) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 723 "fileio.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 724 "fileio.c"
        __label__ = 10; break; //@line 724 "fileio.c"
      case 7: // $bb6
        var $17=HEAP[$fd_addr]; //@line 732 "fileio.c"
        var $18=HEAP[$pos]; //@line 732 "fileio.c"
        var $19=HEAP[$whence_addr]; //@line 732 "fileio.c"
        var $20=___01lseek64_($17, $18, $19); //@line 732 "fileio.c"
        HEAP[$res]=$20; //@line 732 "fileio.c"
        var $21=HEAP[$res]; //@line 737 "fileio.c"
        var $22=reSign(($21), 64, 0) < 0; //@line 737 "fileio.c"
        if ($22) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 737 "fileio.c"
      case 8: // $bb7
        var $23=HEAP[_PyExc_IOError]; //@line 738 "fileio.c"
        var $24=_PyErr_SetFromErrno($23); //@line 738 "fileio.c"
        HEAP[$0]=$24; //@line 738 "fileio.c"
        __label__ = 10; break; //@line 738 "fileio.c"
      case 9: // $bb8
        var $25=HEAP[$res]; //@line 741 "fileio.c"
        var $26=_PyLong_FromLongLong($25); //@line 741 "fileio.c"
        HEAP[$0]=$26; //@line 741 "fileio.c"
        __label__ = 10; break; //@line 741 "fileio.c"
      case 10: // $bb9
        var $27=HEAP[$0]; //@line 716 "fileio.c"
        HEAP[$retval]=$27; //@line 716 "fileio.c"
        __label__ = 11; break; //@line 716 "fileio.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 716 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 716 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_seek($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $posobj=__stackBase__+16;
        var $whence=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$whence]=0; //@line 751 "fileio.c"
        var $1=HEAP[$self_addr]; //@line 753 "fileio.c"
        var $2=(($1+8)&4294967295); //@line 753 "fileio.c"
        var $3=HEAP[$2]; //@line 753 "fileio.c"
        var $4=((($3))|0) < 0; //@line 753 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 753 "fileio.c"
      case 1: // $bb
        var $5=_err_closed(); //@line 754 "fileio.c"
        HEAP[$0]=$5; //@line 754 "fileio.c"
        __label__ = 5; break; //@line 754 "fileio.c"
      case 2: // $bb1
        var $6=HEAP[$args_addr]; //@line 756 "fileio.c"
        var $7=__PyArg_ParseTuple_SizeT($6, ((__str29146)&4294967295), $posobj, $whence); //@line 756 "fileio.c"
        var $8=((($7))|0)==0; //@line 756 "fileio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 756 "fileio.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 757 "fileio.c"
        __label__ = 5; break; //@line 757 "fileio.c"
      case 4: // $bb3
        var $9=HEAP[$whence]; //@line 759 "fileio.c"
        var $10=HEAP[$posobj]; //@line 759 "fileio.c"
        var $11=HEAP[$self_addr]; //@line 759 "fileio.c"
        var $12=(($11+8)&4294967295); //@line 759 "fileio.c"
        var $13=HEAP[$12]; //@line 759 "fileio.c"
        var $14=_portable_lseek($13, $10, $9); //@line 759 "fileio.c"
        HEAP[$0]=$14; //@line 759 "fileio.c"
        __label__ = 5; break; //@line 759 "fileio.c"
      case 5: // $bb4
        var $15=HEAP[$0]; //@line 754 "fileio.c"
        HEAP[$retval]=$15; //@line 754 "fileio.c"
        __label__ = 6; break; //@line 754 "fileio.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 754 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 754 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_tell($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 765 "fileio.c"
        var $2=(($1+8)&4294967295); //@line 765 "fileio.c"
        var $3=HEAP[$2]; //@line 765 "fileio.c"
        var $4=((($3))|0) < 0; //@line 765 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 765 "fileio.c"
      case 1: // $bb
        var $5=_err_closed(); //@line 766 "fileio.c"
        HEAP[$0]=$5; //@line 766 "fileio.c"
        __label__ = 3; break; //@line 766 "fileio.c"
      case 2: // $bb1
        var $6=HEAP[$self_addr]; //@line 768 "fileio.c"
        var $7=(($6+8)&4294967295); //@line 768 "fileio.c"
        var $8=HEAP[$7]; //@line 768 "fileio.c"
        var $9=_portable_lseek($8, 0, 1); //@line 768 "fileio.c"
        HEAP[$0]=$9; //@line 768 "fileio.c"
        __label__ = 3; break; //@line 768 "fileio.c"
      case 3: // $bb2
        var $10=HEAP[$0]; //@line 766 "fileio.c"
        HEAP[$retval]=$10; //@line 766 "fileio.c"
        __label__ = 4; break; //@line 766 "fileio.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 766 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 766 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_truncate($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $posobj=__stackBase__+16;
        var $pos=__stackBase__+20;
        var $ret=__stackBase__+28;
        var $fd=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$posobj]=0; //@line 775 "fileio.c"
        var $1=HEAP[$self_addr]; //@line 782 "fileio.c"
        var $2=(($1+8)&4294967295); //@line 782 "fileio.c"
        var $3=HEAP[$2]; //@line 782 "fileio.c"
        HEAP[$fd]=$3; //@line 782 "fileio.c"
        var $4=HEAP[$fd]; //@line 783 "fileio.c"
        var $5=((($4))|0) < 0; //@line 783 "fileio.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 783 "fileio.c"
      case 1: // $bb
        var $6=_err_closed(); //@line 784 "fileio.c"
        HEAP[$0]=$6; //@line 784 "fileio.c"
        __label__ = 21; break; //@line 784 "fileio.c"
      case 2: // $bb1
        var $7=HEAP[$self_addr]; //@line 785 "fileio.c"
        var $8=(($7+12)&4294967295); //@line 785 "fileio.c"
        var $9=HEAP[$8]; //@line 785 "fileio.c"
        var $10=($9) << 30; //@line 785 "fileio.c"
        var $11=((($10))>>>0) >>> 31; //@line 785 "fileio.c"
        var $12=((($11)) & 1); //@line 785 "fileio.c"
        var $13=reSign(($12), 1, 0)==0; //@line 785 "fileio.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 785 "fileio.c"
      case 3: // $bb2
        var $14=_err_mode(((__str26143)&4294967295)); //@line 786 "fileio.c"
        HEAP[$0]=$14; //@line 786 "fileio.c"
        __label__ = 21; break; //@line 786 "fileio.c"
      case 4: // $bb3
        var $15=HEAP[$args_addr]; //@line 788 "fileio.c"
        var $16=__PyArg_ParseTuple_SizeT($15, ((__str30147)&4294967295), $posobj); //@line 788 "fileio.c"
        var $17=((($16))|0)==0; //@line 788 "fileio.c"
        if ($17) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 788 "fileio.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 789 "fileio.c"
        __label__ = 21; break; //@line 789 "fileio.c"
      case 6: // $bb5
        var $18=HEAP[$posobj]; //@line 791 "fileio.c"
        var $19=($18)==(__Py_NoneStruct); //@line 791 "fileio.c"
        if ($19) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 791 "fileio.c"
      case 7: // $bb6
        var $20=HEAP[$posobj]; //@line 791 "fileio.c"
        var $21=($20)==0; //@line 791 "fileio.c"
        if ($21) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 791 "fileio.c"
      case 8: // $bb7
        var $22=HEAP[$fd]; //@line 793 "fileio.c"
        var $23=_portable_lseek($22, 0, 1); //@line 793 "fileio.c"
        HEAP[$posobj]=$23; //@line 793 "fileio.c"
        var $24=HEAP[$posobj]; //@line 794 "fileio.c"
        var $25=($24)==0; //@line 794 "fileio.c"
        if ($25) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 794 "fileio.c"
      case 9: // $bb8
        HEAP[$0]=0; //@line 795 "fileio.c"
        __label__ = 21; break; //@line 795 "fileio.c"
      case 10: // $bb9
        __label__ = 12; break; //@line 795 "fileio.c"
      case 11: // $bb10
        var $26=HEAP[$posobj]; //@line 798 "fileio.c"
        var $27=(($26)&4294967295); //@line 798 "fileio.c"
        var $28=HEAP[$27]; //@line 798 "fileio.c"
        var $29=((($28) + 1)&4294967295); //@line 798 "fileio.c"
        var $30=(($26)&4294967295); //@line 798 "fileio.c"
        HEAP[$30]=$29; //@line 798 "fileio.c"
        __label__ = 12; break; //@line 798 "fileio.c"
      case 12: // $bb11
        var $31=HEAP[$posobj]; //@line 848 "fileio.c"
        var $32=_PyLong_AsLongLong($31); //@line 848 "fileio.c"
        HEAP[$pos]=$32; //@line 848 "fileio.c"
        var $33=_PyErr_Occurred(); //@line 852 "fileio.c"
        var $34=($33)!=0; //@line 852 "fileio.c"
        if ($34) { __label__ = 13; break; } else { __label__ = 16; break; } //@line 852 "fileio.c"
      case 13: // $bb12
        var $35=HEAP[$posobj]; //@line 853 "fileio.c"
        var $36=(($35)&4294967295); //@line 853 "fileio.c"
        var $37=HEAP[$36]; //@line 853 "fileio.c"
        var $38=((($37) - 1)&4294967295); //@line 853 "fileio.c"
        var $39=(($35)&4294967295); //@line 853 "fileio.c"
        HEAP[$39]=$38; //@line 853 "fileio.c"
        var $40=(($35)&4294967295); //@line 853 "fileio.c"
        var $41=HEAP[$40]; //@line 853 "fileio.c"
        var $42=((($41))|0)==0; //@line 853 "fileio.c"
        if ($42) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 853 "fileio.c"
      case 14: // $bb13
        var $43=HEAP[$posobj]; //@line 853 "fileio.c"
        var $44=(($43+4)&4294967295); //@line 853 "fileio.c"
        var $45=HEAP[$44]; //@line 853 "fileio.c"
        var $46=(($45+24)&4294967295); //@line 853 "fileio.c"
        var $47=HEAP[$46]; //@line 853 "fileio.c"
        var $48=HEAP[$posobj]; //@line 853 "fileio.c"
        FUNCTION_TABLE[$47]($48); //@line 853 "fileio.c"
        __label__ = 15; break; //@line 853 "fileio.c"
      case 15: // $bb14
        HEAP[$0]=0; //@line 854 "fileio.c"
        __label__ = 21; break; //@line 854 "fileio.c"
      case 16: // $bb15
        var $49=___errno_location(); //@line 858 "fileio.c"
        HEAP[$49]=0; //@line 858 "fileio.c"
        var $50=HEAP[$fd]; //@line 859 "fileio.c"
        var $51=HEAP[$pos]; //@line 859 "fileio.c"
        var $52=___01ftruncate64_($50, $51); //@line 859 "fileio.c"
        HEAP[$ret]=$52; //@line 859 "fileio.c"
        var $53=HEAP[$ret]; //@line 864 "fileio.c"
        var $54=((($53))|0)!=0; //@line 864 "fileio.c"
        if ($54) { __label__ = 17; break; } else { __label__ = 20; break; } //@line 864 "fileio.c"
      case 17: // $bb16
        var $55=HEAP[$posobj]; //@line 865 "fileio.c"
        var $56=(($55)&4294967295); //@line 865 "fileio.c"
        var $57=HEAP[$56]; //@line 865 "fileio.c"
        var $58=((($57) - 1)&4294967295); //@line 865 "fileio.c"
        var $59=(($55)&4294967295); //@line 865 "fileio.c"
        HEAP[$59]=$58; //@line 865 "fileio.c"
        var $60=(($55)&4294967295); //@line 865 "fileio.c"
        var $61=HEAP[$60]; //@line 865 "fileio.c"
        var $62=((($61))|0)==0; //@line 865 "fileio.c"
        if ($62) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 865 "fileio.c"
      case 18: // $bb17
        var $63=HEAP[$posobj]; //@line 865 "fileio.c"
        var $64=(($63+4)&4294967295); //@line 865 "fileio.c"
        var $65=HEAP[$64]; //@line 865 "fileio.c"
        var $66=(($65+24)&4294967295); //@line 865 "fileio.c"
        var $67=HEAP[$66]; //@line 865 "fileio.c"
        var $68=HEAP[$posobj]; //@line 865 "fileio.c"
        FUNCTION_TABLE[$67]($68); //@line 865 "fileio.c"
        __label__ = 19; break; //@line 865 "fileio.c"
      case 19: // $bb18
        var $69=HEAP[_PyExc_IOError]; //@line 866 "fileio.c"
        var $70=_PyErr_SetFromErrno($69); //@line 866 "fileio.c"
        HEAP[$0]=0; //@line 867 "fileio.c"
        __label__ = 21; break; //@line 867 "fileio.c"
      case 20: // $bb19
        var $71=HEAP[$posobj]; //@line 870 "fileio.c"
        HEAP[$0]=$71; //@line 870 "fileio.c"
        __label__ = 21; break; //@line 870 "fileio.c"
      case 21: // $bb20
        var $72=HEAP[$0]; //@line 784 "fileio.c"
        HEAP[$retval]=$72; //@line 784 "fileio.c"
        __label__ = 22; break; //@line 784 "fileio.c"
      case 22: // $return
        var $retval21=HEAP[$retval]; //@line 784 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval21; //@line 784 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _mode_string($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 877 "fileio.c"
        var $2=(($1+12)&4294967295); //@line 877 "fileio.c"
        var $3=HEAP[$2]; //@line 877 "fileio.c"
        var $4=($3) << 31; //@line 877 "fileio.c"
        var $5=((($4))>>>0) >>> 31; //@line 877 "fileio.c"
        var $6=((($5)) & 1); //@line 877 "fileio.c"
        var $7=reSign(($6), 1, 0)!=0; //@line 877 "fileio.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 877 "fileio.c"
      case 1: // $bb
        var $8=HEAP[$self_addr]; //@line 878 "fileio.c"
        var $9=(($8+12)&4294967295); //@line 878 "fileio.c"
        var $10=HEAP[$9]; //@line 878 "fileio.c"
        var $11=($10) << 30; //@line 878 "fileio.c"
        var $12=((($11))>>>0) >>> 31; //@line 878 "fileio.c"
        var $13=((($12)) & 1); //@line 878 "fileio.c"
        var $14=reSign(($13), 1, 0)!=0; //@line 878 "fileio.c"
        if ($14) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 878 "fileio.c"
      case 2: // $bb1
        HEAP[$0]=((__str31148)&4294967295); //@line 879 "fileio.c"
        __label__ = 5; break; //@line 879 "fileio.c"
      case 3: // $bb2
        HEAP[$0]=((__str32149)&4294967295); //@line 881 "fileio.c"
        __label__ = 5; break; //@line 881 "fileio.c"
      case 4: // $bb3
        HEAP[$0]=((__str33150)&4294967295); //@line 884 "fileio.c"
        __label__ = 5; break; //@line 884 "fileio.c"
      case 5: // $bb4
        var $15=HEAP[$0]; //@line 879 "fileio.c"
        HEAP[$retval]=$15; //@line 879 "fileio.c"
        __label__ = 6; break; //@line 879 "fileio.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 879 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 879 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_repr($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $nameobj=__stackBase__+12;
        var $res=__stackBase__+16;
        var $repr=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 892 "fileio.c"
        var $2=(($1+8)&4294967295); //@line 892 "fileio.c"
        var $3=HEAP[$2]; //@line 892 "fileio.c"
        var $4=((($3))|0) < 0; //@line 892 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 892 "fileio.c"
      case 1: // $bb
        var $5=_PyString_FromFormat(((__str34151)&4294967295)); //@line 893 "fileio.c"
        HEAP[$0]=$5; //@line 893 "fileio.c"
        __label__ = 13; break; //@line 893 "fileio.c"
      case 2: // $bb1
        var $6=HEAP[$self_addr]; //@line 895 "fileio.c"
        var $7=$6; //@line 895 "fileio.c"
        var $8=_PyObject_GetAttrString($7, ((__str18135)&4294967295)); //@line 895 "fileio.c"
        HEAP[$nameobj]=$8; //@line 895 "fileio.c"
        var $9=HEAP[$nameobj]; //@line 896 "fileio.c"
        var $10=($9)==0; //@line 896 "fileio.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 896 "fileio.c"
      case 3: // $bb2
        var $11=HEAP[_PyExc_AttributeError]; //@line 897 "fileio.c"
        var $12=_PyErr_ExceptionMatches($11); //@line 897 "fileio.c"
        var $13=((($12))|0)!=0; //@line 897 "fileio.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 897 "fileio.c"
      case 4: // $bb3
        _PyErr_Clear(); //@line 898 "fileio.c"
        var $14=HEAP[$self_addr]; //@line 901 "fileio.c"
        var $15=_mode_string($14); //@line 901 "fileio.c"
        var $16=HEAP[$self_addr]; //@line 901 "fileio.c"
        var $17=(($16+8)&4294967295); //@line 901 "fileio.c"
        var $18=HEAP[$17]; //@line 901 "fileio.c"
        var $19=_PyString_FromFormat(((__str35152)&4294967295), $18, $15); //@line 901 "fileio.c"
        HEAP[$res]=$19; //@line 901 "fileio.c"
        __label__ = 12; break; //@line 901 "fileio.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 900 "fileio.c"
        __label__ = 13; break; //@line 900 "fileio.c"
      case 6: // $bb5
        var $20=HEAP[$nameobj]; //@line 905 "fileio.c"
        var $21=_PyObject_Repr($20); //@line 905 "fileio.c"
        HEAP[$repr]=$21; //@line 905 "fileio.c"
        var $22=HEAP[$nameobj]; //@line 906 "fileio.c"
        var $23=(($22)&4294967295); //@line 906 "fileio.c"
        var $24=HEAP[$23]; //@line 906 "fileio.c"
        var $25=((($24) - 1)&4294967295); //@line 906 "fileio.c"
        var $26=HEAP[$nameobj]; //@line 906 "fileio.c"
        var $27=(($26)&4294967295); //@line 906 "fileio.c"
        HEAP[$27]=$25; //@line 906 "fileio.c"
        var $28=HEAP[$nameobj]; //@line 906 "fileio.c"
        var $29=(($28)&4294967295); //@line 906 "fileio.c"
        var $30=HEAP[$29]; //@line 906 "fileio.c"
        var $31=((($30))|0)==0; //@line 906 "fileio.c"
        if ($31) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 906 "fileio.c"
      case 7: // $bb6
        var $32=HEAP[$nameobj]; //@line 906 "fileio.c"
        var $33=(($32+4)&4294967295); //@line 906 "fileio.c"
        var $34=HEAP[$33]; //@line 906 "fileio.c"
        var $35=(($34+24)&4294967295); //@line 906 "fileio.c"
        var $36=HEAP[$35]; //@line 906 "fileio.c"
        var $37=HEAP[$nameobj]; //@line 906 "fileio.c"
        FUNCTION_TABLE[$36]($37); //@line 906 "fileio.c"
        __label__ = 8; break; //@line 906 "fileio.c"
      case 8: // $bb7
        var $38=HEAP[$repr]; //@line 907 "fileio.c"
        var $39=($38)==0; //@line 907 "fileio.c"
        if ($39) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 907 "fileio.c"
      case 9: // $bb8
        HEAP[$0]=0; //@line 908 "fileio.c"
        __label__ = 13; break; //@line 908 "fileio.c"
      case 10: // $bb9
        var $40=HEAP[$self_addr]; //@line 909 "fileio.c"
        var $41=_mode_string($40); //@line 909 "fileio.c"
        var $42=HEAP[$repr]; //@line 909 "fileio.c"
        var $43=$42; //@line 909 "fileio.c"
        var $44=(($43+20)&4294967295); //@line 909 "fileio.c"
        var $45=(($44)&4294967295); //@line 909 "fileio.c"
        var $46=_PyString_FromFormat(((__str36153)&4294967295), $45, $41); //@line 909 "fileio.c"
        HEAP[$res]=$46; //@line 909 "fileio.c"
        var $47=HEAP[$repr]; //@line 912 "fileio.c"
        var $48=(($47)&4294967295); //@line 912 "fileio.c"
        var $49=HEAP[$48]; //@line 912 "fileio.c"
        var $50=((($49) - 1)&4294967295); //@line 912 "fileio.c"
        var $51=HEAP[$repr]; //@line 912 "fileio.c"
        var $52=(($51)&4294967295); //@line 912 "fileio.c"
        HEAP[$52]=$50; //@line 912 "fileio.c"
        var $53=HEAP[$repr]; //@line 912 "fileio.c"
        var $54=(($53)&4294967295); //@line 912 "fileio.c"
        var $55=HEAP[$54]; //@line 912 "fileio.c"
        var $56=((($55))|0)==0; //@line 912 "fileio.c"
        if ($56) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 912 "fileio.c"
      case 11: // $bb10
        var $57=HEAP[$repr]; //@line 912 "fileio.c"
        var $58=(($57+4)&4294967295); //@line 912 "fileio.c"
        var $59=HEAP[$58]; //@line 912 "fileio.c"
        var $60=(($59+24)&4294967295); //@line 912 "fileio.c"
        var $61=HEAP[$60]; //@line 912 "fileio.c"
        var $62=HEAP[$repr]; //@line 912 "fileio.c"
        FUNCTION_TABLE[$61]($62); //@line 912 "fileio.c"
        __label__ = 12; break; //@line 912 "fileio.c"
      case 12: // $bb11
        var $63=HEAP[$res]; //@line 914 "fileio.c"
        HEAP[$0]=$63; //@line 914 "fileio.c"
        __label__ = 13; break; //@line 914 "fileio.c"
      case 13: // $bb12
        var $64=HEAP[$0]; //@line 893 "fileio.c"
        HEAP[$retval]=$64; //@line 893 "fileio.c"
        __label__ = 14; break; //@line 893 "fileio.c"
      case 14: // $return
        var $retval13=HEAP[$retval]; //@line 893 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 893 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_isatty($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $res=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 922 "fileio.c"
        var $2=(($1+8)&4294967295); //@line 922 "fileio.c"
        var $3=HEAP[$2]; //@line 922 "fileio.c"
        var $4=((($3))|0) < 0; //@line 922 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 922 "fileio.c"
      case 1: // $bb
        var $5=_err_closed(); //@line 923 "fileio.c"
        HEAP[$0]=$5; //@line 923 "fileio.c"
        __label__ = 3; break; //@line 923 "fileio.c"
      case 2: // $bb1
        var $6=HEAP[$self_addr]; //@line 925 "fileio.c"
        var $7=(($6+8)&4294967295); //@line 925 "fileio.c"
        var $8=HEAP[$7]; //@line 925 "fileio.c"
        var $9=_isatty($8); //@line 925 "fileio.c"
        HEAP[$res]=$9; //@line 925 "fileio.c"
        var $10=HEAP[$res]; //@line 927 "fileio.c"
        var $11=_PyBool_FromLong($10); //@line 927 "fileio.c"
        HEAP[$0]=$11; //@line 927 "fileio.c"
        __label__ = 3; break; //@line 927 "fileio.c"
      case 3: // $bb2
        var $12=HEAP[$0]; //@line 923 "fileio.c"
        HEAP[$retval]=$12; //@line 923 "fileio.c"
        __label__ = 4; break; //@line 923 "fileio.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 923 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 923 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _get_closed($self, $closure) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $closure_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$closure_addr]=$closure;
        var $1=HEAP[$self_addr]; //@line 1031 "fileio.c"
        var $2=(($1+8)&4294967295); //@line 1031 "fileio.c"
        var $3=HEAP[$2]; //@line 1031 "fileio.c"
        var $4=((($3))|0) < 0; //@line 1031 "fileio.c"
        var $5=unSign(($4), 1, 0); //@line 1031 "fileio.c"
        var $6=_PyBool_FromLong($5); //@line 1031 "fileio.c"
        HEAP[$0]=$6; //@line 1031 "fileio.c"
        var $7=HEAP[$0]; //@line 1031 "fileio.c"
        HEAP[$retval]=$7; //@line 1031 "fileio.c"
        __label__ = 1; break; //@line 1031 "fileio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 1031 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 1031 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _get_closefd($self, $closure) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $closure_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$closure_addr]=$closure;
        var $1=HEAP[$self_addr]; //@line 1037 "fileio.c"
        var $2=(($1+12)&4294967295); //@line 1037 "fileio.c"
        var $3=HEAP[$2]; //@line 1037 "fileio.c"
        var $4=($3) << 27; //@line 1037 "fileio.c"
        var $5=((($4))>>>0) >>> 31; //@line 1037 "fileio.c"
        var $6=((($5)) & 1); //@line 1037 "fileio.c"
        var $7=unSign(($6), 1, 0); //@line 1037 "fileio.c"
        var $8=_PyBool_FromLong($7); //@line 1037 "fileio.c"
        HEAP[$0]=$8; //@line 1037 "fileio.c"
        var $9=HEAP[$0]; //@line 1037 "fileio.c"
        HEAP[$retval]=$9; //@line 1037 "fileio.c"
        __label__ = 1; break; //@line 1037 "fileio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 1037 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 1037 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _get_mode($self, $closure) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $closure_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$closure_addr]=$closure;
        var $1=HEAP[$self_addr]; //@line 1043 "fileio.c"
        var $2=_mode_string($1); //@line 1043 "fileio.c"
        var $3=_PyUnicodeUCS2_FromString($2); //@line 1043 "fileio.c"
        HEAP[$0]=$3; //@line 1043 "fileio.c"
        var $4=HEAP[$0]; //@line 1043 "fileio.c"
        HEAP[$retval]=$4; //@line 1043 "fileio.c"
        __label__ = 1; break; //@line 1043 "fileio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 1043 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 1043 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_unsupported($message) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $message_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$message_addr]=$message;
        var $1=HEAP[__PyIO_unsupported_operation]; //@line 68 "iobase.c"
        var $2=HEAP[$message_addr]; //@line 68 "iobase.c"
        _PyErr_SetString($1, $2); //@line 68 "iobase.c"
        HEAP[$0]=0; //@line 69 "iobase.c"
        var $3=HEAP[$0]; //@line 69 "iobase.c"
        HEAP[$retval]=$3; //@line 69 "iobase.c"
        __label__ = 1; break; //@line 69 "iobase.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 69 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 69 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_seek($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=_iobase_unsupported(((__str181)&4294967295)); //@line 90 "iobase.c"
        HEAP[$0]=$1; //@line 90 "iobase.c"
        var $2=HEAP[$0]; //@line 90 "iobase.c"
        HEAP[$retval]=$2; //@line 90 "iobase.c"
        __label__ = 1; break; //@line 90 "iobase.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 90 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 90 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_tell($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 99 "iobase.c"
        var $2=__PyObject_CallMethod_SizeT($1, ((__str181)&4294967295), ((__str1182)&4294967295), 0, 1); //@line 99 "iobase.c"
        HEAP[$0]=$2; //@line 99 "iobase.c"
        var $3=HEAP[$0]; //@line 99 "iobase.c"
        HEAP[$retval]=$3; //@line 99 "iobase.c"
        __label__ = 1; break; //@line 99 "iobase.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 99 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 99 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_truncate($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=_iobase_unsupported(((__str2183)&4294967295)); //@line 111 "iobase.c"
        HEAP[$0]=$1; //@line 111 "iobase.c"
        var $2=HEAP[$0]; //@line 111 "iobase.c"
        HEAP[$retval]=$2; //@line 111 "iobase.c"
        __label__ = 1; break; //@line 111 "iobase.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 111 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 111 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_flush($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 125 "iobase.c"
        var $2=_PyObject_HasAttrString($1, ((__str3184)&4294967295)); //@line 125 "iobase.c"
        var $3=((($2))|0)!=0; //@line 125 "iobase.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 125 "iobase.c"
      case 1: // $bb
        var $4=HEAP[_PyExc_ValueError]; //@line 126 "iobase.c"
        _PyErr_SetString($4, ((__str4185)&4294967295)); //@line 126 "iobase.c"
        HEAP[$0]=0; //@line 127 "iobase.c"
        __label__ = 3; break; //@line 127 "iobase.c"
      case 2: // $bb1
        var $5=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 129 "iobase.c"
        var $6=((($5) + 1)&4294967295); //@line 129 "iobase.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$6; //@line 129 "iobase.c"
        HEAP[$0]=__Py_NoneStruct; //@line 129 "iobase.c"
        __label__ = 3; break; //@line 129 "iobase.c"
      case 3: // $bb2
        var $7=HEAP[$0]; //@line 127 "iobase.c"
        HEAP[$retval]=$7; //@line 127 "iobase.c"
        __label__ = 4; break; //@line 127 "iobase.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 127 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 127 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_closed($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $res=__stackBase__+12;
        var $closed=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[__PyIO_str_closed]; //@line 144 "iobase.c"
        var $2=HEAP[$self_addr]; //@line 144 "iobase.c"
        var $3=_PyObject_GetAttr($2, $1); //@line 144 "iobase.c"
        HEAP[$res]=$3; //@line 144 "iobase.c"
        var $4=HEAP[$res]; //@line 145 "iobase.c"
        var $5=($4)==0; //@line 145 "iobase.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 145 "iobase.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 146 "iobase.c"
        __label__ = 5; break; //@line 146 "iobase.c"
      case 2: // $bb1
        var $6=HEAP[$res]; //@line 147 "iobase.c"
        var $7=_PyObject_IsTrue($6); //@line 147 "iobase.c"
        HEAP[$closed]=$7; //@line 147 "iobase.c"
        var $8=HEAP[$res]; //@line 148 "iobase.c"
        var $9=(($8)&4294967295); //@line 148 "iobase.c"
        var $10=HEAP[$9]; //@line 148 "iobase.c"
        var $11=((($10) - 1)&4294967295); //@line 148 "iobase.c"
        var $12=HEAP[$res]; //@line 148 "iobase.c"
        var $13=(($12)&4294967295); //@line 148 "iobase.c"
        HEAP[$13]=$11; //@line 148 "iobase.c"
        var $14=HEAP[$res]; //@line 148 "iobase.c"
        var $15=(($14)&4294967295); //@line 148 "iobase.c"
        var $16=HEAP[$15]; //@line 148 "iobase.c"
        var $17=((($16))|0)==0; //@line 148 "iobase.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 148 "iobase.c"
      case 3: // $bb2
        var $18=HEAP[$res]; //@line 148 "iobase.c"
        var $19=(($18+4)&4294967295); //@line 148 "iobase.c"
        var $20=HEAP[$19]; //@line 148 "iobase.c"
        var $21=(($20+24)&4294967295); //@line 148 "iobase.c"
        var $22=HEAP[$21]; //@line 148 "iobase.c"
        var $23=HEAP[$res]; //@line 148 "iobase.c"
        FUNCTION_TABLE[$22]($23); //@line 148 "iobase.c"
        __label__ = 4; break; //@line 148 "iobase.c"
      case 4: // $bb3
        var $24=HEAP[$closed]; //@line 149 "iobase.c"
        HEAP[$0]=$24; //@line 149 "iobase.c"
        __label__ = 5; break; //@line 149 "iobase.c"
      case 5: // $bb4
        var $25=HEAP[$0]; //@line 146 "iobase.c"
        HEAP[$retval]=$25; //@line 146 "iobase.c"
        __label__ = 6; break; //@line 146 "iobase.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 146 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 146 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_closed_get($self, $context) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $context_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$context_addr]=$context;
        var $1=HEAP[$self_addr]; //@line 155 "iobase.c"
        var $2=_PyObject_HasAttrString($1, ((__str3184)&4294967295)); //@line 155 "iobase.c"
        var $3=_PyBool_FromLong($2); //@line 155 "iobase.c"
        HEAP[$0]=$3; //@line 155 "iobase.c"
        var $4=HEAP[$0]; //@line 155 "iobase.c"
        HEAP[$retval]=$4; //@line 155 "iobase.c"
        __label__ = 1; break; //@line 155 "iobase.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 155 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 155 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __PyIOBase_check_closed($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 161 "iobase.c"
        var $2=_iobase_closed($1); //@line 161 "iobase.c"
        var $3=((($2))|0)!=0; //@line 161 "iobase.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 161 "iobase.c"
      case 1: // $bb
        var $4=HEAP[_PyExc_ValueError]; //@line 162 "iobase.c"
        _PyErr_SetString($4, ((__str4185)&4294967295)); //@line 162 "iobase.c"
        HEAP[$0]=0; //@line 163 "iobase.c"
        __label__ = 5; break; //@line 163 "iobase.c"
      case 2: // $bb1
        var $5=HEAP[$args_addr]; //@line 165 "iobase.c"
        var $6=($5)==(__Py_TrueStruct); //@line 165 "iobase.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 165 "iobase.c"
      case 3: // $bb2
        HEAP[$0]=__Py_NoneStruct; //@line 166 "iobase.c"
        __label__ = 5; break; //@line 166 "iobase.c"
      case 4: // $bb3
        var $7=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 168 "iobase.c"
        var $8=((($7) + 1)&4294967295); //@line 168 "iobase.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$8; //@line 168 "iobase.c"
        HEAP[$0]=__Py_NoneStruct; //@line 168 "iobase.c"
        __label__ = 5; break; //@line 168 "iobase.c"
      case 5: // $bb4
        var $9=HEAP[$0]; //@line 163 "iobase.c"
        HEAP[$retval]=$9; //@line 163 "iobase.c"
        __label__ = 6; break; //@line 163 "iobase.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 163 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 163 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_close($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $res=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 180 "iobase.c"
        var $2=_PyObject_HasAttrString($1, ((__str3184)&4294967295)); //@line 180 "iobase.c"
        var $3=((($2))|0)!=0; //@line 180 "iobase.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 180 "iobase.c"
      case 1: // $bb
        var $4=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 181 "iobase.c"
        var $5=((($4) + 1)&4294967295); //@line 181 "iobase.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$5; //@line 181 "iobase.c"
        HEAP[$0]=__Py_NoneStruct; //@line 181 "iobase.c"
        __label__ = 8; break; //@line 181 "iobase.c"
      case 2: // $bb1
        var $6=HEAP[__PyIO_str_flush]; //@line 183 "iobase.c"
        var $7=HEAP[$self_addr]; //@line 183 "iobase.c"
        var $8=_PyObject_CallMethodObjArgs($7, $6, 0); //@line 183 "iobase.c"
        HEAP[$res]=$8; //@line 183 "iobase.c"
        var $9=HEAP[$self_addr]; //@line 184 "iobase.c"
        var $10=_PyObject_SetAttrString($9, ((__str3184)&4294967295), __Py_TrueStruct); //@line 184 "iobase.c"
        var $11=HEAP[$res]; //@line 185 "iobase.c"
        var $12=($11)==0; //@line 185 "iobase.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 185 "iobase.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 186 "iobase.c"
        __label__ = 8; break; //@line 186 "iobase.c"
      case 4: // $bb3
        var $13=HEAP[$res]; //@line 188 "iobase.c"
        var $14=($13)!=0; //@line 188 "iobase.c"
        if ($14) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 188 "iobase.c"
      case 5: // $bb4
        var $15=HEAP[$res]; //@line 188 "iobase.c"
        var $16=(($15)&4294967295); //@line 188 "iobase.c"
        var $17=HEAP[$16]; //@line 188 "iobase.c"
        var $18=((($17) - 1)&4294967295); //@line 188 "iobase.c"
        var $19=HEAP[$res]; //@line 188 "iobase.c"
        var $20=(($19)&4294967295); //@line 188 "iobase.c"
        HEAP[$20]=$18; //@line 188 "iobase.c"
        var $21=HEAP[$res]; //@line 188 "iobase.c"
        var $22=(($21)&4294967295); //@line 188 "iobase.c"
        var $23=HEAP[$22]; //@line 188 "iobase.c"
        var $24=((($23))|0)==0; //@line 188 "iobase.c"
        if ($24) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 188 "iobase.c"
      case 6: // $bb5
        var $25=HEAP[$res]; //@line 188 "iobase.c"
        var $26=(($25+4)&4294967295); //@line 188 "iobase.c"
        var $27=HEAP[$26]; //@line 188 "iobase.c"
        var $28=(($27+24)&4294967295); //@line 188 "iobase.c"
        var $29=HEAP[$28]; //@line 188 "iobase.c"
        var $30=HEAP[$res]; //@line 188 "iobase.c"
        FUNCTION_TABLE[$29]($30); //@line 188 "iobase.c"
        __label__ = 7; break; //@line 188 "iobase.c"
      case 7: // $bb6
        var $31=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 189 "iobase.c"
        var $32=((($31) + 1)&4294967295); //@line 189 "iobase.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$32; //@line 189 "iobase.c"
        HEAP[$0]=__Py_NoneStruct; //@line 189 "iobase.c"
        __label__ = 8; break; //@line 189 "iobase.c"
      case 8: // $bb7
        var $33=HEAP[$0]; //@line 181 "iobase.c"
        HEAP[$retval]=$33; //@line 181 "iobase.c"
        __label__ = 9; break; //@line 181 "iobase.c"
      case 9: // $return
        var $retval8=HEAP[$retval]; //@line 181 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval8; //@line 181 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __PyIOBase_finalize($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $res=__stackBase__+12;
        var $tp=__stackBase__+16;
        var $v=__stackBase__+20;
        var $tb=__stackBase__+24;
        var $closed=__stackBase__+28;
        var $is_zombie=__stackBase__+32;
        var $refcnt=__stackBase__+36;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$closed]=1; //@line 199 "iobase.c"
        var $1=HEAP[$self_addr]; //@line 204 "iobase.c"
        var $2=(($1)&4294967295); //@line 204 "iobase.c"
        var $3=HEAP[$2]; //@line 204 "iobase.c"
        var $4=((($3))|0)==0; //@line 204 "iobase.c"
        var $5=unSign(($4), 1, 0); //@line 204 "iobase.c"
        HEAP[$is_zombie]=$5; //@line 204 "iobase.c"
        var $6=HEAP[$is_zombie]; //@line 205 "iobase.c"
        var $7=((($6))|0)!=0; //@line 205 "iobase.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 205 "iobase.c"
      case 1: // $bb
        var $8=HEAP[$self_addr]; //@line 206 "iobase.c"
        var $9=(($8)&4294967295); //@line 206 "iobase.c"
        var $10=HEAP[$9]; //@line 206 "iobase.c"
        var $11=((($10) + 1)&4294967295); //@line 206 "iobase.c"
        var $12=HEAP[$self_addr]; //@line 206 "iobase.c"
        var $13=(($12)&4294967295); //@line 206 "iobase.c"
        HEAP[$13]=$11; //@line 206 "iobase.c"
        __label__ = 2; break; //@line 206 "iobase.c"
      case 2: // $bb1
        _PyErr_Fetch($tp, $v, $tb); //@line 208 "iobase.c"
        var $14=HEAP[__PyIO_str_closed]; //@line 211 "iobase.c"
        var $15=HEAP[$self_addr]; //@line 211 "iobase.c"
        var $16=_PyObject_GetAttr($15, $14); //@line 211 "iobase.c"
        HEAP[$res]=$16; //@line 211 "iobase.c"
        var $17=HEAP[$res]; //@line 212 "iobase.c"
        var $18=($17)==0; //@line 212 "iobase.c"
        if ($18) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 212 "iobase.c"
      case 3: // $bb2
        _PyErr_Clear(); //@line 213 "iobase.c"
        __label__ = 8; break; //@line 213 "iobase.c"
      case 4: // $bb3
        var $19=HEAP[$res]; //@line 215 "iobase.c"
        var $20=_PyObject_IsTrue($19); //@line 215 "iobase.c"
        HEAP[$closed]=$20; //@line 215 "iobase.c"
        var $21=HEAP[$res]; //@line 216 "iobase.c"
        var $22=(($21)&4294967295); //@line 216 "iobase.c"
        var $23=HEAP[$22]; //@line 216 "iobase.c"
        var $24=((($23) - 1)&4294967295); //@line 216 "iobase.c"
        var $25=HEAP[$res]; //@line 216 "iobase.c"
        var $26=(($25)&4294967295); //@line 216 "iobase.c"
        HEAP[$26]=$24; //@line 216 "iobase.c"
        var $27=HEAP[$res]; //@line 216 "iobase.c"
        var $28=(($27)&4294967295); //@line 216 "iobase.c"
        var $29=HEAP[$28]; //@line 216 "iobase.c"
        var $30=((($29))|0)==0; //@line 216 "iobase.c"
        if ($30) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 216 "iobase.c"
      case 5: // $bb4
        var $31=HEAP[$res]; //@line 216 "iobase.c"
        var $32=(($31+4)&4294967295); //@line 216 "iobase.c"
        var $33=HEAP[$32]; //@line 216 "iobase.c"
        var $34=(($33+24)&4294967295); //@line 216 "iobase.c"
        var $35=HEAP[$34]; //@line 216 "iobase.c"
        var $36=HEAP[$res]; //@line 216 "iobase.c"
        FUNCTION_TABLE[$35]($36); //@line 216 "iobase.c"
        __label__ = 6; break; //@line 216 "iobase.c"
      case 6: // $bb5
        var $37=HEAP[$closed]; //@line 217 "iobase.c"
        var $38=((($37))|0)==-1; //@line 217 "iobase.c"
        if ($38) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 217 "iobase.c"
      case 7: // $bb6
        _PyErr_Clear(); //@line 218 "iobase.c"
        __label__ = 8; break; //@line 218 "iobase.c"
      case 8: // $bb7
        var $39=HEAP[$closed]; //@line 220 "iobase.c"
        var $40=((($39))|0)==0; //@line 220 "iobase.c"
        if ($40) { __label__ = 9; break; } else { __label__ = 13; break; } //@line 220 "iobase.c"
      case 9: // $bb8
        var $41=HEAP[__PyIO_str_close]; //@line 221 "iobase.c"
        var $42=HEAP[$self_addr]; //@line 221 "iobase.c"
        var $43=_PyObject_CallMethodObjArgs($42, $41, 0); //@line 221 "iobase.c"
        HEAP[$res]=$43; //@line 221 "iobase.c"
        var $44=HEAP[$res]; //@line 226 "iobase.c"
        var $45=($44)==0; //@line 226 "iobase.c"
        if ($45) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 226 "iobase.c"
      case 10: // $bb9
        _PyErr_Clear(); //@line 227 "iobase.c"
        __label__ = 13; break; //@line 227 "iobase.c"
      case 11: // $bb10
        var $46=HEAP[$res]; //@line 229 "iobase.c"
        var $47=(($46)&4294967295); //@line 229 "iobase.c"
        var $48=HEAP[$47]; //@line 229 "iobase.c"
        var $49=((($48) - 1)&4294967295); //@line 229 "iobase.c"
        var $50=HEAP[$res]; //@line 229 "iobase.c"
        var $51=(($50)&4294967295); //@line 229 "iobase.c"
        HEAP[$51]=$49; //@line 229 "iobase.c"
        var $52=HEAP[$res]; //@line 229 "iobase.c"
        var $53=(($52)&4294967295); //@line 229 "iobase.c"
        var $54=HEAP[$53]; //@line 229 "iobase.c"
        var $55=((($54))|0)==0; //@line 229 "iobase.c"
        if ($55) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 229 "iobase.c"
      case 12: // $bb11
        var $56=HEAP[$res]; //@line 229 "iobase.c"
        var $57=(($56+4)&4294967295); //@line 229 "iobase.c"
        var $58=HEAP[$57]; //@line 229 "iobase.c"
        var $59=(($58+24)&4294967295); //@line 229 "iobase.c"
        var $60=HEAP[$59]; //@line 229 "iobase.c"
        var $61=HEAP[$res]; //@line 229 "iobase.c"
        FUNCTION_TABLE[$60]($61); //@line 229 "iobase.c"
        __label__ = 13; break; //@line 229 "iobase.c"
      case 13: // $bb12
        var $62=HEAP[$tb]; //@line 231 "iobase.c"
        var $63=HEAP[$v]; //@line 231 "iobase.c"
        var $64=HEAP[$tp]; //@line 231 "iobase.c"
        _PyErr_Restore($64, $63, $62); //@line 231 "iobase.c"
        var $65=HEAP[$is_zombie]; //@line 232 "iobase.c"
        var $66=((($65))|0)!=0; //@line 232 "iobase.c"
        if ($66) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 232 "iobase.c"
      case 14: // $bb13
        var $67=HEAP[$self_addr]; //@line 233 "iobase.c"
        var $68=(($67)&4294967295); //@line 233 "iobase.c"
        var $69=HEAP[$68]; //@line 233 "iobase.c"
        var $70=((($69) - 1)&4294967295); //@line 233 "iobase.c"
        var $71=HEAP[$self_addr]; //@line 233 "iobase.c"
        var $72=(($71)&4294967295); //@line 233 "iobase.c"
        HEAP[$72]=$70; //@line 233 "iobase.c"
        var $73=HEAP[$self_addr]; //@line 233 "iobase.c"
        var $74=(($73)&4294967295); //@line 233 "iobase.c"
        var $75=HEAP[$74]; //@line 233 "iobase.c"
        var $76=((($75))|0)!=0; //@line 233 "iobase.c"
        if ($76) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 233 "iobase.c"
      case 15: // $bb14
        var $77=HEAP[$self_addr]; //@line 236 "iobase.c"
        var $78=(($77)&4294967295); //@line 236 "iobase.c"
        var $79=HEAP[$78]; //@line 236 "iobase.c"
        HEAP[$refcnt]=$79; //@line 236 "iobase.c"
        var $80=HEAP[$self_addr]; //@line 237 "iobase.c"
        var $81=(($80)&4294967295); //@line 237 "iobase.c"
        HEAP[$81]=1; //@line 237 "iobase.c"
        var $82=HEAP[$self_addr]; //@line 238 "iobase.c"
        var $83=(($82)&4294967295); //@line 238 "iobase.c"
        var $84=HEAP[$refcnt]; //@line 238 "iobase.c"
        HEAP[$83]=$84; //@line 238 "iobase.c"
        HEAP[$0]=-1; //@line 252 "iobase.c"
        __label__ = 17; break; //@line 252 "iobase.c"
      case 16: // $bb15
        HEAP[$0]=0; //@line 255 "iobase.c"
        __label__ = 17; break; //@line 255 "iobase.c"
      case 17: // $bb16
        var $85=HEAP[$0]; //@line 252 "iobase.c"
        HEAP[$retval]=$85; //@line 252 "iobase.c"
        __label__ = 18; break; //@line 252 "iobase.c"
      case 18: // $return
        var $retval17=HEAP[$retval]; //@line 252 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval17; //@line 252 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_traverse($self, $visit, $arg) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $visit_addr=__stackBase__+4;
        var $arg_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $vret=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$visit_addr]=$visit;
        HEAP[$arg_addr]=$arg;
        var $1=HEAP[$self_addr]; //@line 261 "iobase.c"
        var $2=(($1+8)&4294967295); //@line 261 "iobase.c"
        var $3=HEAP[$2]; //@line 261 "iobase.c"
        var $4=($3)!=0; //@line 261 "iobase.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 261 "iobase.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 261 "iobase.c"
        var $6=(($5+8)&4294967295); //@line 261 "iobase.c"
        var $7=HEAP[$6]; //@line 261 "iobase.c"
        var $8=HEAP[$visit_addr]; //@line 261 "iobase.c"
        var $9=HEAP[$arg_addr]; //@line 261 "iobase.c"
        var $10=FUNCTION_TABLE[$8]($7, $9); //@line 261 "iobase.c"
        HEAP[$vret]=$10; //@line 261 "iobase.c"
        var $11=HEAP[$vret]; //@line 261 "iobase.c"
        var $12=((($11))|0)!=0; //@line 261 "iobase.c"
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 261 "iobase.c"
      case 2: // $bb1
        var $13=HEAP[$vret]; //@line 261 "iobase.c"
        HEAP[$0]=$13; //@line 261 "iobase.c"
        __label__ = 4; break; //@line 261 "iobase.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 262 "iobase.c"
        __label__ = 4; break; //@line 262 "iobase.c"
      case 4: // $bb3
        var $14=HEAP[$0]; //@line 261 "iobase.c"
        HEAP[$retval]=$14; //@line 261 "iobase.c"
        __label__ = 5; break; //@line 261 "iobase.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 261 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 261 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_clear($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_py_tmp=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 268 "iobase.c"
        var $2=$1; //@line 268 "iobase.c"
        var $3=__PyIOBase_finalize($2); //@line 268 "iobase.c"
        var $4=((($3))|0) < 0; //@line 268 "iobase.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 268 "iobase.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 269 "iobase.c"
        __label__ = 6; break; //@line 269 "iobase.c"
      case 2: // $bb1
        var $5=HEAP[$self_addr]; //@line 270 "iobase.c"
        var $6=(($5+8)&4294967295); //@line 270 "iobase.c"
        var $7=HEAP[$6]; //@line 270 "iobase.c"
        var $8=($7)!=0; //@line 270 "iobase.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 270 "iobase.c"
      case 3: // $bb2
        var $9=HEAP[$self_addr]; //@line 270 "iobase.c"
        var $10=(($9+8)&4294967295); //@line 270 "iobase.c"
        var $11=HEAP[$10]; //@line 270 "iobase.c"
        HEAP[$_py_tmp]=$11; //@line 270 "iobase.c"
        var $12=HEAP[$self_addr]; //@line 270 "iobase.c"
        var $13=(($12+8)&4294967295); //@line 270 "iobase.c"
        HEAP[$13]=0; //@line 270 "iobase.c"
        var $14=HEAP[$_py_tmp]; //@line 270 "iobase.c"
        var $15=(($14)&4294967295); //@line 270 "iobase.c"
        var $16=HEAP[$15]; //@line 270 "iobase.c"
        var $17=((($16) - 1)&4294967295); //@line 270 "iobase.c"
        var $18=HEAP[$_py_tmp]; //@line 270 "iobase.c"
        var $19=(($18)&4294967295); //@line 270 "iobase.c"
        HEAP[$19]=$17; //@line 270 "iobase.c"
        var $20=HEAP[$_py_tmp]; //@line 270 "iobase.c"
        var $21=(($20)&4294967295); //@line 270 "iobase.c"
        var $22=HEAP[$21]; //@line 270 "iobase.c"
        var $23=((($22))|0)==0; //@line 270 "iobase.c"
        if ($23) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 270 "iobase.c"
      case 4: // $bb3
        var $24=HEAP[$_py_tmp]; //@line 270 "iobase.c"
        var $25=(($24+4)&4294967295); //@line 270 "iobase.c"
        var $26=HEAP[$25]; //@line 270 "iobase.c"
        var $27=(($26+24)&4294967295); //@line 270 "iobase.c"
        var $28=HEAP[$27]; //@line 270 "iobase.c"
        var $29=HEAP[$_py_tmp]; //@line 270 "iobase.c"
        FUNCTION_TABLE[$28]($29); //@line 270 "iobase.c"
        __label__ = 5; break; //@line 270 "iobase.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 271 "iobase.c"
        __label__ = 6; break; //@line 271 "iobase.c"
      case 6: // $bb5
        var $30=HEAP[$0]; //@line 269 "iobase.c"
        HEAP[$retval]=$30; //@line 269 "iobase.c"
        __label__ = 7; break; //@line 269 "iobase.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 269 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 269 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_dealloc($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $g=__stackBase__+4;
        var $_py_tmp=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $0=HEAP[$self_addr]; //@line 284 "iobase.c"
        var $1=$0; //@line 284 "iobase.c"
        var $2=__PyIOBase_finalize($1); //@line 284 "iobase.c"
        var $3=((($2))|0) < 0; //@line 284 "iobase.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 284 "iobase.c"
      case 1: // $bb
        var $4=HEAP[$self_addr]; //@line 287 "iobase.c"
        var $5=$4; //@line 287 "iobase.c"
        var $6=(($5+4)&4294967295); //@line 287 "iobase.c"
        var $7=HEAP[$6]; //@line 287 "iobase.c"
        var $8=(($7+84)&4294967295); //@line 287 "iobase.c"
        var $9=HEAP[$8]; //@line 287 "iobase.c"
        var $10=($9) & 512; //@line 287 "iobase.c"
        var $11=((($10))|0)!=0; //@line 287 "iobase.c"
        if ($11) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 287 "iobase.c"
      case 2: // $bb1
        var $12=HEAP[$self_addr]; //@line 288 "iobase.c"
        var $13=$12; //@line 288 "iobase.c"
        var $14=(($13+4)&4294967295); //@line 288 "iobase.c"
        var $15=HEAP[$14]; //@line 288 "iobase.c"
        var $16=$15; //@line 288 "iobase.c"
        var $17=(($16)&4294967295); //@line 288 "iobase.c"
        var $18=HEAP[$17]; //@line 288 "iobase.c"
        var $19=((($18) + 1)&4294967295); //@line 288 "iobase.c"
        var $20=(($16)&4294967295); //@line 288 "iobase.c"
        HEAP[$20]=$19; //@line 288 "iobase.c"
        __label__ = 3; break; //@line 288 "iobase.c"
      case 3: // $bb2
        __label__ = 12; break; //@line 288 "iobase.c"
      case 4: // $bb3
        var $21=HEAP[$self_addr]; //@line 291 "iobase.c"
        var $22=$21; //@line 291 "iobase.c"
        var $23=(($22+-12)&4294967295); //@line 291 "iobase.c"
        HEAP[$g]=$23; //@line 291 "iobase.c"
        var $24=HEAP[$g]; //@line 291 "iobase.c"
        var $25=(($24)&4294967295); //@line 291 "iobase.c"
        var $26=(($25+8)&4294967295); //@line 291 "iobase.c"
        var $27=HEAP[$26]; //@line 291 "iobase.c"
        var $28=((($27))|0)==-2; //@line 291 "iobase.c"
        if ($28) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 291 "iobase.c"
      case 5: // $bb4
        ___assert_fail(((__str5186)&4294967295), ((__str6187)&4294967295), 291, ((___PRETTY_FUNCTION___8634)&4294967295)); //@line 291 "iobase.c"
        throw "Reached an unreachable! Original .ll line: 17177"; //@line 291 "iobase.c"
      case 6: // $bb5
        var $29=HEAP[$g]; //@line 291 "iobase.c"
        var $30=(($29)&4294967295); //@line 291 "iobase.c"
        var $31=(($30+8)&4294967295); //@line 291 "iobase.c"
        HEAP[$31]=-2; //@line 291 "iobase.c"
        var $32=HEAP[$g]; //@line 291 "iobase.c"
        var $33=(($32)&4294967295); //@line 291 "iobase.c"
        var $34=(($33+4)&4294967295); //@line 291 "iobase.c"
        var $35=HEAP[$34]; //@line 291 "iobase.c"
        var $36=HEAP[$g]; //@line 291 "iobase.c"
        var $37=(($36)&4294967295); //@line 291 "iobase.c"
        var $38=(($37)&4294967295); //@line 291 "iobase.c"
        var $39=HEAP[$38]; //@line 291 "iobase.c"
        var $40=(($35)&4294967295); //@line 291 "iobase.c"
        var $41=(($40)&4294967295); //@line 291 "iobase.c"
        HEAP[$41]=$39; //@line 291 "iobase.c"
        var $42=HEAP[$g]; //@line 291 "iobase.c"
        var $43=(($42)&4294967295); //@line 291 "iobase.c"
        var $44=(($43)&4294967295); //@line 291 "iobase.c"
        var $45=HEAP[$44]; //@line 291 "iobase.c"
        var $46=HEAP[$g]; //@line 291 "iobase.c"
        var $47=(($46)&4294967295); //@line 291 "iobase.c"
        var $48=(($47+4)&4294967295); //@line 291 "iobase.c"
        var $49=HEAP[$48]; //@line 291 "iobase.c"
        var $50=(($45)&4294967295); //@line 291 "iobase.c"
        var $51=(($50+4)&4294967295); //@line 291 "iobase.c"
        HEAP[$51]=$49; //@line 291 "iobase.c"
        var $52=HEAP[$g]; //@line 291 "iobase.c"
        var $53=(($52)&4294967295); //@line 291 "iobase.c"
        var $54=(($53)&4294967295); //@line 291 "iobase.c"
        HEAP[$54]=0; //@line 291 "iobase.c"
        var $55=HEAP[$self_addr]; //@line 292 "iobase.c"
        var $56=(($55+12)&4294967295); //@line 292 "iobase.c"
        var $57=HEAP[$56]; //@line 292 "iobase.c"
        var $58=($57)!=0; //@line 292 "iobase.c"
        if ($58) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 292 "iobase.c"
      case 7: // $bb6
        var $59=HEAP[$self_addr]; //@line 293 "iobase.c"
        var $60=$59; //@line 293 "iobase.c"
        _PyObject_ClearWeakRefs($60); //@line 293 "iobase.c"
        __label__ = 8; break; //@line 293 "iobase.c"
      case 8: // $bb7
        var $61=HEAP[$self_addr]; //@line 294 "iobase.c"
        var $62=(($61+8)&4294967295); //@line 294 "iobase.c"
        var $63=HEAP[$62]; //@line 294 "iobase.c"
        var $64=($63)!=0; //@line 294 "iobase.c"
        if ($64) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 294 "iobase.c"
      case 9: // $bb8
        var $65=HEAP[$self_addr]; //@line 294 "iobase.c"
        var $66=(($65+8)&4294967295); //@line 294 "iobase.c"
        var $67=HEAP[$66]; //@line 294 "iobase.c"
        HEAP[$_py_tmp]=$67; //@line 294 "iobase.c"
        var $68=HEAP[$self_addr]; //@line 294 "iobase.c"
        var $69=(($68+8)&4294967295); //@line 294 "iobase.c"
        HEAP[$69]=0; //@line 294 "iobase.c"
        var $70=HEAP[$_py_tmp]; //@line 294 "iobase.c"
        var $71=(($70)&4294967295); //@line 294 "iobase.c"
        var $72=HEAP[$71]; //@line 294 "iobase.c"
        var $73=((($72) - 1)&4294967295); //@line 294 "iobase.c"
        var $74=HEAP[$_py_tmp]; //@line 294 "iobase.c"
        var $75=(($74)&4294967295); //@line 294 "iobase.c"
        HEAP[$75]=$73; //@line 294 "iobase.c"
        var $76=HEAP[$_py_tmp]; //@line 294 "iobase.c"
        var $77=(($76)&4294967295); //@line 294 "iobase.c"
        var $78=HEAP[$77]; //@line 294 "iobase.c"
        var $79=((($78))|0)==0; //@line 294 "iobase.c"
        if ($79) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 294 "iobase.c"
      case 10: // $bb9
        var $80=HEAP[$_py_tmp]; //@line 294 "iobase.c"
        var $81=(($80+4)&4294967295); //@line 294 "iobase.c"
        var $82=HEAP[$81]; //@line 294 "iobase.c"
        var $83=(($82+24)&4294967295); //@line 294 "iobase.c"
        var $84=HEAP[$83]; //@line 294 "iobase.c"
        var $85=HEAP[$_py_tmp]; //@line 294 "iobase.c"
        FUNCTION_TABLE[$84]($85); //@line 294 "iobase.c"
        __label__ = 11; break; //@line 294 "iobase.c"
      case 11: // $bb10
        var $86=HEAP[$self_addr]; //@line 295 "iobase.c"
        var $87=$86; //@line 295 "iobase.c"
        var $88=(($87+4)&4294967295); //@line 295 "iobase.c"
        var $89=HEAP[$88]; //@line 295 "iobase.c"
        var $90=(($89+160)&4294967295); //@line 295 "iobase.c"
        var $91=HEAP[$90]; //@line 295 "iobase.c"
        var $92=HEAP[$self_addr]; //@line 295 "iobase.c"
        var $93=$92; //@line 295 "iobase.c"
        FUNCTION_TABLE[$91]($93); //@line 295 "iobase.c"
        __label__ = 12; break; //@line 295 "iobase.c"
      case 12: // $bb11
        __label__ = 13; break; //@line 289 "iobase.c"
      case 13: // $return
        STACKTOP = __stackBase__;
        return; //@line 289 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_seekable($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=((__Py_ZeroStruct)&4294967295); //@line 309 "iobase.c"
        var $2=HEAP[$1]; //@line 309 "iobase.c"
        var $3=((($2) + 1)&4294967295); //@line 309 "iobase.c"
        var $4=((__Py_ZeroStruct)&4294967295); //@line 309 "iobase.c"
        HEAP[$4]=$3; //@line 309 "iobase.c"
        HEAP[$0]=__Py_ZeroStruct; //@line 309 "iobase.c"
        var $5=HEAP[$0]; //@line 309 "iobase.c"
        HEAP[$retval]=$5; //@line 309 "iobase.c"
        __label__ = 1; break; //@line 309 "iobase.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 309 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 309 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __PyIOBase_check_seekable($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $res=__stackBase__+16;
        var $_py_tmp=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[__PyIO_str_seekable]; //@line 315 "iobase.c"
        var $2=HEAP[$self_addr]; //@line 315 "iobase.c"
        var $3=_PyObject_CallMethodObjArgs($2, $1, 0); //@line 315 "iobase.c"
        HEAP[$res]=$3; //@line 315 "iobase.c"
        var $4=HEAP[$res]; //@line 316 "iobase.c"
        var $5=($4)==0; //@line 316 "iobase.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 316 "iobase.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 317 "iobase.c"
        __label__ = 11; break; //@line 317 "iobase.c"
      case 2: // $bb1
        var $6=HEAP[$res]; //@line 318 "iobase.c"
        var $7=($6)!=(__Py_TrueStruct); //@line 318 "iobase.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 318 "iobase.c"
      case 3: // $bb2
        var $8=HEAP[$res]; //@line 319 "iobase.c"
        var $9=($8)!=0; //@line 319 "iobase.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 319 "iobase.c"
      case 4: // $bb3
        var $10=HEAP[$res]; //@line 319 "iobase.c"
        HEAP[$_py_tmp]=$10; //@line 319 "iobase.c"
        HEAP[$res]=0; //@line 319 "iobase.c"
        var $11=HEAP[$_py_tmp]; //@line 319 "iobase.c"
        var $12=(($11)&4294967295); //@line 319 "iobase.c"
        var $13=HEAP[$12]; //@line 319 "iobase.c"
        var $14=((($13) - 1)&4294967295); //@line 319 "iobase.c"
        var $15=HEAP[$_py_tmp]; //@line 319 "iobase.c"
        var $16=(($15)&4294967295); //@line 319 "iobase.c"
        HEAP[$16]=$14; //@line 319 "iobase.c"
        var $17=HEAP[$_py_tmp]; //@line 319 "iobase.c"
        var $18=(($17)&4294967295); //@line 319 "iobase.c"
        var $19=HEAP[$18]; //@line 319 "iobase.c"
        var $20=((($19))|0)==0; //@line 319 "iobase.c"
        if ($20) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 319 "iobase.c"
      case 5: // $bb4
        var $21=HEAP[$_py_tmp]; //@line 319 "iobase.c"
        var $22=(($21+4)&4294967295); //@line 319 "iobase.c"
        var $23=HEAP[$22]; //@line 319 "iobase.c"
        var $24=(($23+24)&4294967295); //@line 319 "iobase.c"
        var $25=HEAP[$24]; //@line 319 "iobase.c"
        var $26=HEAP[$_py_tmp]; //@line 319 "iobase.c"
        FUNCTION_TABLE[$25]($26); //@line 319 "iobase.c"
        __label__ = 6; break; //@line 319 "iobase.c"
      case 6: // $bb5
        var $27=HEAP[_PyExc_IOError]; //@line 320 "iobase.c"
        _PyErr_SetString($27, ((__str7188)&4294967295)); //@line 320 "iobase.c"
        HEAP[$0]=0; //@line 321 "iobase.c"
        __label__ = 11; break; //@line 321 "iobase.c"
      case 7: // $bb6
        var $28=HEAP[$args_addr]; //@line 323 "iobase.c"
        var $29=($28)==(__Py_TrueStruct); //@line 323 "iobase.c"
        if ($29) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 323 "iobase.c"
      case 8: // $bb7
        var $30=HEAP[$res]; //@line 324 "iobase.c"
        var $31=(($30)&4294967295); //@line 324 "iobase.c"
        var $32=HEAP[$31]; //@line 324 "iobase.c"
        var $33=((($32) - 1)&4294967295); //@line 324 "iobase.c"
        var $34=HEAP[$res]; //@line 324 "iobase.c"
        var $35=(($34)&4294967295); //@line 324 "iobase.c"
        HEAP[$35]=$33; //@line 324 "iobase.c"
        var $36=HEAP[$res]; //@line 324 "iobase.c"
        var $37=(($36)&4294967295); //@line 324 "iobase.c"
        var $38=HEAP[$37]; //@line 324 "iobase.c"
        var $39=((($38))|0)==0; //@line 324 "iobase.c"
        if ($39) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 324 "iobase.c"
      case 9: // $bb8
        var $40=HEAP[$res]; //@line 324 "iobase.c"
        var $41=(($40+4)&4294967295); //@line 324 "iobase.c"
        var $42=HEAP[$41]; //@line 324 "iobase.c"
        var $43=(($42+24)&4294967295); //@line 324 "iobase.c"
        var $44=HEAP[$43]; //@line 324 "iobase.c"
        var $45=HEAP[$res]; //@line 324 "iobase.c"
        FUNCTION_TABLE[$44]($45); //@line 324 "iobase.c"
        __label__ = 10; break; //@line 324 "iobase.c"
      case 10: // $bb9
        var $46=HEAP[$res]; //@line 326 "iobase.c"
        HEAP[$0]=$46; //@line 326 "iobase.c"
        __label__ = 11; break; //@line 326 "iobase.c"
      case 11: // $bb10
        var $47=HEAP[$0]; //@line 317 "iobase.c"
        HEAP[$retval]=$47; //@line 317 "iobase.c"
        __label__ = 12; break; //@line 317 "iobase.c"
      case 12: // $return
        var $retval11=HEAP[$retval]; //@line 317 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 317 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_readable($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=((__Py_ZeroStruct)&4294967295); //@line 337 "iobase.c"
        var $2=HEAP[$1]; //@line 337 "iobase.c"
        var $3=((($2) + 1)&4294967295); //@line 337 "iobase.c"
        var $4=((__Py_ZeroStruct)&4294967295); //@line 337 "iobase.c"
        HEAP[$4]=$3; //@line 337 "iobase.c"
        HEAP[$0]=__Py_ZeroStruct; //@line 337 "iobase.c"
        var $5=HEAP[$0]; //@line 337 "iobase.c"
        HEAP[$retval]=$5; //@line 337 "iobase.c"
        __label__ = 1; break; //@line 337 "iobase.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 337 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 337 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __PyIOBase_check_readable($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $res=__stackBase__+16;
        var $_py_tmp=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[__PyIO_str_readable]; //@line 344 "iobase.c"
        var $2=HEAP[$self_addr]; //@line 344 "iobase.c"
        var $3=_PyObject_CallMethodObjArgs($2, $1, 0); //@line 344 "iobase.c"
        HEAP[$res]=$3; //@line 344 "iobase.c"
        var $4=HEAP[$res]; //@line 345 "iobase.c"
        var $5=($4)==0; //@line 345 "iobase.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 345 "iobase.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 346 "iobase.c"
        __label__ = 11; break; //@line 346 "iobase.c"
      case 2: // $bb1
        var $6=HEAP[$res]; //@line 347 "iobase.c"
        var $7=($6)!=(__Py_TrueStruct); //@line 347 "iobase.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 347 "iobase.c"
      case 3: // $bb2
        var $8=HEAP[$res]; //@line 348 "iobase.c"
        var $9=($8)!=0; //@line 348 "iobase.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 348 "iobase.c"
      case 4: // $bb3
        var $10=HEAP[$res]; //@line 348 "iobase.c"
        HEAP[$_py_tmp]=$10; //@line 348 "iobase.c"
        HEAP[$res]=0; //@line 348 "iobase.c"
        var $11=HEAP[$_py_tmp]; //@line 348 "iobase.c"
        var $12=(($11)&4294967295); //@line 348 "iobase.c"
        var $13=HEAP[$12]; //@line 348 "iobase.c"
        var $14=((($13) - 1)&4294967295); //@line 348 "iobase.c"
        var $15=HEAP[$_py_tmp]; //@line 348 "iobase.c"
        var $16=(($15)&4294967295); //@line 348 "iobase.c"
        HEAP[$16]=$14; //@line 348 "iobase.c"
        var $17=HEAP[$_py_tmp]; //@line 348 "iobase.c"
        var $18=(($17)&4294967295); //@line 348 "iobase.c"
        var $19=HEAP[$18]; //@line 348 "iobase.c"
        var $20=((($19))|0)==0; //@line 348 "iobase.c"
        if ($20) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 348 "iobase.c"
      case 5: // $bb4
        var $21=HEAP[$_py_tmp]; //@line 348 "iobase.c"
        var $22=(($21+4)&4294967295); //@line 348 "iobase.c"
        var $23=HEAP[$22]; //@line 348 "iobase.c"
        var $24=(($23+24)&4294967295); //@line 348 "iobase.c"
        var $25=HEAP[$24]; //@line 348 "iobase.c"
        var $26=HEAP[$_py_tmp]; //@line 348 "iobase.c"
        FUNCTION_TABLE[$25]($26); //@line 348 "iobase.c"
        __label__ = 6; break; //@line 348 "iobase.c"
      case 6: // $bb5
        var $27=HEAP[_PyExc_IOError]; //@line 349 "iobase.c"
        _PyErr_SetString($27, ((__str8189)&4294967295)); //@line 349 "iobase.c"
        HEAP[$0]=0; //@line 350 "iobase.c"
        __label__ = 11; break; //@line 350 "iobase.c"
      case 7: // $bb6
        var $28=HEAP[$args_addr]; //@line 352 "iobase.c"
        var $29=($28)==(__Py_TrueStruct); //@line 352 "iobase.c"
        if ($29) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 352 "iobase.c"
      case 8: // $bb7
        var $30=HEAP[$res]; //@line 353 "iobase.c"
        var $31=(($30)&4294967295); //@line 353 "iobase.c"
        var $32=HEAP[$31]; //@line 353 "iobase.c"
        var $33=((($32) - 1)&4294967295); //@line 353 "iobase.c"
        var $34=HEAP[$res]; //@line 353 "iobase.c"
        var $35=(($34)&4294967295); //@line 353 "iobase.c"
        HEAP[$35]=$33; //@line 353 "iobase.c"
        var $36=HEAP[$res]; //@line 353 "iobase.c"
        var $37=(($36)&4294967295); //@line 353 "iobase.c"
        var $38=HEAP[$37]; //@line 353 "iobase.c"
        var $39=((($38))|0)==0; //@line 353 "iobase.c"
        if ($39) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 353 "iobase.c"
      case 9: // $bb8
        var $40=HEAP[$res]; //@line 353 "iobase.c"
        var $41=(($40+4)&4294967295); //@line 353 "iobase.c"
        var $42=HEAP[$41]; //@line 353 "iobase.c"
        var $43=(($42+24)&4294967295); //@line 353 "iobase.c"
        var $44=HEAP[$43]; //@line 353 "iobase.c"
        var $45=HEAP[$res]; //@line 353 "iobase.c"
        FUNCTION_TABLE[$44]($45); //@line 353 "iobase.c"
        __label__ = 10; break; //@line 353 "iobase.c"
      case 10: // $bb9
        var $46=HEAP[$res]; //@line 355 "iobase.c"
        HEAP[$0]=$46; //@line 355 "iobase.c"
        __label__ = 11; break; //@line 355 "iobase.c"
      case 11: // $bb10
        var $47=HEAP[$0]; //@line 346 "iobase.c"
        HEAP[$retval]=$47; //@line 346 "iobase.c"
        __label__ = 12; break; //@line 346 "iobase.c"
      case 12: // $return
        var $retval11=HEAP[$retval]; //@line 346 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 346 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_writable($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=((__Py_ZeroStruct)&4294967295); //@line 366 "iobase.c"
        var $2=HEAP[$1]; //@line 366 "iobase.c"
        var $3=((($2) + 1)&4294967295); //@line 366 "iobase.c"
        var $4=((__Py_ZeroStruct)&4294967295); //@line 366 "iobase.c"
        HEAP[$4]=$3; //@line 366 "iobase.c"
        HEAP[$0]=__Py_ZeroStruct; //@line 366 "iobase.c"
        var $5=HEAP[$0]; //@line 366 "iobase.c"
        HEAP[$retval]=$5; //@line 366 "iobase.c"
        __label__ = 1; break; //@line 366 "iobase.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 366 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 366 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __PyIOBase_check_writable($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $res=__stackBase__+16;
        var $_py_tmp=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[__PyIO_str_writable]; //@line 373 "iobase.c"
        var $2=HEAP[$self_addr]; //@line 373 "iobase.c"
        var $3=_PyObject_CallMethodObjArgs($2, $1, 0); //@line 373 "iobase.c"
        HEAP[$res]=$3; //@line 373 "iobase.c"
        var $4=HEAP[$res]; //@line 374 "iobase.c"
        var $5=($4)==0; //@line 374 "iobase.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 374 "iobase.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 375 "iobase.c"
        __label__ = 11; break; //@line 375 "iobase.c"
      case 2: // $bb1
        var $6=HEAP[$res]; //@line 376 "iobase.c"
        var $7=($6)!=(__Py_TrueStruct); //@line 376 "iobase.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 376 "iobase.c"
      case 3: // $bb2
        var $8=HEAP[$res]; //@line 377 "iobase.c"
        var $9=($8)!=0; //@line 377 "iobase.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 377 "iobase.c"
      case 4: // $bb3
        var $10=HEAP[$res]; //@line 377 "iobase.c"
        HEAP[$_py_tmp]=$10; //@line 377 "iobase.c"
        HEAP[$res]=0; //@line 377 "iobase.c"
        var $11=HEAP[$_py_tmp]; //@line 377 "iobase.c"
        var $12=(($11)&4294967295); //@line 377 "iobase.c"
        var $13=HEAP[$12]; //@line 377 "iobase.c"
        var $14=((($13) - 1)&4294967295); //@line 377 "iobase.c"
        var $15=HEAP[$_py_tmp]; //@line 377 "iobase.c"
        var $16=(($15)&4294967295); //@line 377 "iobase.c"
        HEAP[$16]=$14; //@line 377 "iobase.c"
        var $17=HEAP[$_py_tmp]; //@line 377 "iobase.c"
        var $18=(($17)&4294967295); //@line 377 "iobase.c"
        var $19=HEAP[$18]; //@line 377 "iobase.c"
        var $20=((($19))|0)==0; //@line 377 "iobase.c"
        if ($20) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 377 "iobase.c"
      case 5: // $bb4
        var $21=HEAP[$_py_tmp]; //@line 377 "iobase.c"
        var $22=(($21+4)&4294967295); //@line 377 "iobase.c"
        var $23=HEAP[$22]; //@line 377 "iobase.c"
        var $24=(($23+24)&4294967295); //@line 377 "iobase.c"
        var $25=HEAP[$24]; //@line 377 "iobase.c"
        var $26=HEAP[$_py_tmp]; //@line 377 "iobase.c"
        FUNCTION_TABLE[$25]($26); //@line 377 "iobase.c"
        __label__ = 6; break; //@line 377 "iobase.c"
      case 6: // $bb5
        var $27=HEAP[_PyExc_IOError]; //@line 378 "iobase.c"
        _PyErr_SetString($27, ((__str9190)&4294967295)); //@line 378 "iobase.c"
        HEAP[$0]=0; //@line 379 "iobase.c"
        __label__ = 11; break; //@line 379 "iobase.c"
      case 7: // $bb6
        var $28=HEAP[$args_addr]; //@line 381 "iobase.c"
        var $29=($28)==(__Py_TrueStruct); //@line 381 "iobase.c"
        if ($29) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 381 "iobase.c"
      case 8: // $bb7
        var $30=HEAP[$res]; //@line 382 "iobase.c"
        var $31=(($30)&4294967295); //@line 382 "iobase.c"
        var $32=HEAP[$31]; //@line 382 "iobase.c"
        var $33=((($32) - 1)&4294967295); //@line 382 "iobase.c"
        var $34=HEAP[$res]; //@line 382 "iobase.c"
        var $35=(($34)&4294967295); //@line 382 "iobase.c"
        HEAP[$35]=$33; //@line 382 "iobase.c"
        var $36=HEAP[$res]; //@line 382 "iobase.c"
        var $37=(($36)&4294967295); //@line 382 "iobase.c"
        var $38=HEAP[$37]; //@line 382 "iobase.c"
        var $39=((($38))|0)==0; //@line 382 "iobase.c"
        if ($39) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 382 "iobase.c"
      case 9: // $bb8
        var $40=HEAP[$res]; //@line 382 "iobase.c"
        var $41=(($40+4)&4294967295); //@line 382 "iobase.c"
        var $42=HEAP[$41]; //@line 382 "iobase.c"
        var $43=(($42+24)&4294967295); //@line 382 "iobase.c"
        var $44=HEAP[$43]; //@line 382 "iobase.c"
        var $45=HEAP[$res]; //@line 382 "iobase.c"
        FUNCTION_TABLE[$44]($45); //@line 382 "iobase.c"
        __label__ = 10; break; //@line 382 "iobase.c"
      case 10: // $bb9
        var $46=HEAP[$res]; //@line 384 "iobase.c"
        HEAP[$0]=$46; //@line 384 "iobase.c"
        __label__ = 11; break; //@line 384 "iobase.c"
      case 11: // $bb10
        var $47=HEAP[$0]; //@line 375 "iobase.c"
        HEAP[$retval]=$47; //@line 375 "iobase.c"
        __label__ = 12; break; //@line 375 "iobase.c"
      case 12: // $return
        var $retval11=HEAP[$retval]; //@line 375 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 375 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_enter($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 392 "iobase.c"
        var $2=__PyIOBase_check_closed($1, __Py_TrueStruct); //@line 392 "iobase.c"
        var $3=($2)==0; //@line 392 "iobase.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 392 "iobase.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 393 "iobase.c"
        __label__ = 3; break; //@line 393 "iobase.c"
      case 2: // $bb1
        var $4=HEAP[$self_addr]; //@line 395 "iobase.c"
        var $5=(($4)&4294967295); //@line 395 "iobase.c"
        var $6=HEAP[$5]; //@line 395 "iobase.c"
        var $7=((($6) + 1)&4294967295); //@line 395 "iobase.c"
        var $8=HEAP[$self_addr]; //@line 395 "iobase.c"
        var $9=(($8)&4294967295); //@line 395 "iobase.c"
        HEAP[$9]=$7; //@line 395 "iobase.c"
        var $10=HEAP[$self_addr]; //@line 396 "iobase.c"
        HEAP[$0]=$10; //@line 396 "iobase.c"
        __label__ = 3; break; //@line 396 "iobase.c"
      case 3: // $bb2
        var $11=HEAP[$0]; //@line 393 "iobase.c"
        HEAP[$retval]=$11; //@line 393 "iobase.c"
        __label__ = 4; break; //@line 393 "iobase.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 393 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 393 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_exit($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[__PyIO_str_close]; //@line 402 "iobase.c"
        var $2=HEAP[$self_addr]; //@line 402 "iobase.c"
        var $3=_PyObject_CallMethodObjArgs($2, $1, 0); //@line 402 "iobase.c"
        HEAP[$0]=$3; //@line 402 "iobase.c"
        var $4=HEAP[$0]; //@line 402 "iobase.c"
        HEAP[$retval]=$4; //@line 402 "iobase.c"
        __label__ = 1; break; //@line 402 "iobase.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 402 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 402 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_fileno($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=_iobase_unsupported(((__str10191)&4294967295)); //@line 417 "iobase.c"
        HEAP[$0]=$1; //@line 417 "iobase.c"
        var $2=HEAP[$0]; //@line 417 "iobase.c"
        HEAP[$retval]=$2; //@line 417 "iobase.c"
        __label__ = 1; break; //@line 417 "iobase.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 417 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 417 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_isatty($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 428 "iobase.c"
        var $2=__PyIOBase_check_closed($1, __Py_TrueStruct); //@line 428 "iobase.c"
        var $3=($2)==0; //@line 428 "iobase.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 428 "iobase.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 429 "iobase.c"
        __label__ = 3; break; //@line 429 "iobase.c"
      case 2: // $bb1
        var $4=((__Py_ZeroStruct)&4294967295); //@line 430 "iobase.c"
        var $5=HEAP[$4]; //@line 430 "iobase.c"
        var $6=((($5) + 1)&4294967295); //@line 430 "iobase.c"
        var $7=((__Py_ZeroStruct)&4294967295); //@line 430 "iobase.c"
        HEAP[$7]=$6; //@line 430 "iobase.c"
        HEAP[$0]=__Py_ZeroStruct; //@line 430 "iobase.c"
        __label__ = 3; break; //@line 430 "iobase.c"
      case 3: // $bb2
        var $8=HEAP[$0]; //@line 429 "iobase.c"
        HEAP[$retval]=$8; //@line 429 "iobase.c"
        __label__ = 4; break; //@line 429 "iobase.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 429 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 429 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_readline($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 68; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 68);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $iftmp_62=__stackBase__+12;
        var $iftmp_54=__stackBase__+16;
        var $iftmp_51=__stackBase__+20;
        var $0=__stackBase__+24;
        var $limit=__stackBase__+28;
        var $has_peek=__stackBase__+32;
        var $buffer=__stackBase__+36;
        var $result=__stackBase__+40;
        var $old_size=__stackBase__+44;
        var $nreadahead=__stackBase__+48;
        var $b=__stackBase__+52;
        var $readahead=__stackBase__+56;
        var $n=__stackBase__+60;
        var $buf=__stackBase__+64;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$limit]=-1; //@line 449 "iobase.c"
        HEAP[$has_peek]=0; //@line 450 "iobase.c"
        HEAP[$old_size]=-1; //@line 452 "iobase.c"
        var $1=HEAP[$args_addr]; //@line 454 "iobase.c"
        var $2=__PyArg_ParseTuple_SizeT($1, ((__str11192)&4294967295), (FUNCTION_TABLE_OFFSET + 2), $limit); //@line 454 "iobase.c"
        var $3=((($2))|0)==0; //@line 454 "iobase.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 454 "iobase.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 455 "iobase.c"
        __label__ = 73; break; //@line 455 "iobase.c"
      case 2: // $bb1
        var $4=HEAP[$self_addr]; //@line 458 "iobase.c"
        var $5=_PyObject_HasAttrString($4, ((__str12193)&4294967295)); //@line 458 "iobase.c"
        var $6=((($5))|0)!=0; //@line 458 "iobase.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 458 "iobase.c"
      case 3: // $bb2
        HEAP[$has_peek]=1; //@line 459 "iobase.c"
        __label__ = 4; break; //@line 459 "iobase.c"
      case 4: // $bb3
        var $7=_PyByteArray_FromStringAndSize(0, 0); //@line 461 "iobase.c"
        HEAP[$buffer]=$7; //@line 461 "iobase.c"
        var $8=HEAP[$buffer]; //@line 462 "iobase.c"
        var $9=($8)==0; //@line 462 "iobase.c"
        if ($9) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 462 "iobase.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 463 "iobase.c"
        __label__ = 73; break; //@line 463 "iobase.c"
      case 6: // $bb5
        __label__ = 56; break; //@line 463 "iobase.c"
      case 7: // $bb6
        HEAP[$nreadahead]=1; //@line 466 "iobase.c"
        var $10=HEAP[$has_peek]; //@line 469 "iobase.c"
        var $11=((($10))|0)!=0; //@line 469 "iobase.c"
        if ($11) { __label__ = 8; break; } else { __label__ = 26; break; } //@line 469 "iobase.c"
      case 8: // $bb7
        var $12=HEAP[$self_addr]; //@line 470 "iobase.c"
        var $13=__PyObject_CallMethod_SizeT($12, ((__str12193)&4294967295), ((__str13194)&4294967295), 1); //@line 470 "iobase.c"
        HEAP[$readahead]=$13; //@line 470 "iobase.c"
        var $14=HEAP[$readahead]; //@line 471 "iobase.c"
        var $15=($14)==0; //@line 471 "iobase.c"
        if ($15) { __label__ = 70; break; } else { __label__ = 9; break; } //@line 471 "iobase.c"
      case 9: // $bb8
        var $16=HEAP[$readahead]; //@line 473 "iobase.c"
        var $17=(($16+4)&4294967295); //@line 473 "iobase.c"
        var $18=HEAP[$17]; //@line 473 "iobase.c"
        var $19=(($18+84)&4294967295); //@line 473 "iobase.c"
        var $20=HEAP[$19]; //@line 473 "iobase.c"
        var $21=($20) & 134217728; //@line 473 "iobase.c"
        var $22=((($21))|0)==0; //@line 473 "iobase.c"
        if ($22) { __label__ = 10; break; } else { __label__ = 13; break; } //@line 473 "iobase.c"
      case 10: // $bb9
        var $23=HEAP[$readahead]; //@line 474 "iobase.c"
        var $24=(($23+4)&4294967295); //@line 474 "iobase.c"
        var $25=HEAP[$24]; //@line 474 "iobase.c"
        var $26=(($25+12)&4294967295); //@line 474 "iobase.c"
        var $27=HEAP[$26]; //@line 474 "iobase.c"
        var $28=HEAP[_PyExc_IOError]; //@line 474 "iobase.c"
        var $29=_PyErr_Format($28, ((__str14195)&4294967295), $27); //@line 474 "iobase.c"
        var $30=HEAP[$readahead]; //@line 477 "iobase.c"
        var $31=(($30)&4294967295); //@line 477 "iobase.c"
        var $32=HEAP[$31]; //@line 477 "iobase.c"
        var $33=((($32) - 1)&4294967295); //@line 477 "iobase.c"
        var $34=HEAP[$readahead]; //@line 477 "iobase.c"
        var $35=(($34)&4294967295); //@line 477 "iobase.c"
        HEAP[$35]=$33; //@line 477 "iobase.c"
        var $36=HEAP[$readahead]; //@line 477 "iobase.c"
        var $37=(($36)&4294967295); //@line 477 "iobase.c"
        var $38=HEAP[$37]; //@line 477 "iobase.c"
        var $39=((($38))|0)==0; //@line 477 "iobase.c"
        if ($39) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 477 "iobase.c"
      case 11: // $bb10
        var $40=HEAP[$readahead]; //@line 477 "iobase.c"
        var $41=(($40+4)&4294967295); //@line 477 "iobase.c"
        var $42=HEAP[$41]; //@line 477 "iobase.c"
        var $43=(($42+24)&4294967295); //@line 477 "iobase.c"
        var $44=HEAP[$43]; //@line 477 "iobase.c"
        var $45=HEAP[$readahead]; //@line 477 "iobase.c"
        FUNCTION_TABLE[$44]($45); //@line 477 "iobase.c"
        __label__ = 12; break; //@line 477 "iobase.c"
      case 12: // $bb11
        __label__ = 70; break; //@line 477 "iobase.c"
      case 13: // $bb12
        var $46=HEAP[$readahead]; //@line 480 "iobase.c"
        var $47=$46; //@line 480 "iobase.c"
        var $48=(($47+8)&4294967295); //@line 480 "iobase.c"
        var $49=HEAP[$48]; //@line 480 "iobase.c"
        var $50=((($49))|0) > 0; //@line 480 "iobase.c"
        if ($50) { __label__ = 14; break; } else { __label__ = 24; break; } //@line 480 "iobase.c"
      case 14: // $bb13
        HEAP[$n]=0; //@line 481 "iobase.c"
        var $51=HEAP[$readahead]; //@line 482 "iobase.c"
        var $52=$51; //@line 482 "iobase.c"
        var $53=(($52+20)&4294967295); //@line 482 "iobase.c"
        var $54=(($53)&4294967295); //@line 482 "iobase.c"
        HEAP[$buf]=$54; //@line 482 "iobase.c"
        var $55=HEAP[$limit]; //@line 483 "iobase.c"
        var $56=((($55))|0) >= 0; //@line 483 "iobase.c"
        if ($56) { __label__ = 15; break; } else { __label__ = 20; break; } //@line 483 "iobase.c"
      case 15: // $bb14
        var $57=HEAP[$readahead]; //@line 485 "iobase.c"
        var $58=$57; //@line 485 "iobase.c"
        var $59=(($58+8)&4294967295); //@line 485 "iobase.c"
        var $60=HEAP[$59]; //@line 485 "iobase.c"
        var $61=HEAP[$n]; //@line 485 "iobase.c"
        var $62=((($60))|0) <= ((($61))|0); //@line 485 "iobase.c"
        if ($62) { __label__ = 19; break; } else { __label__ = 16; break; } //@line 485 "iobase.c"
      case 16: // $bb15
        var $63=HEAP[$limit]; //@line 485 "iobase.c"
        var $64=HEAP[$n]; //@line 485 "iobase.c"
        var $65=((($64))|0) >= ((($63))|0); //@line 485 "iobase.c"
        if ($65) { __label__ = 19; break; } else { __label__ = 17; break; } //@line 485 "iobase.c"
      case 17: // $bb16
        var $66=HEAP[$buf]; //@line 487 "iobase.c"
        var $67=HEAP[$n]; //@line 487 "iobase.c"
        var $68=(($66+$67)&4294967295); //@line 487 "iobase.c"
        var $69=HEAP[$68]; //@line 487 "iobase.c"
        var $70=reSign(($69), 8, 0)==10; //@line 487 "iobase.c"
        var $71=unSign(($70), 1, 0); //@line 487 "iobase.c"
        var $72=HEAP[$n]; //@line 487 "iobase.c"
        var $73=((($72) + 1)&4294967295); //@line 487 "iobase.c"
        HEAP[$n]=$73; //@line 487 "iobase.c"
        var $toBool=reSign(($71), 8, 0)!=0; //@line 487 "iobase.c"
        if ($toBool) { __label__ = 19; break; } else { __label__ = 18; break; } //@line 487 "iobase.c"
      case 18: // $bb17
        __label__ = 15; break; //@line 487 "iobase.c"
      case 19: // $bb18
        __label__ = 23; break; //@line 487 "iobase.c"
      case 20: // $bb19
        var $74=HEAP[$readahead]; //@line 493 "iobase.c"
        var $75=$74; //@line 493 "iobase.c"
        var $76=(($75+8)&4294967295); //@line 493 "iobase.c"
        var $77=HEAP[$76]; //@line 493 "iobase.c"
        var $78=HEAP[$n]; //@line 493 "iobase.c"
        var $79=((($77))|0) <= ((($78))|0); //@line 493 "iobase.c"
        if ($79) { __label__ = 23; break; } else { __label__ = 21; break; } //@line 493 "iobase.c"
      case 21: // $bb20
        var $80=HEAP[$buf]; //@line 495 "iobase.c"
        var $81=HEAP[$n]; //@line 495 "iobase.c"
        var $82=(($80+$81)&4294967295); //@line 495 "iobase.c"
        var $83=HEAP[$82]; //@line 495 "iobase.c"
        var $84=reSign(($83), 8, 0)==10; //@line 495 "iobase.c"
        var $85=unSign(($84), 1, 0); //@line 495 "iobase.c"
        var $86=HEAP[$n]; //@line 495 "iobase.c"
        var $87=((($86) + 1)&4294967295); //@line 495 "iobase.c"
        HEAP[$n]=$87; //@line 495 "iobase.c"
        var $toBool21=reSign(($85), 8, 0)!=0; //@line 495 "iobase.c"
        if ($toBool21) { __label__ = 23; break; } else { __label__ = 22; break; } //@line 495 "iobase.c"
      case 22: // $bb22
        __label__ = 20; break; //@line 495 "iobase.c"
      case 23: // $bb23
        var $88=HEAP[$n]; //@line 499 "iobase.c"
        HEAP[$nreadahead]=$88; //@line 499 "iobase.c"
        __label__ = 24; break; //@line 499 "iobase.c"
      case 24: // $bb24
        var $89=HEAP[$readahead]; //@line 501 "iobase.c"
        var $90=(($89)&4294967295); //@line 501 "iobase.c"
        var $91=HEAP[$90]; //@line 501 "iobase.c"
        var $92=((($91) - 1)&4294967295); //@line 501 "iobase.c"
        var $93=HEAP[$readahead]; //@line 501 "iobase.c"
        var $94=(($93)&4294967295); //@line 501 "iobase.c"
        HEAP[$94]=$92; //@line 501 "iobase.c"
        var $95=HEAP[$readahead]; //@line 501 "iobase.c"
        var $96=(($95)&4294967295); //@line 501 "iobase.c"
        var $97=HEAP[$96]; //@line 501 "iobase.c"
        var $98=((($97))|0)==0; //@line 501 "iobase.c"
        if ($98) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 501 "iobase.c"
      case 25: // $bb25
        var $99=HEAP[$readahead]; //@line 501 "iobase.c"
        var $100=(($99+4)&4294967295); //@line 501 "iobase.c"
        var $101=HEAP[$100]; //@line 501 "iobase.c"
        var $102=(($101+24)&4294967295); //@line 501 "iobase.c"
        var $103=HEAP[$102]; //@line 501 "iobase.c"
        var $104=HEAP[$readahead]; //@line 501 "iobase.c"
        FUNCTION_TABLE[$103]($104); //@line 501 "iobase.c"
        __label__ = 26; break; //@line 501 "iobase.c"
      case 26: // $bb26
        var $105=HEAP[$self_addr]; //@line 504 "iobase.c"
        var $106=HEAP[$nreadahead]; //@line 504 "iobase.c"
        var $107=__PyObject_CallMethod_SizeT($105, ((__str15196)&4294967295), ((__str16197)&4294967295), $106); //@line 504 "iobase.c"
        HEAP[$b]=$107; //@line 504 "iobase.c"
        var $108=HEAP[$b]; //@line 505 "iobase.c"
        var $109=($108)==0; //@line 505 "iobase.c"
        if ($109) { __label__ = 70; break; } else { __label__ = 27; break; } //@line 505 "iobase.c"
      case 27: // $bb27
        var $110=HEAP[$b]; //@line 507 "iobase.c"
        var $111=(($110+4)&4294967295); //@line 507 "iobase.c"
        var $112=HEAP[$111]; //@line 507 "iobase.c"
        var $113=(($112+84)&4294967295); //@line 507 "iobase.c"
        var $114=HEAP[$113]; //@line 507 "iobase.c"
        var $115=($114) & 134217728; //@line 507 "iobase.c"
        var $116=((($115))|0)==0; //@line 507 "iobase.c"
        if ($116) { __label__ = 28; break; } else { __label__ = 31; break; } //@line 507 "iobase.c"
      case 28: // $bb28
        var $117=HEAP[$b]; //@line 508 "iobase.c"
        var $118=(($117+4)&4294967295); //@line 508 "iobase.c"
        var $119=HEAP[$118]; //@line 508 "iobase.c"
        var $120=(($119+12)&4294967295); //@line 508 "iobase.c"
        var $121=HEAP[$120]; //@line 508 "iobase.c"
        var $122=HEAP[_PyExc_IOError]; //@line 508 "iobase.c"
        var $123=_PyErr_Format($122, ((__str17198)&4294967295), $121); //@line 508 "iobase.c"
        var $124=HEAP[$b]; //@line 511 "iobase.c"
        var $125=(($124)&4294967295); //@line 511 "iobase.c"
        var $126=HEAP[$125]; //@line 511 "iobase.c"
        var $127=((($126) - 1)&4294967295); //@line 511 "iobase.c"
        var $128=HEAP[$b]; //@line 511 "iobase.c"
        var $129=(($128)&4294967295); //@line 511 "iobase.c"
        HEAP[$129]=$127; //@line 511 "iobase.c"
        var $130=HEAP[$b]; //@line 511 "iobase.c"
        var $131=(($130)&4294967295); //@line 511 "iobase.c"
        var $132=HEAP[$131]; //@line 511 "iobase.c"
        var $133=((($132))|0)==0; //@line 511 "iobase.c"
        if ($133) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 511 "iobase.c"
      case 29: // $bb29
        var $134=HEAP[$b]; //@line 511 "iobase.c"
        var $135=(($134+4)&4294967295); //@line 511 "iobase.c"
        var $136=HEAP[$135]; //@line 511 "iobase.c"
        var $137=(($136+24)&4294967295); //@line 511 "iobase.c"
        var $138=HEAP[$137]; //@line 511 "iobase.c"
        var $139=HEAP[$b]; //@line 511 "iobase.c"
        FUNCTION_TABLE[$138]($139); //@line 511 "iobase.c"
        __label__ = 30; break; //@line 511 "iobase.c"
      case 30: // $bb30
        __label__ = 70; break; //@line 511 "iobase.c"
      case 31: // $bb31
        var $140=HEAP[$b]; //@line 514 "iobase.c"
        var $141=$140; //@line 514 "iobase.c"
        var $142=(($141+8)&4294967295); //@line 514 "iobase.c"
        var $143=HEAP[$142]; //@line 514 "iobase.c"
        var $144=((($143))|0)==0; //@line 514 "iobase.c"
        if ($144) { __label__ = 32; break; } else { __label__ = 35; break; } //@line 514 "iobase.c"
      case 32: // $bb32
        var $145=HEAP[$b]; //@line 515 "iobase.c"
        var $146=(($145)&4294967295); //@line 515 "iobase.c"
        var $147=HEAP[$146]; //@line 515 "iobase.c"
        var $148=((($147) - 1)&4294967295); //@line 515 "iobase.c"
        var $149=HEAP[$b]; //@line 515 "iobase.c"
        var $150=(($149)&4294967295); //@line 515 "iobase.c"
        HEAP[$150]=$148; //@line 515 "iobase.c"
        var $151=HEAP[$b]; //@line 515 "iobase.c"
        var $152=(($151)&4294967295); //@line 515 "iobase.c"
        var $153=HEAP[$152]; //@line 515 "iobase.c"
        var $154=((($153))|0)==0; //@line 515 "iobase.c"
        if ($154) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 515 "iobase.c"
      case 33: // $bb33
        var $155=HEAP[$b]; //@line 515 "iobase.c"
        var $156=(($155+4)&4294967295); //@line 515 "iobase.c"
        var $157=HEAP[$156]; //@line 515 "iobase.c"
        var $158=(($157+24)&4294967295); //@line 515 "iobase.c"
        var $159=HEAP[$158]; //@line 515 "iobase.c"
        var $160=HEAP[$b]; //@line 515 "iobase.c"
        FUNCTION_TABLE[$159]($160); //@line 515 "iobase.c"
        __label__ = 34; break; //@line 515 "iobase.c"
      case 34: // $bb34
        __label__ = 58; break; //@line 515 "iobase.c"
      case 35: // $bb35
        var $161=HEAP[$buffer]; //@line 519 "iobase.c"
        var $162=(($161+4)&4294967295); //@line 519 "iobase.c"
        var $163=HEAP[$162]; //@line 519 "iobase.c"
        var $164=($163)!=(_PyByteArray_Type); //@line 519 "iobase.c"
        if ($164) { __label__ = 36; break; } else { __label__ = 38; break; } //@line 519 "iobase.c"
      case 36: // $bb36
        var $165=HEAP[$buffer]; //@line 519 "iobase.c"
        var $166=(($165+4)&4294967295); //@line 519 "iobase.c"
        var $167=HEAP[$166]; //@line 519 "iobase.c"
        var $168=_PyType_IsSubtype($167, _PyByteArray_Type); //@line 519 "iobase.c"
        var $169=((($168))|0)==0; //@line 519 "iobase.c"
        if ($169) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 519 "iobase.c"
      case 37: // $bb37
        ___assert_fail(((__str18199)&4294967295), ((__str6187)&4294967295), 519, ((___PRETTY_FUNCTION___8875)&4294967295)); //@line 519 "iobase.c"
        throw "Reached an unreachable! Original .ll line: 18178"; //@line 519 "iobase.c"
      case 38: // $bb38
        var $170=HEAP[$buffer]; //@line 519 "iobase.c"
        var $171=$170; //@line 519 "iobase.c"
        var $172=(($171+8)&4294967295); //@line 519 "iobase.c"
        var $173=HEAP[$172]; //@line 519 "iobase.c"
        HEAP[$old_size]=$173; //@line 519 "iobase.c"
        var $174=HEAP[$b]; //@line 520 "iobase.c"
        var $175=$174; //@line 520 "iobase.c"
        var $176=(($175+8)&4294967295); //@line 520 "iobase.c"
        var $177=HEAP[$176]; //@line 520 "iobase.c"
        var $178=HEAP[$old_size]; //@line 520 "iobase.c"
        var $179=((($177) + ($178))&4294967295); //@line 520 "iobase.c"
        var $180=HEAP[$buffer]; //@line 520 "iobase.c"
        var $181=_PyByteArray_Resize($180, $179); //@line 520 "iobase.c"
        var $182=HEAP[$b]; //@line 521 "iobase.c"
        var $183=$182; //@line 521 "iobase.c"
        var $184=(($183+8)&4294967295); //@line 521 "iobase.c"
        var $185=HEAP[$184]; //@line 521 "iobase.c"
        var $186=HEAP[$b]; //@line 521 "iobase.c"
        var $187=$186; //@line 521 "iobase.c"
        var $188=(($187+20)&4294967295); //@line 521 "iobase.c"
        var $189=(($188)&4294967295); //@line 521 "iobase.c"
        var $190=HEAP[$buffer]; //@line 521 "iobase.c"
        var $191=(($190+4)&4294967295); //@line 521 "iobase.c"
        var $192=HEAP[$191]; //@line 521 "iobase.c"
        var $193=($192)!=(_PyByteArray_Type); //@line 521 "iobase.c"
        if ($193) { __label__ = 39; break; } else { __label__ = 41; break; } //@line 521 "iobase.c"
      case 39: // $bb39
        var $194=HEAP[$buffer]; //@line 521 "iobase.c"
        var $195=(($194+4)&4294967295); //@line 521 "iobase.c"
        var $196=HEAP[$195]; //@line 521 "iobase.c"
        var $197=_PyType_IsSubtype($196, _PyByteArray_Type); //@line 521 "iobase.c"
        var $198=((($197))|0)==0; //@line 521 "iobase.c"
        if ($198) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 521 "iobase.c"
      case 40: // $bb40
        ___assert_fail(((__str18199)&4294967295), ((__str6187)&4294967295), 521, ((___PRETTY_FUNCTION___8875)&4294967295)); //@line 521 "iobase.c"
        throw "Reached an unreachable! Original .ll line: 18218"; //@line 521 "iobase.c"
      case 41: // $bb41
        var $199=HEAP[$buffer]; //@line 521 "iobase.c"
        var $200=$199; //@line 521 "iobase.c"
        var $201=(($200+8)&4294967295); //@line 521 "iobase.c"
        var $202=HEAP[$201]; //@line 521 "iobase.c"
        var $203=((($202))|0)!=0; //@line 521 "iobase.c"
        if ($203) { __label__ = 42; break; } else { __label__ = 43; break; } //@line 521 "iobase.c"
      case 42: // $bb42
        var $204=HEAP[$buffer]; //@line 521 "iobase.c"
        var $205=$204; //@line 521 "iobase.c"
        var $206=(($205+20)&4294967295); //@line 521 "iobase.c"
        var $207=HEAP[$206]; //@line 521 "iobase.c"
        HEAP[$iftmp_51]=$207; //@line 521 "iobase.c"
        __label__ = 44; break; //@line 521 "iobase.c"
      case 43: // $bb43
        HEAP[$iftmp_51]=((__PyByteArray_empty_string)&4294967295); //@line 521 "iobase.c"
        __label__ = 44; break; //@line 521 "iobase.c"
      case 44: // $bb44
        var $208=HEAP[$iftmp_51]; //@line 521 "iobase.c"
        var $209=HEAP[$old_size]; //@line 521 "iobase.c"
        var $210=(($208+$209)&4294967295); //@line 521 "iobase.c"
        _llvm_memcpy_p0i8_p0i8_i32($210, $189, $185, 1, 0); //@line 521 "iobase.c"
        var $211=HEAP[$b]; //@line 524 "iobase.c"
        var $212=(($211)&4294967295); //@line 524 "iobase.c"
        var $213=HEAP[$212]; //@line 524 "iobase.c"
        var $214=((($213) - 1)&4294967295); //@line 524 "iobase.c"
        var $215=HEAP[$b]; //@line 524 "iobase.c"
        var $216=(($215)&4294967295); //@line 524 "iobase.c"
        HEAP[$216]=$214; //@line 524 "iobase.c"
        var $217=HEAP[$b]; //@line 524 "iobase.c"
        var $218=(($217)&4294967295); //@line 524 "iobase.c"
        var $219=HEAP[$218]; //@line 524 "iobase.c"
        var $220=((($219))|0)==0; //@line 524 "iobase.c"
        if ($220) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 524 "iobase.c"
      case 45: // $bb45
        var $221=HEAP[$b]; //@line 524 "iobase.c"
        var $222=(($221+4)&4294967295); //@line 524 "iobase.c"
        var $223=HEAP[$222]; //@line 524 "iobase.c"
        var $224=(($223+24)&4294967295); //@line 524 "iobase.c"
        var $225=HEAP[$224]; //@line 524 "iobase.c"
        var $226=HEAP[$b]; //@line 524 "iobase.c"
        FUNCTION_TABLE[$225]($226); //@line 524 "iobase.c"
        __label__ = 46; break; //@line 524 "iobase.c"
      case 46: // $bb46
        var $227=HEAP[$buffer]; //@line 526 "iobase.c"
        var $228=(($227+4)&4294967295); //@line 526 "iobase.c"
        var $229=HEAP[$228]; //@line 526 "iobase.c"
        var $230=($229)!=(_PyByteArray_Type); //@line 526 "iobase.c"
        if ($230) { __label__ = 47; break; } else { __label__ = 49; break; } //@line 526 "iobase.c"
      case 47: // $bb47
        var $231=HEAP[$buffer]; //@line 526 "iobase.c"
        var $232=(($231+4)&4294967295); //@line 526 "iobase.c"
        var $233=HEAP[$232]; //@line 526 "iobase.c"
        var $234=_PyType_IsSubtype($233, _PyByteArray_Type); //@line 526 "iobase.c"
        var $235=((($234))|0)==0; //@line 526 "iobase.c"
        if ($235) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 526 "iobase.c"
      case 48: // $bb48
        ___assert_fail(((__str18199)&4294967295), ((__str6187)&4294967295), 526, ((___PRETTY_FUNCTION___8875)&4294967295)); //@line 526 "iobase.c"
        throw "Reached an unreachable! Original .ll line: 18285"; //@line 526 "iobase.c"
      case 49: // $bb49
        var $236=HEAP[$buffer]; //@line 526 "iobase.c"
        var $237=$236; //@line 526 "iobase.c"
        var $238=(($237+8)&4294967295); //@line 526 "iobase.c"
        var $239=HEAP[$238]; //@line 526 "iobase.c"
        var $240=((($239))|0)!=0; //@line 526 "iobase.c"
        if ($240) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 526 "iobase.c"
      case 50: // $bb50
        var $241=HEAP[$buffer]; //@line 526 "iobase.c"
        var $242=$241; //@line 526 "iobase.c"
        var $243=(($242+20)&4294967295); //@line 526 "iobase.c"
        var $244=HEAP[$243]; //@line 526 "iobase.c"
        HEAP[$iftmp_54]=$244; //@line 526 "iobase.c"
        __label__ = 52; break; //@line 526 "iobase.c"
      case 51: // $bb51
        HEAP[$iftmp_54]=((__PyByteArray_empty_string)&4294967295); //@line 526 "iobase.c"
        __label__ = 52; break; //@line 526 "iobase.c"
      case 52: // $bb52
        var $245=HEAP[$buffer]; //@line 526 "iobase.c"
        var $246=(($245+4)&4294967295); //@line 526 "iobase.c"
        var $247=HEAP[$246]; //@line 526 "iobase.c"
        var $248=($247)!=(_PyByteArray_Type); //@line 526 "iobase.c"
        if ($248) { __label__ = 53; break; } else { __label__ = 55; break; } //@line 526 "iobase.c"
      case 53: // $bb53
        var $249=HEAP[$buffer]; //@line 526 "iobase.c"
        var $250=(($249+4)&4294967295); //@line 526 "iobase.c"
        var $251=HEAP[$250]; //@line 526 "iobase.c"
        var $252=_PyType_IsSubtype($251, _PyByteArray_Type); //@line 526 "iobase.c"
        var $253=((($252))|0)==0; //@line 526 "iobase.c"
        if ($253) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 526 "iobase.c"
      case 54: // $bb54
        ___assert_fail(((__str18199)&4294967295), ((__str6187)&4294967295), 526, ((___PRETTY_FUNCTION___8875)&4294967295)); //@line 526 "iobase.c"
        throw "Reached an unreachable! Original .ll line: 18324"; //@line 526 "iobase.c"
      case 55: // $bb55
        var $254=HEAP[$buffer]; //@line 526 "iobase.c"
        var $255=$254; //@line 526 "iobase.c"
        var $256=(($255+8)&4294967295); //@line 526 "iobase.c"
        var $257=HEAP[$256]; //@line 526 "iobase.c"
        var $258=((($257) - 1)&4294967295); //@line 526 "iobase.c"
        var $259=HEAP[$iftmp_54]; //@line 526 "iobase.c"
        var $260=(($259+$258)&4294967295); //@line 526 "iobase.c"
        var $261=HEAP[$260]; //@line 526 "iobase.c"
        var $262=reSign(($261), 8, 0)==10; //@line 526 "iobase.c"
        if ($262) { __label__ = 58; break; } else { __label__ = 56; break; } //@line 526 "iobase.c"
      case 56: // $bb56
        var $263=HEAP[$limit]; //@line 465 "iobase.c"
        var $264=((($263))|0) < 0; //@line 465 "iobase.c"
        if ($264) { __label__ = 7; break; } else { __label__ = 57; break; } //@line 465 "iobase.c"
      case 57: // $bb57
        var $265=HEAP[$buffer]; //@line 465 "iobase.c"
        var $266=$265; //@line 465 "iobase.c"
        var $267=(($266+8)&4294967295); //@line 465 "iobase.c"
        var $268=HEAP[$267]; //@line 465 "iobase.c"
        var $269=HEAP[$limit]; //@line 465 "iobase.c"
        var $270=((($268))|0) < ((($269))|0); //@line 465 "iobase.c"
        if ($270) { __label__ = 7; break; } else { __label__ = 58; break; } //@line 465 "iobase.c"
      case 58: // $bb58
        var $271=HEAP[$buffer]; //@line 530 "iobase.c"
        var $272=(($271+4)&4294967295); //@line 530 "iobase.c"
        var $273=HEAP[$272]; //@line 530 "iobase.c"
        var $274=($273)!=(_PyByteArray_Type); //@line 530 "iobase.c"
        if ($274) { __label__ = 59; break; } else { __label__ = 61; break; } //@line 530 "iobase.c"
      case 59: // $bb59
        var $275=HEAP[$buffer]; //@line 530 "iobase.c"
        var $276=(($275+4)&4294967295); //@line 530 "iobase.c"
        var $277=HEAP[$276]; //@line 530 "iobase.c"
        var $278=_PyType_IsSubtype($277, _PyByteArray_Type); //@line 530 "iobase.c"
        var $279=((($278))|0)==0; //@line 530 "iobase.c"
        if ($279) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 530 "iobase.c"
      case 60: // $bb60
        ___assert_fail(((__str18199)&4294967295), ((__str6187)&4294967295), 531, ((___PRETTY_FUNCTION___8875)&4294967295)); //@line 530 "iobase.c"
        throw "Reached an unreachable! Original .ll line: 18369"; //@line 530 "iobase.c"
      case 61: // $bb61
        var $280=HEAP[$buffer]; //@line 530 "iobase.c"
        var $281=$280; //@line 530 "iobase.c"
        var $282=(($281+8)&4294967295); //@line 530 "iobase.c"
        var $283=HEAP[$282]; //@line 530 "iobase.c"
        var $284=HEAP[$buffer]; //@line 530 "iobase.c"
        var $285=(($284+4)&4294967295); //@line 530 "iobase.c"
        var $286=HEAP[$285]; //@line 530 "iobase.c"
        var $287=($286)!=(_PyByteArray_Type); //@line 530 "iobase.c"
        if ($287) { __label__ = 62; break; } else { __label__ = 64; break; } //@line 530 "iobase.c"
      case 62: // $bb62
        var $288=HEAP[$buffer]; //@line 530 "iobase.c"
        var $289=(($288+4)&4294967295); //@line 530 "iobase.c"
        var $290=HEAP[$289]; //@line 530 "iobase.c"
        var $291=_PyType_IsSubtype($290, _PyByteArray_Type); //@line 530 "iobase.c"
        var $292=((($291))|0)==0; //@line 530 "iobase.c"
        if ($292) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 530 "iobase.c"
      case 63: // $bb63
        ___assert_fail(((__str18199)&4294967295), ((__str6187)&4294967295), 530, ((___PRETTY_FUNCTION___8875)&4294967295)); //@line 530 "iobase.c"
        throw "Reached an unreachable! Original .ll line: 18392"; //@line 530 "iobase.c"
      case 64: // $bb64
        var $293=HEAP[$buffer]; //@line 530 "iobase.c"
        var $294=$293; //@line 530 "iobase.c"
        var $295=(($294+8)&4294967295); //@line 530 "iobase.c"
        var $296=HEAP[$295]; //@line 530 "iobase.c"
        var $297=((($296))|0)!=0; //@line 530 "iobase.c"
        if ($297) { __label__ = 65; break; } else { __label__ = 66; break; } //@line 530 "iobase.c"
      case 65: // $bb65
        var $298=HEAP[$buffer]; //@line 530 "iobase.c"
        var $299=$298; //@line 530 "iobase.c"
        var $300=(($299+20)&4294967295); //@line 530 "iobase.c"
        var $301=HEAP[$300]; //@line 530 "iobase.c"
        HEAP[$iftmp_62]=$301; //@line 530 "iobase.c"
        __label__ = 67; break; //@line 530 "iobase.c"
      case 66: // $bb66
        HEAP[$iftmp_62]=((__PyByteArray_empty_string)&4294967295); //@line 530 "iobase.c"
        __label__ = 67; break; //@line 530 "iobase.c"
      case 67: // $bb67
        var $302=HEAP[$iftmp_62]; //@line 530 "iobase.c"
        var $303=_PyString_FromStringAndSize($302, $283); //@line 530 "iobase.c"
        HEAP[$result]=$303; //@line 530 "iobase.c"
        var $304=HEAP[$buffer]; //@line 532 "iobase.c"
        var $305=(($304)&4294967295); //@line 532 "iobase.c"
        var $306=HEAP[$305]; //@line 532 "iobase.c"
        var $307=((($306) - 1)&4294967295); //@line 532 "iobase.c"
        var $308=HEAP[$buffer]; //@line 532 "iobase.c"
        var $309=(($308)&4294967295); //@line 532 "iobase.c"
        HEAP[$309]=$307; //@line 532 "iobase.c"
        var $310=HEAP[$buffer]; //@line 532 "iobase.c"
        var $311=(($310)&4294967295); //@line 532 "iobase.c"
        var $312=HEAP[$311]; //@line 532 "iobase.c"
        var $313=((($312))|0)==0; //@line 532 "iobase.c"
        if ($313) { __label__ = 68; break; } else { __label__ = 69; break; } //@line 532 "iobase.c"
      case 68: // $bb68
        var $314=HEAP[$buffer]; //@line 532 "iobase.c"
        var $315=(($314+4)&4294967295); //@line 532 "iobase.c"
        var $316=HEAP[$315]; //@line 532 "iobase.c"
        var $317=(($316+24)&4294967295); //@line 532 "iobase.c"
        var $318=HEAP[$317]; //@line 532 "iobase.c"
        var $319=HEAP[$buffer]; //@line 532 "iobase.c"
        FUNCTION_TABLE[$318]($319); //@line 532 "iobase.c"
        __label__ = 69; break; //@line 532 "iobase.c"
      case 69: // $bb69
        var $320=HEAP[$result]; //@line 533 "iobase.c"
        HEAP[$0]=$320; //@line 533 "iobase.c"
        __label__ = 73; break; //@line 533 "iobase.c"
      case 70: // $fail
        var $321=HEAP[$buffer]; //@line 535 "iobase.c"
        var $322=(($321)&4294967295); //@line 535 "iobase.c"
        var $323=HEAP[$322]; //@line 535 "iobase.c"
        var $324=((($323) - 1)&4294967295); //@line 535 "iobase.c"
        var $325=HEAP[$buffer]; //@line 535 "iobase.c"
        var $326=(($325)&4294967295); //@line 535 "iobase.c"
        HEAP[$326]=$324; //@line 535 "iobase.c"
        var $327=HEAP[$buffer]; //@line 535 "iobase.c"
        var $328=(($327)&4294967295); //@line 535 "iobase.c"
        var $329=HEAP[$328]; //@line 535 "iobase.c"
        var $330=((($329))|0)==0; //@line 535 "iobase.c"
        if ($330) { __label__ = 71; break; } else { __label__ = 72; break; } //@line 535 "iobase.c"
      case 71: // $bb70
        var $331=HEAP[$buffer]; //@line 535 "iobase.c"
        var $332=(($331+4)&4294967295); //@line 535 "iobase.c"
        var $333=HEAP[$332]; //@line 535 "iobase.c"
        var $334=(($333+24)&4294967295); //@line 535 "iobase.c"
        var $335=HEAP[$334]; //@line 535 "iobase.c"
        var $336=HEAP[$buffer]; //@line 535 "iobase.c"
        FUNCTION_TABLE[$335]($336); //@line 535 "iobase.c"
        __label__ = 72; break; //@line 535 "iobase.c"
      case 72: // $bb71
        HEAP[$0]=0; //@line 536 "iobase.c"
        __label__ = 73; break; //@line 536 "iobase.c"
      case 73: // $bb72
        var $337=HEAP[$0]; //@line 455 "iobase.c"
        HEAP[$retval]=$337; //@line 455 "iobase.c"
        __label__ = 74; break; //@line 455 "iobase.c"
      case 74: // $return
        var $retval73=HEAP[$retval]; //@line 455 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval73; //@line 455 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_iter($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 542 "iobase.c"
        var $2=__PyIOBase_check_closed($1, __Py_TrueStruct); //@line 542 "iobase.c"
        var $3=($2)==0; //@line 542 "iobase.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 542 "iobase.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 543 "iobase.c"
        __label__ = 3; break; //@line 543 "iobase.c"
      case 2: // $bb1
        var $4=HEAP[$self_addr]; //@line 545 "iobase.c"
        var $5=(($4)&4294967295); //@line 545 "iobase.c"
        var $6=HEAP[$5]; //@line 545 "iobase.c"
        var $7=((($6) + 1)&4294967295); //@line 545 "iobase.c"
        var $8=HEAP[$self_addr]; //@line 545 "iobase.c"
        var $9=(($8)&4294967295); //@line 545 "iobase.c"
        HEAP[$9]=$7; //@line 545 "iobase.c"
        var $10=HEAP[$self_addr]; //@line 546 "iobase.c"
        HEAP[$0]=$10; //@line 546 "iobase.c"
        __label__ = 3; break; //@line 546 "iobase.c"
      case 3: // $bb2
        var $11=HEAP[$0]; //@line 543 "iobase.c"
        HEAP[$retval]=$11; //@line 543 "iobase.c"
        __label__ = 4; break; //@line 543 "iobase.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 543 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 543 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_iternext($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $line=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[__PyIO_str_readline]; //@line 552 "iobase.c"
        var $2=HEAP[$self_addr]; //@line 552 "iobase.c"
        var $3=_PyObject_CallMethodObjArgs($2, $1, 0); //@line 552 "iobase.c"
        HEAP[$line]=$3; //@line 552 "iobase.c"
        var $4=HEAP[$line]; //@line 554 "iobase.c"
        var $5=($4)==0; //@line 554 "iobase.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 554 "iobase.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 555 "iobase.c"
        __label__ = 7; break; //@line 555 "iobase.c"
      case 2: // $bb1
        var $6=HEAP[$line]; //@line 557 "iobase.c"
        var $7=_PyObject_Size($6); //@line 557 "iobase.c"
        var $8=((($7))|0)==0; //@line 557 "iobase.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 557 "iobase.c"
      case 3: // $bb2
        var $9=HEAP[$line]; //@line 558 "iobase.c"
        var $10=(($9)&4294967295); //@line 558 "iobase.c"
        var $11=HEAP[$10]; //@line 558 "iobase.c"
        var $12=((($11) - 1)&4294967295); //@line 558 "iobase.c"
        var $13=HEAP[$line]; //@line 558 "iobase.c"
        var $14=(($13)&4294967295); //@line 558 "iobase.c"
        HEAP[$14]=$12; //@line 558 "iobase.c"
        var $15=HEAP[$line]; //@line 558 "iobase.c"
        var $16=(($15)&4294967295); //@line 558 "iobase.c"
        var $17=HEAP[$16]; //@line 558 "iobase.c"
        var $18=((($17))|0)==0; //@line 558 "iobase.c"
        if ($18) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 558 "iobase.c"
      case 4: // $bb3
        var $19=HEAP[$line]; //@line 558 "iobase.c"
        var $20=(($19+4)&4294967295); //@line 558 "iobase.c"
        var $21=HEAP[$20]; //@line 558 "iobase.c"
        var $22=(($21+24)&4294967295); //@line 558 "iobase.c"
        var $23=HEAP[$22]; //@line 558 "iobase.c"
        var $24=HEAP[$line]; //@line 558 "iobase.c"
        FUNCTION_TABLE[$23]($24); //@line 558 "iobase.c"
        __label__ = 5; break; //@line 558 "iobase.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 559 "iobase.c"
        __label__ = 7; break; //@line 559 "iobase.c"
      case 6: // $bb5
        var $25=HEAP[$line]; //@line 562 "iobase.c"
        HEAP[$0]=$25; //@line 562 "iobase.c"
        __label__ = 7; break; //@line 562 "iobase.c"
      case 7: // $bb6
        var $26=HEAP[$0]; //@line 555 "iobase.c"
        HEAP[$retval]=$26; //@line 555 "iobase.c"
        __label__ = 8; break; //@line 555 "iobase.c"
      case 8: // $return
        var $retval7=HEAP[$retval]; //@line 555 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 555 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_readlines($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $hint=__stackBase__+16;
        var $length=__stackBase__+20;
        var $result=__stackBase__+24;
        var $ret=__stackBase__+28;
        var $line=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$hint]=-1; //@line 575 "iobase.c"
        HEAP[$length]=0; //@line 575 "iobase.c"
        var $1=HEAP[$args_addr]; //@line 578 "iobase.c"
        var $2=__PyArg_ParseTuple_SizeT($1, ((__str19200)&4294967295), (FUNCTION_TABLE_OFFSET + 2), $hint); //@line 578 "iobase.c"
        var $3=((($2))|0)==0; //@line 578 "iobase.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 578 "iobase.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 579 "iobase.c"
        __label__ = 28; break; //@line 579 "iobase.c"
      case 2: // $bb1
        var $4=_PyList_New(0); //@line 582 "iobase.c"
        HEAP[$result]=$4; //@line 582 "iobase.c"
        var $5=HEAP[$result]; //@line 583 "iobase.c"
        var $6=($5)==0; //@line 583 "iobase.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 583 "iobase.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 584 "iobase.c"
        __label__ = 28; break; //@line 584 "iobase.c"
      case 4: // $bb3
        var $7=HEAP[$hint]; //@line 586 "iobase.c"
        var $8=((($7))|0) <= 0; //@line 586 "iobase.c"
        if ($8) { __label__ = 5; break; } else { __label__ = 12; break; } //@line 586 "iobase.c"
      case 5: // $bb4
        var $9=HEAP[$result]; //@line 590 "iobase.c"
        var $10=HEAP[$self_addr]; //@line 590 "iobase.c"
        var $11=__PyObject_CallMethod_SizeT($9, ((__str20201)&4294967295), ((__str21202)&4294967295), $10); //@line 590 "iobase.c"
        HEAP[$ret]=$11; //@line 590 "iobase.c"
        var $12=HEAP[$ret]; //@line 591 "iobase.c"
        var $13=($12)==0; //@line 591 "iobase.c"
        if ($13) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 591 "iobase.c"
      case 6: // $bb5
        var $14=HEAP[$result]; //@line 592 "iobase.c"
        var $15=(($14)&4294967295); //@line 592 "iobase.c"
        var $16=HEAP[$15]; //@line 592 "iobase.c"
        var $17=((($16) - 1)&4294967295); //@line 592 "iobase.c"
        var $18=HEAP[$result]; //@line 592 "iobase.c"
        var $19=(($18)&4294967295); //@line 592 "iobase.c"
        HEAP[$19]=$17; //@line 592 "iobase.c"
        var $20=HEAP[$result]; //@line 592 "iobase.c"
        var $21=(($20)&4294967295); //@line 592 "iobase.c"
        var $22=HEAP[$21]; //@line 592 "iobase.c"
        var $23=((($22))|0)==0; //@line 592 "iobase.c"
        if ($23) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 592 "iobase.c"
      case 7: // $bb6
        var $24=HEAP[$result]; //@line 592 "iobase.c"
        var $25=(($24+4)&4294967295); //@line 592 "iobase.c"
        var $26=HEAP[$25]; //@line 592 "iobase.c"
        var $27=(($26+24)&4294967295); //@line 592 "iobase.c"
        var $28=HEAP[$27]; //@line 592 "iobase.c"
        var $29=HEAP[$result]; //@line 592 "iobase.c"
        FUNCTION_TABLE[$28]($29); //@line 592 "iobase.c"
        __label__ = 8; break; //@line 592 "iobase.c"
      case 8: // $bb7
        HEAP[$0]=0; //@line 593 "iobase.c"
        __label__ = 28; break; //@line 593 "iobase.c"
      case 9: // $bb8
        var $30=HEAP[$ret]; //@line 595 "iobase.c"
        var $31=(($30)&4294967295); //@line 595 "iobase.c"
        var $32=HEAP[$31]; //@line 595 "iobase.c"
        var $33=((($32) - 1)&4294967295); //@line 595 "iobase.c"
        var $34=HEAP[$ret]; //@line 595 "iobase.c"
        var $35=(($34)&4294967295); //@line 595 "iobase.c"
        HEAP[$35]=$33; //@line 595 "iobase.c"
        var $36=HEAP[$ret]; //@line 595 "iobase.c"
        var $37=(($36)&4294967295); //@line 595 "iobase.c"
        var $38=HEAP[$37]; //@line 595 "iobase.c"
        var $39=((($38))|0)==0; //@line 595 "iobase.c"
        if ($39) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 595 "iobase.c"
      case 10: // $bb9
        var $40=HEAP[$ret]; //@line 595 "iobase.c"
        var $41=(($40+4)&4294967295); //@line 595 "iobase.c"
        var $42=HEAP[$41]; //@line 595 "iobase.c"
        var $43=(($42+24)&4294967295); //@line 595 "iobase.c"
        var $44=HEAP[$43]; //@line 595 "iobase.c"
        var $45=HEAP[$ret]; //@line 595 "iobase.c"
        FUNCTION_TABLE[$44]($45); //@line 595 "iobase.c"
        __label__ = 11; break; //@line 595 "iobase.c"
      case 11: // $bb10
        var $46=HEAP[$result]; //@line 596 "iobase.c"
        HEAP[$0]=$46; //@line 596 "iobase.c"
        __label__ = 28; break; //@line 596 "iobase.c"
      case 12: // $bb11
        var $47=HEAP[$self_addr]; //@line 600 "iobase.c"
        var $48=_PyIter_Next($47); //@line 600 "iobase.c"
        HEAP[$line]=$48; //@line 600 "iobase.c"
        var $49=HEAP[$line]; //@line 601 "iobase.c"
        var $50=($49)==0; //@line 601 "iobase.c"
        if ($50) { __label__ = 13; break; } else { __label__ = 17; break; } //@line 601 "iobase.c"
      case 13: // $bb12
        var $51=_PyErr_Occurred(); //@line 602 "iobase.c"
        var $52=($51)!=0; //@line 602 "iobase.c"
        if ($52) { __label__ = 14; break; } else { __label__ = 27; break; } //@line 602 "iobase.c"
      case 14: // $bb13
        var $53=HEAP[$result]; //@line 603 "iobase.c"
        var $54=(($53)&4294967295); //@line 603 "iobase.c"
        var $55=HEAP[$54]; //@line 603 "iobase.c"
        var $56=((($55) - 1)&4294967295); //@line 603 "iobase.c"
        var $57=HEAP[$result]; //@line 603 "iobase.c"
        var $58=(($57)&4294967295); //@line 603 "iobase.c"
        HEAP[$58]=$56; //@line 603 "iobase.c"
        var $59=HEAP[$result]; //@line 603 "iobase.c"
        var $60=(($59)&4294967295); //@line 603 "iobase.c"
        var $61=HEAP[$60]; //@line 603 "iobase.c"
        var $62=((($61))|0)==0; //@line 603 "iobase.c"
        if ($62) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 603 "iobase.c"
      case 15: // $bb14
        var $63=HEAP[$result]; //@line 603 "iobase.c"
        var $64=(($63+4)&4294967295); //@line 603 "iobase.c"
        var $65=HEAP[$64]; //@line 603 "iobase.c"
        var $66=(($65+24)&4294967295); //@line 603 "iobase.c"
        var $67=HEAP[$66]; //@line 603 "iobase.c"
        var $68=HEAP[$result]; //@line 603 "iobase.c"
        FUNCTION_TABLE[$67]($68); //@line 603 "iobase.c"
        __label__ = 16; break; //@line 603 "iobase.c"
      case 16: // $bb15
        HEAP[$0]=0; //@line 604 "iobase.c"
        __label__ = 28; break; //@line 604 "iobase.c"
      case 17: // $bb16
        var $69=HEAP[$result]; //@line 610 "iobase.c"
        var $70=HEAP[$line]; //@line 610 "iobase.c"
        var $71=_PyList_Append($69, $70); //@line 610 "iobase.c"
        var $72=((($71))|0) < 0; //@line 610 "iobase.c"
        if ($72) { __label__ = 18; break; } else { __label__ = 23; break; } //@line 610 "iobase.c"
      case 18: // $bb17
        var $73=HEAP[$line]; //@line 611 "iobase.c"
        var $74=(($73)&4294967295); //@line 611 "iobase.c"
        var $75=HEAP[$74]; //@line 611 "iobase.c"
        var $76=((($75) - 1)&4294967295); //@line 611 "iobase.c"
        var $77=HEAP[$line]; //@line 611 "iobase.c"
        var $78=(($77)&4294967295); //@line 611 "iobase.c"
        HEAP[$78]=$76; //@line 611 "iobase.c"
        var $79=HEAP[$line]; //@line 611 "iobase.c"
        var $80=(($79)&4294967295); //@line 611 "iobase.c"
        var $81=HEAP[$80]; //@line 611 "iobase.c"
        var $82=((($81))|0)==0; //@line 611 "iobase.c"
        if ($82) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 611 "iobase.c"
      case 19: // $bb18
        var $83=HEAP[$line]; //@line 611 "iobase.c"
        var $84=(($83+4)&4294967295); //@line 611 "iobase.c"
        var $85=HEAP[$84]; //@line 611 "iobase.c"
        var $86=(($85+24)&4294967295); //@line 611 "iobase.c"
        var $87=HEAP[$86]; //@line 611 "iobase.c"
        var $88=HEAP[$line]; //@line 611 "iobase.c"
        FUNCTION_TABLE[$87]($88); //@line 611 "iobase.c"
        __label__ = 20; break; //@line 611 "iobase.c"
      case 20: // $bb19
        var $89=HEAP[$result]; //@line 612 "iobase.c"
        var $90=(($89)&4294967295); //@line 612 "iobase.c"
        var $91=HEAP[$90]; //@line 612 "iobase.c"
        var $92=((($91) - 1)&4294967295); //@line 612 "iobase.c"
        var $93=HEAP[$result]; //@line 612 "iobase.c"
        var $94=(($93)&4294967295); //@line 612 "iobase.c"
        HEAP[$94]=$92; //@line 612 "iobase.c"
        var $95=HEAP[$result]; //@line 612 "iobase.c"
        var $96=(($95)&4294967295); //@line 612 "iobase.c"
        var $97=HEAP[$96]; //@line 612 "iobase.c"
        var $98=((($97))|0)==0; //@line 612 "iobase.c"
        if ($98) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 612 "iobase.c"
      case 21: // $bb20
        var $99=HEAP[$result]; //@line 612 "iobase.c"
        var $100=(($99+4)&4294967295); //@line 612 "iobase.c"
        var $101=HEAP[$100]; //@line 612 "iobase.c"
        var $102=(($101+24)&4294967295); //@line 612 "iobase.c"
        var $103=HEAP[$102]; //@line 612 "iobase.c"
        var $104=HEAP[$result]; //@line 612 "iobase.c"
        FUNCTION_TABLE[$103]($104); //@line 612 "iobase.c"
        __label__ = 22; break; //@line 612 "iobase.c"
      case 22: // $bb21
        HEAP[$0]=0; //@line 613 "iobase.c"
        __label__ = 28; break; //@line 613 "iobase.c"
      case 23: // $bb22
        var $105=HEAP[$line]; //@line 615 "iobase.c"
        var $106=_PyObject_Size($105); //@line 615 "iobase.c"
        var $107=HEAP[$length]; //@line 615 "iobase.c"
        var $108=((($106) + ($107))&4294967295); //@line 615 "iobase.c"
        HEAP[$length]=$108; //@line 615 "iobase.c"
        var $109=HEAP[$line]; //@line 616 "iobase.c"
        var $110=(($109)&4294967295); //@line 616 "iobase.c"
        var $111=HEAP[$110]; //@line 616 "iobase.c"
        var $112=((($111) - 1)&4294967295); //@line 616 "iobase.c"
        var $113=HEAP[$line]; //@line 616 "iobase.c"
        var $114=(($113)&4294967295); //@line 616 "iobase.c"
        HEAP[$114]=$112; //@line 616 "iobase.c"
        var $115=HEAP[$line]; //@line 616 "iobase.c"
        var $116=(($115)&4294967295); //@line 616 "iobase.c"
        var $117=HEAP[$116]; //@line 616 "iobase.c"
        var $118=((($117))|0)==0; //@line 616 "iobase.c"
        if ($118) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 616 "iobase.c"
      case 24: // $bb23
        var $119=HEAP[$line]; //@line 616 "iobase.c"
        var $120=(($119+4)&4294967295); //@line 616 "iobase.c"
        var $121=HEAP[$120]; //@line 616 "iobase.c"
        var $122=(($121+24)&4294967295); //@line 616 "iobase.c"
        var $123=HEAP[$122]; //@line 616 "iobase.c"
        var $124=HEAP[$line]; //@line 616 "iobase.c"
        FUNCTION_TABLE[$123]($124); //@line 616 "iobase.c"
        __label__ = 25; break; //@line 616 "iobase.c"
      case 25: // $bb24
        var $125=HEAP[$hint]; //@line 618 "iobase.c"
        var $126=HEAP[$length]; //@line 618 "iobase.c"
        var $127=((($126))|0) > ((($125))|0); //@line 618 "iobase.c"
        if ($127) { __label__ = 27; break; } else { __label__ = 26; break; } //@line 618 "iobase.c"
      case 26: // $bb25
        __label__ = 12; break; //@line 618 "iobase.c"
      case 27: // $bb26
        var $128=HEAP[$result]; //@line 621 "iobase.c"
        HEAP[$0]=$128; //@line 621 "iobase.c"
        __label__ = 28; break; //@line 621 "iobase.c"
      case 28: // $bb27
        var $129=HEAP[$0]; //@line 579 "iobase.c"
        HEAP[$retval]=$129; //@line 579 "iobase.c"
        __label__ = 29; break; //@line 579 "iobase.c"
      case 29: // $return
        var $retval28=HEAP[$retval]; //@line 579 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval28; //@line 579 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_writelines($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $lines=__stackBase__+16;
        var $iter=__stackBase__+20;
        var $res=__stackBase__+24;
        var $line=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$args_addr]; //@line 629 "iobase.c"
        var $2=__PyArg_ParseTuple_SizeT($1, ((__str22203)&4294967295), $lines); //@line 629 "iobase.c"
        var $3=((($2))|0)==0; //@line 629 "iobase.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 629 "iobase.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 630 "iobase.c"
        __label__ = 23; break; //@line 630 "iobase.c"
      case 2: // $bb1
        var $4=HEAP[$self_addr]; //@line 633 "iobase.c"
        var $5=__PyIOBase_check_closed($4, __Py_TrueStruct); //@line 633 "iobase.c"
        var $6=($5)==0; //@line 633 "iobase.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 633 "iobase.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 634 "iobase.c"
        __label__ = 23; break; //@line 634 "iobase.c"
      case 4: // $bb3
        var $7=HEAP[$lines]; //@line 636 "iobase.c"
        var $8=_PyObject_GetIter($7); //@line 636 "iobase.c"
        HEAP[$iter]=$8; //@line 636 "iobase.c"
        var $9=HEAP[$iter]; //@line 637 "iobase.c"
        var $10=($9)==0; //@line 637 "iobase.c"
        if ($10) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 637 "iobase.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 638 "iobase.c"
        __label__ = 23; break; //@line 638 "iobase.c"
      case 6: // $bb5
        var $11=HEAP[$iter]; //@line 641 "iobase.c"
        var $12=_PyIter_Next($11); //@line 641 "iobase.c"
        HEAP[$line]=$12; //@line 641 "iobase.c"
        var $13=HEAP[$line]; //@line 642 "iobase.c"
        var $14=($13)==0; //@line 642 "iobase.c"
        if ($14) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 642 "iobase.c"
      case 7: // $bb6
        var $15=_PyErr_Occurred(); //@line 643 "iobase.c"
        var $16=($15)!=0; //@line 643 "iobase.c"
        if ($16) { __label__ = 8; break; } else { __label__ = 20; break; } //@line 643 "iobase.c"
      case 8: // $bb7
        var $17=HEAP[$iter]; //@line 644 "iobase.c"
        var $18=(($17)&4294967295); //@line 644 "iobase.c"
        var $19=HEAP[$18]; //@line 644 "iobase.c"
        var $20=((($19) - 1)&4294967295); //@line 644 "iobase.c"
        var $21=HEAP[$iter]; //@line 644 "iobase.c"
        var $22=(($21)&4294967295); //@line 644 "iobase.c"
        HEAP[$22]=$20; //@line 644 "iobase.c"
        var $23=HEAP[$iter]; //@line 644 "iobase.c"
        var $24=(($23)&4294967295); //@line 644 "iobase.c"
        var $25=HEAP[$24]; //@line 644 "iobase.c"
        var $26=((($25))|0)==0; //@line 644 "iobase.c"
        if ($26) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 644 "iobase.c"
      case 9: // $bb8
        var $27=HEAP[$iter]; //@line 644 "iobase.c"
        var $28=(($27+4)&4294967295); //@line 644 "iobase.c"
        var $29=HEAP[$28]; //@line 644 "iobase.c"
        var $30=(($29+24)&4294967295); //@line 644 "iobase.c"
        var $31=HEAP[$30]; //@line 644 "iobase.c"
        var $32=HEAP[$iter]; //@line 644 "iobase.c"
        FUNCTION_TABLE[$31]($32); //@line 644 "iobase.c"
        __label__ = 10; break; //@line 644 "iobase.c"
      case 10: // $bb9
        HEAP[$0]=0; //@line 645 "iobase.c"
        __label__ = 23; break; //@line 645 "iobase.c"
      case 11: // $bb10
        var $33=HEAP[__PyIO_str_write]; //@line 651 "iobase.c"
        var $34=HEAP[$self_addr]; //@line 651 "iobase.c"
        var $35=HEAP[$line]; //@line 651 "iobase.c"
        var $36=_PyObject_CallMethodObjArgs($34, $33, $35, 0); //@line 651 "iobase.c"
        HEAP[$res]=$36; //@line 651 "iobase.c"
        var $37=HEAP[$line]; //@line 652 "iobase.c"
        var $38=(($37)&4294967295); //@line 652 "iobase.c"
        var $39=HEAP[$38]; //@line 652 "iobase.c"
        var $40=((($39) - 1)&4294967295); //@line 652 "iobase.c"
        var $41=HEAP[$line]; //@line 652 "iobase.c"
        var $42=(($41)&4294967295); //@line 652 "iobase.c"
        HEAP[$42]=$40; //@line 652 "iobase.c"
        var $43=HEAP[$line]; //@line 652 "iobase.c"
        var $44=(($43)&4294967295); //@line 652 "iobase.c"
        var $45=HEAP[$44]; //@line 652 "iobase.c"
        var $46=((($45))|0)==0; //@line 652 "iobase.c"
        if ($46) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 652 "iobase.c"
      case 12: // $bb11
        var $47=HEAP[$line]; //@line 652 "iobase.c"
        var $48=(($47+4)&4294967295); //@line 652 "iobase.c"
        var $49=HEAP[$48]; //@line 652 "iobase.c"
        var $50=(($49+24)&4294967295); //@line 652 "iobase.c"
        var $51=HEAP[$50]; //@line 652 "iobase.c"
        var $52=HEAP[$line]; //@line 652 "iobase.c"
        FUNCTION_TABLE[$51]($52); //@line 652 "iobase.c"
        __label__ = 13; break; //@line 652 "iobase.c"
      case 13: // $bb12
        var $53=HEAP[$res]; //@line 653 "iobase.c"
        var $54=($53)==0; //@line 653 "iobase.c"
        if ($54) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 653 "iobase.c"
      case 14: // $bb13
        var $55=HEAP[$iter]; //@line 654 "iobase.c"
        var $56=(($55)&4294967295); //@line 654 "iobase.c"
        var $57=HEAP[$56]; //@line 654 "iobase.c"
        var $58=((($57) - 1)&4294967295); //@line 654 "iobase.c"
        var $59=HEAP[$iter]; //@line 654 "iobase.c"
        var $60=(($59)&4294967295); //@line 654 "iobase.c"
        HEAP[$60]=$58; //@line 654 "iobase.c"
        var $61=HEAP[$iter]; //@line 654 "iobase.c"
        var $62=(($61)&4294967295); //@line 654 "iobase.c"
        var $63=HEAP[$62]; //@line 654 "iobase.c"
        var $64=((($63))|0)==0; //@line 654 "iobase.c"
        if ($64) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 654 "iobase.c"
      case 15: // $bb14
        var $65=HEAP[$iter]; //@line 654 "iobase.c"
        var $66=(($65+4)&4294967295); //@line 654 "iobase.c"
        var $67=HEAP[$66]; //@line 654 "iobase.c"
        var $68=(($67+24)&4294967295); //@line 654 "iobase.c"
        var $69=HEAP[$68]; //@line 654 "iobase.c"
        var $70=HEAP[$iter]; //@line 654 "iobase.c"
        FUNCTION_TABLE[$69]($70); //@line 654 "iobase.c"
        __label__ = 16; break; //@line 654 "iobase.c"
      case 16: // $bb15
        HEAP[$0]=0; //@line 655 "iobase.c"
        __label__ = 23; break; //@line 655 "iobase.c"
      case 17: // $bb16
        var $71=HEAP[$res]; //@line 657 "iobase.c"
        var $72=(($71)&4294967295); //@line 657 "iobase.c"
        var $73=HEAP[$72]; //@line 657 "iobase.c"
        var $74=((($73) - 1)&4294967295); //@line 657 "iobase.c"
        var $75=HEAP[$res]; //@line 657 "iobase.c"
        var $76=(($75)&4294967295); //@line 657 "iobase.c"
        HEAP[$76]=$74; //@line 657 "iobase.c"
        var $77=HEAP[$res]; //@line 657 "iobase.c"
        var $78=(($77)&4294967295); //@line 657 "iobase.c"
        var $79=HEAP[$78]; //@line 657 "iobase.c"
        var $80=((($79))|0)==0; //@line 657 "iobase.c"
        if ($80) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 657 "iobase.c"
      case 18: // $bb17
        var $81=HEAP[$res]; //@line 657 "iobase.c"
        var $82=(($81+4)&4294967295); //@line 657 "iobase.c"
        var $83=HEAP[$82]; //@line 657 "iobase.c"
        var $84=(($83+24)&4294967295); //@line 657 "iobase.c"
        var $85=HEAP[$84]; //@line 657 "iobase.c"
        var $86=HEAP[$res]; //@line 657 "iobase.c"
        FUNCTION_TABLE[$85]($86); //@line 657 "iobase.c"
        __label__ = 19; break; //@line 657 "iobase.c"
      case 19: // $bb18
        __label__ = 6; break; //@line 657 "iobase.c"
      case 20: // $bb19
        var $87=HEAP[$iter]; //@line 659 "iobase.c"
        var $88=(($87)&4294967295); //@line 659 "iobase.c"
        var $89=HEAP[$88]; //@line 659 "iobase.c"
        var $90=((($89) - 1)&4294967295); //@line 659 "iobase.c"
        var $91=HEAP[$iter]; //@line 659 "iobase.c"
        var $92=(($91)&4294967295); //@line 659 "iobase.c"
        HEAP[$92]=$90; //@line 659 "iobase.c"
        var $93=HEAP[$iter]; //@line 659 "iobase.c"
        var $94=(($93)&4294967295); //@line 659 "iobase.c"
        var $95=HEAP[$94]; //@line 659 "iobase.c"
        var $96=((($95))|0)==0; //@line 659 "iobase.c"
        if ($96) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 659 "iobase.c"
      case 21: // $bb20
        var $97=HEAP[$iter]; //@line 659 "iobase.c"
        var $98=(($97+4)&4294967295); //@line 659 "iobase.c"
        var $99=HEAP[$98]; //@line 659 "iobase.c"
        var $100=(($99+24)&4294967295); //@line 659 "iobase.c"
        var $101=HEAP[$100]; //@line 659 "iobase.c"
        var $102=HEAP[$iter]; //@line 659 "iobase.c"
        FUNCTION_TABLE[$101]($102); //@line 659 "iobase.c"
        __label__ = 22; break; //@line 659 "iobase.c"
      case 22: // $bb21
        var $103=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 660 "iobase.c"
        var $104=((($103) + 1)&4294967295); //@line 660 "iobase.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$104; //@line 660 "iobase.c"
        HEAP[$0]=__Py_NoneStruct; //@line 660 "iobase.c"
        __label__ = 23; break; //@line 660 "iobase.c"
      case 23: // $bb22
        var $105=HEAP[$0]; //@line 630 "iobase.c"
        HEAP[$retval]=$105; //@line 630 "iobase.c"
        __label__ = 24; break; //@line 630 "iobase.c"
      case 24: // $return
        var $retval23=HEAP[$retval]; //@line 630 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval23; //@line 630 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _rawiobase_read($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $n=__stackBase__+16;
        var $b=__stackBase__+20;
        var $res=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$n]=-1; //@line 762 "iobase.c"
        var $1=HEAP[$args_addr]; //@line 765 "iobase.c"
        var $2=__PyArg_ParseTuple_SizeT($1, ((__str41223)&4294967295), $n); //@line 765 "iobase.c"
        var $3=((($2))|0)==0; //@line 765 "iobase.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 765 "iobase.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 766 "iobase.c"
        __label__ = 21; break; //@line 766 "iobase.c"
      case 2: // $bb1
        var $4=HEAP[$n]; //@line 769 "iobase.c"
        var $5=((($4))|0) < 0; //@line 769 "iobase.c"
        if ($5) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 769 "iobase.c"
      case 3: // $bb2
        var $6=HEAP[$self_addr]; //@line 770 "iobase.c"
        var $7=__PyObject_CallMethod_SizeT($6, ((__str42224)&4294967295), 0); //@line 770 "iobase.c"
        HEAP[$0]=$7; //@line 770 "iobase.c"
        __label__ = 21; break; //@line 770 "iobase.c"
      case 4: // $bb3
        var $8=HEAP[$n]; //@line 774 "iobase.c"
        var $9=_PyByteArray_FromStringAndSize(0, $8); //@line 774 "iobase.c"
        HEAP[$b]=$9; //@line 774 "iobase.c"
        var $10=HEAP[$b]; //@line 775 "iobase.c"
        var $11=($10)==0; //@line 775 "iobase.c"
        if ($11) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 775 "iobase.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 776 "iobase.c"
        __label__ = 21; break; //@line 776 "iobase.c"
      case 6: // $bb5
        var $12=HEAP[__PyIO_str_readinto]; //@line 778 "iobase.c"
        var $13=HEAP[$self_addr]; //@line 778 "iobase.c"
        var $14=HEAP[$b]; //@line 778 "iobase.c"
        var $15=_PyObject_CallMethodObjArgs($13, $12, $14, 0); //@line 778 "iobase.c"
        HEAP[$res]=$15; //@line 778 "iobase.c"
        var $16=HEAP[$res]; //@line 779 "iobase.c"
        var $17=($16)==0; //@line 779 "iobase.c"
        if ($17) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 779 "iobase.c"
      case 7: // $bb6
        var $18=HEAP[$res]; //@line 779 "iobase.c"
        var $19=($18)==(__Py_NoneStruct); //@line 779 "iobase.c"
        if ($19) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 779 "iobase.c"
      case 8: // $bb7
        var $20=HEAP[$b]; //@line 780 "iobase.c"
        var $21=(($20)&4294967295); //@line 780 "iobase.c"
        var $22=HEAP[$21]; //@line 780 "iobase.c"
        var $23=((($22) - 1)&4294967295); //@line 780 "iobase.c"
        var $24=HEAP[$b]; //@line 780 "iobase.c"
        var $25=(($24)&4294967295); //@line 780 "iobase.c"
        HEAP[$25]=$23; //@line 780 "iobase.c"
        var $26=HEAP[$b]; //@line 780 "iobase.c"
        var $27=(($26)&4294967295); //@line 780 "iobase.c"
        var $28=HEAP[$27]; //@line 780 "iobase.c"
        var $29=((($28))|0)==0; //@line 780 "iobase.c"
        if ($29) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 780 "iobase.c"
      case 9: // $bb8
        var $30=HEAP[$b]; //@line 780 "iobase.c"
        var $31=(($30+4)&4294967295); //@line 780 "iobase.c"
        var $32=HEAP[$31]; //@line 780 "iobase.c"
        var $33=(($32+24)&4294967295); //@line 780 "iobase.c"
        var $34=HEAP[$33]; //@line 780 "iobase.c"
        var $35=HEAP[$b]; //@line 780 "iobase.c"
        FUNCTION_TABLE[$34]($35); //@line 780 "iobase.c"
        __label__ = 10; break; //@line 780 "iobase.c"
      case 10: // $bb9
        var $36=HEAP[$res]; //@line 781 "iobase.c"
        HEAP[$0]=$36; //@line 781 "iobase.c"
        __label__ = 21; break; //@line 781 "iobase.c"
      case 11: // $bb10
        var $37=HEAP[_PyExc_ValueError]; //@line 784 "iobase.c"
        var $38=HEAP[$res]; //@line 784 "iobase.c"
        var $39=_PyNumber_AsSsize_t($38, $37); //@line 784 "iobase.c"
        HEAP[$n]=$39; //@line 784 "iobase.c"
        var $40=HEAP[$res]; //@line 785 "iobase.c"
        var $41=(($40)&4294967295); //@line 785 "iobase.c"
        var $42=HEAP[$41]; //@line 785 "iobase.c"
        var $43=((($42) - 1)&4294967295); //@line 785 "iobase.c"
        var $44=HEAP[$res]; //@line 785 "iobase.c"
        var $45=(($44)&4294967295); //@line 785 "iobase.c"
        HEAP[$45]=$43; //@line 785 "iobase.c"
        var $46=HEAP[$res]; //@line 785 "iobase.c"
        var $47=(($46)&4294967295); //@line 785 "iobase.c"
        var $48=HEAP[$47]; //@line 785 "iobase.c"
        var $49=((($48))|0)==0; //@line 785 "iobase.c"
        if ($49) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 785 "iobase.c"
      case 12: // $bb11
        var $50=HEAP[$res]; //@line 785 "iobase.c"
        var $51=(($50+4)&4294967295); //@line 785 "iobase.c"
        var $52=HEAP[$51]; //@line 785 "iobase.c"
        var $53=(($52+24)&4294967295); //@line 785 "iobase.c"
        var $54=HEAP[$53]; //@line 785 "iobase.c"
        var $55=HEAP[$res]; //@line 785 "iobase.c"
        FUNCTION_TABLE[$54]($55); //@line 785 "iobase.c"
        __label__ = 13; break; //@line 785 "iobase.c"
      case 13: // $bb12
        var $56=HEAP[$n]; //@line 786 "iobase.c"
        var $57=((($56))|0)==-1; //@line 786 "iobase.c"
        if ($57) { __label__ = 14; break; } else { __label__ = 18; break; } //@line 786 "iobase.c"
      case 14: // $bb13
        var $58=_PyErr_Occurred(); //@line 786 "iobase.c"
        var $59=($58)!=0; //@line 786 "iobase.c"
        if ($59) { __label__ = 15; break; } else { __label__ = 18; break; } //@line 786 "iobase.c"
      case 15: // $bb14
        var $60=HEAP[$b]; //@line 787 "iobase.c"
        var $61=(($60)&4294967295); //@line 787 "iobase.c"
        var $62=HEAP[$61]; //@line 787 "iobase.c"
        var $63=((($62) - 1)&4294967295); //@line 787 "iobase.c"
        var $64=HEAP[$b]; //@line 787 "iobase.c"
        var $65=(($64)&4294967295); //@line 787 "iobase.c"
        HEAP[$65]=$63; //@line 787 "iobase.c"
        var $66=HEAP[$b]; //@line 787 "iobase.c"
        var $67=(($66)&4294967295); //@line 787 "iobase.c"
        var $68=HEAP[$67]; //@line 787 "iobase.c"
        var $69=((($68))|0)==0; //@line 787 "iobase.c"
        if ($69) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 787 "iobase.c"
      case 16: // $bb15
        var $70=HEAP[$b]; //@line 787 "iobase.c"
        var $71=(($70+4)&4294967295); //@line 787 "iobase.c"
        var $72=HEAP[$71]; //@line 787 "iobase.c"
        var $73=(($72+24)&4294967295); //@line 787 "iobase.c"
        var $74=HEAP[$73]; //@line 787 "iobase.c"
        var $75=HEAP[$b]; //@line 787 "iobase.c"
        FUNCTION_TABLE[$74]($75); //@line 787 "iobase.c"
        __label__ = 17; break; //@line 787 "iobase.c"
      case 17: // $bb16
        HEAP[$0]=0; //@line 788 "iobase.c"
        __label__ = 21; break; //@line 788 "iobase.c"
      case 18: // $bb17
        var $76=HEAP[$n]; //@line 791 "iobase.c"
        var $77=HEAP[$b]; //@line 791 "iobase.c"
        var $78=_PyByteArray_AsString($77); //@line 791 "iobase.c"
        var $79=_PyString_FromStringAndSize($78, $76); //@line 791 "iobase.c"
        HEAP[$res]=$79; //@line 791 "iobase.c"
        var $80=HEAP[$b]; //@line 792 "iobase.c"
        var $81=(($80)&4294967295); //@line 792 "iobase.c"
        var $82=HEAP[$81]; //@line 792 "iobase.c"
        var $83=((($82) - 1)&4294967295); //@line 792 "iobase.c"
        var $84=HEAP[$b]; //@line 792 "iobase.c"
        var $85=(($84)&4294967295); //@line 792 "iobase.c"
        HEAP[$85]=$83; //@line 792 "iobase.c"
        var $86=HEAP[$b]; //@line 792 "iobase.c"
        var $87=(($86)&4294967295); //@line 792 "iobase.c"
        var $88=HEAP[$87]; //@line 792 "iobase.c"
        var $89=((($88))|0)==0; //@line 792 "iobase.c"
        if ($89) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 792 "iobase.c"
      case 19: // $bb18
        var $90=HEAP[$b]; //@line 792 "iobase.c"
        var $91=(($90+4)&4294967295); //@line 792 "iobase.c"
        var $92=HEAP[$91]; //@line 792 "iobase.c"
        var $93=(($92+24)&4294967295); //@line 792 "iobase.c"
        var $94=HEAP[$93]; //@line 792 "iobase.c"
        var $95=HEAP[$b]; //@line 792 "iobase.c"
        FUNCTION_TABLE[$94]($95); //@line 792 "iobase.c"
        __label__ = 20; break; //@line 792 "iobase.c"
      case 20: // $bb19
        var $96=HEAP[$res]; //@line 793 "iobase.c"
        HEAP[$0]=$96; //@line 793 "iobase.c"
        __label__ = 21; break; //@line 793 "iobase.c"
      case 21: // $bb20
        var $97=HEAP[$0]; //@line 766 "iobase.c"
        HEAP[$retval]=$97; //@line 766 "iobase.c"
        __label__ = 22; break; //@line 766 "iobase.c"
      case 22: // $return
        var $retval21=HEAP[$retval]; //@line 766 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval21; //@line 766 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _rawiobase_readall($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $r=__stackBase__+16;
        var $chunks=__stackBase__+20;
        var $result=__stackBase__+24;
        var $data=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=_PyList_New(0); //@line 804 "iobase.c"
        HEAP[$chunks]=$1; //@line 804 "iobase.c"
        var $2=HEAP[$chunks]; //@line 807 "iobase.c"
        var $3=($2)==0; //@line 807 "iobase.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 807 "iobase.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 808 "iobase.c"
        __label__ = 34; break; //@line 808 "iobase.c"
      case 2: // $bb1
        var $4=HEAP[$self_addr]; //@line 812 "iobase.c"
        var $5=__PyObject_CallMethod_SizeT($4, ((__str15196)&4294967295), ((__str13194)&4294967295), 8192); //@line 812 "iobase.c"
        HEAP[$data]=$5; //@line 812 "iobase.c"
        var $6=HEAP[$data]; //@line 813 "iobase.c"
        var $7=($6)==0; //@line 813 "iobase.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 813 "iobase.c"
      case 3: // $bb2
        var $8=HEAP[$chunks]; //@line 814 "iobase.c"
        var $9=(($8)&4294967295); //@line 814 "iobase.c"
        var $10=HEAP[$9]; //@line 814 "iobase.c"
        var $11=((($10) - 1)&4294967295); //@line 814 "iobase.c"
        var $12=HEAP[$chunks]; //@line 814 "iobase.c"
        var $13=(($12)&4294967295); //@line 814 "iobase.c"
        HEAP[$13]=$11; //@line 814 "iobase.c"
        var $14=HEAP[$chunks]; //@line 814 "iobase.c"
        var $15=(($14)&4294967295); //@line 814 "iobase.c"
        var $16=HEAP[$15]; //@line 814 "iobase.c"
        var $17=((($16))|0)==0; //@line 814 "iobase.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 814 "iobase.c"
      case 4: // $bb3
        var $18=HEAP[$chunks]; //@line 814 "iobase.c"
        var $19=(($18+4)&4294967295); //@line 814 "iobase.c"
        var $20=HEAP[$19]; //@line 814 "iobase.c"
        var $21=(($20+24)&4294967295); //@line 814 "iobase.c"
        var $22=HEAP[$21]; //@line 814 "iobase.c"
        var $23=HEAP[$chunks]; //@line 814 "iobase.c"
        FUNCTION_TABLE[$22]($23); //@line 814 "iobase.c"
        __label__ = 5; break; //@line 814 "iobase.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 815 "iobase.c"
        __label__ = 34; break; //@line 815 "iobase.c"
      case 6: // $bb5
        var $24=HEAP[$data]; //@line 817 "iobase.c"
        var $25=($24)==(__Py_NoneStruct); //@line 817 "iobase.c"
        if ($25) { __label__ = 7; break; } else { __label__ = 14; break; } //@line 817 "iobase.c"
      case 7: // $bb6
        var $26=HEAP[$chunks]; //@line 818 "iobase.c"
        var $27=$26; //@line 818 "iobase.c"
        var $28=(($27+8)&4294967295); //@line 818 "iobase.c"
        var $29=HEAP[$28]; //@line 818 "iobase.c"
        var $30=((($29))|0)==0; //@line 818 "iobase.c"
        if ($30) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 818 "iobase.c"
      case 8: // $bb7
        var $31=HEAP[$chunks]; //@line 819 "iobase.c"
        var $32=(($31)&4294967295); //@line 819 "iobase.c"
        var $33=HEAP[$32]; //@line 819 "iobase.c"
        var $34=((($33) - 1)&4294967295); //@line 819 "iobase.c"
        var $35=HEAP[$chunks]; //@line 819 "iobase.c"
        var $36=(($35)&4294967295); //@line 819 "iobase.c"
        HEAP[$36]=$34; //@line 819 "iobase.c"
        var $37=HEAP[$chunks]; //@line 819 "iobase.c"
        var $38=(($37)&4294967295); //@line 819 "iobase.c"
        var $39=HEAP[$38]; //@line 819 "iobase.c"
        var $40=((($39))|0)==0; //@line 819 "iobase.c"
        if ($40) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 819 "iobase.c"
      case 9: // $bb8
        var $41=HEAP[$chunks]; //@line 819 "iobase.c"
        var $42=(($41+4)&4294967295); //@line 819 "iobase.c"
        var $43=HEAP[$42]; //@line 819 "iobase.c"
        var $44=(($43+24)&4294967295); //@line 819 "iobase.c"
        var $45=HEAP[$44]; //@line 819 "iobase.c"
        var $46=HEAP[$chunks]; //@line 819 "iobase.c"
        FUNCTION_TABLE[$45]($46); //@line 819 "iobase.c"
        __label__ = 10; break; //@line 819 "iobase.c"
      case 10: // $bb9
        var $47=HEAP[$data]; //@line 820 "iobase.c"
        HEAP[$0]=$47; //@line 820 "iobase.c"
        __label__ = 34; break; //@line 820 "iobase.c"
      case 11: // $bb10
        var $48=HEAP[$data]; //@line 822 "iobase.c"
        var $49=(($48)&4294967295); //@line 822 "iobase.c"
        var $50=HEAP[$49]; //@line 822 "iobase.c"
        var $51=((($50) - 1)&4294967295); //@line 822 "iobase.c"
        var $52=HEAP[$data]; //@line 822 "iobase.c"
        var $53=(($52)&4294967295); //@line 822 "iobase.c"
        HEAP[$53]=$51; //@line 822 "iobase.c"
        var $54=HEAP[$data]; //@line 822 "iobase.c"
        var $55=(($54)&4294967295); //@line 822 "iobase.c"
        var $56=HEAP[$55]; //@line 822 "iobase.c"
        var $57=((($56))|0)==0; //@line 822 "iobase.c"
        if ($57) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 822 "iobase.c"
      case 12: // $bb11
        var $58=HEAP[$data]; //@line 822 "iobase.c"
        var $59=(($58+4)&4294967295); //@line 822 "iobase.c"
        var $60=HEAP[$59]; //@line 822 "iobase.c"
        var $61=(($60+24)&4294967295); //@line 822 "iobase.c"
        var $62=HEAP[$61]; //@line 822 "iobase.c"
        var $63=HEAP[$data]; //@line 822 "iobase.c"
        FUNCTION_TABLE[$62]($63); //@line 822 "iobase.c"
        __label__ = 13; break; //@line 822 "iobase.c"
      case 13: // $bb12
        __label__ = 31; break; //@line 822 "iobase.c"
      case 14: // $bb13
        var $64=HEAP[$data]; //@line 825 "iobase.c"
        var $65=(($64+4)&4294967295); //@line 825 "iobase.c"
        var $66=HEAP[$65]; //@line 825 "iobase.c"
        var $67=(($66+84)&4294967295); //@line 825 "iobase.c"
        var $68=HEAP[$67]; //@line 825 "iobase.c"
        var $69=($68) & 134217728; //@line 825 "iobase.c"
        var $70=((($69))|0)==0; //@line 825 "iobase.c"
        if ($70) { __label__ = 15; break; } else { __label__ = 20; break; } //@line 825 "iobase.c"
      case 15: // $bb14
        var $71=HEAP[$chunks]; //@line 826 "iobase.c"
        var $72=(($71)&4294967295); //@line 826 "iobase.c"
        var $73=HEAP[$72]; //@line 826 "iobase.c"
        var $74=((($73) - 1)&4294967295); //@line 826 "iobase.c"
        var $75=HEAP[$chunks]; //@line 826 "iobase.c"
        var $76=(($75)&4294967295); //@line 826 "iobase.c"
        HEAP[$76]=$74; //@line 826 "iobase.c"
        var $77=HEAP[$chunks]; //@line 826 "iobase.c"
        var $78=(($77)&4294967295); //@line 826 "iobase.c"
        var $79=HEAP[$78]; //@line 826 "iobase.c"
        var $80=((($79))|0)==0; //@line 826 "iobase.c"
        if ($80) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 826 "iobase.c"
      case 16: // $bb15
        var $81=HEAP[$chunks]; //@line 826 "iobase.c"
        var $82=(($81+4)&4294967295); //@line 826 "iobase.c"
        var $83=HEAP[$82]; //@line 826 "iobase.c"
        var $84=(($83+24)&4294967295); //@line 826 "iobase.c"
        var $85=HEAP[$84]; //@line 826 "iobase.c"
        var $86=HEAP[$chunks]; //@line 826 "iobase.c"
        FUNCTION_TABLE[$85]($86); //@line 826 "iobase.c"
        __label__ = 17; break; //@line 826 "iobase.c"
      case 17: // $bb16
        var $87=HEAP[$data]; //@line 827 "iobase.c"
        var $88=(($87)&4294967295); //@line 827 "iobase.c"
        var $89=HEAP[$88]; //@line 827 "iobase.c"
        var $90=((($89) - 1)&4294967295); //@line 827 "iobase.c"
        var $91=HEAP[$data]; //@line 827 "iobase.c"
        var $92=(($91)&4294967295); //@line 827 "iobase.c"
        HEAP[$92]=$90; //@line 827 "iobase.c"
        var $93=HEAP[$data]; //@line 827 "iobase.c"
        var $94=(($93)&4294967295); //@line 827 "iobase.c"
        var $95=HEAP[$94]; //@line 827 "iobase.c"
        var $96=((($95))|0)==0; //@line 827 "iobase.c"
        if ($96) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 827 "iobase.c"
      case 18: // $bb17
        var $97=HEAP[$data]; //@line 827 "iobase.c"
        var $98=(($97+4)&4294967295); //@line 827 "iobase.c"
        var $99=HEAP[$98]; //@line 827 "iobase.c"
        var $100=(($99+24)&4294967295); //@line 827 "iobase.c"
        var $101=HEAP[$100]; //@line 827 "iobase.c"
        var $102=HEAP[$data]; //@line 827 "iobase.c"
        FUNCTION_TABLE[$101]($102); //@line 827 "iobase.c"
        __label__ = 19; break; //@line 827 "iobase.c"
      case 19: // $bb18
        var $103=HEAP[_PyExc_TypeError]; //@line 828 "iobase.c"
        _PyErr_SetString($103, ((__str43225)&4294967295)); //@line 828 "iobase.c"
        HEAP[$0]=0; //@line 829 "iobase.c"
        __label__ = 34; break; //@line 829 "iobase.c"
      case 20: // $bb19
        var $104=HEAP[$data]; //@line 831 "iobase.c"
        var $105=$104; //@line 831 "iobase.c"
        var $106=(($105+8)&4294967295); //@line 831 "iobase.c"
        var $107=HEAP[$106]; //@line 831 "iobase.c"
        var $108=((($107))|0)==0; //@line 831 "iobase.c"
        if ($108) { __label__ = 21; break; } else { __label__ = 24; break; } //@line 831 "iobase.c"
      case 21: // $bb20
        var $109=HEAP[$data]; //@line 833 "iobase.c"
        var $110=(($109)&4294967295); //@line 833 "iobase.c"
        var $111=HEAP[$110]; //@line 833 "iobase.c"
        var $112=((($111) - 1)&4294967295); //@line 833 "iobase.c"
        var $113=HEAP[$data]; //@line 833 "iobase.c"
        var $114=(($113)&4294967295); //@line 833 "iobase.c"
        HEAP[$114]=$112; //@line 833 "iobase.c"
        var $115=HEAP[$data]; //@line 833 "iobase.c"
        var $116=(($115)&4294967295); //@line 833 "iobase.c"
        var $117=HEAP[$116]; //@line 833 "iobase.c"
        var $118=((($117))|0)==0; //@line 833 "iobase.c"
        if ($118) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 833 "iobase.c"
      case 22: // $bb21
        var $119=HEAP[$data]; //@line 833 "iobase.c"
        var $120=(($119+4)&4294967295); //@line 833 "iobase.c"
        var $121=HEAP[$120]; //@line 833 "iobase.c"
        var $122=(($121+24)&4294967295); //@line 833 "iobase.c"
        var $123=HEAP[$122]; //@line 833 "iobase.c"
        var $124=HEAP[$data]; //@line 833 "iobase.c"
        FUNCTION_TABLE[$123]($124); //@line 833 "iobase.c"
        __label__ = 23; break; //@line 833 "iobase.c"
      case 23: // $bb22
        __label__ = 31; break; //@line 833 "iobase.c"
      case 24: // $bb23
        var $125=HEAP[$chunks]; //@line 836 "iobase.c"
        var $126=HEAP[$data]; //@line 836 "iobase.c"
        var $127=_PyList_Append($125, $126); //@line 836 "iobase.c"
        HEAP[$r]=$127; //@line 836 "iobase.c"
        var $128=HEAP[$data]; //@line 837 "iobase.c"
        var $129=(($128)&4294967295); //@line 837 "iobase.c"
        var $130=HEAP[$129]; //@line 837 "iobase.c"
        var $131=((($130) - 1)&4294967295); //@line 837 "iobase.c"
        var $132=HEAP[$data]; //@line 837 "iobase.c"
        var $133=(($132)&4294967295); //@line 837 "iobase.c"
        HEAP[$133]=$131; //@line 837 "iobase.c"
        var $134=HEAP[$data]; //@line 837 "iobase.c"
        var $135=(($134)&4294967295); //@line 837 "iobase.c"
        var $136=HEAP[$135]; //@line 837 "iobase.c"
        var $137=((($136))|0)==0; //@line 837 "iobase.c"
        if ($137) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 837 "iobase.c"
      case 25: // $bb24
        var $138=HEAP[$data]; //@line 837 "iobase.c"
        var $139=(($138+4)&4294967295); //@line 837 "iobase.c"
        var $140=HEAP[$139]; //@line 837 "iobase.c"
        var $141=(($140+24)&4294967295); //@line 837 "iobase.c"
        var $142=HEAP[$141]; //@line 837 "iobase.c"
        var $143=HEAP[$data]; //@line 837 "iobase.c"
        FUNCTION_TABLE[$142]($143); //@line 837 "iobase.c"
        __label__ = 26; break; //@line 837 "iobase.c"
      case 26: // $bb25
        var $144=HEAP[$r]; //@line 838 "iobase.c"
        var $145=((($144))|0) < 0; //@line 838 "iobase.c"
        if ($145) { __label__ = 27; break; } else { __label__ = 30; break; } //@line 838 "iobase.c"
      case 27: // $bb26
        var $146=HEAP[$chunks]; //@line 839 "iobase.c"
        var $147=(($146)&4294967295); //@line 839 "iobase.c"
        var $148=HEAP[$147]; //@line 839 "iobase.c"
        var $149=((($148) - 1)&4294967295); //@line 839 "iobase.c"
        var $150=HEAP[$chunks]; //@line 839 "iobase.c"
        var $151=(($150)&4294967295); //@line 839 "iobase.c"
        HEAP[$151]=$149; //@line 839 "iobase.c"
        var $152=HEAP[$chunks]; //@line 839 "iobase.c"
        var $153=(($152)&4294967295); //@line 839 "iobase.c"
        var $154=HEAP[$153]; //@line 839 "iobase.c"
        var $155=((($154))|0)==0; //@line 839 "iobase.c"
        if ($155) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 839 "iobase.c"
      case 28: // $bb27
        var $156=HEAP[$chunks]; //@line 839 "iobase.c"
        var $157=(($156+4)&4294967295); //@line 839 "iobase.c"
        var $158=HEAP[$157]; //@line 839 "iobase.c"
        var $159=(($158+24)&4294967295); //@line 839 "iobase.c"
        var $160=HEAP[$159]; //@line 839 "iobase.c"
        var $161=HEAP[$chunks]; //@line 839 "iobase.c"
        FUNCTION_TABLE[$160]($161); //@line 839 "iobase.c"
        __label__ = 29; break; //@line 839 "iobase.c"
      case 29: // $bb28
        HEAP[$0]=0; //@line 840 "iobase.c"
        __label__ = 34; break; //@line 840 "iobase.c"
      case 30: // $bb29
        __label__ = 2; break; //@line 840 "iobase.c"
      case 31: // $bb30
        var $162=HEAP[__PyIO_empty_bytes]; //@line 843 "iobase.c"
        var $163=HEAP[$chunks]; //@line 843 "iobase.c"
        var $164=__PyString_Join($162, $163); //@line 843 "iobase.c"
        HEAP[$result]=$164; //@line 843 "iobase.c"
        var $165=HEAP[$chunks]; //@line 844 "iobase.c"
        var $166=(($165)&4294967295); //@line 844 "iobase.c"
        var $167=HEAP[$166]; //@line 844 "iobase.c"
        var $168=((($167) - 1)&4294967295); //@line 844 "iobase.c"
        var $169=HEAP[$chunks]; //@line 844 "iobase.c"
        var $170=(($169)&4294967295); //@line 844 "iobase.c"
        HEAP[$170]=$168; //@line 844 "iobase.c"
        var $171=HEAP[$chunks]; //@line 844 "iobase.c"
        var $172=(($171)&4294967295); //@line 844 "iobase.c"
        var $173=HEAP[$172]; //@line 844 "iobase.c"
        var $174=((($173))|0)==0; //@line 844 "iobase.c"
        if ($174) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 844 "iobase.c"
      case 32: // $bb31
        var $175=HEAP[$chunks]; //@line 844 "iobase.c"
        var $176=(($175+4)&4294967295); //@line 844 "iobase.c"
        var $177=HEAP[$176]; //@line 844 "iobase.c"
        var $178=(($177+24)&4294967295); //@line 844 "iobase.c"
        var $179=HEAP[$178]; //@line 844 "iobase.c"
        var $180=HEAP[$chunks]; //@line 844 "iobase.c"
        FUNCTION_TABLE[$179]($180); //@line 844 "iobase.c"
        __label__ = 33; break; //@line 844 "iobase.c"
      case 33: // $bb32
        var $181=HEAP[$result]; //@line 845 "iobase.c"
        HEAP[$0]=$181; //@line 845 "iobase.c"
        __label__ = 34; break; //@line 845 "iobase.c"
      case 34: // $bb33
        var $182=HEAP[$0]; //@line 808 "iobase.c"
        HEAP[$retval]=$182; //@line 808 "iobase.c"
        __label__ = 35; break; //@line 808 "iobase.c"
      case 35: // $return
        var $retval34=HEAP[$retval]; //@line 808 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval34; //@line 808 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _blockingioerror_init($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kwds_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $myerrno=__stackBase__+20;
        var $strerror=__stackBase__+24;
        var $baseargs=__stackBase__+28;
        var $written=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$kwds_addr]=$kwds;
        HEAP[$myerrno]=0; //@line 100 "_iomodule.c"
        HEAP[$strerror]=0; //@line 100 "_iomodule.c"
        HEAP[$baseargs]=0; //@line 101 "_iomodule.c"
        HEAP[$written]=0; //@line 102 "_iomodule.c"
        var $1=HEAP[$args_addr]; //@line 104 "_iomodule.c"
        var $2=(($1+4)&4294967295); //@line 104 "_iomodule.c"
        var $3=HEAP[$2]; //@line 104 "_iomodule.c"
        var $4=(($3+84)&4294967295); //@line 104 "_iomodule.c"
        var $5=HEAP[$4]; //@line 104 "_iomodule.c"
        var $6=($5) & 67108864; //@line 104 "_iomodule.c"
        var $7=((($6))|0)==0; //@line 104 "_iomodule.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 104 "_iomodule.c"
      case 1: // $bb
        ___assert_fail(((__str232)&4294967295), ((__str1233)&4294967295), 104, ((___PRETTY_FUNCTION___8454)&4294967295)); //@line 104 "_iomodule.c"
        throw "Reached an unreachable! Original .ll line: 19682"; //@line 104 "_iomodule.c"
      case 2: // $bb1
        var $8=HEAP[$self_addr]; //@line 106 "_iomodule.c"
        var $9=(($8+32)&4294967295); //@line 106 "_iomodule.c"
        HEAP[$9]=0; //@line 106 "_iomodule.c"
        var $10=HEAP[$args_addr]; //@line 107 "_iomodule.c"
        var $11=__PyArg_ParseTuple_SizeT($10, ((__str2234)&4294967295), $myerrno, $strerror, $written); //@line 107 "_iomodule.c"
        var $12=((($11))|0)==0; //@line 107 "_iomodule.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 107 "_iomodule.c"
      case 3: // $bb2
        HEAP[$0]=-1; //@line 109 "_iomodule.c"
        __label__ = 13; break; //@line 109 "_iomodule.c"
      case 4: // $bb3
        var $13=HEAP[$strerror]; //@line 111 "_iomodule.c"
        var $14=HEAP[$myerrno]; //@line 111 "_iomodule.c"
        var $15=_PyTuple_Pack(2, $14, $13); //@line 111 "_iomodule.c"
        HEAP[$baseargs]=$15; //@line 111 "_iomodule.c"
        var $16=HEAP[$baseargs]; //@line 112 "_iomodule.c"
        var $17=($16)==0; //@line 112 "_iomodule.c"
        if ($17) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 112 "_iomodule.c"
      case 5: // $bb4
        HEAP[$0]=-1; //@line 113 "_iomodule.c"
        __label__ = 13; break; //@line 113 "_iomodule.c"
      case 6: // $bb5
        var $18=HEAP[_PyExc_IOError]; //@line 115 "_iomodule.c"
        var $19=$18; //@line 115 "_iomodule.c"
        var $20=(($19+148)&4294967295); //@line 115 "_iomodule.c"
        var $21=HEAP[$20]; //@line 115 "_iomodule.c"
        var $22=HEAP[$self_addr]; //@line 115 "_iomodule.c"
        var $23=$22; //@line 115 "_iomodule.c"
        var $24=HEAP[$baseargs]; //@line 115 "_iomodule.c"
        var $25=HEAP[$kwds_addr]; //@line 115 "_iomodule.c"
        var $26=FUNCTION_TABLE[$21]($23, $24, $25); //@line 115 "_iomodule.c"
        var $27=((($26))|0)==-1; //@line 115 "_iomodule.c"
        if ($27) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 115 "_iomodule.c"
      case 7: // $bb6
        var $28=HEAP[$baseargs]; //@line 117 "_iomodule.c"
        var $29=(($28)&4294967295); //@line 117 "_iomodule.c"
        var $30=HEAP[$29]; //@line 117 "_iomodule.c"
        var $31=((($30) - 1)&4294967295); //@line 117 "_iomodule.c"
        var $32=HEAP[$baseargs]; //@line 117 "_iomodule.c"
        var $33=(($32)&4294967295); //@line 117 "_iomodule.c"
        HEAP[$33]=$31; //@line 117 "_iomodule.c"
        var $34=HEAP[$baseargs]; //@line 117 "_iomodule.c"
        var $35=(($34)&4294967295); //@line 117 "_iomodule.c"
        var $36=HEAP[$35]; //@line 117 "_iomodule.c"
        var $37=((($36))|0)==0; //@line 117 "_iomodule.c"
        if ($37) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 117 "_iomodule.c"
      case 8: // $bb7
        var $38=HEAP[$baseargs]; //@line 117 "_iomodule.c"
        var $39=(($38+4)&4294967295); //@line 117 "_iomodule.c"
        var $40=HEAP[$39]; //@line 117 "_iomodule.c"
        var $41=(($40+24)&4294967295); //@line 117 "_iomodule.c"
        var $42=HEAP[$41]; //@line 117 "_iomodule.c"
        var $43=HEAP[$baseargs]; //@line 117 "_iomodule.c"
        FUNCTION_TABLE[$42]($43); //@line 117 "_iomodule.c"
        __label__ = 9; break; //@line 117 "_iomodule.c"
      case 9: // $bb8
        HEAP[$0]=-1; //@line 118 "_iomodule.c"
        __label__ = 13; break; //@line 118 "_iomodule.c"
      case 10: // $bb9
        var $44=HEAP[$baseargs]; //@line 120 "_iomodule.c"
        var $45=(($44)&4294967295); //@line 120 "_iomodule.c"
        var $46=HEAP[$45]; //@line 120 "_iomodule.c"
        var $47=((($46) - 1)&4294967295); //@line 120 "_iomodule.c"
        var $48=HEAP[$baseargs]; //@line 120 "_iomodule.c"
        var $49=(($48)&4294967295); //@line 120 "_iomodule.c"
        HEAP[$49]=$47; //@line 120 "_iomodule.c"
        var $50=HEAP[$baseargs]; //@line 120 "_iomodule.c"
        var $51=(($50)&4294967295); //@line 120 "_iomodule.c"
        var $52=HEAP[$51]; //@line 120 "_iomodule.c"
        var $53=((($52))|0)==0; //@line 120 "_iomodule.c"
        if ($53) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 120 "_iomodule.c"
      case 11: // $bb10
        var $54=HEAP[$baseargs]; //@line 120 "_iomodule.c"
        var $55=(($54+4)&4294967295); //@line 120 "_iomodule.c"
        var $56=HEAP[$55]; //@line 120 "_iomodule.c"
        var $57=(($56+24)&4294967295); //@line 120 "_iomodule.c"
        var $58=HEAP[$57]; //@line 120 "_iomodule.c"
        var $59=HEAP[$baseargs]; //@line 120 "_iomodule.c"
        FUNCTION_TABLE[$58]($59); //@line 120 "_iomodule.c"
        __label__ = 12; break; //@line 120 "_iomodule.c"
      case 12: // $bb11
        var $60=HEAP[$written]; //@line 122 "_iomodule.c"
        var $61=HEAP[$self_addr]; //@line 122 "_iomodule.c"
        var $62=(($61+32)&4294967295); //@line 122 "_iomodule.c"
        HEAP[$62]=$60; //@line 122 "_iomodule.c"
        HEAP[$0]=0; //@line 123 "_iomodule.c"
        __label__ = 13; break; //@line 123 "_iomodule.c"
      case 13: // $bb12
        var $63=HEAP[$0]; //@line 109 "_iomodule.c"
        HEAP[$retval]=$63; //@line 109 "_iomodule.c"
        __label__ = 14; break; //@line 109 "_iomodule.c"
      case 14: // $return
        var $retval13=HEAP[$retval]; //@line 109 "_iomodule.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 109 "_iomodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _io_open($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 270; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 270);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kwds_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $kwlist=__stackBase__+20;
        var $file=__stackBase__+52;
        var $mode=__stackBase__+56;
        var $buffering=__stackBase__+60;
        var $closefd=__stackBase__+64;
        var $encoding=__stackBase__+68;
        var $errors=__stackBase__+72;
        var $newline=__stackBase__+76;
        var $i=__stackBase__+80;
        var $reading=__stackBase__+84;
        var $writing=__stackBase__+88;
        var $appending=__stackBase__+92;
        var $updating=__stackBase__+96;
        var $text=__stackBase__+100;
        var $binary=__stackBase__+104;
        var $universal=__stackBase__+108;
        var $rawmode=__stackBase__+112;
        var $m=__stackBase__+117;
        var $line_buffering=__stackBase__+121;
        var $isatty=__stackBase__+125;
        var $raw=__stackBase__+129;
        var $modeobj=__stackBase__+133;
        var $buffer=__stackBase__+137;
        var $wrapper=__stackBase__+141;
        var $repr=__stackBase__+145;
        var $c=__stackBase__+149;
        var $res=__stackBase__+150;
        var $st=__stackBase__+154;
        var $fileno=__stackBase__+250;
        var $res66=__stackBase__+254;
        var $Buffered_class=__stackBase__+258;
        var $_py_tmp=__stackBase__+262;
        var $_py_tmp100=__stackBase__+266;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$kwds_addr]=$kwds;
        var $1=(($kwlist)&4294967295); //@line 292 "_iomodule.c"
        var $2=HEAP[((_C_6_8548)&4294967295)]; //@line 292 "_iomodule.c"
        HEAP[$1]=$2; //@line 292 "_iomodule.c"
        var $3=(($kwlist+4)&4294967295); //@line 292 "_iomodule.c"
        var $4=HEAP[((_C_6_8548+4)&4294967295)]; //@line 292 "_iomodule.c"
        HEAP[$3]=$4; //@line 292 "_iomodule.c"
        var $5=(($kwlist+8)&4294967295); //@line 292 "_iomodule.c"
        var $6=HEAP[((_C_6_8548+8)&4294967295)]; //@line 292 "_iomodule.c"
        HEAP[$5]=$6; //@line 292 "_iomodule.c"
        var $7=(($kwlist+12)&4294967295); //@line 292 "_iomodule.c"
        var $8=HEAP[((_C_6_8548+12)&4294967295)]; //@line 292 "_iomodule.c"
        HEAP[$7]=$8; //@line 292 "_iomodule.c"
        var $9=(($kwlist+16)&4294967295); //@line 292 "_iomodule.c"
        var $10=HEAP[((_C_6_8548+16)&4294967295)]; //@line 292 "_iomodule.c"
        HEAP[$9]=$10; //@line 292 "_iomodule.c"
        var $11=(($kwlist+20)&4294967295); //@line 292 "_iomodule.c"
        var $12=HEAP[((_C_6_8548+20)&4294967295)]; //@line 292 "_iomodule.c"
        HEAP[$11]=$12; //@line 292 "_iomodule.c"
        var $13=(($kwlist+24)&4294967295); //@line 292 "_iomodule.c"
        var $14=HEAP[((_C_6_8548+24)&4294967295)]; //@line 292 "_iomodule.c"
        HEAP[$13]=$14; //@line 292 "_iomodule.c"
        var $15=(($kwlist+28)&4294967295); //@line 292 "_iomodule.c"
        var $16=HEAP[((_C_6_8548+28)&4294967295)]; //@line 292 "_iomodule.c"
        HEAP[$15]=$16; //@line 292 "_iomodule.c"
        HEAP[$mode]=((__str13246)&4294967295); //@line 294 "_iomodule.c"
        HEAP[$buffering]=-1; //@line 295 "_iomodule.c"
        HEAP[$closefd]=1; //@line 295 "_iomodule.c"
        HEAP[$encoding]=0; //@line 296 "_iomodule.c"
        HEAP[$errors]=0; //@line 296 "_iomodule.c"
        HEAP[$newline]=0; //@line 296 "_iomodule.c"
        HEAP[$reading]=0; //@line 299 "_iomodule.c"
        HEAP[$writing]=0; //@line 299 "_iomodule.c"
        HEAP[$appending]=0; //@line 299 "_iomodule.c"
        HEAP[$updating]=0; //@line 299 "_iomodule.c"
        HEAP[$text]=0; //@line 300 "_iomodule.c"
        HEAP[$binary]=0; //@line 300 "_iomodule.c"
        HEAP[$universal]=0; //@line 300 "_iomodule.c"
        HEAP[$modeobj]=0; //@line 305 "_iomodule.c"
        HEAP[$buffer]=0; //@line 305 "_iomodule.c"
        HEAP[$wrapper]=0; //@line 305 "_iomodule.c"
        var $17=HEAP[$args_addr]; //@line 307 "_iomodule.c"
        var $18=HEAP[$kwds_addr]; //@line 307 "_iomodule.c"
        var $kwlist1=$kwlist; //@line 307 "_iomodule.c"
        var $19=__PyArg_ParseTupleAndKeywords_SizeT($17, $18, ((__str14247)&4294967295), $kwlist1, $file, $mode, $buffering, $encoding, $errors, $newline, $closefd); //@line 307 "_iomodule.c"
        var $20=((($19))|0)==0; //@line 307 "_iomodule.c"
        if ($20) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 307 "_iomodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 311 "_iomodule.c"
        __label__ = 117; break; //@line 311 "_iomodule.c"
      case 2: // $bb2
        var $21=HEAP[$file]; //@line 314 "_iomodule.c"
        var $22=(($21+4)&4294967295); //@line 314 "_iomodule.c"
        var $23=HEAP[$22]; //@line 314 "_iomodule.c"
        var $24=(($23+84)&4294967295); //@line 314 "_iomodule.c"
        var $25=HEAP[$24]; //@line 314 "_iomodule.c"
        var $26=($25) & 268435456; //@line 314 "_iomodule.c"
        var $27=((($26))|0)==0; //@line 314 "_iomodule.c"
        if ($27) { __label__ = 3; break; } else { __label__ = 9; break; } //@line 314 "_iomodule.c"
      case 3: // $bb3
        var $28=HEAP[$file]; //@line 314 "_iomodule.c"
        var $29=(($28+4)&4294967295); //@line 314 "_iomodule.c"
        var $30=HEAP[$29]; //@line 314 "_iomodule.c"
        var $31=(($30+84)&4294967295); //@line 314 "_iomodule.c"
        var $32=HEAP[$31]; //@line 314 "_iomodule.c"
        var $33=($32) & 134217728; //@line 314 "_iomodule.c"
        var $34=((($33))|0)==0; //@line 314 "_iomodule.c"
        if ($34) { __label__ = 4; break; } else { __label__ = 9; break; } //@line 314 "_iomodule.c"
      case 4: // $bb4
        var $35=HEAP[$file]; //@line 314 "_iomodule.c"
        var $36=_PyNumber_Check($35); //@line 314 "_iomodule.c"
        var $37=((($36))|0)==0; //@line 314 "_iomodule.c"
        if ($37) { __label__ = 5; break; } else { __label__ = 9; break; } //@line 314 "_iomodule.c"
      case 5: // $bb5
        var $38=HEAP[$file]; //@line 317 "_iomodule.c"
        var $39=_PyObject_Repr($38); //@line 317 "_iomodule.c"
        HEAP[$repr]=$39; //@line 317 "_iomodule.c"
        var $40=HEAP[$repr]; //@line 318 "_iomodule.c"
        var $41=($40)!=0; //@line 318 "_iomodule.c"
        if ($41) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 318 "_iomodule.c"
      case 6: // $bb6
        var $42=HEAP[$repr]; //@line 319 "_iomodule.c"
        var $43=$42; //@line 319 "_iomodule.c"
        var $44=(($43+20)&4294967295); //@line 319 "_iomodule.c"
        var $45=(($44)&4294967295); //@line 319 "_iomodule.c"
        var $46=HEAP[_PyExc_TypeError]; //@line 319 "_iomodule.c"
        var $47=_PyErr_Format($46, ((__str15248)&4294967295), $45); //@line 319 "_iomodule.c"
        var $48=HEAP[$repr]; //@line 321 "_iomodule.c"
        var $49=(($48)&4294967295); //@line 321 "_iomodule.c"
        var $50=HEAP[$49]; //@line 321 "_iomodule.c"
        var $51=((($50) - 1)&4294967295); //@line 321 "_iomodule.c"
        var $52=HEAP[$repr]; //@line 321 "_iomodule.c"
        var $53=(($52)&4294967295); //@line 321 "_iomodule.c"
        HEAP[$53]=$51; //@line 321 "_iomodule.c"
        var $54=HEAP[$repr]; //@line 321 "_iomodule.c"
        var $55=(($54)&4294967295); //@line 321 "_iomodule.c"
        var $56=HEAP[$55]; //@line 321 "_iomodule.c"
        var $57=((($56))|0)==0; //@line 321 "_iomodule.c"
        if ($57) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 321 "_iomodule.c"
      case 7: // $bb7
        var $58=HEAP[$repr]; //@line 321 "_iomodule.c"
        var $59=(($58+4)&4294967295); //@line 321 "_iomodule.c"
        var $60=HEAP[$59]; //@line 321 "_iomodule.c"
        var $61=(($60+24)&4294967295); //@line 321 "_iomodule.c"
        var $62=HEAP[$61]; //@line 321 "_iomodule.c"
        var $63=HEAP[$repr]; //@line 321 "_iomodule.c"
        FUNCTION_TABLE[$62]($63); //@line 321 "_iomodule.c"
        __label__ = 8; break; //@line 321 "_iomodule.c"
      case 8: // $bb8
        HEAP[$0]=0; //@line 323 "_iomodule.c"
        __label__ = 117; break; //@line 323 "_iomodule.c"
      case 9: // $bb9
        HEAP[$i]=0; //@line 327 "_iomodule.c"
        __label__ = 22; break; //@line 327 "_iomodule.c"
      case 10: // $bb10
        var $64=HEAP[$mode]; //@line 328 "_iomodule.c"
        var $65=HEAP[$i]; //@line 328 "_iomodule.c"
        var $66=(($64+$65)&4294967295); //@line 328 "_iomodule.c"
        var $67=HEAP[$66]; //@line 328 "_iomodule.c"
        HEAP[$c]=$67; //@line 328 "_iomodule.c"
        var $68=HEAP[$c]; //@line 330 "_iomodule.c"
        var $69=reSign(($68), 8, 0); //@line 330 "_iomodule.c"
        if ($69 == 43) {
          __label__ = 14; break;
        }
        else if ($69 == 85) {
          __label__ = 17; break;
        }
        else if ($69 == 97) {
          __label__ = 13; break;
        }
        else if ($69 == 98) {
          __label__ = 16; break;
        }
        else if ($69 == 114) {
          __label__ = 11; break;
        }
        else if ($69 == 116) {
          __label__ = 15; break;
        }
        else if ($69 == 119) {
          __label__ = 12; break;
        }
        else {
        __label__ = 18; break;
        }
        
      case 11: // $bb11
        HEAP[$reading]=1; //@line 332 "_iomodule.c"
        __label__ = 19; break; //@line 332 "_iomodule.c"
      case 12: // $bb12
        HEAP[$writing]=1; //@line 335 "_iomodule.c"
        __label__ = 19; break; //@line 335 "_iomodule.c"
      case 13: // $bb13
        HEAP[$appending]=1; //@line 338 "_iomodule.c"
        __label__ = 19; break; //@line 338 "_iomodule.c"
      case 14: // $bb14
        HEAP[$updating]=1; //@line 341 "_iomodule.c"
        __label__ = 19; break; //@line 341 "_iomodule.c"
      case 15: // $bb15
        HEAP[$text]=1; //@line 344 "_iomodule.c"
        __label__ = 19; break; //@line 344 "_iomodule.c"
      case 16: // $bb16
        HEAP[$binary]=1; //@line 347 "_iomodule.c"
        __label__ = 19; break; //@line 347 "_iomodule.c"
      case 17: // $bb17
        HEAP[$universal]=1; //@line 350 "_iomodule.c"
        HEAP[$reading]=1; //@line 351 "_iomodule.c"
        __label__ = 19; break; //@line 351 "_iomodule.c"
      case 18: // $bb18
        __label__ = 20; break; //@line 351 "_iomodule.c"
      case 19: // $bb19
        var $70=HEAP[$c]; //@line 358 "_iomodule.c"
        var $71=reSign(($70), 8, 0); //@line 358 "_iomodule.c"
        var $72=HEAP[$mode]; //@line 358 "_iomodule.c"
        var $73=HEAP[$i]; //@line 358 "_iomodule.c"
        var $74=(($72+$73)&4294967295); //@line 358 "_iomodule.c"
        var $75=(($74+1)&4294967295); //@line 358 "_iomodule.c"
        var $76=_strchr($75, $71); //@line 358 "_iomodule.c"
        var $77=($76)!=0; //@line 358 "_iomodule.c"
        if ($77) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 358 "_iomodule.c"
      case 20: // $invalid_mode
        var $78=HEAP[$mode]; //@line 360 "_iomodule.c"
        var $79=HEAP[_PyExc_ValueError]; //@line 360 "_iomodule.c"
        var $80=_PyErr_Format($79, ((__str16249)&4294967295), $78); //@line 360 "_iomodule.c"
        HEAP[$0]=0; //@line 361 "_iomodule.c"
        __label__ = 117; break; //@line 361 "_iomodule.c"
      case 21: // $bb20
        var $81=HEAP[$i]; //@line 327 "_iomodule.c"
        var $82=((($81) + 1)&4294967295); //@line 327 "_iomodule.c"
        HEAP[$i]=$82; //@line 327 "_iomodule.c"
        __label__ = 22; break; //@line 327 "_iomodule.c"
      case 22: // $bb21
        var $83=HEAP[$mode]; //@line 327 "_iomodule.c"
        var $84=_strlen($83); //@line 327 "_iomodule.c"
        var $85=HEAP[$i]; //@line 327 "_iomodule.c"
        var $86=((($84))>>>0) > ((($85))>>>0); //@line 327 "_iomodule.c"
        if ($86) { __label__ = 10; break; } else { __label__ = 23; break; } //@line 327 "_iomodule.c"
      case 23: // $bb22
        var $rawmode23=$rawmode; //@line 366 "_iomodule.c"
        HEAP[$m]=$rawmode23; //@line 366 "_iomodule.c"
        var $87=HEAP[$reading]; //@line 367 "_iomodule.c"
        var $88=((($87))|0)!=0; //@line 367 "_iomodule.c"
        if ($88) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 367 "_iomodule.c"
      case 24: // $bb24
        var $89=HEAP[$m]; //@line 367 "_iomodule.c"
        HEAP[$89]=114; //@line 367 "_iomodule.c"
        var $90=HEAP[$m]; //@line 367 "_iomodule.c"
        var $91=(($90+1)&4294967295); //@line 367 "_iomodule.c"
        HEAP[$m]=$91; //@line 367 "_iomodule.c"
        __label__ = 25; break; //@line 367 "_iomodule.c"
      case 25: // $bb25
        var $92=HEAP[$writing]; //@line 368 "_iomodule.c"
        var $93=((($92))|0)!=0; //@line 368 "_iomodule.c"
        if ($93) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 368 "_iomodule.c"
      case 26: // $bb26
        var $94=HEAP[$m]; //@line 368 "_iomodule.c"
        HEAP[$94]=119; //@line 368 "_iomodule.c"
        var $95=HEAP[$m]; //@line 368 "_iomodule.c"
        var $96=(($95+1)&4294967295); //@line 368 "_iomodule.c"
        HEAP[$m]=$96; //@line 368 "_iomodule.c"
        __label__ = 27; break; //@line 368 "_iomodule.c"
      case 27: // $bb27
        var $97=HEAP[$appending]; //@line 369 "_iomodule.c"
        var $98=((($97))|0)!=0; //@line 369 "_iomodule.c"
        if ($98) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 369 "_iomodule.c"
      case 28: // $bb28
        var $99=HEAP[$m]; //@line 369 "_iomodule.c"
        HEAP[$99]=97; //@line 369 "_iomodule.c"
        var $100=HEAP[$m]; //@line 369 "_iomodule.c"
        var $101=(($100+1)&4294967295); //@line 369 "_iomodule.c"
        HEAP[$m]=$101; //@line 369 "_iomodule.c"
        __label__ = 29; break; //@line 369 "_iomodule.c"
      case 29: // $bb29
        var $102=HEAP[$updating]; //@line 370 "_iomodule.c"
        var $103=((($102))|0)!=0; //@line 370 "_iomodule.c"
        if ($103) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 370 "_iomodule.c"
      case 30: // $bb30
        var $104=HEAP[$m]; //@line 370 "_iomodule.c"
        HEAP[$104]=43; //@line 370 "_iomodule.c"
        var $105=HEAP[$m]; //@line 370 "_iomodule.c"
        var $106=(($105+1)&4294967295); //@line 370 "_iomodule.c"
        HEAP[$m]=$106; //@line 370 "_iomodule.c"
        __label__ = 31; break; //@line 370 "_iomodule.c"
      case 31: // $bb31
        var $107=HEAP[$m]; //@line 371 "_iomodule.c"
        HEAP[$107]=0; //@line 371 "_iomodule.c"
        var $108=HEAP[$universal]; //@line 374 "_iomodule.c"
        var $109=((($108))|0)!=0; //@line 374 "_iomodule.c"
        if ($109) { __label__ = 32; break; } else { __label__ = 36; break; } //@line 374 "_iomodule.c"
      case 32: // $bb32
        var $110=HEAP[$writing]; //@line 375 "_iomodule.c"
        var $111=((($110))|0)!=0; //@line 375 "_iomodule.c"
        if ($111) { __label__ = 34; break; } else { __label__ = 33; break; } //@line 375 "_iomodule.c"
      case 33: // $bb33
        var $112=HEAP[$appending]; //@line 375 "_iomodule.c"
        var $113=((($112))|0)!=0; //@line 375 "_iomodule.c"
        if ($113) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 375 "_iomodule.c"
      case 34: // $bb34
        var $114=HEAP[_PyExc_ValueError]; //@line 376 "_iomodule.c"
        _PyErr_SetString($114, ((__str17250)&4294967295)); //@line 376 "_iomodule.c"
        HEAP[$0]=0; //@line 378 "_iomodule.c"
        __label__ = 117; break; //@line 378 "_iomodule.c"
      case 35: // $bb35
        HEAP[$reading]=1; //@line 380 "_iomodule.c"
        __label__ = 36; break; //@line 380 "_iomodule.c"
      case 36: // $bb36
        var $115=HEAP[$text]; //@line 383 "_iomodule.c"
        var $116=((($115))|0)!=0; //@line 383 "_iomodule.c"
        if ($116) { __label__ = 37; break; } else { __label__ = 39; break; } //@line 383 "_iomodule.c"
      case 37: // $bb37
        var $117=HEAP[$binary]; //@line 383 "_iomodule.c"
        var $118=((($117))|0)!=0; //@line 383 "_iomodule.c"
        if ($118) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 383 "_iomodule.c"
      case 38: // $bb38
        var $119=HEAP[_PyExc_ValueError]; //@line 384 "_iomodule.c"
        _PyErr_SetString($119, ((__str18251)&4294967295)); //@line 384 "_iomodule.c"
        HEAP[$0]=0; //@line 386 "_iomodule.c"
        __label__ = 117; break; //@line 386 "_iomodule.c"
      case 39: // $bb39
        var $120=HEAP[$reading]; //@line 389 "_iomodule.c"
        var $121=HEAP[$writing]; //@line 389 "_iomodule.c"
        var $122=((($120) + ($121))&4294967295); //@line 389 "_iomodule.c"
        var $123=HEAP[$appending]; //@line 389 "_iomodule.c"
        var $124=((($122) + ($123))&4294967295); //@line 389 "_iomodule.c"
        var $125=((($124))|0) > 1; //@line 389 "_iomodule.c"
        if ($125) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 389 "_iomodule.c"
      case 40: // $bb40
        var $126=HEAP[_PyExc_ValueError]; //@line 390 "_iomodule.c"
        _PyErr_SetString($126, ((__str19252)&4294967295)); //@line 390 "_iomodule.c"
        HEAP[$0]=0; //@line 392 "_iomodule.c"
        __label__ = 117; break; //@line 392 "_iomodule.c"
      case 41: // $bb41
        var $127=HEAP[$binary]; //@line 395 "_iomodule.c"
        var $128=((($127))|0)!=0; //@line 395 "_iomodule.c"
        if ($128) { __label__ = 42; break; } else { __label__ = 44; break; } //@line 395 "_iomodule.c"
      case 42: // $bb42
        var $129=HEAP[$encoding]; //@line 395 "_iomodule.c"
        var $130=($129)!=0; //@line 395 "_iomodule.c"
        if ($130) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 395 "_iomodule.c"
      case 43: // $bb43
        var $131=HEAP[_PyExc_ValueError]; //@line 396 "_iomodule.c"
        _PyErr_SetString($131, ((__str20253)&4294967295)); //@line 396 "_iomodule.c"
        HEAP[$0]=0; //@line 398 "_iomodule.c"
        __label__ = 117; break; //@line 398 "_iomodule.c"
      case 44: // $bb44
        var $132=HEAP[$binary]; //@line 401 "_iomodule.c"
        var $133=((($132))|0)!=0; //@line 401 "_iomodule.c"
        if ($133) { __label__ = 45; break; } else { __label__ = 47; break; } //@line 401 "_iomodule.c"
      case 45: // $bb45
        var $134=HEAP[$errors]; //@line 401 "_iomodule.c"
        var $135=($134)!=0; //@line 401 "_iomodule.c"
        if ($135) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 401 "_iomodule.c"
      case 46: // $bb46
        var $136=HEAP[_PyExc_ValueError]; //@line 402 "_iomodule.c"
        _PyErr_SetString($136, ((__str21254)&4294967295)); //@line 402 "_iomodule.c"
        HEAP[$0]=0; //@line 404 "_iomodule.c"
        __label__ = 117; break; //@line 404 "_iomodule.c"
      case 47: // $bb47
        var $137=HEAP[$binary]; //@line 407 "_iomodule.c"
        var $138=((($137))|0)!=0; //@line 407 "_iomodule.c"
        if ($138) { __label__ = 48; break; } else { __label__ = 50; break; } //@line 407 "_iomodule.c"
      case 48: // $bb48
        var $139=HEAP[$newline]; //@line 407 "_iomodule.c"
        var $140=($139)!=0; //@line 407 "_iomodule.c"
        if ($140) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 407 "_iomodule.c"
      case 49: // $bb49
        var $141=HEAP[_PyExc_ValueError]; //@line 408 "_iomodule.c"
        _PyErr_SetString($141, ((__str22255)&4294967295)); //@line 408 "_iomodule.c"
        HEAP[$0]=0; //@line 410 "_iomodule.c"
        __label__ = 117; break; //@line 410 "_iomodule.c"
      case 50: // $bb50
        var $142=HEAP[$closefd]; //@line 414 "_iomodule.c"
        var $143=HEAP[$file]; //@line 414 "_iomodule.c"
        var $rawmode51=$rawmode; //@line 414 "_iomodule.c"
        var $144=__PyObject_CallFunction_SizeT(_PyFileIO_Type, ((__str23256)&4294967295), $143, $rawmode51, $142); //@line 414 "_iomodule.c"
        HEAP[$raw]=$144; //@line 414 "_iomodule.c"
        var $145=HEAP[$raw]; //@line 416 "_iomodule.c"
        var $146=($145)==0; //@line 416 "_iomodule.c"
        if ($146) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 416 "_iomodule.c"
      case 51: // $bb52
        HEAP[$0]=0; //@line 417 "_iomodule.c"
        __label__ = 117; break; //@line 417 "_iomodule.c"
      case 52: // $bb53
        var $147=HEAP[$mode]; //@line 419 "_iomodule.c"
        var $148=_PyUnicodeUCS2_FromString($147); //@line 419 "_iomodule.c"
        HEAP[$modeobj]=$148; //@line 419 "_iomodule.c"
        var $149=HEAP[$modeobj]; //@line 420 "_iomodule.c"
        var $150=($149)==0; //@line 420 "_iomodule.c"
        if ($150) { __label__ = 104; break; } else { __label__ = 53; break; } //@line 420 "_iomodule.c"
      case 53: // $bb54
        var $151=HEAP[$raw]; //@line 425 "_iomodule.c"
        var $152=__PyObject_CallMethod_SizeT($151, ((__str24257)&4294967295), 0); //@line 425 "_iomodule.c"
        HEAP[$res]=$152; //@line 425 "_iomodule.c"
        var $153=HEAP[$res]; //@line 426 "_iomodule.c"
        var $154=($153)==0; //@line 426 "_iomodule.c"
        if ($154) { __label__ = 104; break; } else { __label__ = 54; break; } //@line 426 "_iomodule.c"
      case 54: // $bb55
        var $155=HEAP[$res]; //@line 428 "_iomodule.c"
        var $156=_PyLong_AsLong($155); //@line 428 "_iomodule.c"
        HEAP[$isatty]=$156; //@line 428 "_iomodule.c"
        var $157=HEAP[$res]; //@line 429 "_iomodule.c"
        var $158=(($157)&4294967295); //@line 429 "_iomodule.c"
        var $159=HEAP[$158]; //@line 429 "_iomodule.c"
        var $160=((($159) - 1)&4294967295); //@line 429 "_iomodule.c"
        var $161=HEAP[$res]; //@line 429 "_iomodule.c"
        var $162=(($161)&4294967295); //@line 429 "_iomodule.c"
        HEAP[$162]=$160; //@line 429 "_iomodule.c"
        var $163=HEAP[$res]; //@line 429 "_iomodule.c"
        var $164=(($163)&4294967295); //@line 429 "_iomodule.c"
        var $165=HEAP[$164]; //@line 429 "_iomodule.c"
        var $166=((($165))|0)==0; //@line 429 "_iomodule.c"
        if ($166) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 429 "_iomodule.c"
      case 55: // $bb56
        var $167=HEAP[$res]; //@line 429 "_iomodule.c"
        var $168=(($167+4)&4294967295); //@line 429 "_iomodule.c"
        var $169=HEAP[$168]; //@line 429 "_iomodule.c"
        var $170=(($169+24)&4294967295); //@line 429 "_iomodule.c"
        var $171=HEAP[$170]; //@line 429 "_iomodule.c"
        var $172=HEAP[$res]; //@line 429 "_iomodule.c"
        FUNCTION_TABLE[$171]($172); //@line 429 "_iomodule.c"
        __label__ = 56; break; //@line 429 "_iomodule.c"
      case 56: // $bb57
        var $173=HEAP[$isatty]; //@line 430 "_iomodule.c"
        var $174=((($173))|0)==-1; //@line 430 "_iomodule.c"
        if ($174) { __label__ = 57; break; } else { __label__ = 58; break; } //@line 430 "_iomodule.c"
      case 57: // $bb58
        var $175=_PyErr_Occurred(); //@line 430 "_iomodule.c"
        var $176=($175)!=0; //@line 430 "_iomodule.c"
        if ($176) { __label__ = 104; break; } else { __label__ = 58; break; } //@line 430 "_iomodule.c"
      case 58: // $bb59
        var $177=HEAP[$buffering]; //@line 434 "_iomodule.c"
        var $178=((($177))|0)==1; //@line 434 "_iomodule.c"
        if ($178) { __label__ = 61; break; } else { __label__ = 59; break; } //@line 434 "_iomodule.c"
      case 59: // $bb60
        var $179=HEAP[$buffering]; //@line 434 "_iomodule.c"
        var $180=((($179))|0) >= 0; //@line 434 "_iomodule.c"
        if ($180) { __label__ = 62; break; } else { __label__ = 60; break; } //@line 434 "_iomodule.c"
      case 60: // $bb61
        var $181=HEAP[$isatty]; //@line 434 "_iomodule.c"
        var $182=((($181))|0)!=0; //@line 434 "_iomodule.c"
        if ($182) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 434 "_iomodule.c"
      case 61: // $bb62
        HEAP[$buffering]=-1; //@line 435 "_iomodule.c"
        HEAP[$line_buffering]=1; //@line 436 "_iomodule.c"
        __label__ = 63; break; //@line 436 "_iomodule.c"
      case 62: // $bb63
        HEAP[$line_buffering]=0; //@line 439 "_iomodule.c"
        __label__ = 63; break; //@line 439 "_iomodule.c"
      case 63: // $bb64
        var $183=HEAP[$buffering]; //@line 441 "_iomodule.c"
        var $184=((($183))|0) < 0; //@line 441 "_iomodule.c"
        if ($184) { __label__ = 64; break; } else { __label__ = 72; break; } //@line 441 "_iomodule.c"
      case 64: // $bb65
        HEAP[$buffering]=8192; //@line 442 "_iomodule.c"
        var $185=HEAP[$raw]; //@line 447 "_iomodule.c"
        var $186=__PyObject_CallMethod_SizeT($185, ((__str25258)&4294967295), 0); //@line 447 "_iomodule.c"
        HEAP[$res66]=$186; //@line 447 "_iomodule.c"
        var $187=HEAP[$res66]; //@line 448 "_iomodule.c"
        var $188=($187)==0; //@line 448 "_iomodule.c"
        if ($188) { __label__ = 104; break; } else { __label__ = 65; break; } //@line 448 "_iomodule.c"
      case 65: // $bb67
        var $189=HEAP[$res66]; //@line 451 "_iomodule.c"
        var $190=_PyInt_AsLong($189); //@line 451 "_iomodule.c"
        HEAP[$fileno]=$190; //@line 451 "_iomodule.c"
        var $191=HEAP[$res66]; //@line 452 "_iomodule.c"
        var $192=(($191)&4294967295); //@line 452 "_iomodule.c"
        var $193=HEAP[$192]; //@line 452 "_iomodule.c"
        var $194=((($193) - 1)&4294967295); //@line 452 "_iomodule.c"
        var $195=HEAP[$res66]; //@line 452 "_iomodule.c"
        var $196=(($195)&4294967295); //@line 452 "_iomodule.c"
        HEAP[$196]=$194; //@line 452 "_iomodule.c"
        var $197=HEAP[$res66]; //@line 452 "_iomodule.c"
        var $198=(($197)&4294967295); //@line 452 "_iomodule.c"
        var $199=HEAP[$198]; //@line 452 "_iomodule.c"
        var $200=((($199))|0)==0; //@line 452 "_iomodule.c"
        if ($200) { __label__ = 66; break; } else { __label__ = 67; break; } //@line 452 "_iomodule.c"
      case 66: // $bb68
        var $201=HEAP[$res66]; //@line 452 "_iomodule.c"
        var $202=(($201+4)&4294967295); //@line 452 "_iomodule.c"
        var $203=HEAP[$202]; //@line 452 "_iomodule.c"
        var $204=(($203+24)&4294967295); //@line 452 "_iomodule.c"
        var $205=HEAP[$204]; //@line 452 "_iomodule.c"
        var $206=HEAP[$res66]; //@line 452 "_iomodule.c"
        FUNCTION_TABLE[$205]($206); //@line 452 "_iomodule.c"
        __label__ = 67; break; //@line 452 "_iomodule.c"
      case 67: // $bb69
        var $207=HEAP[$fileno]; //@line 453 "_iomodule.c"
        var $208=((($207))|0)==-1; //@line 453 "_iomodule.c"
        if ($208) { __label__ = 68; break; } else { __label__ = 69; break; } //@line 453 "_iomodule.c"
      case 68: // $bb70
        var $209=_PyErr_Occurred(); //@line 453 "_iomodule.c"
        var $210=($209)!=0; //@line 453 "_iomodule.c"
        if ($210) { __label__ = 104; break; } else { __label__ = 69; break; } //@line 453 "_iomodule.c"
      case 69: // $bb71
        var $211=HEAP[$fileno]; //@line 456 "_iomodule.c"
        var $212=___01fstat64_($211, $st); //@line 456 "_iomodule.c"
        var $213=((($212))|0) >= 0; //@line 456 "_iomodule.c"
        if ($213) { __label__ = 70; break; } else { __label__ = 72; break; } //@line 456 "_iomodule.c"
      case 70: // $bb72
        var $214=(($st+52)&4294967295); //@line 456 "_iomodule.c"
        var $215=HEAP[$214]; //@line 456 "_iomodule.c"
        var $216=((($215))|0) > 1; //@line 456 "_iomodule.c"
        if ($216) { __label__ = 71; break; } else { __label__ = 72; break; } //@line 456 "_iomodule.c"
      case 71: // $bb73
        var $217=(($st+52)&4294967295); //@line 457 "_iomodule.c"
        var $218=HEAP[$217]; //@line 457 "_iomodule.c"
        HEAP[$buffering]=$218; //@line 457 "_iomodule.c"
        __label__ = 72; break; //@line 457 "_iomodule.c"
      case 72: // $bb74
        var $219=HEAP[$buffering]; //@line 461 "_iomodule.c"
        var $220=((($219))|0) < 0; //@line 461 "_iomodule.c"
        if ($220) { __label__ = 73; break; } else { __label__ = 74; break; } //@line 461 "_iomodule.c"
      case 73: // $bb75
        var $221=HEAP[_PyExc_ValueError]; //@line 462 "_iomodule.c"
        _PyErr_SetString($221, ((__str26259)&4294967295)); //@line 462 "_iomodule.c"
        __label__ = 104; break; //@line 462 "_iomodule.c"
      case 74: // $bb76
        var $222=HEAP[$buffering]; //@line 468 "_iomodule.c"
        var $223=((($222))|0)==0; //@line 468 "_iomodule.c"
        if ($223) { __label__ = 75; break; } else { __label__ = 80; break; } //@line 468 "_iomodule.c"
      case 75: // $bb77
        var $224=HEAP[$binary]; //@line 469 "_iomodule.c"
        var $225=((($224))|0)==0; //@line 469 "_iomodule.c"
        if ($225) { __label__ = 76; break; } else { __label__ = 77; break; } //@line 469 "_iomodule.c"
      case 76: // $bb78
        var $226=HEAP[_PyExc_ValueError]; //@line 470 "_iomodule.c"
        _PyErr_SetString($226, ((__str27260)&4294967295)); //@line 470 "_iomodule.c"
        __label__ = 104; break; //@line 470 "_iomodule.c"
      case 77: // $bb79
        var $227=HEAP[$modeobj]; //@line 475 "_iomodule.c"
        var $228=(($227)&4294967295); //@line 475 "_iomodule.c"
        var $229=HEAP[$228]; //@line 475 "_iomodule.c"
        var $230=((($229) - 1)&4294967295); //@line 475 "_iomodule.c"
        var $231=HEAP[$modeobj]; //@line 475 "_iomodule.c"
        var $232=(($231)&4294967295); //@line 475 "_iomodule.c"
        HEAP[$232]=$230; //@line 475 "_iomodule.c"
        var $233=HEAP[$modeobj]; //@line 475 "_iomodule.c"
        var $234=(($233)&4294967295); //@line 475 "_iomodule.c"
        var $235=HEAP[$234]; //@line 475 "_iomodule.c"
        var $236=((($235))|0)==0; //@line 475 "_iomodule.c"
        if ($236) { __label__ = 78; break; } else { __label__ = 79; break; } //@line 475 "_iomodule.c"
      case 78: // $bb80
        var $237=HEAP[$modeobj]; //@line 475 "_iomodule.c"
        var $238=(($237+4)&4294967295); //@line 475 "_iomodule.c"
        var $239=HEAP[$238]; //@line 475 "_iomodule.c"
        var $240=(($239+24)&4294967295); //@line 475 "_iomodule.c"
        var $241=HEAP[$240]; //@line 475 "_iomodule.c"
        var $242=HEAP[$modeobj]; //@line 475 "_iomodule.c"
        FUNCTION_TABLE[$241]($242); //@line 475 "_iomodule.c"
        __label__ = 79; break; //@line 475 "_iomodule.c"
      case 79: // $bb81
        var $243=HEAP[$raw]; //@line 476 "_iomodule.c"
        HEAP[$0]=$243; //@line 476 "_iomodule.c"
        __label__ = 117; break; //@line 476 "_iomodule.c"
      case 80: // $bb82
        var $244=HEAP[$updating]; //@line 483 "_iomodule.c"
        var $245=((($244))|0)!=0; //@line 483 "_iomodule.c"
        if ($245) { __label__ = 81; break; } else { __label__ = 82; break; } //@line 483 "_iomodule.c"
      case 81: // $bb83
        HEAP[$Buffered_class]=_PyBufferedRandom_Type; //@line 484 "_iomodule.c"
        __label__ = 88; break; //@line 484 "_iomodule.c"
      case 82: // $bb84
        var $246=HEAP[$writing]; //@line 485 "_iomodule.c"
        var $247=((($246))|0)!=0; //@line 485 "_iomodule.c"
        if ($247) { __label__ = 84; break; } else { __label__ = 83; break; } //@line 485 "_iomodule.c"
      case 83: // $bb85
        var $248=HEAP[$appending]; //@line 485 "_iomodule.c"
        var $249=((($248))|0)!=0; //@line 485 "_iomodule.c"
        if ($249) { __label__ = 84; break; } else { __label__ = 85; break; } //@line 485 "_iomodule.c"
      case 84: // $bb86
        HEAP[$Buffered_class]=_PyBufferedWriter_Type; //@line 486 "_iomodule.c"
        __label__ = 88; break; //@line 486 "_iomodule.c"
      case 85: // $bb87
        var $250=HEAP[$reading]; //@line 487 "_iomodule.c"
        var $251=((($250))|0)!=0; //@line 487 "_iomodule.c"
        if ($251) { __label__ = 86; break; } else { __label__ = 87; break; } //@line 487 "_iomodule.c"
      case 86: // $bb88
        HEAP[$Buffered_class]=_PyBufferedReader_Type; //@line 488 "_iomodule.c"
        __label__ = 88; break; //@line 488 "_iomodule.c"
      case 87: // $bb89
        var $252=HEAP[$mode]; //@line 490 "_iomodule.c"
        var $253=HEAP[_PyExc_ValueError]; //@line 490 "_iomodule.c"
        var $254=_PyErr_Format($253, ((__str28261)&4294967295), $252); //@line 490 "_iomodule.c"
        __label__ = 104; break; //@line 490 "_iomodule.c"
      case 88: // $bb90
        var $255=HEAP[$buffering]; //@line 495 "_iomodule.c"
        var $256=HEAP[$Buffered_class]; //@line 495 "_iomodule.c"
        var $257=HEAP[$raw]; //@line 495 "_iomodule.c"
        var $258=__PyObject_CallFunction_SizeT($256, ((__str29262)&4294967295), $257, $255); //@line 495 "_iomodule.c"
        HEAP[$buffer]=$258; //@line 495 "_iomodule.c"
        var $259=HEAP[$raw]; //@line 497 "_iomodule.c"
        var $260=($259)!=0; //@line 497 "_iomodule.c"
        if ($260) { __label__ = 89; break; } else { __label__ = 91; break; } //@line 497 "_iomodule.c"
      case 89: // $bb91
        var $261=HEAP[$raw]; //@line 497 "_iomodule.c"
        HEAP[$_py_tmp]=$261; //@line 497 "_iomodule.c"
        HEAP[$raw]=0; //@line 497 "_iomodule.c"
        var $262=HEAP[$_py_tmp]; //@line 497 "_iomodule.c"
        var $263=(($262)&4294967295); //@line 497 "_iomodule.c"
        var $264=HEAP[$263]; //@line 497 "_iomodule.c"
        var $265=((($264) - 1)&4294967295); //@line 497 "_iomodule.c"
        var $266=HEAP[$_py_tmp]; //@line 497 "_iomodule.c"
        var $267=(($266)&4294967295); //@line 497 "_iomodule.c"
        HEAP[$267]=$265; //@line 497 "_iomodule.c"
        var $268=HEAP[$_py_tmp]; //@line 497 "_iomodule.c"
        var $269=(($268)&4294967295); //@line 497 "_iomodule.c"
        var $270=HEAP[$269]; //@line 497 "_iomodule.c"
        var $271=((($270))|0)==0; //@line 497 "_iomodule.c"
        if ($271) { __label__ = 90; break; } else { __label__ = 91; break; } //@line 497 "_iomodule.c"
      case 90: // $bb92
        var $272=HEAP[$_py_tmp]; //@line 497 "_iomodule.c"
        var $273=(($272+4)&4294967295); //@line 497 "_iomodule.c"
        var $274=HEAP[$273]; //@line 497 "_iomodule.c"
        var $275=(($274+24)&4294967295); //@line 497 "_iomodule.c"
        var $276=HEAP[$275]; //@line 497 "_iomodule.c"
        var $277=HEAP[$_py_tmp]; //@line 497 "_iomodule.c"
        FUNCTION_TABLE[$276]($277); //@line 497 "_iomodule.c"
        __label__ = 91; break; //@line 497 "_iomodule.c"
      case 91: // $bb93
        var $278=HEAP[$buffer]; //@line 498 "_iomodule.c"
        var $279=($278)==0; //@line 498 "_iomodule.c"
        if ($279) { __label__ = 104; break; } else { __label__ = 92; break; } //@line 498 "_iomodule.c"
      case 92: // $bb94
        var $280=HEAP[$binary]; //@line 503 "_iomodule.c"
        var $281=((($280))|0)!=0; //@line 503 "_iomodule.c"
        if ($281) { __label__ = 93; break; } else { __label__ = 96; break; } //@line 503 "_iomodule.c"
      case 93: // $bb95
        var $282=HEAP[$modeobj]; //@line 504 "_iomodule.c"
        var $283=(($282)&4294967295); //@line 504 "_iomodule.c"
        var $284=HEAP[$283]; //@line 504 "_iomodule.c"
        var $285=((($284) - 1)&4294967295); //@line 504 "_iomodule.c"
        var $286=HEAP[$modeobj]; //@line 504 "_iomodule.c"
        var $287=(($286)&4294967295); //@line 504 "_iomodule.c"
        HEAP[$287]=$285; //@line 504 "_iomodule.c"
        var $288=HEAP[$modeobj]; //@line 504 "_iomodule.c"
        var $289=(($288)&4294967295); //@line 504 "_iomodule.c"
        var $290=HEAP[$289]; //@line 504 "_iomodule.c"
        var $291=((($290))|0)==0; //@line 504 "_iomodule.c"
        if ($291) { __label__ = 94; break; } else { __label__ = 95; break; } //@line 504 "_iomodule.c"
      case 94: // $bb96
        var $292=HEAP[$modeobj]; //@line 504 "_iomodule.c"
        var $293=(($292+4)&4294967295); //@line 504 "_iomodule.c"
        var $294=HEAP[$293]; //@line 504 "_iomodule.c"
        var $295=(($294+24)&4294967295); //@line 504 "_iomodule.c"
        var $296=HEAP[$295]; //@line 504 "_iomodule.c"
        var $297=HEAP[$modeobj]; //@line 504 "_iomodule.c"
        FUNCTION_TABLE[$296]($297); //@line 504 "_iomodule.c"
        __label__ = 95; break; //@line 504 "_iomodule.c"
      case 95: // $bb97
        var $298=HEAP[$buffer]; //@line 505 "_iomodule.c"
        HEAP[$0]=$298; //@line 505 "_iomodule.c"
        __label__ = 117; break; //@line 505 "_iomodule.c"
      case 96: // $bb98
        var $299=HEAP[$newline]; //@line 509 "_iomodule.c"
        var $300=HEAP[$errors]; //@line 509 "_iomodule.c"
        var $301=HEAP[$encoding]; //@line 509 "_iomodule.c"
        var $302=HEAP[$buffer]; //@line 509 "_iomodule.c"
        var $303=HEAP[$line_buffering]; //@line 509 "_iomodule.c"
        var $304=__PyObject_CallFunction_SizeT(_PyTextIOWrapper_Type, ((__str30263)&4294967295), $302, $301, $300, $299, $303); //@line 509 "_iomodule.c"
        HEAP[$wrapper]=$304; //@line 509 "_iomodule.c"
        var $305=HEAP[$buffer]; //@line 514 "_iomodule.c"
        var $306=($305)!=0; //@line 514 "_iomodule.c"
        if ($306) { __label__ = 97; break; } else { __label__ = 99; break; } //@line 514 "_iomodule.c"
      case 97: // $bb99
        var $307=HEAP[$buffer]; //@line 514 "_iomodule.c"
        HEAP[$_py_tmp100]=$307; //@line 514 "_iomodule.c"
        HEAP[$buffer]=0; //@line 514 "_iomodule.c"
        var $308=HEAP[$_py_tmp100]; //@line 514 "_iomodule.c"
        var $309=(($308)&4294967295); //@line 514 "_iomodule.c"
        var $310=HEAP[$309]; //@line 514 "_iomodule.c"
        var $311=((($310) - 1)&4294967295); //@line 514 "_iomodule.c"
        var $312=HEAP[$_py_tmp100]; //@line 514 "_iomodule.c"
        var $313=(($312)&4294967295); //@line 514 "_iomodule.c"
        HEAP[$313]=$311; //@line 514 "_iomodule.c"
        var $314=HEAP[$_py_tmp100]; //@line 514 "_iomodule.c"
        var $315=(($314)&4294967295); //@line 514 "_iomodule.c"
        var $316=HEAP[$315]; //@line 514 "_iomodule.c"
        var $317=((($316))|0)==0; //@line 514 "_iomodule.c"
        if ($317) { __label__ = 98; break; } else { __label__ = 99; break; } //@line 514 "_iomodule.c"
      case 98: // $bb101
        var $318=HEAP[$_py_tmp100]; //@line 514 "_iomodule.c"
        var $319=(($318+4)&4294967295); //@line 514 "_iomodule.c"
        var $320=HEAP[$319]; //@line 514 "_iomodule.c"
        var $321=(($320+24)&4294967295); //@line 514 "_iomodule.c"
        var $322=HEAP[$321]; //@line 514 "_iomodule.c"
        var $323=HEAP[$_py_tmp100]; //@line 514 "_iomodule.c"
        FUNCTION_TABLE[$322]($323); //@line 514 "_iomodule.c"
        __label__ = 99; break; //@line 514 "_iomodule.c"
      case 99: // $bb102
        var $324=HEAP[$wrapper]; //@line 515 "_iomodule.c"
        var $325=($324)==0; //@line 515 "_iomodule.c"
        if ($325) { __label__ = 104; break; } else { __label__ = 100; break; } //@line 515 "_iomodule.c"
      case 100: // $bb103
        var $326=HEAP[$wrapper]; //@line 518 "_iomodule.c"
        var $327=HEAP[$modeobj]; //@line 518 "_iomodule.c"
        var $328=_PyObject_SetAttrString($326, ((__str7240)&4294967295), $327); //@line 518 "_iomodule.c"
        var $329=((($328))|0) < 0; //@line 518 "_iomodule.c"
        if ($329) { __label__ = 104; break; } else { __label__ = 101; break; } //@line 518 "_iomodule.c"
      case 101: // $bb104
        var $330=HEAP[$modeobj]; //@line 520 "_iomodule.c"
        var $331=(($330)&4294967295); //@line 520 "_iomodule.c"
        var $332=HEAP[$331]; //@line 520 "_iomodule.c"
        var $333=((($332) - 1)&4294967295); //@line 520 "_iomodule.c"
        var $334=HEAP[$modeobj]; //@line 520 "_iomodule.c"
        var $335=(($334)&4294967295); //@line 520 "_iomodule.c"
        HEAP[$335]=$333; //@line 520 "_iomodule.c"
        var $336=HEAP[$modeobj]; //@line 520 "_iomodule.c"
        var $337=(($336)&4294967295); //@line 520 "_iomodule.c"
        var $338=HEAP[$337]; //@line 520 "_iomodule.c"
        var $339=((($338))|0)==0; //@line 520 "_iomodule.c"
        if ($339) { __label__ = 102; break; } else { __label__ = 103; break; } //@line 520 "_iomodule.c"
      case 102: // $bb105
        var $340=HEAP[$modeobj]; //@line 520 "_iomodule.c"
        var $341=(($340+4)&4294967295); //@line 520 "_iomodule.c"
        var $342=HEAP[$341]; //@line 520 "_iomodule.c"
        var $343=(($342+24)&4294967295); //@line 520 "_iomodule.c"
        var $344=HEAP[$343]; //@line 520 "_iomodule.c"
        var $345=HEAP[$modeobj]; //@line 520 "_iomodule.c"
        FUNCTION_TABLE[$344]($345); //@line 520 "_iomodule.c"
        __label__ = 103; break; //@line 520 "_iomodule.c"
      case 103: // $bb106
        var $346=HEAP[$wrapper]; //@line 521 "_iomodule.c"
        HEAP[$0]=$346; //@line 521 "_iomodule.c"
        __label__ = 117; break; //@line 521 "_iomodule.c"
      case 104: // $error
        var $347=HEAP[$raw]; //@line 524 "_iomodule.c"
        var $348=($347)!=0; //@line 524 "_iomodule.c"
        if ($348) { __label__ = 105; break; } else { __label__ = 107; break; } //@line 524 "_iomodule.c"
      case 105: // $bb107
        var $349=HEAP[$raw]; //@line 524 "_iomodule.c"
        var $350=(($349)&4294967295); //@line 524 "_iomodule.c"
        var $351=HEAP[$350]; //@line 524 "_iomodule.c"
        var $352=((($351) - 1)&4294967295); //@line 524 "_iomodule.c"
        var $353=HEAP[$raw]; //@line 524 "_iomodule.c"
        var $354=(($353)&4294967295); //@line 524 "_iomodule.c"
        HEAP[$354]=$352; //@line 524 "_iomodule.c"
        var $355=HEAP[$raw]; //@line 524 "_iomodule.c"
        var $356=(($355)&4294967295); //@line 524 "_iomodule.c"
        var $357=HEAP[$356]; //@line 524 "_iomodule.c"
        var $358=((($357))|0)==0; //@line 524 "_iomodule.c"
        if ($358) { __label__ = 106; break; } else { __label__ = 107; break; } //@line 524 "_iomodule.c"
      case 106: // $bb108
        var $359=HEAP[$raw]; //@line 524 "_iomodule.c"
        var $360=(($359+4)&4294967295); //@line 524 "_iomodule.c"
        var $361=HEAP[$360]; //@line 524 "_iomodule.c"
        var $362=(($361+24)&4294967295); //@line 524 "_iomodule.c"
        var $363=HEAP[$362]; //@line 524 "_iomodule.c"
        var $364=HEAP[$raw]; //@line 524 "_iomodule.c"
        FUNCTION_TABLE[$363]($364); //@line 524 "_iomodule.c"
        __label__ = 107; break; //@line 524 "_iomodule.c"
      case 107: // $bb109
        var $365=HEAP[$modeobj]; //@line 525 "_iomodule.c"
        var $366=($365)!=0; //@line 525 "_iomodule.c"
        if ($366) { __label__ = 108; break; } else { __label__ = 110; break; } //@line 525 "_iomodule.c"
      case 108: // $bb110
        var $367=HEAP[$modeobj]; //@line 525 "_iomodule.c"
        var $368=(($367)&4294967295); //@line 525 "_iomodule.c"
        var $369=HEAP[$368]; //@line 525 "_iomodule.c"
        var $370=((($369) - 1)&4294967295); //@line 525 "_iomodule.c"
        var $371=HEAP[$modeobj]; //@line 525 "_iomodule.c"
        var $372=(($371)&4294967295); //@line 525 "_iomodule.c"
        HEAP[$372]=$370; //@line 525 "_iomodule.c"
        var $373=HEAP[$modeobj]; //@line 525 "_iomodule.c"
        var $374=(($373)&4294967295); //@line 525 "_iomodule.c"
        var $375=HEAP[$374]; //@line 525 "_iomodule.c"
        var $376=((($375))|0)==0; //@line 525 "_iomodule.c"
        if ($376) { __label__ = 109; break; } else { __label__ = 110; break; } //@line 525 "_iomodule.c"
      case 109: // $bb111
        var $377=HEAP[$modeobj]; //@line 525 "_iomodule.c"
        var $378=(($377+4)&4294967295); //@line 525 "_iomodule.c"
        var $379=HEAP[$378]; //@line 525 "_iomodule.c"
        var $380=(($379+24)&4294967295); //@line 525 "_iomodule.c"
        var $381=HEAP[$380]; //@line 525 "_iomodule.c"
        var $382=HEAP[$modeobj]; //@line 525 "_iomodule.c"
        FUNCTION_TABLE[$381]($382); //@line 525 "_iomodule.c"
        __label__ = 110; break; //@line 525 "_iomodule.c"
      case 110: // $bb112
        var $383=HEAP[$buffer]; //@line 526 "_iomodule.c"
        var $384=($383)!=0; //@line 526 "_iomodule.c"
        if ($384) { __label__ = 111; break; } else { __label__ = 113; break; } //@line 526 "_iomodule.c"
      case 111: // $bb113
        var $385=HEAP[$buffer]; //@line 526 "_iomodule.c"
        var $386=(($385)&4294967295); //@line 526 "_iomodule.c"
        var $387=HEAP[$386]; //@line 526 "_iomodule.c"
        var $388=((($387) - 1)&4294967295); //@line 526 "_iomodule.c"
        var $389=HEAP[$buffer]; //@line 526 "_iomodule.c"
        var $390=(($389)&4294967295); //@line 526 "_iomodule.c"
        HEAP[$390]=$388; //@line 526 "_iomodule.c"
        var $391=HEAP[$buffer]; //@line 526 "_iomodule.c"
        var $392=(($391)&4294967295); //@line 526 "_iomodule.c"
        var $393=HEAP[$392]; //@line 526 "_iomodule.c"
        var $394=((($393))|0)==0; //@line 526 "_iomodule.c"
        if ($394) { __label__ = 112; break; } else { __label__ = 113; break; } //@line 526 "_iomodule.c"
      case 112: // $bb114
        var $395=HEAP[$buffer]; //@line 526 "_iomodule.c"
        var $396=(($395+4)&4294967295); //@line 526 "_iomodule.c"
        var $397=HEAP[$396]; //@line 526 "_iomodule.c"
        var $398=(($397+24)&4294967295); //@line 526 "_iomodule.c"
        var $399=HEAP[$398]; //@line 526 "_iomodule.c"
        var $400=HEAP[$buffer]; //@line 526 "_iomodule.c"
        FUNCTION_TABLE[$399]($400); //@line 526 "_iomodule.c"
        __label__ = 113; break; //@line 526 "_iomodule.c"
      case 113: // $bb115
        var $401=HEAP[$wrapper]; //@line 527 "_iomodule.c"
        var $402=($401)!=0; //@line 527 "_iomodule.c"
        if ($402) { __label__ = 114; break; } else { __label__ = 116; break; } //@line 527 "_iomodule.c"
      case 114: // $bb116
        var $403=HEAP[$wrapper]; //@line 527 "_iomodule.c"
        var $404=(($403)&4294967295); //@line 527 "_iomodule.c"
        var $405=HEAP[$404]; //@line 527 "_iomodule.c"
        var $406=((($405) - 1)&4294967295); //@line 527 "_iomodule.c"
        var $407=HEAP[$wrapper]; //@line 527 "_iomodule.c"
        var $408=(($407)&4294967295); //@line 527 "_iomodule.c"
        HEAP[$408]=$406; //@line 527 "_iomodule.c"
        var $409=HEAP[$wrapper]; //@line 527 "_iomodule.c"
        var $410=(($409)&4294967295); //@line 527 "_iomodule.c"
        var $411=HEAP[$410]; //@line 527 "_iomodule.c"
        var $412=((($411))|0)==0; //@line 527 "_iomodule.c"
        if ($412) { __label__ = 115; break; } else { __label__ = 116; break; } //@line 527 "_iomodule.c"
      case 115: // $bb117
        var $413=HEAP[$wrapper]; //@line 527 "_iomodule.c"
        var $414=(($413+4)&4294967295); //@line 527 "_iomodule.c"
        var $415=HEAP[$414]; //@line 527 "_iomodule.c"
        var $416=(($415+24)&4294967295); //@line 527 "_iomodule.c"
        var $417=HEAP[$416]; //@line 527 "_iomodule.c"
        var $418=HEAP[$wrapper]; //@line 527 "_iomodule.c"
        FUNCTION_TABLE[$417]($418); //@line 527 "_iomodule.c"
        __label__ = 116; break; //@line 527 "_iomodule.c"
      case 116: // $bb118
        HEAP[$0]=0; //@line 528 "_iomodule.c"
        __label__ = 117; break; //@line 528 "_iomodule.c"
      case 117: // $bb119
        var $419=HEAP[$0]; //@line 311 "_iomodule.c"
        HEAP[$retval]=$419; //@line 311 "_iomodule.c"
        __label__ = 118; break; //@line 311 "_iomodule.c"
      case 118: // $return
        var $retval120=HEAP[$retval]; //@line 311 "_iomodule.c"
        STACKTOP = __stackBase__;
        return $retval120; //@line 311 "_iomodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyNumber_AsOff_t($item, $err) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $item_addr=__stackBase__;
        var $err_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+16;
        var $result=__stackBase__+24;
        var $runerr=__stackBase__+32;
        var $value=__stackBase__+36;
        var $_alloca_point_=0;
        HEAP[$item_addr]=$item;
        HEAP[$err_addr]=$err;
        var $1=HEAP[$item_addr]; //@line 540 "_iomodule.c"
        var $2=_PyNumber_Index($1); //@line 540 "_iomodule.c"
        HEAP[$value]=$2; //@line 540 "_iomodule.c"
        var $3=HEAP[$value]; //@line 541 "_iomodule.c"
        var $4=($3)==0; //@line 541 "_iomodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 541 "_iomodule.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 542 "_iomodule.c"
        __label__ = 18; break; //@line 542 "_iomodule.c"
      case 2: // $bb1
        var $5=HEAP[$value]; //@line 544 "_iomodule.c"
        var $6=(($5+4)&4294967295); //@line 544 "_iomodule.c"
        var $7=HEAP[$6]; //@line 544 "_iomodule.c"
        var $8=(($7+84)&4294967295); //@line 544 "_iomodule.c"
        var $9=HEAP[$8]; //@line 544 "_iomodule.c"
        var $10=($9) & 8388608; //@line 544 "_iomodule.c"
        var $11=((($10))|0)!=0; //@line 544 "_iomodule.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 544 "_iomodule.c"
      case 3: // $bb2
        var $12=HEAP[$value]; //@line 546 "_iomodule.c"
        var $13=$12; //@line 546 "_iomodule.c"
        var $14=(($13+8)&4294967295); //@line 546 "_iomodule.c"
        var $15=HEAP[$14]; //@line 546 "_iomodule.c"
        var $16=((($15))|0); //@line 546 "_iomodule.c"
        HEAP[$result]=$16; //@line 546 "_iomodule.c"
        __label__ = 15; break; //@line 546 "_iomodule.c"
      case 4: // $bb3
        var $17=HEAP[$value]; //@line 551 "_iomodule.c"
        var $18=_PyLong_AsLongLong($17); //@line 551 "_iomodule.c"
        HEAP[$result]=$18; //@line 551 "_iomodule.c"
        var $19=HEAP[$result]; //@line 552 "_iomodule.c"
        var $20=reSign(($19), 64, 0)!=-1; //@line 552 "_iomodule.c"
        if ($20) { __label__ = 15; break; } else { __label__ = 5; break; } //@line 552 "_iomodule.c"
      case 5: // $bb4
        var $21=_PyErr_Occurred(); //@line 552 "_iomodule.c"
        HEAP[$runerr]=$21; //@line 552 "_iomodule.c"
        var $22=HEAP[$runerr]; //@line 552 "_iomodule.c"
        var $23=($22)==0; //@line 552 "_iomodule.c"
        if ($23) { __label__ = 15; break; } else { __label__ = 6; break; } //@line 552 "_iomodule.c"
      case 6: // $bb5
        var $24=HEAP[_PyExc_OverflowError]; //@line 556 "_iomodule.c"
        var $25=HEAP[$runerr]; //@line 556 "_iomodule.c"
        var $26=_PyErr_GivenExceptionMatches($25, $24); //@line 556 "_iomodule.c"
        var $27=((($26))|0)==0; //@line 556 "_iomodule.c"
        if ($27) { __label__ = 15; break; } else { __label__ = 7; break; } //@line 556 "_iomodule.c"
      case 7: // $bb6
        _PyErr_Clear(); //@line 559 "_iomodule.c"
        var $28=HEAP[$err_addr]; //@line 563 "_iomodule.c"
        var $29=($28)==0; //@line 563 "_iomodule.c"
        if ($29) { __label__ = 8; break; } else { __label__ = 14; break; } //@line 563 "_iomodule.c"
      case 8: // $bb7
        var $30=HEAP[$value]; //@line 564 "_iomodule.c"
        var $31=(($30+4)&4294967295); //@line 564 "_iomodule.c"
        var $32=HEAP[$31]; //@line 564 "_iomodule.c"
        var $33=(($32+84)&4294967295); //@line 564 "_iomodule.c"
        var $34=HEAP[$33]; //@line 564 "_iomodule.c"
        var $35=($34) & 16777216; //@line 564 "_iomodule.c"
        var $36=((($35))|0)==0; //@line 564 "_iomodule.c"
        if ($36) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 564 "_iomodule.c"
      case 9: // $bb8
        ___assert_fail(((__str31264)&4294967295), ((__str1233)&4294967295), 564, ((___PRETTY_FUNCTION___8811)&4294967295)); //@line 564 "_iomodule.c"
        throw "Reached an unreachable! Original .ll line: 20873"; //@line 564 "_iomodule.c"
      case 10: // $bb9
        var $37=HEAP[$value]; //@line 568 "_iomodule.c"
        var $38=__PyLong_Sign($37); //@line 568 "_iomodule.c"
        var $39=((($38))|0) < 0; //@line 568 "_iomodule.c"
        if ($39) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 568 "_iomodule.c"
      case 11: // $bb10
        HEAP[$result]=-9223372036854776000; //@line 569 "_iomodule.c"
        __label__ = 13; break; //@line 569 "_iomodule.c"
      case 12: // $bb11
        HEAP[$result]=9223372036854776000; //@line 571 "_iomodule.c"
        __label__ = 13; break; //@line 571 "_iomodule.c"
      case 13: // $bb12
        __label__ = 15; break; //@line 571 "_iomodule.c"
      case 14: // $bb13
        var $40=HEAP[$item_addr]; //@line 575 "_iomodule.c"
        var $41=(($40+4)&4294967295); //@line 575 "_iomodule.c"
        var $42=HEAP[$41]; //@line 575 "_iomodule.c"
        var $43=(($42+12)&4294967295); //@line 575 "_iomodule.c"
        var $44=HEAP[$43]; //@line 575 "_iomodule.c"
        var $45=HEAP[$err_addr]; //@line 575 "_iomodule.c"
        var $46=_PyErr_Format($45, ((__str32265)&4294967295), $44); //@line 575 "_iomodule.c"
        __label__ = 15; break; //@line 580 "_iomodule.c"
      case 15: // $finish
        var $47=HEAP[$value]; //@line 581 "_iomodule.c"
        var $48=(($47)&4294967295); //@line 581 "_iomodule.c"
        var $49=HEAP[$48]; //@line 581 "_iomodule.c"
        var $50=((($49) - 1)&4294967295); //@line 581 "_iomodule.c"
        var $51=HEAP[$value]; //@line 581 "_iomodule.c"
        var $52=(($51)&4294967295); //@line 581 "_iomodule.c"
        HEAP[$52]=$50; //@line 581 "_iomodule.c"
        var $53=HEAP[$value]; //@line 581 "_iomodule.c"
        var $54=(($53)&4294967295); //@line 581 "_iomodule.c"
        var $55=HEAP[$54]; //@line 581 "_iomodule.c"
        var $56=((($55))|0)==0; //@line 581 "_iomodule.c"
        if ($56) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 581 "_iomodule.c"
      case 16: // $bb14
        var $57=HEAP[$value]; //@line 581 "_iomodule.c"
        var $58=(($57+4)&4294967295); //@line 581 "_iomodule.c"
        var $59=HEAP[$58]; //@line 581 "_iomodule.c"
        var $60=(($59+24)&4294967295); //@line 581 "_iomodule.c"
        var $61=HEAP[$60]; //@line 581 "_iomodule.c"
        var $62=HEAP[$value]; //@line 581 "_iomodule.c"
        FUNCTION_TABLE[$61]($62); //@line 581 "_iomodule.c"
        __label__ = 17; break; //@line 581 "_iomodule.c"
      case 17: // $bb15
        var $63=HEAP[$result]; //@line 582 "_iomodule.c"
        HEAP[$0]=$63; //@line 582 "_iomodule.c"
        __label__ = 18; break; //@line 582 "_iomodule.c"
      case 18: // $bb16
        var $64=HEAP[$0]; //@line 542 "_iomodule.c"
        HEAP[$retval]=$64; //@line 542 "_iomodule.c"
        __label__ = 19; break; //@line 542 "_iomodule.c"
      case 19: // $return
        var $retval17=HEAP[$retval]; //@line 542 "_iomodule.c"
        STACKTOP = __stackBase__;
        return $retval17; //@line 542 "_iomodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __PyIO_ConvertSsize_t($obj, $result) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $obj_addr=__stackBase__;
        var $result_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $limit=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$obj_addr]=$obj;
        HEAP[$result_addr]=$result;
        var $1=HEAP[$obj_addr]; //@line 590 "_iomodule.c"
        var $2=($1)==(__Py_NoneStruct); //@line 590 "_iomodule.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 590 "_iomodule.c"
      case 1: // $bb
        HEAP[$limit]=-1; //@line 591 "_iomodule.c"
        __label__ = 8; break; //@line 591 "_iomodule.c"
      case 2: // $bb1
        var $3=HEAP[$obj_addr]; //@line 593 "_iomodule.c"
        var $4=_PyNumber_Check($3); //@line 593 "_iomodule.c"
        var $5=((($4))|0)!=0; //@line 593 "_iomodule.c"
        if ($5) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 593 "_iomodule.c"
      case 3: // $bb2
        var $6=HEAP[_PyExc_OverflowError]; //@line 594 "_iomodule.c"
        var $7=HEAP[$obj_addr]; //@line 594 "_iomodule.c"
        var $8=_PyNumber_AsSsize_t($7, $6); //@line 594 "_iomodule.c"
        HEAP[$limit]=$8; //@line 594 "_iomodule.c"
        var $9=HEAP[$limit]; //@line 595 "_iomodule.c"
        var $10=((($9))|0)==-1; //@line 595 "_iomodule.c"
        if ($10) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 595 "_iomodule.c"
      case 4: // $bb3
        var $11=_PyErr_Occurred(); //@line 595 "_iomodule.c"
        var $12=($11)!=0; //@line 595 "_iomodule.c"
        if ($12) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 595 "_iomodule.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 596 "_iomodule.c"
        __label__ = 9; break; //@line 596 "_iomodule.c"
      case 6: // $bb5
        __label__ = 8; break; //@line 596 "_iomodule.c"
      case 7: // $bb6
        var $13=HEAP[$obj_addr]; //@line 599 "_iomodule.c"
        var $14=(($13+4)&4294967295); //@line 599 "_iomodule.c"
        var $15=HEAP[$14]; //@line 599 "_iomodule.c"
        var $16=(($15+12)&4294967295); //@line 599 "_iomodule.c"
        var $17=HEAP[$16]; //@line 599 "_iomodule.c"
        var $18=HEAP[_PyExc_TypeError]; //@line 599 "_iomodule.c"
        var $19=_PyErr_Format($18, ((__str33266)&4294967295), $17); //@line 599 "_iomodule.c"
        HEAP[$0]=0; //@line 602 "_iomodule.c"
        __label__ = 9; break; //@line 602 "_iomodule.c"
      case 8: // $bb7
        var $20=HEAP[$result_addr]; //@line 604 "_iomodule.c"
        var $21=$20; //@line 604 "_iomodule.c"
        var $22=HEAP[$limit]; //@line 604 "_iomodule.c"
        HEAP[$21]=$22; //@line 604 "_iomodule.c"
        HEAP[$0]=1; //@line 605 "_iomodule.c"
        __label__ = 9; break; //@line 605 "_iomodule.c"
      case 9: // $bb8
        var $23=HEAP[$0]; //@line 596 "_iomodule.c"
        HEAP[$retval]=$23; //@line 596 "_iomodule.c"
        __label__ = 10; break; //@line 596 "_iomodule.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 596 "_iomodule.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 596 "_iomodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _init_io() {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $m=__stackBase__;
        var $_py_tmp=__stackBase__+4;
        var $_py_tmp105=__stackBase__+8;
        var $_alloca_point_=0;
        var $0=_Py_InitModule4(((__str35269)&4294967295), ((_module_methods)&4294967295), ((_module_doc)&4294967295), 0, 1013); //@line 626 "_iomodule.c"
        HEAP[$m]=$0; //@line 626 "_iomodule.c"
        var $1=HEAP[$m]; //@line 627 "_iomodule.c"
        var $2=($1)==0; //@line 627 "_iomodule.c"
        if ($2) { __label__ = 110; break; } else { __label__ = 1; break; } //@line 627 "_iomodule.c"
      case 1: // $bb
        var $3=_PyImport_ImportModule(((__str36270)&4294967295)); //@line 631 "_iomodule.c"
        HEAP[__PyIO_os_module]=$3; //@line 631 "_iomodule.c"
        var $4=HEAP[__PyIO_os_module]; //@line 632 "_iomodule.c"
        var $5=($4)==0; //@line 632 "_iomodule.c"
        if ($5) { __label__ = 102; break; } else { __label__ = 2; break; } //@line 632 "_iomodule.c"
      case 2: // $bb1
        var $6=HEAP[$m]; //@line 645 "_iomodule.c"
        var $7=_PyModule_AddIntConstant($6, ((__str37271)&4294967295), 8192); //@line 645 "_iomodule.c"
        var $8=((($7))|0) < 0; //@line 645 "_iomodule.c"
        if ($8) { __label__ = 102; break; } else { __label__ = 3; break; } //@line 645 "_iomodule.c"
      case 3: // $bb2
        var $9=HEAP[_PyExc_IOError]; //@line 649 "_iomodule.c"
        var $10=HEAP[_PyExc_ValueError]; //@line 649 "_iomodule.c"
        var $11=__PyObject_CallFunction_SizeT(_PyType_Type, ((__str38272)&4294967295), ((__str39273)&4294967295), $10, $9); //@line 649 "_iomodule.c"
        HEAP[__PyIO_unsupported_operation]=$11; //@line 649 "_iomodule.c"
        var $12=HEAP[__PyIO_unsupported_operation]; //@line 652 "_iomodule.c"
        var $13=($12)==0; //@line 652 "_iomodule.c"
        if ($13) { __label__ = 102; break; } else { __label__ = 4; break; } //@line 652 "_iomodule.c"
      case 4: // $bb3
        var $14=HEAP[__PyIO_unsupported_operation]; //@line 654 "_iomodule.c"
        var $15=(($14)&4294967295); //@line 654 "_iomodule.c"
        var $16=HEAP[$15]; //@line 654 "_iomodule.c"
        var $17=((($16) + 1)&4294967295); //@line 654 "_iomodule.c"
        var $18=(($14)&4294967295); //@line 654 "_iomodule.c"
        HEAP[$18]=$17; //@line 654 "_iomodule.c"
        var $19=HEAP[__PyIO_unsupported_operation]; //@line 655 "_iomodule.c"
        var $20=HEAP[$m]; //@line 655 "_iomodule.c"
        var $21=_PyModule_AddObject($20, ((__str39273)&4294967295), $19); //@line 655 "_iomodule.c"
        var $22=((($21))|0) < 0; //@line 655 "_iomodule.c"
        if ($22) { __label__ = 102; break; } else { __label__ = 5; break; } //@line 655 "_iomodule.c"
      case 5: // $bb4
        var $23=HEAP[_PyExc_IOError]; //@line 660 "_iomodule.c"
        var $24=$23; //@line 660 "_iomodule.c"
        HEAP[((__PyExc_BlockingIOError+128)&4294967295)]=$24; //@line 660 "_iomodule.c"
        var $25=_PyType_Ready(__PyExc_BlockingIOError); //@line 661 "_iomodule.c"
        var $26=((($25))|0) < 0; //@line 661 "_iomodule.c"
        if ($26) { __label__ = 102; break; } else { __label__ = 6; break; } //@line 661 "_iomodule.c"
      case 6: // $bb5
        var $27=((__PyExc_BlockingIOError)&4294967295); //@line 661 "_iomodule.c"
        var $28=HEAP[$27]; //@line 661 "_iomodule.c"
        var $29=((($28) + 1)&4294967295); //@line 661 "_iomodule.c"
        var $30=((__PyExc_BlockingIOError)&4294967295); //@line 661 "_iomodule.c"
        HEAP[$30]=$29; //@line 661 "_iomodule.c"
        var $31=HEAP[$m]; //@line 661 "_iomodule.c"
        var $32=_PyModule_AddObject($31, ((__str4236)&4294967295), __PyExc_BlockingIOError); //@line 661 "_iomodule.c"
        var $33=((($32))|0) < 0; //@line 661 "_iomodule.c"
        if ($33) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 661 "_iomodule.c"
      case 7: // $bb6
        var $34=((__PyExc_BlockingIOError)&4294967295); //@line 661 "_iomodule.c"
        var $35=HEAP[$34]; //@line 661 "_iomodule.c"
        var $36=((($35) - 1)&4294967295); //@line 661 "_iomodule.c"
        var $37=((__PyExc_BlockingIOError)&4294967295); //@line 661 "_iomodule.c"
        HEAP[$37]=$36; //@line 661 "_iomodule.c"
        var $38=((__PyExc_BlockingIOError)&4294967295); //@line 661 "_iomodule.c"
        var $39=HEAP[$38]; //@line 661 "_iomodule.c"
        var $40=((($39))|0)==0; //@line 661 "_iomodule.c"
        if ($40) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 661 "_iomodule.c"
      case 8: // $bb7
        var $41=((__PyExc_BlockingIOError+4)&4294967295); //@line 661 "_iomodule.c"
        var $42=HEAP[$41]; //@line 661 "_iomodule.c"
        var $43=(($42+24)&4294967295); //@line 661 "_iomodule.c"
        var $44=HEAP[$43]; //@line 661 "_iomodule.c"
        FUNCTION_TABLE[$44](__PyExc_BlockingIOError); //@line 661 "_iomodule.c"
        __label__ = 9; break; //@line 661 "_iomodule.c"
      case 9: // $bb8
        __label__ = 102; break; //@line 661 "_iomodule.c"
      case 10: // $bb9
        var $45=_PyType_Ready(_PyIOBase_Type); //@line 666 "_iomodule.c"
        var $46=((($45))|0) < 0; //@line 666 "_iomodule.c"
        if ($46) { __label__ = 102; break; } else { __label__ = 11; break; } //@line 666 "_iomodule.c"
      case 11: // $bb10
        var $47=((_PyIOBase_Type)&4294967295); //@line 666 "_iomodule.c"
        var $48=HEAP[$47]; //@line 666 "_iomodule.c"
        var $49=((($48) + 1)&4294967295); //@line 666 "_iomodule.c"
        var $50=((_PyIOBase_Type)&4294967295); //@line 666 "_iomodule.c"
        HEAP[$50]=$49; //@line 666 "_iomodule.c"
        var $51=HEAP[$m]; //@line 666 "_iomodule.c"
        var $52=_PyModule_AddObject($51, ((__str40274)&4294967295), _PyIOBase_Type); //@line 666 "_iomodule.c"
        var $53=((($52))|0) < 0; //@line 666 "_iomodule.c"
        if ($53) { __label__ = 12; break; } else { __label__ = 15; break; } //@line 666 "_iomodule.c"
      case 12: // $bb11
        var $54=((_PyIOBase_Type)&4294967295); //@line 666 "_iomodule.c"
        var $55=HEAP[$54]; //@line 666 "_iomodule.c"
        var $56=((($55) - 1)&4294967295); //@line 666 "_iomodule.c"
        var $57=((_PyIOBase_Type)&4294967295); //@line 666 "_iomodule.c"
        HEAP[$57]=$56; //@line 666 "_iomodule.c"
        var $58=((_PyIOBase_Type)&4294967295); //@line 666 "_iomodule.c"
        var $59=HEAP[$58]; //@line 666 "_iomodule.c"
        var $60=((($59))|0)==0; //@line 666 "_iomodule.c"
        if ($60) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 666 "_iomodule.c"
      case 13: // $bb12
        var $61=((_PyIOBase_Type+4)&4294967295); //@line 666 "_iomodule.c"
        var $62=HEAP[$61]; //@line 666 "_iomodule.c"
        var $63=(($62+24)&4294967295); //@line 666 "_iomodule.c"
        var $64=HEAP[$63]; //@line 666 "_iomodule.c"
        FUNCTION_TABLE[$64](_PyIOBase_Type); //@line 666 "_iomodule.c"
        __label__ = 14; break; //@line 666 "_iomodule.c"
      case 14: // $bb13
        __label__ = 102; break; //@line 666 "_iomodule.c"
      case 15: // $bb14
        var $65=_PyType_Ready(_PyRawIOBase_Type); //@line 667 "_iomodule.c"
        var $66=((($65))|0) < 0; //@line 667 "_iomodule.c"
        if ($66) { __label__ = 102; break; } else { __label__ = 16; break; } //@line 667 "_iomodule.c"
      case 16: // $bb15
        var $67=((_PyRawIOBase_Type)&4294967295); //@line 667 "_iomodule.c"
        var $68=HEAP[$67]; //@line 667 "_iomodule.c"
        var $69=((($68) + 1)&4294967295); //@line 667 "_iomodule.c"
        var $70=((_PyRawIOBase_Type)&4294967295); //@line 667 "_iomodule.c"
        HEAP[$70]=$69; //@line 667 "_iomodule.c"
        var $71=HEAP[$m]; //@line 667 "_iomodule.c"
        var $72=_PyModule_AddObject($71, ((__str41275)&4294967295), _PyRawIOBase_Type); //@line 667 "_iomodule.c"
        var $73=((($72))|0) < 0; //@line 667 "_iomodule.c"
        if ($73) { __label__ = 17; break; } else { __label__ = 20; break; } //@line 667 "_iomodule.c"
      case 17: // $bb16
        var $74=((_PyRawIOBase_Type)&4294967295); //@line 667 "_iomodule.c"
        var $75=HEAP[$74]; //@line 667 "_iomodule.c"
        var $76=((($75) - 1)&4294967295); //@line 667 "_iomodule.c"
        var $77=((_PyRawIOBase_Type)&4294967295); //@line 667 "_iomodule.c"
        HEAP[$77]=$76; //@line 667 "_iomodule.c"
        var $78=((_PyRawIOBase_Type)&4294967295); //@line 667 "_iomodule.c"
        var $79=HEAP[$78]; //@line 667 "_iomodule.c"
        var $80=((($79))|0)==0; //@line 667 "_iomodule.c"
        if ($80) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 667 "_iomodule.c"
      case 18: // $bb17
        var $81=((_PyRawIOBase_Type+4)&4294967295); //@line 667 "_iomodule.c"
        var $82=HEAP[$81]; //@line 667 "_iomodule.c"
        var $83=(($82+24)&4294967295); //@line 667 "_iomodule.c"
        var $84=HEAP[$83]; //@line 667 "_iomodule.c"
        FUNCTION_TABLE[$84](_PyRawIOBase_Type); //@line 667 "_iomodule.c"
        __label__ = 19; break; //@line 667 "_iomodule.c"
      case 19: // $bb18
        __label__ = 102; break; //@line 667 "_iomodule.c"
      case 20: // $bb19
        var $85=_PyType_Ready(_PyBufferedIOBase_Type); //@line 668 "_iomodule.c"
        var $86=((($85))|0) < 0; //@line 668 "_iomodule.c"
        if ($86) { __label__ = 102; break; } else { __label__ = 21; break; } //@line 668 "_iomodule.c"
      case 21: // $bb20
        var $87=((_PyBufferedIOBase_Type)&4294967295); //@line 668 "_iomodule.c"
        var $88=HEAP[$87]; //@line 668 "_iomodule.c"
        var $89=((($88) + 1)&4294967295); //@line 668 "_iomodule.c"
        var $90=((_PyBufferedIOBase_Type)&4294967295); //@line 668 "_iomodule.c"
        HEAP[$90]=$89; //@line 668 "_iomodule.c"
        var $91=HEAP[$m]; //@line 668 "_iomodule.c"
        var $92=_PyModule_AddObject($91, ((__str42276)&4294967295), _PyBufferedIOBase_Type); //@line 668 "_iomodule.c"
        var $93=((($92))|0) < 0; //@line 668 "_iomodule.c"
        if ($93) { __label__ = 22; break; } else { __label__ = 25; break; } //@line 668 "_iomodule.c"
      case 22: // $bb21
        var $94=((_PyBufferedIOBase_Type)&4294967295); //@line 668 "_iomodule.c"
        var $95=HEAP[$94]; //@line 668 "_iomodule.c"
        var $96=((($95) - 1)&4294967295); //@line 668 "_iomodule.c"
        var $97=((_PyBufferedIOBase_Type)&4294967295); //@line 668 "_iomodule.c"
        HEAP[$97]=$96; //@line 668 "_iomodule.c"
        var $98=((_PyBufferedIOBase_Type)&4294967295); //@line 668 "_iomodule.c"
        var $99=HEAP[$98]; //@line 668 "_iomodule.c"
        var $100=((($99))|0)==0; //@line 668 "_iomodule.c"
        if ($100) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 668 "_iomodule.c"
      case 23: // $bb22
        var $101=((_PyBufferedIOBase_Type+4)&4294967295); //@line 668 "_iomodule.c"
        var $102=HEAP[$101]; //@line 668 "_iomodule.c"
        var $103=(($102+24)&4294967295); //@line 668 "_iomodule.c"
        var $104=HEAP[$103]; //@line 668 "_iomodule.c"
        FUNCTION_TABLE[$104](_PyBufferedIOBase_Type); //@line 668 "_iomodule.c"
        __label__ = 24; break; //@line 668 "_iomodule.c"
      case 24: // $bb23
        __label__ = 102; break; //@line 668 "_iomodule.c"
      case 25: // $bb24
        var $105=_PyType_Ready(_PyTextIOBase_Type); //@line 669 "_iomodule.c"
        var $106=((($105))|0) < 0; //@line 669 "_iomodule.c"
        if ($106) { __label__ = 102; break; } else { __label__ = 26; break; } //@line 669 "_iomodule.c"
      case 26: // $bb25
        var $107=((_PyTextIOBase_Type)&4294967295); //@line 669 "_iomodule.c"
        var $108=HEAP[$107]; //@line 669 "_iomodule.c"
        var $109=((($108) + 1)&4294967295); //@line 669 "_iomodule.c"
        var $110=((_PyTextIOBase_Type)&4294967295); //@line 669 "_iomodule.c"
        HEAP[$110]=$109; //@line 669 "_iomodule.c"
        var $111=HEAP[$m]; //@line 669 "_iomodule.c"
        var $112=_PyModule_AddObject($111, ((__str43277)&4294967295), _PyTextIOBase_Type); //@line 669 "_iomodule.c"
        var $113=((($112))|0) < 0; //@line 669 "_iomodule.c"
        if ($113) { __label__ = 27; break; } else { __label__ = 30; break; } //@line 669 "_iomodule.c"
      case 27: // $bb26
        var $114=((_PyTextIOBase_Type)&4294967295); //@line 669 "_iomodule.c"
        var $115=HEAP[$114]; //@line 669 "_iomodule.c"
        var $116=((($115) - 1)&4294967295); //@line 669 "_iomodule.c"
        var $117=((_PyTextIOBase_Type)&4294967295); //@line 669 "_iomodule.c"
        HEAP[$117]=$116; //@line 669 "_iomodule.c"
        var $118=((_PyTextIOBase_Type)&4294967295); //@line 669 "_iomodule.c"
        var $119=HEAP[$118]; //@line 669 "_iomodule.c"
        var $120=((($119))|0)==0; //@line 669 "_iomodule.c"
        if ($120) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 669 "_iomodule.c"
      case 28: // $bb27
        var $121=((_PyTextIOBase_Type+4)&4294967295); //@line 669 "_iomodule.c"
        var $122=HEAP[$121]; //@line 669 "_iomodule.c"
        var $123=(($122+24)&4294967295); //@line 669 "_iomodule.c"
        var $124=HEAP[$123]; //@line 669 "_iomodule.c"
        FUNCTION_TABLE[$124](_PyTextIOBase_Type); //@line 669 "_iomodule.c"
        __label__ = 29; break; //@line 669 "_iomodule.c"
      case 29: // $bb28
        __label__ = 102; break; //@line 669 "_iomodule.c"
      case 30: // $bb29
        HEAP[((_PyFileIO_Type+128)&4294967295)]=_PyRawIOBase_Type; //@line 673 "_iomodule.c"
        var $125=_PyType_Ready(_PyFileIO_Type); //@line 674 "_iomodule.c"
        var $126=((($125))|0) < 0; //@line 674 "_iomodule.c"
        if ($126) { __label__ = 102; break; } else { __label__ = 31; break; } //@line 674 "_iomodule.c"
      case 31: // $bb30
        var $127=((_PyFileIO_Type)&4294967295); //@line 674 "_iomodule.c"
        var $128=HEAP[$127]; //@line 674 "_iomodule.c"
        var $129=((($128) + 1)&4294967295); //@line 674 "_iomodule.c"
        var $130=((_PyFileIO_Type)&4294967295); //@line 674 "_iomodule.c"
        HEAP[$130]=$129; //@line 674 "_iomodule.c"
        var $131=HEAP[$m]; //@line 674 "_iomodule.c"
        var $132=_PyModule_AddObject($131, ((__str44278)&4294967295), _PyFileIO_Type); //@line 674 "_iomodule.c"
        var $133=((($132))|0) < 0; //@line 674 "_iomodule.c"
        if ($133) { __label__ = 32; break; } else { __label__ = 35; break; } //@line 674 "_iomodule.c"
      case 32: // $bb31
        var $134=((_PyFileIO_Type)&4294967295); //@line 674 "_iomodule.c"
        var $135=HEAP[$134]; //@line 674 "_iomodule.c"
        var $136=((($135) - 1)&4294967295); //@line 674 "_iomodule.c"
        var $137=((_PyFileIO_Type)&4294967295); //@line 674 "_iomodule.c"
        HEAP[$137]=$136; //@line 674 "_iomodule.c"
        var $138=((_PyFileIO_Type)&4294967295); //@line 674 "_iomodule.c"
        var $139=HEAP[$138]; //@line 674 "_iomodule.c"
        var $140=((($139))|0)==0; //@line 674 "_iomodule.c"
        if ($140) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 674 "_iomodule.c"
      case 33: // $bb32
        var $141=((_PyFileIO_Type+4)&4294967295); //@line 674 "_iomodule.c"
        var $142=HEAP[$141]; //@line 674 "_iomodule.c"
        var $143=(($142+24)&4294967295); //@line 674 "_iomodule.c"
        var $144=HEAP[$143]; //@line 674 "_iomodule.c"
        FUNCTION_TABLE[$144](_PyFileIO_Type); //@line 674 "_iomodule.c"
        __label__ = 34; break; //@line 674 "_iomodule.c"
      case 34: // $bb33
        __label__ = 102; break; //@line 674 "_iomodule.c"
      case 35: // $bb34
        HEAP[((_PyBytesIO_Type+128)&4294967295)]=_PyBufferedIOBase_Type; //@line 677 "_iomodule.c"
        var $145=_PyType_Ready(_PyBytesIO_Type); //@line 678 "_iomodule.c"
        var $146=((($145))|0) < 0; //@line 678 "_iomodule.c"
        if ($146) { __label__ = 102; break; } else { __label__ = 36; break; } //@line 678 "_iomodule.c"
      case 36: // $bb35
        var $147=((_PyBytesIO_Type)&4294967295); //@line 678 "_iomodule.c"
        var $148=HEAP[$147]; //@line 678 "_iomodule.c"
        var $149=((($148) + 1)&4294967295); //@line 678 "_iomodule.c"
        var $150=((_PyBytesIO_Type)&4294967295); //@line 678 "_iomodule.c"
        HEAP[$150]=$149; //@line 678 "_iomodule.c"
        var $151=HEAP[$m]; //@line 678 "_iomodule.c"
        var $152=_PyModule_AddObject($151, ((__str45279)&4294967295), _PyBytesIO_Type); //@line 678 "_iomodule.c"
        var $153=((($152))|0) < 0; //@line 678 "_iomodule.c"
        if ($153) { __label__ = 37; break; } else { __label__ = 40; break; } //@line 678 "_iomodule.c"
      case 37: // $bb36
        var $154=((_PyBytesIO_Type)&4294967295); //@line 678 "_iomodule.c"
        var $155=HEAP[$154]; //@line 678 "_iomodule.c"
        var $156=((($155) - 1)&4294967295); //@line 678 "_iomodule.c"
        var $157=((_PyBytesIO_Type)&4294967295); //@line 678 "_iomodule.c"
        HEAP[$157]=$156; //@line 678 "_iomodule.c"
        var $158=((_PyBytesIO_Type)&4294967295); //@line 678 "_iomodule.c"
        var $159=HEAP[$158]; //@line 678 "_iomodule.c"
        var $160=((($159))|0)==0; //@line 678 "_iomodule.c"
        if ($160) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 678 "_iomodule.c"
      case 38: // $bb37
        var $161=((_PyBytesIO_Type+4)&4294967295); //@line 678 "_iomodule.c"
        var $162=HEAP[$161]; //@line 678 "_iomodule.c"
        var $163=(($162+24)&4294967295); //@line 678 "_iomodule.c"
        var $164=HEAP[$163]; //@line 678 "_iomodule.c"
        FUNCTION_TABLE[$164](_PyBytesIO_Type); //@line 678 "_iomodule.c"
        __label__ = 39; break; //@line 678 "_iomodule.c"
      case 39: // $bb38
        __label__ = 102; break; //@line 678 "_iomodule.c"
      case 40: // $bb39
        HEAP[((_PyStringIO_Type+128)&4294967295)]=_PyTextIOBase_Type; //@line 681 "_iomodule.c"
        var $165=_PyType_Ready(_PyStringIO_Type); //@line 682 "_iomodule.c"
        var $166=((($165))|0) < 0; //@line 682 "_iomodule.c"
        if ($166) { __label__ = 102; break; } else { __label__ = 41; break; } //@line 682 "_iomodule.c"
      case 41: // $bb40
        var $167=((_PyStringIO_Type)&4294967295); //@line 682 "_iomodule.c"
        var $168=HEAP[$167]; //@line 682 "_iomodule.c"
        var $169=((($168) + 1)&4294967295); //@line 682 "_iomodule.c"
        var $170=((_PyStringIO_Type)&4294967295); //@line 682 "_iomodule.c"
        HEAP[$170]=$169; //@line 682 "_iomodule.c"
        var $171=HEAP[$m]; //@line 682 "_iomodule.c"
        var $172=_PyModule_AddObject($171, ((__str46280)&4294967295), _PyStringIO_Type); //@line 682 "_iomodule.c"
        var $173=((($172))|0) < 0; //@line 682 "_iomodule.c"
        if ($173) { __label__ = 42; break; } else { __label__ = 45; break; } //@line 682 "_iomodule.c"
      case 42: // $bb41
        var $174=((_PyStringIO_Type)&4294967295); //@line 682 "_iomodule.c"
        var $175=HEAP[$174]; //@line 682 "_iomodule.c"
        var $176=((($175) - 1)&4294967295); //@line 682 "_iomodule.c"
        var $177=((_PyStringIO_Type)&4294967295); //@line 682 "_iomodule.c"
        HEAP[$177]=$176; //@line 682 "_iomodule.c"
        var $178=((_PyStringIO_Type)&4294967295); //@line 682 "_iomodule.c"
        var $179=HEAP[$178]; //@line 682 "_iomodule.c"
        var $180=((($179))|0)==0; //@line 682 "_iomodule.c"
        if ($180) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 682 "_iomodule.c"
      case 43: // $bb42
        var $181=((_PyStringIO_Type+4)&4294967295); //@line 682 "_iomodule.c"
        var $182=HEAP[$181]; //@line 682 "_iomodule.c"
        var $183=(($182+24)&4294967295); //@line 682 "_iomodule.c"
        var $184=HEAP[$183]; //@line 682 "_iomodule.c"
        FUNCTION_TABLE[$184](_PyStringIO_Type); //@line 682 "_iomodule.c"
        __label__ = 44; break; //@line 682 "_iomodule.c"
      case 44: // $bb43
        __label__ = 102; break; //@line 682 "_iomodule.c"
      case 45: // $bb44
        HEAP[((_PyBufferedReader_Type+128)&4294967295)]=_PyBufferedIOBase_Type; //@line 685 "_iomodule.c"
        var $185=_PyType_Ready(_PyBufferedReader_Type); //@line 686 "_iomodule.c"
        var $186=((($185))|0) < 0; //@line 686 "_iomodule.c"
        if ($186) { __label__ = 102; break; } else { __label__ = 46; break; } //@line 686 "_iomodule.c"
      case 46: // $bb45
        var $187=((_PyBufferedReader_Type)&4294967295); //@line 686 "_iomodule.c"
        var $188=HEAP[$187]; //@line 686 "_iomodule.c"
        var $189=((($188) + 1)&4294967295); //@line 686 "_iomodule.c"
        var $190=((_PyBufferedReader_Type)&4294967295); //@line 686 "_iomodule.c"
        HEAP[$190]=$189; //@line 686 "_iomodule.c"
        var $191=HEAP[$m]; //@line 686 "_iomodule.c"
        var $192=_PyModule_AddObject($191, ((__str47281)&4294967295), _PyBufferedReader_Type); //@line 686 "_iomodule.c"
        var $193=((($192))|0) < 0; //@line 686 "_iomodule.c"
        if ($193) { __label__ = 47; break; } else { __label__ = 50; break; } //@line 686 "_iomodule.c"
      case 47: // $bb46
        var $194=((_PyBufferedReader_Type)&4294967295); //@line 686 "_iomodule.c"
        var $195=HEAP[$194]; //@line 686 "_iomodule.c"
        var $196=((($195) - 1)&4294967295); //@line 686 "_iomodule.c"
        var $197=((_PyBufferedReader_Type)&4294967295); //@line 686 "_iomodule.c"
        HEAP[$197]=$196; //@line 686 "_iomodule.c"
        var $198=((_PyBufferedReader_Type)&4294967295); //@line 686 "_iomodule.c"
        var $199=HEAP[$198]; //@line 686 "_iomodule.c"
        var $200=((($199))|0)==0; //@line 686 "_iomodule.c"
        if ($200) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 686 "_iomodule.c"
      case 48: // $bb47
        var $201=((_PyBufferedReader_Type+4)&4294967295); //@line 686 "_iomodule.c"
        var $202=HEAP[$201]; //@line 686 "_iomodule.c"
        var $203=(($202+24)&4294967295); //@line 686 "_iomodule.c"
        var $204=HEAP[$203]; //@line 686 "_iomodule.c"
        FUNCTION_TABLE[$204](_PyBufferedReader_Type); //@line 686 "_iomodule.c"
        __label__ = 49; break; //@line 686 "_iomodule.c"
      case 49: // $bb48
        __label__ = 102; break; //@line 686 "_iomodule.c"
      case 50: // $bb49
        HEAP[((_PyBufferedWriter_Type+128)&4294967295)]=_PyBufferedIOBase_Type; //@line 689 "_iomodule.c"
        var $205=_PyType_Ready(_PyBufferedWriter_Type); //@line 690 "_iomodule.c"
        var $206=((($205))|0) < 0; //@line 690 "_iomodule.c"
        if ($206) { __label__ = 102; break; } else { __label__ = 51; break; } //@line 690 "_iomodule.c"
      case 51: // $bb50
        var $207=((_PyBufferedWriter_Type)&4294967295); //@line 690 "_iomodule.c"
        var $208=HEAP[$207]; //@line 690 "_iomodule.c"
        var $209=((($208) + 1)&4294967295); //@line 690 "_iomodule.c"
        var $210=((_PyBufferedWriter_Type)&4294967295); //@line 690 "_iomodule.c"
        HEAP[$210]=$209; //@line 690 "_iomodule.c"
        var $211=HEAP[$m]; //@line 690 "_iomodule.c"
        var $212=_PyModule_AddObject($211, ((__str48282)&4294967295), _PyBufferedWriter_Type); //@line 690 "_iomodule.c"
        var $213=((($212))|0) < 0; //@line 690 "_iomodule.c"
        if ($213) { __label__ = 52; break; } else { __label__ = 55; break; } //@line 690 "_iomodule.c"
      case 52: // $bb51
        var $214=((_PyBufferedWriter_Type)&4294967295); //@line 690 "_iomodule.c"
        var $215=HEAP[$214]; //@line 690 "_iomodule.c"
        var $216=((($215) - 1)&4294967295); //@line 690 "_iomodule.c"
        var $217=((_PyBufferedWriter_Type)&4294967295); //@line 690 "_iomodule.c"
        HEAP[$217]=$216; //@line 690 "_iomodule.c"
        var $218=((_PyBufferedWriter_Type)&4294967295); //@line 690 "_iomodule.c"
        var $219=HEAP[$218]; //@line 690 "_iomodule.c"
        var $220=((($219))|0)==0; //@line 690 "_iomodule.c"
        if ($220) { __label__ = 53; break; } else { __label__ = 54; break; } //@line 690 "_iomodule.c"
      case 53: // $bb52
        var $221=((_PyBufferedWriter_Type+4)&4294967295); //@line 690 "_iomodule.c"
        var $222=HEAP[$221]; //@line 690 "_iomodule.c"
        var $223=(($222+24)&4294967295); //@line 690 "_iomodule.c"
        var $224=HEAP[$223]; //@line 690 "_iomodule.c"
        FUNCTION_TABLE[$224](_PyBufferedWriter_Type); //@line 690 "_iomodule.c"
        __label__ = 54; break; //@line 690 "_iomodule.c"
      case 54: // $bb53
        __label__ = 102; break; //@line 690 "_iomodule.c"
      case 55: // $bb54
        HEAP[((_PyBufferedRWPair_Type+128)&4294967295)]=_PyBufferedIOBase_Type; //@line 693 "_iomodule.c"
        var $225=_PyType_Ready(_PyBufferedRWPair_Type); //@line 694 "_iomodule.c"
        var $226=((($225))|0) < 0; //@line 694 "_iomodule.c"
        if ($226) { __label__ = 102; break; } else { __label__ = 56; break; } //@line 694 "_iomodule.c"
      case 56: // $bb55
        var $227=((_PyBufferedRWPair_Type)&4294967295); //@line 694 "_iomodule.c"
        var $228=HEAP[$227]; //@line 694 "_iomodule.c"
        var $229=((($228) + 1)&4294967295); //@line 694 "_iomodule.c"
        var $230=((_PyBufferedRWPair_Type)&4294967295); //@line 694 "_iomodule.c"
        HEAP[$230]=$229; //@line 694 "_iomodule.c"
        var $231=HEAP[$m]; //@line 694 "_iomodule.c"
        var $232=_PyModule_AddObject($231, ((__str49283)&4294967295), _PyBufferedRWPair_Type); //@line 694 "_iomodule.c"
        var $233=((($232))|0) < 0; //@line 694 "_iomodule.c"
        if ($233) { __label__ = 57; break; } else { __label__ = 60; break; } //@line 694 "_iomodule.c"
      case 57: // $bb56
        var $234=((_PyBufferedRWPair_Type)&4294967295); //@line 694 "_iomodule.c"
        var $235=HEAP[$234]; //@line 694 "_iomodule.c"
        var $236=((($235) - 1)&4294967295); //@line 694 "_iomodule.c"
        var $237=((_PyBufferedRWPair_Type)&4294967295); //@line 694 "_iomodule.c"
        HEAP[$237]=$236; //@line 694 "_iomodule.c"
        var $238=((_PyBufferedRWPair_Type)&4294967295); //@line 694 "_iomodule.c"
        var $239=HEAP[$238]; //@line 694 "_iomodule.c"
        var $240=((($239))|0)==0; //@line 694 "_iomodule.c"
        if ($240) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 694 "_iomodule.c"
      case 58: // $bb57
        var $241=((_PyBufferedRWPair_Type+4)&4294967295); //@line 694 "_iomodule.c"
        var $242=HEAP[$241]; //@line 694 "_iomodule.c"
        var $243=(($242+24)&4294967295); //@line 694 "_iomodule.c"
        var $244=HEAP[$243]; //@line 694 "_iomodule.c"
        FUNCTION_TABLE[$244](_PyBufferedRWPair_Type); //@line 694 "_iomodule.c"
        __label__ = 59; break; //@line 694 "_iomodule.c"
      case 59: // $bb58
        __label__ = 102; break; //@line 694 "_iomodule.c"
      case 60: // $bb59
        HEAP[((_PyBufferedRandom_Type+128)&4294967295)]=_PyBufferedIOBase_Type; //@line 697 "_iomodule.c"
        var $245=_PyType_Ready(_PyBufferedRandom_Type); //@line 698 "_iomodule.c"
        var $246=((($245))|0) < 0; //@line 698 "_iomodule.c"
        if ($246) { __label__ = 102; break; } else { __label__ = 61; break; } //@line 698 "_iomodule.c"
      case 61: // $bb60
        var $247=((_PyBufferedRandom_Type)&4294967295); //@line 698 "_iomodule.c"
        var $248=HEAP[$247]; //@line 698 "_iomodule.c"
        var $249=((($248) + 1)&4294967295); //@line 698 "_iomodule.c"
        var $250=((_PyBufferedRandom_Type)&4294967295); //@line 698 "_iomodule.c"
        HEAP[$250]=$249; //@line 698 "_iomodule.c"
        var $251=HEAP[$m]; //@line 698 "_iomodule.c"
        var $252=_PyModule_AddObject($251, ((__str50284)&4294967295), _PyBufferedRandom_Type); //@line 698 "_iomodule.c"
        var $253=((($252))|0) < 0; //@line 698 "_iomodule.c"
        if ($253) { __label__ = 62; break; } else { __label__ = 65; break; } //@line 698 "_iomodule.c"
      case 62: // $bb61
        var $254=((_PyBufferedRandom_Type)&4294967295); //@line 698 "_iomodule.c"
        var $255=HEAP[$254]; //@line 698 "_iomodule.c"
        var $256=((($255) - 1)&4294967295); //@line 698 "_iomodule.c"
        var $257=((_PyBufferedRandom_Type)&4294967295); //@line 698 "_iomodule.c"
        HEAP[$257]=$256; //@line 698 "_iomodule.c"
        var $258=((_PyBufferedRandom_Type)&4294967295); //@line 698 "_iomodule.c"
        var $259=HEAP[$258]; //@line 698 "_iomodule.c"
        var $260=((($259))|0)==0; //@line 698 "_iomodule.c"
        if ($260) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 698 "_iomodule.c"
      case 63: // $bb62
        var $261=((_PyBufferedRandom_Type+4)&4294967295); //@line 698 "_iomodule.c"
        var $262=HEAP[$261]; //@line 698 "_iomodule.c"
        var $263=(($262+24)&4294967295); //@line 698 "_iomodule.c"
        var $264=HEAP[$263]; //@line 698 "_iomodule.c"
        FUNCTION_TABLE[$264](_PyBufferedRandom_Type); //@line 698 "_iomodule.c"
        __label__ = 64; break; //@line 698 "_iomodule.c"
      case 64: // $bb63
        __label__ = 102; break; //@line 698 "_iomodule.c"
      case 65: // $bb64
        HEAP[((_PyTextIOWrapper_Type+128)&4294967295)]=_PyTextIOBase_Type; //@line 701 "_iomodule.c"
        var $265=_PyType_Ready(_PyTextIOWrapper_Type); //@line 702 "_iomodule.c"
        var $266=((($265))|0) < 0; //@line 702 "_iomodule.c"
        if ($266) { __label__ = 102; break; } else { __label__ = 66; break; } //@line 702 "_iomodule.c"
      case 66: // $bb65
        var $267=((_PyTextIOWrapper_Type)&4294967295); //@line 702 "_iomodule.c"
        var $268=HEAP[$267]; //@line 702 "_iomodule.c"
        var $269=((($268) + 1)&4294967295); //@line 702 "_iomodule.c"
        var $270=((_PyTextIOWrapper_Type)&4294967295); //@line 702 "_iomodule.c"
        HEAP[$270]=$269; //@line 702 "_iomodule.c"
        var $271=HEAP[$m]; //@line 702 "_iomodule.c"
        var $272=_PyModule_AddObject($271, ((__str51285)&4294967295), _PyTextIOWrapper_Type); //@line 702 "_iomodule.c"
        var $273=((($272))|0) < 0; //@line 702 "_iomodule.c"
        if ($273) { __label__ = 67; break; } else { __label__ = 70; break; } //@line 702 "_iomodule.c"
      case 67: // $bb66
        var $274=((_PyTextIOWrapper_Type)&4294967295); //@line 702 "_iomodule.c"
        var $275=HEAP[$274]; //@line 702 "_iomodule.c"
        var $276=((($275) - 1)&4294967295); //@line 702 "_iomodule.c"
        var $277=((_PyTextIOWrapper_Type)&4294967295); //@line 702 "_iomodule.c"
        HEAP[$277]=$276; //@line 702 "_iomodule.c"
        var $278=((_PyTextIOWrapper_Type)&4294967295); //@line 702 "_iomodule.c"
        var $279=HEAP[$278]; //@line 702 "_iomodule.c"
        var $280=((($279))|0)==0; //@line 702 "_iomodule.c"
        if ($280) { __label__ = 68; break; } else { __label__ = 69; break; } //@line 702 "_iomodule.c"
      case 68: // $bb67
        var $281=((_PyTextIOWrapper_Type+4)&4294967295); //@line 702 "_iomodule.c"
        var $282=HEAP[$281]; //@line 702 "_iomodule.c"
        var $283=(($282+24)&4294967295); //@line 702 "_iomodule.c"
        var $284=HEAP[$283]; //@line 702 "_iomodule.c"
        FUNCTION_TABLE[$284](_PyTextIOWrapper_Type); //@line 702 "_iomodule.c"
        __label__ = 69; break; //@line 702 "_iomodule.c"
      case 69: // $bb68
        __label__ = 102; break; //@line 702 "_iomodule.c"
      case 70: // $bb69
        var $285=_PyType_Ready(_PyIncrementalNewlineDecoder_Type); //@line 705 "_iomodule.c"
        var $286=((($285))|0) < 0; //@line 705 "_iomodule.c"
        if ($286) { __label__ = 102; break; } else { __label__ = 71; break; } //@line 705 "_iomodule.c"
      case 71: // $bb70
        var $287=((_PyIncrementalNewlineDecoder_Type)&4294967295); //@line 705 "_iomodule.c"
        var $288=HEAP[$287]; //@line 705 "_iomodule.c"
        var $289=((($288) + 1)&4294967295); //@line 705 "_iomodule.c"
        var $290=((_PyIncrementalNewlineDecoder_Type)&4294967295); //@line 705 "_iomodule.c"
        HEAP[$290]=$289; //@line 705 "_iomodule.c"
        var $291=HEAP[$m]; //@line 705 "_iomodule.c"
        var $292=_PyModule_AddObject($291, ((__str52286)&4294967295), _PyIncrementalNewlineDecoder_Type); //@line 705 "_iomodule.c"
        var $293=((($292))|0) < 0; //@line 705 "_iomodule.c"
        if ($293) { __label__ = 72; break; } else { __label__ = 75; break; } //@line 705 "_iomodule.c"
      case 72: // $bb71
        var $294=((_PyIncrementalNewlineDecoder_Type)&4294967295); //@line 705 "_iomodule.c"
        var $295=HEAP[$294]; //@line 705 "_iomodule.c"
        var $296=((($295) - 1)&4294967295); //@line 705 "_iomodule.c"
        var $297=((_PyIncrementalNewlineDecoder_Type)&4294967295); //@line 705 "_iomodule.c"
        HEAP[$297]=$296; //@line 705 "_iomodule.c"
        var $298=((_PyIncrementalNewlineDecoder_Type)&4294967295); //@line 705 "_iomodule.c"
        var $299=HEAP[$298]; //@line 705 "_iomodule.c"
        var $300=((($299))|0)==0; //@line 705 "_iomodule.c"
        if ($300) { __label__ = 73; break; } else { __label__ = 74; break; } //@line 705 "_iomodule.c"
      case 73: // $bb72
        var $301=((_PyIncrementalNewlineDecoder_Type+4)&4294967295); //@line 705 "_iomodule.c"
        var $302=HEAP[$301]; //@line 705 "_iomodule.c"
        var $303=(($302+24)&4294967295); //@line 705 "_iomodule.c"
        var $304=HEAP[$303]; //@line 705 "_iomodule.c"
        FUNCTION_TABLE[$304](_PyIncrementalNewlineDecoder_Type); //@line 705 "_iomodule.c"
        __label__ = 74; break; //@line 705 "_iomodule.c"
      case 74: // $bb73
        __label__ = 102; break; //@line 705 "_iomodule.c"
      case 75: // $bb74
        var $305=_PyString_InternFromString(((__str53287)&4294967295)); //@line 708 "_iomodule.c"
        HEAP[__PyIO_str_close]=$305; //@line 708 "_iomodule.c"
        var $306=HEAP[__PyIO_str_close]; //@line 708 "_iomodule.c"
        var $307=($306)==0; //@line 708 "_iomodule.c"
        if ($307) { __label__ = 102; break; } else { __label__ = 76; break; } //@line 708 "_iomodule.c"
      case 76: // $bb75
        var $308=_PyString_InternFromString(((__str54289)&4294967295)); //@line 710 "_iomodule.c"
        HEAP[__PyIO_str_closed]=$308; //@line 710 "_iomodule.c"
        var $309=HEAP[__PyIO_str_closed]; //@line 710 "_iomodule.c"
        var $310=($309)==0; //@line 710 "_iomodule.c"
        if ($310) { __label__ = 102; break; } else { __label__ = 77; break; } //@line 710 "_iomodule.c"
      case 77: // $bb76
        var $311=_PyString_InternFromString(((__str55291)&4294967295)); //@line 712 "_iomodule.c"
        HEAP[__PyIO_str_decode]=$311; //@line 712 "_iomodule.c"
        var $312=HEAP[__PyIO_str_decode]; //@line 712 "_iomodule.c"
        var $313=($312)==0; //@line 712 "_iomodule.c"
        if ($313) { __label__ = 102; break; } else { __label__ = 78; break; } //@line 712 "_iomodule.c"
      case 78: // $bb77
        var $314=_PyString_InternFromString(((__str56292)&4294967295)); //@line 714 "_iomodule.c"
        HEAP[__PyIO_str_encode]=$314; //@line 714 "_iomodule.c"
        var $315=HEAP[__PyIO_str_encode]; //@line 714 "_iomodule.c"
        var $316=($315)==0; //@line 714 "_iomodule.c"
        if ($316) { __label__ = 102; break; } else { __label__ = 79; break; } //@line 714 "_iomodule.c"
      case 79: // $bb78
        var $317=_PyString_InternFromString(((__str25258)&4294967295)); //@line 716 "_iomodule.c"
        HEAP[__PyIO_str_fileno]=$317; //@line 716 "_iomodule.c"
        var $318=HEAP[__PyIO_str_fileno]; //@line 716 "_iomodule.c"
        var $319=($318)==0; //@line 716 "_iomodule.c"
        if ($319) { __label__ = 102; break; } else { __label__ = 80; break; } //@line 716 "_iomodule.c"
      case 80: // $bb79
        var $320=_PyString_InternFromString(((__str57294)&4294967295)); //@line 718 "_iomodule.c"
        HEAP[__PyIO_str_flush]=$320; //@line 718 "_iomodule.c"
        var $321=HEAP[__PyIO_str_flush]; //@line 718 "_iomodule.c"
        var $322=($321)==0; //@line 718 "_iomodule.c"
        if ($322) { __label__ = 102; break; } else { __label__ = 81; break; } //@line 718 "_iomodule.c"
      case 81: // $bb80
        var $323=_PyString_InternFromString(((__str58296)&4294967295)); //@line 720 "_iomodule.c"
        HEAP[__PyIO_str_getstate]=$323; //@line 720 "_iomodule.c"
        var $324=HEAP[__PyIO_str_getstate]; //@line 720 "_iomodule.c"
        var $325=($324)==0; //@line 720 "_iomodule.c"
        if ($325) { __label__ = 102; break; } else { __label__ = 82; break; } //@line 720 "_iomodule.c"
      case 82: // $bb81
        var $326=_PyString_InternFromString(((__str24257)&4294967295)); //@line 722 "_iomodule.c"
        HEAP[__PyIO_str_isatty]=$326; //@line 722 "_iomodule.c"
        var $327=HEAP[__PyIO_str_isatty]; //@line 722 "_iomodule.c"
        var $328=($327)==0; //@line 722 "_iomodule.c"
        if ($328) { __label__ = 102; break; } else { __label__ = 83; break; } //@line 722 "_iomodule.c"
      case 83: // $bb82
        var $329=_PyString_InternFromString(((__str59298)&4294967295)); //@line 724 "_iomodule.c"
        HEAP[__PyIO_str_newlines]=$329; //@line 724 "_iomodule.c"
        var $330=HEAP[__PyIO_str_newlines]; //@line 724 "_iomodule.c"
        var $331=($330)==0; //@line 724 "_iomodule.c"
        if ($331) { __label__ = 102; break; } else { __label__ = 84; break; } //@line 724 "_iomodule.c"
      case 84: // $bb83
        var $332=_PyString_InternFromString(((__str60299)&4294967295)); //@line 726 "_iomodule.c"
        HEAP[__PyIO_str_nl]=$332; //@line 726 "_iomodule.c"
        var $333=HEAP[__PyIO_str_nl]; //@line 726 "_iomodule.c"
        var $334=($333)==0; //@line 726 "_iomodule.c"
        if ($334) { __label__ = 102; break; } else { __label__ = 85; break; } //@line 726 "_iomodule.c"
      case 85: // $bb84
        var $335=_PyString_InternFromString(((__str61300)&4294967295)); //@line 728 "_iomodule.c"
        HEAP[__PyIO_str_read]=$335; //@line 728 "_iomodule.c"
        var $336=HEAP[__PyIO_str_read]; //@line 728 "_iomodule.c"
        var $337=($336)==0; //@line 728 "_iomodule.c"
        if ($337) { __label__ = 102; break; } else { __label__ = 86; break; } //@line 728 "_iomodule.c"
      case 86: // $bb85
        var $338=_PyString_InternFromString(((__str62302)&4294967295)); //@line 730 "_iomodule.c"
        HEAP[__PyIO_str_read1]=$338; //@line 730 "_iomodule.c"
        var $339=HEAP[__PyIO_str_read1]; //@line 730 "_iomodule.c"
        var $340=($339)==0; //@line 730 "_iomodule.c"
        if ($340) { __label__ = 102; break; } else { __label__ = 87; break; } //@line 730 "_iomodule.c"
      case 87: // $bb86
        var $341=_PyString_InternFromString(((__str63303)&4294967295)); //@line 732 "_iomodule.c"
        HEAP[__PyIO_str_readable]=$341; //@line 732 "_iomodule.c"
        var $342=HEAP[__PyIO_str_readable]; //@line 732 "_iomodule.c"
        var $343=($342)==0; //@line 732 "_iomodule.c"
        if ($343) { __label__ = 102; break; } else { __label__ = 88; break; } //@line 732 "_iomodule.c"
      case 88: // $bb87
        var $344=_PyString_InternFromString(((__str64305)&4294967295)); //@line 734 "_iomodule.c"
        HEAP[__PyIO_str_readinto]=$344; //@line 734 "_iomodule.c"
        var $345=HEAP[__PyIO_str_readinto]; //@line 734 "_iomodule.c"
        var $346=($345)==0; //@line 734 "_iomodule.c"
        if ($346) { __label__ = 102; break; } else { __label__ = 89; break; } //@line 734 "_iomodule.c"
      case 89: // $bb88
        var $347=_PyString_InternFromString(((__str65307)&4294967295)); //@line 736 "_iomodule.c"
        HEAP[__PyIO_str_readline]=$347; //@line 736 "_iomodule.c"
        var $348=HEAP[__PyIO_str_readline]; //@line 736 "_iomodule.c"
        var $349=($348)==0; //@line 736 "_iomodule.c"
        if ($349) { __label__ = 102; break; } else { __label__ = 90; break; } //@line 736 "_iomodule.c"
      case 90: // $bb89
        var $350=_PyString_InternFromString(((__str66309)&4294967295)); //@line 738 "_iomodule.c"
        HEAP[__PyIO_str_reset]=$350; //@line 738 "_iomodule.c"
        var $351=HEAP[__PyIO_str_reset]; //@line 738 "_iomodule.c"
        var $352=($351)==0; //@line 738 "_iomodule.c"
        if ($352) { __label__ = 102; break; } else { __label__ = 91; break; } //@line 738 "_iomodule.c"
      case 91: // $bb90
        var $353=_PyString_InternFromString(((__str67)&4294967295)); //@line 740 "_iomodule.c"
        HEAP[__PyIO_str_seek]=$353; //@line 740 "_iomodule.c"
        var $354=HEAP[__PyIO_str_seek]; //@line 740 "_iomodule.c"
        var $355=($354)==0; //@line 740 "_iomodule.c"
        if ($355) { __label__ = 102; break; } else { __label__ = 92; break; } //@line 740 "_iomodule.c"
      case 92: // $bb91
        var $356=_PyString_InternFromString(((__str68)&4294967295)); //@line 742 "_iomodule.c"
        HEAP[__PyIO_str_seekable]=$356; //@line 742 "_iomodule.c"
        var $357=HEAP[__PyIO_str_seekable]; //@line 742 "_iomodule.c"
        var $358=($357)==0; //@line 742 "_iomodule.c"
        if ($358) { __label__ = 102; break; } else { __label__ = 93; break; } //@line 742 "_iomodule.c"
      case 93: // $bb92
        var $359=_PyString_InternFromString(((__str69)&4294967295)); //@line 744 "_iomodule.c"
        HEAP[__PyIO_str_setstate]=$359; //@line 744 "_iomodule.c"
        var $360=HEAP[__PyIO_str_setstate]; //@line 744 "_iomodule.c"
        var $361=($360)==0; //@line 744 "_iomodule.c"
        if ($361) { __label__ = 102; break; } else { __label__ = 94; break; } //@line 744 "_iomodule.c"
      case 94: // $bb93
        var $362=_PyString_InternFromString(((__str70)&4294967295)); //@line 746 "_iomodule.c"
        HEAP[__PyIO_str_tell]=$362; //@line 746 "_iomodule.c"
        var $363=HEAP[__PyIO_str_tell]; //@line 746 "_iomodule.c"
        var $364=($363)==0; //@line 746 "_iomodule.c"
        if ($364) { __label__ = 102; break; } else { __label__ = 95; break; } //@line 746 "_iomodule.c"
      case 95: // $bb94
        var $365=_PyString_InternFromString(((__str71)&4294967295)); //@line 748 "_iomodule.c"
        HEAP[__PyIO_str_truncate]=$365; //@line 748 "_iomodule.c"
        var $366=HEAP[__PyIO_str_truncate]; //@line 748 "_iomodule.c"
        var $367=($366)==0; //@line 748 "_iomodule.c"
        if ($367) { __label__ = 102; break; } else { __label__ = 96; break; } //@line 748 "_iomodule.c"
      case 96: // $bb95
        var $368=_PyString_InternFromString(((__str72)&4294967295)); //@line 750 "_iomodule.c"
        HEAP[__PyIO_str_write]=$368; //@line 750 "_iomodule.c"
        var $369=HEAP[__PyIO_str_write]; //@line 750 "_iomodule.c"
        var $370=($369)==0; //@line 750 "_iomodule.c"
        if ($370) { __label__ = 102; break; } else { __label__ = 97; break; } //@line 750 "_iomodule.c"
      case 97: // $bb96
        var $371=_PyString_InternFromString(((__str73)&4294967295)); //@line 752 "_iomodule.c"
        HEAP[__PyIO_str_writable]=$371; //@line 752 "_iomodule.c"
        var $372=HEAP[__PyIO_str_writable]; //@line 752 "_iomodule.c"
        var $373=($372)==0; //@line 752 "_iomodule.c"
        if ($373) { __label__ = 102; break; } else { __label__ = 98; break; } //@line 752 "_iomodule.c"
      case 98: // $bb97
        var $374=_PyUnicodeUCS2_FromStringAndSize(0, 0); //@line 755 "_iomodule.c"
        HEAP[__PyIO_empty_str]=$374; //@line 755 "_iomodule.c"
        var $375=HEAP[__PyIO_empty_str]; //@line 755 "_iomodule.c"
        var $376=($375)==0; //@line 755 "_iomodule.c"
        if ($376) { __label__ = 102; break; } else { __label__ = 99; break; } //@line 755 "_iomodule.c"
      case 99: // $bb98
        var $377=_PyString_FromStringAndSize(0, 0); //@line 757 "_iomodule.c"
        HEAP[__PyIO_empty_bytes]=$377; //@line 757 "_iomodule.c"
        var $378=HEAP[__PyIO_empty_bytes]; //@line 757 "_iomodule.c"
        var $379=($378)==0; //@line 757 "_iomodule.c"
        if ($379) { __label__ = 102; break; } else { __label__ = 100; break; } //@line 757 "_iomodule.c"
      case 100: // $bb99
        var $380=_PyLong_FromLong(0); //@line 759 "_iomodule.c"
        HEAP[__PyIO_zero]=$380; //@line 759 "_iomodule.c"
        var $381=HEAP[__PyIO_zero]; //@line 759 "_iomodule.c"
        var $382=($381)==0; //@line 759 "_iomodule.c"
        if ($382) { __label__ = 102; break; } else { __label__ = 101; break; } //@line 759 "_iomodule.c"
      case 101: // $bb100
        __label__ = 110; break; //@line 759 "_iomodule.c"
      case 102: // $fail
        var $383=HEAP[__PyIO_os_module]; //@line 765 "_iomodule.c"
        var $384=($383)!=0; //@line 765 "_iomodule.c"
        if ($384) { __label__ = 103; break; } else { __label__ = 105; break; } //@line 765 "_iomodule.c"
      case 103: // $bb101
        var $385=HEAP[__PyIO_os_module]; //@line 765 "_iomodule.c"
        HEAP[$_py_tmp]=$385; //@line 765 "_iomodule.c"
        HEAP[__PyIO_os_module]=0; //@line 765 "_iomodule.c"
        var $386=HEAP[$_py_tmp]; //@line 765 "_iomodule.c"
        var $387=(($386)&4294967295); //@line 765 "_iomodule.c"
        var $388=HEAP[$387]; //@line 765 "_iomodule.c"
        var $389=((($388) - 1)&4294967295); //@line 765 "_iomodule.c"
        var $390=HEAP[$_py_tmp]; //@line 765 "_iomodule.c"
        var $391=(($390)&4294967295); //@line 765 "_iomodule.c"
        HEAP[$391]=$389; //@line 765 "_iomodule.c"
        var $392=HEAP[$_py_tmp]; //@line 765 "_iomodule.c"
        var $393=(($392)&4294967295); //@line 765 "_iomodule.c"
        var $394=HEAP[$393]; //@line 765 "_iomodule.c"
        var $395=((($394))|0)==0; //@line 765 "_iomodule.c"
        if ($395) { __label__ = 104; break; } else { __label__ = 105; break; } //@line 765 "_iomodule.c"
      case 104: // $bb102
        var $396=HEAP[$_py_tmp]; //@line 765 "_iomodule.c"
        var $397=(($396+4)&4294967295); //@line 765 "_iomodule.c"
        var $398=HEAP[$397]; //@line 765 "_iomodule.c"
        var $399=(($398+24)&4294967295); //@line 765 "_iomodule.c"
        var $400=HEAP[$399]; //@line 765 "_iomodule.c"
        var $401=HEAP[$_py_tmp]; //@line 765 "_iomodule.c"
        FUNCTION_TABLE[$400]($401); //@line 765 "_iomodule.c"
        __label__ = 105; break; //@line 765 "_iomodule.c"
      case 105: // $bb103
        var $402=HEAP[__PyIO_unsupported_operation]; //@line 766 "_iomodule.c"
        var $403=($402)!=0; //@line 766 "_iomodule.c"
        if ($403) { __label__ = 106; break; } else { __label__ = 108; break; } //@line 766 "_iomodule.c"
      case 106: // $bb104
        var $404=HEAP[__PyIO_unsupported_operation]; //@line 766 "_iomodule.c"
        HEAP[$_py_tmp105]=$404; //@line 766 "_iomodule.c"
        HEAP[__PyIO_unsupported_operation]=0; //@line 766 "_iomodule.c"
        var $405=HEAP[$_py_tmp105]; //@line 766 "_iomodule.c"
        var $406=(($405)&4294967295); //@line 766 "_iomodule.c"
        var $407=HEAP[$406]; //@line 766 "_iomodule.c"
        var $408=((($407) - 1)&4294967295); //@line 766 "_iomodule.c"
        var $409=HEAP[$_py_tmp105]; //@line 766 "_iomodule.c"
        var $410=(($409)&4294967295); //@line 766 "_iomodule.c"
        HEAP[$410]=$408; //@line 766 "_iomodule.c"
        var $411=HEAP[$_py_tmp105]; //@line 766 "_iomodule.c"
        var $412=(($411)&4294967295); //@line 766 "_iomodule.c"
        var $413=HEAP[$412]; //@line 766 "_iomodule.c"
        var $414=((($413))|0)==0; //@line 766 "_iomodule.c"
        if ($414) { __label__ = 107; break; } else { __label__ = 108; break; } //@line 766 "_iomodule.c"
      case 107: // $bb106
        var $415=HEAP[$_py_tmp105]; //@line 766 "_iomodule.c"
        var $416=(($415+4)&4294967295); //@line 766 "_iomodule.c"
        var $417=HEAP[$416]; //@line 766 "_iomodule.c"
        var $418=(($417+24)&4294967295); //@line 766 "_iomodule.c"
        var $419=HEAP[$418]; //@line 766 "_iomodule.c"
        var $420=HEAP[$_py_tmp105]; //@line 766 "_iomodule.c"
        FUNCTION_TABLE[$419]($420); //@line 766 "_iomodule.c"
        __label__ = 108; break; //@line 766 "_iomodule.c"
      case 108: // $bb107
        var $421=HEAP[$m]; //@line 767 "_iomodule.c"
        var $422=(($421)&4294967295); //@line 767 "_iomodule.c"
        var $423=HEAP[$422]; //@line 767 "_iomodule.c"
        var $424=((($423) - 1)&4294967295); //@line 767 "_iomodule.c"
        var $425=HEAP[$m]; //@line 767 "_iomodule.c"
        var $426=(($425)&4294967295); //@line 767 "_iomodule.c"
        HEAP[$426]=$424; //@line 767 "_iomodule.c"
        var $427=HEAP[$m]; //@line 767 "_iomodule.c"
        var $428=(($427)&4294967295); //@line 767 "_iomodule.c"
        var $429=HEAP[$428]; //@line 767 "_iomodule.c"
        var $430=((($429))|0)==0; //@line 767 "_iomodule.c"
        if ($430) { __label__ = 109; break; } else { __label__ = 110; break; } //@line 767 "_iomodule.c"
      case 109: // $bb108
        var $431=HEAP[$m]; //@line 767 "_iomodule.c"
        var $432=(($431+4)&4294967295); //@line 767 "_iomodule.c"
        var $433=HEAP[$432]; //@line 767 "_iomodule.c"
        var $434=(($433+24)&4294967295); //@line 767 "_iomodule.c"
        var $435=HEAP[$434]; //@line 767 "_iomodule.c"
        var $436=HEAP[$m]; //@line 767 "_iomodule.c"
        FUNCTION_TABLE[$435]($436); //@line 767 "_iomodule.c"
        __label__ = 110; break; //@line 767 "_iomodule.c"
      case 110: // $bb109
        __label__ = 111; break; //@line 628 "_iomodule.c"
      case 111: // $return
        STACKTOP = __stackBase__;
        return; //@line 628 "_iomodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  Module["_init_io"] = _init_io;

  function _resize_buffer373($self, $size) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $size_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $iftmp_1=__stackBase__+12;
        var $0=__stackBase__+16;
        var $alloc=__stackBase__+20;
        var $new_buf=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$size_addr]=$size;
        var $1=HEAP[$self_addr]; //@line 58 "stringio.c"
        var $2=(($1+20)&4294967295); //@line 58 "stringio.c"
        var $3=HEAP[$2]; //@line 58 "stringio.c"
        HEAP[$alloc]=$3; //@line 58 "stringio.c"
        HEAP[$new_buf]=0; //@line 59 "stringio.c"
        var $4=HEAP[$self_addr]; //@line 61 "stringio.c"
        var $5=(($4+8)&4294967295); //@line 61 "stringio.c"
        var $6=HEAP[$5]; //@line 61 "stringio.c"
        var $7=($6)==0; //@line 61 "stringio.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 61 "stringio.c"
      case 1: // $bb
        ___assert_fail(((__str319)&4294967295), ((__str1320)&4294967295), 61, ((___PRETTY_FUNCTION___8442)&4294967295)); //@line 61 "stringio.c"
        throw "Reached an unreachable! Original .ll line: 21950"; //@line 61 "stringio.c"
      case 2: // $bb1
        var $8=HEAP[$size_addr]; //@line 64 "stringio.c"
        var $9=((($8) + 1)&4294967295); //@line 64 "stringio.c"
        HEAP[$size_addr]=$9; //@line 64 "stringio.c"
        var $10=HEAP[$size_addr]; //@line 67 "stringio.c"
        var $11=((($10))|0) < 0; //@line 67 "stringio.c"
        if ($11) { __label__ = 17; break; } else { __label__ = 3; break; } //@line 67 "stringio.c"
      case 3: // $bb2
        var $12=HEAP[$alloc]; //@line 70 "stringio.c"
        var $13=Math.floor(((($12))>>>0)/2); //@line 70 "stringio.c"
        var $14=HEAP[$size_addr]; //@line 70 "stringio.c"
        var $15=((($13))>>>0) > ((($14))>>>0); //@line 70 "stringio.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 70 "stringio.c"
      case 4: // $bb3
        var $16=HEAP[$size_addr]; //@line 72 "stringio.c"
        var $17=((($16) + 1)&4294967295); //@line 72 "stringio.c"
        HEAP[$alloc]=$17; //@line 72 "stringio.c"
        __label__ = 13; break; //@line 72 "stringio.c"
      case 5: // $bb4
        var $18=HEAP[$size_addr]; //@line 74 "stringio.c"
        var $19=HEAP[$alloc]; //@line 74 "stringio.c"
        var $20=((($18))>>>0) < ((($19))>>>0); //@line 74 "stringio.c"
        if ($20) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 74 "stringio.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 76 "stringio.c"
        __label__ = 18; break; //@line 76 "stringio.c"
      case 7: // $bb6
        var $21=HEAP[$size_addr]; //@line 78 "stringio.c"
        var $22=((($21))>>>0); //@line 78 "stringio.c"
        var $23=HEAP[$alloc]; //@line 78 "stringio.c"
        var $24=((($23))>>>0); //@line 78 "stringio.c"
        var $25=($24) * 1.125; //@line 78 "stringio.c"
        var $26=($22) <= ($25); //@line 78 "stringio.c"
        if ($26) { __label__ = 8; break; } else { __label__ = 12; break; } //@line 78 "stringio.c"
      case 8: // $bb7
        var $27=HEAP[$size_addr]; //@line 80 "stringio.c"
        var $28=((($27))>>>0) >>> 3; //@line 80 "stringio.c"
        var $29=HEAP[$size_addr]; //@line 80 "stringio.c"
        var $30=((($28) + ($29))&4294967295); //@line 80 "stringio.c"
        var $31=HEAP[$size_addr]; //@line 80 "stringio.c"
        var $32=((($31))>>>0) <= 8; //@line 80 "stringio.c"
        if ($32) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 80 "stringio.c"
      case 9: // $bb8
        HEAP[$iftmp_1]=3; //@line 80 "stringio.c"
        __label__ = 11; break; //@line 80 "stringio.c"
      case 10: // $bb9
        HEAP[$iftmp_1]=6; //@line 80 "stringio.c"
        __label__ = 11; break; //@line 80 "stringio.c"
      case 11: // $bb10
        var $33=HEAP[$iftmp_1]; //@line 80 "stringio.c"
        var $34=((($30) + ($33))&4294967295); //@line 80 "stringio.c"
        HEAP[$alloc]=$34; //@line 80 "stringio.c"
        __label__ = 13; break; //@line 80 "stringio.c"
      case 12: // $bb11
        var $35=HEAP[$size_addr]; //@line 84 "stringio.c"
        var $36=((($35) + 1)&4294967295); //@line 84 "stringio.c"
        HEAP[$alloc]=$36; //@line 84 "stringio.c"
        __label__ = 13; break; //@line 84 "stringio.c"
      case 13: // $bb12
        var $37=HEAP[$alloc]; //@line 87 "stringio.c"
        var $38=((($37))|0) < 0; //@line 87 "stringio.c"
        if ($38) { __label__ = 17; break; } else { __label__ = 14; break; } //@line 87 "stringio.c"
      case 14: // $bb13
        var $39=HEAP[$alloc]; //@line 89 "stringio.c"
        var $40=((($39) * 2)&4294967295); //@line 89 "stringio.c"
        var $41=HEAP[$self_addr]; //@line 89 "stringio.c"
        var $42=(($41+8)&4294967295); //@line 89 "stringio.c"
        var $43=HEAP[$42]; //@line 89 "stringio.c"
        var $44=$43; //@line 89 "stringio.c"
        var $45=_PyMem_Realloc($44, $40); //@line 89 "stringio.c"
        var $46=$45; //@line 89 "stringio.c"
        HEAP[$new_buf]=$46; //@line 89 "stringio.c"
        var $47=HEAP[$new_buf]; //@line 91 "stringio.c"
        var $48=($47)==0; //@line 91 "stringio.c"
        if ($48) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 91 "stringio.c"
      case 15: // $bb14
        var $49=_PyErr_NoMemory(); //@line 92 "stringio.c"
        HEAP[$0]=-1; //@line 93 "stringio.c"
        __label__ = 18; break; //@line 93 "stringio.c"
      case 16: // $bb15
        var $50=HEAP[$self_addr]; //@line 95 "stringio.c"
        var $51=(($50+20)&4294967295); //@line 95 "stringio.c"
        var $52=HEAP[$alloc]; //@line 95 "stringio.c"
        HEAP[$51]=$52; //@line 95 "stringio.c"
        var $53=HEAP[$self_addr]; //@line 96 "stringio.c"
        var $54=(($53+8)&4294967295); //@line 96 "stringio.c"
        var $55=HEAP[$new_buf]; //@line 96 "stringio.c"
        HEAP[$54]=$55; //@line 96 "stringio.c"
        HEAP[$0]=0; //@line 98 "stringio.c"
        __label__ = 18; break; //@line 98 "stringio.c"
      case 17: // $overflow
        var $56=HEAP[_PyExc_OverflowError]; //@line 101 "stringio.c"
        _PyErr_SetString($56, ((__str2321)&4294967295)); //@line 101 "stringio.c"
        HEAP[$0]=-1; //@line 103 "stringio.c"
        __label__ = 18; break; //@line 103 "stringio.c"
      case 18: // $bb16
        var $57=HEAP[$0]; //@line 76 "stringio.c"
        HEAP[$retval]=$57; //@line 76 "stringio.c"
        __label__ = 19; break; //@line 76 "stringio.c"
      case 19: // $return
        var $retval17=HEAP[$retval]; //@line 76 "stringio.c"
        STACKTOP = __stackBase__;
        return $retval17; //@line 76 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _write_str($self, $obj) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $obj_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $str=__stackBase__+16;
        var $len=__stackBase__+20;
        var $decoded=__stackBase__+24;
        var $translated=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$obj_addr]=$obj;
        HEAP[$decoded]=0; //@line 113 "stringio.c"
        var $1=HEAP[$self_addr]; //@line 114 "stringio.c"
        var $2=(($1+8)&4294967295); //@line 114 "stringio.c"
        var $3=HEAP[$2]; //@line 114 "stringio.c"
        var $4=($3)==0; //@line 114 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 114 "stringio.c"
      case 1: // $bb
        ___assert_fail(((__str319)&4294967295), ((__str1320)&4294967295), 114, ((___PRETTY_FUNCTION___8484)&4294967295)); //@line 114 "stringio.c"
        throw "Reached an unreachable! Original .ll line: 22101"; //@line 114 "stringio.c"
      case 2: // $bb1
        var $5=HEAP[$self_addr]; //@line 115 "stringio.c"
        var $6=(($5+12)&4294967295); //@line 115 "stringio.c"
        var $7=HEAP[$6]; //@line 115 "stringio.c"
        var $8=((($7))|0) < 0; //@line 115 "stringio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 115 "stringio.c"
      case 3: // $bb2
        ___assert_fail(((__str3322)&4294967295), ((__str1320)&4294967295), 115, ((___PRETTY_FUNCTION___8484)&4294967295)); //@line 115 "stringio.c"
        throw "Reached an unreachable! Original .ll line: 22112"; //@line 115 "stringio.c"
      case 4: // $bb3
        var $9=HEAP[$self_addr]; //@line 117 "stringio.c"
        var $10=(($9+28)&4294967295); //@line 117 "stringio.c"
        var $11=HEAP[$10]; //@line 117 "stringio.c"
        var $12=($11)!=0; //@line 117 "stringio.c"
        if ($12) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 117 "stringio.c"
      case 5: // $bb4
        var $13=HEAP[$self_addr]; //@line 118 "stringio.c"
        var $14=(($13+28)&4294967295); //@line 118 "stringio.c"
        var $15=HEAP[$14]; //@line 118 "stringio.c"
        var $16=HEAP[$obj_addr]; //@line 118 "stringio.c"
        var $17=__PyIncrementalNewlineDecoder_decode($15, $16, 1); //@line 118 "stringio.c"
        HEAP[$decoded]=$17; //@line 118 "stringio.c"
        __label__ = 7; break; //@line 118 "stringio.c"
      case 6: // $bb5
        var $18=HEAP[$obj_addr]; //@line 122 "stringio.c"
        HEAP[$decoded]=$18; //@line 122 "stringio.c"
        var $19=HEAP[$decoded]; //@line 123 "stringio.c"
        var $20=(($19)&4294967295); //@line 123 "stringio.c"
        var $21=HEAP[$20]; //@line 123 "stringio.c"
        var $22=((($21) + 1)&4294967295); //@line 123 "stringio.c"
        var $23=HEAP[$decoded]; //@line 123 "stringio.c"
        var $24=(($23)&4294967295); //@line 123 "stringio.c"
        HEAP[$24]=$22; //@line 123 "stringio.c"
        __label__ = 7; break; //@line 123 "stringio.c"
      case 7: // $bb6
        var $25=HEAP[$self_addr]; //@line 125 "stringio.c"
        var $26=(($25+36)&4294967295); //@line 125 "stringio.c"
        var $27=HEAP[$26]; //@line 125 "stringio.c"
        var $28=($27)!=0; //@line 125 "stringio.c"
        if ($28) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 125 "stringio.c"
      case 8: // $bb7
        var $29=HEAP[$self_addr]; //@line 127 "stringio.c"
        var $30=(($29+36)&4294967295); //@line 127 "stringio.c"
        var $31=HEAP[$30]; //@line 127 "stringio.c"
        var $32=HEAP[__PyIO_str_nl]; //@line 127 "stringio.c"
        var $33=HEAP[$decoded]; //@line 127 "stringio.c"
        var $34=_PyUnicodeUCS2_Replace($33, $32, $31, -1); //@line 127 "stringio.c"
        HEAP[$translated]=$34; //@line 127 "stringio.c"
        var $35=HEAP[$decoded]; //@line 128 "stringio.c"
        var $36=(($35)&4294967295); //@line 128 "stringio.c"
        var $37=HEAP[$36]; //@line 128 "stringio.c"
        var $38=((($37) - 1)&4294967295); //@line 128 "stringio.c"
        var $39=HEAP[$decoded]; //@line 128 "stringio.c"
        var $40=(($39)&4294967295); //@line 128 "stringio.c"
        HEAP[$40]=$38; //@line 128 "stringio.c"
        var $41=HEAP[$decoded]; //@line 128 "stringio.c"
        var $42=(($41)&4294967295); //@line 128 "stringio.c"
        var $43=HEAP[$42]; //@line 128 "stringio.c"
        var $44=((($43))|0)==0; //@line 128 "stringio.c"
        if ($44) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 128 "stringio.c"
      case 9: // $bb8
        var $45=HEAP[$decoded]; //@line 128 "stringio.c"
        var $46=(($45+4)&4294967295); //@line 128 "stringio.c"
        var $47=HEAP[$46]; //@line 128 "stringio.c"
        var $48=(($47+24)&4294967295); //@line 128 "stringio.c"
        var $49=HEAP[$48]; //@line 128 "stringio.c"
        var $50=HEAP[$decoded]; //@line 128 "stringio.c"
        FUNCTION_TABLE[$49]($50); //@line 128 "stringio.c"
        __label__ = 10; break; //@line 128 "stringio.c"
      case 10: // $bb9
        var $51=HEAP[$translated]; //@line 129 "stringio.c"
        HEAP[$decoded]=$51; //@line 129 "stringio.c"
        __label__ = 11; break; //@line 129 "stringio.c"
      case 11: // $bb10
        var $52=HEAP[$decoded]; //@line 131 "stringio.c"
        var $53=($52)==0; //@line 131 "stringio.c"
        if ($53) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 131 "stringio.c"
      case 12: // $bb11
        HEAP[$0]=-1; //@line 132 "stringio.c"
        __label__ = 32; break; //@line 132 "stringio.c"
      case 13: // $bb12
        var $54=HEAP[$decoded]; //@line 134 "stringio.c"
        var $55=(($54+4)&4294967295); //@line 134 "stringio.c"
        var $56=HEAP[$55]; //@line 134 "stringio.c"
        var $57=(($56+84)&4294967295); //@line 134 "stringio.c"
        var $58=HEAP[$57]; //@line 134 "stringio.c"
        var $59=($58) & 268435456; //@line 134 "stringio.c"
        var $60=((($59))|0)==0; //@line 134 "stringio.c"
        if ($60) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 134 "stringio.c"
      case 14: // $bb13
        ___assert_fail(((__str4323)&4294967295), ((__str1320)&4294967295), 134, ((___PRETTY_FUNCTION___8484)&4294967295)); //@line 134 "stringio.c"
        throw "Reached an unreachable! Original .ll line: 22207"; //@line 134 "stringio.c"
      case 15: // $bb14
        var $61=HEAP[$decoded]; //@line 135 "stringio.c"
        var $62=$61; //@line 135 "stringio.c"
        var $63=(($62+12)&4294967295); //@line 135 "stringio.c"
        var $64=HEAP[$63]; //@line 135 "stringio.c"
        HEAP[$str]=$64; //@line 135 "stringio.c"
        var $65=HEAP[$decoded]; //@line 136 "stringio.c"
        var $66=$65; //@line 136 "stringio.c"
        var $67=(($66+8)&4294967295); //@line 136 "stringio.c"
        var $68=HEAP[$67]; //@line 136 "stringio.c"
        HEAP[$len]=$68; //@line 136 "stringio.c"
        var $69=HEAP[$len]; //@line 138 "stringio.c"
        var $70=((($69))|0) < 0; //@line 138 "stringio.c"
        if ($70) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 138 "stringio.c"
      case 16: // $bb15
        ___assert_fail(((__str5324)&4294967295), ((__str1320)&4294967295), 138, ((___PRETTY_FUNCTION___8484)&4294967295)); //@line 138 "stringio.c"
        throw "Reached an unreachable! Original .ll line: 22226"; //@line 138 "stringio.c"
      case 17: // $bb16
        var $71=HEAP[$self_addr]; //@line 143 "stringio.c"
        var $72=(($71+12)&4294967295); //@line 143 "stringio.c"
        var $73=HEAP[$72]; //@line 143 "stringio.c"
        var $74=HEAP[$len]; //@line 143 "stringio.c"
        var $75=((2147483647 - ($74))&4294967295); //@line 143 "stringio.c"
        var $76=((($73))|0) > ((($75))|0); //@line 143 "stringio.c"
        if ($76) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 143 "stringio.c"
      case 18: // $bb17
        var $77=HEAP[_PyExc_OverflowError]; //@line 144 "stringio.c"
        _PyErr_SetString($77, ((__str6325)&4294967295)); //@line 144 "stringio.c"
        __label__ = 28; break; //@line 144 "stringio.c"
      case 19: // $bb18
        var $78=HEAP[$self_addr]; //@line 148 "stringio.c"
        var $79=(($78+12)&4294967295); //@line 148 "stringio.c"
        var $80=HEAP[$79]; //@line 148 "stringio.c"
        var $81=HEAP[$len]; //@line 148 "stringio.c"
        var $82=((($80) + ($81))&4294967295); //@line 148 "stringio.c"
        var $83=HEAP[$self_addr]; //@line 148 "stringio.c"
        var $84=(($83+16)&4294967295); //@line 148 "stringio.c"
        var $85=HEAP[$84]; //@line 148 "stringio.c"
        var $86=((($82))|0) > ((($85))|0); //@line 148 "stringio.c"
        if ($86) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 148 "stringio.c"
      case 20: // $bb19
        var $87=HEAP[$self_addr]; //@line 149 "stringio.c"
        var $88=(($87+12)&4294967295); //@line 149 "stringio.c"
        var $89=HEAP[$88]; //@line 149 "stringio.c"
        var $90=HEAP[$len]; //@line 149 "stringio.c"
        var $91=((($89) + ($90))&4294967295); //@line 149 "stringio.c"
        var $92=HEAP[$self_addr]; //@line 149 "stringio.c"
        var $93=_resize_buffer373($92, $91); //@line 149 "stringio.c"
        var $94=((($93))|0) < 0; //@line 149 "stringio.c"
        if ($94) { __label__ = 28; break; } else { __label__ = 21; break; } //@line 149 "stringio.c"
      case 21: // $bb20
        var $95=HEAP[$self_addr]; //@line 153 "stringio.c"
        var $96=(($95+12)&4294967295); //@line 153 "stringio.c"
        var $97=HEAP[$96]; //@line 153 "stringio.c"
        var $98=HEAP[$self_addr]; //@line 153 "stringio.c"
        var $99=(($98+16)&4294967295); //@line 153 "stringio.c"
        var $100=HEAP[$99]; //@line 153 "stringio.c"
        var $101=((($97))|0) > ((($100))|0); //@line 153 "stringio.c"
        if ($101) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 153 "stringio.c"
      case 22: // $bb21
        var $102=HEAP[$self_addr]; //@line 163 "stringio.c"
        var $103=(($102+12)&4294967295); //@line 163 "stringio.c"
        var $104=HEAP[$103]; //@line 163 "stringio.c"
        var $105=HEAP[$self_addr]; //@line 163 "stringio.c"
        var $106=(($105+16)&4294967295); //@line 163 "stringio.c"
        var $107=HEAP[$106]; //@line 163 "stringio.c"
        var $108=((($104) - ($107))&4294967295); //@line 163 "stringio.c"
        var $109=((($108) * 2)&4294967295); //@line 163 "stringio.c"
        var $110=HEAP[$self_addr]; //@line 163 "stringio.c"
        var $111=(($110+8)&4294967295); //@line 163 "stringio.c"
        var $112=HEAP[$111]; //@line 163 "stringio.c"
        var $113=HEAP[$self_addr]; //@line 163 "stringio.c"
        var $114=(($113+16)&4294967295); //@line 163 "stringio.c"
        var $115=HEAP[$114]; //@line 163 "stringio.c"
        var $116=(($112+2*$115)&4294967295); //@line 163 "stringio.c"
        var $117=$116; //@line 163 "stringio.c"
        _llvm_memset_p0i8_i32($117, 0, $109, 1, 0); //@line 163 "stringio.c"
        __label__ = 23; break; //@line 163 "stringio.c"
      case 23: // $bb22
        var $118=HEAP[$len]; //@line 169 "stringio.c"
        var $119=((($118) * 2)&4294967295); //@line 169 "stringio.c"
        var $120=HEAP[$self_addr]; //@line 169 "stringio.c"
        var $121=(($120+8)&4294967295); //@line 169 "stringio.c"
        var $122=HEAP[$121]; //@line 169 "stringio.c"
        var $123=HEAP[$self_addr]; //@line 169 "stringio.c"
        var $124=(($123+12)&4294967295); //@line 169 "stringio.c"
        var $125=HEAP[$124]; //@line 169 "stringio.c"
        var $126=(($122+2*$125)&4294967295); //@line 169 "stringio.c"
        var $127=HEAP[$str]; //@line 169 "stringio.c"
        var $128=$126; //@line 169 "stringio.c"
        var $129=$127; //@line 169 "stringio.c"
        _llvm_memcpy_p0i8_p0i8_i32($128, $129, $119, 1, 0); //@line 169 "stringio.c"
        var $130=HEAP[$self_addr]; //@line 170 "stringio.c"
        var $131=(($130+12)&4294967295); //@line 170 "stringio.c"
        var $132=HEAP[$131]; //@line 170 "stringio.c"
        var $133=HEAP[$len]; //@line 170 "stringio.c"
        var $134=((($132) + ($133))&4294967295); //@line 170 "stringio.c"
        var $135=HEAP[$self_addr]; //@line 170 "stringio.c"
        var $136=(($135+12)&4294967295); //@line 170 "stringio.c"
        HEAP[$136]=$134; //@line 170 "stringio.c"
        var $137=HEAP[$self_addr]; //@line 173 "stringio.c"
        var $138=(($137+16)&4294967295); //@line 173 "stringio.c"
        var $139=HEAP[$138]; //@line 173 "stringio.c"
        var $140=HEAP[$self_addr]; //@line 173 "stringio.c"
        var $141=(($140+12)&4294967295); //@line 173 "stringio.c"
        var $142=HEAP[$141]; //@line 173 "stringio.c"
        var $143=((($139))|0) < ((($142))|0); //@line 173 "stringio.c"
        if ($143) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 173 "stringio.c"
      case 24: // $bb23
        var $144=HEAP[$self_addr]; //@line 174 "stringio.c"
        var $145=(($144+12)&4294967295); //@line 174 "stringio.c"
        var $146=HEAP[$145]; //@line 174 "stringio.c"
        var $147=HEAP[$self_addr]; //@line 174 "stringio.c"
        var $148=(($147+16)&4294967295); //@line 174 "stringio.c"
        HEAP[$148]=$146; //@line 174 "stringio.c"
        __label__ = 25; break; //@line 174 "stringio.c"
      case 25: // $bb24
        var $149=HEAP[$decoded]; //@line 177 "stringio.c"
        var $150=(($149)&4294967295); //@line 177 "stringio.c"
        var $151=HEAP[$150]; //@line 177 "stringio.c"
        var $152=((($151) - 1)&4294967295); //@line 177 "stringio.c"
        var $153=HEAP[$decoded]; //@line 177 "stringio.c"
        var $154=(($153)&4294967295); //@line 177 "stringio.c"
        HEAP[$154]=$152; //@line 177 "stringio.c"
        var $155=HEAP[$decoded]; //@line 177 "stringio.c"
        var $156=(($155)&4294967295); //@line 177 "stringio.c"
        var $157=HEAP[$156]; //@line 177 "stringio.c"
        var $158=((($157))|0)==0; //@line 177 "stringio.c"
        if ($158) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 177 "stringio.c"
      case 26: // $bb25
        var $159=HEAP[$decoded]; //@line 177 "stringio.c"
        var $160=(($159+4)&4294967295); //@line 177 "stringio.c"
        var $161=HEAP[$160]; //@line 177 "stringio.c"
        var $162=(($161+24)&4294967295); //@line 177 "stringio.c"
        var $163=HEAP[$162]; //@line 177 "stringio.c"
        var $164=HEAP[$decoded]; //@line 177 "stringio.c"
        FUNCTION_TABLE[$163]($164); //@line 177 "stringio.c"
        __label__ = 27; break; //@line 177 "stringio.c"
      case 27: // $bb26
        HEAP[$0]=0; //@line 178 "stringio.c"
        __label__ = 32; break; //@line 178 "stringio.c"
      case 28: // $fail
        var $165=HEAP[$decoded]; //@line 181 "stringio.c"
        var $166=($165)!=0; //@line 181 "stringio.c"
        if ($166) { __label__ = 29; break; } else { __label__ = 31; break; } //@line 181 "stringio.c"
      case 29: // $bb27
        var $167=HEAP[$decoded]; //@line 181 "stringio.c"
        var $168=(($167)&4294967295); //@line 181 "stringio.c"
        var $169=HEAP[$168]; //@line 181 "stringio.c"
        var $170=((($169) - 1)&4294967295); //@line 181 "stringio.c"
        var $171=HEAP[$decoded]; //@line 181 "stringio.c"
        var $172=(($171)&4294967295); //@line 181 "stringio.c"
        HEAP[$172]=$170; //@line 181 "stringio.c"
        var $173=HEAP[$decoded]; //@line 181 "stringio.c"
        var $174=(($173)&4294967295); //@line 181 "stringio.c"
        var $175=HEAP[$174]; //@line 181 "stringio.c"
        var $176=((($175))|0)==0; //@line 181 "stringio.c"
        if ($176) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 181 "stringio.c"
      case 30: // $bb28
        var $177=HEAP[$decoded]; //@line 181 "stringio.c"
        var $178=(($177+4)&4294967295); //@line 181 "stringio.c"
        var $179=HEAP[$178]; //@line 181 "stringio.c"
        var $180=(($179+24)&4294967295); //@line 181 "stringio.c"
        var $181=HEAP[$180]; //@line 181 "stringio.c"
        var $182=HEAP[$decoded]; //@line 181 "stringio.c"
        FUNCTION_TABLE[$181]($182); //@line 181 "stringio.c"
        __label__ = 31; break; //@line 181 "stringio.c"
      case 31: // $bb29
        HEAP[$0]=-1; //@line 182 "stringio.c"
        __label__ = 32; break; //@line 182 "stringio.c"
      case 32: // $bb30
        var $183=HEAP[$0]; //@line 132 "stringio.c"
        HEAP[$retval]=$183; //@line 132 "stringio.c"
        __label__ = 33; break; //@line 132 "stringio.c"
      case 33: // $return
        var $retval31=HEAP[$retval]; //@line 132 "stringio.c"
        STACKTOP = __stackBase__;
        return $retval31; //@line 132 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_getvalue($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 191 "stringio.c"
        var $2=(($1+24)&4294967295); //@line 191 "stringio.c"
        var $3=HEAP[$2]; //@line 191 "stringio.c"
        var $4=reSign(($3), 8, 0) <= 0; //@line 191 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 191 "stringio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 191 "stringio.c"
        _PyErr_SetString($5, ((__str7326)&4294967295)); //@line 191 "stringio.c"
        HEAP[$0]=0; //@line 191 "stringio.c"
        __label__ = 5; break; //@line 191 "stringio.c"
      case 2: // $bb1
        var $6=HEAP[$self_addr]; //@line 192 "stringio.c"
        var $7=(($6+25)&4294967295); //@line 192 "stringio.c"
        var $8=HEAP[$7]; //@line 192 "stringio.c"
        var $9=reSign(($8), 8, 0)!=0; //@line 192 "stringio.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 192 "stringio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 192 "stringio.c"
        _PyErr_SetString($10, ((__str8327)&4294967295)); //@line 192 "stringio.c"
        HEAP[$0]=0; //@line 192 "stringio.c"
        __label__ = 5; break; //@line 192 "stringio.c"
      case 4: // $bb3
        var $11=HEAP[$self_addr]; //@line 193 "stringio.c"
        var $12=(($11+16)&4294967295); //@line 193 "stringio.c"
        var $13=HEAP[$12]; //@line 193 "stringio.c"
        var $14=HEAP[$self_addr]; //@line 193 "stringio.c"
        var $15=(($14+8)&4294967295); //@line 193 "stringio.c"
        var $16=HEAP[$15]; //@line 193 "stringio.c"
        var $17=_PyUnicodeUCS2_FromUnicode($16, $13); //@line 193 "stringio.c"
        HEAP[$0]=$17; //@line 193 "stringio.c"
        __label__ = 5; break; //@line 193 "stringio.c"
      case 5: // $bb4
        var $18=HEAP[$0]; //@line 191 "stringio.c"
        HEAP[$retval]=$18; //@line 191 "stringio.c"
        __label__ = 6; break; //@line 191 "stringio.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 191 "stringio.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 191 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_tell($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 202 "stringio.c"
        var $2=(($1+24)&4294967295); //@line 202 "stringio.c"
        var $3=HEAP[$2]; //@line 202 "stringio.c"
        var $4=reSign(($3), 8, 0) <= 0; //@line 202 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 202 "stringio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 202 "stringio.c"
        _PyErr_SetString($5, ((__str7326)&4294967295)); //@line 202 "stringio.c"
        HEAP[$0]=0; //@line 202 "stringio.c"
        __label__ = 5; break; //@line 202 "stringio.c"
      case 2: // $bb1
        var $6=HEAP[$self_addr]; //@line 203 "stringio.c"
        var $7=(($6+25)&4294967295); //@line 203 "stringio.c"
        var $8=HEAP[$7]; //@line 203 "stringio.c"
        var $9=reSign(($8), 8, 0)!=0; //@line 203 "stringio.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 203 "stringio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 203 "stringio.c"
        _PyErr_SetString($10, ((__str8327)&4294967295)); //@line 203 "stringio.c"
        HEAP[$0]=0; //@line 203 "stringio.c"
        __label__ = 5; break; //@line 203 "stringio.c"
      case 4: // $bb3
        var $11=HEAP[$self_addr]; //@line 204 "stringio.c"
        var $12=(($11+12)&4294967295); //@line 204 "stringio.c"
        var $13=HEAP[$12]; //@line 204 "stringio.c"
        var $14=_PyLong_FromSsize_t($13); //@line 204 "stringio.c"
        HEAP[$0]=$14; //@line 204 "stringio.c"
        __label__ = 5; break; //@line 204 "stringio.c"
      case 5: // $bb4
        var $15=HEAP[$0]; //@line 202 "stringio.c"
        HEAP[$retval]=$15; //@line 202 "stringio.c"
        __label__ = 6; break; //@line 202 "stringio.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 202 "stringio.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 202 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_read($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $size=__stackBase__+16;
        var $n=__stackBase__+20;
        var $output=__stackBase__+24;
        var $arg=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$arg]=__Py_NoneStruct; //@line 218 "stringio.c"
        var $1=HEAP[$self_addr]; //@line 220 "stringio.c"
        var $2=(($1+24)&4294967295); //@line 220 "stringio.c"
        var $3=HEAP[$2]; //@line 220 "stringio.c"
        var $4=reSign(($3), 8, 0) <= 0; //@line 220 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 220 "stringio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 220 "stringio.c"
        _PyErr_SetString($5, ((__str7326)&4294967295)); //@line 220 "stringio.c"
        HEAP[$0]=0; //@line 220 "stringio.c"
        __label__ = 19; break; //@line 220 "stringio.c"
      case 2: // $bb1
        var $6=HEAP[$args_addr]; //@line 221 "stringio.c"
        var $7=__PyArg_ParseTuple_SizeT($6, ((__str9328)&4294967295), $arg); //@line 221 "stringio.c"
        var $8=((($7))|0)==0; //@line 221 "stringio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 221 "stringio.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 222 "stringio.c"
        __label__ = 19; break; //@line 222 "stringio.c"
      case 4: // $bb3
        var $9=HEAP[$self_addr]; //@line 223 "stringio.c"
        var $10=(($9+25)&4294967295); //@line 223 "stringio.c"
        var $11=HEAP[$10]; //@line 223 "stringio.c"
        var $12=reSign(($11), 8, 0)!=0; //@line 223 "stringio.c"
        if ($12) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 223 "stringio.c"
      case 5: // $bb4
        var $13=HEAP[_PyExc_ValueError]; //@line 223 "stringio.c"
        _PyErr_SetString($13, ((__str8327)&4294967295)); //@line 223 "stringio.c"
        HEAP[$0]=0; //@line 223 "stringio.c"
        __label__ = 19; break; //@line 223 "stringio.c"
      case 6: // $bb5
        var $14=HEAP[$arg]; //@line 225 "stringio.c"
        var $15=_PyNumber_Check($14); //@line 225 "stringio.c"
        var $16=((($15))|0)!=0; //@line 225 "stringio.c"
        if ($16) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 225 "stringio.c"
      case 7: // $bb6
        var $17=HEAP[_PyExc_OverflowError]; //@line 226 "stringio.c"
        var $18=HEAP[$arg]; //@line 226 "stringio.c"
        var $19=_PyNumber_AsSsize_t($18, $17); //@line 226 "stringio.c"
        HEAP[$size]=$19; //@line 226 "stringio.c"
        var $20=HEAP[$size]; //@line 227 "stringio.c"
        var $21=((($20))|0)==-1; //@line 227 "stringio.c"
        if ($21) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 227 "stringio.c"
      case 8: // $bb7
        var $22=_PyErr_Occurred(); //@line 227 "stringio.c"
        var $23=($22)!=0; //@line 227 "stringio.c"
        if ($23) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 227 "stringio.c"
      case 9: // $bb8
        HEAP[$0]=0; //@line 228 "stringio.c"
        __label__ = 19; break; //@line 228 "stringio.c"
      case 10: // $bb9
        __label__ = 14; break; //@line 228 "stringio.c"
      case 11: // $bb10
        var $24=HEAP[$arg]; //@line 230 "stringio.c"
        var $25=($24)==(__Py_NoneStruct); //@line 230 "stringio.c"
        if ($25) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 230 "stringio.c"
      case 12: // $bb11
        HEAP[$size]=-1; //@line 232 "stringio.c"
        __label__ = 14; break; //@line 232 "stringio.c"
      case 13: // $bb12
        var $26=HEAP[$arg]; //@line 235 "stringio.c"
        var $27=(($26+4)&4294967295); //@line 235 "stringio.c"
        var $28=HEAP[$27]; //@line 235 "stringio.c"
        var $29=(($28+12)&4294967295); //@line 235 "stringio.c"
        var $30=HEAP[$29]; //@line 235 "stringio.c"
        var $31=HEAP[_PyExc_TypeError]; //@line 235 "stringio.c"
        var $32=_PyErr_Format($31, ((__str10329)&4294967295), $30); //@line 235 "stringio.c"
        HEAP[$0]=0; //@line 237 "stringio.c"
        __label__ = 19; break; //@line 237 "stringio.c"
      case 14: // $bb13
        var $33=HEAP[$self_addr]; //@line 241 "stringio.c"
        var $34=(($33+16)&4294967295); //@line 241 "stringio.c"
        var $35=HEAP[$34]; //@line 241 "stringio.c"
        var $36=HEAP[$self_addr]; //@line 241 "stringio.c"
        var $37=(($36+12)&4294967295); //@line 241 "stringio.c"
        var $38=HEAP[$37]; //@line 241 "stringio.c"
        var $39=((($35) - ($38))&4294967295); //@line 241 "stringio.c"
        HEAP[$n]=$39; //@line 241 "stringio.c"
        var $40=HEAP[$size]; //@line 242 "stringio.c"
        var $41=((($40))|0) < 0; //@line 242 "stringio.c"
        if ($41) { __label__ = 16; break; } else { __label__ = 15; break; } //@line 242 "stringio.c"
      case 15: // $bb14
        var $42=HEAP[$size]; //@line 242 "stringio.c"
        var $43=HEAP[$n]; //@line 242 "stringio.c"
        var $44=((($42))|0) > ((($43))|0); //@line 242 "stringio.c"
        if ($44) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 242 "stringio.c"
      case 16: // $bb15
        var $45=HEAP[$n]; //@line 243 "stringio.c"
        HEAP[$size]=$45; //@line 243 "stringio.c"
        var $46=HEAP[$size]; //@line 244 "stringio.c"
        var $47=((($46))|0) < 0; //@line 244 "stringio.c"
        if ($47) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 244 "stringio.c"
      case 17: // $bb16
        HEAP[$size]=0; //@line 245 "stringio.c"
        __label__ = 18; break; //@line 245 "stringio.c"
      case 18: // $bb17
        var $48=HEAP[$self_addr]; //@line 248 "stringio.c"
        var $49=(($48+8)&4294967295); //@line 248 "stringio.c"
        var $50=HEAP[$49]; //@line 248 "stringio.c"
        var $51=HEAP[$self_addr]; //@line 248 "stringio.c"
        var $52=(($51+12)&4294967295); //@line 248 "stringio.c"
        var $53=HEAP[$52]; //@line 248 "stringio.c"
        var $54=(($50+2*$53)&4294967295); //@line 248 "stringio.c"
        HEAP[$output]=$54; //@line 248 "stringio.c"
        var $55=HEAP[$self_addr]; //@line 249 "stringio.c"
        var $56=(($55+12)&4294967295); //@line 249 "stringio.c"
        var $57=HEAP[$56]; //@line 249 "stringio.c"
        var $58=HEAP[$size]; //@line 249 "stringio.c"
        var $59=((($57) + ($58))&4294967295); //@line 249 "stringio.c"
        var $60=HEAP[$self_addr]; //@line 249 "stringio.c"
        var $61=(($60+12)&4294967295); //@line 249 "stringio.c"
        HEAP[$61]=$59; //@line 249 "stringio.c"
        var $62=HEAP[$output]; //@line 250 "stringio.c"
        var $63=HEAP[$size]; //@line 250 "stringio.c"
        var $64=_PyUnicodeUCS2_FromUnicode($62, $63); //@line 250 "stringio.c"
        HEAP[$0]=$64; //@line 250 "stringio.c"
        __label__ = 19; break; //@line 250 "stringio.c"
      case 19: // $bb18
        var $65=HEAP[$0]; //@line 220 "stringio.c"
        HEAP[$retval]=$65; //@line 220 "stringio.c"
        __label__ = 20; break; //@line 220 "stringio.c"
      case 20: // $return
        var $retval19=HEAP[$retval]; //@line 220 "stringio.c"
        STACKTOP = __stackBase__;
        return $retval19; //@line 220 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __stringio_readline($self, $limit) {
    var __stackBase__  = STACKTOP; STACKTOP += 34; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 34);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $limit_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $start=__stackBase__+16;
        var $end=__stackBase__+20;
        var $old_char=__stackBase__+24;
        var $len=__stackBase__+26;
        var $consumed=__stackBase__+30;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$limit_addr]=$limit;
        var $1=HEAP[$self_addr]; //@line 261 "stringio.c"
        var $2=(($1+12)&4294967295); //@line 261 "stringio.c"
        var $3=HEAP[$2]; //@line 261 "stringio.c"
        var $4=HEAP[$self_addr]; //@line 261 "stringio.c"
        var $5=(($4+16)&4294967295); //@line 261 "stringio.c"
        var $6=HEAP[$5]; //@line 261 "stringio.c"
        var $7=((($3))|0) >= ((($6))|0); //@line 261 "stringio.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 261 "stringio.c"
      case 1: // $bb
        var $8=_PyUnicodeUCS2_FromString(((__str11330)&4294967295)); //@line 262 "stringio.c"
        HEAP[$0]=$8; //@line 262 "stringio.c"
        __label__ = 8; break; //@line 262 "stringio.c"
      case 2: // $bb1
        var $9=HEAP[$self_addr]; //@line 264 "stringio.c"
        var $10=(($9+8)&4294967295); //@line 264 "stringio.c"
        var $11=HEAP[$10]; //@line 264 "stringio.c"
        var $12=HEAP[$self_addr]; //@line 264 "stringio.c"
        var $13=(($12+12)&4294967295); //@line 264 "stringio.c"
        var $14=HEAP[$13]; //@line 264 "stringio.c"
        var $15=(($11+2*$14)&4294967295); //@line 264 "stringio.c"
        HEAP[$start]=$15; //@line 264 "stringio.c"
        var $16=HEAP[$limit_addr]; //@line 265 "stringio.c"
        var $17=((($16))|0) < 0; //@line 265 "stringio.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 265 "stringio.c"
      case 3: // $bb2
        var $18=HEAP[$self_addr]; //@line 265 "stringio.c"
        var $19=(($18+16)&4294967295); //@line 265 "stringio.c"
        var $20=HEAP[$19]; //@line 265 "stringio.c"
        var $21=HEAP[$self_addr]; //@line 265 "stringio.c"
        var $22=(($21+12)&4294967295); //@line 265 "stringio.c"
        var $23=HEAP[$22]; //@line 265 "stringio.c"
        var $24=((($20) - ($23))&4294967295); //@line 265 "stringio.c"
        var $25=HEAP[$limit_addr]; //@line 265 "stringio.c"
        var $26=((($24))|0) < ((($25))|0); //@line 265 "stringio.c"
        if ($26) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 265 "stringio.c"
      case 4: // $bb3
        var $27=HEAP[$self_addr]; //@line 266 "stringio.c"
        var $28=(($27+16)&4294967295); //@line 266 "stringio.c"
        var $29=HEAP[$28]; //@line 266 "stringio.c"
        var $30=HEAP[$self_addr]; //@line 266 "stringio.c"
        var $31=(($30+12)&4294967295); //@line 266 "stringio.c"
        var $32=HEAP[$31]; //@line 266 "stringio.c"
        var $33=((($29) - ($32))&4294967295); //@line 266 "stringio.c"
        HEAP[$limit_addr]=$33; //@line 266 "stringio.c"
        __label__ = 5; break; //@line 266 "stringio.c"
      case 5: // $bb4
        var $34=HEAP[$start]; //@line 268 "stringio.c"
        var $35=HEAP[$limit_addr]; //@line 268 "stringio.c"
        var $36=(($34+2*$35)&4294967295); //@line 268 "stringio.c"
        HEAP[$end]=$36; //@line 268 "stringio.c"
        var $37=HEAP[$end]; //@line 269 "stringio.c"
        var $38=HEAP[$37]; //@line 269 "stringio.c"
        HEAP[$old_char]=$38; //@line 269 "stringio.c"
        var $39=HEAP[$end]; //@line 270 "stringio.c"
        HEAP[$39]=0; //@line 270 "stringio.c"
        var $40=HEAP[$self_addr]; //@line 271 "stringio.c"
        var $41=(($40+32)&4294967295); //@line 271 "stringio.c"
        var $42=HEAP[$41]; //@line 271 "stringio.c"
        var $43=HEAP[$self_addr]; //@line 271 "stringio.c"
        var $44=(($43+26)&4294967295); //@line 271 "stringio.c"
        var $45=HEAP[$44]; //@line 271 "stringio.c"
        var $46=reSign(($45), 8, 0); //@line 271 "stringio.c"
        var $47=HEAP[$self_addr]; //@line 271 "stringio.c"
        var $48=(($47+27)&4294967295); //@line 271 "stringio.c"
        var $49=HEAP[$48]; //@line 271 "stringio.c"
        var $50=reSign(($49), 8, 0); //@line 271 "stringio.c"
        var $51=HEAP[$start]; //@line 271 "stringio.c"
        var $52=HEAP[$end]; //@line 271 "stringio.c"
        var $53=__PyIO_find_line_ending($50, $46, $42, $51, $52, $consumed); //@line 271 "stringio.c"
        HEAP[$len]=$53; //@line 271 "stringio.c"
        var $54=HEAP[$end]; //@line 274 "stringio.c"
        var $55=HEAP[$old_char]; //@line 274 "stringio.c"
        HEAP[$54]=$55; //@line 274 "stringio.c"
        var $56=HEAP[$len]; //@line 277 "stringio.c"
        var $57=((($56))|0) < 0; //@line 277 "stringio.c"
        if ($57) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 277 "stringio.c"
      case 6: // $bb5
        var $58=HEAP[$limit_addr]; //@line 278 "stringio.c"
        HEAP[$len]=$58; //@line 278 "stringio.c"
        __label__ = 7; break; //@line 278 "stringio.c"
      case 7: // $bb6
        var $59=HEAP[$self_addr]; //@line 279 "stringio.c"
        var $60=(($59+12)&4294967295); //@line 279 "stringio.c"
        var $61=HEAP[$60]; //@line 279 "stringio.c"
        var $62=HEAP[$len]; //@line 279 "stringio.c"
        var $63=((($61) + ($62))&4294967295); //@line 279 "stringio.c"
        var $64=HEAP[$self_addr]; //@line 279 "stringio.c"
        var $65=(($64+12)&4294967295); //@line 279 "stringio.c"
        HEAP[$65]=$63; //@line 279 "stringio.c"
        var $66=HEAP[$start]; //@line 280 "stringio.c"
        var $67=HEAP[$len]; //@line 280 "stringio.c"
        var $68=_PyUnicodeUCS2_FromUnicode($66, $67); //@line 280 "stringio.c"
        HEAP[$0]=$68; //@line 280 "stringio.c"
        __label__ = 8; break; //@line 280 "stringio.c"
      case 8: // $bb7
        var $69=HEAP[$0]; //@line 262 "stringio.c"
        HEAP[$retval]=$69; //@line 262 "stringio.c"
        __label__ = 9; break; //@line 262 "stringio.c"
      case 9: // $return
        var $retval8=HEAP[$retval]; //@line 262 "stringio.c"
        STACKTOP = __stackBase__;
        return $retval8; //@line 262 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_readline($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $arg=__stackBase__+16;
        var $limit=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$arg]=__Py_NoneStruct; //@line 291 "stringio.c"
        HEAP[$limit]=-1; //@line 292 "stringio.c"
        var $1=HEAP[$self_addr]; //@line 294 "stringio.c"
        var $2=(($1+24)&4294967295); //@line 294 "stringio.c"
        var $3=HEAP[$2]; //@line 294 "stringio.c"
        var $4=reSign(($3), 8, 0) <= 0; //@line 294 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 294 "stringio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 294 "stringio.c"
        _PyErr_SetString($5, ((__str7326)&4294967295)); //@line 294 "stringio.c"
        HEAP[$0]=0; //@line 294 "stringio.c"
        __label__ = 14; break; //@line 294 "stringio.c"
      case 2: // $bb1
        var $6=HEAP[$args_addr]; //@line 295 "stringio.c"
        var $7=__PyArg_ParseTuple_SizeT($6, ((__str12331)&4294967295), $arg); //@line 295 "stringio.c"
        var $8=((($7))|0)==0; //@line 295 "stringio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 295 "stringio.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 296 "stringio.c"
        __label__ = 14; break; //@line 296 "stringio.c"
      case 4: // $bb3
        var $9=HEAP[$self_addr]; //@line 297 "stringio.c"
        var $10=(($9+25)&4294967295); //@line 297 "stringio.c"
        var $11=HEAP[$10]; //@line 297 "stringio.c"
        var $12=reSign(($11), 8, 0)!=0; //@line 297 "stringio.c"
        if ($12) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 297 "stringio.c"
      case 5: // $bb4
        var $13=HEAP[_PyExc_ValueError]; //@line 297 "stringio.c"
        _PyErr_SetString($13, ((__str8327)&4294967295)); //@line 297 "stringio.c"
        HEAP[$0]=0; //@line 297 "stringio.c"
        __label__ = 14; break; //@line 297 "stringio.c"
      case 6: // $bb5
        var $14=HEAP[$arg]; //@line 299 "stringio.c"
        var $15=_PyNumber_Check($14); //@line 299 "stringio.c"
        var $16=((($15))|0)!=0; //@line 299 "stringio.c"
        if ($16) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 299 "stringio.c"
      case 7: // $bb6
        var $17=HEAP[_PyExc_OverflowError]; //@line 300 "stringio.c"
        var $18=HEAP[$arg]; //@line 300 "stringio.c"
        var $19=_PyNumber_AsSsize_t($18, $17); //@line 300 "stringio.c"
        HEAP[$limit]=$19; //@line 300 "stringio.c"
        var $20=HEAP[$limit]; //@line 301 "stringio.c"
        var $21=((($20))|0)==-1; //@line 301 "stringio.c"
        if ($21) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 301 "stringio.c"
      case 8: // $bb7
        var $22=_PyErr_Occurred(); //@line 301 "stringio.c"
        var $23=($22)!=0; //@line 301 "stringio.c"
        if ($23) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 301 "stringio.c"
      case 9: // $bb8
        HEAP[$0]=0; //@line 302 "stringio.c"
        __label__ = 14; break; //@line 302 "stringio.c"
      case 10: // $bb9
        __label__ = 13; break; //@line 302 "stringio.c"
      case 11: // $bb10
        var $24=HEAP[$arg]; //@line 304 "stringio.c"
        var $25=($24)!=(__Py_NoneStruct); //@line 304 "stringio.c"
        if ($25) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 304 "stringio.c"
      case 12: // $bb11
        var $26=HEAP[$arg]; //@line 305 "stringio.c"
        var $27=(($26+4)&4294967295); //@line 305 "stringio.c"
        var $28=HEAP[$27]; //@line 305 "stringio.c"
        var $29=(($28+12)&4294967295); //@line 305 "stringio.c"
        var $30=HEAP[$29]; //@line 305 "stringio.c"
        var $31=HEAP[_PyExc_TypeError]; //@line 305 "stringio.c"
        var $32=_PyErr_Format($31, ((__str10329)&4294967295), $30); //@line 305 "stringio.c"
        HEAP[$0]=0; //@line 307 "stringio.c"
        __label__ = 14; break; //@line 307 "stringio.c"
      case 13: // $bb12
        var $33=HEAP[$self_addr]; //@line 309 "stringio.c"
        var $34=HEAP[$limit]; //@line 309 "stringio.c"
        var $35=__stringio_readline($33, $34); //@line 309 "stringio.c"
        HEAP[$0]=$35; //@line 309 "stringio.c"
        __label__ = 14; break; //@line 309 "stringio.c"
      case 14: // $bb13
        var $36=HEAP[$0]; //@line 294 "stringio.c"
        HEAP[$retval]=$36; //@line 294 "stringio.c"
        __label__ = 15; break; //@line 294 "stringio.c"
      case 15: // $return
        var $retval14=HEAP[$retval]; //@line 294 "stringio.c"
        STACKTOP = __stackBase__;
        return $retval14; //@line 294 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_iternext($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $line=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 317 "stringio.c"
        var $2=(($1+24)&4294967295); //@line 317 "stringio.c"
        var $3=HEAP[$2]; //@line 317 "stringio.c"
        var $4=reSign(($3), 8, 0) <= 0; //@line 317 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 317 "stringio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 317 "stringio.c"
        _PyErr_SetString($5, ((__str7326)&4294967295)); //@line 317 "stringio.c"
        HEAP[$0]=0; //@line 317 "stringio.c"
        __label__ = 18; break; //@line 317 "stringio.c"
      case 2: // $bb1
        var $6=HEAP[$self_addr]; //@line 318 "stringio.c"
        var $7=(($6+25)&4294967295); //@line 318 "stringio.c"
        var $8=HEAP[$7]; //@line 318 "stringio.c"
        var $9=reSign(($8), 8, 0)!=0; //@line 318 "stringio.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 318 "stringio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 318 "stringio.c"
        _PyErr_SetString($10, ((__str8327)&4294967295)); //@line 318 "stringio.c"
        HEAP[$0]=0; //@line 318 "stringio.c"
        __label__ = 18; break; //@line 318 "stringio.c"
      case 4: // $bb3
        var $11=HEAP[$self_addr]; //@line 320 "stringio.c"
        var $12=$11; //@line 320 "stringio.c"
        var $13=(($12+4)&4294967295); //@line 320 "stringio.c"
        var $14=HEAP[$13]; //@line 320 "stringio.c"
        var $15=($14)==(_PyStringIO_Type); //@line 320 "stringio.c"
        if ($15) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 320 "stringio.c"
      case 5: // $bb4
        var $16=HEAP[$self_addr]; //@line 322 "stringio.c"
        var $17=__stringio_readline($16, -1); //@line 322 "stringio.c"
        HEAP[$line]=$17; //@line 322 "stringio.c"
        __label__ = 11; break; //@line 322 "stringio.c"
      case 6: // $bb5
        var $18=HEAP[__PyIO_str_readline]; //@line 326 "stringio.c"
        var $19=HEAP[$self_addr]; //@line 326 "stringio.c"
        var $20=$19; //@line 326 "stringio.c"
        var $21=_PyObject_CallMethodObjArgs($20, $18, 0); //@line 326 "stringio.c"
        HEAP[$line]=$21; //@line 326 "stringio.c"
        var $22=HEAP[$line]; //@line 328 "stringio.c"
        var $23=($22)!=0; //@line 328 "stringio.c"
        if ($23) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 328 "stringio.c"
      case 7: // $bb6
        var $24=HEAP[$line]; //@line 328 "stringio.c"
        var $25=(($24+4)&4294967295); //@line 328 "stringio.c"
        var $26=HEAP[$25]; //@line 328 "stringio.c"
        var $27=(($26+84)&4294967295); //@line 328 "stringio.c"
        var $28=HEAP[$27]; //@line 328 "stringio.c"
        var $29=($28) & 268435456; //@line 328 "stringio.c"
        var $30=((($29))|0)==0; //@line 328 "stringio.c"
        if ($30) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 328 "stringio.c"
      case 8: // $bb7
        var $31=HEAP[$line]; //@line 329 "stringio.c"
        var $32=(($31+4)&4294967295); //@line 329 "stringio.c"
        var $33=HEAP[$32]; //@line 329 "stringio.c"
        var $34=(($33+12)&4294967295); //@line 329 "stringio.c"
        var $35=HEAP[$34]; //@line 329 "stringio.c"
        var $36=HEAP[_PyExc_IOError]; //@line 329 "stringio.c"
        var $37=_PyErr_Format($36, ((__str13332)&4294967295), $35); //@line 329 "stringio.c"
        var $38=HEAP[$line]; //@line 332 "stringio.c"
        var $39=(($38)&4294967295); //@line 332 "stringio.c"
        var $40=HEAP[$39]; //@line 332 "stringio.c"
        var $41=((($40) - 1)&4294967295); //@line 332 "stringio.c"
        var $42=HEAP[$line]; //@line 332 "stringio.c"
        var $43=(($42)&4294967295); //@line 332 "stringio.c"
        HEAP[$43]=$41; //@line 332 "stringio.c"
        var $44=HEAP[$line]; //@line 332 "stringio.c"
        var $45=(($44)&4294967295); //@line 332 "stringio.c"
        var $46=HEAP[$45]; //@line 332 "stringio.c"
        var $47=((($46))|0)==0; //@line 332 "stringio.c"
        if ($47) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 332 "stringio.c"
      case 9: // $bb8
        var $48=HEAP[$line]; //@line 332 "stringio.c"
        var $49=(($48+4)&4294967295); //@line 332 "stringio.c"
        var $50=HEAP[$49]; //@line 332 "stringio.c"
        var $51=(($50+24)&4294967295); //@line 332 "stringio.c"
        var $52=HEAP[$51]; //@line 332 "stringio.c"
        var $53=HEAP[$line]; //@line 332 "stringio.c"
        FUNCTION_TABLE[$52]($53); //@line 332 "stringio.c"
        __label__ = 10; break; //@line 332 "stringio.c"
      case 10: // $bb9
        HEAP[$0]=0; //@line 333 "stringio.c"
        __label__ = 18; break; //@line 333 "stringio.c"
      case 11: // $bb10
        var $54=HEAP[$line]; //@line 337 "stringio.c"
        var $55=($54)==0; //@line 337 "stringio.c"
        if ($55) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 337 "stringio.c"
      case 12: // $bb11
        HEAP[$0]=0; //@line 338 "stringio.c"
        __label__ = 18; break; //@line 338 "stringio.c"
      case 13: // $bb12
        var $56=HEAP[$line]; //@line 340 "stringio.c"
        var $57=$56; //@line 340 "stringio.c"
        var $58=(($57+8)&4294967295); //@line 340 "stringio.c"
        var $59=HEAP[$58]; //@line 340 "stringio.c"
        var $60=((($59))|0)==0; //@line 340 "stringio.c"
        if ($60) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 340 "stringio.c"
      case 14: // $bb13
        var $61=HEAP[$line]; //@line 342 "stringio.c"
        var $62=(($61)&4294967295); //@line 342 "stringio.c"
        var $63=HEAP[$62]; //@line 342 "stringio.c"
        var $64=((($63) - 1)&4294967295); //@line 342 "stringio.c"
        var $65=HEAP[$line]; //@line 342 "stringio.c"
        var $66=(($65)&4294967295); //@line 342 "stringio.c"
        HEAP[$66]=$64; //@line 342 "stringio.c"
        var $67=HEAP[$line]; //@line 342 "stringio.c"
        var $68=(($67)&4294967295); //@line 342 "stringio.c"
        var $69=HEAP[$68]; //@line 342 "stringio.c"
        var $70=((($69))|0)==0; //@line 342 "stringio.c"
        if ($70) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 342 "stringio.c"
      case 15: // $bb14
        var $71=HEAP[$line]; //@line 342 "stringio.c"
        var $72=(($71+4)&4294967295); //@line 342 "stringio.c"
        var $73=HEAP[$72]; //@line 342 "stringio.c"
        var $74=(($73+24)&4294967295); //@line 342 "stringio.c"
        var $75=HEAP[$74]; //@line 342 "stringio.c"
        var $76=HEAP[$line]; //@line 342 "stringio.c"
        FUNCTION_TABLE[$75]($76); //@line 342 "stringio.c"
        __label__ = 16; break; //@line 342 "stringio.c"
      case 16: // $bb15
        HEAP[$0]=0; //@line 343 "stringio.c"
        __label__ = 18; break; //@line 343 "stringio.c"
      case 17: // $bb16
        var $77=HEAP[$line]; //@line 346 "stringio.c"
        HEAP[$0]=$77; //@line 346 "stringio.c"
        __label__ = 18; break; //@line 346 "stringio.c"
      case 18: // $bb17
        var $78=HEAP[$0]; //@line 317 "stringio.c"
        HEAP[$retval]=$78; //@line 317 "stringio.c"
        __label__ = 19; break; //@line 317 "stringio.c"
      case 19: // $return
        var $retval18=HEAP[$retval]; //@line 317 "stringio.c"
        STACKTOP = __stackBase__;
        return $retval18; //@line 317 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_truncate($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $size=__stackBase__+16;
        var $arg=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$arg]=__Py_NoneStruct; //@line 360 "stringio.c"
        var $1=HEAP[$self_addr]; //@line 362 "stringio.c"
        var $2=(($1+24)&4294967295); //@line 362 "stringio.c"
        var $3=HEAP[$2]; //@line 362 "stringio.c"
        var $4=reSign(($3), 8, 0) <= 0; //@line 362 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 362 "stringio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 362 "stringio.c"
        _PyErr_SetString($5, ((__str7326)&4294967295)); //@line 362 "stringio.c"
        HEAP[$0]=0; //@line 362 "stringio.c"
        __label__ = 21; break; //@line 362 "stringio.c"
      case 2: // $bb1
        var $6=HEAP[$args_addr]; //@line 363 "stringio.c"
        var $7=__PyArg_ParseTuple_SizeT($6, ((__str14333)&4294967295), $arg); //@line 363 "stringio.c"
        var $8=((($7))|0)==0; //@line 363 "stringio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 363 "stringio.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 364 "stringio.c"
        __label__ = 21; break; //@line 364 "stringio.c"
      case 4: // $bb3
        var $9=HEAP[$self_addr]; //@line 365 "stringio.c"
        var $10=(($9+25)&4294967295); //@line 365 "stringio.c"
        var $11=HEAP[$10]; //@line 365 "stringio.c"
        var $12=reSign(($11), 8, 0)!=0; //@line 365 "stringio.c"
        if ($12) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 365 "stringio.c"
      case 5: // $bb4
        var $13=HEAP[_PyExc_ValueError]; //@line 365 "stringio.c"
        _PyErr_SetString($13, ((__str8327)&4294967295)); //@line 365 "stringio.c"
        HEAP[$0]=0; //@line 365 "stringio.c"
        __label__ = 21; break; //@line 365 "stringio.c"
      case 6: // $bb5
        var $14=HEAP[$arg]; //@line 367 "stringio.c"
        var $15=_PyNumber_Check($14); //@line 367 "stringio.c"
        var $16=((($15))|0)!=0; //@line 367 "stringio.c"
        if ($16) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 367 "stringio.c"
      case 7: // $bb6
        var $17=HEAP[_PyExc_OverflowError]; //@line 368 "stringio.c"
        var $18=HEAP[$arg]; //@line 368 "stringio.c"
        var $19=_PyNumber_AsSsize_t($18, $17); //@line 368 "stringio.c"
        HEAP[$size]=$19; //@line 368 "stringio.c"
        var $20=HEAP[$size]; //@line 369 "stringio.c"
        var $21=((($20))|0)==-1; //@line 369 "stringio.c"
        if ($21) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 369 "stringio.c"
      case 8: // $bb7
        var $22=_PyErr_Occurred(); //@line 369 "stringio.c"
        var $23=($22)!=0; //@line 369 "stringio.c"
        if ($23) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 369 "stringio.c"
      case 9: // $bb8
        HEAP[$0]=0; //@line 370 "stringio.c"
        __label__ = 21; break; //@line 370 "stringio.c"
      case 10: // $bb9
        __label__ = 14; break; //@line 370 "stringio.c"
      case 11: // $bb10
        var $24=HEAP[$arg]; //@line 372 "stringio.c"
        var $25=($24)==(__Py_NoneStruct); //@line 372 "stringio.c"
        if ($25) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 372 "stringio.c"
      case 12: // $bb11
        var $26=HEAP[$self_addr]; //@line 374 "stringio.c"
        var $27=(($26+12)&4294967295); //@line 374 "stringio.c"
        var $28=HEAP[$27]; //@line 374 "stringio.c"
        HEAP[$size]=$28; //@line 374 "stringio.c"
        __label__ = 14; break; //@line 374 "stringio.c"
      case 13: // $bb12
        var $29=HEAP[$arg]; //@line 377 "stringio.c"
        var $30=(($29+4)&4294967295); //@line 377 "stringio.c"
        var $31=HEAP[$30]; //@line 377 "stringio.c"
        var $32=(($31+12)&4294967295); //@line 377 "stringio.c"
        var $33=HEAP[$32]; //@line 377 "stringio.c"
        var $34=HEAP[_PyExc_TypeError]; //@line 377 "stringio.c"
        var $35=_PyErr_Format($34, ((__str10329)&4294967295), $33); //@line 377 "stringio.c"
        HEAP[$0]=0; //@line 379 "stringio.c"
        __label__ = 21; break; //@line 379 "stringio.c"
      case 14: // $bb13
        var $36=HEAP[$size]; //@line 382 "stringio.c"
        var $37=((($36))|0) < 0; //@line 382 "stringio.c"
        if ($37) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 382 "stringio.c"
      case 15: // $bb14
        var $38=HEAP[_PyExc_ValueError]; //@line 383 "stringio.c"
        var $39=HEAP[$size]; //@line 383 "stringio.c"
        var $40=_PyErr_Format($38, ((__str15334)&4294967295), $39); //@line 383 "stringio.c"
        HEAP[$0]=0; //@line 385 "stringio.c"
        __label__ = 21; break; //@line 385 "stringio.c"
      case 16: // $bb15
        var $41=HEAP[$self_addr]; //@line 388 "stringio.c"
        var $42=(($41+16)&4294967295); //@line 388 "stringio.c"
        var $43=HEAP[$42]; //@line 388 "stringio.c"
        var $44=HEAP[$size]; //@line 388 "stringio.c"
        var $45=((($43))|0) > ((($44))|0); //@line 388 "stringio.c"
        if ($45) { __label__ = 17; break; } else { __label__ = 20; break; } //@line 388 "stringio.c"
      case 17: // $bb16
        var $46=HEAP[$size]; //@line 389 "stringio.c"
        var $47=HEAP[$self_addr]; //@line 389 "stringio.c"
        var $48=_resize_buffer373($47, $46); //@line 389 "stringio.c"
        var $49=((($48))|0) < 0; //@line 389 "stringio.c"
        if ($49) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 389 "stringio.c"
      case 18: // $bb17
        HEAP[$0]=0; //@line 390 "stringio.c"
        __label__ = 21; break; //@line 390 "stringio.c"
      case 19: // $bb18
        var $50=HEAP[$self_addr]; //@line 391 "stringio.c"
        var $51=(($50+16)&4294967295); //@line 391 "stringio.c"
        var $52=HEAP[$size]; //@line 391 "stringio.c"
        HEAP[$51]=$52; //@line 391 "stringio.c"
        __label__ = 20; break; //@line 391 "stringio.c"
      case 20: // $bb19
        var $53=HEAP[$size]; //@line 394 "stringio.c"
        var $54=_PyLong_FromSsize_t($53); //@line 394 "stringio.c"
        HEAP[$0]=$54; //@line 394 "stringio.c"
        __label__ = 21; break; //@line 394 "stringio.c"
      case 21: // $bb20
        var $55=HEAP[$0]; //@line 362 "stringio.c"
        HEAP[$retval]=$55; //@line 362 "stringio.c"
        __label__ = 22; break; //@line 362 "stringio.c"
      case 22: // $return
        var $retval21=HEAP[$retval]; //@line 362 "stringio.c"
        STACKTOP = __stackBase__;
        return $retval21; //@line 362 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_seek($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $posobj=__stackBase__+16;
        var $pos=__stackBase__+20;
        var $mode=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$mode]=0; //@line 411 "stringio.c"
        var $1=HEAP[$self_addr]; //@line 413 "stringio.c"
        var $2=(($1+24)&4294967295); //@line 413 "stringio.c"
        var $3=HEAP[$2]; //@line 413 "stringio.c"
        var $4=reSign(($3), 8, 0) <= 0; //@line 413 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 413 "stringio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 413 "stringio.c"
        _PyErr_SetString($5, ((__str7326)&4294967295)); //@line 413 "stringio.c"
        HEAP[$0]=0; //@line 413 "stringio.c"
        __label__ = 24; break; //@line 413 "stringio.c"
      case 2: // $bb1
        var $6=HEAP[$args_addr]; //@line 414 "stringio.c"
        var $7=__PyArg_ParseTuple_SizeT($6, ((__str16335)&4294967295), $posobj, $mode); //@line 414 "stringio.c"
        var $8=((($7))|0)==0; //@line 414 "stringio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 414 "stringio.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 415 "stringio.c"
        __label__ = 24; break; //@line 415 "stringio.c"
      case 4: // $bb3
        var $9=HEAP[_PyExc_OverflowError]; //@line 417 "stringio.c"
        var $10=HEAP[$posobj]; //@line 417 "stringio.c"
        var $11=_PyNumber_AsSsize_t($10, $9); //@line 417 "stringio.c"
        HEAP[$pos]=$11; //@line 417 "stringio.c"
        var $12=HEAP[$pos]; //@line 418 "stringio.c"
        var $13=((($12))|0)==-1; //@line 418 "stringio.c"
        if ($13) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 418 "stringio.c"
      case 5: // $bb4
        var $14=_PyErr_Occurred(); //@line 418 "stringio.c"
        var $15=($14)!=0; //@line 418 "stringio.c"
        if ($15) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 418 "stringio.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 419 "stringio.c"
        __label__ = 24; break; //@line 419 "stringio.c"
      case 7: // $bb6
        var $16=HEAP[$self_addr]; //@line 421 "stringio.c"
        var $17=(($16+25)&4294967295); //@line 421 "stringio.c"
        var $18=HEAP[$17]; //@line 421 "stringio.c"
        var $19=reSign(($18), 8, 0)!=0; //@line 421 "stringio.c"
        if ($19) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 421 "stringio.c"
      case 8: // $bb7
        var $20=HEAP[_PyExc_ValueError]; //@line 421 "stringio.c"
        _PyErr_SetString($20, ((__str8327)&4294967295)); //@line 421 "stringio.c"
        HEAP[$0]=0; //@line 421 "stringio.c"
        __label__ = 24; break; //@line 421 "stringio.c"
      case 9: // $bb8
        var $21=HEAP[$mode]; //@line 423 "stringio.c"
        var $22=((($21))|0)==0; //@line 423 "stringio.c"
        if ($22) { __label__ = 13; break; } else { __label__ = 10; break; } //@line 423 "stringio.c"
      case 10: // $bb9
        var $23=HEAP[$mode]; //@line 423 "stringio.c"
        var $24=((($23))|0)==1; //@line 423 "stringio.c"
        if ($24) { __label__ = 13; break; } else { __label__ = 11; break; } //@line 423 "stringio.c"
      case 11: // $bb10
        var $25=HEAP[$mode]; //@line 423 "stringio.c"
        var $26=((($25))|0)==2; //@line 423 "stringio.c"
        if ($26) { __label__ = 13; break; } else { __label__ = 12; break; } //@line 423 "stringio.c"
      case 12: // $bb11
        var $27=HEAP[$mode]; //@line 424 "stringio.c"
        var $28=HEAP[_PyExc_ValueError]; //@line 424 "stringio.c"
        var $29=_PyErr_Format($28, ((__str17336)&4294967295), $27); //@line 424 "stringio.c"
        HEAP[$0]=0; //@line 426 "stringio.c"
        __label__ = 24; break; //@line 426 "stringio.c"
      case 13: // $bb12
        var $30=HEAP[$pos]; //@line 428 "stringio.c"
        var $31=((($30))|0) >= 0; //@line 428 "stringio.c"
        if ($31) { __label__ = 16; break; } else { __label__ = 14; break; } //@line 428 "stringio.c"
      case 14: // $bb13
        var $32=HEAP[$mode]; //@line 428 "stringio.c"
        var $33=((($32))|0)!=0; //@line 428 "stringio.c"
        if ($33) { __label__ = 16; break; } else { __label__ = 15; break; } //@line 428 "stringio.c"
      case 15: // $bb14
        var $34=HEAP[_PyExc_ValueError]; //@line 429 "stringio.c"
        var $35=HEAP[$pos]; //@line 429 "stringio.c"
        var $36=_PyErr_Format($34, ((__str18337)&4294967295), $35); //@line 429 "stringio.c"
        HEAP[$0]=0; //@line 431 "stringio.c"
        __label__ = 24; break; //@line 431 "stringio.c"
      case 16: // $bb15
        var $37=HEAP[$mode]; //@line 433 "stringio.c"
        var $38=((($37))|0)!=0; //@line 433 "stringio.c"
        if ($38) { __label__ = 17; break; } else { __label__ = 19; break; } //@line 433 "stringio.c"
      case 17: // $bb16
        var $39=HEAP[$pos]; //@line 433 "stringio.c"
        var $40=((($39))|0)!=0; //@line 433 "stringio.c"
        if ($40) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 433 "stringio.c"
      case 18: // $bb17
        var $41=HEAP[_PyExc_IOError]; //@line 434 "stringio.c"
        _PyErr_SetString($41, ((__str19338)&4294967295)); //@line 434 "stringio.c"
        HEAP[$0]=0; //@line 436 "stringio.c"
        __label__ = 24; break; //@line 436 "stringio.c"
      case 19: // $bb18
        var $42=HEAP[$mode]; //@line 442 "stringio.c"
        var $43=((($42))|0)==1; //@line 442 "stringio.c"
        if ($43) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 442 "stringio.c"
      case 20: // $bb19
        var $44=HEAP[$self_addr]; //@line 443 "stringio.c"
        var $45=(($44+12)&4294967295); //@line 443 "stringio.c"
        var $46=HEAP[$45]; //@line 443 "stringio.c"
        HEAP[$pos]=$46; //@line 443 "stringio.c"
        __label__ = 23; break; //@line 443 "stringio.c"
      case 21: // $bb20
        var $47=HEAP[$mode]; //@line 445 "stringio.c"
        var $48=((($47))|0)==2; //@line 445 "stringio.c"
        if ($48) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 445 "stringio.c"
      case 22: // $bb21
        var $49=HEAP[$self_addr]; //@line 446 "stringio.c"
        var $50=(($49+16)&4294967295); //@line 446 "stringio.c"
        var $51=HEAP[$50]; //@line 446 "stringio.c"
        HEAP[$pos]=$51; //@line 446 "stringio.c"
        __label__ = 23; break; //@line 446 "stringio.c"
      case 23: // $bb22
        var $52=HEAP[$self_addr]; //@line 449 "stringio.c"
        var $53=(($52+12)&4294967295); //@line 449 "stringio.c"
        var $54=HEAP[$pos]; //@line 449 "stringio.c"
        HEAP[$53]=$54; //@line 449 "stringio.c"
        var $55=HEAP[$self_addr]; //@line 451 "stringio.c"
        var $56=(($55+12)&4294967295); //@line 451 "stringio.c"
        var $57=HEAP[$56]; //@line 451 "stringio.c"
        var $58=_PyLong_FromSsize_t($57); //@line 451 "stringio.c"
        HEAP[$0]=$58; //@line 451 "stringio.c"
        __label__ = 24; break; //@line 451 "stringio.c"
      case 24: // $bb23
        var $59=HEAP[$0]; //@line 413 "stringio.c"
        HEAP[$retval]=$59; //@line 413 "stringio.c"
        __label__ = 25; break; //@line 413 "stringio.c"
      case 25: // $return
        var $retval24=HEAP[$retval]; //@line 413 "stringio.c"
        STACKTOP = __stackBase__;
        return $retval24; //@line 413 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_write($self, $obj) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $obj_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $size=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$obj_addr]=$obj;
        var $1=HEAP[$self_addr]; //@line 465 "stringio.c"
        var $2=(($1+24)&4294967295); //@line 465 "stringio.c"
        var $3=HEAP[$2]; //@line 465 "stringio.c"
        var $4=reSign(($3), 8, 0) <= 0; //@line 465 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 465 "stringio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 465 "stringio.c"
        _PyErr_SetString($5, ((__str7326)&4294967295)); //@line 465 "stringio.c"
        HEAP[$0]=0; //@line 465 "stringio.c"
        __label__ = 10; break; //@line 465 "stringio.c"
      case 2: // $bb1
        var $6=HEAP[$obj_addr]; //@line 466 "stringio.c"
        var $7=(($6+4)&4294967295); //@line 466 "stringio.c"
        var $8=HEAP[$7]; //@line 466 "stringio.c"
        var $9=(($8+84)&4294967295); //@line 466 "stringio.c"
        var $10=HEAP[$9]; //@line 466 "stringio.c"
        var $11=($10) & 268435456; //@line 466 "stringio.c"
        var $12=((($11))|0)==0; //@line 466 "stringio.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 466 "stringio.c"
      case 3: // $bb2
        var $13=HEAP[$obj_addr]; //@line 467 "stringio.c"
        var $14=(($13+4)&4294967295); //@line 467 "stringio.c"
        var $15=HEAP[$14]; //@line 467 "stringio.c"
        var $16=(($15+12)&4294967295); //@line 467 "stringio.c"
        var $17=HEAP[$16]; //@line 467 "stringio.c"
        var $18=HEAP[_PyExc_TypeError]; //@line 467 "stringio.c"
        var $19=_PyErr_Format($18, ((__str20339)&4294967295), $17); //@line 467 "stringio.c"
        HEAP[$0]=0; //@line 469 "stringio.c"
        __label__ = 10; break; //@line 469 "stringio.c"
      case 4: // $bb3
        var $20=HEAP[$self_addr]; //@line 471 "stringio.c"
        var $21=(($20+25)&4294967295); //@line 471 "stringio.c"
        var $22=HEAP[$21]; //@line 471 "stringio.c"
        var $23=reSign(($22), 8, 0)!=0; //@line 471 "stringio.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 471 "stringio.c"
      case 5: // $bb4
        var $24=HEAP[_PyExc_ValueError]; //@line 471 "stringio.c"
        _PyErr_SetString($24, ((__str8327)&4294967295)); //@line 471 "stringio.c"
        HEAP[$0]=0; //@line 471 "stringio.c"
        __label__ = 10; break; //@line 471 "stringio.c"
      case 6: // $bb5
        var $25=HEAP[$obj_addr]; //@line 472 "stringio.c"
        var $26=$25; //@line 472 "stringio.c"
        var $27=(($26+8)&4294967295); //@line 472 "stringio.c"
        var $28=HEAP[$27]; //@line 472 "stringio.c"
        HEAP[$size]=$28; //@line 472 "stringio.c"
        var $29=HEAP[$size]; //@line 474 "stringio.c"
        var $30=((($29))|0) > 0; //@line 474 "stringio.c"
        if ($30) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 474 "stringio.c"
      case 7: // $bb6
        var $31=HEAP[$self_addr]; //@line 474 "stringio.c"
        var $32=HEAP[$obj_addr]; //@line 474 "stringio.c"
        var $33=_write_str($31, $32); //@line 474 "stringio.c"
        var $34=((($33))|0) < 0; //@line 474 "stringio.c"
        if ($34) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 474 "stringio.c"
      case 8: // $bb7
        HEAP[$0]=0; //@line 475 "stringio.c"
        __label__ = 10; break; //@line 475 "stringio.c"
      case 9: // $bb8
        var $35=HEAP[$size]; //@line 477 "stringio.c"
        var $36=_PyLong_FromSsize_t($35); //@line 477 "stringio.c"
        HEAP[$0]=$36; //@line 477 "stringio.c"
        __label__ = 10; break; //@line 477 "stringio.c"
      case 10: // $bb9
        var $37=HEAP[$0]; //@line 465 "stringio.c"
        HEAP[$retval]=$37; //@line 465 "stringio.c"
        __label__ = 11; break; //@line 465 "stringio.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 465 "stringio.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 465 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_close($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_py_tmp=__stackBase__+12;
        var $_py_tmp6=__stackBase__+16;
        var $_py_tmp10=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 489 "stringio.c"
        var $2=(($1+25)&4294967295); //@line 489 "stringio.c"
        HEAP[$2]=1; //@line 489 "stringio.c"
        var $3=HEAP[$self_addr]; //@line 491 "stringio.c"
        var $4=_resize_buffer373($3, 0); //@line 491 "stringio.c"
        var $5=((($4))|0) < 0; //@line 491 "stringio.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 491 "stringio.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 492 "stringio.c"
        __label__ = 12; break; //@line 492 "stringio.c"
      case 2: // $bb1
        var $6=HEAP[$self_addr]; //@line 493 "stringio.c"
        var $7=(($6+32)&4294967295); //@line 493 "stringio.c"
        var $8=HEAP[$7]; //@line 493 "stringio.c"
        var $9=($8)!=0; //@line 493 "stringio.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 493 "stringio.c"
      case 3: // $bb2
        var $10=HEAP[$self_addr]; //@line 493 "stringio.c"
        var $11=(($10+32)&4294967295); //@line 493 "stringio.c"
        var $12=HEAP[$11]; //@line 493 "stringio.c"
        HEAP[$_py_tmp]=$12; //@line 493 "stringio.c"
        var $13=HEAP[$self_addr]; //@line 493 "stringio.c"
        var $14=(($13+32)&4294967295); //@line 493 "stringio.c"
        HEAP[$14]=0; //@line 493 "stringio.c"
        var $15=HEAP[$_py_tmp]; //@line 493 "stringio.c"
        var $16=(($15)&4294967295); //@line 493 "stringio.c"
        var $17=HEAP[$16]; //@line 493 "stringio.c"
        var $18=((($17) - 1)&4294967295); //@line 493 "stringio.c"
        var $19=HEAP[$_py_tmp]; //@line 493 "stringio.c"
        var $20=(($19)&4294967295); //@line 493 "stringio.c"
        HEAP[$20]=$18; //@line 493 "stringio.c"
        var $21=HEAP[$_py_tmp]; //@line 493 "stringio.c"
        var $22=(($21)&4294967295); //@line 493 "stringio.c"
        var $23=HEAP[$22]; //@line 493 "stringio.c"
        var $24=((($23))|0)==0; //@line 493 "stringio.c"
        if ($24) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 493 "stringio.c"
      case 4: // $bb3
        var $25=HEAP[$_py_tmp]; //@line 493 "stringio.c"
        var $26=(($25+4)&4294967295); //@line 493 "stringio.c"
        var $27=HEAP[$26]; //@line 493 "stringio.c"
        var $28=(($27+24)&4294967295); //@line 493 "stringio.c"
        var $29=HEAP[$28]; //@line 493 "stringio.c"
        var $30=HEAP[$_py_tmp]; //@line 493 "stringio.c"
        FUNCTION_TABLE[$29]($30); //@line 493 "stringio.c"
        __label__ = 5; break; //@line 493 "stringio.c"
      case 5: // $bb4
        var $31=HEAP[$self_addr]; //@line 494 "stringio.c"
        var $32=(($31+36)&4294967295); //@line 494 "stringio.c"
        var $33=HEAP[$32]; //@line 494 "stringio.c"
        var $34=($33)!=0; //@line 494 "stringio.c"
        if ($34) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 494 "stringio.c"
      case 6: // $bb5
        var $35=HEAP[$self_addr]; //@line 494 "stringio.c"
        var $36=(($35+36)&4294967295); //@line 494 "stringio.c"
        var $37=HEAP[$36]; //@line 494 "stringio.c"
        HEAP[$_py_tmp6]=$37; //@line 494 "stringio.c"
        var $38=HEAP[$self_addr]; //@line 494 "stringio.c"
        var $39=(($38+36)&4294967295); //@line 494 "stringio.c"
        HEAP[$39]=0; //@line 494 "stringio.c"
        var $40=HEAP[$_py_tmp6]; //@line 494 "stringio.c"
        var $41=(($40)&4294967295); //@line 494 "stringio.c"
        var $42=HEAP[$41]; //@line 494 "stringio.c"
        var $43=((($42) - 1)&4294967295); //@line 494 "stringio.c"
        var $44=HEAP[$_py_tmp6]; //@line 494 "stringio.c"
        var $45=(($44)&4294967295); //@line 494 "stringio.c"
        HEAP[$45]=$43; //@line 494 "stringio.c"
        var $46=HEAP[$_py_tmp6]; //@line 494 "stringio.c"
        var $47=(($46)&4294967295); //@line 494 "stringio.c"
        var $48=HEAP[$47]; //@line 494 "stringio.c"
        var $49=((($48))|0)==0; //@line 494 "stringio.c"
        if ($49) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 494 "stringio.c"
      case 7: // $bb7
        var $50=HEAP[$_py_tmp6]; //@line 494 "stringio.c"
        var $51=(($50+4)&4294967295); //@line 494 "stringio.c"
        var $52=HEAP[$51]; //@line 494 "stringio.c"
        var $53=(($52+24)&4294967295); //@line 494 "stringio.c"
        var $54=HEAP[$53]; //@line 494 "stringio.c"
        var $55=HEAP[$_py_tmp6]; //@line 494 "stringio.c"
        FUNCTION_TABLE[$54]($55); //@line 494 "stringio.c"
        __label__ = 8; break; //@line 494 "stringio.c"
      case 8: // $bb8
        var $56=HEAP[$self_addr]; //@line 495 "stringio.c"
        var $57=(($56+28)&4294967295); //@line 495 "stringio.c"
        var $58=HEAP[$57]; //@line 495 "stringio.c"
        var $59=($58)!=0; //@line 495 "stringio.c"
        if ($59) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 495 "stringio.c"
      case 9: // $bb9
        var $60=HEAP[$self_addr]; //@line 495 "stringio.c"
        var $61=(($60+28)&4294967295); //@line 495 "stringio.c"
        var $62=HEAP[$61]; //@line 495 "stringio.c"
        HEAP[$_py_tmp10]=$62; //@line 495 "stringio.c"
        var $63=HEAP[$self_addr]; //@line 495 "stringio.c"
        var $64=(($63+28)&4294967295); //@line 495 "stringio.c"
        HEAP[$64]=0; //@line 495 "stringio.c"
        var $65=HEAP[$_py_tmp10]; //@line 495 "stringio.c"
        var $66=(($65)&4294967295); //@line 495 "stringio.c"
        var $67=HEAP[$66]; //@line 495 "stringio.c"
        var $68=((($67) - 1)&4294967295); //@line 495 "stringio.c"
        var $69=HEAP[$_py_tmp10]; //@line 495 "stringio.c"
        var $70=(($69)&4294967295); //@line 495 "stringio.c"
        HEAP[$70]=$68; //@line 495 "stringio.c"
        var $71=HEAP[$_py_tmp10]; //@line 495 "stringio.c"
        var $72=(($71)&4294967295); //@line 495 "stringio.c"
        var $73=HEAP[$72]; //@line 495 "stringio.c"
        var $74=((($73))|0)==0; //@line 495 "stringio.c"
        if ($74) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 495 "stringio.c"
      case 10: // $bb11
        var $75=HEAP[$_py_tmp10]; //@line 495 "stringio.c"
        var $76=(($75+4)&4294967295); //@line 495 "stringio.c"
        var $77=HEAP[$76]; //@line 495 "stringio.c"
        var $78=(($77+24)&4294967295); //@line 495 "stringio.c"
        var $79=HEAP[$78]; //@line 495 "stringio.c"
        var $80=HEAP[$_py_tmp10]; //@line 495 "stringio.c"
        FUNCTION_TABLE[$79]($80); //@line 495 "stringio.c"
        __label__ = 11; break; //@line 495 "stringio.c"
      case 11: // $bb12
        var $81=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 496 "stringio.c"
        var $82=((($81) + 1)&4294967295); //@line 496 "stringio.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$82; //@line 496 "stringio.c"
        HEAP[$0]=__Py_NoneStruct; //@line 496 "stringio.c"
        __label__ = 12; break; //@line 496 "stringio.c"
      case 12: // $bb13
        var $83=HEAP[$0]; //@line 492 "stringio.c"
        HEAP[$retval]=$83; //@line 492 "stringio.c"
        __label__ = 13; break; //@line 492 "stringio.c"
      case 13: // $return
        var $retval14=HEAP[$retval]; //@line 492 "stringio.c"
        STACKTOP = __stackBase__;
        return $retval14; //@line 492 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_traverse($self, $visit, $arg) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $visit_addr=__stackBase__+4;
        var $arg_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $vret=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$visit_addr]=$visit;
        HEAP[$arg_addr]=$arg;
        var $1=HEAP[$self_addr]; //@line 502 "stringio.c"
        var $2=(($1+40)&4294967295); //@line 502 "stringio.c"
        var $3=HEAP[$2]; //@line 502 "stringio.c"
        var $4=($3)!=0; //@line 502 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 502 "stringio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 502 "stringio.c"
        var $6=(($5+40)&4294967295); //@line 502 "stringio.c"
        var $7=HEAP[$6]; //@line 502 "stringio.c"
        var $8=HEAP[$visit_addr]; //@line 502 "stringio.c"
        var $9=HEAP[$arg_addr]; //@line 502 "stringio.c"
        var $10=FUNCTION_TABLE[$8]($7, $9); //@line 502 "stringio.c"
        HEAP[$vret]=$10; //@line 502 "stringio.c"
        var $11=HEAP[$vret]; //@line 502 "stringio.c"
        var $12=((($11))|0)!=0; //@line 502 "stringio.c"
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 502 "stringio.c"
      case 2: // $bb1
        var $13=HEAP[$vret]; //@line 502 "stringio.c"
        HEAP[$0]=$13; //@line 502 "stringio.c"
        __label__ = 4; break; //@line 502 "stringio.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 503 "stringio.c"
        __label__ = 4; break; //@line 503 "stringio.c"
      case 4: // $bb3
        var $14=HEAP[$0]; //@line 502 "stringio.c"
        HEAP[$retval]=$14; //@line 502 "stringio.c"
        __label__ = 5; break; //@line 502 "stringio.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 502 "stringio.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 502 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_clear($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_py_tmp=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 509 "stringio.c"
        var $2=(($1+40)&4294967295); //@line 509 "stringio.c"
        var $3=HEAP[$2]; //@line 509 "stringio.c"
        var $4=($3)!=0; //@line 509 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 509 "stringio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 509 "stringio.c"
        var $6=(($5+40)&4294967295); //@line 509 "stringio.c"
        var $7=HEAP[$6]; //@line 509 "stringio.c"
        HEAP[$_py_tmp]=$7; //@line 509 "stringio.c"
        var $8=HEAP[$self_addr]; //@line 509 "stringio.c"
        var $9=(($8+40)&4294967295); //@line 509 "stringio.c"
        HEAP[$9]=0; //@line 509 "stringio.c"
        var $10=HEAP[$_py_tmp]; //@line 509 "stringio.c"
        var $11=(($10)&4294967295); //@line 509 "stringio.c"
        var $12=HEAP[$11]; //@line 509 "stringio.c"
        var $13=((($12) - 1)&4294967295); //@line 509 "stringio.c"
        var $14=HEAP[$_py_tmp]; //@line 509 "stringio.c"
        var $15=(($14)&4294967295); //@line 509 "stringio.c"
        HEAP[$15]=$13; //@line 509 "stringio.c"
        var $16=HEAP[$_py_tmp]; //@line 509 "stringio.c"
        var $17=(($16)&4294967295); //@line 509 "stringio.c"
        var $18=HEAP[$17]; //@line 509 "stringio.c"
        var $19=((($18))|0)==0; //@line 509 "stringio.c"
        if ($19) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 509 "stringio.c"
      case 2: // $bb1
        var $20=HEAP[$_py_tmp]; //@line 509 "stringio.c"
        var $21=(($20+4)&4294967295); //@line 509 "stringio.c"
        var $22=HEAP[$21]; //@line 509 "stringio.c"
        var $23=(($22+24)&4294967295); //@line 509 "stringio.c"
        var $24=HEAP[$23]; //@line 509 "stringio.c"
        var $25=HEAP[$_py_tmp]; //@line 509 "stringio.c"
        FUNCTION_TABLE[$24]($25); //@line 509 "stringio.c"
        __label__ = 3; break; //@line 509 "stringio.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 510 "stringio.c"
        var $26=HEAP[$0]; //@line 510 "stringio.c"
        HEAP[$retval]=$26; //@line 510 "stringio.c"
        __label__ = 4; break; //@line 510 "stringio.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 510 "stringio.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 510 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_dealloc($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $g=__stackBase__+4;
        var $_py_tmp=__stackBase__+8;
        var $_py_tmp8=__stackBase__+12;
        var $_py_tmp12=__stackBase__+16;
        var $_py_tmp16=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $0=HEAP[$self_addr]; //@line 516 "stringio.c"
        var $1=$0; //@line 516 "stringio.c"
        var $2=(($1+-12)&4294967295); //@line 516 "stringio.c"
        HEAP[$g]=$2; //@line 516 "stringio.c"
        var $3=HEAP[$g]; //@line 516 "stringio.c"
        var $4=(($3)&4294967295); //@line 516 "stringio.c"
        var $5=(($4+8)&4294967295); //@line 516 "stringio.c"
        var $6=HEAP[$5]; //@line 516 "stringio.c"
        var $7=((($6))|0)==-2; //@line 516 "stringio.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 516 "stringio.c"
      case 1: // $bb
        ___assert_fail(((__str21340)&4294967295), ((__str1320)&4294967295), 516, ((___PRETTY_FUNCTION___9021)&4294967295)); //@line 516 "stringio.c"
        throw "Reached an unreachable! Original .ll line: 23820"; //@line 516 "stringio.c"
      case 2: // $bb1
        var $8=HEAP[$g]; //@line 516 "stringio.c"
        var $9=(($8)&4294967295); //@line 516 "stringio.c"
        var $10=(($9+8)&4294967295); //@line 516 "stringio.c"
        HEAP[$10]=-2; //@line 516 "stringio.c"
        var $11=HEAP[$g]; //@line 516 "stringio.c"
        var $12=(($11)&4294967295); //@line 516 "stringio.c"
        var $13=(($12+4)&4294967295); //@line 516 "stringio.c"
        var $14=HEAP[$13]; //@line 516 "stringio.c"
        var $15=HEAP[$g]; //@line 516 "stringio.c"
        var $16=(($15)&4294967295); //@line 516 "stringio.c"
        var $17=(($16)&4294967295); //@line 516 "stringio.c"
        var $18=HEAP[$17]; //@line 516 "stringio.c"
        var $19=(($14)&4294967295); //@line 516 "stringio.c"
        var $20=(($19)&4294967295); //@line 516 "stringio.c"
        HEAP[$20]=$18; //@line 516 "stringio.c"
        var $21=HEAP[$g]; //@line 516 "stringio.c"
        var $22=(($21)&4294967295); //@line 516 "stringio.c"
        var $23=(($22)&4294967295); //@line 516 "stringio.c"
        var $24=HEAP[$23]; //@line 516 "stringio.c"
        var $25=HEAP[$g]; //@line 516 "stringio.c"
        var $26=(($25)&4294967295); //@line 516 "stringio.c"
        var $27=(($26+4)&4294967295); //@line 516 "stringio.c"
        var $28=HEAP[$27]; //@line 516 "stringio.c"
        var $29=(($24)&4294967295); //@line 516 "stringio.c"
        var $30=(($29+4)&4294967295); //@line 516 "stringio.c"
        HEAP[$30]=$28; //@line 516 "stringio.c"
        var $31=HEAP[$g]; //@line 516 "stringio.c"
        var $32=(($31)&4294967295); //@line 516 "stringio.c"
        var $33=(($32)&4294967295); //@line 516 "stringio.c"
        HEAP[$33]=0; //@line 516 "stringio.c"
        var $34=HEAP[$self_addr]; //@line 517 "stringio.c"
        var $35=(($34+24)&4294967295); //@line 517 "stringio.c"
        HEAP[$35]=0; //@line 517 "stringio.c"
        var $36=HEAP[$self_addr]; //@line 518 "stringio.c"
        var $37=(($36+8)&4294967295); //@line 518 "stringio.c"
        var $38=HEAP[$37]; //@line 518 "stringio.c"
        var $39=($38)!=0; //@line 518 "stringio.c"
        if ($39) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 518 "stringio.c"
      case 3: // $bb2
        var $40=HEAP[$self_addr]; //@line 519 "stringio.c"
        var $41=(($40+8)&4294967295); //@line 519 "stringio.c"
        var $42=HEAP[$41]; //@line 519 "stringio.c"
        var $43=$42; //@line 519 "stringio.c"
        _PyMem_Free($43); //@line 519 "stringio.c"
        var $44=HEAP[$self_addr]; //@line 520 "stringio.c"
        var $45=(($44+8)&4294967295); //@line 520 "stringio.c"
        HEAP[$45]=0; //@line 520 "stringio.c"
        __label__ = 4; break; //@line 520 "stringio.c"
      case 4: // $bb3
        var $46=HEAP[$self_addr]; //@line 522 "stringio.c"
        var $47=(($46+32)&4294967295); //@line 522 "stringio.c"
        var $48=HEAP[$47]; //@line 522 "stringio.c"
        var $49=($48)!=0; //@line 522 "stringio.c"
        if ($49) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 522 "stringio.c"
      case 5: // $bb4
        var $50=HEAP[$self_addr]; //@line 522 "stringio.c"
        var $51=(($50+32)&4294967295); //@line 522 "stringio.c"
        var $52=HEAP[$51]; //@line 522 "stringio.c"
        HEAP[$_py_tmp]=$52; //@line 522 "stringio.c"
        var $53=HEAP[$self_addr]; //@line 522 "stringio.c"
        var $54=(($53+32)&4294967295); //@line 522 "stringio.c"
        HEAP[$54]=0; //@line 522 "stringio.c"
        var $55=HEAP[$_py_tmp]; //@line 522 "stringio.c"
        var $56=(($55)&4294967295); //@line 522 "stringio.c"
        var $57=HEAP[$56]; //@line 522 "stringio.c"
        var $58=((($57) - 1)&4294967295); //@line 522 "stringio.c"
        var $59=HEAP[$_py_tmp]; //@line 522 "stringio.c"
        var $60=(($59)&4294967295); //@line 522 "stringio.c"
        HEAP[$60]=$58; //@line 522 "stringio.c"
        var $61=HEAP[$_py_tmp]; //@line 522 "stringio.c"
        var $62=(($61)&4294967295); //@line 522 "stringio.c"
        var $63=HEAP[$62]; //@line 522 "stringio.c"
        var $64=((($63))|0)==0; //@line 522 "stringio.c"
        if ($64) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 522 "stringio.c"
      case 6: // $bb5
        var $65=HEAP[$_py_tmp]; //@line 522 "stringio.c"
        var $66=(($65+4)&4294967295); //@line 522 "stringio.c"
        var $67=HEAP[$66]; //@line 522 "stringio.c"
        var $68=(($67+24)&4294967295); //@line 522 "stringio.c"
        var $69=HEAP[$68]; //@line 522 "stringio.c"
        var $70=HEAP[$_py_tmp]; //@line 522 "stringio.c"
        FUNCTION_TABLE[$69]($70); //@line 522 "stringio.c"
        __label__ = 7; break; //@line 522 "stringio.c"
      case 7: // $bb6
        var $71=HEAP[$self_addr]; //@line 523 "stringio.c"
        var $72=(($71+36)&4294967295); //@line 523 "stringio.c"
        var $73=HEAP[$72]; //@line 523 "stringio.c"
        var $74=($73)!=0; //@line 523 "stringio.c"
        if ($74) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 523 "stringio.c"
      case 8: // $bb7
        var $75=HEAP[$self_addr]; //@line 523 "stringio.c"
        var $76=(($75+36)&4294967295); //@line 523 "stringio.c"
        var $77=HEAP[$76]; //@line 523 "stringio.c"
        HEAP[$_py_tmp8]=$77; //@line 523 "stringio.c"
        var $78=HEAP[$self_addr]; //@line 523 "stringio.c"
        var $79=(($78+36)&4294967295); //@line 523 "stringio.c"
        HEAP[$79]=0; //@line 523 "stringio.c"
        var $80=HEAP[$_py_tmp8]; //@line 523 "stringio.c"
        var $81=(($80)&4294967295); //@line 523 "stringio.c"
        var $82=HEAP[$81]; //@line 523 "stringio.c"
        var $83=((($82) - 1)&4294967295); //@line 523 "stringio.c"
        var $84=HEAP[$_py_tmp8]; //@line 523 "stringio.c"
        var $85=(($84)&4294967295); //@line 523 "stringio.c"
        HEAP[$85]=$83; //@line 523 "stringio.c"
        var $86=HEAP[$_py_tmp8]; //@line 523 "stringio.c"
        var $87=(($86)&4294967295); //@line 523 "stringio.c"
        var $88=HEAP[$87]; //@line 523 "stringio.c"
        var $89=((($88))|0)==0; //@line 523 "stringio.c"
        if ($89) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 523 "stringio.c"
      case 9: // $bb9
        var $90=HEAP[$_py_tmp8]; //@line 523 "stringio.c"
        var $91=(($90+4)&4294967295); //@line 523 "stringio.c"
        var $92=HEAP[$91]; //@line 523 "stringio.c"
        var $93=(($92+24)&4294967295); //@line 523 "stringio.c"
        var $94=HEAP[$93]; //@line 523 "stringio.c"
        var $95=HEAP[$_py_tmp8]; //@line 523 "stringio.c"
        FUNCTION_TABLE[$94]($95); //@line 523 "stringio.c"
        __label__ = 10; break; //@line 523 "stringio.c"
      case 10: // $bb10
        var $96=HEAP[$self_addr]; //@line 524 "stringio.c"
        var $97=(($96+28)&4294967295); //@line 524 "stringio.c"
        var $98=HEAP[$97]; //@line 524 "stringio.c"
        var $99=($98)!=0; //@line 524 "stringio.c"
        if ($99) { __label__ = 11; break; } else { __label__ = 13; break; } //@line 524 "stringio.c"
      case 11: // $bb11
        var $100=HEAP[$self_addr]; //@line 524 "stringio.c"
        var $101=(($100+28)&4294967295); //@line 524 "stringio.c"
        var $102=HEAP[$101]; //@line 524 "stringio.c"
        HEAP[$_py_tmp12]=$102; //@line 524 "stringio.c"
        var $103=HEAP[$self_addr]; //@line 524 "stringio.c"
        var $104=(($103+28)&4294967295); //@line 524 "stringio.c"
        HEAP[$104]=0; //@line 524 "stringio.c"
        var $105=HEAP[$_py_tmp12]; //@line 524 "stringio.c"
        var $106=(($105)&4294967295); //@line 524 "stringio.c"
        var $107=HEAP[$106]; //@line 524 "stringio.c"
        var $108=((($107) - 1)&4294967295); //@line 524 "stringio.c"
        var $109=HEAP[$_py_tmp12]; //@line 524 "stringio.c"
        var $110=(($109)&4294967295); //@line 524 "stringio.c"
        HEAP[$110]=$108; //@line 524 "stringio.c"
        var $111=HEAP[$_py_tmp12]; //@line 524 "stringio.c"
        var $112=(($111)&4294967295); //@line 524 "stringio.c"
        var $113=HEAP[$112]; //@line 524 "stringio.c"
        var $114=((($113))|0)==0; //@line 524 "stringio.c"
        if ($114) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 524 "stringio.c"
      case 12: // $bb13
        var $115=HEAP[$_py_tmp12]; //@line 524 "stringio.c"
        var $116=(($115+4)&4294967295); //@line 524 "stringio.c"
        var $117=HEAP[$116]; //@line 524 "stringio.c"
        var $118=(($117+24)&4294967295); //@line 524 "stringio.c"
        var $119=HEAP[$118]; //@line 524 "stringio.c"
        var $120=HEAP[$_py_tmp12]; //@line 524 "stringio.c"
        FUNCTION_TABLE[$119]($120); //@line 524 "stringio.c"
        __label__ = 13; break; //@line 524 "stringio.c"
      case 13: // $bb14
        var $121=HEAP[$self_addr]; //@line 525 "stringio.c"
        var $122=(($121+40)&4294967295); //@line 525 "stringio.c"
        var $123=HEAP[$122]; //@line 525 "stringio.c"
        var $124=($123)!=0; //@line 525 "stringio.c"
        if ($124) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 525 "stringio.c"
      case 14: // $bb15
        var $125=HEAP[$self_addr]; //@line 525 "stringio.c"
        var $126=(($125+40)&4294967295); //@line 525 "stringio.c"
        var $127=HEAP[$126]; //@line 525 "stringio.c"
        HEAP[$_py_tmp16]=$127; //@line 525 "stringio.c"
        var $128=HEAP[$self_addr]; //@line 525 "stringio.c"
        var $129=(($128+40)&4294967295); //@line 525 "stringio.c"
        HEAP[$129]=0; //@line 525 "stringio.c"
        var $130=HEAP[$_py_tmp16]; //@line 525 "stringio.c"
        var $131=(($130)&4294967295); //@line 525 "stringio.c"
        var $132=HEAP[$131]; //@line 525 "stringio.c"
        var $133=((($132) - 1)&4294967295); //@line 525 "stringio.c"
        var $134=HEAP[$_py_tmp16]; //@line 525 "stringio.c"
        var $135=(($134)&4294967295); //@line 525 "stringio.c"
        HEAP[$135]=$133; //@line 525 "stringio.c"
        var $136=HEAP[$_py_tmp16]; //@line 525 "stringio.c"
        var $137=(($136)&4294967295); //@line 525 "stringio.c"
        var $138=HEAP[$137]; //@line 525 "stringio.c"
        var $139=((($138))|0)==0; //@line 525 "stringio.c"
        if ($139) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 525 "stringio.c"
      case 15: // $bb17
        var $140=HEAP[$_py_tmp16]; //@line 525 "stringio.c"
        var $141=(($140+4)&4294967295); //@line 525 "stringio.c"
        var $142=HEAP[$141]; //@line 525 "stringio.c"
        var $143=(($142+24)&4294967295); //@line 525 "stringio.c"
        var $144=HEAP[$143]; //@line 525 "stringio.c"
        var $145=HEAP[$_py_tmp16]; //@line 525 "stringio.c"
        FUNCTION_TABLE[$144]($145); //@line 525 "stringio.c"
        __label__ = 16; break; //@line 525 "stringio.c"
      case 16: // $bb18
        var $146=HEAP[$self_addr]; //@line 526 "stringio.c"
        var $147=(($146+44)&4294967295); //@line 526 "stringio.c"
        var $148=HEAP[$147]; //@line 526 "stringio.c"
        var $149=($148)!=0; //@line 526 "stringio.c"
        if ($149) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 526 "stringio.c"
      case 17: // $bb19
        var $150=HEAP[$self_addr]; //@line 527 "stringio.c"
        var $151=$150; //@line 527 "stringio.c"
        _PyObject_ClearWeakRefs($151); //@line 527 "stringio.c"
        __label__ = 18; break; //@line 527 "stringio.c"
      case 18: // $bb20
        var $152=HEAP[$self_addr]; //@line 528 "stringio.c"
        var $153=$152; //@line 528 "stringio.c"
        var $154=(($153+4)&4294967295); //@line 528 "stringio.c"
        var $155=HEAP[$154]; //@line 528 "stringio.c"
        var $156=(($155+160)&4294967295); //@line 528 "stringio.c"
        var $157=HEAP[$156]; //@line 528 "stringio.c"
        var $158=HEAP[$self_addr]; //@line 528 "stringio.c"
        var $159=$158; //@line 528 "stringio.c"
        FUNCTION_TABLE[$157]($159); //@line 528 "stringio.c"
        __label__ = 19; break; //@line 529 "stringio.c"
      case 19: // $return
        STACKTOP = __stackBase__;
        return; //@line 529 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_new($type, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $type_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kwds_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $self=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$type_addr]=$type;
        HEAP[$args_addr]=$args;
        HEAP[$kwds_addr]=$kwds;
        var $1=HEAP[$type_addr]; //@line 536 "stringio.c"
        var $2=($1)==0; //@line 536 "stringio.c"
        if ($2) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 536 "stringio.c"
      case 1: // $bb
        var $3=HEAP[$type_addr]; //@line 536 "stringio.c"
        var $4=(($3+152)&4294967295); //@line 536 "stringio.c"
        var $5=HEAP[$4]; //@line 536 "stringio.c"
        var $6=($5)==0; //@line 536 "stringio.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 536 "stringio.c"
      case 2: // $bb1
        ___assert_fail(((__str22341)&4294967295), ((__str1320)&4294967295), 536, ((___PRETTY_FUNCTION___9091)&4294967295)); //@line 536 "stringio.c"
        throw "Reached an unreachable! Original .ll line: 24088"; //@line 536 "stringio.c"
      case 3: // $bb2
        var $7=HEAP[$type_addr]; //@line 537 "stringio.c"
        var $8=(($7+152)&4294967295); //@line 537 "stringio.c"
        var $9=HEAP[$8]; //@line 537 "stringio.c"
        var $10=HEAP[$type_addr]; //@line 537 "stringio.c"
        var $11=FUNCTION_TABLE[$9]($10, 0); //@line 537 "stringio.c"
        var $12=$11; //@line 537 "stringio.c"
        HEAP[$self]=$12; //@line 537 "stringio.c"
        var $13=HEAP[$self]; //@line 538 "stringio.c"
        var $14=($13)==0; //@line 538 "stringio.c"
        if ($14) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 538 "stringio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 539 "stringio.c"
        __label__ = 10; break; //@line 539 "stringio.c"
      case 5: // $bb4
        var $15=_PyMem_Malloc(0); //@line 544 "stringio.c"
        var $16=$15; //@line 544 "stringio.c"
        var $17=HEAP[$self]; //@line 544 "stringio.c"
        var $18=(($17+8)&4294967295); //@line 544 "stringio.c"
        HEAP[$18]=$16; //@line 544 "stringio.c"
        var $19=HEAP[$self]; //@line 545 "stringio.c"
        var $20=(($19+8)&4294967295); //@line 545 "stringio.c"
        var $21=HEAP[$20]; //@line 545 "stringio.c"
        var $22=($21)==0; //@line 545 "stringio.c"
        if ($22) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 545 "stringio.c"
      case 6: // $bb5
        var $23=HEAP[$self]; //@line 546 "stringio.c"
        var $24=$23; //@line 546 "stringio.c"
        var $25=(($24)&4294967295); //@line 546 "stringio.c"
        var $26=HEAP[$25]; //@line 546 "stringio.c"
        var $27=((($26) - 1)&4294967295); //@line 546 "stringio.c"
        var $28=(($24)&4294967295); //@line 546 "stringio.c"
        HEAP[$28]=$27; //@line 546 "stringio.c"
        var $29=(($24)&4294967295); //@line 546 "stringio.c"
        var $30=HEAP[$29]; //@line 546 "stringio.c"
        var $31=((($30))|0)==0; //@line 546 "stringio.c"
        if ($31) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 546 "stringio.c"
      case 7: // $bb6
        var $32=HEAP[$self]; //@line 546 "stringio.c"
        var $33=$32; //@line 546 "stringio.c"
        var $34=(($33+4)&4294967295); //@line 546 "stringio.c"
        var $35=HEAP[$34]; //@line 546 "stringio.c"
        var $36=(($35+24)&4294967295); //@line 546 "stringio.c"
        var $37=HEAP[$36]; //@line 546 "stringio.c"
        var $38=HEAP[$self]; //@line 546 "stringio.c"
        var $39=$38; //@line 546 "stringio.c"
        FUNCTION_TABLE[$37]($39); //@line 546 "stringio.c"
        __label__ = 8; break; //@line 546 "stringio.c"
      case 8: // $bb7
        var $40=_PyErr_NoMemory(); //@line 547 "stringio.c"
        HEAP[$0]=$40; //@line 547 "stringio.c"
        __label__ = 10; break; //@line 547 "stringio.c"
      case 9: // $bb8
        var $41=HEAP[$self]; //@line 550 "stringio.c"
        var $42=$41; //@line 550 "stringio.c"
        HEAP[$0]=$42; //@line 550 "stringio.c"
        __label__ = 10; break; //@line 550 "stringio.c"
      case 10: // $bb9
        var $43=HEAP[$0]; //@line 539 "stringio.c"
        HEAP[$retval]=$43; //@line 539 "stringio.c"
        __label__ = 11; break; //@line 539 "stringio.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 539 "stringio.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 539 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_init($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 60; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 60);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kwds_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $iftmp_90=__stackBase__+16;
        var $0=__stackBase__+20;
        var $kwlist=__stackBase__+24;
        var $value=__stackBase__+36;
        var $newline=__stackBase__+40;
        var $_py_tmp=__stackBase__+44;
        var $_py_tmp21=__stackBase__+48;
        var $_py_tmp25=__stackBase__+52;
        var $len=__stackBase__+56;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$kwds_addr]=$kwds;
        var $1=(($kwlist)&4294967295); //@line 556 "stringio.c"
        var $2=HEAP[((_C_71_9130)&4294967295)]; //@line 556 "stringio.c"
        HEAP[$1]=$2; //@line 556 "stringio.c"
        var $3=(($kwlist+4)&4294967295); //@line 556 "stringio.c"
        var $4=HEAP[((_C_71_9130+4)&4294967295)]; //@line 556 "stringio.c"
        HEAP[$3]=$4; //@line 556 "stringio.c"
        var $5=(($kwlist+8)&4294967295); //@line 556 "stringio.c"
        var $6=HEAP[((_C_71_9130+8)&4294967295)]; //@line 556 "stringio.c"
        HEAP[$5]=$6; //@line 556 "stringio.c"
        HEAP[$value]=0; //@line 557 "stringio.c"
        HEAP[$newline]=((__str25344)&4294967295); //@line 558 "stringio.c"
        var $7=HEAP[$args_addr]; //@line 560 "stringio.c"
        var $8=HEAP[$kwds_addr]; //@line 560 "stringio.c"
        var $kwlist1=$kwlist; //@line 560 "stringio.c"
        var $9=__PyArg_ParseTupleAndKeywords_SizeT($7, $8, ((__str26345)&4294967295), $kwlist1, $value, $newline); //@line 560 "stringio.c"
        var $10=((($9))|0)==0; //@line 560 "stringio.c"
        if ($10) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 560 "stringio.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 562 "stringio.c"
        __label__ = 48; break; //@line 562 "stringio.c"
      case 2: // $bb2
        var $11=HEAP[$newline]; //@line 564 "stringio.c"
        var $12=($11)!=0; //@line 564 "stringio.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 12; break; } //@line 564 "stringio.c"
      case 3: // $bb3
        var $13=HEAP[$newline]; //@line 564 "stringio.c"
        var $14=(($13)&4294967295); //@line 564 "stringio.c"
        var $15=HEAP[$14]; //@line 564 "stringio.c"
        var $16=reSign(($15), 8, 0)!=0; //@line 564 "stringio.c"
        if ($16) { __label__ = 4; break; } else { __label__ = 12; break; } //@line 564 "stringio.c"
      case 4: // $bb4
        var $17=HEAP[$newline]; //@line 564 "stringio.c"
        var $18=(($17)&4294967295); //@line 564 "stringio.c"
        var $19=HEAP[$18]; //@line 564 "stringio.c"
        var $20=reSign(($19), 8, 0)!=10; //@line 564 "stringio.c"
        if ($20) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 564 "stringio.c"
      case 5: // $bb5
        var $21=HEAP[$newline]; //@line 564 "stringio.c"
        var $22=(($21+1)&4294967295); //@line 564 "stringio.c"
        var $23=HEAP[$22]; //@line 564 "stringio.c"
        var $24=reSign(($23), 8, 0)!=0; //@line 564 "stringio.c"
        if ($24) { __label__ = 6; break; } else { __label__ = 12; break; } //@line 564 "stringio.c"
      case 6: // $bb6
        var $25=HEAP[$newline]; //@line 564 "stringio.c"
        var $26=(($25)&4294967295); //@line 564 "stringio.c"
        var $27=HEAP[$26]; //@line 564 "stringio.c"
        var $28=reSign(($27), 8, 0)!=13; //@line 564 "stringio.c"
        if ($28) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 564 "stringio.c"
      case 7: // $bb7
        var $29=HEAP[$newline]; //@line 564 "stringio.c"
        var $30=(($29+1)&4294967295); //@line 564 "stringio.c"
        var $31=HEAP[$30]; //@line 564 "stringio.c"
        var $32=reSign(($31), 8, 0)!=0; //@line 564 "stringio.c"
        if ($32) { __label__ = 8; break; } else { __label__ = 12; break; } //@line 564 "stringio.c"
      case 8: // $bb8
        var $33=HEAP[$newline]; //@line 564 "stringio.c"
        var $34=(($33)&4294967295); //@line 564 "stringio.c"
        var $35=HEAP[$34]; //@line 564 "stringio.c"
        var $36=reSign(($35), 8, 0)!=13; //@line 564 "stringio.c"
        if ($36) { __label__ = 11; break; } else { __label__ = 9; break; } //@line 564 "stringio.c"
      case 9: // $bb9
        var $37=HEAP[$newline]; //@line 564 "stringio.c"
        var $38=(($37+1)&4294967295); //@line 564 "stringio.c"
        var $39=HEAP[$38]; //@line 564 "stringio.c"
        var $40=reSign(($39), 8, 0)!=10; //@line 564 "stringio.c"
        if ($40) { __label__ = 11; break; } else { __label__ = 10; break; } //@line 564 "stringio.c"
      case 10: // $bb10
        var $41=HEAP[$newline]; //@line 564 "stringio.c"
        var $42=(($41+2)&4294967295); //@line 564 "stringio.c"
        var $43=HEAP[$42]; //@line 564 "stringio.c"
        var $44=reSign(($43), 8, 0)!=0; //@line 564 "stringio.c"
        if ($44) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 564 "stringio.c"
      case 11: // $bb11
        var $45=HEAP[$newline]; //@line 568 "stringio.c"
        var $46=HEAP[_PyExc_ValueError]; //@line 568 "stringio.c"
        var $47=_PyErr_Format($46, ((__str27346)&4294967295), $45); //@line 568 "stringio.c"
        HEAP[$0]=-1; //@line 570 "stringio.c"
        __label__ = 48; break; //@line 570 "stringio.c"
      case 12: // $bb12
        var $48=HEAP[$value]; //@line 572 "stringio.c"
        var $49=($48)!=0; //@line 572 "stringio.c"
        if ($49) { __label__ = 13; break; } else { __label__ = 16; break; } //@line 572 "stringio.c"
      case 13: // $bb13
        var $50=HEAP[$value]; //@line 572 "stringio.c"
        var $51=($50)!=(__Py_NoneStruct); //@line 572 "stringio.c"
        if ($51) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 572 "stringio.c"
      case 14: // $bb14
        var $52=HEAP[$value]; //@line 572 "stringio.c"
        var $53=(($52+4)&4294967295); //@line 572 "stringio.c"
        var $54=HEAP[$53]; //@line 572 "stringio.c"
        var $55=(($54+84)&4294967295); //@line 572 "stringio.c"
        var $56=HEAP[$55]; //@line 572 "stringio.c"
        var $57=($56) & 268435456; //@line 572 "stringio.c"
        var $58=((($57))|0)==0; //@line 572 "stringio.c"
        if ($58) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 572 "stringio.c"
      case 15: // $bb15
        var $59=HEAP[$value]; //@line 573 "stringio.c"
        var $60=(($59+4)&4294967295); //@line 573 "stringio.c"
        var $61=HEAP[$60]; //@line 573 "stringio.c"
        var $62=(($61+12)&4294967295); //@line 573 "stringio.c"
        var $63=HEAP[$62]; //@line 573 "stringio.c"
        var $64=HEAP[_PyExc_TypeError]; //@line 573 "stringio.c"
        var $65=_PyErr_Format($64, ((__str28347)&4294967295), $63); //@line 573 "stringio.c"
        HEAP[$0]=-1; //@line 576 "stringio.c"
        __label__ = 48; break; //@line 576 "stringio.c"
      case 16: // $bb16
        var $66=HEAP[$self_addr]; //@line 579 "stringio.c"
        var $67=(($66+24)&4294967295); //@line 579 "stringio.c"
        HEAP[$67]=0; //@line 579 "stringio.c"
        var $68=HEAP[$self_addr]; //@line 581 "stringio.c"
        var $69=(($68+32)&4294967295); //@line 581 "stringio.c"
        var $70=HEAP[$69]; //@line 581 "stringio.c"
        var $71=($70)!=0; //@line 581 "stringio.c"
        if ($71) { __label__ = 17; break; } else { __label__ = 19; break; } //@line 581 "stringio.c"
      case 17: // $bb17
        var $72=HEAP[$self_addr]; //@line 581 "stringio.c"
        var $73=(($72+32)&4294967295); //@line 581 "stringio.c"
        var $74=HEAP[$73]; //@line 581 "stringio.c"
        HEAP[$_py_tmp]=$74; //@line 581 "stringio.c"
        var $75=HEAP[$self_addr]; //@line 581 "stringio.c"
        var $76=(($75+32)&4294967295); //@line 581 "stringio.c"
        HEAP[$76]=0; //@line 581 "stringio.c"
        var $77=HEAP[$_py_tmp]; //@line 581 "stringio.c"
        var $78=(($77)&4294967295); //@line 581 "stringio.c"
        var $79=HEAP[$78]; //@line 581 "stringio.c"
        var $80=((($79) - 1)&4294967295); //@line 581 "stringio.c"
        var $81=HEAP[$_py_tmp]; //@line 581 "stringio.c"
        var $82=(($81)&4294967295); //@line 581 "stringio.c"
        HEAP[$82]=$80; //@line 581 "stringio.c"
        var $83=HEAP[$_py_tmp]; //@line 581 "stringio.c"
        var $84=(($83)&4294967295); //@line 581 "stringio.c"
        var $85=HEAP[$84]; //@line 581 "stringio.c"
        var $86=((($85))|0)==0; //@line 581 "stringio.c"
        if ($86) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 581 "stringio.c"
      case 18: // $bb18
        var $87=HEAP[$_py_tmp]; //@line 581 "stringio.c"
        var $88=(($87+4)&4294967295); //@line 581 "stringio.c"
        var $89=HEAP[$88]; //@line 581 "stringio.c"
        var $90=(($89+24)&4294967295); //@line 581 "stringio.c"
        var $91=HEAP[$90]; //@line 581 "stringio.c"
        var $92=HEAP[$_py_tmp]; //@line 581 "stringio.c"
        FUNCTION_TABLE[$91]($92); //@line 581 "stringio.c"
        __label__ = 19; break; //@line 581 "stringio.c"
      case 19: // $bb19
        var $93=HEAP[$self_addr]; //@line 582 "stringio.c"
        var $94=(($93+36)&4294967295); //@line 582 "stringio.c"
        var $95=HEAP[$94]; //@line 582 "stringio.c"
        var $96=($95)!=0; //@line 582 "stringio.c"
        if ($96) { __label__ = 20; break; } else { __label__ = 22; break; } //@line 582 "stringio.c"
      case 20: // $bb20
        var $97=HEAP[$self_addr]; //@line 582 "stringio.c"
        var $98=(($97+36)&4294967295); //@line 582 "stringio.c"
        var $99=HEAP[$98]; //@line 582 "stringio.c"
        HEAP[$_py_tmp21]=$99; //@line 582 "stringio.c"
        var $100=HEAP[$self_addr]; //@line 582 "stringio.c"
        var $101=(($100+36)&4294967295); //@line 582 "stringio.c"
        HEAP[$101]=0; //@line 582 "stringio.c"
        var $102=HEAP[$_py_tmp21]; //@line 582 "stringio.c"
        var $103=(($102)&4294967295); //@line 582 "stringio.c"
        var $104=HEAP[$103]; //@line 582 "stringio.c"
        var $105=((($104) - 1)&4294967295); //@line 582 "stringio.c"
        var $106=HEAP[$_py_tmp21]; //@line 582 "stringio.c"
        var $107=(($106)&4294967295); //@line 582 "stringio.c"
        HEAP[$107]=$105; //@line 582 "stringio.c"
        var $108=HEAP[$_py_tmp21]; //@line 582 "stringio.c"
        var $109=(($108)&4294967295); //@line 582 "stringio.c"
        var $110=HEAP[$109]; //@line 582 "stringio.c"
        var $111=((($110))|0)==0; //@line 582 "stringio.c"
        if ($111) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 582 "stringio.c"
      case 21: // $bb22
        var $112=HEAP[$_py_tmp21]; //@line 582 "stringio.c"
        var $113=(($112+4)&4294967295); //@line 582 "stringio.c"
        var $114=HEAP[$113]; //@line 582 "stringio.c"
        var $115=(($114+24)&4294967295); //@line 582 "stringio.c"
        var $116=HEAP[$115]; //@line 582 "stringio.c"
        var $117=HEAP[$_py_tmp21]; //@line 582 "stringio.c"
        FUNCTION_TABLE[$116]($117); //@line 582 "stringio.c"
        __label__ = 22; break; //@line 582 "stringio.c"
      case 22: // $bb23
        var $118=HEAP[$self_addr]; //@line 583 "stringio.c"
        var $119=(($118+28)&4294967295); //@line 583 "stringio.c"
        var $120=HEAP[$119]; //@line 583 "stringio.c"
        var $121=($120)!=0; //@line 583 "stringio.c"
        if ($121) { __label__ = 23; break; } else { __label__ = 25; break; } //@line 583 "stringio.c"
      case 23: // $bb24
        var $122=HEAP[$self_addr]; //@line 583 "stringio.c"
        var $123=(($122+28)&4294967295); //@line 583 "stringio.c"
        var $124=HEAP[$123]; //@line 583 "stringio.c"
        HEAP[$_py_tmp25]=$124; //@line 583 "stringio.c"
        var $125=HEAP[$self_addr]; //@line 583 "stringio.c"
        var $126=(($125+28)&4294967295); //@line 583 "stringio.c"
        HEAP[$126]=0; //@line 583 "stringio.c"
        var $127=HEAP[$_py_tmp25]; //@line 583 "stringio.c"
        var $128=(($127)&4294967295); //@line 583 "stringio.c"
        var $129=HEAP[$128]; //@line 583 "stringio.c"
        var $130=((($129) - 1)&4294967295); //@line 583 "stringio.c"
        var $131=HEAP[$_py_tmp25]; //@line 583 "stringio.c"
        var $132=(($131)&4294967295); //@line 583 "stringio.c"
        HEAP[$132]=$130; //@line 583 "stringio.c"
        var $133=HEAP[$_py_tmp25]; //@line 583 "stringio.c"
        var $134=(($133)&4294967295); //@line 583 "stringio.c"
        var $135=HEAP[$134]; //@line 583 "stringio.c"
        var $136=((($135))|0)==0; //@line 583 "stringio.c"
        if ($136) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 583 "stringio.c"
      case 24: // $bb26
        var $137=HEAP[$_py_tmp25]; //@line 583 "stringio.c"
        var $138=(($137+4)&4294967295); //@line 583 "stringio.c"
        var $139=HEAP[$138]; //@line 583 "stringio.c"
        var $140=(($139+24)&4294967295); //@line 583 "stringio.c"
        var $141=HEAP[$140]; //@line 583 "stringio.c"
        var $142=HEAP[$_py_tmp25]; //@line 583 "stringio.c"
        FUNCTION_TABLE[$141]($142); //@line 583 "stringio.c"
        __label__ = 25; break; //@line 583 "stringio.c"
      case 25: // $bb27
        var $143=HEAP[$newline]; //@line 585 "stringio.c"
        var $144=($143)!=0; //@line 585 "stringio.c"
        if ($144) { __label__ = 26; break; } else { __label__ = 28; break; } //@line 585 "stringio.c"
      case 26: // $bb28
        var $145=HEAP[$newline]; //@line 586 "stringio.c"
        var $146=_PyString_FromString($145); //@line 586 "stringio.c"
        var $147=HEAP[$self_addr]; //@line 586 "stringio.c"
        var $148=(($147+32)&4294967295); //@line 586 "stringio.c"
        HEAP[$148]=$146; //@line 586 "stringio.c"
        var $149=HEAP[$self_addr]; //@line 587 "stringio.c"
        var $150=(($149+32)&4294967295); //@line 587 "stringio.c"
        var $151=HEAP[$150]; //@line 587 "stringio.c"
        var $152=($151)==0; //@line 587 "stringio.c"
        if ($152) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 587 "stringio.c"
      case 27: // $bb29
        HEAP[$0]=-1; //@line 588 "stringio.c"
        __label__ = 48; break; //@line 588 "stringio.c"
      case 28: // $bb30
        var $153=HEAP[$newline]; //@line 590 "stringio.c"
        var $154=($153)==0; //@line 590 "stringio.c"
        if ($154) { __label__ = 30; break; } else { __label__ = 29; break; } //@line 590 "stringio.c"
      case 29: // $bb31
        var $155=HEAP[$newline]; //@line 590 "stringio.c"
        var $156=(($155)&4294967295); //@line 590 "stringio.c"
        var $157=HEAP[$156]; //@line 590 "stringio.c"
        var $158=reSign(($157), 8, 0)==0; //@line 590 "stringio.c"
        if ($158) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 590 "stringio.c"
      case 30: // $bb32
        HEAP[$iftmp_90]=1; //@line 590 "stringio.c"
        __label__ = 32; break; //@line 590 "stringio.c"
      case 31: // $bb33
        HEAP[$iftmp_90]=0; //@line 590 "stringio.c"
        __label__ = 32; break; //@line 590 "stringio.c"
      case 32: // $bb34
        var $159=HEAP[$iftmp_90]; //@line 590 "stringio.c"
        var $160=((($159)) & 255); //@line 590 "stringio.c"
        var $161=HEAP[$self_addr]; //@line 590 "stringio.c"
        var $162=(($161+26)&4294967295); //@line 590 "stringio.c"
        HEAP[$162]=$160; //@line 590 "stringio.c"
        var $163=HEAP[$newline]; //@line 591 "stringio.c"
        var $164=($163)==0; //@line 591 "stringio.c"
        var $165=unSign(($164), 1, 0); //@line 591 "stringio.c"
        var $166=HEAP[$self_addr]; //@line 591 "stringio.c"
        var $167=(($166+27)&4294967295); //@line 591 "stringio.c"
        HEAP[$167]=$165; //@line 591 "stringio.c"
        var $168=HEAP[$newline]; //@line 598 "stringio.c"
        var $169=($168)!=0; //@line 598 "stringio.c"
        if ($169) { __label__ = 33; break; } else { __label__ = 35; break; } //@line 598 "stringio.c"
      case 33: // $bb35
        var $170=HEAP[$newline]; //@line 598 "stringio.c"
        var $171=(($170)&4294967295); //@line 598 "stringio.c"
        var $172=HEAP[$171]; //@line 598 "stringio.c"
        var $173=reSign(($172), 8, 0)==13; //@line 598 "stringio.c"
        if ($173) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 598 "stringio.c"
      case 34: // $bb36
        var $174=HEAP[$newline]; //@line 599 "stringio.c"
        var $175=_PyUnicodeUCS2_FromString($174); //@line 599 "stringio.c"
        var $176=HEAP[$self_addr]; //@line 599 "stringio.c"
        var $177=(($176+36)&4294967295); //@line 599 "stringio.c"
        HEAP[$177]=$175; //@line 599 "stringio.c"
        __label__ = 35; break; //@line 599 "stringio.c"
      case 35: // $bb37
        var $178=HEAP[$self_addr]; //@line 602 "stringio.c"
        var $179=(($178+26)&4294967295); //@line 602 "stringio.c"
        var $180=HEAP[$179]; //@line 602 "stringio.c"
        var $181=reSign(($180), 8, 0)!=0; //@line 602 "stringio.c"
        if ($181) { __label__ = 36; break; } else { __label__ = 38; break; } //@line 602 "stringio.c"
      case 36: // $bb38
        var $182=HEAP[$self_addr]; //@line 603 "stringio.c"
        var $183=(($182+27)&4294967295); //@line 603 "stringio.c"
        var $184=HEAP[$183]; //@line 603 "stringio.c"
        var $185=reSign(($184), 8, 0); //@line 603 "stringio.c"
        var $186=__PyObject_CallFunction_SizeT(_PyIncrementalNewlineDecoder_Type, ((__str29348)&4294967295), __Py_NoneStruct, $185); //@line 603 "stringio.c"
        var $187=HEAP[$self_addr]; //@line 603 "stringio.c"
        var $188=(($187+28)&4294967295); //@line 603 "stringio.c"
        HEAP[$188]=$186; //@line 603 "stringio.c"
        var $189=HEAP[$self_addr]; //@line 606 "stringio.c"
        var $190=(($189+28)&4294967295); //@line 606 "stringio.c"
        var $191=HEAP[$190]; //@line 606 "stringio.c"
        var $192=($191)==0; //@line 606 "stringio.c"
        if ($192) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 606 "stringio.c"
      case 37: // $bb39
        HEAP[$0]=-1; //@line 607 "stringio.c"
        __label__ = 48; break; //@line 607 "stringio.c"
      case 38: // $bb40
        var $193=HEAP[$self_addr]; //@line 612 "stringio.c"
        var $194=(($193+16)&4294967295); //@line 612 "stringio.c"
        HEAP[$194]=0; //@line 612 "stringio.c"
        var $195=HEAP[$value]; //@line 613 "stringio.c"
        var $196=($195)==0; //@line 613 "stringio.c"
        if ($196) { __label__ = 45; break; } else { __label__ = 39; break; } //@line 613 "stringio.c"
      case 39: // $bb41
        var $197=HEAP[$value]; //@line 613 "stringio.c"
        var $198=($197)==(__Py_NoneStruct); //@line 613 "stringio.c"
        if ($198) { __label__ = 45; break; } else { __label__ = 40; break; } //@line 613 "stringio.c"
      case 40: // $bb42
        var $199=HEAP[$value]; //@line 614 "stringio.c"
        var $200=_PyUnicodeUCS2_GetSize($199); //@line 614 "stringio.c"
        HEAP[$len]=$200; //@line 614 "stringio.c"
        var $201=HEAP[$len]; //@line 617 "stringio.c"
        var $202=HEAP[$self_addr]; //@line 617 "stringio.c"
        var $203=_resize_buffer373($202, $201); //@line 617 "stringio.c"
        var $204=((($203))|0) < 0; //@line 617 "stringio.c"
        if ($204) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 617 "stringio.c"
      case 41: // $bb43
        HEAP[$0]=-1; //@line 618 "stringio.c"
        __label__ = 48; break; //@line 618 "stringio.c"
      case 42: // $bb44
        var $205=HEAP[$self_addr]; //@line 619 "stringio.c"
        var $206=(($205+12)&4294967295); //@line 619 "stringio.c"
        HEAP[$206]=0; //@line 619 "stringio.c"
        var $207=HEAP[$value]; //@line 620 "stringio.c"
        var $208=HEAP[$self_addr]; //@line 620 "stringio.c"
        var $209=_write_str($208, $207); //@line 620 "stringio.c"
        var $210=((($209))|0) < 0; //@line 620 "stringio.c"
        if ($210) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 620 "stringio.c"
      case 43: // $bb45
        HEAP[$0]=-1; //@line 621 "stringio.c"
        __label__ = 48; break; //@line 621 "stringio.c"
      case 44: // $bb46
        __label__ = 47; break; //@line 621 "stringio.c"
      case 45: // $bb47
        var $211=HEAP[$self_addr]; //@line 624 "stringio.c"
        var $212=_resize_buffer373($211, 0); //@line 624 "stringio.c"
        var $213=((($212))|0) < 0; //@line 624 "stringio.c"
        if ($213) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 624 "stringio.c"
      case 46: // $bb48
        HEAP[$0]=-1; //@line 625 "stringio.c"
        __label__ = 48; break; //@line 625 "stringio.c"
      case 47: // $bb49
        var $214=HEAP[$self_addr]; //@line 627 "stringio.c"
        var $215=(($214+12)&4294967295); //@line 627 "stringio.c"
        HEAP[$215]=0; //@line 627 "stringio.c"
        var $216=HEAP[$self_addr]; //@line 629 "stringio.c"
        var $217=(($216+25)&4294967295); //@line 629 "stringio.c"
        HEAP[$217]=0; //@line 629 "stringio.c"
        var $218=HEAP[$self_addr]; //@line 630 "stringio.c"
        var $219=(($218+24)&4294967295); //@line 630 "stringio.c"
        HEAP[$219]=1; //@line 630 "stringio.c"
        HEAP[$0]=0; //@line 631 "stringio.c"
        __label__ = 48; break; //@line 631 "stringio.c"
      case 48: // $bb50
        var $220=HEAP[$0]; //@line 562 "stringio.c"
        HEAP[$retval]=$220; //@line 562 "stringio.c"
        __label__ = 49; break; //@line 562 "stringio.c"
      case 49: // $return
        var $retval51=HEAP[$retval]; //@line 562 "stringio.c"
        STACKTOP = __stackBase__;
        return $retval51; //@line 562 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_seekable($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 638 "stringio.c"
        var $2=(($1+24)&4294967295); //@line 638 "stringio.c"
        var $3=HEAP[$2]; //@line 638 "stringio.c"
        var $4=reSign(($3), 8, 0) <= 0; //@line 638 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 638 "stringio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 638 "stringio.c"
        _PyErr_SetString($5, ((__str7326)&4294967295)); //@line 638 "stringio.c"
        HEAP[$0]=0; //@line 638 "stringio.c"
        __label__ = 3; break; //@line 638 "stringio.c"
      case 2: // $bb1
        var $6=((__Py_TrueStruct)&4294967295); //@line 639 "stringio.c"
        var $7=HEAP[$6]; //@line 639 "stringio.c"
        var $8=((($7) + 1)&4294967295); //@line 639 "stringio.c"
        var $9=((__Py_TrueStruct)&4294967295); //@line 639 "stringio.c"
        HEAP[$9]=$8; //@line 639 "stringio.c"
        HEAP[$0]=__Py_TrueStruct; //@line 639 "stringio.c"
        __label__ = 3; break; //@line 639 "stringio.c"
      case 3: // $bb2
        var $10=HEAP[$0]; //@line 638 "stringio.c"
        HEAP[$retval]=$10; //@line 638 "stringio.c"
        __label__ = 4; break; //@line 638 "stringio.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 638 "stringio.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 638 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_readable($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 645 "stringio.c"
        var $2=(($1+24)&4294967295); //@line 645 "stringio.c"
        var $3=HEAP[$2]; //@line 645 "stringio.c"
        var $4=reSign(($3), 8, 0) <= 0; //@line 645 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 645 "stringio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 645 "stringio.c"
        _PyErr_SetString($5, ((__str7326)&4294967295)); //@line 645 "stringio.c"
        HEAP[$0]=0; //@line 645 "stringio.c"
        __label__ = 3; break; //@line 645 "stringio.c"
      case 2: // $bb1
        var $6=((__Py_TrueStruct)&4294967295); //@line 646 "stringio.c"
        var $7=HEAP[$6]; //@line 646 "stringio.c"
        var $8=((($7) + 1)&4294967295); //@line 646 "stringio.c"
        var $9=((__Py_TrueStruct)&4294967295); //@line 646 "stringio.c"
        HEAP[$9]=$8; //@line 646 "stringio.c"
        HEAP[$0]=__Py_TrueStruct; //@line 646 "stringio.c"
        __label__ = 3; break; //@line 646 "stringio.c"
      case 3: // $bb2
        var $10=HEAP[$0]; //@line 645 "stringio.c"
        HEAP[$retval]=$10; //@line 645 "stringio.c"
        __label__ = 4; break; //@line 645 "stringio.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 645 "stringio.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 645 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_writable($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 652 "stringio.c"
        var $2=(($1+24)&4294967295); //@line 652 "stringio.c"
        var $3=HEAP[$2]; //@line 652 "stringio.c"
        var $4=reSign(($3), 8, 0) <= 0; //@line 652 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 652 "stringio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 652 "stringio.c"
        _PyErr_SetString($5, ((__str7326)&4294967295)); //@line 652 "stringio.c"
        HEAP[$0]=0; //@line 652 "stringio.c"
        __label__ = 3; break; //@line 652 "stringio.c"
      case 2: // $bb1
        var $6=((__Py_TrueStruct)&4294967295); //@line 653 "stringio.c"
        var $7=HEAP[$6]; //@line 653 "stringio.c"
        var $8=((($7) + 1)&4294967295); //@line 653 "stringio.c"
        var $9=((__Py_TrueStruct)&4294967295); //@line 653 "stringio.c"
        HEAP[$9]=$8; //@line 653 "stringio.c"
        HEAP[$0]=__Py_TrueStruct; //@line 653 "stringio.c"
        __label__ = 3; break; //@line 653 "stringio.c"
      case 3: // $bb2
        var $10=HEAP[$0]; //@line 652 "stringio.c"
        HEAP[$retval]=$10; //@line 652 "stringio.c"
        __label__ = 4; break; //@line 652 "stringio.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 652 "stringio.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 652 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_getstate($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $iftmp_109=__stackBase__+8;
        var $0=__stackBase__+12;
        var $initvalue=__stackBase__+16;
        var $dict=__stackBase__+20;
        var $state=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 671 "stringio.c"
        var $2=_stringio_getvalue($1); //@line 671 "stringio.c"
        HEAP[$initvalue]=$2; //@line 671 "stringio.c"
        var $3=HEAP[$initvalue]; //@line 675 "stringio.c"
        var $4=($3)==0; //@line 675 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 675 "stringio.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 676 "stringio.c"
        __label__ = 12; break; //@line 676 "stringio.c"
      case 2: // $bb1
        var $5=HEAP[$self_addr]; //@line 677 "stringio.c"
        var $6=(($5+40)&4294967295); //@line 677 "stringio.c"
        var $7=HEAP[$6]; //@line 677 "stringio.c"
        var $8=($7)==0; //@line 677 "stringio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 677 "stringio.c"
      case 3: // $bb2
        var $9=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 678 "stringio.c"
        var $10=((($9) + 1)&4294967295); //@line 678 "stringio.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$10; //@line 678 "stringio.c"
        HEAP[$dict]=__Py_NoneStruct; //@line 679 "stringio.c"
        __label__ = 6; break; //@line 679 "stringio.c"
      case 4: // $bb3
        var $11=HEAP[$self_addr]; //@line 682 "stringio.c"
        var $12=(($11+40)&4294967295); //@line 682 "stringio.c"
        var $13=HEAP[$12]; //@line 682 "stringio.c"
        var $14=_PyDict_Copy($13); //@line 682 "stringio.c"
        HEAP[$dict]=$14; //@line 682 "stringio.c"
        var $15=HEAP[$dict]; //@line 683 "stringio.c"
        var $16=($15)==0; //@line 683 "stringio.c"
        if ($16) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 683 "stringio.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 684 "stringio.c"
        __label__ = 12; break; //@line 684 "stringio.c"
      case 6: // $bb5
        var $17=HEAP[$self_addr]; //@line 687 "stringio.c"
        var $18=(($17+12)&4294967295); //@line 687 "stringio.c"
        var $19=HEAP[$18]; //@line 687 "stringio.c"
        var $20=HEAP[$self_addr]; //@line 687 "stringio.c"
        var $21=(($20+32)&4294967295); //@line 687 "stringio.c"
        var $22=HEAP[$21]; //@line 687 "stringio.c"
        var $23=($22)!=0; //@line 687 "stringio.c"
        if ($23) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 687 "stringio.c"
      case 7: // $bb6
        var $24=HEAP[$self_addr]; //@line 687 "stringio.c"
        var $25=(($24+32)&4294967295); //@line 687 "stringio.c"
        var $26=HEAP[$25]; //@line 687 "stringio.c"
        HEAP[$iftmp_109]=$26; //@line 687 "stringio.c"
        __label__ = 9; break; //@line 687 "stringio.c"
      case 8: // $bb7
        HEAP[$iftmp_109]=__Py_NoneStruct; //@line 687 "stringio.c"
        __label__ = 9; break; //@line 687 "stringio.c"
      case 9: // $bb8
        var $27=HEAP[$initvalue]; //@line 687 "stringio.c"
        var $28=HEAP[$iftmp_109]; //@line 687 "stringio.c"
        var $29=HEAP[$dict]; //@line 687 "stringio.c"
        var $30=__Py_BuildValue_SizeT(((__str30349)&4294967295), $27, $28, $19, $29); //@line 687 "stringio.c"
        HEAP[$state]=$30; //@line 687 "stringio.c"
        var $31=HEAP[$initvalue]; //@line 690 "stringio.c"
        var $32=(($31)&4294967295); //@line 690 "stringio.c"
        var $33=HEAP[$32]; //@line 690 "stringio.c"
        var $34=((($33) - 1)&4294967295); //@line 690 "stringio.c"
        var $35=HEAP[$initvalue]; //@line 690 "stringio.c"
        var $36=(($35)&4294967295); //@line 690 "stringio.c"
        HEAP[$36]=$34; //@line 690 "stringio.c"
        var $37=HEAP[$initvalue]; //@line 690 "stringio.c"
        var $38=(($37)&4294967295); //@line 690 "stringio.c"
        var $39=HEAP[$38]; //@line 690 "stringio.c"
        var $40=((($39))|0)==0; //@line 690 "stringio.c"
        if ($40) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 690 "stringio.c"
      case 10: // $bb9
        var $41=HEAP[$initvalue]; //@line 690 "stringio.c"
        var $42=(($41+4)&4294967295); //@line 690 "stringio.c"
        var $43=HEAP[$42]; //@line 690 "stringio.c"
        var $44=(($43+24)&4294967295); //@line 690 "stringio.c"
        var $45=HEAP[$44]; //@line 690 "stringio.c"
        var $46=HEAP[$initvalue]; //@line 690 "stringio.c"
        FUNCTION_TABLE[$45]($46); //@line 690 "stringio.c"
        __label__ = 11; break; //@line 690 "stringio.c"
      case 11: // $bb10
        var $47=HEAP[$state]; //@line 691 "stringio.c"
        HEAP[$0]=$47; //@line 691 "stringio.c"
        __label__ = 12; break; //@line 691 "stringio.c"
      case 12: // $bb11
        var $48=HEAP[$0]; //@line 676 "stringio.c"
        HEAP[$retval]=$48; //@line 676 "stringio.c"
        __label__ = 13; break; //@line 676 "stringio.c"
      case 13: // $return
        var $retval12=HEAP[$retval]; //@line 676 "stringio.c"
        STACKTOP = __stackBase__;
        return $retval12; //@line 676 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_setstate($self, $state) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $state_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $initarg=__stackBase__+16;
        var $position_obj=__stackBase__+20;
        var $dict=__stackBase__+24;
        var $pos=__stackBase__+28;
        var $buf=__stackBase__+32;
        var $bufsize=__stackBase__+36;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$state_addr]=$state;
        var $1=HEAP[$state_addr]; //@line 702 "stringio.c"
        var $2=($1)==0; //@line 702 "stringio.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 702 "stringio.c"
      case 1: // $bb
        ___assert_fail(((__str31350)&4294967295), ((__str1320)&4294967295), 702, ((___PRETTY_FUNCTION___9352)&4294967295)); //@line 702 "stringio.c"
        throw "Reached an unreachable! Original .ll line: 24893"; //@line 702 "stringio.c"
      case 2: // $bb1
        var $3=HEAP[$self_addr]; //@line 703 "stringio.c"
        var $4=(($3+25)&4294967295); //@line 703 "stringio.c"
        var $5=HEAP[$4]; //@line 703 "stringio.c"
        var $6=reSign(($5), 8, 0)!=0; //@line 703 "stringio.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 703 "stringio.c"
      case 3: // $bb2
        var $7=HEAP[_PyExc_ValueError]; //@line 703 "stringio.c"
        _PyErr_SetString($7, ((__str8327)&4294967295)); //@line 703 "stringio.c"
        HEAP[$0]=0; //@line 703 "stringio.c"
        __label__ = 35; break; //@line 703 "stringio.c"
      case 4: // $bb3
        var $8=HEAP[$state_addr]; //@line 708 "stringio.c"
        var $9=(($8+4)&4294967295); //@line 708 "stringio.c"
        var $10=HEAP[$9]; //@line 708 "stringio.c"
        var $11=(($10+84)&4294967295); //@line 708 "stringio.c"
        var $12=HEAP[$11]; //@line 708 "stringio.c"
        var $13=($12) & 67108864; //@line 708 "stringio.c"
        var $14=((($13))|0)==0; //@line 708 "stringio.c"
        if ($14) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 708 "stringio.c"
      case 5: // $bb4
        var $15=HEAP[$state_addr]; //@line 708 "stringio.c"
        var $16=$15; //@line 708 "stringio.c"
        var $17=(($16+8)&4294967295); //@line 708 "stringio.c"
        var $18=HEAP[$17]; //@line 708 "stringio.c"
        var $19=((($18))|0) <= 3; //@line 708 "stringio.c"
        if ($19) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 708 "stringio.c"
      case 6: // $bb5
        var $20=HEAP[$state_addr]; //@line 709 "stringio.c"
        var $21=(($20+4)&4294967295); //@line 709 "stringio.c"
        var $22=HEAP[$21]; //@line 709 "stringio.c"
        var $23=(($22+12)&4294967295); //@line 709 "stringio.c"
        var $24=HEAP[$23]; //@line 709 "stringio.c"
        var $25=HEAP[$self_addr]; //@line 709 "stringio.c"
        var $26=$25; //@line 709 "stringio.c"
        var $27=(($26+4)&4294967295); //@line 709 "stringio.c"
        var $28=HEAP[$27]; //@line 709 "stringio.c"
        var $29=(($28+12)&4294967295); //@line 709 "stringio.c"
        var $30=HEAP[$29]; //@line 709 "stringio.c"
        var $31=HEAP[_PyExc_TypeError]; //@line 709 "stringio.c"
        var $32=_PyErr_Format($31, ((__str32351)&4294967295), $30, $24); //@line 709 "stringio.c"
        HEAP[$0]=0; //@line 712 "stringio.c"
        __label__ = 35; break; //@line 712 "stringio.c"
      case 7: // $bb6
        var $33=HEAP[$state_addr]; //@line 716 "stringio.c"
        var $34=_PyTuple_GetSlice($33, 0, 2); //@line 716 "stringio.c"
        HEAP[$initarg]=$34; //@line 716 "stringio.c"
        var $35=HEAP[$initarg]; //@line 717 "stringio.c"
        var $36=($35)==0; //@line 717 "stringio.c"
        if ($36) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 717 "stringio.c"
      case 8: // $bb7
        HEAP[$0]=0; //@line 718 "stringio.c"
        __label__ = 35; break; //@line 718 "stringio.c"
      case 9: // $bb8
        var $37=HEAP[$self_addr]; //@line 719 "stringio.c"
        var $38=HEAP[$initarg]; //@line 719 "stringio.c"
        var $39=_stringio_init($37, $38, 0); //@line 719 "stringio.c"
        var $40=((($39))|0) < 0; //@line 719 "stringio.c"
        if ($40) { __label__ = 10; break; } else { __label__ = 13; break; } //@line 719 "stringio.c"
      case 10: // $bb9
        var $41=HEAP[$initarg]; //@line 720 "stringio.c"
        var $42=(($41)&4294967295); //@line 720 "stringio.c"
        var $43=HEAP[$42]; //@line 720 "stringio.c"
        var $44=((($43) - 1)&4294967295); //@line 720 "stringio.c"
        var $45=HEAP[$initarg]; //@line 720 "stringio.c"
        var $46=(($45)&4294967295); //@line 720 "stringio.c"
        HEAP[$46]=$44; //@line 720 "stringio.c"
        var $47=HEAP[$initarg]; //@line 720 "stringio.c"
        var $48=(($47)&4294967295); //@line 720 "stringio.c"
        var $49=HEAP[$48]; //@line 720 "stringio.c"
        var $50=((($49))|0)==0; //@line 720 "stringio.c"
        if ($50) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 720 "stringio.c"
      case 11: // $bb10
        var $51=HEAP[$initarg]; //@line 720 "stringio.c"
        var $52=(($51+4)&4294967295); //@line 720 "stringio.c"
        var $53=HEAP[$52]; //@line 720 "stringio.c"
        var $54=(($53+24)&4294967295); //@line 720 "stringio.c"
        var $55=HEAP[$54]; //@line 720 "stringio.c"
        var $56=HEAP[$initarg]; //@line 720 "stringio.c"
        FUNCTION_TABLE[$55]($56); //@line 720 "stringio.c"
        __label__ = 12; break; //@line 720 "stringio.c"
      case 12: // $bb11
        HEAP[$0]=0; //@line 721 "stringio.c"
        __label__ = 35; break; //@line 721 "stringio.c"
      case 13: // $bb12
        var $57=HEAP[$initarg]; //@line 723 "stringio.c"
        var $58=(($57)&4294967295); //@line 723 "stringio.c"
        var $59=HEAP[$58]; //@line 723 "stringio.c"
        var $60=((($59) - 1)&4294967295); //@line 723 "stringio.c"
        var $61=HEAP[$initarg]; //@line 723 "stringio.c"
        var $62=(($61)&4294967295); //@line 723 "stringio.c"
        HEAP[$62]=$60; //@line 723 "stringio.c"
        var $63=HEAP[$initarg]; //@line 723 "stringio.c"
        var $64=(($63)&4294967295); //@line 723 "stringio.c"
        var $65=HEAP[$64]; //@line 723 "stringio.c"
        var $66=((($65))|0)==0; //@line 723 "stringio.c"
        if ($66) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 723 "stringio.c"
      case 14: // $bb13
        var $67=HEAP[$initarg]; //@line 723 "stringio.c"
        var $68=(($67+4)&4294967295); //@line 723 "stringio.c"
        var $69=HEAP[$68]; //@line 723 "stringio.c"
        var $70=(($69+24)&4294967295); //@line 723 "stringio.c"
        var $71=HEAP[$70]; //@line 723 "stringio.c"
        var $72=HEAP[$initarg]; //@line 723 "stringio.c"
        FUNCTION_TABLE[$71]($72); //@line 723 "stringio.c"
        __label__ = 15; break; //@line 723 "stringio.c"
      case 15: // $bb14
        var $73=HEAP[$state_addr]; //@line 732 "stringio.c"
        var $74=$73; //@line 732 "stringio.c"
        var $75=(($74+12)&4294967295); //@line 732 "stringio.c"
        var $76=(($75)&4294967295); //@line 732 "stringio.c"
        var $77=HEAP[$76]; //@line 732 "stringio.c"
        var $78=$77; //@line 732 "stringio.c"
        var $79=(($78+12)&4294967295); //@line 732 "stringio.c"
        var $80=HEAP[$79]; //@line 732 "stringio.c"
        HEAP[$buf]=$80; //@line 732 "stringio.c"
        var $81=HEAP[$state_addr]; //@line 733 "stringio.c"
        var $82=$81; //@line 733 "stringio.c"
        var $83=(($82+12)&4294967295); //@line 733 "stringio.c"
        var $84=(($83)&4294967295); //@line 733 "stringio.c"
        var $85=HEAP[$84]; //@line 733 "stringio.c"
        var $86=$85; //@line 733 "stringio.c"
        var $87=(($86+8)&4294967295); //@line 733 "stringio.c"
        var $88=HEAP[$87]; //@line 733 "stringio.c"
        HEAP[$bufsize]=$88; //@line 733 "stringio.c"
        var $89=HEAP[$bufsize]; //@line 734 "stringio.c"
        var $90=HEAP[$self_addr]; //@line 734 "stringio.c"
        var $91=_resize_buffer373($90, $89); //@line 734 "stringio.c"
        var $92=((($91))|0) < 0; //@line 734 "stringio.c"
        if ($92) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 734 "stringio.c"
      case 16: // $bb15
        HEAP[$0]=0; //@line 735 "stringio.c"
        __label__ = 35; break; //@line 735 "stringio.c"
      case 17: // $bb16
        var $93=HEAP[$bufsize]; //@line 736 "stringio.c"
        var $94=((($93) * 2)&4294967295); //@line 736 "stringio.c"
        var $95=HEAP[$self_addr]; //@line 736 "stringio.c"
        var $96=(($95+8)&4294967295); //@line 736 "stringio.c"
        var $97=HEAP[$96]; //@line 736 "stringio.c"
        var $98=HEAP[$buf]; //@line 736 "stringio.c"
        var $99=$97; //@line 736 "stringio.c"
        var $100=$98; //@line 736 "stringio.c"
        _llvm_memcpy_p0i8_p0i8_i32($99, $100, $94, 1, 0); //@line 736 "stringio.c"
        var $101=HEAP[$self_addr]; //@line 737 "stringio.c"
        var $102=(($101+16)&4294967295); //@line 737 "stringio.c"
        var $103=HEAP[$bufsize]; //@line 737 "stringio.c"
        HEAP[$102]=$103; //@line 737 "stringio.c"
        var $104=HEAP[$state_addr]; //@line 743 "stringio.c"
        var $105=$104; //@line 743 "stringio.c"
        var $106=(($105+12)&4294967295); //@line 743 "stringio.c"
        var $107=(($106+8)&4294967295); //@line 743 "stringio.c"
        var $108=HEAP[$107]; //@line 743 "stringio.c"
        HEAP[$position_obj]=$108; //@line 743 "stringio.c"
        var $109=HEAP[$position_obj]; //@line 744 "stringio.c"
        var $110=(($109+4)&4294967295); //@line 744 "stringio.c"
        var $111=HEAP[$110]; //@line 744 "stringio.c"
        var $112=(($111+48)&4294967295); //@line 744 "stringio.c"
        var $113=HEAP[$112]; //@line 744 "stringio.c"
        var $114=($113)==0; //@line 744 "stringio.c"
        if ($114) { __label__ = 20; break; } else { __label__ = 18; break; } //@line 744 "stringio.c"
      case 18: // $bb17
        var $115=HEAP[$position_obj]; //@line 744 "stringio.c"
        var $116=(($115+4)&4294967295); //@line 744 "stringio.c"
        var $117=HEAP[$116]; //@line 744 "stringio.c"
        var $118=(($117+84)&4294967295); //@line 744 "stringio.c"
        var $119=HEAP[$118]; //@line 744 "stringio.c"
        var $120=($119) & 131072; //@line 744 "stringio.c"
        var $121=((($120))|0)==0; //@line 744 "stringio.c"
        if ($121) { __label__ = 20; break; } else { __label__ = 19; break; } //@line 744 "stringio.c"
      case 19: // $bb18
        var $122=HEAP[$position_obj]; //@line 744 "stringio.c"
        var $123=(($122+4)&4294967295); //@line 744 "stringio.c"
        var $124=HEAP[$123]; //@line 744 "stringio.c"
        var $125=(($124+48)&4294967295); //@line 744 "stringio.c"
        var $126=HEAP[$125]; //@line 744 "stringio.c"
        var $127=(($126+152)&4294967295); //@line 744 "stringio.c"
        var $128=HEAP[$127]; //@line 744 "stringio.c"
        var $129=($128)==0; //@line 744 "stringio.c"
        if ($129) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 744 "stringio.c"
      case 20: // $bb19
        var $130=HEAP[$position_obj]; //@line 745 "stringio.c"
        var $131=(($130+4)&4294967295); //@line 745 "stringio.c"
        var $132=HEAP[$131]; //@line 745 "stringio.c"
        var $133=(($132+12)&4294967295); //@line 745 "stringio.c"
        var $134=HEAP[$133]; //@line 745 "stringio.c"
        var $135=HEAP[_PyExc_TypeError]; //@line 745 "stringio.c"
        var $136=_PyErr_Format($135, ((__str33352)&4294967295), $134); //@line 745 "stringio.c"
        HEAP[$0]=0; //@line 748 "stringio.c"
        __label__ = 35; break; //@line 748 "stringio.c"
      case 21: // $bb20
        var $137=HEAP[_PyExc_OverflowError]; //@line 750 "stringio.c"
        var $138=HEAP[$position_obj]; //@line 750 "stringio.c"
        var $139=_PyNumber_AsSsize_t($138, $137); //@line 750 "stringio.c"
        HEAP[$pos]=$139; //@line 750 "stringio.c"
        var $140=HEAP[$pos]; //@line 751 "stringio.c"
        var $141=((($140))|0)==-1; //@line 751 "stringio.c"
        if ($141) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 751 "stringio.c"
      case 22: // $bb21
        var $142=_PyErr_Occurred(); //@line 751 "stringio.c"
        var $143=($142)!=0; //@line 751 "stringio.c"
        if ($143) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 751 "stringio.c"
      case 23: // $bb22
        HEAP[$0]=0; //@line 752 "stringio.c"
        __label__ = 35; break; //@line 752 "stringio.c"
      case 24: // $bb23
        var $144=HEAP[$pos]; //@line 753 "stringio.c"
        var $145=((($144))|0) < 0; //@line 753 "stringio.c"
        if ($145) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 753 "stringio.c"
      case 25: // $bb24
        var $146=HEAP[_PyExc_ValueError]; //@line 754 "stringio.c"
        _PyErr_SetString($146, ((__str34353)&4294967295)); //@line 754 "stringio.c"
        HEAP[$0]=0; //@line 756 "stringio.c"
        __label__ = 35; break; //@line 756 "stringio.c"
      case 26: // $bb25
        var $147=HEAP[$self_addr]; //@line 758 "stringio.c"
        var $148=(($147+12)&4294967295); //@line 758 "stringio.c"
        var $149=HEAP[$pos]; //@line 758 "stringio.c"
        HEAP[$148]=$149; //@line 758 "stringio.c"
        var $150=HEAP[$state_addr]; //@line 761 "stringio.c"
        var $151=$150; //@line 761 "stringio.c"
        var $152=(($151+12)&4294967295); //@line 761 "stringio.c"
        var $153=(($152+12)&4294967295); //@line 761 "stringio.c"
        var $154=HEAP[$153]; //@line 761 "stringio.c"
        HEAP[$dict]=$154; //@line 761 "stringio.c"
        var $155=HEAP[$dict]; //@line 762 "stringio.c"
        var $156=($155)!=(__Py_NoneStruct); //@line 762 "stringio.c"
        if ($156) { __label__ = 27; break; } else { __label__ = 34; break; } //@line 762 "stringio.c"
      case 27: // $bb26
        var $157=HEAP[$dict]; //@line 763 "stringio.c"
        var $158=(($157+4)&4294967295); //@line 763 "stringio.c"
        var $159=HEAP[$158]; //@line 763 "stringio.c"
        var $160=(($159+84)&4294967295); //@line 763 "stringio.c"
        var $161=HEAP[$160]; //@line 763 "stringio.c"
        var $162=($161) & 536870912; //@line 763 "stringio.c"
        var $163=((($162))|0)==0; //@line 763 "stringio.c"
        if ($163) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 763 "stringio.c"
      case 28: // $bb27
        var $164=HEAP[$dict]; //@line 764 "stringio.c"
        var $165=(($164+4)&4294967295); //@line 764 "stringio.c"
        var $166=HEAP[$165]; //@line 764 "stringio.c"
        var $167=(($166+12)&4294967295); //@line 764 "stringio.c"
        var $168=HEAP[$167]; //@line 764 "stringio.c"
        var $169=HEAP[_PyExc_TypeError]; //@line 764 "stringio.c"
        var $170=_PyErr_Format($169, ((__str35354)&4294967295), $168); //@line 764 "stringio.c"
        HEAP[$0]=0; //@line 767 "stringio.c"
        __label__ = 35; break; //@line 767 "stringio.c"
      case 29: // $bb28
        var $171=HEAP[$self_addr]; //@line 769 "stringio.c"
        var $172=(($171+40)&4294967295); //@line 769 "stringio.c"
        var $173=HEAP[$172]; //@line 769 "stringio.c"
        var $174=($173)!=0; //@line 769 "stringio.c"
        if ($174) { __label__ = 30; break; } else { __label__ = 33; break; } //@line 769 "stringio.c"
      case 30: // $bb29
        var $175=HEAP[$self_addr]; //@line 772 "stringio.c"
        var $176=(($175+40)&4294967295); //@line 772 "stringio.c"
        var $177=HEAP[$176]; //@line 772 "stringio.c"
        var $178=HEAP[$dict]; //@line 772 "stringio.c"
        var $179=_PyDict_Update($177, $178); //@line 772 "stringio.c"
        var $180=((($179))|0) < 0; //@line 772 "stringio.c"
        if ($180) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 772 "stringio.c"
      case 31: // $bb30
        HEAP[$0]=0; //@line 773 "stringio.c"
        __label__ = 35; break; //@line 773 "stringio.c"
      case 32: // $bb31
        __label__ = 34; break; //@line 773 "stringio.c"
      case 33: // $bb32
        var $181=HEAP[$dict]; //@line 776 "stringio.c"
        var $182=(($181)&4294967295); //@line 776 "stringio.c"
        var $183=HEAP[$182]; //@line 776 "stringio.c"
        var $184=((($183) + 1)&4294967295); //@line 776 "stringio.c"
        var $185=HEAP[$dict]; //@line 776 "stringio.c"
        var $186=(($185)&4294967295); //@line 776 "stringio.c"
        HEAP[$186]=$184; //@line 776 "stringio.c"
        var $187=HEAP[$self_addr]; //@line 777 "stringio.c"
        var $188=(($187+40)&4294967295); //@line 777 "stringio.c"
        var $189=HEAP[$dict]; //@line 777 "stringio.c"
        HEAP[$188]=$189; //@line 777 "stringio.c"
        __label__ = 34; break; //@line 777 "stringio.c"
      case 34: // $bb33
        var $190=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 781 "stringio.c"
        var $191=((($190) + 1)&4294967295); //@line 781 "stringio.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$191; //@line 781 "stringio.c"
        HEAP[$0]=__Py_NoneStruct; //@line 781 "stringio.c"
        __label__ = 35; break; //@line 781 "stringio.c"
      case 35: // $bb34
        var $192=HEAP[$0]; //@line 703 "stringio.c"
        HEAP[$retval]=$192; //@line 703 "stringio.c"
        __label__ = 36; break; //@line 703 "stringio.c"
      case 36: // $return
        var $retval35=HEAP[$retval]; //@line 703 "stringio.c"
        STACKTOP = __stackBase__;
        return $retval35; //@line 703 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_closed($self, $context) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $context_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$context_addr]=$context;
        var $1=HEAP[$self_addr]; //@line 788 "stringio.c"
        var $2=(($1+24)&4294967295); //@line 788 "stringio.c"
        var $3=HEAP[$2]; //@line 788 "stringio.c"
        var $4=reSign(($3), 8, 0) <= 0; //@line 788 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 788 "stringio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 788 "stringio.c"
        _PyErr_SetString($5, ((__str7326)&4294967295)); //@line 788 "stringio.c"
        HEAP[$0]=0; //@line 788 "stringio.c"
        __label__ = 3; break; //@line 788 "stringio.c"
      case 2: // $bb1
        var $6=HEAP[$self_addr]; //@line 789 "stringio.c"
        var $7=(($6+25)&4294967295); //@line 789 "stringio.c"
        var $8=HEAP[$7]; //@line 789 "stringio.c"
        var $9=reSign(($8), 8, 0); //@line 789 "stringio.c"
        var $10=_PyBool_FromLong($9); //@line 789 "stringio.c"
        HEAP[$0]=$10; //@line 789 "stringio.c"
        __label__ = 3; break; //@line 789 "stringio.c"
      case 3: // $bb2
        var $11=HEAP[$0]; //@line 788 "stringio.c"
        HEAP[$retval]=$11; //@line 788 "stringio.c"
        __label__ = 4; break; //@line 788 "stringio.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 788 "stringio.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 788 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_line_buffering($self, $context) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $context_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$context_addr]=$context;
        var $1=HEAP[$self_addr]; //@line 795 "stringio.c"
        var $2=(($1+24)&4294967295); //@line 795 "stringio.c"
        var $3=HEAP[$2]; //@line 795 "stringio.c"
        var $4=reSign(($3), 8, 0) <= 0; //@line 795 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 795 "stringio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 795 "stringio.c"
        _PyErr_SetString($5, ((__str7326)&4294967295)); //@line 795 "stringio.c"
        HEAP[$0]=0; //@line 795 "stringio.c"
        __label__ = 5; break; //@line 795 "stringio.c"
      case 2: // $bb1
        var $6=HEAP[$self_addr]; //@line 796 "stringio.c"
        var $7=(($6+25)&4294967295); //@line 796 "stringio.c"
        var $8=HEAP[$7]; //@line 796 "stringio.c"
        var $9=reSign(($8), 8, 0)!=0; //@line 796 "stringio.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 796 "stringio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 796 "stringio.c"
        _PyErr_SetString($10, ((__str8327)&4294967295)); //@line 796 "stringio.c"
        HEAP[$0]=0; //@line 796 "stringio.c"
        __label__ = 5; break; //@line 796 "stringio.c"
      case 4: // $bb3
        var $11=((__Py_ZeroStruct)&4294967295); //@line 797 "stringio.c"
        var $12=HEAP[$11]; //@line 797 "stringio.c"
        var $13=((($12) + 1)&4294967295); //@line 797 "stringio.c"
        var $14=((__Py_ZeroStruct)&4294967295); //@line 797 "stringio.c"
        HEAP[$14]=$13; //@line 797 "stringio.c"
        HEAP[$0]=__Py_ZeroStruct; //@line 797 "stringio.c"
        __label__ = 5; break; //@line 797 "stringio.c"
      case 5: // $bb4
        var $15=HEAP[$0]; //@line 795 "stringio.c"
        HEAP[$retval]=$15; //@line 795 "stringio.c"
        __label__ = 6; break; //@line 795 "stringio.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 795 "stringio.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 795 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_newlines($self, $context) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $context_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$context_addr]=$context;
        var $1=HEAP[$self_addr]; //@line 803 "stringio.c"
        var $2=(($1+24)&4294967295); //@line 803 "stringio.c"
        var $3=HEAP[$2]; //@line 803 "stringio.c"
        var $4=reSign(($3), 8, 0) <= 0; //@line 803 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 803 "stringio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 803 "stringio.c"
        _PyErr_SetString($5, ((__str7326)&4294967295)); //@line 803 "stringio.c"
        HEAP[$0]=0; //@line 803 "stringio.c"
        __label__ = 7; break; //@line 803 "stringio.c"
      case 2: // $bb1
        var $6=HEAP[$self_addr]; //@line 804 "stringio.c"
        var $7=(($6+25)&4294967295); //@line 804 "stringio.c"
        var $8=HEAP[$7]; //@line 804 "stringio.c"
        var $9=reSign(($8), 8, 0)!=0; //@line 804 "stringio.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 804 "stringio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 804 "stringio.c"
        _PyErr_SetString($10, ((__str8327)&4294967295)); //@line 804 "stringio.c"
        HEAP[$0]=0; //@line 804 "stringio.c"
        __label__ = 7; break; //@line 804 "stringio.c"
      case 4: // $bb3
        var $11=HEAP[$self_addr]; //@line 805 "stringio.c"
        var $12=(($11+28)&4294967295); //@line 805 "stringio.c"
        var $13=HEAP[$12]; //@line 805 "stringio.c"
        var $14=($13)==0; //@line 805 "stringio.c"
        if ($14) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 805 "stringio.c"
      case 5: // $bb4
        var $15=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 806 "stringio.c"
        var $16=((($15) + 1)&4294967295); //@line 806 "stringio.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$16; //@line 806 "stringio.c"
        HEAP[$0]=__Py_NoneStruct; //@line 806 "stringio.c"
        __label__ = 7; break; //@line 806 "stringio.c"
      case 6: // $bb5
        var $17=HEAP[__PyIO_str_newlines]; //@line 807 "stringio.c"
        var $18=HEAP[$self_addr]; //@line 807 "stringio.c"
        var $19=(($18+28)&4294967295); //@line 807 "stringio.c"
        var $20=HEAP[$19]; //@line 807 "stringio.c"
        var $21=_PyObject_GetAttr($20, $17); //@line 807 "stringio.c"
        HEAP[$0]=$21; //@line 807 "stringio.c"
        __label__ = 7; break; //@line 807 "stringio.c"
      case 7: // $bb6
        var $22=HEAP[$0]; //@line 803 "stringio.c"
        HEAP[$retval]=$22; //@line 803 "stringio.c"
        __label__ = 8; break; //@line 803 "stringio.c"
      case 8: // $return
        var $retval7=HEAP[$retval]; //@line 803 "stringio.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 803 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __unsupported($message) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $message_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$message_addr]=$message;
        var $1=HEAP[__PyIO_unsupported_operation]; //@line 27 "textio.c"
        var $2=HEAP[$message_addr]; //@line 27 "textio.c"
        _PyErr_SetString($1, $2); //@line 27 "textio.c"
        HEAP[$0]=0; //@line 28 "textio.c"
        var $3=HEAP[$0]; //@line 28 "textio.c"
        HEAP[$retval]=$3; //@line 28 "textio.c"
        __label__ = 1; break; //@line 28 "textio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 28 "textio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 28 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiobase_detach($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=__unsupported(((__str374)&4294967295)); //@line 41 "textio.c"
        HEAP[$0]=$1; //@line 41 "textio.c"
        var $2=HEAP[$0]; //@line 41 "textio.c"
        HEAP[$retval]=$2; //@line 41 "textio.c"
        __label__ = 1; break; //@line 41 "textio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 41 "textio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 41 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiobase_read($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=__unsupported(((__str1375)&4294967295)); //@line 54 "textio.c"
        HEAP[$0]=$1; //@line 54 "textio.c"
        var $2=HEAP[$0]; //@line 54 "textio.c"
        HEAP[$retval]=$2; //@line 54 "textio.c"
        __label__ = 1; break; //@line 54 "textio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 54 "textio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 54 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiobase_readline($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=__unsupported(((__str2376)&4294967295)); //@line 66 "textio.c"
        HEAP[$0]=$1; //@line 66 "textio.c"
        var $2=HEAP[$0]; //@line 66 "textio.c"
        HEAP[$retval]=$2; //@line 66 "textio.c"
        __label__ = 1; break; //@line 66 "textio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 66 "textio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 66 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiobase_write($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=__unsupported(((__str3377)&4294967295)); //@line 78 "textio.c"
        HEAP[$0]=$1; //@line 78 "textio.c"
        var $2=HEAP[$0]; //@line 78 "textio.c"
        HEAP[$retval]=$2; //@line 78 "textio.c"
        __label__ = 1; break; //@line 78 "textio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 78 "textio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 78 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiobase_encoding_get($self, $context) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $context_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$context_addr]=$context;
        var $1=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 90 "textio.c"
        var $2=((($1) + 1)&4294967295); //@line 90 "textio.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$2; //@line 90 "textio.c"
        HEAP[$0]=__Py_NoneStruct; //@line 90 "textio.c"
        var $3=HEAP[$0]; //@line 90 "textio.c"
        HEAP[$retval]=$3; //@line 90 "textio.c"
        __label__ = 1; break; //@line 90 "textio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 90 "textio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 90 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiobase_newlines_get($self, $context) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $context_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$context_addr]=$context;
        var $1=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 104 "textio.c"
        var $2=((($1) + 1)&4294967295); //@line 104 "textio.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$2; //@line 104 "textio.c"
        HEAP[$0]=__Py_NoneStruct; //@line 104 "textio.c"
        var $3=HEAP[$0]; //@line 104 "textio.c"
        HEAP[$retval]=$3; //@line 104 "textio.c"
        __label__ = 1; break; //@line 104 "textio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 104 "textio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 104 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiobase_errors_get($self, $context) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $context_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$context_addr]=$context;
        var $1=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 116 "textio.c"
        var $2=((($1) + 1)&4294967295); //@line 116 "textio.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$2; //@line 116 "textio.c"
        HEAP[$0]=__Py_NoneStruct; //@line 116 "textio.c"
        var $3=HEAP[$0]; //@line 116 "textio.c"
        HEAP[$retval]=$3; //@line 116 "textio.c"
        __label__ = 1; break; //@line 116 "textio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 116 "textio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 116 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _incrementalnewlinedecoder_init($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 48; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 48);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kwds_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $decoder=__stackBase__+20;
        var $translate=__stackBase__+24;
        var $errors=__stackBase__+28;
        var $kwlist=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$kwds_addr]=$kwds;
        HEAP[$errors]=0; //@line 204 "textio.c"
        var $1=(($kwlist)&4294967295); //@line 205 "textio.c"
        var $2=HEAP[((_C_1_8505)&4294967295)]; //@line 205 "textio.c"
        HEAP[$1]=$2; //@line 205 "textio.c"
        var $3=(($kwlist+4)&4294967295); //@line 205 "textio.c"
        var $4=HEAP[((_C_1_8505+4)&4294967295)]; //@line 205 "textio.c"
        HEAP[$3]=$4; //@line 205 "textio.c"
        var $5=(($kwlist+8)&4294967295); //@line 205 "textio.c"
        var $6=HEAP[((_C_1_8505+8)&4294967295)]; //@line 205 "textio.c"
        HEAP[$5]=$6; //@line 205 "textio.c"
        var $7=(($kwlist+12)&4294967295); //@line 205 "textio.c"
        var $8=HEAP[((_C_1_8505+12)&4294967295)]; //@line 205 "textio.c"
        HEAP[$7]=$8; //@line 205 "textio.c"
        var $9=HEAP[$args_addr]; //@line 207 "textio.c"
        var $10=HEAP[$kwds_addr]; //@line 207 "textio.c"
        var $kwlist1=$kwlist; //@line 207 "textio.c"
        var $11=__PyArg_ParseTupleAndKeywords_SizeT($9, $10, ((__str10385)&4294967295), $kwlist1, $decoder, $translate, $errors); //@line 207 "textio.c"
        var $12=((($11))|0)==0; //@line 207 "textio.c"
        if ($12) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 207 "textio.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 209 "textio.c"
        __label__ = 8; break; //@line 209 "textio.c"
      case 2: // $bb2
        var $13=HEAP[$decoder]; //@line 211 "textio.c"
        var $14=HEAP[$self_addr]; //@line 211 "textio.c"
        var $15=(($14+8)&4294967295); //@line 211 "textio.c"
        HEAP[$15]=$13; //@line 211 "textio.c"
        var $16=HEAP[$decoder]; //@line 212 "textio.c"
        var $17=(($16)&4294967295); //@line 212 "textio.c"
        var $18=HEAP[$17]; //@line 212 "textio.c"
        var $19=((($18) + 1)&4294967295); //@line 212 "textio.c"
        var $20=(($16)&4294967295); //@line 212 "textio.c"
        HEAP[$20]=$19; //@line 212 "textio.c"
        var $21=HEAP[$errors]; //@line 214 "textio.c"
        var $22=($21)==0; //@line 214 "textio.c"
        if ($22) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 214 "textio.c"
      case 3: // $bb3
        var $23=_PyUnicodeUCS2_FromString(((__str11386)&4294967295)); //@line 215 "textio.c"
        var $24=HEAP[$self_addr]; //@line 215 "textio.c"
        var $25=(($24+12)&4294967295); //@line 215 "textio.c"
        HEAP[$25]=$23; //@line 215 "textio.c"
        var $26=HEAP[$self_addr]; //@line 216 "textio.c"
        var $27=(($26+12)&4294967295); //@line 216 "textio.c"
        var $28=HEAP[$27]; //@line 216 "textio.c"
        var $29=($28)==0; //@line 216 "textio.c"
        if ($29) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 216 "textio.c"
      case 4: // $bb4
        HEAP[$0]=-1; //@line 217 "textio.c"
        __label__ = 8; break; //@line 217 "textio.c"
      case 5: // $bb5
        __label__ = 7; break; //@line 217 "textio.c"
      case 6: // $bb6
        var $30=HEAP[$errors]; //@line 220 "textio.c"
        var $31=(($30)&4294967295); //@line 220 "textio.c"
        var $32=HEAP[$31]; //@line 220 "textio.c"
        var $33=((($32) + 1)&4294967295); //@line 220 "textio.c"
        var $34=(($30)&4294967295); //@line 220 "textio.c"
        HEAP[$34]=$33; //@line 220 "textio.c"
        var $35=HEAP[$errors]; //@line 221 "textio.c"
        var $36=HEAP[$self_addr]; //@line 221 "textio.c"
        var $37=(($36+12)&4294967295); //@line 221 "textio.c"
        HEAP[$37]=$35; //@line 221 "textio.c"
        __label__ = 7; break; //@line 221 "textio.c"
      case 7: // $bb7
        var $38=HEAP[$translate]; //@line 224 "textio.c"
        var $39=((($38)) & 255); //@line 224 "textio.c"
        var $40=((($39)) & 1); //@line 224 "textio.c"
        var $41=HEAP[$self_addr]; //@line 224 "textio.c"
        var $42=(($41+16)&4294967295); //@line 224 "textio.c"
        var $43=reSign(($40), 1, 0); //@line 224 "textio.c"
        var $44=HEAP[$42]; //@line 224 "textio.c"
        var $45=($43) << 1; //@line 224 "textio.c"
        var $46=($45) & 2; //@line 224 "textio.c"
        var $47=($44) & -3; //@line 224 "textio.c"
        var $48=($47) | ($46); //@line 224 "textio.c"
        HEAP[$42]=$48; //@line 224 "textio.c"
        var $49=HEAP[$self_addr]; //@line 225 "textio.c"
        var $50=(($49+16)&4294967295); //@line 225 "textio.c"
        var $51=HEAP[$50]; //@line 225 "textio.c"
        var $52=($51) & -29; //@line 225 "textio.c"
        HEAP[$50]=$52; //@line 225 "textio.c"
        var $53=HEAP[$self_addr]; //@line 226 "textio.c"
        var $54=(($53+16)&4294967295); //@line 226 "textio.c"
        var $55=HEAP[$54]; //@line 226 "textio.c"
        var $56=($55) & -2; //@line 226 "textio.c"
        HEAP[$54]=$56; //@line 226 "textio.c"
        HEAP[$0]=0; //@line 228 "textio.c"
        __label__ = 8; break; //@line 228 "textio.c"
      case 8: // $bb8
        var $57=HEAP[$0]; //@line 209 "textio.c"
        HEAP[$retval]=$57; //@line 209 "textio.c"
        __label__ = 9; break; //@line 209 "textio.c"
      case 9: // $return
        var $retval9=HEAP[$retval]; //@line 209 "textio.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 209 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _incrementalnewlinedecoder_dealloc($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $_py_tmp=__stackBase__+4;
        var $_py_tmp4=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $0=HEAP[$self_addr]; //@line 234 "textio.c"
        var $1=(($0+8)&4294967295); //@line 234 "textio.c"
        var $2=HEAP[$1]; //@line 234 "textio.c"
        var $3=($2)!=0; //@line 234 "textio.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 234 "textio.c"
      case 1: // $bb
        var $4=HEAP[$self_addr]; //@line 234 "textio.c"
        var $5=(($4+8)&4294967295); //@line 234 "textio.c"
        var $6=HEAP[$5]; //@line 234 "textio.c"
        HEAP[$_py_tmp]=$6; //@line 234 "textio.c"
        var $7=HEAP[$self_addr]; //@line 234 "textio.c"
        var $8=(($7+8)&4294967295); //@line 234 "textio.c"
        HEAP[$8]=0; //@line 234 "textio.c"
        var $9=HEAP[$_py_tmp]; //@line 234 "textio.c"
        var $10=(($9)&4294967295); //@line 234 "textio.c"
        var $11=HEAP[$10]; //@line 234 "textio.c"
        var $12=((($11) - 1)&4294967295); //@line 234 "textio.c"
        var $13=HEAP[$_py_tmp]; //@line 234 "textio.c"
        var $14=(($13)&4294967295); //@line 234 "textio.c"
        HEAP[$14]=$12; //@line 234 "textio.c"
        var $15=HEAP[$_py_tmp]; //@line 234 "textio.c"
        var $16=(($15)&4294967295); //@line 234 "textio.c"
        var $17=HEAP[$16]; //@line 234 "textio.c"
        var $18=((($17))|0)==0; //@line 234 "textio.c"
        if ($18) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 234 "textio.c"
      case 2: // $bb1
        var $19=HEAP[$_py_tmp]; //@line 234 "textio.c"
        var $20=(($19+4)&4294967295); //@line 234 "textio.c"
        var $21=HEAP[$20]; //@line 234 "textio.c"
        var $22=(($21+24)&4294967295); //@line 234 "textio.c"
        var $23=HEAP[$22]; //@line 234 "textio.c"
        var $24=HEAP[$_py_tmp]; //@line 234 "textio.c"
        FUNCTION_TABLE[$23]($24); //@line 234 "textio.c"
        __label__ = 3; break; //@line 234 "textio.c"
      case 3: // $bb2
        var $25=HEAP[$self_addr]; //@line 235 "textio.c"
        var $26=(($25+12)&4294967295); //@line 235 "textio.c"
        var $27=HEAP[$26]; //@line 235 "textio.c"
        var $28=($27)!=0; //@line 235 "textio.c"
        if ($28) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 235 "textio.c"
      case 4: // $bb3
        var $29=HEAP[$self_addr]; //@line 235 "textio.c"
        var $30=(($29+12)&4294967295); //@line 235 "textio.c"
        var $31=HEAP[$30]; //@line 235 "textio.c"
        HEAP[$_py_tmp4]=$31; //@line 235 "textio.c"
        var $32=HEAP[$self_addr]; //@line 235 "textio.c"
        var $33=(($32+12)&4294967295); //@line 235 "textio.c"
        HEAP[$33]=0; //@line 235 "textio.c"
        var $34=HEAP[$_py_tmp4]; //@line 235 "textio.c"
        var $35=(($34)&4294967295); //@line 235 "textio.c"
        var $36=HEAP[$35]; //@line 235 "textio.c"
        var $37=((($36) - 1)&4294967295); //@line 235 "textio.c"
        var $38=HEAP[$_py_tmp4]; //@line 235 "textio.c"
        var $39=(($38)&4294967295); //@line 235 "textio.c"
        HEAP[$39]=$37; //@line 235 "textio.c"
        var $40=HEAP[$_py_tmp4]; //@line 235 "textio.c"
        var $41=(($40)&4294967295); //@line 235 "textio.c"
        var $42=HEAP[$41]; //@line 235 "textio.c"
        var $43=((($42))|0)==0; //@line 235 "textio.c"
        if ($43) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 235 "textio.c"
      case 5: // $bb5
        var $44=HEAP[$_py_tmp4]; //@line 235 "textio.c"
        var $45=(($44+4)&4294967295); //@line 235 "textio.c"
        var $46=HEAP[$45]; //@line 235 "textio.c"
        var $47=(($46+24)&4294967295); //@line 235 "textio.c"
        var $48=HEAP[$47]; //@line 235 "textio.c"
        var $49=HEAP[$_py_tmp4]; //@line 235 "textio.c"
        FUNCTION_TABLE[$48]($49); //@line 235 "textio.c"
        __label__ = 6; break; //@line 235 "textio.c"
      case 6: // $bb6
        var $50=HEAP[$self_addr]; //@line 236 "textio.c"
        var $51=$50; //@line 236 "textio.c"
        var $52=(($51+4)&4294967295); //@line 236 "textio.c"
        var $53=HEAP[$52]; //@line 236 "textio.c"
        var $54=(($53+160)&4294967295); //@line 236 "textio.c"
        var $55=HEAP[$54]; //@line 236 "textio.c"
        var $56=HEAP[$self_addr]; //@line 236 "textio.c"
        var $57=$56; //@line 236 "textio.c"
        FUNCTION_TABLE[$55]($57); //@line 236 "textio.c"
        __label__ = 7; break; //@line 237 "textio.c"
      case 7: // $return
        STACKTOP = __stackBase__;
        return; //@line 237 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __PyIncrementalNewlineDecoder_decode($_self, $input, $final) {
    var __stackBase__  = STACKTOP; STACKTOP += 106; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 106);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $_self_addr=__stackBase__;
        var $input_addr=__stackBase__+4;
        var $final_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $iftmp_10=__stackBase__+16;
        var $0=__stackBase__+20;
        var $output=__stackBase__+24;
        var $output_len=__stackBase__+28;
        var $self=__stackBase__+32;
        var $out=__stackBase__+36;
        var $modified=__stackBase__+40;
        var $modified25=__stackBase__+44;
        var $in_str=__stackBase__+48;
        var $len=__stackBase__+52;
        var $seennl=__stackBase__+56;
        var $only_lf=__stackBase__+60;
        var $s=__stackBase__+64;
        var $end=__stackBase__+68;
        var $c=__stackBase__+72;
        var $s49=__stackBase__+74;
        var $end50=__stackBase__+78;
        var $c54=__stackBase__+82;
        var $translated=__stackBase__+84;
        var $out_str=__stackBase__+88;
        var $in=__stackBase__+92;
        var $out66=__stackBase__+96;
        var $end67=__stackBase__+100;
        var $c76=__stackBase__+104;
        var $_alloca_point_=0;
        HEAP[$_self_addr]=$_self;
        HEAP[$input_addr]=$input;
        HEAP[$final_addr]=$final;
        var $1=HEAP[$_self_addr]; //@line 250 "textio.c"
        var $2=$1; //@line 250 "textio.c"
        HEAP[$self]=$2; //@line 250 "textio.c"
        var $3=HEAP[$self]; //@line 252 "textio.c"
        var $4=(($3+8)&4294967295); //@line 252 "textio.c"
        var $5=HEAP[$4]; //@line 252 "textio.c"
        var $6=($5)==0; //@line 252 "textio.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 252 "textio.c"
      case 1: // $bb
        var $7=HEAP[_PyExc_ValueError]; //@line 253 "textio.c"
        _PyErr_SetString($7, ((__str12387)&4294967295)); //@line 253 "textio.c"
        HEAP[$0]=0; //@line 255 "textio.c"
        __label__ = 93; break; //@line 255 "textio.c"
      case 2: // $bb1
        var $8=HEAP[$self]; //@line 259 "textio.c"
        var $9=(($8+8)&4294967295); //@line 259 "textio.c"
        var $10=HEAP[$9]; //@line 259 "textio.c"
        var $11=($10)!=(__Py_NoneStruct); //@line 259 "textio.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 259 "textio.c"
      case 3: // $bb2
        var $12=HEAP[$final_addr]; //@line 260 "textio.c"
        var $13=((($12))|0)!=0; //@line 260 "textio.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 260 "textio.c"
      case 4: // $bb3
        HEAP[$iftmp_10]=__Py_TrueStruct; //@line 260 "textio.c"
        __label__ = 6; break; //@line 260 "textio.c"
      case 5: // $bb4
        HEAP[$iftmp_10]=__Py_ZeroStruct; //@line 260 "textio.c"
        __label__ = 6; break; //@line 260 "textio.c"
      case 6: // $bb5
        var $14=HEAP[__PyIO_str_decode]; //@line 260 "textio.c"
        var $15=HEAP[$self]; //@line 260 "textio.c"
        var $16=(($15+8)&4294967295); //@line 260 "textio.c"
        var $17=HEAP[$16]; //@line 260 "textio.c"
        var $18=HEAP[$input_addr]; //@line 260 "textio.c"
        var $19=HEAP[$iftmp_10]; //@line 260 "textio.c"
        var $20=_PyObject_CallMethodObjArgs($17, $14, $18, $19, 0); //@line 260 "textio.c"
        HEAP[$output]=$20; //@line 260 "textio.c"
        __label__ = 8; break; //@line 260 "textio.c"
      case 7: // $bb6
        var $21=HEAP[$input_addr]; //@line 264 "textio.c"
        HEAP[$output]=$21; //@line 264 "textio.c"
        var $22=HEAP[$output]; //@line 265 "textio.c"
        var $23=(($22)&4294967295); //@line 265 "textio.c"
        var $24=HEAP[$23]; //@line 265 "textio.c"
        var $25=((($24) + 1)&4294967295); //@line 265 "textio.c"
        var $26=(($22)&4294967295); //@line 265 "textio.c"
        HEAP[$26]=$25; //@line 265 "textio.c"
        __label__ = 8; break; //@line 265 "textio.c"
      case 8: // $bb7
        var $27=HEAP[$output]; //@line 268 "textio.c"
        var $28=($27)==0; //@line 268 "textio.c"
        if ($28) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 268 "textio.c"
      case 9: // $bb8
        HEAP[$0]=0; //@line 269 "textio.c"
        __label__ = 93; break; //@line 269 "textio.c"
      case 10: // $bb9
        var $29=HEAP[$output]; //@line 271 "textio.c"
        var $30=(($29+4)&4294967295); //@line 271 "textio.c"
        var $31=HEAP[$30]; //@line 271 "textio.c"
        var $32=(($31+84)&4294967295); //@line 271 "textio.c"
        var $33=HEAP[$32]; //@line 271 "textio.c"
        var $34=($33) & 268435456; //@line 271 "textio.c"
        var $35=((($34))|0)==0; //@line 271 "textio.c"
        if ($35) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 271 "textio.c"
      case 11: // $bb10
        var $36=HEAP[_PyExc_TypeError]; //@line 272 "textio.c"
        _PyErr_SetString($36, ((__str13388)&4294967295)); //@line 272 "textio.c"
        __label__ = 90; break; //@line 272 "textio.c"
      case 12: // $bb11
        var $37=HEAP[$output]; //@line 277 "textio.c"
        var $38=$37; //@line 277 "textio.c"
        var $39=(($38+8)&4294967295); //@line 277 "textio.c"
        var $40=HEAP[$39]; //@line 277 "textio.c"
        HEAP[$output_len]=$40; //@line 277 "textio.c"
        var $41=HEAP[$self]; //@line 278 "textio.c"
        var $42=(($41+16)&4294967295); //@line 278 "textio.c"
        var $43=HEAP[$42]; //@line 278 "textio.c"
        var $44=($43) << 7; //@line 278 "textio.c"
        var $45=reSign(($44), 8, 0) >> 7; //@line 278 "textio.c"
        var $46=((($45)) & 1); //@line 278 "textio.c"
        var $47=reSign(($46), 1, 0)!=0; //@line 278 "textio.c"
        if ($47) { __label__ = 13; break; } else { __label__ = 19; break; } //@line 278 "textio.c"
      case 13: // $bb12
        var $48=HEAP[$final_addr]; //@line 278 "textio.c"
        var $49=((($48))|0)!=0; //@line 278 "textio.c"
        if ($49) { __label__ = 15; break; } else { __label__ = 14; break; } //@line 278 "textio.c"
      case 14: // $bb13
        var $50=HEAP[$output_len]; //@line 278 "textio.c"
        var $51=((($50))|0) > 0; //@line 278 "textio.c"
        if ($51) { __label__ = 15; break; } else { __label__ = 19; break; } //@line 278 "textio.c"
      case 15: // $bb14
        var $52=HEAP[$output_len]; //@line 280 "textio.c"
        var $53=((($52) + 1)&4294967295); //@line 280 "textio.c"
        var $54=_PyUnicodeUCS2_FromUnicode(0, $53); //@line 280 "textio.c"
        HEAP[$modified]=$54; //@line 280 "textio.c"
        var $55=HEAP[$modified]; //@line 281 "textio.c"
        var $56=($55)==0; //@line 281 "textio.c"
        if ($56) { __label__ = 90; break; } else { __label__ = 16; break; } //@line 281 "textio.c"
      case 16: // $bb15
        var $57=HEAP[$modified]; //@line 283 "textio.c"
        var $58=$57; //@line 283 "textio.c"
        var $59=(($58+12)&4294967295); //@line 283 "textio.c"
        var $60=HEAP[$59]; //@line 283 "textio.c"
        HEAP[$out]=$60; //@line 283 "textio.c"
        var $61=HEAP[$out]; //@line 284 "textio.c"
        var $62=(($61)&4294967295); //@line 284 "textio.c"
        HEAP[$62]=13; //@line 284 "textio.c"
        var $63=HEAP[$output_len]; //@line 285 "textio.c"
        var $64=((($63) * 2)&4294967295); //@line 285 "textio.c"
        var $65=HEAP[$output]; //@line 285 "textio.c"
        var $66=$65; //@line 285 "textio.c"
        var $67=(($66+12)&4294967295); //@line 285 "textio.c"
        var $68=HEAP[$67]; //@line 285 "textio.c"
        var $69=HEAP[$out]; //@line 285 "textio.c"
        var $70=(($69+2)&4294967295); //@line 285 "textio.c"
        var $71=$70; //@line 285 "textio.c"
        var $72=$68; //@line 285 "textio.c"
        _llvm_memcpy_p0i8_p0i8_i32($71, $72, $64, 1, 0); //@line 285 "textio.c"
        var $73=HEAP[$output]; //@line 287 "textio.c"
        var $74=(($73)&4294967295); //@line 287 "textio.c"
        var $75=HEAP[$74]; //@line 287 "textio.c"
        var $76=((($75) - 1)&4294967295); //@line 287 "textio.c"
        var $77=(($73)&4294967295); //@line 287 "textio.c"
        HEAP[$77]=$76; //@line 287 "textio.c"
        var $78=(($73)&4294967295); //@line 287 "textio.c"
        var $79=HEAP[$78]; //@line 287 "textio.c"
        var $80=((($79))|0)==0; //@line 287 "textio.c"
        if ($80) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 287 "textio.c"
      case 17: // $bb16
        var $81=HEAP[$output]; //@line 287 "textio.c"
        var $82=(($81+4)&4294967295); //@line 287 "textio.c"
        var $83=HEAP[$82]; //@line 287 "textio.c"
        var $84=(($83+24)&4294967295); //@line 287 "textio.c"
        var $85=HEAP[$84]; //@line 287 "textio.c"
        var $86=HEAP[$output]; //@line 287 "textio.c"
        FUNCTION_TABLE[$85]($86); //@line 287 "textio.c"
        __label__ = 18; break; //@line 287 "textio.c"
      case 18: // $bb17
        var $87=HEAP[$modified]; //@line 288 "textio.c"
        HEAP[$output]=$87; //@line 288 "textio.c"
        var $88=HEAP[$self]; //@line 289 "textio.c"
        var $89=(($88+16)&4294967295); //@line 289 "textio.c"
        var $90=HEAP[$89]; //@line 289 "textio.c"
        var $91=($90) & -2; //@line 289 "textio.c"
        HEAP[$89]=$91; //@line 289 "textio.c"
        var $92=HEAP[$output_len]; //@line 290 "textio.c"
        var $93=((($92) + 1)&4294967295); //@line 290 "textio.c"
        HEAP[$output_len]=$93; //@line 290 "textio.c"
        __label__ = 19; break; //@line 290 "textio.c"
      case 19: // $bb18
        var $94=HEAP[$final_addr]; //@line 296 "textio.c"
        var $95=((($94))|0)==0; //@line 296 "textio.c"
        if ($95) { __label__ = 20; break; } else { __label__ = 30; break; } //@line 296 "textio.c"
      case 20: // $bb19
        var $96=HEAP[$output_len]; //@line 297 "textio.c"
        var $97=((($96))|0) > 0; //@line 297 "textio.c"
        if ($97) { __label__ = 21; break; } else { __label__ = 30; break; } //@line 297 "textio.c"
      case 21: // $bb20
        var $98=HEAP[$output]; //@line 297 "textio.c"
        var $99=$98; //@line 297 "textio.c"
        var $100=(($99+12)&4294967295); //@line 297 "textio.c"
        var $101=HEAP[$100]; //@line 297 "textio.c"
        var $102=HEAP[$output_len]; //@line 297 "textio.c"
        var $103=((($102) - 1)&4294967295); //@line 297 "textio.c"
        var $104=(($101+2*$103)&4294967295); //@line 297 "textio.c"
        var $105=HEAP[$104]; //@line 297 "textio.c"
        var $106=reSign(($105), 16, 0)==13; //@line 297 "textio.c"
        if ($106) { __label__ = 22; break; } else { __label__ = 30; break; } //@line 297 "textio.c"
      case 22: // $bb21
        var $107=HEAP[$output]; //@line 300 "textio.c"
        var $108=(($107)&4294967295); //@line 300 "textio.c"
        var $109=HEAP[$108]; //@line 300 "textio.c"
        var $110=((($109))|0)==1; //@line 300 "textio.c"
        if ($110) { __label__ = 23; break; } else { __label__ = 25; break; } //@line 300 "textio.c"
      case 23: // $bb22
        var $111=HEAP[$output_len]; //@line 301 "textio.c"
        var $112=((($111) - 1)&4294967295); //@line 301 "textio.c"
        var $113=_PyUnicodeUCS2_Resize($output, $112); //@line 301 "textio.c"
        var $114=((($113))|0) < 0; //@line 301 "textio.c"
        if ($114) { __label__ = 90; break; } else { __label__ = 24; break; } //@line 301 "textio.c"
      case 24: // $bb23
        __label__ = 29; break; //@line 301 "textio.c"
      case 25: // $bb24
        var $115=HEAP[$output_len]; //@line 307 "textio.c"
        var $116=((($115) - 1)&4294967295); //@line 307 "textio.c"
        var $117=HEAP[$output]; //@line 307 "textio.c"
        var $118=$117; //@line 307 "textio.c"
        var $119=(($118+12)&4294967295); //@line 307 "textio.c"
        var $120=HEAP[$119]; //@line 307 "textio.c"
        var $121=_PyUnicodeUCS2_FromUnicode($120, $116); //@line 307 "textio.c"
        HEAP[$modified25]=$121; //@line 307 "textio.c"
        var $122=HEAP[$modified25]; //@line 308 "textio.c"
        var $123=($122)==0; //@line 308 "textio.c"
        if ($123) { __label__ = 90; break; } else { __label__ = 26; break; } //@line 308 "textio.c"
      case 26: // $bb26
        var $124=HEAP[$output]; //@line 310 "textio.c"
        var $125=(($124)&4294967295); //@line 310 "textio.c"
        var $126=HEAP[$125]; //@line 310 "textio.c"
        var $127=((($126) - 1)&4294967295); //@line 310 "textio.c"
        var $128=(($124)&4294967295); //@line 310 "textio.c"
        HEAP[$128]=$127; //@line 310 "textio.c"
        var $129=(($124)&4294967295); //@line 310 "textio.c"
        var $130=HEAP[$129]; //@line 310 "textio.c"
        var $131=((($130))|0)==0; //@line 310 "textio.c"
        if ($131) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 310 "textio.c"
      case 27: // $bb27
        var $132=HEAP[$output]; //@line 310 "textio.c"
        var $133=(($132+4)&4294967295); //@line 310 "textio.c"
        var $134=HEAP[$133]; //@line 310 "textio.c"
        var $135=(($134+24)&4294967295); //@line 310 "textio.c"
        var $136=HEAP[$135]; //@line 310 "textio.c"
        var $137=HEAP[$output]; //@line 310 "textio.c"
        FUNCTION_TABLE[$136]($137); //@line 310 "textio.c"
        __label__ = 28; break; //@line 310 "textio.c"
      case 28: // $bb28
        var $138=HEAP[$modified25]; //@line 311 "textio.c"
        HEAP[$output]=$138; //@line 311 "textio.c"
        __label__ = 29; break; //@line 311 "textio.c"
      case 29: // $bb29
        var $139=HEAP[$self]; //@line 313 "textio.c"
        var $140=(($139+16)&4294967295); //@line 313 "textio.c"
        var $141=HEAP[$140]; //@line 313 "textio.c"
        var $142=($141) & -2; //@line 313 "textio.c"
        var $143=($142) | 1; //@line 313 "textio.c"
        HEAP[$140]=$143; //@line 313 "textio.c"
        __label__ = 30; break; //@line 313 "textio.c"
      case 30: // $bb30
        var $144=HEAP[$self]; //@line 322 "textio.c"
        var $145=(($144+16)&4294967295); //@line 322 "textio.c"
        var $146=HEAP[$145]; //@line 322 "textio.c"
        var $147=($146) << 3; //@line 322 "textio.c"
        var $148=unSign(($147), 8, 0) >>> 5; //@line 322 "textio.c"
        var $149=((($148)) & 7); //@line 322 "textio.c"
        var $150=($149); //@line 322 "textio.c"
        HEAP[$seennl]=$150; //@line 322 "textio.c"
        HEAP[$only_lf]=0; //@line 323 "textio.c"
        var $151=HEAP[$output]; //@line 325 "textio.c"
        var $152=$151; //@line 325 "textio.c"
        var $153=(($152+12)&4294967295); //@line 325 "textio.c"
        var $154=HEAP[$153]; //@line 325 "textio.c"
        HEAP[$in_str]=$154; //@line 325 "textio.c"
        var $155=HEAP[$output]; //@line 326 "textio.c"
        var $156=$155; //@line 326 "textio.c"
        var $157=(($156+8)&4294967295); //@line 326 "textio.c"
        var $158=HEAP[$157]; //@line 326 "textio.c"
        HEAP[$len]=$158; //@line 326 "textio.c"
        var $159=HEAP[$len]; //@line 328 "textio.c"
        var $160=((($159))|0)==0; //@line 328 "textio.c"
        if ($160) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 328 "textio.c"
      case 31: // $bb31
        var $161=HEAP[$output]; //@line 329 "textio.c"
        HEAP[$0]=$161; //@line 329 "textio.c"
        __label__ = 93; break; //@line 329 "textio.c"
      case 32: // $bb32
        var $162=HEAP[$seennl]; //@line 334 "textio.c"
        var $163=((($162))|0)==2; //@line 334 "textio.c"
        if ($163) { __label__ = 34; break; } else { __label__ = 33; break; } //@line 334 "textio.c"
      case 33: // $bb33
        var $164=HEAP[$seennl]; //@line 334 "textio.c"
        var $165=((($164))|0)==0; //@line 334 "textio.c"
        if ($165) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 334 "textio.c"
      case 34: // $bb34
        var $166=HEAP[$len]; //@line 335 "textio.c"
        var $167=((($166) * 2)&4294967295); //@line 335 "textio.c"
        var $168=HEAP[$in_str]; //@line 335 "textio.c"
        var $169=$168; //@line 335 "textio.c"
        var $170=_memchr($169, 13, $167); //@line 335 "textio.c"
        var $171=($170)==0; //@line 335 "textio.c"
        var $172=unSign(($171), 1, 0); //@line 335 "textio.c"
        HEAP[$only_lf]=$172; //@line 335 "textio.c"
        __label__ = 35; break; //@line 335 "textio.c"
      case 35: // $bb35
        var $173=HEAP[$only_lf]; //@line 338 "textio.c"
        var $174=((($173))|0)!=0; //@line 338 "textio.c"
        if ($174) { __label__ = 36; break; } else { __label__ = 47; break; } //@line 338 "textio.c"
      case 36: // $bb36
        var $175=HEAP[$seennl]; //@line 342 "textio.c"
        var $176=((($175))|0)==0; //@line 342 "textio.c"
        if ($176) { __label__ = 37; break; } else { __label__ = 46; break; } //@line 342 "textio.c"
      case 37: // $bb37
        var $177=HEAP[$len]; //@line 342 "textio.c"
        var $178=((($177) * 2)&4294967295); //@line 342 "textio.c"
        var $179=HEAP[$in_str]; //@line 342 "textio.c"
        var $180=$179; //@line 342 "textio.c"
        var $181=_memchr($180, 10, $178); //@line 342 "textio.c"
        var $182=($181)!=0; //@line 342 "textio.c"
        if ($182) { __label__ = 38; break; } else { __label__ = 46; break; } //@line 342 "textio.c"
      case 38: // $bb38
        var $183=HEAP[$in_str]; //@line 345 "textio.c"
        HEAP[$s]=$183; //@line 345 "textio.c"
        var $184=HEAP[$in_str]; //@line 346 "textio.c"
        var $185=HEAP[$len]; //@line 346 "textio.c"
        var $186=(($184+2*$185)&4294967295); //@line 346 "textio.c"
        HEAP[$end]=$186; //@line 346 "textio.c"
        __label__ = 39; break; //@line 346 "textio.c"
      case 39: // $bb39
        __label__ = 41; break; //@line 346 "textio.c"
      case 40: // $bb40
        var $187=HEAP[$s]; //@line 351 "textio.c"
        var $188=(($187+2)&4294967295); //@line 351 "textio.c"
        HEAP[$s]=$188; //@line 351 "textio.c"
        __label__ = 41; break; //@line 351 "textio.c"
      case 41: // $bb41
        var $189=HEAP[$s]; //@line 350 "textio.c"
        var $190=HEAP[$189]; //@line 350 "textio.c"
        var $191=unSign(($190), 16, 0) > 10; //@line 350 "textio.c"
        if ($191) { __label__ = 40; break; } else { __label__ = 42; break; } //@line 350 "textio.c"
      case 42: // $bb42
        var $192=HEAP[$s]; //@line 352 "textio.c"
        var $193=HEAP[$192]; //@line 352 "textio.c"
        HEAP[$c]=$193; //@line 352 "textio.c"
        var $194=HEAP[$s]; //@line 352 "textio.c"
        var $195=(($194+2)&4294967295); //@line 352 "textio.c"
        HEAP[$s]=$195; //@line 352 "textio.c"
        var $196=HEAP[$c]; //@line 353 "textio.c"
        var $197=reSign(($196), 16, 0)==10; //@line 353 "textio.c"
        if ($197) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 353 "textio.c"
      case 43: // $bb43
        var $198=HEAP[$seennl]; //@line 354 "textio.c"
        var $199=($198) | 2; //@line 354 "textio.c"
        HEAP[$seennl]=$199; //@line 354 "textio.c"
        __label__ = 46; break; //@line 354 "textio.c"
      case 44: // $bb44
        var $200=HEAP[$s]; //@line 357 "textio.c"
        var $201=HEAP[$end]; //@line 357 "textio.c"
        var $202=($200) > ($201); //@line 357 "textio.c"
        if ($202) { __label__ = 46; break; } else { __label__ = 45; break; } //@line 357 "textio.c"
      case 45: // $bb45
        __label__ = 39; break; //@line 357 "textio.c"
      case 46: // $bb46
        __label__ = 89; break; //@line 357 "textio.c"
      case 47: // $bb47
        var $203=HEAP[$self]; //@line 364 "textio.c"
        var $204=(($203+16)&4294967295); //@line 364 "textio.c"
        var $205=HEAP[$204]; //@line 364 "textio.c"
        var $206=($205) << 6; //@line 364 "textio.c"
        var $207=reSign(($206), 8, 0) >> 7; //@line 364 "textio.c"
        var $208=((($207)) & 1); //@line 364 "textio.c"
        var $209=reSign(($208), 1, 0)==0; //@line 364 "textio.c"
        if ($209) { __label__ = 48; break; } else { __label__ = 63; break; } //@line 364 "textio.c"
      case 48: // $bb48
        var $210=HEAP[$seennl]; //@line 367 "textio.c"
        var $211=((($210))|0)==7; //@line 367 "textio.c"
        if ($211) { __label__ = 62; break; } else { __label__ = 49; break; } //@line 367 "textio.c"
      case 49: // $bb51
        var $212=HEAP[$in_str]; //@line 369 "textio.c"
        HEAP[$s49]=$212; //@line 369 "textio.c"
        var $213=HEAP[$in_str]; //@line 370 "textio.c"
        var $214=HEAP[$len]; //@line 370 "textio.c"
        var $215=(($213+2*$214)&4294967295); //@line 370 "textio.c"
        HEAP[$end50]=$215; //@line 370 "textio.c"
        __label__ = 50; break; //@line 370 "textio.c"
      case 50: // $bb52
        __label__ = 52; break; //@line 370 "textio.c"
      case 51: // $bb53
        var $216=HEAP[$s49]; //@line 375 "textio.c"
        var $217=(($216+2)&4294967295); //@line 375 "textio.c"
        HEAP[$s49]=$217; //@line 375 "textio.c"
        __label__ = 52; break; //@line 375 "textio.c"
      case 52: // $bb55
        var $218=HEAP[$s49]; //@line 374 "textio.c"
        var $219=HEAP[$218]; //@line 374 "textio.c"
        var $220=unSign(($219), 16, 0) > 13; //@line 374 "textio.c"
        if ($220) { __label__ = 51; break; } else { __label__ = 53; break; } //@line 374 "textio.c"
      case 53: // $bb56
        var $221=HEAP[$s49]; //@line 376 "textio.c"
        var $222=HEAP[$221]; //@line 376 "textio.c"
        HEAP[$c54]=$222; //@line 376 "textio.c"
        var $223=HEAP[$s49]; //@line 376 "textio.c"
        var $224=(($223+2)&4294967295); //@line 376 "textio.c"
        HEAP[$s49]=$224; //@line 376 "textio.c"
        var $225=HEAP[$c54]; //@line 377 "textio.c"
        var $226=reSign(($225), 16, 0)==10; //@line 377 "textio.c"
        if ($226) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 377 "textio.c"
      case 54: // $bb57
        var $227=HEAP[$seennl]; //@line 378 "textio.c"
        var $228=($227) | 2; //@line 378 "textio.c"
        HEAP[$seennl]=$228; //@line 378 "textio.c"
        __label__ = 59; break; //@line 378 "textio.c"
      case 55: // $bb58
        var $229=HEAP[$c54]; //@line 379 "textio.c"
        var $230=reSign(($229), 16, 0)==13; //@line 379 "textio.c"
        if ($230) { __label__ = 56; break; } else { __label__ = 59; break; } //@line 379 "textio.c"
      case 56: // $bb59
        var $231=HEAP[$s49]; //@line 380 "textio.c"
        var $232=HEAP[$231]; //@line 380 "textio.c"
        var $233=reSign(($232), 16, 0)==10; //@line 380 "textio.c"
        if ($233) { __label__ = 57; break; } else { __label__ = 58; break; } //@line 380 "textio.c"
      case 57: // $bb60
        var $234=HEAP[$seennl]; //@line 381 "textio.c"
        var $235=($234) | 4; //@line 381 "textio.c"
        HEAP[$seennl]=$235; //@line 381 "textio.c"
        var $236=HEAP[$s49]; //@line 382 "textio.c"
        var $237=(($236+2)&4294967295); //@line 382 "textio.c"
        HEAP[$s49]=$237; //@line 382 "textio.c"
        __label__ = 59; break; //@line 382 "textio.c"
      case 58: // $bb61
        var $238=HEAP[$seennl]; //@line 385 "textio.c"
        var $239=($238) | 1; //@line 385 "textio.c"
        HEAP[$seennl]=$239; //@line 385 "textio.c"
        __label__ = 59; break; //@line 385 "textio.c"
      case 59: // $bb62
        var $240=HEAP[$s49]; //@line 387 "textio.c"
        var $241=HEAP[$end50]; //@line 387 "textio.c"
        var $242=($240) > ($241); //@line 387 "textio.c"
        if ($242) { __label__ = 62; break; } else { __label__ = 60; break; } //@line 387 "textio.c"
      case 60: // $bb63
        var $243=HEAP[$seennl]; //@line 389 "textio.c"
        var $244=((($243))|0)==7; //@line 389 "textio.c"
        if ($244) { __label__ = 62; break; } else { __label__ = 61; break; } //@line 389 "textio.c"
      case 61: // $bb64
        __label__ = 50; break; //@line 389 "textio.c"
      case 62: // $endscan
        __label__ = 89; break; //@line 392 "textio.c"
      case 63: // $bb65
        HEAP[$translated]=0; //@line 396 "textio.c"
        var $245=HEAP[$output]; //@line 399 "textio.c"
        var $246=(($245)&4294967295); //@line 399 "textio.c"
        var $247=HEAP[$246]; //@line 399 "textio.c"
        var $248=((($247))|0)!=1; //@line 399 "textio.c"
        if ($248) { __label__ = 64; break; } else { __label__ = 68; break; } //@line 399 "textio.c"
      case 64: // $bb68
        var $249=HEAP[$len]; //@line 404 "textio.c"
        var $250=_PyUnicodeUCS2_FromUnicode(0, $249); //@line 404 "textio.c"
        HEAP[$translated]=$250; //@line 404 "textio.c"
        var $251=HEAP[$translated]; //@line 405 "textio.c"
        var $252=($251)==0; //@line 405 "textio.c"
        if ($252) { __label__ = 90; break; } else { __label__ = 65; break; } //@line 405 "textio.c"
      case 65: // $bb69
        var $253=HEAP[$translated]; //@line 407 "textio.c"
        var $254=(($253)&4294967295); //@line 407 "textio.c"
        var $255=HEAP[$254]; //@line 407 "textio.c"
        var $256=((($255))|0)!=1; //@line 407 "textio.c"
        if ($256) { __label__ = 66; break; } else { __label__ = 67; break; } //@line 407 "textio.c"
      case 66: // $bb70
        ___assert_fail(((__str14389)&4294967295), ((__str15390)&4294967295), 407, ((___PRETTY_FUNCTION___8596)&4294967295)); //@line 407 "textio.c"
        throw "Reached an unreachable! Original .ll line: 26375"; //@line 407 "textio.c"
      case 67: // $bb71
        var $257=HEAP[$len]; //@line 408 "textio.c"
        var $258=((($257) * 2)&4294967295); //@line 408 "textio.c"
        var $259=HEAP[$output]; //@line 408 "textio.c"
        var $260=$259; //@line 408 "textio.c"
        var $261=(($260+12)&4294967295); //@line 408 "textio.c"
        var $262=HEAP[$261]; //@line 408 "textio.c"
        var $263=HEAP[$translated]; //@line 408 "textio.c"
        var $264=$263; //@line 408 "textio.c"
        var $265=(($264+12)&4294967295); //@line 408 "textio.c"
        var $266=HEAP[$265]; //@line 408 "textio.c"
        var $267=$266; //@line 408 "textio.c"
        var $268=$262; //@line 408 "textio.c"
        _llvm_memcpy_p0i8_p0i8_i32($267, $268, $258, 1, 0); //@line 408 "textio.c"
        __label__ = 69; break; //@line 408 "textio.c"
      case 68: // $bb72
        var $269=HEAP[$output]; //@line 413 "textio.c"
        HEAP[$translated]=$269; //@line 413 "textio.c"
        __label__ = 69; break; //@line 413 "textio.c"
      case 69: // $bb73
        var $270=HEAP[$translated]; //@line 415 "textio.c"
        var $271=$270; //@line 415 "textio.c"
        var $272=(($271+12)&4294967295); //@line 415 "textio.c"
        var $273=HEAP[$272]; //@line 415 "textio.c"
        HEAP[$out_str]=$273; //@line 415 "textio.c"
        var $274=HEAP[$in_str]; //@line 416 "textio.c"
        HEAP[$in]=$274; //@line 416 "textio.c"
        var $275=HEAP[$out_str]; //@line 417 "textio.c"
        HEAP[$out66]=$275; //@line 417 "textio.c"
        var $276=HEAP[$in_str]; //@line 418 "textio.c"
        var $277=HEAP[$len]; //@line 418 "textio.c"
        var $278=(($276+2*$277)&4294967295); //@line 418 "textio.c"
        HEAP[$end67]=$278; //@line 418 "textio.c"
        __label__ = 70; break; //@line 418 "textio.c"
      case 70: // $bb74
        __label__ = 72; break; //@line 418 "textio.c"
      case 71: // $bb75
        var $279=HEAP[$out66]; //@line 423 "textio.c"
        var $280=HEAP[$c76]; //@line 423 "textio.c"
        HEAP[$279]=$280; //@line 423 "textio.c"
        var $281=HEAP[$out66]; //@line 423 "textio.c"
        var $282=(($281+2)&4294967295); //@line 423 "textio.c"
        HEAP[$out66]=$282; //@line 423 "textio.c"
        __label__ = 72; break; //@line 423 "textio.c"
      case 72: // $bb77
        var $283=HEAP[$in]; //@line 422 "textio.c"
        var $284=HEAP[$283]; //@line 422 "textio.c"
        HEAP[$c76]=$284; //@line 422 "textio.c"
        var $285=HEAP[$c76]; //@line 422 "textio.c"
        var $286=unSign(($285), 16, 0) > 13; //@line 422 "textio.c"
        var $287=unSign(($286), 1, 0); //@line 422 "textio.c"
        var $288=HEAP[$in]; //@line 422 "textio.c"
        var $289=(($288+2)&4294967295); //@line 422 "textio.c"
        HEAP[$in]=$289; //@line 422 "textio.c"
        var $toBool=reSign(($287), 8, 0)!=0; //@line 422 "textio.c"
        if ($toBool) { __label__ = 71; break; } else { __label__ = 73; break; } //@line 422 "textio.c"
      case 73: // $bb78
        var $290=HEAP[$c76]; //@line 424 "textio.c"
        var $291=reSign(($290), 16, 0)==10; //@line 424 "textio.c"
        if ($291) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 424 "textio.c"
      case 74: // $bb79
        var $292=HEAP[$out66]; //@line 425 "textio.c"
        var $293=HEAP[$c76]; //@line 425 "textio.c"
        HEAP[$292]=$293; //@line 425 "textio.c"
        var $294=HEAP[$out66]; //@line 425 "textio.c"
        var $295=(($294+2)&4294967295); //@line 425 "textio.c"
        HEAP[$out66]=$295; //@line 425 "textio.c"
        var $296=HEAP[$seennl]; //@line 426 "textio.c"
        var $297=($296) | 2; //@line 426 "textio.c"
        HEAP[$seennl]=$297; //@line 426 "textio.c"
        __label__ = 82; break; //@line 426 "textio.c"
      case 75: // $bb80
        var $298=HEAP[$c76]; //@line 429 "textio.c"
        var $299=reSign(($298), 16, 0)==13; //@line 429 "textio.c"
        if ($299) { __label__ = 76; break; } else { __label__ = 80; break; } //@line 429 "textio.c"
      case 76: // $bb81
        var $300=HEAP[$in]; //@line 430 "textio.c"
        var $301=HEAP[$300]; //@line 430 "textio.c"
        var $302=reSign(($301), 16, 0)==10; //@line 430 "textio.c"
        if ($302) { __label__ = 77; break; } else { __label__ = 78; break; } //@line 430 "textio.c"
      case 77: // $bb82
        var $303=HEAP[$in]; //@line 431 "textio.c"
        var $304=(($303+2)&4294967295); //@line 431 "textio.c"
        HEAP[$in]=$304; //@line 431 "textio.c"
        var $305=HEAP[$seennl]; //@line 432 "textio.c"
        var $306=($305) | 4; //@line 432 "textio.c"
        HEAP[$seennl]=$306; //@line 432 "textio.c"
        __label__ = 79; break; //@line 432 "textio.c"
      case 78: // $bb83
        var $307=HEAP[$seennl]; //@line 435 "textio.c"
        var $308=($307) | 1; //@line 435 "textio.c"
        HEAP[$seennl]=$308; //@line 435 "textio.c"
        __label__ = 79; break; //@line 435 "textio.c"
      case 79: // $bb84
        var $309=HEAP[$out66]; //@line 436 "textio.c"
        HEAP[$309]=10; //@line 436 "textio.c"
        var $310=HEAP[$out66]; //@line 436 "textio.c"
        var $311=(($310+2)&4294967295); //@line 436 "textio.c"
        HEAP[$out66]=$311; //@line 436 "textio.c"
        __label__ = 82; break; //@line 436 "textio.c"
      case 80: // $bb85
        var $312=HEAP[$in]; //@line 439 "textio.c"
        var $313=HEAP[$end67]; //@line 439 "textio.c"
        var $314=($312) > ($313); //@line 439 "textio.c"
        if ($314) { __label__ = 83; break; } else { __label__ = 81; break; } //@line 439 "textio.c"
      case 81: // $bb86
        var $315=HEAP[$out66]; //@line 441 "textio.c"
        var $316=HEAP[$c76]; //@line 441 "textio.c"
        HEAP[$315]=$316; //@line 441 "textio.c"
        var $317=HEAP[$out66]; //@line 441 "textio.c"
        var $318=(($317+2)&4294967295); //@line 441 "textio.c"
        HEAP[$out66]=$318; //@line 441 "textio.c"
        __label__ = 82; break; //@line 441 "textio.c"
      case 82: // $bb87
        __label__ = 70; break; //@line 441 "textio.c"
      case 83: // $bb88
        var $319=HEAP[$output]; //@line 443 "textio.c"
        var $320=HEAP[$translated]; //@line 443 "textio.c"
        var $321=($320)!=($319); //@line 443 "textio.c"
        if ($321) { __label__ = 84; break; } else { __label__ = 87; break; } //@line 443 "textio.c"
      case 84: // $bb89
        var $322=HEAP[$output]; //@line 444 "textio.c"
        var $323=(($322)&4294967295); //@line 444 "textio.c"
        var $324=HEAP[$323]; //@line 444 "textio.c"
        var $325=((($324) - 1)&4294967295); //@line 444 "textio.c"
        var $326=(($322)&4294967295); //@line 444 "textio.c"
        HEAP[$326]=$325; //@line 444 "textio.c"
        var $327=(($322)&4294967295); //@line 444 "textio.c"
        var $328=HEAP[$327]; //@line 444 "textio.c"
        var $329=((($328))|0)==0; //@line 444 "textio.c"
        if ($329) { __label__ = 85; break; } else { __label__ = 86; break; } //@line 444 "textio.c"
      case 85: // $bb90
        var $330=HEAP[$output]; //@line 444 "textio.c"
        var $331=(($330+4)&4294967295); //@line 444 "textio.c"
        var $332=HEAP[$331]; //@line 444 "textio.c"
        var $333=(($332+24)&4294967295); //@line 444 "textio.c"
        var $334=HEAP[$333]; //@line 444 "textio.c"
        var $335=HEAP[$output]; //@line 444 "textio.c"
        FUNCTION_TABLE[$334]($335); //@line 444 "textio.c"
        __label__ = 86; break; //@line 444 "textio.c"
      case 86: // $bb91
        var $336=HEAP[$translated]; //@line 445 "textio.c"
        HEAP[$output]=$336; //@line 445 "textio.c"
        __label__ = 87; break; //@line 445 "textio.c"
      case 87: // $bb92
        var $337=HEAP[$out66]; //@line 447 "textio.c"
        var $338=($337); //@line 447 "textio.c"
        var $339=HEAP[$out_str]; //@line 447 "textio.c"
        var $340=($339); //@line 447 "textio.c"
        var $341=((($338) - ($340))&4294967295); //@line 447 "textio.c"
        var $342=((((($341))|0)/2)|0); //@line 447 "textio.c"
        var $343=HEAP[$len]; //@line 447 "textio.c"
        var $344=((($342))|0)!=((($343))|0); //@line 447 "textio.c"
        if ($344) { __label__ = 88; break; } else { __label__ = 89; break; } //@line 447 "textio.c"
      case 88: // $bb93
        var $345=HEAP[$out66]; //@line 448 "textio.c"
        var $346=($345); //@line 448 "textio.c"
        var $347=HEAP[$out_str]; //@line 448 "textio.c"
        var $348=($347); //@line 448 "textio.c"
        var $349=((($346) - ($348))&4294967295); //@line 448 "textio.c"
        var $350=((((($349))|0)/2)|0); //@line 448 "textio.c"
        var $351=_PyUnicodeUCS2_Resize($output, $350); //@line 448 "textio.c"
        var $352=((($351))|0) < 0; //@line 448 "textio.c"
        if ($352) { __label__ = 90; break; } else { __label__ = 89; break; } //@line 448 "textio.c"
      case 89: // $bb94
        var $353=HEAP[$self]; //@line 452 "textio.c"
        var $354=(($353+16)&4294967295); //@line 452 "textio.c"
        var $355=HEAP[$354]; //@line 452 "textio.c"
        var $356=($355) << 3; //@line 452 "textio.c"
        var $357=unSign(($356), 8, 0) >>> 5; //@line 452 "textio.c"
        var $358=((($357)) & 7); //@line 452 "textio.c"
        var $359=($358); //@line 452 "textio.c"
        var $360=HEAP[$seennl]; //@line 452 "textio.c"
        var $361=((($360)) & 255); //@line 452 "textio.c"
        var $362=($359) | ($361); //@line 452 "textio.c"
        var $363=((($362)) & 7); //@line 452 "textio.c"
        var $364=HEAP[$self]; //@line 452 "textio.c"
        var $365=(($364+16)&4294967295); //@line 452 "textio.c"
        var $366=($363); //@line 452 "textio.c"
        var $367=HEAP[$365]; //@line 452 "textio.c"
        var $368=($366) << 2; //@line 452 "textio.c"
        var $369=($368) & 28; //@line 452 "textio.c"
        var $370=($367) & -29; //@line 452 "textio.c"
        var $371=($370) | ($369); //@line 452 "textio.c"
        HEAP[$365]=$371; //@line 452 "textio.c"
        var $372=HEAP[$output]; //@line 455 "textio.c"
        HEAP[$0]=$372; //@line 455 "textio.c"
        __label__ = 93; break; //@line 455 "textio.c"
      case 90: // $error
        var $373=HEAP[$output]; //@line 458 "textio.c"
        var $374=(($373)&4294967295); //@line 458 "textio.c"
        var $375=HEAP[$374]; //@line 458 "textio.c"
        var $376=((($375) - 1)&4294967295); //@line 458 "textio.c"
        var $377=(($373)&4294967295); //@line 458 "textio.c"
        HEAP[$377]=$376; //@line 458 "textio.c"
        var $378=(($373)&4294967295); //@line 458 "textio.c"
        var $379=HEAP[$378]; //@line 458 "textio.c"
        var $380=((($379))|0)==0; //@line 458 "textio.c"
        if ($380) { __label__ = 91; break; } else { __label__ = 92; break; } //@line 458 "textio.c"
      case 91: // $bb95
        var $381=HEAP[$output]; //@line 458 "textio.c"
        var $382=(($381+4)&4294967295); //@line 458 "textio.c"
        var $383=HEAP[$382]; //@line 458 "textio.c"
        var $384=(($383+24)&4294967295); //@line 458 "textio.c"
        var $385=HEAP[$384]; //@line 458 "textio.c"
        var $386=HEAP[$output]; //@line 458 "textio.c"
        FUNCTION_TABLE[$385]($386); //@line 458 "textio.c"
        __label__ = 92; break; //@line 458 "textio.c"
      case 92: // $bb96
        HEAP[$0]=0; //@line 459 "textio.c"
        __label__ = 93; break; //@line 459 "textio.c"
      case 93: // $bb97
        var $387=HEAP[$0]; //@line 255 "textio.c"
        HEAP[$retval]=$387; //@line 255 "textio.c"
        __label__ = 94; break; //@line 255 "textio.c"
      case 94: // $return
        var $retval98=HEAP[$retval]; //@line 255 "textio.c"
        STACKTOP = __stackBase__;
        return $retval98; //@line 255 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _incrementalnewlinedecoder_decode($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kwds_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $kwlist=__stackBase__+20;
        var $input=__stackBase__+32;
        var $final=__stackBase__+36;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$kwds_addr]=$kwds;
        var $1=(($kwlist)&4294967295); //@line 466 "textio.c"
        var $2=HEAP[((_C_56_8818)&4294967295)]; //@line 466 "textio.c"
        HEAP[$1]=$2; //@line 466 "textio.c"
        var $3=(($kwlist+4)&4294967295); //@line 466 "textio.c"
        var $4=HEAP[((_C_56_8818+4)&4294967295)]; //@line 466 "textio.c"
        HEAP[$3]=$4; //@line 466 "textio.c"
        var $5=(($kwlist+8)&4294967295); //@line 466 "textio.c"
        var $6=HEAP[((_C_56_8818+8)&4294967295)]; //@line 466 "textio.c"
        HEAP[$5]=$6; //@line 466 "textio.c"
        HEAP[$final]=0; //@line 468 "textio.c"
        var $7=HEAP[$args_addr]; //@line 470 "textio.c"
        var $8=HEAP[$kwds_addr]; //@line 470 "textio.c"
        var $kwlist1=$kwlist; //@line 470 "textio.c"
        var $9=__PyArg_ParseTupleAndKeywords_SizeT($7, $8, ((__str18393)&4294967295), $kwlist1, $input, $final); //@line 470 "textio.c"
        var $10=((($9))|0)==0; //@line 470 "textio.c"
        if ($10) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 470 "textio.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 472 "textio.c"
        __label__ = 3; break; //@line 472 "textio.c"
      case 2: // $bb2
        var $11=HEAP[$final]; //@line 473 "textio.c"
        var $12=HEAP[$input]; //@line 473 "textio.c"
        var $13=HEAP[$self_addr]; //@line 473 "textio.c"
        var $14=$13; //@line 473 "textio.c"
        var $15=__PyIncrementalNewlineDecoder_decode($14, $12, $11); //@line 473 "textio.c"
        HEAP[$0]=$15; //@line 473 "textio.c"
        __label__ = 3; break; //@line 473 "textio.c"
      case 3: // $bb3
        var $16=HEAP[$0]; //@line 472 "textio.c"
        HEAP[$retval]=$16; //@line 472 "textio.c"
        __label__ = 4; break; //@line 472 "textio.c"
      case 4: // $return
        var $retval4=HEAP[$retval]; //@line 472 "textio.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 472 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _incrementalnewlinedecoder_getstate($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $buffer=__stackBase__+16;
        var $flag=__stackBase__+20;
        var $state=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 482 "textio.c"
        var $2=(($1+8)&4294967295); //@line 482 "textio.c"
        var $3=HEAP[$2]; //@line 482 "textio.c"
        var $4=($3)!=(__Py_NoneStruct); //@line 482 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 10; break; } //@line 482 "textio.c"
      case 1: // $bb
        var $5=HEAP[__PyIO_str_getstate]; //@line 484 "textio.c"
        var $6=HEAP[$self_addr]; //@line 484 "textio.c"
        var $7=(($6+8)&4294967295); //@line 484 "textio.c"
        var $8=HEAP[$7]; //@line 484 "textio.c"
        var $9=_PyObject_CallMethodObjArgs($8, $5, 0); //@line 484 "textio.c"
        HEAP[$state]=$9; //@line 484 "textio.c"
        var $10=HEAP[$state]; //@line 485 "textio.c"
        var $11=($10)==0; //@line 485 "textio.c"
        if ($11) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 485 "textio.c"
      case 2: // $bb1
        HEAP[$0]=0; //@line 486 "textio.c"
        __label__ = 14; break; //@line 486 "textio.c"
      case 3: // $bb2
        var $12=HEAP[$state]; //@line 487 "textio.c"
        var $13=__PyArg_Parse_SizeT($12, ((__str19394)&4294967295), $buffer, $flag); //@line 487 "textio.c"
        var $14=((($13))|0)==0; //@line 487 "textio.c"
        if ($14) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 487 "textio.c"
      case 4: // $bb3
        var $15=HEAP[$state]; //@line 488 "textio.c"
        var $16=(($15)&4294967295); //@line 488 "textio.c"
        var $17=HEAP[$16]; //@line 488 "textio.c"
        var $18=((($17) - 1)&4294967295); //@line 488 "textio.c"
        var $19=HEAP[$state]; //@line 488 "textio.c"
        var $20=(($19)&4294967295); //@line 488 "textio.c"
        HEAP[$20]=$18; //@line 488 "textio.c"
        var $21=HEAP[$state]; //@line 488 "textio.c"
        var $22=(($21)&4294967295); //@line 488 "textio.c"
        var $23=HEAP[$22]; //@line 488 "textio.c"
        var $24=((($23))|0)==0; //@line 488 "textio.c"
        if ($24) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 488 "textio.c"
      case 5: // $bb4
        var $25=HEAP[$state]; //@line 488 "textio.c"
        var $26=(($25+4)&4294967295); //@line 488 "textio.c"
        var $27=HEAP[$26]; //@line 488 "textio.c"
        var $28=(($27+24)&4294967295); //@line 488 "textio.c"
        var $29=HEAP[$28]; //@line 488 "textio.c"
        var $30=HEAP[$state]; //@line 488 "textio.c"
        FUNCTION_TABLE[$29]($30); //@line 488 "textio.c"
        __label__ = 6; break; //@line 488 "textio.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 489 "textio.c"
        __label__ = 14; break; //@line 489 "textio.c"
      case 7: // $bb6
        var $31=HEAP[$buffer]; //@line 491 "textio.c"
        var $32=(($31)&4294967295); //@line 491 "textio.c"
        var $33=HEAP[$32]; //@line 491 "textio.c"
        var $34=((($33) + 1)&4294967295); //@line 491 "textio.c"
        var $35=(($31)&4294967295); //@line 491 "textio.c"
        HEAP[$35]=$34; //@line 491 "textio.c"
        var $36=HEAP[$state]; //@line 492 "textio.c"
        var $37=(($36)&4294967295); //@line 492 "textio.c"
        var $38=HEAP[$37]; //@line 492 "textio.c"
        var $39=((($38) - 1)&4294967295); //@line 492 "textio.c"
        var $40=HEAP[$state]; //@line 492 "textio.c"
        var $41=(($40)&4294967295); //@line 492 "textio.c"
        HEAP[$41]=$39; //@line 492 "textio.c"
        var $42=HEAP[$state]; //@line 492 "textio.c"
        var $43=(($42)&4294967295); //@line 492 "textio.c"
        var $44=HEAP[$43]; //@line 492 "textio.c"
        var $45=((($44))|0)==0; //@line 492 "textio.c"
        if ($45) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 492 "textio.c"
      case 8: // $bb7
        var $46=HEAP[$state]; //@line 492 "textio.c"
        var $47=(($46+4)&4294967295); //@line 492 "textio.c"
        var $48=HEAP[$47]; //@line 492 "textio.c"
        var $49=(($48+24)&4294967295); //@line 492 "textio.c"
        var $50=HEAP[$49]; //@line 492 "textio.c"
        var $51=HEAP[$state]; //@line 492 "textio.c"
        FUNCTION_TABLE[$50]($51); //@line 492 "textio.c"
        __label__ = 9; break; //@line 492 "textio.c"
      case 9: // $bb8
        __label__ = 11; break; //@line 492 "textio.c"
      case 10: // $bb9
        var $52=_PyString_FromString(((__str20395)&4294967295)); //@line 495 "textio.c"
        HEAP[$buffer]=$52; //@line 495 "textio.c"
        HEAP[$flag]=0; //@line 496 "textio.c"
        __label__ = 11; break; //@line 496 "textio.c"
      case 11: // $bb10
        var $53=HEAP[$flag]; //@line 498 "textio.c"
        var $54=($53)*Math.pow(2,1); //@line 498 "textio.c"
        HEAP[$flag]=$54; //@line 498 "textio.c"
        var $55=HEAP[$self_addr]; //@line 499 "textio.c"
        var $56=(($55+16)&4294967295); //@line 499 "textio.c"
        var $57=HEAP[$56]; //@line 499 "textio.c"
        var $58=($57) << 7; //@line 499 "textio.c"
        var $59=reSign(($58), 8, 0) >> 7; //@line 499 "textio.c"
        var $60=((($59)) & 1); //@line 499 "textio.c"
        var $61=reSign(($60), 1, 0)!=0; //@line 499 "textio.c"
        if ($61) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 499 "textio.c"
      case 12: // $bb11
        var $62=HEAP[$flag]; //@line 500 "textio.c"
        var $63=Runtime.or64(($62), 1); //@line 500 "textio.c"
        HEAP[$flag]=$63; //@line 500 "textio.c"
        __label__ = 13; break; //@line 500 "textio.c"
      case 13: // $bb12
        var $64=HEAP[$flag]; //@line 501 "textio.c"
        var $65=HEAP[$buffer]; //@line 501 "textio.c"
        var $66=__Py_BuildValue_SizeT(((__str21396)&4294967295), $65, $64); //@line 501 "textio.c"
        HEAP[$0]=$66; //@line 501 "textio.c"
        __label__ = 14; break; //@line 501 "textio.c"
      case 14: // $bb13
        var $67=HEAP[$0]; //@line 486 "textio.c"
        HEAP[$retval]=$67; //@line 486 "textio.c"
        __label__ = 15; break; //@line 486 "textio.c"
      case 15: // $return
        var $retval14=HEAP[$retval]; //@line 486 "textio.c"
        STACKTOP = __stackBase__;
        return $retval14; //@line 486 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _incrementalnewlinedecoder_setstate($self, $state) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $state_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $buffer=__stackBase__+16;
        var $flag=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$state_addr]=$state;
        var $1=HEAP[$state_addr]; //@line 510 "textio.c"
        var $2=__PyArg_Parse_SizeT($1, ((__str19394)&4294967295), $buffer, $flag); //@line 510 "textio.c"
        var $3=((($2))|0)==0; //@line 510 "textio.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 510 "textio.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 511 "textio.c"
        __label__ = 5; break; //@line 511 "textio.c"
      case 2: // $bb1
        var $4=HEAP[$flag]; //@line 513 "textio.c"
        var $5=((($4)) & 255); //@line 513 "textio.c"
        var $6=((($5)) & 1); //@line 513 "textio.c"
        var $7=HEAP[$self_addr]; //@line 513 "textio.c"
        var $8=(($7+16)&4294967295); //@line 513 "textio.c"
        var $9=reSign(($6), 1, 0); //@line 513 "textio.c"
        var $10=HEAP[$8]; //@line 513 "textio.c"
        var $11=($9) & 1; //@line 513 "textio.c"
        var $12=($10) & -2; //@line 513 "textio.c"
        var $13=($12) | ($11); //@line 513 "textio.c"
        HEAP[$8]=$13; //@line 513 "textio.c"
        var $14=HEAP[$flag]; //@line 514 "textio.c"
        var $15=unSign(($14), 64, 0)/Math.pow(2,1); //@line 514 "textio.c"
        HEAP[$flag]=$15; //@line 514 "textio.c"
        var $16=HEAP[$self_addr]; //@line 516 "textio.c"
        var $17=(($16+8)&4294967295); //@line 516 "textio.c"
        var $18=HEAP[$17]; //@line 516 "textio.c"
        var $19=($18)!=(__Py_NoneStruct); //@line 516 "textio.c"
        if ($19) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 516 "textio.c"
      case 3: // $bb2
        var $20=HEAP[$flag]; //@line 517 "textio.c"
        var $21=HEAP[$buffer]; //@line 517 "textio.c"
        var $22=HEAP[$self_addr]; //@line 517 "textio.c"
        var $23=(($22+8)&4294967295); //@line 517 "textio.c"
        var $24=HEAP[$23]; //@line 517 "textio.c"
        var $25=__PyObject_CallMethod_SizeT($24, ((__str22397)&4294967295), ((__str23398)&4294967295), $21, $20); //@line 517 "textio.c"
        HEAP[$0]=$25; //@line 517 "textio.c"
        __label__ = 5; break; //@line 517 "textio.c"
      case 4: // $bb3
        var $26=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 520 "textio.c"
        var $27=((($26) + 1)&4294967295); //@line 520 "textio.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$27; //@line 520 "textio.c"
        HEAP[$0]=__Py_NoneStruct; //@line 520 "textio.c"
        __label__ = 5; break; //@line 520 "textio.c"
      case 5: // $bb4
        var $28=HEAP[$0]; //@line 511 "textio.c"
        HEAP[$retval]=$28; //@line 511 "textio.c"
        __label__ = 6; break; //@line 511 "textio.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 511 "textio.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 511 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _incrementalnewlinedecoder_reset($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 526 "textio.c"
        var $2=(($1+16)&4294967295); //@line 526 "textio.c"
        var $3=HEAP[$2]; //@line 526 "textio.c"
        var $4=($3) & -29; //@line 526 "textio.c"
        HEAP[$2]=$4; //@line 526 "textio.c"
        var $5=HEAP[$self_addr]; //@line 527 "textio.c"
        var $6=(($5+16)&4294967295); //@line 527 "textio.c"
        var $7=HEAP[$6]; //@line 527 "textio.c"
        var $8=($7) & -2; //@line 527 "textio.c"
        HEAP[$6]=$8; //@line 527 "textio.c"
        var $9=HEAP[$self_addr]; //@line 528 "textio.c"
        var $10=(($9+8)&4294967295); //@line 528 "textio.c"
        var $11=HEAP[$10]; //@line 528 "textio.c"
        var $12=($11)!=(__Py_NoneStruct); //@line 528 "textio.c"
        if ($12) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 528 "textio.c"
      case 1: // $bb
        var $13=HEAP[__PyIO_str_reset]; //@line 529 "textio.c"
        var $14=HEAP[$self_addr]; //@line 529 "textio.c"
        var $15=(($14+8)&4294967295); //@line 529 "textio.c"
        var $16=HEAP[$15]; //@line 529 "textio.c"
        var $17=_PyObject_CallMethodObjArgs($16, $13, 0); //@line 529 "textio.c"
        HEAP[$0]=$17; //@line 529 "textio.c"
        __label__ = 3; break; //@line 529 "textio.c"
      case 2: // $bb1
        var $18=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 531 "textio.c"
        var $19=((($18) + 1)&4294967295); //@line 531 "textio.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$19; //@line 531 "textio.c"
        HEAP[$0]=__Py_NoneStruct; //@line 531 "textio.c"
        __label__ = 3; break; //@line 531 "textio.c"
      case 3: // $bb2
        var $20=HEAP[$0]; //@line 529 "textio.c"
        HEAP[$retval]=$20; //@line 529 "textio.c"
        __label__ = 4; break; //@line 529 "textio.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 529 "textio.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 529 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _incrementalnewlinedecoder_newlines_get($self, $context) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $context_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$context_addr]=$context;
        var $1=HEAP[$self_addr]; //@line 537 "textio.c"
        var $2=(($1+16)&4294967295); //@line 537 "textio.c"
        var $3=HEAP[$2]; //@line 537 "textio.c"
        var $4=($3) << 3; //@line 537 "textio.c"
        var $5=unSign(($4), 8, 0) >>> 5; //@line 537 "textio.c"
        var $6=((($5)) & 7); //@line 537 "textio.c"
        var $7=($6); //@line 537 "textio.c"
        if ($7 == 1) {
          __label__ = 1; break;
        }
        else if ($7 == 2) {
          __label__ = 2; break;
        }
        else if ($7 == 3) {
          __label__ = 4; break;
        }
        else if ($7 == 4) {
          __label__ = 3; break;
        }
        else if ($7 == 5) {
          __label__ = 5; break;
        }
        else if ($7 == 6) {
          __label__ = 6; break;
        }
        else if ($7 == 7) {
          __label__ = 7; break;
        }
        else {
        __label__ = 8; break;
        }
        
      case 1: // $bb
        var $8=_PyUnicodeUCS2_FromString(((__str24399)&4294967295)); //@line 539 "textio.c"
        HEAP[$0]=$8; //@line 539 "textio.c"
        __label__ = 9; break; //@line 539 "textio.c"
      case 2: // $bb1
        var $9=_PyUnicodeUCS2_FromString(((__str25400)&4294967295)); //@line 541 "textio.c"
        HEAP[$0]=$9; //@line 541 "textio.c"
        __label__ = 9; break; //@line 541 "textio.c"
      case 3: // $bb2
        var $10=_PyUnicodeUCS2_FromString(((__str26401)&4294967295)); //@line 543 "textio.c"
        HEAP[$0]=$10; //@line 543 "textio.c"
        __label__ = 9; break; //@line 543 "textio.c"
      case 4: // $bb3
        var $11=__Py_BuildValue_SizeT(((__str27402)&4294967295), ((__str24399)&4294967295), ((__str25400)&4294967295)); //@line 545 "textio.c"
        HEAP[$0]=$11; //@line 545 "textio.c"
        __label__ = 9; break; //@line 545 "textio.c"
      case 5: // $bb4
        var $12=__Py_BuildValue_SizeT(((__str27402)&4294967295), ((__str24399)&4294967295), ((__str26401)&4294967295)); //@line 547 "textio.c"
        HEAP[$0]=$12; //@line 547 "textio.c"
        __label__ = 9; break; //@line 547 "textio.c"
      case 6: // $bb5
        var $13=__Py_BuildValue_SizeT(((__str27402)&4294967295), ((__str25400)&4294967295), ((__str26401)&4294967295)); //@line 549 "textio.c"
        HEAP[$0]=$13; //@line 549 "textio.c"
        __label__ = 9; break; //@line 549 "textio.c"
      case 7: // $bb6
        var $14=__Py_BuildValue_SizeT(((__str28403)&4294967295), ((__str24399)&4294967295), ((__str25400)&4294967295), ((__str26401)&4294967295)); //@line 551 "textio.c"
        HEAP[$0]=$14; //@line 551 "textio.c"
        __label__ = 9; break; //@line 551 "textio.c"
      case 8: // $bb7
        var $15=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 553 "textio.c"
        var $16=((($15) + 1)&4294967295); //@line 553 "textio.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$16; //@line 553 "textio.c"
        HEAP[$0]=__Py_NoneStruct; //@line 553 "textio.c"
        __label__ = 9; break; //@line 553 "textio.c"
      case 9: // $bb8
        var $17=HEAP[$0]; //@line 539 "textio.c"
        HEAP[$retval]=$17; //@line 539 "textio.c"
        __label__ = 10; break; //@line 539 "textio.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 539 "textio.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 539 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _ascii_encode($self, $text) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $text_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$text_addr]=$text;
        var $1=HEAP[$self_addr]; //@line 701 "textio.c"
        var $2=(($1+40)&4294967295); //@line 701 "textio.c"
        var $3=HEAP[$2]; //@line 701 "textio.c"
        var $4=$3; //@line 701 "textio.c"
        var $5=(($4+20)&4294967295); //@line 701 "textio.c"
        var $6=(($5)&4294967295); //@line 701 "textio.c"
        var $7=HEAP[$text_addr]; //@line 701 "textio.c"
        var $8=$7; //@line 701 "textio.c"
        var $9=(($8+8)&4294967295); //@line 701 "textio.c"
        var $10=HEAP[$9]; //@line 701 "textio.c"
        var $11=HEAP[$text_addr]; //@line 701 "textio.c"
        var $12=$11; //@line 701 "textio.c"
        var $13=(($12+12)&4294967295); //@line 701 "textio.c"
        var $14=HEAP[$13]; //@line 701 "textio.c"
        var $15=_PyUnicodeUCS2_EncodeASCII($14, $10, $6); //@line 701 "textio.c"
        HEAP[$0]=$15; //@line 701 "textio.c"
        var $16=HEAP[$0]; //@line 701 "textio.c"
        HEAP[$retval]=$16; //@line 701 "textio.c"
        __label__ = 1; break; //@line 701 "textio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 701 "textio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 701 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _utf16be_encode($self, $text) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $text_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$text_addr]=$text;
        var $1=HEAP[$self_addr]; //@line 709 "textio.c"
        var $2=(($1+40)&4294967295); //@line 709 "textio.c"
        var $3=HEAP[$2]; //@line 709 "textio.c"
        var $4=$3; //@line 709 "textio.c"
        var $5=(($4+20)&4294967295); //@line 709 "textio.c"
        var $6=(($5)&4294967295); //@line 709 "textio.c"
        var $7=HEAP[$text_addr]; //@line 709 "textio.c"
        var $8=$7; //@line 709 "textio.c"
        var $9=(($8+8)&4294967295); //@line 709 "textio.c"
        var $10=HEAP[$9]; //@line 709 "textio.c"
        var $11=HEAP[$text_addr]; //@line 709 "textio.c"
        var $12=$11; //@line 709 "textio.c"
        var $13=(($12+12)&4294967295); //@line 709 "textio.c"
        var $14=HEAP[$13]; //@line 709 "textio.c"
        var $15=_PyUnicodeUCS2_EncodeUTF16($14, $10, $6, 1); //@line 709 "textio.c"
        HEAP[$0]=$15; //@line 709 "textio.c"
        var $16=HEAP[$0]; //@line 709 "textio.c"
        HEAP[$retval]=$16; //@line 709 "textio.c"
        __label__ = 1; break; //@line 709 "textio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 709 "textio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 709 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _utf16le_encode($self, $text) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $text_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$text_addr]=$text;
        var $1=HEAP[$self_addr]; //@line 717 "textio.c"
        var $2=(($1+40)&4294967295); //@line 717 "textio.c"
        var $3=HEAP[$2]; //@line 717 "textio.c"
        var $4=$3; //@line 717 "textio.c"
        var $5=(($4+20)&4294967295); //@line 717 "textio.c"
        var $6=(($5)&4294967295); //@line 717 "textio.c"
        var $7=HEAP[$text_addr]; //@line 717 "textio.c"
        var $8=$7; //@line 717 "textio.c"
        var $9=(($8+8)&4294967295); //@line 717 "textio.c"
        var $10=HEAP[$9]; //@line 717 "textio.c"
        var $11=HEAP[$text_addr]; //@line 717 "textio.c"
        var $12=$11; //@line 717 "textio.c"
        var $13=(($12+12)&4294967295); //@line 717 "textio.c"
        var $14=HEAP[$13]; //@line 717 "textio.c"
        var $15=_PyUnicodeUCS2_EncodeUTF16($14, $10, $6, -1); //@line 717 "textio.c"
        HEAP[$0]=$15; //@line 717 "textio.c"
        var $16=HEAP[$0]; //@line 717 "textio.c"
        HEAP[$retval]=$16; //@line 717 "textio.c"
        __label__ = 1; break; //@line 717 "textio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 717 "textio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 717 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _utf16_encode($self, $text) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $text_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$text_addr]=$text;
        var $1=HEAP[$self_addr]; //@line 725 "textio.c"
        var $2=(($1+60)&4294967295); //@line 725 "textio.c"
        var $3=HEAP[$2]; //@line 725 "textio.c"
        var $4=reSign(($3), 8, 0)==0; //@line 725 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 725 "textio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 730 "textio.c"
        var $6=HEAP[$text_addr]; //@line 730 "textio.c"
        var $7=_utf16le_encode($5, $6); //@line 730 "textio.c"
        HEAP[$0]=$7; //@line 730 "textio.c"
        __label__ = 3; break; //@line 730 "textio.c"
      case 2: // $bb1
        var $8=HEAP[$self_addr]; //@line 733 "textio.c"
        var $9=(($8+40)&4294967295); //@line 733 "textio.c"
        var $10=HEAP[$9]; //@line 733 "textio.c"
        var $11=$10; //@line 733 "textio.c"
        var $12=(($11+20)&4294967295); //@line 733 "textio.c"
        var $13=(($12)&4294967295); //@line 733 "textio.c"
        var $14=HEAP[$text_addr]; //@line 733 "textio.c"
        var $15=$14; //@line 733 "textio.c"
        var $16=(($15+8)&4294967295); //@line 733 "textio.c"
        var $17=HEAP[$16]; //@line 733 "textio.c"
        var $18=HEAP[$text_addr]; //@line 733 "textio.c"
        var $19=$18; //@line 733 "textio.c"
        var $20=(($19+12)&4294967295); //@line 733 "textio.c"
        var $21=HEAP[$20]; //@line 733 "textio.c"
        var $22=_PyUnicodeUCS2_EncodeUTF16($21, $17, $13, 0); //@line 733 "textio.c"
        HEAP[$0]=$22; //@line 733 "textio.c"
        __label__ = 3; break; //@line 733 "textio.c"
      case 3: // $bb2
        var $23=HEAP[$0]; //@line 730 "textio.c"
        HEAP[$retval]=$23; //@line 730 "textio.c"
        __label__ = 4; break; //@line 730 "textio.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 730 "textio.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 730 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _utf32be_encode($self, $text) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $text_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$text_addr]=$text;
        var $1=HEAP[$self_addr]; //@line 741 "textio.c"
        var $2=(($1+40)&4294967295); //@line 741 "textio.c"
        var $3=HEAP[$2]; //@line 741 "textio.c"
        var $4=$3; //@line 741 "textio.c"
        var $5=(($4+20)&4294967295); //@line 741 "textio.c"
        var $6=(($5)&4294967295); //@line 741 "textio.c"
        var $7=HEAP[$text_addr]; //@line 741 "textio.c"
        var $8=$7; //@line 741 "textio.c"
        var $9=(($8+8)&4294967295); //@line 741 "textio.c"
        var $10=HEAP[$9]; //@line 741 "textio.c"
        var $11=HEAP[$text_addr]; //@line 741 "textio.c"
        var $12=$11; //@line 741 "textio.c"
        var $13=(($12+12)&4294967295); //@line 741 "textio.c"
        var $14=HEAP[$13]; //@line 741 "textio.c"
        var $15=_PyUnicodeUCS2_EncodeUTF32($14, $10, $6, 1); //@line 741 "textio.c"
        HEAP[$0]=$15; //@line 741 "textio.c"
        var $16=HEAP[$0]; //@line 741 "textio.c"
        HEAP[$retval]=$16; //@line 741 "textio.c"
        __label__ = 1; break; //@line 741 "textio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 741 "textio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 741 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _utf32le_encode($self, $text) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $text_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$text_addr]=$text;
        var $1=HEAP[$self_addr]; //@line 749 "textio.c"
        var $2=(($1+40)&4294967295); //@line 749 "textio.c"
        var $3=HEAP[$2]; //@line 749 "textio.c"
        var $4=$3; //@line 749 "textio.c"
        var $5=(($4+20)&4294967295); //@line 749 "textio.c"
        var $6=(($5)&4294967295); //@line 749 "textio.c"
        var $7=HEAP[$text_addr]; //@line 749 "textio.c"
        var $8=$7; //@line 749 "textio.c"
        var $9=(($8+8)&4294967295); //@line 749 "textio.c"
        var $10=HEAP[$9]; //@line 749 "textio.c"
        var $11=HEAP[$text_addr]; //@line 749 "textio.c"
        var $12=$11; //@line 749 "textio.c"
        var $13=(($12+12)&4294967295); //@line 749 "textio.c"
        var $14=HEAP[$13]; //@line 749 "textio.c"
        var $15=_PyUnicodeUCS2_EncodeUTF32($14, $10, $6, -1); //@line 749 "textio.c"
        HEAP[$0]=$15; //@line 749 "textio.c"
        var $16=HEAP[$0]; //@line 749 "textio.c"
        HEAP[$retval]=$16; //@line 749 "textio.c"
        __label__ = 1; break; //@line 749 "textio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 749 "textio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 749 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _utf32_encode($self, $text) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $text_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$text_addr]=$text;
        var $1=HEAP[$self_addr]; //@line 757 "textio.c"
        var $2=(($1+60)&4294967295); //@line 757 "textio.c"
        var $3=HEAP[$2]; //@line 757 "textio.c"
        var $4=reSign(($3), 8, 0)==0; //@line 757 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 757 "textio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 762 "textio.c"
        var $6=HEAP[$text_addr]; //@line 762 "textio.c"
        var $7=_utf32le_encode($5, $6); //@line 762 "textio.c"
        HEAP[$0]=$7; //@line 762 "textio.c"
        __label__ = 3; break; //@line 762 "textio.c"
      case 2: // $bb1
        var $8=HEAP[$self_addr]; //@line 765 "textio.c"
        var $9=(($8+40)&4294967295); //@line 765 "textio.c"
        var $10=HEAP[$9]; //@line 765 "textio.c"
        var $11=$10; //@line 765 "textio.c"
        var $12=(($11+20)&4294967295); //@line 765 "textio.c"
        var $13=(($12)&4294967295); //@line 765 "textio.c"
        var $14=HEAP[$text_addr]; //@line 765 "textio.c"
        var $15=$14; //@line 765 "textio.c"
        var $16=(($15+8)&4294967295); //@line 765 "textio.c"
        var $17=HEAP[$16]; //@line 765 "textio.c"
        var $18=HEAP[$text_addr]; //@line 765 "textio.c"
        var $19=$18; //@line 765 "textio.c"
        var $20=(($19+12)&4294967295); //@line 765 "textio.c"
        var $21=HEAP[$20]; //@line 765 "textio.c"
        var $22=_PyUnicodeUCS2_EncodeUTF32($21, $17, $13, 0); //@line 765 "textio.c"
        HEAP[$0]=$22; //@line 765 "textio.c"
        __label__ = 3; break; //@line 765 "textio.c"
      case 3: // $bb2
        var $23=HEAP[$0]; //@line 762 "textio.c"
        HEAP[$retval]=$23; //@line 762 "textio.c"
        __label__ = 4; break; //@line 762 "textio.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 762 "textio.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 762 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _utf8_encode($self, $text) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $text_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$text_addr]=$text;
        var $1=HEAP[$self_addr]; //@line 773 "textio.c"
        var $2=(($1+40)&4294967295); //@line 773 "textio.c"
        var $3=HEAP[$2]; //@line 773 "textio.c"
        var $4=$3; //@line 773 "textio.c"
        var $5=(($4+20)&4294967295); //@line 773 "textio.c"
        var $6=(($5)&4294967295); //@line 773 "textio.c"
        var $7=HEAP[$text_addr]; //@line 773 "textio.c"
        var $8=$7; //@line 773 "textio.c"
        var $9=(($8+8)&4294967295); //@line 773 "textio.c"
        var $10=HEAP[$9]; //@line 773 "textio.c"
        var $11=HEAP[$text_addr]; //@line 773 "textio.c"
        var $12=$11; //@line 773 "textio.c"
        var $13=(($12+12)&4294967295); //@line 773 "textio.c"
        var $14=HEAP[$13]; //@line 773 "textio.c"
        var $15=_PyUnicodeUCS2_EncodeUTF8($14, $10, $6); //@line 773 "textio.c"
        HEAP[$0]=$15; //@line 773 "textio.c"
        var $16=HEAP[$0]; //@line 773 "textio.c"
        HEAP[$retval]=$16; //@line 773 "textio.c"
        __label__ = 1; break; //@line 773 "textio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 773 "textio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 773 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _latin1_encode($self, $text) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $text_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$text_addr]=$text;
        var $1=HEAP[$self_addr]; //@line 781 "textio.c"
        var $2=(($1+40)&4294967295); //@line 781 "textio.c"
        var $3=HEAP[$2]; //@line 781 "textio.c"
        var $4=$3; //@line 781 "textio.c"
        var $5=(($4+20)&4294967295); //@line 781 "textio.c"
        var $6=(($5)&4294967295); //@line 781 "textio.c"
        var $7=HEAP[$text_addr]; //@line 781 "textio.c"
        var $8=$7; //@line 781 "textio.c"
        var $9=(($8+8)&4294967295); //@line 781 "textio.c"
        var $10=HEAP[$9]; //@line 781 "textio.c"
        var $11=HEAP[$text_addr]; //@line 781 "textio.c"
        var $12=$11; //@line 781 "textio.c"
        var $13=(($12+12)&4294967295); //@line 781 "textio.c"
        var $14=HEAP[$13]; //@line 781 "textio.c"
        var $15=_PyUnicodeUCS2_EncodeLatin1($14, $10, $6); //@line 781 "textio.c"
        HEAP[$0]=$15; //@line 781 "textio.c"
        var $16=HEAP[$0]; //@line 781 "textio.c"
        HEAP[$retval]=$16; //@line 781 "textio.c"
        __label__ = 1; break; //@line 781 "textio.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 781 "textio.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 781 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_init($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 152; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 152);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kwds_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $iftmp_118=__stackBase__+16;
        var $iftmp_111=__stackBase__+20;
        var $0=__stackBase__+24;
        var $kwlist=__stackBase__+28;
        var $buffer=__stackBase__+52;
        var $raw=__stackBase__+56;
        var $encoding=__stackBase__+60;
        var $errors=__stackBase__+64;
        var $newline=__stackBase__+68;
        var $line_buffering=__stackBase__+72;
        var $res=__stackBase__+76;
        var $r=__stackBase__+80;
        var $_py_tmp=__stackBase__+84;
        var $_py_tmp17=__stackBase__+88;
        var $_py_tmp21=__stackBase__+92;
        var $_py_tmp25=__stackBase__+96;
        var $_py_tmp29=__stackBase__+100;
        var $_py_tmp33=__stackBase__+104;
        var $_py_tmp37=__stackBase__+108;
        var $_py_tmp41=__stackBase__+112;
        var $_py_tmp45=__stackBase__+116;
        var $_py_tmp49=__stackBase__+120;
        var $_py_tmp59=__stackBase__+124;
        var $incrementalDecoder=__stackBase__+128;
        var $_py_tmp95=__stackBase__+132;
        var $ci=__stackBase__+136;
        var $e=__stackBase__+140;
        var $cookieObj=__stackBase__+144;
        var $cmp=__stackBase__+148;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$kwds_addr]=$kwds;
        var $1=(($kwlist)&4294967295); //@line 812 "textio.c"
        var $2=HEAP[((_C_89_9154)&4294967295)]; //@line 812 "textio.c"
        HEAP[$1]=$2; //@line 812 "textio.c"
        var $3=(($kwlist+4)&4294967295); //@line 812 "textio.c"
        var $4=HEAP[((_C_89_9154+4)&4294967295)]; //@line 812 "textio.c"
        HEAP[$3]=$4; //@line 812 "textio.c"
        var $5=(($kwlist+8)&4294967295); //@line 812 "textio.c"
        var $6=HEAP[((_C_89_9154+8)&4294967295)]; //@line 812 "textio.c"
        HEAP[$5]=$6; //@line 812 "textio.c"
        var $7=(($kwlist+12)&4294967295); //@line 812 "textio.c"
        var $8=HEAP[((_C_89_9154+12)&4294967295)]; //@line 812 "textio.c"
        HEAP[$7]=$8; //@line 812 "textio.c"
        var $9=(($kwlist+16)&4294967295); //@line 812 "textio.c"
        var $10=HEAP[((_C_89_9154+16)&4294967295)]; //@line 812 "textio.c"
        HEAP[$9]=$10; //@line 812 "textio.c"
        var $11=(($kwlist+20)&4294967295); //@line 812 "textio.c"
        var $12=HEAP[((_C_89_9154+20)&4294967295)]; //@line 812 "textio.c"
        HEAP[$11]=$12; //@line 812 "textio.c"
        HEAP[$encoding]=0; //@line 814 "textio.c"
        HEAP[$errors]=0; //@line 815 "textio.c"
        HEAP[$newline]=0; //@line 816 "textio.c"
        HEAP[$line_buffering]=0; //@line 817 "textio.c"
        var $13=HEAP[$self_addr]; //@line 822 "textio.c"
        var $14=(($13+8)&4294967295); //@line 822 "textio.c"
        HEAP[$14]=0; //@line 822 "textio.c"
        var $15=HEAP[$self_addr]; //@line 823 "textio.c"
        var $16=(($15+12)&4294967295); //@line 823 "textio.c"
        HEAP[$16]=0; //@line 823 "textio.c"
        var $17=HEAP[$args_addr]; //@line 824 "textio.c"
        var $18=HEAP[$kwds_addr]; //@line 824 "textio.c"
        var $kwlist1=$kwlist; //@line 824 "textio.c"
        var $19=__PyArg_ParseTupleAndKeywords_SizeT($17, $18, ((__str45421)&4294967295), $kwlist1, $buffer, $encoding, $errors, $newline, $line_buffering); //@line 824 "textio.c"
        var $20=((($19))|0)==0; //@line 824 "textio.c"
        if ($20) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 824 "textio.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 827 "textio.c"
        __label__ = 135; break; //@line 827 "textio.c"
      case 2: // $bb2
        var $21=HEAP[$newline]; //@line 829 "textio.c"
        var $22=($21)!=0; //@line 829 "textio.c"
        if ($22) { __label__ = 3; break; } else { __label__ = 12; break; } //@line 829 "textio.c"
      case 3: // $bb3
        var $23=HEAP[$newline]; //@line 829 "textio.c"
        var $24=(($23)&4294967295); //@line 829 "textio.c"
        var $25=HEAP[$24]; //@line 829 "textio.c"
        var $26=reSign(($25), 8, 0)!=0; //@line 829 "textio.c"
        if ($26) { __label__ = 4; break; } else { __label__ = 12; break; } //@line 829 "textio.c"
      case 4: // $bb4
        var $27=HEAP[$newline]; //@line 829 "textio.c"
        var $28=(($27)&4294967295); //@line 829 "textio.c"
        var $29=HEAP[$28]; //@line 829 "textio.c"
        var $30=reSign(($29), 8, 0)!=10; //@line 829 "textio.c"
        if ($30) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 829 "textio.c"
      case 5: // $bb5
        var $31=HEAP[$newline]; //@line 829 "textio.c"
        var $32=(($31+1)&4294967295); //@line 829 "textio.c"
        var $33=HEAP[$32]; //@line 829 "textio.c"
        var $34=reSign(($33), 8, 0)!=0; //@line 829 "textio.c"
        if ($34) { __label__ = 6; break; } else { __label__ = 12; break; } //@line 829 "textio.c"
      case 6: // $bb6
        var $35=HEAP[$newline]; //@line 829 "textio.c"
        var $36=(($35)&4294967295); //@line 829 "textio.c"
        var $37=HEAP[$36]; //@line 829 "textio.c"
        var $38=reSign(($37), 8, 0)!=13; //@line 829 "textio.c"
        if ($38) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 829 "textio.c"
      case 7: // $bb7
        var $39=HEAP[$newline]; //@line 829 "textio.c"
        var $40=(($39+1)&4294967295); //@line 829 "textio.c"
        var $41=HEAP[$40]; //@line 829 "textio.c"
        var $42=reSign(($41), 8, 0)!=0; //@line 829 "textio.c"
        if ($42) { __label__ = 8; break; } else { __label__ = 12; break; } //@line 829 "textio.c"
      case 8: // $bb8
        var $43=HEAP[$newline]; //@line 829 "textio.c"
        var $44=(($43)&4294967295); //@line 829 "textio.c"
        var $45=HEAP[$44]; //@line 829 "textio.c"
        var $46=reSign(($45), 8, 0)!=13; //@line 829 "textio.c"
        if ($46) { __label__ = 11; break; } else { __label__ = 9; break; } //@line 829 "textio.c"
      case 9: // $bb9
        var $47=HEAP[$newline]; //@line 829 "textio.c"
        var $48=(($47+1)&4294967295); //@line 829 "textio.c"
        var $49=HEAP[$48]; //@line 829 "textio.c"
        var $50=reSign(($49), 8, 0)!=10; //@line 829 "textio.c"
        if ($50) { __label__ = 11; break; } else { __label__ = 10; break; } //@line 829 "textio.c"
      case 10: // $bb10
        var $51=HEAP[$newline]; //@line 829 "textio.c"
        var $52=(($51+2)&4294967295); //@line 829 "textio.c"
        var $53=HEAP[$52]; //@line 829 "textio.c"
        var $54=reSign(($53), 8, 0)!=0; //@line 829 "textio.c"
        if ($54) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 829 "textio.c"
      case 11: // $bb11
        var $55=HEAP[$newline]; //@line 833 "textio.c"
        var $56=HEAP[_PyExc_ValueError]; //@line 833 "textio.c"
        var $57=_PyErr_Format($56, ((__str46422)&4294967295), $55); //@line 833 "textio.c"
        HEAP[$0]=-1; //@line 835 "textio.c"
        __label__ = 135; break; //@line 835 "textio.c"
      case 12: // $bb12
        var $58=HEAP[$self_addr]; //@line 838 "textio.c"
        var $59=(($58+20)&4294967295); //@line 838 "textio.c"
        var $60=HEAP[$59]; //@line 838 "textio.c"
        var $61=($60)!=0; //@line 838 "textio.c"
        if ($61) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 838 "textio.c"
      case 13: // $bb13
        var $62=HEAP[$self_addr]; //@line 838 "textio.c"
        var $63=(($62+20)&4294967295); //@line 838 "textio.c"
        var $64=HEAP[$63]; //@line 838 "textio.c"
        HEAP[$_py_tmp]=$64; //@line 838 "textio.c"
        var $65=HEAP[$self_addr]; //@line 838 "textio.c"
        var $66=(($65+20)&4294967295); //@line 838 "textio.c"
        HEAP[$66]=0; //@line 838 "textio.c"
        var $67=HEAP[$_py_tmp]; //@line 838 "textio.c"
        var $68=(($67)&4294967295); //@line 838 "textio.c"
        var $69=HEAP[$68]; //@line 838 "textio.c"
        var $70=((($69) - 1)&4294967295); //@line 838 "textio.c"
        var $71=HEAP[$_py_tmp]; //@line 838 "textio.c"
        var $72=(($71)&4294967295); //@line 838 "textio.c"
        HEAP[$72]=$70; //@line 838 "textio.c"
        var $73=HEAP[$_py_tmp]; //@line 838 "textio.c"
        var $74=(($73)&4294967295); //@line 838 "textio.c"
        var $75=HEAP[$74]; //@line 838 "textio.c"
        var $76=((($75))|0)==0; //@line 838 "textio.c"
        if ($76) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 838 "textio.c"
      case 14: // $bb14
        var $77=HEAP[$_py_tmp]; //@line 838 "textio.c"
        var $78=(($77+4)&4294967295); //@line 838 "textio.c"
        var $79=HEAP[$78]; //@line 838 "textio.c"
        var $80=(($79+24)&4294967295); //@line 838 "textio.c"
        var $81=HEAP[$80]; //@line 838 "textio.c"
        var $82=HEAP[$_py_tmp]; //@line 838 "textio.c"
        FUNCTION_TABLE[$81]($82); //@line 838 "textio.c"
        __label__ = 15; break; //@line 838 "textio.c"
      case 15: // $bb15
        var $83=HEAP[$self_addr]; //@line 839 "textio.c"
        var $84=(($83+24)&4294967295); //@line 839 "textio.c"
        var $85=HEAP[$84]; //@line 839 "textio.c"
        var $86=($85)!=0; //@line 839 "textio.c"
        if ($86) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 839 "textio.c"
      case 16: // $bb16
        var $87=HEAP[$self_addr]; //@line 839 "textio.c"
        var $88=(($87+24)&4294967295); //@line 839 "textio.c"
        var $89=HEAP[$88]; //@line 839 "textio.c"
        HEAP[$_py_tmp17]=$89; //@line 839 "textio.c"
        var $90=HEAP[$self_addr]; //@line 839 "textio.c"
        var $91=(($90+24)&4294967295); //@line 839 "textio.c"
        HEAP[$91]=0; //@line 839 "textio.c"
        var $92=HEAP[$_py_tmp17]; //@line 839 "textio.c"
        var $93=(($92)&4294967295); //@line 839 "textio.c"
        var $94=HEAP[$93]; //@line 839 "textio.c"
        var $95=((($94) - 1)&4294967295); //@line 839 "textio.c"
        var $96=HEAP[$_py_tmp17]; //@line 839 "textio.c"
        var $97=(($96)&4294967295); //@line 839 "textio.c"
        HEAP[$97]=$95; //@line 839 "textio.c"
        var $98=HEAP[$_py_tmp17]; //@line 839 "textio.c"
        var $99=(($98)&4294967295); //@line 839 "textio.c"
        var $100=HEAP[$99]; //@line 839 "textio.c"
        var $101=((($100))|0)==0; //@line 839 "textio.c"
        if ($101) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 839 "textio.c"
      case 17: // $bb18
        var $102=HEAP[$_py_tmp17]; //@line 839 "textio.c"
        var $103=(($102+4)&4294967295); //@line 839 "textio.c"
        var $104=HEAP[$103]; //@line 839 "textio.c"
        var $105=(($104+24)&4294967295); //@line 839 "textio.c"
        var $106=HEAP[$105]; //@line 839 "textio.c"
        var $107=HEAP[$_py_tmp17]; //@line 839 "textio.c"
        FUNCTION_TABLE[$106]($107); //@line 839 "textio.c"
        __label__ = 18; break; //@line 839 "textio.c"
      case 18: // $bb19
        var $108=HEAP[$self_addr]; //@line 840 "textio.c"
        var $109=(($108+28)&4294967295); //@line 840 "textio.c"
        var $110=HEAP[$109]; //@line 840 "textio.c"
        var $111=($110)!=0; //@line 840 "textio.c"
        if ($111) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 840 "textio.c"
      case 19: // $bb20
        var $112=HEAP[$self_addr]; //@line 840 "textio.c"
        var $113=(($112+28)&4294967295); //@line 840 "textio.c"
        var $114=HEAP[$113]; //@line 840 "textio.c"
        HEAP[$_py_tmp21]=$114; //@line 840 "textio.c"
        var $115=HEAP[$self_addr]; //@line 840 "textio.c"
        var $116=(($115+28)&4294967295); //@line 840 "textio.c"
        HEAP[$116]=0; //@line 840 "textio.c"
        var $117=HEAP[$_py_tmp21]; //@line 840 "textio.c"
        var $118=(($117)&4294967295); //@line 840 "textio.c"
        var $119=HEAP[$118]; //@line 840 "textio.c"
        var $120=((($119) - 1)&4294967295); //@line 840 "textio.c"
        var $121=HEAP[$_py_tmp21]; //@line 840 "textio.c"
        var $122=(($121)&4294967295); //@line 840 "textio.c"
        HEAP[$122]=$120; //@line 840 "textio.c"
        var $123=HEAP[$_py_tmp21]; //@line 840 "textio.c"
        var $124=(($123)&4294967295); //@line 840 "textio.c"
        var $125=HEAP[$124]; //@line 840 "textio.c"
        var $126=((($125))|0)==0; //@line 840 "textio.c"
        if ($126) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 840 "textio.c"
      case 20: // $bb22
        var $127=HEAP[$_py_tmp21]; //@line 840 "textio.c"
        var $128=(($127+4)&4294967295); //@line 840 "textio.c"
        var $129=HEAP[$128]; //@line 840 "textio.c"
        var $130=(($129+24)&4294967295); //@line 840 "textio.c"
        var $131=HEAP[$130]; //@line 840 "textio.c"
        var $132=HEAP[$_py_tmp21]; //@line 840 "textio.c"
        FUNCTION_TABLE[$131]($132); //@line 840 "textio.c"
        __label__ = 21; break; //@line 840 "textio.c"
      case 21: // $bb23
        var $133=HEAP[$self_addr]; //@line 841 "textio.c"
        var $134=(($133+32)&4294967295); //@line 841 "textio.c"
        var $135=HEAP[$134]; //@line 841 "textio.c"
        var $136=($135)!=0; //@line 841 "textio.c"
        if ($136) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 841 "textio.c"
      case 22: // $bb24
        var $137=HEAP[$self_addr]; //@line 841 "textio.c"
        var $138=(($137+32)&4294967295); //@line 841 "textio.c"
        var $139=HEAP[$138]; //@line 841 "textio.c"
        HEAP[$_py_tmp25]=$139; //@line 841 "textio.c"
        var $140=HEAP[$self_addr]; //@line 841 "textio.c"
        var $141=(($140+32)&4294967295); //@line 841 "textio.c"
        HEAP[$141]=0; //@line 841 "textio.c"
        var $142=HEAP[$_py_tmp25]; //@line 841 "textio.c"
        var $143=(($142)&4294967295); //@line 841 "textio.c"
        var $144=HEAP[$143]; //@line 841 "textio.c"
        var $145=((($144) - 1)&4294967295); //@line 841 "textio.c"
        var $146=HEAP[$_py_tmp25]; //@line 841 "textio.c"
        var $147=(($146)&4294967295); //@line 841 "textio.c"
        HEAP[$147]=$145; //@line 841 "textio.c"
        var $148=HEAP[$_py_tmp25]; //@line 841 "textio.c"
        var $149=(($148)&4294967295); //@line 841 "textio.c"
        var $150=HEAP[$149]; //@line 841 "textio.c"
        var $151=((($150))|0)==0; //@line 841 "textio.c"
        if ($151) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 841 "textio.c"
      case 23: // $bb26
        var $152=HEAP[$_py_tmp25]; //@line 841 "textio.c"
        var $153=(($152+4)&4294967295); //@line 841 "textio.c"
        var $154=HEAP[$153]; //@line 841 "textio.c"
        var $155=(($154+24)&4294967295); //@line 841 "textio.c"
        var $156=HEAP[$155]; //@line 841 "textio.c"
        var $157=HEAP[$_py_tmp25]; //@line 841 "textio.c"
        FUNCTION_TABLE[$156]($157); //@line 841 "textio.c"
        __label__ = 24; break; //@line 841 "textio.c"
      case 24: // $bb27
        var $158=HEAP[$self_addr]; //@line 842 "textio.c"
        var $159=(($158+36)&4294967295); //@line 842 "textio.c"
        var $160=HEAP[$159]; //@line 842 "textio.c"
        var $161=($160)!=0; //@line 842 "textio.c"
        if ($161) { __label__ = 25; break; } else { __label__ = 27; break; } //@line 842 "textio.c"
      case 25: // $bb28
        var $162=HEAP[$self_addr]; //@line 842 "textio.c"
        var $163=(($162+36)&4294967295); //@line 842 "textio.c"
        var $164=HEAP[$163]; //@line 842 "textio.c"
        HEAP[$_py_tmp29]=$164; //@line 842 "textio.c"
        var $165=HEAP[$self_addr]; //@line 842 "textio.c"
        var $166=(($165+36)&4294967295); //@line 842 "textio.c"
        HEAP[$166]=0; //@line 842 "textio.c"
        var $167=HEAP[$_py_tmp29]; //@line 842 "textio.c"
        var $168=(($167)&4294967295); //@line 842 "textio.c"
        var $169=HEAP[$168]; //@line 842 "textio.c"
        var $170=((($169) - 1)&4294967295); //@line 842 "textio.c"
        var $171=HEAP[$_py_tmp29]; //@line 842 "textio.c"
        var $172=(($171)&4294967295); //@line 842 "textio.c"
        HEAP[$172]=$170; //@line 842 "textio.c"
        var $173=HEAP[$_py_tmp29]; //@line 842 "textio.c"
        var $174=(($173)&4294967295); //@line 842 "textio.c"
        var $175=HEAP[$174]; //@line 842 "textio.c"
        var $176=((($175))|0)==0; //@line 842 "textio.c"
        if ($176) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 842 "textio.c"
      case 26: // $bb30
        var $177=HEAP[$_py_tmp29]; //@line 842 "textio.c"
        var $178=(($177+4)&4294967295); //@line 842 "textio.c"
        var $179=HEAP[$178]; //@line 842 "textio.c"
        var $180=(($179+24)&4294967295); //@line 842 "textio.c"
        var $181=HEAP[$180]; //@line 842 "textio.c"
        var $182=HEAP[$_py_tmp29]; //@line 842 "textio.c"
        FUNCTION_TABLE[$181]($182); //@line 842 "textio.c"
        __label__ = 27; break; //@line 842 "textio.c"
      case 27: // $bb31
        var $183=HEAP[$self_addr]; //@line 843 "textio.c"
        var $184=(($183+64)&4294967295); //@line 843 "textio.c"
        var $185=HEAP[$184]; //@line 843 "textio.c"
        var $186=($185)!=0; //@line 843 "textio.c"
        if ($186) { __label__ = 28; break; } else { __label__ = 30; break; } //@line 843 "textio.c"
      case 28: // $bb32
        var $187=HEAP[$self_addr]; //@line 843 "textio.c"
        var $188=(($187+64)&4294967295); //@line 843 "textio.c"
        var $189=HEAP[$188]; //@line 843 "textio.c"
        HEAP[$_py_tmp33]=$189; //@line 843 "textio.c"
        var $190=HEAP[$self_addr]; //@line 843 "textio.c"
        var $191=(($190+64)&4294967295); //@line 843 "textio.c"
        HEAP[$191]=0; //@line 843 "textio.c"
        var $192=HEAP[$_py_tmp33]; //@line 843 "textio.c"
        var $193=(($192)&4294967295); //@line 843 "textio.c"
        var $194=HEAP[$193]; //@line 843 "textio.c"
        var $195=((($194) - 1)&4294967295); //@line 843 "textio.c"
        var $196=HEAP[$_py_tmp33]; //@line 843 "textio.c"
        var $197=(($196)&4294967295); //@line 843 "textio.c"
        HEAP[$197]=$195; //@line 843 "textio.c"
        var $198=HEAP[$_py_tmp33]; //@line 843 "textio.c"
        var $199=(($198)&4294967295); //@line 843 "textio.c"
        var $200=HEAP[$199]; //@line 843 "textio.c"
        var $201=((($200))|0)==0; //@line 843 "textio.c"
        if ($201) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 843 "textio.c"
      case 29: // $bb34
        var $202=HEAP[$_py_tmp33]; //@line 843 "textio.c"
        var $203=(($202+4)&4294967295); //@line 843 "textio.c"
        var $204=HEAP[$203]; //@line 843 "textio.c"
        var $205=(($204+24)&4294967295); //@line 843 "textio.c"
        var $206=HEAP[$205]; //@line 843 "textio.c"
        var $207=HEAP[$_py_tmp33]; //@line 843 "textio.c"
        FUNCTION_TABLE[$206]($207); //@line 843 "textio.c"
        __label__ = 30; break; //@line 843 "textio.c"
      case 30: // $bb35
        var $208=HEAP[$self_addr]; //@line 844 "textio.c"
        var $209=(($208+72)&4294967295); //@line 844 "textio.c"
        var $210=HEAP[$209]; //@line 844 "textio.c"
        var $211=($210)!=0; //@line 844 "textio.c"
        if ($211) { __label__ = 31; break; } else { __label__ = 33; break; } //@line 844 "textio.c"
      case 31: // $bb36
        var $212=HEAP[$self_addr]; //@line 844 "textio.c"
        var $213=(($212+72)&4294967295); //@line 844 "textio.c"
        var $214=HEAP[$213]; //@line 844 "textio.c"
        HEAP[$_py_tmp37]=$214; //@line 844 "textio.c"
        var $215=HEAP[$self_addr]; //@line 844 "textio.c"
        var $216=(($215+72)&4294967295); //@line 844 "textio.c"
        HEAP[$216]=0; //@line 844 "textio.c"
        var $217=HEAP[$_py_tmp37]; //@line 844 "textio.c"
        var $218=(($217)&4294967295); //@line 844 "textio.c"
        var $219=HEAP[$218]; //@line 844 "textio.c"
        var $220=((($219) - 1)&4294967295); //@line 844 "textio.c"
        var $221=HEAP[$_py_tmp37]; //@line 844 "textio.c"
        var $222=(($221)&4294967295); //@line 844 "textio.c"
        HEAP[$222]=$220; //@line 844 "textio.c"
        var $223=HEAP[$_py_tmp37]; //@line 844 "textio.c"
        var $224=(($223)&4294967295); //@line 844 "textio.c"
        var $225=HEAP[$224]; //@line 844 "textio.c"
        var $226=((($225))|0)==0; //@line 844 "textio.c"
        if ($226) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 844 "textio.c"
      case 32: // $bb38
        var $227=HEAP[$_py_tmp37]; //@line 844 "textio.c"
        var $228=(($227+4)&4294967295); //@line 844 "textio.c"
        var $229=HEAP[$228]; //@line 844 "textio.c"
        var $230=(($229+24)&4294967295); //@line 844 "textio.c"
        var $231=HEAP[$230]; //@line 844 "textio.c"
        var $232=HEAP[$_py_tmp37]; //@line 844 "textio.c"
        FUNCTION_TABLE[$231]($232); //@line 844 "textio.c"
        __label__ = 33; break; //@line 844 "textio.c"
      case 33: // $bb39
        var $233=HEAP[$self_addr]; //@line 845 "textio.c"
        var $234=(($233+80)&4294967295); //@line 845 "textio.c"
        var $235=HEAP[$234]; //@line 845 "textio.c"
        var $236=($235)!=0; //@line 845 "textio.c"
        if ($236) { __label__ = 34; break; } else { __label__ = 36; break; } //@line 845 "textio.c"
      case 34: // $bb40
        var $237=HEAP[$self_addr]; //@line 845 "textio.c"
        var $238=(($237+80)&4294967295); //@line 845 "textio.c"
        var $239=HEAP[$238]; //@line 845 "textio.c"
        HEAP[$_py_tmp41]=$239; //@line 845 "textio.c"
        var $240=HEAP[$self_addr]; //@line 845 "textio.c"
        var $241=(($240+80)&4294967295); //@line 845 "textio.c"
        HEAP[$241]=0; //@line 845 "textio.c"
        var $242=HEAP[$_py_tmp41]; //@line 845 "textio.c"
        var $243=(($242)&4294967295); //@line 845 "textio.c"
        var $244=HEAP[$243]; //@line 845 "textio.c"
        var $245=((($244) - 1)&4294967295); //@line 845 "textio.c"
        var $246=HEAP[$_py_tmp41]; //@line 845 "textio.c"
        var $247=(($246)&4294967295); //@line 845 "textio.c"
        HEAP[$247]=$245; //@line 845 "textio.c"
        var $248=HEAP[$_py_tmp41]; //@line 845 "textio.c"
        var $249=(($248)&4294967295); //@line 845 "textio.c"
        var $250=HEAP[$249]; //@line 845 "textio.c"
        var $251=((($250))|0)==0; //@line 845 "textio.c"
        if ($251) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 845 "textio.c"
      case 35: // $bb42
        var $252=HEAP[$_py_tmp41]; //@line 845 "textio.c"
        var $253=(($252+4)&4294967295); //@line 845 "textio.c"
        var $254=HEAP[$253]; //@line 845 "textio.c"
        var $255=(($254+24)&4294967295); //@line 845 "textio.c"
        var $256=HEAP[$255]; //@line 845 "textio.c"
        var $257=HEAP[$_py_tmp41]; //@line 845 "textio.c"
        FUNCTION_TABLE[$256]($257); //@line 845 "textio.c"
        __label__ = 36; break; //@line 845 "textio.c"
      case 36: // $bb43
        var $258=HEAP[$self_addr]; //@line 846 "textio.c"
        var $259=(($258+40)&4294967295); //@line 846 "textio.c"
        var $260=HEAP[$259]; //@line 846 "textio.c"
        var $261=($260)!=0; //@line 846 "textio.c"
        if ($261) { __label__ = 37; break; } else { __label__ = 39; break; } //@line 846 "textio.c"
      case 37: // $bb44
        var $262=HEAP[$self_addr]; //@line 846 "textio.c"
        var $263=(($262+40)&4294967295); //@line 846 "textio.c"
        var $264=HEAP[$263]; //@line 846 "textio.c"
        HEAP[$_py_tmp45]=$264; //@line 846 "textio.c"
        var $265=HEAP[$self_addr]; //@line 846 "textio.c"
        var $266=(($265+40)&4294967295); //@line 846 "textio.c"
        HEAP[$266]=0; //@line 846 "textio.c"
        var $267=HEAP[$_py_tmp45]; //@line 846 "textio.c"
        var $268=(($267)&4294967295); //@line 846 "textio.c"
        var $269=HEAP[$268]; //@line 846 "textio.c"
        var $270=((($269) - 1)&4294967295); //@line 846 "textio.c"
        var $271=HEAP[$_py_tmp45]; //@line 846 "textio.c"
        var $272=(($271)&4294967295); //@line 846 "textio.c"
        HEAP[$272]=$270; //@line 846 "textio.c"
        var $273=HEAP[$_py_tmp45]; //@line 846 "textio.c"
        var $274=(($273)&4294967295); //@line 846 "textio.c"
        var $275=HEAP[$274]; //@line 846 "textio.c"
        var $276=((($275))|0)==0; //@line 846 "textio.c"
        if ($276) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 846 "textio.c"
      case 38: // $bb46
        var $277=HEAP[$_py_tmp45]; //@line 846 "textio.c"
        var $278=(($277+4)&4294967295); //@line 846 "textio.c"
        var $279=HEAP[$278]; //@line 846 "textio.c"
        var $280=(($279+24)&4294967295); //@line 846 "textio.c"
        var $281=HEAP[$280]; //@line 846 "textio.c"
        var $282=HEAP[$_py_tmp45]; //@line 846 "textio.c"
        FUNCTION_TABLE[$281]($282); //@line 846 "textio.c"
        __label__ = 39; break; //@line 846 "textio.c"
      case 39: // $bb47
        var $283=HEAP[$self_addr]; //@line 847 "textio.c"
        var $284=(($283+84)&4294967295); //@line 847 "textio.c"
        var $285=HEAP[$284]; //@line 847 "textio.c"
        var $286=($285)!=0; //@line 847 "textio.c"
        if ($286) { __label__ = 40; break; } else { __label__ = 42; break; } //@line 847 "textio.c"
      case 40: // $bb48
        var $287=HEAP[$self_addr]; //@line 847 "textio.c"
        var $288=(($287+84)&4294967295); //@line 847 "textio.c"
        var $289=HEAP[$288]; //@line 847 "textio.c"
        HEAP[$_py_tmp49]=$289; //@line 847 "textio.c"
        var $290=HEAP[$self_addr]; //@line 847 "textio.c"
        var $291=(($290+84)&4294967295); //@line 847 "textio.c"
        HEAP[$291]=0; //@line 847 "textio.c"
        var $292=HEAP[$_py_tmp49]; //@line 847 "textio.c"
        var $293=(($292)&4294967295); //@line 847 "textio.c"
        var $294=HEAP[$293]; //@line 847 "textio.c"
        var $295=((($294) - 1)&4294967295); //@line 847 "textio.c"
        var $296=HEAP[$_py_tmp49]; //@line 847 "textio.c"
        var $297=(($296)&4294967295); //@line 847 "textio.c"
        HEAP[$297]=$295; //@line 847 "textio.c"
        var $298=HEAP[$_py_tmp49]; //@line 847 "textio.c"
        var $299=(($298)&4294967295); //@line 847 "textio.c"
        var $300=HEAP[$299]; //@line 847 "textio.c"
        var $301=((($300))|0)==0; //@line 847 "textio.c"
        if ($301) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 847 "textio.c"
      case 41: // $bb50
        var $302=HEAP[$_py_tmp49]; //@line 847 "textio.c"
        var $303=(($302+4)&4294967295); //@line 847 "textio.c"
        var $304=HEAP[$303]; //@line 847 "textio.c"
        var $305=(($304+24)&4294967295); //@line 847 "textio.c"
        var $306=HEAP[$305]; //@line 847 "textio.c"
        var $307=HEAP[$_py_tmp49]; //@line 847 "textio.c"
        FUNCTION_TABLE[$306]($307); //@line 847 "textio.c"
        __label__ = 42; break; //@line 847 "textio.c"
      case 42: // $bb51
        var $308=HEAP[$self_addr]; //@line 848 "textio.c"
        var $309=(($308+68)&4294967295); //@line 848 "textio.c"
        HEAP[$309]=0; //@line 848 "textio.c"
        var $310=HEAP[$self_addr]; //@line 849 "textio.c"
        var $311=(($310+76)&4294967295); //@line 849 "textio.c"
        HEAP[$311]=0; //@line 849 "textio.c"
        var $312=HEAP[$self_addr]; //@line 850 "textio.c"
        var $313=(($312+56)&4294967295); //@line 850 "textio.c"
        HEAP[$313]=0; //@line 850 "textio.c"
        var $314=HEAP[$self_addr]; //@line 851 "textio.c"
        var $315=(($314+44)&4294967295); //@line 851 "textio.c"
        HEAP[$315]=0; //@line 851 "textio.c"
        var $316=HEAP[$encoding]; //@line 853 "textio.c"
        var $317=($316)==0; //@line 853 "textio.c"
        if ($317) { __label__ = 43; break; } else { __label__ = 53; break; } //@line 853 "textio.c"
      case 43: // $bb52
        var $318=HEAP[$self_addr]; //@line 853 "textio.c"
        var $319=(($318+24)&4294967295); //@line 853 "textio.c"
        var $320=HEAP[$319]; //@line 853 "textio.c"
        var $321=($320)==0; //@line 853 "textio.c"
        if ($321) { __label__ = 44; break; } else { __label__ = 53; break; } //@line 853 "textio.c"
      case 44: // $bb53
        var $322=HEAP[__PyIO_locale_module]; //@line 854 "textio.c"
        var $323=($322)==0; //@line 854 "textio.c"
        if ($323) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 854 "textio.c"
      case 45: // $bb54
        var $324=_PyImport_ImportModule(((__str47423)&4294967295)); //@line 855 "textio.c"
        HEAP[__PyIO_locale_module]=$324; //@line 855 "textio.c"
        var $325=HEAP[__PyIO_locale_module]; //@line 856 "textio.c"
        var $326=($325)==0; //@line 856 "textio.c"
        if ($326) { __label__ = 47; break; } else { __label__ = 46; break; } //@line 856 "textio.c"
      case 46: // $use_locale
        var $327=HEAP[__PyIO_locale_module]; //@line 863 "textio.c"
        var $328=__PyObject_CallMethod_SizeT($327, ((__str48424)&4294967295), 0); //@line 863 "textio.c"
        var $329=HEAP[$self_addr]; //@line 863 "textio.c"
        var $330=(($329+24)&4294967295); //@line 863 "textio.c"
        HEAP[$330]=$328; //@line 863 "textio.c"
        var $331=HEAP[$self_addr]; //@line 865 "textio.c"
        var $332=(($331+24)&4294967295); //@line 865 "textio.c"
        var $333=HEAP[$332]; //@line 865 "textio.c"
        var $334=($333)==0; //@line 865 "textio.c"
        if ($334) { __label__ = 47; break; } else { __label__ = 49; break; } //@line 865 "textio.c"
      case 47: // $catch_ImportError
        var $335=HEAP[_PyExc_ImportError]; //@line 873 "textio.c"
        var $336=_PyErr_ExceptionMatches($335); //@line 873 "textio.c"
        var $337=((($336))|0)!=0; //@line 873 "textio.c"
        if ($337) { __label__ = 48; break; } else { __label__ = 134; break; } //@line 873 "textio.c"
      case 48: // $bb55
        _PyErr_Clear(); //@line 874 "textio.c"
        var $338=_PyString_FromString(((__str33409)&4294967295)); //@line 875 "textio.c"
        var $339=HEAP[$self_addr]; //@line 875 "textio.c"
        var $340=(($339+24)&4294967295); //@line 875 "textio.c"
        HEAP[$340]=$338; //@line 875 "textio.c"
        __label__ = 53; break; //@line 875 "textio.c"
      case 49: // $bb56
        var $341=HEAP[$self_addr]; //@line 880 "textio.c"
        var $342=(($341+24)&4294967295); //@line 880 "textio.c"
        var $343=HEAP[$342]; //@line 880 "textio.c"
        var $344=(($343+4)&4294967295); //@line 880 "textio.c"
        var $345=HEAP[$344]; //@line 880 "textio.c"
        var $346=(($345+84)&4294967295); //@line 880 "textio.c"
        var $347=HEAP[$346]; //@line 880 "textio.c"
        var $348=($347) & 134217728; //@line 880 "textio.c"
        var $349=((($348))|0)==0; //@line 880 "textio.c"
        if ($349) { __label__ = 50; break; } else { __label__ = 53; break; } //@line 880 "textio.c"
      case 50: // $bb57
        var $350=HEAP[$self_addr]; //@line 881 "textio.c"
        var $351=(($350+24)&4294967295); //@line 881 "textio.c"
        var $352=HEAP[$351]; //@line 881 "textio.c"
        var $353=($352)!=0; //@line 881 "textio.c"
        if ($353) { __label__ = 51; break; } else { __label__ = 53; break; } //@line 881 "textio.c"
      case 51: // $bb58
        var $354=HEAP[$self_addr]; //@line 881 "textio.c"
        var $355=(($354+24)&4294967295); //@line 881 "textio.c"
        var $356=HEAP[$355]; //@line 881 "textio.c"
        HEAP[$_py_tmp59]=$356; //@line 881 "textio.c"
        var $357=HEAP[$self_addr]; //@line 881 "textio.c"
        var $358=(($357+24)&4294967295); //@line 881 "textio.c"
        HEAP[$358]=0; //@line 881 "textio.c"
        var $359=HEAP[$_py_tmp59]; //@line 881 "textio.c"
        var $360=(($359)&4294967295); //@line 881 "textio.c"
        var $361=HEAP[$360]; //@line 881 "textio.c"
        var $362=((($361) - 1)&4294967295); //@line 881 "textio.c"
        var $363=HEAP[$_py_tmp59]; //@line 881 "textio.c"
        var $364=(($363)&4294967295); //@line 881 "textio.c"
        HEAP[$364]=$362; //@line 881 "textio.c"
        var $365=HEAP[$_py_tmp59]; //@line 881 "textio.c"
        var $366=(($365)&4294967295); //@line 881 "textio.c"
        var $367=HEAP[$366]; //@line 881 "textio.c"
        var $368=((($367))|0)==0; //@line 881 "textio.c"
        if ($368) { __label__ = 52; break; } else { __label__ = 53; break; } //@line 881 "textio.c"
      case 52: // $bb60
        var $369=HEAP[$_py_tmp59]; //@line 881 "textio.c"
        var $370=(($369+4)&4294967295); //@line 881 "textio.c"
        var $371=HEAP[$370]; //@line 881 "textio.c"
        var $372=(($371+24)&4294967295); //@line 881 "textio.c"
        var $373=HEAP[$372]; //@line 881 "textio.c"
        var $374=HEAP[$_py_tmp59]; //@line 881 "textio.c"
        FUNCTION_TABLE[$373]($374); //@line 881 "textio.c"
        __label__ = 53; break; //@line 881 "textio.c"
      case 53: // $bb61
        var $375=HEAP[$self_addr]; //@line 884 "textio.c"
        var $376=(($375+24)&4294967295); //@line 884 "textio.c"
        var $377=HEAP[$376]; //@line 884 "textio.c"
        var $378=($377)!=0; //@line 884 "textio.c"
        if ($378) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 884 "textio.c"
      case 54: // $bb62
        var $379=HEAP[$self_addr]; //@line 885 "textio.c"
        var $380=(($379+24)&4294967295); //@line 885 "textio.c"
        var $381=HEAP[$380]; //@line 885 "textio.c"
        var $382=_PyString_AsString($381); //@line 885 "textio.c"
        HEAP[$encoding]=$382; //@line 885 "textio.c"
        __label__ = 59; break; //@line 885 "textio.c"
      case 55: // $bb63
        var $383=HEAP[$encoding]; //@line 886 "textio.c"
        var $384=($383)!=0; //@line 886 "textio.c"
        if ($384) { __label__ = 56; break; } else { __label__ = 58; break; } //@line 886 "textio.c"
      case 56: // $bb64
        var $385=HEAP[$encoding]; //@line 887 "textio.c"
        var $386=_PyString_FromString($385); //@line 887 "textio.c"
        var $387=HEAP[$self_addr]; //@line 887 "textio.c"
        var $388=(($387+24)&4294967295); //@line 887 "textio.c"
        HEAP[$388]=$386; //@line 887 "textio.c"
        var $389=HEAP[$self_addr]; //@line 888 "textio.c"
        var $390=(($389+24)&4294967295); //@line 888 "textio.c"
        var $391=HEAP[$390]; //@line 888 "textio.c"
        var $392=($391)==0; //@line 888 "textio.c"
        if ($392) { __label__ = 134; break; } else { __label__ = 57; break; } //@line 888 "textio.c"
      case 57: // $bb65
        __label__ = 59; break; //@line 888 "textio.c"
      case 58: // $bb66
        var $393=HEAP[_PyExc_IOError]; //@line 892 "textio.c"
        _PyErr_SetString($393, ((__str49425)&4294967295)); //@line 892 "textio.c"
        __label__ = 59; break; //@line 892 "textio.c"
      case 59: // $bb67
        var $394=HEAP[$errors]; //@line 896 "textio.c"
        var $395=($394)==0; //@line 896 "textio.c"
        if ($395) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 896 "textio.c"
      case 60: // $bb68
        HEAP[$errors]=((__str11386)&4294967295); //@line 897 "textio.c"
        __label__ = 61; break; //@line 897 "textio.c"
      case 61: // $bb69
        var $396=HEAP[$errors]; //@line 898 "textio.c"
        var $397=_PyString_FromString($396); //@line 898 "textio.c"
        var $398=HEAP[$self_addr]; //@line 898 "textio.c"
        var $399=(($398+40)&4294967295); //@line 898 "textio.c"
        HEAP[$399]=$397; //@line 898 "textio.c"
        var $400=HEAP[$self_addr]; //@line 899 "textio.c"
        var $401=(($400+40)&4294967295); //@line 899 "textio.c"
        var $402=HEAP[$401]; //@line 899 "textio.c"
        var $403=($402)==0; //@line 899 "textio.c"
        if ($403) { __label__ = 134; break; } else { __label__ = 62; break; } //@line 899 "textio.c"
      case 62: // $bb70
        var $404=HEAP[$self_addr]; //@line 902 "textio.c"
        var $405=(($404+16)&4294967295); //@line 902 "textio.c"
        HEAP[$405]=8192; //@line 902 "textio.c"
        var $406=HEAP[$newline]; //@line 903 "textio.c"
        var $407=($406)==0; //@line 903 "textio.c"
        if ($407) { __label__ = 64; break; } else { __label__ = 63; break; } //@line 903 "textio.c"
      case 63: // $bb71
        var $408=HEAP[$newline]; //@line 903 "textio.c"
        var $409=(($408)&4294967295); //@line 903 "textio.c"
        var $410=HEAP[$409]; //@line 903 "textio.c"
        var $411=reSign(($410), 8, 0)==0; //@line 903 "textio.c"
        if ($411) { __label__ = 64; break; } else { __label__ = 65; break; } //@line 903 "textio.c"
      case 64: // $bb72
        HEAP[$iftmp_111]=1; //@line 903 "textio.c"
        __label__ = 66; break; //@line 903 "textio.c"
      case 65: // $bb73
        HEAP[$iftmp_111]=0; //@line 903 "textio.c"
        __label__ = 66; break; //@line 903 "textio.c"
      case 66: // $bb74
        var $412=HEAP[$iftmp_111]; //@line 903 "textio.c"
        var $413=((($412)) & 255); //@line 903 "textio.c"
        var $414=HEAP[$self_addr]; //@line 903 "textio.c"
        var $415=(($414+49)&4294967295); //@line 903 "textio.c"
        HEAP[$415]=$413; //@line 903 "textio.c"
        var $416=HEAP[$line_buffering]; //@line 904 "textio.c"
        var $417=((($416)) & 255); //@line 904 "textio.c"
        var $418=HEAP[$self_addr]; //@line 904 "textio.c"
        var $419=(($418+48)&4294967295); //@line 904 "textio.c"
        HEAP[$419]=$417; //@line 904 "textio.c"
        var $420=HEAP[$newline]; //@line 905 "textio.c"
        var $421=($420)==0; //@line 905 "textio.c"
        var $422=unSign(($421), 1, 0); //@line 905 "textio.c"
        var $423=HEAP[$self_addr]; //@line 905 "textio.c"
        var $424=(($423+50)&4294967295); //@line 905 "textio.c"
        HEAP[$424]=$422; //@line 905 "textio.c"
        var $425=HEAP[$newline]; //@line 906 "textio.c"
        var $426=($425)!=0; //@line 906 "textio.c"
        if ($426) { __label__ = 67; break; } else { __label__ = 69; break; } //@line 906 "textio.c"
      case 67: // $bb75
        var $427=HEAP[$newline]; //@line 907 "textio.c"
        var $428=_PyString_FromString($427); //@line 907 "textio.c"
        var $429=HEAP[$self_addr]; //@line 907 "textio.c"
        var $430=(($429+36)&4294967295); //@line 907 "textio.c"
        HEAP[$430]=$428; //@line 907 "textio.c"
        var $431=HEAP[$self_addr]; //@line 908 "textio.c"
        var $432=(($431+36)&4294967295); //@line 908 "textio.c"
        var $433=HEAP[$432]; //@line 908 "textio.c"
        var $434=($433)==0; //@line 908 "textio.c"
        if ($434) { __label__ = 68; break; } else { __label__ = 69; break; } //@line 908 "textio.c"
      case 68: // $bb76
        HEAP[$0]=-1; //@line 909 "textio.c"
        __label__ = 135; break; //@line 909 "textio.c"
      case 69: // $bb77
        var $435=HEAP[$newline]; //@line 911 "textio.c"
        var $436=($435)==0; //@line 911 "textio.c"
        if ($436) { __label__ = 71; break; } else { __label__ = 70; break; } //@line 911 "textio.c"
      case 70: // $bb78
        var $437=HEAP[$newline]; //@line 911 "textio.c"
        var $438=(($437)&4294967295); //@line 911 "textio.c"
        var $439=HEAP[$438]; //@line 911 "textio.c"
        var $440=reSign(($439), 8, 0)!=0; //@line 911 "textio.c"
        if ($440) { __label__ = 71; break; } else { __label__ = 72; break; } //@line 911 "textio.c"
      case 71: // $bb79
        HEAP[$iftmp_118]=1; //@line 911 "textio.c"
        __label__ = 73; break; //@line 911 "textio.c"
      case 72: // $bb80
        HEAP[$iftmp_118]=0; //@line 911 "textio.c"
        __label__ = 73; break; //@line 911 "textio.c"
      case 73: // $bb81
        var $441=HEAP[$iftmp_118]; //@line 911 "textio.c"
        var $442=((($441)) & 255); //@line 911 "textio.c"
        var $443=HEAP[$self_addr]; //@line 911 "textio.c"
        var $444=(($443+51)&4294967295); //@line 911 "textio.c"
        HEAP[$444]=$442; //@line 911 "textio.c"
        var $445=HEAP[$self_addr]; //@line 912 "textio.c"
        var $446=(($445+49)&4294967295); //@line 912 "textio.c"
        var $447=HEAP[$446]; //@line 912 "textio.c"
        var $448=reSign(($447), 8, 0)==0; //@line 912 "textio.c"
        if ($448) { __label__ = 74; break; } else { __label__ = 77; break; } //@line 912 "textio.c"
      case 74: // $bb82
        var $449=HEAP[$self_addr]; //@line 912 "textio.c"
        var $450=(($449+51)&4294967295); //@line 912 "textio.c"
        var $451=HEAP[$450]; //@line 912 "textio.c"
        var $452=reSign(($451), 8, 0)!=0; //@line 912 "textio.c"
        if ($452) { __label__ = 75; break; } else { __label__ = 77; break; } //@line 912 "textio.c"
      case 75: // $bb83
        var $453=HEAP[$self_addr]; //@line 913 "textio.c"
        var $454=(($453+36)&4294967295); //@line 913 "textio.c"
        var $455=HEAP[$454]; //@line 913 "textio.c"
        var $456=_PyString_AsString($455); //@line 913 "textio.c"
        var $457=HEAP[$self_addr]; //@line 913 "textio.c"
        var $458=(($457+44)&4294967295); //@line 913 "textio.c"
        HEAP[$458]=$456; //@line 913 "textio.c"
        var $459=HEAP[$self_addr]; //@line 914 "textio.c"
        var $460=(($459+44)&4294967295); //@line 914 "textio.c"
        var $461=HEAP[$460]; //@line 914 "textio.c"
        var $462=_strcmp($461, ((__str25400)&4294967295)); //@line 914 "textio.c"
        var $463=((($462))|0)==0; //@line 914 "textio.c"
        if ($463) { __label__ = 76; break; } else { __label__ = 77; break; } //@line 914 "textio.c"
      case 76: // $bb84
        var $464=HEAP[$self_addr]; //@line 915 "textio.c"
        var $465=(($464+44)&4294967295); //@line 915 "textio.c"
        HEAP[$465]=0; //@line 915 "textio.c"
        __label__ = 77; break; //@line 915 "textio.c"
      case 77: // $bb85
        var $466=HEAP[$buffer]; //@line 923 "textio.c"
        var $467=__PyObject_CallMethod_SizeT($466, ((__str50426)&4294967295), 0); //@line 923 "textio.c"
        HEAP[$res]=$467; //@line 923 "textio.c"
        var $468=HEAP[$res]; //@line 924 "textio.c"
        var $469=($468)==0; //@line 924 "textio.c"
        if ($469) { __label__ = 134; break; } else { __label__ = 78; break; } //@line 924 "textio.c"
      case 78: // $bb86
        var $470=HEAP[$res]; //@line 926 "textio.c"
        var $471=_PyObject_IsTrue($470); //@line 926 "textio.c"
        HEAP[$r]=$471; //@line 926 "textio.c"
        var $472=HEAP[$res]; //@line 927 "textio.c"
        var $473=(($472)&4294967295); //@line 927 "textio.c"
        var $474=HEAP[$473]; //@line 927 "textio.c"
        var $475=((($474) - 1)&4294967295); //@line 927 "textio.c"
        var $476=HEAP[$res]; //@line 927 "textio.c"
        var $477=(($476)&4294967295); //@line 927 "textio.c"
        HEAP[$477]=$475; //@line 927 "textio.c"
        var $478=HEAP[$res]; //@line 927 "textio.c"
        var $479=(($478)&4294967295); //@line 927 "textio.c"
        var $480=HEAP[$479]; //@line 927 "textio.c"
        var $481=((($480))|0)==0; //@line 927 "textio.c"
        if ($481) { __label__ = 79; break; } else { __label__ = 80; break; } //@line 927 "textio.c"
      case 79: // $bb87
        var $482=HEAP[$res]; //@line 927 "textio.c"
        var $483=(($482+4)&4294967295); //@line 927 "textio.c"
        var $484=HEAP[$483]; //@line 927 "textio.c"
        var $485=(($484+24)&4294967295); //@line 927 "textio.c"
        var $486=HEAP[$485]; //@line 927 "textio.c"
        var $487=HEAP[$res]; //@line 927 "textio.c"
        FUNCTION_TABLE[$486]($487); //@line 927 "textio.c"
        __label__ = 80; break; //@line 927 "textio.c"
      case 80: // $bb88
        var $488=HEAP[$r]; //@line 928 "textio.c"
        var $489=((($488))|0)==-1; //@line 928 "textio.c"
        if ($489) { __label__ = 134; break; } else { __label__ = 81; break; } //@line 928 "textio.c"
      case 81: // $bb89
        var $490=HEAP[$r]; //@line 930 "textio.c"
        var $491=((($490))|0)==1; //@line 930 "textio.c"
        if ($491) { __label__ = 82; break; } else { __label__ = 89; break; } //@line 930 "textio.c"
      case 82: // $bb90
        var $492=HEAP[$errors]; //@line 931 "textio.c"
        var $493=HEAP[$encoding]; //@line 931 "textio.c"
        var $494=_PyCodec_IncrementalDecoder($493, $492); //@line 931 "textio.c"
        var $495=HEAP[$self_addr]; //@line 931 "textio.c"
        var $496=(($495+32)&4294967295); //@line 931 "textio.c"
        HEAP[$496]=$494; //@line 931 "textio.c"
        var $497=HEAP[$self_addr]; //@line 933 "textio.c"
        var $498=(($497+32)&4294967295); //@line 933 "textio.c"
        var $499=HEAP[$498]; //@line 933 "textio.c"
        var $500=($499)==0; //@line 933 "textio.c"
        if ($500) { __label__ = 134; break; } else { __label__ = 83; break; } //@line 933 "textio.c"
      case 83: // $bb91
        var $501=HEAP[$self_addr]; //@line 936 "textio.c"
        var $502=(($501+49)&4294967295); //@line 936 "textio.c"
        var $503=HEAP[$502]; //@line 936 "textio.c"
        var $504=reSign(($503), 8, 0)!=0; //@line 936 "textio.c"
        if ($504) { __label__ = 84; break; } else { __label__ = 89; break; } //@line 936 "textio.c"
      case 84: // $bb92
        var $505=HEAP[$self_addr]; //@line 939 "textio.c"
        var $506=(($505+50)&4294967295); //@line 939 "textio.c"
        var $507=HEAP[$506]; //@line 939 "textio.c"
        var $508=reSign(($507), 8, 0); //@line 939 "textio.c"
        var $509=HEAP[$self_addr]; //@line 939 "textio.c"
        var $510=(($509+32)&4294967295); //@line 939 "textio.c"
        var $511=HEAP[$510]; //@line 939 "textio.c"
        var $512=__PyObject_CallFunction_SizeT(_PyIncrementalNewlineDecoder_Type, ((__str51427)&4294967295), $511, $508); //@line 939 "textio.c"
        HEAP[$incrementalDecoder]=$512; //@line 939 "textio.c"
        var $513=HEAP[$incrementalDecoder]; //@line 940 "textio.c"
        var $514=($513)==0; //@line 940 "textio.c"
        if ($514) { __label__ = 134; break; } else { __label__ = 85; break; } //@line 940 "textio.c"
      case 85: // $bb93
        var $515=HEAP[$self_addr]; //@line 942 "textio.c"
        var $516=(($515+32)&4294967295); //@line 942 "textio.c"
        var $517=HEAP[$516]; //@line 942 "textio.c"
        var $518=($517)!=0; //@line 942 "textio.c"
        if ($518) { __label__ = 86; break; } else { __label__ = 88; break; } //@line 942 "textio.c"
      case 86: // $bb94
        var $519=HEAP[$self_addr]; //@line 942 "textio.c"
        var $520=(($519+32)&4294967295); //@line 942 "textio.c"
        var $521=HEAP[$520]; //@line 942 "textio.c"
        HEAP[$_py_tmp95]=$521; //@line 942 "textio.c"
        var $522=HEAP[$self_addr]; //@line 942 "textio.c"
        var $523=(($522+32)&4294967295); //@line 942 "textio.c"
        HEAP[$523]=0; //@line 942 "textio.c"
        var $524=HEAP[$_py_tmp95]; //@line 942 "textio.c"
        var $525=(($524)&4294967295); //@line 942 "textio.c"
        var $526=HEAP[$525]; //@line 942 "textio.c"
        var $527=((($526) - 1)&4294967295); //@line 942 "textio.c"
        var $528=HEAP[$_py_tmp95]; //@line 942 "textio.c"
        var $529=(($528)&4294967295); //@line 942 "textio.c"
        HEAP[$529]=$527; //@line 942 "textio.c"
        var $530=HEAP[$_py_tmp95]; //@line 942 "textio.c"
        var $531=(($530)&4294967295); //@line 942 "textio.c"
        var $532=HEAP[$531]; //@line 942 "textio.c"
        var $533=((($532))|0)==0; //@line 942 "textio.c"
        if ($533) { __label__ = 87; break; } else { __label__ = 88; break; } //@line 942 "textio.c"
      case 87: // $bb96
        var $534=HEAP[$_py_tmp95]; //@line 942 "textio.c"
        var $535=(($534+4)&4294967295); //@line 942 "textio.c"
        var $536=HEAP[$535]; //@line 942 "textio.c"
        var $537=(($536+24)&4294967295); //@line 942 "textio.c"
        var $538=HEAP[$537]; //@line 942 "textio.c"
        var $539=HEAP[$_py_tmp95]; //@line 942 "textio.c"
        FUNCTION_TABLE[$538]($539); //@line 942 "textio.c"
        __label__ = 88; break; //@line 942 "textio.c"
      case 88: // $bb97
        var $540=HEAP[$self_addr]; //@line 943 "textio.c"
        var $541=(($540+32)&4294967295); //@line 943 "textio.c"
        var $542=HEAP[$incrementalDecoder]; //@line 943 "textio.c"
        HEAP[$541]=$542; //@line 943 "textio.c"
        __label__ = 89; break; //@line 943 "textio.c"
      case 89: // $bb98
        var $543=HEAP[$buffer]; //@line 948 "textio.c"
        var $544=__PyObject_CallMethod_SizeT($543, ((__str52428)&4294967295), 0); //@line 948 "textio.c"
        HEAP[$res]=$544; //@line 948 "textio.c"
        var $545=HEAP[$res]; //@line 949 "textio.c"
        var $546=($545)==0; //@line 949 "textio.c"
        if ($546) { __label__ = 134; break; } else { __label__ = 90; break; } //@line 949 "textio.c"
      case 90: // $bb99
        var $547=HEAP[$res]; //@line 951 "textio.c"
        var $548=_PyObject_IsTrue($547); //@line 951 "textio.c"
        HEAP[$r]=$548; //@line 951 "textio.c"
        var $549=HEAP[$res]; //@line 952 "textio.c"
        var $550=(($549)&4294967295); //@line 952 "textio.c"
        var $551=HEAP[$550]; //@line 952 "textio.c"
        var $552=((($551) - 1)&4294967295); //@line 952 "textio.c"
        var $553=HEAP[$res]; //@line 952 "textio.c"
        var $554=(($553)&4294967295); //@line 952 "textio.c"
        HEAP[$554]=$552; //@line 952 "textio.c"
        var $555=HEAP[$res]; //@line 952 "textio.c"
        var $556=(($555)&4294967295); //@line 952 "textio.c"
        var $557=HEAP[$556]; //@line 952 "textio.c"
        var $558=((($557))|0)==0; //@line 952 "textio.c"
        if ($558) { __label__ = 91; break; } else { __label__ = 92; break; } //@line 952 "textio.c"
      case 91: // $bb100
        var $559=HEAP[$res]; //@line 952 "textio.c"
        var $560=(($559+4)&4294967295); //@line 952 "textio.c"
        var $561=HEAP[$560]; //@line 952 "textio.c"
        var $562=(($561+24)&4294967295); //@line 952 "textio.c"
        var $563=HEAP[$562]; //@line 952 "textio.c"
        var $564=HEAP[$res]; //@line 952 "textio.c"
        FUNCTION_TABLE[$563]($564); //@line 952 "textio.c"
        __label__ = 92; break; //@line 952 "textio.c"
      case 92: // $bb101
        var $565=HEAP[$r]; //@line 953 "textio.c"
        var $566=((($565))|0)==-1; //@line 953 "textio.c"
        if ($566) { __label__ = 134; break; } else { __label__ = 93; break; } //@line 953 "textio.c"
      case 93: // $bb102
        var $567=HEAP[$r]; //@line 955 "textio.c"
        var $568=((($567))|0)==1; //@line 955 "textio.c"
        if ($568) { __label__ = 94; break; } else { __label__ = 110; break; } //@line 955 "textio.c"
      case 94: // $bb103
        var $569=HEAP[$errors]; //@line 957 "textio.c"
        var $570=HEAP[$encoding]; //@line 957 "textio.c"
        var $571=_PyCodec_IncrementalEncoder($570, $569); //@line 957 "textio.c"
        var $572=HEAP[$self_addr]; //@line 957 "textio.c"
        var $573=(($572+28)&4294967295); //@line 957 "textio.c"
        HEAP[$573]=$571; //@line 957 "textio.c"
        var $574=HEAP[$self_addr]; //@line 959 "textio.c"
        var $575=(($574+28)&4294967295); //@line 959 "textio.c"
        var $576=HEAP[$575]; //@line 959 "textio.c"
        var $577=($576)==0; //@line 959 "textio.c"
        if ($577) { __label__ = 134; break; } else { __label__ = 95; break; } //@line 959 "textio.c"
      case 95: // $bb104
        var $578=HEAP[$encoding]; //@line 962 "textio.c"
        var $579=__PyCodec_Lookup($578); //@line 962 "textio.c"
        HEAP[$ci]=$579; //@line 962 "textio.c"
        var $580=HEAP[$ci]; //@line 963 "textio.c"
        var $581=($580)==0; //@line 963 "textio.c"
        if ($581) { __label__ = 134; break; } else { __label__ = 96; break; } //@line 963 "textio.c"
      case 96: // $bb105
        var $582=HEAP[$ci]; //@line 965 "textio.c"
        var $583=_PyObject_GetAttrString($582, ((__str53429)&4294967295)); //@line 965 "textio.c"
        HEAP[$res]=$583; //@line 965 "textio.c"
        var $584=HEAP[$ci]; //@line 966 "textio.c"
        var $585=(($584)&4294967295); //@line 966 "textio.c"
        var $586=HEAP[$585]; //@line 966 "textio.c"
        var $587=((($586) - 1)&4294967295); //@line 966 "textio.c"
        var $588=HEAP[$ci]; //@line 966 "textio.c"
        var $589=(($588)&4294967295); //@line 966 "textio.c"
        HEAP[$589]=$587; //@line 966 "textio.c"
        var $590=HEAP[$ci]; //@line 966 "textio.c"
        var $591=(($590)&4294967295); //@line 966 "textio.c"
        var $592=HEAP[$591]; //@line 966 "textio.c"
        var $593=((($592))|0)==0; //@line 966 "textio.c"
        if ($593) { __label__ = 97; break; } else { __label__ = 98; break; } //@line 966 "textio.c"
      case 97: // $bb106
        var $594=HEAP[$ci]; //@line 966 "textio.c"
        var $595=(($594+4)&4294967295); //@line 966 "textio.c"
        var $596=HEAP[$595]; //@line 966 "textio.c"
        var $597=(($596+24)&4294967295); //@line 966 "textio.c"
        var $598=HEAP[$597]; //@line 966 "textio.c"
        var $599=HEAP[$ci]; //@line 966 "textio.c"
        FUNCTION_TABLE[$598]($599); //@line 966 "textio.c"
        __label__ = 98; break; //@line 966 "textio.c"
      case 98: // $bb107
        var $600=HEAP[$res]; //@line 967 "textio.c"
        var $601=($600)==0; //@line 967 "textio.c"
        if ($601) { __label__ = 99; break; } else { __label__ = 101; break; } //@line 967 "textio.c"
      case 99: // $bb108
        var $602=HEAP[_PyExc_AttributeError]; //@line 968 "textio.c"
        var $603=_PyErr_ExceptionMatches($602); //@line 968 "textio.c"
        var $604=((($603))|0)!=0; //@line 968 "textio.c"
        if ($604) { __label__ = 100; break; } else { __label__ = 134; break; } //@line 968 "textio.c"
      case 100: // $bb109
        _PyErr_Clear(); //@line 969 "textio.c"
        __label__ = 107; break; //@line 969 "textio.c"
      case 101: // $bb110
        var $605=HEAP[$res]; //@line 973 "textio.c"
        var $606=(($605+4)&4294967295); //@line 973 "textio.c"
        var $607=HEAP[$606]; //@line 973 "textio.c"
        var $608=(($607+84)&4294967295); //@line 973 "textio.c"
        var $609=HEAP[$608]; //@line 973 "textio.c"
        var $610=($609) & 134217728; //@line 973 "textio.c"
        var $611=((($610))|0)!=0; //@line 973 "textio.c"
        if ($611) { __label__ = 102; break; } else { __label__ = 107; break; } //@line 973 "textio.c"
      case 102: // $bb111
        HEAP[$e]=((_encodefuncs)&4294967295); //@line 974 "textio.c"
        __label__ = 106; break; //@line 974 "textio.c"
      case 103: // $bb112
        var $612=HEAP[$e]; //@line 976 "textio.c"
        var $613=(($612)&4294967295); //@line 976 "textio.c"
        var $614=HEAP[$613]; //@line 976 "textio.c"
        var $615=HEAP[$res]; //@line 976 "textio.c"
        var $616=$615; //@line 976 "textio.c"
        var $617=(($616+20)&4294967295); //@line 976 "textio.c"
        var $618=(($617)&4294967295); //@line 976 "textio.c"
        var $619=_strcmp($618, $614); //@line 976 "textio.c"
        var $620=((($619))|0)==0; //@line 976 "textio.c"
        if ($620) { __label__ = 104; break; } else { __label__ = 105; break; } //@line 976 "textio.c"
      case 104: // $bb113
        var $621=HEAP[$e]; //@line 977 "textio.c"
        var $622=(($621+4)&4294967295); //@line 977 "textio.c"
        var $623=HEAP[$622]; //@line 977 "textio.c"
        var $624=HEAP[$self_addr]; //@line 977 "textio.c"
        var $625=(($624+56)&4294967295); //@line 977 "textio.c"
        HEAP[$625]=$623; //@line 977 "textio.c"
        __label__ = 107; break; //@line 977 "textio.c"
      case 105: // $bb114
        var $626=HEAP[$e]; //@line 980 "textio.c"
        var $627=(($626+8)&4294967295); //@line 980 "textio.c"
        HEAP[$e]=$627; //@line 980 "textio.c"
        __label__ = 106; break; //@line 980 "textio.c"
      case 106: // $bb115
        var $628=HEAP[$e]; //@line 975 "textio.c"
        var $629=(($628)&4294967295); //@line 975 "textio.c"
        var $630=HEAP[$629]; //@line 975 "textio.c"
        var $631=($630)!=0; //@line 975 "textio.c"
        if ($631) { __label__ = 103; break; } else { __label__ = 107; break; } //@line 975 "textio.c"
      case 107: // $bb116
        var $632=HEAP[$res]; //@line 983 "textio.c"
        var $633=($632)!=0; //@line 983 "textio.c"
        if ($633) { __label__ = 108; break; } else { __label__ = 110; break; } //@line 983 "textio.c"
      case 108: // $bb117
        var $634=HEAP[$res]; //@line 983 "textio.c"
        var $635=(($634)&4294967295); //@line 983 "textio.c"
        var $636=HEAP[$635]; //@line 983 "textio.c"
        var $637=((($636) - 1)&4294967295); //@line 983 "textio.c"
        var $638=HEAP[$res]; //@line 983 "textio.c"
        var $639=(($638)&4294967295); //@line 983 "textio.c"
        HEAP[$639]=$637; //@line 983 "textio.c"
        var $640=HEAP[$res]; //@line 983 "textio.c"
        var $641=(($640)&4294967295); //@line 983 "textio.c"
        var $642=HEAP[$641]; //@line 983 "textio.c"
        var $643=((($642))|0)==0; //@line 983 "textio.c"
        if ($643) { __label__ = 109; break; } else { __label__ = 110; break; } //@line 983 "textio.c"
      case 109: // $bb118
        var $644=HEAP[$res]; //@line 983 "textio.c"
        var $645=(($644+4)&4294967295); //@line 983 "textio.c"
        var $646=HEAP[$645]; //@line 983 "textio.c"
        var $647=(($646+24)&4294967295); //@line 983 "textio.c"
        var $648=HEAP[$647]; //@line 983 "textio.c"
        var $649=HEAP[$res]; //@line 983 "textio.c"
        FUNCTION_TABLE[$648]($649); //@line 983 "textio.c"
        __label__ = 110; break; //@line 983 "textio.c"
      case 110: // $bb119
        var $650=HEAP[$buffer]; //@line 986 "textio.c"
        var $651=HEAP[$self_addr]; //@line 986 "textio.c"
        var $652=(($651+20)&4294967295); //@line 986 "textio.c"
        HEAP[$652]=$650; //@line 986 "textio.c"
        var $653=HEAP[$buffer]; //@line 987 "textio.c"
        var $654=(($653)&4294967295); //@line 987 "textio.c"
        var $655=HEAP[$654]; //@line 987 "textio.c"
        var $656=((($655) + 1)&4294967295); //@line 987 "textio.c"
        var $657=(($653)&4294967295); //@line 987 "textio.c"
        HEAP[$657]=$656; //@line 987 "textio.c"
        var $658=HEAP[$buffer]; //@line 989 "textio.c"
        var $659=(($658+4)&4294967295); //@line 989 "textio.c"
        var $660=HEAP[$659]; //@line 989 "textio.c"
        var $661=($660)==(_PyBufferedReader_Type); //@line 989 "textio.c"
        if ($661) { __label__ = 113; break; } else { __label__ = 111; break; } //@line 989 "textio.c"
      case 111: // $bb120
        var $662=HEAP[$buffer]; //@line 989 "textio.c"
        var $663=(($662+4)&4294967295); //@line 989 "textio.c"
        var $664=HEAP[$663]; //@line 989 "textio.c"
        var $665=($664)==(_PyBufferedWriter_Type); //@line 989 "textio.c"
        if ($665) { __label__ = 113; break; } else { __label__ = 112; break; } //@line 989 "textio.c"
      case 112: // $bb121
        var $666=HEAP[$buffer]; //@line 989 "textio.c"
        var $667=(($666+4)&4294967295); //@line 989 "textio.c"
        var $668=HEAP[$667]; //@line 989 "textio.c"
        var $669=($668)==(_PyBufferedRandom_Type); //@line 989 "textio.c"
        if ($669) { __label__ = 113; break; } else { __label__ = 120; break; } //@line 989 "textio.c"
      case 113: // $bb122
        var $670=HEAP[$buffer]; //@line 992 "textio.c"
        var $671=_PyObject_GetAttrString($670, ((__str54430)&4294967295)); //@line 992 "textio.c"
        HEAP[$raw]=$671; //@line 992 "textio.c"
        var $672=HEAP[$raw]; //@line 994 "textio.c"
        var $673=($672)==0; //@line 994 "textio.c"
        if ($673) { __label__ = 114; break; } else { __label__ = 116; break; } //@line 994 "textio.c"
      case 114: // $bb123
        var $674=HEAP[_PyExc_AttributeError]; //@line 995 "textio.c"
        var $675=_PyErr_ExceptionMatches($674); //@line 995 "textio.c"
        var $676=((($675))|0)!=0; //@line 995 "textio.c"
        if ($676) { __label__ = 115; break; } else { __label__ = 134; break; } //@line 995 "textio.c"
      case 115: // $bb124
        _PyErr_Clear(); //@line 996 "textio.c"
        __label__ = 120; break; //@line 996 "textio.c"
      case 116: // $bb125
        var $677=HEAP[$raw]; //@line 1000 "textio.c"
        var $678=(($677+4)&4294967295); //@line 1000 "textio.c"
        var $679=HEAP[$678]; //@line 1000 "textio.c"
        var $680=($679)==(_PyFileIO_Type); //@line 1000 "textio.c"
        if ($680) { __label__ = 117; break; } else { __label__ = 118; break; } //@line 1000 "textio.c"
      case 117: // $bb126
        var $681=HEAP[$self_addr]; //@line 1001 "textio.c"
        var $682=(($681+84)&4294967295); //@line 1001 "textio.c"
        var $683=HEAP[$raw]; //@line 1001 "textio.c"
        HEAP[$682]=$683; //@line 1001 "textio.c"
        __label__ = 120; break; //@line 1001 "textio.c"
      case 118: // $bb127
        var $684=HEAP[$raw]; //@line 1003 "textio.c"
        var $685=(($684)&4294967295); //@line 1003 "textio.c"
        var $686=HEAP[$685]; //@line 1003 "textio.c"
        var $687=((($686) - 1)&4294967295); //@line 1003 "textio.c"
        var $688=HEAP[$raw]; //@line 1003 "textio.c"
        var $689=(($688)&4294967295); //@line 1003 "textio.c"
        HEAP[$689]=$687; //@line 1003 "textio.c"
        var $690=HEAP[$raw]; //@line 1003 "textio.c"
        var $691=(($690)&4294967295); //@line 1003 "textio.c"
        var $692=HEAP[$691]; //@line 1003 "textio.c"
        var $693=((($692))|0)==0; //@line 1003 "textio.c"
        if ($693) { __label__ = 119; break; } else { __label__ = 120; break; } //@line 1003 "textio.c"
      case 119: // $bb128
        var $694=HEAP[$raw]; //@line 1003 "textio.c"
        var $695=(($694+4)&4294967295); //@line 1003 "textio.c"
        var $696=HEAP[$695]; //@line 1003 "textio.c"
        var $697=(($696+24)&4294967295); //@line 1003 "textio.c"
        var $698=HEAP[$697]; //@line 1003 "textio.c"
        var $699=HEAP[$raw]; //@line 1003 "textio.c"
        FUNCTION_TABLE[$698]($699); //@line 1003 "textio.c"
        __label__ = 120; break; //@line 1003 "textio.c"
      case 120: // $bb129
        var $700=HEAP[$buffer]; //@line 1006 "textio.c"
        var $701=__PyObject_CallMethod_SizeT($700, ((__str55431)&4294967295), 0); //@line 1006 "textio.c"
        HEAP[$res]=$701; //@line 1006 "textio.c"
        var $702=HEAP[$res]; //@line 1007 "textio.c"
        var $703=($702)==0; //@line 1007 "textio.c"
        if ($703) { __label__ = 134; break; } else { __label__ = 121; break; } //@line 1007 "textio.c"
      case 121: // $bb130
        var $704=HEAP[$res]; //@line 1009 "textio.c"
        var $705=_PyObject_IsTrue($704); //@line 1009 "textio.c"
        var $706=((($705)) & 255); //@line 1009 "textio.c"
        var $707=HEAP[$self_addr]; //@line 1009 "textio.c"
        var $708=(($707+53)&4294967295); //@line 1009 "textio.c"
        HEAP[$708]=$706; //@line 1009 "textio.c"
        var $709=HEAP[$self_addr]; //@line 1009 "textio.c"
        var $710=(($709+53)&4294967295); //@line 1009 "textio.c"
        var $711=HEAP[$710]; //@line 1009 "textio.c"
        var $712=HEAP[$self_addr]; //@line 1009 "textio.c"
        var $713=(($712+52)&4294967295); //@line 1009 "textio.c"
        HEAP[$713]=$711; //@line 1009 "textio.c"
        var $714=HEAP[$res]; //@line 1010 "textio.c"
        var $715=(($714)&4294967295); //@line 1010 "textio.c"
        var $716=HEAP[$715]; //@line 1010 "textio.c"
        var $717=((($716) - 1)&4294967295); //@line 1010 "textio.c"
        var $718=HEAP[$res]; //@line 1010 "textio.c"
        var $719=(($718)&4294967295); //@line 1010 "textio.c"
        HEAP[$719]=$717; //@line 1010 "textio.c"
        var $720=HEAP[$res]; //@line 1010 "textio.c"
        var $721=(($720)&4294967295); //@line 1010 "textio.c"
        var $722=HEAP[$721]; //@line 1010 "textio.c"
        var $723=((($722))|0)==0; //@line 1010 "textio.c"
        if ($723) { __label__ = 122; break; } else { __label__ = 123; break; } //@line 1010 "textio.c"
      case 122: // $bb131
        var $724=HEAP[$res]; //@line 1010 "textio.c"
        var $725=(($724+4)&4294967295); //@line 1010 "textio.c"
        var $726=HEAP[$725]; //@line 1010 "textio.c"
        var $727=(($726+24)&4294967295); //@line 1010 "textio.c"
        var $728=HEAP[$727]; //@line 1010 "textio.c"
        var $729=HEAP[$res]; //@line 1010 "textio.c"
        FUNCTION_TABLE[$728]($729); //@line 1010 "textio.c"
        __label__ = 123; break; //@line 1010 "textio.c"
      case 123: // $bb132
        var $730=HEAP[$self_addr]; //@line 1012 "textio.c"
        var $731=(($730+60)&4294967295); //@line 1012 "textio.c"
        HEAP[$731]=0; //@line 1012 "textio.c"
        var $732=HEAP[$self_addr]; //@line 1013 "textio.c"
        var $733=(($732+52)&4294967295); //@line 1013 "textio.c"
        var $734=HEAP[$733]; //@line 1013 "textio.c"
        var $735=reSign(($734), 8, 0)!=0; //@line 1013 "textio.c"
        if ($735) { __label__ = 124; break; } else { __label__ = 133; break; } //@line 1013 "textio.c"
      case 124: // $bb133
        var $736=HEAP[$self_addr]; //@line 1013 "textio.c"
        var $737=(($736+28)&4294967295); //@line 1013 "textio.c"
        var $738=HEAP[$737]; //@line 1013 "textio.c"
        var $739=($738)!=0; //@line 1013 "textio.c"
        if ($739) { __label__ = 125; break; } else { __label__ = 133; break; } //@line 1013 "textio.c"
      case 125: // $bb134
        var $740=HEAP[$self_addr]; //@line 1017 "textio.c"
        var $741=(($740+60)&4294967295); //@line 1017 "textio.c"
        HEAP[$741]=1; //@line 1017 "textio.c"
        var $742=HEAP[__PyIO_str_tell]; //@line 1019 "textio.c"
        var $743=HEAP[$buffer]; //@line 1019 "textio.c"
        var $744=_PyObject_CallMethodObjArgs($743, $742, 0); //@line 1019 "textio.c"
        HEAP[$cookieObj]=$744; //@line 1019 "textio.c"
        var $745=HEAP[$cookieObj]; //@line 1020 "textio.c"
        var $746=($745)==0; //@line 1020 "textio.c"
        if ($746) { __label__ = 134; break; } else { __label__ = 126; break; } //@line 1020 "textio.c"
      case 126: // $bb135
        var $747=HEAP[__PyIO_zero]; //@line 1023 "textio.c"
        var $748=HEAP[$cookieObj]; //@line 1023 "textio.c"
        var $749=_PyObject_RichCompareBool($748, $747, 2); //@line 1023 "textio.c"
        HEAP[$cmp]=$749; //@line 1023 "textio.c"
        var $750=HEAP[$cookieObj]; //@line 1024 "textio.c"
        var $751=(($750)&4294967295); //@line 1024 "textio.c"
        var $752=HEAP[$751]; //@line 1024 "textio.c"
        var $753=((($752) - 1)&4294967295); //@line 1024 "textio.c"
        var $754=HEAP[$cookieObj]; //@line 1024 "textio.c"
        var $755=(($754)&4294967295); //@line 1024 "textio.c"
        HEAP[$755]=$753; //@line 1024 "textio.c"
        var $756=HEAP[$cookieObj]; //@line 1024 "textio.c"
        var $757=(($756)&4294967295); //@line 1024 "textio.c"
        var $758=HEAP[$757]; //@line 1024 "textio.c"
        var $759=((($758))|0)==0; //@line 1024 "textio.c"
        if ($759) { __label__ = 127; break; } else { __label__ = 128; break; } //@line 1024 "textio.c"
      case 127: // $bb136
        var $760=HEAP[$cookieObj]; //@line 1024 "textio.c"
        var $761=(($760+4)&4294967295); //@line 1024 "textio.c"
        var $762=HEAP[$761]; //@line 1024 "textio.c"
        var $763=(($762+24)&4294967295); //@line 1024 "textio.c"
        var $764=HEAP[$763]; //@line 1024 "textio.c"
        var $765=HEAP[$cookieObj]; //@line 1024 "textio.c"
        FUNCTION_TABLE[$764]($765); //@line 1024 "textio.c"
        __label__ = 128; break; //@line 1024 "textio.c"
      case 128: // $bb137
        var $766=HEAP[$cmp]; //@line 1025 "textio.c"
        var $767=((($766))|0) < 0; //@line 1025 "textio.c"
        if ($767) { __label__ = 134; break; } else { __label__ = 129; break; } //@line 1025 "textio.c"
      case 129: // $bb138
        var $768=HEAP[$cmp]; //@line 1029 "textio.c"
        var $769=((($768))|0)==0; //@line 1029 "textio.c"
        if ($769) { __label__ = 130; break; } else { __label__ = 133; break; } //@line 1029 "textio.c"
      case 130: // $bb139
        var $770=HEAP[$self_addr]; //@line 1030 "textio.c"
        var $771=(($770+60)&4294967295); //@line 1030 "textio.c"
        HEAP[$771]=0; //@line 1030 "textio.c"
        var $772=HEAP[__PyIO_zero]; //@line 1031 "textio.c"
        var $773=HEAP[__PyIO_str_setstate]; //@line 1031 "textio.c"
        var $774=HEAP[$self_addr]; //@line 1031 "textio.c"
        var $775=(($774+28)&4294967295); //@line 1031 "textio.c"
        var $776=HEAP[$775]; //@line 1031 "textio.c"
        var $777=_PyObject_CallMethodObjArgs($776, $773, $772, 0); //@line 1031 "textio.c"
        HEAP[$res]=$777; //@line 1031 "textio.c"
        var $778=HEAP[$res]; //@line 1033 "textio.c"
        var $779=($778)==0; //@line 1033 "textio.c"
        if ($779) { __label__ = 134; break; } else { __label__ = 131; break; } //@line 1033 "textio.c"
      case 131: // $bb140
        var $780=HEAP[$res]; //@line 1035 "textio.c"
        var $781=(($780)&4294967295); //@line 1035 "textio.c"
        var $782=HEAP[$781]; //@line 1035 "textio.c"
        var $783=((($782) - 1)&4294967295); //@line 1035 "textio.c"
        var $784=HEAP[$res]; //@line 1035 "textio.c"
        var $785=(($784)&4294967295); //@line 1035 "textio.c"
        HEAP[$785]=$783; //@line 1035 "textio.c"
        var $786=HEAP[$res]; //@line 1035 "textio.c"
        var $787=(($786)&4294967295); //@line 1035 "textio.c"
        var $788=HEAP[$787]; //@line 1035 "textio.c"
        var $789=((($788))|0)==0; //@line 1035 "textio.c"
        if ($789) { __label__ = 132; break; } else { __label__ = 133; break; } //@line 1035 "textio.c"
      case 132: // $bb141
        var $790=HEAP[$res]; //@line 1035 "textio.c"
        var $791=(($790+4)&4294967295); //@line 1035 "textio.c"
        var $792=HEAP[$791]; //@line 1035 "textio.c"
        var $793=(($792+24)&4294967295); //@line 1035 "textio.c"
        var $794=HEAP[$793]; //@line 1035 "textio.c"
        var $795=HEAP[$res]; //@line 1035 "textio.c"
        FUNCTION_TABLE[$794]($795); //@line 1035 "textio.c"
        __label__ = 133; break; //@line 1035 "textio.c"
      case 133: // $bb142
        var $796=HEAP[$self_addr]; //@line 1039 "textio.c"
        var $797=(($796+8)&4294967295); //@line 1039 "textio.c"
        HEAP[$797]=1; //@line 1039 "textio.c"
        HEAP[$0]=0; //@line 1040 "textio.c"
        __label__ = 135; break; //@line 1040 "textio.c"
      case 134: // $error
        HEAP[$0]=-1; //@line 1043 "textio.c"
        __label__ = 135; break; //@line 1043 "textio.c"
      case 135: // $bb143
        var $798=HEAP[$0]; //@line 827 "textio.c"
        HEAP[$retval]=$798; //@line 827 "textio.c"
        __label__ = 136; break; //@line 827 "textio.c"
      case 136: // $return
        var $retval144=HEAP[$retval]; //@line 827 "textio.c"
        STACKTOP = __stackBase__;
        return $retval144; //@line 827 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __textiowrapper_clear($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 52; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 52);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_py_tmp=__stackBase__+12;
        var $_py_tmp7=__stackBase__+16;
        var $_py_tmp11=__stackBase__+20;
        var $_py_tmp15=__stackBase__+24;
        var $_py_tmp19=__stackBase__+28;
        var $_py_tmp23=__stackBase__+32;
        var $_py_tmp27=__stackBase__+36;
        var $_py_tmp31=__stackBase__+40;
        var $_py_tmp35=__stackBase__+44;
        var $_py_tmp39=__stackBase__+48;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 1049 "textio.c"
        var $2=(($1+8)&4294967295); //@line 1049 "textio.c"
        var $3=HEAP[$2]; //@line 1049 "textio.c"
        var $4=((($3))|0)!=0; //@line 1049 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 1049 "textio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 1049 "textio.c"
        var $6=$5; //@line 1049 "textio.c"
        var $7=__PyIOBase_finalize($6); //@line 1049 "textio.c"
        var $8=((($7))|0) < 0; //@line 1049 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1049 "textio.c"
      case 2: // $bb1
        HEAP[$0]=-1; //@line 1050 "textio.c"
        __label__ = 34; break; //@line 1050 "textio.c"
      case 3: // $bb2
        var $9=HEAP[$self_addr]; //@line 1051 "textio.c"
        var $10=(($9+8)&4294967295); //@line 1051 "textio.c"
        HEAP[$10]=0; //@line 1051 "textio.c"
        var $11=HEAP[$self_addr]; //@line 1052 "textio.c"
        var $12=(($11+20)&4294967295); //@line 1052 "textio.c"
        var $13=HEAP[$12]; //@line 1052 "textio.c"
        var $14=($13)!=0; //@line 1052 "textio.c"
        if ($14) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 1052 "textio.c"
      case 4: // $bb3
        var $15=HEAP[$self_addr]; //@line 1052 "textio.c"
        var $16=(($15+20)&4294967295); //@line 1052 "textio.c"
        var $17=HEAP[$16]; //@line 1052 "textio.c"
        HEAP[$_py_tmp]=$17; //@line 1052 "textio.c"
        var $18=HEAP[$self_addr]; //@line 1052 "textio.c"
        var $19=(($18+20)&4294967295); //@line 1052 "textio.c"
        HEAP[$19]=0; //@line 1052 "textio.c"
        var $20=HEAP[$_py_tmp]; //@line 1052 "textio.c"
        var $21=(($20)&4294967295); //@line 1052 "textio.c"
        var $22=HEAP[$21]; //@line 1052 "textio.c"
        var $23=((($22) - 1)&4294967295); //@line 1052 "textio.c"
        var $24=HEAP[$_py_tmp]; //@line 1052 "textio.c"
        var $25=(($24)&4294967295); //@line 1052 "textio.c"
        HEAP[$25]=$23; //@line 1052 "textio.c"
        var $26=HEAP[$_py_tmp]; //@line 1052 "textio.c"
        var $27=(($26)&4294967295); //@line 1052 "textio.c"
        var $28=HEAP[$27]; //@line 1052 "textio.c"
        var $29=((($28))|0)==0; //@line 1052 "textio.c"
        if ($29) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1052 "textio.c"
      case 5: // $bb4
        var $30=HEAP[$_py_tmp]; //@line 1052 "textio.c"
        var $31=(($30+4)&4294967295); //@line 1052 "textio.c"
        var $32=HEAP[$31]; //@line 1052 "textio.c"
        var $33=(($32+24)&4294967295); //@line 1052 "textio.c"
        var $34=HEAP[$33]; //@line 1052 "textio.c"
        var $35=HEAP[$_py_tmp]; //@line 1052 "textio.c"
        FUNCTION_TABLE[$34]($35); //@line 1052 "textio.c"
        __label__ = 6; break; //@line 1052 "textio.c"
      case 6: // $bb5
        var $36=HEAP[$self_addr]; //@line 1053 "textio.c"
        var $37=(($36+24)&4294967295); //@line 1053 "textio.c"
        var $38=HEAP[$37]; //@line 1053 "textio.c"
        var $39=($38)!=0; //@line 1053 "textio.c"
        if ($39) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 1053 "textio.c"
      case 7: // $bb6
        var $40=HEAP[$self_addr]; //@line 1053 "textio.c"
        var $41=(($40+24)&4294967295); //@line 1053 "textio.c"
        var $42=HEAP[$41]; //@line 1053 "textio.c"
        HEAP[$_py_tmp7]=$42; //@line 1053 "textio.c"
        var $43=HEAP[$self_addr]; //@line 1053 "textio.c"
        var $44=(($43+24)&4294967295); //@line 1053 "textio.c"
        HEAP[$44]=0; //@line 1053 "textio.c"
        var $45=HEAP[$_py_tmp7]; //@line 1053 "textio.c"
        var $46=(($45)&4294967295); //@line 1053 "textio.c"
        var $47=HEAP[$46]; //@line 1053 "textio.c"
        var $48=((($47) - 1)&4294967295); //@line 1053 "textio.c"
        var $49=HEAP[$_py_tmp7]; //@line 1053 "textio.c"
        var $50=(($49)&4294967295); //@line 1053 "textio.c"
        HEAP[$50]=$48; //@line 1053 "textio.c"
        var $51=HEAP[$_py_tmp7]; //@line 1053 "textio.c"
        var $52=(($51)&4294967295); //@line 1053 "textio.c"
        var $53=HEAP[$52]; //@line 1053 "textio.c"
        var $54=((($53))|0)==0; //@line 1053 "textio.c"
        if ($54) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1053 "textio.c"
      case 8: // $bb8
        var $55=HEAP[$_py_tmp7]; //@line 1053 "textio.c"
        var $56=(($55+4)&4294967295); //@line 1053 "textio.c"
        var $57=HEAP[$56]; //@line 1053 "textio.c"
        var $58=(($57+24)&4294967295); //@line 1053 "textio.c"
        var $59=HEAP[$58]; //@line 1053 "textio.c"
        var $60=HEAP[$_py_tmp7]; //@line 1053 "textio.c"
        FUNCTION_TABLE[$59]($60); //@line 1053 "textio.c"
        __label__ = 9; break; //@line 1053 "textio.c"
      case 9: // $bb9
        var $61=HEAP[$self_addr]; //@line 1054 "textio.c"
        var $62=(($61+28)&4294967295); //@line 1054 "textio.c"
        var $63=HEAP[$62]; //@line 1054 "textio.c"
        var $64=($63)!=0; //@line 1054 "textio.c"
        if ($64) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 1054 "textio.c"
      case 10: // $bb10
        var $65=HEAP[$self_addr]; //@line 1054 "textio.c"
        var $66=(($65+28)&4294967295); //@line 1054 "textio.c"
        var $67=HEAP[$66]; //@line 1054 "textio.c"
        HEAP[$_py_tmp11]=$67; //@line 1054 "textio.c"
        var $68=HEAP[$self_addr]; //@line 1054 "textio.c"
        var $69=(($68+28)&4294967295); //@line 1054 "textio.c"
        HEAP[$69]=0; //@line 1054 "textio.c"
        var $70=HEAP[$_py_tmp11]; //@line 1054 "textio.c"
        var $71=(($70)&4294967295); //@line 1054 "textio.c"
        var $72=HEAP[$71]; //@line 1054 "textio.c"
        var $73=((($72) - 1)&4294967295); //@line 1054 "textio.c"
        var $74=HEAP[$_py_tmp11]; //@line 1054 "textio.c"
        var $75=(($74)&4294967295); //@line 1054 "textio.c"
        HEAP[$75]=$73; //@line 1054 "textio.c"
        var $76=HEAP[$_py_tmp11]; //@line 1054 "textio.c"
        var $77=(($76)&4294967295); //@line 1054 "textio.c"
        var $78=HEAP[$77]; //@line 1054 "textio.c"
        var $79=((($78))|0)==0; //@line 1054 "textio.c"
        if ($79) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1054 "textio.c"
      case 11: // $bb12
        var $80=HEAP[$_py_tmp11]; //@line 1054 "textio.c"
        var $81=(($80+4)&4294967295); //@line 1054 "textio.c"
        var $82=HEAP[$81]; //@line 1054 "textio.c"
        var $83=(($82+24)&4294967295); //@line 1054 "textio.c"
        var $84=HEAP[$83]; //@line 1054 "textio.c"
        var $85=HEAP[$_py_tmp11]; //@line 1054 "textio.c"
        FUNCTION_TABLE[$84]($85); //@line 1054 "textio.c"
        __label__ = 12; break; //@line 1054 "textio.c"
      case 12: // $bb13
        var $86=HEAP[$self_addr]; //@line 1055 "textio.c"
        var $87=(($86+32)&4294967295); //@line 1055 "textio.c"
        var $88=HEAP[$87]; //@line 1055 "textio.c"
        var $89=($88)!=0; //@line 1055 "textio.c"
        if ($89) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 1055 "textio.c"
      case 13: // $bb14
        var $90=HEAP[$self_addr]; //@line 1055 "textio.c"
        var $91=(($90+32)&4294967295); //@line 1055 "textio.c"
        var $92=HEAP[$91]; //@line 1055 "textio.c"
        HEAP[$_py_tmp15]=$92; //@line 1055 "textio.c"
        var $93=HEAP[$self_addr]; //@line 1055 "textio.c"
        var $94=(($93+32)&4294967295); //@line 1055 "textio.c"
        HEAP[$94]=0; //@line 1055 "textio.c"
        var $95=HEAP[$_py_tmp15]; //@line 1055 "textio.c"
        var $96=(($95)&4294967295); //@line 1055 "textio.c"
        var $97=HEAP[$96]; //@line 1055 "textio.c"
        var $98=((($97) - 1)&4294967295); //@line 1055 "textio.c"
        var $99=HEAP[$_py_tmp15]; //@line 1055 "textio.c"
        var $100=(($99)&4294967295); //@line 1055 "textio.c"
        HEAP[$100]=$98; //@line 1055 "textio.c"
        var $101=HEAP[$_py_tmp15]; //@line 1055 "textio.c"
        var $102=(($101)&4294967295); //@line 1055 "textio.c"
        var $103=HEAP[$102]; //@line 1055 "textio.c"
        var $104=((($103))|0)==0; //@line 1055 "textio.c"
        if ($104) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1055 "textio.c"
      case 14: // $bb16
        var $105=HEAP[$_py_tmp15]; //@line 1055 "textio.c"
        var $106=(($105+4)&4294967295); //@line 1055 "textio.c"
        var $107=HEAP[$106]; //@line 1055 "textio.c"
        var $108=(($107+24)&4294967295); //@line 1055 "textio.c"
        var $109=HEAP[$108]; //@line 1055 "textio.c"
        var $110=HEAP[$_py_tmp15]; //@line 1055 "textio.c"
        FUNCTION_TABLE[$109]($110); //@line 1055 "textio.c"
        __label__ = 15; break; //@line 1055 "textio.c"
      case 15: // $bb17
        var $111=HEAP[$self_addr]; //@line 1056 "textio.c"
        var $112=(($111+36)&4294967295); //@line 1056 "textio.c"
        var $113=HEAP[$112]; //@line 1056 "textio.c"
        var $114=($113)!=0; //@line 1056 "textio.c"
        if ($114) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 1056 "textio.c"
      case 16: // $bb18
        var $115=HEAP[$self_addr]; //@line 1056 "textio.c"
        var $116=(($115+36)&4294967295); //@line 1056 "textio.c"
        var $117=HEAP[$116]; //@line 1056 "textio.c"
        HEAP[$_py_tmp19]=$117; //@line 1056 "textio.c"
        var $118=HEAP[$self_addr]; //@line 1056 "textio.c"
        var $119=(($118+36)&4294967295); //@line 1056 "textio.c"
        HEAP[$119]=0; //@line 1056 "textio.c"
        var $120=HEAP[$_py_tmp19]; //@line 1056 "textio.c"
        var $121=(($120)&4294967295); //@line 1056 "textio.c"
        var $122=HEAP[$121]; //@line 1056 "textio.c"
        var $123=((($122) - 1)&4294967295); //@line 1056 "textio.c"
        var $124=HEAP[$_py_tmp19]; //@line 1056 "textio.c"
        var $125=(($124)&4294967295); //@line 1056 "textio.c"
        HEAP[$125]=$123; //@line 1056 "textio.c"
        var $126=HEAP[$_py_tmp19]; //@line 1056 "textio.c"
        var $127=(($126)&4294967295); //@line 1056 "textio.c"
        var $128=HEAP[$127]; //@line 1056 "textio.c"
        var $129=((($128))|0)==0; //@line 1056 "textio.c"
        if ($129) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 1056 "textio.c"
      case 17: // $bb20
        var $130=HEAP[$_py_tmp19]; //@line 1056 "textio.c"
        var $131=(($130+4)&4294967295); //@line 1056 "textio.c"
        var $132=HEAP[$131]; //@line 1056 "textio.c"
        var $133=(($132+24)&4294967295); //@line 1056 "textio.c"
        var $134=HEAP[$133]; //@line 1056 "textio.c"
        var $135=HEAP[$_py_tmp19]; //@line 1056 "textio.c"
        FUNCTION_TABLE[$134]($135); //@line 1056 "textio.c"
        __label__ = 18; break; //@line 1056 "textio.c"
      case 18: // $bb21
        var $136=HEAP[$self_addr]; //@line 1057 "textio.c"
        var $137=(($136+64)&4294967295); //@line 1057 "textio.c"
        var $138=HEAP[$137]; //@line 1057 "textio.c"
        var $139=($138)!=0; //@line 1057 "textio.c"
        if ($139) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 1057 "textio.c"
      case 19: // $bb22
        var $140=HEAP[$self_addr]; //@line 1057 "textio.c"
        var $141=(($140+64)&4294967295); //@line 1057 "textio.c"
        var $142=HEAP[$141]; //@line 1057 "textio.c"
        HEAP[$_py_tmp23]=$142; //@line 1057 "textio.c"
        var $143=HEAP[$self_addr]; //@line 1057 "textio.c"
        var $144=(($143+64)&4294967295); //@line 1057 "textio.c"
        HEAP[$144]=0; //@line 1057 "textio.c"
        var $145=HEAP[$_py_tmp23]; //@line 1057 "textio.c"
        var $146=(($145)&4294967295); //@line 1057 "textio.c"
        var $147=HEAP[$146]; //@line 1057 "textio.c"
        var $148=((($147) - 1)&4294967295); //@line 1057 "textio.c"
        var $149=HEAP[$_py_tmp23]; //@line 1057 "textio.c"
        var $150=(($149)&4294967295); //@line 1057 "textio.c"
        HEAP[$150]=$148; //@line 1057 "textio.c"
        var $151=HEAP[$_py_tmp23]; //@line 1057 "textio.c"
        var $152=(($151)&4294967295); //@line 1057 "textio.c"
        var $153=HEAP[$152]; //@line 1057 "textio.c"
        var $154=((($153))|0)==0; //@line 1057 "textio.c"
        if ($154) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1057 "textio.c"
      case 20: // $bb24
        var $155=HEAP[$_py_tmp23]; //@line 1057 "textio.c"
        var $156=(($155+4)&4294967295); //@line 1057 "textio.c"
        var $157=HEAP[$156]; //@line 1057 "textio.c"
        var $158=(($157+24)&4294967295); //@line 1057 "textio.c"
        var $159=HEAP[$158]; //@line 1057 "textio.c"
        var $160=HEAP[$_py_tmp23]; //@line 1057 "textio.c"
        FUNCTION_TABLE[$159]($160); //@line 1057 "textio.c"
        __label__ = 21; break; //@line 1057 "textio.c"
      case 21: // $bb25
        var $161=HEAP[$self_addr]; //@line 1058 "textio.c"
        var $162=(($161+72)&4294967295); //@line 1058 "textio.c"
        var $163=HEAP[$162]; //@line 1058 "textio.c"
        var $164=($163)!=0; //@line 1058 "textio.c"
        if ($164) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 1058 "textio.c"
      case 22: // $bb26
        var $165=HEAP[$self_addr]; //@line 1058 "textio.c"
        var $166=(($165+72)&4294967295); //@line 1058 "textio.c"
        var $167=HEAP[$166]; //@line 1058 "textio.c"
        HEAP[$_py_tmp27]=$167; //@line 1058 "textio.c"
        var $168=HEAP[$self_addr]; //@line 1058 "textio.c"
        var $169=(($168+72)&4294967295); //@line 1058 "textio.c"
        HEAP[$169]=0; //@line 1058 "textio.c"
        var $170=HEAP[$_py_tmp27]; //@line 1058 "textio.c"
        var $171=(($170)&4294967295); //@line 1058 "textio.c"
        var $172=HEAP[$171]; //@line 1058 "textio.c"
        var $173=((($172) - 1)&4294967295); //@line 1058 "textio.c"
        var $174=HEAP[$_py_tmp27]; //@line 1058 "textio.c"
        var $175=(($174)&4294967295); //@line 1058 "textio.c"
        HEAP[$175]=$173; //@line 1058 "textio.c"
        var $176=HEAP[$_py_tmp27]; //@line 1058 "textio.c"
        var $177=(($176)&4294967295); //@line 1058 "textio.c"
        var $178=HEAP[$177]; //@line 1058 "textio.c"
        var $179=((($178))|0)==0; //@line 1058 "textio.c"
        if ($179) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 1058 "textio.c"
      case 23: // $bb28
        var $180=HEAP[$_py_tmp27]; //@line 1058 "textio.c"
        var $181=(($180+4)&4294967295); //@line 1058 "textio.c"
        var $182=HEAP[$181]; //@line 1058 "textio.c"
        var $183=(($182+24)&4294967295); //@line 1058 "textio.c"
        var $184=HEAP[$183]; //@line 1058 "textio.c"
        var $185=HEAP[$_py_tmp27]; //@line 1058 "textio.c"
        FUNCTION_TABLE[$184]($185); //@line 1058 "textio.c"
        __label__ = 24; break; //@line 1058 "textio.c"
      case 24: // $bb29
        var $186=HEAP[$self_addr]; //@line 1059 "textio.c"
        var $187=(($186+80)&4294967295); //@line 1059 "textio.c"
        var $188=HEAP[$187]; //@line 1059 "textio.c"
        var $189=($188)!=0; //@line 1059 "textio.c"
        if ($189) { __label__ = 25; break; } else { __label__ = 27; break; } //@line 1059 "textio.c"
      case 25: // $bb30
        var $190=HEAP[$self_addr]; //@line 1059 "textio.c"
        var $191=(($190+80)&4294967295); //@line 1059 "textio.c"
        var $192=HEAP[$191]; //@line 1059 "textio.c"
        HEAP[$_py_tmp31]=$192; //@line 1059 "textio.c"
        var $193=HEAP[$self_addr]; //@line 1059 "textio.c"
        var $194=(($193+80)&4294967295); //@line 1059 "textio.c"
        HEAP[$194]=0; //@line 1059 "textio.c"
        var $195=HEAP[$_py_tmp31]; //@line 1059 "textio.c"
        var $196=(($195)&4294967295); //@line 1059 "textio.c"
        var $197=HEAP[$196]; //@line 1059 "textio.c"
        var $198=((($197) - 1)&4294967295); //@line 1059 "textio.c"
        var $199=HEAP[$_py_tmp31]; //@line 1059 "textio.c"
        var $200=(($199)&4294967295); //@line 1059 "textio.c"
        HEAP[$200]=$198; //@line 1059 "textio.c"
        var $201=HEAP[$_py_tmp31]; //@line 1059 "textio.c"
        var $202=(($201)&4294967295); //@line 1059 "textio.c"
        var $203=HEAP[$202]; //@line 1059 "textio.c"
        var $204=((($203))|0)==0; //@line 1059 "textio.c"
        if ($204) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1059 "textio.c"
      case 26: // $bb32
        var $205=HEAP[$_py_tmp31]; //@line 1059 "textio.c"
        var $206=(($205+4)&4294967295); //@line 1059 "textio.c"
        var $207=HEAP[$206]; //@line 1059 "textio.c"
        var $208=(($207+24)&4294967295); //@line 1059 "textio.c"
        var $209=HEAP[$208]; //@line 1059 "textio.c"
        var $210=HEAP[$_py_tmp31]; //@line 1059 "textio.c"
        FUNCTION_TABLE[$209]($210); //@line 1059 "textio.c"
        __label__ = 27; break; //@line 1059 "textio.c"
      case 27: // $bb33
        var $211=HEAP[$self_addr]; //@line 1060 "textio.c"
        var $212=(($211+40)&4294967295); //@line 1060 "textio.c"
        var $213=HEAP[$212]; //@line 1060 "textio.c"
        var $214=($213)!=0; //@line 1060 "textio.c"
        if ($214) { __label__ = 28; break; } else { __label__ = 30; break; } //@line 1060 "textio.c"
      case 28: // $bb34
        var $215=HEAP[$self_addr]; //@line 1060 "textio.c"
        var $216=(($215+40)&4294967295); //@line 1060 "textio.c"
        var $217=HEAP[$216]; //@line 1060 "textio.c"
        HEAP[$_py_tmp35]=$217; //@line 1060 "textio.c"
        var $218=HEAP[$self_addr]; //@line 1060 "textio.c"
        var $219=(($218+40)&4294967295); //@line 1060 "textio.c"
        HEAP[$219]=0; //@line 1060 "textio.c"
        var $220=HEAP[$_py_tmp35]; //@line 1060 "textio.c"
        var $221=(($220)&4294967295); //@line 1060 "textio.c"
        var $222=HEAP[$221]; //@line 1060 "textio.c"
        var $223=((($222) - 1)&4294967295); //@line 1060 "textio.c"
        var $224=HEAP[$_py_tmp35]; //@line 1060 "textio.c"
        var $225=(($224)&4294967295); //@line 1060 "textio.c"
        HEAP[$225]=$223; //@line 1060 "textio.c"
        var $226=HEAP[$_py_tmp35]; //@line 1060 "textio.c"
        var $227=(($226)&4294967295); //@line 1060 "textio.c"
        var $228=HEAP[$227]; //@line 1060 "textio.c"
        var $229=((($228))|0)==0; //@line 1060 "textio.c"
        if ($229) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 1060 "textio.c"
      case 29: // $bb36
        var $230=HEAP[$_py_tmp35]; //@line 1060 "textio.c"
        var $231=(($230+4)&4294967295); //@line 1060 "textio.c"
        var $232=HEAP[$231]; //@line 1060 "textio.c"
        var $233=(($232+24)&4294967295); //@line 1060 "textio.c"
        var $234=HEAP[$233]; //@line 1060 "textio.c"
        var $235=HEAP[$_py_tmp35]; //@line 1060 "textio.c"
        FUNCTION_TABLE[$234]($235); //@line 1060 "textio.c"
        __label__ = 30; break; //@line 1060 "textio.c"
      case 30: // $bb37
        var $236=HEAP[$self_addr]; //@line 1061 "textio.c"
        var $237=(($236+84)&4294967295); //@line 1061 "textio.c"
        var $238=HEAP[$237]; //@line 1061 "textio.c"
        var $239=($238)!=0; //@line 1061 "textio.c"
        if ($239) { __label__ = 31; break; } else { __label__ = 33; break; } //@line 1061 "textio.c"
      case 31: // $bb38
        var $240=HEAP[$self_addr]; //@line 1061 "textio.c"
        var $241=(($240+84)&4294967295); //@line 1061 "textio.c"
        var $242=HEAP[$241]; //@line 1061 "textio.c"
        HEAP[$_py_tmp39]=$242; //@line 1061 "textio.c"
        var $243=HEAP[$self_addr]; //@line 1061 "textio.c"
        var $244=(($243+84)&4294967295); //@line 1061 "textio.c"
        HEAP[$244]=0; //@line 1061 "textio.c"
        var $245=HEAP[$_py_tmp39]; //@line 1061 "textio.c"
        var $246=(($245)&4294967295); //@line 1061 "textio.c"
        var $247=HEAP[$246]; //@line 1061 "textio.c"
        var $248=((($247) - 1)&4294967295); //@line 1061 "textio.c"
        var $249=HEAP[$_py_tmp39]; //@line 1061 "textio.c"
        var $250=(($249)&4294967295); //@line 1061 "textio.c"
        HEAP[$250]=$248; //@line 1061 "textio.c"
        var $251=HEAP[$_py_tmp39]; //@line 1061 "textio.c"
        var $252=(($251)&4294967295); //@line 1061 "textio.c"
        var $253=HEAP[$252]; //@line 1061 "textio.c"
        var $254=((($253))|0)==0; //@line 1061 "textio.c"
        if ($254) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 1061 "textio.c"
      case 32: // $bb40
        var $255=HEAP[$_py_tmp39]; //@line 1061 "textio.c"
        var $256=(($255+4)&4294967295); //@line 1061 "textio.c"
        var $257=HEAP[$256]; //@line 1061 "textio.c"
        var $258=(($257+24)&4294967295); //@line 1061 "textio.c"
        var $259=HEAP[$258]; //@line 1061 "textio.c"
        var $260=HEAP[$_py_tmp39]; //@line 1061 "textio.c"
        FUNCTION_TABLE[$259]($260); //@line 1061 "textio.c"
        __label__ = 33; break; //@line 1061 "textio.c"
      case 33: // $bb41
        HEAP[$0]=0; //@line 1062 "textio.c"
        __label__ = 34; break; //@line 1062 "textio.c"
      case 34: // $bb42
        var $261=HEAP[$0]; //@line 1050 "textio.c"
        HEAP[$retval]=$261; //@line 1050 "textio.c"
        __label__ = 35; break; //@line 1050 "textio.c"
      case 35: // $return
        var $retval43=HEAP[$retval]; //@line 1050 "textio.c"
        STACKTOP = __stackBase__;
        return $retval43; //@line 1050 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_dealloc($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $g=__stackBase__+4;
        var $_py_tmp=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $0=HEAP[$self_addr]; //@line 1068 "textio.c"
        var $1=__textiowrapper_clear($0); //@line 1068 "textio.c"
        var $2=((($1))|0) < 0; //@line 1068 "textio.c"
        if ($2) { __label__ = 9; break; } else { __label__ = 1; break; } //@line 1068 "textio.c"
      case 1: // $bb
        var $3=HEAP[$self_addr]; //@line 1070 "textio.c"
        var $4=$3; //@line 1070 "textio.c"
        var $5=(($4+-12)&4294967295); //@line 1070 "textio.c"
        HEAP[$g]=$5; //@line 1070 "textio.c"
        var $6=HEAP[$g]; //@line 1070 "textio.c"
        var $7=(($6)&4294967295); //@line 1070 "textio.c"
        var $8=(($7+8)&4294967295); //@line 1070 "textio.c"
        var $9=HEAP[$8]; //@line 1070 "textio.c"
        var $10=((($9))|0)==-2; //@line 1070 "textio.c"
        if ($10) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1070 "textio.c"
      case 2: // $bb1
        ___assert_fail(((__str56432)&4294967295), ((__str15390)&4294967295), 1070, ((___PRETTY_FUNCTION___9695)&4294967295)); //@line 1070 "textio.c"
        throw "Reached an unreachable! Original .ll line: 29333"; //@line 1070 "textio.c"
      case 3: // $bb2
        var $11=HEAP[$g]; //@line 1070 "textio.c"
        var $12=(($11)&4294967295); //@line 1070 "textio.c"
        var $13=(($12+8)&4294967295); //@line 1070 "textio.c"
        HEAP[$13]=-2; //@line 1070 "textio.c"
        var $14=HEAP[$g]; //@line 1070 "textio.c"
        var $15=(($14)&4294967295); //@line 1070 "textio.c"
        var $16=(($15+4)&4294967295); //@line 1070 "textio.c"
        var $17=HEAP[$16]; //@line 1070 "textio.c"
        var $18=HEAP[$g]; //@line 1070 "textio.c"
        var $19=(($18)&4294967295); //@line 1070 "textio.c"
        var $20=(($19)&4294967295); //@line 1070 "textio.c"
        var $21=HEAP[$20]; //@line 1070 "textio.c"
        var $22=(($17)&4294967295); //@line 1070 "textio.c"
        var $23=(($22)&4294967295); //@line 1070 "textio.c"
        HEAP[$23]=$21; //@line 1070 "textio.c"
        var $24=HEAP[$g]; //@line 1070 "textio.c"
        var $25=(($24)&4294967295); //@line 1070 "textio.c"
        var $26=(($25)&4294967295); //@line 1070 "textio.c"
        var $27=HEAP[$26]; //@line 1070 "textio.c"
        var $28=HEAP[$g]; //@line 1070 "textio.c"
        var $29=(($28)&4294967295); //@line 1070 "textio.c"
        var $30=(($29+4)&4294967295); //@line 1070 "textio.c"
        var $31=HEAP[$30]; //@line 1070 "textio.c"
        var $32=(($27)&4294967295); //@line 1070 "textio.c"
        var $33=(($32+4)&4294967295); //@line 1070 "textio.c"
        HEAP[$33]=$31; //@line 1070 "textio.c"
        var $34=HEAP[$g]; //@line 1070 "textio.c"
        var $35=(($34)&4294967295); //@line 1070 "textio.c"
        var $36=(($35)&4294967295); //@line 1070 "textio.c"
        HEAP[$36]=0; //@line 1070 "textio.c"
        var $37=HEAP[$self_addr]; //@line 1071 "textio.c"
        var $38=(($37+88)&4294967295); //@line 1071 "textio.c"
        var $39=HEAP[$38]; //@line 1071 "textio.c"
        var $40=($39)!=0; //@line 1071 "textio.c"
        if ($40) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1071 "textio.c"
      case 4: // $bb3
        var $41=HEAP[$self_addr]; //@line 1072 "textio.c"
        var $42=$41; //@line 1072 "textio.c"
        _PyObject_ClearWeakRefs($42); //@line 1072 "textio.c"
        __label__ = 5; break; //@line 1072 "textio.c"
      case 5: // $bb4
        var $43=HEAP[$self_addr]; //@line 1073 "textio.c"
        var $44=(($43+92)&4294967295); //@line 1073 "textio.c"
        var $45=HEAP[$44]; //@line 1073 "textio.c"
        var $46=($45)!=0; //@line 1073 "textio.c"
        if ($46) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 1073 "textio.c"
      case 6: // $bb5
        var $47=HEAP[$self_addr]; //@line 1073 "textio.c"
        var $48=(($47+92)&4294967295); //@line 1073 "textio.c"
        var $49=HEAP[$48]; //@line 1073 "textio.c"
        HEAP[$_py_tmp]=$49; //@line 1073 "textio.c"
        var $50=HEAP[$self_addr]; //@line 1073 "textio.c"
        var $51=(($50+92)&4294967295); //@line 1073 "textio.c"
        HEAP[$51]=0; //@line 1073 "textio.c"
        var $52=HEAP[$_py_tmp]; //@line 1073 "textio.c"
        var $53=(($52)&4294967295); //@line 1073 "textio.c"
        var $54=HEAP[$53]; //@line 1073 "textio.c"
        var $55=((($54) - 1)&4294967295); //@line 1073 "textio.c"
        var $56=HEAP[$_py_tmp]; //@line 1073 "textio.c"
        var $57=(($56)&4294967295); //@line 1073 "textio.c"
        HEAP[$57]=$55; //@line 1073 "textio.c"
        var $58=HEAP[$_py_tmp]; //@line 1073 "textio.c"
        var $59=(($58)&4294967295); //@line 1073 "textio.c"
        var $60=HEAP[$59]; //@line 1073 "textio.c"
        var $61=((($60))|0)==0; //@line 1073 "textio.c"
        if ($61) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1073 "textio.c"
      case 7: // $bb6
        var $62=HEAP[$_py_tmp]; //@line 1073 "textio.c"
        var $63=(($62+4)&4294967295); //@line 1073 "textio.c"
        var $64=HEAP[$63]; //@line 1073 "textio.c"
        var $65=(($64+24)&4294967295); //@line 1073 "textio.c"
        var $66=HEAP[$65]; //@line 1073 "textio.c"
        var $67=HEAP[$_py_tmp]; //@line 1073 "textio.c"
        FUNCTION_TABLE[$66]($67); //@line 1073 "textio.c"
        __label__ = 8; break; //@line 1073 "textio.c"
      case 8: // $bb7
        var $68=HEAP[$self_addr]; //@line 1074 "textio.c"
        var $69=$68; //@line 1074 "textio.c"
        var $70=(($69+4)&4294967295); //@line 1074 "textio.c"
        var $71=HEAP[$70]; //@line 1074 "textio.c"
        var $72=(($71+160)&4294967295); //@line 1074 "textio.c"
        var $73=HEAP[$72]; //@line 1074 "textio.c"
        var $74=HEAP[$self_addr]; //@line 1074 "textio.c"
        var $75=$74; //@line 1074 "textio.c"
        FUNCTION_TABLE[$73]($75); //@line 1074 "textio.c"
        __label__ = 9; break; //@line 1074 "textio.c"
      case 9: // $bb8
        __label__ = 10; break; //@line 1069 "textio.c"
      case 10: // $return
        STACKTOP = __stackBase__;
        return; //@line 1069 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_traverse($self, $visit, $arg) {
    var __stackBase__  = STACKTOP; STACKTOP += 64; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 64);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $visit_addr=__stackBase__+4;
        var $arg_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $vret=__stackBase__+20;
        var $vret4=__stackBase__+24;
        var $vret8=__stackBase__+28;
        var $vret12=__stackBase__+32;
        var $vret16=__stackBase__+36;
        var $vret20=__stackBase__+40;
        var $vret24=__stackBase__+44;
        var $vret28=__stackBase__+48;
        var $vret32=__stackBase__+52;
        var $vret36=__stackBase__+56;
        var $vret40=__stackBase__+60;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$visit_addr]=$visit;
        HEAP[$arg_addr]=$arg;
        var $1=HEAP[$self_addr]; //@line 1080 "textio.c"
        var $2=(($1+20)&4294967295); //@line 1080 "textio.c"
        var $3=HEAP[$2]; //@line 1080 "textio.c"
        var $4=($3)!=0; //@line 1080 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 1080 "textio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 1080 "textio.c"
        var $6=(($5+20)&4294967295); //@line 1080 "textio.c"
        var $7=HEAP[$6]; //@line 1080 "textio.c"
        var $8=HEAP[$visit_addr]; //@line 1080 "textio.c"
        var $9=HEAP[$arg_addr]; //@line 1080 "textio.c"
        var $10=FUNCTION_TABLE[$8]($7, $9); //@line 1080 "textio.c"
        HEAP[$vret]=$10; //@line 1080 "textio.c"
        var $11=HEAP[$vret]; //@line 1080 "textio.c"
        var $12=((($11))|0)!=0; //@line 1080 "textio.c"
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1080 "textio.c"
      case 2: // $bb1
        var $13=HEAP[$vret]; //@line 1080 "textio.c"
        HEAP[$0]=$13; //@line 1080 "textio.c"
        __label__ = 34; break; //@line 1080 "textio.c"
      case 3: // $bb2
        var $14=HEAP[$self_addr]; //@line 1081 "textio.c"
        var $15=(($14+24)&4294967295); //@line 1081 "textio.c"
        var $16=HEAP[$15]; //@line 1081 "textio.c"
        var $17=($16)!=0; //@line 1081 "textio.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 1081 "textio.c"
      case 4: // $bb3
        var $18=HEAP[$self_addr]; //@line 1081 "textio.c"
        var $19=(($18+24)&4294967295); //@line 1081 "textio.c"
        var $20=HEAP[$19]; //@line 1081 "textio.c"
        var $21=HEAP[$visit_addr]; //@line 1081 "textio.c"
        var $22=HEAP[$arg_addr]; //@line 1081 "textio.c"
        var $23=FUNCTION_TABLE[$21]($20, $22); //@line 1081 "textio.c"
        HEAP[$vret4]=$23; //@line 1081 "textio.c"
        var $24=HEAP[$vret4]; //@line 1081 "textio.c"
        var $25=((($24))|0)!=0; //@line 1081 "textio.c"
        if ($25) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1081 "textio.c"
      case 5: // $bb5
        var $26=HEAP[$vret4]; //@line 1081 "textio.c"
        HEAP[$0]=$26; //@line 1081 "textio.c"
        __label__ = 34; break; //@line 1081 "textio.c"
      case 6: // $bb6
        var $27=HEAP[$self_addr]; //@line 1082 "textio.c"
        var $28=(($27+28)&4294967295); //@line 1082 "textio.c"
        var $29=HEAP[$28]; //@line 1082 "textio.c"
        var $30=($29)!=0; //@line 1082 "textio.c"
        if ($30) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 1082 "textio.c"
      case 7: // $bb7
        var $31=HEAP[$self_addr]; //@line 1082 "textio.c"
        var $32=(($31+28)&4294967295); //@line 1082 "textio.c"
        var $33=HEAP[$32]; //@line 1082 "textio.c"
        var $34=HEAP[$visit_addr]; //@line 1082 "textio.c"
        var $35=HEAP[$arg_addr]; //@line 1082 "textio.c"
        var $36=FUNCTION_TABLE[$34]($33, $35); //@line 1082 "textio.c"
        HEAP[$vret8]=$36; //@line 1082 "textio.c"
        var $37=HEAP[$vret8]; //@line 1082 "textio.c"
        var $38=((($37))|0)!=0; //@line 1082 "textio.c"
        if ($38) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1082 "textio.c"
      case 8: // $bb9
        var $39=HEAP[$vret8]; //@line 1082 "textio.c"
        HEAP[$0]=$39; //@line 1082 "textio.c"
        __label__ = 34; break; //@line 1082 "textio.c"
      case 9: // $bb10
        var $40=HEAP[$self_addr]; //@line 1083 "textio.c"
        var $41=(($40+32)&4294967295); //@line 1083 "textio.c"
        var $42=HEAP[$41]; //@line 1083 "textio.c"
        var $43=($42)!=0; //@line 1083 "textio.c"
        if ($43) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 1083 "textio.c"
      case 10: // $bb11
        var $44=HEAP[$self_addr]; //@line 1083 "textio.c"
        var $45=(($44+32)&4294967295); //@line 1083 "textio.c"
        var $46=HEAP[$45]; //@line 1083 "textio.c"
        var $47=HEAP[$visit_addr]; //@line 1083 "textio.c"
        var $48=HEAP[$arg_addr]; //@line 1083 "textio.c"
        var $49=FUNCTION_TABLE[$47]($46, $48); //@line 1083 "textio.c"
        HEAP[$vret12]=$49; //@line 1083 "textio.c"
        var $50=HEAP[$vret12]; //@line 1083 "textio.c"
        var $51=((($50))|0)!=0; //@line 1083 "textio.c"
        if ($51) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1083 "textio.c"
      case 11: // $bb13
        var $52=HEAP[$vret12]; //@line 1083 "textio.c"
        HEAP[$0]=$52; //@line 1083 "textio.c"
        __label__ = 34; break; //@line 1083 "textio.c"
      case 12: // $bb14
        var $53=HEAP[$self_addr]; //@line 1084 "textio.c"
        var $54=(($53+36)&4294967295); //@line 1084 "textio.c"
        var $55=HEAP[$54]; //@line 1084 "textio.c"
        var $56=($55)!=0; //@line 1084 "textio.c"
        if ($56) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 1084 "textio.c"
      case 13: // $bb15
        var $57=HEAP[$self_addr]; //@line 1084 "textio.c"
        var $58=(($57+36)&4294967295); //@line 1084 "textio.c"
        var $59=HEAP[$58]; //@line 1084 "textio.c"
        var $60=HEAP[$visit_addr]; //@line 1084 "textio.c"
        var $61=HEAP[$arg_addr]; //@line 1084 "textio.c"
        var $62=FUNCTION_TABLE[$60]($59, $61); //@line 1084 "textio.c"
        HEAP[$vret16]=$62; //@line 1084 "textio.c"
        var $63=HEAP[$vret16]; //@line 1084 "textio.c"
        var $64=((($63))|0)!=0; //@line 1084 "textio.c"
        if ($64) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1084 "textio.c"
      case 14: // $bb17
        var $65=HEAP[$vret16]; //@line 1084 "textio.c"
        HEAP[$0]=$65; //@line 1084 "textio.c"
        __label__ = 34; break; //@line 1084 "textio.c"
      case 15: // $bb18
        var $66=HEAP[$self_addr]; //@line 1085 "textio.c"
        var $67=(($66+64)&4294967295); //@line 1085 "textio.c"
        var $68=HEAP[$67]; //@line 1085 "textio.c"
        var $69=($68)!=0; //@line 1085 "textio.c"
        if ($69) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 1085 "textio.c"
      case 16: // $bb19
        var $70=HEAP[$self_addr]; //@line 1085 "textio.c"
        var $71=(($70+64)&4294967295); //@line 1085 "textio.c"
        var $72=HEAP[$71]; //@line 1085 "textio.c"
        var $73=HEAP[$visit_addr]; //@line 1085 "textio.c"
        var $74=HEAP[$arg_addr]; //@line 1085 "textio.c"
        var $75=FUNCTION_TABLE[$73]($72, $74); //@line 1085 "textio.c"
        HEAP[$vret20]=$75; //@line 1085 "textio.c"
        var $76=HEAP[$vret20]; //@line 1085 "textio.c"
        var $77=((($76))|0)!=0; //@line 1085 "textio.c"
        if ($77) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 1085 "textio.c"
      case 17: // $bb21
        var $78=HEAP[$vret20]; //@line 1085 "textio.c"
        HEAP[$0]=$78; //@line 1085 "textio.c"
        __label__ = 34; break; //@line 1085 "textio.c"
      case 18: // $bb22
        var $79=HEAP[$self_addr]; //@line 1086 "textio.c"
        var $80=(($79+72)&4294967295); //@line 1086 "textio.c"
        var $81=HEAP[$80]; //@line 1086 "textio.c"
        var $82=($81)!=0; //@line 1086 "textio.c"
        if ($82) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 1086 "textio.c"
      case 19: // $bb23
        var $83=HEAP[$self_addr]; //@line 1086 "textio.c"
        var $84=(($83+72)&4294967295); //@line 1086 "textio.c"
        var $85=HEAP[$84]; //@line 1086 "textio.c"
        var $86=HEAP[$visit_addr]; //@line 1086 "textio.c"
        var $87=HEAP[$arg_addr]; //@line 1086 "textio.c"
        var $88=FUNCTION_TABLE[$86]($85, $87); //@line 1086 "textio.c"
        HEAP[$vret24]=$88; //@line 1086 "textio.c"
        var $89=HEAP[$vret24]; //@line 1086 "textio.c"
        var $90=((($89))|0)!=0; //@line 1086 "textio.c"
        if ($90) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1086 "textio.c"
      case 20: // $bb25
        var $91=HEAP[$vret24]; //@line 1086 "textio.c"
        HEAP[$0]=$91; //@line 1086 "textio.c"
        __label__ = 34; break; //@line 1086 "textio.c"
      case 21: // $bb26
        var $92=HEAP[$self_addr]; //@line 1087 "textio.c"
        var $93=(($92+80)&4294967295); //@line 1087 "textio.c"
        var $94=HEAP[$93]; //@line 1087 "textio.c"
        var $95=($94)!=0; //@line 1087 "textio.c"
        if ($95) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 1087 "textio.c"
      case 22: // $bb27
        var $96=HEAP[$self_addr]; //@line 1087 "textio.c"
        var $97=(($96+80)&4294967295); //@line 1087 "textio.c"
        var $98=HEAP[$97]; //@line 1087 "textio.c"
        var $99=HEAP[$visit_addr]; //@line 1087 "textio.c"
        var $100=HEAP[$arg_addr]; //@line 1087 "textio.c"
        var $101=FUNCTION_TABLE[$99]($98, $100); //@line 1087 "textio.c"
        HEAP[$vret28]=$101; //@line 1087 "textio.c"
        var $102=HEAP[$vret28]; //@line 1087 "textio.c"
        var $103=((($102))|0)!=0; //@line 1087 "textio.c"
        if ($103) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 1087 "textio.c"
      case 23: // $bb29
        var $104=HEAP[$vret28]; //@line 1087 "textio.c"
        HEAP[$0]=$104; //@line 1087 "textio.c"
        __label__ = 34; break; //@line 1087 "textio.c"
      case 24: // $bb30
        var $105=HEAP[$self_addr]; //@line 1088 "textio.c"
        var $106=(($105+40)&4294967295); //@line 1088 "textio.c"
        var $107=HEAP[$106]; //@line 1088 "textio.c"
        var $108=($107)!=0; //@line 1088 "textio.c"
        if ($108) { __label__ = 25; break; } else { __label__ = 27; break; } //@line 1088 "textio.c"
      case 25: // $bb31
        var $109=HEAP[$self_addr]; //@line 1088 "textio.c"
        var $110=(($109+40)&4294967295); //@line 1088 "textio.c"
        var $111=HEAP[$110]; //@line 1088 "textio.c"
        var $112=HEAP[$visit_addr]; //@line 1088 "textio.c"
        var $113=HEAP[$arg_addr]; //@line 1088 "textio.c"
        var $114=FUNCTION_TABLE[$112]($111, $113); //@line 1088 "textio.c"
        HEAP[$vret32]=$114; //@line 1088 "textio.c"
        var $115=HEAP[$vret32]; //@line 1088 "textio.c"
        var $116=((($115))|0)!=0; //@line 1088 "textio.c"
        if ($116) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1088 "textio.c"
      case 26: // $bb33
        var $117=HEAP[$vret32]; //@line 1088 "textio.c"
        HEAP[$0]=$117; //@line 1088 "textio.c"
        __label__ = 34; break; //@line 1088 "textio.c"
      case 27: // $bb34
        var $118=HEAP[$self_addr]; //@line 1089 "textio.c"
        var $119=(($118+84)&4294967295); //@line 1089 "textio.c"
        var $120=HEAP[$119]; //@line 1089 "textio.c"
        var $121=($120)!=0; //@line 1089 "textio.c"
        if ($121) { __label__ = 28; break; } else { __label__ = 30; break; } //@line 1089 "textio.c"
      case 28: // $bb35
        var $122=HEAP[$self_addr]; //@line 1089 "textio.c"
        var $123=(($122+84)&4294967295); //@line 1089 "textio.c"
        var $124=HEAP[$123]; //@line 1089 "textio.c"
        var $125=HEAP[$visit_addr]; //@line 1089 "textio.c"
        var $126=HEAP[$arg_addr]; //@line 1089 "textio.c"
        var $127=FUNCTION_TABLE[$125]($124, $126); //@line 1089 "textio.c"
        HEAP[$vret36]=$127; //@line 1089 "textio.c"
        var $128=HEAP[$vret36]; //@line 1089 "textio.c"
        var $129=((($128))|0)!=0; //@line 1089 "textio.c"
        if ($129) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 1089 "textio.c"
      case 29: // $bb37
        var $130=HEAP[$vret36]; //@line 1089 "textio.c"
        HEAP[$0]=$130; //@line 1089 "textio.c"
        __label__ = 34; break; //@line 1089 "textio.c"
      case 30: // $bb38
        var $131=HEAP[$self_addr]; //@line 1091 "textio.c"
        var $132=(($131+92)&4294967295); //@line 1091 "textio.c"
        var $133=HEAP[$132]; //@line 1091 "textio.c"
        var $134=($133)!=0; //@line 1091 "textio.c"
        if ($134) { __label__ = 31; break; } else { __label__ = 33; break; } //@line 1091 "textio.c"
      case 31: // $bb39
        var $135=HEAP[$self_addr]; //@line 1091 "textio.c"
        var $136=(($135+92)&4294967295); //@line 1091 "textio.c"
        var $137=HEAP[$136]; //@line 1091 "textio.c"
        var $138=HEAP[$visit_addr]; //@line 1091 "textio.c"
        var $139=HEAP[$arg_addr]; //@line 1091 "textio.c"
        var $140=FUNCTION_TABLE[$138]($137, $139); //@line 1091 "textio.c"
        HEAP[$vret40]=$140; //@line 1091 "textio.c"
        var $141=HEAP[$vret40]; //@line 1091 "textio.c"
        var $142=((($141))|0)!=0; //@line 1091 "textio.c"
        if ($142) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 1091 "textio.c"
      case 32: // $bb41
        var $143=HEAP[$vret40]; //@line 1091 "textio.c"
        HEAP[$0]=$143; //@line 1091 "textio.c"
        __label__ = 34; break; //@line 1091 "textio.c"
      case 33: // $bb42
        HEAP[$0]=0; //@line 1092 "textio.c"
        __label__ = 34; break; //@line 1092 "textio.c"
      case 34: // $bb43
        var $144=HEAP[$0]; //@line 1080 "textio.c"
        HEAP[$retval]=$144; //@line 1080 "textio.c"
        __label__ = 35; break; //@line 1080 "textio.c"
      case 35: // $return
        var $retval44=HEAP[$retval]; //@line 1080 "textio.c"
        STACKTOP = __stackBase__;
        return $retval44; //@line 1080 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_clear($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_py_tmp=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 1098 "textio.c"
        var $2=__textiowrapper_clear($1); //@line 1098 "textio.c"
        var $3=((($2))|0) < 0; //@line 1098 "textio.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1098 "textio.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 1099 "textio.c"
        __label__ = 6; break; //@line 1099 "textio.c"
      case 2: // $bb1
        var $4=HEAP[$self_addr]; //@line 1100 "textio.c"
        var $5=(($4+92)&4294967295); //@line 1100 "textio.c"
        var $6=HEAP[$5]; //@line 1100 "textio.c"
        var $7=($6)!=0; //@line 1100 "textio.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 1100 "textio.c"
      case 3: // $bb2
        var $8=HEAP[$self_addr]; //@line 1100 "textio.c"
        var $9=(($8+92)&4294967295); //@line 1100 "textio.c"
        var $10=HEAP[$9]; //@line 1100 "textio.c"
        HEAP[$_py_tmp]=$10; //@line 1100 "textio.c"
        var $11=HEAP[$self_addr]; //@line 1100 "textio.c"
        var $12=(($11+92)&4294967295); //@line 1100 "textio.c"
        HEAP[$12]=0; //@line 1100 "textio.c"
        var $13=HEAP[$_py_tmp]; //@line 1100 "textio.c"
        var $14=(($13)&4294967295); //@line 1100 "textio.c"
        var $15=HEAP[$14]; //@line 1100 "textio.c"
        var $16=((($15) - 1)&4294967295); //@line 1100 "textio.c"
        var $17=HEAP[$_py_tmp]; //@line 1100 "textio.c"
        var $18=(($17)&4294967295); //@line 1100 "textio.c"
        HEAP[$18]=$16; //@line 1100 "textio.c"
        var $19=HEAP[$_py_tmp]; //@line 1100 "textio.c"
        var $20=(($19)&4294967295); //@line 1100 "textio.c"
        var $21=HEAP[$20]; //@line 1100 "textio.c"
        var $22=((($21))|0)==0; //@line 1100 "textio.c"
        if ($22) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1100 "textio.c"
      case 4: // $bb3
        var $23=HEAP[$_py_tmp]; //@line 1100 "textio.c"
        var $24=(($23+4)&4294967295); //@line 1100 "textio.c"
        var $25=HEAP[$24]; //@line 1100 "textio.c"
        var $26=(($25+24)&4294967295); //@line 1100 "textio.c"
        var $27=HEAP[$26]; //@line 1100 "textio.c"
        var $28=HEAP[$_py_tmp]; //@line 1100 "textio.c"
        FUNCTION_TABLE[$27]($28); //@line 1100 "textio.c"
        __label__ = 5; break; //@line 1100 "textio.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 1101 "textio.c"
        __label__ = 6; break; //@line 1101 "textio.c"
      case 6: // $bb5
        var $29=HEAP[$0]; //@line 1099 "textio.c"
        HEAP[$retval]=$29; //@line 1099 "textio.c"
        __label__ = 7; break; //@line 1099 "textio.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 1099 "textio.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 1099 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_detach($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $buffer=__stackBase__+12;
        var $res=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 1163 "textio.c"
        var $2=(($1+8)&4294967295); //@line 1163 "textio.c"
        var $3=HEAP[$2]; //@line 1163 "textio.c"
        var $4=((($3))|0) <= 0; //@line 1163 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 1163 "textio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 1163 "textio.c"
        var $6=(($5+12)&4294967295); //@line 1163 "textio.c"
        var $7=HEAP[$6]; //@line 1163 "textio.c"
        var $8=((($7))|0)!=0; //@line 1163 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1163 "textio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 1163 "textio.c"
        _PyErr_SetString($9, ((__str57433)&4294967295)); //@line 1163 "textio.c"
        __label__ = 4; break; //@line 1163 "textio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 1163 "textio.c"
        _PyErr_SetString($10, ((__str58434)&4294967295)); //@line 1163 "textio.c"
        __label__ = 4; break; //@line 1163 "textio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 1163 "textio.c"
        __label__ = 10; break; //@line 1163 "textio.c"
      case 5: // $bb4
        var $11=HEAP[__PyIO_str_flush]; //@line 1164 "textio.c"
        var $12=HEAP[$self_addr]; //@line 1164 "textio.c"
        var $13=$12; //@line 1164 "textio.c"
        var $14=_PyObject_CallMethodObjArgs($13, $11, 0); //@line 1164 "textio.c"
        HEAP[$res]=$14; //@line 1164 "textio.c"
        var $15=HEAP[$res]; //@line 1165 "textio.c"
        var $16=($15)==0; //@line 1165 "textio.c"
        if ($16) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1165 "textio.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 1166 "textio.c"
        __label__ = 10; break; //@line 1166 "textio.c"
      case 7: // $bb6
        var $17=HEAP[$res]; //@line 1167 "textio.c"
        var $18=(($17)&4294967295); //@line 1167 "textio.c"
        var $19=HEAP[$18]; //@line 1167 "textio.c"
        var $20=((($19) - 1)&4294967295); //@line 1167 "textio.c"
        var $21=HEAP[$res]; //@line 1167 "textio.c"
        var $22=(($21)&4294967295); //@line 1167 "textio.c"
        HEAP[$22]=$20; //@line 1167 "textio.c"
        var $23=HEAP[$res]; //@line 1167 "textio.c"
        var $24=(($23)&4294967295); //@line 1167 "textio.c"
        var $25=HEAP[$24]; //@line 1167 "textio.c"
        var $26=((($25))|0)==0; //@line 1167 "textio.c"
        if ($26) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1167 "textio.c"
      case 8: // $bb7
        var $27=HEAP[$res]; //@line 1167 "textio.c"
        var $28=(($27+4)&4294967295); //@line 1167 "textio.c"
        var $29=HEAP[$28]; //@line 1167 "textio.c"
        var $30=(($29+24)&4294967295); //@line 1167 "textio.c"
        var $31=HEAP[$30]; //@line 1167 "textio.c"
        var $32=HEAP[$res]; //@line 1167 "textio.c"
        FUNCTION_TABLE[$31]($32); //@line 1167 "textio.c"
        __label__ = 9; break; //@line 1167 "textio.c"
      case 9: // $bb8
        var $33=HEAP[$self_addr]; //@line 1168 "textio.c"
        var $34=(($33+20)&4294967295); //@line 1168 "textio.c"
        var $35=HEAP[$34]; //@line 1168 "textio.c"
        HEAP[$buffer]=$35; //@line 1168 "textio.c"
        var $36=HEAP[$self_addr]; //@line 1169 "textio.c"
        var $37=(($36+20)&4294967295); //@line 1169 "textio.c"
        HEAP[$37]=0; //@line 1169 "textio.c"
        var $38=HEAP[$self_addr]; //@line 1170 "textio.c"
        var $39=(($38+12)&4294967295); //@line 1170 "textio.c"
        HEAP[$39]=1; //@line 1170 "textio.c"
        var $40=HEAP[$self_addr]; //@line 1171 "textio.c"
        var $41=(($40+8)&4294967295); //@line 1171 "textio.c"
        HEAP[$41]=0; //@line 1171 "textio.c"
        var $42=HEAP[$buffer]; //@line 1172 "textio.c"
        HEAP[$0]=$42; //@line 1172 "textio.c"
        __label__ = 10; break; //@line 1172 "textio.c"
      case 10: // $bb9
        var $43=HEAP[$0]; //@line 1163 "textio.c"
        HEAP[$retval]=$43; //@line 1163 "textio.c"
        __label__ = 11; break; //@line 1163 "textio.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 1163 "textio.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 1163 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _findchar($s, $size, $ch) {
    var __stackBase__  = STACKTOP; STACKTOP += 18; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 18);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $s_addr=__stackBase__;
        var $size_addr=__stackBase__+4;
        var $ch_addr=__stackBase__+8;
        var $retval=__stackBase__+10;
        var $0=__stackBase__+14;
        var $_alloca_point_=0;
        HEAP[$s_addr]=$s;
        HEAP[$size_addr]=$size;
        HEAP[$ch_addr]=$ch;
        __label__ = 4; break; //@line 1179 "textio.c"
      case 1: // $bb
        var $1=HEAP[$s_addr]; //@line 1180 "textio.c"
        var $2=HEAP[$1]; //@line 1180 "textio.c"
        var $3=HEAP[$ch_addr]; //@line 1180 "textio.c"
        var $4=reSign(($2), 16, 0)==reSign(($3), 16, 0); //@line 1180 "textio.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1180 "textio.c"
      case 2: // $bb1
        var $5=HEAP[$s_addr]; //@line 1181 "textio.c"
        HEAP[$0]=$5; //@line 1181 "textio.c"
        __label__ = 6; break; //@line 1181 "textio.c"
      case 3: // $bb2
        var $6=HEAP[$s_addr]; //@line 1182 "textio.c"
        var $7=(($6+2)&4294967295); //@line 1182 "textio.c"
        HEAP[$s_addr]=$7; //@line 1182 "textio.c"
        __label__ = 4; break; //@line 1182 "textio.c"
      case 4: // $bb3
        var $8=HEAP[$size_addr]; //@line 1179 "textio.c"
        var $9=((($8))|0) > 0; //@line 1179 "textio.c"
        var $10=unSign(($9), 1, 0); //@line 1179 "textio.c"
        var $11=HEAP[$size_addr]; //@line 1179 "textio.c"
        var $12=((($11) - 1)&4294967295); //@line 1179 "textio.c"
        HEAP[$size_addr]=$12; //@line 1179 "textio.c"
        var $toBool=reSign(($10), 8, 0)!=0; //@line 1179 "textio.c"
        if ($toBool) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 1179 "textio.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 1184 "textio.c"
        __label__ = 6; break; //@line 1184 "textio.c"
      case 6: // $bb5
        var $13=HEAP[$0]; //@line 1181 "textio.c"
        HEAP[$retval]=$13; //@line 1181 "textio.c"
        __label__ = 7; break; //@line 1181 "textio.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 1181 "textio.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 1181 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __textiowrapper_writeflush($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $pending=__stackBase__+12;
        var $b=__stackBase__+16;
        var $ret=__stackBase__+20;
        var $_py_tmp=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 1194 "textio.c"
        var $2=(($1+72)&4294967295); //@line 1194 "textio.c"
        var $3=HEAP[$2]; //@line 1194 "textio.c"
        var $4=($3)==0; //@line 1194 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1194 "textio.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 1195 "textio.c"
        __label__ = 16; break; //@line 1195 "textio.c"
      case 2: // $bb1
        var $5=HEAP[$self_addr]; //@line 1197 "textio.c"
        var $6=(($5+72)&4294967295); //@line 1197 "textio.c"
        var $7=HEAP[$6]; //@line 1197 "textio.c"
        HEAP[$pending]=$7; //@line 1197 "textio.c"
        var $8=HEAP[$pending]; //@line 1198 "textio.c"
        var $9=(($8)&4294967295); //@line 1198 "textio.c"
        var $10=HEAP[$9]; //@line 1198 "textio.c"
        var $11=((($10) + 1)&4294967295); //@line 1198 "textio.c"
        var $12=HEAP[$pending]; //@line 1198 "textio.c"
        var $13=(($12)&4294967295); //@line 1198 "textio.c"
        HEAP[$13]=$11; //@line 1198 "textio.c"
        var $14=HEAP[$self_addr]; //@line 1199 "textio.c"
        var $15=(($14+76)&4294967295); //@line 1199 "textio.c"
        HEAP[$15]=0; //@line 1199 "textio.c"
        var $16=HEAP[$self_addr]; //@line 1200 "textio.c"
        var $17=(($16+72)&4294967295); //@line 1200 "textio.c"
        var $18=HEAP[$17]; //@line 1200 "textio.c"
        var $19=($18)!=0; //@line 1200 "textio.c"
        if ($19) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 1200 "textio.c"
      case 3: // $bb2
        var $20=HEAP[$self_addr]; //@line 1200 "textio.c"
        var $21=(($20+72)&4294967295); //@line 1200 "textio.c"
        var $22=HEAP[$21]; //@line 1200 "textio.c"
        HEAP[$_py_tmp]=$22; //@line 1200 "textio.c"
        var $23=HEAP[$self_addr]; //@line 1200 "textio.c"
        var $24=(($23+72)&4294967295); //@line 1200 "textio.c"
        HEAP[$24]=0; //@line 1200 "textio.c"
        var $25=HEAP[$_py_tmp]; //@line 1200 "textio.c"
        var $26=(($25)&4294967295); //@line 1200 "textio.c"
        var $27=HEAP[$26]; //@line 1200 "textio.c"
        var $28=((($27) - 1)&4294967295); //@line 1200 "textio.c"
        var $29=HEAP[$_py_tmp]; //@line 1200 "textio.c"
        var $30=(($29)&4294967295); //@line 1200 "textio.c"
        HEAP[$30]=$28; //@line 1200 "textio.c"
        var $31=HEAP[$_py_tmp]; //@line 1200 "textio.c"
        var $32=(($31)&4294967295); //@line 1200 "textio.c"
        var $33=HEAP[$32]; //@line 1200 "textio.c"
        var $34=((($33))|0)==0; //@line 1200 "textio.c"
        if ($34) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1200 "textio.c"
      case 4: // $bb3
        var $35=HEAP[$_py_tmp]; //@line 1200 "textio.c"
        var $36=(($35+4)&4294967295); //@line 1200 "textio.c"
        var $37=HEAP[$36]; //@line 1200 "textio.c"
        var $38=(($37+24)&4294967295); //@line 1200 "textio.c"
        var $39=HEAP[$38]; //@line 1200 "textio.c"
        var $40=HEAP[$_py_tmp]; //@line 1200 "textio.c"
        FUNCTION_TABLE[$39]($40); //@line 1200 "textio.c"
        __label__ = 5; break; //@line 1200 "textio.c"
      case 5: // $bb4
        var $41=HEAP[__PyIO_empty_bytes]; //@line 1202 "textio.c"
        var $42=HEAP[$pending]; //@line 1202 "textio.c"
        var $43=__PyString_Join($41, $42); //@line 1202 "textio.c"
        HEAP[$b]=$43; //@line 1202 "textio.c"
        var $44=HEAP[$pending]; //@line 1203 "textio.c"
        var $45=(($44)&4294967295); //@line 1203 "textio.c"
        var $46=HEAP[$45]; //@line 1203 "textio.c"
        var $47=((($46) - 1)&4294967295); //@line 1203 "textio.c"
        var $48=HEAP[$pending]; //@line 1203 "textio.c"
        var $49=(($48)&4294967295); //@line 1203 "textio.c"
        HEAP[$49]=$47; //@line 1203 "textio.c"
        var $50=HEAP[$pending]; //@line 1203 "textio.c"
        var $51=(($50)&4294967295); //@line 1203 "textio.c"
        var $52=HEAP[$51]; //@line 1203 "textio.c"
        var $53=((($52))|0)==0; //@line 1203 "textio.c"
        if ($53) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1203 "textio.c"
      case 6: // $bb5
        var $54=HEAP[$pending]; //@line 1203 "textio.c"
        var $55=(($54+4)&4294967295); //@line 1203 "textio.c"
        var $56=HEAP[$55]; //@line 1203 "textio.c"
        var $57=(($56+24)&4294967295); //@line 1203 "textio.c"
        var $58=HEAP[$57]; //@line 1203 "textio.c"
        var $59=HEAP[$pending]; //@line 1203 "textio.c"
        FUNCTION_TABLE[$58]($59); //@line 1203 "textio.c"
        __label__ = 7; break; //@line 1203 "textio.c"
      case 7: // $bb6
        var $60=HEAP[$b]; //@line 1204 "textio.c"
        var $61=($60)==0; //@line 1204 "textio.c"
        if ($61) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1204 "textio.c"
      case 8: // $bb7
        HEAP[$0]=-1; //@line 1205 "textio.c"
        __label__ = 16; break; //@line 1205 "textio.c"
      case 9: // $bb8
        var $62=HEAP[__PyIO_str_write]; //@line 1206 "textio.c"
        var $63=HEAP[$self_addr]; //@line 1206 "textio.c"
        var $64=(($63+20)&4294967295); //@line 1206 "textio.c"
        var $65=HEAP[$64]; //@line 1206 "textio.c"
        var $66=HEAP[$b]; //@line 1206 "textio.c"
        var $67=_PyObject_CallMethodObjArgs($65, $62, $66, 0); //@line 1206 "textio.c"
        HEAP[$ret]=$67; //@line 1206 "textio.c"
        var $68=HEAP[$b]; //@line 1208 "textio.c"
        var $69=(($68)&4294967295); //@line 1208 "textio.c"
        var $70=HEAP[$69]; //@line 1208 "textio.c"
        var $71=((($70) - 1)&4294967295); //@line 1208 "textio.c"
        var $72=HEAP[$b]; //@line 1208 "textio.c"
        var $73=(($72)&4294967295); //@line 1208 "textio.c"
        HEAP[$73]=$71; //@line 1208 "textio.c"
        var $74=HEAP[$b]; //@line 1208 "textio.c"
        var $75=(($74)&4294967295); //@line 1208 "textio.c"
        var $76=HEAP[$75]; //@line 1208 "textio.c"
        var $77=((($76))|0)==0; //@line 1208 "textio.c"
        if ($77) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1208 "textio.c"
      case 10: // $bb9
        var $78=HEAP[$b]; //@line 1208 "textio.c"
        var $79=(($78+4)&4294967295); //@line 1208 "textio.c"
        var $80=HEAP[$79]; //@line 1208 "textio.c"
        var $81=(($80+24)&4294967295); //@line 1208 "textio.c"
        var $82=HEAP[$81]; //@line 1208 "textio.c"
        var $83=HEAP[$b]; //@line 1208 "textio.c"
        FUNCTION_TABLE[$82]($83); //@line 1208 "textio.c"
        __label__ = 11; break; //@line 1208 "textio.c"
      case 11: // $bb10
        var $84=HEAP[$ret]; //@line 1209 "textio.c"
        var $85=($84)==0; //@line 1209 "textio.c"
        if ($85) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1209 "textio.c"
      case 12: // $bb11
        HEAP[$0]=-1; //@line 1210 "textio.c"
        __label__ = 16; break; //@line 1210 "textio.c"
      case 13: // $bb12
        var $86=HEAP[$ret]; //@line 1211 "textio.c"
        var $87=(($86)&4294967295); //@line 1211 "textio.c"
        var $88=HEAP[$87]; //@line 1211 "textio.c"
        var $89=((($88) - 1)&4294967295); //@line 1211 "textio.c"
        var $90=HEAP[$ret]; //@line 1211 "textio.c"
        var $91=(($90)&4294967295); //@line 1211 "textio.c"
        HEAP[$91]=$89; //@line 1211 "textio.c"
        var $92=HEAP[$ret]; //@line 1211 "textio.c"
        var $93=(($92)&4294967295); //@line 1211 "textio.c"
        var $94=HEAP[$93]; //@line 1211 "textio.c"
        var $95=((($94))|0)==0; //@line 1211 "textio.c"
        if ($95) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1211 "textio.c"
      case 14: // $bb13
        var $96=HEAP[$ret]; //@line 1211 "textio.c"
        var $97=(($96+4)&4294967295); //@line 1211 "textio.c"
        var $98=HEAP[$97]; //@line 1211 "textio.c"
        var $99=(($98+24)&4294967295); //@line 1211 "textio.c"
        var $100=HEAP[$99]; //@line 1211 "textio.c"
        var $101=HEAP[$ret]; //@line 1211 "textio.c"
        FUNCTION_TABLE[$100]($101); //@line 1211 "textio.c"
        __label__ = 15; break; //@line 1211 "textio.c"
      case 15: // $bb14
        HEAP[$0]=0; //@line 1212 "textio.c"
        __label__ = 16; break; //@line 1212 "textio.c"
      case 16: // $bb15
        var $102=HEAP[$0]; //@line 1195 "textio.c"
        HEAP[$retval]=$102; //@line 1195 "textio.c"
        __label__ = 17; break; //@line 1195 "textio.c"
      case 17: // $return
        var $retval16=HEAP[$retval]; //@line 1195 "textio.c"
        STACKTOP = __stackBase__;
        return $retval16; //@line 1195 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_write($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 56; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 56);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $ret=__stackBase__+16;
        var $text=__stackBase__+20;
        var $b=__stackBase__+24;
        var $textlen=__stackBase__+28;
        var $haslf=__stackBase__+32;
        var $needflush=__stackBase__+36;
        var $r=__stackBase__+40;
        var $_res=__stackBase__+44;
        var $newtext=__stackBase__+48;
        var $_py_tmp=__stackBase__+52;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$haslf]=0; //@line 1222 "textio.c"
        HEAP[$needflush]=0; //@line 1223 "textio.c"
        var $1=HEAP[$self_addr]; //@line 1225 "textio.c"
        var $2=(($1+8)&4294967295); //@line 1225 "textio.c"
        var $3=HEAP[$2]; //@line 1225 "textio.c"
        var $4=((($3))|0) <= 0; //@line 1225 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 1225 "textio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 1225 "textio.c"
        var $6=(($5+12)&4294967295); //@line 1225 "textio.c"
        var $7=HEAP[$6]; //@line 1225 "textio.c"
        var $8=((($7))|0)!=0; //@line 1225 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1225 "textio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 1225 "textio.c"
        _PyErr_SetString($9, ((__str57433)&4294967295)); //@line 1225 "textio.c"
        __label__ = 4; break; //@line 1225 "textio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 1225 "textio.c"
        _PyErr_SetString($10, ((__str58434)&4294967295)); //@line 1225 "textio.c"
        __label__ = 4; break; //@line 1225 "textio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 1225 "textio.c"
        __label__ = 77; break; //@line 1225 "textio.c"
      case 5: // $bb4
        var $11=HEAP[$args_addr]; //@line 1227 "textio.c"
        var $12=__PyArg_ParseTuple_SizeT($11, ((__str59435)&4294967295), $text); //@line 1227 "textio.c"
        var $13=((($12))|0)==0; //@line 1227 "textio.c"
        if ($13) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1227 "textio.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 1228 "textio.c"
        __label__ = 77; break; //@line 1228 "textio.c"
      case 7: // $bb6
        var $14=HEAP[$self_addr]; //@line 1231 "textio.c"
        var $15=$14; //@line 1231 "textio.c"
        var $16=(($15+4)&4294967295); //@line 1231 "textio.c"
        var $17=HEAP[$16]; //@line 1231 "textio.c"
        var $18=($17)==(_PyTextIOWrapper_Type); //@line 1231 "textio.c"
        if ($18) { __label__ = 8; break; } else { __label__ = 19; break; } //@line 1231 "textio.c"
      case 8: // $bb7
        var $19=HEAP[$self_addr]; //@line 1231 "textio.c"
        var $20=(($19+84)&4294967295); //@line 1231 "textio.c"
        var $21=HEAP[$20]; //@line 1231 "textio.c"
        var $22=($21)!=0; //@line 1231 "textio.c"
        if ($22) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1231 "textio.c"
      case 9: // $bb8
        var $23=HEAP[$self_addr]; //@line 1231 "textio.c"
        var $24=(($23+84)&4294967295); //@line 1231 "textio.c"
        var $25=HEAP[$24]; //@line 1231 "textio.c"
        var $26=__PyFileIO_closed($25); //@line 1231 "textio.c"
        HEAP[$r]=$26; //@line 1231 "textio.c"
        __label__ = 16; break; //@line 1231 "textio.c"
      case 10: // $bb9
        var $27=HEAP[$self_addr]; //@line 1231 "textio.c"
        var $28=_textiowrapper_closed_get($27, 0); //@line 1231 "textio.c"
        HEAP[$_res]=$28; //@line 1231 "textio.c"
        var $29=HEAP[$_res]; //@line 1231 "textio.c"
        var $30=($29)==0; //@line 1231 "textio.c"
        if ($30) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1231 "textio.c"
      case 11: // $bb10
        HEAP[$0]=0; //@line 1231 "textio.c"
        __label__ = 77; break; //@line 1231 "textio.c"
      case 12: // $bb11
        var $31=HEAP[$_res]; //@line 1231 "textio.c"
        var $32=_PyObject_IsTrue($31); //@line 1231 "textio.c"
        HEAP[$r]=$32; //@line 1231 "textio.c"
        var $33=HEAP[$_res]; //@line 1231 "textio.c"
        var $34=(($33)&4294967295); //@line 1231 "textio.c"
        var $35=HEAP[$34]; //@line 1231 "textio.c"
        var $36=((($35) - 1)&4294967295); //@line 1231 "textio.c"
        var $37=HEAP[$_res]; //@line 1231 "textio.c"
        var $38=(($37)&4294967295); //@line 1231 "textio.c"
        HEAP[$38]=$36; //@line 1231 "textio.c"
        var $39=HEAP[$_res]; //@line 1231 "textio.c"
        var $40=(($39)&4294967295); //@line 1231 "textio.c"
        var $41=HEAP[$40]; //@line 1231 "textio.c"
        var $42=((($41))|0)==0; //@line 1231 "textio.c"
        if ($42) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1231 "textio.c"
      case 13: // $bb12
        var $43=HEAP[$_res]; //@line 1231 "textio.c"
        var $44=(($43+4)&4294967295); //@line 1231 "textio.c"
        var $45=HEAP[$44]; //@line 1231 "textio.c"
        var $46=(($45+24)&4294967295); //@line 1231 "textio.c"
        var $47=HEAP[$46]; //@line 1231 "textio.c"
        var $48=HEAP[$_res]; //@line 1231 "textio.c"
        FUNCTION_TABLE[$47]($48); //@line 1231 "textio.c"
        __label__ = 14; break; //@line 1231 "textio.c"
      case 14: // $bb13
        var $49=HEAP[$r]; //@line 1231 "textio.c"
        var $50=((($49))|0) < 0; //@line 1231 "textio.c"
        if ($50) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1231 "textio.c"
      case 15: // $bb14
        HEAP[$0]=0; //@line 1231 "textio.c"
        __label__ = 77; break; //@line 1231 "textio.c"
      case 16: // $bb15
        var $51=HEAP[$r]; //@line 1231 "textio.c"
        var $52=((($51))|0) > 0; //@line 1231 "textio.c"
        if ($52) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 1231 "textio.c"
      case 17: // $bb16
        var $53=HEAP[_PyExc_ValueError]; //@line 1231 "textio.c"
        _PyErr_SetString($53, ((__str60436)&4294967295)); //@line 1231 "textio.c"
        HEAP[$0]=0; //@line 1231 "textio.c"
        __label__ = 77; break; //@line 1231 "textio.c"
      case 18: // $bb17
        __label__ = 21; break; //@line 1231 "textio.c"
      case 19: // $bb18
        var $54=HEAP[$self_addr]; //@line 1231 "textio.c"
        var $55=$54; //@line 1231 "textio.c"
        var $56=__PyIOBase_check_closed($55, __Py_TrueStruct); //@line 1231 "textio.c"
        var $57=($56)==0; //@line 1231 "textio.c"
        if ($57) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1231 "textio.c"
      case 20: // $bb19
        HEAP[$0]=0; //@line 1231 "textio.c"
        __label__ = 77; break; //@line 1231 "textio.c"
      case 21: // $bb20
        var $58=HEAP[$self_addr]; //@line 1233 "textio.c"
        var $59=(($58+28)&4294967295); //@line 1233 "textio.c"
        var $60=HEAP[$59]; //@line 1233 "textio.c"
        var $61=($60)==0; //@line 1233 "textio.c"
        if ($61) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 1233 "textio.c"
      case 22: // $bb21
        var $62=HEAP[_PyExc_IOError]; //@line 1234 "textio.c"
        _PyErr_SetString($62, ((__str61437)&4294967295)); //@line 1234 "textio.c"
        HEAP[$0]=0; //@line 1235 "textio.c"
        __label__ = 77; break; //@line 1235 "textio.c"
      case 23: // $bb22
        var $63=HEAP[$text]; //@line 1238 "textio.c"
        var $64=(($63)&4294967295); //@line 1238 "textio.c"
        var $65=HEAP[$64]; //@line 1238 "textio.c"
        var $66=((($65) + 1)&4294967295); //@line 1238 "textio.c"
        var $67=(($63)&4294967295); //@line 1238 "textio.c"
        HEAP[$67]=$66; //@line 1238 "textio.c"
        var $68=HEAP[$text]; //@line 1240 "textio.c"
        var $69=_PyUnicodeUCS2_GetSize($68); //@line 1240 "textio.c"
        HEAP[$textlen]=$69; //@line 1240 "textio.c"
        var $70=HEAP[$self_addr]; //@line 1242 "textio.c"
        var $71=(($70+51)&4294967295); //@line 1242 "textio.c"
        var $72=HEAP[$71]; //@line 1242 "textio.c"
        var $73=reSign(($72), 8, 0)==0; //@line 1242 "textio.c"
        if ($73) { __label__ = 25; break; } else { __label__ = 24; break; } //@line 1242 "textio.c"
      case 24: // $bb23
        var $74=HEAP[$self_addr]; //@line 1242 "textio.c"
        var $75=(($74+44)&4294967295); //@line 1242 "textio.c"
        var $76=HEAP[$75]; //@line 1242 "textio.c"
        var $77=($76)!=0; //@line 1242 "textio.c"
        if ($77) { __label__ = 26; break; } else { __label__ = 25; break; } //@line 1242 "textio.c"
      case 25: // $bb24
        var $78=HEAP[$self_addr]; //@line 1242 "textio.c"
        var $79=(($78+48)&4294967295); //@line 1242 "textio.c"
        var $80=HEAP[$79]; //@line 1242 "textio.c"
        var $81=reSign(($80), 8, 0)!=0; //@line 1242 "textio.c"
        if ($81) { __label__ = 26; break; } else { __label__ = 28; break; } //@line 1242 "textio.c"
      case 26: // $bb25
        var $82=HEAP[$text]; //@line 1243 "textio.c"
        var $83=$82; //@line 1243 "textio.c"
        var $84=(($83+8)&4294967295); //@line 1243 "textio.c"
        var $85=HEAP[$84]; //@line 1243 "textio.c"
        var $86=HEAP[$text]; //@line 1243 "textio.c"
        var $87=$86; //@line 1243 "textio.c"
        var $88=(($87+12)&4294967295); //@line 1243 "textio.c"
        var $89=HEAP[$88]; //@line 1243 "textio.c"
        var $90=_findchar($89, $85, 10); //@line 1243 "textio.c"
        var $91=($90)!=0; //@line 1243 "textio.c"
        if ($91) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 1243 "textio.c"
      case 27: // $bb26
        HEAP[$haslf]=1; //@line 1245 "textio.c"
        __label__ = 28; break; //@line 1245 "textio.c"
      case 28: // $bb27
        var $92=HEAP[$haslf]; //@line 1247 "textio.c"
        var $93=((($92))|0)!=0; //@line 1247 "textio.c"
        if ($93) { __label__ = 29; break; } else { __label__ = 36; break; } //@line 1247 "textio.c"
      case 29: // $bb28
        var $94=HEAP[$self_addr]; //@line 1247 "textio.c"
        var $95=(($94+51)&4294967295); //@line 1247 "textio.c"
        var $96=HEAP[$95]; //@line 1247 "textio.c"
        var $97=reSign(($96), 8, 0)!=0; //@line 1247 "textio.c"
        if ($97) { __label__ = 30; break; } else { __label__ = 36; break; } //@line 1247 "textio.c"
      case 30: // $bb29
        var $98=HEAP[$self_addr]; //@line 1247 "textio.c"
        var $99=(($98+44)&4294967295); //@line 1247 "textio.c"
        var $100=HEAP[$99]; //@line 1247 "textio.c"
        var $101=($100)!=0; //@line 1247 "textio.c"
        if ($101) { __label__ = 31; break; } else { __label__ = 36; break; } //@line 1247 "textio.c"
      case 31: // $bb30
        var $102=HEAP[$self_addr]; //@line 1249 "textio.c"
        var $103=(($102+44)&4294967295); //@line 1249 "textio.c"
        var $104=HEAP[$103]; //@line 1249 "textio.c"
        var $105=HEAP[$text]; //@line 1249 "textio.c"
        var $106=__PyObject_CallMethod_SizeT($105, ((__str62438)&4294967295), ((__str27402)&4294967295), ((__str25400)&4294967295), $104); //@line 1249 "textio.c"
        HEAP[$newtext]=$106; //@line 1249 "textio.c"
        var $107=HEAP[$text]; //@line 1250 "textio.c"
        var $108=(($107)&4294967295); //@line 1250 "textio.c"
        var $109=HEAP[$108]; //@line 1250 "textio.c"
        var $110=((($109) - 1)&4294967295); //@line 1250 "textio.c"
        var $111=(($107)&4294967295); //@line 1250 "textio.c"
        HEAP[$111]=$110; //@line 1250 "textio.c"
        var $112=(($107)&4294967295); //@line 1250 "textio.c"
        var $113=HEAP[$112]; //@line 1250 "textio.c"
        var $114=((($113))|0)==0; //@line 1250 "textio.c"
        if ($114) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 1250 "textio.c"
      case 32: // $bb31
        var $115=HEAP[$text]; //@line 1250 "textio.c"
        var $116=(($115+4)&4294967295); //@line 1250 "textio.c"
        var $117=HEAP[$116]; //@line 1250 "textio.c"
        var $118=(($117+24)&4294967295); //@line 1250 "textio.c"
        var $119=HEAP[$118]; //@line 1250 "textio.c"
        var $120=HEAP[$text]; //@line 1250 "textio.c"
        FUNCTION_TABLE[$119]($120); //@line 1250 "textio.c"
        __label__ = 33; break; //@line 1250 "textio.c"
      case 33: // $bb32
        var $121=HEAP[$newtext]; //@line 1251 "textio.c"
        var $122=($121)==0; //@line 1251 "textio.c"
        if ($122) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 1251 "textio.c"
      case 34: // $bb33
        HEAP[$0]=0; //@line 1252 "textio.c"
        __label__ = 77; break; //@line 1252 "textio.c"
      case 35: // $bb34
        var $123=HEAP[$newtext]; //@line 1253 "textio.c"
        HEAP[$text]=$123; //@line 1253 "textio.c"
        __label__ = 36; break; //@line 1253 "textio.c"
      case 36: // $bb35
        var $124=HEAP[$self_addr]; //@line 1256 "textio.c"
        var $125=(($124+48)&4294967295); //@line 1256 "textio.c"
        var $126=HEAP[$125]; //@line 1256 "textio.c"
        var $127=reSign(($126), 8, 0)!=0; //@line 1256 "textio.c"
        if ($127) { __label__ = 37; break; } else { __label__ = 40; break; } //@line 1256 "textio.c"
      case 37: // $bb36
        var $128=HEAP[$haslf]; //@line 1256 "textio.c"
        var $129=((($128))|0)!=0; //@line 1256 "textio.c"
        if ($129) { __label__ = 39; break; } else { __label__ = 38; break; } //@line 1256 "textio.c"
      case 38: // $bb37
        var $130=HEAP[$text]; //@line 1256 "textio.c"
        var $131=$130; //@line 1256 "textio.c"
        var $132=(($131+8)&4294967295); //@line 1256 "textio.c"
        var $133=HEAP[$132]; //@line 1256 "textio.c"
        var $134=HEAP[$text]; //@line 1256 "textio.c"
        var $135=$134; //@line 1256 "textio.c"
        var $136=(($135+12)&4294967295); //@line 1256 "textio.c"
        var $137=HEAP[$136]; //@line 1256 "textio.c"
        var $138=_findchar($137, $133, 13); //@line 1256 "textio.c"
        var $139=($138)!=0; //@line 1256 "textio.c"
        if ($139) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 1256 "textio.c"
      case 39: // $bb38
        HEAP[$needflush]=1; //@line 1260 "textio.c"
        __label__ = 40; break; //@line 1260 "textio.c"
      case 40: // $bb39
        var $140=HEAP[$self_addr]; //@line 1263 "textio.c"
        var $141=(($140+56)&4294967295); //@line 1263 "textio.c"
        var $142=HEAP[$141]; //@line 1263 "textio.c"
        var $143=($142)!=0; //@line 1263 "textio.c"
        if ($143) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 1263 "textio.c"
      case 41: // $bb40
        var $144=HEAP[$self_addr]; //@line 1264 "textio.c"
        var $145=(($144+56)&4294967295); //@line 1264 "textio.c"
        var $146=HEAP[$145]; //@line 1264 "textio.c"
        var $147=HEAP[$text]; //@line 1264 "textio.c"
        var $148=HEAP[$self_addr]; //@line 1264 "textio.c"
        var $149=$148; //@line 1264 "textio.c"
        var $150=FUNCTION_TABLE[$146]($149, $147); //@line 1264 "textio.c"
        HEAP[$b]=$150; //@line 1264 "textio.c"
        var $151=HEAP[$self_addr]; //@line 1265 "textio.c"
        var $152=(($151+60)&4294967295); //@line 1265 "textio.c"
        HEAP[$152]=0; //@line 1265 "textio.c"
        __label__ = 43; break; //@line 1265 "textio.c"
      case 42: // $bb41
        var $153=HEAP[$text]; //@line 1268 "textio.c"
        var $154=HEAP[__PyIO_str_encode]; //@line 1268 "textio.c"
        var $155=HEAP[$self_addr]; //@line 1268 "textio.c"
        var $156=(($155+28)&4294967295); //@line 1268 "textio.c"
        var $157=HEAP[$156]; //@line 1268 "textio.c"
        var $158=_PyObject_CallMethodObjArgs($157, $154, $153, 0); //@line 1268 "textio.c"
        HEAP[$b]=$158; //@line 1268 "textio.c"
        __label__ = 43; break; //@line 1268 "textio.c"
      case 43: // $bb42
        var $159=HEAP[$text]; //@line 1270 "textio.c"
        var $160=(($159)&4294967295); //@line 1270 "textio.c"
        var $161=HEAP[$160]; //@line 1270 "textio.c"
        var $162=((($161) - 1)&4294967295); //@line 1270 "textio.c"
        var $163=(($159)&4294967295); //@line 1270 "textio.c"
        HEAP[$163]=$162; //@line 1270 "textio.c"
        var $164=(($159)&4294967295); //@line 1270 "textio.c"
        var $165=HEAP[$164]; //@line 1270 "textio.c"
        var $166=((($165))|0)==0; //@line 1270 "textio.c"
        if ($166) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 1270 "textio.c"
      case 44: // $bb43
        var $167=HEAP[$text]; //@line 1270 "textio.c"
        var $168=(($167+4)&4294967295); //@line 1270 "textio.c"
        var $169=HEAP[$168]; //@line 1270 "textio.c"
        var $170=(($169+24)&4294967295); //@line 1270 "textio.c"
        var $171=HEAP[$170]; //@line 1270 "textio.c"
        var $172=HEAP[$text]; //@line 1270 "textio.c"
        FUNCTION_TABLE[$171]($172); //@line 1270 "textio.c"
        __label__ = 45; break; //@line 1270 "textio.c"
      case 45: // $bb44
        var $173=HEAP[$b]; //@line 1271 "textio.c"
        var $174=($173)==0; //@line 1271 "textio.c"
        if ($174) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 1271 "textio.c"
      case 46: // $bb45
        HEAP[$0]=0; //@line 1272 "textio.c"
        __label__ = 77; break; //@line 1272 "textio.c"
      case 47: // $bb46
        var $175=HEAP[$self_addr]; //@line 1274 "textio.c"
        var $176=(($175+72)&4294967295); //@line 1274 "textio.c"
        var $177=HEAP[$176]; //@line 1274 "textio.c"
        var $178=($177)==0; //@line 1274 "textio.c"
        if ($178) { __label__ = 48; break; } else { __label__ = 53; break; } //@line 1274 "textio.c"
      case 48: // $bb47
        var $179=_PyList_New(0); //@line 1275 "textio.c"
        var $180=HEAP[$self_addr]; //@line 1275 "textio.c"
        var $181=(($180+72)&4294967295); //@line 1275 "textio.c"
        HEAP[$181]=$179; //@line 1275 "textio.c"
        var $182=HEAP[$self_addr]; //@line 1276 "textio.c"
        var $183=(($182+72)&4294967295); //@line 1276 "textio.c"
        var $184=HEAP[$183]; //@line 1276 "textio.c"
        var $185=($184)==0; //@line 1276 "textio.c"
        if ($185) { __label__ = 49; break; } else { __label__ = 52; break; } //@line 1276 "textio.c"
      case 49: // $bb48
        var $186=HEAP[$b]; //@line 1277 "textio.c"
        var $187=(($186)&4294967295); //@line 1277 "textio.c"
        var $188=HEAP[$187]; //@line 1277 "textio.c"
        var $189=((($188) - 1)&4294967295); //@line 1277 "textio.c"
        var $190=HEAP[$b]; //@line 1277 "textio.c"
        var $191=(($190)&4294967295); //@line 1277 "textio.c"
        HEAP[$191]=$189; //@line 1277 "textio.c"
        var $192=HEAP[$b]; //@line 1277 "textio.c"
        var $193=(($192)&4294967295); //@line 1277 "textio.c"
        var $194=HEAP[$193]; //@line 1277 "textio.c"
        var $195=((($194))|0)==0; //@line 1277 "textio.c"
        if ($195) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 1277 "textio.c"
      case 50: // $bb49
        var $196=HEAP[$b]; //@line 1277 "textio.c"
        var $197=(($196+4)&4294967295); //@line 1277 "textio.c"
        var $198=HEAP[$197]; //@line 1277 "textio.c"
        var $199=(($198+24)&4294967295); //@line 1277 "textio.c"
        var $200=HEAP[$199]; //@line 1277 "textio.c"
        var $201=HEAP[$b]; //@line 1277 "textio.c"
        FUNCTION_TABLE[$200]($201); //@line 1277 "textio.c"
        __label__ = 51; break; //@line 1277 "textio.c"
      case 51: // $bb50
        HEAP[$0]=0; //@line 1278 "textio.c"
        __label__ = 77; break; //@line 1278 "textio.c"
      case 52: // $bb51
        var $202=HEAP[$self_addr]; //@line 1280 "textio.c"
        var $203=(($202+76)&4294967295); //@line 1280 "textio.c"
        HEAP[$203]=0; //@line 1280 "textio.c"
        __label__ = 53; break; //@line 1280 "textio.c"
      case 53: // $bb52
        var $204=HEAP[$self_addr]; //@line 1282 "textio.c"
        var $205=(($204+72)&4294967295); //@line 1282 "textio.c"
        var $206=HEAP[$205]; //@line 1282 "textio.c"
        var $207=HEAP[$b]; //@line 1282 "textio.c"
        var $208=_PyList_Append($206, $207); //@line 1282 "textio.c"
        var $209=((($208))|0) < 0; //@line 1282 "textio.c"
        if ($209) { __label__ = 54; break; } else { __label__ = 57; break; } //@line 1282 "textio.c"
      case 54: // $bb53
        var $210=HEAP[$b]; //@line 1283 "textio.c"
        var $211=(($210)&4294967295); //@line 1283 "textio.c"
        var $212=HEAP[$211]; //@line 1283 "textio.c"
        var $213=((($212) - 1)&4294967295); //@line 1283 "textio.c"
        var $214=HEAP[$b]; //@line 1283 "textio.c"
        var $215=(($214)&4294967295); //@line 1283 "textio.c"
        HEAP[$215]=$213; //@line 1283 "textio.c"
        var $216=HEAP[$b]; //@line 1283 "textio.c"
        var $217=(($216)&4294967295); //@line 1283 "textio.c"
        var $218=HEAP[$217]; //@line 1283 "textio.c"
        var $219=((($218))|0)==0; //@line 1283 "textio.c"
        if ($219) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 1283 "textio.c"
      case 55: // $bb54
        var $220=HEAP[$b]; //@line 1283 "textio.c"
        var $221=(($220+4)&4294967295); //@line 1283 "textio.c"
        var $222=HEAP[$221]; //@line 1283 "textio.c"
        var $223=(($222+24)&4294967295); //@line 1283 "textio.c"
        var $224=HEAP[$223]; //@line 1283 "textio.c"
        var $225=HEAP[$b]; //@line 1283 "textio.c"
        FUNCTION_TABLE[$224]($225); //@line 1283 "textio.c"
        __label__ = 56; break; //@line 1283 "textio.c"
      case 56: // $bb55
        HEAP[$0]=0; //@line 1284 "textio.c"
        __label__ = 77; break; //@line 1284 "textio.c"
      case 57: // $bb56
        var $226=HEAP[$self_addr]; //@line 1286 "textio.c"
        var $227=(($226+76)&4294967295); //@line 1286 "textio.c"
        var $228=HEAP[$227]; //@line 1286 "textio.c"
        var $229=HEAP[$b]; //@line 1286 "textio.c"
        var $230=$229; //@line 1286 "textio.c"
        var $231=(($230+8)&4294967295); //@line 1286 "textio.c"
        var $232=HEAP[$231]; //@line 1286 "textio.c"
        var $233=((($228) + ($232))&4294967295); //@line 1286 "textio.c"
        var $234=HEAP[$self_addr]; //@line 1286 "textio.c"
        var $235=(($234+76)&4294967295); //@line 1286 "textio.c"
        HEAP[$235]=$233; //@line 1286 "textio.c"
        var $236=HEAP[$b]; //@line 1287 "textio.c"
        var $237=(($236)&4294967295); //@line 1287 "textio.c"
        var $238=HEAP[$237]; //@line 1287 "textio.c"
        var $239=((($238) - 1)&4294967295); //@line 1287 "textio.c"
        var $240=HEAP[$b]; //@line 1287 "textio.c"
        var $241=(($240)&4294967295); //@line 1287 "textio.c"
        HEAP[$241]=$239; //@line 1287 "textio.c"
        var $242=HEAP[$b]; //@line 1287 "textio.c"
        var $243=(($242)&4294967295); //@line 1287 "textio.c"
        var $244=HEAP[$243]; //@line 1287 "textio.c"
        var $245=((($244))|0)==0; //@line 1287 "textio.c"
        if ($245) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 1287 "textio.c"
      case 58: // $bb57
        var $246=HEAP[$b]; //@line 1287 "textio.c"
        var $247=(($246+4)&4294967295); //@line 1287 "textio.c"
        var $248=HEAP[$247]; //@line 1287 "textio.c"
        var $249=(($248+24)&4294967295); //@line 1287 "textio.c"
        var $250=HEAP[$249]; //@line 1287 "textio.c"
        var $251=HEAP[$b]; //@line 1287 "textio.c"
        FUNCTION_TABLE[$250]($251); //@line 1287 "textio.c"
        __label__ = 59; break; //@line 1287 "textio.c"
      case 59: // $bb58
        var $252=HEAP[$self_addr]; //@line 1288 "textio.c"
        var $253=(($252+76)&4294967295); //@line 1288 "textio.c"
        var $254=HEAP[$253]; //@line 1288 "textio.c"
        var $255=HEAP[$self_addr]; //@line 1288 "textio.c"
        var $256=(($255+16)&4294967295); //@line 1288 "textio.c"
        var $257=HEAP[$256]; //@line 1288 "textio.c"
        var $258=((($254))|0) > ((($257))|0); //@line 1288 "textio.c"
        if ($258) { __label__ = 61; break; } else { __label__ = 60; break; } //@line 1288 "textio.c"
      case 60: // $bb59
        var $259=HEAP[$needflush]; //@line 1288 "textio.c"
        var $260=((($259))|0)!=0; //@line 1288 "textio.c"
        if ($260) { __label__ = 61; break; } else { __label__ = 63; break; } //@line 1288 "textio.c"
      case 61: // $bb60
        var $261=HEAP[$self_addr]; //@line 1289 "textio.c"
        var $262=__textiowrapper_writeflush($261); //@line 1289 "textio.c"
        var $263=((($262))|0) < 0; //@line 1289 "textio.c"
        if ($263) { __label__ = 62; break; } else { __label__ = 63; break; } //@line 1289 "textio.c"
      case 62: // $bb61
        HEAP[$0]=0; //@line 1290 "textio.c"
        __label__ = 77; break; //@line 1290 "textio.c"
      case 63: // $bb62
        var $264=HEAP[$needflush]; //@line 1293 "textio.c"
        var $265=((($264))|0)!=0; //@line 1293 "textio.c"
        if ($265) { __label__ = 64; break; } else { __label__ = 68; break; } //@line 1293 "textio.c"
      case 64: // $bb63
        var $266=HEAP[__PyIO_str_flush]; //@line 1294 "textio.c"
        var $267=HEAP[$self_addr]; //@line 1294 "textio.c"
        var $268=(($267+20)&4294967295); //@line 1294 "textio.c"
        var $269=HEAP[$268]; //@line 1294 "textio.c"
        var $270=_PyObject_CallMethodObjArgs($269, $266, 0); //@line 1294 "textio.c"
        HEAP[$ret]=$270; //@line 1294 "textio.c"
        var $271=HEAP[$ret]; //@line 1295 "textio.c"
        var $272=($271)==0; //@line 1295 "textio.c"
        if ($272) { __label__ = 65; break; } else { __label__ = 66; break; } //@line 1295 "textio.c"
      case 65: // $bb64
        HEAP[$0]=0; //@line 1296 "textio.c"
        __label__ = 77; break; //@line 1296 "textio.c"
      case 66: // $bb65
        var $273=HEAP[$ret]; //@line 1297 "textio.c"
        var $274=(($273)&4294967295); //@line 1297 "textio.c"
        var $275=HEAP[$274]; //@line 1297 "textio.c"
        var $276=((($275) - 1)&4294967295); //@line 1297 "textio.c"
        var $277=HEAP[$ret]; //@line 1297 "textio.c"
        var $278=(($277)&4294967295); //@line 1297 "textio.c"
        HEAP[$278]=$276; //@line 1297 "textio.c"
        var $279=HEAP[$ret]; //@line 1297 "textio.c"
        var $280=(($279)&4294967295); //@line 1297 "textio.c"
        var $281=HEAP[$280]; //@line 1297 "textio.c"
        var $282=((($281))|0)==0; //@line 1297 "textio.c"
        if ($282) { __label__ = 67; break; } else { __label__ = 68; break; } //@line 1297 "textio.c"
      case 67: // $bb66
        var $283=HEAP[$ret]; //@line 1297 "textio.c"
        var $284=(($283+4)&4294967295); //@line 1297 "textio.c"
        var $285=HEAP[$284]; //@line 1297 "textio.c"
        var $286=(($285+24)&4294967295); //@line 1297 "textio.c"
        var $287=HEAP[$286]; //@line 1297 "textio.c"
        var $288=HEAP[$ret]; //@line 1297 "textio.c"
        FUNCTION_TABLE[$287]($288); //@line 1297 "textio.c"
        __label__ = 68; break; //@line 1297 "textio.c"
      case 68: // $bb67
        var $289=HEAP[$self_addr]; //@line 1300 "textio.c"
        var $290=(($289+80)&4294967295); //@line 1300 "textio.c"
        var $291=HEAP[$290]; //@line 1300 "textio.c"
        var $292=($291)!=0; //@line 1300 "textio.c"
        if ($292) { __label__ = 69; break; } else { __label__ = 71; break; } //@line 1300 "textio.c"
      case 69: // $bb68
        var $293=HEAP[$self_addr]; //@line 1300 "textio.c"
        var $294=(($293+80)&4294967295); //@line 1300 "textio.c"
        var $295=HEAP[$294]; //@line 1300 "textio.c"
        HEAP[$_py_tmp]=$295; //@line 1300 "textio.c"
        var $296=HEAP[$self_addr]; //@line 1300 "textio.c"
        var $297=(($296+80)&4294967295); //@line 1300 "textio.c"
        HEAP[$297]=0; //@line 1300 "textio.c"
        var $298=HEAP[$_py_tmp]; //@line 1300 "textio.c"
        var $299=(($298)&4294967295); //@line 1300 "textio.c"
        var $300=HEAP[$299]; //@line 1300 "textio.c"
        var $301=((($300) - 1)&4294967295); //@line 1300 "textio.c"
        var $302=HEAP[$_py_tmp]; //@line 1300 "textio.c"
        var $303=(($302)&4294967295); //@line 1300 "textio.c"
        HEAP[$303]=$301; //@line 1300 "textio.c"
        var $304=HEAP[$_py_tmp]; //@line 1300 "textio.c"
        var $305=(($304)&4294967295); //@line 1300 "textio.c"
        var $306=HEAP[$305]; //@line 1300 "textio.c"
        var $307=((($306))|0)==0; //@line 1300 "textio.c"
        if ($307) { __label__ = 70; break; } else { __label__ = 71; break; } //@line 1300 "textio.c"
      case 70: // $bb69
        var $308=HEAP[$_py_tmp]; //@line 1300 "textio.c"
        var $309=(($308+4)&4294967295); //@line 1300 "textio.c"
        var $310=HEAP[$309]; //@line 1300 "textio.c"
        var $311=(($310+24)&4294967295); //@line 1300 "textio.c"
        var $312=HEAP[$311]; //@line 1300 "textio.c"
        var $313=HEAP[$_py_tmp]; //@line 1300 "textio.c"
        FUNCTION_TABLE[$312]($313); //@line 1300 "textio.c"
        __label__ = 71; break; //@line 1300 "textio.c"
      case 71: // $bb70
        var $314=HEAP[$self_addr]; //@line 1302 "textio.c"
        var $315=(($314+32)&4294967295); //@line 1302 "textio.c"
        var $316=HEAP[$315]; //@line 1302 "textio.c"
        var $317=($316)!=0; //@line 1302 "textio.c"
        if ($317) { __label__ = 72; break; } else { __label__ = 76; break; } //@line 1302 "textio.c"
      case 72: // $bb71
        var $318=HEAP[$self_addr]; //@line 1303 "textio.c"
        var $319=(($318+32)&4294967295); //@line 1303 "textio.c"
        var $320=HEAP[$319]; //@line 1303 "textio.c"
        var $321=__PyObject_CallMethod_SizeT($320, ((__str31406)&4294967295), 0); //@line 1303 "textio.c"
        HEAP[$ret]=$321; //@line 1303 "textio.c"
        var $322=HEAP[$ret]; //@line 1304 "textio.c"
        var $323=($322)==0; //@line 1304 "textio.c"
        if ($323) { __label__ = 73; break; } else { __label__ = 74; break; } //@line 1304 "textio.c"
      case 73: // $bb72
        HEAP[$0]=0; //@line 1305 "textio.c"
        __label__ = 77; break; //@line 1305 "textio.c"
      case 74: // $bb73
        var $324=HEAP[$ret]; //@line 1306 "textio.c"
        var $325=(($324)&4294967295); //@line 1306 "textio.c"
        var $326=HEAP[$325]; //@line 1306 "textio.c"
        var $327=((($326) - 1)&4294967295); //@line 1306 "textio.c"
        var $328=HEAP[$ret]; //@line 1306 "textio.c"
        var $329=(($328)&4294967295); //@line 1306 "textio.c"
        HEAP[$329]=$327; //@line 1306 "textio.c"
        var $330=HEAP[$ret]; //@line 1306 "textio.c"
        var $331=(($330)&4294967295); //@line 1306 "textio.c"
        var $332=HEAP[$331]; //@line 1306 "textio.c"
        var $333=((($332))|0)==0; //@line 1306 "textio.c"
        if ($333) { __label__ = 75; break; } else { __label__ = 76; break; } //@line 1306 "textio.c"
      case 75: // $bb74
        var $334=HEAP[$ret]; //@line 1306 "textio.c"
        var $335=(($334+4)&4294967295); //@line 1306 "textio.c"
        var $336=HEAP[$335]; //@line 1306 "textio.c"
        var $337=(($336+24)&4294967295); //@line 1306 "textio.c"
        var $338=HEAP[$337]; //@line 1306 "textio.c"
        var $339=HEAP[$ret]; //@line 1306 "textio.c"
        FUNCTION_TABLE[$338]($339); //@line 1306 "textio.c"
        __label__ = 76; break; //@line 1306 "textio.c"
      case 76: // $bb75
        var $340=HEAP[$textlen]; //@line 1309 "textio.c"
        var $341=_PyLong_FromSsize_t($340); //@line 1309 "textio.c"
        HEAP[$0]=$341; //@line 1309 "textio.c"
        __label__ = 77; break; //@line 1309 "textio.c"
      case 77: // $bb76
        var $342=HEAP[$0]; //@line 1225 "textio.c"
        HEAP[$retval]=$342; //@line 1225 "textio.c"
        __label__ = 78; break; //@line 1225 "textio.c"
      case 78: // $return
        var $retval77=HEAP[$retval]; //@line 1225 "textio.c"
        STACKTOP = __stackBase__;
        return $retval77; //@line 1225 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_set_decoded_chars($self, $chars) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $chars_addr=__stackBase__+4;
        var $_py_tmp=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$chars_addr]=$chars;
        var $0=HEAP[$self_addr]; //@line 1317 "textio.c"
        var $1=(($0+64)&4294967295); //@line 1317 "textio.c"
        var $2=HEAP[$1]; //@line 1317 "textio.c"
        var $3=($2)!=0; //@line 1317 "textio.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 1317 "textio.c"
      case 1: // $bb
        var $4=HEAP[$self_addr]; //@line 1317 "textio.c"
        var $5=(($4+64)&4294967295); //@line 1317 "textio.c"
        var $6=HEAP[$5]; //@line 1317 "textio.c"
        HEAP[$_py_tmp]=$6; //@line 1317 "textio.c"
        var $7=HEAP[$self_addr]; //@line 1317 "textio.c"
        var $8=(($7+64)&4294967295); //@line 1317 "textio.c"
        HEAP[$8]=0; //@line 1317 "textio.c"
        var $9=HEAP[$_py_tmp]; //@line 1317 "textio.c"
        var $10=(($9)&4294967295); //@line 1317 "textio.c"
        var $11=HEAP[$10]; //@line 1317 "textio.c"
        var $12=((($11) - 1)&4294967295); //@line 1317 "textio.c"
        var $13=HEAP[$_py_tmp]; //@line 1317 "textio.c"
        var $14=(($13)&4294967295); //@line 1317 "textio.c"
        HEAP[$14]=$12; //@line 1317 "textio.c"
        var $15=HEAP[$_py_tmp]; //@line 1317 "textio.c"
        var $16=(($15)&4294967295); //@line 1317 "textio.c"
        var $17=HEAP[$16]; //@line 1317 "textio.c"
        var $18=((($17))|0)==0; //@line 1317 "textio.c"
        if ($18) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1317 "textio.c"
      case 2: // $bb1
        var $19=HEAP[$_py_tmp]; //@line 1317 "textio.c"
        var $20=(($19+4)&4294967295); //@line 1317 "textio.c"
        var $21=HEAP[$20]; //@line 1317 "textio.c"
        var $22=(($21+24)&4294967295); //@line 1317 "textio.c"
        var $23=HEAP[$22]; //@line 1317 "textio.c"
        var $24=HEAP[$_py_tmp]; //@line 1317 "textio.c"
        FUNCTION_TABLE[$23]($24); //@line 1317 "textio.c"
        __label__ = 3; break; //@line 1317 "textio.c"
      case 3: // $bb2
        var $25=HEAP[$self_addr]; //@line 1318 "textio.c"
        var $26=(($25+64)&4294967295); //@line 1318 "textio.c"
        var $27=HEAP[$chars_addr]; //@line 1318 "textio.c"
        HEAP[$26]=$27; //@line 1318 "textio.c"
        var $28=HEAP[$self_addr]; //@line 1319 "textio.c"
        var $29=(($28+68)&4294967295); //@line 1319 "textio.c"
        HEAP[$29]=0; //@line 1319 "textio.c"
        __label__ = 4; break; //@line 1320 "textio.c"
      case 4: // $return
        STACKTOP = __stackBase__;
        return; //@line 1320 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_get_decoded_chars($self, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $n_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $chars=__stackBase__+16;
        var $avail=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$n_addr]=$n;
        var $1=HEAP[$self_addr]; //@line 1328 "textio.c"
        var $2=(($1+64)&4294967295); //@line 1328 "textio.c"
        var $3=HEAP[$2]; //@line 1328 "textio.c"
        var $4=($3)==0; //@line 1328 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1328 "textio.c"
      case 1: // $bb
        var $5=_PyUnicodeUCS2_FromStringAndSize(0, 0); //@line 1329 "textio.c"
        HEAP[$0]=$5; //@line 1329 "textio.c"
        __label__ = 14; break; //@line 1329 "textio.c"
      case 2: // $bb1
        var $6=HEAP[$self_addr]; //@line 1331 "textio.c"
        var $7=(($6+64)&4294967295); //@line 1331 "textio.c"
        var $8=HEAP[$7]; //@line 1331 "textio.c"
        var $9=$8; //@line 1331 "textio.c"
        var $10=(($9+8)&4294967295); //@line 1331 "textio.c"
        var $11=HEAP[$10]; //@line 1331 "textio.c"
        var $12=HEAP[$self_addr]; //@line 1331 "textio.c"
        var $13=(($12+68)&4294967295); //@line 1331 "textio.c"
        var $14=HEAP[$13]; //@line 1331 "textio.c"
        var $15=((($11) - ($14))&4294967295); //@line 1331 "textio.c"
        HEAP[$avail]=$15; //@line 1331 "textio.c"
        var $16=HEAP[$avail]; //@line 1334 "textio.c"
        var $17=((($16))|0) < 0; //@line 1334 "textio.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1334 "textio.c"
      case 3: // $bb2
        ___assert_fail(((__str63439)&4294967295), ((__str15390)&4294967295), 1334, ((___PRETTY_FUNCTION___10189)&4294967295)); //@line 1334 "textio.c"
        throw "Reached an unreachable! Original .ll line: 30960"; //@line 1334 "textio.c"
      case 4: // $bb3
        var $18=HEAP[$n_addr]; //@line 1336 "textio.c"
        var $19=((($18))|0) < 0; //@line 1336 "textio.c"
        if ($19) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 1336 "textio.c"
      case 5: // $bb4
        var $20=HEAP[$n_addr]; //@line 1336 "textio.c"
        var $21=HEAP[$avail]; //@line 1336 "textio.c"
        var $22=((($20))|0) > ((($21))|0); //@line 1336 "textio.c"
        if ($22) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1336 "textio.c"
      case 6: // $bb5
        var $23=HEAP[$avail]; //@line 1337 "textio.c"
        HEAP[$n_addr]=$23; //@line 1337 "textio.c"
        __label__ = 7; break; //@line 1337 "textio.c"
      case 7: // $bb6
        var $24=HEAP[$self_addr]; //@line 1339 "textio.c"
        var $25=(($24+68)&4294967295); //@line 1339 "textio.c"
        var $26=HEAP[$25]; //@line 1339 "textio.c"
        var $27=((($26))|0) > 0; //@line 1339 "textio.c"
        if ($27) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 1339 "textio.c"
      case 8: // $bb7
        var $28=HEAP[$n_addr]; //@line 1339 "textio.c"
        var $29=HEAP[$avail]; //@line 1339 "textio.c"
        var $30=((($28))|0) < ((($29))|0); //@line 1339 "textio.c"
        if ($30) { __label__ = 9; break; } else { __label__ = 12; break; } //@line 1339 "textio.c"
      case 9: // $bb8
        var $31=HEAP[$self_addr]; //@line 1340 "textio.c"
        var $32=(($31+64)&4294967295); //@line 1340 "textio.c"
        var $33=HEAP[$32]; //@line 1340 "textio.c"
        var $34=$33; //@line 1340 "textio.c"
        var $35=(($34+12)&4294967295); //@line 1340 "textio.c"
        var $36=HEAP[$35]; //@line 1340 "textio.c"
        var $37=HEAP[$self_addr]; //@line 1340 "textio.c"
        var $38=(($37+68)&4294967295); //@line 1340 "textio.c"
        var $39=HEAP[$38]; //@line 1340 "textio.c"
        var $40=(($36+2*$39)&4294967295); //@line 1340 "textio.c"
        var $41=HEAP[$n_addr]; //@line 1340 "textio.c"
        var $42=_PyUnicodeUCS2_FromUnicode($40, $41); //@line 1340 "textio.c"
        HEAP[$chars]=$42; //@line 1340 "textio.c"
        var $43=HEAP[$chars]; //@line 1343 "textio.c"
        var $44=($43)==0; //@line 1343 "textio.c"
        if ($44) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1343 "textio.c"
      case 10: // $bb9
        HEAP[$0]=0; //@line 1344 "textio.c"
        __label__ = 14; break; //@line 1344 "textio.c"
      case 11: // $bb10
        __label__ = 13; break; //@line 1344 "textio.c"
      case 12: // $bb11
        var $45=HEAP[$self_addr]; //@line 1347 "textio.c"
        var $46=(($45+64)&4294967295); //@line 1347 "textio.c"
        var $47=HEAP[$46]; //@line 1347 "textio.c"
        HEAP[$chars]=$47; //@line 1347 "textio.c"
        var $48=HEAP[$chars]; //@line 1348 "textio.c"
        var $49=(($48)&4294967295); //@line 1348 "textio.c"
        var $50=HEAP[$49]; //@line 1348 "textio.c"
        var $51=((($50) + 1)&4294967295); //@line 1348 "textio.c"
        var $52=HEAP[$chars]; //@line 1348 "textio.c"
        var $53=(($52)&4294967295); //@line 1348 "textio.c"
        HEAP[$53]=$51; //@line 1348 "textio.c"
        __label__ = 13; break; //@line 1348 "textio.c"
      case 13: // $bb12
        var $54=HEAP[$self_addr]; //@line 1351 "textio.c"
        var $55=(($54+68)&4294967295); //@line 1351 "textio.c"
        var $56=HEAP[$55]; //@line 1351 "textio.c"
        var $57=HEAP[$n_addr]; //@line 1351 "textio.c"
        var $58=((($56) + ($57))&4294967295); //@line 1351 "textio.c"
        var $59=HEAP[$self_addr]; //@line 1351 "textio.c"
        var $60=(($59+68)&4294967295); //@line 1351 "textio.c"
        HEAP[$60]=$58; //@line 1351 "textio.c"
        var $61=HEAP[$chars]; //@line 1352 "textio.c"
        HEAP[$0]=$61; //@line 1352 "textio.c"
        __label__ = 14; break; //@line 1352 "textio.c"
      case 14: // $bb13
        var $62=HEAP[$0]; //@line 1329 "textio.c"
        HEAP[$retval]=$62; //@line 1329 "textio.c"
        __label__ = 15; break; //@line 1329 "textio.c"
      case 15: // $return
        var $retval14=HEAP[$retval]; //@line 1329 "textio.c"
        STACKTOP = __stackBase__;
        return $retval14; //@line 1329 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_read_chunk($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 52; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 52);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $iftmp_189=__stackBase__+8;
        var $0=__stackBase__+12;
        var $dec_buffer=__stackBase__+16;
        var $dec_flags=__stackBase__+20;
        var $input_chunk=__stackBase__+24;
        var $decoded_chars=__stackBase__+28;
        var $chunk_size=__stackBase__+32;
        var $eof=__stackBase__+36;
        var $state=__stackBase__+40;
        var $next_input=__stackBase__+44;
        var $_py_tmp=__stackBase__+48;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$dec_buffer]=0; //@line 1360 "textio.c"
        HEAP[$dec_flags]=0; //@line 1361 "textio.c"
        HEAP[$input_chunk]=0; //@line 1362 "textio.c"
        var $1=HEAP[$self_addr]; //@line 1372 "textio.c"
        var $2=(($1+32)&4294967295); //@line 1372 "textio.c"
        var $3=HEAP[$2]; //@line 1372 "textio.c"
        var $4=($3)==0; //@line 1372 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1372 "textio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_IOError]; //@line 1373 "textio.c"
        _PyErr_SetString($5, ((__str64440)&4294967295)); //@line 1373 "textio.c"
        HEAP[$0]=-1; //@line 1374 "textio.c"
        __label__ = 49; break; //@line 1374 "textio.c"
      case 2: // $bb1
        var $6=HEAP[$self_addr]; //@line 1377 "textio.c"
        var $7=(($6+53)&4294967295); //@line 1377 "textio.c"
        var $8=HEAP[$7]; //@line 1377 "textio.c"
        var $9=reSign(($8), 8, 0)!=0; //@line 1377 "textio.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 11; break; } //@line 1377 "textio.c"
      case 3: // $bb2
        var $10=HEAP[__PyIO_str_getstate]; //@line 1383 "textio.c"
        var $11=HEAP[$self_addr]; //@line 1383 "textio.c"
        var $12=(($11+32)&4294967295); //@line 1383 "textio.c"
        var $13=HEAP[$12]; //@line 1383 "textio.c"
        var $14=_PyObject_CallMethodObjArgs($13, $10, 0); //@line 1383 "textio.c"
        HEAP[$state]=$14; //@line 1383 "textio.c"
        var $15=HEAP[$state]; //@line 1384 "textio.c"
        var $16=($15)==0; //@line 1384 "textio.c"
        if ($16) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1384 "textio.c"
      case 4: // $bb3
        HEAP[$0]=-1; //@line 1385 "textio.c"
        __label__ = 49; break; //@line 1385 "textio.c"
      case 5: // $bb4
        var $17=HEAP[$state]; //@line 1389 "textio.c"
        var $18=__PyArg_Parse_SizeT($17, ((__str65441)&4294967295), $dec_buffer, $dec_flags); //@line 1389 "textio.c"
        var $19=((($18))|0) < 0; //@line 1389 "textio.c"
        if ($19) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 1389 "textio.c"
      case 6: // $bb5
        var $20=HEAP[$state]; //@line 1390 "textio.c"
        var $21=(($20)&4294967295); //@line 1390 "textio.c"
        var $22=HEAP[$21]; //@line 1390 "textio.c"
        var $23=((($22) - 1)&4294967295); //@line 1390 "textio.c"
        var $24=HEAP[$state]; //@line 1390 "textio.c"
        var $25=(($24)&4294967295); //@line 1390 "textio.c"
        HEAP[$25]=$23; //@line 1390 "textio.c"
        var $26=HEAP[$state]; //@line 1390 "textio.c"
        var $27=(($26)&4294967295); //@line 1390 "textio.c"
        var $28=HEAP[$27]; //@line 1390 "textio.c"
        var $29=((($28))|0)==0; //@line 1390 "textio.c"
        if ($29) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1390 "textio.c"
      case 7: // $bb6
        var $30=HEAP[$state]; //@line 1390 "textio.c"
        var $31=(($30+4)&4294967295); //@line 1390 "textio.c"
        var $32=HEAP[$31]; //@line 1390 "textio.c"
        var $33=(($32+24)&4294967295); //@line 1390 "textio.c"
        var $34=HEAP[$33]; //@line 1390 "textio.c"
        var $35=HEAP[$state]; //@line 1390 "textio.c"
        FUNCTION_TABLE[$34]($35); //@line 1390 "textio.c"
        __label__ = 8; break; //@line 1390 "textio.c"
      case 8: // $bb7
        HEAP[$0]=-1; //@line 1391 "textio.c"
        __label__ = 49; break; //@line 1391 "textio.c"
      case 9: // $bb8
        var $36=HEAP[$dec_buffer]; //@line 1393 "textio.c"
        var $37=(($36)&4294967295); //@line 1393 "textio.c"
        var $38=HEAP[$37]; //@line 1393 "textio.c"
        var $39=((($38) + 1)&4294967295); //@line 1393 "textio.c"
        var $40=(($36)&4294967295); //@line 1393 "textio.c"
        HEAP[$40]=$39; //@line 1393 "textio.c"
        var $41=HEAP[$dec_flags]; //@line 1394 "textio.c"
        var $42=(($41)&4294967295); //@line 1394 "textio.c"
        var $43=HEAP[$42]; //@line 1394 "textio.c"
        var $44=((($43) + 1)&4294967295); //@line 1394 "textio.c"
        var $45=(($41)&4294967295); //@line 1394 "textio.c"
        HEAP[$45]=$44; //@line 1394 "textio.c"
        var $46=HEAP[$state]; //@line 1395 "textio.c"
        var $47=(($46)&4294967295); //@line 1395 "textio.c"
        var $48=HEAP[$47]; //@line 1395 "textio.c"
        var $49=((($48) - 1)&4294967295); //@line 1395 "textio.c"
        var $50=HEAP[$state]; //@line 1395 "textio.c"
        var $51=(($50)&4294967295); //@line 1395 "textio.c"
        HEAP[$51]=$49; //@line 1395 "textio.c"
        var $52=HEAP[$state]; //@line 1395 "textio.c"
        var $53=(($52)&4294967295); //@line 1395 "textio.c"
        var $54=HEAP[$53]; //@line 1395 "textio.c"
        var $55=((($54))|0)==0; //@line 1395 "textio.c"
        if ($55) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1395 "textio.c"
      case 10: // $bb9
        var $56=HEAP[$state]; //@line 1395 "textio.c"
        var $57=(($56+4)&4294967295); //@line 1395 "textio.c"
        var $58=HEAP[$57]; //@line 1395 "textio.c"
        var $59=(($58+24)&4294967295); //@line 1395 "textio.c"
        var $60=HEAP[$59]; //@line 1395 "textio.c"
        var $61=HEAP[$state]; //@line 1395 "textio.c"
        FUNCTION_TABLE[$60]($61); //@line 1395 "textio.c"
        __label__ = 11; break; //@line 1395 "textio.c"
      case 11: // $bb10
        var $62=HEAP[$self_addr]; //@line 1399 "textio.c"
        var $63=(($62+16)&4294967295); //@line 1399 "textio.c"
        var $64=HEAP[$63]; //@line 1399 "textio.c"
        var $65=_PyLong_FromSsize_t($64); //@line 1399 "textio.c"
        HEAP[$chunk_size]=$65; //@line 1399 "textio.c"
        var $66=HEAP[$chunk_size]; //@line 1400 "textio.c"
        var $67=($66)==0; //@line 1400 "textio.c"
        if ($67) { __label__ = 39; break; } else { __label__ = 12; break; } //@line 1400 "textio.c"
      case 12: // $bb11
        var $68=HEAP[__PyIO_str_read1]; //@line 1402 "textio.c"
        var $69=HEAP[$self_addr]; //@line 1402 "textio.c"
        var $70=(($69+20)&4294967295); //@line 1402 "textio.c"
        var $71=HEAP[$70]; //@line 1402 "textio.c"
        var $72=HEAP[$chunk_size]; //@line 1402 "textio.c"
        var $73=_PyObject_CallMethodObjArgs($71, $68, $72, 0); //@line 1402 "textio.c"
        HEAP[$input_chunk]=$73; //@line 1402 "textio.c"
        var $74=HEAP[$chunk_size]; //@line 1404 "textio.c"
        var $75=(($74)&4294967295); //@line 1404 "textio.c"
        var $76=HEAP[$75]; //@line 1404 "textio.c"
        var $77=((($76) - 1)&4294967295); //@line 1404 "textio.c"
        var $78=HEAP[$chunk_size]; //@line 1404 "textio.c"
        var $79=(($78)&4294967295); //@line 1404 "textio.c"
        HEAP[$79]=$77; //@line 1404 "textio.c"
        var $80=HEAP[$chunk_size]; //@line 1404 "textio.c"
        var $81=(($80)&4294967295); //@line 1404 "textio.c"
        var $82=HEAP[$81]; //@line 1404 "textio.c"
        var $83=((($82))|0)==0; //@line 1404 "textio.c"
        if ($83) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1404 "textio.c"
      case 13: // $bb12
        var $84=HEAP[$chunk_size]; //@line 1404 "textio.c"
        var $85=(($84+4)&4294967295); //@line 1404 "textio.c"
        var $86=HEAP[$85]; //@line 1404 "textio.c"
        var $87=(($86+24)&4294967295); //@line 1404 "textio.c"
        var $88=HEAP[$87]; //@line 1404 "textio.c"
        var $89=HEAP[$chunk_size]; //@line 1404 "textio.c"
        FUNCTION_TABLE[$88]($89); //@line 1404 "textio.c"
        __label__ = 14; break; //@line 1404 "textio.c"
      case 14: // $bb13
        var $90=HEAP[$input_chunk]; //@line 1405 "textio.c"
        var $91=($90)==0; //@line 1405 "textio.c"
        if ($91) { __label__ = 39; break; } else { __label__ = 15; break; } //@line 1405 "textio.c"
      case 15: // $bb14
        var $92=HEAP[$input_chunk]; //@line 1407 "textio.c"
        var $93=(($92+4)&4294967295); //@line 1407 "textio.c"
        var $94=HEAP[$93]; //@line 1407 "textio.c"
        var $95=(($94+84)&4294967295); //@line 1407 "textio.c"
        var $96=HEAP[$95]; //@line 1407 "textio.c"
        var $97=($96) & 134217728; //@line 1407 "textio.c"
        var $98=((($97))|0)==0; //@line 1407 "textio.c"
        if ($98) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 1407 "textio.c"
      case 16: // $bb15
        ___assert_fail(((__str66442)&4294967295), ((__str15390)&4294967295), 1407, ((___PRETTY_FUNCTION___10233)&4294967295)); //@line 1407 "textio.c"
        throw "Reached an unreachable! Original .ll line: 31244"; //@line 1407 "textio.c"
      case 17: // $bb16
        var $99=HEAP[$input_chunk]; //@line 1409 "textio.c"
        var $100=_PyString_Size($99); //@line 1409 "textio.c"
        var $101=((($100))|0)==0; //@line 1409 "textio.c"
        var $102=unSign(($101), 1, 0); //@line 1409 "textio.c"
        HEAP[$eof]=$102; //@line 1409 "textio.c"
        var $103=HEAP[$self_addr]; //@line 1411 "textio.c"
        var $104=(($103+32)&4294967295); //@line 1411 "textio.c"
        var $105=HEAP[$104]; //@line 1411 "textio.c"
        var $106=(($105+4)&4294967295); //@line 1411 "textio.c"
        var $107=HEAP[$106]; //@line 1411 "textio.c"
        var $108=($107)==(_PyIncrementalNewlineDecoder_Type); //@line 1411 "textio.c"
        if ($108) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 1411 "textio.c"
      case 18: // $bb17
        var $109=HEAP[$self_addr]; //@line 1412 "textio.c"
        var $110=(($109+32)&4294967295); //@line 1412 "textio.c"
        var $111=HEAP[$110]; //@line 1412 "textio.c"
        var $112=HEAP[$input_chunk]; //@line 1412 "textio.c"
        var $113=HEAP[$eof]; //@line 1412 "textio.c"
        var $114=__PyIncrementalNewlineDecoder_decode($111, $112, $113); //@line 1412 "textio.c"
        HEAP[$decoded_chars]=$114; //@line 1412 "textio.c"
        __label__ = 23; break; //@line 1412 "textio.c"
      case 19: // $bb18
        var $115=HEAP[$eof]; //@line 1416 "textio.c"
        var $116=((($115))|0)!=0; //@line 1416 "textio.c"
        if ($116) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1416 "textio.c"
      case 20: // $bb19
        HEAP[$iftmp_189]=__Py_TrueStruct; //@line 1416 "textio.c"
        __label__ = 22; break; //@line 1416 "textio.c"
      case 21: // $bb20
        HEAP[$iftmp_189]=__Py_ZeroStruct; //@line 1416 "textio.c"
        __label__ = 22; break; //@line 1416 "textio.c"
      case 22: // $bb21
        var $117=HEAP[__PyIO_str_decode]; //@line 1416 "textio.c"
        var $118=HEAP[$self_addr]; //@line 1416 "textio.c"
        var $119=(($118+32)&4294967295); //@line 1416 "textio.c"
        var $120=HEAP[$119]; //@line 1416 "textio.c"
        var $121=HEAP[$input_chunk]; //@line 1416 "textio.c"
        var $122=HEAP[$iftmp_189]; //@line 1416 "textio.c"
        var $123=_PyObject_CallMethodObjArgs($120, $117, $121, $122, 0); //@line 1416 "textio.c"
        HEAP[$decoded_chars]=$123; //@line 1416 "textio.c"
        __label__ = 23; break; //@line 1416 "textio.c"
      case 23: // $bb22
        var $124=HEAP[$decoded_chars]; //@line 1421 "textio.c"
        var $125=($124)==0; //@line 1421 "textio.c"
        if ($125) { __label__ = 39; break; } else { __label__ = 24; break; } //@line 1421 "textio.c"
      case 24: // $bb23
        var $126=HEAP[$self_addr]; //@line 1423 "textio.c"
        var $127=HEAP[$decoded_chars]; //@line 1423 "textio.c"
        _textiowrapper_set_decoded_chars($126, $127); //@line 1423 "textio.c"
        var $128=HEAP[$decoded_chars]; //@line 1424 "textio.c"
        var $129=$128; //@line 1424 "textio.c"
        var $130=(($129+8)&4294967295); //@line 1424 "textio.c"
        var $131=HEAP[$130]; //@line 1424 "textio.c"
        var $132=((($131))|0) > 0; //@line 1424 "textio.c"
        if ($132) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 1424 "textio.c"
      case 25: // $bb24
        HEAP[$eof]=0; //@line 1425 "textio.c"
        __label__ = 26; break; //@line 1425 "textio.c"
      case 26: // $bb25
        var $133=HEAP[$self_addr]; //@line 1427 "textio.c"
        var $134=(($133+53)&4294967295); //@line 1427 "textio.c"
        var $135=HEAP[$134]; //@line 1427 "textio.c"
        var $136=reSign(($135), 8, 0)!=0; //@line 1427 "textio.c"
        if ($136) { __label__ = 27; break; } else { __label__ = 36; break; } //@line 1427 "textio.c"
      case 27: // $bb26
        var $137=HEAP[$dec_buffer]; //@line 1431 "textio.c"
        var $138=HEAP[$input_chunk]; //@line 1431 "textio.c"
        var $139=_PyNumber_Add($137, $138); //@line 1431 "textio.c"
        HEAP[$next_input]=$139; //@line 1431 "textio.c"
        var $140=HEAP[$next_input]; //@line 1432 "textio.c"
        var $141=($140)==0; //@line 1432 "textio.c"
        if ($141) { __label__ = 39; break; } else { __label__ = 28; break; } //@line 1432 "textio.c"
      case 28: // $bb27
        var $142=HEAP[$next_input]; //@line 1434 "textio.c"
        var $143=(($142+4)&4294967295); //@line 1434 "textio.c"
        var $144=HEAP[$143]; //@line 1434 "textio.c"
        var $145=(($144+84)&4294967295); //@line 1434 "textio.c"
        var $146=HEAP[$145]; //@line 1434 "textio.c"
        var $147=($146) & 134217728; //@line 1434 "textio.c"
        var $148=((($147))|0)==0; //@line 1434 "textio.c"
        if ($148) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 1434 "textio.c"
      case 29: // $bb28
        ___assert_fail(((__str67443)&4294967295), ((__str15390)&4294967295), 1434, ((___PRETTY_FUNCTION___10233)&4294967295)); //@line 1434 "textio.c"
        throw "Reached an unreachable! Original .ll line: 31343"; //@line 1434 "textio.c"
      case 30: // $bb29
        var $149=HEAP[$dec_buffer]; //@line 1435 "textio.c"
        var $150=(($149)&4294967295); //@line 1435 "textio.c"
        var $151=HEAP[$150]; //@line 1435 "textio.c"
        var $152=((($151) - 1)&4294967295); //@line 1435 "textio.c"
        var $153=(($149)&4294967295); //@line 1435 "textio.c"
        HEAP[$153]=$152; //@line 1435 "textio.c"
        var $154=(($149)&4294967295); //@line 1435 "textio.c"
        var $155=HEAP[$154]; //@line 1435 "textio.c"
        var $156=((($155))|0)==0; //@line 1435 "textio.c"
        if ($156) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 1435 "textio.c"
      case 31: // $bb30
        var $157=HEAP[$dec_buffer]; //@line 1435 "textio.c"
        var $158=(($157+4)&4294967295); //@line 1435 "textio.c"
        var $159=HEAP[$158]; //@line 1435 "textio.c"
        var $160=(($159+24)&4294967295); //@line 1435 "textio.c"
        var $161=HEAP[$160]; //@line 1435 "textio.c"
        var $162=HEAP[$dec_buffer]; //@line 1435 "textio.c"
        FUNCTION_TABLE[$161]($162); //@line 1435 "textio.c"
        __label__ = 32; break; //@line 1435 "textio.c"
      case 32: // $bb31
        var $163=HEAP[$self_addr]; //@line 1436 "textio.c"
        var $164=(($163+80)&4294967295); //@line 1436 "textio.c"
        var $165=HEAP[$164]; //@line 1436 "textio.c"
        var $166=($165)!=0; //@line 1436 "textio.c"
        if ($166) { __label__ = 33; break; } else { __label__ = 35; break; } //@line 1436 "textio.c"
      case 33: // $bb32
        var $167=HEAP[$self_addr]; //@line 1436 "textio.c"
        var $168=(($167+80)&4294967295); //@line 1436 "textio.c"
        var $169=HEAP[$168]; //@line 1436 "textio.c"
        HEAP[$_py_tmp]=$169; //@line 1436 "textio.c"
        var $170=HEAP[$self_addr]; //@line 1436 "textio.c"
        var $171=(($170+80)&4294967295); //@line 1436 "textio.c"
        HEAP[$171]=0; //@line 1436 "textio.c"
        var $172=HEAP[$_py_tmp]; //@line 1436 "textio.c"
        var $173=(($172)&4294967295); //@line 1436 "textio.c"
        var $174=HEAP[$173]; //@line 1436 "textio.c"
        var $175=((($174) - 1)&4294967295); //@line 1436 "textio.c"
        var $176=HEAP[$_py_tmp]; //@line 1436 "textio.c"
        var $177=(($176)&4294967295); //@line 1436 "textio.c"
        HEAP[$177]=$175; //@line 1436 "textio.c"
        var $178=HEAP[$_py_tmp]; //@line 1436 "textio.c"
        var $179=(($178)&4294967295); //@line 1436 "textio.c"
        var $180=HEAP[$179]; //@line 1436 "textio.c"
        var $181=((($180))|0)==0; //@line 1436 "textio.c"
        if ($181) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 1436 "textio.c"
      case 34: // $bb33
        var $182=HEAP[$_py_tmp]; //@line 1436 "textio.c"
        var $183=(($182+4)&4294967295); //@line 1436 "textio.c"
        var $184=HEAP[$183]; //@line 1436 "textio.c"
        var $185=(($184+24)&4294967295); //@line 1436 "textio.c"
        var $186=HEAP[$185]; //@line 1436 "textio.c"
        var $187=HEAP[$_py_tmp]; //@line 1436 "textio.c"
        FUNCTION_TABLE[$186]($187); //@line 1436 "textio.c"
        __label__ = 35; break; //@line 1436 "textio.c"
      case 35: // $bb34
        var $188=HEAP[$dec_flags]; //@line 1437 "textio.c"
        var $189=HEAP[$next_input]; //@line 1437 "textio.c"
        var $190=__Py_BuildValue_SizeT(((__str68444)&4294967295), $188, $189); //@line 1437 "textio.c"
        var $191=HEAP[$self_addr]; //@line 1437 "textio.c"
        var $192=(($191+80)&4294967295); //@line 1437 "textio.c"
        HEAP[$192]=$190; //@line 1437 "textio.c"
        __label__ = 36; break; //@line 1437 "textio.c"
      case 36: // $bb35
        var $193=HEAP[$input_chunk]; //@line 1439 "textio.c"
        var $194=(($193)&4294967295); //@line 1439 "textio.c"
        var $195=HEAP[$194]; //@line 1439 "textio.c"
        var $196=((($195) - 1)&4294967295); //@line 1439 "textio.c"
        var $197=HEAP[$input_chunk]; //@line 1439 "textio.c"
        var $198=(($197)&4294967295); //@line 1439 "textio.c"
        HEAP[$198]=$196; //@line 1439 "textio.c"
        var $199=HEAP[$input_chunk]; //@line 1439 "textio.c"
        var $200=(($199)&4294967295); //@line 1439 "textio.c"
        var $201=HEAP[$200]; //@line 1439 "textio.c"
        var $202=((($201))|0)==0; //@line 1439 "textio.c"
        if ($202) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 1439 "textio.c"
      case 37: // $bb36
        var $203=HEAP[$input_chunk]; //@line 1439 "textio.c"
        var $204=(($203+4)&4294967295); //@line 1439 "textio.c"
        var $205=HEAP[$204]; //@line 1439 "textio.c"
        var $206=(($205+24)&4294967295); //@line 1439 "textio.c"
        var $207=HEAP[$206]; //@line 1439 "textio.c"
        var $208=HEAP[$input_chunk]; //@line 1439 "textio.c"
        FUNCTION_TABLE[$207]($208); //@line 1439 "textio.c"
        __label__ = 38; break; //@line 1439 "textio.c"
      case 38: // $bb37
        var $209=HEAP[$eof]; //@line 1441 "textio.c"
        var $210=((($209))|0)==0; //@line 1441 "textio.c"
        var $211=unSign(($210), 1, 0); //@line 1441 "textio.c"
        HEAP[$0]=$211; //@line 1441 "textio.c"
        __label__ = 49; break; //@line 1441 "textio.c"
      case 39: // $fail
        var $212=HEAP[$dec_buffer]; //@line 1444 "textio.c"
        var $213=($212)!=0; //@line 1444 "textio.c"
        if ($213) { __label__ = 40; break; } else { __label__ = 42; break; } //@line 1444 "textio.c"
      case 40: // $bb38
        var $214=HEAP[$dec_buffer]; //@line 1444 "textio.c"
        var $215=(($214)&4294967295); //@line 1444 "textio.c"
        var $216=HEAP[$215]; //@line 1444 "textio.c"
        var $217=((($216) - 1)&4294967295); //@line 1444 "textio.c"
        var $218=(($214)&4294967295); //@line 1444 "textio.c"
        HEAP[$218]=$217; //@line 1444 "textio.c"
        var $219=(($214)&4294967295); //@line 1444 "textio.c"
        var $220=HEAP[$219]; //@line 1444 "textio.c"
        var $221=((($220))|0)==0; //@line 1444 "textio.c"
        if ($221) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 1444 "textio.c"
      case 41: // $bb39
        var $222=HEAP[$dec_buffer]; //@line 1444 "textio.c"
        var $223=(($222+4)&4294967295); //@line 1444 "textio.c"
        var $224=HEAP[$223]; //@line 1444 "textio.c"
        var $225=(($224+24)&4294967295); //@line 1444 "textio.c"
        var $226=HEAP[$225]; //@line 1444 "textio.c"
        var $227=HEAP[$dec_buffer]; //@line 1444 "textio.c"
        FUNCTION_TABLE[$226]($227); //@line 1444 "textio.c"
        __label__ = 42; break; //@line 1444 "textio.c"
      case 42: // $bb40
        var $228=HEAP[$dec_flags]; //@line 1445 "textio.c"
        var $229=($228)!=0; //@line 1445 "textio.c"
        if ($229) { __label__ = 43; break; } else { __label__ = 45; break; } //@line 1445 "textio.c"
      case 43: // $bb41
        var $230=HEAP[$dec_flags]; //@line 1445 "textio.c"
        var $231=(($230)&4294967295); //@line 1445 "textio.c"
        var $232=HEAP[$231]; //@line 1445 "textio.c"
        var $233=((($232) - 1)&4294967295); //@line 1445 "textio.c"
        var $234=(($230)&4294967295); //@line 1445 "textio.c"
        HEAP[$234]=$233; //@line 1445 "textio.c"
        var $235=(($230)&4294967295); //@line 1445 "textio.c"
        var $236=HEAP[$235]; //@line 1445 "textio.c"
        var $237=((($236))|0)==0; //@line 1445 "textio.c"
        if ($237) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 1445 "textio.c"
      case 44: // $bb42
        var $238=HEAP[$dec_flags]; //@line 1445 "textio.c"
        var $239=(($238+4)&4294967295); //@line 1445 "textio.c"
        var $240=HEAP[$239]; //@line 1445 "textio.c"
        var $241=(($240+24)&4294967295); //@line 1445 "textio.c"
        var $242=HEAP[$241]; //@line 1445 "textio.c"
        var $243=HEAP[$dec_flags]; //@line 1445 "textio.c"
        FUNCTION_TABLE[$242]($243); //@line 1445 "textio.c"
        __label__ = 45; break; //@line 1445 "textio.c"
      case 45: // $bb43
        var $244=HEAP[$input_chunk]; //@line 1446 "textio.c"
        var $245=($244)!=0; //@line 1446 "textio.c"
        if ($245) { __label__ = 46; break; } else { __label__ = 48; break; } //@line 1446 "textio.c"
      case 46: // $bb44
        var $246=HEAP[$input_chunk]; //@line 1446 "textio.c"
        var $247=(($246)&4294967295); //@line 1446 "textio.c"
        var $248=HEAP[$247]; //@line 1446 "textio.c"
        var $249=((($248) - 1)&4294967295); //@line 1446 "textio.c"
        var $250=HEAP[$input_chunk]; //@line 1446 "textio.c"
        var $251=(($250)&4294967295); //@line 1446 "textio.c"
        HEAP[$251]=$249; //@line 1446 "textio.c"
        var $252=HEAP[$input_chunk]; //@line 1446 "textio.c"
        var $253=(($252)&4294967295); //@line 1446 "textio.c"
        var $254=HEAP[$253]; //@line 1446 "textio.c"
        var $255=((($254))|0)==0; //@line 1446 "textio.c"
        if ($255) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 1446 "textio.c"
      case 47: // $bb45
        var $256=HEAP[$input_chunk]; //@line 1446 "textio.c"
        var $257=(($256+4)&4294967295); //@line 1446 "textio.c"
        var $258=HEAP[$257]; //@line 1446 "textio.c"
        var $259=(($258+24)&4294967295); //@line 1446 "textio.c"
        var $260=HEAP[$259]; //@line 1446 "textio.c"
        var $261=HEAP[$input_chunk]; //@line 1446 "textio.c"
        FUNCTION_TABLE[$260]($261); //@line 1446 "textio.c"
        __label__ = 48; break; //@line 1446 "textio.c"
      case 48: // $bb46
        HEAP[$0]=-1; //@line 1447 "textio.c"
        __label__ = 49; break; //@line 1447 "textio.c"
      case 49: // $bb47
        var $262=HEAP[$0]; //@line 1374 "textio.c"
        HEAP[$retval]=$262; //@line 1374 "textio.c"
        __label__ = 50; break; //@line 1374 "textio.c"
      case 50: // $return
        var $retval48=HEAP[$retval]; //@line 1374 "textio.c"
        STACKTOP = __stackBase__;
        return $retval48; //@line 1374 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_read($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 68; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 68);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $n=__stackBase__+16;
        var $result=__stackBase__+20;
        var $chunks=__stackBase__+24;
        var $r=__stackBase__+28;
        var $_res=__stackBase__+32;
        var $bytes=__stackBase__+36;
        var $decoded=__stackBase__+40;
        var $final=__stackBase__+44;
        var $_py_tmp=__stackBase__+48;
        var $res=__stackBase__+52;
        var $remaining=__stackBase__+56;
        var $_py_tmp59=__stackBase__+60;
        var $_py_tmp64=__stackBase__+64;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$n]=-1; //@line 1453 "textio.c"
        HEAP[$result]=0; //@line 1454 "textio.c"
        HEAP[$chunks]=0; //@line 1454 "textio.c"
        var $1=HEAP[$self_addr]; //@line 1456 "textio.c"
        var $2=(($1+8)&4294967295); //@line 1456 "textio.c"
        var $3=HEAP[$2]; //@line 1456 "textio.c"
        var $4=((($3))|0) <= 0; //@line 1456 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 1456 "textio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 1456 "textio.c"
        var $6=(($5+12)&4294967295); //@line 1456 "textio.c"
        var $7=HEAP[$6]; //@line 1456 "textio.c"
        var $8=((($7))|0)!=0; //@line 1456 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1456 "textio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 1456 "textio.c"
        _PyErr_SetString($9, ((__str57433)&4294967295)); //@line 1456 "textio.c"
        __label__ = 4; break; //@line 1456 "textio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 1456 "textio.c"
        _PyErr_SetString($10, ((__str58434)&4294967295)); //@line 1456 "textio.c"
        __label__ = 4; break; //@line 1456 "textio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 1456 "textio.c"
        __label__ = 73; break; //@line 1456 "textio.c"
      case 5: // $bb4
        var $11=HEAP[$args_addr]; //@line 1458 "textio.c"
        var $12=__PyArg_ParseTuple_SizeT($11, ((__str69445)&4294967295), (FUNCTION_TABLE_OFFSET + 2), $n); //@line 1458 "textio.c"
        var $13=((($12))|0)==0; //@line 1458 "textio.c"
        if ($13) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1458 "textio.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 1459 "textio.c"
        __label__ = 73; break; //@line 1459 "textio.c"
      case 7: // $bb6
        var $14=HEAP[$self_addr]; //@line 1461 "textio.c"
        var $15=$14; //@line 1461 "textio.c"
        var $16=(($15+4)&4294967295); //@line 1461 "textio.c"
        var $17=HEAP[$16]; //@line 1461 "textio.c"
        var $18=($17)==(_PyTextIOWrapper_Type); //@line 1461 "textio.c"
        if ($18) { __label__ = 8; break; } else { __label__ = 19; break; } //@line 1461 "textio.c"
      case 8: // $bb7
        var $19=HEAP[$self_addr]; //@line 1461 "textio.c"
        var $20=(($19+84)&4294967295); //@line 1461 "textio.c"
        var $21=HEAP[$20]; //@line 1461 "textio.c"
        var $22=($21)!=0; //@line 1461 "textio.c"
        if ($22) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1461 "textio.c"
      case 9: // $bb8
        var $23=HEAP[$self_addr]; //@line 1461 "textio.c"
        var $24=(($23+84)&4294967295); //@line 1461 "textio.c"
        var $25=HEAP[$24]; //@line 1461 "textio.c"
        var $26=__PyFileIO_closed($25); //@line 1461 "textio.c"
        HEAP[$r]=$26; //@line 1461 "textio.c"
        __label__ = 16; break; //@line 1461 "textio.c"
      case 10: // $bb9
        var $27=HEAP[$self_addr]; //@line 1461 "textio.c"
        var $28=_textiowrapper_closed_get($27, 0); //@line 1461 "textio.c"
        HEAP[$_res]=$28; //@line 1461 "textio.c"
        var $29=HEAP[$_res]; //@line 1461 "textio.c"
        var $30=($29)==0; //@line 1461 "textio.c"
        if ($30) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1461 "textio.c"
      case 11: // $bb10
        HEAP[$0]=0; //@line 1461 "textio.c"
        __label__ = 73; break; //@line 1461 "textio.c"
      case 12: // $bb11
        var $31=HEAP[$_res]; //@line 1461 "textio.c"
        var $32=_PyObject_IsTrue($31); //@line 1461 "textio.c"
        HEAP[$r]=$32; //@line 1461 "textio.c"
        var $33=HEAP[$_res]; //@line 1461 "textio.c"
        var $34=(($33)&4294967295); //@line 1461 "textio.c"
        var $35=HEAP[$34]; //@line 1461 "textio.c"
        var $36=((($35) - 1)&4294967295); //@line 1461 "textio.c"
        var $37=HEAP[$_res]; //@line 1461 "textio.c"
        var $38=(($37)&4294967295); //@line 1461 "textio.c"
        HEAP[$38]=$36; //@line 1461 "textio.c"
        var $39=HEAP[$_res]; //@line 1461 "textio.c"
        var $40=(($39)&4294967295); //@line 1461 "textio.c"
        var $41=HEAP[$40]; //@line 1461 "textio.c"
        var $42=((($41))|0)==0; //@line 1461 "textio.c"
        if ($42) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1461 "textio.c"
      case 13: // $bb12
        var $43=HEAP[$_res]; //@line 1461 "textio.c"
        var $44=(($43+4)&4294967295); //@line 1461 "textio.c"
        var $45=HEAP[$44]; //@line 1461 "textio.c"
        var $46=(($45+24)&4294967295); //@line 1461 "textio.c"
        var $47=HEAP[$46]; //@line 1461 "textio.c"
        var $48=HEAP[$_res]; //@line 1461 "textio.c"
        FUNCTION_TABLE[$47]($48); //@line 1461 "textio.c"
        __label__ = 14; break; //@line 1461 "textio.c"
      case 14: // $bb13
        var $49=HEAP[$r]; //@line 1461 "textio.c"
        var $50=((($49))|0) < 0; //@line 1461 "textio.c"
        if ($50) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1461 "textio.c"
      case 15: // $bb14
        HEAP[$0]=0; //@line 1461 "textio.c"
        __label__ = 73; break; //@line 1461 "textio.c"
      case 16: // $bb15
        var $51=HEAP[$r]; //@line 1461 "textio.c"
        var $52=((($51))|0) > 0; //@line 1461 "textio.c"
        if ($52) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 1461 "textio.c"
      case 17: // $bb16
        var $53=HEAP[_PyExc_ValueError]; //@line 1461 "textio.c"
        _PyErr_SetString($53, ((__str60436)&4294967295)); //@line 1461 "textio.c"
        HEAP[$0]=0; //@line 1461 "textio.c"
        __label__ = 73; break; //@line 1461 "textio.c"
      case 18: // $bb17
        __label__ = 21; break; //@line 1461 "textio.c"
      case 19: // $bb18
        var $54=HEAP[$self_addr]; //@line 1461 "textio.c"
        var $55=$54; //@line 1461 "textio.c"
        var $56=__PyIOBase_check_closed($55, __Py_TrueStruct); //@line 1461 "textio.c"
        var $57=($56)==0; //@line 1461 "textio.c"
        if ($57) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1461 "textio.c"
      case 20: // $bb19
        HEAP[$0]=0; //@line 1461 "textio.c"
        __label__ = 73; break; //@line 1461 "textio.c"
      case 21: // $bb20
        var $58=HEAP[$self_addr]; //@line 1463 "textio.c"
        var $59=(($58+32)&4294967295); //@line 1463 "textio.c"
        var $60=HEAP[$59]; //@line 1463 "textio.c"
        var $61=($60)==0; //@line 1463 "textio.c"
        if ($61) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 1463 "textio.c"
      case 22: // $bb21
        var $62=HEAP[_PyExc_IOError]; //@line 1464 "textio.c"
        _PyErr_SetString($62, ((__str64440)&4294967295)); //@line 1464 "textio.c"
        HEAP[$0]=0; //@line 1465 "textio.c"
        __label__ = 73; break; //@line 1465 "textio.c"
      case 23: // $bb22
        var $63=HEAP[$self_addr]; //@line 1468 "textio.c"
        var $64=__textiowrapper_writeflush($63); //@line 1468 "textio.c"
        var $65=((($64))|0) < 0; //@line 1468 "textio.c"
        if ($65) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 1468 "textio.c"
      case 24: // $bb23
        HEAP[$0]=0; //@line 1469 "textio.c"
        __label__ = 73; break; //@line 1469 "textio.c"
      case 25: // $bb24
        var $66=HEAP[$n]; //@line 1471 "textio.c"
        var $67=((($66))|0) < 0; //@line 1471 "textio.c"
        if ($67) { __label__ = 26; break; } else { __label__ = 43; break; } //@line 1471 "textio.c"
      case 26: // $bb25
        var $68=HEAP[$self_addr]; //@line 1473 "textio.c"
        var $69=(($68+20)&4294967295); //@line 1473 "textio.c"
        var $70=HEAP[$69]; //@line 1473 "textio.c"
        var $71=__PyObject_CallMethod_SizeT($70, ((__str1375)&4294967295), 0); //@line 1473 "textio.c"
        HEAP[$bytes]=$71; //@line 1473 "textio.c"
        var $72=HEAP[$bytes]; //@line 1475 "textio.c"
        var $73=($72)==0; //@line 1475 "textio.c"
        if ($73) { __label__ = 66; break; } else { __label__ = 27; break; } //@line 1475 "textio.c"
      case 27: // $bb26
        var $74=HEAP[__PyIO_str_decode]; //@line 1477 "textio.c"
        var $75=HEAP[$self_addr]; //@line 1477 "textio.c"
        var $76=(($75+32)&4294967295); //@line 1477 "textio.c"
        var $77=HEAP[$76]; //@line 1477 "textio.c"
        var $78=HEAP[$bytes]; //@line 1477 "textio.c"
        var $79=_PyObject_CallMethodObjArgs($77, $74, $78, __Py_TrueStruct, 0); //@line 1477 "textio.c"
        HEAP[$decoded]=$79; //@line 1477 "textio.c"
        var $80=HEAP[$bytes]; //@line 1479 "textio.c"
        var $81=(($80)&4294967295); //@line 1479 "textio.c"
        var $82=HEAP[$81]; //@line 1479 "textio.c"
        var $83=((($82) - 1)&4294967295); //@line 1479 "textio.c"
        var $84=HEAP[$bytes]; //@line 1479 "textio.c"
        var $85=(($84)&4294967295); //@line 1479 "textio.c"
        HEAP[$85]=$83; //@line 1479 "textio.c"
        var $86=HEAP[$bytes]; //@line 1479 "textio.c"
        var $87=(($86)&4294967295); //@line 1479 "textio.c"
        var $88=HEAP[$87]; //@line 1479 "textio.c"
        var $89=((($88))|0)==0; //@line 1479 "textio.c"
        if ($89) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 1479 "textio.c"
      case 28: // $bb27
        var $90=HEAP[$bytes]; //@line 1479 "textio.c"
        var $91=(($90+4)&4294967295); //@line 1479 "textio.c"
        var $92=HEAP[$91]; //@line 1479 "textio.c"
        var $93=(($92+24)&4294967295); //@line 1479 "textio.c"
        var $94=HEAP[$93]; //@line 1479 "textio.c"
        var $95=HEAP[$bytes]; //@line 1479 "textio.c"
        FUNCTION_TABLE[$94]($95); //@line 1479 "textio.c"
        __label__ = 29; break; //@line 1479 "textio.c"
      case 29: // $bb28
        var $96=HEAP[$decoded]; //@line 1480 "textio.c"
        var $97=($96)==0; //@line 1480 "textio.c"
        if ($97) { __label__ = 66; break; } else { __label__ = 30; break; } //@line 1480 "textio.c"
      case 30: // $bb29
        var $98=HEAP[$self_addr]; //@line 1483 "textio.c"
        var $99=_textiowrapper_get_decoded_chars($98, -1); //@line 1483 "textio.c"
        HEAP[$result]=$99; //@line 1483 "textio.c"
        var $100=HEAP[$result]; //@line 1485 "textio.c"
        var $101=($100)==0; //@line 1485 "textio.c"
        if ($101) { __label__ = 31; break; } else { __label__ = 34; break; } //@line 1485 "textio.c"
      case 31: // $bb30
        var $102=HEAP[$decoded]; //@line 1486 "textio.c"
        var $103=(($102)&4294967295); //@line 1486 "textio.c"
        var $104=HEAP[$103]; //@line 1486 "textio.c"
        var $105=((($104) - 1)&4294967295); //@line 1486 "textio.c"
        var $106=HEAP[$decoded]; //@line 1486 "textio.c"
        var $107=(($106)&4294967295); //@line 1486 "textio.c"
        HEAP[$107]=$105; //@line 1486 "textio.c"
        var $108=HEAP[$decoded]; //@line 1486 "textio.c"
        var $109=(($108)&4294967295); //@line 1486 "textio.c"
        var $110=HEAP[$109]; //@line 1486 "textio.c"
        var $111=((($110))|0)==0; //@line 1486 "textio.c"
        if ($111) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 1486 "textio.c"
      case 32: // $bb31
        var $112=HEAP[$decoded]; //@line 1486 "textio.c"
        var $113=(($112+4)&4294967295); //@line 1486 "textio.c"
        var $114=HEAP[$113]; //@line 1486 "textio.c"
        var $115=(($114+24)&4294967295); //@line 1486 "textio.c"
        var $116=HEAP[$115]; //@line 1486 "textio.c"
        var $117=HEAP[$decoded]; //@line 1486 "textio.c"
        FUNCTION_TABLE[$116]($117); //@line 1486 "textio.c"
        __label__ = 33; break; //@line 1486 "textio.c"
      case 33: // $bb32
        HEAP[$0]=0; //@line 1487 "textio.c"
        __label__ = 73; break; //@line 1487 "textio.c"
      case 34: // $bb33
        var $118=HEAP[$result]; //@line 1490 "textio.c"
        var $119=HEAP[$decoded]; //@line 1490 "textio.c"
        var $120=_PyUnicodeUCS2_Concat($118, $119); //@line 1490 "textio.c"
        HEAP[$final]=$120; //@line 1490 "textio.c"
        var $121=HEAP[$result]; //@line 1491 "textio.c"
        var $122=(($121)&4294967295); //@line 1491 "textio.c"
        var $123=HEAP[$122]; //@line 1491 "textio.c"
        var $124=((($123) - 1)&4294967295); //@line 1491 "textio.c"
        var $125=HEAP[$result]; //@line 1491 "textio.c"
        var $126=(($125)&4294967295); //@line 1491 "textio.c"
        HEAP[$126]=$124; //@line 1491 "textio.c"
        var $127=HEAP[$result]; //@line 1491 "textio.c"
        var $128=(($127)&4294967295); //@line 1491 "textio.c"
        var $129=HEAP[$128]; //@line 1491 "textio.c"
        var $130=((($129))|0)==0; //@line 1491 "textio.c"
        if ($130) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 1491 "textio.c"
      case 35: // $bb34
        var $131=HEAP[$result]; //@line 1491 "textio.c"
        var $132=(($131+4)&4294967295); //@line 1491 "textio.c"
        var $133=HEAP[$132]; //@line 1491 "textio.c"
        var $134=(($133+24)&4294967295); //@line 1491 "textio.c"
        var $135=HEAP[$134]; //@line 1491 "textio.c"
        var $136=HEAP[$result]; //@line 1491 "textio.c"
        FUNCTION_TABLE[$135]($136); //@line 1491 "textio.c"
        __label__ = 36; break; //@line 1491 "textio.c"
      case 36: // $bb35
        var $137=HEAP[$decoded]; //@line 1492 "textio.c"
        var $138=(($137)&4294967295); //@line 1492 "textio.c"
        var $139=HEAP[$138]; //@line 1492 "textio.c"
        var $140=((($139) - 1)&4294967295); //@line 1492 "textio.c"
        var $141=HEAP[$decoded]; //@line 1492 "textio.c"
        var $142=(($141)&4294967295); //@line 1492 "textio.c"
        HEAP[$142]=$140; //@line 1492 "textio.c"
        var $143=HEAP[$decoded]; //@line 1492 "textio.c"
        var $144=(($143)&4294967295); //@line 1492 "textio.c"
        var $145=HEAP[$144]; //@line 1492 "textio.c"
        var $146=((($145))|0)==0; //@line 1492 "textio.c"
        if ($146) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 1492 "textio.c"
      case 37: // $bb36
        var $147=HEAP[$decoded]; //@line 1492 "textio.c"
        var $148=(($147+4)&4294967295); //@line 1492 "textio.c"
        var $149=HEAP[$148]; //@line 1492 "textio.c"
        var $150=(($149+24)&4294967295); //@line 1492 "textio.c"
        var $151=HEAP[$150]; //@line 1492 "textio.c"
        var $152=HEAP[$decoded]; //@line 1492 "textio.c"
        FUNCTION_TABLE[$151]($152); //@line 1492 "textio.c"
        __label__ = 38; break; //@line 1492 "textio.c"
      case 38: // $bb37
        var $153=HEAP[$final]; //@line 1493 "textio.c"
        var $154=($153)==0; //@line 1493 "textio.c"
        if ($154) { __label__ = 66; break; } else { __label__ = 39; break; } //@line 1493 "textio.c"
      case 39: // $bb38
        var $155=HEAP[$self_addr]; //@line 1496 "textio.c"
        var $156=(($155+80)&4294967295); //@line 1496 "textio.c"
        var $157=HEAP[$156]; //@line 1496 "textio.c"
        var $158=($157)!=0; //@line 1496 "textio.c"
        if ($158) { __label__ = 40; break; } else { __label__ = 42; break; } //@line 1496 "textio.c"
      case 40: // $bb39
        var $159=HEAP[$self_addr]; //@line 1496 "textio.c"
        var $160=(($159+80)&4294967295); //@line 1496 "textio.c"
        var $161=HEAP[$160]; //@line 1496 "textio.c"
        HEAP[$_py_tmp]=$161; //@line 1496 "textio.c"
        var $162=HEAP[$self_addr]; //@line 1496 "textio.c"
        var $163=(($162+80)&4294967295); //@line 1496 "textio.c"
        HEAP[$163]=0; //@line 1496 "textio.c"
        var $164=HEAP[$_py_tmp]; //@line 1496 "textio.c"
        var $165=(($164)&4294967295); //@line 1496 "textio.c"
        var $166=HEAP[$165]; //@line 1496 "textio.c"
        var $167=((($166) - 1)&4294967295); //@line 1496 "textio.c"
        var $168=HEAP[$_py_tmp]; //@line 1496 "textio.c"
        var $169=(($168)&4294967295); //@line 1496 "textio.c"
        HEAP[$169]=$167; //@line 1496 "textio.c"
        var $170=HEAP[$_py_tmp]; //@line 1496 "textio.c"
        var $171=(($170)&4294967295); //@line 1496 "textio.c"
        var $172=HEAP[$171]; //@line 1496 "textio.c"
        var $173=((($172))|0)==0; //@line 1496 "textio.c"
        if ($173) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 1496 "textio.c"
      case 41: // $bb40
        var $174=HEAP[$_py_tmp]; //@line 1496 "textio.c"
        var $175=(($174+4)&4294967295); //@line 1496 "textio.c"
        var $176=HEAP[$175]; //@line 1496 "textio.c"
        var $177=(($176+24)&4294967295); //@line 1496 "textio.c"
        var $178=HEAP[$177]; //@line 1496 "textio.c"
        var $179=HEAP[$_py_tmp]; //@line 1496 "textio.c"
        FUNCTION_TABLE[$178]($179); //@line 1496 "textio.c"
        __label__ = 42; break; //@line 1496 "textio.c"
      case 42: // $bb41
        var $180=HEAP[$final]; //@line 1497 "textio.c"
        HEAP[$0]=$180; //@line 1497 "textio.c"
        __label__ = 73; break; //@line 1497 "textio.c"
      case 43: // $bb42
        HEAP[$res]=1; //@line 1500 "textio.c"
        var $181=HEAP[$n]; //@line 1501 "textio.c"
        HEAP[$remaining]=$181; //@line 1501 "textio.c"
        var $182=HEAP[$n]; //@line 1503 "textio.c"
        var $183=HEAP[$self_addr]; //@line 1503 "textio.c"
        var $184=_textiowrapper_get_decoded_chars($183, $182); //@line 1503 "textio.c"
        HEAP[$result]=$184; //@line 1503 "textio.c"
        var $185=HEAP[$result]; //@line 1504 "textio.c"
        var $186=($185)==0; //@line 1504 "textio.c"
        if ($186) { __label__ = 66; break; } else { __label__ = 44; break; } //@line 1504 "textio.c"
      case 44: // $bb43
        var $187=HEAP[$result]; //@line 1506 "textio.c"
        var $188=$187; //@line 1506 "textio.c"
        var $189=(($188+8)&4294967295); //@line 1506 "textio.c"
        var $190=HEAP[$189]; //@line 1506 "textio.c"
        var $191=HEAP[$remaining]; //@line 1506 "textio.c"
        var $192=((($191) - ($190))&4294967295); //@line 1506 "textio.c"
        HEAP[$remaining]=$192; //@line 1506 "textio.c"
        __label__ = 54; break; //@line 1506 "textio.c"
      case 45: // $bb44
        var $193=HEAP[$self_addr]; //@line 1510 "textio.c"
        var $194=_textiowrapper_read_chunk($193); //@line 1510 "textio.c"
        HEAP[$res]=$194; //@line 1510 "textio.c"
        var $195=HEAP[$res]; //@line 1511 "textio.c"
        var $196=((($195))|0) < 0; //@line 1511 "textio.c"
        if ($196) { __label__ = 66; break; } else { __label__ = 46; break; } //@line 1511 "textio.c"
      case 46: // $bb45
        var $197=HEAP[$res]; //@line 1513 "textio.c"
        var $198=((($197))|0)==0; //@line 1513 "textio.c"
        if ($198) { __label__ = 55; break; } else { __label__ = 47; break; } //@line 1513 "textio.c"
      case 47: // $bb46
        var $199=HEAP[$chunks]; //@line 1515 "textio.c"
        var $200=($199)==0; //@line 1515 "textio.c"
        if ($200) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 1515 "textio.c"
      case 48: // $bb47
        var $201=_PyList_New(0); //@line 1516 "textio.c"
        HEAP[$chunks]=$201; //@line 1516 "textio.c"
        var $202=HEAP[$chunks]; //@line 1517 "textio.c"
        var $203=($202)==0; //@line 1517 "textio.c"
        if ($203) { __label__ = 66; break; } else { __label__ = 49; break; } //@line 1517 "textio.c"
      case 49: // $bb48
        var $204=HEAP[$chunks]; //@line 1520 "textio.c"
        var $205=HEAP[$result]; //@line 1520 "textio.c"
        var $206=_PyList_Append($204, $205); //@line 1520 "textio.c"
        var $207=((($206))|0) < 0; //@line 1520 "textio.c"
        if ($207) { __label__ = 66; break; } else { __label__ = 50; break; } //@line 1520 "textio.c"
      case 50: // $bb49
        var $208=HEAP[$result]; //@line 1522 "textio.c"
        var $209=(($208)&4294967295); //@line 1522 "textio.c"
        var $210=HEAP[$209]; //@line 1522 "textio.c"
        var $211=((($210) - 1)&4294967295); //@line 1522 "textio.c"
        var $212=HEAP[$result]; //@line 1522 "textio.c"
        var $213=(($212)&4294967295); //@line 1522 "textio.c"
        HEAP[$213]=$211; //@line 1522 "textio.c"
        var $214=HEAP[$result]; //@line 1522 "textio.c"
        var $215=(($214)&4294967295); //@line 1522 "textio.c"
        var $216=HEAP[$215]; //@line 1522 "textio.c"
        var $217=((($216))|0)==0; //@line 1522 "textio.c"
        if ($217) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 1522 "textio.c"
      case 51: // $bb50
        var $218=HEAP[$result]; //@line 1522 "textio.c"
        var $219=(($218+4)&4294967295); //@line 1522 "textio.c"
        var $220=HEAP[$219]; //@line 1522 "textio.c"
        var $221=(($220+24)&4294967295); //@line 1522 "textio.c"
        var $222=HEAP[$221]; //@line 1522 "textio.c"
        var $223=HEAP[$result]; //@line 1522 "textio.c"
        FUNCTION_TABLE[$222]($223); //@line 1522 "textio.c"
        __label__ = 52; break; //@line 1522 "textio.c"
      case 52: // $bb51
        var $224=HEAP[$self_addr]; //@line 1523 "textio.c"
        var $225=HEAP[$remaining]; //@line 1523 "textio.c"
        var $226=_textiowrapper_get_decoded_chars($224, $225); //@line 1523 "textio.c"
        HEAP[$result]=$226; //@line 1523 "textio.c"
        var $227=HEAP[$result]; //@line 1524 "textio.c"
        var $228=($227)==0; //@line 1524 "textio.c"
        if ($228) { __label__ = 66; break; } else { __label__ = 53; break; } //@line 1524 "textio.c"
      case 53: // $bb52
        var $229=HEAP[$result]; //@line 1526 "textio.c"
        var $230=$229; //@line 1526 "textio.c"
        var $231=(($230+8)&4294967295); //@line 1526 "textio.c"
        var $232=HEAP[$231]; //@line 1526 "textio.c"
        var $233=HEAP[$remaining]; //@line 1526 "textio.c"
        var $234=((($233) - ($232))&4294967295); //@line 1526 "textio.c"
        HEAP[$remaining]=$234; //@line 1526 "textio.c"
        __label__ = 54; break; //@line 1526 "textio.c"
      case 54: // $bb53
        var $235=HEAP[$remaining]; //@line 1509 "textio.c"
        var $236=((($235))|0) > 0; //@line 1509 "textio.c"
        if ($236) { __label__ = 45; break; } else { __label__ = 55; break; } //@line 1509 "textio.c"
      case 55: // $bb54
        var $237=HEAP[$chunks]; //@line 1528 "textio.c"
        var $238=($237)!=0; //@line 1528 "textio.c"
        if ($238) { __label__ = 56; break; } else { __label__ = 65; break; } //@line 1528 "textio.c"
      case 56: // $bb55
        var $239=HEAP[$result]; //@line 1529 "textio.c"
        var $240=($239)!=0; //@line 1529 "textio.c"
        if ($240) { __label__ = 57; break; } else { __label__ = 58; break; } //@line 1529 "textio.c"
      case 57: // $bb56
        var $241=HEAP[$chunks]; //@line 1529 "textio.c"
        var $242=HEAP[$result]; //@line 1529 "textio.c"
        var $243=_PyList_Append($241, $242); //@line 1529 "textio.c"
        var $244=((($243))|0) < 0; //@line 1529 "textio.c"
        if ($244) { __label__ = 66; break; } else { __label__ = 58; break; } //@line 1529 "textio.c"
      case 58: // $bb57
        var $245=HEAP[$result]; //@line 1531 "textio.c"
        var $246=($245)!=0; //@line 1531 "textio.c"
        if ($246) { __label__ = 59; break; } else { __label__ = 61; break; } //@line 1531 "textio.c"
      case 59: // $bb58
        var $247=HEAP[$result]; //@line 1531 "textio.c"
        HEAP[$_py_tmp59]=$247; //@line 1531 "textio.c"
        HEAP[$result]=0; //@line 1531 "textio.c"
        var $248=HEAP[$_py_tmp59]; //@line 1531 "textio.c"
        var $249=(($248)&4294967295); //@line 1531 "textio.c"
        var $250=HEAP[$249]; //@line 1531 "textio.c"
        var $251=((($250) - 1)&4294967295); //@line 1531 "textio.c"
        var $252=HEAP[$_py_tmp59]; //@line 1531 "textio.c"
        var $253=(($252)&4294967295); //@line 1531 "textio.c"
        HEAP[$253]=$251; //@line 1531 "textio.c"
        var $254=HEAP[$_py_tmp59]; //@line 1531 "textio.c"
        var $255=(($254)&4294967295); //@line 1531 "textio.c"
        var $256=HEAP[$255]; //@line 1531 "textio.c"
        var $257=((($256))|0)==0; //@line 1531 "textio.c"
        if ($257) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 1531 "textio.c"
      case 60: // $bb60
        var $258=HEAP[$_py_tmp59]; //@line 1531 "textio.c"
        var $259=(($258+4)&4294967295); //@line 1531 "textio.c"
        var $260=HEAP[$259]; //@line 1531 "textio.c"
        var $261=(($260+24)&4294967295); //@line 1531 "textio.c"
        var $262=HEAP[$261]; //@line 1531 "textio.c"
        var $263=HEAP[$_py_tmp59]; //@line 1531 "textio.c"
        FUNCTION_TABLE[$262]($263); //@line 1531 "textio.c"
        __label__ = 61; break; //@line 1531 "textio.c"
      case 61: // $bb61
        var $264=HEAP[__PyIO_empty_str]; //@line 1532 "textio.c"
        var $265=HEAP[$chunks]; //@line 1532 "textio.c"
        var $266=_PyUnicodeUCS2_Join($264, $265); //@line 1532 "textio.c"
        HEAP[$result]=$266; //@line 1532 "textio.c"
        var $267=HEAP[$result]; //@line 1533 "textio.c"
        var $268=($267)==0; //@line 1533 "textio.c"
        if ($268) { __label__ = 66; break; } else { __label__ = 62; break; } //@line 1533 "textio.c"
      case 62: // $bb62
        var $269=HEAP[$chunks]; //@line 1535 "textio.c"
        var $270=($269)!=0; //@line 1535 "textio.c"
        if ($270) { __label__ = 63; break; } else { __label__ = 65; break; } //@line 1535 "textio.c"
      case 63: // $bb63
        var $271=HEAP[$chunks]; //@line 1535 "textio.c"
        HEAP[$_py_tmp64]=$271; //@line 1535 "textio.c"
        HEAP[$chunks]=0; //@line 1535 "textio.c"
        var $272=HEAP[$_py_tmp64]; //@line 1535 "textio.c"
        var $273=(($272)&4294967295); //@line 1535 "textio.c"
        var $274=HEAP[$273]; //@line 1535 "textio.c"
        var $275=((($274) - 1)&4294967295); //@line 1535 "textio.c"
        var $276=HEAP[$_py_tmp64]; //@line 1535 "textio.c"
        var $277=(($276)&4294967295); //@line 1535 "textio.c"
        HEAP[$277]=$275; //@line 1535 "textio.c"
        var $278=HEAP[$_py_tmp64]; //@line 1535 "textio.c"
        var $279=(($278)&4294967295); //@line 1535 "textio.c"
        var $280=HEAP[$279]; //@line 1535 "textio.c"
        var $281=((($280))|0)==0; //@line 1535 "textio.c"
        if ($281) { __label__ = 64; break; } else { __label__ = 65; break; } //@line 1535 "textio.c"
      case 64: // $bb65
        var $282=HEAP[$_py_tmp64]; //@line 1535 "textio.c"
        var $283=(($282+4)&4294967295); //@line 1535 "textio.c"
        var $284=HEAP[$283]; //@line 1535 "textio.c"
        var $285=(($284+24)&4294967295); //@line 1535 "textio.c"
        var $286=HEAP[$285]; //@line 1535 "textio.c"
        var $287=HEAP[$_py_tmp64]; //@line 1535 "textio.c"
        FUNCTION_TABLE[$286]($287); //@line 1535 "textio.c"
        __label__ = 65; break; //@line 1535 "textio.c"
      case 65: // $bb66
        var $288=HEAP[$result]; //@line 1537 "textio.c"
        HEAP[$0]=$288; //@line 1537 "textio.c"
        __label__ = 73; break; //@line 1537 "textio.c"
      case 66: // $fail
        var $289=HEAP[$result]; //@line 1540 "textio.c"
        var $290=($289)!=0; //@line 1540 "textio.c"
        if ($290) { __label__ = 67; break; } else { __label__ = 69; break; } //@line 1540 "textio.c"
      case 67: // $bb67
        var $291=HEAP[$result]; //@line 1540 "textio.c"
        var $292=(($291)&4294967295); //@line 1540 "textio.c"
        var $293=HEAP[$292]; //@line 1540 "textio.c"
        var $294=((($293) - 1)&4294967295); //@line 1540 "textio.c"
        var $295=HEAP[$result]; //@line 1540 "textio.c"
        var $296=(($295)&4294967295); //@line 1540 "textio.c"
        HEAP[$296]=$294; //@line 1540 "textio.c"
        var $297=HEAP[$result]; //@line 1540 "textio.c"
        var $298=(($297)&4294967295); //@line 1540 "textio.c"
        var $299=HEAP[$298]; //@line 1540 "textio.c"
        var $300=((($299))|0)==0; //@line 1540 "textio.c"
        if ($300) { __label__ = 68; break; } else { __label__ = 69; break; } //@line 1540 "textio.c"
      case 68: // $bb68
        var $301=HEAP[$result]; //@line 1540 "textio.c"
        var $302=(($301+4)&4294967295); //@line 1540 "textio.c"
        var $303=HEAP[$302]; //@line 1540 "textio.c"
        var $304=(($303+24)&4294967295); //@line 1540 "textio.c"
        var $305=HEAP[$304]; //@line 1540 "textio.c"
        var $306=HEAP[$result]; //@line 1540 "textio.c"
        FUNCTION_TABLE[$305]($306); //@line 1540 "textio.c"
        __label__ = 69; break; //@line 1540 "textio.c"
      case 69: // $bb69
        var $307=HEAP[$chunks]; //@line 1541 "textio.c"
        var $308=($307)!=0; //@line 1541 "textio.c"
        if ($308) { __label__ = 70; break; } else { __label__ = 72; break; } //@line 1541 "textio.c"
      case 70: // $bb70
        var $309=HEAP[$chunks]; //@line 1541 "textio.c"
        var $310=(($309)&4294967295); //@line 1541 "textio.c"
        var $311=HEAP[$310]; //@line 1541 "textio.c"
        var $312=((($311) - 1)&4294967295); //@line 1541 "textio.c"
        var $313=HEAP[$chunks]; //@line 1541 "textio.c"
        var $314=(($313)&4294967295); //@line 1541 "textio.c"
        HEAP[$314]=$312; //@line 1541 "textio.c"
        var $315=HEAP[$chunks]; //@line 1541 "textio.c"
        var $316=(($315)&4294967295); //@line 1541 "textio.c"
        var $317=HEAP[$316]; //@line 1541 "textio.c"
        var $318=((($317))|0)==0; //@line 1541 "textio.c"
        if ($318) { __label__ = 71; break; } else { __label__ = 72; break; } //@line 1541 "textio.c"
      case 71: // $bb71
        var $319=HEAP[$chunks]; //@line 1541 "textio.c"
        var $320=(($319+4)&4294967295); //@line 1541 "textio.c"
        var $321=HEAP[$320]; //@line 1541 "textio.c"
        var $322=(($321+24)&4294967295); //@line 1541 "textio.c"
        var $323=HEAP[$322]; //@line 1541 "textio.c"
        var $324=HEAP[$chunks]; //@line 1541 "textio.c"
        FUNCTION_TABLE[$323]($324); //@line 1541 "textio.c"
        __label__ = 72; break; //@line 1541 "textio.c"
      case 72: // $bb72
        HEAP[$0]=0; //@line 1542 "textio.c"
        __label__ = 73; break; //@line 1542 "textio.c"
      case 73: // $bb73
        var $325=HEAP[$0]; //@line 1456 "textio.c"
        HEAP[$retval]=$325; //@line 1456 "textio.c"
        __label__ = 74; break; //@line 1456 "textio.c"
      case 74: // $return
        var $retval74=HEAP[$retval]; //@line 1456 "textio.c"
        STACKTOP = __stackBase__;
        return $retval74; //@line 1456 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _find_control_char($start, $end, $ch) {
    var __stackBase__  = STACKTOP; STACKTOP += 22; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 22);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $start_addr=__stackBase__;
        var $end_addr=__stackBase__+4;
        var $ch_addr=__stackBase__+8;
        var $retval=__stackBase__+10;
        var $0=__stackBase__+14;
        var $s=__stackBase__+18;
        var $_alloca_point_=0;
        HEAP[$start_addr]=$start;
        HEAP[$end_addr]=$end;
        HEAP[$ch_addr]=$ch;
        var $1=HEAP[$start_addr]; //@line 1552 "textio.c"
        HEAP[$s]=$1; //@line 1552 "textio.c"
        __label__ = 1; break; //@line 1552 "textio.c"
      case 1: // $bb
        __label__ = 3; break; //@line 1552 "textio.c"
      case 2: // $bb1
        var $2=HEAP[$s]; //@line 1555 "textio.c"
        var $3=(($2+2)&4294967295); //@line 1555 "textio.c"
        HEAP[$s]=$3; //@line 1555 "textio.c"
        __label__ = 3; break; //@line 1555 "textio.c"
      case 3: // $bb2
        var $4=HEAP[$s]; //@line 1554 "textio.c"
        var $5=HEAP[$4]; //@line 1554 "textio.c"
        var $6=HEAP[$ch_addr]; //@line 1554 "textio.c"
        var $7=unSign(($5), 16, 0) > unSign(($6), 16, 0); //@line 1554 "textio.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 1554 "textio.c"
      case 4: // $bb3
        var $8=HEAP[$s]; //@line 1556 "textio.c"
        var $9=HEAP[$8]; //@line 1556 "textio.c"
        var $10=HEAP[$ch_addr]; //@line 1556 "textio.c"
        var $11=reSign(($9), 16, 0)==reSign(($10), 16, 0); //@line 1556 "textio.c"
        if ($11) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1556 "textio.c"
      case 5: // $bb4
        var $12=HEAP[$s]; //@line 1557 "textio.c"
        HEAP[$0]=$12; //@line 1557 "textio.c"
        __label__ = 9; break; //@line 1557 "textio.c"
      case 6: // $bb5
        var $13=HEAP[$s]; //@line 1558 "textio.c"
        var $14=HEAP[$end_addr]; //@line 1558 "textio.c"
        var $15=($13)==($14); //@line 1558 "textio.c"
        if ($15) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1558 "textio.c"
      case 7: // $bb6
        HEAP[$0]=0; //@line 1559 "textio.c"
        __label__ = 9; break; //@line 1559 "textio.c"
      case 8: // $bb7
        var $16=HEAP[$s]; //@line 1560 "textio.c"
        var $17=(($16+2)&4294967295); //@line 1560 "textio.c"
        HEAP[$s]=$17; //@line 1560 "textio.c"
        __label__ = 1; break; //@line 1560 "textio.c"
      case 9: // $bb8
        var $18=HEAP[$0]; //@line 1557 "textio.c"
        HEAP[$retval]=$18; //@line 1557 "textio.c"
        __label__ = 10; break; //@line 1557 "textio.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 1557 "textio.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 1557 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __PyIO_find_line_ending($translated, $universal, $readnl, $start, $end, $consumed) {
    var __stackBase__  = STACKTOP; STACKTOP += 78; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 78);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $translated_addr=__stackBase__;
        var $universal_addr=__stackBase__+4;
        var $readnl_addr=__stackBase__+8;
        var $start_addr=__stackBase__+12;
        var $end_addr=__stackBase__+16;
        var $consumed_addr=__stackBase__+20;
        var $retval=__stackBase__+24;
        var $0=__stackBase__+28;
        var $len=__stackBase__+32;
        var $pos=__stackBase__+36;
        var $s=__stackBase__+40;
        var $ch=__stackBase__+44;
        var $readnl_len=__stackBase__+46;
        var $nl=__stackBase__+50;
        var $pos19=__stackBase__+54;
        var $s23=__stackBase__+58;
        var $e=__stackBase__+62;
        var $pos24=__stackBase__+66;
        var $i=__stackBase__+70;
        var $pos28=__stackBase__+74;
        var $_alloca_point_=0;
        HEAP[$translated_addr]=$translated;
        HEAP[$universal_addr]=$universal;
        HEAP[$readnl_addr]=$readnl;
        HEAP[$start_addr]=$start;
        HEAP[$end_addr]=$end;
        HEAP[$consumed_addr]=$consumed;
        var $1=HEAP[$end_addr]; //@line 1569 "textio.c"
        var $2=($1); //@line 1569 "textio.c"
        var $3=HEAP[$start_addr]; //@line 1569 "textio.c"
        var $4=($3); //@line 1569 "textio.c"
        var $5=((($2) - ($4))&4294967295); //@line 1569 "textio.c"
        var $6=((((($5))|0)/2)|0); //@line 1569 "textio.c"
        HEAP[$len]=$6; //@line 1569 "textio.c"
        var $7=HEAP[$translated_addr]; //@line 1571 "textio.c"
        var $8=((($7))|0)!=0; //@line 1571 "textio.c"
        if ($8) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 1571 "textio.c"
      case 1: // $bb
        var $9=HEAP[$start_addr]; //@line 1573 "textio.c"
        var $10=HEAP[$end_addr]; //@line 1573 "textio.c"
        var $11=_find_control_char($9, $10, 10); //@line 1573 "textio.c"
        HEAP[$pos]=$11; //@line 1573 "textio.c"
        var $12=HEAP[$pos]; //@line 1574 "textio.c"
        var $13=($12)!=0; //@line 1574 "textio.c"
        if ($13) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1574 "textio.c"
      case 2: // $bb1
        var $14=HEAP[$pos]; //@line 1575 "textio.c"
        var $15=($14); //@line 1575 "textio.c"
        var $16=HEAP[$start_addr]; //@line 1575 "textio.c"
        var $17=($16); //@line 1575 "textio.c"
        var $18=((($15) - ($17))&4294967295); //@line 1575 "textio.c"
        var $19=((((($18))|0)/2)|0); //@line 1575 "textio.c"
        var $20=((($19) + 1)&4294967295); //@line 1575 "textio.c"
        HEAP[$0]=$20; //@line 1575 "textio.c"
        __label__ = 39; break; //@line 1575 "textio.c"
      case 3: // $bb2
        var $21=HEAP[$consumed_addr]; //@line 1577 "textio.c"
        var $22=HEAP[$len]; //@line 1577 "textio.c"
        HEAP[$21]=$22; //@line 1577 "textio.c"
        HEAP[$0]=-1; //@line 1578 "textio.c"
        __label__ = 39; break; //@line 1578 "textio.c"
      case 4: // $bb3
        var $23=HEAP[$universal_addr]; //@line 1581 "textio.c"
        var $24=((($23))|0)!=0; //@line 1581 "textio.c"
        if ($24) { __label__ = 5; break; } else { __label__ = 18; break; } //@line 1581 "textio.c"
      case 5: // $bb4
        var $25=HEAP[$start_addr]; //@line 1585 "textio.c"
        HEAP[$s]=$25; //@line 1585 "textio.c"
        __label__ = 6; break; //@line 1585 "textio.c"
      case 6: // $bb5
        __label__ = 8; break; //@line 1585 "textio.c"
      case 7: // $bb6
        var $26=HEAP[$s]; //@line 1591 "textio.c"
        var $27=(($26+2)&4294967295); //@line 1591 "textio.c"
        HEAP[$s]=$27; //@line 1591 "textio.c"
        __label__ = 8; break; //@line 1591 "textio.c"
      case 8: // $bb7
        var $28=HEAP[$s]; //@line 1590 "textio.c"
        var $29=HEAP[$28]; //@line 1590 "textio.c"
        var $30=unSign(($29), 16, 0) > 13; //@line 1590 "textio.c"
        if ($30) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 1590 "textio.c"
      case 9: // $bb8
        var $31=HEAP[$s]; //@line 1592 "textio.c"
        var $32=HEAP[$end_addr]; //@line 1592 "textio.c"
        var $33=($31) >= ($32); //@line 1592 "textio.c"
        if ($33) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1592 "textio.c"
      case 10: // $bb9
        var $34=HEAP[$consumed_addr]; //@line 1593 "textio.c"
        var $35=HEAP[$len]; //@line 1593 "textio.c"
        HEAP[$34]=$35; //@line 1593 "textio.c"
        HEAP[$0]=-1; //@line 1594 "textio.c"
        __label__ = 39; break; //@line 1594 "textio.c"
      case 11: // $bb10
        var $36=HEAP[$s]; //@line 1596 "textio.c"
        var $37=HEAP[$36]; //@line 1596 "textio.c"
        HEAP[$ch]=$37; //@line 1596 "textio.c"
        var $38=HEAP[$s]; //@line 1596 "textio.c"
        var $39=(($38+2)&4294967295); //@line 1596 "textio.c"
        HEAP[$s]=$39; //@line 1596 "textio.c"
        var $40=HEAP[$ch]; //@line 1597 "textio.c"
        var $41=reSign(($40), 16, 0)==10; //@line 1597 "textio.c"
        if ($41) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1597 "textio.c"
      case 12: // $bb11
        var $42=HEAP[$s]; //@line 1598 "textio.c"
        var $43=($42); //@line 1598 "textio.c"
        var $44=HEAP[$start_addr]; //@line 1598 "textio.c"
        var $45=($44); //@line 1598 "textio.c"
        var $46=((($43) - ($45))&4294967295); //@line 1598 "textio.c"
        var $47=((((($46))|0)/2)|0); //@line 1598 "textio.c"
        HEAP[$0]=$47; //@line 1598 "textio.c"
        __label__ = 39; break; //@line 1598 "textio.c"
      case 13: // $bb12
        var $48=HEAP[$ch]; //@line 1599 "textio.c"
        var $49=reSign(($48), 16, 0)==13; //@line 1599 "textio.c"
        if ($49) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 1599 "textio.c"
      case 14: // $bb13
        var $50=HEAP[$s]; //@line 1600 "textio.c"
        var $51=HEAP[$50]; //@line 1600 "textio.c"
        var $52=reSign(($51), 16, 0)==10; //@line 1600 "textio.c"
        if ($52) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1600 "textio.c"
      case 15: // $bb14
        var $53=HEAP[$s]; //@line 1601 "textio.c"
        var $54=($53); //@line 1601 "textio.c"
        var $55=HEAP[$start_addr]; //@line 1601 "textio.c"
        var $56=($55); //@line 1601 "textio.c"
        var $57=((($54) - ($56))&4294967295); //@line 1601 "textio.c"
        var $58=((((($57))|0)/2)|0); //@line 1601 "textio.c"
        var $59=((($58) + 1)&4294967295); //@line 1601 "textio.c"
        HEAP[$0]=$59; //@line 1601 "textio.c"
        __label__ = 39; break; //@line 1601 "textio.c"
      case 16: // $bb15
        var $60=HEAP[$s]; //@line 1603 "textio.c"
        var $61=($60); //@line 1603 "textio.c"
        var $62=HEAP[$start_addr]; //@line 1603 "textio.c"
        var $63=($62); //@line 1603 "textio.c"
        var $64=((($61) - ($63))&4294967295); //@line 1603 "textio.c"
        var $65=((((($64))|0)/2)|0); //@line 1603 "textio.c"
        HEAP[$0]=$65; //@line 1603 "textio.c"
        __label__ = 39; break; //@line 1603 "textio.c"
      case 17: // $bb16
        __label__ = 6; break; //@line 1603 "textio.c"
      case 18: // $bb17
        var $66=HEAP[$readnl_addr]; //@line 1609 "textio.c"
        var $67=$66; //@line 1609 "textio.c"
        var $68=(($67+8)&4294967295); //@line 1609 "textio.c"
        var $69=HEAP[$68]; //@line 1609 "textio.c"
        HEAP[$readnl_len]=$69; //@line 1609 "textio.c"
        var $70=HEAP[$readnl_addr]; //@line 1610 "textio.c"
        var $71=$70; //@line 1610 "textio.c"
        var $72=(($71+20)&4294967295); //@line 1610 "textio.c"
        var $73=$72; //@line 1610 "textio.c"
        HEAP[$nl]=$73; //@line 1610 "textio.c"
        var $74=HEAP[$readnl_len]; //@line 1611 "textio.c"
        var $75=((($74))|0)==1; //@line 1611 "textio.c"
        if ($75) { __label__ = 19; break; } else { __label__ = 22; break; } //@line 1611 "textio.c"
      case 19: // $bb18
        var $76=HEAP[$nl]; //@line 1612 "textio.c"
        var $77=(($76)&4294967295); //@line 1612 "textio.c"
        var $78=HEAP[$77]; //@line 1612 "textio.c"
        var $79=unSign(($78), 8, 0); //@line 1612 "textio.c"
        var $80=HEAP[$start_addr]; //@line 1612 "textio.c"
        var $81=HEAP[$end_addr]; //@line 1612 "textio.c"
        var $82=((($79)) & 65535); //@line 1612 "textio.c"
        var $83=_find_control_char($80, $81, $82); //@line 1612 "textio.c"
        HEAP[$pos19]=$83; //@line 1612 "textio.c"
        var $84=HEAP[$pos19]; //@line 1613 "textio.c"
        var $85=($84)!=0; //@line 1613 "textio.c"
        if ($85) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1613 "textio.c"
      case 20: // $bb20
        var $86=HEAP[$pos19]; //@line 1614 "textio.c"
        var $87=($86); //@line 1614 "textio.c"
        var $88=HEAP[$start_addr]; //@line 1614 "textio.c"
        var $89=($88); //@line 1614 "textio.c"
        var $90=((($87) - ($89))&4294967295); //@line 1614 "textio.c"
        var $91=((((($90))|0)/2)|0); //@line 1614 "textio.c"
        var $92=((($91) + 1)&4294967295); //@line 1614 "textio.c"
        HEAP[$0]=$92; //@line 1614 "textio.c"
        __label__ = 39; break; //@line 1614 "textio.c"
      case 21: // $bb21
        var $93=HEAP[$consumed_addr]; //@line 1615 "textio.c"
        var $94=HEAP[$len]; //@line 1615 "textio.c"
        HEAP[$93]=$94; //@line 1615 "textio.c"
        HEAP[$0]=-1; //@line 1616 "textio.c"
        __label__ = 39; break; //@line 1616 "textio.c"
      case 22: // $bb22
        var $95=HEAP[$start_addr]; //@line 1619 "textio.c"
        HEAP[$s23]=$95; //@line 1619 "textio.c"
        var $96=HEAP[$readnl_len]; //@line 1620 "textio.c"
        var $97=((0 - ($96))&4294967295); //@line 1620 "textio.c"
        var $98=HEAP[$end_addr]; //@line 1620 "textio.c"
        var $99=(($98+2*$97)&4294967295); //@line 1620 "textio.c"
        var $100=(($99+2)&4294967295); //@line 1620 "textio.c"
        HEAP[$e]=$100; //@line 1620 "textio.c"
        var $101=HEAP[$e]; //@line 1622 "textio.c"
        var $102=HEAP[$s23]; //@line 1622 "textio.c"
        var $103=($101) < ($102); //@line 1622 "textio.c"
        if ($103) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 1622 "textio.c"
      case 23: // $bb25
        var $104=HEAP[$s23]; //@line 1623 "textio.c"
        HEAP[$e]=$104; //@line 1623 "textio.c"
        __label__ = 24; break; //@line 1623 "textio.c"
      case 24: // $bb26
        __label__ = 34; break; //@line 1623 "textio.c"
      case 25: // $bb27
        var $105=HEAP[$nl]; //@line 1626 "textio.c"
        var $106=(($105)&4294967295); //@line 1626 "textio.c"
        var $107=HEAP[$106]; //@line 1626 "textio.c"
        var $108=unSign(($107), 8, 0); //@line 1626 "textio.c"
        var $109=HEAP[$s23]; //@line 1626 "textio.c"
        var $110=HEAP[$end_addr]; //@line 1626 "textio.c"
        var $111=((($108)) & 65535); //@line 1626 "textio.c"
        var $112=_find_control_char($109, $110, $111); //@line 1626 "textio.c"
        HEAP[$pos28]=$112; //@line 1626 "textio.c"
        var $113=HEAP[$pos28]; //@line 1627 "textio.c"
        var $114=($113)==0; //@line 1627 "textio.c"
        if ($114) { __label__ = 35; break; } else { __label__ = 26; break; } //@line 1627 "textio.c"
      case 26: // $bb29
        var $115=HEAP[$pos28]; //@line 1627 "textio.c"
        var $116=HEAP[$e]; //@line 1627 "textio.c"
        var $117=($115) >= ($116); //@line 1627 "textio.c"
        if ($117) { __label__ = 35; break; } else { __label__ = 27; break; } //@line 1627 "textio.c"
      case 27: // $bb30
        HEAP[$i]=1; //@line 1629 "textio.c"
        __label__ = 30; break; //@line 1629 "textio.c"
      case 28: // $bb31
        var $118=HEAP[$pos28]; //@line 1630 "textio.c"
        var $119=HEAP[$i]; //@line 1630 "textio.c"
        var $120=(($118+2*$119)&4294967295); //@line 1630 "textio.c"
        var $121=HEAP[$120]; //@line 1630 "textio.c"
        var $122=HEAP[$nl]; //@line 1630 "textio.c"
        var $123=HEAP[$i]; //@line 1630 "textio.c"
        var $124=(($122+$123)&4294967295); //@line 1630 "textio.c"
        var $125=HEAP[$124]; //@line 1630 "textio.c"
        var $126=unSign(($125), 8, 0); //@line 1630 "textio.c"
        var $127=reSign(($121), 16, 0)!=reSign(($126), 16, 0); //@line 1630 "textio.c"
        if ($127) { __label__ = 31; break; } else { __label__ = 29; break; } //@line 1630 "textio.c"
      case 29: // $bb32
        var $128=HEAP[$i]; //@line 1629 "textio.c"
        var $129=((($128) + 1)&4294967295); //@line 1629 "textio.c"
        HEAP[$i]=$129; //@line 1629 "textio.c"
        __label__ = 30; break; //@line 1629 "textio.c"
      case 30: // $bb33
        var $130=HEAP[$i]; //@line 1629 "textio.c"
        var $131=HEAP[$readnl_len]; //@line 1629 "textio.c"
        var $132=((($130))|0) < ((($131))|0); //@line 1629 "textio.c"
        if ($132) { __label__ = 28; break; } else { __label__ = 31; break; } //@line 1629 "textio.c"
      case 31: // $bb34
        var $133=HEAP[$i]; //@line 1633 "textio.c"
        var $134=HEAP[$readnl_len]; //@line 1633 "textio.c"
        var $135=((($133))|0)==((($134))|0); //@line 1633 "textio.c"
        if ($135) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 1633 "textio.c"
      case 32: // $bb35
        var $136=HEAP[$pos28]; //@line 1634 "textio.c"
        var $137=($136); //@line 1634 "textio.c"
        var $138=HEAP[$start_addr]; //@line 1634 "textio.c"
        var $139=($138); //@line 1634 "textio.c"
        var $140=((($137) - ($139))&4294967295); //@line 1634 "textio.c"
        var $141=((((($140))|0)/2)|0); //@line 1634 "textio.c"
        var $142=HEAP[$readnl_len]; //@line 1634 "textio.c"
        var $143=((($141) + ($142))&4294967295); //@line 1634 "textio.c"
        HEAP[$0]=$143; //@line 1634 "textio.c"
        __label__ = 39; break; //@line 1634 "textio.c"
      case 33: // $bb36
        var $144=HEAP[$pos28]; //@line 1635 "textio.c"
        var $145=(($144+2)&4294967295); //@line 1635 "textio.c"
        HEAP[$s23]=$145; //@line 1635 "textio.c"
        __label__ = 34; break; //@line 1635 "textio.c"
      case 34: // $bb37
        var $146=HEAP[$s23]; //@line 1624 "textio.c"
        var $147=HEAP[$e]; //@line 1624 "textio.c"
        var $148=($146) < ($147); //@line 1624 "textio.c"
        if ($148) { __label__ = 25; break; } else { __label__ = 35; break; } //@line 1624 "textio.c"
      case 35: // $bb38
        var $149=HEAP[$nl]; //@line 1637 "textio.c"
        var $150=(($149)&4294967295); //@line 1637 "textio.c"
        var $151=HEAP[$150]; //@line 1637 "textio.c"
        var $152=unSign(($151), 8, 0); //@line 1637 "textio.c"
        var $153=HEAP[$e]; //@line 1637 "textio.c"
        var $154=HEAP[$end_addr]; //@line 1637 "textio.c"
        var $155=((($152)) & 65535); //@line 1637 "textio.c"
        var $156=_find_control_char($153, $154, $155); //@line 1637 "textio.c"
        HEAP[$pos24]=$156; //@line 1637 "textio.c"
        var $157=HEAP[$pos24]; //@line 1638 "textio.c"
        var $158=($157)==0; //@line 1638 "textio.c"
        if ($158) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 1638 "textio.c"
      case 36: // $bb39
        var $159=HEAP[$consumed_addr]; //@line 1639 "textio.c"
        var $160=HEAP[$len]; //@line 1639 "textio.c"
        HEAP[$159]=$160; //@line 1639 "textio.c"
        __label__ = 38; break; //@line 1639 "textio.c"
      case 37: // $bb40
        var $161=HEAP[$pos24]; //@line 1641 "textio.c"
        var $162=($161); //@line 1641 "textio.c"
        var $163=HEAP[$start_addr]; //@line 1641 "textio.c"
        var $164=($163); //@line 1641 "textio.c"
        var $165=((($162) - ($164))&4294967295); //@line 1641 "textio.c"
        var $166=((((($165))|0)/2)|0); //@line 1641 "textio.c"
        var $167=HEAP[$consumed_addr]; //@line 1641 "textio.c"
        HEAP[$167]=$166; //@line 1641 "textio.c"
        __label__ = 38; break; //@line 1641 "textio.c"
      case 38: // $bb41
        HEAP[$0]=-1; //@line 1642 "textio.c"
        __label__ = 39; break; //@line 1642 "textio.c"
      case 39: // $bb42
        var $168=HEAP[$0]; //@line 1575 "textio.c"
        HEAP[$retval]=$168; //@line 1575 "textio.c"
        __label__ = 40; break; //@line 1575 "textio.c"
      case 40: // $return
        var $retval43=HEAP[$retval]; //@line 1575 "textio.c"
        STACKTOP = __stackBase__;
        return $retval43; //@line 1575 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __textiowrapper_readline($self, $limit) {
    var __stackBase__  = STACKTOP; STACKTOP += 100; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 100);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $limit_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $line=__stackBase__+16;
        var $chunks=__stackBase__+20;
        var $remaining=__stackBase__+24;
        var $start=__stackBase__+28;
        var $endpos=__stackBase__+32;
        var $chunked=__stackBase__+36;
        var $offset_to_buffer=__stackBase__+40;
        var $res=__stackBase__+44;
        var $r=__stackBase__+48;
        var $_res=__stackBase__+52;
        var $ptr=__stackBase__+56;
        var $line_len=__stackBase__+60;
        var $consumed=__stackBase__+64;
        var $_py_tmp=__stackBase__+68;
        var $_py_tmp32=__stackBase__+72;
        var $s=__stackBase__+76;
        var $_py_tmp57=__stackBase__+80;
        var $s68=__stackBase__+84;
        var $_py_tmp70=__stackBase__+88;
        var $_py_tmp80=__stackBase__+92;
        var $_py_tmp87=__stackBase__+96;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$limit_addr]=$limit;
        HEAP[$line]=0; //@line 1650 "textio.c"
        HEAP[$chunks]=0; //@line 1650 "textio.c"
        HEAP[$remaining]=0; //@line 1650 "textio.c"
        var $1=HEAP[$self_addr]; //@line 1654 "textio.c"
        var $2=$1; //@line 1654 "textio.c"
        var $3=(($2+4)&4294967295); //@line 1654 "textio.c"
        var $4=HEAP[$3]; //@line 1654 "textio.c"
        var $5=($4)==(_PyTextIOWrapper_Type); //@line 1654 "textio.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 12; break; } //@line 1654 "textio.c"
      case 1: // $bb
        var $6=HEAP[$self_addr]; //@line 1654 "textio.c"
        var $7=(($6+84)&4294967295); //@line 1654 "textio.c"
        var $8=HEAP[$7]; //@line 1654 "textio.c"
        var $9=($8)!=0; //@line 1654 "textio.c"
        if ($9) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1654 "textio.c"
      case 2: // $bb1
        var $10=HEAP[$self_addr]; //@line 1654 "textio.c"
        var $11=(($10+84)&4294967295); //@line 1654 "textio.c"
        var $12=HEAP[$11]; //@line 1654 "textio.c"
        var $13=__PyFileIO_closed($12); //@line 1654 "textio.c"
        HEAP[$r]=$13; //@line 1654 "textio.c"
        __label__ = 9; break; //@line 1654 "textio.c"
      case 3: // $bb2
        var $14=HEAP[$self_addr]; //@line 1654 "textio.c"
        var $15=_textiowrapper_closed_get($14, 0); //@line 1654 "textio.c"
        HEAP[$_res]=$15; //@line 1654 "textio.c"
        var $16=HEAP[$_res]; //@line 1654 "textio.c"
        var $17=($16)==0; //@line 1654 "textio.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1654 "textio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 1654 "textio.c"
        __label__ = 100; break; //@line 1654 "textio.c"
      case 5: // $bb4
        var $18=HEAP[$_res]; //@line 1654 "textio.c"
        var $19=_PyObject_IsTrue($18); //@line 1654 "textio.c"
        HEAP[$r]=$19; //@line 1654 "textio.c"
        var $20=HEAP[$_res]; //@line 1654 "textio.c"
        var $21=(($20)&4294967295); //@line 1654 "textio.c"
        var $22=HEAP[$21]; //@line 1654 "textio.c"
        var $23=((($22) - 1)&4294967295); //@line 1654 "textio.c"
        var $24=HEAP[$_res]; //@line 1654 "textio.c"
        var $25=(($24)&4294967295); //@line 1654 "textio.c"
        HEAP[$25]=$23; //@line 1654 "textio.c"
        var $26=HEAP[$_res]; //@line 1654 "textio.c"
        var $27=(($26)&4294967295); //@line 1654 "textio.c"
        var $28=HEAP[$27]; //@line 1654 "textio.c"
        var $29=((($28))|0)==0; //@line 1654 "textio.c"
        if ($29) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1654 "textio.c"
      case 6: // $bb5
        var $30=HEAP[$_res]; //@line 1654 "textio.c"
        var $31=(($30+4)&4294967295); //@line 1654 "textio.c"
        var $32=HEAP[$31]; //@line 1654 "textio.c"
        var $33=(($32+24)&4294967295); //@line 1654 "textio.c"
        var $34=HEAP[$33]; //@line 1654 "textio.c"
        var $35=HEAP[$_res]; //@line 1654 "textio.c"
        FUNCTION_TABLE[$34]($35); //@line 1654 "textio.c"
        __label__ = 7; break; //@line 1654 "textio.c"
      case 7: // $bb6
        var $36=HEAP[$r]; //@line 1654 "textio.c"
        var $37=((($36))|0) < 0; //@line 1654 "textio.c"
        if ($37) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1654 "textio.c"
      case 8: // $bb7
        HEAP[$0]=0; //@line 1654 "textio.c"
        __label__ = 100; break; //@line 1654 "textio.c"
      case 9: // $bb8
        var $38=HEAP[$r]; //@line 1654 "textio.c"
        var $39=((($38))|0) > 0; //@line 1654 "textio.c"
        if ($39) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1654 "textio.c"
      case 10: // $bb9
        var $40=HEAP[_PyExc_ValueError]; //@line 1654 "textio.c"
        _PyErr_SetString($40, ((__str60436)&4294967295)); //@line 1654 "textio.c"
        HEAP[$0]=0; //@line 1654 "textio.c"
        __label__ = 100; break; //@line 1654 "textio.c"
      case 11: // $bb10
        __label__ = 14; break; //@line 1654 "textio.c"
      case 12: // $bb11
        var $41=HEAP[$self_addr]; //@line 1654 "textio.c"
        var $42=$41; //@line 1654 "textio.c"
        var $43=__PyIOBase_check_closed($42, __Py_TrueStruct); //@line 1654 "textio.c"
        var $44=($43)==0; //@line 1654 "textio.c"
        if ($44) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1654 "textio.c"
      case 13: // $bb12
        HEAP[$0]=0; //@line 1654 "textio.c"
        __label__ = 100; break; //@line 1654 "textio.c"
      case 14: // $bb13
        var $45=HEAP[$self_addr]; //@line 1656 "textio.c"
        var $46=__textiowrapper_writeflush($45); //@line 1656 "textio.c"
        var $47=((($46))|0) < 0; //@line 1656 "textio.c"
        if ($47) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1656 "textio.c"
      case 15: // $bb14
        HEAP[$0]=0; //@line 1657 "textio.c"
        __label__ = 100; break; //@line 1657 "textio.c"
      case 16: // $bb15
        HEAP[$chunked]=0; //@line 1659 "textio.c"
        __label__ = 17; break; //@line 1659 "textio.c"
      case 17: // $bb16
        HEAP[$consumed]=0; //@line 1664 "textio.c"
        HEAP[$res]=1; //@line 1667 "textio.c"
        __label__ = 20; break; //@line 1667 "textio.c"
      case 18: // $bb17
        var $48=HEAP[$self_addr]; //@line 1670 "textio.c"
        var $49=_textiowrapper_read_chunk($48); //@line 1670 "textio.c"
        HEAP[$res]=$49; //@line 1670 "textio.c"
        var $50=HEAP[$res]; //@line 1671 "textio.c"
        var $51=((($50))|0) < 0; //@line 1671 "textio.c"
        if ($51) { __label__ = 90; break; } else { __label__ = 19; break; } //@line 1671 "textio.c"
      case 19: // $bb18
        var $52=HEAP[$res]; //@line 1673 "textio.c"
        var $53=((($52))|0)==0; //@line 1673 "textio.c"
        if ($53) { __label__ = 22; break; } else { __label__ = 20; break; } //@line 1673 "textio.c"
      case 20: // $bb19
        var $54=HEAP[$self_addr]; //@line 1668 "textio.c"
        var $55=(($54+64)&4294967295); //@line 1668 "textio.c"
        var $56=HEAP[$55]; //@line 1668 "textio.c"
        var $57=($56)==0; //@line 1668 "textio.c"
        if ($57) { __label__ = 18; break; } else { __label__ = 21; break; } //@line 1668 "textio.c"
      case 21: // $bb20
        var $58=HEAP[$self_addr]; //@line 1668 "textio.c"
        var $59=(($58+64)&4294967295); //@line 1668 "textio.c"
        var $60=HEAP[$59]; //@line 1668 "textio.c"
        var $61=$60; //@line 1668 "textio.c"
        var $62=(($61+8)&4294967295); //@line 1668 "textio.c"
        var $63=HEAP[$62]; //@line 1668 "textio.c"
        var $64=((($63))|0)==0; //@line 1668 "textio.c"
        if ($64) { __label__ = 18; break; } else { __label__ = 22; break; } //@line 1668 "textio.c"
      case 22: // $bb21
        var $65=HEAP[$res]; //@line 1676 "textio.c"
        var $66=((($65))|0)==0; //@line 1676 "textio.c"
        if ($66) { __label__ = 23; break; } else { __label__ = 27; break; } //@line 1676 "textio.c"
      case 23: // $bb22
        var $67=HEAP[$self_addr]; //@line 1678 "textio.c"
        _textiowrapper_set_decoded_chars($67, 0); //@line 1678 "textio.c"
        var $68=HEAP[$self_addr]; //@line 1679 "textio.c"
        var $69=(($68+80)&4294967295); //@line 1679 "textio.c"
        var $70=HEAP[$69]; //@line 1679 "textio.c"
        var $71=($70)!=0; //@line 1679 "textio.c"
        if ($71) { __label__ = 24; break; } else { __label__ = 26; break; } //@line 1679 "textio.c"
      case 24: // $bb23
        var $72=HEAP[$self_addr]; //@line 1679 "textio.c"
        var $73=(($72+80)&4294967295); //@line 1679 "textio.c"
        var $74=HEAP[$73]; //@line 1679 "textio.c"
        HEAP[$_py_tmp]=$74; //@line 1679 "textio.c"
        var $75=HEAP[$self_addr]; //@line 1679 "textio.c"
        var $76=(($75+80)&4294967295); //@line 1679 "textio.c"
        HEAP[$76]=0; //@line 1679 "textio.c"
        var $77=HEAP[$_py_tmp]; //@line 1679 "textio.c"
        var $78=(($77)&4294967295); //@line 1679 "textio.c"
        var $79=HEAP[$78]; //@line 1679 "textio.c"
        var $80=((($79) - 1)&4294967295); //@line 1679 "textio.c"
        var $81=HEAP[$_py_tmp]; //@line 1679 "textio.c"
        var $82=(($81)&4294967295); //@line 1679 "textio.c"
        HEAP[$82]=$80; //@line 1679 "textio.c"
        var $83=HEAP[$_py_tmp]; //@line 1679 "textio.c"
        var $84=(($83)&4294967295); //@line 1679 "textio.c"
        var $85=HEAP[$84]; //@line 1679 "textio.c"
        var $86=((($85))|0)==0; //@line 1679 "textio.c"
        if ($86) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 1679 "textio.c"
      case 25: // $bb24
        var $87=HEAP[$_py_tmp]; //@line 1679 "textio.c"
        var $88=(($87+4)&4294967295); //@line 1679 "textio.c"
        var $89=HEAP[$88]; //@line 1679 "textio.c"
        var $90=(($89+24)&4294967295); //@line 1679 "textio.c"
        var $91=HEAP[$90]; //@line 1679 "textio.c"
        var $92=HEAP[$_py_tmp]; //@line 1679 "textio.c"
        FUNCTION_TABLE[$91]($92); //@line 1679 "textio.c"
        __label__ = 26; break; //@line 1679 "textio.c"
      case 26: // $bb25
        HEAP[$offset_to_buffer]=0; //@line 1680 "textio.c"
        var $93=HEAP[$offset_to_buffer]; //@line 1680 "textio.c"
        HEAP[$endpos]=$93; //@line 1680 "textio.c"
        var $94=HEAP[$endpos]; //@line 1680 "textio.c"
        HEAP[$start]=$94; //@line 1680 "textio.c"
        __label__ = 59; break; //@line 1680 "textio.c"
      case 27: // $bb26
        var $95=HEAP[$remaining]; //@line 1684 "textio.c"
        var $96=($95)==0; //@line 1684 "textio.c"
        if ($96) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 1684 "textio.c"
      case 28: // $bb27
        var $97=HEAP[$self_addr]; //@line 1685 "textio.c"
        var $98=(($97+64)&4294967295); //@line 1685 "textio.c"
        var $99=HEAP[$98]; //@line 1685 "textio.c"
        HEAP[$line]=$99; //@line 1685 "textio.c"
        var $100=HEAP[$self_addr]; //@line 1686 "textio.c"
        var $101=(($100+68)&4294967295); //@line 1686 "textio.c"
        var $102=HEAP[$101]; //@line 1686 "textio.c"
        HEAP[$start]=$102; //@line 1686 "textio.c"
        HEAP[$offset_to_buffer]=0; //@line 1687 "textio.c"
        var $103=HEAP[$line]; //@line 1688 "textio.c"
        var $104=(($103)&4294967295); //@line 1688 "textio.c"
        var $105=HEAP[$104]; //@line 1688 "textio.c"
        var $106=((($105) + 1)&4294967295); //@line 1688 "textio.c"
        var $107=(($103)&4294967295); //@line 1688 "textio.c"
        HEAP[$107]=$106; //@line 1688 "textio.c"
        __label__ = 35; break; //@line 1688 "textio.c"
      case 29: // $bb28
        var $108=HEAP[$self_addr]; //@line 1691 "textio.c"
        var $109=(($108+68)&4294967295); //@line 1691 "textio.c"
        var $110=HEAP[$109]; //@line 1691 "textio.c"
        var $111=((($110))|0)!=0; //@line 1691 "textio.c"
        if ($111) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 1691 "textio.c"
      case 30: // $bb29
        ___assert_fail(((__str70446)&4294967295), ((__str15390)&4294967295), 1691, ((___PRETTY_FUNCTION___10735)&4294967295)); //@line 1691 "textio.c"
        throw "Reached an unreachable! Original .ll line: 32935"; //@line 1691 "textio.c"
      case 31: // $bb30
        var $112=HEAP[$self_addr]; //@line 1692 "textio.c"
        var $113=(($112+64)&4294967295); //@line 1692 "textio.c"
        var $114=HEAP[$113]; //@line 1692 "textio.c"
        var $115=HEAP[$remaining]; //@line 1692 "textio.c"
        var $116=_PyUnicodeUCS2_Concat($115, $114); //@line 1692 "textio.c"
        HEAP[$line]=$116; //@line 1692 "textio.c"
        HEAP[$start]=0; //@line 1693 "textio.c"
        var $117=HEAP[$remaining]; //@line 1694 "textio.c"
        var $118=$117; //@line 1694 "textio.c"
        var $119=(($118+8)&4294967295); //@line 1694 "textio.c"
        var $120=HEAP[$119]; //@line 1694 "textio.c"
        HEAP[$offset_to_buffer]=$120; //@line 1694 "textio.c"
        var $121=HEAP[$remaining]; //@line 1695 "textio.c"
        var $122=($121)!=0; //@line 1695 "textio.c"
        if ($122) { __label__ = 32; break; } else { __label__ = 34; break; } //@line 1695 "textio.c"
      case 32: // $bb31
        var $123=HEAP[$remaining]; //@line 1695 "textio.c"
        HEAP[$_py_tmp32]=$123; //@line 1695 "textio.c"
        HEAP[$remaining]=0; //@line 1695 "textio.c"
        var $124=HEAP[$_py_tmp32]; //@line 1695 "textio.c"
        var $125=(($124)&4294967295); //@line 1695 "textio.c"
        var $126=HEAP[$125]; //@line 1695 "textio.c"
        var $127=((($126) - 1)&4294967295); //@line 1695 "textio.c"
        var $128=HEAP[$_py_tmp32]; //@line 1695 "textio.c"
        var $129=(($128)&4294967295); //@line 1695 "textio.c"
        HEAP[$129]=$127; //@line 1695 "textio.c"
        var $130=HEAP[$_py_tmp32]; //@line 1695 "textio.c"
        var $131=(($130)&4294967295); //@line 1695 "textio.c"
        var $132=HEAP[$131]; //@line 1695 "textio.c"
        var $133=((($132))|0)==0; //@line 1695 "textio.c"
        if ($133) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 1695 "textio.c"
      case 33: // $bb33
        var $134=HEAP[$_py_tmp32]; //@line 1695 "textio.c"
        var $135=(($134+4)&4294967295); //@line 1695 "textio.c"
        var $136=HEAP[$135]; //@line 1695 "textio.c"
        var $137=(($136+24)&4294967295); //@line 1695 "textio.c"
        var $138=HEAP[$137]; //@line 1695 "textio.c"
        var $139=HEAP[$_py_tmp32]; //@line 1695 "textio.c"
        FUNCTION_TABLE[$138]($139); //@line 1695 "textio.c"
        __label__ = 34; break; //@line 1695 "textio.c"
      case 34: // $bb34
        var $140=HEAP[$line]; //@line 1696 "textio.c"
        var $141=($140)==0; //@line 1696 "textio.c"
        if ($141) { __label__ = 90; break; } else { __label__ = 35; break; } //@line 1696 "textio.c"
      case 35: // $bb35
        var $142=HEAP[$line]; //@line 1700 "textio.c"
        var $143=$142; //@line 1700 "textio.c"
        var $144=(($143+12)&4294967295); //@line 1700 "textio.c"
        var $145=HEAP[$144]; //@line 1700 "textio.c"
        HEAP[$ptr]=$145; //@line 1700 "textio.c"
        var $146=HEAP[$line]; //@line 1701 "textio.c"
        var $147=$146; //@line 1701 "textio.c"
        var $148=(($147+8)&4294967295); //@line 1701 "textio.c"
        var $149=HEAP[$148]; //@line 1701 "textio.c"
        HEAP[$line_len]=$149; //@line 1701 "textio.c"
        var $150=HEAP[$ptr]; //@line 1703 "textio.c"
        var $151=HEAP[$line_len]; //@line 1703 "textio.c"
        var $152=(($150+2*$151)&4294967295); //@line 1703 "textio.c"
        var $153=HEAP[$ptr]; //@line 1703 "textio.c"
        var $154=HEAP[$start]; //@line 1703 "textio.c"
        var $155=(($153+2*$154)&4294967295); //@line 1703 "textio.c"
        var $156=HEAP[$self_addr]; //@line 1703 "textio.c"
        var $157=(($156+36)&4294967295); //@line 1703 "textio.c"
        var $158=HEAP[$157]; //@line 1703 "textio.c"
        var $159=HEAP[$self_addr]; //@line 1703 "textio.c"
        var $160=(($159+49)&4294967295); //@line 1703 "textio.c"
        var $161=HEAP[$160]; //@line 1703 "textio.c"
        var $162=reSign(($161), 8, 0); //@line 1703 "textio.c"
        var $163=HEAP[$self_addr]; //@line 1703 "textio.c"
        var $164=(($163+50)&4294967295); //@line 1703 "textio.c"
        var $165=HEAP[$164]; //@line 1703 "textio.c"
        var $166=reSign(($165), 8, 0); //@line 1703 "textio.c"
        var $167=__PyIO_find_line_ending($166, $162, $158, $155, $152, $consumed); //@line 1703 "textio.c"
        HEAP[$endpos]=$167; //@line 1703 "textio.c"
        var $168=HEAP[$endpos]; //@line 1706 "textio.c"
        var $169=((($168))|0) >= 0; //@line 1706 "textio.c"
        if ($169) { __label__ = 36; break; } else { __label__ = 40; break; } //@line 1706 "textio.c"
      case 36: // $bb36
        var $170=HEAP[$endpos]; //@line 1707 "textio.c"
        var $171=HEAP[$start]; //@line 1707 "textio.c"
        var $172=((($170) + ($171))&4294967295); //@line 1707 "textio.c"
        HEAP[$endpos]=$172; //@line 1707 "textio.c"
        var $173=HEAP[$limit_addr]; //@line 1708 "textio.c"
        var $174=((($173))|0) >= 0; //@line 1708 "textio.c"
        if ($174) { __label__ = 37; break; } else { __label__ = 39; break; } //@line 1708 "textio.c"
      case 37: // $bb37
        var $175=HEAP[$endpos]; //@line 1708 "textio.c"
        var $176=HEAP[$start]; //@line 1708 "textio.c"
        var $177=((($175) - ($176))&4294967295); //@line 1708 "textio.c"
        var $178=HEAP[$chunked]; //@line 1708 "textio.c"
        var $179=((($177) + ($178))&4294967295); //@line 1708 "textio.c"
        var $180=HEAP[$limit_addr]; //@line 1708 "textio.c"
        var $181=((($179))|0) >= ((($180))|0); //@line 1708 "textio.c"
        if ($181) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 1708 "textio.c"
      case 38: // $bb38
        var $182=HEAP[$start]; //@line 1709 "textio.c"
        var $183=HEAP[$limit_addr]; //@line 1709 "textio.c"
        var $184=((($182) + ($183))&4294967295); //@line 1709 "textio.c"
        var $185=HEAP[$chunked]; //@line 1709 "textio.c"
        var $186=((($184) - ($185))&4294967295); //@line 1709 "textio.c"
        HEAP[$endpos]=$186; //@line 1709 "textio.c"
        __label__ = 39; break; //@line 1709 "textio.c"
      case 39: // $bb39
        __label__ = 59; break; //@line 1709 "textio.c"
      case 40: // $bb40
        var $187=HEAP[$consumed]; //@line 1714 "textio.c"
        var $188=HEAP[$start]; //@line 1714 "textio.c"
        var $189=((($187) + ($188))&4294967295); //@line 1714 "textio.c"
        HEAP[$endpos]=$189; //@line 1714 "textio.c"
        var $190=HEAP[$limit_addr]; //@line 1715 "textio.c"
        var $191=((($190))|0) >= 0; //@line 1715 "textio.c"
        if ($191) { __label__ = 41; break; } else { __label__ = 43; break; } //@line 1715 "textio.c"
      case 41: // $bb41
        var $192=HEAP[$endpos]; //@line 1715 "textio.c"
        var $193=HEAP[$start]; //@line 1715 "textio.c"
        var $194=((($192) - ($193))&4294967295); //@line 1715 "textio.c"
        var $195=HEAP[$chunked]; //@line 1715 "textio.c"
        var $196=((($194) + ($195))&4294967295); //@line 1715 "textio.c"
        var $197=HEAP[$limit_addr]; //@line 1715 "textio.c"
        var $198=((($196))|0) >= ((($197))|0); //@line 1715 "textio.c"
        if ($198) { __label__ = 42; break; } else { __label__ = 43; break; } //@line 1715 "textio.c"
      case 42: // $bb42
        var $199=HEAP[$start]; //@line 1717 "textio.c"
        var $200=HEAP[$limit_addr]; //@line 1717 "textio.c"
        var $201=((($199) + ($200))&4294967295); //@line 1717 "textio.c"
        var $202=HEAP[$chunked]; //@line 1717 "textio.c"
        var $203=((($201) - ($202))&4294967295); //@line 1717 "textio.c"
        HEAP[$endpos]=$203; //@line 1717 "textio.c"
        __label__ = 59; break; //@line 1717 "textio.c"
      case 43: // $bb43
        var $204=HEAP[$endpos]; //@line 1721 "textio.c"
        var $205=HEAP[$start]; //@line 1721 "textio.c"
        var $206=((($204))|0) > ((($205))|0); //@line 1721 "textio.c"
        if ($206) { __label__ = 44; break; } else { __label__ = 53; break; } //@line 1721 "textio.c"
      case 44: // $bb44
        var $207=HEAP[$chunks]; //@line 1724 "textio.c"
        var $208=($207)==0; //@line 1724 "textio.c"
        if ($208) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 1724 "textio.c"
      case 45: // $bb45
        var $209=_PyList_New(0); //@line 1725 "textio.c"
        HEAP[$chunks]=$209; //@line 1725 "textio.c"
        var $210=HEAP[$chunks]; //@line 1726 "textio.c"
        var $211=($210)==0; //@line 1726 "textio.c"
        if ($211) { __label__ = 90; break; } else { __label__ = 46; break; } //@line 1726 "textio.c"
      case 46: // $bb46
        var $212=HEAP[$endpos]; //@line 1729 "textio.c"
        var $213=HEAP[$start]; //@line 1729 "textio.c"
        var $214=((($212) - ($213))&4294967295); //@line 1729 "textio.c"
        var $215=HEAP[$ptr]; //@line 1729 "textio.c"
        var $216=HEAP[$start]; //@line 1729 "textio.c"
        var $217=(($215+2*$216)&4294967295); //@line 1729 "textio.c"
        var $218=_PyUnicodeUCS2_FromUnicode($217, $214); //@line 1729 "textio.c"
        HEAP[$s]=$218; //@line 1729 "textio.c"
        var $219=HEAP[$s]; //@line 1730 "textio.c"
        var $220=($219)==0; //@line 1730 "textio.c"
        if ($220) { __label__ = 90; break; } else { __label__ = 47; break; } //@line 1730 "textio.c"
      case 47: // $bb47
        var $221=HEAP[$chunks]; //@line 1732 "textio.c"
        var $222=HEAP[$s]; //@line 1732 "textio.c"
        var $223=_PyList_Append($221, $222); //@line 1732 "textio.c"
        var $224=((($223))|0) < 0; //@line 1732 "textio.c"
        if ($224) { __label__ = 48; break; } else { __label__ = 51; break; } //@line 1732 "textio.c"
      case 48: // $bb48
        var $225=HEAP[$s]; //@line 1733 "textio.c"
        var $226=(($225)&4294967295); //@line 1733 "textio.c"
        var $227=HEAP[$226]; //@line 1733 "textio.c"
        var $228=((($227) - 1)&4294967295); //@line 1733 "textio.c"
        var $229=HEAP[$s]; //@line 1733 "textio.c"
        var $230=(($229)&4294967295); //@line 1733 "textio.c"
        HEAP[$230]=$228; //@line 1733 "textio.c"
        var $231=HEAP[$s]; //@line 1733 "textio.c"
        var $232=(($231)&4294967295); //@line 1733 "textio.c"
        var $233=HEAP[$232]; //@line 1733 "textio.c"
        var $234=((($233))|0)==0; //@line 1733 "textio.c"
        if ($234) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 1733 "textio.c"
      case 49: // $bb49
        var $235=HEAP[$s]; //@line 1733 "textio.c"
        var $236=(($235+4)&4294967295); //@line 1733 "textio.c"
        var $237=HEAP[$236]; //@line 1733 "textio.c"
        var $238=(($237+24)&4294967295); //@line 1733 "textio.c"
        var $239=HEAP[$238]; //@line 1733 "textio.c"
        var $240=HEAP[$s]; //@line 1733 "textio.c"
        FUNCTION_TABLE[$239]($240); //@line 1733 "textio.c"
        __label__ = 50; break; //@line 1733 "textio.c"
      case 50: // $bb50
        __label__ = 90; break; //@line 1733 "textio.c"
      case 51: // $bb51
        var $241=HEAP[$s]; //@line 1736 "textio.c"
        var $242=$241; //@line 1736 "textio.c"
        var $243=(($242+8)&4294967295); //@line 1736 "textio.c"
        var $244=HEAP[$243]; //@line 1736 "textio.c"
        var $245=HEAP[$chunked]; //@line 1736 "textio.c"
        var $246=((($244) + ($245))&4294967295); //@line 1736 "textio.c"
        HEAP[$chunked]=$246; //@line 1736 "textio.c"
        var $247=HEAP[$s]; //@line 1737 "textio.c"
        var $248=(($247)&4294967295); //@line 1737 "textio.c"
        var $249=HEAP[$248]; //@line 1737 "textio.c"
        var $250=((($249) - 1)&4294967295); //@line 1737 "textio.c"
        var $251=HEAP[$s]; //@line 1737 "textio.c"
        var $252=(($251)&4294967295); //@line 1737 "textio.c"
        HEAP[$252]=$250; //@line 1737 "textio.c"
        var $253=HEAP[$s]; //@line 1737 "textio.c"
        var $254=(($253)&4294967295); //@line 1737 "textio.c"
        var $255=HEAP[$254]; //@line 1737 "textio.c"
        var $256=((($255))|0)==0; //@line 1737 "textio.c"
        if ($256) { __label__ = 52; break; } else { __label__ = 53; break; } //@line 1737 "textio.c"
      case 52: // $bb52
        var $257=HEAP[$s]; //@line 1737 "textio.c"
        var $258=(($257+4)&4294967295); //@line 1737 "textio.c"
        var $259=HEAP[$258]; //@line 1737 "textio.c"
        var $260=(($259+24)&4294967295); //@line 1737 "textio.c"
        var $261=HEAP[$260]; //@line 1737 "textio.c"
        var $262=HEAP[$s]; //@line 1737 "textio.c"
        FUNCTION_TABLE[$261]($262); //@line 1737 "textio.c"
        __label__ = 53; break; //@line 1737 "textio.c"
      case 53: // $bb53
        var $263=HEAP[$endpos]; //@line 1741 "textio.c"
        var $264=HEAP[$line_len]; //@line 1741 "textio.c"
        var $265=((($263))|0) < ((($264))|0); //@line 1741 "textio.c"
        if ($265) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 1741 "textio.c"
      case 54: // $bb54
        var $266=HEAP[$line_len]; //@line 1742 "textio.c"
        var $267=HEAP[$endpos]; //@line 1742 "textio.c"
        var $268=((($266) - ($267))&4294967295); //@line 1742 "textio.c"
        var $269=HEAP[$ptr]; //@line 1742 "textio.c"
        var $270=HEAP[$endpos]; //@line 1742 "textio.c"
        var $271=(($269+2*$270)&4294967295); //@line 1742 "textio.c"
        var $272=_PyUnicodeUCS2_FromUnicode($271, $268); //@line 1742 "textio.c"
        HEAP[$remaining]=$272; //@line 1742 "textio.c"
        var $273=HEAP[$remaining]; //@line 1744 "textio.c"
        var $274=($273)==0; //@line 1744 "textio.c"
        if ($274) { __label__ = 90; break; } else { __label__ = 55; break; } //@line 1744 "textio.c"
      case 55: // $bb55
        var $275=HEAP[$line]; //@line 1747 "textio.c"
        var $276=($275)!=0; //@line 1747 "textio.c"
        if ($276) { __label__ = 56; break; } else { __label__ = 58; break; } //@line 1747 "textio.c"
      case 56: // $bb56
        var $277=HEAP[$line]; //@line 1747 "textio.c"
        HEAP[$_py_tmp57]=$277; //@line 1747 "textio.c"
        HEAP[$line]=0; //@line 1747 "textio.c"
        var $278=HEAP[$_py_tmp57]; //@line 1747 "textio.c"
        var $279=(($278)&4294967295); //@line 1747 "textio.c"
        var $280=HEAP[$279]; //@line 1747 "textio.c"
        var $281=((($280) - 1)&4294967295); //@line 1747 "textio.c"
        var $282=HEAP[$_py_tmp57]; //@line 1747 "textio.c"
        var $283=(($282)&4294967295); //@line 1747 "textio.c"
        HEAP[$283]=$281; //@line 1747 "textio.c"
        var $284=HEAP[$_py_tmp57]; //@line 1747 "textio.c"
        var $285=(($284)&4294967295); //@line 1747 "textio.c"
        var $286=HEAP[$285]; //@line 1747 "textio.c"
        var $287=((($286))|0)==0; //@line 1747 "textio.c"
        if ($287) { __label__ = 57; break; } else { __label__ = 58; break; } //@line 1747 "textio.c"
      case 57: // $bb58
        var $288=HEAP[$_py_tmp57]; //@line 1747 "textio.c"
        var $289=(($288+4)&4294967295); //@line 1747 "textio.c"
        var $290=HEAP[$289]; //@line 1747 "textio.c"
        var $291=(($290+24)&4294967295); //@line 1747 "textio.c"
        var $292=HEAP[$291]; //@line 1747 "textio.c"
        var $293=HEAP[$_py_tmp57]; //@line 1747 "textio.c"
        FUNCTION_TABLE[$292]($293); //@line 1747 "textio.c"
        __label__ = 58; break; //@line 1747 "textio.c"
      case 58: // $bb59
        var $294=HEAP[$self_addr]; //@line 1749 "textio.c"
        _textiowrapper_set_decoded_chars($294, 0); //@line 1749 "textio.c"
        __label__ = 17; break; //@line 1749 "textio.c"
      case 59: // $bb60
        var $295=HEAP[$line]; //@line 1752 "textio.c"
        var $296=($295)!=0; //@line 1752 "textio.c"
        if ($296) { __label__ = 60; break; } else { __label__ = 71; break; } //@line 1752 "textio.c"
      case 60: // $bb61
        var $297=HEAP[$endpos]; //@line 1754 "textio.c"
        var $298=HEAP[$offset_to_buffer]; //@line 1754 "textio.c"
        var $299=((($297) - ($298))&4294967295); //@line 1754 "textio.c"
        var $300=HEAP[$self_addr]; //@line 1754 "textio.c"
        var $301=(($300+68)&4294967295); //@line 1754 "textio.c"
        HEAP[$301]=$299; //@line 1754 "textio.c"
        var $302=HEAP[$start]; //@line 1755 "textio.c"
        var $303=((($302))|0) > 0; //@line 1755 "textio.c"
        if ($303) { __label__ = 62; break; } else { __label__ = 61; break; } //@line 1755 "textio.c"
      case 61: // $bb62
        var $304=HEAP[$line]; //@line 1755 "textio.c"
        var $305=$304; //@line 1755 "textio.c"
        var $306=(($305+8)&4294967295); //@line 1755 "textio.c"
        var $307=HEAP[$306]; //@line 1755 "textio.c"
        var $308=HEAP[$endpos]; //@line 1755 "textio.c"
        var $309=((($307))|0) > ((($308))|0); //@line 1755 "textio.c"
        if ($309) { __label__ = 62; break; } else { __label__ = 71; break; } //@line 1755 "textio.c"
      case 62: // $bb63
        var $310=HEAP[$start]; //@line 1756 "textio.c"
        var $311=((($310))|0)!=0; //@line 1756 "textio.c"
        if ($311) { __label__ = 66; break; } else { __label__ = 63; break; } //@line 1756 "textio.c"
      case 63: // $bb64
        var $312=HEAP[$line]; //@line 1756 "textio.c"
        var $313=(($312)&4294967295); //@line 1756 "textio.c"
        var $314=HEAP[$313]; //@line 1756 "textio.c"
        var $315=((($314))|0)!=1; //@line 1756 "textio.c"
        if ($315) { __label__ = 66; break; } else { __label__ = 64; break; } //@line 1756 "textio.c"
      case 64: // $bb65
        var $316=HEAP[$endpos]; //@line 1757 "textio.c"
        var $317=_PyUnicodeUCS2_Resize($line, $316); //@line 1757 "textio.c"
        var $318=((($317))|0) < 0; //@line 1757 "textio.c"
        if ($318) { __label__ = 90; break; } else { __label__ = 65; break; } //@line 1757 "textio.c"
      case 65: // $bb66
        __label__ = 71; break; //@line 1757 "textio.c"
      case 66: // $bb67
        var $319=HEAP[$endpos]; //@line 1762 "textio.c"
        var $320=HEAP[$start]; //@line 1762 "textio.c"
        var $321=((($319) - ($320))&4294967295); //@line 1762 "textio.c"
        var $322=HEAP[$line]; //@line 1762 "textio.c"
        var $323=$322; //@line 1762 "textio.c"
        var $324=(($323+12)&4294967295); //@line 1762 "textio.c"
        var $325=HEAP[$324]; //@line 1762 "textio.c"
        var $326=HEAP[$start]; //@line 1762 "textio.c"
        var $327=(($325+2*$326)&4294967295); //@line 1762 "textio.c"
        var $328=_PyUnicodeUCS2_FromUnicode($327, $321); //@line 1762 "textio.c"
        HEAP[$s68]=$328; //@line 1762 "textio.c"
        var $329=HEAP[$line]; //@line 1763 "textio.c"
        var $330=($329)!=0; //@line 1763 "textio.c"
        if ($330) { __label__ = 67; break; } else { __label__ = 69; break; } //@line 1763 "textio.c"
      case 67: // $bb69
        var $331=HEAP[$line]; //@line 1763 "textio.c"
        HEAP[$_py_tmp70]=$331; //@line 1763 "textio.c"
        HEAP[$line]=0; //@line 1763 "textio.c"
        var $332=HEAP[$_py_tmp70]; //@line 1763 "textio.c"
        var $333=(($332)&4294967295); //@line 1763 "textio.c"
        var $334=HEAP[$333]; //@line 1763 "textio.c"
        var $335=((($334) - 1)&4294967295); //@line 1763 "textio.c"
        var $336=HEAP[$_py_tmp70]; //@line 1763 "textio.c"
        var $337=(($336)&4294967295); //@line 1763 "textio.c"
        HEAP[$337]=$335; //@line 1763 "textio.c"
        var $338=HEAP[$_py_tmp70]; //@line 1763 "textio.c"
        var $339=(($338)&4294967295); //@line 1763 "textio.c"
        var $340=HEAP[$339]; //@line 1763 "textio.c"
        var $341=((($340))|0)==0; //@line 1763 "textio.c"
        if ($341) { __label__ = 68; break; } else { __label__ = 69; break; } //@line 1763 "textio.c"
      case 68: // $bb71
        var $342=HEAP[$_py_tmp70]; //@line 1763 "textio.c"
        var $343=(($342+4)&4294967295); //@line 1763 "textio.c"
        var $344=HEAP[$343]; //@line 1763 "textio.c"
        var $345=(($344+24)&4294967295); //@line 1763 "textio.c"
        var $346=HEAP[$345]; //@line 1763 "textio.c"
        var $347=HEAP[$_py_tmp70]; //@line 1763 "textio.c"
        FUNCTION_TABLE[$346]($347); //@line 1763 "textio.c"
        __label__ = 69; break; //@line 1763 "textio.c"
      case 69: // $bb72
        var $348=HEAP[$s68]; //@line 1764 "textio.c"
        var $349=($348)==0; //@line 1764 "textio.c"
        if ($349) { __label__ = 90; break; } else { __label__ = 70; break; } //@line 1764 "textio.c"
      case 70: // $bb73
        var $350=HEAP[$s68]; //@line 1766 "textio.c"
        HEAP[$line]=$350; //@line 1766 "textio.c"
        __label__ = 71; break; //@line 1766 "textio.c"
      case 71: // $bb74
        var $351=HEAP[$remaining]; //@line 1770 "textio.c"
        var $352=($351)!=0; //@line 1770 "textio.c"
        if ($352) { __label__ = 72; break; } else { __label__ = 78; break; } //@line 1770 "textio.c"
      case 72: // $bb75
        var $353=HEAP[$chunks]; //@line 1771 "textio.c"
        var $354=($353)==0; //@line 1771 "textio.c"
        if ($354) { __label__ = 73; break; } else { __label__ = 74; break; } //@line 1771 "textio.c"
      case 73: // $bb76
        var $355=_PyList_New(0); //@line 1772 "textio.c"
        HEAP[$chunks]=$355; //@line 1772 "textio.c"
        var $356=HEAP[$chunks]; //@line 1773 "textio.c"
        var $357=($356)==0; //@line 1773 "textio.c"
        if ($357) { __label__ = 90; break; } else { __label__ = 74; break; } //@line 1773 "textio.c"
      case 74: // $bb77
        var $358=HEAP[$chunks]; //@line 1776 "textio.c"
        var $359=HEAP[$remaining]; //@line 1776 "textio.c"
        var $360=_PyList_Append($358, $359); //@line 1776 "textio.c"
        var $361=((($360))|0) < 0; //@line 1776 "textio.c"
        if ($361) { __label__ = 90; break; } else { __label__ = 75; break; } //@line 1776 "textio.c"
      case 75: // $bb78
        var $362=HEAP[$remaining]; //@line 1778 "textio.c"
        var $363=($362)!=0; //@line 1778 "textio.c"
        if ($363) { __label__ = 76; break; } else { __label__ = 78; break; } //@line 1778 "textio.c"
      case 76: // $bb79
        var $364=HEAP[$remaining]; //@line 1778 "textio.c"
        HEAP[$_py_tmp80]=$364; //@line 1778 "textio.c"
        HEAP[$remaining]=0; //@line 1778 "textio.c"
        var $365=HEAP[$_py_tmp80]; //@line 1778 "textio.c"
        var $366=(($365)&4294967295); //@line 1778 "textio.c"
        var $367=HEAP[$366]; //@line 1778 "textio.c"
        var $368=((($367) - 1)&4294967295); //@line 1778 "textio.c"
        var $369=HEAP[$_py_tmp80]; //@line 1778 "textio.c"
        var $370=(($369)&4294967295); //@line 1778 "textio.c"
        HEAP[$370]=$368; //@line 1778 "textio.c"
        var $371=HEAP[$_py_tmp80]; //@line 1778 "textio.c"
        var $372=(($371)&4294967295); //@line 1778 "textio.c"
        var $373=HEAP[$372]; //@line 1778 "textio.c"
        var $374=((($373))|0)==0; //@line 1778 "textio.c"
        if ($374) { __label__ = 77; break; } else { __label__ = 78; break; } //@line 1778 "textio.c"
      case 77: // $bb81
        var $375=HEAP[$_py_tmp80]; //@line 1778 "textio.c"
        var $376=(($375+4)&4294967295); //@line 1778 "textio.c"
        var $377=HEAP[$376]; //@line 1778 "textio.c"
        var $378=(($377+24)&4294967295); //@line 1778 "textio.c"
        var $379=HEAP[$378]; //@line 1778 "textio.c"
        var $380=HEAP[$_py_tmp80]; //@line 1778 "textio.c"
        FUNCTION_TABLE[$379]($380); //@line 1778 "textio.c"
        __label__ = 78; break; //@line 1778 "textio.c"
      case 78: // $bb82
        var $381=HEAP[$chunks]; //@line 1780 "textio.c"
        var $382=($381)!=0; //@line 1780 "textio.c"
        if ($382) { __label__ = 79; break; } else { __label__ = 87; break; } //@line 1780 "textio.c"
      case 79: // $bb83
        var $383=HEAP[$line]; //@line 1781 "textio.c"
        var $384=($383)!=0; //@line 1781 "textio.c"
        if ($384) { __label__ = 80; break; } else { __label__ = 81; break; } //@line 1781 "textio.c"
      case 80: // $bb84
        var $385=HEAP[$line]; //@line 1781 "textio.c"
        var $386=HEAP[$chunks]; //@line 1781 "textio.c"
        var $387=_PyList_Append($386, $385); //@line 1781 "textio.c"
        var $388=((($387))|0) < 0; //@line 1781 "textio.c"
        if ($388) { __label__ = 90; break; } else { __label__ = 81; break; } //@line 1781 "textio.c"
      case 81: // $bb85
        var $389=HEAP[$line]; //@line 1783 "textio.c"
        var $390=($389)!=0; //@line 1783 "textio.c"
        if ($390) { __label__ = 82; break; } else { __label__ = 84; break; } //@line 1783 "textio.c"
      case 82: // $bb86
        var $391=HEAP[$line]; //@line 1783 "textio.c"
        HEAP[$_py_tmp87]=$391; //@line 1783 "textio.c"
        HEAP[$line]=0; //@line 1783 "textio.c"
        var $392=HEAP[$_py_tmp87]; //@line 1783 "textio.c"
        var $393=(($392)&4294967295); //@line 1783 "textio.c"
        var $394=HEAP[$393]; //@line 1783 "textio.c"
        var $395=((($394) - 1)&4294967295); //@line 1783 "textio.c"
        var $396=HEAP[$_py_tmp87]; //@line 1783 "textio.c"
        var $397=(($396)&4294967295); //@line 1783 "textio.c"
        HEAP[$397]=$395; //@line 1783 "textio.c"
        var $398=HEAP[$_py_tmp87]; //@line 1783 "textio.c"
        var $399=(($398)&4294967295); //@line 1783 "textio.c"
        var $400=HEAP[$399]; //@line 1783 "textio.c"
        var $401=((($400))|0)==0; //@line 1783 "textio.c"
        if ($401) { __label__ = 83; break; } else { __label__ = 84; break; } //@line 1783 "textio.c"
      case 83: // $bb88
        var $402=HEAP[$_py_tmp87]; //@line 1783 "textio.c"
        var $403=(($402+4)&4294967295); //@line 1783 "textio.c"
        var $404=HEAP[$403]; //@line 1783 "textio.c"
        var $405=(($404+24)&4294967295); //@line 1783 "textio.c"
        var $406=HEAP[$405]; //@line 1783 "textio.c"
        var $407=HEAP[$_py_tmp87]; //@line 1783 "textio.c"
        FUNCTION_TABLE[$406]($407); //@line 1783 "textio.c"
        __label__ = 84; break; //@line 1783 "textio.c"
      case 84: // $bb89
        var $408=HEAP[__PyIO_empty_str]; //@line 1784 "textio.c"
        var $409=HEAP[$chunks]; //@line 1784 "textio.c"
        var $410=_PyUnicodeUCS2_Join($408, $409); //@line 1784 "textio.c"
        HEAP[$line]=$410; //@line 1784 "textio.c"
        var $411=HEAP[$line]; //@line 1785 "textio.c"
        var $412=($411)==0; //@line 1785 "textio.c"
        if ($412) { __label__ = 90; break; } else { __label__ = 85; break; } //@line 1785 "textio.c"
      case 85: // $bb90
        var $413=HEAP[$chunks]; //@line 1787 "textio.c"
        var $414=(($413)&4294967295); //@line 1787 "textio.c"
        var $415=HEAP[$414]; //@line 1787 "textio.c"
        var $416=((($415) - 1)&4294967295); //@line 1787 "textio.c"
        var $417=HEAP[$chunks]; //@line 1787 "textio.c"
        var $418=(($417)&4294967295); //@line 1787 "textio.c"
        HEAP[$418]=$416; //@line 1787 "textio.c"
        var $419=HEAP[$chunks]; //@line 1787 "textio.c"
        var $420=(($419)&4294967295); //@line 1787 "textio.c"
        var $421=HEAP[$420]; //@line 1787 "textio.c"
        var $422=((($421))|0)==0; //@line 1787 "textio.c"
        if ($422) { __label__ = 86; break; } else { __label__ = 87; break; } //@line 1787 "textio.c"
      case 86: // $bb91
        var $423=HEAP[$chunks]; //@line 1787 "textio.c"
        var $424=(($423+4)&4294967295); //@line 1787 "textio.c"
        var $425=HEAP[$424]; //@line 1787 "textio.c"
        var $426=(($425+24)&4294967295); //@line 1787 "textio.c"
        var $427=HEAP[$426]; //@line 1787 "textio.c"
        var $428=HEAP[$chunks]; //@line 1787 "textio.c"
        FUNCTION_TABLE[$427]($428); //@line 1787 "textio.c"
        __label__ = 87; break; //@line 1787 "textio.c"
      case 87: // $bb92
        var $429=HEAP[$line]; //@line 1789 "textio.c"
        var $430=($429)==0; //@line 1789 "textio.c"
        if ($430) { __label__ = 88; break; } else { __label__ = 89; break; } //@line 1789 "textio.c"
      case 88: // $bb93
        var $431=_PyUnicodeUCS2_FromStringAndSize(0, 0); //@line 1790 "textio.c"
        HEAP[$line]=$431; //@line 1790 "textio.c"
        __label__ = 89; break; //@line 1790 "textio.c"
      case 89: // $bb94
        var $432=HEAP[$line]; //@line 1792 "textio.c"
        HEAP[$0]=$432; //@line 1792 "textio.c"
        __label__ = 100; break; //@line 1792 "textio.c"
      case 90: // $error
        var $433=HEAP[$chunks]; //@line 1795 "textio.c"
        var $434=($433)!=0; //@line 1795 "textio.c"
        if ($434) { __label__ = 91; break; } else { __label__ = 93; break; } //@line 1795 "textio.c"
      case 91: // $bb95
        var $435=HEAP[$chunks]; //@line 1795 "textio.c"
        var $436=(($435)&4294967295); //@line 1795 "textio.c"
        var $437=HEAP[$436]; //@line 1795 "textio.c"
        var $438=((($437) - 1)&4294967295); //@line 1795 "textio.c"
        var $439=HEAP[$chunks]; //@line 1795 "textio.c"
        var $440=(($439)&4294967295); //@line 1795 "textio.c"
        HEAP[$440]=$438; //@line 1795 "textio.c"
        var $441=HEAP[$chunks]; //@line 1795 "textio.c"
        var $442=(($441)&4294967295); //@line 1795 "textio.c"
        var $443=HEAP[$442]; //@line 1795 "textio.c"
        var $444=((($443))|0)==0; //@line 1795 "textio.c"
        if ($444) { __label__ = 92; break; } else { __label__ = 93; break; } //@line 1795 "textio.c"
      case 92: // $bb96
        var $445=HEAP[$chunks]; //@line 1795 "textio.c"
        var $446=(($445+4)&4294967295); //@line 1795 "textio.c"
        var $447=HEAP[$446]; //@line 1795 "textio.c"
        var $448=(($447+24)&4294967295); //@line 1795 "textio.c"
        var $449=HEAP[$448]; //@line 1795 "textio.c"
        var $450=HEAP[$chunks]; //@line 1795 "textio.c"
        FUNCTION_TABLE[$449]($450); //@line 1795 "textio.c"
        __label__ = 93; break; //@line 1795 "textio.c"
      case 93: // $bb97
        var $451=HEAP[$remaining]; //@line 1796 "textio.c"
        var $452=($451)!=0; //@line 1796 "textio.c"
        if ($452) { __label__ = 94; break; } else { __label__ = 96; break; } //@line 1796 "textio.c"
      case 94: // $bb98
        var $453=HEAP[$remaining]; //@line 1796 "textio.c"
        var $454=(($453)&4294967295); //@line 1796 "textio.c"
        var $455=HEAP[$454]; //@line 1796 "textio.c"
        var $456=((($455) - 1)&4294967295); //@line 1796 "textio.c"
        var $457=HEAP[$remaining]; //@line 1796 "textio.c"
        var $458=(($457)&4294967295); //@line 1796 "textio.c"
        HEAP[$458]=$456; //@line 1796 "textio.c"
        var $459=HEAP[$remaining]; //@line 1796 "textio.c"
        var $460=(($459)&4294967295); //@line 1796 "textio.c"
        var $461=HEAP[$460]; //@line 1796 "textio.c"
        var $462=((($461))|0)==0; //@line 1796 "textio.c"
        if ($462) { __label__ = 95; break; } else { __label__ = 96; break; } //@line 1796 "textio.c"
      case 95: // $bb99
        var $463=HEAP[$remaining]; //@line 1796 "textio.c"
        var $464=(($463+4)&4294967295); //@line 1796 "textio.c"
        var $465=HEAP[$464]; //@line 1796 "textio.c"
        var $466=(($465+24)&4294967295); //@line 1796 "textio.c"
        var $467=HEAP[$466]; //@line 1796 "textio.c"
        var $468=HEAP[$remaining]; //@line 1796 "textio.c"
        FUNCTION_TABLE[$467]($468); //@line 1796 "textio.c"
        __label__ = 96; break; //@line 1796 "textio.c"
      case 96: // $bb100
        var $469=HEAP[$line]; //@line 1797 "textio.c"
        var $470=($469)!=0; //@line 1797 "textio.c"
        if ($470) { __label__ = 97; break; } else { __label__ = 99; break; } //@line 1797 "textio.c"
      case 97: // $bb101
        var $471=HEAP[$line]; //@line 1797 "textio.c"
        var $472=(($471)&4294967295); //@line 1797 "textio.c"
        var $473=HEAP[$472]; //@line 1797 "textio.c"
        var $474=((($473) - 1)&4294967295); //@line 1797 "textio.c"
        var $475=(($471)&4294967295); //@line 1797 "textio.c"
        HEAP[$475]=$474; //@line 1797 "textio.c"
        var $476=(($471)&4294967295); //@line 1797 "textio.c"
        var $477=HEAP[$476]; //@line 1797 "textio.c"
        var $478=((($477))|0)==0; //@line 1797 "textio.c"
        if ($478) { __label__ = 98; break; } else { __label__ = 99; break; } //@line 1797 "textio.c"
      case 98: // $bb102
        var $479=HEAP[$line]; //@line 1797 "textio.c"
        var $480=(($479+4)&4294967295); //@line 1797 "textio.c"
        var $481=HEAP[$480]; //@line 1797 "textio.c"
        var $482=(($481+24)&4294967295); //@line 1797 "textio.c"
        var $483=HEAP[$482]; //@line 1797 "textio.c"
        var $484=HEAP[$line]; //@line 1797 "textio.c"
        FUNCTION_TABLE[$483]($484); //@line 1797 "textio.c"
        __label__ = 99; break; //@line 1797 "textio.c"
      case 99: // $bb103
        HEAP[$0]=0; //@line 1798 "textio.c"
        __label__ = 100; break; //@line 1798 "textio.c"
      case 100: // $bb104
        var $485=HEAP[$0]; //@line 1654 "textio.c"
        HEAP[$retval]=$485; //@line 1654 "textio.c"
        __label__ = 101; break; //@line 1654 "textio.c"
      case 101: // $return
        var $retval105=HEAP[$retval]; //@line 1654 "textio.c"
        STACKTOP = __stackBase__;
        return $retval105; //@line 1654 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_readline($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $limitobj=__stackBase__+16;
        var $limit=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$limitobj]=0; //@line 1804 "textio.c"
        HEAP[$limit]=-1; //@line 1805 "textio.c"
        var $1=HEAP[$self_addr]; //@line 1807 "textio.c"
        var $2=(($1+8)&4294967295); //@line 1807 "textio.c"
        var $3=HEAP[$2]; //@line 1807 "textio.c"
        var $4=((($3))|0) <= 0; //@line 1807 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 1807 "textio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 1807 "textio.c"
        var $6=(($5+12)&4294967295); //@line 1807 "textio.c"
        var $7=HEAP[$6]; //@line 1807 "textio.c"
        var $8=((($7))|0)!=0; //@line 1807 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1807 "textio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 1807 "textio.c"
        _PyErr_SetString($9, ((__str57433)&4294967295)); //@line 1807 "textio.c"
        __label__ = 4; break; //@line 1807 "textio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 1807 "textio.c"
        _PyErr_SetString($10, ((__str58434)&4294967295)); //@line 1807 "textio.c"
        __label__ = 4; break; //@line 1807 "textio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 1807 "textio.c"
        __label__ = 14; break; //@line 1807 "textio.c"
      case 5: // $bb4
        var $11=HEAP[$args_addr]; //@line 1808 "textio.c"
        var $12=__PyArg_ParseTuple_SizeT($11, ((__str71447)&4294967295), $limitobj); //@line 1808 "textio.c"
        var $13=((($12))|0)==0; //@line 1808 "textio.c"
        if ($13) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1808 "textio.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 1809 "textio.c"
        __label__ = 14; break; //@line 1809 "textio.c"
      case 7: // $bb6
        var $14=HEAP[$limitobj]; //@line 1811 "textio.c"
        var $15=($14)!=0; //@line 1811 "textio.c"
        if ($15) { __label__ = 8; break; } else { __label__ = 13; break; } //@line 1811 "textio.c"
      case 8: // $bb7
        var $16=HEAP[$limitobj]; //@line 1812 "textio.c"
        var $17=_PyNumber_Check($16); //@line 1812 "textio.c"
        var $18=((($17))|0)==0; //@line 1812 "textio.c"
        if ($18) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1812 "textio.c"
      case 9: // $bb8
        var $19=HEAP[$limitobj]; //@line 1813 "textio.c"
        var $20=(($19+4)&4294967295); //@line 1813 "textio.c"
        var $21=HEAP[$20]; //@line 1813 "textio.c"
        var $22=(($21+12)&4294967295); //@line 1813 "textio.c"
        var $23=HEAP[$22]; //@line 1813 "textio.c"
        var $24=HEAP[_PyExc_TypeError]; //@line 1813 "textio.c"
        var $25=_PyErr_Format($24, ((__str72448)&4294967295), $23); //@line 1813 "textio.c"
        HEAP[$0]=0; //@line 1816 "textio.c"
        __label__ = 14; break; //@line 1816 "textio.c"
      case 10: // $bb9
        var $26=HEAP[_PyExc_OverflowError]; //@line 1818 "textio.c"
        var $27=HEAP[$limitobj]; //@line 1818 "textio.c"
        var $28=_PyNumber_AsSsize_t($27, $26); //@line 1818 "textio.c"
        HEAP[$limit]=$28; //@line 1818 "textio.c"
        var $29=HEAP[$limit]; //@line 1819 "textio.c"
        var $30=((($29))|0)==-1; //@line 1819 "textio.c"
        if ($30) { __label__ = 11; break; } else { __label__ = 13; break; } //@line 1819 "textio.c"
      case 11: // $bb10
        var $31=_PyErr_Occurred(); //@line 1819 "textio.c"
        var $32=($31)!=0; //@line 1819 "textio.c"
        if ($32) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1819 "textio.c"
      case 12: // $bb11
        HEAP[$0]=0; //@line 1820 "textio.c"
        __label__ = 14; break; //@line 1820 "textio.c"
      case 13: // $bb12
        var $33=HEAP[$self_addr]; //@line 1822 "textio.c"
        var $34=HEAP[$limit]; //@line 1822 "textio.c"
        var $35=__textiowrapper_readline($33, $34); //@line 1822 "textio.c"
        HEAP[$0]=$35; //@line 1822 "textio.c"
        __label__ = 14; break; //@line 1822 "textio.c"
      case 14: // $bb13
        var $36=HEAP[$0]; //@line 1807 "textio.c"
        HEAP[$retval]=$36; //@line 1807 "textio.c"
        __label__ = 15; break; //@line 1807 "textio.c"
      case 15: // $return
        var $retval14=HEAP[$retval]; //@line 1807 "textio.c"
        STACKTOP = __stackBase__;
        return $retval14; //@line 1807 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_parse_cookie($cookie, $cookieObj) {
    var __stackBase__  = STACKTOP; STACKTOP += 41; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 41);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $cookie_addr=__stackBase__;
        var $cookieObj_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $buffer=__stackBase__+16;
        var $cookieLong=__stackBase__+37;
        var $_alloca_point_=0;
        HEAP[$cookie_addr]=$cookie;
        HEAP[$cookieObj_addr]=$cookieObj;
        var $1=HEAP[$cookieObj_addr]; //@line 1877 "textio.c"
        var $2=_PyNumber_Long($1); //@line 1877 "textio.c"
        var $3=$2; //@line 1877 "textio.c"
        HEAP[$cookieLong]=$3; //@line 1877 "textio.c"
        var $4=HEAP[$cookieLong]; //@line 1878 "textio.c"
        var $5=($4)==0; //@line 1878 "textio.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1878 "textio.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 1879 "textio.c"
        __label__ = 9; break; //@line 1879 "textio.c"
      case 2: // $bb1
        var $6=HEAP[$cookieLong]; //@line 1881 "textio.c"
        var $buffer2=$buffer; //@line 1881 "textio.c"
        var $7=__PyLong_AsByteArray($6, $buffer2, 21, 1, 0); //@line 1881 "textio.c"
        var $8=((($7))|0) < 0; //@line 1881 "textio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 1881 "textio.c"
      case 3: // $bb3
        var $9=HEAP[$cookieLong]; //@line 1883 "textio.c"
        var $10=$9; //@line 1883 "textio.c"
        var $11=(($10)&4294967295); //@line 1883 "textio.c"
        var $12=HEAP[$11]; //@line 1883 "textio.c"
        var $13=((($12) - 1)&4294967295); //@line 1883 "textio.c"
        var $14=(($10)&4294967295); //@line 1883 "textio.c"
        HEAP[$14]=$13; //@line 1883 "textio.c"
        var $15=(($10)&4294967295); //@line 1883 "textio.c"
        var $16=HEAP[$15]; //@line 1883 "textio.c"
        var $17=((($16))|0)==0; //@line 1883 "textio.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1883 "textio.c"
      case 4: // $bb4
        var $18=HEAP[$cookieLong]; //@line 1883 "textio.c"
        var $19=$18; //@line 1883 "textio.c"
        var $20=(($19+4)&4294967295); //@line 1883 "textio.c"
        var $21=HEAP[$20]; //@line 1883 "textio.c"
        var $22=(($21+24)&4294967295); //@line 1883 "textio.c"
        var $23=HEAP[$22]; //@line 1883 "textio.c"
        var $24=HEAP[$cookieLong]; //@line 1883 "textio.c"
        var $25=$24; //@line 1883 "textio.c"
        FUNCTION_TABLE[$23]($25); //@line 1883 "textio.c"
        __label__ = 5; break; //@line 1883 "textio.c"
      case 5: // $bb5
        HEAP[$0]=-1; //@line 1884 "textio.c"
        __label__ = 9; break; //@line 1884 "textio.c"
      case 6: // $bb6
        var $26=HEAP[$cookieLong]; //@line 1886 "textio.c"
        var $27=$26; //@line 1886 "textio.c"
        var $28=(($27)&4294967295); //@line 1886 "textio.c"
        var $29=HEAP[$28]; //@line 1886 "textio.c"
        var $30=((($29) - 1)&4294967295); //@line 1886 "textio.c"
        var $31=(($27)&4294967295); //@line 1886 "textio.c"
        HEAP[$31]=$30; //@line 1886 "textio.c"
        var $32=(($27)&4294967295); //@line 1886 "textio.c"
        var $33=HEAP[$32]; //@line 1886 "textio.c"
        var $34=((($33))|0)==0; //@line 1886 "textio.c"
        if ($34) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1886 "textio.c"
      case 7: // $bb7
        var $35=HEAP[$cookieLong]; //@line 1886 "textio.c"
        var $36=$35; //@line 1886 "textio.c"
        var $37=(($36+4)&4294967295); //@line 1886 "textio.c"
        var $38=HEAP[$37]; //@line 1886 "textio.c"
        var $39=(($38+24)&4294967295); //@line 1886 "textio.c"
        var $40=HEAP[$39]; //@line 1886 "textio.c"
        var $41=HEAP[$cookieLong]; //@line 1886 "textio.c"
        var $42=$41; //@line 1886 "textio.c"
        FUNCTION_TABLE[$40]($42); //@line 1886 "textio.c"
        __label__ = 8; break; //@line 1886 "textio.c"
      case 8: // $bb8
        var $43=HEAP[$cookie_addr]; //@line 1888 "textio.c"
        var $44=(($43)&4294967295); //@line 1888 "textio.c"
        var $buffer9=$buffer; //@line 1888 "textio.c"
        var $45=(($buffer9)&4294967295); //@line 1888 "textio.c"
        var $46=$44; //@line 1888 "textio.c"
        _llvm_memcpy_p0i8_p0i8_i32($46, $45, 8, 1, 0); //@line 1888 "textio.c"
        var $47=HEAP[$cookie_addr]; //@line 1889 "textio.c"
        var $48=(($47+8)&4294967295); //@line 1889 "textio.c"
        var $buffer10=$buffer; //@line 1889 "textio.c"
        var $49=(($buffer10+8)&4294967295); //@line 1889 "textio.c"
        var $50=$48; //@line 1889 "textio.c"
        _llvm_memcpy_p0i8_p0i8_i32($50, $49, 4, 1, 0); //@line 1889 "textio.c"
        var $51=HEAP[$cookie_addr]; //@line 1890 "textio.c"
        var $52=(($51+12)&4294967295); //@line 1890 "textio.c"
        var $buffer11=$buffer; //@line 1890 "textio.c"
        var $53=(($buffer11+12)&4294967295); //@line 1890 "textio.c"
        var $54=$52; //@line 1890 "textio.c"
        _llvm_memcpy_p0i8_p0i8_i32($54, $53, 4, 1, 0); //@line 1890 "textio.c"
        var $55=HEAP[$cookie_addr]; //@line 1891 "textio.c"
        var $56=(($55+16)&4294967295); //@line 1891 "textio.c"
        var $buffer12=$buffer; //@line 1891 "textio.c"
        var $57=(($buffer12+16)&4294967295); //@line 1891 "textio.c"
        var $58=$56; //@line 1891 "textio.c"
        _llvm_memcpy_p0i8_p0i8_i32($58, $57, 4, 1, 0); //@line 1891 "textio.c"
        var $59=HEAP[$cookie_addr]; //@line 1892 "textio.c"
        var $60=(($59+20)&4294967295); //@line 1892 "textio.c"
        var $buffer13=$buffer; //@line 1892 "textio.c"
        var $61=(($buffer13+20)&4294967295); //@line 1892 "textio.c"
        _llvm_memcpy_p0i8_p0i8_i32($60, $61, 1, 1, 0); //@line 1892 "textio.c"
        HEAP[$0]=0; //@line 1894 "textio.c"
        __label__ = 9; break; //@line 1894 "textio.c"
      case 9: // $bb14
        var $62=HEAP[$0]; //@line 1879 "textio.c"
        HEAP[$retval]=$62; //@line 1879 "textio.c"
        __label__ = 10; break; //@line 1879 "textio.c"
      case 10: // $return
        var $retval15=HEAP[$retval]; //@line 1879 "textio.c"
        STACKTOP = __stackBase__;
        return $retval15; //@line 1879 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_build_cookie($cookie) {
    var __stackBase__  = STACKTOP; STACKTOP += 33; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 33);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $cookie_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $buffer=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$cookie_addr]=$cookie;
        var $1=HEAP[$cookie_addr]; //@line 1902 "textio.c"
        var $2=(($1)&4294967295); //@line 1902 "textio.c"
        var $buffer1=$buffer; //@line 1902 "textio.c"
        var $3=(($buffer1)&4294967295); //@line 1902 "textio.c"
        var $4=$2; //@line 1902 "textio.c"
        _llvm_memcpy_p0i8_p0i8_i32($3, $4, 8, 1, 0); //@line 1902 "textio.c"
        var $5=HEAP[$cookie_addr]; //@line 1903 "textio.c"
        var $6=(($5+8)&4294967295); //@line 1903 "textio.c"
        var $buffer2=$buffer; //@line 1903 "textio.c"
        var $7=(($buffer2+8)&4294967295); //@line 1903 "textio.c"
        var $8=$6; //@line 1903 "textio.c"
        _llvm_memcpy_p0i8_p0i8_i32($7, $8, 4, 1, 0); //@line 1903 "textio.c"
        var $9=HEAP[$cookie_addr]; //@line 1904 "textio.c"
        var $10=(($9+12)&4294967295); //@line 1904 "textio.c"
        var $buffer3=$buffer; //@line 1904 "textio.c"
        var $11=(($buffer3+12)&4294967295); //@line 1904 "textio.c"
        var $12=$10; //@line 1904 "textio.c"
        _llvm_memcpy_p0i8_p0i8_i32($11, $12, 4, 1, 0); //@line 1904 "textio.c"
        var $13=HEAP[$cookie_addr]; //@line 1905 "textio.c"
        var $14=(($13+16)&4294967295); //@line 1905 "textio.c"
        var $buffer4=$buffer; //@line 1905 "textio.c"
        var $15=(($buffer4+16)&4294967295); //@line 1905 "textio.c"
        var $16=$14; //@line 1905 "textio.c"
        _llvm_memcpy_p0i8_p0i8_i32($15, $16, 4, 1, 0); //@line 1905 "textio.c"
        var $17=HEAP[$cookie_addr]; //@line 1906 "textio.c"
        var $18=(($17+20)&4294967295); //@line 1906 "textio.c"
        var $buffer5=$buffer; //@line 1906 "textio.c"
        var $19=(($buffer5+20)&4294967295); //@line 1906 "textio.c"
        _llvm_memcpy_p0i8_p0i8_i32($19, $18, 1, 1, 0); //@line 1906 "textio.c"
        var $buffer6=$buffer; //@line 1908 "textio.c"
        var $20=__PyLong_FromByteArray($buffer6, 21, 1, 0); //@line 1908 "textio.c"
        HEAP[$0]=$20; //@line 1908 "textio.c"
        var $21=HEAP[$0]; //@line 1908 "textio.c"
        HEAP[$retval]=$21; //@line 1908 "textio.c"
        __label__ = 1; break; //@line 1908 "textio.c"
      case 1: // $return
        var $retval7=HEAP[$retval]; //@line 1908 "textio.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 1908 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __textiowrapper_decoder_setstate($self, $cookie) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $cookie_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $res=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$cookie_addr]=$cookie;
        var $1=HEAP[$cookie_addr]; //@line 1922 "textio.c"
        var $2=(($1)&4294967295); //@line 1922 "textio.c"
        var $3=HEAP[$2]; //@line 1922 "textio.c"
        var $4=reSign(($3), 64, 0)!=0; //@line 1922 "textio.c"
        if ($4) { __label__ = 3; break; } else { __label__ = 1; break; } //@line 1922 "textio.c"
      case 1: // $bb
        var $5=HEAP[$cookie_addr]; //@line 1922 "textio.c"
        var $6=(($5+8)&4294967295); //@line 1922 "textio.c"
        var $7=HEAP[$6]; //@line 1922 "textio.c"
        var $8=((($7))|0)!=0; //@line 1922 "textio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 1922 "textio.c"
      case 2: // $bb1
        var $9=HEAP[__PyIO_str_reset]; //@line 1923 "textio.c"
        var $10=HEAP[$self_addr]; //@line 1923 "textio.c"
        var $11=(($10+32)&4294967295); //@line 1923 "textio.c"
        var $12=HEAP[$11]; //@line 1923 "textio.c"
        var $13=_PyObject_CallMethodObjArgs($12, $9, 0); //@line 1923 "textio.c"
        HEAP[$res]=$13; //@line 1923 "textio.c"
        __label__ = 4; break; //@line 1923 "textio.c"
      case 3: // $bb2
        var $14=HEAP[$cookie_addr]; //@line 1925 "textio.c"
        var $15=(($14+8)&4294967295); //@line 1925 "textio.c"
        var $16=HEAP[$15]; //@line 1925 "textio.c"
        var $17=HEAP[$self_addr]; //@line 1925 "textio.c"
        var $18=(($17+32)&4294967295); //@line 1925 "textio.c"
        var $19=HEAP[$18]; //@line 1925 "textio.c"
        var $20=__PyObject_CallMethod_SizeT($19, ((__str22397)&4294967295), ((__str73449)&4294967295), ((__str20395)&4294967295), $16); //@line 1925 "textio.c"
        HEAP[$res]=$20; //@line 1925 "textio.c"
        __label__ = 4; break; //@line 1925 "textio.c"
      case 4: // $bb3
        var $21=HEAP[$res]; //@line 1927 "textio.c"
        var $22=($21)==0; //@line 1927 "textio.c"
        if ($22) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1927 "textio.c"
      case 5: // $bb4
        HEAP[$0]=-1; //@line 1928 "textio.c"
        __label__ = 9; break; //@line 1928 "textio.c"
      case 6: // $bb5
        var $23=HEAP[$res]; //@line 1929 "textio.c"
        var $24=(($23)&4294967295); //@line 1929 "textio.c"
        var $25=HEAP[$24]; //@line 1929 "textio.c"
        var $26=((($25) - 1)&4294967295); //@line 1929 "textio.c"
        var $27=HEAP[$res]; //@line 1929 "textio.c"
        var $28=(($27)&4294967295); //@line 1929 "textio.c"
        HEAP[$28]=$26; //@line 1929 "textio.c"
        var $29=HEAP[$res]; //@line 1929 "textio.c"
        var $30=(($29)&4294967295); //@line 1929 "textio.c"
        var $31=HEAP[$30]; //@line 1929 "textio.c"
        var $32=((($31))|0)==0; //@line 1929 "textio.c"
        if ($32) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1929 "textio.c"
      case 7: // $bb6
        var $33=HEAP[$res]; //@line 1929 "textio.c"
        var $34=(($33+4)&4294967295); //@line 1929 "textio.c"
        var $35=HEAP[$34]; //@line 1929 "textio.c"
        var $36=(($35+24)&4294967295); //@line 1929 "textio.c"
        var $37=HEAP[$36]; //@line 1929 "textio.c"
        var $38=HEAP[$res]; //@line 1929 "textio.c"
        FUNCTION_TABLE[$37]($38); //@line 1929 "textio.c"
        __label__ = 8; break; //@line 1929 "textio.c"
      case 8: // $bb7
        HEAP[$0]=0; //@line 1930 "textio.c"
        __label__ = 9; break; //@line 1930 "textio.c"
      case 9: // $bb8
        var $39=HEAP[$0]; //@line 1928 "textio.c"
        HEAP[$retval]=$39; //@line 1928 "textio.c"
        __label__ = 10; break; //@line 1928 "textio.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 1928 "textio.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 1928 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __textiowrapper_encoder_setstate($self, $cookie) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $cookie_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $res=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$cookie_addr]=$cookie;
        var $1=HEAP[$cookie_addr]; //@line 1938 "textio.c"
        var $2=(($1)&4294967295); //@line 1938 "textio.c"
        var $3=HEAP[$2]; //@line 1938 "textio.c"
        var $4=reSign(($3), 64, 0)!=0; //@line 1938 "textio.c"
        if ($4) { __label__ = 3; break; } else { __label__ = 1; break; } //@line 1938 "textio.c"
      case 1: // $bb
        var $5=HEAP[$cookie_addr]; //@line 1938 "textio.c"
        var $6=(($5+8)&4294967295); //@line 1938 "textio.c"
        var $7=HEAP[$6]; //@line 1938 "textio.c"
        var $8=((($7))|0)!=0; //@line 1938 "textio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 1938 "textio.c"
      case 2: // $bb1
        var $9=HEAP[__PyIO_str_reset]; //@line 1939 "textio.c"
        var $10=HEAP[$self_addr]; //@line 1939 "textio.c"
        var $11=(($10+28)&4294967295); //@line 1939 "textio.c"
        var $12=HEAP[$11]; //@line 1939 "textio.c"
        var $13=_PyObject_CallMethodObjArgs($12, $9, 0); //@line 1939 "textio.c"
        HEAP[$res]=$13; //@line 1939 "textio.c"
        var $14=HEAP[$self_addr]; //@line 1940 "textio.c"
        var $15=(($14+60)&4294967295); //@line 1940 "textio.c"
        HEAP[$15]=1; //@line 1940 "textio.c"
        __label__ = 4; break; //@line 1940 "textio.c"
      case 3: // $bb2
        var $16=HEAP[__PyIO_zero]; //@line 1943 "textio.c"
        var $17=HEAP[__PyIO_str_setstate]; //@line 1943 "textio.c"
        var $18=HEAP[$self_addr]; //@line 1943 "textio.c"
        var $19=(($18+28)&4294967295); //@line 1943 "textio.c"
        var $20=HEAP[$19]; //@line 1943 "textio.c"
        var $21=_PyObject_CallMethodObjArgs($20, $17, $16, 0); //@line 1943 "textio.c"
        HEAP[$res]=$21; //@line 1943 "textio.c"
        var $22=HEAP[$self_addr]; //@line 1945 "textio.c"
        var $23=(($22+60)&4294967295); //@line 1945 "textio.c"
        HEAP[$23]=0; //@line 1945 "textio.c"
        __label__ = 4; break; //@line 1945 "textio.c"
      case 4: // $bb3
        var $24=HEAP[$res]; //@line 1947 "textio.c"
        var $25=($24)==0; //@line 1947 "textio.c"
        if ($25) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1947 "textio.c"
      case 5: // $bb4
        HEAP[$0]=-1; //@line 1948 "textio.c"
        __label__ = 9; break; //@line 1948 "textio.c"
      case 6: // $bb5
        var $26=HEAP[$res]; //@line 1949 "textio.c"
        var $27=(($26)&4294967295); //@line 1949 "textio.c"
        var $28=HEAP[$27]; //@line 1949 "textio.c"
        var $29=((($28) - 1)&4294967295); //@line 1949 "textio.c"
        var $30=HEAP[$res]; //@line 1949 "textio.c"
        var $31=(($30)&4294967295); //@line 1949 "textio.c"
        HEAP[$31]=$29; //@line 1949 "textio.c"
        var $32=HEAP[$res]; //@line 1949 "textio.c"
        var $33=(($32)&4294967295); //@line 1949 "textio.c"
        var $34=HEAP[$33]; //@line 1949 "textio.c"
        var $35=((($34))|0)==0; //@line 1949 "textio.c"
        if ($35) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1949 "textio.c"
      case 7: // $bb6
        var $36=HEAP[$res]; //@line 1949 "textio.c"
        var $37=(($36+4)&4294967295); //@line 1949 "textio.c"
        var $38=HEAP[$37]; //@line 1949 "textio.c"
        var $39=(($38+24)&4294967295); //@line 1949 "textio.c"
        var $40=HEAP[$39]; //@line 1949 "textio.c"
        var $41=HEAP[$res]; //@line 1949 "textio.c"
        FUNCTION_TABLE[$40]($41); //@line 1949 "textio.c"
        __label__ = 8; break; //@line 1949 "textio.c"
      case 8: // $bb7
        HEAP[$0]=0; //@line 1950 "textio.c"
        __label__ = 9; break; //@line 1950 "textio.c"
      case 9: // $bb8
        var $42=HEAP[$0]; //@line 1948 "textio.c"
        HEAP[$retval]=$42; //@line 1948 "textio.c"
        __label__ = 10; break; //@line 1948 "textio.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 1948 "textio.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 1948 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_seek($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 88; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 88);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $cookieObj=__stackBase__+16;
        var $posobj=__stackBase__+20;
        var $cookie=__stackBase__+24;
        var $whence=__stackBase__+48;
        var $res=__stackBase__+52;
        var $cmp=__stackBase__+56;
        var $r=__stackBase__+60;
        var $_res=__stackBase__+64;
        var $_py_tmp=__stackBase__+68;
        var $repr=__stackBase__+72;
        var $_py_tmp68=__stackBase__+76;
        var $input_chunk=__stackBase__+80;
        var $decoded=__stackBase__+84;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$whence]=0; //@line 1958 "textio.c"
        var $1=HEAP[$self_addr]; //@line 1962 "textio.c"
        var $2=(($1+8)&4294967295); //@line 1962 "textio.c"
        var $3=HEAP[$2]; //@line 1962 "textio.c"
        var $4=((($3))|0) <= 0; //@line 1962 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 1962 "textio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 1962 "textio.c"
        var $6=(($5+12)&4294967295); //@line 1962 "textio.c"
        var $7=HEAP[$6]; //@line 1962 "textio.c"
        var $8=((($7))|0)!=0; //@line 1962 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1962 "textio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 1962 "textio.c"
        _PyErr_SetString($9, ((__str57433)&4294967295)); //@line 1962 "textio.c"
        __label__ = 4; break; //@line 1962 "textio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 1962 "textio.c"
        _PyErr_SetString($10, ((__str58434)&4294967295)); //@line 1962 "textio.c"
        __label__ = 4; break; //@line 1962 "textio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 1962 "textio.c"
        __label__ = 92; break; //@line 1962 "textio.c"
      case 5: // $bb4
        var $11=HEAP[$args_addr]; //@line 1964 "textio.c"
        var $12=__PyArg_ParseTuple_SizeT($11, ((__str74)&4294967295), $cookieObj, $whence); //@line 1964 "textio.c"
        var $13=((($12))|0)==0; //@line 1964 "textio.c"
        if ($13) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1964 "textio.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 1965 "textio.c"
        __label__ = 92; break; //@line 1965 "textio.c"
      case 7: // $bb6
        var $14=HEAP[$self_addr]; //@line 1966 "textio.c"
        var $15=$14; //@line 1966 "textio.c"
        var $16=(($15+4)&4294967295); //@line 1966 "textio.c"
        var $17=HEAP[$16]; //@line 1966 "textio.c"
        var $18=($17)==(_PyTextIOWrapper_Type); //@line 1966 "textio.c"
        if ($18) { __label__ = 8; break; } else { __label__ = 19; break; } //@line 1966 "textio.c"
      case 8: // $bb7
        var $19=HEAP[$self_addr]; //@line 1966 "textio.c"
        var $20=(($19+84)&4294967295); //@line 1966 "textio.c"
        var $21=HEAP[$20]; //@line 1966 "textio.c"
        var $22=($21)!=0; //@line 1966 "textio.c"
        if ($22) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1966 "textio.c"
      case 9: // $bb8
        var $23=HEAP[$self_addr]; //@line 1966 "textio.c"
        var $24=(($23+84)&4294967295); //@line 1966 "textio.c"
        var $25=HEAP[$24]; //@line 1966 "textio.c"
        var $26=__PyFileIO_closed($25); //@line 1966 "textio.c"
        HEAP[$r]=$26; //@line 1966 "textio.c"
        __label__ = 16; break; //@line 1966 "textio.c"
      case 10: // $bb9
        var $27=HEAP[$self_addr]; //@line 1966 "textio.c"
        var $28=_textiowrapper_closed_get($27, 0); //@line 1966 "textio.c"
        HEAP[$_res]=$28; //@line 1966 "textio.c"
        var $29=HEAP[$_res]; //@line 1966 "textio.c"
        var $30=($29)==0; //@line 1966 "textio.c"
        if ($30) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1966 "textio.c"
      case 11: // $bb10
        HEAP[$0]=0; //@line 1966 "textio.c"
        __label__ = 92; break; //@line 1966 "textio.c"
      case 12: // $bb11
        var $31=HEAP[$_res]; //@line 1966 "textio.c"
        var $32=_PyObject_IsTrue($31); //@line 1966 "textio.c"
        HEAP[$r]=$32; //@line 1966 "textio.c"
        var $33=HEAP[$_res]; //@line 1966 "textio.c"
        var $34=(($33)&4294967295); //@line 1966 "textio.c"
        var $35=HEAP[$34]; //@line 1966 "textio.c"
        var $36=((($35) - 1)&4294967295); //@line 1966 "textio.c"
        var $37=HEAP[$_res]; //@line 1966 "textio.c"
        var $38=(($37)&4294967295); //@line 1966 "textio.c"
        HEAP[$38]=$36; //@line 1966 "textio.c"
        var $39=HEAP[$_res]; //@line 1966 "textio.c"
        var $40=(($39)&4294967295); //@line 1966 "textio.c"
        var $41=HEAP[$40]; //@line 1966 "textio.c"
        var $42=((($41))|0)==0; //@line 1966 "textio.c"
        if ($42) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1966 "textio.c"
      case 13: // $bb12
        var $43=HEAP[$_res]; //@line 1966 "textio.c"
        var $44=(($43+4)&4294967295); //@line 1966 "textio.c"
        var $45=HEAP[$44]; //@line 1966 "textio.c"
        var $46=(($45+24)&4294967295); //@line 1966 "textio.c"
        var $47=HEAP[$46]; //@line 1966 "textio.c"
        var $48=HEAP[$_res]; //@line 1966 "textio.c"
        FUNCTION_TABLE[$47]($48); //@line 1966 "textio.c"
        __label__ = 14; break; //@line 1966 "textio.c"
      case 14: // $bb13
        var $49=HEAP[$r]; //@line 1966 "textio.c"
        var $50=((($49))|0) < 0; //@line 1966 "textio.c"
        if ($50) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1966 "textio.c"
      case 15: // $bb14
        HEAP[$0]=0; //@line 1966 "textio.c"
        __label__ = 92; break; //@line 1966 "textio.c"
      case 16: // $bb15
        var $51=HEAP[$r]; //@line 1966 "textio.c"
        var $52=((($51))|0) > 0; //@line 1966 "textio.c"
        if ($52) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 1966 "textio.c"
      case 17: // $bb16
        var $53=HEAP[_PyExc_ValueError]; //@line 1966 "textio.c"
        _PyErr_SetString($53, ((__str60436)&4294967295)); //@line 1966 "textio.c"
        HEAP[$0]=0; //@line 1966 "textio.c"
        __label__ = 92; break; //@line 1966 "textio.c"
      case 18: // $bb17
        __label__ = 21; break; //@line 1966 "textio.c"
      case 19: // $bb18
        var $54=HEAP[$self_addr]; //@line 1966 "textio.c"
        var $55=$54; //@line 1966 "textio.c"
        var $56=__PyIOBase_check_closed($55, __Py_TrueStruct); //@line 1966 "textio.c"
        var $57=($56)==0; //@line 1966 "textio.c"
        if ($57) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1966 "textio.c"
      case 20: // $bb19
        HEAP[$0]=0; //@line 1966 "textio.c"
        __label__ = 92; break; //@line 1966 "textio.c"
      case 21: // $bb20
        var $58=HEAP[$cookieObj]; //@line 1968 "textio.c"
        var $59=(($58)&4294967295); //@line 1968 "textio.c"
        var $60=HEAP[$59]; //@line 1968 "textio.c"
        var $61=((($60) + 1)&4294967295); //@line 1968 "textio.c"
        var $62=(($58)&4294967295); //@line 1968 "textio.c"
        HEAP[$62]=$61; //@line 1968 "textio.c"
        var $63=HEAP[$self_addr]; //@line 1970 "textio.c"
        var $64=(($63+52)&4294967295); //@line 1970 "textio.c"
        var $65=HEAP[$64]; //@line 1970 "textio.c"
        var $66=reSign(($65), 8, 0)==0; //@line 1970 "textio.c"
        if ($66) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 1970 "textio.c"
      case 22: // $bb21
        var $67=HEAP[_PyExc_IOError]; //@line 1971 "textio.c"
        _PyErr_SetString($67, ((__str75)&4294967295)); //@line 1971 "textio.c"
        __label__ = 88; break; //@line 1971 "textio.c"
      case 23: // $bb22
        var $68=HEAP[$whence]; //@line 1976 "textio.c"
        var $69=((($68))|0)==1; //@line 1976 "textio.c"
        if ($69) { __label__ = 24; break; } else { __label__ = 31; break; } //@line 1976 "textio.c"
      case 24: // $bb23
        var $70=HEAP[__PyIO_zero]; //@line 1978 "textio.c"
        var $71=HEAP[$cookieObj]; //@line 1978 "textio.c"
        var $72=_PyObject_RichCompareBool($71, $70, 2); //@line 1978 "textio.c"
        HEAP[$cmp]=$72; //@line 1978 "textio.c"
        var $73=HEAP[$cmp]; //@line 1979 "textio.c"
        var $74=((($73))|0) < 0; //@line 1979 "textio.c"
        if ($74) { __label__ = 88; break; } else { __label__ = 25; break; } //@line 1979 "textio.c"
      case 25: // $bb24
        var $75=HEAP[$cmp]; //@line 1982 "textio.c"
        var $76=((($75))|0)==0; //@line 1982 "textio.c"
        if ($76) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1982 "textio.c"
      case 26: // $bb25
        var $77=HEAP[_PyExc_IOError]; //@line 1983 "textio.c"
        _PyErr_SetString($77, ((__str76)&4294967295)); //@line 1983 "textio.c"
        __label__ = 88; break; //@line 1983 "textio.c"
      case 27: // $bb26
        var $78=HEAP[$cookieObj]; //@line 1991 "textio.c"
        var $79=(($78)&4294967295); //@line 1991 "textio.c"
        var $80=HEAP[$79]; //@line 1991 "textio.c"
        var $81=((($80) - 1)&4294967295); //@line 1991 "textio.c"
        var $82=(($78)&4294967295); //@line 1991 "textio.c"
        HEAP[$82]=$81; //@line 1991 "textio.c"
        var $83=(($78)&4294967295); //@line 1991 "textio.c"
        var $84=HEAP[$83]; //@line 1991 "textio.c"
        var $85=((($84))|0)==0; //@line 1991 "textio.c"
        if ($85) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 1991 "textio.c"
      case 28: // $bb27
        var $86=HEAP[$cookieObj]; //@line 1991 "textio.c"
        var $87=(($86+4)&4294967295); //@line 1991 "textio.c"
        var $88=HEAP[$87]; //@line 1991 "textio.c"
        var $89=(($88+24)&4294967295); //@line 1991 "textio.c"
        var $90=HEAP[$89]; //@line 1991 "textio.c"
        var $91=HEAP[$cookieObj]; //@line 1991 "textio.c"
        FUNCTION_TABLE[$90]($91); //@line 1991 "textio.c"
        __label__ = 29; break; //@line 1991 "textio.c"
      case 29: // $bb28
        var $92=HEAP[$self_addr]; //@line 1992 "textio.c"
        var $93=$92; //@line 1992 "textio.c"
        var $94=__PyObject_CallMethod_SizeT($93, ((__str77)&4294967295), 0); //@line 1992 "textio.c"
        HEAP[$cookieObj]=$94; //@line 1992 "textio.c"
        var $95=HEAP[$cookieObj]; //@line 1993 "textio.c"
        var $96=($95)==0; //@line 1993 "textio.c"
        if ($96) { __label__ = 88; break; } else { __label__ = 30; break; } //@line 1993 "textio.c"
      case 30: // $bb29
        __label__ = 51; break; //@line 1993 "textio.c"
      case 31: // $bb30
        var $97=HEAP[$whence]; //@line 1996 "textio.c"
        var $98=((($97))|0)==2; //@line 1996 "textio.c"
        if ($98) { __label__ = 32; break; } else { __label__ = 49; break; } //@line 1996 "textio.c"
      case 32: // $bb31
        var $99=HEAP[__PyIO_zero]; //@line 1999 "textio.c"
        var $100=HEAP[$cookieObj]; //@line 1999 "textio.c"
        var $101=_PyObject_RichCompareBool($100, $99, 2); //@line 1999 "textio.c"
        HEAP[$cmp]=$101; //@line 1999 "textio.c"
        var $102=HEAP[$cmp]; //@line 2000 "textio.c"
        var $103=((($102))|0) < 0; //@line 2000 "textio.c"
        if ($103) { __label__ = 88; break; } else { __label__ = 33; break; } //@line 2000 "textio.c"
      case 33: // $bb32
        var $104=HEAP[$cmp]; //@line 2003 "textio.c"
        var $105=((($104))|0)==0; //@line 2003 "textio.c"
        if ($105) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 2003 "textio.c"
      case 34: // $bb33
        var $106=HEAP[_PyExc_IOError]; //@line 2004 "textio.c"
        _PyErr_SetString($106, ((__str78)&4294967295)); //@line 2004 "textio.c"
        __label__ = 88; break; //@line 2004 "textio.c"
      case 35: // $bb34
        var $107=HEAP[$self_addr]; //@line 2009 "textio.c"
        var $108=$107; //@line 2009 "textio.c"
        var $109=__PyObject_CallMethod_SizeT($108, ((__str79)&4294967295), 0); //@line 2009 "textio.c"
        HEAP[$res]=$109; //@line 2009 "textio.c"
        var $110=HEAP[$res]; //@line 2010 "textio.c"
        var $111=($110)==0; //@line 2010 "textio.c"
        if ($111) { __label__ = 88; break; } else { __label__ = 36; break; } //@line 2010 "textio.c"
      case 36: // $bb35
        var $112=HEAP[$res]; //@line 2012 "textio.c"
        var $113=(($112)&4294967295); //@line 2012 "textio.c"
        var $114=HEAP[$113]; //@line 2012 "textio.c"
        var $115=((($114) - 1)&4294967295); //@line 2012 "textio.c"
        var $116=HEAP[$res]; //@line 2012 "textio.c"
        var $117=(($116)&4294967295); //@line 2012 "textio.c"
        HEAP[$117]=$115; //@line 2012 "textio.c"
        var $118=HEAP[$res]; //@line 2012 "textio.c"
        var $119=(($118)&4294967295); //@line 2012 "textio.c"
        var $120=HEAP[$119]; //@line 2012 "textio.c"
        var $121=((($120))|0)==0; //@line 2012 "textio.c"
        if ($121) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 2012 "textio.c"
      case 37: // $bb36
        var $122=HEAP[$res]; //@line 2012 "textio.c"
        var $123=(($122+4)&4294967295); //@line 2012 "textio.c"
        var $124=HEAP[$123]; //@line 2012 "textio.c"
        var $125=(($124+24)&4294967295); //@line 2012 "textio.c"
        var $126=HEAP[$125]; //@line 2012 "textio.c"
        var $127=HEAP[$res]; //@line 2012 "textio.c"
        FUNCTION_TABLE[$126]($127); //@line 2012 "textio.c"
        __label__ = 38; break; //@line 2012 "textio.c"
      case 38: // $bb37
        var $128=HEAP[$self_addr]; //@line 2014 "textio.c"
        _textiowrapper_set_decoded_chars($128, 0); //@line 2014 "textio.c"
        var $129=HEAP[$self_addr]; //@line 2015 "textio.c"
        var $130=(($129+80)&4294967295); //@line 2015 "textio.c"
        var $131=HEAP[$130]; //@line 2015 "textio.c"
        var $132=($131)!=0; //@line 2015 "textio.c"
        if ($132) { __label__ = 39; break; } else { __label__ = 41; break; } //@line 2015 "textio.c"
      case 39: // $bb38
        var $133=HEAP[$self_addr]; //@line 2015 "textio.c"
        var $134=(($133+80)&4294967295); //@line 2015 "textio.c"
        var $135=HEAP[$134]; //@line 2015 "textio.c"
        HEAP[$_py_tmp]=$135; //@line 2015 "textio.c"
        var $136=HEAP[$self_addr]; //@line 2015 "textio.c"
        var $137=(($136+80)&4294967295); //@line 2015 "textio.c"
        HEAP[$137]=0; //@line 2015 "textio.c"
        var $138=HEAP[$_py_tmp]; //@line 2015 "textio.c"
        var $139=(($138)&4294967295); //@line 2015 "textio.c"
        var $140=HEAP[$139]; //@line 2015 "textio.c"
        var $141=((($140) - 1)&4294967295); //@line 2015 "textio.c"
        var $142=HEAP[$_py_tmp]; //@line 2015 "textio.c"
        var $143=(($142)&4294967295); //@line 2015 "textio.c"
        HEAP[$143]=$141; //@line 2015 "textio.c"
        var $144=HEAP[$_py_tmp]; //@line 2015 "textio.c"
        var $145=(($144)&4294967295); //@line 2015 "textio.c"
        var $146=HEAP[$145]; //@line 2015 "textio.c"
        var $147=((($146))|0)==0; //@line 2015 "textio.c"
        if ($147) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 2015 "textio.c"
      case 40: // $bb39
        var $148=HEAP[$_py_tmp]; //@line 2015 "textio.c"
        var $149=(($148+4)&4294967295); //@line 2015 "textio.c"
        var $150=HEAP[$149]; //@line 2015 "textio.c"
        var $151=(($150+24)&4294967295); //@line 2015 "textio.c"
        var $152=HEAP[$151]; //@line 2015 "textio.c"
        var $153=HEAP[$_py_tmp]; //@line 2015 "textio.c"
        FUNCTION_TABLE[$152]($153); //@line 2015 "textio.c"
        __label__ = 41; break; //@line 2015 "textio.c"
      case 41: // $bb40
        var $154=HEAP[$self_addr]; //@line 2016 "textio.c"
        var $155=(($154+32)&4294967295); //@line 2016 "textio.c"
        var $156=HEAP[$155]; //@line 2016 "textio.c"
        var $157=($156)!=0; //@line 2016 "textio.c"
        if ($157) { __label__ = 42; break; } else { __label__ = 45; break; } //@line 2016 "textio.c"
      case 42: // $bb41
        var $158=HEAP[$self_addr]; //@line 2017 "textio.c"
        var $159=(($158+32)&4294967295); //@line 2017 "textio.c"
        var $160=HEAP[$159]; //@line 2017 "textio.c"
        var $161=__PyObject_CallMethod_SizeT($160, ((__str31406)&4294967295), 0); //@line 2017 "textio.c"
        HEAP[$res]=$161; //@line 2017 "textio.c"
        var $162=HEAP[$res]; //@line 2018 "textio.c"
        var $163=($162)==0; //@line 2018 "textio.c"
        if ($163) { __label__ = 88; break; } else { __label__ = 43; break; } //@line 2018 "textio.c"
      case 43: // $bb42
        var $164=HEAP[$res]; //@line 2020 "textio.c"
        var $165=(($164)&4294967295); //@line 2020 "textio.c"
        var $166=HEAP[$165]; //@line 2020 "textio.c"
        var $167=((($166) - 1)&4294967295); //@line 2020 "textio.c"
        var $168=HEAP[$res]; //@line 2020 "textio.c"
        var $169=(($168)&4294967295); //@line 2020 "textio.c"
        HEAP[$169]=$167; //@line 2020 "textio.c"
        var $170=HEAP[$res]; //@line 2020 "textio.c"
        var $171=(($170)&4294967295); //@line 2020 "textio.c"
        var $172=HEAP[$171]; //@line 2020 "textio.c"
        var $173=((($172))|0)==0; //@line 2020 "textio.c"
        if ($173) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 2020 "textio.c"
      case 44: // $bb43
        var $174=HEAP[$res]; //@line 2020 "textio.c"
        var $175=(($174+4)&4294967295); //@line 2020 "textio.c"
        var $176=HEAP[$175]; //@line 2020 "textio.c"
        var $177=(($176+24)&4294967295); //@line 2020 "textio.c"
        var $178=HEAP[$177]; //@line 2020 "textio.c"
        var $179=HEAP[$res]; //@line 2020 "textio.c"
        FUNCTION_TABLE[$178]($179); //@line 2020 "textio.c"
        __label__ = 45; break; //@line 2020 "textio.c"
      case 45: // $bb44
        var $180=HEAP[$self_addr]; //@line 2023 "textio.c"
        var $181=(($180+20)&4294967295); //@line 2023 "textio.c"
        var $182=HEAP[$181]; //@line 2023 "textio.c"
        var $183=__PyObject_CallMethod_SizeT($182, ((__str80)&4294967295), ((__str81)&4294967295), 0, 2); //@line 2023 "textio.c"
        HEAP[$res]=$183; //@line 2023 "textio.c"
        var $184=HEAP[$cookieObj]; //@line 2024 "textio.c"
        var $185=($184)!=0; //@line 2024 "textio.c"
        if ($185) { __label__ = 46; break; } else { __label__ = 48; break; } //@line 2024 "textio.c"
      case 46: // $bb45
        var $186=HEAP[$cookieObj]; //@line 2024 "textio.c"
        var $187=(($186)&4294967295); //@line 2024 "textio.c"
        var $188=HEAP[$187]; //@line 2024 "textio.c"
        var $189=((($188) - 1)&4294967295); //@line 2024 "textio.c"
        var $190=(($186)&4294967295); //@line 2024 "textio.c"
        HEAP[$190]=$189; //@line 2024 "textio.c"
        var $191=(($186)&4294967295); //@line 2024 "textio.c"
        var $192=HEAP[$191]; //@line 2024 "textio.c"
        var $193=((($192))|0)==0; //@line 2024 "textio.c"
        if ($193) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 2024 "textio.c"
      case 47: // $bb46
        var $194=HEAP[$cookieObj]; //@line 2024 "textio.c"
        var $195=(($194+4)&4294967295); //@line 2024 "textio.c"
        var $196=HEAP[$195]; //@line 2024 "textio.c"
        var $197=(($196+24)&4294967295); //@line 2024 "textio.c"
        var $198=HEAP[$197]; //@line 2024 "textio.c"
        var $199=HEAP[$cookieObj]; //@line 2024 "textio.c"
        FUNCTION_TABLE[$198]($199); //@line 2024 "textio.c"
        __label__ = 48; break; //@line 2024 "textio.c"
      case 48: // $bb47
        var $200=HEAP[$res]; //@line 2025 "textio.c"
        HEAP[$0]=$200; //@line 2025 "textio.c"
        __label__ = 92; break; //@line 2025 "textio.c"
      case 49: // $bb48
        var $201=HEAP[$whence]; //@line 2027 "textio.c"
        var $202=((($201))|0)!=0; //@line 2027 "textio.c"
        if ($202) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 2027 "textio.c"
      case 50: // $bb49
        var $203=HEAP[$whence]; //@line 2028 "textio.c"
        var $204=HEAP[_PyExc_ValueError]; //@line 2028 "textio.c"
        var $205=_PyErr_Format($204, ((__str82)&4294967295), $203); //@line 2028 "textio.c"
        __label__ = 88; break; //@line 2028 "textio.c"
      case 51: // $bb50
        var $206=HEAP[__PyIO_zero]; //@line 2033 "textio.c"
        var $207=HEAP[$cookieObj]; //@line 2033 "textio.c"
        var $208=_PyObject_RichCompareBool($207, $206, 0); //@line 2033 "textio.c"
        HEAP[$cmp]=$208; //@line 2033 "textio.c"
        var $209=HEAP[$cmp]; //@line 2034 "textio.c"
        var $210=((($209))|0) < 0; //@line 2034 "textio.c"
        if ($210) { __label__ = 88; break; } else { __label__ = 52; break; } //@line 2034 "textio.c"
      case 52: // $bb51
        var $211=HEAP[$cmp]; //@line 2037 "textio.c"
        var $212=((($211))|0)==1; //@line 2037 "textio.c"
        if ($212) { __label__ = 53; break; } else { __label__ = 57; break; } //@line 2037 "textio.c"
      case 53: // $bb52
        var $213=HEAP[$cookieObj]; //@line 2038 "textio.c"
        var $214=_PyObject_Repr($213); //@line 2038 "textio.c"
        HEAP[$repr]=$214; //@line 2038 "textio.c"
        var $215=HEAP[$repr]; //@line 2039 "textio.c"
        var $216=($215)!=0; //@line 2039 "textio.c"
        if ($216) { __label__ = 54; break; } else { __label__ = 56; break; } //@line 2039 "textio.c"
      case 54: // $bb53
        var $217=HEAP[$repr]; //@line 2040 "textio.c"
        var $218=$217; //@line 2040 "textio.c"
        var $219=(($218+20)&4294967295); //@line 2040 "textio.c"
        var $220=(($219)&4294967295); //@line 2040 "textio.c"
        var $221=HEAP[_PyExc_ValueError]; //@line 2040 "textio.c"
        var $222=_PyErr_Format($221, ((__str83)&4294967295), $220); //@line 2040 "textio.c"
        var $223=HEAP[$repr]; //@line 2043 "textio.c"
        var $224=(($223)&4294967295); //@line 2043 "textio.c"
        var $225=HEAP[$224]; //@line 2043 "textio.c"
        var $226=((($225) - 1)&4294967295); //@line 2043 "textio.c"
        var $227=HEAP[$repr]; //@line 2043 "textio.c"
        var $228=(($227)&4294967295); //@line 2043 "textio.c"
        HEAP[$228]=$226; //@line 2043 "textio.c"
        var $229=HEAP[$repr]; //@line 2043 "textio.c"
        var $230=(($229)&4294967295); //@line 2043 "textio.c"
        var $231=HEAP[$230]; //@line 2043 "textio.c"
        var $232=((($231))|0)==0; //@line 2043 "textio.c"
        if ($232) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 2043 "textio.c"
      case 55: // $bb54
        var $233=HEAP[$repr]; //@line 2043 "textio.c"
        var $234=(($233+4)&4294967295); //@line 2043 "textio.c"
        var $235=HEAP[$234]; //@line 2043 "textio.c"
        var $236=(($235+24)&4294967295); //@line 2043 "textio.c"
        var $237=HEAP[$236]; //@line 2043 "textio.c"
        var $238=HEAP[$repr]; //@line 2043 "textio.c"
        FUNCTION_TABLE[$237]($238); //@line 2043 "textio.c"
        __label__ = 56; break; //@line 2043 "textio.c"
      case 56: // $bb55
        __label__ = 88; break; //@line 2043 "textio.c"
      case 57: // $bb56
        var $239=HEAP[__PyIO_str_flush]; //@line 2048 "textio.c"
        var $240=HEAP[$self_addr]; //@line 2048 "textio.c"
        var $241=$240; //@line 2048 "textio.c"
        var $242=_PyObject_CallMethodObjArgs($241, $239, 0); //@line 2048 "textio.c"
        HEAP[$res]=$242; //@line 2048 "textio.c"
        var $243=HEAP[$res]; //@line 2049 "textio.c"
        var $244=($243)==0; //@line 2049 "textio.c"
        if ($244) { __label__ = 88; break; } else { __label__ = 58; break; } //@line 2049 "textio.c"
      case 58: // $bb57
        var $245=HEAP[$res]; //@line 2051 "textio.c"
        var $246=(($245)&4294967295); //@line 2051 "textio.c"
        var $247=HEAP[$246]; //@line 2051 "textio.c"
        var $248=((($247) - 1)&4294967295); //@line 2051 "textio.c"
        var $249=HEAP[$res]; //@line 2051 "textio.c"
        var $250=(($249)&4294967295); //@line 2051 "textio.c"
        HEAP[$250]=$248; //@line 2051 "textio.c"
        var $251=HEAP[$res]; //@line 2051 "textio.c"
        var $252=(($251)&4294967295); //@line 2051 "textio.c"
        var $253=HEAP[$252]; //@line 2051 "textio.c"
        var $254=((($253))|0)==0; //@line 2051 "textio.c"
        if ($254) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 2051 "textio.c"
      case 59: // $bb58
        var $255=HEAP[$res]; //@line 2051 "textio.c"
        var $256=(($255+4)&4294967295); //@line 2051 "textio.c"
        var $257=HEAP[$256]; //@line 2051 "textio.c"
        var $258=(($257+24)&4294967295); //@line 2051 "textio.c"
        var $259=HEAP[$258]; //@line 2051 "textio.c"
        var $260=HEAP[$res]; //@line 2051 "textio.c"
        FUNCTION_TABLE[$259]($260); //@line 2051 "textio.c"
        __label__ = 60; break; //@line 2051 "textio.c"
      case 60: // $bb59
        var $261=HEAP[$cookieObj]; //@line 2056 "textio.c"
        var $262=_textiowrapper_parse_cookie($cookie, $261); //@line 2056 "textio.c"
        var $263=((($262))|0) < 0; //@line 2056 "textio.c"
        if ($263) { __label__ = 88; break; } else { __label__ = 61; break; } //@line 2056 "textio.c"
      case 61: // $bb60
        var $264=(($cookie)&4294967295); //@line 2060 "textio.c"
        var $265=HEAP[$264]; //@line 2060 "textio.c"
        var $266=_PyLong_FromLongLong($265); //@line 2060 "textio.c"
        HEAP[$posobj]=$266; //@line 2060 "textio.c"
        var $267=HEAP[$posobj]; //@line 2061 "textio.c"
        var $268=($267)==0; //@line 2061 "textio.c"
        if ($268) { __label__ = 88; break; } else { __label__ = 62; break; } //@line 2061 "textio.c"
      case 62: // $bb61
        var $269=HEAP[__PyIO_str_seek]; //@line 2063 "textio.c"
        var $270=HEAP[$self_addr]; //@line 2063 "textio.c"
        var $271=(($270+20)&4294967295); //@line 2063 "textio.c"
        var $272=HEAP[$271]; //@line 2063 "textio.c"
        var $273=HEAP[$posobj]; //@line 2063 "textio.c"
        var $274=_PyObject_CallMethodObjArgs($272, $269, $273, 0); //@line 2063 "textio.c"
        HEAP[$res]=$274; //@line 2063 "textio.c"
        var $275=HEAP[$posobj]; //@line 2065 "textio.c"
        var $276=(($275)&4294967295); //@line 2065 "textio.c"
        var $277=HEAP[$276]; //@line 2065 "textio.c"
        var $278=((($277) - 1)&4294967295); //@line 2065 "textio.c"
        var $279=HEAP[$posobj]; //@line 2065 "textio.c"
        var $280=(($279)&4294967295); //@line 2065 "textio.c"
        HEAP[$280]=$278; //@line 2065 "textio.c"
        var $281=HEAP[$posobj]; //@line 2065 "textio.c"
        var $282=(($281)&4294967295); //@line 2065 "textio.c"
        var $283=HEAP[$282]; //@line 2065 "textio.c"
        var $284=((($283))|0)==0; //@line 2065 "textio.c"
        if ($284) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 2065 "textio.c"
      case 63: // $bb62
        var $285=HEAP[$posobj]; //@line 2065 "textio.c"
        var $286=(($285+4)&4294967295); //@line 2065 "textio.c"
        var $287=HEAP[$286]; //@line 2065 "textio.c"
        var $288=(($287+24)&4294967295); //@line 2065 "textio.c"
        var $289=HEAP[$288]; //@line 2065 "textio.c"
        var $290=HEAP[$posobj]; //@line 2065 "textio.c"
        FUNCTION_TABLE[$289]($290); //@line 2065 "textio.c"
        __label__ = 64; break; //@line 2065 "textio.c"
      case 64: // $bb63
        var $291=HEAP[$res]; //@line 2066 "textio.c"
        var $292=($291)==0; //@line 2066 "textio.c"
        if ($292) { __label__ = 88; break; } else { __label__ = 65; break; } //@line 2066 "textio.c"
      case 65: // $bb64
        var $293=HEAP[$res]; //@line 2068 "textio.c"
        var $294=(($293)&4294967295); //@line 2068 "textio.c"
        var $295=HEAP[$294]; //@line 2068 "textio.c"
        var $296=((($295) - 1)&4294967295); //@line 2068 "textio.c"
        var $297=HEAP[$res]; //@line 2068 "textio.c"
        var $298=(($297)&4294967295); //@line 2068 "textio.c"
        HEAP[$298]=$296; //@line 2068 "textio.c"
        var $299=HEAP[$res]; //@line 2068 "textio.c"
        var $300=(($299)&4294967295); //@line 2068 "textio.c"
        var $301=HEAP[$300]; //@line 2068 "textio.c"
        var $302=((($301))|0)==0; //@line 2068 "textio.c"
        if ($302) { __label__ = 66; break; } else { __label__ = 67; break; } //@line 2068 "textio.c"
      case 66: // $bb65
        var $303=HEAP[$res]; //@line 2068 "textio.c"
        var $304=(($303+4)&4294967295); //@line 2068 "textio.c"
        var $305=HEAP[$304]; //@line 2068 "textio.c"
        var $306=(($305+24)&4294967295); //@line 2068 "textio.c"
        var $307=HEAP[$306]; //@line 2068 "textio.c"
        var $308=HEAP[$res]; //@line 2068 "textio.c"
        FUNCTION_TABLE[$307]($308); //@line 2068 "textio.c"
        __label__ = 67; break; //@line 2068 "textio.c"
      case 67: // $bb66
        var $309=HEAP[$self_addr]; //@line 2070 "textio.c"
        _textiowrapper_set_decoded_chars($309, 0); //@line 2070 "textio.c"
        var $310=HEAP[$self_addr]; //@line 2071 "textio.c"
        var $311=(($310+80)&4294967295); //@line 2071 "textio.c"
        var $312=HEAP[$311]; //@line 2071 "textio.c"
        var $313=($312)!=0; //@line 2071 "textio.c"
        if ($313) { __label__ = 68; break; } else { __label__ = 70; break; } //@line 2071 "textio.c"
      case 68: // $bb67
        var $314=HEAP[$self_addr]; //@line 2071 "textio.c"
        var $315=(($314+80)&4294967295); //@line 2071 "textio.c"
        var $316=HEAP[$315]; //@line 2071 "textio.c"
        HEAP[$_py_tmp68]=$316; //@line 2071 "textio.c"
        var $317=HEAP[$self_addr]; //@line 2071 "textio.c"
        var $318=(($317+80)&4294967295); //@line 2071 "textio.c"
        HEAP[$318]=0; //@line 2071 "textio.c"
        var $319=HEAP[$_py_tmp68]; //@line 2071 "textio.c"
        var $320=(($319)&4294967295); //@line 2071 "textio.c"
        var $321=HEAP[$320]; //@line 2071 "textio.c"
        var $322=((($321) - 1)&4294967295); //@line 2071 "textio.c"
        var $323=HEAP[$_py_tmp68]; //@line 2071 "textio.c"
        var $324=(($323)&4294967295); //@line 2071 "textio.c"
        HEAP[$324]=$322; //@line 2071 "textio.c"
        var $325=HEAP[$_py_tmp68]; //@line 2071 "textio.c"
        var $326=(($325)&4294967295); //@line 2071 "textio.c"
        var $327=HEAP[$326]; //@line 2071 "textio.c"
        var $328=((($327))|0)==0; //@line 2071 "textio.c"
        if ($328) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 2071 "textio.c"
      case 69: // $bb69
        var $329=HEAP[$_py_tmp68]; //@line 2071 "textio.c"
        var $330=(($329+4)&4294967295); //@line 2071 "textio.c"
        var $331=HEAP[$330]; //@line 2071 "textio.c"
        var $332=(($331+24)&4294967295); //@line 2071 "textio.c"
        var $333=HEAP[$332]; //@line 2071 "textio.c"
        var $334=HEAP[$_py_tmp68]; //@line 2071 "textio.c"
        FUNCTION_TABLE[$333]($334); //@line 2071 "textio.c"
        __label__ = 70; break; //@line 2071 "textio.c"
      case 70: // $bb70
        var $335=HEAP[$self_addr]; //@line 2074 "textio.c"
        var $336=(($335+32)&4294967295); //@line 2074 "textio.c"
        var $337=HEAP[$336]; //@line 2074 "textio.c"
        var $338=($337)!=0; //@line 2074 "textio.c"
        if ($338) { __label__ = 71; break; } else { __label__ = 72; break; } //@line 2074 "textio.c"
      case 71: // $bb71
        var $339=HEAP[$self_addr]; //@line 2075 "textio.c"
        var $340=__textiowrapper_decoder_setstate($339, $cookie); //@line 2075 "textio.c"
        var $341=((($340))|0) < 0; //@line 2075 "textio.c"
        if ($341) { __label__ = 88; break; } else { __label__ = 72; break; } //@line 2075 "textio.c"
      case 72: // $bb72
        var $342=(($cookie+16)&4294967295); //@line 2079 "textio.c"
        var $343=HEAP[$342]; //@line 2079 "textio.c"
        var $344=((($343))|0)!=0; //@line 2079 "textio.c"
        if ($344) { __label__ = 73; break; } else { __label__ = 84; break; } //@line 2079 "textio.c"
      case 73: // $bb73
        var $345=(($cookie+12)&4294967295); //@line 2082 "textio.c"
        var $346=HEAP[$345]; //@line 2082 "textio.c"
        var $347=HEAP[$self_addr]; //@line 2082 "textio.c"
        var $348=(($347+20)&4294967295); //@line 2082 "textio.c"
        var $349=HEAP[$348]; //@line 2082 "textio.c"
        var $350=__PyObject_CallMethod_SizeT($349, ((__str1375)&4294967295), ((__str84)&4294967295), $346); //@line 2082 "textio.c"
        HEAP[$input_chunk]=$350; //@line 2082 "textio.c"
        var $351=HEAP[$input_chunk]; //@line 2085 "textio.c"
        var $352=($351)==0; //@line 2085 "textio.c"
        if ($352) { __label__ = 88; break; } else { __label__ = 74; break; } //@line 2085 "textio.c"
      case 74: // $bb74
        var $353=HEAP[$input_chunk]; //@line 2088 "textio.c"
        var $354=(($353+4)&4294967295); //@line 2088 "textio.c"
        var $355=HEAP[$354]; //@line 2088 "textio.c"
        var $356=(($355+84)&4294967295); //@line 2088 "textio.c"
        var $357=HEAP[$356]; //@line 2088 "textio.c"
        var $358=($357) & 134217728; //@line 2088 "textio.c"
        var $359=((($358))|0)==0; //@line 2088 "textio.c"
        if ($359) { __label__ = 75; break; } else { __label__ = 76; break; } //@line 2088 "textio.c"
      case 75: // $bb75
        ___assert_fail(((__str66442)&4294967295), ((__str15390)&4294967295), 2088, ((___PRETTY_FUNCTION___11188)&4294967295)); //@line 2088 "textio.c"
        throw "Reached an unreachable! Original .ll line: 34768"; //@line 2088 "textio.c"
      case 76: // $bb76
        var $360=(($cookie+8)&4294967295); //@line 2090 "textio.c"
        var $361=HEAP[$360]; //@line 2090 "textio.c"
        var $362=HEAP[$input_chunk]; //@line 2090 "textio.c"
        var $363=__Py_BuildValue_SizeT(((__str85)&4294967295), $361, $362); //@line 2090 "textio.c"
        var $364=HEAP[$self_addr]; //@line 2090 "textio.c"
        var $365=(($364+80)&4294967295); //@line 2090 "textio.c"
        HEAP[$365]=$363; //@line 2090 "textio.c"
        var $366=HEAP[$self_addr]; //@line 2091 "textio.c"
        var $367=(($366+80)&4294967295); //@line 2091 "textio.c"
        var $368=HEAP[$367]; //@line 2091 "textio.c"
        var $369=($368)==0; //@line 2091 "textio.c"
        if ($369) { __label__ = 77; break; } else { __label__ = 80; break; } //@line 2091 "textio.c"
      case 77: // $bb77
        var $370=HEAP[$input_chunk]; //@line 2092 "textio.c"
        var $371=(($370)&4294967295); //@line 2092 "textio.c"
        var $372=HEAP[$371]; //@line 2092 "textio.c"
        var $373=((($372) - 1)&4294967295); //@line 2092 "textio.c"
        var $374=HEAP[$input_chunk]; //@line 2092 "textio.c"
        var $375=(($374)&4294967295); //@line 2092 "textio.c"
        HEAP[$375]=$373; //@line 2092 "textio.c"
        var $376=HEAP[$input_chunk]; //@line 2092 "textio.c"
        var $377=(($376)&4294967295); //@line 2092 "textio.c"
        var $378=HEAP[$377]; //@line 2092 "textio.c"
        var $379=((($378))|0)==0; //@line 2092 "textio.c"
        if ($379) { __label__ = 78; break; } else { __label__ = 79; break; } //@line 2092 "textio.c"
      case 78: // $bb78
        var $380=HEAP[$input_chunk]; //@line 2092 "textio.c"
        var $381=(($380+4)&4294967295); //@line 2092 "textio.c"
        var $382=HEAP[$381]; //@line 2092 "textio.c"
        var $383=(($382+24)&4294967295); //@line 2092 "textio.c"
        var $384=HEAP[$383]; //@line 2092 "textio.c"
        var $385=HEAP[$input_chunk]; //@line 2092 "textio.c"
        FUNCTION_TABLE[$384]($385); //@line 2092 "textio.c"
        __label__ = 79; break; //@line 2092 "textio.c"
      case 79: // $bb79
        __label__ = 88; break; //@line 2092 "textio.c"
      case 80: // $bb80
        var $386=(($cookie+20)&4294967295); //@line 2096 "textio.c"
        var $387=HEAP[$386]; //@line 2096 "textio.c"
        var $388=reSign(($387), 8, 0); //@line 2096 "textio.c"
        var $389=HEAP[$self_addr]; //@line 2096 "textio.c"
        var $390=(($389+32)&4294967295); //@line 2096 "textio.c"
        var $391=HEAP[$390]; //@line 2096 "textio.c"
        var $392=HEAP[$input_chunk]; //@line 2096 "textio.c"
        var $393=__PyObject_CallMethod_SizeT($391, ((__str29404)&4294967295), ((__str51427)&4294967295), $392, $388); //@line 2096 "textio.c"
        HEAP[$decoded]=$393; //@line 2096 "textio.c"
        var $394=HEAP[$decoded]; //@line 2099 "textio.c"
        var $395=($394)==0; //@line 2099 "textio.c"
        if ($395) { __label__ = 88; break; } else { __label__ = 81; break; } //@line 2099 "textio.c"
      case 81: // $bb81
        var $396=HEAP[$self_addr]; //@line 2102 "textio.c"
        var $397=HEAP[$decoded]; //@line 2102 "textio.c"
        _textiowrapper_set_decoded_chars($396, $397); //@line 2102 "textio.c"
        var $398=HEAP[$self_addr]; //@line 2105 "textio.c"
        var $399=(($398+64)&4294967295); //@line 2105 "textio.c"
        var $400=HEAP[$399]; //@line 2105 "textio.c"
        var $401=_PyUnicodeUCS2_GetSize($400); //@line 2105 "textio.c"
        var $402=(($cookie+16)&4294967295); //@line 2105 "textio.c"
        var $403=HEAP[$402]; //@line 2105 "textio.c"
        var $404=((($401))|0) < ((($403))|0); //@line 2105 "textio.c"
        if ($404) { __label__ = 82; break; } else { __label__ = 83; break; } //@line 2105 "textio.c"
      case 82: // $bb82
        var $405=HEAP[_PyExc_IOError]; //@line 2106 "textio.c"
        _PyErr_SetString($405, ((__str86)&4294967295)); //@line 2106 "textio.c"
        __label__ = 88; break; //@line 2106 "textio.c"
      case 83: // $bb83
        var $406=(($cookie+16)&4294967295); //@line 2109 "textio.c"
        var $407=HEAP[$406]; //@line 2109 "textio.c"
        var $408=HEAP[$self_addr]; //@line 2109 "textio.c"
        var $409=(($408+68)&4294967295); //@line 2109 "textio.c"
        HEAP[$409]=$407; //@line 2109 "textio.c"
        __label__ = 85; break; //@line 2109 "textio.c"
      case 84: // $bb84
        var $410=(($cookie+8)&4294967295); //@line 2112 "textio.c"
        var $411=HEAP[$410]; //@line 2112 "textio.c"
        var $412=__Py_BuildValue_SizeT(((__str87)&4294967295), $411, ((__str20395)&4294967295)); //@line 2112 "textio.c"
        var $413=HEAP[$self_addr]; //@line 2112 "textio.c"
        var $414=(($413+80)&4294967295); //@line 2112 "textio.c"
        HEAP[$414]=$412; //@line 2112 "textio.c"
        var $415=HEAP[$self_addr]; //@line 2113 "textio.c"
        var $416=(($415+80)&4294967295); //@line 2113 "textio.c"
        var $417=HEAP[$416]; //@line 2113 "textio.c"
        var $418=($417)==0; //@line 2113 "textio.c"
        if ($418) { __label__ = 88; break; } else { __label__ = 85; break; } //@line 2113 "textio.c"
      case 85: // $bb85
        var $419=HEAP[$self_addr]; //@line 2118 "textio.c"
        var $420=(($419+28)&4294967295); //@line 2118 "textio.c"
        var $421=HEAP[$420]; //@line 2118 "textio.c"
        var $422=($421)!=0; //@line 2118 "textio.c"
        if ($422) { __label__ = 86; break; } else { __label__ = 87; break; } //@line 2118 "textio.c"
      case 86: // $bb86
        var $423=HEAP[$self_addr]; //@line 2119 "textio.c"
        var $424=__textiowrapper_encoder_setstate($423, $cookie); //@line 2119 "textio.c"
        var $425=((($424))|0) < 0; //@line 2119 "textio.c"
        if ($425) { __label__ = 88; break; } else { __label__ = 87; break; } //@line 2119 "textio.c"
      case 87: // $bb87
        var $426=HEAP[$cookieObj]; //@line 2122 "textio.c"
        HEAP[$0]=$426; //@line 2122 "textio.c"
        __label__ = 92; break; //@line 2122 "textio.c"
      case 88: // $fail
        var $427=HEAP[$cookieObj]; //@line 2124 "textio.c"
        var $428=($427)!=0; //@line 2124 "textio.c"
        if ($428) { __label__ = 89; break; } else { __label__ = 91; break; } //@line 2124 "textio.c"
      case 89: // $bb88
        var $429=HEAP[$cookieObj]; //@line 2124 "textio.c"
        var $430=(($429)&4294967295); //@line 2124 "textio.c"
        var $431=HEAP[$430]; //@line 2124 "textio.c"
        var $432=((($431) - 1)&4294967295); //@line 2124 "textio.c"
        var $433=(($429)&4294967295); //@line 2124 "textio.c"
        HEAP[$433]=$432; //@line 2124 "textio.c"
        var $434=(($429)&4294967295); //@line 2124 "textio.c"
        var $435=HEAP[$434]; //@line 2124 "textio.c"
        var $436=((($435))|0)==0; //@line 2124 "textio.c"
        if ($436) { __label__ = 90; break; } else { __label__ = 91; break; } //@line 2124 "textio.c"
      case 90: // $bb89
        var $437=HEAP[$cookieObj]; //@line 2124 "textio.c"
        var $438=(($437+4)&4294967295); //@line 2124 "textio.c"
        var $439=HEAP[$438]; //@line 2124 "textio.c"
        var $440=(($439+24)&4294967295); //@line 2124 "textio.c"
        var $441=HEAP[$440]; //@line 2124 "textio.c"
        var $442=HEAP[$cookieObj]; //@line 2124 "textio.c"
        FUNCTION_TABLE[$441]($442); //@line 2124 "textio.c"
        __label__ = 91; break; //@line 2124 "textio.c"
      case 91: // $bb90
        HEAP[$0]=0; //@line 2125 "textio.c"
        __label__ = 92; break; //@line 2125 "textio.c"
      case 92: // $bb91
        var $443=HEAP[$0]; //@line 1962 "textio.c"
        HEAP[$retval]=$443; //@line 1962 "textio.c"
        __label__ = 93; break; //@line 1962 "textio.c"
      case 93: // $return
        var $retval92=HEAP[$retval]; //@line 1962 "textio.c"
        STACKTOP = __stackBase__;
        return $retval92; //@line 1962 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_tell($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 116; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 116);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $res=__stackBase__+16;
        var $posobj=__stackBase__+20;
        var $cookie=__stackBase__+24;
        var $next_input=__stackBase__+48;
        var $chars_to_skip=__stackBase__+52;
        var $chars_decoded=__stackBase__+56;
        var $saved_state=__stackBase__+60;
        var $input=__stackBase__+64;
        var $input_end=__stackBase__+68;
        var $r=__stackBase__+72;
        var $_res=__stackBase__+76;
        var $state=__stackBase__+80;
        var $dec_buffer=__stackBase__+84;
        var $dec_buffer_len=__stackBase__+88;
        var $dec_flags=__stackBase__+92;
        var $decoded=__stackBase__+96;
        var $decoded65=__stackBase__+100;
        var $type=__stackBase__+104;
        var $value=__stackBase__+108;
        var $traceback=__stackBase__+112;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$posobj]=0; //@line 2133 "textio.c"
        var $1=(($cookie)&4294967295); //@line 2134 "textio.c"
        HEAP[$1]=0; //@line 2134 "textio.c"
        var $2=(($cookie+8)&4294967295); //@line 2134 "textio.c"
        HEAP[$2]=0; //@line 2134 "textio.c"
        var $3=(($cookie+12)&4294967295); //@line 2134 "textio.c"
        HEAP[$3]=0; //@line 2134 "textio.c"
        var $4=(($cookie+16)&4294967295); //@line 2134 "textio.c"
        HEAP[$4]=0; //@line 2134 "textio.c"
        var $5=(($cookie+20)&4294967295); //@line 2134 "textio.c"
        HEAP[$5]=0; //@line 2134 "textio.c"
        HEAP[$saved_state]=0; //@line 2137 "textio.c"
        var $6=HEAP[$self_addr]; //@line 2140 "textio.c"
        var $7=(($6+8)&4294967295); //@line 2140 "textio.c"
        var $8=HEAP[$7]; //@line 2140 "textio.c"
        var $9=((($8))|0) <= 0; //@line 2140 "textio.c"
        if ($9) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2140 "textio.c"
      case 1: // $bb
        var $10=HEAP[$self_addr]; //@line 2140 "textio.c"
        var $11=(($10+12)&4294967295); //@line 2140 "textio.c"
        var $12=HEAP[$11]; //@line 2140 "textio.c"
        var $13=((($12))|0)!=0; //@line 2140 "textio.c"
        if ($13) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2140 "textio.c"
      case 2: // $bb1
        var $14=HEAP[_PyExc_ValueError]; //@line 2140 "textio.c"
        _PyErr_SetString($14, ((__str57433)&4294967295)); //@line 2140 "textio.c"
        __label__ = 4; break; //@line 2140 "textio.c"
      case 3: // $bb2
        var $15=HEAP[_PyExc_ValueError]; //@line 2140 "textio.c"
        _PyErr_SetString($15, ((__str58434)&4294967295)); //@line 2140 "textio.c"
        __label__ = 4; break; //@line 2140 "textio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 2140 "textio.c"
        __label__ = 94; break; //@line 2140 "textio.c"
      case 5: // $bb4
        var $16=HEAP[$self_addr]; //@line 2141 "textio.c"
        var $17=$16; //@line 2141 "textio.c"
        var $18=(($17+4)&4294967295); //@line 2141 "textio.c"
        var $19=HEAP[$18]; //@line 2141 "textio.c"
        var $20=($19)==(_PyTextIOWrapper_Type); //@line 2141 "textio.c"
        if ($20) { __label__ = 6; break; } else { __label__ = 17; break; } //@line 2141 "textio.c"
      case 6: // $bb5
        var $21=HEAP[$self_addr]; //@line 2141 "textio.c"
        var $22=(($21+84)&4294967295); //@line 2141 "textio.c"
        var $23=HEAP[$22]; //@line 2141 "textio.c"
        var $24=($23)!=0; //@line 2141 "textio.c"
        if ($24) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 2141 "textio.c"
      case 7: // $bb6
        var $25=HEAP[$self_addr]; //@line 2141 "textio.c"
        var $26=(($25+84)&4294967295); //@line 2141 "textio.c"
        var $27=HEAP[$26]; //@line 2141 "textio.c"
        var $28=__PyFileIO_closed($27); //@line 2141 "textio.c"
        HEAP[$r]=$28; //@line 2141 "textio.c"
        __label__ = 14; break; //@line 2141 "textio.c"
      case 8: // $bb7
        var $29=HEAP[$self_addr]; //@line 2141 "textio.c"
        var $30=_textiowrapper_closed_get($29, 0); //@line 2141 "textio.c"
        HEAP[$_res]=$30; //@line 2141 "textio.c"
        var $31=HEAP[$_res]; //@line 2141 "textio.c"
        var $32=($31)==0; //@line 2141 "textio.c"
        if ($32) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 2141 "textio.c"
      case 9: // $bb8
        HEAP[$0]=0; //@line 2141 "textio.c"
        __label__ = 94; break; //@line 2141 "textio.c"
      case 10: // $bb9
        var $33=HEAP[$_res]; //@line 2141 "textio.c"
        var $34=_PyObject_IsTrue($33); //@line 2141 "textio.c"
        HEAP[$r]=$34; //@line 2141 "textio.c"
        var $35=HEAP[$_res]; //@line 2141 "textio.c"
        var $36=(($35)&4294967295); //@line 2141 "textio.c"
        var $37=HEAP[$36]; //@line 2141 "textio.c"
        var $38=((($37) - 1)&4294967295); //@line 2141 "textio.c"
        var $39=HEAP[$_res]; //@line 2141 "textio.c"
        var $40=(($39)&4294967295); //@line 2141 "textio.c"
        HEAP[$40]=$38; //@line 2141 "textio.c"
        var $41=HEAP[$_res]; //@line 2141 "textio.c"
        var $42=(($41)&4294967295); //@line 2141 "textio.c"
        var $43=HEAP[$42]; //@line 2141 "textio.c"
        var $44=((($43))|0)==0; //@line 2141 "textio.c"
        if ($44) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 2141 "textio.c"
      case 11: // $bb10
        var $45=HEAP[$_res]; //@line 2141 "textio.c"
        var $46=(($45+4)&4294967295); //@line 2141 "textio.c"
        var $47=HEAP[$46]; //@line 2141 "textio.c"
        var $48=(($47+24)&4294967295); //@line 2141 "textio.c"
        var $49=HEAP[$48]; //@line 2141 "textio.c"
        var $50=HEAP[$_res]; //@line 2141 "textio.c"
        FUNCTION_TABLE[$49]($50); //@line 2141 "textio.c"
        __label__ = 12; break; //@line 2141 "textio.c"
      case 12: // $bb11
        var $51=HEAP[$r]; //@line 2141 "textio.c"
        var $52=((($51))|0) < 0; //@line 2141 "textio.c"
        if ($52) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 2141 "textio.c"
      case 13: // $bb12
        HEAP[$0]=0; //@line 2141 "textio.c"
        __label__ = 94; break; //@line 2141 "textio.c"
      case 14: // $bb13
        var $53=HEAP[$r]; //@line 2141 "textio.c"
        var $54=((($53))|0) > 0; //@line 2141 "textio.c"
        if ($54) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 2141 "textio.c"
      case 15: // $bb14
        var $55=HEAP[_PyExc_ValueError]; //@line 2141 "textio.c"
        _PyErr_SetString($55, ((__str60436)&4294967295)); //@line 2141 "textio.c"
        HEAP[$0]=0; //@line 2141 "textio.c"
        __label__ = 94; break; //@line 2141 "textio.c"
      case 16: // $bb15
        __label__ = 19; break; //@line 2141 "textio.c"
      case 17: // $bb16
        var $56=HEAP[$self_addr]; //@line 2141 "textio.c"
        var $57=$56; //@line 2141 "textio.c"
        var $58=__PyIOBase_check_closed($57, __Py_TrueStruct); //@line 2141 "textio.c"
        var $59=($58)==0; //@line 2141 "textio.c"
        if ($59) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 2141 "textio.c"
      case 18: // $bb17
        HEAP[$0]=0; //@line 2141 "textio.c"
        __label__ = 94; break; //@line 2141 "textio.c"
      case 19: // $bb18
        var $60=HEAP[$self_addr]; //@line 2143 "textio.c"
        var $61=(($60+52)&4294967295); //@line 2143 "textio.c"
        var $62=HEAP[$61]; //@line 2143 "textio.c"
        var $63=reSign(($62), 8, 0)==0; //@line 2143 "textio.c"
        if ($63) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 2143 "textio.c"
      case 20: // $bb19
        var $64=HEAP[_PyExc_IOError]; //@line 2144 "textio.c"
        _PyErr_SetString($64, ((__str75)&4294967295)); //@line 2144 "textio.c"
        __label__ = 82; break; //@line 2144 "textio.c"
      case 21: // $bb20
        var $65=HEAP[$self_addr]; //@line 2148 "textio.c"
        var $66=(($65+53)&4294967295); //@line 2148 "textio.c"
        var $67=HEAP[$66]; //@line 2148 "textio.c"
        var $68=reSign(($67), 8, 0)==0; //@line 2148 "textio.c"
        if ($68) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 2148 "textio.c"
      case 22: // $bb21
        var $69=HEAP[_PyExc_IOError]; //@line 2149 "textio.c"
        _PyErr_SetString($69, ((__str88)&4294967295)); //@line 2149 "textio.c"
        __label__ = 82; break; //@line 2149 "textio.c"
      case 23: // $bb22
        var $70=HEAP[$self_addr]; //@line 2154 "textio.c"
        var $71=__textiowrapper_writeflush($70); //@line 2154 "textio.c"
        var $72=((($71))|0) < 0; //@line 2154 "textio.c"
        if ($72) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 2154 "textio.c"
      case 24: // $bb23
        HEAP[$0]=0; //@line 2155 "textio.c"
        __label__ = 94; break; //@line 2155 "textio.c"
      case 25: // $bb24
        var $73=HEAP[$self_addr]; //@line 2156 "textio.c"
        var $74=$73; //@line 2156 "textio.c"
        var $75=__PyObject_CallMethod_SizeT($74, ((__str79)&4294967295), 0); //@line 2156 "textio.c"
        HEAP[$res]=$75; //@line 2156 "textio.c"
        var $76=HEAP[$res]; //@line 2157 "textio.c"
        var $77=($76)==0; //@line 2157 "textio.c"
        if ($77) { __label__ = 82; break; } else { __label__ = 26; break; } //@line 2157 "textio.c"
      case 26: // $bb25
        var $78=HEAP[$res]; //@line 2159 "textio.c"
        var $79=(($78)&4294967295); //@line 2159 "textio.c"
        var $80=HEAP[$79]; //@line 2159 "textio.c"
        var $81=((($80) - 1)&4294967295); //@line 2159 "textio.c"
        var $82=HEAP[$res]; //@line 2159 "textio.c"
        var $83=(($82)&4294967295); //@line 2159 "textio.c"
        HEAP[$83]=$81; //@line 2159 "textio.c"
        var $84=HEAP[$res]; //@line 2159 "textio.c"
        var $85=(($84)&4294967295); //@line 2159 "textio.c"
        var $86=HEAP[$85]; //@line 2159 "textio.c"
        var $87=((($86))|0)==0; //@line 2159 "textio.c"
        if ($87) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 2159 "textio.c"
      case 27: // $bb26
        var $88=HEAP[$res]; //@line 2159 "textio.c"
        var $89=(($88+4)&4294967295); //@line 2159 "textio.c"
        var $90=HEAP[$89]; //@line 2159 "textio.c"
        var $91=(($90+24)&4294967295); //@line 2159 "textio.c"
        var $92=HEAP[$91]; //@line 2159 "textio.c"
        var $93=HEAP[$res]; //@line 2159 "textio.c"
        FUNCTION_TABLE[$92]($93); //@line 2159 "textio.c"
        __label__ = 28; break; //@line 2159 "textio.c"
      case 28: // $bb27
        var $94=HEAP[$self_addr]; //@line 2161 "textio.c"
        var $95=(($94+20)&4294967295); //@line 2161 "textio.c"
        var $96=HEAP[$95]; //@line 2161 "textio.c"
        var $97=__PyObject_CallMethod_SizeT($96, ((__str77)&4294967295), 0); //@line 2161 "textio.c"
        HEAP[$posobj]=$97; //@line 2161 "textio.c"
        var $98=HEAP[$posobj]; //@line 2162 "textio.c"
        var $99=($98)==0; //@line 2162 "textio.c"
        if ($99) { __label__ = 82; break; } else { __label__ = 29; break; } //@line 2162 "textio.c"
      case 29: // $bb28
        var $100=HEAP[$self_addr]; //@line 2165 "textio.c"
        var $101=(($100+32)&4294967295); //@line 2165 "textio.c"
        var $102=HEAP[$101]; //@line 2165 "textio.c"
        var $103=($102)==0; //@line 2165 "textio.c"
        if ($103) { __label__ = 31; break; } else { __label__ = 30; break; } //@line 2165 "textio.c"
      case 30: // $bb29
        var $104=HEAP[$self_addr]; //@line 2165 "textio.c"
        var $105=(($104+80)&4294967295); //@line 2165 "textio.c"
        var $106=HEAP[$105]; //@line 2165 "textio.c"
        var $107=($106)==0; //@line 2165 "textio.c"
        if ($107) { __label__ = 31; break; } else { __label__ = 35; break; } //@line 2165 "textio.c"
      case 31: // $bb30
        var $108=HEAP[$self_addr]; //@line 2166 "textio.c"
        var $109=(($108+64)&4294967295); //@line 2166 "textio.c"
        var $110=HEAP[$109]; //@line 2166 "textio.c"
        var $111=($110)!=0; //@line 2166 "textio.c"
        if ($111) { __label__ = 32; break; } else { __label__ = 34; break; } //@line 2166 "textio.c"
      case 32: // $bb31
        var $112=HEAP[$self_addr]; //@line 2166 "textio.c"
        var $113=(($112+64)&4294967295); //@line 2166 "textio.c"
        var $114=HEAP[$113]; //@line 2166 "textio.c"
        var $115=_PyUnicodeUCS2_GetSize($114); //@line 2166 "textio.c"
        var $116=((($115))|0)!=0; //@line 2166 "textio.c"
        if ($116) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 2166 "textio.c"
      case 33: // $bb32
        ___assert_fail(((__str89)&4294967295), ((__str15390)&4294967295), 2166, ((___PRETTY_FUNCTION___11475)&4294967295)); //@line 2166 "textio.c"
        throw "Reached an unreachable! Original .ll line: 35209"; //@line 2166 "textio.c"
      case 34: // $bb33
        var $117=HEAP[$posobj]; //@line 2167 "textio.c"
        HEAP[$0]=$117; //@line 2167 "textio.c"
        __label__ = 94; break; //@line 2167 "textio.c"
      case 35: // $bb34
        var $118=HEAP[$posobj]; //@line 2171 "textio.c"
        var $119=_PyLong_AsLongLong($118); //@line 2171 "textio.c"
        var $120=(($cookie)&4294967295); //@line 2171 "textio.c"
        HEAP[$120]=$119; //@line 2171 "textio.c"
        var $121=_PyErr_Occurred(); //@line 2175 "textio.c"
        var $122=($121)!=0; //@line 2175 "textio.c"
        if ($122) { __label__ = 82; break; } else { __label__ = 36; break; } //@line 2175 "textio.c"
      case 36: // $bb35
        var $123=HEAP[$self_addr]; //@line 2179 "textio.c"
        var $124=(($123+80)&4294967295); //@line 2179 "textio.c"
        var $125=HEAP[$124]; //@line 2179 "textio.c"
        var $126=(($cookie+8)&4294967295); //@line 2179 "textio.c"
        var $127=__PyArg_Parse_SizeT($125, ((__str90)&4294967295), $126, $next_input); //@line 2179 "textio.c"
        var $128=((($127))|0)==0; //@line 2179 "textio.c"
        if ($128) { __label__ = 82; break; } else { __label__ = 37; break; } //@line 2179 "textio.c"
      case 37: // $bb36
        var $129=HEAP[$next_input]; //@line 2182 "textio.c"
        var $130=(($129+4)&4294967295); //@line 2182 "textio.c"
        var $131=HEAP[$130]; //@line 2182 "textio.c"
        var $132=(($131+84)&4294967295); //@line 2182 "textio.c"
        var $133=HEAP[$132]; //@line 2182 "textio.c"
        var $134=($133) & 134217728; //@line 2182 "textio.c"
        var $135=((($134))|0)==0; //@line 2182 "textio.c"
        if ($135) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 2182 "textio.c"
      case 38: // $bb37
        ___assert_fail(((__str67443)&4294967295), ((__str15390)&4294967295), 2182, ((___PRETTY_FUNCTION___11475)&4294967295)); //@line 2182 "textio.c"
        throw "Reached an unreachable! Original .ll line: 35246"; //@line 2182 "textio.c"
      case 39: // $bb38
        var $136=(($cookie)&4294967295); //@line 2184 "textio.c"
        var $137=HEAP[$136]; //@line 2184 "textio.c"
        var $138=HEAP[$next_input]; //@line 2184 "textio.c"
        var $139=$138; //@line 2184 "textio.c"
        var $140=(($139+8)&4294967295); //@line 2184 "textio.c"
        var $141=HEAP[$140]; //@line 2184 "textio.c"
        var $142=((($141))|0); //@line 2184 "textio.c"
        var $143=($137) - ($142); //@line 2184 "textio.c"
        var $144=(($cookie)&4294967295); //@line 2184 "textio.c"
        HEAP[$144]=$143; //@line 2184 "textio.c"
        var $145=HEAP[$self_addr]; //@line 2187 "textio.c"
        var $146=(($145+68)&4294967295); //@line 2187 "textio.c"
        var $147=HEAP[$146]; //@line 2187 "textio.c"
        var $148=((($147))|0)==0; //@line 2187 "textio.c"
        if ($148) { __label__ = 40; break; } else { __label__ = 43; break; } //@line 2187 "textio.c"
      case 40: // $bb39
        var $149=HEAP[$posobj]; //@line 2189 "textio.c"
        var $150=(($149)&4294967295); //@line 2189 "textio.c"
        var $151=HEAP[$150]; //@line 2189 "textio.c"
        var $152=((($151) - 1)&4294967295); //@line 2189 "textio.c"
        var $153=HEAP[$posobj]; //@line 2189 "textio.c"
        var $154=(($153)&4294967295); //@line 2189 "textio.c"
        HEAP[$154]=$152; //@line 2189 "textio.c"
        var $155=HEAP[$posobj]; //@line 2189 "textio.c"
        var $156=(($155)&4294967295); //@line 2189 "textio.c"
        var $157=HEAP[$156]; //@line 2189 "textio.c"
        var $158=((($157))|0)==0; //@line 2189 "textio.c"
        if ($158) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 2189 "textio.c"
      case 41: // $bb40
        var $159=HEAP[$posobj]; //@line 2189 "textio.c"
        var $160=(($159+4)&4294967295); //@line 2189 "textio.c"
        var $161=HEAP[$160]; //@line 2189 "textio.c"
        var $162=(($161+24)&4294967295); //@line 2189 "textio.c"
        var $163=HEAP[$162]; //@line 2189 "textio.c"
        var $164=HEAP[$posobj]; //@line 2189 "textio.c"
        FUNCTION_TABLE[$163]($164); //@line 2189 "textio.c"
        __label__ = 42; break; //@line 2189 "textio.c"
      case 42: // $bb41
        var $165=_textiowrapper_build_cookie($cookie); //@line 2190 "textio.c"
        HEAP[$0]=$165; //@line 2190 "textio.c"
        __label__ = 94; break; //@line 2190 "textio.c"
      case 43: // $bb42
        var $166=HEAP[$self_addr]; //@line 2193 "textio.c"
        var $167=(($166+68)&4294967295); //@line 2193 "textio.c"
        var $168=HEAP[$167]; //@line 2193 "textio.c"
        HEAP[$chars_to_skip]=$168; //@line 2193 "textio.c"
        var $169=HEAP[__PyIO_str_getstate]; //@line 2198 "textio.c"
        var $170=HEAP[$self_addr]; //@line 2198 "textio.c"
        var $171=(($170+32)&4294967295); //@line 2198 "textio.c"
        var $172=HEAP[$171]; //@line 2198 "textio.c"
        var $173=_PyObject_CallMethodObjArgs($172, $169, 0); //@line 2198 "textio.c"
        HEAP[$saved_state]=$173; //@line 2198 "textio.c"
        var $174=HEAP[$saved_state]; //@line 2200 "textio.c"
        var $175=($174)==0; //@line 2200 "textio.c"
        if ($175) { __label__ = 82; break; } else { __label__ = 44; break; } //@line 2200 "textio.c"
      case 44: // $bb43
        var $176=HEAP[$self_addr]; //@line 2204 "textio.c"
        var $177=__textiowrapper_decoder_setstate($176, $cookie); //@line 2204 "textio.c"
        var $178=((($177))|0) < 0; //@line 2204 "textio.c"
        if ($178) { __label__ = 82; break; } else { __label__ = 45; break; } //@line 2204 "textio.c"
      case 45: // $bb44
        HEAP[$chars_decoded]=0; //@line 2212 "textio.c"
        var $179=HEAP[$next_input]; //@line 2213 "textio.c"
        var $180=$179; //@line 2213 "textio.c"
        var $181=(($180+20)&4294967295); //@line 2213 "textio.c"
        var $182=(($181)&4294967295); //@line 2213 "textio.c"
        HEAP[$input]=$182; //@line 2213 "textio.c"
        var $183=HEAP[$next_input]; //@line 2214 "textio.c"
        var $184=$183; //@line 2214 "textio.c"
        var $185=(($184+8)&4294967295); //@line 2214 "textio.c"
        var $186=HEAP[$185]; //@line 2214 "textio.c"
        var $187=HEAP[$input]; //@line 2214 "textio.c"
        var $188=(($187+$186)&4294967295); //@line 2214 "textio.c"
        HEAP[$input_end]=$188; //@line 2214 "textio.c"
        __label__ = 63; break; //@line 2214 "textio.c"
      case 46: // $bb45
        var $189=HEAP[$self_addr]; //@line 2222 "textio.c"
        var $190=(($189+32)&4294967295); //@line 2222 "textio.c"
        var $191=HEAP[$190]; //@line 2222 "textio.c"
        var $192=HEAP[$input]; //@line 2222 "textio.c"
        var $193=__PyObject_CallMethod_SizeT($191, ((__str29404)&4294967295), ((__str91)&4294967295), $192, 1); //@line 2222 "textio.c"
        HEAP[$decoded]=$193; //@line 2222 "textio.c"
        var $194=HEAP[$decoded]; //@line 2223 "textio.c"
        var $195=($194)==0; //@line 2223 "textio.c"
        if ($195) { __label__ = 82; break; } else { __label__ = 47; break; } //@line 2223 "textio.c"
      case 47: // $bb46
        var $196=HEAP[$decoded]; //@line 2225 "textio.c"
        var $197=(($196+4)&4294967295); //@line 2225 "textio.c"
        var $198=HEAP[$197]; //@line 2225 "textio.c"
        var $199=(($198+84)&4294967295); //@line 2225 "textio.c"
        var $200=HEAP[$199]; //@line 2225 "textio.c"
        var $201=($200) & 268435456; //@line 2225 "textio.c"
        var $202=((($201))|0)==0; //@line 2225 "textio.c"
        if ($202) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 2225 "textio.c"
      case 48: // $bb47
        ___assert_fail(((__str92)&4294967295), ((__str15390)&4294967295), 2225, ((___PRETTY_FUNCTION___11475)&4294967295)); //@line 2225 "textio.c"
        throw "Reached an unreachable! Original .ll line: 35359"; //@line 2225 "textio.c"
      case 49: // $bb48
        var $203=HEAP[$decoded]; //@line 2226 "textio.c"
        var $204=$203; //@line 2226 "textio.c"
        var $205=(($204+8)&4294967295); //@line 2226 "textio.c"
        var $206=HEAP[$205]; //@line 2226 "textio.c"
        var $207=HEAP[$chars_decoded]; //@line 2226 "textio.c"
        var $208=((($206) + ($207))&4294967295); //@line 2226 "textio.c"
        HEAP[$chars_decoded]=$208; //@line 2226 "textio.c"
        var $209=HEAP[$decoded]; //@line 2227 "textio.c"
        var $210=(($209)&4294967295); //@line 2227 "textio.c"
        var $211=HEAP[$210]; //@line 2227 "textio.c"
        var $212=((($211) - 1)&4294967295); //@line 2227 "textio.c"
        var $213=HEAP[$decoded]; //@line 2227 "textio.c"
        var $214=(($213)&4294967295); //@line 2227 "textio.c"
        HEAP[$214]=$212; //@line 2227 "textio.c"
        var $215=HEAP[$decoded]; //@line 2227 "textio.c"
        var $216=(($215)&4294967295); //@line 2227 "textio.c"
        var $217=HEAP[$216]; //@line 2227 "textio.c"
        var $218=((($217))|0)==0; //@line 2227 "textio.c"
        if ($218) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 2227 "textio.c"
      case 50: // $bb49
        var $219=HEAP[$decoded]; //@line 2227 "textio.c"
        var $220=(($219+4)&4294967295); //@line 2227 "textio.c"
        var $221=HEAP[$220]; //@line 2227 "textio.c"
        var $222=(($221+24)&4294967295); //@line 2227 "textio.c"
        var $223=HEAP[$222]; //@line 2227 "textio.c"
        var $224=HEAP[$decoded]; //@line 2227 "textio.c"
        FUNCTION_TABLE[$223]($224); //@line 2227 "textio.c"
        __label__ = 51; break; //@line 2227 "textio.c"
      case 51: // $bb50
        var $225=(($cookie+12)&4294967295); //@line 2229 "textio.c"
        var $226=HEAP[$225]; //@line 2229 "textio.c"
        var $227=((($226) + 1)&4294967295); //@line 2229 "textio.c"
        var $228=(($cookie+12)&4294967295); //@line 2229 "textio.c"
        HEAP[$228]=$227; //@line 2229 "textio.c"
        var $229=HEAP[__PyIO_str_getstate]; //@line 2231 "textio.c"
        var $230=HEAP[$self_addr]; //@line 2231 "textio.c"
        var $231=(($230+32)&4294967295); //@line 2231 "textio.c"
        var $232=HEAP[$231]; //@line 2231 "textio.c"
        var $233=_PyObject_CallMethodObjArgs($232, $229, 0); //@line 2231 "textio.c"
        HEAP[$state]=$233; //@line 2231 "textio.c"
        var $234=HEAP[$state]; //@line 2233 "textio.c"
        var $235=($234)==0; //@line 2233 "textio.c"
        if ($235) { __label__ = 82; break; } else { __label__ = 52; break; } //@line 2233 "textio.c"
      case 52: // $bb51
        var $236=HEAP[$state]; //@line 2235 "textio.c"
        var $237=__PyArg_Parse_SizeT($236, ((__str93)&4294967295), $dec_buffer, $dec_buffer_len, $dec_flags); //@line 2235 "textio.c"
        var $238=((($237))|0)==0; //@line 2235 "textio.c"
        if ($238) { __label__ = 53; break; } else { __label__ = 56; break; } //@line 2235 "textio.c"
      case 53: // $bb52
        var $239=HEAP[$state]; //@line 2236 "textio.c"
        var $240=(($239)&4294967295); //@line 2236 "textio.c"
        var $241=HEAP[$240]; //@line 2236 "textio.c"
        var $242=((($241) - 1)&4294967295); //@line 2236 "textio.c"
        var $243=HEAP[$state]; //@line 2236 "textio.c"
        var $244=(($243)&4294967295); //@line 2236 "textio.c"
        HEAP[$244]=$242; //@line 2236 "textio.c"
        var $245=HEAP[$state]; //@line 2236 "textio.c"
        var $246=(($245)&4294967295); //@line 2236 "textio.c"
        var $247=HEAP[$246]; //@line 2236 "textio.c"
        var $248=((($247))|0)==0; //@line 2236 "textio.c"
        if ($248) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 2236 "textio.c"
      case 54: // $bb53
        var $249=HEAP[$state]; //@line 2236 "textio.c"
        var $250=(($249+4)&4294967295); //@line 2236 "textio.c"
        var $251=HEAP[$250]; //@line 2236 "textio.c"
        var $252=(($251+24)&4294967295); //@line 2236 "textio.c"
        var $253=HEAP[$252]; //@line 2236 "textio.c"
        var $254=HEAP[$state]; //@line 2236 "textio.c"
        FUNCTION_TABLE[$253]($254); //@line 2236 "textio.c"
        __label__ = 55; break; //@line 2236 "textio.c"
      case 55: // $bb54
        __label__ = 82; break; //@line 2236 "textio.c"
      case 56: // $bb55
        var $255=HEAP[$state]; //@line 2239 "textio.c"
        var $256=(($255)&4294967295); //@line 2239 "textio.c"
        var $257=HEAP[$256]; //@line 2239 "textio.c"
        var $258=((($257) - 1)&4294967295); //@line 2239 "textio.c"
        var $259=HEAP[$state]; //@line 2239 "textio.c"
        var $260=(($259)&4294967295); //@line 2239 "textio.c"
        HEAP[$260]=$258; //@line 2239 "textio.c"
        var $261=HEAP[$state]; //@line 2239 "textio.c"
        var $262=(($261)&4294967295); //@line 2239 "textio.c"
        var $263=HEAP[$262]; //@line 2239 "textio.c"
        var $264=((($263))|0)==0; //@line 2239 "textio.c"
        if ($264) { __label__ = 57; break; } else { __label__ = 58; break; } //@line 2239 "textio.c"
      case 57: // $bb56
        var $265=HEAP[$state]; //@line 2239 "textio.c"
        var $266=(($265+4)&4294967295); //@line 2239 "textio.c"
        var $267=HEAP[$266]; //@line 2239 "textio.c"
        var $268=(($267+24)&4294967295); //@line 2239 "textio.c"
        var $269=HEAP[$268]; //@line 2239 "textio.c"
        var $270=HEAP[$state]; //@line 2239 "textio.c"
        FUNCTION_TABLE[$269]($270); //@line 2239 "textio.c"
        __label__ = 58; break; //@line 2239 "textio.c"
      case 58: // $bb57
        var $271=HEAP[$dec_buffer_len]; //@line 2241 "textio.c"
        var $272=((($271))|0)==0; //@line 2241 "textio.c"
        if ($272) { __label__ = 59; break; } else { __label__ = 61; break; } //@line 2241 "textio.c"
      case 59: // $bb58
        var $273=HEAP[$chars_decoded]; //@line 2241 "textio.c"
        var $274=HEAP[$chars_to_skip]; //@line 2241 "textio.c"
        var $275=((($273))|0) <= ((($274))|0); //@line 2241 "textio.c"
        if ($275) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 2241 "textio.c"
      case 60: // $bb59
        var $276=(($cookie)&4294967295); //@line 2243 "textio.c"
        var $277=HEAP[$276]; //@line 2243 "textio.c"
        var $278=(($cookie+12)&4294967295); //@line 2243 "textio.c"
        var $279=HEAP[$278]; //@line 2243 "textio.c"
        var $280=((($279))|0); //@line 2243 "textio.c"
        var $281=($277) + ($280); //@line 2243 "textio.c"
        var $282=(($cookie)&4294967295); //@line 2243 "textio.c"
        HEAP[$282]=$281; //@line 2243 "textio.c"
        var $283=HEAP[$chars_to_skip]; //@line 2244 "textio.c"
        var $284=HEAP[$chars_decoded]; //@line 2244 "textio.c"
        var $285=((($283) - ($284))&4294967295); //@line 2244 "textio.c"
        HEAP[$chars_to_skip]=$285; //@line 2244 "textio.c"
        var $286=HEAP[$dec_flags]; //@line 2245 "textio.c"
        var $287=(($cookie+8)&4294967295); //@line 2245 "textio.c"
        HEAP[$287]=$286; //@line 2245 "textio.c"
        var $288=(($cookie+12)&4294967295); //@line 2246 "textio.c"
        HEAP[$288]=0; //@line 2246 "textio.c"
        HEAP[$chars_decoded]=0; //@line 2247 "textio.c"
        __label__ = 61; break; //@line 2247 "textio.c"
      case 61: // $bb60
        var $289=HEAP[$chars_decoded]; //@line 2249 "textio.c"
        var $290=HEAP[$chars_to_skip]; //@line 2249 "textio.c"
        var $291=((($289))|0) >= ((($290))|0); //@line 2249 "textio.c"
        if ($291) { __label__ = 64; break; } else { __label__ = 62; break; } //@line 2249 "textio.c"
      case 62: // $bb61
        var $292=HEAP[$input]; //@line 2251 "textio.c"
        var $293=(($292+1)&4294967295); //@line 2251 "textio.c"
        HEAP[$input]=$293; //@line 2251 "textio.c"
        __label__ = 63; break; //@line 2251 "textio.c"
      case 63: // $bb62
        var $294=HEAP[$input]; //@line 2215 "textio.c"
        var $295=HEAP[$input_end]; //@line 2215 "textio.c"
        var $296=($294) < ($295); //@line 2215 "textio.c"
        if ($296) { __label__ = 46; break; } else { __label__ = 64; break; } //@line 2215 "textio.c"
      case 64: // $bb63
        var $297=HEAP[$input]; //@line 2253 "textio.c"
        var $298=HEAP[$input_end]; //@line 2253 "textio.c"
        var $299=($297)==($298); //@line 2253 "textio.c"
        if ($299) { __label__ = 65; break; } else { __label__ = 72; break; } //@line 2253 "textio.c"
      case 65: // $bb64
        var $300=HEAP[$self_addr]; //@line 2256 "textio.c"
        var $301=(($300+32)&4294967295); //@line 2256 "textio.c"
        var $302=HEAP[$301]; //@line 2256 "textio.c"
        var $303=__PyObject_CallMethod_SizeT($302, ((__str29404)&4294967295), ((__str94)&4294967295), ((__str20395)&4294967295), 1); //@line 2256 "textio.c"
        HEAP[$decoded65]=$303; //@line 2256 "textio.c"
        var $304=HEAP[$decoded65]; //@line 2257 "textio.c"
        var $305=($304)==0; //@line 2257 "textio.c"
        if ($305) { __label__ = 82; break; } else { __label__ = 66; break; } //@line 2257 "textio.c"
      case 66: // $bb66
        var $306=HEAP[$decoded65]; //@line 2259 "textio.c"
        var $307=(($306+4)&4294967295); //@line 2259 "textio.c"
        var $308=HEAP[$307]; //@line 2259 "textio.c"
        var $309=(($308+84)&4294967295); //@line 2259 "textio.c"
        var $310=HEAP[$309]; //@line 2259 "textio.c"
        var $311=($310) & 268435456; //@line 2259 "textio.c"
        var $312=((($311))|0)==0; //@line 2259 "textio.c"
        if ($312) { __label__ = 67; break; } else { __label__ = 68; break; } //@line 2259 "textio.c"
      case 67: // $bb67
        ___assert_fail(((__str92)&4294967295), ((__str15390)&4294967295), 2259, ((___PRETTY_FUNCTION___11475)&4294967295)); //@line 2259 "textio.c"
        throw "Reached an unreachable! Original .ll line: 35544"; //@line 2259 "textio.c"
      case 68: // $bb68
        var $313=HEAP[$decoded65]; //@line 2260 "textio.c"
        var $314=$313; //@line 2260 "textio.c"
        var $315=(($314+8)&4294967295); //@line 2260 "textio.c"
        var $316=HEAP[$315]; //@line 2260 "textio.c"
        var $317=HEAP[$chars_decoded]; //@line 2260 "textio.c"
        var $318=((($316) + ($317))&4294967295); //@line 2260 "textio.c"
        HEAP[$chars_decoded]=$318; //@line 2260 "textio.c"
        var $319=HEAP[$decoded65]; //@line 2261 "textio.c"
        var $320=(($319)&4294967295); //@line 2261 "textio.c"
        var $321=HEAP[$320]; //@line 2261 "textio.c"
        var $322=((($321) - 1)&4294967295); //@line 2261 "textio.c"
        var $323=HEAP[$decoded65]; //@line 2261 "textio.c"
        var $324=(($323)&4294967295); //@line 2261 "textio.c"
        HEAP[$324]=$322; //@line 2261 "textio.c"
        var $325=HEAP[$decoded65]; //@line 2261 "textio.c"
        var $326=(($325)&4294967295); //@line 2261 "textio.c"
        var $327=HEAP[$326]; //@line 2261 "textio.c"
        var $328=((($327))|0)==0; //@line 2261 "textio.c"
        if ($328) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 2261 "textio.c"
      case 69: // $bb69
        var $329=HEAP[$decoded65]; //@line 2261 "textio.c"
        var $330=(($329+4)&4294967295); //@line 2261 "textio.c"
        var $331=HEAP[$330]; //@line 2261 "textio.c"
        var $332=(($331+24)&4294967295); //@line 2261 "textio.c"
        var $333=HEAP[$332]; //@line 2261 "textio.c"
        var $334=HEAP[$decoded65]; //@line 2261 "textio.c"
        FUNCTION_TABLE[$333]($334); //@line 2261 "textio.c"
        __label__ = 70; break; //@line 2261 "textio.c"
      case 70: // $bb70
        var $335=(($cookie+20)&4294967295); //@line 2262 "textio.c"
        HEAP[$335]=1; //@line 2262 "textio.c"
        var $336=HEAP[$chars_decoded]; //@line 2264 "textio.c"
        var $337=HEAP[$chars_to_skip]; //@line 2264 "textio.c"
        var $338=((($336))|0) < ((($337))|0); //@line 2264 "textio.c"
        if ($338) { __label__ = 71; break; } else { __label__ = 72; break; } //@line 2264 "textio.c"
      case 71: // $bb71
        var $339=HEAP[_PyExc_IOError]; //@line 2265 "textio.c"
        _PyErr_SetString($339, ((__str95)&4294967295)); //@line 2265 "textio.c"
        __label__ = 82; break; //@line 2265 "textio.c"
      case 72: // $bb72
        var $340=HEAP[$posobj]; //@line 2272 "textio.c"
        var $341=($340)!=0; //@line 2272 "textio.c"
        if ($341) { __label__ = 73; break; } else { __label__ = 75; break; } //@line 2272 "textio.c"
      case 73: // $bb73
        var $342=HEAP[$posobj]; //@line 2272 "textio.c"
        var $343=(($342)&4294967295); //@line 2272 "textio.c"
        var $344=HEAP[$343]; //@line 2272 "textio.c"
        var $345=((($344) - 1)&4294967295); //@line 2272 "textio.c"
        var $346=HEAP[$posobj]; //@line 2272 "textio.c"
        var $347=(($346)&4294967295); //@line 2272 "textio.c"
        HEAP[$347]=$345; //@line 2272 "textio.c"
        var $348=HEAP[$posobj]; //@line 2272 "textio.c"
        var $349=(($348)&4294967295); //@line 2272 "textio.c"
        var $350=HEAP[$349]; //@line 2272 "textio.c"
        var $351=((($350))|0)==0; //@line 2272 "textio.c"
        if ($351) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 2272 "textio.c"
      case 74: // $bb74
        var $352=HEAP[$posobj]; //@line 2272 "textio.c"
        var $353=(($352+4)&4294967295); //@line 2272 "textio.c"
        var $354=HEAP[$353]; //@line 2272 "textio.c"
        var $355=(($354+24)&4294967295); //@line 2272 "textio.c"
        var $356=HEAP[$355]; //@line 2272 "textio.c"
        var $357=HEAP[$posobj]; //@line 2272 "textio.c"
        FUNCTION_TABLE[$356]($357); //@line 2272 "textio.c"
        __label__ = 75; break; //@line 2272 "textio.c"
      case 75: // $bb75
        var $358=HEAP[$self_addr]; //@line 2273 "textio.c"
        var $359=(($358+32)&4294967295); //@line 2273 "textio.c"
        var $360=HEAP[$359]; //@line 2273 "textio.c"
        var $361=HEAP[$saved_state]; //@line 2273 "textio.c"
        var $362=__PyObject_CallMethod_SizeT($360, ((__str22397)&4294967295), ((__str96)&4294967295), $361); //@line 2273 "textio.c"
        HEAP[$res]=$362; //@line 2273 "textio.c"
        var $363=HEAP[$saved_state]; //@line 2274 "textio.c"
        var $364=(($363)&4294967295); //@line 2274 "textio.c"
        var $365=HEAP[$364]; //@line 2274 "textio.c"
        var $366=((($365) - 1)&4294967295); //@line 2274 "textio.c"
        var $367=HEAP[$saved_state]; //@line 2274 "textio.c"
        var $368=(($367)&4294967295); //@line 2274 "textio.c"
        HEAP[$368]=$366; //@line 2274 "textio.c"
        var $369=HEAP[$saved_state]; //@line 2274 "textio.c"
        var $370=(($369)&4294967295); //@line 2274 "textio.c"
        var $371=HEAP[$370]; //@line 2274 "textio.c"
        var $372=((($371))|0)==0; //@line 2274 "textio.c"
        if ($372) { __label__ = 76; break; } else { __label__ = 77; break; } //@line 2274 "textio.c"
      case 76: // $bb76
        var $373=HEAP[$saved_state]; //@line 2274 "textio.c"
        var $374=(($373+4)&4294967295); //@line 2274 "textio.c"
        var $375=HEAP[$374]; //@line 2274 "textio.c"
        var $376=(($375+24)&4294967295); //@line 2274 "textio.c"
        var $377=HEAP[$376]; //@line 2274 "textio.c"
        var $378=HEAP[$saved_state]; //@line 2274 "textio.c"
        FUNCTION_TABLE[$377]($378); //@line 2274 "textio.c"
        __label__ = 77; break; //@line 2274 "textio.c"
      case 77: // $bb77
        var $379=HEAP[$res]; //@line 2275 "textio.c"
        var $380=($379)==0; //@line 2275 "textio.c"
        if ($380) { __label__ = 78; break; } else { __label__ = 79; break; } //@line 2275 "textio.c"
      case 78: // $bb78
        HEAP[$0]=0; //@line 2276 "textio.c"
        __label__ = 94; break; //@line 2276 "textio.c"
      case 79: // $bb79
        var $381=HEAP[$res]; //@line 2277 "textio.c"
        var $382=(($381)&4294967295); //@line 2277 "textio.c"
        var $383=HEAP[$382]; //@line 2277 "textio.c"
        var $384=((($383) - 1)&4294967295); //@line 2277 "textio.c"
        var $385=HEAP[$res]; //@line 2277 "textio.c"
        var $386=(($385)&4294967295); //@line 2277 "textio.c"
        HEAP[$386]=$384; //@line 2277 "textio.c"
        var $387=HEAP[$res]; //@line 2277 "textio.c"
        var $388=(($387)&4294967295); //@line 2277 "textio.c"
        var $389=HEAP[$388]; //@line 2277 "textio.c"
        var $390=((($389))|0)==0; //@line 2277 "textio.c"
        if ($390) { __label__ = 80; break; } else { __label__ = 81; break; } //@line 2277 "textio.c"
      case 80: // $bb80
        var $391=HEAP[$res]; //@line 2277 "textio.c"
        var $392=(($391+4)&4294967295); //@line 2277 "textio.c"
        var $393=HEAP[$392]; //@line 2277 "textio.c"
        var $394=(($393+24)&4294967295); //@line 2277 "textio.c"
        var $395=HEAP[$394]; //@line 2277 "textio.c"
        var $396=HEAP[$res]; //@line 2277 "textio.c"
        FUNCTION_TABLE[$395]($396); //@line 2277 "textio.c"
        __label__ = 81; break; //@line 2277 "textio.c"
      case 81: // $bb81
        var $397=(($cookie+16)&4294967295); //@line 2280 "textio.c"
        var $398=HEAP[$chars_to_skip]; //@line 2280 "textio.c"
        HEAP[$397]=$398; //@line 2280 "textio.c"
        var $399=_textiowrapper_build_cookie($cookie); //@line 2281 "textio.c"
        HEAP[$0]=$399; //@line 2281 "textio.c"
        __label__ = 94; break; //@line 2281 "textio.c"
      case 82: // $fail
        var $400=HEAP[$posobj]; //@line 2284 "textio.c"
        var $401=($400)!=0; //@line 2284 "textio.c"
        if ($401) { __label__ = 83; break; } else { __label__ = 85; break; } //@line 2284 "textio.c"
      case 83: // $bb82
        var $402=HEAP[$posobj]; //@line 2284 "textio.c"
        var $403=(($402)&4294967295); //@line 2284 "textio.c"
        var $404=HEAP[$403]; //@line 2284 "textio.c"
        var $405=((($404) - 1)&4294967295); //@line 2284 "textio.c"
        var $406=HEAP[$posobj]; //@line 2284 "textio.c"
        var $407=(($406)&4294967295); //@line 2284 "textio.c"
        HEAP[$407]=$405; //@line 2284 "textio.c"
        var $408=HEAP[$posobj]; //@line 2284 "textio.c"
        var $409=(($408)&4294967295); //@line 2284 "textio.c"
        var $410=HEAP[$409]; //@line 2284 "textio.c"
        var $411=((($410))|0)==0; //@line 2284 "textio.c"
        if ($411) { __label__ = 84; break; } else { __label__ = 85; break; } //@line 2284 "textio.c"
      case 84: // $bb83
        var $412=HEAP[$posobj]; //@line 2284 "textio.c"
        var $413=(($412+4)&4294967295); //@line 2284 "textio.c"
        var $414=HEAP[$413]; //@line 2284 "textio.c"
        var $415=(($414+24)&4294967295); //@line 2284 "textio.c"
        var $416=HEAP[$415]; //@line 2284 "textio.c"
        var $417=HEAP[$posobj]; //@line 2284 "textio.c"
        FUNCTION_TABLE[$416]($417); //@line 2284 "textio.c"
        __label__ = 85; break; //@line 2284 "textio.c"
      case 85: // $bb84
        var $418=HEAP[$saved_state]; //@line 2285 "textio.c"
        var $419=($418)!=0; //@line 2285 "textio.c"
        if ($419) { __label__ = 86; break; } else { __label__ = 93; break; } //@line 2285 "textio.c"
      case 86: // $bb85
        _PyErr_Fetch($type, $value, $traceback); //@line 2287 "textio.c"
        var $420=HEAP[$self_addr]; //@line 2289 "textio.c"
        var $421=(($420+32)&4294967295); //@line 2289 "textio.c"
        var $422=HEAP[$421]; //@line 2289 "textio.c"
        var $423=HEAP[$saved_state]; //@line 2289 "textio.c"
        var $424=__PyObject_CallMethod_SizeT($422, ((__str22397)&4294967295), ((__str96)&4294967295), $423); //@line 2289 "textio.c"
        HEAP[$res]=$424; //@line 2289 "textio.c"
        var $425=HEAP[$saved_state]; //@line 2290 "textio.c"
        var $426=(($425)&4294967295); //@line 2290 "textio.c"
        var $427=HEAP[$426]; //@line 2290 "textio.c"
        var $428=((($427) - 1)&4294967295); //@line 2290 "textio.c"
        var $429=HEAP[$saved_state]; //@line 2290 "textio.c"
        var $430=(($429)&4294967295); //@line 2290 "textio.c"
        HEAP[$430]=$428; //@line 2290 "textio.c"
        var $431=HEAP[$saved_state]; //@line 2290 "textio.c"
        var $432=(($431)&4294967295); //@line 2290 "textio.c"
        var $433=HEAP[$432]; //@line 2290 "textio.c"
        var $434=((($433))|0)==0; //@line 2290 "textio.c"
        if ($434) { __label__ = 87; break; } else { __label__ = 88; break; } //@line 2290 "textio.c"
      case 87: // $bb86
        var $435=HEAP[$saved_state]; //@line 2290 "textio.c"
        var $436=(($435+4)&4294967295); //@line 2290 "textio.c"
        var $437=HEAP[$436]; //@line 2290 "textio.c"
        var $438=(($437+24)&4294967295); //@line 2290 "textio.c"
        var $439=HEAP[$438]; //@line 2290 "textio.c"
        var $440=HEAP[$saved_state]; //@line 2290 "textio.c"
        FUNCTION_TABLE[$439]($440); //@line 2290 "textio.c"
        __label__ = 88; break; //@line 2290 "textio.c"
      case 88: // $bb87
        var $441=HEAP[$res]; //@line 2291 "textio.c"
        var $442=($441)==0; //@line 2291 "textio.c"
        if ($442) { __label__ = 89; break; } else { __label__ = 90; break; } //@line 2291 "textio.c"
      case 89: // $bb88
        HEAP[$0]=0; //@line 2292 "textio.c"
        __label__ = 94; break; //@line 2292 "textio.c"
      case 90: // $bb89
        var $443=HEAP[$res]; //@line 2293 "textio.c"
        var $444=(($443)&4294967295); //@line 2293 "textio.c"
        var $445=HEAP[$444]; //@line 2293 "textio.c"
        var $446=((($445) - 1)&4294967295); //@line 2293 "textio.c"
        var $447=HEAP[$res]; //@line 2293 "textio.c"
        var $448=(($447)&4294967295); //@line 2293 "textio.c"
        HEAP[$448]=$446; //@line 2293 "textio.c"
        var $449=HEAP[$res]; //@line 2293 "textio.c"
        var $450=(($449)&4294967295); //@line 2293 "textio.c"
        var $451=HEAP[$450]; //@line 2293 "textio.c"
        var $452=((($451))|0)==0; //@line 2293 "textio.c"
        if ($452) { __label__ = 91; break; } else { __label__ = 92; break; } //@line 2293 "textio.c"
      case 91: // $bb90
        var $453=HEAP[$res]; //@line 2293 "textio.c"
        var $454=(($453+4)&4294967295); //@line 2293 "textio.c"
        var $455=HEAP[$454]; //@line 2293 "textio.c"
        var $456=(($455+24)&4294967295); //@line 2293 "textio.c"
        var $457=HEAP[$456]; //@line 2293 "textio.c"
        var $458=HEAP[$res]; //@line 2293 "textio.c"
        FUNCTION_TABLE[$457]($458); //@line 2293 "textio.c"
        __label__ = 92; break; //@line 2293 "textio.c"
      case 92: // $bb91
        var $459=HEAP[$traceback]; //@line 2295 "textio.c"
        var $460=HEAP[$value]; //@line 2295 "textio.c"
        var $461=HEAP[$type]; //@line 2295 "textio.c"
        _PyErr_Restore($461, $460, $459); //@line 2295 "textio.c"
        __label__ = 93; break; //@line 2295 "textio.c"
      case 93: // $bb92
        HEAP[$0]=0; //@line 2297 "textio.c"
        __label__ = 94; break; //@line 2297 "textio.c"
      case 94: // $bb93
        var $462=HEAP[$0]; //@line 2140 "textio.c"
        HEAP[$retval]=$462; //@line 2140 "textio.c"
        __label__ = 95; break; //@line 2140 "textio.c"
      case 95: // $return
        var $retval94=HEAP[$retval]; //@line 2140 "textio.c"
        STACKTOP = __stackBase__;
        return $retval94; //@line 2140 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_truncate($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $pos=__stackBase__+16;
        var $res=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$pos]=__Py_NoneStruct; //@line 2303 "textio.c"
        var $1=HEAP[$self_addr]; //@line 2306 "textio.c"
        var $2=(($1+8)&4294967295); //@line 2306 "textio.c"
        var $3=HEAP[$2]; //@line 2306 "textio.c"
        var $4=((($3))|0) <= 0; //@line 2306 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2306 "textio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 2306 "textio.c"
        var $6=(($5+12)&4294967295); //@line 2306 "textio.c"
        var $7=HEAP[$6]; //@line 2306 "textio.c"
        var $8=((($7))|0)!=0; //@line 2306 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2306 "textio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 2306 "textio.c"
        _PyErr_SetString($9, ((__str57433)&4294967295)); //@line 2306 "textio.c"
        __label__ = 4; break; //@line 2306 "textio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 2306 "textio.c"
        _PyErr_SetString($10, ((__str58434)&4294967295)); //@line 2306 "textio.c"
        __label__ = 4; break; //@line 2306 "textio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 2306 "textio.c"
        __label__ = 12; break; //@line 2306 "textio.c"
      case 5: // $bb4
        var $11=HEAP[$args_addr]; //@line 2307 "textio.c"
        var $12=__PyArg_ParseTuple_SizeT($11, ((__str97)&4294967295), $pos); //@line 2307 "textio.c"
        var $13=((($12))|0)==0; //@line 2307 "textio.c"
        if ($13) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 2307 "textio.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 2308 "textio.c"
        __label__ = 12; break; //@line 2308 "textio.c"
      case 7: // $bb6
        var $14=HEAP[__PyIO_str_flush]; //@line 2311 "textio.c"
        var $15=HEAP[$self_addr]; //@line 2311 "textio.c"
        var $16=$15; //@line 2311 "textio.c"
        var $17=_PyObject_CallMethodObjArgs($16, $14, 0); //@line 2311 "textio.c"
        HEAP[$res]=$17; //@line 2311 "textio.c"
        var $18=HEAP[$res]; //@line 2312 "textio.c"
        var $19=($18)==0; //@line 2312 "textio.c"
        if ($19) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 2312 "textio.c"
      case 8: // $bb7
        HEAP[$0]=0; //@line 2313 "textio.c"
        __label__ = 12; break; //@line 2313 "textio.c"
      case 9: // $bb8
        var $20=HEAP[$res]; //@line 2314 "textio.c"
        var $21=(($20)&4294967295); //@line 2314 "textio.c"
        var $22=HEAP[$21]; //@line 2314 "textio.c"
        var $23=((($22) - 1)&4294967295); //@line 2314 "textio.c"
        var $24=HEAP[$res]; //@line 2314 "textio.c"
        var $25=(($24)&4294967295); //@line 2314 "textio.c"
        HEAP[$25]=$23; //@line 2314 "textio.c"
        var $26=HEAP[$res]; //@line 2314 "textio.c"
        var $27=(($26)&4294967295); //@line 2314 "textio.c"
        var $28=HEAP[$27]; //@line 2314 "textio.c"
        var $29=((($28))|0)==0; //@line 2314 "textio.c"
        if ($29) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 2314 "textio.c"
      case 10: // $bb9
        var $30=HEAP[$res]; //@line 2314 "textio.c"
        var $31=(($30+4)&4294967295); //@line 2314 "textio.c"
        var $32=HEAP[$31]; //@line 2314 "textio.c"
        var $33=(($32+24)&4294967295); //@line 2314 "textio.c"
        var $34=HEAP[$33]; //@line 2314 "textio.c"
        var $35=HEAP[$res]; //@line 2314 "textio.c"
        FUNCTION_TABLE[$34]($35); //@line 2314 "textio.c"
        __label__ = 11; break; //@line 2314 "textio.c"
      case 11: // $bb10
        var $36=HEAP[$pos]; //@line 2316 "textio.c"
        var $37=HEAP[__PyIO_str_truncate]; //@line 2316 "textio.c"
        var $38=HEAP[$self_addr]; //@line 2316 "textio.c"
        var $39=(($38+20)&4294967295); //@line 2316 "textio.c"
        var $40=HEAP[$39]; //@line 2316 "textio.c"
        var $41=_PyObject_CallMethodObjArgs($40, $37, $36, 0); //@line 2316 "textio.c"
        HEAP[$0]=$41; //@line 2316 "textio.c"
        __label__ = 12; break; //@line 2316 "textio.c"
      case 12: // $bb11
        var $42=HEAP[$0]; //@line 2306 "textio.c"
        HEAP[$retval]=$42; //@line 2306 "textio.c"
        __label__ = 13; break; //@line 2306 "textio.c"
      case 13: // $return
        var $retval12=HEAP[$retval]; //@line 2306 "textio.c"
        STACKTOP = __stackBase__;
        return $retval12; //@line 2306 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_repr($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $nameobj=__stackBase__+12;
        var $res=__stackBase__+16;
        var $namerepr=__stackBase__+20;
        var $encrepr=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$namerepr]=0; //@line 2323 "textio.c"
        HEAP[$encrepr]=0; //@line 2323 "textio.c"
        var $1=HEAP[$self_addr]; //@line 2325 "textio.c"
        var $2=(($1+8)&4294967295); //@line 2325 "textio.c"
        var $3=HEAP[$2]; //@line 2325 "textio.c"
        var $4=((($3))|0) <= 0; //@line 2325 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2325 "textio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 2325 "textio.c"
        var $6=(($5+12)&4294967295); //@line 2325 "textio.c"
        var $7=HEAP[$6]; //@line 2325 "textio.c"
        var $8=((($7))|0)!=0; //@line 2325 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2325 "textio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 2325 "textio.c"
        _PyErr_SetString($9, ((__str57433)&4294967295)); //@line 2325 "textio.c"
        __label__ = 4; break; //@line 2325 "textio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 2325 "textio.c"
        _PyErr_SetString($10, ((__str58434)&4294967295)); //@line 2325 "textio.c"
        __label__ = 4; break; //@line 2325 "textio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 2325 "textio.c"
        __label__ = 24; break; //@line 2325 "textio.c"
      case 5: // $bb4
        var $11=HEAP[$self_addr]; //@line 2327 "textio.c"
        var $12=$11; //@line 2327 "textio.c"
        var $13=_PyObject_GetAttrString($12, ((__str53429)&4294967295)); //@line 2327 "textio.c"
        HEAP[$nameobj]=$13; //@line 2327 "textio.c"
        var $14=HEAP[$nameobj]; //@line 2328 "textio.c"
        var $15=($14)==0; //@line 2328 "textio.c"
        if ($15) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 2328 "textio.c"
      case 6: // $bb5
        var $16=HEAP[_PyExc_AttributeError]; //@line 2329 "textio.c"
        var $17=_PyErr_ExceptionMatches($16); //@line 2329 "textio.c"
        var $18=((($17))|0)!=0; //@line 2329 "textio.c"
        if ($18) { __label__ = 7; break; } else { __label__ = 17; break; } //@line 2329 "textio.c"
      case 7: // $bb6
        _PyErr_Clear(); //@line 2330 "textio.c"
        var $19=HEAP[$self_addr]; //@line 2333 "textio.c"
        var $20=(($19+24)&4294967295); //@line 2333 "textio.c"
        var $21=HEAP[$20]; //@line 2333 "textio.c"
        var $22=_PyObject_Repr($21); //@line 2333 "textio.c"
        HEAP[$encrepr]=$22; //@line 2333 "textio.c"
        var $23=HEAP[$encrepr]; //@line 2334 "textio.c"
        var $24=$23; //@line 2334 "textio.c"
        var $25=(($24+20)&4294967295); //@line 2334 "textio.c"
        var $26=(($25)&4294967295); //@line 2334 "textio.c"
        var $27=_PyString_FromFormat(((__str98)&4294967295), $26); //@line 2334 "textio.c"
        HEAP[$res]=$27; //@line 2334 "textio.c"
        __label__ = 10; break; //@line 2334 "textio.c"
      case 8: // $bb7
        var $28=HEAP[$self_addr]; //@line 2338 "textio.c"
        var $29=(($28+24)&4294967295); //@line 2338 "textio.c"
        var $30=HEAP[$29]; //@line 2338 "textio.c"
        var $31=_PyObject_Repr($30); //@line 2338 "textio.c"
        HEAP[$encrepr]=$31; //@line 2338 "textio.c"
        var $32=HEAP[$nameobj]; //@line 2339 "textio.c"
        var $33=_PyObject_Repr($32); //@line 2339 "textio.c"
        HEAP[$namerepr]=$33; //@line 2339 "textio.c"
        var $34=HEAP[$encrepr]; //@line 2340 "textio.c"
        var $35=$34; //@line 2340 "textio.c"
        var $36=(($35+20)&4294967295); //@line 2340 "textio.c"
        var $37=(($36)&4294967295); //@line 2340 "textio.c"
        var $38=HEAP[$namerepr]; //@line 2340 "textio.c"
        var $39=$38; //@line 2340 "textio.c"
        var $40=(($39+20)&4294967295); //@line 2340 "textio.c"
        var $41=(($40)&4294967295); //@line 2340 "textio.c"
        var $42=_PyString_FromFormat(((__str99)&4294967295), $41, $37); //@line 2340 "textio.c"
        HEAP[$res]=$42; //@line 2340 "textio.c"
        var $43=HEAP[$nameobj]; //@line 2343 "textio.c"
        var $44=(($43)&4294967295); //@line 2343 "textio.c"
        var $45=HEAP[$44]; //@line 2343 "textio.c"
        var $46=((($45) - 1)&4294967295); //@line 2343 "textio.c"
        var $47=HEAP[$nameobj]; //@line 2343 "textio.c"
        var $48=(($47)&4294967295); //@line 2343 "textio.c"
        HEAP[$48]=$46; //@line 2343 "textio.c"
        var $49=HEAP[$nameobj]; //@line 2343 "textio.c"
        var $50=(($49)&4294967295); //@line 2343 "textio.c"
        var $51=HEAP[$50]; //@line 2343 "textio.c"
        var $52=((($51))|0)==0; //@line 2343 "textio.c"
        if ($52) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 2343 "textio.c"
      case 9: // $bb8
        var $53=HEAP[$nameobj]; //@line 2343 "textio.c"
        var $54=(($53+4)&4294967295); //@line 2343 "textio.c"
        var $55=HEAP[$54]; //@line 2343 "textio.c"
        var $56=(($55+24)&4294967295); //@line 2343 "textio.c"
        var $57=HEAP[$56]; //@line 2343 "textio.c"
        var $58=HEAP[$nameobj]; //@line 2343 "textio.c"
        FUNCTION_TABLE[$57]($58); //@line 2343 "textio.c"
        __label__ = 10; break; //@line 2343 "textio.c"
      case 10: // $bb9
        var $59=HEAP[$namerepr]; //@line 2345 "textio.c"
        var $60=($59)!=0; //@line 2345 "textio.c"
        if ($60) { __label__ = 11; break; } else { __label__ = 13; break; } //@line 2345 "textio.c"
      case 11: // $bb10
        var $61=HEAP[$namerepr]; //@line 2345 "textio.c"
        var $62=(($61)&4294967295); //@line 2345 "textio.c"
        var $63=HEAP[$62]; //@line 2345 "textio.c"
        var $64=((($63) - 1)&4294967295); //@line 2345 "textio.c"
        var $65=HEAP[$namerepr]; //@line 2345 "textio.c"
        var $66=(($65)&4294967295); //@line 2345 "textio.c"
        HEAP[$66]=$64; //@line 2345 "textio.c"
        var $67=HEAP[$namerepr]; //@line 2345 "textio.c"
        var $68=(($67)&4294967295); //@line 2345 "textio.c"
        var $69=HEAP[$68]; //@line 2345 "textio.c"
        var $70=((($69))|0)==0; //@line 2345 "textio.c"
        if ($70) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 2345 "textio.c"
      case 12: // $bb11
        var $71=HEAP[$namerepr]; //@line 2345 "textio.c"
        var $72=(($71+4)&4294967295); //@line 2345 "textio.c"
        var $73=HEAP[$72]; //@line 2345 "textio.c"
        var $74=(($73+24)&4294967295); //@line 2345 "textio.c"
        var $75=HEAP[$74]; //@line 2345 "textio.c"
        var $76=HEAP[$namerepr]; //@line 2345 "textio.c"
        FUNCTION_TABLE[$75]($76); //@line 2345 "textio.c"
        __label__ = 13; break; //@line 2345 "textio.c"
      case 13: // $bb12
        var $77=HEAP[$encrepr]; //@line 2346 "textio.c"
        var $78=($77)!=0; //@line 2346 "textio.c"
        if ($78) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 2346 "textio.c"
      case 14: // $bb13
        var $79=HEAP[$encrepr]; //@line 2346 "textio.c"
        var $80=(($79)&4294967295); //@line 2346 "textio.c"
        var $81=HEAP[$80]; //@line 2346 "textio.c"
        var $82=((($81) - 1)&4294967295); //@line 2346 "textio.c"
        var $83=HEAP[$encrepr]; //@line 2346 "textio.c"
        var $84=(($83)&4294967295); //@line 2346 "textio.c"
        HEAP[$84]=$82; //@line 2346 "textio.c"
        var $85=HEAP[$encrepr]; //@line 2346 "textio.c"
        var $86=(($85)&4294967295); //@line 2346 "textio.c"
        var $87=HEAP[$86]; //@line 2346 "textio.c"
        var $88=((($87))|0)==0; //@line 2346 "textio.c"
        if ($88) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 2346 "textio.c"
      case 15: // $bb14
        var $89=HEAP[$encrepr]; //@line 2346 "textio.c"
        var $90=(($89+4)&4294967295); //@line 2346 "textio.c"
        var $91=HEAP[$90]; //@line 2346 "textio.c"
        var $92=(($91+24)&4294967295); //@line 2346 "textio.c"
        var $93=HEAP[$92]; //@line 2346 "textio.c"
        var $94=HEAP[$encrepr]; //@line 2346 "textio.c"
        FUNCTION_TABLE[$93]($94); //@line 2346 "textio.c"
        __label__ = 16; break; //@line 2346 "textio.c"
      case 16: // $bb15
        var $95=HEAP[$res]; //@line 2347 "textio.c"
        HEAP[$0]=$95; //@line 2347 "textio.c"
        __label__ = 24; break; //@line 2347 "textio.c"
      case 17: // $error
        var $96=HEAP[$namerepr]; //@line 2350 "textio.c"
        var $97=($96)!=0; //@line 2350 "textio.c"
        if ($97) { __label__ = 18; break; } else { __label__ = 20; break; } //@line 2350 "textio.c"
      case 18: // $bb16
        var $98=HEAP[$namerepr]; //@line 2350 "textio.c"
        var $99=(($98)&4294967295); //@line 2350 "textio.c"
        var $100=HEAP[$99]; //@line 2350 "textio.c"
        var $101=((($100) - 1)&4294967295); //@line 2350 "textio.c"
        var $102=HEAP[$namerepr]; //@line 2350 "textio.c"
        var $103=(($102)&4294967295); //@line 2350 "textio.c"
        HEAP[$103]=$101; //@line 2350 "textio.c"
        var $104=HEAP[$namerepr]; //@line 2350 "textio.c"
        var $105=(($104)&4294967295); //@line 2350 "textio.c"
        var $106=HEAP[$105]; //@line 2350 "textio.c"
        var $107=((($106))|0)==0; //@line 2350 "textio.c"
        if ($107) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 2350 "textio.c"
      case 19: // $bb17
        var $108=HEAP[$namerepr]; //@line 2350 "textio.c"
        var $109=(($108+4)&4294967295); //@line 2350 "textio.c"
        var $110=HEAP[$109]; //@line 2350 "textio.c"
        var $111=(($110+24)&4294967295); //@line 2350 "textio.c"
        var $112=HEAP[$111]; //@line 2350 "textio.c"
        var $113=HEAP[$namerepr]; //@line 2350 "textio.c"
        FUNCTION_TABLE[$112]($113); //@line 2350 "textio.c"
        __label__ = 20; break; //@line 2350 "textio.c"
      case 20: // $bb18
        var $114=HEAP[$encrepr]; //@line 2351 "textio.c"
        var $115=($114)!=0; //@line 2351 "textio.c"
        if ($115) { __label__ = 21; break; } else { __label__ = 23; break; } //@line 2351 "textio.c"
      case 21: // $bb19
        var $116=HEAP[$encrepr]; //@line 2351 "textio.c"
        var $117=(($116)&4294967295); //@line 2351 "textio.c"
        var $118=HEAP[$117]; //@line 2351 "textio.c"
        var $119=((($118) - 1)&4294967295); //@line 2351 "textio.c"
        var $120=HEAP[$encrepr]; //@line 2351 "textio.c"
        var $121=(($120)&4294967295); //@line 2351 "textio.c"
        HEAP[$121]=$119; //@line 2351 "textio.c"
        var $122=HEAP[$encrepr]; //@line 2351 "textio.c"
        var $123=(($122)&4294967295); //@line 2351 "textio.c"
        var $124=HEAP[$123]; //@line 2351 "textio.c"
        var $125=((($124))|0)==0; //@line 2351 "textio.c"
        if ($125) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 2351 "textio.c"
      case 22: // $bb20
        var $126=HEAP[$encrepr]; //@line 2351 "textio.c"
        var $127=(($126+4)&4294967295); //@line 2351 "textio.c"
        var $128=HEAP[$127]; //@line 2351 "textio.c"
        var $129=(($128+24)&4294967295); //@line 2351 "textio.c"
        var $130=HEAP[$129]; //@line 2351 "textio.c"
        var $131=HEAP[$encrepr]; //@line 2351 "textio.c"
        FUNCTION_TABLE[$130]($131); //@line 2351 "textio.c"
        __label__ = 23; break; //@line 2351 "textio.c"
      case 23: // $bb21
        HEAP[$0]=0; //@line 2352 "textio.c"
        __label__ = 24; break; //@line 2352 "textio.c"
      case 24: // $bb22
        var $132=HEAP[$0]; //@line 2325 "textio.c"
        HEAP[$retval]=$132; //@line 2325 "textio.c"
        __label__ = 25; break; //@line 2325 "textio.c"
      case 25: // $return
        var $retval23=HEAP[$retval]; //@line 2325 "textio.c"
        STACKTOP = __stackBase__;
        return $retval23; //@line 2325 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_fileno($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 2361 "textio.c"
        var $2=(($1+8)&4294967295); //@line 2361 "textio.c"
        var $3=HEAP[$2]; //@line 2361 "textio.c"
        var $4=((($3))|0) <= 0; //@line 2361 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2361 "textio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 2361 "textio.c"
        var $6=(($5+12)&4294967295); //@line 2361 "textio.c"
        var $7=HEAP[$6]; //@line 2361 "textio.c"
        var $8=((($7))|0)!=0; //@line 2361 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2361 "textio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 2361 "textio.c"
        _PyErr_SetString($9, ((__str57433)&4294967295)); //@line 2361 "textio.c"
        __label__ = 4; break; //@line 2361 "textio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 2361 "textio.c"
        _PyErr_SetString($10, ((__str58434)&4294967295)); //@line 2361 "textio.c"
        __label__ = 4; break; //@line 2361 "textio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 2361 "textio.c"
        __label__ = 6; break; //@line 2361 "textio.c"
      case 5: // $bb4
        var $11=HEAP[$self_addr]; //@line 2362 "textio.c"
        var $12=(($11+20)&4294967295); //@line 2362 "textio.c"
        var $13=HEAP[$12]; //@line 2362 "textio.c"
        var $14=__PyObject_CallMethod_SizeT($13, ((__str100)&4294967295), 0); //@line 2362 "textio.c"
        HEAP[$0]=$14; //@line 2362 "textio.c"
        __label__ = 6; break; //@line 2362 "textio.c"
      case 6: // $bb5
        var $15=HEAP[$0]; //@line 2361 "textio.c"
        HEAP[$retval]=$15; //@line 2361 "textio.c"
        __label__ = 7; break; //@line 2361 "textio.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 2361 "textio.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 2361 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_seekable($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 2368 "textio.c"
        var $2=(($1+8)&4294967295); //@line 2368 "textio.c"
        var $3=HEAP[$2]; //@line 2368 "textio.c"
        var $4=((($3))|0) <= 0; //@line 2368 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2368 "textio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 2368 "textio.c"
        var $6=(($5+12)&4294967295); //@line 2368 "textio.c"
        var $7=HEAP[$6]; //@line 2368 "textio.c"
        var $8=((($7))|0)!=0; //@line 2368 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2368 "textio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 2368 "textio.c"
        _PyErr_SetString($9, ((__str57433)&4294967295)); //@line 2368 "textio.c"
        __label__ = 4; break; //@line 2368 "textio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 2368 "textio.c"
        _PyErr_SetString($10, ((__str58434)&4294967295)); //@line 2368 "textio.c"
        __label__ = 4; break; //@line 2368 "textio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 2368 "textio.c"
        __label__ = 6; break; //@line 2368 "textio.c"
      case 5: // $bb4
        var $11=HEAP[$self_addr]; //@line 2369 "textio.c"
        var $12=(($11+20)&4294967295); //@line 2369 "textio.c"
        var $13=HEAP[$12]; //@line 2369 "textio.c"
        var $14=__PyObject_CallMethod_SizeT($13, ((__str55431)&4294967295), 0); //@line 2369 "textio.c"
        HEAP[$0]=$14; //@line 2369 "textio.c"
        __label__ = 6; break; //@line 2369 "textio.c"
      case 6: // $bb5
        var $15=HEAP[$0]; //@line 2368 "textio.c"
        HEAP[$retval]=$15; //@line 2368 "textio.c"
        __label__ = 7; break; //@line 2368 "textio.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 2368 "textio.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 2368 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_readable($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 2375 "textio.c"
        var $2=(($1+8)&4294967295); //@line 2375 "textio.c"
        var $3=HEAP[$2]; //@line 2375 "textio.c"
        var $4=((($3))|0) <= 0; //@line 2375 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2375 "textio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 2375 "textio.c"
        var $6=(($5+12)&4294967295); //@line 2375 "textio.c"
        var $7=HEAP[$6]; //@line 2375 "textio.c"
        var $8=((($7))|0)!=0; //@line 2375 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2375 "textio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 2375 "textio.c"
        _PyErr_SetString($9, ((__str57433)&4294967295)); //@line 2375 "textio.c"
        __label__ = 4; break; //@line 2375 "textio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 2375 "textio.c"
        _PyErr_SetString($10, ((__str58434)&4294967295)); //@line 2375 "textio.c"
        __label__ = 4; break; //@line 2375 "textio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 2375 "textio.c"
        __label__ = 6; break; //@line 2375 "textio.c"
      case 5: // $bb4
        var $11=HEAP[$self_addr]; //@line 2376 "textio.c"
        var $12=(($11+20)&4294967295); //@line 2376 "textio.c"
        var $13=HEAP[$12]; //@line 2376 "textio.c"
        var $14=__PyObject_CallMethod_SizeT($13, ((__str50426)&4294967295), 0); //@line 2376 "textio.c"
        HEAP[$0]=$14; //@line 2376 "textio.c"
        __label__ = 6; break; //@line 2376 "textio.c"
      case 6: // $bb5
        var $15=HEAP[$0]; //@line 2375 "textio.c"
        HEAP[$retval]=$15; //@line 2375 "textio.c"
        __label__ = 7; break; //@line 2375 "textio.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 2375 "textio.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 2375 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_writable($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 2382 "textio.c"
        var $2=(($1+8)&4294967295); //@line 2382 "textio.c"
        var $3=HEAP[$2]; //@line 2382 "textio.c"
        var $4=((($3))|0) <= 0; //@line 2382 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2382 "textio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 2382 "textio.c"
        var $6=(($5+12)&4294967295); //@line 2382 "textio.c"
        var $7=HEAP[$6]; //@line 2382 "textio.c"
        var $8=((($7))|0)!=0; //@line 2382 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2382 "textio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 2382 "textio.c"
        _PyErr_SetString($9, ((__str57433)&4294967295)); //@line 2382 "textio.c"
        __label__ = 4; break; //@line 2382 "textio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 2382 "textio.c"
        _PyErr_SetString($10, ((__str58434)&4294967295)); //@line 2382 "textio.c"
        __label__ = 4; break; //@line 2382 "textio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 2382 "textio.c"
        __label__ = 6; break; //@line 2382 "textio.c"
      case 5: // $bb4
        var $11=HEAP[$self_addr]; //@line 2383 "textio.c"
        var $12=(($11+20)&4294967295); //@line 2383 "textio.c"
        var $13=HEAP[$12]; //@line 2383 "textio.c"
        var $14=__PyObject_CallMethod_SizeT($13, ((__str52428)&4294967295), 0); //@line 2383 "textio.c"
        HEAP[$0]=$14; //@line 2383 "textio.c"
        __label__ = 6; break; //@line 2383 "textio.c"
      case 6: // $bb5
        var $15=HEAP[$0]; //@line 2382 "textio.c"
        HEAP[$retval]=$15; //@line 2382 "textio.c"
        __label__ = 7; break; //@line 2382 "textio.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 2382 "textio.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 2382 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_isatty($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 2389 "textio.c"
        var $2=(($1+8)&4294967295); //@line 2389 "textio.c"
        var $3=HEAP[$2]; //@line 2389 "textio.c"
        var $4=((($3))|0) <= 0; //@line 2389 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2389 "textio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 2389 "textio.c"
        var $6=(($5+12)&4294967295); //@line 2389 "textio.c"
        var $7=HEAP[$6]; //@line 2389 "textio.c"
        var $8=((($7))|0)!=0; //@line 2389 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2389 "textio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 2389 "textio.c"
        _PyErr_SetString($9, ((__str57433)&4294967295)); //@line 2389 "textio.c"
        __label__ = 4; break; //@line 2389 "textio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 2389 "textio.c"
        _PyErr_SetString($10, ((__str58434)&4294967295)); //@line 2389 "textio.c"
        __label__ = 4; break; //@line 2389 "textio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 2389 "textio.c"
        __label__ = 6; break; //@line 2389 "textio.c"
      case 5: // $bb4
        var $11=HEAP[$self_addr]; //@line 2390 "textio.c"
        var $12=(($11+20)&4294967295); //@line 2390 "textio.c"
        var $13=HEAP[$12]; //@line 2390 "textio.c"
        var $14=__PyObject_CallMethod_SizeT($13, ((__str101)&4294967295), 0); //@line 2390 "textio.c"
        HEAP[$0]=$14; //@line 2390 "textio.c"
        __label__ = 6; break; //@line 2390 "textio.c"
      case 6: // $bb5
        var $15=HEAP[$0]; //@line 2389 "textio.c"
        HEAP[$retval]=$15; //@line 2389 "textio.c"
        __label__ = 7; break; //@line 2389 "textio.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 2389 "textio.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 2389 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_flush($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $r=__stackBase__+16;
        var $_res=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 2396 "textio.c"
        var $2=(($1+8)&4294967295); //@line 2396 "textio.c"
        var $3=HEAP[$2]; //@line 2396 "textio.c"
        var $4=((($3))|0) <= 0; //@line 2396 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2396 "textio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 2396 "textio.c"
        var $6=(($5+12)&4294967295); //@line 2396 "textio.c"
        var $7=HEAP[$6]; //@line 2396 "textio.c"
        var $8=((($7))|0)!=0; //@line 2396 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2396 "textio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 2396 "textio.c"
        _PyErr_SetString($9, ((__str57433)&4294967295)); //@line 2396 "textio.c"
        __label__ = 4; break; //@line 2396 "textio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 2396 "textio.c"
        _PyErr_SetString($10, ((__str58434)&4294967295)); //@line 2396 "textio.c"
        __label__ = 4; break; //@line 2396 "textio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 2396 "textio.c"
        __label__ = 22; break; //@line 2396 "textio.c"
      case 5: // $bb4
        var $11=HEAP[$self_addr]; //@line 2397 "textio.c"
        var $12=$11; //@line 2397 "textio.c"
        var $13=(($12+4)&4294967295); //@line 2397 "textio.c"
        var $14=HEAP[$13]; //@line 2397 "textio.c"
        var $15=($14)==(_PyTextIOWrapper_Type); //@line 2397 "textio.c"
        if ($15) { __label__ = 6; break; } else { __label__ = 17; break; } //@line 2397 "textio.c"
      case 6: // $bb5
        var $16=HEAP[$self_addr]; //@line 2397 "textio.c"
        var $17=(($16+84)&4294967295); //@line 2397 "textio.c"
        var $18=HEAP[$17]; //@line 2397 "textio.c"
        var $19=($18)!=0; //@line 2397 "textio.c"
        if ($19) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 2397 "textio.c"
      case 7: // $bb6
        var $20=HEAP[$self_addr]; //@line 2397 "textio.c"
        var $21=(($20+84)&4294967295); //@line 2397 "textio.c"
        var $22=HEAP[$21]; //@line 2397 "textio.c"
        var $23=__PyFileIO_closed($22); //@line 2397 "textio.c"
        HEAP[$r]=$23; //@line 2397 "textio.c"
        __label__ = 14; break; //@line 2397 "textio.c"
      case 8: // $bb7
        var $24=HEAP[$self_addr]; //@line 2397 "textio.c"
        var $25=_textiowrapper_closed_get($24, 0); //@line 2397 "textio.c"
        HEAP[$_res]=$25; //@line 2397 "textio.c"
        var $26=HEAP[$_res]; //@line 2397 "textio.c"
        var $27=($26)==0; //@line 2397 "textio.c"
        if ($27) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 2397 "textio.c"
      case 9: // $bb8
        HEAP[$0]=0; //@line 2397 "textio.c"
        __label__ = 22; break; //@line 2397 "textio.c"
      case 10: // $bb9
        var $28=HEAP[$_res]; //@line 2397 "textio.c"
        var $29=_PyObject_IsTrue($28); //@line 2397 "textio.c"
        HEAP[$r]=$29; //@line 2397 "textio.c"
        var $30=HEAP[$_res]; //@line 2397 "textio.c"
        var $31=(($30)&4294967295); //@line 2397 "textio.c"
        var $32=HEAP[$31]; //@line 2397 "textio.c"
        var $33=((($32) - 1)&4294967295); //@line 2397 "textio.c"
        var $34=HEAP[$_res]; //@line 2397 "textio.c"
        var $35=(($34)&4294967295); //@line 2397 "textio.c"
        HEAP[$35]=$33; //@line 2397 "textio.c"
        var $36=HEAP[$_res]; //@line 2397 "textio.c"
        var $37=(($36)&4294967295); //@line 2397 "textio.c"
        var $38=HEAP[$37]; //@line 2397 "textio.c"
        var $39=((($38))|0)==0; //@line 2397 "textio.c"
        if ($39) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 2397 "textio.c"
      case 11: // $bb10
        var $40=HEAP[$_res]; //@line 2397 "textio.c"
        var $41=(($40+4)&4294967295); //@line 2397 "textio.c"
        var $42=HEAP[$41]; //@line 2397 "textio.c"
        var $43=(($42+24)&4294967295); //@line 2397 "textio.c"
        var $44=HEAP[$43]; //@line 2397 "textio.c"
        var $45=HEAP[$_res]; //@line 2397 "textio.c"
        FUNCTION_TABLE[$44]($45); //@line 2397 "textio.c"
        __label__ = 12; break; //@line 2397 "textio.c"
      case 12: // $bb11
        var $46=HEAP[$r]; //@line 2397 "textio.c"
        var $47=((($46))|0) < 0; //@line 2397 "textio.c"
        if ($47) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 2397 "textio.c"
      case 13: // $bb12
        HEAP[$0]=0; //@line 2397 "textio.c"
        __label__ = 22; break; //@line 2397 "textio.c"
      case 14: // $bb13
        var $48=HEAP[$r]; //@line 2397 "textio.c"
        var $49=((($48))|0) > 0; //@line 2397 "textio.c"
        if ($49) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 2397 "textio.c"
      case 15: // $bb14
        var $50=HEAP[_PyExc_ValueError]; //@line 2397 "textio.c"
        _PyErr_SetString($50, ((__str60436)&4294967295)); //@line 2397 "textio.c"
        HEAP[$0]=0; //@line 2397 "textio.c"
        __label__ = 22; break; //@line 2397 "textio.c"
      case 16: // $bb15
        __label__ = 19; break; //@line 2397 "textio.c"
      case 17: // $bb16
        var $51=HEAP[$self_addr]; //@line 2397 "textio.c"
        var $52=$51; //@line 2397 "textio.c"
        var $53=__PyIOBase_check_closed($52, __Py_TrueStruct); //@line 2397 "textio.c"
        var $54=($53)==0; //@line 2397 "textio.c"
        if ($54) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 2397 "textio.c"
      case 18: // $bb17
        HEAP[$0]=0; //@line 2397 "textio.c"
        __label__ = 22; break; //@line 2397 "textio.c"
      case 19: // $bb18
        var $55=HEAP[$self_addr]; //@line 2398 "textio.c"
        var $56=(($55+52)&4294967295); //@line 2398 "textio.c"
        var $57=HEAP[$56]; //@line 2398 "textio.c"
        var $58=HEAP[$self_addr]; //@line 2398 "textio.c"
        var $59=(($58+53)&4294967295); //@line 2398 "textio.c"
        HEAP[$59]=$57; //@line 2398 "textio.c"
        var $60=HEAP[$self_addr]; //@line 2399 "textio.c"
        var $61=__textiowrapper_writeflush($60); //@line 2399 "textio.c"
        var $62=((($61))|0) < 0; //@line 2399 "textio.c"
        if ($62) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 2399 "textio.c"
      case 20: // $bb19
        HEAP[$0]=0; //@line 2400 "textio.c"
        __label__ = 22; break; //@line 2400 "textio.c"
      case 21: // $bb20
        var $63=HEAP[$self_addr]; //@line 2401 "textio.c"
        var $64=(($63+20)&4294967295); //@line 2401 "textio.c"
        var $65=HEAP[$64]; //@line 2401 "textio.c"
        var $66=__PyObject_CallMethod_SizeT($65, ((__str79)&4294967295), 0); //@line 2401 "textio.c"
        HEAP[$0]=$66; //@line 2401 "textio.c"
        __label__ = 22; break; //@line 2401 "textio.c"
      case 22: // $bb21
        var $67=HEAP[$0]; //@line 2396 "textio.c"
        HEAP[$retval]=$67; //@line 2396 "textio.c"
        __label__ = 23; break; //@line 2396 "textio.c"
      case 23: // $return
        var $retval22=HEAP[$retval]; //@line 2396 "textio.c"
        STACKTOP = __stackBase__;
        return $retval22; //@line 2396 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_close($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $res=__stackBase__+16;
        var $r=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 2409 "textio.c"
        var $2=(($1+8)&4294967295); //@line 2409 "textio.c"
        var $3=HEAP[$2]; //@line 2409 "textio.c"
        var $4=((($3))|0) <= 0; //@line 2409 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2409 "textio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 2409 "textio.c"
        var $6=(($5+12)&4294967295); //@line 2409 "textio.c"
        var $7=HEAP[$6]; //@line 2409 "textio.c"
        var $8=((($7))|0)!=0; //@line 2409 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2409 "textio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 2409 "textio.c"
        _PyErr_SetString($9, ((__str57433)&4294967295)); //@line 2409 "textio.c"
        __label__ = 4; break; //@line 2409 "textio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 2409 "textio.c"
        _PyErr_SetString($10, ((__str58434)&4294967295)); //@line 2409 "textio.c"
        __label__ = 4; break; //@line 2409 "textio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 2409 "textio.c"
        __label__ = 18; break; //@line 2409 "textio.c"
      case 5: // $bb4
        var $11=HEAP[$self_addr]; //@line 2411 "textio.c"
        var $12=_textiowrapper_closed_get($11, 0); //@line 2411 "textio.c"
        HEAP[$res]=$12; //@line 2411 "textio.c"
        var $13=HEAP[$res]; //@line 2412 "textio.c"
        var $14=($13)==0; //@line 2412 "textio.c"
        if ($14) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 2412 "textio.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 2413 "textio.c"
        __label__ = 18; break; //@line 2413 "textio.c"
      case 7: // $bb6
        var $15=HEAP[$res]; //@line 2414 "textio.c"
        var $16=_PyObject_IsTrue($15); //@line 2414 "textio.c"
        HEAP[$r]=$16; //@line 2414 "textio.c"
        var $17=HEAP[$res]; //@line 2415 "textio.c"
        var $18=(($17)&4294967295); //@line 2415 "textio.c"
        var $19=HEAP[$18]; //@line 2415 "textio.c"
        var $20=((($19) - 1)&4294967295); //@line 2415 "textio.c"
        var $21=HEAP[$res]; //@line 2415 "textio.c"
        var $22=(($21)&4294967295); //@line 2415 "textio.c"
        HEAP[$22]=$20; //@line 2415 "textio.c"
        var $23=HEAP[$res]; //@line 2415 "textio.c"
        var $24=(($23)&4294967295); //@line 2415 "textio.c"
        var $25=HEAP[$24]; //@line 2415 "textio.c"
        var $26=((($25))|0)==0; //@line 2415 "textio.c"
        if ($26) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 2415 "textio.c"
      case 8: // $bb7
        var $27=HEAP[$res]; //@line 2415 "textio.c"
        var $28=(($27+4)&4294967295); //@line 2415 "textio.c"
        var $29=HEAP[$28]; //@line 2415 "textio.c"
        var $30=(($29+24)&4294967295); //@line 2415 "textio.c"
        var $31=HEAP[$30]; //@line 2415 "textio.c"
        var $32=HEAP[$res]; //@line 2415 "textio.c"
        FUNCTION_TABLE[$31]($32); //@line 2415 "textio.c"
        __label__ = 9; break; //@line 2415 "textio.c"
      case 9: // $bb8
        var $33=HEAP[$r]; //@line 2416 "textio.c"
        var $34=((($33))|0) < 0; //@line 2416 "textio.c"
        if ($34) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 2416 "textio.c"
      case 10: // $bb9
        HEAP[$0]=0; //@line 2417 "textio.c"
        __label__ = 18; break; //@line 2417 "textio.c"
      case 11: // $bb10
        var $35=HEAP[$r]; //@line 2419 "textio.c"
        var $36=((($35))|0) > 0; //@line 2419 "textio.c"
        if ($36) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 2419 "textio.c"
      case 12: // $bb11
        var $37=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 2420 "textio.c"
        var $38=((($37) + 1)&4294967295); //@line 2420 "textio.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$38; //@line 2420 "textio.c"
        HEAP[$0]=__Py_NoneStruct; //@line 2420 "textio.c"
        __label__ = 18; break; //@line 2420 "textio.c"
      case 13: // $bb12
        var $39=HEAP[$self_addr]; //@line 2423 "textio.c"
        var $40=$39; //@line 2423 "textio.c"
        var $41=__PyObject_CallMethod_SizeT($40, ((__str79)&4294967295), 0); //@line 2423 "textio.c"
        HEAP[$res]=$41; //@line 2423 "textio.c"
        var $42=HEAP[$res]; //@line 2424 "textio.c"
        var $43=($42)==0; //@line 2424 "textio.c"
        if ($43) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 2424 "textio.c"
      case 14: // $bb13
        HEAP[$0]=0; //@line 2425 "textio.c"
        __label__ = 18; break; //@line 2425 "textio.c"
      case 15: // $bb14
        var $44=HEAP[$res]; //@line 2428 "textio.c"
        var $45=(($44)&4294967295); //@line 2428 "textio.c"
        var $46=HEAP[$45]; //@line 2428 "textio.c"
        var $47=((($46) - 1)&4294967295); //@line 2428 "textio.c"
        var $48=HEAP[$res]; //@line 2428 "textio.c"
        var $49=(($48)&4294967295); //@line 2428 "textio.c"
        HEAP[$49]=$47; //@line 2428 "textio.c"
        var $50=HEAP[$res]; //@line 2428 "textio.c"
        var $51=(($50)&4294967295); //@line 2428 "textio.c"
        var $52=HEAP[$51]; //@line 2428 "textio.c"
        var $53=((($52))|0)==0; //@line 2428 "textio.c"
        if ($53) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 2428 "textio.c"
      case 16: // $bb15
        var $54=HEAP[$res]; //@line 2428 "textio.c"
        var $55=(($54+4)&4294967295); //@line 2428 "textio.c"
        var $56=HEAP[$55]; //@line 2428 "textio.c"
        var $57=(($56+24)&4294967295); //@line 2428 "textio.c"
        var $58=HEAP[$57]; //@line 2428 "textio.c"
        var $59=HEAP[$res]; //@line 2428 "textio.c"
        FUNCTION_TABLE[$58]($59); //@line 2428 "textio.c"
        __label__ = 17; break; //@line 2428 "textio.c"
      case 17: // $bb16
        var $60=HEAP[$self_addr]; //@line 2430 "textio.c"
        var $61=(($60+20)&4294967295); //@line 2430 "textio.c"
        var $62=HEAP[$61]; //@line 2430 "textio.c"
        var $63=__PyObject_CallMethod_SizeT($62, ((__str102)&4294967295), 0); //@line 2430 "textio.c"
        HEAP[$0]=$63; //@line 2430 "textio.c"
        __label__ = 18; break; //@line 2430 "textio.c"
      case 18: // $bb17
        var $64=HEAP[$0]; //@line 2409 "textio.c"
        HEAP[$retval]=$64; //@line 2409 "textio.c"
        __label__ = 19; break; //@line 2409 "textio.c"
      case 19: // $return
        var $retval18=HEAP[$retval]; //@line 2409 "textio.c"
        STACKTOP = __stackBase__;
        return $retval18; //@line 2409 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_iternext($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $line=__stackBase__+12;
        var $_py_tmp=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 2439 "textio.c"
        var $2=(($1+8)&4294967295); //@line 2439 "textio.c"
        var $3=HEAP[$2]; //@line 2439 "textio.c"
        var $4=((($3))|0) <= 0; //@line 2439 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2439 "textio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 2439 "textio.c"
        var $6=(($5+12)&4294967295); //@line 2439 "textio.c"
        var $7=HEAP[$6]; //@line 2439 "textio.c"
        var $8=((($7))|0)!=0; //@line 2439 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2439 "textio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 2439 "textio.c"
        _PyErr_SetString($9, ((__str57433)&4294967295)); //@line 2439 "textio.c"
        __label__ = 4; break; //@line 2439 "textio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 2439 "textio.c"
        _PyErr_SetString($10, ((__str58434)&4294967295)); //@line 2439 "textio.c"
        __label__ = 4; break; //@line 2439 "textio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 2439 "textio.c"
        __label__ = 22; break; //@line 2439 "textio.c"
      case 5: // $bb4
        var $11=HEAP[$self_addr]; //@line 2441 "textio.c"
        var $12=(($11+53)&4294967295); //@line 2441 "textio.c"
        HEAP[$12]=0; //@line 2441 "textio.c"
        var $13=HEAP[$self_addr]; //@line 2442 "textio.c"
        var $14=$13; //@line 2442 "textio.c"
        var $15=(($14+4)&4294967295); //@line 2442 "textio.c"
        var $16=HEAP[$15]; //@line 2442 "textio.c"
        var $17=($16)==(_PyTextIOWrapper_Type); //@line 2442 "textio.c"
        if ($17) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 2442 "textio.c"
      case 6: // $bb5
        var $18=HEAP[$self_addr]; //@line 2444 "textio.c"
        var $19=__textiowrapper_readline($18, -1); //@line 2444 "textio.c"
        HEAP[$line]=$19; //@line 2444 "textio.c"
        __label__ = 12; break; //@line 2444 "textio.c"
      case 7: // $bb6
        var $20=HEAP[__PyIO_str_readline]; //@line 2447 "textio.c"
        var $21=HEAP[$self_addr]; //@line 2447 "textio.c"
        var $22=$21; //@line 2447 "textio.c"
        var $23=_PyObject_CallMethodObjArgs($22, $20, 0); //@line 2447 "textio.c"
        HEAP[$line]=$23; //@line 2447 "textio.c"
        var $24=HEAP[$line]; //@line 2449 "textio.c"
        var $25=($24)!=0; //@line 2449 "textio.c"
        if ($25) { __label__ = 8; break; } else { __label__ = 12; break; } //@line 2449 "textio.c"
      case 8: // $bb7
        var $26=HEAP[$line]; //@line 2449 "textio.c"
        var $27=(($26+4)&4294967295); //@line 2449 "textio.c"
        var $28=HEAP[$27]; //@line 2449 "textio.c"
        var $29=(($28+84)&4294967295); //@line 2449 "textio.c"
        var $30=HEAP[$29]; //@line 2449 "textio.c"
        var $31=($30) & 268435456; //@line 2449 "textio.c"
        var $32=((($31))|0)==0; //@line 2449 "textio.c"
        if ($32) { __label__ = 9; break; } else { __label__ = 12; break; } //@line 2449 "textio.c"
      case 9: // $bb8
        var $33=HEAP[$line]; //@line 2450 "textio.c"
        var $34=(($33+4)&4294967295); //@line 2450 "textio.c"
        var $35=HEAP[$34]; //@line 2450 "textio.c"
        var $36=(($35+12)&4294967295); //@line 2450 "textio.c"
        var $37=HEAP[$36]; //@line 2450 "textio.c"
        var $38=HEAP[_PyExc_IOError]; //@line 2450 "textio.c"
        var $39=_PyErr_Format($38, ((__str103)&4294967295), $37); //@line 2450 "textio.c"
        var $40=HEAP[$line]; //@line 2453 "textio.c"
        var $41=(($40)&4294967295); //@line 2453 "textio.c"
        var $42=HEAP[$41]; //@line 2453 "textio.c"
        var $43=((($42) - 1)&4294967295); //@line 2453 "textio.c"
        var $44=HEAP[$line]; //@line 2453 "textio.c"
        var $45=(($44)&4294967295); //@line 2453 "textio.c"
        HEAP[$45]=$43; //@line 2453 "textio.c"
        var $46=HEAP[$line]; //@line 2453 "textio.c"
        var $47=(($46)&4294967295); //@line 2453 "textio.c"
        var $48=HEAP[$47]; //@line 2453 "textio.c"
        var $49=((($48))|0)==0; //@line 2453 "textio.c"
        if ($49) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 2453 "textio.c"
      case 10: // $bb9
        var $50=HEAP[$line]; //@line 2453 "textio.c"
        var $51=(($50+4)&4294967295); //@line 2453 "textio.c"
        var $52=HEAP[$51]; //@line 2453 "textio.c"
        var $53=(($52+24)&4294967295); //@line 2453 "textio.c"
        var $54=HEAP[$53]; //@line 2453 "textio.c"
        var $55=HEAP[$line]; //@line 2453 "textio.c"
        FUNCTION_TABLE[$54]($55); //@line 2453 "textio.c"
        __label__ = 11; break; //@line 2453 "textio.c"
      case 11: // $bb10
        HEAP[$0]=0; //@line 2454 "textio.c"
        __label__ = 22; break; //@line 2454 "textio.c"
      case 12: // $bb11
        var $56=HEAP[$line]; //@line 2458 "textio.c"
        var $57=($56)==0; //@line 2458 "textio.c"
        if ($57) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 2458 "textio.c"
      case 13: // $bb12
        HEAP[$0]=0; //@line 2459 "textio.c"
        __label__ = 22; break; //@line 2459 "textio.c"
      case 14: // $bb13
        var $58=HEAP[$line]; //@line 2461 "textio.c"
        var $59=$58; //@line 2461 "textio.c"
        var $60=(($59+8)&4294967295); //@line 2461 "textio.c"
        var $61=HEAP[$60]; //@line 2461 "textio.c"
        var $62=((($61))|0)==0; //@line 2461 "textio.c"
        if ($62) { __label__ = 15; break; } else { __label__ = 21; break; } //@line 2461 "textio.c"
      case 15: // $bb14
        var $63=HEAP[$line]; //@line 2463 "textio.c"
        var $64=(($63)&4294967295); //@line 2463 "textio.c"
        var $65=HEAP[$64]; //@line 2463 "textio.c"
        var $66=((($65) - 1)&4294967295); //@line 2463 "textio.c"
        var $67=HEAP[$line]; //@line 2463 "textio.c"
        var $68=(($67)&4294967295); //@line 2463 "textio.c"
        HEAP[$68]=$66; //@line 2463 "textio.c"
        var $69=HEAP[$line]; //@line 2463 "textio.c"
        var $70=(($69)&4294967295); //@line 2463 "textio.c"
        var $71=HEAP[$70]; //@line 2463 "textio.c"
        var $72=((($71))|0)==0; //@line 2463 "textio.c"
        if ($72) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 2463 "textio.c"
      case 16: // $bb15
        var $73=HEAP[$line]; //@line 2463 "textio.c"
        var $74=(($73+4)&4294967295); //@line 2463 "textio.c"
        var $75=HEAP[$74]; //@line 2463 "textio.c"
        var $76=(($75+24)&4294967295); //@line 2463 "textio.c"
        var $77=HEAP[$76]; //@line 2463 "textio.c"
        var $78=HEAP[$line]; //@line 2463 "textio.c"
        FUNCTION_TABLE[$77]($78); //@line 2463 "textio.c"
        __label__ = 17; break; //@line 2463 "textio.c"
      case 17: // $bb16
        var $79=HEAP[$self_addr]; //@line 2464 "textio.c"
        var $80=(($79+80)&4294967295); //@line 2464 "textio.c"
        var $81=HEAP[$80]; //@line 2464 "textio.c"
        var $82=($81)!=0; //@line 2464 "textio.c"
        if ($82) { __label__ = 18; break; } else { __label__ = 20; break; } //@line 2464 "textio.c"
      case 18: // $bb17
        var $83=HEAP[$self_addr]; //@line 2464 "textio.c"
        var $84=(($83+80)&4294967295); //@line 2464 "textio.c"
        var $85=HEAP[$84]; //@line 2464 "textio.c"
        HEAP[$_py_tmp]=$85; //@line 2464 "textio.c"
        var $86=HEAP[$self_addr]; //@line 2464 "textio.c"
        var $87=(($86+80)&4294967295); //@line 2464 "textio.c"
        HEAP[$87]=0; //@line 2464 "textio.c"
        var $88=HEAP[$_py_tmp]; //@line 2464 "textio.c"
        var $89=(($88)&4294967295); //@line 2464 "textio.c"
        var $90=HEAP[$89]; //@line 2464 "textio.c"
        var $91=((($90) - 1)&4294967295); //@line 2464 "textio.c"
        var $92=HEAP[$_py_tmp]; //@line 2464 "textio.c"
        var $93=(($92)&4294967295); //@line 2464 "textio.c"
        HEAP[$93]=$91; //@line 2464 "textio.c"
        var $94=HEAP[$_py_tmp]; //@line 2464 "textio.c"
        var $95=(($94)&4294967295); //@line 2464 "textio.c"
        var $96=HEAP[$95]; //@line 2464 "textio.c"
        var $97=((($96))|0)==0; //@line 2464 "textio.c"
        if ($97) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 2464 "textio.c"
      case 19: // $bb18
        var $98=HEAP[$_py_tmp]; //@line 2464 "textio.c"
        var $99=(($98+4)&4294967295); //@line 2464 "textio.c"
        var $100=HEAP[$99]; //@line 2464 "textio.c"
        var $101=(($100+24)&4294967295); //@line 2464 "textio.c"
        var $102=HEAP[$101]; //@line 2464 "textio.c"
        var $103=HEAP[$_py_tmp]; //@line 2464 "textio.c"
        FUNCTION_TABLE[$102]($103); //@line 2464 "textio.c"
        __label__ = 20; break; //@line 2464 "textio.c"
      case 20: // $bb19
        var $104=HEAP[$self_addr]; //@line 2465 "textio.c"
        var $105=(($104+52)&4294967295); //@line 2465 "textio.c"
        var $106=HEAP[$105]; //@line 2465 "textio.c"
        var $107=HEAP[$self_addr]; //@line 2465 "textio.c"
        var $108=(($107+53)&4294967295); //@line 2465 "textio.c"
        HEAP[$108]=$106; //@line 2465 "textio.c"
        HEAP[$0]=0; //@line 2466 "textio.c"
        __label__ = 22; break; //@line 2466 "textio.c"
      case 21: // $bb20
        var $109=HEAP[$line]; //@line 2469 "textio.c"
        HEAP[$0]=$109; //@line 2469 "textio.c"
        __label__ = 22; break; //@line 2469 "textio.c"
      case 22: // $bb21
        var $110=HEAP[$0]; //@line 2439 "textio.c"
        HEAP[$retval]=$110; //@line 2439 "textio.c"
        __label__ = 23; break; //@line 2439 "textio.c"
      case 23: // $return
        var $retval22=HEAP[$retval]; //@line 2439 "textio.c"
        STACKTOP = __stackBase__;
        return $retval22; //@line 2439 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_name_get($self, $context) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $context_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$context_addr]=$context;
        var $1=HEAP[$self_addr]; //@line 2475 "textio.c"
        var $2=(($1+8)&4294967295); //@line 2475 "textio.c"
        var $3=HEAP[$2]; //@line 2475 "textio.c"
        var $4=((($3))|0) <= 0; //@line 2475 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2475 "textio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 2475 "textio.c"
        var $6=(($5+12)&4294967295); //@line 2475 "textio.c"
        var $7=HEAP[$6]; //@line 2475 "textio.c"
        var $8=((($7))|0)!=0; //@line 2475 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2475 "textio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 2475 "textio.c"
        _PyErr_SetString($9, ((__str57433)&4294967295)); //@line 2475 "textio.c"
        __label__ = 4; break; //@line 2475 "textio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 2475 "textio.c"
        _PyErr_SetString($10, ((__str58434)&4294967295)); //@line 2475 "textio.c"
        __label__ = 4; break; //@line 2475 "textio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 2475 "textio.c"
        __label__ = 6; break; //@line 2475 "textio.c"
      case 5: // $bb4
        var $11=HEAP[$self_addr]; //@line 2476 "textio.c"
        var $12=(($11+20)&4294967295); //@line 2476 "textio.c"
        var $13=HEAP[$12]; //@line 2476 "textio.c"
        var $14=_PyObject_GetAttrString($13, ((__str53429)&4294967295)); //@line 2476 "textio.c"
        HEAP[$0]=$14; //@line 2476 "textio.c"
        __label__ = 6; break; //@line 2476 "textio.c"
      case 6: // $bb5
        var $15=HEAP[$0]; //@line 2475 "textio.c"
        HEAP[$retval]=$15; //@line 2475 "textio.c"
        __label__ = 7; break; //@line 2475 "textio.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 2475 "textio.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 2475 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_closed_get($self, $context) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $context_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$context_addr]=$context;
        var $1=HEAP[$self_addr]; //@line 2482 "textio.c"
        var $2=(($1+8)&4294967295); //@line 2482 "textio.c"
        var $3=HEAP[$2]; //@line 2482 "textio.c"
        var $4=((($3))|0) <= 0; //@line 2482 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2482 "textio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 2482 "textio.c"
        var $6=(($5+12)&4294967295); //@line 2482 "textio.c"
        var $7=HEAP[$6]; //@line 2482 "textio.c"
        var $8=((($7))|0)!=0; //@line 2482 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2482 "textio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 2482 "textio.c"
        _PyErr_SetString($9, ((__str57433)&4294967295)); //@line 2482 "textio.c"
        __label__ = 4; break; //@line 2482 "textio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 2482 "textio.c"
        _PyErr_SetString($10, ((__str58434)&4294967295)); //@line 2482 "textio.c"
        __label__ = 4; break; //@line 2482 "textio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 2482 "textio.c"
        __label__ = 6; break; //@line 2482 "textio.c"
      case 5: // $bb4
        var $11=HEAP[__PyIO_str_closed]; //@line 2483 "textio.c"
        var $12=HEAP[$self_addr]; //@line 2483 "textio.c"
        var $13=(($12+20)&4294967295); //@line 2483 "textio.c"
        var $14=HEAP[$13]; //@line 2483 "textio.c"
        var $15=_PyObject_GetAttr($14, $11); //@line 2483 "textio.c"
        HEAP[$0]=$15; //@line 2483 "textio.c"
        __label__ = 6; break; //@line 2483 "textio.c"
      case 6: // $bb5
        var $16=HEAP[$0]; //@line 2482 "textio.c"
        HEAP[$retval]=$16; //@line 2482 "textio.c"
        __label__ = 7; break; //@line 2482 "textio.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 2482 "textio.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 2482 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_newlines_get($self, $context) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $context_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $res=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$context_addr]=$context;
        var $1=HEAP[$self_addr]; //@line 2490 "textio.c"
        var $2=(($1+8)&4294967295); //@line 2490 "textio.c"
        var $3=HEAP[$2]; //@line 2490 "textio.c"
        var $4=((($3))|0) <= 0; //@line 2490 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2490 "textio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 2490 "textio.c"
        var $6=(($5+12)&4294967295); //@line 2490 "textio.c"
        var $7=HEAP[$6]; //@line 2490 "textio.c"
        var $8=((($7))|0)!=0; //@line 2490 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2490 "textio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 2490 "textio.c"
        _PyErr_SetString($9, ((__str57433)&4294967295)); //@line 2490 "textio.c"
        __label__ = 4; break; //@line 2490 "textio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 2490 "textio.c"
        _PyErr_SetString($10, ((__str58434)&4294967295)); //@line 2490 "textio.c"
        __label__ = 4; break; //@line 2490 "textio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 2490 "textio.c"
        __label__ = 12; break; //@line 2490 "textio.c"
      case 5: // $bb4
        var $11=HEAP[$self_addr]; //@line 2491 "textio.c"
        var $12=(($11+32)&4294967295); //@line 2491 "textio.c"
        var $13=HEAP[$12]; //@line 2491 "textio.c"
        var $14=($13)==0; //@line 2491 "textio.c"
        if ($14) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 2491 "textio.c"
      case 6: // $bb5
        var $15=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 2492 "textio.c"
        var $16=((($15) + 1)&4294967295); //@line 2492 "textio.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$16; //@line 2492 "textio.c"
        HEAP[$0]=__Py_NoneStruct; //@line 2492 "textio.c"
        __label__ = 12; break; //@line 2492 "textio.c"
      case 7: // $bb6
        var $17=HEAP[__PyIO_str_newlines]; //@line 2493 "textio.c"
        var $18=HEAP[$self_addr]; //@line 2493 "textio.c"
        var $19=(($18+32)&4294967295); //@line 2493 "textio.c"
        var $20=HEAP[$19]; //@line 2493 "textio.c"
        var $21=_PyObject_GetAttr($20, $17); //@line 2493 "textio.c"
        HEAP[$res]=$21; //@line 2493 "textio.c"
        var $22=HEAP[$res]; //@line 2494 "textio.c"
        var $23=($22)==0; //@line 2494 "textio.c"
        if ($23) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 2494 "textio.c"
      case 8: // $bb7
        var $24=HEAP[_PyExc_AttributeError]; //@line 2495 "textio.c"
        var $25=_PyErr_ExceptionMatches($24); //@line 2495 "textio.c"
        var $26=((($25))|0)!=0; //@line 2495 "textio.c"
        if ($26) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 2495 "textio.c"
      case 9: // $bb8
        _PyErr_Clear(); //@line 2496 "textio.c"
        var $27=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 2497 "textio.c"
        var $28=((($27) + 1)&4294967295); //@line 2497 "textio.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$28; //@line 2497 "textio.c"
        HEAP[$0]=__Py_NoneStruct; //@line 2497 "textio.c"
        __label__ = 12; break; //@line 2497 "textio.c"
      case 10: // $bb9
        HEAP[$0]=0; //@line 2500 "textio.c"
        __label__ = 12; break; //@line 2500 "textio.c"
      case 11: // $bb10
        var $29=HEAP[$res]; //@line 2503 "textio.c"
        HEAP[$0]=$29; //@line 2503 "textio.c"
        __label__ = 12; break; //@line 2503 "textio.c"
      case 12: // $bb11
        var $30=HEAP[$0]; //@line 2490 "textio.c"
        HEAP[$retval]=$30; //@line 2490 "textio.c"
        __label__ = 13; break; //@line 2490 "textio.c"
      case 13: // $return
        var $retval12=HEAP[$retval]; //@line 2490 "textio.c"
        STACKTOP = __stackBase__;
        return $retval12; //@line 2490 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_errors_get($self, $context) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $context_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$context_addr]=$context;
        var $1=HEAP[$self_addr]; //@line 2509 "textio.c"
        var $2=(($1+8)&4294967295); //@line 2509 "textio.c"
        var $3=HEAP[$2]; //@line 2509 "textio.c"
        var $4=((($3))|0) <= 0; //@line 2509 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2509 "textio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 2509 "textio.c"
        var $6=(($5+12)&4294967295); //@line 2509 "textio.c"
        var $7=HEAP[$6]; //@line 2509 "textio.c"
        var $8=((($7))|0)!=0; //@line 2509 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2509 "textio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 2509 "textio.c"
        _PyErr_SetString($9, ((__str57433)&4294967295)); //@line 2509 "textio.c"
        __label__ = 4; break; //@line 2509 "textio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 2509 "textio.c"
        _PyErr_SetString($10, ((__str58434)&4294967295)); //@line 2509 "textio.c"
        __label__ = 4; break; //@line 2509 "textio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 2509 "textio.c"
        __label__ = 6; break; //@line 2509 "textio.c"
      case 5: // $bb4
        var $11=HEAP[$self_addr]; //@line 2510 "textio.c"
        var $12=(($11+40)&4294967295); //@line 2510 "textio.c"
        var $13=HEAP[$12]; //@line 2510 "textio.c"
        var $14=(($13)&4294967295); //@line 2510 "textio.c"
        var $15=HEAP[$14]; //@line 2510 "textio.c"
        var $16=((($15) + 1)&4294967295); //@line 2510 "textio.c"
        var $17=(($13)&4294967295); //@line 2510 "textio.c"
        HEAP[$17]=$16; //@line 2510 "textio.c"
        var $18=HEAP[$self_addr]; //@line 2511 "textio.c"
        var $19=(($18+40)&4294967295); //@line 2511 "textio.c"
        var $20=HEAP[$19]; //@line 2511 "textio.c"
        HEAP[$0]=$20; //@line 2511 "textio.c"
        __label__ = 6; break; //@line 2511 "textio.c"
      case 6: // $bb5
        var $21=HEAP[$0]; //@line 2509 "textio.c"
        HEAP[$retval]=$21; //@line 2509 "textio.c"
        __label__ = 7; break; //@line 2509 "textio.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 2509 "textio.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 2509 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_chunk_size_get($self, $context) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $context_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$context_addr]=$context;
        var $1=HEAP[$self_addr]; //@line 2517 "textio.c"
        var $2=(($1+8)&4294967295); //@line 2517 "textio.c"
        var $3=HEAP[$2]; //@line 2517 "textio.c"
        var $4=((($3))|0) <= 0; //@line 2517 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2517 "textio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 2517 "textio.c"
        var $6=(($5+12)&4294967295); //@line 2517 "textio.c"
        var $7=HEAP[$6]; //@line 2517 "textio.c"
        var $8=((($7))|0)!=0; //@line 2517 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2517 "textio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 2517 "textio.c"
        _PyErr_SetString($9, ((__str57433)&4294967295)); //@line 2517 "textio.c"
        __label__ = 4; break; //@line 2517 "textio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 2517 "textio.c"
        _PyErr_SetString($10, ((__str58434)&4294967295)); //@line 2517 "textio.c"
        __label__ = 4; break; //@line 2517 "textio.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 2517 "textio.c"
        __label__ = 6; break; //@line 2517 "textio.c"
      case 5: // $bb4
        var $11=HEAP[$self_addr]; //@line 2518 "textio.c"
        var $12=(($11+16)&4294967295); //@line 2518 "textio.c"
        var $13=HEAP[$12]; //@line 2518 "textio.c"
        var $14=_PyLong_FromSsize_t($13); //@line 2518 "textio.c"
        HEAP[$0]=$14; //@line 2518 "textio.c"
        __label__ = 6; break; //@line 2518 "textio.c"
      case 6: // $bb5
        var $15=HEAP[$0]; //@line 2517 "textio.c"
        HEAP[$retval]=$15; //@line 2517 "textio.c"
        __label__ = 7; break; //@line 2517 "textio.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 2517 "textio.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 2517 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_chunk_size_set($self, $arg, $context) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $arg_addr=__stackBase__+4;
        var $context_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $n=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$arg_addr]=$arg;
        HEAP[$context_addr]=$context;
        var $1=HEAP[$self_addr]; //@line 2525 "textio.c"
        var $2=(($1+8)&4294967295); //@line 2525 "textio.c"
        var $3=HEAP[$2]; //@line 2525 "textio.c"
        var $4=((($3))|0) <= 0; //@line 2525 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2525 "textio.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 2525 "textio.c"
        var $6=(($5+12)&4294967295); //@line 2525 "textio.c"
        var $7=HEAP[$6]; //@line 2525 "textio.c"
        var $8=((($7))|0)!=0; //@line 2525 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2525 "textio.c"
      case 2: // $bb1
        var $9=HEAP[_PyExc_ValueError]; //@line 2525 "textio.c"
        _PyErr_SetString($9, ((__str57433)&4294967295)); //@line 2525 "textio.c"
        __label__ = 4; break; //@line 2525 "textio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 2525 "textio.c"
        _PyErr_SetString($10, ((__str58434)&4294967295)); //@line 2525 "textio.c"
        __label__ = 4; break; //@line 2525 "textio.c"
      case 4: // $bb3
        HEAP[$0]=-1; //@line 2525 "textio.c"
        __label__ = 11; break; //@line 2525 "textio.c"
      case 5: // $bb4
        var $11=HEAP[_PyExc_TypeError]; //@line 2526 "textio.c"
        var $12=HEAP[$arg_addr]; //@line 2526 "textio.c"
        var $13=_PyNumber_AsSsize_t($12, $11); //@line 2526 "textio.c"
        HEAP[$n]=$13; //@line 2526 "textio.c"
        var $14=HEAP[$n]; //@line 2527 "textio.c"
        var $15=((($14))|0)==-1; //@line 2527 "textio.c"
        if ($15) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 2527 "textio.c"
      case 6: // $bb5
        var $16=_PyErr_Occurred(); //@line 2527 "textio.c"
        var $17=($16)!=0; //@line 2527 "textio.c"
        if ($17) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 2527 "textio.c"
      case 7: // $bb6
        HEAP[$0]=-1; //@line 2528 "textio.c"
        __label__ = 11; break; //@line 2528 "textio.c"
      case 8: // $bb7
        var $18=HEAP[$n]; //@line 2529 "textio.c"
        var $19=((($18))|0) <= 0; //@line 2529 "textio.c"
        if ($19) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 2529 "textio.c"
      case 9: // $bb8
        var $20=HEAP[_PyExc_ValueError]; //@line 2530 "textio.c"
        _PyErr_SetString($20, ((__str104)&4294967295)); //@line 2530 "textio.c"
        HEAP[$0]=-1; //@line 2532 "textio.c"
        __label__ = 11; break; //@line 2532 "textio.c"
      case 10: // $bb9
        var $21=HEAP[$self_addr]; //@line 2534 "textio.c"
        var $22=(($21+16)&4294967295); //@line 2534 "textio.c"
        var $23=HEAP[$n]; //@line 2534 "textio.c"
        HEAP[$22]=$23; //@line 2534 "textio.c"
        HEAP[$0]=0; //@line 2535 "textio.c"
        __label__ = 11; break; //@line 2535 "textio.c"
      case 11: // $bb10
        var $24=HEAP[$0]; //@line 2525 "textio.c"
        HEAP[$retval]=$24; //@line 2525 "textio.c"
        __label__ = 12; break; //@line 2525 "textio.c"
      case 12: // $return
        var $retval11=HEAP[$retval]; //@line 2525 "textio.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 2525 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  
FUNCTION_TABLE = FUNCTION_TABLE.concat([0,0,__PyIO_ConvertSsize_t,0,_bufferediobase_detach,0,_bufferediobase_read,0,_bufferediobase_read1,0,_bufferediobase_readinto,0,_bufferediobase_write,0,_buffered_detach,0,_buffered_simple_flush,0,_buffered_close,0,_buffered_seekable,0,_buffered_readable,0,_buffered_writable,0,_buffered_fileno,0,_buffered_isatty,0,_buffered_read,0,_buffered_peek,0,_buffered_read1,0,_buffered_readline,0,_buffered_seek,0,_buffered_tell,0,_buffered_truncate,0,_buffered_closed_get,0,_buffered_name_get,0,_buffered_mode_get,0,_buffered_dealloc,0,_buffered_repr,0,_buffered_traverse,0,_buffered_clear,0,_buffered_iternext,0,_bufferedreader_init,0,_PyType_GenericNew,0,_bufferedwriter_write,0,_buffered_flush,0,_bufferedwriter_init,0,_bufferedrwpair_read,0,_bufferedrwpair_peek,0,_bufferedrwpair_read1,0,_bufferedrwpair_readinto,0,_bufferedrwpair_write,0,_bufferedrwpair_flush,0,_bufferedrwpair_readable,0,_bufferedrwpair_writable,0,_bufferedrwpair_close,0,_bufferedrwpair_isatty,0,_bufferedrwpair_closed_get,0,_bufferedrwpair_dealloc,0,_bufferedrwpair_traverse,0,_bufferedrwpair_clear,0,_bufferedrwpair_init,0,_buffered_readinto,0,_bufferedrandom_init,0,_bytesio_get_closed,0,_return_true,0,_bytesio_close,0,_bytesio_flush,0,_bytesio_isatty,0,_bytesio_tell,0,_bytesio_write,0,_bytesio_writelines,0,_bytesio_read1,0,_bytesio_readinto,0,_bytesio_readline,0,_bytesio_readlines,0,_bytesio_read,0,_bytesio_getvalue,0,_bytesio_seek,0,_bytesio_truncate,0,_bytesio_getstate,0,_bytesio_setstate,0,_bytesio_dealloc,0,_bytesio_traverse,0,_bytesio_clear,0,_PyObject_SelfIter,0,_bytesio_iternext,0,_bytesio_init,0,_bytesio_new,0,_fileio_read,0,_fileio_readall,0,_fileio_readinto,0,_fileio_write,0,_fileio_seek,0,_fileio_tell,0,_fileio_truncate,0,_fileio_close,0,_fileio_seekable,0,_fileio_readable,0,_fileio_writable,0,_fileio_fileno,0,_fileio_isatty,0,_get_closed,0,_get_closefd,0,_get_mode,0,_fileio_dealloc,0,_fileio_repr,0,_PyObject_GenericGetAttr,0,_fileio_traverse,0,_fileio_clear,0,_fileio_init,0,_PyType_GenericAlloc,0,_fileio_new,0,_PyObject_GC_Del,0,_iobase_seek,0,_iobase_tell,0,_iobase_truncate,0,_iobase_flush,0,_iobase_close,0,_iobase_seekable,0,_iobase_readable,0,_iobase_writable,0,__PyIOBase_check_closed,0,__PyIOBase_check_seekable,0,__PyIOBase_check_readable,0,__PyIOBase_check_writable,0,_iobase_fileno,0,_iobase_isatty,0,_iobase_enter,0,_iobase_exit,0,_iobase_readline,0,_iobase_readlines,0,_iobase_writelines,0,_iobase_closed_get,0,_iobase_dealloc,0,_iobase_traverse,0,_iobase_clear,0,_iobase_iter,0,_iobase_iternext,0,_rawiobase_read,0,_rawiobase_readall,0,_blockingioerror_init,0,_io_open,0,_stringio_close,0,_stringio_getvalue,0,_stringio_read,0,_stringio_readline,0,_stringio_tell,0,_stringio_truncate,0,_stringio_seek,0,_stringio_write,0,_stringio_seekable,0,_stringio_readable,0,_stringio_writable,0,_stringio_getstate,0,_stringio_setstate,0,_stringio_closed,0,_stringio_newlines,0,_stringio_line_buffering,0,_stringio_dealloc,0,_stringio_traverse,0,_stringio_clear,0,_stringio_iternext,0,_stringio_init,0,_stringio_new,0,_textiobase_detach,0,_textiobase_read,0,_textiobase_readline,0,_textiobase_write,0,_textiobase_encoding_get,0,_textiobase_newlines_get,0,_textiobase_errors_get,0,_incrementalnewlinedecoder_decode,0,_incrementalnewlinedecoder_getstate,0,_incrementalnewlinedecoder_setstate,0,_incrementalnewlinedecoder_reset,0,_incrementalnewlinedecoder_newlines_get,0,_incrementalnewlinedecoder_dealloc,0,_incrementalnewlinedecoder_init,0,_ascii_encode,0,_latin1_encode,0,_utf8_encode,0,_utf16be_encode,0,_utf16le_encode,0,_utf16_encode,0,_utf32be_encode,0,_utf32le_encode,0,_utf32_encode,0,_textiowrapper_detach,0,_textiowrapper_write,0,_textiowrapper_read,0,_textiowrapper_readline,0,_textiowrapper_flush,0,_textiowrapper_close,0,_textiowrapper_fileno,0,_textiowrapper_seekable,0,_textiowrapper_readable,0,_textiowrapper_writable,0,_textiowrapper_isatty,0,_textiowrapper_seek,0,_textiowrapper_tell,0,_textiowrapper_truncate,0,_textiowrapper_name_get,0,_textiowrapper_closed_get,0,_textiowrapper_newlines_get,0,_textiowrapper_errors_get,0,_textiowrapper_chunk_size_get,0,_textiowrapper_chunk_size_set,0,_textiowrapper_dealloc,0,_textiowrapper_repr,0,_textiowrapper_traverse,0,_textiowrapper_clear,0,_textiowrapper_iternext,0,_textiowrapper_init,0]);

// === Auto-generated postamble setup entry stuff ===

function run(args) {
  
_bufferediobase_doc=allocate([66,97,115,101,32,99,108,97,115,115,32,102,111,114,32,98,117,102,102,101,114,101,100,32,73,79,32,111,98,106,101,99,116,115,46,10,10,84,104,101,32,109,97,105,110,32,100,105,102,102,101,114,101,110,99,101,32,119,105,116,104,32,82,97,119,73,79,66,97,115,101,32,105,115,32,116,104,97,116,32,116,104,101,32,114,101,97,100,40,41,32,109,101,116,104,111,100,10,115,117,112,112,111,114,116,115,32,111,109,105,116,116,105,110,103,32,116,104,101,32,115,105,122,101,32,97,114,103,117,109,101,110,116,44,32,97,110,100,32,100,111,101,115,32,110,111,116,32,104,97,118,101,32,97,32,100,101,102,97,117,108,116,10,105,109,112,108,101,109,101,110,116,97,116,105,111,110,32,116,104,97,116,32,100,101,102,101,114,115,32,116,111,32,114,101,97,100,105,110,116,111,40,41,46,10,10,73,110,32,97,100,100,105,116,105,111,110,44,32,114,101,97,100,40,41,44,32,114,101,97,100,105,110,116,111,40,41,32,97,110,100,32,119,114,105,116,101,40,41,32,109,97,121,32,114,97,105,115,101,10,66,108,111,99,107,105,110,103,73,79,69,114,114,111,114,32,105,102,32,116,104,101,32,117,110,100,101,114,108,121,105,110,103,32,114,97,119,32,115,116,114,101,97,109,32,105,115,32,105,110,32,110,111,110,45,98,108,111,99,107,105,110,103,10,109,111,100,101,32,97,110,100,32,110,111,116,32,114,101,97,100,121,59,32,117,110,108,105,107,101,32,116,104,101,105,114,32,114,97,119,32,99,111,117,110,116,101,114,112,97,114,116,115,44,32,116,104,101,121,32,119,105,108,108,32,110,101,118,101,114,10,114,101,116,117,114,110,32,78,111,110,101,46,10,10,65,32,116,121,112,105,99,97,108,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,32,115,104,111,117,108,100,32,110,111,116,32,105,110,104,101,114,105,116,32,102,114,111,109,32,97,32,82,97,119,73,79,66,97,115,101,10,105,109,112,108,101,109,101,110,116,97,116,105,111,110,44,32,98,117,116,32,119,114,97,112,32,111,110,101,46,10,0] /* Base class for buffe */, "i8", ALLOC_NORMAL);
__str=allocate([119,42,58,114,101,97,100,105,110,116,111,0] /* w_:readinto\00 */, "i8", ALLOC_NORMAL);
__str1=allocate([114,101,97,100,0] /* read\00 */, "i8", ALLOC_NORMAL);
__str2=allocate([110,0] /* n\00 */, "i8", ALLOC_NORMAL);
__str3=allocate([114,101,97,100,40,41,32,115,104,111,117,108,100,32,114,101,116,117,114,110,32,98,121,116,101,115,0] /* read() should return */, "i8", ALLOC_NORMAL);
_bufferediobase_detach_doc=allocate([68,105,115,99,111,110,110,101,99,116,32,116,104,105,115,32,98,117,102,102,101,114,32,102,114,111,109,32,105,116,115,32,117,110,100,101,114,108,121,105,110,103,32,114,97,119,32,115,116,114,101,97,109,32,97,110,100,32,114,101,116,117,114,110,32,105,116,46,10,10,65,102,116,101,114,32,116,104,101,32,114,97,119,32,115,116,114,101,97,109,32,104,97,115,32,98,101,101,110,32,100,101,116,97,99,104,101,100,44,32,116,104,101,32,98,117,102,102,101,114,32,105,115,32,105,110,32,97,110,32,117,110,117,115,97,98,108,101,10,115,116,97,116,101,46,10,0] /* Disconnect this buff */, "i8", ALLOC_NORMAL);
__str4=allocate([100,101,116,97,99,104,0] /* detach\00 */, "i8", ALLOC_NORMAL);
_bufferediobase_read_doc=allocate([82,101,97,100,32,97,110,100,32,114,101,116,117,114,110,32,117,112,32,116,111,32,110,32,98,121,116,101,115,46,10,10,73,102,32,116,104,101,32,97,114,103,117,109,101,110,116,32,105,115,32,111,109,105,116,116,101,100,44,32,78,111,110,101,44,32,111,114,32,110,101,103,97,116,105,118,101,44,32,114,101,97,100,115,32,97,110,100,10,114,101,116,117,114,110,115,32,97,108,108,32,100,97,116,97,32,117,110,116,105,108,32,69,79,70,46,10,10,73,102,32,116,104,101,32,97,114,103,117,109,101,110,116,32,105,115,32,112,111,115,105,116,105,118,101,44,32,97,110,100,32,116,104,101,32,117,110,100,101,114,108,121,105,110,103,32,114,97,119,32,115,116,114,101,97,109,32,105,115,10,110,111,116,32,39,105,110,116,101,114,97,99,116,105,118,101,39,44,32,109,117,108,116,105,112,108,101,32,114,97,119,32,114,101,97,100,115,32,109,97,121,32,98,101,32,105,115,115,117,101,100,32,116,111,32,115,97,116,105,115,102,121,10,116,104,101,32,98,121,116,101,32,99,111,117,110,116,32,40,117,110,108,101,115,115,32,69,79,70,32,105,115,32,114,101,97,99,104,101,100,32,102,105,114,115,116,41,46,32,32,66,117,116,32,102,111,114,10,105,110,116,101,114,97,99,116,105,118,101,32,114,97,119,32,115,116,114,101,97,109,115,32,40,97,115,32,119,101,108,108,32,97,115,32,115,111,99,107,101,116,115,32,97,110,100,32,112,105,112,101,115,41,44,32,97,116,32,109,111,115,116,10,111,110,101,32,114,97,119,32,114,101,97,100,32,119,105,108,108,32,98,101,32,105,115,115,117,101,100,44,32,97,110,100,32,97,32,115,104,111,114,116,32,114,101,115,117,108,116,32,100,111,101,115,32,110,111,116,32,105,109,112,108,121,10,116,104,97,116,32,69,79,70,32,105,115,32,105,109,109,105,110,101,110,116,46,10,10,82,101,116,117,114,110,115,32,97,110,32,101,109,112,116,121,32,98,121,116,101,115,32,111,98,106,101,99,116,32,111,110,32,69,79,70,46,10,10,82,101,116,117,114,110,115,32,78,111,110,101,32,105,102,32,116,104,101,32,117,110,100,101,114,108,121,105,110,103,32,114,97,119,32,115,116,114,101,97,109,32,119,97,115,32,111,112,101,110,32,105,110,32,110,111,110,45,98,108,111,99,107,105,110,103,10,109,111,100,101,32,97,110,100,32,110,111,32,100,97,116,97,32,105,115,32,97,118,97,105,108,97,98,108,101,32,97,116,32,116,104,101,32,109,111,109,101,110,116,46,10,0] /* Read and return up t */, "i8", ALLOC_NORMAL);
_bufferediobase_read1_doc=allocate([82,101,97,100,32,97,110,100,32,114,101,116,117,114,110,32,117,112,32,116,111,32,110,32,98,121,116,101,115,44,32,119,105,116,104,32,97,116,32,109,111,115,116,32,111,110,101,32,114,101,97,100,40,41,32,99,97,108,108,10,116,111,32,116,104,101,32,117,110,100,101,114,108,121,105,110,103,32,114,97,119,32,115,116,114,101,97,109,46,32,65,32,115,104,111,114,116,32,114,101,115,117,108,116,32,100,111,101,115,32,110,111,116,32,105,109,112,108,121,10,116,104,97,116,32,69,79,70,32,105,115,32,105,109,109,105,110,101,110,116,46,10,10,82,101,116,117,114,110,115,32,97,110,32,101,109,112,116,121,32,98,121,116,101,115,32,111,98,106,101,99,116,32,111,110,32,69,79,70,46,10,0] /* Read and return up t */, "i8", ALLOC_NORMAL);
__str5=allocate([114,101,97,100,49,0] /* read1\00 */, "i8", ALLOC_NORMAL);
_bufferediobase_write_doc=allocate([87,114,105,116,101,32,116,104,101,32,103,105,118,101,110,32,98,117,102,102,101,114,32,116,111,32,116,104,101,32,73,79,32,115,116,114,101,97,109,46,10,10,82,101,116,117,114,110,115,32,116,104,101,32,110,117,109,98,101,114,32,111,102,32,98,121,116,101,115,32,119,114,105,116,116,101,110,44,32,119,104,105,99,104,32,105,115,32,110,101,118,101,114,32,108,101,115,115,32,116,104,97,110,10,108,101,110,40,98,41,46,10,10,82,97,105,115,101,115,32,66,108,111,99,107,105,110,103,73,79,69,114,114,111,114,32,105,102,32,116,104,101,32,98,117,102,102,101,114,32,105,115,32,102,117,108,108,32,97,110,100,32,116,104,101,10,117,110,100,101,114,108,121,105,110,103,32,114,97,119,32,115,116,114,101,97,109,32,99,97,110,110,111,116,32,97,99,99,101,112,116,32,109,111,114,101,32,100,97,116,97,32,97,116,32,116,104,101,32,109,111,109,101,110,116,46,10,0] /* Write the given buff */, "i8", ALLOC_NORMAL);
__str6=allocate([119,114,105,116,101,0] /* write\00 */, "i8", ALLOC_NORMAL);
__str7=allocate([114,101,97,100,105,110,116,111,0] /* readinto\00 */, "i8", ALLOC_NORMAL);
_bufferediobase_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str8=allocate([95,105,111,46,95,66,117,102,102,101,114,101,100,73,79,66,97,115,101,0] /* _io._BufferedIOBase\ */, "i8", ALLOC_NORMAL);
_PyBufferedIOBase_Type=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132587, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str9=allocate([103,45,62,103,99,46,103,99,95,114,101,102,115,32,33,61,32,40,45,50,41,0] /* g->gc.gc_refs != (-2 */, "i8", ALLOC_NORMAL);
__str10=allocate([46,46,47,99,112,121,116,104,111,110,47,77,111,100,117,108,101,115,47,95,105,111,47,98,117,102,102,101,114,101,100,105,111,46,99,0] /* ../cpython/Modules/_ */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8563=allocate([98,117,102,102,101,114,101,100,95,100,101,97,108,108,111,99,0] /* buffered_dealloc\00 */, "i8", ALLOC_NORMAL);
__str11=allocate([114,97,119,32,115,116,114,101,97,109,32,104,97,115,32,98,101,101,110,32,100,101,116,97,99,104,101,100,0] /* raw stream has been  */, "i8", ALLOC_NORMAL);
__str12=allocate([73,47,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,117,110,105,110,105,116,105,97,108,105,122,101,100,32,111,98,106,101,99,116,0] /* I/O operation on uni */, "i8", ALLOC_NORMAL);
__str13=allocate([110,97,109,101,0] /* name\00 */, "i8", ALLOC_NORMAL);
__str14=allocate([109,111,100,101,0] /* mode\00 */, "i8", ALLOC_NORMAL);
__str15=allocate([82,97,119,32,115,116,114,101,97,109,32,114,101,116,117,114,110,101,100,32,105,110,118,97,108,105,100,32,112,111,115,105,116,105,111,110,32,37,108,108,100,0] /* Raw stream returned  */, "i8", ALLOC_NORMAL);
__str16=allocate([98,117,102,102,101,114,32,115,105,122,101,32,109,117,115,116,32,98,101,32,115,116,114,105,99,116,108,121,32,112,111,115,105,116,105,118,101,0] /* buffer size must be  */, "i8", ALLOC_NORMAL);
_eintr_int_9093=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str17=allocate([101,105,110,116,114,95,105,110,116,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* eintr_int != ((void  */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___9098=allocate([95,116,114,97,112,95,101,105,110,116,114,0] /* _trap_eintr\00 */, "i8", ALLOC_NORMAL);
__str18=allocate([101,110,118,95,101,114,114,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* env_err != ((void _) */, "i8", ALLOC_NORMAL);
__str19=allocate([102,108,117,115,104,32,111,102,32,99,108,111,115,101,100,32,102,105,108,101,0] /* flush of closed file */, "i8", ALLOC_NORMAL);
__str20=allocate([124,110,58,112,101,101,107,0] /* |n:peek\00 */, "i8", ALLOC_NORMAL);
__str21=allocate([124,79,38,58,114,101,97,100,0] /* |O&:read\00 */, "i8", ALLOC_NORMAL);
__str22=allocate([114,101,97,100,32,108,101,110,103,116,104,32,109,117,115,116,32,98,101,32,112,111,115,105,116,105,118,101,32,111,114,32,45,49,0] /* read length must be  */, "i8", ALLOC_NORMAL);
__str23=allocate([114,101,97,100,32,111,102,32,99,108,111,115,101,100,32,102,105,108,101,0] /* read of closed file\ */, "i8", ALLOC_NORMAL);
__str24=allocate([110,58,114,101,97,100,49,0] /* n:read1\00 */, "i8", ALLOC_NORMAL);
__str25=allocate([114,101,97,100,32,108,101,110,103,116,104,32,109,117,115,116,32,98,101,32,112,111,115,105,116,105,118,101,0] /* read length must be  */, "i8", ALLOC_NORMAL);
__str26=allocate([114,101,97,100,108,105,110,101,32,111,102,32,99,108,111,115,101,100,32,102,105,108,101,0] /* readline of closed f */, "i8", ALLOC_NORMAL);
__str27=allocate([124,79,38,58,114,101,97,100,108,105,110,101,0] /* |O&:readline\00 */, "i8", ALLOC_NORMAL);
__str28=allocate([79,124,105,58,115,101,101,107,0] /* O|i:seek\00 */, "i8", ALLOC_NORMAL);
__str29=allocate([119,104,101,110,99,101,32,109,117,115,116,32,98,101,32,98,101,116,119,101,101,110,32,48,32,97,110,100,32,50,44,32,110,111,116,32,37,100,0] /* whence must be betwe */, "i8", ALLOC_NORMAL);
__str30=allocate([115,101,101,107,32,111,102,32,99,108,111,115,101,100,32,102,105,108,101,0] /* seek of closed file\ */, "i8", ALLOC_NORMAL);
__str31=allocate([124,79,58,116,114,117,110,99,97,116,101,0] /* |O:truncate\00 */, "i8", ALLOC_NORMAL);
__str32=allocate([114,101,97,100,108,105,110,101,40,41,32,115,104,111,117,108,100,32,104,97,118,101,32,114,101,116,117,114,110,101,100,32,97,32,98,121,116,101,115,32,111,98,106,101,99,116,44,32,110,111,116,32,39,37,46,50,48,48,115,39,0] /* readline() should ha */, "i8", ALLOC_NORMAL);
__str33=allocate([60,37,115,62,0] /* <%s>\00 */, "i8", ALLOC_NORMAL);
__str34=allocate([60,37,115,32,110,97,109,101,61,37,115,62,0] /* <%s name=%s>\00 */, "i8", ALLOC_NORMAL);
_bufferedreader_doc=allocate([67,114,101,97,116,101,32,97,32,110,101,119,32,98,117,102,102,101,114,101,100,32,114,101,97,100,101,114,32,117,115,105,110,103,32,116,104,101,32,103,105,118,101,110,32,114,101,97,100,97,98,108,101,32,114,97,119,32,73,79,32,111,98,106,101,99,116,46,0] /* Create a new buffere */, "i8", ALLOC_NORMAL);
_C_170_10029=allocate(12, "i8*", ALLOC_NORMAL);
__str35=allocate([114,97,119,0] /* raw\00 */, "i8", ALLOC_NORMAL);
__str36=allocate([98,117,102,102,101,114,95,115,105,122,101,0] /* buffer_size\00 */, "i8", ALLOC_NORMAL);
__str37=allocate([79,124,110,58,66,117,102,102,101,114,101,100,82,101,97,100,101,114,0] /* O|n:BufferedReader\0 */, "i8", ALLOC_NORMAL);
__str38=allocate([114,97,119,32,114,101,97,100,105,110,116,111,40,41,32,114,101,116,117,114,110,101,100,32,105,110,118,97,108,105,100,32,108,101,110,103,116,104,32,37,122,100,32,40,115,104,111,117,108,100,32,104,97,118,101,32,98,101,101,110,32,98,101,116,119,101,101,110,32,48,32,97,110,100,32,37,122,100,41,0] /* raw readinto() retur */, "i8", ALLOC_NORMAL);
__str39=allocate([114,101,109,97,105,110,105,110,103,32,60,61,32,115,101,108,102,45,62,98,117,102,102,101,114,95,115,105,122,101,0] /* remaining <= self->b */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___10369=allocate([95,98,117,102,102,101,114,101,100,114,101,97,100,101,114,95,114,101,97,100,95,103,101,110,101,114,105,99,0] /* _bufferedreader_read */, "i8", ALLOC_NORMAL);
__str40=allocate([102,108,117,115,104,0] /* flush\00 */, "i8", ALLOC_NORMAL);
__str41=allocate([99,108,111,115,101,0] /* close\00 */, "i8", ALLOC_NORMAL);
__str42=allocate([115,101,101,107,97,98,108,101,0] /* seekable\00 */, "i8", ALLOC_NORMAL);
__str43=allocate([114,101,97,100,97,98,108,101,0] /* readable\00 */, "i8", ALLOC_NORMAL);
__str44=allocate([119,114,105,116,97,98,108,101,0] /* writable\00 */, "i8", ALLOC_NORMAL);
__str45=allocate([102,105,108,101,110,111,0] /* fileno\00 */, "i8", ALLOC_NORMAL);
__str46=allocate([105,115,97,116,116,121,0] /* isatty\00 */, "i8", ALLOC_NORMAL);
__str47=allocate([112,101,101,107,0] /* peek\00 */, "i8", ALLOC_NORMAL);
__str48=allocate([114,101,97,100,108,105,110,101,0] /* readline\00 */, "i8", ALLOC_NORMAL);
__str49=allocate([115,101,101,107,0] /* seek\00 */, "i8", ALLOC_NORMAL);
__str50=allocate([116,101,108,108,0] /* tell\00 */, "i8", ALLOC_NORMAL);
__str51=allocate([116,114,117,110,99,97,116,101,0] /* truncate\00 */, "i8", ALLOC_NORMAL);
_bufferedreader_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_bufferedreader_members=allocate([0, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str52=allocate([99,108,111,115,101,100,0] /* closed\00 */, "i8", ALLOC_NORMAL);
_bufferedreader_getset=allocate(80, ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str53=allocate([95,105,111,46,66,117,102,102,101,114,101,100,82,101,97,100,101,114,0] /* _io.BufferedReader\0 */, "i8", ALLOC_NORMAL);
_PyBufferedReader_Type=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str54=allocate([109,97,120,95,98,117,102,102,101,114,95,115,105,122,101,32,105,115,32,100,101,112,114,101,99,97,116,101,100,0] /* max_buffer_size is d */, "i8", ALLOC_NORMAL);
_bufferedwriter_doc=allocate([65,32,98,117,102,102,101,114,32,102,111,114,32,97,32,119,114,105,116,101,97,98,108,101,32,115,101,113,117,101,110,116,105,97,108,32,82,97,119,73,79,32,111,98,106,101,99,116,46,10,10,84,104,101,32,99,111,110,115,116,114,117,99,116,111,114,32,99,114,101,97,116,101,115,32,97,32,66,117,102,102,101,114,101,100,87,114,105,116,101,114,32,102,111,114,32,116,104,101,32,103,105,118,101,110,32,119,114,105,116,101,97,98,108,101,32,114,97,119,10,115,116,114,101,97,109,46,32,73,102,32,116,104,101,32,98,117,102,102,101,114,95,115,105,122,101,32,105,115,32,110,111,116,32,103,105,118,101,110,44,32,105,116,32,100,101,102,97,117,108,116,115,32,116,111,10,68,69,70,65,85,76,84,95,66,85,70,70,69,82,95,83,73,90,69,46,32,109,97,120,95,98,117,102,102,101,114,95,115,105,122,101,32,105,115,110,39,116,32,117,115,101,100,32,97,110,121,109,111,114,101,46,10,0] /* A buffer for a write */, "i8", ALLOC_NORMAL);
_C_210_10564=allocate(16, "i8*", ALLOC_NORMAL);
__str55=allocate([109,97,120,95,98,117,102,102,101,114,95,115,105,122,101,0] /* max_buffer_size\00 */, "i8", ALLOC_NORMAL);
__str56=allocate([79,124,110,110,58,66,117,102,102,101,114,101,100,82,101,97,100,101,114,0] /* O|nn:BufferedReader\ */, "i8", ALLOC_NORMAL);
__str57=allocate([114,97,119,32,119,114,105,116,101,40,41,32,114,101,116,117,114,110,101,100,32,105,110,118,97,108,105,100,32,108,101,110,103,116,104,32,37,122,100,32,40,115,104,111,117,108,100,32,104,97,118,101,32,98,101,101,110,32,98,101,116,119,101,101,110,32,48,32,97,110,100,32,37,122,100,41,0] /* raw write() returned */, "i8", ALLOC_NORMAL);
__str58=allocate([115,42,58,119,114,105,116,101,0] /* s_:write\00 */, "i8", ALLOC_NORMAL);
__str59=allocate([119,114,105,116,101,32,116,111,32,99,108,111,115,101,100,32,102,105,108,101,0] /* write to closed file */, "i8", ALLOC_NORMAL);
__str60=allocate([40,115,101,108,102,45,62,119,114,105,116,97,98,108,101,32,38,38,32,115,101,108,102,45,62,119,114,105,116,101,95,101,110,100,32,33,61,32,45,49,41,0] /* (self->writable && s */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___10762=allocate([98,117,102,102,101,114,101,100,119,114,105,116,101,114,95,119,114,105,116,101,0] /* bufferedwriter_write */, "i8", ALLOC_NORMAL);
_bufferedwriter_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_bufferedwriter_members=allocate([0, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_bufferedwriter_getset=allocate(80, ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str61=allocate([95,105,111,46,66,117,102,102,101,114,101,100,87,114,105,116,101,114,0] /* _io.BufferedWriter\0 */, "i8", ALLOC_NORMAL);
_PyBufferedWriter_Type=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_bufferedrwpair_doc=allocate([65,32,98,117,102,102,101,114,101,100,32,114,101,97,100,101,114,32,97,110,100,32,119,114,105,116,101,114,32,111,98,106,101,99,116,32,116,111,103,101,116,104,101,114,46,10,10,65,32,98,117,102,102,101,114,101,100,32,114,101,97,100,101,114,32,111,98,106,101,99,116,32,97,110,100,32,98,117,102,102,101,114,101,100,32,119,114,105,116,101,114,32,111,98,106,101,99,116,32,112,117,116,32,116,111,103,101,116,104,101,114,32,116,111,10,102,111,114,109,32,97,32,115,101,113,117,101,110,116,105,97,108,32,73,79,32,111,98,106,101,99,116,32,116,104,97,116,32,99,97,110,32,114,101,97,100,32,97,110,100,32,119,114,105,116,101,46,32,84,104,105,115,32,105,115,32,116,121,112,105,99,97,108,108,121,10,117,115,101,100,32,119,105,116,104,32,97,32,115,111,99,107,101,116,32,111,114,32,116,119,111,45,119,97,121,32,112,105,112,101,46,10,10,114,101,97,100,101,114,32,97,110,100,32,119,114,105,116,101,114,32,97,114,101,32,82,97,119,73,79,66,97,115,101,32,111,98,106,101,99,116,115,32,116,104,97,116,32,97,114,101,32,114,101,97,100,97,98,108,101,32,97,110,100,10,119,114,105,116,101,97,98,108,101,32,114,101,115,112,101,99,116,105,118,101,108,121,46,32,73,102,32,116,104,101,32,98,117,102,102,101,114,95,115,105,122,101,32,105,115,32,111,109,105,116,116,101,100,32,105,116,32,100,101,102,97,117,108,116,115,32,116,111,10,68,69,70,65,85,76,84,95,66,85,70,70,69,82,95,83,73,90,69,46,10,0] /* A buffered reader an */, "i8", ALLOC_NORMAL);
__str62=allocate([79,79,124,110,110,58,66,117,102,102,101,114,101,100,82,87,80,97,105,114,0] /* OO|nn:BufferedRWPair */, "i8", ALLOC_NORMAL);
__str63=allocate([79,110,0] /* On\00 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___11129=allocate([98,117,102,102,101,114,101,100,114,119,112,97,105,114,95,100,101,97,108,108,111,99,0] /* bufferedrwpair_deall */, "i8", ALLOC_NORMAL);
_bufferedrwpair_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_bufferedrwpair_getset=allocate(40, ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str64=allocate([95,105,111,46,66,117,102,102,101,114,101,100,82,87,80,97,105,114,0] /* _io.BufferedRWPair\0 */, "i8", ALLOC_NORMAL);
_PyBufferedRWPair_Type=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_bufferedrandom_doc=allocate([65,32,98,117,102,102,101,114,101,100,32,105,110,116,101,114,102,97,99,101,32,116,111,32,114,97,110,100,111,109,32,97,99,99,101,115,115,32,115,116,114,101,97,109,115,46,10,10,84,104,101,32,99,111,110,115,116,114,117,99,116,111,114,32,99,114,101,97,116,101,115,32,97,32,114,101,97,100,101,114,32,97,110,100,32,119,114,105,116,101,114,32,102,111,114,32,97,32,115,101,101,107,97,98,108,101,32,115,116,114,101,97,109,44,10,114,97,119,44,32,103,105,118,101,110,32,105,110,32,116,104,101,32,102,105,114,115,116,32,97,114,103,117,109,101,110,116,46,32,73,102,32,116,104,101,32,98,117,102,102,101,114,95,115,105,122,101,32,105,115,32,111,109,105,116,116,101,100,32,105,116,10,100,101,102,97,117,108,116,115,32,116,111,32,68,69,70,65,85,76,84,95,66,85,70,70,69,82,95,83,73,90,69,46,32,109,97,120,95,98,117,102,102,101,114,95,115,105,122,101,32,105,115,110,39,116,32,117,115,101,100,32,97,110,121,109,111,114,101,46,10,0] /* A buffered interface */, "i8", ALLOC_NORMAL);
_C_248_11327=allocate(16, "i8*", ALLOC_NORMAL);
_bufferedrandom_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_bufferedrandom_members=allocate([0, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_bufferedrandom_getset=allocate(80, ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str65=allocate([95,105,111,46,66,117,102,102,101,114,101,100,82,97,110,100,111,109,0] /* _io.BufferedRandom\0 */, "i8", ALLOC_NORMAL);
_PyBufferedRandom_Type=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str66=allocate([115,101,108,102,45,62,98,117,102,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* self->buf != ((void  */, "i8", ALLOC_NORMAL);
__str167=allocate([46,46,47,99,112,121,116,104,111,110,47,77,111,100,117,108,101,115,47,95,105,111,47,98,121,116,101,115,105,111,46,99,0] /* ../cpython/Modules/_ */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8438=allocate([103,101,116,95,108,105,110,101,0] /* get_line\00 */, "i8", ALLOC_NORMAL);
__str268=allocate([108,101,110,32,62,61,32,48,0] /* len >= 0\00 */, "i8", ALLOC_NORMAL);
__str369=allocate([115,101,108,102,45,62,112,111,115,32,60,32,40,40,80,121,95,115,115,105,122,101,95,116,41,40,40,40,115,105,122,101,95,116,41,45,49,41,62,62,49,41,41,32,45,32,108,101,110,0] /* self->pos < ((Py_ssi */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8477=allocate([114,101,115,105,122,101,95,98,117,102,102,101,114,0] /* resize_buffer\00 */, "i8", ALLOC_NORMAL);
__str470=allocate([110,101,119,32,98,117,102,102,101,114,32,115,105,122,101,32,116,111,111,32,108,97,114,103,101,0] /* new buffer size too  */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8514=allocate([119,114,105,116,101,95,98,121,116,101,115,0] /* write_bytes\00 */, "i8", ALLOC_NORMAL);
__str571=allocate([115,101,108,102,45,62,112,111,115,32,62,61,32,48,0] /* self->pos >= 0\00 */, "i8", ALLOC_NORMAL);
_flush_doc=allocate([102,108,117,115,104,40,41,32,45,62,32,78,111,110,101,46,32,32,68,111,101,115,32,110,111,116,104,105,110,103,46,0] /* flush() -> None.  Do */, "i8", ALLOC_NORMAL);
__str672=allocate([73,47,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,99,108,111,115,101,100,32,102,105,108,101,46,0] /* I/O operation on clo */, "i8", ALLOC_NORMAL);
_getval_doc=allocate([103,101,116,118,97,108,117,101,40,41,32,45,62,32,98,121,116,101,115,46,10,10,82,101,116,114,105,101,118,101,32,116,104,101,32,101,110,116,105,114,101,32,99,111,110,116,101,110,116,115,32,111,102,32,116,104,101,32,66,121,116,101,115,73,79,32,111,98,106,101,99,116,46,0] /* getvalue() -> bytes. */, "i8", ALLOC_NORMAL);
_isatty_doc=allocate([105,115,97,116,116,121,40,41,32,45,62,32,70,97,108,115,101,46,10,10,65,108,119,97,121,115,32,114,101,116,117,114,110,115,32,70,97,108,115,101,32,115,105,110,99,101,32,66,121,116,101,115,73,79,32,111,98,106,101,99,116,115,32,97,114,101,32,110,111,116,32,99,111,110,110,101,99,116,101,100,10,116,111,32,97,32,116,116,121,45,108,105,107,101,32,100,101,118,105,99,101,46,0] /* isatty() -> False.\0 */, "i8", ALLOC_NORMAL);
_tell_doc=allocate([116,101,108,108,40,41,32,45,62,32,99,117,114,114,101,110,116,32,102,105,108,101,32,112,111,115,105,116,105,111,110,44,32,97,110,32,105,110,116,101,103,101,114,10,0] /* tell() -> current fi */, "i8", ALLOC_NORMAL);
_read_doc=allocate([114,101,97,100,40,91,115,105,122,101,93,41,32,45,62,32,114,101,97,100,32,97,116,32,109,111,115,116,32,115,105,122,101,32,98,121,116,101,115,44,32,114,101,116,117,114,110,101,100,32,97,115,32,97,32,115,116,114,105,110,103,46,10,10,73,102,32,116,104,101,32,115,105,122,101,32,97,114,103,117,109,101,110,116,32,105,115,32,110,101,103,97,116,105,118,101,44,32,114,101,97,100,32,117,110,116,105,108,32,69,79,70,32,105,115,32,114,101,97,99,104,101,100,46,10,82,101,116,117,114,110,32,97,110,32,101,109,112,116,121,32,115,116,114,105,110,103,32,97,116,32,69,79,70,46,0] /* read([size]) -> read */, "i8", ALLOC_NORMAL);
__str773=allocate([124,79,58,114,101,97,100,0] /* |O:read\00 */, "i8", ALLOC_NORMAL);
__str874=allocate([105,110,116,101,103,101,114,32,97,114,103,117,109,101,110,116,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,39,37,115,39,0] /* integer argument exp */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8642=allocate([98,121,116,101,115,105,111,95,114,101,97,100,0] /* bytesio_read\00 */, "i8", ALLOC_NORMAL);
_read1_doc=allocate([114,101,97,100,49,40,115,105,122,101,41,32,45,62,32,114,101,97,100,32,97,116,32,109,111,115,116,32,115,105,122,101,32,98,121,116,101,115,44,32,114,101,116,117,114,110,101,100,32,97,115,32,97,32,115,116,114,105,110,103,46,10,10,73,102,32,116,104,101,32,115,105,122,101,32,97,114,103,117,109,101,110,116,32,105,115,32,110,101,103,97,116,105,118,101,32,111,114,32,111,109,105,116,116,101,100,44,32,114,101,97,100,32,117,110,116,105,108,32,69,79,70,32,105,115,32,114,101,97,99,104,101,100,46,10,82,101,116,117,114,110,32,97,110,32,101,109,112,116,121,32,115,116,114,105,110,103,32,97,116,32,69,79,70,46,0] /* read1(size) -> read  */, "i8", ALLOC_NORMAL);
_readline_doc=allocate([114,101,97,100,108,105,110,101,40,91,115,105,122,101,93,41,32,45,62,32,110,101,120,116,32,108,105,110,101,32,102,114,111,109,32,116,104,101,32,102,105,108,101,44,32,97,115,32,97,32,115,116,114,105,110,103,46,10,10,82,101,116,97,105,110,32,110,101,119,108,105,110,101,46,32,32,65,32,110,111,110,45,110,101,103,97,116,105,118,101,32,115,105,122,101,32,97,114,103,117,109,101,110,116,32,108,105,109,105,116,115,32,116,104,101,32,109,97,120,105,109,117,109,10,110,117,109,98,101,114,32,111,102,32,98,121,116,101,115,32,116,111,32,114,101,116,117,114,110,32,40,97,110,32,105,110,99,111,109,112,108,101,116,101,32,108,105,110,101,32,109,97,121,32,98,101,32,114,101,116,117,114,110,101,100,32,116,104,101,110,41,46,10,82,101,116,117,114,110,32,97,110,32,101,109,112,116,121,32,115,116,114,105,110,103,32,97,116,32,69,79,70,46,10,0] /* readline([size]) ->  */, "i8", ALLOC_NORMAL);
__str975=allocate([124,79,58,114,101,97,100,108,105,110,101,0] /* |O:readline\00 */, "i8", ALLOC_NORMAL);
_readlines_doc=allocate([114,101,97,100,108,105,110,101,115,40,91,115,105,122,101,93,41,32,45,62,32,108,105,115,116,32,111,102,32,115,116,114,105,110,103,115,44,32,101,97,99,104,32,97,32,108,105,110,101,32,102,114,111,109,32,116,104,101,32,102,105,108,101,46,10,10,67,97,108,108,32,114,101,97,100,108,105,110,101,40,41,32,114,101,112,101,97,116,101,100,108,121,32,97,110,100,32,114,101,116,117,114,110,32,97,32,108,105,115,116,32,111,102,32,116,104,101,32,108,105,110,101,115,32,115,111,32,114,101,97,100,46,10,84,104,101,32,111,112,116,105,111,110,97,108,32,115,105,122,101,32,97,114,103,117,109,101,110,116,44,32,105,102,32,103,105,118,101,110,44,32,105,115,32,97,110,32,97,112,112,114,111,120,105,109,97,116,101,32,98,111,117,110,100,32,111,110,32,116,104,101,10,116,111,116,97,108,32,110,117,109,98,101,114,32,111,102,32,98,121,116,101,115,32,105,110,32,116,104,101,32,108,105,110,101,115,32,114,101,116,117,114,110,101,100,46,10,0] /* readlines([size]) -> */, "i8", ALLOC_NORMAL);
__str1076=allocate([124,79,58,114,101,97,100,108,105,110,101,115,0] /* |O:readlines\00 */, "i8", ALLOC_NORMAL);
_readinto_doc=allocate([114,101,97,100,105,110,116,111,40,98,121,116,101,97,114,114,97,121,41,32,45,62,32,105,110,116,46,32,32,82,101,97,100,32,117,112,32,116,111,32,108,101,110,40,98,41,32,98,121,116,101,115,32,105,110,116,111,32,98,46,10,10,82,101,116,117,114,110,115,32,110,117,109,98,101,114,32,111,102,32,98,121,116,101,115,32,114,101,97,100,32,40,48,32,102,111,114,32,69,79,70,41,44,32,111,114,32,78,111,110,101,32,105,102,32,116,104,101,32,111,98,106,101,99,116,10,105,115,32,115,101,116,32,110,111,116,32,116,111,32,98,108,111,99,107,32,97,115,32,104,97,115,32,110,111,32,100,97,116,97,32,116,111,32,114,101,97,100,46,0] /* readinto(bytearray)  */, "i8", ALLOC_NORMAL);
__str1177=allocate([119,42,0] /* w_\00 */, "i8", ALLOC_NORMAL);
__str1278=allocate([115,101,108,102,45,62,112,111,115,32,43,32,108,101,110,32,60,32,40,40,80,121,95,115,115,105,122,101,95,116,41,40,40,40,115,105,122,101,95,116,41,45,49,41,62,62,49,41,41,0] /* self->pos + len < (( */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8844=allocate([98,121,116,101,115,105,111,95,114,101,97,100,105,110,116,111,0] /* bytesio_readinto\00 */, "i8", ALLOC_NORMAL);
_truncate_doc=allocate([116,114,117,110,99,97,116,101,40,91,115,105,122,101,93,41,32,45,62,32,105,110,116,46,32,32,84,114,117,110,99,97,116,101,32,116,104,101,32,102,105,108,101,32,116,111,32,97,116,32,109,111,115,116,32,115,105,122,101,32,98,121,116,101,115,46,10,10,83,105,122,101,32,100,101,102,97,117,108,116,115,32,116,111,32,116,104,101,32,99,117,114,114,101,110,116,32,102,105,108,101,32,112,111,115,105,116,105,111,110,44,32,97,115,32,114,101,116,117,114,110,101,100,32,98,121,32,116,101,108,108,40,41,46,10,84,104,101,32,99,117,114,114,101,110,116,32,102,105,108,101,32,112,111,115,105,116,105,111,110,32,105,115,32,117,110,99,104,97,110,103,101,100,46,32,32,82,101,116,117,114,110,115,32,116,104,101,32,110,101,119,32,115,105,122,101,46,10,0] /* truncate([size]) ->  */, "i8", ALLOC_NORMAL);
__str1379=allocate([124,79,58,116,114,117,110,99,97,116,101,0] /* |O:truncate\00 */, "i8", ALLOC_NORMAL);
__str1480=allocate([110,101,103,97,116,105,118,101,32,115,105,122,101,32,118,97,108,117,101,32,37,122,100,0] /* negative size value  */, "i8", ALLOC_NORMAL);
_seek_doc=allocate([115,101,101,107,40,112,111,115,44,32,119,104,101,110,99,101,61,48,41,32,45,62,32,105,110,116,46,32,32,67,104,97,110,103,101,32,115,116,114,101,97,109,32,112,111,115,105,116,105,111,110,46,10,10,83,101,101,107,32,116,111,32,98,121,116,101,32,111,102,102,115,101,116,32,112,111,115,32,114,101,108,97,116,105,118,101,32,116,111,32,112,111,115,105,116,105,111,110,32,105,110,100,105,99,97,116,101,100,32,98,121,32,119,104,101,110,99,101,58,10,32,32,32,32,32,48,32,32,83,116,97,114,116,32,111,102,32,115,116,114,101,97,109,32,40,116,104,101,32,100,101,102,97,117,108,116,41,46,32,32,112,111,115,32,115,104,111,117,108,100,32,98,101,32,62,61,32,48,59,10,32,32,32,32,32,49,32,32,67,117,114,114,101,110,116,32,112,111,115,105,116,105,111,110,32,45,32,112,111,115,32,109,97,121,32,98,101,32,110,101,103,97,116,105,118,101,59,10,32,32,32,32,32,50,32,32,69,110,100,32,111,102,32,115,116,114,101,97,109,32,45,32,112,111,115,32,117,115,117,97,108,108,121,32,110,101,103,97,116,105,118,101,46,10,82,101,116,117,114,110,115,32,116,104,101,32,110,101,119,32,97,98,115,111,108,117,116,101,32,112,111,115,105,116,105,111,110,46,0] /* seek(pos, whence=0)  */, "i8", ALLOC_NORMAL);
__str1581=allocate([79,124,105,58,115,101,101,107,0] /* O|i:seek\00 */, "i8", ALLOC_NORMAL);
__str1682=allocate([110,101,103,97,116,105,118,101,32,115,101,101,107,32,118,97,108,117,101,32,37,122,100,0] /* negative seek value  */, "i8", ALLOC_NORMAL);
__str1783=allocate([110,101,119,32,112,111,115,105,116,105,111,110,32,116,111,111,32,108,97,114,103,101,0] /* new position too lar */, "i8", ALLOC_NORMAL);
__str1884=allocate([105,110,118,97,108,105,100,32,119,104,101,110,99,101,32,40,37,105,44,32,115,104,111,117,108,100,32,98,101,32,48,44,32,49,32,111,114,32,50,41,0] /* invalid whence (%i,  */, "i8", ALLOC_NORMAL);
_write_doc=allocate([119,114,105,116,101,40,98,121,116,101,115,41,32,45,62,32,105,110,116,46,32,32,87,114,105,116,101,32,98,121,116,101,115,32,116,111,32,102,105,108,101,46,10,10,82,101,116,117,114,110,32,116,104,101,32,110,117,109,98,101,114,32,111,102,32,98,121,116,101,115,32,119,114,105,116,116,101,110,46,0] /* write(bytes) -> int. */, "i8", ALLOC_NORMAL);
_writelines_doc=allocate([119,114,105,116,101,108,105,110,101,115,40,115,101,113,117,101,110,99,101,95,111,102,95,115,116,114,105,110,103,115,41,32,45,62,32,78,111,110,101,46,32,32,87,114,105,116,101,32,115,116,114,105,110,103,115,32,116,111,32,116,104,101,32,102,105,108,101,46,10,10,78,111,116,101,32,116,104,97,116,32,110,101,119,108,105,110,101,115,32,97,114,101,32,110,111,116,32,97,100,100,101,100,46,32,32,84,104,101,32,115,101,113,117,101,110,99,101,32,99,97,110,32,98,101,32,97,110,121,32,105,116,101,114,97,98,108,101,10,111,98,106,101,99,116,32,112,114,111,100,117,99,105,110,103,32,115,116,114,105,110,103,115,46,32,84,104,105,115,32,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,111,32,99,97,108,108,105,110,103,32,119,114,105,116,101,40,41,32,102,111,114,10,101,97,99,104,32,115,116,114,105,110,103,46,0] /* writelines(sequence_ */, "i8", ALLOC_NORMAL);
_close_doc=allocate([99,108,111,115,101,40,41,32,45,62,32,78,111,110,101,46,32,32,68,105,115,97,98,108,101,32,97,108,108,32,73,47,79,32,111,112,101,114,97,116,105,111,110,115,46,0] /* close() -> None.  Di */, "i8", ALLOC_NORMAL);
__str1985=allocate([40,79,110,78,41,0] /* (OnN)\00 */, "i8", ALLOC_NORMAL);
__str2086=allocate([115,116,97,116,101,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* state != ((void _)0) */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___9134=allocate([98,121,116,101,115,105,111,95,115,101,116,115,116,97,116,101,0] /* bytesio_setstate\00 */, "i8", ALLOC_NORMAL);
__str2187=allocate([37,46,50,48,48,115,46,95,95,115,101,116,115,116,97,116,101,95,95,32,97,114,103,117,109,101,110,116,32,115,104,111,117,108,100,32,98,101,32,51,45,116,117,112,108,101,44,32,103,111,116,32,37,46,50,48,48,115,0] /* %.200s.__setstate__  */, "i8", ALLOC_NORMAL);
__str2288=allocate([115,101,99,111,110,100,32,105,116,101,109,32,111,102,32,115,116,97,116,101,32,109,117,115,116,32,98,101,32,97,110,32,105,110,116,101,103,101,114,44,32,110,111,116,32,37,46,50,48,48,115,0] /* second item of state */, "i8", ALLOC_NORMAL);
__str2389=allocate([112,111,115,105,116,105,111,110,32,118,97,108,117,101,32,99,97,110,110,111,116,32,98,101,32,110,101,103,97,116,105,118,101,0] /* position value canno */, "i8", ALLOC_NORMAL);
__str2490=allocate([116,104,105,114,100,32,105,116,101,109,32,111,102,32,115,116,97,116,101,32,115,104,111,117,108,100,32,98,101,32,97,32,100,105,99,116,44,32,103,111,116,32,97,32,37,46,50,48,48,115,0] /* third item of state  */, "i8", ALLOC_NORMAL);
__str2591=allocate([103,45,62,103,99,46,103,99,95,114,101,102,115,32,33,61,32,40,45,50,41,0] /* g->gc.gc_refs != (-2 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___9218=allocate([98,121,116,101,115,105,111,95,100,101,97,108,108,111,99,0] /* bytesio_dealloc\00 */, "i8", ALLOC_NORMAL);
__str2692=allocate([116,121,112,101,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,32,38,38,32,116,121,112,101,45,62,116,112,95,97,108,108,111,99,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* type != ((void _)0)  */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___9255=allocate([98,121,116,101,115,105,111,95,110,101,119,0] /* bytesio_new\00 */, "i8", ALLOC_NORMAL);
_C_82_9290=allocate(8, "i8*", ALLOC_NORMAL);
__str2793=allocate([105,110,105,116,105,97,108,95,98,121,116,101,115,0] /* initial_bytes\00 */, "i8", ALLOC_NORMAL);
__str2894=allocate([124,79,58,66,121,116,101,115,73,79,0] /* |O:BytesIO\00 */, "i8", ALLOC_NORMAL);
__str2995=allocate([99,108,111,115,101,100,0] /* closed\00 */, "i8", ALLOC_NORMAL);
__str3096=allocate([84,114,117,101,32,105,102,32,116,104,101,32,102,105,108,101,32,105,115,32,99,108,111,115,101,100,46,0] /* True if the file is  */, "i8", ALLOC_NORMAL);
_bytesio_getsetlist=allocate(40, ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str3197=allocate([114,101,97,100,97,98,108,101,0] /* readable\00 */, "i8", ALLOC_NORMAL);
__str3298=allocate([115,101,101,107,97,98,108,101,0] /* seekable\00 */, "i8", ALLOC_NORMAL);
__str3399=allocate([119,114,105,116,97,98,108,101,0] /* writable\00 */, "i8", ALLOC_NORMAL);
__str34100=allocate([99,108,111,115,101,0] /* close\00 */, "i8", ALLOC_NORMAL);
__str35101=allocate([102,108,117,115,104,0] /* flush\00 */, "i8", ALLOC_NORMAL);
__str36102=allocate([105,115,97,116,116,121,0] /* isatty\00 */, "i8", ALLOC_NORMAL);
__str37103=allocate([116,101,108,108,0] /* tell\00 */, "i8", ALLOC_NORMAL);
__str38104=allocate([119,114,105,116,101,0] /* write\00 */, "i8", ALLOC_NORMAL);
__str39105=allocate([119,114,105,116,101,108,105,110,101,115,0] /* writelines\00 */, "i8", ALLOC_NORMAL);
__str40106=allocate([114,101,97,100,49,0] /* read1\00 */, "i8", ALLOC_NORMAL);
__str41107=allocate([114,101,97,100,105,110,116,111,0] /* readinto\00 */, "i8", ALLOC_NORMAL);
__str42108=allocate([114,101,97,100,108,105,110,101,0] /* readline\00 */, "i8", ALLOC_NORMAL);
__str43109=allocate([114,101,97,100,108,105,110,101,115,0] /* readlines\00 */, "i8", ALLOC_NORMAL);
__str44110=allocate([114,101,97,100,0] /* read\00 */, "i8", ALLOC_NORMAL);
__str45111=allocate([103,101,116,118,97,108,117,101,0] /* getvalue\00 */, "i8", ALLOC_NORMAL);
__str46112=allocate([115,101,101,107,0] /* seek\00 */, "i8", ALLOC_NORMAL);
__str47113=allocate([116,114,117,110,99,97,116,101,0] /* truncate\00 */, "i8", ALLOC_NORMAL);
__str48114=allocate([95,95,103,101,116,115,116,97,116,101,95,95,0] /* __getstate__\00 */, "i8", ALLOC_NORMAL);
__str49115=allocate([95,95,115,101,116,115,116,97,116,101,95,95,0] /* __setstate__\00 */, "i8", ALLOC_NORMAL);
_bytesio_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_bytesio_doc=allocate([66,121,116,101,115,73,79,40,91,98,117,102,102,101,114,93,41,32,45,62,32,111,98,106,101,99,116,10,10,67,114,101,97,116,101,32,97,32,98,117,102,102,101,114,101,100,32,73,47,79,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,32,117,115,105,110,103,32,97,110,32,105,110,45,109,101,109,111,114,121,32,98,121,116,101,115,10,98,117,102,102,101,114,44,32,114,101,97,100,121,32,102,111,114,32,114,101,97,100,105,110,103,32,97,110,100,32,119,114,105,116,105,110,103,46,0] /* BytesIO([buffer]) -> */, "i8", ALLOC_NORMAL);
__str50116=allocate([95,105,111,46,66,121,116,101,115,73,79,0] /* _io.BytesIO\00 */, "i8", ALLOC_NORMAL);
_PyBytesIO_Type=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str117=allocate([99,108,111,115,101,0] /* close\00 */, "i8", ALLOC_NORMAL);
__str1118=allocate([79,0] /* O\00 */, "i8", ALLOC_NORMAL);
__str2119=allocate([116,121,112,101,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,32,38,38,32,116,121,112,101,45,62,116,112,95,97,108,108,111,99,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* type != ((void _)0)  */, "i8", ALLOC_NORMAL);
__str3120=allocate([46,46,47,99,112,121,116,104,111,110,47,77,111,100,117,108,101,115,47,95,105,111,47,102,105,108,101,105,111,46,99,0] /* ../cpython/Modules/_ */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8576=allocate([102,105,108,101,105,111,95,110,101,119,0] /* fileio_new\00 */, "i8", ALLOC_NORMAL);
__str4121=allocate([40,105,115,115,41,0] /* (iss)\00 */, "i8", ALLOC_NORMAL);
__str5122=allocate([40,105,115,41,0] /* (is)\00 */, "i8", ALLOC_NORMAL);
__str6123=allocate([114,0] /* r\00 */, "i8", ALLOC_NORMAL);
__str7124=allocate([40,40,40,40,40,80,121,79,98,106,101,99,116,42,41,40,40,111,115,101,108,102,41,41,41,45,62,111,98,95,116,121,112,101,41,32,61,61,32,40,38,80,121,70,105,108,101,73,79,95,84,121,112,101,41,32,124,124,32,80,121,84,121,112,101,95,73,115,83,117,98,116,121,112,101,40,40,40,40,80,121,79,98,106,101,99,116,42,41,40,40,111,115,101,108,102,41,41,41,45,62,111,98,95,116,121,112,101,41,44,32,40,38,80,121,70,105,108,101,73,79,95,84,121,112,101,41,41,41,41,0] /* (((((PyObject_)((ose */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8670=allocate([102,105,108,101,105,111,95,105,110,105,116,0] /* fileio_init\00 */, "i8", ALLOC_NORMAL);
__str8125=allocate([79,124,115,105,58,102,105,108,101,105,111,0] /* O|si:fileio\00 */, "i8", ALLOC_NORMAL);
_kwlist_8657=allocate(16, "i8*", ALLOC_NORMAL);
__str9126=allocate([102,105,108,101,0] /* file\00 */, "i8", ALLOC_NORMAL);
__str10127=allocate([109,111,100,101,0] /* mode\00 */, "i8", ALLOC_NORMAL);
__str11128=allocate([99,108,111,115,101,102,100,0] /* closefd\00 */, "i8", ALLOC_NORMAL);
__str12129=allocate([105,110,116,101,103,101,114,32,97,114,103,117,109,101,110,116,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,102,108,111,97,116,0] /* integer argument exp */, "i8", ALLOC_NORMAL);
__str13130=allocate([78,101,103,97,116,105,118,101,32,102,105,108,101,100,101,115,99,114,105,112,116,111,114,0] /* Negative filedescrip */, "i8", ALLOC_NORMAL);
__str14131=allocate([101,110,99,111,100,101,114,32,102,97,105,108,101,100,32,116,111,32,114,101,116,117,114,110,32,98,121,116,101,115,0] /* encoder failed to re */, "i8", ALLOC_NORMAL);
__str15132=allocate([77,117,115,116,32,104,97,118,101,32,101,120,97,99,116,108,121,32,111,110,101,32,111,102,32,114,101,97,100,47,119,114,105,116,101,47,97,112,112,101,110,100,32,109,111,100,101,32,97,110,100,32,97,116,32,109,111,115,116,32,111,110,101,32,112,108,117,115,0] /* Must have exactly on */, "i8", ALLOC_NORMAL);
__str16133=allocate([105,110,118,97,108,105,100,32,109,111,100,101,58,32,37,46,50,48,48,115,0] /* invalid mode: %.200s */, "i8", ALLOC_NORMAL);
__str17134=allocate([67,97,110,110,111,116,32,117,115,101,32,99,108,111,115,101,102,100,61,70,97,108,115,101,32,119,105,116,104,32,102,105,108,101,32,110,97,109,101,0] /* Cannot use closefd=F */, "i8", ALLOC_NORMAL);
__str18135=allocate([110,97,109,101,0] /* name\00 */, "i8", ALLOC_NORMAL);
__str19136=allocate([103,45,62,103,99,46,103,99,95,114,101,102,115,32,33,61,32,40,45,50,41,0] /* g->gc.gc_refs != (-2 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8879=allocate([102,105,108,101,105,111,95,100,101,97,108,108,111,99,0] /* fileio_dealloc\00 */, "i8", ALLOC_NORMAL);
__str20137=allocate([73,47,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,99,108,111,115,101,100,32,102,105,108,101,0] /* I/O operation on clo */, "i8", ALLOC_NORMAL);
__str21138=allocate([70,105,108,101,32,110,111,116,32,111,112,101,110,32,102,111,114,32,37,115,0] /* File not open for %s */, "i8", ALLOC_NORMAL);
__str22139=allocate([114,101,97,100,105,110,103,0] /* reading\00 */, "i8", ALLOC_NORMAL);
__str23140=allocate([119,42,0] /* w_\00 */, "i8", ALLOC_NORMAL);
__str24141=allocate([117,110,98,111,117,110,100,101,100,32,114,101,97,100,32,114,101,116,117,114,110,101,100,32,109,111,114,101,32,98,121,116,101,115,32,116,104,97,110,32,97,32,80,121,116,104,111,110,32,115,116,114,105,110,103,32,99,97,110,32,104,111,108,100,32,0] /* unbounded read retur */, "i8", ALLOC_NORMAL);
__str25142=allocate([124,79,38,0] /* |O&\00 */, "i8", ALLOC_NORMAL);
__str26143=allocate([119,114,105,116,105,110,103,0] /* writing\00 */, "i8", ALLOC_NORMAL);
__str27144=allocate([115,42,0] /* s_\00 */, "i8", ALLOC_NORMAL);
__str28145=allocate([97,110,32,105,110,116,101,103,101,114,32,105,115,32,114,101,113,117,105,114,101,100,0] /* an integer is requir */, "i8", ALLOC_NORMAL);
__str29146=allocate([79,124,105,0] /* O|i\00 */, "i8", ALLOC_NORMAL);
__str30147=allocate([124,79,0] /* |O\00 */, "i8", ALLOC_NORMAL);
__str31148=allocate([114,98,43,0] /* rb+\00 */, "i8", ALLOC_NORMAL);
__str32149=allocate([114,98,0] /* rb\00 */, "i8", ALLOC_NORMAL);
__str33150=allocate([119,98,0] /* wb\00 */, "i8", ALLOC_NORMAL);
__str34151=allocate([60,95,105,111,46,70,105,108,101,73,79,32,91,99,108,111,115,101,100,93,62,0] /* <_io.FileIO [closed] */, "i8", ALLOC_NORMAL);
__str35152=allocate([60,95,105,111,46,70,105,108,101,73,79,32,102,100,61,37,100,32,109,111,100,101,61,39,37,115,39,62,0] /* <_io.FileIO fd=%d mo */, "i8", ALLOC_NORMAL);
__str36153=allocate([60,95,105,111,46,70,105,108,101,73,79,32,110,97,109,101,61,37,115,32,109,111,100,101,61,39,37,115,39,62,0] /* <_io.FileIO name=%s  */, "i8", ALLOC_NORMAL);
_fileio_doc=allocate([102,105,108,101,40,110,97,109,101,58,32,115,116,114,91,44,32,109,111,100,101,58,32,115,116,114,93,41,32,45,62,32,102,105,108,101,32,73,79,32,111,98,106,101,99,116,10,10,79,112,101,110,32,97,32,102,105,108,101,46,32,32,84,104,101,32,109,111,100,101,32,99,97,110,32,98,101,32,39,114,39,44,32,39,119,39,32,111,114,32,39,97,39,32,102,111,114,32,114,101,97,100,105,110,103,32,40,100,101,102,97,117,108,116,41,44,10,119,114,105,116,105,110,103,32,111,114,32,97,112,112,101,110,100,105,110,103,46,32,32,84,104,101,32,102,105,108,101,32,119,105,108,108,32,98,101,32,99,114,101,97,116,101,100,32,105,102,32,105,116,32,100,111,101,115,110,39,116,32,101,120,105,115,116,10,119,104,101,110,32,111,112,101,110,101,100,32,102,111,114,32,119,114,105,116,105,110,103,32,111,114,32,97,112,112,101,110,100,105,110,103,59,32,105,116,32,119,105,108,108,32,98,101,32,116,114,117,110,99,97,116,101,100,32,119,104,101,110,10,111,112,101,110,101,100,32,102,111,114,32,119,114,105,116,105,110,103,46,32,32,65,100,100,32,97,32,39,43,39,32,116,111,32,116,104,101,32,109,111,100,101,32,116,111,32,97,108,108,111,119,32,115,105,109,117,108,116,97,110,101,111,117,115,10,114,101,97,100,105,110,103,32,97,110,100,32,119,114,105,116,105,110,103,46,0] /* file(name: str[, mod */, "i8", ALLOC_NORMAL);
_read_doc154=allocate([114,101,97,100,40,115,105,122,101,58,32,105,110,116,41,32,45,62,32,98,121,116,101,115,46,32,32,114,101,97,100,32,97,116,32,109,111,115,116,32,115,105,122,101,32,98,121,116,101,115,44,32,114,101,116,117,114,110,101,100,32,97,115,32,98,121,116,101,115,46,10,10,79,110,108,121,32,109,97,107,101,115,32,111,110,101,32,115,121,115,116,101,109,32,99,97,108,108,44,32,115,111,32,108,101,115,115,32,100,97,116,97,32,109,97,121,32,98,101,32,114,101,116,117,114,110,101,100,32,116,104,97,110,32,114,101,113,117,101,115,116,101,100,10,73,110,32,110,111,110,45,98,108,111,99,107,105,110,103,32,109,111,100,101,44,32,114,101,116,117,114,110,115,32,78,111,110,101,32,105,102,32,110,111,32,100,97,116,97,32,105,115,32,97,118,97,105,108,97,98,108,101,46,10,79,110,32,101,110,100,45,111,102,45,102,105,108,101,44,32,114,101,116,117,114,110,115,32,39,39,46,0] /* read(size: int) -> b */, "i8", ALLOC_NORMAL);
_readall_doc=allocate([114,101,97,100,97,108,108,40,41,32,45,62,32,98,121,116,101,115,46,32,32,114,101,97,100,32,97,108,108,32,100,97,116,97,32,102,114,111,109,32,116,104,101,32,102,105,108,101,44,32,114,101,116,117,114,110,101,100,32,97,115,32,98,121,116,101,115,46,10,10,73,110,32,110,111,110,45,98,108,111,99,107,105,110,103,32,109,111,100,101,44,32,114,101,116,117,114,110,115,32,97,115,32,109,117,99,104,32,97,115,32,105,115,32,105,109,109,101,100,105,97,116,101,108,121,32,97,118,97,105,108,97,98,108,101,44,10,111,114,32,78,111,110,101,32,105,102,32,110,111,32,100,97,116,97,32,105,115,32,97,118,97,105,108,97,98,108,101,46,32,32,79,110,32,101,110,100,45,111,102,45,102,105,108,101,44,32,114,101,116,117,114,110,115,32,39,39,46,0] /* readall() -> bytes.  */, "i8", ALLOC_NORMAL);
_write_doc155=allocate([119,114,105,116,101,40,98,58,32,98,121,116,101,115,41,32,45,62,32,105,110,116,46,32,32,87,114,105,116,101,32,98,121,116,101,115,32,98,32,116,111,32,102,105,108,101,44,32,114,101,116,117,114,110,32,110,117,109,98,101,114,32,119,114,105,116,116,101,110,46,10,10,79,110,108,121,32,109,97,107,101,115,32,111,110,101,32,115,121,115,116,101,109,32,99,97,108,108,44,32,115,111,32,110,111,116,32,97,108,108,32,111,102,32,116,104,101,32,100,97,116,97,32,109,97,121,32,98,101,32,119,114,105,116,116,101,110,46,10,84,104,101,32,110,117,109,98,101,114,32,111,102,32,98,121,116,101,115,32,97,99,116,117,97,108,108,121,32,119,114,105,116,116,101,110,32,105,115,32,114,101,116,117,114,110,101,100,46,0] /* write(b: bytes) -> i */, "i8", ALLOC_NORMAL);
_fileno_doc=allocate([102,105,108,101,110,111,40,41,32,45,62,32,105,110,116,46,32,34,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,34,46,10,10,84,104,105,115,32,105,115,32,110,101,101,100,101,100,32,102,111,114,32,108,111,119,101,114,45,108,101,118,101,108,32,102,105,108,101,32,105,110,116,101,114,102,97,99,101,115,44,32,115,117,99,104,32,116,104,101,32,102,99,110,116,108,32,109,111,100,117,108,101,46,0] /* fileno() -> int. \22 */, "i8", ALLOC_NORMAL);
_seek_doc156=allocate([115,101,101,107,40,111,102,102,115,101,116,58,32,105,110,116,91,44,32,119,104,101,110,99,101,58,32,105,110,116,93,41,32,45,62,32,78,111,110,101,46,32,32,77,111,118,101,32,116,111,32,110,101,119,32,102,105,108,101,32,112,111,115,105,116,105,111,110,46,10,10,65,114,103,117,109,101,110,116,32,111,102,102,115,101,116,32,105,115,32,97,32,98,121,116,101,32,99,111,117,110,116,46,32,32,79,112,116,105,111,110,97,108,32,97,114,103,117,109,101,110,116,32,119,104,101,110,99,101,32,100,101,102,97,117,108,116,115,32,116,111,10,48,32,40,111,102,102,115,101,116,32,102,114,111,109,32,115,116,97,114,116,32,111,102,32,102,105,108,101,44,32,111,102,102,115,101,116,32,115,104,111,117,108,100,32,98,101,32,62,61,32,48,41,59,32,111,116,104,101,114,32,118,97,108,117,101,115,32,97,114,101,32,49,10,40,109,111,118,101,32,114,101,108,97,116,105,118,101,32,116,111,32,99,117,114,114,101,110,116,32,112,111,115,105,116,105,111,110,44,32,112,111,115,105,116,105,118,101,32,111,114,32,110,101,103,97,116,105,118,101,41,44,32,97,110,100,32,50,32,40,109,111,118,101,10,114,101,108,97,116,105,118,101,32,116,111,32,101,110,100,32,111,102,32,102,105,108,101,44,32,117,115,117,97,108,108,121,32,110,101,103,97,116,105,118,101,44,32,97,108,116,104,111,117,103,104,32,109,97,110,121,32,112,108,97,116,102,111,114,109,115,32,97,108,108,111,119,10,115,101,101,107,105,110,103,32,98,101,121,111,110,100,32,116,104,101,32,101,110,100,32,111,102,32,97,32,102,105,108,101,41,46,10,78,111,116,101,32,116,104,97,116,32,110,111,116,32,97,108,108,32,102,105,108,101,32,111,98,106,101,99,116,115,32,97,114,101,32,115,101,101,107,97,98,108,101,46,0] /* seek(offset: int[, w */, "i8", ALLOC_NORMAL);
_truncate_doc157=allocate([116,114,117,110,99,97,116,101,40,91,115,105,122,101,58,32,105,110,116,93,41,32,45,62,32,78,111,110,101,46,32,32,84,114,117,110,99,97,116,101,32,116,104,101,32,102,105,108,101,32,116,111,32,97,116,32,109,111,115,116,32,115,105,122,101,32,98,121,116,101,115,46,10,10,83,105,122,101,32,100,101,102,97,117,108,116,115,32,116,111,32,116,104,101,32,99,117,114,114,101,110,116,32,102,105,108,101,32,112,111,115,105,116,105,111,110,44,32,97,115,32,114,101,116,117,114,110,101,100,32,98,121,32,116,101,108,108,40,41,46,84,104,101,32,99,117,114,114,101,110,116,32,102,105,108,101,32,112,111,115,105,116,105,111,110,32,105,115,32,99,104,97,110,103,101,100,32,116,111,32,116,104,101,32,118,97,108,117,101,32,111,102,32,115,105,122,101,46,0] /* truncate([size: int] */, "i8", ALLOC_NORMAL);
_tell_doc158=allocate([116,101,108,108,40,41,32,45,62,32,105,110,116,46,32,32,67,117,114,114,101,110,116,32,102,105,108,101,32,112,111,115,105,116,105,111,110,0] /* tell() -> int.  Curr */, "i8", ALLOC_NORMAL);
_readinto_doc159=allocate([114,101,97,100,105,110,116,111,40,41,32,45,62,32,83,97,109,101,32,97,115,32,82,97,119,73,79,66,97,115,101,46,114,101,97,100,105,110,116,111,40,41,46,0] /* readinto() -> Same a */, "i8", ALLOC_NORMAL);
_close_doc160=allocate([99,108,111,115,101,40,41,32,45,62,32,78,111,110,101,46,32,32,67,108,111,115,101,32,116,104,101,32,102,105,108,101,46,10,10,65,32,99,108,111,115,101,100,32,102,105,108,101,32,99,97,110,110,111,116,32,98,101,32,117,115,101,100,32,102,111,114,32,102,117,114,116,104,101,114,32,73,47,79,32,111,112,101,114,97,116,105,111,110,115,46,32,32,99,108,111,115,101,40,41,32,109,97,121,32,98,101,10,99,97,108,108,101,100,32,109,111,114,101,32,116,104,97,110,32,111,110,99,101,32,119,105,116,104,111,117,116,32,101,114,114,111,114,46,32,32,67,104,97,110,103,101,115,32,116,104,101,32,102,105,108,101,110,111,32,116,111,32,45,49,46,0] /* close() -> None.  Cl */, "i8", ALLOC_NORMAL);
_isatty_doc161=allocate([105,115,97,116,116,121,40,41,32,45,62,32,98,111,111,108,46,32,32,84,114,117,101,32,105,102,32,116,104,101,32,102,105,108,101,32,105,115,32,99,111,110,110,101,99,116,101,100,32,116,111,32,97,32,116,116,121,32,100,101,118,105,99,101,46,0] /* isatty() -> bool.  T */, "i8", ALLOC_NORMAL);
_seekable_doc=allocate([115,101,101,107,97,98,108,101,40,41,32,45,62,32,98,111,111,108,46,32,32,84,114,117,101,32,105,102,32,102,105,108,101,32,115,117,112,112,111,114,116,115,32,114,97,110,100,111,109,45,97,99,99,101,115,115,46,0] /* seekable() -> bool.  */, "i8", ALLOC_NORMAL);
_readable_doc=allocate([114,101,97,100,97,98,108,101,40,41,32,45,62,32,98,111,111,108,46,32,32,84,114,117,101,32,105,102,32,102,105,108,101,32,119,97,115,32,111,112,101,110,101,100,32,105,110,32,97,32,114,101,97,100,32,109,111,100,101,46,0] /* readable() -> bool.  */, "i8", ALLOC_NORMAL);
_writable_doc=allocate([119,114,105,116,97,98,108,101,40,41,32,45,62,32,98,111,111,108,46,32,32,84,114,117,101,32,105,102,32,102,105,108,101,32,119,97,115,32,111,112,101,110,101,100,32,105,110,32,97,32,119,114,105,116,101,32,109,111,100,101,46,0] /* writable() -> bool.  */, "i8", ALLOC_NORMAL);
__str37162=allocate([114,101,97,100,0] /* read\00 */, "i8", ALLOC_NORMAL);
__str38163=allocate([114,101,97,100,97,108,108,0] /* readall\00 */, "i8", ALLOC_NORMAL);
__str39164=allocate([114,101,97,100,105,110,116,111,0] /* readinto\00 */, "i8", ALLOC_NORMAL);
__str40165=allocate([119,114,105,116,101,0] /* write\00 */, "i8", ALLOC_NORMAL);
__str41166=allocate([115,101,101,107,0] /* seek\00 */, "i8", ALLOC_NORMAL);
__str42167=allocate([116,101,108,108,0] /* tell\00 */, "i8", ALLOC_NORMAL);
__str43168=allocate([116,114,117,110,99,97,116,101,0] /* truncate\00 */, "i8", ALLOC_NORMAL);
__str44169=allocate([115,101,101,107,97,98,108,101,0] /* seekable\00 */, "i8", ALLOC_NORMAL);
__str45170=allocate([114,101,97,100,97,98,108,101,0] /* readable\00 */, "i8", ALLOC_NORMAL);
__str46171=allocate([119,114,105,116,97,98,108,101,0] /* writable\00 */, "i8", ALLOC_NORMAL);
__str47172=allocate([102,105,108,101,110,111,0] /* fileno\00 */, "i8", ALLOC_NORMAL);
__str48173=allocate([105,115,97,116,116,121,0] /* isatty\00 */, "i8", ALLOC_NORMAL);
_fileio_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str49174=allocate([99,108,111,115,101,100,0] /* closed\00 */, "i8", ALLOC_NORMAL);
__str50175=allocate([84,114,117,101,32,105,102,32,116,104,101,32,102,105,108,101,32,105,115,32,99,108,111,115,101,100,0] /* True if the file is  */, "i8", ALLOC_NORMAL);
__str51176=allocate([84,114,117,101,32,105,102,32,116,104,101,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,119,105,108,108,32,98,101,32,99,108,111,115,101,100,0] /* True if the file des */, "i8", ALLOC_NORMAL);
__str52177=allocate([83,116,114,105,110,103,32,103,105,118,105,110,103,32,116,104,101,32,102,105,108,101,32,109,111,100,101,0] /* String giving the fi */, "i8", ALLOC_NORMAL);
_fileio_getsetlist=allocate(80, ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str53178=allocate([95,105,111,46,70,105,108,101,73,79,0] /* _io.FileIO\00 */, "i8", ALLOC_NORMAL);
_PyFileIO_Type=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"void (i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_iobase_doc=allocate([84,104,101,32,97,98,115,116,114,97,99,116,32,98,97,115,101,32,99,108,97,115,115,32,102,111,114,32,97,108,108,32,73,47,79,32,99,108,97,115,115,101,115,44,32,97,99,116,105,110,103,32,111,110,32,115,116,114,101,97,109,115,32,111,102,10,98,121,116,101,115,46,32,84,104,101,114,101,32,105,115,32,110,111,32,112,117,98,108,105,99,32,99,111,110,115,116,114,117,99,116,111,114,46,10,10,84,104,105,115,32,99,108,97,115,115,32,112,114,111,118,105,100,101,115,32,100,117,109,109,121,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,115,32,102,111,114,32,109,97,110,121,32,109,101,116,104,111,100,115,32,116,104,97,116,10,100,101,114,105,118,101,100,32,99,108,97,115,115,101,115,32,99,97,110,32,111,118,101,114,114,105,100,101,32,115,101,108,101,99,116,105,118,101,108,121,59,32,116,104,101,32,100,101,102,97,117,108,116,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,115,10,114,101,112,114,101,115,101,110,116,32,97,32,102,105,108,101,32,116,104,97,116,32,99,97,110,110,111,116,32,98,101,32,114,101,97,100,44,32,119,114,105,116,116,101,110,32,111,114,32,115,101,101,107,101,100,46,10,10,69,118,101,110,32,116,104,111,117,103,104,32,73,79,66,97,115,101,32,100,111,101,115,32,110,111,116,32,100,101,99,108,97,114,101,32,114,101,97,100,44,32,114,101,97,100,105,110,116,111,44,32,111,114,32,119,114,105,116,101,32,98,101,99,97,117,115,101,10,116,104,101,105,114,32,115,105,103,110,97,116,117,114,101,115,32,119,105,108,108,32,118,97,114,121,44,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,115,32,97,110,100,32,99,108,105,101,110,116,115,32,115,104,111,117,108,100,10,99,111,110,115,105,100,101,114,32,116,104,111,115,101,32,109,101,116,104,111,100,115,32,112,97,114,116,32,111,102,32,116,104,101,32,105,110,116,101,114,102,97,99,101,46,32,65,108,115,111,44,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,115,10,109,97,121,32,114,97,105,115,101,32,97,32,73,79,69,114,114,111,114,32,119,104,101,110,32,111,112,101,114,97,116,105,111,110,115,32,116,104,101,121,32,100,111,32,110,111,116,32,115,117,112,112,111,114,116,32,97,114,101,32,99,97,108,108,101,100,46,10,10,84,104,101,32,98,97,115,105,99,32,116,121,112,101,32,117,115,101,100,32,102,111,114,32,98,105,110,97,114,121,32,100,97,116,97,32,114,101,97,100,32,102,114,111,109,32,111,114,32,119,114,105,116,116,101,110,32,116,111,32,97,32,102,105,108,101,32,105,115,10,98,121,116,101,115,46,32,98,121,116,101,97,114,114,97,121,115,32,97,114,101,32,97,99,99,101,112,116,101,100,32,116,111,111,44,32,97,110,100,32,105,110,32,115,111,109,101,32,99,97,115,101,115,32,40,115,117,99,104,32,97,115,10,114,101,97,100,105,110,116,111,41,32,110,101,101,100,101,100,46,32,84,101,120,116,32,73,47,79,32,99,108,97,115,115,101,115,32,119,111,114,107,32,119,105,116,104,32,115,116,114,32,100,97,116,97,46,10,10,78,111,116,101,32,116,104,97,116,32,99,97,108,108,105,110,103,32,97,110,121,32,109,101,116,104,111,100,32,40,101,118,101,110,32,105,110,113,117,105,114,105,101,115,41,32,111,110,32,97,32,99,108,111,115,101,100,32,115,116,114,101,97,109,32,105,115,10,117,110,100,101,102,105,110,101,100,46,32,73,109,112,108,101,109,101,110,116,97,116,105,111,110,115,32,109,97,121,32,114,97,105,115,101,32,73,79,69,114,114,111,114,32,105,110,32,116,104,105,115,32,99,97,115,101,46,10,10,73,79,66,97,115,101,32,40,97,110,100,32,105,116,115,32,115,117,98,99,108,97,115,115,101,115,41,32,115,117,112,112,111,114,116,32,116,104,101,32,105,116,101,114,97,116,111,114,32,112,114,111,116,111,99,111,108,44,32,109,101,97,110,105,110,103,10,116,104,97,116,32,97,110,32,73,79,66,97,115,101,32,111,98,106,101,99,116,32,99,97,110,32,98,101,32,105,116,101,114,97,116,101,100,32,111,118,101,114,32,121,105,101,108,100,105,110,103,32,116,104,101,32,108,105,110,101,115,32,105,110,32,97,10,115,116,114,101,97,109,46,10,10,73,79,66,97,115,101,32,97,108,115,111,32,115,117,112,112,111,114,116,115,32,116,104,101,32,58,107,101,121,119,111,114,100,58,96,119,105,116,104,96,32,115,116,97,116,101,109,101,110,116,46,32,73,110,32,116,104,105,115,32,101,120,97,109,112,108,101,44,10,102,112,32,105,115,32,99,108,111,115,101,100,32,97,102,116,101,114,32,116,104,101,32,115,117,105,116,101,32,111,102,32,116,104,101,32,119,105,116,104,32,115,116,97,116,101,109,101,110,116,32,105,115,32,99,111,109,112,108,101,116,101,58,10,10,119,105,116,104,32,111,112,101,110,40,39,115,112,97,109,46,116,120,116,39,44,32,39,114,39,41,32,97,115,32,102,112,58,10,32,32,32,32,102,112,46,119,114,105,116,101,40,39,83,112,97,109,32,97,110,100,32,101,103,103,115,33,39,41,10,0] /* The abstract base cl */, "i8", ALLOC_NORMAL);
_iobase_seek_doc=allocate([67,104,97,110,103,101,32,115,116,114,101,97,109,32,112,111,115,105,116,105,111,110,46,10,10,67,104,97,110,103,101,32,116,104,101,32,115,116,114,101,97,109,32,112,111,115,105,116,105,111,110,32,116,111,32,98,121,116,101,32,111,102,102,115,101,116,32,111,102,102,115,101,116,46,32,111,102,102,115,101,116,32,105,115,10,105,110,116,101,114,112,114,101,116,101,100,32,114,101,108,97,116,105,118,101,32,116,111,32,116,104,101,32,112,111,115,105,116,105,111,110,32,105,110,100,105,99,97,116,101,100,32,98,121,32,119,104,101,110,99,101,46,32,32,86,97,108,117,101,115,10,102,111,114,32,119,104,101,110,99,101,32,97,114,101,58,10,10,42,32,48,32,45,45,32,115,116,97,114,116,32,111,102,32,115,116,114,101,97,109,32,40,116,104,101,32,100,101,102,97,117,108,116,41,59,32,111,102,102,115,101,116,32,115,104,111,117,108,100,32,98,101,32,122,101,114,111,32,111,114,32,112,111,115,105,116,105,118,101,10,42,32,49,32,45,45,32,99,117,114,114,101,110,116,32,115,116,114,101,97,109,32,112,111,115,105,116,105,111,110,59,32,111,102,102,115,101,116,32,109,97,121,32,98,101,32,110,101,103,97,116,105,118,101,10,42,32,50,32,45,45,32,101,110,100,32,111,102,32,115,116,114,101,97,109,59,32,111,102,102,115,101,116,32,105,115,32,117,115,117,97,108,108,121,32,110,101,103,97,116,105,118,101,10,10,82,101,116,117,114,110,32,116,104,101,32,110,101,119,32,97,98,115,111,108,117,116,101,32,112,111,115,105,116,105,111,110,46,0] /* Change stream positi */, "i8", ALLOC_NORMAL);
__str181=allocate([115,101,101,107,0] /* seek\00 */, "i8", ALLOC_NORMAL);
_iobase_tell_doc=allocate([82,101,116,117,114,110,32,99,117,114,114,101,110,116,32,115,116,114,101,97,109,32,112,111,115,105,116,105,111,110,46,0] /* Return current strea */, "i8", ALLOC_NORMAL);
__str1182=allocate([105,105,0] /* ii\00 */, "i8", ALLOC_NORMAL);
_iobase_truncate_doc=allocate([84,114,117,110,99,97,116,101,32,102,105,108,101,32,116,111,32,115,105,122,101,32,98,121,116,101,115,46,10,10,70,105,108,101,32,112,111,105,110,116,101,114,32,105,115,32,108,101,102,116,32,117,110,99,104,97,110,103,101,100,46,32,32,83,105,122,101,32,100,101,102,97,117,108,116,115,32,116,111,32,116,104,101,32,99,117,114,114,101,110,116,32,73,79,10,112,111,115,105,116,105,111,110,32,97,115,32,114,101,112,111,114,116,101,100,32,98,121,32,116,101,108,108,40,41,46,32,32,82,101,116,117,114,110,115,32,116,104,101,32,110,101,119,32,115,105,122,101,46,0] /* Truncate file to siz */, "i8", ALLOC_NORMAL);
__str2183=allocate([116,114,117,110,99,97,116,101,0] /* truncate\00 */, "i8", ALLOC_NORMAL);
_iobase_flush_doc=allocate([70,108,117,115,104,32,119,114,105,116,101,32,98,117,102,102,101,114,115,44,32,105,102,32,97,112,112,108,105,99,97,98,108,101,46,10,10,84,104,105,115,32,105,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,102,111,114,32,114,101,97,100,45,111,110,108,121,32,97,110,100,32,110,111,110,45,98,108,111,99,107,105,110,103,32,115,116,114,101,97,109,115,46,10,0] /* Flush write buffers, */, "i8", ALLOC_NORMAL);
__str3184=allocate([95,95,73,79,66,97,115,101,95,99,108,111,115,101,100,0] /* __IOBase_closed\00 */, "i8", ALLOC_NORMAL);
__str4185=allocate([73,47,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,99,108,111,115,101,100,32,102,105,108,101,46,0] /* I/O operation on clo */, "i8", ALLOC_NORMAL);
_iobase_close_doc=allocate([70,108,117,115,104,32,97,110,100,32,99,108,111,115,101,32,116,104,101,32,73,79,32,111,98,106,101,99,116,46,10,10,84,104,105,115,32,109,101,116,104,111,100,32,104,97,115,32,110,111,32,101,102,102,101,99,116,32,105,102,32,116,104,101,32,102,105,108,101,32,105,115,32,97,108,114,101,97,100,121,32,99,108,111,115,101,100,46,10,0] /* Flush and close the  */, "i8", ALLOC_NORMAL);
__str5186=allocate([103,45,62,103,99,46,103,99,95,114,101,102,115,32,33,61,32,40,45,50,41,0] /* g->gc.gc_refs != (-2 */, "i8", ALLOC_NORMAL);
__str6187=allocate([46,46,47,99,112,121,116,104,111,110,47,77,111,100,117,108,101,115,47,95,105,111,47,105,111,98,97,115,101,46,99,0] /* ../cpython/Modules/_ */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8634=allocate([105,111,98,97,115,101,95,100,101,97,108,108,111,99,0] /* iobase_dealloc\00 */, "i8", ALLOC_NORMAL);
_iobase_seekable_doc=allocate([82,101,116,117,114,110,32,119,104,101,116,104,101,114,32,111,98,106,101,99,116,32,115,117,112,112,111,114,116,115,32,114,97,110,100,111,109,32,97,99,99,101,115,115,46,10,10,73,102,32,70,97,108,115,101,44,32,115,101,101,107,40,41,44,32,116,101,108,108,40,41,32,97,110,100,32,116,114,117,110,99,97,116,101,40,41,32,119,105,108,108,32,114,97,105,115,101,32,73,79,69,114,114,111,114,46,10,84,104,105,115,32,109,101,116,104,111,100,32,109,97,121,32,110,101,101,100,32,116,111,32,100,111,32,97,32,116,101,115,116,32,115,101,101,107,40,41,46,0] /* Return whether objec */, "i8", ALLOC_NORMAL);
__str7188=allocate([70,105,108,101,32,111,114,32,115,116,114,101,97,109,32,105,115,32,110,111,116,32,115,101,101,107,97,98,108,101,46,0] /* File or stream is no */, "i8", ALLOC_NORMAL);
_iobase_readable_doc=allocate([82,101,116,117,114,110,32,119,104,101,116,104,101,114,32,111,98,106,101,99,116,32,119,97,115,32,111,112,101,110,101,100,32,102,111,114,32,114,101,97,100,105,110,103,46,10,10,73,102,32,70,97,108,115,101,44,32,114,101,97,100,40,41,32,119,105,108,108,32,114,97,105,115,101,32,73,79,69,114,114,111,114,46,0] /* Return whether objec */, "i8", ALLOC_NORMAL);
__str8189=allocate([70,105,108,101,32,111,114,32,115,116,114,101,97,109,32,105,115,32,110,111,116,32,114,101,97,100,97,98,108,101,46,0] /* File or stream is no */, "i8", ALLOC_NORMAL);
_iobase_writable_doc=allocate([82,101,116,117,114,110,32,119,104,101,116,104,101,114,32,111,98,106,101,99,116,32,119,97,115,32,111,112,101,110,101,100,32,102,111,114,32,119,114,105,116,105,110,103,46,10,10,73,102,32,70,97,108,115,101,44,32,114,101,97,100,40,41,32,119,105,108,108,32,114,97,105,115,101,32,73,79,69,114,114,111,114,46,0] /* Return whether objec */, "i8", ALLOC_NORMAL);
__str9190=allocate([70,105,108,101,32,111,114,32,115,116,114,101,97,109,32,105,115,32,110,111,116,32,119,114,105,116,97,98,108,101,46,0] /* File or stream is no */, "i8", ALLOC_NORMAL);
_iobase_fileno_doc=allocate([82,101,116,117,114,110,115,32,117,110,100,101,114,108,121,105,110,103,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,102,32,111,110,101,32,101,120,105,115,116,115,46,10,10,65,110,32,73,79,69,114,114,111,114,32,105,115,32,114,97,105,115,101,100,32,105,102,32,116,104,101,32,73,79,32,111,98,106,101,99,116,32,100,111,101,115,32,110,111,116,32,117,115,101,32,97,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,46,10,0] /* Returns underlying f */, "i8", ALLOC_NORMAL);
__str10191=allocate([102,105,108,101,110,111,0] /* fileno\00 */, "i8", ALLOC_NORMAL);
_iobase_isatty_doc=allocate([82,101,116,117,114,110,32,119,104,101,116,104,101,114,32,116,104,105,115,32,105,115,32,97,110,32,39,105,110,116,101,114,97,99,116,105,118,101,39,32,115,116,114,101,97,109,46,10,10,82,101,116,117,114,110,32,70,97,108,115,101,32,105,102,32,105,116,32,99,97,110,39,116,32,98,101,32,100,101,116,101,114,109,105,110,101,100,46,10,0] /* Return whether this  */, "i8", ALLOC_NORMAL);
_iobase_readline_doc=allocate([82,101,97,100,32,97,110,100,32,114,101,116,117,114,110,32,97,32,108,105,110,101,32,102,114,111,109,32,116,104,101,32,115,116,114,101,97,109,46,10,10,73,102,32,108,105,109,105,116,32,105,115,32,115,112,101,99,105,102,105,101,100,44,32,97,116,32,109,111,115,116,32,108,105,109,105,116,32,98,121,116,101,115,32,119,105,108,108,32,98,101,32,114,101,97,100,46,10,10,84,104,101,32,108,105,110,101,32,116,101,114,109,105,110,97,116,111,114,32,105,115,32,97,108,119,97,121,115,32,98,39,10,39,32,102,111,114,32,98,105,110,97,114,121,32,102,105,108,101,115,59,32,102,111,114,32,116,101,120,116,10,102,105,108,101,115,44,32,116,104,101,32,110,101,119,108,105,110,101,115,32,97,114,103,117,109,101,110,116,32,116,111,32,111,112,101,110,32,99,97,110,32,98,101,32,117,115,101,100,32,116,111,32,115,101,108,101,99,116,32,116,104,101,32,108,105,110,101,10,116,101,114,109,105,110,97,116,111,114,40,115,41,32,114,101,99,111,103,110,105,122,101,100,46,10,0] /* Read and return a li */, "i8", ALLOC_NORMAL);
__str11192=allocate([124,79,38,58,114,101,97,100,108,105,110,101,0] /* |O&:readline\00 */, "i8", ALLOC_NORMAL);
__str12193=allocate([112,101,101,107,0] /* peek\00 */, "i8", ALLOC_NORMAL);
__str13194=allocate([105,0] /* i\00 */, "i8", ALLOC_NORMAL);
__str14195=allocate([112,101,101,107,40,41,32,115,104,111,117,108,100,32,104,97,118,101,32,114,101,116,117,114,110,101,100,32,97,32,98,121,116,101,115,32,111,98,106,101,99,116,44,32,110,111,116,32,39,37,46,50,48,48,115,39,0] /* peek() should have r */, "i8", ALLOC_NORMAL);
__str15196=allocate([114,101,97,100,0] /* read\00 */, "i8", ALLOC_NORMAL);
__str16197=allocate([110,0] /* n\00 */, "i8", ALLOC_NORMAL);
__str17198=allocate([114,101,97,100,40,41,32,115,104,111,117,108,100,32,104,97,118,101,32,114,101,116,117,114,110,101,100,32,97,32,98,121,116,101,115,32,111,98,106,101,99,116,44,32,110,111,116,32,39,37,46,50,48,48,115,39,0] /* read() should have r */, "i8", ALLOC_NORMAL);
__str18199=allocate([40,40,40,40,80,121,79,98,106,101,99,116,42,41,40,98,117,102,102,101,114,41,41,45,62,111,98,95,116,121,112,101,41,32,61,61,32,40,38,80,121,66,121,116,101,65,114,114,97,121,95,84,121,112,101,41,32,124,124,32,80,121,84,121,112,101,95,73,115,83,117,98,116,121,112,101,40,40,40,40,80,121,79,98,106,101,99,116,42,41,40,98,117,102,102,101,114,41,41,45,62,111,98,95,116,121,112,101,41,44,32,40,38,80,121,66,121,116,101,65,114,114,97,121,95,84,121,112,101,41,41,41,0] /* ((((PyObject_)(buffe */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8875=allocate([105,111,98,97,115,101,95,114,101,97,100,108,105,110,101,0] /* iobase_readline\00 */, "i8", ALLOC_NORMAL);
_iobase_readlines_doc=allocate([82,101,116,117,114,110,32,97,32,108,105,115,116,32,111,102,32,108,105,110,101,115,32,102,114,111,109,32,116,104,101,32,115,116,114,101,97,109,46,10,10,104,105,110,116,32,99,97,110,32,98,101,32,115,112,101,99,105,102,105,101,100,32,116,111,32,99,111,110,116,114,111,108,32,116,104,101,32,110,117,109,98,101,114,32,111,102,32,108,105,110,101,115,32,114,101,97,100,58,32,110,111,32,109,111,114,101,10,108,105,110,101,115,32,119,105,108,108,32,98,101,32,114,101,97,100,32,105,102,32,116,104,101,32,116,111,116,97,108,32,115,105,122,101,32,40,105,110,32,98,121,116,101,115,47,99,104,97,114,97,99,116,101,114,115,41,32,111,102,32,97,108,108,10,108,105,110,101,115,32,115,111,32,102,97,114,32,101,120,99,101,101,100,115,32,104,105,110,116,46,0] /* Return a list of lin */, "i8", ALLOC_NORMAL);
__str19200=allocate([124,79,38,58,114,101,97,100,108,105,110,101,115,0] /* |O&:readlines\00 */, "i8", ALLOC_NORMAL);
__str20201=allocate([101,120,116,101,110,100,0] /* extend\00 */, "i8", ALLOC_NORMAL);
__str21202=allocate([79,0] /* O\00 */, "i8", ALLOC_NORMAL);
__str22203=allocate([79,58,119,114,105,116,101,108,105,110,101,115,0] /* O:writelines\00 */, "i8", ALLOC_NORMAL);
__str23204=allocate([116,101,108,108,0] /* tell\00 */, "i8", ALLOC_NORMAL);
__str24205=allocate([102,108,117,115,104,0] /* flush\00 */, "i8", ALLOC_NORMAL);
__str25206=allocate([99,108,111,115,101,0] /* close\00 */, "i8", ALLOC_NORMAL);
__str26207=allocate([115,101,101,107,97,98,108,101,0] /* seekable\00 */, "i8", ALLOC_NORMAL);
__str27208=allocate([114,101,97,100,97,98,108,101,0] /* readable\00 */, "i8", ALLOC_NORMAL);
__str28209=allocate([119,114,105,116,97,98,108,101,0] /* writable\00 */, "i8", ALLOC_NORMAL);
__str29210=allocate([95,99,104,101,99,107,67,108,111,115,101,100,0] /* _checkClosed\00 */, "i8", ALLOC_NORMAL);
__str30211=allocate([95,99,104,101,99,107,83,101,101,107,97,98,108,101,0] /* _checkSeekable\00 */, "i8", ALLOC_NORMAL);
__str31212=allocate([95,99,104,101,99,107,82,101,97,100,97,98,108,101,0] /* _checkReadable\00 */, "i8", ALLOC_NORMAL);
__str32213=allocate([95,99,104,101,99,107,87,114,105,116,97,98,108,101,0] /* _checkWritable\00 */, "i8", ALLOC_NORMAL);
__str33214=allocate([105,115,97,116,116,121,0] /* isatty\00 */, "i8", ALLOC_NORMAL);
__str34215=allocate([95,95,101,110,116,101,114,95,95,0] /* __enter__\00 */, "i8", ALLOC_NORMAL);
__str35216=allocate([95,95,101,120,105,116,95,95,0] /* __exit__\00 */, "i8", ALLOC_NORMAL);
__str36217=allocate([114,101,97,100,108,105,110,101,0] /* readline\00 */, "i8", ALLOC_NORMAL);
__str37218=allocate([114,101,97,100,108,105,110,101,115,0] /* readlines\00 */, "i8", ALLOC_NORMAL);
__str38219=allocate([119,114,105,116,101,108,105,110,101,115,0] /* writelines\00 */, "i8", ALLOC_NORMAL);
_iobase_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str39220=allocate([99,108,111,115,101,100,0] /* closed\00 */, "i8", ALLOC_NORMAL);
_iobase_getset=allocate(40, ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str40221=allocate([95,105,111,46,95,73,79,66,97,115,101,0] /* _io._IOBase\00 */, "i8", ALLOC_NORMAL);
_PyIOBase_Type=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_rawiobase_doc=allocate([66,97,115,101,32,99,108,97,115,115,32,102,111,114,32,114,97,119,32,98,105,110,97,114,121,32,73,47,79,46,0] /* Base class for raw b */, "i8", ALLOC_NORMAL);
__str41223=allocate([124,110,58,114,101,97,100,0] /* |n:read\00 */, "i8", ALLOC_NORMAL);
__str42224=allocate([114,101,97,100,97,108,108,0] /* readall\00 */, "i8", ALLOC_NORMAL);
_rawiobase_readall_doc=allocate([82,101,97,100,32,117,110,116,105,108,32,69,79,70,44,32,117,115,105,110,103,32,109,117,108,116,105,112,108,101,32,114,101,97,100,40,41,32,99,97,108,108,46,0] /* Read until EOF, usin */, "i8", ALLOC_NORMAL);
__str43225=allocate([114,101,97,100,40,41,32,115,104,111,117,108,100,32,114,101,116,117,114,110,32,98,121,116,101,115,0] /* read() should return */, "i8", ALLOC_NORMAL);
_rawiobase_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str44226=allocate([95,105,111,46,95,82,97,119,73,79,66,97,115,101,0] /* _io._RawIOBase\00 */, "i8", ALLOC_NORMAL);
_PyRawIOBase_Type=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132587, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_module_doc=allocate([84,104,101,32,105,111,32,109,111,100,117,108,101,32,112,114,111,118,105,100,101,115,32,116,104,101,32,80,121,116,104,111,110,32,105,110,116,101,114,102,97,99,101,115,32,116,111,32,115,116,114,101,97,109,32,104,97,110,100,108,105,110,103,46,32,84,104,101,10,98,117,105,108,116,105,110,32,111,112,101,110,32,102,117,110,99,116,105,111,110,32,105,115,32,100,101,102,105,110,101,100,32,105,110,32,116,104,105,115,32,109,111,100,117,108,101,46,10,10,65,116,32,116,104,101,32,116,111,112,32,111,102,32,116,104,101,32,73,47,79,32,104,105,101,114,97,114,99,104,121,32,105,115,32,116,104,101,32,97,98,115,116,114,97,99,116,32,98,97,115,101,32,99,108,97,115,115,32,73,79,66,97,115,101,46,32,73,116,10,100,101,102,105,110,101,115,32,116,104,101,32,98,97,115,105,99,32,105,110,116,101,114,102,97,99,101,32,116,111,32,97,32,115,116,114,101,97,109,46,32,78,111,116,101,44,32,104,111,119,101,118,101,114,44,32,116,104,97,116,32,116,104,101,114,101,32,105,115,32,110,111,10,115,101,112,101,114,97,116,105,111,110,32,98,101,116,119,101,101,110,32,114,101,97,100,105,110,103,32,97,110,100,32,119,114,105,116,105,110,103,32,116,111,32,115,116,114,101,97,109,115,59,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,115,32,97,114,101,10,97,108,108,111,119,101,100,32,116,111,32,116,104,114,111,119,32,97,110,32,73,79,69,114,114,111,114,32,105,102,32,116,104,101,121,32,100,111,32,110,111,116,32,115,117,112,112,111,114,116,32,97,32,103,105,118,101,110,32,111,112,101,114,97,116,105,111,110,46,10,10,69,120,116,101,110,100,105,110,103,32,73,79,66,97,115,101,32,105,115,32,82,97,119,73,79,66,97,115,101,32,119,104,105,99,104,32,100,101,97,108,115,32,115,105,109,112,108,121,32,119,105,116,104,32,116,104,101,32,114,101,97,100,105,110,103,32,97,110,100,10,119,114,105,116,105,110,103,32,111,102,32,114,97,119,32,98,121,116,101,115,32,116,111,32,97,32,115,116,114,101,97,109,46,32,70,105,108,101,73,79,32,115,117,98,99,108,97,115,115,101,115,32,82,97,119,73,79,66,97,115,101,32,116,111,32,112,114,111,118,105,100,101,10,97,110,32,105,110,116,101,114,102,97,99,101,32,116,111,32,79,83,32,102,105,108,101,115,46,10,10,66,117,102,102,101,114,101,100,73,79,66,97,115,101,32,100,101,97,108,115,32,119,105,116,104,32,98,117,102,102,101,114,105,110,103,32,111,110,32,97,32,114,97,119,32,98,121,116,101,32,115,116,114,101,97,109,32,40,82,97,119,73,79,66,97,115,101,41,46,32,73,116,115,10,115,117,98,99,108,97,115,115,101,115,44,32,66,117,102,102,101,114,101,100,87,114,105,116,101,114,44,32,66,117,102,102,101,114,101,100,82,101,97,100,101,114,44,32,97,110,100,32,66,117,102,102,101,114,101,100,82,87,80,97,105,114,32,98,117,102,102,101,114,10,115,116,114,101,97,109,115,32,116,104,97,116,32,97,114,101,32,114,101,97,100,97,98,108,101,44,32,119,114,105,116,97,98,108,101,44,32,97,110,100,32,98,111,116,104,32,114,101,115,112,101,99,116,105,118,101,108,121,46,10,66,117,102,102,101,114,101,100,82,97,110,100,111,109,32,112,114,111,118,105,100,101,115,32,97,32,98,117,102,102,101,114,101,100,32,105,110,116,101,114,102,97,99,101,32,116,111,32,114,97,110,100,111,109,32,97,99,99,101,115,115,10,115,116,114,101,97,109,115,46,32,66,121,116,101,115,73,79,32,105,115,32,97,32,115,105,109,112,108,101,32,115,116,114,101,97,109,32,111,102,32,105,110,45,109,101,109,111,114,121,32,98,121,116,101,115,46,10,10,65,110,111,116,104,101,114,32,73,79,66,97,115,101,32,115,117,98,99,108,97,115,115,44,32,84,101,120,116,73,79,66,97,115,101,44,32,100,101,97,108,115,32,119,105,116,104,32,116,104,101,32,101,110,99,111,100,105,110,103,32,97,110,100,32,100,101,99,111,100,105,110,103,10,111,102,32,115,116,114,101,97,109,115,32,105,110,116,111,32,116,101,120,116,46,32,84,101,120,116,73,79,87,114,97,112,112,101,114,44,32,119,104,105,99,104,32,101,120,116,101,110,100,115,32,105,116,44,32,105,115,32,97,32,98,117,102,102,101,114,101,100,32,116,101,120,116,10,105,110,116,101,114,102,97,99,101,32,116,111,32,97,32,98,117,102,102,101,114,101,100,32,114,97,119,32,115,116,114,101,97,109,32,40,96,66,117,102,102,101,114,101,100,73,79,66,97,115,101,96,41,46,32,70,105,110,97,108,108,121,44,32,83,116,114,105,110,103,73,79,10,105,115,32,97,32,105,110,45,109,101,109,111,114,121,32,115,116,114,101,97,109,32,102,111,114,32,116,101,120,116,46,10,10,65,114,103,117,109,101,110,116,32,110,97,109,101,115,32,97,114,101,32,110,111,116,32,112,97,114,116,32,111,102,32,116,104,101,32,115,112,101,99,105,102,105,99,97,116,105,111,110,44,32,97,110,100,32,111,110,108,121,32,116,104,101,32,97,114,103,117,109,101,110,116,115,10,111,102,32,111,112,101,110,40,41,32,97,114,101,32,105,110,116,101,110,100,101,100,32,116,111,32,98,101,32,117,115,101,100,32,97,115,32,107,101,121,119,111,114,100,32,97,114,103,117,109,101,110,116,115,46,10,10,100,97,116,97,58,10,10,68,69,70,65,85,76,84,95,66,85,70,70,69,82,95,83,73,90,69,10,10,32,32,32,65,110,32,105,110,116,32,99,111,110,116,97,105,110,105,110,103,32,116,104,101,32,100,101,102,97,117,108,116,32,98,117,102,102,101,114,32,115,105,122,101,32,117,115,101,100,32,98,121,32,116,104,101,32,109,111,100,117,108,101,39,115,32,98,117,102,102,101,114,101,100,10,32,32,32,73,47,79,32,99,108,97,115,115,101,115,46,32,111,112,101,110,40,41,32,117,115,101,115,32,116,104,101,32,102,105,108,101,39,115,32,98,108,107,115,105,122,101,32,40,97,115,32,111,98,116,97,105,110,101,100,32,98,121,32,111,115,46,115,116,97,116,41,32,105,102,10,32,32,32,112,111,115,115,105,98,108,101,46,10,0] /* The io module provid */, "i8", ALLOC_NORMAL);
__str232=allocate([40,40,40,40,40,40,80,121,79,98,106,101,99,116,42,41,40,97,114,103,115,41,41,45,62,111,98,95,116,121,112,101,41,41,45,62,116,112,95,102,108,97,103,115,32,38,32,40,40,49,76,60,60,50,54,41,41,41,32,33,61,32,48,41,0] /* ((((((PyObject_)(arg */, "i8", ALLOC_NORMAL);
__str1233=allocate([46,46,47,99,112,121,116,104,111,110,47,77,111,100,117,108,101,115,47,95,105,111,47,95,105,111,109,111,100,117,108,101,46,99,0] /* ../cpython/Modules/_ */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8454=allocate([98,108,111,99,107,105,110,103,105,111,101,114,114,111,114,95,105,110,105,116,0] /* blockingioerror_init */, "i8", ALLOC_NORMAL);
__str2234=allocate([79,79,124,110,58,66,108,111,99,107,105,110,103,73,79,69,114,114,111,114,0] /* OO|n:BlockingIOError */, "i8", ALLOC_NORMAL);
__str3235=allocate([99,104,97,114,97,99,116,101,114,115,95,119,114,105,116,116,101,110,0] /* characters_written\0 */, "i8", ALLOC_NORMAL);
_blockingioerror_members=allocate([0, 0, 0, 0, 19, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str4236=allocate([66,108,111,99,107,105,110,103,73,79,69,114,114,111,114,0] /* BlockingIOError\00 */, "i8", ALLOC_NORMAL);
__str5237=allocate([69,120,99,101,112,116,105,111,110,32,114,97,105,115,101,100,32,119,104,101,110,32,73,47,79,32,119,111,117,108,100,32,98,108,111,99,107,32,111,110,32,97,32,110,111,110,45,98,108,111,99,107,105,110,103,32,73,47,79,32,115,116,114,101,97,109,0] /* Exception raised whe */, "i8", ALLOC_NORMAL);
__PyExc_BlockingIOError=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132587, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_PyExc_BlockingIOError=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
_open_doc=allocate([79,112,101,110,32,102,105,108,101,32,97,110,100,32,114,101,116,117,114,110,32,97,32,115,116,114,101,97,109,46,32,32,82,97,105,115,101,32,73,79,69,114,114,111,114,32,117,112,111,110,32,102,97,105,108,117,114,101,46,10,10,102,105,108,101,32,105,115,32,101,105,116,104,101,114,32,97,32,116,101,120,116,32,111,114,32,98,121,116,101,32,115,116,114,105,110,103,32,103,105,118,105,110,103,32,116,104,101,32,110,97,109,101,32,40,97,110,100,32,116,104,101,32,112,97,116,104,10,105,102,32,116,104,101,32,102,105,108,101,32,105,115,110,39,116,32,105,110,32,116,104,101,32,99,117,114,114,101,110,116,32,119,111,114,107,105,110,103,32,100,105,114,101,99,116,111,114,121,41,32,111,102,32,116,104,101,32,102,105,108,101,32,116,111,10,98,101,32,111,112,101,110,101,100,32,111,114,32,97,110,32,105,110,116,101,103,101,114,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,111,102,32,116,104,101,32,102,105,108,101,32,116,111,32,98,101,10,119,114,97,112,112,101,100,46,32,40,73,102,32,97,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,115,32,103,105,118,101,110,44,32,105,116,32,105,115,32,99,108,111,115,101,100,32,119,104,101,110,32,116,104,101,10,114,101,116,117,114,110,101,100,32,73,47,79,32,111,98,106,101,99,116,32,105,115,32,99,108,111,115,101,100,44,32,117,110,108,101,115,115,32,99,108,111,115,101,102,100,32,105,115,32,115,101,116,32,116,111,32,70,97,108,115,101,46,41,10,10,109,111,100,101,32,105,115,32,97,110,32,111,112,116,105,111,110,97,108,32,115,116,114,105,110,103,32,116,104,97,116,32,115,112,101,99,105,102,105,101,115,32,116,104,101,32,109,111,100,101,32,105,110,32,119,104,105,99,104,32,116,104,101,32,102,105,108,101,10,105,115,32,111,112,101,110,101,100,46,32,73,116,32,100,101,102,97,117,108,116,115,32,116,111,32,39,114,39,32,119,104,105,99,104,32,109,101,97,110,115,32,111,112,101,110,32,102,111,114,32,114,101,97,100,105,110,103,32,105,110,32,116,101,120,116,10,109,111,100,101,46,32,32,79,116,104,101,114,32,99,111,109,109,111,110,32,118,97,108,117,101,115,32,97,114,101,32,39,119,39,32,102,111,114,32,119,114,105,116,105,110,103,32,40,116,114,117,110,99,97,116,105,110,103,32,116,104,101,32,102,105,108,101,32,105,102,10,105,116,32,97,108,114,101,97,100,121,32,101,120,105,115,116,115,41,44,32,97,110,100,32,39,97,39,32,102,111,114,32,97,112,112,101,110,100,105,110,103,32,40,119,104,105,99,104,32,111,110,32,115,111,109,101,32,85,110,105,120,32,115,121,115,116,101,109,115,44,10,109,101,97,110,115,32,116,104,97,116,32,97,108,108,32,119,114,105,116,101,115,32,97,112,112,101,110,100,32,116,111,32,116,104,101,32,101,110,100,32,111,102,32,116,104,101,32,102,105,108,101,32,114,101,103,97,114,100,108,101,115,115,32,111,102,32,116,104,101,10,99,117,114,114,101,110,116,32,115,101,101,107,32,112,111,115,105,116,105,111,110,41,46,32,73,110,32,116,101,120,116,32,109,111,100,101,44,32,105,102,32,101,110,99,111,100,105,110,103,32,105,115,32,110,111,116,32,115,112,101,99,105,102,105,101,100,32,116,104,101,10,101,110,99,111,100,105,110,103,32,117,115,101,100,32,105,115,32,112,108,97,116,102,111,114,109,32,100,101,112,101,110,100,101,110,116,46,32,40,70,111,114,32,114,101,97,100,105,110,103,32,97,110,100,32,119,114,105,116,105,110,103,32,114,97,119,10,98,121,116,101,115,32,117,115,101,32,98,105,110,97,114,121,32,109,111,100,101,32,97,110,100,32,108,101,97,118,101,32,101,110,99,111,100,105,110,103,32,117,110,115,112,101,99,105,102,105,101,100,46,41,32,84,104,101,32,97,118,97,105,108,97,98,108,101,10,109,111,100,101,115,32,97,114,101,58,10,10,61,61,61,61,61,61,61,61,61,32,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,10,67,104,97,114,97,99,116,101,114,32,77,101,97,110,105,110,103,10,45,45,45,45,45,45,45,45,45,32,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,10,39,114,39,32,32,32,32,32,32,32,111,112,101,110,32,102,111,114,32,114,101,97,100,105,110,103,32,40,100,101,102,97,117,108,116,41,10,39,119,39,32,32,32,32,32,32,32,111,112,101,110,32,102,111,114,32,119,114,105,116,105,110,103,44,32,116,114,117,110,99,97,116,105,110,103,32,116,104,101,32,102,105,108,101,32,102,105,114,115,116,10,39,97,39,32,32,32,32,32,32,32,111,112,101,110,32,102,111,114,32,119,114,105,116,105,110,103,44,32,97,112,112,101,110,100,105,110,103,32,116,111,32,116,104,101,32,101,110,100,32,111,102,32,116,104,101,32,102,105,108,101,32,105,102,32,105,116,32,101,120,105,115,116,115,10,39,98,39,32,32,32,32,32,32,32,98,105,110,97,114,121,32,109,111,100,101,10,39,116,39,32,32,32,32,32,32,32,116,101,120,116,32,109,111,100,101,32,40,100,101,102,97,117,108,116,41,10,39,43,39,32,32,32,32,32,32,32,111,112,101,110,32,97,32,100,105,115,107,32,102,105,108,101,32,102,111,114,32,117,112,100,97,116,105,110,103,32,40,114,101,97,100,105,110,103,32,97,110,100,32,119,114,105,116,105,110,103,41,10,39,85,39,32,32,32,32,32,32,32,117,110,105,118,101,114,115,97,108,32,110,101,119,108,105,110,101,32,109,111,100,101,32,40,102,111,114,32,98,97,99,107,119,97,114,100,115,32,99,111,109,112,97,116,105,98,105,108,105,116,121,59,32,117,110,110,101,101,100,101,100,10,32,32,32,32,32,32,32,32,32,32,102,111,114,32,110,101,119,32,99,111,100,101,41,10,61,61,61,61,61,61,61,61,61,32,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,10,10,84,104,101,32,100,101,102,97,117,108,116,32,109,111,100,101,32,105,115,32,39,114,116,39,32,40,111,112,101,110,32,102,111,114,32,114,101,97,100,105,110,103,32,116,101,120,116,41,46,32,70,111,114,32,98,105,110,97,114,121,32,114,97,110,100,111,109,10,97,99,99,101,115,115,44,32,116,104,101,32,109,111,100,101,32,39,119,43,98,39,32,111,112,101,110,115,32,97,110,100,32,116,114,117,110,99,97,116,101,115,32,116,104,101,32,102,105,108,101,32,116,111,32,48,32,98,121,116,101,115,44,32,119,104,105,108,101,10,39,114,43,98,39,32,111,112,101,110,115,32,116,104,101,32,102,105,108,101,32,119,105,116,104,111,117,116,32,116,114,117,110,99,97,116,105,111,110,46,10,10,80,121,116,104,111,110,32,100,105,115,116,105,110,103,117,105,115,104,101,115,32,98,101,116,119,101,101,110,32,102,105,108,101,115,32,111,112,101,110,101,100,32,105,110,32,98,105,110,97,114,121,32,97,110,100,32,116,101,120,116,32,109,111,100,101,115,44,10,101,118,101,110,32,119,104,101,110,32,116,104,101,32,117,110,100,101,114,108,121,105,110,103,32,111,112,101,114,97,116,105,110,103,32,115,121,115,116,101,109,32,100,111,101,115,110,39,116,46,32,70,105,108,101,115,32,111,112,101,110,101,100,32,105,110,10,98,105,110,97,114,121,32,109,111,100,101,32,40,97,112,112,101,110,100,105,110,103,32,39,98,39,32,116,111,32,116,104,101,32,109,111,100,101,32,97,114,103,117,109,101,110,116,41,32,114,101,116,117,114,110,32,99,111,110,116,101,110,116,115,32,97,115,10,98,121,116,101,115,32,111,98,106,101,99,116,115,32,119,105,116,104,111,117,116,32,97,110,121,32,100,101,99,111,100,105,110,103,46,32,73,110,32,116,101,120,116,32,109,111,100,101,32,40,116,104,101,32,100,101,102,97,117,108,116,44,32,111,114,32,119,104,101,110,10,39,116,39,32,105,115,32,97,112,112,101,110,100,101,100,32,116,111,32,116,104,101,32,109,111,100,101,32,97,114,103,117,109,101,110,116,41,44,32,116,104,101,32,99,111,110,116,101,110,116,115,32,111,102,32,116,104,101,32,102,105,108,101,32,97,114,101,10,114,101,116,117,114,110,101,100,32,97,115,32,115,116,114,105,110,103,115,44,32,116,104,101,32,98,121,116,101,115,32,104,97,118,105,110,103,32,98,101,101,110,32,102,105,114,115,116,32,100,101,99,111,100,101,100,32,117,115,105,110,103,32,97,10,112,108,97,116,102,111,114,109,45,100,101,112,101,110,100,101,110,116,32,101,110,99,111,100,105,110,103,32,111,114,32,117,115,105,110,103,32,116,104,101,32,115,112,101,99,105,102,105,101,100,32,101,110,99,111,100,105,110,103,32,105,102,32,103,105,118,101,110,46,10,10,98,117,102,102,101,114,105,110,103,32,105,115,32,97,110,32,111,112,116,105,111,110,97,108,32,105,110,116,101,103,101,114,32,117,115,101,100,32,116,111,32,115,101,116,32,116,104,101,32,98,117,102,102,101,114,105,110,103,32,112,111,108,105,99,121,46,10,80,97,115,115,32,48,32,116,111,32,115,119,105,116,99,104,32,98,117,102,102,101,114,105,110,103,32,111,102,102,32,40,111,110,108,121,32,97,108,108,111,119,101,100,32,105,110,32,98,105,110,97,114,121,32,109,111,100,101,41,44,32,49,32,116,111,32,115,101,108,101,99,116,10,108,105,110,101,32,98,117,102,102,101,114,105,110,103,32,40,111,110,108,121,32,117,115,97,98,108,101,32,105,110,32,116,101,120,116,32,109,111,100,101,41,44,32,97,110,100,32,97,110,32,105,110,116,101,103,101,114,32,62,32,49,32,116,111,32,105,110,100,105,99,97,116,101,10,116,104,101,32,115,105,122,101,32,111,102,32,97,32,102,105,120,101,100,45,115,105,122,101,32,99,104,117,110,107,32,98,117,102,102,101,114,46,32,32,87,104,101,110,32,110,111,32,98,117,102,102,101,114,105,110,103,32,97,114,103,117,109,101,110,116,32,105,115,10,103,105,118,101,110,44,32,116,104,101,32,100,101,102,97,117,108,116,32,98,117,102,102,101,114,105,110,103,32,112,111,108,105,99,121,32,119,111,114,107,115,32,97,115,32,102,111,108,108,111,119,115,58,10,10,42,32,66,105,110,97,114,121,32,102,105,108,101,115,32,97,114,101,32,98,117,102,102,101,114,101,100,32,105,110,32,102,105,120,101,100,45,115,105,122,101,32,99,104,117,110,107,115,59,32,116,104,101,32,115,105,122,101,32,111,102,32,116,104,101,32,98,117,102,102,101,114,10,32,32,105,115,32,99,104,111,115,101,110,32,117,115,105,110,103,32,97,32,104,101,117,114,105,115,116,105,99,32,116,114,121,105,110,103,32,116,111,32,100,101,116,101,114,109,105,110,101,32,116,104,101,32,117,110,100,101,114,108,121,105,110,103,32,100,101,118,105,99,101,39,115,10,32,32,34,98,108,111,99,107,32,115,105,122,101,34,32,97,110,100,32,102,97,108,108,105,110,103,32,98,97,99,107,32,111,110,32,96,105,111,46,68,69,70,65,85,76,84,95,66,85,70,70,69,82,95,83,73,90,69,96,46,10,32,32,79,110,32,109,97,110,121,32,115,121,115,116,101,109,115,44,32,116,104,101,32,98,117,102,102,101,114,32,119,105,108,108,32,116,121,112,105,99,97,108,108,121,32,98,101,32,52,48,57,54,32,111,114,32,56,49,57,50,32,98,121,116,101,115,32,108,111,110,103,46,10,10,42,32,34,73,110,116,101,114,97,99,116,105,118,101,34,32,116,101,120,116,32,102,105,108,101,115,32,40,102,105,108,101,115,32,102,111,114,32,119,104,105,99,104,32,105,115,97,116,116,121,40,41,32,114,101,116,117,114,110,115,32,84,114,117,101,41,10,32,32,117,115,101,32,108,105,110,101,32,98,117,102,102,101,114,105,110,103,46,32,32,79,116,104,101,114,32,116,101,120,116,32,102,105,108,101,115,32,117,115,101,32,116,104,101,32,112,111,108,105,99,121,32,100,101,115,99,114,105,98,101,100,32,97,98,111,118,101,10,32,32,102,111,114,32,98,105,110,97,114,121,32,102,105,108,101,115,46,10,10,101,110,99,111,100,105,110,103,32,105,115,32,116,104,101,32,110,97,109,101,32,111,102,32,116,104,101,32,101,110,99,111,100,105,110,103,32,117,115,101,100,32,116,111,32,100,101,99,111,100,101,32,111,114,32,101,110,99,111,100,101,32,116,104,101,10,102,105,108,101,46,32,84,104,105,115,32,115,104,111,117,108,100,32,111,110,108,121,32,98,101,32,117,115,101,100,32,105,110,32,116,101,120,116,32,109,111,100,101,46,32,84,104,101,32,100,101,102,97,117,108,116,32,101,110,99,111,100,105,110,103,32,105,115,10,112,108,97,116,102,111,114,109,32,100,101,112,101,110,100,101,110,116,44,32,98,117,116,32,97,110,121,32,101,110,99,111,100,105,110,103,32,115,117,112,112,111,114,116,101,100,32,98,121,32,80,121,116,104,111,110,32,99,97,110,32,98,101,10,112,97,115,115,101,100,46,32,32,83,101,101,32,116,104,101,32,99,111,100,101,99,115,32,109,111,100,117,108,101,32,102,111,114,32,116,104,101,32,108,105,115,116,32,111,102,32,115,117,112,112,111,114,116,101,100,32,101,110,99,111,100,105,110,103,115,46,10,10,101,114,114,111,114,115,32,105,115,32,97,110,32,111,112,116,105,111,110,97,108,32,115,116,114,105,110,103,32,116,104,97,116,32,115,112,101,99,105,102,105,101,115,32,104,111,119,32,101,110,99,111,100,105,110,103,32,101,114,114,111,114,115,32,97,114,101,32,116,111,10,98,101,32,104,97,110,100,108,101,100,45,45,45,116,104,105,115,32,97,114,103,117,109,101,110,116,32,115,104,111,117,108,100,32,110,111,116,32,98,101,32,117,115,101,100,32,105,110,32,98,105,110,97,114,121,32,109,111,100,101,46,32,80,97,115,115,10,39,115,116,114,105,99,116,39,32,116,111,32,114,97,105,115,101,32,97,32,86,97,108,117,101,69,114,114,111,114,32,101,120,99,101,112,116,105,111,110,32,105,102,32,116,104,101,114,101,32,105,115,32,97,110,32,101,110,99,111,100,105,110,103,32,101,114,114,111,114,10,40,116,104,101,32,100,101,102,97,117,108,116,32,111,102,32,78,111,110,101,32,104,97,115,32,116,104,101,32,115,97,109,101,32,101,102,102,101,99,116,41,44,32,111,114,32,112,97,115,115,32,39,105,103,110,111,114,101,39,32,116,111,32,105,103,110,111,114,101,10,101,114,114,111,114,115,46,32,40,78,111,116,101,32,116,104,97,116,32,105,103,110,111,114,105,110,103,32,101,110,99,111,100,105,110,103,32,101,114,114,111,114,115,32,99,97,110,32,108,101,97,100,32,116,111,32,100,97,116,97,32,108,111,115,115,46,41,10,83,101,101,32,116,104,101,32,100,111,99,117,109,101,110,116,97,116,105,111,110,32,102,111,114,32,99,111,100,101,99,115,46,114,101,103,105,115,116,101,114,32,102,111,114,32,97,32,108,105,115,116,32,111,102,32,116,104,101,32,112,101,114,109,105,116,116,101,100,10,101,110,99,111,100,105,110,103,32,101,114,114,111,114,32,115,116,114,105,110,103,115,46,10,10,110,101,119,108,105,110,101,32,99,111,110,116,114,111,108,115,32,104,111,119,32,117,110,105,118,101,114,115,97,108,32,110,101,119,108,105,110,101,115,32,119,111,114,107,115,32,40,105,116,32,111,110,108,121,32,97,112,112,108,105,101,115,32,116,111,32,116,101,120,116,10,109,111,100,101,41,46,32,73,116,32,99,97,110,32,98,101,32,78,111,110,101,44,32,39,39,44,32,39,92,110,39,44,32,39,92,114,39,44,32,97,110,100,32,39,92,114,92,110,39,46,32,32,73,116,32,119,111,114,107,115,32,97,115,10,102,111,108,108,111,119,115,58,10,10,42,32,79,110,32,105,110,112,117,116,44,32,105,102,32,110,101,119,108,105,110,101,32,105,115,32,78,111,110,101,44,32,117,110,105,118,101,114,115,97,108,32,110,101,119,108,105,110,101,115,32,109,111,100,101,32,105,115,10,32,32,101,110,97,98,108,101,100,46,32,76,105,110,101,115,32,105,110,32,116,104,101,32,105,110,112,117,116,32,99,97,110,32,101,110,100,32,105,110,32,39,92,110,39,44,32,39,92,114,39,44,32,111,114,32,39,92,114,92,110,39,44,32,97,110,100,10,32,32,116,104,101,115,101,32,97,114,101,32,116,114,97,110,115,108,97,116,101,100,32,105,110,116,111,32,39,92,110,39,32,98,101,102,111,114,101,32,98,101,105,110,103,32,114,101,116,117,114,110,101,100,32,116,111,32,116,104,101,10,32,32,99,97,108,108,101,114,46,32,73,102,32,105,116,32,105,115,32,39,39,44,32,117,110,105,118,101,114,115,97,108,32,110,101,119,108,105,110,101,32,109,111,100,101,32,105,115,32,101,110,97,98,108,101,100,44,32,98,117,116,32,108,105,110,101,10,32,32,101,110,100,105,110,103,115,32,97,114,101,32,114,101,116,117,114,110,101,100,32,116,111,32,116,104,101,32,99,97,108,108,101,114,32,117,110,116,114,97,110,115,108,97,116,101,100,46,32,73,102,32,105,116,32,104,97,115,32,97,110,121,32,111,102,10,32,32,116,104,101,32,111,116,104,101,114,32,108,101,103,97,108,32,118,97,108,117,101,115,44,32,105,110,112,117,116,32,108,105,110,101,115,32,97,114,101,32,111,110,108,121,32,116,101,114,109,105,110,97,116,101,100,32,98,121,32,116,104,101,32,103,105,118,101,110,10,32,32,115,116,114,105,110,103,44,32,97,110,100,32,116,104,101,32,108,105,110,101,32,101,110,100,105,110,103,32,105,115,32,114,101,116,117,114,110,101,100,32,116,111,32,116,104,101,32,99,97,108,108,101,114,32,117,110,116,114,97,110,115,108,97,116,101,100,46,10,10,42,32,79,110,32,111,117,116,112,117,116,44,32,105,102,32,110,101,119,108,105,110,101,32,105,115,32,78,111,110,101,44,32,97,110,121,32,39,92,110,39,32,99,104,97,114,97,99,116,101,114,115,32,119,114,105,116,116,101,110,32,97,114,101,10,32,32,116,114,97,110,115,108,97,116,101,100,32,116,111,32,116,104,101,32,115,121,115,116,101,109,32,100,101,102,97,117,108,116,32,108,105,110,101,32,115,101,112,97,114,97,116,111,114,44,32,111,115,46,108,105,110,101,115,101,112,46,32,73,102,10,32,32,110,101,119,108,105,110,101,32,105,115,32,39,39,44,32,110,111,32,116,114,97,110,115,108,97,116,105,111,110,32,116,97,107,101,115,32,112,108,97,99,101,46,32,73,102,32,110,101,119,108,105,110,101,32,105,115,32,97,110,121,32,111,102,32,116,104,101,10,32,32,111,116,104,101,114,32,108,101,103,97,108,32,118,97,108,117,101,115,44,32,97,110,121,32,39,92,110,39,32,99,104,97,114,97,99,116,101,114,115,32,119,114,105,116,116,101,110,32,97,114,101,32,116,114,97,110,115,108,97,116,101,100,32,116,111,10,32,32,116,104,101,32,103,105,118,101,110,32,115,116,114,105,110,103,46,10,10,73,102,32,99,108,111,115,101,102,100,32,105,115,32,70,97,108,115,101,44,32,116,104,101,32,117,110,100,101,114,108,121,105,110,103,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,119,105,108,108,32,98,101,32,107,101,112,116,32,111,112,101,110,10,119,104,101,110,32,116,104,101,32,102,105,108,101,32,105,115,32,99,108,111,115,101,100,46,32,84,104,105,115,32,100,111,101,115,32,110,111,116,32,119,111,114,107,32,119,104,101,110,32,97,32,102,105,108,101,32,110,97,109,101,32,105,115,32,103,105,118,101,110,10,97,110,100,32,109,117,115,116,32,98,101,32,84,114,117,101,32,105,110,32,116,104,97,116,32,99,97,115,101,46,10,10,111,112,101,110,40,41,32,114,101,116,117,114,110,115,32,97,32,102,105,108,101,32,111,98,106,101,99,116,32,119,104,111,115,101,32,116,121,112,101,32,100,101,112,101,110,100,115,32,111,110,32,116,104,101,32,109,111,100,101,44,32,97,110,100,10,116,104,114,111,117,103,104,32,119,104,105,99,104,32,116,104,101,32,115,116,97,110,100,97,114,100,32,102,105,108,101,32,111,112,101,114,97,116,105,111,110,115,32,115,117,99,104,32,97,115,32,114,101,97,100,105,110,103,32,97,110,100,32,119,114,105,116,105,110,103,10,97,114,101,32,112,101,114,102,111,114,109,101,100,46,32,87,104,101,110,32,111,112,101,110,40,41,32,105,115,32,117,115,101,100,32,116,111,32,111,112,101,110,32,97,32,102,105,108,101,32,105,110,32,97,32,116,101,120,116,32,109,111,100,101,32,40,39,119,39,44,10,39,114,39,44,32,39,119,116,39,44,32,39,114,116,39,44,32,101,116,99,46,41,44,32,105,116,32,114,101,116,117,114,110,115,32,97,32,84,101,120,116,73,79,87,114,97,112,112,101,114,46,32,87,104,101,110,32,117,115,101,100,32,116,111,32,111,112,101,110,10,97,32,102,105,108,101,32,105,110,32,97,32,98,105,110,97,114,121,32,109,111,100,101,44,32,116,104,101,32,114,101,116,117,114,110,101,100,32,99,108,97,115,115,32,118,97,114,105,101,115,58,32,105,110,32,114,101,97,100,32,98,105,110,97,114,121,10,109,111,100,101,44,32,105,116,32,114,101,116,117,114,110,115,32,97,32,66,117,102,102,101,114,101,100,82,101,97,100,101,114,59,32,105,110,32,119,114,105,116,101,32,98,105,110,97,114,121,32,97,110,100,32,97,112,112,101,110,100,32,98,105,110,97,114,121,10,109,111,100,101,115,44,32,105,116,32,114,101,116,117,114,110,115,32,97,32,66,117,102,102,101,114,101,100,87,114,105,116,101,114,44,32,97,110,100,32,105,110,32,114,101,97,100,47,119,114,105,116,101,32,109,111,100,101,44,32,105,116,32,114,101,116,117,114,110,115,10,97,32,66,117,102,102,101,114,101,100,82,97,110,100,111,109,46,10,10,73,116,32,105,115,32,97,108,115,111,32,112,111,115,115,105,98,108,101,32,116,111,32,117,115,101,32,97,32,115,116,114,105,110,103,32,111,114,32,98,121,116,101,97,114,114,97,121,32,97,115,32,97,32,102,105,108,101,32,102,111,114,32,98,111,116,104,10,114,101,97,100,105,110,103,32,97,110,100,32,119,114,105,116,105,110,103,46,32,70,111,114,32,115,116,114,105,110,103,115,32,83,116,114,105,110,103,73,79,32,99,97,110,32,98,101,32,117,115,101,100,32,108,105,107,101,32,97,32,102,105,108,101,10,111,112,101,110,101,100,32,105,110,32,97,32,116,101,120,116,32,109,111,100,101,44,32,97,110,100,32,102,111,114,32,98,121,116,101,115,32,97,32,66,121,116,101,115,73,79,32,99,97,110,32,98,101,32,117,115,101,100,32,108,105,107,101,32,97,32,102,105,108,101,10,111,112,101,110,101,100,32,105,110,32,97,32,98,105,110,97,114,121,32,109,111,100,101,46,10,0] /* Open file and return */, "i8", ALLOC_NORMAL);
_C_6_8548=allocate(32, "i8*", ALLOC_NORMAL);
__str6239=allocate([102,105,108,101,0] /* file\00 */, "i8", ALLOC_NORMAL);
__str7240=allocate([109,111,100,101,0] /* mode\00 */, "i8", ALLOC_NORMAL);
__str8241=allocate([98,117,102,102,101,114,105,110,103,0] /* buffering\00 */, "i8", ALLOC_NORMAL);
__str9242=allocate([101,110,99,111,100,105,110,103,0] /* encoding\00 */, "i8", ALLOC_NORMAL);
__str10243=allocate([101,114,114,111,114,115,0] /* errors\00 */, "i8", ALLOC_NORMAL);
__str11244=allocate([110,101,119,108,105,110,101,0] /* newline\00 */, "i8", ALLOC_NORMAL);
__str12245=allocate([99,108,111,115,101,102,100,0] /* closefd\00 */, "i8", ALLOC_NORMAL);
__str13246=allocate([114,0] /* r\00 */, "i8", ALLOC_NORMAL);
__str14247=allocate([79,124,115,105,122,122,122,105,58,111,112,101,110,0] /* O|sizzzi:open\00 */, "i8", ALLOC_NORMAL);
__str15248=allocate([105,110,118,97,108,105,100,32,102,105,108,101,58,32,37,115,0] /* invalid file: %s\00 */, "i8", ALLOC_NORMAL);
__str16249=allocate([105,110,118,97,108,105,100,32,109,111,100,101,58,32,39,37,115,39,0] /* invalid mode: '%s'\0 */, "i8", ALLOC_NORMAL);
__str17250=allocate([99,97,110,39,116,32,117,115,101,32,85,32,97,110,100,32,119,114,105,116,105,110,103,32,109,111,100,101,32,97,116,32,111,110,99,101,0] /* can't use U and writ */, "i8", ALLOC_NORMAL);
__str18251=allocate([99,97,110,39,116,32,104,97,118,101,32,116,101,120,116,32,97,110,100,32,98,105,110,97,114,121,32,109,111,100,101,32,97,116,32,111,110,99,101,0] /* can't have text and  */, "i8", ALLOC_NORMAL);
__str19252=allocate([109,117,115,116,32,104,97,118,101,32,101,120,97,99,116,108,121,32,111,110,101,32,111,102,32,114,101,97,100,47,119,114,105,116,101,47,97,112,112,101,110,100,32,109,111,100,101,0] /* must have exactly on */, "i8", ALLOC_NORMAL);
__str20253=allocate([98,105,110,97,114,121,32,109,111,100,101,32,100,111,101,115,110,39,116,32,116,97,107,101,32,97,110,32,101,110,99,111,100,105,110,103,32,97,114,103,117,109,101,110,116,0] /* binary mode doesn't  */, "i8", ALLOC_NORMAL);
__str21254=allocate([98,105,110,97,114,121,32,109,111,100,101,32,100,111,101,115,110,39,116,32,116,97,107,101,32,97,110,32,101,114,114,111,114,115,32,97,114,103,117,109,101,110,116,0] /* binary mode doesn't  */, "i8", ALLOC_NORMAL);
__str22255=allocate([98,105,110,97,114,121,32,109,111,100,101,32,100,111,101,115,110,39,116,32,116,97,107,101,32,97,32,110,101,119,108,105,110,101,32,97,114,103,117,109,101,110,116,0] /* binary mode doesn't  */, "i8", ALLOC_NORMAL);
__str23256=allocate([79,115,105,0] /* Osi\00 */, "i8", ALLOC_NORMAL);
__str24257=allocate([105,115,97,116,116,121,0] /* isatty\00 */, "i8", ALLOC_NORMAL);
__str25258=allocate([102,105,108,101,110,111,0] /* fileno\00 */, "i8", ALLOC_NORMAL);
__str26259=allocate([105,110,118,97,108,105,100,32,98,117,102,102,101,114,105,110,103,32,115,105,122,101,0] /* invalid buffering si */, "i8", ALLOC_NORMAL);
__str27260=allocate([99,97,110,39,116,32,104,97,118,101,32,117,110,98,117,102,102,101,114,101,100,32,116,101,120,116,32,73,47,79,0] /* can't have unbuffere */, "i8", ALLOC_NORMAL);
__str28261=allocate([117,110,107,110,111,119,110,32,109,111,100,101,58,32,39,37,115,39,0] /* unknown mode: '%s'\0 */, "i8", ALLOC_NORMAL);
__str29262=allocate([79,105,0] /* Oi\00 */, "i8", ALLOC_NORMAL);
__str30263=allocate([79,115,115,115,105,0] /* Osssi\00 */, "i8", ALLOC_NORMAL);
__str31264=allocate([40,40,40,40,40,40,80,121,79,98,106,101,99,116,42,41,40,118,97,108,117,101,41,41,45,62,111,98,95,116,121,112,101,41,41,45,62,116,112,95,102,108,97,103,115,32,38,32,40,40,49,76,60,60,50,52,41,41,41,32,33,61,32,48,41,0] /* ((((((PyObject_)(val */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8811=allocate([80,121,78,117,109,98,101,114,95,65,115,79,102,102,95,116,0] /* PyNumber_AsOff_t\00 */, "i8", ALLOC_NORMAL);
__str32265=allocate([99,97,110,110,111,116,32,102,105,116,32,39,37,46,50,48,48,115,39,32,105,110,116,111,32,97,110,32,111,102,102,115,101,116,45,115,105,122,101,100,32,105,110,116,101,103,101,114,0] /* cannot fit '%.200s'  */, "i8", ALLOC_NORMAL);
__str33266=allocate([105,110,116,101,103,101,114,32,97,114,103,117,109,101,110,116,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,39,37,46,50,48,48,115,39,0] /* integer argument exp */, "i8", ALLOC_NORMAL);
__PyIO_os_module=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__PyIO_locale_module=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__PyIO_unsupported_operation=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str34268=allocate([111,112,101,110,0] /* open\00 */, "i8", ALLOC_NORMAL);
_module_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str35269=allocate([95,105,111,0] /* _io\00 */, "i8", ALLOC_NORMAL);
__str36270=allocate([111,115,0] /* os\00 */, "i8", ALLOC_NORMAL);
__str37271=allocate([68,69,70,65,85,76,84,95,66,85,70,70,69,82,95,83,73,90,69,0] /* DEFAULT_BUFFER_SIZE\ */, "i8", ALLOC_NORMAL);
__str38272=allocate([115,40,79,79,41,123,125,0] /* s(OO){}\00 */, "i8", ALLOC_NORMAL);
__str39273=allocate([85,110,115,117,112,112,111,114,116,101,100,79,112,101,114,97,116,105,111,110,0] /* UnsupportedOperation */, "i8", ALLOC_NORMAL);
__str40274=allocate([95,73,79,66,97,115,101,0] /* _IOBase\00 */, "i8", ALLOC_NORMAL);
__str41275=allocate([95,82,97,119,73,79,66,97,115,101,0] /* _RawIOBase\00 */, "i8", ALLOC_NORMAL);
__str42276=allocate([95,66,117,102,102,101,114,101,100,73,79,66,97,115,101,0] /* _BufferedIOBase\00 */, "i8", ALLOC_NORMAL);
__str43277=allocate([95,84,101,120,116,73,79,66,97,115,101,0] /* _TextIOBase\00 */, "i8", ALLOC_NORMAL);
__str44278=allocate([70,105,108,101,73,79,0] /* FileIO\00 */, "i8", ALLOC_NORMAL);
__str45279=allocate([66,121,116,101,115,73,79,0] /* BytesIO\00 */, "i8", ALLOC_NORMAL);
__str46280=allocate([83,116,114,105,110,103,73,79,0] /* StringIO\00 */, "i8", ALLOC_NORMAL);
__str47281=allocate([66,117,102,102,101,114,101,100,82,101,97,100,101,114,0] /* BufferedReader\00 */, "i8", ALLOC_NORMAL);
__str48282=allocate([66,117,102,102,101,114,101,100,87,114,105,116,101,114,0] /* BufferedWriter\00 */, "i8", ALLOC_NORMAL);
__str49283=allocate([66,117,102,102,101,114,101,100,82,87,80,97,105,114,0] /* BufferedRWPair\00 */, "i8", ALLOC_NORMAL);
__str50284=allocate([66,117,102,102,101,114,101,100,82,97,110,100,111,109,0] /* BufferedRandom\00 */, "i8", ALLOC_NORMAL);
__str51285=allocate([84,101,120,116,73,79,87,114,97,112,112,101,114,0] /* TextIOWrapper\00 */, "i8", ALLOC_NORMAL);
__str52286=allocate([73,110,99,114,101,109,101,110,116,97,108,78,101,119,108,105,110,101,68,101,99,111,100,101,114,0] /* IncrementalNewlineDe */, "i8", ALLOC_NORMAL);
__str53287=allocate([99,108,111,115,101,0] /* close\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_close=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str54289=allocate([99,108,111,115,101,100,0] /* closed\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_closed=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str55291=allocate([100,101,99,111,100,101,0] /* decode\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_decode=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str56292=allocate([101,110,99,111,100,101,0] /* encode\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_encode=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__PyIO_str_fileno=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str57294=allocate([102,108,117,115,104,0] /* flush\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_flush=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str58296=allocate([103,101,116,115,116,97,116,101,0] /* getstate\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_getstate=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__PyIO_str_isatty=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str59298=allocate([110,101,119,108,105,110,101,115,0] /* newlines\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_newlines=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str60299=allocate([10,0] /* \0A\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_nl=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str61300=allocate([114,101,97,100,0] /* read\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_read=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str62302=allocate([114,101,97,100,49,0] /* read1\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_read1=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str63303=allocate([114,101,97,100,97,98,108,101,0] /* readable\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_readable=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str64305=allocate([114,101,97,100,105,110,116,111,0] /* readinto\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_readinto=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str65307=allocate([114,101,97,100,108,105,110,101,0] /* readline\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_readline=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str66309=allocate([114,101,115,101,116,0] /* reset\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_reset=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str67=allocate([115,101,101,107,0] /* seek\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_seek=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str68=allocate([115,101,101,107,97,98,108,101,0] /* seekable\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_seekable=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str69=allocate([115,101,116,115,116,97,116,101,0] /* setstate\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_setstate=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str70=allocate([116,101,108,108,0] /* tell\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_tell=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str71=allocate([116,114,117,110,99,97,116,101,0] /* truncate\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_truncate=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str72=allocate([119,114,105,116,101,0] /* write\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_write=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str73=allocate([119,114,105,116,97,98,108,101,0] /* writable\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_writable=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__PyIO_empty_str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__PyIO_empty_bytes=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__PyIO_zero=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
_stringio_doc=allocate([84,101,120,116,32,73,47,79,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,32,117,115,105,110,103,32,97,110,32,105,110,45,109,101,109,111,114,121,32,98,117,102,102,101,114,46,10,10,84,104,101,32,105,110,105,116,105,97,108,95,118,97,108,117,101,32,97,114,103,117,109,101,110,116,32,115,101,116,115,32,116,104,101,32,118,97,108,117,101,32,111,102,32,111,98,106,101,99,116,46,32,32,84,104,101,32,110,101,119,108,105,110,101,10,97,114,103,117,109,101,110,116,32,105,115,32,108,105,107,101,32,116,104,101,32,111,110,101,32,111,102,32,84,101,120,116,73,79,87,114,97,112,112,101,114,39,115,32,99,111,110,115,116,114,117,99,116,111,114,46,0] /* Text I/O implementat */, "i8", ALLOC_NORMAL);
__str319=allocate([115,101,108,102,45,62,98,117,102,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* self->buf != ((void  */, "i8", ALLOC_NORMAL);
__str1320=allocate([46,46,47,99,112,121,116,104,111,110,47,77,111,100,117,108,101,115,47,95,105,111,47,115,116,114,105,110,103,105,111,46,99,0] /* ../cpython/Modules/_ */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8442=allocate([114,101,115,105,122,101,95,98,117,102,102,101,114,0] /* resize_buffer\00 */, "i8", ALLOC_NORMAL);
__str2321=allocate([110,101,119,32,98,117,102,102,101,114,32,115,105,122,101,32,116,111,111,32,108,97,114,103,101,0] /* new buffer size too  */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8484=allocate([119,114,105,116,101,95,115,116,114,0] /* write_str\00 */, "i8", ALLOC_NORMAL);
__str3322=allocate([115,101,108,102,45,62,112,111,115,32,62,61,32,48,0] /* self->pos >= 0\00 */, "i8", ALLOC_NORMAL);
__str4323=allocate([40,40,40,40,40,40,80,121,79,98,106,101,99,116,42,41,40,100,101,99,111,100,101,100,41,41,45,62,111,98,95,116,121,112,101,41,41,45,62,116,112,95,102,108,97,103,115,32,38,32,40,40,49,76,60,60,50,56,41,41,41,32,33,61,32,48,41,0] /* ((((((PyObject_)(dec */, "i8", ALLOC_NORMAL);
__str5324=allocate([108,101,110,32,62,61,32,48,0] /* len >= 0\00 */, "i8", ALLOC_NORMAL);
__str6325=allocate([110,101,119,32,112,111,115,105,116,105,111,110,32,116,111,111,32,108,97,114,103,101,0] /* new position too lar */, "i8", ALLOC_NORMAL);
_stringio_getvalue_doc=allocate([82,101,116,114,105,101,118,101,32,116,104,101,32,101,110,116,105,114,101,32,99,111,110,116,101,110,116,115,32,111,102,32,116,104,101,32,111,98,106,101,99,116,46,0] /* Retrieve the entire  */, "i8", ALLOC_NORMAL);
__str7326=allocate([73,47,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,117,110,105,110,105,116,105,97,108,105,122,101,100,32,111,98,106,101,99,116,0] /* I/O operation on uni */, "i8", ALLOC_NORMAL);
__str8327=allocate([73,47,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,99,108,111,115,101,100,32,102,105,108,101,0] /* I/O operation on clo */, "i8", ALLOC_NORMAL);
_stringio_tell_doc=allocate([84,101,108,108,32,116,104,101,32,99,117,114,114,101,110,116,32,102,105,108,101,32,112,111,115,105,116,105,111,110,46,0] /* Tell the current fil */, "i8", ALLOC_NORMAL);
_stringio_read_doc=allocate([82,101,97,100,32,97,116,32,109,111,115,116,32,110,32,99,104,97,114,97,99,116,101,114,115,44,32,114,101,116,117,114,110,101,100,32,97,115,32,97,32,115,116,114,105,110,103,46,10,10,73,102,32,116,104,101,32,97,114,103,117,109,101,110,116,32,105,115,32,110,101,103,97,116,105,118,101,32,111,114,32,111,109,105,116,116,101,100,44,32,114,101,97,100,32,117,110,116,105,108,32,69,79,70,10,105,115,32,114,101,97,99,104,101,100,46,32,82,101,116,117,114,110,32,97,110,32,101,109,112,116,121,32,115,116,114,105,110,103,32,97,116,32,69,79,70,46,10,0] /* Read at most n chara */, "i8", ALLOC_NORMAL);
__str9328=allocate([124,79,58,114,101,97,100,0] /* |O:read\00 */, "i8", ALLOC_NORMAL);
__str10329=allocate([105,110,116,101,103,101,114,32,97,114,103,117,109,101,110,116,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,39,37,115,39,0] /* integer argument exp */, "i8", ALLOC_NORMAL);
__str11330=allocate(1, "i8", ALLOC_NORMAL);
_stringio_readline_doc=allocate([82,101,97,100,32,117,110,116,105,108,32,110,101,119,108,105,110,101,32,111,114,32,69,79,70,46,10,10,82,101,116,117,114,110,115,32,97,110,32,101,109,112,116,121,32,115,116,114,105,110,103,32,105,102,32,69,79,70,32,105,115,32,104,105,116,32,105,109,109,101,100,105,97,116,101,108,121,46,10,0] /* Read until newline o */, "i8", ALLOC_NORMAL);
__str12331=allocate([124,79,58,114,101,97,100,108,105,110,101,0] /* |O:readline\00 */, "i8", ALLOC_NORMAL);
__str13332=allocate([114,101,97,100,108,105,110,101,40,41,32,115,104,111,117,108,100,32,104,97,118,101,32,114,101,116,117,114,110,101,100,32,97,110,32,115,116,114,32,111,98,106,101,99,116,44,32,110,111,116,32,39,37,46,50,48,48,115,39,0] /* readline() should ha */, "i8", ALLOC_NORMAL);
_stringio_truncate_doc=allocate([84,114,117,110,99,97,116,101,32,115,105,122,101,32,116,111,32,112,111,115,46,10,10,84,104,101,32,112,111,115,32,97,114,103,117,109,101,110,116,32,100,101,102,97,117,108,116,115,32,116,111,32,116,104,101,32,99,117,114,114,101,110,116,32,102,105,108,101,32,112,111,115,105,116,105,111,110,44,32,97,115,10,114,101,116,117,114,110,101,100,32,98,121,32,116,101,108,108,40,41,46,32,32,84,104,101,32,99,117,114,114,101,110,116,32,102,105,108,101,32,112,111,115,105,116,105,111,110,32,105,115,32,117,110,99,104,97,110,103,101,100,46,10,82,101,116,117,114,110,115,32,116,104,101,32,110,101,119,32,97,98,115,111,108,117,116,101,32,112,111,115,105,116,105,111,110,46,10,0] /* Truncate size to pos */, "i8", ALLOC_NORMAL);
__str14333=allocate([124,79,58,116,114,117,110,99,97,116,101,0] /* |O:truncate\00 */, "i8", ALLOC_NORMAL);
__str15334=allocate([78,101,103,97,116,105,118,101,32,115,105,122,101,32,118,97,108,117,101,32,37,122,100,0] /* Negative size value  */, "i8", ALLOC_NORMAL);
_stringio_seek_doc=allocate([67,104,97,110,103,101,32,115,116,114,101,97,109,32,112,111,115,105,116,105,111,110,46,10,10,83,101,101,107,32,116,111,32,99,104,97,114,97,99,116,101,114,32,111,102,102,115,101,116,32,112,111,115,32,114,101,108,97,116,105,118,101,32,116,111,32,112,111,115,105,116,105,111,110,32,105,110,100,105,99,97,116,101,100,32,98,121,32,119,104,101,110,99,101,58,10,32,32,32,32,48,32,32,83,116,97,114,116,32,111,102,32,115,116,114,101,97,109,32,40,116,104,101,32,100,101,102,97,117,108,116,41,46,32,32,112,111,115,32,115,104,111,117,108,100,32,98,101,32,62,61,32,48,59,10,32,32,32,32,49,32,32,67,117,114,114,101,110,116,32,112,111,115,105,116,105,111,110,32,45,32,112,111,115,32,109,117,115,116,32,98,101,32,48,59,10,32,32,32,32,50,32,32,69,110,100,32,111,102,32,115,116,114,101,97,109,32,45,32,112,111,115,32,109,117,115,116,32,98,101,32,48,46,10,82,101,116,117,114,110,115,32,116,104,101,32,110,101,119,32,97,98,115,111,108,117,116,101,32,112,111,115,105,116,105,111,110,46,10,0] /* Change stream positi */, "i8", ALLOC_NORMAL);
__str16335=allocate([79,124,105,58,115,101,101,107,0] /* O|i:seek\00 */, "i8", ALLOC_NORMAL);
__str17336=allocate([73,110,118,97,108,105,100,32,119,104,101,110,99,101,32,40,37,105,44,32,115,104,111,117,108,100,32,98,101,32,48,44,32,49,32,111,114,32,50,41,0] /* Invalid whence (%i,  */, "i8", ALLOC_NORMAL);
__str18337=allocate([78,101,103,97,116,105,118,101,32,115,101,101,107,32,112,111,115,105,116,105,111,110,32,37,122,100,0] /* Negative seek positi */, "i8", ALLOC_NORMAL);
__str19338=allocate([67,97,110,39,116,32,100,111,32,110,111,110,122,101,114,111,32,99,117,114,45,114,101,108,97,116,105,118,101,32,115,101,101,107,115,0] /* Can't do nonzero cur */, "i8", ALLOC_NORMAL);
_stringio_write_doc=allocate([87,114,105,116,101,32,115,116,114,105,110,103,32,116,111,32,102,105,108,101,46,10,10,82,101,116,117,114,110,115,32,116,104,101,32,110,117,109,98,101,114,32,111,102,32,99,104,97,114,97,99,116,101,114,115,32,119,114,105,116,116,101,110,44,32,119,104,105,99,104,32,105,115,32,97,108,119,97,121,115,32,101,113,117,97,108,32,116,111,10,116,104,101,32,108,101,110,103,116,104,32,111,102,32,116,104,101,32,115,116,114,105,110,103,46,10,0] /* Write string to file */, "i8", ALLOC_NORMAL);
__str20339=allocate([115,116,114,105,110,103,32,97,114,103,117,109,101,110,116,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,39,37,115,39,0] /* string argument expe */, "i8", ALLOC_NORMAL);
_stringio_close_doc=allocate([67,108,111,115,101,32,116,104,101,32,73,79,32,111,98,106,101,99,116,46,32,65,116,116,101,109,112,116,105,110,103,32,97,110,121,32,102,117,114,116,104,101,114,32,111,112,101,114,97,116,105,111,110,32,97,102,116,101,114,32,116,104,101,10,111,98,106,101,99,116,32,105,115,32,99,108,111,115,101,100,32,119,105,108,108,32,114,97,105,115,101,32,97,32,86,97,108,117,101,69,114,114,111,114,46,10,10,84,104,105,115,32,109,101,116,104,111,100,32,104,97,115,32,110,111,32,101,102,102,101,99,116,32,105,102,32,116,104,101,32,102,105,108,101,32,105,115,32,97,108,114,101,97,100,121,32,99,108,111,115,101,100,46,10,0] /* Close the IO object. */, "i8", ALLOC_NORMAL);
__str21340=allocate([103,45,62,103,99,46,103,99,95,114,101,102,115,32,33,61,32,40,45,50,41,0] /* g->gc.gc_refs != (-2 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___9021=allocate([115,116,114,105,110,103,105,111,95,100,101,97,108,108,111,99,0] /* stringio_dealloc\00 */, "i8", ALLOC_NORMAL);
__str22341=allocate([116,121,112,101,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,32,38,38,32,116,121,112,101,45,62,116,112,95,97,108,108,111,99,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* type != ((void _)0)  */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___9091=allocate([115,116,114,105,110,103,105,111,95,110,101,119,0] /* stringio_new\00 */, "i8", ALLOC_NORMAL);
_C_71_9130=allocate(12, "i8*", ALLOC_NORMAL);
__str23342=allocate([105,110,105,116,105,97,108,95,118,97,108,117,101,0] /* initial_value\00 */, "i8", ALLOC_NORMAL);
__str24343=allocate([110,101,119,108,105,110,101,0] /* newline\00 */, "i8", ALLOC_NORMAL);
__str25344=allocate([10,0] /* \0A\00 */, "i8", ALLOC_NORMAL);
__str26345=allocate([124,79,122,58,95,95,105,110,105,116,95,95,0] /* |Oz:__init__\00 */, "i8", ALLOC_NORMAL);
__str27346=allocate([105,108,108,101,103,97,108,32,110,101,119,108,105,110,101,32,118,97,108,117,101,58,32,37,115,0] /* illegal newline valu */, "i8", ALLOC_NORMAL);
__str28347=allocate([105,110,105,116,105,97,108,95,118,97,108,117,101,32,109,117,115,116,32,98,101,32,117,110,105,99,111,100,101,32,111,114,32,78,111,110,101,44,32,110,111,116,32,37,46,50,48,48,115,0] /* initial_value must b */, "i8", ALLOC_NORMAL);
__str29348=allocate([79,105,0] /* Oi\00 */, "i8", ALLOC_NORMAL);
__str30349=allocate([40,79,79,110,78,41,0] /* (OOnN)\00 */, "i8", ALLOC_NORMAL);
__str31350=allocate([115,116,97,116,101,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* state != ((void _)0) */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___9352=allocate([115,116,114,105,110,103,105,111,95,115,101,116,115,116,97,116,101,0] /* stringio_setstate\00 */, "i8", ALLOC_NORMAL);
__str32351=allocate([37,46,50,48,48,115,46,95,95,115,101,116,115,116,97,116,101,95,95,32,97,114,103,117,109,101,110,116,32,115,104,111,117,108,100,32,98,101,32,52,45,116,117,112,108,101,44,32,103,111,116,32,37,46,50,48,48,115,0] /* %.200s.__setstate__  */, "i8", ALLOC_NORMAL);
__str33352=allocate([116,104,105,114,100,32,105,116,101,109,32,111,102,32,115,116,97,116,101,32,109,117,115,116,32,98,101,32,97,110,32,105,110,116,101,103,101,114,44,32,103,111,116,32,37,46,50,48,48,115,0] /* third item of state  */, "i8", ALLOC_NORMAL);
__str34353=allocate([112,111,115,105,116,105,111,110,32,118,97,108,117,101,32,99,97,110,110,111,116,32,98,101,32,110,101,103,97,116,105,118,101,0] /* position value canno */, "i8", ALLOC_NORMAL);
__str35354=allocate([102,111,117,114,116,104,32,105,116,101,109,32,111,102,32,115,116,97,116,101,32,115,104,111,117,108,100,32,98,101,32,97,32,100,105,99,116,44,32,103,111,116,32,97,32,37,46,50,48,48,115,0] /* fourth item of state */, "i8", ALLOC_NORMAL);
__str36355=allocate([99,108,111,115,101,0] /* close\00 */, "i8", ALLOC_NORMAL);
__str37356=allocate([103,101,116,118,97,108,117,101,0] /* getvalue\00 */, "i8", ALLOC_NORMAL);
__str38357=allocate([114,101,97,100,0] /* read\00 */, "i8", ALLOC_NORMAL);
__str39358=allocate([114,101,97,100,108,105,110,101,0] /* readline\00 */, "i8", ALLOC_NORMAL);
__str40359=allocate([116,101,108,108,0] /* tell\00 */, "i8", ALLOC_NORMAL);
__str41360=allocate([116,114,117,110,99,97,116,101,0] /* truncate\00 */, "i8", ALLOC_NORMAL);
__str42361=allocate([115,101,101,107,0] /* seek\00 */, "i8", ALLOC_NORMAL);
__str43362=allocate([119,114,105,116,101,0] /* write\00 */, "i8", ALLOC_NORMAL);
__str44363=allocate([115,101,101,107,97,98,108,101,0] /* seekable\00 */, "i8", ALLOC_NORMAL);
__str45364=allocate([114,101,97,100,97,98,108,101,0] /* readable\00 */, "i8", ALLOC_NORMAL);
__str46365=allocate([119,114,105,116,97,98,108,101,0] /* writable\00 */, "i8", ALLOC_NORMAL);
__str47366=allocate([95,95,103,101,116,115,116,97,116,101,95,95,0] /* __getstate__\00 */, "i8", ALLOC_NORMAL);
__str48367=allocate([95,95,115,101,116,115,116,97,116,101,95,95,0] /* __setstate__\00 */, "i8", ALLOC_NORMAL);
_stringio_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str49368=allocate([99,108,111,115,101,100,0] /* closed\00 */, "i8", ALLOC_NORMAL);
__str50369=allocate([110,101,119,108,105,110,101,115,0] /* newlines\00 */, "i8", ALLOC_NORMAL);
__str51370=allocate([108,105,110,101,95,98,117,102,102,101,114,105,110,103,0] /* line_buffering\00 */, "i8", ALLOC_NORMAL);
_stringio_getset=allocate(80, ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str52371=allocate([95,105,111,46,83,116,114,105,110,103,73,79,0] /* _io.StringIO\00 */, "i8", ALLOC_NORMAL);
_PyStringIO_Type=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_textiobase_doc=allocate([66,97,115,101,32,99,108,97,115,115,32,102,111,114,32,116,101,120,116,32,73,47,79,46,10,10,84,104,105,115,32,99,108,97,115,115,32,112,114,111,118,105,100,101,115,32,97,32,99,104,97,114,97,99,116,101,114,32,97,110,100,32,108,105,110,101,32,98,97,115,101,100,32,105,110,116,101,114,102,97,99,101,32,116,111,32,115,116,114,101,97,109,10,73,47,79,46,32,84,104,101,114,101,32,105,115,32,110,111,32,114,101,97,100,105,110,116,111,32,109,101,116,104,111,100,32,98,101,99,97,117,115,101,32,80,121,116,104,111,110,39,115,32,99,104,97,114,97,99,116,101,114,32,115,116,114,105,110,103,115,10,97,114,101,32,105,109,109,117,116,97,98,108,101,46,32,84,104,101,114,101,32,105,115,32,110,111,32,112,117,98,108,105,99,32,99,111,110,115,116,114,117,99,116,111,114,46,10,0] /* Base class for text  */, "i8", ALLOC_NORMAL);
_textiobase_detach_doc=allocate([83,101,112,97,114,97,116,101,32,116,104,101,32,117,110,100,101,114,108,121,105,110,103,32,98,117,102,102,101,114,32,102,114,111,109,32,116,104,101,32,84,101,120,116,73,79,66,97,115,101,32,97,110,100,32,114,101,116,117,114,110,32,105,116,46,10,10,65,102,116,101,114,32,116,104,101,32,117,110,100,101,114,108,121,105,110,103,32,98,117,102,102,101,114,32,104,97,115,32,98,101,101,110,32,100,101,116,97,99,104,101,100,44,32,116,104,101,32,84,101,120,116,73,79,32,105,115,32,105,110,32,97,110,10,117,110,117,115,97,98,108,101,32,115,116,97,116,101,46,10,0] /* Separate the underly */, "i8", ALLOC_NORMAL);
__str374=allocate([100,101,116,97,99,104,0] /* detach\00 */, "i8", ALLOC_NORMAL);
_textiobase_read_doc=allocate([82,101,97,100,32,97,116,32,109,111,115,116,32,110,32,99,104,97,114,97,99,116,101,114,115,32,102,114,111,109,32,115,116,114,101,97,109,46,10,10,82,101,97,100,32,102,114,111,109,32,117,110,100,101,114,108,121,105,110,103,32,98,117,102,102,101,114,32,117,110,116,105,108,32,119,101,32,104,97,118,101,32,110,32,99,104,97,114,97,99,116,101,114,115,32,111,114,32,119,101,32,104,105,116,32,69,79,70,46,10,73,102,32,110,32,105,115,32,110,101,103,97,116,105,118,101,32,111,114,32,111,109,105,116,116,101,100,44,32,114,101,97,100,32,117,110,116,105,108,32,69,79,70,46,10,0] /* Read at most n chara */, "i8", ALLOC_NORMAL);
__str1375=allocate([114,101,97,100,0] /* read\00 */, "i8", ALLOC_NORMAL);
_textiobase_readline_doc=allocate([82,101,97,100,32,117,110,116,105,108,32,110,101,119,108,105,110,101,32,111,114,32,69,79,70,46,10,10,82,101,116,117,114,110,115,32,97,110,32,101,109,112,116,121,32,115,116,114,105,110,103,32,105,102,32,69,79,70,32,105,115,32,104,105,116,32,105,109,109,101,100,105,97,116,101,108,121,46,10,0] /* Read until newline o */, "i8", ALLOC_NORMAL);
__str2376=allocate([114,101,97,100,108,105,110,101,0] /* readline\00 */, "i8", ALLOC_NORMAL);
_textiobase_write_doc=allocate([87,114,105,116,101,32,115,116,114,105,110,103,32,116,111,32,115,116,114,101,97,109,46,10,82,101,116,117,114,110,115,32,116,104,101,32,110,117,109,98,101,114,32,111,102,32,99,104,97,114,97,99,116,101,114,115,32,119,114,105,116,116,101,110,32,40,119,104,105,99,104,32,105,115,32,97,108,119,97,121,115,32,101,113,117,97,108,32,116,111,10,116,104,101,32,108,101,110,103,116,104,32,111,102,32,116,104,101,32,115,116,114,105,110,103,41,46,10,0] /* Write string to stre */, "i8", ALLOC_NORMAL);
__str3377=allocate([119,114,105,116,101,0] /* write\00 */, "i8", ALLOC_NORMAL);
_textiobase_encoding_doc=allocate([69,110,99,111,100,105,110,103,32,111,102,32,116,104,101,32,116,101,120,116,32,115,116,114,101,97,109,46,10,10,83,117,98,99,108,97,115,115,101,115,32,115,104,111,117,108,100,32,111,118,101,114,114,105,100,101,46,10,0] /* Encoding of the text */, "i8", ALLOC_NORMAL);
_textiobase_newlines_doc=allocate([76,105,110,101,32,101,110,100,105,110,103,115,32,116,114,97,110,115,108,97,116,101,100,32,115,111,32,102,97,114,46,10,10,79,110,108,121,32,108,105,110,101,32,101,110,100,105,110,103,115,32,116,114,97,110,115,108,97,116,101,100,32,100,117,114,105,110,103,32,114,101,97,100,105,110,103,32,97,114,101,32,99,111,110,115,105,100,101,114,101,100,46,10,10,83,117,98,99,108,97,115,115,101,115,32,115,104,111,117,108,100,32,111,118,101,114,114,105,100,101,46,10,0] /* Line endings transla */, "i8", ALLOC_NORMAL);
_textiobase_errors_doc=allocate([84,104,101,32,101,114,114,111,114,32,115,101,116,116,105,110,103,32,111,102,32,116,104,101,32,100,101,99,111,100,101,114,32,111,114,32,101,110,99,111,100,101,114,46,10,10,83,117,98,99,108,97,115,115,101,115,32,115,104,111,117,108,100,32,111,118,101,114,114,105,100,101,46,10,0] /* The error setting of */, "i8", ALLOC_NORMAL);
_textiobase_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str4378=allocate([101,110,99,111,100,105,110,103,0] /* encoding\00 */, "i8", ALLOC_NORMAL);
__str5379=allocate([110,101,119,108,105,110,101,115,0] /* newlines\00 */, "i8", ALLOC_NORMAL);
__str6380=allocate([101,114,114,111,114,115,0] /* errors\00 */, "i8", ALLOC_NORMAL);
_textiobase_getset=allocate(80, ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str7381=allocate([95,105,111,46,95,84,101,120,116,73,79,66,97,115,101,0] /* _io._TextIOBase\00 */, "i8", ALLOC_NORMAL);
_PyTextIOBase_Type=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132587, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_incrementalnewlinedecoder_doc=allocate([67,111,100,101,99,32,117,115,101,100,32,119,104,101,110,32,114,101,97,100,105,110,103,32,97,32,102,105,108,101,32,105,110,32,117,110,105,118,101,114,115,97,108,32,110,101,119,108,105,110,101,115,32,109,111,100,101,46,32,32,73,116,32,119,114,97,112,115,10,97,110,111,116,104,101,114,32,105,110,99,114,101,109,101,110,116,97,108,32,100,101,99,111,100,101,114,44,32,116,114,97,110,115,108,97,116,105,110,103,32,92,114,92,110,32,97,110,100,32,92,114,32,105,110,116,111,32,92,110,46,32,32,73,116,32,97,108,115,111,10,114,101,99,111,114,100,115,32,116,104,101,32,116,121,112,101,115,32,111,102,32,110,101,119,108,105,110,101,115,32,101,110,99,111,117,110,116,101,114,101,100,46,32,32,87,104,101,110,32,117,115,101,100,32,119,105,116,104,10,116,114,97,110,115,108,97,116,101,61,70,97,108,115,101,44,32,105,116,32,101,110,115,117,114,101,115,32,116,104,97,116,32,116,104,101,32,110,101,119,108,105,110,101,32,115,101,113,117,101,110,99,101,32,105,115,32,114,101,116,117,114,110,101,100,32,105,110,10,111,110,101,32,112,105,101,99,101,46,32,87,104,101,110,32,117,115,101,100,32,119,105,116,104,32,100,101,99,111,100,101,114,61,78,111,110,101,44,32,105,116,32,101,120,112,101,99,116,115,32,117,110,105,99,111,100,101,32,115,116,114,105,110,103,115,32,97,115,10,100,101,99,111,100,101,32,105,110,112,117,116,32,97,110,100,32,116,114,97,110,115,108,97,116,101,115,32,110,101,119,108,105,110,101,115,32,119,105,116,104,111,117,116,32,102,105,114,115,116,32,105,110,118,111,107,105,110,103,32,97,110,32,101,120,116,101,114,110,97,108,10,100,101,99,111,100,101,114,46,10,0] /* Codec used when read */, "i8", ALLOC_NORMAL);
_C_1_8505=allocate(16, "i8*", ALLOC_NORMAL);
__str8383=allocate([100,101,99,111,100,101,114,0] /* decoder\00 */, "i8", ALLOC_NORMAL);
__str9384=allocate([116,114,97,110,115,108,97,116,101,0] /* translate\00 */, "i8", ALLOC_NORMAL);
__str10385=allocate([79,105,124,79,58,73,110,99,114,101,109,101,110,116,97,108,78,101,119,108,105,110,101,68,101,99,111,100,101,114,0] /* Oi|O:IncrementalNewl */, "i8", ALLOC_NORMAL);
__str11386=allocate([115,116,114,105,99,116,0] /* strict\00 */, "i8", ALLOC_NORMAL);
__str12387=allocate([73,110,99,114,101,109,101,110,116,97,108,78,101,119,108,105,110,101,68,101,99,111,100,101,114,46,95,95,105,110,105,116,95,95,32,110,111,116,32,99,97,108,108,101,100,0] /* IncrementalNewlineDe */, "i8", ALLOC_NORMAL);
__str13388=allocate([100,101,99,111,100,101,114,32,115,104,111,117,108,100,32,114,101,116,117,114,110,32,97,32,115,116,114,105,110,103,32,114,101,115,117,108,116,0] /* decoder should retur */, "i8", ALLOC_NORMAL);
__str14389=allocate([40,40,40,80,121,79,98,106,101,99,116,42,41,40,116,114,97,110,115,108,97,116,101,100,41,41,45,62,111,98,95,114,101,102,99,110,116,41,32,61,61,32,49,0] /* (((PyObject_)(transl */, "i8", ALLOC_NORMAL);
__str15390=allocate([46,46,47,99,112,121,116,104,111,110,47,77,111,100,117,108,101,115,47,95,105,111,47,116,101,120,116,105,111,46,99,0] /* ../cpython/Modules/_ */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8596=allocate([95,80,121,73,110,99,114,101,109,101,110,116,97,108,78,101,119,108,105,110,101,68,101,99,111,100,101,114,95,100,101,99,111,100,101,0] /* _PyIncrementalNewlin */, "i8", ALLOC_NORMAL);
_C_56_8818=allocate(12, "i8*", ALLOC_NORMAL);
__str16391=allocate([105,110,112,117,116,0] /* input\00 */, "i8", ALLOC_NORMAL);
__str17392=allocate([102,105,110,97,108,0] /* final\00 */, "i8", ALLOC_NORMAL);
__str18393=allocate([79,124,105,58,73,110,99,114,101,109,101,110,116,97,108,78,101,119,108,105,110,101,68,101,99,111,100,101,114,0] /* O|i:IncrementalNewli */, "i8", ALLOC_NORMAL);
__str19394=allocate([40,79,75,41,0] /* (OK)\00 */, "i8", ALLOC_NORMAL);
__str20395=allocate(1, "i8", ALLOC_NORMAL);
__str21396=allocate([78,75,0] /* NK\00 */, "i8", ALLOC_NORMAL);
__str22397=allocate([115,101,116,115,116,97,116,101,0] /* setstate\00 */, "i8", ALLOC_NORMAL);
__str23398=allocate([40,40,79,75,41,41,0] /* ((OK))\00 */, "i8", ALLOC_NORMAL);
__str24399=allocate([13,0] /* \0D\00 */, "i8", ALLOC_NORMAL);
__str25400=allocate([10,0] /* \0A\00 */, "i8", ALLOC_NORMAL);
__str26401=allocate([13,10,0] /* \0D\0A\00 */, "i8", ALLOC_NORMAL);
__str27402=allocate([115,115,0] /* ss\00 */, "i8", ALLOC_NORMAL);
__str28403=allocate([115,115,115,0] /* sss\00 */, "i8", ALLOC_NORMAL);
__str29404=allocate([100,101,99,111,100,101,0] /* decode\00 */, "i8", ALLOC_NORMAL);
__str30405=allocate([103,101,116,115,116,97,116,101,0] /* getstate\00 */, "i8", ALLOC_NORMAL);
__str31406=allocate([114,101,115,101,116,0] /* reset\00 */, "i8", ALLOC_NORMAL);
_incrementalnewlinedecoder_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_incrementalnewlinedecoder_getset=allocate(40, ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str32407=allocate([95,105,111,46,73,110,99,114,101,109,101,110,116,97,108,78,101,119,108,105,110,101,68,101,99,111,100,101,114,0] /* _io.IncrementalNewli */, "i8", ALLOC_NORMAL);
_PyIncrementalNewlineDecoder_Type=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132587, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_textiowrapper_doc=allocate([67,104,97,114,97,99,116,101,114,32,97,110,100,32,108,105,110,101,32,98,97,115,101,100,32,108,97,121,101,114,32,111,118,101,114,32,97,32,66,117,102,102,101,114,101,100,73,79,66,97,115,101,32,111,98,106,101,99,116,44,32,98,117,102,102,101,114,46,10,10,101,110,99,111,100,105,110,103,32,103,105,118,101,115,32,116,104,101,32,110,97,109,101,32,111,102,32,116,104,101,32,101,110,99,111,100,105,110,103,32,116,104,97,116,32,116,104,101,32,115,116,114,101,97,109,32,119,105,108,108,32,98,101,10,100,101,99,111,100,101,100,32,111,114,32,101,110,99,111,100,101,100,32,119,105,116,104,46,32,73,116,32,100,101,102,97,117,108,116,115,32,116,111,32,108,111,99,97,108,101,46,103,101,116,112,114,101,102,101,114,114,101,100,101,110,99,111,100,105,110,103,46,10,10,101,114,114,111,114,115,32,100,101,116,101,114,109,105,110,101,115,32,116,104,101,32,115,116,114,105,99,116,110,101,115,115,32,111,102,32,101,110,99,111,100,105,110,103,32,97,110,100,32,100,101,99,111,100,105,110,103,32,40,115,101,101,32,116,104,101,10,99,111,100,101,99,115,46,114,101,103,105,115,116,101,114,41,32,97,110,100,32,100,101,102,97,117,108,116,115,32,116,111,32,34,115,116,114,105,99,116,34,46,10,10,110,101,119,108,105,110,101,32,99,97,110,32,98,101,32,78,111,110,101,44,32,39,39,44,32,39,92,110,39,44,32,39,92,114,39,44,32,111,114,32,39,92,114,92,110,39,46,32,32,73,116,32,99,111,110,116,114,111,108,115,32,116,104,101,10,104,97,110,100,108,105,110,103,32,111,102,32,108,105,110,101,32,101,110,100,105,110,103,115,46,32,73,102,32,105,116,32,105,115,32,78,111,110,101,44,32,117,110,105,118,101,114,115,97,108,32,110,101,119,108,105,110,101,115,32,105,115,10,101,110,97,98,108,101,100,46,32,32,87,105,116,104,32,116,104,105,115,32,101,110,97,98,108,101,100,44,32,111,110,32,105,110,112,117,116,44,32,116,104,101,32,108,105,110,101,115,32,101,110,100,105,110,103,115,32,39,92,110,39,44,32,39,92,114,39,44,10,111,114,32,39,92,114,92,110,39,32,97,114,101,32,116,114,97,110,115,108,97,116,101,100,32,116,111,32,39,92,110,39,32,98,101,102,111,114,101,32,98,101,105,110,103,32,114,101,116,117,114,110,101,100,32,116,111,32,116,104,101,10,99,97,108,108,101,114,46,32,67,111,110,118,101,114,115,101,108,121,44,32,111,110,32,111,117,116,112,117,116,44,32,39,92,110,39,32,105,115,32,116,114,97,110,115,108,97,116,101,100,32,116,111,32,116,104,101,32,115,121,115,116,101,109,10,100,101,102,97,117,108,116,32,108,105,110,101,32,115,101,112,101,114,97,116,111,114,44,32,111,115,46,108,105,110,101,115,101,112,46,32,73,102,32,110,101,119,108,105,110,101,32,105,115,32,97,110,121,32,111,116,104,101,114,32,111,102,32,105,116,115,10,108,101,103,97,108,32,118,97,108,117,101,115,44,32,116,104,97,116,32,110,101,119,108,105,110,101,32,98,101,99,111,109,101,115,32,116,104,101,32,110,101,119,108,105,110,101,32,119,104,101,110,32,116,104,101,32,102,105,108,101,32,105,115,32,114,101,97,100,10,97,110,100,32,105,116,32,105,115,32,114,101,116,117,114,110,101,100,32,117,110,116,114,97,110,115,108,97,116,101,100,46,32,79,110,32,111,117,116,112,117,116,44,32,39,92,110,39,32,105,115,32,99,111,110,118,101,114,116,101,100,32,116,111,32,116,104,101,10,110,101,119,108,105,110,101,46,10,10,73,102,32,108,105,110,101,95,98,117,102,102,101,114,105,110,103,32,105,115,32,84,114,117,101,44,32,97,32,99,97,108,108,32,116,111,32,102,108,117,115,104,32,105,115,32,105,109,112,108,105,101,100,32,119,104,101,110,32,97,32,99,97,108,108,32,116,111,10,119,114,105,116,101,32,99,111,110,116,97,105,110,115,32,97,32,110,101,119,108,105,110,101,32,99,104,97,114,97,99,116,101,114,46,0] /* Character and line b */, "i8", ALLOC_NORMAL);
_encodefuncs=allocate(80, ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0], ALLOC_NORMAL);
__str33409=allocate([97,115,99,105,105,0] /* ascii\00 */, "i8", ALLOC_NORMAL);
__str34410=allocate([105,115,111,56,56,53,57,45,49,0] /* iso8859-1\00 */, "i8", ALLOC_NORMAL);
__str35411=allocate([117,116,102,45,56,0] /* utf-8\00 */, "i8", ALLOC_NORMAL);
__str36412=allocate([117,116,102,45,49,54,45,98,101,0] /* utf-16-be\00 */, "i8", ALLOC_NORMAL);
__str37413=allocate([117,116,102,45,49,54,45,108,101,0] /* utf-16-le\00 */, "i8", ALLOC_NORMAL);
__str38414=allocate([117,116,102,45,49,54,0] /* utf-16\00 */, "i8", ALLOC_NORMAL);
__str39415=allocate([117,116,102,45,51,50,45,98,101,0] /* utf-32-be\00 */, "i8", ALLOC_NORMAL);
__str40416=allocate([117,116,102,45,51,50,45,108,101,0] /* utf-32-le\00 */, "i8", ALLOC_NORMAL);
__str41417=allocate([117,116,102,45,51,50,0] /* utf-32\00 */, "i8", ALLOC_NORMAL);
_C_89_9154=allocate(24, "i8*", ALLOC_NORMAL);
__str42418=allocate([98,117,102,102,101,114,0] /* buffer\00 */, "i8", ALLOC_NORMAL);
__str43419=allocate([110,101,119,108,105,110,101,0] /* newline\00 */, "i8", ALLOC_NORMAL);
__str44420=allocate([108,105,110,101,95,98,117,102,102,101,114,105,110,103,0] /* line_buffering\00 */, "i8", ALLOC_NORMAL);
__str45421=allocate([79,124,122,122,122,105,58,102,105,108,101,105,111,0] /* O|zzzi:fileio\00 */, "i8", ALLOC_NORMAL);
__str46422=allocate([105,108,108,101,103,97,108,32,110,101,119,108,105,110,101,32,118,97,108,117,101,58,32,37,115,0] /* illegal newline valu */, "i8", ALLOC_NORMAL);
__str47423=allocate([108,111,99,97,108,101,0] /* locale\00 */, "i8", ALLOC_NORMAL);
__str48424=allocate([103,101,116,112,114,101,102,101,114,114,101,100,101,110,99,111,100,105,110,103,0] /* getpreferredencoding */, "i8", ALLOC_NORMAL);
__str49425=allocate([99,111,117,108,100,32,110,111,116,32,100,101,116,101,114,109,105,110,101,32,100,101,102,97,117,108,116,32,101,110,99,111,100,105,110,103,0] /* could not determine  */, "i8", ALLOC_NORMAL);
__str50426=allocate([114,101,97,100,97,98,108,101,0] /* readable\00 */, "i8", ALLOC_NORMAL);
__str51427=allocate([79,105,0] /* Oi\00 */, "i8", ALLOC_NORMAL);
__str52428=allocate([119,114,105,116,97,98,108,101,0] /* writable\00 */, "i8", ALLOC_NORMAL);
__str53429=allocate([110,97,109,101,0] /* name\00 */, "i8", ALLOC_NORMAL);
__str54430=allocate([114,97,119,0] /* raw\00 */, "i8", ALLOC_NORMAL);
__str55431=allocate([115,101,101,107,97,98,108,101,0] /* seekable\00 */, "i8", ALLOC_NORMAL);
__str56432=allocate([103,45,62,103,99,46,103,99,95,114,101,102,115,32,33,61,32,40,45,50,41,0] /* g->gc.gc_refs != (-2 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___9695=allocate([116,101,120,116,105,111,119,114,97,112,112,101,114,95,100,101,97,108,108,111,99,0] /* textiowrapper_deallo */, "i8", ALLOC_NORMAL);
__str57433=allocate([117,110,100,101,114,108,121,105,110,103,32,98,117,102,102,101,114,32,104,97,115,32,98,101,101,110,32,100,101,116,97,99,104,101,100,0] /* underlying buffer ha */, "i8", ALLOC_NORMAL);
__str58434=allocate([73,47,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,117,110,105,110,105,116,105,97,108,105,122,101,100,32,111,98,106,101,99,116,0] /* I/O operation on uni */, "i8", ALLOC_NORMAL);
__str59435=allocate([85,58,119,114,105,116,101,0] /* U:write\00 */, "i8", ALLOC_NORMAL);
__str60436=allocate([73,47,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,99,108,111,115,101,100,32,102,105,108,101,46,0] /* I/O operation on clo */, "i8", ALLOC_NORMAL);
__str61437=allocate([110,111,116,32,119,114,105,116,97,98,108,101,0] /* not writable\00 */, "i8", ALLOC_NORMAL);
__str62438=allocate([114,101,112,108,97,99,101,0] /* replace\00 */, "i8", ALLOC_NORMAL);
__str63439=allocate([97,118,97,105,108,32,62,61,32,48,0] /* avail >= 0\00 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___10189=allocate([116,101,120,116,105,111,119,114,97,112,112,101,114,95,103,101,116,95,100,101,99,111,100,101,100,95,99,104,97,114,115,0] /* textiowrapper_get_de */, "i8", ALLOC_NORMAL);
__str64440=allocate([110,111,116,32,114,101,97,100,97,98,108,101,0] /* not readable\00 */, "i8", ALLOC_NORMAL);
__str65441=allocate([40,79,79,41,0] /* (OO)\00 */, "i8", ALLOC_NORMAL);
__str66442=allocate([40,40,40,40,40,40,80,121,79,98,106,101,99,116,42,41,40,105,110,112,117,116,95,99,104,117,110,107,41,41,45,62,111,98,95,116,121,112,101,41,41,45,62,116,112,95,102,108,97,103,115,32,38,32,40,40,49,76,60,60,50,55,41,41,41,32,33,61,32,48,41,0] /* ((((((PyObject_)(inp */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___10233=allocate([116,101,120,116,105,111,119,114,97,112,112,101,114,95,114,101,97,100,95,99,104,117,110,107,0] /* textiowrapper_read_c */, "i8", ALLOC_NORMAL);
__str67443=allocate([40,40,40,40,40,40,80,121,79,98,106,101,99,116,42,41,40,110,101,120,116,95,105,110,112,117,116,41,41,45,62,111,98,95,116,121,112,101,41,41,45,62,116,112,95,102,108,97,103,115,32,38,32,40,40,49,76,60,60,50,55,41,41,41,32,33,61,32,48,41,0] /* ((((((PyObject_)(nex */, "i8", ALLOC_NORMAL);
__str68444=allocate([78,78,0] /* NN\00 */, "i8", ALLOC_NORMAL);
__str69445=allocate([124,79,38,58,114,101,97,100,0] /* |O&:read\00 */, "i8", ALLOC_NORMAL);
__str70446=allocate([115,101,108,102,45,62,100,101,99,111,100,101,100,95,99,104,97,114,115,95,117,115,101,100,32,61,61,32,48,0] /* self->decoded_chars_ */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___10735=allocate([95,116,101,120,116,105,111,119,114,97,112,112,101,114,95,114,101,97,100,108,105,110,101,0] /* _textiowrapper_readl */, "i8", ALLOC_NORMAL);
__str71447=allocate([124,79,58,114,101,97,100,108,105,110,101,0] /* |O:readline\00 */, "i8", ALLOC_NORMAL);
__str72448=allocate([105,110,116,101,103,101,114,32,97,114,103,117,109,101,110,116,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,39,37,46,50,48,48,115,39,0] /* integer argument exp */, "i8", ALLOC_NORMAL);
__str73449=allocate([40,40,115,105,41,41,0] /* ((si))\00 */, "i8", ALLOC_NORMAL);
__str74=allocate([79,124,105,58,115,101,101,107,0] /* O|i:seek\00 */, "i8", ALLOC_NORMAL);
__str75=allocate([117,110,100,101,114,108,121,105,110,103,32,115,116,114,101,97,109,32,105,115,32,110,111,116,32,115,101,101,107,97,98,108,101,0] /* underlying stream is */, "i8", ALLOC_NORMAL);
__str76=allocate([99,97,110,39,116,32,100,111,32,110,111,110,122,101,114,111,32,99,117,114,45,114,101,108,97,116,105,118,101,32,115,101,101,107,115,0] /* can't do nonzero cur */, "i8", ALLOC_NORMAL);
__str77=allocate([116,101,108,108,0] /* tell\00 */, "i8", ALLOC_NORMAL);
__str78=allocate([99,97,110,39,116,32,100,111,32,110,111,110,122,101,114,111,32,101,110,100,45,114,101,108,97,116,105,118,101,32,115,101,101,107,115,0] /* can't do nonzero end */, "i8", ALLOC_NORMAL);
__str79=allocate([102,108,117,115,104,0] /* flush\00 */, "i8", ALLOC_NORMAL);
__str80=allocate([115,101,101,107,0] /* seek\00 */, "i8", ALLOC_NORMAL);
__str81=allocate([105,105,0] /* ii\00 */, "i8", ALLOC_NORMAL);
__str82=allocate([105,110,118,97,108,105,100,32,119,104,101,110,99,101,32,40,37,100,44,32,115,104,111,117,108,100,32,98,101,32,48,44,32,49,32,111,114,32,50,41,0] /* invalid whence (%d,  */, "i8", ALLOC_NORMAL);
__str83=allocate([110,101,103,97,116,105,118,101,32,115,101,101,107,32,112,111,115,105,116,105,111,110,32,37,115,0] /* negative seek positi */, "i8", ALLOC_NORMAL);
__str84=allocate([105,0] /* i\00 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___11188=allocate([116,101,120,116,105,111,119,114,97,112,112,101,114,95,115,101,101,107,0] /* textiowrapper_seek\0 */, "i8", ALLOC_NORMAL);
__str85=allocate([105,78,0] /* iN\00 */, "i8", ALLOC_NORMAL);
__str86=allocate([99,97,110,39,116,32,114,101,115,116,111,114,101,32,108,111,103,105,99,97,108,32,102,105,108,101,32,112,111,115,105,116,105,111,110,0] /* can't restore logica */, "i8", ALLOC_NORMAL);
__str87=allocate([105,115,0] /* is\00 */, "i8", ALLOC_NORMAL);
__str88=allocate([116,101,108,108,105,110,103,32,112,111,115,105,116,105,111,110,32,100,105,115,97,98,108,101,100,32,98,121,32,110,101,120,116,40,41,32,99,97,108,108,0] /* telling position dis */, "i8", ALLOC_NORMAL);
__str89=allocate([115,101,108,102,45,62,100,101,99,111,100,101,100,95,99,104,97,114,115,32,61,61,32,40,40,118,111,105,100,32,42,41,48,41,32,124,124,32,80,121,85,110,105,99,111,100,101,85,67,83,50,95,71,101,116,83,105,122,101,40,115,101,108,102,45,62,100,101,99,111,100,101,100,95,99,104,97,114,115,41,32,61,61,32,48,0] /* self->decoded_chars  */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___11475=allocate([116,101,120,116,105,111,119,114,97,112,112,101,114,95,116,101,108,108,0] /* textiowrapper_tell\0 */, "i8", ALLOC_NORMAL);
__str90=allocate([40,105,79,41,0] /* (iO)\00 */, "i8", ALLOC_NORMAL);
__str91=allocate([115,35,0] /* s#\00 */, "i8", ALLOC_NORMAL);
__str92=allocate([40,40,40,40,40,40,80,121,79,98,106,101,99,116,42,41,40,100,101,99,111,100,101,100,41,41,45,62,111,98,95,116,121,112,101,41,41,45,62,116,112,95,102,108,97,103,115,32,38,32,40,40,49,76,60,60,50,56,41,41,41,32,33,61,32,48,41,0] /* ((((((PyObject_)(dec */, "i8", ALLOC_NORMAL);
__str93=allocate([40,115,35,105,41,0] /* (s#i)\00 */, "i8", ALLOC_NORMAL);
__str94=allocate([115,105,0] /* si\00 */, "i8", ALLOC_NORMAL);
__str95=allocate([99,97,110,39,116,32,114,101,99,111,110,115,116,114,117,99,116,32,108,111,103,105,99,97,108,32,102,105,108,101,32,112,111,115,105,116,105,111,110,0] /* can't reconstruct lo */, "i8", ALLOC_NORMAL);
__str96=allocate([40,79,41,0] /* (O)\00 */, "i8", ALLOC_NORMAL);
__str97=allocate([124,79,58,116,114,117,110,99,97,116,101,0] /* |O:truncate\00 */, "i8", ALLOC_NORMAL);
__str98=allocate([60,95,105,111,46,84,101,120,116,73,79,87,114,97,112,112,101,114,32,101,110,99,111,100,105,110,103,61,37,115,62,0] /* <_io.TextIOWrapper e */, "i8", ALLOC_NORMAL);
__str99=allocate([60,95,105,111,46,84,101,120,116,73,79,87,114,97,112,112,101,114,32,110,97,109,101,61,37,115,32,101,110,99,111,100,105,110,103,61,37,115,62,0] /* <_io.TextIOWrapper n */, "i8", ALLOC_NORMAL);
__str100=allocate([102,105,108,101,110,111,0] /* fileno\00 */, "i8", ALLOC_NORMAL);
__str101=allocate([105,115,97,116,116,121,0] /* isatty\00 */, "i8", ALLOC_NORMAL);
__str102=allocate([99,108,111,115,101,0] /* close\00 */, "i8", ALLOC_NORMAL);
__str103=allocate([114,101,97,100,108,105,110,101,40,41,32,115,104,111,117,108,100,32,104,97,118,101,32,114,101,116,117,114,110,101,100,32,97,110,32,115,116,114,32,111,98,106,101,99,116,44,32,110,111,116,32,39,37,46,50,48,48,115,39,0] /* readline() should ha */, "i8", ALLOC_NORMAL);
__str104=allocate([97,32,115,116,114,105,99,116,108,121,32,112,111,115,105,116,105,118,101,32,105,110,116,101,103,101,114,32,105,115,32,114,101,113,117,105,114,101,100,0] /* a strictly positive  */, "i8", ALLOC_NORMAL);
__str105=allocate([116,114,117,110,99,97,116,101,0] /* truncate\00 */, "i8", ALLOC_NORMAL);
_textiowrapper_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_textiowrapper_members=allocate([0, 0, 0, 0, 6, 0, 0, 0, 24, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 20, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 48, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str106=allocate([99,108,111,115,101,100,0] /* closed\00 */, "i8", ALLOC_NORMAL);
__str107=allocate([95,67,72,85,78,75,95,83,73,90,69,0] /* _CHUNK_SIZE\00 */, "i8", ALLOC_NORMAL);
_textiowrapper_getset=allocate(120, ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str108=allocate([95,105,111,46,84,101,120,116,73,79,87,114,97,112,112,101,114,0] /* _io.TextIOWrapper\00 */, "i8", ALLOC_NORMAL);
_PyTextIOWrapper_Type=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
HEAP[_bufferediobase_methods]=((__str4)&4294967295);
HEAP[_bufferediobase_methods+4]=(FUNCTION_TABLE_OFFSET + 4);
HEAP[_bufferediobase_methods+12]=((_bufferediobase_detach_doc)&4294967295);
HEAP[_bufferediobase_methods+16]=((__str1)&4294967295);
HEAP[_bufferediobase_methods+20]=(FUNCTION_TABLE_OFFSET + 6);
HEAP[_bufferediobase_methods+28]=((_bufferediobase_read_doc)&4294967295);
HEAP[_bufferediobase_methods+32]=((__str5)&4294967295);
HEAP[_bufferediobase_methods+36]=(FUNCTION_TABLE_OFFSET + 8);
HEAP[_bufferediobase_methods+44]=((_bufferediobase_read1_doc)&4294967295);
HEAP[_bufferediobase_methods+48]=((__str7)&4294967295);
HEAP[_bufferediobase_methods+52]=(FUNCTION_TABLE_OFFSET + 10);
HEAP[_bufferediobase_methods+64]=((__str6)&4294967295);
HEAP[_bufferediobase_methods+68]=(FUNCTION_TABLE_OFFSET + 12);
HEAP[_bufferediobase_methods+76]=((_bufferediobase_write_doc)&4294967295);
HEAP[_PyBufferedIOBase_Type+12]=((__str8)&4294967295);
HEAP[_PyBufferedIOBase_Type+88]=((_bufferediobase_doc)&4294967295);
HEAP[_PyBufferedIOBase_Type+116]=((_bufferediobase_methods)&4294967295);
HEAP[_PyBufferedIOBase_Type+128]=_PyIOBase_Type;
HEAP[_C_170_10029]=((__str35)&4294967295);
HEAP[_C_170_10029+4]=((__str36)&4294967295);
HEAP[_bufferedreader_methods]=((__str4)&4294967295);
HEAP[_bufferedreader_methods+4]=(FUNCTION_TABLE_OFFSET + 14);
HEAP[_bufferedreader_methods+16]=((__str40)&4294967295);
HEAP[_bufferedreader_methods+20]=(FUNCTION_TABLE_OFFSET + 16);
HEAP[_bufferedreader_methods+32]=((__str41)&4294967295);
HEAP[_bufferedreader_methods+36]=(FUNCTION_TABLE_OFFSET + 18);
HEAP[_bufferedreader_methods+48]=((__str42)&4294967295);
HEAP[_bufferedreader_methods+52]=(FUNCTION_TABLE_OFFSET + 20);
HEAP[_bufferedreader_methods+64]=((__str43)&4294967295);
HEAP[_bufferedreader_methods+68]=(FUNCTION_TABLE_OFFSET + 22);
HEAP[_bufferedreader_methods+80]=((__str44)&4294967295);
HEAP[_bufferedreader_methods+84]=(FUNCTION_TABLE_OFFSET + 24);
HEAP[_bufferedreader_methods+96]=((__str45)&4294967295);
HEAP[_bufferedreader_methods+100]=(FUNCTION_TABLE_OFFSET + 26);
HEAP[_bufferedreader_methods+112]=((__str46)&4294967295);
HEAP[_bufferedreader_methods+116]=(FUNCTION_TABLE_OFFSET + 28);
HEAP[_bufferedreader_methods+128]=((__str1)&4294967295);
HEAP[_bufferedreader_methods+132]=(FUNCTION_TABLE_OFFSET + 30);
HEAP[_bufferedreader_methods+144]=((__str47)&4294967295);
HEAP[_bufferedreader_methods+148]=(FUNCTION_TABLE_OFFSET + 32);
HEAP[_bufferedreader_methods+160]=((__str5)&4294967295);
HEAP[_bufferedreader_methods+164]=(FUNCTION_TABLE_OFFSET + 34);
HEAP[_bufferedreader_methods+176]=((__str48)&4294967295);
HEAP[_bufferedreader_methods+180]=(FUNCTION_TABLE_OFFSET + 36);
HEAP[_bufferedreader_methods+192]=((__str49)&4294967295);
HEAP[_bufferedreader_methods+196]=(FUNCTION_TABLE_OFFSET + 38);
HEAP[_bufferedreader_methods+208]=((__str50)&4294967295);
HEAP[_bufferedreader_methods+212]=(FUNCTION_TABLE_OFFSET + 40);
HEAP[_bufferedreader_methods+224]=((__str51)&4294967295);
HEAP[_bufferedreader_methods+228]=(FUNCTION_TABLE_OFFSET + 42);
HEAP[_bufferedreader_members]=((__str35)&4294967295);
HEAP[_bufferedreader_getset]=((__str52)&4294967295);
HEAP[_bufferedreader_getset+4]=(FUNCTION_TABLE_OFFSET + 44);
HEAP[_bufferedreader_getset+20]=((__str13)&4294967295);
HEAP[_bufferedreader_getset+24]=(FUNCTION_TABLE_OFFSET + 46);
HEAP[_bufferedreader_getset+40]=((__str14)&4294967295);
HEAP[_bufferedreader_getset+44]=(FUNCTION_TABLE_OFFSET + 48);
HEAP[_PyBufferedReader_Type+12]=((__str53)&4294967295);
HEAP[_PyBufferedReader_Type+24]=(FUNCTION_TABLE_OFFSET + 50);
HEAP[_PyBufferedReader_Type+44]=(FUNCTION_TABLE_OFFSET + 52);
HEAP[_PyBufferedReader_Type+88]=((_bufferedreader_doc)&4294967295);
HEAP[_PyBufferedReader_Type+92]=(FUNCTION_TABLE_OFFSET + 54);
HEAP[_PyBufferedReader_Type+96]=(FUNCTION_TABLE_OFFSET + 56);
HEAP[_PyBufferedReader_Type+112]=(FUNCTION_TABLE_OFFSET + 58);
HEAP[_PyBufferedReader_Type+116]=_bufferedreader_methods;
HEAP[_PyBufferedReader_Type+120]=_bufferedreader_members;
HEAP[_PyBufferedReader_Type+124]=_bufferedreader_getset;
HEAP[_PyBufferedReader_Type+148]=(FUNCTION_TABLE_OFFSET + 60);
HEAP[_PyBufferedReader_Type+156]=(FUNCTION_TABLE_OFFSET + 62);
HEAP[_C_210_10564]=((__str35)&4294967295);
HEAP[_C_210_10564+4]=((__str36)&4294967295);
HEAP[_C_210_10564+8]=((__str55)&4294967295);
HEAP[_bufferedwriter_methods]=((__str41)&4294967295);
HEAP[_bufferedwriter_methods+4]=(FUNCTION_TABLE_OFFSET + 18);
HEAP[_bufferedwriter_methods+16]=((__str4)&4294967295);
HEAP[_bufferedwriter_methods+20]=(FUNCTION_TABLE_OFFSET + 14);
HEAP[_bufferedwriter_methods+32]=((__str42)&4294967295);
HEAP[_bufferedwriter_methods+36]=(FUNCTION_TABLE_OFFSET + 20);
HEAP[_bufferedwriter_methods+48]=((__str43)&4294967295);
HEAP[_bufferedwriter_methods+52]=(FUNCTION_TABLE_OFFSET + 22);
HEAP[_bufferedwriter_methods+64]=((__str44)&4294967295);
HEAP[_bufferedwriter_methods+68]=(FUNCTION_TABLE_OFFSET + 24);
HEAP[_bufferedwriter_methods+80]=((__str45)&4294967295);
HEAP[_bufferedwriter_methods+84]=(FUNCTION_TABLE_OFFSET + 26);
HEAP[_bufferedwriter_methods+96]=((__str46)&4294967295);
HEAP[_bufferedwriter_methods+100]=(FUNCTION_TABLE_OFFSET + 28);
HEAP[_bufferedwriter_methods+112]=((__str6)&4294967295);
HEAP[_bufferedwriter_methods+116]=(FUNCTION_TABLE_OFFSET + 64);
HEAP[_bufferedwriter_methods+128]=((__str51)&4294967295);
HEAP[_bufferedwriter_methods+132]=(FUNCTION_TABLE_OFFSET + 42);
HEAP[_bufferedwriter_methods+144]=((__str40)&4294967295);
HEAP[_bufferedwriter_methods+148]=(FUNCTION_TABLE_OFFSET + 66);
HEAP[_bufferedwriter_methods+160]=((__str49)&4294967295);
HEAP[_bufferedwriter_methods+164]=(FUNCTION_TABLE_OFFSET + 38);
HEAP[_bufferedwriter_methods+176]=((__str50)&4294967295);
HEAP[_bufferedwriter_methods+180]=(FUNCTION_TABLE_OFFSET + 40);
HEAP[_bufferedwriter_members]=((__str35)&4294967295);
HEAP[_bufferedwriter_getset]=((__str52)&4294967295);
HEAP[_bufferedwriter_getset+4]=(FUNCTION_TABLE_OFFSET + 44);
HEAP[_bufferedwriter_getset+20]=((__str13)&4294967295);
HEAP[_bufferedwriter_getset+24]=(FUNCTION_TABLE_OFFSET + 46);
HEAP[_bufferedwriter_getset+40]=((__str14)&4294967295);
HEAP[_bufferedwriter_getset+44]=(FUNCTION_TABLE_OFFSET + 48);
HEAP[_PyBufferedWriter_Type+12]=((__str61)&4294967295);
HEAP[_PyBufferedWriter_Type+24]=(FUNCTION_TABLE_OFFSET + 50);
HEAP[_PyBufferedWriter_Type+44]=(FUNCTION_TABLE_OFFSET + 52);
HEAP[_PyBufferedWriter_Type+88]=((_bufferedwriter_doc)&4294967295);
HEAP[_PyBufferedWriter_Type+92]=(FUNCTION_TABLE_OFFSET + 54);
HEAP[_PyBufferedWriter_Type+96]=(FUNCTION_TABLE_OFFSET + 56);
HEAP[_PyBufferedWriter_Type+116]=_bufferedwriter_methods;
HEAP[_PyBufferedWriter_Type+120]=_bufferedwriter_members;
HEAP[_PyBufferedWriter_Type+124]=_bufferedwriter_getset;
HEAP[_PyBufferedWriter_Type+148]=(FUNCTION_TABLE_OFFSET + 68);
HEAP[_PyBufferedWriter_Type+156]=(FUNCTION_TABLE_OFFSET + 62);
HEAP[_bufferedrwpair_methods]=((__str1)&4294967295);
HEAP[_bufferedrwpair_methods+4]=(FUNCTION_TABLE_OFFSET + 70);
HEAP[_bufferedrwpair_methods+16]=((__str47)&4294967295);
HEAP[_bufferedrwpair_methods+20]=(FUNCTION_TABLE_OFFSET + 72);
HEAP[_bufferedrwpair_methods+32]=((__str5)&4294967295);
HEAP[_bufferedrwpair_methods+36]=(FUNCTION_TABLE_OFFSET + 74);
HEAP[_bufferedrwpair_methods+48]=((__str7)&4294967295);
HEAP[_bufferedrwpair_methods+52]=(FUNCTION_TABLE_OFFSET + 76);
HEAP[_bufferedrwpair_methods+64]=((__str6)&4294967295);
HEAP[_bufferedrwpair_methods+68]=(FUNCTION_TABLE_OFFSET + 78);
HEAP[_bufferedrwpair_methods+80]=((__str40)&4294967295);
HEAP[_bufferedrwpair_methods+84]=(FUNCTION_TABLE_OFFSET + 80);
HEAP[_bufferedrwpair_methods+96]=((__str43)&4294967295);
HEAP[_bufferedrwpair_methods+100]=(FUNCTION_TABLE_OFFSET + 82);
HEAP[_bufferedrwpair_methods+112]=((__str44)&4294967295);
HEAP[_bufferedrwpair_methods+116]=(FUNCTION_TABLE_OFFSET + 84);
HEAP[_bufferedrwpair_methods+128]=((__str41)&4294967295);
HEAP[_bufferedrwpair_methods+132]=(FUNCTION_TABLE_OFFSET + 86);
HEAP[_bufferedrwpair_methods+144]=((__str46)&4294967295);
HEAP[_bufferedrwpair_methods+148]=(FUNCTION_TABLE_OFFSET + 88);
HEAP[_bufferedrwpair_getset]=((__str52)&4294967295);
HEAP[_bufferedrwpair_getset+4]=(FUNCTION_TABLE_OFFSET + 90);
HEAP[_PyBufferedRWPair_Type+12]=((__str64)&4294967295);
HEAP[_PyBufferedRWPair_Type+24]=(FUNCTION_TABLE_OFFSET + 92);
HEAP[_PyBufferedRWPair_Type+88]=((_bufferedrwpair_doc)&4294967295);
HEAP[_PyBufferedRWPair_Type+92]=(FUNCTION_TABLE_OFFSET + 94);
HEAP[_PyBufferedRWPair_Type+96]=(FUNCTION_TABLE_OFFSET + 96);
HEAP[_PyBufferedRWPair_Type+116]=_bufferedrwpair_methods;
HEAP[_PyBufferedRWPair_Type+124]=_bufferedrwpair_getset;
HEAP[_PyBufferedRWPair_Type+148]=(FUNCTION_TABLE_OFFSET + 98);
HEAP[_PyBufferedRWPair_Type+156]=(FUNCTION_TABLE_OFFSET + 62);
HEAP[_C_248_11327]=((__str35)&4294967295);
HEAP[_C_248_11327+4]=((__str36)&4294967295);
HEAP[_C_248_11327+8]=((__str55)&4294967295);
HEAP[_bufferedrandom_methods]=((__str41)&4294967295);
HEAP[_bufferedrandom_methods+4]=(FUNCTION_TABLE_OFFSET + 18);
HEAP[_bufferedrandom_methods+16]=((__str4)&4294967295);
HEAP[_bufferedrandom_methods+20]=(FUNCTION_TABLE_OFFSET + 14);
HEAP[_bufferedrandom_methods+32]=((__str42)&4294967295);
HEAP[_bufferedrandom_methods+36]=(FUNCTION_TABLE_OFFSET + 20);
HEAP[_bufferedrandom_methods+48]=((__str43)&4294967295);
HEAP[_bufferedrandom_methods+52]=(FUNCTION_TABLE_OFFSET + 22);
HEAP[_bufferedrandom_methods+64]=((__str44)&4294967295);
HEAP[_bufferedrandom_methods+68]=(FUNCTION_TABLE_OFFSET + 24);
HEAP[_bufferedrandom_methods+80]=((__str45)&4294967295);
HEAP[_bufferedrandom_methods+84]=(FUNCTION_TABLE_OFFSET + 26);
HEAP[_bufferedrandom_methods+96]=((__str46)&4294967295);
HEAP[_bufferedrandom_methods+100]=(FUNCTION_TABLE_OFFSET + 28);
HEAP[_bufferedrandom_methods+112]=((__str40)&4294967295);
HEAP[_bufferedrandom_methods+116]=(FUNCTION_TABLE_OFFSET + 66);
HEAP[_bufferedrandom_methods+128]=((__str49)&4294967295);
HEAP[_bufferedrandom_methods+132]=(FUNCTION_TABLE_OFFSET + 38);
HEAP[_bufferedrandom_methods+144]=((__str50)&4294967295);
HEAP[_bufferedrandom_methods+148]=(FUNCTION_TABLE_OFFSET + 40);
HEAP[_bufferedrandom_methods+160]=((__str51)&4294967295);
HEAP[_bufferedrandom_methods+164]=(FUNCTION_TABLE_OFFSET + 42);
HEAP[_bufferedrandom_methods+176]=((__str1)&4294967295);
HEAP[_bufferedrandom_methods+180]=(FUNCTION_TABLE_OFFSET + 30);
HEAP[_bufferedrandom_methods+192]=((__str5)&4294967295);
HEAP[_bufferedrandom_methods+196]=(FUNCTION_TABLE_OFFSET + 34);
HEAP[_bufferedrandom_methods+208]=((__str7)&4294967295);
HEAP[_bufferedrandom_methods+212]=(FUNCTION_TABLE_OFFSET + 100);
HEAP[_bufferedrandom_methods+224]=((__str48)&4294967295);
HEAP[_bufferedrandom_methods+228]=(FUNCTION_TABLE_OFFSET + 36);
HEAP[_bufferedrandom_methods+240]=((__str47)&4294967295);
HEAP[_bufferedrandom_methods+244]=(FUNCTION_TABLE_OFFSET + 32);
HEAP[_bufferedrandom_methods+256]=((__str6)&4294967295);
HEAP[_bufferedrandom_methods+260]=(FUNCTION_TABLE_OFFSET + 64);
HEAP[_bufferedrandom_members]=((__str35)&4294967295);
HEAP[_bufferedrandom_getset]=((__str52)&4294967295);
HEAP[_bufferedrandom_getset+4]=(FUNCTION_TABLE_OFFSET + 44);
HEAP[_bufferedrandom_getset+20]=((__str13)&4294967295);
HEAP[_bufferedrandom_getset+24]=(FUNCTION_TABLE_OFFSET + 46);
HEAP[_bufferedrandom_getset+40]=((__str14)&4294967295);
HEAP[_bufferedrandom_getset+44]=(FUNCTION_TABLE_OFFSET + 48);
HEAP[_PyBufferedRandom_Type+12]=((__str65)&4294967295);
HEAP[_PyBufferedRandom_Type+24]=(FUNCTION_TABLE_OFFSET + 50);
HEAP[_PyBufferedRandom_Type+44]=(FUNCTION_TABLE_OFFSET + 52);
HEAP[_PyBufferedRandom_Type+88]=((_bufferedrandom_doc)&4294967295);
HEAP[_PyBufferedRandom_Type+92]=(FUNCTION_TABLE_OFFSET + 54);
HEAP[_PyBufferedRandom_Type+96]=(FUNCTION_TABLE_OFFSET + 56);
HEAP[_PyBufferedRandom_Type+112]=(FUNCTION_TABLE_OFFSET + 58);
HEAP[_PyBufferedRandom_Type+116]=_bufferedrandom_methods;
HEAP[_PyBufferedRandom_Type+120]=_bufferedrandom_members;
HEAP[_PyBufferedRandom_Type+124]=_bufferedrandom_getset;
HEAP[_PyBufferedRandom_Type+148]=(FUNCTION_TABLE_OFFSET + 102);
HEAP[_PyBufferedRandom_Type+156]=(FUNCTION_TABLE_OFFSET + 62);
HEAP[_C_82_9290]=((__str2793)&4294967295);
HEAP[_bytesio_getsetlist]=((__str2995)&4294967295);
HEAP[_bytesio_getsetlist+4]=(FUNCTION_TABLE_OFFSET + 104);
HEAP[_bytesio_getsetlist+12]=((__str3096)&4294967295);
HEAP[_bytesio_methods]=((__str3197)&4294967295);
HEAP[_bytesio_methods+4]=(FUNCTION_TABLE_OFFSET + 106);
HEAP[_bytesio_methods+16]=((__str3298)&4294967295);
HEAP[_bytesio_methods+20]=(FUNCTION_TABLE_OFFSET + 106);
HEAP[_bytesio_methods+32]=((__str3399)&4294967295);
HEAP[_bytesio_methods+36]=(FUNCTION_TABLE_OFFSET + 106);
HEAP[_bytesio_methods+48]=((__str34100)&4294967295);
HEAP[_bytesio_methods+52]=(FUNCTION_TABLE_OFFSET + 108);
HEAP[_bytesio_methods+60]=((_close_doc)&4294967295);
HEAP[_bytesio_methods+64]=((__str35101)&4294967295);
HEAP[_bytesio_methods+68]=(FUNCTION_TABLE_OFFSET + 110);
HEAP[_bytesio_methods+76]=((_flush_doc)&4294967295);
HEAP[_bytesio_methods+80]=((__str36102)&4294967295);
HEAP[_bytesio_methods+84]=(FUNCTION_TABLE_OFFSET + 112);
HEAP[_bytesio_methods+92]=((_isatty_doc)&4294967295);
HEAP[_bytesio_methods+96]=((__str37103)&4294967295);
HEAP[_bytesio_methods+100]=(FUNCTION_TABLE_OFFSET + 114);
HEAP[_bytesio_methods+108]=((_tell_doc)&4294967295);
HEAP[_bytesio_methods+112]=((__str38104)&4294967295);
HEAP[_bytesio_methods+116]=(FUNCTION_TABLE_OFFSET + 116);
HEAP[_bytesio_methods+124]=((_write_doc)&4294967295);
HEAP[_bytesio_methods+128]=((__str39105)&4294967295);
HEAP[_bytesio_methods+132]=(FUNCTION_TABLE_OFFSET + 118);
HEAP[_bytesio_methods+140]=((_writelines_doc)&4294967295);
HEAP[_bytesio_methods+144]=((__str40106)&4294967295);
HEAP[_bytesio_methods+148]=(FUNCTION_TABLE_OFFSET + 120);
HEAP[_bytesio_methods+156]=((_read1_doc)&4294967295);
HEAP[_bytesio_methods+160]=((__str41107)&4294967295);
HEAP[_bytesio_methods+164]=(FUNCTION_TABLE_OFFSET + 122);
HEAP[_bytesio_methods+172]=((_readinto_doc)&4294967295);
HEAP[_bytesio_methods+176]=((__str42108)&4294967295);
HEAP[_bytesio_methods+180]=(FUNCTION_TABLE_OFFSET + 124);
HEAP[_bytesio_methods+188]=((_readline_doc)&4294967295);
HEAP[_bytesio_methods+192]=((__str43109)&4294967295);
HEAP[_bytesio_methods+196]=(FUNCTION_TABLE_OFFSET + 126);
HEAP[_bytesio_methods+204]=((_readlines_doc)&4294967295);
HEAP[_bytesio_methods+208]=((__str44110)&4294967295);
HEAP[_bytesio_methods+212]=(FUNCTION_TABLE_OFFSET + 128);
HEAP[_bytesio_methods+220]=((_read_doc)&4294967295);
HEAP[_bytesio_methods+224]=((__str45111)&4294967295);
HEAP[_bytesio_methods+228]=(FUNCTION_TABLE_OFFSET + 130);
HEAP[_bytesio_methods+236]=((_getval_doc)&4294967295);
HEAP[_bytesio_methods+240]=((__str46112)&4294967295);
HEAP[_bytesio_methods+244]=(FUNCTION_TABLE_OFFSET + 132);
HEAP[_bytesio_methods+252]=((_seek_doc)&4294967295);
HEAP[_bytesio_methods+256]=((__str47113)&4294967295);
HEAP[_bytesio_methods+260]=(FUNCTION_TABLE_OFFSET + 134);
HEAP[_bytesio_methods+268]=((_truncate_doc)&4294967295);
HEAP[_bytesio_methods+272]=((__str48114)&4294967295);
HEAP[_bytesio_methods+276]=(FUNCTION_TABLE_OFFSET + 136);
HEAP[_bytesio_methods+288]=((__str49115)&4294967295);
HEAP[_bytesio_methods+292]=(FUNCTION_TABLE_OFFSET + 138);
HEAP[_PyBytesIO_Type+12]=((__str50116)&4294967295);
HEAP[_PyBytesIO_Type+24]=(FUNCTION_TABLE_OFFSET + 140);
HEAP[_PyBytesIO_Type+88]=((_bytesio_doc)&4294967295);
HEAP[_PyBytesIO_Type+92]=(FUNCTION_TABLE_OFFSET + 142);
HEAP[_PyBytesIO_Type+96]=(FUNCTION_TABLE_OFFSET + 144);
HEAP[_PyBytesIO_Type+108]=(FUNCTION_TABLE_OFFSET + 146);
HEAP[_PyBytesIO_Type+112]=(FUNCTION_TABLE_OFFSET + 148);
HEAP[_PyBytesIO_Type+116]=((_bytesio_methods)&4294967295);
HEAP[_PyBytesIO_Type+124]=_bytesio_getsetlist;
HEAP[_PyBytesIO_Type+148]=(FUNCTION_TABLE_OFFSET + 150);
HEAP[_PyBytesIO_Type+156]=(FUNCTION_TABLE_OFFSET + 152);
HEAP[_kwlist_8657]=((__str9126)&4294967295);
HEAP[_kwlist_8657+4]=((__str10127)&4294967295);
HEAP[_kwlist_8657+8]=((__str11128)&4294967295);
HEAP[_fileio_methods]=((__str37162)&4294967295);
HEAP[_fileio_methods+4]=(FUNCTION_TABLE_OFFSET + 154);
HEAP[_fileio_methods+12]=((_read_doc154)&4294967295);
HEAP[_fileio_methods+16]=((__str38163)&4294967295);
HEAP[_fileio_methods+20]=(FUNCTION_TABLE_OFFSET + 156);
HEAP[_fileio_methods+28]=((_readall_doc)&4294967295);
HEAP[_fileio_methods+32]=((__str39164)&4294967295);
HEAP[_fileio_methods+36]=(FUNCTION_TABLE_OFFSET + 158);
HEAP[_fileio_methods+44]=((_readinto_doc159)&4294967295);
HEAP[_fileio_methods+48]=((__str40165)&4294967295);
HEAP[_fileio_methods+52]=(FUNCTION_TABLE_OFFSET + 160);
HEAP[_fileio_methods+60]=((_write_doc155)&4294967295);
HEAP[_fileio_methods+64]=((__str41166)&4294967295);
HEAP[_fileio_methods+68]=(FUNCTION_TABLE_OFFSET + 162);
HEAP[_fileio_methods+76]=((_seek_doc156)&4294967295);
HEAP[_fileio_methods+80]=((__str42167)&4294967295);
HEAP[_fileio_methods+84]=(FUNCTION_TABLE_OFFSET + 164);
HEAP[_fileio_methods+92]=((_tell_doc158)&4294967295);
HEAP[_fileio_methods+96]=((__str43168)&4294967295);
HEAP[_fileio_methods+100]=(FUNCTION_TABLE_OFFSET + 166);
HEAP[_fileio_methods+108]=((_truncate_doc157)&4294967295);
HEAP[_fileio_methods+112]=((__str117)&4294967295);
HEAP[_fileio_methods+116]=(FUNCTION_TABLE_OFFSET + 168);
HEAP[_fileio_methods+124]=((_close_doc160)&4294967295);
HEAP[_fileio_methods+128]=((__str44169)&4294967295);
HEAP[_fileio_methods+132]=(FUNCTION_TABLE_OFFSET + 170);
HEAP[_fileio_methods+140]=((_seekable_doc)&4294967295);
HEAP[_fileio_methods+144]=((__str45170)&4294967295);
HEAP[_fileio_methods+148]=(FUNCTION_TABLE_OFFSET + 172);
HEAP[_fileio_methods+156]=((_readable_doc)&4294967295);
HEAP[_fileio_methods+160]=((__str46171)&4294967295);
HEAP[_fileio_methods+164]=(FUNCTION_TABLE_OFFSET + 174);
HEAP[_fileio_methods+172]=((_writable_doc)&4294967295);
HEAP[_fileio_methods+176]=((__str47172)&4294967295);
HEAP[_fileio_methods+180]=(FUNCTION_TABLE_OFFSET + 176);
HEAP[_fileio_methods+188]=((_fileno_doc)&4294967295);
HEAP[_fileio_methods+192]=((__str48173)&4294967295);
HEAP[_fileio_methods+196]=(FUNCTION_TABLE_OFFSET + 178);
HEAP[_fileio_methods+204]=((_isatty_doc161)&4294967295);
HEAP[_fileio_getsetlist]=((__str49174)&4294967295);
HEAP[_fileio_getsetlist+4]=(FUNCTION_TABLE_OFFSET + 180);
HEAP[_fileio_getsetlist+12]=((__str50175)&4294967295);
HEAP[_fileio_getsetlist+20]=((__str11128)&4294967295);
HEAP[_fileio_getsetlist+24]=(FUNCTION_TABLE_OFFSET + 182);
HEAP[_fileio_getsetlist+32]=((__str51176)&4294967295);
HEAP[_fileio_getsetlist+40]=((__str10127)&4294967295);
HEAP[_fileio_getsetlist+44]=(FUNCTION_TABLE_OFFSET + 184);
HEAP[_fileio_getsetlist+52]=((__str52177)&4294967295);
HEAP[_PyFileIO_Type+12]=((__str53178)&4294967295);
HEAP[_PyFileIO_Type+24]=(FUNCTION_TABLE_OFFSET + 186);
HEAP[_PyFileIO_Type+44]=(FUNCTION_TABLE_OFFSET + 188);
HEAP[_PyFileIO_Type+72]=(FUNCTION_TABLE_OFFSET + 190);
HEAP[_PyFileIO_Type+88]=((_fileio_doc)&4294967295);
HEAP[_PyFileIO_Type+92]=(FUNCTION_TABLE_OFFSET + 192);
HEAP[_PyFileIO_Type+96]=(FUNCTION_TABLE_OFFSET + 194);
HEAP[_PyFileIO_Type+116]=((_fileio_methods)&4294967295);
HEAP[_PyFileIO_Type+124]=_fileio_getsetlist;
HEAP[_PyFileIO_Type+148]=(FUNCTION_TABLE_OFFSET + 196);
HEAP[_PyFileIO_Type+152]=(FUNCTION_TABLE_OFFSET + 198);
HEAP[_PyFileIO_Type+156]=(FUNCTION_TABLE_OFFSET + 200);
HEAP[_PyFileIO_Type+160]=(FUNCTION_TABLE_OFFSET + 202);
HEAP[_iobase_methods]=((__str181)&4294967295);
HEAP[_iobase_methods+4]=(FUNCTION_TABLE_OFFSET + 204);
HEAP[_iobase_methods+12]=((_iobase_seek_doc)&4294967295);
HEAP[_iobase_methods+16]=((__str23204)&4294967295);
HEAP[_iobase_methods+20]=(FUNCTION_TABLE_OFFSET + 206);
HEAP[_iobase_methods+28]=((_iobase_tell_doc)&4294967295);
HEAP[_iobase_methods+32]=((__str2183)&4294967295);
HEAP[_iobase_methods+36]=(FUNCTION_TABLE_OFFSET + 208);
HEAP[_iobase_methods+44]=((_iobase_truncate_doc)&4294967295);
HEAP[_iobase_methods+48]=((__str24205)&4294967295);
HEAP[_iobase_methods+52]=(FUNCTION_TABLE_OFFSET + 210);
HEAP[_iobase_methods+60]=((_iobase_flush_doc)&4294967295);
HEAP[_iobase_methods+64]=((__str25206)&4294967295);
HEAP[_iobase_methods+68]=(FUNCTION_TABLE_OFFSET + 212);
HEAP[_iobase_methods+76]=((_iobase_close_doc)&4294967295);
HEAP[_iobase_methods+80]=((__str26207)&4294967295);
HEAP[_iobase_methods+84]=(FUNCTION_TABLE_OFFSET + 214);
HEAP[_iobase_methods+92]=((_iobase_seekable_doc)&4294967295);
HEAP[_iobase_methods+96]=((__str27208)&4294967295);
HEAP[_iobase_methods+100]=(FUNCTION_TABLE_OFFSET + 216);
HEAP[_iobase_methods+108]=((_iobase_readable_doc)&4294967295);
HEAP[_iobase_methods+112]=((__str28209)&4294967295);
HEAP[_iobase_methods+116]=(FUNCTION_TABLE_OFFSET + 218);
HEAP[_iobase_methods+124]=((_iobase_writable_doc)&4294967295);
HEAP[_iobase_methods+128]=((__str29210)&4294967295);
HEAP[_iobase_methods+132]=(FUNCTION_TABLE_OFFSET + 220);
HEAP[_iobase_methods+144]=((__str30211)&4294967295);
HEAP[_iobase_methods+148]=(FUNCTION_TABLE_OFFSET + 222);
HEAP[_iobase_methods+160]=((__str31212)&4294967295);
HEAP[_iobase_methods+164]=(FUNCTION_TABLE_OFFSET + 224);
HEAP[_iobase_methods+176]=((__str32213)&4294967295);
HEAP[_iobase_methods+180]=(FUNCTION_TABLE_OFFSET + 226);
HEAP[_iobase_methods+192]=((__str10191)&4294967295);
HEAP[_iobase_methods+196]=(FUNCTION_TABLE_OFFSET + 228);
HEAP[_iobase_methods+204]=((_iobase_fileno_doc)&4294967295);
HEAP[_iobase_methods+208]=((__str33214)&4294967295);
HEAP[_iobase_methods+212]=(FUNCTION_TABLE_OFFSET + 230);
HEAP[_iobase_methods+220]=((_iobase_isatty_doc)&4294967295);
HEAP[_iobase_methods+224]=((__str34215)&4294967295);
HEAP[_iobase_methods+228]=(FUNCTION_TABLE_OFFSET + 232);
HEAP[_iobase_methods+240]=((__str35216)&4294967295);
HEAP[_iobase_methods+244]=(FUNCTION_TABLE_OFFSET + 234);
HEAP[_iobase_methods+256]=((__str36217)&4294967295);
HEAP[_iobase_methods+260]=(FUNCTION_TABLE_OFFSET + 236);
HEAP[_iobase_methods+268]=((_iobase_readline_doc)&4294967295);
HEAP[_iobase_methods+272]=((__str37218)&4294967295);
HEAP[_iobase_methods+276]=(FUNCTION_TABLE_OFFSET + 238);
HEAP[_iobase_methods+284]=((_iobase_readlines_doc)&4294967295);
HEAP[_iobase_methods+288]=((__str38219)&4294967295);
HEAP[_iobase_methods+292]=(FUNCTION_TABLE_OFFSET + 240);
HEAP[_iobase_getset]=((__str39220)&4294967295);
HEAP[_iobase_getset+4]=(FUNCTION_TABLE_OFFSET + 242);
HEAP[_PyIOBase_Type+12]=((__str40221)&4294967295);
HEAP[_PyIOBase_Type+24]=(FUNCTION_TABLE_OFFSET + 244);
HEAP[_PyIOBase_Type+88]=((_iobase_doc)&4294967295);
HEAP[_PyIOBase_Type+92]=(FUNCTION_TABLE_OFFSET + 246);
HEAP[_PyIOBase_Type+96]=(FUNCTION_TABLE_OFFSET + 248);
HEAP[_PyIOBase_Type+108]=(FUNCTION_TABLE_OFFSET + 250);
HEAP[_PyIOBase_Type+112]=(FUNCTION_TABLE_OFFSET + 252);
HEAP[_PyIOBase_Type+116]=((_iobase_methods)&4294967295);
HEAP[_PyIOBase_Type+124]=_iobase_getset;
HEAP[_PyIOBase_Type+156]=(FUNCTION_TABLE_OFFSET + 62);
HEAP[_rawiobase_methods]=((__str15196)&4294967295);
HEAP[_rawiobase_methods+4]=(FUNCTION_TABLE_OFFSET + 254);
HEAP[_rawiobase_methods+16]=((__str42224)&4294967295);
HEAP[_rawiobase_methods+20]=(FUNCTION_TABLE_OFFSET + 256);
HEAP[_rawiobase_methods+28]=((_rawiobase_readall_doc)&4294967295);
HEAP[_PyRawIOBase_Type+12]=((__str44226)&4294967295);
HEAP[_PyRawIOBase_Type+88]=((_rawiobase_doc)&4294967295);
HEAP[_PyRawIOBase_Type+116]=_rawiobase_methods;
HEAP[_PyRawIOBase_Type+128]=_PyIOBase_Type;
HEAP[_blockingioerror_members]=((__str3235)&4294967295);
HEAP[__PyExc_BlockingIOError+12]=((__str4236)&4294967295);
HEAP[__PyExc_BlockingIOError+88]=((__str5237)&4294967295);
HEAP[__PyExc_BlockingIOError+120]=_blockingioerror_members;
HEAP[__PyExc_BlockingIOError+148]=(FUNCTION_TABLE_OFFSET + 258);
HEAP[_PyExc_BlockingIOError]=__PyExc_BlockingIOError;
HEAP[_C_6_8548]=((__str6239)&4294967295);
HEAP[_C_6_8548+4]=((__str7240)&4294967295);
HEAP[_C_6_8548+8]=((__str8241)&4294967295);
HEAP[_C_6_8548+12]=((__str9242)&4294967295);
HEAP[_C_6_8548+16]=((__str10243)&4294967295);
HEAP[_C_6_8548+20]=((__str11244)&4294967295);
HEAP[_C_6_8548+24]=((__str12245)&4294967295);
HEAP[_module_methods]=((__str34268)&4294967295);
HEAP[_module_methods+4]=(FUNCTION_TABLE_OFFSET + 260);
HEAP[_module_methods+12]=((_open_doc)&4294967295);
HEAP[_C_71_9130]=((__str23342)&4294967295);
HEAP[_C_71_9130+4]=((__str24343)&4294967295);
HEAP[_stringio_methods]=((__str36355)&4294967295);
HEAP[_stringio_methods+4]=(FUNCTION_TABLE_OFFSET + 262);
HEAP[_stringio_methods+12]=((_stringio_close_doc)&4294967295);
HEAP[_stringio_methods+16]=((__str37356)&4294967295);
HEAP[_stringio_methods+20]=(FUNCTION_TABLE_OFFSET + 264);
HEAP[_stringio_methods+28]=((_stringio_getvalue_doc)&4294967295);
HEAP[_stringio_methods+32]=((__str38357)&4294967295);
HEAP[_stringio_methods+36]=(FUNCTION_TABLE_OFFSET + 266);
HEAP[_stringio_methods+44]=((_stringio_read_doc)&4294967295);
HEAP[_stringio_methods+48]=((__str39358)&4294967295);
HEAP[_stringio_methods+52]=(FUNCTION_TABLE_OFFSET + 268);
HEAP[_stringio_methods+60]=((_stringio_readline_doc)&4294967295);
HEAP[_stringio_methods+64]=((__str40359)&4294967295);
HEAP[_stringio_methods+68]=(FUNCTION_TABLE_OFFSET + 270);
HEAP[_stringio_methods+76]=((_stringio_tell_doc)&4294967295);
HEAP[_stringio_methods+80]=((__str41360)&4294967295);
HEAP[_stringio_methods+84]=(FUNCTION_TABLE_OFFSET + 272);
HEAP[_stringio_methods+92]=((_stringio_truncate_doc)&4294967295);
HEAP[_stringio_methods+96]=((__str42361)&4294967295);
HEAP[_stringio_methods+100]=(FUNCTION_TABLE_OFFSET + 274);
HEAP[_stringio_methods+108]=((_stringio_seek_doc)&4294967295);
HEAP[_stringio_methods+112]=((__str43362)&4294967295);
HEAP[_stringio_methods+116]=(FUNCTION_TABLE_OFFSET + 276);
HEAP[_stringio_methods+124]=((_stringio_write_doc)&4294967295);
HEAP[_stringio_methods+128]=((__str44363)&4294967295);
HEAP[_stringio_methods+132]=(FUNCTION_TABLE_OFFSET + 278);
HEAP[_stringio_methods+144]=((__str45364)&4294967295);
HEAP[_stringio_methods+148]=(FUNCTION_TABLE_OFFSET + 280);
HEAP[_stringio_methods+160]=((__str46365)&4294967295);
HEAP[_stringio_methods+164]=(FUNCTION_TABLE_OFFSET + 282);
HEAP[_stringio_methods+176]=((__str47366)&4294967295);
HEAP[_stringio_methods+180]=(FUNCTION_TABLE_OFFSET + 284);
HEAP[_stringio_methods+192]=((__str48367)&4294967295);
HEAP[_stringio_methods+196]=(FUNCTION_TABLE_OFFSET + 286);
HEAP[_stringio_getset]=((__str49368)&4294967295);
HEAP[_stringio_getset+4]=(FUNCTION_TABLE_OFFSET + 288);
HEAP[_stringio_getset+20]=((__str50369)&4294967295);
HEAP[_stringio_getset+24]=(FUNCTION_TABLE_OFFSET + 290);
HEAP[_stringio_getset+40]=((__str51370)&4294967295);
HEAP[_stringio_getset+44]=(FUNCTION_TABLE_OFFSET + 292);
HEAP[_PyStringIO_Type+12]=((__str52371)&4294967295);
HEAP[_PyStringIO_Type+24]=(FUNCTION_TABLE_OFFSET + 294);
HEAP[_PyStringIO_Type+88]=((_stringio_doc)&4294967295);
HEAP[_PyStringIO_Type+92]=(FUNCTION_TABLE_OFFSET + 296);
HEAP[_PyStringIO_Type+96]=(FUNCTION_TABLE_OFFSET + 298);
HEAP[_PyStringIO_Type+112]=(FUNCTION_TABLE_OFFSET + 300);
HEAP[_PyStringIO_Type+116]=((_stringio_methods)&4294967295);
HEAP[_PyStringIO_Type+124]=_stringio_getset;
HEAP[_PyStringIO_Type+148]=(FUNCTION_TABLE_OFFSET + 302);
HEAP[_PyStringIO_Type+156]=(FUNCTION_TABLE_OFFSET + 304);
HEAP[_textiobase_methods]=((__str374)&4294967295);
HEAP[_textiobase_methods+4]=(FUNCTION_TABLE_OFFSET + 306);
HEAP[_textiobase_methods+12]=((_textiobase_detach_doc)&4294967295);
HEAP[_textiobase_methods+16]=((__str1375)&4294967295);
HEAP[_textiobase_methods+20]=(FUNCTION_TABLE_OFFSET + 308);
HEAP[_textiobase_methods+28]=((_textiobase_read_doc)&4294967295);
HEAP[_textiobase_methods+32]=((__str2376)&4294967295);
HEAP[_textiobase_methods+36]=(FUNCTION_TABLE_OFFSET + 310);
HEAP[_textiobase_methods+44]=((_textiobase_readline_doc)&4294967295);
HEAP[_textiobase_methods+48]=((__str3377)&4294967295);
HEAP[_textiobase_methods+52]=(FUNCTION_TABLE_OFFSET + 312);
HEAP[_textiobase_methods+60]=((_textiobase_write_doc)&4294967295);
HEAP[_textiobase_getset]=((__str4378)&4294967295);
HEAP[_textiobase_getset+4]=(FUNCTION_TABLE_OFFSET + 314);
HEAP[_textiobase_getset+12]=((_textiobase_encoding_doc)&4294967295);
HEAP[_textiobase_getset+20]=((__str5379)&4294967295);
HEAP[_textiobase_getset+24]=(FUNCTION_TABLE_OFFSET + 316);
HEAP[_textiobase_getset+32]=((_textiobase_newlines_doc)&4294967295);
HEAP[_textiobase_getset+40]=((__str6380)&4294967295);
HEAP[_textiobase_getset+44]=(FUNCTION_TABLE_OFFSET + 318);
HEAP[_textiobase_getset+52]=((_textiobase_errors_doc)&4294967295);
HEAP[_PyTextIOBase_Type+12]=((__str7381)&4294967295);
HEAP[_PyTextIOBase_Type+88]=((_textiobase_doc)&4294967295);
HEAP[_PyTextIOBase_Type+116]=((_textiobase_methods)&4294967295);
HEAP[_PyTextIOBase_Type+124]=_textiobase_getset;
HEAP[_PyTextIOBase_Type+128]=_PyIOBase_Type;
HEAP[_C_1_8505]=((__str8383)&4294967295);
HEAP[_C_1_8505+4]=((__str9384)&4294967295);
HEAP[_C_1_8505+8]=((__str6380)&4294967295);
HEAP[_C_56_8818]=((__str16391)&4294967295);
HEAP[_C_56_8818+4]=((__str17392)&4294967295);
HEAP[_incrementalnewlinedecoder_methods]=((__str29404)&4294967295);
HEAP[_incrementalnewlinedecoder_methods+4]=(FUNCTION_TABLE_OFFSET + 320);
HEAP[_incrementalnewlinedecoder_methods+16]=((__str30405)&4294967295);
HEAP[_incrementalnewlinedecoder_methods+20]=(FUNCTION_TABLE_OFFSET + 322);
HEAP[_incrementalnewlinedecoder_methods+32]=((__str22397)&4294967295);
HEAP[_incrementalnewlinedecoder_methods+36]=(FUNCTION_TABLE_OFFSET + 324);
HEAP[_incrementalnewlinedecoder_methods+48]=((__str31406)&4294967295);
HEAP[_incrementalnewlinedecoder_methods+52]=(FUNCTION_TABLE_OFFSET + 326);
HEAP[_incrementalnewlinedecoder_getset]=((__str5379)&4294967295);
HEAP[_incrementalnewlinedecoder_getset+4]=(FUNCTION_TABLE_OFFSET + 328);
HEAP[_PyIncrementalNewlineDecoder_Type+12]=((__str32407)&4294967295);
HEAP[_PyIncrementalNewlineDecoder_Type+24]=(FUNCTION_TABLE_OFFSET + 330);
HEAP[_PyIncrementalNewlineDecoder_Type+88]=((_incrementalnewlinedecoder_doc)&4294967295);
HEAP[_PyIncrementalNewlineDecoder_Type+116]=_incrementalnewlinedecoder_methods;
HEAP[_PyIncrementalNewlineDecoder_Type+124]=_incrementalnewlinedecoder_getset;
HEAP[_PyIncrementalNewlineDecoder_Type+148]=(FUNCTION_TABLE_OFFSET + 332);
HEAP[_PyIncrementalNewlineDecoder_Type+156]=(FUNCTION_TABLE_OFFSET + 62);
HEAP[_encodefuncs]=((__str33409)&4294967295);
HEAP[_encodefuncs+4]=(FUNCTION_TABLE_OFFSET + 334);
HEAP[_encodefuncs+8]=((__str34410)&4294967295);
HEAP[_encodefuncs+12]=(FUNCTION_TABLE_OFFSET + 336);
HEAP[_encodefuncs+16]=((__str35411)&4294967295);
HEAP[_encodefuncs+20]=(FUNCTION_TABLE_OFFSET + 338);
HEAP[_encodefuncs+24]=((__str36412)&4294967295);
HEAP[_encodefuncs+28]=(FUNCTION_TABLE_OFFSET + 340);
HEAP[_encodefuncs+32]=((__str37413)&4294967295);
HEAP[_encodefuncs+36]=(FUNCTION_TABLE_OFFSET + 342);
HEAP[_encodefuncs+40]=((__str38414)&4294967295);
HEAP[_encodefuncs+44]=(FUNCTION_TABLE_OFFSET + 344);
HEAP[_encodefuncs+48]=((__str39415)&4294967295);
HEAP[_encodefuncs+52]=(FUNCTION_TABLE_OFFSET + 346);
HEAP[_encodefuncs+56]=((__str40416)&4294967295);
HEAP[_encodefuncs+60]=(FUNCTION_TABLE_OFFSET + 348);
HEAP[_encodefuncs+64]=((__str41417)&4294967295);
HEAP[_encodefuncs+68]=(FUNCTION_TABLE_OFFSET + 350);
HEAP[_C_89_9154]=((__str42418)&4294967295);
HEAP[_C_89_9154+4]=((__str4378)&4294967295);
HEAP[_C_89_9154+8]=((__str6380)&4294967295);
HEAP[_C_89_9154+12]=((__str43419)&4294967295);
HEAP[_C_89_9154+16]=((__str44420)&4294967295);
HEAP[_textiowrapper_methods]=((__str374)&4294967295);
HEAP[_textiowrapper_methods+4]=(FUNCTION_TABLE_OFFSET + 352);
HEAP[_textiowrapper_methods+16]=((__str3377)&4294967295);
HEAP[_textiowrapper_methods+20]=(FUNCTION_TABLE_OFFSET + 354);
HEAP[_textiowrapper_methods+32]=((__str1375)&4294967295);
HEAP[_textiowrapper_methods+36]=(FUNCTION_TABLE_OFFSET + 356);
HEAP[_textiowrapper_methods+48]=((__str2376)&4294967295);
HEAP[_textiowrapper_methods+52]=(FUNCTION_TABLE_OFFSET + 358);
HEAP[_textiowrapper_methods+64]=((__str79)&4294967295);
HEAP[_textiowrapper_methods+68]=(FUNCTION_TABLE_OFFSET + 360);
HEAP[_textiowrapper_methods+80]=((__str102)&4294967295);
HEAP[_textiowrapper_methods+84]=(FUNCTION_TABLE_OFFSET + 362);
HEAP[_textiowrapper_methods+96]=((__str100)&4294967295);
HEAP[_textiowrapper_methods+100]=(FUNCTION_TABLE_OFFSET + 364);
HEAP[_textiowrapper_methods+112]=((__str55431)&4294967295);
HEAP[_textiowrapper_methods+116]=(FUNCTION_TABLE_OFFSET + 366);
HEAP[_textiowrapper_methods+128]=((__str50426)&4294967295);
HEAP[_textiowrapper_methods+132]=(FUNCTION_TABLE_OFFSET + 368);
HEAP[_textiowrapper_methods+144]=((__str52428)&4294967295);
HEAP[_textiowrapper_methods+148]=(FUNCTION_TABLE_OFFSET + 370);
HEAP[_textiowrapper_methods+160]=((__str101)&4294967295);
HEAP[_textiowrapper_methods+164]=(FUNCTION_TABLE_OFFSET + 372);
HEAP[_textiowrapper_methods+176]=((__str80)&4294967295);
HEAP[_textiowrapper_methods+180]=(FUNCTION_TABLE_OFFSET + 374);
HEAP[_textiowrapper_methods+192]=((__str77)&4294967295);
HEAP[_textiowrapper_methods+196]=(FUNCTION_TABLE_OFFSET + 376);
HEAP[_textiowrapper_methods+208]=((__str105)&4294967295);
HEAP[_textiowrapper_methods+212]=(FUNCTION_TABLE_OFFSET + 378);
HEAP[_textiowrapper_members]=((__str4378)&4294967295);
HEAP[_textiowrapper_members+20]=((__str42418)&4294967295);
HEAP[_textiowrapper_members+40]=((__str44420)&4294967295);
HEAP[_textiowrapper_getset]=((__str53429)&4294967295);
HEAP[_textiowrapper_getset+4]=(FUNCTION_TABLE_OFFSET + 380);
HEAP[_textiowrapper_getset+20]=((__str106)&4294967295);
HEAP[_textiowrapper_getset+24]=(FUNCTION_TABLE_OFFSET + 382);
HEAP[_textiowrapper_getset+40]=((__str5379)&4294967295);
HEAP[_textiowrapper_getset+44]=(FUNCTION_TABLE_OFFSET + 384);
HEAP[_textiowrapper_getset+60]=((__str6380)&4294967295);
HEAP[_textiowrapper_getset+64]=(FUNCTION_TABLE_OFFSET + 386);
HEAP[_textiowrapper_getset+80]=((__str107)&4294967295);
HEAP[_textiowrapper_getset+84]=(FUNCTION_TABLE_OFFSET + 388);
HEAP[_textiowrapper_getset+88]=(FUNCTION_TABLE_OFFSET + 390);
HEAP[_PyTextIOWrapper_Type+12]=((__str108)&4294967295);
HEAP[_PyTextIOWrapper_Type+24]=(FUNCTION_TABLE_OFFSET + 392);
HEAP[_PyTextIOWrapper_Type+44]=(FUNCTION_TABLE_OFFSET + 394);
HEAP[_PyTextIOWrapper_Type+88]=((_textiowrapper_doc)&4294967295);
HEAP[_PyTextIOWrapper_Type+92]=(FUNCTION_TABLE_OFFSET + 396);
HEAP[_PyTextIOWrapper_Type+96]=(FUNCTION_TABLE_OFFSET + 398);
HEAP[_PyTextIOWrapper_Type+112]=(FUNCTION_TABLE_OFFSET + 400);
HEAP[_PyTextIOWrapper_Type+116]=_textiowrapper_methods;
HEAP[_PyTextIOWrapper_Type+120]=_textiowrapper_members;
HEAP[_PyTextIOWrapper_Type+124]=_textiowrapper_getset;
HEAP[_PyTextIOWrapper_Type+148]=(FUNCTION_TABLE_OFFSET + 402);
HEAP[_PyTextIOWrapper_Type+156]=(FUNCTION_TABLE_OFFSET + 62);

  __globalConstructor__();
}
Module['run'] = run;

// {{PRE_RUN_ADDITIONS}}

run();

// {{POST_RUN_ADDITIONS}}





  // {{MODULE_ADDITIONS}}

  return Module;
});

