"use strict";

// Capture the output of this into a variable, if you want
(function(FUNCTION_TABLE_OFFSET) {
  var Module = {};
  var args = [];
  Module.arguments = [];

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime essentials
//========================================

var __globalConstructor__ = function globalConstructor() {
}

// === Body ===



var $0___SIZE = 196; // %0
  
var $1___SIZE = 64; // %1
  
var $2___SIZE = 16; // %2
  
var $3___SIZE = 60; // %3
  
var $4___SIZE = 20; // %4
  
var $5___SIZE = 20; // %5
  
var $6___SIZE = 100; // %6
  
var $7___SIZE = 20; // %7
  
var $8___SIZE = 196; // %8
  
var $9___SIZE = 48; // %9
  
var $10___SIZE = 196; // %10
  
var $11___SIZE = 112; // %11
  
var $struct_FILE___SIZE = 148; // %struct.FILE
  var $struct_FILE___FLATTENER = [0,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64,68,70,71,72,76,84,88,92,96,100,104,108];
var $struct_Pdata___SIZE = 20; // %struct.Pdata
  
var $struct_Picklerobject___SIZE = 72; // %struct.Picklerobject
  
var $struct_PyBufferProcs___SIZE = 24; // %struct.PyBufferProcs
  
var $struct_PyClassObject___SIZE = 36; // %struct.PyClassObject
  
var $struct_PyCompilerFlags___SIZE = 4; // %struct.PyCompilerFlags
  
var $struct_PyFileObject___SIZE = 84; // %struct.PyFileObject
  
var $struct_PyFloatObject___SIZE = 16; // %struct.PyFloatObject
  
var $struct_PyGetSetDef___SIZE = 20; // %struct.PyGetSetDef
  
var $struct_PyIntObject___SIZE = 12; // %struct.PyIntObject
  
var $struct_PyInterpreterState___SIZE = 40; // %struct.PyInterpreterState
  
var $struct_PyListObject___SIZE = 20; // %struct.PyListObject
  
var $struct_PyLongObject___SIZE = 0; // %struct.PyLongObject
  var $struct_PyLongObject___FLATTENER = [];
var $struct_PyMappingMethods___SIZE = 12; // %struct.PyMappingMethods
  
var $struct_PyMemberDef___SIZE = 20; // %struct.PyMemberDef
  
var $struct_PyMethodDef___SIZE = 16; // %struct.PyMethodDef
  
var $struct_PyNumberMethods___SIZE = 156; // %struct.PyNumberMethods
  
var $struct_PyObject___SIZE = 8; // %struct.PyObject
  
var $struct_PySequenceMethods___SIZE = 40; // %struct.PySequenceMethods
  
var $struct_PyStringObject___SIZE = 24; // %struct.PyStringObject
  
var $struct_PyThreadState___SIZE = 84; // %struct.PyThreadState
  
var $struct_PyTupleObject___SIZE = 16; // %struct.PyTupleObject
  
var $struct_PyUnicodeObject___SIZE = 24; // %struct.PyUnicodeObject
  
var $struct_PyVarObject___SIZE = 12; // %struct.PyVarObject
  
var $struct_Py_buffer___SIZE = 52; // %struct.Py_buffer
  var $struct_Py_buffer___FLATTENER = [0,4,8,12,16,20,24,28,32,36,40,48];
var $struct_PycStringIO_CAPI___SIZE = 32; // %struct.PycStringIO_CAPI
  
var $struct_Unpicklerobject___SIZE = 80; // %struct.Unpicklerobject
  
var $struct__IO_marker___SIZE = 12; // %struct._IO_marker
  
var $struct__frame___SIZE = 0; // %struct._frame
  var $struct__frame___FLATTENER = [];
var $struct__typeobject___SIZE = 196; // %struct._typeobject
  
var _cPickle_module_documentation;
var _MARKv;
var __str;
var __str1;
var _PdataType;
var _UnpicklingError;
var __str2;
var __Py_NoneStruct;
var _PyExc_IOError;
var _PycStringIO;
var _PyExc_EOFError;
var _empty_tuple;
var _PyExc_KeyError;
var _PicklingError;
var __str3;
var __str4;
var __str5;
var __str6;
var _PyExc_AttributeError;
var __str7;
var ___main___str;
var _PyExc_ValueError;
var __str8;
var _none_9451;
var _len_9463;
var _buf_9462;
var __str9;
var __str10;
var _PyExc_OverflowError;
var __str11;
var _l_9538;
var __str12;
var _string_9677;
var _hexdigit_9788;
var __str13;
var _string_9895;
var __str14;
var __str15;
var ___PRETTY_FUNCTION___10017;
var _pop_10042;
var _len2opcode_10044;
var _pop_mark_10043;
var _tuple_10041;
var __str16;
var ___PRETTY_FUNCTION___10137;
var _append_10135;
var _appends_10136;
var __PyThreadState_Current;
var __Py_CheckRecursionLimit;
var __str17;
var ___PRETTY_FUNCTION___10326;
var _PyExc_TypeError;
var __str18;
var _setitem_10324;
var _setitems_10325;
var __str19;
var ___PRETTY_FUNCTION___10501;
var __str20;
var _setitem_10499;
var _setitems_10500;
var _PyExc_RuntimeError;
var __str21;
var _PyDict_Type;
var __str22;
var __str23;
var ___class___str;
var ___getinitargs___str;
var __str24;
var _inst_10654;
var _obj_10655;
var ___getstate___str;
var ___dict___str;
var _build_10656;
var ___name___str;
var __str25;
var __str26;
var __str27;
var __str28;
var __str29;
var _two_tuple;
var _extension_registry;
var __str30;
var __str31;
var __str32;
var __str33;
var _global_10855;
var __str34;
var _persid_10999;
var _binpersid_11000;
var __str35;
var __str36;
var __str37;
var __str38;
var __str39;
var __str40;
var __str41;
var __str42;
var __str43;
var __str44;
var __str45;
var __str46;
var _newobj_11120;
var _reduce_11118;
var _build_11119;
var __Py_ZeroStruct;
var __Py_TrueStruct;
var _PyInt_Type;
var _PyLong_Type;
var _PyFloat_Type;
var _PyTuple_Type;
var _PyString_Type;
var _PyUnicode_Type;
var _PyType_Type;
var _PyList_Type;
var _PyInstance_Type;
var _PyClass_Type;
var _PyFunction_Type;
var _PickleError;
var _PyCFunction_Type;
var _dispatch_table;
var ___reduce_ex___str;
var ___reduce___str;
var _UnpickleableError;
var __str47;
var __str48;
var ___PRETTY_FUNCTION___11692;
var _stop_11690;
var __str49;
var __str50;
var __str51;
var __str52;
var __str53;
var __str54;
var __str55;
var __str56;
var __str57;
var __str58;
var __str59;
var _Pickler_methods;
var __str60;
var _PyFile_Type;
var __str61;
var _write_str;
var __str62;
var __str63;
var _dispatch_table_str;
var __str64;
var __str65;
var _kwlist_12011;
var __str66;
var __str67;
var __str68;
var __str69;
var __str70;
var __str71;
var __str72;
var __str73;
var _Pickler_members;
var __str74;
var __str75;
var _Pickler_getsets;
var _Picklertype__doc__;
var __str76;
var _Picklertype;
var __str77;
var __str78;
var __str79;
var __str80;
var __str81;
var ___PRETTY_FUNCTION___12572;
var __str82;
var ___PRETTY_FUNCTION___12743;
var __str83;
var __str84;
var __str85;
var __str86;
var __str87;
var __str88;
var __str89;
var __str90;
var __str91;
var __str92;
var _BadPickleGet;
var __str93;
var ___PRETTY_FUNCTION___14342;
var __str94;
var _extension_cache;
var _inverted_registry;
var __str95;
var __str96;
var _append_str;
var ___setstate___str;
var __str97;
var __str98;
var __str99;
var ___PRETTY_FUNCTION___15142;
var __str100;
var __str101;
var __str102;
var ___PRETTY_FUNCTION___15558;
var __str103;
var __str104;
var __str105;
var __str106;
var _Unpickler_methods;
var _readline_str;
var _read_str;
var __str107;
var __str108;
var __str109;
var __str110;
var __str111;
var _kwlist_16354;
var __str112;
var __str113;
var _kwlist_16391;
var __str114;
var _Unpicklertype__doc__;
var __str115;
var _Unpicklertype;
var __str116;
var __str117;
var __str118;
var __str119;
var __str120;
var __str121;
var __str122;
var __str123;
var __str124;
var __str125;
var _cPickle_methods;
var __str126;
var __str127;
var __str128;
var __str129;
var __str130;
var __str131;
var __str132;
var __str133;
var __str134;
var __str135;
var __str136;
var __str137;
var __str138;
var __str139;
var __str140;
var __str141;
var __str142;
var __str143;
var __str144;
var __str145;
var __str146;
var __str147;
var __str148;
var __str149;
var __str150;
var __str151;
var __str152;
var __str153;
var __str154;
var __str155;
var __str156;
var __str157;
var __str158;
var __str159;
var __str160;
var __str161;
var __str162;
var __str163;
var __str164;
var __str165;
var __str166;
var __str167;





























































































































  function _Pdata_dealloc($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $i=__stackBase__+4;
        var $p=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $0=HEAP[$self_addr]; //@line 153 "cPickle.c"
        var $1=(($0+8)&4294967295); //@line 153 "cPickle.c"
        var $2=HEAP[$1]; //@line 153 "cPickle.c"
        HEAP[$i]=$2; //@line 153 "cPickle.c"
        var $3=HEAP[$self_addr]; //@line 153 "cPickle.c"
        var $4=(($3+16)&4294967295); //@line 153 "cPickle.c"
        var $5=HEAP[$4]; //@line 153 "cPickle.c"
        HEAP[$p]=$5; //@line 153 "cPickle.c"
        __label__ = 4; break; //@line 153 "cPickle.c"
      case 1: // $bb
        var $6=HEAP[$p]; //@line 154 "cPickle.c"
        var $7=HEAP[$6]; //@line 154 "cPickle.c"
        var $8=(($7)&4294967295); //@line 154 "cPickle.c"
        var $9=HEAP[$8]; //@line 154 "cPickle.c"
        var $10=((($9) - 1)&4294967295); //@line 154 "cPickle.c"
        var $11=(($7)&4294967295); //@line 154 "cPickle.c"
        HEAP[$11]=$10; //@line 154 "cPickle.c"
        var $12=(($7)&4294967295); //@line 154 "cPickle.c"
        var $13=HEAP[$12]; //@line 154 "cPickle.c"
        var $14=((($13))|0)==0; //@line 154 "cPickle.c"
        if ($14) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 154 "cPickle.c"
      case 2: // $bb1
        var $15=HEAP[$p]; //@line 154 "cPickle.c"
        var $16=HEAP[$15]; //@line 154 "cPickle.c"
        var $17=(($16+4)&4294967295); //@line 154 "cPickle.c"
        var $18=HEAP[$17]; //@line 154 "cPickle.c"
        var $19=(($18+24)&4294967295); //@line 154 "cPickle.c"
        var $20=HEAP[$19]; //@line 154 "cPickle.c"
        var $21=HEAP[$p]; //@line 154 "cPickle.c"
        var $22=HEAP[$21]; //@line 154 "cPickle.c"
        FUNCTION_TABLE[$20]($22); //@line 154 "cPickle.c"
        __label__ = 3; break; //@line 154 "cPickle.c"
      case 3: // $bb2
        var $23=HEAP[$p]; //@line 153 "cPickle.c"
        var $24=(($23+4)&4294967295); //@line 153 "cPickle.c"
        HEAP[$p]=$24; //@line 153 "cPickle.c"
        __label__ = 4; break; //@line 153 "cPickle.c"
      case 4: // $bb3
        var $25=HEAP[$i]; //@line 153 "cPickle.c"
        var $26=((($25) - 1)&4294967295); //@line 153 "cPickle.c"
        HEAP[$i]=$26; //@line 153 "cPickle.c"
        var $27=HEAP[$i]; //@line 153 "cPickle.c"
        var $28=((($27))|0) >= 0; //@line 153 "cPickle.c"
        if ($28) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 153 "cPickle.c"
      case 5: // $bb4
        var $29=HEAP[$self_addr]; //@line 156 "cPickle.c"
        var $30=(($29+16)&4294967295); //@line 156 "cPickle.c"
        var $31=HEAP[$30]; //@line 156 "cPickle.c"
        var $32=($31)!=0; //@line 156 "cPickle.c"
        if ($32) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 156 "cPickle.c"
      case 6: // $bb5
        var $33=HEAP[$self_addr]; //@line 157 "cPickle.c"
        var $34=(($33+16)&4294967295); //@line 157 "cPickle.c"
        var $35=HEAP[$34]; //@line 157 "cPickle.c"
        var $36=$35; //@line 157 "cPickle.c"
        _free($36); //@line 157 "cPickle.c"
        __label__ = 7; break; //@line 157 "cPickle.c"
      case 7: // $bb6
        var $37=HEAP[$self_addr]; //@line 158 "cPickle.c"
        var $38=$37; //@line 158 "cPickle.c"
        _PyObject_Free($38); //@line 158 "cPickle.c"
        __label__ = 8; break; //@line 159 "cPickle.c"
      case 8: // $return
        STACKTOP = __stackBase__;
        return; //@line 159 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pdata_New() {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval=__stackBase__;
        var $0=__stackBase__+4;
        var $self=__stackBase__+8;
        var $_alloca_point_=0;
        var $1=__PyObject_New(_PdataType); //@line 174 "cPickle.c"
        var $2=$1; //@line 174 "cPickle.c"
        HEAP[$self]=$2; //@line 174 "cPickle.c"
        var $3=HEAP[$self]; //@line 174 "cPickle.c"
        var $4=($3)==0; //@line 174 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 174 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 175 "cPickle.c"
        __label__ = 7; break; //@line 175 "cPickle.c"
      case 2: // $bb1
        var $5=HEAP[$self]; //@line 176 "cPickle.c"
        var $6=(($5+12)&4294967295); //@line 176 "cPickle.c"
        HEAP[$6]=8; //@line 176 "cPickle.c"
        var $7=HEAP[$self]; //@line 177 "cPickle.c"
        var $8=(($7+8)&4294967295); //@line 177 "cPickle.c"
        HEAP[$8]=0; //@line 177 "cPickle.c"
        var $9=HEAP[$self]; //@line 178 "cPickle.c"
        var $10=(($9+12)&4294967295); //@line 178 "cPickle.c"
        var $11=HEAP[$10]; //@line 178 "cPickle.c"
        var $12=((($11) * 4)&4294967295); //@line 178 "cPickle.c"
        var $13=_malloc($12); //@line 178 "cPickle.c"
        var $14=$13; //@line 178 "cPickle.c"
        var $15=HEAP[$self]; //@line 178 "cPickle.c"
        var $16=(($15+16)&4294967295); //@line 178 "cPickle.c"
        HEAP[$16]=$14; //@line 178 "cPickle.c"
        var $17=HEAP[$self]; //@line 179 "cPickle.c"
        var $18=(($17+16)&4294967295); //@line 179 "cPickle.c"
        var $19=HEAP[$18]; //@line 179 "cPickle.c"
        var $20=($19)!=0; //@line 179 "cPickle.c"
        if ($20) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 179 "cPickle.c"
      case 3: // $bb2
        var $21=HEAP[$self]; //@line 180 "cPickle.c"
        var $22=$21; //@line 180 "cPickle.c"
        HEAP[$0]=$22; //@line 180 "cPickle.c"
        __label__ = 7; break; //@line 180 "cPickle.c"
      case 4: // $bb3
        var $23=HEAP[$self]; //@line 181 "cPickle.c"
        var $24=$23; //@line 181 "cPickle.c"
        var $25=(($24)&4294967295); //@line 181 "cPickle.c"
        var $26=HEAP[$25]; //@line 181 "cPickle.c"
        var $27=((($26) - 1)&4294967295); //@line 181 "cPickle.c"
        var $28=(($24)&4294967295); //@line 181 "cPickle.c"
        HEAP[$28]=$27; //@line 181 "cPickle.c"
        var $29=(($24)&4294967295); //@line 181 "cPickle.c"
        var $30=HEAP[$29]; //@line 181 "cPickle.c"
        var $31=((($30))|0)==0; //@line 181 "cPickle.c"
        if ($31) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 181 "cPickle.c"
      case 5: // $bb4
        var $32=HEAP[$self]; //@line 181 "cPickle.c"
        var $33=$32; //@line 181 "cPickle.c"
        var $34=(($33+4)&4294967295); //@line 181 "cPickle.c"
        var $35=HEAP[$34]; //@line 181 "cPickle.c"
        var $36=(($35+24)&4294967295); //@line 181 "cPickle.c"
        var $37=HEAP[$36]; //@line 181 "cPickle.c"
        var $38=HEAP[$self]; //@line 181 "cPickle.c"
        var $39=$38; //@line 181 "cPickle.c"
        FUNCTION_TABLE[$37]($39); //@line 181 "cPickle.c"
        __label__ = 6; break; //@line 181 "cPickle.c"
      case 6: // $bb5
        var $40=_PyErr_NoMemory(); //@line 182 "cPickle.c"
        HEAP[$0]=$40; //@line 182 "cPickle.c"
        __label__ = 7; break; //@line 182 "cPickle.c"
      case 7: // $bb6
        var $41=HEAP[$0]; //@line 175 "cPickle.c"
        HEAP[$retval]=$41; //@line 175 "cPickle.c"
        __label__ = 8; break; //@line 175 "cPickle.c"
      case 8: // $return
        var $retval7=HEAP[$retval]; //@line 175 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 175 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stackUnderflow() {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval=__stackBase__;
        var $0=__stackBase__+4;
        var $_alloca_point_=0;
        var $1=HEAP[_UnpicklingError]; //@line 188 "cPickle.c"
        _PyErr_SetString($1, ((__str2)&4294967295)); //@line 188 "cPickle.c"
        HEAP[$0]=-1; //@line 189 "cPickle.c"
        var $2=HEAP[$0]; //@line 189 "cPickle.c"
        HEAP[$retval]=$2; //@line 189 "cPickle.c"
        __label__ = 1; break; //@line 189 "cPickle.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 189 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 189 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pdata_clear($self, $clearto) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $clearto_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $i=__stackBase__+16;
        var $p=__stackBase__+20;
        var $_py_tmp=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$clearto_addr]=$clearto;
        var $1=HEAP[$clearto_addr]; //@line 201 "cPickle.c"
        var $2=((($1))|0) < 0; //@line 201 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 201 "cPickle.c"
      case 1: // $bb
        var $3=_stackUnderflow(); //@line 201 "cPickle.c"
        HEAP[$0]=$3; //@line 201 "cPickle.c"
        __label__ = 11; break; //@line 201 "cPickle.c"
      case 2: // $bb1
        var $4=HEAP[$self_addr]; //@line 202 "cPickle.c"
        var $5=(($4+8)&4294967295); //@line 202 "cPickle.c"
        var $6=HEAP[$5]; //@line 202 "cPickle.c"
        var $7=HEAP[$clearto_addr]; //@line 202 "cPickle.c"
        var $8=((($6))|0) <= ((($7))|0); //@line 202 "cPickle.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 202 "cPickle.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 202 "cPickle.c"
        __label__ = 11; break; //@line 202 "cPickle.c"
      case 4: // $bb3
        var $9=HEAP[$self_addr]; //@line 204 "cPickle.c"
        var $10=(($9+8)&4294967295); //@line 204 "cPickle.c"
        var $11=HEAP[$10]; //@line 204 "cPickle.c"
        HEAP[$i]=$11; //@line 204 "cPickle.c"
        var $12=HEAP[$self_addr]; //@line 204 "cPickle.c"
        var $13=(($12+16)&4294967295); //@line 204 "cPickle.c"
        var $14=HEAP[$13]; //@line 204 "cPickle.c"
        var $15=HEAP[$clearto_addr]; //@line 204 "cPickle.c"
        var $16=(($14+4*$15)&4294967295); //@line 204 "cPickle.c"
        HEAP[$p]=$16; //@line 204 "cPickle.c"
        __label__ = 9; break; //@line 204 "cPickle.c"
      case 5: // $bb4
        var $17=HEAP[$p]; //@line 207 "cPickle.c"
        var $18=HEAP[$17]; //@line 207 "cPickle.c"
        var $19=($18)!=0; //@line 207 "cPickle.c"
        if ($19) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 207 "cPickle.c"
      case 6: // $bb5
        var $20=HEAP[$p]; //@line 207 "cPickle.c"
        var $21=HEAP[$20]; //@line 207 "cPickle.c"
        HEAP[$_py_tmp]=$21; //@line 207 "cPickle.c"
        var $22=HEAP[$p]; //@line 207 "cPickle.c"
        HEAP[$22]=0; //@line 207 "cPickle.c"
        var $23=HEAP[$_py_tmp]; //@line 207 "cPickle.c"
        var $24=(($23)&4294967295); //@line 207 "cPickle.c"
        var $25=HEAP[$24]; //@line 207 "cPickle.c"
        var $26=((($25) - 1)&4294967295); //@line 207 "cPickle.c"
        var $27=HEAP[$_py_tmp]; //@line 207 "cPickle.c"
        var $28=(($27)&4294967295); //@line 207 "cPickle.c"
        HEAP[$28]=$26; //@line 207 "cPickle.c"
        var $29=HEAP[$_py_tmp]; //@line 207 "cPickle.c"
        var $30=(($29)&4294967295); //@line 207 "cPickle.c"
        var $31=HEAP[$30]; //@line 207 "cPickle.c"
        var $32=((($31))|0)==0; //@line 207 "cPickle.c"
        if ($32) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 207 "cPickle.c"
      case 7: // $bb6
        var $33=HEAP[$_py_tmp]; //@line 207 "cPickle.c"
        var $34=(($33+4)&4294967295); //@line 207 "cPickle.c"
        var $35=HEAP[$34]; //@line 207 "cPickle.c"
        var $36=(($35+24)&4294967295); //@line 207 "cPickle.c"
        var $37=HEAP[$36]; //@line 207 "cPickle.c"
        var $38=HEAP[$_py_tmp]; //@line 207 "cPickle.c"
        FUNCTION_TABLE[$37]($38); //@line 207 "cPickle.c"
        __label__ = 8; break; //@line 207 "cPickle.c"
      case 8: // $bb7
        var $39=HEAP[$p]; //@line 206 "cPickle.c"
        var $40=(($39+4)&4294967295); //@line 206 "cPickle.c"
        HEAP[$p]=$40; //@line 206 "cPickle.c"
        __label__ = 9; break; //@line 206 "cPickle.c"
      case 9: // $bb8
        var $41=HEAP[$i]; //@line 205 "cPickle.c"
        var $42=((($41) - 1)&4294967295); //@line 205 "cPickle.c"
        HEAP[$i]=$42; //@line 205 "cPickle.c"
        var $43=HEAP[$i]; //@line 205 "cPickle.c"
        var $44=HEAP[$clearto_addr]; //@line 205 "cPickle.c"
        var $45=((($43))|0) >= ((($44))|0); //@line 205 "cPickle.c"
        if ($45) { __label__ = 5; break; } else { __label__ = 10; break; } //@line 205 "cPickle.c"
      case 10: // $bb9
        var $46=HEAP[$self_addr]; //@line 209 "cPickle.c"
        var $47=(($46+8)&4294967295); //@line 209 "cPickle.c"
        var $48=HEAP[$clearto_addr]; //@line 209 "cPickle.c"
        HEAP[$47]=$48; //@line 209 "cPickle.c"
        HEAP[$0]=0; //@line 211 "cPickle.c"
        __label__ = 11; break; //@line 211 "cPickle.c"
      case 11: // $bb10
        var $49=HEAP[$0]; //@line 201 "cPickle.c"
        HEAP[$retval]=$49; //@line 201 "cPickle.c"
        __label__ = 12; break; //@line 201 "cPickle.c"
      case 12: // $return
        var $retval11=HEAP[$retval]; //@line 201 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 201 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pdata_grow($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $bigger=__stackBase__+12;
        var $nbytes=__stackBase__+16;
        var $tmp=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 221 "cPickle.c"
        var $2=(($1+12)&4294967295); //@line 221 "cPickle.c"
        var $3=HEAP[$2]; //@line 221 "cPickle.c"
        var $4=($3) << 1; //@line 221 "cPickle.c"
        HEAP[$bigger]=$4; //@line 221 "cPickle.c"
        var $5=HEAP[$bigger]; //@line 222 "cPickle.c"
        var $6=((($5))|0) <= 0; //@line 222 "cPickle.c"
        if ($6) { __label__ = 4; break; } else { __label__ = 1; break; } //@line 222 "cPickle.c"
      case 1: // $bb
        var $7=HEAP[$bigger]; //@line 226 "cPickle.c"
        var $8=((($7) * 4)&4294967295); //@line 226 "cPickle.c"
        HEAP[$nbytes]=$8; //@line 226 "cPickle.c"
        var $9=HEAP[$nbytes]; //@line 227 "cPickle.c"
        var $10=Math.floor(((($9))>>>0)/4); //@line 227 "cPickle.c"
        var $11=HEAP[$bigger]; //@line 227 "cPickle.c"
        var $12=((($10))|0)!=((($11))|0); //@line 227 "cPickle.c"
        if ($12) { __label__ = 4; break; } else { __label__ = 2; break; } //@line 227 "cPickle.c"
      case 2: // $bb1
        var $13=HEAP[$self_addr]; //@line 229 "cPickle.c"
        var $14=(($13+16)&4294967295); //@line 229 "cPickle.c"
        var $15=HEAP[$14]; //@line 229 "cPickle.c"
        var $16=$15; //@line 229 "cPickle.c"
        var $17=HEAP[$nbytes]; //@line 229 "cPickle.c"
        var $18=_realloc($16, $17); //@line 229 "cPickle.c"
        var $19=$18; //@line 229 "cPickle.c"
        HEAP[$tmp]=$19; //@line 229 "cPickle.c"
        var $20=HEAP[$tmp]; //@line 230 "cPickle.c"
        var $21=($20)==0; //@line 230 "cPickle.c"
        if ($21) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 230 "cPickle.c"
      case 3: // $bb2
        var $22=HEAP[$self_addr]; //@line 232 "cPickle.c"
        var $23=(($22+16)&4294967295); //@line 232 "cPickle.c"
        var $24=HEAP[$tmp]; //@line 232 "cPickle.c"
        HEAP[$23]=$24; //@line 232 "cPickle.c"
        var $25=HEAP[$self_addr]; //@line 233 "cPickle.c"
        var $26=(($25+12)&4294967295); //@line 233 "cPickle.c"
        var $27=HEAP[$bigger]; //@line 233 "cPickle.c"
        HEAP[$26]=$27; //@line 233 "cPickle.c"
        HEAP[$0]=0; //@line 234 "cPickle.c"
        __label__ = 5; break; //@line 234 "cPickle.c"
      case 4: // $nomemory
        var $28=_PyErr_NoMemory(); //@line 237 "cPickle.c"
        HEAP[$0]=-1; //@line 238 "cPickle.c"
        __label__ = 5; break; //@line 238 "cPickle.c"
      case 5: // $bb3
        var $29=HEAP[$0]; //@line 234 "cPickle.c"
        HEAP[$retval]=$29; //@line 234 "cPickle.c"
        __label__ = 6; break; //@line 234 "cPickle.c"
      case 6: // $return
        var $retval4=HEAP[$retval]; //@line 234 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 234 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pdata_popTuple($self, $start) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $start_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $r=__stackBase__+16;
        var $i=__stackBase__+20;
        var $j=__stackBase__+24;
        var $l=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$start_addr]=$start;
        var $1=HEAP[$self_addr]; //@line 288 "cPickle.c"
        var $2=(($1+8)&4294967295); //@line 288 "cPickle.c"
        var $3=HEAP[$2]; //@line 288 "cPickle.c"
        var $4=HEAP[$start_addr]; //@line 288 "cPickle.c"
        var $5=((($3) - ($4))&4294967295); //@line 288 "cPickle.c"
        HEAP[$l]=$5; //@line 288 "cPickle.c"
        var $6=HEAP[$l]; //@line 289 "cPickle.c"
        var $7=_PyTuple_New($6); //@line 289 "cPickle.c"
        HEAP[$r]=$7; //@line 289 "cPickle.c"
        var $8=HEAP[$r]; //@line 290 "cPickle.c"
        var $9=($8)==0; //@line 290 "cPickle.c"
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 290 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 291 "cPickle.c"
        __label__ = 6; break; //@line 291 "cPickle.c"
      case 2: // $bb1
        var $10=HEAP[$start_addr]; //@line 292 "cPickle.c"
        HEAP[$i]=$10; //@line 292 "cPickle.c"
        HEAP[$j]=0; //@line 292 "cPickle.c"
        __label__ = 4; break; //@line 292 "cPickle.c"
      case 3: // $bb2
        var $11=HEAP[$r]; //@line 293 "cPickle.c"
        var $12=$11; //@line 293 "cPickle.c"
        var $13=HEAP[$j]; //@line 293 "cPickle.c"
        var $14=HEAP[$self_addr]; //@line 293 "cPickle.c"
        var $15=(($14+16)&4294967295); //@line 293 "cPickle.c"
        var $16=HEAP[$15]; //@line 293 "cPickle.c"
        var $17=HEAP[$i]; //@line 293 "cPickle.c"
        var $18=(($16+4*$17)&4294967295); //@line 293 "cPickle.c"
        var $19=HEAP[$18]; //@line 293 "cPickle.c"
        var $20=(($12+12)&4294967295); //@line 293 "cPickle.c"
        var $21=(($20+$13*4)&4294967295); //@line 293 "cPickle.c"
        HEAP[$21]=$19; //@line 293 "cPickle.c"
        var $22=HEAP[$i]; //@line 292 "cPickle.c"
        var $23=((($22) + 1)&4294967295); //@line 292 "cPickle.c"
        HEAP[$i]=$23; //@line 292 "cPickle.c"
        var $24=HEAP[$j]; //@line 292 "cPickle.c"
        var $25=((($24) + 1)&4294967295); //@line 292 "cPickle.c"
        HEAP[$j]=$25; //@line 292 "cPickle.c"
        __label__ = 4; break; //@line 292 "cPickle.c"
      case 4: // $bb3
        var $26=HEAP[$j]; //@line 292 "cPickle.c"
        var $27=HEAP[$l]; //@line 292 "cPickle.c"
        var $28=((($26))|0) < ((($27))|0); //@line 292 "cPickle.c"
        if ($28) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 292 "cPickle.c"
      case 5: // $bb4
        var $29=HEAP[$self_addr]; //@line 295 "cPickle.c"
        var $30=(($29+8)&4294967295); //@line 295 "cPickle.c"
        var $31=HEAP[$start_addr]; //@line 295 "cPickle.c"
        HEAP[$30]=$31; //@line 295 "cPickle.c"
        var $32=HEAP[$r]; //@line 296 "cPickle.c"
        HEAP[$0]=$32; //@line 296 "cPickle.c"
        __label__ = 6; break; //@line 296 "cPickle.c"
      case 6: // $bb5
        var $33=HEAP[$0]; //@line 291 "cPickle.c"
        HEAP[$retval]=$33; //@line 291 "cPickle.c"
        __label__ = 7; break; //@line 291 "cPickle.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 291 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 291 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pdata_popList($self, $start) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $start_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $r=__stackBase__+16;
        var $i=__stackBase__+20;
        var $j=__stackBase__+24;
        var $l=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$start_addr]=$start;
        var $1=HEAP[$self_addr]; //@line 305 "cPickle.c"
        var $2=(($1+8)&4294967295); //@line 305 "cPickle.c"
        var $3=HEAP[$2]; //@line 305 "cPickle.c"
        var $4=HEAP[$start_addr]; //@line 305 "cPickle.c"
        var $5=((($3) - ($4))&4294967295); //@line 305 "cPickle.c"
        HEAP[$l]=$5; //@line 305 "cPickle.c"
        var $6=HEAP[$l]; //@line 306 "cPickle.c"
        var $7=_PyList_New($6); //@line 306 "cPickle.c"
        HEAP[$r]=$7; //@line 306 "cPickle.c"
        var $8=HEAP[$r]; //@line 306 "cPickle.c"
        var $9=($8)==0; //@line 306 "cPickle.c"
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 306 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 306 "cPickle.c"
        __label__ = 6; break; //@line 306 "cPickle.c"
      case 2: // $bb1
        var $10=HEAP[$start_addr]; //@line 307 "cPickle.c"
        HEAP[$i]=$10; //@line 307 "cPickle.c"
        HEAP[$j]=0; //@line 307 "cPickle.c"
        __label__ = 4; break; //@line 307 "cPickle.c"
      case 3: // $bb2
        var $11=HEAP[$r]; //@line 308 "cPickle.c"
        var $12=$11; //@line 308 "cPickle.c"
        var $13=(($12+12)&4294967295); //@line 308 "cPickle.c"
        var $14=HEAP[$13]; //@line 308 "cPickle.c"
        var $15=HEAP[$self_addr]; //@line 308 "cPickle.c"
        var $16=(($15+16)&4294967295); //@line 308 "cPickle.c"
        var $17=HEAP[$16]; //@line 308 "cPickle.c"
        var $18=HEAP[$i]; //@line 308 "cPickle.c"
        var $19=(($17+4*$18)&4294967295); //@line 308 "cPickle.c"
        var $20=HEAP[$19]; //@line 308 "cPickle.c"
        var $21=HEAP[$j]; //@line 308 "cPickle.c"
        var $22=(($14+4*$21)&4294967295); //@line 308 "cPickle.c"
        HEAP[$22]=$20; //@line 308 "cPickle.c"
        var $23=HEAP[$i]; //@line 307 "cPickle.c"
        var $24=((($23) + 1)&4294967295); //@line 307 "cPickle.c"
        HEAP[$i]=$24; //@line 307 "cPickle.c"
        var $25=HEAP[$j]; //@line 307 "cPickle.c"
        var $26=((($25) + 1)&4294967295); //@line 307 "cPickle.c"
        HEAP[$j]=$26; //@line 307 "cPickle.c"
        __label__ = 4; break; //@line 307 "cPickle.c"
      case 4: // $bb3
        var $27=HEAP[$j]; //@line 307 "cPickle.c"
        var $28=HEAP[$l]; //@line 307 "cPickle.c"
        var $29=((($27))|0) < ((($28))|0); //@line 307 "cPickle.c"
        if ($29) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 307 "cPickle.c"
      case 5: // $bb4
        var $30=HEAP[$self_addr]; //@line 310 "cPickle.c"
        var $31=(($30+8)&4294967295); //@line 310 "cPickle.c"
        var $32=HEAP[$start_addr]; //@line 310 "cPickle.c"
        HEAP[$31]=$32; //@line 310 "cPickle.c"
        var $33=HEAP[$r]; //@line 311 "cPickle.c"
        HEAP[$0]=$33; //@line 311 "cPickle.c"
        __label__ = 6; break; //@line 311 "cPickle.c"
      case 6: // $bb5
        var $34=HEAP[$0]; //@line 306 "cPickle.c"
        HEAP[$retval]=$34; //@line 306 "cPickle.c"
        __label__ = 7; break; //@line 306 "cPickle.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 306 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 306 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _cPickle_ErrFormat($ErrType, $stringformat, $format) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $ErrType_addr=__stackBase__;
        var $stringformat_addr=__stackBase__+4;
        var $format_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $va=__stackBase__+20;
        var $args=__stackBase__+24;
        var $retval1=__stackBase__+28;
        var $v=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$ErrType_addr]=$ErrType;
        HEAP[$stringformat_addr]=$stringformat;
        HEAP[$format_addr]=$format;
        HEAP[$args]=0; //@line 397 "cPickle.c"
        HEAP[$retval1]=0; //@line 397 "cPickle.c"
        var $va2=$va; //@line 398 "cPickle.c"
        HEAP[$va2]=arguments[_cPickle_ErrFormat.length];; //@line 398 "cPickle.c"
        var $1=HEAP[$format_addr]; //@line 400 "cPickle.c"
        var $2=($1)!=0; //@line 400 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 400 "cPickle.c"
      case 1: // $bb
        var $3=HEAP[$va]; //@line 400 "cPickle.c"
        var $4=HEAP[$format_addr]; //@line 400 "cPickle.c"
        var $5=_Py_VaBuildValue($4, $3); //@line 400 "cPickle.c"
        HEAP[$args]=$5; //@line 400 "cPickle.c"
        __label__ = 2; break; //@line 400 "cPickle.c"
      case 2: // $bb3
        var $va4=$va; //@line 401 "cPickle.c"
        ;; //@line 401 "cPickle.c"
        var $6=HEAP[$format_addr]; //@line 402 "cPickle.c"
        var $7=($6)!=0; //@line 402 "cPickle.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 402 "cPickle.c"
      case 3: // $bb5
        var $8=HEAP[$args]; //@line 402 "cPickle.c"
        var $9=($8)==0; //@line 402 "cPickle.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 402 "cPickle.c"
      case 4: // $bb6
        HEAP[$0]=0; //@line 402 "cPickle.c"
        __label__ = 24; break; //@line 402 "cPickle.c"
      case 5: // $bb7
        var $10=HEAP[$stringformat_addr]; //@line 403 "cPickle.c"
        var $11=($10)!=0; //@line 403 "cPickle.c"
        if ($11) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 403 "cPickle.c"
      case 6: // $bb8
        var $12=HEAP[$stringformat_addr]; //@line 403 "cPickle.c"
        var $13=_PyString_FromString($12); //@line 403 "cPickle.c"
        HEAP[$retval1]=$13; //@line 403 "cPickle.c"
        var $14=HEAP[$retval1]; //@line 403 "cPickle.c"
        var $15=($14)==0; //@line 403 "cPickle.c"
        if ($15) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 403 "cPickle.c"
      case 7: // $bb9
        HEAP[$0]=0; //@line 404 "cPickle.c"
        __label__ = 24; break; //@line 404 "cPickle.c"
      case 8: // $bb10
        var $16=HEAP[$retval1]; //@line 406 "cPickle.c"
        var $17=($16)!=0; //@line 406 "cPickle.c"
        if ($17) { __label__ = 9; break; } else { __label__ = 18; break; } //@line 406 "cPickle.c"
      case 9: // $bb11
        var $18=HEAP[$args]; //@line 407 "cPickle.c"
        var $19=($18)!=0; //@line 407 "cPickle.c"
        if ($19) { __label__ = 10; break; } else { __label__ = 17; break; } //@line 407 "cPickle.c"
      case 10: // $bb12
        var $20=HEAP[$retval1]; //@line 409 "cPickle.c"
        var $21=HEAP[$args]; //@line 409 "cPickle.c"
        var $22=_PyString_Format($20, $21); //@line 409 "cPickle.c"
        HEAP[$v]=$22; //@line 409 "cPickle.c"
        var $23=HEAP[$retval1]; //@line 410 "cPickle.c"
        var $24=(($23)&4294967295); //@line 410 "cPickle.c"
        var $25=HEAP[$24]; //@line 410 "cPickle.c"
        var $26=((($25) - 1)&4294967295); //@line 410 "cPickle.c"
        var $27=HEAP[$retval1]; //@line 410 "cPickle.c"
        var $28=(($27)&4294967295); //@line 410 "cPickle.c"
        HEAP[$28]=$26; //@line 410 "cPickle.c"
        var $29=HEAP[$retval1]; //@line 410 "cPickle.c"
        var $30=(($29)&4294967295); //@line 410 "cPickle.c"
        var $31=HEAP[$30]; //@line 410 "cPickle.c"
        var $32=((($31))|0)==0; //@line 410 "cPickle.c"
        if ($32) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 410 "cPickle.c"
      case 11: // $bb13
        var $33=HEAP[$retval1]; //@line 410 "cPickle.c"
        var $34=(($33+4)&4294967295); //@line 410 "cPickle.c"
        var $35=HEAP[$34]; //@line 410 "cPickle.c"
        var $36=(($35+24)&4294967295); //@line 410 "cPickle.c"
        var $37=HEAP[$36]; //@line 410 "cPickle.c"
        var $38=HEAP[$retval1]; //@line 410 "cPickle.c"
        FUNCTION_TABLE[$37]($38); //@line 410 "cPickle.c"
        __label__ = 12; break; //@line 410 "cPickle.c"
      case 12: // $bb14
        var $39=HEAP[$args]; //@line 411 "cPickle.c"
        var $40=(($39)&4294967295); //@line 411 "cPickle.c"
        var $41=HEAP[$40]; //@line 411 "cPickle.c"
        var $42=((($41) - 1)&4294967295); //@line 411 "cPickle.c"
        var $43=HEAP[$args]; //@line 411 "cPickle.c"
        var $44=(($43)&4294967295); //@line 411 "cPickle.c"
        HEAP[$44]=$42; //@line 411 "cPickle.c"
        var $45=HEAP[$args]; //@line 411 "cPickle.c"
        var $46=(($45)&4294967295); //@line 411 "cPickle.c"
        var $47=HEAP[$46]; //@line 411 "cPickle.c"
        var $48=((($47))|0)==0; //@line 411 "cPickle.c"
        if ($48) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 411 "cPickle.c"
      case 13: // $bb15
        var $49=HEAP[$args]; //@line 411 "cPickle.c"
        var $50=(($49+4)&4294967295); //@line 411 "cPickle.c"
        var $51=HEAP[$50]; //@line 411 "cPickle.c"
        var $52=(($51+24)&4294967295); //@line 411 "cPickle.c"
        var $53=HEAP[$52]; //@line 411 "cPickle.c"
        var $54=HEAP[$args]; //@line 411 "cPickle.c"
        FUNCTION_TABLE[$53]($54); //@line 411 "cPickle.c"
        __label__ = 14; break; //@line 411 "cPickle.c"
      case 14: // $bb16
        var $55=HEAP[$v]; //@line 412 "cPickle.c"
        var $56=($55)==0; //@line 412 "cPickle.c"
        if ($56) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 412 "cPickle.c"
      case 15: // $bb17
        HEAP[$0]=0; //@line 412 "cPickle.c"
        __label__ = 24; break; //@line 412 "cPickle.c"
      case 16: // $bb18
        var $57=HEAP[$v]; //@line 413 "cPickle.c"
        HEAP[$retval1]=$57; //@line 413 "cPickle.c"
        __label__ = 17; break; //@line 413 "cPickle.c"
      case 17: // $bb19
        __label__ = 21; break; //@line 413 "cPickle.c"
      case 18: // $bb20
        var $58=HEAP[$args]; //@line 417 "cPickle.c"
        var $59=($58)!=0; //@line 417 "cPickle.c"
        if ($59) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 417 "cPickle.c"
      case 19: // $bb21
        var $60=HEAP[$args]; //@line 417 "cPickle.c"
        HEAP[$retval1]=$60; //@line 417 "cPickle.c"
        __label__ = 21; break; //@line 417 "cPickle.c"
      case 20: // $bb22
        var $61=HEAP[$ErrType_addr]; //@line 419 "cPickle.c"
        _PyErr_SetObject($61, __Py_NoneStruct); //@line 419 "cPickle.c"
        HEAP[$0]=0; //@line 420 "cPickle.c"
        __label__ = 24; break; //@line 420 "cPickle.c"
      case 21: // $bb23
        var $62=HEAP[$ErrType_addr]; //@line 422 "cPickle.c"
        var $63=HEAP[$retval1]; //@line 422 "cPickle.c"
        _PyErr_SetObject($62, $63); //@line 422 "cPickle.c"
        var $64=HEAP[$retval1]; //@line 423 "cPickle.c"
        var $65=(($64)&4294967295); //@line 423 "cPickle.c"
        var $66=HEAP[$65]; //@line 423 "cPickle.c"
        var $67=((($66) - 1)&4294967295); //@line 423 "cPickle.c"
        var $68=HEAP[$retval1]; //@line 423 "cPickle.c"
        var $69=(($68)&4294967295); //@line 423 "cPickle.c"
        HEAP[$69]=$67; //@line 423 "cPickle.c"
        var $70=HEAP[$retval1]; //@line 423 "cPickle.c"
        var $71=(($70)&4294967295); //@line 423 "cPickle.c"
        var $72=HEAP[$71]; //@line 423 "cPickle.c"
        var $73=((($72))|0)==0; //@line 423 "cPickle.c"
        if ($73) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 423 "cPickle.c"
      case 22: // $bb24
        var $74=HEAP[$retval1]; //@line 423 "cPickle.c"
        var $75=(($74+4)&4294967295); //@line 423 "cPickle.c"
        var $76=HEAP[$75]; //@line 423 "cPickle.c"
        var $77=(($76+24)&4294967295); //@line 423 "cPickle.c"
        var $78=HEAP[$77]; //@line 423 "cPickle.c"
        var $79=HEAP[$retval1]; //@line 423 "cPickle.c"
        FUNCTION_TABLE[$78]($79); //@line 423 "cPickle.c"
        __label__ = 23; break; //@line 423 "cPickle.c"
      case 23: // $bb25
        HEAP[$0]=0; //@line 424 "cPickle.c"
        __label__ = 24; break; //@line 424 "cPickle.c"
      case 24: // $bb26
        var $80=HEAP[$0]; //@line 402 "cPickle.c"
        HEAP[$retval]=$80; //@line 402 "cPickle.c"
        __label__ = 25; break; //@line 402 "cPickle.c"
      case 25: // $return
        var $retval27=HEAP[$retval]; //@line 402 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval27; //@line 402 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _write_file($self, $s, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $s_addr=__stackBase__+4;
        var $n_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $nbyteswritten=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$s_addr]=$s;
        HEAP[$n_addr]=$n;
        var $1=HEAP[$s_addr]; //@line 432 "cPickle.c"
        var $2=($1)==0; //@line 432 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 432 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 433 "cPickle.c"
        __label__ = 5; break; //@line 433 "cPickle.c"
      case 2: // $bb1
        var $3=HEAP[$self_addr]; //@line 441 "cPickle.c"
        var $4=(($3+16)&4294967295); //@line 441 "cPickle.c"
        var $5=HEAP[$4]; //@line 441 "cPickle.c"
        var $6=$5; //@line 441 "cPickle.c"
        _PyFile_IncUseCount($6); //@line 441 "cPickle.c"
        var $7=HEAP[$self_addr]; //@line 443 "cPickle.c"
        var $8=(($7+8)&4294967295); //@line 443 "cPickle.c"
        var $9=HEAP[$8]; //@line 443 "cPickle.c"
        var $10=HEAP[$n_addr]; //@line 443 "cPickle.c"
        var $11=HEAP[$s_addr]; //@line 443 "cPickle.c"
        var $12=_fwrite($11, 1, $10, $9); //@line 443 "cPickle.c"
        HEAP[$nbyteswritten]=$12; //@line 443 "cPickle.c"
        var $13=HEAP[$self_addr]; //@line 445 "cPickle.c"
        var $14=(($13+16)&4294967295); //@line 445 "cPickle.c"
        var $15=HEAP[$14]; //@line 445 "cPickle.c"
        var $16=$15; //@line 445 "cPickle.c"
        _PyFile_DecUseCount($16); //@line 445 "cPickle.c"
        var $17=HEAP[$n_addr]; //@line 446 "cPickle.c"
        var $18=HEAP[$nbyteswritten]; //@line 446 "cPickle.c"
        var $19=((($17))|0)!=((($18))|0); //@line 446 "cPickle.c"
        if ($19) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 446 "cPickle.c"
      case 3: // $bb2
        var $20=HEAP[_PyExc_IOError]; //@line 447 "cPickle.c"
        var $21=_PyErr_SetFromErrno($20); //@line 447 "cPickle.c"
        HEAP[$0]=-1; //@line 448 "cPickle.c"
        __label__ = 5; break; //@line 448 "cPickle.c"
      case 4: // $bb3
        var $22=HEAP[$n_addr]; //@line 451 "cPickle.c"
        HEAP[$0]=$22; //@line 451 "cPickle.c"
        __label__ = 5; break; //@line 451 "cPickle.c"
      case 5: // $bb4
        var $23=HEAP[$0]; //@line 433 "cPickle.c"
        HEAP[$retval]=$23; //@line 433 "cPickle.c"
        __label__ = 6; break; //@line 433 "cPickle.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 433 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 433 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _write_cStringIO($self, $s, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $s_addr=__stackBase__+4;
        var $n_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$s_addr]=$s;
        HEAP[$n_addr]=$n;
        var $1=HEAP[$s_addr]; //@line 457 "cPickle.c"
        var $2=($1)==0; //@line 457 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 457 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 458 "cPickle.c"
        __label__ = 5; break; //@line 458 "cPickle.c"
      case 2: // $bb1
        var $3=HEAP[_PycStringIO]; //@line 461 "cPickle.c"
        var $4=(($3+8)&4294967295); //@line 461 "cPickle.c"
        var $5=HEAP[$4]; //@line 461 "cPickle.c"
        var $6=HEAP[$self_addr]; //@line 461 "cPickle.c"
        var $7=(($6+16)&4294967295); //@line 461 "cPickle.c"
        var $8=HEAP[$7]; //@line 461 "cPickle.c"
        var $9=HEAP[$s_addr]; //@line 461 "cPickle.c"
        var $10=HEAP[$n_addr]; //@line 461 "cPickle.c"
        var $11=FUNCTION_TABLE[$5]($8, $9, $10); //@line 461 "cPickle.c"
        var $12=HEAP[$n_addr]; //@line 461 "cPickle.c"
        var $13=((($11))|0)!=((($12))|0); //@line 461 "cPickle.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 461 "cPickle.c"
      case 3: // $bb2
        HEAP[$0]=-1; //@line 462 "cPickle.c"
        __label__ = 5; break; //@line 462 "cPickle.c"
      case 4: // $bb3
        var $14=HEAP[$n_addr]; //@line 465 "cPickle.c"
        HEAP[$0]=$14; //@line 465 "cPickle.c"
        __label__ = 5; break; //@line 465 "cPickle.c"
      case 5: // $bb4
        var $15=HEAP[$0]; //@line 458 "cPickle.c"
        HEAP[$retval]=$15; //@line 458 "cPickle.c"
        __label__ = 6; break; //@line 458 "cPickle.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 458 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 458 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _write_none($self, $s, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $s_addr=__stackBase__+4;
        var $n_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$s_addr]=$s;
        HEAP[$n_addr]=$n;
        var $1=HEAP[$s_addr]; //@line 471 "cPickle.c"
        var $2=($1)==0; //@line 471 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 471 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 471 "cPickle.c"
        __label__ = 3; break; //@line 471 "cPickle.c"
      case 2: // $bb1
        var $3=HEAP[$n_addr]; //@line 473 "cPickle.c"
        HEAP[$0]=$3; //@line 473 "cPickle.c"
        __label__ = 3; break; //@line 473 "cPickle.c"
      case 3: // $bb2
        var $4=HEAP[$0]; //@line 471 "cPickle.c"
        HEAP[$retval]=$4; //@line 471 "cPickle.c"
        __label__ = 4; break; //@line 471 "cPickle.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 471 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 471 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _write_other($self, $s, $_n) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $s_addr=__stackBase__+4;
        var $_n_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $py_str=__stackBase__+20;
        var $junk=__stackBase__+24;
        var $n=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$s_addr]=$s;
        HEAP[$_n_addr]=$_n;
        HEAP[$py_str]=0; //@line 479 "cPickle.c"
        HEAP[$junk]=0; //@line 479 "cPickle.c"
        var $1=HEAP[$_n_addr]; //@line 484 "cPickle.c"
        HEAP[$n]=$1; //@line 484 "cPickle.c"
        var $2=HEAP[$s_addr]; //@line 485 "cPickle.c"
        var $3=($2)==0; //@line 485 "cPickle.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 6; break; } //@line 485 "cPickle.c"
      case 1: // $bb
        var $4=HEAP[$self_addr]; //@line 486 "cPickle.c"
        var $5=(($4+56)&4294967295); //@line 486 "cPickle.c"
        var $6=HEAP[$5]; //@line 486 "cPickle.c"
        var $7=((($6))|0)==0; //@line 486 "cPickle.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 486 "cPickle.c"
      case 2: // $bb1
        HEAP[$0]=0; //@line 486 "cPickle.c"
        __label__ = 41; break; //@line 486 "cPickle.c"
      case 3: // $bb2
        var $8=HEAP[$self_addr]; //@line 487 "cPickle.c"
        var $9=(($8+56)&4294967295); //@line 487 "cPickle.c"
        var $10=HEAP[$9]; //@line 487 "cPickle.c"
        var $11=HEAP[$self_addr]; //@line 487 "cPickle.c"
        var $12=(($11+52)&4294967295); //@line 487 "cPickle.c"
        var $13=HEAP[$12]; //@line 487 "cPickle.c"
        var $14=_PyString_FromStringAndSize($13, $10); //@line 487 "cPickle.c"
        HEAP[$py_str]=$14; //@line 487 "cPickle.c"
        var $15=HEAP[$py_str]; //@line 489 "cPickle.c"
        var $16=($15)==0; //@line 489 "cPickle.c"
        if ($16) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 489 "cPickle.c"
      case 4: // $bb3
        HEAP[$0]=-1; //@line 490 "cPickle.c"
        __label__ = 41; break; //@line 490 "cPickle.c"
      case 5: // $bb4
        __label__ = 15; break; //@line 490 "cPickle.c"
      case 6: // $bb5
        var $17=HEAP[$self_addr]; //@line 493 "cPickle.c"
        var $18=(($17+56)&4294967295); //@line 493 "cPickle.c"
        var $19=HEAP[$18]; //@line 493 "cPickle.c"
        var $20=((($19))|0)!=0; //@line 493 "cPickle.c"
        if ($20) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 493 "cPickle.c"
      case 7: // $bb6
        var $21=HEAP[$self_addr]; //@line 493 "cPickle.c"
        var $22=(($21+56)&4294967295); //@line 493 "cPickle.c"
        var $23=HEAP[$22]; //@line 493 "cPickle.c"
        var $24=HEAP[$n]; //@line 493 "cPickle.c"
        var $25=((($23) + ($24))&4294967295); //@line 493 "cPickle.c"
        var $26=((($25))|0) > 256; //@line 493 "cPickle.c"
        if ($26) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 493 "cPickle.c"
      case 8: // $bb7
        var $27=HEAP[$self_addr]; //@line 494 "cPickle.c"
        var $28=_write_other($27, 0, 0); //@line 494 "cPickle.c"
        var $29=((($28))|0) < 0; //@line 494 "cPickle.c"
        if ($29) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 494 "cPickle.c"
      case 9: // $bb8
        HEAP[$0]=-1; //@line 495 "cPickle.c"
        __label__ = 41; break; //@line 495 "cPickle.c"
      case 10: // $bb9
        var $30=HEAP[$n]; //@line 498 "cPickle.c"
        var $31=((($30))|0) > 256; //@line 498 "cPickle.c"
        if ($31) { __label__ = 11; break; } else { __label__ = 14; break; } //@line 498 "cPickle.c"
      case 11: // $bb10
        var $32=HEAP[$s_addr]; //@line 499 "cPickle.c"
        var $33=HEAP[$n]; //@line 499 "cPickle.c"
        var $34=_PyString_FromStringAndSize($32, $33); //@line 499 "cPickle.c"
        HEAP[$py_str]=$34; //@line 499 "cPickle.c"
        var $35=HEAP[$py_str]; //@line 499 "cPickle.c"
        var $36=($35)==0; //@line 499 "cPickle.c"
        if ($36) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 499 "cPickle.c"
      case 12: // $bb11
        HEAP[$0]=-1; //@line 501 "cPickle.c"
        __label__ = 41; break; //@line 501 "cPickle.c"
      case 13: // $bb12
        __label__ = 15; break; //@line 501 "cPickle.c"
      case 14: // $bb13
        var $37=HEAP[$n]; //@line 504 "cPickle.c"
        var $38=HEAP[$self_addr]; //@line 504 "cPickle.c"
        var $39=(($38+52)&4294967295); //@line 504 "cPickle.c"
        var $40=HEAP[$39]; //@line 504 "cPickle.c"
        var $41=HEAP[$self_addr]; //@line 504 "cPickle.c"
        var $42=(($41+56)&4294967295); //@line 504 "cPickle.c"
        var $43=HEAP[$42]; //@line 504 "cPickle.c"
        var $44=(($40+$43)&4294967295); //@line 504 "cPickle.c"
        var $45=HEAP[$s_addr]; //@line 504 "cPickle.c"
        _llvm_memcpy_p0i8_p0i8_i32($44, $45, $37, 1, 0); //@line 504 "cPickle.c"
        var $46=HEAP[$self_addr]; //@line 505 "cPickle.c"
        var $47=(($46+56)&4294967295); //@line 505 "cPickle.c"
        var $48=HEAP[$47]; //@line 505 "cPickle.c"
        var $49=HEAP[$n]; //@line 505 "cPickle.c"
        var $50=((($48) + ($49))&4294967295); //@line 505 "cPickle.c"
        var $51=HEAP[$self_addr]; //@line 505 "cPickle.c"
        var $52=(($51+56)&4294967295); //@line 505 "cPickle.c"
        HEAP[$52]=$50; //@line 505 "cPickle.c"
        var $53=HEAP[$n]; //@line 506 "cPickle.c"
        HEAP[$0]=$53; //@line 506 "cPickle.c"
        __label__ = 41; break; //@line 506 "cPickle.c"
      case 15: // $bb14
        var $54=HEAP[$self_addr]; //@line 510 "cPickle.c"
        var $55=(($54+12)&4294967295); //@line 510 "cPickle.c"
        var $56=HEAP[$55]; //@line 510 "cPickle.c"
        var $57=($56)!=0; //@line 510 "cPickle.c"
        if ($57) { __label__ = 16; break; } else { __label__ = 34; break; } //@line 510 "cPickle.c"
      case 16: // $bb15
        var $58=HEAP[$self_addr]; //@line 512 "cPickle.c"
        var $59=(($58+24)&4294967295); //@line 512 "cPickle.c"
        var $60=HEAP[$59]; //@line 512 "cPickle.c"
        var $61=($60)!=0; //@line 512 "cPickle.c"
        if ($61) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 512 "cPickle.c"
      case 17: // $bb16
        var $62=_PyTuple_New(1); //@line 512 "cPickle.c"
        var $63=HEAP[$self_addr]; //@line 512 "cPickle.c"
        var $64=(($63+24)&4294967295); //@line 512 "cPickle.c"
        HEAP[$64]=$62; //@line 512 "cPickle.c"
        var $65=HEAP[$self_addr]; //@line 512 "cPickle.c"
        var $66=(($65+24)&4294967295); //@line 512 "cPickle.c"
        var $67=HEAP[$66]; //@line 512 "cPickle.c"
        var $68=($67)!=0; //@line 512 "cPickle.c"
        if ($68) { __label__ = 18; break; } else { __label__ = 22; break; } //@line 512 "cPickle.c"
      case 18: // $bb17
        var $69=HEAP[$self_addr]; //@line 512 "cPickle.c"
        var $70=(($69+24)&4294967295); //@line 512 "cPickle.c"
        var $71=HEAP[$70]; //@line 512 "cPickle.c"
        var $72=$71; //@line 512 "cPickle.c"
        var $73=(($72+12)&4294967295); //@line 512 "cPickle.c"
        var $74=(($73)&4294967295); //@line 512 "cPickle.c"
        var $75=HEAP[$74]; //@line 512 "cPickle.c"
        var $76=($75)!=0; //@line 512 "cPickle.c"
        if ($76) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 512 "cPickle.c"
      case 19: // $bb18
        var $77=HEAP[$self_addr]; //@line 512 "cPickle.c"
        var $78=(($77+24)&4294967295); //@line 512 "cPickle.c"
        var $79=HEAP[$78]; //@line 512 "cPickle.c"
        var $80=$79; //@line 512 "cPickle.c"
        var $81=(($80+12)&4294967295); //@line 512 "cPickle.c"
        var $82=(($81)&4294967295); //@line 512 "cPickle.c"
        var $83=HEAP[$82]; //@line 512 "cPickle.c"
        var $84=(($83)&4294967295); //@line 512 "cPickle.c"
        var $85=HEAP[$84]; //@line 512 "cPickle.c"
        var $86=((($85) - 1)&4294967295); //@line 512 "cPickle.c"
        var $87=(($83)&4294967295); //@line 512 "cPickle.c"
        HEAP[$87]=$86; //@line 512 "cPickle.c"
        var $88=(($83)&4294967295); //@line 512 "cPickle.c"
        var $89=HEAP[$88]; //@line 512 "cPickle.c"
        var $90=((($89))|0)==0; //@line 512 "cPickle.c"
        if ($90) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 512 "cPickle.c"
      case 20: // $bb19
        var $91=HEAP[$self_addr]; //@line 512 "cPickle.c"
        var $92=(($91+24)&4294967295); //@line 512 "cPickle.c"
        var $93=HEAP[$92]; //@line 512 "cPickle.c"
        var $94=$93; //@line 512 "cPickle.c"
        var $95=(($94+12)&4294967295); //@line 512 "cPickle.c"
        var $96=(($95)&4294967295); //@line 512 "cPickle.c"
        var $97=HEAP[$96]; //@line 512 "cPickle.c"
        var $98=(($97+4)&4294967295); //@line 512 "cPickle.c"
        var $99=HEAP[$98]; //@line 512 "cPickle.c"
        var $100=(($99+24)&4294967295); //@line 512 "cPickle.c"
        var $101=HEAP[$100]; //@line 512 "cPickle.c"
        var $102=HEAP[$self_addr]; //@line 512 "cPickle.c"
        var $103=(($102+24)&4294967295); //@line 512 "cPickle.c"
        var $104=HEAP[$103]; //@line 512 "cPickle.c"
        var $105=$104; //@line 512 "cPickle.c"
        var $106=(($105+12)&4294967295); //@line 512 "cPickle.c"
        var $107=(($106)&4294967295); //@line 512 "cPickle.c"
        var $108=HEAP[$107]; //@line 512 "cPickle.c"
        FUNCTION_TABLE[$101]($108); //@line 512 "cPickle.c"
        __label__ = 21; break; //@line 512 "cPickle.c"
      case 21: // $bb20
        var $109=HEAP[$self_addr]; //@line 512 "cPickle.c"
        var $110=(($109+24)&4294967295); //@line 512 "cPickle.c"
        var $111=HEAP[$110]; //@line 512 "cPickle.c"
        var $112=$111; //@line 512 "cPickle.c"
        var $113=(($112+12)&4294967295); //@line 512 "cPickle.c"
        var $114=(($113)&4294967295); //@line 512 "cPickle.c"
        var $115=HEAP[$py_str]; //@line 512 "cPickle.c"
        HEAP[$114]=$115; //@line 512 "cPickle.c"
        __label__ = 24; break; //@line 512 "cPickle.c"
      case 22: // $bb21
        var $116=HEAP[$py_str]; //@line 512 "cPickle.c"
        var $117=(($116)&4294967295); //@line 512 "cPickle.c"
        var $118=HEAP[$117]; //@line 512 "cPickle.c"
        var $119=((($118) - 1)&4294967295); //@line 512 "cPickle.c"
        var $120=HEAP[$py_str]; //@line 512 "cPickle.c"
        var $121=(($120)&4294967295); //@line 512 "cPickle.c"
        HEAP[$121]=$119; //@line 512 "cPickle.c"
        var $122=HEAP[$py_str]; //@line 512 "cPickle.c"
        var $123=(($122)&4294967295); //@line 512 "cPickle.c"
        var $124=HEAP[$123]; //@line 512 "cPickle.c"
        var $125=((($124))|0)==0; //@line 512 "cPickle.c"
        if ($125) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 512 "cPickle.c"
      case 23: // $bb22
        var $126=HEAP[$py_str]; //@line 512 "cPickle.c"
        var $127=(($126+4)&4294967295); //@line 512 "cPickle.c"
        var $128=HEAP[$127]; //@line 512 "cPickle.c"
        var $129=(($128+24)&4294967295); //@line 512 "cPickle.c"
        var $130=HEAP[$129]; //@line 512 "cPickle.c"
        var $131=HEAP[$py_str]; //@line 512 "cPickle.c"
        FUNCTION_TABLE[$130]($131); //@line 512 "cPickle.c"
        __label__ = 24; break; //@line 512 "cPickle.c"
      case 24: // $bb23
        var $132=HEAP[$self_addr]; //@line 513 "cPickle.c"
        var $133=(($132+24)&4294967295); //@line 513 "cPickle.c"
        var $134=HEAP[$133]; //@line 513 "cPickle.c"
        var $135=($134)!=0; //@line 513 "cPickle.c"
        if ($135) { __label__ = 25; break; } else { __label__ = 29; break; } //@line 513 "cPickle.c"
      case 25: // $bb24
        var $136=HEAP[$self_addr]; //@line 514 "cPickle.c"
        var $137=(($136+24)&4294967295); //@line 514 "cPickle.c"
        var $138=HEAP[$137]; //@line 514 "cPickle.c"
        var $139=HEAP[$self_addr]; //@line 514 "cPickle.c"
        var $140=(($139+12)&4294967295); //@line 514 "cPickle.c"
        var $141=HEAP[$140]; //@line 514 "cPickle.c"
        var $142=_PyObject_Call($141, $138, 0); //@line 514 "cPickle.c"
        HEAP[$junk]=$142; //@line 514 "cPickle.c"
        var $143=HEAP[$self_addr]; //@line 515 "cPickle.c"
        var $144=(($143+24)&4294967295); //@line 515 "cPickle.c"
        var $145=HEAP[$144]; //@line 515 "cPickle.c"
        var $146=(($145)&4294967295); //@line 515 "cPickle.c"
        var $147=HEAP[$146]; //@line 515 "cPickle.c"
        var $148=((($147))|0) > 1; //@line 515 "cPickle.c"
        if ($148) { __label__ = 26; break; } else { __label__ = 29; break; } //@line 515 "cPickle.c"
      case 26: // $bb25
        var $149=HEAP[$self_addr]; //@line 515 "cPickle.c"
        var $150=(($149+24)&4294967295); //@line 515 "cPickle.c"
        var $151=HEAP[$150]; //@line 515 "cPickle.c"
        var $152=(($151)&4294967295); //@line 515 "cPickle.c"
        var $153=HEAP[$152]; //@line 515 "cPickle.c"
        var $154=((($153) - 1)&4294967295); //@line 515 "cPickle.c"
        var $155=(($151)&4294967295); //@line 515 "cPickle.c"
        HEAP[$155]=$154; //@line 515 "cPickle.c"
        var $156=(($151)&4294967295); //@line 515 "cPickle.c"
        var $157=HEAP[$156]; //@line 515 "cPickle.c"
        var $158=((($157))|0)==0; //@line 515 "cPickle.c"
        if ($158) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 515 "cPickle.c"
      case 27: // $bb26
        var $159=HEAP[$self_addr]; //@line 515 "cPickle.c"
        var $160=(($159+24)&4294967295); //@line 515 "cPickle.c"
        var $161=HEAP[$160]; //@line 515 "cPickle.c"
        var $162=(($161+4)&4294967295); //@line 515 "cPickle.c"
        var $163=HEAP[$162]; //@line 515 "cPickle.c"
        var $164=(($163+24)&4294967295); //@line 515 "cPickle.c"
        var $165=HEAP[$164]; //@line 515 "cPickle.c"
        var $166=HEAP[$self_addr]; //@line 515 "cPickle.c"
        var $167=(($166+24)&4294967295); //@line 515 "cPickle.c"
        var $168=HEAP[$167]; //@line 515 "cPickle.c"
        FUNCTION_TABLE[$165]($168); //@line 515 "cPickle.c"
        __label__ = 28; break; //@line 515 "cPickle.c"
      case 28: // $bb27
        var $169=HEAP[$self_addr]; //@line 515 "cPickle.c"
        var $170=(($169+24)&4294967295); //@line 515 "cPickle.c"
        HEAP[$170]=0; //@line 515 "cPickle.c"
        __label__ = 29; break; //@line 515 "cPickle.c"
      case 29: // $bb28
        var $171=HEAP[$junk]; //@line 517 "cPickle.c"
        var $172=($171)!=0; //@line 517 "cPickle.c"
        if ($172) { __label__ = 30; break; } else { __label__ = 33; break; } //@line 517 "cPickle.c"
      case 30: // $bb29
        var $173=HEAP[$junk]; //@line 517 "cPickle.c"
        var $174=(($173)&4294967295); //@line 517 "cPickle.c"
        var $175=HEAP[$174]; //@line 517 "cPickle.c"
        var $176=((($175) - 1)&4294967295); //@line 517 "cPickle.c"
        var $177=HEAP[$junk]; //@line 517 "cPickle.c"
        var $178=(($177)&4294967295); //@line 517 "cPickle.c"
        HEAP[$178]=$176; //@line 517 "cPickle.c"
        var $179=HEAP[$junk]; //@line 517 "cPickle.c"
        var $180=(($179)&4294967295); //@line 517 "cPickle.c"
        var $181=HEAP[$180]; //@line 517 "cPickle.c"
        var $182=((($181))|0)==0; //@line 517 "cPickle.c"
        if ($182) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 517 "cPickle.c"
      case 31: // $bb30
        var $183=HEAP[$junk]; //@line 517 "cPickle.c"
        var $184=(($183+4)&4294967295); //@line 517 "cPickle.c"
        var $185=HEAP[$184]; //@line 517 "cPickle.c"
        var $186=(($185+24)&4294967295); //@line 517 "cPickle.c"
        var $187=HEAP[$186]; //@line 517 "cPickle.c"
        var $188=HEAP[$junk]; //@line 517 "cPickle.c"
        FUNCTION_TABLE[$187]($188); //@line 517 "cPickle.c"
        __label__ = 32; break; //@line 517 "cPickle.c"
      case 32: // $bb31
        __label__ = 40; break; //@line 517 "cPickle.c"
      case 33: // $bb32
        HEAP[$0]=-1; //@line 518 "cPickle.c"
        __label__ = 41; break; //@line 518 "cPickle.c"
      case 34: // $bb33
        var $189=HEAP[$self_addr]; //@line 521 "cPickle.c"
        var $190=(($189+16)&4294967295); //@line 521 "cPickle.c"
        var $191=HEAP[$190]; //@line 521 "cPickle.c"
        var $192=$191; //@line 521 "cPickle.c"
        var $193=(($192+8)&4294967295); //@line 521 "cPickle.c"
        var $194=HEAP[$193]; //@line 521 "cPickle.c"
        var $195=HEAP[$self_addr]; //@line 521 "cPickle.c"
        var $196=(($195+16)&4294967295); //@line 521 "cPickle.c"
        var $197=HEAP[$196]; //@line 521 "cPickle.c"
        var $198=$197; //@line 521 "cPickle.c"
        var $199=(($198+12)&4294967295); //@line 521 "cPickle.c"
        var $200=HEAP[$199]; //@line 521 "cPickle.c"
        var $201=((($194))|0)==((($200))|0); //@line 521 "cPickle.c"
        if ($201) { __label__ = 35; break; } else { __label__ = 39; break; } //@line 521 "cPickle.c"
      case 35: // $bb34
        var $202=HEAP[$self_addr]; //@line 521 "cPickle.c"
        var $203=(($202+16)&4294967295); //@line 521 "cPickle.c"
        var $204=HEAP[$203]; //@line 521 "cPickle.c"
        var $205=$204; //@line 521 "cPickle.c"
        var $206=_Pdata_grow($205); //@line 521 "cPickle.c"
        var $207=((($206))|0) < 0; //@line 521 "cPickle.c"
        if ($207) { __label__ = 36; break; } else { __label__ = 39; break; } //@line 521 "cPickle.c"
      case 36: // $bb35
        var $208=HEAP[$py_str]; //@line 521 "cPickle.c"
        var $209=(($208)&4294967295); //@line 521 "cPickle.c"
        var $210=HEAP[$209]; //@line 521 "cPickle.c"
        var $211=((($210) - 1)&4294967295); //@line 521 "cPickle.c"
        var $212=HEAP[$py_str]; //@line 521 "cPickle.c"
        var $213=(($212)&4294967295); //@line 521 "cPickle.c"
        HEAP[$213]=$211; //@line 521 "cPickle.c"
        var $214=HEAP[$py_str]; //@line 521 "cPickle.c"
        var $215=(($214)&4294967295); //@line 521 "cPickle.c"
        var $216=HEAP[$215]; //@line 521 "cPickle.c"
        var $217=((($216))|0)==0; //@line 521 "cPickle.c"
        if ($217) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 521 "cPickle.c"
      case 37: // $bb36
        var $218=HEAP[$py_str]; //@line 521 "cPickle.c"
        var $219=(($218+4)&4294967295); //@line 521 "cPickle.c"
        var $220=HEAP[$219]; //@line 521 "cPickle.c"
        var $221=(($220+24)&4294967295); //@line 521 "cPickle.c"
        var $222=HEAP[$221]; //@line 521 "cPickle.c"
        var $223=HEAP[$py_str]; //@line 521 "cPickle.c"
        FUNCTION_TABLE[$222]($223); //@line 521 "cPickle.c"
        __label__ = 38; break; //@line 521 "cPickle.c"
      case 38: // $bb37
        HEAP[$0]=-1; //@line 521 "cPickle.c"
        __label__ = 41; break; //@line 521 "cPickle.c"
      case 39: // $bb38
        var $224=HEAP[$self_addr]; //@line 521 "cPickle.c"
        var $225=(($224+16)&4294967295); //@line 521 "cPickle.c"
        var $226=HEAP[$225]; //@line 521 "cPickle.c"
        var $227=$226; //@line 521 "cPickle.c"
        var $228=(($227+16)&4294967295); //@line 521 "cPickle.c"
        var $229=HEAP[$228]; //@line 521 "cPickle.c"
        var $230=HEAP[$self_addr]; //@line 521 "cPickle.c"
        var $231=(($230+16)&4294967295); //@line 521 "cPickle.c"
        var $232=HEAP[$231]; //@line 521 "cPickle.c"
        var $233=$232; //@line 521 "cPickle.c"
        var $234=(($233+8)&4294967295); //@line 521 "cPickle.c"
        var $235=HEAP[$234]; //@line 521 "cPickle.c"
        var $236=(($229+4*$235)&4294967295); //@line 521 "cPickle.c"
        var $237=HEAP[$py_str]; //@line 521 "cPickle.c"
        HEAP[$236]=$237; //@line 521 "cPickle.c"
        var $238=((($235) + 1)&4294967295); //@line 521 "cPickle.c"
        var $239=(($233+8)&4294967295); //@line 521 "cPickle.c"
        HEAP[$239]=$238; //@line 521 "cPickle.c"
        __label__ = 40; break; //@line 521 "cPickle.c"
      case 40: // $bb39
        var $240=HEAP[$self_addr]; //@line 523 "cPickle.c"
        var $241=(($240+56)&4294967295); //@line 523 "cPickle.c"
        HEAP[$241]=0; //@line 523 "cPickle.c"
        var $242=HEAP[$n]; //@line 524 "cPickle.c"
        HEAP[$0]=$242; //@line 524 "cPickle.c"
        __label__ = 41; break; //@line 524 "cPickle.c"
      case 41: // $bb40
        var $243=HEAP[$0]; //@line 486 "cPickle.c"
        HEAP[$retval]=$243; //@line 486 "cPickle.c"
        __label__ = 42; break; //@line 486 "cPickle.c"
      case 42: // $return
        var $retval41=HEAP[$retval]; //@line 486 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval41; //@line 486 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _read_file($self, $s, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $s_addr=__stackBase__+4;
        var $n_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $nbytesread=__stackBase__+20;
        var $size=__stackBase__+24;
        var $newbuf=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$s_addr]=$s;
        HEAP[$n_addr]=$n;
        var $1=HEAP[$self_addr]; //@line 533 "cPickle.c"
        var $2=(($1+68)&4294967295); //@line 533 "cPickle.c"
        var $3=HEAP[$2]; //@line 533 "cPickle.c"
        var $4=((($3))|0)==0; //@line 533 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 533 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[$n_addr]; //@line 536 "cPickle.c"
        var $6=((($5))|0) >= 32; //@line 536 "cPickle.c"
        var $max=($6) ? ($5) : 32; //@line 536 "cPickle.c"
        HEAP[$size]=$max; //@line 536 "cPickle.c"
        var $7=HEAP[$size]; //@line 537 "cPickle.c"
        var $8=_malloc($7); //@line 537 "cPickle.c"
        var $9=HEAP[$self_addr]; //@line 537 "cPickle.c"
        var $10=(($9+72)&4294967295); //@line 537 "cPickle.c"
        HEAP[$10]=$8; //@line 537 "cPickle.c"
        var $11=HEAP[$self_addr]; //@line 537 "cPickle.c"
        var $12=(($11+72)&4294967295); //@line 537 "cPickle.c"
        var $13=HEAP[$12]; //@line 537 "cPickle.c"
        var $14=($13)==0; //@line 537 "cPickle.c"
        if ($14) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 537 "cPickle.c"
      case 2: // $bb1
        var $15=_PyErr_NoMemory(); //@line 538 "cPickle.c"
        HEAP[$0]=-1; //@line 539 "cPickle.c"
        __label__ = 13; break; //@line 539 "cPickle.c"
      case 3: // $bb2
        var $16=HEAP[$self_addr]; //@line 542 "cPickle.c"
        var $17=(($16+68)&4294967295); //@line 542 "cPickle.c"
        var $18=HEAP[$size]; //@line 542 "cPickle.c"
        HEAP[$17]=$18; //@line 542 "cPickle.c"
        __label__ = 8; break; //@line 542 "cPickle.c"
      case 4: // $bb3
        var $19=HEAP[$self_addr]; //@line 544 "cPickle.c"
        var $20=(($19+68)&4294967295); //@line 544 "cPickle.c"
        var $21=HEAP[$20]; //@line 544 "cPickle.c"
        var $22=HEAP[$n_addr]; //@line 544 "cPickle.c"
        var $23=((($21))|0) < ((($22))|0); //@line 544 "cPickle.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 544 "cPickle.c"
      case 5: // $bb4
        var $24=HEAP[$n_addr]; //@line 545 "cPickle.c"
        var $25=HEAP[$self_addr]; //@line 545 "cPickle.c"
        var $26=(($25+72)&4294967295); //@line 545 "cPickle.c"
        var $27=HEAP[$26]; //@line 545 "cPickle.c"
        var $28=_realloc($27, $24); //@line 545 "cPickle.c"
        HEAP[$newbuf]=$28; //@line 545 "cPickle.c"
        var $29=HEAP[$newbuf]; //@line 546 "cPickle.c"
        var $30=($29)==0; //@line 546 "cPickle.c"
        if ($30) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 546 "cPickle.c"
      case 6: // $bb5
        var $31=_PyErr_NoMemory(); //@line 547 "cPickle.c"
        HEAP[$0]=-1; //@line 548 "cPickle.c"
        __label__ = 13; break; //@line 548 "cPickle.c"
      case 7: // $bb6
        var $32=HEAP[$self_addr]; //@line 550 "cPickle.c"
        var $33=(($32+72)&4294967295); //@line 550 "cPickle.c"
        var $34=HEAP[$newbuf]; //@line 550 "cPickle.c"
        HEAP[$33]=$34; //@line 550 "cPickle.c"
        var $35=HEAP[$self_addr]; //@line 551 "cPickle.c"
        var $36=(($35+68)&4294967295); //@line 551 "cPickle.c"
        var $37=HEAP[$n_addr]; //@line 551 "cPickle.c"
        HEAP[$36]=$37; //@line 551 "cPickle.c"
        __label__ = 8; break; //@line 551 "cPickle.c"
      case 8: // $bb7
        var $38=HEAP[$self_addr]; //@line 554 "cPickle.c"
        var $39=(($38+12)&4294967295); //@line 554 "cPickle.c"
        var $40=HEAP[$39]; //@line 554 "cPickle.c"
        var $41=$40; //@line 554 "cPickle.c"
        _PyFile_IncUseCount($41); //@line 554 "cPickle.c"
        var $42=HEAP[$self_addr]; //@line 556 "cPickle.c"
        var $43=(($42+8)&4294967295); //@line 556 "cPickle.c"
        var $44=HEAP[$43]; //@line 556 "cPickle.c"
        var $45=HEAP[$n_addr]; //@line 556 "cPickle.c"
        var $46=HEAP[$self_addr]; //@line 556 "cPickle.c"
        var $47=(($46+72)&4294967295); //@line 556 "cPickle.c"
        var $48=HEAP[$47]; //@line 556 "cPickle.c"
        var $49=_fread($48, 1, $45, $44); //@line 556 "cPickle.c"
        HEAP[$nbytesread]=$49; //@line 556 "cPickle.c"
        var $50=HEAP[$self_addr]; //@line 558 "cPickle.c"
        var $51=(($50+12)&4294967295); //@line 558 "cPickle.c"
        var $52=HEAP[$51]; //@line 558 "cPickle.c"
        var $53=$52; //@line 558 "cPickle.c"
        _PyFile_DecUseCount($53); //@line 558 "cPickle.c"
        var $54=HEAP[$n_addr]; //@line 559 "cPickle.c"
        var $55=HEAP[$nbytesread]; //@line 559 "cPickle.c"
        var $56=((($54))|0)!=((($55))|0); //@line 559 "cPickle.c"
        if ($56) { __label__ = 9; break; } else { __label__ = 12; break; } //@line 559 "cPickle.c"
      case 9: // $bb8
        var $57=HEAP[$self_addr]; //@line 560 "cPickle.c"
        var $58=(($57+8)&4294967295); //@line 560 "cPickle.c"
        var $59=HEAP[$58]; //@line 560 "cPickle.c"
        var $60=_feof($59); //@line 560 "cPickle.c"
        var $61=((($60))|0)!=0; //@line 560 "cPickle.c"
        if ($61) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 560 "cPickle.c"
      case 10: // $bb9
        var $62=HEAP[_PyExc_EOFError]; //@line 561 "cPickle.c"
        _PyErr_SetNone($62); //@line 561 "cPickle.c"
        HEAP[$0]=-1; //@line 562 "cPickle.c"
        __label__ = 13; break; //@line 562 "cPickle.c"
      case 11: // $bb10
        var $63=HEAP[_PyExc_IOError]; //@line 565 "cPickle.c"
        var $64=_PyErr_SetFromErrno($63); //@line 565 "cPickle.c"
        HEAP[$0]=-1; //@line 566 "cPickle.c"
        __label__ = 13; break; //@line 566 "cPickle.c"
      case 12: // $bb11
        var $65=HEAP[$self_addr]; //@line 569 "cPickle.c"
        var $66=(($65+72)&4294967295); //@line 569 "cPickle.c"
        var $67=HEAP[$66]; //@line 569 "cPickle.c"
        var $68=HEAP[$s_addr]; //@line 569 "cPickle.c"
        HEAP[$68]=$67; //@line 569 "cPickle.c"
        var $69=HEAP[$n_addr]; //@line 571 "cPickle.c"
        HEAP[$0]=$69; //@line 571 "cPickle.c"
        __label__ = 13; break; //@line 571 "cPickle.c"
      case 13: // $bb12
        var $70=HEAP[$0]; //@line 539 "cPickle.c"
        HEAP[$retval]=$70; //@line 539 "cPickle.c"
        __label__ = 14; break; //@line 539 "cPickle.c"
      case 14: // $return
        var $retval13=HEAP[$retval]; //@line 539 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 539 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _readline_file($self, $s) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $s_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $i=__stackBase__+16;
        var $bigger=__stackBase__+20;
        var $newbuf=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$s_addr]=$s;
        var $1=HEAP[$self_addr]; //@line 580 "cPickle.c"
        var $2=(($1+68)&4294967295); //@line 580 "cPickle.c"
        var $3=HEAP[$2]; //@line 580 "cPickle.c"
        var $4=((($3))|0)==0; //@line 580 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 580 "cPickle.c"
      case 1: // $bb
        var $5=_malloc(40); //@line 581 "cPickle.c"
        var $6=HEAP[$self_addr]; //@line 581 "cPickle.c"
        var $7=(($6+72)&4294967295); //@line 581 "cPickle.c"
        HEAP[$7]=$5; //@line 581 "cPickle.c"
        var $8=HEAP[$self_addr]; //@line 581 "cPickle.c"
        var $9=(($8+72)&4294967295); //@line 581 "cPickle.c"
        var $10=HEAP[$9]; //@line 581 "cPickle.c"
        var $11=($10)==0; //@line 581 "cPickle.c"
        if ($11) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 581 "cPickle.c"
      case 2: // $bb1
        var $12=_PyErr_NoMemory(); //@line 582 "cPickle.c"
        HEAP[$0]=-1; //@line 583 "cPickle.c"
        __label__ = 16; break; //@line 583 "cPickle.c"
      case 3: // $bb2
        var $13=HEAP[$self_addr]; //@line 585 "cPickle.c"
        var $14=(($13+68)&4294967295); //@line 585 "cPickle.c"
        HEAP[$14]=40; //@line 585 "cPickle.c"
        __label__ = 4; break; //@line 585 "cPickle.c"
      case 4: // $bb3
        HEAP[$i]=0; //@line 588 "cPickle.c"
        __label__ = 5; break; //@line 588 "cPickle.c"
      case 5: // $bb4
        __label__ = 10; break; //@line 588 "cPickle.c"
      case 6: // $bb5
        var $15=HEAP[$self_addr]; //@line 593 "cPickle.c"
        var $16=(($15+8)&4294967295); //@line 593 "cPickle.c"
        var $17=HEAP[$16]; //@line 593 "cPickle.c"
        var $18=_feof($17); //@line 593 "cPickle.c"
        var $19=((($18))|0)!=0; //@line 593 "cPickle.c"
        if ($19) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 593 "cPickle.c"
      case 7: // $bb6
        var $20=HEAP[$self_addr]; //@line 593 "cPickle.c"
        var $21=(($20+72)&4294967295); //@line 593 "cPickle.c"
        var $22=HEAP[$21]; //@line 593 "cPickle.c"
        var $23=HEAP[$self_addr]; //@line 593 "cPickle.c"
        var $24=(($23+8)&4294967295); //@line 593 "cPickle.c"
        var $25=HEAP[$24]; //@line 593 "cPickle.c"
        var $26=__IO_getc($25); //@line 593 "cPickle.c"
        var $27=((($26)) & 255); //@line 593 "cPickle.c"
        var $28=HEAP[$i]; //@line 593 "cPickle.c"
        var $29=(($22+$28)&4294967295); //@line 593 "cPickle.c"
        HEAP[$29]=$27; //@line 593 "cPickle.c"
        var $30=HEAP[$i]; //@line 593 "cPickle.c"
        var $31=(($22+$30)&4294967295); //@line 593 "cPickle.c"
        var $32=HEAP[$31]; //@line 593 "cPickle.c"
        var $33=reSign(($32), 8, 0)==10; //@line 593 "cPickle.c"
        if ($33) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 593 "cPickle.c"
      case 8: // $bb7
        var $34=HEAP[$self_addr]; //@line 595 "cPickle.c"
        var $35=(($34+72)&4294967295); //@line 595 "cPickle.c"
        var $36=HEAP[$35]; //@line 595 "cPickle.c"
        var $37=HEAP[$i]; //@line 595 "cPickle.c"
        var $38=((($37) + 1)&4294967295); //@line 595 "cPickle.c"
        var $39=(($36+$38)&4294967295); //@line 595 "cPickle.c"
        HEAP[$39]=0; //@line 595 "cPickle.c"
        var $40=HEAP[$self_addr]; //@line 596 "cPickle.c"
        var $41=(($40+72)&4294967295); //@line 596 "cPickle.c"
        var $42=HEAP[$41]; //@line 596 "cPickle.c"
        var $43=HEAP[$s_addr]; //@line 596 "cPickle.c"
        HEAP[$43]=$42; //@line 596 "cPickle.c"
        var $44=HEAP[$i]; //@line 597 "cPickle.c"
        var $45=((($44) + 1)&4294967295); //@line 597 "cPickle.c"
        HEAP[$0]=$45; //@line 597 "cPickle.c"
        __label__ = 16; break; //@line 597 "cPickle.c"
      case 9: // $bb8
        var $46=HEAP[$i]; //@line 592 "cPickle.c"
        var $47=((($46) + 1)&4294967295); //@line 592 "cPickle.c"
        HEAP[$i]=$47; //@line 592 "cPickle.c"
        __label__ = 10; break; //@line 592 "cPickle.c"
      case 10: // $bb9
        var $48=HEAP[$self_addr]; //@line 592 "cPickle.c"
        var $49=(($48+68)&4294967295); //@line 592 "cPickle.c"
        var $50=HEAP[$49]; //@line 592 "cPickle.c"
        var $51=((($50) - 1)&4294967295); //@line 592 "cPickle.c"
        var $52=HEAP[$i]; //@line 592 "cPickle.c"
        var $53=((($51))|0) > ((($52))|0); //@line 592 "cPickle.c"
        if ($53) { __label__ = 6; break; } else { __label__ = 11; break; } //@line 592 "cPickle.c"
      case 11: // $bb10
        var $54=HEAP[$self_addr]; //@line 600 "cPickle.c"
        var $55=(($54+68)&4294967295); //@line 600 "cPickle.c"
        var $56=HEAP[$55]; //@line 600 "cPickle.c"
        var $57=($56) << 1; //@line 600 "cPickle.c"
        HEAP[$bigger]=$57; //@line 600 "cPickle.c"
        var $58=HEAP[$bigger]; //@line 601 "cPickle.c"
        var $59=((($58))|0) <= 0; //@line 601 "cPickle.c"
        if ($59) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 601 "cPickle.c"
      case 12: // $bb11
        var $60=_PyErr_NoMemory(); //@line 602 "cPickle.c"
        HEAP[$0]=-1; //@line 603 "cPickle.c"
        __label__ = 16; break; //@line 603 "cPickle.c"
      case 13: // $bb12
        var $61=HEAP[$bigger]; //@line 605 "cPickle.c"
        var $62=HEAP[$self_addr]; //@line 605 "cPickle.c"
        var $63=(($62+72)&4294967295); //@line 605 "cPickle.c"
        var $64=HEAP[$63]; //@line 605 "cPickle.c"
        var $65=_realloc($64, $61); //@line 605 "cPickle.c"
        HEAP[$newbuf]=$65; //@line 605 "cPickle.c"
        var $66=HEAP[$newbuf]; //@line 606 "cPickle.c"
        var $67=($66)==0; //@line 606 "cPickle.c"
        if ($67) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 606 "cPickle.c"
      case 14: // $bb13
        var $68=_PyErr_NoMemory(); //@line 607 "cPickle.c"
        HEAP[$0]=-1; //@line 608 "cPickle.c"
        __label__ = 16; break; //@line 608 "cPickle.c"
      case 15: // $bb14
        var $69=HEAP[$self_addr]; //@line 610 "cPickle.c"
        var $70=(($69+72)&4294967295); //@line 610 "cPickle.c"
        var $71=HEAP[$newbuf]; //@line 610 "cPickle.c"
        HEAP[$70]=$71; //@line 610 "cPickle.c"
        var $72=HEAP[$self_addr]; //@line 611 "cPickle.c"
        var $73=(($72+68)&4294967295); //@line 611 "cPickle.c"
        var $74=HEAP[$bigger]; //@line 611 "cPickle.c"
        HEAP[$73]=$74; //@line 611 "cPickle.c"
        __label__ = 5; break; //@line 611 "cPickle.c"
      case 16: // $bb15
        var $75=HEAP[$0]; //@line 583 "cPickle.c"
        HEAP[$retval]=$75; //@line 583 "cPickle.c"
        __label__ = 17; break; //@line 583 "cPickle.c"
      case 17: // $return
        var $retval16=HEAP[$retval]; //@line 583 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval16; //@line 583 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _read_cStringIO($self, $s, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $s_addr=__stackBase__+4;
        var $n_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $ptr=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$s_addr]=$s;
        HEAP[$n_addr]=$n;
        var $1=HEAP[_PycStringIO]; //@line 621 "cPickle.c"
        var $2=(($1)&4294967295); //@line 621 "cPickle.c"
        var $3=HEAP[$2]; //@line 621 "cPickle.c"
        var $4=HEAP[$self_addr]; //@line 621 "cPickle.c"
        var $5=(($4+12)&4294967295); //@line 621 "cPickle.c"
        var $6=HEAP[$5]; //@line 621 "cPickle.c"
        var $7=HEAP[$n_addr]; //@line 621 "cPickle.c"
        var $8=FUNCTION_TABLE[$3]($6, $ptr, $7); //@line 621 "cPickle.c"
        var $9=HEAP[$n_addr]; //@line 621 "cPickle.c"
        var $10=((($8))|0)!=((($9))|0); //@line 621 "cPickle.c"
        if ($10) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 621 "cPickle.c"
      case 1: // $bb
        var $11=HEAP[_PyExc_EOFError]; //@line 622 "cPickle.c"
        _PyErr_SetNone($11); //@line 622 "cPickle.c"
        HEAP[$0]=-1; //@line 623 "cPickle.c"
        __label__ = 3; break; //@line 623 "cPickle.c"
      case 2: // $bb1
        var $12=HEAP[$ptr]; //@line 626 "cPickle.c"
        var $13=HEAP[$s_addr]; //@line 626 "cPickle.c"
        HEAP[$13]=$12; //@line 626 "cPickle.c"
        var $14=HEAP[$n_addr]; //@line 628 "cPickle.c"
        HEAP[$0]=$14; //@line 628 "cPickle.c"
        __label__ = 3; break; //@line 628 "cPickle.c"
      case 3: // $bb2
        var $15=HEAP[$0]; //@line 623 "cPickle.c"
        HEAP[$retval]=$15; //@line 623 "cPickle.c"
        __label__ = 4; break; //@line 623 "cPickle.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 623 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 623 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _readline_cStringIO($self, $s) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $s_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $n=__stackBase__+16;
        var $ptr=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$s_addr]=$s;
        var $1=HEAP[_PycStringIO]; //@line 638 "cPickle.c"
        var $2=(($1+4)&4294967295); //@line 638 "cPickle.c"
        var $3=HEAP[$2]; //@line 638 "cPickle.c"
        var $4=HEAP[$self_addr]; //@line 638 "cPickle.c"
        var $5=(($4+12)&4294967295); //@line 638 "cPickle.c"
        var $6=HEAP[$5]; //@line 638 "cPickle.c"
        var $7=FUNCTION_TABLE[$3]($6, $ptr); //@line 638 "cPickle.c"
        HEAP[$n]=$7; //@line 638 "cPickle.c"
        var $8=HEAP[$n]; //@line 638 "cPickle.c"
        var $9=((($8))|0) < 0; //@line 638 "cPickle.c"
        if ($9) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 638 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 639 "cPickle.c"
        __label__ = 3; break; //@line 639 "cPickle.c"
      case 2: // $bb1
        var $10=HEAP[$ptr]; //@line 642 "cPickle.c"
        var $11=HEAP[$s_addr]; //@line 642 "cPickle.c"
        HEAP[$11]=$10; //@line 642 "cPickle.c"
        var $12=HEAP[$n]; //@line 644 "cPickle.c"
        HEAP[$0]=$12; //@line 644 "cPickle.c"
        __label__ = 3; break; //@line 644 "cPickle.c"
      case 3: // $bb2
        var $13=HEAP[$0]; //@line 639 "cPickle.c"
        HEAP[$retval]=$13; //@line 639 "cPickle.c"
        __label__ = 4; break; //@line 639 "cPickle.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 639 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 639 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _read_other($self, $s, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $s_addr=__stackBase__+4;
        var $n_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $bytes=__stackBase__+20;
        var $str=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$s_addr]=$s;
        HEAP[$n_addr]=$n;
        HEAP[$str]=0; //@line 651 "cPickle.c"
        var $1=HEAP[$n_addr]; //@line 653 "cPickle.c"
        var $2=_PyInt_FromSsize_t($1); //@line 653 "cPickle.c"
        HEAP[$bytes]=$2; //@line 653 "cPickle.c"
        var $3=HEAP[$bytes]; //@line 653 "cPickle.c"
        var $4=($3)==0; //@line 653 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 653 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 653 "cPickle.c"
        __label__ = 25; break; //@line 653 "cPickle.c"
      case 2: // $bb1
        var $5=HEAP[$self_addr]; //@line 655 "cPickle.c"
        var $6=(($5+28)&4294967295); //@line 655 "cPickle.c"
        var $7=HEAP[$6]; //@line 655 "cPickle.c"
        var $8=($7)!=0; //@line 655 "cPickle.c"
        if ($8) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 655 "cPickle.c"
      case 3: // $bb2
        var $9=_PyTuple_New(1); //@line 655 "cPickle.c"
        var $10=HEAP[$self_addr]; //@line 655 "cPickle.c"
        var $11=(($10+28)&4294967295); //@line 655 "cPickle.c"
        HEAP[$11]=$9; //@line 655 "cPickle.c"
        var $12=HEAP[$self_addr]; //@line 655 "cPickle.c"
        var $13=(($12+28)&4294967295); //@line 655 "cPickle.c"
        var $14=HEAP[$13]; //@line 655 "cPickle.c"
        var $15=($14)!=0; //@line 655 "cPickle.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 8; break; } //@line 655 "cPickle.c"
      case 4: // $bb3
        var $16=HEAP[$self_addr]; //@line 655 "cPickle.c"
        var $17=(($16+28)&4294967295); //@line 655 "cPickle.c"
        var $18=HEAP[$17]; //@line 655 "cPickle.c"
        var $19=$18; //@line 655 "cPickle.c"
        var $20=(($19+12)&4294967295); //@line 655 "cPickle.c"
        var $21=(($20)&4294967295); //@line 655 "cPickle.c"
        var $22=HEAP[$21]; //@line 655 "cPickle.c"
        var $23=($22)!=0; //@line 655 "cPickle.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 655 "cPickle.c"
      case 5: // $bb4
        var $24=HEAP[$self_addr]; //@line 655 "cPickle.c"
        var $25=(($24+28)&4294967295); //@line 655 "cPickle.c"
        var $26=HEAP[$25]; //@line 655 "cPickle.c"
        var $27=$26; //@line 655 "cPickle.c"
        var $28=(($27+12)&4294967295); //@line 655 "cPickle.c"
        var $29=(($28)&4294967295); //@line 655 "cPickle.c"
        var $30=HEAP[$29]; //@line 655 "cPickle.c"
        var $31=(($30)&4294967295); //@line 655 "cPickle.c"
        var $32=HEAP[$31]; //@line 655 "cPickle.c"
        var $33=((($32) - 1)&4294967295); //@line 655 "cPickle.c"
        var $34=(($30)&4294967295); //@line 655 "cPickle.c"
        HEAP[$34]=$33; //@line 655 "cPickle.c"
        var $35=(($30)&4294967295); //@line 655 "cPickle.c"
        var $36=HEAP[$35]; //@line 655 "cPickle.c"
        var $37=((($36))|0)==0; //@line 655 "cPickle.c"
        if ($37) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 655 "cPickle.c"
      case 6: // $bb5
        var $38=HEAP[$self_addr]; //@line 655 "cPickle.c"
        var $39=(($38+28)&4294967295); //@line 655 "cPickle.c"
        var $40=HEAP[$39]; //@line 655 "cPickle.c"
        var $41=$40; //@line 655 "cPickle.c"
        var $42=(($41+12)&4294967295); //@line 655 "cPickle.c"
        var $43=(($42)&4294967295); //@line 655 "cPickle.c"
        var $44=HEAP[$43]; //@line 655 "cPickle.c"
        var $45=(($44+4)&4294967295); //@line 655 "cPickle.c"
        var $46=HEAP[$45]; //@line 655 "cPickle.c"
        var $47=(($46+24)&4294967295); //@line 655 "cPickle.c"
        var $48=HEAP[$47]; //@line 655 "cPickle.c"
        var $49=HEAP[$self_addr]; //@line 655 "cPickle.c"
        var $50=(($49+28)&4294967295); //@line 655 "cPickle.c"
        var $51=HEAP[$50]; //@line 655 "cPickle.c"
        var $52=$51; //@line 655 "cPickle.c"
        var $53=(($52+12)&4294967295); //@line 655 "cPickle.c"
        var $54=(($53)&4294967295); //@line 655 "cPickle.c"
        var $55=HEAP[$54]; //@line 655 "cPickle.c"
        FUNCTION_TABLE[$48]($55); //@line 655 "cPickle.c"
        __label__ = 7; break; //@line 655 "cPickle.c"
      case 7: // $bb6
        var $56=HEAP[$self_addr]; //@line 655 "cPickle.c"
        var $57=(($56+28)&4294967295); //@line 655 "cPickle.c"
        var $58=HEAP[$57]; //@line 655 "cPickle.c"
        var $59=$58; //@line 655 "cPickle.c"
        var $60=(($59+12)&4294967295); //@line 655 "cPickle.c"
        var $61=(($60)&4294967295); //@line 655 "cPickle.c"
        var $62=HEAP[$bytes]; //@line 655 "cPickle.c"
        HEAP[$61]=$62; //@line 655 "cPickle.c"
        __label__ = 10; break; //@line 655 "cPickle.c"
      case 8: // $bb7
        var $63=HEAP[$bytes]; //@line 655 "cPickle.c"
        var $64=(($63)&4294967295); //@line 655 "cPickle.c"
        var $65=HEAP[$64]; //@line 655 "cPickle.c"
        var $66=((($65) - 1)&4294967295); //@line 655 "cPickle.c"
        var $67=HEAP[$bytes]; //@line 655 "cPickle.c"
        var $68=(($67)&4294967295); //@line 655 "cPickle.c"
        HEAP[$68]=$66; //@line 655 "cPickle.c"
        var $69=HEAP[$bytes]; //@line 655 "cPickle.c"
        var $70=(($69)&4294967295); //@line 655 "cPickle.c"
        var $71=HEAP[$70]; //@line 655 "cPickle.c"
        var $72=((($71))|0)==0; //@line 655 "cPickle.c"
        if ($72) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 655 "cPickle.c"
      case 9: // $bb8
        var $73=HEAP[$bytes]; //@line 655 "cPickle.c"
        var $74=(($73+4)&4294967295); //@line 655 "cPickle.c"
        var $75=HEAP[$74]; //@line 655 "cPickle.c"
        var $76=(($75+24)&4294967295); //@line 655 "cPickle.c"
        var $77=HEAP[$76]; //@line 655 "cPickle.c"
        var $78=HEAP[$bytes]; //@line 655 "cPickle.c"
        FUNCTION_TABLE[$77]($78); //@line 655 "cPickle.c"
        __label__ = 10; break; //@line 655 "cPickle.c"
      case 10: // $bb9
        var $79=HEAP[$self_addr]; //@line 656 "cPickle.c"
        var $80=(($79+28)&4294967295); //@line 656 "cPickle.c"
        var $81=HEAP[$80]; //@line 656 "cPickle.c"
        var $82=($81)!=0; //@line 656 "cPickle.c"
        if ($82) { __label__ = 11; break; } else { __label__ = 15; break; } //@line 656 "cPickle.c"
      case 11: // $bb10
        var $83=HEAP[$self_addr]; //@line 657 "cPickle.c"
        var $84=(($83+28)&4294967295); //@line 657 "cPickle.c"
        var $85=HEAP[$84]; //@line 657 "cPickle.c"
        var $86=HEAP[$self_addr]; //@line 657 "cPickle.c"
        var $87=(($86+20)&4294967295); //@line 657 "cPickle.c"
        var $88=HEAP[$87]; //@line 657 "cPickle.c"
        var $89=_PyObject_Call($88, $85, 0); //@line 657 "cPickle.c"
        HEAP[$str]=$89; //@line 657 "cPickle.c"
        var $90=HEAP[$self_addr]; //@line 658 "cPickle.c"
        var $91=(($90+28)&4294967295); //@line 658 "cPickle.c"
        var $92=HEAP[$91]; //@line 658 "cPickle.c"
        var $93=(($92)&4294967295); //@line 658 "cPickle.c"
        var $94=HEAP[$93]; //@line 658 "cPickle.c"
        var $95=((($94))|0) > 1; //@line 658 "cPickle.c"
        if ($95) { __label__ = 12; break; } else { __label__ = 15; break; } //@line 658 "cPickle.c"
      case 12: // $bb11
        var $96=HEAP[$self_addr]; //@line 658 "cPickle.c"
        var $97=(($96+28)&4294967295); //@line 658 "cPickle.c"
        var $98=HEAP[$97]; //@line 658 "cPickle.c"
        var $99=(($98)&4294967295); //@line 658 "cPickle.c"
        var $100=HEAP[$99]; //@line 658 "cPickle.c"
        var $101=((($100) - 1)&4294967295); //@line 658 "cPickle.c"
        var $102=(($98)&4294967295); //@line 658 "cPickle.c"
        HEAP[$102]=$101; //@line 658 "cPickle.c"
        var $103=(($98)&4294967295); //@line 658 "cPickle.c"
        var $104=HEAP[$103]; //@line 658 "cPickle.c"
        var $105=((($104))|0)==0; //@line 658 "cPickle.c"
        if ($105) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 658 "cPickle.c"
      case 13: // $bb12
        var $106=HEAP[$self_addr]; //@line 658 "cPickle.c"
        var $107=(($106+28)&4294967295); //@line 658 "cPickle.c"
        var $108=HEAP[$107]; //@line 658 "cPickle.c"
        var $109=(($108+4)&4294967295); //@line 658 "cPickle.c"
        var $110=HEAP[$109]; //@line 658 "cPickle.c"
        var $111=(($110+24)&4294967295); //@line 658 "cPickle.c"
        var $112=HEAP[$111]; //@line 658 "cPickle.c"
        var $113=HEAP[$self_addr]; //@line 658 "cPickle.c"
        var $114=(($113+28)&4294967295); //@line 658 "cPickle.c"
        var $115=HEAP[$114]; //@line 658 "cPickle.c"
        FUNCTION_TABLE[$112]($115); //@line 658 "cPickle.c"
        __label__ = 14; break; //@line 658 "cPickle.c"
      case 14: // $bb13
        var $116=HEAP[$self_addr]; //@line 658 "cPickle.c"
        var $117=(($116+28)&4294967295); //@line 658 "cPickle.c"
        HEAP[$117]=0; //@line 658 "cPickle.c"
        __label__ = 15; break; //@line 658 "cPickle.c"
      case 15: // $bb14
        var $118=HEAP[$str]; //@line 660 "cPickle.c"
        var $119=($118)==0; //@line 660 "cPickle.c"
        if ($119) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 660 "cPickle.c"
      case 16: // $bb15
        HEAP[$0]=-1; //@line 660 "cPickle.c"
        __label__ = 25; break; //@line 660 "cPickle.c"
      case 17: // $bb16
        var $120=HEAP[$self_addr]; //@line 662 "cPickle.c"
        var $121=(($120+44)&4294967295); //@line 662 "cPickle.c"
        var $122=HEAP[$121]; //@line 662 "cPickle.c"
        var $123=($122)!=0; //@line 662 "cPickle.c"
        if ($123) { __label__ = 18; break; } else { __label__ = 20; break; } //@line 662 "cPickle.c"
      case 18: // $bb17
        var $124=HEAP[$self_addr]; //@line 662 "cPickle.c"
        var $125=(($124+44)&4294967295); //@line 662 "cPickle.c"
        var $126=HEAP[$125]; //@line 662 "cPickle.c"
        var $127=(($126)&4294967295); //@line 662 "cPickle.c"
        var $128=HEAP[$127]; //@line 662 "cPickle.c"
        var $129=((($128) - 1)&4294967295); //@line 662 "cPickle.c"
        var $130=(($126)&4294967295); //@line 662 "cPickle.c"
        HEAP[$130]=$129; //@line 662 "cPickle.c"
        var $131=(($126)&4294967295); //@line 662 "cPickle.c"
        var $132=HEAP[$131]; //@line 662 "cPickle.c"
        var $133=((($132))|0)==0; //@line 662 "cPickle.c"
        if ($133) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 662 "cPickle.c"
      case 19: // $bb18
        var $134=HEAP[$self_addr]; //@line 662 "cPickle.c"
        var $135=(($134+44)&4294967295); //@line 662 "cPickle.c"
        var $136=HEAP[$135]; //@line 662 "cPickle.c"
        var $137=(($136+4)&4294967295); //@line 662 "cPickle.c"
        var $138=HEAP[$137]; //@line 662 "cPickle.c"
        var $139=(($138+24)&4294967295); //@line 662 "cPickle.c"
        var $140=HEAP[$139]; //@line 662 "cPickle.c"
        var $141=HEAP[$self_addr]; //@line 662 "cPickle.c"
        var $142=(($141+44)&4294967295); //@line 662 "cPickle.c"
        var $143=HEAP[$142]; //@line 662 "cPickle.c"
        FUNCTION_TABLE[$140]($143); //@line 662 "cPickle.c"
        __label__ = 20; break; //@line 662 "cPickle.c"
      case 20: // $bb19
        var $144=HEAP[$self_addr]; //@line 663 "cPickle.c"
        var $145=(($144+44)&4294967295); //@line 663 "cPickle.c"
        var $146=HEAP[$str]; //@line 663 "cPickle.c"
        HEAP[$145]=$146; //@line 663 "cPickle.c"
        var $147=HEAP[$str]; //@line 665 "cPickle.c"
        var $148=_PyString_AsString($147); //@line 665 "cPickle.c"
        var $149=HEAP[$s_addr]; //@line 665 "cPickle.c"
        HEAP[$149]=$148; //@line 665 "cPickle.c"
        var $150=HEAP[$s_addr]; //@line 665 "cPickle.c"
        var $151=HEAP[$150]; //@line 665 "cPickle.c"
        var $152=($151)==0; //@line 665 "cPickle.c"
        if ($152) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 665 "cPickle.c"
      case 21: // $bb20
        HEAP[$0]=-1; //@line 665 "cPickle.c"
        __label__ = 25; break; //@line 665 "cPickle.c"
      case 22: // $bb21
        var $153=HEAP[$str]; //@line 667 "cPickle.c"
        var $154=$153; //@line 667 "cPickle.c"
        var $155=(($154+8)&4294967295); //@line 667 "cPickle.c"
        var $156=HEAP[$155]; //@line 667 "cPickle.c"
        var $157=HEAP[$n_addr]; //@line 667 "cPickle.c"
        var $158=((($156))|0)!=((($157))|0); //@line 667 "cPickle.c"
        if ($158) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 667 "cPickle.c"
      case 23: // $bb22
        var $159=HEAP[_PyExc_EOFError]; //@line 668 "cPickle.c"
        _PyErr_SetNone($159); //@line 668 "cPickle.c"
        HEAP[$0]=-1; //@line 669 "cPickle.c"
        __label__ = 25; break; //@line 669 "cPickle.c"
      case 24: // $bb23
        var $160=HEAP[$n_addr]; //@line 672 "cPickle.c"
        HEAP[$0]=$160; //@line 672 "cPickle.c"
        __label__ = 25; break; //@line 672 "cPickle.c"
      case 25: // $bb24
        var $161=HEAP[$0]; //@line 653 "cPickle.c"
        HEAP[$retval]=$161; //@line 653 "cPickle.c"
        __label__ = 26; break; //@line 653 "cPickle.c"
      case 26: // $return
        var $retval25=HEAP[$retval]; //@line 653 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval25; //@line 653 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _readline_other($self, $s) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $s_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $str=__stackBase__+16;
        var $str_size=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$s_addr]=$s;
        var $1=HEAP[_empty_tuple]; //@line 682 "cPickle.c"
        var $2=HEAP[$self_addr]; //@line 682 "cPickle.c"
        var $3=(($2+16)&4294967295); //@line 682 "cPickle.c"
        var $4=HEAP[$3]; //@line 682 "cPickle.c"
        var $5=_PyObject_CallObject($4, $1); //@line 682 "cPickle.c"
        HEAP[$str]=$5; //@line 682 "cPickle.c"
        var $6=HEAP[$str]; //@line 682 "cPickle.c"
        var $7=($6)==0; //@line 682 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 682 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 683 "cPickle.c"
        __label__ = 10; break; //@line 683 "cPickle.c"
      case 2: // $bb1
        var $8=HEAP[$str]; //@line 686 "cPickle.c"
        var $9=_PyString_Size($8); //@line 686 "cPickle.c"
        HEAP[$str_size]=$9; //@line 686 "cPickle.c"
        var $10=HEAP[$str_size]; //@line 686 "cPickle.c"
        var $11=((($10))|0) < 0; //@line 686 "cPickle.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 686 "cPickle.c"
      case 3: // $bb2
        HEAP[$0]=-1; //@line 687 "cPickle.c"
        __label__ = 10; break; //@line 687 "cPickle.c"
      case 4: // $bb3
        var $12=HEAP[$self_addr]; //@line 689 "cPickle.c"
        var $13=(($12+44)&4294967295); //@line 689 "cPickle.c"
        var $14=HEAP[$13]; //@line 689 "cPickle.c"
        var $15=($14)!=0; //@line 689 "cPickle.c"
        if ($15) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 689 "cPickle.c"
      case 5: // $bb4
        var $16=HEAP[$self_addr]; //@line 689 "cPickle.c"
        var $17=(($16+44)&4294967295); //@line 689 "cPickle.c"
        var $18=HEAP[$17]; //@line 689 "cPickle.c"
        var $19=(($18)&4294967295); //@line 689 "cPickle.c"
        var $20=HEAP[$19]; //@line 689 "cPickle.c"
        var $21=((($20) - 1)&4294967295); //@line 689 "cPickle.c"
        var $22=(($18)&4294967295); //@line 689 "cPickle.c"
        HEAP[$22]=$21; //@line 689 "cPickle.c"
        var $23=(($18)&4294967295); //@line 689 "cPickle.c"
        var $24=HEAP[$23]; //@line 689 "cPickle.c"
        var $25=((($24))|0)==0; //@line 689 "cPickle.c"
        if ($25) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 689 "cPickle.c"
      case 6: // $bb5
        var $26=HEAP[$self_addr]; //@line 689 "cPickle.c"
        var $27=(($26+44)&4294967295); //@line 689 "cPickle.c"
        var $28=HEAP[$27]; //@line 689 "cPickle.c"
        var $29=(($28+4)&4294967295); //@line 689 "cPickle.c"
        var $30=HEAP[$29]; //@line 689 "cPickle.c"
        var $31=(($30+24)&4294967295); //@line 689 "cPickle.c"
        var $32=HEAP[$31]; //@line 689 "cPickle.c"
        var $33=HEAP[$self_addr]; //@line 689 "cPickle.c"
        var $34=(($33+44)&4294967295); //@line 689 "cPickle.c"
        var $35=HEAP[$34]; //@line 689 "cPickle.c"
        FUNCTION_TABLE[$32]($35); //@line 689 "cPickle.c"
        __label__ = 7; break; //@line 689 "cPickle.c"
      case 7: // $bb6
        var $36=HEAP[$self_addr]; //@line 690 "cPickle.c"
        var $37=(($36+44)&4294967295); //@line 690 "cPickle.c"
        var $38=HEAP[$str]; //@line 690 "cPickle.c"
        HEAP[$37]=$38; //@line 690 "cPickle.c"
        var $39=HEAP[$str]; //@line 692 "cPickle.c"
        var $40=_PyString_AsString($39); //@line 692 "cPickle.c"
        var $41=HEAP[$s_addr]; //@line 692 "cPickle.c"
        HEAP[$41]=$40; //@line 692 "cPickle.c"
        var $42=HEAP[$s_addr]; //@line 692 "cPickle.c"
        var $43=HEAP[$42]; //@line 692 "cPickle.c"
        var $44=($43)==0; //@line 692 "cPickle.c"
        if ($44) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 692 "cPickle.c"
      case 8: // $bb7
        HEAP[$0]=-1; //@line 693 "cPickle.c"
        __label__ = 10; break; //@line 693 "cPickle.c"
      case 9: // $bb8
        var $45=HEAP[$str_size]; //@line 695 "cPickle.c"
        HEAP[$0]=$45; //@line 695 "cPickle.c"
        __label__ = 10; break; //@line 695 "cPickle.c"
      case 10: // $bb9
        var $46=HEAP[$0]; //@line 683 "cPickle.c"
        HEAP[$retval]=$46; //@line 683 "cPickle.c"
        __label__ = 11; break; //@line 683 "cPickle.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 683 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 683 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _pystrndup($s, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $s_addr=__stackBase__;
        var $n_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $r=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$s_addr]=$s;
        HEAP[$n_addr]=$n;
        var $1=HEAP[$n_addr]; //@line 705 "cPickle.c"
        var $2=((($1) + 1)&4294967295); //@line 705 "cPickle.c"
        var $3=_malloc($2); //@line 705 "cPickle.c"
        HEAP[$r]=$3; //@line 705 "cPickle.c"
        var $4=HEAP[$r]; //@line 706 "cPickle.c"
        var $5=($4)==0; //@line 706 "cPickle.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 706 "cPickle.c"
      case 1: // $bb
        var $6=_PyErr_NoMemory(); //@line 707 "cPickle.c"
        var $7=$6; //@line 707 "cPickle.c"
        HEAP[$0]=$7; //@line 707 "cPickle.c"
        __label__ = 3; break; //@line 707 "cPickle.c"
      case 2: // $bb1
        var $8=HEAP[$n_addr]; //@line 708 "cPickle.c"
        var $9=HEAP[$r]; //@line 708 "cPickle.c"
        var $10=HEAP[$s_addr]; //@line 708 "cPickle.c"
        _llvm_memcpy_p0i8_p0i8_i32($9, $10, $8, 1, 0); //@line 708 "cPickle.c"
        var $11=HEAP[$r]; //@line 709 "cPickle.c"
        var $12=HEAP[$n_addr]; //@line 709 "cPickle.c"
        var $13=(($11+$12)&4294967295); //@line 709 "cPickle.c"
        HEAP[$13]=0; //@line 709 "cPickle.c"
        var $14=HEAP[$r]; //@line 710 "cPickle.c"
        HEAP[$0]=$14; //@line 710 "cPickle.c"
        __label__ = 3; break; //@line 710 "cPickle.c"
      case 3: // $bb2
        var $15=HEAP[$0]; //@line 707 "cPickle.c"
        HEAP[$retval]=$15; //@line 707 "cPickle.c"
        __label__ = 4; break; //@line 707 "cPickle.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 707 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 707 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _get($self, $id) {
    var __stackBase__  = STACKTOP; STACKTOP += 62; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 62);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $id_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $value=__stackBase__+16;
        var $mv=__stackBase__+20;
        var $c_value=__stackBase__+24;
        var $s=__stackBase__+28;
        var $len=__stackBase__+58;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$id_addr]=$id;
        var $1=HEAP[$self_addr]; //@line 722 "cPickle.c"
        var $2=(($1+20)&4294967295); //@line 722 "cPickle.c"
        var $3=HEAP[$2]; //@line 722 "cPickle.c"
        var $4=HEAP[$id_addr]; //@line 722 "cPickle.c"
        var $5=_PyDict_GetItem($3, $4); //@line 722 "cPickle.c"
        HEAP[$mv]=$5; //@line 722 "cPickle.c"
        var $6=HEAP[$mv]; //@line 722 "cPickle.c"
        var $7=($6)==0; //@line 722 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 722 "cPickle.c"
      case 1: // $bb
        var $8=HEAP[_PyExc_KeyError]; //@line 723 "cPickle.c"
        var $9=HEAP[$id_addr]; //@line 723 "cPickle.c"
        _PyErr_SetObject($8, $9); //@line 723 "cPickle.c"
        HEAP[$0]=-1; //@line 724 "cPickle.c"
        __label__ = 21; break; //@line 724 "cPickle.c"
      case 2: // $bb1
        var $10=HEAP[$mv]; //@line 727 "cPickle.c"
        var $11=_PyTuple_GetItem($10, 0); //@line 727 "cPickle.c"
        HEAP[$value]=$11; //@line 727 "cPickle.c"
        var $12=HEAP[$value]; //@line 727 "cPickle.c"
        var $13=($12)==0; //@line 727 "cPickle.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 727 "cPickle.c"
      case 3: // $bb2
        HEAP[$0]=-1; //@line 728 "cPickle.c"
        __label__ = 21; break; //@line 728 "cPickle.c"
      case 4: // $bb3
        var $14=HEAP[$value]; //@line 730 "cPickle.c"
        var $15=(($14+4)&4294967295); //@line 730 "cPickle.c"
        var $16=HEAP[$15]; //@line 730 "cPickle.c"
        var $17=(($16+84)&4294967295); //@line 730 "cPickle.c"
        var $18=HEAP[$17]; //@line 730 "cPickle.c"
        var $19=($18) & 8388608; //@line 730 "cPickle.c"
        var $20=((($19))|0)==0; //@line 730 "cPickle.c"
        if ($20) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 730 "cPickle.c"
      case 5: // $bb4
        var $21=HEAP[_PicklingError]; //@line 731 "cPickle.c"
        _PyErr_SetString($21, ((__str3)&4294967295)); //@line 731 "cPickle.c"
        HEAP[$0]=-1; //@line 732 "cPickle.c"
        __label__ = 21; break; //@line 732 "cPickle.c"
      case 6: // $bb5
        var $22=HEAP[$value]; //@line 734 "cPickle.c"
        var $23=$22; //@line 734 "cPickle.c"
        var $24=(($23+8)&4294967295); //@line 734 "cPickle.c"
        var $25=HEAP[$24]; //@line 734 "cPickle.c"
        HEAP[$c_value]=$25; //@line 734 "cPickle.c"
        var $26=HEAP[$self_addr]; //@line 736 "cPickle.c"
        var $27=(($26+40)&4294967295); //@line 736 "cPickle.c"
        var $28=HEAP[$27]; //@line 736 "cPickle.c"
        var $29=((($28))|0)==0; //@line 736 "cPickle.c"
        if ($29) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 736 "cPickle.c"
      case 7: // $bb6
        var $30=(($s)&4294967295); //@line 737 "cPickle.c"
        HEAP[$30]=103; //@line 737 "cPickle.c"
        var $s7=$s; //@line 738 "cPickle.c"
        var $31=(($s7+1)&4294967295); //@line 738 "cPickle.c"
        var $32=HEAP[$c_value]; //@line 738 "cPickle.c"
        var $33=_PyOS_snprintf($31, 29, ((__str4)&4294967295), $32); //@line 738 "cPickle.c"
        var $s8=$s; //@line 739 "cPickle.c"
        var $34=_strlen($s8); //@line 739 "cPickle.c"
        HEAP[$len]=$34; //@line 739 "cPickle.c"
        __label__ = 18; break; //@line 739 "cPickle.c"
      case 8: // $bb9
        var $35=HEAP[$self_addr]; //@line 741 "cPickle.c"
        var $36=(($35+16)&4294967295); //@line 741 "cPickle.c"
        var $37=HEAP[$36]; //@line 741 "cPickle.c"
        var $38=(($37+4)&4294967295); //@line 741 "cPickle.c"
        var $39=HEAP[$38]; //@line 741 "cPickle.c"
        var $40=($39)==(_PdataType); //@line 741 "cPickle.c"
        if ($40) { __label__ = 9; break; } else { __label__ = 15; break; } //@line 741 "cPickle.c"
      case 9: // $bb10
        var $41=HEAP[$self_addr]; //@line 742 "cPickle.c"
        var $42=_write_other($41, 0, 0); //@line 742 "cPickle.c"
        var $43=((($42))|0) < 0; //@line 742 "cPickle.c"
        if ($43) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 742 "cPickle.c"
      case 10: // $bb11
        HEAP[$0]=-1; //@line 742 "cPickle.c"
        __label__ = 21; break; //@line 742 "cPickle.c"
      case 11: // $bb12
        var $44=HEAP[$self_addr]; //@line 743 "cPickle.c"
        var $45=(($44+16)&4294967295); //@line 743 "cPickle.c"
        var $46=HEAP[$45]; //@line 743 "cPickle.c"
        var $47=$46; //@line 743 "cPickle.c"
        var $48=(($47+8)&4294967295); //@line 743 "cPickle.c"
        var $49=HEAP[$48]; //@line 743 "cPickle.c"
        var $50=HEAP[$self_addr]; //@line 743 "cPickle.c"
        var $51=(($50+16)&4294967295); //@line 743 "cPickle.c"
        var $52=HEAP[$51]; //@line 743 "cPickle.c"
        var $53=$52; //@line 743 "cPickle.c"
        var $54=(($53+12)&4294967295); //@line 743 "cPickle.c"
        var $55=HEAP[$54]; //@line 743 "cPickle.c"
        var $56=((($49))|0)==((($55))|0); //@line 743 "cPickle.c"
        if ($56) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 743 "cPickle.c"
      case 12: // $bb13
        var $57=HEAP[$self_addr]; //@line 743 "cPickle.c"
        var $58=(($57+16)&4294967295); //@line 743 "cPickle.c"
        var $59=HEAP[$58]; //@line 743 "cPickle.c"
        var $60=$59; //@line 743 "cPickle.c"
        var $61=_Pdata_grow($60); //@line 743 "cPickle.c"
        var $62=((($61))|0) < 0; //@line 743 "cPickle.c"
        if ($62) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 743 "cPickle.c"
      case 13: // $bb14
        HEAP[$0]=-1; //@line 743 "cPickle.c"
        __label__ = 21; break; //@line 743 "cPickle.c"
      case 14: // $bb15
        var $63=HEAP[$mv]; //@line 743 "cPickle.c"
        var $64=(($63)&4294967295); //@line 743 "cPickle.c"
        var $65=HEAP[$64]; //@line 743 "cPickle.c"
        var $66=((($65) + 1)&4294967295); //@line 743 "cPickle.c"
        var $67=HEAP[$mv]; //@line 743 "cPickle.c"
        var $68=(($67)&4294967295); //@line 743 "cPickle.c"
        HEAP[$68]=$66; //@line 743 "cPickle.c"
        var $69=HEAP[$self_addr]; //@line 743 "cPickle.c"
        var $70=(($69+16)&4294967295); //@line 743 "cPickle.c"
        var $71=HEAP[$70]; //@line 743 "cPickle.c"
        var $72=$71; //@line 743 "cPickle.c"
        var $73=(($72+16)&4294967295); //@line 743 "cPickle.c"
        var $74=HEAP[$73]; //@line 743 "cPickle.c"
        var $75=HEAP[$self_addr]; //@line 743 "cPickle.c"
        var $76=(($75+16)&4294967295); //@line 743 "cPickle.c"
        var $77=HEAP[$76]; //@line 743 "cPickle.c"
        var $78=$77; //@line 743 "cPickle.c"
        var $79=(($78+8)&4294967295); //@line 743 "cPickle.c"
        var $80=HEAP[$79]; //@line 743 "cPickle.c"
        var $81=(($74+4*$80)&4294967295); //@line 743 "cPickle.c"
        var $82=HEAP[$mv]; //@line 743 "cPickle.c"
        HEAP[$81]=$82; //@line 743 "cPickle.c"
        var $83=((($80) + 1)&4294967295); //@line 743 "cPickle.c"
        var $84=(($78+8)&4294967295); //@line 743 "cPickle.c"
        HEAP[$84]=$83; //@line 743 "cPickle.c"
        HEAP[$0]=0; //@line 744 "cPickle.c"
        __label__ = 21; break; //@line 744 "cPickle.c"
      case 15: // $bb16
        var $85=HEAP[$c_value]; //@line 747 "cPickle.c"
        var $86=((($85))|0) <= 255; //@line 747 "cPickle.c"
        if ($86) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 747 "cPickle.c"
      case 16: // $bb17
        var $87=(($s)&4294967295); //@line 748 "cPickle.c"
        HEAP[$87]=104; //@line 748 "cPickle.c"
        var $88=HEAP[$c_value]; //@line 749 "cPickle.c"
        var $89=((($88)) & 255); //@line 749 "cPickle.c"
        var $90=(($s+1)&4294967295); //@line 749 "cPickle.c"
        HEAP[$90]=$89; //@line 749 "cPickle.c"
        HEAP[$len]=2; //@line 750 "cPickle.c"
        __label__ = 18; break; //@line 750 "cPickle.c"
      case 17: // $bb18
        var $91=(($s)&4294967295); //@line 753 "cPickle.c"
        HEAP[$91]=106; //@line 753 "cPickle.c"
        var $92=HEAP[$c_value]; //@line 754 "cPickle.c"
        var $93=((($92)) & 255); //@line 754 "cPickle.c"
        var $94=(($s+1)&4294967295); //@line 754 "cPickle.c"
        HEAP[$94]=$93; //@line 754 "cPickle.c"
        var $95=HEAP[$c_value]; //@line 755 "cPickle.c"
        var $96=((($95))|0) >> 8; //@line 755 "cPickle.c"
        var $97=((($96)) & 255); //@line 755 "cPickle.c"
        var $98=(($s+2)&4294967295); //@line 755 "cPickle.c"
        HEAP[$98]=$97; //@line 755 "cPickle.c"
        var $99=HEAP[$c_value]; //@line 756 "cPickle.c"
        var $100=((($99))|0) >> 16; //@line 756 "cPickle.c"
        var $101=((($100)) & 255); //@line 756 "cPickle.c"
        var $102=(($s+3)&4294967295); //@line 756 "cPickle.c"
        HEAP[$102]=$101; //@line 756 "cPickle.c"
        var $103=HEAP[$c_value]; //@line 757 "cPickle.c"
        var $104=((($103))|0) >> 24; //@line 757 "cPickle.c"
        var $105=((($104)) & 255); //@line 757 "cPickle.c"
        var $106=(($s+4)&4294967295); //@line 757 "cPickle.c"
        HEAP[$106]=$105; //@line 757 "cPickle.c"
        HEAP[$len]=5; //@line 758 "cPickle.c"
        __label__ = 18; break; //@line 758 "cPickle.c"
      case 18: // $bb19
        var $107=HEAP[$self_addr]; //@line 762 "cPickle.c"
        var $108=(($107+48)&4294967295); //@line 762 "cPickle.c"
        var $109=HEAP[$108]; //@line 762 "cPickle.c"
        var $110=HEAP[$len]; //@line 762 "cPickle.c"
        var $111=HEAP[$self_addr]; //@line 762 "cPickle.c"
        var $s20=$s; //@line 762 "cPickle.c"
        var $112=FUNCTION_TABLE[$109]($111, $s20, $110); //@line 762 "cPickle.c"
        var $113=((($112))|0) < 0; //@line 762 "cPickle.c"
        if ($113) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 762 "cPickle.c"
      case 19: // $bb21
        HEAP[$0]=-1; //@line 763 "cPickle.c"
        __label__ = 21; break; //@line 763 "cPickle.c"
      case 20: // $bb22
        HEAP[$0]=0; //@line 765 "cPickle.c"
        __label__ = 21; break; //@line 765 "cPickle.c"
      case 21: // $bb23
        var $114=HEAP[$0]; //@line 724 "cPickle.c"
        HEAP[$retval]=$114; //@line 724 "cPickle.c"
        __label__ = 22; break; //@line 724 "cPickle.c"
      case 22: // $return
        var $retval24=HEAP[$retval]; //@line 724 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval24; //@line 724 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _put($self, $ob) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $ob_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$ob_addr]=$ob;
        var $1=HEAP[$ob_addr]; //@line 772 "cPickle.c"
        var $2=(($1)&4294967295); //@line 772 "cPickle.c"
        var $3=HEAP[$2]; //@line 772 "cPickle.c"
        var $4=((($3))|0) <= 1; //@line 772 "cPickle.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 772 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 772 "cPickle.c"
        var $6=(($5+44)&4294967295); //@line 772 "cPickle.c"
        var $7=HEAP[$6]; //@line 772 "cPickle.c"
        var $8=((($7))|0)!=0; //@line 772 "cPickle.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 772 "cPickle.c"
      case 2: // $bb1
        HEAP[$0]=0; //@line 773 "cPickle.c"
        __label__ = 4; break; //@line 773 "cPickle.c"
      case 3: // $bb2
        var $9=HEAP[$self_addr]; //@line 775 "cPickle.c"
        var $10=HEAP[$ob_addr]; //@line 775 "cPickle.c"
        var $11=_put2($9, $10); //@line 775 "cPickle.c"
        HEAP[$0]=$11; //@line 775 "cPickle.c"
        __label__ = 4; break; //@line 775 "cPickle.c"
      case 4: // $bb3
        var $12=HEAP[$0]; //@line 773 "cPickle.c"
        HEAP[$retval]=$12; //@line 773 "cPickle.c"
        __label__ = 5; break; //@line 773 "cPickle.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 773 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 773 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _put2($self, $ob) {
    var __stackBase__  = STACKTOP; STACKTOP += 70; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 70);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $ob_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $c_str=__stackBase__+16;
        var $p=__stackBase__+46;
        var $len=__stackBase__+50;
        var $res=__stackBase__+54;
        var $py_ob_id=__stackBase__+58;
        var $memo_len=__stackBase__+62;
        var $t=__stackBase__+66;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$ob_addr]=$ob;
        HEAP[$res]=-1; //@line 785 "cPickle.c"
        HEAP[$py_ob_id]=0; //@line 786 "cPickle.c"
        HEAP[$memo_len]=0; //@line 786 "cPickle.c"
        HEAP[$t]=0; //@line 786 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 788 "cPickle.c"
        var $2=(($1+44)&4294967295); //@line 788 "cPickle.c"
        var $3=HEAP[$2]; //@line 788 "cPickle.c"
        var $4=((($3))|0)!=0; //@line 788 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 788 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 789 "cPickle.c"
        __label__ = 31; break; //@line 789 "cPickle.c"
      case 2: // $bb1
        var $5=HEAP[$self_addr]; //@line 791 "cPickle.c"
        var $6=(($5+20)&4294967295); //@line 791 "cPickle.c"
        var $7=HEAP[$6]; //@line 791 "cPickle.c"
        var $8=_PyDict_Size($7); //@line 791 "cPickle.c"
        HEAP[$p]=$8; //@line 791 "cPickle.c"
        var $9=HEAP[$p]; //@line 791 "cPickle.c"
        var $10=((($9))|0) < 0; //@line 791 "cPickle.c"
        if ($10) { __label__ = 21; break; } else { __label__ = 3; break; } //@line 791 "cPickle.c"
      case 3: // $bb2
        var $11=HEAP[$p]; //@line 800 "cPickle.c"
        var $12=((($11) + 1)&4294967295); //@line 800 "cPickle.c"
        HEAP[$p]=$12; //@line 800 "cPickle.c"
        var $13=HEAP[$ob_addr]; //@line 802 "cPickle.c"
        var $14=$13; //@line 802 "cPickle.c"
        var $15=_PyLong_FromVoidPtr($14); //@line 802 "cPickle.c"
        HEAP[$py_ob_id]=$15; //@line 802 "cPickle.c"
        var $16=HEAP[$py_ob_id]; //@line 802 "cPickle.c"
        var $17=($16)==0; //@line 802 "cPickle.c"
        if ($17) { __label__ = 21; break; } else { __label__ = 4; break; } //@line 802 "cPickle.c"
      case 4: // $bb3
        var $18=HEAP[$p]; //@line 805 "cPickle.c"
        var $19=_PyInt_FromLong($18); //@line 805 "cPickle.c"
        HEAP[$memo_len]=$19; //@line 805 "cPickle.c"
        var $20=HEAP[$memo_len]; //@line 805 "cPickle.c"
        var $21=($20)==0; //@line 805 "cPickle.c"
        if ($21) { __label__ = 21; break; } else { __label__ = 5; break; } //@line 805 "cPickle.c"
      case 5: // $bb4
        var $22=_PyTuple_New(2); //@line 808 "cPickle.c"
        HEAP[$t]=$22; //@line 808 "cPickle.c"
        var $23=HEAP[$t]; //@line 808 "cPickle.c"
        var $24=($23)==0; //@line 808 "cPickle.c"
        if ($24) { __label__ = 21; break; } else { __label__ = 6; break; } //@line 808 "cPickle.c"
      case 6: // $bb5
        var $25=HEAP[$t]; //@line 811 "cPickle.c"
        var $26=$25; //@line 811 "cPickle.c"
        var $27=(($26+12)&4294967295); //@line 811 "cPickle.c"
        var $28=(($27)&4294967295); //@line 811 "cPickle.c"
        var $29=HEAP[$memo_len]; //@line 811 "cPickle.c"
        HEAP[$28]=$29; //@line 811 "cPickle.c"
        var $30=HEAP[$memo_len]; //@line 812 "cPickle.c"
        var $31=(($30)&4294967295); //@line 812 "cPickle.c"
        var $32=HEAP[$31]; //@line 812 "cPickle.c"
        var $33=((($32) + 1)&4294967295); //@line 812 "cPickle.c"
        var $34=HEAP[$memo_len]; //@line 812 "cPickle.c"
        var $35=(($34)&4294967295); //@line 812 "cPickle.c"
        HEAP[$35]=$33; //@line 812 "cPickle.c"
        var $36=HEAP[$t]; //@line 813 "cPickle.c"
        var $37=$36; //@line 813 "cPickle.c"
        var $38=(($37+12)&4294967295); //@line 813 "cPickle.c"
        var $39=(($38+4)&4294967295); //@line 813 "cPickle.c"
        var $40=HEAP[$ob_addr]; //@line 813 "cPickle.c"
        HEAP[$39]=$40; //@line 813 "cPickle.c"
        var $41=HEAP[$ob_addr]; //@line 814 "cPickle.c"
        var $42=(($41)&4294967295); //@line 814 "cPickle.c"
        var $43=HEAP[$42]; //@line 814 "cPickle.c"
        var $44=((($43) + 1)&4294967295); //@line 814 "cPickle.c"
        var $45=HEAP[$ob_addr]; //@line 814 "cPickle.c"
        var $46=(($45)&4294967295); //@line 814 "cPickle.c"
        HEAP[$46]=$44; //@line 814 "cPickle.c"
        var $47=HEAP[$self_addr]; //@line 816 "cPickle.c"
        var $48=(($47+20)&4294967295); //@line 816 "cPickle.c"
        var $49=HEAP[$48]; //@line 816 "cPickle.c"
        var $50=HEAP[$py_ob_id]; //@line 816 "cPickle.c"
        var $51=HEAP[$t]; //@line 816 "cPickle.c"
        var $52=_PyDict_SetItem($49, $50, $51); //@line 816 "cPickle.c"
        var $53=((($52))|0) < 0; //@line 816 "cPickle.c"
        if ($53) { __label__ = 21; break; } else { __label__ = 7; break; } //@line 816 "cPickle.c"
      case 7: // $bb6
        var $54=HEAP[$self_addr]; //@line 819 "cPickle.c"
        var $55=(($54+40)&4294967295); //@line 819 "cPickle.c"
        var $56=HEAP[$55]; //@line 819 "cPickle.c"
        var $57=((($56))|0)==0; //@line 819 "cPickle.c"
        if ($57) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 819 "cPickle.c"
      case 8: // $bb7
        var $58=(($c_str)&4294967295); //@line 820 "cPickle.c"
        HEAP[$58]=112; //@line 820 "cPickle.c"
        var $c_str8=$c_str; //@line 821 "cPickle.c"
        var $59=(($c_str8+1)&4294967295); //@line 821 "cPickle.c"
        var $60=HEAP[$p]; //@line 821 "cPickle.c"
        var $61=_PyOS_snprintf($59, 29, ((__str5)&4294967295), $60); //@line 821 "cPickle.c"
        var $c_str9=$c_str; //@line 822 "cPickle.c"
        var $62=_strlen($c_str9); //@line 822 "cPickle.c"
        HEAP[$len]=$62; //@line 822 "cPickle.c"
        __label__ = 19; break; //@line 822 "cPickle.c"
      case 9: // $bb10
        var $63=HEAP[$self_addr]; //@line 824 "cPickle.c"
        var $64=(($63+16)&4294967295); //@line 824 "cPickle.c"
        var $65=HEAP[$64]; //@line 824 "cPickle.c"
        var $66=(($65+4)&4294967295); //@line 824 "cPickle.c"
        var $67=HEAP[$66]; //@line 824 "cPickle.c"
        var $68=($67)==(_PdataType); //@line 824 "cPickle.c"
        if ($68) { __label__ = 10; break; } else { __label__ = 16; break; } //@line 824 "cPickle.c"
      case 10: // $bb11
        var $69=HEAP[$self_addr]; //@line 825 "cPickle.c"
        var $70=_write_other($69, 0, 0); //@line 825 "cPickle.c"
        var $71=((($70))|0) < 0; //@line 825 "cPickle.c"
        if ($71) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 825 "cPickle.c"
      case 11: // $bb12
        HEAP[$0]=-1; //@line 825 "cPickle.c"
        __label__ = 31; break; //@line 825 "cPickle.c"
      case 12: // $bb13
        var $72=HEAP[$self_addr]; //@line 826 "cPickle.c"
        var $73=(($72+16)&4294967295); //@line 826 "cPickle.c"
        var $74=HEAP[$73]; //@line 826 "cPickle.c"
        var $75=$74; //@line 826 "cPickle.c"
        var $76=(($75+8)&4294967295); //@line 826 "cPickle.c"
        var $77=HEAP[$76]; //@line 826 "cPickle.c"
        var $78=HEAP[$self_addr]; //@line 826 "cPickle.c"
        var $79=(($78+16)&4294967295); //@line 826 "cPickle.c"
        var $80=HEAP[$79]; //@line 826 "cPickle.c"
        var $81=$80; //@line 826 "cPickle.c"
        var $82=(($81+12)&4294967295); //@line 826 "cPickle.c"
        var $83=HEAP[$82]; //@line 826 "cPickle.c"
        var $84=((($77))|0)==((($83))|0); //@line 826 "cPickle.c"
        if ($84) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 826 "cPickle.c"
      case 13: // $bb14
        var $85=HEAP[$self_addr]; //@line 826 "cPickle.c"
        var $86=(($85+16)&4294967295); //@line 826 "cPickle.c"
        var $87=HEAP[$86]; //@line 826 "cPickle.c"
        var $88=$87; //@line 826 "cPickle.c"
        var $89=_Pdata_grow($88); //@line 826 "cPickle.c"
        var $90=((($89))|0) < 0; //@line 826 "cPickle.c"
        if ($90) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 826 "cPickle.c"
      case 14: // $bb15
        HEAP[$0]=-1; //@line 826 "cPickle.c"
        __label__ = 31; break; //@line 826 "cPickle.c"
      case 15: // $bb16
        var $91=HEAP[$memo_len]; //@line 826 "cPickle.c"
        var $92=(($91)&4294967295); //@line 826 "cPickle.c"
        var $93=HEAP[$92]; //@line 826 "cPickle.c"
        var $94=((($93) + 1)&4294967295); //@line 826 "cPickle.c"
        var $95=HEAP[$memo_len]; //@line 826 "cPickle.c"
        var $96=(($95)&4294967295); //@line 826 "cPickle.c"
        HEAP[$96]=$94; //@line 826 "cPickle.c"
        var $97=HEAP[$self_addr]; //@line 826 "cPickle.c"
        var $98=(($97+16)&4294967295); //@line 826 "cPickle.c"
        var $99=HEAP[$98]; //@line 826 "cPickle.c"
        var $100=$99; //@line 826 "cPickle.c"
        var $101=(($100+16)&4294967295); //@line 826 "cPickle.c"
        var $102=HEAP[$101]; //@line 826 "cPickle.c"
        var $103=HEAP[$self_addr]; //@line 826 "cPickle.c"
        var $104=(($103+16)&4294967295); //@line 826 "cPickle.c"
        var $105=HEAP[$104]; //@line 826 "cPickle.c"
        var $106=$105; //@line 826 "cPickle.c"
        var $107=(($106+8)&4294967295); //@line 826 "cPickle.c"
        var $108=HEAP[$107]; //@line 826 "cPickle.c"
        var $109=(($102+4*$108)&4294967295); //@line 826 "cPickle.c"
        var $110=HEAP[$memo_len]; //@line 826 "cPickle.c"
        HEAP[$109]=$110; //@line 826 "cPickle.c"
        var $111=((($108) + 1)&4294967295); //@line 826 "cPickle.c"
        var $112=(($106+8)&4294967295); //@line 826 "cPickle.c"
        HEAP[$112]=$111; //@line 826 "cPickle.c"
        HEAP[$res]=0; //@line 827 "cPickle.c"
        __label__ = 21; break; //@line 827 "cPickle.c"
      case 16: // $bb17
        var $113=HEAP[$p]; //@line 831 "cPickle.c"
        var $114=((($113))|0) > 255; //@line 831 "cPickle.c"
        if ($114) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 831 "cPickle.c"
      case 17: // $bb18
        var $115=(($c_str)&4294967295); //@line 832 "cPickle.c"
        HEAP[$115]=114; //@line 832 "cPickle.c"
        var $116=HEAP[$p]; //@line 833 "cPickle.c"
        var $117=((($116)) & 255); //@line 833 "cPickle.c"
        var $118=(($c_str+1)&4294967295); //@line 833 "cPickle.c"
        HEAP[$118]=$117; //@line 833 "cPickle.c"
        var $119=HEAP[$p]; //@line 834 "cPickle.c"
        var $120=((($119))|0) >> 8; //@line 834 "cPickle.c"
        var $121=((($120)) & 255); //@line 834 "cPickle.c"
        var $122=(($c_str+2)&4294967295); //@line 834 "cPickle.c"
        HEAP[$122]=$121; //@line 834 "cPickle.c"
        var $123=HEAP[$p]; //@line 835 "cPickle.c"
        var $124=((($123))|0) >> 16; //@line 835 "cPickle.c"
        var $125=((($124)) & 255); //@line 835 "cPickle.c"
        var $126=(($c_str+3)&4294967295); //@line 835 "cPickle.c"
        HEAP[$126]=$125; //@line 835 "cPickle.c"
        var $127=HEAP[$p]; //@line 836 "cPickle.c"
        var $128=((($127))|0) >> 24; //@line 836 "cPickle.c"
        var $129=((($128)) & 255); //@line 836 "cPickle.c"
        var $130=(($c_str+4)&4294967295); //@line 836 "cPickle.c"
        HEAP[$130]=$129; //@line 836 "cPickle.c"
        HEAP[$len]=5; //@line 837 "cPickle.c"
        __label__ = 19; break; //@line 837 "cPickle.c"
      case 18: // $bb19
        var $131=(($c_str)&4294967295); //@line 840 "cPickle.c"
        HEAP[$131]=113; //@line 840 "cPickle.c"
        var $132=HEAP[$p]; //@line 841 "cPickle.c"
        var $133=((($132)) & 255); //@line 841 "cPickle.c"
        var $134=(($c_str+1)&4294967295); //@line 841 "cPickle.c"
        HEAP[$134]=$133; //@line 841 "cPickle.c"
        HEAP[$len]=2; //@line 842 "cPickle.c"
        __label__ = 19; break; //@line 842 "cPickle.c"
      case 19: // $bb20
        var $135=HEAP[$self_addr]; //@line 846 "cPickle.c"
        var $136=(($135+48)&4294967295); //@line 846 "cPickle.c"
        var $137=HEAP[$136]; //@line 846 "cPickle.c"
        var $138=HEAP[$len]; //@line 846 "cPickle.c"
        var $139=HEAP[$self_addr]; //@line 846 "cPickle.c"
        var $c_str21=$c_str; //@line 846 "cPickle.c"
        var $140=FUNCTION_TABLE[$137]($139, $c_str21, $138); //@line 846 "cPickle.c"
        var $141=((($140))|0) < 0; //@line 846 "cPickle.c"
        if ($141) { __label__ = 21; break; } else { __label__ = 20; break; } //@line 846 "cPickle.c"
      case 20: // $bb22
        HEAP[$res]=0; //@line 849 "cPickle.c"
        __label__ = 21; break; //@line 851 "cPickle.c"
      case 21: // $finally
        var $142=HEAP[$py_ob_id]; //@line 852 "cPickle.c"
        var $143=($142)!=0; //@line 852 "cPickle.c"
        if ($143) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 852 "cPickle.c"
      case 22: // $bb23
        var $144=HEAP[$py_ob_id]; //@line 852 "cPickle.c"
        var $145=(($144)&4294967295); //@line 852 "cPickle.c"
        var $146=HEAP[$145]; //@line 852 "cPickle.c"
        var $147=((($146) - 1)&4294967295); //@line 852 "cPickle.c"
        var $148=HEAP[$py_ob_id]; //@line 852 "cPickle.c"
        var $149=(($148)&4294967295); //@line 852 "cPickle.c"
        HEAP[$149]=$147; //@line 852 "cPickle.c"
        var $150=HEAP[$py_ob_id]; //@line 852 "cPickle.c"
        var $151=(($150)&4294967295); //@line 852 "cPickle.c"
        var $152=HEAP[$151]; //@line 852 "cPickle.c"
        var $153=((($152))|0)==0; //@line 852 "cPickle.c"
        if ($153) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 852 "cPickle.c"
      case 23: // $bb24
        var $154=HEAP[$py_ob_id]; //@line 852 "cPickle.c"
        var $155=(($154+4)&4294967295); //@line 852 "cPickle.c"
        var $156=HEAP[$155]; //@line 852 "cPickle.c"
        var $157=(($156+24)&4294967295); //@line 852 "cPickle.c"
        var $158=HEAP[$157]; //@line 852 "cPickle.c"
        var $159=HEAP[$py_ob_id]; //@line 852 "cPickle.c"
        FUNCTION_TABLE[$158]($159); //@line 852 "cPickle.c"
        __label__ = 24; break; //@line 852 "cPickle.c"
      case 24: // $bb25
        var $160=HEAP[$memo_len]; //@line 853 "cPickle.c"
        var $161=($160)!=0; //@line 853 "cPickle.c"
        if ($161) { __label__ = 25; break; } else { __label__ = 27; break; } //@line 853 "cPickle.c"
      case 25: // $bb26
        var $162=HEAP[$memo_len]; //@line 853 "cPickle.c"
        var $163=(($162)&4294967295); //@line 853 "cPickle.c"
        var $164=HEAP[$163]; //@line 853 "cPickle.c"
        var $165=((($164) - 1)&4294967295); //@line 853 "cPickle.c"
        var $166=HEAP[$memo_len]; //@line 853 "cPickle.c"
        var $167=(($166)&4294967295); //@line 853 "cPickle.c"
        HEAP[$167]=$165; //@line 853 "cPickle.c"
        var $168=HEAP[$memo_len]; //@line 853 "cPickle.c"
        var $169=(($168)&4294967295); //@line 853 "cPickle.c"
        var $170=HEAP[$169]; //@line 853 "cPickle.c"
        var $171=((($170))|0)==0; //@line 853 "cPickle.c"
        if ($171) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 853 "cPickle.c"
      case 26: // $bb27
        var $172=HEAP[$memo_len]; //@line 853 "cPickle.c"
        var $173=(($172+4)&4294967295); //@line 853 "cPickle.c"
        var $174=HEAP[$173]; //@line 853 "cPickle.c"
        var $175=(($174+24)&4294967295); //@line 853 "cPickle.c"
        var $176=HEAP[$175]; //@line 853 "cPickle.c"
        var $177=HEAP[$memo_len]; //@line 853 "cPickle.c"
        FUNCTION_TABLE[$176]($177); //@line 853 "cPickle.c"
        __label__ = 27; break; //@line 853 "cPickle.c"
      case 27: // $bb28
        var $178=HEAP[$t]; //@line 854 "cPickle.c"
        var $179=($178)!=0; //@line 854 "cPickle.c"
        if ($179) { __label__ = 28; break; } else { __label__ = 30; break; } //@line 854 "cPickle.c"
      case 28: // $bb29
        var $180=HEAP[$t]; //@line 854 "cPickle.c"
        var $181=(($180)&4294967295); //@line 854 "cPickle.c"
        var $182=HEAP[$181]; //@line 854 "cPickle.c"
        var $183=((($182) - 1)&4294967295); //@line 854 "cPickle.c"
        var $184=HEAP[$t]; //@line 854 "cPickle.c"
        var $185=(($184)&4294967295); //@line 854 "cPickle.c"
        HEAP[$185]=$183; //@line 854 "cPickle.c"
        var $186=HEAP[$t]; //@line 854 "cPickle.c"
        var $187=(($186)&4294967295); //@line 854 "cPickle.c"
        var $188=HEAP[$187]; //@line 854 "cPickle.c"
        var $189=((($188))|0)==0; //@line 854 "cPickle.c"
        if ($189) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 854 "cPickle.c"
      case 29: // $bb30
        var $190=HEAP[$t]; //@line 854 "cPickle.c"
        var $191=(($190+4)&4294967295); //@line 854 "cPickle.c"
        var $192=HEAP[$191]; //@line 854 "cPickle.c"
        var $193=(($192+24)&4294967295); //@line 854 "cPickle.c"
        var $194=HEAP[$193]; //@line 854 "cPickle.c"
        var $195=HEAP[$t]; //@line 854 "cPickle.c"
        FUNCTION_TABLE[$194]($195); //@line 854 "cPickle.c"
        __label__ = 30; break; //@line 854 "cPickle.c"
      case 30: // $bb31
        var $196=HEAP[$res]; //@line 856 "cPickle.c"
        HEAP[$0]=$196; //@line 856 "cPickle.c"
        __label__ = 31; break; //@line 856 "cPickle.c"
      case 31: // $bb32
        var $197=HEAP[$0]; //@line 789 "cPickle.c"
        HEAP[$retval]=$197; //@line 789 "cPickle.c"
        __label__ = 32; break; //@line 789 "cPickle.c"
      case 32: // $return
        var $retval33=HEAP[$retval]; //@line 789 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval33; //@line 789 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _whichmodule($global, $global_name) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $global_addr=__stackBase__;
        var $global_name_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $i=__stackBase__+16;
        var $j=__stackBase__+20;
        var $module=__stackBase__+24;
        var $modules_dict=__stackBase__+28;
        var $global_name_attr=__stackBase__+32;
        var $name=__stackBase__+36;
        var $_alloca_point_=0;
        HEAP[$global_addr]=$global;
        HEAP[$global_name_addr]=$global_name;
        HEAP[$module]=0; //@line 863 "cPickle.c"
        HEAP[$modules_dict]=0; //@line 863 "cPickle.c"
        HEAP[$global_name_attr]=0; //@line 864 "cPickle.c"
        HEAP[$name]=0; //@line 864 "cPickle.c"
        var $1=HEAP[$global_addr]; //@line 866 "cPickle.c"
        var $2=_PyObject_GetAttrString($1, ((__str6)&4294967295)); //@line 866 "cPickle.c"
        HEAP[$module]=$2; //@line 866 "cPickle.c"
        var $3=HEAP[$module]; //@line 867 "cPickle.c"
        var $4=($3)!=0; //@line 867 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 867 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[$module]; //@line 868 "cPickle.c"
        HEAP[$0]=$5; //@line 868 "cPickle.c"
        __label__ = 23; break; //@line 868 "cPickle.c"
      case 2: // $bb1
        var $6=HEAP[_PyExc_AttributeError]; //@line 869 "cPickle.c"
        var $7=_PyErr_ExceptionMatches($6); //@line 869 "cPickle.c"
        var $8=((($7))|0)!=0; //@line 869 "cPickle.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 869 "cPickle.c"
      case 3: // $bb2
        _PyErr_Clear(); //@line 870 "cPickle.c"
        var $9=_PySys_GetObject(((__str7)&4294967295)); //@line 874 "cPickle.c"
        HEAP[$modules_dict]=$9; //@line 874 "cPickle.c"
        var $10=HEAP[$modules_dict]; //@line 874 "cPickle.c"
        var $11=($10)==0; //@line 874 "cPickle.c"
        if ($11) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 874 "cPickle.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 872 "cPickle.c"
        __label__ = 23; break; //@line 872 "cPickle.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 875 "cPickle.c"
        __label__ = 23; break; //@line 875 "cPickle.c"
      case 6: // $bb5
        HEAP[$i]=0; //@line 877 "cPickle.c"
        __label__ = 19; break; //@line 877 "cPickle.c"
      case 7: // $bb6
        var $12=HEAP[___main___str]; //@line 880 "cPickle.c"
        var $13=HEAP[$name]; //@line 880 "cPickle.c"
        var $14=_PyObject_Compare($13, $12); //@line 880 "cPickle.c"
        var $15=((($14))|0)==0; //@line 880 "cPickle.c"
        if ($15) { __label__ = 19; break; } else { __label__ = 8; break; } //@line 880 "cPickle.c"
      case 8: // $bb7
        var $16=HEAP[$module]; //@line 882 "cPickle.c"
        var $17=HEAP[$global_name_addr]; //@line 882 "cPickle.c"
        var $18=_PyObject_GetAttr($16, $17); //@line 882 "cPickle.c"
        HEAP[$global_name_attr]=$18; //@line 882 "cPickle.c"
        var $19=HEAP[$global_name_attr]; //@line 883 "cPickle.c"
        var $20=($19)==0; //@line 883 "cPickle.c"
        if ($20) { __label__ = 9; break; } else { __label__ = 12; break; } //@line 883 "cPickle.c"
      case 9: // $bb8
        var $21=HEAP[_PyExc_AttributeError]; //@line 884 "cPickle.c"
        var $22=_PyErr_ExceptionMatches($21); //@line 884 "cPickle.c"
        var $23=((($22))|0)!=0; //@line 884 "cPickle.c"
        if ($23) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 884 "cPickle.c"
      case 10: // $bb9
        _PyErr_Clear(); //@line 885 "cPickle.c"
        __label__ = 19; break; //@line 885 "cPickle.c"
      case 11: // $bb10
        HEAP[$0]=0; //@line 887 "cPickle.c"
        __label__ = 23; break; //@line 887 "cPickle.c"
      case 12: // $bb11
        var $24=HEAP[$global_name_attr]; //@line 891 "cPickle.c"
        var $25=HEAP[$global_addr]; //@line 891 "cPickle.c"
        var $26=($24)!=($25); //@line 891 "cPickle.c"
        if ($26) { __label__ = 13; break; } else { __label__ = 16; break; } //@line 891 "cPickle.c"
      case 13: // $bb12
        var $27=HEAP[$global_name_attr]; //@line 892 "cPickle.c"
        var $28=(($27)&4294967295); //@line 892 "cPickle.c"
        var $29=HEAP[$28]; //@line 892 "cPickle.c"
        var $30=((($29) - 1)&4294967295); //@line 892 "cPickle.c"
        var $31=HEAP[$global_name_attr]; //@line 892 "cPickle.c"
        var $32=(($31)&4294967295); //@line 892 "cPickle.c"
        HEAP[$32]=$30; //@line 892 "cPickle.c"
        var $33=HEAP[$global_name_attr]; //@line 892 "cPickle.c"
        var $34=(($33)&4294967295); //@line 892 "cPickle.c"
        var $35=HEAP[$34]; //@line 892 "cPickle.c"
        var $36=((($35))|0)==0; //@line 892 "cPickle.c"
        if ($36) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 892 "cPickle.c"
      case 14: // $bb13
        var $37=HEAP[$global_name_attr]; //@line 892 "cPickle.c"
        var $38=(($37+4)&4294967295); //@line 892 "cPickle.c"
        var $39=HEAP[$38]; //@line 892 "cPickle.c"
        var $40=(($39+24)&4294967295); //@line 892 "cPickle.c"
        var $41=HEAP[$40]; //@line 892 "cPickle.c"
        var $42=HEAP[$global_name_attr]; //@line 892 "cPickle.c"
        FUNCTION_TABLE[$41]($42); //@line 892 "cPickle.c"
        __label__ = 15; break; //@line 892 "cPickle.c"
      case 15: // $bb14
        __label__ = 19; break; //@line 892 "cPickle.c"
      case 16: // $bb15
        var $43=HEAP[$global_name_attr]; //@line 896 "cPickle.c"
        var $44=(($43)&4294967295); //@line 896 "cPickle.c"
        var $45=HEAP[$44]; //@line 896 "cPickle.c"
        var $46=((($45) - 1)&4294967295); //@line 896 "cPickle.c"
        var $47=HEAP[$global_name_attr]; //@line 896 "cPickle.c"
        var $48=(($47)&4294967295); //@line 896 "cPickle.c"
        HEAP[$48]=$46; //@line 896 "cPickle.c"
        var $49=HEAP[$global_name_attr]; //@line 896 "cPickle.c"
        var $50=(($49)&4294967295); //@line 896 "cPickle.c"
        var $51=HEAP[$50]; //@line 896 "cPickle.c"
        var $52=((($51))|0)==0; //@line 896 "cPickle.c"
        if ($52) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 896 "cPickle.c"
      case 17: // $bb16
        var $53=HEAP[$global_name_attr]; //@line 896 "cPickle.c"
        var $54=(($53+4)&4294967295); //@line 896 "cPickle.c"
        var $55=HEAP[$54]; //@line 896 "cPickle.c"
        var $56=(($55+24)&4294967295); //@line 896 "cPickle.c"
        var $57=HEAP[$56]; //@line 896 "cPickle.c"
        var $58=HEAP[$global_name_attr]; //@line 896 "cPickle.c"
        FUNCTION_TABLE[$57]($58); //@line 896 "cPickle.c"
        __label__ = 18; break; //@line 896 "cPickle.c"
      case 18: // $bb17
        __label__ = 20; break; //@line 896 "cPickle.c"
      case 19: // $bb18
        var $59=HEAP[$modules_dict]; //@line 878 "cPickle.c"
        var $60=_PyDict_Next($59, $i, $name, $module); //@line 878 "cPickle.c"
        HEAP[$j]=$60; //@line 878 "cPickle.c"
        var $61=HEAP[$j]; //@line 878 "cPickle.c"
        var $62=((($61))|0)!=0; //@line 878 "cPickle.c"
        if ($62) { __label__ = 7; break; } else { __label__ = 20; break; } //@line 878 "cPickle.c"
      case 20: // $bb19
        var $63=HEAP[$j]; //@line 905 "cPickle.c"
        var $64=((($63))|0)==0; //@line 905 "cPickle.c"
        if ($64) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 905 "cPickle.c"
      case 21: // $bb20
        var $65=HEAP[___main___str]; //@line 906 "cPickle.c"
        HEAP[$name]=$65; //@line 906 "cPickle.c"
        __label__ = 22; break; //@line 906 "cPickle.c"
      case 22: // $bb21
        var $66=HEAP[$name]; //@line 909 "cPickle.c"
        var $67=(($66)&4294967295); //@line 909 "cPickle.c"
        var $68=HEAP[$67]; //@line 909 "cPickle.c"
        var $69=((($68) + 1)&4294967295); //@line 909 "cPickle.c"
        var $70=(($66)&4294967295); //@line 909 "cPickle.c"
        HEAP[$70]=$69; //@line 909 "cPickle.c"
        var $71=HEAP[$name]; //@line 910 "cPickle.c"
        HEAP[$0]=$71; //@line 910 "cPickle.c"
        __label__ = 23; break; //@line 910 "cPickle.c"
      case 23: // $bb22
        var $72=HEAP[$0]; //@line 868 "cPickle.c"
        HEAP[$retval]=$72; //@line 868 "cPickle.c"
        __label__ = 24; break; //@line 868 "cPickle.c"
      case 24: // $return
        var $retval23=HEAP[$retval]; //@line 868 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval23; //@line 868 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fast_save_enter($self, $obj) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $obj_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $key=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$obj_addr]=$obj;
        var $1=HEAP[$self_addr]; //@line 918 "cPickle.c"
        var $2=(($1+64)&4294967295); //@line 918 "cPickle.c"
        var $3=HEAP[$2]; //@line 918 "cPickle.c"
        var $4=((($3) + 1)&4294967295); //@line 918 "cPickle.c"
        var $5=HEAP[$self_addr]; //@line 918 "cPickle.c"
        var $6=(($5+64)&4294967295); //@line 918 "cPickle.c"
        HEAP[$6]=$4; //@line 918 "cPickle.c"
        var $7=HEAP[$self_addr]; //@line 918 "cPickle.c"
        var $8=(($7+64)&4294967295); //@line 918 "cPickle.c"
        var $9=HEAP[$8]; //@line 918 "cPickle.c"
        var $10=((($9))|0) > 49; //@line 918 "cPickle.c"
        if ($10) { __label__ = 1; break; } else { __label__ = 16; break; } //@line 918 "cPickle.c"
      case 1: // $bb
        HEAP[$key]=0; //@line 919 "cPickle.c"
        var $11=HEAP[$self_addr]; //@line 920 "cPickle.c"
        var $12=(($11+68)&4294967295); //@line 920 "cPickle.c"
        var $13=HEAP[$12]; //@line 920 "cPickle.c"
        var $14=($13)==0; //@line 920 "cPickle.c"
        if ($14) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 920 "cPickle.c"
      case 2: // $bb1
        var $15=_PyDict_New(); //@line 921 "cPickle.c"
        var $16=HEAP[$self_addr]; //@line 921 "cPickle.c"
        var $17=(($16+68)&4294967295); //@line 921 "cPickle.c"
        HEAP[$17]=$15; //@line 921 "cPickle.c"
        var $18=HEAP[$self_addr]; //@line 922 "cPickle.c"
        var $19=(($18+68)&4294967295); //@line 922 "cPickle.c"
        var $20=HEAP[$19]; //@line 922 "cPickle.c"
        var $21=($20)==0; //@line 922 "cPickle.c"
        if ($21) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 922 "cPickle.c"
      case 3: // $bb2
        var $22=HEAP[$self_addr]; //@line 923 "cPickle.c"
        var $23=(($22+64)&4294967295); //@line 923 "cPickle.c"
        HEAP[$23]=-1; //@line 923 "cPickle.c"
        HEAP[$0]=0; //@line 924 "cPickle.c"
        __label__ = 17; break; //@line 924 "cPickle.c"
      case 4: // $bb3
        var $24=HEAP[$obj_addr]; //@line 927 "cPickle.c"
        var $25=$24; //@line 927 "cPickle.c"
        var $26=_PyLong_FromVoidPtr($25); //@line 927 "cPickle.c"
        HEAP[$key]=$26; //@line 927 "cPickle.c"
        var $27=HEAP[$key]; //@line 928 "cPickle.c"
        var $28=($27)==0; //@line 928 "cPickle.c"
        if ($28) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 928 "cPickle.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 929 "cPickle.c"
        __label__ = 17; break; //@line 929 "cPickle.c"
      case 6: // $bb5
        var $29=HEAP[$self_addr]; //@line 930 "cPickle.c"
        var $30=(($29+68)&4294967295); //@line 930 "cPickle.c"
        var $31=HEAP[$30]; //@line 930 "cPickle.c"
        var $32=HEAP[$key]; //@line 930 "cPickle.c"
        var $33=_PyDict_GetItem($31, $32); //@line 930 "cPickle.c"
        var $34=($33)!=0; //@line 930 "cPickle.c"
        if ($34) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 930 "cPickle.c"
      case 7: // $bb6
        var $35=HEAP[$key]; //@line 931 "cPickle.c"
        var $36=(($35)&4294967295); //@line 931 "cPickle.c"
        var $37=HEAP[$36]; //@line 931 "cPickle.c"
        var $38=((($37) - 1)&4294967295); //@line 931 "cPickle.c"
        var $39=HEAP[$key]; //@line 931 "cPickle.c"
        var $40=(($39)&4294967295); //@line 931 "cPickle.c"
        HEAP[$40]=$38; //@line 931 "cPickle.c"
        var $41=HEAP[$key]; //@line 931 "cPickle.c"
        var $42=(($41)&4294967295); //@line 931 "cPickle.c"
        var $43=HEAP[$42]; //@line 931 "cPickle.c"
        var $44=((($43))|0)==0; //@line 931 "cPickle.c"
        if ($44) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 931 "cPickle.c"
      case 8: // $bb7
        var $45=HEAP[$key]; //@line 931 "cPickle.c"
        var $46=(($45+4)&4294967295); //@line 931 "cPickle.c"
        var $47=HEAP[$46]; //@line 931 "cPickle.c"
        var $48=(($47+24)&4294967295); //@line 931 "cPickle.c"
        var $49=HEAP[$48]; //@line 931 "cPickle.c"
        var $50=HEAP[$key]; //@line 931 "cPickle.c"
        FUNCTION_TABLE[$49]($50); //@line 931 "cPickle.c"
        __label__ = 9; break; //@line 931 "cPickle.c"
      case 9: // $bb8
        var $51=HEAP[$obj_addr]; //@line 932 "cPickle.c"
        var $52=(($51+4)&4294967295); //@line 932 "cPickle.c"
        var $53=HEAP[$52]; //@line 932 "cPickle.c"
        var $54=(($53+12)&4294967295); //@line 932 "cPickle.c"
        var $55=HEAP[$54]; //@line 932 "cPickle.c"
        var $56=HEAP[_PyExc_ValueError]; //@line 932 "cPickle.c"
        var $57=HEAP[$obj_addr]; //@line 932 "cPickle.c"
        var $58=_PyErr_Format($56, ((__str8)&4294967295), $55, $57); //@line 932 "cPickle.c"
        var $59=HEAP[$self_addr]; //@line 936 "cPickle.c"
        var $60=(($59+64)&4294967295); //@line 936 "cPickle.c"
        HEAP[$60]=-1; //@line 936 "cPickle.c"
        HEAP[$0]=0; //@line 937 "cPickle.c"
        __label__ = 17; break; //@line 937 "cPickle.c"
      case 10: // $bb9
        var $61=HEAP[$self_addr]; //@line 939 "cPickle.c"
        var $62=(($61+68)&4294967295); //@line 939 "cPickle.c"
        var $63=HEAP[$62]; //@line 939 "cPickle.c"
        var $64=HEAP[$key]; //@line 939 "cPickle.c"
        var $65=_PyDict_SetItem($63, $64, __Py_NoneStruct); //@line 939 "cPickle.c"
        var $66=((($65))|0) < 0; //@line 939 "cPickle.c"
        if ($66) { __label__ = 11; break; } else { __label__ = 14; break; } //@line 939 "cPickle.c"
      case 11: // $bb10
        var $67=HEAP[$key]; //@line 940 "cPickle.c"
        var $68=(($67)&4294967295); //@line 940 "cPickle.c"
        var $69=HEAP[$68]; //@line 940 "cPickle.c"
        var $70=((($69) - 1)&4294967295); //@line 940 "cPickle.c"
        var $71=HEAP[$key]; //@line 940 "cPickle.c"
        var $72=(($71)&4294967295); //@line 940 "cPickle.c"
        HEAP[$72]=$70; //@line 940 "cPickle.c"
        var $73=HEAP[$key]; //@line 940 "cPickle.c"
        var $74=(($73)&4294967295); //@line 940 "cPickle.c"
        var $75=HEAP[$74]; //@line 940 "cPickle.c"
        var $76=((($75))|0)==0; //@line 940 "cPickle.c"
        if ($76) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 940 "cPickle.c"
      case 12: // $bb11
        var $77=HEAP[$key]; //@line 940 "cPickle.c"
        var $78=(($77+4)&4294967295); //@line 940 "cPickle.c"
        var $79=HEAP[$78]; //@line 940 "cPickle.c"
        var $80=(($79+24)&4294967295); //@line 940 "cPickle.c"
        var $81=HEAP[$80]; //@line 940 "cPickle.c"
        var $82=HEAP[$key]; //@line 940 "cPickle.c"
        FUNCTION_TABLE[$81]($82); //@line 940 "cPickle.c"
        __label__ = 13; break; //@line 940 "cPickle.c"
      case 13: // $bb12
        var $83=HEAP[$self_addr]; //@line 941 "cPickle.c"
        var $84=(($83+64)&4294967295); //@line 941 "cPickle.c"
        HEAP[$84]=-1; //@line 941 "cPickle.c"
        HEAP[$0]=0; //@line 942 "cPickle.c"
        __label__ = 17; break; //@line 942 "cPickle.c"
      case 14: // $bb13
        var $85=HEAP[$key]; //@line 944 "cPickle.c"
        var $86=(($85)&4294967295); //@line 944 "cPickle.c"
        var $87=HEAP[$86]; //@line 944 "cPickle.c"
        var $88=((($87) - 1)&4294967295); //@line 944 "cPickle.c"
        var $89=HEAP[$key]; //@line 944 "cPickle.c"
        var $90=(($89)&4294967295); //@line 944 "cPickle.c"
        HEAP[$90]=$88; //@line 944 "cPickle.c"
        var $91=HEAP[$key]; //@line 944 "cPickle.c"
        var $92=(($91)&4294967295); //@line 944 "cPickle.c"
        var $93=HEAP[$92]; //@line 944 "cPickle.c"
        var $94=((($93))|0)==0; //@line 944 "cPickle.c"
        if ($94) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 944 "cPickle.c"
      case 15: // $bb14
        var $95=HEAP[$key]; //@line 944 "cPickle.c"
        var $96=(($95+4)&4294967295); //@line 944 "cPickle.c"
        var $97=HEAP[$96]; //@line 944 "cPickle.c"
        var $98=(($97+24)&4294967295); //@line 944 "cPickle.c"
        var $99=HEAP[$98]; //@line 944 "cPickle.c"
        var $100=HEAP[$key]; //@line 944 "cPickle.c"
        FUNCTION_TABLE[$99]($100); //@line 944 "cPickle.c"
        __label__ = 16; break; //@line 944 "cPickle.c"
      case 16: // $bb15
        HEAP[$0]=1; //@line 946 "cPickle.c"
        __label__ = 17; break; //@line 946 "cPickle.c"
      case 17: // $bb16
        var $101=HEAP[$0]; //@line 924 "cPickle.c"
        HEAP[$retval]=$101; //@line 924 "cPickle.c"
        __label__ = 18; break; //@line 924 "cPickle.c"
      case 18: // $return
        var $retval17=HEAP[$retval]; //@line 924 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval17; //@line 924 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fast_save_leave($self, $obj) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $obj_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $key=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$obj_addr]=$obj;
        var $1=HEAP[$self_addr]; //@line 952 "cPickle.c"
        var $2=(($1+64)&4294967295); //@line 952 "cPickle.c"
        var $3=HEAP[$2]; //@line 952 "cPickle.c"
        var $4=((($3))|0) > 49; //@line 952 "cPickle.c"
        var $5=unSign(($4), 1, 0); //@line 952 "cPickle.c"
        var $6=((($3) - 1)&4294967295); //@line 952 "cPickle.c"
        var $7=HEAP[$self_addr]; //@line 952 "cPickle.c"
        var $8=(($7+64)&4294967295); //@line 952 "cPickle.c"
        HEAP[$8]=$6; //@line 952 "cPickle.c"
        var $toBool=reSign(($5), 8, 0)!=0; //@line 952 "cPickle.c"
        if ($toBool) { __label__ = 1; break; } else { __label__ = 9; break; } //@line 952 "cPickle.c"
      case 1: // $bb
        var $9=HEAP[$obj_addr]; //@line 953 "cPickle.c"
        var $10=$9; //@line 953 "cPickle.c"
        var $11=_PyLong_FromVoidPtr($10); //@line 953 "cPickle.c"
        HEAP[$key]=$11; //@line 953 "cPickle.c"
        var $12=HEAP[$key]; //@line 954 "cPickle.c"
        var $13=($12)==0; //@line 954 "cPickle.c"
        if ($13) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 954 "cPickle.c"
      case 2: // $bb1
        HEAP[$0]=0; //@line 955 "cPickle.c"
        __label__ = 10; break; //@line 955 "cPickle.c"
      case 3: // $bb2
        var $14=HEAP[$self_addr]; //@line 956 "cPickle.c"
        var $15=(($14+68)&4294967295); //@line 956 "cPickle.c"
        var $16=HEAP[$15]; //@line 956 "cPickle.c"
        var $17=HEAP[$key]; //@line 956 "cPickle.c"
        var $18=_PyDict_DelItem($16, $17); //@line 956 "cPickle.c"
        var $19=((($18))|0) < 0; //@line 956 "cPickle.c"
        if ($19) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 956 "cPickle.c"
      case 4: // $bb3
        var $20=HEAP[$key]; //@line 957 "cPickle.c"
        var $21=(($20)&4294967295); //@line 957 "cPickle.c"
        var $22=HEAP[$21]; //@line 957 "cPickle.c"
        var $23=((($22) - 1)&4294967295); //@line 957 "cPickle.c"
        var $24=HEAP[$key]; //@line 957 "cPickle.c"
        var $25=(($24)&4294967295); //@line 957 "cPickle.c"
        HEAP[$25]=$23; //@line 957 "cPickle.c"
        var $26=HEAP[$key]; //@line 957 "cPickle.c"
        var $27=(($26)&4294967295); //@line 957 "cPickle.c"
        var $28=HEAP[$27]; //@line 957 "cPickle.c"
        var $29=((($28))|0)==0; //@line 957 "cPickle.c"
        if ($29) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 957 "cPickle.c"
      case 5: // $bb4
        var $30=HEAP[$key]; //@line 957 "cPickle.c"
        var $31=(($30+4)&4294967295); //@line 957 "cPickle.c"
        var $32=HEAP[$31]; //@line 957 "cPickle.c"
        var $33=(($32+24)&4294967295); //@line 957 "cPickle.c"
        var $34=HEAP[$33]; //@line 957 "cPickle.c"
        var $35=HEAP[$key]; //@line 957 "cPickle.c"
        FUNCTION_TABLE[$34]($35); //@line 957 "cPickle.c"
        __label__ = 6; break; //@line 957 "cPickle.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 958 "cPickle.c"
        __label__ = 10; break; //@line 958 "cPickle.c"
      case 7: // $bb6
        var $36=HEAP[$key]; //@line 960 "cPickle.c"
        var $37=(($36)&4294967295); //@line 960 "cPickle.c"
        var $38=HEAP[$37]; //@line 960 "cPickle.c"
        var $39=((($38) - 1)&4294967295); //@line 960 "cPickle.c"
        var $40=HEAP[$key]; //@line 960 "cPickle.c"
        var $41=(($40)&4294967295); //@line 960 "cPickle.c"
        HEAP[$41]=$39; //@line 960 "cPickle.c"
        var $42=HEAP[$key]; //@line 960 "cPickle.c"
        var $43=(($42)&4294967295); //@line 960 "cPickle.c"
        var $44=HEAP[$43]; //@line 960 "cPickle.c"
        var $45=((($44))|0)==0; //@line 960 "cPickle.c"
        if ($45) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 960 "cPickle.c"
      case 8: // $bb7
        var $46=HEAP[$key]; //@line 960 "cPickle.c"
        var $47=(($46+4)&4294967295); //@line 960 "cPickle.c"
        var $48=HEAP[$47]; //@line 960 "cPickle.c"
        var $49=(($48+24)&4294967295); //@line 960 "cPickle.c"
        var $50=HEAP[$49]; //@line 960 "cPickle.c"
        var $51=HEAP[$key]; //@line 960 "cPickle.c"
        FUNCTION_TABLE[$50]($51); //@line 960 "cPickle.c"
        __label__ = 9; break; //@line 960 "cPickle.c"
      case 9: // $bb8
        HEAP[$0]=1; //@line 962 "cPickle.c"
        __label__ = 10; break; //@line 962 "cPickle.c"
      case 10: // $bb9
        var $52=HEAP[$0]; //@line 955 "cPickle.c"
        HEAP[$retval]=$52; //@line 955 "cPickle.c"
        __label__ = 11; break; //@line 955 "cPickle.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 955 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 955 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_none($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 969 "cPickle.c"
        var $2=(($1+48)&4294967295); //@line 969 "cPickle.c"
        var $3=HEAP[$2]; //@line 969 "cPickle.c"
        var $4=HEAP[$self_addr]; //@line 969 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, _none_9451, 1); //@line 969 "cPickle.c"
        var $6=((($5))|0) < 0; //@line 969 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 969 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 970 "cPickle.c"
        __label__ = 3; break; //@line 970 "cPickle.c"
      case 2: // $bb1
        HEAP[$0]=0; //@line 972 "cPickle.c"
        __label__ = 3; break; //@line 972 "cPickle.c"
      case 3: // $bb2
        var $7=HEAP[$0]; //@line 970 "cPickle.c"
        HEAP[$retval]=$7; //@line 970 "cPickle.c"
        __label__ = 4; break; //@line 970 "cPickle.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 970 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 970 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_bool($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 22; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 22);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $iftmp_52=__stackBase__+16;
        var $l=__stackBase__+17;
        var $opcode=__stackBase__+21;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$args_addr]; //@line 980 "cPickle.c"
        var $2=$1; //@line 980 "cPickle.c"
        var $3=(($2+8)&4294967295); //@line 980 "cPickle.c"
        var $4=HEAP[$3]; //@line 980 "cPickle.c"
        HEAP[$l]=$4; //@line 980 "cPickle.c"
        var $5=HEAP[$self_addr]; //@line 982 "cPickle.c"
        var $6=(($5+36)&4294967295); //@line 982 "cPickle.c"
        var $7=HEAP[$6]; //@line 982 "cPickle.c"
        var $8=((($7))|0) > 1; //@line 982 "cPickle.c"
        if ($8) { __label__ = 1; break; } else { __label__ = 7; break; } //@line 982 "cPickle.c"
      case 1: // $bb
        var $9=HEAP[$l]; //@line 983 "cPickle.c"
        var $10=((($9))|0)!=0; //@line 983 "cPickle.c"
        if ($10) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 983 "cPickle.c"
      case 2: // $bb1
        HEAP[$iftmp_52]=-120; //@line 983 "cPickle.c"
        __label__ = 4; break; //@line 983 "cPickle.c"
      case 3: // $bb2
        HEAP[$iftmp_52]=-119; //@line 983 "cPickle.c"
        __label__ = 4; break; //@line 983 "cPickle.c"
      case 4: // $bb3
        var $11=HEAP[$iftmp_52]; //@line 983 "cPickle.c"
        HEAP[$opcode]=$11; //@line 983 "cPickle.c"
        var $12=HEAP[$self_addr]; //@line 984 "cPickle.c"
        var $13=(($12+48)&4294967295); //@line 984 "cPickle.c"
        var $14=HEAP[$13]; //@line 984 "cPickle.c"
        var $15=HEAP[$self_addr]; //@line 984 "cPickle.c"
        var $16=FUNCTION_TABLE[$14]($15, $opcode, 1); //@line 984 "cPickle.c"
        var $17=((($16))|0) < 0; //@line 984 "cPickle.c"
        if ($17) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 984 "cPickle.c"
      case 5: // $bb4
        HEAP[$0]=-1; //@line 985 "cPickle.c"
        __label__ = 10; break; //@line 985 "cPickle.c"
      case 6: // $bb5
        __label__ = 9; break; //@line 985 "cPickle.c"
      case 7: // $bb6
        var $18=HEAP[$self_addr]; //@line 987 "cPickle.c"
        var $19=(($18+48)&4294967295); //@line 987 "cPickle.c"
        var $20=HEAP[$19]; //@line 987 "cPickle.c"
        var $21=HEAP[$l]; //@line 987 "cPickle.c"
        var $22=((_len_9463+$21)&4294967295); //@line 987 "cPickle.c"
        var $23=HEAP[$22]; //@line 987 "cPickle.c"
        var $24=reSign(($23), 8, 0); //@line 987 "cPickle.c"
        var $25=HEAP[$l]; //@line 987 "cPickle.c"
        var $26=((_buf_9462+$25*4)&4294967295); //@line 987 "cPickle.c"
        var $27=HEAP[$26]; //@line 987 "cPickle.c"
        var $28=HEAP[$self_addr]; //@line 987 "cPickle.c"
        var $29=FUNCTION_TABLE[$20]($28, $27, $24); //@line 987 "cPickle.c"
        var $30=((($29))|0) < 0; //@line 987 "cPickle.c"
        if ($30) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 987 "cPickle.c"
      case 8: // $bb7
        HEAP[$0]=-1; //@line 988 "cPickle.c"
        __label__ = 10; break; //@line 988 "cPickle.c"
      case 9: // $bb8
        HEAP[$0]=0; //@line 989 "cPickle.c"
        __label__ = 10; break; //@line 989 "cPickle.c"
      case 10: // $bb9
        var $31=HEAP[$0]; //@line 985 "cPickle.c"
        HEAP[$retval]=$31; //@line 985 "cPickle.c"
        __label__ = 11; break; //@line 985 "cPickle.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 985 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 985 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_int($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 56; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 56);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $c_str=__stackBase__+16;
        var $l=__stackBase__+48;
        var $len=__stackBase__+52;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$args_addr]; //@line 996 "cPickle.c"
        var $2=$1; //@line 996 "cPickle.c"
        var $3=(($2+8)&4294967295); //@line 996 "cPickle.c"
        var $4=HEAP[$3]; //@line 996 "cPickle.c"
        HEAP[$l]=$4; //@line 996 "cPickle.c"
        HEAP[$len]=0; //@line 997 "cPickle.c"
        var $5=HEAP[$self_addr]; //@line 999 "cPickle.c"
        var $6=(($5+40)&4294967295); //@line 999 "cPickle.c"
        var $7=HEAP[$6]; //@line 999 "cPickle.c"
        var $8=((($7))|0)==0; //@line 999 "cPickle.c"
        if ($8) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 999 "cPickle.c"
      case 1: // $bb
        var $9=(($c_str)&4294967295); //@line 1008 "cPickle.c"
        HEAP[$9]=73; //@line 1008 "cPickle.c"
        var $c_str1=$c_str; //@line 1009 "cPickle.c"
        var $10=(($c_str1+1)&4294967295); //@line 1009 "cPickle.c"
        var $11=HEAP[$l]; //@line 1009 "cPickle.c"
        var $12=_PyOS_snprintf($10, 31, ((__str4)&4294967295), $11); //@line 1009 "cPickle.c"
        var $13=HEAP[$self_addr]; //@line 1010 "cPickle.c"
        var $14=(($13+48)&4294967295); //@line 1010 "cPickle.c"
        var $15=HEAP[$14]; //@line 1010 "cPickle.c"
        var $c_str2=$c_str; //@line 1010 "cPickle.c"
        var $16=_strlen($c_str2); //@line 1010 "cPickle.c"
        var $17=HEAP[$self_addr]; //@line 1010 "cPickle.c"
        var $c_str3=$c_str; //@line 1010 "cPickle.c"
        var $18=FUNCTION_TABLE[$15]($17, $c_str3, $16); //@line 1010 "cPickle.c"
        var $19=((($18))|0) < 0; //@line 1010 "cPickle.c"
        if ($19) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1010 "cPickle.c"
      case 2: // $bb4
        HEAP[$0]=-1; //@line 1011 "cPickle.c"
        __label__ = 14; break; //@line 1011 "cPickle.c"
      case 3: // $bb5
        __label__ = 13; break; //@line 1011 "cPickle.c"
      case 4: // $bb6
        var $20=HEAP[$l]; //@line 1015 "cPickle.c"
        var $21=((($20)) & 255); //@line 1015 "cPickle.c"
        var $22=(($c_str+1)&4294967295); //@line 1015 "cPickle.c"
        HEAP[$22]=$21; //@line 1015 "cPickle.c"
        var $23=HEAP[$l]; //@line 1016 "cPickle.c"
        var $24=((($23))|0) >> 8; //@line 1016 "cPickle.c"
        var $25=((($24)) & 255); //@line 1016 "cPickle.c"
        var $26=(($c_str+2)&4294967295); //@line 1016 "cPickle.c"
        HEAP[$26]=$25; //@line 1016 "cPickle.c"
        var $27=HEAP[$l]; //@line 1017 "cPickle.c"
        var $28=((($27))|0) >> 16; //@line 1017 "cPickle.c"
        var $29=((($28)) & 255); //@line 1017 "cPickle.c"
        var $30=(($c_str+3)&4294967295); //@line 1017 "cPickle.c"
        HEAP[$30]=$29; //@line 1017 "cPickle.c"
        var $31=HEAP[$l]; //@line 1018 "cPickle.c"
        var $32=((($31))|0) >> 24; //@line 1018 "cPickle.c"
        var $33=((($32)) & 255); //@line 1018 "cPickle.c"
        var $34=(($c_str+4)&4294967295); //@line 1018 "cPickle.c"
        HEAP[$34]=$33; //@line 1018 "cPickle.c"
        var $35=(($c_str+4)&4294967295); //@line 1020 "cPickle.c"
        var $36=HEAP[$35]; //@line 1020 "cPickle.c"
        var $37=reSign(($36), 8, 0)!=0; //@line 1020 "cPickle.c"
        if ($37) { __label__ = 10; break; } else { __label__ = 5; break; } //@line 1020 "cPickle.c"
      case 5: // $bb7
        var $38=(($c_str+3)&4294967295); //@line 1020 "cPickle.c"
        var $39=HEAP[$38]; //@line 1020 "cPickle.c"
        var $40=reSign(($39), 8, 0)!=0; //@line 1020 "cPickle.c"
        if ($40) { __label__ = 10; break; } else { __label__ = 6; break; } //@line 1020 "cPickle.c"
      case 6: // $bb8
        var $41=(($c_str+2)&4294967295); //@line 1021 "cPickle.c"
        var $42=HEAP[$41]; //@line 1021 "cPickle.c"
        var $43=reSign(($42), 8, 0)==0; //@line 1021 "cPickle.c"
        if ($43) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1021 "cPickle.c"
      case 7: // $bb9
        var $44=(($c_str)&4294967295); //@line 1022 "cPickle.c"
        HEAP[$44]=75; //@line 1022 "cPickle.c"
        HEAP[$len]=2; //@line 1023 "cPickle.c"
        __label__ = 9; break; //@line 1023 "cPickle.c"
      case 8: // $bb10
        var $45=(($c_str)&4294967295); //@line 1026 "cPickle.c"
        HEAP[$45]=77; //@line 1026 "cPickle.c"
        HEAP[$len]=3; //@line 1027 "cPickle.c"
        __label__ = 9; break; //@line 1027 "cPickle.c"
      case 9: // $bb11
        __label__ = 11; break; //@line 1027 "cPickle.c"
      case 10: // $bb12
        var $46=(($c_str)&4294967295); //@line 1031 "cPickle.c"
        HEAP[$46]=74; //@line 1031 "cPickle.c"
        HEAP[$len]=5; //@line 1032 "cPickle.c"
        __label__ = 11; break; //@line 1032 "cPickle.c"
      case 11: // $bb13
        var $47=HEAP[$self_addr]; //@line 1035 "cPickle.c"
        var $48=(($47+48)&4294967295); //@line 1035 "cPickle.c"
        var $49=HEAP[$48]; //@line 1035 "cPickle.c"
        var $50=HEAP[$self_addr]; //@line 1035 "cPickle.c"
        var $c_str14=$c_str; //@line 1035 "cPickle.c"
        var $51=HEAP[$len]; //@line 1035 "cPickle.c"
        var $52=FUNCTION_TABLE[$49]($50, $c_str14, $51); //@line 1035 "cPickle.c"
        var $53=((($52))|0) < 0; //@line 1035 "cPickle.c"
        if ($53) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1035 "cPickle.c"
      case 12: // $bb15
        HEAP[$0]=-1; //@line 1036 "cPickle.c"
        __label__ = 14; break; //@line 1036 "cPickle.c"
      case 13: // $bb16
        HEAP[$0]=0; //@line 1039 "cPickle.c"
        __label__ = 14; break; //@line 1039 "cPickle.c"
      case 14: // $bb17
        var $54=HEAP[$0]; //@line 1011 "cPickle.c"
        HEAP[$retval]=$54; //@line 1011 "cPickle.c"
        __label__ = 15; break; //@line 1011 "cPickle.c"
      case 15: // $return
        var $retval18=HEAP[$retval]; //@line 1011 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval18; //@line 1011 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_long($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 53; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 53);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $size=__stackBase__+16;
        var $res=__stackBase__+20;
        var $repr=__stackBase__+24;
        var $nbits=__stackBase__+28;
        var $nbytes=__stackBase__+32;
        var $pdata=__stackBase__+36;
        var $c_str=__stackBase__+40;
        var $i=__stackBase__+45;
        var $sign=__stackBase__+49;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$res]=-1; //@line 1047 "cPickle.c"
        HEAP[$repr]=0; //@line 1048 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 1052 "cPickle.c"
        var $2=(($1+36)&4294967295); //@line 1052 "cPickle.c"
        var $3=HEAP[$2]; //@line 1052 "cPickle.c"
        var $4=((($3))|0) > 1; //@line 1052 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 24; break; } //@line 1052 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[$args_addr]; //@line 1059 "cPickle.c"
        var $6=__PyLong_Sign($5); //@line 1059 "cPickle.c"
        HEAP[$sign]=$6; //@line 1059 "cPickle.c"
        var $7=HEAP[$sign]; //@line 1061 "cPickle.c"
        var $8=((($7))|0)==0; //@line 1061 "cPickle.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 1061 "cPickle.c"
      case 2: // $bb1
        var $9=(($c_str)&4294967295); //@line 1063 "cPickle.c"
        HEAP[$9]=-118; //@line 1063 "cPickle.c"
        var $10=(($c_str+1)&4294967295); //@line 1064 "cPickle.c"
        HEAP[$10]=0; //@line 1064 "cPickle.c"
        var $11=HEAP[$self_addr]; //@line 1065 "cPickle.c"
        var $12=(($11+48)&4294967295); //@line 1065 "cPickle.c"
        var $13=HEAP[$12]; //@line 1065 "cPickle.c"
        var $14=HEAP[$self_addr]; //@line 1065 "cPickle.c"
        var $c_str2=$c_str; //@line 1065 "cPickle.c"
        var $15=FUNCTION_TABLE[$13]($14, $c_str2, 2); //@line 1065 "cPickle.c"
        HEAP[$i]=$15; //@line 1065 "cPickle.c"
        var $16=HEAP[$i]; //@line 1066 "cPickle.c"
        var $17=((($16))|0) < 0; //@line 1066 "cPickle.c"
        if ($17) { __label__ = 30; break; } else { __label__ = 3; break; } //@line 1066 "cPickle.c"
      case 3: // $bb3
        HEAP[$res]=0; //@line 1067 "cPickle.c"
        __label__ = 30; break; //@line 1067 "cPickle.c"
      case 4: // $bb4
        var $18=HEAP[$args_addr]; //@line 1070 "cPickle.c"
        var $19=__PyLong_NumBits($18); //@line 1070 "cPickle.c"
        HEAP[$nbits]=$19; //@line 1070 "cPickle.c"
        var $20=HEAP[$nbits]; //@line 1071 "cPickle.c"
        var $21=((($20))|0)==-1; //@line 1071 "cPickle.c"
        if ($21) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1071 "cPickle.c"
      case 5: // $bb5
        var $22=_PyErr_Occurred(); //@line 1071 "cPickle.c"
        var $23=($22)!=0; //@line 1071 "cPickle.c"
        if ($23) { __label__ = 30; break; } else { __label__ = 6; break; } //@line 1071 "cPickle.c"
      case 6: // $bb6
        var $24=HEAP[$nbits]; //@line 1087 "cPickle.c"
        var $25=((($24))>>>0) >>> 3; //@line 1087 "cPickle.c"
        var $26=((($25) + 1)&4294967295); //@line 1087 "cPickle.c"
        HEAP[$nbytes]=$26; //@line 1087 "cPickle.c"
        var $27=HEAP[$nbytes]; //@line 1088 "cPickle.c"
        var $28=((($27))|0) < 0; //@line 1088 "cPickle.c"
        if ($28) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1088 "cPickle.c"
      case 7: // $bb7
        var $29=HEAP[_PyExc_OverflowError]; //@line 1089 "cPickle.c"
        _PyErr_SetString($29, ((__str11)&4294967295)); //@line 1089 "cPickle.c"
        __label__ = 30; break; //@line 1089 "cPickle.c"
      case 8: // $bb8
        var $30=HEAP[$nbytes]; //@line 1093 "cPickle.c"
        var $31=_PyString_FromStringAndSize(0, $30); //@line 1093 "cPickle.c"
        HEAP[$repr]=$31; //@line 1093 "cPickle.c"
        var $32=HEAP[$repr]; //@line 1094 "cPickle.c"
        var $33=($32)==0; //@line 1094 "cPickle.c"
        if ($33) { __label__ = 30; break; } else { __label__ = 9; break; } //@line 1094 "cPickle.c"
      case 9: // $bb9
        var $34=HEAP[$repr]; //@line 1095 "cPickle.c"
        var $35=$34; //@line 1095 "cPickle.c"
        var $36=(($35+20)&4294967295); //@line 1095 "cPickle.c"
        var $37=$36; //@line 1095 "cPickle.c"
        HEAP[$pdata]=$37; //@line 1095 "cPickle.c"
        var $38=HEAP[$args_addr]; //@line 1096 "cPickle.c"
        var $39=$38; //@line 1096 "cPickle.c"
        var $40=HEAP[$pdata]; //@line 1096 "cPickle.c"
        var $41=HEAP[$nbytes]; //@line 1096 "cPickle.c"
        var $42=__PyLong_AsByteArray($39, $40, $41, 1, 1); //@line 1096 "cPickle.c"
        HEAP[$i]=$42; //@line 1096 "cPickle.c"
        var $43=HEAP[$i]; //@line 1099 "cPickle.c"
        var $44=((($43))|0) < 0; //@line 1099 "cPickle.c"
        if ($44) { __label__ = 30; break; } else { __label__ = 10; break; } //@line 1099 "cPickle.c"
      case 10: // $bb10
        var $45=HEAP[$sign]; //@line 1104 "cPickle.c"
        var $46=((($45))|0) < 0; //@line 1104 "cPickle.c"
        if ($46) { __label__ = 11; break; } else { __label__ = 15; break; } //@line 1104 "cPickle.c"
      case 11: // $bb11
        var $47=HEAP[$nbytes]; //@line 1104 "cPickle.c"
        var $48=((($47))>>>0) > 1; //@line 1104 "cPickle.c"
        if ($48) { __label__ = 12; break; } else { __label__ = 15; break; } //@line 1104 "cPickle.c"
      case 12: // $bb12
        var $49=HEAP[$nbytes]; //@line 1104 "cPickle.c"
        var $50=((($49) - 1)&4294967295); //@line 1104 "cPickle.c"
        var $51=HEAP[$pdata]; //@line 1104 "cPickle.c"
        var $52=(($51+$50)&4294967295); //@line 1104 "cPickle.c"
        var $53=HEAP[$52]; //@line 1104 "cPickle.c"
        var $54=reSign(($53), 8, 0)==-1; //@line 1104 "cPickle.c"
        if ($54) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 1104 "cPickle.c"
      case 13: // $bb13
        var $55=HEAP[$nbytes]; //@line 1104 "cPickle.c"
        var $56=((($55) - 2)&4294967295); //@line 1104 "cPickle.c"
        var $57=HEAP[$pdata]; //@line 1104 "cPickle.c"
        var $58=(($57+$56)&4294967295); //@line 1104 "cPickle.c"
        var $59=HEAP[$58]; //@line 1104 "cPickle.c"
        var $60=reSign(($59), 8, 0) < 0; //@line 1104 "cPickle.c"
        if ($60) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1104 "cPickle.c"
      case 14: // $bb14
        var $61=HEAP[$nbytes]; //@line 1106 "cPickle.c"
        var $62=((($61) - 1)&4294967295); //@line 1106 "cPickle.c"
        HEAP[$nbytes]=$62; //@line 1106 "cPickle.c"
        __label__ = 15; break; //@line 1106 "cPickle.c"
      case 15: // $bb15
        var $63=HEAP[$nbytes]; //@line 1108 "cPickle.c"
        var $64=((($63))>>>0) <= 255; //@line 1108 "cPickle.c"
        if ($64) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 1108 "cPickle.c"
      case 16: // $bb16
        var $65=(($c_str)&4294967295); //@line 1109 "cPickle.c"
        HEAP[$65]=-118; //@line 1109 "cPickle.c"
        var $66=HEAP[$nbytes]; //@line 1110 "cPickle.c"
        var $67=((($66)) & 255); //@line 1110 "cPickle.c"
        var $68=(($c_str+1)&4294967295); //@line 1110 "cPickle.c"
        HEAP[$68]=$67; //@line 1110 "cPickle.c"
        HEAP[$size]=2; //@line 1111 "cPickle.c"
        __label__ = 21; break; //@line 1111 "cPickle.c"
      case 17: // $bb17
        var $69=(($c_str)&4294967295); //@line 1114 "cPickle.c"
        HEAP[$69]=-117; //@line 1114 "cPickle.c"
        var $70=HEAP[$nbytes]; //@line 1115 "cPickle.c"
        HEAP[$size]=$70; //@line 1115 "cPickle.c"
        HEAP[$i]=1; //@line 1116 "cPickle.c"
        __label__ = 19; break; //@line 1116 "cPickle.c"
      case 18: // $bb18
        var $71=HEAP[$i]; //@line 1117 "cPickle.c"
        var $72=HEAP[$size]; //@line 1117 "cPickle.c"
        var $73=((($72)) & 255); //@line 1117 "cPickle.c"
        var $74=(($c_str+$71)&4294967295); //@line 1117 "cPickle.c"
        HEAP[$74]=$73; //@line 1117 "cPickle.c"
        var $75=HEAP[$size]; //@line 1118 "cPickle.c"
        var $76=((($75))|0) >> 8; //@line 1118 "cPickle.c"
        HEAP[$size]=$76; //@line 1118 "cPickle.c"
        var $77=HEAP[$i]; //@line 1116 "cPickle.c"
        var $78=((($77) + 1)&4294967295); //@line 1116 "cPickle.c"
        HEAP[$i]=$78; //@line 1116 "cPickle.c"
        __label__ = 19; break; //@line 1116 "cPickle.c"
      case 19: // $bb19
        var $79=HEAP[$i]; //@line 1116 "cPickle.c"
        var $80=((($79))|0) <= 4; //@line 1116 "cPickle.c"
        if ($80) { __label__ = 18; break; } else { __label__ = 20; break; } //@line 1116 "cPickle.c"
      case 20: // $bb20
        HEAP[$size]=5; //@line 1120 "cPickle.c"
        __label__ = 21; break; //@line 1120 "cPickle.c"
      case 21: // $bb21
        var $81=HEAP[$self_addr]; //@line 1122 "cPickle.c"
        var $82=(($81+48)&4294967295); //@line 1122 "cPickle.c"
        var $83=HEAP[$82]; //@line 1122 "cPickle.c"
        var $84=HEAP[$self_addr]; //@line 1122 "cPickle.c"
        var $c_str22=$c_str; //@line 1122 "cPickle.c"
        var $85=HEAP[$size]; //@line 1122 "cPickle.c"
        var $86=FUNCTION_TABLE[$83]($84, $c_str22, $85); //@line 1122 "cPickle.c"
        HEAP[$i]=$86; //@line 1122 "cPickle.c"
        var $87=HEAP[$i]; //@line 1123 "cPickle.c"
        var $88=((($87))|0) < 0; //@line 1123 "cPickle.c"
        if ($88) { __label__ = 30; break; } else { __label__ = 22; break; } //@line 1123 "cPickle.c"
      case 22: // $bb23
        var $89=HEAP[$self_addr]; //@line 1124 "cPickle.c"
        var $90=(($89+48)&4294967295); //@line 1124 "cPickle.c"
        var $91=HEAP[$90]; //@line 1124 "cPickle.c"
        var $92=HEAP[$nbytes]; //@line 1124 "cPickle.c"
        var $93=HEAP[$pdata]; //@line 1124 "cPickle.c"
        var $94=HEAP[$self_addr]; //@line 1124 "cPickle.c"
        var $95=FUNCTION_TABLE[$91]($94, $93, $92); //@line 1124 "cPickle.c"
        HEAP[$i]=$95; //@line 1124 "cPickle.c"
        var $96=HEAP[$i]; //@line 1125 "cPickle.c"
        var $97=((($96))|0) < 0; //@line 1125 "cPickle.c"
        if ($97) { __label__ = 30; break; } else { __label__ = 23; break; } //@line 1125 "cPickle.c"
      case 23: // $bb24
        HEAP[$res]=0; //@line 1126 "cPickle.c"
        __label__ = 30; break; //@line 1126 "cPickle.c"
      case 24: // $bb25
        var $98=HEAP[$args_addr]; //@line 1133 "cPickle.c"
        var $99=_PyObject_Repr($98); //@line 1133 "cPickle.c"
        HEAP[$repr]=$99; //@line 1133 "cPickle.c"
        var $100=HEAP[$repr]; //@line 1133 "cPickle.c"
        var $101=($100)==0; //@line 1133 "cPickle.c"
        if ($101) { __label__ = 30; break; } else { __label__ = 25; break; } //@line 1133 "cPickle.c"
      case 25: // $bb26
        var $102=HEAP[$repr]; //@line 1136 "cPickle.c"
        var $103=_PyString_Size($102); //@line 1136 "cPickle.c"
        HEAP[$size]=$103; //@line 1136 "cPickle.c"
        var $104=HEAP[$size]; //@line 1136 "cPickle.c"
        var $105=((($104))|0) < 0; //@line 1136 "cPickle.c"
        if ($105) { __label__ = 30; break; } else { __label__ = 26; break; } //@line 1136 "cPickle.c"
      case 26: // $bb27
        var $106=HEAP[$self_addr]; //@line 1139 "cPickle.c"
        var $107=(($106+48)&4294967295); //@line 1139 "cPickle.c"
        var $108=HEAP[$107]; //@line 1139 "cPickle.c"
        var $109=HEAP[$self_addr]; //@line 1139 "cPickle.c"
        var $110=FUNCTION_TABLE[$108]($109, _l_9538, 1); //@line 1139 "cPickle.c"
        var $111=((($110))|0) < 0; //@line 1139 "cPickle.c"
        if ($111) { __label__ = 30; break; } else { __label__ = 27; break; } //@line 1139 "cPickle.c"
      case 27: // $bb28
        var $112=HEAP[$self_addr]; //@line 1142 "cPickle.c"
        var $113=(($112+48)&4294967295); //@line 1142 "cPickle.c"
        var $114=HEAP[$113]; //@line 1142 "cPickle.c"
        var $115=HEAP[$repr]; //@line 1142 "cPickle.c"
        var $116=$115; //@line 1142 "cPickle.c"
        var $117=(($116+20)&4294967295); //@line 1142 "cPickle.c"
        var $118=(($117)&4294967295); //@line 1142 "cPickle.c"
        var $119=HEAP[$self_addr]; //@line 1142 "cPickle.c"
        var $120=HEAP[$size]; //@line 1142 "cPickle.c"
        var $121=FUNCTION_TABLE[$114]($119, $118, $120); //@line 1142 "cPickle.c"
        var $122=((($121))|0) < 0; //@line 1142 "cPickle.c"
        if ($122) { __label__ = 30; break; } else { __label__ = 28; break; } //@line 1142 "cPickle.c"
      case 28: // $bb29
        var $123=HEAP[$self_addr]; //@line 1147 "cPickle.c"
        var $124=(($123+48)&4294967295); //@line 1147 "cPickle.c"
        var $125=HEAP[$124]; //@line 1147 "cPickle.c"
        var $126=HEAP[$self_addr]; //@line 1147 "cPickle.c"
        var $127=FUNCTION_TABLE[$125]($126, ((__str12)&4294967295), 1); //@line 1147 "cPickle.c"
        var $128=((($127))|0) < 0; //@line 1147 "cPickle.c"
        if ($128) { __label__ = 30; break; } else { __label__ = 29; break; } //@line 1147 "cPickle.c"
      case 29: // $bb30
        HEAP[$res]=0; //@line 1150 "cPickle.c"
        __label__ = 30; break; //@line 1152 "cPickle.c"
      case 30: // $finally
        var $129=HEAP[$repr]; //@line 1153 "cPickle.c"
        var $130=($129)!=0; //@line 1153 "cPickle.c"
        if ($130) { __label__ = 31; break; } else { __label__ = 33; break; } //@line 1153 "cPickle.c"
      case 31: // $bb31
        var $131=HEAP[$repr]; //@line 1153 "cPickle.c"
        var $132=(($131)&4294967295); //@line 1153 "cPickle.c"
        var $133=HEAP[$132]; //@line 1153 "cPickle.c"
        var $134=((($133) - 1)&4294967295); //@line 1153 "cPickle.c"
        var $135=HEAP[$repr]; //@line 1153 "cPickle.c"
        var $136=(($135)&4294967295); //@line 1153 "cPickle.c"
        HEAP[$136]=$134; //@line 1153 "cPickle.c"
        var $137=HEAP[$repr]; //@line 1153 "cPickle.c"
        var $138=(($137)&4294967295); //@line 1153 "cPickle.c"
        var $139=HEAP[$138]; //@line 1153 "cPickle.c"
        var $140=((($139))|0)==0; //@line 1153 "cPickle.c"
        if ($140) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 1153 "cPickle.c"
      case 32: // $bb32
        var $141=HEAP[$repr]; //@line 1153 "cPickle.c"
        var $142=(($141+4)&4294967295); //@line 1153 "cPickle.c"
        var $143=HEAP[$142]; //@line 1153 "cPickle.c"
        var $144=(($143+24)&4294967295); //@line 1153 "cPickle.c"
        var $145=HEAP[$144]; //@line 1153 "cPickle.c"
        var $146=HEAP[$repr]; //@line 1153 "cPickle.c"
        FUNCTION_TABLE[$145]($146); //@line 1153 "cPickle.c"
        __label__ = 33; break; //@line 1153 "cPickle.c"
      case 33: // $bb33
        var $147=HEAP[$res]; //@line 1154 "cPickle.c"
        HEAP[$0]=$147; //@line 1154 "cPickle.c"
        var $148=HEAP[$0]; //@line 1154 "cPickle.c"
        HEAP[$retval]=$148; //@line 1154 "cPickle.c"
        __label__ = 34; break; //@line 1154 "cPickle.c"
      case 34: // $return
        var $retval34=HEAP[$retval]; //@line 1154 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval34; //@line 1154 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_float($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 42; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 42);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $x=__stackBase__+16;
        var $str=__stackBase__+24;
        var $result=__stackBase__+33;
        var $buf=__stackBase__+37;
        var $op=__stackBase__+41;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$args_addr]; //@line 1161 "cPickle.c"
        var $2=$1; //@line 1161 "cPickle.c"
        var $3=(($2+8)&4294967295); //@line 1161 "cPickle.c"
        var $4=HEAP[$3]; //@line 1161 "cPickle.c"
        HEAP[$x]=$4; //@line 1161 "cPickle.c"
        var $5=HEAP[$self_addr]; //@line 1163 "cPickle.c"
        var $6=(($5+40)&4294967295); //@line 1163 "cPickle.c"
        var $7=HEAP[$6]; //@line 1163 "cPickle.c"
        var $8=((($7))|0)!=0; //@line 1163 "cPickle.c"
        if ($8) { __label__ = 1; break; } else { __label__ = 6; break; } //@line 1163 "cPickle.c"
      case 1: // $bb
        var $9=(($str)&4294967295); //@line 1165 "cPickle.c"
        HEAP[$9]=71; //@line 1165 "cPickle.c"
        var $10=(($str+1)&4294967295); //@line 1166 "cPickle.c"
        var $11=HEAP[$x]; //@line 1166 "cPickle.c"
        var $12=__PyFloat_Pack8($11, $10, 0); //@line 1166 "cPickle.c"
        var $13=((($12))|0) < 0; //@line 1166 "cPickle.c"
        if ($13) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1166 "cPickle.c"
      case 2: // $bb1
        HEAP[$0]=-1; //@line 1167 "cPickle.c"
        __label__ = 13; break; //@line 1167 "cPickle.c"
      case 3: // $bb2
        var $14=HEAP[$self_addr]; //@line 1168 "cPickle.c"
        var $15=(($14+48)&4294967295); //@line 1168 "cPickle.c"
        var $16=HEAP[$15]; //@line 1168 "cPickle.c"
        var $17=HEAP[$self_addr]; //@line 1168 "cPickle.c"
        var $str3=$str; //@line 1168 "cPickle.c"
        var $18=FUNCTION_TABLE[$16]($17, $str3, 9); //@line 1168 "cPickle.c"
        var $19=((($18))|0) < 0; //@line 1168 "cPickle.c"
        if ($19) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1168 "cPickle.c"
      case 4: // $bb4
        HEAP[$0]=-1; //@line 1169 "cPickle.c"
        __label__ = 13; break; //@line 1169 "cPickle.c"
      case 5: // $bb5
        HEAP[$0]=0; //@line 1197 "cPickle.c"
        __label__ = 13; break; //@line 1197 "cPickle.c"
      case 6: // $bb6
        HEAP[$result]=-1; //@line 1172 "cPickle.c"
        HEAP[$buf]=0; //@line 1173 "cPickle.c"
        HEAP[$op]=70; //@line 1174 "cPickle.c"
        var $20=HEAP[$self_addr]; //@line 1176 "cPickle.c"
        var $21=(($20+48)&4294967295); //@line 1176 "cPickle.c"
        var $22=HEAP[$21]; //@line 1176 "cPickle.c"
        var $23=HEAP[$self_addr]; //@line 1176 "cPickle.c"
        var $24=FUNCTION_TABLE[$22]($23, $op, 1); //@line 1176 "cPickle.c"
        var $25=((($24))|0) < 0; //@line 1176 "cPickle.c"
        if ($25) { __label__ = 12; break; } else { __label__ = 7; break; } //@line 1176 "cPickle.c"
      case 7: // $bb7
        var $26=HEAP[$x]; //@line 1179 "cPickle.c"
        var $27=_PyOS_double_to_string($26, 103, 17, 0, 0); //@line 1179 "cPickle.c"
        HEAP[$buf]=$27; //@line 1179 "cPickle.c"
        var $28=HEAP[$buf]; //@line 1180 "cPickle.c"
        var $29=($28)==0; //@line 1180 "cPickle.c"
        if ($29) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1180 "cPickle.c"
      case 8: // $bb8
        var $30=_PyErr_NoMemory(); //@line 1181 "cPickle.c"
        __label__ = 12; break; //@line 1181 "cPickle.c"
      case 9: // $bb9
        var $31=HEAP[$self_addr]; //@line 1185 "cPickle.c"
        var $32=(($31+48)&4294967295); //@line 1185 "cPickle.c"
        var $33=HEAP[$32]; //@line 1185 "cPickle.c"
        var $34=HEAP[$buf]; //@line 1185 "cPickle.c"
        var $35=_strlen($34); //@line 1185 "cPickle.c"
        var $36=HEAP[$self_addr]; //@line 1185 "cPickle.c"
        var $37=HEAP[$buf]; //@line 1185 "cPickle.c"
        var $38=FUNCTION_TABLE[$33]($36, $37, $35); //@line 1185 "cPickle.c"
        var $39=((($38))|0) < 0; //@line 1185 "cPickle.c"
        if ($39) { __label__ = 12; break; } else { __label__ = 10; break; } //@line 1185 "cPickle.c"
      case 10: // $bb10
        var $40=HEAP[$self_addr]; //@line 1188 "cPickle.c"
        var $41=(($40+48)&4294967295); //@line 1188 "cPickle.c"
        var $42=HEAP[$41]; //@line 1188 "cPickle.c"
        var $43=HEAP[$self_addr]; //@line 1188 "cPickle.c"
        var $44=FUNCTION_TABLE[$42]($43, ((__str12)&4294967295), 1); //@line 1188 "cPickle.c"
        var $45=((($44))|0) < 0; //@line 1188 "cPickle.c"
        if ($45) { __label__ = 12; break; } else { __label__ = 11; break; } //@line 1188 "cPickle.c"
      case 11: // $bb11
        HEAP[$result]=0; //@line 1191 "cPickle.c"
        __label__ = 12; break; //@line 1192 "cPickle.c"
      case 12: // $done
        var $46=HEAP[$buf]; //@line 1193 "cPickle.c"
        _PyMem_Free($46); //@line 1193 "cPickle.c"
        var $47=HEAP[$result]; //@line 1194 "cPickle.c"
        HEAP[$0]=$47; //@line 1194 "cPickle.c"
        __label__ = 13; break; //@line 1194 "cPickle.c"
      case 13: // $bb12
        var $48=HEAP[$0]; //@line 1167 "cPickle.c"
        HEAP[$retval]=$48; //@line 1167 "cPickle.c"
        __label__ = 14; break; //@line 1167 "cPickle.c"
      case 14: // $return
        var $retval13=HEAP[$retval]; //@line 1167 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 1167 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_string($self, $args, $doput) {
    var __stackBase__  = STACKTOP; STACKTOP += 45; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 45);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $doput_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $size=__stackBase__+20;
        var $len=__stackBase__+24;
        var $repr=__stackBase__+28;
        var $repr_str=__stackBase__+32;
        var $i=__stackBase__+36;
        var $c_str=__stackBase__+40;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$doput_addr]=$doput;
        HEAP[$repr]=0; //@line 1205 "cPickle.c"
        var $1=HEAP[$args_addr]; //@line 1207 "cPickle.c"
        var $2=_PyString_Size($1); //@line 1207 "cPickle.c"
        HEAP[$size]=$2; //@line 1207 "cPickle.c"
        var $3=HEAP[$size]; //@line 1207 "cPickle.c"
        var $4=((($3))|0) < 0; //@line 1207 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1207 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 1208 "cPickle.c"
        __label__ = 39; break; //@line 1208 "cPickle.c"
      case 2: // $bb1
        var $5=HEAP[$self_addr]; //@line 1210 "cPickle.c"
        var $6=(($5+40)&4294967295); //@line 1210 "cPickle.c"
        var $7=HEAP[$6]; //@line 1210 "cPickle.c"
        var $8=((($7))|0)==0; //@line 1210 "cPickle.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 13; break; } //@line 1210 "cPickle.c"
      case 3: // $bb2
        var $9=HEAP[$args_addr]; //@line 1215 "cPickle.c"
        var $10=_PyObject_Repr($9); //@line 1215 "cPickle.c"
        HEAP[$repr]=$10; //@line 1215 "cPickle.c"
        var $11=HEAP[$repr]; //@line 1215 "cPickle.c"
        var $12=($11)==0; //@line 1215 "cPickle.c"
        if ($12) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1215 "cPickle.c"
      case 4: // $bb3
        HEAP[$0]=-1; //@line 1216 "cPickle.c"
        __label__ = 39; break; //@line 1216 "cPickle.c"
      case 5: // $bb4
        var $13=HEAP[$repr]; //@line 1218 "cPickle.c"
        var $14=_PyString_Size($13); //@line 1218 "cPickle.c"
        HEAP[$len]=$14; //@line 1218 "cPickle.c"
        var $15=HEAP[$len]; //@line 1218 "cPickle.c"
        var $16=((($15))|0) < 0; //@line 1218 "cPickle.c"
        if ($16) { __label__ = 35; break; } else { __label__ = 6; break; } //@line 1218 "cPickle.c"
      case 6: // $bb5
        var $17=HEAP[$repr]; //@line 1220 "cPickle.c"
        var $18=$17; //@line 1220 "cPickle.c"
        var $19=(($18+20)&4294967295); //@line 1220 "cPickle.c"
        var $20=(($19)&4294967295); //@line 1220 "cPickle.c"
        HEAP[$repr_str]=$20; //@line 1220 "cPickle.c"
        var $21=HEAP[$self_addr]; //@line 1222 "cPickle.c"
        var $22=(($21+48)&4294967295); //@line 1222 "cPickle.c"
        var $23=HEAP[$22]; //@line 1222 "cPickle.c"
        var $24=HEAP[$self_addr]; //@line 1222 "cPickle.c"
        var $25=FUNCTION_TABLE[$23]($24, _string_9677, 1); //@line 1222 "cPickle.c"
        var $26=((($25))|0) < 0; //@line 1222 "cPickle.c"
        if ($26) { __label__ = 35; break; } else { __label__ = 7; break; } //@line 1222 "cPickle.c"
      case 7: // $bb6
        var $27=HEAP[$self_addr]; //@line 1225 "cPickle.c"
        var $28=(($27+48)&4294967295); //@line 1225 "cPickle.c"
        var $29=HEAP[$28]; //@line 1225 "cPickle.c"
        var $30=HEAP[$self_addr]; //@line 1225 "cPickle.c"
        var $31=HEAP[$repr_str]; //@line 1225 "cPickle.c"
        var $32=HEAP[$len]; //@line 1225 "cPickle.c"
        var $33=FUNCTION_TABLE[$29]($30, $31, $32); //@line 1225 "cPickle.c"
        var $34=((($33))|0) < 0; //@line 1225 "cPickle.c"
        if ($34) { __label__ = 35; break; } else { __label__ = 8; break; } //@line 1225 "cPickle.c"
      case 8: // $bb7
        var $35=HEAP[$self_addr]; //@line 1228 "cPickle.c"
        var $36=(($35+48)&4294967295); //@line 1228 "cPickle.c"
        var $37=HEAP[$36]; //@line 1228 "cPickle.c"
        var $38=HEAP[$self_addr]; //@line 1228 "cPickle.c"
        var $39=FUNCTION_TABLE[$37]($38, ((__str12)&4294967295), 1); //@line 1228 "cPickle.c"
        var $40=((($39))|0) < 0; //@line 1228 "cPickle.c"
        if ($40) { __label__ = 35; break; } else { __label__ = 9; break; } //@line 1228 "cPickle.c"
      case 9: // $bb8
        var $41=HEAP[$repr]; //@line 1231 "cPickle.c"
        var $42=($41)!=0; //@line 1231 "cPickle.c"
        if ($42) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 1231 "cPickle.c"
      case 10: // $bb9
        var $43=HEAP[$repr]; //@line 1231 "cPickle.c"
        var $44=(($43)&4294967295); //@line 1231 "cPickle.c"
        var $45=HEAP[$44]; //@line 1231 "cPickle.c"
        var $46=((($45) - 1)&4294967295); //@line 1231 "cPickle.c"
        var $47=HEAP[$repr]; //@line 1231 "cPickle.c"
        var $48=(($47)&4294967295); //@line 1231 "cPickle.c"
        HEAP[$48]=$46; //@line 1231 "cPickle.c"
        var $49=HEAP[$repr]; //@line 1231 "cPickle.c"
        var $50=(($49)&4294967295); //@line 1231 "cPickle.c"
        var $51=HEAP[$50]; //@line 1231 "cPickle.c"
        var $52=((($51))|0)==0; //@line 1231 "cPickle.c"
        if ($52) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1231 "cPickle.c"
      case 11: // $bb10
        var $53=HEAP[$repr]; //@line 1231 "cPickle.c"
        var $54=(($53+4)&4294967295); //@line 1231 "cPickle.c"
        var $55=HEAP[$54]; //@line 1231 "cPickle.c"
        var $56=(($55+24)&4294967295); //@line 1231 "cPickle.c"
        var $57=HEAP[$56]; //@line 1231 "cPickle.c"
        var $58=HEAP[$repr]; //@line 1231 "cPickle.c"
        FUNCTION_TABLE[$57]($58); //@line 1231 "cPickle.c"
        __label__ = 12; break; //@line 1231 "cPickle.c"
      case 12: // $bb11
        __label__ = 31; break; //@line 1231 "cPickle.c"
      case 13: // $bb12
        var $59=HEAP[$size]; //@line 1237 "cPickle.c"
        var $60=((($59))|0) <= 255; //@line 1237 "cPickle.c"
        if ($60) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1237 "cPickle.c"
      case 14: // $bb13
        var $61=(($c_str)&4294967295); //@line 1238 "cPickle.c"
        HEAP[$61]=85; //@line 1238 "cPickle.c"
        var $62=HEAP[$size]; //@line 1239 "cPickle.c"
        var $63=((($62)) & 255); //@line 1239 "cPickle.c"
        var $64=(($c_str+1)&4294967295); //@line 1239 "cPickle.c"
        HEAP[$64]=$63; //@line 1239 "cPickle.c"
        HEAP[$len]=2; //@line 1240 "cPickle.c"
        __label__ = 19; break; //@line 1240 "cPickle.c"
      case 15: // $bb14
        var $65=(($c_str)&4294967295); //@line 1243 "cPickle.c"
        HEAP[$65]=84; //@line 1243 "cPickle.c"
        HEAP[$i]=1; //@line 1244 "cPickle.c"
        __label__ = 17; break; //@line 1244 "cPickle.c"
      case 16: // $bb15
        var $66=HEAP[$i]; //@line 1245 "cPickle.c"
        var $67=HEAP[$i]; //@line 1245 "cPickle.c"
        var $68=((($67) * 8)&4294967295); //@line 1245 "cPickle.c"
        var $69=((($68) + -8)&4294967295); //@line 1245 "cPickle.c"
        var $70=HEAP[$size]; //@line 1245 "cPickle.c"
        var $71=((($70))|0) >> ((($69))|0); //@line 1245 "cPickle.c"
        var $72=((($71)) & 255); //@line 1245 "cPickle.c"
        var $73=(($c_str+$66)&4294967295); //@line 1245 "cPickle.c"
        HEAP[$73]=$72; //@line 1245 "cPickle.c"
        var $74=HEAP[$i]; //@line 1244 "cPickle.c"
        var $75=((($74) + 1)&4294967295); //@line 1244 "cPickle.c"
        HEAP[$i]=$75; //@line 1244 "cPickle.c"
        __label__ = 17; break; //@line 1244 "cPickle.c"
      case 17: // $bb16
        var $76=HEAP[$i]; //@line 1244 "cPickle.c"
        var $77=((($76))|0) <= 4; //@line 1244 "cPickle.c"
        if ($77) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 1244 "cPickle.c"
      case 18: // $bb17
        HEAP[$len]=5; //@line 1246 "cPickle.c"
        __label__ = 19; break; //@line 1246 "cPickle.c"
      case 19: // $bb18
        var $78=HEAP[$self_addr]; //@line 1251 "cPickle.c"
        var $79=(($78+48)&4294967295); //@line 1251 "cPickle.c"
        var $80=HEAP[$79]; //@line 1251 "cPickle.c"
        var $81=HEAP[$self_addr]; //@line 1251 "cPickle.c"
        var $c_str19=$c_str; //@line 1251 "cPickle.c"
        var $82=HEAP[$len]; //@line 1251 "cPickle.c"
        var $83=FUNCTION_TABLE[$80]($81, $c_str19, $82); //@line 1251 "cPickle.c"
        var $84=((($83))|0) < 0; //@line 1251 "cPickle.c"
        if ($84) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1251 "cPickle.c"
      case 20: // $bb20
        HEAP[$0]=-1; //@line 1252 "cPickle.c"
        __label__ = 39; break; //@line 1252 "cPickle.c"
      case 21: // $bb21
        var $85=HEAP[$size]; //@line 1254 "cPickle.c"
        var $86=((($85))|0) <= 128; //@line 1254 "cPickle.c"
        if ($86) { __label__ = 29; break; } else { __label__ = 22; break; } //@line 1254 "cPickle.c"
      case 22: // $bb22
        var $87=HEAP[$self_addr]; //@line 1254 "cPickle.c"
        var $88=(($87+16)&4294967295); //@line 1254 "cPickle.c"
        var $89=HEAP[$88]; //@line 1254 "cPickle.c"
        var $90=(($89+4)&4294967295); //@line 1254 "cPickle.c"
        var $91=HEAP[$90]; //@line 1254 "cPickle.c"
        var $92=($91)!=(_PdataType); //@line 1254 "cPickle.c"
        if ($92) { __label__ = 29; break; } else { __label__ = 23; break; } //@line 1254 "cPickle.c"
      case 23: // $bb23
        var $93=HEAP[$self_addr]; //@line 1255 "cPickle.c"
        var $94=_write_other($93, 0, 0); //@line 1255 "cPickle.c"
        var $95=((($94))|0) < 0; //@line 1255 "cPickle.c"
        if ($95) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 1255 "cPickle.c"
      case 24: // $bb24
        HEAP[$0]=-1; //@line 1255 "cPickle.c"
        __label__ = 39; break; //@line 1255 "cPickle.c"
      case 25: // $bb25
        var $96=HEAP[$self_addr]; //@line 1256 "cPickle.c"
        var $97=(($96+16)&4294967295); //@line 1256 "cPickle.c"
        var $98=HEAP[$97]; //@line 1256 "cPickle.c"
        var $99=$98; //@line 1256 "cPickle.c"
        var $100=(($99+8)&4294967295); //@line 1256 "cPickle.c"
        var $101=HEAP[$100]; //@line 1256 "cPickle.c"
        var $102=HEAP[$self_addr]; //@line 1256 "cPickle.c"
        var $103=(($102+16)&4294967295); //@line 1256 "cPickle.c"
        var $104=HEAP[$103]; //@line 1256 "cPickle.c"
        var $105=$104; //@line 1256 "cPickle.c"
        var $106=(($105+12)&4294967295); //@line 1256 "cPickle.c"
        var $107=HEAP[$106]; //@line 1256 "cPickle.c"
        var $108=((($101))|0)==((($107))|0); //@line 1256 "cPickle.c"
        if ($108) { __label__ = 26; break; } else { __label__ = 28; break; } //@line 1256 "cPickle.c"
      case 26: // $bb26
        var $109=HEAP[$self_addr]; //@line 1256 "cPickle.c"
        var $110=(($109+16)&4294967295); //@line 1256 "cPickle.c"
        var $111=HEAP[$110]; //@line 1256 "cPickle.c"
        var $112=$111; //@line 1256 "cPickle.c"
        var $113=_Pdata_grow($112); //@line 1256 "cPickle.c"
        var $114=((($113))|0) < 0; //@line 1256 "cPickle.c"
        if ($114) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 1256 "cPickle.c"
      case 27: // $bb27
        HEAP[$0]=-1; //@line 1256 "cPickle.c"
        __label__ = 39; break; //@line 1256 "cPickle.c"
      case 28: // $bb28
        var $115=HEAP[$args_addr]; //@line 1256 "cPickle.c"
        var $116=(($115)&4294967295); //@line 1256 "cPickle.c"
        var $117=HEAP[$116]; //@line 1256 "cPickle.c"
        var $118=((($117) + 1)&4294967295); //@line 1256 "cPickle.c"
        var $119=HEAP[$args_addr]; //@line 1256 "cPickle.c"
        var $120=(($119)&4294967295); //@line 1256 "cPickle.c"
        HEAP[$120]=$118; //@line 1256 "cPickle.c"
        var $121=HEAP[$self_addr]; //@line 1256 "cPickle.c"
        var $122=(($121+16)&4294967295); //@line 1256 "cPickle.c"
        var $123=HEAP[$122]; //@line 1256 "cPickle.c"
        var $124=$123; //@line 1256 "cPickle.c"
        var $125=(($124+16)&4294967295); //@line 1256 "cPickle.c"
        var $126=HEAP[$125]; //@line 1256 "cPickle.c"
        var $127=HEAP[$self_addr]; //@line 1256 "cPickle.c"
        var $128=(($127+16)&4294967295); //@line 1256 "cPickle.c"
        var $129=HEAP[$128]; //@line 1256 "cPickle.c"
        var $130=$129; //@line 1256 "cPickle.c"
        var $131=(($130+8)&4294967295); //@line 1256 "cPickle.c"
        var $132=HEAP[$131]; //@line 1256 "cPickle.c"
        var $133=(($126+4*$132)&4294967295); //@line 1256 "cPickle.c"
        var $134=HEAP[$args_addr]; //@line 1256 "cPickle.c"
        HEAP[$133]=$134; //@line 1256 "cPickle.c"
        var $135=((($132) + 1)&4294967295); //@line 1256 "cPickle.c"
        var $136=(($130+8)&4294967295); //@line 1256 "cPickle.c"
        HEAP[$136]=$135; //@line 1256 "cPickle.c"
        __label__ = 31; break; //@line 1256 "cPickle.c"
      case 29: // $bb29
        var $137=HEAP[$self_addr]; //@line 1259 "cPickle.c"
        var $138=(($137+48)&4294967295); //@line 1259 "cPickle.c"
        var $139=HEAP[$138]; //@line 1259 "cPickle.c"
        var $140=HEAP[$args_addr]; //@line 1259 "cPickle.c"
        var $141=$140; //@line 1259 "cPickle.c"
        var $142=(($141+20)&4294967295); //@line 1259 "cPickle.c"
        var $143=(($142)&4294967295); //@line 1259 "cPickle.c"
        var $144=HEAP[$self_addr]; //@line 1259 "cPickle.c"
        var $145=HEAP[$size]; //@line 1259 "cPickle.c"
        var $146=FUNCTION_TABLE[$139]($144, $143, $145); //@line 1259 "cPickle.c"
        var $147=((($146))|0) < 0; //@line 1259 "cPickle.c"
        if ($147) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 1259 "cPickle.c"
      case 30: // $bb30
        HEAP[$0]=-1; //@line 1263 "cPickle.c"
        __label__ = 39; break; //@line 1263 "cPickle.c"
      case 31: // $bb31
        var $148=HEAP[$doput_addr]; //@line 1267 "cPickle.c"
        var $149=((($148))|0)!=0; //@line 1267 "cPickle.c"
        if ($149) { __label__ = 32; break; } else { __label__ = 34; break; } //@line 1267 "cPickle.c"
      case 32: // $bb32
        var $150=HEAP[$self_addr]; //@line 1268 "cPickle.c"
        var $151=HEAP[$args_addr]; //@line 1268 "cPickle.c"
        var $152=_put($150, $151); //@line 1268 "cPickle.c"
        var $153=((($152))|0) < 0; //@line 1268 "cPickle.c"
        if ($153) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 1268 "cPickle.c"
      case 33: // $bb33
        HEAP[$0]=-1; //@line 1269 "cPickle.c"
        __label__ = 39; break; //@line 1269 "cPickle.c"
      case 34: // $bb34
        HEAP[$0]=0; //@line 1271 "cPickle.c"
        __label__ = 39; break; //@line 1271 "cPickle.c"
      case 35: // $err
        var $154=HEAP[$repr]; //@line 1274 "cPickle.c"
        var $155=($154)!=0; //@line 1274 "cPickle.c"
        if ($155) { __label__ = 36; break; } else { __label__ = 38; break; } //@line 1274 "cPickle.c"
      case 36: // $bb35
        var $156=HEAP[$repr]; //@line 1274 "cPickle.c"
        var $157=(($156)&4294967295); //@line 1274 "cPickle.c"
        var $158=HEAP[$157]; //@line 1274 "cPickle.c"
        var $159=((($158) - 1)&4294967295); //@line 1274 "cPickle.c"
        var $160=HEAP[$repr]; //@line 1274 "cPickle.c"
        var $161=(($160)&4294967295); //@line 1274 "cPickle.c"
        HEAP[$161]=$159; //@line 1274 "cPickle.c"
        var $162=HEAP[$repr]; //@line 1274 "cPickle.c"
        var $163=(($162)&4294967295); //@line 1274 "cPickle.c"
        var $164=HEAP[$163]; //@line 1274 "cPickle.c"
        var $165=((($164))|0)==0; //@line 1274 "cPickle.c"
        if ($165) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 1274 "cPickle.c"
      case 37: // $bb36
        var $166=HEAP[$repr]; //@line 1274 "cPickle.c"
        var $167=(($166+4)&4294967295); //@line 1274 "cPickle.c"
        var $168=HEAP[$167]; //@line 1274 "cPickle.c"
        var $169=(($168+24)&4294967295); //@line 1274 "cPickle.c"
        var $170=HEAP[$169]; //@line 1274 "cPickle.c"
        var $171=HEAP[$repr]; //@line 1274 "cPickle.c"
        FUNCTION_TABLE[$170]($171); //@line 1274 "cPickle.c"
        __label__ = 38; break; //@line 1274 "cPickle.c"
      case 38: // $bb37
        HEAP[$0]=-1; //@line 1275 "cPickle.c"
        __label__ = 39; break; //@line 1275 "cPickle.c"
      case 39: // $bb38
        var $172=HEAP[$0]; //@line 1208 "cPickle.c"
        HEAP[$retval]=$172; //@line 1208 "cPickle.c"
        __label__ = 40; break; //@line 1208 "cPickle.c"
      case 40: // $return
        var $retval39=HEAP[$retval]; //@line 1208 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval39; //@line 1208 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _modified_EncodeRawUnicodeEscape($s, $size) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $s_addr=__stackBase__;
        var $size_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $repr=__stackBase__+16;
        var $p=__stackBase__+20;
        var $q=__stackBase__+24;
        var $expandsize=__stackBase__+28;
        var $ch=__stackBase__+32;
        var $ch2=__stackBase__+34;
        var $ucs=__stackBase__+36;
        var $_alloca_point_=0;
        HEAP[$s_addr]=$s;
        HEAP[$size_addr]=$size;
        HEAP[$expandsize]=6; //@line 1293 "cPickle.c"
        var $1=HEAP[$expandsize]; //@line 1296 "cPickle.c"
        var $2=((2147483647/((($1))|0))|0); //@line 1296 "cPickle.c"
        var $3=HEAP[$size_addr]; //@line 1296 "cPickle.c"
        var $4=((($2))|0) < ((($3))|0); //@line 1296 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1296 "cPickle.c"
      case 1: // $bb
        var $5=_PyErr_NoMemory(); //@line 1297 "cPickle.c"
        HEAP[$0]=$5; //@line 1297 "cPickle.c"
        __label__ = 20; break; //@line 1297 "cPickle.c"
      case 2: // $bb1
        var $6=HEAP[$expandsize]; //@line 1299 "cPickle.c"
        var $7=HEAP[$size_addr]; //@line 1299 "cPickle.c"
        var $8=((($6) * ($7))&4294967295); //@line 1299 "cPickle.c"
        var $9=_PyString_FromStringAndSize(0, $8); //@line 1299 "cPickle.c"
        HEAP[$repr]=$9; //@line 1299 "cPickle.c"
        var $10=HEAP[$repr]; //@line 1300 "cPickle.c"
        var $11=($10)==0; //@line 1300 "cPickle.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1300 "cPickle.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 1301 "cPickle.c"
        __label__ = 20; break; //@line 1301 "cPickle.c"
      case 4: // $bb3
        var $12=HEAP[$size_addr]; //@line 1302 "cPickle.c"
        var $13=((($12))|0)==0; //@line 1302 "cPickle.c"
        if ($13) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1302 "cPickle.c"
      case 5: // $bb4
        var $14=HEAP[$repr]; //@line 1303 "cPickle.c"
        HEAP[$0]=$14; //@line 1303 "cPickle.c"
        __label__ = 20; break; //@line 1303 "cPickle.c"
      case 6: // $bb5
        var $15=HEAP[$repr]; //@line 1305 "cPickle.c"
        var $16=$15; //@line 1305 "cPickle.c"
        var $17=(($16+20)&4294967295); //@line 1305 "cPickle.c"
        var $18=(($17)&4294967295); //@line 1305 "cPickle.c"
        HEAP[$q]=$18; //@line 1305 "cPickle.c"
        var $19=HEAP[$q]; //@line 1305 "cPickle.c"
        HEAP[$p]=$19; //@line 1305 "cPickle.c"
        __label__ = 18; break; //@line 1305 "cPickle.c"
      case 7: // $bb6
        var $20=HEAP[$s_addr]; //@line 1307 "cPickle.c"
        var $21=HEAP[$20]; //@line 1307 "cPickle.c"
        HEAP[$ch]=$21; //@line 1307 "cPickle.c"
        var $22=HEAP[$s_addr]; //@line 1307 "cPickle.c"
        var $23=(($22+2)&4294967295); //@line 1307 "cPickle.c"
        HEAP[$s_addr]=$23; //@line 1307 "cPickle.c"
        var $24=HEAP[$ch]; //@line 1325 "cPickle.c"
        var $25=unSign(($24), 16, 0) > 55295; //@line 1325 "cPickle.c"
        if ($25) { __label__ = 8; break; } else { __label__ = 13; break; } //@line 1325 "cPickle.c"
      case 8: // $bb7
        var $26=HEAP[$ch]; //@line 1325 "cPickle.c"
        var $27=unSign(($26), 16, 0) <= 56319; //@line 1325 "cPickle.c"
        if ($27) { __label__ = 9; break; } else { __label__ = 13; break; } //@line 1325 "cPickle.c"
      case 9: // $bb8
        var $28=HEAP[$s_addr]; //@line 1329 "cPickle.c"
        var $29=HEAP[$28]; //@line 1329 "cPickle.c"
        HEAP[$ch2]=$29; //@line 1329 "cPickle.c"
        var $30=HEAP[$s_addr]; //@line 1329 "cPickle.c"
        var $31=(($30+2)&4294967295); //@line 1329 "cPickle.c"
        HEAP[$s_addr]=$31; //@line 1329 "cPickle.c"
        var $32=HEAP[$size_addr]; //@line 1330 "cPickle.c"
        var $33=((($32) - 1)&4294967295); //@line 1330 "cPickle.c"
        HEAP[$size_addr]=$33; //@line 1330 "cPickle.c"
        var $34=HEAP[$ch2]; //@line 1331 "cPickle.c"
        var $35=unSign(($34), 16, 0) > 56319; //@line 1331 "cPickle.c"
        if ($35) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 1331 "cPickle.c"
      case 10: // $bb9
        var $36=HEAP[$ch2]; //@line 1331 "cPickle.c"
        var $37=unSign(($36), 16, 0) <= 57343; //@line 1331 "cPickle.c"
        if ($37) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1331 "cPickle.c"
      case 11: // $bb10
        var $38=HEAP[$ch]; //@line 1332 "cPickle.c"
        var $39=unSign(($38), 16, 0); //@line 1332 "cPickle.c"
        var $40=($39) & 1023; //@line 1332 "cPickle.c"
        var $41=($40) << 10; //@line 1332 "cPickle.c"
        var $42=HEAP[$ch2]; //@line 1332 "cPickle.c"
        var $43=unSign(($42), 16, 0); //@line 1332 "cPickle.c"
        var $44=($43) & 1023; //@line 1332 "cPickle.c"
        var $45=($41) | ($44); //@line 1332 "cPickle.c"
        var $46=((($45) + 65536)&4294967295); //@line 1332 "cPickle.c"
        HEAP[$ucs]=$46; //@line 1332 "cPickle.c"
        var $47=HEAP[$p]; //@line 1333 "cPickle.c"
        HEAP[$47]=92; //@line 1333 "cPickle.c"
        var $48=HEAP[$p]; //@line 1333 "cPickle.c"
        var $49=(($48+1)&4294967295); //@line 1333 "cPickle.c"
        HEAP[$p]=$49; //@line 1333 "cPickle.c"
        var $50=HEAP[$p]; //@line 1334 "cPickle.c"
        HEAP[$50]=85; //@line 1334 "cPickle.c"
        var $51=HEAP[$p]; //@line 1334 "cPickle.c"
        var $52=(($51+1)&4294967295); //@line 1334 "cPickle.c"
        HEAP[$p]=$52; //@line 1334 "cPickle.c"
        var $53=HEAP[_hexdigit_9788]; //@line 1335 "cPickle.c"
        var $54=HEAP[$ucs]; //@line 1335 "cPickle.c"
        var $55=((($54))>>>0) >>> 28; //@line 1335 "cPickle.c"
        var $56=($55) & 15; //@line 1335 "cPickle.c"
        var $57=(($53+$56)&4294967295); //@line 1335 "cPickle.c"
        var $58=HEAP[$57]; //@line 1335 "cPickle.c"
        var $59=HEAP[$p]; //@line 1335 "cPickle.c"
        HEAP[$59]=$58; //@line 1335 "cPickle.c"
        var $60=HEAP[$p]; //@line 1335 "cPickle.c"
        var $61=(($60+1)&4294967295); //@line 1335 "cPickle.c"
        HEAP[$p]=$61; //@line 1335 "cPickle.c"
        var $62=HEAP[_hexdigit_9788]; //@line 1336 "cPickle.c"
        var $63=HEAP[$ucs]; //@line 1336 "cPickle.c"
        var $64=((($63))>>>0) >>> 24; //@line 1336 "cPickle.c"
        var $65=($64) & 15; //@line 1336 "cPickle.c"
        var $66=(($62+$65)&4294967295); //@line 1336 "cPickle.c"
        var $67=HEAP[$66]; //@line 1336 "cPickle.c"
        var $68=HEAP[$p]; //@line 1336 "cPickle.c"
        HEAP[$68]=$67; //@line 1336 "cPickle.c"
        var $69=HEAP[$p]; //@line 1336 "cPickle.c"
        var $70=(($69+1)&4294967295); //@line 1336 "cPickle.c"
        HEAP[$p]=$70; //@line 1336 "cPickle.c"
        var $71=HEAP[_hexdigit_9788]; //@line 1337 "cPickle.c"
        var $72=HEAP[$ucs]; //@line 1337 "cPickle.c"
        var $73=((($72))>>>0) >>> 20; //@line 1337 "cPickle.c"
        var $74=($73) & 15; //@line 1337 "cPickle.c"
        var $75=(($71+$74)&4294967295); //@line 1337 "cPickle.c"
        var $76=HEAP[$75]; //@line 1337 "cPickle.c"
        var $77=HEAP[$p]; //@line 1337 "cPickle.c"
        HEAP[$77]=$76; //@line 1337 "cPickle.c"
        var $78=HEAP[$p]; //@line 1337 "cPickle.c"
        var $79=(($78+1)&4294967295); //@line 1337 "cPickle.c"
        HEAP[$p]=$79; //@line 1337 "cPickle.c"
        var $80=HEAP[_hexdigit_9788]; //@line 1338 "cPickle.c"
        var $81=HEAP[$ucs]; //@line 1338 "cPickle.c"
        var $82=((($81))>>>0) >>> 16; //@line 1338 "cPickle.c"
        var $83=($82) & 15; //@line 1338 "cPickle.c"
        var $84=(($80+$83)&4294967295); //@line 1338 "cPickle.c"
        var $85=HEAP[$84]; //@line 1338 "cPickle.c"
        var $86=HEAP[$p]; //@line 1338 "cPickle.c"
        HEAP[$86]=$85; //@line 1338 "cPickle.c"
        var $87=HEAP[$p]; //@line 1338 "cPickle.c"
        var $88=(($87+1)&4294967295); //@line 1338 "cPickle.c"
        HEAP[$p]=$88; //@line 1338 "cPickle.c"
        var $89=HEAP[_hexdigit_9788]; //@line 1339 "cPickle.c"
        var $90=HEAP[$ucs]; //@line 1339 "cPickle.c"
        var $91=((($90))>>>0) >>> 12; //@line 1339 "cPickle.c"
        var $92=($91) & 15; //@line 1339 "cPickle.c"
        var $93=(($89+$92)&4294967295); //@line 1339 "cPickle.c"
        var $94=HEAP[$93]; //@line 1339 "cPickle.c"
        var $95=HEAP[$p]; //@line 1339 "cPickle.c"
        HEAP[$95]=$94; //@line 1339 "cPickle.c"
        var $96=HEAP[$p]; //@line 1339 "cPickle.c"
        var $97=(($96+1)&4294967295); //@line 1339 "cPickle.c"
        HEAP[$p]=$97; //@line 1339 "cPickle.c"
        var $98=HEAP[_hexdigit_9788]; //@line 1340 "cPickle.c"
        var $99=HEAP[$ucs]; //@line 1340 "cPickle.c"
        var $100=((($99))>>>0) >>> 8; //@line 1340 "cPickle.c"
        var $101=($100) & 15; //@line 1340 "cPickle.c"
        var $102=(($98+$101)&4294967295); //@line 1340 "cPickle.c"
        var $103=HEAP[$102]; //@line 1340 "cPickle.c"
        var $104=HEAP[$p]; //@line 1340 "cPickle.c"
        HEAP[$104]=$103; //@line 1340 "cPickle.c"
        var $105=HEAP[$p]; //@line 1340 "cPickle.c"
        var $106=(($105+1)&4294967295); //@line 1340 "cPickle.c"
        HEAP[$p]=$106; //@line 1340 "cPickle.c"
        var $107=HEAP[_hexdigit_9788]; //@line 1341 "cPickle.c"
        var $108=HEAP[$ucs]; //@line 1341 "cPickle.c"
        var $109=((($108))>>>0) >>> 4; //@line 1341 "cPickle.c"
        var $110=($109) & 15; //@line 1341 "cPickle.c"
        var $111=(($107+$110)&4294967295); //@line 1341 "cPickle.c"
        var $112=HEAP[$111]; //@line 1341 "cPickle.c"
        var $113=HEAP[$p]; //@line 1341 "cPickle.c"
        HEAP[$113]=$112; //@line 1341 "cPickle.c"
        var $114=HEAP[$p]; //@line 1341 "cPickle.c"
        var $115=(($114+1)&4294967295); //@line 1341 "cPickle.c"
        HEAP[$p]=$115; //@line 1341 "cPickle.c"
        var $116=HEAP[_hexdigit_9788]; //@line 1342 "cPickle.c"
        var $117=HEAP[$ucs]; //@line 1342 "cPickle.c"
        var $118=($117) & 15; //@line 1342 "cPickle.c"
        var $119=(($116+$118)&4294967295); //@line 1342 "cPickle.c"
        var $120=HEAP[$119]; //@line 1342 "cPickle.c"
        var $121=HEAP[$p]; //@line 1342 "cPickle.c"
        HEAP[$121]=$120; //@line 1342 "cPickle.c"
        var $122=HEAP[$p]; //@line 1342 "cPickle.c"
        var $123=(($122+1)&4294967295); //@line 1342 "cPickle.c"
        HEAP[$p]=$123; //@line 1342 "cPickle.c"
        __label__ = 18; break; //@line 1342 "cPickle.c"
      case 12: // $bb11
        var $124=HEAP[$s_addr]; //@line 1346 "cPickle.c"
        var $125=(($124+-2)&4294967295); //@line 1346 "cPickle.c"
        HEAP[$s_addr]=$125; //@line 1346 "cPickle.c"
        var $126=HEAP[$size_addr]; //@line 1347 "cPickle.c"
        var $127=((($126) + 1)&4294967295); //@line 1347 "cPickle.c"
        HEAP[$size_addr]=$127; //@line 1347 "cPickle.c"
        __label__ = 13; break; //@line 1347 "cPickle.c"
      case 13: // $bb12
        var $128=HEAP[$ch]; //@line 1351 "cPickle.c"
        var $129=unSign(($128), 16, 0) > 255; //@line 1351 "cPickle.c"
        if ($129) { __label__ = 16; break; } else { __label__ = 14; break; } //@line 1351 "cPickle.c"
      case 14: // $bb13
        var $130=HEAP[$ch]; //@line 1351 "cPickle.c"
        var $131=reSign(($130), 16, 0)==92; //@line 1351 "cPickle.c"
        if ($131) { __label__ = 16; break; } else { __label__ = 15; break; } //@line 1351 "cPickle.c"
      case 15: // $bb14
        var $132=HEAP[$ch]; //@line 1351 "cPickle.c"
        var $133=reSign(($132), 16, 0)==10; //@line 1351 "cPickle.c"
        if ($133) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 1351 "cPickle.c"
      case 16: // $bb15
        var $134=HEAP[$p]; //@line 1352 "cPickle.c"
        HEAP[$134]=92; //@line 1352 "cPickle.c"
        var $135=HEAP[$p]; //@line 1352 "cPickle.c"
        var $136=(($135+1)&4294967295); //@line 1352 "cPickle.c"
        HEAP[$p]=$136; //@line 1352 "cPickle.c"
        var $137=HEAP[$p]; //@line 1353 "cPickle.c"
        HEAP[$137]=117; //@line 1353 "cPickle.c"
        var $138=HEAP[$p]; //@line 1353 "cPickle.c"
        var $139=(($138+1)&4294967295); //@line 1353 "cPickle.c"
        HEAP[$p]=$139; //@line 1353 "cPickle.c"
        var $140=HEAP[_hexdigit_9788]; //@line 1354 "cPickle.c"
        var $141=HEAP[$ch]; //@line 1354 "cPickle.c"
        var $142=unSign(($141), 16, 0) >>> 12; //@line 1354 "cPickle.c"
        var $143=unSign(($142), 16, 0); //@line 1354 "cPickle.c"
        var $144=($143) & 15; //@line 1354 "cPickle.c"
        var $145=(($140+$144)&4294967295); //@line 1354 "cPickle.c"
        var $146=HEAP[$145]; //@line 1354 "cPickle.c"
        var $147=HEAP[$p]; //@line 1354 "cPickle.c"
        HEAP[$147]=$146; //@line 1354 "cPickle.c"
        var $148=HEAP[$p]; //@line 1354 "cPickle.c"
        var $149=(($148+1)&4294967295); //@line 1354 "cPickle.c"
        HEAP[$p]=$149; //@line 1354 "cPickle.c"
        var $150=HEAP[_hexdigit_9788]; //@line 1355 "cPickle.c"
        var $151=HEAP[$ch]; //@line 1355 "cPickle.c"
        var $152=unSign(($151), 16, 0) >>> 8; //@line 1355 "cPickle.c"
        var $153=unSign(($152), 16, 0); //@line 1355 "cPickle.c"
        var $154=($153) & 15; //@line 1355 "cPickle.c"
        var $155=(($150+$154)&4294967295); //@line 1355 "cPickle.c"
        var $156=HEAP[$155]; //@line 1355 "cPickle.c"
        var $157=HEAP[$p]; //@line 1355 "cPickle.c"
        HEAP[$157]=$156; //@line 1355 "cPickle.c"
        var $158=HEAP[$p]; //@line 1355 "cPickle.c"
        var $159=(($158+1)&4294967295); //@line 1355 "cPickle.c"
        HEAP[$p]=$159; //@line 1355 "cPickle.c"
        var $160=HEAP[_hexdigit_9788]; //@line 1356 "cPickle.c"
        var $161=HEAP[$ch]; //@line 1356 "cPickle.c"
        var $162=unSign(($161), 16, 0) >>> 4; //@line 1356 "cPickle.c"
        var $163=unSign(($162), 16, 0); //@line 1356 "cPickle.c"
        var $164=($163) & 15; //@line 1356 "cPickle.c"
        var $165=(($160+$164)&4294967295); //@line 1356 "cPickle.c"
        var $166=HEAP[$165]; //@line 1356 "cPickle.c"
        var $167=HEAP[$p]; //@line 1356 "cPickle.c"
        HEAP[$167]=$166; //@line 1356 "cPickle.c"
        var $168=HEAP[$p]; //@line 1356 "cPickle.c"
        var $169=(($168+1)&4294967295); //@line 1356 "cPickle.c"
        HEAP[$p]=$169; //@line 1356 "cPickle.c"
        var $170=HEAP[_hexdigit_9788]; //@line 1357 "cPickle.c"
        var $171=HEAP[$ch]; //@line 1357 "cPickle.c"
        var $172=unSign(($171), 16, 0); //@line 1357 "cPickle.c"
        var $173=($172) & 15; //@line 1357 "cPickle.c"
        var $174=(($170+$173)&4294967295); //@line 1357 "cPickle.c"
        var $175=HEAP[$174]; //@line 1357 "cPickle.c"
        var $176=HEAP[$p]; //@line 1357 "cPickle.c"
        HEAP[$176]=$175; //@line 1357 "cPickle.c"
        var $177=HEAP[$p]; //@line 1357 "cPickle.c"
        var $178=(($177+1)&4294967295); //@line 1357 "cPickle.c"
        HEAP[$p]=$178; //@line 1357 "cPickle.c"
        __label__ = 18; break; //@line 1357 "cPickle.c"
      case 17: // $bb16
        var $179=HEAP[$ch]; //@line 1361 "cPickle.c"
        var $180=((($179)) & 255); //@line 1361 "cPickle.c"
        var $181=HEAP[$p]; //@line 1361 "cPickle.c"
        HEAP[$181]=$180; //@line 1361 "cPickle.c"
        var $182=HEAP[$p]; //@line 1361 "cPickle.c"
        var $183=(($182+1)&4294967295); //@line 1361 "cPickle.c"
        HEAP[$p]=$183; //@line 1361 "cPickle.c"
        __label__ = 18; break; //@line 1361 "cPickle.c"
      case 18: // $bb17
        var $184=HEAP[$size_addr]; //@line 1306 "cPickle.c"
        var $185=((($184))|0) > 0; //@line 1306 "cPickle.c"
        var $186=unSign(($185), 1, 0); //@line 1306 "cPickle.c"
        var $187=HEAP[$size_addr]; //@line 1306 "cPickle.c"
        var $188=((($187) - 1)&4294967295); //@line 1306 "cPickle.c"
        HEAP[$size_addr]=$188; //@line 1306 "cPickle.c"
        var $toBool=reSign(($186), 8, 0)!=0; //@line 1306 "cPickle.c"
        if ($toBool) { __label__ = 7; break; } else { __label__ = 19; break; } //@line 1306 "cPickle.c"
      case 19: // $bb18
        var $189=HEAP[$p]; //@line 1363 "cPickle.c"
        HEAP[$189]=0; //@line 1363 "cPickle.c"
        var $190=HEAP[$p]; //@line 1364 "cPickle.c"
        var $191=($190); //@line 1364 "cPickle.c"
        var $192=HEAP[$q]; //@line 1364 "cPickle.c"
        var $193=($192); //@line 1364 "cPickle.c"
        var $194=((($191) - ($193))&4294967295); //@line 1364 "cPickle.c"
        var $195=__PyString_Resize($repr, $194); //@line 1364 "cPickle.c"
        var $196=HEAP[$repr]; //@line 1365 "cPickle.c"
        HEAP[$0]=$196; //@line 1365 "cPickle.c"
        __label__ = 20; break; //@line 1365 "cPickle.c"
      case 20: // $bb19
        var $197=HEAP[$0]; //@line 1297 "cPickle.c"
        HEAP[$retval]=$197; //@line 1297 "cPickle.c"
        __label__ = 21; break; //@line 1297 "cPickle.c"
      case 21: // $return
        var $retval20=HEAP[$retval]; //@line 1297 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval20; //@line 1297 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_unicode($self, $args, $doput) {
    var __stackBase__  = STACKTOP; STACKTOP += 45; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 45);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $doput_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $size=__stackBase__+20;
        var $len=__stackBase__+24;
        var $repr=__stackBase__+28;
        var $repr_str=__stackBase__+32;
        var $i=__stackBase__+36;
        var $c_str=__stackBase__+40;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$doput_addr]=$doput;
        HEAP[$repr]=0; //@line 1372 "cPickle.c"
        var $1=HEAP[$args_addr]; //@line 1374 "cPickle.c"
        var $2=(($1+4)&4294967295); //@line 1374 "cPickle.c"
        var $3=HEAP[$2]; //@line 1374 "cPickle.c"
        var $4=(($3+84)&4294967295); //@line 1374 "cPickle.c"
        var $5=HEAP[$4]; //@line 1374 "cPickle.c"
        var $6=($5) & 268435456; //@line 1374 "cPickle.c"
        var $7=((($6))|0)==0; //@line 1374 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1374 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 1375 "cPickle.c"
        __label__ = 38; break; //@line 1375 "cPickle.c"
      case 2: // $bb1
        var $8=HEAP[$self_addr]; //@line 1377 "cPickle.c"
        var $9=(($8+40)&4294967295); //@line 1377 "cPickle.c"
        var $10=HEAP[$9]; //@line 1377 "cPickle.c"
        var $11=((($10))|0)==0; //@line 1377 "cPickle.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 13; break; } //@line 1377 "cPickle.c"
      case 3: // $bb2
        var $12=HEAP[$args_addr]; //@line 1381 "cPickle.c"
        var $13=$12; //@line 1381 "cPickle.c"
        var $14=(($13+8)&4294967295); //@line 1381 "cPickle.c"
        var $15=HEAP[$14]; //@line 1381 "cPickle.c"
        var $16=HEAP[$args_addr]; //@line 1381 "cPickle.c"
        var $17=$16; //@line 1381 "cPickle.c"
        var $18=(($17+12)&4294967295); //@line 1381 "cPickle.c"
        var $19=HEAP[$18]; //@line 1381 "cPickle.c"
        var $20=_modified_EncodeRawUnicodeEscape($19, $15); //@line 1381 "cPickle.c"
        HEAP[$repr]=$20; //@line 1381 "cPickle.c"
        var $21=HEAP[$repr]; //@line 1383 "cPickle.c"
        var $22=($21)==0; //@line 1383 "cPickle.c"
        if ($22) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1383 "cPickle.c"
      case 4: // $bb3
        HEAP[$0]=-1; //@line 1384 "cPickle.c"
        __label__ = 38; break; //@line 1384 "cPickle.c"
      case 5: // $bb4
        var $23=HEAP[$repr]; //@line 1386 "cPickle.c"
        var $24=_PyString_Size($23); //@line 1386 "cPickle.c"
        HEAP[$len]=$24; //@line 1386 "cPickle.c"
        var $25=HEAP[$len]; //@line 1386 "cPickle.c"
        var $26=((($25))|0) < 0; //@line 1386 "cPickle.c"
        if ($26) { __label__ = 34; break; } else { __label__ = 6; break; } //@line 1386 "cPickle.c"
      case 6: // $bb5
        var $27=HEAP[$repr]; //@line 1388 "cPickle.c"
        var $28=$27; //@line 1388 "cPickle.c"
        var $29=(($28+20)&4294967295); //@line 1388 "cPickle.c"
        var $30=(($29)&4294967295); //@line 1388 "cPickle.c"
        HEAP[$repr_str]=$30; //@line 1388 "cPickle.c"
        var $31=HEAP[$self_addr]; //@line 1390 "cPickle.c"
        var $32=(($31+48)&4294967295); //@line 1390 "cPickle.c"
        var $33=HEAP[$32]; //@line 1390 "cPickle.c"
        var $34=HEAP[$self_addr]; //@line 1390 "cPickle.c"
        var $35=FUNCTION_TABLE[$33]($34, _string_9895, 1); //@line 1390 "cPickle.c"
        var $36=((($35))|0) < 0; //@line 1390 "cPickle.c"
        if ($36) { __label__ = 34; break; } else { __label__ = 7; break; } //@line 1390 "cPickle.c"
      case 7: // $bb6
        var $37=HEAP[$self_addr]; //@line 1393 "cPickle.c"
        var $38=(($37+48)&4294967295); //@line 1393 "cPickle.c"
        var $39=HEAP[$38]; //@line 1393 "cPickle.c"
        var $40=HEAP[$self_addr]; //@line 1393 "cPickle.c"
        var $41=HEAP[$repr_str]; //@line 1393 "cPickle.c"
        var $42=HEAP[$len]; //@line 1393 "cPickle.c"
        var $43=FUNCTION_TABLE[$39]($40, $41, $42); //@line 1393 "cPickle.c"
        var $44=((($43))|0) < 0; //@line 1393 "cPickle.c"
        if ($44) { __label__ = 34; break; } else { __label__ = 8; break; } //@line 1393 "cPickle.c"
      case 8: // $bb7
        var $45=HEAP[$self_addr]; //@line 1396 "cPickle.c"
        var $46=(($45+48)&4294967295); //@line 1396 "cPickle.c"
        var $47=HEAP[$46]; //@line 1396 "cPickle.c"
        var $48=HEAP[$self_addr]; //@line 1396 "cPickle.c"
        var $49=FUNCTION_TABLE[$47]($48, ((__str12)&4294967295), 1); //@line 1396 "cPickle.c"
        var $50=((($49))|0) < 0; //@line 1396 "cPickle.c"
        if ($50) { __label__ = 34; break; } else { __label__ = 9; break; } //@line 1396 "cPickle.c"
      case 9: // $bb8
        var $51=HEAP[$repr]; //@line 1399 "cPickle.c"
        var $52=($51)!=0; //@line 1399 "cPickle.c"
        if ($52) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 1399 "cPickle.c"
      case 10: // $bb9
        var $53=HEAP[$repr]; //@line 1399 "cPickle.c"
        var $54=(($53)&4294967295); //@line 1399 "cPickle.c"
        var $55=HEAP[$54]; //@line 1399 "cPickle.c"
        var $56=((($55) - 1)&4294967295); //@line 1399 "cPickle.c"
        var $57=HEAP[$repr]; //@line 1399 "cPickle.c"
        var $58=(($57)&4294967295); //@line 1399 "cPickle.c"
        HEAP[$58]=$56; //@line 1399 "cPickle.c"
        var $59=HEAP[$repr]; //@line 1399 "cPickle.c"
        var $60=(($59)&4294967295); //@line 1399 "cPickle.c"
        var $61=HEAP[$60]; //@line 1399 "cPickle.c"
        var $62=((($61))|0)==0; //@line 1399 "cPickle.c"
        if ($62) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1399 "cPickle.c"
      case 11: // $bb10
        var $63=HEAP[$repr]; //@line 1399 "cPickle.c"
        var $64=(($63+4)&4294967295); //@line 1399 "cPickle.c"
        var $65=HEAP[$64]; //@line 1399 "cPickle.c"
        var $66=(($65+24)&4294967295); //@line 1399 "cPickle.c"
        var $67=HEAP[$66]; //@line 1399 "cPickle.c"
        var $68=HEAP[$repr]; //@line 1399 "cPickle.c"
        FUNCTION_TABLE[$67]($68); //@line 1399 "cPickle.c"
        __label__ = 12; break; //@line 1399 "cPickle.c"
      case 12: // $bb11
        __label__ = 30; break; //@line 1399 "cPickle.c"
      case 13: // $bb12
        var $69=HEAP[$args_addr]; //@line 1405 "cPickle.c"
        var $70=_PyUnicodeUCS2_AsUTF8String($69); //@line 1405 "cPickle.c"
        HEAP[$repr]=$70; //@line 1405 "cPickle.c"
        var $71=HEAP[$repr]; //@line 1405 "cPickle.c"
        var $72=($71)==0; //@line 1405 "cPickle.c"
        if ($72) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1405 "cPickle.c"
      case 14: // $bb13
        HEAP[$0]=-1; //@line 1406 "cPickle.c"
        __label__ = 38; break; //@line 1406 "cPickle.c"
      case 15: // $bb14
        var $73=HEAP[$repr]; //@line 1408 "cPickle.c"
        var $74=_PyString_Size($73); //@line 1408 "cPickle.c"
        HEAP[$size]=$74; //@line 1408 "cPickle.c"
        var $75=HEAP[$size]; //@line 1408 "cPickle.c"
        var $76=((($75))|0) < 0; //@line 1408 "cPickle.c"
        if ($76) { __label__ = 34; break; } else { __label__ = 16; break; } //@line 1408 "cPickle.c"
      case 16: // $bb15
        var $77=(($c_str)&4294967295); //@line 1413 "cPickle.c"
        HEAP[$77]=88; //@line 1413 "cPickle.c"
        HEAP[$i]=1; //@line 1414 "cPickle.c"
        __label__ = 18; break; //@line 1414 "cPickle.c"
      case 17: // $bb16
        var $78=HEAP[$i]; //@line 1415 "cPickle.c"
        var $79=HEAP[$i]; //@line 1415 "cPickle.c"
        var $80=((($79) * 8)&4294967295); //@line 1415 "cPickle.c"
        var $81=((($80) + -8)&4294967295); //@line 1415 "cPickle.c"
        var $82=HEAP[$size]; //@line 1415 "cPickle.c"
        var $83=((($82))|0) >> ((($81))|0); //@line 1415 "cPickle.c"
        var $84=((($83)) & 255); //@line 1415 "cPickle.c"
        var $85=(($c_str+$78)&4294967295); //@line 1415 "cPickle.c"
        HEAP[$85]=$84; //@line 1415 "cPickle.c"
        var $86=HEAP[$i]; //@line 1414 "cPickle.c"
        var $87=((($86) + 1)&4294967295); //@line 1414 "cPickle.c"
        HEAP[$i]=$87; //@line 1414 "cPickle.c"
        __label__ = 18; break; //@line 1414 "cPickle.c"
      case 18: // $bb17
        var $88=HEAP[$i]; //@line 1414 "cPickle.c"
        var $89=((($88))|0) <= 4; //@line 1414 "cPickle.c"
        if ($89) { __label__ = 17; break; } else { __label__ = 19; break; } //@line 1414 "cPickle.c"
      case 19: // $bb18
        HEAP[$len]=5; //@line 1416 "cPickle.c"
        var $90=HEAP[$self_addr]; //@line 1418 "cPickle.c"
        var $91=(($90+48)&4294967295); //@line 1418 "cPickle.c"
        var $92=HEAP[$91]; //@line 1418 "cPickle.c"
        var $93=HEAP[$self_addr]; //@line 1418 "cPickle.c"
        var $c_str19=$c_str; //@line 1418 "cPickle.c"
        var $94=HEAP[$len]; //@line 1418 "cPickle.c"
        var $95=FUNCTION_TABLE[$92]($93, $c_str19, $94); //@line 1418 "cPickle.c"
        var $96=((($95))|0) < 0; //@line 1418 "cPickle.c"
        if ($96) { __label__ = 34; break; } else { __label__ = 20; break; } //@line 1418 "cPickle.c"
      case 20: // $bb20
        var $97=HEAP[$size]; //@line 1421 "cPickle.c"
        var $98=((($97))|0) <= 128; //@line 1421 "cPickle.c"
        if ($98) { __label__ = 27; break; } else { __label__ = 21; break; } //@line 1421 "cPickle.c"
      case 21: // $bb21
        var $99=HEAP[$self_addr]; //@line 1421 "cPickle.c"
        var $100=(($99+16)&4294967295); //@line 1421 "cPickle.c"
        var $101=HEAP[$100]; //@line 1421 "cPickle.c"
        var $102=(($101+4)&4294967295); //@line 1421 "cPickle.c"
        var $103=HEAP[$102]; //@line 1421 "cPickle.c"
        var $104=($103)!=(_PdataType); //@line 1421 "cPickle.c"
        if ($104) { __label__ = 27; break; } else { __label__ = 22; break; } //@line 1421 "cPickle.c"
      case 22: // $bb22
        var $105=HEAP[$self_addr]; //@line 1422 "cPickle.c"
        var $106=_write_other($105, 0, 0); //@line 1422 "cPickle.c"
        var $107=((($106))|0) < 0; //@line 1422 "cPickle.c"
        if ($107) { __label__ = 34; break; } else { __label__ = 23; break; } //@line 1422 "cPickle.c"
      case 23: // $bb23
        var $108=HEAP[$self_addr]; //@line 1424 "cPickle.c"
        var $109=(($108+16)&4294967295); //@line 1424 "cPickle.c"
        var $110=HEAP[$109]; //@line 1424 "cPickle.c"
        var $111=$110; //@line 1424 "cPickle.c"
        var $112=(($111+8)&4294967295); //@line 1424 "cPickle.c"
        var $113=HEAP[$112]; //@line 1424 "cPickle.c"
        var $114=HEAP[$self_addr]; //@line 1424 "cPickle.c"
        var $115=(($114+16)&4294967295); //@line 1424 "cPickle.c"
        var $116=HEAP[$115]; //@line 1424 "cPickle.c"
        var $117=$116; //@line 1424 "cPickle.c"
        var $118=(($117+12)&4294967295); //@line 1424 "cPickle.c"
        var $119=HEAP[$118]; //@line 1424 "cPickle.c"
        var $120=((($113))|0)==((($119))|0); //@line 1424 "cPickle.c"
        if ($120) { __label__ = 24; break; } else { __label__ = 26; break; } //@line 1424 "cPickle.c"
      case 24: // $bb24
        var $121=HEAP[$self_addr]; //@line 1424 "cPickle.c"
        var $122=(($121+16)&4294967295); //@line 1424 "cPickle.c"
        var $123=HEAP[$122]; //@line 1424 "cPickle.c"
        var $124=$123; //@line 1424 "cPickle.c"
        var $125=_Pdata_grow($124); //@line 1424 "cPickle.c"
        var $126=((($125))|0) < 0; //@line 1424 "cPickle.c"
        if ($126) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 1424 "cPickle.c"
      case 25: // $bb25
        HEAP[$0]=-1; //@line 1424 "cPickle.c"
        __label__ = 38; break; //@line 1424 "cPickle.c"
      case 26: // $bb26
        var $127=HEAP[$repr]; //@line 1424 "cPickle.c"
        var $128=(($127)&4294967295); //@line 1424 "cPickle.c"
        var $129=HEAP[$128]; //@line 1424 "cPickle.c"
        var $130=((($129) + 1)&4294967295); //@line 1424 "cPickle.c"
        var $131=HEAP[$repr]; //@line 1424 "cPickle.c"
        var $132=(($131)&4294967295); //@line 1424 "cPickle.c"
        HEAP[$132]=$130; //@line 1424 "cPickle.c"
        var $133=HEAP[$self_addr]; //@line 1424 "cPickle.c"
        var $134=(($133+16)&4294967295); //@line 1424 "cPickle.c"
        var $135=HEAP[$134]; //@line 1424 "cPickle.c"
        var $136=$135; //@line 1424 "cPickle.c"
        var $137=(($136+16)&4294967295); //@line 1424 "cPickle.c"
        var $138=HEAP[$137]; //@line 1424 "cPickle.c"
        var $139=HEAP[$self_addr]; //@line 1424 "cPickle.c"
        var $140=(($139+16)&4294967295); //@line 1424 "cPickle.c"
        var $141=HEAP[$140]; //@line 1424 "cPickle.c"
        var $142=$141; //@line 1424 "cPickle.c"
        var $143=(($142+8)&4294967295); //@line 1424 "cPickle.c"
        var $144=HEAP[$143]; //@line 1424 "cPickle.c"
        var $145=(($138+4*$144)&4294967295); //@line 1424 "cPickle.c"
        var $146=HEAP[$repr]; //@line 1424 "cPickle.c"
        HEAP[$145]=$146; //@line 1424 "cPickle.c"
        var $147=((($144) + 1)&4294967295); //@line 1424 "cPickle.c"
        var $148=(($142+8)&4294967295); //@line 1424 "cPickle.c"
        HEAP[$148]=$147; //@line 1424 "cPickle.c"
        __label__ = 28; break; //@line 1424 "cPickle.c"
      case 27: // $bb27
        var $149=HEAP[$self_addr]; //@line 1427 "cPickle.c"
        var $150=(($149+48)&4294967295); //@line 1427 "cPickle.c"
        var $151=HEAP[$150]; //@line 1427 "cPickle.c"
        var $152=HEAP[$repr]; //@line 1427 "cPickle.c"
        var $153=$152; //@line 1427 "cPickle.c"
        var $154=(($153+20)&4294967295); //@line 1427 "cPickle.c"
        var $155=(($154)&4294967295); //@line 1427 "cPickle.c"
        var $156=HEAP[$self_addr]; //@line 1427 "cPickle.c"
        var $157=HEAP[$size]; //@line 1427 "cPickle.c"
        var $158=FUNCTION_TABLE[$151]($156, $155, $157); //@line 1427 "cPickle.c"
        var $159=((($158))|0) < 0; //@line 1427 "cPickle.c"
        if ($159) { __label__ = 34; break; } else { __label__ = 28; break; } //@line 1427 "cPickle.c"
      case 28: // $bb28
        var $160=HEAP[$repr]; //@line 1432 "cPickle.c"
        var $161=(($160)&4294967295); //@line 1432 "cPickle.c"
        var $162=HEAP[$161]; //@line 1432 "cPickle.c"
        var $163=((($162) - 1)&4294967295); //@line 1432 "cPickle.c"
        var $164=HEAP[$repr]; //@line 1432 "cPickle.c"
        var $165=(($164)&4294967295); //@line 1432 "cPickle.c"
        HEAP[$165]=$163; //@line 1432 "cPickle.c"
        var $166=HEAP[$repr]; //@line 1432 "cPickle.c"
        var $167=(($166)&4294967295); //@line 1432 "cPickle.c"
        var $168=HEAP[$167]; //@line 1432 "cPickle.c"
        var $169=((($168))|0)==0; //@line 1432 "cPickle.c"
        if ($169) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 1432 "cPickle.c"
      case 29: // $bb29
        var $170=HEAP[$repr]; //@line 1432 "cPickle.c"
        var $171=(($170+4)&4294967295); //@line 1432 "cPickle.c"
        var $172=HEAP[$171]; //@line 1432 "cPickle.c"
        var $173=(($172+24)&4294967295); //@line 1432 "cPickle.c"
        var $174=HEAP[$173]; //@line 1432 "cPickle.c"
        var $175=HEAP[$repr]; //@line 1432 "cPickle.c"
        FUNCTION_TABLE[$174]($175); //@line 1432 "cPickle.c"
        __label__ = 30; break; //@line 1432 "cPickle.c"
      case 30: // $bb30
        var $176=HEAP[$doput_addr]; //@line 1435 "cPickle.c"
        var $177=((($176))|0)!=0; //@line 1435 "cPickle.c"
        if ($177) { __label__ = 31; break; } else { __label__ = 33; break; } //@line 1435 "cPickle.c"
      case 31: // $bb31
        var $178=HEAP[$self_addr]; //@line 1436 "cPickle.c"
        var $179=HEAP[$args_addr]; //@line 1436 "cPickle.c"
        var $180=_put($178, $179); //@line 1436 "cPickle.c"
        var $181=((($180))|0) < 0; //@line 1436 "cPickle.c"
        if ($181) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 1436 "cPickle.c"
      case 32: // $bb32
        HEAP[$0]=-1; //@line 1437 "cPickle.c"
        __label__ = 38; break; //@line 1437 "cPickle.c"
      case 33: // $bb33
        HEAP[$0]=0; //@line 1439 "cPickle.c"
        __label__ = 38; break; //@line 1439 "cPickle.c"
      case 34: // $err
        var $182=HEAP[$repr]; //@line 1442 "cPickle.c"
        var $183=($182)!=0; //@line 1442 "cPickle.c"
        if ($183) { __label__ = 35; break; } else { __label__ = 37; break; } //@line 1442 "cPickle.c"
      case 35: // $bb34
        var $184=HEAP[$repr]; //@line 1442 "cPickle.c"
        var $185=(($184)&4294967295); //@line 1442 "cPickle.c"
        var $186=HEAP[$185]; //@line 1442 "cPickle.c"
        var $187=((($186) - 1)&4294967295); //@line 1442 "cPickle.c"
        var $188=HEAP[$repr]; //@line 1442 "cPickle.c"
        var $189=(($188)&4294967295); //@line 1442 "cPickle.c"
        HEAP[$189]=$187; //@line 1442 "cPickle.c"
        var $190=HEAP[$repr]; //@line 1442 "cPickle.c"
        var $191=(($190)&4294967295); //@line 1442 "cPickle.c"
        var $192=HEAP[$191]; //@line 1442 "cPickle.c"
        var $193=((($192))|0)==0; //@line 1442 "cPickle.c"
        if ($193) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 1442 "cPickle.c"
      case 36: // $bb35
        var $194=HEAP[$repr]; //@line 1442 "cPickle.c"
        var $195=(($194+4)&4294967295); //@line 1442 "cPickle.c"
        var $196=HEAP[$195]; //@line 1442 "cPickle.c"
        var $197=(($196+24)&4294967295); //@line 1442 "cPickle.c"
        var $198=HEAP[$197]; //@line 1442 "cPickle.c"
        var $199=HEAP[$repr]; //@line 1442 "cPickle.c"
        FUNCTION_TABLE[$198]($199); //@line 1442 "cPickle.c"
        __label__ = 37; break; //@line 1442 "cPickle.c"
      case 37: // $bb36
        HEAP[$0]=-1; //@line 1443 "cPickle.c"
        __label__ = 38; break; //@line 1443 "cPickle.c"
      case 38: // $bb37
        var $200=HEAP[$0]; //@line 1375 "cPickle.c"
        HEAP[$retval]=$200; //@line 1375 "cPickle.c"
        __label__ = 39; break; //@line 1375 "cPickle.c"
      case 39: // $return
        var $retval38=HEAP[$retval]; //@line 1375 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval38; //@line 1375 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _store_tuple_elements($self, $t, $len) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $t_addr=__stackBase__+4;
        var $len_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $i=__stackBase__+20;
        var $res=__stackBase__+24;
        var $element=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$t_addr]=$t;
        HEAP[$len_addr]=$len;
        HEAP[$res]=-1; //@line 1452 "cPickle.c"
        var $1=HEAP[$t_addr]; //@line 1454 "cPickle.c"
        var $2=_PyTuple_Size($1); //@line 1454 "cPickle.c"
        var $3=HEAP[$len_addr]; //@line 1454 "cPickle.c"
        var $4=((($2))|0)!=((($3))|0); //@line 1454 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1454 "cPickle.c"
      case 1: // $bb
        ___assert_fail(((__str14)&4294967295), ((__str15)&4294967295), 1454, ((___PRETTY_FUNCTION___10017)&4294967295)); //@line 1454 "cPickle.c"
        throw "Reached an unreachable! Original .ll line: 5704"; //@line 1454 "cPickle.c"
      case 2: // $bb1
        HEAP[$i]=0; //@line 1456 "cPickle.c"
        __label__ = 6; break; //@line 1456 "cPickle.c"
      case 3: // $bb2
        var $5=HEAP[$t_addr]; //@line 1457 "cPickle.c"
        var $6=$5; //@line 1457 "cPickle.c"
        var $7=HEAP[$i]; //@line 1457 "cPickle.c"
        var $8=(($6+12)&4294967295); //@line 1457 "cPickle.c"
        var $9=(($8+$7*4)&4294967295); //@line 1457 "cPickle.c"
        var $10=HEAP[$9]; //@line 1457 "cPickle.c"
        HEAP[$element]=$10; //@line 1457 "cPickle.c"
        var $11=HEAP[$element]; //@line 1459 "cPickle.c"
        var $12=($11)==0; //@line 1459 "cPickle.c"
        if ($12) { __label__ = 8; break; } else { __label__ = 4; break; } //@line 1459 "cPickle.c"
      case 4: // $bb3
        var $13=HEAP[$self_addr]; //@line 1461 "cPickle.c"
        var $14=HEAP[$element]; //@line 1461 "cPickle.c"
        var $15=_save($13, $14, 0); //@line 1461 "cPickle.c"
        var $16=((($15))|0) < 0; //@line 1461 "cPickle.c"
        if ($16) { __label__ = 8; break; } else { __label__ = 5; break; } //@line 1461 "cPickle.c"
      case 5: // $bb4
        var $17=HEAP[$i]; //@line 1456 "cPickle.c"
        var $18=((($17) + 1)&4294967295); //@line 1456 "cPickle.c"
        HEAP[$i]=$18; //@line 1456 "cPickle.c"
        __label__ = 6; break; //@line 1456 "cPickle.c"
      case 6: // $bb5
        var $19=HEAP[$i]; //@line 1456 "cPickle.c"
        var $20=HEAP[$len_addr]; //@line 1456 "cPickle.c"
        var $21=((($19))|0) < ((($20))|0); //@line 1456 "cPickle.c"
        if ($21) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 1456 "cPickle.c"
      case 7: // $bb6
        HEAP[$res]=0; //@line 1464 "cPickle.c"
        __label__ = 8; break; //@line 1466 "cPickle.c"
      case 8: // $finally
        var $22=HEAP[$res]; //@line 1467 "cPickle.c"
        HEAP[$0]=$22; //@line 1467 "cPickle.c"
        var $23=HEAP[$0]; //@line 1467 "cPickle.c"
        HEAP[$retval]=$23; //@line 1467 "cPickle.c"
        __label__ = 9; break; //@line 1467 "cPickle.c"
      case 9: // $return
        var $retval7=HEAP[$retval]; //@line 1467 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 1467 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_tuple($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 34; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 34);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $py_tuple_id=__stackBase__+16;
        var $len=__stackBase__+20;
        var $i=__stackBase__+24;
        var $res=__stackBase__+28;
        var $c_str=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$py_tuple_id]=0; //@line 1479 "cPickle.c"
        HEAP[$res]=-1; //@line 1481 "cPickle.c"
        var $1=HEAP[$args_addr]; //@line 1488 "cPickle.c"
        var $2=_PyTuple_Size($1); //@line 1488 "cPickle.c"
        HEAP[$len]=$2; //@line 1488 "cPickle.c"
        var $3=HEAP[$len]; //@line 1488 "cPickle.c"
        var $4=((($3))|0) < 0; //@line 1488 "cPickle.c"
        if ($4) { __label__ = 37; break; } else { __label__ = 1; break; } //@line 1488 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[$len]; //@line 1491 "cPickle.c"
        var $6=((($5))|0)==0; //@line 1491 "cPickle.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 8; break; } //@line 1491 "cPickle.c"
      case 2: // $bb1
        var $7=HEAP[$self_addr]; //@line 1494 "cPickle.c"
        var $8=(($7+36)&4294967295); //@line 1494 "cPickle.c"
        var $9=HEAP[$8]; //@line 1494 "cPickle.c"
        var $10=((($9))|0)!=0; //@line 1494 "cPickle.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1494 "cPickle.c"
      case 3: // $bb2
        var $11=(($c_str)&4294967295); //@line 1495 "cPickle.c"
        HEAP[$11]=41; //@line 1495 "cPickle.c"
        HEAP[$len]=1; //@line 1496 "cPickle.c"
        __label__ = 5; break; //@line 1496 "cPickle.c"
      case 4: // $bb3
        var $12=(($c_str)&4294967295); //@line 1499 "cPickle.c"
        HEAP[$12]=40; //@line 1499 "cPickle.c"
        var $13=(($c_str+1)&4294967295); //@line 1500 "cPickle.c"
        HEAP[$13]=116; //@line 1500 "cPickle.c"
        HEAP[$len]=2; //@line 1501 "cPickle.c"
        __label__ = 5; break; //@line 1501 "cPickle.c"
      case 5: // $bb4
        var $14=HEAP[$self_addr]; //@line 1503 "cPickle.c"
        var $15=(($14+48)&4294967295); //@line 1503 "cPickle.c"
        var $16=HEAP[$15]; //@line 1503 "cPickle.c"
        var $17=HEAP[$self_addr]; //@line 1503 "cPickle.c"
        var $c_str5=$c_str; //@line 1503 "cPickle.c"
        var $18=HEAP[$len]; //@line 1503 "cPickle.c"
        var $19=FUNCTION_TABLE[$16]($17, $c_str5, $18); //@line 1503 "cPickle.c"
        var $20=((($19))|0) >= 0; //@line 1503 "cPickle.c"
        if ($20) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1503 "cPickle.c"
      case 6: // $bb6
        HEAP[$res]=0; //@line 1504 "cPickle.c"
        __label__ = 7; break; //@line 1504 "cPickle.c"
      case 7: // $bb7
        __label__ = 37; break; //@line 1504 "cPickle.c"
      case 8: // $bb8
        var $21=HEAP[$args_addr]; //@line 1516 "cPickle.c"
        var $22=$21; //@line 1516 "cPickle.c"
        var $23=_PyLong_FromVoidPtr($22); //@line 1516 "cPickle.c"
        HEAP[$py_tuple_id]=$23; //@line 1516 "cPickle.c"
        var $24=HEAP[$py_tuple_id]; //@line 1517 "cPickle.c"
        var $25=($24)==0; //@line 1517 "cPickle.c"
        if ($25) { __label__ = 37; break; } else { __label__ = 9; break; } //@line 1517 "cPickle.c"
      case 9: // $bb9
        var $26=HEAP[$len]; //@line 1520 "cPickle.c"
        var $27=((($26))|0) <= 3; //@line 1520 "cPickle.c"
        if ($27) { __label__ = 10; break; } else { __label__ = 21; break; } //@line 1520 "cPickle.c"
      case 10: // $bb10
        var $28=HEAP[$self_addr]; //@line 1520 "cPickle.c"
        var $29=(($28+36)&4294967295); //@line 1520 "cPickle.c"
        var $30=HEAP[$29]; //@line 1520 "cPickle.c"
        var $31=((($30))|0) > 1; //@line 1520 "cPickle.c"
        if ($31) { __label__ = 11; break; } else { __label__ = 21; break; } //@line 1520 "cPickle.c"
      case 11: // $bb11
        var $32=HEAP[$self_addr]; //@line 1522 "cPickle.c"
        var $33=HEAP[$args_addr]; //@line 1522 "cPickle.c"
        var $34=HEAP[$len]; //@line 1522 "cPickle.c"
        var $35=_store_tuple_elements($32, $33, $34); //@line 1522 "cPickle.c"
        var $36=((($35))|0) < 0; //@line 1522 "cPickle.c"
        if ($36) { __label__ = 37; break; } else { __label__ = 12; break; } //@line 1522 "cPickle.c"
      case 12: // $bb12
        var $37=HEAP[$self_addr]; //@line 1524 "cPickle.c"
        var $38=(($37+20)&4294967295); //@line 1524 "cPickle.c"
        var $39=HEAP[$38]; //@line 1524 "cPickle.c"
        var $40=HEAP[$py_tuple_id]; //@line 1524 "cPickle.c"
        var $41=_PyDict_GetItem($39, $40); //@line 1524 "cPickle.c"
        var $42=($41)!=0; //@line 1524 "cPickle.c"
        if ($42) { __label__ = 13; break; } else { __label__ = 19; break; } //@line 1524 "cPickle.c"
      case 13: // $bb13
        HEAP[$i]=0; //@line 1526 "cPickle.c"
        __label__ = 16; break; //@line 1526 "cPickle.c"
      case 14: // $bb14
        var $43=HEAP[$self_addr]; //@line 1527 "cPickle.c"
        var $44=(($43+48)&4294967295); //@line 1527 "cPickle.c"
        var $45=HEAP[$44]; //@line 1527 "cPickle.c"
        var $46=HEAP[$self_addr]; //@line 1527 "cPickle.c"
        var $47=FUNCTION_TABLE[$45]($46, _pop_10042, 1); //@line 1527 "cPickle.c"
        var $48=((($47))|0) < 0; //@line 1527 "cPickle.c"
        if ($48) { __label__ = 37; break; } else { __label__ = 15; break; } //@line 1527 "cPickle.c"
      case 15: // $bb15
        var $49=HEAP[$i]; //@line 1526 "cPickle.c"
        var $50=((($49) + 1)&4294967295); //@line 1526 "cPickle.c"
        HEAP[$i]=$50; //@line 1526 "cPickle.c"
        __label__ = 16; break; //@line 1526 "cPickle.c"
      case 16: // $bb16
        var $51=HEAP[$i]; //@line 1526 "cPickle.c"
        var $52=HEAP[$len]; //@line 1526 "cPickle.c"
        var $53=((($51))|0) < ((($52))|0); //@line 1526 "cPickle.c"
        if ($53) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 1526 "cPickle.c"
      case 17: // $bb17
        var $54=HEAP[$self_addr]; //@line 1530 "cPickle.c"
        var $55=HEAP[$py_tuple_id]; //@line 1530 "cPickle.c"
        var $56=_get($54, $55); //@line 1530 "cPickle.c"
        var $57=((($56))|0) < 0; //@line 1530 "cPickle.c"
        if ($57) { __label__ = 37; break; } else { __label__ = 18; break; } //@line 1530 "cPickle.c"
      case 18: // $bb18
        HEAP[$res]=0; //@line 1532 "cPickle.c"
        __label__ = 37; break; //@line 1532 "cPickle.c"
      case 19: // $bb19
        var $58=HEAP[$self_addr]; //@line 1536 "cPickle.c"
        var $59=(($58+48)&4294967295); //@line 1536 "cPickle.c"
        var $60=HEAP[$59]; //@line 1536 "cPickle.c"
        var $61=HEAP[$len]; //@line 1536 "cPickle.c"
        var $62=((((_len2opcode_10044)&4294967295)+$61)&4294967295); //@line 1536 "cPickle.c"
        var $63=HEAP[$self_addr]; //@line 1536 "cPickle.c"
        var $64=FUNCTION_TABLE[$60]($63, $62, 1); //@line 1536 "cPickle.c"
        var $65=((($64))|0) < 0; //@line 1536 "cPickle.c"
        if ($65) { __label__ = 37; break; } else { __label__ = 20; break; } //@line 1536 "cPickle.c"
      case 20: // $bb20
        __label__ = 35; break; //@line 1536 "cPickle.c"
      case 21: // $bb21
        var $66=HEAP[$self_addr]; //@line 1544 "cPickle.c"
        var $67=(($66+48)&4294967295); //@line 1544 "cPickle.c"
        var $68=HEAP[$67]; //@line 1544 "cPickle.c"
        var $69=HEAP[$self_addr]; //@line 1544 "cPickle.c"
        var $70=FUNCTION_TABLE[$68]($69, _MARKv, 1); //@line 1544 "cPickle.c"
        var $71=((($70))|0) < 0; //@line 1544 "cPickle.c"
        if ($71) { __label__ = 37; break; } else { __label__ = 22; break; } //@line 1544 "cPickle.c"
      case 22: // $bb22
        var $72=HEAP[$self_addr]; //@line 1547 "cPickle.c"
        var $73=HEAP[$args_addr]; //@line 1547 "cPickle.c"
        var $74=HEAP[$len]; //@line 1547 "cPickle.c"
        var $75=_store_tuple_elements($72, $73, $74); //@line 1547 "cPickle.c"
        var $76=((($75))|0) < 0; //@line 1547 "cPickle.c"
        if ($76) { __label__ = 37; break; } else { __label__ = 23; break; } //@line 1547 "cPickle.c"
      case 23: // $bb23
        var $77=HEAP[$self_addr]; //@line 1550 "cPickle.c"
        var $78=(($77+20)&4294967295); //@line 1550 "cPickle.c"
        var $79=HEAP[$78]; //@line 1550 "cPickle.c"
        var $80=HEAP[$py_tuple_id]; //@line 1550 "cPickle.c"
        var $81=_PyDict_GetItem($79, $80); //@line 1550 "cPickle.c"
        var $82=($81)!=0; //@line 1550 "cPickle.c"
        if ($82) { __label__ = 24; break; } else { __label__ = 34; break; } //@line 1550 "cPickle.c"
      case 24: // $bb24
        var $83=HEAP[$self_addr]; //@line 1552 "cPickle.c"
        var $84=(($83+40)&4294967295); //@line 1552 "cPickle.c"
        var $85=HEAP[$84]; //@line 1552 "cPickle.c"
        var $86=((($85))|0)!=0; //@line 1552 "cPickle.c"
        if ($86) { __label__ = 25; break; } else { __label__ = 27; break; } //@line 1552 "cPickle.c"
      case 25: // $bb25
        var $87=HEAP[$self_addr]; //@line 1553 "cPickle.c"
        var $88=(($87+48)&4294967295); //@line 1553 "cPickle.c"
        var $89=HEAP[$88]; //@line 1553 "cPickle.c"
        var $90=HEAP[$self_addr]; //@line 1553 "cPickle.c"
        var $91=FUNCTION_TABLE[$89]($90, _pop_mark_10043, 1); //@line 1553 "cPickle.c"
        var $92=((($91))|0) < 0; //@line 1553 "cPickle.c"
        if ($92) { __label__ = 37; break; } else { __label__ = 26; break; } //@line 1553 "cPickle.c"
      case 26: // $bb26
        __label__ = 31; break; //@line 1553 "cPickle.c"
      case 27: // $bb27
        HEAP[$i]=0; //@line 1560 "cPickle.c"
        __label__ = 30; break; //@line 1560 "cPickle.c"
      case 28: // $bb28
        var $93=HEAP[$self_addr]; //@line 1561 "cPickle.c"
        var $94=(($93+48)&4294967295); //@line 1561 "cPickle.c"
        var $95=HEAP[$94]; //@line 1561 "cPickle.c"
        var $96=HEAP[$self_addr]; //@line 1561 "cPickle.c"
        var $97=FUNCTION_TABLE[$95]($96, _pop_10042, 1); //@line 1561 "cPickle.c"
        var $98=((($97))|0) < 0; //@line 1561 "cPickle.c"
        if ($98) { __label__ = 37; break; } else { __label__ = 29; break; } //@line 1561 "cPickle.c"
      case 29: // $bb29
        var $99=HEAP[$i]; //@line 1560 "cPickle.c"
        var $100=((($99) + 1)&4294967295); //@line 1560 "cPickle.c"
        HEAP[$i]=$100; //@line 1560 "cPickle.c"
        __label__ = 30; break; //@line 1560 "cPickle.c"
      case 30: // $bb30
        var $101=HEAP[$i]; //@line 1560 "cPickle.c"
        var $102=HEAP[$len]; //@line 1560 "cPickle.c"
        var $103=((($101))|0) <= ((($102))|0); //@line 1560 "cPickle.c"
        if ($103) { __label__ = 28; break; } else { __label__ = 31; break; } //@line 1560 "cPickle.c"
      case 31: // $bb31
        var $104=HEAP[$self_addr]; //@line 1565 "cPickle.c"
        var $105=HEAP[$py_tuple_id]; //@line 1565 "cPickle.c"
        var $106=_get($104, $105); //@line 1565 "cPickle.c"
        var $107=((($106))|0) >= 0; //@line 1565 "cPickle.c"
        if ($107) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 1565 "cPickle.c"
      case 32: // $bb32
        HEAP[$res]=0; //@line 1566 "cPickle.c"
        __label__ = 33; break; //@line 1566 "cPickle.c"
      case 33: // $bb33
        __label__ = 37; break; //@line 1566 "cPickle.c"
      case 34: // $bb34
        var $108=HEAP[$self_addr]; //@line 1571 "cPickle.c"
        var $109=(($108+48)&4294967295); //@line 1571 "cPickle.c"
        var $110=HEAP[$109]; //@line 1571 "cPickle.c"
        var $111=HEAP[$self_addr]; //@line 1571 "cPickle.c"
        var $112=FUNCTION_TABLE[$110]($111, _tuple_10041, 1); //@line 1571 "cPickle.c"
        var $113=((($112))|0) < 0; //@line 1571 "cPickle.c"
        if ($113) { __label__ = 37; break; } else { __label__ = 35; break; } //@line 1571 "cPickle.c"
      case 35: // $memoize
        var $114=HEAP[$self_addr]; //@line 1575 "cPickle.c"
        var $115=HEAP[$args_addr]; //@line 1575 "cPickle.c"
        var $116=_put($114, $115); //@line 1575 "cPickle.c"
        var $117=((($116))|0) >= 0; //@line 1575 "cPickle.c"
        if ($117) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 1575 "cPickle.c"
      case 36: // $bb35
        HEAP[$res]=0; //@line 1576 "cPickle.c"
        __label__ = 37; break; //@line 1578 "cPickle.c"
      case 37: // $finally
        var $118=HEAP[$py_tuple_id]; //@line 1579 "cPickle.c"
        var $119=($118)!=0; //@line 1579 "cPickle.c"
        if ($119) { __label__ = 38; break; } else { __label__ = 40; break; } //@line 1579 "cPickle.c"
      case 38: // $bb36
        var $120=HEAP[$py_tuple_id]; //@line 1579 "cPickle.c"
        var $121=(($120)&4294967295); //@line 1579 "cPickle.c"
        var $122=HEAP[$121]; //@line 1579 "cPickle.c"
        var $123=((($122) - 1)&4294967295); //@line 1579 "cPickle.c"
        var $124=HEAP[$py_tuple_id]; //@line 1579 "cPickle.c"
        var $125=(($124)&4294967295); //@line 1579 "cPickle.c"
        HEAP[$125]=$123; //@line 1579 "cPickle.c"
        var $126=HEAP[$py_tuple_id]; //@line 1579 "cPickle.c"
        var $127=(($126)&4294967295); //@line 1579 "cPickle.c"
        var $128=HEAP[$127]; //@line 1579 "cPickle.c"
        var $129=((($128))|0)==0; //@line 1579 "cPickle.c"
        if ($129) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 1579 "cPickle.c"
      case 39: // $bb37
        var $130=HEAP[$py_tuple_id]; //@line 1579 "cPickle.c"
        var $131=(($130+4)&4294967295); //@line 1579 "cPickle.c"
        var $132=HEAP[$131]; //@line 1579 "cPickle.c"
        var $133=(($132+24)&4294967295); //@line 1579 "cPickle.c"
        var $134=HEAP[$133]; //@line 1579 "cPickle.c"
        var $135=HEAP[$py_tuple_id]; //@line 1579 "cPickle.c"
        FUNCTION_TABLE[$134]($135); //@line 1579 "cPickle.c"
        __label__ = 40; break; //@line 1579 "cPickle.c"
      case 40: // $bb38
        var $136=HEAP[$res]; //@line 1580 "cPickle.c"
        HEAP[$0]=$136; //@line 1580 "cPickle.c"
        var $137=HEAP[$0]; //@line 1580 "cPickle.c"
        HEAP[$retval]=$137; //@line 1580 "cPickle.c"
        __label__ = 41; break; //@line 1580 "cPickle.c"
      case 41: // $return
        var $retval39=HEAP[$retval]; //@line 1580 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval39; //@line 1580 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _batch_list($self, $iter) {
    var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 44);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $iter_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $obj=__stackBase__+16;
        var $firstitem=__stackBase__+20;
        var $i=__stackBase__+24;
        var $n=__stackBase__+28;
        var $_py_tmp=__stackBase__+32;
        var $_py_tmp28=__stackBase__+36;
        var $_py_tmp34=__stackBase__+40;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$iter_addr]=$iter;
        HEAP[$obj]=0; //@line 1592 "cPickle.c"
        HEAP[$firstitem]=0; //@line 1593 "cPickle.c"
        var $1=HEAP[$iter_addr]; //@line 1599 "cPickle.c"
        var $2=($1)==0; //@line 1599 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1599 "cPickle.c"
      case 1: // $bb
        ___assert_fail(((__str16)&4294967295), ((__str15)&4294967295), 1599, ((___PRETTY_FUNCTION___10137)&4294967295)); //@line 1599 "cPickle.c"
        throw "Reached an unreachable! Original .ll line: 6103"; //@line 1599 "cPickle.c"
      case 2: // $bb1
        var $3=HEAP[$self_addr]; //@line 1601 "cPickle.c"
        var $4=(($3+36)&4294967295); //@line 1601 "cPickle.c"
        var $5=HEAP[$4]; //@line 1601 "cPickle.c"
        var $6=((($5))|0)==0; //@line 1601 "cPickle.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 14; break; } //@line 1601 "cPickle.c"
      case 3: // $bb2
        var $7=HEAP[$iter_addr]; //@line 1604 "cPickle.c"
        var $8=_PyIter_Next($7); //@line 1604 "cPickle.c"
        HEAP[$obj]=$8; //@line 1604 "cPickle.c"
        var $9=HEAP[$obj]; //@line 1605 "cPickle.c"
        var $10=($9)==0; //@line 1605 "cPickle.c"
        if ($10) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 1605 "cPickle.c"
      case 4: // $bb3
        var $11=_PyErr_Occurred(); //@line 1606 "cPickle.c"
        var $12=($11)!=0; //@line 1606 "cPickle.c"
        if ($12) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1606 "cPickle.c"
      case 5: // $bb4
        HEAP[$0]=-1; //@line 1607 "cPickle.c"
        __label__ = 50; break; //@line 1607 "cPickle.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 1617 "cPickle.c"
        __label__ = 50; break; //@line 1617 "cPickle.c"
      case 7: // $bb6
        var $13=HEAP[$self_addr]; //@line 1610 "cPickle.c"
        var $14=HEAP[$obj]; //@line 1610 "cPickle.c"
        var $15=_save($13, $14, 0); //@line 1610 "cPickle.c"
        HEAP[$i]=$15; //@line 1610 "cPickle.c"
        var $16=HEAP[$obj]; //@line 1611 "cPickle.c"
        var $17=(($16)&4294967295); //@line 1611 "cPickle.c"
        var $18=HEAP[$17]; //@line 1611 "cPickle.c"
        var $19=((($18) - 1)&4294967295); //@line 1611 "cPickle.c"
        var $20=HEAP[$obj]; //@line 1611 "cPickle.c"
        var $21=(($20)&4294967295); //@line 1611 "cPickle.c"
        HEAP[$21]=$19; //@line 1611 "cPickle.c"
        var $22=HEAP[$obj]; //@line 1611 "cPickle.c"
        var $23=(($22)&4294967295); //@line 1611 "cPickle.c"
        var $24=HEAP[$23]; //@line 1611 "cPickle.c"
        var $25=((($24))|0)==0; //@line 1611 "cPickle.c"
        if ($25) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1611 "cPickle.c"
      case 8: // $bb7
        var $26=HEAP[$obj]; //@line 1611 "cPickle.c"
        var $27=(($26+4)&4294967295); //@line 1611 "cPickle.c"
        var $28=HEAP[$27]; //@line 1611 "cPickle.c"
        var $29=(($28+24)&4294967295); //@line 1611 "cPickle.c"
        var $30=HEAP[$29]; //@line 1611 "cPickle.c"
        var $31=HEAP[$obj]; //@line 1611 "cPickle.c"
        FUNCTION_TABLE[$30]($31); //@line 1611 "cPickle.c"
        __label__ = 9; break; //@line 1611 "cPickle.c"
      case 9: // $bb8
        var $32=HEAP[$i]; //@line 1612 "cPickle.c"
        var $33=((($32))|0) < 0; //@line 1612 "cPickle.c"
        if ($33) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1612 "cPickle.c"
      case 10: // $bb9
        HEAP[$0]=-1; //@line 1613 "cPickle.c"
        __label__ = 50; break; //@line 1613 "cPickle.c"
      case 11: // $bb10
        var $34=HEAP[$self_addr]; //@line 1614 "cPickle.c"
        var $35=(($34+48)&4294967295); //@line 1614 "cPickle.c"
        var $36=HEAP[$35]; //@line 1614 "cPickle.c"
        var $37=HEAP[$self_addr]; //@line 1614 "cPickle.c"
        var $38=FUNCTION_TABLE[$36]($37, _append_10135, 1); //@line 1614 "cPickle.c"
        var $39=((($38))|0) < 0; //@line 1614 "cPickle.c"
        if ($39) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1614 "cPickle.c"
      case 12: // $bb11
        HEAP[$0]=-1; //@line 1615 "cPickle.c"
        __label__ = 50; break; //@line 1615 "cPickle.c"
      case 13: // $bb12
        __label__ = 3; break; //@line 1615 "cPickle.c"
      case 14: // $bb13
        var $40=HEAP[$iter_addr]; //@line 1623 "cPickle.c"
        var $41=_PyIter_Next($40); //@line 1623 "cPickle.c"
        HEAP[$firstitem]=$41; //@line 1623 "cPickle.c"
        var $42=HEAP[$firstitem]; //@line 1624 "cPickle.c"
        var $43=($42)==0; //@line 1624 "cPickle.c"
        if ($43) { __label__ = 15; break; } else { __label__ = 17; break; } //@line 1624 "cPickle.c"
      case 15: // $bb14
        var $44=_PyErr_Occurred(); //@line 1625 "cPickle.c"
        var $45=($44)!=0; //@line 1625 "cPickle.c"
        if ($45) { __label__ = 43; break; } else { __label__ = 16; break; } //@line 1625 "cPickle.c"
      case 16: // $bb15
        __label__ = 42; break; //@line 1625 "cPickle.c"
      case 17: // $bb16
        var $46=HEAP[$iter_addr]; //@line 1633 "cPickle.c"
        var $47=_PyIter_Next($46); //@line 1633 "cPickle.c"
        HEAP[$obj]=$47; //@line 1633 "cPickle.c"
        var $48=HEAP[$obj]; //@line 1634 "cPickle.c"
        var $49=($48)==0; //@line 1634 "cPickle.c"
        if ($49) { __label__ = 18; break; } else { __label__ = 25; break; } //@line 1634 "cPickle.c"
      case 18: // $bb17
        var $50=_PyErr_Occurred(); //@line 1635 "cPickle.c"
        var $51=($50)!=0; //@line 1635 "cPickle.c"
        if ($51) { __label__ = 43; break; } else { __label__ = 19; break; } //@line 1635 "cPickle.c"
      case 19: // $bb18
        var $52=HEAP[$self_addr]; //@line 1639 "cPickle.c"
        var $53=HEAP[$firstitem]; //@line 1639 "cPickle.c"
        var $54=_save($52, $53, 0); //@line 1639 "cPickle.c"
        var $55=((($54))|0) < 0; //@line 1639 "cPickle.c"
        if ($55) { __label__ = 43; break; } else { __label__ = 20; break; } //@line 1639 "cPickle.c"
      case 20: // $bb19
        var $56=HEAP[$self_addr]; //@line 1641 "cPickle.c"
        var $57=(($56+48)&4294967295); //@line 1641 "cPickle.c"
        var $58=HEAP[$57]; //@line 1641 "cPickle.c"
        var $59=HEAP[$self_addr]; //@line 1641 "cPickle.c"
        var $60=FUNCTION_TABLE[$58]($59, _append_10135, 1); //@line 1641 "cPickle.c"
        var $61=((($60))|0) < 0; //@line 1641 "cPickle.c"
        if ($61) { __label__ = 43; break; } else { __label__ = 21; break; } //@line 1641 "cPickle.c"
      case 21: // $bb20
        var $62=HEAP[$firstitem]; //@line 1643 "cPickle.c"
        var $63=($62)!=0; //@line 1643 "cPickle.c"
        if ($63) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 1643 "cPickle.c"
      case 22: // $bb21
        var $64=HEAP[$firstitem]; //@line 1643 "cPickle.c"
        HEAP[$_py_tmp]=$64; //@line 1643 "cPickle.c"
        HEAP[$firstitem]=0; //@line 1643 "cPickle.c"
        var $65=HEAP[$_py_tmp]; //@line 1643 "cPickle.c"
        var $66=(($65)&4294967295); //@line 1643 "cPickle.c"
        var $67=HEAP[$66]; //@line 1643 "cPickle.c"
        var $68=((($67) - 1)&4294967295); //@line 1643 "cPickle.c"
        var $69=HEAP[$_py_tmp]; //@line 1643 "cPickle.c"
        var $70=(($69)&4294967295); //@line 1643 "cPickle.c"
        HEAP[$70]=$68; //@line 1643 "cPickle.c"
        var $71=HEAP[$_py_tmp]; //@line 1643 "cPickle.c"
        var $72=(($71)&4294967295); //@line 1643 "cPickle.c"
        var $73=HEAP[$72]; //@line 1643 "cPickle.c"
        var $74=((($73))|0)==0; //@line 1643 "cPickle.c"
        if ($74) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 1643 "cPickle.c"
      case 23: // $bb22
        var $75=HEAP[$_py_tmp]; //@line 1643 "cPickle.c"
        var $76=(($75+4)&4294967295); //@line 1643 "cPickle.c"
        var $77=HEAP[$76]; //@line 1643 "cPickle.c"
        var $78=(($77+24)&4294967295); //@line 1643 "cPickle.c"
        var $79=HEAP[$78]; //@line 1643 "cPickle.c"
        var $80=HEAP[$_py_tmp]; //@line 1643 "cPickle.c"
        FUNCTION_TABLE[$79]($80); //@line 1643 "cPickle.c"
        __label__ = 24; break; //@line 1643 "cPickle.c"
      case 24: // $bb23
        __label__ = 42; break; //@line 1643 "cPickle.c"
      case 25: // $bb24
        var $81=HEAP[$self_addr]; //@line 1650 "cPickle.c"
        var $82=(($81+48)&4294967295); //@line 1650 "cPickle.c"
        var $83=HEAP[$82]; //@line 1650 "cPickle.c"
        var $84=HEAP[$self_addr]; //@line 1650 "cPickle.c"
        var $85=FUNCTION_TABLE[$83]($84, _MARKv, 1); //@line 1650 "cPickle.c"
        var $86=((($85))|0) < 0; //@line 1650 "cPickle.c"
        if ($86) { __label__ = 43; break; } else { __label__ = 26; break; } //@line 1650 "cPickle.c"
      case 26: // $bb25
        var $87=HEAP[$self_addr]; //@line 1653 "cPickle.c"
        var $88=HEAP[$firstitem]; //@line 1653 "cPickle.c"
        var $89=_save($87, $88, 0); //@line 1653 "cPickle.c"
        var $90=((($89))|0) < 0; //@line 1653 "cPickle.c"
        if ($90) { __label__ = 43; break; } else { __label__ = 27; break; } //@line 1653 "cPickle.c"
      case 27: // $bb26
        var $91=HEAP[$firstitem]; //@line 1655 "cPickle.c"
        var $92=($91)!=0; //@line 1655 "cPickle.c"
        if ($92) { __label__ = 28; break; } else { __label__ = 30; break; } //@line 1655 "cPickle.c"
      case 28: // $bb27
        var $93=HEAP[$firstitem]; //@line 1655 "cPickle.c"
        HEAP[$_py_tmp28]=$93; //@line 1655 "cPickle.c"
        HEAP[$firstitem]=0; //@line 1655 "cPickle.c"
        var $94=HEAP[$_py_tmp28]; //@line 1655 "cPickle.c"
        var $95=(($94)&4294967295); //@line 1655 "cPickle.c"
        var $96=HEAP[$95]; //@line 1655 "cPickle.c"
        var $97=((($96) - 1)&4294967295); //@line 1655 "cPickle.c"
        var $98=HEAP[$_py_tmp28]; //@line 1655 "cPickle.c"
        var $99=(($98)&4294967295); //@line 1655 "cPickle.c"
        HEAP[$99]=$97; //@line 1655 "cPickle.c"
        var $100=HEAP[$_py_tmp28]; //@line 1655 "cPickle.c"
        var $101=(($100)&4294967295); //@line 1655 "cPickle.c"
        var $102=HEAP[$101]; //@line 1655 "cPickle.c"
        var $103=((($102))|0)==0; //@line 1655 "cPickle.c"
        if ($103) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 1655 "cPickle.c"
      case 29: // $bb29
        var $104=HEAP[$_py_tmp28]; //@line 1655 "cPickle.c"
        var $105=(($104+4)&4294967295); //@line 1655 "cPickle.c"
        var $106=HEAP[$105]; //@line 1655 "cPickle.c"
        var $107=(($106+24)&4294967295); //@line 1655 "cPickle.c"
        var $108=HEAP[$107]; //@line 1655 "cPickle.c"
        var $109=HEAP[$_py_tmp28]; //@line 1655 "cPickle.c"
        FUNCTION_TABLE[$108]($109); //@line 1655 "cPickle.c"
        __label__ = 30; break; //@line 1655 "cPickle.c"
      case 30: // $bb30
        HEAP[$n]=1; //@line 1656 "cPickle.c"
        __label__ = 39; break; //@line 1656 "cPickle.c"
      case 31: // $bb31
        var $110=HEAP[$self_addr]; //@line 1660 "cPickle.c"
        var $111=HEAP[$obj]; //@line 1660 "cPickle.c"
        var $112=_save($110, $111, 0); //@line 1660 "cPickle.c"
        var $113=((($112))|0) < 0; //@line 1660 "cPickle.c"
        if ($113) { __label__ = 43; break; } else { __label__ = 32; break; } //@line 1660 "cPickle.c"
      case 32: // $bb32
        var $114=HEAP[$obj]; //@line 1662 "cPickle.c"
        var $115=($114)!=0; //@line 1662 "cPickle.c"
        if ($115) { __label__ = 33; break; } else { __label__ = 35; break; } //@line 1662 "cPickle.c"
      case 33: // $bb33
        var $116=HEAP[$obj]; //@line 1662 "cPickle.c"
        HEAP[$_py_tmp34]=$116; //@line 1662 "cPickle.c"
        HEAP[$obj]=0; //@line 1662 "cPickle.c"
        var $117=HEAP[$_py_tmp34]; //@line 1662 "cPickle.c"
        var $118=(($117)&4294967295); //@line 1662 "cPickle.c"
        var $119=HEAP[$118]; //@line 1662 "cPickle.c"
        var $120=((($119) - 1)&4294967295); //@line 1662 "cPickle.c"
        var $121=HEAP[$_py_tmp34]; //@line 1662 "cPickle.c"
        var $122=(($121)&4294967295); //@line 1662 "cPickle.c"
        HEAP[$122]=$120; //@line 1662 "cPickle.c"
        var $123=HEAP[$_py_tmp34]; //@line 1662 "cPickle.c"
        var $124=(($123)&4294967295); //@line 1662 "cPickle.c"
        var $125=HEAP[$124]; //@line 1662 "cPickle.c"
        var $126=((($125))|0)==0; //@line 1662 "cPickle.c"
        if ($126) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 1662 "cPickle.c"
      case 34: // $bb35
        var $127=HEAP[$_py_tmp34]; //@line 1662 "cPickle.c"
        var $128=(($127+4)&4294967295); //@line 1662 "cPickle.c"
        var $129=HEAP[$128]; //@line 1662 "cPickle.c"
        var $130=(($129+24)&4294967295); //@line 1662 "cPickle.c"
        var $131=HEAP[$130]; //@line 1662 "cPickle.c"
        var $132=HEAP[$_py_tmp34]; //@line 1662 "cPickle.c"
        FUNCTION_TABLE[$131]($132); //@line 1662 "cPickle.c"
        __label__ = 35; break; //@line 1662 "cPickle.c"
      case 35: // $bb36
        var $133=HEAP[$n]; //@line 1663 "cPickle.c"
        var $134=((($133) + 1)&4294967295); //@line 1663 "cPickle.c"
        HEAP[$n]=$134; //@line 1663 "cPickle.c"
        var $135=HEAP[$n]; //@line 1665 "cPickle.c"
        var $136=((($135))|0)==1000; //@line 1665 "cPickle.c"
        if ($136) { __label__ = 40; break; } else { __label__ = 36; break; } //@line 1665 "cPickle.c"
      case 36: // $bb37
        var $137=HEAP[$iter_addr]; //@line 1668 "cPickle.c"
        var $138=_PyIter_Next($137); //@line 1668 "cPickle.c"
        HEAP[$obj]=$138; //@line 1668 "cPickle.c"
        var $139=HEAP[$obj]; //@line 1669 "cPickle.c"
        var $140=($139)==0; //@line 1669 "cPickle.c"
        if ($140) { __label__ = 37; break; } else { __label__ = 39; break; } //@line 1669 "cPickle.c"
      case 37: // $bb38
        var $141=_PyErr_Occurred(); //@line 1670 "cPickle.c"
        var $142=($141)!=0; //@line 1670 "cPickle.c"
        if ($142) { __label__ = 43; break; } else { __label__ = 38; break; } //@line 1670 "cPickle.c"
      case 38: // $bb39
        __label__ = 40; break; //@line 1670 "cPickle.c"
      case 39: // $bb40
        var $143=HEAP[$obj]; //@line 1659 "cPickle.c"
        var $144=($143)!=0; //@line 1659 "cPickle.c"
        if ($144) { __label__ = 31; break; } else { __label__ = 40; break; } //@line 1659 "cPickle.c"
      case 40: // $bb41
        var $145=HEAP[$self_addr]; //@line 1676 "cPickle.c"
        var $146=(($145+48)&4294967295); //@line 1676 "cPickle.c"
        var $147=HEAP[$146]; //@line 1676 "cPickle.c"
        var $148=HEAP[$self_addr]; //@line 1676 "cPickle.c"
        var $149=FUNCTION_TABLE[$147]($148, _appends_10136, 1); //@line 1676 "cPickle.c"
        var $150=((($149))|0) < 0; //@line 1676 "cPickle.c"
        if ($150) { __label__ = 43; break; } else { __label__ = 41; break; } //@line 1676 "cPickle.c"
      case 41: // $bb42
        var $151=HEAP[$n]; //@line 1679 "cPickle.c"
        var $152=((($151))|0)==1000; //@line 1679 "cPickle.c"
        if ($152) { __label__ = 14; break; } else { __label__ = 42; break; } //@line 1679 "cPickle.c"
      case 42: // $bb43
        HEAP[$0]=0; //@line 1680 "cPickle.c"
        __label__ = 50; break; //@line 1680 "cPickle.c"
      case 43: // $BatchFailed
        var $153=HEAP[$firstitem]; //@line 1683 "cPickle.c"
        var $154=($153)!=0; //@line 1683 "cPickle.c"
        if ($154) { __label__ = 44; break; } else { __label__ = 46; break; } //@line 1683 "cPickle.c"
      case 44: // $bb44
        var $155=HEAP[$firstitem]; //@line 1683 "cPickle.c"
        var $156=(($155)&4294967295); //@line 1683 "cPickle.c"
        var $157=HEAP[$156]; //@line 1683 "cPickle.c"
        var $158=((($157) - 1)&4294967295); //@line 1683 "cPickle.c"
        var $159=HEAP[$firstitem]; //@line 1683 "cPickle.c"
        var $160=(($159)&4294967295); //@line 1683 "cPickle.c"
        HEAP[$160]=$158; //@line 1683 "cPickle.c"
        var $161=HEAP[$firstitem]; //@line 1683 "cPickle.c"
        var $162=(($161)&4294967295); //@line 1683 "cPickle.c"
        var $163=HEAP[$162]; //@line 1683 "cPickle.c"
        var $164=((($163))|0)==0; //@line 1683 "cPickle.c"
        if ($164) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 1683 "cPickle.c"
      case 45: // $bb45
        var $165=HEAP[$firstitem]; //@line 1683 "cPickle.c"
        var $166=(($165+4)&4294967295); //@line 1683 "cPickle.c"
        var $167=HEAP[$166]; //@line 1683 "cPickle.c"
        var $168=(($167+24)&4294967295); //@line 1683 "cPickle.c"
        var $169=HEAP[$168]; //@line 1683 "cPickle.c"
        var $170=HEAP[$firstitem]; //@line 1683 "cPickle.c"
        FUNCTION_TABLE[$169]($170); //@line 1683 "cPickle.c"
        __label__ = 46; break; //@line 1683 "cPickle.c"
      case 46: // $bb46
        var $171=HEAP[$obj]; //@line 1684 "cPickle.c"
        var $172=($171)!=0; //@line 1684 "cPickle.c"
        if ($172) { __label__ = 47; break; } else { __label__ = 49; break; } //@line 1684 "cPickle.c"
      case 47: // $bb47
        var $173=HEAP[$obj]; //@line 1684 "cPickle.c"
        var $174=(($173)&4294967295); //@line 1684 "cPickle.c"
        var $175=HEAP[$174]; //@line 1684 "cPickle.c"
        var $176=((($175) - 1)&4294967295); //@line 1684 "cPickle.c"
        var $177=HEAP[$obj]; //@line 1684 "cPickle.c"
        var $178=(($177)&4294967295); //@line 1684 "cPickle.c"
        HEAP[$178]=$176; //@line 1684 "cPickle.c"
        var $179=HEAP[$obj]; //@line 1684 "cPickle.c"
        var $180=(($179)&4294967295); //@line 1684 "cPickle.c"
        var $181=HEAP[$180]; //@line 1684 "cPickle.c"
        var $182=((($181))|0)==0; //@line 1684 "cPickle.c"
        if ($182) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 1684 "cPickle.c"
      case 48: // $bb48
        var $183=HEAP[$obj]; //@line 1684 "cPickle.c"
        var $184=(($183+4)&4294967295); //@line 1684 "cPickle.c"
        var $185=HEAP[$184]; //@line 1684 "cPickle.c"
        var $186=(($185+24)&4294967295); //@line 1684 "cPickle.c"
        var $187=HEAP[$186]; //@line 1684 "cPickle.c"
        var $188=HEAP[$obj]; //@line 1684 "cPickle.c"
        FUNCTION_TABLE[$187]($188); //@line 1684 "cPickle.c"
        __label__ = 49; break; //@line 1684 "cPickle.c"
      case 49: // $bb49
        HEAP[$0]=-1; //@line 1685 "cPickle.c"
        __label__ = 50; break; //@line 1685 "cPickle.c"
      case 50: // $bb50
        var $189=HEAP[$0]; //@line 1607 "cPickle.c"
        HEAP[$retval]=$189; //@line 1607 "cPickle.c"
        __label__ = 51; break; //@line 1607 "cPickle.c"
      case 51: // $return
        var $retval51=HEAP[$retval]; //@line 1607 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval51; //@line 1607 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_list($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 35; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 35);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $iftmp_93=__stackBase__+16;
        var $res=__stackBase__+20;
        var $s=__stackBase__+24;
        var $len=__stackBase__+27;
        var $iter=__stackBase__+31;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$res]=-1; //@line 1691 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 1696 "cPickle.c"
        var $2=(($1+44)&4294967295); //@line 1696 "cPickle.c"
        var $3=HEAP[$2]; //@line 1696 "cPickle.c"
        var $4=((($3))|0)!=0; //@line 1696 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1696 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 1696 "cPickle.c"
        var $6=HEAP[$args_addr]; //@line 1696 "cPickle.c"
        var $7=_fast_save_enter($5, $6); //@line 1696 "cPickle.c"
        var $8=((($7))|0)==0; //@line 1696 "cPickle.c"
        if ($8) { __label__ = 21; break; } else { __label__ = 2; break; } //@line 1696 "cPickle.c"
      case 2: // $bb1
        var $9=HEAP[$self_addr]; //@line 1700 "cPickle.c"
        var $10=(($9+40)&4294967295); //@line 1700 "cPickle.c"
        var $11=HEAP[$10]; //@line 1700 "cPickle.c"
        var $12=((($11))|0)!=0; //@line 1700 "cPickle.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1700 "cPickle.c"
      case 3: // $bb2
        var $13=(($s)&4294967295); //@line 1701 "cPickle.c"
        HEAP[$13]=93; //@line 1701 "cPickle.c"
        HEAP[$len]=1; //@line 1702 "cPickle.c"
        __label__ = 5; break; //@line 1702 "cPickle.c"
      case 4: // $bb3
        var $14=(($s)&4294967295); //@line 1705 "cPickle.c"
        HEAP[$14]=40; //@line 1705 "cPickle.c"
        var $15=(($s+1)&4294967295); //@line 1706 "cPickle.c"
        HEAP[$15]=108; //@line 1706 "cPickle.c"
        HEAP[$len]=2; //@line 1707 "cPickle.c"
        __label__ = 5; break; //@line 1707 "cPickle.c"
      case 5: // $bb4
        var $16=HEAP[$self_addr]; //@line 1710 "cPickle.c"
        var $17=(($16+48)&4294967295); //@line 1710 "cPickle.c"
        var $18=HEAP[$17]; //@line 1710 "cPickle.c"
        var $19=HEAP[$self_addr]; //@line 1710 "cPickle.c"
        var $s5=$s; //@line 1710 "cPickle.c"
        var $20=HEAP[$len]; //@line 1710 "cPickle.c"
        var $21=FUNCTION_TABLE[$18]($19, $s5, $20); //@line 1710 "cPickle.c"
        var $22=((($21))|0) < 0; //@line 1710 "cPickle.c"
        if ($22) { __label__ = 21; break; } else { __label__ = 6; break; } //@line 1710 "cPickle.c"
      case 6: // $bb6
        var $23=HEAP[$args_addr]; //@line 1714 "cPickle.c"
        var $24=_PyList_Size($23); //@line 1714 "cPickle.c"
        HEAP[$len]=$24; //@line 1714 "cPickle.c"
        var $25=HEAP[$len]; //@line 1714 "cPickle.c"
        var $26=((($25))|0) < 0; //@line 1714 "cPickle.c"
        if ($26) { __label__ = 21; break; } else { __label__ = 7; break; } //@line 1714 "cPickle.c"
      case 7: // $bb7
        var $27=HEAP[$len]; //@line 1718 "cPickle.c"
        var $28=((($27))|0)==0; //@line 1718 "cPickle.c"
        if ($28) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 1718 "cPickle.c"
      case 8: // $bb8
        var $29=HEAP[$self_addr]; //@line 1719 "cPickle.c"
        var $30=HEAP[$args_addr]; //@line 1719 "cPickle.c"
        var $31=_put($29, $30); //@line 1719 "cPickle.c"
        var $32=((($31))|0) >= 0; //@line 1719 "cPickle.c"
        if ($32) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1719 "cPickle.c"
      case 9: // $bb9
        HEAP[$res]=0; //@line 1720 "cPickle.c"
        __label__ = 10; break; //@line 1720 "cPickle.c"
      case 10: // $bb10
        __label__ = 21; break; //@line 1720 "cPickle.c"
      case 11: // $bb11
        var $33=HEAP[$self_addr]; //@line 1723 "cPickle.c"
        var $34=HEAP[$args_addr]; //@line 1723 "cPickle.c"
        var $35=_put2($33, $34); //@line 1723 "cPickle.c"
        var $36=((($35))|0) < 0; //@line 1723 "cPickle.c"
        if ($36) { __label__ = 21; break; } else { __label__ = 12; break; } //@line 1723 "cPickle.c"
      case 12: // $bb12
        var $37=HEAP[$args_addr]; //@line 1727 "cPickle.c"
        var $38=_PyObject_GetIter($37); //@line 1727 "cPickle.c"
        HEAP[$iter]=$38; //@line 1727 "cPickle.c"
        var $39=HEAP[$iter]; //@line 1728 "cPickle.c"
        var $40=($39)==0; //@line 1728 "cPickle.c"
        if ($40) { __label__ = 21; break; } else { __label__ = 13; break; } //@line 1728 "cPickle.c"
      case 13: // $bb13
        var $41=HEAP[__PyThreadState_Current]; //@line 1731 "cPickle.c"
        var $42=(($41+12)&4294967295); //@line 1731 "cPickle.c"
        var $43=HEAP[$42]; //@line 1731 "cPickle.c"
        var $44=((($43) + 1)&4294967295); //@line 1731 "cPickle.c"
        var $45=(($41+12)&4294967295); //@line 1731 "cPickle.c"
        HEAP[$45]=$44; //@line 1731 "cPickle.c"
        var $46=(($41+12)&4294967295); //@line 1731 "cPickle.c"
        var $47=HEAP[$46]; //@line 1731 "cPickle.c"
        var $48=HEAP[__Py_CheckRecursionLimit]; //@line 1731 "cPickle.c"
        var $49=((($47))|0) <= ((($48))|0); //@line 1731 "cPickle.c"
        if ($49) { __label__ = 16; break; } else { __label__ = 14; break; } //@line 1731 "cPickle.c"
      case 14: // $bb14
        var $50=__Py_CheckRecursiveCall(((__str17)&4294967295)); //@line 1731 "cPickle.c"
        var $51=((($50))|0)==0; //@line 1731 "cPickle.c"
        if ($51) { __label__ = 16; break; } else { __label__ = 15; break; } //@line 1731 "cPickle.c"
      case 15: // $bb15
        HEAP[$iftmp_93]=1; //@line 1731 "cPickle.c"
        __label__ = 17; break; //@line 1731 "cPickle.c"
      case 16: // $bb16
        HEAP[$iftmp_93]=0; //@line 1731 "cPickle.c"
        __label__ = 17; break; //@line 1731 "cPickle.c"
      case 17: // $bb17
        var $52=HEAP[$iftmp_93]; //@line 1731 "cPickle.c"
        var $53=((($52))|0)==0; //@line 1731 "cPickle.c"
        if ($53) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 1731 "cPickle.c"
      case 18: // $bb18
        var $54=HEAP[$self_addr]; //@line 1733 "cPickle.c"
        var $55=HEAP[$iter]; //@line 1733 "cPickle.c"
        var $56=_batch_list($54, $55); //@line 1733 "cPickle.c"
        HEAP[$res]=$56; //@line 1733 "cPickle.c"
        var $57=HEAP[__PyThreadState_Current]; //@line 1734 "cPickle.c"
        var $58=(($57+12)&4294967295); //@line 1734 "cPickle.c"
        var $59=HEAP[$58]; //@line 1734 "cPickle.c"
        var $60=((($59) - 1)&4294967295); //@line 1734 "cPickle.c"
        var $61=(($57+12)&4294967295); //@line 1734 "cPickle.c"
        HEAP[$61]=$60; //@line 1734 "cPickle.c"
        __label__ = 19; break; //@line 1734 "cPickle.c"
      case 19: // $bb19
        var $62=HEAP[$iter]; //@line 1736 "cPickle.c"
        var $63=(($62)&4294967295); //@line 1736 "cPickle.c"
        var $64=HEAP[$63]; //@line 1736 "cPickle.c"
        var $65=((($64) - 1)&4294967295); //@line 1736 "cPickle.c"
        var $66=HEAP[$iter]; //@line 1736 "cPickle.c"
        var $67=(($66)&4294967295); //@line 1736 "cPickle.c"
        HEAP[$67]=$65; //@line 1736 "cPickle.c"
        var $68=HEAP[$iter]; //@line 1736 "cPickle.c"
        var $69=(($68)&4294967295); //@line 1736 "cPickle.c"
        var $70=HEAP[$69]; //@line 1736 "cPickle.c"
        var $71=((($70))|0)==0; //@line 1736 "cPickle.c"
        if ($71) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1736 "cPickle.c"
      case 20: // $bb20
        var $72=HEAP[$iter]; //@line 1736 "cPickle.c"
        var $73=(($72+4)&4294967295); //@line 1736 "cPickle.c"
        var $74=HEAP[$73]; //@line 1736 "cPickle.c"
        var $75=(($74+24)&4294967295); //@line 1736 "cPickle.c"
        var $76=HEAP[$75]; //@line 1736 "cPickle.c"
        var $77=HEAP[$iter]; //@line 1736 "cPickle.c"
        FUNCTION_TABLE[$76]($77); //@line 1736 "cPickle.c"
        __label__ = 21; break; //@line 1738 "cPickle.c"
      case 21: // $finally
        var $78=HEAP[$self_addr]; //@line 1739 "cPickle.c"
        var $79=(($78+44)&4294967295); //@line 1739 "cPickle.c"
        var $80=HEAP[$79]; //@line 1739 "cPickle.c"
        var $81=((($80))|0)!=0; //@line 1739 "cPickle.c"
        if ($81) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 1739 "cPickle.c"
      case 22: // $bb21
        var $82=HEAP[$self_addr]; //@line 1739 "cPickle.c"
        var $83=HEAP[$args_addr]; //@line 1739 "cPickle.c"
        var $84=_fast_save_leave($82, $83); //@line 1739 "cPickle.c"
        var $85=((($84))|0)==0; //@line 1739 "cPickle.c"
        if ($85) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 1739 "cPickle.c"
      case 23: // $bb22
        HEAP[$res]=-1; //@line 1740 "cPickle.c"
        __label__ = 24; break; //@line 1740 "cPickle.c"
      case 24: // $bb23
        var $86=HEAP[$res]; //@line 1742 "cPickle.c"
        HEAP[$0]=$86; //@line 1742 "cPickle.c"
        var $87=HEAP[$0]; //@line 1742 "cPickle.c"
        HEAP[$retval]=$87; //@line 1742 "cPickle.c"
        __label__ = 25; break; //@line 1742 "cPickle.c"
      case 25: // $return
        var $retval24=HEAP[$retval]; //@line 1742 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval24; //@line 1742 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _batch_dict($self, $iter) {
    var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 44);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $iter_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $p=__stackBase__+16;
        var $firstitem=__stackBase__+20;
        var $i=__stackBase__+24;
        var $n=__stackBase__+28;
        var $_py_tmp=__stackBase__+32;
        var $_py_tmp38=__stackBase__+36;
        var $_py_tmp48=__stackBase__+40;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$iter_addr]=$iter;
        HEAP[$p]=0; //@line 1760 "cPickle.c"
        HEAP[$firstitem]=0; //@line 1761 "cPickle.c"
        var $1=HEAP[$iter_addr]; //@line 1767 "cPickle.c"
        var $2=($1)==0; //@line 1767 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1767 "cPickle.c"
      case 1: // $bb
        ___assert_fail(((__str16)&4294967295), ((__str15)&4294967295), 1767, ((___PRETTY_FUNCTION___10326)&4294967295)); //@line 1767 "cPickle.c"
        throw "Reached an unreachable! Original .ll line: 6729"; //@line 1767 "cPickle.c"
      case 2: // $bb1
        var $3=HEAP[$self_addr]; //@line 1769 "cPickle.c"
        var $4=(($3+36)&4294967295); //@line 1769 "cPickle.c"
        var $5=HEAP[$4]; //@line 1769 "cPickle.c"
        var $6=((($5))|0)==0; //@line 1769 "cPickle.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 19; break; } //@line 1769 "cPickle.c"
      case 3: // $bb2
        var $7=HEAP[$iter_addr]; //@line 1772 "cPickle.c"
        var $8=_PyIter_Next($7); //@line 1772 "cPickle.c"
        HEAP[$p]=$8; //@line 1772 "cPickle.c"
        var $9=HEAP[$p]; //@line 1773 "cPickle.c"
        var $10=($9)==0; //@line 1773 "cPickle.c"
        if ($10) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 1773 "cPickle.c"
      case 4: // $bb3
        var $11=_PyErr_Occurred(); //@line 1774 "cPickle.c"
        var $12=($11)!=0; //@line 1774 "cPickle.c"
        if ($12) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1774 "cPickle.c"
      case 5: // $bb4
        HEAP[$0]=-1; //@line 1775 "cPickle.c"
        __label__ = 64; break; //@line 1775 "cPickle.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 1792 "cPickle.c"
        __label__ = 64; break; //@line 1792 "cPickle.c"
      case 7: // $bb6
        var $13=HEAP[$p]; //@line 1778 "cPickle.c"
        var $14=(($13+4)&4294967295); //@line 1778 "cPickle.c"
        var $15=HEAP[$14]; //@line 1778 "cPickle.c"
        var $16=(($15+84)&4294967295); //@line 1778 "cPickle.c"
        var $17=HEAP[$16]; //@line 1778 "cPickle.c"
        var $18=($17) & 67108864; //@line 1778 "cPickle.c"
        var $19=((($18))|0)==0; //@line 1778 "cPickle.c"
        if ($19) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 1778 "cPickle.c"
      case 8: // $bb7
        var $20=HEAP[$p]; //@line 1778 "cPickle.c"
        var $21=_PyTuple_Size($20); //@line 1778 "cPickle.c"
        var $22=((($21))|0)!=2; //@line 1778 "cPickle.c"
        if ($22) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1778 "cPickle.c"
      case 9: // $bb8
        var $23=HEAP[_PyExc_TypeError]; //@line 1779 "cPickle.c"
        _PyErr_SetString($23, ((__str18)&4294967295)); //@line 1779 "cPickle.c"
        HEAP[$0]=-1; //@line 1781 "cPickle.c"
        __label__ = 64; break; //@line 1781 "cPickle.c"
      case 10: // $bb9
        var $24=HEAP[$p]; //@line 1783 "cPickle.c"
        var $25=$24; //@line 1783 "cPickle.c"
        var $26=(($25+12)&4294967295); //@line 1783 "cPickle.c"
        var $27=(($26)&4294967295); //@line 1783 "cPickle.c"
        var $28=HEAP[$27]; //@line 1783 "cPickle.c"
        var $29=HEAP[$self_addr]; //@line 1783 "cPickle.c"
        var $30=_save($29, $28, 0); //@line 1783 "cPickle.c"
        HEAP[$i]=$30; //@line 1783 "cPickle.c"
        var $31=HEAP[$i]; //@line 1784 "cPickle.c"
        var $32=((($31))|0) >= 0; //@line 1784 "cPickle.c"
        if ($32) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1784 "cPickle.c"
      case 11: // $bb10
        var $33=HEAP[$p]; //@line 1785 "cPickle.c"
        var $34=$33; //@line 1785 "cPickle.c"
        var $35=(($34+12)&4294967295); //@line 1785 "cPickle.c"
        var $36=(($35+4)&4294967295); //@line 1785 "cPickle.c"
        var $37=HEAP[$36]; //@line 1785 "cPickle.c"
        var $38=HEAP[$self_addr]; //@line 1785 "cPickle.c"
        var $39=_save($38, $37, 0); //@line 1785 "cPickle.c"
        HEAP[$i]=$39; //@line 1785 "cPickle.c"
        __label__ = 12; break; //@line 1785 "cPickle.c"
      case 12: // $bb11
        var $40=HEAP[$p]; //@line 1786 "cPickle.c"
        var $41=(($40)&4294967295); //@line 1786 "cPickle.c"
        var $42=HEAP[$41]; //@line 1786 "cPickle.c"
        var $43=((($42) - 1)&4294967295); //@line 1786 "cPickle.c"
        var $44=HEAP[$p]; //@line 1786 "cPickle.c"
        var $45=(($44)&4294967295); //@line 1786 "cPickle.c"
        HEAP[$45]=$43; //@line 1786 "cPickle.c"
        var $46=HEAP[$p]; //@line 1786 "cPickle.c"
        var $47=(($46)&4294967295); //@line 1786 "cPickle.c"
        var $48=HEAP[$47]; //@line 1786 "cPickle.c"
        var $49=((($48))|0)==0; //@line 1786 "cPickle.c"
        if ($49) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1786 "cPickle.c"
      case 13: // $bb12
        var $50=HEAP[$p]; //@line 1786 "cPickle.c"
        var $51=(($50+4)&4294967295); //@line 1786 "cPickle.c"
        var $52=HEAP[$51]; //@line 1786 "cPickle.c"
        var $53=(($52+24)&4294967295); //@line 1786 "cPickle.c"
        var $54=HEAP[$53]; //@line 1786 "cPickle.c"
        var $55=HEAP[$p]; //@line 1786 "cPickle.c"
        FUNCTION_TABLE[$54]($55); //@line 1786 "cPickle.c"
        __label__ = 14; break; //@line 1786 "cPickle.c"
      case 14: // $bb13
        var $56=HEAP[$i]; //@line 1787 "cPickle.c"
        var $57=((($56))|0) < 0; //@line 1787 "cPickle.c"
        if ($57) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1787 "cPickle.c"
      case 15: // $bb14
        HEAP[$0]=-1; //@line 1788 "cPickle.c"
        __label__ = 64; break; //@line 1788 "cPickle.c"
      case 16: // $bb15
        var $58=HEAP[$self_addr]; //@line 1789 "cPickle.c"
        var $59=(($58+48)&4294967295); //@line 1789 "cPickle.c"
        var $60=HEAP[$59]; //@line 1789 "cPickle.c"
        var $61=HEAP[$self_addr]; //@line 1789 "cPickle.c"
        var $62=FUNCTION_TABLE[$60]($61, _setitem_10324, 1); //@line 1789 "cPickle.c"
        var $63=((($62))|0) < 0; //@line 1789 "cPickle.c"
        if ($63) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 1789 "cPickle.c"
      case 17: // $bb16
        HEAP[$0]=-1; //@line 1790 "cPickle.c"
        __label__ = 64; break; //@line 1790 "cPickle.c"
      case 18: // $bb17
        __label__ = 3; break; //@line 1790 "cPickle.c"
      case 19: // $bb18
        var $64=HEAP[$iter_addr]; //@line 1798 "cPickle.c"
        var $65=_PyIter_Next($64); //@line 1798 "cPickle.c"
        HEAP[$firstitem]=$65; //@line 1798 "cPickle.c"
        var $66=HEAP[$firstitem]; //@line 1799 "cPickle.c"
        var $67=($66)==0; //@line 1799 "cPickle.c"
        if ($67) { __label__ = 20; break; } else { __label__ = 22; break; } //@line 1799 "cPickle.c"
      case 20: // $bb19
        var $68=_PyErr_Occurred(); //@line 1800 "cPickle.c"
        var $69=($68)!=0; //@line 1800 "cPickle.c"
        if ($69) { __label__ = 57; break; } else { __label__ = 21; break; } //@line 1800 "cPickle.c"
      case 21: // $bb20
        __label__ = 56; break; //@line 1800 "cPickle.c"
      case 22: // $bb21
        var $70=HEAP[$firstitem]; //@line 1806 "cPickle.c"
        var $71=(($70+4)&4294967295); //@line 1806 "cPickle.c"
        var $72=HEAP[$71]; //@line 1806 "cPickle.c"
        var $73=(($72+84)&4294967295); //@line 1806 "cPickle.c"
        var $74=HEAP[$73]; //@line 1806 "cPickle.c"
        var $75=($74) & 67108864; //@line 1806 "cPickle.c"
        var $76=((($75))|0)==0; //@line 1806 "cPickle.c"
        if ($76) { __label__ = 24; break; } else { __label__ = 23; break; } //@line 1806 "cPickle.c"
      case 23: // $bb22
        var $77=HEAP[$firstitem]; //@line 1806 "cPickle.c"
        var $78=_PyTuple_Size($77); //@line 1806 "cPickle.c"
        var $79=((($78))|0)!=2; //@line 1806 "cPickle.c"
        if ($79) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 1806 "cPickle.c"
      case 24: // $bb23
        var $80=HEAP[_PyExc_TypeError]; //@line 1807 "cPickle.c"
        _PyErr_SetString($80, ((__str18)&4294967295)); //@line 1807 "cPickle.c"
        __label__ = 57; break; //@line 1807 "cPickle.c"
      case 25: // $bb24
        var $81=HEAP[$iter_addr]; //@line 1813 "cPickle.c"
        var $82=_PyIter_Next($81); //@line 1813 "cPickle.c"
        HEAP[$p]=$82; //@line 1813 "cPickle.c"
        var $83=HEAP[$p]; //@line 1814 "cPickle.c"
        var $84=($83)==0; //@line 1814 "cPickle.c"
        if ($84) { __label__ = 26; break; } else { __label__ = 34; break; } //@line 1814 "cPickle.c"
      case 26: // $bb25
        var $85=_PyErr_Occurred(); //@line 1815 "cPickle.c"
        var $86=($85)!=0; //@line 1815 "cPickle.c"
        if ($86) { __label__ = 57; break; } else { __label__ = 27; break; } //@line 1815 "cPickle.c"
      case 27: // $bb26
        var $87=HEAP[$firstitem]; //@line 1819 "cPickle.c"
        var $88=$87; //@line 1819 "cPickle.c"
        var $89=(($88+12)&4294967295); //@line 1819 "cPickle.c"
        var $90=(($89)&4294967295); //@line 1819 "cPickle.c"
        var $91=HEAP[$90]; //@line 1819 "cPickle.c"
        var $92=HEAP[$self_addr]; //@line 1819 "cPickle.c"
        var $93=_save($92, $91, 0); //@line 1819 "cPickle.c"
        var $94=((($93))|0) < 0; //@line 1819 "cPickle.c"
        if ($94) { __label__ = 57; break; } else { __label__ = 28; break; } //@line 1819 "cPickle.c"
      case 28: // $bb27
        var $95=HEAP[$firstitem]; //@line 1821 "cPickle.c"
        var $96=$95; //@line 1821 "cPickle.c"
        var $97=(($96+12)&4294967295); //@line 1821 "cPickle.c"
        var $98=(($97+4)&4294967295); //@line 1821 "cPickle.c"
        var $99=HEAP[$98]; //@line 1821 "cPickle.c"
        var $100=HEAP[$self_addr]; //@line 1821 "cPickle.c"
        var $101=_save($100, $99, 0); //@line 1821 "cPickle.c"
        var $102=((($101))|0) < 0; //@line 1821 "cPickle.c"
        if ($102) { __label__ = 57; break; } else { __label__ = 29; break; } //@line 1821 "cPickle.c"
      case 29: // $bb28
        var $103=HEAP[$self_addr]; //@line 1823 "cPickle.c"
        var $104=(($103+48)&4294967295); //@line 1823 "cPickle.c"
        var $105=HEAP[$104]; //@line 1823 "cPickle.c"
        var $106=HEAP[$self_addr]; //@line 1823 "cPickle.c"
        var $107=FUNCTION_TABLE[$105]($106, _setitem_10324, 1); //@line 1823 "cPickle.c"
        var $108=((($107))|0) < 0; //@line 1823 "cPickle.c"
        if ($108) { __label__ = 57; break; } else { __label__ = 30; break; } //@line 1823 "cPickle.c"
      case 30: // $bb29
        var $109=HEAP[$firstitem]; //@line 1825 "cPickle.c"
        var $110=($109)!=0; //@line 1825 "cPickle.c"
        if ($110) { __label__ = 31; break; } else { __label__ = 33; break; } //@line 1825 "cPickle.c"
      case 31: // $bb30
        var $111=HEAP[$firstitem]; //@line 1825 "cPickle.c"
        HEAP[$_py_tmp]=$111; //@line 1825 "cPickle.c"
        HEAP[$firstitem]=0; //@line 1825 "cPickle.c"
        var $112=HEAP[$_py_tmp]; //@line 1825 "cPickle.c"
        var $113=(($112)&4294967295); //@line 1825 "cPickle.c"
        var $114=HEAP[$113]; //@line 1825 "cPickle.c"
        var $115=((($114) - 1)&4294967295); //@line 1825 "cPickle.c"
        var $116=HEAP[$_py_tmp]; //@line 1825 "cPickle.c"
        var $117=(($116)&4294967295); //@line 1825 "cPickle.c"
        HEAP[$117]=$115; //@line 1825 "cPickle.c"
        var $118=HEAP[$_py_tmp]; //@line 1825 "cPickle.c"
        var $119=(($118)&4294967295); //@line 1825 "cPickle.c"
        var $120=HEAP[$119]; //@line 1825 "cPickle.c"
        var $121=((($120))|0)==0; //@line 1825 "cPickle.c"
        if ($121) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 1825 "cPickle.c"
      case 32: // $bb31
        var $122=HEAP[$_py_tmp]; //@line 1825 "cPickle.c"
        var $123=(($122+4)&4294967295); //@line 1825 "cPickle.c"
        var $124=HEAP[$123]; //@line 1825 "cPickle.c"
        var $125=(($124+24)&4294967295); //@line 1825 "cPickle.c"
        var $126=HEAP[$125]; //@line 1825 "cPickle.c"
        var $127=HEAP[$_py_tmp]; //@line 1825 "cPickle.c"
        FUNCTION_TABLE[$126]($127); //@line 1825 "cPickle.c"
        __label__ = 33; break; //@line 1825 "cPickle.c"
      case 33: // $bb32
        __label__ = 56; break; //@line 1825 "cPickle.c"
      case 34: // $bb33
        var $128=HEAP[$self_addr]; //@line 1832 "cPickle.c"
        var $129=(($128+48)&4294967295); //@line 1832 "cPickle.c"
        var $130=HEAP[$129]; //@line 1832 "cPickle.c"
        var $131=HEAP[$self_addr]; //@line 1832 "cPickle.c"
        var $132=FUNCTION_TABLE[$130]($131, _MARKv, 1); //@line 1832 "cPickle.c"
        var $133=((($132))|0) < 0; //@line 1832 "cPickle.c"
        if ($133) { __label__ = 57; break; } else { __label__ = 35; break; } //@line 1832 "cPickle.c"
      case 35: // $bb34
        var $134=HEAP[$firstitem]; //@line 1835 "cPickle.c"
        var $135=$134; //@line 1835 "cPickle.c"
        var $136=(($135+12)&4294967295); //@line 1835 "cPickle.c"
        var $137=(($136)&4294967295); //@line 1835 "cPickle.c"
        var $138=HEAP[$137]; //@line 1835 "cPickle.c"
        var $139=HEAP[$self_addr]; //@line 1835 "cPickle.c"
        var $140=_save($139, $138, 0); //@line 1835 "cPickle.c"
        var $141=((($140))|0) < 0; //@line 1835 "cPickle.c"
        if ($141) { __label__ = 57; break; } else { __label__ = 36; break; } //@line 1835 "cPickle.c"
      case 36: // $bb35
        var $142=HEAP[$firstitem]; //@line 1837 "cPickle.c"
        var $143=$142; //@line 1837 "cPickle.c"
        var $144=(($143+12)&4294967295); //@line 1837 "cPickle.c"
        var $145=(($144+4)&4294967295); //@line 1837 "cPickle.c"
        var $146=HEAP[$145]; //@line 1837 "cPickle.c"
        var $147=HEAP[$self_addr]; //@line 1837 "cPickle.c"
        var $148=_save($147, $146, 0); //@line 1837 "cPickle.c"
        var $149=((($148))|0) < 0; //@line 1837 "cPickle.c"
        if ($149) { __label__ = 57; break; } else { __label__ = 37; break; } //@line 1837 "cPickle.c"
      case 37: // $bb36
        var $150=HEAP[$firstitem]; //@line 1839 "cPickle.c"
        var $151=($150)!=0; //@line 1839 "cPickle.c"
        if ($151) { __label__ = 38; break; } else { __label__ = 40; break; } //@line 1839 "cPickle.c"
      case 38: // $bb37
        var $152=HEAP[$firstitem]; //@line 1839 "cPickle.c"
        HEAP[$_py_tmp38]=$152; //@line 1839 "cPickle.c"
        HEAP[$firstitem]=0; //@line 1839 "cPickle.c"
        var $153=HEAP[$_py_tmp38]; //@line 1839 "cPickle.c"
        var $154=(($153)&4294967295); //@line 1839 "cPickle.c"
        var $155=HEAP[$154]; //@line 1839 "cPickle.c"
        var $156=((($155) - 1)&4294967295); //@line 1839 "cPickle.c"
        var $157=HEAP[$_py_tmp38]; //@line 1839 "cPickle.c"
        var $158=(($157)&4294967295); //@line 1839 "cPickle.c"
        HEAP[$158]=$156; //@line 1839 "cPickle.c"
        var $159=HEAP[$_py_tmp38]; //@line 1839 "cPickle.c"
        var $160=(($159)&4294967295); //@line 1839 "cPickle.c"
        var $161=HEAP[$160]; //@line 1839 "cPickle.c"
        var $162=((($161))|0)==0; //@line 1839 "cPickle.c"
        if ($162) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 1839 "cPickle.c"
      case 39: // $bb39
        var $163=HEAP[$_py_tmp38]; //@line 1839 "cPickle.c"
        var $164=(($163+4)&4294967295); //@line 1839 "cPickle.c"
        var $165=HEAP[$164]; //@line 1839 "cPickle.c"
        var $166=(($165+24)&4294967295); //@line 1839 "cPickle.c"
        var $167=HEAP[$166]; //@line 1839 "cPickle.c"
        var $168=HEAP[$_py_tmp38]; //@line 1839 "cPickle.c"
        FUNCTION_TABLE[$167]($168); //@line 1839 "cPickle.c"
        __label__ = 40; break; //@line 1839 "cPickle.c"
      case 40: // $bb40
        HEAP[$n]=1; //@line 1840 "cPickle.c"
        __label__ = 53; break; //@line 1840 "cPickle.c"
      case 41: // $bb41
        var $169=HEAP[$p]; //@line 1844 "cPickle.c"
        var $170=(($169+4)&4294967295); //@line 1844 "cPickle.c"
        var $171=HEAP[$170]; //@line 1844 "cPickle.c"
        var $172=(($171+84)&4294967295); //@line 1844 "cPickle.c"
        var $173=HEAP[$172]; //@line 1844 "cPickle.c"
        var $174=($173) & 67108864; //@line 1844 "cPickle.c"
        var $175=((($174))|0)==0; //@line 1844 "cPickle.c"
        if ($175) { __label__ = 43; break; } else { __label__ = 42; break; } //@line 1844 "cPickle.c"
      case 42: // $bb42
        var $176=HEAP[$p]; //@line 1844 "cPickle.c"
        var $177=_PyTuple_Size($176); //@line 1844 "cPickle.c"
        var $178=((($177))|0)!=2; //@line 1844 "cPickle.c"
        if ($178) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 1844 "cPickle.c"
      case 43: // $bb43
        var $179=HEAP[_PyExc_TypeError]; //@line 1845 "cPickle.c"
        _PyErr_SetString($179, ((__str18)&4294967295)); //@line 1845 "cPickle.c"
        __label__ = 57; break; //@line 1845 "cPickle.c"
      case 44: // $bb44
        var $180=HEAP[$p]; //@line 1849 "cPickle.c"
        var $181=$180; //@line 1849 "cPickle.c"
        var $182=(($181+12)&4294967295); //@line 1849 "cPickle.c"
        var $183=(($182)&4294967295); //@line 1849 "cPickle.c"
        var $184=HEAP[$183]; //@line 1849 "cPickle.c"
        var $185=HEAP[$self_addr]; //@line 1849 "cPickle.c"
        var $186=_save($185, $184, 0); //@line 1849 "cPickle.c"
        var $187=((($186))|0) < 0; //@line 1849 "cPickle.c"
        if ($187) { __label__ = 57; break; } else { __label__ = 45; break; } //@line 1849 "cPickle.c"
      case 45: // $bb45
        var $188=HEAP[$p]; //@line 1851 "cPickle.c"
        var $189=$188; //@line 1851 "cPickle.c"
        var $190=(($189+12)&4294967295); //@line 1851 "cPickle.c"
        var $191=(($190+4)&4294967295); //@line 1851 "cPickle.c"
        var $192=HEAP[$191]; //@line 1851 "cPickle.c"
        var $193=HEAP[$self_addr]; //@line 1851 "cPickle.c"
        var $194=_save($193, $192, 0); //@line 1851 "cPickle.c"
        var $195=((($194))|0) < 0; //@line 1851 "cPickle.c"
        if ($195) { __label__ = 57; break; } else { __label__ = 46; break; } //@line 1851 "cPickle.c"
      case 46: // $bb46
        var $196=HEAP[$p]; //@line 1853 "cPickle.c"
        var $197=($196)!=0; //@line 1853 "cPickle.c"
        if ($197) { __label__ = 47; break; } else { __label__ = 49; break; } //@line 1853 "cPickle.c"
      case 47: // $bb47
        var $198=HEAP[$p]; //@line 1853 "cPickle.c"
        HEAP[$_py_tmp48]=$198; //@line 1853 "cPickle.c"
        HEAP[$p]=0; //@line 1853 "cPickle.c"
        var $199=HEAP[$_py_tmp48]; //@line 1853 "cPickle.c"
        var $200=(($199)&4294967295); //@line 1853 "cPickle.c"
        var $201=HEAP[$200]; //@line 1853 "cPickle.c"
        var $202=((($201) - 1)&4294967295); //@line 1853 "cPickle.c"
        var $203=HEAP[$_py_tmp48]; //@line 1853 "cPickle.c"
        var $204=(($203)&4294967295); //@line 1853 "cPickle.c"
        HEAP[$204]=$202; //@line 1853 "cPickle.c"
        var $205=HEAP[$_py_tmp48]; //@line 1853 "cPickle.c"
        var $206=(($205)&4294967295); //@line 1853 "cPickle.c"
        var $207=HEAP[$206]; //@line 1853 "cPickle.c"
        var $208=((($207))|0)==0; //@line 1853 "cPickle.c"
        if ($208) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 1853 "cPickle.c"
      case 48: // $bb49
        var $209=HEAP[$_py_tmp48]; //@line 1853 "cPickle.c"
        var $210=(($209+4)&4294967295); //@line 1853 "cPickle.c"
        var $211=HEAP[$210]; //@line 1853 "cPickle.c"
        var $212=(($211+24)&4294967295); //@line 1853 "cPickle.c"
        var $213=HEAP[$212]; //@line 1853 "cPickle.c"
        var $214=HEAP[$_py_tmp48]; //@line 1853 "cPickle.c"
        FUNCTION_TABLE[$213]($214); //@line 1853 "cPickle.c"
        __label__ = 49; break; //@line 1853 "cPickle.c"
      case 49: // $bb50
        var $215=HEAP[$n]; //@line 1854 "cPickle.c"
        var $216=((($215) + 1)&4294967295); //@line 1854 "cPickle.c"
        HEAP[$n]=$216; //@line 1854 "cPickle.c"
        var $217=HEAP[$n]; //@line 1856 "cPickle.c"
        var $218=((($217))|0)==1000; //@line 1856 "cPickle.c"
        if ($218) { __label__ = 54; break; } else { __label__ = 50; break; } //@line 1856 "cPickle.c"
      case 50: // $bb51
        var $219=HEAP[$iter_addr]; //@line 1859 "cPickle.c"
        var $220=_PyIter_Next($219); //@line 1859 "cPickle.c"
        HEAP[$p]=$220; //@line 1859 "cPickle.c"
        var $221=HEAP[$p]; //@line 1860 "cPickle.c"
        var $222=($221)==0; //@line 1860 "cPickle.c"
        if ($222) { __label__ = 51; break; } else { __label__ = 53; break; } //@line 1860 "cPickle.c"
      case 51: // $bb52
        var $223=_PyErr_Occurred(); //@line 1861 "cPickle.c"
        var $224=($223)!=0; //@line 1861 "cPickle.c"
        if ($224) { __label__ = 57; break; } else { __label__ = 52; break; } //@line 1861 "cPickle.c"
      case 52: // $bb53
        __label__ = 54; break; //@line 1861 "cPickle.c"
      case 53: // $bb54
        var $225=HEAP[$p]; //@line 1843 "cPickle.c"
        var $226=($225)!=0; //@line 1843 "cPickle.c"
        if ($226) { __label__ = 41; break; } else { __label__ = 54; break; } //@line 1843 "cPickle.c"
      case 54: // $bb55
        var $227=HEAP[$self_addr]; //@line 1867 "cPickle.c"
        var $228=(($227+48)&4294967295); //@line 1867 "cPickle.c"
        var $229=HEAP[$228]; //@line 1867 "cPickle.c"
        var $230=HEAP[$self_addr]; //@line 1867 "cPickle.c"
        var $231=FUNCTION_TABLE[$229]($230, _setitems_10325, 1); //@line 1867 "cPickle.c"
        var $232=((($231))|0) < 0; //@line 1867 "cPickle.c"
        if ($232) { __label__ = 57; break; } else { __label__ = 55; break; } //@line 1867 "cPickle.c"
      case 55: // $bb56
        var $233=HEAP[$n]; //@line 1870 "cPickle.c"
        var $234=((($233))|0)==1000; //@line 1870 "cPickle.c"
        if ($234) { __label__ = 19; break; } else { __label__ = 56; break; } //@line 1870 "cPickle.c"
      case 56: // $bb57
        HEAP[$0]=0; //@line 1871 "cPickle.c"
        __label__ = 64; break; //@line 1871 "cPickle.c"
      case 57: // $BatchFailed
        var $235=HEAP[$firstitem]; //@line 1874 "cPickle.c"
        var $236=($235)!=0; //@line 1874 "cPickle.c"
        if ($236) { __label__ = 58; break; } else { __label__ = 60; break; } //@line 1874 "cPickle.c"
      case 58: // $bb58
        var $237=HEAP[$firstitem]; //@line 1874 "cPickle.c"
        var $238=(($237)&4294967295); //@line 1874 "cPickle.c"
        var $239=HEAP[$238]; //@line 1874 "cPickle.c"
        var $240=((($239) - 1)&4294967295); //@line 1874 "cPickle.c"
        var $241=HEAP[$firstitem]; //@line 1874 "cPickle.c"
        var $242=(($241)&4294967295); //@line 1874 "cPickle.c"
        HEAP[$242]=$240; //@line 1874 "cPickle.c"
        var $243=HEAP[$firstitem]; //@line 1874 "cPickle.c"
        var $244=(($243)&4294967295); //@line 1874 "cPickle.c"
        var $245=HEAP[$244]; //@line 1874 "cPickle.c"
        var $246=((($245))|0)==0; //@line 1874 "cPickle.c"
        if ($246) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 1874 "cPickle.c"
      case 59: // $bb59
        var $247=HEAP[$firstitem]; //@line 1874 "cPickle.c"
        var $248=(($247+4)&4294967295); //@line 1874 "cPickle.c"
        var $249=HEAP[$248]; //@line 1874 "cPickle.c"
        var $250=(($249+24)&4294967295); //@line 1874 "cPickle.c"
        var $251=HEAP[$250]; //@line 1874 "cPickle.c"
        var $252=HEAP[$firstitem]; //@line 1874 "cPickle.c"
        FUNCTION_TABLE[$251]($252); //@line 1874 "cPickle.c"
        __label__ = 60; break; //@line 1874 "cPickle.c"
      case 60: // $bb60
        var $253=HEAP[$p]; //@line 1875 "cPickle.c"
        var $254=($253)!=0; //@line 1875 "cPickle.c"
        if ($254) { __label__ = 61; break; } else { __label__ = 63; break; } //@line 1875 "cPickle.c"
      case 61: // $bb61
        var $255=HEAP[$p]; //@line 1875 "cPickle.c"
        var $256=(($255)&4294967295); //@line 1875 "cPickle.c"
        var $257=HEAP[$256]; //@line 1875 "cPickle.c"
        var $258=((($257) - 1)&4294967295); //@line 1875 "cPickle.c"
        var $259=HEAP[$p]; //@line 1875 "cPickle.c"
        var $260=(($259)&4294967295); //@line 1875 "cPickle.c"
        HEAP[$260]=$258; //@line 1875 "cPickle.c"
        var $261=HEAP[$p]; //@line 1875 "cPickle.c"
        var $262=(($261)&4294967295); //@line 1875 "cPickle.c"
        var $263=HEAP[$262]; //@line 1875 "cPickle.c"
        var $264=((($263))|0)==0; //@line 1875 "cPickle.c"
        if ($264) { __label__ = 62; break; } else { __label__ = 63; break; } //@line 1875 "cPickle.c"
      case 62: // $bb62
        var $265=HEAP[$p]; //@line 1875 "cPickle.c"
        var $266=(($265+4)&4294967295); //@line 1875 "cPickle.c"
        var $267=HEAP[$266]; //@line 1875 "cPickle.c"
        var $268=(($267+24)&4294967295); //@line 1875 "cPickle.c"
        var $269=HEAP[$268]; //@line 1875 "cPickle.c"
        var $270=HEAP[$p]; //@line 1875 "cPickle.c"
        FUNCTION_TABLE[$269]($270); //@line 1875 "cPickle.c"
        __label__ = 63; break; //@line 1875 "cPickle.c"
      case 63: // $bb63
        HEAP[$0]=-1; //@line 1876 "cPickle.c"
        __label__ = 64; break; //@line 1876 "cPickle.c"
      case 64: // $bb64
        var $271=HEAP[$0]; //@line 1775 "cPickle.c"
        HEAP[$retval]=$271; //@line 1775 "cPickle.c"
        __label__ = 65; break; //@line 1775 "cPickle.c"
      case 65: // $return
        var $retval65=HEAP[$retval]; //@line 1775 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval65; //@line 1775 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _batch_dict_exact($self, $obj) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $obj_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $key=__stackBase__+16;
        var $value=__stackBase__+20;
        var $i=__stackBase__+24;
        var $dict_size=__stackBase__+28;
        var $ppos=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$obj_addr]=$obj;
        HEAP[$key]=0; //@line 1891 "cPickle.c"
        HEAP[$value]=0; //@line 1891 "cPickle.c"
        HEAP[$ppos]=0; //@line 1893 "cPickle.c"
        var $1=HEAP[$obj_addr]; //@line 1898 "cPickle.c"
        var $2=($1)==0; //@line 1898 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1898 "cPickle.c"
      case 1: // $bb
        ___assert_fail(((__str19)&4294967295), ((__str15)&4294967295), 1898, ((___PRETTY_FUNCTION___10501)&4294967295)); //@line 1898 "cPickle.c"
        throw "Reached an unreachable! Original .ll line: 7265"; //@line 1898 "cPickle.c"
      case 2: // $bb1
        var $3=HEAP[$self_addr]; //@line 1899 "cPickle.c"
        var $4=(($3+36)&4294967295); //@line 1899 "cPickle.c"
        var $5=HEAP[$4]; //@line 1899 "cPickle.c"
        var $6=((($5))|0) <= 0; //@line 1899 "cPickle.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1899 "cPickle.c"
      case 3: // $bb2
        ___assert_fail(((__str20)&4294967295), ((__str15)&4294967295), 1899, ((___PRETTY_FUNCTION___10501)&4294967295)); //@line 1899 "cPickle.c"
        throw "Reached an unreachable! Original .ll line: 7276"; //@line 1899 "cPickle.c"
      case 4: // $bb3
        var $7=HEAP[$obj_addr]; //@line 1901 "cPickle.c"
        var $8=_PyDict_Size($7); //@line 1901 "cPickle.c"
        HEAP[$dict_size]=$8; //@line 1901 "cPickle.c"
        var $9=HEAP[$dict_size]; //@line 1904 "cPickle.c"
        var $10=((($9))|0)==1; //@line 1904 "cPickle.c"
        if ($10) { __label__ = 5; break; } else { __label__ = 12; break; } //@line 1904 "cPickle.c"
      case 5: // $bb4
        var $11=HEAP[$obj_addr]; //@line 1905 "cPickle.c"
        var $12=_PyDict_Next($11, $ppos, $key, $value); //@line 1905 "cPickle.c"
        var $13=HEAP[$key]; //@line 1906 "cPickle.c"
        var $14=HEAP[$self_addr]; //@line 1906 "cPickle.c"
        var $15=_save($14, $13, 0); //@line 1906 "cPickle.c"
        var $16=((($15))|0) < 0; //@line 1906 "cPickle.c"
        if ($16) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1906 "cPickle.c"
      case 6: // $bb5
        HEAP[$0]=-1; //@line 1907 "cPickle.c"
        __label__ = 27; break; //@line 1907 "cPickle.c"
      case 7: // $bb6
        var $17=HEAP[$value]; //@line 1908 "cPickle.c"
        var $18=HEAP[$self_addr]; //@line 1908 "cPickle.c"
        var $19=_save($18, $17, 0); //@line 1908 "cPickle.c"
        var $20=((($19))|0) < 0; //@line 1908 "cPickle.c"
        if ($20) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1908 "cPickle.c"
      case 8: // $bb7
        HEAP[$0]=-1; //@line 1909 "cPickle.c"
        __label__ = 27; break; //@line 1909 "cPickle.c"
      case 9: // $bb8
        var $21=HEAP[$self_addr]; //@line 1910 "cPickle.c"
        var $22=(($21+48)&4294967295); //@line 1910 "cPickle.c"
        var $23=HEAP[$22]; //@line 1910 "cPickle.c"
        var $24=HEAP[$self_addr]; //@line 1910 "cPickle.c"
        var $25=FUNCTION_TABLE[$23]($24, _setitem_10499, 1); //@line 1910 "cPickle.c"
        var $26=((($25))|0) < 0; //@line 1910 "cPickle.c"
        if ($26) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1910 "cPickle.c"
      case 10: // $bb9
        HEAP[$0]=-1; //@line 1911 "cPickle.c"
        __label__ = 27; break; //@line 1911 "cPickle.c"
      case 11: // $bb10
        HEAP[$0]=0; //@line 1912 "cPickle.c"
        __label__ = 27; break; //@line 1912 "cPickle.c"
      case 12: // $bb11
        HEAP[$i]=0; //@line 1917 "cPickle.c"
        var $27=HEAP[$self_addr]; //@line 1918 "cPickle.c"
        var $28=(($27+48)&4294967295); //@line 1918 "cPickle.c"
        var $29=HEAP[$28]; //@line 1918 "cPickle.c"
        var $30=HEAP[$self_addr]; //@line 1918 "cPickle.c"
        var $31=FUNCTION_TABLE[$29]($30, _MARKv, 1); //@line 1918 "cPickle.c"
        var $32=((($31))|0) < 0; //@line 1918 "cPickle.c"
        if ($32) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1918 "cPickle.c"
      case 13: // $bb12
        HEAP[$0]=-1; //@line 1919 "cPickle.c"
        __label__ = 27; break; //@line 1919 "cPickle.c"
      case 14: // $bb13
        __label__ = 20; break; //@line 1919 "cPickle.c"
      case 15: // $bb14
        var $33=HEAP[$key]; //@line 1921 "cPickle.c"
        var $34=HEAP[$self_addr]; //@line 1921 "cPickle.c"
        var $35=_save($34, $33, 0); //@line 1921 "cPickle.c"
        var $36=((($35))|0) < 0; //@line 1921 "cPickle.c"
        if ($36) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 1921 "cPickle.c"
      case 16: // $bb15
        HEAP[$0]=-1; //@line 1922 "cPickle.c"
        __label__ = 27; break; //@line 1922 "cPickle.c"
      case 17: // $bb16
        var $37=HEAP[$value]; //@line 1923 "cPickle.c"
        var $38=HEAP[$self_addr]; //@line 1923 "cPickle.c"
        var $39=_save($38, $37, 0); //@line 1923 "cPickle.c"
        var $40=((($39))|0) < 0; //@line 1923 "cPickle.c"
        if ($40) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 1923 "cPickle.c"
      case 18: // $bb17
        HEAP[$0]=-1; //@line 1924 "cPickle.c"
        __label__ = 27; break; //@line 1924 "cPickle.c"
      case 19: // $bb18
        var $41=HEAP[$i]; //@line 1925 "cPickle.c"
        var $42=((($41) + 1)&4294967295); //@line 1925 "cPickle.c"
        HEAP[$i]=$42; //@line 1925 "cPickle.c"
        var $43=HEAP[$i]; //@line 1925 "cPickle.c"
        var $44=((($43))|0)==1000; //@line 1925 "cPickle.c"
        if ($44) { __label__ = 21; break; } else { __label__ = 20; break; } //@line 1925 "cPickle.c"
      case 20: // $bb19
        var $45=HEAP[$obj_addr]; //@line 1920 "cPickle.c"
        var $46=_PyDict_Next($45, $ppos, $key, $value); //@line 1920 "cPickle.c"
        var $47=((($46))|0)!=0; //@line 1920 "cPickle.c"
        if ($47) { __label__ = 15; break; } else { __label__ = 21; break; } //@line 1920 "cPickle.c"
      case 21: // $bb20
        var $48=HEAP[$self_addr]; //@line 1928 "cPickle.c"
        var $49=(($48+48)&4294967295); //@line 1928 "cPickle.c"
        var $50=HEAP[$49]; //@line 1928 "cPickle.c"
        var $51=HEAP[$self_addr]; //@line 1928 "cPickle.c"
        var $52=FUNCTION_TABLE[$50]($51, _setitems_10500, 1); //@line 1928 "cPickle.c"
        var $53=((($52))|0) < 0; //@line 1928 "cPickle.c"
        if ($53) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 1928 "cPickle.c"
      case 22: // $bb21
        HEAP[$0]=-1; //@line 1929 "cPickle.c"
        __label__ = 27; break; //@line 1929 "cPickle.c"
      case 23: // $bb22
        var $54=HEAP[$obj_addr]; //@line 1930 "cPickle.c"
        var $55=_PyDict_Size($54); //@line 1930 "cPickle.c"
        var $56=HEAP[$dict_size]; //@line 1930 "cPickle.c"
        var $57=((($55))|0)!=((($56))|0); //@line 1930 "cPickle.c"
        if ($57) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 1930 "cPickle.c"
      case 24: // $bb23
        var $58=HEAP[_PyExc_RuntimeError]; //@line 1931 "cPickle.c"
        var $59=_PyErr_Format($58, ((__str21)&4294967295)); //@line 1931 "cPickle.c"
        HEAP[$0]=-1; //@line 1934 "cPickle.c"
        __label__ = 27; break; //@line 1934 "cPickle.c"
      case 25: // $bb24
        var $60=HEAP[$i]; //@line 1937 "cPickle.c"
        var $61=((($60))|0)==1000; //@line 1937 "cPickle.c"
        if ($61) { __label__ = 12; break; } else { __label__ = 26; break; } //@line 1937 "cPickle.c"
      case 26: // $bb25
        HEAP[$0]=0; //@line 1938 "cPickle.c"
        __label__ = 27; break; //@line 1938 "cPickle.c"
      case 27: // $bb26
        var $62=HEAP[$0]; //@line 1907 "cPickle.c"
        HEAP[$retval]=$62; //@line 1907 "cPickle.c"
        __label__ = 28; break; //@line 1907 "cPickle.c"
      case 28: // $return
        var $retval27=HEAP[$retval]; //@line 1907 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval27; //@line 1907 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_dict($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 39; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 39);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $iftmp_117=__stackBase__+16;
        var $iftmp_113=__stackBase__+20;
        var $res=__stackBase__+24;
        var $s=__stackBase__+28;
        var $len=__stackBase__+31;
        var $iter=__stackBase__+35;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$res]=-1; //@line 1944 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 1948 "cPickle.c"
        var $2=(($1+44)&4294967295); //@line 1948 "cPickle.c"
        var $3=HEAP[$2]; //@line 1948 "cPickle.c"
        var $4=((($3))|0)!=0; //@line 1948 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1948 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 1948 "cPickle.c"
        var $6=HEAP[$args_addr]; //@line 1948 "cPickle.c"
        var $7=_fast_save_enter($5, $6); //@line 1948 "cPickle.c"
        var $8=((($7))|0)==0; //@line 1948 "cPickle.c"
        if ($8) { __label__ = 30; break; } else { __label__ = 2; break; } //@line 1948 "cPickle.c"
      case 2: // $bb1
        var $9=HEAP[$self_addr]; //@line 1952 "cPickle.c"
        var $10=(($9+40)&4294967295); //@line 1952 "cPickle.c"
        var $11=HEAP[$10]; //@line 1952 "cPickle.c"
        var $12=((($11))|0)!=0; //@line 1952 "cPickle.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1952 "cPickle.c"
      case 3: // $bb2
        var $13=(($s)&4294967295); //@line 1953 "cPickle.c"
        HEAP[$13]=125; //@line 1953 "cPickle.c"
        HEAP[$len]=1; //@line 1954 "cPickle.c"
        __label__ = 5; break; //@line 1954 "cPickle.c"
      case 4: // $bb3
        var $14=(($s)&4294967295); //@line 1957 "cPickle.c"
        HEAP[$14]=40; //@line 1957 "cPickle.c"
        var $15=(($s+1)&4294967295); //@line 1958 "cPickle.c"
        HEAP[$15]=100; //@line 1958 "cPickle.c"
        HEAP[$len]=2; //@line 1959 "cPickle.c"
        __label__ = 5; break; //@line 1959 "cPickle.c"
      case 5: // $bb4
        var $16=HEAP[$self_addr]; //@line 1962 "cPickle.c"
        var $17=(($16+48)&4294967295); //@line 1962 "cPickle.c"
        var $18=HEAP[$17]; //@line 1962 "cPickle.c"
        var $19=HEAP[$self_addr]; //@line 1962 "cPickle.c"
        var $s5=$s; //@line 1962 "cPickle.c"
        var $20=HEAP[$len]; //@line 1962 "cPickle.c"
        var $21=FUNCTION_TABLE[$18]($19, $s5, $20); //@line 1962 "cPickle.c"
        var $22=((($21))|0) < 0; //@line 1962 "cPickle.c"
        if ($22) { __label__ = 30; break; } else { __label__ = 6; break; } //@line 1962 "cPickle.c"
      case 6: // $bb6
        var $23=HEAP[$args_addr]; //@line 1966 "cPickle.c"
        var $24=_PyDict_Size($23); //@line 1966 "cPickle.c"
        HEAP[$len]=$24; //@line 1966 "cPickle.c"
        var $25=HEAP[$len]; //@line 1966 "cPickle.c"
        var $26=((($25))|0) < 0; //@line 1966 "cPickle.c"
        if ($26) { __label__ = 30; break; } else { __label__ = 7; break; } //@line 1966 "cPickle.c"
      case 7: // $bb7
        var $27=HEAP[$len]; //@line 1969 "cPickle.c"
        var $28=((($27))|0)==0; //@line 1969 "cPickle.c"
        if ($28) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 1969 "cPickle.c"
      case 8: // $bb8
        var $29=HEAP[$self_addr]; //@line 1970 "cPickle.c"
        var $30=HEAP[$args_addr]; //@line 1970 "cPickle.c"
        var $31=_put($29, $30); //@line 1970 "cPickle.c"
        var $32=((($31))|0) >= 0; //@line 1970 "cPickle.c"
        if ($32) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1970 "cPickle.c"
      case 9: // $bb9
        HEAP[$res]=0; //@line 1971 "cPickle.c"
        __label__ = 10; break; //@line 1971 "cPickle.c"
      case 10: // $bb10
        __label__ = 30; break; //@line 1971 "cPickle.c"
      case 11: // $bb11
        var $33=HEAP[$self_addr]; //@line 1974 "cPickle.c"
        var $34=HEAP[$args_addr]; //@line 1974 "cPickle.c"
        var $35=_put2($33, $34); //@line 1974 "cPickle.c"
        var $36=((($35))|0) < 0; //@line 1974 "cPickle.c"
        if ($36) { __label__ = 30; break; } else { __label__ = 12; break; } //@line 1974 "cPickle.c"
      case 12: // $bb12
        var $37=HEAP[$args_addr]; //@line 1978 "cPickle.c"
        var $38=(($37+4)&4294967295); //@line 1978 "cPickle.c"
        var $39=HEAP[$38]; //@line 1978 "cPickle.c"
        var $40=($39)!=(_PyDict_Type); //@line 1978 "cPickle.c"
        if ($40) { __label__ = 21; break; } else { __label__ = 13; break; } //@line 1978 "cPickle.c"
      case 13: // $bb13
        var $41=HEAP[$self_addr]; //@line 1978 "cPickle.c"
        var $42=(($41+36)&4294967295); //@line 1978 "cPickle.c"
        var $43=HEAP[$42]; //@line 1978 "cPickle.c"
        var $44=((($43))|0) <= 0; //@line 1978 "cPickle.c"
        if ($44) { __label__ = 21; break; } else { __label__ = 14; break; } //@line 1978 "cPickle.c"
      case 14: // $bb14
        var $45=HEAP[__PyThreadState_Current]; //@line 1981 "cPickle.c"
        var $46=(($45+12)&4294967295); //@line 1981 "cPickle.c"
        var $47=HEAP[$46]; //@line 1981 "cPickle.c"
        var $48=((($47) + 1)&4294967295); //@line 1981 "cPickle.c"
        var $49=(($45+12)&4294967295); //@line 1981 "cPickle.c"
        HEAP[$49]=$48; //@line 1981 "cPickle.c"
        var $50=(($45+12)&4294967295); //@line 1981 "cPickle.c"
        var $51=HEAP[$50]; //@line 1981 "cPickle.c"
        var $52=HEAP[__Py_CheckRecursionLimit]; //@line 1981 "cPickle.c"
        var $53=((($51))|0) <= ((($52))|0); //@line 1981 "cPickle.c"
        if ($53) { __label__ = 17; break; } else { __label__ = 15; break; } //@line 1981 "cPickle.c"
      case 15: // $bb15
        var $54=__Py_CheckRecursiveCall(((__str17)&4294967295)); //@line 1981 "cPickle.c"
        var $55=((($54))|0)==0; //@line 1981 "cPickle.c"
        if ($55) { __label__ = 17; break; } else { __label__ = 16; break; } //@line 1981 "cPickle.c"
      case 16: // $bb16
        HEAP[$iftmp_113]=1; //@line 1981 "cPickle.c"
        __label__ = 18; break; //@line 1981 "cPickle.c"
      case 17: // $bb17
        HEAP[$iftmp_113]=0; //@line 1981 "cPickle.c"
        __label__ = 18; break; //@line 1981 "cPickle.c"
      case 18: // $bb18
        var $56=HEAP[$iftmp_113]; //@line 1981 "cPickle.c"
        var $57=((($56))|0)==0; //@line 1981 "cPickle.c"
        if ($57) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 1981 "cPickle.c"
      case 19: // $bb19
        var $58=HEAP[$self_addr]; //@line 1982 "cPickle.c"
        var $59=HEAP[$args_addr]; //@line 1982 "cPickle.c"
        var $60=_batch_dict_exact($58, $59); //@line 1982 "cPickle.c"
        HEAP[$res]=$60; //@line 1982 "cPickle.c"
        var $61=HEAP[__PyThreadState_Current]; //@line 1983 "cPickle.c"
        var $62=(($61+12)&4294967295); //@line 1983 "cPickle.c"
        var $63=HEAP[$62]; //@line 1983 "cPickle.c"
        var $64=((($63) - 1)&4294967295); //@line 1983 "cPickle.c"
        var $65=(($61+12)&4294967295); //@line 1983 "cPickle.c"
        HEAP[$65]=$64; //@line 1983 "cPickle.c"
        __label__ = 20; break; //@line 1983 "cPickle.c"
      case 20: // $bb20
        __label__ = 30; break; //@line 1983 "cPickle.c"
      case 21: // $bb21
        var $66=HEAP[$args_addr]; //@line 1986 "cPickle.c"
        var $67=_PyObject_CallMethod($66, ((__str22)&4294967295), ((__str23)&4294967295)); //@line 1986 "cPickle.c"
        HEAP[$iter]=$67; //@line 1986 "cPickle.c"
        var $68=HEAP[$iter]; //@line 1987 "cPickle.c"
        var $69=($68)==0; //@line 1987 "cPickle.c"
        if ($69) { __label__ = 30; break; } else { __label__ = 22; break; } //@line 1987 "cPickle.c"
      case 22: // $bb22
        var $70=HEAP[__PyThreadState_Current]; //@line 1989 "cPickle.c"
        var $71=(($70+12)&4294967295); //@line 1989 "cPickle.c"
        var $72=HEAP[$71]; //@line 1989 "cPickle.c"
        var $73=((($72) + 1)&4294967295); //@line 1989 "cPickle.c"
        var $74=(($70+12)&4294967295); //@line 1989 "cPickle.c"
        HEAP[$74]=$73; //@line 1989 "cPickle.c"
        var $75=(($70+12)&4294967295); //@line 1989 "cPickle.c"
        var $76=HEAP[$75]; //@line 1989 "cPickle.c"
        var $77=HEAP[__Py_CheckRecursionLimit]; //@line 1989 "cPickle.c"
        var $78=((($76))|0) <= ((($77))|0); //@line 1989 "cPickle.c"
        if ($78) { __label__ = 25; break; } else { __label__ = 23; break; } //@line 1989 "cPickle.c"
      case 23: // $bb23
        var $79=__Py_CheckRecursiveCall(((__str17)&4294967295)); //@line 1989 "cPickle.c"
        var $80=((($79))|0)==0; //@line 1989 "cPickle.c"
        if ($80) { __label__ = 25; break; } else { __label__ = 24; break; } //@line 1989 "cPickle.c"
      case 24: // $bb24
        HEAP[$iftmp_117]=1; //@line 1989 "cPickle.c"
        __label__ = 26; break; //@line 1989 "cPickle.c"
      case 25: // $bb25
        HEAP[$iftmp_117]=0; //@line 1989 "cPickle.c"
        __label__ = 26; break; //@line 1989 "cPickle.c"
      case 26: // $bb26
        var $81=HEAP[$iftmp_117]; //@line 1989 "cPickle.c"
        var $82=((($81))|0)==0; //@line 1989 "cPickle.c"
        if ($82) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 1989 "cPickle.c"
      case 27: // $bb27
        var $83=HEAP[$self_addr]; //@line 1990 "cPickle.c"
        var $84=HEAP[$iter]; //@line 1990 "cPickle.c"
        var $85=_batch_dict($83, $84); //@line 1990 "cPickle.c"
        HEAP[$res]=$85; //@line 1990 "cPickle.c"
        var $86=HEAP[__PyThreadState_Current]; //@line 1991 "cPickle.c"
        var $87=(($86+12)&4294967295); //@line 1991 "cPickle.c"
        var $88=HEAP[$87]; //@line 1991 "cPickle.c"
        var $89=((($88) - 1)&4294967295); //@line 1991 "cPickle.c"
        var $90=(($86+12)&4294967295); //@line 1991 "cPickle.c"
        HEAP[$90]=$89; //@line 1991 "cPickle.c"
        __label__ = 28; break; //@line 1991 "cPickle.c"
      case 28: // $bb28
        var $91=HEAP[$iter]; //@line 1993 "cPickle.c"
        var $92=(($91)&4294967295); //@line 1993 "cPickle.c"
        var $93=HEAP[$92]; //@line 1993 "cPickle.c"
        var $94=((($93) - 1)&4294967295); //@line 1993 "cPickle.c"
        var $95=HEAP[$iter]; //@line 1993 "cPickle.c"
        var $96=(($95)&4294967295); //@line 1993 "cPickle.c"
        HEAP[$96]=$94; //@line 1993 "cPickle.c"
        var $97=HEAP[$iter]; //@line 1993 "cPickle.c"
        var $98=(($97)&4294967295); //@line 1993 "cPickle.c"
        var $99=HEAP[$98]; //@line 1993 "cPickle.c"
        var $100=((($99))|0)==0; //@line 1993 "cPickle.c"
        if ($100) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 1993 "cPickle.c"
      case 29: // $bb29
        var $101=HEAP[$iter]; //@line 1993 "cPickle.c"
        var $102=(($101+4)&4294967295); //@line 1993 "cPickle.c"
        var $103=HEAP[$102]; //@line 1993 "cPickle.c"
        var $104=(($103+24)&4294967295); //@line 1993 "cPickle.c"
        var $105=HEAP[$104]; //@line 1993 "cPickle.c"
        var $106=HEAP[$iter]; //@line 1993 "cPickle.c"
        FUNCTION_TABLE[$105]($106); //@line 1993 "cPickle.c"
        __label__ = 30; break; //@line 1996 "cPickle.c"
      case 30: // $finally
        var $107=HEAP[$self_addr]; //@line 1997 "cPickle.c"
        var $108=(($107+44)&4294967295); //@line 1997 "cPickle.c"
        var $109=HEAP[$108]; //@line 1997 "cPickle.c"
        var $110=((($109))|0)!=0; //@line 1997 "cPickle.c"
        if ($110) { __label__ = 31; break; } else { __label__ = 33; break; } //@line 1997 "cPickle.c"
      case 31: // $bb30
        var $111=HEAP[$self_addr]; //@line 1997 "cPickle.c"
        var $112=HEAP[$args_addr]; //@line 1997 "cPickle.c"
        var $113=_fast_save_leave($111, $112); //@line 1997 "cPickle.c"
        var $114=((($113))|0)==0; //@line 1997 "cPickle.c"
        if ($114) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 1997 "cPickle.c"
      case 32: // $bb31
        HEAP[$res]=-1; //@line 1998 "cPickle.c"
        __label__ = 33; break; //@line 1998 "cPickle.c"
      case 33: // $bb32
        var $115=HEAP[$res]; //@line 2000 "cPickle.c"
        HEAP[$0]=$115; //@line 2000 "cPickle.c"
        var $116=HEAP[$0]; //@line 2000 "cPickle.c"
        HEAP[$retval]=$116; //@line 2000 "cPickle.c"
        __label__ = 34; break; //@line 2000 "cPickle.c"
      case 34: // $return
        var $retval33=HEAP[$retval]; //@line 2000 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval33; //@line 2000 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_inst($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 76; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 76);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $class=__stackBase__+16;
        var $module=__stackBase__+20;
        var $name=__stackBase__+24;
        var $state=__stackBase__+28;
        var $getinitargs_func=__stackBase__+32;
        var $getstate_func=__stackBase__+36;
        var $class_args=__stackBase__+40;
        var $module_str=__stackBase__+44;
        var $name_str=__stackBase__+48;
        var $module_size=__stackBase__+52;
        var $name_size=__stackBase__+56;
        var $res=__stackBase__+60;
        var $element=__stackBase__+64;
        var $i=__stackBase__+68;
        var $len=__stackBase__+72;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$class]=0; //@line 2007 "cPickle.c"
        HEAP[$module]=0; //@line 2007 "cPickle.c"
        HEAP[$name]=0; //@line 2007 "cPickle.c"
        HEAP[$state]=0; //@line 2007 "cPickle.c"
        HEAP[$getinitargs_func]=0; //@line 2008 "cPickle.c"
        HEAP[$getstate_func]=0; //@line 2008 "cPickle.c"
        HEAP[$class_args]=0; //@line 2008 "cPickle.c"
        HEAP[$res]=-1; //@line 2010 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 2014 "cPickle.c"
        var $2=(($1+44)&4294967295); //@line 2014 "cPickle.c"
        var $3=HEAP[$2]; //@line 2014 "cPickle.c"
        var $4=((($3))|0)!=0; //@line 2014 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2014 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 2014 "cPickle.c"
        var $6=HEAP[$args_addr]; //@line 2014 "cPickle.c"
        var $7=_fast_save_enter($5, $6); //@line 2014 "cPickle.c"
        var $8=((($7))|0)==0; //@line 2014 "cPickle.c"
        if ($8) { __label__ = 49; break; } else { __label__ = 2; break; } //@line 2014 "cPickle.c"
      case 2: // $bb1
        var $9=HEAP[$self_addr]; //@line 2017 "cPickle.c"
        var $10=(($9+48)&4294967295); //@line 2017 "cPickle.c"
        var $11=HEAP[$10]; //@line 2017 "cPickle.c"
        var $12=HEAP[$self_addr]; //@line 2017 "cPickle.c"
        var $13=FUNCTION_TABLE[$11]($12, _MARKv, 1); //@line 2017 "cPickle.c"
        var $14=((($13))|0) < 0; //@line 2017 "cPickle.c"
        if ($14) { __label__ = 49; break; } else { __label__ = 3; break; } //@line 2017 "cPickle.c"
      case 3: // $bb2
        var $15=HEAP[___class___str]; //@line 2020 "cPickle.c"
        var $16=HEAP[$args_addr]; //@line 2020 "cPickle.c"
        var $17=_PyObject_GetAttr($16, $15); //@line 2020 "cPickle.c"
        HEAP[$class]=$17; //@line 2020 "cPickle.c"
        var $18=HEAP[$class]; //@line 2020 "cPickle.c"
        var $19=($18)==0; //@line 2020 "cPickle.c"
        if ($19) { __label__ = 49; break; } else { __label__ = 4; break; } //@line 2020 "cPickle.c"
      case 4: // $bb3
        var $20=HEAP[$self_addr]; //@line 2023 "cPickle.c"
        var $21=(($20+40)&4294967295); //@line 2023 "cPickle.c"
        var $22=HEAP[$21]; //@line 2023 "cPickle.c"
        var $23=((($22))|0)!=0; //@line 2023 "cPickle.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 2023 "cPickle.c"
      case 5: // $bb4
        var $24=HEAP[$self_addr]; //@line 2024 "cPickle.c"
        var $25=HEAP[$class]; //@line 2024 "cPickle.c"
        var $26=_save($24, $25, 0); //@line 2024 "cPickle.c"
        var $27=((($26))|0) < 0; //@line 2024 "cPickle.c"
        if ($27) { __label__ = 49; break; } else { __label__ = 6; break; } //@line 2024 "cPickle.c"
      case 6: // $bb5
        var $28=HEAP[___getinitargs___str]; //@line 2028 "cPickle.c"
        var $29=HEAP[$args_addr]; //@line 2028 "cPickle.c"
        var $30=_PyObject_GetAttr($29, $28); //@line 2028 "cPickle.c"
        HEAP[$getinitargs_func]=$30; //@line 2028 "cPickle.c"
        var $31=HEAP[$getinitargs_func]; //@line 2028 "cPickle.c"
        var $32=($31)!=0; //@line 2028 "cPickle.c"
        if ($32) { __label__ = 7; break; } else { __label__ = 20; break; } //@line 2028 "cPickle.c"
      case 7: // $bb6
        HEAP[$element]=0; //@line 2029 "cPickle.c"
        var $33=HEAP[_empty_tuple]; //@line 2032 "cPickle.c"
        var $34=HEAP[$getinitargs_func]; //@line 2032 "cPickle.c"
        var $35=_PyObject_Call($34, $33, 0); //@line 2032 "cPickle.c"
        HEAP[$class_args]=$35; //@line 2032 "cPickle.c"
        var $36=HEAP[$class_args]; //@line 2032 "cPickle.c"
        var $37=($36)==0; //@line 2032 "cPickle.c"
        if ($37) { __label__ = 49; break; } else { __label__ = 8; break; } //@line 2032 "cPickle.c"
      case 8: // $bb7
        var $38=HEAP[$class_args]; //@line 2036 "cPickle.c"
        var $39=_PyObject_Size($38); //@line 2036 "cPickle.c"
        HEAP[$len]=$39; //@line 2036 "cPickle.c"
        var $40=HEAP[$len]; //@line 2036 "cPickle.c"
        var $41=((($40))|0) < 0; //@line 2036 "cPickle.c"
        if ($41) { __label__ = 49; break; } else { __label__ = 9; break; } //@line 2036 "cPickle.c"
      case 9: // $bb8
        HEAP[$i]=0; //@line 2039 "cPickle.c"
        __label__ = 18; break; //@line 2039 "cPickle.c"
      case 10: // $bb9
        var $42=HEAP[$class_args]; //@line 2040 "cPickle.c"
        var $43=HEAP[$i]; //@line 2040 "cPickle.c"
        var $44=_PySequence_GetItem($42, $43); //@line 2040 "cPickle.c"
        HEAP[$element]=$44; //@line 2040 "cPickle.c"
        var $45=HEAP[$element]; //@line 2040 "cPickle.c"
        var $46=($45)==0; //@line 2040 "cPickle.c"
        if ($46) { __label__ = 49; break; } else { __label__ = 11; break; } //@line 2040 "cPickle.c"
      case 11: // $bb10
        var $47=HEAP[$self_addr]; //@line 2043 "cPickle.c"
        var $48=HEAP[$element]; //@line 2043 "cPickle.c"
        var $49=_save($47, $48, 0); //@line 2043 "cPickle.c"
        var $50=((($49))|0) < 0; //@line 2043 "cPickle.c"
        if ($50) { __label__ = 12; break; } else { __label__ = 15; break; } //@line 2043 "cPickle.c"
      case 12: // $bb11
        var $51=HEAP[$element]; //@line 2044 "cPickle.c"
        var $52=(($51)&4294967295); //@line 2044 "cPickle.c"
        var $53=HEAP[$52]; //@line 2044 "cPickle.c"
        var $54=((($53) - 1)&4294967295); //@line 2044 "cPickle.c"
        var $55=HEAP[$element]; //@line 2044 "cPickle.c"
        var $56=(($55)&4294967295); //@line 2044 "cPickle.c"
        HEAP[$56]=$54; //@line 2044 "cPickle.c"
        var $57=HEAP[$element]; //@line 2044 "cPickle.c"
        var $58=(($57)&4294967295); //@line 2044 "cPickle.c"
        var $59=HEAP[$58]; //@line 2044 "cPickle.c"
        var $60=((($59))|0)==0; //@line 2044 "cPickle.c"
        if ($60) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 2044 "cPickle.c"
      case 13: // $bb12
        var $61=HEAP[$element]; //@line 2044 "cPickle.c"
        var $62=(($61+4)&4294967295); //@line 2044 "cPickle.c"
        var $63=HEAP[$62]; //@line 2044 "cPickle.c"
        var $64=(($63+24)&4294967295); //@line 2044 "cPickle.c"
        var $65=HEAP[$64]; //@line 2044 "cPickle.c"
        var $66=HEAP[$element]; //@line 2044 "cPickle.c"
        FUNCTION_TABLE[$65]($66); //@line 2044 "cPickle.c"
        __label__ = 14; break; //@line 2044 "cPickle.c"
      case 14: // $bb13
        __label__ = 49; break; //@line 2044 "cPickle.c"
      case 15: // $bb14
        var $67=HEAP[$element]; //@line 2048 "cPickle.c"
        var $68=(($67)&4294967295); //@line 2048 "cPickle.c"
        var $69=HEAP[$68]; //@line 2048 "cPickle.c"
        var $70=((($69) - 1)&4294967295); //@line 2048 "cPickle.c"
        var $71=HEAP[$element]; //@line 2048 "cPickle.c"
        var $72=(($71)&4294967295); //@line 2048 "cPickle.c"
        HEAP[$72]=$70; //@line 2048 "cPickle.c"
        var $73=HEAP[$element]; //@line 2048 "cPickle.c"
        var $74=(($73)&4294967295); //@line 2048 "cPickle.c"
        var $75=HEAP[$74]; //@line 2048 "cPickle.c"
        var $76=((($75))|0)==0; //@line 2048 "cPickle.c"
        if ($76) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 2048 "cPickle.c"
      case 16: // $bb15
        var $77=HEAP[$element]; //@line 2048 "cPickle.c"
        var $78=(($77+4)&4294967295); //@line 2048 "cPickle.c"
        var $79=HEAP[$78]; //@line 2048 "cPickle.c"
        var $80=(($79+24)&4294967295); //@line 2048 "cPickle.c"
        var $81=HEAP[$80]; //@line 2048 "cPickle.c"
        var $82=HEAP[$element]; //@line 2048 "cPickle.c"
        FUNCTION_TABLE[$81]($82); //@line 2048 "cPickle.c"
        __label__ = 17; break; //@line 2048 "cPickle.c"
      case 17: // $bb16
        var $83=HEAP[$i]; //@line 2039 "cPickle.c"
        var $84=((($83) + 1)&4294967295); //@line 2039 "cPickle.c"
        HEAP[$i]=$84; //@line 2039 "cPickle.c"
        __label__ = 18; break; //@line 2039 "cPickle.c"
      case 18: // $bb17
        var $85=HEAP[$i]; //@line 2039 "cPickle.c"
        var $86=HEAP[$len]; //@line 2039 "cPickle.c"
        var $87=((($85))|0) < ((($86))|0); //@line 2039 "cPickle.c"
        if ($87) { __label__ = 10; break; } else { __label__ = 19; break; } //@line 2039 "cPickle.c"
      case 19: // $bb18
        __label__ = 22; break; //@line 2039 "cPickle.c"
      case 20: // $bb19
        var $88=HEAP[_PyExc_AttributeError]; //@line 2052 "cPickle.c"
        var $89=_PyErr_ExceptionMatches($88); //@line 2052 "cPickle.c"
        var $90=((($89))|0)!=0; //@line 2052 "cPickle.c"
        if ($90) { __label__ = 21; break; } else { __label__ = 49; break; } //@line 2052 "cPickle.c"
      case 21: // $bb20
        _PyErr_Clear(); //@line 2053 "cPickle.c"
        __label__ = 22; break; //@line 2053 "cPickle.c"
      case 22: // $bb21
        var $91=HEAP[$self_addr]; //@line 2058 "cPickle.c"
        var $92=(($91+40)&4294967295); //@line 2058 "cPickle.c"
        var $93=HEAP[$92]; //@line 2058 "cPickle.c"
        var $94=((($93))|0)==0; //@line 2058 "cPickle.c"
        if ($94) { __label__ = 23; break; } else { __label__ = 34; break; } //@line 2058 "cPickle.c"
      case 23: // $bb22
        var $95=HEAP[$class]; //@line 2059 "cPickle.c"
        var $96=$95; //@line 2059 "cPickle.c"
        var $97=(($96+16)&4294967295); //@line 2059 "cPickle.c"
        var $98=HEAP[$97]; //@line 2059 "cPickle.c"
        HEAP[$name]=$98; //@line 2059 "cPickle.c"
        var $99=HEAP[$name]; //@line 2059 "cPickle.c"
        var $100=($99)==0; //@line 2059 "cPickle.c"
        if ($100) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 2059 "cPickle.c"
      case 24: // $bb23
        var $101=HEAP[_PicklingError]; //@line 2060 "cPickle.c"
        _PyErr_SetString($101, ((__str24)&4294967295)); //@line 2060 "cPickle.c"
        __label__ = 49; break; //@line 2060 "cPickle.c"
      case 25: // $bb24
        var $102=HEAP[$class]; //@line 2064 "cPickle.c"
        var $103=HEAP[$name]; //@line 2064 "cPickle.c"
        var $104=_whichmodule($102, $103); //@line 2064 "cPickle.c"
        HEAP[$module]=$104; //@line 2064 "cPickle.c"
        var $105=HEAP[$module]; //@line 2064 "cPickle.c"
        var $106=($105)==0; //@line 2064 "cPickle.c"
        if ($106) { __label__ = 49; break; } else { __label__ = 26; break; } //@line 2064 "cPickle.c"
      case 26: // $bb25
        var $107=HEAP[$module]; //@line 2068 "cPickle.c"
        var $108=_PyString_Size($107); //@line 2068 "cPickle.c"
        HEAP[$module_size]=$108; //@line 2068 "cPickle.c"
        var $109=HEAP[$module_size]; //@line 2068 "cPickle.c"
        var $110=((($109))|0) < 0; //@line 2068 "cPickle.c"
        if ($110) { __label__ = 49; break; } else { __label__ = 27; break; } //@line 2068 "cPickle.c"
      case 27: // $bb26
        var $111=HEAP[$name]; //@line 2068 "cPickle.c"
        var $112=_PyString_Size($111); //@line 2068 "cPickle.c"
        HEAP[$name_size]=$112; //@line 2068 "cPickle.c"
        var $113=HEAP[$name_size]; //@line 2068 "cPickle.c"
        var $114=((($113))|0) < 0; //@line 2068 "cPickle.c"
        if ($114) { __label__ = 49; break; } else { __label__ = 28; break; } //@line 2068 "cPickle.c"
      case 28: // $bb27
        var $115=HEAP[$module]; //@line 2072 "cPickle.c"
        var $116=$115; //@line 2072 "cPickle.c"
        var $117=(($116+20)&4294967295); //@line 2072 "cPickle.c"
        var $118=(($117)&4294967295); //@line 2072 "cPickle.c"
        HEAP[$module_str]=$118; //@line 2072 "cPickle.c"
        var $119=HEAP[$name]; //@line 2073 "cPickle.c"
        var $120=$119; //@line 2073 "cPickle.c"
        var $121=(($120+20)&4294967295); //@line 2073 "cPickle.c"
        var $122=(($121)&4294967295); //@line 2073 "cPickle.c"
        HEAP[$name_str]=$122; //@line 2073 "cPickle.c"
        var $123=HEAP[$self_addr]; //@line 2075 "cPickle.c"
        var $124=(($123+48)&4294967295); //@line 2075 "cPickle.c"
        var $125=HEAP[$124]; //@line 2075 "cPickle.c"
        var $126=HEAP[$self_addr]; //@line 2075 "cPickle.c"
        var $127=FUNCTION_TABLE[$125]($126, _inst_10654, 1); //@line 2075 "cPickle.c"
        var $128=((($127))|0) < 0; //@line 2075 "cPickle.c"
        if ($128) { __label__ = 49; break; } else { __label__ = 29; break; } //@line 2075 "cPickle.c"
      case 29: // $bb28
        var $129=HEAP[$self_addr]; //@line 2078 "cPickle.c"
        var $130=(($129+48)&4294967295); //@line 2078 "cPickle.c"
        var $131=HEAP[$130]; //@line 2078 "cPickle.c"
        var $132=HEAP[$self_addr]; //@line 2078 "cPickle.c"
        var $133=HEAP[$module_str]; //@line 2078 "cPickle.c"
        var $134=HEAP[$module_size]; //@line 2078 "cPickle.c"
        var $135=FUNCTION_TABLE[$131]($132, $133, $134); //@line 2078 "cPickle.c"
        var $136=((($135))|0) < 0; //@line 2078 "cPickle.c"
        if ($136) { __label__ = 49; break; } else { __label__ = 30; break; } //@line 2078 "cPickle.c"
      case 30: // $bb29
        var $137=HEAP[$self_addr]; //@line 2081 "cPickle.c"
        var $138=(($137+48)&4294967295); //@line 2081 "cPickle.c"
        var $139=HEAP[$138]; //@line 2081 "cPickle.c"
        var $140=HEAP[$self_addr]; //@line 2081 "cPickle.c"
        var $141=FUNCTION_TABLE[$139]($140, ((__str12)&4294967295), 1); //@line 2081 "cPickle.c"
        var $142=((($141))|0) < 0; //@line 2081 "cPickle.c"
        if ($142) { __label__ = 49; break; } else { __label__ = 31; break; } //@line 2081 "cPickle.c"
      case 31: // $bb30
        var $143=HEAP[$self_addr]; //@line 2084 "cPickle.c"
        var $144=(($143+48)&4294967295); //@line 2084 "cPickle.c"
        var $145=HEAP[$144]; //@line 2084 "cPickle.c"
        var $146=HEAP[$self_addr]; //@line 2084 "cPickle.c"
        var $147=HEAP[$name_str]; //@line 2084 "cPickle.c"
        var $148=HEAP[$name_size]; //@line 2084 "cPickle.c"
        var $149=FUNCTION_TABLE[$145]($146, $147, $148); //@line 2084 "cPickle.c"
        var $150=((($149))|0) < 0; //@line 2084 "cPickle.c"
        if ($150) { __label__ = 49; break; } else { __label__ = 32; break; } //@line 2084 "cPickle.c"
      case 32: // $bb31
        var $151=HEAP[$self_addr]; //@line 2087 "cPickle.c"
        var $152=(($151+48)&4294967295); //@line 2087 "cPickle.c"
        var $153=HEAP[$152]; //@line 2087 "cPickle.c"
        var $154=HEAP[$self_addr]; //@line 2087 "cPickle.c"
        var $155=FUNCTION_TABLE[$153]($154, ((__str12)&4294967295), 1); //@line 2087 "cPickle.c"
        var $156=((($155))|0) < 0; //@line 2087 "cPickle.c"
        if ($156) { __label__ = 49; break; } else { __label__ = 33; break; } //@line 2087 "cPickle.c"
      case 33: // $bb32
        __label__ = 35; break; //@line 2087 "cPickle.c"
      case 34: // $bb33
        var $157=HEAP[$self_addr]; //@line 2090 "cPickle.c"
        var $158=(($157+48)&4294967295); //@line 2090 "cPickle.c"
        var $159=HEAP[$158]; //@line 2090 "cPickle.c"
        var $160=HEAP[$self_addr]; //@line 2090 "cPickle.c"
        var $161=FUNCTION_TABLE[$159]($160, _obj_10655, 1); //@line 2090 "cPickle.c"
        var $162=((($161))|0) < 0; //@line 2090 "cPickle.c"
        if ($162) { __label__ = 49; break; } else { __label__ = 35; break; } //@line 2090 "cPickle.c"
      case 35: // $bb34
        var $163=HEAP[___getstate___str]; //@line 2094 "cPickle.c"
        var $164=HEAP[$args_addr]; //@line 2094 "cPickle.c"
        var $165=_PyObject_GetAttr($164, $163); //@line 2094 "cPickle.c"
        HEAP[$getstate_func]=$165; //@line 2094 "cPickle.c"
        var $166=HEAP[$getstate_func]; //@line 2094 "cPickle.c"
        var $167=($166)!=0; //@line 2094 "cPickle.c"
        if ($167) { __label__ = 36; break; } else { __label__ = 38; break; } //@line 2094 "cPickle.c"
      case 36: // $bb35
        var $168=HEAP[_empty_tuple]; //@line 2095 "cPickle.c"
        var $169=HEAP[$getstate_func]; //@line 2095 "cPickle.c"
        var $170=_PyObject_Call($169, $168, 0); //@line 2095 "cPickle.c"
        HEAP[$state]=$170; //@line 2095 "cPickle.c"
        var $171=HEAP[$state]; //@line 2096 "cPickle.c"
        var $172=($171)==0; //@line 2096 "cPickle.c"
        if ($172) { __label__ = 49; break; } else { __label__ = 37; break; } //@line 2096 "cPickle.c"
      case 37: // $bb36
        __label__ = 42; break; //@line 2096 "cPickle.c"
      case 38: // $bb37
        var $173=HEAP[_PyExc_AttributeError]; //@line 2100 "cPickle.c"
        var $174=_PyErr_ExceptionMatches($173); //@line 2100 "cPickle.c"
        var $175=((($174))|0)!=0; //@line 2100 "cPickle.c"
        if ($175) { __label__ = 39; break; } else { __label__ = 49; break; } //@line 2100 "cPickle.c"
      case 39: // $bb38
        _PyErr_Clear(); //@line 2101 "cPickle.c"
        var $176=HEAP[___dict___str]; //@line 2105 "cPickle.c"
        var $177=HEAP[$args_addr]; //@line 2105 "cPickle.c"
        var $178=_PyObject_GetAttr($177, $176); //@line 2105 "cPickle.c"
        HEAP[$state]=$178; //@line 2105 "cPickle.c"
        var $179=HEAP[$state]; //@line 2105 "cPickle.c"
        var $180=($179)==0; //@line 2105 "cPickle.c"
        if ($180) { __label__ = 40; break; } else { __label__ = 42; break; } //@line 2105 "cPickle.c"
      case 40: // $bb39
        var $181=HEAP[_PyExc_AttributeError]; //@line 2106 "cPickle.c"
        var $182=_PyErr_ExceptionMatches($181); //@line 2106 "cPickle.c"
        var $183=((($182))|0)!=0; //@line 2106 "cPickle.c"
        if ($183) { __label__ = 41; break; } else { __label__ = 49; break; } //@line 2106 "cPickle.c"
      case 41: // $bb40
        _PyErr_Clear(); //@line 2107 "cPickle.c"
        HEAP[$res]=0; //@line 2110 "cPickle.c"
        __label__ = 49; break; //@line 2110 "cPickle.c"
      case 42: // $bb41
        var $184=HEAP[$state]; //@line 2115 "cPickle.c"
        var $185=(($184+4)&4294967295); //@line 2115 "cPickle.c"
        var $186=HEAP[$185]; //@line 2115 "cPickle.c"
        var $187=(($186+84)&4294967295); //@line 2115 "cPickle.c"
        var $188=HEAP[$187]; //@line 2115 "cPickle.c"
        var $189=($188) & 536870912; //@line 2115 "cPickle.c"
        var $190=((($189))|0)==0; //@line 2115 "cPickle.c"
        if ($190) { __label__ = 43; break; } else { __label__ = 45; break; } //@line 2115 "cPickle.c"
      case 43: // $bb42
        var $191=HEAP[$self_addr]; //@line 2116 "cPickle.c"
        var $192=HEAP[$args_addr]; //@line 2116 "cPickle.c"
        var $193=_put2($191, $192); //@line 2116 "cPickle.c"
        var $194=((($193))|0) < 0; //@line 2116 "cPickle.c"
        if ($194) { __label__ = 49; break; } else { __label__ = 44; break; } //@line 2116 "cPickle.c"
      case 44: // $bb43
        __label__ = 46; break; //@line 2116 "cPickle.c"
      case 45: // $bb44
        var $195=HEAP[$self_addr]; //@line 2120 "cPickle.c"
        var $196=HEAP[$args_addr]; //@line 2120 "cPickle.c"
        var $197=_put($195, $196); //@line 2120 "cPickle.c"
        var $198=((($197))|0) < 0; //@line 2120 "cPickle.c"
        if ($198) { __label__ = 49; break; } else { __label__ = 46; break; } //@line 2120 "cPickle.c"
      case 46: // $bb45
        var $199=HEAP[$self_addr]; //@line 2124 "cPickle.c"
        var $200=HEAP[$state]; //@line 2124 "cPickle.c"
        var $201=_save($199, $200, 0); //@line 2124 "cPickle.c"
        var $202=((($201))|0) < 0; //@line 2124 "cPickle.c"
        if ($202) { __label__ = 49; break; } else { __label__ = 47; break; } //@line 2124 "cPickle.c"
      case 47: // $bb46
        var $203=HEAP[$self_addr]; //@line 2127 "cPickle.c"
        var $204=(($203+48)&4294967295); //@line 2127 "cPickle.c"
        var $205=HEAP[$204]; //@line 2127 "cPickle.c"
        var $206=HEAP[$self_addr]; //@line 2127 "cPickle.c"
        var $207=FUNCTION_TABLE[$205]($206, _build_10656, 1); //@line 2127 "cPickle.c"
        var $208=((($207))|0) < 0; //@line 2127 "cPickle.c"
        if ($208) { __label__ = 49; break; } else { __label__ = 48; break; } //@line 2127 "cPickle.c"
      case 48: // $bb47
        HEAP[$res]=0; //@line 2130 "cPickle.c"
        __label__ = 49; break; //@line 2132 "cPickle.c"
      case 49: // $finally
        var $209=HEAP[$self_addr]; //@line 2133 "cPickle.c"
        var $210=(($209+44)&4294967295); //@line 2133 "cPickle.c"
        var $211=HEAP[$210]; //@line 2133 "cPickle.c"
        var $212=((($211))|0)!=0; //@line 2133 "cPickle.c"
        if ($212) { __label__ = 50; break; } else { __label__ = 52; break; } //@line 2133 "cPickle.c"
      case 50: // $bb48
        var $213=HEAP[$self_addr]; //@line 2133 "cPickle.c"
        var $214=HEAP[$args_addr]; //@line 2133 "cPickle.c"
        var $215=_fast_save_leave($213, $214); //@line 2133 "cPickle.c"
        var $216=((($215))|0)==0; //@line 2133 "cPickle.c"
        if ($216) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 2133 "cPickle.c"
      case 51: // $bb49
        HEAP[$res]=-1; //@line 2134 "cPickle.c"
        __label__ = 52; break; //@line 2134 "cPickle.c"
      case 52: // $bb50
        var $217=HEAP[$module]; //@line 2136 "cPickle.c"
        var $218=($217)!=0; //@line 2136 "cPickle.c"
        if ($218) { __label__ = 53; break; } else { __label__ = 55; break; } //@line 2136 "cPickle.c"
      case 53: // $bb51
        var $219=HEAP[$module]; //@line 2136 "cPickle.c"
        var $220=(($219)&4294967295); //@line 2136 "cPickle.c"
        var $221=HEAP[$220]; //@line 2136 "cPickle.c"
        var $222=((($221) - 1)&4294967295); //@line 2136 "cPickle.c"
        var $223=HEAP[$module]; //@line 2136 "cPickle.c"
        var $224=(($223)&4294967295); //@line 2136 "cPickle.c"
        HEAP[$224]=$222; //@line 2136 "cPickle.c"
        var $225=HEAP[$module]; //@line 2136 "cPickle.c"
        var $226=(($225)&4294967295); //@line 2136 "cPickle.c"
        var $227=HEAP[$226]; //@line 2136 "cPickle.c"
        var $228=((($227))|0)==0; //@line 2136 "cPickle.c"
        if ($228) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 2136 "cPickle.c"
      case 54: // $bb52
        var $229=HEAP[$module]; //@line 2136 "cPickle.c"
        var $230=(($229+4)&4294967295); //@line 2136 "cPickle.c"
        var $231=HEAP[$230]; //@line 2136 "cPickle.c"
        var $232=(($231+24)&4294967295); //@line 2136 "cPickle.c"
        var $233=HEAP[$232]; //@line 2136 "cPickle.c"
        var $234=HEAP[$module]; //@line 2136 "cPickle.c"
        FUNCTION_TABLE[$233]($234); //@line 2136 "cPickle.c"
        __label__ = 55; break; //@line 2136 "cPickle.c"
      case 55: // $bb53
        var $235=HEAP[$class]; //@line 2137 "cPickle.c"
        var $236=($235)!=0; //@line 2137 "cPickle.c"
        if ($236) { __label__ = 56; break; } else { __label__ = 58; break; } //@line 2137 "cPickle.c"
      case 56: // $bb54
        var $237=HEAP[$class]; //@line 2137 "cPickle.c"
        var $238=(($237)&4294967295); //@line 2137 "cPickle.c"
        var $239=HEAP[$238]; //@line 2137 "cPickle.c"
        var $240=((($239) - 1)&4294967295); //@line 2137 "cPickle.c"
        var $241=HEAP[$class]; //@line 2137 "cPickle.c"
        var $242=(($241)&4294967295); //@line 2137 "cPickle.c"
        HEAP[$242]=$240; //@line 2137 "cPickle.c"
        var $243=HEAP[$class]; //@line 2137 "cPickle.c"
        var $244=(($243)&4294967295); //@line 2137 "cPickle.c"
        var $245=HEAP[$244]; //@line 2137 "cPickle.c"
        var $246=((($245))|0)==0; //@line 2137 "cPickle.c"
        if ($246) { __label__ = 57; break; } else { __label__ = 58; break; } //@line 2137 "cPickle.c"
      case 57: // $bb55
        var $247=HEAP[$class]; //@line 2137 "cPickle.c"
        var $248=(($247+4)&4294967295); //@line 2137 "cPickle.c"
        var $249=HEAP[$248]; //@line 2137 "cPickle.c"
        var $250=(($249+24)&4294967295); //@line 2137 "cPickle.c"
        var $251=HEAP[$250]; //@line 2137 "cPickle.c"
        var $252=HEAP[$class]; //@line 2137 "cPickle.c"
        FUNCTION_TABLE[$251]($252); //@line 2137 "cPickle.c"
        __label__ = 58; break; //@line 2137 "cPickle.c"
      case 58: // $bb56
        var $253=HEAP[$state]; //@line 2138 "cPickle.c"
        var $254=($253)!=0; //@line 2138 "cPickle.c"
        if ($254) { __label__ = 59; break; } else { __label__ = 61; break; } //@line 2138 "cPickle.c"
      case 59: // $bb57
        var $255=HEAP[$state]; //@line 2138 "cPickle.c"
        var $256=(($255)&4294967295); //@line 2138 "cPickle.c"
        var $257=HEAP[$256]; //@line 2138 "cPickle.c"
        var $258=((($257) - 1)&4294967295); //@line 2138 "cPickle.c"
        var $259=HEAP[$state]; //@line 2138 "cPickle.c"
        var $260=(($259)&4294967295); //@line 2138 "cPickle.c"
        HEAP[$260]=$258; //@line 2138 "cPickle.c"
        var $261=HEAP[$state]; //@line 2138 "cPickle.c"
        var $262=(($261)&4294967295); //@line 2138 "cPickle.c"
        var $263=HEAP[$262]; //@line 2138 "cPickle.c"
        var $264=((($263))|0)==0; //@line 2138 "cPickle.c"
        if ($264) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 2138 "cPickle.c"
      case 60: // $bb58
        var $265=HEAP[$state]; //@line 2138 "cPickle.c"
        var $266=(($265+4)&4294967295); //@line 2138 "cPickle.c"
        var $267=HEAP[$266]; //@line 2138 "cPickle.c"
        var $268=(($267+24)&4294967295); //@line 2138 "cPickle.c"
        var $269=HEAP[$268]; //@line 2138 "cPickle.c"
        var $270=HEAP[$state]; //@line 2138 "cPickle.c"
        FUNCTION_TABLE[$269]($270); //@line 2138 "cPickle.c"
        __label__ = 61; break; //@line 2138 "cPickle.c"
      case 61: // $bb59
        var $271=HEAP[$getinitargs_func]; //@line 2139 "cPickle.c"
        var $272=($271)!=0; //@line 2139 "cPickle.c"
        if ($272) { __label__ = 62; break; } else { __label__ = 64; break; } //@line 2139 "cPickle.c"
      case 62: // $bb60
        var $273=HEAP[$getinitargs_func]; //@line 2139 "cPickle.c"
        var $274=(($273)&4294967295); //@line 2139 "cPickle.c"
        var $275=HEAP[$274]; //@line 2139 "cPickle.c"
        var $276=((($275) - 1)&4294967295); //@line 2139 "cPickle.c"
        var $277=HEAP[$getinitargs_func]; //@line 2139 "cPickle.c"
        var $278=(($277)&4294967295); //@line 2139 "cPickle.c"
        HEAP[$278]=$276; //@line 2139 "cPickle.c"
        var $279=HEAP[$getinitargs_func]; //@line 2139 "cPickle.c"
        var $280=(($279)&4294967295); //@line 2139 "cPickle.c"
        var $281=HEAP[$280]; //@line 2139 "cPickle.c"
        var $282=((($281))|0)==0; //@line 2139 "cPickle.c"
        if ($282) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 2139 "cPickle.c"
      case 63: // $bb61
        var $283=HEAP[$getinitargs_func]; //@line 2139 "cPickle.c"
        var $284=(($283+4)&4294967295); //@line 2139 "cPickle.c"
        var $285=HEAP[$284]; //@line 2139 "cPickle.c"
        var $286=(($285+24)&4294967295); //@line 2139 "cPickle.c"
        var $287=HEAP[$286]; //@line 2139 "cPickle.c"
        var $288=HEAP[$getinitargs_func]; //@line 2139 "cPickle.c"
        FUNCTION_TABLE[$287]($288); //@line 2139 "cPickle.c"
        __label__ = 64; break; //@line 2139 "cPickle.c"
      case 64: // $bb62
        var $289=HEAP[$getstate_func]; //@line 2140 "cPickle.c"
        var $290=($289)!=0; //@line 2140 "cPickle.c"
        if ($290) { __label__ = 65; break; } else { __label__ = 67; break; } //@line 2140 "cPickle.c"
      case 65: // $bb63
        var $291=HEAP[$getstate_func]; //@line 2140 "cPickle.c"
        var $292=(($291)&4294967295); //@line 2140 "cPickle.c"
        var $293=HEAP[$292]; //@line 2140 "cPickle.c"
        var $294=((($293) - 1)&4294967295); //@line 2140 "cPickle.c"
        var $295=HEAP[$getstate_func]; //@line 2140 "cPickle.c"
        var $296=(($295)&4294967295); //@line 2140 "cPickle.c"
        HEAP[$296]=$294; //@line 2140 "cPickle.c"
        var $297=HEAP[$getstate_func]; //@line 2140 "cPickle.c"
        var $298=(($297)&4294967295); //@line 2140 "cPickle.c"
        var $299=HEAP[$298]; //@line 2140 "cPickle.c"
        var $300=((($299))|0)==0; //@line 2140 "cPickle.c"
        if ($300) { __label__ = 66; break; } else { __label__ = 67; break; } //@line 2140 "cPickle.c"
      case 66: // $bb64
        var $301=HEAP[$getstate_func]; //@line 2140 "cPickle.c"
        var $302=(($301+4)&4294967295); //@line 2140 "cPickle.c"
        var $303=HEAP[$302]; //@line 2140 "cPickle.c"
        var $304=(($303+24)&4294967295); //@line 2140 "cPickle.c"
        var $305=HEAP[$304]; //@line 2140 "cPickle.c"
        var $306=HEAP[$getstate_func]; //@line 2140 "cPickle.c"
        FUNCTION_TABLE[$305]($306); //@line 2140 "cPickle.c"
        __label__ = 67; break; //@line 2140 "cPickle.c"
      case 67: // $bb65
        var $307=HEAP[$class_args]; //@line 2141 "cPickle.c"
        var $308=($307)!=0; //@line 2141 "cPickle.c"
        if ($308) { __label__ = 68; break; } else { __label__ = 70; break; } //@line 2141 "cPickle.c"
      case 68: // $bb66
        var $309=HEAP[$class_args]; //@line 2141 "cPickle.c"
        var $310=(($309)&4294967295); //@line 2141 "cPickle.c"
        var $311=HEAP[$310]; //@line 2141 "cPickle.c"
        var $312=((($311) - 1)&4294967295); //@line 2141 "cPickle.c"
        var $313=HEAP[$class_args]; //@line 2141 "cPickle.c"
        var $314=(($313)&4294967295); //@line 2141 "cPickle.c"
        HEAP[$314]=$312; //@line 2141 "cPickle.c"
        var $315=HEAP[$class_args]; //@line 2141 "cPickle.c"
        var $316=(($315)&4294967295); //@line 2141 "cPickle.c"
        var $317=HEAP[$316]; //@line 2141 "cPickle.c"
        var $318=((($317))|0)==0; //@line 2141 "cPickle.c"
        if ($318) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 2141 "cPickle.c"
      case 69: // $bb67
        var $319=HEAP[$class_args]; //@line 2141 "cPickle.c"
        var $320=(($319+4)&4294967295); //@line 2141 "cPickle.c"
        var $321=HEAP[$320]; //@line 2141 "cPickle.c"
        var $322=(($321+24)&4294967295); //@line 2141 "cPickle.c"
        var $323=HEAP[$322]; //@line 2141 "cPickle.c"
        var $324=HEAP[$class_args]; //@line 2141 "cPickle.c"
        FUNCTION_TABLE[$323]($324); //@line 2141 "cPickle.c"
        __label__ = 70; break; //@line 2141 "cPickle.c"
      case 70: // $bb68
        var $325=HEAP[$res]; //@line 2143 "cPickle.c"
        HEAP[$0]=$325; //@line 2143 "cPickle.c"
        var $326=HEAP[$0]; //@line 2143 "cPickle.c"
        HEAP[$retval]=$326; //@line 2143 "cPickle.c"
        __label__ = 71; break; //@line 2143 "cPickle.c"
      case 71: // $return
        var $retval69=HEAP[$retval]; //@line 2143 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval69; //@line 2143 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_global($self, $args, $name) {
    var __stackBase__  = STACKTOP; STACKTOP += 73; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 73);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $name_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $global_name=__stackBase__+20;
        var $module=__stackBase__+24;
        var $mod=__stackBase__+28;
        var $klass=__stackBase__+32;
        var $name_str=__stackBase__+36;
        var $module_str=__stackBase__+40;
        var $module_size=__stackBase__+44;
        var $name_size=__stackBase__+48;
        var $res=__stackBase__+52;
        var $py_code=__stackBase__+56;
        var $code=__stackBase__+60;
        var $c_str=__stackBase__+64;
        var $n=__stackBase__+69;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$name_addr]=$name;
        HEAP[$global_name]=0; //@line 2150 "cPickle.c"
        HEAP[$module]=0; //@line 2150 "cPickle.c"
        HEAP[$mod]=0; //@line 2150 "cPickle.c"
        HEAP[$klass]=0; //@line 2150 "cPickle.c"
        HEAP[$res]=-1; //@line 2152 "cPickle.c"
        var $1=HEAP[$name_addr]; //@line 2156 "cPickle.c"
        var $2=($1)!=0; //@line 2156 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2156 "cPickle.c"
      case 1: // $bb
        var $3=HEAP[$name_addr]; //@line 2157 "cPickle.c"
        HEAP[$global_name]=$3; //@line 2157 "cPickle.c"
        var $4=HEAP[$global_name]; //@line 2158 "cPickle.c"
        var $5=(($4)&4294967295); //@line 2158 "cPickle.c"
        var $6=HEAP[$5]; //@line 2158 "cPickle.c"
        var $7=((($6) + 1)&4294967295); //@line 2158 "cPickle.c"
        var $8=HEAP[$global_name]; //@line 2158 "cPickle.c"
        var $9=(($8)&4294967295); //@line 2158 "cPickle.c"
        HEAP[$9]=$7; //@line 2158 "cPickle.c"
        __label__ = 3; break; //@line 2158 "cPickle.c"
      case 2: // $bb1
        var $10=HEAP[___name___str]; //@line 2161 "cPickle.c"
        var $11=HEAP[$args_addr]; //@line 2161 "cPickle.c"
        var $12=_PyObject_GetAttr($11, $10); //@line 2161 "cPickle.c"
        HEAP[$global_name]=$12; //@line 2161 "cPickle.c"
        var $13=HEAP[$global_name]; //@line 2161 "cPickle.c"
        var $14=($13)==0; //@line 2161 "cPickle.c"
        if ($14) { __label__ = 37; break; } else { __label__ = 3; break; } //@line 2161 "cPickle.c"
      case 3: // $bb2
        var $15=HEAP[$args_addr]; //@line 2165 "cPickle.c"
        var $16=HEAP[$global_name]; //@line 2165 "cPickle.c"
        var $17=_whichmodule($15, $16); //@line 2165 "cPickle.c"
        HEAP[$module]=$17; //@line 2165 "cPickle.c"
        var $18=HEAP[$module]; //@line 2165 "cPickle.c"
        var $19=($18)==0; //@line 2165 "cPickle.c"
        if ($19) { __label__ = 37; break; } else { __label__ = 4; break; } //@line 2165 "cPickle.c"
      case 4: // $bb3
        var $20=HEAP[$module]; //@line 2168 "cPickle.c"
        var $21=_PyString_Size($20); //@line 2168 "cPickle.c"
        HEAP[$module_size]=$21; //@line 2168 "cPickle.c"
        var $22=HEAP[$module_size]; //@line 2168 "cPickle.c"
        var $23=((($22))|0) < 0; //@line 2168 "cPickle.c"
        if ($23) { __label__ = 37; break; } else { __label__ = 5; break; } //@line 2168 "cPickle.c"
      case 5: // $bb4
        var $24=HEAP[$global_name]; //@line 2168 "cPickle.c"
        var $25=_PyString_Size($24); //@line 2168 "cPickle.c"
        HEAP[$name_size]=$25; //@line 2168 "cPickle.c"
        var $26=HEAP[$name_size]; //@line 2168 "cPickle.c"
        var $27=((($26))|0) < 0; //@line 2168 "cPickle.c"
        if ($27) { __label__ = 37; break; } else { __label__ = 6; break; } //@line 2168 "cPickle.c"
      case 6: // $bb5
        var $28=HEAP[$module]; //@line 2172 "cPickle.c"
        var $29=$28; //@line 2172 "cPickle.c"
        var $30=(($29+20)&4294967295); //@line 2172 "cPickle.c"
        var $31=(($30)&4294967295); //@line 2172 "cPickle.c"
        HEAP[$module_str]=$31; //@line 2172 "cPickle.c"
        var $32=HEAP[$global_name]; //@line 2173 "cPickle.c"
        var $33=$32; //@line 2173 "cPickle.c"
        var $34=(($33+20)&4294967295); //@line 2173 "cPickle.c"
        var $35=(($34)&4294967295); //@line 2173 "cPickle.c"
        HEAP[$name_str]=$35; //@line 2173 "cPickle.c"
        var $36=HEAP[$module_str]; //@line 2177 "cPickle.c"
        var $37=_PyImport_ImportModule($36); //@line 2177 "cPickle.c"
        HEAP[$mod]=$37; //@line 2177 "cPickle.c"
        var $38=HEAP[$mod]; //@line 2178 "cPickle.c"
        var $39=($38)==0; //@line 2178 "cPickle.c"
        if ($39) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 2178 "cPickle.c"
      case 7: // $bb6
        var $40=HEAP[_PicklingError]; //@line 2179 "cPickle.c"
        var $41=HEAP[$args_addr]; //@line 2179 "cPickle.c"
        var $42=HEAP[$module]; //@line 2179 "cPickle.c"
        var $43=_cPickle_ErrFormat($40, ((__str25)&4294967295), ((__str26)&4294967295), allocate([$41,0,0,0,$42,0,0,0], ["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 2179 "cPickle.c"
        __label__ = 37; break; //@line 2179 "cPickle.c"
      case 8: // $bb7
        var $44=HEAP[$mod]; //@line 2185 "cPickle.c"
        var $45=HEAP[$name_str]; //@line 2185 "cPickle.c"
        var $46=_PyObject_GetAttrString($44, $45); //@line 2185 "cPickle.c"
        HEAP[$klass]=$46; //@line 2185 "cPickle.c"
        var $47=HEAP[$klass]; //@line 2186 "cPickle.c"
        var $48=($47)==0; //@line 2186 "cPickle.c"
        if ($48) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 2186 "cPickle.c"
      case 9: // $bb8
        var $49=HEAP[_PicklingError]; //@line 2187 "cPickle.c"
        var $50=HEAP[$args_addr]; //@line 2187 "cPickle.c"
        var $51=HEAP[$module]; //@line 2187 "cPickle.c"
        var $52=HEAP[$global_name]; //@line 2187 "cPickle.c"
        var $53=_cPickle_ErrFormat($49, ((__str27)&4294967295), ((__str28)&4294967295), allocate([$50,0,0,0,$51,0,0,0,$52,0,0,0], ["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 2187 "cPickle.c"
        __label__ = 37; break; //@line 2187 "cPickle.c"
      case 10: // $bb9
        var $54=HEAP[$klass]; //@line 2193 "cPickle.c"
        var $55=HEAP[$args_addr]; //@line 2193 "cPickle.c"
        var $56=($54)!=($55); //@line 2193 "cPickle.c"
        if ($56) { __label__ = 11; break; } else { __label__ = 14; break; } //@line 2193 "cPickle.c"
      case 11: // $bb10
        var $57=HEAP[$klass]; //@line 2194 "cPickle.c"
        var $58=(($57)&4294967295); //@line 2194 "cPickle.c"
        var $59=HEAP[$58]; //@line 2194 "cPickle.c"
        var $60=((($59) - 1)&4294967295); //@line 2194 "cPickle.c"
        var $61=HEAP[$klass]; //@line 2194 "cPickle.c"
        var $62=(($61)&4294967295); //@line 2194 "cPickle.c"
        HEAP[$62]=$60; //@line 2194 "cPickle.c"
        var $63=HEAP[$klass]; //@line 2194 "cPickle.c"
        var $64=(($63)&4294967295); //@line 2194 "cPickle.c"
        var $65=HEAP[$64]; //@line 2194 "cPickle.c"
        var $66=((($65))|0)==0; //@line 2194 "cPickle.c"
        if ($66) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 2194 "cPickle.c"
      case 12: // $bb11
        var $67=HEAP[$klass]; //@line 2194 "cPickle.c"
        var $68=(($67+4)&4294967295); //@line 2194 "cPickle.c"
        var $69=HEAP[$68]; //@line 2194 "cPickle.c"
        var $70=(($69+24)&4294967295); //@line 2194 "cPickle.c"
        var $71=HEAP[$70]; //@line 2194 "cPickle.c"
        var $72=HEAP[$klass]; //@line 2194 "cPickle.c"
        FUNCTION_TABLE[$71]($72); //@line 2194 "cPickle.c"
        __label__ = 13; break; //@line 2194 "cPickle.c"
      case 13: // $bb12
        var $73=HEAP[_PicklingError]; //@line 2195 "cPickle.c"
        var $74=HEAP[$args_addr]; //@line 2195 "cPickle.c"
        var $75=HEAP[$module]; //@line 2195 "cPickle.c"
        var $76=HEAP[$global_name]; //@line 2195 "cPickle.c"
        var $77=_cPickle_ErrFormat($73, ((__str29)&4294967295), ((__str28)&4294967295), allocate([$74,0,0,0,$75,0,0,0,$76,0,0,0], ["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 2195 "cPickle.c"
        __label__ = 37; break; //@line 2195 "cPickle.c"
      case 14: // $bb13
        var $78=HEAP[$klass]; //@line 2201 "cPickle.c"
        var $79=(($78)&4294967295); //@line 2201 "cPickle.c"
        var $80=HEAP[$79]; //@line 2201 "cPickle.c"
        var $81=((($80) - 1)&4294967295); //@line 2201 "cPickle.c"
        var $82=HEAP[$klass]; //@line 2201 "cPickle.c"
        var $83=(($82)&4294967295); //@line 2201 "cPickle.c"
        HEAP[$83]=$81; //@line 2201 "cPickle.c"
        var $84=HEAP[$klass]; //@line 2201 "cPickle.c"
        var $85=(($84)&4294967295); //@line 2201 "cPickle.c"
        var $86=HEAP[$85]; //@line 2201 "cPickle.c"
        var $87=((($86))|0)==0; //@line 2201 "cPickle.c"
        if ($87) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 2201 "cPickle.c"
      case 15: // $bb14
        var $88=HEAP[$klass]; //@line 2201 "cPickle.c"
        var $89=(($88+4)&4294967295); //@line 2201 "cPickle.c"
        var $90=HEAP[$89]; //@line 2201 "cPickle.c"
        var $91=(($90+24)&4294967295); //@line 2201 "cPickle.c"
        var $92=HEAP[$91]; //@line 2201 "cPickle.c"
        var $93=HEAP[$klass]; //@line 2201 "cPickle.c"
        FUNCTION_TABLE[$92]($93); //@line 2201 "cPickle.c"
        __label__ = 16; break; //@line 2201 "cPickle.c"
      case 16: // $bb15
        var $94=HEAP[$self_addr]; //@line 2203 "cPickle.c"
        var $95=(($94+36)&4294967295); //@line 2203 "cPickle.c"
        var $96=HEAP[$95]; //@line 2203 "cPickle.c"
        var $97=((($96))|0) > 1; //@line 2203 "cPickle.c"
        if ($97) { __label__ = 17; break; } else { __label__ = 30; break; } //@line 2203 "cPickle.c"
      case 17: // $bb16
        var $98=HEAP[_two_tuple]; //@line 2212 "cPickle.c"
        var $99=$98; //@line 2212 "cPickle.c"
        var $100=(($99+12)&4294967295); //@line 2212 "cPickle.c"
        var $101=(($100)&4294967295); //@line 2212 "cPickle.c"
        var $102=HEAP[$module]; //@line 2212 "cPickle.c"
        HEAP[$101]=$102; //@line 2212 "cPickle.c"
        var $103=HEAP[_two_tuple]; //@line 2213 "cPickle.c"
        var $104=$103; //@line 2213 "cPickle.c"
        var $105=(($104+12)&4294967295); //@line 2213 "cPickle.c"
        var $106=(($105+4)&4294967295); //@line 2213 "cPickle.c"
        var $107=HEAP[$global_name]; //@line 2213 "cPickle.c"
        HEAP[$106]=$107; //@line 2213 "cPickle.c"
        var $108=HEAP[_two_tuple]; //@line 2214 "cPickle.c"
        var $109=HEAP[_extension_registry]; //@line 2214 "cPickle.c"
        var $110=_PyDict_GetItem($109, $108); //@line 2214 "cPickle.c"
        HEAP[$py_code]=$110; //@line 2214 "cPickle.c"
        var $111=HEAP[$py_code]; //@line 2215 "cPickle.c"
        var $112=($111)==0; //@line 2215 "cPickle.c"
        if ($112) { __label__ = 30; break; } else { __label__ = 18; break; } //@line 2215 "cPickle.c"
      case 18: // $bb17
        var $113=HEAP[$py_code]; //@line 2219 "cPickle.c"
        var $114=(($113+4)&4294967295); //@line 2219 "cPickle.c"
        var $115=HEAP[$114]; //@line 2219 "cPickle.c"
        var $116=(($115+84)&4294967295); //@line 2219 "cPickle.c"
        var $117=HEAP[$116]; //@line 2219 "cPickle.c"
        var $118=($117) & 8388608; //@line 2219 "cPickle.c"
        var $119=((($118))|0)==0; //@line 2219 "cPickle.c"
        if ($119) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 2219 "cPickle.c"
      case 19: // $bb18
        var $120=HEAP[_PicklingError]; //@line 2220 "cPickle.c"
        var $121=HEAP[$args_addr]; //@line 2220 "cPickle.c"
        var $122=HEAP[$py_code]; //@line 2220 "cPickle.c"
        var $123=_cPickle_ErrFormat($120, ((__str30)&4294967295), ((__str31)&4294967295), allocate([$121,0,0,0,$122,0,0,0], ["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 2220 "cPickle.c"
        __label__ = 37; break; //@line 2220 "cPickle.c"
      case 20: // $bb19
        var $124=HEAP[$py_code]; //@line 2225 "cPickle.c"
        var $125=$124; //@line 2225 "cPickle.c"
        var $126=(($125+8)&4294967295); //@line 2225 "cPickle.c"
        var $127=HEAP[$126]; //@line 2225 "cPickle.c"
        HEAP[$code]=$127; //@line 2225 "cPickle.c"
        var $128=HEAP[$code]; //@line 2226 "cPickle.c"
        var $129=((($128))|0) <= 0; //@line 2226 "cPickle.c"
        if ($129) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 2226 "cPickle.c"
      case 21: // $bb20
        var $130=HEAP[_PicklingError]; //@line 2227 "cPickle.c"
        var $131=HEAP[$args_addr]; //@line 2227 "cPickle.c"
        var $132=HEAP[$code]; //@line 2227 "cPickle.c"
        var $133=_cPickle_ErrFormat($130, ((__str32)&4294967295), ((__str33)&4294967295), allocate([$131,0,0,0,$132,0,0,0], ["%struct.PyObject*",0,0,0,"i32",0,0,0], ALLOC_STACK)); //@line 2227 "cPickle.c"
        __label__ = 37; break; //@line 2227 "cPickle.c"
      case 22: // $bb21
        var $134=HEAP[$code]; //@line 2234 "cPickle.c"
        var $135=((($134))|0) <= 255; //@line 2234 "cPickle.c"
        if ($135) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 2234 "cPickle.c"
      case 23: // $bb22
        var $136=(($c_str)&4294967295); //@line 2235 "cPickle.c"
        HEAP[$136]=-126; //@line 2235 "cPickle.c"
        var $137=HEAP[$code]; //@line 2236 "cPickle.c"
        var $138=((($137)) & 255); //@line 2236 "cPickle.c"
        var $139=(($c_str+1)&4294967295); //@line 2236 "cPickle.c"
        HEAP[$139]=$138; //@line 2236 "cPickle.c"
        HEAP[$n]=2; //@line 2237 "cPickle.c"
        __label__ = 27; break; //@line 2237 "cPickle.c"
      case 24: // $bb23
        var $140=HEAP[$code]; //@line 2239 "cPickle.c"
        var $141=((($140))|0) <= 65535; //@line 2239 "cPickle.c"
        if ($141) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 2239 "cPickle.c"
      case 25: // $bb24
        var $142=(($c_str)&4294967295); //@line 2240 "cPickle.c"
        HEAP[$142]=-125; //@line 2240 "cPickle.c"
        var $143=HEAP[$code]; //@line 2241 "cPickle.c"
        var $144=((($143)) & 255); //@line 2241 "cPickle.c"
        var $145=(($c_str+1)&4294967295); //@line 2241 "cPickle.c"
        HEAP[$145]=$144; //@line 2241 "cPickle.c"
        var $146=HEAP[$code]; //@line 2242 "cPickle.c"
        var $147=((($146))|0) >> 8; //@line 2242 "cPickle.c"
        var $148=((($147)) & 255); //@line 2242 "cPickle.c"
        var $149=(($c_str+2)&4294967295); //@line 2242 "cPickle.c"
        HEAP[$149]=$148; //@line 2242 "cPickle.c"
        HEAP[$n]=3; //@line 2243 "cPickle.c"
        __label__ = 27; break; //@line 2243 "cPickle.c"
      case 26: // $bb25
        var $150=(($c_str)&4294967295); //@line 2246 "cPickle.c"
        HEAP[$150]=-124; //@line 2246 "cPickle.c"
        var $151=HEAP[$code]; //@line 2247 "cPickle.c"
        var $152=((($151)) & 255); //@line 2247 "cPickle.c"
        var $153=(($c_str+1)&4294967295); //@line 2247 "cPickle.c"
        HEAP[$153]=$152; //@line 2247 "cPickle.c"
        var $154=HEAP[$code]; //@line 2248 "cPickle.c"
        var $155=((($154))|0) >> 8; //@line 2248 "cPickle.c"
        var $156=((($155)) & 255); //@line 2248 "cPickle.c"
        var $157=(($c_str+2)&4294967295); //@line 2248 "cPickle.c"
        HEAP[$157]=$156; //@line 2248 "cPickle.c"
        var $158=HEAP[$code]; //@line 2249 "cPickle.c"
        var $159=((($158))|0) >> 16; //@line 2249 "cPickle.c"
        var $160=((($159)) & 255); //@line 2249 "cPickle.c"
        var $161=(($c_str+3)&4294967295); //@line 2249 "cPickle.c"
        HEAP[$161]=$160; //@line 2249 "cPickle.c"
        var $162=HEAP[$code]; //@line 2250 "cPickle.c"
        var $163=((($162))|0) >> 24; //@line 2250 "cPickle.c"
        var $164=((($163)) & 255); //@line 2250 "cPickle.c"
        var $165=(($c_str+4)&4294967295); //@line 2250 "cPickle.c"
        HEAP[$165]=$164; //@line 2250 "cPickle.c"
        HEAP[$n]=5; //@line 2251 "cPickle.c"
        __label__ = 27; break; //@line 2251 "cPickle.c"
      case 27: // $bb26
        var $166=HEAP[$self_addr]; //@line 2254 "cPickle.c"
        var $167=(($166+48)&4294967295); //@line 2254 "cPickle.c"
        var $168=HEAP[$167]; //@line 2254 "cPickle.c"
        var $169=HEAP[$self_addr]; //@line 2254 "cPickle.c"
        var $c_str27=$c_str; //@line 2254 "cPickle.c"
        var $170=HEAP[$n]; //@line 2254 "cPickle.c"
        var $171=FUNCTION_TABLE[$168]($169, $c_str27, $170); //@line 2254 "cPickle.c"
        var $172=((($171))|0) >= 0; //@line 2254 "cPickle.c"
        if ($172) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 2254 "cPickle.c"
      case 28: // $bb28
        HEAP[$res]=0; //@line 2255 "cPickle.c"
        __label__ = 29; break; //@line 2255 "cPickle.c"
      case 29: // $bb29
        __label__ = 37; break; //@line 2255 "cPickle.c"
      case 30: // $gen_global
        var $173=HEAP[$self_addr]; //@line 2260 "cPickle.c"
        var $174=(($173+48)&4294967295); //@line 2260 "cPickle.c"
        var $175=HEAP[$174]; //@line 2260 "cPickle.c"
        var $176=HEAP[$self_addr]; //@line 2260 "cPickle.c"
        var $177=FUNCTION_TABLE[$175]($176, _global_10855, 1); //@line 2260 "cPickle.c"
        var $178=((($177))|0) < 0; //@line 2260 "cPickle.c"
        if ($178) { __label__ = 37; break; } else { __label__ = 31; break; } //@line 2260 "cPickle.c"
      case 31: // $bb30
        var $179=HEAP[$self_addr]; //@line 2263 "cPickle.c"
        var $180=(($179+48)&4294967295); //@line 2263 "cPickle.c"
        var $181=HEAP[$180]; //@line 2263 "cPickle.c"
        var $182=HEAP[$self_addr]; //@line 2263 "cPickle.c"
        var $183=HEAP[$module_str]; //@line 2263 "cPickle.c"
        var $184=HEAP[$module_size]; //@line 2263 "cPickle.c"
        var $185=FUNCTION_TABLE[$181]($182, $183, $184); //@line 2263 "cPickle.c"
        var $186=((($185))|0) < 0; //@line 2263 "cPickle.c"
        if ($186) { __label__ = 37; break; } else { __label__ = 32; break; } //@line 2263 "cPickle.c"
      case 32: // $bb31
        var $187=HEAP[$self_addr]; //@line 2266 "cPickle.c"
        var $188=(($187+48)&4294967295); //@line 2266 "cPickle.c"
        var $189=HEAP[$188]; //@line 2266 "cPickle.c"
        var $190=HEAP[$self_addr]; //@line 2266 "cPickle.c"
        var $191=FUNCTION_TABLE[$189]($190, ((__str12)&4294967295), 1); //@line 2266 "cPickle.c"
        var $192=((($191))|0) < 0; //@line 2266 "cPickle.c"
        if ($192) { __label__ = 37; break; } else { __label__ = 33; break; } //@line 2266 "cPickle.c"
      case 33: // $bb32
        var $193=HEAP[$self_addr]; //@line 2269 "cPickle.c"
        var $194=(($193+48)&4294967295); //@line 2269 "cPickle.c"
        var $195=HEAP[$194]; //@line 2269 "cPickle.c"
        var $196=HEAP[$self_addr]; //@line 2269 "cPickle.c"
        var $197=HEAP[$name_str]; //@line 2269 "cPickle.c"
        var $198=HEAP[$name_size]; //@line 2269 "cPickle.c"
        var $199=FUNCTION_TABLE[$195]($196, $197, $198); //@line 2269 "cPickle.c"
        var $200=((($199))|0) < 0; //@line 2269 "cPickle.c"
        if ($200) { __label__ = 37; break; } else { __label__ = 34; break; } //@line 2269 "cPickle.c"
      case 34: // $bb33
        var $201=HEAP[$self_addr]; //@line 2272 "cPickle.c"
        var $202=(($201+48)&4294967295); //@line 2272 "cPickle.c"
        var $203=HEAP[$202]; //@line 2272 "cPickle.c"
        var $204=HEAP[$self_addr]; //@line 2272 "cPickle.c"
        var $205=FUNCTION_TABLE[$203]($204, ((__str12)&4294967295), 1); //@line 2272 "cPickle.c"
        var $206=((($205))|0) < 0; //@line 2272 "cPickle.c"
        if ($206) { __label__ = 37; break; } else { __label__ = 35; break; } //@line 2272 "cPickle.c"
      case 35: // $bb34
        var $207=HEAP[$self_addr]; //@line 2275 "cPickle.c"
        var $208=HEAP[$args_addr]; //@line 2275 "cPickle.c"
        var $209=_put($207, $208); //@line 2275 "cPickle.c"
        var $210=((($209))|0) < 0; //@line 2275 "cPickle.c"
        if ($210) { __label__ = 37; break; } else { __label__ = 36; break; } //@line 2275 "cPickle.c"
      case 36: // $bb35
        HEAP[$res]=0; //@line 2278 "cPickle.c"
        __label__ = 37; break; //@line 2280 "cPickle.c"
      case 37: // $finally
        var $211=HEAP[$module]; //@line 2281 "cPickle.c"
        var $212=($211)!=0; //@line 2281 "cPickle.c"
        if ($212) { __label__ = 38; break; } else { __label__ = 40; break; } //@line 2281 "cPickle.c"
      case 38: // $bb36
        var $213=HEAP[$module]; //@line 2281 "cPickle.c"
        var $214=(($213)&4294967295); //@line 2281 "cPickle.c"
        var $215=HEAP[$214]; //@line 2281 "cPickle.c"
        var $216=((($215) - 1)&4294967295); //@line 2281 "cPickle.c"
        var $217=HEAP[$module]; //@line 2281 "cPickle.c"
        var $218=(($217)&4294967295); //@line 2281 "cPickle.c"
        HEAP[$218]=$216; //@line 2281 "cPickle.c"
        var $219=HEAP[$module]; //@line 2281 "cPickle.c"
        var $220=(($219)&4294967295); //@line 2281 "cPickle.c"
        var $221=HEAP[$220]; //@line 2281 "cPickle.c"
        var $222=((($221))|0)==0; //@line 2281 "cPickle.c"
        if ($222) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 2281 "cPickle.c"
      case 39: // $bb37
        var $223=HEAP[$module]; //@line 2281 "cPickle.c"
        var $224=(($223+4)&4294967295); //@line 2281 "cPickle.c"
        var $225=HEAP[$224]; //@line 2281 "cPickle.c"
        var $226=(($225+24)&4294967295); //@line 2281 "cPickle.c"
        var $227=HEAP[$226]; //@line 2281 "cPickle.c"
        var $228=HEAP[$module]; //@line 2281 "cPickle.c"
        FUNCTION_TABLE[$227]($228); //@line 2281 "cPickle.c"
        __label__ = 40; break; //@line 2281 "cPickle.c"
      case 40: // $bb38
        var $229=HEAP[$global_name]; //@line 2282 "cPickle.c"
        var $230=($229)!=0; //@line 2282 "cPickle.c"
        if ($230) { __label__ = 41; break; } else { __label__ = 43; break; } //@line 2282 "cPickle.c"
      case 41: // $bb39
        var $231=HEAP[$global_name]; //@line 2282 "cPickle.c"
        var $232=(($231)&4294967295); //@line 2282 "cPickle.c"
        var $233=HEAP[$232]; //@line 2282 "cPickle.c"
        var $234=((($233) - 1)&4294967295); //@line 2282 "cPickle.c"
        var $235=HEAP[$global_name]; //@line 2282 "cPickle.c"
        var $236=(($235)&4294967295); //@line 2282 "cPickle.c"
        HEAP[$236]=$234; //@line 2282 "cPickle.c"
        var $237=HEAP[$global_name]; //@line 2282 "cPickle.c"
        var $238=(($237)&4294967295); //@line 2282 "cPickle.c"
        var $239=HEAP[$238]; //@line 2282 "cPickle.c"
        var $240=((($239))|0)==0; //@line 2282 "cPickle.c"
        if ($240) { __label__ = 42; break; } else { __label__ = 43; break; } //@line 2282 "cPickle.c"
      case 42: // $bb40
        var $241=HEAP[$global_name]; //@line 2282 "cPickle.c"
        var $242=(($241+4)&4294967295); //@line 2282 "cPickle.c"
        var $243=HEAP[$242]; //@line 2282 "cPickle.c"
        var $244=(($243+24)&4294967295); //@line 2282 "cPickle.c"
        var $245=HEAP[$244]; //@line 2282 "cPickle.c"
        var $246=HEAP[$global_name]; //@line 2282 "cPickle.c"
        FUNCTION_TABLE[$245]($246); //@line 2282 "cPickle.c"
        __label__ = 43; break; //@line 2282 "cPickle.c"
      case 43: // $bb41
        var $247=HEAP[$mod]; //@line 2283 "cPickle.c"
        var $248=($247)!=0; //@line 2283 "cPickle.c"
        if ($248) { __label__ = 44; break; } else { __label__ = 46; break; } //@line 2283 "cPickle.c"
      case 44: // $bb42
        var $249=HEAP[$mod]; //@line 2283 "cPickle.c"
        var $250=(($249)&4294967295); //@line 2283 "cPickle.c"
        var $251=HEAP[$250]; //@line 2283 "cPickle.c"
        var $252=((($251) - 1)&4294967295); //@line 2283 "cPickle.c"
        var $253=HEAP[$mod]; //@line 2283 "cPickle.c"
        var $254=(($253)&4294967295); //@line 2283 "cPickle.c"
        HEAP[$254]=$252; //@line 2283 "cPickle.c"
        var $255=HEAP[$mod]; //@line 2283 "cPickle.c"
        var $256=(($255)&4294967295); //@line 2283 "cPickle.c"
        var $257=HEAP[$256]; //@line 2283 "cPickle.c"
        var $258=((($257))|0)==0; //@line 2283 "cPickle.c"
        if ($258) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 2283 "cPickle.c"
      case 45: // $bb43
        var $259=HEAP[$mod]; //@line 2283 "cPickle.c"
        var $260=(($259+4)&4294967295); //@line 2283 "cPickle.c"
        var $261=HEAP[$260]; //@line 2283 "cPickle.c"
        var $262=(($261+24)&4294967295); //@line 2283 "cPickle.c"
        var $263=HEAP[$262]; //@line 2283 "cPickle.c"
        var $264=HEAP[$mod]; //@line 2283 "cPickle.c"
        FUNCTION_TABLE[$263]($264); //@line 2283 "cPickle.c"
        __label__ = 46; break; //@line 2283 "cPickle.c"
      case 46: // $bb44
        var $265=HEAP[$res]; //@line 2285 "cPickle.c"
        HEAP[$0]=$265; //@line 2285 "cPickle.c"
        var $266=HEAP[$0]; //@line 2285 "cPickle.c"
        HEAP[$retval]=$266; //@line 2285 "cPickle.c"
        __label__ = 47; break; //@line 2285 "cPickle.c"
      case 47: // $return
        var $retval45=HEAP[$retval]; //@line 2285 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval45; //@line 2285 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_pers($self, $args, $f) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $f_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $pid=__stackBase__+20;
        var $size=__stackBase__+24;
        var $res=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$f_addr]=$f;
        HEAP[$pid]=0; //@line 2291 "cPickle.c"
        HEAP[$res]=-1; //@line 2292 "cPickle.c"
        var $1=HEAP[$args_addr]; //@line 2296 "cPickle.c"
        var $2=(($1)&4294967295); //@line 2296 "cPickle.c"
        var $3=HEAP[$2]; //@line 2296 "cPickle.c"
        var $4=((($3) + 1)&4294967295); //@line 2296 "cPickle.c"
        var $5=HEAP[$args_addr]; //@line 2296 "cPickle.c"
        var $6=(($5)&4294967295); //@line 2296 "cPickle.c"
        HEAP[$6]=$4; //@line 2296 "cPickle.c"
        var $7=HEAP[$self_addr]; //@line 2297 "cPickle.c"
        var $8=(($7+24)&4294967295); //@line 2297 "cPickle.c"
        var $9=HEAP[$8]; //@line 2297 "cPickle.c"
        var $10=($9)!=0; //@line 2297 "cPickle.c"
        if ($10) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 2297 "cPickle.c"
      case 1: // $bb
        var $11=_PyTuple_New(1); //@line 2297 "cPickle.c"
        var $12=HEAP[$self_addr]; //@line 2297 "cPickle.c"
        var $13=(($12+24)&4294967295); //@line 2297 "cPickle.c"
        HEAP[$13]=$11; //@line 2297 "cPickle.c"
        var $14=HEAP[$self_addr]; //@line 2297 "cPickle.c"
        var $15=(($14+24)&4294967295); //@line 2297 "cPickle.c"
        var $16=HEAP[$15]; //@line 2297 "cPickle.c"
        var $17=($16)!=0; //@line 2297 "cPickle.c"
        if ($17) { __label__ = 2; break; } else { __label__ = 6; break; } //@line 2297 "cPickle.c"
      case 2: // $bb1
        var $18=HEAP[$self_addr]; //@line 2297 "cPickle.c"
        var $19=(($18+24)&4294967295); //@line 2297 "cPickle.c"
        var $20=HEAP[$19]; //@line 2297 "cPickle.c"
        var $21=$20; //@line 2297 "cPickle.c"
        var $22=(($21+12)&4294967295); //@line 2297 "cPickle.c"
        var $23=(($22)&4294967295); //@line 2297 "cPickle.c"
        var $24=HEAP[$23]; //@line 2297 "cPickle.c"
        var $25=($24)!=0; //@line 2297 "cPickle.c"
        if ($25) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 2297 "cPickle.c"
      case 3: // $bb2
        var $26=HEAP[$self_addr]; //@line 2297 "cPickle.c"
        var $27=(($26+24)&4294967295); //@line 2297 "cPickle.c"
        var $28=HEAP[$27]; //@line 2297 "cPickle.c"
        var $29=$28; //@line 2297 "cPickle.c"
        var $30=(($29+12)&4294967295); //@line 2297 "cPickle.c"
        var $31=(($30)&4294967295); //@line 2297 "cPickle.c"
        var $32=HEAP[$31]; //@line 2297 "cPickle.c"
        var $33=(($32)&4294967295); //@line 2297 "cPickle.c"
        var $34=HEAP[$33]; //@line 2297 "cPickle.c"
        var $35=((($34) - 1)&4294967295); //@line 2297 "cPickle.c"
        var $36=(($32)&4294967295); //@line 2297 "cPickle.c"
        HEAP[$36]=$35; //@line 2297 "cPickle.c"
        var $37=(($32)&4294967295); //@line 2297 "cPickle.c"
        var $38=HEAP[$37]; //@line 2297 "cPickle.c"
        var $39=((($38))|0)==0; //@line 2297 "cPickle.c"
        if ($39) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 2297 "cPickle.c"
      case 4: // $bb3
        var $40=HEAP[$self_addr]; //@line 2297 "cPickle.c"
        var $41=(($40+24)&4294967295); //@line 2297 "cPickle.c"
        var $42=HEAP[$41]; //@line 2297 "cPickle.c"
        var $43=$42; //@line 2297 "cPickle.c"
        var $44=(($43+12)&4294967295); //@line 2297 "cPickle.c"
        var $45=(($44)&4294967295); //@line 2297 "cPickle.c"
        var $46=HEAP[$45]; //@line 2297 "cPickle.c"
        var $47=(($46+4)&4294967295); //@line 2297 "cPickle.c"
        var $48=HEAP[$47]; //@line 2297 "cPickle.c"
        var $49=(($48+24)&4294967295); //@line 2297 "cPickle.c"
        var $50=HEAP[$49]; //@line 2297 "cPickle.c"
        var $51=HEAP[$self_addr]; //@line 2297 "cPickle.c"
        var $52=(($51+24)&4294967295); //@line 2297 "cPickle.c"
        var $53=HEAP[$52]; //@line 2297 "cPickle.c"
        var $54=$53; //@line 2297 "cPickle.c"
        var $55=(($54+12)&4294967295); //@line 2297 "cPickle.c"
        var $56=(($55)&4294967295); //@line 2297 "cPickle.c"
        var $57=HEAP[$56]; //@line 2297 "cPickle.c"
        FUNCTION_TABLE[$50]($57); //@line 2297 "cPickle.c"
        __label__ = 5; break; //@line 2297 "cPickle.c"
      case 5: // $bb4
        var $58=HEAP[$self_addr]; //@line 2297 "cPickle.c"
        var $59=(($58+24)&4294967295); //@line 2297 "cPickle.c"
        var $60=HEAP[$59]; //@line 2297 "cPickle.c"
        var $61=$60; //@line 2297 "cPickle.c"
        var $62=(($61+12)&4294967295); //@line 2297 "cPickle.c"
        var $63=(($62)&4294967295); //@line 2297 "cPickle.c"
        var $64=HEAP[$args_addr]; //@line 2297 "cPickle.c"
        HEAP[$63]=$64; //@line 2297 "cPickle.c"
        __label__ = 8; break; //@line 2297 "cPickle.c"
      case 6: // $bb5
        var $65=HEAP[$args_addr]; //@line 2297 "cPickle.c"
        var $66=(($65)&4294967295); //@line 2297 "cPickle.c"
        var $67=HEAP[$66]; //@line 2297 "cPickle.c"
        var $68=((($67) - 1)&4294967295); //@line 2297 "cPickle.c"
        var $69=HEAP[$args_addr]; //@line 2297 "cPickle.c"
        var $70=(($69)&4294967295); //@line 2297 "cPickle.c"
        HEAP[$70]=$68; //@line 2297 "cPickle.c"
        var $71=HEAP[$args_addr]; //@line 2297 "cPickle.c"
        var $72=(($71)&4294967295); //@line 2297 "cPickle.c"
        var $73=HEAP[$72]; //@line 2297 "cPickle.c"
        var $74=((($73))|0)==0; //@line 2297 "cPickle.c"
        if ($74) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 2297 "cPickle.c"
      case 7: // $bb6
        var $75=HEAP[$args_addr]; //@line 2297 "cPickle.c"
        var $76=(($75+4)&4294967295); //@line 2297 "cPickle.c"
        var $77=HEAP[$76]; //@line 2297 "cPickle.c"
        var $78=(($77+24)&4294967295); //@line 2297 "cPickle.c"
        var $79=HEAP[$78]; //@line 2297 "cPickle.c"
        var $80=HEAP[$args_addr]; //@line 2297 "cPickle.c"
        FUNCTION_TABLE[$79]($80); //@line 2297 "cPickle.c"
        __label__ = 8; break; //@line 2297 "cPickle.c"
      case 8: // $bb7
        var $81=HEAP[$self_addr]; //@line 2298 "cPickle.c"
        var $82=(($81+24)&4294967295); //@line 2298 "cPickle.c"
        var $83=HEAP[$82]; //@line 2298 "cPickle.c"
        var $84=($83)!=0; //@line 2298 "cPickle.c"
        if ($84) { __label__ = 9; break; } else { __label__ = 13; break; } //@line 2298 "cPickle.c"
      case 9: // $bb8
        var $85=HEAP[$self_addr]; //@line 2299 "cPickle.c"
        var $86=(($85+24)&4294967295); //@line 2299 "cPickle.c"
        var $87=HEAP[$86]; //@line 2299 "cPickle.c"
        var $88=HEAP[$f_addr]; //@line 2299 "cPickle.c"
        var $89=_PyObject_Call($88, $87, 0); //@line 2299 "cPickle.c"
        HEAP[$pid]=$89; //@line 2299 "cPickle.c"
        var $90=HEAP[$self_addr]; //@line 2300 "cPickle.c"
        var $91=(($90+24)&4294967295); //@line 2300 "cPickle.c"
        var $92=HEAP[$91]; //@line 2300 "cPickle.c"
        var $93=(($92)&4294967295); //@line 2300 "cPickle.c"
        var $94=HEAP[$93]; //@line 2300 "cPickle.c"
        var $95=((($94))|0) > 1; //@line 2300 "cPickle.c"
        if ($95) { __label__ = 10; break; } else { __label__ = 13; break; } //@line 2300 "cPickle.c"
      case 10: // $bb9
        var $96=HEAP[$self_addr]; //@line 2300 "cPickle.c"
        var $97=(($96+24)&4294967295); //@line 2300 "cPickle.c"
        var $98=HEAP[$97]; //@line 2300 "cPickle.c"
        var $99=(($98)&4294967295); //@line 2300 "cPickle.c"
        var $100=HEAP[$99]; //@line 2300 "cPickle.c"
        var $101=((($100) - 1)&4294967295); //@line 2300 "cPickle.c"
        var $102=(($98)&4294967295); //@line 2300 "cPickle.c"
        HEAP[$102]=$101; //@line 2300 "cPickle.c"
        var $103=(($98)&4294967295); //@line 2300 "cPickle.c"
        var $104=HEAP[$103]; //@line 2300 "cPickle.c"
        var $105=((($104))|0)==0; //@line 2300 "cPickle.c"
        if ($105) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 2300 "cPickle.c"
      case 11: // $bb10
        var $106=HEAP[$self_addr]; //@line 2300 "cPickle.c"
        var $107=(($106+24)&4294967295); //@line 2300 "cPickle.c"
        var $108=HEAP[$107]; //@line 2300 "cPickle.c"
        var $109=(($108+4)&4294967295); //@line 2300 "cPickle.c"
        var $110=HEAP[$109]; //@line 2300 "cPickle.c"
        var $111=(($110+24)&4294967295); //@line 2300 "cPickle.c"
        var $112=HEAP[$111]; //@line 2300 "cPickle.c"
        var $113=HEAP[$self_addr]; //@line 2300 "cPickle.c"
        var $114=(($113+24)&4294967295); //@line 2300 "cPickle.c"
        var $115=HEAP[$114]; //@line 2300 "cPickle.c"
        FUNCTION_TABLE[$112]($115); //@line 2300 "cPickle.c"
        __label__ = 12; break; //@line 2300 "cPickle.c"
      case 12: // $bb11
        var $116=HEAP[$self_addr]; //@line 2300 "cPickle.c"
        var $117=(($116+24)&4294967295); //@line 2300 "cPickle.c"
        HEAP[$117]=0; //@line 2300 "cPickle.c"
        __label__ = 13; break; //@line 2300 "cPickle.c"
      case 13: // $bb12
        var $118=HEAP[$pid]; //@line 2302 "cPickle.c"
        var $119=($118)==0; //@line 2302 "cPickle.c"
        if ($119) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 2302 "cPickle.c"
      case 14: // $bb13
        HEAP[$0]=-1; //@line 2302 "cPickle.c"
        __label__ = 34; break; //@line 2302 "cPickle.c"
      case 15: // $bb14
        var $120=HEAP[$pid]; //@line 2304 "cPickle.c"
        var $121=($120)!=(__Py_NoneStruct); //@line 2304 "cPickle.c"
        if ($121) { __label__ = 16; break; } else { __label__ = 29; break; } //@line 2304 "cPickle.c"
      case 16: // $bb15
        var $122=HEAP[$self_addr]; //@line 2305 "cPickle.c"
        var $123=(($122+40)&4294967295); //@line 2305 "cPickle.c"
        var $124=HEAP[$123]; //@line 2305 "cPickle.c"
        var $125=((($124))|0)==0; //@line 2305 "cPickle.c"
        if ($125) { __label__ = 17; break; } else { __label__ = 24; break; } //@line 2305 "cPickle.c"
      case 17: // $bb16
        var $126=HEAP[$pid]; //@line 2306 "cPickle.c"
        var $127=(($126+4)&4294967295); //@line 2306 "cPickle.c"
        var $128=HEAP[$127]; //@line 2306 "cPickle.c"
        var $129=(($128+84)&4294967295); //@line 2306 "cPickle.c"
        var $130=HEAP[$129]; //@line 2306 "cPickle.c"
        var $131=($130) & 134217728; //@line 2306 "cPickle.c"
        var $132=((($131))|0)==0; //@line 2306 "cPickle.c"
        if ($132) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 2306 "cPickle.c"
      case 18: // $bb17
        var $133=HEAP[_PicklingError]; //@line 2307 "cPickle.c"
        _PyErr_SetString($133, ((__str34)&4294967295)); //@line 2307 "cPickle.c"
        __label__ = 30; break; //@line 2307 "cPickle.c"
      case 19: // $bb18
        var $134=HEAP[$self_addr]; //@line 2312 "cPickle.c"
        var $135=(($134+48)&4294967295); //@line 2312 "cPickle.c"
        var $136=HEAP[$135]; //@line 2312 "cPickle.c"
        var $137=HEAP[$self_addr]; //@line 2312 "cPickle.c"
        var $138=FUNCTION_TABLE[$136]($137, _persid_10999, 1); //@line 2312 "cPickle.c"
        var $139=((($138))|0) < 0; //@line 2312 "cPickle.c"
        if ($139) { __label__ = 30; break; } else { __label__ = 20; break; } //@line 2312 "cPickle.c"
      case 20: // $bb19
        var $140=HEAP[$pid]; //@line 2315 "cPickle.c"
        var $141=_PyString_Size($140); //@line 2315 "cPickle.c"
        HEAP[$size]=$141; //@line 2315 "cPickle.c"
        var $142=HEAP[$size]; //@line 2315 "cPickle.c"
        var $143=((($142))|0) < 0; //@line 2315 "cPickle.c"
        if ($143) { __label__ = 30; break; } else { __label__ = 21; break; } //@line 2315 "cPickle.c"
      case 21: // $bb20
        var $144=HEAP[$self_addr]; //@line 2318 "cPickle.c"
        var $145=(($144+48)&4294967295); //@line 2318 "cPickle.c"
        var $146=HEAP[$145]; //@line 2318 "cPickle.c"
        var $147=HEAP[$pid]; //@line 2318 "cPickle.c"
        var $148=$147; //@line 2318 "cPickle.c"
        var $149=(($148+20)&4294967295); //@line 2318 "cPickle.c"
        var $150=(($149)&4294967295); //@line 2318 "cPickle.c"
        var $151=HEAP[$self_addr]; //@line 2318 "cPickle.c"
        var $152=HEAP[$size]; //@line 2318 "cPickle.c"
        var $153=FUNCTION_TABLE[$146]($151, $150, $152); //@line 2318 "cPickle.c"
        var $154=((($153))|0) < 0; //@line 2318 "cPickle.c"
        if ($154) { __label__ = 30; break; } else { __label__ = 22; break; } //@line 2318 "cPickle.c"
      case 22: // $bb21
        var $155=HEAP[$self_addr]; //@line 2324 "cPickle.c"
        var $156=(($155+48)&4294967295); //@line 2324 "cPickle.c"
        var $157=HEAP[$156]; //@line 2324 "cPickle.c"
        var $158=HEAP[$self_addr]; //@line 2324 "cPickle.c"
        var $159=FUNCTION_TABLE[$157]($158, ((__str12)&4294967295), 1); //@line 2324 "cPickle.c"
        var $160=((($159))|0) < 0; //@line 2324 "cPickle.c"
        if ($160) { __label__ = 30; break; } else { __label__ = 23; break; } //@line 2324 "cPickle.c"
      case 23: // $bb22
        HEAP[$res]=1; //@line 2327 "cPickle.c"
        __label__ = 30; break; //@line 2327 "cPickle.c"
      case 24: // $bb23
        var $161=HEAP[$self_addr]; //@line 2330 "cPickle.c"
        var $162=HEAP[$pid]; //@line 2330 "cPickle.c"
        var $163=_save($161, $162, 1); //@line 2330 "cPickle.c"
        var $164=((($163))|0) >= 0; //@line 2330 "cPickle.c"
        if ($164) { __label__ = 25; break; } else { __label__ = 28; break; } //@line 2330 "cPickle.c"
      case 25: // $bb24
        var $165=HEAP[$self_addr]; //@line 2331 "cPickle.c"
        var $166=(($165+48)&4294967295); //@line 2331 "cPickle.c"
        var $167=HEAP[$166]; //@line 2331 "cPickle.c"
        var $168=HEAP[$self_addr]; //@line 2331 "cPickle.c"
        var $169=FUNCTION_TABLE[$167]($168, _binpersid_11000, 1); //@line 2331 "cPickle.c"
        var $170=((($169))|0) < 0; //@line 2331 "cPickle.c"
        if ($170) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 2331 "cPickle.c"
      case 26: // $bb25
        HEAP[$res]=-1; //@line 2332 "cPickle.c"
        __label__ = 28; break; //@line 2332 "cPickle.c"
      case 27: // $bb26
        HEAP[$res]=1; //@line 2334 "cPickle.c"
        __label__ = 28; break; //@line 2334 "cPickle.c"
      case 28: // $bb27
        __label__ = 30; break; //@line 2334 "cPickle.c"
      case 29: // $bb28
        HEAP[$res]=0; //@line 2340 "cPickle.c"
        __label__ = 30; break; //@line 2342 "cPickle.c"
      case 30: // $finally
        var $171=HEAP[$pid]; //@line 2343 "cPickle.c"
        var $172=($171)!=0; //@line 2343 "cPickle.c"
        if ($172) { __label__ = 31; break; } else { __label__ = 33; break; } //@line 2343 "cPickle.c"
      case 31: // $bb29
        var $173=HEAP[$pid]; //@line 2343 "cPickle.c"
        var $174=(($173)&4294967295); //@line 2343 "cPickle.c"
        var $175=HEAP[$174]; //@line 2343 "cPickle.c"
        var $176=((($175) - 1)&4294967295); //@line 2343 "cPickle.c"
        var $177=HEAP[$pid]; //@line 2343 "cPickle.c"
        var $178=(($177)&4294967295); //@line 2343 "cPickle.c"
        HEAP[$178]=$176; //@line 2343 "cPickle.c"
        var $179=HEAP[$pid]; //@line 2343 "cPickle.c"
        var $180=(($179)&4294967295); //@line 2343 "cPickle.c"
        var $181=HEAP[$180]; //@line 2343 "cPickle.c"
        var $182=((($181))|0)==0; //@line 2343 "cPickle.c"
        if ($182) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 2343 "cPickle.c"
      case 32: // $bb30
        var $183=HEAP[$pid]; //@line 2343 "cPickle.c"
        var $184=(($183+4)&4294967295); //@line 2343 "cPickle.c"
        var $185=HEAP[$184]; //@line 2343 "cPickle.c"
        var $186=(($185+24)&4294967295); //@line 2343 "cPickle.c"
        var $187=HEAP[$186]; //@line 2343 "cPickle.c"
        var $188=HEAP[$pid]; //@line 2343 "cPickle.c"
        FUNCTION_TABLE[$187]($188); //@line 2343 "cPickle.c"
        __label__ = 33; break; //@line 2343 "cPickle.c"
      case 33: // $bb31
        var $189=HEAP[$res]; //@line 2345 "cPickle.c"
        HEAP[$0]=$189; //@line 2345 "cPickle.c"
        __label__ = 34; break; //@line 2345 "cPickle.c"
      case 34: // $bb32
        var $190=HEAP[$0]; //@line 2302 "cPickle.c"
        HEAP[$retval]=$190; //@line 2302 "cPickle.c"
        __label__ = 35; break; //@line 2302 "cPickle.c"
      case 35: // $return
        var $retval33=HEAP[$retval]; //@line 2302 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval33; //@line 2302 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save_reduce($self, $args, $fn, $ob) {
    var __stackBase__  = STACKTOP; STACKTOP += 84; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 84);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $fn_addr=__stackBase__+8;
        var $ob_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $iftmp_170=__stackBase__+20;
        var $0=__stackBase__+24;
        var $callable=__stackBase__+28;
        var $argtup=__stackBase__+32;
        var $state=__stackBase__+36;
        var $listitems=__stackBase__+40;
        var $dictitems=__stackBase__+44;
        var $size=__stackBase__+48;
        var $use_newobj=__stackBase__+52;
        var $temp=__stackBase__+56;
        var $cls=__stackBase__+60;
        var $newargtup=__stackBase__+64;
        var $n=__stackBase__+68;
        var $i=__stackBase__+72;
        var $ob_dot_class=__stackBase__+76;
        var $temp52=__stackBase__+80;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$fn_addr]=$fn;
        HEAP[$ob_addr]=$ob;
        HEAP[$state]=0; //@line 2356 "cPickle.c"
        HEAP[$listitems]=__Py_NoneStruct; //@line 2357 "cPickle.c"
        HEAP[$dictitems]=__Py_NoneStruct; //@line 2358 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 2361 "cPickle.c"
        var $2=(($1+36)&4294967295); //@line 2361 "cPickle.c"
        var $3=HEAP[$2]; //@line 2361 "cPickle.c"
        var $4=((($3))|0) > 1; //@line 2361 "cPickle.c"
        var $5=unSign(($4), 1, 0); //@line 2361 "cPickle.c"
        HEAP[$use_newobj]=$5; //@line 2361 "cPickle.c"
        var $6=HEAP[$args_addr]; //@line 2367 "cPickle.c"
        var $7=_PyTuple_Size($6); //@line 2367 "cPickle.c"
        HEAP[$size]=$7; //@line 2367 "cPickle.c"
        var $8=HEAP[$size]; //@line 2368 "cPickle.c"
        var $9=((($8))|0) <= 1; //@line 2368 "cPickle.c"
        if ($9) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 2368 "cPickle.c"
      case 1: // $bb
        var $10=HEAP[$size]; //@line 2368 "cPickle.c"
        var $11=((($10))|0) > 5; //@line 2368 "cPickle.c"
        if ($11) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2368 "cPickle.c"
      case 2: // $bb1
        var $12=HEAP[_PicklingError]; //@line 2369 "cPickle.c"
        var $13=HEAP[$fn_addr]; //@line 2369 "cPickle.c"
        var $14=_cPickle_ErrFormat($12, ((__str35)&4294967295), ((__str36)&4294967295), allocate([$13,0,0,0], ["%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 2369 "cPickle.c"
        HEAP[$0]=-1; //@line 2372 "cPickle.c"
        __label__ = 84; break; //@line 2372 "cPickle.c"
      case 3: // $bb2
        var $15=HEAP[$args_addr]; //@line 2375 "cPickle.c"
        var $16=_PyArg_UnpackTuple($15, ((__str37)&4294967295), 2, 5, $callable, $argtup, $state, $listitems, $dictitems); //@line 2375 "cPickle.c"
        var $17=((($16))|0)==0; //@line 2375 "cPickle.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 2375 "cPickle.c"
      case 4: // $bb3
        HEAP[$0]=-1; //@line 2381 "cPickle.c"
        __label__ = 84; break; //@line 2381 "cPickle.c"
      case 5: // $bb4
        var $18=HEAP[$argtup]; //@line 2383 "cPickle.c"
        var $19=(($18+4)&4294967295); //@line 2383 "cPickle.c"
        var $20=HEAP[$19]; //@line 2383 "cPickle.c"
        var $21=(($20+84)&4294967295); //@line 2383 "cPickle.c"
        var $22=HEAP[$21]; //@line 2383 "cPickle.c"
        var $23=($22) & 67108864; //@line 2383 "cPickle.c"
        var $24=((($23))|0)==0; //@line 2383 "cPickle.c"
        if ($24) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 2383 "cPickle.c"
      case 6: // $bb5
        var $25=HEAP[_PicklingError]; //@line 2384 "cPickle.c"
        var $26=HEAP[$fn_addr]; //@line 2384 "cPickle.c"
        var $27=_cPickle_ErrFormat($25, ((__str38)&4294967295), ((__str36)&4294967295), allocate([$26,0,0,0], ["%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 2384 "cPickle.c"
        HEAP[$0]=-1; //@line 2387 "cPickle.c"
        __label__ = 84; break; //@line 2387 "cPickle.c"
      case 7: // $bb6
        var $28=HEAP[$state]; //@line 2390 "cPickle.c"
        var $29=($28)==(__Py_NoneStruct); //@line 2390 "cPickle.c"
        if ($29) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 2390 "cPickle.c"
      case 8: // $bb7
        HEAP[$state]=0; //@line 2391 "cPickle.c"
        __label__ = 9; break; //@line 2391 "cPickle.c"
      case 9: // $bb8
        var $30=HEAP[$listitems]; //@line 2393 "cPickle.c"
        var $31=($30)==(__Py_NoneStruct); //@line 2393 "cPickle.c"
        if ($31) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 2393 "cPickle.c"
      case 10: // $bb9
        HEAP[$listitems]=0; //@line 2394 "cPickle.c"
        __label__ = 15; break; //@line 2394 "cPickle.c"
      case 11: // $bb10
        var $32=HEAP[$listitems]; //@line 2395 "cPickle.c"
        var $33=(($32+4)&4294967295); //@line 2395 "cPickle.c"
        var $34=HEAP[$33]; //@line 2395 "cPickle.c"
        var $35=(($34+84)&4294967295); //@line 2395 "cPickle.c"
        var $36=HEAP[$35]; //@line 2395 "cPickle.c"
        var $37=($36) & 128; //@line 2395 "cPickle.c"
        var $38=((($37))|0)==0; //@line 2395 "cPickle.c"
        if ($38) { __label__ = 14; break; } else { __label__ = 12; break; } //@line 2395 "cPickle.c"
      case 12: // $bb11
        var $39=HEAP[$listitems]; //@line 2395 "cPickle.c"
        var $40=(($39+4)&4294967295); //@line 2395 "cPickle.c"
        var $41=HEAP[$40]; //@line 2395 "cPickle.c"
        var $42=(($41+112)&4294967295); //@line 2395 "cPickle.c"
        var $43=HEAP[$42]; //@line 2395 "cPickle.c"
        var $44=($43)==0; //@line 2395 "cPickle.c"
        if ($44) { __label__ = 14; break; } else { __label__ = 13; break; } //@line 2395 "cPickle.c"
      case 13: // $bb12
        var $45=HEAP[$listitems]; //@line 2395 "cPickle.c"
        var $46=(($45+4)&4294967295); //@line 2395 "cPickle.c"
        var $47=HEAP[$46]; //@line 2395 "cPickle.c"
        var $48=(($47+112)&4294967295); //@line 2395 "cPickle.c"
        var $49=HEAP[$48]; //@line 2395 "cPickle.c"
        var $50=($49)==((FUNCTION_TABLE_OFFSET + 2)); //@line 2395 "cPickle.c"
        if ($50) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 2395 "cPickle.c"
      case 14: // $bb13
        var $51=HEAP[$listitems]; //@line 2396 "cPickle.c"
        var $52=(($51+4)&4294967295); //@line 2396 "cPickle.c"
        var $53=HEAP[$52]; //@line 2396 "cPickle.c"
        var $54=(($53+12)&4294967295); //@line 2396 "cPickle.c"
        var $55=HEAP[$54]; //@line 2396 "cPickle.c"
        var $56=HEAP[_PicklingError]; //@line 2396 "cPickle.c"
        var $57=HEAP[$fn_addr]; //@line 2396 "cPickle.c"
        var $58=_cPickle_ErrFormat($56, ((__str39)&4294967295), ((__str40)&4294967295), allocate([$57,0,0,0,$55,0,0,0], ["%struct.PyObject*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 2396 "cPickle.c"
        HEAP[$0]=-1; //@line 2399 "cPickle.c"
        __label__ = 84; break; //@line 2399 "cPickle.c"
      case 15: // $bb14
        var $59=HEAP[$dictitems]; //@line 2402 "cPickle.c"
        var $60=($59)==(__Py_NoneStruct); //@line 2402 "cPickle.c"
        if ($60) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 2402 "cPickle.c"
      case 16: // $bb15
        HEAP[$dictitems]=0; //@line 2403 "cPickle.c"
        __label__ = 21; break; //@line 2403 "cPickle.c"
      case 17: // $bb16
        var $61=HEAP[$dictitems]; //@line 2404 "cPickle.c"
        var $62=(($61+4)&4294967295); //@line 2404 "cPickle.c"
        var $63=HEAP[$62]; //@line 2404 "cPickle.c"
        var $64=(($63+84)&4294967295); //@line 2404 "cPickle.c"
        var $65=HEAP[$64]; //@line 2404 "cPickle.c"
        var $66=($65) & 128; //@line 2404 "cPickle.c"
        var $67=((($66))|0)==0; //@line 2404 "cPickle.c"
        if ($67) { __label__ = 20; break; } else { __label__ = 18; break; } //@line 2404 "cPickle.c"
      case 18: // $bb17
        var $68=HEAP[$dictitems]; //@line 2404 "cPickle.c"
        var $69=(($68+4)&4294967295); //@line 2404 "cPickle.c"
        var $70=HEAP[$69]; //@line 2404 "cPickle.c"
        var $71=(($70+112)&4294967295); //@line 2404 "cPickle.c"
        var $72=HEAP[$71]; //@line 2404 "cPickle.c"
        var $73=($72)==0; //@line 2404 "cPickle.c"
        if ($73) { __label__ = 20; break; } else { __label__ = 19; break; } //@line 2404 "cPickle.c"
      case 19: // $bb18
        var $74=HEAP[$dictitems]; //@line 2404 "cPickle.c"
        var $75=(($74+4)&4294967295); //@line 2404 "cPickle.c"
        var $76=HEAP[$75]; //@line 2404 "cPickle.c"
        var $77=(($76+112)&4294967295); //@line 2404 "cPickle.c"
        var $78=HEAP[$77]; //@line 2404 "cPickle.c"
        var $79=($78)==((FUNCTION_TABLE_OFFSET + 2)); //@line 2404 "cPickle.c"
        if ($79) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 2404 "cPickle.c"
      case 20: // $bb19
        var $80=HEAP[$dictitems]; //@line 2405 "cPickle.c"
        var $81=(($80+4)&4294967295); //@line 2405 "cPickle.c"
        var $82=HEAP[$81]; //@line 2405 "cPickle.c"
        var $83=(($82+12)&4294967295); //@line 2405 "cPickle.c"
        var $84=HEAP[$83]; //@line 2405 "cPickle.c"
        var $85=HEAP[_PicklingError]; //@line 2405 "cPickle.c"
        var $86=HEAP[$fn_addr]; //@line 2405 "cPickle.c"
        var $87=_cPickle_ErrFormat($85, ((__str41)&4294967295), ((__str40)&4294967295), allocate([$86,0,0,0,$84,0,0,0], ["%struct.PyObject*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 2405 "cPickle.c"
        HEAP[$0]=-1; //@line 2408 "cPickle.c"
        __label__ = 84; break; //@line 2408 "cPickle.c"
      case 21: // $bb20
        var $88=HEAP[$use_newobj]; //@line 2414 "cPickle.c"
        var $89=((($88))|0)!=0; //@line 2414 "cPickle.c"
        if ($89) { __label__ = 22; break; } else { __label__ = 32; break; } //@line 2414 "cPickle.c"
      case 22: // $bb21
        var $90=HEAP[___name___str]; //@line 2415 "cPickle.c"
        var $91=HEAP[$callable]; //@line 2415 "cPickle.c"
        var $92=_PyObject_GetAttr($91, $90); //@line 2415 "cPickle.c"
        HEAP[$temp]=$92; //@line 2415 "cPickle.c"
        var $93=HEAP[$temp]; //@line 2417 "cPickle.c"
        var $94=($93)==0; //@line 2417 "cPickle.c"
        if ($94) { __label__ = 23; break; } else { __label__ = 26; break; } //@line 2417 "cPickle.c"
      case 23: // $bb22
        var $95=HEAP[_PyExc_AttributeError]; //@line 2418 "cPickle.c"
        var $96=_PyErr_ExceptionMatches($95); //@line 2418 "cPickle.c"
        var $97=((($96))|0)!=0; //@line 2418 "cPickle.c"
        if ($97) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 2418 "cPickle.c"
      case 24: // $bb23
        _PyErr_Clear(); //@line 2419 "cPickle.c"
        HEAP[$use_newobj]=0; //@line 2422 "cPickle.c"
        __label__ = 32; break; //@line 2422 "cPickle.c"
      case 25: // $bb24
        HEAP[$0]=-1; //@line 2421 "cPickle.c"
        __label__ = 84; break; //@line 2421 "cPickle.c"
      case 26: // $bb25
        var $98=HEAP[$temp]; //@line 2425 "cPickle.c"
        var $99=(($98+4)&4294967295); //@line 2425 "cPickle.c"
        var $100=HEAP[$99]; //@line 2425 "cPickle.c"
        var $101=(($100+84)&4294967295); //@line 2425 "cPickle.c"
        var $102=HEAP[$101]; //@line 2425 "cPickle.c"
        var $103=($102) & 134217728; //@line 2425 "cPickle.c"
        var $104=((($103))|0)==0; //@line 2425 "cPickle.c"
        if ($104) { __label__ = 29; break; } else { __label__ = 27; break; } //@line 2425 "cPickle.c"
      case 27: // $bb26
        var $105=HEAP[$temp]; //@line 2425 "cPickle.c"
        var $106=$105; //@line 2425 "cPickle.c"
        var $107=(($106+20)&4294967295); //@line 2425 "cPickle.c"
        var $108=(($107)&4294967295); //@line 2425 "cPickle.c"
        var $109=_strcmp($108, ((__str42)&4294967295)); //@line 2425 "cPickle.c"
        var $110=((($109))|0)!=0; //@line 2425 "cPickle.c"
        if ($110) { __label__ = 29; break; } else { __label__ = 28; break; } //@line 2425 "cPickle.c"
      case 28: // $bb27
        HEAP[$iftmp_170]=1; //@line 2425 "cPickle.c"
        __label__ = 30; break; //@line 2425 "cPickle.c"
      case 29: // $bb28
        HEAP[$iftmp_170]=0; //@line 2425 "cPickle.c"
        __label__ = 30; break; //@line 2425 "cPickle.c"
      case 30: // $bb29
        var $111=HEAP[$iftmp_170]; //@line 2425 "cPickle.c"
        HEAP[$use_newobj]=$111; //@line 2425 "cPickle.c"
        var $112=HEAP[$temp]; //@line 2428 "cPickle.c"
        var $113=(($112)&4294967295); //@line 2428 "cPickle.c"
        var $114=HEAP[$113]; //@line 2428 "cPickle.c"
        var $115=((($114) - 1)&4294967295); //@line 2428 "cPickle.c"
        var $116=HEAP[$temp]; //@line 2428 "cPickle.c"
        var $117=(($116)&4294967295); //@line 2428 "cPickle.c"
        HEAP[$117]=$115; //@line 2428 "cPickle.c"
        var $118=HEAP[$temp]; //@line 2428 "cPickle.c"
        var $119=(($118)&4294967295); //@line 2428 "cPickle.c"
        var $120=HEAP[$119]; //@line 2428 "cPickle.c"
        var $121=((($120))|0)==0; //@line 2428 "cPickle.c"
        if ($121) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 2428 "cPickle.c"
      case 31: // $bb30
        var $122=HEAP[$temp]; //@line 2428 "cPickle.c"
        var $123=(($122+4)&4294967295); //@line 2428 "cPickle.c"
        var $124=HEAP[$123]; //@line 2428 "cPickle.c"
        var $125=(($124+24)&4294967295); //@line 2428 "cPickle.c"
        var $126=HEAP[$125]; //@line 2428 "cPickle.c"
        var $127=HEAP[$temp]; //@line 2428 "cPickle.c"
        FUNCTION_TABLE[$126]($127); //@line 2428 "cPickle.c"
        __label__ = 32; break; //@line 2428 "cPickle.c"
      case 32: // $bb31
        var $128=HEAP[$use_newobj]; //@line 2431 "cPickle.c"
        var $129=((($128))|0)!=0; //@line 2431 "cPickle.c"
        if ($129) { __label__ = 33; break; } else { __label__ = 61; break; } //@line 2431 "cPickle.c"
      case 33: // $bb32
        var $130=HEAP[$argtup]; //@line 2437 "cPickle.c"
        var $131=_PyTuple_Size($130); //@line 2437 "cPickle.c"
        HEAP[$n]=$131; //@line 2437 "cPickle.c"
        var $132=HEAP[$n]; //@line 2438 "cPickle.c"
        var $133=((($132))|0) <= 0; //@line 2438 "cPickle.c"
        if ($133) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 2438 "cPickle.c"
      case 34: // $bb33
        var $134=HEAP[_PicklingError]; //@line 2439 "cPickle.c"
        _PyErr_SetString($134, ((__str43)&4294967295)); //@line 2439 "cPickle.c"
        HEAP[$0]=-1; //@line 2441 "cPickle.c"
        __label__ = 84; break; //@line 2441 "cPickle.c"
      case 35: // $bb34
        var $135=HEAP[$argtup]; //@line 2444 "cPickle.c"
        var $136=$135; //@line 2444 "cPickle.c"
        var $137=(($136+12)&4294967295); //@line 2444 "cPickle.c"
        var $138=(($137)&4294967295); //@line 2444 "cPickle.c"
        var $139=HEAP[$138]; //@line 2444 "cPickle.c"
        HEAP[$cls]=$139; //@line 2444 "cPickle.c"
        var $140=HEAP[$cls]; //@line 2445 "cPickle.c"
        var $141=_PyObject_HasAttrString($140, ((__str44)&4294967295)); //@line 2445 "cPickle.c"
        var $142=((($141))|0)==0; //@line 2445 "cPickle.c"
        if ($142) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 2445 "cPickle.c"
      case 36: // $bb35
        var $143=HEAP[_PicklingError]; //@line 2446 "cPickle.c"
        _PyErr_SetString($143, ((__str45)&4294967295)); //@line 2446 "cPickle.c"
        HEAP[$0]=-1; //@line 2448 "cPickle.c"
        __label__ = 84; break; //@line 2448 "cPickle.c"
      case 37: // $bb36
        var $144=HEAP[$ob_addr]; //@line 2452 "cPickle.c"
        var $145=($144)!=0; //@line 2452 "cPickle.c"
        if ($145) { __label__ = 38; break; } else { __label__ = 47; break; } //@line 2452 "cPickle.c"
      case 38: // $bb37
        var $146=HEAP[___class___str]; //@line 2455 "cPickle.c"
        var $147=HEAP[$ob_addr]; //@line 2455 "cPickle.c"
        var $148=_PyObject_GetAttr($147, $146); //@line 2455 "cPickle.c"
        HEAP[$ob_dot_class]=$148; //@line 2455 "cPickle.c"
        var $149=HEAP[$ob_dot_class]; //@line 2456 "cPickle.c"
        var $150=($149)==0; //@line 2456 "cPickle.c"
        if ($150) { __label__ = 39; break; } else { __label__ = 42; break; } //@line 2456 "cPickle.c"
      case 39: // $bb38
        var $151=HEAP[_PyExc_AttributeError]; //@line 2457 "cPickle.c"
        var $152=_PyErr_ExceptionMatches($151); //@line 2457 "cPickle.c"
        var $153=((($152))|0)!=0; //@line 2457 "cPickle.c"
        if ($153) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 2457 "cPickle.c"
      case 40: // $bb39
        _PyErr_Clear(); //@line 2459 "cPickle.c"
        __label__ = 42; break; //@line 2459 "cPickle.c"
      case 41: // $bb40
        HEAP[$0]=-1; //@line 2461 "cPickle.c"
        __label__ = 84; break; //@line 2461 "cPickle.c"
      case 42: // $bb41
        var $154=HEAP[$ob_dot_class]; //@line 2463 "cPickle.c"
        var $155=HEAP[$cls]; //@line 2463 "cPickle.c"
        var $156=($154)!=($155); //@line 2463 "cPickle.c"
        var $157=unSign(($156), 1, 0); //@line 2463 "cPickle.c"
        HEAP[$i]=$157; //@line 2463 "cPickle.c"
        var $158=HEAP[$ob_dot_class]; //@line 2464 "cPickle.c"
        var $159=($158)!=0; //@line 2464 "cPickle.c"
        if ($159) { __label__ = 43; break; } else { __label__ = 45; break; } //@line 2464 "cPickle.c"
      case 43: // $bb42
        var $160=HEAP[$ob_dot_class]; //@line 2464 "cPickle.c"
        var $161=(($160)&4294967295); //@line 2464 "cPickle.c"
        var $162=HEAP[$161]; //@line 2464 "cPickle.c"
        var $163=((($162) - 1)&4294967295); //@line 2464 "cPickle.c"
        var $164=HEAP[$ob_dot_class]; //@line 2464 "cPickle.c"
        var $165=(($164)&4294967295); //@line 2464 "cPickle.c"
        HEAP[$165]=$163; //@line 2464 "cPickle.c"
        var $166=HEAP[$ob_dot_class]; //@line 2464 "cPickle.c"
        var $167=(($166)&4294967295); //@line 2464 "cPickle.c"
        var $168=HEAP[$167]; //@line 2464 "cPickle.c"
        var $169=((($168))|0)==0; //@line 2464 "cPickle.c"
        if ($169) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 2464 "cPickle.c"
      case 44: // $bb43
        var $170=HEAP[$ob_dot_class]; //@line 2464 "cPickle.c"
        var $171=(($170+4)&4294967295); //@line 2464 "cPickle.c"
        var $172=HEAP[$171]; //@line 2464 "cPickle.c"
        var $173=(($172+24)&4294967295); //@line 2464 "cPickle.c"
        var $174=HEAP[$173]; //@line 2464 "cPickle.c"
        var $175=HEAP[$ob_dot_class]; //@line 2464 "cPickle.c"
        FUNCTION_TABLE[$174]($175); //@line 2464 "cPickle.c"
        __label__ = 45; break; //@line 2464 "cPickle.c"
      case 45: // $bb44
        var $176=HEAP[$i]; //@line 2465 "cPickle.c"
        var $177=((($176))|0)!=0; //@line 2465 "cPickle.c"
        if ($177) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 2465 "cPickle.c"
      case 46: // $bb45
        var $178=HEAP[_PicklingError]; //@line 2466 "cPickle.c"
        _PyErr_SetString($178, ((__str46)&4294967295)); //@line 2466 "cPickle.c"
        HEAP[$0]=-1; //@line 2468 "cPickle.c"
        __label__ = 84; break; //@line 2468 "cPickle.c"
      case 47: // $bb46
        var $179=HEAP[$self_addr]; //@line 2473 "cPickle.c"
        var $180=HEAP[$cls]; //@line 2473 "cPickle.c"
        var $181=_save($179, $180, 0); //@line 2473 "cPickle.c"
        var $182=((($181))|0) < 0; //@line 2473 "cPickle.c"
        if ($182) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 2473 "cPickle.c"
      case 48: // $bb47
        HEAP[$0]=-1; //@line 2474 "cPickle.c"
        __label__ = 84; break; //@line 2474 "cPickle.c"
      case 49: // $bb48
        var $183=HEAP[$n]; //@line 2476 "cPickle.c"
        var $184=((($183) - 1)&4294967295); //@line 2476 "cPickle.c"
        var $185=_PyTuple_New($184); //@line 2476 "cPickle.c"
        HEAP[$newargtup]=$185; //@line 2476 "cPickle.c"
        var $186=HEAP[$newargtup]; //@line 2477 "cPickle.c"
        var $187=($186)==0; //@line 2477 "cPickle.c"
        if ($187) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 2477 "cPickle.c"
      case 50: // $bb49
        HEAP[$0]=-1; //@line 2478 "cPickle.c"
        __label__ = 84; break; //@line 2478 "cPickle.c"
      case 51: // $bb50
        HEAP[$i]=1; //@line 2479 "cPickle.c"
        __label__ = 53; break; //@line 2479 "cPickle.c"
      case 52: // $bb51
        var $188=HEAP[$argtup]; //@line 2480 "cPickle.c"
        var $189=$188; //@line 2480 "cPickle.c"
        var $190=HEAP[$i]; //@line 2480 "cPickle.c"
        var $191=(($189+12)&4294967295); //@line 2480 "cPickle.c"
        var $192=(($191+$190*4)&4294967295); //@line 2480 "cPickle.c"
        var $193=HEAP[$192]; //@line 2480 "cPickle.c"
        HEAP[$temp52]=$193; //@line 2480 "cPickle.c"
        var $194=HEAP[$temp52]; //@line 2481 "cPickle.c"
        var $195=(($194)&4294967295); //@line 2481 "cPickle.c"
        var $196=HEAP[$195]; //@line 2481 "cPickle.c"
        var $197=((($196) + 1)&4294967295); //@line 2481 "cPickle.c"
        var $198=HEAP[$temp52]; //@line 2481 "cPickle.c"
        var $199=(($198)&4294967295); //@line 2481 "cPickle.c"
        HEAP[$199]=$197; //@line 2481 "cPickle.c"
        var $200=HEAP[$newargtup]; //@line 2482 "cPickle.c"
        var $201=$200; //@line 2482 "cPickle.c"
        var $202=HEAP[$i]; //@line 2482 "cPickle.c"
        var $203=((($202) - 1)&4294967295); //@line 2482 "cPickle.c"
        var $204=(($201+12)&4294967295); //@line 2482 "cPickle.c"
        var $205=(($204+$203*4)&4294967295); //@line 2482 "cPickle.c"
        var $206=HEAP[$temp52]; //@line 2482 "cPickle.c"
        HEAP[$205]=$206; //@line 2482 "cPickle.c"
        var $207=HEAP[$i]; //@line 2479 "cPickle.c"
        var $208=((($207) + 1)&4294967295); //@line 2479 "cPickle.c"
        HEAP[$i]=$208; //@line 2479 "cPickle.c"
        __label__ = 53; break; //@line 2479 "cPickle.c"
      case 53: // $bb53
        var $209=HEAP[$i]; //@line 2479 "cPickle.c"
        var $210=HEAP[$n]; //@line 2479 "cPickle.c"
        var $211=((($209))|0) < ((($210))|0); //@line 2479 "cPickle.c"
        if ($211) { __label__ = 52; break; } else { __label__ = 54; break; } //@line 2479 "cPickle.c"
      case 54: // $bb54
        var $212=HEAP[$self_addr]; //@line 2484 "cPickle.c"
        var $213=HEAP[$newargtup]; //@line 2484 "cPickle.c"
        var $214=_save($212, $213, 0); //@line 2484 "cPickle.c"
        HEAP[$i]=$214; //@line 2484 "cPickle.c"
        var $215=HEAP[$newargtup]; //@line 2485 "cPickle.c"
        var $216=(($215)&4294967295); //@line 2485 "cPickle.c"
        var $217=HEAP[$216]; //@line 2485 "cPickle.c"
        var $218=((($217) - 1)&4294967295); //@line 2485 "cPickle.c"
        var $219=HEAP[$newargtup]; //@line 2485 "cPickle.c"
        var $220=(($219)&4294967295); //@line 2485 "cPickle.c"
        HEAP[$220]=$218; //@line 2485 "cPickle.c"
        var $221=HEAP[$newargtup]; //@line 2485 "cPickle.c"
        var $222=(($221)&4294967295); //@line 2485 "cPickle.c"
        var $223=HEAP[$222]; //@line 2485 "cPickle.c"
        var $224=((($223))|0)==0; //@line 2485 "cPickle.c"
        if ($224) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 2485 "cPickle.c"
      case 55: // $bb55
        var $225=HEAP[$newargtup]; //@line 2485 "cPickle.c"
        var $226=(($225+4)&4294967295); //@line 2485 "cPickle.c"
        var $227=HEAP[$226]; //@line 2485 "cPickle.c"
        var $228=(($227+24)&4294967295); //@line 2485 "cPickle.c"
        var $229=HEAP[$228]; //@line 2485 "cPickle.c"
        var $230=HEAP[$newargtup]; //@line 2485 "cPickle.c"
        FUNCTION_TABLE[$229]($230); //@line 2485 "cPickle.c"
        __label__ = 56; break; //@line 2485 "cPickle.c"
      case 56: // $bb56
        var $231=HEAP[$i]; //@line 2486 "cPickle.c"
        var $232=((($231))|0) < 0; //@line 2486 "cPickle.c"
        if ($232) { __label__ = 57; break; } else { __label__ = 58; break; } //@line 2486 "cPickle.c"
      case 57: // $bb57
        HEAP[$0]=-1; //@line 2487 "cPickle.c"
        __label__ = 84; break; //@line 2487 "cPickle.c"
      case 58: // $bb58
        var $233=HEAP[$self_addr]; //@line 2490 "cPickle.c"
        var $234=(($233+48)&4294967295); //@line 2490 "cPickle.c"
        var $235=HEAP[$234]; //@line 2490 "cPickle.c"
        var $236=HEAP[$self_addr]; //@line 2490 "cPickle.c"
        var $237=FUNCTION_TABLE[$235]($236, _newobj_11120, 1); //@line 2490 "cPickle.c"
        var $238=((($237))|0) < 0; //@line 2490 "cPickle.c"
        if ($238) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 2490 "cPickle.c"
      case 59: // $bb59
        HEAP[$0]=-1; //@line 2491 "cPickle.c"
        __label__ = 84; break; //@line 2491 "cPickle.c"
      case 60: // $bb60
        __label__ = 65; break; //@line 2491 "cPickle.c"
      case 61: // $bb61
        var $239=HEAP[$callable]; //@line 2495 "cPickle.c"
        var $240=HEAP[$self_addr]; //@line 2495 "cPickle.c"
        var $241=_save($240, $239, 0); //@line 2495 "cPickle.c"
        var $242=((($241))|0) < 0; //@line 2495 "cPickle.c"
        if ($242) { __label__ = 64; break; } else { __label__ = 62; break; } //@line 2495 "cPickle.c"
      case 62: // $bb62
        var $243=HEAP[$argtup]; //@line 2495 "cPickle.c"
        var $244=HEAP[$self_addr]; //@line 2495 "cPickle.c"
        var $245=_save($244, $243, 0); //@line 2495 "cPickle.c"
        var $246=((($245))|0) < 0; //@line 2495 "cPickle.c"
        if ($246) { __label__ = 64; break; } else { __label__ = 63; break; } //@line 2495 "cPickle.c"
      case 63: // $bb63
        var $247=HEAP[$self_addr]; //@line 2495 "cPickle.c"
        var $248=(($247+48)&4294967295); //@line 2495 "cPickle.c"
        var $249=HEAP[$248]; //@line 2495 "cPickle.c"
        var $250=HEAP[$self_addr]; //@line 2495 "cPickle.c"
        var $251=FUNCTION_TABLE[$249]($250, _reduce_11118, 1); //@line 2495 "cPickle.c"
        var $252=((($251))|0) < 0; //@line 2495 "cPickle.c"
        if ($252) { __label__ = 64; break; } else { __label__ = 65; break; } //@line 2495 "cPickle.c"
      case 64: // $bb64
        HEAP[$0]=-1; //@line 2498 "cPickle.c"
        __label__ = 84; break; //@line 2498 "cPickle.c"
      case 65: // $bb65
        var $253=HEAP[$ob_addr]; //@line 2503 "cPickle.c"
        var $254=($253)!=0; //@line 2503 "cPickle.c"
        if ($254) { __label__ = 66; break; } else { __label__ = 73; break; } //@line 2503 "cPickle.c"
      case 66: // $bb66
        var $255=HEAP[$state]; //@line 2504 "cPickle.c"
        var $256=($255)==0; //@line 2504 "cPickle.c"
        if ($256) { __label__ = 71; break; } else { __label__ = 67; break; } //@line 2504 "cPickle.c"
      case 67: // $bb67
        var $257=HEAP[$state]; //@line 2504 "cPickle.c"
        var $258=(($257+4)&4294967295); //@line 2504 "cPickle.c"
        var $259=HEAP[$258]; //@line 2504 "cPickle.c"
        var $260=(($259+84)&4294967295); //@line 2504 "cPickle.c"
        var $261=HEAP[$260]; //@line 2504 "cPickle.c"
        var $262=($261) & 536870912; //@line 2504 "cPickle.c"
        var $263=((($262))|0)!=0; //@line 2504 "cPickle.c"
        if ($263) { __label__ = 71; break; } else { __label__ = 68; break; } //@line 2504 "cPickle.c"
      case 68: // $bb68
        var $264=HEAP[$self_addr]; //@line 2505 "cPickle.c"
        var $265=HEAP[$ob_addr]; //@line 2505 "cPickle.c"
        var $266=_put2($264, $265); //@line 2505 "cPickle.c"
        var $267=((($266))|0) < 0; //@line 2505 "cPickle.c"
        if ($267) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 2505 "cPickle.c"
      case 69: // $bb69
        HEAP[$0]=-1; //@line 2506 "cPickle.c"
        __label__ = 84; break; //@line 2506 "cPickle.c"
      case 70: // $bb70
        __label__ = 73; break; //@line 2506 "cPickle.c"
      case 71: // $bb71
        var $268=HEAP[$self_addr]; //@line 2508 "cPickle.c"
        var $269=HEAP[$ob_addr]; //@line 2508 "cPickle.c"
        var $270=_put($268, $269); //@line 2508 "cPickle.c"
        var $271=((($270))|0) < 0; //@line 2508 "cPickle.c"
        if ($271) { __label__ = 72; break; } else { __label__ = 73; break; } //@line 2508 "cPickle.c"
      case 72: // $bb72
        HEAP[$0]=-1; //@line 2509 "cPickle.c"
        __label__ = 84; break; //@line 2509 "cPickle.c"
      case 73: // $bb73
        var $272=HEAP[$listitems]; //@line 2513 "cPickle.c"
        var $273=($272)!=0; //@line 2513 "cPickle.c"
        if ($273) { __label__ = 74; break; } else { __label__ = 76; break; } //@line 2513 "cPickle.c"
      case 74: // $bb74
        var $274=HEAP[$listitems]; //@line 2513 "cPickle.c"
        var $275=HEAP[$self_addr]; //@line 2513 "cPickle.c"
        var $276=_batch_list($275, $274); //@line 2513 "cPickle.c"
        var $277=((($276))|0) < 0; //@line 2513 "cPickle.c"
        if ($277) { __label__ = 75; break; } else { __label__ = 76; break; } //@line 2513 "cPickle.c"
      case 75: // $bb75
        HEAP[$0]=-1; //@line 2514 "cPickle.c"
        __label__ = 84; break; //@line 2514 "cPickle.c"
      case 76: // $bb76
        var $278=HEAP[$dictitems]; //@line 2516 "cPickle.c"
        var $279=($278)!=0; //@line 2516 "cPickle.c"
        if ($279) { __label__ = 77; break; } else { __label__ = 79; break; } //@line 2516 "cPickle.c"
      case 77: // $bb77
        var $280=HEAP[$dictitems]; //@line 2516 "cPickle.c"
        var $281=HEAP[$self_addr]; //@line 2516 "cPickle.c"
        var $282=_batch_dict($281, $280); //@line 2516 "cPickle.c"
        var $283=((($282))|0) < 0; //@line 2516 "cPickle.c"
        if ($283) { __label__ = 78; break; } else { __label__ = 79; break; } //@line 2516 "cPickle.c"
      case 78: // $bb78
        HEAP[$0]=-1; //@line 2517 "cPickle.c"
        __label__ = 84; break; //@line 2517 "cPickle.c"
      case 79: // $bb79
        var $284=HEAP[$state]; //@line 2519 "cPickle.c"
        var $285=($284)!=0; //@line 2519 "cPickle.c"
        if ($285) { __label__ = 80; break; } else { __label__ = 83; break; } //@line 2519 "cPickle.c"
      case 80: // $bb80
        var $286=HEAP[$state]; //@line 2520 "cPickle.c"
        var $287=HEAP[$self_addr]; //@line 2520 "cPickle.c"
        var $288=_save($287, $286, 0); //@line 2520 "cPickle.c"
        var $289=((($288))|0) < 0; //@line 2520 "cPickle.c"
        if ($289) { __label__ = 82; break; } else { __label__ = 81; break; } //@line 2520 "cPickle.c"
      case 81: // $bb81
        var $290=HEAP[$self_addr]; //@line 2520 "cPickle.c"
        var $291=(($290+48)&4294967295); //@line 2520 "cPickle.c"
        var $292=HEAP[$291]; //@line 2520 "cPickle.c"
        var $293=HEAP[$self_addr]; //@line 2520 "cPickle.c"
        var $294=FUNCTION_TABLE[$292]($293, _build_11119, 1); //@line 2520 "cPickle.c"
        var $295=((($294))|0) < 0; //@line 2520 "cPickle.c"
        if ($295) { __label__ = 82; break; } else { __label__ = 83; break; } //@line 2520 "cPickle.c"
      case 82: // $bb82
        HEAP[$0]=-1; //@line 2522 "cPickle.c"
        __label__ = 84; break; //@line 2522 "cPickle.c"
      case 83: // $bb83
        HEAP[$0]=0; //@line 2525 "cPickle.c"
        __label__ = 84; break; //@line 2525 "cPickle.c"
      case 84: // $bb84
        var $296=HEAP[$0]; //@line 2372 "cPickle.c"
        HEAP[$retval]=$296; //@line 2372 "cPickle.c"
        __label__ = 85; break; //@line 2372 "cPickle.c"
      case 85: // $return
        var $retval85=HEAP[$retval]; //@line 2372 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval85; //@line 2372 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _save($self, $args, $pers_save) {
    var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 44);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $pers_save_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $type=__stackBase__+20;
        var $py_ob_id=__stackBase__+24;
        var $__reduce__=__stackBase__+28;
        var $t=__stackBase__+32;
        var $res=__stackBase__+36;
        var $tmp=__stackBase__+40;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$pers_save_addr]=$pers_save;
        HEAP[$py_ob_id]=0; //@line 2532 "cPickle.c"
        HEAP[$__reduce__]=0; //@line 2532 "cPickle.c"
        HEAP[$t]=0; //@line 2532 "cPickle.c"
        HEAP[$res]=-1; //@line 2533 "cPickle.c"
        var $1=HEAP[__PyThreadState_Current]; //@line 2536 "cPickle.c"
        var $2=(($1+12)&4294967295); //@line 2536 "cPickle.c"
        var $3=HEAP[$2]; //@line 2536 "cPickle.c"
        var $4=((($3) + 1)&4294967295); //@line 2536 "cPickle.c"
        var $5=(($1+12)&4294967295); //@line 2536 "cPickle.c"
        HEAP[$5]=$4; //@line 2536 "cPickle.c"
        var $6=(($1+12)&4294967295); //@line 2536 "cPickle.c"
        var $7=HEAP[$6]; //@line 2536 "cPickle.c"
        var $8=HEAP[__Py_CheckRecursionLimit]; //@line 2536 "cPickle.c"
        var $9=((($7))|0) > ((($8))|0); //@line 2536 "cPickle.c"
        if ($9) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 2536 "cPickle.c"
      case 1: // $bb
        var $10=__Py_CheckRecursiveCall(((__str17)&4294967295)); //@line 2536 "cPickle.c"
        var $11=((($10))|0)!=0; //@line 2536 "cPickle.c"
        if ($11) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2536 "cPickle.c"
      case 2: // $bb1
        HEAP[$0]=-1; //@line 2537 "cPickle.c"
        __label__ = 128; break; //@line 2537 "cPickle.c"
      case 3: // $bb2
        var $12=HEAP[$pers_save_addr]; //@line 2539 "cPickle.c"
        var $13=((($12))|0)==0; //@line 2539 "cPickle.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 2539 "cPickle.c"
      case 4: // $bb3
        var $14=HEAP[$self_addr]; //@line 2539 "cPickle.c"
        var $15=(($14+28)&4294967295); //@line 2539 "cPickle.c"
        var $16=HEAP[$15]; //@line 2539 "cPickle.c"
        var $17=($16)!=0; //@line 2539 "cPickle.c"
        if ($17) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 2539 "cPickle.c"
      case 5: // $bb4
        var $18=HEAP[$self_addr]; //@line 2540 "cPickle.c"
        var $19=(($18+28)&4294967295); //@line 2540 "cPickle.c"
        var $20=HEAP[$19]; //@line 2540 "cPickle.c"
        var $21=HEAP[$self_addr]; //@line 2540 "cPickle.c"
        var $22=HEAP[$args_addr]; //@line 2540 "cPickle.c"
        var $23=_save_pers($21, $22, $20); //@line 2540 "cPickle.c"
        HEAP[$tmp]=$23; //@line 2540 "cPickle.c"
        var $24=HEAP[$tmp]; //@line 2540 "cPickle.c"
        var $25=((($24))|0)!=0; //@line 2540 "cPickle.c"
        if ($25) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 2540 "cPickle.c"
      case 6: // $bb5
        var $26=HEAP[$tmp]; //@line 2541 "cPickle.c"
        HEAP[$res]=$26; //@line 2541 "cPickle.c"
        __label__ = 118; break; //@line 2541 "cPickle.c"
      case 7: // $bb6
        var $27=HEAP[$args_addr]; //@line 2546 "cPickle.c"
        var $28=($27)==(__Py_NoneStruct); //@line 2546 "cPickle.c"
        if ($28) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 2546 "cPickle.c"
      case 8: // $bb7
        var $29=HEAP[$self_addr]; //@line 2547 "cPickle.c"
        var $30=HEAP[$args_addr]; //@line 2547 "cPickle.c"
        var $31=_save_none($29, $30); //@line 2547 "cPickle.c"
        HEAP[$res]=$31; //@line 2547 "cPickle.c"
        __label__ = 118; break; //@line 2547 "cPickle.c"
      case 9: // $bb8
        var $32=HEAP[$args_addr]; //@line 2551 "cPickle.c"
        var $33=(($32+4)&4294967295); //@line 2551 "cPickle.c"
        var $34=HEAP[$33]; //@line 2551 "cPickle.c"
        HEAP[$type]=$34; //@line 2551 "cPickle.c"
        var $35=HEAP[$type]; //@line 2553 "cPickle.c"
        var $36=(($35+12)&4294967295); //@line 2553 "cPickle.c"
        var $37=HEAP[$36]; //@line 2553 "cPickle.c"
        var $38=(($37)&4294967295); //@line 2553 "cPickle.c"
        var $39=HEAP[$38]; //@line 2553 "cPickle.c"
        var $40=reSign(($39), 8, 0); //@line 2553 "cPickle.c"
        if ($40 == 98) {
          __label__ = 10; break;
        }
        else if ($40 == 102) {
          __label__ = 20; break;
        }
        else if ($40 == 105) {
          __label__ = 14; break;
        }
        else if ($40 == 108) {
          __label__ = 17; break;
        }
        else if ($40 == 115) {
          __label__ = 27; break;
        }
        else if ($40 == 116) {
          __label__ = 23; break;
        }
        else if ($40 == 117) {
          __label__ = 31; break;
        }
        else {
        __label__ = 34; break;
        }
        
      case 10: // $bb9
        var $41=HEAP[$args_addr]; //@line 2555 "cPickle.c"
        var $42=($41)==(__Py_ZeroStruct); //@line 2555 "cPickle.c"
        if ($42) { __label__ = 12; break; } else { __label__ = 11; break; } //@line 2555 "cPickle.c"
      case 11: // $bb10
        var $43=HEAP[$args_addr]; //@line 2555 "cPickle.c"
        var $44=($43)==(__Py_TrueStruct); //@line 2555 "cPickle.c"
        if ($44) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 2555 "cPickle.c"
      case 12: // $bb11
        var $45=HEAP[$self_addr]; //@line 2556 "cPickle.c"
        var $46=HEAP[$args_addr]; //@line 2556 "cPickle.c"
        var $47=_save_bool($45, $46); //@line 2556 "cPickle.c"
        HEAP[$res]=$47; //@line 2556 "cPickle.c"
        __label__ = 118; break; //@line 2556 "cPickle.c"
      case 13: // $bb12
        __label__ = 34; break; //@line 2556 "cPickle.c"
      case 14: // $bb13
        var $48=HEAP[$type]; //@line 2561 "cPickle.c"
        var $49=($48)==(_PyInt_Type); //@line 2561 "cPickle.c"
        if ($49) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 2561 "cPickle.c"
      case 15: // $bb14
        var $50=HEAP[$self_addr]; //@line 2562 "cPickle.c"
        var $51=HEAP[$args_addr]; //@line 2562 "cPickle.c"
        var $52=_save_int($50, $51); //@line 2562 "cPickle.c"
        HEAP[$res]=$52; //@line 2562 "cPickle.c"
        __label__ = 118; break; //@line 2562 "cPickle.c"
      case 16: // $bb15
        __label__ = 34; break; //@line 2562 "cPickle.c"
      case 17: // $bb16
        var $53=HEAP[$type]; //@line 2568 "cPickle.c"
        var $54=($53)==(_PyLong_Type); //@line 2568 "cPickle.c"
        if ($54) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 2568 "cPickle.c"
      case 18: // $bb17
        var $55=HEAP[$self_addr]; //@line 2569 "cPickle.c"
        var $56=HEAP[$args_addr]; //@line 2569 "cPickle.c"
        var $57=_save_long($55, $56); //@line 2569 "cPickle.c"
        HEAP[$res]=$57; //@line 2569 "cPickle.c"
        __label__ = 118; break; //@line 2569 "cPickle.c"
      case 19: // $bb18
        __label__ = 34; break; //@line 2569 "cPickle.c"
      case 20: // $bb19
        var $58=HEAP[$type]; //@line 2575 "cPickle.c"
        var $59=($58)==(_PyFloat_Type); //@line 2575 "cPickle.c"
        if ($59) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 2575 "cPickle.c"
      case 21: // $bb20
        var $60=HEAP[$self_addr]; //@line 2576 "cPickle.c"
        var $61=HEAP[$args_addr]; //@line 2576 "cPickle.c"
        var $62=_save_float($60, $61); //@line 2576 "cPickle.c"
        HEAP[$res]=$62; //@line 2576 "cPickle.c"
        __label__ = 118; break; //@line 2576 "cPickle.c"
      case 22: // $bb21
        __label__ = 34; break; //@line 2576 "cPickle.c"
      case 23: // $bb22
        var $63=HEAP[$type]; //@line 2582 "cPickle.c"
        var $64=($63)==(_PyTuple_Type); //@line 2582 "cPickle.c"
        if ($64) { __label__ = 24; break; } else { __label__ = 26; break; } //@line 2582 "cPickle.c"
      case 24: // $bb23
        var $65=HEAP[$args_addr]; //@line 2582 "cPickle.c"
        var $66=_PyTuple_Size($65); //@line 2582 "cPickle.c"
        var $67=((($66))|0)==0; //@line 2582 "cPickle.c"
        if ($67) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 2582 "cPickle.c"
      case 25: // $bb24
        var $68=HEAP[$self_addr]; //@line 2583 "cPickle.c"
        var $69=HEAP[$args_addr]; //@line 2583 "cPickle.c"
        var $70=_save_tuple($68, $69); //@line 2583 "cPickle.c"
        HEAP[$res]=$70; //@line 2583 "cPickle.c"
        __label__ = 118; break; //@line 2583 "cPickle.c"
      case 26: // $bb25
        __label__ = 34; break; //@line 2583 "cPickle.c"
      case 27: // $bb26
        var $71=HEAP[$type]; //@line 2589 "cPickle.c"
        var $72=($71)==(_PyString_Type); //@line 2589 "cPickle.c"
        if ($72) { __label__ = 28; break; } else { __label__ = 30; break; } //@line 2589 "cPickle.c"
      case 28: // $bb27
        var $73=HEAP[$args_addr]; //@line 2589 "cPickle.c"
        var $74=$73; //@line 2589 "cPickle.c"
        var $75=(($74+8)&4294967295); //@line 2589 "cPickle.c"
        var $76=HEAP[$75]; //@line 2589 "cPickle.c"
        var $77=((($76))|0) <= 1; //@line 2589 "cPickle.c"
        if ($77) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 2589 "cPickle.c"
      case 29: // $bb28
        var $78=HEAP[$self_addr]; //@line 2590 "cPickle.c"
        var $79=HEAP[$args_addr]; //@line 2590 "cPickle.c"
        var $80=_save_string($78, $79, 0); //@line 2590 "cPickle.c"
        HEAP[$res]=$80; //@line 2590 "cPickle.c"
        __label__ = 118; break; //@line 2590 "cPickle.c"
      case 30: // $bb29
        __label__ = 34; break; //@line 2590 "cPickle.c"
      case 31: // $bb30
        var $81=HEAP[$type]; //@line 2597 "cPickle.c"
        var $82=($81)==(_PyUnicode_Type); //@line 2597 "cPickle.c"
        if ($82) { __label__ = 32; break; } else { __label__ = 34; break; } //@line 2597 "cPickle.c"
      case 32: // $bb31
        var $83=HEAP[$args_addr]; //@line 2597 "cPickle.c"
        var $84=$83; //@line 2597 "cPickle.c"
        var $85=(($84+8)&4294967295); //@line 2597 "cPickle.c"
        var $86=HEAP[$85]; //@line 2597 "cPickle.c"
        var $87=((($86))|0) <= 1; //@line 2597 "cPickle.c"
        if ($87) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 2597 "cPickle.c"
      case 33: // $bb32
        var $88=HEAP[$self_addr]; //@line 2598 "cPickle.c"
        var $89=HEAP[$args_addr]; //@line 2598 "cPickle.c"
        var $90=_save_unicode($88, $89, 0); //@line 2598 "cPickle.c"
        HEAP[$res]=$90; //@line 2598 "cPickle.c"
        __label__ = 118; break; //@line 2598 "cPickle.c"
      case 34: // $bb33
        var $91=HEAP[$args_addr]; //@line 2605 "cPickle.c"
        var $92=(($91)&4294967295); //@line 2605 "cPickle.c"
        var $93=HEAP[$92]; //@line 2605 "cPickle.c"
        var $94=((($93))|0) > 1; //@line 2605 "cPickle.c"
        if ($94) { __label__ = 35; break; } else { __label__ = 39; break; } //@line 2605 "cPickle.c"
      case 35: // $bb34
        var $95=HEAP[$args_addr]; //@line 2606 "cPickle.c"
        var $96=$95; //@line 2606 "cPickle.c"
        var $97=_PyLong_FromVoidPtr($96); //@line 2606 "cPickle.c"
        HEAP[$py_ob_id]=$97; //@line 2606 "cPickle.c"
        var $98=HEAP[$py_ob_id]; //@line 2606 "cPickle.c"
        var $99=($98)==0; //@line 2606 "cPickle.c"
        if ($99) { __label__ = 118; break; } else { __label__ = 36; break; } //@line 2606 "cPickle.c"
      case 36: // $bb35
        var $100=HEAP[$self_addr]; //@line 2609 "cPickle.c"
        var $101=(($100+20)&4294967295); //@line 2609 "cPickle.c"
        var $102=HEAP[$101]; //@line 2609 "cPickle.c"
        var $103=HEAP[$py_ob_id]; //@line 2609 "cPickle.c"
        var $104=_PyDict_GetItem($102, $103); //@line 2609 "cPickle.c"
        var $105=($104)!=0; //@line 2609 "cPickle.c"
        if ($105) { __label__ = 37; break; } else { __label__ = 39; break; } //@line 2609 "cPickle.c"
      case 37: // $bb36
        var $106=HEAP[$self_addr]; //@line 2610 "cPickle.c"
        var $107=HEAP[$py_ob_id]; //@line 2610 "cPickle.c"
        var $108=_get($106, $107); //@line 2610 "cPickle.c"
        var $109=((($108))|0) < 0; //@line 2610 "cPickle.c"
        if ($109) { __label__ = 118; break; } else { __label__ = 38; break; } //@line 2610 "cPickle.c"
      case 38: // $bb37
        HEAP[$res]=0; //@line 2613 "cPickle.c"
        __label__ = 118; break; //@line 2613 "cPickle.c"
      case 39: // $bb38
        var $110=HEAP[$type]; //@line 2618 "cPickle.c"
        var $111=(($110+12)&4294967295); //@line 2618 "cPickle.c"
        var $112=HEAP[$111]; //@line 2618 "cPickle.c"
        var $113=(($112)&4294967295); //@line 2618 "cPickle.c"
        var $114=HEAP[$113]; //@line 2618 "cPickle.c"
        var $115=reSign(($114), 8, 0); //@line 2618 "cPickle.c"
        if ($115 == 98) {
          __label__ = 69; break;
        }
        else if ($115 == 99) {
          __label__ = 60; break;
        }
        else if ($115 == 100) {
          __label__ = 54; break;
        }
        else if ($115 == 102) {
          __label__ = 63; break;
        }
        else if ($115 == 105) {
          __label__ = 57; break;
        }
        else if ($115 == 108) {
          __label__ = 51; break;
        }
        else if ($115 == 115) {
          __label__ = 40; break;
        }
        else if ($115 == 116) {
          __label__ = 46; break;
        }
        else if ($115 == 117) {
          __label__ = 43; break;
        }
        else {
        __label__ = 71; break;
        }
        
      case 40: // $bb39
        var $116=HEAP[$type]; //@line 2620 "cPickle.c"
        var $117=($116)==(_PyString_Type); //@line 2620 "cPickle.c"
        if ($117) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 2620 "cPickle.c"
      case 41: // $bb40
        var $118=HEAP[$self_addr]; //@line 2621 "cPickle.c"
        var $119=HEAP[$args_addr]; //@line 2621 "cPickle.c"
        var $120=_save_string($118, $119, 1); //@line 2621 "cPickle.c"
        HEAP[$res]=$120; //@line 2621 "cPickle.c"
        __label__ = 118; break; //@line 2621 "cPickle.c"
      case 42: // $bb41
        __label__ = 71; break; //@line 2621 "cPickle.c"
      case 43: // $bb42
        var $121=HEAP[$type]; //@line 2628 "cPickle.c"
        var $122=($121)==(_PyUnicode_Type); //@line 2628 "cPickle.c"
        if ($122) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 2628 "cPickle.c"
      case 44: // $bb43
        var $123=HEAP[$self_addr]; //@line 2629 "cPickle.c"
        var $124=HEAP[$args_addr]; //@line 2629 "cPickle.c"
        var $125=_save_unicode($123, $124, 1); //@line 2629 "cPickle.c"
        HEAP[$res]=$125; //@line 2629 "cPickle.c"
        __label__ = 118; break; //@line 2629 "cPickle.c"
      case 45: // $bb44
        __label__ = 71; break; //@line 2629 "cPickle.c"
      case 46: // $bb45
        var $126=HEAP[$type]; //@line 2636 "cPickle.c"
        var $127=($126)==(_PyTuple_Type); //@line 2636 "cPickle.c"
        if ($127) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 2636 "cPickle.c"
      case 47: // $bb46
        var $128=HEAP[$self_addr]; //@line 2637 "cPickle.c"
        var $129=HEAP[$args_addr]; //@line 2637 "cPickle.c"
        var $130=_save_tuple($128, $129); //@line 2637 "cPickle.c"
        HEAP[$res]=$130; //@line 2637 "cPickle.c"
        __label__ = 118; break; //@line 2637 "cPickle.c"
      case 48: // $bb47
        var $131=HEAP[$type]; //@line 2640 "cPickle.c"
        var $132=($131)==(_PyType_Type); //@line 2640 "cPickle.c"
        if ($132) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 2640 "cPickle.c"
      case 49: // $bb48
        var $133=HEAP[$self_addr]; //@line 2641 "cPickle.c"
        var $134=HEAP[$args_addr]; //@line 2641 "cPickle.c"
        var $135=_save_global($133, $134, 0); //@line 2641 "cPickle.c"
        HEAP[$res]=$135; //@line 2641 "cPickle.c"
        __label__ = 118; break; //@line 2641 "cPickle.c"
      case 50: // $bb49
        __label__ = 71; break; //@line 2641 "cPickle.c"
      case 51: // $bb50
        var $136=HEAP[$type]; //@line 2647 "cPickle.c"
        var $137=($136)==(_PyList_Type); //@line 2647 "cPickle.c"
        if ($137) { __label__ = 52; break; } else { __label__ = 53; break; } //@line 2647 "cPickle.c"
      case 52: // $bb51
        var $138=HEAP[$self_addr]; //@line 2648 "cPickle.c"
        var $139=HEAP[$args_addr]; //@line 2648 "cPickle.c"
        var $140=_save_list($138, $139); //@line 2648 "cPickle.c"
        HEAP[$res]=$140; //@line 2648 "cPickle.c"
        __label__ = 118; break; //@line 2648 "cPickle.c"
      case 53: // $bb52
        __label__ = 71; break; //@line 2648 "cPickle.c"
      case 54: // $bb53
        var $141=HEAP[$type]; //@line 2654 "cPickle.c"
        var $142=($141)==(_PyDict_Type); //@line 2654 "cPickle.c"
        if ($142) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 2654 "cPickle.c"
      case 55: // $bb54
        var $143=HEAP[$self_addr]; //@line 2655 "cPickle.c"
        var $144=HEAP[$args_addr]; //@line 2655 "cPickle.c"
        var $145=_save_dict($143, $144); //@line 2655 "cPickle.c"
        HEAP[$res]=$145; //@line 2655 "cPickle.c"
        __label__ = 118; break; //@line 2655 "cPickle.c"
      case 56: // $bb55
        __label__ = 71; break; //@line 2655 "cPickle.c"
      case 57: // $bb56
        var $146=HEAP[$type]; //@line 2661 "cPickle.c"
        var $147=($146)==(_PyInstance_Type); //@line 2661 "cPickle.c"
        if ($147) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 2661 "cPickle.c"
      case 58: // $bb57
        var $148=HEAP[$self_addr]; //@line 2662 "cPickle.c"
        var $149=HEAP[$args_addr]; //@line 2662 "cPickle.c"
        var $150=_save_inst($148, $149); //@line 2662 "cPickle.c"
        HEAP[$res]=$150; //@line 2662 "cPickle.c"
        __label__ = 118; break; //@line 2662 "cPickle.c"
      case 59: // $bb58
        __label__ = 71; break; //@line 2662 "cPickle.c"
      case 60: // $bb59
        var $151=HEAP[$type]; //@line 2668 "cPickle.c"
        var $152=($151)==(_PyClass_Type); //@line 2668 "cPickle.c"
        if ($152) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 2668 "cPickle.c"
      case 61: // $bb60
        var $153=HEAP[$self_addr]; //@line 2669 "cPickle.c"
        var $154=HEAP[$args_addr]; //@line 2669 "cPickle.c"
        var $155=_save_global($153, $154, 0); //@line 2669 "cPickle.c"
        HEAP[$res]=$155; //@line 2669 "cPickle.c"
        __label__ = 118; break; //@line 2669 "cPickle.c"
      case 62: // $bb61
        __label__ = 71; break; //@line 2669 "cPickle.c"
      case 63: // $bb62
        var $156=HEAP[$type]; //@line 2675 "cPickle.c"
        var $157=($156)==(_PyFunction_Type); //@line 2675 "cPickle.c"
        if ($157) { __label__ = 64; break; } else { __label__ = 68; break; } //@line 2675 "cPickle.c"
      case 64: // $bb63
        var $158=HEAP[$self_addr]; //@line 2676 "cPickle.c"
        var $159=HEAP[$args_addr]; //@line 2676 "cPickle.c"
        var $160=_save_global($158, $159, 0); //@line 2676 "cPickle.c"
        HEAP[$res]=$160; //@line 2676 "cPickle.c"
        var $161=HEAP[$res]; //@line 2677 "cPickle.c"
        var $162=((($161))|0)!=0; //@line 2677 "cPickle.c"
        if ($162) { __label__ = 65; break; } else { __label__ = 67; break; } //@line 2677 "cPickle.c"
      case 65: // $bb64
        var $163=HEAP[_PickleError]; //@line 2677 "cPickle.c"
        var $164=_PyErr_ExceptionMatches($163); //@line 2677 "cPickle.c"
        var $165=((($164))|0)!=0; //@line 2677 "cPickle.c"
        if ($165) { __label__ = 66; break; } else { __label__ = 67; break; } //@line 2677 "cPickle.c"
      case 66: // $bb65
        _PyErr_Clear(); //@line 2679 "cPickle.c"
        __label__ = 71; break; //@line 2679 "cPickle.c"
      case 67: // $bb66
        __label__ = 118; break; //@line 2679 "cPickle.c"
      case 68: // $bb67
        __label__ = 71; break; //@line 2679 "cPickle.c"
      case 69: // $bb68
        var $166=HEAP[$type]; //@line 2687 "cPickle.c"
        var $167=($166)==(_PyCFunction_Type); //@line 2687 "cPickle.c"
        if ($167) { __label__ = 70; break; } else { __label__ = 71; break; } //@line 2687 "cPickle.c"
      case 70: // $bb69
        var $168=HEAP[$self_addr]; //@line 2688 "cPickle.c"
        var $169=HEAP[$args_addr]; //@line 2688 "cPickle.c"
        var $170=_save_global($168, $169, 0); //@line 2688 "cPickle.c"
        HEAP[$res]=$170; //@line 2688 "cPickle.c"
        __label__ = 118; break; //@line 2688 "cPickle.c"
      case 71: // $bb70
        var $171=HEAP[$pers_save_addr]; //@line 2693 "cPickle.c"
        var $172=((($171))|0)==0; //@line 2693 "cPickle.c"
        if ($172) { __label__ = 72; break; } else { __label__ = 75; break; } //@line 2693 "cPickle.c"
      case 72: // $bb71
        var $173=HEAP[$self_addr]; //@line 2693 "cPickle.c"
        var $174=(($173+32)&4294967295); //@line 2693 "cPickle.c"
        var $175=HEAP[$174]; //@line 2693 "cPickle.c"
        var $176=($175)!=0; //@line 2693 "cPickle.c"
        if ($176) { __label__ = 73; break; } else { __label__ = 75; break; } //@line 2693 "cPickle.c"
      case 73: // $bb72
        var $177=HEAP[$self_addr]; //@line 2694 "cPickle.c"
        var $178=(($177+32)&4294967295); //@line 2694 "cPickle.c"
        var $179=HEAP[$178]; //@line 2694 "cPickle.c"
        var $180=HEAP[$self_addr]; //@line 2694 "cPickle.c"
        var $181=HEAP[$args_addr]; //@line 2694 "cPickle.c"
        var $182=_save_pers($180, $181, $179); //@line 2694 "cPickle.c"
        HEAP[$tmp]=$182; //@line 2694 "cPickle.c"
        var $183=HEAP[$tmp]; //@line 2694 "cPickle.c"
        var $184=((($183))|0)!=0; //@line 2694 "cPickle.c"
        if ($184) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 2694 "cPickle.c"
      case 74: // $bb73
        var $185=HEAP[$tmp]; //@line 2695 "cPickle.c"
        HEAP[$res]=$185; //@line 2695 "cPickle.c"
        __label__ = 118; break; //@line 2695 "cPickle.c"
      case 75: // $bb74
        var $186=HEAP[$type]; //@line 2700 "cPickle.c"
        var $187=_PyType_IsSubtype($186, _PyType_Type); //@line 2700 "cPickle.c"
        var $188=((($187))|0)!=0; //@line 2700 "cPickle.c"
        if ($188) { __label__ = 76; break; } else { __label__ = 77; break; } //@line 2700 "cPickle.c"
      case 76: // $bb75
        var $189=HEAP[$self_addr]; //@line 2701 "cPickle.c"
        var $190=HEAP[$args_addr]; //@line 2701 "cPickle.c"
        var $191=_save_global($189, $190, 0); //@line 2701 "cPickle.c"
        HEAP[$res]=$191; //@line 2701 "cPickle.c"
        __label__ = 118; break; //@line 2701 "cPickle.c"
      case 77: // $bb76
        var $192=HEAP[$type]; //@line 2709 "cPickle.c"
        var $193=$192; //@line 2709 "cPickle.c"
        var $194=HEAP[_dispatch_table]; //@line 2709 "cPickle.c"
        var $195=_PyDict_GetItem($194, $193); //@line 2709 "cPickle.c"
        HEAP[$__reduce__]=$195; //@line 2709 "cPickle.c"
        var $196=HEAP[$__reduce__]; //@line 2710 "cPickle.c"
        var $197=($196)!=0; //@line 2710 "cPickle.c"
        if ($197) { __label__ = 78; break; } else { __label__ = 92; break; } //@line 2710 "cPickle.c"
      case 78: // $bb77
        var $198=HEAP[$__reduce__]; //@line 2711 "cPickle.c"
        var $199=(($198)&4294967295); //@line 2711 "cPickle.c"
        var $200=HEAP[$199]; //@line 2711 "cPickle.c"
        var $201=((($200) + 1)&4294967295); //@line 2711 "cPickle.c"
        var $202=HEAP[$__reduce__]; //@line 2711 "cPickle.c"
        var $203=(($202)&4294967295); //@line 2711 "cPickle.c"
        HEAP[$203]=$201; //@line 2711 "cPickle.c"
        var $204=HEAP[$args_addr]; //@line 2712 "cPickle.c"
        var $205=(($204)&4294967295); //@line 2712 "cPickle.c"
        var $206=HEAP[$205]; //@line 2712 "cPickle.c"
        var $207=((($206) + 1)&4294967295); //@line 2712 "cPickle.c"
        var $208=HEAP[$args_addr]; //@line 2712 "cPickle.c"
        var $209=(($208)&4294967295); //@line 2712 "cPickle.c"
        HEAP[$209]=$207; //@line 2712 "cPickle.c"
        var $210=HEAP[$self_addr]; //@line 2713 "cPickle.c"
        var $211=(($210+24)&4294967295); //@line 2713 "cPickle.c"
        var $212=HEAP[$211]; //@line 2713 "cPickle.c"
        var $213=($212)!=0; //@line 2713 "cPickle.c"
        if ($213) { __label__ = 80; break; } else { __label__ = 79; break; } //@line 2713 "cPickle.c"
      case 79: // $bb78
        var $214=_PyTuple_New(1); //@line 2713 "cPickle.c"
        var $215=HEAP[$self_addr]; //@line 2713 "cPickle.c"
        var $216=(($215+24)&4294967295); //@line 2713 "cPickle.c"
        HEAP[$216]=$214; //@line 2713 "cPickle.c"
        var $217=HEAP[$self_addr]; //@line 2713 "cPickle.c"
        var $218=(($217+24)&4294967295); //@line 2713 "cPickle.c"
        var $219=HEAP[$218]; //@line 2713 "cPickle.c"
        var $220=($219)!=0; //@line 2713 "cPickle.c"
        if ($220) { __label__ = 80; break; } else { __label__ = 84; break; } //@line 2713 "cPickle.c"
      case 80: // $bb79
        var $221=HEAP[$self_addr]; //@line 2713 "cPickle.c"
        var $222=(($221+24)&4294967295); //@line 2713 "cPickle.c"
        var $223=HEAP[$222]; //@line 2713 "cPickle.c"
        var $224=$223; //@line 2713 "cPickle.c"
        var $225=(($224+12)&4294967295); //@line 2713 "cPickle.c"
        var $226=(($225)&4294967295); //@line 2713 "cPickle.c"
        var $227=HEAP[$226]; //@line 2713 "cPickle.c"
        var $228=($227)!=0; //@line 2713 "cPickle.c"
        if ($228) { __label__ = 81; break; } else { __label__ = 83; break; } //@line 2713 "cPickle.c"
      case 81: // $bb80
        var $229=HEAP[$self_addr]; //@line 2713 "cPickle.c"
        var $230=(($229+24)&4294967295); //@line 2713 "cPickle.c"
        var $231=HEAP[$230]; //@line 2713 "cPickle.c"
        var $232=$231; //@line 2713 "cPickle.c"
        var $233=(($232+12)&4294967295); //@line 2713 "cPickle.c"
        var $234=(($233)&4294967295); //@line 2713 "cPickle.c"
        var $235=HEAP[$234]; //@line 2713 "cPickle.c"
        var $236=(($235)&4294967295); //@line 2713 "cPickle.c"
        var $237=HEAP[$236]; //@line 2713 "cPickle.c"
        var $238=((($237) - 1)&4294967295); //@line 2713 "cPickle.c"
        var $239=(($235)&4294967295); //@line 2713 "cPickle.c"
        HEAP[$239]=$238; //@line 2713 "cPickle.c"
        var $240=(($235)&4294967295); //@line 2713 "cPickle.c"
        var $241=HEAP[$240]; //@line 2713 "cPickle.c"
        var $242=((($241))|0)==0; //@line 2713 "cPickle.c"
        if ($242) { __label__ = 82; break; } else { __label__ = 83; break; } //@line 2713 "cPickle.c"
      case 82: // $bb81
        var $243=HEAP[$self_addr]; //@line 2713 "cPickle.c"
        var $244=(($243+24)&4294967295); //@line 2713 "cPickle.c"
        var $245=HEAP[$244]; //@line 2713 "cPickle.c"
        var $246=$245; //@line 2713 "cPickle.c"
        var $247=(($246+12)&4294967295); //@line 2713 "cPickle.c"
        var $248=(($247)&4294967295); //@line 2713 "cPickle.c"
        var $249=HEAP[$248]; //@line 2713 "cPickle.c"
        var $250=(($249+4)&4294967295); //@line 2713 "cPickle.c"
        var $251=HEAP[$250]; //@line 2713 "cPickle.c"
        var $252=(($251+24)&4294967295); //@line 2713 "cPickle.c"
        var $253=HEAP[$252]; //@line 2713 "cPickle.c"
        var $254=HEAP[$self_addr]; //@line 2713 "cPickle.c"
        var $255=(($254+24)&4294967295); //@line 2713 "cPickle.c"
        var $256=HEAP[$255]; //@line 2713 "cPickle.c"
        var $257=$256; //@line 2713 "cPickle.c"
        var $258=(($257+12)&4294967295); //@line 2713 "cPickle.c"
        var $259=(($258)&4294967295); //@line 2713 "cPickle.c"
        var $260=HEAP[$259]; //@line 2713 "cPickle.c"
        FUNCTION_TABLE[$253]($260); //@line 2713 "cPickle.c"
        __label__ = 83; break; //@line 2713 "cPickle.c"
      case 83: // $bb82
        var $261=HEAP[$self_addr]; //@line 2713 "cPickle.c"
        var $262=(($261+24)&4294967295); //@line 2713 "cPickle.c"
        var $263=HEAP[$262]; //@line 2713 "cPickle.c"
        var $264=$263; //@line 2713 "cPickle.c"
        var $265=(($264+12)&4294967295); //@line 2713 "cPickle.c"
        var $266=(($265)&4294967295); //@line 2713 "cPickle.c"
        var $267=HEAP[$args_addr]; //@line 2713 "cPickle.c"
        HEAP[$266]=$267; //@line 2713 "cPickle.c"
        __label__ = 86; break; //@line 2713 "cPickle.c"
      case 84: // $bb83
        var $268=HEAP[$args_addr]; //@line 2713 "cPickle.c"
        var $269=(($268)&4294967295); //@line 2713 "cPickle.c"
        var $270=HEAP[$269]; //@line 2713 "cPickle.c"
        var $271=((($270) - 1)&4294967295); //@line 2713 "cPickle.c"
        var $272=HEAP[$args_addr]; //@line 2713 "cPickle.c"
        var $273=(($272)&4294967295); //@line 2713 "cPickle.c"
        HEAP[$273]=$271; //@line 2713 "cPickle.c"
        var $274=HEAP[$args_addr]; //@line 2713 "cPickle.c"
        var $275=(($274)&4294967295); //@line 2713 "cPickle.c"
        var $276=HEAP[$275]; //@line 2713 "cPickle.c"
        var $277=((($276))|0)==0; //@line 2713 "cPickle.c"
        if ($277) { __label__ = 85; break; } else { __label__ = 86; break; } //@line 2713 "cPickle.c"
      case 85: // $bb84
        var $278=HEAP[$args_addr]; //@line 2713 "cPickle.c"
        var $279=(($278+4)&4294967295); //@line 2713 "cPickle.c"
        var $280=HEAP[$279]; //@line 2713 "cPickle.c"
        var $281=(($280+24)&4294967295); //@line 2713 "cPickle.c"
        var $282=HEAP[$281]; //@line 2713 "cPickle.c"
        var $283=HEAP[$args_addr]; //@line 2713 "cPickle.c"
        FUNCTION_TABLE[$282]($283); //@line 2713 "cPickle.c"
        __label__ = 86; break; //@line 2713 "cPickle.c"
      case 86: // $bb85
        var $284=HEAP[$self_addr]; //@line 2714 "cPickle.c"
        var $285=(($284+24)&4294967295); //@line 2714 "cPickle.c"
        var $286=HEAP[$285]; //@line 2714 "cPickle.c"
        var $287=($286)!=0; //@line 2714 "cPickle.c"
        if ($287) { __label__ = 87; break; } else { __label__ = 91; break; } //@line 2714 "cPickle.c"
      case 87: // $bb86
        var $288=HEAP[$self_addr]; //@line 2715 "cPickle.c"
        var $289=(($288+24)&4294967295); //@line 2715 "cPickle.c"
        var $290=HEAP[$289]; //@line 2715 "cPickle.c"
        var $291=HEAP[$__reduce__]; //@line 2715 "cPickle.c"
        var $292=_PyObject_Call($291, $290, 0); //@line 2715 "cPickle.c"
        HEAP[$t]=$292; //@line 2715 "cPickle.c"
        var $293=HEAP[$self_addr]; //@line 2716 "cPickle.c"
        var $294=(($293+24)&4294967295); //@line 2716 "cPickle.c"
        var $295=HEAP[$294]; //@line 2716 "cPickle.c"
        var $296=(($295)&4294967295); //@line 2716 "cPickle.c"
        var $297=HEAP[$296]; //@line 2716 "cPickle.c"
        var $298=((($297))|0) > 1; //@line 2716 "cPickle.c"
        if ($298) { __label__ = 88; break; } else { __label__ = 91; break; } //@line 2716 "cPickle.c"
      case 88: // $bb87
        var $299=HEAP[$self_addr]; //@line 2716 "cPickle.c"
        var $300=(($299+24)&4294967295); //@line 2716 "cPickle.c"
        var $301=HEAP[$300]; //@line 2716 "cPickle.c"
        var $302=(($301)&4294967295); //@line 2716 "cPickle.c"
        var $303=HEAP[$302]; //@line 2716 "cPickle.c"
        var $304=((($303) - 1)&4294967295); //@line 2716 "cPickle.c"
        var $305=(($301)&4294967295); //@line 2716 "cPickle.c"
        HEAP[$305]=$304; //@line 2716 "cPickle.c"
        var $306=(($301)&4294967295); //@line 2716 "cPickle.c"
        var $307=HEAP[$306]; //@line 2716 "cPickle.c"
        var $308=((($307))|0)==0; //@line 2716 "cPickle.c"
        if ($308) { __label__ = 89; break; } else { __label__ = 90; break; } //@line 2716 "cPickle.c"
      case 89: // $bb88
        var $309=HEAP[$self_addr]; //@line 2716 "cPickle.c"
        var $310=(($309+24)&4294967295); //@line 2716 "cPickle.c"
        var $311=HEAP[$310]; //@line 2716 "cPickle.c"
        var $312=(($311+4)&4294967295); //@line 2716 "cPickle.c"
        var $313=HEAP[$312]; //@line 2716 "cPickle.c"
        var $314=(($313+24)&4294967295); //@line 2716 "cPickle.c"
        var $315=HEAP[$314]; //@line 2716 "cPickle.c"
        var $316=HEAP[$self_addr]; //@line 2716 "cPickle.c"
        var $317=(($316+24)&4294967295); //@line 2716 "cPickle.c"
        var $318=HEAP[$317]; //@line 2716 "cPickle.c"
        FUNCTION_TABLE[$315]($318); //@line 2716 "cPickle.c"
        __label__ = 90; break; //@line 2716 "cPickle.c"
      case 90: // $bb89
        var $319=HEAP[$self_addr]; //@line 2716 "cPickle.c"
        var $320=(($319+24)&4294967295); //@line 2716 "cPickle.c"
        HEAP[$320]=0; //@line 2716 "cPickle.c"
        __label__ = 91; break; //@line 2716 "cPickle.c"
      case 91: // $bb90
        __label__ = 112; break; //@line 2716 "cPickle.c"
      case 92: // $bb91
        var $321=HEAP[___reduce_ex___str]; //@line 2721 "cPickle.c"
        var $322=HEAP[$args_addr]; //@line 2721 "cPickle.c"
        var $323=_PyObject_GetAttr($322, $321); //@line 2721 "cPickle.c"
        HEAP[$__reduce__]=$323; //@line 2721 "cPickle.c"
        var $324=HEAP[$__reduce__]; //@line 2722 "cPickle.c"
        var $325=($324)!=0; //@line 2722 "cPickle.c"
        if ($325) { __label__ = 93; break; } else { __label__ = 108; break; } //@line 2722 "cPickle.c"
      case 93: // $bb92
        var $326=HEAP[$self_addr]; //@line 2723 "cPickle.c"
        var $327=(($326+36)&4294967295); //@line 2723 "cPickle.c"
        var $328=HEAP[$327]; //@line 2723 "cPickle.c"
        var $329=_PyInt_FromLong($328); //@line 2723 "cPickle.c"
        HEAP[$t]=$329; //@line 2723 "cPickle.c"
        var $330=HEAP[$t]; //@line 2724 "cPickle.c"
        var $331=($330)!=0; //@line 2724 "cPickle.c"
        if ($331) { __label__ = 94; break; } else { __label__ = 107; break; } //@line 2724 "cPickle.c"
      case 94: // $bb93
        var $332=HEAP[$self_addr]; //@line 2725 "cPickle.c"
        var $333=(($332+24)&4294967295); //@line 2725 "cPickle.c"
        var $334=HEAP[$333]; //@line 2725 "cPickle.c"
        var $335=($334)!=0; //@line 2725 "cPickle.c"
        if ($335) { __label__ = 96; break; } else { __label__ = 95; break; } //@line 2725 "cPickle.c"
      case 95: // $bb94
        var $336=_PyTuple_New(1); //@line 2725 "cPickle.c"
        var $337=HEAP[$self_addr]; //@line 2725 "cPickle.c"
        var $338=(($337+24)&4294967295); //@line 2725 "cPickle.c"
        HEAP[$338]=$336; //@line 2725 "cPickle.c"
        var $339=HEAP[$self_addr]; //@line 2725 "cPickle.c"
        var $340=(($339+24)&4294967295); //@line 2725 "cPickle.c"
        var $341=HEAP[$340]; //@line 2725 "cPickle.c"
        var $342=($341)!=0; //@line 2725 "cPickle.c"
        if ($342) { __label__ = 96; break; } else { __label__ = 100; break; } //@line 2725 "cPickle.c"
      case 96: // $bb95
        var $343=HEAP[$self_addr]; //@line 2725 "cPickle.c"
        var $344=(($343+24)&4294967295); //@line 2725 "cPickle.c"
        var $345=HEAP[$344]; //@line 2725 "cPickle.c"
        var $346=$345; //@line 2725 "cPickle.c"
        var $347=(($346+12)&4294967295); //@line 2725 "cPickle.c"
        var $348=(($347)&4294967295); //@line 2725 "cPickle.c"
        var $349=HEAP[$348]; //@line 2725 "cPickle.c"
        var $350=($349)!=0; //@line 2725 "cPickle.c"
        if ($350) { __label__ = 97; break; } else { __label__ = 99; break; } //@line 2725 "cPickle.c"
      case 97: // $bb96
        var $351=HEAP[$self_addr]; //@line 2725 "cPickle.c"
        var $352=(($351+24)&4294967295); //@line 2725 "cPickle.c"
        var $353=HEAP[$352]; //@line 2725 "cPickle.c"
        var $354=$353; //@line 2725 "cPickle.c"
        var $355=(($354+12)&4294967295); //@line 2725 "cPickle.c"
        var $356=(($355)&4294967295); //@line 2725 "cPickle.c"
        var $357=HEAP[$356]; //@line 2725 "cPickle.c"
        var $358=(($357)&4294967295); //@line 2725 "cPickle.c"
        var $359=HEAP[$358]; //@line 2725 "cPickle.c"
        var $360=((($359) - 1)&4294967295); //@line 2725 "cPickle.c"
        var $361=(($357)&4294967295); //@line 2725 "cPickle.c"
        HEAP[$361]=$360; //@line 2725 "cPickle.c"
        var $362=(($357)&4294967295); //@line 2725 "cPickle.c"
        var $363=HEAP[$362]; //@line 2725 "cPickle.c"
        var $364=((($363))|0)==0; //@line 2725 "cPickle.c"
        if ($364) { __label__ = 98; break; } else { __label__ = 99; break; } //@line 2725 "cPickle.c"
      case 98: // $bb97
        var $365=HEAP[$self_addr]; //@line 2725 "cPickle.c"
        var $366=(($365+24)&4294967295); //@line 2725 "cPickle.c"
        var $367=HEAP[$366]; //@line 2725 "cPickle.c"
        var $368=$367; //@line 2725 "cPickle.c"
        var $369=(($368+12)&4294967295); //@line 2725 "cPickle.c"
        var $370=(($369)&4294967295); //@line 2725 "cPickle.c"
        var $371=HEAP[$370]; //@line 2725 "cPickle.c"
        var $372=(($371+4)&4294967295); //@line 2725 "cPickle.c"
        var $373=HEAP[$372]; //@line 2725 "cPickle.c"
        var $374=(($373+24)&4294967295); //@line 2725 "cPickle.c"
        var $375=HEAP[$374]; //@line 2725 "cPickle.c"
        var $376=HEAP[$self_addr]; //@line 2725 "cPickle.c"
        var $377=(($376+24)&4294967295); //@line 2725 "cPickle.c"
        var $378=HEAP[$377]; //@line 2725 "cPickle.c"
        var $379=$378; //@line 2725 "cPickle.c"
        var $380=(($379+12)&4294967295); //@line 2725 "cPickle.c"
        var $381=(($380)&4294967295); //@line 2725 "cPickle.c"
        var $382=HEAP[$381]; //@line 2725 "cPickle.c"
        FUNCTION_TABLE[$375]($382); //@line 2725 "cPickle.c"
        __label__ = 99; break; //@line 2725 "cPickle.c"
      case 99: // $bb98
        var $383=HEAP[$self_addr]; //@line 2725 "cPickle.c"
        var $384=(($383+24)&4294967295); //@line 2725 "cPickle.c"
        var $385=HEAP[$384]; //@line 2725 "cPickle.c"
        var $386=$385; //@line 2725 "cPickle.c"
        var $387=(($386+12)&4294967295); //@line 2725 "cPickle.c"
        var $388=(($387)&4294967295); //@line 2725 "cPickle.c"
        var $389=HEAP[$t]; //@line 2725 "cPickle.c"
        HEAP[$388]=$389; //@line 2725 "cPickle.c"
        __label__ = 102; break; //@line 2725 "cPickle.c"
      case 100: // $bb99
        var $390=HEAP[$t]; //@line 2725 "cPickle.c"
        var $391=(($390)&4294967295); //@line 2725 "cPickle.c"
        var $392=HEAP[$391]; //@line 2725 "cPickle.c"
        var $393=((($392) - 1)&4294967295); //@line 2725 "cPickle.c"
        var $394=HEAP[$t]; //@line 2725 "cPickle.c"
        var $395=(($394)&4294967295); //@line 2725 "cPickle.c"
        HEAP[$395]=$393; //@line 2725 "cPickle.c"
        var $396=HEAP[$t]; //@line 2725 "cPickle.c"
        var $397=(($396)&4294967295); //@line 2725 "cPickle.c"
        var $398=HEAP[$397]; //@line 2725 "cPickle.c"
        var $399=((($398))|0)==0; //@line 2725 "cPickle.c"
        if ($399) { __label__ = 101; break; } else { __label__ = 102; break; } //@line 2725 "cPickle.c"
      case 101: // $bb100
        var $400=HEAP[$t]; //@line 2725 "cPickle.c"
        var $401=(($400+4)&4294967295); //@line 2725 "cPickle.c"
        var $402=HEAP[$401]; //@line 2725 "cPickle.c"
        var $403=(($402+24)&4294967295); //@line 2725 "cPickle.c"
        var $404=HEAP[$403]; //@line 2725 "cPickle.c"
        var $405=HEAP[$t]; //@line 2725 "cPickle.c"
        FUNCTION_TABLE[$404]($405); //@line 2725 "cPickle.c"
        __label__ = 102; break; //@line 2725 "cPickle.c"
      case 102: // $bb101
        HEAP[$t]=0; //@line 2726 "cPickle.c"
        var $406=HEAP[$self_addr]; //@line 2727 "cPickle.c"
        var $407=(($406+24)&4294967295); //@line 2727 "cPickle.c"
        var $408=HEAP[$407]; //@line 2727 "cPickle.c"
        var $409=($408)!=0; //@line 2727 "cPickle.c"
        if ($409) { __label__ = 103; break; } else { __label__ = 107; break; } //@line 2727 "cPickle.c"
      case 103: // $bb102
        var $410=HEAP[$self_addr]; //@line 2728 "cPickle.c"
        var $411=(($410+24)&4294967295); //@line 2728 "cPickle.c"
        var $412=HEAP[$411]; //@line 2728 "cPickle.c"
        var $413=HEAP[$__reduce__]; //@line 2728 "cPickle.c"
        var $414=_PyObject_Call($413, $412, 0); //@line 2728 "cPickle.c"
        HEAP[$t]=$414; //@line 2728 "cPickle.c"
        var $415=HEAP[$self_addr]; //@line 2730 "cPickle.c"
        var $416=(($415+24)&4294967295); //@line 2730 "cPickle.c"
        var $417=HEAP[$416]; //@line 2730 "cPickle.c"
        var $418=(($417)&4294967295); //@line 2730 "cPickle.c"
        var $419=HEAP[$418]; //@line 2730 "cPickle.c"
        var $420=((($419))|0) > 1; //@line 2730 "cPickle.c"
        if ($420) { __label__ = 104; break; } else { __label__ = 107; break; } //@line 2730 "cPickle.c"
      case 104: // $bb103
        var $421=HEAP[$self_addr]; //@line 2730 "cPickle.c"
        var $422=(($421+24)&4294967295); //@line 2730 "cPickle.c"
        var $423=HEAP[$422]; //@line 2730 "cPickle.c"
        var $424=(($423)&4294967295); //@line 2730 "cPickle.c"
        var $425=HEAP[$424]; //@line 2730 "cPickle.c"
        var $426=((($425) - 1)&4294967295); //@line 2730 "cPickle.c"
        var $427=(($423)&4294967295); //@line 2730 "cPickle.c"
        HEAP[$427]=$426; //@line 2730 "cPickle.c"
        var $428=(($423)&4294967295); //@line 2730 "cPickle.c"
        var $429=HEAP[$428]; //@line 2730 "cPickle.c"
        var $430=((($429))|0)==0; //@line 2730 "cPickle.c"
        if ($430) { __label__ = 105; break; } else { __label__ = 106; break; } //@line 2730 "cPickle.c"
      case 105: // $bb104
        var $431=HEAP[$self_addr]; //@line 2730 "cPickle.c"
        var $432=(($431+24)&4294967295); //@line 2730 "cPickle.c"
        var $433=HEAP[$432]; //@line 2730 "cPickle.c"
        var $434=(($433+4)&4294967295); //@line 2730 "cPickle.c"
        var $435=HEAP[$434]; //@line 2730 "cPickle.c"
        var $436=(($435+24)&4294967295); //@line 2730 "cPickle.c"
        var $437=HEAP[$436]; //@line 2730 "cPickle.c"
        var $438=HEAP[$self_addr]; //@line 2730 "cPickle.c"
        var $439=(($438+24)&4294967295); //@line 2730 "cPickle.c"
        var $440=HEAP[$439]; //@line 2730 "cPickle.c"
        FUNCTION_TABLE[$437]($440); //@line 2730 "cPickle.c"
        __label__ = 106; break; //@line 2730 "cPickle.c"
      case 106: // $bb105
        var $441=HEAP[$self_addr]; //@line 2730 "cPickle.c"
        var $442=(($441+24)&4294967295); //@line 2730 "cPickle.c"
        HEAP[$442]=0; //@line 2730 "cPickle.c"
        __label__ = 107; break; //@line 2730 "cPickle.c"
      case 107: // $bb106
        __label__ = 112; break; //@line 2730 "cPickle.c"
      case 108: // $bb107
        var $443=HEAP[_PyExc_AttributeError]; //@line 2735 "cPickle.c"
        var $444=_PyErr_ExceptionMatches($443); //@line 2735 "cPickle.c"
        var $445=((($444))|0)!=0; //@line 2735 "cPickle.c"
        if ($445) { __label__ = 109; break; } else { __label__ = 118; break; } //@line 2735 "cPickle.c"
      case 109: // $bb108
        _PyErr_Clear(); //@line 2736 "cPickle.c"
        var $446=HEAP[___reduce___str]; //@line 2740 "cPickle.c"
        var $447=HEAP[$args_addr]; //@line 2740 "cPickle.c"
        var $448=_PyObject_GetAttr($447, $446); //@line 2740 "cPickle.c"
        HEAP[$__reduce__]=$448; //@line 2740 "cPickle.c"
        var $449=HEAP[$__reduce__]; //@line 2741 "cPickle.c"
        var $450=($449)!=0; //@line 2741 "cPickle.c"
        if ($450) { __label__ = 110; break; } else { __label__ = 111; break; } //@line 2741 "cPickle.c"
      case 110: // $bb109
        var $451=HEAP[_empty_tuple]; //@line 2742 "cPickle.c"
        var $452=HEAP[$__reduce__]; //@line 2742 "cPickle.c"
        var $453=_PyObject_Call($452, $451, 0); //@line 2742 "cPickle.c"
        HEAP[$t]=$453; //@line 2742 "cPickle.c"
        __label__ = 112; break; //@line 2742 "cPickle.c"
      case 111: // $bb110
        var $454=HEAP[_UnpickleableError]; //@line 2746 "cPickle.c"
        var $455=HEAP[$args_addr]; //@line 2746 "cPickle.c"
        _PyErr_SetObject($454, $455); //@line 2746 "cPickle.c"
        __label__ = 118; break; //@line 2746 "cPickle.c"
      case 112: // $bb111
        var $456=HEAP[$t]; //@line 2752 "cPickle.c"
        var $457=($456)==0; //@line 2752 "cPickle.c"
        if ($457) { __label__ = 118; break; } else { __label__ = 113; break; } //@line 2752 "cPickle.c"
      case 113: // $bb112
        var $458=HEAP[$t]; //@line 2755 "cPickle.c"
        var $459=(($458+4)&4294967295); //@line 2755 "cPickle.c"
        var $460=HEAP[$459]; //@line 2755 "cPickle.c"
        var $461=(($460+84)&4294967295); //@line 2755 "cPickle.c"
        var $462=HEAP[$461]; //@line 2755 "cPickle.c"
        var $463=($462) & 134217728; //@line 2755 "cPickle.c"
        var $464=((($463))|0)!=0; //@line 2755 "cPickle.c"
        if ($464) { __label__ = 114; break; } else { __label__ = 115; break; } //@line 2755 "cPickle.c"
      case 114: // $bb113
        var $465=HEAP[$self_addr]; //@line 2756 "cPickle.c"
        var $466=HEAP[$args_addr]; //@line 2756 "cPickle.c"
        var $467=HEAP[$t]; //@line 2756 "cPickle.c"
        var $468=_save_global($465, $466, $467); //@line 2756 "cPickle.c"
        HEAP[$res]=$468; //@line 2756 "cPickle.c"
        __label__ = 118; break; //@line 2756 "cPickle.c"
      case 115: // $bb114
        var $469=HEAP[$t]; //@line 2760 "cPickle.c"
        var $470=(($469+4)&4294967295); //@line 2760 "cPickle.c"
        var $471=HEAP[$470]; //@line 2760 "cPickle.c"
        var $472=(($471+84)&4294967295); //@line 2760 "cPickle.c"
        var $473=HEAP[$472]; //@line 2760 "cPickle.c"
        var $474=($473) & 67108864; //@line 2760 "cPickle.c"
        var $475=((($474))|0)==0; //@line 2760 "cPickle.c"
        if ($475) { __label__ = 116; break; } else { __label__ = 117; break; } //@line 2760 "cPickle.c"
      case 116: // $bb115
        var $476=HEAP[_PicklingError]; //@line 2761 "cPickle.c"
        var $477=HEAP[$__reduce__]; //@line 2761 "cPickle.c"
        var $478=_cPickle_ErrFormat($476, ((__str47)&4294967295), ((__str36)&4294967295), allocate([$477,0,0,0], ["%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 2761 "cPickle.c"
        __label__ = 118; break; //@line 2761 "cPickle.c"
      case 117: // $bb116
        var $479=HEAP[$self_addr]; //@line 2767 "cPickle.c"
        var $480=HEAP[$t]; //@line 2767 "cPickle.c"
        var $481=HEAP[$__reduce__]; //@line 2767 "cPickle.c"
        var $482=HEAP[$args_addr]; //@line 2767 "cPickle.c"
        var $483=_save_reduce($479, $480, $481, $482); //@line 2767 "cPickle.c"
        HEAP[$res]=$483; //@line 2767 "cPickle.c"
        __label__ = 118; break; //@line 2769 "cPickle.c"
      case 118: // $finally
        var $484=HEAP[__PyThreadState_Current]; //@line 2770 "cPickle.c"
        var $485=(($484+12)&4294967295); //@line 2770 "cPickle.c"
        var $486=HEAP[$485]; //@line 2770 "cPickle.c"
        var $487=((($486) - 1)&4294967295); //@line 2770 "cPickle.c"
        var $488=(($484+12)&4294967295); //@line 2770 "cPickle.c"
        HEAP[$488]=$487; //@line 2770 "cPickle.c"
        var $489=HEAP[$py_ob_id]; //@line 2771 "cPickle.c"
        var $490=($489)!=0; //@line 2771 "cPickle.c"
        if ($490) { __label__ = 119; break; } else { __label__ = 121; break; } //@line 2771 "cPickle.c"
      case 119: // $bb117
        var $491=HEAP[$py_ob_id]; //@line 2771 "cPickle.c"
        var $492=(($491)&4294967295); //@line 2771 "cPickle.c"
        var $493=HEAP[$492]; //@line 2771 "cPickle.c"
        var $494=((($493) - 1)&4294967295); //@line 2771 "cPickle.c"
        var $495=HEAP[$py_ob_id]; //@line 2771 "cPickle.c"
        var $496=(($495)&4294967295); //@line 2771 "cPickle.c"
        HEAP[$496]=$494; //@line 2771 "cPickle.c"
        var $497=HEAP[$py_ob_id]; //@line 2771 "cPickle.c"
        var $498=(($497)&4294967295); //@line 2771 "cPickle.c"
        var $499=HEAP[$498]; //@line 2771 "cPickle.c"
        var $500=((($499))|0)==0; //@line 2771 "cPickle.c"
        if ($500) { __label__ = 120; break; } else { __label__ = 121; break; } //@line 2771 "cPickle.c"
      case 120: // $bb118
        var $501=HEAP[$py_ob_id]; //@line 2771 "cPickle.c"
        var $502=(($501+4)&4294967295); //@line 2771 "cPickle.c"
        var $503=HEAP[$502]; //@line 2771 "cPickle.c"
        var $504=(($503+24)&4294967295); //@line 2771 "cPickle.c"
        var $505=HEAP[$504]; //@line 2771 "cPickle.c"
        var $506=HEAP[$py_ob_id]; //@line 2771 "cPickle.c"
        FUNCTION_TABLE[$505]($506); //@line 2771 "cPickle.c"
        __label__ = 121; break; //@line 2771 "cPickle.c"
      case 121: // $bb119
        var $507=HEAP[$__reduce__]; //@line 2772 "cPickle.c"
        var $508=($507)!=0; //@line 2772 "cPickle.c"
        if ($508) { __label__ = 122; break; } else { __label__ = 124; break; } //@line 2772 "cPickle.c"
      case 122: // $bb120
        var $509=HEAP[$__reduce__]; //@line 2772 "cPickle.c"
        var $510=(($509)&4294967295); //@line 2772 "cPickle.c"
        var $511=HEAP[$510]; //@line 2772 "cPickle.c"
        var $512=((($511) - 1)&4294967295); //@line 2772 "cPickle.c"
        var $513=HEAP[$__reduce__]; //@line 2772 "cPickle.c"
        var $514=(($513)&4294967295); //@line 2772 "cPickle.c"
        HEAP[$514]=$512; //@line 2772 "cPickle.c"
        var $515=HEAP[$__reduce__]; //@line 2772 "cPickle.c"
        var $516=(($515)&4294967295); //@line 2772 "cPickle.c"
        var $517=HEAP[$516]; //@line 2772 "cPickle.c"
        var $518=((($517))|0)==0; //@line 2772 "cPickle.c"
        if ($518) { __label__ = 123; break; } else { __label__ = 124; break; } //@line 2772 "cPickle.c"
      case 123: // $bb121
        var $519=HEAP[$__reduce__]; //@line 2772 "cPickle.c"
        var $520=(($519+4)&4294967295); //@line 2772 "cPickle.c"
        var $521=HEAP[$520]; //@line 2772 "cPickle.c"
        var $522=(($521+24)&4294967295); //@line 2772 "cPickle.c"
        var $523=HEAP[$522]; //@line 2772 "cPickle.c"
        var $524=HEAP[$__reduce__]; //@line 2772 "cPickle.c"
        FUNCTION_TABLE[$523]($524); //@line 2772 "cPickle.c"
        __label__ = 124; break; //@line 2772 "cPickle.c"
      case 124: // $bb122
        var $525=HEAP[$t]; //@line 2773 "cPickle.c"
        var $526=($525)!=0; //@line 2773 "cPickle.c"
        if ($526) { __label__ = 125; break; } else { __label__ = 127; break; } //@line 2773 "cPickle.c"
      case 125: // $bb123
        var $527=HEAP[$t]; //@line 2773 "cPickle.c"
        var $528=(($527)&4294967295); //@line 2773 "cPickle.c"
        var $529=HEAP[$528]; //@line 2773 "cPickle.c"
        var $530=((($529) - 1)&4294967295); //@line 2773 "cPickle.c"
        var $531=HEAP[$t]; //@line 2773 "cPickle.c"
        var $532=(($531)&4294967295); //@line 2773 "cPickle.c"
        HEAP[$532]=$530; //@line 2773 "cPickle.c"
        var $533=HEAP[$t]; //@line 2773 "cPickle.c"
        var $534=(($533)&4294967295); //@line 2773 "cPickle.c"
        var $535=HEAP[$534]; //@line 2773 "cPickle.c"
        var $536=((($535))|0)==0; //@line 2773 "cPickle.c"
        if ($536) { __label__ = 126; break; } else { __label__ = 127; break; } //@line 2773 "cPickle.c"
      case 126: // $bb124
        var $537=HEAP[$t]; //@line 2773 "cPickle.c"
        var $538=(($537+4)&4294967295); //@line 2773 "cPickle.c"
        var $539=HEAP[$538]; //@line 2773 "cPickle.c"
        var $540=(($539+24)&4294967295); //@line 2773 "cPickle.c"
        var $541=HEAP[$540]; //@line 2773 "cPickle.c"
        var $542=HEAP[$t]; //@line 2773 "cPickle.c"
        FUNCTION_TABLE[$541]($542); //@line 2773 "cPickle.c"
        __label__ = 127; break; //@line 2773 "cPickle.c"
      case 127: // $bb125
        var $543=HEAP[$res]; //@line 2775 "cPickle.c"
        HEAP[$0]=$543; //@line 2775 "cPickle.c"
        __label__ = 128; break; //@line 2775 "cPickle.c"
      case 128: // $bb126
        var $544=HEAP[$0]; //@line 2537 "cPickle.c"
        HEAP[$retval]=$544; //@line 2537 "cPickle.c"
        __label__ = 129; break; //@line 2537 "cPickle.c"
      case 129: // $return
        var $retval127=HEAP[$retval]; //@line 2537 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval127; //@line 2537 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _dump($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 18; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 18);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $bytes=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 2784 "cPickle.c"
        var $2=(($1+36)&4294967295); //@line 2784 "cPickle.c"
        var $3=HEAP[$2]; //@line 2784 "cPickle.c"
        var $4=((($3))|0) > 1; //@line 2784 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 6; break; } //@line 2784 "cPickle.c"
      case 1: // $bb
        var $5=(($bytes)&4294967295); //@line 2787 "cPickle.c"
        HEAP[$5]=-128; //@line 2787 "cPickle.c"
        var $6=HEAP[$self_addr]; //@line 2788 "cPickle.c"
        var $7=(($6+36)&4294967295); //@line 2788 "cPickle.c"
        var $8=HEAP[$7]; //@line 2788 "cPickle.c"
        var $9=((($8))|0) < 0; //@line 2788 "cPickle.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 2788 "cPickle.c"
      case 2: // $bb1
        var $10=HEAP[$self_addr]; //@line 2788 "cPickle.c"
        var $11=(($10+36)&4294967295); //@line 2788 "cPickle.c"
        var $12=HEAP[$11]; //@line 2788 "cPickle.c"
        var $13=((($12))|0) > 255; //@line 2788 "cPickle.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 2788 "cPickle.c"
      case 3: // $bb2
        ___assert_fail(((__str48)&4294967295), ((__str15)&4294967295), 2788, ((___PRETTY_FUNCTION___11692)&4294967295)); //@line 2788 "cPickle.c"
        throw "Reached an unreachable! Original .ll line: 10950"; //@line 2788 "cPickle.c"
      case 4: // $bb3
        var $14=HEAP[$self_addr]; //@line 2789 "cPickle.c"
        var $15=(($14+36)&4294967295); //@line 2789 "cPickle.c"
        var $16=HEAP[$15]; //@line 2789 "cPickle.c"
        var $17=((($16)) & 255); //@line 2789 "cPickle.c"
        var $18=(($bytes+1)&4294967295); //@line 2789 "cPickle.c"
        HEAP[$18]=$17; //@line 2789 "cPickle.c"
        var $19=HEAP[$self_addr]; //@line 2790 "cPickle.c"
        var $20=(($19+48)&4294967295); //@line 2790 "cPickle.c"
        var $21=HEAP[$20]; //@line 2790 "cPickle.c"
        var $22=HEAP[$self_addr]; //@line 2790 "cPickle.c"
        var $bytes4=$bytes; //@line 2790 "cPickle.c"
        var $23=FUNCTION_TABLE[$21]($22, $bytes4, 2); //@line 2790 "cPickle.c"
        var $24=((($23))|0) < 0; //@line 2790 "cPickle.c"
        if ($24) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 2790 "cPickle.c"
      case 5: // $bb5
        HEAP[$0]=-1; //@line 2791 "cPickle.c"
        __label__ = 13; break; //@line 2791 "cPickle.c"
      case 6: // $bb6
        var $25=HEAP[$self_addr]; //@line 2794 "cPickle.c"
        var $26=HEAP[$args_addr]; //@line 2794 "cPickle.c"
        var $27=_save($25, $26, 0); //@line 2794 "cPickle.c"
        var $28=((($27))|0) < 0; //@line 2794 "cPickle.c"
        if ($28) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 2794 "cPickle.c"
      case 7: // $bb7
        HEAP[$0]=-1; //@line 2795 "cPickle.c"
        __label__ = 13; break; //@line 2795 "cPickle.c"
      case 8: // $bb8
        var $29=HEAP[$self_addr]; //@line 2797 "cPickle.c"
        var $30=(($29+48)&4294967295); //@line 2797 "cPickle.c"
        var $31=HEAP[$30]; //@line 2797 "cPickle.c"
        var $32=HEAP[$self_addr]; //@line 2797 "cPickle.c"
        var $33=FUNCTION_TABLE[$31]($32, _stop_11690, 1); //@line 2797 "cPickle.c"
        var $34=((($33))|0) < 0; //@line 2797 "cPickle.c"
        if ($34) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 2797 "cPickle.c"
      case 9: // $bb9
        HEAP[$0]=-1; //@line 2798 "cPickle.c"
        __label__ = 13; break; //@line 2798 "cPickle.c"
      case 10: // $bb10
        var $35=HEAP[$self_addr]; //@line 2800 "cPickle.c"
        var $36=(($35+48)&4294967295); //@line 2800 "cPickle.c"
        var $37=HEAP[$36]; //@line 2800 "cPickle.c"
        var $38=HEAP[$self_addr]; //@line 2800 "cPickle.c"
        var $39=FUNCTION_TABLE[$37]($38, 0, 0); //@line 2800 "cPickle.c"
        var $40=((($39))|0) < 0; //@line 2800 "cPickle.c"
        if ($40) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 2800 "cPickle.c"
      case 11: // $bb11
        HEAP[$0]=-1; //@line 2801 "cPickle.c"
        __label__ = 13; break; //@line 2801 "cPickle.c"
      case 12: // $bb12
        HEAP[$0]=0; //@line 2803 "cPickle.c"
        __label__ = 13; break; //@line 2803 "cPickle.c"
      case 13: // $bb13
        var $41=HEAP[$0]; //@line 2791 "cPickle.c"
        HEAP[$retval]=$41; //@line 2791 "cPickle.c"
        __label__ = 14; break; //@line 2791 "cPickle.c"
      case 14: // $return
        var $retval14=HEAP[$retval]; //@line 2791 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval14; //@line 2791 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickle_clear_memo($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$self_addr]; //@line 2809 "cPickle.c"
        var $2=(($1+20)&4294967295); //@line 2809 "cPickle.c"
        var $3=HEAP[$2]; //@line 2809 "cPickle.c"
        var $4=($3)!=0; //@line 2809 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2809 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 2810 "cPickle.c"
        var $6=(($5+20)&4294967295); //@line 2810 "cPickle.c"
        var $7=HEAP[$6]; //@line 2810 "cPickle.c"
        _PyDict_Clear($7); //@line 2810 "cPickle.c"
        __label__ = 2; break; //@line 2810 "cPickle.c"
      case 2: // $bb1
        var $8=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 2811 "cPickle.c"
        var $9=((($8) + 1)&4294967295); //@line 2811 "cPickle.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$9; //@line 2811 "cPickle.c"
        HEAP[$0]=__Py_NoneStruct; //@line 2812 "cPickle.c"
        var $10=HEAP[$0]; //@line 2812 "cPickle.c"
        HEAP[$retval]=$10; //@line 2812 "cPickle.c"
        __label__ = 3; break; //@line 2812 "cPickle.c"
      case 3: // $return
        var $retval2=HEAP[$retval]; //@line 2812 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval2; //@line 2812 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickle_getvalue($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 76; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 76);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $iftmp_222=__stackBase__+12;
        var $iftmp_216=__stackBase__+16;
        var $0=__stackBase__+20;
        var $l=__stackBase__+24;
        var $i=__stackBase__+28;
        var $rsize=__stackBase__+32;
        var $ssize=__stackBase__+36;
        var $clear=__stackBase__+40;
        var $lm=__stackBase__+44;
        var $ik=__stackBase__+48;
        var $k=__stackBase__+52;
        var $r=__stackBase__+56;
        var $s=__stackBase__+60;
        var $p=__stackBase__+64;
        var $have_get=__stackBase__+68;
        var $data=__stackBase__+72;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$clear]=1; //@line 2818 "cPickle.c"
        var $1=HEAP[$args_addr]; //@line 2825 "cPickle.c"
        var $2=($1)!=0; //@line 2825 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 2825 "cPickle.c"
      case 1: // $bb
        var $3=HEAP[$args_addr]; //@line 2825 "cPickle.c"
        var $4=_PyArg_ParseTuple($3, ((__str49)&4294967295), $clear); //@line 2825 "cPickle.c"
        var $5=((($4))|0)==0; //@line 2825 "cPickle.c"
        if ($5) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2825 "cPickle.c"
      case 2: // $bb1
        HEAP[$0]=0; //@line 2826 "cPickle.c"
        __label__ = 59; break; //@line 2826 "cPickle.c"
      case 3: // $bb2
        var $6=HEAP[$self_addr]; //@line 2829 "cPickle.c"
        var $7=(($6+16)&4294967295); //@line 2829 "cPickle.c"
        var $8=HEAP[$7]; //@line 2829 "cPickle.c"
        var $9=(($8+4)&4294967295); //@line 2829 "cPickle.c"
        var $10=HEAP[$9]; //@line 2829 "cPickle.c"
        var $11=($10)!=(_PdataType); //@line 2829 "cPickle.c"
        if ($11) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 2829 "cPickle.c"
      case 4: // $bb3
        var $12=HEAP[_PicklingError]; //@line 2830 "cPickle.c"
        _PyErr_SetString($12, ((__str50)&4294967295)); //@line 2830 "cPickle.c"
        HEAP[$0]=0; //@line 2832 "cPickle.c"
        __label__ = 59; break; //@line 2832 "cPickle.c"
      case 5: // $bb4
        var $13=HEAP[$self_addr]; //@line 2836 "cPickle.c"
        var $14=_write_other($13, 0, 0); //@line 2836 "cPickle.c"
        var $15=((($14))|0) < 0; //@line 2836 "cPickle.c"
        if ($15) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 2836 "cPickle.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 2836 "cPickle.c"
        __label__ = 59; break; //@line 2836 "cPickle.c"
      case 7: // $bb6
        var $16=HEAP[$self_addr]; //@line 2838 "cPickle.c"
        var $17=(($16+16)&4294967295); //@line 2838 "cPickle.c"
        var $18=HEAP[$17]; //@line 2838 "cPickle.c"
        var $19=$18; //@line 2838 "cPickle.c"
        HEAP[$data]=$19; //@line 2838 "cPickle.c"
        var $20=HEAP[$data]; //@line 2839 "cPickle.c"
        var $21=(($20+8)&4294967295); //@line 2839 "cPickle.c"
        var $22=HEAP[$21]; //@line 2839 "cPickle.c"
        HEAP[$l]=$22; //@line 2839 "cPickle.c"
        var $23=HEAP[$self_addr]; //@line 2842 "cPickle.c"
        var $24=(($23+20)&4294967295); //@line 2842 "cPickle.c"
        var $25=HEAP[$24]; //@line 2842 "cPickle.c"
        var $26=_PyDict_Size($25); //@line 2842 "cPickle.c"
        HEAP[$lm]=$26; //@line 2842 "cPickle.c"
        var $27=HEAP[$lm]; //@line 2843 "cPickle.c"
        var $28=((($27))|0) < 0; //@line 2843 "cPickle.c"
        if ($28) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 2843 "cPickle.c"
      case 8: // $bb7
        HEAP[$0]=0; //@line 2843 "cPickle.c"
        __label__ = 59; break; //@line 2843 "cPickle.c"
      case 9: // $bb8
        var $29=HEAP[$lm]; //@line 2844 "cPickle.c"
        var $30=((($29) + 1)&4294967295); //@line 2844 "cPickle.c"
        HEAP[$lm]=$30; //@line 2844 "cPickle.c"
        var $31=HEAP[$lm]; //@line 2845 "cPickle.c"
        var $32=_malloc($31); //@line 2845 "cPickle.c"
        HEAP[$have_get]=$32; //@line 2845 "cPickle.c"
        var $33=HEAP[$have_get]; //@line 2846 "cPickle.c"
        var $34=($33)==0; //@line 2846 "cPickle.c"
        if ($34) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 2846 "cPickle.c"
      case 10: // $bb9
        var $35=_PyErr_NoMemory(); //@line 2846 "cPickle.c"
        HEAP[$0]=$35; //@line 2846 "cPickle.c"
        __label__ = 59; break; //@line 2846 "cPickle.c"
      case 11: // $bb10
        var $36=HEAP[$lm]; //@line 2847 "cPickle.c"
        var $37=HEAP[$have_get]; //@line 2847 "cPickle.c"
        _llvm_memset_p0i8_i32($37, 0, $36, 1, 0); //@line 2847 "cPickle.c"
        HEAP[$rsize]=0; //@line 2850 "cPickle.c"
        var $38=HEAP[$l]; //@line 2850 "cPickle.c"
        HEAP[$i]=$38; //@line 2850 "cPickle.c"
        __label__ = 35; break; //@line 2850 "cPickle.c"
      case 12: // $bb11
        var $39=HEAP[$data]; //@line 2851 "cPickle.c"
        var $40=(($39+16)&4294967295); //@line 2851 "cPickle.c"
        var $41=HEAP[$40]; //@line 2851 "cPickle.c"
        var $42=HEAP[$i]; //@line 2851 "cPickle.c"
        var $43=(($41+4*$42)&4294967295); //@line 2851 "cPickle.c"
        var $44=HEAP[$43]; //@line 2851 "cPickle.c"
        HEAP[$k]=$44; //@line 2851 "cPickle.c"
        var $45=HEAP[$k]; //@line 2853 "cPickle.c"
        var $46=(($45+4)&4294967295); //@line 2853 "cPickle.c"
        var $47=HEAP[$46]; //@line 2853 "cPickle.c"
        var $48=(($47+84)&4294967295); //@line 2853 "cPickle.c"
        var $49=HEAP[$48]; //@line 2853 "cPickle.c"
        var $50=($49) & 134217728; //@line 2853 "cPickle.c"
        var $51=((($50))|0)!=0; //@line 2853 "cPickle.c"
        if ($51) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 2853 "cPickle.c"
      case 13: // $bb12
        var $52=HEAP[$k]; //@line 2854 "cPickle.c"
        var $53=$52; //@line 2854 "cPickle.c"
        var $54=(($53+8)&4294967295); //@line 2854 "cPickle.c"
        var $55=HEAP[$54]; //@line 2854 "cPickle.c"
        var $56=HEAP[$rsize]; //@line 2854 "cPickle.c"
        var $57=((($55) + ($56))&4294967295); //@line 2854 "cPickle.c"
        HEAP[$rsize]=$57; //@line 2854 "cPickle.c"
        __label__ = 35; break; //@line 2854 "cPickle.c"
      case 14: // $bb13
        var $58=HEAP[$k]; //@line 2856 "cPickle.c"
        var $59=(($58+4)&4294967295); //@line 2856 "cPickle.c"
        var $60=HEAP[$59]; //@line 2856 "cPickle.c"
        var $61=(($60+84)&4294967295); //@line 2856 "cPickle.c"
        var $62=HEAP[$61]; //@line 2856 "cPickle.c"
        var $63=($62) & 8388608; //@line 2856 "cPickle.c"
        var $64=((($63))|0)!=0; //@line 2856 "cPickle.c"
        if ($64) { __label__ = 15; break; } else { __label__ = 24; break; } //@line 2856 "cPickle.c"
      case 15: // $bb14
        var $65=HEAP[$k]; //@line 2857 "cPickle.c"
        var $66=$65; //@line 2857 "cPickle.c"
        var $67=(($66+8)&4294967295); //@line 2857 "cPickle.c"
        var $68=HEAP[$67]; //@line 2857 "cPickle.c"
        HEAP[$ik]=$68; //@line 2857 "cPickle.c"
        var $69=HEAP[$ik]; //@line 2858 "cPickle.c"
        var $70=HEAP[$lm]; //@line 2858 "cPickle.c"
        var $71=((($69))|0) >= ((($70))|0); //@line 2858 "cPickle.c"
        if ($71) { __label__ = 17; break; } else { __label__ = 16; break; } //@line 2858 "cPickle.c"
      case 16: // $bb15
        var $72=HEAP[$ik]; //@line 2858 "cPickle.c"
        var $73=((($72))|0)==0; //@line 2858 "cPickle.c"
        if ($73) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 2858 "cPickle.c"
      case 17: // $bb16
        var $74=HEAP[_PicklingError]; //@line 2859 "cPickle.c"
        _PyErr_SetString($74, ((__str51)&4294967295)); //@line 2859 "cPickle.c"
        __label__ = 58; break; //@line 2859 "cPickle.c"
      case 18: // $bb17
        var $75=HEAP[$have_get]; //@line 2863 "cPickle.c"
        var $76=HEAP[$ik]; //@line 2863 "cPickle.c"
        var $77=(($75+$76)&4294967295); //@line 2863 "cPickle.c"
        var $78=HEAP[$77]; //@line 2863 "cPickle.c"
        var $79=reSign(($78), 8, 0)!=0; //@line 2863 "cPickle.c"
        if ($79) { __label__ = 19; break; } else { __label__ = 23; break; } //@line 2863 "cPickle.c"
      case 19: // $bb18
        var $80=HEAP[$ik]; //@line 2864 "cPickle.c"
        var $81=((($80))|0) <= 255; //@line 2864 "cPickle.c"
        if ($81) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 2864 "cPickle.c"
      case 20: // $bb19
        HEAP[$iftmp_216]=2; //@line 2864 "cPickle.c"
        __label__ = 22; break; //@line 2864 "cPickle.c"
      case 21: // $bb20
        HEAP[$iftmp_216]=5; //@line 2864 "cPickle.c"
        __label__ = 22; break; //@line 2864 "cPickle.c"
      case 22: // $bb21
        var $82=HEAP[$iftmp_216]; //@line 2864 "cPickle.c"
        var $83=HEAP[$rsize]; //@line 2864 "cPickle.c"
        var $84=((($82) + ($83))&4294967295); //@line 2864 "cPickle.c"
        HEAP[$rsize]=$84; //@line 2864 "cPickle.c"
        __label__ = 23; break; //@line 2864 "cPickle.c"
      case 23: // $bb22
        __label__ = 35; break; //@line 2864 "cPickle.c"
      case 24: // $bb23
        var $85=HEAP[$k]; //@line 2867 "cPickle.c"
        var $86=(($85+4)&4294967295); //@line 2867 "cPickle.c"
        var $87=HEAP[$86]; //@line 2867 "cPickle.c"
        var $88=(($87+84)&4294967295); //@line 2867 "cPickle.c"
        var $89=HEAP[$88]; //@line 2867 "cPickle.c"
        var $90=($89) & 67108864; //@line 2867 "cPickle.c"
        var $91=((($90))|0)==0; //@line 2867 "cPickle.c"
        if ($91) { __label__ = 27; break; } else { __label__ = 25; break; } //@line 2867 "cPickle.c"
      case 25: // $bb24
        var $92=HEAP[$k]; //@line 2867 "cPickle.c"
        var $93=$92; //@line 2867 "cPickle.c"
        var $94=(($93+8)&4294967295); //@line 2867 "cPickle.c"
        var $95=HEAP[$94]; //@line 2867 "cPickle.c"
        var $96=((($95))|0)!=2; //@line 2867 "cPickle.c"
        if ($96) { __label__ = 27; break; } else { __label__ = 26; break; } //@line 2867 "cPickle.c"
      case 26: // $bb25
        var $97=HEAP[$k]; //@line 2867 "cPickle.c"
        var $98=$97; //@line 2867 "cPickle.c"
        var $99=(($98+12)&4294967295); //@line 2867 "cPickle.c"
        var $100=(($99)&4294967295); //@line 2867 "cPickle.c"
        var $101=HEAP[$100]; //@line 2867 "cPickle.c"
        HEAP[$k]=$101; //@line 2867 "cPickle.c"
        var $102=HEAP[$k]; //@line 2867 "cPickle.c"
        var $103=(($102+4)&4294967295); //@line 2867 "cPickle.c"
        var $104=HEAP[$103]; //@line 2867 "cPickle.c"
        var $105=(($104+84)&4294967295); //@line 2867 "cPickle.c"
        var $106=HEAP[$105]; //@line 2867 "cPickle.c"
        var $107=($106) & 8388608; //@line 2867 "cPickle.c"
        var $108=((($107))|0)==0; //@line 2867 "cPickle.c"
        if ($108) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 2867 "cPickle.c"
      case 27: // $bb26
        var $109=HEAP[_PicklingError]; //@line 2871 "cPickle.c"
        _PyErr_SetString($109, ((__str52)&4294967295)); //@line 2871 "cPickle.c"
        __label__ = 58; break; //@line 2871 "cPickle.c"
      case 28: // $bb27
        var $110=HEAP[$k]; //@line 2877 "cPickle.c"
        var $111=$110; //@line 2877 "cPickle.c"
        var $112=(($111+8)&4294967295); //@line 2877 "cPickle.c"
        var $113=HEAP[$112]; //@line 2877 "cPickle.c"
        HEAP[$ik]=$113; //@line 2877 "cPickle.c"
        var $114=HEAP[$ik]; //@line 2878 "cPickle.c"
        var $115=HEAP[$lm]; //@line 2878 "cPickle.c"
        var $116=((($114))|0) >= ((($115))|0); //@line 2878 "cPickle.c"
        if ($116) { __label__ = 30; break; } else { __label__ = 29; break; } //@line 2878 "cPickle.c"
      case 29: // $bb28
        var $117=HEAP[$ik]; //@line 2878 "cPickle.c"
        var $118=((($117))|0)==0; //@line 2878 "cPickle.c"
        if ($118) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 2878 "cPickle.c"
      case 30: // $bb29
        var $119=HEAP[_PicklingError]; //@line 2879 "cPickle.c"
        _PyErr_SetString($119, ((__str51)&4294967295)); //@line 2879 "cPickle.c"
        HEAP[$0]=0; //@line 2881 "cPickle.c"
        __label__ = 59; break; //@line 2881 "cPickle.c"
      case 31: // $bb30
        var $120=HEAP[$have_get]; //@line 2883 "cPickle.c"
        var $121=HEAP[$ik]; //@line 2883 "cPickle.c"
        var $122=(($120+$121)&4294967295); //@line 2883 "cPickle.c"
        HEAP[$122]=1; //@line 2883 "cPickle.c"
        var $123=HEAP[$ik]; //@line 2884 "cPickle.c"
        var $124=((($123))|0) <= 255; //@line 2884 "cPickle.c"
        if ($124) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 2884 "cPickle.c"
      case 32: // $bb31
        HEAP[$iftmp_222]=2; //@line 2884 "cPickle.c"
        __label__ = 34; break; //@line 2884 "cPickle.c"
      case 33: // $bb32
        HEAP[$iftmp_222]=5; //@line 2884 "cPickle.c"
        __label__ = 34; break; //@line 2884 "cPickle.c"
      case 34: // $bb33
        var $125=HEAP[$iftmp_222]; //@line 2884 "cPickle.c"
        var $126=HEAP[$rsize]; //@line 2884 "cPickle.c"
        var $127=((($125) + ($126))&4294967295); //@line 2884 "cPickle.c"
        HEAP[$rsize]=$127; //@line 2884 "cPickle.c"
        __label__ = 35; break; //@line 2884 "cPickle.c"
      case 35: // $bb34
        var $128=HEAP[$i]; //@line 2850 "cPickle.c"
        var $129=((($128) - 1)&4294967295); //@line 2850 "cPickle.c"
        HEAP[$i]=$129; //@line 2850 "cPickle.c"
        var $130=HEAP[$i]; //@line 2850 "cPickle.c"
        var $131=((($130))|0) >= 0; //@line 2850 "cPickle.c"
        if ($131) { __label__ = 12; break; } else { __label__ = 36; break; } //@line 2850 "cPickle.c"
      case 36: // $bb35
        var $132=HEAP[$rsize]; //@line 2889 "cPickle.c"
        var $133=_PyString_FromStringAndSize(0, $132); //@line 2889 "cPickle.c"
        HEAP[$r]=$133; //@line 2889 "cPickle.c"
        var $134=HEAP[$r]; //@line 2890 "cPickle.c"
        var $135=($134)==0; //@line 2890 "cPickle.c"
        if ($135) { __label__ = 58; break; } else { __label__ = 37; break; } //@line 2890 "cPickle.c"
      case 37: // $bb36
        var $136=HEAP[$r]; //@line 2891 "cPickle.c"
        var $137=$136; //@line 2891 "cPickle.c"
        var $138=(($137+20)&4294967295); //@line 2891 "cPickle.c"
        var $139=(($138)&4294967295); //@line 2891 "cPickle.c"
        HEAP[$s]=$139; //@line 2891 "cPickle.c"
        HEAP[$i]=0; //@line 2893 "cPickle.c"
        __label__ = 54; break; //@line 2893 "cPickle.c"
      case 38: // $bb37
        var $140=HEAP[$data]; //@line 2894 "cPickle.c"
        var $141=(($140+16)&4294967295); //@line 2894 "cPickle.c"
        var $142=HEAP[$141]; //@line 2894 "cPickle.c"
        var $143=HEAP[$i]; //@line 2894 "cPickle.c"
        var $144=(($142+4*$143)&4294967295); //@line 2894 "cPickle.c"
        var $145=HEAP[$144]; //@line 2894 "cPickle.c"
        HEAP[$k]=$145; //@line 2894 "cPickle.c"
        var $146=HEAP[$k]; //@line 2896 "cPickle.c"
        var $147=(($146+4)&4294967295); //@line 2896 "cPickle.c"
        var $148=HEAP[$147]; //@line 2896 "cPickle.c"
        var $149=(($148+84)&4294967295); //@line 2896 "cPickle.c"
        var $150=HEAP[$149]; //@line 2896 "cPickle.c"
        var $151=($150) & 134217728; //@line 2896 "cPickle.c"
        var $152=((($151))|0)!=0; //@line 2896 "cPickle.c"
        if ($152) { __label__ = 39; break; } else { __label__ = 44; break; } //@line 2896 "cPickle.c"
      case 39: // $bb38
        var $153=HEAP[$k]; //@line 2897 "cPickle.c"
        var $154=$153; //@line 2897 "cPickle.c"
        var $155=(($154+8)&4294967295); //@line 2897 "cPickle.c"
        var $156=HEAP[$155]; //@line 2897 "cPickle.c"
        HEAP[$ssize]=$156; //@line 2897 "cPickle.c"
        var $157=HEAP[$ssize]; //@line 2898 "cPickle.c"
        var $158=((($157))|0)!=0; //@line 2898 "cPickle.c"
        if ($158) { __label__ = 40; break; } else { __label__ = 43; break; } //@line 2898 "cPickle.c"
      case 40: // $bb39
        var $159=HEAP[$k]; //@line 2899 "cPickle.c"
        var $160=$159; //@line 2899 "cPickle.c"
        var $161=(($160+20)&4294967295); //@line 2899 "cPickle.c"
        var $162=(($161)&4294967295); //@line 2899 "cPickle.c"
        HEAP[$p]=$162; //@line 2899 "cPickle.c"
        __label__ = 42; break; //@line 2899 "cPickle.c"
      case 41: // $bb40
        var $163=HEAP[$p]; //@line 2901 "cPickle.c"
        var $164=HEAP[$163]; //@line 2901 "cPickle.c"
        var $165=HEAP[$s]; //@line 2901 "cPickle.c"
        HEAP[$165]=$164; //@line 2901 "cPickle.c"
        var $166=HEAP[$s]; //@line 2901 "cPickle.c"
        var $167=(($166+1)&4294967295); //@line 2901 "cPickle.c"
        HEAP[$s]=$167; //@line 2901 "cPickle.c"
        var $168=HEAP[$p]; //@line 2901 "cPickle.c"
        var $169=(($168+1)&4294967295); //@line 2901 "cPickle.c"
        HEAP[$p]=$169; //@line 2901 "cPickle.c"
        __label__ = 42; break; //@line 2901 "cPickle.c"
      case 42: // $bb41
        var $170=HEAP[$ssize]; //@line 2900 "cPickle.c"
        var $171=((($170) - 1)&4294967295); //@line 2900 "cPickle.c"
        HEAP[$ssize]=$171; //@line 2900 "cPickle.c"
        var $172=HEAP[$ssize]; //@line 2900 "cPickle.c"
        var $173=((($172))|0) >= 0; //@line 2900 "cPickle.c"
        if ($173) { __label__ = 41; break; } else { __label__ = 43; break; } //@line 2900 "cPickle.c"
      case 43: // $bb42
        __label__ = 53; break; //@line 2900 "cPickle.c"
      case 44: // $bb43
        var $174=HEAP[$k]; //@line 2905 "cPickle.c"
        var $175=(($174+4)&4294967295); //@line 2905 "cPickle.c"
        var $176=HEAP[$175]; //@line 2905 "cPickle.c"
        var $177=(($176+84)&4294967295); //@line 2905 "cPickle.c"
        var $178=HEAP[$177]; //@line 2905 "cPickle.c"
        var $179=($178) & 67108864; //@line 2905 "cPickle.c"
        var $180=((($179))|0)!=0; //@line 2905 "cPickle.c"
        if ($180) { __label__ = 45; break; } else { __label__ = 49; break; } //@line 2905 "cPickle.c"
      case 45: // $bb44
        var $181=HEAP[$k]; //@line 2906 "cPickle.c"
        var $182=$181; //@line 2906 "cPickle.c"
        var $183=(($182+12)&4294967295); //@line 2906 "cPickle.c"
        var $184=(($183)&4294967295); //@line 2906 "cPickle.c"
        var $185=HEAP[$184]; //@line 2906 "cPickle.c"
        var $186=$185; //@line 2906 "cPickle.c"
        var $187=(($186+8)&4294967295); //@line 2906 "cPickle.c"
        var $188=HEAP[$187]; //@line 2906 "cPickle.c"
        HEAP[$ik]=$188; //@line 2906 "cPickle.c"
        var $189=HEAP[$ik]; //@line 2908 "cPickle.c"
        var $190=((($189))|0) <= 255; //@line 2908 "cPickle.c"
        if ($190) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 2908 "cPickle.c"
      case 46: // $bb45
        var $191=HEAP[$s]; //@line 2909 "cPickle.c"
        HEAP[$191]=104; //@line 2909 "cPickle.c"
        var $192=HEAP[$s]; //@line 2909 "cPickle.c"
        var $193=(($192+1)&4294967295); //@line 2909 "cPickle.c"
        HEAP[$s]=$193; //@line 2909 "cPickle.c"
        var $194=HEAP[$ik]; //@line 2910 "cPickle.c"
        var $195=((($194)) & 255); //@line 2910 "cPickle.c"
        var $196=HEAP[$s]; //@line 2910 "cPickle.c"
        HEAP[$196]=$195; //@line 2910 "cPickle.c"
        var $197=HEAP[$s]; //@line 2910 "cPickle.c"
        var $198=(($197+1)&4294967295); //@line 2910 "cPickle.c"
        HEAP[$s]=$198; //@line 2910 "cPickle.c"
        __label__ = 48; break; //@line 2910 "cPickle.c"
      case 47: // $bb46
        var $199=HEAP[$s]; //@line 2913 "cPickle.c"
        HEAP[$199]=106; //@line 2913 "cPickle.c"
        var $200=HEAP[$s]; //@line 2913 "cPickle.c"
        var $201=(($200+1)&4294967295); //@line 2913 "cPickle.c"
        HEAP[$s]=$201; //@line 2913 "cPickle.c"
        var $202=HEAP[$ik]; //@line 2914 "cPickle.c"
        var $203=((($202)) & 255); //@line 2914 "cPickle.c"
        var $204=HEAP[$s]; //@line 2914 "cPickle.c"
        HEAP[$204]=$203; //@line 2914 "cPickle.c"
        var $205=HEAP[$s]; //@line 2914 "cPickle.c"
        var $206=(($205+1)&4294967295); //@line 2914 "cPickle.c"
        HEAP[$s]=$206; //@line 2914 "cPickle.c"
        var $207=HEAP[$ik]; //@line 2915 "cPickle.c"
        var $208=((($207))|0) >> 8; //@line 2915 "cPickle.c"
        var $209=((($208)) & 255); //@line 2915 "cPickle.c"
        var $210=HEAP[$s]; //@line 2915 "cPickle.c"
        HEAP[$210]=$209; //@line 2915 "cPickle.c"
        var $211=HEAP[$s]; //@line 2915 "cPickle.c"
        var $212=(($211+1)&4294967295); //@line 2915 "cPickle.c"
        HEAP[$s]=$212; //@line 2915 "cPickle.c"
        var $213=HEAP[$ik]; //@line 2916 "cPickle.c"
        var $214=((($213))|0) >> 16; //@line 2916 "cPickle.c"
        var $215=((($214)) & 255); //@line 2916 "cPickle.c"
        var $216=HEAP[$s]; //@line 2916 "cPickle.c"
        HEAP[$216]=$215; //@line 2916 "cPickle.c"
        var $217=HEAP[$s]; //@line 2916 "cPickle.c"
        var $218=(($217+1)&4294967295); //@line 2916 "cPickle.c"
        HEAP[$s]=$218; //@line 2916 "cPickle.c"
        var $219=HEAP[$ik]; //@line 2917 "cPickle.c"
        var $220=((($219))|0) >> 24; //@line 2917 "cPickle.c"
        var $221=((($220)) & 255); //@line 2917 "cPickle.c"
        var $222=HEAP[$s]; //@line 2917 "cPickle.c"
        HEAP[$222]=$221; //@line 2917 "cPickle.c"
        var $223=HEAP[$s]; //@line 2917 "cPickle.c"
        var $224=(($223+1)&4294967295); //@line 2917 "cPickle.c"
        HEAP[$s]=$224; //@line 2917 "cPickle.c"
        __label__ = 48; break; //@line 2917 "cPickle.c"
      case 48: // $bb47
        __label__ = 53; break; //@line 2917 "cPickle.c"
      case 49: // $bb48
        var $225=HEAP[$k]; //@line 2922 "cPickle.c"
        var $226=$225; //@line 2922 "cPickle.c"
        var $227=(($226+8)&4294967295); //@line 2922 "cPickle.c"
        var $228=HEAP[$227]; //@line 2922 "cPickle.c"
        HEAP[$ik]=$228; //@line 2922 "cPickle.c"
        var $229=HEAP[$have_get]; //@line 2924 "cPickle.c"
        var $230=HEAP[$ik]; //@line 2924 "cPickle.c"
        var $231=(($229+$230)&4294967295); //@line 2924 "cPickle.c"
        var $232=HEAP[$231]; //@line 2924 "cPickle.c"
        var $233=reSign(($232), 8, 0)!=0; //@line 2924 "cPickle.c"
        if ($233) { __label__ = 50; break; } else { __label__ = 53; break; } //@line 2924 "cPickle.c"
      case 50: // $bb49
        var $234=HEAP[$ik]; //@line 2925 "cPickle.c"
        var $235=((($234))|0) <= 255; //@line 2925 "cPickle.c"
        if ($235) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 2925 "cPickle.c"
      case 51: // $bb50
        var $236=HEAP[$s]; //@line 2926 "cPickle.c"
        HEAP[$236]=113; //@line 2926 "cPickle.c"
        var $237=HEAP[$s]; //@line 2926 "cPickle.c"
        var $238=(($237+1)&4294967295); //@line 2926 "cPickle.c"
        HEAP[$s]=$238; //@line 2926 "cPickle.c"
        var $239=HEAP[$ik]; //@line 2927 "cPickle.c"
        var $240=((($239)) & 255); //@line 2927 "cPickle.c"
        var $241=HEAP[$s]; //@line 2927 "cPickle.c"
        HEAP[$241]=$240; //@line 2927 "cPickle.c"
        var $242=HEAP[$s]; //@line 2927 "cPickle.c"
        var $243=(($242+1)&4294967295); //@line 2927 "cPickle.c"
        HEAP[$s]=$243; //@line 2927 "cPickle.c"
        __label__ = 53; break; //@line 2927 "cPickle.c"
      case 52: // $bb51
        var $244=HEAP[$s]; //@line 2930 "cPickle.c"
        HEAP[$244]=114; //@line 2930 "cPickle.c"
        var $245=HEAP[$s]; //@line 2930 "cPickle.c"
        var $246=(($245+1)&4294967295); //@line 2930 "cPickle.c"
        HEAP[$s]=$246; //@line 2930 "cPickle.c"
        var $247=HEAP[$ik]; //@line 2931 "cPickle.c"
        var $248=((($247)) & 255); //@line 2931 "cPickle.c"
        var $249=HEAP[$s]; //@line 2931 "cPickle.c"
        HEAP[$249]=$248; //@line 2931 "cPickle.c"
        var $250=HEAP[$s]; //@line 2931 "cPickle.c"
        var $251=(($250+1)&4294967295); //@line 2931 "cPickle.c"
        HEAP[$s]=$251; //@line 2931 "cPickle.c"
        var $252=HEAP[$ik]; //@line 2932 "cPickle.c"
        var $253=((($252))|0) >> 8; //@line 2932 "cPickle.c"
        var $254=((($253)) & 255); //@line 2932 "cPickle.c"
        var $255=HEAP[$s]; //@line 2932 "cPickle.c"
        HEAP[$255]=$254; //@line 2932 "cPickle.c"
        var $256=HEAP[$s]; //@line 2932 "cPickle.c"
        var $257=(($256+1)&4294967295); //@line 2932 "cPickle.c"
        HEAP[$s]=$257; //@line 2932 "cPickle.c"
        var $258=HEAP[$ik]; //@line 2933 "cPickle.c"
        var $259=((($258))|0) >> 16; //@line 2933 "cPickle.c"
        var $260=((($259)) & 255); //@line 2933 "cPickle.c"
        var $261=HEAP[$s]; //@line 2933 "cPickle.c"
        HEAP[$261]=$260; //@line 2933 "cPickle.c"
        var $262=HEAP[$s]; //@line 2933 "cPickle.c"
        var $263=(($262+1)&4294967295); //@line 2933 "cPickle.c"
        HEAP[$s]=$263; //@line 2933 "cPickle.c"
        var $264=HEAP[$ik]; //@line 2934 "cPickle.c"
        var $265=((($264))|0) >> 24; //@line 2934 "cPickle.c"
        var $266=((($265)) & 255); //@line 2934 "cPickle.c"
        var $267=HEAP[$s]; //@line 2934 "cPickle.c"
        HEAP[$267]=$266; //@line 2934 "cPickle.c"
        var $268=HEAP[$s]; //@line 2934 "cPickle.c"
        var $269=(($268+1)&4294967295); //@line 2934 "cPickle.c"
        HEAP[$s]=$269; //@line 2934 "cPickle.c"
        __label__ = 53; break; //@line 2934 "cPickle.c"
      case 53: // $bb52
        var $270=HEAP[$i]; //@line 2893 "cPickle.c"
        var $271=((($270) + 1)&4294967295); //@line 2893 "cPickle.c"
        HEAP[$i]=$271; //@line 2893 "cPickle.c"
        __label__ = 54; break; //@line 2893 "cPickle.c"
      case 54: // $bb53
        var $272=HEAP[$i]; //@line 2893 "cPickle.c"
        var $273=HEAP[$l]; //@line 2893 "cPickle.c"
        var $274=((($272))|0) < ((($273))|0); //@line 2893 "cPickle.c"
        if ($274) { __label__ = 38; break; } else { __label__ = 55; break; } //@line 2893 "cPickle.c"
      case 55: // $bb54
        var $275=HEAP[$clear]; //@line 2940 "cPickle.c"
        var $276=((($275))|0)!=0; //@line 2940 "cPickle.c"
        if ($276) { __label__ = 56; break; } else { __label__ = 57; break; } //@line 2940 "cPickle.c"
      case 56: // $bb55
        var $277=HEAP[$self_addr]; //@line 2941 "cPickle.c"
        var $278=(($277+20)&4294967295); //@line 2941 "cPickle.c"
        var $279=HEAP[$278]; //@line 2941 "cPickle.c"
        _PyDict_Clear($279); //@line 2941 "cPickle.c"
        var $280=HEAP[$data]; //@line 2942 "cPickle.c"
        var $281=_Pdata_clear($280, 0); //@line 2942 "cPickle.c"
        __label__ = 57; break; //@line 2942 "cPickle.c"
      case 57: // $bb56
        var $282=HEAP[$have_get]; //@line 2945 "cPickle.c"
        _free($282); //@line 2945 "cPickle.c"
        var $283=HEAP[$r]; //@line 2946 "cPickle.c"
        HEAP[$0]=$283; //@line 2946 "cPickle.c"
        __label__ = 59; break; //@line 2946 "cPickle.c"
      case 58: // $err
        var $284=HEAP[$have_get]; //@line 2948 "cPickle.c"
        _free($284); //@line 2948 "cPickle.c"
        HEAP[$0]=0; //@line 2949 "cPickle.c"
        __label__ = 59; break; //@line 2949 "cPickle.c"
      case 59: // $bb57
        var $285=HEAP[$0]; //@line 2826 "cPickle.c"
        HEAP[$retval]=$285; //@line 2826 "cPickle.c"
        __label__ = 60; break; //@line 2826 "cPickle.c"
      case 60: // $return
        var $retval58=HEAP[$retval]; //@line 2826 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval58; //@line 2826 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickler_dump($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $ob=__stackBase__+16;
        var $get=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$get]=0; //@line 2956 "cPickle.c"
        var $1=HEAP[$args_addr]; //@line 2958 "cPickle.c"
        var $2=_PyArg_ParseTuple($1, ((__str53)&4294967295), $ob, $get); //@line 2958 "cPickle.c"
        var $3=((($2))|0)==0; //@line 2958 "cPickle.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2958 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 2959 "cPickle.c"
        __label__ = 7; break; //@line 2959 "cPickle.c"
      case 2: // $bb1
        var $4=HEAP[$ob]; //@line 2961 "cPickle.c"
        var $5=HEAP[$self_addr]; //@line 2961 "cPickle.c"
        var $6=_dump($5, $4); //@line 2961 "cPickle.c"
        var $7=((($6))|0) < 0; //@line 2961 "cPickle.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 2961 "cPickle.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 2962 "cPickle.c"
        __label__ = 7; break; //@line 2962 "cPickle.c"
      case 4: // $bb3
        var $8=HEAP[$get]; //@line 2964 "cPickle.c"
        var $9=((($8))|0)!=0; //@line 2964 "cPickle.c"
        if ($9) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 2964 "cPickle.c"
      case 5: // $bb4
        var $10=HEAP[$self_addr]; //@line 2964 "cPickle.c"
        var $11=_Pickle_getvalue($10, 0); //@line 2964 "cPickle.c"
        HEAP[$0]=$11; //@line 2964 "cPickle.c"
        __label__ = 7; break; //@line 2964 "cPickle.c"
      case 6: // $bb5
        var $12=HEAP[$self_addr]; //@line 2967 "cPickle.c"
        var $13=$12; //@line 2967 "cPickle.c"
        var $14=(($13)&4294967295); //@line 2967 "cPickle.c"
        var $15=HEAP[$14]; //@line 2967 "cPickle.c"
        var $16=((($15) + 1)&4294967295); //@line 2967 "cPickle.c"
        var $17=(($13)&4294967295); //@line 2967 "cPickle.c"
        HEAP[$17]=$16; //@line 2967 "cPickle.c"
        var $18=HEAP[$self_addr]; //@line 2968 "cPickle.c"
        var $19=$18; //@line 2968 "cPickle.c"
        HEAP[$0]=$19; //@line 2968 "cPickle.c"
        __label__ = 7; break; //@line 2968 "cPickle.c"
      case 7: // $bb6
        var $20=HEAP[$0]; //@line 2959 "cPickle.c"
        HEAP[$retval]=$20; //@line 2959 "cPickle.c"
        __label__ = 8; break; //@line 2959 "cPickle.c"
      case 8: // $return
        var $retval7=HEAP[$retval]; //@line 2959 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 2959 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _newPicklerobject($file, $proto) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $file_addr=__stackBase__;
        var $proto_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $self=__stackBase__+16;
        var $m=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$file_addr]=$file;
        HEAP[$proto_addr]=$proto;
        var $1=HEAP[$proto_addr]; //@line 2990 "cPickle.c"
        var $2=((($1))|0) < 0; //@line 2990 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2990 "cPickle.c"
      case 1: // $bb
        HEAP[$proto_addr]=2; //@line 2991 "cPickle.c"
        __label__ = 2; break; //@line 2991 "cPickle.c"
      case 2: // $bb1
        var $3=HEAP[$proto_addr]; //@line 2992 "cPickle.c"
        var $4=((($3))|0) > 2; //@line 2992 "cPickle.c"
        if ($4) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 2992 "cPickle.c"
      case 3: // $bb2
        var $5=HEAP[_PyExc_ValueError]; //@line 2993 "cPickle.c"
        var $6=HEAP[$proto_addr]; //@line 2993 "cPickle.c"
        var $7=_PyErr_Format($5, ((__str60)&4294967295), $6, 2); //@line 2993 "cPickle.c"
        HEAP[$0]=0; //@line 2996 "cPickle.c"
        __label__ = 35; break; //@line 2996 "cPickle.c"
      case 4: // $bb3
        var $8=__PyObject_GC_New(_Picklertype); //@line 2999 "cPickle.c"
        var $9=$8; //@line 2999 "cPickle.c"
        HEAP[$self]=$9; //@line 2999 "cPickle.c"
        var $10=HEAP[$self]; //@line 3000 "cPickle.c"
        var $11=($10)==0; //@line 3000 "cPickle.c"
        if ($11) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3000 "cPickle.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 3001 "cPickle.c"
        __label__ = 35; break; //@line 3001 "cPickle.c"
      case 6: // $bb5
        var $12=HEAP[$self]; //@line 3002 "cPickle.c"
        var $13=(($12+36)&4294967295); //@line 3002 "cPickle.c"
        var $14=HEAP[$proto_addr]; //@line 3002 "cPickle.c"
        HEAP[$13]=$14; //@line 3002 "cPickle.c"
        var $15=HEAP[$proto_addr]; //@line 3003 "cPickle.c"
        var $16=((($15))|0) > 0; //@line 3003 "cPickle.c"
        var $17=unSign(($16), 1, 0); //@line 3003 "cPickle.c"
        var $18=HEAP[$self]; //@line 3003 "cPickle.c"
        var $19=(($18+40)&4294967295); //@line 3003 "cPickle.c"
        HEAP[$19]=$17; //@line 3003 "cPickle.c"
        var $20=HEAP[$self]; //@line 3004 "cPickle.c"
        var $21=(($20+8)&4294967295); //@line 3004 "cPickle.c"
        HEAP[$21]=0; //@line 3004 "cPickle.c"
        var $22=HEAP[$self]; //@line 3005 "cPickle.c"
        var $23=(($22+12)&4294967295); //@line 3005 "cPickle.c"
        HEAP[$23]=0; //@line 3005 "cPickle.c"
        var $24=HEAP[$self]; //@line 3006 "cPickle.c"
        var $25=(($24+20)&4294967295); //@line 3006 "cPickle.c"
        HEAP[$25]=0; //@line 3006 "cPickle.c"
        var $26=HEAP[$self]; //@line 3007 "cPickle.c"
        var $27=(($26+24)&4294967295); //@line 3007 "cPickle.c"
        HEAP[$27]=0; //@line 3007 "cPickle.c"
        var $28=HEAP[$self]; //@line 3008 "cPickle.c"
        var $29=(($28+28)&4294967295); //@line 3008 "cPickle.c"
        HEAP[$29]=0; //@line 3008 "cPickle.c"
        var $30=HEAP[$self]; //@line 3009 "cPickle.c"
        var $31=(($30+32)&4294967295); //@line 3009 "cPickle.c"
        HEAP[$31]=0; //@line 3009 "cPickle.c"
        var $32=HEAP[$self]; //@line 3010 "cPickle.c"
        var $33=(($32+52)&4294967295); //@line 3010 "cPickle.c"
        HEAP[$33]=0; //@line 3010 "cPickle.c"
        var $34=HEAP[$self]; //@line 3011 "cPickle.c"
        var $35=(($34+44)&4294967295); //@line 3011 "cPickle.c"
        HEAP[$35]=0; //@line 3011 "cPickle.c"
        var $36=HEAP[$self]; //@line 3012 "cPickle.c"
        var $37=(($36+64)&4294967295); //@line 3012 "cPickle.c"
        HEAP[$37]=0; //@line 3012 "cPickle.c"
        var $38=HEAP[$self]; //@line 3013 "cPickle.c"
        var $39=(($38+68)&4294967295); //@line 3013 "cPickle.c"
        HEAP[$39]=0; //@line 3013 "cPickle.c"
        var $40=HEAP[$self]; //@line 3014 "cPickle.c"
        var $41=(($40+56)&4294967295); //@line 3014 "cPickle.c"
        HEAP[$41]=0; //@line 3014 "cPickle.c"
        var $42=HEAP[$self]; //@line 3015 "cPickle.c"
        var $43=(($42+60)&4294967295); //@line 3015 "cPickle.c"
        HEAP[$43]=0; //@line 3015 "cPickle.c"
        var $44=HEAP[$self]; //@line 3017 "cPickle.c"
        var $45=(($44+16)&4294967295); //@line 3017 "cPickle.c"
        HEAP[$45]=0; //@line 3017 "cPickle.c"
        var $46=HEAP[$file_addr]; //@line 3018 "cPickle.c"
        var $47=($46)!=0; //@line 3018 "cPickle.c"
        if ($47) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3018 "cPickle.c"
      case 7: // $bb6
        var $48=HEAP[$file_addr]; //@line 3019 "cPickle.c"
        var $49=(($48)&4294967295); //@line 3019 "cPickle.c"
        var $50=HEAP[$49]; //@line 3019 "cPickle.c"
        var $51=((($50) + 1)&4294967295); //@line 3019 "cPickle.c"
        var $52=HEAP[$file_addr]; //@line 3019 "cPickle.c"
        var $53=(($52)&4294967295); //@line 3019 "cPickle.c"
        HEAP[$53]=$51; //@line 3019 "cPickle.c"
        __label__ = 9; break; //@line 3019 "cPickle.c"
      case 8: // $bb7
        var $54=_Pdata_New(); //@line 3021 "cPickle.c"
        HEAP[$file_addr]=$54; //@line 3021 "cPickle.c"
        var $55=HEAP[$file_addr]; //@line 3022 "cPickle.c"
        var $56=($55)==0; //@line 3022 "cPickle.c"
        if ($56) { __label__ = 32; break; } else { __label__ = 9; break; } //@line 3022 "cPickle.c"
      case 9: // $bb8
        var $57=HEAP[$self]; //@line 3025 "cPickle.c"
        var $58=(($57+16)&4294967295); //@line 3025 "cPickle.c"
        var $59=HEAP[$file_addr]; //@line 3025 "cPickle.c"
        HEAP[$58]=$59; //@line 3025 "cPickle.c"
        var $60=_PyDict_New(); //@line 3027 "cPickle.c"
        var $61=HEAP[$self]; //@line 3027 "cPickle.c"
        var $62=(($61+20)&4294967295); //@line 3027 "cPickle.c"
        HEAP[$62]=$60; //@line 3027 "cPickle.c"
        var $63=HEAP[$self]; //@line 3027 "cPickle.c"
        var $64=(($63+20)&4294967295); //@line 3027 "cPickle.c"
        var $65=HEAP[$64]; //@line 3027 "cPickle.c"
        var $66=($65)==0; //@line 3027 "cPickle.c"
        if ($66) { __label__ = 32; break; } else { __label__ = 10; break; } //@line 3027 "cPickle.c"
      case 10: // $bb9
        var $67=HEAP[$file_addr]; //@line 3030 "cPickle.c"
        var $68=(($67+4)&4294967295); //@line 3030 "cPickle.c"
        var $69=HEAP[$68]; //@line 3030 "cPickle.c"
        var $70=($69)==(_PyFile_Type); //@line 3030 "cPickle.c"
        if ($70) { __label__ = 12; break; } else { __label__ = 11; break; } //@line 3030 "cPickle.c"
      case 11: // $bb10
        var $71=HEAP[$file_addr]; //@line 3030 "cPickle.c"
        var $72=(($71+4)&4294967295); //@line 3030 "cPickle.c"
        var $73=HEAP[$72]; //@line 3030 "cPickle.c"
        var $74=_PyType_IsSubtype($73, _PyFile_Type); //@line 3030 "cPickle.c"
        var $75=((($74))|0)!=0; //@line 3030 "cPickle.c"
        if ($75) { __label__ = 12; break; } else { __label__ = 15; break; } //@line 3030 "cPickle.c"
      case 12: // $bb11
        var $76=HEAP[$file_addr]; //@line 3031 "cPickle.c"
        var $77=_PyFile_AsFile($76); //@line 3031 "cPickle.c"
        var $78=HEAP[$self]; //@line 3031 "cPickle.c"
        var $79=(($78+8)&4294967295); //@line 3031 "cPickle.c"
        HEAP[$79]=$77; //@line 3031 "cPickle.c"
        var $80=HEAP[$self]; //@line 3032 "cPickle.c"
        var $81=(($80+8)&4294967295); //@line 3032 "cPickle.c"
        var $82=HEAP[$81]; //@line 3032 "cPickle.c"
        var $83=($82)==0; //@line 3032 "cPickle.c"
        if ($83) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 3032 "cPickle.c"
      case 13: // $bb12
        var $84=HEAP[_PyExc_ValueError]; //@line 3033 "cPickle.c"
        _PyErr_SetString($84, ((__str61)&4294967295)); //@line 3033 "cPickle.c"
        __label__ = 32; break; //@line 3033 "cPickle.c"
      case 14: // $bb13
        var $85=HEAP[$self]; //@line 3037 "cPickle.c"
        var $86=(($85+48)&4294967295); //@line 3037 "cPickle.c"
        HEAP[$86]=(FUNCTION_TABLE_OFFSET + 4); //@line 3037 "cPickle.c"
        __label__ = 24; break; //@line 3037 "cPickle.c"
      case 15: // $bb14
        var $87=HEAP[$file_addr]; //@line 3039 "cPickle.c"
        var $88=(($87+4)&4294967295); //@line 3039 "cPickle.c"
        var $89=HEAP[$88]; //@line 3039 "cPickle.c"
        var $90=HEAP[_PycStringIO]; //@line 3039 "cPickle.c"
        var $91=(($90+28)&4294967295); //@line 3039 "cPickle.c"
        var $92=HEAP[$91]; //@line 3039 "cPickle.c"
        var $93=($89)==($92); //@line 3039 "cPickle.c"
        if ($93) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 3039 "cPickle.c"
      case 16: // $bb15
        var $94=HEAP[$self]; //@line 3040 "cPickle.c"
        var $95=(($94+48)&4294967295); //@line 3040 "cPickle.c"
        HEAP[$95]=(FUNCTION_TABLE_OFFSET + 6); //@line 3040 "cPickle.c"
        __label__ = 24; break; //@line 3040 "cPickle.c"
      case 17: // $bb16
        var $96=HEAP[$file_addr]; //@line 3042 "cPickle.c"
        var $97=($96)==(__Py_NoneStruct); //@line 3042 "cPickle.c"
        if ($97) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 3042 "cPickle.c"
      case 18: // $bb17
        var $98=HEAP[$self]; //@line 3043 "cPickle.c"
        var $99=(($98+48)&4294967295); //@line 3043 "cPickle.c"
        HEAP[$99]=(FUNCTION_TABLE_OFFSET + 8); //@line 3043 "cPickle.c"
        __label__ = 24; break; //@line 3043 "cPickle.c"
      case 19: // $bb18
        var $100=HEAP[$self]; //@line 3046 "cPickle.c"
        var $101=(($100+48)&4294967295); //@line 3046 "cPickle.c"
        HEAP[$101]=(FUNCTION_TABLE_OFFSET + 10); //@line 3046 "cPickle.c"
        var $102=HEAP[$file_addr]; //@line 3048 "cPickle.c"
        var $103=(($102+4)&4294967295); //@line 3048 "cPickle.c"
        var $104=HEAP[$103]; //@line 3048 "cPickle.c"
        var $105=($104)!=(_PdataType); //@line 3048 "cPickle.c"
        if ($105) { __label__ = 20; break; } else { __label__ = 22; break; } //@line 3048 "cPickle.c"
      case 20: // $bb19
        var $106=HEAP[_write_str]; //@line 3049 "cPickle.c"
        var $107=HEAP[$file_addr]; //@line 3049 "cPickle.c"
        var $108=_PyObject_GetAttr($107, $106); //@line 3049 "cPickle.c"
        var $109=HEAP[$self]; //@line 3049 "cPickle.c"
        var $110=(($109+12)&4294967295); //@line 3049 "cPickle.c"
        HEAP[$110]=$108; //@line 3049 "cPickle.c"
        var $111=HEAP[$self]; //@line 3050 "cPickle.c"
        var $112=(($111+12)&4294967295); //@line 3050 "cPickle.c"
        var $113=HEAP[$112]; //@line 3050 "cPickle.c"
        var $114=($113)==0; //@line 3050 "cPickle.c"
        if ($114) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 3050 "cPickle.c"
      case 21: // $bb20
        _PyErr_Clear(); //@line 3051 "cPickle.c"
        var $115=HEAP[_PyExc_TypeError]; //@line 3052 "cPickle.c"
        _PyErr_SetString($115, ((__str62)&4294967295)); //@line 3052 "cPickle.c"
        __label__ = 32; break; //@line 3052 "cPickle.c"
      case 22: // $bb21
        var $116=_PyMem_Malloc(256); //@line 3059 "cPickle.c"
        var $117=HEAP[$self]; //@line 3059 "cPickle.c"
        var $118=(($117+52)&4294967295); //@line 3059 "cPickle.c"
        HEAP[$118]=$116; //@line 3059 "cPickle.c"
        var $119=HEAP[$self]; //@line 3060 "cPickle.c"
        var $120=(($119+52)&4294967295); //@line 3060 "cPickle.c"
        var $121=HEAP[$120]; //@line 3060 "cPickle.c"
        var $122=($121)==0; //@line 3060 "cPickle.c"
        if ($122) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 3060 "cPickle.c"
      case 23: // $bb22
        var $123=_PyErr_NoMemory(); //@line 3061 "cPickle.c"
        __label__ = 32; break; //@line 3061 "cPickle.c"
      case 24: // $bb23
        var $124=_PyEval_GetRestricted(); //@line 3066 "cPickle.c"
        var $125=((($124))|0)!=0; //@line 3066 "cPickle.c"
        if ($125) { __label__ = 25; break; } else { __label__ = 30; break; } //@line 3066 "cPickle.c"
      case 25: // $bb24
        var $126=_PyImport_ImportModule(((__str63)&4294967295)); //@line 3068 "cPickle.c"
        HEAP[$m]=$126; //@line 3068 "cPickle.c"
        var $127=HEAP[$m]; //@line 3070 "cPickle.c"
        var $128=($127)==0; //@line 3070 "cPickle.c"
        if ($128) { __label__ = 32; break; } else { __label__ = 26; break; } //@line 3070 "cPickle.c"
      case 26: // $bb25
        var $129=HEAP[_dispatch_table_str]; //@line 3072 "cPickle.c"
        var $130=HEAP[$m]; //@line 3072 "cPickle.c"
        var $131=_PyObject_GetAttr($130, $129); //@line 3072 "cPickle.c"
        var $132=HEAP[$self]; //@line 3072 "cPickle.c"
        var $133=(($132+60)&4294967295); //@line 3072 "cPickle.c"
        HEAP[$133]=$131; //@line 3072 "cPickle.c"
        var $134=HEAP[$m]; //@line 3073 "cPickle.c"
        var $135=(($134)&4294967295); //@line 3073 "cPickle.c"
        var $136=HEAP[$135]; //@line 3073 "cPickle.c"
        var $137=((($136) - 1)&4294967295); //@line 3073 "cPickle.c"
        var $138=HEAP[$m]; //@line 3073 "cPickle.c"
        var $139=(($138)&4294967295); //@line 3073 "cPickle.c"
        HEAP[$139]=$137; //@line 3073 "cPickle.c"
        var $140=HEAP[$m]; //@line 3073 "cPickle.c"
        var $141=(($140)&4294967295); //@line 3073 "cPickle.c"
        var $142=HEAP[$141]; //@line 3073 "cPickle.c"
        var $143=((($142))|0)==0; //@line 3073 "cPickle.c"
        if ($143) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 3073 "cPickle.c"
      case 27: // $bb26
        var $144=HEAP[$m]; //@line 3073 "cPickle.c"
        var $145=(($144+4)&4294967295); //@line 3073 "cPickle.c"
        var $146=HEAP[$145]; //@line 3073 "cPickle.c"
        var $147=(($146+24)&4294967295); //@line 3073 "cPickle.c"
        var $148=HEAP[$147]; //@line 3073 "cPickle.c"
        var $149=HEAP[$m]; //@line 3073 "cPickle.c"
        FUNCTION_TABLE[$148]($149); //@line 3073 "cPickle.c"
        __label__ = 28; break; //@line 3073 "cPickle.c"
      case 28: // $bb27
        var $150=HEAP[$self]; //@line 3074 "cPickle.c"
        var $151=(($150+60)&4294967295); //@line 3074 "cPickle.c"
        var $152=HEAP[$151]; //@line 3074 "cPickle.c"
        var $153=($152)==0; //@line 3074 "cPickle.c"
        if ($153) { __label__ = 32; break; } else { __label__ = 29; break; } //@line 3074 "cPickle.c"
      case 29: // $bb28
        __label__ = 31; break; //@line 3074 "cPickle.c"
      case 30: // $bb29
        var $154=HEAP[_dispatch_table]; //@line 3078 "cPickle.c"
        var $155=HEAP[$self]; //@line 3078 "cPickle.c"
        var $156=(($155+60)&4294967295); //@line 3078 "cPickle.c"
        HEAP[$156]=$154; //@line 3078 "cPickle.c"
        var $157=HEAP[_dispatch_table]; //@line 3079 "cPickle.c"
        var $158=(($157)&4294967295); //@line 3079 "cPickle.c"
        var $159=HEAP[$158]; //@line 3079 "cPickle.c"
        var $160=((($159) + 1)&4294967295); //@line 3079 "cPickle.c"
        var $161=(($157)&4294967295); //@line 3079 "cPickle.c"
        HEAP[$161]=$160; //@line 3079 "cPickle.c"
        __label__ = 31; break; //@line 3079 "cPickle.c"
      case 31: // $bb30
        var $162=HEAP[$self]; //@line 3081 "cPickle.c"
        var $163=$162; //@line 3081 "cPickle.c"
        _PyObject_GC_Track($163); //@line 3081 "cPickle.c"
        var $164=HEAP[$self]; //@line 3083 "cPickle.c"
        HEAP[$0]=$164; //@line 3083 "cPickle.c"
        __label__ = 35; break; //@line 3083 "cPickle.c"
      case 32: // $err
        var $165=HEAP[$self]; //@line 3086 "cPickle.c"
        var $166=$165; //@line 3086 "cPickle.c"
        var $167=(($166)&4294967295); //@line 3086 "cPickle.c"
        var $168=HEAP[$167]; //@line 3086 "cPickle.c"
        var $169=((($168) - 1)&4294967295); //@line 3086 "cPickle.c"
        var $170=(($166)&4294967295); //@line 3086 "cPickle.c"
        HEAP[$170]=$169; //@line 3086 "cPickle.c"
        var $171=(($166)&4294967295); //@line 3086 "cPickle.c"
        var $172=HEAP[$171]; //@line 3086 "cPickle.c"
        var $173=((($172))|0)==0; //@line 3086 "cPickle.c"
        if ($173) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 3086 "cPickle.c"
      case 33: // $bb31
        var $174=HEAP[$self]; //@line 3086 "cPickle.c"
        var $175=$174; //@line 3086 "cPickle.c"
        var $176=(($175+4)&4294967295); //@line 3086 "cPickle.c"
        var $177=HEAP[$176]; //@line 3086 "cPickle.c"
        var $178=(($177+24)&4294967295); //@line 3086 "cPickle.c"
        var $179=HEAP[$178]; //@line 3086 "cPickle.c"
        var $180=HEAP[$self]; //@line 3086 "cPickle.c"
        var $181=$180; //@line 3086 "cPickle.c"
        FUNCTION_TABLE[$179]($181); //@line 3086 "cPickle.c"
        __label__ = 34; break; //@line 3086 "cPickle.c"
      case 34: // $bb32
        HEAP[$0]=0; //@line 3087 "cPickle.c"
        __label__ = 35; break; //@line 3087 "cPickle.c"
      case 35: // $bb33
        var $182=HEAP[$0]; //@line 2996 "cPickle.c"
        HEAP[$retval]=$182; //@line 2996 "cPickle.c"
        __label__ = 36; break; //@line 2996 "cPickle.c"
      case 36: // $return
        var $retval34=HEAP[$retval]; //@line 2996 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval34; //@line 2996 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _get_Pickler($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kwds_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $file=__stackBase__+20;
        var $proto=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$kwds_addr]=$kwds;
        HEAP[$file]=0; //@line 3095 "cPickle.c"
        HEAP[$proto]=0; //@line 3096 "cPickle.c"
        var $1=HEAP[$args_addr]; //@line 3105 "cPickle.c"
        var $2=_PyArg_ParseTuple($1, ((__str64)&4294967295), $proto); //@line 3105 "cPickle.c"
        var $3=((($2))|0)==0; //@line 3105 "cPickle.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 3105 "cPickle.c"
      case 1: // $bb
        _PyErr_Clear(); //@line 3106 "cPickle.c"
        HEAP[$proto]=0; //@line 3107 "cPickle.c"
        var $4=HEAP[$args_addr]; //@line 3108 "cPickle.c"
        var $5=HEAP[$kwds_addr]; //@line 3108 "cPickle.c"
        var $6=_PyArg_ParseTupleAndKeywords($4, $5, ((__str65)&4294967295), ((_kwlist_12011)&4294967295), $file, $proto); //@line 3108 "cPickle.c"
        var $7=((($6))|0)==0; //@line 3108 "cPickle.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3108 "cPickle.c"
      case 2: // $bb1
        HEAP[$0]=0; //@line 3110 "cPickle.c"
        __label__ = 4; break; //@line 3110 "cPickle.c"
      case 3: // $bb2
        var $8=HEAP[$proto]; //@line 3112 "cPickle.c"
        var $9=HEAP[$file]; //@line 3112 "cPickle.c"
        var $10=_newPicklerobject($9, $8); //@line 3112 "cPickle.c"
        var $11=$10; //@line 3112 "cPickle.c"
        HEAP[$0]=$11; //@line 3112 "cPickle.c"
        __label__ = 4; break; //@line 3112 "cPickle.c"
      case 4: // $bb3
        var $12=HEAP[$0]; //@line 3110 "cPickle.c"
        HEAP[$retval]=$12; //@line 3110 "cPickle.c"
        __label__ = 5; break; //@line 3110 "cPickle.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 3110 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 3110 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickler_dealloc($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $0=HEAP[$self_addr]; //@line 3119 "cPickle.c"
        var $1=$0; //@line 3119 "cPickle.c"
        _PyObject_GC_UnTrack($1); //@line 3119 "cPickle.c"
        var $2=HEAP[$self_addr]; //@line 3120 "cPickle.c"
        var $3=(($2+12)&4294967295); //@line 3120 "cPickle.c"
        var $4=HEAP[$3]; //@line 3120 "cPickle.c"
        var $5=($4)!=0; //@line 3120 "cPickle.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 3120 "cPickle.c"
      case 1: // $bb
        var $6=HEAP[$self_addr]; //@line 3120 "cPickle.c"
        var $7=(($6+12)&4294967295); //@line 3120 "cPickle.c"
        var $8=HEAP[$7]; //@line 3120 "cPickle.c"
        var $9=(($8)&4294967295); //@line 3120 "cPickle.c"
        var $10=HEAP[$9]; //@line 3120 "cPickle.c"
        var $11=((($10) - 1)&4294967295); //@line 3120 "cPickle.c"
        var $12=(($8)&4294967295); //@line 3120 "cPickle.c"
        HEAP[$12]=$11; //@line 3120 "cPickle.c"
        var $13=(($8)&4294967295); //@line 3120 "cPickle.c"
        var $14=HEAP[$13]; //@line 3120 "cPickle.c"
        var $15=((($14))|0)==0; //@line 3120 "cPickle.c"
        if ($15) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3120 "cPickle.c"
      case 2: // $bb1
        var $16=HEAP[$self_addr]; //@line 3120 "cPickle.c"
        var $17=(($16+12)&4294967295); //@line 3120 "cPickle.c"
        var $18=HEAP[$17]; //@line 3120 "cPickle.c"
        var $19=(($18+4)&4294967295); //@line 3120 "cPickle.c"
        var $20=HEAP[$19]; //@line 3120 "cPickle.c"
        var $21=(($20+24)&4294967295); //@line 3120 "cPickle.c"
        var $22=HEAP[$21]; //@line 3120 "cPickle.c"
        var $23=HEAP[$self_addr]; //@line 3120 "cPickle.c"
        var $24=(($23+12)&4294967295); //@line 3120 "cPickle.c"
        var $25=HEAP[$24]; //@line 3120 "cPickle.c"
        FUNCTION_TABLE[$22]($25); //@line 3120 "cPickle.c"
        __label__ = 3; break; //@line 3120 "cPickle.c"
      case 3: // $bb2
        var $26=HEAP[$self_addr]; //@line 3121 "cPickle.c"
        var $27=(($26+20)&4294967295); //@line 3121 "cPickle.c"
        var $28=HEAP[$27]; //@line 3121 "cPickle.c"
        var $29=($28)!=0; //@line 3121 "cPickle.c"
        if ($29) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 3121 "cPickle.c"
      case 4: // $bb3
        var $30=HEAP[$self_addr]; //@line 3121 "cPickle.c"
        var $31=(($30+20)&4294967295); //@line 3121 "cPickle.c"
        var $32=HEAP[$31]; //@line 3121 "cPickle.c"
        var $33=(($32)&4294967295); //@line 3121 "cPickle.c"
        var $34=HEAP[$33]; //@line 3121 "cPickle.c"
        var $35=((($34) - 1)&4294967295); //@line 3121 "cPickle.c"
        var $36=(($32)&4294967295); //@line 3121 "cPickle.c"
        HEAP[$36]=$35; //@line 3121 "cPickle.c"
        var $37=(($32)&4294967295); //@line 3121 "cPickle.c"
        var $38=HEAP[$37]; //@line 3121 "cPickle.c"
        var $39=((($38))|0)==0; //@line 3121 "cPickle.c"
        if ($39) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3121 "cPickle.c"
      case 5: // $bb4
        var $40=HEAP[$self_addr]; //@line 3121 "cPickle.c"
        var $41=(($40+20)&4294967295); //@line 3121 "cPickle.c"
        var $42=HEAP[$41]; //@line 3121 "cPickle.c"
        var $43=(($42+4)&4294967295); //@line 3121 "cPickle.c"
        var $44=HEAP[$43]; //@line 3121 "cPickle.c"
        var $45=(($44+24)&4294967295); //@line 3121 "cPickle.c"
        var $46=HEAP[$45]; //@line 3121 "cPickle.c"
        var $47=HEAP[$self_addr]; //@line 3121 "cPickle.c"
        var $48=(($47+20)&4294967295); //@line 3121 "cPickle.c"
        var $49=HEAP[$48]; //@line 3121 "cPickle.c"
        FUNCTION_TABLE[$46]($49); //@line 3121 "cPickle.c"
        __label__ = 6; break; //@line 3121 "cPickle.c"
      case 6: // $bb5
        var $50=HEAP[$self_addr]; //@line 3122 "cPickle.c"
        var $51=(($50+68)&4294967295); //@line 3122 "cPickle.c"
        var $52=HEAP[$51]; //@line 3122 "cPickle.c"
        var $53=($52)!=0; //@line 3122 "cPickle.c"
        if ($53) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 3122 "cPickle.c"
      case 7: // $bb6
        var $54=HEAP[$self_addr]; //@line 3122 "cPickle.c"
        var $55=(($54+68)&4294967295); //@line 3122 "cPickle.c"
        var $56=HEAP[$55]; //@line 3122 "cPickle.c"
        var $57=(($56)&4294967295); //@line 3122 "cPickle.c"
        var $58=HEAP[$57]; //@line 3122 "cPickle.c"
        var $59=((($58) - 1)&4294967295); //@line 3122 "cPickle.c"
        var $60=(($56)&4294967295); //@line 3122 "cPickle.c"
        HEAP[$60]=$59; //@line 3122 "cPickle.c"
        var $61=(($56)&4294967295); //@line 3122 "cPickle.c"
        var $62=HEAP[$61]; //@line 3122 "cPickle.c"
        var $63=((($62))|0)==0; //@line 3122 "cPickle.c"
        if ($63) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3122 "cPickle.c"
      case 8: // $bb7
        var $64=HEAP[$self_addr]; //@line 3122 "cPickle.c"
        var $65=(($64+68)&4294967295); //@line 3122 "cPickle.c"
        var $66=HEAP[$65]; //@line 3122 "cPickle.c"
        var $67=(($66+4)&4294967295); //@line 3122 "cPickle.c"
        var $68=HEAP[$67]; //@line 3122 "cPickle.c"
        var $69=(($68+24)&4294967295); //@line 3122 "cPickle.c"
        var $70=HEAP[$69]; //@line 3122 "cPickle.c"
        var $71=HEAP[$self_addr]; //@line 3122 "cPickle.c"
        var $72=(($71+68)&4294967295); //@line 3122 "cPickle.c"
        var $73=HEAP[$72]; //@line 3122 "cPickle.c"
        FUNCTION_TABLE[$70]($73); //@line 3122 "cPickle.c"
        __label__ = 9; break; //@line 3122 "cPickle.c"
      case 9: // $bb8
        var $74=HEAP[$self_addr]; //@line 3123 "cPickle.c"
        var $75=(($74+24)&4294967295); //@line 3123 "cPickle.c"
        var $76=HEAP[$75]; //@line 3123 "cPickle.c"
        var $77=($76)!=0; //@line 3123 "cPickle.c"
        if ($77) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 3123 "cPickle.c"
      case 10: // $bb9
        var $78=HEAP[$self_addr]; //@line 3123 "cPickle.c"
        var $79=(($78+24)&4294967295); //@line 3123 "cPickle.c"
        var $80=HEAP[$79]; //@line 3123 "cPickle.c"
        var $81=(($80)&4294967295); //@line 3123 "cPickle.c"
        var $82=HEAP[$81]; //@line 3123 "cPickle.c"
        var $83=((($82) - 1)&4294967295); //@line 3123 "cPickle.c"
        var $84=(($80)&4294967295); //@line 3123 "cPickle.c"
        HEAP[$84]=$83; //@line 3123 "cPickle.c"
        var $85=(($80)&4294967295); //@line 3123 "cPickle.c"
        var $86=HEAP[$85]; //@line 3123 "cPickle.c"
        var $87=((($86))|0)==0; //@line 3123 "cPickle.c"
        if ($87) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3123 "cPickle.c"
      case 11: // $bb10
        var $88=HEAP[$self_addr]; //@line 3123 "cPickle.c"
        var $89=(($88+24)&4294967295); //@line 3123 "cPickle.c"
        var $90=HEAP[$89]; //@line 3123 "cPickle.c"
        var $91=(($90+4)&4294967295); //@line 3123 "cPickle.c"
        var $92=HEAP[$91]; //@line 3123 "cPickle.c"
        var $93=(($92+24)&4294967295); //@line 3123 "cPickle.c"
        var $94=HEAP[$93]; //@line 3123 "cPickle.c"
        var $95=HEAP[$self_addr]; //@line 3123 "cPickle.c"
        var $96=(($95+24)&4294967295); //@line 3123 "cPickle.c"
        var $97=HEAP[$96]; //@line 3123 "cPickle.c"
        FUNCTION_TABLE[$94]($97); //@line 3123 "cPickle.c"
        __label__ = 12; break; //@line 3123 "cPickle.c"
      case 12: // $bb11
        var $98=HEAP[$self_addr]; //@line 3124 "cPickle.c"
        var $99=(($98+16)&4294967295); //@line 3124 "cPickle.c"
        var $100=HEAP[$99]; //@line 3124 "cPickle.c"
        var $101=($100)!=0; //@line 3124 "cPickle.c"
        if ($101) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 3124 "cPickle.c"
      case 13: // $bb12
        var $102=HEAP[$self_addr]; //@line 3124 "cPickle.c"
        var $103=(($102+16)&4294967295); //@line 3124 "cPickle.c"
        var $104=HEAP[$103]; //@line 3124 "cPickle.c"
        var $105=(($104)&4294967295); //@line 3124 "cPickle.c"
        var $106=HEAP[$105]; //@line 3124 "cPickle.c"
        var $107=((($106) - 1)&4294967295); //@line 3124 "cPickle.c"
        var $108=(($104)&4294967295); //@line 3124 "cPickle.c"
        HEAP[$108]=$107; //@line 3124 "cPickle.c"
        var $109=(($104)&4294967295); //@line 3124 "cPickle.c"
        var $110=HEAP[$109]; //@line 3124 "cPickle.c"
        var $111=((($110))|0)==0; //@line 3124 "cPickle.c"
        if ($111) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 3124 "cPickle.c"
      case 14: // $bb13
        var $112=HEAP[$self_addr]; //@line 3124 "cPickle.c"
        var $113=(($112+16)&4294967295); //@line 3124 "cPickle.c"
        var $114=HEAP[$113]; //@line 3124 "cPickle.c"
        var $115=(($114+4)&4294967295); //@line 3124 "cPickle.c"
        var $116=HEAP[$115]; //@line 3124 "cPickle.c"
        var $117=(($116+24)&4294967295); //@line 3124 "cPickle.c"
        var $118=HEAP[$117]; //@line 3124 "cPickle.c"
        var $119=HEAP[$self_addr]; //@line 3124 "cPickle.c"
        var $120=(($119+16)&4294967295); //@line 3124 "cPickle.c"
        var $121=HEAP[$120]; //@line 3124 "cPickle.c"
        FUNCTION_TABLE[$118]($121); //@line 3124 "cPickle.c"
        __label__ = 15; break; //@line 3124 "cPickle.c"
      case 15: // $bb14
        var $122=HEAP[$self_addr]; //@line 3125 "cPickle.c"
        var $123=(($122+28)&4294967295); //@line 3125 "cPickle.c"
        var $124=HEAP[$123]; //@line 3125 "cPickle.c"
        var $125=($124)!=0; //@line 3125 "cPickle.c"
        if ($125) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 3125 "cPickle.c"
      case 16: // $bb15
        var $126=HEAP[$self_addr]; //@line 3125 "cPickle.c"
        var $127=(($126+28)&4294967295); //@line 3125 "cPickle.c"
        var $128=HEAP[$127]; //@line 3125 "cPickle.c"
        var $129=(($128)&4294967295); //@line 3125 "cPickle.c"
        var $130=HEAP[$129]; //@line 3125 "cPickle.c"
        var $131=((($130) - 1)&4294967295); //@line 3125 "cPickle.c"
        var $132=(($128)&4294967295); //@line 3125 "cPickle.c"
        HEAP[$132]=$131; //@line 3125 "cPickle.c"
        var $133=(($128)&4294967295); //@line 3125 "cPickle.c"
        var $134=HEAP[$133]; //@line 3125 "cPickle.c"
        var $135=((($134))|0)==0; //@line 3125 "cPickle.c"
        if ($135) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 3125 "cPickle.c"
      case 17: // $bb16
        var $136=HEAP[$self_addr]; //@line 3125 "cPickle.c"
        var $137=(($136+28)&4294967295); //@line 3125 "cPickle.c"
        var $138=HEAP[$137]; //@line 3125 "cPickle.c"
        var $139=(($138+4)&4294967295); //@line 3125 "cPickle.c"
        var $140=HEAP[$139]; //@line 3125 "cPickle.c"
        var $141=(($140+24)&4294967295); //@line 3125 "cPickle.c"
        var $142=HEAP[$141]; //@line 3125 "cPickle.c"
        var $143=HEAP[$self_addr]; //@line 3125 "cPickle.c"
        var $144=(($143+28)&4294967295); //@line 3125 "cPickle.c"
        var $145=HEAP[$144]; //@line 3125 "cPickle.c"
        FUNCTION_TABLE[$142]($145); //@line 3125 "cPickle.c"
        __label__ = 18; break; //@line 3125 "cPickle.c"
      case 18: // $bb17
        var $146=HEAP[$self_addr]; //@line 3126 "cPickle.c"
        var $147=(($146+32)&4294967295); //@line 3126 "cPickle.c"
        var $148=HEAP[$147]; //@line 3126 "cPickle.c"
        var $149=($148)!=0; //@line 3126 "cPickle.c"
        if ($149) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 3126 "cPickle.c"
      case 19: // $bb18
        var $150=HEAP[$self_addr]; //@line 3126 "cPickle.c"
        var $151=(($150+32)&4294967295); //@line 3126 "cPickle.c"
        var $152=HEAP[$151]; //@line 3126 "cPickle.c"
        var $153=(($152)&4294967295); //@line 3126 "cPickle.c"
        var $154=HEAP[$153]; //@line 3126 "cPickle.c"
        var $155=((($154) - 1)&4294967295); //@line 3126 "cPickle.c"
        var $156=(($152)&4294967295); //@line 3126 "cPickle.c"
        HEAP[$156]=$155; //@line 3126 "cPickle.c"
        var $157=(($152)&4294967295); //@line 3126 "cPickle.c"
        var $158=HEAP[$157]; //@line 3126 "cPickle.c"
        var $159=((($158))|0)==0; //@line 3126 "cPickle.c"
        if ($159) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 3126 "cPickle.c"
      case 20: // $bb19
        var $160=HEAP[$self_addr]; //@line 3126 "cPickle.c"
        var $161=(($160+32)&4294967295); //@line 3126 "cPickle.c"
        var $162=HEAP[$161]; //@line 3126 "cPickle.c"
        var $163=(($162+4)&4294967295); //@line 3126 "cPickle.c"
        var $164=HEAP[$163]; //@line 3126 "cPickle.c"
        var $165=(($164+24)&4294967295); //@line 3126 "cPickle.c"
        var $166=HEAP[$165]; //@line 3126 "cPickle.c"
        var $167=HEAP[$self_addr]; //@line 3126 "cPickle.c"
        var $168=(($167+32)&4294967295); //@line 3126 "cPickle.c"
        var $169=HEAP[$168]; //@line 3126 "cPickle.c"
        FUNCTION_TABLE[$166]($169); //@line 3126 "cPickle.c"
        __label__ = 21; break; //@line 3126 "cPickle.c"
      case 21: // $bb20
        var $170=HEAP[$self_addr]; //@line 3127 "cPickle.c"
        var $171=(($170+60)&4294967295); //@line 3127 "cPickle.c"
        var $172=HEAP[$171]; //@line 3127 "cPickle.c"
        var $173=($172)!=0; //@line 3127 "cPickle.c"
        if ($173) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 3127 "cPickle.c"
      case 22: // $bb21
        var $174=HEAP[$self_addr]; //@line 3127 "cPickle.c"
        var $175=(($174+60)&4294967295); //@line 3127 "cPickle.c"
        var $176=HEAP[$175]; //@line 3127 "cPickle.c"
        var $177=(($176)&4294967295); //@line 3127 "cPickle.c"
        var $178=HEAP[$177]; //@line 3127 "cPickle.c"
        var $179=((($178) - 1)&4294967295); //@line 3127 "cPickle.c"
        var $180=(($176)&4294967295); //@line 3127 "cPickle.c"
        HEAP[$180]=$179; //@line 3127 "cPickle.c"
        var $181=(($176)&4294967295); //@line 3127 "cPickle.c"
        var $182=HEAP[$181]; //@line 3127 "cPickle.c"
        var $183=((($182))|0)==0; //@line 3127 "cPickle.c"
        if ($183) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 3127 "cPickle.c"
      case 23: // $bb22
        var $184=HEAP[$self_addr]; //@line 3127 "cPickle.c"
        var $185=(($184+60)&4294967295); //@line 3127 "cPickle.c"
        var $186=HEAP[$185]; //@line 3127 "cPickle.c"
        var $187=(($186+4)&4294967295); //@line 3127 "cPickle.c"
        var $188=HEAP[$187]; //@line 3127 "cPickle.c"
        var $189=(($188+24)&4294967295); //@line 3127 "cPickle.c"
        var $190=HEAP[$189]; //@line 3127 "cPickle.c"
        var $191=HEAP[$self_addr]; //@line 3127 "cPickle.c"
        var $192=(($191+60)&4294967295); //@line 3127 "cPickle.c"
        var $193=HEAP[$192]; //@line 3127 "cPickle.c"
        FUNCTION_TABLE[$190]($193); //@line 3127 "cPickle.c"
        __label__ = 24; break; //@line 3127 "cPickle.c"
      case 24: // $bb23
        var $194=HEAP[$self_addr]; //@line 3128 "cPickle.c"
        var $195=(($194+52)&4294967295); //@line 3128 "cPickle.c"
        var $196=HEAP[$195]; //@line 3128 "cPickle.c"
        _PyMem_Free($196); //@line 3128 "cPickle.c"
        var $197=HEAP[$self_addr]; //@line 3129 "cPickle.c"
        var $198=$197; //@line 3129 "cPickle.c"
        var $199=(($198+4)&4294967295); //@line 3129 "cPickle.c"
        var $200=HEAP[$199]; //@line 3129 "cPickle.c"
        var $201=(($200+160)&4294967295); //@line 3129 "cPickle.c"
        var $202=HEAP[$201]; //@line 3129 "cPickle.c"
        var $203=HEAP[$self_addr]; //@line 3129 "cPickle.c"
        var $204=$203; //@line 3129 "cPickle.c"
        FUNCTION_TABLE[$202]($204); //@line 3129 "cPickle.c"
        __label__ = 25; break; //@line 3130 "cPickle.c"
      case 25: // $return
        STACKTOP = __stackBase__;
        return; //@line 3130 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickler_traverse($self, $visit, $arg) {
    var __stackBase__  = STACKTOP; STACKTOP += 52; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 52);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $visit_addr=__stackBase__+4;
        var $arg_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $vret=__stackBase__+20;
        var $vret4=__stackBase__+24;
        var $vret8=__stackBase__+28;
        var $vret12=__stackBase__+32;
        var $vret16=__stackBase__+36;
        var $vret20=__stackBase__+40;
        var $vret24=__stackBase__+44;
        var $vret28=__stackBase__+48;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$visit_addr]=$visit;
        HEAP[$arg_addr]=$arg;
        var $1=HEAP[$self_addr]; //@line 3135 "cPickle.c"
        var $2=(($1+12)&4294967295); //@line 3135 "cPickle.c"
        var $3=HEAP[$2]; //@line 3135 "cPickle.c"
        var $4=($3)!=0; //@line 3135 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 3135 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 3135 "cPickle.c"
        var $6=(($5+12)&4294967295); //@line 3135 "cPickle.c"
        var $7=HEAP[$6]; //@line 3135 "cPickle.c"
        var $8=HEAP[$visit_addr]; //@line 3135 "cPickle.c"
        var $9=HEAP[$arg_addr]; //@line 3135 "cPickle.c"
        var $10=FUNCTION_TABLE[$8]($7, $9); //@line 3135 "cPickle.c"
        HEAP[$vret]=$10; //@line 3135 "cPickle.c"
        var $11=HEAP[$vret]; //@line 3135 "cPickle.c"
        var $12=((($11))|0)!=0; //@line 3135 "cPickle.c"
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3135 "cPickle.c"
      case 2: // $bb1
        var $13=HEAP[$vret]; //@line 3135 "cPickle.c"
        HEAP[$0]=$13; //@line 3135 "cPickle.c"
        __label__ = 25; break; //@line 3135 "cPickle.c"
      case 3: // $bb2
        var $14=HEAP[$self_addr]; //@line 3136 "cPickle.c"
        var $15=(($14+20)&4294967295); //@line 3136 "cPickle.c"
        var $16=HEAP[$15]; //@line 3136 "cPickle.c"
        var $17=($16)!=0; //@line 3136 "cPickle.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 3136 "cPickle.c"
      case 4: // $bb3
        var $18=HEAP[$self_addr]; //@line 3136 "cPickle.c"
        var $19=(($18+20)&4294967295); //@line 3136 "cPickle.c"
        var $20=HEAP[$19]; //@line 3136 "cPickle.c"
        var $21=HEAP[$visit_addr]; //@line 3136 "cPickle.c"
        var $22=HEAP[$arg_addr]; //@line 3136 "cPickle.c"
        var $23=FUNCTION_TABLE[$21]($20, $22); //@line 3136 "cPickle.c"
        HEAP[$vret4]=$23; //@line 3136 "cPickle.c"
        var $24=HEAP[$vret4]; //@line 3136 "cPickle.c"
        var $25=((($24))|0)!=0; //@line 3136 "cPickle.c"
        if ($25) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3136 "cPickle.c"
      case 5: // $bb5
        var $26=HEAP[$vret4]; //@line 3136 "cPickle.c"
        HEAP[$0]=$26; //@line 3136 "cPickle.c"
        __label__ = 25; break; //@line 3136 "cPickle.c"
      case 6: // $bb6
        var $27=HEAP[$self_addr]; //@line 3137 "cPickle.c"
        var $28=(($27+68)&4294967295); //@line 3137 "cPickle.c"
        var $29=HEAP[$28]; //@line 3137 "cPickle.c"
        var $30=($29)!=0; //@line 3137 "cPickle.c"
        if ($30) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 3137 "cPickle.c"
      case 7: // $bb7
        var $31=HEAP[$self_addr]; //@line 3137 "cPickle.c"
        var $32=(($31+68)&4294967295); //@line 3137 "cPickle.c"
        var $33=HEAP[$32]; //@line 3137 "cPickle.c"
        var $34=HEAP[$visit_addr]; //@line 3137 "cPickle.c"
        var $35=HEAP[$arg_addr]; //@line 3137 "cPickle.c"
        var $36=FUNCTION_TABLE[$34]($33, $35); //@line 3137 "cPickle.c"
        HEAP[$vret8]=$36; //@line 3137 "cPickle.c"
        var $37=HEAP[$vret8]; //@line 3137 "cPickle.c"
        var $38=((($37))|0)!=0; //@line 3137 "cPickle.c"
        if ($38) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3137 "cPickle.c"
      case 8: // $bb9
        var $39=HEAP[$vret8]; //@line 3137 "cPickle.c"
        HEAP[$0]=$39; //@line 3137 "cPickle.c"
        __label__ = 25; break; //@line 3137 "cPickle.c"
      case 9: // $bb10
        var $40=HEAP[$self_addr]; //@line 3138 "cPickle.c"
        var $41=(($40+24)&4294967295); //@line 3138 "cPickle.c"
        var $42=HEAP[$41]; //@line 3138 "cPickle.c"
        var $43=($42)!=0; //@line 3138 "cPickle.c"
        if ($43) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 3138 "cPickle.c"
      case 10: // $bb11
        var $44=HEAP[$self_addr]; //@line 3138 "cPickle.c"
        var $45=(($44+24)&4294967295); //@line 3138 "cPickle.c"
        var $46=HEAP[$45]; //@line 3138 "cPickle.c"
        var $47=HEAP[$visit_addr]; //@line 3138 "cPickle.c"
        var $48=HEAP[$arg_addr]; //@line 3138 "cPickle.c"
        var $49=FUNCTION_TABLE[$47]($46, $48); //@line 3138 "cPickle.c"
        HEAP[$vret12]=$49; //@line 3138 "cPickle.c"
        var $50=HEAP[$vret12]; //@line 3138 "cPickle.c"
        var $51=((($50))|0)!=0; //@line 3138 "cPickle.c"
        if ($51) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3138 "cPickle.c"
      case 11: // $bb13
        var $52=HEAP[$vret12]; //@line 3138 "cPickle.c"
        HEAP[$0]=$52; //@line 3138 "cPickle.c"
        __label__ = 25; break; //@line 3138 "cPickle.c"
      case 12: // $bb14
        var $53=HEAP[$self_addr]; //@line 3139 "cPickle.c"
        var $54=(($53+16)&4294967295); //@line 3139 "cPickle.c"
        var $55=HEAP[$54]; //@line 3139 "cPickle.c"
        var $56=($55)!=0; //@line 3139 "cPickle.c"
        if ($56) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 3139 "cPickle.c"
      case 13: // $bb15
        var $57=HEAP[$self_addr]; //@line 3139 "cPickle.c"
        var $58=(($57+16)&4294967295); //@line 3139 "cPickle.c"
        var $59=HEAP[$58]; //@line 3139 "cPickle.c"
        var $60=HEAP[$visit_addr]; //@line 3139 "cPickle.c"
        var $61=HEAP[$arg_addr]; //@line 3139 "cPickle.c"
        var $62=FUNCTION_TABLE[$60]($59, $61); //@line 3139 "cPickle.c"
        HEAP[$vret16]=$62; //@line 3139 "cPickle.c"
        var $63=HEAP[$vret16]; //@line 3139 "cPickle.c"
        var $64=((($63))|0)!=0; //@line 3139 "cPickle.c"
        if ($64) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 3139 "cPickle.c"
      case 14: // $bb17
        var $65=HEAP[$vret16]; //@line 3139 "cPickle.c"
        HEAP[$0]=$65; //@line 3139 "cPickle.c"
        __label__ = 25; break; //@line 3139 "cPickle.c"
      case 15: // $bb18
        var $66=HEAP[$self_addr]; //@line 3140 "cPickle.c"
        var $67=(($66+28)&4294967295); //@line 3140 "cPickle.c"
        var $68=HEAP[$67]; //@line 3140 "cPickle.c"
        var $69=($68)!=0; //@line 3140 "cPickle.c"
        if ($69) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 3140 "cPickle.c"
      case 16: // $bb19
        var $70=HEAP[$self_addr]; //@line 3140 "cPickle.c"
        var $71=(($70+28)&4294967295); //@line 3140 "cPickle.c"
        var $72=HEAP[$71]; //@line 3140 "cPickle.c"
        var $73=HEAP[$visit_addr]; //@line 3140 "cPickle.c"
        var $74=HEAP[$arg_addr]; //@line 3140 "cPickle.c"
        var $75=FUNCTION_TABLE[$73]($72, $74); //@line 3140 "cPickle.c"
        HEAP[$vret20]=$75; //@line 3140 "cPickle.c"
        var $76=HEAP[$vret20]; //@line 3140 "cPickle.c"
        var $77=((($76))|0)!=0; //@line 3140 "cPickle.c"
        if ($77) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 3140 "cPickle.c"
      case 17: // $bb21
        var $78=HEAP[$vret20]; //@line 3140 "cPickle.c"
        HEAP[$0]=$78; //@line 3140 "cPickle.c"
        __label__ = 25; break; //@line 3140 "cPickle.c"
      case 18: // $bb22
        var $79=HEAP[$self_addr]; //@line 3141 "cPickle.c"
        var $80=(($79+32)&4294967295); //@line 3141 "cPickle.c"
        var $81=HEAP[$80]; //@line 3141 "cPickle.c"
        var $82=($81)!=0; //@line 3141 "cPickle.c"
        if ($82) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 3141 "cPickle.c"
      case 19: // $bb23
        var $83=HEAP[$self_addr]; //@line 3141 "cPickle.c"
        var $84=(($83+32)&4294967295); //@line 3141 "cPickle.c"
        var $85=HEAP[$84]; //@line 3141 "cPickle.c"
        var $86=HEAP[$visit_addr]; //@line 3141 "cPickle.c"
        var $87=HEAP[$arg_addr]; //@line 3141 "cPickle.c"
        var $88=FUNCTION_TABLE[$86]($85, $87); //@line 3141 "cPickle.c"
        HEAP[$vret24]=$88; //@line 3141 "cPickle.c"
        var $89=HEAP[$vret24]; //@line 3141 "cPickle.c"
        var $90=((($89))|0)!=0; //@line 3141 "cPickle.c"
        if ($90) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 3141 "cPickle.c"
      case 20: // $bb25
        var $91=HEAP[$vret24]; //@line 3141 "cPickle.c"
        HEAP[$0]=$91; //@line 3141 "cPickle.c"
        __label__ = 25; break; //@line 3141 "cPickle.c"
      case 21: // $bb26
        var $92=HEAP[$self_addr]; //@line 3142 "cPickle.c"
        var $93=(($92+60)&4294967295); //@line 3142 "cPickle.c"
        var $94=HEAP[$93]; //@line 3142 "cPickle.c"
        var $95=($94)!=0; //@line 3142 "cPickle.c"
        if ($95) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 3142 "cPickle.c"
      case 22: // $bb27
        var $96=HEAP[$self_addr]; //@line 3142 "cPickle.c"
        var $97=(($96+60)&4294967295); //@line 3142 "cPickle.c"
        var $98=HEAP[$97]; //@line 3142 "cPickle.c"
        var $99=HEAP[$visit_addr]; //@line 3142 "cPickle.c"
        var $100=HEAP[$arg_addr]; //@line 3142 "cPickle.c"
        var $101=FUNCTION_TABLE[$99]($98, $100); //@line 3142 "cPickle.c"
        HEAP[$vret28]=$101; //@line 3142 "cPickle.c"
        var $102=HEAP[$vret28]; //@line 3142 "cPickle.c"
        var $103=((($102))|0)!=0; //@line 3142 "cPickle.c"
        if ($103) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 3142 "cPickle.c"
      case 23: // $bb29
        var $104=HEAP[$vret28]; //@line 3142 "cPickle.c"
        HEAP[$0]=$104; //@line 3142 "cPickle.c"
        __label__ = 25; break; //@line 3142 "cPickle.c"
      case 24: // $bb30
        HEAP[$0]=0; //@line 3143 "cPickle.c"
        __label__ = 25; break; //@line 3143 "cPickle.c"
      case 25: // $bb31
        var $105=HEAP[$0]; //@line 3135 "cPickle.c"
        HEAP[$retval]=$105; //@line 3135 "cPickle.c"
        __label__ = 26; break; //@line 3135 "cPickle.c"
      case 26: // $return
        var $retval32=HEAP[$retval]; //@line 3135 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval32; //@line 3135 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickler_clear($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 44);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_py_tmp=__stackBase__+12;
        var $_py_tmp4=__stackBase__+16;
        var $_py_tmp8=__stackBase__+20;
        var $_py_tmp12=__stackBase__+24;
        var $_py_tmp16=__stackBase__+28;
        var $_py_tmp20=__stackBase__+32;
        var $_py_tmp24=__stackBase__+36;
        var $_py_tmp28=__stackBase__+40;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 3149 "cPickle.c"
        var $2=(($1+12)&4294967295); //@line 3149 "cPickle.c"
        var $3=HEAP[$2]; //@line 3149 "cPickle.c"
        var $4=($3)!=0; //@line 3149 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 3149 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 3149 "cPickle.c"
        var $6=(($5+12)&4294967295); //@line 3149 "cPickle.c"
        var $7=HEAP[$6]; //@line 3149 "cPickle.c"
        HEAP[$_py_tmp]=$7; //@line 3149 "cPickle.c"
        var $8=HEAP[$self_addr]; //@line 3149 "cPickle.c"
        var $9=(($8+12)&4294967295); //@line 3149 "cPickle.c"
        HEAP[$9]=0; //@line 3149 "cPickle.c"
        var $10=HEAP[$_py_tmp]; //@line 3149 "cPickle.c"
        var $11=(($10)&4294967295); //@line 3149 "cPickle.c"
        var $12=HEAP[$11]; //@line 3149 "cPickle.c"
        var $13=((($12) - 1)&4294967295); //@line 3149 "cPickle.c"
        var $14=HEAP[$_py_tmp]; //@line 3149 "cPickle.c"
        var $15=(($14)&4294967295); //@line 3149 "cPickle.c"
        HEAP[$15]=$13; //@line 3149 "cPickle.c"
        var $16=HEAP[$_py_tmp]; //@line 3149 "cPickle.c"
        var $17=(($16)&4294967295); //@line 3149 "cPickle.c"
        var $18=HEAP[$17]; //@line 3149 "cPickle.c"
        var $19=((($18))|0)==0; //@line 3149 "cPickle.c"
        if ($19) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3149 "cPickle.c"
      case 2: // $bb1
        var $20=HEAP[$_py_tmp]; //@line 3149 "cPickle.c"
        var $21=(($20+4)&4294967295); //@line 3149 "cPickle.c"
        var $22=HEAP[$21]; //@line 3149 "cPickle.c"
        var $23=(($22+24)&4294967295); //@line 3149 "cPickle.c"
        var $24=HEAP[$23]; //@line 3149 "cPickle.c"
        var $25=HEAP[$_py_tmp]; //@line 3149 "cPickle.c"
        FUNCTION_TABLE[$24]($25); //@line 3149 "cPickle.c"
        __label__ = 3; break; //@line 3149 "cPickle.c"
      case 3: // $bb2
        var $26=HEAP[$self_addr]; //@line 3150 "cPickle.c"
        var $27=(($26+20)&4294967295); //@line 3150 "cPickle.c"
        var $28=HEAP[$27]; //@line 3150 "cPickle.c"
        var $29=($28)!=0; //@line 3150 "cPickle.c"
        if ($29) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 3150 "cPickle.c"
      case 4: // $bb3
        var $30=HEAP[$self_addr]; //@line 3150 "cPickle.c"
        var $31=(($30+20)&4294967295); //@line 3150 "cPickle.c"
        var $32=HEAP[$31]; //@line 3150 "cPickle.c"
        HEAP[$_py_tmp4]=$32; //@line 3150 "cPickle.c"
        var $33=HEAP[$self_addr]; //@line 3150 "cPickle.c"
        var $34=(($33+20)&4294967295); //@line 3150 "cPickle.c"
        HEAP[$34]=0; //@line 3150 "cPickle.c"
        var $35=HEAP[$_py_tmp4]; //@line 3150 "cPickle.c"
        var $36=(($35)&4294967295); //@line 3150 "cPickle.c"
        var $37=HEAP[$36]; //@line 3150 "cPickle.c"
        var $38=((($37) - 1)&4294967295); //@line 3150 "cPickle.c"
        var $39=HEAP[$_py_tmp4]; //@line 3150 "cPickle.c"
        var $40=(($39)&4294967295); //@line 3150 "cPickle.c"
        HEAP[$40]=$38; //@line 3150 "cPickle.c"
        var $41=HEAP[$_py_tmp4]; //@line 3150 "cPickle.c"
        var $42=(($41)&4294967295); //@line 3150 "cPickle.c"
        var $43=HEAP[$42]; //@line 3150 "cPickle.c"
        var $44=((($43))|0)==0; //@line 3150 "cPickle.c"
        if ($44) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3150 "cPickle.c"
      case 5: // $bb5
        var $45=HEAP[$_py_tmp4]; //@line 3150 "cPickle.c"
        var $46=(($45+4)&4294967295); //@line 3150 "cPickle.c"
        var $47=HEAP[$46]; //@line 3150 "cPickle.c"
        var $48=(($47+24)&4294967295); //@line 3150 "cPickle.c"
        var $49=HEAP[$48]; //@line 3150 "cPickle.c"
        var $50=HEAP[$_py_tmp4]; //@line 3150 "cPickle.c"
        FUNCTION_TABLE[$49]($50); //@line 3150 "cPickle.c"
        __label__ = 6; break; //@line 3150 "cPickle.c"
      case 6: // $bb6
        var $51=HEAP[$self_addr]; //@line 3151 "cPickle.c"
        var $52=(($51+68)&4294967295); //@line 3151 "cPickle.c"
        var $53=HEAP[$52]; //@line 3151 "cPickle.c"
        var $54=($53)!=0; //@line 3151 "cPickle.c"
        if ($54) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 3151 "cPickle.c"
      case 7: // $bb7
        var $55=HEAP[$self_addr]; //@line 3151 "cPickle.c"
        var $56=(($55+68)&4294967295); //@line 3151 "cPickle.c"
        var $57=HEAP[$56]; //@line 3151 "cPickle.c"
        HEAP[$_py_tmp8]=$57; //@line 3151 "cPickle.c"
        var $58=HEAP[$self_addr]; //@line 3151 "cPickle.c"
        var $59=(($58+68)&4294967295); //@line 3151 "cPickle.c"
        HEAP[$59]=0; //@line 3151 "cPickle.c"
        var $60=HEAP[$_py_tmp8]; //@line 3151 "cPickle.c"
        var $61=(($60)&4294967295); //@line 3151 "cPickle.c"
        var $62=HEAP[$61]; //@line 3151 "cPickle.c"
        var $63=((($62) - 1)&4294967295); //@line 3151 "cPickle.c"
        var $64=HEAP[$_py_tmp8]; //@line 3151 "cPickle.c"
        var $65=(($64)&4294967295); //@line 3151 "cPickle.c"
        HEAP[$65]=$63; //@line 3151 "cPickle.c"
        var $66=HEAP[$_py_tmp8]; //@line 3151 "cPickle.c"
        var $67=(($66)&4294967295); //@line 3151 "cPickle.c"
        var $68=HEAP[$67]; //@line 3151 "cPickle.c"
        var $69=((($68))|0)==0; //@line 3151 "cPickle.c"
        if ($69) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3151 "cPickle.c"
      case 8: // $bb9
        var $70=HEAP[$_py_tmp8]; //@line 3151 "cPickle.c"
        var $71=(($70+4)&4294967295); //@line 3151 "cPickle.c"
        var $72=HEAP[$71]; //@line 3151 "cPickle.c"
        var $73=(($72+24)&4294967295); //@line 3151 "cPickle.c"
        var $74=HEAP[$73]; //@line 3151 "cPickle.c"
        var $75=HEAP[$_py_tmp8]; //@line 3151 "cPickle.c"
        FUNCTION_TABLE[$74]($75); //@line 3151 "cPickle.c"
        __label__ = 9; break; //@line 3151 "cPickle.c"
      case 9: // $bb10
        var $76=HEAP[$self_addr]; //@line 3152 "cPickle.c"
        var $77=(($76+24)&4294967295); //@line 3152 "cPickle.c"
        var $78=HEAP[$77]; //@line 3152 "cPickle.c"
        var $79=($78)!=0; //@line 3152 "cPickle.c"
        if ($79) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 3152 "cPickle.c"
      case 10: // $bb11
        var $80=HEAP[$self_addr]; //@line 3152 "cPickle.c"
        var $81=(($80+24)&4294967295); //@line 3152 "cPickle.c"
        var $82=HEAP[$81]; //@line 3152 "cPickle.c"
        HEAP[$_py_tmp12]=$82; //@line 3152 "cPickle.c"
        var $83=HEAP[$self_addr]; //@line 3152 "cPickle.c"
        var $84=(($83+24)&4294967295); //@line 3152 "cPickle.c"
        HEAP[$84]=0; //@line 3152 "cPickle.c"
        var $85=HEAP[$_py_tmp12]; //@line 3152 "cPickle.c"
        var $86=(($85)&4294967295); //@line 3152 "cPickle.c"
        var $87=HEAP[$86]; //@line 3152 "cPickle.c"
        var $88=((($87) - 1)&4294967295); //@line 3152 "cPickle.c"
        var $89=HEAP[$_py_tmp12]; //@line 3152 "cPickle.c"
        var $90=(($89)&4294967295); //@line 3152 "cPickle.c"
        HEAP[$90]=$88; //@line 3152 "cPickle.c"
        var $91=HEAP[$_py_tmp12]; //@line 3152 "cPickle.c"
        var $92=(($91)&4294967295); //@line 3152 "cPickle.c"
        var $93=HEAP[$92]; //@line 3152 "cPickle.c"
        var $94=((($93))|0)==0; //@line 3152 "cPickle.c"
        if ($94) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3152 "cPickle.c"
      case 11: // $bb13
        var $95=HEAP[$_py_tmp12]; //@line 3152 "cPickle.c"
        var $96=(($95+4)&4294967295); //@line 3152 "cPickle.c"
        var $97=HEAP[$96]; //@line 3152 "cPickle.c"
        var $98=(($97+24)&4294967295); //@line 3152 "cPickle.c"
        var $99=HEAP[$98]; //@line 3152 "cPickle.c"
        var $100=HEAP[$_py_tmp12]; //@line 3152 "cPickle.c"
        FUNCTION_TABLE[$99]($100); //@line 3152 "cPickle.c"
        __label__ = 12; break; //@line 3152 "cPickle.c"
      case 12: // $bb14
        var $101=HEAP[$self_addr]; //@line 3153 "cPickle.c"
        var $102=(($101+16)&4294967295); //@line 3153 "cPickle.c"
        var $103=HEAP[$102]; //@line 3153 "cPickle.c"
        var $104=($103)!=0; //@line 3153 "cPickle.c"
        if ($104) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 3153 "cPickle.c"
      case 13: // $bb15
        var $105=HEAP[$self_addr]; //@line 3153 "cPickle.c"
        var $106=(($105+16)&4294967295); //@line 3153 "cPickle.c"
        var $107=HEAP[$106]; //@line 3153 "cPickle.c"
        HEAP[$_py_tmp16]=$107; //@line 3153 "cPickle.c"
        var $108=HEAP[$self_addr]; //@line 3153 "cPickle.c"
        var $109=(($108+16)&4294967295); //@line 3153 "cPickle.c"
        HEAP[$109]=0; //@line 3153 "cPickle.c"
        var $110=HEAP[$_py_tmp16]; //@line 3153 "cPickle.c"
        var $111=(($110)&4294967295); //@line 3153 "cPickle.c"
        var $112=HEAP[$111]; //@line 3153 "cPickle.c"
        var $113=((($112) - 1)&4294967295); //@line 3153 "cPickle.c"
        var $114=HEAP[$_py_tmp16]; //@line 3153 "cPickle.c"
        var $115=(($114)&4294967295); //@line 3153 "cPickle.c"
        HEAP[$115]=$113; //@line 3153 "cPickle.c"
        var $116=HEAP[$_py_tmp16]; //@line 3153 "cPickle.c"
        var $117=(($116)&4294967295); //@line 3153 "cPickle.c"
        var $118=HEAP[$117]; //@line 3153 "cPickle.c"
        var $119=((($118))|0)==0; //@line 3153 "cPickle.c"
        if ($119) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 3153 "cPickle.c"
      case 14: // $bb17
        var $120=HEAP[$_py_tmp16]; //@line 3153 "cPickle.c"
        var $121=(($120+4)&4294967295); //@line 3153 "cPickle.c"
        var $122=HEAP[$121]; //@line 3153 "cPickle.c"
        var $123=(($122+24)&4294967295); //@line 3153 "cPickle.c"
        var $124=HEAP[$123]; //@line 3153 "cPickle.c"
        var $125=HEAP[$_py_tmp16]; //@line 3153 "cPickle.c"
        FUNCTION_TABLE[$124]($125); //@line 3153 "cPickle.c"
        __label__ = 15; break; //@line 3153 "cPickle.c"
      case 15: // $bb18
        var $126=HEAP[$self_addr]; //@line 3154 "cPickle.c"
        var $127=(($126+28)&4294967295); //@line 3154 "cPickle.c"
        var $128=HEAP[$127]; //@line 3154 "cPickle.c"
        var $129=($128)!=0; //@line 3154 "cPickle.c"
        if ($129) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 3154 "cPickle.c"
      case 16: // $bb19
        var $130=HEAP[$self_addr]; //@line 3154 "cPickle.c"
        var $131=(($130+28)&4294967295); //@line 3154 "cPickle.c"
        var $132=HEAP[$131]; //@line 3154 "cPickle.c"
        HEAP[$_py_tmp20]=$132; //@line 3154 "cPickle.c"
        var $133=HEAP[$self_addr]; //@line 3154 "cPickle.c"
        var $134=(($133+28)&4294967295); //@line 3154 "cPickle.c"
        HEAP[$134]=0; //@line 3154 "cPickle.c"
        var $135=HEAP[$_py_tmp20]; //@line 3154 "cPickle.c"
        var $136=(($135)&4294967295); //@line 3154 "cPickle.c"
        var $137=HEAP[$136]; //@line 3154 "cPickle.c"
        var $138=((($137) - 1)&4294967295); //@line 3154 "cPickle.c"
        var $139=HEAP[$_py_tmp20]; //@line 3154 "cPickle.c"
        var $140=(($139)&4294967295); //@line 3154 "cPickle.c"
        HEAP[$140]=$138; //@line 3154 "cPickle.c"
        var $141=HEAP[$_py_tmp20]; //@line 3154 "cPickle.c"
        var $142=(($141)&4294967295); //@line 3154 "cPickle.c"
        var $143=HEAP[$142]; //@line 3154 "cPickle.c"
        var $144=((($143))|0)==0; //@line 3154 "cPickle.c"
        if ($144) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 3154 "cPickle.c"
      case 17: // $bb21
        var $145=HEAP[$_py_tmp20]; //@line 3154 "cPickle.c"
        var $146=(($145+4)&4294967295); //@line 3154 "cPickle.c"
        var $147=HEAP[$146]; //@line 3154 "cPickle.c"
        var $148=(($147+24)&4294967295); //@line 3154 "cPickle.c"
        var $149=HEAP[$148]; //@line 3154 "cPickle.c"
        var $150=HEAP[$_py_tmp20]; //@line 3154 "cPickle.c"
        FUNCTION_TABLE[$149]($150); //@line 3154 "cPickle.c"
        __label__ = 18; break; //@line 3154 "cPickle.c"
      case 18: // $bb22
        var $151=HEAP[$self_addr]; //@line 3155 "cPickle.c"
        var $152=(($151+32)&4294967295); //@line 3155 "cPickle.c"
        var $153=HEAP[$152]; //@line 3155 "cPickle.c"
        var $154=($153)!=0; //@line 3155 "cPickle.c"
        if ($154) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 3155 "cPickle.c"
      case 19: // $bb23
        var $155=HEAP[$self_addr]; //@line 3155 "cPickle.c"
        var $156=(($155+32)&4294967295); //@line 3155 "cPickle.c"
        var $157=HEAP[$156]; //@line 3155 "cPickle.c"
        HEAP[$_py_tmp24]=$157; //@line 3155 "cPickle.c"
        var $158=HEAP[$self_addr]; //@line 3155 "cPickle.c"
        var $159=(($158+32)&4294967295); //@line 3155 "cPickle.c"
        HEAP[$159]=0; //@line 3155 "cPickle.c"
        var $160=HEAP[$_py_tmp24]; //@line 3155 "cPickle.c"
        var $161=(($160)&4294967295); //@line 3155 "cPickle.c"
        var $162=HEAP[$161]; //@line 3155 "cPickle.c"
        var $163=((($162) - 1)&4294967295); //@line 3155 "cPickle.c"
        var $164=HEAP[$_py_tmp24]; //@line 3155 "cPickle.c"
        var $165=(($164)&4294967295); //@line 3155 "cPickle.c"
        HEAP[$165]=$163; //@line 3155 "cPickle.c"
        var $166=HEAP[$_py_tmp24]; //@line 3155 "cPickle.c"
        var $167=(($166)&4294967295); //@line 3155 "cPickle.c"
        var $168=HEAP[$167]; //@line 3155 "cPickle.c"
        var $169=((($168))|0)==0; //@line 3155 "cPickle.c"
        if ($169) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 3155 "cPickle.c"
      case 20: // $bb25
        var $170=HEAP[$_py_tmp24]; //@line 3155 "cPickle.c"
        var $171=(($170+4)&4294967295); //@line 3155 "cPickle.c"
        var $172=HEAP[$171]; //@line 3155 "cPickle.c"
        var $173=(($172+24)&4294967295); //@line 3155 "cPickle.c"
        var $174=HEAP[$173]; //@line 3155 "cPickle.c"
        var $175=HEAP[$_py_tmp24]; //@line 3155 "cPickle.c"
        FUNCTION_TABLE[$174]($175); //@line 3155 "cPickle.c"
        __label__ = 21; break; //@line 3155 "cPickle.c"
      case 21: // $bb26
        var $176=HEAP[$self_addr]; //@line 3156 "cPickle.c"
        var $177=(($176+60)&4294967295); //@line 3156 "cPickle.c"
        var $178=HEAP[$177]; //@line 3156 "cPickle.c"
        var $179=($178)!=0; //@line 3156 "cPickle.c"
        if ($179) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 3156 "cPickle.c"
      case 22: // $bb27
        var $180=HEAP[$self_addr]; //@line 3156 "cPickle.c"
        var $181=(($180+60)&4294967295); //@line 3156 "cPickle.c"
        var $182=HEAP[$181]; //@line 3156 "cPickle.c"
        HEAP[$_py_tmp28]=$182; //@line 3156 "cPickle.c"
        var $183=HEAP[$self_addr]; //@line 3156 "cPickle.c"
        var $184=(($183+60)&4294967295); //@line 3156 "cPickle.c"
        HEAP[$184]=0; //@line 3156 "cPickle.c"
        var $185=HEAP[$_py_tmp28]; //@line 3156 "cPickle.c"
        var $186=(($185)&4294967295); //@line 3156 "cPickle.c"
        var $187=HEAP[$186]; //@line 3156 "cPickle.c"
        var $188=((($187) - 1)&4294967295); //@line 3156 "cPickle.c"
        var $189=HEAP[$_py_tmp28]; //@line 3156 "cPickle.c"
        var $190=(($189)&4294967295); //@line 3156 "cPickle.c"
        HEAP[$190]=$188; //@line 3156 "cPickle.c"
        var $191=HEAP[$_py_tmp28]; //@line 3156 "cPickle.c"
        var $192=(($191)&4294967295); //@line 3156 "cPickle.c"
        var $193=HEAP[$192]; //@line 3156 "cPickle.c"
        var $194=((($193))|0)==0; //@line 3156 "cPickle.c"
        if ($194) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 3156 "cPickle.c"
      case 23: // $bb29
        var $195=HEAP[$_py_tmp28]; //@line 3156 "cPickle.c"
        var $196=(($195+4)&4294967295); //@line 3156 "cPickle.c"
        var $197=HEAP[$196]; //@line 3156 "cPickle.c"
        var $198=(($197+24)&4294967295); //@line 3156 "cPickle.c"
        var $199=HEAP[$198]; //@line 3156 "cPickle.c"
        var $200=HEAP[$_py_tmp28]; //@line 3156 "cPickle.c"
        FUNCTION_TABLE[$199]($200); //@line 3156 "cPickle.c"
        __label__ = 24; break; //@line 3156 "cPickle.c"
      case 24: // $bb30
        HEAP[$0]=0; //@line 3157 "cPickle.c"
        var $201=HEAP[$0]; //@line 3157 "cPickle.c"
        HEAP[$retval]=$201; //@line 3157 "cPickle.c"
        __label__ = 25; break; //@line 3157 "cPickle.c"
      case 25: // $return
        var $retval31=HEAP[$retval]; //@line 3157 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval31; //@line 3157 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickler_get_pers_func($p) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $p_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$p_addr]=$p;
        var $1=HEAP[$p_addr]; //@line 3163 "cPickle.c"
        var $2=(($1+28)&4294967295); //@line 3163 "cPickle.c"
        var $3=HEAP[$2]; //@line 3163 "cPickle.c"
        var $4=($3)==0; //@line 3163 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3163 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_AttributeError]; //@line 3164 "cPickle.c"
        _PyErr_SetString($5, ((__str68)&4294967295)); //@line 3164 "cPickle.c"
        __label__ = 3; break; //@line 3164 "cPickle.c"
      case 2: // $bb1
        var $6=HEAP[$p_addr]; //@line 3166 "cPickle.c"
        var $7=(($6+28)&4294967295); //@line 3166 "cPickle.c"
        var $8=HEAP[$7]; //@line 3166 "cPickle.c"
        var $9=(($8)&4294967295); //@line 3166 "cPickle.c"
        var $10=HEAP[$9]; //@line 3166 "cPickle.c"
        var $11=((($10) + 1)&4294967295); //@line 3166 "cPickle.c"
        var $12=(($8)&4294967295); //@line 3166 "cPickle.c"
        HEAP[$12]=$11; //@line 3166 "cPickle.c"
        __label__ = 3; break; //@line 3166 "cPickle.c"
      case 3: // $bb2
        var $13=HEAP[$p_addr]; //@line 3167 "cPickle.c"
        var $14=(($13+28)&4294967295); //@line 3167 "cPickle.c"
        var $15=HEAP[$14]; //@line 3167 "cPickle.c"
        HEAP[$0]=$15; //@line 3167 "cPickle.c"
        var $16=HEAP[$0]; //@line 3167 "cPickle.c"
        HEAP[$retval]=$16; //@line 3167 "cPickle.c"
        __label__ = 4; break; //@line 3167 "cPickle.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 3167 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 3167 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickler_set_pers_func($p, $v) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $p_addr=__stackBase__;
        var $v_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$p_addr]=$p;
        HEAP[$v_addr]=$v;
        var $1=HEAP[$v_addr]; //@line 3173 "cPickle.c"
        var $2=($1)==0; //@line 3173 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3173 "cPickle.c"
      case 1: // $bb
        var $3=HEAP[_PyExc_TypeError]; //@line 3174 "cPickle.c"
        _PyErr_SetString($3, ((__str69)&4294967295)); //@line 3174 "cPickle.c"
        HEAP[$0]=-1; //@line 3176 "cPickle.c"
        __label__ = 6; break; //@line 3176 "cPickle.c"
      case 2: // $bb1
        var $4=HEAP[$p_addr]; //@line 3178 "cPickle.c"
        var $5=(($4+28)&4294967295); //@line 3178 "cPickle.c"
        var $6=HEAP[$5]; //@line 3178 "cPickle.c"
        var $7=($6)!=0; //@line 3178 "cPickle.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 3178 "cPickle.c"
      case 3: // $bb2
        var $8=HEAP[$p_addr]; //@line 3178 "cPickle.c"
        var $9=(($8+28)&4294967295); //@line 3178 "cPickle.c"
        var $10=HEAP[$9]; //@line 3178 "cPickle.c"
        var $11=(($10)&4294967295); //@line 3178 "cPickle.c"
        var $12=HEAP[$11]; //@line 3178 "cPickle.c"
        var $13=((($12) - 1)&4294967295); //@line 3178 "cPickle.c"
        var $14=(($10)&4294967295); //@line 3178 "cPickle.c"
        HEAP[$14]=$13; //@line 3178 "cPickle.c"
        var $15=(($10)&4294967295); //@line 3178 "cPickle.c"
        var $16=HEAP[$15]; //@line 3178 "cPickle.c"
        var $17=((($16))|0)==0; //@line 3178 "cPickle.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 3178 "cPickle.c"
      case 4: // $bb3
        var $18=HEAP[$p_addr]; //@line 3178 "cPickle.c"
        var $19=(($18+28)&4294967295); //@line 3178 "cPickle.c"
        var $20=HEAP[$19]; //@line 3178 "cPickle.c"
        var $21=(($20+4)&4294967295); //@line 3178 "cPickle.c"
        var $22=HEAP[$21]; //@line 3178 "cPickle.c"
        var $23=(($22+24)&4294967295); //@line 3178 "cPickle.c"
        var $24=HEAP[$23]; //@line 3178 "cPickle.c"
        var $25=HEAP[$p_addr]; //@line 3178 "cPickle.c"
        var $26=(($25+28)&4294967295); //@line 3178 "cPickle.c"
        var $27=HEAP[$26]; //@line 3178 "cPickle.c"
        FUNCTION_TABLE[$24]($27); //@line 3178 "cPickle.c"
        __label__ = 5; break; //@line 3178 "cPickle.c"
      case 5: // $bb4
        var $28=HEAP[$v_addr]; //@line 3179 "cPickle.c"
        var $29=(($28)&4294967295); //@line 3179 "cPickle.c"
        var $30=HEAP[$29]; //@line 3179 "cPickle.c"
        var $31=((($30) + 1)&4294967295); //@line 3179 "cPickle.c"
        var $32=HEAP[$v_addr]; //@line 3179 "cPickle.c"
        var $33=(($32)&4294967295); //@line 3179 "cPickle.c"
        HEAP[$33]=$31; //@line 3179 "cPickle.c"
        var $34=HEAP[$p_addr]; //@line 3180 "cPickle.c"
        var $35=(($34+28)&4294967295); //@line 3180 "cPickle.c"
        var $36=HEAP[$v_addr]; //@line 3180 "cPickle.c"
        HEAP[$35]=$36; //@line 3180 "cPickle.c"
        HEAP[$0]=0; //@line 3181 "cPickle.c"
        __label__ = 6; break; //@line 3181 "cPickle.c"
      case 6: // $bb5
        var $37=HEAP[$0]; //@line 3176 "cPickle.c"
        HEAP[$retval]=$37; //@line 3176 "cPickle.c"
        __label__ = 7; break; //@line 3176 "cPickle.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 3176 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 3176 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickler_set_inst_pers_func($p, $v) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $p_addr=__stackBase__;
        var $v_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$p_addr]=$p;
        HEAP[$v_addr]=$v;
        var $1=HEAP[$v_addr]; //@line 3187 "cPickle.c"
        var $2=($1)==0; //@line 3187 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3187 "cPickle.c"
      case 1: // $bb
        var $3=HEAP[_PyExc_TypeError]; //@line 3188 "cPickle.c"
        _PyErr_SetString($3, ((__str69)&4294967295)); //@line 3188 "cPickle.c"
        HEAP[$0]=-1; //@line 3190 "cPickle.c"
        __label__ = 6; break; //@line 3190 "cPickle.c"
      case 2: // $bb1
        var $4=HEAP[$p_addr]; //@line 3192 "cPickle.c"
        var $5=(($4+32)&4294967295); //@line 3192 "cPickle.c"
        var $6=HEAP[$5]; //@line 3192 "cPickle.c"
        var $7=($6)!=0; //@line 3192 "cPickle.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 3192 "cPickle.c"
      case 3: // $bb2
        var $8=HEAP[$p_addr]; //@line 3192 "cPickle.c"
        var $9=(($8+32)&4294967295); //@line 3192 "cPickle.c"
        var $10=HEAP[$9]; //@line 3192 "cPickle.c"
        var $11=(($10)&4294967295); //@line 3192 "cPickle.c"
        var $12=HEAP[$11]; //@line 3192 "cPickle.c"
        var $13=((($12) - 1)&4294967295); //@line 3192 "cPickle.c"
        var $14=(($10)&4294967295); //@line 3192 "cPickle.c"
        HEAP[$14]=$13; //@line 3192 "cPickle.c"
        var $15=(($10)&4294967295); //@line 3192 "cPickle.c"
        var $16=HEAP[$15]; //@line 3192 "cPickle.c"
        var $17=((($16))|0)==0; //@line 3192 "cPickle.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 3192 "cPickle.c"
      case 4: // $bb3
        var $18=HEAP[$p_addr]; //@line 3192 "cPickle.c"
        var $19=(($18+32)&4294967295); //@line 3192 "cPickle.c"
        var $20=HEAP[$19]; //@line 3192 "cPickle.c"
        var $21=(($20+4)&4294967295); //@line 3192 "cPickle.c"
        var $22=HEAP[$21]; //@line 3192 "cPickle.c"
        var $23=(($22+24)&4294967295); //@line 3192 "cPickle.c"
        var $24=HEAP[$23]; //@line 3192 "cPickle.c"
        var $25=HEAP[$p_addr]; //@line 3192 "cPickle.c"
        var $26=(($25+32)&4294967295); //@line 3192 "cPickle.c"
        var $27=HEAP[$26]; //@line 3192 "cPickle.c"
        FUNCTION_TABLE[$24]($27); //@line 3192 "cPickle.c"
        __label__ = 5; break; //@line 3192 "cPickle.c"
      case 5: // $bb4
        var $28=HEAP[$v_addr]; //@line 3193 "cPickle.c"
        var $29=(($28)&4294967295); //@line 3193 "cPickle.c"
        var $30=HEAP[$29]; //@line 3193 "cPickle.c"
        var $31=((($30) + 1)&4294967295); //@line 3193 "cPickle.c"
        var $32=HEAP[$v_addr]; //@line 3193 "cPickle.c"
        var $33=(($32)&4294967295); //@line 3193 "cPickle.c"
        HEAP[$33]=$31; //@line 3193 "cPickle.c"
        var $34=HEAP[$p_addr]; //@line 3194 "cPickle.c"
        var $35=(($34+32)&4294967295); //@line 3194 "cPickle.c"
        var $36=HEAP[$v_addr]; //@line 3194 "cPickle.c"
        HEAP[$35]=$36; //@line 3194 "cPickle.c"
        HEAP[$0]=0; //@line 3195 "cPickle.c"
        __label__ = 6; break; //@line 3195 "cPickle.c"
      case 6: // $bb5
        var $37=HEAP[$0]; //@line 3190 "cPickle.c"
        HEAP[$retval]=$37; //@line 3190 "cPickle.c"
        __label__ = 7; break; //@line 3190 "cPickle.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 3190 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 3190 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickler_get_memo($p) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $p_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$p_addr]=$p;
        var $1=HEAP[$p_addr]; //@line 3201 "cPickle.c"
        var $2=(($1+20)&4294967295); //@line 3201 "cPickle.c"
        var $3=HEAP[$2]; //@line 3201 "cPickle.c"
        var $4=($3)==0; //@line 3201 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3201 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_AttributeError]; //@line 3202 "cPickle.c"
        _PyErr_SetString($5, ((__str70)&4294967295)); //@line 3202 "cPickle.c"
        __label__ = 3; break; //@line 3202 "cPickle.c"
      case 2: // $bb1
        var $6=HEAP[$p_addr]; //@line 3204 "cPickle.c"
        var $7=(($6+20)&4294967295); //@line 3204 "cPickle.c"
        var $8=HEAP[$7]; //@line 3204 "cPickle.c"
        var $9=(($8)&4294967295); //@line 3204 "cPickle.c"
        var $10=HEAP[$9]; //@line 3204 "cPickle.c"
        var $11=((($10) + 1)&4294967295); //@line 3204 "cPickle.c"
        var $12=(($8)&4294967295); //@line 3204 "cPickle.c"
        HEAP[$12]=$11; //@line 3204 "cPickle.c"
        __label__ = 3; break; //@line 3204 "cPickle.c"
      case 3: // $bb2
        var $13=HEAP[$p_addr]; //@line 3205 "cPickle.c"
        var $14=(($13+20)&4294967295); //@line 3205 "cPickle.c"
        var $15=HEAP[$14]; //@line 3205 "cPickle.c"
        HEAP[$0]=$15; //@line 3205 "cPickle.c"
        var $16=HEAP[$0]; //@line 3205 "cPickle.c"
        HEAP[$retval]=$16; //@line 3205 "cPickle.c"
        __label__ = 4; break; //@line 3205 "cPickle.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 3205 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 3205 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickler_set_memo($p, $v) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $p_addr=__stackBase__;
        var $v_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$p_addr]=$p;
        HEAP[$v_addr]=$v;
        var $1=HEAP[$v_addr]; //@line 3211 "cPickle.c"
        var $2=($1)==0; //@line 3211 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3211 "cPickle.c"
      case 1: // $bb
        var $3=HEAP[_PyExc_TypeError]; //@line 3212 "cPickle.c"
        _PyErr_SetString($3, ((__str69)&4294967295)); //@line 3212 "cPickle.c"
        HEAP[$0]=-1; //@line 3214 "cPickle.c"
        __label__ = 8; break; //@line 3214 "cPickle.c"
      case 2: // $bb1
        var $4=HEAP[$v_addr]; //@line 3216 "cPickle.c"
        var $5=(($4+4)&4294967295); //@line 3216 "cPickle.c"
        var $6=HEAP[$5]; //@line 3216 "cPickle.c"
        var $7=(($6+84)&4294967295); //@line 3216 "cPickle.c"
        var $8=HEAP[$7]; //@line 3216 "cPickle.c"
        var $9=($8) & 536870912; //@line 3216 "cPickle.c"
        var $10=((($9))|0)==0; //@line 3216 "cPickle.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3216 "cPickle.c"
      case 3: // $bb2
        var $11=HEAP[_PyExc_TypeError]; //@line 3217 "cPickle.c"
        _PyErr_SetString($11, ((__str71)&4294967295)); //@line 3217 "cPickle.c"
        HEAP[$0]=-1; //@line 3218 "cPickle.c"
        __label__ = 8; break; //@line 3218 "cPickle.c"
      case 4: // $bb3
        var $12=HEAP[$p_addr]; //@line 3220 "cPickle.c"
        var $13=(($12+20)&4294967295); //@line 3220 "cPickle.c"
        var $14=HEAP[$13]; //@line 3220 "cPickle.c"
        var $15=($14)!=0; //@line 3220 "cPickle.c"
        if ($15) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 3220 "cPickle.c"
      case 5: // $bb4
        var $16=HEAP[$p_addr]; //@line 3220 "cPickle.c"
        var $17=(($16+20)&4294967295); //@line 3220 "cPickle.c"
        var $18=HEAP[$17]; //@line 3220 "cPickle.c"
        var $19=(($18)&4294967295); //@line 3220 "cPickle.c"
        var $20=HEAP[$19]; //@line 3220 "cPickle.c"
        var $21=((($20) - 1)&4294967295); //@line 3220 "cPickle.c"
        var $22=(($18)&4294967295); //@line 3220 "cPickle.c"
        HEAP[$22]=$21; //@line 3220 "cPickle.c"
        var $23=(($18)&4294967295); //@line 3220 "cPickle.c"
        var $24=HEAP[$23]; //@line 3220 "cPickle.c"
        var $25=((($24))|0)==0; //@line 3220 "cPickle.c"
        if ($25) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3220 "cPickle.c"
      case 6: // $bb5
        var $26=HEAP[$p_addr]; //@line 3220 "cPickle.c"
        var $27=(($26+20)&4294967295); //@line 3220 "cPickle.c"
        var $28=HEAP[$27]; //@line 3220 "cPickle.c"
        var $29=(($28+4)&4294967295); //@line 3220 "cPickle.c"
        var $30=HEAP[$29]; //@line 3220 "cPickle.c"
        var $31=(($30+24)&4294967295); //@line 3220 "cPickle.c"
        var $32=HEAP[$31]; //@line 3220 "cPickle.c"
        var $33=HEAP[$p_addr]; //@line 3220 "cPickle.c"
        var $34=(($33+20)&4294967295); //@line 3220 "cPickle.c"
        var $35=HEAP[$34]; //@line 3220 "cPickle.c"
        FUNCTION_TABLE[$32]($35); //@line 3220 "cPickle.c"
        __label__ = 7; break; //@line 3220 "cPickle.c"
      case 7: // $bb6
        var $36=HEAP[$v_addr]; //@line 3221 "cPickle.c"
        var $37=(($36)&4294967295); //@line 3221 "cPickle.c"
        var $38=HEAP[$37]; //@line 3221 "cPickle.c"
        var $39=((($38) + 1)&4294967295); //@line 3221 "cPickle.c"
        var $40=HEAP[$v_addr]; //@line 3221 "cPickle.c"
        var $41=(($40)&4294967295); //@line 3221 "cPickle.c"
        HEAP[$41]=$39; //@line 3221 "cPickle.c"
        var $42=HEAP[$p_addr]; //@line 3222 "cPickle.c"
        var $43=(($42+20)&4294967295); //@line 3222 "cPickle.c"
        var $44=HEAP[$v_addr]; //@line 3222 "cPickle.c"
        HEAP[$43]=$44; //@line 3222 "cPickle.c"
        HEAP[$0]=0; //@line 3223 "cPickle.c"
        __label__ = 8; break; //@line 3223 "cPickle.c"
      case 8: // $bb7
        var $45=HEAP[$0]; //@line 3214 "cPickle.c"
        HEAP[$retval]=$45; //@line 3214 "cPickle.c"
        __label__ = 9; break; //@line 3214 "cPickle.c"
      case 9: // $return
        var $retval8=HEAP[$retval]; //@line 3214 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval8; //@line 3214 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Pickler_get_error($p) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $p_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$p_addr]=$p;
        var $1=HEAP[_PicklingError]; //@line 3230 "cPickle.c"
        var $2=(($1)&4294967295); //@line 3230 "cPickle.c"
        var $3=HEAP[$2]; //@line 3230 "cPickle.c"
        var $4=((($3) + 1)&4294967295); //@line 3230 "cPickle.c"
        var $5=(($1)&4294967295); //@line 3230 "cPickle.c"
        HEAP[$5]=$4; //@line 3230 "cPickle.c"
        var $6=HEAP[_PicklingError]; //@line 3231 "cPickle.c"
        HEAP[$0]=$6; //@line 3231 "cPickle.c"
        var $7=HEAP[$0]; //@line 3231 "cPickle.c"
        HEAP[$retval]=$7; //@line 3231 "cPickle.c"
        __label__ = 1; break; //@line 3231 "cPickle.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 3231 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 3231 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _find_class($py_module_name, $py_global_name, $fc) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $py_module_name_addr=__stackBase__;
        var $py_global_name_addr=__stackBase__+4;
        var $fc_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $global=__stackBase__+20;
        var $module=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$py_module_name_addr]=$py_module_name;
        HEAP[$py_global_name_addr]=$py_global_name;
        HEAP[$fc_addr]=$fc;
        HEAP[$global]=0; //@line 3288 "cPickle.c"
        var $1=HEAP[$fc_addr]; //@line 3290 "cPickle.c"
        var $2=($1)!=0; //@line 3290 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 3290 "cPickle.c"
      case 1: // $bb
        var $3=HEAP[$fc_addr]; //@line 3291 "cPickle.c"
        var $4=($3)==(__Py_NoneStruct); //@line 3291 "cPickle.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3291 "cPickle.c"
      case 2: // $bb1
        var $5=HEAP[_UnpicklingError]; //@line 3292 "cPickle.c"
        _PyErr_SetString($5, ((__str77)&4294967295)); //@line 3292 "cPickle.c"
        HEAP[$0]=0; //@line 3294 "cPickle.c"
        __label__ = 14; break; //@line 3294 "cPickle.c"
      case 3: // $bb2
        var $6=HEAP[$fc_addr]; //@line 3296 "cPickle.c"
        var $7=HEAP[$py_module_name_addr]; //@line 3296 "cPickle.c"
        var $8=HEAP[$py_global_name_addr]; //@line 3296 "cPickle.c"
        var $9=_PyObject_CallFunctionObjArgs($6, $7, $8, 0); //@line 3296 "cPickle.c"
        HEAP[$0]=$9; //@line 3296 "cPickle.c"
        __label__ = 14; break; //@line 3296 "cPickle.c"
      case 4: // $bb3
        var $10=_PySys_GetObject(((__str7)&4294967295)); //@line 3300 "cPickle.c"
        HEAP[$module]=$10; //@line 3300 "cPickle.c"
        var $11=HEAP[$module]; //@line 3301 "cPickle.c"
        var $12=($11)==0; //@line 3301 "cPickle.c"
        if ($12) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3301 "cPickle.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 3302 "cPickle.c"
        __label__ = 14; break; //@line 3302 "cPickle.c"
      case 6: // $bb5
        var $13=HEAP[$module]; //@line 3304 "cPickle.c"
        var $14=HEAP[$py_module_name_addr]; //@line 3304 "cPickle.c"
        var $15=_PyDict_GetItem($13, $14); //@line 3304 "cPickle.c"
        HEAP[$module]=$15; //@line 3304 "cPickle.c"
        var $16=HEAP[$module]; //@line 3305 "cPickle.c"
        var $17=($16)==0; //@line 3305 "cPickle.c"
        if ($17) { __label__ = 7; break; } else { __label__ = 12; break; } //@line 3305 "cPickle.c"
      case 7: // $bb6
        var $18=HEAP[$py_module_name_addr]; //@line 3306 "cPickle.c"
        var $19=_PyImport_Import($18); //@line 3306 "cPickle.c"
        HEAP[$module]=$19; //@line 3306 "cPickle.c"
        var $20=HEAP[$module]; //@line 3307 "cPickle.c"
        var $21=($20)==0; //@line 3307 "cPickle.c"
        if ($21) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3307 "cPickle.c"
      case 8: // $bb7
        HEAP[$0]=0; //@line 3308 "cPickle.c"
        __label__ = 14; break; //@line 3308 "cPickle.c"
      case 9: // $bb8
        var $22=HEAP[$module]; //@line 3309 "cPickle.c"
        var $23=HEAP[$py_global_name_addr]; //@line 3309 "cPickle.c"
        var $24=_PyObject_GetAttr($22, $23); //@line 3309 "cPickle.c"
        HEAP[$global]=$24; //@line 3309 "cPickle.c"
        var $25=HEAP[$module]; //@line 3310 "cPickle.c"
        var $26=(($25)&4294967295); //@line 3310 "cPickle.c"
        var $27=HEAP[$26]; //@line 3310 "cPickle.c"
        var $28=((($27) - 1)&4294967295); //@line 3310 "cPickle.c"
        var $29=HEAP[$module]; //@line 3310 "cPickle.c"
        var $30=(($29)&4294967295); //@line 3310 "cPickle.c"
        HEAP[$30]=$28; //@line 3310 "cPickle.c"
        var $31=HEAP[$module]; //@line 3310 "cPickle.c"
        var $32=(($31)&4294967295); //@line 3310 "cPickle.c"
        var $33=HEAP[$32]; //@line 3310 "cPickle.c"
        var $34=((($33))|0)==0; //@line 3310 "cPickle.c"
        if ($34) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3310 "cPickle.c"
      case 10: // $bb9
        var $35=HEAP[$module]; //@line 3310 "cPickle.c"
        var $36=(($35+4)&4294967295); //@line 3310 "cPickle.c"
        var $37=HEAP[$36]; //@line 3310 "cPickle.c"
        var $38=(($37+24)&4294967295); //@line 3310 "cPickle.c"
        var $39=HEAP[$38]; //@line 3310 "cPickle.c"
        var $40=HEAP[$module]; //@line 3310 "cPickle.c"
        FUNCTION_TABLE[$39]($40); //@line 3310 "cPickle.c"
        __label__ = 11; break; //@line 3310 "cPickle.c"
      case 11: // $bb10
        __label__ = 13; break; //@line 3310 "cPickle.c"
      case 12: // $bb11
        var $41=HEAP[$module]; //@line 3313 "cPickle.c"
        var $42=HEAP[$py_global_name_addr]; //@line 3313 "cPickle.c"
        var $43=_PyObject_GetAttr($41, $42); //@line 3313 "cPickle.c"
        HEAP[$global]=$43; //@line 3313 "cPickle.c"
        __label__ = 13; break; //@line 3313 "cPickle.c"
      case 13: // $bb12
        var $44=HEAP[$global]; //@line 3314 "cPickle.c"
        HEAP[$0]=$44; //@line 3314 "cPickle.c"
        __label__ = 14; break; //@line 3314 "cPickle.c"
      case 14: // $bb13
        var $45=HEAP[$0]; //@line 3294 "cPickle.c"
        HEAP[$retval]=$45; //@line 3294 "cPickle.c"
        __label__ = 15; break; //@line 3294 "cPickle.c"
      case 15: // $return
        var $retval14=HEAP[$retval]; //@line 3294 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval14; //@line 3294 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _marker($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 3320 "cPickle.c"
        var $2=(($1+52)&4294967295); //@line 3320 "cPickle.c"
        var $3=HEAP[$2]; //@line 3320 "cPickle.c"
        var $4=((($3))|0) <= 0; //@line 3320 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3320 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[_UnpicklingError]; //@line 3321 "cPickle.c"
        _PyErr_SetString($5, ((__str78)&4294967295)); //@line 3321 "cPickle.c"
        HEAP[$0]=-1; //@line 3322 "cPickle.c"
        __label__ = 3; break; //@line 3322 "cPickle.c"
      case 2: // $bb1
        var $6=HEAP[$self_addr]; //@line 3325 "cPickle.c"
        var $7=(($6+48)&4294967295); //@line 3325 "cPickle.c"
        var $8=HEAP[$7]; //@line 3325 "cPickle.c"
        var $9=HEAP[$self_addr]; //@line 3325 "cPickle.c"
        var $10=(($9+52)&4294967295); //@line 3325 "cPickle.c"
        var $11=HEAP[$10]; //@line 3325 "cPickle.c"
        var $12=((($11) - 1)&4294967295); //@line 3325 "cPickle.c"
        var $13=HEAP[$self_addr]; //@line 3325 "cPickle.c"
        var $14=(($13+52)&4294967295); //@line 3325 "cPickle.c"
        HEAP[$14]=$12; //@line 3325 "cPickle.c"
        var $15=HEAP[$self_addr]; //@line 3325 "cPickle.c"
        var $16=(($15+52)&4294967295); //@line 3325 "cPickle.c"
        var $17=HEAP[$16]; //@line 3325 "cPickle.c"
        var $18=(($8+4*$17)&4294967295); //@line 3325 "cPickle.c"
        var $19=HEAP[$18]; //@line 3325 "cPickle.c"
        HEAP[$0]=$19; //@line 3325 "cPickle.c"
        __label__ = 3; break; //@line 3325 "cPickle.c"
      case 3: // $bb2
        var $20=HEAP[$0]; //@line 3322 "cPickle.c"
        HEAP[$retval]=$20; //@line 3322 "cPickle.c"
        __label__ = 4; break; //@line 3322 "cPickle.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 3322 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 3322 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_none($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 3332 "cPickle.c"
        var $2=(($1+32)&4294967295); //@line 3332 "cPickle.c"
        var $3=HEAP[$2]; //@line 3332 "cPickle.c"
        var $4=(($3+8)&4294967295); //@line 3332 "cPickle.c"
        var $5=HEAP[$4]; //@line 3332 "cPickle.c"
        var $6=HEAP[$self_addr]; //@line 3332 "cPickle.c"
        var $7=(($6+32)&4294967295); //@line 3332 "cPickle.c"
        var $8=HEAP[$7]; //@line 3332 "cPickle.c"
        var $9=(($8+12)&4294967295); //@line 3332 "cPickle.c"
        var $10=HEAP[$9]; //@line 3332 "cPickle.c"
        var $11=((($5))|0)==((($10))|0); //@line 3332 "cPickle.c"
        if ($11) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 3332 "cPickle.c"
      case 1: // $bb
        var $12=HEAP[$self_addr]; //@line 3332 "cPickle.c"
        var $13=(($12+32)&4294967295); //@line 3332 "cPickle.c"
        var $14=HEAP[$13]; //@line 3332 "cPickle.c"
        var $15=_Pdata_grow($14); //@line 3332 "cPickle.c"
        var $16=((($15))|0) < 0; //@line 3332 "cPickle.c"
        if ($16) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3332 "cPickle.c"
      case 2: // $bb1
        HEAP[$0]=-1; //@line 3332 "cPickle.c"
        __label__ = 4; break; //@line 3332 "cPickle.c"
      case 3: // $bb2
        var $17=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 3332 "cPickle.c"
        var $18=((($17) + 1)&4294967295); //@line 3332 "cPickle.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$18; //@line 3332 "cPickle.c"
        var $19=HEAP[$self_addr]; //@line 3332 "cPickle.c"
        var $20=(($19+32)&4294967295); //@line 3332 "cPickle.c"
        var $21=HEAP[$20]; //@line 3332 "cPickle.c"
        var $22=(($21+16)&4294967295); //@line 3332 "cPickle.c"
        var $23=HEAP[$22]; //@line 3332 "cPickle.c"
        var $24=HEAP[$self_addr]; //@line 3332 "cPickle.c"
        var $25=(($24+32)&4294967295); //@line 3332 "cPickle.c"
        var $26=HEAP[$25]; //@line 3332 "cPickle.c"
        var $27=(($26+8)&4294967295); //@line 3332 "cPickle.c"
        var $28=HEAP[$27]; //@line 3332 "cPickle.c"
        var $29=(($23+4*$28)&4294967295); //@line 3332 "cPickle.c"
        HEAP[$29]=__Py_NoneStruct; //@line 3332 "cPickle.c"
        var $30=((($28) + 1)&4294967295); //@line 3332 "cPickle.c"
        var $31=(($26+8)&4294967295); //@line 3332 "cPickle.c"
        HEAP[$31]=$30; //@line 3332 "cPickle.c"
        HEAP[$0]=0; //@line 3333 "cPickle.c"
        __label__ = 4; break; //@line 3333 "cPickle.c"
      case 4: // $bb3
        var $32=HEAP[$0]; //@line 3332 "cPickle.c"
        HEAP[$retval]=$32; //@line 3332 "cPickle.c"
        __label__ = 5; break; //@line 3332 "cPickle.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 3332 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 3332 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bad_readline() {
    var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval=__stackBase__;
        var $0=__stackBase__+4;
        var $_alloca_point_=0;
        var $1=HEAP[_UnpicklingError]; //@line 3339 "cPickle.c"
        _PyErr_SetString($1, ((__str79)&4294967295)); //@line 3339 "cPickle.c"
        HEAP[$0]=-1; //@line 3340 "cPickle.c"
        var $2=HEAP[$0]; //@line 3340 "cPickle.c"
        HEAP[$retval]=$2; //@line 3340 "cPickle.c"
        __label__ = 1; break; //@line 3340 "cPickle.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 3340 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 3340 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_int($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $py_int=__stackBase__+12;
        var $endptr=__stackBase__+16;
        var $s=__stackBase__+20;
        var $len=__stackBase__+24;
        var $res=__stackBase__+28;
        var $l=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$py_int]=0; //@line 3346 "cPickle.c"
        HEAP[$res]=-1; //@line 3348 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 3351 "cPickle.c"
        var $2=(($1+64)&4294967295); //@line 3351 "cPickle.c"
        var $3=HEAP[$2]; //@line 3351 "cPickle.c"
        var $4=HEAP[$self_addr]; //@line 3351 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s); //@line 3351 "cPickle.c"
        HEAP[$len]=$5; //@line 3351 "cPickle.c"
        var $6=HEAP[$len]; //@line 3351 "cPickle.c"
        var $7=((($6))|0) < 0; //@line 3351 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3351 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 3351 "cPickle.c"
        __label__ = 25; break; //@line 3351 "cPickle.c"
      case 2: // $bb1
        var $8=HEAP[$len]; //@line 3352 "cPickle.c"
        var $9=((($8))|0) <= 1; //@line 3352 "cPickle.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3352 "cPickle.c"
      case 3: // $bb2
        var $10=_bad_readline(); //@line 3352 "cPickle.c"
        HEAP[$0]=$10; //@line 3352 "cPickle.c"
        __label__ = 25; break; //@line 3352 "cPickle.c"
      case 4: // $bb3
        var $11=HEAP[$s]; //@line 3353 "cPickle.c"
        var $12=HEAP[$len]; //@line 3353 "cPickle.c"
        var $13=_pystrndup($11, $12); //@line 3353 "cPickle.c"
        HEAP[$s]=$13; //@line 3353 "cPickle.c"
        var $14=HEAP[$s]; //@line 3353 "cPickle.c"
        var $15=($14)==0; //@line 3353 "cPickle.c"
        if ($15) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3353 "cPickle.c"
      case 5: // $bb4
        HEAP[$0]=-1; //@line 3353 "cPickle.c"
        __label__ = 25; break; //@line 3353 "cPickle.c"
      case 6: // $bb5
        var $16=___errno_location(); //@line 3355 "cPickle.c"
        HEAP[$16]=0; //@line 3355 "cPickle.c"
        var $17=HEAP[$s]; //@line 3356 "cPickle.c"
        var $18=_strtol($17, $endptr, 0); //@line 3356 "cPickle.c"
        HEAP[$l]=$18; //@line 3356 "cPickle.c"
        var $19=___errno_location(); //@line 3358 "cPickle.c"
        var $20=HEAP[$19]; //@line 3358 "cPickle.c"
        var $21=((($20))|0)!=0; //@line 3358 "cPickle.c"
        if ($21) { __label__ = 9; break; } else { __label__ = 7; break; } //@line 3358 "cPickle.c"
      case 7: // $bb6
        var $22=HEAP[$endptr]; //@line 3358 "cPickle.c"
        var $23=HEAP[$22]; //@line 3358 "cPickle.c"
        var $24=reSign(($23), 8, 0)!=10; //@line 3358 "cPickle.c"
        if ($24) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 3358 "cPickle.c"
      case 8: // $bb7
        var $25=HEAP[$endptr]; //@line 3358 "cPickle.c"
        var $26=(($25+1)&4294967295); //@line 3358 "cPickle.c"
        var $27=HEAP[$26]; //@line 3358 "cPickle.c"
        var $28=reSign(($27), 8, 0)!=0; //@line 3358 "cPickle.c"
        if ($28) { __label__ = 9; break; } else { __label__ = 12; break; } //@line 3358 "cPickle.c"
      case 9: // $bb8
        var $29=___errno_location(); //@line 3361 "cPickle.c"
        HEAP[$29]=0; //@line 3361 "cPickle.c"
        var $30=HEAP[$s]; //@line 3362 "cPickle.c"
        var $31=_PyLong_FromString($30, 0, 0); //@line 3362 "cPickle.c"
        HEAP[$py_int]=$31; //@line 3362 "cPickle.c"
        var $32=HEAP[$py_int]; //@line 3363 "cPickle.c"
        var $33=($32)==0; //@line 3363 "cPickle.c"
        if ($33) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3363 "cPickle.c"
      case 10: // $bb9
        var $34=HEAP[_PyExc_ValueError]; //@line 3364 "cPickle.c"
        _PyErr_SetString($34, ((__str80)&4294967295)); //@line 3364 "cPickle.c"
        __label__ = 24; break; //@line 3364 "cPickle.c"
      case 11: // $bb10
        __label__ = 18; break; //@line 3364 "cPickle.c"
      case 12: // $bb11
        var $35=HEAP[$len]; //@line 3370 "cPickle.c"
        var $36=((($35))|0)!=3; //@line 3370 "cPickle.c"
        if ($36) { __label__ = 17; break; } else { __label__ = 13; break; } //@line 3370 "cPickle.c"
      case 13: // $bb12
        var $37=HEAP[$l]; //@line 3370 "cPickle.c"
        var $38=((($37))|0)==0; //@line 3370 "cPickle.c"
        if ($38) { __label__ = 15; break; } else { __label__ = 14; break; } //@line 3370 "cPickle.c"
      case 14: // $bb13
        var $39=HEAP[$l]; //@line 3370 "cPickle.c"
        var $40=((($39))|0)==1; //@line 3370 "cPickle.c"
        if ($40) { __label__ = 15; break; } else { __label__ = 17; break; } //@line 3370 "cPickle.c"
      case 15: // $bb14
        var $41=HEAP[$l]; //@line 3371 "cPickle.c"
        var $42=_PyBool_FromLong($41); //@line 3371 "cPickle.c"
        HEAP[$py_int]=$42; //@line 3371 "cPickle.c"
        var $43=HEAP[$py_int]; //@line 3371 "cPickle.c"
        var $44=($43)==0; //@line 3371 "cPickle.c"
        if ($44) { __label__ = 24; break; } else { __label__ = 16; break; } //@line 3371 "cPickle.c"
      case 16: // $bb15
        __label__ = 18; break; //@line 3371 "cPickle.c"
      case 17: // $bb16
        var $45=HEAP[$l]; //@line 3374 "cPickle.c"
        var $46=_PyInt_FromLong($45); //@line 3374 "cPickle.c"
        HEAP[$py_int]=$46; //@line 3374 "cPickle.c"
        var $47=HEAP[$py_int]; //@line 3374 "cPickle.c"
        var $48=($47)==0; //@line 3374 "cPickle.c"
        if ($48) { __label__ = 24; break; } else { __label__ = 18; break; } //@line 3374 "cPickle.c"
      case 18: // $bb17
        var $49=HEAP[$s]; //@line 3378 "cPickle.c"
        _free($49); //@line 3378 "cPickle.c"
        var $50=HEAP[$self_addr]; //@line 3379 "cPickle.c"
        var $51=(($50+32)&4294967295); //@line 3379 "cPickle.c"
        var $52=HEAP[$51]; //@line 3379 "cPickle.c"
        var $53=(($52+8)&4294967295); //@line 3379 "cPickle.c"
        var $54=HEAP[$53]; //@line 3379 "cPickle.c"
        var $55=HEAP[$self_addr]; //@line 3379 "cPickle.c"
        var $56=(($55+32)&4294967295); //@line 3379 "cPickle.c"
        var $57=HEAP[$56]; //@line 3379 "cPickle.c"
        var $58=(($57+12)&4294967295); //@line 3379 "cPickle.c"
        var $59=HEAP[$58]; //@line 3379 "cPickle.c"
        var $60=((($54))|0)==((($59))|0); //@line 3379 "cPickle.c"
        if ($60) { __label__ = 19; break; } else { __label__ = 23; break; } //@line 3379 "cPickle.c"
      case 19: // $bb18
        var $61=HEAP[$self_addr]; //@line 3379 "cPickle.c"
        var $62=(($61+32)&4294967295); //@line 3379 "cPickle.c"
        var $63=HEAP[$62]; //@line 3379 "cPickle.c"
        var $64=_Pdata_grow($63); //@line 3379 "cPickle.c"
        var $65=((($64))|0) < 0; //@line 3379 "cPickle.c"
        if ($65) { __label__ = 20; break; } else { __label__ = 23; break; } //@line 3379 "cPickle.c"
      case 20: // $bb19
        var $66=HEAP[$py_int]; //@line 3379 "cPickle.c"
        var $67=(($66)&4294967295); //@line 3379 "cPickle.c"
        var $68=HEAP[$67]; //@line 3379 "cPickle.c"
        var $69=((($68) - 1)&4294967295); //@line 3379 "cPickle.c"
        var $70=HEAP[$py_int]; //@line 3379 "cPickle.c"
        var $71=(($70)&4294967295); //@line 3379 "cPickle.c"
        HEAP[$71]=$69; //@line 3379 "cPickle.c"
        var $72=HEAP[$py_int]; //@line 3379 "cPickle.c"
        var $73=(($72)&4294967295); //@line 3379 "cPickle.c"
        var $74=HEAP[$73]; //@line 3379 "cPickle.c"
        var $75=((($74))|0)==0; //@line 3379 "cPickle.c"
        if ($75) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 3379 "cPickle.c"
      case 21: // $bb20
        var $76=HEAP[$py_int]; //@line 3379 "cPickle.c"
        var $77=(($76+4)&4294967295); //@line 3379 "cPickle.c"
        var $78=HEAP[$77]; //@line 3379 "cPickle.c"
        var $79=(($78+24)&4294967295); //@line 3379 "cPickle.c"
        var $80=HEAP[$79]; //@line 3379 "cPickle.c"
        var $81=HEAP[$py_int]; //@line 3379 "cPickle.c"
        FUNCTION_TABLE[$80]($81); //@line 3379 "cPickle.c"
        __label__ = 22; break; //@line 3379 "cPickle.c"
      case 22: // $bb21
        HEAP[$0]=-1; //@line 3379 "cPickle.c"
        __label__ = 25; break; //@line 3379 "cPickle.c"
      case 23: // $bb22
        var $82=HEAP[$self_addr]; //@line 3379 "cPickle.c"
        var $83=(($82+32)&4294967295); //@line 3379 "cPickle.c"
        var $84=HEAP[$83]; //@line 3379 "cPickle.c"
        var $85=(($84+16)&4294967295); //@line 3379 "cPickle.c"
        var $86=HEAP[$85]; //@line 3379 "cPickle.c"
        var $87=HEAP[$self_addr]; //@line 3379 "cPickle.c"
        var $88=(($87+32)&4294967295); //@line 3379 "cPickle.c"
        var $89=HEAP[$88]; //@line 3379 "cPickle.c"
        var $90=(($89+8)&4294967295); //@line 3379 "cPickle.c"
        var $91=HEAP[$90]; //@line 3379 "cPickle.c"
        var $92=(($86+4*$91)&4294967295); //@line 3379 "cPickle.c"
        var $93=HEAP[$py_int]; //@line 3379 "cPickle.c"
        HEAP[$92]=$93; //@line 3379 "cPickle.c"
        var $94=((($91) + 1)&4294967295); //@line 3379 "cPickle.c"
        var $95=(($89+8)&4294967295); //@line 3379 "cPickle.c"
        HEAP[$95]=$94; //@line 3379 "cPickle.c"
        HEAP[$0]=0; //@line 3380 "cPickle.c"
        __label__ = 25; break; //@line 3380 "cPickle.c"
      case 24: // $finally
        var $96=HEAP[$s]; //@line 3383 "cPickle.c"
        _free($96); //@line 3383 "cPickle.c"
        var $97=HEAP[$res]; //@line 3385 "cPickle.c"
        HEAP[$0]=$97; //@line 3385 "cPickle.c"
        __label__ = 25; break; //@line 3385 "cPickle.c"
      case 25: // $bb23
        var $98=HEAP[$0]; //@line 3351 "cPickle.c"
        HEAP[$retval]=$98; //@line 3351 "cPickle.c"
        __label__ = 26; break; //@line 3351 "cPickle.c"
      case 26: // $return
        var $retval24=HEAP[$retval]; //@line 3351 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval24; //@line 3351 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_bool($self, $boolean) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $boolean_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$boolean_addr]=$boolean;
        var $1=HEAP[$boolean_addr]; //@line 3391 "cPickle.c"
        var $2=($1)!=(__Py_TrueStruct); //@line 3391 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 3391 "cPickle.c"
      case 1: // $bb
        var $3=HEAP[$boolean_addr]; //@line 3391 "cPickle.c"
        var $4=($3)!=(__Py_ZeroStruct); //@line 3391 "cPickle.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3391 "cPickle.c"
      case 2: // $bb1
        ___assert_fail(((__str81)&4294967295), ((__str15)&4294967295), 3391, ((___PRETTY_FUNCTION___12572)&4294967295)); //@line 3391 "cPickle.c"
        throw "Reached an unreachable! Original .ll line: 13959"; //@line 3391 "cPickle.c"
      case 3: // $bb2
        var $5=HEAP[$self_addr]; //@line 3392 "cPickle.c"
        var $6=(($5+32)&4294967295); //@line 3392 "cPickle.c"
        var $7=HEAP[$6]; //@line 3392 "cPickle.c"
        var $8=(($7+8)&4294967295); //@line 3392 "cPickle.c"
        var $9=HEAP[$8]; //@line 3392 "cPickle.c"
        var $10=HEAP[$self_addr]; //@line 3392 "cPickle.c"
        var $11=(($10+32)&4294967295); //@line 3392 "cPickle.c"
        var $12=HEAP[$11]; //@line 3392 "cPickle.c"
        var $13=(($12+12)&4294967295); //@line 3392 "cPickle.c"
        var $14=HEAP[$13]; //@line 3392 "cPickle.c"
        var $15=((($9))|0)==((($14))|0); //@line 3392 "cPickle.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 3392 "cPickle.c"
      case 4: // $bb3
        var $16=HEAP[$self_addr]; //@line 3392 "cPickle.c"
        var $17=(($16+32)&4294967295); //@line 3392 "cPickle.c"
        var $18=HEAP[$17]; //@line 3392 "cPickle.c"
        var $19=_Pdata_grow($18); //@line 3392 "cPickle.c"
        var $20=((($19))|0) < 0; //@line 3392 "cPickle.c"
        if ($20) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3392 "cPickle.c"
      case 5: // $bb4
        HEAP[$0]=-1; //@line 3392 "cPickle.c"
        __label__ = 7; break; //@line 3392 "cPickle.c"
      case 6: // $bb5
        var $21=HEAP[$boolean_addr]; //@line 3392 "cPickle.c"
        var $22=(($21)&4294967295); //@line 3392 "cPickle.c"
        var $23=HEAP[$22]; //@line 3392 "cPickle.c"
        var $24=((($23) + 1)&4294967295); //@line 3392 "cPickle.c"
        var $25=HEAP[$boolean_addr]; //@line 3392 "cPickle.c"
        var $26=(($25)&4294967295); //@line 3392 "cPickle.c"
        HEAP[$26]=$24; //@line 3392 "cPickle.c"
        var $27=HEAP[$self_addr]; //@line 3392 "cPickle.c"
        var $28=(($27+32)&4294967295); //@line 3392 "cPickle.c"
        var $29=HEAP[$28]; //@line 3392 "cPickle.c"
        var $30=(($29+16)&4294967295); //@line 3392 "cPickle.c"
        var $31=HEAP[$30]; //@line 3392 "cPickle.c"
        var $32=HEAP[$self_addr]; //@line 3392 "cPickle.c"
        var $33=(($32+32)&4294967295); //@line 3392 "cPickle.c"
        var $34=HEAP[$33]; //@line 3392 "cPickle.c"
        var $35=(($34+8)&4294967295); //@line 3392 "cPickle.c"
        var $36=HEAP[$35]; //@line 3392 "cPickle.c"
        var $37=(($31+4*$36)&4294967295); //@line 3392 "cPickle.c"
        var $38=HEAP[$boolean_addr]; //@line 3392 "cPickle.c"
        HEAP[$37]=$38; //@line 3392 "cPickle.c"
        var $39=((($36) + 1)&4294967295); //@line 3392 "cPickle.c"
        var $40=(($34+8)&4294967295); //@line 3392 "cPickle.c"
        HEAP[$40]=$39; //@line 3392 "cPickle.c"
        HEAP[$0]=0; //@line 3393 "cPickle.c"
        __label__ = 7; break; //@line 3393 "cPickle.c"
      case 7: // $bb6
        var $41=HEAP[$0]; //@line 3392 "cPickle.c"
        HEAP[$retval]=$41; //@line 3392 "cPickle.c"
        __label__ = 8; break; //@line 3392 "cPickle.c"
      case 8: // $return
        var $retval7=HEAP[$retval]; //@line 3392 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 3392 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _calc_binint($s, $x) {
    var __stackBase__  = STACKTOP; STACKTOP += 25; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 25);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $s_addr=__stackBase__;
        var $x_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $c=__stackBase__+16;
        var $i=__stackBase__+17;
        var $l=__stackBase__+21;
        var $_alloca_point_=0;
        HEAP[$s_addr]=$s;
        HEAP[$x_addr]=$x;
        HEAP[$i]=0; //@line 3408 "cPickle.c"
        HEAP[$l]=0; //@line 3408 "cPickle.c"
        __label__ = 2; break; //@line 3408 "cPickle.c"
      case 1: // $bb
        var $1=HEAP[$s_addr]; //@line 3409 "cPickle.c"
        var $2=HEAP[$i]; //@line 3409 "cPickle.c"
        var $3=(($1+$2)&4294967295); //@line 3409 "cPickle.c"
        var $4=HEAP[$3]; //@line 3409 "cPickle.c"
        HEAP[$c]=$4; //@line 3409 "cPickle.c"
        var $5=HEAP[$c]; //@line 3410 "cPickle.c"
        var $6=unSign(($5), 8, 0); //@line 3410 "cPickle.c"
        var $7=HEAP[$i]; //@line 3410 "cPickle.c"
        var $8=((($7) * 8)&4294967295); //@line 3410 "cPickle.c"
        var $9=($6) << ($8); //@line 3410 "cPickle.c"
        var $10=HEAP[$l]; //@line 3410 "cPickle.c"
        var $11=($9) | ($10); //@line 3410 "cPickle.c"
        HEAP[$l]=$11; //@line 3410 "cPickle.c"
        var $12=HEAP[$i]; //@line 3408 "cPickle.c"
        var $13=((($12) + 1)&4294967295); //@line 3408 "cPickle.c"
        HEAP[$i]=$13; //@line 3408 "cPickle.c"
        __label__ = 2; break; //@line 3408 "cPickle.c"
      case 2: // $bb1
        var $14=HEAP[$i]; //@line 3408 "cPickle.c"
        var $15=HEAP[$x_addr]; //@line 3408 "cPickle.c"
        var $16=((($14))|0) < ((($15))|0); //@line 3408 "cPickle.c"
        if ($16) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 3408 "cPickle.c"
      case 3: // $bb2
        var $17=HEAP[$l]; //@line 3420 "cPickle.c"
        HEAP[$0]=$17; //@line 3420 "cPickle.c"
        var $18=HEAP[$0]; //@line 3420 "cPickle.c"
        HEAP[$retval]=$18; //@line 3420 "cPickle.c"
        __label__ = 4; break; //@line 3420 "cPickle.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 3420 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 3420 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_binintx($self, $s, $x) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $s_addr=__stackBase__+4;
        var $x_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $py_int=__stackBase__+20;
        var $l=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$s_addr]=$s;
        HEAP[$x_addr]=$x;
        HEAP[$py_int]=0; //@line 3427 "cPickle.c"
        var $1=HEAP[$s_addr]; //@line 3430 "cPickle.c"
        var $2=HEAP[$x_addr]; //@line 3430 "cPickle.c"
        var $3=_calc_binint($1, $2); //@line 3430 "cPickle.c"
        HEAP[$l]=$3; //@line 3430 "cPickle.c"
        var $4=HEAP[$l]; //@line 3432 "cPickle.c"
        var $5=_PyInt_FromLong($4); //@line 3432 "cPickle.c"
        HEAP[$py_int]=$5; //@line 3432 "cPickle.c"
        var $6=HEAP[$py_int]; //@line 3432 "cPickle.c"
        var $7=($6)==0; //@line 3432 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3432 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 3433 "cPickle.c"
        __label__ = 8; break; //@line 3433 "cPickle.c"
      case 2: // $bb1
        var $8=HEAP[$self_addr]; //@line 3435 "cPickle.c"
        var $9=(($8+32)&4294967295); //@line 3435 "cPickle.c"
        var $10=HEAP[$9]; //@line 3435 "cPickle.c"
        var $11=(($10+8)&4294967295); //@line 3435 "cPickle.c"
        var $12=HEAP[$11]; //@line 3435 "cPickle.c"
        var $13=HEAP[$self_addr]; //@line 3435 "cPickle.c"
        var $14=(($13+32)&4294967295); //@line 3435 "cPickle.c"
        var $15=HEAP[$14]; //@line 3435 "cPickle.c"
        var $16=(($15+12)&4294967295); //@line 3435 "cPickle.c"
        var $17=HEAP[$16]; //@line 3435 "cPickle.c"
        var $18=((($12))|0)==((($17))|0); //@line 3435 "cPickle.c"
        if ($18) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 3435 "cPickle.c"
      case 3: // $bb2
        var $19=HEAP[$self_addr]; //@line 3435 "cPickle.c"
        var $20=(($19+32)&4294967295); //@line 3435 "cPickle.c"
        var $21=HEAP[$20]; //@line 3435 "cPickle.c"
        var $22=_Pdata_grow($21); //@line 3435 "cPickle.c"
        var $23=((($22))|0) < 0; //@line 3435 "cPickle.c"
        if ($23) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 3435 "cPickle.c"
      case 4: // $bb3
        var $24=HEAP[$py_int]; //@line 3435 "cPickle.c"
        var $25=(($24)&4294967295); //@line 3435 "cPickle.c"
        var $26=HEAP[$25]; //@line 3435 "cPickle.c"
        var $27=((($26) - 1)&4294967295); //@line 3435 "cPickle.c"
        var $28=HEAP[$py_int]; //@line 3435 "cPickle.c"
        var $29=(($28)&4294967295); //@line 3435 "cPickle.c"
        HEAP[$29]=$27; //@line 3435 "cPickle.c"
        var $30=HEAP[$py_int]; //@line 3435 "cPickle.c"
        var $31=(($30)&4294967295); //@line 3435 "cPickle.c"
        var $32=HEAP[$31]; //@line 3435 "cPickle.c"
        var $33=((($32))|0)==0; //@line 3435 "cPickle.c"
        if ($33) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3435 "cPickle.c"
      case 5: // $bb4
        var $34=HEAP[$py_int]; //@line 3435 "cPickle.c"
        var $35=(($34+4)&4294967295); //@line 3435 "cPickle.c"
        var $36=HEAP[$35]; //@line 3435 "cPickle.c"
        var $37=(($36+24)&4294967295); //@line 3435 "cPickle.c"
        var $38=HEAP[$37]; //@line 3435 "cPickle.c"
        var $39=HEAP[$py_int]; //@line 3435 "cPickle.c"
        FUNCTION_TABLE[$38]($39); //@line 3435 "cPickle.c"
        __label__ = 6; break; //@line 3435 "cPickle.c"
      case 6: // $bb5
        HEAP[$0]=-1; //@line 3435 "cPickle.c"
        __label__ = 8; break; //@line 3435 "cPickle.c"
      case 7: // $bb6
        var $40=HEAP[$self_addr]; //@line 3435 "cPickle.c"
        var $41=(($40+32)&4294967295); //@line 3435 "cPickle.c"
        var $42=HEAP[$41]; //@line 3435 "cPickle.c"
        var $43=(($42+16)&4294967295); //@line 3435 "cPickle.c"
        var $44=HEAP[$43]; //@line 3435 "cPickle.c"
        var $45=HEAP[$self_addr]; //@line 3435 "cPickle.c"
        var $46=(($45+32)&4294967295); //@line 3435 "cPickle.c"
        var $47=HEAP[$46]; //@line 3435 "cPickle.c"
        var $48=(($47+8)&4294967295); //@line 3435 "cPickle.c"
        var $49=HEAP[$48]; //@line 3435 "cPickle.c"
        var $50=(($44+4*$49)&4294967295); //@line 3435 "cPickle.c"
        var $51=HEAP[$py_int]; //@line 3435 "cPickle.c"
        HEAP[$50]=$51; //@line 3435 "cPickle.c"
        var $52=((($49) + 1)&4294967295); //@line 3435 "cPickle.c"
        var $53=(($47+8)&4294967295); //@line 3435 "cPickle.c"
        HEAP[$53]=$52; //@line 3435 "cPickle.c"
        HEAP[$0]=0; //@line 3436 "cPickle.c"
        __label__ = 8; break; //@line 3436 "cPickle.c"
      case 8: // $bb7
        var $54=HEAP[$0]; //@line 3433 "cPickle.c"
        HEAP[$retval]=$54; //@line 3433 "cPickle.c"
        __label__ = 9; break; //@line 3433 "cPickle.c"
      case 9: // $return
        var $retval8=HEAP[$retval]; //@line 3433 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval8; //@line 3433 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_binint($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $s=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 3445 "cPickle.c"
        var $2=(($1+60)&4294967295); //@line 3445 "cPickle.c"
        var $3=HEAP[$2]; //@line 3445 "cPickle.c"
        var $4=HEAP[$self_addr]; //@line 3445 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s, 4); //@line 3445 "cPickle.c"
        var $6=((($5))|0) < 0; //@line 3445 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3445 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 3446 "cPickle.c"
        __label__ = 3; break; //@line 3446 "cPickle.c"
      case 2: // $bb1
        var $7=HEAP[$s]; //@line 3448 "cPickle.c"
        var $8=HEAP[$self_addr]; //@line 3448 "cPickle.c"
        var $9=_load_binintx($8, $7, 4); //@line 3448 "cPickle.c"
        HEAP[$0]=$9; //@line 3448 "cPickle.c"
        __label__ = 3; break; //@line 3448 "cPickle.c"
      case 3: // $bb2
        var $10=HEAP[$0]; //@line 3446 "cPickle.c"
        HEAP[$retval]=$10; //@line 3446 "cPickle.c"
        __label__ = 4; break; //@line 3446 "cPickle.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 3446 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 3446 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_binint1($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $s=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 3457 "cPickle.c"
        var $2=(($1+60)&4294967295); //@line 3457 "cPickle.c"
        var $3=HEAP[$2]; //@line 3457 "cPickle.c"
        var $4=HEAP[$self_addr]; //@line 3457 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s, 1); //@line 3457 "cPickle.c"
        var $6=((($5))|0) < 0; //@line 3457 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3457 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 3458 "cPickle.c"
        __label__ = 3; break; //@line 3458 "cPickle.c"
      case 2: // $bb1
        var $7=HEAP[$s]; //@line 3460 "cPickle.c"
        var $8=HEAP[$self_addr]; //@line 3460 "cPickle.c"
        var $9=_load_binintx($8, $7, 1); //@line 3460 "cPickle.c"
        HEAP[$0]=$9; //@line 3460 "cPickle.c"
        __label__ = 3; break; //@line 3460 "cPickle.c"
      case 3: // $bb2
        var $10=HEAP[$0]; //@line 3458 "cPickle.c"
        HEAP[$retval]=$10; //@line 3458 "cPickle.c"
        __label__ = 4; break; //@line 3458 "cPickle.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 3458 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 3458 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_binint2($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $s=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 3469 "cPickle.c"
        var $2=(($1+60)&4294967295); //@line 3469 "cPickle.c"
        var $3=HEAP[$2]; //@line 3469 "cPickle.c"
        var $4=HEAP[$self_addr]; //@line 3469 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s, 2); //@line 3469 "cPickle.c"
        var $6=((($5))|0) < 0; //@line 3469 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3469 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 3470 "cPickle.c"
        __label__ = 3; break; //@line 3470 "cPickle.c"
      case 2: // $bb1
        var $7=HEAP[$s]; //@line 3472 "cPickle.c"
        var $8=HEAP[$self_addr]; //@line 3472 "cPickle.c"
        var $9=_load_binintx($8, $7, 2); //@line 3472 "cPickle.c"
        HEAP[$0]=$9; //@line 3472 "cPickle.c"
        __label__ = 3; break; //@line 3472 "cPickle.c"
      case 3: // $bb2
        var $10=HEAP[$0]; //@line 3470 "cPickle.c"
        HEAP[$retval]=$10; //@line 3470 "cPickle.c"
        __label__ = 4; break; //@line 3470 "cPickle.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 3470 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 3470 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_long($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $l=__stackBase__+12;
        var $end=__stackBase__+16;
        var $s=__stackBase__+20;
        var $len=__stackBase__+24;
        var $res=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$l]=0; //@line 3478 "cPickle.c"
        HEAP[$res]=-1; //@line 3480 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 3482 "cPickle.c"
        var $2=(($1+64)&4294967295); //@line 3482 "cPickle.c"
        var $3=HEAP[$2]; //@line 3482 "cPickle.c"
        var $4=HEAP[$self_addr]; //@line 3482 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s); //@line 3482 "cPickle.c"
        HEAP[$len]=$5; //@line 3482 "cPickle.c"
        var $6=HEAP[$len]; //@line 3482 "cPickle.c"
        var $7=((($6))|0) < 0; //@line 3482 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3482 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 3482 "cPickle.c"
        __label__ = 14; break; //@line 3482 "cPickle.c"
      case 2: // $bb1
        var $8=HEAP[$len]; //@line 3483 "cPickle.c"
        var $9=((($8))|0) <= 1; //@line 3483 "cPickle.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3483 "cPickle.c"
      case 3: // $bb2
        var $10=_bad_readline(); //@line 3483 "cPickle.c"
        HEAP[$0]=$10; //@line 3483 "cPickle.c"
        __label__ = 14; break; //@line 3483 "cPickle.c"
      case 4: // $bb3
        var $11=HEAP[$s]; //@line 3484 "cPickle.c"
        var $12=HEAP[$len]; //@line 3484 "cPickle.c"
        var $13=_pystrndup($11, $12); //@line 3484 "cPickle.c"
        HEAP[$s]=$13; //@line 3484 "cPickle.c"
        var $14=HEAP[$s]; //@line 3484 "cPickle.c"
        var $15=($14)==0; //@line 3484 "cPickle.c"
        if ($15) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3484 "cPickle.c"
      case 5: // $bb4
        HEAP[$0]=-1; //@line 3484 "cPickle.c"
        __label__ = 14; break; //@line 3484 "cPickle.c"
      case 6: // $bb5
        var $16=HEAP[$s]; //@line 3486 "cPickle.c"
        var $17=_PyLong_FromString($16, $end, 0); //@line 3486 "cPickle.c"
        HEAP[$l]=$17; //@line 3486 "cPickle.c"
        var $18=HEAP[$l]; //@line 3486 "cPickle.c"
        var $19=($18)==0; //@line 3486 "cPickle.c"
        if ($19) { __label__ = 13; break; } else { __label__ = 7; break; } //@line 3486 "cPickle.c"
      case 7: // $bb6
        var $20=HEAP[$s]; //@line 3489 "cPickle.c"
        _free($20); //@line 3489 "cPickle.c"
        var $21=HEAP[$self_addr]; //@line 3490 "cPickle.c"
        var $22=(($21+32)&4294967295); //@line 3490 "cPickle.c"
        var $23=HEAP[$22]; //@line 3490 "cPickle.c"
        var $24=(($23+8)&4294967295); //@line 3490 "cPickle.c"
        var $25=HEAP[$24]; //@line 3490 "cPickle.c"
        var $26=HEAP[$self_addr]; //@line 3490 "cPickle.c"
        var $27=(($26+32)&4294967295); //@line 3490 "cPickle.c"
        var $28=HEAP[$27]; //@line 3490 "cPickle.c"
        var $29=(($28+12)&4294967295); //@line 3490 "cPickle.c"
        var $30=HEAP[$29]; //@line 3490 "cPickle.c"
        var $31=((($25))|0)==((($30))|0); //@line 3490 "cPickle.c"
        if ($31) { __label__ = 8; break; } else { __label__ = 12; break; } //@line 3490 "cPickle.c"
      case 8: // $bb7
        var $32=HEAP[$self_addr]; //@line 3490 "cPickle.c"
        var $33=(($32+32)&4294967295); //@line 3490 "cPickle.c"
        var $34=HEAP[$33]; //@line 3490 "cPickle.c"
        var $35=_Pdata_grow($34); //@line 3490 "cPickle.c"
        var $36=((($35))|0) < 0; //@line 3490 "cPickle.c"
        if ($36) { __label__ = 9; break; } else { __label__ = 12; break; } //@line 3490 "cPickle.c"
      case 9: // $bb8
        var $37=HEAP[$l]; //@line 3490 "cPickle.c"
        var $38=(($37)&4294967295); //@line 3490 "cPickle.c"
        var $39=HEAP[$38]; //@line 3490 "cPickle.c"
        var $40=((($39) - 1)&4294967295); //@line 3490 "cPickle.c"
        var $41=HEAP[$l]; //@line 3490 "cPickle.c"
        var $42=(($41)&4294967295); //@line 3490 "cPickle.c"
        HEAP[$42]=$40; //@line 3490 "cPickle.c"
        var $43=HEAP[$l]; //@line 3490 "cPickle.c"
        var $44=(($43)&4294967295); //@line 3490 "cPickle.c"
        var $45=HEAP[$44]; //@line 3490 "cPickle.c"
        var $46=((($45))|0)==0; //@line 3490 "cPickle.c"
        if ($46) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3490 "cPickle.c"
      case 10: // $bb9
        var $47=HEAP[$l]; //@line 3490 "cPickle.c"
        var $48=(($47+4)&4294967295); //@line 3490 "cPickle.c"
        var $49=HEAP[$48]; //@line 3490 "cPickle.c"
        var $50=(($49+24)&4294967295); //@line 3490 "cPickle.c"
        var $51=HEAP[$50]; //@line 3490 "cPickle.c"
        var $52=HEAP[$l]; //@line 3490 "cPickle.c"
        FUNCTION_TABLE[$51]($52); //@line 3490 "cPickle.c"
        __label__ = 11; break; //@line 3490 "cPickle.c"
      case 11: // $bb10
        HEAP[$0]=-1; //@line 3490 "cPickle.c"
        __label__ = 14; break; //@line 3490 "cPickle.c"
      case 12: // $bb11
        var $53=HEAP[$self_addr]; //@line 3490 "cPickle.c"
        var $54=(($53+32)&4294967295); //@line 3490 "cPickle.c"
        var $55=HEAP[$54]; //@line 3490 "cPickle.c"
        var $56=(($55+16)&4294967295); //@line 3490 "cPickle.c"
        var $57=HEAP[$56]; //@line 3490 "cPickle.c"
        var $58=HEAP[$self_addr]; //@line 3490 "cPickle.c"
        var $59=(($58+32)&4294967295); //@line 3490 "cPickle.c"
        var $60=HEAP[$59]; //@line 3490 "cPickle.c"
        var $61=(($60+8)&4294967295); //@line 3490 "cPickle.c"
        var $62=HEAP[$61]; //@line 3490 "cPickle.c"
        var $63=(($57+4*$62)&4294967295); //@line 3490 "cPickle.c"
        var $64=HEAP[$l]; //@line 3490 "cPickle.c"
        HEAP[$63]=$64; //@line 3490 "cPickle.c"
        var $65=((($62) + 1)&4294967295); //@line 3490 "cPickle.c"
        var $66=(($60+8)&4294967295); //@line 3490 "cPickle.c"
        HEAP[$66]=$65; //@line 3490 "cPickle.c"
        HEAP[$0]=0; //@line 3491 "cPickle.c"
        __label__ = 14; break; //@line 3491 "cPickle.c"
      case 13: // $finally
        var $67=HEAP[$s]; //@line 3494 "cPickle.c"
        _free($67); //@line 3494 "cPickle.c"
        var $68=HEAP[$res]; //@line 3496 "cPickle.c"
        HEAP[$0]=$68; //@line 3496 "cPickle.c"
        __label__ = 14; break; //@line 3496 "cPickle.c"
      case 14: // $bb12
        var $69=HEAP[$0]; //@line 3482 "cPickle.c"
        HEAP[$retval]=$69; //@line 3482 "cPickle.c"
        __label__ = 15; break; //@line 3482 "cPickle.c"
      case 15: // $return
        var $retval13=HEAP[$retval]; //@line 3482 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 3482 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_counted_long($self, $size) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $size_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $i=__stackBase__+16;
        var $nbytes=__stackBase__+20;
        var $pdata=__stackBase__+24;
        var $along=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$size_addr]=$size;
        var $1=HEAP[$size_addr]; //@line 3510 "cPickle.c"
        var $2=((($1))|0)!=1; //@line 3510 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 3510 "cPickle.c"
      case 1: // $bb
        var $3=HEAP[$size_addr]; //@line 3510 "cPickle.c"
        var $4=((($3))|0)!=4; //@line 3510 "cPickle.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3510 "cPickle.c"
      case 2: // $bb1
        ___assert_fail(((__str82)&4294967295), ((__str15)&4294967295), 3510, ((___PRETTY_FUNCTION___12743)&4294967295)); //@line 3510 "cPickle.c"
        throw "Reached an unreachable! Original .ll line: 14504"; //@line 3510 "cPickle.c"
      case 3: // $bb2
        var $5=HEAP[$self_addr]; //@line 3511 "cPickle.c"
        var $6=(($5+60)&4294967295); //@line 3511 "cPickle.c"
        var $7=HEAP[$6]; //@line 3511 "cPickle.c"
        var $8=HEAP[$self_addr]; //@line 3511 "cPickle.c"
        var $9=HEAP[$size_addr]; //@line 3511 "cPickle.c"
        var $10=FUNCTION_TABLE[$7]($8, $nbytes, $9); //@line 3511 "cPickle.c"
        HEAP[$i]=$10; //@line 3511 "cPickle.c"
        var $11=HEAP[$i]; //@line 3512 "cPickle.c"
        var $12=((($11))|0) < 0; //@line 3512 "cPickle.c"
        if ($12) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 3512 "cPickle.c"
      case 4: // $bb3
        HEAP[$0]=-1; //@line 3512 "cPickle.c"
        __label__ = 20; break; //@line 3512 "cPickle.c"
      case 5: // $bb4
        var $13=HEAP[$nbytes]; //@line 3514 "cPickle.c"
        var $14=HEAP[$size_addr]; //@line 3514 "cPickle.c"
        var $15=_calc_binint($13, $14); //@line 3514 "cPickle.c"
        HEAP[$size_addr]=$15; //@line 3514 "cPickle.c"
        var $16=HEAP[$size_addr]; //@line 3515 "cPickle.c"
        var $17=((($16))|0) < 0; //@line 3515 "cPickle.c"
        if ($17) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3515 "cPickle.c"
      case 6: // $bb5
        var $18=HEAP[_UnpicklingError]; //@line 3519 "cPickle.c"
        _PyErr_SetString($18, ((__str83)&4294967295)); //@line 3519 "cPickle.c"
        HEAP[$0]=-1; //@line 3521 "cPickle.c"
        __label__ = 20; break; //@line 3521 "cPickle.c"
      case 7: // $bb6
        var $19=HEAP[$size_addr]; //@line 3524 "cPickle.c"
        var $20=((($19))|0)==0; //@line 3524 "cPickle.c"
        if ($20) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3524 "cPickle.c"
      case 8: // $bb7
        var $21=_PyLong_FromLong(0); //@line 3525 "cPickle.c"
        HEAP[$along]=$21; //@line 3525 "cPickle.c"
        __label__ = 12; break; //@line 3525 "cPickle.c"
      case 9: // $bb8
        var $22=HEAP[$self_addr]; //@line 3528 "cPickle.c"
        var $23=(($22+60)&4294967295); //@line 3528 "cPickle.c"
        var $24=HEAP[$23]; //@line 3528 "cPickle.c"
        var $25=HEAP[$self_addr]; //@line 3528 "cPickle.c"
        var $26=HEAP[$size_addr]; //@line 3528 "cPickle.c"
        var $27=FUNCTION_TABLE[$24]($25, $pdata, $26); //@line 3528 "cPickle.c"
        HEAP[$i]=$27; //@line 3528 "cPickle.c"
        var $28=HEAP[$i]; //@line 3529 "cPickle.c"
        var $29=((($28))|0) < 0; //@line 3529 "cPickle.c"
        if ($29) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3529 "cPickle.c"
      case 10: // $bb10
        HEAP[$0]=-1; //@line 3529 "cPickle.c"
        __label__ = 20; break; //@line 3529 "cPickle.c"
      case 11: // $bb11
        var $30=HEAP[$size_addr]; //@line 3530 "cPickle.c"
        var $31=HEAP[$pdata]; //@line 3530 "cPickle.c"
        var $32=__PyLong_FromByteArray($31, $30, 1, 1); //@line 3530 "cPickle.c"
        HEAP[$along]=$32; //@line 3530 "cPickle.c"
        __label__ = 12; break; //@line 3530 "cPickle.c"
      case 12: // $bb12
        var $33=HEAP[$along]; //@line 3533 "cPickle.c"
        var $34=($33)==0; //@line 3533 "cPickle.c"
        if ($34) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 3533 "cPickle.c"
      case 13: // $bb13
        HEAP[$0]=-1; //@line 3534 "cPickle.c"
        __label__ = 20; break; //@line 3534 "cPickle.c"
      case 14: // $bb14
        var $35=HEAP[$self_addr]; //@line 3535 "cPickle.c"
        var $36=(($35+32)&4294967295); //@line 3535 "cPickle.c"
        var $37=HEAP[$36]; //@line 3535 "cPickle.c"
        var $38=(($37+8)&4294967295); //@line 3535 "cPickle.c"
        var $39=HEAP[$38]; //@line 3535 "cPickle.c"
        var $40=HEAP[$self_addr]; //@line 3535 "cPickle.c"
        var $41=(($40+32)&4294967295); //@line 3535 "cPickle.c"
        var $42=HEAP[$41]; //@line 3535 "cPickle.c"
        var $43=(($42+12)&4294967295); //@line 3535 "cPickle.c"
        var $44=HEAP[$43]; //@line 3535 "cPickle.c"
        var $45=((($39))|0)==((($44))|0); //@line 3535 "cPickle.c"
        if ($45) { __label__ = 15; break; } else { __label__ = 19; break; } //@line 3535 "cPickle.c"
      case 15: // $bb15
        var $46=HEAP[$self_addr]; //@line 3535 "cPickle.c"
        var $47=(($46+32)&4294967295); //@line 3535 "cPickle.c"
        var $48=HEAP[$47]; //@line 3535 "cPickle.c"
        var $49=_Pdata_grow($48); //@line 3535 "cPickle.c"
        var $50=((($49))|0) < 0; //@line 3535 "cPickle.c"
        if ($50) { __label__ = 16; break; } else { __label__ = 19; break; } //@line 3535 "cPickle.c"
      case 16: // $bb16
        var $51=HEAP[$along]; //@line 3535 "cPickle.c"
        var $52=(($51)&4294967295); //@line 3535 "cPickle.c"
        var $53=HEAP[$52]; //@line 3535 "cPickle.c"
        var $54=((($53) - 1)&4294967295); //@line 3535 "cPickle.c"
        var $55=HEAP[$along]; //@line 3535 "cPickle.c"
        var $56=(($55)&4294967295); //@line 3535 "cPickle.c"
        HEAP[$56]=$54; //@line 3535 "cPickle.c"
        var $57=HEAP[$along]; //@line 3535 "cPickle.c"
        var $58=(($57)&4294967295); //@line 3535 "cPickle.c"
        var $59=HEAP[$58]; //@line 3535 "cPickle.c"
        var $60=((($59))|0)==0; //@line 3535 "cPickle.c"
        if ($60) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 3535 "cPickle.c"
      case 17: // $bb17
        var $61=HEAP[$along]; //@line 3535 "cPickle.c"
        var $62=(($61+4)&4294967295); //@line 3535 "cPickle.c"
        var $63=HEAP[$62]; //@line 3535 "cPickle.c"
        var $64=(($63+24)&4294967295); //@line 3535 "cPickle.c"
        var $65=HEAP[$64]; //@line 3535 "cPickle.c"
        var $66=HEAP[$along]; //@line 3535 "cPickle.c"
        FUNCTION_TABLE[$65]($66); //@line 3535 "cPickle.c"
        __label__ = 18; break; //@line 3535 "cPickle.c"
      case 18: // $bb18
        HEAP[$0]=-1; //@line 3535 "cPickle.c"
        __label__ = 20; break; //@line 3535 "cPickle.c"
      case 19: // $bb19
        var $67=HEAP[$self_addr]; //@line 3535 "cPickle.c"
        var $68=(($67+32)&4294967295); //@line 3535 "cPickle.c"
        var $69=HEAP[$68]; //@line 3535 "cPickle.c"
        var $70=(($69+16)&4294967295); //@line 3535 "cPickle.c"
        var $71=HEAP[$70]; //@line 3535 "cPickle.c"
        var $72=HEAP[$self_addr]; //@line 3535 "cPickle.c"
        var $73=(($72+32)&4294967295); //@line 3535 "cPickle.c"
        var $74=HEAP[$73]; //@line 3535 "cPickle.c"
        var $75=(($74+8)&4294967295); //@line 3535 "cPickle.c"
        var $76=HEAP[$75]; //@line 3535 "cPickle.c"
        var $77=(($71+4*$76)&4294967295); //@line 3535 "cPickle.c"
        var $78=HEAP[$along]; //@line 3535 "cPickle.c"
        HEAP[$77]=$78; //@line 3535 "cPickle.c"
        var $79=((($76) + 1)&4294967295); //@line 3535 "cPickle.c"
        var $80=(($74+8)&4294967295); //@line 3535 "cPickle.c"
        HEAP[$80]=$79; //@line 3535 "cPickle.c"
        HEAP[$0]=0; //@line 3536 "cPickle.c"
        __label__ = 20; break; //@line 3536 "cPickle.c"
      case 20: // $bb20
        var $81=HEAP[$0]; //@line 3512 "cPickle.c"
        HEAP[$retval]=$81; //@line 3512 "cPickle.c"
        __label__ = 21; break; //@line 3512 "cPickle.c"
      case 21: // $return
        var $retval21=HEAP[$retval]; //@line 3512 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval21; //@line 3512 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_float($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $py_float=__stackBase__+12;
        var $endptr=__stackBase__+16;
        var $s=__stackBase__+20;
        var $len=__stackBase__+24;
        var $res=__stackBase__+28;
        var $d=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$py_float]=0; //@line 3542 "cPickle.c"
        HEAP[$res]=-1; //@line 3544 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 3547 "cPickle.c"
        var $2=(($1+64)&4294967295); //@line 3547 "cPickle.c"
        var $3=HEAP[$2]; //@line 3547 "cPickle.c"
        var $4=HEAP[$self_addr]; //@line 3547 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s); //@line 3547 "cPickle.c"
        HEAP[$len]=$5; //@line 3547 "cPickle.c"
        var $6=HEAP[$len]; //@line 3547 "cPickle.c"
        var $7=((($6))|0) < 0; //@line 3547 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3547 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 3547 "cPickle.c"
        __label__ = 19; break; //@line 3547 "cPickle.c"
      case 2: // $bb1
        var $8=HEAP[$len]; //@line 3548 "cPickle.c"
        var $9=((($8))|0) <= 1; //@line 3548 "cPickle.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3548 "cPickle.c"
      case 3: // $bb2
        var $10=_bad_readline(); //@line 3548 "cPickle.c"
        HEAP[$0]=$10; //@line 3548 "cPickle.c"
        __label__ = 19; break; //@line 3548 "cPickle.c"
      case 4: // $bb3
        var $11=HEAP[$s]; //@line 3549 "cPickle.c"
        var $12=HEAP[$len]; //@line 3549 "cPickle.c"
        var $13=_pystrndup($11, $12); //@line 3549 "cPickle.c"
        HEAP[$s]=$13; //@line 3549 "cPickle.c"
        var $14=HEAP[$s]; //@line 3549 "cPickle.c"
        var $15=($14)==0; //@line 3549 "cPickle.c"
        if ($15) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3549 "cPickle.c"
      case 5: // $bb4
        HEAP[$0]=-1; //@line 3549 "cPickle.c"
        __label__ = 19; break; //@line 3549 "cPickle.c"
      case 6: // $bb5
        var $16=HEAP[_PyExc_OverflowError]; //@line 3551 "cPickle.c"
        var $17=HEAP[$s]; //@line 3551 "cPickle.c"
        var $18=_PyOS_string_to_double($17, $endptr, $16); //@line 3551 "cPickle.c"
        HEAP[$d]=$18; //@line 3551 "cPickle.c"
        var $19=HEAP[$d]; //@line 3553 "cPickle.c"
        var $20=($19) != -1; //@line 3553 "cPickle.c"
        if ($20) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 3553 "cPickle.c"
      case 7: // $bb6
        var $21=_PyErr_Occurred(); //@line 3553 "cPickle.c"
        var $22=($21)!=0; //@line 3553 "cPickle.c"
        if ($22) { __label__ = 18; break; } else { __label__ = 8; break; } //@line 3553 "cPickle.c"
      case 8: // $bb7
        var $23=HEAP[$endptr]; //@line 3555 "cPickle.c"
        var $24=(($23)&4294967295); //@line 3555 "cPickle.c"
        var $25=HEAP[$24]; //@line 3555 "cPickle.c"
        var $26=reSign(($25), 8, 0)!=10; //@line 3555 "cPickle.c"
        if ($26) { __label__ = 10; break; } else { __label__ = 9; break; } //@line 3555 "cPickle.c"
      case 9: // $bb8
        var $27=HEAP[$endptr]; //@line 3555 "cPickle.c"
        var $28=(($27+1)&4294967295); //@line 3555 "cPickle.c"
        var $29=HEAP[$28]; //@line 3555 "cPickle.c"
        var $30=reSign(($29), 8, 0)!=0; //@line 3555 "cPickle.c"
        if ($30) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3555 "cPickle.c"
      case 10: // $bb9
        var $31=HEAP[_PyExc_ValueError]; //@line 3556 "cPickle.c"
        _PyErr_SetString($31, ((__str84)&4294967295)); //@line 3556 "cPickle.c"
        __label__ = 18; break; //@line 3556 "cPickle.c"
      case 11: // $bb10
        var $32=HEAP[$d]; //@line 3561 "cPickle.c"
        var $33=_PyFloat_FromDouble($32); //@line 3561 "cPickle.c"
        HEAP[$py_float]=$33; //@line 3561 "cPickle.c"
        var $34=HEAP[$py_float]; //@line 3561 "cPickle.c"
        var $35=($34)==0; //@line 3561 "cPickle.c"
        if ($35) { __label__ = 18; break; } else { __label__ = 12; break; } //@line 3561 "cPickle.c"
      case 12: // $bb11
        var $36=HEAP[$s]; //@line 3564 "cPickle.c"
        _free($36); //@line 3564 "cPickle.c"
        var $37=HEAP[$self_addr]; //@line 3565 "cPickle.c"
        var $38=(($37+32)&4294967295); //@line 3565 "cPickle.c"
        var $39=HEAP[$38]; //@line 3565 "cPickle.c"
        var $40=(($39+8)&4294967295); //@line 3565 "cPickle.c"
        var $41=HEAP[$40]; //@line 3565 "cPickle.c"
        var $42=HEAP[$self_addr]; //@line 3565 "cPickle.c"
        var $43=(($42+32)&4294967295); //@line 3565 "cPickle.c"
        var $44=HEAP[$43]; //@line 3565 "cPickle.c"
        var $45=(($44+12)&4294967295); //@line 3565 "cPickle.c"
        var $46=HEAP[$45]; //@line 3565 "cPickle.c"
        var $47=((($41))|0)==((($46))|0); //@line 3565 "cPickle.c"
        if ($47) { __label__ = 13; break; } else { __label__ = 17; break; } //@line 3565 "cPickle.c"
      case 13: // $bb12
        var $48=HEAP[$self_addr]; //@line 3565 "cPickle.c"
        var $49=(($48+32)&4294967295); //@line 3565 "cPickle.c"
        var $50=HEAP[$49]; //@line 3565 "cPickle.c"
        var $51=_Pdata_grow($50); //@line 3565 "cPickle.c"
        var $52=((($51))|0) < 0; //@line 3565 "cPickle.c"
        if ($52) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 3565 "cPickle.c"
      case 14: // $bb13
        var $53=HEAP[$py_float]; //@line 3565 "cPickle.c"
        var $54=(($53)&4294967295); //@line 3565 "cPickle.c"
        var $55=HEAP[$54]; //@line 3565 "cPickle.c"
        var $56=((($55) - 1)&4294967295); //@line 3565 "cPickle.c"
        var $57=HEAP[$py_float]; //@line 3565 "cPickle.c"
        var $58=(($57)&4294967295); //@line 3565 "cPickle.c"
        HEAP[$58]=$56; //@line 3565 "cPickle.c"
        var $59=HEAP[$py_float]; //@line 3565 "cPickle.c"
        var $60=(($59)&4294967295); //@line 3565 "cPickle.c"
        var $61=HEAP[$60]; //@line 3565 "cPickle.c"
        var $62=((($61))|0)==0; //@line 3565 "cPickle.c"
        if ($62) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 3565 "cPickle.c"
      case 15: // $bb14
        var $63=HEAP[$py_float]; //@line 3565 "cPickle.c"
        var $64=(($63+4)&4294967295); //@line 3565 "cPickle.c"
        var $65=HEAP[$64]; //@line 3565 "cPickle.c"
        var $66=(($65+24)&4294967295); //@line 3565 "cPickle.c"
        var $67=HEAP[$66]; //@line 3565 "cPickle.c"
        var $68=HEAP[$py_float]; //@line 3565 "cPickle.c"
        FUNCTION_TABLE[$67]($68); //@line 3565 "cPickle.c"
        __label__ = 16; break; //@line 3565 "cPickle.c"
      case 16: // $bb15
        HEAP[$0]=-1; //@line 3565 "cPickle.c"
        __label__ = 19; break; //@line 3565 "cPickle.c"
      case 17: // $bb16
        var $69=HEAP[$self_addr]; //@line 3565 "cPickle.c"
        var $70=(($69+32)&4294967295); //@line 3565 "cPickle.c"
        var $71=HEAP[$70]; //@line 3565 "cPickle.c"
        var $72=(($71+16)&4294967295); //@line 3565 "cPickle.c"
        var $73=HEAP[$72]; //@line 3565 "cPickle.c"
        var $74=HEAP[$self_addr]; //@line 3565 "cPickle.c"
        var $75=(($74+32)&4294967295); //@line 3565 "cPickle.c"
        var $76=HEAP[$75]; //@line 3565 "cPickle.c"
        var $77=(($76+8)&4294967295); //@line 3565 "cPickle.c"
        var $78=HEAP[$77]; //@line 3565 "cPickle.c"
        var $79=(($73+4*$78)&4294967295); //@line 3565 "cPickle.c"
        var $80=HEAP[$py_float]; //@line 3565 "cPickle.c"
        HEAP[$79]=$80; //@line 3565 "cPickle.c"
        var $81=((($78) + 1)&4294967295); //@line 3565 "cPickle.c"
        var $82=(($76+8)&4294967295); //@line 3565 "cPickle.c"
        HEAP[$82]=$81; //@line 3565 "cPickle.c"
        HEAP[$0]=0; //@line 3566 "cPickle.c"
        __label__ = 19; break; //@line 3566 "cPickle.c"
      case 18: // $finally
        var $83=HEAP[$s]; //@line 3569 "cPickle.c"
        _free($83); //@line 3569 "cPickle.c"
        var $84=HEAP[$res]; //@line 3571 "cPickle.c"
        HEAP[$0]=$84; //@line 3571 "cPickle.c"
        __label__ = 19; break; //@line 3571 "cPickle.c"
      case 19: // $bb17
        var $85=HEAP[$0]; //@line 3547 "cPickle.c"
        HEAP[$retval]=$85; //@line 3547 "cPickle.c"
        __label__ = 20; break; //@line 3547 "cPickle.c"
      case 20: // $return
        var $retval18=HEAP[$retval]; //@line 3547 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval18; //@line 3547 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_binfloat($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $py_float=__stackBase__+12;
        var $x=__stackBase__+16;
        var $p=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 3581 "cPickle.c"
        var $2=(($1+60)&4294967295); //@line 3581 "cPickle.c"
        var $3=HEAP[$2]; //@line 3581 "cPickle.c"
        var $4=HEAP[$self_addr]; //@line 3581 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $p, 8); //@line 3581 "cPickle.c"
        var $6=((($5))|0) < 0; //@line 3581 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3581 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 3582 "cPickle.c"
        __label__ = 13; break; //@line 3582 "cPickle.c"
      case 2: // $bb1
        var $7=HEAP[$p]; //@line 3584 "cPickle.c"
        var $8=__PyFloat_Unpack8($7, 0); //@line 3584 "cPickle.c"
        HEAP[$x]=$8; //@line 3584 "cPickle.c"
        var $9=HEAP[$x]; //@line 3585 "cPickle.c"
        var $10=($9) == -1; //@line 3585 "cPickle.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 3585 "cPickle.c"
      case 3: // $bb2
        var $11=_PyErr_Occurred(); //@line 3585 "cPickle.c"
        var $12=($11)!=0; //@line 3585 "cPickle.c"
        if ($12) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 3585 "cPickle.c"
      case 4: // $bb3
        HEAP[$0]=-1; //@line 3586 "cPickle.c"
        __label__ = 13; break; //@line 3586 "cPickle.c"
      case 5: // $bb4
        var $13=HEAP[$x]; //@line 3588 "cPickle.c"
        var $14=_PyFloat_FromDouble($13); //@line 3588 "cPickle.c"
        HEAP[$py_float]=$14; //@line 3588 "cPickle.c"
        var $15=HEAP[$py_float]; //@line 3589 "cPickle.c"
        var $16=($15)==0; //@line 3589 "cPickle.c"
        if ($16) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3589 "cPickle.c"
      case 6: // $bb5
        HEAP[$0]=-1; //@line 3590 "cPickle.c"
        __label__ = 13; break; //@line 3590 "cPickle.c"
      case 7: // $bb6
        var $17=HEAP[$self_addr]; //@line 3592 "cPickle.c"
        var $18=(($17+32)&4294967295); //@line 3592 "cPickle.c"
        var $19=HEAP[$18]; //@line 3592 "cPickle.c"
        var $20=(($19+8)&4294967295); //@line 3592 "cPickle.c"
        var $21=HEAP[$20]; //@line 3592 "cPickle.c"
        var $22=HEAP[$self_addr]; //@line 3592 "cPickle.c"
        var $23=(($22+32)&4294967295); //@line 3592 "cPickle.c"
        var $24=HEAP[$23]; //@line 3592 "cPickle.c"
        var $25=(($24+12)&4294967295); //@line 3592 "cPickle.c"
        var $26=HEAP[$25]; //@line 3592 "cPickle.c"
        var $27=((($21))|0)==((($26))|0); //@line 3592 "cPickle.c"
        if ($27) { __label__ = 8; break; } else { __label__ = 12; break; } //@line 3592 "cPickle.c"
      case 8: // $bb7
        var $28=HEAP[$self_addr]; //@line 3592 "cPickle.c"
        var $29=(($28+32)&4294967295); //@line 3592 "cPickle.c"
        var $30=HEAP[$29]; //@line 3592 "cPickle.c"
        var $31=_Pdata_grow($30); //@line 3592 "cPickle.c"
        var $32=((($31))|0) < 0; //@line 3592 "cPickle.c"
        if ($32) { __label__ = 9; break; } else { __label__ = 12; break; } //@line 3592 "cPickle.c"
      case 9: // $bb8
        var $33=HEAP[$py_float]; //@line 3592 "cPickle.c"
        var $34=(($33)&4294967295); //@line 3592 "cPickle.c"
        var $35=HEAP[$34]; //@line 3592 "cPickle.c"
        var $36=((($35) - 1)&4294967295); //@line 3592 "cPickle.c"
        var $37=HEAP[$py_float]; //@line 3592 "cPickle.c"
        var $38=(($37)&4294967295); //@line 3592 "cPickle.c"
        HEAP[$38]=$36; //@line 3592 "cPickle.c"
        var $39=HEAP[$py_float]; //@line 3592 "cPickle.c"
        var $40=(($39)&4294967295); //@line 3592 "cPickle.c"
        var $41=HEAP[$40]; //@line 3592 "cPickle.c"
        var $42=((($41))|0)==0; //@line 3592 "cPickle.c"
        if ($42) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3592 "cPickle.c"
      case 10: // $bb9
        var $43=HEAP[$py_float]; //@line 3592 "cPickle.c"
        var $44=(($43+4)&4294967295); //@line 3592 "cPickle.c"
        var $45=HEAP[$44]; //@line 3592 "cPickle.c"
        var $46=(($45+24)&4294967295); //@line 3592 "cPickle.c"
        var $47=HEAP[$46]; //@line 3592 "cPickle.c"
        var $48=HEAP[$py_float]; //@line 3592 "cPickle.c"
        FUNCTION_TABLE[$47]($48); //@line 3592 "cPickle.c"
        __label__ = 11; break; //@line 3592 "cPickle.c"
      case 11: // $bb10
        HEAP[$0]=-1; //@line 3592 "cPickle.c"
        __label__ = 13; break; //@line 3592 "cPickle.c"
      case 12: // $bb11
        var $49=HEAP[$self_addr]; //@line 3592 "cPickle.c"
        var $50=(($49+32)&4294967295); //@line 3592 "cPickle.c"
        var $51=HEAP[$50]; //@line 3592 "cPickle.c"
        var $52=(($51+16)&4294967295); //@line 3592 "cPickle.c"
        var $53=HEAP[$52]; //@line 3592 "cPickle.c"
        var $54=HEAP[$self_addr]; //@line 3592 "cPickle.c"
        var $55=(($54+32)&4294967295); //@line 3592 "cPickle.c"
        var $56=HEAP[$55]; //@line 3592 "cPickle.c"
        var $57=(($56+8)&4294967295); //@line 3592 "cPickle.c"
        var $58=HEAP[$57]; //@line 3592 "cPickle.c"
        var $59=(($53+4*$58)&4294967295); //@line 3592 "cPickle.c"
        var $60=HEAP[$py_float]; //@line 3592 "cPickle.c"
        HEAP[$59]=$60; //@line 3592 "cPickle.c"
        var $61=((($58) + 1)&4294967295); //@line 3592 "cPickle.c"
        var $62=(($56+8)&4294967295); //@line 3592 "cPickle.c"
        HEAP[$62]=$61; //@line 3592 "cPickle.c"
        HEAP[$0]=0; //@line 3593 "cPickle.c"
        __label__ = 13; break; //@line 3593 "cPickle.c"
      case 13: // $bb12
        var $63=HEAP[$0]; //@line 3582 "cPickle.c"
        HEAP[$retval]=$63; //@line 3582 "cPickle.c"
        __label__ = 14; break; //@line 3582 "cPickle.c"
      case 14: // $return
        var $retval13=HEAP[$retval]; //@line 3582 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 3582 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_string($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $str=__stackBase__+12;
        var $len=__stackBase__+16;
        var $res=__stackBase__+20;
        var $s=__stackBase__+24;
        var $p=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$str]=0; //@line 3599 "cPickle.c"
        HEAP[$res]=-1; //@line 3600 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 3603 "cPickle.c"
        var $2=(($1+64)&4294967295); //@line 3603 "cPickle.c"
        var $3=HEAP[$2]; //@line 3603 "cPickle.c"
        var $4=HEAP[$self_addr]; //@line 3603 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s); //@line 3603 "cPickle.c"
        HEAP[$len]=$5; //@line 3603 "cPickle.c"
        var $6=HEAP[$len]; //@line 3603 "cPickle.c"
        var $7=((($6))|0) < 0; //@line 3603 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3603 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 3603 "cPickle.c"
        __label__ = 24; break; //@line 3603 "cPickle.c"
      case 2: // $bb1
        var $8=HEAP[$len]; //@line 3604 "cPickle.c"
        var $9=((($8))|0) <= 1; //@line 3604 "cPickle.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3604 "cPickle.c"
      case 3: // $bb2
        var $10=_bad_readline(); //@line 3604 "cPickle.c"
        HEAP[$0]=$10; //@line 3604 "cPickle.c"
        __label__ = 24; break; //@line 3604 "cPickle.c"
      case 4: // $bb3
        var $11=HEAP[$s]; //@line 3605 "cPickle.c"
        var $12=HEAP[$len]; //@line 3605 "cPickle.c"
        var $13=_pystrndup($11, $12); //@line 3605 "cPickle.c"
        HEAP[$s]=$13; //@line 3605 "cPickle.c"
        var $14=HEAP[$s]; //@line 3605 "cPickle.c"
        var $15=($14)==0; //@line 3605 "cPickle.c"
        if ($15) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3605 "cPickle.c"
      case 5: // $bb4
        HEAP[$0]=-1; //@line 3605 "cPickle.c"
        __label__ = 24; break; //@line 3605 "cPickle.c"
      case 6: // $bb5
        __label__ = 8; break; //@line 3605 "cPickle.c"
      case 7: // $bb6
        var $16=HEAP[$len]; //@line 3610 "cPickle.c"
        var $17=((($16) - 1)&4294967295); //@line 3610 "cPickle.c"
        HEAP[$len]=$17; //@line 3610 "cPickle.c"
        __label__ = 8; break; //@line 3610 "cPickle.c"
      case 8: // $bb7
        var $18=HEAP[$s]; //@line 3609 "cPickle.c"
        var $19=HEAP[$len]; //@line 3609 "cPickle.c"
        var $20=((($19) - 1)&4294967295); //@line 3609 "cPickle.c"
        var $21=(($18+$20)&4294967295); //@line 3609 "cPickle.c"
        var $22=HEAP[$21]; //@line 3609 "cPickle.c"
        var $23=reSign(($22), 8, 0) <= 32; //@line 3609 "cPickle.c"
        if ($23) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 3609 "cPickle.c"
      case 9: // $bb8
        var $24=HEAP[$s]; //@line 3611 "cPickle.c"
        var $25=(($24)&4294967295); //@line 3611 "cPickle.c"
        var $26=HEAP[$25]; //@line 3611 "cPickle.c"
        var $27=reSign(($26), 8, 0)!=34; //@line 3611 "cPickle.c"
        if ($27) { __label__ = 12; break; } else { __label__ = 10; break; } //@line 3611 "cPickle.c"
      case 10: // $bb9
        var $28=HEAP[$s]; //@line 3611 "cPickle.c"
        var $29=HEAP[$len]; //@line 3611 "cPickle.c"
        var $30=((($29) - 1)&4294967295); //@line 3611 "cPickle.c"
        var $31=(($28+$30)&4294967295); //@line 3611 "cPickle.c"
        var $32=HEAP[$31]; //@line 3611 "cPickle.c"
        var $33=reSign(($32), 8, 0)!=34; //@line 3611 "cPickle.c"
        if ($33) { __label__ = 12; break; } else { __label__ = 11; break; } //@line 3611 "cPickle.c"
      case 11: // $bb10
        var $34=HEAP[$s]; //@line 3612 "cPickle.c"
        var $35=HEAP[$len]; //@line 3612 "cPickle.c"
        var $36=((($35) - 1)&4294967295); //@line 3612 "cPickle.c"
        var $37=(($34+$36)&4294967295); //@line 3612 "cPickle.c"
        HEAP[$37]=0; //@line 3612 "cPickle.c"
        var $38=HEAP[$s]; //@line 3613 "cPickle.c"
        var $39=(($38+1)&4294967295); //@line 3613 "cPickle.c"
        HEAP[$p]=$39; //@line 3613 "cPickle.c"
        var $40=HEAP[$len]; //@line 3614 "cPickle.c"
        var $41=((($40) - 2)&4294967295); //@line 3614 "cPickle.c"
        HEAP[$len]=$41; //@line 3614 "cPickle.c"
        __label__ = 15; break; //@line 3614 "cPickle.c"
      case 12: // $bb11
        var $42=HEAP[$s]; //@line 3615 "cPickle.c"
        var $43=(($42)&4294967295); //@line 3615 "cPickle.c"
        var $44=HEAP[$43]; //@line 3615 "cPickle.c"
        var $45=reSign(($44), 8, 0)!=39; //@line 3615 "cPickle.c"
        if ($45) { __label__ = 23; break; } else { __label__ = 13; break; } //@line 3615 "cPickle.c"
      case 13: // $bb12
        var $46=HEAP[$s]; //@line 3615 "cPickle.c"
        var $47=HEAP[$len]; //@line 3615 "cPickle.c"
        var $48=((($47) - 1)&4294967295); //@line 3615 "cPickle.c"
        var $49=(($46+$48)&4294967295); //@line 3615 "cPickle.c"
        var $50=HEAP[$49]; //@line 3615 "cPickle.c"
        var $51=reSign(($50), 8, 0)!=39; //@line 3615 "cPickle.c"
        if ($51) { __label__ = 23; break; } else { __label__ = 14; break; } //@line 3615 "cPickle.c"
      case 14: // $bb13
        var $52=HEAP[$s]; //@line 3616 "cPickle.c"
        var $53=HEAP[$len]; //@line 3616 "cPickle.c"
        var $54=((($53) - 1)&4294967295); //@line 3616 "cPickle.c"
        var $55=(($52+$54)&4294967295); //@line 3616 "cPickle.c"
        HEAP[$55]=0; //@line 3616 "cPickle.c"
        var $56=HEAP[$s]; //@line 3617 "cPickle.c"
        var $57=(($56+1)&4294967295); //@line 3617 "cPickle.c"
        HEAP[$p]=$57; //@line 3617 "cPickle.c"
        var $58=HEAP[$len]; //@line 3618 "cPickle.c"
        var $59=((($58) - 2)&4294967295); //@line 3618 "cPickle.c"
        HEAP[$len]=$59; //@line 3618 "cPickle.c"
        __label__ = 15; break; //@line 3618 "cPickle.c"
      case 15: // $bb14
        var $60=HEAP[$p]; //@line 3623 "cPickle.c"
        var $61=HEAP[$len]; //@line 3623 "cPickle.c"
        var $62=_PyString_DecodeEscape($60, $61, 0, 0, 0); //@line 3623 "cPickle.c"
        HEAP[$str]=$62; //@line 3623 "cPickle.c"
        var $63=HEAP[$s]; //@line 3624 "cPickle.c"
        _free($63); //@line 3624 "cPickle.c"
        var $64=HEAP[$str]; //@line 3625 "cPickle.c"
        var $65=($64)!=0; //@line 3625 "cPickle.c"
        if ($65) { __label__ = 16; break; } else { __label__ = 22; break; } //@line 3625 "cPickle.c"
      case 16: // $bb15
        var $66=HEAP[$self_addr]; //@line 3626 "cPickle.c"
        var $67=(($66+32)&4294967295); //@line 3626 "cPickle.c"
        var $68=HEAP[$67]; //@line 3626 "cPickle.c"
        var $69=(($68+8)&4294967295); //@line 3626 "cPickle.c"
        var $70=HEAP[$69]; //@line 3626 "cPickle.c"
        var $71=HEAP[$self_addr]; //@line 3626 "cPickle.c"
        var $72=(($71+32)&4294967295); //@line 3626 "cPickle.c"
        var $73=HEAP[$72]; //@line 3626 "cPickle.c"
        var $74=(($73+12)&4294967295); //@line 3626 "cPickle.c"
        var $75=HEAP[$74]; //@line 3626 "cPickle.c"
        var $76=((($70))|0)==((($75))|0); //@line 3626 "cPickle.c"
        if ($76) { __label__ = 17; break; } else { __label__ = 21; break; } //@line 3626 "cPickle.c"
      case 17: // $bb16
        var $77=HEAP[$self_addr]; //@line 3626 "cPickle.c"
        var $78=(($77+32)&4294967295); //@line 3626 "cPickle.c"
        var $79=HEAP[$78]; //@line 3626 "cPickle.c"
        var $80=_Pdata_grow($79); //@line 3626 "cPickle.c"
        var $81=((($80))|0) < 0; //@line 3626 "cPickle.c"
        if ($81) { __label__ = 18; break; } else { __label__ = 21; break; } //@line 3626 "cPickle.c"
      case 18: // $bb17
        var $82=HEAP[$str]; //@line 3626 "cPickle.c"
        var $83=(($82)&4294967295); //@line 3626 "cPickle.c"
        var $84=HEAP[$83]; //@line 3626 "cPickle.c"
        var $85=((($84) - 1)&4294967295); //@line 3626 "cPickle.c"
        var $86=HEAP[$str]; //@line 3626 "cPickle.c"
        var $87=(($86)&4294967295); //@line 3626 "cPickle.c"
        HEAP[$87]=$85; //@line 3626 "cPickle.c"
        var $88=HEAP[$str]; //@line 3626 "cPickle.c"
        var $89=(($88)&4294967295); //@line 3626 "cPickle.c"
        var $90=HEAP[$89]; //@line 3626 "cPickle.c"
        var $91=((($90))|0)==0; //@line 3626 "cPickle.c"
        if ($91) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 3626 "cPickle.c"
      case 19: // $bb18
        var $92=HEAP[$str]; //@line 3626 "cPickle.c"
        var $93=(($92+4)&4294967295); //@line 3626 "cPickle.c"
        var $94=HEAP[$93]; //@line 3626 "cPickle.c"
        var $95=(($94+24)&4294967295); //@line 3626 "cPickle.c"
        var $96=HEAP[$95]; //@line 3626 "cPickle.c"
        var $97=HEAP[$str]; //@line 3626 "cPickle.c"
        FUNCTION_TABLE[$96]($97); //@line 3626 "cPickle.c"
        __label__ = 20; break; //@line 3626 "cPickle.c"
      case 20: // $bb19
        HEAP[$0]=-1; //@line 3626 "cPickle.c"
        __label__ = 24; break; //@line 3626 "cPickle.c"
      case 21: // $bb20
        var $98=HEAP[$self_addr]; //@line 3626 "cPickle.c"
        var $99=(($98+32)&4294967295); //@line 3626 "cPickle.c"
        var $100=HEAP[$99]; //@line 3626 "cPickle.c"
        var $101=(($100+16)&4294967295); //@line 3626 "cPickle.c"
        var $102=HEAP[$101]; //@line 3626 "cPickle.c"
        var $103=HEAP[$self_addr]; //@line 3626 "cPickle.c"
        var $104=(($103+32)&4294967295); //@line 3626 "cPickle.c"
        var $105=HEAP[$104]; //@line 3626 "cPickle.c"
        var $106=(($105+8)&4294967295); //@line 3626 "cPickle.c"
        var $107=HEAP[$106]; //@line 3626 "cPickle.c"
        var $108=(($102+4*$107)&4294967295); //@line 3626 "cPickle.c"
        var $109=HEAP[$str]; //@line 3626 "cPickle.c"
        HEAP[$108]=$109; //@line 3626 "cPickle.c"
        var $110=((($107) + 1)&4294967295); //@line 3626 "cPickle.c"
        var $111=(($105+8)&4294967295); //@line 3626 "cPickle.c"
        HEAP[$111]=$110; //@line 3626 "cPickle.c"
        HEAP[$res]=0; //@line 3627 "cPickle.c"
        __label__ = 22; break; //@line 3627 "cPickle.c"
      case 22: // $bb21
        var $112=HEAP[$res]; //@line 3629 "cPickle.c"
        HEAP[$0]=$112; //@line 3629 "cPickle.c"
        __label__ = 24; break; //@line 3629 "cPickle.c"
      case 23: // $insecure
        var $113=HEAP[$s]; //@line 3632 "cPickle.c"
        _free($113); //@line 3632 "cPickle.c"
        var $114=HEAP[_PyExc_ValueError]; //@line 3633 "cPickle.c"
        _PyErr_SetString($114, ((__str85)&4294967295)); //@line 3633 "cPickle.c"
        HEAP[$0]=-1; //@line 3634 "cPickle.c"
        __label__ = 24; break; //@line 3634 "cPickle.c"
      case 24: // $bb22
        var $115=HEAP[$0]; //@line 3603 "cPickle.c"
        HEAP[$retval]=$115; //@line 3603 "cPickle.c"
        __label__ = 25; break; //@line 3603 "cPickle.c"
      case 25: // $return
        var $retval23=HEAP[$retval]; //@line 3603 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval23; //@line 3603 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_binstring($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $py_string=__stackBase__+12;
        var $l=__stackBase__+16;
        var $s=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$py_string]=0; //@line 3641 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 3645 "cPickle.c"
        var $2=(($1+60)&4294967295); //@line 3645 "cPickle.c"
        var $3=HEAP[$2]; //@line 3645 "cPickle.c"
        var $4=HEAP[$self_addr]; //@line 3645 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s, 4); //@line 3645 "cPickle.c"
        var $6=((($5))|0) < 0; //@line 3645 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3645 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 3645 "cPickle.c"
        __label__ = 14; break; //@line 3645 "cPickle.c"
      case 2: // $bb1
        var $7=HEAP[$s]; //@line 3647 "cPickle.c"
        var $8=_calc_binint($7, 4); //@line 3647 "cPickle.c"
        HEAP[$l]=$8; //@line 3647 "cPickle.c"
        var $9=HEAP[$l]; //@line 3648 "cPickle.c"
        var $10=((($9))|0) < 0; //@line 3648 "cPickle.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3648 "cPickle.c"
      case 3: // $bb2
        var $11=HEAP[_UnpicklingError]; //@line 3652 "cPickle.c"
        _PyErr_SetString($11, ((__str86)&4294967295)); //@line 3652 "cPickle.c"
        HEAP[$0]=-1; //@line 3654 "cPickle.c"
        __label__ = 14; break; //@line 3654 "cPickle.c"
      case 4: // $bb3
        var $12=HEAP[$self_addr]; //@line 3657 "cPickle.c"
        var $13=(($12+60)&4294967295); //@line 3657 "cPickle.c"
        var $14=HEAP[$13]; //@line 3657 "cPickle.c"
        var $15=HEAP[$self_addr]; //@line 3657 "cPickle.c"
        var $16=HEAP[$l]; //@line 3657 "cPickle.c"
        var $17=FUNCTION_TABLE[$14]($15, $s, $16); //@line 3657 "cPickle.c"
        var $18=((($17))|0) < 0; //@line 3657 "cPickle.c"
        if ($18) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3657 "cPickle.c"
      case 5: // $bb4
        HEAP[$0]=-1; //@line 3658 "cPickle.c"
        __label__ = 14; break; //@line 3658 "cPickle.c"
      case 6: // $bb5
        var $19=HEAP[$s]; //@line 3660 "cPickle.c"
        var $20=HEAP[$l]; //@line 3660 "cPickle.c"
        var $21=_PyString_FromStringAndSize($19, $20); //@line 3660 "cPickle.c"
        HEAP[$py_string]=$21; //@line 3660 "cPickle.c"
        var $22=HEAP[$py_string]; //@line 3660 "cPickle.c"
        var $23=($22)==0; //@line 3660 "cPickle.c"
        if ($23) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3660 "cPickle.c"
      case 7: // $bb6
        HEAP[$0]=-1; //@line 3661 "cPickle.c"
        __label__ = 14; break; //@line 3661 "cPickle.c"
      case 8: // $bb7
        var $24=HEAP[$self_addr]; //@line 3663 "cPickle.c"
        var $25=(($24+32)&4294967295); //@line 3663 "cPickle.c"
        var $26=HEAP[$25]; //@line 3663 "cPickle.c"
        var $27=(($26+8)&4294967295); //@line 3663 "cPickle.c"
        var $28=HEAP[$27]; //@line 3663 "cPickle.c"
        var $29=HEAP[$self_addr]; //@line 3663 "cPickle.c"
        var $30=(($29+32)&4294967295); //@line 3663 "cPickle.c"
        var $31=HEAP[$30]; //@line 3663 "cPickle.c"
        var $32=(($31+12)&4294967295); //@line 3663 "cPickle.c"
        var $33=HEAP[$32]; //@line 3663 "cPickle.c"
        var $34=((($28))|0)==((($33))|0); //@line 3663 "cPickle.c"
        if ($34) { __label__ = 9; break; } else { __label__ = 13; break; } //@line 3663 "cPickle.c"
      case 9: // $bb8
        var $35=HEAP[$self_addr]; //@line 3663 "cPickle.c"
        var $36=(($35+32)&4294967295); //@line 3663 "cPickle.c"
        var $37=HEAP[$36]; //@line 3663 "cPickle.c"
        var $38=_Pdata_grow($37); //@line 3663 "cPickle.c"
        var $39=((($38))|0) < 0; //@line 3663 "cPickle.c"
        if ($39) { __label__ = 10; break; } else { __label__ = 13; break; } //@line 3663 "cPickle.c"
      case 10: // $bb9
        var $40=HEAP[$py_string]; //@line 3663 "cPickle.c"
        var $41=(($40)&4294967295); //@line 3663 "cPickle.c"
        var $42=HEAP[$41]; //@line 3663 "cPickle.c"
        var $43=((($42) - 1)&4294967295); //@line 3663 "cPickle.c"
        var $44=HEAP[$py_string]; //@line 3663 "cPickle.c"
        var $45=(($44)&4294967295); //@line 3663 "cPickle.c"
        HEAP[$45]=$43; //@line 3663 "cPickle.c"
        var $46=HEAP[$py_string]; //@line 3663 "cPickle.c"
        var $47=(($46)&4294967295); //@line 3663 "cPickle.c"
        var $48=HEAP[$47]; //@line 3663 "cPickle.c"
        var $49=((($48))|0)==0; //@line 3663 "cPickle.c"
        if ($49) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3663 "cPickle.c"
      case 11: // $bb10
        var $50=HEAP[$py_string]; //@line 3663 "cPickle.c"
        var $51=(($50+4)&4294967295); //@line 3663 "cPickle.c"
        var $52=HEAP[$51]; //@line 3663 "cPickle.c"
        var $53=(($52+24)&4294967295); //@line 3663 "cPickle.c"
        var $54=HEAP[$53]; //@line 3663 "cPickle.c"
        var $55=HEAP[$py_string]; //@line 3663 "cPickle.c"
        FUNCTION_TABLE[$54]($55); //@line 3663 "cPickle.c"
        __label__ = 12; break; //@line 3663 "cPickle.c"
      case 12: // $bb11
        HEAP[$0]=-1; //@line 3663 "cPickle.c"
        __label__ = 14; break; //@line 3663 "cPickle.c"
      case 13: // $bb12
        var $56=HEAP[$self_addr]; //@line 3663 "cPickle.c"
        var $57=(($56+32)&4294967295); //@line 3663 "cPickle.c"
        var $58=HEAP[$57]; //@line 3663 "cPickle.c"
        var $59=(($58+16)&4294967295); //@line 3663 "cPickle.c"
        var $60=HEAP[$59]; //@line 3663 "cPickle.c"
        var $61=HEAP[$self_addr]; //@line 3663 "cPickle.c"
        var $62=(($61+32)&4294967295); //@line 3663 "cPickle.c"
        var $63=HEAP[$62]; //@line 3663 "cPickle.c"
        var $64=(($63+8)&4294967295); //@line 3663 "cPickle.c"
        var $65=HEAP[$64]; //@line 3663 "cPickle.c"
        var $66=(($60+4*$65)&4294967295); //@line 3663 "cPickle.c"
        var $67=HEAP[$py_string]; //@line 3663 "cPickle.c"
        HEAP[$66]=$67; //@line 3663 "cPickle.c"
        var $68=((($65) + 1)&4294967295); //@line 3663 "cPickle.c"
        var $69=(($63+8)&4294967295); //@line 3663 "cPickle.c"
        HEAP[$69]=$68; //@line 3663 "cPickle.c"
        HEAP[$0]=0; //@line 3664 "cPickle.c"
        __label__ = 14; break; //@line 3664 "cPickle.c"
      case 14: // $bb13
        var $70=HEAP[$0]; //@line 3645 "cPickle.c"
        HEAP[$retval]=$70; //@line 3645 "cPickle.c"
        __label__ = 15; break; //@line 3645 "cPickle.c"
      case 15: // $return
        var $retval14=HEAP[$retval]; //@line 3645 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval14; //@line 3645 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_short_binstring($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 21; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 21);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $py_string=__stackBase__+12;
        var $l=__stackBase__+16;
        var $s=__stackBase__+17;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$py_string]=0; //@line 3671 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 3675 "cPickle.c"
        var $2=(($1+60)&4294967295); //@line 3675 "cPickle.c"
        var $3=HEAP[$2]; //@line 3675 "cPickle.c"
        var $4=HEAP[$self_addr]; //@line 3675 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s, 1); //@line 3675 "cPickle.c"
        var $6=((($5))|0) < 0; //@line 3675 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3675 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 3676 "cPickle.c"
        __label__ = 12; break; //@line 3676 "cPickle.c"
      case 2: // $bb1
        var $7=HEAP[$s]; //@line 3678 "cPickle.c"
        var $8=(($7)&4294967295); //@line 3678 "cPickle.c"
        var $9=HEAP[$8]; //@line 3678 "cPickle.c"
        HEAP[$l]=$9; //@line 3678 "cPickle.c"
        var $10=HEAP[$self_addr]; //@line 3680 "cPickle.c"
        var $11=(($10+60)&4294967295); //@line 3680 "cPickle.c"
        var $12=HEAP[$11]; //@line 3680 "cPickle.c"
        var $13=HEAP[$l]; //@line 3680 "cPickle.c"
        var $14=unSign(($13), 8, 0); //@line 3680 "cPickle.c"
        var $15=HEAP[$self_addr]; //@line 3680 "cPickle.c"
        var $16=FUNCTION_TABLE[$12]($15, $s, $14); //@line 3680 "cPickle.c"
        var $17=((($16))|0) < 0; //@line 3680 "cPickle.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3680 "cPickle.c"
      case 3: // $bb2
        HEAP[$0]=-1; //@line 3680 "cPickle.c"
        __label__ = 12; break; //@line 3680 "cPickle.c"
      case 4: // $bb3
        var $18=HEAP[$l]; //@line 3682 "cPickle.c"
        var $19=unSign(($18), 8, 0); //@line 3682 "cPickle.c"
        var $20=HEAP[$s]; //@line 3682 "cPickle.c"
        var $21=_PyString_FromStringAndSize($20, $19); //@line 3682 "cPickle.c"
        HEAP[$py_string]=$21; //@line 3682 "cPickle.c"
        var $22=HEAP[$py_string]; //@line 3682 "cPickle.c"
        var $23=($22)==0; //@line 3682 "cPickle.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3682 "cPickle.c"
      case 5: // $bb4
        HEAP[$0]=-1; //@line 3682 "cPickle.c"
        __label__ = 12; break; //@line 3682 "cPickle.c"
      case 6: // $bb5
        var $24=HEAP[$self_addr]; //@line 3684 "cPickle.c"
        var $25=(($24+32)&4294967295); //@line 3684 "cPickle.c"
        var $26=HEAP[$25]; //@line 3684 "cPickle.c"
        var $27=(($26+8)&4294967295); //@line 3684 "cPickle.c"
        var $28=HEAP[$27]; //@line 3684 "cPickle.c"
        var $29=HEAP[$self_addr]; //@line 3684 "cPickle.c"
        var $30=(($29+32)&4294967295); //@line 3684 "cPickle.c"
        var $31=HEAP[$30]; //@line 3684 "cPickle.c"
        var $32=(($31+12)&4294967295); //@line 3684 "cPickle.c"
        var $33=HEAP[$32]; //@line 3684 "cPickle.c"
        var $34=((($28))|0)==((($33))|0); //@line 3684 "cPickle.c"
        if ($34) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 3684 "cPickle.c"
      case 7: // $bb6
        var $35=HEAP[$self_addr]; //@line 3684 "cPickle.c"
        var $36=(($35+32)&4294967295); //@line 3684 "cPickle.c"
        var $37=HEAP[$36]; //@line 3684 "cPickle.c"
        var $38=_Pdata_grow($37); //@line 3684 "cPickle.c"
        var $39=((($38))|0) < 0; //@line 3684 "cPickle.c"
        if ($39) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 3684 "cPickle.c"
      case 8: // $bb7
        var $40=HEAP[$py_string]; //@line 3684 "cPickle.c"
        var $41=(($40)&4294967295); //@line 3684 "cPickle.c"
        var $42=HEAP[$41]; //@line 3684 "cPickle.c"
        var $43=((($42) - 1)&4294967295); //@line 3684 "cPickle.c"
        var $44=HEAP[$py_string]; //@line 3684 "cPickle.c"
        var $45=(($44)&4294967295); //@line 3684 "cPickle.c"
        HEAP[$45]=$43; //@line 3684 "cPickle.c"
        var $46=HEAP[$py_string]; //@line 3684 "cPickle.c"
        var $47=(($46)&4294967295); //@line 3684 "cPickle.c"
        var $48=HEAP[$47]; //@line 3684 "cPickle.c"
        var $49=((($48))|0)==0; //@line 3684 "cPickle.c"
        if ($49) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 3684 "cPickle.c"
      case 9: // $bb8
        var $50=HEAP[$py_string]; //@line 3684 "cPickle.c"
        var $51=(($50+4)&4294967295); //@line 3684 "cPickle.c"
        var $52=HEAP[$51]; //@line 3684 "cPickle.c"
        var $53=(($52+24)&4294967295); //@line 3684 "cPickle.c"
        var $54=HEAP[$53]; //@line 3684 "cPickle.c"
        var $55=HEAP[$py_string]; //@line 3684 "cPickle.c"
        FUNCTION_TABLE[$54]($55); //@line 3684 "cPickle.c"
        __label__ = 10; break; //@line 3684 "cPickle.c"
      case 10: // $bb9
        HEAP[$0]=-1; //@line 3684 "cPickle.c"
        __label__ = 12; break; //@line 3684 "cPickle.c"
      case 11: // $bb10
        var $56=HEAP[$self_addr]; //@line 3684 "cPickle.c"
        var $57=(($56+32)&4294967295); //@line 3684 "cPickle.c"
        var $58=HEAP[$57]; //@line 3684 "cPickle.c"
        var $59=(($58+16)&4294967295); //@line 3684 "cPickle.c"
        var $60=HEAP[$59]; //@line 3684 "cPickle.c"
        var $61=HEAP[$self_addr]; //@line 3684 "cPickle.c"
        var $62=(($61+32)&4294967295); //@line 3684 "cPickle.c"
        var $63=HEAP[$62]; //@line 3684 "cPickle.c"
        var $64=(($63+8)&4294967295); //@line 3684 "cPickle.c"
        var $65=HEAP[$64]; //@line 3684 "cPickle.c"
        var $66=(($60+4*$65)&4294967295); //@line 3684 "cPickle.c"
        var $67=HEAP[$py_string]; //@line 3684 "cPickle.c"
        HEAP[$66]=$67; //@line 3684 "cPickle.c"
        var $68=((($65) + 1)&4294967295); //@line 3684 "cPickle.c"
        var $69=(($63+8)&4294967295); //@line 3684 "cPickle.c"
        HEAP[$69]=$68; //@line 3684 "cPickle.c"
        HEAP[$0]=0; //@line 3685 "cPickle.c"
        __label__ = 12; break; //@line 3685 "cPickle.c"
      case 12: // $bb11
        var $70=HEAP[$0]; //@line 3676 "cPickle.c"
        HEAP[$retval]=$70; //@line 3676 "cPickle.c"
        __label__ = 13; break; //@line 3676 "cPickle.c"
      case 13: // $return
        var $retval12=HEAP[$retval]; //@line 3676 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval12; //@line 3676 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_unicode($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $str=__stackBase__+12;
        var $len=__stackBase__+16;
        var $res=__stackBase__+20;
        var $s=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$str]=0; //@line 3693 "cPickle.c"
        HEAP[$res]=-1; //@line 3694 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 3697 "cPickle.c"
        var $2=(($1+64)&4294967295); //@line 3697 "cPickle.c"
        var $3=HEAP[$2]; //@line 3697 "cPickle.c"
        var $4=HEAP[$self_addr]; //@line 3697 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s); //@line 3697 "cPickle.c"
        HEAP[$len]=$5; //@line 3697 "cPickle.c"
        var $6=HEAP[$len]; //@line 3697 "cPickle.c"
        var $7=((($6))|0) < 0; //@line 3697 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3697 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 3697 "cPickle.c"
        __label__ = 12; break; //@line 3697 "cPickle.c"
      case 2: // $bb1
        var $8=HEAP[$len]; //@line 3698 "cPickle.c"
        var $9=((($8))|0) <= 0; //@line 3698 "cPickle.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3698 "cPickle.c"
      case 3: // $bb2
        var $10=_bad_readline(); //@line 3698 "cPickle.c"
        HEAP[$0]=$10; //@line 3698 "cPickle.c"
        __label__ = 12; break; //@line 3698 "cPickle.c"
      case 4: // $bb3
        var $11=HEAP[$len]; //@line 3700 "cPickle.c"
        var $12=((($11) - 1)&4294967295); //@line 3700 "cPickle.c"
        var $13=HEAP[$s]; //@line 3700 "cPickle.c"
        var $14=_PyUnicodeUCS2_DecodeRawUnicodeEscape($13, $12, 0); //@line 3700 "cPickle.c"
        HEAP[$str]=$14; //@line 3700 "cPickle.c"
        var $15=HEAP[$str]; //@line 3700 "cPickle.c"
        var $16=($15)==0; //@line 3700 "cPickle.c"
        if ($16) { __label__ = 11; break; } else { __label__ = 5; break; } //@line 3700 "cPickle.c"
      case 5: // $bb4
        var $17=HEAP[$self_addr]; //@line 3703 "cPickle.c"
        var $18=(($17+32)&4294967295); //@line 3703 "cPickle.c"
        var $19=HEAP[$18]; //@line 3703 "cPickle.c"
        var $20=(($19+8)&4294967295); //@line 3703 "cPickle.c"
        var $21=HEAP[$20]; //@line 3703 "cPickle.c"
        var $22=HEAP[$self_addr]; //@line 3703 "cPickle.c"
        var $23=(($22+32)&4294967295); //@line 3703 "cPickle.c"
        var $24=HEAP[$23]; //@line 3703 "cPickle.c"
        var $25=(($24+12)&4294967295); //@line 3703 "cPickle.c"
        var $26=HEAP[$25]; //@line 3703 "cPickle.c"
        var $27=((($21))|0)==((($26))|0); //@line 3703 "cPickle.c"
        if ($27) { __label__ = 6; break; } else { __label__ = 10; break; } //@line 3703 "cPickle.c"
      case 6: // $bb5
        var $28=HEAP[$self_addr]; //@line 3703 "cPickle.c"
        var $29=(($28+32)&4294967295); //@line 3703 "cPickle.c"
        var $30=HEAP[$29]; //@line 3703 "cPickle.c"
        var $31=_Pdata_grow($30); //@line 3703 "cPickle.c"
        var $32=((($31))|0) < 0; //@line 3703 "cPickle.c"
        if ($32) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 3703 "cPickle.c"
      case 7: // $bb6
        var $33=HEAP[$str]; //@line 3703 "cPickle.c"
        var $34=(($33)&4294967295); //@line 3703 "cPickle.c"
        var $35=HEAP[$34]; //@line 3703 "cPickle.c"
        var $36=((($35) - 1)&4294967295); //@line 3703 "cPickle.c"
        var $37=HEAP[$str]; //@line 3703 "cPickle.c"
        var $38=(($37)&4294967295); //@line 3703 "cPickle.c"
        HEAP[$38]=$36; //@line 3703 "cPickle.c"
        var $39=HEAP[$str]; //@line 3703 "cPickle.c"
        var $40=(($39)&4294967295); //@line 3703 "cPickle.c"
        var $41=HEAP[$40]; //@line 3703 "cPickle.c"
        var $42=((($41))|0)==0; //@line 3703 "cPickle.c"
        if ($42) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3703 "cPickle.c"
      case 8: // $bb7
        var $43=HEAP[$str]; //@line 3703 "cPickle.c"
        var $44=(($43+4)&4294967295); //@line 3703 "cPickle.c"
        var $45=HEAP[$44]; //@line 3703 "cPickle.c"
        var $46=(($45+24)&4294967295); //@line 3703 "cPickle.c"
        var $47=HEAP[$46]; //@line 3703 "cPickle.c"
        var $48=HEAP[$str]; //@line 3703 "cPickle.c"
        FUNCTION_TABLE[$47]($48); //@line 3703 "cPickle.c"
        __label__ = 9; break; //@line 3703 "cPickle.c"
      case 9: // $bb8
        HEAP[$0]=-1; //@line 3703 "cPickle.c"
        __label__ = 12; break; //@line 3703 "cPickle.c"
      case 10: // $bb9
        var $49=HEAP[$self_addr]; //@line 3703 "cPickle.c"
        var $50=(($49+32)&4294967295); //@line 3703 "cPickle.c"
        var $51=HEAP[$50]; //@line 3703 "cPickle.c"
        var $52=(($51+16)&4294967295); //@line 3703 "cPickle.c"
        var $53=HEAP[$52]; //@line 3703 "cPickle.c"
        var $54=HEAP[$self_addr]; //@line 3703 "cPickle.c"
        var $55=(($54+32)&4294967295); //@line 3703 "cPickle.c"
        var $56=HEAP[$55]; //@line 3703 "cPickle.c"
        var $57=(($56+8)&4294967295); //@line 3703 "cPickle.c"
        var $58=HEAP[$57]; //@line 3703 "cPickle.c"
        var $59=(($53+4*$58)&4294967295); //@line 3703 "cPickle.c"
        var $60=HEAP[$str]; //@line 3703 "cPickle.c"
        HEAP[$59]=$60; //@line 3703 "cPickle.c"
        var $61=((($58) + 1)&4294967295); //@line 3703 "cPickle.c"
        var $62=(($56+8)&4294967295); //@line 3703 "cPickle.c"
        HEAP[$62]=$61; //@line 3703 "cPickle.c"
        HEAP[$0]=0; //@line 3704 "cPickle.c"
        __label__ = 12; break; //@line 3704 "cPickle.c"
      case 11: // $finally
        var $63=HEAP[$res]; //@line 3707 "cPickle.c"
        HEAP[$0]=$63; //@line 3707 "cPickle.c"
        __label__ = 12; break; //@line 3707 "cPickle.c"
      case 12: // $bb10
        var $64=HEAP[$0]; //@line 3697 "cPickle.c"
        HEAP[$retval]=$64; //@line 3697 "cPickle.c"
        __label__ = 13; break; //@line 3697 "cPickle.c"
      case 13: // $return
        var $retval11=HEAP[$retval]; //@line 3697 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 3697 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_binunicode($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $unicode=__stackBase__+12;
        var $l=__stackBase__+16;
        var $s=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 3720 "cPickle.c"
        var $2=(($1+60)&4294967295); //@line 3720 "cPickle.c"
        var $3=HEAP[$2]; //@line 3720 "cPickle.c"
        var $4=HEAP[$self_addr]; //@line 3720 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s, 4); //@line 3720 "cPickle.c"
        var $6=((($5))|0) < 0; //@line 3720 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3720 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 3720 "cPickle.c"
        __label__ = 14; break; //@line 3720 "cPickle.c"
      case 2: // $bb1
        var $7=HEAP[$s]; //@line 3722 "cPickle.c"
        var $8=_calc_binint($7, 4); //@line 3722 "cPickle.c"
        HEAP[$l]=$8; //@line 3722 "cPickle.c"
        var $9=HEAP[$l]; //@line 3723 "cPickle.c"
        var $10=((($9))|0) < 0; //@line 3723 "cPickle.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3723 "cPickle.c"
      case 3: // $bb2
        var $11=HEAP[_UnpicklingError]; //@line 3727 "cPickle.c"
        _PyErr_SetString($11, ((__str87)&4294967295)); //@line 3727 "cPickle.c"
        HEAP[$0]=-1; //@line 3729 "cPickle.c"
        __label__ = 14; break; //@line 3729 "cPickle.c"
      case 4: // $bb3
        var $12=HEAP[$self_addr]; //@line 3732 "cPickle.c"
        var $13=(($12+60)&4294967295); //@line 3732 "cPickle.c"
        var $14=HEAP[$13]; //@line 3732 "cPickle.c"
        var $15=HEAP[$self_addr]; //@line 3732 "cPickle.c"
        var $16=HEAP[$l]; //@line 3732 "cPickle.c"
        var $17=FUNCTION_TABLE[$14]($15, $s, $16); //@line 3732 "cPickle.c"
        var $18=((($17))|0) < 0; //@line 3732 "cPickle.c"
        if ($18) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3732 "cPickle.c"
      case 5: // $bb4
        HEAP[$0]=-1; //@line 3733 "cPickle.c"
        __label__ = 14; break; //@line 3733 "cPickle.c"
      case 6: // $bb5
        var $19=HEAP[$s]; //@line 3735 "cPickle.c"
        var $20=HEAP[$l]; //@line 3735 "cPickle.c"
        var $21=_PyUnicodeUCS2_DecodeUTF8($19, $20, 0); //@line 3735 "cPickle.c"
        HEAP[$unicode]=$21; //@line 3735 "cPickle.c"
        var $22=HEAP[$unicode]; //@line 3735 "cPickle.c"
        var $23=($22)==0; //@line 3735 "cPickle.c"
        if ($23) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3735 "cPickle.c"
      case 7: // $bb6
        HEAP[$0]=-1; //@line 3736 "cPickle.c"
        __label__ = 14; break; //@line 3736 "cPickle.c"
      case 8: // $bb7
        var $24=HEAP[$self_addr]; //@line 3738 "cPickle.c"
        var $25=(($24+32)&4294967295); //@line 3738 "cPickle.c"
        var $26=HEAP[$25]; //@line 3738 "cPickle.c"
        var $27=(($26+8)&4294967295); //@line 3738 "cPickle.c"
        var $28=HEAP[$27]; //@line 3738 "cPickle.c"
        var $29=HEAP[$self_addr]; //@line 3738 "cPickle.c"
        var $30=(($29+32)&4294967295); //@line 3738 "cPickle.c"
        var $31=HEAP[$30]; //@line 3738 "cPickle.c"
        var $32=(($31+12)&4294967295); //@line 3738 "cPickle.c"
        var $33=HEAP[$32]; //@line 3738 "cPickle.c"
        var $34=((($28))|0)==((($33))|0); //@line 3738 "cPickle.c"
        if ($34) { __label__ = 9; break; } else { __label__ = 13; break; } //@line 3738 "cPickle.c"
      case 9: // $bb8
        var $35=HEAP[$self_addr]; //@line 3738 "cPickle.c"
        var $36=(($35+32)&4294967295); //@line 3738 "cPickle.c"
        var $37=HEAP[$36]; //@line 3738 "cPickle.c"
        var $38=_Pdata_grow($37); //@line 3738 "cPickle.c"
        var $39=((($38))|0) < 0; //@line 3738 "cPickle.c"
        if ($39) { __label__ = 10; break; } else { __label__ = 13; break; } //@line 3738 "cPickle.c"
      case 10: // $bb9
        var $40=HEAP[$unicode]; //@line 3738 "cPickle.c"
        var $41=(($40)&4294967295); //@line 3738 "cPickle.c"
        var $42=HEAP[$41]; //@line 3738 "cPickle.c"
        var $43=((($42) - 1)&4294967295); //@line 3738 "cPickle.c"
        var $44=HEAP[$unicode]; //@line 3738 "cPickle.c"
        var $45=(($44)&4294967295); //@line 3738 "cPickle.c"
        HEAP[$45]=$43; //@line 3738 "cPickle.c"
        var $46=HEAP[$unicode]; //@line 3738 "cPickle.c"
        var $47=(($46)&4294967295); //@line 3738 "cPickle.c"
        var $48=HEAP[$47]; //@line 3738 "cPickle.c"
        var $49=((($48))|0)==0; //@line 3738 "cPickle.c"
        if ($49) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3738 "cPickle.c"
      case 11: // $bb10
        var $50=HEAP[$unicode]; //@line 3738 "cPickle.c"
        var $51=(($50+4)&4294967295); //@line 3738 "cPickle.c"
        var $52=HEAP[$51]; //@line 3738 "cPickle.c"
        var $53=(($52+24)&4294967295); //@line 3738 "cPickle.c"
        var $54=HEAP[$53]; //@line 3738 "cPickle.c"
        var $55=HEAP[$unicode]; //@line 3738 "cPickle.c"
        FUNCTION_TABLE[$54]($55); //@line 3738 "cPickle.c"
        __label__ = 12; break; //@line 3738 "cPickle.c"
      case 12: // $bb11
        HEAP[$0]=-1; //@line 3738 "cPickle.c"
        __label__ = 14; break; //@line 3738 "cPickle.c"
      case 13: // $bb12
        var $56=HEAP[$self_addr]; //@line 3738 "cPickle.c"
        var $57=(($56+32)&4294967295); //@line 3738 "cPickle.c"
        var $58=HEAP[$57]; //@line 3738 "cPickle.c"
        var $59=(($58+16)&4294967295); //@line 3738 "cPickle.c"
        var $60=HEAP[$59]; //@line 3738 "cPickle.c"
        var $61=HEAP[$self_addr]; //@line 3738 "cPickle.c"
        var $62=(($61+32)&4294967295); //@line 3738 "cPickle.c"
        var $63=HEAP[$62]; //@line 3738 "cPickle.c"
        var $64=(($63+8)&4294967295); //@line 3738 "cPickle.c"
        var $65=HEAP[$64]; //@line 3738 "cPickle.c"
        var $66=(($60+4*$65)&4294967295); //@line 3738 "cPickle.c"
        var $67=HEAP[$unicode]; //@line 3738 "cPickle.c"
        HEAP[$66]=$67; //@line 3738 "cPickle.c"
        var $68=((($65) + 1)&4294967295); //@line 3738 "cPickle.c"
        var $69=(($63+8)&4294967295); //@line 3738 "cPickle.c"
        HEAP[$69]=$68; //@line 3738 "cPickle.c"
        HEAP[$0]=0; //@line 3739 "cPickle.c"
        __label__ = 14; break; //@line 3739 "cPickle.c"
      case 14: // $bb13
        var $70=HEAP[$0]; //@line 3720 "cPickle.c"
        HEAP[$retval]=$70; //@line 3720 "cPickle.c"
        __label__ = 15; break; //@line 3720 "cPickle.c"
      case 15: // $return
        var $retval14=HEAP[$retval]; //@line 3720 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval14; //@line 3720 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_tuple($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $tup=__stackBase__+12;
        var $i=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 3750 "cPickle.c"
        var $2=_marker($1); //@line 3750 "cPickle.c"
        HEAP[$i]=$2; //@line 3750 "cPickle.c"
        var $3=HEAP[$i]; //@line 3750 "cPickle.c"
        var $4=((($3))|0) < 0; //@line 3750 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3750 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 3750 "cPickle.c"
        __label__ = 10; break; //@line 3750 "cPickle.c"
      case 2: // $bb1
        var $5=HEAP[$self_addr]; //@line 3751 "cPickle.c"
        var $6=(($5+32)&4294967295); //@line 3751 "cPickle.c"
        var $7=HEAP[$6]; //@line 3751 "cPickle.c"
        var $8=HEAP[$i]; //@line 3751 "cPickle.c"
        var $9=_Pdata_popTuple($7, $8); //@line 3751 "cPickle.c"
        HEAP[$tup]=$9; //@line 3751 "cPickle.c"
        var $10=HEAP[$tup]; //@line 3751 "cPickle.c"
        var $11=($10)==0; //@line 3751 "cPickle.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3751 "cPickle.c"
      case 3: // $bb2
        HEAP[$0]=-1; //@line 3751 "cPickle.c"
        __label__ = 10; break; //@line 3751 "cPickle.c"
      case 4: // $bb3
        var $12=HEAP[$self_addr]; //@line 3752 "cPickle.c"
        var $13=(($12+32)&4294967295); //@line 3752 "cPickle.c"
        var $14=HEAP[$13]; //@line 3752 "cPickle.c"
        var $15=(($14+8)&4294967295); //@line 3752 "cPickle.c"
        var $16=HEAP[$15]; //@line 3752 "cPickle.c"
        var $17=HEAP[$self_addr]; //@line 3752 "cPickle.c"
        var $18=(($17+32)&4294967295); //@line 3752 "cPickle.c"
        var $19=HEAP[$18]; //@line 3752 "cPickle.c"
        var $20=(($19+12)&4294967295); //@line 3752 "cPickle.c"
        var $21=HEAP[$20]; //@line 3752 "cPickle.c"
        var $22=((($16))|0)==((($21))|0); //@line 3752 "cPickle.c"
        if ($22) { __label__ = 5; break; } else { __label__ = 9; break; } //@line 3752 "cPickle.c"
      case 5: // $bb4
        var $23=HEAP[$self_addr]; //@line 3752 "cPickle.c"
        var $24=(($23+32)&4294967295); //@line 3752 "cPickle.c"
        var $25=HEAP[$24]; //@line 3752 "cPickle.c"
        var $26=_Pdata_grow($25); //@line 3752 "cPickle.c"
        var $27=((($26))|0) < 0; //@line 3752 "cPickle.c"
        if ($27) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 3752 "cPickle.c"
      case 6: // $bb5
        var $28=HEAP[$tup]; //@line 3752 "cPickle.c"
        var $29=(($28)&4294967295); //@line 3752 "cPickle.c"
        var $30=HEAP[$29]; //@line 3752 "cPickle.c"
        var $31=((($30) - 1)&4294967295); //@line 3752 "cPickle.c"
        var $32=HEAP[$tup]; //@line 3752 "cPickle.c"
        var $33=(($32)&4294967295); //@line 3752 "cPickle.c"
        HEAP[$33]=$31; //@line 3752 "cPickle.c"
        var $34=HEAP[$tup]; //@line 3752 "cPickle.c"
        var $35=(($34)&4294967295); //@line 3752 "cPickle.c"
        var $36=HEAP[$35]; //@line 3752 "cPickle.c"
        var $37=((($36))|0)==0; //@line 3752 "cPickle.c"
        if ($37) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3752 "cPickle.c"
      case 7: // $bb6
        var $38=HEAP[$tup]; //@line 3752 "cPickle.c"
        var $39=(($38+4)&4294967295); //@line 3752 "cPickle.c"
        var $40=HEAP[$39]; //@line 3752 "cPickle.c"
        var $41=(($40+24)&4294967295); //@line 3752 "cPickle.c"
        var $42=HEAP[$41]; //@line 3752 "cPickle.c"
        var $43=HEAP[$tup]; //@line 3752 "cPickle.c"
        FUNCTION_TABLE[$42]($43); //@line 3752 "cPickle.c"
        __label__ = 8; break; //@line 3752 "cPickle.c"
      case 8: // $bb7
        HEAP[$0]=-1; //@line 3752 "cPickle.c"
        __label__ = 10; break; //@line 3752 "cPickle.c"
      case 9: // $bb8
        var $44=HEAP[$self_addr]; //@line 3752 "cPickle.c"
        var $45=(($44+32)&4294967295); //@line 3752 "cPickle.c"
        var $46=HEAP[$45]; //@line 3752 "cPickle.c"
        var $47=(($46+16)&4294967295); //@line 3752 "cPickle.c"
        var $48=HEAP[$47]; //@line 3752 "cPickle.c"
        var $49=HEAP[$self_addr]; //@line 3752 "cPickle.c"
        var $50=(($49+32)&4294967295); //@line 3752 "cPickle.c"
        var $51=HEAP[$50]; //@line 3752 "cPickle.c"
        var $52=(($51+8)&4294967295); //@line 3752 "cPickle.c"
        var $53=HEAP[$52]; //@line 3752 "cPickle.c"
        var $54=(($48+4*$53)&4294967295); //@line 3752 "cPickle.c"
        var $55=HEAP[$tup]; //@line 3752 "cPickle.c"
        HEAP[$54]=$55; //@line 3752 "cPickle.c"
        var $56=((($53) + 1)&4294967295); //@line 3752 "cPickle.c"
        var $57=(($51+8)&4294967295); //@line 3752 "cPickle.c"
        HEAP[$57]=$56; //@line 3752 "cPickle.c"
        HEAP[$0]=0; //@line 3753 "cPickle.c"
        __label__ = 10; break; //@line 3753 "cPickle.c"
      case 10: // $bb9
        var $58=HEAP[$0]; //@line 3750 "cPickle.c"
        HEAP[$retval]=$58; //@line 3750 "cPickle.c"
        __label__ = 11; break; //@line 3750 "cPickle.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 3750 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 3750 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_counted_tuple($self, $len) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $len_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $tup=__stackBase__+16;
        var $element=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$len_addr]=$len;
        var $1=HEAP[$len_addr]; //@line 3759 "cPickle.c"
        var $2=_PyTuple_New($1); //@line 3759 "cPickle.c"
        HEAP[$tup]=$2; //@line 3759 "cPickle.c"
        var $3=HEAP[$tup]; //@line 3761 "cPickle.c"
        var $4=($3)==0; //@line 3761 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3761 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 3762 "cPickle.c"
        __label__ = 16; break; //@line 3762 "cPickle.c"
      case 2: // $bb1
        __label__ = 9; break; //@line 3762 "cPickle.c"
      case 3: // $bb2
        var $5=HEAP[$self_addr]; //@line 3767 "cPickle.c"
        var $6=(($5+32)&4294967295); //@line 3767 "cPickle.c"
        var $7=HEAP[$6]; //@line 3767 "cPickle.c"
        var $8=(($7+8)&4294967295); //@line 3767 "cPickle.c"
        var $9=HEAP[$8]; //@line 3767 "cPickle.c"
        var $10=((($9))|0)!=0; //@line 3767 "cPickle.c"
        if ($10) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 3767 "cPickle.c"
      case 4: // $bb3
        var $11=HEAP[$self_addr]; //@line 3767 "cPickle.c"
        var $12=(($11+32)&4294967295); //@line 3767 "cPickle.c"
        var $13=HEAP[$12]; //@line 3767 "cPickle.c"
        var $14=(($13+16)&4294967295); //@line 3767 "cPickle.c"
        var $15=HEAP[$14]; //@line 3767 "cPickle.c"
        var $16=HEAP[$self_addr]; //@line 3767 "cPickle.c"
        var $17=(($16+32)&4294967295); //@line 3767 "cPickle.c"
        var $18=HEAP[$17]; //@line 3767 "cPickle.c"
        var $19=(($18+8)&4294967295); //@line 3767 "cPickle.c"
        var $20=HEAP[$19]; //@line 3767 "cPickle.c"
        var $21=((($20) - 1)&4294967295); //@line 3767 "cPickle.c"
        var $22=(($18+8)&4294967295); //@line 3767 "cPickle.c"
        HEAP[$22]=$21; //@line 3767 "cPickle.c"
        var $23=(($18+8)&4294967295); //@line 3767 "cPickle.c"
        var $24=HEAP[$23]; //@line 3767 "cPickle.c"
        var $25=(($15+4*$24)&4294967295); //@line 3767 "cPickle.c"
        var $26=HEAP[$25]; //@line 3767 "cPickle.c"
        HEAP[$element]=$26; //@line 3767 "cPickle.c"
        __label__ = 6; break; //@line 3767 "cPickle.c"
      case 5: // $bb4
        var $27=HEAP[_UnpicklingError]; //@line 3767 "cPickle.c"
        _PyErr_SetString($27, ((__str88)&4294967295)); //@line 3767 "cPickle.c"
        HEAP[$element]=0; //@line 3767 "cPickle.c"
        __label__ = 6; break; //@line 3767 "cPickle.c"
      case 6: // $bb5
        var $28=HEAP[$element]; //@line 3768 "cPickle.c"
        var $29=($28)==0; //@line 3768 "cPickle.c"
        if ($29) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3768 "cPickle.c"
      case 7: // $bb6
        HEAP[$0]=-1; //@line 3769 "cPickle.c"
        __label__ = 16; break; //@line 3769 "cPickle.c"
      case 8: // $bb7
        var $30=HEAP[$tup]; //@line 3770 "cPickle.c"
        var $31=$30; //@line 3770 "cPickle.c"
        var $32=HEAP[$len_addr]; //@line 3770 "cPickle.c"
        var $33=(($31+12)&4294967295); //@line 3770 "cPickle.c"
        var $34=(($33+$32*4)&4294967295); //@line 3770 "cPickle.c"
        var $35=HEAP[$element]; //@line 3770 "cPickle.c"
        HEAP[$34]=$35; //@line 3770 "cPickle.c"
        __label__ = 9; break; //@line 3770 "cPickle.c"
      case 9: // $bb8
        var $36=HEAP[$len_addr]; //@line 3764 "cPickle.c"
        var $37=((($36) - 1)&4294967295); //@line 3764 "cPickle.c"
        HEAP[$len_addr]=$37; //@line 3764 "cPickle.c"
        var $38=HEAP[$len_addr]; //@line 3764 "cPickle.c"
        var $39=((($38))|0) >= 0; //@line 3764 "cPickle.c"
        if ($39) { __label__ = 3; break; } else { __label__ = 10; break; } //@line 3764 "cPickle.c"
      case 10: // $bb9
        var $40=HEAP[$self_addr]; //@line 3772 "cPickle.c"
        var $41=(($40+32)&4294967295); //@line 3772 "cPickle.c"
        var $42=HEAP[$41]; //@line 3772 "cPickle.c"
        var $43=(($42+8)&4294967295); //@line 3772 "cPickle.c"
        var $44=HEAP[$43]; //@line 3772 "cPickle.c"
        var $45=HEAP[$self_addr]; //@line 3772 "cPickle.c"
        var $46=(($45+32)&4294967295); //@line 3772 "cPickle.c"
        var $47=HEAP[$46]; //@line 3772 "cPickle.c"
        var $48=(($47+12)&4294967295); //@line 3772 "cPickle.c"
        var $49=HEAP[$48]; //@line 3772 "cPickle.c"
        var $50=((($44))|0)==((($49))|0); //@line 3772 "cPickle.c"
        if ($50) { __label__ = 11; break; } else { __label__ = 15; break; } //@line 3772 "cPickle.c"
      case 11: // $bb10
        var $51=HEAP[$self_addr]; //@line 3772 "cPickle.c"
        var $52=(($51+32)&4294967295); //@line 3772 "cPickle.c"
        var $53=HEAP[$52]; //@line 3772 "cPickle.c"
        var $54=_Pdata_grow($53); //@line 3772 "cPickle.c"
        var $55=((($54))|0) < 0; //@line 3772 "cPickle.c"
        if ($55) { __label__ = 12; break; } else { __label__ = 15; break; } //@line 3772 "cPickle.c"
      case 12: // $bb11
        var $56=HEAP[$tup]; //@line 3772 "cPickle.c"
        var $57=(($56)&4294967295); //@line 3772 "cPickle.c"
        var $58=HEAP[$57]; //@line 3772 "cPickle.c"
        var $59=((($58) - 1)&4294967295); //@line 3772 "cPickle.c"
        var $60=HEAP[$tup]; //@line 3772 "cPickle.c"
        var $61=(($60)&4294967295); //@line 3772 "cPickle.c"
        HEAP[$61]=$59; //@line 3772 "cPickle.c"
        var $62=HEAP[$tup]; //@line 3772 "cPickle.c"
        var $63=(($62)&4294967295); //@line 3772 "cPickle.c"
        var $64=HEAP[$63]; //@line 3772 "cPickle.c"
        var $65=((($64))|0)==0; //@line 3772 "cPickle.c"
        if ($65) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 3772 "cPickle.c"
      case 13: // $bb12
        var $66=HEAP[$tup]; //@line 3772 "cPickle.c"
        var $67=(($66+4)&4294967295); //@line 3772 "cPickle.c"
        var $68=HEAP[$67]; //@line 3772 "cPickle.c"
        var $69=(($68+24)&4294967295); //@line 3772 "cPickle.c"
        var $70=HEAP[$69]; //@line 3772 "cPickle.c"
        var $71=HEAP[$tup]; //@line 3772 "cPickle.c"
        FUNCTION_TABLE[$70]($71); //@line 3772 "cPickle.c"
        __label__ = 14; break; //@line 3772 "cPickle.c"
      case 14: // $bb13
        HEAP[$0]=-1; //@line 3772 "cPickle.c"
        __label__ = 16; break; //@line 3772 "cPickle.c"
      case 15: // $bb14
        var $72=HEAP[$self_addr]; //@line 3772 "cPickle.c"
        var $73=(($72+32)&4294967295); //@line 3772 "cPickle.c"
        var $74=HEAP[$73]; //@line 3772 "cPickle.c"
        var $75=(($74+16)&4294967295); //@line 3772 "cPickle.c"
        var $76=HEAP[$75]; //@line 3772 "cPickle.c"
        var $77=HEAP[$self_addr]; //@line 3772 "cPickle.c"
        var $78=(($77+32)&4294967295); //@line 3772 "cPickle.c"
        var $79=HEAP[$78]; //@line 3772 "cPickle.c"
        var $80=(($79+8)&4294967295); //@line 3772 "cPickle.c"
        var $81=HEAP[$80]; //@line 3772 "cPickle.c"
        var $82=(($76+4*$81)&4294967295); //@line 3772 "cPickle.c"
        var $83=HEAP[$tup]; //@line 3772 "cPickle.c"
        HEAP[$82]=$83; //@line 3772 "cPickle.c"
        var $84=((($81) + 1)&4294967295); //@line 3772 "cPickle.c"
        var $85=(($79+8)&4294967295); //@line 3772 "cPickle.c"
        HEAP[$85]=$84; //@line 3772 "cPickle.c"
        HEAP[$0]=0; //@line 3773 "cPickle.c"
        __label__ = 16; break; //@line 3773 "cPickle.c"
      case 16: // $bb15
        var $86=HEAP[$0]; //@line 3762 "cPickle.c"
        HEAP[$retval]=$86; //@line 3762 "cPickle.c"
        __label__ = 17; break; //@line 3762 "cPickle.c"
      case 17: // $return
        var $retval16=HEAP[$retval]; //@line 3762 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval16; //@line 3762 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_empty_list($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $list=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=_PyList_New(0); //@line 3781 "cPickle.c"
        HEAP[$list]=$1; //@line 3781 "cPickle.c"
        var $2=HEAP[$list]; //@line 3781 "cPickle.c"
        var $3=($2)==0; //@line 3781 "cPickle.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3781 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 3781 "cPickle.c"
        __label__ = 8; break; //@line 3781 "cPickle.c"
      case 2: // $bb1
        var $4=HEAP[$self_addr]; //@line 3782 "cPickle.c"
        var $5=(($4+32)&4294967295); //@line 3782 "cPickle.c"
        var $6=HEAP[$5]; //@line 3782 "cPickle.c"
        var $7=(($6+8)&4294967295); //@line 3782 "cPickle.c"
        var $8=HEAP[$7]; //@line 3782 "cPickle.c"
        var $9=HEAP[$self_addr]; //@line 3782 "cPickle.c"
        var $10=(($9+32)&4294967295); //@line 3782 "cPickle.c"
        var $11=HEAP[$10]; //@line 3782 "cPickle.c"
        var $12=(($11+12)&4294967295); //@line 3782 "cPickle.c"
        var $13=HEAP[$12]; //@line 3782 "cPickle.c"
        var $14=((($8))|0)==((($13))|0); //@line 3782 "cPickle.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 3782 "cPickle.c"
      case 3: // $bb2
        var $15=HEAP[$self_addr]; //@line 3782 "cPickle.c"
        var $16=(($15+32)&4294967295); //@line 3782 "cPickle.c"
        var $17=HEAP[$16]; //@line 3782 "cPickle.c"
        var $18=_Pdata_grow($17); //@line 3782 "cPickle.c"
        var $19=((($18))|0) < 0; //@line 3782 "cPickle.c"
        if ($19) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 3782 "cPickle.c"
      case 4: // $bb3
        var $20=HEAP[$list]; //@line 3782 "cPickle.c"
        var $21=(($20)&4294967295); //@line 3782 "cPickle.c"
        var $22=HEAP[$21]; //@line 3782 "cPickle.c"
        var $23=((($22) - 1)&4294967295); //@line 3782 "cPickle.c"
        var $24=HEAP[$list]; //@line 3782 "cPickle.c"
        var $25=(($24)&4294967295); //@line 3782 "cPickle.c"
        HEAP[$25]=$23; //@line 3782 "cPickle.c"
        var $26=HEAP[$list]; //@line 3782 "cPickle.c"
        var $27=(($26)&4294967295); //@line 3782 "cPickle.c"
        var $28=HEAP[$27]; //@line 3782 "cPickle.c"
        var $29=((($28))|0)==0; //@line 3782 "cPickle.c"
        if ($29) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3782 "cPickle.c"
      case 5: // $bb4
        var $30=HEAP[$list]; //@line 3782 "cPickle.c"
        var $31=(($30+4)&4294967295); //@line 3782 "cPickle.c"
        var $32=HEAP[$31]; //@line 3782 "cPickle.c"
        var $33=(($32+24)&4294967295); //@line 3782 "cPickle.c"
        var $34=HEAP[$33]; //@line 3782 "cPickle.c"
        var $35=HEAP[$list]; //@line 3782 "cPickle.c"
        FUNCTION_TABLE[$34]($35); //@line 3782 "cPickle.c"
        __label__ = 6; break; //@line 3782 "cPickle.c"
      case 6: // $bb5
        HEAP[$0]=-1; //@line 3782 "cPickle.c"
        __label__ = 8; break; //@line 3782 "cPickle.c"
      case 7: // $bb6
        var $36=HEAP[$self_addr]; //@line 3782 "cPickle.c"
        var $37=(($36+32)&4294967295); //@line 3782 "cPickle.c"
        var $38=HEAP[$37]; //@line 3782 "cPickle.c"
        var $39=(($38+16)&4294967295); //@line 3782 "cPickle.c"
        var $40=HEAP[$39]; //@line 3782 "cPickle.c"
        var $41=HEAP[$self_addr]; //@line 3782 "cPickle.c"
        var $42=(($41+32)&4294967295); //@line 3782 "cPickle.c"
        var $43=HEAP[$42]; //@line 3782 "cPickle.c"
        var $44=(($43+8)&4294967295); //@line 3782 "cPickle.c"
        var $45=HEAP[$44]; //@line 3782 "cPickle.c"
        var $46=(($40+4*$45)&4294967295); //@line 3782 "cPickle.c"
        var $47=HEAP[$list]; //@line 3782 "cPickle.c"
        HEAP[$46]=$47; //@line 3782 "cPickle.c"
        var $48=((($45) + 1)&4294967295); //@line 3782 "cPickle.c"
        var $49=(($43+8)&4294967295); //@line 3782 "cPickle.c"
        HEAP[$49]=$48; //@line 3782 "cPickle.c"
        HEAP[$0]=0; //@line 3783 "cPickle.c"
        __label__ = 8; break; //@line 3783 "cPickle.c"
      case 8: // $bb7
        var $50=HEAP[$0]; //@line 3781 "cPickle.c"
        HEAP[$retval]=$50; //@line 3781 "cPickle.c"
        __label__ = 9; break; //@line 3781 "cPickle.c"
      case 9: // $return
        var $retval8=HEAP[$retval]; //@line 3781 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval8; //@line 3781 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_empty_dict($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $dict=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=_PyDict_New(); //@line 3791 "cPickle.c"
        HEAP[$dict]=$1; //@line 3791 "cPickle.c"
        var $2=HEAP[$dict]; //@line 3791 "cPickle.c"
        var $3=($2)==0; //@line 3791 "cPickle.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3791 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 3791 "cPickle.c"
        __label__ = 8; break; //@line 3791 "cPickle.c"
      case 2: // $bb1
        var $4=HEAP[$self_addr]; //@line 3792 "cPickle.c"
        var $5=(($4+32)&4294967295); //@line 3792 "cPickle.c"
        var $6=HEAP[$5]; //@line 3792 "cPickle.c"
        var $7=(($6+8)&4294967295); //@line 3792 "cPickle.c"
        var $8=HEAP[$7]; //@line 3792 "cPickle.c"
        var $9=HEAP[$self_addr]; //@line 3792 "cPickle.c"
        var $10=(($9+32)&4294967295); //@line 3792 "cPickle.c"
        var $11=HEAP[$10]; //@line 3792 "cPickle.c"
        var $12=(($11+12)&4294967295); //@line 3792 "cPickle.c"
        var $13=HEAP[$12]; //@line 3792 "cPickle.c"
        var $14=((($8))|0)==((($13))|0); //@line 3792 "cPickle.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 3792 "cPickle.c"
      case 3: // $bb2
        var $15=HEAP[$self_addr]; //@line 3792 "cPickle.c"
        var $16=(($15+32)&4294967295); //@line 3792 "cPickle.c"
        var $17=HEAP[$16]; //@line 3792 "cPickle.c"
        var $18=_Pdata_grow($17); //@line 3792 "cPickle.c"
        var $19=((($18))|0) < 0; //@line 3792 "cPickle.c"
        if ($19) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 3792 "cPickle.c"
      case 4: // $bb3
        var $20=HEAP[$dict]; //@line 3792 "cPickle.c"
        var $21=(($20)&4294967295); //@line 3792 "cPickle.c"
        var $22=HEAP[$21]; //@line 3792 "cPickle.c"
        var $23=((($22) - 1)&4294967295); //@line 3792 "cPickle.c"
        var $24=HEAP[$dict]; //@line 3792 "cPickle.c"
        var $25=(($24)&4294967295); //@line 3792 "cPickle.c"
        HEAP[$25]=$23; //@line 3792 "cPickle.c"
        var $26=HEAP[$dict]; //@line 3792 "cPickle.c"
        var $27=(($26)&4294967295); //@line 3792 "cPickle.c"
        var $28=HEAP[$27]; //@line 3792 "cPickle.c"
        var $29=((($28))|0)==0; //@line 3792 "cPickle.c"
        if ($29) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3792 "cPickle.c"
      case 5: // $bb4
        var $30=HEAP[$dict]; //@line 3792 "cPickle.c"
        var $31=(($30+4)&4294967295); //@line 3792 "cPickle.c"
        var $32=HEAP[$31]; //@line 3792 "cPickle.c"
        var $33=(($32+24)&4294967295); //@line 3792 "cPickle.c"
        var $34=HEAP[$33]; //@line 3792 "cPickle.c"
        var $35=HEAP[$dict]; //@line 3792 "cPickle.c"
        FUNCTION_TABLE[$34]($35); //@line 3792 "cPickle.c"
        __label__ = 6; break; //@line 3792 "cPickle.c"
      case 6: // $bb5
        HEAP[$0]=-1; //@line 3792 "cPickle.c"
        __label__ = 8; break; //@line 3792 "cPickle.c"
      case 7: // $bb6
        var $36=HEAP[$self_addr]; //@line 3792 "cPickle.c"
        var $37=(($36+32)&4294967295); //@line 3792 "cPickle.c"
        var $38=HEAP[$37]; //@line 3792 "cPickle.c"
        var $39=(($38+16)&4294967295); //@line 3792 "cPickle.c"
        var $40=HEAP[$39]; //@line 3792 "cPickle.c"
        var $41=HEAP[$self_addr]; //@line 3792 "cPickle.c"
        var $42=(($41+32)&4294967295); //@line 3792 "cPickle.c"
        var $43=HEAP[$42]; //@line 3792 "cPickle.c"
        var $44=(($43+8)&4294967295); //@line 3792 "cPickle.c"
        var $45=HEAP[$44]; //@line 3792 "cPickle.c"
        var $46=(($40+4*$45)&4294967295); //@line 3792 "cPickle.c"
        var $47=HEAP[$dict]; //@line 3792 "cPickle.c"
        HEAP[$46]=$47; //@line 3792 "cPickle.c"
        var $48=((($45) + 1)&4294967295); //@line 3792 "cPickle.c"
        var $49=(($43+8)&4294967295); //@line 3792 "cPickle.c"
        HEAP[$49]=$48; //@line 3792 "cPickle.c"
        HEAP[$0]=0; //@line 3793 "cPickle.c"
        __label__ = 8; break; //@line 3793 "cPickle.c"
      case 8: // $bb7
        var $50=HEAP[$0]; //@line 3791 "cPickle.c"
        HEAP[$retval]=$50; //@line 3791 "cPickle.c"
        __label__ = 9; break; //@line 3791 "cPickle.c"
      case 9: // $return
        var $retval8=HEAP[$retval]; //@line 3791 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval8; //@line 3791 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_list($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $list=__stackBase__+12;
        var $i=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$list]=0; //@line 3800 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 3803 "cPickle.c"
        var $2=_marker($1); //@line 3803 "cPickle.c"
        HEAP[$i]=$2; //@line 3803 "cPickle.c"
        var $3=HEAP[$i]; //@line 3803 "cPickle.c"
        var $4=((($3))|0) < 0; //@line 3803 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3803 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 3803 "cPickle.c"
        __label__ = 10; break; //@line 3803 "cPickle.c"
      case 2: // $bb1
        var $5=HEAP[$self_addr]; //@line 3804 "cPickle.c"
        var $6=(($5+32)&4294967295); //@line 3804 "cPickle.c"
        var $7=HEAP[$6]; //@line 3804 "cPickle.c"
        var $8=HEAP[$i]; //@line 3804 "cPickle.c"
        var $9=_Pdata_popList($7, $8); //@line 3804 "cPickle.c"
        HEAP[$list]=$9; //@line 3804 "cPickle.c"
        var $10=HEAP[$list]; //@line 3804 "cPickle.c"
        var $11=($10)==0; //@line 3804 "cPickle.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3804 "cPickle.c"
      case 3: // $bb2
        HEAP[$0]=-1; //@line 3804 "cPickle.c"
        __label__ = 10; break; //@line 3804 "cPickle.c"
      case 4: // $bb3
        var $12=HEAP[$self_addr]; //@line 3805 "cPickle.c"
        var $13=(($12+32)&4294967295); //@line 3805 "cPickle.c"
        var $14=HEAP[$13]; //@line 3805 "cPickle.c"
        var $15=(($14+8)&4294967295); //@line 3805 "cPickle.c"
        var $16=HEAP[$15]; //@line 3805 "cPickle.c"
        var $17=HEAP[$self_addr]; //@line 3805 "cPickle.c"
        var $18=(($17+32)&4294967295); //@line 3805 "cPickle.c"
        var $19=HEAP[$18]; //@line 3805 "cPickle.c"
        var $20=(($19+12)&4294967295); //@line 3805 "cPickle.c"
        var $21=HEAP[$20]; //@line 3805 "cPickle.c"
        var $22=((($16))|0)==((($21))|0); //@line 3805 "cPickle.c"
        if ($22) { __label__ = 5; break; } else { __label__ = 9; break; } //@line 3805 "cPickle.c"
      case 5: // $bb4
        var $23=HEAP[$self_addr]; //@line 3805 "cPickle.c"
        var $24=(($23+32)&4294967295); //@line 3805 "cPickle.c"
        var $25=HEAP[$24]; //@line 3805 "cPickle.c"
        var $26=_Pdata_grow($25); //@line 3805 "cPickle.c"
        var $27=((($26))|0) < 0; //@line 3805 "cPickle.c"
        if ($27) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 3805 "cPickle.c"
      case 6: // $bb5
        var $28=HEAP[$list]; //@line 3805 "cPickle.c"
        var $29=(($28)&4294967295); //@line 3805 "cPickle.c"
        var $30=HEAP[$29]; //@line 3805 "cPickle.c"
        var $31=((($30) - 1)&4294967295); //@line 3805 "cPickle.c"
        var $32=HEAP[$list]; //@line 3805 "cPickle.c"
        var $33=(($32)&4294967295); //@line 3805 "cPickle.c"
        HEAP[$33]=$31; //@line 3805 "cPickle.c"
        var $34=HEAP[$list]; //@line 3805 "cPickle.c"
        var $35=(($34)&4294967295); //@line 3805 "cPickle.c"
        var $36=HEAP[$35]; //@line 3805 "cPickle.c"
        var $37=((($36))|0)==0; //@line 3805 "cPickle.c"
        if ($37) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3805 "cPickle.c"
      case 7: // $bb6
        var $38=HEAP[$list]; //@line 3805 "cPickle.c"
        var $39=(($38+4)&4294967295); //@line 3805 "cPickle.c"
        var $40=HEAP[$39]; //@line 3805 "cPickle.c"
        var $41=(($40+24)&4294967295); //@line 3805 "cPickle.c"
        var $42=HEAP[$41]; //@line 3805 "cPickle.c"
        var $43=HEAP[$list]; //@line 3805 "cPickle.c"
        FUNCTION_TABLE[$42]($43); //@line 3805 "cPickle.c"
        __label__ = 8; break; //@line 3805 "cPickle.c"
      case 8: // $bb7
        HEAP[$0]=-1; //@line 3805 "cPickle.c"
        __label__ = 10; break; //@line 3805 "cPickle.c"
      case 9: // $bb8
        var $44=HEAP[$self_addr]; //@line 3805 "cPickle.c"
        var $45=(($44+32)&4294967295); //@line 3805 "cPickle.c"
        var $46=HEAP[$45]; //@line 3805 "cPickle.c"
        var $47=(($46+16)&4294967295); //@line 3805 "cPickle.c"
        var $48=HEAP[$47]; //@line 3805 "cPickle.c"
        var $49=HEAP[$self_addr]; //@line 3805 "cPickle.c"
        var $50=(($49+32)&4294967295); //@line 3805 "cPickle.c"
        var $51=HEAP[$50]; //@line 3805 "cPickle.c"
        var $52=(($51+8)&4294967295); //@line 3805 "cPickle.c"
        var $53=HEAP[$52]; //@line 3805 "cPickle.c"
        var $54=(($48+4*$53)&4294967295); //@line 3805 "cPickle.c"
        var $55=HEAP[$list]; //@line 3805 "cPickle.c"
        HEAP[$54]=$55; //@line 3805 "cPickle.c"
        var $56=((($53) + 1)&4294967295); //@line 3805 "cPickle.c"
        var $57=(($51+8)&4294967295); //@line 3805 "cPickle.c"
        HEAP[$57]=$56; //@line 3805 "cPickle.c"
        HEAP[$0]=0; //@line 3806 "cPickle.c"
        __label__ = 10; break; //@line 3806 "cPickle.c"
      case 10: // $bb9
        var $58=HEAP[$0]; //@line 3803 "cPickle.c"
        HEAP[$retval]=$58; //@line 3803 "cPickle.c"
        __label__ = 11; break; //@line 3803 "cPickle.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 3803 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 3803 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_dict($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $dict=__stackBase__+12;
        var $key=__stackBase__+16;
        var $value=__stackBase__+20;
        var $i=__stackBase__+24;
        var $j=__stackBase__+28;
        var $k=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 3815 "cPickle.c"
        var $2=_marker($1); //@line 3815 "cPickle.c"
        HEAP[$i]=$2; //@line 3815 "cPickle.c"
        var $3=HEAP[$i]; //@line 3815 "cPickle.c"
        var $4=((($3))|0) < 0; //@line 3815 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3815 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 3815 "cPickle.c"
        __label__ = 17; break; //@line 3815 "cPickle.c"
      case 2: // $bb1
        var $5=HEAP[$self_addr]; //@line 3816 "cPickle.c"
        var $6=(($5+32)&4294967295); //@line 3816 "cPickle.c"
        var $7=HEAP[$6]; //@line 3816 "cPickle.c"
        var $8=(($7+8)&4294967295); //@line 3816 "cPickle.c"
        var $9=HEAP[$8]; //@line 3816 "cPickle.c"
        HEAP[$j]=$9; //@line 3816 "cPickle.c"
        var $10=_PyDict_New(); //@line 3818 "cPickle.c"
        HEAP[$dict]=$10; //@line 3818 "cPickle.c"
        var $11=HEAP[$dict]; //@line 3818 "cPickle.c"
        var $12=($11)==0; //@line 3818 "cPickle.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3818 "cPickle.c"
      case 3: // $bb2
        HEAP[$0]=-1; //@line 3818 "cPickle.c"
        __label__ = 17; break; //@line 3818 "cPickle.c"
      case 4: // $bb3
        var $13=HEAP[$i]; //@line 3820 "cPickle.c"
        var $14=((($13) + 1)&4294967295); //@line 3820 "cPickle.c"
        HEAP[$k]=$14; //@line 3820 "cPickle.c"
        __label__ = 10; break; //@line 3820 "cPickle.c"
      case 5: // $bb4
        var $15=HEAP[$self_addr]; //@line 3821 "cPickle.c"
        var $16=(($15+32)&4294967295); //@line 3821 "cPickle.c"
        var $17=HEAP[$16]; //@line 3821 "cPickle.c"
        var $18=(($17+16)&4294967295); //@line 3821 "cPickle.c"
        var $19=HEAP[$18]; //@line 3821 "cPickle.c"
        var $20=HEAP[$k]; //@line 3821 "cPickle.c"
        var $21=((($20) - 1)&4294967295); //@line 3821 "cPickle.c"
        var $22=(($19+4*$21)&4294967295); //@line 3821 "cPickle.c"
        var $23=HEAP[$22]; //@line 3821 "cPickle.c"
        HEAP[$key]=$23; //@line 3821 "cPickle.c"
        var $24=HEAP[$self_addr]; //@line 3822 "cPickle.c"
        var $25=(($24+32)&4294967295); //@line 3822 "cPickle.c"
        var $26=HEAP[$25]; //@line 3822 "cPickle.c"
        var $27=(($26+16)&4294967295); //@line 3822 "cPickle.c"
        var $28=HEAP[$27]; //@line 3822 "cPickle.c"
        var $29=HEAP[$k]; //@line 3822 "cPickle.c"
        var $30=(($28+4*$29)&4294967295); //@line 3822 "cPickle.c"
        var $31=HEAP[$30]; //@line 3822 "cPickle.c"
        HEAP[$value]=$31; //@line 3822 "cPickle.c"
        var $32=HEAP[$dict]; //@line 3823 "cPickle.c"
        var $33=HEAP[$key]; //@line 3823 "cPickle.c"
        var $34=HEAP[$value]; //@line 3823 "cPickle.c"
        var $35=_PyDict_SetItem($32, $33, $34); //@line 3823 "cPickle.c"
        var $36=((($35))|0) < 0; //@line 3823 "cPickle.c"
        if ($36) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 3823 "cPickle.c"
      case 6: // $bb5
        var $37=HEAP[$dict]; //@line 3824 "cPickle.c"
        var $38=(($37)&4294967295); //@line 3824 "cPickle.c"
        var $39=HEAP[$38]; //@line 3824 "cPickle.c"
        var $40=((($39) - 1)&4294967295); //@line 3824 "cPickle.c"
        var $41=HEAP[$dict]; //@line 3824 "cPickle.c"
        var $42=(($41)&4294967295); //@line 3824 "cPickle.c"
        HEAP[$42]=$40; //@line 3824 "cPickle.c"
        var $43=HEAP[$dict]; //@line 3824 "cPickle.c"
        var $44=(($43)&4294967295); //@line 3824 "cPickle.c"
        var $45=HEAP[$44]; //@line 3824 "cPickle.c"
        var $46=((($45))|0)==0; //@line 3824 "cPickle.c"
        if ($46) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3824 "cPickle.c"
      case 7: // $bb6
        var $47=HEAP[$dict]; //@line 3824 "cPickle.c"
        var $48=(($47+4)&4294967295); //@line 3824 "cPickle.c"
        var $49=HEAP[$48]; //@line 3824 "cPickle.c"
        var $50=(($49+24)&4294967295); //@line 3824 "cPickle.c"
        var $51=HEAP[$50]; //@line 3824 "cPickle.c"
        var $52=HEAP[$dict]; //@line 3824 "cPickle.c"
        FUNCTION_TABLE[$51]($52); //@line 3824 "cPickle.c"
        __label__ = 8; break; //@line 3824 "cPickle.c"
      case 8: // $bb7
        HEAP[$0]=-1; //@line 3825 "cPickle.c"
        __label__ = 17; break; //@line 3825 "cPickle.c"
      case 9: // $bb8
        var $53=HEAP[$k]; //@line 3820 "cPickle.c"
        var $54=((($53) + 2)&4294967295); //@line 3820 "cPickle.c"
        HEAP[$k]=$54; //@line 3820 "cPickle.c"
        __label__ = 10; break; //@line 3820 "cPickle.c"
      case 10: // $bb9
        var $55=HEAP[$k]; //@line 3820 "cPickle.c"
        var $56=HEAP[$j]; //@line 3820 "cPickle.c"
        var $57=((($55))|0) < ((($56))|0); //@line 3820 "cPickle.c"
        if ($57) { __label__ = 5; break; } else { __label__ = 11; break; } //@line 3820 "cPickle.c"
      case 11: // $bb10
        var $58=HEAP[$self_addr]; //@line 3828 "cPickle.c"
        var $59=(($58+32)&4294967295); //@line 3828 "cPickle.c"
        var $60=HEAP[$59]; //@line 3828 "cPickle.c"
        var $61=HEAP[$i]; //@line 3828 "cPickle.c"
        var $62=_Pdata_clear($60, $61); //@line 3828 "cPickle.c"
        var $63=HEAP[$self_addr]; //@line 3829 "cPickle.c"
        var $64=(($63+32)&4294967295); //@line 3829 "cPickle.c"
        var $65=HEAP[$64]; //@line 3829 "cPickle.c"
        var $66=(($65+8)&4294967295); //@line 3829 "cPickle.c"
        var $67=HEAP[$66]; //@line 3829 "cPickle.c"
        var $68=HEAP[$self_addr]; //@line 3829 "cPickle.c"
        var $69=(($68+32)&4294967295); //@line 3829 "cPickle.c"
        var $70=HEAP[$69]; //@line 3829 "cPickle.c"
        var $71=(($70+12)&4294967295); //@line 3829 "cPickle.c"
        var $72=HEAP[$71]; //@line 3829 "cPickle.c"
        var $73=((($67))|0)==((($72))|0); //@line 3829 "cPickle.c"
        if ($73) { __label__ = 12; break; } else { __label__ = 16; break; } //@line 3829 "cPickle.c"
      case 12: // $bb11
        var $74=HEAP[$self_addr]; //@line 3829 "cPickle.c"
        var $75=(($74+32)&4294967295); //@line 3829 "cPickle.c"
        var $76=HEAP[$75]; //@line 3829 "cPickle.c"
        var $77=_Pdata_grow($76); //@line 3829 "cPickle.c"
        var $78=((($77))|0) < 0; //@line 3829 "cPickle.c"
        if ($78) { __label__ = 13; break; } else { __label__ = 16; break; } //@line 3829 "cPickle.c"
      case 13: // $bb12
        var $79=HEAP[$dict]; //@line 3829 "cPickle.c"
        var $80=(($79)&4294967295); //@line 3829 "cPickle.c"
        var $81=HEAP[$80]; //@line 3829 "cPickle.c"
        var $82=((($81) - 1)&4294967295); //@line 3829 "cPickle.c"
        var $83=HEAP[$dict]; //@line 3829 "cPickle.c"
        var $84=(($83)&4294967295); //@line 3829 "cPickle.c"
        HEAP[$84]=$82; //@line 3829 "cPickle.c"
        var $85=HEAP[$dict]; //@line 3829 "cPickle.c"
        var $86=(($85)&4294967295); //@line 3829 "cPickle.c"
        var $87=HEAP[$86]; //@line 3829 "cPickle.c"
        var $88=((($87))|0)==0; //@line 3829 "cPickle.c"
        if ($88) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 3829 "cPickle.c"
      case 14: // $bb13
        var $89=HEAP[$dict]; //@line 3829 "cPickle.c"
        var $90=(($89+4)&4294967295); //@line 3829 "cPickle.c"
        var $91=HEAP[$90]; //@line 3829 "cPickle.c"
        var $92=(($91+24)&4294967295); //@line 3829 "cPickle.c"
        var $93=HEAP[$92]; //@line 3829 "cPickle.c"
        var $94=HEAP[$dict]; //@line 3829 "cPickle.c"
        FUNCTION_TABLE[$93]($94); //@line 3829 "cPickle.c"
        __label__ = 15; break; //@line 3829 "cPickle.c"
      case 15: // $bb14
        HEAP[$0]=-1; //@line 3829 "cPickle.c"
        __label__ = 17; break; //@line 3829 "cPickle.c"
      case 16: // $bb15
        var $95=HEAP[$self_addr]; //@line 3829 "cPickle.c"
        var $96=(($95+32)&4294967295); //@line 3829 "cPickle.c"
        var $97=HEAP[$96]; //@line 3829 "cPickle.c"
        var $98=(($97+16)&4294967295); //@line 3829 "cPickle.c"
        var $99=HEAP[$98]; //@line 3829 "cPickle.c"
        var $100=HEAP[$self_addr]; //@line 3829 "cPickle.c"
        var $101=(($100+32)&4294967295); //@line 3829 "cPickle.c"
        var $102=HEAP[$101]; //@line 3829 "cPickle.c"
        var $103=(($102+8)&4294967295); //@line 3829 "cPickle.c"
        var $104=HEAP[$103]; //@line 3829 "cPickle.c"
        var $105=(($99+4*$104)&4294967295); //@line 3829 "cPickle.c"
        var $106=HEAP[$dict]; //@line 3829 "cPickle.c"
        HEAP[$105]=$106; //@line 3829 "cPickle.c"
        var $107=((($104) + 1)&4294967295); //@line 3829 "cPickle.c"
        var $108=(($102+8)&4294967295); //@line 3829 "cPickle.c"
        HEAP[$108]=$107; //@line 3829 "cPickle.c"
        HEAP[$0]=0; //@line 3830 "cPickle.c"
        __label__ = 17; break; //@line 3830 "cPickle.c"
      case 17: // $bb16
        var $109=HEAP[$0]; //@line 3815 "cPickle.c"
        HEAP[$retval]=$109; //@line 3815 "cPickle.c"
        __label__ = 18; break; //@line 3815 "cPickle.c"
      case 18: // $return
        var $retval17=HEAP[$retval]; //@line 3815 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval17; //@line 3815 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Instance_New($cls, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 48; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 48);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $cls_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $r=__stackBase__+16;
        var $l=__stackBase__+20;
        var $__getinitargs__=__stackBase__+24;
        var $inst=__stackBase__+28;
        var $tp=__stackBase__+32;
        var $v=__stackBase__+36;
        var $tb=__stackBase__+40;
        var $tmp_value=__stackBase__+44;
        var $_alloca_point_=0;
        HEAP[$cls_addr]=$cls;
        HEAP[$args_addr]=$args;
        HEAP[$r]=0; //@line 3836 "cPickle.c"
        var $1=HEAP[$cls_addr]; //@line 3838 "cPickle.c"
        var $2=(($1+4)&4294967295); //@line 3838 "cPickle.c"
        var $3=HEAP[$2]; //@line 3838 "cPickle.c"
        var $4=($3)==(_PyClass_Type); //@line 3838 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 10; break; } //@line 3838 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[$args_addr]; //@line 3841 "cPickle.c"
        var $6=_PyObject_Size($5); //@line 3841 "cPickle.c"
        HEAP[$l]=$6; //@line 3841 "cPickle.c"
        var $7=HEAP[$l]; //@line 3841 "cPickle.c"
        var $8=((($7))|0) < 0; //@line 3841 "cPickle.c"
        if ($8) { __label__ = 12; break; } else { __label__ = 2; break; } //@line 3841 "cPickle.c"
      case 2: // $bb1
        var $9=HEAP[$l]; //@line 3842 "cPickle.c"
        var $10=((($9))|0)==0; //@line 3842 "cPickle.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 8; break; } //@line 3842 "cPickle.c"
      case 3: // $bb2
        var $11=HEAP[___getinitargs___str]; //@line 3845 "cPickle.c"
        var $12=HEAP[$cls_addr]; //@line 3845 "cPickle.c"
        var $13=_PyObject_GetAttr($12, $11); //@line 3845 "cPickle.c"
        HEAP[$__getinitargs__]=$13; //@line 3845 "cPickle.c"
        var $14=HEAP[$__getinitargs__]; //@line 3847 "cPickle.c"
        var $15=($14)==0; //@line 3847 "cPickle.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 3847 "cPickle.c"
      case 4: // $bb3
        _PyErr_Clear(); //@line 3852 "cPickle.c"
        var $16=HEAP[$cls_addr]; //@line 3853 "cPickle.c"
        var $17=_PyInstance_NewRaw($16, 0); //@line 3853 "cPickle.c"
        HEAP[$inst]=$17; //@line 3853 "cPickle.c"
        var $18=HEAP[$inst]; //@line 3853 "cPickle.c"
        var $19=($18)==0; //@line 3853 "cPickle.c"
        if ($19) { __label__ = 12; break; } else { __label__ = 5; break; } //@line 3853 "cPickle.c"
      case 5: // $bb4
        var $20=HEAP[$inst]; //@line 3855 "cPickle.c"
        HEAP[$0]=$20; //@line 3855 "cPickle.c"
        __label__ = 20; break; //@line 3855 "cPickle.c"
      case 6: // $bb5
        var $21=HEAP[$__getinitargs__]; //@line 3857 "cPickle.c"
        var $22=(($21)&4294967295); //@line 3857 "cPickle.c"
        var $23=HEAP[$22]; //@line 3857 "cPickle.c"
        var $24=((($23) - 1)&4294967295); //@line 3857 "cPickle.c"
        var $25=HEAP[$__getinitargs__]; //@line 3857 "cPickle.c"
        var $26=(($25)&4294967295); //@line 3857 "cPickle.c"
        HEAP[$26]=$24; //@line 3857 "cPickle.c"
        var $27=HEAP[$__getinitargs__]; //@line 3857 "cPickle.c"
        var $28=(($27)&4294967295); //@line 3857 "cPickle.c"
        var $29=HEAP[$28]; //@line 3857 "cPickle.c"
        var $30=((($29))|0)==0; //@line 3857 "cPickle.c"
        if ($30) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3857 "cPickle.c"
      case 7: // $bb6
        var $31=HEAP[$__getinitargs__]; //@line 3857 "cPickle.c"
        var $32=(($31+4)&4294967295); //@line 3857 "cPickle.c"
        var $33=HEAP[$32]; //@line 3857 "cPickle.c"
        var $34=(($33+24)&4294967295); //@line 3857 "cPickle.c"
        var $35=HEAP[$34]; //@line 3857 "cPickle.c"
        var $36=HEAP[$__getinitargs__]; //@line 3857 "cPickle.c"
        FUNCTION_TABLE[$35]($36); //@line 3857 "cPickle.c"
        __label__ = 8; break; //@line 3857 "cPickle.c"
      case 8: // $bb7
        var $37=HEAP[$cls_addr]; //@line 3860 "cPickle.c"
        var $38=HEAP[$args_addr]; //@line 3860 "cPickle.c"
        var $39=_PyInstance_New($37, $38, 0); //@line 3860 "cPickle.c"
        HEAP[$r]=$39; //@line 3860 "cPickle.c"
        var $40=HEAP[$r]; //@line 3860 "cPickle.c"
        var $41=($40)!=0; //@line 3860 "cPickle.c"
        if ($41) { __label__ = 9; break; } else { __label__ = 12; break; } //@line 3860 "cPickle.c"
      case 9: // $bb8
        var $42=HEAP[$r]; //@line 3860 "cPickle.c"
        HEAP[$0]=$42; //@line 3860 "cPickle.c"
        __label__ = 20; break; //@line 3860 "cPickle.c"
      case 10: // $bb9
        var $43=HEAP[$cls_addr]; //@line 3864 "cPickle.c"
        var $44=HEAP[$args_addr]; //@line 3864 "cPickle.c"
        var $45=_PyObject_CallObject($43, $44); //@line 3864 "cPickle.c"
        HEAP[$r]=$45; //@line 3864 "cPickle.c"
        var $46=HEAP[$r]; //@line 3864 "cPickle.c"
        var $47=($46)!=0; //@line 3864 "cPickle.c"
        if ($47) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3864 "cPickle.c"
      case 11: // $bb10
        var $48=HEAP[$r]; //@line 3864 "cPickle.c"
        HEAP[$0]=$48; //@line 3864 "cPickle.c"
        __label__ = 20; break; //@line 3864 "cPickle.c"
      case 12: // $err
        _PyErr_Fetch($tp, $v, $tb); //@line 3870 "cPickle.c"
        var $49=HEAP[$v]; //@line 3871 "cPickle.c"
        HEAP[$tmp_value]=$49; //@line 3871 "cPickle.c"
        var $50=HEAP[$tmp_value]; //@line 3873 "cPickle.c"
        var $51=($50)==0; //@line 3873 "cPickle.c"
        if ($51) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 3873 "cPickle.c"
      case 13: // $bb11
        HEAP[$tmp_value]=__Py_NoneStruct; //@line 3874 "cPickle.c"
        __label__ = 14; break; //@line 3874 "cPickle.c"
      case 14: // $bb12
        var $52=HEAP[$tmp_value]; //@line 3875 "cPickle.c"
        var $53=HEAP[$cls_addr]; //@line 3875 "cPickle.c"
        var $54=HEAP[$args_addr]; //@line 3875 "cPickle.c"
        var $55=_PyTuple_Pack(3, $52, $53, $54); //@line 3875 "cPickle.c"
        HEAP[$r]=$55; //@line 3875 "cPickle.c"
        var $56=HEAP[$r]; //@line 3875 "cPickle.c"
        var $57=($56)!=0; //@line 3875 "cPickle.c"
        if ($57) { __label__ = 15; break; } else { __label__ = 19; break; } //@line 3875 "cPickle.c"
      case 15: // $bb13
        var $58=HEAP[$v]; //@line 3876 "cPickle.c"
        var $59=($58)!=0; //@line 3876 "cPickle.c"
        if ($59) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 3876 "cPickle.c"
      case 16: // $bb14
        var $60=HEAP[$v]; //@line 3876 "cPickle.c"
        var $61=(($60)&4294967295); //@line 3876 "cPickle.c"
        var $62=HEAP[$61]; //@line 3876 "cPickle.c"
        var $63=((($62) - 1)&4294967295); //@line 3876 "cPickle.c"
        var $64=(($60)&4294967295); //@line 3876 "cPickle.c"
        HEAP[$64]=$63; //@line 3876 "cPickle.c"
        var $65=(($60)&4294967295); //@line 3876 "cPickle.c"
        var $66=HEAP[$65]; //@line 3876 "cPickle.c"
        var $67=((($66))|0)==0; //@line 3876 "cPickle.c"
        if ($67) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 3876 "cPickle.c"
      case 17: // $bb15
        var $68=HEAP[$v]; //@line 3876 "cPickle.c"
        var $69=(($68+4)&4294967295); //@line 3876 "cPickle.c"
        var $70=HEAP[$69]; //@line 3876 "cPickle.c"
        var $71=(($70+24)&4294967295); //@line 3876 "cPickle.c"
        var $72=HEAP[$71]; //@line 3876 "cPickle.c"
        var $73=HEAP[$v]; //@line 3876 "cPickle.c"
        FUNCTION_TABLE[$72]($73); //@line 3876 "cPickle.c"
        __label__ = 18; break; //@line 3876 "cPickle.c"
      case 18: // $bb16
        var $74=HEAP[$r]; //@line 3877 "cPickle.c"
        HEAP[$v]=$74; //@line 3877 "cPickle.c"
        __label__ = 19; break; //@line 3877 "cPickle.c"
      case 19: // $bb17
        var $75=HEAP[$tb]; //@line 3879 "cPickle.c"
        var $76=HEAP[$v]; //@line 3879 "cPickle.c"
        var $77=HEAP[$tp]; //@line 3879 "cPickle.c"
        _PyErr_Restore($77, $76, $75); //@line 3879 "cPickle.c"
        HEAP[$0]=0; //@line 3881 "cPickle.c"
        __label__ = 20; break; //@line 3881 "cPickle.c"
      case 20: // $bb18
        var $78=HEAP[$0]; //@line 3855 "cPickle.c"
        HEAP[$retval]=$78; //@line 3855 "cPickle.c"
        __label__ = 21; break; //@line 3855 "cPickle.c"
      case 21: // $return
        var $retval19=HEAP[$retval]; //@line 3855 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval19; //@line 3855 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_obj($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $class=__stackBase__+12;
        var $tup=__stackBase__+16;
        var $obj=__stackBase__+20;
        var $i=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$obj]=0; //@line 3888 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 3891 "cPickle.c"
        var $2=_marker($1); //@line 3891 "cPickle.c"
        HEAP[$i]=$2; //@line 3891 "cPickle.c"
        var $3=HEAP[$i]; //@line 3891 "cPickle.c"
        var $4=((($3))|0) < 0; //@line 3891 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3891 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 3891 "cPickle.c"
        __label__ = 20; break; //@line 3891 "cPickle.c"
      case 2: // $bb1
        var $5=HEAP[$i]; //@line 3892 "cPickle.c"
        var $6=((($5) + 1)&4294967295); //@line 3892 "cPickle.c"
        var $7=HEAP[$self_addr]; //@line 3892 "cPickle.c"
        var $8=(($7+32)&4294967295); //@line 3892 "cPickle.c"
        var $9=HEAP[$8]; //@line 3892 "cPickle.c"
        var $10=_Pdata_popTuple($9, $6); //@line 3892 "cPickle.c"
        HEAP[$tup]=$10; //@line 3892 "cPickle.c"
        var $11=HEAP[$tup]; //@line 3892 "cPickle.c"
        var $12=($11)==0; //@line 3892 "cPickle.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3892 "cPickle.c"
      case 3: // $bb2
        HEAP[$0]=-1; //@line 3892 "cPickle.c"
        __label__ = 20; break; //@line 3892 "cPickle.c"
      case 4: // $bb3
        var $13=HEAP[$self_addr]; //@line 3893 "cPickle.c"
        var $14=(($13+32)&4294967295); //@line 3893 "cPickle.c"
        var $15=HEAP[$14]; //@line 3893 "cPickle.c"
        var $16=(($15+8)&4294967295); //@line 3893 "cPickle.c"
        var $17=HEAP[$16]; //@line 3893 "cPickle.c"
        var $18=((($17))|0)!=0; //@line 3893 "cPickle.c"
        if ($18) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3893 "cPickle.c"
      case 5: // $bb4
        var $19=HEAP[$self_addr]; //@line 3893 "cPickle.c"
        var $20=(($19+32)&4294967295); //@line 3893 "cPickle.c"
        var $21=HEAP[$20]; //@line 3893 "cPickle.c"
        var $22=(($21+16)&4294967295); //@line 3893 "cPickle.c"
        var $23=HEAP[$22]; //@line 3893 "cPickle.c"
        var $24=HEAP[$self_addr]; //@line 3893 "cPickle.c"
        var $25=(($24+32)&4294967295); //@line 3893 "cPickle.c"
        var $26=HEAP[$25]; //@line 3893 "cPickle.c"
        var $27=(($26+8)&4294967295); //@line 3893 "cPickle.c"
        var $28=HEAP[$27]; //@line 3893 "cPickle.c"
        var $29=((($28) - 1)&4294967295); //@line 3893 "cPickle.c"
        var $30=(($26+8)&4294967295); //@line 3893 "cPickle.c"
        HEAP[$30]=$29; //@line 3893 "cPickle.c"
        var $31=(($26+8)&4294967295); //@line 3893 "cPickle.c"
        var $32=HEAP[$31]; //@line 3893 "cPickle.c"
        var $33=(($23+4*$32)&4294967295); //@line 3893 "cPickle.c"
        var $34=HEAP[$33]; //@line 3893 "cPickle.c"
        HEAP[$class]=$34; //@line 3893 "cPickle.c"
        __label__ = 7; break; //@line 3893 "cPickle.c"
      case 6: // $bb5
        var $35=HEAP[_UnpicklingError]; //@line 3893 "cPickle.c"
        _PyErr_SetString($35, ((__str88)&4294967295)); //@line 3893 "cPickle.c"
        HEAP[$class]=0; //@line 3893 "cPickle.c"
        __label__ = 7; break; //@line 3893 "cPickle.c"
      case 7: // $bb6
        var $36=HEAP[$class]; //@line 3894 "cPickle.c"
        var $37=($36)!=0; //@line 3894 "cPickle.c"
        if ($37) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 3894 "cPickle.c"
      case 8: // $bb7
        var $38=HEAP[$class]; //@line 3895 "cPickle.c"
        var $39=HEAP[$tup]; //@line 3895 "cPickle.c"
        var $40=_Instance_New($38, $39); //@line 3895 "cPickle.c"
        HEAP[$obj]=$40; //@line 3895 "cPickle.c"
        var $41=HEAP[$class]; //@line 3896 "cPickle.c"
        var $42=(($41)&4294967295); //@line 3896 "cPickle.c"
        var $43=HEAP[$42]; //@line 3896 "cPickle.c"
        var $44=((($43) - 1)&4294967295); //@line 3896 "cPickle.c"
        var $45=HEAP[$class]; //@line 3896 "cPickle.c"
        var $46=(($45)&4294967295); //@line 3896 "cPickle.c"
        HEAP[$46]=$44; //@line 3896 "cPickle.c"
        var $47=HEAP[$class]; //@line 3896 "cPickle.c"
        var $48=(($47)&4294967295); //@line 3896 "cPickle.c"
        var $49=HEAP[$48]; //@line 3896 "cPickle.c"
        var $50=((($49))|0)==0; //@line 3896 "cPickle.c"
        if ($50) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 3896 "cPickle.c"
      case 9: // $bb8
        var $51=HEAP[$class]; //@line 3896 "cPickle.c"
        var $52=(($51+4)&4294967295); //@line 3896 "cPickle.c"
        var $53=HEAP[$52]; //@line 3896 "cPickle.c"
        var $54=(($53+24)&4294967295); //@line 3896 "cPickle.c"
        var $55=HEAP[$54]; //@line 3896 "cPickle.c"
        var $56=HEAP[$class]; //@line 3896 "cPickle.c"
        FUNCTION_TABLE[$55]($56); //@line 3896 "cPickle.c"
        __label__ = 10; break; //@line 3896 "cPickle.c"
      case 10: // $bb9
        var $57=HEAP[$tup]; //@line 3898 "cPickle.c"
        var $58=(($57)&4294967295); //@line 3898 "cPickle.c"
        var $59=HEAP[$58]; //@line 3898 "cPickle.c"
        var $60=((($59) - 1)&4294967295); //@line 3898 "cPickle.c"
        var $61=HEAP[$tup]; //@line 3898 "cPickle.c"
        var $62=(($61)&4294967295); //@line 3898 "cPickle.c"
        HEAP[$62]=$60; //@line 3898 "cPickle.c"
        var $63=HEAP[$tup]; //@line 3898 "cPickle.c"
        var $64=(($63)&4294967295); //@line 3898 "cPickle.c"
        var $65=HEAP[$64]; //@line 3898 "cPickle.c"
        var $66=((($65))|0)==0; //@line 3898 "cPickle.c"
        if ($66) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3898 "cPickle.c"
      case 11: // $bb10
        var $67=HEAP[$tup]; //@line 3898 "cPickle.c"
        var $68=(($67+4)&4294967295); //@line 3898 "cPickle.c"
        var $69=HEAP[$68]; //@line 3898 "cPickle.c"
        var $70=(($69+24)&4294967295); //@line 3898 "cPickle.c"
        var $71=HEAP[$70]; //@line 3898 "cPickle.c"
        var $72=HEAP[$tup]; //@line 3898 "cPickle.c"
        FUNCTION_TABLE[$71]($72); //@line 3898 "cPickle.c"
        __label__ = 12; break; //@line 3898 "cPickle.c"
      case 12: // $bb11
        var $73=HEAP[$obj]; //@line 3900 "cPickle.c"
        var $74=($73)==0; //@line 3900 "cPickle.c"
        if ($74) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 3900 "cPickle.c"
      case 13: // $bb12
        HEAP[$0]=-1; //@line 3900 "cPickle.c"
        __label__ = 20; break; //@line 3900 "cPickle.c"
      case 14: // $bb13
        var $75=HEAP[$self_addr]; //@line 3901 "cPickle.c"
        var $76=(($75+32)&4294967295); //@line 3901 "cPickle.c"
        var $77=HEAP[$76]; //@line 3901 "cPickle.c"
        var $78=(($77+8)&4294967295); //@line 3901 "cPickle.c"
        var $79=HEAP[$78]; //@line 3901 "cPickle.c"
        var $80=HEAP[$self_addr]; //@line 3901 "cPickle.c"
        var $81=(($80+32)&4294967295); //@line 3901 "cPickle.c"
        var $82=HEAP[$81]; //@line 3901 "cPickle.c"
        var $83=(($82+12)&4294967295); //@line 3901 "cPickle.c"
        var $84=HEAP[$83]; //@line 3901 "cPickle.c"
        var $85=((($79))|0)==((($84))|0); //@line 3901 "cPickle.c"
        if ($85) { __label__ = 15; break; } else { __label__ = 19; break; } //@line 3901 "cPickle.c"
      case 15: // $bb14
        var $86=HEAP[$self_addr]; //@line 3901 "cPickle.c"
        var $87=(($86+32)&4294967295); //@line 3901 "cPickle.c"
        var $88=HEAP[$87]; //@line 3901 "cPickle.c"
        var $89=_Pdata_grow($88); //@line 3901 "cPickle.c"
        var $90=((($89))|0) < 0; //@line 3901 "cPickle.c"
        if ($90) { __label__ = 16; break; } else { __label__ = 19; break; } //@line 3901 "cPickle.c"
      case 16: // $bb15
        var $91=HEAP[$obj]; //@line 3901 "cPickle.c"
        var $92=(($91)&4294967295); //@line 3901 "cPickle.c"
        var $93=HEAP[$92]; //@line 3901 "cPickle.c"
        var $94=((($93) - 1)&4294967295); //@line 3901 "cPickle.c"
        var $95=HEAP[$obj]; //@line 3901 "cPickle.c"
        var $96=(($95)&4294967295); //@line 3901 "cPickle.c"
        HEAP[$96]=$94; //@line 3901 "cPickle.c"
        var $97=HEAP[$obj]; //@line 3901 "cPickle.c"
        var $98=(($97)&4294967295); //@line 3901 "cPickle.c"
        var $99=HEAP[$98]; //@line 3901 "cPickle.c"
        var $100=((($99))|0)==0; //@line 3901 "cPickle.c"
        if ($100) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 3901 "cPickle.c"
      case 17: // $bb16
        var $101=HEAP[$obj]; //@line 3901 "cPickle.c"
        var $102=(($101+4)&4294967295); //@line 3901 "cPickle.c"
        var $103=HEAP[$102]; //@line 3901 "cPickle.c"
        var $104=(($103+24)&4294967295); //@line 3901 "cPickle.c"
        var $105=HEAP[$104]; //@line 3901 "cPickle.c"
        var $106=HEAP[$obj]; //@line 3901 "cPickle.c"
        FUNCTION_TABLE[$105]($106); //@line 3901 "cPickle.c"
        __label__ = 18; break; //@line 3901 "cPickle.c"
      case 18: // $bb17
        HEAP[$0]=-1; //@line 3901 "cPickle.c"
        __label__ = 20; break; //@line 3901 "cPickle.c"
      case 19: // $bb18
        var $107=HEAP[$self_addr]; //@line 3901 "cPickle.c"
        var $108=(($107+32)&4294967295); //@line 3901 "cPickle.c"
        var $109=HEAP[$108]; //@line 3901 "cPickle.c"
        var $110=(($109+16)&4294967295); //@line 3901 "cPickle.c"
        var $111=HEAP[$110]; //@line 3901 "cPickle.c"
        var $112=HEAP[$self_addr]; //@line 3901 "cPickle.c"
        var $113=(($112+32)&4294967295); //@line 3901 "cPickle.c"
        var $114=HEAP[$113]; //@line 3901 "cPickle.c"
        var $115=(($114+8)&4294967295); //@line 3901 "cPickle.c"
        var $116=HEAP[$115]; //@line 3901 "cPickle.c"
        var $117=(($111+4*$116)&4294967295); //@line 3901 "cPickle.c"
        var $118=HEAP[$obj]; //@line 3901 "cPickle.c"
        HEAP[$117]=$118; //@line 3901 "cPickle.c"
        var $119=((($116) + 1)&4294967295); //@line 3901 "cPickle.c"
        var $120=(($114+8)&4294967295); //@line 3901 "cPickle.c"
        HEAP[$120]=$119; //@line 3901 "cPickle.c"
        HEAP[$0]=0; //@line 3902 "cPickle.c"
        __label__ = 20; break; //@line 3902 "cPickle.c"
      case 20: // $bb19
        var $121=HEAP[$0]; //@line 3891 "cPickle.c"
        HEAP[$retval]=$121; //@line 3891 "cPickle.c"
        __label__ = 21; break; //@line 3891 "cPickle.c"
      case 21: // $return
        var $retval20=HEAP[$retval]; //@line 3891 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval20; //@line 3891 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_inst($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 44);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $tup=__stackBase__+12;
        var $class=__stackBase__+16;
        var $obj=__stackBase__+20;
        var $module_name=__stackBase__+24;
        var $class_name=__stackBase__+28;
        var $i=__stackBase__+32;
        var $len=__stackBase__+36;
        var $s=__stackBase__+40;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$class]=0; //@line 3909 "cPickle.c"
        HEAP[$obj]=0; //@line 3909 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 3913 "cPickle.c"
        var $2=_marker($1); //@line 3913 "cPickle.c"
        HEAP[$i]=$2; //@line 3913 "cPickle.c"
        var $3=HEAP[$i]; //@line 3913 "cPickle.c"
        var $4=((($3))|0) < 0; //@line 3913 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3913 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 3913 "cPickle.c"
        __label__ = 31; break; //@line 3913 "cPickle.c"
      case 2: // $bb1
        var $5=HEAP[$self_addr]; //@line 3915 "cPickle.c"
        var $6=(($5+64)&4294967295); //@line 3915 "cPickle.c"
        var $7=HEAP[$6]; //@line 3915 "cPickle.c"
        var $8=HEAP[$self_addr]; //@line 3915 "cPickle.c"
        var $9=FUNCTION_TABLE[$7]($8, $s); //@line 3915 "cPickle.c"
        HEAP[$len]=$9; //@line 3915 "cPickle.c"
        var $10=HEAP[$len]; //@line 3915 "cPickle.c"
        var $11=((($10))|0) < 0; //@line 3915 "cPickle.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3915 "cPickle.c"
      case 3: // $bb2
        HEAP[$0]=-1; //@line 3915 "cPickle.c"
        __label__ = 31; break; //@line 3915 "cPickle.c"
      case 4: // $bb3
        var $12=HEAP[$len]; //@line 3916 "cPickle.c"
        var $13=((($12))|0) <= 1; //@line 3916 "cPickle.c"
        if ($13) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3916 "cPickle.c"
      case 5: // $bb4
        var $14=_bad_readline(); //@line 3916 "cPickle.c"
        HEAP[$0]=$14; //@line 3916 "cPickle.c"
        __label__ = 31; break; //@line 3916 "cPickle.c"
      case 6: // $bb5
        var $15=HEAP[$len]; //@line 3917 "cPickle.c"
        var $16=((($15) - 1)&4294967295); //@line 3917 "cPickle.c"
        var $17=HEAP[$s]; //@line 3917 "cPickle.c"
        var $18=_PyString_FromStringAndSize($17, $16); //@line 3917 "cPickle.c"
        HEAP[$module_name]=$18; //@line 3917 "cPickle.c"
        var $19=HEAP[$module_name]; //@line 3918 "cPickle.c"
        var $20=($19)==0; //@line 3918 "cPickle.c"
        if ($20) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3918 "cPickle.c"
      case 7: // $bb6
        HEAP[$0]=-1; //@line 3918 "cPickle.c"
        __label__ = 31; break; //@line 3918 "cPickle.c"
      case 8: // $bb7
        var $21=HEAP[$self_addr]; //@line 3920 "cPickle.c"
        var $22=(($21+64)&4294967295); //@line 3920 "cPickle.c"
        var $23=HEAP[$22]; //@line 3920 "cPickle.c"
        var $24=HEAP[$self_addr]; //@line 3920 "cPickle.c"
        var $25=FUNCTION_TABLE[$23]($24, $s); //@line 3920 "cPickle.c"
        HEAP[$len]=$25; //@line 3920 "cPickle.c"
        var $26=HEAP[$len]; //@line 3920 "cPickle.c"
        var $27=((($26))|0) >= 0; //@line 3920 "cPickle.c"
        if ($27) { __label__ = 9; break; } else { __label__ = 14; break; } //@line 3920 "cPickle.c"
      case 9: // $bb8
        var $28=HEAP[$len]; //@line 3921 "cPickle.c"
        var $29=((($28))|0) <= 1; //@line 3921 "cPickle.c"
        if ($29) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3921 "cPickle.c"
      case 10: // $bb9
        var $30=_bad_readline(); //@line 3921 "cPickle.c"
        HEAP[$0]=$30; //@line 3921 "cPickle.c"
        __label__ = 31; break; //@line 3921 "cPickle.c"
      case 11: // $bb10
        var $31=HEAP[$len]; //@line 3922 "cPickle.c"
        var $32=((($31) - 1)&4294967295); //@line 3922 "cPickle.c"
        var $33=HEAP[$s]; //@line 3922 "cPickle.c"
        var $34=_PyString_FromStringAndSize($33, $32); //@line 3922 "cPickle.c"
        HEAP[$class_name]=$34; //@line 3922 "cPickle.c"
        var $35=HEAP[$class_name]; //@line 3922 "cPickle.c"
        var $36=($35)!=0; //@line 3922 "cPickle.c"
        if ($36) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 3922 "cPickle.c"
      case 12: // $bb11
        var $37=HEAP[$self_addr]; //@line 3923 "cPickle.c"
        var $38=(($37+76)&4294967295); //@line 3923 "cPickle.c"
        var $39=HEAP[$38]; //@line 3923 "cPickle.c"
        var $40=HEAP[$module_name]; //@line 3923 "cPickle.c"
        var $41=HEAP[$class_name]; //@line 3923 "cPickle.c"
        var $42=_find_class($40, $41, $39); //@line 3923 "cPickle.c"
        HEAP[$class]=$42; //@line 3923 "cPickle.c"
        var $43=HEAP[$class_name]; //@line 3925 "cPickle.c"
        var $44=(($43)&4294967295); //@line 3925 "cPickle.c"
        var $45=HEAP[$44]; //@line 3925 "cPickle.c"
        var $46=((($45) - 1)&4294967295); //@line 3925 "cPickle.c"
        var $47=HEAP[$class_name]; //@line 3925 "cPickle.c"
        var $48=(($47)&4294967295); //@line 3925 "cPickle.c"
        HEAP[$48]=$46; //@line 3925 "cPickle.c"
        var $49=HEAP[$class_name]; //@line 3925 "cPickle.c"
        var $50=(($49)&4294967295); //@line 3925 "cPickle.c"
        var $51=HEAP[$50]; //@line 3925 "cPickle.c"
        var $52=((($51))|0)==0; //@line 3925 "cPickle.c"
        if ($52) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 3925 "cPickle.c"
      case 13: // $bb12
        var $53=HEAP[$class_name]; //@line 3925 "cPickle.c"
        var $54=(($53+4)&4294967295); //@line 3925 "cPickle.c"
        var $55=HEAP[$54]; //@line 3925 "cPickle.c"
        var $56=(($55+24)&4294967295); //@line 3925 "cPickle.c"
        var $57=HEAP[$56]; //@line 3925 "cPickle.c"
        var $58=HEAP[$class_name]; //@line 3925 "cPickle.c"
        FUNCTION_TABLE[$57]($58); //@line 3925 "cPickle.c"
        __label__ = 14; break; //@line 3925 "cPickle.c"
      case 14: // $bb13
        var $59=HEAP[$module_name]; //@line 3928 "cPickle.c"
        var $60=(($59)&4294967295); //@line 3928 "cPickle.c"
        var $61=HEAP[$60]; //@line 3928 "cPickle.c"
        var $62=((($61) - 1)&4294967295); //@line 3928 "cPickle.c"
        var $63=HEAP[$module_name]; //@line 3928 "cPickle.c"
        var $64=(($63)&4294967295); //@line 3928 "cPickle.c"
        HEAP[$64]=$62; //@line 3928 "cPickle.c"
        var $65=HEAP[$module_name]; //@line 3928 "cPickle.c"
        var $66=(($65)&4294967295); //@line 3928 "cPickle.c"
        var $67=HEAP[$66]; //@line 3928 "cPickle.c"
        var $68=((($67))|0)==0; //@line 3928 "cPickle.c"
        if ($68) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 3928 "cPickle.c"
      case 15: // $bb14
        var $69=HEAP[$module_name]; //@line 3928 "cPickle.c"
        var $70=(($69+4)&4294967295); //@line 3928 "cPickle.c"
        var $71=HEAP[$70]; //@line 3928 "cPickle.c"
        var $72=(($71+24)&4294967295); //@line 3928 "cPickle.c"
        var $73=HEAP[$72]; //@line 3928 "cPickle.c"
        var $74=HEAP[$module_name]; //@line 3928 "cPickle.c"
        FUNCTION_TABLE[$73]($74); //@line 3928 "cPickle.c"
        __label__ = 16; break; //@line 3928 "cPickle.c"
      case 16: // $bb15
        var $75=HEAP[$class]; //@line 3930 "cPickle.c"
        var $76=($75)==0; //@line 3930 "cPickle.c"
        if ($76) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 3930 "cPickle.c"
      case 17: // $bb16
        HEAP[$0]=-1; //@line 3930 "cPickle.c"
        __label__ = 31; break; //@line 3930 "cPickle.c"
      case 18: // $bb17
        var $77=HEAP[$self_addr]; //@line 3932 "cPickle.c"
        var $78=(($77+32)&4294967295); //@line 3932 "cPickle.c"
        var $79=HEAP[$78]; //@line 3932 "cPickle.c"
        var $80=HEAP[$i]; //@line 3932 "cPickle.c"
        var $81=_Pdata_popTuple($79, $80); //@line 3932 "cPickle.c"
        HEAP[$tup]=$81; //@line 3932 "cPickle.c"
        var $82=HEAP[$tup]; //@line 3932 "cPickle.c"
        var $83=($82)!=0; //@line 3932 "cPickle.c"
        if ($83) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 3932 "cPickle.c"
      case 19: // $bb18
        var $84=HEAP[$class]; //@line 3933 "cPickle.c"
        var $85=HEAP[$tup]; //@line 3933 "cPickle.c"
        var $86=_Instance_New($84, $85); //@line 3933 "cPickle.c"
        HEAP[$obj]=$86; //@line 3933 "cPickle.c"
        var $87=HEAP[$tup]; //@line 3934 "cPickle.c"
        var $88=(($87)&4294967295); //@line 3934 "cPickle.c"
        var $89=HEAP[$88]; //@line 3934 "cPickle.c"
        var $90=((($89) - 1)&4294967295); //@line 3934 "cPickle.c"
        var $91=HEAP[$tup]; //@line 3934 "cPickle.c"
        var $92=(($91)&4294967295); //@line 3934 "cPickle.c"
        HEAP[$92]=$90; //@line 3934 "cPickle.c"
        var $93=HEAP[$tup]; //@line 3934 "cPickle.c"
        var $94=(($93)&4294967295); //@line 3934 "cPickle.c"
        var $95=HEAP[$94]; //@line 3934 "cPickle.c"
        var $96=((($95))|0)==0; //@line 3934 "cPickle.c"
        if ($96) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 3934 "cPickle.c"
      case 20: // $bb19
        var $97=HEAP[$tup]; //@line 3934 "cPickle.c"
        var $98=(($97+4)&4294967295); //@line 3934 "cPickle.c"
        var $99=HEAP[$98]; //@line 3934 "cPickle.c"
        var $100=(($99+24)&4294967295); //@line 3934 "cPickle.c"
        var $101=HEAP[$100]; //@line 3934 "cPickle.c"
        var $102=HEAP[$tup]; //@line 3934 "cPickle.c"
        FUNCTION_TABLE[$101]($102); //@line 3934 "cPickle.c"
        __label__ = 21; break; //@line 3934 "cPickle.c"
      case 21: // $bb20
        var $103=HEAP[$class]; //@line 3936 "cPickle.c"
        var $104=(($103)&4294967295); //@line 3936 "cPickle.c"
        var $105=HEAP[$104]; //@line 3936 "cPickle.c"
        var $106=((($105) - 1)&4294967295); //@line 3936 "cPickle.c"
        var $107=HEAP[$class]; //@line 3936 "cPickle.c"
        var $108=(($107)&4294967295); //@line 3936 "cPickle.c"
        HEAP[$108]=$106; //@line 3936 "cPickle.c"
        var $109=HEAP[$class]; //@line 3936 "cPickle.c"
        var $110=(($109)&4294967295); //@line 3936 "cPickle.c"
        var $111=HEAP[$110]; //@line 3936 "cPickle.c"
        var $112=((($111))|0)==0; //@line 3936 "cPickle.c"
        if ($112) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 3936 "cPickle.c"
      case 22: // $bb21
        var $113=HEAP[$class]; //@line 3936 "cPickle.c"
        var $114=(($113+4)&4294967295); //@line 3936 "cPickle.c"
        var $115=HEAP[$114]; //@line 3936 "cPickle.c"
        var $116=(($115+24)&4294967295); //@line 3936 "cPickle.c"
        var $117=HEAP[$116]; //@line 3936 "cPickle.c"
        var $118=HEAP[$class]; //@line 3936 "cPickle.c"
        FUNCTION_TABLE[$117]($118); //@line 3936 "cPickle.c"
        __label__ = 23; break; //@line 3936 "cPickle.c"
      case 23: // $bb22
        var $119=HEAP[$obj]; //@line 3938 "cPickle.c"
        var $120=($119)==0; //@line 3938 "cPickle.c"
        if ($120) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 3938 "cPickle.c"
      case 24: // $bb23
        HEAP[$0]=-1; //@line 3938 "cPickle.c"
        __label__ = 31; break; //@line 3938 "cPickle.c"
      case 25: // $bb24
        var $121=HEAP[$self_addr]; //@line 3940 "cPickle.c"
        var $122=(($121+32)&4294967295); //@line 3940 "cPickle.c"
        var $123=HEAP[$122]; //@line 3940 "cPickle.c"
        var $124=(($123+8)&4294967295); //@line 3940 "cPickle.c"
        var $125=HEAP[$124]; //@line 3940 "cPickle.c"
        var $126=HEAP[$self_addr]; //@line 3940 "cPickle.c"
        var $127=(($126+32)&4294967295); //@line 3940 "cPickle.c"
        var $128=HEAP[$127]; //@line 3940 "cPickle.c"
        var $129=(($128+12)&4294967295); //@line 3940 "cPickle.c"
        var $130=HEAP[$129]; //@line 3940 "cPickle.c"
        var $131=((($125))|0)==((($130))|0); //@line 3940 "cPickle.c"
        if ($131) { __label__ = 26; break; } else { __label__ = 30; break; } //@line 3940 "cPickle.c"
      case 26: // $bb25
        var $132=HEAP[$self_addr]; //@line 3940 "cPickle.c"
        var $133=(($132+32)&4294967295); //@line 3940 "cPickle.c"
        var $134=HEAP[$133]; //@line 3940 "cPickle.c"
        var $135=_Pdata_grow($134); //@line 3940 "cPickle.c"
        var $136=((($135))|0) < 0; //@line 3940 "cPickle.c"
        if ($136) { __label__ = 27; break; } else { __label__ = 30; break; } //@line 3940 "cPickle.c"
      case 27: // $bb26
        var $137=HEAP[$obj]; //@line 3940 "cPickle.c"
        var $138=(($137)&4294967295); //@line 3940 "cPickle.c"
        var $139=HEAP[$138]; //@line 3940 "cPickle.c"
        var $140=((($139) - 1)&4294967295); //@line 3940 "cPickle.c"
        var $141=HEAP[$obj]; //@line 3940 "cPickle.c"
        var $142=(($141)&4294967295); //@line 3940 "cPickle.c"
        HEAP[$142]=$140; //@line 3940 "cPickle.c"
        var $143=HEAP[$obj]; //@line 3940 "cPickle.c"
        var $144=(($143)&4294967295); //@line 3940 "cPickle.c"
        var $145=HEAP[$144]; //@line 3940 "cPickle.c"
        var $146=((($145))|0)==0; //@line 3940 "cPickle.c"
        if ($146) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 3940 "cPickle.c"
      case 28: // $bb27
        var $147=HEAP[$obj]; //@line 3940 "cPickle.c"
        var $148=(($147+4)&4294967295); //@line 3940 "cPickle.c"
        var $149=HEAP[$148]; //@line 3940 "cPickle.c"
        var $150=(($149+24)&4294967295); //@line 3940 "cPickle.c"
        var $151=HEAP[$150]; //@line 3940 "cPickle.c"
        var $152=HEAP[$obj]; //@line 3940 "cPickle.c"
        FUNCTION_TABLE[$151]($152); //@line 3940 "cPickle.c"
        __label__ = 29; break; //@line 3940 "cPickle.c"
      case 29: // $bb28
        HEAP[$0]=-1; //@line 3940 "cPickle.c"
        __label__ = 31; break; //@line 3940 "cPickle.c"
      case 30: // $bb29
        var $153=HEAP[$self_addr]; //@line 3940 "cPickle.c"
        var $154=(($153+32)&4294967295); //@line 3940 "cPickle.c"
        var $155=HEAP[$154]; //@line 3940 "cPickle.c"
        var $156=(($155+16)&4294967295); //@line 3940 "cPickle.c"
        var $157=HEAP[$156]; //@line 3940 "cPickle.c"
        var $158=HEAP[$self_addr]; //@line 3940 "cPickle.c"
        var $159=(($158+32)&4294967295); //@line 3940 "cPickle.c"
        var $160=HEAP[$159]; //@line 3940 "cPickle.c"
        var $161=(($160+8)&4294967295); //@line 3940 "cPickle.c"
        var $162=HEAP[$161]; //@line 3940 "cPickle.c"
        var $163=(($157+4*$162)&4294967295); //@line 3940 "cPickle.c"
        var $164=HEAP[$obj]; //@line 3940 "cPickle.c"
        HEAP[$163]=$164; //@line 3940 "cPickle.c"
        var $165=((($162) + 1)&4294967295); //@line 3940 "cPickle.c"
        var $166=(($160+8)&4294967295); //@line 3940 "cPickle.c"
        HEAP[$166]=$165; //@line 3940 "cPickle.c"
        HEAP[$0]=0; //@line 3941 "cPickle.c"
        __label__ = 31; break; //@line 3941 "cPickle.c"
      case 31: // $bb30
        var $167=HEAP[$0]; //@line 3913 "cPickle.c"
        HEAP[$retval]=$167; //@line 3913 "cPickle.c"
        __label__ = 32; break; //@line 3913 "cPickle.c"
      case 32: // $return
        var $retval31=HEAP[$retval]; //@line 3913 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval31; //@line 3913 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_newobj($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $args=__stackBase__+12;
        var $clsraw=__stackBase__+16;
        var $cls=__stackBase__+20;
        var $obj=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args]=0; //@line 3947 "cPickle.c"
        HEAP[$clsraw]=0; //@line 3948 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 3955 "cPickle.c"
        var $2=(($1+32)&4294967295); //@line 3955 "cPickle.c"
        var $3=HEAP[$2]; //@line 3955 "cPickle.c"
        var $4=(($3+8)&4294967295); //@line 3955 "cPickle.c"
        var $5=HEAP[$4]; //@line 3955 "cPickle.c"
        var $6=((($5))|0)!=0; //@line 3955 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3955 "cPickle.c"
      case 1: // $bb
        var $7=HEAP[$self_addr]; //@line 3955 "cPickle.c"
        var $8=(($7+32)&4294967295); //@line 3955 "cPickle.c"
        var $9=HEAP[$8]; //@line 3955 "cPickle.c"
        var $10=(($9+16)&4294967295); //@line 3955 "cPickle.c"
        var $11=HEAP[$10]; //@line 3955 "cPickle.c"
        var $12=HEAP[$self_addr]; //@line 3955 "cPickle.c"
        var $13=(($12+32)&4294967295); //@line 3955 "cPickle.c"
        var $14=HEAP[$13]; //@line 3955 "cPickle.c"
        var $15=(($14+8)&4294967295); //@line 3955 "cPickle.c"
        var $16=HEAP[$15]; //@line 3955 "cPickle.c"
        var $17=((($16) - 1)&4294967295); //@line 3955 "cPickle.c"
        var $18=(($14+8)&4294967295); //@line 3955 "cPickle.c"
        HEAP[$18]=$17; //@line 3955 "cPickle.c"
        var $19=(($14+8)&4294967295); //@line 3955 "cPickle.c"
        var $20=HEAP[$19]; //@line 3955 "cPickle.c"
        var $21=(($11+4*$20)&4294967295); //@line 3955 "cPickle.c"
        var $22=HEAP[$21]; //@line 3955 "cPickle.c"
        HEAP[$args]=$22; //@line 3955 "cPickle.c"
        __label__ = 3; break; //@line 3955 "cPickle.c"
      case 2: // $bb1
        var $23=HEAP[_UnpicklingError]; //@line 3955 "cPickle.c"
        _PyErr_SetString($23, ((__str88)&4294967295)); //@line 3955 "cPickle.c"
        HEAP[$args]=0; //@line 3955 "cPickle.c"
        __label__ = 3; break; //@line 3955 "cPickle.c"
      case 3: // $bb2
        var $24=HEAP[$args]; //@line 3956 "cPickle.c"
        var $25=($24)==0; //@line 3956 "cPickle.c"
        if ($25) { __label__ = 25; break; } else { __label__ = 4; break; } //@line 3956 "cPickle.c"
      case 4: // $bb3
        var $26=HEAP[$args]; //@line 3957 "cPickle.c"
        var $27=(($26+4)&4294967295); //@line 3957 "cPickle.c"
        var $28=HEAP[$27]; //@line 3957 "cPickle.c"
        var $29=(($28+84)&4294967295); //@line 3957 "cPickle.c"
        var $30=HEAP[$29]; //@line 3957 "cPickle.c"
        var $31=($30) & 67108864; //@line 3957 "cPickle.c"
        var $32=((($31))|0)==0; //@line 3957 "cPickle.c"
        if ($32) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3957 "cPickle.c"
      case 5: // $bb4
        var $33=HEAP[_UnpicklingError]; //@line 3958 "cPickle.c"
        _PyErr_SetString($33, ((__str89)&4294967295)); //@line 3958 "cPickle.c"
        __label__ = 25; break; //@line 3958 "cPickle.c"
      case 6: // $bb5
        var $34=HEAP[$self_addr]; //@line 3963 "cPickle.c"
        var $35=(($34+32)&4294967295); //@line 3963 "cPickle.c"
        var $36=HEAP[$35]; //@line 3963 "cPickle.c"
        var $37=(($36+8)&4294967295); //@line 3963 "cPickle.c"
        var $38=HEAP[$37]; //@line 3963 "cPickle.c"
        var $39=((($38))|0)!=0; //@line 3963 "cPickle.c"
        if ($39) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3963 "cPickle.c"
      case 7: // $bb6
        var $40=HEAP[$self_addr]; //@line 3963 "cPickle.c"
        var $41=(($40+32)&4294967295); //@line 3963 "cPickle.c"
        var $42=HEAP[$41]; //@line 3963 "cPickle.c"
        var $43=(($42+16)&4294967295); //@line 3963 "cPickle.c"
        var $44=HEAP[$43]; //@line 3963 "cPickle.c"
        var $45=HEAP[$self_addr]; //@line 3963 "cPickle.c"
        var $46=(($45+32)&4294967295); //@line 3963 "cPickle.c"
        var $47=HEAP[$46]; //@line 3963 "cPickle.c"
        var $48=(($47+8)&4294967295); //@line 3963 "cPickle.c"
        var $49=HEAP[$48]; //@line 3963 "cPickle.c"
        var $50=((($49) - 1)&4294967295); //@line 3963 "cPickle.c"
        var $51=(($47+8)&4294967295); //@line 3963 "cPickle.c"
        HEAP[$51]=$50; //@line 3963 "cPickle.c"
        var $52=(($47+8)&4294967295); //@line 3963 "cPickle.c"
        var $53=HEAP[$52]; //@line 3963 "cPickle.c"
        var $54=(($44+4*$53)&4294967295); //@line 3963 "cPickle.c"
        var $55=HEAP[$54]; //@line 3963 "cPickle.c"
        HEAP[$clsraw]=$55; //@line 3963 "cPickle.c"
        __label__ = 9; break; //@line 3963 "cPickle.c"
      case 8: // $bb7
        var $56=HEAP[_UnpicklingError]; //@line 3963 "cPickle.c"
        _PyErr_SetString($56, ((__str88)&4294967295)); //@line 3963 "cPickle.c"
        HEAP[$clsraw]=0; //@line 3963 "cPickle.c"
        __label__ = 9; break; //@line 3963 "cPickle.c"
      case 9: // $bb8
        var $57=HEAP[$clsraw]; //@line 3964 "cPickle.c"
        var $58=$57; //@line 3964 "cPickle.c"
        HEAP[$cls]=$58; //@line 3964 "cPickle.c"
        var $59=HEAP[$cls]; //@line 3965 "cPickle.c"
        var $60=($59)==0; //@line 3965 "cPickle.c"
        if ($60) { __label__ = 25; break; } else { __label__ = 10; break; } //@line 3965 "cPickle.c"
      case 10: // $bb9
        var $61=HEAP[$cls]; //@line 3966 "cPickle.c"
        var $62=$61; //@line 3966 "cPickle.c"
        var $63=(($62+4)&4294967295); //@line 3966 "cPickle.c"
        var $64=HEAP[$63]; //@line 3966 "cPickle.c"
        var $65=(($64+84)&4294967295); //@line 3966 "cPickle.c"
        var $66=HEAP[$65]; //@line 3966 "cPickle.c"
        var $67=((($66))|0) >= 0; //@line 3966 "cPickle.c"
        if ($67) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3966 "cPickle.c"
      case 11: // $bb10
        var $68=HEAP[_UnpicklingError]; //@line 3967 "cPickle.c"
        _PyErr_SetString($68, ((__str90)&4294967295)); //@line 3967 "cPickle.c"
        __label__ = 25; break; //@line 3967 "cPickle.c"
      case 12: // $bb11
        var $69=HEAP[$cls]; //@line 3971 "cPickle.c"
        var $70=(($69+156)&4294967295); //@line 3971 "cPickle.c"
        var $71=HEAP[$70]; //@line 3971 "cPickle.c"
        var $72=($71)==0; //@line 3971 "cPickle.c"
        if ($72) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 3971 "cPickle.c"
      case 13: // $bb12
        var $73=HEAP[_UnpicklingError]; //@line 3972 "cPickle.c"
        _PyErr_SetString($73, ((__str91)&4294967295)); //@line 3972 "cPickle.c"
        __label__ = 25; break; //@line 3972 "cPickle.c"
      case 14: // $bb13
        var $74=HEAP[$cls]; //@line 3978 "cPickle.c"
        var $75=(($74+156)&4294967295); //@line 3978 "cPickle.c"
        var $76=HEAP[$75]; //@line 3978 "cPickle.c"
        var $77=HEAP[$cls]; //@line 3978 "cPickle.c"
        var $78=HEAP[$args]; //@line 3978 "cPickle.c"
        var $79=FUNCTION_TABLE[$76]($77, $78, 0); //@line 3978 "cPickle.c"
        HEAP[$obj]=$79; //@line 3978 "cPickle.c"
        var $80=HEAP[$obj]; //@line 3979 "cPickle.c"
        var $81=($80)==0; //@line 3979 "cPickle.c"
        if ($81) { __label__ = 25; break; } else { __label__ = 15; break; } //@line 3979 "cPickle.c"
      case 15: // $bb14
        var $82=HEAP[$args]; //@line 3981 "cPickle.c"
        var $83=(($82)&4294967295); //@line 3981 "cPickle.c"
        var $84=HEAP[$83]; //@line 3981 "cPickle.c"
        var $85=((($84) - 1)&4294967295); //@line 3981 "cPickle.c"
        var $86=HEAP[$args]; //@line 3981 "cPickle.c"
        var $87=(($86)&4294967295); //@line 3981 "cPickle.c"
        HEAP[$87]=$85; //@line 3981 "cPickle.c"
        var $88=HEAP[$args]; //@line 3981 "cPickle.c"
        var $89=(($88)&4294967295); //@line 3981 "cPickle.c"
        var $90=HEAP[$89]; //@line 3981 "cPickle.c"
        var $91=((($90))|0)==0; //@line 3981 "cPickle.c"
        if ($91) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 3981 "cPickle.c"
      case 16: // $bb15
        var $92=HEAP[$args]; //@line 3981 "cPickle.c"
        var $93=(($92+4)&4294967295); //@line 3981 "cPickle.c"
        var $94=HEAP[$93]; //@line 3981 "cPickle.c"
        var $95=(($94+24)&4294967295); //@line 3981 "cPickle.c"
        var $96=HEAP[$95]; //@line 3981 "cPickle.c"
        var $97=HEAP[$args]; //@line 3981 "cPickle.c"
        FUNCTION_TABLE[$96]($97); //@line 3981 "cPickle.c"
        __label__ = 17; break; //@line 3981 "cPickle.c"
      case 17: // $bb16
        var $98=HEAP[$clsraw]; //@line 3982 "cPickle.c"
        var $99=(($98)&4294967295); //@line 3982 "cPickle.c"
        var $100=HEAP[$99]; //@line 3982 "cPickle.c"
        var $101=((($100) - 1)&4294967295); //@line 3982 "cPickle.c"
        var $102=HEAP[$clsraw]; //@line 3982 "cPickle.c"
        var $103=(($102)&4294967295); //@line 3982 "cPickle.c"
        HEAP[$103]=$101; //@line 3982 "cPickle.c"
        var $104=HEAP[$clsraw]; //@line 3982 "cPickle.c"
        var $105=(($104)&4294967295); //@line 3982 "cPickle.c"
        var $106=HEAP[$105]; //@line 3982 "cPickle.c"
        var $107=((($106))|0)==0; //@line 3982 "cPickle.c"
        if ($107) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 3982 "cPickle.c"
      case 18: // $bb17
        var $108=HEAP[$clsraw]; //@line 3982 "cPickle.c"
        var $109=(($108+4)&4294967295); //@line 3982 "cPickle.c"
        var $110=HEAP[$109]; //@line 3982 "cPickle.c"
        var $111=(($110+24)&4294967295); //@line 3982 "cPickle.c"
        var $112=HEAP[$111]; //@line 3982 "cPickle.c"
        var $113=HEAP[$clsraw]; //@line 3982 "cPickle.c"
        FUNCTION_TABLE[$112]($113); //@line 3982 "cPickle.c"
        __label__ = 19; break; //@line 3982 "cPickle.c"
      case 19: // $bb18
        var $114=HEAP[$self_addr]; //@line 3983 "cPickle.c"
        var $115=(($114+32)&4294967295); //@line 3983 "cPickle.c"
        var $116=HEAP[$115]; //@line 3983 "cPickle.c"
        var $117=(($116+8)&4294967295); //@line 3983 "cPickle.c"
        var $118=HEAP[$117]; //@line 3983 "cPickle.c"
        var $119=HEAP[$self_addr]; //@line 3983 "cPickle.c"
        var $120=(($119+32)&4294967295); //@line 3983 "cPickle.c"
        var $121=HEAP[$120]; //@line 3983 "cPickle.c"
        var $122=(($121+12)&4294967295); //@line 3983 "cPickle.c"
        var $123=HEAP[$122]; //@line 3983 "cPickle.c"
        var $124=((($118))|0)==((($123))|0); //@line 3983 "cPickle.c"
        if ($124) { __label__ = 20; break; } else { __label__ = 24; break; } //@line 3983 "cPickle.c"
      case 20: // $bb19
        var $125=HEAP[$self_addr]; //@line 3983 "cPickle.c"
        var $126=(($125+32)&4294967295); //@line 3983 "cPickle.c"
        var $127=HEAP[$126]; //@line 3983 "cPickle.c"
        var $128=_Pdata_grow($127); //@line 3983 "cPickle.c"
        var $129=((($128))|0) < 0; //@line 3983 "cPickle.c"
        if ($129) { __label__ = 21; break; } else { __label__ = 24; break; } //@line 3983 "cPickle.c"
      case 21: // $bb20
        var $130=HEAP[$obj]; //@line 3983 "cPickle.c"
        var $131=(($130)&4294967295); //@line 3983 "cPickle.c"
        var $132=HEAP[$131]; //@line 3983 "cPickle.c"
        var $133=((($132) - 1)&4294967295); //@line 3983 "cPickle.c"
        var $134=HEAP[$obj]; //@line 3983 "cPickle.c"
        var $135=(($134)&4294967295); //@line 3983 "cPickle.c"
        HEAP[$135]=$133; //@line 3983 "cPickle.c"
        var $136=HEAP[$obj]; //@line 3983 "cPickle.c"
        var $137=(($136)&4294967295); //@line 3983 "cPickle.c"
        var $138=HEAP[$137]; //@line 3983 "cPickle.c"
        var $139=((($138))|0)==0; //@line 3983 "cPickle.c"
        if ($139) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 3983 "cPickle.c"
      case 22: // $bb21
        var $140=HEAP[$obj]; //@line 3983 "cPickle.c"
        var $141=(($140+4)&4294967295); //@line 3983 "cPickle.c"
        var $142=HEAP[$141]; //@line 3983 "cPickle.c"
        var $143=(($142+24)&4294967295); //@line 3983 "cPickle.c"
        var $144=HEAP[$143]; //@line 3983 "cPickle.c"
        var $145=HEAP[$obj]; //@line 3983 "cPickle.c"
        FUNCTION_TABLE[$144]($145); //@line 3983 "cPickle.c"
        __label__ = 23; break; //@line 3983 "cPickle.c"
      case 23: // $bb22
        HEAP[$0]=-1; //@line 3983 "cPickle.c"
        __label__ = 32; break; //@line 3983 "cPickle.c"
      case 24: // $bb23
        var $146=HEAP[$self_addr]; //@line 3983 "cPickle.c"
        var $147=(($146+32)&4294967295); //@line 3983 "cPickle.c"
        var $148=HEAP[$147]; //@line 3983 "cPickle.c"
        var $149=(($148+16)&4294967295); //@line 3983 "cPickle.c"
        var $150=HEAP[$149]; //@line 3983 "cPickle.c"
        var $151=HEAP[$self_addr]; //@line 3983 "cPickle.c"
        var $152=(($151+32)&4294967295); //@line 3983 "cPickle.c"
        var $153=HEAP[$152]; //@line 3983 "cPickle.c"
        var $154=(($153+8)&4294967295); //@line 3983 "cPickle.c"
        var $155=HEAP[$154]; //@line 3983 "cPickle.c"
        var $156=(($150+4*$155)&4294967295); //@line 3983 "cPickle.c"
        var $157=HEAP[$obj]; //@line 3983 "cPickle.c"
        HEAP[$156]=$157; //@line 3983 "cPickle.c"
        var $158=((($155) + 1)&4294967295); //@line 3983 "cPickle.c"
        var $159=(($153+8)&4294967295); //@line 3983 "cPickle.c"
        HEAP[$159]=$158; //@line 3983 "cPickle.c"
        HEAP[$0]=0; //@line 3984 "cPickle.c"
        __label__ = 32; break; //@line 3984 "cPickle.c"
      case 25: // $Fail
        var $160=HEAP[$args]; //@line 3987 "cPickle.c"
        var $161=($160)!=0; //@line 3987 "cPickle.c"
        if ($161) { __label__ = 26; break; } else { __label__ = 28; break; } //@line 3987 "cPickle.c"
      case 26: // $bb24
        var $162=HEAP[$args]; //@line 3987 "cPickle.c"
        var $163=(($162)&4294967295); //@line 3987 "cPickle.c"
        var $164=HEAP[$163]; //@line 3987 "cPickle.c"
        var $165=((($164) - 1)&4294967295); //@line 3987 "cPickle.c"
        var $166=HEAP[$args]; //@line 3987 "cPickle.c"
        var $167=(($166)&4294967295); //@line 3987 "cPickle.c"
        HEAP[$167]=$165; //@line 3987 "cPickle.c"
        var $168=HEAP[$args]; //@line 3987 "cPickle.c"
        var $169=(($168)&4294967295); //@line 3987 "cPickle.c"
        var $170=HEAP[$169]; //@line 3987 "cPickle.c"
        var $171=((($170))|0)==0; //@line 3987 "cPickle.c"
        if ($171) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 3987 "cPickle.c"
      case 27: // $bb25
        var $172=HEAP[$args]; //@line 3987 "cPickle.c"
        var $173=(($172+4)&4294967295); //@line 3987 "cPickle.c"
        var $174=HEAP[$173]; //@line 3987 "cPickle.c"
        var $175=(($174+24)&4294967295); //@line 3987 "cPickle.c"
        var $176=HEAP[$175]; //@line 3987 "cPickle.c"
        var $177=HEAP[$args]; //@line 3987 "cPickle.c"
        FUNCTION_TABLE[$176]($177); //@line 3987 "cPickle.c"
        __label__ = 28; break; //@line 3987 "cPickle.c"
      case 28: // $bb26
        var $178=HEAP[$clsraw]; //@line 3988 "cPickle.c"
        var $179=($178)!=0; //@line 3988 "cPickle.c"
        if ($179) { __label__ = 29; break; } else { __label__ = 31; break; } //@line 3988 "cPickle.c"
      case 29: // $bb27
        var $180=HEAP[$clsraw]; //@line 3988 "cPickle.c"
        var $181=(($180)&4294967295); //@line 3988 "cPickle.c"
        var $182=HEAP[$181]; //@line 3988 "cPickle.c"
        var $183=((($182) - 1)&4294967295); //@line 3988 "cPickle.c"
        var $184=HEAP[$clsraw]; //@line 3988 "cPickle.c"
        var $185=(($184)&4294967295); //@line 3988 "cPickle.c"
        HEAP[$185]=$183; //@line 3988 "cPickle.c"
        var $186=HEAP[$clsraw]; //@line 3988 "cPickle.c"
        var $187=(($186)&4294967295); //@line 3988 "cPickle.c"
        var $188=HEAP[$187]; //@line 3988 "cPickle.c"
        var $189=((($188))|0)==0; //@line 3988 "cPickle.c"
        if ($189) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 3988 "cPickle.c"
      case 30: // $bb28
        var $190=HEAP[$clsraw]; //@line 3988 "cPickle.c"
        var $191=(($190+4)&4294967295); //@line 3988 "cPickle.c"
        var $192=HEAP[$191]; //@line 3988 "cPickle.c"
        var $193=(($192+24)&4294967295); //@line 3988 "cPickle.c"
        var $194=HEAP[$193]; //@line 3988 "cPickle.c"
        var $195=HEAP[$clsraw]; //@line 3988 "cPickle.c"
        FUNCTION_TABLE[$194]($195); //@line 3988 "cPickle.c"
        __label__ = 31; break; //@line 3988 "cPickle.c"
      case 31: // $bb29
        HEAP[$0]=-1; //@line 3989 "cPickle.c"
        __label__ = 32; break; //@line 3989 "cPickle.c"
      case 32: // $bb30
        var $196=HEAP[$0]; //@line 3983 "cPickle.c"
        HEAP[$retval]=$196; //@line 3983 "cPickle.c"
        __label__ = 33; break; //@line 3983 "cPickle.c"
      case 33: // $return
        var $retval31=HEAP[$retval]; //@line 3983 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval31; //@line 3983 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_global($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $class=__stackBase__+12;
        var $module_name=__stackBase__+16;
        var $class_name=__stackBase__+20;
        var $len=__stackBase__+24;
        var $s=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$class]=0; //@line 3995 "cPickle.c"
        HEAP[$module_name]=0; //@line 3995 "cPickle.c"
        HEAP[$class_name]=0; //@line 3995 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 3999 "cPickle.c"
        var $2=(($1+64)&4294967295); //@line 3999 "cPickle.c"
        var $3=HEAP[$2]; //@line 3999 "cPickle.c"
        var $4=HEAP[$self_addr]; //@line 3999 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s); //@line 3999 "cPickle.c"
        HEAP[$len]=$5; //@line 3999 "cPickle.c"
        var $6=HEAP[$len]; //@line 3999 "cPickle.c"
        var $7=((($6))|0) < 0; //@line 3999 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3999 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 3999 "cPickle.c"
        __label__ = 24; break; //@line 3999 "cPickle.c"
      case 2: // $bb1
        var $8=HEAP[$len]; //@line 4000 "cPickle.c"
        var $9=((($8))|0) <= 1; //@line 4000 "cPickle.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4000 "cPickle.c"
      case 3: // $bb2
        var $10=_bad_readline(); //@line 4000 "cPickle.c"
        HEAP[$0]=$10; //@line 4000 "cPickle.c"
        __label__ = 24; break; //@line 4000 "cPickle.c"
      case 4: // $bb3
        var $11=HEAP[$len]; //@line 4001 "cPickle.c"
        var $12=((($11) - 1)&4294967295); //@line 4001 "cPickle.c"
        var $13=HEAP[$s]; //@line 4001 "cPickle.c"
        var $14=_PyString_FromStringAndSize($13, $12); //@line 4001 "cPickle.c"
        HEAP[$module_name]=$14; //@line 4001 "cPickle.c"
        var $15=HEAP[$module_name]; //@line 4002 "cPickle.c"
        var $16=($15)==0; //@line 4002 "cPickle.c"
        if ($16) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4002 "cPickle.c"
      case 5: // $bb4
        HEAP[$0]=-1; //@line 4002 "cPickle.c"
        __label__ = 24; break; //@line 4002 "cPickle.c"
      case 6: // $bb5
        var $17=HEAP[$self_addr]; //@line 4004 "cPickle.c"
        var $18=(($17+64)&4294967295); //@line 4004 "cPickle.c"
        var $19=HEAP[$18]; //@line 4004 "cPickle.c"
        var $20=HEAP[$self_addr]; //@line 4004 "cPickle.c"
        var $21=FUNCTION_TABLE[$19]($20, $s); //@line 4004 "cPickle.c"
        HEAP[$len]=$21; //@line 4004 "cPickle.c"
        var $22=HEAP[$len]; //@line 4004 "cPickle.c"
        var $23=((($22))|0) >= 0; //@line 4004 "cPickle.c"
        if ($23) { __label__ = 7; break; } else { __label__ = 14; break; } //@line 4004 "cPickle.c"
      case 7: // $bb6
        var $24=HEAP[$len]; //@line 4005 "cPickle.c"
        var $25=((($24))|0) <= 1; //@line 4005 "cPickle.c"
        if ($25) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 4005 "cPickle.c"
      case 8: // $bb7
        var $26=HEAP[$module_name]; //@line 4006 "cPickle.c"
        var $27=(($26)&4294967295); //@line 4006 "cPickle.c"
        var $28=HEAP[$27]; //@line 4006 "cPickle.c"
        var $29=((($28) - 1)&4294967295); //@line 4006 "cPickle.c"
        var $30=HEAP[$module_name]; //@line 4006 "cPickle.c"
        var $31=(($30)&4294967295); //@line 4006 "cPickle.c"
        HEAP[$31]=$29; //@line 4006 "cPickle.c"
        var $32=HEAP[$module_name]; //@line 4006 "cPickle.c"
        var $33=(($32)&4294967295); //@line 4006 "cPickle.c"
        var $34=HEAP[$33]; //@line 4006 "cPickle.c"
        var $35=((($34))|0)==0; //@line 4006 "cPickle.c"
        if ($35) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 4006 "cPickle.c"
      case 9: // $bb8
        var $36=HEAP[$module_name]; //@line 4006 "cPickle.c"
        var $37=(($36+4)&4294967295); //@line 4006 "cPickle.c"
        var $38=HEAP[$37]; //@line 4006 "cPickle.c"
        var $39=(($38+24)&4294967295); //@line 4006 "cPickle.c"
        var $40=HEAP[$39]; //@line 4006 "cPickle.c"
        var $41=HEAP[$module_name]; //@line 4006 "cPickle.c"
        FUNCTION_TABLE[$40]($41); //@line 4006 "cPickle.c"
        __label__ = 10; break; //@line 4006 "cPickle.c"
      case 10: // $bb9
        var $42=_bad_readline(); //@line 4007 "cPickle.c"
        HEAP[$0]=$42; //@line 4007 "cPickle.c"
        __label__ = 24; break; //@line 4007 "cPickle.c"
      case 11: // $bb10
        var $43=HEAP[$len]; //@line 4009 "cPickle.c"
        var $44=((($43) - 1)&4294967295); //@line 4009 "cPickle.c"
        var $45=HEAP[$s]; //@line 4009 "cPickle.c"
        var $46=_PyString_FromStringAndSize($45, $44); //@line 4009 "cPickle.c"
        HEAP[$class_name]=$46; //@line 4009 "cPickle.c"
        var $47=HEAP[$class_name]; //@line 4009 "cPickle.c"
        var $48=($47)!=0; //@line 4009 "cPickle.c"
        if ($48) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 4009 "cPickle.c"
      case 12: // $bb11
        var $49=HEAP[$self_addr]; //@line 4010 "cPickle.c"
        var $50=(($49+76)&4294967295); //@line 4010 "cPickle.c"
        var $51=HEAP[$50]; //@line 4010 "cPickle.c"
        var $52=HEAP[$module_name]; //@line 4010 "cPickle.c"
        var $53=HEAP[$class_name]; //@line 4010 "cPickle.c"
        var $54=_find_class($52, $53, $51); //@line 4010 "cPickle.c"
        HEAP[$class]=$54; //@line 4010 "cPickle.c"
        var $55=HEAP[$class_name]; //@line 4012 "cPickle.c"
        var $56=(($55)&4294967295); //@line 4012 "cPickle.c"
        var $57=HEAP[$56]; //@line 4012 "cPickle.c"
        var $58=((($57) - 1)&4294967295); //@line 4012 "cPickle.c"
        var $59=HEAP[$class_name]; //@line 4012 "cPickle.c"
        var $60=(($59)&4294967295); //@line 4012 "cPickle.c"
        HEAP[$60]=$58; //@line 4012 "cPickle.c"
        var $61=HEAP[$class_name]; //@line 4012 "cPickle.c"
        var $62=(($61)&4294967295); //@line 4012 "cPickle.c"
        var $63=HEAP[$62]; //@line 4012 "cPickle.c"
        var $64=((($63))|0)==0; //@line 4012 "cPickle.c"
        if ($64) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 4012 "cPickle.c"
      case 13: // $bb12
        var $65=HEAP[$class_name]; //@line 4012 "cPickle.c"
        var $66=(($65+4)&4294967295); //@line 4012 "cPickle.c"
        var $67=HEAP[$66]; //@line 4012 "cPickle.c"
        var $68=(($67+24)&4294967295); //@line 4012 "cPickle.c"
        var $69=HEAP[$68]; //@line 4012 "cPickle.c"
        var $70=HEAP[$class_name]; //@line 4012 "cPickle.c"
        FUNCTION_TABLE[$69]($70); //@line 4012 "cPickle.c"
        __label__ = 14; break; //@line 4012 "cPickle.c"
      case 14: // $bb13
        var $71=HEAP[$module_name]; //@line 4015 "cPickle.c"
        var $72=(($71)&4294967295); //@line 4015 "cPickle.c"
        var $73=HEAP[$72]; //@line 4015 "cPickle.c"
        var $74=((($73) - 1)&4294967295); //@line 4015 "cPickle.c"
        var $75=HEAP[$module_name]; //@line 4015 "cPickle.c"
        var $76=(($75)&4294967295); //@line 4015 "cPickle.c"
        HEAP[$76]=$74; //@line 4015 "cPickle.c"
        var $77=HEAP[$module_name]; //@line 4015 "cPickle.c"
        var $78=(($77)&4294967295); //@line 4015 "cPickle.c"
        var $79=HEAP[$78]; //@line 4015 "cPickle.c"
        var $80=((($79))|0)==0; //@line 4015 "cPickle.c"
        if ($80) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 4015 "cPickle.c"
      case 15: // $bb14
        var $81=HEAP[$module_name]; //@line 4015 "cPickle.c"
        var $82=(($81+4)&4294967295); //@line 4015 "cPickle.c"
        var $83=HEAP[$82]; //@line 4015 "cPickle.c"
        var $84=(($83+24)&4294967295); //@line 4015 "cPickle.c"
        var $85=HEAP[$84]; //@line 4015 "cPickle.c"
        var $86=HEAP[$module_name]; //@line 4015 "cPickle.c"
        FUNCTION_TABLE[$85]($86); //@line 4015 "cPickle.c"
        __label__ = 16; break; //@line 4015 "cPickle.c"
      case 16: // $bb15
        var $87=HEAP[$class]; //@line 4017 "cPickle.c"
        var $88=($87)==0; //@line 4017 "cPickle.c"
        if ($88) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 4017 "cPickle.c"
      case 17: // $bb16
        HEAP[$0]=-1; //@line 4017 "cPickle.c"
        __label__ = 24; break; //@line 4017 "cPickle.c"
      case 18: // $bb17
        var $89=HEAP[$self_addr]; //@line 4018 "cPickle.c"
        var $90=(($89+32)&4294967295); //@line 4018 "cPickle.c"
        var $91=HEAP[$90]; //@line 4018 "cPickle.c"
        var $92=(($91+8)&4294967295); //@line 4018 "cPickle.c"
        var $93=HEAP[$92]; //@line 4018 "cPickle.c"
        var $94=HEAP[$self_addr]; //@line 4018 "cPickle.c"
        var $95=(($94+32)&4294967295); //@line 4018 "cPickle.c"
        var $96=HEAP[$95]; //@line 4018 "cPickle.c"
        var $97=(($96+12)&4294967295); //@line 4018 "cPickle.c"
        var $98=HEAP[$97]; //@line 4018 "cPickle.c"
        var $99=((($93))|0)==((($98))|0); //@line 4018 "cPickle.c"
        if ($99) { __label__ = 19; break; } else { __label__ = 23; break; } //@line 4018 "cPickle.c"
      case 19: // $bb18
        var $100=HEAP[$self_addr]; //@line 4018 "cPickle.c"
        var $101=(($100+32)&4294967295); //@line 4018 "cPickle.c"
        var $102=HEAP[$101]; //@line 4018 "cPickle.c"
        var $103=_Pdata_grow($102); //@line 4018 "cPickle.c"
        var $104=((($103))|0) < 0; //@line 4018 "cPickle.c"
        if ($104) { __label__ = 20; break; } else { __label__ = 23; break; } //@line 4018 "cPickle.c"
      case 20: // $bb19
        var $105=HEAP[$class]; //@line 4018 "cPickle.c"
        var $106=(($105)&4294967295); //@line 4018 "cPickle.c"
        var $107=HEAP[$106]; //@line 4018 "cPickle.c"
        var $108=((($107) - 1)&4294967295); //@line 4018 "cPickle.c"
        var $109=HEAP[$class]; //@line 4018 "cPickle.c"
        var $110=(($109)&4294967295); //@line 4018 "cPickle.c"
        HEAP[$110]=$108; //@line 4018 "cPickle.c"
        var $111=HEAP[$class]; //@line 4018 "cPickle.c"
        var $112=(($111)&4294967295); //@line 4018 "cPickle.c"
        var $113=HEAP[$112]; //@line 4018 "cPickle.c"
        var $114=((($113))|0)==0; //@line 4018 "cPickle.c"
        if ($114) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 4018 "cPickle.c"
      case 21: // $bb20
        var $115=HEAP[$class]; //@line 4018 "cPickle.c"
        var $116=(($115+4)&4294967295); //@line 4018 "cPickle.c"
        var $117=HEAP[$116]; //@line 4018 "cPickle.c"
        var $118=(($117+24)&4294967295); //@line 4018 "cPickle.c"
        var $119=HEAP[$118]; //@line 4018 "cPickle.c"
        var $120=HEAP[$class]; //@line 4018 "cPickle.c"
        FUNCTION_TABLE[$119]($120); //@line 4018 "cPickle.c"
        __label__ = 22; break; //@line 4018 "cPickle.c"
      case 22: // $bb21
        HEAP[$0]=-1; //@line 4018 "cPickle.c"
        __label__ = 24; break; //@line 4018 "cPickle.c"
      case 23: // $bb22
        var $121=HEAP[$self_addr]; //@line 4018 "cPickle.c"
        var $122=(($121+32)&4294967295); //@line 4018 "cPickle.c"
        var $123=HEAP[$122]; //@line 4018 "cPickle.c"
        var $124=(($123+16)&4294967295); //@line 4018 "cPickle.c"
        var $125=HEAP[$124]; //@line 4018 "cPickle.c"
        var $126=HEAP[$self_addr]; //@line 4018 "cPickle.c"
        var $127=(($126+32)&4294967295); //@line 4018 "cPickle.c"
        var $128=HEAP[$127]; //@line 4018 "cPickle.c"
        var $129=(($128+8)&4294967295); //@line 4018 "cPickle.c"
        var $130=HEAP[$129]; //@line 4018 "cPickle.c"
        var $131=(($125+4*$130)&4294967295); //@line 4018 "cPickle.c"
        var $132=HEAP[$class]; //@line 4018 "cPickle.c"
        HEAP[$131]=$132; //@line 4018 "cPickle.c"
        var $133=((($130) + 1)&4294967295); //@line 4018 "cPickle.c"
        var $134=(($128+8)&4294967295); //@line 4018 "cPickle.c"
        HEAP[$134]=$133; //@line 4018 "cPickle.c"
        HEAP[$0]=0; //@line 4019 "cPickle.c"
        __label__ = 24; break; //@line 4019 "cPickle.c"
      case 24: // $bb23
        var $135=HEAP[$0]; //@line 3999 "cPickle.c"
        HEAP[$retval]=$135; //@line 3999 "cPickle.c"
        __label__ = 25; break; //@line 3999 "cPickle.c"
      case 25: // $return
        var $retval24=HEAP[$retval]; //@line 3999 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval24; //@line 3999 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_persid($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $pid=__stackBase__+12;
        var $len=__stackBase__+16;
        var $s=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$pid]=0; //@line 4026 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 4030 "cPickle.c"
        var $2=(($1+40)&4294967295); //@line 4030 "cPickle.c"
        var $3=HEAP[$2]; //@line 4030 "cPickle.c"
        var $4=($3)!=0; //@line 4030 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 34; break; } //@line 4030 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 4031 "cPickle.c"
        var $6=(($5+64)&4294967295); //@line 4031 "cPickle.c"
        var $7=HEAP[$6]; //@line 4031 "cPickle.c"
        var $8=HEAP[$self_addr]; //@line 4031 "cPickle.c"
        var $9=FUNCTION_TABLE[$7]($8, $s); //@line 4031 "cPickle.c"
        HEAP[$len]=$9; //@line 4031 "cPickle.c"
        var $10=HEAP[$len]; //@line 4031 "cPickle.c"
        var $11=((($10))|0) < 0; //@line 4031 "cPickle.c"
        if ($11) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 4031 "cPickle.c"
      case 2: // $bb1
        HEAP[$0]=-1; //@line 4031 "cPickle.c"
        __label__ = 35; break; //@line 4031 "cPickle.c"
      case 3: // $bb2
        var $12=HEAP[$len]; //@line 4032 "cPickle.c"
        var $13=((($12))|0) <= 1; //@line 4032 "cPickle.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4032 "cPickle.c"
      case 4: // $bb3
        var $14=_bad_readline(); //@line 4032 "cPickle.c"
        HEAP[$0]=$14; //@line 4032 "cPickle.c"
        __label__ = 35; break; //@line 4032 "cPickle.c"
      case 5: // $bb4
        var $15=HEAP[$len]; //@line 4034 "cPickle.c"
        var $16=((($15) - 1)&4294967295); //@line 4034 "cPickle.c"
        var $17=HEAP[$s]; //@line 4034 "cPickle.c"
        var $18=_PyString_FromStringAndSize($17, $16); //@line 4034 "cPickle.c"
        HEAP[$pid]=$18; //@line 4034 "cPickle.c"
        var $19=HEAP[$pid]; //@line 4035 "cPickle.c"
        var $20=($19)==0; //@line 4035 "cPickle.c"
        if ($20) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 4035 "cPickle.c"
      case 6: // $bb5
        HEAP[$0]=-1; //@line 4035 "cPickle.c"
        __label__ = 35; break; //@line 4035 "cPickle.c"
      case 7: // $bb6
        var $21=HEAP[$self_addr]; //@line 4037 "cPickle.c"
        var $22=(($21+40)&4294967295); //@line 4037 "cPickle.c"
        var $23=HEAP[$22]; //@line 4037 "cPickle.c"
        var $24=(($23+4)&4294967295); //@line 4037 "cPickle.c"
        var $25=HEAP[$24]; //@line 4037 "cPickle.c"
        var $26=(($25+84)&4294967295); //@line 4037 "cPickle.c"
        var $27=HEAP[$26]; //@line 4037 "cPickle.c"
        var $28=($27) & 33554432; //@line 4037 "cPickle.c"
        var $29=((($28))|0)!=0; //@line 4037 "cPickle.c"
        if ($29) { __label__ = 8; break; } else { __label__ = 13; break; } //@line 4037 "cPickle.c"
      case 8: // $bb7
        var $30=HEAP[$self_addr]; //@line 4038 "cPickle.c"
        var $31=(($30+40)&4294967295); //@line 4038 "cPickle.c"
        var $32=HEAP[$31]; //@line 4038 "cPickle.c"
        var $33=HEAP[$pid]; //@line 4038 "cPickle.c"
        var $34=_PyList_Append($32, $33); //@line 4038 "cPickle.c"
        var $35=((($34))|0) < 0; //@line 4038 "cPickle.c"
        if ($35) { __label__ = 9; break; } else { __label__ = 12; break; } //@line 4038 "cPickle.c"
      case 9: // $bb8
        var $36=HEAP[$pid]; //@line 4039 "cPickle.c"
        var $37=(($36)&4294967295); //@line 4039 "cPickle.c"
        var $38=HEAP[$37]; //@line 4039 "cPickle.c"
        var $39=((($38) - 1)&4294967295); //@line 4039 "cPickle.c"
        var $40=HEAP[$pid]; //@line 4039 "cPickle.c"
        var $41=(($40)&4294967295); //@line 4039 "cPickle.c"
        HEAP[$41]=$39; //@line 4039 "cPickle.c"
        var $42=HEAP[$pid]; //@line 4039 "cPickle.c"
        var $43=(($42)&4294967295); //@line 4039 "cPickle.c"
        var $44=HEAP[$43]; //@line 4039 "cPickle.c"
        var $45=((($44))|0)==0; //@line 4039 "cPickle.c"
        if ($45) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 4039 "cPickle.c"
      case 10: // $bb9
        var $46=HEAP[$pid]; //@line 4039 "cPickle.c"
        var $47=(($46+4)&4294967295); //@line 4039 "cPickle.c"
        var $48=HEAP[$47]; //@line 4039 "cPickle.c"
        var $49=(($48+24)&4294967295); //@line 4039 "cPickle.c"
        var $50=HEAP[$49]; //@line 4039 "cPickle.c"
        var $51=HEAP[$pid]; //@line 4039 "cPickle.c"
        FUNCTION_TABLE[$50]($51); //@line 4039 "cPickle.c"
        __label__ = 11; break; //@line 4039 "cPickle.c"
      case 11: // $bb10
        HEAP[$0]=-1; //@line 4040 "cPickle.c"
        __label__ = 35; break; //@line 4040 "cPickle.c"
      case 12: // $bb11
        __label__ = 26; break; //@line 4040 "cPickle.c"
      case 13: // $bb12
        var $52=HEAP[$self_addr]; //@line 4044 "cPickle.c"
        var $53=(($52+28)&4294967295); //@line 4044 "cPickle.c"
        var $54=HEAP[$53]; //@line 4044 "cPickle.c"
        var $55=($54)!=0; //@line 4044 "cPickle.c"
        if ($55) { __label__ = 15; break; } else { __label__ = 14; break; } //@line 4044 "cPickle.c"
      case 14: // $bb13
        var $56=_PyTuple_New(1); //@line 4044 "cPickle.c"
        var $57=HEAP[$self_addr]; //@line 4044 "cPickle.c"
        var $58=(($57+28)&4294967295); //@line 4044 "cPickle.c"
        HEAP[$58]=$56; //@line 4044 "cPickle.c"
        var $59=HEAP[$self_addr]; //@line 4044 "cPickle.c"
        var $60=(($59+28)&4294967295); //@line 4044 "cPickle.c"
        var $61=HEAP[$60]; //@line 4044 "cPickle.c"
        var $62=($61)!=0; //@line 4044 "cPickle.c"
        if ($62) { __label__ = 15; break; } else { __label__ = 19; break; } //@line 4044 "cPickle.c"
      case 15: // $bb14
        var $63=HEAP[$self_addr]; //@line 4044 "cPickle.c"
        var $64=(($63+28)&4294967295); //@line 4044 "cPickle.c"
        var $65=HEAP[$64]; //@line 4044 "cPickle.c"
        var $66=$65; //@line 4044 "cPickle.c"
        var $67=(($66+12)&4294967295); //@line 4044 "cPickle.c"
        var $68=(($67)&4294967295); //@line 4044 "cPickle.c"
        var $69=HEAP[$68]; //@line 4044 "cPickle.c"
        var $70=($69)!=0; //@line 4044 "cPickle.c"
        if ($70) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 4044 "cPickle.c"
      case 16: // $bb15
        var $71=HEAP[$self_addr]; //@line 4044 "cPickle.c"
        var $72=(($71+28)&4294967295); //@line 4044 "cPickle.c"
        var $73=HEAP[$72]; //@line 4044 "cPickle.c"
        var $74=$73; //@line 4044 "cPickle.c"
        var $75=(($74+12)&4294967295); //@line 4044 "cPickle.c"
        var $76=(($75)&4294967295); //@line 4044 "cPickle.c"
        var $77=HEAP[$76]; //@line 4044 "cPickle.c"
        var $78=(($77)&4294967295); //@line 4044 "cPickle.c"
        var $79=HEAP[$78]; //@line 4044 "cPickle.c"
        var $80=((($79) - 1)&4294967295); //@line 4044 "cPickle.c"
        var $81=(($77)&4294967295); //@line 4044 "cPickle.c"
        HEAP[$81]=$80; //@line 4044 "cPickle.c"
        var $82=(($77)&4294967295); //@line 4044 "cPickle.c"
        var $83=HEAP[$82]; //@line 4044 "cPickle.c"
        var $84=((($83))|0)==0; //@line 4044 "cPickle.c"
        if ($84) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 4044 "cPickle.c"
      case 17: // $bb16
        var $85=HEAP[$self_addr]; //@line 4044 "cPickle.c"
        var $86=(($85+28)&4294967295); //@line 4044 "cPickle.c"
        var $87=HEAP[$86]; //@line 4044 "cPickle.c"
        var $88=$87; //@line 4044 "cPickle.c"
        var $89=(($88+12)&4294967295); //@line 4044 "cPickle.c"
        var $90=(($89)&4294967295); //@line 4044 "cPickle.c"
        var $91=HEAP[$90]; //@line 4044 "cPickle.c"
        var $92=(($91+4)&4294967295); //@line 4044 "cPickle.c"
        var $93=HEAP[$92]; //@line 4044 "cPickle.c"
        var $94=(($93+24)&4294967295); //@line 4044 "cPickle.c"
        var $95=HEAP[$94]; //@line 4044 "cPickle.c"
        var $96=HEAP[$self_addr]; //@line 4044 "cPickle.c"
        var $97=(($96+28)&4294967295); //@line 4044 "cPickle.c"
        var $98=HEAP[$97]; //@line 4044 "cPickle.c"
        var $99=$98; //@line 4044 "cPickle.c"
        var $100=(($99+12)&4294967295); //@line 4044 "cPickle.c"
        var $101=(($100)&4294967295); //@line 4044 "cPickle.c"
        var $102=HEAP[$101]; //@line 4044 "cPickle.c"
        FUNCTION_TABLE[$95]($102); //@line 4044 "cPickle.c"
        __label__ = 18; break; //@line 4044 "cPickle.c"
      case 18: // $bb17
        var $103=HEAP[$self_addr]; //@line 4044 "cPickle.c"
        var $104=(($103+28)&4294967295); //@line 4044 "cPickle.c"
        var $105=HEAP[$104]; //@line 4044 "cPickle.c"
        var $106=$105; //@line 4044 "cPickle.c"
        var $107=(($106+12)&4294967295); //@line 4044 "cPickle.c"
        var $108=(($107)&4294967295); //@line 4044 "cPickle.c"
        var $109=HEAP[$pid]; //@line 4044 "cPickle.c"
        HEAP[$108]=$109; //@line 4044 "cPickle.c"
        __label__ = 21; break; //@line 4044 "cPickle.c"
      case 19: // $bb18
        var $110=HEAP[$pid]; //@line 4044 "cPickle.c"
        var $111=(($110)&4294967295); //@line 4044 "cPickle.c"
        var $112=HEAP[$111]; //@line 4044 "cPickle.c"
        var $113=((($112) - 1)&4294967295); //@line 4044 "cPickle.c"
        var $114=HEAP[$pid]; //@line 4044 "cPickle.c"
        var $115=(($114)&4294967295); //@line 4044 "cPickle.c"
        HEAP[$115]=$113; //@line 4044 "cPickle.c"
        var $116=HEAP[$pid]; //@line 4044 "cPickle.c"
        var $117=(($116)&4294967295); //@line 4044 "cPickle.c"
        var $118=HEAP[$117]; //@line 4044 "cPickle.c"
        var $119=((($118))|0)==0; //@line 4044 "cPickle.c"
        if ($119) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 4044 "cPickle.c"
      case 20: // $bb19
        var $120=HEAP[$pid]; //@line 4044 "cPickle.c"
        var $121=(($120+4)&4294967295); //@line 4044 "cPickle.c"
        var $122=HEAP[$121]; //@line 4044 "cPickle.c"
        var $123=(($122+24)&4294967295); //@line 4044 "cPickle.c"
        var $124=HEAP[$123]; //@line 4044 "cPickle.c"
        var $125=HEAP[$pid]; //@line 4044 "cPickle.c"
        FUNCTION_TABLE[$124]($125); //@line 4044 "cPickle.c"
        __label__ = 21; break; //@line 4044 "cPickle.c"
      case 21: // $bb20
        var $126=HEAP[$self_addr]; //@line 4045 "cPickle.c"
        var $127=(($126+28)&4294967295); //@line 4045 "cPickle.c"
        var $128=HEAP[$127]; //@line 4045 "cPickle.c"
        var $129=($128)!=0; //@line 4045 "cPickle.c"
        if ($129) { __label__ = 22; break; } else { __label__ = 26; break; } //@line 4045 "cPickle.c"
      case 22: // $bb21
        var $130=HEAP[$self_addr]; //@line 4046 "cPickle.c"
        var $131=(($130+28)&4294967295); //@line 4046 "cPickle.c"
        var $132=HEAP[$131]; //@line 4046 "cPickle.c"
        var $133=HEAP[$self_addr]; //@line 4046 "cPickle.c"
        var $134=(($133+40)&4294967295); //@line 4046 "cPickle.c"
        var $135=HEAP[$134]; //@line 4046 "cPickle.c"
        var $136=_PyObject_Call($135, $132, 0); //@line 4046 "cPickle.c"
        HEAP[$pid]=$136; //@line 4046 "cPickle.c"
        var $137=HEAP[$self_addr]; //@line 4048 "cPickle.c"
        var $138=(($137+28)&4294967295); //@line 4048 "cPickle.c"
        var $139=HEAP[$138]; //@line 4048 "cPickle.c"
        var $140=(($139)&4294967295); //@line 4048 "cPickle.c"
        var $141=HEAP[$140]; //@line 4048 "cPickle.c"
        var $142=((($141))|0) > 1; //@line 4048 "cPickle.c"
        if ($142) { __label__ = 23; break; } else { __label__ = 26; break; } //@line 4048 "cPickle.c"
      case 23: // $bb22
        var $143=HEAP[$self_addr]; //@line 4048 "cPickle.c"
        var $144=(($143+28)&4294967295); //@line 4048 "cPickle.c"
        var $145=HEAP[$144]; //@line 4048 "cPickle.c"
        var $146=(($145)&4294967295); //@line 4048 "cPickle.c"
        var $147=HEAP[$146]; //@line 4048 "cPickle.c"
        var $148=((($147) - 1)&4294967295); //@line 4048 "cPickle.c"
        var $149=(($145)&4294967295); //@line 4048 "cPickle.c"
        HEAP[$149]=$148; //@line 4048 "cPickle.c"
        var $150=(($145)&4294967295); //@line 4048 "cPickle.c"
        var $151=HEAP[$150]; //@line 4048 "cPickle.c"
        var $152=((($151))|0)==0; //@line 4048 "cPickle.c"
        if ($152) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 4048 "cPickle.c"
      case 24: // $bb23
        var $153=HEAP[$self_addr]; //@line 4048 "cPickle.c"
        var $154=(($153+28)&4294967295); //@line 4048 "cPickle.c"
        var $155=HEAP[$154]; //@line 4048 "cPickle.c"
        var $156=(($155+4)&4294967295); //@line 4048 "cPickle.c"
        var $157=HEAP[$156]; //@line 4048 "cPickle.c"
        var $158=(($157+24)&4294967295); //@line 4048 "cPickle.c"
        var $159=HEAP[$158]; //@line 4048 "cPickle.c"
        var $160=HEAP[$self_addr]; //@line 4048 "cPickle.c"
        var $161=(($160+28)&4294967295); //@line 4048 "cPickle.c"
        var $162=HEAP[$161]; //@line 4048 "cPickle.c"
        FUNCTION_TABLE[$159]($162); //@line 4048 "cPickle.c"
        __label__ = 25; break; //@line 4048 "cPickle.c"
      case 25: // $bb24
        var $163=HEAP[$self_addr]; //@line 4048 "cPickle.c"
        var $164=(($163+28)&4294967295); //@line 4048 "cPickle.c"
        HEAP[$164]=0; //@line 4048 "cPickle.c"
        __label__ = 26; break; //@line 4048 "cPickle.c"
      case 26: // $bb25
        var $165=HEAP[$pid]; //@line 4052 "cPickle.c"
        var $166=($165)==0; //@line 4052 "cPickle.c"
        if ($166) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 4052 "cPickle.c"
      case 27: // $bb26
        HEAP[$0]=-1; //@line 4052 "cPickle.c"
        __label__ = 35; break; //@line 4052 "cPickle.c"
      case 28: // $bb27
        var $167=HEAP[$self_addr]; //@line 4054 "cPickle.c"
        var $168=(($167+32)&4294967295); //@line 4054 "cPickle.c"
        var $169=HEAP[$168]; //@line 4054 "cPickle.c"
        var $170=(($169+8)&4294967295); //@line 4054 "cPickle.c"
        var $171=HEAP[$170]; //@line 4054 "cPickle.c"
        var $172=HEAP[$self_addr]; //@line 4054 "cPickle.c"
        var $173=(($172+32)&4294967295); //@line 4054 "cPickle.c"
        var $174=HEAP[$173]; //@line 4054 "cPickle.c"
        var $175=(($174+12)&4294967295); //@line 4054 "cPickle.c"
        var $176=HEAP[$175]; //@line 4054 "cPickle.c"
        var $177=((($171))|0)==((($176))|0); //@line 4054 "cPickle.c"
        if ($177) { __label__ = 29; break; } else { __label__ = 33; break; } //@line 4054 "cPickle.c"
      case 29: // $bb28
        var $178=HEAP[$self_addr]; //@line 4054 "cPickle.c"
        var $179=(($178+32)&4294967295); //@line 4054 "cPickle.c"
        var $180=HEAP[$179]; //@line 4054 "cPickle.c"
        var $181=_Pdata_grow($180); //@line 4054 "cPickle.c"
        var $182=((($181))|0) < 0; //@line 4054 "cPickle.c"
        if ($182) { __label__ = 30; break; } else { __label__ = 33; break; } //@line 4054 "cPickle.c"
      case 30: // $bb29
        var $183=HEAP[$pid]; //@line 4054 "cPickle.c"
        var $184=(($183)&4294967295); //@line 4054 "cPickle.c"
        var $185=HEAP[$184]; //@line 4054 "cPickle.c"
        var $186=((($185) - 1)&4294967295); //@line 4054 "cPickle.c"
        var $187=HEAP[$pid]; //@line 4054 "cPickle.c"
        var $188=(($187)&4294967295); //@line 4054 "cPickle.c"
        HEAP[$188]=$186; //@line 4054 "cPickle.c"
        var $189=HEAP[$pid]; //@line 4054 "cPickle.c"
        var $190=(($189)&4294967295); //@line 4054 "cPickle.c"
        var $191=HEAP[$190]; //@line 4054 "cPickle.c"
        var $192=((($191))|0)==0; //@line 4054 "cPickle.c"
        if ($192) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 4054 "cPickle.c"
      case 31: // $bb30
        var $193=HEAP[$pid]; //@line 4054 "cPickle.c"
        var $194=(($193+4)&4294967295); //@line 4054 "cPickle.c"
        var $195=HEAP[$194]; //@line 4054 "cPickle.c"
        var $196=(($195+24)&4294967295); //@line 4054 "cPickle.c"
        var $197=HEAP[$196]; //@line 4054 "cPickle.c"
        var $198=HEAP[$pid]; //@line 4054 "cPickle.c"
        FUNCTION_TABLE[$197]($198); //@line 4054 "cPickle.c"
        __label__ = 32; break; //@line 4054 "cPickle.c"
      case 32: // $bb31
        HEAP[$0]=-1; //@line 4054 "cPickle.c"
        __label__ = 35; break; //@line 4054 "cPickle.c"
      case 33: // $bb32
        var $199=HEAP[$self_addr]; //@line 4054 "cPickle.c"
        var $200=(($199+32)&4294967295); //@line 4054 "cPickle.c"
        var $201=HEAP[$200]; //@line 4054 "cPickle.c"
        var $202=(($201+16)&4294967295); //@line 4054 "cPickle.c"
        var $203=HEAP[$202]; //@line 4054 "cPickle.c"
        var $204=HEAP[$self_addr]; //@line 4054 "cPickle.c"
        var $205=(($204+32)&4294967295); //@line 4054 "cPickle.c"
        var $206=HEAP[$205]; //@line 4054 "cPickle.c"
        var $207=(($206+8)&4294967295); //@line 4054 "cPickle.c"
        var $208=HEAP[$207]; //@line 4054 "cPickle.c"
        var $209=(($203+4*$208)&4294967295); //@line 4054 "cPickle.c"
        var $210=HEAP[$pid]; //@line 4054 "cPickle.c"
        HEAP[$209]=$210; //@line 4054 "cPickle.c"
        var $211=((($208) + 1)&4294967295); //@line 4054 "cPickle.c"
        var $212=(($206+8)&4294967295); //@line 4054 "cPickle.c"
        HEAP[$212]=$211; //@line 4054 "cPickle.c"
        HEAP[$0]=0; //@line 4055 "cPickle.c"
        __label__ = 35; break; //@line 4055 "cPickle.c"
      case 34: // $bb33
        var $213=HEAP[_UnpicklingError]; //@line 4058 "cPickle.c"
        _PyErr_SetString($213, ((__str92)&4294967295)); //@line 4058 "cPickle.c"
        HEAP[$0]=-1; //@line 4061 "cPickle.c"
        __label__ = 35; break; //@line 4061 "cPickle.c"
      case 35: // $bb34
        var $214=HEAP[$0]; //@line 4031 "cPickle.c"
        HEAP[$retval]=$214; //@line 4031 "cPickle.c"
        __label__ = 36; break; //@line 4031 "cPickle.c"
      case 36: // $return
        var $retval35=HEAP[$retval]; //@line 4031 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval35; //@line 4031 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_binpersid($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $pid=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$pid]=0; //@line 4068 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 4070 "cPickle.c"
        var $2=(($1+40)&4294967295); //@line 4070 "cPickle.c"
        var $3=HEAP[$2]; //@line 4070 "cPickle.c"
        var $4=($3)!=0; //@line 4070 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 33; break; } //@line 4070 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 4071 "cPickle.c"
        var $6=(($5+32)&4294967295); //@line 4071 "cPickle.c"
        var $7=HEAP[$6]; //@line 4071 "cPickle.c"
        var $8=(($7+8)&4294967295); //@line 4071 "cPickle.c"
        var $9=HEAP[$8]; //@line 4071 "cPickle.c"
        var $10=((($9))|0)!=0; //@line 4071 "cPickle.c"
        if ($10) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 4071 "cPickle.c"
      case 2: // $bb1
        var $11=HEAP[$self_addr]; //@line 4071 "cPickle.c"
        var $12=(($11+32)&4294967295); //@line 4071 "cPickle.c"
        var $13=HEAP[$12]; //@line 4071 "cPickle.c"
        var $14=(($13+16)&4294967295); //@line 4071 "cPickle.c"
        var $15=HEAP[$14]; //@line 4071 "cPickle.c"
        var $16=HEAP[$self_addr]; //@line 4071 "cPickle.c"
        var $17=(($16+32)&4294967295); //@line 4071 "cPickle.c"
        var $18=HEAP[$17]; //@line 4071 "cPickle.c"
        var $19=(($18+8)&4294967295); //@line 4071 "cPickle.c"
        var $20=HEAP[$19]; //@line 4071 "cPickle.c"
        var $21=((($20) - 1)&4294967295); //@line 4071 "cPickle.c"
        var $22=(($18+8)&4294967295); //@line 4071 "cPickle.c"
        HEAP[$22]=$21; //@line 4071 "cPickle.c"
        var $23=(($18+8)&4294967295); //@line 4071 "cPickle.c"
        var $24=HEAP[$23]; //@line 4071 "cPickle.c"
        var $25=(($15+4*$24)&4294967295); //@line 4071 "cPickle.c"
        var $26=HEAP[$25]; //@line 4071 "cPickle.c"
        HEAP[$pid]=$26; //@line 4071 "cPickle.c"
        __label__ = 4; break; //@line 4071 "cPickle.c"
      case 3: // $bb2
        var $27=HEAP[_UnpicklingError]; //@line 4071 "cPickle.c"
        _PyErr_SetString($27, ((__str88)&4294967295)); //@line 4071 "cPickle.c"
        HEAP[$pid]=0; //@line 4071 "cPickle.c"
        __label__ = 4; break; //@line 4071 "cPickle.c"
      case 4: // $bb3
        var $28=HEAP[$pid]; //@line 4072 "cPickle.c"
        var $29=($28)==0; //@line 4072 "cPickle.c"
        if ($29) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4072 "cPickle.c"
      case 5: // $bb4
        HEAP[$0]=-1; //@line 4072 "cPickle.c"
        __label__ = 34; break; //@line 4072 "cPickle.c"
      case 6: // $bb5
        var $30=HEAP[$self_addr]; //@line 4074 "cPickle.c"
        var $31=(($30+40)&4294967295); //@line 4074 "cPickle.c"
        var $32=HEAP[$31]; //@line 4074 "cPickle.c"
        var $33=(($32+4)&4294967295); //@line 4074 "cPickle.c"
        var $34=HEAP[$33]; //@line 4074 "cPickle.c"
        var $35=(($34+84)&4294967295); //@line 4074 "cPickle.c"
        var $36=HEAP[$35]; //@line 4074 "cPickle.c"
        var $37=($36) & 33554432; //@line 4074 "cPickle.c"
        var $38=((($37))|0)!=0; //@line 4074 "cPickle.c"
        if ($38) { __label__ = 7; break; } else { __label__ = 12; break; } //@line 4074 "cPickle.c"
      case 7: // $bb6
        var $39=HEAP[$self_addr]; //@line 4075 "cPickle.c"
        var $40=(($39+40)&4294967295); //@line 4075 "cPickle.c"
        var $41=HEAP[$40]; //@line 4075 "cPickle.c"
        var $42=HEAP[$pid]; //@line 4075 "cPickle.c"
        var $43=_PyList_Append($41, $42); //@line 4075 "cPickle.c"
        var $44=((($43))|0) < 0; //@line 4075 "cPickle.c"
        if ($44) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 4075 "cPickle.c"
      case 8: // $bb7
        var $45=HEAP[$pid]; //@line 4076 "cPickle.c"
        var $46=(($45)&4294967295); //@line 4076 "cPickle.c"
        var $47=HEAP[$46]; //@line 4076 "cPickle.c"
        var $48=((($47) - 1)&4294967295); //@line 4076 "cPickle.c"
        var $49=HEAP[$pid]; //@line 4076 "cPickle.c"
        var $50=(($49)&4294967295); //@line 4076 "cPickle.c"
        HEAP[$50]=$48; //@line 4076 "cPickle.c"
        var $51=HEAP[$pid]; //@line 4076 "cPickle.c"
        var $52=(($51)&4294967295); //@line 4076 "cPickle.c"
        var $53=HEAP[$52]; //@line 4076 "cPickle.c"
        var $54=((($53))|0)==0; //@line 4076 "cPickle.c"
        if ($54) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 4076 "cPickle.c"
      case 9: // $bb8
        var $55=HEAP[$pid]; //@line 4076 "cPickle.c"
        var $56=(($55+4)&4294967295); //@line 4076 "cPickle.c"
        var $57=HEAP[$56]; //@line 4076 "cPickle.c"
        var $58=(($57+24)&4294967295); //@line 4076 "cPickle.c"
        var $59=HEAP[$58]; //@line 4076 "cPickle.c"
        var $60=HEAP[$pid]; //@line 4076 "cPickle.c"
        FUNCTION_TABLE[$59]($60); //@line 4076 "cPickle.c"
        __label__ = 10; break; //@line 4076 "cPickle.c"
      case 10: // $bb9
        HEAP[$0]=-1; //@line 4077 "cPickle.c"
        __label__ = 34; break; //@line 4077 "cPickle.c"
      case 11: // $bb10
        __label__ = 27; break; //@line 4077 "cPickle.c"
      case 12: // $bb11
        var $61=HEAP[$self_addr]; //@line 4081 "cPickle.c"
        var $62=(($61+28)&4294967295); //@line 4081 "cPickle.c"
        var $63=HEAP[$62]; //@line 4081 "cPickle.c"
        var $64=($63)!=0; //@line 4081 "cPickle.c"
        if ($64) { __label__ = 14; break; } else { __label__ = 13; break; } //@line 4081 "cPickle.c"
      case 13: // $bb12
        var $65=_PyTuple_New(1); //@line 4081 "cPickle.c"
        var $66=HEAP[$self_addr]; //@line 4081 "cPickle.c"
        var $67=(($66+28)&4294967295); //@line 4081 "cPickle.c"
        HEAP[$67]=$65; //@line 4081 "cPickle.c"
        var $68=HEAP[$self_addr]; //@line 4081 "cPickle.c"
        var $69=(($68+28)&4294967295); //@line 4081 "cPickle.c"
        var $70=HEAP[$69]; //@line 4081 "cPickle.c"
        var $71=($70)!=0; //@line 4081 "cPickle.c"
        if ($71) { __label__ = 14; break; } else { __label__ = 18; break; } //@line 4081 "cPickle.c"
      case 14: // $bb13
        var $72=HEAP[$self_addr]; //@line 4081 "cPickle.c"
        var $73=(($72+28)&4294967295); //@line 4081 "cPickle.c"
        var $74=HEAP[$73]; //@line 4081 "cPickle.c"
        var $75=$74; //@line 4081 "cPickle.c"
        var $76=(($75+12)&4294967295); //@line 4081 "cPickle.c"
        var $77=(($76)&4294967295); //@line 4081 "cPickle.c"
        var $78=HEAP[$77]; //@line 4081 "cPickle.c"
        var $79=($78)!=0; //@line 4081 "cPickle.c"
        if ($79) { __label__ = 15; break; } else { __label__ = 17; break; } //@line 4081 "cPickle.c"
      case 15: // $bb14
        var $80=HEAP[$self_addr]; //@line 4081 "cPickle.c"
        var $81=(($80+28)&4294967295); //@line 4081 "cPickle.c"
        var $82=HEAP[$81]; //@line 4081 "cPickle.c"
        var $83=$82; //@line 4081 "cPickle.c"
        var $84=(($83+12)&4294967295); //@line 4081 "cPickle.c"
        var $85=(($84)&4294967295); //@line 4081 "cPickle.c"
        var $86=HEAP[$85]; //@line 4081 "cPickle.c"
        var $87=(($86)&4294967295); //@line 4081 "cPickle.c"
        var $88=HEAP[$87]; //@line 4081 "cPickle.c"
        var $89=((($88) - 1)&4294967295); //@line 4081 "cPickle.c"
        var $90=(($86)&4294967295); //@line 4081 "cPickle.c"
        HEAP[$90]=$89; //@line 4081 "cPickle.c"
        var $91=(($86)&4294967295); //@line 4081 "cPickle.c"
        var $92=HEAP[$91]; //@line 4081 "cPickle.c"
        var $93=((($92))|0)==0; //@line 4081 "cPickle.c"
        if ($93) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 4081 "cPickle.c"
      case 16: // $bb15
        var $94=HEAP[$self_addr]; //@line 4081 "cPickle.c"
        var $95=(($94+28)&4294967295); //@line 4081 "cPickle.c"
        var $96=HEAP[$95]; //@line 4081 "cPickle.c"
        var $97=$96; //@line 4081 "cPickle.c"
        var $98=(($97+12)&4294967295); //@line 4081 "cPickle.c"
        var $99=(($98)&4294967295); //@line 4081 "cPickle.c"
        var $100=HEAP[$99]; //@line 4081 "cPickle.c"
        var $101=(($100+4)&4294967295); //@line 4081 "cPickle.c"
        var $102=HEAP[$101]; //@line 4081 "cPickle.c"
        var $103=(($102+24)&4294967295); //@line 4081 "cPickle.c"
        var $104=HEAP[$103]; //@line 4081 "cPickle.c"
        var $105=HEAP[$self_addr]; //@line 4081 "cPickle.c"
        var $106=(($105+28)&4294967295); //@line 4081 "cPickle.c"
        var $107=HEAP[$106]; //@line 4081 "cPickle.c"
        var $108=$107; //@line 4081 "cPickle.c"
        var $109=(($108+12)&4294967295); //@line 4081 "cPickle.c"
        var $110=(($109)&4294967295); //@line 4081 "cPickle.c"
        var $111=HEAP[$110]; //@line 4081 "cPickle.c"
        FUNCTION_TABLE[$104]($111); //@line 4081 "cPickle.c"
        __label__ = 17; break; //@line 4081 "cPickle.c"
      case 17: // $bb16
        var $112=HEAP[$self_addr]; //@line 4081 "cPickle.c"
        var $113=(($112+28)&4294967295); //@line 4081 "cPickle.c"
        var $114=HEAP[$113]; //@line 4081 "cPickle.c"
        var $115=$114; //@line 4081 "cPickle.c"
        var $116=(($115+12)&4294967295); //@line 4081 "cPickle.c"
        var $117=(($116)&4294967295); //@line 4081 "cPickle.c"
        var $118=HEAP[$pid]; //@line 4081 "cPickle.c"
        HEAP[$117]=$118; //@line 4081 "cPickle.c"
        __label__ = 20; break; //@line 4081 "cPickle.c"
      case 18: // $bb17
        var $119=HEAP[$pid]; //@line 4081 "cPickle.c"
        var $120=(($119)&4294967295); //@line 4081 "cPickle.c"
        var $121=HEAP[$120]; //@line 4081 "cPickle.c"
        var $122=((($121) - 1)&4294967295); //@line 4081 "cPickle.c"
        var $123=HEAP[$pid]; //@line 4081 "cPickle.c"
        var $124=(($123)&4294967295); //@line 4081 "cPickle.c"
        HEAP[$124]=$122; //@line 4081 "cPickle.c"
        var $125=HEAP[$pid]; //@line 4081 "cPickle.c"
        var $126=(($125)&4294967295); //@line 4081 "cPickle.c"
        var $127=HEAP[$126]; //@line 4081 "cPickle.c"
        var $128=((($127))|0)==0; //@line 4081 "cPickle.c"
        if ($128) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 4081 "cPickle.c"
      case 19: // $bb18
        var $129=HEAP[$pid]; //@line 4081 "cPickle.c"
        var $130=(($129+4)&4294967295); //@line 4081 "cPickle.c"
        var $131=HEAP[$130]; //@line 4081 "cPickle.c"
        var $132=(($131+24)&4294967295); //@line 4081 "cPickle.c"
        var $133=HEAP[$132]; //@line 4081 "cPickle.c"
        var $134=HEAP[$pid]; //@line 4081 "cPickle.c"
        FUNCTION_TABLE[$133]($134); //@line 4081 "cPickle.c"
        __label__ = 20; break; //@line 4081 "cPickle.c"
      case 20: // $bb19
        var $135=HEAP[$self_addr]; //@line 4082 "cPickle.c"
        var $136=(($135+28)&4294967295); //@line 4082 "cPickle.c"
        var $137=HEAP[$136]; //@line 4082 "cPickle.c"
        var $138=($137)!=0; //@line 4082 "cPickle.c"
        if ($138) { __label__ = 21; break; } else { __label__ = 25; break; } //@line 4082 "cPickle.c"
      case 21: // $bb20
        var $139=HEAP[$self_addr]; //@line 4083 "cPickle.c"
        var $140=(($139+28)&4294967295); //@line 4083 "cPickle.c"
        var $141=HEAP[$140]; //@line 4083 "cPickle.c"
        var $142=HEAP[$self_addr]; //@line 4083 "cPickle.c"
        var $143=(($142+40)&4294967295); //@line 4083 "cPickle.c"
        var $144=HEAP[$143]; //@line 4083 "cPickle.c"
        var $145=_PyObject_Call($144, $141, 0); //@line 4083 "cPickle.c"
        HEAP[$pid]=$145; //@line 4083 "cPickle.c"
        var $146=HEAP[$self_addr]; //@line 4085 "cPickle.c"
        var $147=(($146+28)&4294967295); //@line 4085 "cPickle.c"
        var $148=HEAP[$147]; //@line 4085 "cPickle.c"
        var $149=(($148)&4294967295); //@line 4085 "cPickle.c"
        var $150=HEAP[$149]; //@line 4085 "cPickle.c"
        var $151=((($150))|0) > 1; //@line 4085 "cPickle.c"
        if ($151) { __label__ = 22; break; } else { __label__ = 25; break; } //@line 4085 "cPickle.c"
      case 22: // $bb21
        var $152=HEAP[$self_addr]; //@line 4085 "cPickle.c"
        var $153=(($152+28)&4294967295); //@line 4085 "cPickle.c"
        var $154=HEAP[$153]; //@line 4085 "cPickle.c"
        var $155=(($154)&4294967295); //@line 4085 "cPickle.c"
        var $156=HEAP[$155]; //@line 4085 "cPickle.c"
        var $157=((($156) - 1)&4294967295); //@line 4085 "cPickle.c"
        var $158=(($154)&4294967295); //@line 4085 "cPickle.c"
        HEAP[$158]=$157; //@line 4085 "cPickle.c"
        var $159=(($154)&4294967295); //@line 4085 "cPickle.c"
        var $160=HEAP[$159]; //@line 4085 "cPickle.c"
        var $161=((($160))|0)==0; //@line 4085 "cPickle.c"
        if ($161) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 4085 "cPickle.c"
      case 23: // $bb22
        var $162=HEAP[$self_addr]; //@line 4085 "cPickle.c"
        var $163=(($162+28)&4294967295); //@line 4085 "cPickle.c"
        var $164=HEAP[$163]; //@line 4085 "cPickle.c"
        var $165=(($164+4)&4294967295); //@line 4085 "cPickle.c"
        var $166=HEAP[$165]; //@line 4085 "cPickle.c"
        var $167=(($166+24)&4294967295); //@line 4085 "cPickle.c"
        var $168=HEAP[$167]; //@line 4085 "cPickle.c"
        var $169=HEAP[$self_addr]; //@line 4085 "cPickle.c"
        var $170=(($169+28)&4294967295); //@line 4085 "cPickle.c"
        var $171=HEAP[$170]; //@line 4085 "cPickle.c"
        FUNCTION_TABLE[$168]($171); //@line 4085 "cPickle.c"
        __label__ = 24; break; //@line 4085 "cPickle.c"
      case 24: // $bb23
        var $172=HEAP[$self_addr]; //@line 4085 "cPickle.c"
        var $173=(($172+28)&4294967295); //@line 4085 "cPickle.c"
        HEAP[$173]=0; //@line 4085 "cPickle.c"
        __label__ = 25; break; //@line 4085 "cPickle.c"
      case 25: // $bb24
        var $174=HEAP[$pid]; //@line 4087 "cPickle.c"
        var $175=($174)==0; //@line 4087 "cPickle.c"
        if ($175) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 4087 "cPickle.c"
      case 26: // $bb25
        HEAP[$0]=-1; //@line 4087 "cPickle.c"
        __label__ = 34; break; //@line 4087 "cPickle.c"
      case 27: // $bb26
        var $176=HEAP[$self_addr]; //@line 4090 "cPickle.c"
        var $177=(($176+32)&4294967295); //@line 4090 "cPickle.c"
        var $178=HEAP[$177]; //@line 4090 "cPickle.c"
        var $179=(($178+8)&4294967295); //@line 4090 "cPickle.c"
        var $180=HEAP[$179]; //@line 4090 "cPickle.c"
        var $181=HEAP[$self_addr]; //@line 4090 "cPickle.c"
        var $182=(($181+32)&4294967295); //@line 4090 "cPickle.c"
        var $183=HEAP[$182]; //@line 4090 "cPickle.c"
        var $184=(($183+12)&4294967295); //@line 4090 "cPickle.c"
        var $185=HEAP[$184]; //@line 4090 "cPickle.c"
        var $186=((($180))|0)==((($185))|0); //@line 4090 "cPickle.c"
        if ($186) { __label__ = 28; break; } else { __label__ = 32; break; } //@line 4090 "cPickle.c"
      case 28: // $bb27
        var $187=HEAP[$self_addr]; //@line 4090 "cPickle.c"
        var $188=(($187+32)&4294967295); //@line 4090 "cPickle.c"
        var $189=HEAP[$188]; //@line 4090 "cPickle.c"
        var $190=_Pdata_grow($189); //@line 4090 "cPickle.c"
        var $191=((($190))|0) < 0; //@line 4090 "cPickle.c"
        if ($191) { __label__ = 29; break; } else { __label__ = 32; break; } //@line 4090 "cPickle.c"
      case 29: // $bb28
        var $192=HEAP[$pid]; //@line 4090 "cPickle.c"
        var $193=(($192)&4294967295); //@line 4090 "cPickle.c"
        var $194=HEAP[$193]; //@line 4090 "cPickle.c"
        var $195=((($194) - 1)&4294967295); //@line 4090 "cPickle.c"
        var $196=HEAP[$pid]; //@line 4090 "cPickle.c"
        var $197=(($196)&4294967295); //@line 4090 "cPickle.c"
        HEAP[$197]=$195; //@line 4090 "cPickle.c"
        var $198=HEAP[$pid]; //@line 4090 "cPickle.c"
        var $199=(($198)&4294967295); //@line 4090 "cPickle.c"
        var $200=HEAP[$199]; //@line 4090 "cPickle.c"
        var $201=((($200))|0)==0; //@line 4090 "cPickle.c"
        if ($201) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 4090 "cPickle.c"
      case 30: // $bb29
        var $202=HEAP[$pid]; //@line 4090 "cPickle.c"
        var $203=(($202+4)&4294967295); //@line 4090 "cPickle.c"
        var $204=HEAP[$203]; //@line 4090 "cPickle.c"
        var $205=(($204+24)&4294967295); //@line 4090 "cPickle.c"
        var $206=HEAP[$205]; //@line 4090 "cPickle.c"
        var $207=HEAP[$pid]; //@line 4090 "cPickle.c"
        FUNCTION_TABLE[$206]($207); //@line 4090 "cPickle.c"
        __label__ = 31; break; //@line 4090 "cPickle.c"
      case 31: // $bb30
        HEAP[$0]=-1; //@line 4090 "cPickle.c"
        __label__ = 34; break; //@line 4090 "cPickle.c"
      case 32: // $bb31
        var $208=HEAP[$self_addr]; //@line 4090 "cPickle.c"
        var $209=(($208+32)&4294967295); //@line 4090 "cPickle.c"
        var $210=HEAP[$209]; //@line 4090 "cPickle.c"
        var $211=(($210+16)&4294967295); //@line 4090 "cPickle.c"
        var $212=HEAP[$211]; //@line 4090 "cPickle.c"
        var $213=HEAP[$self_addr]; //@line 4090 "cPickle.c"
        var $214=(($213+32)&4294967295); //@line 4090 "cPickle.c"
        var $215=HEAP[$214]; //@line 4090 "cPickle.c"
        var $216=(($215+8)&4294967295); //@line 4090 "cPickle.c"
        var $217=HEAP[$216]; //@line 4090 "cPickle.c"
        var $218=(($212+4*$217)&4294967295); //@line 4090 "cPickle.c"
        var $219=HEAP[$pid]; //@line 4090 "cPickle.c"
        HEAP[$218]=$219; //@line 4090 "cPickle.c"
        var $220=((($217) + 1)&4294967295); //@line 4090 "cPickle.c"
        var $221=(($215+8)&4294967295); //@line 4090 "cPickle.c"
        HEAP[$221]=$220; //@line 4090 "cPickle.c"
        HEAP[$0]=0; //@line 4091 "cPickle.c"
        __label__ = 34; break; //@line 4091 "cPickle.c"
      case 33: // $bb32
        var $222=HEAP[_UnpicklingError]; //@line 4094 "cPickle.c"
        _PyErr_SetString($222, ((__str92)&4294967295)); //@line 4094 "cPickle.c"
        HEAP[$0]=-1; //@line 4097 "cPickle.c"
        __label__ = 34; break; //@line 4097 "cPickle.c"
      case 34: // $bb33
        var $223=HEAP[$0]; //@line 4072 "cPickle.c"
        HEAP[$retval]=$223; //@line 4072 "cPickle.c"
        __label__ = 35; break; //@line 4072 "cPickle.c"
      case 35: // $return
        var $retval34=HEAP[$retval]; //@line 4072 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval34; //@line 4072 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_pop($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $len=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 4105 "cPickle.c"
        var $2=(($1+32)&4294967295); //@line 4105 "cPickle.c"
        var $3=HEAP[$2]; //@line 4105 "cPickle.c"
        var $4=(($3+8)&4294967295); //@line 4105 "cPickle.c"
        var $5=HEAP[$4]; //@line 4105 "cPickle.c"
        HEAP[$len]=$5; //@line 4105 "cPickle.c"
        var $6=HEAP[$self_addr]; //@line 4114 "cPickle.c"
        var $7=(($6+52)&4294967295); //@line 4114 "cPickle.c"
        var $8=HEAP[$7]; //@line 4114 "cPickle.c"
        var $9=((($8))|0) <= 0; //@line 4114 "cPickle.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 1; break; } //@line 4114 "cPickle.c"
      case 1: // $bb
        var $10=HEAP[$self_addr]; //@line 4114 "cPickle.c"
        var $11=(($10+48)&4294967295); //@line 4114 "cPickle.c"
        var $12=HEAP[$11]; //@line 4114 "cPickle.c"
        var $13=HEAP[$self_addr]; //@line 4114 "cPickle.c"
        var $14=(($13+52)&4294967295); //@line 4114 "cPickle.c"
        var $15=HEAP[$14]; //@line 4114 "cPickle.c"
        var $16=((($15) - 1)&4294967295); //@line 4114 "cPickle.c"
        var $17=(($12+4*$16)&4294967295); //@line 4114 "cPickle.c"
        var $18=HEAP[$17]; //@line 4114 "cPickle.c"
        var $19=HEAP[$len]; //@line 4114 "cPickle.c"
        var $20=((($18))|0)!=((($19))|0); //@line 4114 "cPickle.c"
        if ($20) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 4114 "cPickle.c"
      case 2: // $bb1
        var $21=HEAP[$self_addr]; //@line 4115 "cPickle.c"
        var $22=(($21+52)&4294967295); //@line 4115 "cPickle.c"
        var $23=HEAP[$22]; //@line 4115 "cPickle.c"
        var $24=((($23) - 1)&4294967295); //@line 4115 "cPickle.c"
        var $25=HEAP[$self_addr]; //@line 4115 "cPickle.c"
        var $26=(($25+52)&4294967295); //@line 4115 "cPickle.c"
        HEAP[$26]=$24; //@line 4115 "cPickle.c"
        __label__ = 8; break; //@line 4115 "cPickle.c"
      case 3: // $bb2
        var $27=HEAP[$len]; //@line 4116 "cPickle.c"
        var $28=((($27))|0) > 0; //@line 4116 "cPickle.c"
        if ($28) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 4116 "cPickle.c"
      case 4: // $bb3
        var $29=HEAP[$len]; //@line 4117 "cPickle.c"
        var $30=((($29) - 1)&4294967295); //@line 4117 "cPickle.c"
        HEAP[$len]=$30; //@line 4117 "cPickle.c"
        var $31=HEAP[$self_addr]; //@line 4118 "cPickle.c"
        var $32=(($31+32)&4294967295); //@line 4118 "cPickle.c"
        var $33=HEAP[$32]; //@line 4118 "cPickle.c"
        var $34=(($33+16)&4294967295); //@line 4118 "cPickle.c"
        var $35=HEAP[$34]; //@line 4118 "cPickle.c"
        var $36=HEAP[$len]; //@line 4118 "cPickle.c"
        var $37=(($35+4*$36)&4294967295); //@line 4118 "cPickle.c"
        var $38=HEAP[$37]; //@line 4118 "cPickle.c"
        var $39=(($38)&4294967295); //@line 4118 "cPickle.c"
        var $40=HEAP[$39]; //@line 4118 "cPickle.c"
        var $41=((($40) - 1)&4294967295); //@line 4118 "cPickle.c"
        var $42=(($38)&4294967295); //@line 4118 "cPickle.c"
        HEAP[$42]=$41; //@line 4118 "cPickle.c"
        var $43=(($38)&4294967295); //@line 4118 "cPickle.c"
        var $44=HEAP[$43]; //@line 4118 "cPickle.c"
        var $45=((($44))|0)==0; //@line 4118 "cPickle.c"
        if ($45) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4118 "cPickle.c"
      case 5: // $bb4
        var $46=HEAP[$self_addr]; //@line 4118 "cPickle.c"
        var $47=(($46+32)&4294967295); //@line 4118 "cPickle.c"
        var $48=HEAP[$47]; //@line 4118 "cPickle.c"
        var $49=(($48+16)&4294967295); //@line 4118 "cPickle.c"
        var $50=HEAP[$49]; //@line 4118 "cPickle.c"
        var $51=HEAP[$len]; //@line 4118 "cPickle.c"
        var $52=(($50+4*$51)&4294967295); //@line 4118 "cPickle.c"
        var $53=HEAP[$52]; //@line 4118 "cPickle.c"
        var $54=(($53+4)&4294967295); //@line 4118 "cPickle.c"
        var $55=HEAP[$54]; //@line 4118 "cPickle.c"
        var $56=(($55+24)&4294967295); //@line 4118 "cPickle.c"
        var $57=HEAP[$56]; //@line 4118 "cPickle.c"
        var $58=HEAP[$self_addr]; //@line 4118 "cPickle.c"
        var $59=(($58+32)&4294967295); //@line 4118 "cPickle.c"
        var $60=HEAP[$59]; //@line 4118 "cPickle.c"
        var $61=(($60+16)&4294967295); //@line 4118 "cPickle.c"
        var $62=HEAP[$61]; //@line 4118 "cPickle.c"
        var $63=HEAP[$len]; //@line 4118 "cPickle.c"
        var $64=(($62+4*$63)&4294967295); //@line 4118 "cPickle.c"
        var $65=HEAP[$64]; //@line 4118 "cPickle.c"
        FUNCTION_TABLE[$57]($65); //@line 4118 "cPickle.c"
        __label__ = 6; break; //@line 4118 "cPickle.c"
      case 6: // $bb5
        var $66=HEAP[$self_addr]; //@line 4119 "cPickle.c"
        var $67=(($66+32)&4294967295); //@line 4119 "cPickle.c"
        var $68=HEAP[$67]; //@line 4119 "cPickle.c"
        var $69=(($68+8)&4294967295); //@line 4119 "cPickle.c"
        var $70=HEAP[$len]; //@line 4119 "cPickle.c"
        HEAP[$69]=$70; //@line 4119 "cPickle.c"
        __label__ = 8; break; //@line 4119 "cPickle.c"
      case 7: // $bb6
        var $71=_stackUnderflow(); //@line 4121 "cPickle.c"
        HEAP[$0]=$71; //@line 4121 "cPickle.c"
        __label__ = 9; break; //@line 4121 "cPickle.c"
      case 8: // $bb7
        HEAP[$0]=0; //@line 4123 "cPickle.c"
        __label__ = 9; break; //@line 4123 "cPickle.c"
      case 9: // $bb8
        var $72=HEAP[$0]; //@line 4121 "cPickle.c"
        HEAP[$retval]=$72; //@line 4121 "cPickle.c"
        __label__ = 10; break; //@line 4121 "cPickle.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 4121 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 4121 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_pop_mark($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $i=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 4132 "cPickle.c"
        var $2=_marker($1); //@line 4132 "cPickle.c"
        HEAP[$i]=$2; //@line 4132 "cPickle.c"
        var $3=HEAP[$i]; //@line 4132 "cPickle.c"
        var $4=((($3))|0) < 0; //@line 4132 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4132 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 4133 "cPickle.c"
        __label__ = 3; break; //@line 4133 "cPickle.c"
      case 2: // $bb1
        var $5=HEAP[$self_addr]; //@line 4135 "cPickle.c"
        var $6=(($5+32)&4294967295); //@line 4135 "cPickle.c"
        var $7=HEAP[$6]; //@line 4135 "cPickle.c"
        var $8=HEAP[$i]; //@line 4135 "cPickle.c"
        var $9=_Pdata_clear($7, $8); //@line 4135 "cPickle.c"
        HEAP[$0]=0; //@line 4137 "cPickle.c"
        __label__ = 3; break; //@line 4137 "cPickle.c"
      case 3: // $bb2
        var $10=HEAP[$0]; //@line 4133 "cPickle.c"
        HEAP[$retval]=$10; //@line 4133 "cPickle.c"
        __label__ = 4; break; //@line 4133 "cPickle.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 4133 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 4133 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_dup($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $last=__stackBase__+12;
        var $len=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 4147 "cPickle.c"
        var $2=(($1+32)&4294967295); //@line 4147 "cPickle.c"
        var $3=HEAP[$2]; //@line 4147 "cPickle.c"
        var $4=(($3+8)&4294967295); //@line 4147 "cPickle.c"
        var $5=HEAP[$4]; //@line 4147 "cPickle.c"
        HEAP[$len]=$5; //@line 4147 "cPickle.c"
        var $6=HEAP[$len]; //@line 4147 "cPickle.c"
        var $7=((($6))|0) <= 0; //@line 4147 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4147 "cPickle.c"
      case 1: // $bb
        var $8=_stackUnderflow(); //@line 4147 "cPickle.c"
        HEAP[$0]=$8; //@line 4147 "cPickle.c"
        __label__ = 8; break; //@line 4147 "cPickle.c"
      case 2: // $bb1
        var $9=HEAP[$self_addr]; //@line 4148 "cPickle.c"
        var $10=(($9+32)&4294967295); //@line 4148 "cPickle.c"
        var $11=HEAP[$10]; //@line 4148 "cPickle.c"
        var $12=(($11+16)&4294967295); //@line 4148 "cPickle.c"
        var $13=HEAP[$12]; //@line 4148 "cPickle.c"
        var $14=HEAP[$len]; //@line 4148 "cPickle.c"
        var $15=((($14) - 1)&4294967295); //@line 4148 "cPickle.c"
        var $16=(($13+4*$15)&4294967295); //@line 4148 "cPickle.c"
        var $17=HEAP[$16]; //@line 4148 "cPickle.c"
        HEAP[$last]=$17; //@line 4148 "cPickle.c"
        var $18=HEAP[$last]; //@line 4149 "cPickle.c"
        var $19=(($18)&4294967295); //@line 4149 "cPickle.c"
        var $20=HEAP[$19]; //@line 4149 "cPickle.c"
        var $21=((($20) + 1)&4294967295); //@line 4149 "cPickle.c"
        var $22=HEAP[$last]; //@line 4149 "cPickle.c"
        var $23=(($22)&4294967295); //@line 4149 "cPickle.c"
        HEAP[$23]=$21; //@line 4149 "cPickle.c"
        var $24=HEAP[$self_addr]; //@line 4150 "cPickle.c"
        var $25=(($24+32)&4294967295); //@line 4150 "cPickle.c"
        var $26=HEAP[$25]; //@line 4150 "cPickle.c"
        var $27=(($26+8)&4294967295); //@line 4150 "cPickle.c"
        var $28=HEAP[$27]; //@line 4150 "cPickle.c"
        var $29=HEAP[$self_addr]; //@line 4150 "cPickle.c"
        var $30=(($29+32)&4294967295); //@line 4150 "cPickle.c"
        var $31=HEAP[$30]; //@line 4150 "cPickle.c"
        var $32=(($31+12)&4294967295); //@line 4150 "cPickle.c"
        var $33=HEAP[$32]; //@line 4150 "cPickle.c"
        var $34=((($28))|0)==((($33))|0); //@line 4150 "cPickle.c"
        if ($34) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 4150 "cPickle.c"
      case 3: // $bb2
        var $35=HEAP[$self_addr]; //@line 4150 "cPickle.c"
        var $36=(($35+32)&4294967295); //@line 4150 "cPickle.c"
        var $37=HEAP[$36]; //@line 4150 "cPickle.c"
        var $38=_Pdata_grow($37); //@line 4150 "cPickle.c"
        var $39=((($38))|0) < 0; //@line 4150 "cPickle.c"
        if ($39) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 4150 "cPickle.c"
      case 4: // $bb3
        var $40=HEAP[$last]; //@line 4150 "cPickle.c"
        var $41=(($40)&4294967295); //@line 4150 "cPickle.c"
        var $42=HEAP[$41]; //@line 4150 "cPickle.c"
        var $43=((($42) - 1)&4294967295); //@line 4150 "cPickle.c"
        var $44=HEAP[$last]; //@line 4150 "cPickle.c"
        var $45=(($44)&4294967295); //@line 4150 "cPickle.c"
        HEAP[$45]=$43; //@line 4150 "cPickle.c"
        var $46=HEAP[$last]; //@line 4150 "cPickle.c"
        var $47=(($46)&4294967295); //@line 4150 "cPickle.c"
        var $48=HEAP[$47]; //@line 4150 "cPickle.c"
        var $49=((($48))|0)==0; //@line 4150 "cPickle.c"
        if ($49) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4150 "cPickle.c"
      case 5: // $bb4
        var $50=HEAP[$last]; //@line 4150 "cPickle.c"
        var $51=(($50+4)&4294967295); //@line 4150 "cPickle.c"
        var $52=HEAP[$51]; //@line 4150 "cPickle.c"
        var $53=(($52+24)&4294967295); //@line 4150 "cPickle.c"
        var $54=HEAP[$53]; //@line 4150 "cPickle.c"
        var $55=HEAP[$last]; //@line 4150 "cPickle.c"
        FUNCTION_TABLE[$54]($55); //@line 4150 "cPickle.c"
        __label__ = 6; break; //@line 4150 "cPickle.c"
      case 6: // $bb5
        HEAP[$0]=-1; //@line 4150 "cPickle.c"
        __label__ = 8; break; //@line 4150 "cPickle.c"
      case 7: // $bb6
        var $56=HEAP[$self_addr]; //@line 4150 "cPickle.c"
        var $57=(($56+32)&4294967295); //@line 4150 "cPickle.c"
        var $58=HEAP[$57]; //@line 4150 "cPickle.c"
        var $59=(($58+16)&4294967295); //@line 4150 "cPickle.c"
        var $60=HEAP[$59]; //@line 4150 "cPickle.c"
        var $61=HEAP[$self_addr]; //@line 4150 "cPickle.c"
        var $62=(($61+32)&4294967295); //@line 4150 "cPickle.c"
        var $63=HEAP[$62]; //@line 4150 "cPickle.c"
        var $64=(($63+8)&4294967295); //@line 4150 "cPickle.c"
        var $65=HEAP[$64]; //@line 4150 "cPickle.c"
        var $66=(($60+4*$65)&4294967295); //@line 4150 "cPickle.c"
        var $67=HEAP[$last]; //@line 4150 "cPickle.c"
        HEAP[$66]=$67; //@line 4150 "cPickle.c"
        var $68=((($65) + 1)&4294967295); //@line 4150 "cPickle.c"
        var $69=(($63+8)&4294967295); //@line 4150 "cPickle.c"
        HEAP[$69]=$68; //@line 4150 "cPickle.c"
        HEAP[$0]=0; //@line 4151 "cPickle.c"
        __label__ = 8; break; //@line 4151 "cPickle.c"
      case 8: // $bb7
        var $70=HEAP[$0]; //@line 4147 "cPickle.c"
        HEAP[$retval]=$70; //@line 4147 "cPickle.c"
        __label__ = 9; break; //@line 4147 "cPickle.c"
      case 9: // $return
        var $retval8=HEAP[$retval]; //@line 4147 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval8; //@line 4147 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_get($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $py_str=__stackBase__+12;
        var $value=__stackBase__+16;
        var $len=__stackBase__+20;
        var $s=__stackBase__+24;
        var $rc=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$py_str]=0; //@line 4158 "cPickle.c"
        HEAP[$value]=0; //@line 4158 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 4163 "cPickle.c"
        var $2=(($1+64)&4294967295); //@line 4163 "cPickle.c"
        var $3=HEAP[$2]; //@line 4163 "cPickle.c"
        var $4=HEAP[$self_addr]; //@line 4163 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s); //@line 4163 "cPickle.c"
        HEAP[$len]=$5; //@line 4163 "cPickle.c"
        var $6=HEAP[$len]; //@line 4163 "cPickle.c"
        var $7=((($6))|0) < 0; //@line 4163 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4163 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 4163 "cPickle.c"
        __label__ = 15; break; //@line 4163 "cPickle.c"
      case 2: // $bb1
        var $8=HEAP[$len]; //@line 4164 "cPickle.c"
        var $9=((($8))|0) <= 1; //@line 4164 "cPickle.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4164 "cPickle.c"
      case 3: // $bb2
        var $10=_bad_readline(); //@line 4164 "cPickle.c"
        HEAP[$0]=$10; //@line 4164 "cPickle.c"
        __label__ = 15; break; //@line 4164 "cPickle.c"
      case 4: // $bb3
        var $11=HEAP[$len]; //@line 4166 "cPickle.c"
        var $12=((($11) - 1)&4294967295); //@line 4166 "cPickle.c"
        var $13=HEAP[$s]; //@line 4166 "cPickle.c"
        var $14=_PyString_FromStringAndSize($13, $12); //@line 4166 "cPickle.c"
        HEAP[$py_str]=$14; //@line 4166 "cPickle.c"
        var $15=HEAP[$py_str]; //@line 4166 "cPickle.c"
        var $16=($15)==0; //@line 4166 "cPickle.c"
        if ($16) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4166 "cPickle.c"
      case 5: // $bb4
        HEAP[$0]=-1; //@line 4166 "cPickle.c"
        __label__ = 15; break; //@line 4166 "cPickle.c"
      case 6: // $bb5
        var $17=HEAP[$self_addr]; //@line 4168 "cPickle.c"
        var $18=(($17+24)&4294967295); //@line 4168 "cPickle.c"
        var $19=HEAP[$18]; //@line 4168 "cPickle.c"
        var $20=HEAP[$py_str]; //@line 4168 "cPickle.c"
        var $21=_PyDict_GetItem($19, $20); //@line 4168 "cPickle.c"
        HEAP[$value]=$21; //@line 4168 "cPickle.c"
        var $22=HEAP[$value]; //@line 4169 "cPickle.c"
        var $23=($22)==0; //@line 4169 "cPickle.c"
        if ($23) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4169 "cPickle.c"
      case 7: // $bb6
        var $24=HEAP[_BadPickleGet]; //@line 4170 "cPickle.c"
        var $25=HEAP[$py_str]; //@line 4170 "cPickle.c"
        _PyErr_SetObject($24, $25); //@line 4170 "cPickle.c"
        HEAP[$rc]=-1; //@line 4171 "cPickle.c"
        __label__ = 12; break; //@line 4171 "cPickle.c"
      case 8: // $bb7
        var $26=HEAP[$self_addr]; //@line 4174 "cPickle.c"
        var $27=(($26+32)&4294967295); //@line 4174 "cPickle.c"
        var $28=HEAP[$27]; //@line 4174 "cPickle.c"
        var $29=(($28+8)&4294967295); //@line 4174 "cPickle.c"
        var $30=HEAP[$29]; //@line 4174 "cPickle.c"
        var $31=HEAP[$self_addr]; //@line 4174 "cPickle.c"
        var $32=(($31+32)&4294967295); //@line 4174 "cPickle.c"
        var $33=HEAP[$32]; //@line 4174 "cPickle.c"
        var $34=(($33+12)&4294967295); //@line 4174 "cPickle.c"
        var $35=HEAP[$34]; //@line 4174 "cPickle.c"
        var $36=((($30))|0)==((($35))|0); //@line 4174 "cPickle.c"
        if ($36) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 4174 "cPickle.c"
      case 9: // $bb8
        var $37=HEAP[$self_addr]; //@line 4174 "cPickle.c"
        var $38=(($37+32)&4294967295); //@line 4174 "cPickle.c"
        var $39=HEAP[$38]; //@line 4174 "cPickle.c"
        var $40=_Pdata_grow($39); //@line 4174 "cPickle.c"
        var $41=((($40))|0) < 0; //@line 4174 "cPickle.c"
        if ($41) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 4174 "cPickle.c"
      case 10: // $bb9
        HEAP[$0]=-1; //@line 4174 "cPickle.c"
        __label__ = 15; break; //@line 4174 "cPickle.c"
      case 11: // $bb10
        var $42=HEAP[$value]; //@line 4174 "cPickle.c"
        var $43=(($42)&4294967295); //@line 4174 "cPickle.c"
        var $44=HEAP[$43]; //@line 4174 "cPickle.c"
        var $45=((($44) + 1)&4294967295); //@line 4174 "cPickle.c"
        var $46=HEAP[$value]; //@line 4174 "cPickle.c"
        var $47=(($46)&4294967295); //@line 4174 "cPickle.c"
        HEAP[$47]=$45; //@line 4174 "cPickle.c"
        var $48=HEAP[$self_addr]; //@line 4174 "cPickle.c"
        var $49=(($48+32)&4294967295); //@line 4174 "cPickle.c"
        var $50=HEAP[$49]; //@line 4174 "cPickle.c"
        var $51=(($50+16)&4294967295); //@line 4174 "cPickle.c"
        var $52=HEAP[$51]; //@line 4174 "cPickle.c"
        var $53=HEAP[$self_addr]; //@line 4174 "cPickle.c"
        var $54=(($53+32)&4294967295); //@line 4174 "cPickle.c"
        var $55=HEAP[$54]; //@line 4174 "cPickle.c"
        var $56=(($55+8)&4294967295); //@line 4174 "cPickle.c"
        var $57=HEAP[$56]; //@line 4174 "cPickle.c"
        var $58=(($52+4*$57)&4294967295); //@line 4174 "cPickle.c"
        var $59=HEAP[$value]; //@line 4174 "cPickle.c"
        HEAP[$58]=$59; //@line 4174 "cPickle.c"
        var $60=((($57) + 1)&4294967295); //@line 4174 "cPickle.c"
        var $61=(($55+8)&4294967295); //@line 4174 "cPickle.c"
        HEAP[$61]=$60; //@line 4174 "cPickle.c"
        HEAP[$rc]=0; //@line 4175 "cPickle.c"
        __label__ = 12; break; //@line 4175 "cPickle.c"
      case 12: // $bb11
        var $62=HEAP[$py_str]; //@line 4178 "cPickle.c"
        var $63=(($62)&4294967295); //@line 4178 "cPickle.c"
        var $64=HEAP[$63]; //@line 4178 "cPickle.c"
        var $65=((($64) - 1)&4294967295); //@line 4178 "cPickle.c"
        var $66=HEAP[$py_str]; //@line 4178 "cPickle.c"
        var $67=(($66)&4294967295); //@line 4178 "cPickle.c"
        HEAP[$67]=$65; //@line 4178 "cPickle.c"
        var $68=HEAP[$py_str]; //@line 4178 "cPickle.c"
        var $69=(($68)&4294967295); //@line 4178 "cPickle.c"
        var $70=HEAP[$69]; //@line 4178 "cPickle.c"
        var $71=((($70))|0)==0; //@line 4178 "cPickle.c"
        if ($71) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 4178 "cPickle.c"
      case 13: // $bb12
        var $72=HEAP[$py_str]; //@line 4178 "cPickle.c"
        var $73=(($72+4)&4294967295); //@line 4178 "cPickle.c"
        var $74=HEAP[$73]; //@line 4178 "cPickle.c"
        var $75=(($74+24)&4294967295); //@line 4178 "cPickle.c"
        var $76=HEAP[$75]; //@line 4178 "cPickle.c"
        var $77=HEAP[$py_str]; //@line 4178 "cPickle.c"
        FUNCTION_TABLE[$76]($77); //@line 4178 "cPickle.c"
        __label__ = 14; break; //@line 4178 "cPickle.c"
      case 14: // $bb13
        var $78=HEAP[$rc]; //@line 4179 "cPickle.c"
        HEAP[$0]=$78; //@line 4179 "cPickle.c"
        __label__ = 15; break; //@line 4179 "cPickle.c"
      case 15: // $bb14
        var $79=HEAP[$0]; //@line 4163 "cPickle.c"
        HEAP[$retval]=$79; //@line 4163 "cPickle.c"
        __label__ = 16; break; //@line 4163 "cPickle.c"
      case 16: // $return
        var $retval15=HEAP[$retval]; //@line 4163 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval15; //@line 4163 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_binget($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 29; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 29);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $py_key=__stackBase__+12;
        var $value=__stackBase__+16;
        var $key=__stackBase__+20;
        var $s=__stackBase__+21;
        var $rc=__stackBase__+25;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$py_key]=0; //@line 4186 "cPickle.c"
        HEAP[$value]=0; //@line 4186 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 4191 "cPickle.c"
        var $2=(($1+60)&4294967295); //@line 4191 "cPickle.c"
        var $3=HEAP[$2]; //@line 4191 "cPickle.c"
        var $4=HEAP[$self_addr]; //@line 4191 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s, 1); //@line 4191 "cPickle.c"
        var $6=((($5))|0) < 0; //@line 4191 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4191 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 4191 "cPickle.c"
        __label__ = 13; break; //@line 4191 "cPickle.c"
      case 2: // $bb1
        var $7=HEAP[$s]; //@line 4193 "cPickle.c"
        var $8=(($7)&4294967295); //@line 4193 "cPickle.c"
        var $9=HEAP[$8]; //@line 4193 "cPickle.c"
        HEAP[$key]=$9; //@line 4193 "cPickle.c"
        var $10=HEAP[$key]; //@line 4194 "cPickle.c"
        var $11=unSign(($10), 8, 0); //@line 4194 "cPickle.c"
        var $12=_PyInt_FromLong($11); //@line 4194 "cPickle.c"
        HEAP[$py_key]=$12; //@line 4194 "cPickle.c"
        var $13=HEAP[$py_key]; //@line 4194 "cPickle.c"
        var $14=($13)==0; //@line 4194 "cPickle.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4194 "cPickle.c"
      case 3: // $bb2
        HEAP[$0]=-1; //@line 4194 "cPickle.c"
        __label__ = 13; break; //@line 4194 "cPickle.c"
      case 4: // $bb3
        var $15=HEAP[$self_addr]; //@line 4196 "cPickle.c"
        var $16=(($15+24)&4294967295); //@line 4196 "cPickle.c"
        var $17=HEAP[$16]; //@line 4196 "cPickle.c"
        var $18=HEAP[$py_key]; //@line 4196 "cPickle.c"
        var $19=_PyDict_GetItem($17, $18); //@line 4196 "cPickle.c"
        HEAP[$value]=$19; //@line 4196 "cPickle.c"
        var $20=HEAP[$value]; //@line 4197 "cPickle.c"
        var $21=($20)==0; //@line 4197 "cPickle.c"
        if ($21) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4197 "cPickle.c"
      case 5: // $bb4
        var $22=HEAP[_BadPickleGet]; //@line 4198 "cPickle.c"
        var $23=HEAP[$py_key]; //@line 4198 "cPickle.c"
        _PyErr_SetObject($22, $23); //@line 4198 "cPickle.c"
        HEAP[$rc]=-1; //@line 4199 "cPickle.c"
        __label__ = 10; break; //@line 4199 "cPickle.c"
      case 6: // $bb5
        var $24=HEAP[$self_addr]; //@line 4202 "cPickle.c"
        var $25=(($24+32)&4294967295); //@line 4202 "cPickle.c"
        var $26=HEAP[$25]; //@line 4202 "cPickle.c"
        var $27=(($26+8)&4294967295); //@line 4202 "cPickle.c"
        var $28=HEAP[$27]; //@line 4202 "cPickle.c"
        var $29=HEAP[$self_addr]; //@line 4202 "cPickle.c"
        var $30=(($29+32)&4294967295); //@line 4202 "cPickle.c"
        var $31=HEAP[$30]; //@line 4202 "cPickle.c"
        var $32=(($31+12)&4294967295); //@line 4202 "cPickle.c"
        var $33=HEAP[$32]; //@line 4202 "cPickle.c"
        var $34=((($28))|0)==((($33))|0); //@line 4202 "cPickle.c"
        if ($34) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 4202 "cPickle.c"
      case 7: // $bb6
        var $35=HEAP[$self_addr]; //@line 4202 "cPickle.c"
        var $36=(($35+32)&4294967295); //@line 4202 "cPickle.c"
        var $37=HEAP[$36]; //@line 4202 "cPickle.c"
        var $38=_Pdata_grow($37); //@line 4202 "cPickle.c"
        var $39=((($38))|0) < 0; //@line 4202 "cPickle.c"
        if ($39) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4202 "cPickle.c"
      case 8: // $bb7
        HEAP[$0]=-1; //@line 4202 "cPickle.c"
        __label__ = 13; break; //@line 4202 "cPickle.c"
      case 9: // $bb8
        var $40=HEAP[$value]; //@line 4202 "cPickle.c"
        var $41=(($40)&4294967295); //@line 4202 "cPickle.c"
        var $42=HEAP[$41]; //@line 4202 "cPickle.c"
        var $43=((($42) + 1)&4294967295); //@line 4202 "cPickle.c"
        var $44=HEAP[$value]; //@line 4202 "cPickle.c"
        var $45=(($44)&4294967295); //@line 4202 "cPickle.c"
        HEAP[$45]=$43; //@line 4202 "cPickle.c"
        var $46=HEAP[$self_addr]; //@line 4202 "cPickle.c"
        var $47=(($46+32)&4294967295); //@line 4202 "cPickle.c"
        var $48=HEAP[$47]; //@line 4202 "cPickle.c"
        var $49=(($48+16)&4294967295); //@line 4202 "cPickle.c"
        var $50=HEAP[$49]; //@line 4202 "cPickle.c"
        var $51=HEAP[$self_addr]; //@line 4202 "cPickle.c"
        var $52=(($51+32)&4294967295); //@line 4202 "cPickle.c"
        var $53=HEAP[$52]; //@line 4202 "cPickle.c"
        var $54=(($53+8)&4294967295); //@line 4202 "cPickle.c"
        var $55=HEAP[$54]; //@line 4202 "cPickle.c"
        var $56=(($50+4*$55)&4294967295); //@line 4202 "cPickle.c"
        var $57=HEAP[$value]; //@line 4202 "cPickle.c"
        HEAP[$56]=$57; //@line 4202 "cPickle.c"
        var $58=((($55) + 1)&4294967295); //@line 4202 "cPickle.c"
        var $59=(($53+8)&4294967295); //@line 4202 "cPickle.c"
        HEAP[$59]=$58; //@line 4202 "cPickle.c"
        HEAP[$rc]=0; //@line 4203 "cPickle.c"
        __label__ = 10; break; //@line 4203 "cPickle.c"
      case 10: // $bb9
        var $60=HEAP[$py_key]; //@line 4206 "cPickle.c"
        var $61=(($60)&4294967295); //@line 4206 "cPickle.c"
        var $62=HEAP[$61]; //@line 4206 "cPickle.c"
        var $63=((($62) - 1)&4294967295); //@line 4206 "cPickle.c"
        var $64=HEAP[$py_key]; //@line 4206 "cPickle.c"
        var $65=(($64)&4294967295); //@line 4206 "cPickle.c"
        HEAP[$65]=$63; //@line 4206 "cPickle.c"
        var $66=HEAP[$py_key]; //@line 4206 "cPickle.c"
        var $67=(($66)&4294967295); //@line 4206 "cPickle.c"
        var $68=HEAP[$67]; //@line 4206 "cPickle.c"
        var $69=((($68))|0)==0; //@line 4206 "cPickle.c"
        if ($69) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 4206 "cPickle.c"
      case 11: // $bb10
        var $70=HEAP[$py_key]; //@line 4206 "cPickle.c"
        var $71=(($70+4)&4294967295); //@line 4206 "cPickle.c"
        var $72=HEAP[$71]; //@line 4206 "cPickle.c"
        var $73=(($72+24)&4294967295); //@line 4206 "cPickle.c"
        var $74=HEAP[$73]; //@line 4206 "cPickle.c"
        var $75=HEAP[$py_key]; //@line 4206 "cPickle.c"
        FUNCTION_TABLE[$74]($75); //@line 4206 "cPickle.c"
        __label__ = 12; break; //@line 4206 "cPickle.c"
      case 12: // $bb11
        var $76=HEAP[$rc]; //@line 4207 "cPickle.c"
        HEAP[$0]=$76; //@line 4207 "cPickle.c"
        __label__ = 13; break; //@line 4207 "cPickle.c"
      case 13: // $bb12
        var $77=HEAP[$0]; //@line 4191 "cPickle.c"
        HEAP[$retval]=$77; //@line 4191 "cPickle.c"
        __label__ = 14; break; //@line 4191 "cPickle.c"
      case 14: // $return
        var $retval13=HEAP[$retval]; //@line 4191 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 4191 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_long_binget($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 33; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 33);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $py_key=__stackBase__+12;
        var $value=__stackBase__+16;
        var $c=__stackBase__+20;
        var $s=__stackBase__+21;
        var $key=__stackBase__+25;
        var $rc=__stackBase__+29;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$py_key]=0; //@line 4214 "cPickle.c"
        HEAP[$value]=0; //@line 4214 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 4220 "cPickle.c"
        var $2=(($1+60)&4294967295); //@line 4220 "cPickle.c"
        var $3=HEAP[$2]; //@line 4220 "cPickle.c"
        var $4=HEAP[$self_addr]; //@line 4220 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s, 4); //@line 4220 "cPickle.c"
        var $6=((($5))|0) < 0; //@line 4220 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4220 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 4220 "cPickle.c"
        __label__ = 13; break; //@line 4220 "cPickle.c"
      case 2: // $bb1
        var $7=HEAP[$s]; //@line 4222 "cPickle.c"
        var $8=(($7)&4294967295); //@line 4222 "cPickle.c"
        var $9=HEAP[$8]; //@line 4222 "cPickle.c"
        HEAP[$c]=$9; //@line 4222 "cPickle.c"
        var $10=HEAP[$c]; //@line 4223 "cPickle.c"
        var $11=unSign(($10), 8, 0); //@line 4223 "cPickle.c"
        HEAP[$key]=$11; //@line 4223 "cPickle.c"
        var $12=HEAP[$s]; //@line 4224 "cPickle.c"
        var $13=(($12+1)&4294967295); //@line 4224 "cPickle.c"
        var $14=HEAP[$13]; //@line 4224 "cPickle.c"
        HEAP[$c]=$14; //@line 4224 "cPickle.c"
        var $15=HEAP[$c]; //@line 4225 "cPickle.c"
        var $16=unSign(($15), 8, 0); //@line 4225 "cPickle.c"
        var $17=($16) << 8; //@line 4225 "cPickle.c"
        var $18=HEAP[$key]; //@line 4225 "cPickle.c"
        var $19=($17) | ($18); //@line 4225 "cPickle.c"
        HEAP[$key]=$19; //@line 4225 "cPickle.c"
        var $20=HEAP[$s]; //@line 4226 "cPickle.c"
        var $21=(($20+2)&4294967295); //@line 4226 "cPickle.c"
        var $22=HEAP[$21]; //@line 4226 "cPickle.c"
        HEAP[$c]=$22; //@line 4226 "cPickle.c"
        var $23=HEAP[$c]; //@line 4227 "cPickle.c"
        var $24=unSign(($23), 8, 0); //@line 4227 "cPickle.c"
        var $25=($24) << 16; //@line 4227 "cPickle.c"
        var $26=HEAP[$key]; //@line 4227 "cPickle.c"
        var $27=($25) | ($26); //@line 4227 "cPickle.c"
        HEAP[$key]=$27; //@line 4227 "cPickle.c"
        var $28=HEAP[$s]; //@line 4228 "cPickle.c"
        var $29=(($28+3)&4294967295); //@line 4228 "cPickle.c"
        var $30=HEAP[$29]; //@line 4228 "cPickle.c"
        HEAP[$c]=$30; //@line 4228 "cPickle.c"
        var $31=HEAP[$c]; //@line 4229 "cPickle.c"
        var $32=unSign(($31), 8, 0); //@line 4229 "cPickle.c"
        var $33=($32) << 24; //@line 4229 "cPickle.c"
        var $34=HEAP[$key]; //@line 4229 "cPickle.c"
        var $35=($33) | ($34); //@line 4229 "cPickle.c"
        HEAP[$key]=$35; //@line 4229 "cPickle.c"
        var $36=HEAP[$key]; //@line 4231 "cPickle.c"
        var $37=_PyInt_FromLong($36); //@line 4231 "cPickle.c"
        HEAP[$py_key]=$37; //@line 4231 "cPickle.c"
        var $38=HEAP[$py_key]; //@line 4231 "cPickle.c"
        var $39=($38)==0; //@line 4231 "cPickle.c"
        if ($39) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4231 "cPickle.c"
      case 3: // $bb2
        HEAP[$0]=-1; //@line 4231 "cPickle.c"
        __label__ = 13; break; //@line 4231 "cPickle.c"
      case 4: // $bb3
        var $40=HEAP[$self_addr]; //@line 4233 "cPickle.c"
        var $41=(($40+24)&4294967295); //@line 4233 "cPickle.c"
        var $42=HEAP[$41]; //@line 4233 "cPickle.c"
        var $43=HEAP[$py_key]; //@line 4233 "cPickle.c"
        var $44=_PyDict_GetItem($42, $43); //@line 4233 "cPickle.c"
        HEAP[$value]=$44; //@line 4233 "cPickle.c"
        var $45=HEAP[$value]; //@line 4234 "cPickle.c"
        var $46=($45)==0; //@line 4234 "cPickle.c"
        if ($46) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4234 "cPickle.c"
      case 5: // $bb4
        var $47=HEAP[_BadPickleGet]; //@line 4235 "cPickle.c"
        var $48=HEAP[$py_key]; //@line 4235 "cPickle.c"
        _PyErr_SetObject($47, $48); //@line 4235 "cPickle.c"
        HEAP[$rc]=-1; //@line 4236 "cPickle.c"
        __label__ = 10; break; //@line 4236 "cPickle.c"
      case 6: // $bb5
        var $49=HEAP[$self_addr]; //@line 4239 "cPickle.c"
        var $50=(($49+32)&4294967295); //@line 4239 "cPickle.c"
        var $51=HEAP[$50]; //@line 4239 "cPickle.c"
        var $52=(($51+8)&4294967295); //@line 4239 "cPickle.c"
        var $53=HEAP[$52]; //@line 4239 "cPickle.c"
        var $54=HEAP[$self_addr]; //@line 4239 "cPickle.c"
        var $55=(($54+32)&4294967295); //@line 4239 "cPickle.c"
        var $56=HEAP[$55]; //@line 4239 "cPickle.c"
        var $57=(($56+12)&4294967295); //@line 4239 "cPickle.c"
        var $58=HEAP[$57]; //@line 4239 "cPickle.c"
        var $59=((($53))|0)==((($58))|0); //@line 4239 "cPickle.c"
        if ($59) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 4239 "cPickle.c"
      case 7: // $bb6
        var $60=HEAP[$self_addr]; //@line 4239 "cPickle.c"
        var $61=(($60+32)&4294967295); //@line 4239 "cPickle.c"
        var $62=HEAP[$61]; //@line 4239 "cPickle.c"
        var $63=_Pdata_grow($62); //@line 4239 "cPickle.c"
        var $64=((($63))|0) < 0; //@line 4239 "cPickle.c"
        if ($64) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4239 "cPickle.c"
      case 8: // $bb7
        HEAP[$0]=-1; //@line 4239 "cPickle.c"
        __label__ = 13; break; //@line 4239 "cPickle.c"
      case 9: // $bb8
        var $65=HEAP[$value]; //@line 4239 "cPickle.c"
        var $66=(($65)&4294967295); //@line 4239 "cPickle.c"
        var $67=HEAP[$66]; //@line 4239 "cPickle.c"
        var $68=((($67) + 1)&4294967295); //@line 4239 "cPickle.c"
        var $69=HEAP[$value]; //@line 4239 "cPickle.c"
        var $70=(($69)&4294967295); //@line 4239 "cPickle.c"
        HEAP[$70]=$68; //@line 4239 "cPickle.c"
        var $71=HEAP[$self_addr]; //@line 4239 "cPickle.c"
        var $72=(($71+32)&4294967295); //@line 4239 "cPickle.c"
        var $73=HEAP[$72]; //@line 4239 "cPickle.c"
        var $74=(($73+16)&4294967295); //@line 4239 "cPickle.c"
        var $75=HEAP[$74]; //@line 4239 "cPickle.c"
        var $76=HEAP[$self_addr]; //@line 4239 "cPickle.c"
        var $77=(($76+32)&4294967295); //@line 4239 "cPickle.c"
        var $78=HEAP[$77]; //@line 4239 "cPickle.c"
        var $79=(($78+8)&4294967295); //@line 4239 "cPickle.c"
        var $80=HEAP[$79]; //@line 4239 "cPickle.c"
        var $81=(($75+4*$80)&4294967295); //@line 4239 "cPickle.c"
        var $82=HEAP[$value]; //@line 4239 "cPickle.c"
        HEAP[$81]=$82; //@line 4239 "cPickle.c"
        var $83=((($80) + 1)&4294967295); //@line 4239 "cPickle.c"
        var $84=(($78+8)&4294967295); //@line 4239 "cPickle.c"
        HEAP[$84]=$83; //@line 4239 "cPickle.c"
        HEAP[$rc]=0; //@line 4240 "cPickle.c"
        __label__ = 10; break; //@line 4240 "cPickle.c"
      case 10: // $bb9
        var $85=HEAP[$py_key]; //@line 4243 "cPickle.c"
        var $86=(($85)&4294967295); //@line 4243 "cPickle.c"
        var $87=HEAP[$86]; //@line 4243 "cPickle.c"
        var $88=((($87) - 1)&4294967295); //@line 4243 "cPickle.c"
        var $89=HEAP[$py_key]; //@line 4243 "cPickle.c"
        var $90=(($89)&4294967295); //@line 4243 "cPickle.c"
        HEAP[$90]=$88; //@line 4243 "cPickle.c"
        var $91=HEAP[$py_key]; //@line 4243 "cPickle.c"
        var $92=(($91)&4294967295); //@line 4243 "cPickle.c"
        var $93=HEAP[$92]; //@line 4243 "cPickle.c"
        var $94=((($93))|0)==0; //@line 4243 "cPickle.c"
        if ($94) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 4243 "cPickle.c"
      case 11: // $bb10
        var $95=HEAP[$py_key]; //@line 4243 "cPickle.c"
        var $96=(($95+4)&4294967295); //@line 4243 "cPickle.c"
        var $97=HEAP[$96]; //@line 4243 "cPickle.c"
        var $98=(($97+24)&4294967295); //@line 4243 "cPickle.c"
        var $99=HEAP[$98]; //@line 4243 "cPickle.c"
        var $100=HEAP[$py_key]; //@line 4243 "cPickle.c"
        FUNCTION_TABLE[$99]($100); //@line 4243 "cPickle.c"
        __label__ = 12; break; //@line 4243 "cPickle.c"
      case 12: // $bb11
        var $101=HEAP[$rc]; //@line 4244 "cPickle.c"
        HEAP[$0]=$101; //@line 4244 "cPickle.c"
        __label__ = 13; break; //@line 4244 "cPickle.c"
      case 13: // $bb12
        var $102=HEAP[$0]; //@line 4220 "cPickle.c"
        HEAP[$retval]=$102; //@line 4220 "cPickle.c"
        __label__ = 14; break; //@line 4220 "cPickle.c"
      case 14: // $return
        var $retval13=HEAP[$retval]; //@line 4220 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 4220 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_extension($self, $nbytes) {
    var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 44);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $nbytes_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $codebytes=__stackBase__+16;
        var $code=__stackBase__+20;
        var $py_code=__stackBase__+24;
        var $obj=__stackBase__+28;
        var $pair=__stackBase__+32;
        var $module_name=__stackBase__+36;
        var $class_name=__stackBase__+40;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$nbytes_addr]=$nbytes;
        var $1=HEAP[$nbytes_addr]; //@line 4260 "cPickle.c"
        var $2=((($1))|0)!=1; //@line 4260 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 4260 "cPickle.c"
      case 1: // $bb
        var $3=HEAP[$nbytes_addr]; //@line 4260 "cPickle.c"
        var $4=((($3))|0)!=2; //@line 4260 "cPickle.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 4260 "cPickle.c"
      case 2: // $bb1
        var $5=HEAP[$nbytes_addr]; //@line 4260 "cPickle.c"
        var $6=((($5))|0)!=4; //@line 4260 "cPickle.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4260 "cPickle.c"
      case 3: // $bb2
        ___assert_fail(((__str93)&4294967295), ((__str15)&4294967295), 4260, ((___PRETTY_FUNCTION___14342)&4294967295)); //@line 4260 "cPickle.c"
        throw "Reached an unreachable! Original .ll line: 19615"; //@line 4260 "cPickle.c"
      case 4: // $bb3
        var $7=HEAP[$self_addr]; //@line 4261 "cPickle.c"
        var $8=(($7+60)&4294967295); //@line 4261 "cPickle.c"
        var $9=HEAP[$8]; //@line 4261 "cPickle.c"
        var $10=HEAP[$self_addr]; //@line 4261 "cPickle.c"
        var $11=HEAP[$nbytes_addr]; //@line 4261 "cPickle.c"
        var $12=FUNCTION_TABLE[$9]($10, $codebytes, $11); //@line 4261 "cPickle.c"
        var $13=((($12))|0) < 0; //@line 4261 "cPickle.c"
        if ($13) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4261 "cPickle.c"
      case 5: // $bb4
        HEAP[$0]=-1; //@line 4261 "cPickle.c"
        __label__ = 44; break; //@line 4261 "cPickle.c"
      case 6: // $bb5
        var $14=HEAP[$codebytes]; //@line 4262 "cPickle.c"
        var $15=HEAP[$nbytes_addr]; //@line 4262 "cPickle.c"
        var $16=_calc_binint($14, $15); //@line 4262 "cPickle.c"
        HEAP[$code]=$16; //@line 4262 "cPickle.c"
        var $17=HEAP[$code]; //@line 4263 "cPickle.c"
        var $18=((($17))|0) <= 0; //@line 4263 "cPickle.c"
        if ($18) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4263 "cPickle.c"
      case 7: // $bb6
        var $19=HEAP[_UnpicklingError]; //@line 4265 "cPickle.c"
        _PyErr_SetString($19, ((__str94)&4294967295)); //@line 4265 "cPickle.c"
        HEAP[$0]=-1; //@line 4266 "cPickle.c"
        __label__ = 44; break; //@line 4266 "cPickle.c"
      case 8: // $bb7
        var $20=HEAP[$code]; //@line 4270 "cPickle.c"
        var $21=_PyInt_FromLong($20); //@line 4270 "cPickle.c"
        HEAP[$py_code]=$21; //@line 4270 "cPickle.c"
        var $22=HEAP[$py_code]; //@line 4271 "cPickle.c"
        var $23=($22)==0; //@line 4271 "cPickle.c"
        if ($23) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 4271 "cPickle.c"
      case 9: // $bb8
        HEAP[$0]=-1; //@line 4271 "cPickle.c"
        __label__ = 44; break; //@line 4271 "cPickle.c"
      case 10: // $bb9
        var $24=HEAP[_extension_cache]; //@line 4272 "cPickle.c"
        var $25=HEAP[$py_code]; //@line 4272 "cPickle.c"
        var $26=_PyDict_GetItem($24, $25); //@line 4272 "cPickle.c"
        HEAP[$obj]=$26; //@line 4272 "cPickle.c"
        var $27=HEAP[$obj]; //@line 4273 "cPickle.c"
        var $28=($27)!=0; //@line 4273 "cPickle.c"
        if ($28) { __label__ = 11; break; } else { __label__ = 17; break; } //@line 4273 "cPickle.c"
      case 11: // $bb10
        var $29=HEAP[$py_code]; //@line 4275 "cPickle.c"
        var $30=(($29)&4294967295); //@line 4275 "cPickle.c"
        var $31=HEAP[$30]; //@line 4275 "cPickle.c"
        var $32=((($31) - 1)&4294967295); //@line 4275 "cPickle.c"
        var $33=HEAP[$py_code]; //@line 4275 "cPickle.c"
        var $34=(($33)&4294967295); //@line 4275 "cPickle.c"
        HEAP[$34]=$32; //@line 4275 "cPickle.c"
        var $35=HEAP[$py_code]; //@line 4275 "cPickle.c"
        var $36=(($35)&4294967295); //@line 4275 "cPickle.c"
        var $37=HEAP[$36]; //@line 4275 "cPickle.c"
        var $38=((($37))|0)==0; //@line 4275 "cPickle.c"
        if ($38) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 4275 "cPickle.c"
      case 12: // $bb11
        var $39=HEAP[$py_code]; //@line 4275 "cPickle.c"
        var $40=(($39+4)&4294967295); //@line 4275 "cPickle.c"
        var $41=HEAP[$40]; //@line 4275 "cPickle.c"
        var $42=(($41+24)&4294967295); //@line 4275 "cPickle.c"
        var $43=HEAP[$42]; //@line 4275 "cPickle.c"
        var $44=HEAP[$py_code]; //@line 4275 "cPickle.c"
        FUNCTION_TABLE[$43]($44); //@line 4275 "cPickle.c"
        __label__ = 13; break; //@line 4275 "cPickle.c"
      case 13: // $bb12
        var $45=HEAP[$self_addr]; //@line 4276 "cPickle.c"
        var $46=(($45+32)&4294967295); //@line 4276 "cPickle.c"
        var $47=HEAP[$46]; //@line 4276 "cPickle.c"
        var $48=(($47+8)&4294967295); //@line 4276 "cPickle.c"
        var $49=HEAP[$48]; //@line 4276 "cPickle.c"
        var $50=HEAP[$self_addr]; //@line 4276 "cPickle.c"
        var $51=(($50+32)&4294967295); //@line 4276 "cPickle.c"
        var $52=HEAP[$51]; //@line 4276 "cPickle.c"
        var $53=(($52+12)&4294967295); //@line 4276 "cPickle.c"
        var $54=HEAP[$53]; //@line 4276 "cPickle.c"
        var $55=((($49))|0)==((($54))|0); //@line 4276 "cPickle.c"
        if ($55) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 4276 "cPickle.c"
      case 14: // $bb13
        var $56=HEAP[$self_addr]; //@line 4276 "cPickle.c"
        var $57=(($56+32)&4294967295); //@line 4276 "cPickle.c"
        var $58=HEAP[$57]; //@line 4276 "cPickle.c"
        var $59=_Pdata_grow($58); //@line 4276 "cPickle.c"
        var $60=((($59))|0) < 0; //@line 4276 "cPickle.c"
        if ($60) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 4276 "cPickle.c"
      case 15: // $bb14
        HEAP[$0]=-1; //@line 4276 "cPickle.c"
        __label__ = 44; break; //@line 4276 "cPickle.c"
      case 16: // $bb15
        var $61=HEAP[$obj]; //@line 4276 "cPickle.c"
        var $62=(($61)&4294967295); //@line 4276 "cPickle.c"
        var $63=HEAP[$62]; //@line 4276 "cPickle.c"
        var $64=((($63) + 1)&4294967295); //@line 4276 "cPickle.c"
        var $65=HEAP[$obj]; //@line 4276 "cPickle.c"
        var $66=(($65)&4294967295); //@line 4276 "cPickle.c"
        HEAP[$66]=$64; //@line 4276 "cPickle.c"
        var $67=HEAP[$self_addr]; //@line 4276 "cPickle.c"
        var $68=(($67+32)&4294967295); //@line 4276 "cPickle.c"
        var $69=HEAP[$68]; //@line 4276 "cPickle.c"
        var $70=(($69+16)&4294967295); //@line 4276 "cPickle.c"
        var $71=HEAP[$70]; //@line 4276 "cPickle.c"
        var $72=HEAP[$self_addr]; //@line 4276 "cPickle.c"
        var $73=(($72+32)&4294967295); //@line 4276 "cPickle.c"
        var $74=HEAP[$73]; //@line 4276 "cPickle.c"
        var $75=(($74+8)&4294967295); //@line 4276 "cPickle.c"
        var $76=HEAP[$75]; //@line 4276 "cPickle.c"
        var $77=(($71+4*$76)&4294967295); //@line 4276 "cPickle.c"
        var $78=HEAP[$obj]; //@line 4276 "cPickle.c"
        HEAP[$77]=$78; //@line 4276 "cPickle.c"
        var $79=((($76) + 1)&4294967295); //@line 4276 "cPickle.c"
        var $80=(($74+8)&4294967295); //@line 4276 "cPickle.c"
        HEAP[$80]=$79; //@line 4276 "cPickle.c"
        HEAP[$0]=0; //@line 4277 "cPickle.c"
        __label__ = 44; break; //@line 4277 "cPickle.c"
      case 17: // $bb16
        var $81=HEAP[_inverted_registry]; //@line 4281 "cPickle.c"
        var $82=HEAP[$py_code]; //@line 4281 "cPickle.c"
        var $83=_PyDict_GetItem($81, $82); //@line 4281 "cPickle.c"
        HEAP[$pair]=$83; //@line 4281 "cPickle.c"
        var $84=HEAP[$pair]; //@line 4282 "cPickle.c"
        var $85=($84)==0; //@line 4282 "cPickle.c"
        if ($85) { __label__ = 18; break; } else { __label__ = 21; break; } //@line 4282 "cPickle.c"
      case 18: // $bb17
        var $86=HEAP[$py_code]; //@line 4283 "cPickle.c"
        var $87=(($86)&4294967295); //@line 4283 "cPickle.c"
        var $88=HEAP[$87]; //@line 4283 "cPickle.c"
        var $89=((($88) - 1)&4294967295); //@line 4283 "cPickle.c"
        var $90=HEAP[$py_code]; //@line 4283 "cPickle.c"
        var $91=(($90)&4294967295); //@line 4283 "cPickle.c"
        HEAP[$91]=$89; //@line 4283 "cPickle.c"
        var $92=HEAP[$py_code]; //@line 4283 "cPickle.c"
        var $93=(($92)&4294967295); //@line 4283 "cPickle.c"
        var $94=HEAP[$93]; //@line 4283 "cPickle.c"
        var $95=((($94))|0)==0; //@line 4283 "cPickle.c"
        if ($95) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 4283 "cPickle.c"
      case 19: // $bb18
        var $96=HEAP[$py_code]; //@line 4283 "cPickle.c"
        var $97=(($96+4)&4294967295); //@line 4283 "cPickle.c"
        var $98=HEAP[$97]; //@line 4283 "cPickle.c"
        var $99=(($98+24)&4294967295); //@line 4283 "cPickle.c"
        var $100=HEAP[$99]; //@line 4283 "cPickle.c"
        var $101=HEAP[$py_code]; //@line 4283 "cPickle.c"
        FUNCTION_TABLE[$100]($101); //@line 4283 "cPickle.c"
        __label__ = 20; break; //@line 4283 "cPickle.c"
      case 20: // $bb19
        var $102=HEAP[_PyExc_ValueError]; //@line 4284 "cPickle.c"
        var $103=HEAP[$code]; //@line 4284 "cPickle.c"
        var $104=_PyErr_Format($102, ((__str95)&4294967295), $103); //@line 4284 "cPickle.c"
        HEAP[$0]=-1; //@line 4286 "cPickle.c"
        __label__ = 44; break; //@line 4286 "cPickle.c"
      case 21: // $bb20
        var $105=HEAP[$pair]; //@line 4291 "cPickle.c"
        var $106=(($105+4)&4294967295); //@line 4291 "cPickle.c"
        var $107=HEAP[$106]; //@line 4291 "cPickle.c"
        var $108=(($107+84)&4294967295); //@line 4291 "cPickle.c"
        var $109=HEAP[$108]; //@line 4291 "cPickle.c"
        var $110=($109) & 67108864; //@line 4291 "cPickle.c"
        var $111=((($110))|0)==0; //@line 4291 "cPickle.c"
        if ($111) { __label__ = 25; break; } else { __label__ = 22; break; } //@line 4291 "cPickle.c"
      case 22: // $bb21
        var $112=HEAP[$pair]; //@line 4291 "cPickle.c"
        var $113=_PyTuple_Size($112); //@line 4291 "cPickle.c"
        var $114=((($113))|0)!=2; //@line 4291 "cPickle.c"
        if ($114) { __label__ = 25; break; } else { __label__ = 23; break; } //@line 4291 "cPickle.c"
      case 23: // $bb22
        var $115=HEAP[$pair]; //@line 4291 "cPickle.c"
        var $116=$115; //@line 4291 "cPickle.c"
        var $117=(($116+12)&4294967295); //@line 4291 "cPickle.c"
        var $118=(($117)&4294967295); //@line 4291 "cPickle.c"
        var $119=HEAP[$118]; //@line 4291 "cPickle.c"
        HEAP[$module_name]=$119; //@line 4291 "cPickle.c"
        var $120=HEAP[$module_name]; //@line 4291 "cPickle.c"
        var $121=(($120+4)&4294967295); //@line 4291 "cPickle.c"
        var $122=HEAP[$121]; //@line 4291 "cPickle.c"
        var $123=(($122+84)&4294967295); //@line 4291 "cPickle.c"
        var $124=HEAP[$123]; //@line 4291 "cPickle.c"
        var $125=($124) & 134217728; //@line 4291 "cPickle.c"
        var $126=((($125))|0)==0; //@line 4291 "cPickle.c"
        if ($126) { __label__ = 25; break; } else { __label__ = 24; break; } //@line 4291 "cPickle.c"
      case 24: // $bb23
        var $127=HEAP[$pair]; //@line 4291 "cPickle.c"
        var $128=$127; //@line 4291 "cPickle.c"
        var $129=(($128+12)&4294967295); //@line 4291 "cPickle.c"
        var $130=(($129+4)&4294967295); //@line 4291 "cPickle.c"
        var $131=HEAP[$130]; //@line 4291 "cPickle.c"
        HEAP[$class_name]=$131; //@line 4291 "cPickle.c"
        var $132=HEAP[$class_name]; //@line 4291 "cPickle.c"
        var $133=(($132+4)&4294967295); //@line 4291 "cPickle.c"
        var $134=HEAP[$133]; //@line 4291 "cPickle.c"
        var $135=(($134+84)&4294967295); //@line 4291 "cPickle.c"
        var $136=HEAP[$135]; //@line 4291 "cPickle.c"
        var $137=($136) & 134217728; //@line 4291 "cPickle.c"
        var $138=((($137))|0)==0; //@line 4291 "cPickle.c"
        if ($138) { __label__ = 25; break; } else { __label__ = 28; break; } //@line 4291 "cPickle.c"
      case 25: // $bb24
        var $139=HEAP[$py_code]; //@line 4294 "cPickle.c"
        var $140=(($139)&4294967295); //@line 4294 "cPickle.c"
        var $141=HEAP[$140]; //@line 4294 "cPickle.c"
        var $142=((($141) - 1)&4294967295); //@line 4294 "cPickle.c"
        var $143=HEAP[$py_code]; //@line 4294 "cPickle.c"
        var $144=(($143)&4294967295); //@line 4294 "cPickle.c"
        HEAP[$144]=$142; //@line 4294 "cPickle.c"
        var $145=HEAP[$py_code]; //@line 4294 "cPickle.c"
        var $146=(($145)&4294967295); //@line 4294 "cPickle.c"
        var $147=HEAP[$146]; //@line 4294 "cPickle.c"
        var $148=((($147))|0)==0; //@line 4294 "cPickle.c"
        if ($148) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 4294 "cPickle.c"
      case 26: // $bb25
        var $149=HEAP[$py_code]; //@line 4294 "cPickle.c"
        var $150=(($149+4)&4294967295); //@line 4294 "cPickle.c"
        var $151=HEAP[$150]; //@line 4294 "cPickle.c"
        var $152=(($151+24)&4294967295); //@line 4294 "cPickle.c"
        var $153=HEAP[$152]; //@line 4294 "cPickle.c"
        var $154=HEAP[$py_code]; //@line 4294 "cPickle.c"
        FUNCTION_TABLE[$153]($154); //@line 4294 "cPickle.c"
        __label__ = 27; break; //@line 4294 "cPickle.c"
      case 27: // $bb26
        var $155=HEAP[_PyExc_ValueError]; //@line 4295 "cPickle.c"
        var $156=HEAP[$code]; //@line 4295 "cPickle.c"
        var $157=_PyErr_Format($155, ((__str96)&4294967295), $156); //@line 4295 "cPickle.c"
        HEAP[$0]=-1; //@line 4297 "cPickle.c"
        __label__ = 44; break; //@line 4297 "cPickle.c"
      case 28: // $bb27
        var $158=HEAP[$self_addr]; //@line 4300 "cPickle.c"
        var $159=(($158+76)&4294967295); //@line 4300 "cPickle.c"
        var $160=HEAP[$159]; //@line 4300 "cPickle.c"
        var $161=HEAP[$module_name]; //@line 4300 "cPickle.c"
        var $162=HEAP[$class_name]; //@line 4300 "cPickle.c"
        var $163=_find_class($161, $162, $160); //@line 4300 "cPickle.c"
        HEAP[$obj]=$163; //@line 4300 "cPickle.c"
        var $164=HEAP[$obj]; //@line 4301 "cPickle.c"
        var $165=($164)==0; //@line 4301 "cPickle.c"
        if ($165) { __label__ = 29; break; } else { __label__ = 32; break; } //@line 4301 "cPickle.c"
      case 29: // $bb28
        var $166=HEAP[$py_code]; //@line 4302 "cPickle.c"
        var $167=(($166)&4294967295); //@line 4302 "cPickle.c"
        var $168=HEAP[$167]; //@line 4302 "cPickle.c"
        var $169=((($168) - 1)&4294967295); //@line 4302 "cPickle.c"
        var $170=HEAP[$py_code]; //@line 4302 "cPickle.c"
        var $171=(($170)&4294967295); //@line 4302 "cPickle.c"
        HEAP[$171]=$169; //@line 4302 "cPickle.c"
        var $172=HEAP[$py_code]; //@line 4302 "cPickle.c"
        var $173=(($172)&4294967295); //@line 4302 "cPickle.c"
        var $174=HEAP[$173]; //@line 4302 "cPickle.c"
        var $175=((($174))|0)==0; //@line 4302 "cPickle.c"
        if ($175) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 4302 "cPickle.c"
      case 30: // $bb29
        var $176=HEAP[$py_code]; //@line 4302 "cPickle.c"
        var $177=(($176+4)&4294967295); //@line 4302 "cPickle.c"
        var $178=HEAP[$177]; //@line 4302 "cPickle.c"
        var $179=(($178+24)&4294967295); //@line 4302 "cPickle.c"
        var $180=HEAP[$179]; //@line 4302 "cPickle.c"
        var $181=HEAP[$py_code]; //@line 4302 "cPickle.c"
        FUNCTION_TABLE[$180]($181); //@line 4302 "cPickle.c"
        __label__ = 31; break; //@line 4302 "cPickle.c"
      case 31: // $bb30
        HEAP[$0]=-1; //@line 4303 "cPickle.c"
        __label__ = 44; break; //@line 4303 "cPickle.c"
      case 32: // $bb31
        var $182=HEAP[_extension_cache]; //@line 4306 "cPickle.c"
        var $183=HEAP[$py_code]; //@line 4306 "cPickle.c"
        var $184=HEAP[$obj]; //@line 4306 "cPickle.c"
        var $185=_PyDict_SetItem($182, $183, $184); //@line 4306 "cPickle.c"
        HEAP[$code]=$185; //@line 4306 "cPickle.c"
        var $186=HEAP[$py_code]; //@line 4307 "cPickle.c"
        var $187=(($186)&4294967295); //@line 4307 "cPickle.c"
        var $188=HEAP[$187]; //@line 4307 "cPickle.c"
        var $189=((($188) - 1)&4294967295); //@line 4307 "cPickle.c"
        var $190=HEAP[$py_code]; //@line 4307 "cPickle.c"
        var $191=(($190)&4294967295); //@line 4307 "cPickle.c"
        HEAP[$191]=$189; //@line 4307 "cPickle.c"
        var $192=HEAP[$py_code]; //@line 4307 "cPickle.c"
        var $193=(($192)&4294967295); //@line 4307 "cPickle.c"
        var $194=HEAP[$193]; //@line 4307 "cPickle.c"
        var $195=((($194))|0)==0; //@line 4307 "cPickle.c"
        if ($195) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 4307 "cPickle.c"
      case 33: // $bb32
        var $196=HEAP[$py_code]; //@line 4307 "cPickle.c"
        var $197=(($196+4)&4294967295); //@line 4307 "cPickle.c"
        var $198=HEAP[$197]; //@line 4307 "cPickle.c"
        var $199=(($198+24)&4294967295); //@line 4307 "cPickle.c"
        var $200=HEAP[$199]; //@line 4307 "cPickle.c"
        var $201=HEAP[$py_code]; //@line 4307 "cPickle.c"
        FUNCTION_TABLE[$200]($201); //@line 4307 "cPickle.c"
        __label__ = 34; break; //@line 4307 "cPickle.c"
      case 34: // $bb33
        var $202=HEAP[$code]; //@line 4308 "cPickle.c"
        var $203=((($202))|0) < 0; //@line 4308 "cPickle.c"
        if ($203) { __label__ = 35; break; } else { __label__ = 38; break; } //@line 4308 "cPickle.c"
      case 35: // $bb34
        var $204=HEAP[$obj]; //@line 4309 "cPickle.c"
        var $205=(($204)&4294967295); //@line 4309 "cPickle.c"
        var $206=HEAP[$205]; //@line 4309 "cPickle.c"
        var $207=((($206) - 1)&4294967295); //@line 4309 "cPickle.c"
        var $208=HEAP[$obj]; //@line 4309 "cPickle.c"
        var $209=(($208)&4294967295); //@line 4309 "cPickle.c"
        HEAP[$209]=$207; //@line 4309 "cPickle.c"
        var $210=HEAP[$obj]; //@line 4309 "cPickle.c"
        var $211=(($210)&4294967295); //@line 4309 "cPickle.c"
        var $212=HEAP[$211]; //@line 4309 "cPickle.c"
        var $213=((($212))|0)==0; //@line 4309 "cPickle.c"
        if ($213) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 4309 "cPickle.c"
      case 36: // $bb35
        var $214=HEAP[$obj]; //@line 4309 "cPickle.c"
        var $215=(($214+4)&4294967295); //@line 4309 "cPickle.c"
        var $216=HEAP[$215]; //@line 4309 "cPickle.c"
        var $217=(($216+24)&4294967295); //@line 4309 "cPickle.c"
        var $218=HEAP[$217]; //@line 4309 "cPickle.c"
        var $219=HEAP[$obj]; //@line 4309 "cPickle.c"
        FUNCTION_TABLE[$218]($219); //@line 4309 "cPickle.c"
        __label__ = 37; break; //@line 4309 "cPickle.c"
      case 37: // $bb36
        HEAP[$0]=-1; //@line 4310 "cPickle.c"
        __label__ = 44; break; //@line 4310 "cPickle.c"
      case 38: // $bb37
        var $220=HEAP[$self_addr]; //@line 4312 "cPickle.c"
        var $221=(($220+32)&4294967295); //@line 4312 "cPickle.c"
        var $222=HEAP[$221]; //@line 4312 "cPickle.c"
        var $223=(($222+8)&4294967295); //@line 4312 "cPickle.c"
        var $224=HEAP[$223]; //@line 4312 "cPickle.c"
        var $225=HEAP[$self_addr]; //@line 4312 "cPickle.c"
        var $226=(($225+32)&4294967295); //@line 4312 "cPickle.c"
        var $227=HEAP[$226]; //@line 4312 "cPickle.c"
        var $228=(($227+12)&4294967295); //@line 4312 "cPickle.c"
        var $229=HEAP[$228]; //@line 4312 "cPickle.c"
        var $230=((($224))|0)==((($229))|0); //@line 4312 "cPickle.c"
        if ($230) { __label__ = 39; break; } else { __label__ = 43; break; } //@line 4312 "cPickle.c"
      case 39: // $bb38
        var $231=HEAP[$self_addr]; //@line 4312 "cPickle.c"
        var $232=(($231+32)&4294967295); //@line 4312 "cPickle.c"
        var $233=HEAP[$232]; //@line 4312 "cPickle.c"
        var $234=_Pdata_grow($233); //@line 4312 "cPickle.c"
        var $235=((($234))|0) < 0; //@line 4312 "cPickle.c"
        if ($235) { __label__ = 40; break; } else { __label__ = 43; break; } //@line 4312 "cPickle.c"
      case 40: // $bb39
        var $236=HEAP[$obj]; //@line 4312 "cPickle.c"
        var $237=(($236)&4294967295); //@line 4312 "cPickle.c"
        var $238=HEAP[$237]; //@line 4312 "cPickle.c"
        var $239=((($238) - 1)&4294967295); //@line 4312 "cPickle.c"
        var $240=HEAP[$obj]; //@line 4312 "cPickle.c"
        var $241=(($240)&4294967295); //@line 4312 "cPickle.c"
        HEAP[$241]=$239; //@line 4312 "cPickle.c"
        var $242=HEAP[$obj]; //@line 4312 "cPickle.c"
        var $243=(($242)&4294967295); //@line 4312 "cPickle.c"
        var $244=HEAP[$243]; //@line 4312 "cPickle.c"
        var $245=((($244))|0)==0; //@line 4312 "cPickle.c"
        if ($245) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 4312 "cPickle.c"
      case 41: // $bb40
        var $246=HEAP[$obj]; //@line 4312 "cPickle.c"
        var $247=(($246+4)&4294967295); //@line 4312 "cPickle.c"
        var $248=HEAP[$247]; //@line 4312 "cPickle.c"
        var $249=(($248+24)&4294967295); //@line 4312 "cPickle.c"
        var $250=HEAP[$249]; //@line 4312 "cPickle.c"
        var $251=HEAP[$obj]; //@line 4312 "cPickle.c"
        FUNCTION_TABLE[$250]($251); //@line 4312 "cPickle.c"
        __label__ = 42; break; //@line 4312 "cPickle.c"
      case 42: // $bb41
        HEAP[$0]=-1; //@line 4312 "cPickle.c"
        __label__ = 44; break; //@line 4312 "cPickle.c"
      case 43: // $bb42
        var $252=HEAP[$self_addr]; //@line 4312 "cPickle.c"
        var $253=(($252+32)&4294967295); //@line 4312 "cPickle.c"
        var $254=HEAP[$253]; //@line 4312 "cPickle.c"
        var $255=(($254+16)&4294967295); //@line 4312 "cPickle.c"
        var $256=HEAP[$255]; //@line 4312 "cPickle.c"
        var $257=HEAP[$self_addr]; //@line 4312 "cPickle.c"
        var $258=(($257+32)&4294967295); //@line 4312 "cPickle.c"
        var $259=HEAP[$258]; //@line 4312 "cPickle.c"
        var $260=(($259+8)&4294967295); //@line 4312 "cPickle.c"
        var $261=HEAP[$260]; //@line 4312 "cPickle.c"
        var $262=(($256+4*$261)&4294967295); //@line 4312 "cPickle.c"
        var $263=HEAP[$obj]; //@line 4312 "cPickle.c"
        HEAP[$262]=$263; //@line 4312 "cPickle.c"
        var $264=((($261) + 1)&4294967295); //@line 4312 "cPickle.c"
        var $265=(($259+8)&4294967295); //@line 4312 "cPickle.c"
        HEAP[$265]=$264; //@line 4312 "cPickle.c"
        HEAP[$0]=0; //@line 4313 "cPickle.c"
        __label__ = 44; break; //@line 4313 "cPickle.c"
      case 44: // $bb43
        var $266=HEAP[$0]; //@line 4261 "cPickle.c"
        HEAP[$retval]=$266; //@line 4261 "cPickle.c"
        __label__ = 45; break; //@line 4261 "cPickle.c"
      case 45: // $return
        var $retval44=HEAP[$retval]; //@line 4261 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval44; //@line 4261 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_put($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $py_str=__stackBase__+12;
        var $value=__stackBase__+16;
        var $len=__stackBase__+20;
        var $l=__stackBase__+24;
        var $s=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$py_str]=0; //@line 4319 "cPickle.c"
        HEAP[$value]=0; //@line 4319 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 4323 "cPickle.c"
        var $2=(($1+64)&4294967295); //@line 4323 "cPickle.c"
        var $3=HEAP[$2]; //@line 4323 "cPickle.c"
        var $4=HEAP[$self_addr]; //@line 4323 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s); //@line 4323 "cPickle.c"
        HEAP[$l]=$5; //@line 4323 "cPickle.c"
        var $6=HEAP[$l]; //@line 4323 "cPickle.c"
        var $7=((($6))|0) < 0; //@line 4323 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4323 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 4323 "cPickle.c"
        __label__ = 11; break; //@line 4323 "cPickle.c"
      case 2: // $bb1
        var $8=HEAP[$l]; //@line 4324 "cPickle.c"
        var $9=((($8))|0) <= 1; //@line 4324 "cPickle.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4324 "cPickle.c"
      case 3: // $bb2
        var $10=_bad_readline(); //@line 4324 "cPickle.c"
        HEAP[$0]=$10; //@line 4324 "cPickle.c"
        __label__ = 11; break; //@line 4324 "cPickle.c"
      case 4: // $bb3
        var $11=HEAP[$self_addr]; //@line 4325 "cPickle.c"
        var $12=(($11+32)&4294967295); //@line 4325 "cPickle.c"
        var $13=HEAP[$12]; //@line 4325 "cPickle.c"
        var $14=(($13+8)&4294967295); //@line 4325 "cPickle.c"
        var $15=HEAP[$14]; //@line 4325 "cPickle.c"
        HEAP[$len]=$15; //@line 4325 "cPickle.c"
        var $16=HEAP[$len]; //@line 4325 "cPickle.c"
        var $17=((($16))|0)==0; //@line 4325 "cPickle.c"
        if ($17) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4325 "cPickle.c"
      case 5: // $bb4
        var $18=_stackUnderflow(); //@line 4325 "cPickle.c"
        HEAP[$0]=$18; //@line 4325 "cPickle.c"
        __label__ = 11; break; //@line 4325 "cPickle.c"
      case 6: // $bb5
        var $19=HEAP[$l]; //@line 4326 "cPickle.c"
        var $20=((($19) - 1)&4294967295); //@line 4326 "cPickle.c"
        var $21=HEAP[$s]; //@line 4326 "cPickle.c"
        var $22=_PyString_FromStringAndSize($21, $20); //@line 4326 "cPickle.c"
        HEAP[$py_str]=$22; //@line 4326 "cPickle.c"
        var $23=HEAP[$py_str]; //@line 4326 "cPickle.c"
        var $24=($23)==0; //@line 4326 "cPickle.c"
        if ($24) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4326 "cPickle.c"
      case 7: // $bb6
        HEAP[$0]=-1; //@line 4326 "cPickle.c"
        __label__ = 11; break; //@line 4326 "cPickle.c"
      case 8: // $bb7
        var $25=HEAP[$self_addr]; //@line 4327 "cPickle.c"
        var $26=(($25+32)&4294967295); //@line 4327 "cPickle.c"
        var $27=HEAP[$26]; //@line 4327 "cPickle.c"
        var $28=(($27+16)&4294967295); //@line 4327 "cPickle.c"
        var $29=HEAP[$28]; //@line 4327 "cPickle.c"
        var $30=HEAP[$len]; //@line 4327 "cPickle.c"
        var $31=((($30) - 1)&4294967295); //@line 4327 "cPickle.c"
        var $32=(($29+4*$31)&4294967295); //@line 4327 "cPickle.c"
        var $33=HEAP[$32]; //@line 4327 "cPickle.c"
        HEAP[$value]=$33; //@line 4327 "cPickle.c"
        var $34=HEAP[$self_addr]; //@line 4328 "cPickle.c"
        var $35=(($34+24)&4294967295); //@line 4328 "cPickle.c"
        var $36=HEAP[$35]; //@line 4328 "cPickle.c"
        var $37=HEAP[$py_str]; //@line 4328 "cPickle.c"
        var $38=HEAP[$value]; //@line 4328 "cPickle.c"
        var $39=_PyDict_SetItem($36, $37, $38); //@line 4328 "cPickle.c"
        HEAP[$l]=$39; //@line 4328 "cPickle.c"
        var $40=HEAP[$py_str]; //@line 4329 "cPickle.c"
        var $41=(($40)&4294967295); //@line 4329 "cPickle.c"
        var $42=HEAP[$41]; //@line 4329 "cPickle.c"
        var $43=((($42) - 1)&4294967295); //@line 4329 "cPickle.c"
        var $44=HEAP[$py_str]; //@line 4329 "cPickle.c"
        var $45=(($44)&4294967295); //@line 4329 "cPickle.c"
        HEAP[$45]=$43; //@line 4329 "cPickle.c"
        var $46=HEAP[$py_str]; //@line 4329 "cPickle.c"
        var $47=(($46)&4294967295); //@line 4329 "cPickle.c"
        var $48=HEAP[$47]; //@line 4329 "cPickle.c"
        var $49=((($48))|0)==0; //@line 4329 "cPickle.c"
        if ($49) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 4329 "cPickle.c"
      case 9: // $bb8
        var $50=HEAP[$py_str]; //@line 4329 "cPickle.c"
        var $51=(($50+4)&4294967295); //@line 4329 "cPickle.c"
        var $52=HEAP[$51]; //@line 4329 "cPickle.c"
        var $53=(($52+24)&4294967295); //@line 4329 "cPickle.c"
        var $54=HEAP[$53]; //@line 4329 "cPickle.c"
        var $55=HEAP[$py_str]; //@line 4329 "cPickle.c"
        FUNCTION_TABLE[$54]($55); //@line 4329 "cPickle.c"
        __label__ = 10; break; //@line 4329 "cPickle.c"
      case 10: // $bb9
        var $56=HEAP[$l]; //@line 4330 "cPickle.c"
        HEAP[$0]=$56; //@line 4330 "cPickle.c"
        __label__ = 11; break; //@line 4330 "cPickle.c"
      case 11: // $bb10
        var $57=HEAP[$0]; //@line 4323 "cPickle.c"
        HEAP[$retval]=$57; //@line 4323 "cPickle.c"
        __label__ = 12; break; //@line 4323 "cPickle.c"
      case 12: // $return
        var $retval11=HEAP[$retval]; //@line 4323 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 4323 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_binput($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 29; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 29);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $py_key=__stackBase__+12;
        var $value=__stackBase__+16;
        var $key=__stackBase__+20;
        var $s=__stackBase__+21;
        var $len=__stackBase__+25;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$py_key]=0; //@line 4337 "cPickle.c"
        HEAP[$value]=0; //@line 4337 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 4342 "cPickle.c"
        var $2=(($1+60)&4294967295); //@line 4342 "cPickle.c"
        var $3=HEAP[$2]; //@line 4342 "cPickle.c"
        var $4=HEAP[$self_addr]; //@line 4342 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s, 1); //@line 4342 "cPickle.c"
        var $6=((($5))|0) < 0; //@line 4342 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4342 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 4342 "cPickle.c"
        __label__ = 9; break; //@line 4342 "cPickle.c"
      case 2: // $bb1
        var $7=HEAP[$self_addr]; //@line 4343 "cPickle.c"
        var $8=(($7+32)&4294967295); //@line 4343 "cPickle.c"
        var $9=HEAP[$8]; //@line 4343 "cPickle.c"
        var $10=(($9+8)&4294967295); //@line 4343 "cPickle.c"
        var $11=HEAP[$10]; //@line 4343 "cPickle.c"
        HEAP[$len]=$11; //@line 4343 "cPickle.c"
        var $12=HEAP[$len]; //@line 4343 "cPickle.c"
        var $13=((($12))|0) <= 0; //@line 4343 "cPickle.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4343 "cPickle.c"
      case 3: // $bb2
        var $14=_stackUnderflow(); //@line 4343 "cPickle.c"
        HEAP[$0]=$14; //@line 4343 "cPickle.c"
        __label__ = 9; break; //@line 4343 "cPickle.c"
      case 4: // $bb3
        var $15=HEAP[$s]; //@line 4345 "cPickle.c"
        var $16=(($15)&4294967295); //@line 4345 "cPickle.c"
        var $17=HEAP[$16]; //@line 4345 "cPickle.c"
        HEAP[$key]=$17; //@line 4345 "cPickle.c"
        var $18=HEAP[$key]; //@line 4347 "cPickle.c"
        var $19=unSign(($18), 8, 0); //@line 4347 "cPickle.c"
        var $20=_PyInt_FromLong($19); //@line 4347 "cPickle.c"
        HEAP[$py_key]=$20; //@line 4347 "cPickle.c"
        var $21=HEAP[$py_key]; //@line 4347 "cPickle.c"
        var $22=($21)==0; //@line 4347 "cPickle.c"
        if ($22) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4347 "cPickle.c"
      case 5: // $bb4
        HEAP[$0]=-1; //@line 4347 "cPickle.c"
        __label__ = 9; break; //@line 4347 "cPickle.c"
      case 6: // $bb5
        var $23=HEAP[$self_addr]; //@line 4348 "cPickle.c"
        var $24=(($23+32)&4294967295); //@line 4348 "cPickle.c"
        var $25=HEAP[$24]; //@line 4348 "cPickle.c"
        var $26=(($25+16)&4294967295); //@line 4348 "cPickle.c"
        var $27=HEAP[$26]; //@line 4348 "cPickle.c"
        var $28=HEAP[$len]; //@line 4348 "cPickle.c"
        var $29=((($28) - 1)&4294967295); //@line 4348 "cPickle.c"
        var $30=(($27+4*$29)&4294967295); //@line 4348 "cPickle.c"
        var $31=HEAP[$30]; //@line 4348 "cPickle.c"
        HEAP[$value]=$31; //@line 4348 "cPickle.c"
        var $32=HEAP[$self_addr]; //@line 4349 "cPickle.c"
        var $33=(($32+24)&4294967295); //@line 4349 "cPickle.c"
        var $34=HEAP[$33]; //@line 4349 "cPickle.c"
        var $35=HEAP[$py_key]; //@line 4349 "cPickle.c"
        var $36=HEAP[$value]; //@line 4349 "cPickle.c"
        var $37=_PyDict_SetItem($34, $35, $36); //@line 4349 "cPickle.c"
        HEAP[$len]=$37; //@line 4349 "cPickle.c"
        var $38=HEAP[$py_key]; //@line 4350 "cPickle.c"
        var $39=(($38)&4294967295); //@line 4350 "cPickle.c"
        var $40=HEAP[$39]; //@line 4350 "cPickle.c"
        var $41=((($40) - 1)&4294967295); //@line 4350 "cPickle.c"
        var $42=HEAP[$py_key]; //@line 4350 "cPickle.c"
        var $43=(($42)&4294967295); //@line 4350 "cPickle.c"
        HEAP[$43]=$41; //@line 4350 "cPickle.c"
        var $44=HEAP[$py_key]; //@line 4350 "cPickle.c"
        var $45=(($44)&4294967295); //@line 4350 "cPickle.c"
        var $46=HEAP[$45]; //@line 4350 "cPickle.c"
        var $47=((($46))|0)==0; //@line 4350 "cPickle.c"
        if ($47) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4350 "cPickle.c"
      case 7: // $bb6
        var $48=HEAP[$py_key]; //@line 4350 "cPickle.c"
        var $49=(($48+4)&4294967295); //@line 4350 "cPickle.c"
        var $50=HEAP[$49]; //@line 4350 "cPickle.c"
        var $51=(($50+24)&4294967295); //@line 4350 "cPickle.c"
        var $52=HEAP[$51]; //@line 4350 "cPickle.c"
        var $53=HEAP[$py_key]; //@line 4350 "cPickle.c"
        FUNCTION_TABLE[$52]($53); //@line 4350 "cPickle.c"
        __label__ = 8; break; //@line 4350 "cPickle.c"
      case 8: // $bb7
        var $54=HEAP[$len]; //@line 4351 "cPickle.c"
        HEAP[$0]=$54; //@line 4351 "cPickle.c"
        __label__ = 9; break; //@line 4351 "cPickle.c"
      case 9: // $bb8
        var $55=HEAP[$0]; //@line 4342 "cPickle.c"
        HEAP[$retval]=$55; //@line 4342 "cPickle.c"
        __label__ = 10; break; //@line 4342 "cPickle.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 4342 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 4342 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_long_binput($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 33; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 33);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $py_key=__stackBase__+12;
        var $value=__stackBase__+16;
        var $key=__stackBase__+20;
        var $c=__stackBase__+24;
        var $s=__stackBase__+25;
        var $len=__stackBase__+29;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$py_key]=0; //@line 4358 "cPickle.c"
        HEAP[$value]=0; //@line 4358 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 4364 "cPickle.c"
        var $2=(($1+60)&4294967295); //@line 4364 "cPickle.c"
        var $3=HEAP[$2]; //@line 4364 "cPickle.c"
        var $4=HEAP[$self_addr]; //@line 4364 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s, 4); //@line 4364 "cPickle.c"
        var $6=((($5))|0) < 0; //@line 4364 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4364 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 4364 "cPickle.c"
        __label__ = 9; break; //@line 4364 "cPickle.c"
      case 2: // $bb1
        var $7=HEAP[$self_addr]; //@line 4365 "cPickle.c"
        var $8=(($7+32)&4294967295); //@line 4365 "cPickle.c"
        var $9=HEAP[$8]; //@line 4365 "cPickle.c"
        var $10=(($9+8)&4294967295); //@line 4365 "cPickle.c"
        var $11=HEAP[$10]; //@line 4365 "cPickle.c"
        HEAP[$len]=$11; //@line 4365 "cPickle.c"
        var $12=HEAP[$len]; //@line 4365 "cPickle.c"
        var $13=((($12))|0)==0; //@line 4365 "cPickle.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4365 "cPickle.c"
      case 3: // $bb2
        var $14=_stackUnderflow(); //@line 4365 "cPickle.c"
        HEAP[$0]=$14; //@line 4365 "cPickle.c"
        __label__ = 9; break; //@line 4365 "cPickle.c"
      case 4: // $bb3
        var $15=HEAP[$s]; //@line 4367 "cPickle.c"
        var $16=(($15)&4294967295); //@line 4367 "cPickle.c"
        var $17=HEAP[$16]; //@line 4367 "cPickle.c"
        HEAP[$c]=$17; //@line 4367 "cPickle.c"
        var $18=HEAP[$c]; //@line 4368 "cPickle.c"
        var $19=unSign(($18), 8, 0); //@line 4368 "cPickle.c"
        HEAP[$key]=$19; //@line 4368 "cPickle.c"
        var $20=HEAP[$s]; //@line 4369 "cPickle.c"
        var $21=(($20+1)&4294967295); //@line 4369 "cPickle.c"
        var $22=HEAP[$21]; //@line 4369 "cPickle.c"
        HEAP[$c]=$22; //@line 4369 "cPickle.c"
        var $23=HEAP[$c]; //@line 4370 "cPickle.c"
        var $24=unSign(($23), 8, 0); //@line 4370 "cPickle.c"
        var $25=($24) << 8; //@line 4370 "cPickle.c"
        var $26=HEAP[$key]; //@line 4370 "cPickle.c"
        var $27=($25) | ($26); //@line 4370 "cPickle.c"
        HEAP[$key]=$27; //@line 4370 "cPickle.c"
        var $28=HEAP[$s]; //@line 4371 "cPickle.c"
        var $29=(($28+2)&4294967295); //@line 4371 "cPickle.c"
        var $30=HEAP[$29]; //@line 4371 "cPickle.c"
        HEAP[$c]=$30; //@line 4371 "cPickle.c"
        var $31=HEAP[$c]; //@line 4372 "cPickle.c"
        var $32=unSign(($31), 8, 0); //@line 4372 "cPickle.c"
        var $33=($32) << 16; //@line 4372 "cPickle.c"
        var $34=HEAP[$key]; //@line 4372 "cPickle.c"
        var $35=($33) | ($34); //@line 4372 "cPickle.c"
        HEAP[$key]=$35; //@line 4372 "cPickle.c"
        var $36=HEAP[$s]; //@line 4373 "cPickle.c"
        var $37=(($36+3)&4294967295); //@line 4373 "cPickle.c"
        var $38=HEAP[$37]; //@line 4373 "cPickle.c"
        HEAP[$c]=$38; //@line 4373 "cPickle.c"
        var $39=HEAP[$c]; //@line 4374 "cPickle.c"
        var $40=unSign(($39), 8, 0); //@line 4374 "cPickle.c"
        var $41=($40) << 24; //@line 4374 "cPickle.c"
        var $42=HEAP[$key]; //@line 4374 "cPickle.c"
        var $43=($41) | ($42); //@line 4374 "cPickle.c"
        HEAP[$key]=$43; //@line 4374 "cPickle.c"
        var $44=HEAP[$key]; //@line 4376 "cPickle.c"
        var $45=_PyInt_FromLong($44); //@line 4376 "cPickle.c"
        HEAP[$py_key]=$45; //@line 4376 "cPickle.c"
        var $46=HEAP[$py_key]; //@line 4376 "cPickle.c"
        var $47=($46)==0; //@line 4376 "cPickle.c"
        if ($47) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4376 "cPickle.c"
      case 5: // $bb4
        HEAP[$0]=-1; //@line 4376 "cPickle.c"
        __label__ = 9; break; //@line 4376 "cPickle.c"
      case 6: // $bb5
        var $48=HEAP[$self_addr]; //@line 4377 "cPickle.c"
        var $49=(($48+32)&4294967295); //@line 4377 "cPickle.c"
        var $50=HEAP[$49]; //@line 4377 "cPickle.c"
        var $51=(($50+16)&4294967295); //@line 4377 "cPickle.c"
        var $52=HEAP[$51]; //@line 4377 "cPickle.c"
        var $53=HEAP[$len]; //@line 4377 "cPickle.c"
        var $54=((($53) - 1)&4294967295); //@line 4377 "cPickle.c"
        var $55=(($52+4*$54)&4294967295); //@line 4377 "cPickle.c"
        var $56=HEAP[$55]; //@line 4377 "cPickle.c"
        HEAP[$value]=$56; //@line 4377 "cPickle.c"
        var $57=HEAP[$self_addr]; //@line 4378 "cPickle.c"
        var $58=(($57+24)&4294967295); //@line 4378 "cPickle.c"
        var $59=HEAP[$58]; //@line 4378 "cPickle.c"
        var $60=HEAP[$py_key]; //@line 4378 "cPickle.c"
        var $61=HEAP[$value]; //@line 4378 "cPickle.c"
        var $62=_PyDict_SetItem($59, $60, $61); //@line 4378 "cPickle.c"
        HEAP[$len]=$62; //@line 4378 "cPickle.c"
        var $63=HEAP[$py_key]; //@line 4379 "cPickle.c"
        var $64=(($63)&4294967295); //@line 4379 "cPickle.c"
        var $65=HEAP[$64]; //@line 4379 "cPickle.c"
        var $66=((($65) - 1)&4294967295); //@line 4379 "cPickle.c"
        var $67=HEAP[$py_key]; //@line 4379 "cPickle.c"
        var $68=(($67)&4294967295); //@line 4379 "cPickle.c"
        HEAP[$68]=$66; //@line 4379 "cPickle.c"
        var $69=HEAP[$py_key]; //@line 4379 "cPickle.c"
        var $70=(($69)&4294967295); //@line 4379 "cPickle.c"
        var $71=HEAP[$70]; //@line 4379 "cPickle.c"
        var $72=((($71))|0)==0; //@line 4379 "cPickle.c"
        if ($72) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4379 "cPickle.c"
      case 7: // $bb6
        var $73=HEAP[$py_key]; //@line 4379 "cPickle.c"
        var $74=(($73+4)&4294967295); //@line 4379 "cPickle.c"
        var $75=HEAP[$74]; //@line 4379 "cPickle.c"
        var $76=(($75+24)&4294967295); //@line 4379 "cPickle.c"
        var $77=HEAP[$76]; //@line 4379 "cPickle.c"
        var $78=HEAP[$py_key]; //@line 4379 "cPickle.c"
        FUNCTION_TABLE[$77]($78); //@line 4379 "cPickle.c"
        __label__ = 8; break; //@line 4379 "cPickle.c"
      case 8: // $bb7
        var $79=HEAP[$len]; //@line 4380 "cPickle.c"
        HEAP[$0]=$79; //@line 4380 "cPickle.c"
        __label__ = 9; break; //@line 4380 "cPickle.c"
      case 9: // $bb8
        var $80=HEAP[$0]; //@line 4364 "cPickle.c"
        HEAP[$retval]=$80; //@line 4364 "cPickle.c"
        __label__ = 10; break; //@line 4364 "cPickle.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 4364 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 4364 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _do_append($self, $x) {
    var __stackBase__  = STACKTOP; STACKTOP += 48; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 48);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $x_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $value=__stackBase__+16;
        var $list=__stackBase__+20;
        var $append_method=__stackBase__+24;
        var $len=__stackBase__+28;
        var $i=__stackBase__+32;
        var $slice=__stackBase__+36;
        var $list_len=__stackBase__+40;
        var $junk=__stackBase__+44;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$x_addr]=$x;
        HEAP[$value]=0; //@line 4387 "cPickle.c"
        HEAP[$list]=0; //@line 4387 "cPickle.c"
        HEAP[$append_method]=0; //@line 4387 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 4390 "cPickle.c"
        var $2=(($1+32)&4294967295); //@line 4390 "cPickle.c"
        var $3=HEAP[$2]; //@line 4390 "cPickle.c"
        var $4=(($3+8)&4294967295); //@line 4390 "cPickle.c"
        var $5=HEAP[$4]; //@line 4390 "cPickle.c"
        HEAP[$len]=$5; //@line 4390 "cPickle.c"
        var $6=HEAP[$len]; //@line 4391 "cPickle.c"
        var $7=HEAP[$x_addr]; //@line 4391 "cPickle.c"
        var $8=((($6))|0) < ((($7))|0); //@line 4391 "cPickle.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 4391 "cPickle.c"
      case 1: // $bb
        var $9=HEAP[$x_addr]; //@line 4391 "cPickle.c"
        var $10=((($9))|0) <= 0; //@line 4391 "cPickle.c"
        if ($10) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 4391 "cPickle.c"
      case 2: // $bb1
        var $11=_stackUnderflow(); //@line 4391 "cPickle.c"
        HEAP[$0]=$11; //@line 4391 "cPickle.c"
        __label__ = 38; break; //@line 4391 "cPickle.c"
      case 3: // $bb2
        var $12=HEAP[$len]; //@line 4393 "cPickle.c"
        var $13=HEAP[$x_addr]; //@line 4393 "cPickle.c"
        var $14=((($12))|0)==((($13))|0); //@line 4393 "cPickle.c"
        if ($14) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4393 "cPickle.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 4393 "cPickle.c"
        __label__ = 38; break; //@line 4393 "cPickle.c"
      case 5: // $bb4
        var $15=HEAP[$self_addr]; //@line 4395 "cPickle.c"
        var $16=(($15+32)&4294967295); //@line 4395 "cPickle.c"
        var $17=HEAP[$16]; //@line 4395 "cPickle.c"
        var $18=(($17+16)&4294967295); //@line 4395 "cPickle.c"
        var $19=HEAP[$18]; //@line 4395 "cPickle.c"
        var $20=HEAP[$x_addr]; //@line 4395 "cPickle.c"
        var $21=((($20) - 1)&4294967295); //@line 4395 "cPickle.c"
        var $22=(($19+4*$21)&4294967295); //@line 4395 "cPickle.c"
        var $23=HEAP[$22]; //@line 4395 "cPickle.c"
        HEAP[$list]=$23; //@line 4395 "cPickle.c"
        var $24=HEAP[$list]; //@line 4397 "cPickle.c"
        var $25=(($24+4)&4294967295); //@line 4397 "cPickle.c"
        var $26=HEAP[$25]; //@line 4397 "cPickle.c"
        var $27=(($26+84)&4294967295); //@line 4397 "cPickle.c"
        var $28=HEAP[$27]; //@line 4397 "cPickle.c"
        var $29=($28) & 33554432; //@line 4397 "cPickle.c"
        var $30=((($29))|0)!=0; //@line 4397 "cPickle.c"
        if ($30) { __label__ = 6; break; } else { __label__ = 11; break; } //@line 4397 "cPickle.c"
      case 6: // $bb5
        var $31=HEAP[$self_addr]; //@line 4401 "cPickle.c"
        var $32=(($31+32)&4294967295); //@line 4401 "cPickle.c"
        var $33=HEAP[$32]; //@line 4401 "cPickle.c"
        var $34=HEAP[$x_addr]; //@line 4401 "cPickle.c"
        var $35=_Pdata_popList($33, $34); //@line 4401 "cPickle.c"
        HEAP[$slice]=$35; //@line 4401 "cPickle.c"
        var $36=HEAP[$slice]; //@line 4402 "cPickle.c"
        var $37=($36)==0; //@line 4402 "cPickle.c"
        if ($37) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4402 "cPickle.c"
      case 7: // $bb6
        HEAP[$0]=-1; //@line 4402 "cPickle.c"
        __label__ = 38; break; //@line 4402 "cPickle.c"
      case 8: // $bb7
        var $38=HEAP[$list]; //@line 4403 "cPickle.c"
        var $39=$38; //@line 4403 "cPickle.c"
        var $40=(($39+8)&4294967295); //@line 4403 "cPickle.c"
        var $41=HEAP[$40]; //@line 4403 "cPickle.c"
        HEAP[$list_len]=$41; //@line 4403 "cPickle.c"
        var $42=HEAP[$list]; //@line 4404 "cPickle.c"
        var $43=HEAP[$list_len]; //@line 4404 "cPickle.c"
        var $44=HEAP[$list_len]; //@line 4404 "cPickle.c"
        var $45=HEAP[$slice]; //@line 4404 "cPickle.c"
        var $46=_PyList_SetSlice($42, $43, $44, $45); //@line 4404 "cPickle.c"
        HEAP[$i]=$46; //@line 4404 "cPickle.c"
        var $47=HEAP[$slice]; //@line 4405 "cPickle.c"
        var $48=(($47)&4294967295); //@line 4405 "cPickle.c"
        var $49=HEAP[$48]; //@line 4405 "cPickle.c"
        var $50=((($49) - 1)&4294967295); //@line 4405 "cPickle.c"
        var $51=HEAP[$slice]; //@line 4405 "cPickle.c"
        var $52=(($51)&4294967295); //@line 4405 "cPickle.c"
        HEAP[$52]=$50; //@line 4405 "cPickle.c"
        var $53=HEAP[$slice]; //@line 4405 "cPickle.c"
        var $54=(($53)&4294967295); //@line 4405 "cPickle.c"
        var $55=HEAP[$54]; //@line 4405 "cPickle.c"
        var $56=((($55))|0)==0; //@line 4405 "cPickle.c"
        if ($56) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 4405 "cPickle.c"
      case 9: // $bb8
        var $57=HEAP[$slice]; //@line 4405 "cPickle.c"
        var $58=(($57+4)&4294967295); //@line 4405 "cPickle.c"
        var $59=HEAP[$58]; //@line 4405 "cPickle.c"
        var $60=(($59+24)&4294967295); //@line 4405 "cPickle.c"
        var $61=HEAP[$60]; //@line 4405 "cPickle.c"
        var $62=HEAP[$slice]; //@line 4405 "cPickle.c"
        FUNCTION_TABLE[$61]($62); //@line 4405 "cPickle.c"
        __label__ = 10; break; //@line 4405 "cPickle.c"
      case 10: // $bb9
        var $63=HEAP[$i]; //@line 4406 "cPickle.c"
        HEAP[$0]=$63; //@line 4406 "cPickle.c"
        __label__ = 38; break; //@line 4406 "cPickle.c"
      case 11: // $bb10
        var $64=HEAP[_append_str]; //@line 4410 "cPickle.c"
        var $65=HEAP[$list]; //@line 4410 "cPickle.c"
        var $66=_PyObject_GetAttr($65, $64); //@line 4410 "cPickle.c"
        HEAP[$append_method]=$66; //@line 4410 "cPickle.c"
        var $67=HEAP[$append_method]; //@line 4410 "cPickle.c"
        var $68=($67)==0; //@line 4410 "cPickle.c"
        if ($68) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 4410 "cPickle.c"
      case 12: // $bb11
        HEAP[$0]=-1; //@line 4411 "cPickle.c"
        __label__ = 38; break; //@line 4411 "cPickle.c"
      case 13: // $bb12
        var $69=HEAP[$x_addr]; //@line 4413 "cPickle.c"
        HEAP[$i]=$69; //@line 4413 "cPickle.c"
        __label__ = 34; break; //@line 4413 "cPickle.c"
      case 14: // $bb13
        var $70=HEAP[$self_addr]; //@line 4416 "cPickle.c"
        var $71=(($70+32)&4294967295); //@line 4416 "cPickle.c"
        var $72=HEAP[$71]; //@line 4416 "cPickle.c"
        var $73=(($72+16)&4294967295); //@line 4416 "cPickle.c"
        var $74=HEAP[$73]; //@line 4416 "cPickle.c"
        var $75=HEAP[$i]; //@line 4416 "cPickle.c"
        var $76=(($74+4*$75)&4294967295); //@line 4416 "cPickle.c"
        var $77=HEAP[$76]; //@line 4416 "cPickle.c"
        HEAP[$value]=$77; //@line 4416 "cPickle.c"
        HEAP[$junk]=0; //@line 4417 "cPickle.c"
        var $78=HEAP[$self_addr]; //@line 4418 "cPickle.c"
        var $79=(($78+28)&4294967295); //@line 4418 "cPickle.c"
        var $80=HEAP[$79]; //@line 4418 "cPickle.c"
        var $81=($80)!=0; //@line 4418 "cPickle.c"
        if ($81) { __label__ = 16; break; } else { __label__ = 15; break; } //@line 4418 "cPickle.c"
      case 15: // $bb14
        var $82=_PyTuple_New(1); //@line 4418 "cPickle.c"
        var $83=HEAP[$self_addr]; //@line 4418 "cPickle.c"
        var $84=(($83+28)&4294967295); //@line 4418 "cPickle.c"
        HEAP[$84]=$82; //@line 4418 "cPickle.c"
        var $85=HEAP[$self_addr]; //@line 4418 "cPickle.c"
        var $86=(($85+28)&4294967295); //@line 4418 "cPickle.c"
        var $87=HEAP[$86]; //@line 4418 "cPickle.c"
        var $88=($87)!=0; //@line 4418 "cPickle.c"
        if ($88) { __label__ = 16; break; } else { __label__ = 20; break; } //@line 4418 "cPickle.c"
      case 16: // $bb15
        var $89=HEAP[$self_addr]; //@line 4418 "cPickle.c"
        var $90=(($89+28)&4294967295); //@line 4418 "cPickle.c"
        var $91=HEAP[$90]; //@line 4418 "cPickle.c"
        var $92=$91; //@line 4418 "cPickle.c"
        var $93=(($92+12)&4294967295); //@line 4418 "cPickle.c"
        var $94=(($93)&4294967295); //@line 4418 "cPickle.c"
        var $95=HEAP[$94]; //@line 4418 "cPickle.c"
        var $96=($95)!=0; //@line 4418 "cPickle.c"
        if ($96) { __label__ = 17; break; } else { __label__ = 19; break; } //@line 4418 "cPickle.c"
      case 17: // $bb16
        var $97=HEAP[$self_addr]; //@line 4418 "cPickle.c"
        var $98=(($97+28)&4294967295); //@line 4418 "cPickle.c"
        var $99=HEAP[$98]; //@line 4418 "cPickle.c"
        var $100=$99; //@line 4418 "cPickle.c"
        var $101=(($100+12)&4294967295); //@line 4418 "cPickle.c"
        var $102=(($101)&4294967295); //@line 4418 "cPickle.c"
        var $103=HEAP[$102]; //@line 4418 "cPickle.c"
        var $104=(($103)&4294967295); //@line 4418 "cPickle.c"
        var $105=HEAP[$104]; //@line 4418 "cPickle.c"
        var $106=((($105) - 1)&4294967295); //@line 4418 "cPickle.c"
        var $107=(($103)&4294967295); //@line 4418 "cPickle.c"
        HEAP[$107]=$106; //@line 4418 "cPickle.c"
        var $108=(($103)&4294967295); //@line 4418 "cPickle.c"
        var $109=HEAP[$108]; //@line 4418 "cPickle.c"
        var $110=((($109))|0)==0; //@line 4418 "cPickle.c"
        if ($110) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 4418 "cPickle.c"
      case 18: // $bb17
        var $111=HEAP[$self_addr]; //@line 4418 "cPickle.c"
        var $112=(($111+28)&4294967295); //@line 4418 "cPickle.c"
        var $113=HEAP[$112]; //@line 4418 "cPickle.c"
        var $114=$113; //@line 4418 "cPickle.c"
        var $115=(($114+12)&4294967295); //@line 4418 "cPickle.c"
        var $116=(($115)&4294967295); //@line 4418 "cPickle.c"
        var $117=HEAP[$116]; //@line 4418 "cPickle.c"
        var $118=(($117+4)&4294967295); //@line 4418 "cPickle.c"
        var $119=HEAP[$118]; //@line 4418 "cPickle.c"
        var $120=(($119+24)&4294967295); //@line 4418 "cPickle.c"
        var $121=HEAP[$120]; //@line 4418 "cPickle.c"
        var $122=HEAP[$self_addr]; //@line 4418 "cPickle.c"
        var $123=(($122+28)&4294967295); //@line 4418 "cPickle.c"
        var $124=HEAP[$123]; //@line 4418 "cPickle.c"
        var $125=$124; //@line 4418 "cPickle.c"
        var $126=(($125+12)&4294967295); //@line 4418 "cPickle.c"
        var $127=(($126)&4294967295); //@line 4418 "cPickle.c"
        var $128=HEAP[$127]; //@line 4418 "cPickle.c"
        FUNCTION_TABLE[$121]($128); //@line 4418 "cPickle.c"
        __label__ = 19; break; //@line 4418 "cPickle.c"
      case 19: // $bb18
        var $129=HEAP[$self_addr]; //@line 4418 "cPickle.c"
        var $130=(($129+28)&4294967295); //@line 4418 "cPickle.c"
        var $131=HEAP[$130]; //@line 4418 "cPickle.c"
        var $132=$131; //@line 4418 "cPickle.c"
        var $133=(($132+12)&4294967295); //@line 4418 "cPickle.c"
        var $134=(($133)&4294967295); //@line 4418 "cPickle.c"
        var $135=HEAP[$value]; //@line 4418 "cPickle.c"
        HEAP[$134]=$135; //@line 4418 "cPickle.c"
        __label__ = 22; break; //@line 4418 "cPickle.c"
      case 20: // $bb19
        var $136=HEAP[$value]; //@line 4418 "cPickle.c"
        var $137=(($136)&4294967295); //@line 4418 "cPickle.c"
        var $138=HEAP[$137]; //@line 4418 "cPickle.c"
        var $139=((($138) - 1)&4294967295); //@line 4418 "cPickle.c"
        var $140=HEAP[$value]; //@line 4418 "cPickle.c"
        var $141=(($140)&4294967295); //@line 4418 "cPickle.c"
        HEAP[$141]=$139; //@line 4418 "cPickle.c"
        var $142=HEAP[$value]; //@line 4418 "cPickle.c"
        var $143=(($142)&4294967295); //@line 4418 "cPickle.c"
        var $144=HEAP[$143]; //@line 4418 "cPickle.c"
        var $145=((($144))|0)==0; //@line 4418 "cPickle.c"
        if ($145) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 4418 "cPickle.c"
      case 21: // $bb20
        var $146=HEAP[$value]; //@line 4418 "cPickle.c"
        var $147=(($146+4)&4294967295); //@line 4418 "cPickle.c"
        var $148=HEAP[$147]; //@line 4418 "cPickle.c"
        var $149=(($148+24)&4294967295); //@line 4418 "cPickle.c"
        var $150=HEAP[$149]; //@line 4418 "cPickle.c"
        var $151=HEAP[$value]; //@line 4418 "cPickle.c"
        FUNCTION_TABLE[$150]($151); //@line 4418 "cPickle.c"
        __label__ = 22; break; //@line 4418 "cPickle.c"
      case 22: // $bb21
        var $152=HEAP[$self_addr]; //@line 4419 "cPickle.c"
        var $153=(($152+28)&4294967295); //@line 4419 "cPickle.c"
        var $154=HEAP[$153]; //@line 4419 "cPickle.c"
        var $155=($154)!=0; //@line 4419 "cPickle.c"
        if ($155) { __label__ = 23; break; } else { __label__ = 27; break; } //@line 4419 "cPickle.c"
      case 23: // $bb22
        var $156=HEAP[$self_addr]; //@line 4420 "cPickle.c"
        var $157=(($156+28)&4294967295); //@line 4420 "cPickle.c"
        var $158=HEAP[$157]; //@line 4420 "cPickle.c"
        var $159=HEAP[$append_method]; //@line 4420 "cPickle.c"
        var $160=_PyObject_Call($159, $158, 0); //@line 4420 "cPickle.c"
        HEAP[$junk]=$160; //@line 4420 "cPickle.c"
        var $161=HEAP[$self_addr]; //@line 4422 "cPickle.c"
        var $162=(($161+28)&4294967295); //@line 4422 "cPickle.c"
        var $163=HEAP[$162]; //@line 4422 "cPickle.c"
        var $164=(($163)&4294967295); //@line 4422 "cPickle.c"
        var $165=HEAP[$164]; //@line 4422 "cPickle.c"
        var $166=((($165))|0) > 1; //@line 4422 "cPickle.c"
        if ($166) { __label__ = 24; break; } else { __label__ = 27; break; } //@line 4422 "cPickle.c"
      case 24: // $bb23
        var $167=HEAP[$self_addr]; //@line 4422 "cPickle.c"
        var $168=(($167+28)&4294967295); //@line 4422 "cPickle.c"
        var $169=HEAP[$168]; //@line 4422 "cPickle.c"
        var $170=(($169)&4294967295); //@line 4422 "cPickle.c"
        var $171=HEAP[$170]; //@line 4422 "cPickle.c"
        var $172=((($171) - 1)&4294967295); //@line 4422 "cPickle.c"
        var $173=(($169)&4294967295); //@line 4422 "cPickle.c"
        HEAP[$173]=$172; //@line 4422 "cPickle.c"
        var $174=(($169)&4294967295); //@line 4422 "cPickle.c"
        var $175=HEAP[$174]; //@line 4422 "cPickle.c"
        var $176=((($175))|0)==0; //@line 4422 "cPickle.c"
        if ($176) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 4422 "cPickle.c"
      case 25: // $bb24
        var $177=HEAP[$self_addr]; //@line 4422 "cPickle.c"
        var $178=(($177+28)&4294967295); //@line 4422 "cPickle.c"
        var $179=HEAP[$178]; //@line 4422 "cPickle.c"
        var $180=(($179+4)&4294967295); //@line 4422 "cPickle.c"
        var $181=HEAP[$180]; //@line 4422 "cPickle.c"
        var $182=(($181+24)&4294967295); //@line 4422 "cPickle.c"
        var $183=HEAP[$182]; //@line 4422 "cPickle.c"
        var $184=HEAP[$self_addr]; //@line 4422 "cPickle.c"
        var $185=(($184+28)&4294967295); //@line 4422 "cPickle.c"
        var $186=HEAP[$185]; //@line 4422 "cPickle.c"
        FUNCTION_TABLE[$183]($186); //@line 4422 "cPickle.c"
        __label__ = 26; break; //@line 4422 "cPickle.c"
      case 26: // $bb25
        var $187=HEAP[$self_addr]; //@line 4422 "cPickle.c"
        var $188=(($187+28)&4294967295); //@line 4422 "cPickle.c"
        HEAP[$188]=0; //@line 4422 "cPickle.c"
        __label__ = 27; break; //@line 4422 "cPickle.c"
      case 27: // $bb26
        var $189=HEAP[$junk]; //@line 4424 "cPickle.c"
        var $190=($189)==0; //@line 4424 "cPickle.c"
        if ($190) { __label__ = 28; break; } else { __label__ = 31; break; } //@line 4424 "cPickle.c"
      case 28: // $bb27
        var $191=HEAP[$i]; //@line 4425 "cPickle.c"
        var $192=((($191) + 1)&4294967295); //@line 4425 "cPickle.c"
        var $193=HEAP[$self_addr]; //@line 4425 "cPickle.c"
        var $194=(($193+32)&4294967295); //@line 4425 "cPickle.c"
        var $195=HEAP[$194]; //@line 4425 "cPickle.c"
        var $196=_Pdata_clear($195, $192); //@line 4425 "cPickle.c"
        var $197=HEAP[$self_addr]; //@line 4426 "cPickle.c"
        var $198=(($197+32)&4294967295); //@line 4426 "cPickle.c"
        var $199=HEAP[$198]; //@line 4426 "cPickle.c"
        var $200=(($199+8)&4294967295); //@line 4426 "cPickle.c"
        var $201=HEAP[$x_addr]; //@line 4426 "cPickle.c"
        HEAP[$200]=$201; //@line 4426 "cPickle.c"
        var $202=HEAP[$append_method]; //@line 4427 "cPickle.c"
        var $203=(($202)&4294967295); //@line 4427 "cPickle.c"
        var $204=HEAP[$203]; //@line 4427 "cPickle.c"
        var $205=((($204) - 1)&4294967295); //@line 4427 "cPickle.c"
        var $206=HEAP[$append_method]; //@line 4427 "cPickle.c"
        var $207=(($206)&4294967295); //@line 4427 "cPickle.c"
        HEAP[$207]=$205; //@line 4427 "cPickle.c"
        var $208=HEAP[$append_method]; //@line 4427 "cPickle.c"
        var $209=(($208)&4294967295); //@line 4427 "cPickle.c"
        var $210=HEAP[$209]; //@line 4427 "cPickle.c"
        var $211=((($210))|0)==0; //@line 4427 "cPickle.c"
        if ($211) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 4427 "cPickle.c"
      case 29: // $bb28
        var $212=HEAP[$append_method]; //@line 4427 "cPickle.c"
        var $213=(($212+4)&4294967295); //@line 4427 "cPickle.c"
        var $214=HEAP[$213]; //@line 4427 "cPickle.c"
        var $215=(($214+24)&4294967295); //@line 4427 "cPickle.c"
        var $216=HEAP[$215]; //@line 4427 "cPickle.c"
        var $217=HEAP[$append_method]; //@line 4427 "cPickle.c"
        FUNCTION_TABLE[$216]($217); //@line 4427 "cPickle.c"
        __label__ = 30; break; //@line 4427 "cPickle.c"
      case 30: // $bb29
        HEAP[$0]=-1; //@line 4428 "cPickle.c"
        __label__ = 38; break; //@line 4428 "cPickle.c"
      case 31: // $bb30
        var $218=HEAP[$junk]; //@line 4430 "cPickle.c"
        var $219=(($218)&4294967295); //@line 4430 "cPickle.c"
        var $220=HEAP[$219]; //@line 4430 "cPickle.c"
        var $221=((($220) - 1)&4294967295); //@line 4430 "cPickle.c"
        var $222=HEAP[$junk]; //@line 4430 "cPickle.c"
        var $223=(($222)&4294967295); //@line 4430 "cPickle.c"
        HEAP[$223]=$221; //@line 4430 "cPickle.c"
        var $224=HEAP[$junk]; //@line 4430 "cPickle.c"
        var $225=(($224)&4294967295); //@line 4430 "cPickle.c"
        var $226=HEAP[$225]; //@line 4430 "cPickle.c"
        var $227=((($226))|0)==0; //@line 4430 "cPickle.c"
        if ($227) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 4430 "cPickle.c"
      case 32: // $bb31
        var $228=HEAP[$junk]; //@line 4430 "cPickle.c"
        var $229=(($228+4)&4294967295); //@line 4430 "cPickle.c"
        var $230=HEAP[$229]; //@line 4430 "cPickle.c"
        var $231=(($230+24)&4294967295); //@line 4430 "cPickle.c"
        var $232=HEAP[$231]; //@line 4430 "cPickle.c"
        var $233=HEAP[$junk]; //@line 4430 "cPickle.c"
        FUNCTION_TABLE[$232]($233); //@line 4430 "cPickle.c"
        __label__ = 33; break; //@line 4430 "cPickle.c"
      case 33: // $bb32
        var $234=HEAP[$i]; //@line 4413 "cPickle.c"
        var $235=((($234) + 1)&4294967295); //@line 4413 "cPickle.c"
        HEAP[$i]=$235; //@line 4413 "cPickle.c"
        __label__ = 34; break; //@line 4413 "cPickle.c"
      case 34: // $bb33
        var $236=HEAP[$i]; //@line 4413 "cPickle.c"
        var $237=HEAP[$len]; //@line 4413 "cPickle.c"
        var $238=((($236))|0) < ((($237))|0); //@line 4413 "cPickle.c"
        if ($238) { __label__ = 14; break; } else { __label__ = 35; break; } //@line 4413 "cPickle.c"
      case 35: // $bb34
        var $239=HEAP[$self_addr]; //@line 4432 "cPickle.c"
        var $240=(($239+32)&4294967295); //@line 4432 "cPickle.c"
        var $241=HEAP[$240]; //@line 4432 "cPickle.c"
        var $242=(($241+8)&4294967295); //@line 4432 "cPickle.c"
        var $243=HEAP[$x_addr]; //@line 4432 "cPickle.c"
        HEAP[$242]=$243; //@line 4432 "cPickle.c"
        var $244=HEAP[$append_method]; //@line 4433 "cPickle.c"
        var $245=(($244)&4294967295); //@line 4433 "cPickle.c"
        var $246=HEAP[$245]; //@line 4433 "cPickle.c"
        var $247=((($246) - 1)&4294967295); //@line 4433 "cPickle.c"
        var $248=HEAP[$append_method]; //@line 4433 "cPickle.c"
        var $249=(($248)&4294967295); //@line 4433 "cPickle.c"
        HEAP[$249]=$247; //@line 4433 "cPickle.c"
        var $250=HEAP[$append_method]; //@line 4433 "cPickle.c"
        var $251=(($250)&4294967295); //@line 4433 "cPickle.c"
        var $252=HEAP[$251]; //@line 4433 "cPickle.c"
        var $253=((($252))|0)==0; //@line 4433 "cPickle.c"
        if ($253) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 4433 "cPickle.c"
      case 36: // $bb35
        var $254=HEAP[$append_method]; //@line 4433 "cPickle.c"
        var $255=(($254+4)&4294967295); //@line 4433 "cPickle.c"
        var $256=HEAP[$255]; //@line 4433 "cPickle.c"
        var $257=(($256+24)&4294967295); //@line 4433 "cPickle.c"
        var $258=HEAP[$257]; //@line 4433 "cPickle.c"
        var $259=HEAP[$append_method]; //@line 4433 "cPickle.c"
        FUNCTION_TABLE[$258]($259); //@line 4433 "cPickle.c"
        __label__ = 37; break; //@line 4433 "cPickle.c"
      case 37: // $bb36
        HEAP[$0]=0; //@line 4436 "cPickle.c"
        __label__ = 38; break; //@line 4436 "cPickle.c"
      case 38: // $bb37
        var $260=HEAP[$0]; //@line 4391 "cPickle.c"
        HEAP[$retval]=$260; //@line 4391 "cPickle.c"
        __label__ = 39; break; //@line 4391 "cPickle.c"
      case 39: // $return
        var $retval38=HEAP[$retval]; //@line 4391 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval38; //@line 4391 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_append($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 4443 "cPickle.c"
        var $2=(($1+32)&4294967295); //@line 4443 "cPickle.c"
        var $3=HEAP[$2]; //@line 4443 "cPickle.c"
        var $4=(($3+8)&4294967295); //@line 4443 "cPickle.c"
        var $5=HEAP[$4]; //@line 4443 "cPickle.c"
        var $6=((($5) - 1)&4294967295); //@line 4443 "cPickle.c"
        var $7=HEAP[$self_addr]; //@line 4443 "cPickle.c"
        var $8=_do_append($7, $6); //@line 4443 "cPickle.c"
        HEAP[$0]=$8; //@line 4443 "cPickle.c"
        var $9=HEAP[$0]; //@line 4443 "cPickle.c"
        HEAP[$retval]=$9; //@line 4443 "cPickle.c"
        __label__ = 1; break; //@line 4443 "cPickle.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 4443 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 4443 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_appends($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 4450 "cPickle.c"
        var $2=_marker($1); //@line 4450 "cPickle.c"
        var $3=HEAP[$self_addr]; //@line 4450 "cPickle.c"
        var $4=_do_append($3, $2); //@line 4450 "cPickle.c"
        HEAP[$0]=$4; //@line 4450 "cPickle.c"
        var $5=HEAP[$0]; //@line 4450 "cPickle.c"
        HEAP[$retval]=$5; //@line 4450 "cPickle.c"
        __label__ = 1; break; //@line 4450 "cPickle.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 4450 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 4450 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _do_setitems($self, $x) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $x_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $value=__stackBase__+16;
        var $key=__stackBase__+20;
        var $dict=__stackBase__+24;
        var $len=__stackBase__+28;
        var $i=__stackBase__+32;
        var $r=__stackBase__+36;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$x_addr]=$x;
        HEAP[$value]=0; //@line 4457 "cPickle.c"
        HEAP[$key]=0; //@line 4457 "cPickle.c"
        HEAP[$dict]=0; //@line 4457 "cPickle.c"
        HEAP[$r]=0; //@line 4458 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 4460 "cPickle.c"
        var $2=(($1+32)&4294967295); //@line 4460 "cPickle.c"
        var $3=HEAP[$2]; //@line 4460 "cPickle.c"
        var $4=(($3+8)&4294967295); //@line 4460 "cPickle.c"
        var $5=HEAP[$4]; //@line 4460 "cPickle.c"
        HEAP[$len]=$5; //@line 4460 "cPickle.c"
        var $6=HEAP[$len]; //@line 4460 "cPickle.c"
        var $7=HEAP[$x_addr]; //@line 4460 "cPickle.c"
        var $8=((($6))|0) < ((($7))|0); //@line 4460 "cPickle.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 4460 "cPickle.c"
      case 1: // $bb
        var $9=HEAP[$x_addr]; //@line 4460 "cPickle.c"
        var $10=((($9))|0) <= 0; //@line 4460 "cPickle.c"
        if ($10) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 4460 "cPickle.c"
      case 2: // $bb1
        var $11=_stackUnderflow(); //@line 4461 "cPickle.c"
        HEAP[$0]=$11; //@line 4461 "cPickle.c"
        __label__ = 9; break; //@line 4461 "cPickle.c"
      case 3: // $bb2
        var $12=HEAP[$self_addr]; //@line 4463 "cPickle.c"
        var $13=(($12+32)&4294967295); //@line 4463 "cPickle.c"
        var $14=HEAP[$13]; //@line 4463 "cPickle.c"
        var $15=(($14+16)&4294967295); //@line 4463 "cPickle.c"
        var $16=HEAP[$15]; //@line 4463 "cPickle.c"
        var $17=HEAP[$x_addr]; //@line 4463 "cPickle.c"
        var $18=((($17) - 1)&4294967295); //@line 4463 "cPickle.c"
        var $19=(($16+4*$18)&4294967295); //@line 4463 "cPickle.c"
        var $20=HEAP[$19]; //@line 4463 "cPickle.c"
        HEAP[$dict]=$20; //@line 4463 "cPickle.c"
        var $21=HEAP[$x_addr]; //@line 4465 "cPickle.c"
        var $22=((($21) + 1)&4294967295); //@line 4465 "cPickle.c"
        HEAP[$i]=$22; //@line 4465 "cPickle.c"
        __label__ = 7; break; //@line 4465 "cPickle.c"
      case 4: // $bb3
        var $23=HEAP[$self_addr]; //@line 4466 "cPickle.c"
        var $24=(($23+32)&4294967295); //@line 4466 "cPickle.c"
        var $25=HEAP[$24]; //@line 4466 "cPickle.c"
        var $26=(($25+16)&4294967295); //@line 4466 "cPickle.c"
        var $27=HEAP[$26]; //@line 4466 "cPickle.c"
        var $28=HEAP[$i]; //@line 4466 "cPickle.c"
        var $29=((($28) - 1)&4294967295); //@line 4466 "cPickle.c"
        var $30=(($27+4*$29)&4294967295); //@line 4466 "cPickle.c"
        var $31=HEAP[$30]; //@line 4466 "cPickle.c"
        HEAP[$key]=$31; //@line 4466 "cPickle.c"
        var $32=HEAP[$self_addr]; //@line 4467 "cPickle.c"
        var $33=(($32+32)&4294967295); //@line 4467 "cPickle.c"
        var $34=HEAP[$33]; //@line 4467 "cPickle.c"
        var $35=(($34+16)&4294967295); //@line 4467 "cPickle.c"
        var $36=HEAP[$35]; //@line 4467 "cPickle.c"
        var $37=HEAP[$i]; //@line 4467 "cPickle.c"
        var $38=(($36+4*$37)&4294967295); //@line 4467 "cPickle.c"
        var $39=HEAP[$38]; //@line 4467 "cPickle.c"
        HEAP[$value]=$39; //@line 4467 "cPickle.c"
        var $40=HEAP[$dict]; //@line 4468 "cPickle.c"
        var $41=HEAP[$key]; //@line 4468 "cPickle.c"
        var $42=HEAP[$value]; //@line 4468 "cPickle.c"
        var $43=_PyObject_SetItem($40, $41, $42); //@line 4468 "cPickle.c"
        var $44=((($43))|0) < 0; //@line 4468 "cPickle.c"
        if ($44) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4468 "cPickle.c"
      case 5: // $bb4
        HEAP[$r]=-1; //@line 4469 "cPickle.c"
        __label__ = 8; break; //@line 4469 "cPickle.c"
      case 6: // $bb5
        var $45=HEAP[$i]; //@line 4465 "cPickle.c"
        var $46=((($45) + 2)&4294967295); //@line 4465 "cPickle.c"
        HEAP[$i]=$46; //@line 4465 "cPickle.c"
        __label__ = 7; break; //@line 4465 "cPickle.c"
      case 7: // $bb6
        var $47=HEAP[$i]; //@line 4465 "cPickle.c"
        var $48=HEAP[$len]; //@line 4465 "cPickle.c"
        var $49=((($47))|0) < ((($48))|0); //@line 4465 "cPickle.c"
        if ($49) { __label__ = 4; break; } else { __label__ = 8; break; } //@line 4465 "cPickle.c"
      case 8: // $bb7
        var $50=HEAP[$self_addr]; //@line 4474 "cPickle.c"
        var $51=(($50+32)&4294967295); //@line 4474 "cPickle.c"
        var $52=HEAP[$51]; //@line 4474 "cPickle.c"
        var $53=HEAP[$x_addr]; //@line 4474 "cPickle.c"
        var $54=_Pdata_clear($52, $53); //@line 4474 "cPickle.c"
        var $55=HEAP[$r]; //@line 4476 "cPickle.c"
        HEAP[$0]=$55; //@line 4476 "cPickle.c"
        __label__ = 9; break; //@line 4476 "cPickle.c"
      case 9: // $bb8
        var $56=HEAP[$0]; //@line 4461 "cPickle.c"
        HEAP[$retval]=$56; //@line 4461 "cPickle.c"
        __label__ = 10; break; //@line 4461 "cPickle.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 4461 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 4461 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_setitem($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 4483 "cPickle.c"
        var $2=(($1+32)&4294967295); //@line 4483 "cPickle.c"
        var $3=HEAP[$2]; //@line 4483 "cPickle.c"
        var $4=(($3+8)&4294967295); //@line 4483 "cPickle.c"
        var $5=HEAP[$4]; //@line 4483 "cPickle.c"
        var $6=((($5) - 2)&4294967295); //@line 4483 "cPickle.c"
        var $7=HEAP[$self_addr]; //@line 4483 "cPickle.c"
        var $8=_do_setitems($7, $6); //@line 4483 "cPickle.c"
        HEAP[$0]=$8; //@line 4483 "cPickle.c"
        var $9=HEAP[$0]; //@line 4483 "cPickle.c"
        HEAP[$retval]=$9; //@line 4483 "cPickle.c"
        __label__ = 1; break; //@line 4483 "cPickle.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 4483 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 4483 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_setitems($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 4489 "cPickle.c"
        var $2=_marker($1); //@line 4489 "cPickle.c"
        var $3=HEAP[$self_addr]; //@line 4489 "cPickle.c"
        var $4=_do_setitems($3, $2); //@line 4489 "cPickle.c"
        HEAP[$0]=$4; //@line 4489 "cPickle.c"
        var $5=HEAP[$0]; //@line 4489 "cPickle.c"
        HEAP[$retval]=$5; //@line 4489 "cPickle.c"
        __label__ = 1; break; //@line 4489 "cPickle.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 4489 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 4489 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_build($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 56; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 56);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $state=__stackBase__+12;
        var $inst=__stackBase__+16;
        var $slotstate=__stackBase__+20;
        var $__setstate__=__stackBase__+24;
        var $d_key=__stackBase__+28;
        var $d_value=__stackBase__+32;
        var $i=__stackBase__+36;
        var $res=__stackBase__+40;
        var $junk=__stackBase__+44;
        var $temp=__stackBase__+48;
        var $dict=__stackBase__+52;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$res]=-1; //@line 4500 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 4505 "cPickle.c"
        var $2=(($1+32)&4294967295); //@line 4505 "cPickle.c"
        var $3=HEAP[$2]; //@line 4505 "cPickle.c"
        var $4=(($3+8)&4294967295); //@line 4505 "cPickle.c"
        var $5=HEAP[$4]; //@line 4505 "cPickle.c"
        var $6=((($5))|0) <= 1; //@line 4505 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4505 "cPickle.c"
      case 1: // $bb
        var $7=_stackUnderflow(); //@line 4506 "cPickle.c"
        HEAP[$0]=$7; //@line 4506 "cPickle.c"
        __label__ = 65; break; //@line 4506 "cPickle.c"
      case 2: // $bb1
        var $8=HEAP[$self_addr]; //@line 4507 "cPickle.c"
        var $9=(($8+32)&4294967295); //@line 4507 "cPickle.c"
        var $10=HEAP[$9]; //@line 4507 "cPickle.c"
        var $11=(($10+8)&4294967295); //@line 4507 "cPickle.c"
        var $12=HEAP[$11]; //@line 4507 "cPickle.c"
        var $13=((($12))|0)!=0; //@line 4507 "cPickle.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4507 "cPickle.c"
      case 3: // $bb2
        var $14=HEAP[$self_addr]; //@line 4507 "cPickle.c"
        var $15=(($14+32)&4294967295); //@line 4507 "cPickle.c"
        var $16=HEAP[$15]; //@line 4507 "cPickle.c"
        var $17=(($16+16)&4294967295); //@line 4507 "cPickle.c"
        var $18=HEAP[$17]; //@line 4507 "cPickle.c"
        var $19=HEAP[$self_addr]; //@line 4507 "cPickle.c"
        var $20=(($19+32)&4294967295); //@line 4507 "cPickle.c"
        var $21=HEAP[$20]; //@line 4507 "cPickle.c"
        var $22=(($21+8)&4294967295); //@line 4507 "cPickle.c"
        var $23=HEAP[$22]; //@line 4507 "cPickle.c"
        var $24=((($23) - 1)&4294967295); //@line 4507 "cPickle.c"
        var $25=(($21+8)&4294967295); //@line 4507 "cPickle.c"
        HEAP[$25]=$24; //@line 4507 "cPickle.c"
        var $26=(($21+8)&4294967295); //@line 4507 "cPickle.c"
        var $27=HEAP[$26]; //@line 4507 "cPickle.c"
        var $28=(($18+4*$27)&4294967295); //@line 4507 "cPickle.c"
        var $29=HEAP[$28]; //@line 4507 "cPickle.c"
        HEAP[$state]=$29; //@line 4507 "cPickle.c"
        __label__ = 5; break; //@line 4507 "cPickle.c"
      case 4: // $bb3
        var $30=HEAP[_UnpicklingError]; //@line 4507 "cPickle.c"
        _PyErr_SetString($30, ((__str88)&4294967295)); //@line 4507 "cPickle.c"
        HEAP[$state]=0; //@line 4507 "cPickle.c"
        __label__ = 5; break; //@line 4507 "cPickle.c"
      case 5: // $bb4
        var $31=HEAP[$state]; //@line 4508 "cPickle.c"
        var $32=($31)==0; //@line 4508 "cPickle.c"
        if ($32) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 4508 "cPickle.c"
      case 6: // $bb5
        HEAP[$0]=-1; //@line 4509 "cPickle.c"
        __label__ = 65; break; //@line 4509 "cPickle.c"
      case 7: // $bb6
        var $33=HEAP[$self_addr]; //@line 4510 "cPickle.c"
        var $34=(($33+32)&4294967295); //@line 4510 "cPickle.c"
        var $35=HEAP[$34]; //@line 4510 "cPickle.c"
        var $36=(($35+16)&4294967295); //@line 4510 "cPickle.c"
        var $37=HEAP[$36]; //@line 4510 "cPickle.c"
        var $38=HEAP[$self_addr]; //@line 4510 "cPickle.c"
        var $39=(($38+32)&4294967295); //@line 4510 "cPickle.c"
        var $40=HEAP[$39]; //@line 4510 "cPickle.c"
        var $41=(($40+8)&4294967295); //@line 4510 "cPickle.c"
        var $42=HEAP[$41]; //@line 4510 "cPickle.c"
        var $43=((($42) - 1)&4294967295); //@line 4510 "cPickle.c"
        var $44=(($37+4*$43)&4294967295); //@line 4510 "cPickle.c"
        var $45=HEAP[$44]; //@line 4510 "cPickle.c"
        HEAP[$inst]=$45; //@line 4510 "cPickle.c"
        var $46=HEAP[___setstate___str]; //@line 4512 "cPickle.c"
        var $47=HEAP[$inst]; //@line 4512 "cPickle.c"
        var $48=_PyObject_GetAttr($47, $46); //@line 4512 "cPickle.c"
        HEAP[$__setstate__]=$48; //@line 4512 "cPickle.c"
        var $49=HEAP[$__setstate__]; //@line 4513 "cPickle.c"
        var $50=($49)!=0; //@line 4513 "cPickle.c"
        if ($50) { __label__ = 8; break; } else { __label__ = 28; break; } //@line 4513 "cPickle.c"
      case 8: // $bb7
        HEAP[$junk]=0; //@line 4514 "cPickle.c"
        var $51=HEAP[$self_addr]; //@line 4517 "cPickle.c"
        var $52=(($51+28)&4294967295); //@line 4517 "cPickle.c"
        var $53=HEAP[$52]; //@line 4517 "cPickle.c"
        var $54=($53)!=0; //@line 4517 "cPickle.c"
        if ($54) { __label__ = 10; break; } else { __label__ = 9; break; } //@line 4517 "cPickle.c"
      case 9: // $bb8
        var $55=_PyTuple_New(1); //@line 4517 "cPickle.c"
        var $56=HEAP[$self_addr]; //@line 4517 "cPickle.c"
        var $57=(($56+28)&4294967295); //@line 4517 "cPickle.c"
        HEAP[$57]=$55; //@line 4517 "cPickle.c"
        var $58=HEAP[$self_addr]; //@line 4517 "cPickle.c"
        var $59=(($58+28)&4294967295); //@line 4517 "cPickle.c"
        var $60=HEAP[$59]; //@line 4517 "cPickle.c"
        var $61=($60)!=0; //@line 4517 "cPickle.c"
        if ($61) { __label__ = 10; break; } else { __label__ = 14; break; } //@line 4517 "cPickle.c"
      case 10: // $bb9
        var $62=HEAP[$self_addr]; //@line 4517 "cPickle.c"
        var $63=(($62+28)&4294967295); //@line 4517 "cPickle.c"
        var $64=HEAP[$63]; //@line 4517 "cPickle.c"
        var $65=$64; //@line 4517 "cPickle.c"
        var $66=(($65+12)&4294967295); //@line 4517 "cPickle.c"
        var $67=(($66)&4294967295); //@line 4517 "cPickle.c"
        var $68=HEAP[$67]; //@line 4517 "cPickle.c"
        var $69=($68)!=0; //@line 4517 "cPickle.c"
        if ($69) { __label__ = 11; break; } else { __label__ = 13; break; } //@line 4517 "cPickle.c"
      case 11: // $bb10
        var $70=HEAP[$self_addr]; //@line 4517 "cPickle.c"
        var $71=(($70+28)&4294967295); //@line 4517 "cPickle.c"
        var $72=HEAP[$71]; //@line 4517 "cPickle.c"
        var $73=$72; //@line 4517 "cPickle.c"
        var $74=(($73+12)&4294967295); //@line 4517 "cPickle.c"
        var $75=(($74)&4294967295); //@line 4517 "cPickle.c"
        var $76=HEAP[$75]; //@line 4517 "cPickle.c"
        var $77=(($76)&4294967295); //@line 4517 "cPickle.c"
        var $78=HEAP[$77]; //@line 4517 "cPickle.c"
        var $79=((($78) - 1)&4294967295); //@line 4517 "cPickle.c"
        var $80=(($76)&4294967295); //@line 4517 "cPickle.c"
        HEAP[$80]=$79; //@line 4517 "cPickle.c"
        var $81=(($76)&4294967295); //@line 4517 "cPickle.c"
        var $82=HEAP[$81]; //@line 4517 "cPickle.c"
        var $83=((($82))|0)==0; //@line 4517 "cPickle.c"
        if ($83) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 4517 "cPickle.c"
      case 12: // $bb11
        var $84=HEAP[$self_addr]; //@line 4517 "cPickle.c"
        var $85=(($84+28)&4294967295); //@line 4517 "cPickle.c"
        var $86=HEAP[$85]; //@line 4517 "cPickle.c"
        var $87=$86; //@line 4517 "cPickle.c"
        var $88=(($87+12)&4294967295); //@line 4517 "cPickle.c"
        var $89=(($88)&4294967295); //@line 4517 "cPickle.c"
        var $90=HEAP[$89]; //@line 4517 "cPickle.c"
        var $91=(($90+4)&4294967295); //@line 4517 "cPickle.c"
        var $92=HEAP[$91]; //@line 4517 "cPickle.c"
        var $93=(($92+24)&4294967295); //@line 4517 "cPickle.c"
        var $94=HEAP[$93]; //@line 4517 "cPickle.c"
        var $95=HEAP[$self_addr]; //@line 4517 "cPickle.c"
        var $96=(($95+28)&4294967295); //@line 4517 "cPickle.c"
        var $97=HEAP[$96]; //@line 4517 "cPickle.c"
        var $98=$97; //@line 4517 "cPickle.c"
        var $99=(($98+12)&4294967295); //@line 4517 "cPickle.c"
        var $100=(($99)&4294967295); //@line 4517 "cPickle.c"
        var $101=HEAP[$100]; //@line 4517 "cPickle.c"
        FUNCTION_TABLE[$94]($101); //@line 4517 "cPickle.c"
        __label__ = 13; break; //@line 4517 "cPickle.c"
      case 13: // $bb12
        var $102=HEAP[$self_addr]; //@line 4517 "cPickle.c"
        var $103=(($102+28)&4294967295); //@line 4517 "cPickle.c"
        var $104=HEAP[$103]; //@line 4517 "cPickle.c"
        var $105=$104; //@line 4517 "cPickle.c"
        var $106=(($105+12)&4294967295); //@line 4517 "cPickle.c"
        var $107=(($106)&4294967295); //@line 4517 "cPickle.c"
        var $108=HEAP[$state]; //@line 4517 "cPickle.c"
        HEAP[$107]=$108; //@line 4517 "cPickle.c"
        __label__ = 16; break; //@line 4517 "cPickle.c"
      case 14: // $bb13
        var $109=HEAP[$state]; //@line 4517 "cPickle.c"
        var $110=(($109)&4294967295); //@line 4517 "cPickle.c"
        var $111=HEAP[$110]; //@line 4517 "cPickle.c"
        var $112=((($111) - 1)&4294967295); //@line 4517 "cPickle.c"
        var $113=HEAP[$state]; //@line 4517 "cPickle.c"
        var $114=(($113)&4294967295); //@line 4517 "cPickle.c"
        HEAP[$114]=$112; //@line 4517 "cPickle.c"
        var $115=HEAP[$state]; //@line 4517 "cPickle.c"
        var $116=(($115)&4294967295); //@line 4517 "cPickle.c"
        var $117=HEAP[$116]; //@line 4517 "cPickle.c"
        var $118=((($117))|0)==0; //@line 4517 "cPickle.c"
        if ($118) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 4517 "cPickle.c"
      case 15: // $bb14
        var $119=HEAP[$state]; //@line 4517 "cPickle.c"
        var $120=(($119+4)&4294967295); //@line 4517 "cPickle.c"
        var $121=HEAP[$120]; //@line 4517 "cPickle.c"
        var $122=(($121+24)&4294967295); //@line 4517 "cPickle.c"
        var $123=HEAP[$122]; //@line 4517 "cPickle.c"
        var $124=HEAP[$state]; //@line 4517 "cPickle.c"
        FUNCTION_TABLE[$123]($124); //@line 4517 "cPickle.c"
        __label__ = 16; break; //@line 4517 "cPickle.c"
      case 16: // $bb15
        var $125=HEAP[$self_addr]; //@line 4518 "cPickle.c"
        var $126=(($125+28)&4294967295); //@line 4518 "cPickle.c"
        var $127=HEAP[$126]; //@line 4518 "cPickle.c"
        var $128=($127)!=0; //@line 4518 "cPickle.c"
        if ($128) { __label__ = 17; break; } else { __label__ = 21; break; } //@line 4518 "cPickle.c"
      case 17: // $bb16
        var $129=HEAP[$self_addr]; //@line 4519 "cPickle.c"
        var $130=(($129+28)&4294967295); //@line 4519 "cPickle.c"
        var $131=HEAP[$130]; //@line 4519 "cPickle.c"
        var $132=HEAP[$__setstate__]; //@line 4519 "cPickle.c"
        var $133=_PyObject_Call($132, $131, 0); //@line 4519 "cPickle.c"
        HEAP[$junk]=$133; //@line 4519 "cPickle.c"
        var $134=HEAP[$self_addr]; //@line 4520 "cPickle.c"
        var $135=(($134+28)&4294967295); //@line 4520 "cPickle.c"
        var $136=HEAP[$135]; //@line 4520 "cPickle.c"
        var $137=(($136)&4294967295); //@line 4520 "cPickle.c"
        var $138=HEAP[$137]; //@line 4520 "cPickle.c"
        var $139=((($138))|0) > 1; //@line 4520 "cPickle.c"
        if ($139) { __label__ = 18; break; } else { __label__ = 21; break; } //@line 4520 "cPickle.c"
      case 18: // $bb17
        var $140=HEAP[$self_addr]; //@line 4520 "cPickle.c"
        var $141=(($140+28)&4294967295); //@line 4520 "cPickle.c"
        var $142=HEAP[$141]; //@line 4520 "cPickle.c"
        var $143=(($142)&4294967295); //@line 4520 "cPickle.c"
        var $144=HEAP[$143]; //@line 4520 "cPickle.c"
        var $145=((($144) - 1)&4294967295); //@line 4520 "cPickle.c"
        var $146=(($142)&4294967295); //@line 4520 "cPickle.c"
        HEAP[$146]=$145; //@line 4520 "cPickle.c"
        var $147=(($142)&4294967295); //@line 4520 "cPickle.c"
        var $148=HEAP[$147]; //@line 4520 "cPickle.c"
        var $149=((($148))|0)==0; //@line 4520 "cPickle.c"
        if ($149) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 4520 "cPickle.c"
      case 19: // $bb18
        var $150=HEAP[$self_addr]; //@line 4520 "cPickle.c"
        var $151=(($150+28)&4294967295); //@line 4520 "cPickle.c"
        var $152=HEAP[$151]; //@line 4520 "cPickle.c"
        var $153=(($152+4)&4294967295); //@line 4520 "cPickle.c"
        var $154=HEAP[$153]; //@line 4520 "cPickle.c"
        var $155=(($154+24)&4294967295); //@line 4520 "cPickle.c"
        var $156=HEAP[$155]; //@line 4520 "cPickle.c"
        var $157=HEAP[$self_addr]; //@line 4520 "cPickle.c"
        var $158=(($157+28)&4294967295); //@line 4520 "cPickle.c"
        var $159=HEAP[$158]; //@line 4520 "cPickle.c"
        FUNCTION_TABLE[$156]($159); //@line 4520 "cPickle.c"
        __label__ = 20; break; //@line 4520 "cPickle.c"
      case 20: // $bb19
        var $160=HEAP[$self_addr]; //@line 4520 "cPickle.c"
        var $161=(($160+28)&4294967295); //@line 4520 "cPickle.c"
        HEAP[$161]=0; //@line 4520 "cPickle.c"
        __label__ = 21; break; //@line 4520 "cPickle.c"
      case 21: // $bb20
        var $162=HEAP[$__setstate__]; //@line 4522 "cPickle.c"
        var $163=(($162)&4294967295); //@line 4522 "cPickle.c"
        var $164=HEAP[$163]; //@line 4522 "cPickle.c"
        var $165=((($164) - 1)&4294967295); //@line 4522 "cPickle.c"
        var $166=HEAP[$__setstate__]; //@line 4522 "cPickle.c"
        var $167=(($166)&4294967295); //@line 4522 "cPickle.c"
        HEAP[$167]=$165; //@line 4522 "cPickle.c"
        var $168=HEAP[$__setstate__]; //@line 4522 "cPickle.c"
        var $169=(($168)&4294967295); //@line 4522 "cPickle.c"
        var $170=HEAP[$169]; //@line 4522 "cPickle.c"
        var $171=((($170))|0)==0; //@line 4522 "cPickle.c"
        if ($171) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 4522 "cPickle.c"
      case 22: // $bb21
        var $172=HEAP[$__setstate__]; //@line 4522 "cPickle.c"
        var $173=(($172+4)&4294967295); //@line 4522 "cPickle.c"
        var $174=HEAP[$173]; //@line 4522 "cPickle.c"
        var $175=(($174+24)&4294967295); //@line 4522 "cPickle.c"
        var $176=HEAP[$175]; //@line 4522 "cPickle.c"
        var $177=HEAP[$__setstate__]; //@line 4522 "cPickle.c"
        FUNCTION_TABLE[$176]($177); //@line 4522 "cPickle.c"
        __label__ = 23; break; //@line 4522 "cPickle.c"
      case 23: // $bb22
        var $178=HEAP[$junk]; //@line 4523 "cPickle.c"
        var $179=($178)==0; //@line 4523 "cPickle.c"
        if ($179) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 4523 "cPickle.c"
      case 24: // $bb23
        HEAP[$0]=-1; //@line 4524 "cPickle.c"
        __label__ = 65; break; //@line 4524 "cPickle.c"
      case 25: // $bb24
        var $180=HEAP[$junk]; //@line 4525 "cPickle.c"
        var $181=(($180)&4294967295); //@line 4525 "cPickle.c"
        var $182=HEAP[$181]; //@line 4525 "cPickle.c"
        var $183=((($182) - 1)&4294967295); //@line 4525 "cPickle.c"
        var $184=HEAP[$junk]; //@line 4525 "cPickle.c"
        var $185=(($184)&4294967295); //@line 4525 "cPickle.c"
        HEAP[$185]=$183; //@line 4525 "cPickle.c"
        var $186=HEAP[$junk]; //@line 4525 "cPickle.c"
        var $187=(($186)&4294967295); //@line 4525 "cPickle.c"
        var $188=HEAP[$187]; //@line 4525 "cPickle.c"
        var $189=((($188))|0)==0; //@line 4525 "cPickle.c"
        if ($189) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 4525 "cPickle.c"
      case 26: // $bb25
        var $190=HEAP[$junk]; //@line 4525 "cPickle.c"
        var $191=(($190+4)&4294967295); //@line 4525 "cPickle.c"
        var $192=HEAP[$191]; //@line 4525 "cPickle.c"
        var $193=(($192+24)&4294967295); //@line 4525 "cPickle.c"
        var $194=HEAP[$193]; //@line 4525 "cPickle.c"
        var $195=HEAP[$junk]; //@line 4525 "cPickle.c"
        FUNCTION_TABLE[$194]($195); //@line 4525 "cPickle.c"
        __label__ = 27; break; //@line 4525 "cPickle.c"
      case 27: // $bb26
        HEAP[$0]=0; //@line 4526 "cPickle.c"
        __label__ = 65; break; //@line 4526 "cPickle.c"
      case 28: // $bb27
        var $196=HEAP[_PyExc_AttributeError]; //@line 4528 "cPickle.c"
        var $197=_PyErr_ExceptionMatches($196); //@line 4528 "cPickle.c"
        var $198=((($197))|0)==0; //@line 4528 "cPickle.c"
        if ($198) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 4528 "cPickle.c"
      case 29: // $bb28
        HEAP[$0]=-1; //@line 4529 "cPickle.c"
        __label__ = 65; break; //@line 4529 "cPickle.c"
      case 30: // $bb29
        _PyErr_Clear(); //@line 4530 "cPickle.c"
        var $199=HEAP[$state]; //@line 4535 "cPickle.c"
        var $200=(($199+4)&4294967295); //@line 4535 "cPickle.c"
        var $201=HEAP[$200]; //@line 4535 "cPickle.c"
        var $202=(($201+84)&4294967295); //@line 4535 "cPickle.c"
        var $203=HEAP[$202]; //@line 4535 "cPickle.c"
        var $204=($203) & 67108864; //@line 4535 "cPickle.c"
        var $205=((($204))|0)==0; //@line 4535 "cPickle.c"
        if ($205) { __label__ = 35; break; } else { __label__ = 31; break; } //@line 4535 "cPickle.c"
      case 31: // $bb30
        var $206=HEAP[$state]; //@line 4535 "cPickle.c"
        var $207=_PyTuple_Size($206); //@line 4535 "cPickle.c"
        var $208=((($207))|0)!=2; //@line 4535 "cPickle.c"
        if ($208) { __label__ = 35; break; } else { __label__ = 32; break; } //@line 4535 "cPickle.c"
      case 32: // $bb31
        var $209=HEAP[$state]; //@line 4536 "cPickle.c"
        HEAP[$temp]=$209; //@line 4536 "cPickle.c"
        var $210=HEAP[$temp]; //@line 4537 "cPickle.c"
        var $211=$210; //@line 4537 "cPickle.c"
        var $212=(($211+12)&4294967295); //@line 4537 "cPickle.c"
        var $213=(($212)&4294967295); //@line 4537 "cPickle.c"
        var $214=HEAP[$213]; //@line 4537 "cPickle.c"
        HEAP[$state]=$214; //@line 4537 "cPickle.c"
        var $215=HEAP[$temp]; //@line 4538 "cPickle.c"
        var $216=$215; //@line 4538 "cPickle.c"
        var $217=(($216+12)&4294967295); //@line 4538 "cPickle.c"
        var $218=(($217+4)&4294967295); //@line 4538 "cPickle.c"
        var $219=HEAP[$218]; //@line 4538 "cPickle.c"
        HEAP[$slotstate]=$219; //@line 4538 "cPickle.c"
        var $220=HEAP[$state]; //@line 4539 "cPickle.c"
        var $221=(($220)&4294967295); //@line 4539 "cPickle.c"
        var $222=HEAP[$221]; //@line 4539 "cPickle.c"
        var $223=((($222) + 1)&4294967295); //@line 4539 "cPickle.c"
        var $224=HEAP[$state]; //@line 4539 "cPickle.c"
        var $225=(($224)&4294967295); //@line 4539 "cPickle.c"
        HEAP[$225]=$223; //@line 4539 "cPickle.c"
        var $226=HEAP[$slotstate]; //@line 4540 "cPickle.c"
        var $227=(($226)&4294967295); //@line 4540 "cPickle.c"
        var $228=HEAP[$227]; //@line 4540 "cPickle.c"
        var $229=((($228) + 1)&4294967295); //@line 4540 "cPickle.c"
        var $230=HEAP[$slotstate]; //@line 4540 "cPickle.c"
        var $231=(($230)&4294967295); //@line 4540 "cPickle.c"
        HEAP[$231]=$229; //@line 4540 "cPickle.c"
        var $232=HEAP[$temp]; //@line 4541 "cPickle.c"
        var $233=(($232)&4294967295); //@line 4541 "cPickle.c"
        var $234=HEAP[$233]; //@line 4541 "cPickle.c"
        var $235=((($234) - 1)&4294967295); //@line 4541 "cPickle.c"
        var $236=HEAP[$temp]; //@line 4541 "cPickle.c"
        var $237=(($236)&4294967295); //@line 4541 "cPickle.c"
        HEAP[$237]=$235; //@line 4541 "cPickle.c"
        var $238=HEAP[$temp]; //@line 4541 "cPickle.c"
        var $239=(($238)&4294967295); //@line 4541 "cPickle.c"
        var $240=HEAP[$239]; //@line 4541 "cPickle.c"
        var $241=((($240))|0)==0; //@line 4541 "cPickle.c"
        if ($241) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 4541 "cPickle.c"
      case 33: // $bb32
        var $242=HEAP[$temp]; //@line 4541 "cPickle.c"
        var $243=(($242+4)&4294967295); //@line 4541 "cPickle.c"
        var $244=HEAP[$243]; //@line 4541 "cPickle.c"
        var $245=(($244+24)&4294967295); //@line 4541 "cPickle.c"
        var $246=HEAP[$245]; //@line 4541 "cPickle.c"
        var $247=HEAP[$temp]; //@line 4541 "cPickle.c"
        FUNCTION_TABLE[$246]($247); //@line 4541 "cPickle.c"
        __label__ = 34; break; //@line 4541 "cPickle.c"
      case 34: // $bb33
        __label__ = 36; break; //@line 4541 "cPickle.c"
      case 35: // $bb34
        HEAP[$slotstate]=0; //@line 4544 "cPickle.c"
        __label__ = 36; break; //@line 4544 "cPickle.c"
      case 36: // $bb35
        var $248=HEAP[$state]; //@line 4547 "cPickle.c"
        var $249=($248)!=(__Py_NoneStruct); //@line 4547 "cPickle.c"
        if ($249) { __label__ = 37; break; } else { __label__ = 52; break; } //@line 4547 "cPickle.c"
      case 37: // $bb36
        var $250=HEAP[$state]; //@line 4549 "cPickle.c"
        var $251=(($250+4)&4294967295); //@line 4549 "cPickle.c"
        var $252=HEAP[$251]; //@line 4549 "cPickle.c"
        var $253=(($252+84)&4294967295); //@line 4549 "cPickle.c"
        var $254=HEAP[$253]; //@line 4549 "cPickle.c"
        var $255=($254) & 536870912; //@line 4549 "cPickle.c"
        var $256=((($255))|0)==0; //@line 4549 "cPickle.c"
        if ($256) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 4549 "cPickle.c"
      case 38: // $bb37
        var $257=HEAP[_UnpicklingError]; //@line 4550 "cPickle.c"
        _PyErr_SetString($257, ((__str97)&4294967295)); //@line 4550 "cPickle.c"
        __label__ = 59; break; //@line 4550 "cPickle.c"
      case 39: // $bb38
        var $258=HEAP[___dict___str]; //@line 4554 "cPickle.c"
        var $259=HEAP[$inst]; //@line 4554 "cPickle.c"
        var $260=_PyObject_GetAttr($259, $258); //@line 4554 "cPickle.c"
        HEAP[$dict]=$260; //@line 4554 "cPickle.c"
        var $261=HEAP[$dict]; //@line 4555 "cPickle.c"
        var $262=($261)==0; //@line 4555 "cPickle.c"
        if ($262) { __label__ = 59; break; } else { __label__ = 40; break; } //@line 4555 "cPickle.c"
      case 40: // $bb39
        HEAP[$i]=0; //@line 4558 "cPickle.c"
        __label__ = 49; break; //@line 4558 "cPickle.c"
      case 41: // $bb40
        var $263=HEAP[$d_key]; //@line 4562 "cPickle.c"
        var $264=(($263)&4294967295); //@line 4562 "cPickle.c"
        var $265=HEAP[$264]; //@line 4562 "cPickle.c"
        var $266=((($265) + 1)&4294967295); //@line 4562 "cPickle.c"
        var $267=(($263)&4294967295); //@line 4562 "cPickle.c"
        HEAP[$267]=$266; //@line 4562 "cPickle.c"
        var $268=HEAP[$d_key]; //@line 4563 "cPickle.c"
        var $269=(($268+4)&4294967295); //@line 4563 "cPickle.c"
        var $270=HEAP[$269]; //@line 4563 "cPickle.c"
        var $271=($270)==(_PyString_Type); //@line 4563 "cPickle.c"
        if ($271) { __label__ = 42; break; } else { __label__ = 43; break; } //@line 4563 "cPickle.c"
      case 42: // $bb41
        _PyString_InternInPlace($d_key); //@line 4564 "cPickle.c"
        __label__ = 43; break; //@line 4564 "cPickle.c"
      case 43: // $bb42
        var $272=HEAP[$d_value]; //@line 4565 "cPickle.c"
        var $273=HEAP[$d_key]; //@line 4565 "cPickle.c"
        var $274=HEAP[$dict]; //@line 4565 "cPickle.c"
        var $275=_PyObject_SetItem($274, $273, $272); //@line 4565 "cPickle.c"
        var $276=((($275))|0) < 0; //@line 4565 "cPickle.c"
        if ($276) { __label__ = 44; break; } else { __label__ = 47; break; } //@line 4565 "cPickle.c"
      case 44: // $bb43
        var $277=HEAP[$d_key]; //@line 4566 "cPickle.c"
        var $278=(($277)&4294967295); //@line 4566 "cPickle.c"
        var $279=HEAP[$278]; //@line 4566 "cPickle.c"
        var $280=((($279) - 1)&4294967295); //@line 4566 "cPickle.c"
        var $281=(($277)&4294967295); //@line 4566 "cPickle.c"
        HEAP[$281]=$280; //@line 4566 "cPickle.c"
        var $282=(($277)&4294967295); //@line 4566 "cPickle.c"
        var $283=HEAP[$282]; //@line 4566 "cPickle.c"
        var $284=((($283))|0)==0; //@line 4566 "cPickle.c"
        if ($284) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 4566 "cPickle.c"
      case 45: // $bb44
        var $285=HEAP[$d_key]; //@line 4566 "cPickle.c"
        var $286=(($285+4)&4294967295); //@line 4566 "cPickle.c"
        var $287=HEAP[$286]; //@line 4566 "cPickle.c"
        var $288=(($287+24)&4294967295); //@line 4566 "cPickle.c"
        var $289=HEAP[$288]; //@line 4566 "cPickle.c"
        var $290=HEAP[$d_key]; //@line 4566 "cPickle.c"
        FUNCTION_TABLE[$289]($290); //@line 4566 "cPickle.c"
        __label__ = 46; break; //@line 4566 "cPickle.c"
      case 46: // $bb45
        __label__ = 59; break; //@line 4566 "cPickle.c"
      case 47: // $bb46
        var $291=HEAP[$d_key]; //@line 4569 "cPickle.c"
        var $292=(($291)&4294967295); //@line 4569 "cPickle.c"
        var $293=HEAP[$292]; //@line 4569 "cPickle.c"
        var $294=((($293) - 1)&4294967295); //@line 4569 "cPickle.c"
        var $295=(($291)&4294967295); //@line 4569 "cPickle.c"
        HEAP[$295]=$294; //@line 4569 "cPickle.c"
        var $296=(($291)&4294967295); //@line 4569 "cPickle.c"
        var $297=HEAP[$296]; //@line 4569 "cPickle.c"
        var $298=((($297))|0)==0; //@line 4569 "cPickle.c"
        if ($298) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 4569 "cPickle.c"
      case 48: // $bb47
        var $299=HEAP[$d_key]; //@line 4569 "cPickle.c"
        var $300=(($299+4)&4294967295); //@line 4569 "cPickle.c"
        var $301=HEAP[$300]; //@line 4569 "cPickle.c"
        var $302=(($301+24)&4294967295); //@line 4569 "cPickle.c"
        var $303=HEAP[$302]; //@line 4569 "cPickle.c"
        var $304=HEAP[$d_key]; //@line 4569 "cPickle.c"
        FUNCTION_TABLE[$303]($304); //@line 4569 "cPickle.c"
        __label__ = 49; break; //@line 4569 "cPickle.c"
      case 49: // $bb48
        var $305=HEAP[$state]; //@line 4559 "cPickle.c"
        var $306=_PyDict_Next($305, $i, $d_key, $d_value); //@line 4559 "cPickle.c"
        var $307=((($306))|0)!=0; //@line 4559 "cPickle.c"
        if ($307) { __label__ = 41; break; } else { __label__ = 50; break; } //@line 4559 "cPickle.c"
      case 50: // $bb49
        var $308=HEAP[$dict]; //@line 4571 "cPickle.c"
        var $309=(($308)&4294967295); //@line 4571 "cPickle.c"
        var $310=HEAP[$309]; //@line 4571 "cPickle.c"
        var $311=((($310) - 1)&4294967295); //@line 4571 "cPickle.c"
        var $312=HEAP[$dict]; //@line 4571 "cPickle.c"
        var $313=(($312)&4294967295); //@line 4571 "cPickle.c"
        HEAP[$313]=$311; //@line 4571 "cPickle.c"
        var $314=HEAP[$dict]; //@line 4571 "cPickle.c"
        var $315=(($314)&4294967295); //@line 4571 "cPickle.c"
        var $316=HEAP[$315]; //@line 4571 "cPickle.c"
        var $317=((($316))|0)==0; //@line 4571 "cPickle.c"
        if ($317) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 4571 "cPickle.c"
      case 51: // $bb50
        var $318=HEAP[$dict]; //@line 4571 "cPickle.c"
        var $319=(($318+4)&4294967295); //@line 4571 "cPickle.c"
        var $320=HEAP[$319]; //@line 4571 "cPickle.c"
        var $321=(($320+24)&4294967295); //@line 4571 "cPickle.c"
        var $322=HEAP[$321]; //@line 4571 "cPickle.c"
        var $323=HEAP[$dict]; //@line 4571 "cPickle.c"
        FUNCTION_TABLE[$322]($323); //@line 4571 "cPickle.c"
        __label__ = 52; break; //@line 4571 "cPickle.c"
      case 52: // $bb51
        var $324=HEAP[$slotstate]; //@line 4575 "cPickle.c"
        var $325=($324)!=0; //@line 4575 "cPickle.c"
        if ($325) { __label__ = 53; break; } else { __label__ = 58; break; } //@line 4575 "cPickle.c"
      case 53: // $bb52
        var $326=HEAP[$slotstate]; //@line 4576 "cPickle.c"
        var $327=(($326+4)&4294967295); //@line 4576 "cPickle.c"
        var $328=HEAP[$327]; //@line 4576 "cPickle.c"
        var $329=(($328+84)&4294967295); //@line 4576 "cPickle.c"
        var $330=HEAP[$329]; //@line 4576 "cPickle.c"
        var $331=($330) & 536870912; //@line 4576 "cPickle.c"
        var $332=((($331))|0)==0; //@line 4576 "cPickle.c"
        if ($332) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 4576 "cPickle.c"
      case 54: // $bb53
        var $333=HEAP[_UnpicklingError]; //@line 4577 "cPickle.c"
        _PyErr_SetString($333, ((__str98)&4294967295)); //@line 4577 "cPickle.c"
        __label__ = 59; break; //@line 4577 "cPickle.c"
      case 55: // $bb54
        HEAP[$i]=0; //@line 4581 "cPickle.c"
        __label__ = 57; break; //@line 4581 "cPickle.c"
      case 56: // $bb55
        var $334=HEAP[$d_value]; //@line 4583 "cPickle.c"
        var $335=HEAP[$d_key]; //@line 4583 "cPickle.c"
        var $336=HEAP[$inst]; //@line 4583 "cPickle.c"
        var $337=_PyObject_SetAttr($336, $335, $334); //@line 4583 "cPickle.c"
        var $338=((($337))|0) < 0; //@line 4583 "cPickle.c"
        if ($338) { __label__ = 59; break; } else { __label__ = 57; break; } //@line 4583 "cPickle.c"
      case 57: // $bb56
        var $339=HEAP[$slotstate]; //@line 4582 "cPickle.c"
        var $340=_PyDict_Next($339, $i, $d_key, $d_value); //@line 4582 "cPickle.c"
        var $341=((($340))|0)!=0; //@line 4582 "cPickle.c"
        if ($341) { __label__ = 56; break; } else { __label__ = 58; break; } //@line 4582 "cPickle.c"
      case 58: // $bb57
        HEAP[$res]=0; //@line 4587 "cPickle.c"
        __label__ = 59; break; //@line 4589 "cPickle.c"
      case 59: // $finally
        var $342=HEAP[$state]; //@line 4590 "cPickle.c"
        var $343=(($342)&4294967295); //@line 4590 "cPickle.c"
        var $344=HEAP[$343]; //@line 4590 "cPickle.c"
        var $345=((($344) - 1)&4294967295); //@line 4590 "cPickle.c"
        var $346=HEAP[$state]; //@line 4590 "cPickle.c"
        var $347=(($346)&4294967295); //@line 4590 "cPickle.c"
        HEAP[$347]=$345; //@line 4590 "cPickle.c"
        var $348=HEAP[$state]; //@line 4590 "cPickle.c"
        var $349=(($348)&4294967295); //@line 4590 "cPickle.c"
        var $350=HEAP[$349]; //@line 4590 "cPickle.c"
        var $351=((($350))|0)==0; //@line 4590 "cPickle.c"
        if ($351) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 4590 "cPickle.c"
      case 60: // $bb58
        var $352=HEAP[$state]; //@line 4590 "cPickle.c"
        var $353=(($352+4)&4294967295); //@line 4590 "cPickle.c"
        var $354=HEAP[$353]; //@line 4590 "cPickle.c"
        var $355=(($354+24)&4294967295); //@line 4590 "cPickle.c"
        var $356=HEAP[$355]; //@line 4590 "cPickle.c"
        var $357=HEAP[$state]; //@line 4590 "cPickle.c"
        FUNCTION_TABLE[$356]($357); //@line 4590 "cPickle.c"
        __label__ = 61; break; //@line 4590 "cPickle.c"
      case 61: // $bb59
        var $358=HEAP[$slotstate]; //@line 4591 "cPickle.c"
        var $359=($358)!=0; //@line 4591 "cPickle.c"
        if ($359) { __label__ = 62; break; } else { __label__ = 64; break; } //@line 4591 "cPickle.c"
      case 62: // $bb60
        var $360=HEAP[$slotstate]; //@line 4591 "cPickle.c"
        var $361=(($360)&4294967295); //@line 4591 "cPickle.c"
        var $362=HEAP[$361]; //@line 4591 "cPickle.c"
        var $363=((($362) - 1)&4294967295); //@line 4591 "cPickle.c"
        var $364=HEAP[$slotstate]; //@line 4591 "cPickle.c"
        var $365=(($364)&4294967295); //@line 4591 "cPickle.c"
        HEAP[$365]=$363; //@line 4591 "cPickle.c"
        var $366=HEAP[$slotstate]; //@line 4591 "cPickle.c"
        var $367=(($366)&4294967295); //@line 4591 "cPickle.c"
        var $368=HEAP[$367]; //@line 4591 "cPickle.c"
        var $369=((($368))|0)==0; //@line 4591 "cPickle.c"
        if ($369) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 4591 "cPickle.c"
      case 63: // $bb61
        var $370=HEAP[$slotstate]; //@line 4591 "cPickle.c"
        var $371=(($370+4)&4294967295); //@line 4591 "cPickle.c"
        var $372=HEAP[$371]; //@line 4591 "cPickle.c"
        var $373=(($372+24)&4294967295); //@line 4591 "cPickle.c"
        var $374=HEAP[$373]; //@line 4591 "cPickle.c"
        var $375=HEAP[$slotstate]; //@line 4591 "cPickle.c"
        FUNCTION_TABLE[$374]($375); //@line 4591 "cPickle.c"
        __label__ = 64; break; //@line 4591 "cPickle.c"
      case 64: // $bb62
        var $376=HEAP[$res]; //@line 4592 "cPickle.c"
        HEAP[$0]=$376; //@line 4592 "cPickle.c"
        __label__ = 65; break; //@line 4592 "cPickle.c"
      case 65: // $bb63
        var $377=HEAP[$0]; //@line 4506 "cPickle.c"
        HEAP[$retval]=$377; //@line 4506 "cPickle.c"
        __label__ = 66; break; //@line 4506 "cPickle.c"
      case 66: // $return
        var $retval64=HEAP[$retval]; //@line 4506 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval64; //@line 4506 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_mark($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $s=__stackBase__+12;
        var $marks=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 4606 "cPickle.c"
        var $2=(($1+52)&4294967295); //@line 4606 "cPickle.c"
        var $3=HEAP[$2]; //@line 4606 "cPickle.c"
        var $4=((($3) + 1)&4294967295); //@line 4606 "cPickle.c"
        var $5=HEAP[$self_addr]; //@line 4606 "cPickle.c"
        var $6=(($5+56)&4294967295); //@line 4606 "cPickle.c"
        var $7=HEAP[$6]; //@line 4606 "cPickle.c"
        var $8=((($4))|0) >= ((($7))|0); //@line 4606 "cPickle.c"
        if ($8) { __label__ = 1; break; } else { __label__ = 9; break; } //@line 4606 "cPickle.c"
      case 1: // $bb
        var $9=HEAP[$self_addr]; //@line 4608 "cPickle.c"
        var $10=(($9+56)&4294967295); //@line 4608 "cPickle.c"
        var $11=HEAP[$10]; //@line 4608 "cPickle.c"
        var $12=((($11) + 20)&4294967295); //@line 4608 "cPickle.c"
        HEAP[$s]=$12; //@line 4608 "cPickle.c"
        var $13=HEAP[$self_addr]; //@line 4609 "cPickle.c"
        var $14=(($13+52)&4294967295); //@line 4609 "cPickle.c"
        var $15=HEAP[$14]; //@line 4609 "cPickle.c"
        var $16=HEAP[$s]; //@line 4609 "cPickle.c"
        var $17=((($15))|0) >= ((($16))|0); //@line 4609 "cPickle.c"
        if ($17) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 4609 "cPickle.c"
      case 2: // $bb1
        var $18=HEAP[$self_addr]; //@line 4609 "cPickle.c"
        var $19=(($18+52)&4294967295); //@line 4609 "cPickle.c"
        var $20=HEAP[$19]; //@line 4609 "cPickle.c"
        var $21=((($20) + 1)&4294967295); //@line 4609 "cPickle.c"
        HEAP[$s]=$21; //@line 4609 "cPickle.c"
        __label__ = 3; break; //@line 4609 "cPickle.c"
      case 3: // $bb2
        var $22=HEAP[$self_addr]; //@line 4610 "cPickle.c"
        var $23=(($22+48)&4294967295); //@line 4610 "cPickle.c"
        var $24=HEAP[$23]; //@line 4610 "cPickle.c"
        var $25=($24)==0; //@line 4610 "cPickle.c"
        if ($25) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4610 "cPickle.c"
      case 4: // $bb3
        var $26=HEAP[$s]; //@line 4611 "cPickle.c"
        var $27=((($26) * 4)&4294967295); //@line 4611 "cPickle.c"
        var $28=_malloc($27); //@line 4611 "cPickle.c"
        var $29=$28; //@line 4611 "cPickle.c"
        HEAP[$marks]=$29; //@line 4611 "cPickle.c"
        __label__ = 6; break; //@line 4611 "cPickle.c"
      case 5: // $bb4
        var $30=HEAP[$s]; //@line 4613 "cPickle.c"
        var $31=((($30) * 4)&4294967295); //@line 4613 "cPickle.c"
        var $32=HEAP[$self_addr]; //@line 4613 "cPickle.c"
        var $33=(($32+48)&4294967295); //@line 4613 "cPickle.c"
        var $34=HEAP[$33]; //@line 4613 "cPickle.c"
        var $35=$34; //@line 4613 "cPickle.c"
        var $36=_realloc($35, $31); //@line 4613 "cPickle.c"
        var $37=$36; //@line 4613 "cPickle.c"
        HEAP[$marks]=$37; //@line 4613 "cPickle.c"
        __label__ = 6; break; //@line 4613 "cPickle.c"
      case 6: // $bb5
        var $38=HEAP[$marks]; //@line 4615 "cPickle.c"
        var $39=($38)==0; //@line 4615 "cPickle.c"
        if ($39) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4615 "cPickle.c"
      case 7: // $bb6
        var $40=_PyErr_NoMemory(); //@line 4616 "cPickle.c"
        HEAP[$0]=-1; //@line 4617 "cPickle.c"
        __label__ = 10; break; //@line 4617 "cPickle.c"
      case 8: // $bb7
        var $41=HEAP[$self_addr]; //@line 4619 "cPickle.c"
        var $42=(($41+48)&4294967295); //@line 4619 "cPickle.c"
        var $43=HEAP[$marks]; //@line 4619 "cPickle.c"
        HEAP[$42]=$43; //@line 4619 "cPickle.c"
        var $44=HEAP[$self_addr]; //@line 4620 "cPickle.c"
        var $45=(($44+56)&4294967295); //@line 4620 "cPickle.c"
        var $46=HEAP[$s]; //@line 4620 "cPickle.c"
        HEAP[$45]=$46; //@line 4620 "cPickle.c"
        __label__ = 9; break; //@line 4620 "cPickle.c"
      case 9: // $bb8
        var $47=HEAP[$self_addr]; //@line 4623 "cPickle.c"
        var $48=(($47+48)&4294967295); //@line 4623 "cPickle.c"
        var $49=HEAP[$48]; //@line 4623 "cPickle.c"
        var $50=HEAP[$self_addr]; //@line 4623 "cPickle.c"
        var $51=(($50+52)&4294967295); //@line 4623 "cPickle.c"
        var $52=HEAP[$51]; //@line 4623 "cPickle.c"
        var $53=HEAP[$self_addr]; //@line 4623 "cPickle.c"
        var $54=(($53+32)&4294967295); //@line 4623 "cPickle.c"
        var $55=HEAP[$54]; //@line 4623 "cPickle.c"
        var $56=(($55+8)&4294967295); //@line 4623 "cPickle.c"
        var $57=HEAP[$56]; //@line 4623 "cPickle.c"
        var $58=(($49+4*$52)&4294967295); //@line 4623 "cPickle.c"
        HEAP[$58]=$57; //@line 4623 "cPickle.c"
        var $59=((($52) + 1)&4294967295); //@line 4623 "cPickle.c"
        var $60=HEAP[$self_addr]; //@line 4623 "cPickle.c"
        var $61=(($60+52)&4294967295); //@line 4623 "cPickle.c"
        HEAP[$61]=$59; //@line 4623 "cPickle.c"
        HEAP[$0]=0; //@line 4625 "cPickle.c"
        __label__ = 10; break; //@line 4625 "cPickle.c"
      case 10: // $bb9
        var $62=HEAP[$0]; //@line 4617 "cPickle.c"
        HEAP[$retval]=$62; //@line 4617 "cPickle.c"
        __label__ = 11; break; //@line 4617 "cPickle.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 4617 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 4617 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_reduce($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $callable=__stackBase__+12;
        var $arg_tup=__stackBase__+16;
        var $ob=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$callable]=0; //@line 4631 "cPickle.c"
        HEAP[$arg_tup]=0; //@line 4631 "cPickle.c"
        HEAP[$ob]=0; //@line 4631 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 4633 "cPickle.c"
        var $2=(($1+32)&4294967295); //@line 4633 "cPickle.c"
        var $3=HEAP[$2]; //@line 4633 "cPickle.c"
        var $4=(($3+8)&4294967295); //@line 4633 "cPickle.c"
        var $5=HEAP[$4]; //@line 4633 "cPickle.c"
        var $6=((($5))|0)!=0; //@line 4633 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4633 "cPickle.c"
      case 1: // $bb
        var $7=HEAP[$self_addr]; //@line 4633 "cPickle.c"
        var $8=(($7+32)&4294967295); //@line 4633 "cPickle.c"
        var $9=HEAP[$8]; //@line 4633 "cPickle.c"
        var $10=(($9+16)&4294967295); //@line 4633 "cPickle.c"
        var $11=HEAP[$10]; //@line 4633 "cPickle.c"
        var $12=HEAP[$self_addr]; //@line 4633 "cPickle.c"
        var $13=(($12+32)&4294967295); //@line 4633 "cPickle.c"
        var $14=HEAP[$13]; //@line 4633 "cPickle.c"
        var $15=(($14+8)&4294967295); //@line 4633 "cPickle.c"
        var $16=HEAP[$15]; //@line 4633 "cPickle.c"
        var $17=((($16) - 1)&4294967295); //@line 4633 "cPickle.c"
        var $18=(($14+8)&4294967295); //@line 4633 "cPickle.c"
        HEAP[$18]=$17; //@line 4633 "cPickle.c"
        var $19=(($14+8)&4294967295); //@line 4633 "cPickle.c"
        var $20=HEAP[$19]; //@line 4633 "cPickle.c"
        var $21=(($11+4*$20)&4294967295); //@line 4633 "cPickle.c"
        var $22=HEAP[$21]; //@line 4633 "cPickle.c"
        HEAP[$arg_tup]=$22; //@line 4633 "cPickle.c"
        __label__ = 3; break; //@line 4633 "cPickle.c"
      case 2: // $bb1
        var $23=HEAP[_UnpicklingError]; //@line 4633 "cPickle.c"
        _PyErr_SetString($23, ((__str88)&4294967295)); //@line 4633 "cPickle.c"
        HEAP[$arg_tup]=0; //@line 4633 "cPickle.c"
        __label__ = 3; break; //@line 4633 "cPickle.c"
      case 3: // $bb2
        var $24=HEAP[$arg_tup]; //@line 4634 "cPickle.c"
        var $25=($24)==0; //@line 4634 "cPickle.c"
        if ($25) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4634 "cPickle.c"
      case 4: // $bb3
        HEAP[$0]=-1; //@line 4634 "cPickle.c"
        __label__ = 21; break; //@line 4634 "cPickle.c"
      case 5: // $bb4
        var $26=HEAP[$self_addr]; //@line 4635 "cPickle.c"
        var $27=(($26+32)&4294967295); //@line 4635 "cPickle.c"
        var $28=HEAP[$27]; //@line 4635 "cPickle.c"
        var $29=(($28+8)&4294967295); //@line 4635 "cPickle.c"
        var $30=HEAP[$29]; //@line 4635 "cPickle.c"
        var $31=((($30))|0)!=0; //@line 4635 "cPickle.c"
        if ($31) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 4635 "cPickle.c"
      case 6: // $bb5
        var $32=HEAP[$self_addr]; //@line 4635 "cPickle.c"
        var $33=(($32+32)&4294967295); //@line 4635 "cPickle.c"
        var $34=HEAP[$33]; //@line 4635 "cPickle.c"
        var $35=(($34+16)&4294967295); //@line 4635 "cPickle.c"
        var $36=HEAP[$35]; //@line 4635 "cPickle.c"
        var $37=HEAP[$self_addr]; //@line 4635 "cPickle.c"
        var $38=(($37+32)&4294967295); //@line 4635 "cPickle.c"
        var $39=HEAP[$38]; //@line 4635 "cPickle.c"
        var $40=(($39+8)&4294967295); //@line 4635 "cPickle.c"
        var $41=HEAP[$40]; //@line 4635 "cPickle.c"
        var $42=((($41) - 1)&4294967295); //@line 4635 "cPickle.c"
        var $43=(($39+8)&4294967295); //@line 4635 "cPickle.c"
        HEAP[$43]=$42; //@line 4635 "cPickle.c"
        var $44=(($39+8)&4294967295); //@line 4635 "cPickle.c"
        var $45=HEAP[$44]; //@line 4635 "cPickle.c"
        var $46=(($36+4*$45)&4294967295); //@line 4635 "cPickle.c"
        var $47=HEAP[$46]; //@line 4635 "cPickle.c"
        HEAP[$callable]=$47; //@line 4635 "cPickle.c"
        __label__ = 8; break; //@line 4635 "cPickle.c"
      case 7: // $bb6
        var $48=HEAP[_UnpicklingError]; //@line 4635 "cPickle.c"
        _PyErr_SetString($48, ((__str88)&4294967295)); //@line 4635 "cPickle.c"
        HEAP[$callable]=0; //@line 4635 "cPickle.c"
        __label__ = 8; break; //@line 4635 "cPickle.c"
      case 8: // $bb7
        var $49=HEAP[$callable]; //@line 4636 "cPickle.c"
        var $50=($49)!=0; //@line 4636 "cPickle.c"
        if ($50) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 4636 "cPickle.c"
      case 9: // $bb8
        var $51=HEAP[$callable]; //@line 4637 "cPickle.c"
        var $52=HEAP[$arg_tup]; //@line 4637 "cPickle.c"
        var $53=_Instance_New($51, $52); //@line 4637 "cPickle.c"
        HEAP[$ob]=$53; //@line 4637 "cPickle.c"
        var $54=HEAP[$callable]; //@line 4638 "cPickle.c"
        var $55=(($54)&4294967295); //@line 4638 "cPickle.c"
        var $56=HEAP[$55]; //@line 4638 "cPickle.c"
        var $57=((($56) - 1)&4294967295); //@line 4638 "cPickle.c"
        var $58=HEAP[$callable]; //@line 4638 "cPickle.c"
        var $59=(($58)&4294967295); //@line 4638 "cPickle.c"
        HEAP[$59]=$57; //@line 4638 "cPickle.c"
        var $60=HEAP[$callable]; //@line 4638 "cPickle.c"
        var $61=(($60)&4294967295); //@line 4638 "cPickle.c"
        var $62=HEAP[$61]; //@line 4638 "cPickle.c"
        var $63=((($62))|0)==0; //@line 4638 "cPickle.c"
        if ($63) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 4638 "cPickle.c"
      case 10: // $bb9
        var $64=HEAP[$callable]; //@line 4638 "cPickle.c"
        var $65=(($64+4)&4294967295); //@line 4638 "cPickle.c"
        var $66=HEAP[$65]; //@line 4638 "cPickle.c"
        var $67=(($66+24)&4294967295); //@line 4638 "cPickle.c"
        var $68=HEAP[$67]; //@line 4638 "cPickle.c"
        var $69=HEAP[$callable]; //@line 4638 "cPickle.c"
        FUNCTION_TABLE[$68]($69); //@line 4638 "cPickle.c"
        __label__ = 11; break; //@line 4638 "cPickle.c"
      case 11: // $bb10
        var $70=HEAP[$arg_tup]; //@line 4640 "cPickle.c"
        var $71=(($70)&4294967295); //@line 4640 "cPickle.c"
        var $72=HEAP[$71]; //@line 4640 "cPickle.c"
        var $73=((($72) - 1)&4294967295); //@line 4640 "cPickle.c"
        var $74=HEAP[$arg_tup]; //@line 4640 "cPickle.c"
        var $75=(($74)&4294967295); //@line 4640 "cPickle.c"
        HEAP[$75]=$73; //@line 4640 "cPickle.c"
        var $76=HEAP[$arg_tup]; //@line 4640 "cPickle.c"
        var $77=(($76)&4294967295); //@line 4640 "cPickle.c"
        var $78=HEAP[$77]; //@line 4640 "cPickle.c"
        var $79=((($78))|0)==0; //@line 4640 "cPickle.c"
        if ($79) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 4640 "cPickle.c"
      case 12: // $bb11
        var $80=HEAP[$arg_tup]; //@line 4640 "cPickle.c"
        var $81=(($80+4)&4294967295); //@line 4640 "cPickle.c"
        var $82=HEAP[$81]; //@line 4640 "cPickle.c"
        var $83=(($82+24)&4294967295); //@line 4640 "cPickle.c"
        var $84=HEAP[$83]; //@line 4640 "cPickle.c"
        var $85=HEAP[$arg_tup]; //@line 4640 "cPickle.c"
        FUNCTION_TABLE[$84]($85); //@line 4640 "cPickle.c"
        __label__ = 13; break; //@line 4640 "cPickle.c"
      case 13: // $bb12
        var $86=HEAP[$ob]; //@line 4642 "cPickle.c"
        var $87=($86)==0; //@line 4642 "cPickle.c"
        if ($87) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 4642 "cPickle.c"
      case 14: // $bb13
        HEAP[$0]=-1; //@line 4642 "cPickle.c"
        __label__ = 21; break; //@line 4642 "cPickle.c"
      case 15: // $bb14
        var $88=HEAP[$self_addr]; //@line 4644 "cPickle.c"
        var $89=(($88+32)&4294967295); //@line 4644 "cPickle.c"
        var $90=HEAP[$89]; //@line 4644 "cPickle.c"
        var $91=(($90+8)&4294967295); //@line 4644 "cPickle.c"
        var $92=HEAP[$91]; //@line 4644 "cPickle.c"
        var $93=HEAP[$self_addr]; //@line 4644 "cPickle.c"
        var $94=(($93+32)&4294967295); //@line 4644 "cPickle.c"
        var $95=HEAP[$94]; //@line 4644 "cPickle.c"
        var $96=(($95+12)&4294967295); //@line 4644 "cPickle.c"
        var $97=HEAP[$96]; //@line 4644 "cPickle.c"
        var $98=((($92))|0)==((($97))|0); //@line 4644 "cPickle.c"
        if ($98) { __label__ = 16; break; } else { __label__ = 20; break; } //@line 4644 "cPickle.c"
      case 16: // $bb15
        var $99=HEAP[$self_addr]; //@line 4644 "cPickle.c"
        var $100=(($99+32)&4294967295); //@line 4644 "cPickle.c"
        var $101=HEAP[$100]; //@line 4644 "cPickle.c"
        var $102=_Pdata_grow($101); //@line 4644 "cPickle.c"
        var $103=((($102))|0) < 0; //@line 4644 "cPickle.c"
        if ($103) { __label__ = 17; break; } else { __label__ = 20; break; } //@line 4644 "cPickle.c"
      case 17: // $bb16
        var $104=HEAP[$ob]; //@line 4644 "cPickle.c"
        var $105=(($104)&4294967295); //@line 4644 "cPickle.c"
        var $106=HEAP[$105]; //@line 4644 "cPickle.c"
        var $107=((($106) - 1)&4294967295); //@line 4644 "cPickle.c"
        var $108=HEAP[$ob]; //@line 4644 "cPickle.c"
        var $109=(($108)&4294967295); //@line 4644 "cPickle.c"
        HEAP[$109]=$107; //@line 4644 "cPickle.c"
        var $110=HEAP[$ob]; //@line 4644 "cPickle.c"
        var $111=(($110)&4294967295); //@line 4644 "cPickle.c"
        var $112=HEAP[$111]; //@line 4644 "cPickle.c"
        var $113=((($112))|0)==0; //@line 4644 "cPickle.c"
        if ($113) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 4644 "cPickle.c"
      case 18: // $bb17
        var $114=HEAP[$ob]; //@line 4644 "cPickle.c"
        var $115=(($114+4)&4294967295); //@line 4644 "cPickle.c"
        var $116=HEAP[$115]; //@line 4644 "cPickle.c"
        var $117=(($116+24)&4294967295); //@line 4644 "cPickle.c"
        var $118=HEAP[$117]; //@line 4644 "cPickle.c"
        var $119=HEAP[$ob]; //@line 4644 "cPickle.c"
        FUNCTION_TABLE[$118]($119); //@line 4644 "cPickle.c"
        __label__ = 19; break; //@line 4644 "cPickle.c"
      case 19: // $bb18
        HEAP[$0]=-1; //@line 4644 "cPickle.c"
        __label__ = 21; break; //@line 4644 "cPickle.c"
      case 20: // $bb19
        var $120=HEAP[$self_addr]; //@line 4644 "cPickle.c"
        var $121=(($120+32)&4294967295); //@line 4644 "cPickle.c"
        var $122=HEAP[$121]; //@line 4644 "cPickle.c"
        var $123=(($122+16)&4294967295); //@line 4644 "cPickle.c"
        var $124=HEAP[$123]; //@line 4644 "cPickle.c"
        var $125=HEAP[$self_addr]; //@line 4644 "cPickle.c"
        var $126=(($125+32)&4294967295); //@line 4644 "cPickle.c"
        var $127=HEAP[$126]; //@line 4644 "cPickle.c"
        var $128=(($127+8)&4294967295); //@line 4644 "cPickle.c"
        var $129=HEAP[$128]; //@line 4644 "cPickle.c"
        var $130=(($124+4*$129)&4294967295); //@line 4644 "cPickle.c"
        var $131=HEAP[$ob]; //@line 4644 "cPickle.c"
        HEAP[$130]=$131; //@line 4644 "cPickle.c"
        var $132=((($129) + 1)&4294967295); //@line 4644 "cPickle.c"
        var $133=(($127+8)&4294967295); //@line 4644 "cPickle.c"
        HEAP[$133]=$132; //@line 4644 "cPickle.c"
        HEAP[$0]=0; //@line 4645 "cPickle.c"
        __label__ = 21; break; //@line 4645 "cPickle.c"
      case 21: // $bb20
        var $134=HEAP[$0]; //@line 4634 "cPickle.c"
        HEAP[$retval]=$134; //@line 4634 "cPickle.c"
        __label__ = 22; break; //@line 4634 "cPickle.c"
      case 22: // $return
        var $retval21=HEAP[$retval]; //@line 4634 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval21; //@line 4634 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load_proto($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $i=__stackBase__+12;
        var $protobyte=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 4657 "cPickle.c"
        var $2=(($1+60)&4294967295); //@line 4657 "cPickle.c"
        var $3=HEAP[$2]; //@line 4657 "cPickle.c"
        var $4=HEAP[$self_addr]; //@line 4657 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $protobyte, 1); //@line 4657 "cPickle.c"
        HEAP[$i]=$5; //@line 4657 "cPickle.c"
        var $6=HEAP[$i]; //@line 4658 "cPickle.c"
        var $7=((($6))|0) < 0; //@line 4658 "cPickle.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4658 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 4659 "cPickle.c"
        __label__ = 7; break; //@line 4659 "cPickle.c"
      case 2: // $bb1
        var $8=HEAP[$protobyte]; //@line 4661 "cPickle.c"
        var $9=_calc_binint($8, 1); //@line 4661 "cPickle.c"
        HEAP[$i]=$9; //@line 4661 "cPickle.c"
        var $10=HEAP[$i]; //@line 4665 "cPickle.c"
        var $11=((($10))|0) < 0; //@line 4665 "cPickle.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4665 "cPickle.c"
      case 3: // $bb2
        ___assert_fail(((__str99)&4294967295), ((__str15)&4294967295), 4665, ((___PRETTY_FUNCTION___15142)&4294967295)); //@line 4665 "cPickle.c"
        throw "Reached an unreachable! Original .ll line: 22214"; //@line 4665 "cPickle.c"
      case 4: // $bb3
        var $12=HEAP[$i]; //@line 4666 "cPickle.c"
        var $13=((($12))|0) <= 2; //@line 4666 "cPickle.c"
        if ($13) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4666 "cPickle.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 4667 "cPickle.c"
        __label__ = 7; break; //@line 4667 "cPickle.c"
      case 6: // $bb5
        var $14=HEAP[_PyExc_ValueError]; //@line 4669 "cPickle.c"
        var $15=HEAP[$i]; //@line 4669 "cPickle.c"
        var $16=_PyErr_Format($14, ((__str100)&4294967295), $15); //@line 4669 "cPickle.c"
        HEAP[$0]=-1; //@line 4670 "cPickle.c"
        __label__ = 7; break; //@line 4670 "cPickle.c"
      case 7: // $bb6
        var $17=HEAP[$0]; //@line 4659 "cPickle.c"
        HEAP[$retval]=$17; //@line 4659 "cPickle.c"
        __label__ = 8; break; //@line 4659 "cPickle.c"
      case 8: // $return
        var $retval7=HEAP[$retval]; //@line 4659 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 4659 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _load($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $err=__stackBase__+12;
        var $val=__stackBase__+16;
        var $s=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$err]=0; //@line 4676 "cPickle.c"
        HEAP[$val]=0; //@line 4676 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 4679 "cPickle.c"
        var $2=(($1+52)&4294967295); //@line 4679 "cPickle.c"
        HEAP[$2]=0; //@line 4679 "cPickle.c"
        var $3=HEAP[$self_addr]; //@line 4680 "cPickle.c"
        var $4=(($3+32)&4294967295); //@line 4680 "cPickle.c"
        var $5=HEAP[$4]; //@line 4680 "cPickle.c"
        var $6=(($5+8)&4294967295); //@line 4680 "cPickle.c"
        var $7=HEAP[$6]; //@line 4680 "cPickle.c"
        var $8=((($7))|0)!=0; //@line 4680 "cPickle.c"
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4680 "cPickle.c"
      case 1: // $bb
        var $9=HEAP[$self_addr]; //@line 4680 "cPickle.c"
        var $10=(($9+32)&4294967295); //@line 4680 "cPickle.c"
        var $11=HEAP[$10]; //@line 4680 "cPickle.c"
        var $12=_Pdata_clear($11, 0); //@line 4680 "cPickle.c"
        __label__ = 2; break; //@line 4680 "cPickle.c"
      case 2: // $bb1
        var $13=HEAP[$self_addr]; //@line 4683 "cPickle.c"
        var $14=(($13+60)&4294967295); //@line 4683 "cPickle.c"
        var $15=HEAP[$14]; //@line 4683 "cPickle.c"
        var $16=HEAP[$self_addr]; //@line 4683 "cPickle.c"
        var $17=FUNCTION_TABLE[$15]($16, $s, 1); //@line 4683 "cPickle.c"
        var $18=((($17))|0) < 0; //@line 4683 "cPickle.c"
        if ($18) { __label__ = 113; break; } else { __label__ = 3; break; } //@line 4683 "cPickle.c"
      case 3: // $bb2
        var $19=HEAP[$s]; //@line 4686 "cPickle.c"
        var $20=(($19)&4294967295); //@line 4686 "cPickle.c"
        var $21=HEAP[$20]; //@line 4686 "cPickle.c"
        var $22=reSign(($21), 8, 0); //@line 4686 "cPickle.c"
        if ($22 == -128) {
          __label__ = 103; break;
        }
        else if ($22 == -127) {
          __label__ = 56; break;
        }
        else if ($22 == -126) {
          __label__ = 74; break;
        }
        else if ($22 == -125) {
          __label__ = 76; break;
        }
        else if ($22 == -124) {
          __label__ = 78; break;
        }
        else if ($22 == -123) {
          __label__ = 36; break;
        }
        else if ($22 == -122) {
          __label__ = 38; break;
        }
        else if ($22 == -121) {
          __label__ = 40; break;
        }
        else if ($22 == -120) {
          __label__ = 105; break;
        }
        else if ($22 == -119) {
          __label__ = 107; break;
        }
        else if ($22 == -118) {
          __label__ = 16; break;
        }
        else if ($22 == -117) {
          __label__ = 18; break;
        }
        else if ($22 == 0) {
          __label__ = 109; break;
        }
        else if ($22 == 40) {
          __label__ = 80; break;
        }
        else if ($22 == 41) {
          __label__ = 34; break;
        }
        else if ($22 == 46) {
          __label__ = 96; break;
        }
        else if ($22 == 48) {
          __label__ = 88; break;
        }
        else if ($22 == 49) {
          __label__ = 90; break;
        }
        else if ($22 == 50) {
          __label__ = 66; break;
        }
        else if ($22 == 70) {
          __label__ = 20; break;
        }
        else if ($22 == 71) {
          __label__ = 22; break;
        }
        else if ($22 == 73) {
          __label__ = 12; break;
        }
        else if ($22 == 74) {
          __label__ = 6; break;
        }
        else if ($22 == 75) {
          __label__ = 8; break;
        }
        else if ($22 == 76) {
          __label__ = 14; break;
        }
        else if ($22 == 77) {
          __label__ = 10; break;
        }
        else if ($22 == 78) {
          __label__ = 4; break;
        }
        else if ($22 == 80) {
          __label__ = 97; break;
        }
        else if ($22 == 81) {
          __label__ = 99; break;
        }
        else if ($22 == 82) {
          __label__ = 101; break;
        }
        else if ($22 == 83) {
          __label__ = 28; break;
        }
        else if ($22 == 84) {
          __label__ = 24; break;
        }
        else if ($22 == 85) {
          __label__ = 26; break;
        }
        else if ($22 == 86) {
          __label__ = 30; break;
        }
        else if ($22 == 88) {
          __label__ = 32; break;
        }
        else if ($22 == 93) {
          __label__ = 44; break;
        }
        else if ($22 == 97) {
          __label__ = 60; break;
        }
        else if ($22 == 98) {
          __label__ = 64; break;
        }
        else if ($22 == 99) {
          __label__ = 58; break;
        }
        else if ($22 == 100) {
          __label__ = 50; break;
        }
        else if ($22 == 101) {
          __label__ = 62; break;
        }
        else if ($22 == 103) {
          __label__ = 72; break;
        }
        else if ($22 == 104) {
          __label__ = 68; break;
        }
        else if ($22 == 105) {
          __label__ = 54; break;
        }
        else if ($22 == 106) {
          __label__ = 70; break;
        }
        else if ($22 == 108) {
          __label__ = 46; break;
        }
        else if ($22 == 111) {
          __label__ = 52; break;
        }
        else if ($22 == 112) {
          __label__ = 86; break;
        }
        else if ($22 == 113) {
          __label__ = 82; break;
        }
        else if ($22 == 114) {
          __label__ = 84; break;
        }
        else if ($22 == 115) {
          __label__ = 92; break;
        }
        else if ($22 == 116) {
          __label__ = 42; break;
        }
        else if ($22 == 117) {
          __label__ = 94; break;
        }
        else if ($22 == 125) {
          __label__ = 48; break;
        }
        else {
        __label__ = 110; break;
        }
        
      case 4: // $bb3
        var $23=HEAP[$self_addr]; //@line 4688 "cPickle.c"
        var $24=_load_none($23); //@line 4688 "cPickle.c"
        var $25=((($24))|0) < 0; //@line 4688 "cPickle.c"
        if ($25) { __label__ = 111; break; } else { __label__ = 5; break; } //@line 4688 "cPickle.c"
      case 5: // $bb4
        __label__ = 112; break; //@line 4688 "cPickle.c"
      case 6: // $bb5
        var $26=HEAP[$self_addr]; //@line 4693 "cPickle.c"
        var $27=_load_binint($26); //@line 4693 "cPickle.c"
        var $28=((($27))|0) < 0; //@line 4693 "cPickle.c"
        if ($28) { __label__ = 111; break; } else { __label__ = 7; break; } //@line 4693 "cPickle.c"
      case 7: // $bb6
        __label__ = 112; break; //@line 4693 "cPickle.c"
      case 8: // $bb7
        var $29=HEAP[$self_addr]; //@line 4698 "cPickle.c"
        var $30=_load_binint1($29); //@line 4698 "cPickle.c"
        var $31=((($30))|0) < 0; //@line 4698 "cPickle.c"
        if ($31) { __label__ = 111; break; } else { __label__ = 9; break; } //@line 4698 "cPickle.c"
      case 9: // $bb8
        __label__ = 112; break; //@line 4698 "cPickle.c"
      case 10: // $bb9
        var $32=HEAP[$self_addr]; //@line 4703 "cPickle.c"
        var $33=_load_binint2($32); //@line 4703 "cPickle.c"
        var $34=((($33))|0) < 0; //@line 4703 "cPickle.c"
        if ($34) { __label__ = 111; break; } else { __label__ = 11; break; } //@line 4703 "cPickle.c"
      case 11: // $bb10
        __label__ = 112; break; //@line 4703 "cPickle.c"
      case 12: // $bb11
        var $35=HEAP[$self_addr]; //@line 4708 "cPickle.c"
        var $36=_load_int($35); //@line 4708 "cPickle.c"
        var $37=((($36))|0) < 0; //@line 4708 "cPickle.c"
        if ($37) { __label__ = 111; break; } else { __label__ = 13; break; } //@line 4708 "cPickle.c"
      case 13: // $bb12
        __label__ = 112; break; //@line 4708 "cPickle.c"
      case 14: // $bb13
        var $38=HEAP[$self_addr]; //@line 4713 "cPickle.c"
        var $39=_load_long($38); //@line 4713 "cPickle.c"
        var $40=((($39))|0) < 0; //@line 4713 "cPickle.c"
        if ($40) { __label__ = 111; break; } else { __label__ = 15; break; } //@line 4713 "cPickle.c"
      case 15: // $bb14
        __label__ = 112; break; //@line 4713 "cPickle.c"
      case 16: // $bb15
        var $41=HEAP[$self_addr]; //@line 4718 "cPickle.c"
        var $42=_load_counted_long($41, 1); //@line 4718 "cPickle.c"
        var $43=((($42))|0) < 0; //@line 4718 "cPickle.c"
        if ($43) { __label__ = 111; break; } else { __label__ = 17; break; } //@line 4718 "cPickle.c"
      case 17: // $bb16
        __label__ = 112; break; //@line 4718 "cPickle.c"
      case 18: // $bb17
        var $44=HEAP[$self_addr]; //@line 4723 "cPickle.c"
        var $45=_load_counted_long($44, 4); //@line 4723 "cPickle.c"
        var $46=((($45))|0) < 0; //@line 4723 "cPickle.c"
        if ($46) { __label__ = 111; break; } else { __label__ = 19; break; } //@line 4723 "cPickle.c"
      case 19: // $bb18
        __label__ = 112; break; //@line 4723 "cPickle.c"
      case 20: // $bb19
        var $47=HEAP[$self_addr]; //@line 4728 "cPickle.c"
        var $48=_load_float($47); //@line 4728 "cPickle.c"
        var $49=((($48))|0) < 0; //@line 4728 "cPickle.c"
        if ($49) { __label__ = 111; break; } else { __label__ = 21; break; } //@line 4728 "cPickle.c"
      case 21: // $bb20
        __label__ = 112; break; //@line 4728 "cPickle.c"
      case 22: // $bb21
        var $50=HEAP[$self_addr]; //@line 4733 "cPickle.c"
        var $51=_load_binfloat($50); //@line 4733 "cPickle.c"
        var $52=((($51))|0) < 0; //@line 4733 "cPickle.c"
        if ($52) { __label__ = 111; break; } else { __label__ = 23; break; } //@line 4733 "cPickle.c"
      case 23: // $bb22
        __label__ = 112; break; //@line 4733 "cPickle.c"
      case 24: // $bb23
        var $53=HEAP[$self_addr]; //@line 4738 "cPickle.c"
        var $54=_load_binstring($53); //@line 4738 "cPickle.c"
        var $55=((($54))|0) < 0; //@line 4738 "cPickle.c"
        if ($55) { __label__ = 111; break; } else { __label__ = 25; break; } //@line 4738 "cPickle.c"
      case 25: // $bb24
        __label__ = 112; break; //@line 4738 "cPickle.c"
      case 26: // $bb25
        var $56=HEAP[$self_addr]; //@line 4743 "cPickle.c"
        var $57=_load_short_binstring($56); //@line 4743 "cPickle.c"
        var $58=((($57))|0) < 0; //@line 4743 "cPickle.c"
        if ($58) { __label__ = 111; break; } else { __label__ = 27; break; } //@line 4743 "cPickle.c"
      case 27: // $bb26
        __label__ = 112; break; //@line 4743 "cPickle.c"
      case 28: // $bb27
        var $59=HEAP[$self_addr]; //@line 4748 "cPickle.c"
        var $60=_load_string($59); //@line 4748 "cPickle.c"
        var $61=((($60))|0) < 0; //@line 4748 "cPickle.c"
        if ($61) { __label__ = 111; break; } else { __label__ = 29; break; } //@line 4748 "cPickle.c"
      case 29: // $bb28
        __label__ = 112; break; //@line 4748 "cPickle.c"
      case 30: // $bb29
        var $62=HEAP[$self_addr]; //@line 4754 "cPickle.c"
        var $63=_load_unicode($62); //@line 4754 "cPickle.c"
        var $64=((($63))|0) < 0; //@line 4754 "cPickle.c"
        if ($64) { __label__ = 111; break; } else { __label__ = 31; break; } //@line 4754 "cPickle.c"
      case 31: // $bb30
        __label__ = 112; break; //@line 4754 "cPickle.c"
      case 32: // $bb31
        var $65=HEAP[$self_addr]; //@line 4759 "cPickle.c"
        var $66=_load_binunicode($65); //@line 4759 "cPickle.c"
        var $67=((($66))|0) < 0; //@line 4759 "cPickle.c"
        if ($67) { __label__ = 111; break; } else { __label__ = 33; break; } //@line 4759 "cPickle.c"
      case 33: // $bb32
        __label__ = 112; break; //@line 4759 "cPickle.c"
      case 34: // $bb33
        var $68=HEAP[$self_addr]; //@line 4765 "cPickle.c"
        var $69=_load_counted_tuple($68, 0); //@line 4765 "cPickle.c"
        var $70=((($69))|0) < 0; //@line 4765 "cPickle.c"
        if ($70) { __label__ = 111; break; } else { __label__ = 35; break; } //@line 4765 "cPickle.c"
      case 35: // $bb34
        __label__ = 112; break; //@line 4765 "cPickle.c"
      case 36: // $bb35
        var $71=HEAP[$self_addr]; //@line 4770 "cPickle.c"
        var $72=_load_counted_tuple($71, 1); //@line 4770 "cPickle.c"
        var $73=((($72))|0) < 0; //@line 4770 "cPickle.c"
        if ($73) { __label__ = 111; break; } else { __label__ = 37; break; } //@line 4770 "cPickle.c"
      case 37: // $bb36
        __label__ = 112; break; //@line 4770 "cPickle.c"
      case 38: // $bb37
        var $74=HEAP[$self_addr]; //@line 4775 "cPickle.c"
        var $75=_load_counted_tuple($74, 2); //@line 4775 "cPickle.c"
        var $76=((($75))|0) < 0; //@line 4775 "cPickle.c"
        if ($76) { __label__ = 111; break; } else { __label__ = 39; break; } //@line 4775 "cPickle.c"
      case 39: // $bb38
        __label__ = 112; break; //@line 4775 "cPickle.c"
      case 40: // $bb39
        var $77=HEAP[$self_addr]; //@line 4780 "cPickle.c"
        var $78=_load_counted_tuple($77, 3); //@line 4780 "cPickle.c"
        var $79=((($78))|0) < 0; //@line 4780 "cPickle.c"
        if ($79) { __label__ = 111; break; } else { __label__ = 41; break; } //@line 4780 "cPickle.c"
      case 41: // $bb40
        __label__ = 112; break; //@line 4780 "cPickle.c"
      case 42: // $bb41
        var $80=HEAP[$self_addr]; //@line 4785 "cPickle.c"
        var $81=_load_tuple($80); //@line 4785 "cPickle.c"
        var $82=((($81))|0) < 0; //@line 4785 "cPickle.c"
        if ($82) { __label__ = 111; break; } else { __label__ = 43; break; } //@line 4785 "cPickle.c"
      case 43: // $bb42
        __label__ = 112; break; //@line 4785 "cPickle.c"
      case 44: // $bb43
        var $83=HEAP[$self_addr]; //@line 4790 "cPickle.c"
        var $84=_load_empty_list($83); //@line 4790 "cPickle.c"
        var $85=((($84))|0) < 0; //@line 4790 "cPickle.c"
        if ($85) { __label__ = 111; break; } else { __label__ = 45; break; } //@line 4790 "cPickle.c"
      case 45: // $bb44
        __label__ = 112; break; //@line 4790 "cPickle.c"
      case 46: // $bb45
        var $86=HEAP[$self_addr]; //@line 4795 "cPickle.c"
        var $87=_load_list($86); //@line 4795 "cPickle.c"
        var $88=((($87))|0) < 0; //@line 4795 "cPickle.c"
        if ($88) { __label__ = 111; break; } else { __label__ = 47; break; } //@line 4795 "cPickle.c"
      case 47: // $bb46
        __label__ = 112; break; //@line 4795 "cPickle.c"
      case 48: // $bb47
        var $89=HEAP[$self_addr]; //@line 4800 "cPickle.c"
        var $90=_load_empty_dict($89); //@line 4800 "cPickle.c"
        var $91=((($90))|0) < 0; //@line 4800 "cPickle.c"
        if ($91) { __label__ = 111; break; } else { __label__ = 49; break; } //@line 4800 "cPickle.c"
      case 49: // $bb48
        __label__ = 112; break; //@line 4800 "cPickle.c"
      case 50: // $bb49
        var $92=HEAP[$self_addr]; //@line 4805 "cPickle.c"
        var $93=_load_dict($92); //@line 4805 "cPickle.c"
        var $94=((($93))|0) < 0; //@line 4805 "cPickle.c"
        if ($94) { __label__ = 111; break; } else { __label__ = 51; break; } //@line 4805 "cPickle.c"
      case 51: // $bb50
        __label__ = 112; break; //@line 4805 "cPickle.c"
      case 52: // $bb51
        var $95=HEAP[$self_addr]; //@line 4810 "cPickle.c"
        var $96=_load_obj($95); //@line 4810 "cPickle.c"
        var $97=((($96))|0) < 0; //@line 4810 "cPickle.c"
        if ($97) { __label__ = 111; break; } else { __label__ = 53; break; } //@line 4810 "cPickle.c"
      case 53: // $bb52
        __label__ = 112; break; //@line 4810 "cPickle.c"
      case 54: // $bb53
        var $98=HEAP[$self_addr]; //@line 4815 "cPickle.c"
        var $99=_load_inst($98); //@line 4815 "cPickle.c"
        var $100=((($99))|0) < 0; //@line 4815 "cPickle.c"
        if ($100) { __label__ = 111; break; } else { __label__ = 55; break; } //@line 4815 "cPickle.c"
      case 55: // $bb54
        __label__ = 112; break; //@line 4815 "cPickle.c"
      case 56: // $bb55
        var $101=HEAP[$self_addr]; //@line 4820 "cPickle.c"
        var $102=_load_newobj($101); //@line 4820 "cPickle.c"
        var $103=((($102))|0) < 0; //@line 4820 "cPickle.c"
        if ($103) { __label__ = 111; break; } else { __label__ = 57; break; } //@line 4820 "cPickle.c"
      case 57: // $bb56
        __label__ = 112; break; //@line 4820 "cPickle.c"
      case 58: // $bb57
        var $104=HEAP[$self_addr]; //@line 4825 "cPickle.c"
        var $105=_load_global($104); //@line 4825 "cPickle.c"
        var $106=((($105))|0) < 0; //@line 4825 "cPickle.c"
        if ($106) { __label__ = 111; break; } else { __label__ = 59; break; } //@line 4825 "cPickle.c"
      case 59: // $bb58
        __label__ = 112; break; //@line 4825 "cPickle.c"
      case 60: // $bb59
        var $107=HEAP[$self_addr]; //@line 4830 "cPickle.c"
        var $108=_load_append($107); //@line 4830 "cPickle.c"
        var $109=((($108))|0) < 0; //@line 4830 "cPickle.c"
        if ($109) { __label__ = 111; break; } else { __label__ = 61; break; } //@line 4830 "cPickle.c"
      case 61: // $bb60
        __label__ = 112; break; //@line 4830 "cPickle.c"
      case 62: // $bb61
        var $110=HEAP[$self_addr]; //@line 4835 "cPickle.c"
        var $111=_load_appends($110); //@line 4835 "cPickle.c"
        var $112=((($111))|0) < 0; //@line 4835 "cPickle.c"
        if ($112) { __label__ = 111; break; } else { __label__ = 63; break; } //@line 4835 "cPickle.c"
      case 63: // $bb62
        __label__ = 112; break; //@line 4835 "cPickle.c"
      case 64: // $bb63
        var $113=HEAP[$self_addr]; //@line 4840 "cPickle.c"
        var $114=_load_build($113); //@line 4840 "cPickle.c"
        var $115=((($114))|0) < 0; //@line 4840 "cPickle.c"
        if ($115) { __label__ = 111; break; } else { __label__ = 65; break; } //@line 4840 "cPickle.c"
      case 65: // $bb64
        __label__ = 112; break; //@line 4840 "cPickle.c"
      case 66: // $bb65
        var $116=HEAP[$self_addr]; //@line 4845 "cPickle.c"
        var $117=_load_dup($116); //@line 4845 "cPickle.c"
        var $118=((($117))|0) < 0; //@line 4845 "cPickle.c"
        if ($118) { __label__ = 111; break; } else { __label__ = 67; break; } //@line 4845 "cPickle.c"
      case 67: // $bb66
        __label__ = 112; break; //@line 4845 "cPickle.c"
      case 68: // $bb67
        var $119=HEAP[$self_addr]; //@line 4850 "cPickle.c"
        var $120=_load_binget($119); //@line 4850 "cPickle.c"
        var $121=((($120))|0) < 0; //@line 4850 "cPickle.c"
        if ($121) { __label__ = 111; break; } else { __label__ = 69; break; } //@line 4850 "cPickle.c"
      case 69: // $bb68
        __label__ = 112; break; //@line 4850 "cPickle.c"
      case 70: // $bb69
        var $122=HEAP[$self_addr]; //@line 4855 "cPickle.c"
        var $123=_load_long_binget($122); //@line 4855 "cPickle.c"
        var $124=((($123))|0) < 0; //@line 4855 "cPickle.c"
        if ($124) { __label__ = 111; break; } else { __label__ = 71; break; } //@line 4855 "cPickle.c"
      case 71: // $bb70
        __label__ = 112; break; //@line 4855 "cPickle.c"
      case 72: // $bb71
        var $125=HEAP[$self_addr]; //@line 4860 "cPickle.c"
        var $126=_load_get($125); //@line 4860 "cPickle.c"
        var $127=((($126))|0) < 0; //@line 4860 "cPickle.c"
        if ($127) { __label__ = 111; break; } else { __label__ = 73; break; } //@line 4860 "cPickle.c"
      case 73: // $bb72
        __label__ = 112; break; //@line 4860 "cPickle.c"
      case 74: // $bb73
        var $128=HEAP[$self_addr]; //@line 4865 "cPickle.c"
        var $129=_load_extension($128, 1); //@line 4865 "cPickle.c"
        var $130=((($129))|0) < 0; //@line 4865 "cPickle.c"
        if ($130) { __label__ = 111; break; } else { __label__ = 75; break; } //@line 4865 "cPickle.c"
      case 75: // $bb74
        __label__ = 112; break; //@line 4865 "cPickle.c"
      case 76: // $bb75
        var $131=HEAP[$self_addr]; //@line 4870 "cPickle.c"
        var $132=_load_extension($131, 2); //@line 4870 "cPickle.c"
        var $133=((($132))|0) < 0; //@line 4870 "cPickle.c"
        if ($133) { __label__ = 111; break; } else { __label__ = 77; break; } //@line 4870 "cPickle.c"
      case 77: // $bb76
        __label__ = 112; break; //@line 4870 "cPickle.c"
      case 78: // $bb77
        var $134=HEAP[$self_addr]; //@line 4875 "cPickle.c"
        var $135=_load_extension($134, 4); //@line 4875 "cPickle.c"
        var $136=((($135))|0) < 0; //@line 4875 "cPickle.c"
        if ($136) { __label__ = 111; break; } else { __label__ = 79; break; } //@line 4875 "cPickle.c"
      case 79: // $bb78
        __label__ = 112; break; //@line 4875 "cPickle.c"
      case 80: // $bb79
        var $137=HEAP[$self_addr]; //@line 4879 "cPickle.c"
        var $138=_load_mark($137); //@line 4879 "cPickle.c"
        var $139=((($138))|0) < 0; //@line 4879 "cPickle.c"
        if ($139) { __label__ = 111; break; } else { __label__ = 81; break; } //@line 4879 "cPickle.c"
      case 81: // $bb80
        __label__ = 112; break; //@line 4879 "cPickle.c"
      case 82: // $bb81
        var $140=HEAP[$self_addr]; //@line 4884 "cPickle.c"
        var $141=_load_binput($140); //@line 4884 "cPickle.c"
        var $142=((($141))|0) < 0; //@line 4884 "cPickle.c"
        if ($142) { __label__ = 111; break; } else { __label__ = 83; break; } //@line 4884 "cPickle.c"
      case 83: // $bb82
        __label__ = 112; break; //@line 4884 "cPickle.c"
      case 84: // $bb83
        var $143=HEAP[$self_addr]; //@line 4889 "cPickle.c"
        var $144=_load_long_binput($143); //@line 4889 "cPickle.c"
        var $145=((($144))|0) < 0; //@line 4889 "cPickle.c"
        if ($145) { __label__ = 111; break; } else { __label__ = 85; break; } //@line 4889 "cPickle.c"
      case 85: // $bb84
        __label__ = 112; break; //@line 4889 "cPickle.c"
      case 86: // $bb85
        var $146=HEAP[$self_addr]; //@line 4894 "cPickle.c"
        var $147=_load_put($146); //@line 4894 "cPickle.c"
        var $148=((($147))|0) < 0; //@line 4894 "cPickle.c"
        if ($148) { __label__ = 111; break; } else { __label__ = 87; break; } //@line 4894 "cPickle.c"
      case 87: // $bb86
        __label__ = 112; break; //@line 4894 "cPickle.c"
      case 88: // $bb87
        var $149=HEAP[$self_addr]; //@line 4899 "cPickle.c"
        var $150=_load_pop($149); //@line 4899 "cPickle.c"
        var $151=((($150))|0) < 0; //@line 4899 "cPickle.c"
        if ($151) { __label__ = 111; break; } else { __label__ = 89; break; } //@line 4899 "cPickle.c"
      case 89: // $bb88
        __label__ = 112; break; //@line 4899 "cPickle.c"
      case 90: // $bb89
        var $152=HEAP[$self_addr]; //@line 4904 "cPickle.c"
        var $153=_load_pop_mark($152); //@line 4904 "cPickle.c"
        var $154=((($153))|0) < 0; //@line 4904 "cPickle.c"
        if ($154) { __label__ = 111; break; } else { __label__ = 91; break; } //@line 4904 "cPickle.c"
      case 91: // $bb90
        __label__ = 112; break; //@line 4904 "cPickle.c"
      case 92: // $bb91
        var $155=HEAP[$self_addr]; //@line 4909 "cPickle.c"
        var $156=_load_setitem($155); //@line 4909 "cPickle.c"
        var $157=((($156))|0) < 0; //@line 4909 "cPickle.c"
        if ($157) { __label__ = 111; break; } else { __label__ = 93; break; } //@line 4909 "cPickle.c"
      case 93: // $bb92
        __label__ = 112; break; //@line 4909 "cPickle.c"
      case 94: // $bb93
        var $158=HEAP[$self_addr]; //@line 4914 "cPickle.c"
        var $159=_load_setitems($158); //@line 4914 "cPickle.c"
        var $160=((($159))|0) < 0; //@line 4914 "cPickle.c"
        if ($160) { __label__ = 111; break; } else { __label__ = 95; break; } //@line 4914 "cPickle.c"
      case 95: // $bb94
        __label__ = 112; break; //@line 4914 "cPickle.c"
      case 96: // $bb95
        __label__ = 111; break; //@line 4914 "cPickle.c"
      case 97: // $bb96
        var $161=HEAP[$self_addr]; //@line 4922 "cPickle.c"
        var $162=_load_persid($161); //@line 4922 "cPickle.c"
        var $163=((($162))|0) < 0; //@line 4922 "cPickle.c"
        if ($163) { __label__ = 111; break; } else { __label__ = 98; break; } //@line 4922 "cPickle.c"
      case 98: // $bb97
        __label__ = 112; break; //@line 4922 "cPickle.c"
      case 99: // $bb98
        var $164=HEAP[$self_addr]; //@line 4927 "cPickle.c"
        var $165=_load_binpersid($164); //@line 4927 "cPickle.c"
        var $166=((($165))|0) < 0; //@line 4927 "cPickle.c"
        if ($166) { __label__ = 111; break; } else { __label__ = 100; break; } //@line 4927 "cPickle.c"
      case 100: // $bb99
        __label__ = 112; break; //@line 4927 "cPickle.c"
      case 101: // $bb100
        var $167=HEAP[$self_addr]; //@line 4932 "cPickle.c"
        var $168=_load_reduce($167); //@line 4932 "cPickle.c"
        var $169=((($168))|0) < 0; //@line 4932 "cPickle.c"
        if ($169) { __label__ = 111; break; } else { __label__ = 102; break; } //@line 4932 "cPickle.c"
      case 102: // $bb101
        __label__ = 112; break; //@line 4932 "cPickle.c"
      case 103: // $bb102
        var $170=HEAP[$self_addr]; //@line 4937 "cPickle.c"
        var $171=_load_proto($170); //@line 4937 "cPickle.c"
        var $172=((($171))|0) < 0; //@line 4937 "cPickle.c"
        if ($172) { __label__ = 111; break; } else { __label__ = 104; break; } //@line 4937 "cPickle.c"
      case 104: // $bb103
        __label__ = 112; break; //@line 4937 "cPickle.c"
      case 105: // $bb104
        var $173=HEAP[$self_addr]; //@line 4942 "cPickle.c"
        var $174=_load_bool($173, __Py_TrueStruct); //@line 4942 "cPickle.c"
        var $175=((($174))|0) < 0; //@line 4942 "cPickle.c"
        if ($175) { __label__ = 111; break; } else { __label__ = 106; break; } //@line 4942 "cPickle.c"
      case 106: // $bb105
        __label__ = 112; break; //@line 4942 "cPickle.c"
      case 107: // $bb106
        var $176=HEAP[$self_addr]; //@line 4947 "cPickle.c"
        var $177=_load_bool($176, __Py_ZeroStruct); //@line 4947 "cPickle.c"
        var $178=((($177))|0) < 0; //@line 4947 "cPickle.c"
        if ($178) { __label__ = 111; break; } else { __label__ = 108; break; } //@line 4947 "cPickle.c"
      case 108: // $bb107
        __label__ = 112; break; //@line 4947 "cPickle.c"
      case 109: // $bb108
        var $179=HEAP[_PyExc_EOFError]; //@line 4953 "cPickle.c"
        _PyErr_SetNone($179); //@line 4953 "cPickle.c"
        __label__ = 111; break; //@line 4953 "cPickle.c"
      case 110: // $bb109
        var $180=HEAP[$s]; //@line 4957 "cPickle.c"
        var $181=(($180)&4294967295); //@line 4957 "cPickle.c"
        var $182=HEAP[$181]; //@line 4957 "cPickle.c"
        var $183=reSign(($182), 8, 0); //@line 4957 "cPickle.c"
        var $184=HEAP[_UnpicklingError]; //@line 4957 "cPickle.c"
        var $185=_cPickle_ErrFormat($184, ((__str101)&4294967295), ((__str102)&4294967295), allocate([$183,0,0,0], ["i32",0,0,0], ALLOC_STACK)); //@line 4957 "cPickle.c"
        HEAP[$0]=0; //@line 4960 "cPickle.c"
        __label__ = 121; break; //@line 4960 "cPickle.c"
      case 111: // $bb110
        __label__ = 113; break; //@line 4960 "cPickle.c"
      case 112: // $bb111
        __label__ = 2; break; //@line 4960 "cPickle.c"
      case 113: // $bb112
        var $186=_PyErr_Occurred(); //@line 4966 "cPickle.c"
        HEAP[$err]=$186; //@line 4966 "cPickle.c"
        var $187=HEAP[$err]; //@line 4966 "cPickle.c"
        var $188=($187)!=0; //@line 4966 "cPickle.c"
        if ($188) { __label__ = 114; break; } else { __label__ = 117; break; } //@line 4966 "cPickle.c"
      case 114: // $bb113
        var $189=HEAP[_PyExc_EOFError]; //@line 4967 "cPickle.c"
        var $190=HEAP[$err]; //@line 4967 "cPickle.c"
        var $191=($190)==($189); //@line 4967 "cPickle.c"
        if ($191) { __label__ = 115; break; } else { __label__ = 116; break; } //@line 4967 "cPickle.c"
      case 115: // $bb114
        var $192=HEAP[_PyExc_EOFError]; //@line 4968 "cPickle.c"
        _PyErr_SetNone($192); //@line 4968 "cPickle.c"
        __label__ = 116; break; //@line 4968 "cPickle.c"
      case 116: // $bb115
        HEAP[$0]=0; //@line 4970 "cPickle.c"
        __label__ = 121; break; //@line 4970 "cPickle.c"
      case 117: // $bb116
        var $193=HEAP[$self_addr]; //@line 4973 "cPickle.c"
        var $194=(($193+32)&4294967295); //@line 4973 "cPickle.c"
        var $195=HEAP[$194]; //@line 4973 "cPickle.c"
        var $196=(($195+8)&4294967295); //@line 4973 "cPickle.c"
        var $197=HEAP[$196]; //@line 4973 "cPickle.c"
        var $198=((($197))|0)!=0; //@line 4973 "cPickle.c"
        if ($198) { __label__ = 118; break; } else { __label__ = 119; break; } //@line 4973 "cPickle.c"
      case 118: // $bb117
        var $199=HEAP[$self_addr]; //@line 4973 "cPickle.c"
        var $200=(($199+32)&4294967295); //@line 4973 "cPickle.c"
        var $201=HEAP[$200]; //@line 4973 "cPickle.c"
        var $202=(($201+16)&4294967295); //@line 4973 "cPickle.c"
        var $203=HEAP[$202]; //@line 4973 "cPickle.c"
        var $204=HEAP[$self_addr]; //@line 4973 "cPickle.c"
        var $205=(($204+32)&4294967295); //@line 4973 "cPickle.c"
        var $206=HEAP[$205]; //@line 4973 "cPickle.c"
        var $207=(($206+8)&4294967295); //@line 4973 "cPickle.c"
        var $208=HEAP[$207]; //@line 4973 "cPickle.c"
        var $209=((($208) - 1)&4294967295); //@line 4973 "cPickle.c"
        var $210=(($206+8)&4294967295); //@line 4973 "cPickle.c"
        HEAP[$210]=$209; //@line 4973 "cPickle.c"
        var $211=(($206+8)&4294967295); //@line 4973 "cPickle.c"
        var $212=HEAP[$211]; //@line 4973 "cPickle.c"
        var $213=(($203+4*$212)&4294967295); //@line 4973 "cPickle.c"
        var $214=HEAP[$213]; //@line 4973 "cPickle.c"
        HEAP[$val]=$214; //@line 4973 "cPickle.c"
        __label__ = 120; break; //@line 4973 "cPickle.c"
      case 119: // $bb118
        var $215=HEAP[_UnpicklingError]; //@line 4973 "cPickle.c"
        _PyErr_SetString($215, ((__str88)&4294967295)); //@line 4973 "cPickle.c"
        HEAP[$val]=0; //@line 4973 "cPickle.c"
        __label__ = 120; break; //@line 4973 "cPickle.c"
      case 120: // $bb119
        var $216=HEAP[$val]; //@line 4974 "cPickle.c"
        HEAP[$0]=$216; //@line 4974 "cPickle.c"
        __label__ = 121; break; //@line 4974 "cPickle.c"
      case 121: // $bb120
        var $217=HEAP[$0]; //@line 4960 "cPickle.c"
        HEAP[$retval]=$217; //@line 4960 "cPickle.c"
        __label__ = 122; break; //@line 4960 "cPickle.c"
      case 122: // $return
        var $retval121=HEAP[$retval]; //@line 4960 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval121; //@line 4960 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _noload_obj($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $i=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 4986 "cPickle.c"
        var $2=_marker($1); //@line 4986 "cPickle.c"
        HEAP[$i]=$2; //@line 4986 "cPickle.c"
        var $3=HEAP[$i]; //@line 4986 "cPickle.c"
        var $4=((($3))|0) < 0; //@line 4986 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4986 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 4986 "cPickle.c"
        __label__ = 3; break; //@line 4986 "cPickle.c"
      case 2: // $bb1
        var $5=HEAP[$i]; //@line 4987 "cPickle.c"
        var $6=((($5) + 1)&4294967295); //@line 4987 "cPickle.c"
        var $7=HEAP[$self_addr]; //@line 4987 "cPickle.c"
        var $8=(($7+32)&4294967295); //@line 4987 "cPickle.c"
        var $9=HEAP[$8]; //@line 4987 "cPickle.c"
        var $10=_Pdata_clear($9, $6); //@line 4987 "cPickle.c"
        HEAP[$0]=$10; //@line 4987 "cPickle.c"
        __label__ = 3; break; //@line 4987 "cPickle.c"
      case 3: // $bb2
        var $11=HEAP[$0]; //@line 4986 "cPickle.c"
        HEAP[$retval]=$11; //@line 4986 "cPickle.c"
        __label__ = 4; break; //@line 4986 "cPickle.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 4986 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 4986 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _noload_inst($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $i=__stackBase__+12;
        var $s=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 4997 "cPickle.c"
        var $2=_marker($1); //@line 4997 "cPickle.c"
        HEAP[$i]=$2; //@line 4997 "cPickle.c"
        var $3=HEAP[$i]; //@line 4997 "cPickle.c"
        var $4=((($3))|0) < 0; //@line 4997 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4997 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 4997 "cPickle.c"
        __label__ = 10; break; //@line 4997 "cPickle.c"
      case 2: // $bb1
        var $5=HEAP[$self_addr]; //@line 4998 "cPickle.c"
        var $6=(($5+32)&4294967295); //@line 4998 "cPickle.c"
        var $7=HEAP[$6]; //@line 4998 "cPickle.c"
        var $8=HEAP[$i]; //@line 4998 "cPickle.c"
        var $9=_Pdata_clear($7, $8); //@line 4998 "cPickle.c"
        var $10=HEAP[$self_addr]; //@line 4999 "cPickle.c"
        var $11=(($10+64)&4294967295); //@line 4999 "cPickle.c"
        var $12=HEAP[$11]; //@line 4999 "cPickle.c"
        var $13=HEAP[$self_addr]; //@line 4999 "cPickle.c"
        var $14=FUNCTION_TABLE[$12]($13, $s); //@line 4999 "cPickle.c"
        var $15=((($14))|0) < 0; //@line 4999 "cPickle.c"
        if ($15) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4999 "cPickle.c"
      case 3: // $bb2
        HEAP[$0]=-1; //@line 4999 "cPickle.c"
        __label__ = 10; break; //@line 4999 "cPickle.c"
      case 4: // $bb3
        var $16=HEAP[$self_addr]; //@line 5000 "cPickle.c"
        var $17=(($16+64)&4294967295); //@line 5000 "cPickle.c"
        var $18=HEAP[$17]; //@line 5000 "cPickle.c"
        var $19=HEAP[$self_addr]; //@line 5000 "cPickle.c"
        var $20=FUNCTION_TABLE[$18]($19, $s); //@line 5000 "cPickle.c"
        var $21=((($20))|0) < 0; //@line 5000 "cPickle.c"
        if ($21) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5000 "cPickle.c"
      case 5: // $bb4
        HEAP[$0]=-1; //@line 5000 "cPickle.c"
        __label__ = 10; break; //@line 5000 "cPickle.c"
      case 6: // $bb5
        var $22=HEAP[$self_addr]; //@line 5001 "cPickle.c"
        var $23=(($22+32)&4294967295); //@line 5001 "cPickle.c"
        var $24=HEAP[$23]; //@line 5001 "cPickle.c"
        var $25=(($24+8)&4294967295); //@line 5001 "cPickle.c"
        var $26=HEAP[$25]; //@line 5001 "cPickle.c"
        var $27=HEAP[$self_addr]; //@line 5001 "cPickle.c"
        var $28=(($27+32)&4294967295); //@line 5001 "cPickle.c"
        var $29=HEAP[$28]; //@line 5001 "cPickle.c"
        var $30=(($29+12)&4294967295); //@line 5001 "cPickle.c"
        var $31=HEAP[$30]; //@line 5001 "cPickle.c"
        var $32=((($26))|0)==((($31))|0); //@line 5001 "cPickle.c"
        if ($32) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 5001 "cPickle.c"
      case 7: // $bb6
        var $33=HEAP[$self_addr]; //@line 5001 "cPickle.c"
        var $34=(($33+32)&4294967295); //@line 5001 "cPickle.c"
        var $35=HEAP[$34]; //@line 5001 "cPickle.c"
        var $36=_Pdata_grow($35); //@line 5001 "cPickle.c"
        var $37=((($36))|0) < 0; //@line 5001 "cPickle.c"
        if ($37) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 5001 "cPickle.c"
      case 8: // $bb7
        HEAP[$0]=-1; //@line 5001 "cPickle.c"
        __label__ = 10; break; //@line 5001 "cPickle.c"
      case 9: // $bb8
        var $38=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 5001 "cPickle.c"
        var $39=((($38) + 1)&4294967295); //@line 5001 "cPickle.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$39; //@line 5001 "cPickle.c"
        var $40=HEAP[$self_addr]; //@line 5001 "cPickle.c"
        var $41=(($40+32)&4294967295); //@line 5001 "cPickle.c"
        var $42=HEAP[$41]; //@line 5001 "cPickle.c"
        var $43=(($42+16)&4294967295); //@line 5001 "cPickle.c"
        var $44=HEAP[$43]; //@line 5001 "cPickle.c"
        var $45=HEAP[$self_addr]; //@line 5001 "cPickle.c"
        var $46=(($45+32)&4294967295); //@line 5001 "cPickle.c"
        var $47=HEAP[$46]; //@line 5001 "cPickle.c"
        var $48=(($47+8)&4294967295); //@line 5001 "cPickle.c"
        var $49=HEAP[$48]; //@line 5001 "cPickle.c"
        var $50=(($44+4*$49)&4294967295); //@line 5001 "cPickle.c"
        HEAP[$50]=__Py_NoneStruct; //@line 5001 "cPickle.c"
        var $51=((($49) + 1)&4294967295); //@line 5001 "cPickle.c"
        var $52=(($47+8)&4294967295); //@line 5001 "cPickle.c"
        HEAP[$52]=$51; //@line 5001 "cPickle.c"
        HEAP[$0]=0; //@line 5002 "cPickle.c"
        __label__ = 10; break; //@line 5002 "cPickle.c"
      case 10: // $bb9
        var $53=HEAP[$0]; //@line 4997 "cPickle.c"
        HEAP[$retval]=$53; //@line 4997 "cPickle.c"
        __label__ = 11; break; //@line 4997 "cPickle.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 4997 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 4997 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _noload_newobj($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $obj=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 5010 "cPickle.c"
        var $2=(($1+32)&4294967295); //@line 5010 "cPickle.c"
        var $3=HEAP[$2]; //@line 5010 "cPickle.c"
        var $4=(($3+8)&4294967295); //@line 5010 "cPickle.c"
        var $5=HEAP[$4]; //@line 5010 "cPickle.c"
        var $6=((($5))|0)!=0; //@line 5010 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 5010 "cPickle.c"
      case 1: // $bb
        var $7=HEAP[$self_addr]; //@line 5010 "cPickle.c"
        var $8=(($7+32)&4294967295); //@line 5010 "cPickle.c"
        var $9=HEAP[$8]; //@line 5010 "cPickle.c"
        var $10=(($9+16)&4294967295); //@line 5010 "cPickle.c"
        var $11=HEAP[$10]; //@line 5010 "cPickle.c"
        var $12=HEAP[$self_addr]; //@line 5010 "cPickle.c"
        var $13=(($12+32)&4294967295); //@line 5010 "cPickle.c"
        var $14=HEAP[$13]; //@line 5010 "cPickle.c"
        var $15=(($14+8)&4294967295); //@line 5010 "cPickle.c"
        var $16=HEAP[$15]; //@line 5010 "cPickle.c"
        var $17=((($16) - 1)&4294967295); //@line 5010 "cPickle.c"
        var $18=(($14+8)&4294967295); //@line 5010 "cPickle.c"
        HEAP[$18]=$17; //@line 5010 "cPickle.c"
        var $19=(($14+8)&4294967295); //@line 5010 "cPickle.c"
        var $20=HEAP[$19]; //@line 5010 "cPickle.c"
        var $21=(($11+4*$20)&4294967295); //@line 5010 "cPickle.c"
        var $22=HEAP[$21]; //@line 5010 "cPickle.c"
        HEAP[$obj]=$22; //@line 5010 "cPickle.c"
        __label__ = 3; break; //@line 5010 "cPickle.c"
      case 2: // $bb1
        var $23=HEAP[_UnpicklingError]; //@line 5010 "cPickle.c"
        _PyErr_SetString($23, ((__str88)&4294967295)); //@line 5010 "cPickle.c"
        HEAP[$obj]=0; //@line 5010 "cPickle.c"
        __label__ = 3; break; //@line 5010 "cPickle.c"
      case 3: // $bb2
        var $24=HEAP[$obj]; //@line 5011 "cPickle.c"
        var $25=($24)==0; //@line 5011 "cPickle.c"
        if ($25) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 5011 "cPickle.c"
      case 4: // $bb3
        HEAP[$0]=-1; //@line 5011 "cPickle.c"
        __label__ = 18; break; //@line 5011 "cPickle.c"
      case 5: // $bb4
        var $26=HEAP[$obj]; //@line 5012 "cPickle.c"
        var $27=(($26)&4294967295); //@line 5012 "cPickle.c"
        var $28=HEAP[$27]; //@line 5012 "cPickle.c"
        var $29=((($28) - 1)&4294967295); //@line 5012 "cPickle.c"
        var $30=HEAP[$obj]; //@line 5012 "cPickle.c"
        var $31=(($30)&4294967295); //@line 5012 "cPickle.c"
        HEAP[$31]=$29; //@line 5012 "cPickle.c"
        var $32=HEAP[$obj]; //@line 5012 "cPickle.c"
        var $33=(($32)&4294967295); //@line 5012 "cPickle.c"
        var $34=HEAP[$33]; //@line 5012 "cPickle.c"
        var $35=((($34))|0)==0; //@line 5012 "cPickle.c"
        if ($35) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 5012 "cPickle.c"
      case 6: // $bb5
        var $36=HEAP[$obj]; //@line 5012 "cPickle.c"
        var $37=(($36+4)&4294967295); //@line 5012 "cPickle.c"
        var $38=HEAP[$37]; //@line 5012 "cPickle.c"
        var $39=(($38+24)&4294967295); //@line 5012 "cPickle.c"
        var $40=HEAP[$39]; //@line 5012 "cPickle.c"
        var $41=HEAP[$obj]; //@line 5012 "cPickle.c"
        FUNCTION_TABLE[$40]($41); //@line 5012 "cPickle.c"
        __label__ = 7; break; //@line 5012 "cPickle.c"
      case 7: // $bb6
        var $42=HEAP[$self_addr]; //@line 5014 "cPickle.c"
        var $43=(($42+32)&4294967295); //@line 5014 "cPickle.c"
        var $44=HEAP[$43]; //@line 5014 "cPickle.c"
        var $45=(($44+8)&4294967295); //@line 5014 "cPickle.c"
        var $46=HEAP[$45]; //@line 5014 "cPickle.c"
        var $47=((($46))|0)!=0; //@line 5014 "cPickle.c"
        if ($47) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 5014 "cPickle.c"
      case 8: // $bb7
        var $48=HEAP[$self_addr]; //@line 5014 "cPickle.c"
        var $49=(($48+32)&4294967295); //@line 5014 "cPickle.c"
        var $50=HEAP[$49]; //@line 5014 "cPickle.c"
        var $51=(($50+16)&4294967295); //@line 5014 "cPickle.c"
        var $52=HEAP[$51]; //@line 5014 "cPickle.c"
        var $53=HEAP[$self_addr]; //@line 5014 "cPickle.c"
        var $54=(($53+32)&4294967295); //@line 5014 "cPickle.c"
        var $55=HEAP[$54]; //@line 5014 "cPickle.c"
        var $56=(($55+8)&4294967295); //@line 5014 "cPickle.c"
        var $57=HEAP[$56]; //@line 5014 "cPickle.c"
        var $58=((($57) - 1)&4294967295); //@line 5014 "cPickle.c"
        var $59=(($55+8)&4294967295); //@line 5014 "cPickle.c"
        HEAP[$59]=$58; //@line 5014 "cPickle.c"
        var $60=(($55+8)&4294967295); //@line 5014 "cPickle.c"
        var $61=HEAP[$60]; //@line 5014 "cPickle.c"
        var $62=(($52+4*$61)&4294967295); //@line 5014 "cPickle.c"
        var $63=HEAP[$62]; //@line 5014 "cPickle.c"
        HEAP[$obj]=$63; //@line 5014 "cPickle.c"
        __label__ = 10; break; //@line 5014 "cPickle.c"
      case 9: // $bb8
        var $64=HEAP[_UnpicklingError]; //@line 5014 "cPickle.c"
        _PyErr_SetString($64, ((__str88)&4294967295)); //@line 5014 "cPickle.c"
        HEAP[$obj]=0; //@line 5014 "cPickle.c"
        __label__ = 10; break; //@line 5014 "cPickle.c"
      case 10: // $bb9
        var $65=HEAP[$obj]; //@line 5015 "cPickle.c"
        var $66=($65)==0; //@line 5015 "cPickle.c"
        if ($66) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 5015 "cPickle.c"
      case 11: // $bb10
        HEAP[$0]=-1; //@line 5015 "cPickle.c"
        __label__ = 18; break; //@line 5015 "cPickle.c"
      case 12: // $bb11
        var $67=HEAP[$obj]; //@line 5016 "cPickle.c"
        var $68=(($67)&4294967295); //@line 5016 "cPickle.c"
        var $69=HEAP[$68]; //@line 5016 "cPickle.c"
        var $70=((($69) - 1)&4294967295); //@line 5016 "cPickle.c"
        var $71=HEAP[$obj]; //@line 5016 "cPickle.c"
        var $72=(($71)&4294967295); //@line 5016 "cPickle.c"
        HEAP[$72]=$70; //@line 5016 "cPickle.c"
        var $73=HEAP[$obj]; //@line 5016 "cPickle.c"
        var $74=(($73)&4294967295); //@line 5016 "cPickle.c"
        var $75=HEAP[$74]; //@line 5016 "cPickle.c"
        var $76=((($75))|0)==0; //@line 5016 "cPickle.c"
        if ($76) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 5016 "cPickle.c"
      case 13: // $bb12
        var $77=HEAP[$obj]; //@line 5016 "cPickle.c"
        var $78=(($77+4)&4294967295); //@line 5016 "cPickle.c"
        var $79=HEAP[$78]; //@line 5016 "cPickle.c"
        var $80=(($79+24)&4294967295); //@line 5016 "cPickle.c"
        var $81=HEAP[$80]; //@line 5016 "cPickle.c"
        var $82=HEAP[$obj]; //@line 5016 "cPickle.c"
        FUNCTION_TABLE[$81]($82); //@line 5016 "cPickle.c"
        __label__ = 14; break; //@line 5016 "cPickle.c"
      case 14: // $bb13
        var $83=HEAP[$self_addr]; //@line 5018 "cPickle.c"
        var $84=(($83+32)&4294967295); //@line 5018 "cPickle.c"
        var $85=HEAP[$84]; //@line 5018 "cPickle.c"
        var $86=(($85+8)&4294967295); //@line 5018 "cPickle.c"
        var $87=HEAP[$86]; //@line 5018 "cPickle.c"
        var $88=HEAP[$self_addr]; //@line 5018 "cPickle.c"
        var $89=(($88+32)&4294967295); //@line 5018 "cPickle.c"
        var $90=HEAP[$89]; //@line 5018 "cPickle.c"
        var $91=(($90+12)&4294967295); //@line 5018 "cPickle.c"
        var $92=HEAP[$91]; //@line 5018 "cPickle.c"
        var $93=((($87))|0)==((($92))|0); //@line 5018 "cPickle.c"
        if ($93) { __label__ = 15; break; } else { __label__ = 17; break; } //@line 5018 "cPickle.c"
      case 15: // $bb14
        var $94=HEAP[$self_addr]; //@line 5018 "cPickle.c"
        var $95=(($94+32)&4294967295); //@line 5018 "cPickle.c"
        var $96=HEAP[$95]; //@line 5018 "cPickle.c"
        var $97=_Pdata_grow($96); //@line 5018 "cPickle.c"
        var $98=((($97))|0) < 0; //@line 5018 "cPickle.c"
        if ($98) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 5018 "cPickle.c"
      case 16: // $bb15
        HEAP[$0]=-1; //@line 5018 "cPickle.c"
        __label__ = 18; break; //@line 5018 "cPickle.c"
      case 17: // $bb16
        var $99=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 5018 "cPickle.c"
        var $100=((($99) + 1)&4294967295); //@line 5018 "cPickle.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$100; //@line 5018 "cPickle.c"
        var $101=HEAP[$self_addr]; //@line 5018 "cPickle.c"
        var $102=(($101+32)&4294967295); //@line 5018 "cPickle.c"
        var $103=HEAP[$102]; //@line 5018 "cPickle.c"
        var $104=(($103+16)&4294967295); //@line 5018 "cPickle.c"
        var $105=HEAP[$104]; //@line 5018 "cPickle.c"
        var $106=HEAP[$self_addr]; //@line 5018 "cPickle.c"
        var $107=(($106+32)&4294967295); //@line 5018 "cPickle.c"
        var $108=HEAP[$107]; //@line 5018 "cPickle.c"
        var $109=(($108+8)&4294967295); //@line 5018 "cPickle.c"
        var $110=HEAP[$109]; //@line 5018 "cPickle.c"
        var $111=(($105+4*$110)&4294967295); //@line 5018 "cPickle.c"
        HEAP[$111]=__Py_NoneStruct; //@line 5018 "cPickle.c"
        var $112=((($110) + 1)&4294967295); //@line 5018 "cPickle.c"
        var $113=(($108+8)&4294967295); //@line 5018 "cPickle.c"
        HEAP[$113]=$112; //@line 5018 "cPickle.c"
        HEAP[$0]=0; //@line 5019 "cPickle.c"
        __label__ = 18; break; //@line 5019 "cPickle.c"
      case 18: // $bb17
        var $114=HEAP[$0]; //@line 5011 "cPickle.c"
        HEAP[$retval]=$114; //@line 5011 "cPickle.c"
        __label__ = 19; break; //@line 5011 "cPickle.c"
      case 19: // $return
        var $retval18=HEAP[$retval]; //@line 5011 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval18; //@line 5011 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _noload_global($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $s=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 5027 "cPickle.c"
        var $2=(($1+64)&4294967295); //@line 5027 "cPickle.c"
        var $3=HEAP[$2]; //@line 5027 "cPickle.c"
        var $4=HEAP[$self_addr]; //@line 5027 "cPickle.c"
        var $5=FUNCTION_TABLE[$3]($4, $s); //@line 5027 "cPickle.c"
        var $6=((($5))|0) < 0; //@line 5027 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 5027 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 5027 "cPickle.c"
        __label__ = 8; break; //@line 5027 "cPickle.c"
      case 2: // $bb1
        var $7=HEAP[$self_addr]; //@line 5028 "cPickle.c"
        var $8=(($7+64)&4294967295); //@line 5028 "cPickle.c"
        var $9=HEAP[$8]; //@line 5028 "cPickle.c"
        var $10=HEAP[$self_addr]; //@line 5028 "cPickle.c"
        var $11=FUNCTION_TABLE[$9]($10, $s); //@line 5028 "cPickle.c"
        var $12=((($11))|0) < 0; //@line 5028 "cPickle.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 5028 "cPickle.c"
      case 3: // $bb2
        HEAP[$0]=-1; //@line 5028 "cPickle.c"
        __label__ = 8; break; //@line 5028 "cPickle.c"
      case 4: // $bb3
        var $13=HEAP[$self_addr]; //@line 5029 "cPickle.c"
        var $14=(($13+32)&4294967295); //@line 5029 "cPickle.c"
        var $15=HEAP[$14]; //@line 5029 "cPickle.c"
        var $16=(($15+8)&4294967295); //@line 5029 "cPickle.c"
        var $17=HEAP[$16]; //@line 5029 "cPickle.c"
        var $18=HEAP[$self_addr]; //@line 5029 "cPickle.c"
        var $19=(($18+32)&4294967295); //@line 5029 "cPickle.c"
        var $20=HEAP[$19]; //@line 5029 "cPickle.c"
        var $21=(($20+12)&4294967295); //@line 5029 "cPickle.c"
        var $22=HEAP[$21]; //@line 5029 "cPickle.c"
        var $23=((($17))|0)==((($22))|0); //@line 5029 "cPickle.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 5029 "cPickle.c"
      case 5: // $bb4
        var $24=HEAP[$self_addr]; //@line 5029 "cPickle.c"
        var $25=(($24+32)&4294967295); //@line 5029 "cPickle.c"
        var $26=HEAP[$25]; //@line 5029 "cPickle.c"
        var $27=_Pdata_grow($26); //@line 5029 "cPickle.c"
        var $28=((($27))|0) < 0; //@line 5029 "cPickle.c"
        if ($28) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 5029 "cPickle.c"
      case 6: // $bb5
        HEAP[$0]=-1; //@line 5029 "cPickle.c"
        __label__ = 8; break; //@line 5029 "cPickle.c"
      case 7: // $bb6
        var $29=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 5029 "cPickle.c"
        var $30=((($29) + 1)&4294967295); //@line 5029 "cPickle.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$30; //@line 5029 "cPickle.c"
        var $31=HEAP[$self_addr]; //@line 5029 "cPickle.c"
        var $32=(($31+32)&4294967295); //@line 5029 "cPickle.c"
        var $33=HEAP[$32]; //@line 5029 "cPickle.c"
        var $34=(($33+16)&4294967295); //@line 5029 "cPickle.c"
        var $35=HEAP[$34]; //@line 5029 "cPickle.c"
        var $36=HEAP[$self_addr]; //@line 5029 "cPickle.c"
        var $37=(($36+32)&4294967295); //@line 5029 "cPickle.c"
        var $38=HEAP[$37]; //@line 5029 "cPickle.c"
        var $39=(($38+8)&4294967295); //@line 5029 "cPickle.c"
        var $40=HEAP[$39]; //@line 5029 "cPickle.c"
        var $41=(($35+4*$40)&4294967295); //@line 5029 "cPickle.c"
        HEAP[$41]=__Py_NoneStruct; //@line 5029 "cPickle.c"
        var $42=((($40) + 1)&4294967295); //@line 5029 "cPickle.c"
        var $43=(($38+8)&4294967295); //@line 5029 "cPickle.c"
        HEAP[$43]=$42; //@line 5029 "cPickle.c"
        HEAP[$0]=0; //@line 5030 "cPickle.c"
        __label__ = 8; break; //@line 5030 "cPickle.c"
      case 8: // $bb7
        var $44=HEAP[$0]; //@line 5027 "cPickle.c"
        HEAP[$retval]=$44; //@line 5027 "cPickle.c"
        __label__ = 9; break; //@line 5027 "cPickle.c"
      case 9: // $return
        var $retval8=HEAP[$retval]; //@line 5027 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval8; //@line 5027 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _noload_reduce($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 5037 "cPickle.c"
        var $2=(($1+32)&4294967295); //@line 5037 "cPickle.c"
        var $3=HEAP[$2]; //@line 5037 "cPickle.c"
        var $4=(($3+8)&4294967295); //@line 5037 "cPickle.c"
        var $5=HEAP[$4]; //@line 5037 "cPickle.c"
        var $6=((($5))|0) <= 1; //@line 5037 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 5037 "cPickle.c"
      case 1: // $bb
        var $7=_stackUnderflow(); //@line 5037 "cPickle.c"
        HEAP[$0]=$7; //@line 5037 "cPickle.c"
        __label__ = 6; break; //@line 5037 "cPickle.c"
      case 2: // $bb1
        var $8=HEAP[$self_addr]; //@line 5038 "cPickle.c"
        var $9=(($8+32)&4294967295); //@line 5038 "cPickle.c"
        var $10=HEAP[$9]; //@line 5038 "cPickle.c"
        var $11=(($10+8)&4294967295); //@line 5038 "cPickle.c"
        var $12=HEAP[$11]; //@line 5038 "cPickle.c"
        var $13=((($12) - 2)&4294967295); //@line 5038 "cPickle.c"
        var $14=HEAP[$self_addr]; //@line 5038 "cPickle.c"
        var $15=(($14+32)&4294967295); //@line 5038 "cPickle.c"
        var $16=HEAP[$15]; //@line 5038 "cPickle.c"
        var $17=_Pdata_clear($16, $13); //@line 5038 "cPickle.c"
        var $18=HEAP[$self_addr]; //@line 5039 "cPickle.c"
        var $19=(($18+32)&4294967295); //@line 5039 "cPickle.c"
        var $20=HEAP[$19]; //@line 5039 "cPickle.c"
        var $21=(($20+8)&4294967295); //@line 5039 "cPickle.c"
        var $22=HEAP[$21]; //@line 5039 "cPickle.c"
        var $23=HEAP[$self_addr]; //@line 5039 "cPickle.c"
        var $24=(($23+32)&4294967295); //@line 5039 "cPickle.c"
        var $25=HEAP[$24]; //@line 5039 "cPickle.c"
        var $26=(($25+12)&4294967295); //@line 5039 "cPickle.c"
        var $27=HEAP[$26]; //@line 5039 "cPickle.c"
        var $28=((($22))|0)==((($27))|0); //@line 5039 "cPickle.c"
        if ($28) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 5039 "cPickle.c"
      case 3: // $bb2
        var $29=HEAP[$self_addr]; //@line 5039 "cPickle.c"
        var $30=(($29+32)&4294967295); //@line 5039 "cPickle.c"
        var $31=HEAP[$30]; //@line 5039 "cPickle.c"
        var $32=_Pdata_grow($31); //@line 5039 "cPickle.c"
        var $33=((($32))|0) < 0; //@line 5039 "cPickle.c"
        if ($33) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 5039 "cPickle.c"
      case 4: // $bb3
        HEAP[$0]=-1; //@line 5039 "cPickle.c"
        __label__ = 6; break; //@line 5039 "cPickle.c"
      case 5: // $bb4
        var $34=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 5039 "cPickle.c"
        var $35=((($34) + 1)&4294967295); //@line 5039 "cPickle.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$35; //@line 5039 "cPickle.c"
        var $36=HEAP[$self_addr]; //@line 5039 "cPickle.c"
        var $37=(($36+32)&4294967295); //@line 5039 "cPickle.c"
        var $38=HEAP[$37]; //@line 5039 "cPickle.c"
        var $39=(($38+16)&4294967295); //@line 5039 "cPickle.c"
        var $40=HEAP[$39]; //@line 5039 "cPickle.c"
        var $41=HEAP[$self_addr]; //@line 5039 "cPickle.c"
        var $42=(($41+32)&4294967295); //@line 5039 "cPickle.c"
        var $43=HEAP[$42]; //@line 5039 "cPickle.c"
        var $44=(($43+8)&4294967295); //@line 5039 "cPickle.c"
        var $45=HEAP[$44]; //@line 5039 "cPickle.c"
        var $46=(($40+4*$45)&4294967295); //@line 5039 "cPickle.c"
        HEAP[$46]=__Py_NoneStruct; //@line 5039 "cPickle.c"
        var $47=((($45) + 1)&4294967295); //@line 5039 "cPickle.c"
        var $48=(($43+8)&4294967295); //@line 5039 "cPickle.c"
        HEAP[$48]=$47; //@line 5039 "cPickle.c"
        HEAP[$0]=0; //@line 5040 "cPickle.c"
        __label__ = 6; break; //@line 5040 "cPickle.c"
      case 6: // $bb5
        var $49=HEAP[$0]; //@line 5037 "cPickle.c"
        HEAP[$retval]=$49; //@line 5037 "cPickle.c"
        __label__ = 7; break; //@line 5037 "cPickle.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 5037 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 5037 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _noload_build($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 5046 "cPickle.c"
        var $2=(($1+32)&4294967295); //@line 5046 "cPickle.c"
        var $3=HEAP[$2]; //@line 5046 "cPickle.c"
        var $4=(($3+8)&4294967295); //@line 5046 "cPickle.c"
        var $5=HEAP[$4]; //@line 5046 "cPickle.c"
        var $6=((($5))|0) <= 0; //@line 5046 "cPickle.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 5046 "cPickle.c"
      case 1: // $bb
        var $7=_stackUnderflow(); //@line 5046 "cPickle.c"
        HEAP[$0]=$7; //@line 5046 "cPickle.c"
        __label__ = 3; break; //@line 5046 "cPickle.c"
      case 2: // $bb1
        var $8=HEAP[$self_addr]; //@line 5047 "cPickle.c"
        var $9=(($8+32)&4294967295); //@line 5047 "cPickle.c"
        var $10=HEAP[$9]; //@line 5047 "cPickle.c"
        var $11=(($10+8)&4294967295); //@line 5047 "cPickle.c"
        var $12=HEAP[$11]; //@line 5047 "cPickle.c"
        var $13=((($12) - 1)&4294967295); //@line 5047 "cPickle.c"
        var $14=HEAP[$self_addr]; //@line 5047 "cPickle.c"
        var $15=(($14+32)&4294967295); //@line 5047 "cPickle.c"
        var $16=HEAP[$15]; //@line 5047 "cPickle.c"
        var $17=_Pdata_clear($16, $13); //@line 5047 "cPickle.c"
        HEAP[$0]=0; //@line 5048 "cPickle.c"
        __label__ = 3; break; //@line 5048 "cPickle.c"
      case 3: // $bb2
        var $18=HEAP[$0]; //@line 5046 "cPickle.c"
        HEAP[$retval]=$18; //@line 5046 "cPickle.c"
        __label__ = 4; break; //@line 5046 "cPickle.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 5046 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 5046 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _noload_extension($self, $nbytes) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $nbytes_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $codebytes=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$nbytes_addr]=$nbytes;
        var $1=HEAP[$nbytes_addr]; //@line 5056 "cPickle.c"
        var $2=((($1))|0)!=1; //@line 5056 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 5056 "cPickle.c"
      case 1: // $bb
        var $3=HEAP[$nbytes_addr]; //@line 5056 "cPickle.c"
        var $4=((($3))|0)!=2; //@line 5056 "cPickle.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 5056 "cPickle.c"
      case 2: // $bb1
        var $5=HEAP[$nbytes_addr]; //@line 5056 "cPickle.c"
        var $6=((($5))|0)!=4; //@line 5056 "cPickle.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 5056 "cPickle.c"
      case 3: // $bb2
        ___assert_fail(((__str93)&4294967295), ((__str15)&4294967295), 5056, ((___PRETTY_FUNCTION___15558)&4294967295)); //@line 5056 "cPickle.c"
        throw "Reached an unreachable! Original .ll line: 23534"; //@line 5056 "cPickle.c"
      case 4: // $bb3
        var $7=HEAP[$self_addr]; //@line 5057 "cPickle.c"
        var $8=(($7+60)&4294967295); //@line 5057 "cPickle.c"
        var $9=HEAP[$8]; //@line 5057 "cPickle.c"
        var $10=HEAP[$self_addr]; //@line 5057 "cPickle.c"
        var $11=HEAP[$nbytes_addr]; //@line 5057 "cPickle.c"
        var $12=FUNCTION_TABLE[$9]($10, $codebytes, $11); //@line 5057 "cPickle.c"
        var $13=((($12))|0) < 0; //@line 5057 "cPickle.c"
        if ($13) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5057 "cPickle.c"
      case 5: // $bb4
        HEAP[$0]=-1; //@line 5057 "cPickle.c"
        __label__ = 10; break; //@line 5057 "cPickle.c"
      case 6: // $bb5
        var $14=HEAP[$self_addr]; //@line 5058 "cPickle.c"
        var $15=(($14+32)&4294967295); //@line 5058 "cPickle.c"
        var $16=HEAP[$15]; //@line 5058 "cPickle.c"
        var $17=(($16+8)&4294967295); //@line 5058 "cPickle.c"
        var $18=HEAP[$17]; //@line 5058 "cPickle.c"
        var $19=HEAP[$self_addr]; //@line 5058 "cPickle.c"
        var $20=(($19+32)&4294967295); //@line 5058 "cPickle.c"
        var $21=HEAP[$20]; //@line 5058 "cPickle.c"
        var $22=(($21+12)&4294967295); //@line 5058 "cPickle.c"
        var $23=HEAP[$22]; //@line 5058 "cPickle.c"
        var $24=((($18))|0)==((($23))|0); //@line 5058 "cPickle.c"
        if ($24) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 5058 "cPickle.c"
      case 7: // $bb6
        var $25=HEAP[$self_addr]; //@line 5058 "cPickle.c"
        var $26=(($25+32)&4294967295); //@line 5058 "cPickle.c"
        var $27=HEAP[$26]; //@line 5058 "cPickle.c"
        var $28=_Pdata_grow($27); //@line 5058 "cPickle.c"
        var $29=((($28))|0) < 0; //@line 5058 "cPickle.c"
        if ($29) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 5058 "cPickle.c"
      case 8: // $bb7
        HEAP[$0]=-1; //@line 5058 "cPickle.c"
        __label__ = 10; break; //@line 5058 "cPickle.c"
      case 9: // $bb8
        var $30=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 5058 "cPickle.c"
        var $31=((($30) + 1)&4294967295); //@line 5058 "cPickle.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$31; //@line 5058 "cPickle.c"
        var $32=HEAP[$self_addr]; //@line 5058 "cPickle.c"
        var $33=(($32+32)&4294967295); //@line 5058 "cPickle.c"
        var $34=HEAP[$33]; //@line 5058 "cPickle.c"
        var $35=(($34+16)&4294967295); //@line 5058 "cPickle.c"
        var $36=HEAP[$35]; //@line 5058 "cPickle.c"
        var $37=HEAP[$self_addr]; //@line 5058 "cPickle.c"
        var $38=(($37+32)&4294967295); //@line 5058 "cPickle.c"
        var $39=HEAP[$38]; //@line 5058 "cPickle.c"
        var $40=(($39+8)&4294967295); //@line 5058 "cPickle.c"
        var $41=HEAP[$40]; //@line 5058 "cPickle.c"
        var $42=(($36+4*$41)&4294967295); //@line 5058 "cPickle.c"
        HEAP[$42]=__Py_NoneStruct; //@line 5058 "cPickle.c"
        var $43=((($41) + 1)&4294967295); //@line 5058 "cPickle.c"
        var $44=(($39+8)&4294967295); //@line 5058 "cPickle.c"
        HEAP[$44]=$43; //@line 5058 "cPickle.c"
        HEAP[$0]=0; //@line 5059 "cPickle.c"
        __label__ = 10; break; //@line 5059 "cPickle.c"
      case 10: // $bb9
        var $45=HEAP[$0]; //@line 5057 "cPickle.c"
        HEAP[$retval]=$45; //@line 5057 "cPickle.c"
        __label__ = 11; break; //@line 5057 "cPickle.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 5057 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 5057 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _noload_append($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 5065 "cPickle.c"
        var $2=(($1+32)&4294967295); //@line 5065 "cPickle.c"
        var $3=HEAP[$2]; //@line 5065 "cPickle.c"
        var $4=(($3+8)&4294967295); //@line 5065 "cPickle.c"
        var $5=HEAP[$4]; //@line 5065 "cPickle.c"
        var $6=((($5) - 1)&4294967295); //@line 5065 "cPickle.c"
        var $7=HEAP[$self_addr]; //@line 5065 "cPickle.c"
        var $8=(($7+32)&4294967295); //@line 5065 "cPickle.c"
        var $9=HEAP[$8]; //@line 5065 "cPickle.c"
        var $10=_Pdata_clear($9, $6); //@line 5065 "cPickle.c"
        HEAP[$0]=$10; //@line 5065 "cPickle.c"
        var $11=HEAP[$0]; //@line 5065 "cPickle.c"
        HEAP[$retval]=$11; //@line 5065 "cPickle.c"
        __label__ = 1; break; //@line 5065 "cPickle.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 5065 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 5065 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _noload_appends($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $i=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 5072 "cPickle.c"
        var $2=_marker($1); //@line 5072 "cPickle.c"
        HEAP[$i]=$2; //@line 5072 "cPickle.c"
        var $3=HEAP[$i]; //@line 5072 "cPickle.c"
        var $4=((($3))|0) < 0; //@line 5072 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 5072 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 5072 "cPickle.c"
        __label__ = 3; break; //@line 5072 "cPickle.c"
      case 2: // $bb1
        var $5=HEAP[$self_addr]; //@line 5073 "cPickle.c"
        var $6=(($5+32)&4294967295); //@line 5073 "cPickle.c"
        var $7=HEAP[$6]; //@line 5073 "cPickle.c"
        var $8=HEAP[$i]; //@line 5073 "cPickle.c"
        var $9=_Pdata_clear($7, $8); //@line 5073 "cPickle.c"
        HEAP[$0]=$9; //@line 5073 "cPickle.c"
        __label__ = 3; break; //@line 5073 "cPickle.c"
      case 3: // $bb2
        var $10=HEAP[$0]; //@line 5072 "cPickle.c"
        HEAP[$retval]=$10; //@line 5072 "cPickle.c"
        __label__ = 4; break; //@line 5072 "cPickle.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 5072 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 5072 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _noload_setitem($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 5079 "cPickle.c"
        var $2=(($1+32)&4294967295); //@line 5079 "cPickle.c"
        var $3=HEAP[$2]; //@line 5079 "cPickle.c"
        var $4=(($3+8)&4294967295); //@line 5079 "cPickle.c"
        var $5=HEAP[$4]; //@line 5079 "cPickle.c"
        var $6=((($5) - 2)&4294967295); //@line 5079 "cPickle.c"
        var $7=HEAP[$self_addr]; //@line 5079 "cPickle.c"
        var $8=(($7+32)&4294967295); //@line 5079 "cPickle.c"
        var $9=HEAP[$8]; //@line 5079 "cPickle.c"
        var $10=_Pdata_clear($9, $6); //@line 5079 "cPickle.c"
        HEAP[$0]=$10; //@line 5079 "cPickle.c"
        var $11=HEAP[$0]; //@line 5079 "cPickle.c"
        HEAP[$retval]=$11; //@line 5079 "cPickle.c"
        __label__ = 1; break; //@line 5079 "cPickle.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 5079 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 5079 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _noload_setitems($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $i=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 5086 "cPickle.c"
        var $2=_marker($1); //@line 5086 "cPickle.c"
        HEAP[$i]=$2; //@line 5086 "cPickle.c"
        var $3=HEAP[$i]; //@line 5086 "cPickle.c"
        var $4=((($3))|0) < 0; //@line 5086 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 5086 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 5086 "cPickle.c"
        __label__ = 3; break; //@line 5086 "cPickle.c"
      case 2: // $bb1
        var $5=HEAP[$self_addr]; //@line 5087 "cPickle.c"
        var $6=(($5+32)&4294967295); //@line 5087 "cPickle.c"
        var $7=HEAP[$6]; //@line 5087 "cPickle.c"
        var $8=HEAP[$i]; //@line 5087 "cPickle.c"
        var $9=_Pdata_clear($7, $8); //@line 5087 "cPickle.c"
        HEAP[$0]=$9; //@line 5087 "cPickle.c"
        __label__ = 3; break; //@line 5087 "cPickle.c"
      case 3: // $bb2
        var $10=HEAP[$0]; //@line 5086 "cPickle.c"
        HEAP[$retval]=$10; //@line 5086 "cPickle.c"
        __label__ = 4; break; //@line 5086 "cPickle.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 5086 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 5086 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _noload($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $err=__stackBase__+12;
        var $val=__stackBase__+16;
        var $s=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$err]=0; //@line 5093 "cPickle.c"
        HEAP[$val]=0; //@line 5093 "cPickle.c"
        var $1=HEAP[$self_addr]; //@line 5096 "cPickle.c"
        var $2=(($1+52)&4294967295); //@line 5096 "cPickle.c"
        HEAP[$2]=0; //@line 5096 "cPickle.c"
        var $3=HEAP[$self_addr]; //@line 5097 "cPickle.c"
        var $4=(($3+32)&4294967295); //@line 5097 "cPickle.c"
        var $5=HEAP[$4]; //@line 5097 "cPickle.c"
        var $6=_Pdata_clear($5, 0); //@line 5097 "cPickle.c"
        __label__ = 1; break; //@line 5097 "cPickle.c"
      case 1: // $bb
        var $7=HEAP[$self_addr]; //@line 5100 "cPickle.c"
        var $8=(($7+60)&4294967295); //@line 5100 "cPickle.c"
        var $9=HEAP[$8]; //@line 5100 "cPickle.c"
        var $10=HEAP[$self_addr]; //@line 5100 "cPickle.c"
        var $11=FUNCTION_TABLE[$9]($10, $s, 1); //@line 5100 "cPickle.c"
        var $12=((($11))|0) < 0; //@line 5100 "cPickle.c"
        if ($12) { __label__ = 111; break; } else { __label__ = 2; break; } //@line 5100 "cPickle.c"
      case 2: // $bb1
        var $13=HEAP[$s]; //@line 5103 "cPickle.c"
        var $14=(($13)&4294967295); //@line 5103 "cPickle.c"
        var $15=HEAP[$14]; //@line 5103 "cPickle.c"
        var $16=reSign(($15), 8, 0); //@line 5103 "cPickle.c"
        if ($16 == -128) {
          __label__ = 102; break;
        }
        else if ($16 == -127) {
          __label__ = 55; break;
        }
        else if ($16 == -126) {
          __label__ = 73; break;
        }
        else if ($16 == -125) {
          __label__ = 75; break;
        }
        else if ($16 == -124) {
          __label__ = 77; break;
        }
        else if ($16 == -123) {
          __label__ = 35; break;
        }
        else if ($16 == -122) {
          __label__ = 37; break;
        }
        else if ($16 == -121) {
          __label__ = 39; break;
        }
        else if ($16 == -120) {
          __label__ = 104; break;
        }
        else if ($16 == -119) {
          __label__ = 106; break;
        }
        else if ($16 == -118) {
          __label__ = 15; break;
        }
        else if ($16 == -117) {
          __label__ = 17; break;
        }
        else if ($16 == 40) {
          __label__ = 79; break;
        }
        else if ($16 == 41) {
          __label__ = 33; break;
        }
        else if ($16 == 46) {
          __label__ = 95; break;
        }
        else if ($16 == 48) {
          __label__ = 87; break;
        }
        else if ($16 == 49) {
          __label__ = 89; break;
        }
        else if ($16 == 50) {
          __label__ = 65; break;
        }
        else if ($16 == 70) {
          __label__ = 19; break;
        }
        else if ($16 == 71) {
          __label__ = 21; break;
        }
        else if ($16 == 73) {
          __label__ = 11; break;
        }
        else if ($16 == 74) {
          __label__ = 5; break;
        }
        else if ($16 == 75) {
          __label__ = 7; break;
        }
        else if ($16 == 76) {
          __label__ = 13; break;
        }
        else if ($16 == 77) {
          __label__ = 9; break;
        }
        else if ($16 == 78) {
          __label__ = 3; break;
        }
        else if ($16 == 80) {
          __label__ = 96; break;
        }
        else if ($16 == 81) {
          __label__ = 98; break;
        }
        else if ($16 == 82) {
          __label__ = 100; break;
        }
        else if ($16 == 83) {
          __label__ = 27; break;
        }
        else if ($16 == 84) {
          __label__ = 23; break;
        }
        else if ($16 == 85) {
          __label__ = 25; break;
        }
        else if ($16 == 86) {
          __label__ = 29; break;
        }
        else if ($16 == 88) {
          __label__ = 31; break;
        }
        else if ($16 == 93) {
          __label__ = 43; break;
        }
        else if ($16 == 97) {
          __label__ = 59; break;
        }
        else if ($16 == 98) {
          __label__ = 63; break;
        }
        else if ($16 == 99) {
          __label__ = 57; break;
        }
        else if ($16 == 100) {
          __label__ = 49; break;
        }
        else if ($16 == 101) {
          __label__ = 61; break;
        }
        else if ($16 == 103) {
          __label__ = 71; break;
        }
        else if ($16 == 104) {
          __label__ = 67; break;
        }
        else if ($16 == 105) {
          __label__ = 53; break;
        }
        else if ($16 == 106) {
          __label__ = 69; break;
        }
        else if ($16 == 108) {
          __label__ = 45; break;
        }
        else if ($16 == 111) {
          __label__ = 51; break;
        }
        else if ($16 == 112) {
          __label__ = 85; break;
        }
        else if ($16 == 113) {
          __label__ = 81; break;
        }
        else if ($16 == 114) {
          __label__ = 83; break;
        }
        else if ($16 == 115) {
          __label__ = 91; break;
        }
        else if ($16 == 116) {
          __label__ = 41; break;
        }
        else if ($16 == 117) {
          __label__ = 93; break;
        }
        else if ($16 == 125) {
          __label__ = 47; break;
        }
        else {
        __label__ = 108; break;
        }
        
      case 3: // $bb2
        var $17=HEAP[$self_addr]; //@line 5105 "cPickle.c"
        var $18=_load_none($17); //@line 5105 "cPickle.c"
        var $19=((($18))|0) < 0; //@line 5105 "cPickle.c"
        if ($19) { __label__ = 109; break; } else { __label__ = 4; break; } //@line 5105 "cPickle.c"
      case 4: // $bb3
        __label__ = 110; break; //@line 5105 "cPickle.c"
      case 5: // $bb4
        var $20=HEAP[$self_addr]; //@line 5110 "cPickle.c"
        var $21=_load_binint($20); //@line 5110 "cPickle.c"
        var $22=((($21))|0) < 0; //@line 5110 "cPickle.c"
        if ($22) { __label__ = 109; break; } else { __label__ = 6; break; } //@line 5110 "cPickle.c"
      case 6: // $bb5
        __label__ = 110; break; //@line 5110 "cPickle.c"
      case 7: // $bb6
        var $23=HEAP[$self_addr]; //@line 5115 "cPickle.c"
        var $24=_load_binint1($23); //@line 5115 "cPickle.c"
        var $25=((($24))|0) < 0; //@line 5115 "cPickle.c"
        if ($25) { __label__ = 109; break; } else { __label__ = 8; break; } //@line 5115 "cPickle.c"
      case 8: // $bb7
        __label__ = 110; break; //@line 5115 "cPickle.c"
      case 9: // $bb8
        var $26=HEAP[$self_addr]; //@line 5120 "cPickle.c"
        var $27=_load_binint2($26); //@line 5120 "cPickle.c"
        var $28=((($27))|0) < 0; //@line 5120 "cPickle.c"
        if ($28) { __label__ = 109; break; } else { __label__ = 10; break; } //@line 5120 "cPickle.c"
      case 10: // $bb9
        __label__ = 110; break; //@line 5120 "cPickle.c"
      case 11: // $bb10
        var $29=HEAP[$self_addr]; //@line 5125 "cPickle.c"
        var $30=_load_int($29); //@line 5125 "cPickle.c"
        var $31=((($30))|0) < 0; //@line 5125 "cPickle.c"
        if ($31) { __label__ = 109; break; } else { __label__ = 12; break; } //@line 5125 "cPickle.c"
      case 12: // $bb11
        __label__ = 110; break; //@line 5125 "cPickle.c"
      case 13: // $bb12
        var $32=HEAP[$self_addr]; //@line 5130 "cPickle.c"
        var $33=_load_long($32); //@line 5130 "cPickle.c"
        var $34=((($33))|0) < 0; //@line 5130 "cPickle.c"
        if ($34) { __label__ = 109; break; } else { __label__ = 14; break; } //@line 5130 "cPickle.c"
      case 14: // $bb13
        __label__ = 110; break; //@line 5130 "cPickle.c"
      case 15: // $bb14
        var $35=HEAP[$self_addr]; //@line 5135 "cPickle.c"
        var $36=_load_counted_long($35, 1); //@line 5135 "cPickle.c"
        var $37=((($36))|0) < 0; //@line 5135 "cPickle.c"
        if ($37) { __label__ = 109; break; } else { __label__ = 16; break; } //@line 5135 "cPickle.c"
      case 16: // $bb15
        __label__ = 110; break; //@line 5135 "cPickle.c"
      case 17: // $bb16
        var $38=HEAP[$self_addr]; //@line 5140 "cPickle.c"
        var $39=_load_counted_long($38, 4); //@line 5140 "cPickle.c"
        var $40=((($39))|0) < 0; //@line 5140 "cPickle.c"
        if ($40) { __label__ = 109; break; } else { __label__ = 18; break; } //@line 5140 "cPickle.c"
      case 18: // $bb17
        __label__ = 110; break; //@line 5140 "cPickle.c"
      case 19: // $bb18
        var $41=HEAP[$self_addr]; //@line 5145 "cPickle.c"
        var $42=_load_float($41); //@line 5145 "cPickle.c"
        var $43=((($42))|0) < 0; //@line 5145 "cPickle.c"
        if ($43) { __label__ = 109; break; } else { __label__ = 20; break; } //@line 5145 "cPickle.c"
      case 20: // $bb19
        __label__ = 110; break; //@line 5145 "cPickle.c"
      case 21: // $bb20
        var $44=HEAP[$self_addr]; //@line 5150 "cPickle.c"
        var $45=_load_binfloat($44); //@line 5150 "cPickle.c"
        var $46=((($45))|0) < 0; //@line 5150 "cPickle.c"
        if ($46) { __label__ = 109; break; } else { __label__ = 22; break; } //@line 5150 "cPickle.c"
      case 22: // $bb21
        __label__ = 110; break; //@line 5150 "cPickle.c"
      case 23: // $bb22
        var $47=HEAP[$self_addr]; //@line 5155 "cPickle.c"
        var $48=_load_binstring($47); //@line 5155 "cPickle.c"
        var $49=((($48))|0) < 0; //@line 5155 "cPickle.c"
        if ($49) { __label__ = 109; break; } else { __label__ = 24; break; } //@line 5155 "cPickle.c"
      case 24: // $bb23
        __label__ = 110; break; //@line 5155 "cPickle.c"
      case 25: // $bb24
        var $50=HEAP[$self_addr]; //@line 5160 "cPickle.c"
        var $51=_load_short_binstring($50); //@line 5160 "cPickle.c"
        var $52=((($51))|0) < 0; //@line 5160 "cPickle.c"
        if ($52) { __label__ = 109; break; } else { __label__ = 26; break; } //@line 5160 "cPickle.c"
      case 26: // $bb25
        __label__ = 110; break; //@line 5160 "cPickle.c"
      case 27: // $bb26
        var $53=HEAP[$self_addr]; //@line 5165 "cPickle.c"
        var $54=_load_string($53); //@line 5165 "cPickle.c"
        var $55=((($54))|0) < 0; //@line 5165 "cPickle.c"
        if ($55) { __label__ = 109; break; } else { __label__ = 28; break; } //@line 5165 "cPickle.c"
      case 28: // $bb27
        __label__ = 110; break; //@line 5165 "cPickle.c"
      case 29: // $bb28
        var $56=HEAP[$self_addr]; //@line 5171 "cPickle.c"
        var $57=_load_unicode($56); //@line 5171 "cPickle.c"
        var $58=((($57))|0) < 0; //@line 5171 "cPickle.c"
        if ($58) { __label__ = 109; break; } else { __label__ = 30; break; } //@line 5171 "cPickle.c"
      case 30: // $bb29
        __label__ = 110; break; //@line 5171 "cPickle.c"
      case 31: // $bb30
        var $59=HEAP[$self_addr]; //@line 5176 "cPickle.c"
        var $60=_load_binunicode($59); //@line 5176 "cPickle.c"
        var $61=((($60))|0) < 0; //@line 5176 "cPickle.c"
        if ($61) { __label__ = 109; break; } else { __label__ = 32; break; } //@line 5176 "cPickle.c"
      case 32: // $bb31
        __label__ = 110; break; //@line 5176 "cPickle.c"
      case 33: // $bb32
        var $62=HEAP[$self_addr]; //@line 5182 "cPickle.c"
        var $63=_load_counted_tuple($62, 0); //@line 5182 "cPickle.c"
        var $64=((($63))|0) < 0; //@line 5182 "cPickle.c"
        if ($64) { __label__ = 109; break; } else { __label__ = 34; break; } //@line 5182 "cPickle.c"
      case 34: // $bb33
        __label__ = 110; break; //@line 5182 "cPickle.c"
      case 35: // $bb34
        var $65=HEAP[$self_addr]; //@line 5187 "cPickle.c"
        var $66=_load_counted_tuple($65, 1); //@line 5187 "cPickle.c"
        var $67=((($66))|0) < 0; //@line 5187 "cPickle.c"
        if ($67) { __label__ = 109; break; } else { __label__ = 36; break; } //@line 5187 "cPickle.c"
      case 36: // $bb35
        __label__ = 110; break; //@line 5187 "cPickle.c"
      case 37: // $bb36
        var $68=HEAP[$self_addr]; //@line 5192 "cPickle.c"
        var $69=_load_counted_tuple($68, 2); //@line 5192 "cPickle.c"
        var $70=((($69))|0) < 0; //@line 5192 "cPickle.c"
        if ($70) { __label__ = 109; break; } else { __label__ = 38; break; } //@line 5192 "cPickle.c"
      case 38: // $bb37
        __label__ = 110; break; //@line 5192 "cPickle.c"
      case 39: // $bb38
        var $71=HEAP[$self_addr]; //@line 5197 "cPickle.c"
        var $72=_load_counted_tuple($71, 3); //@line 5197 "cPickle.c"
        var $73=((($72))|0) < 0; //@line 5197 "cPickle.c"
        if ($73) { __label__ = 109; break; } else { __label__ = 40; break; } //@line 5197 "cPickle.c"
      case 40: // $bb39
        __label__ = 110; break; //@line 5197 "cPickle.c"
      case 41: // $bb40
        var $74=HEAP[$self_addr]; //@line 5202 "cPickle.c"
        var $75=_load_tuple($74); //@line 5202 "cPickle.c"
        var $76=((($75))|0) < 0; //@line 5202 "cPickle.c"
        if ($76) { __label__ = 109; break; } else { __label__ = 42; break; } //@line 5202 "cPickle.c"
      case 42: // $bb41
        __label__ = 110; break; //@line 5202 "cPickle.c"
      case 43: // $bb42
        var $77=HEAP[$self_addr]; //@line 5207 "cPickle.c"
        var $78=_load_empty_list($77); //@line 5207 "cPickle.c"
        var $79=((($78))|0) < 0; //@line 5207 "cPickle.c"
        if ($79) { __label__ = 109; break; } else { __label__ = 44; break; } //@line 5207 "cPickle.c"
      case 44: // $bb43
        __label__ = 110; break; //@line 5207 "cPickle.c"
      case 45: // $bb44
        var $80=HEAP[$self_addr]; //@line 5212 "cPickle.c"
        var $81=_load_list($80); //@line 5212 "cPickle.c"
        var $82=((($81))|0) < 0; //@line 5212 "cPickle.c"
        if ($82) { __label__ = 109; break; } else { __label__ = 46; break; } //@line 5212 "cPickle.c"
      case 46: // $bb45
        __label__ = 110; break; //@line 5212 "cPickle.c"
      case 47: // $bb46
        var $83=HEAP[$self_addr]; //@line 5217 "cPickle.c"
        var $84=_load_empty_dict($83); //@line 5217 "cPickle.c"
        var $85=((($84))|0) < 0; //@line 5217 "cPickle.c"
        if ($85) { __label__ = 109; break; } else { __label__ = 48; break; } //@line 5217 "cPickle.c"
      case 48: // $bb47
        __label__ = 110; break; //@line 5217 "cPickle.c"
      case 49: // $bb48
        var $86=HEAP[$self_addr]; //@line 5222 "cPickle.c"
        var $87=_load_dict($86); //@line 5222 "cPickle.c"
        var $88=((($87))|0) < 0; //@line 5222 "cPickle.c"
        if ($88) { __label__ = 109; break; } else { __label__ = 50; break; } //@line 5222 "cPickle.c"
      case 50: // $bb49
        __label__ = 110; break; //@line 5222 "cPickle.c"
      case 51: // $bb50
        var $89=HEAP[$self_addr]; //@line 5227 "cPickle.c"
        var $90=_noload_obj($89); //@line 5227 "cPickle.c"
        var $91=((($90))|0) < 0; //@line 5227 "cPickle.c"
        if ($91) { __label__ = 109; break; } else { __label__ = 52; break; } //@line 5227 "cPickle.c"
      case 52: // $bb51
        __label__ = 110; break; //@line 5227 "cPickle.c"
      case 53: // $bb52
        var $92=HEAP[$self_addr]; //@line 5232 "cPickle.c"
        var $93=_noload_inst($92); //@line 5232 "cPickle.c"
        var $94=((($93))|0) < 0; //@line 5232 "cPickle.c"
        if ($94) { __label__ = 109; break; } else { __label__ = 54; break; } //@line 5232 "cPickle.c"
      case 54: // $bb53
        __label__ = 110; break; //@line 5232 "cPickle.c"
      case 55: // $bb54
        var $95=HEAP[$self_addr]; //@line 5237 "cPickle.c"
        var $96=_noload_newobj($95); //@line 5237 "cPickle.c"
        var $97=((($96))|0) < 0; //@line 5237 "cPickle.c"
        if ($97) { __label__ = 109; break; } else { __label__ = 56; break; } //@line 5237 "cPickle.c"
      case 56: // $bb55
        __label__ = 110; break; //@line 5237 "cPickle.c"
      case 57: // $bb56
        var $98=HEAP[$self_addr]; //@line 5242 "cPickle.c"
        var $99=_noload_global($98); //@line 5242 "cPickle.c"
        var $100=((($99))|0) < 0; //@line 5242 "cPickle.c"
        if ($100) { __label__ = 109; break; } else { __label__ = 58; break; } //@line 5242 "cPickle.c"
      case 58: // $bb57
        __label__ = 110; break; //@line 5242 "cPickle.c"
      case 59: // $bb58
        var $101=HEAP[$self_addr]; //@line 5247 "cPickle.c"
        var $102=_noload_append($101); //@line 5247 "cPickle.c"
        var $103=((($102))|0) < 0; //@line 5247 "cPickle.c"
        if ($103) { __label__ = 109; break; } else { __label__ = 60; break; } //@line 5247 "cPickle.c"
      case 60: // $bb59
        __label__ = 110; break; //@line 5247 "cPickle.c"
      case 61: // $bb60
        var $104=HEAP[$self_addr]; //@line 5252 "cPickle.c"
        var $105=_noload_appends($104); //@line 5252 "cPickle.c"
        var $106=((($105))|0) < 0; //@line 5252 "cPickle.c"
        if ($106) { __label__ = 109; break; } else { __label__ = 62; break; } //@line 5252 "cPickle.c"
      case 62: // $bb61
        __label__ = 110; break; //@line 5252 "cPickle.c"
      case 63: // $bb62
        var $107=HEAP[$self_addr]; //@line 5257 "cPickle.c"
        var $108=_noload_build($107); //@line 5257 "cPickle.c"
        var $109=((($108))|0) < 0; //@line 5257 "cPickle.c"
        if ($109) { __label__ = 109; break; } else { __label__ = 64; break; } //@line 5257 "cPickle.c"
      case 64: // $bb63
        __label__ = 110; break; //@line 5257 "cPickle.c"
      case 65: // $bb64
        var $110=HEAP[$self_addr]; //@line 5262 "cPickle.c"
        var $111=_load_dup($110); //@line 5262 "cPickle.c"
        var $112=((($111))|0) < 0; //@line 5262 "cPickle.c"
        if ($112) { __label__ = 109; break; } else { __label__ = 66; break; } //@line 5262 "cPickle.c"
      case 66: // $bb65
        __label__ = 110; break; //@line 5262 "cPickle.c"
      case 67: // $bb66
        var $113=HEAP[$self_addr]; //@line 5267 "cPickle.c"
        var $114=_load_binget($113); //@line 5267 "cPickle.c"
        var $115=((($114))|0) < 0; //@line 5267 "cPickle.c"
        if ($115) { __label__ = 109; break; } else { __label__ = 68; break; } //@line 5267 "cPickle.c"
      case 68: // $bb67
        __label__ = 110; break; //@line 5267 "cPickle.c"
      case 69: // $bb68
        var $116=HEAP[$self_addr]; //@line 5272 "cPickle.c"
        var $117=_load_long_binget($116); //@line 5272 "cPickle.c"
        var $118=((($117))|0) < 0; //@line 5272 "cPickle.c"
        if ($118) { __label__ = 109; break; } else { __label__ = 70; break; } //@line 5272 "cPickle.c"
      case 70: // $bb69
        __label__ = 110; break; //@line 5272 "cPickle.c"
      case 71: // $bb70
        var $119=HEAP[$self_addr]; //@line 5277 "cPickle.c"
        var $120=_load_get($119); //@line 5277 "cPickle.c"
        var $121=((($120))|0) < 0; //@line 5277 "cPickle.c"
        if ($121) { __label__ = 109; break; } else { __label__ = 72; break; } //@line 5277 "cPickle.c"
      case 72: // $bb71
        __label__ = 110; break; //@line 5277 "cPickle.c"
      case 73: // $bb72
        var $122=HEAP[$self_addr]; //@line 5282 "cPickle.c"
        var $123=_noload_extension($122, 1); //@line 5282 "cPickle.c"
        var $124=((($123))|0) < 0; //@line 5282 "cPickle.c"
        if ($124) { __label__ = 109; break; } else { __label__ = 74; break; } //@line 5282 "cPickle.c"
      case 74: // $bb73
        __label__ = 110; break; //@line 5282 "cPickle.c"
      case 75: // $bb74
        var $125=HEAP[$self_addr]; //@line 5287 "cPickle.c"
        var $126=_noload_extension($125, 2); //@line 5287 "cPickle.c"
        var $127=((($126))|0) < 0; //@line 5287 "cPickle.c"
        if ($127) { __label__ = 109; break; } else { __label__ = 76; break; } //@line 5287 "cPickle.c"
      case 76: // $bb75
        __label__ = 110; break; //@line 5287 "cPickle.c"
      case 77: // $bb76
        var $128=HEAP[$self_addr]; //@line 5292 "cPickle.c"
        var $129=_noload_extension($128, 4); //@line 5292 "cPickle.c"
        var $130=((($129))|0) < 0; //@line 5292 "cPickle.c"
        if ($130) { __label__ = 109; break; } else { __label__ = 78; break; } //@line 5292 "cPickle.c"
      case 78: // $bb77
        __label__ = 110; break; //@line 5292 "cPickle.c"
      case 79: // $bb78
        var $131=HEAP[$self_addr]; //@line 5297 "cPickle.c"
        var $132=_load_mark($131); //@line 5297 "cPickle.c"
        var $133=((($132))|0) < 0; //@line 5297 "cPickle.c"
        if ($133) { __label__ = 109; break; } else { __label__ = 80; break; } //@line 5297 "cPickle.c"
      case 80: // $bb79
        __label__ = 110; break; //@line 5297 "cPickle.c"
      case 81: // $bb80
        var $134=HEAP[$self_addr]; //@line 5302 "cPickle.c"
        var $135=_load_binput($134); //@line 5302 "cPickle.c"
        var $136=((($135))|0) < 0; //@line 5302 "cPickle.c"
        if ($136) { __label__ = 109; break; } else { __label__ = 82; break; } //@line 5302 "cPickle.c"
      case 82: // $bb81
        __label__ = 110; break; //@line 5302 "cPickle.c"
      case 83: // $bb82
        var $137=HEAP[$self_addr]; //@line 5307 "cPickle.c"
        var $138=_load_long_binput($137); //@line 5307 "cPickle.c"
        var $139=((($138))|0) < 0; //@line 5307 "cPickle.c"
        if ($139) { __label__ = 109; break; } else { __label__ = 84; break; } //@line 5307 "cPickle.c"
      case 84: // $bb83
        __label__ = 110; break; //@line 5307 "cPickle.c"
      case 85: // $bb84
        var $140=HEAP[$self_addr]; //@line 5312 "cPickle.c"
        var $141=_load_put($140); //@line 5312 "cPickle.c"
        var $142=((($141))|0) < 0; //@line 5312 "cPickle.c"
        if ($142) { __label__ = 109; break; } else { __label__ = 86; break; } //@line 5312 "cPickle.c"
      case 86: // $bb85
        __label__ = 110; break; //@line 5312 "cPickle.c"
      case 87: // $bb86
        var $143=HEAP[$self_addr]; //@line 5317 "cPickle.c"
        var $144=_load_pop($143); //@line 5317 "cPickle.c"
        var $145=((($144))|0) < 0; //@line 5317 "cPickle.c"
        if ($145) { __label__ = 109; break; } else { __label__ = 88; break; } //@line 5317 "cPickle.c"
      case 88: // $bb87
        __label__ = 110; break; //@line 5317 "cPickle.c"
      case 89: // $bb88
        var $146=HEAP[$self_addr]; //@line 5322 "cPickle.c"
        var $147=_load_pop_mark($146); //@line 5322 "cPickle.c"
        var $148=((($147))|0) < 0; //@line 5322 "cPickle.c"
        if ($148) { __label__ = 109; break; } else { __label__ = 90; break; } //@line 5322 "cPickle.c"
      case 90: // $bb89
        __label__ = 110; break; //@line 5322 "cPickle.c"
      case 91: // $bb90
        var $149=HEAP[$self_addr]; //@line 5327 "cPickle.c"
        var $150=_noload_setitem($149); //@line 5327 "cPickle.c"
        var $151=((($150))|0) < 0; //@line 5327 "cPickle.c"
        if ($151) { __label__ = 109; break; } else { __label__ = 92; break; } //@line 5327 "cPickle.c"
      case 92: // $bb91
        __label__ = 110; break; //@line 5327 "cPickle.c"
      case 93: // $bb92
        var $152=HEAP[$self_addr]; //@line 5332 "cPickle.c"
        var $153=_noload_setitems($152); //@line 5332 "cPickle.c"
        var $154=((($153))|0) < 0; //@line 5332 "cPickle.c"
        if ($154) { __label__ = 109; break; } else { __label__ = 94; break; } //@line 5332 "cPickle.c"
      case 94: // $bb93
        __label__ = 110; break; //@line 5332 "cPickle.c"
      case 95: // $bb94
        __label__ = 109; break; //@line 5332 "cPickle.c"
      case 96: // $bb95
        var $155=HEAP[$self_addr]; //@line 5340 "cPickle.c"
        var $156=_load_persid($155); //@line 5340 "cPickle.c"
        var $157=((($156))|0) < 0; //@line 5340 "cPickle.c"
        if ($157) { __label__ = 109; break; } else { __label__ = 97; break; } //@line 5340 "cPickle.c"
      case 97: // $bb96
        __label__ = 110; break; //@line 5340 "cPickle.c"
      case 98: // $bb97
        var $158=HEAP[$self_addr]; //@line 5345 "cPickle.c"
        var $159=_load_binpersid($158); //@line 5345 "cPickle.c"
        var $160=((($159))|0) < 0; //@line 5345 "cPickle.c"
        if ($160) { __label__ = 109; break; } else { __label__ = 99; break; } //@line 5345 "cPickle.c"
      case 99: // $bb98
        __label__ = 110; break; //@line 5345 "cPickle.c"
      case 100: // $bb99
        var $161=HEAP[$self_addr]; //@line 5350 "cPickle.c"
        var $162=_noload_reduce($161); //@line 5350 "cPickle.c"
        var $163=((($162))|0) < 0; //@line 5350 "cPickle.c"
        if ($163) { __label__ = 109; break; } else { __label__ = 101; break; } //@line 5350 "cPickle.c"
      case 101: // $bb100
        __label__ = 110; break; //@line 5350 "cPickle.c"
      case 102: // $bb101
        var $164=HEAP[$self_addr]; //@line 5355 "cPickle.c"
        var $165=_load_proto($164); //@line 5355 "cPickle.c"
        var $166=((($165))|0) < 0; //@line 5355 "cPickle.c"
        if ($166) { __label__ = 109; break; } else { __label__ = 103; break; } //@line 5355 "cPickle.c"
      case 103: // $bb102
        __label__ = 110; break; //@line 5355 "cPickle.c"
      case 104: // $bb103
        var $167=HEAP[$self_addr]; //@line 5360 "cPickle.c"
        var $168=_load_bool($167, __Py_TrueStruct); //@line 5360 "cPickle.c"
        var $169=((($168))|0) < 0; //@line 5360 "cPickle.c"
        if ($169) { __label__ = 109; break; } else { __label__ = 105; break; } //@line 5360 "cPickle.c"
      case 105: // $bb104
        __label__ = 110; break; //@line 5360 "cPickle.c"
      case 106: // $bb105
        var $170=HEAP[$self_addr]; //@line 5365 "cPickle.c"
        var $171=_load_bool($170, __Py_ZeroStruct); //@line 5365 "cPickle.c"
        var $172=((($171))|0) < 0; //@line 5365 "cPickle.c"
        if ($172) { __label__ = 109; break; } else { __label__ = 107; break; } //@line 5365 "cPickle.c"
      case 107: // $bb106
        __label__ = 110; break; //@line 5365 "cPickle.c"
      case 108: // $bb107
        var $173=HEAP[$s]; //@line 5369 "cPickle.c"
        var $174=(($173)&4294967295); //@line 5369 "cPickle.c"
        var $175=HEAP[$174]; //@line 5369 "cPickle.c"
        var $176=reSign(($175), 8, 0); //@line 5369 "cPickle.c"
        var $177=HEAP[_UnpicklingError]; //@line 5369 "cPickle.c"
        var $178=_cPickle_ErrFormat($177, ((__str101)&4294967295), ((__str102)&4294967295), allocate([$176,0,0,0], ["i32",0,0,0], ALLOC_STACK)); //@line 5369 "cPickle.c"
        HEAP[$0]=0; //@line 5372 "cPickle.c"
        __label__ = 119; break; //@line 5372 "cPickle.c"
      case 109: // $bb108
        __label__ = 111; break; //@line 5372 "cPickle.c"
      case 110: // $bb109
        __label__ = 1; break; //@line 5372 "cPickle.c"
      case 111: // $bb110
        var $179=_PyErr_Occurred(); //@line 5378 "cPickle.c"
        HEAP[$err]=$179; //@line 5378 "cPickle.c"
        var $180=HEAP[$err]; //@line 5378 "cPickle.c"
        var $181=($180)!=0; //@line 5378 "cPickle.c"
        if ($181) { __label__ = 112; break; } else { __label__ = 115; break; } //@line 5378 "cPickle.c"
      case 112: // $bb111
        var $182=HEAP[_PyExc_EOFError]; //@line 5379 "cPickle.c"
        var $183=HEAP[$err]; //@line 5379 "cPickle.c"
        var $184=($183)==($182); //@line 5379 "cPickle.c"
        if ($184) { __label__ = 113; break; } else { __label__ = 114; break; } //@line 5379 "cPickle.c"
      case 113: // $bb112
        var $185=HEAP[_PyExc_EOFError]; //@line 5380 "cPickle.c"
        _PyErr_SetNone($185); //@line 5380 "cPickle.c"
        __label__ = 114; break; //@line 5380 "cPickle.c"
      case 114: // $bb113
        HEAP[$0]=0; //@line 5382 "cPickle.c"
        __label__ = 119; break; //@line 5382 "cPickle.c"
      case 115: // $bb114
        var $186=HEAP[$self_addr]; //@line 5385 "cPickle.c"
        var $187=(($186+32)&4294967295); //@line 5385 "cPickle.c"
        var $188=HEAP[$187]; //@line 5385 "cPickle.c"
        var $189=(($188+8)&4294967295); //@line 5385 "cPickle.c"
        var $190=HEAP[$189]; //@line 5385 "cPickle.c"
        var $191=((($190))|0)!=0; //@line 5385 "cPickle.c"
        if ($191) { __label__ = 116; break; } else { __label__ = 117; break; } //@line 5385 "cPickle.c"
      case 116: // $bb115
        var $192=HEAP[$self_addr]; //@line 5385 "cPickle.c"
        var $193=(($192+32)&4294967295); //@line 5385 "cPickle.c"
        var $194=HEAP[$193]; //@line 5385 "cPickle.c"
        var $195=(($194+16)&4294967295); //@line 5385 "cPickle.c"
        var $196=HEAP[$195]; //@line 5385 "cPickle.c"
        var $197=HEAP[$self_addr]; //@line 5385 "cPickle.c"
        var $198=(($197+32)&4294967295); //@line 5385 "cPickle.c"
        var $199=HEAP[$198]; //@line 5385 "cPickle.c"
        var $200=(($199+8)&4294967295); //@line 5385 "cPickle.c"
        var $201=HEAP[$200]; //@line 5385 "cPickle.c"
        var $202=((($201) - 1)&4294967295); //@line 5385 "cPickle.c"
        var $203=(($199+8)&4294967295); //@line 5385 "cPickle.c"
        HEAP[$203]=$202; //@line 5385 "cPickle.c"
        var $204=(($199+8)&4294967295); //@line 5385 "cPickle.c"
        var $205=HEAP[$204]; //@line 5385 "cPickle.c"
        var $206=(($196+4*$205)&4294967295); //@line 5385 "cPickle.c"
        var $207=HEAP[$206]; //@line 5385 "cPickle.c"
        HEAP[$val]=$207; //@line 5385 "cPickle.c"
        __label__ = 118; break; //@line 5385 "cPickle.c"
      case 117: // $bb116
        var $208=HEAP[_UnpicklingError]; //@line 5385 "cPickle.c"
        _PyErr_SetString($208, ((__str88)&4294967295)); //@line 5385 "cPickle.c"
        HEAP[$val]=0; //@line 5385 "cPickle.c"
        __label__ = 118; break; //@line 5385 "cPickle.c"
      case 118: // $bb117
        var $209=HEAP[$val]; //@line 5386 "cPickle.c"
        HEAP[$0]=$209; //@line 5386 "cPickle.c"
        __label__ = 119; break; //@line 5386 "cPickle.c"
      case 119: // $bb118
        var $210=HEAP[$0]; //@line 5372 "cPickle.c"
        HEAP[$retval]=$210; //@line 5372 "cPickle.c"
        __label__ = 120; break; //@line 5372 "cPickle.c"
      case 120: // $return
        var $retval119=HEAP[$retval]; //@line 5372 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval119; //@line 5372 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Unpickler_load($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $unused_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$unused_addr]=$unused;
        var $1=HEAP[$self_addr]; //@line 5393 "cPickle.c"
        var $2=_load($1); //@line 5393 "cPickle.c"
        HEAP[$0]=$2; //@line 5393 "cPickle.c"
        var $3=HEAP[$0]; //@line 5393 "cPickle.c"
        HEAP[$retval]=$3; //@line 5393 "cPickle.c"
        __label__ = 1; break; //@line 5393 "cPickle.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 5393 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 5393 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Unpickler_noload($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $unused_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$unused_addr]=$unused;
        var $1=HEAP[$self_addr]; //@line 5399 "cPickle.c"
        var $2=_noload($1); //@line 5399 "cPickle.c"
        HEAP[$0]=$2; //@line 5399 "cPickle.c"
        var $3=HEAP[$0]; //@line 5399 "cPickle.c"
        HEAP[$retval]=$3; //@line 5399 "cPickle.c"
        __label__ = 1; break; //@line 5399 "cPickle.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 5399 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 5399 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _newUnpicklerobject($f) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $f_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $self=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$f_addr]=$f;
        var $1=__PyObject_GC_New(_Unpicklertype); //@line 5425 "cPickle.c"
        var $2=$1; //@line 5425 "cPickle.c"
        HEAP[$self]=$2; //@line 5425 "cPickle.c"
        var $3=HEAP[$self]; //@line 5425 "cPickle.c"
        var $4=($3)==0; //@line 5425 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 5425 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 5426 "cPickle.c"
        __label__ = 18; break; //@line 5426 "cPickle.c"
      case 2: // $bb1
        var $5=HEAP[$self]; //@line 5428 "cPickle.c"
        var $6=(($5+12)&4294967295); //@line 5428 "cPickle.c"
        HEAP[$6]=0; //@line 5428 "cPickle.c"
        var $7=HEAP[$self]; //@line 5429 "cPickle.c"
        var $8=(($7+28)&4294967295); //@line 5429 "cPickle.c"
        HEAP[$8]=0; //@line 5429 "cPickle.c"
        var $9=_Pdata_New(); //@line 5430 "cPickle.c"
        var $10=$9; //@line 5430 "cPickle.c"
        var $11=HEAP[$self]; //@line 5430 "cPickle.c"
        var $12=(($11+32)&4294967295); //@line 5430 "cPickle.c"
        HEAP[$12]=$10; //@line 5430 "cPickle.c"
        var $13=HEAP[$self]; //@line 5431 "cPickle.c"
        var $14=(($13+40)&4294967295); //@line 5431 "cPickle.c"
        HEAP[$14]=0; //@line 5431 "cPickle.c"
        var $15=HEAP[$self]; //@line 5432 "cPickle.c"
        var $16=(($15+44)&4294967295); //@line 5432 "cPickle.c"
        HEAP[$16]=0; //@line 5432 "cPickle.c"
        var $17=HEAP[$self]; //@line 5433 "cPickle.c"
        var $18=(($17+48)&4294967295); //@line 5433 "cPickle.c"
        HEAP[$18]=0; //@line 5433 "cPickle.c"
        var $19=HEAP[$self]; //@line 5434 "cPickle.c"
        var $20=(($19+52)&4294967295); //@line 5434 "cPickle.c"
        HEAP[$20]=0; //@line 5434 "cPickle.c"
        var $21=HEAP[$self]; //@line 5435 "cPickle.c"
        var $22=(($21+56)&4294967295); //@line 5435 "cPickle.c"
        HEAP[$22]=0; //@line 5435 "cPickle.c"
        var $23=HEAP[$self]; //@line 5436 "cPickle.c"
        var $24=(($23+68)&4294967295); //@line 5436 "cPickle.c"
        HEAP[$24]=0; //@line 5436 "cPickle.c"
        var $25=HEAP[$self]; //@line 5437 "cPickle.c"
        var $26=(($25+20)&4294967295); //@line 5437 "cPickle.c"
        HEAP[$26]=0; //@line 5437 "cPickle.c"
        var $27=HEAP[$self]; //@line 5438 "cPickle.c"
        var $28=(($27+16)&4294967295); //@line 5438 "cPickle.c"
        HEAP[$28]=0; //@line 5438 "cPickle.c"
        var $29=HEAP[$self]; //@line 5439 "cPickle.c"
        var $30=(($29+76)&4294967295); //@line 5439 "cPickle.c"
        HEAP[$30]=0; //@line 5439 "cPickle.c"
        var $31=_PyDict_New(); //@line 5441 "cPickle.c"
        var $32=HEAP[$self]; //@line 5441 "cPickle.c"
        var $33=(($32+24)&4294967295); //@line 5441 "cPickle.c"
        HEAP[$33]=$31; //@line 5441 "cPickle.c"
        var $34=HEAP[$self]; //@line 5441 "cPickle.c"
        var $35=(($34+24)&4294967295); //@line 5441 "cPickle.c"
        var $36=HEAP[$35]; //@line 5441 "cPickle.c"
        var $37=($36)==0; //@line 5441 "cPickle.c"
        if ($37) { __label__ = 15; break; } else { __label__ = 3; break; } //@line 5441 "cPickle.c"
      case 3: // $bb2
        var $38=HEAP[$self]; //@line 5444 "cPickle.c"
        var $39=(($38+32)&4294967295); //@line 5444 "cPickle.c"
        var $40=HEAP[$39]; //@line 5444 "cPickle.c"
        var $41=($40)==0; //@line 5444 "cPickle.c"
        if ($41) { __label__ = 15; break; } else { __label__ = 4; break; } //@line 5444 "cPickle.c"
      case 4: // $bb3
        var $42=HEAP[$f_addr]; //@line 5447 "cPickle.c"
        var $43=(($42)&4294967295); //@line 5447 "cPickle.c"
        var $44=HEAP[$43]; //@line 5447 "cPickle.c"
        var $45=((($44) + 1)&4294967295); //@line 5447 "cPickle.c"
        var $46=HEAP[$f_addr]; //@line 5447 "cPickle.c"
        var $47=(($46)&4294967295); //@line 5447 "cPickle.c"
        HEAP[$47]=$45; //@line 5447 "cPickle.c"
        var $48=HEAP[$self]; //@line 5448 "cPickle.c"
        var $49=(($48+12)&4294967295); //@line 5448 "cPickle.c"
        var $50=HEAP[$f_addr]; //@line 5448 "cPickle.c"
        HEAP[$49]=$50; //@line 5448 "cPickle.c"
        var $51=HEAP[$f_addr]; //@line 5451 "cPickle.c"
        var $52=(($51+4)&4294967295); //@line 5451 "cPickle.c"
        var $53=HEAP[$52]; //@line 5451 "cPickle.c"
        var $54=($53)==(_PyFile_Type); //@line 5451 "cPickle.c"
        if ($54) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 5451 "cPickle.c"
      case 5: // $bb4
        var $55=HEAP[$f_addr]; //@line 5451 "cPickle.c"
        var $56=(($55+4)&4294967295); //@line 5451 "cPickle.c"
        var $57=HEAP[$56]; //@line 5451 "cPickle.c"
        var $58=_PyType_IsSubtype($57, _PyFile_Type); //@line 5451 "cPickle.c"
        var $59=((($58))|0)!=0; //@line 5451 "cPickle.c"
        if ($59) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 5451 "cPickle.c"
      case 6: // $bb5
        var $60=HEAP[$f_addr]; //@line 5452 "cPickle.c"
        var $61=_PyFile_AsFile($60); //@line 5452 "cPickle.c"
        var $62=HEAP[$self]; //@line 5452 "cPickle.c"
        var $63=(($62+8)&4294967295); //@line 5452 "cPickle.c"
        HEAP[$63]=$61; //@line 5452 "cPickle.c"
        var $64=HEAP[$self]; //@line 5453 "cPickle.c"
        var $65=(($64+8)&4294967295); //@line 5453 "cPickle.c"
        var $66=HEAP[$65]; //@line 5453 "cPickle.c"
        var $67=($66)==0; //@line 5453 "cPickle.c"
        if ($67) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 5453 "cPickle.c"
      case 7: // $bb6
        var $68=HEAP[_PyExc_ValueError]; //@line 5454 "cPickle.c"
        _PyErr_SetString($68, ((__str61)&4294967295)); //@line 5454 "cPickle.c"
        __label__ = 15; break; //@line 5454 "cPickle.c"
      case 8: // $bb7
        var $69=HEAP[$self]; //@line 5458 "cPickle.c"
        var $70=(($69+60)&4294967295); //@line 5458 "cPickle.c"
        HEAP[$70]=(FUNCTION_TABLE_OFFSET + 12); //@line 5458 "cPickle.c"
        var $71=HEAP[$self]; //@line 5459 "cPickle.c"
        var $72=(($71+64)&4294967295); //@line 5459 "cPickle.c"
        HEAP[$72]=(FUNCTION_TABLE_OFFSET + 14); //@line 5459 "cPickle.c"
        __label__ = 14; break; //@line 5459 "cPickle.c"
      case 9: // $bb8
        var $73=HEAP[$f_addr]; //@line 5461 "cPickle.c"
        var $74=(($73+4)&4294967295); //@line 5461 "cPickle.c"
        var $75=HEAP[$74]; //@line 5461 "cPickle.c"
        var $76=HEAP[_PycStringIO]; //@line 5461 "cPickle.c"
        var $77=(($76+24)&4294967295); //@line 5461 "cPickle.c"
        var $78=HEAP[$77]; //@line 5461 "cPickle.c"
        var $79=($75)==($78); //@line 5461 "cPickle.c"
        if ($79) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 5461 "cPickle.c"
      case 10: // $bb9
        var $80=HEAP[$self]; //@line 5462 "cPickle.c"
        var $81=(($80+8)&4294967295); //@line 5462 "cPickle.c"
        HEAP[$81]=0; //@line 5462 "cPickle.c"
        var $82=HEAP[$self]; //@line 5463 "cPickle.c"
        var $83=(($82+60)&4294967295); //@line 5463 "cPickle.c"
        HEAP[$83]=(FUNCTION_TABLE_OFFSET + 16); //@line 5463 "cPickle.c"
        var $84=HEAP[$self]; //@line 5464 "cPickle.c"
        var $85=(($84+64)&4294967295); //@line 5464 "cPickle.c"
        HEAP[$85]=(FUNCTION_TABLE_OFFSET + 18); //@line 5464 "cPickle.c"
        __label__ = 14; break; //@line 5464 "cPickle.c"
      case 11: // $bb10
        var $86=HEAP[$self]; //@line 5468 "cPickle.c"
        var $87=(($86+8)&4294967295); //@line 5468 "cPickle.c"
        HEAP[$87]=0; //@line 5468 "cPickle.c"
        var $88=HEAP[$self]; //@line 5469 "cPickle.c"
        var $89=(($88+60)&4294967295); //@line 5469 "cPickle.c"
        HEAP[$89]=(FUNCTION_TABLE_OFFSET + 20); //@line 5469 "cPickle.c"
        var $90=HEAP[$self]; //@line 5470 "cPickle.c"
        var $91=(($90+64)&4294967295); //@line 5470 "cPickle.c"
        HEAP[$91]=(FUNCTION_TABLE_OFFSET + 22); //@line 5470 "cPickle.c"
        var $92=HEAP[_readline_str]; //@line 5472 "cPickle.c"
        var $93=HEAP[$f_addr]; //@line 5472 "cPickle.c"
        var $94=_PyObject_GetAttr($93, $92); //@line 5472 "cPickle.c"
        var $95=HEAP[$self]; //@line 5472 "cPickle.c"
        var $96=(($95+16)&4294967295); //@line 5472 "cPickle.c"
        HEAP[$96]=$94; //@line 5472 "cPickle.c"
        var $97=HEAP[$self]; //@line 5472 "cPickle.c"
        var $98=(($97+16)&4294967295); //@line 5472 "cPickle.c"
        var $99=HEAP[$98]; //@line 5472 "cPickle.c"
        var $100=($99)==0; //@line 5472 "cPickle.c"
        if ($100) { __label__ = 13; break; } else { __label__ = 12; break; } //@line 5472 "cPickle.c"
      case 12: // $bb11
        var $101=HEAP[_read_str]; //@line 5472 "cPickle.c"
        var $102=HEAP[$f_addr]; //@line 5472 "cPickle.c"
        var $103=_PyObject_GetAttr($102, $101); //@line 5472 "cPickle.c"
        var $104=HEAP[$self]; //@line 5472 "cPickle.c"
        var $105=(($104+20)&4294967295); //@line 5472 "cPickle.c"
        HEAP[$105]=$103; //@line 5472 "cPickle.c"
        var $106=HEAP[$self]; //@line 5472 "cPickle.c"
        var $107=(($106+20)&4294967295); //@line 5472 "cPickle.c"
        var $108=HEAP[$107]; //@line 5472 "cPickle.c"
        var $109=($108)==0; //@line 5472 "cPickle.c"
        if ($109) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 5472 "cPickle.c"
      case 13: // $bb12
        _PyErr_Clear(); //@line 5474 "cPickle.c"
        var $110=HEAP[_PyExc_TypeError]; //@line 5475 "cPickle.c"
        _PyErr_SetString($110, ((__str107)&4294967295)); //@line 5475 "cPickle.c"
        __label__ = 15; break; //@line 5475 "cPickle.c"
      case 14: // $bb13
        var $111=HEAP[$self]; //@line 5481 "cPickle.c"
        var $112=$111; //@line 5481 "cPickle.c"
        _PyObject_GC_Track($112); //@line 5481 "cPickle.c"
        var $113=HEAP[$self]; //@line 5483 "cPickle.c"
        HEAP[$0]=$113; //@line 5483 "cPickle.c"
        __label__ = 18; break; //@line 5483 "cPickle.c"
      case 15: // $err
        var $114=HEAP[$self]; //@line 5486 "cPickle.c"
        var $115=$114; //@line 5486 "cPickle.c"
        var $116=(($115)&4294967295); //@line 5486 "cPickle.c"
        var $117=HEAP[$116]; //@line 5486 "cPickle.c"
        var $118=((($117) - 1)&4294967295); //@line 5486 "cPickle.c"
        var $119=(($115)&4294967295); //@line 5486 "cPickle.c"
        HEAP[$119]=$118; //@line 5486 "cPickle.c"
        var $120=(($115)&4294967295); //@line 5486 "cPickle.c"
        var $121=HEAP[$120]; //@line 5486 "cPickle.c"
        var $122=((($121))|0)==0; //@line 5486 "cPickle.c"
        if ($122) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 5486 "cPickle.c"
      case 16: // $bb14
        var $123=HEAP[$self]; //@line 5486 "cPickle.c"
        var $124=$123; //@line 5486 "cPickle.c"
        var $125=(($124+4)&4294967295); //@line 5486 "cPickle.c"
        var $126=HEAP[$125]; //@line 5486 "cPickle.c"
        var $127=(($126+24)&4294967295); //@line 5486 "cPickle.c"
        var $128=HEAP[$127]; //@line 5486 "cPickle.c"
        var $129=HEAP[$self]; //@line 5486 "cPickle.c"
        var $130=$129; //@line 5486 "cPickle.c"
        FUNCTION_TABLE[$128]($130); //@line 5486 "cPickle.c"
        __label__ = 17; break; //@line 5486 "cPickle.c"
      case 17: // $bb15
        HEAP[$0]=0; //@line 5487 "cPickle.c"
        __label__ = 18; break; //@line 5487 "cPickle.c"
      case 18: // $bb16
        var $131=HEAP[$0]; //@line 5426 "cPickle.c"
        HEAP[$retval]=$131; //@line 5426 "cPickle.c"
        __label__ = 19; break; //@line 5426 "cPickle.c"
      case 19: // $return
        var $retval17=HEAP[$retval]; //@line 5426 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval17; //@line 5426 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _get_Unpickler($self, $file) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $file_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$file_addr]=$file;
        var $1=HEAP[$file_addr]; //@line 5494 "cPickle.c"
        var $2=_newUnpicklerobject($1); //@line 5494 "cPickle.c"
        var $3=$2; //@line 5494 "cPickle.c"
        HEAP[$0]=$3; //@line 5494 "cPickle.c"
        var $4=HEAP[$0]; //@line 5494 "cPickle.c"
        HEAP[$retval]=$4; //@line 5494 "cPickle.c"
        __label__ = 1; break; //@line 5494 "cPickle.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 5494 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 5494 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Unpickler_dealloc($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $0=HEAP[$self_addr]; //@line 5501 "cPickle.c"
        var $1=$0; //@line 5501 "cPickle.c"
        _PyObject_GC_UnTrack($1); //@line 5501 "cPickle.c"
        var $2=HEAP[$self_addr]; //@line 5502 "cPickle.c"
        var $3=(($2+16)&4294967295); //@line 5502 "cPickle.c"
        var $4=HEAP[$3]; //@line 5502 "cPickle.c"
        var $5=($4)!=0; //@line 5502 "cPickle.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 5502 "cPickle.c"
      case 1: // $bb
        var $6=HEAP[$self_addr]; //@line 5502 "cPickle.c"
        var $7=(($6+16)&4294967295); //@line 5502 "cPickle.c"
        var $8=HEAP[$7]; //@line 5502 "cPickle.c"
        var $9=(($8)&4294967295); //@line 5502 "cPickle.c"
        var $10=HEAP[$9]; //@line 5502 "cPickle.c"
        var $11=((($10) - 1)&4294967295); //@line 5502 "cPickle.c"
        var $12=(($8)&4294967295); //@line 5502 "cPickle.c"
        HEAP[$12]=$11; //@line 5502 "cPickle.c"
        var $13=(($8)&4294967295); //@line 5502 "cPickle.c"
        var $14=HEAP[$13]; //@line 5502 "cPickle.c"
        var $15=((($14))|0)==0; //@line 5502 "cPickle.c"
        if ($15) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 5502 "cPickle.c"
      case 2: // $bb1
        var $16=HEAP[$self_addr]; //@line 5502 "cPickle.c"
        var $17=(($16+16)&4294967295); //@line 5502 "cPickle.c"
        var $18=HEAP[$17]; //@line 5502 "cPickle.c"
        var $19=(($18+4)&4294967295); //@line 5502 "cPickle.c"
        var $20=HEAP[$19]; //@line 5502 "cPickle.c"
        var $21=(($20+24)&4294967295); //@line 5502 "cPickle.c"
        var $22=HEAP[$21]; //@line 5502 "cPickle.c"
        var $23=HEAP[$self_addr]; //@line 5502 "cPickle.c"
        var $24=(($23+16)&4294967295); //@line 5502 "cPickle.c"
        var $25=HEAP[$24]; //@line 5502 "cPickle.c"
        FUNCTION_TABLE[$22]($25); //@line 5502 "cPickle.c"
        __label__ = 3; break; //@line 5502 "cPickle.c"
      case 3: // $bb2
        var $26=HEAP[$self_addr]; //@line 5503 "cPickle.c"
        var $27=(($26+20)&4294967295); //@line 5503 "cPickle.c"
        var $28=HEAP[$27]; //@line 5503 "cPickle.c"
        var $29=($28)!=0; //@line 5503 "cPickle.c"
        if ($29) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 5503 "cPickle.c"
      case 4: // $bb3
        var $30=HEAP[$self_addr]; //@line 5503 "cPickle.c"
        var $31=(($30+20)&4294967295); //@line 5503 "cPickle.c"
        var $32=HEAP[$31]; //@line 5503 "cPickle.c"
        var $33=(($32)&4294967295); //@line 5503 "cPickle.c"
        var $34=HEAP[$33]; //@line 5503 "cPickle.c"
        var $35=((($34) - 1)&4294967295); //@line 5503 "cPickle.c"
        var $36=(($32)&4294967295); //@line 5503 "cPickle.c"
        HEAP[$36]=$35; //@line 5503 "cPickle.c"
        var $37=(($32)&4294967295); //@line 5503 "cPickle.c"
        var $38=HEAP[$37]; //@line 5503 "cPickle.c"
        var $39=((($38))|0)==0; //@line 5503 "cPickle.c"
        if ($39) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5503 "cPickle.c"
      case 5: // $bb4
        var $40=HEAP[$self_addr]; //@line 5503 "cPickle.c"
        var $41=(($40+20)&4294967295); //@line 5503 "cPickle.c"
        var $42=HEAP[$41]; //@line 5503 "cPickle.c"
        var $43=(($42+4)&4294967295); //@line 5503 "cPickle.c"
        var $44=HEAP[$43]; //@line 5503 "cPickle.c"
        var $45=(($44+24)&4294967295); //@line 5503 "cPickle.c"
        var $46=HEAP[$45]; //@line 5503 "cPickle.c"
        var $47=HEAP[$self_addr]; //@line 5503 "cPickle.c"
        var $48=(($47+20)&4294967295); //@line 5503 "cPickle.c"
        var $49=HEAP[$48]; //@line 5503 "cPickle.c"
        FUNCTION_TABLE[$46]($49); //@line 5503 "cPickle.c"
        __label__ = 6; break; //@line 5503 "cPickle.c"
      case 6: // $bb5
        var $50=HEAP[$self_addr]; //@line 5504 "cPickle.c"
        var $51=(($50+12)&4294967295); //@line 5504 "cPickle.c"
        var $52=HEAP[$51]; //@line 5504 "cPickle.c"
        var $53=($52)!=0; //@line 5504 "cPickle.c"
        if ($53) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 5504 "cPickle.c"
      case 7: // $bb6
        var $54=HEAP[$self_addr]; //@line 5504 "cPickle.c"
        var $55=(($54+12)&4294967295); //@line 5504 "cPickle.c"
        var $56=HEAP[$55]; //@line 5504 "cPickle.c"
        var $57=(($56)&4294967295); //@line 5504 "cPickle.c"
        var $58=HEAP[$57]; //@line 5504 "cPickle.c"
        var $59=((($58) - 1)&4294967295); //@line 5504 "cPickle.c"
        var $60=(($56)&4294967295); //@line 5504 "cPickle.c"
        HEAP[$60]=$59; //@line 5504 "cPickle.c"
        var $61=(($56)&4294967295); //@line 5504 "cPickle.c"
        var $62=HEAP[$61]; //@line 5504 "cPickle.c"
        var $63=((($62))|0)==0; //@line 5504 "cPickle.c"
        if ($63) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 5504 "cPickle.c"
      case 8: // $bb7
        var $64=HEAP[$self_addr]; //@line 5504 "cPickle.c"
        var $65=(($64+12)&4294967295); //@line 5504 "cPickle.c"
        var $66=HEAP[$65]; //@line 5504 "cPickle.c"
        var $67=(($66+4)&4294967295); //@line 5504 "cPickle.c"
        var $68=HEAP[$67]; //@line 5504 "cPickle.c"
        var $69=(($68+24)&4294967295); //@line 5504 "cPickle.c"
        var $70=HEAP[$69]; //@line 5504 "cPickle.c"
        var $71=HEAP[$self_addr]; //@line 5504 "cPickle.c"
        var $72=(($71+12)&4294967295); //@line 5504 "cPickle.c"
        var $73=HEAP[$72]; //@line 5504 "cPickle.c"
        FUNCTION_TABLE[$70]($73); //@line 5504 "cPickle.c"
        __label__ = 9; break; //@line 5504 "cPickle.c"
      case 9: // $bb8
        var $74=HEAP[$self_addr]; //@line 5505 "cPickle.c"
        var $75=(($74+24)&4294967295); //@line 5505 "cPickle.c"
        var $76=HEAP[$75]; //@line 5505 "cPickle.c"
        var $77=($76)!=0; //@line 5505 "cPickle.c"
        if ($77) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 5505 "cPickle.c"
      case 10: // $bb9
        var $78=HEAP[$self_addr]; //@line 5505 "cPickle.c"
        var $79=(($78+24)&4294967295); //@line 5505 "cPickle.c"
        var $80=HEAP[$79]; //@line 5505 "cPickle.c"
        var $81=(($80)&4294967295); //@line 5505 "cPickle.c"
        var $82=HEAP[$81]; //@line 5505 "cPickle.c"
        var $83=((($82) - 1)&4294967295); //@line 5505 "cPickle.c"
        var $84=(($80)&4294967295); //@line 5505 "cPickle.c"
        HEAP[$84]=$83; //@line 5505 "cPickle.c"
        var $85=(($80)&4294967295); //@line 5505 "cPickle.c"
        var $86=HEAP[$85]; //@line 5505 "cPickle.c"
        var $87=((($86))|0)==0; //@line 5505 "cPickle.c"
        if ($87) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 5505 "cPickle.c"
      case 11: // $bb10
        var $88=HEAP[$self_addr]; //@line 5505 "cPickle.c"
        var $89=(($88+24)&4294967295); //@line 5505 "cPickle.c"
        var $90=HEAP[$89]; //@line 5505 "cPickle.c"
        var $91=(($90+4)&4294967295); //@line 5505 "cPickle.c"
        var $92=HEAP[$91]; //@line 5505 "cPickle.c"
        var $93=(($92+24)&4294967295); //@line 5505 "cPickle.c"
        var $94=HEAP[$93]; //@line 5505 "cPickle.c"
        var $95=HEAP[$self_addr]; //@line 5505 "cPickle.c"
        var $96=(($95+24)&4294967295); //@line 5505 "cPickle.c"
        var $97=HEAP[$96]; //@line 5505 "cPickle.c"
        FUNCTION_TABLE[$94]($97); //@line 5505 "cPickle.c"
        __label__ = 12; break; //@line 5505 "cPickle.c"
      case 12: // $bb11
        var $98=HEAP[$self_addr]; //@line 5506 "cPickle.c"
        var $99=(($98+32)&4294967295); //@line 5506 "cPickle.c"
        var $100=HEAP[$99]; //@line 5506 "cPickle.c"
        var $101=($100)!=0; //@line 5506 "cPickle.c"
        if ($101) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 5506 "cPickle.c"
      case 13: // $bb12
        var $102=HEAP[$self_addr]; //@line 5506 "cPickle.c"
        var $103=(($102+32)&4294967295); //@line 5506 "cPickle.c"
        var $104=HEAP[$103]; //@line 5506 "cPickle.c"
        var $105=$104; //@line 5506 "cPickle.c"
        var $106=(($105)&4294967295); //@line 5506 "cPickle.c"
        var $107=HEAP[$106]; //@line 5506 "cPickle.c"
        var $108=((($107) - 1)&4294967295); //@line 5506 "cPickle.c"
        var $109=(($105)&4294967295); //@line 5506 "cPickle.c"
        HEAP[$109]=$108; //@line 5506 "cPickle.c"
        var $110=(($105)&4294967295); //@line 5506 "cPickle.c"
        var $111=HEAP[$110]; //@line 5506 "cPickle.c"
        var $112=((($111))|0)==0; //@line 5506 "cPickle.c"
        if ($112) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 5506 "cPickle.c"
      case 14: // $bb13
        var $113=HEAP[$self_addr]; //@line 5506 "cPickle.c"
        var $114=(($113+32)&4294967295); //@line 5506 "cPickle.c"
        var $115=HEAP[$114]; //@line 5506 "cPickle.c"
        var $116=$115; //@line 5506 "cPickle.c"
        var $117=(($116+4)&4294967295); //@line 5506 "cPickle.c"
        var $118=HEAP[$117]; //@line 5506 "cPickle.c"
        var $119=(($118+24)&4294967295); //@line 5506 "cPickle.c"
        var $120=HEAP[$119]; //@line 5506 "cPickle.c"
        var $121=HEAP[$self_addr]; //@line 5506 "cPickle.c"
        var $122=(($121+32)&4294967295); //@line 5506 "cPickle.c"
        var $123=HEAP[$122]; //@line 5506 "cPickle.c"
        var $124=$123; //@line 5506 "cPickle.c"
        FUNCTION_TABLE[$120]($124); //@line 5506 "cPickle.c"
        __label__ = 15; break; //@line 5506 "cPickle.c"
      case 15: // $bb14
        var $125=HEAP[$self_addr]; //@line 5507 "cPickle.c"
        var $126=(($125+40)&4294967295); //@line 5507 "cPickle.c"
        var $127=HEAP[$126]; //@line 5507 "cPickle.c"
        var $128=($127)!=0; //@line 5507 "cPickle.c"
        if ($128) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 5507 "cPickle.c"
      case 16: // $bb15
        var $129=HEAP[$self_addr]; //@line 5507 "cPickle.c"
        var $130=(($129+40)&4294967295); //@line 5507 "cPickle.c"
        var $131=HEAP[$130]; //@line 5507 "cPickle.c"
        var $132=(($131)&4294967295); //@line 5507 "cPickle.c"
        var $133=HEAP[$132]; //@line 5507 "cPickle.c"
        var $134=((($133) - 1)&4294967295); //@line 5507 "cPickle.c"
        var $135=(($131)&4294967295); //@line 5507 "cPickle.c"
        HEAP[$135]=$134; //@line 5507 "cPickle.c"
        var $136=(($131)&4294967295); //@line 5507 "cPickle.c"
        var $137=HEAP[$136]; //@line 5507 "cPickle.c"
        var $138=((($137))|0)==0; //@line 5507 "cPickle.c"
        if ($138) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 5507 "cPickle.c"
      case 17: // $bb16
        var $139=HEAP[$self_addr]; //@line 5507 "cPickle.c"
        var $140=(($139+40)&4294967295); //@line 5507 "cPickle.c"
        var $141=HEAP[$140]; //@line 5507 "cPickle.c"
        var $142=(($141+4)&4294967295); //@line 5507 "cPickle.c"
        var $143=HEAP[$142]; //@line 5507 "cPickle.c"
        var $144=(($143+24)&4294967295); //@line 5507 "cPickle.c"
        var $145=HEAP[$144]; //@line 5507 "cPickle.c"
        var $146=HEAP[$self_addr]; //@line 5507 "cPickle.c"
        var $147=(($146+40)&4294967295); //@line 5507 "cPickle.c"
        var $148=HEAP[$147]; //@line 5507 "cPickle.c"
        FUNCTION_TABLE[$145]($148); //@line 5507 "cPickle.c"
        __label__ = 18; break; //@line 5507 "cPickle.c"
      case 18: // $bb17
        var $149=HEAP[$self_addr]; //@line 5508 "cPickle.c"
        var $150=(($149+28)&4294967295); //@line 5508 "cPickle.c"
        var $151=HEAP[$150]; //@line 5508 "cPickle.c"
        var $152=($151)!=0; //@line 5508 "cPickle.c"
        if ($152) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 5508 "cPickle.c"
      case 19: // $bb18
        var $153=HEAP[$self_addr]; //@line 5508 "cPickle.c"
        var $154=(($153+28)&4294967295); //@line 5508 "cPickle.c"
        var $155=HEAP[$154]; //@line 5508 "cPickle.c"
        var $156=(($155)&4294967295); //@line 5508 "cPickle.c"
        var $157=HEAP[$156]; //@line 5508 "cPickle.c"
        var $158=((($157) - 1)&4294967295); //@line 5508 "cPickle.c"
        var $159=(($155)&4294967295); //@line 5508 "cPickle.c"
        HEAP[$159]=$158; //@line 5508 "cPickle.c"
        var $160=(($155)&4294967295); //@line 5508 "cPickle.c"
        var $161=HEAP[$160]; //@line 5508 "cPickle.c"
        var $162=((($161))|0)==0; //@line 5508 "cPickle.c"
        if ($162) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 5508 "cPickle.c"
      case 20: // $bb19
        var $163=HEAP[$self_addr]; //@line 5508 "cPickle.c"
        var $164=(($163+28)&4294967295); //@line 5508 "cPickle.c"
        var $165=HEAP[$164]; //@line 5508 "cPickle.c"
        var $166=(($165+4)&4294967295); //@line 5508 "cPickle.c"
        var $167=HEAP[$166]; //@line 5508 "cPickle.c"
        var $168=(($167+24)&4294967295); //@line 5508 "cPickle.c"
        var $169=HEAP[$168]; //@line 5508 "cPickle.c"
        var $170=HEAP[$self_addr]; //@line 5508 "cPickle.c"
        var $171=(($170+28)&4294967295); //@line 5508 "cPickle.c"
        var $172=HEAP[$171]; //@line 5508 "cPickle.c"
        FUNCTION_TABLE[$169]($172); //@line 5508 "cPickle.c"
        __label__ = 21; break; //@line 5508 "cPickle.c"
      case 21: // $bb20
        var $173=HEAP[$self_addr]; //@line 5509 "cPickle.c"
        var $174=(($173+44)&4294967295); //@line 5509 "cPickle.c"
        var $175=HEAP[$174]; //@line 5509 "cPickle.c"
        var $176=($175)!=0; //@line 5509 "cPickle.c"
        if ($176) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 5509 "cPickle.c"
      case 22: // $bb21
        var $177=HEAP[$self_addr]; //@line 5509 "cPickle.c"
        var $178=(($177+44)&4294967295); //@line 5509 "cPickle.c"
        var $179=HEAP[$178]; //@line 5509 "cPickle.c"
        var $180=(($179)&4294967295); //@line 5509 "cPickle.c"
        var $181=HEAP[$180]; //@line 5509 "cPickle.c"
        var $182=((($181) - 1)&4294967295); //@line 5509 "cPickle.c"
        var $183=(($179)&4294967295); //@line 5509 "cPickle.c"
        HEAP[$183]=$182; //@line 5509 "cPickle.c"
        var $184=(($179)&4294967295); //@line 5509 "cPickle.c"
        var $185=HEAP[$184]; //@line 5509 "cPickle.c"
        var $186=((($185))|0)==0; //@line 5509 "cPickle.c"
        if ($186) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 5509 "cPickle.c"
      case 23: // $bb22
        var $187=HEAP[$self_addr]; //@line 5509 "cPickle.c"
        var $188=(($187+44)&4294967295); //@line 5509 "cPickle.c"
        var $189=HEAP[$188]; //@line 5509 "cPickle.c"
        var $190=(($189+4)&4294967295); //@line 5509 "cPickle.c"
        var $191=HEAP[$190]; //@line 5509 "cPickle.c"
        var $192=(($191+24)&4294967295); //@line 5509 "cPickle.c"
        var $193=HEAP[$192]; //@line 5509 "cPickle.c"
        var $194=HEAP[$self_addr]; //@line 5509 "cPickle.c"
        var $195=(($194+44)&4294967295); //@line 5509 "cPickle.c"
        var $196=HEAP[$195]; //@line 5509 "cPickle.c"
        FUNCTION_TABLE[$193]($196); //@line 5509 "cPickle.c"
        __label__ = 24; break; //@line 5509 "cPickle.c"
      case 24: // $bb23
        var $197=HEAP[$self_addr]; //@line 5510 "cPickle.c"
        var $198=(($197+76)&4294967295); //@line 5510 "cPickle.c"
        var $199=HEAP[$198]; //@line 5510 "cPickle.c"
        var $200=($199)!=0; //@line 5510 "cPickle.c"
        if ($200) { __label__ = 25; break; } else { __label__ = 27; break; } //@line 5510 "cPickle.c"
      case 25: // $bb24
        var $201=HEAP[$self_addr]; //@line 5510 "cPickle.c"
        var $202=(($201+76)&4294967295); //@line 5510 "cPickle.c"
        var $203=HEAP[$202]; //@line 5510 "cPickle.c"
        var $204=(($203)&4294967295); //@line 5510 "cPickle.c"
        var $205=HEAP[$204]; //@line 5510 "cPickle.c"
        var $206=((($205) - 1)&4294967295); //@line 5510 "cPickle.c"
        var $207=(($203)&4294967295); //@line 5510 "cPickle.c"
        HEAP[$207]=$206; //@line 5510 "cPickle.c"
        var $208=(($203)&4294967295); //@line 5510 "cPickle.c"
        var $209=HEAP[$208]; //@line 5510 "cPickle.c"
        var $210=((($209))|0)==0; //@line 5510 "cPickle.c"
        if ($210) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 5510 "cPickle.c"
      case 26: // $bb25
        var $211=HEAP[$self_addr]; //@line 5510 "cPickle.c"
        var $212=(($211+76)&4294967295); //@line 5510 "cPickle.c"
        var $213=HEAP[$212]; //@line 5510 "cPickle.c"
        var $214=(($213+4)&4294967295); //@line 5510 "cPickle.c"
        var $215=HEAP[$214]; //@line 5510 "cPickle.c"
        var $216=(($215+24)&4294967295); //@line 5510 "cPickle.c"
        var $217=HEAP[$216]; //@line 5510 "cPickle.c"
        var $218=HEAP[$self_addr]; //@line 5510 "cPickle.c"
        var $219=(($218+76)&4294967295); //@line 5510 "cPickle.c"
        var $220=HEAP[$219]; //@line 5510 "cPickle.c"
        FUNCTION_TABLE[$217]($220); //@line 5510 "cPickle.c"
        __label__ = 27; break; //@line 5510 "cPickle.c"
      case 27: // $bb26
        var $221=HEAP[$self_addr]; //@line 5512 "cPickle.c"
        var $222=(($221+48)&4294967295); //@line 5512 "cPickle.c"
        var $223=HEAP[$222]; //@line 5512 "cPickle.c"
        var $224=($223)!=0; //@line 5512 "cPickle.c"
        if ($224) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 5512 "cPickle.c"
      case 28: // $bb27
        var $225=HEAP[$self_addr]; //@line 5513 "cPickle.c"
        var $226=(($225+48)&4294967295); //@line 5513 "cPickle.c"
        var $227=HEAP[$226]; //@line 5513 "cPickle.c"
        var $228=$227; //@line 5513 "cPickle.c"
        _free($228); //@line 5513 "cPickle.c"
        __label__ = 29; break; //@line 5513 "cPickle.c"
      case 29: // $bb28
        var $229=HEAP[$self_addr]; //@line 5516 "cPickle.c"
        var $230=(($229+68)&4294967295); //@line 5516 "cPickle.c"
        var $231=HEAP[$230]; //@line 5516 "cPickle.c"
        var $232=((($231))|0)!=0; //@line 5516 "cPickle.c"
        if ($232) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 5516 "cPickle.c"
      case 30: // $bb29
        var $233=HEAP[$self_addr]; //@line 5517 "cPickle.c"
        var $234=(($233+72)&4294967295); //@line 5517 "cPickle.c"
        var $235=HEAP[$234]; //@line 5517 "cPickle.c"
        _free($235); //@line 5517 "cPickle.c"
        __label__ = 31; break; //@line 5517 "cPickle.c"
      case 31: // $bb30
        var $236=HEAP[$self_addr]; //@line 5520 "cPickle.c"
        var $237=$236; //@line 5520 "cPickle.c"
        var $238=(($237+4)&4294967295); //@line 5520 "cPickle.c"
        var $239=HEAP[$238]; //@line 5520 "cPickle.c"
        var $240=(($239+160)&4294967295); //@line 5520 "cPickle.c"
        var $241=HEAP[$240]; //@line 5520 "cPickle.c"
        var $242=HEAP[$self_addr]; //@line 5520 "cPickle.c"
        var $243=$242; //@line 5520 "cPickle.c"
        FUNCTION_TABLE[$241]($243); //@line 5520 "cPickle.c"
        __label__ = 32; break; //@line 5521 "cPickle.c"
      case 32: // $return
        STACKTOP = __stackBase__;
        return; //@line 5521 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Unpickler_traverse($self, $visit, $arg) {
    var __stackBase__  = STACKTOP; STACKTOP += 56; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 56);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $visit_addr=__stackBase__+4;
        var $arg_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $vret=__stackBase__+20;
        var $vret4=__stackBase__+24;
        var $vret8=__stackBase__+28;
        var $vret12=__stackBase__+32;
        var $vret16=__stackBase__+36;
        var $vret20=__stackBase__+40;
        var $vret24=__stackBase__+44;
        var $vret28=__stackBase__+48;
        var $vret32=__stackBase__+52;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$visit_addr]=$visit;
        HEAP[$arg_addr]=$arg;
        var $1=HEAP[$self_addr]; //@line 5526 "cPickle.c"
        var $2=(($1+16)&4294967295); //@line 5526 "cPickle.c"
        var $3=HEAP[$2]; //@line 5526 "cPickle.c"
        var $4=($3)!=0; //@line 5526 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 5526 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 5526 "cPickle.c"
        var $6=(($5+16)&4294967295); //@line 5526 "cPickle.c"
        var $7=HEAP[$6]; //@line 5526 "cPickle.c"
        var $8=HEAP[$visit_addr]; //@line 5526 "cPickle.c"
        var $9=HEAP[$arg_addr]; //@line 5526 "cPickle.c"
        var $10=FUNCTION_TABLE[$8]($7, $9); //@line 5526 "cPickle.c"
        HEAP[$vret]=$10; //@line 5526 "cPickle.c"
        var $11=HEAP[$vret]; //@line 5526 "cPickle.c"
        var $12=((($11))|0)!=0; //@line 5526 "cPickle.c"
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 5526 "cPickle.c"
      case 2: // $bb1
        var $13=HEAP[$vret]; //@line 5526 "cPickle.c"
        HEAP[$0]=$13; //@line 5526 "cPickle.c"
        __label__ = 28; break; //@line 5526 "cPickle.c"
      case 3: // $bb2
        var $14=HEAP[$self_addr]; //@line 5527 "cPickle.c"
        var $15=(($14+20)&4294967295); //@line 5527 "cPickle.c"
        var $16=HEAP[$15]; //@line 5527 "cPickle.c"
        var $17=($16)!=0; //@line 5527 "cPickle.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 5527 "cPickle.c"
      case 4: // $bb3
        var $18=HEAP[$self_addr]; //@line 5527 "cPickle.c"
        var $19=(($18+20)&4294967295); //@line 5527 "cPickle.c"
        var $20=HEAP[$19]; //@line 5527 "cPickle.c"
        var $21=HEAP[$visit_addr]; //@line 5527 "cPickle.c"
        var $22=HEAP[$arg_addr]; //@line 5527 "cPickle.c"
        var $23=FUNCTION_TABLE[$21]($20, $22); //@line 5527 "cPickle.c"
        HEAP[$vret4]=$23; //@line 5527 "cPickle.c"
        var $24=HEAP[$vret4]; //@line 5527 "cPickle.c"
        var $25=((($24))|0)!=0; //@line 5527 "cPickle.c"
        if ($25) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5527 "cPickle.c"
      case 5: // $bb5
        var $26=HEAP[$vret4]; //@line 5527 "cPickle.c"
        HEAP[$0]=$26; //@line 5527 "cPickle.c"
        __label__ = 28; break; //@line 5527 "cPickle.c"
      case 6: // $bb6
        var $27=HEAP[$self_addr]; //@line 5528 "cPickle.c"
        var $28=(($27+12)&4294967295); //@line 5528 "cPickle.c"
        var $29=HEAP[$28]; //@line 5528 "cPickle.c"
        var $30=($29)!=0; //@line 5528 "cPickle.c"
        if ($30) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 5528 "cPickle.c"
      case 7: // $bb7
        var $31=HEAP[$self_addr]; //@line 5528 "cPickle.c"
        var $32=(($31+12)&4294967295); //@line 5528 "cPickle.c"
        var $33=HEAP[$32]; //@line 5528 "cPickle.c"
        var $34=HEAP[$visit_addr]; //@line 5528 "cPickle.c"
        var $35=HEAP[$arg_addr]; //@line 5528 "cPickle.c"
        var $36=FUNCTION_TABLE[$34]($33, $35); //@line 5528 "cPickle.c"
        HEAP[$vret8]=$36; //@line 5528 "cPickle.c"
        var $37=HEAP[$vret8]; //@line 5528 "cPickle.c"
        var $38=((($37))|0)!=0; //@line 5528 "cPickle.c"
        if ($38) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 5528 "cPickle.c"
      case 8: // $bb9
        var $39=HEAP[$vret8]; //@line 5528 "cPickle.c"
        HEAP[$0]=$39; //@line 5528 "cPickle.c"
        __label__ = 28; break; //@line 5528 "cPickle.c"
      case 9: // $bb10
        var $40=HEAP[$self_addr]; //@line 5529 "cPickle.c"
        var $41=(($40+24)&4294967295); //@line 5529 "cPickle.c"
        var $42=HEAP[$41]; //@line 5529 "cPickle.c"
        var $43=($42)!=0; //@line 5529 "cPickle.c"
        if ($43) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 5529 "cPickle.c"
      case 10: // $bb11
        var $44=HEAP[$self_addr]; //@line 5529 "cPickle.c"
        var $45=(($44+24)&4294967295); //@line 5529 "cPickle.c"
        var $46=HEAP[$45]; //@line 5529 "cPickle.c"
        var $47=HEAP[$visit_addr]; //@line 5529 "cPickle.c"
        var $48=HEAP[$arg_addr]; //@line 5529 "cPickle.c"
        var $49=FUNCTION_TABLE[$47]($46, $48); //@line 5529 "cPickle.c"
        HEAP[$vret12]=$49; //@line 5529 "cPickle.c"
        var $50=HEAP[$vret12]; //@line 5529 "cPickle.c"
        var $51=((($50))|0)!=0; //@line 5529 "cPickle.c"
        if ($51) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 5529 "cPickle.c"
      case 11: // $bb13
        var $52=HEAP[$vret12]; //@line 5529 "cPickle.c"
        HEAP[$0]=$52; //@line 5529 "cPickle.c"
        __label__ = 28; break; //@line 5529 "cPickle.c"
      case 12: // $bb14
        var $53=HEAP[$self_addr]; //@line 5530 "cPickle.c"
        var $54=(($53+32)&4294967295); //@line 5530 "cPickle.c"
        var $55=HEAP[$54]; //@line 5530 "cPickle.c"
        var $56=($55)!=0; //@line 5530 "cPickle.c"
        if ($56) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 5530 "cPickle.c"
      case 13: // $bb15
        var $57=HEAP[$self_addr]; //@line 5530 "cPickle.c"
        var $58=(($57+32)&4294967295); //@line 5530 "cPickle.c"
        var $59=HEAP[$58]; //@line 5530 "cPickle.c"
        var $60=$59; //@line 5530 "cPickle.c"
        var $61=HEAP[$visit_addr]; //@line 5530 "cPickle.c"
        var $62=HEAP[$arg_addr]; //@line 5530 "cPickle.c"
        var $63=FUNCTION_TABLE[$61]($60, $62); //@line 5530 "cPickle.c"
        HEAP[$vret16]=$63; //@line 5530 "cPickle.c"
        var $64=HEAP[$vret16]; //@line 5530 "cPickle.c"
        var $65=((($64))|0)!=0; //@line 5530 "cPickle.c"
        if ($65) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 5530 "cPickle.c"
      case 14: // $bb17
        var $66=HEAP[$vret16]; //@line 5530 "cPickle.c"
        HEAP[$0]=$66; //@line 5530 "cPickle.c"
        __label__ = 28; break; //@line 5530 "cPickle.c"
      case 15: // $bb18
        var $67=HEAP[$self_addr]; //@line 5531 "cPickle.c"
        var $68=(($67+40)&4294967295); //@line 5531 "cPickle.c"
        var $69=HEAP[$68]; //@line 5531 "cPickle.c"
        var $70=($69)!=0; //@line 5531 "cPickle.c"
        if ($70) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 5531 "cPickle.c"
      case 16: // $bb19
        var $71=HEAP[$self_addr]; //@line 5531 "cPickle.c"
        var $72=(($71+40)&4294967295); //@line 5531 "cPickle.c"
        var $73=HEAP[$72]; //@line 5531 "cPickle.c"
        var $74=HEAP[$visit_addr]; //@line 5531 "cPickle.c"
        var $75=HEAP[$arg_addr]; //@line 5531 "cPickle.c"
        var $76=FUNCTION_TABLE[$74]($73, $75); //@line 5531 "cPickle.c"
        HEAP[$vret20]=$76; //@line 5531 "cPickle.c"
        var $77=HEAP[$vret20]; //@line 5531 "cPickle.c"
        var $78=((($77))|0)!=0; //@line 5531 "cPickle.c"
        if ($78) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 5531 "cPickle.c"
      case 17: // $bb21
        var $79=HEAP[$vret20]; //@line 5531 "cPickle.c"
        HEAP[$0]=$79; //@line 5531 "cPickle.c"
        __label__ = 28; break; //@line 5531 "cPickle.c"
      case 18: // $bb22
        var $80=HEAP[$self_addr]; //@line 5532 "cPickle.c"
        var $81=(($80+28)&4294967295); //@line 5532 "cPickle.c"
        var $82=HEAP[$81]; //@line 5532 "cPickle.c"
        var $83=($82)!=0; //@line 5532 "cPickle.c"
        if ($83) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 5532 "cPickle.c"
      case 19: // $bb23
        var $84=HEAP[$self_addr]; //@line 5532 "cPickle.c"
        var $85=(($84+28)&4294967295); //@line 5532 "cPickle.c"
        var $86=HEAP[$85]; //@line 5532 "cPickle.c"
        var $87=HEAP[$visit_addr]; //@line 5532 "cPickle.c"
        var $88=HEAP[$arg_addr]; //@line 5532 "cPickle.c"
        var $89=FUNCTION_TABLE[$87]($86, $88); //@line 5532 "cPickle.c"
        HEAP[$vret24]=$89; //@line 5532 "cPickle.c"
        var $90=HEAP[$vret24]; //@line 5532 "cPickle.c"
        var $91=((($90))|0)!=0; //@line 5532 "cPickle.c"
        if ($91) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 5532 "cPickle.c"
      case 20: // $bb25
        var $92=HEAP[$vret24]; //@line 5532 "cPickle.c"
        HEAP[$0]=$92; //@line 5532 "cPickle.c"
        __label__ = 28; break; //@line 5532 "cPickle.c"
      case 21: // $bb26
        var $93=HEAP[$self_addr]; //@line 5533 "cPickle.c"
        var $94=(($93+44)&4294967295); //@line 5533 "cPickle.c"
        var $95=HEAP[$94]; //@line 5533 "cPickle.c"
        var $96=($95)!=0; //@line 5533 "cPickle.c"
        if ($96) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 5533 "cPickle.c"
      case 22: // $bb27
        var $97=HEAP[$self_addr]; //@line 5533 "cPickle.c"
        var $98=(($97+44)&4294967295); //@line 5533 "cPickle.c"
        var $99=HEAP[$98]; //@line 5533 "cPickle.c"
        var $100=HEAP[$visit_addr]; //@line 5533 "cPickle.c"
        var $101=HEAP[$arg_addr]; //@line 5533 "cPickle.c"
        var $102=FUNCTION_TABLE[$100]($99, $101); //@line 5533 "cPickle.c"
        HEAP[$vret28]=$102; //@line 5533 "cPickle.c"
        var $103=HEAP[$vret28]; //@line 5533 "cPickle.c"
        var $104=((($103))|0)!=0; //@line 5533 "cPickle.c"
        if ($104) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 5533 "cPickle.c"
      case 23: // $bb29
        var $105=HEAP[$vret28]; //@line 5533 "cPickle.c"
        HEAP[$0]=$105; //@line 5533 "cPickle.c"
        __label__ = 28; break; //@line 5533 "cPickle.c"
      case 24: // $bb30
        var $106=HEAP[$self_addr]; //@line 5534 "cPickle.c"
        var $107=(($106+76)&4294967295); //@line 5534 "cPickle.c"
        var $108=HEAP[$107]; //@line 5534 "cPickle.c"
        var $109=($108)!=0; //@line 5534 "cPickle.c"
        if ($109) { __label__ = 25; break; } else { __label__ = 27; break; } //@line 5534 "cPickle.c"
      case 25: // $bb31
        var $110=HEAP[$self_addr]; //@line 5534 "cPickle.c"
        var $111=(($110+76)&4294967295); //@line 5534 "cPickle.c"
        var $112=HEAP[$111]; //@line 5534 "cPickle.c"
        var $113=HEAP[$visit_addr]; //@line 5534 "cPickle.c"
        var $114=HEAP[$arg_addr]; //@line 5534 "cPickle.c"
        var $115=FUNCTION_TABLE[$113]($112, $114); //@line 5534 "cPickle.c"
        HEAP[$vret32]=$115; //@line 5534 "cPickle.c"
        var $116=HEAP[$vret32]; //@line 5534 "cPickle.c"
        var $117=((($116))|0)!=0; //@line 5534 "cPickle.c"
        if ($117) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 5534 "cPickle.c"
      case 26: // $bb33
        var $118=HEAP[$vret32]; //@line 5534 "cPickle.c"
        HEAP[$0]=$118; //@line 5534 "cPickle.c"
        __label__ = 28; break; //@line 5534 "cPickle.c"
      case 27: // $bb34
        HEAP[$0]=0; //@line 5535 "cPickle.c"
        __label__ = 28; break; //@line 5535 "cPickle.c"
      case 28: // $bb35
        var $119=HEAP[$0]; //@line 5526 "cPickle.c"
        HEAP[$retval]=$119; //@line 5526 "cPickle.c"
        __label__ = 29; break; //@line 5526 "cPickle.c"
      case 29: // $return
        var $retval36=HEAP[$retval]; //@line 5526 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval36; //@line 5526 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Unpickler_clear($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 48; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 48);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_py_tmp=__stackBase__+12;
        var $_py_tmp4=__stackBase__+16;
        var $_py_tmp8=__stackBase__+20;
        var $_py_tmp12=__stackBase__+24;
        var $_py_tmp16=__stackBase__+28;
        var $_py_tmp20=__stackBase__+32;
        var $_py_tmp24=__stackBase__+36;
        var $_py_tmp28=__stackBase__+40;
        var $_py_tmp32=__stackBase__+44;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 5541 "cPickle.c"
        var $2=(($1+16)&4294967295); //@line 5541 "cPickle.c"
        var $3=HEAP[$2]; //@line 5541 "cPickle.c"
        var $4=($3)!=0; //@line 5541 "cPickle.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 5541 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 5541 "cPickle.c"
        var $6=(($5+16)&4294967295); //@line 5541 "cPickle.c"
        var $7=HEAP[$6]; //@line 5541 "cPickle.c"
        HEAP[$_py_tmp]=$7; //@line 5541 "cPickle.c"
        var $8=HEAP[$self_addr]; //@line 5541 "cPickle.c"
        var $9=(($8+16)&4294967295); //@line 5541 "cPickle.c"
        HEAP[$9]=0; //@line 5541 "cPickle.c"
        var $10=HEAP[$_py_tmp]; //@line 5541 "cPickle.c"
        var $11=(($10)&4294967295); //@line 5541 "cPickle.c"
        var $12=HEAP[$11]; //@line 5541 "cPickle.c"
        var $13=((($12) - 1)&4294967295); //@line 5541 "cPickle.c"
        var $14=HEAP[$_py_tmp]; //@line 5541 "cPickle.c"
        var $15=(($14)&4294967295); //@line 5541 "cPickle.c"
        HEAP[$15]=$13; //@line 5541 "cPickle.c"
        var $16=HEAP[$_py_tmp]; //@line 5541 "cPickle.c"
        var $17=(($16)&4294967295); //@line 5541 "cPickle.c"
        var $18=HEAP[$17]; //@line 5541 "cPickle.c"
        var $19=((($18))|0)==0; //@line 5541 "cPickle.c"
        if ($19) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 5541 "cPickle.c"
      case 2: // $bb1
        var $20=HEAP[$_py_tmp]; //@line 5541 "cPickle.c"
        var $21=(($20+4)&4294967295); //@line 5541 "cPickle.c"
        var $22=HEAP[$21]; //@line 5541 "cPickle.c"
        var $23=(($22+24)&4294967295); //@line 5541 "cPickle.c"
        var $24=HEAP[$23]; //@line 5541 "cPickle.c"
        var $25=HEAP[$_py_tmp]; //@line 5541 "cPickle.c"
        FUNCTION_TABLE[$24]($25); //@line 5541 "cPickle.c"
        __label__ = 3; break; //@line 5541 "cPickle.c"
      case 3: // $bb2
        var $26=HEAP[$self_addr]; //@line 5542 "cPickle.c"
        var $27=(($26+20)&4294967295); //@line 5542 "cPickle.c"
        var $28=HEAP[$27]; //@line 5542 "cPickle.c"
        var $29=($28)!=0; //@line 5542 "cPickle.c"
        if ($29) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 5542 "cPickle.c"
      case 4: // $bb3
        var $30=HEAP[$self_addr]; //@line 5542 "cPickle.c"
        var $31=(($30+20)&4294967295); //@line 5542 "cPickle.c"
        var $32=HEAP[$31]; //@line 5542 "cPickle.c"
        HEAP[$_py_tmp4]=$32; //@line 5542 "cPickle.c"
        var $33=HEAP[$self_addr]; //@line 5542 "cPickle.c"
        var $34=(($33+20)&4294967295); //@line 5542 "cPickle.c"
        HEAP[$34]=0; //@line 5542 "cPickle.c"
        var $35=HEAP[$_py_tmp4]; //@line 5542 "cPickle.c"
        var $36=(($35)&4294967295); //@line 5542 "cPickle.c"
        var $37=HEAP[$36]; //@line 5542 "cPickle.c"
        var $38=((($37) - 1)&4294967295); //@line 5542 "cPickle.c"
        var $39=HEAP[$_py_tmp4]; //@line 5542 "cPickle.c"
        var $40=(($39)&4294967295); //@line 5542 "cPickle.c"
        HEAP[$40]=$38; //@line 5542 "cPickle.c"
        var $41=HEAP[$_py_tmp4]; //@line 5542 "cPickle.c"
        var $42=(($41)&4294967295); //@line 5542 "cPickle.c"
        var $43=HEAP[$42]; //@line 5542 "cPickle.c"
        var $44=((($43))|0)==0; //@line 5542 "cPickle.c"
        if ($44) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5542 "cPickle.c"
      case 5: // $bb5
        var $45=HEAP[$_py_tmp4]; //@line 5542 "cPickle.c"
        var $46=(($45+4)&4294967295); //@line 5542 "cPickle.c"
        var $47=HEAP[$46]; //@line 5542 "cPickle.c"
        var $48=(($47+24)&4294967295); //@line 5542 "cPickle.c"
        var $49=HEAP[$48]; //@line 5542 "cPickle.c"
        var $50=HEAP[$_py_tmp4]; //@line 5542 "cPickle.c"
        FUNCTION_TABLE[$49]($50); //@line 5542 "cPickle.c"
        __label__ = 6; break; //@line 5542 "cPickle.c"
      case 6: // $bb6
        var $51=HEAP[$self_addr]; //@line 5543 "cPickle.c"
        var $52=(($51+12)&4294967295); //@line 5543 "cPickle.c"
        var $53=HEAP[$52]; //@line 5543 "cPickle.c"
        var $54=($53)!=0; //@line 5543 "cPickle.c"
        if ($54) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 5543 "cPickle.c"
      case 7: // $bb7
        var $55=HEAP[$self_addr]; //@line 5543 "cPickle.c"
        var $56=(($55+12)&4294967295); //@line 5543 "cPickle.c"
        var $57=HEAP[$56]; //@line 5543 "cPickle.c"
        HEAP[$_py_tmp8]=$57; //@line 5543 "cPickle.c"
        var $58=HEAP[$self_addr]; //@line 5543 "cPickle.c"
        var $59=(($58+12)&4294967295); //@line 5543 "cPickle.c"
        HEAP[$59]=0; //@line 5543 "cPickle.c"
        var $60=HEAP[$_py_tmp8]; //@line 5543 "cPickle.c"
        var $61=(($60)&4294967295); //@line 5543 "cPickle.c"
        var $62=HEAP[$61]; //@line 5543 "cPickle.c"
        var $63=((($62) - 1)&4294967295); //@line 5543 "cPickle.c"
        var $64=HEAP[$_py_tmp8]; //@line 5543 "cPickle.c"
        var $65=(($64)&4294967295); //@line 5543 "cPickle.c"
        HEAP[$65]=$63; //@line 5543 "cPickle.c"
        var $66=HEAP[$_py_tmp8]; //@line 5543 "cPickle.c"
        var $67=(($66)&4294967295); //@line 5543 "cPickle.c"
        var $68=HEAP[$67]; //@line 5543 "cPickle.c"
        var $69=((($68))|0)==0; //@line 5543 "cPickle.c"
        if ($69) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 5543 "cPickle.c"
      case 8: // $bb9
        var $70=HEAP[$_py_tmp8]; //@line 5543 "cPickle.c"
        var $71=(($70+4)&4294967295); //@line 5543 "cPickle.c"
        var $72=HEAP[$71]; //@line 5543 "cPickle.c"
        var $73=(($72+24)&4294967295); //@line 5543 "cPickle.c"
        var $74=HEAP[$73]; //@line 5543 "cPickle.c"
        var $75=HEAP[$_py_tmp8]; //@line 5543 "cPickle.c"
        FUNCTION_TABLE[$74]($75); //@line 5543 "cPickle.c"
        __label__ = 9; break; //@line 5543 "cPickle.c"
      case 9: // $bb10
        var $76=HEAP[$self_addr]; //@line 5544 "cPickle.c"
        var $77=(($76+24)&4294967295); //@line 5544 "cPickle.c"
        var $78=HEAP[$77]; //@line 5544 "cPickle.c"
        var $79=($78)!=0; //@line 5544 "cPickle.c"
        if ($79) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 5544 "cPickle.c"
      case 10: // $bb11
        var $80=HEAP[$self_addr]; //@line 5544 "cPickle.c"
        var $81=(($80+24)&4294967295); //@line 5544 "cPickle.c"
        var $82=HEAP[$81]; //@line 5544 "cPickle.c"
        HEAP[$_py_tmp12]=$82; //@line 5544 "cPickle.c"
        var $83=HEAP[$self_addr]; //@line 5544 "cPickle.c"
        var $84=(($83+24)&4294967295); //@line 5544 "cPickle.c"
        HEAP[$84]=0; //@line 5544 "cPickle.c"
        var $85=HEAP[$_py_tmp12]; //@line 5544 "cPickle.c"
        var $86=(($85)&4294967295); //@line 5544 "cPickle.c"
        var $87=HEAP[$86]; //@line 5544 "cPickle.c"
        var $88=((($87) - 1)&4294967295); //@line 5544 "cPickle.c"
        var $89=HEAP[$_py_tmp12]; //@line 5544 "cPickle.c"
        var $90=(($89)&4294967295); //@line 5544 "cPickle.c"
        HEAP[$90]=$88; //@line 5544 "cPickle.c"
        var $91=HEAP[$_py_tmp12]; //@line 5544 "cPickle.c"
        var $92=(($91)&4294967295); //@line 5544 "cPickle.c"
        var $93=HEAP[$92]; //@line 5544 "cPickle.c"
        var $94=((($93))|0)==0; //@line 5544 "cPickle.c"
        if ($94) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 5544 "cPickle.c"
      case 11: // $bb13
        var $95=HEAP[$_py_tmp12]; //@line 5544 "cPickle.c"
        var $96=(($95+4)&4294967295); //@line 5544 "cPickle.c"
        var $97=HEAP[$96]; //@line 5544 "cPickle.c"
        var $98=(($97+24)&4294967295); //@line 5544 "cPickle.c"
        var $99=HEAP[$98]; //@line 5544 "cPickle.c"
        var $100=HEAP[$_py_tmp12]; //@line 5544 "cPickle.c"
        FUNCTION_TABLE[$99]($100); //@line 5544 "cPickle.c"
        __label__ = 12; break; //@line 5544 "cPickle.c"
      case 12: // $bb14
        var $101=HEAP[$self_addr]; //@line 5545 "cPickle.c"
        var $102=(($101+32)&4294967295); //@line 5545 "cPickle.c"
        var $103=HEAP[$102]; //@line 5545 "cPickle.c"
        var $104=($103)!=0; //@line 5545 "cPickle.c"
        if ($104) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 5545 "cPickle.c"
      case 13: // $bb15
        var $105=HEAP[$self_addr]; //@line 5545 "cPickle.c"
        var $106=(($105+32)&4294967295); //@line 5545 "cPickle.c"
        var $107=HEAP[$106]; //@line 5545 "cPickle.c"
        var $108=$107; //@line 5545 "cPickle.c"
        HEAP[$_py_tmp16]=$108; //@line 5545 "cPickle.c"
        var $109=HEAP[$self_addr]; //@line 5545 "cPickle.c"
        var $110=(($109+32)&4294967295); //@line 5545 "cPickle.c"
        HEAP[$110]=0; //@line 5545 "cPickle.c"
        var $111=HEAP[$_py_tmp16]; //@line 5545 "cPickle.c"
        var $112=(($111)&4294967295); //@line 5545 "cPickle.c"
        var $113=HEAP[$112]; //@line 5545 "cPickle.c"
        var $114=((($113) - 1)&4294967295); //@line 5545 "cPickle.c"
        var $115=HEAP[$_py_tmp16]; //@line 5545 "cPickle.c"
        var $116=(($115)&4294967295); //@line 5545 "cPickle.c"
        HEAP[$116]=$114; //@line 5545 "cPickle.c"
        var $117=HEAP[$_py_tmp16]; //@line 5545 "cPickle.c"
        var $118=(($117)&4294967295); //@line 5545 "cPickle.c"
        var $119=HEAP[$118]; //@line 5545 "cPickle.c"
        var $120=((($119))|0)==0; //@line 5545 "cPickle.c"
        if ($120) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 5545 "cPickle.c"
      case 14: // $bb17
        var $121=HEAP[$_py_tmp16]; //@line 5545 "cPickle.c"
        var $122=(($121+4)&4294967295); //@line 5545 "cPickle.c"
        var $123=HEAP[$122]; //@line 5545 "cPickle.c"
        var $124=(($123+24)&4294967295); //@line 5545 "cPickle.c"
        var $125=HEAP[$124]; //@line 5545 "cPickle.c"
        var $126=HEAP[$_py_tmp16]; //@line 5545 "cPickle.c"
        FUNCTION_TABLE[$125]($126); //@line 5545 "cPickle.c"
        __label__ = 15; break; //@line 5545 "cPickle.c"
      case 15: // $bb18
        var $127=HEAP[$self_addr]; //@line 5546 "cPickle.c"
        var $128=(($127+40)&4294967295); //@line 5546 "cPickle.c"
        var $129=HEAP[$128]; //@line 5546 "cPickle.c"
        var $130=($129)!=0; //@line 5546 "cPickle.c"
        if ($130) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 5546 "cPickle.c"
      case 16: // $bb19
        var $131=HEAP[$self_addr]; //@line 5546 "cPickle.c"
        var $132=(($131+40)&4294967295); //@line 5546 "cPickle.c"
        var $133=HEAP[$132]; //@line 5546 "cPickle.c"
        HEAP[$_py_tmp20]=$133; //@line 5546 "cPickle.c"
        var $134=HEAP[$self_addr]; //@line 5546 "cPickle.c"
        var $135=(($134+40)&4294967295); //@line 5546 "cPickle.c"
        HEAP[$135]=0; //@line 5546 "cPickle.c"
        var $136=HEAP[$_py_tmp20]; //@line 5546 "cPickle.c"
        var $137=(($136)&4294967295); //@line 5546 "cPickle.c"
        var $138=HEAP[$137]; //@line 5546 "cPickle.c"
        var $139=((($138) - 1)&4294967295); //@line 5546 "cPickle.c"
        var $140=HEAP[$_py_tmp20]; //@line 5546 "cPickle.c"
        var $141=(($140)&4294967295); //@line 5546 "cPickle.c"
        HEAP[$141]=$139; //@line 5546 "cPickle.c"
        var $142=HEAP[$_py_tmp20]; //@line 5546 "cPickle.c"
        var $143=(($142)&4294967295); //@line 5546 "cPickle.c"
        var $144=HEAP[$143]; //@line 5546 "cPickle.c"
        var $145=((($144))|0)==0; //@line 5546 "cPickle.c"
        if ($145) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 5546 "cPickle.c"
      case 17: // $bb21
        var $146=HEAP[$_py_tmp20]; //@line 5546 "cPickle.c"
        var $147=(($146+4)&4294967295); //@line 5546 "cPickle.c"
        var $148=HEAP[$147]; //@line 5546 "cPickle.c"
        var $149=(($148+24)&4294967295); //@line 5546 "cPickle.c"
        var $150=HEAP[$149]; //@line 5546 "cPickle.c"
        var $151=HEAP[$_py_tmp20]; //@line 5546 "cPickle.c"
        FUNCTION_TABLE[$150]($151); //@line 5546 "cPickle.c"
        __label__ = 18; break; //@line 5546 "cPickle.c"
      case 18: // $bb22
        var $152=HEAP[$self_addr]; //@line 5547 "cPickle.c"
        var $153=(($152+28)&4294967295); //@line 5547 "cPickle.c"
        var $154=HEAP[$153]; //@line 5547 "cPickle.c"
        var $155=($154)!=0; //@line 5547 "cPickle.c"
        if ($155) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 5547 "cPickle.c"
      case 19: // $bb23
        var $156=HEAP[$self_addr]; //@line 5547 "cPickle.c"
        var $157=(($156+28)&4294967295); //@line 5547 "cPickle.c"
        var $158=HEAP[$157]; //@line 5547 "cPickle.c"
        HEAP[$_py_tmp24]=$158; //@line 5547 "cPickle.c"
        var $159=HEAP[$self_addr]; //@line 5547 "cPickle.c"
        var $160=(($159+28)&4294967295); //@line 5547 "cPickle.c"
        HEAP[$160]=0; //@line 5547 "cPickle.c"
        var $161=HEAP[$_py_tmp24]; //@line 5547 "cPickle.c"
        var $162=(($161)&4294967295); //@line 5547 "cPickle.c"
        var $163=HEAP[$162]; //@line 5547 "cPickle.c"
        var $164=((($163) - 1)&4294967295); //@line 5547 "cPickle.c"
        var $165=HEAP[$_py_tmp24]; //@line 5547 "cPickle.c"
        var $166=(($165)&4294967295); //@line 5547 "cPickle.c"
        HEAP[$166]=$164; //@line 5547 "cPickle.c"
        var $167=HEAP[$_py_tmp24]; //@line 5547 "cPickle.c"
        var $168=(($167)&4294967295); //@line 5547 "cPickle.c"
        var $169=HEAP[$168]; //@line 5547 "cPickle.c"
        var $170=((($169))|0)==0; //@line 5547 "cPickle.c"
        if ($170) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 5547 "cPickle.c"
      case 20: // $bb25
        var $171=HEAP[$_py_tmp24]; //@line 5547 "cPickle.c"
        var $172=(($171+4)&4294967295); //@line 5547 "cPickle.c"
        var $173=HEAP[$172]; //@line 5547 "cPickle.c"
        var $174=(($173+24)&4294967295); //@line 5547 "cPickle.c"
        var $175=HEAP[$174]; //@line 5547 "cPickle.c"
        var $176=HEAP[$_py_tmp24]; //@line 5547 "cPickle.c"
        FUNCTION_TABLE[$175]($176); //@line 5547 "cPickle.c"
        __label__ = 21; break; //@line 5547 "cPickle.c"
      case 21: // $bb26
        var $177=HEAP[$self_addr]; //@line 5548 "cPickle.c"
        var $178=(($177+44)&4294967295); //@line 5548 "cPickle.c"
        var $179=HEAP[$178]; //@line 5548 "cPickle.c"
        var $180=($179)!=0; //@line 5548 "cPickle.c"
        if ($180) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 5548 "cPickle.c"
      case 22: // $bb27
        var $181=HEAP[$self_addr]; //@line 5548 "cPickle.c"
        var $182=(($181+44)&4294967295); //@line 5548 "cPickle.c"
        var $183=HEAP[$182]; //@line 5548 "cPickle.c"
        HEAP[$_py_tmp28]=$183; //@line 5548 "cPickle.c"
        var $184=HEAP[$self_addr]; //@line 5548 "cPickle.c"
        var $185=(($184+44)&4294967295); //@line 5548 "cPickle.c"
        HEAP[$185]=0; //@line 5548 "cPickle.c"
        var $186=HEAP[$_py_tmp28]; //@line 5548 "cPickle.c"
        var $187=(($186)&4294967295); //@line 5548 "cPickle.c"
        var $188=HEAP[$187]; //@line 5548 "cPickle.c"
        var $189=((($188) - 1)&4294967295); //@line 5548 "cPickle.c"
        var $190=HEAP[$_py_tmp28]; //@line 5548 "cPickle.c"
        var $191=(($190)&4294967295); //@line 5548 "cPickle.c"
        HEAP[$191]=$189; //@line 5548 "cPickle.c"
        var $192=HEAP[$_py_tmp28]; //@line 5548 "cPickle.c"
        var $193=(($192)&4294967295); //@line 5548 "cPickle.c"
        var $194=HEAP[$193]; //@line 5548 "cPickle.c"
        var $195=((($194))|0)==0; //@line 5548 "cPickle.c"
        if ($195) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 5548 "cPickle.c"
      case 23: // $bb29
        var $196=HEAP[$_py_tmp28]; //@line 5548 "cPickle.c"
        var $197=(($196+4)&4294967295); //@line 5548 "cPickle.c"
        var $198=HEAP[$197]; //@line 5548 "cPickle.c"
        var $199=(($198+24)&4294967295); //@line 5548 "cPickle.c"
        var $200=HEAP[$199]; //@line 5548 "cPickle.c"
        var $201=HEAP[$_py_tmp28]; //@line 5548 "cPickle.c"
        FUNCTION_TABLE[$200]($201); //@line 5548 "cPickle.c"
        __label__ = 24; break; //@line 5548 "cPickle.c"
      case 24: // $bb30
        var $202=HEAP[$self_addr]; //@line 5549 "cPickle.c"
        var $203=(($202+76)&4294967295); //@line 5549 "cPickle.c"
        var $204=HEAP[$203]; //@line 5549 "cPickle.c"
        var $205=($204)!=0; //@line 5549 "cPickle.c"
        if ($205) { __label__ = 25; break; } else { __label__ = 27; break; } //@line 5549 "cPickle.c"
      case 25: // $bb31
        var $206=HEAP[$self_addr]; //@line 5549 "cPickle.c"
        var $207=(($206+76)&4294967295); //@line 5549 "cPickle.c"
        var $208=HEAP[$207]; //@line 5549 "cPickle.c"
        HEAP[$_py_tmp32]=$208; //@line 5549 "cPickle.c"
        var $209=HEAP[$self_addr]; //@line 5549 "cPickle.c"
        var $210=(($209+76)&4294967295); //@line 5549 "cPickle.c"
        HEAP[$210]=0; //@line 5549 "cPickle.c"
        var $211=HEAP[$_py_tmp32]; //@line 5549 "cPickle.c"
        var $212=(($211)&4294967295); //@line 5549 "cPickle.c"
        var $213=HEAP[$212]; //@line 5549 "cPickle.c"
        var $214=((($213) - 1)&4294967295); //@line 5549 "cPickle.c"
        var $215=HEAP[$_py_tmp32]; //@line 5549 "cPickle.c"
        var $216=(($215)&4294967295); //@line 5549 "cPickle.c"
        HEAP[$216]=$214; //@line 5549 "cPickle.c"
        var $217=HEAP[$_py_tmp32]; //@line 5549 "cPickle.c"
        var $218=(($217)&4294967295); //@line 5549 "cPickle.c"
        var $219=HEAP[$218]; //@line 5549 "cPickle.c"
        var $220=((($219))|0)==0; //@line 5549 "cPickle.c"
        if ($220) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 5549 "cPickle.c"
      case 26: // $bb33
        var $221=HEAP[$_py_tmp32]; //@line 5549 "cPickle.c"
        var $222=(($221+4)&4294967295); //@line 5549 "cPickle.c"
        var $223=HEAP[$222]; //@line 5549 "cPickle.c"
        var $224=(($223+24)&4294967295); //@line 5549 "cPickle.c"
        var $225=HEAP[$224]; //@line 5549 "cPickle.c"
        var $226=HEAP[$_py_tmp32]; //@line 5549 "cPickle.c"
        FUNCTION_TABLE[$225]($226); //@line 5549 "cPickle.c"
        __label__ = 27; break; //@line 5549 "cPickle.c"
      case 27: // $bb34
        HEAP[$0]=0; //@line 5550 "cPickle.c"
        var $227=HEAP[$0]; //@line 5550 "cPickle.c"
        HEAP[$retval]=$227; //@line 5550 "cPickle.c"
        __label__ = 28; break; //@line 5550 "cPickle.c"
      case 28: // $return
        var $retval35=HEAP[$retval]; //@line 5550 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval35; //@line 5550 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Unpickler_getattr($self, $name) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $name_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$name_addr]=$name;
        var $1=HEAP[$name_addr]; //@line 5556 "cPickle.c"
        var $2=_strcmp($1, ((__str108)&4294967295)); //@line 5556 "cPickle.c"
        var $3=((($2))|0)==0; //@line 5556 "cPickle.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 5556 "cPickle.c"
      case 1: // $bb
        var $4=HEAP[$self_addr]; //@line 5557 "cPickle.c"
        var $5=(($4+40)&4294967295); //@line 5557 "cPickle.c"
        var $6=HEAP[$5]; //@line 5557 "cPickle.c"
        var $7=($6)==0; //@line 5557 "cPickle.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 5557 "cPickle.c"
      case 2: // $bb1
        var $8=HEAP[_PyExc_AttributeError]; //@line 5558 "cPickle.c"
        var $9=HEAP[$name_addr]; //@line 5558 "cPickle.c"
        _PyErr_SetString($8, $9); //@line 5558 "cPickle.c"
        HEAP[$0]=0; //@line 5559 "cPickle.c"
        __label__ = 15; break; //@line 5559 "cPickle.c"
      case 3: // $bb2
        var $10=HEAP[$self_addr]; //@line 5562 "cPickle.c"
        var $11=(($10+40)&4294967295); //@line 5562 "cPickle.c"
        var $12=HEAP[$11]; //@line 5562 "cPickle.c"
        var $13=(($12)&4294967295); //@line 5562 "cPickle.c"
        var $14=HEAP[$13]; //@line 5562 "cPickle.c"
        var $15=((($14) + 1)&4294967295); //@line 5562 "cPickle.c"
        var $16=(($12)&4294967295); //@line 5562 "cPickle.c"
        HEAP[$16]=$15; //@line 5562 "cPickle.c"
        var $17=HEAP[$self_addr]; //@line 5563 "cPickle.c"
        var $18=(($17+40)&4294967295); //@line 5563 "cPickle.c"
        var $19=HEAP[$18]; //@line 5563 "cPickle.c"
        HEAP[$0]=$19; //@line 5563 "cPickle.c"
        __label__ = 15; break; //@line 5563 "cPickle.c"
      case 4: // $bb3
        var $20=HEAP[$name_addr]; //@line 5566 "cPickle.c"
        var $21=_strcmp($20, ((__str109)&4294967295)); //@line 5566 "cPickle.c"
        var $22=((($21))|0)==0; //@line 5566 "cPickle.c"
        if ($22) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 5566 "cPickle.c"
      case 5: // $bb4
        var $23=HEAP[$self_addr]; //@line 5567 "cPickle.c"
        var $24=(($23+76)&4294967295); //@line 5567 "cPickle.c"
        var $25=HEAP[$24]; //@line 5567 "cPickle.c"
        var $26=($25)==0; //@line 5567 "cPickle.c"
        if ($26) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 5567 "cPickle.c"
      case 6: // $bb5
        var $27=HEAP[_PyExc_AttributeError]; //@line 5568 "cPickle.c"
        var $28=HEAP[$name_addr]; //@line 5568 "cPickle.c"
        _PyErr_SetString($27, $28); //@line 5568 "cPickle.c"
        HEAP[$0]=0; //@line 5569 "cPickle.c"
        __label__ = 15; break; //@line 5569 "cPickle.c"
      case 7: // $bb6
        var $29=HEAP[$self_addr]; //@line 5572 "cPickle.c"
        var $30=(($29+76)&4294967295); //@line 5572 "cPickle.c"
        var $31=HEAP[$30]; //@line 5572 "cPickle.c"
        var $32=(($31)&4294967295); //@line 5572 "cPickle.c"
        var $33=HEAP[$32]; //@line 5572 "cPickle.c"
        var $34=((($33) + 1)&4294967295); //@line 5572 "cPickle.c"
        var $35=(($31)&4294967295); //@line 5572 "cPickle.c"
        HEAP[$35]=$34; //@line 5572 "cPickle.c"
        var $36=HEAP[$self_addr]; //@line 5573 "cPickle.c"
        var $37=(($36+76)&4294967295); //@line 5573 "cPickle.c"
        var $38=HEAP[$37]; //@line 5573 "cPickle.c"
        HEAP[$0]=$38; //@line 5573 "cPickle.c"
        __label__ = 15; break; //@line 5573 "cPickle.c"
      case 8: // $bb7
        var $39=HEAP[$name_addr]; //@line 5576 "cPickle.c"
        var $40=_strcmp($39, ((__str70)&4294967295)); //@line 5576 "cPickle.c"
        var $41=((($40))|0)==0; //@line 5576 "cPickle.c"
        if ($41) { __label__ = 9; break; } else { __label__ = 12; break; } //@line 5576 "cPickle.c"
      case 9: // $bb8
        var $42=HEAP[$self_addr]; //@line 5577 "cPickle.c"
        var $43=(($42+24)&4294967295); //@line 5577 "cPickle.c"
        var $44=HEAP[$43]; //@line 5577 "cPickle.c"
        var $45=($44)==0; //@line 5577 "cPickle.c"
        if ($45) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 5577 "cPickle.c"
      case 10: // $bb9
        var $46=HEAP[_PyExc_AttributeError]; //@line 5578 "cPickle.c"
        var $47=HEAP[$name_addr]; //@line 5578 "cPickle.c"
        _PyErr_SetString($46, $47); //@line 5578 "cPickle.c"
        HEAP[$0]=0; //@line 5579 "cPickle.c"
        __label__ = 15; break; //@line 5579 "cPickle.c"
      case 11: // $bb10
        var $48=HEAP[$self_addr]; //@line 5582 "cPickle.c"
        var $49=(($48+24)&4294967295); //@line 5582 "cPickle.c"
        var $50=HEAP[$49]; //@line 5582 "cPickle.c"
        var $51=(($50)&4294967295); //@line 5582 "cPickle.c"
        var $52=HEAP[$51]; //@line 5582 "cPickle.c"
        var $53=((($52) + 1)&4294967295); //@line 5582 "cPickle.c"
        var $54=(($50)&4294967295); //@line 5582 "cPickle.c"
        HEAP[$54]=$53; //@line 5582 "cPickle.c"
        var $55=HEAP[$self_addr]; //@line 5583 "cPickle.c"
        var $56=(($55+24)&4294967295); //@line 5583 "cPickle.c"
        var $57=HEAP[$56]; //@line 5583 "cPickle.c"
        HEAP[$0]=$57; //@line 5583 "cPickle.c"
        __label__ = 15; break; //@line 5583 "cPickle.c"
      case 12: // $bb11
        var $58=HEAP[$name_addr]; //@line 5586 "cPickle.c"
        var $59=_strcmp($58, ((__str110)&4294967295)); //@line 5586 "cPickle.c"
        var $60=((($59))|0)==0; //@line 5586 "cPickle.c"
        if ($60) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 5586 "cPickle.c"
      case 13: // $bb12
        var $61=HEAP[_UnpicklingError]; //@line 5587 "cPickle.c"
        var $62=(($61)&4294967295); //@line 5587 "cPickle.c"
        var $63=HEAP[$62]; //@line 5587 "cPickle.c"
        var $64=((($63) + 1)&4294967295); //@line 5587 "cPickle.c"
        var $65=(($61)&4294967295); //@line 5587 "cPickle.c"
        HEAP[$65]=$64; //@line 5587 "cPickle.c"
        var $66=HEAP[_UnpicklingError]; //@line 5588 "cPickle.c"
        HEAP[$0]=$66; //@line 5588 "cPickle.c"
        __label__ = 15; break; //@line 5588 "cPickle.c"
      case 14: // $bb13
        var $67=HEAP[$self_addr]; //@line 5591 "cPickle.c"
        var $68=$67; //@line 5591 "cPickle.c"
        var $69=HEAP[$name_addr]; //@line 5591 "cPickle.c"
        var $70=_Py_FindMethod(((_Unpickler_methods)&4294967295), $68, $69); //@line 5591 "cPickle.c"
        HEAP[$0]=$70; //@line 5591 "cPickle.c"
        __label__ = 15; break; //@line 5591 "cPickle.c"
      case 15: // $bb14
        var $71=HEAP[$0]; //@line 5559 "cPickle.c"
        HEAP[$retval]=$71; //@line 5559 "cPickle.c"
        __label__ = 16; break; //@line 5559 "cPickle.c"
      case 16: // $return
        var $retval15=HEAP[$retval]; //@line 5559 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval15; //@line 5559 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _Unpickler_setattr($self, $name, $value) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $name_addr=__stackBase__+4;
        var $value_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$name_addr]=$name;
        HEAP[$value_addr]=$value;
        var $1=HEAP[$name_addr]; //@line 5599 "cPickle.c"
        var $2=_strcmp($1, ((__str108)&4294967295)); //@line 5599 "cPickle.c"
        var $3=((($2))|0)==0; //@line 5599 "cPickle.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 7; break; } //@line 5599 "cPickle.c"
      case 1: // $bb
        var $4=HEAP[$self_addr]; //@line 5600 "cPickle.c"
        var $5=(($4+40)&4294967295); //@line 5600 "cPickle.c"
        var $6=HEAP[$5]; //@line 5600 "cPickle.c"
        var $7=($6)!=0; //@line 5600 "cPickle.c"
        if ($7) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 5600 "cPickle.c"
      case 2: // $bb1
        var $8=HEAP[$self_addr]; //@line 5600 "cPickle.c"
        var $9=(($8+40)&4294967295); //@line 5600 "cPickle.c"
        var $10=HEAP[$9]; //@line 5600 "cPickle.c"
        var $11=(($10)&4294967295); //@line 5600 "cPickle.c"
        var $12=HEAP[$11]; //@line 5600 "cPickle.c"
        var $13=((($12) - 1)&4294967295); //@line 5600 "cPickle.c"
        var $14=(($10)&4294967295); //@line 5600 "cPickle.c"
        HEAP[$14]=$13; //@line 5600 "cPickle.c"
        var $15=(($10)&4294967295); //@line 5600 "cPickle.c"
        var $16=HEAP[$15]; //@line 5600 "cPickle.c"
        var $17=((($16))|0)==0; //@line 5600 "cPickle.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 5600 "cPickle.c"
      case 3: // $bb2
        var $18=HEAP[$self_addr]; //@line 5600 "cPickle.c"
        var $19=(($18+40)&4294967295); //@line 5600 "cPickle.c"
        var $20=HEAP[$19]; //@line 5600 "cPickle.c"
        var $21=(($20+4)&4294967295); //@line 5600 "cPickle.c"
        var $22=HEAP[$21]; //@line 5600 "cPickle.c"
        var $23=(($22+24)&4294967295); //@line 5600 "cPickle.c"
        var $24=HEAP[$23]; //@line 5600 "cPickle.c"
        var $25=HEAP[$self_addr]; //@line 5600 "cPickle.c"
        var $26=(($25+40)&4294967295); //@line 5600 "cPickle.c"
        var $27=HEAP[$26]; //@line 5600 "cPickle.c"
        FUNCTION_TABLE[$24]($27); //@line 5600 "cPickle.c"
        __label__ = 4; break; //@line 5600 "cPickle.c"
      case 4: // $bb3
        var $28=HEAP[$self_addr]; //@line 5601 "cPickle.c"
        var $29=(($28+40)&4294967295); //@line 5601 "cPickle.c"
        var $30=HEAP[$value_addr]; //@line 5601 "cPickle.c"
        HEAP[$29]=$30; //@line 5601 "cPickle.c"
        var $31=HEAP[$value_addr]; //@line 5602 "cPickle.c"
        var $32=($31)!=0; //@line 5602 "cPickle.c"
        if ($32) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5602 "cPickle.c"
      case 5: // $bb4
        var $33=HEAP[$value_addr]; //@line 5602 "cPickle.c"
        var $34=(($33)&4294967295); //@line 5602 "cPickle.c"
        var $35=HEAP[$34]; //@line 5602 "cPickle.c"
        var $36=((($35) + 1)&4294967295); //@line 5602 "cPickle.c"
        var $37=HEAP[$value_addr]; //@line 5602 "cPickle.c"
        var $38=(($37)&4294967295); //@line 5602 "cPickle.c"
        HEAP[$38]=$36; //@line 5602 "cPickle.c"
        __label__ = 6; break; //@line 5602 "cPickle.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 5603 "cPickle.c"
        __label__ = 24; break; //@line 5603 "cPickle.c"
      case 7: // $bb6
        var $39=HEAP[$name_addr]; //@line 5606 "cPickle.c"
        var $40=_strcmp($39, ((__str109)&4294967295)); //@line 5606 "cPickle.c"
        var $41=((($40))|0)==0; //@line 5606 "cPickle.c"
        if ($41) { __label__ = 8; break; } else { __label__ = 14; break; } //@line 5606 "cPickle.c"
      case 8: // $bb7
        var $42=HEAP[$self_addr]; //@line 5607 "cPickle.c"
        var $43=(($42+76)&4294967295); //@line 5607 "cPickle.c"
        var $44=HEAP[$43]; //@line 5607 "cPickle.c"
        var $45=($44)!=0; //@line 5607 "cPickle.c"
        if ($45) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 5607 "cPickle.c"
      case 9: // $bb8
        var $46=HEAP[$self_addr]; //@line 5607 "cPickle.c"
        var $47=(($46+76)&4294967295); //@line 5607 "cPickle.c"
        var $48=HEAP[$47]; //@line 5607 "cPickle.c"
        var $49=(($48)&4294967295); //@line 5607 "cPickle.c"
        var $50=HEAP[$49]; //@line 5607 "cPickle.c"
        var $51=((($50) - 1)&4294967295); //@line 5607 "cPickle.c"
        var $52=(($48)&4294967295); //@line 5607 "cPickle.c"
        HEAP[$52]=$51; //@line 5607 "cPickle.c"
        var $53=(($48)&4294967295); //@line 5607 "cPickle.c"
        var $54=HEAP[$53]; //@line 5607 "cPickle.c"
        var $55=((($54))|0)==0; //@line 5607 "cPickle.c"
        if ($55) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 5607 "cPickle.c"
      case 10: // $bb9
        var $56=HEAP[$self_addr]; //@line 5607 "cPickle.c"
        var $57=(($56+76)&4294967295); //@line 5607 "cPickle.c"
        var $58=HEAP[$57]; //@line 5607 "cPickle.c"
        var $59=(($58+4)&4294967295); //@line 5607 "cPickle.c"
        var $60=HEAP[$59]; //@line 5607 "cPickle.c"
        var $61=(($60+24)&4294967295); //@line 5607 "cPickle.c"
        var $62=HEAP[$61]; //@line 5607 "cPickle.c"
        var $63=HEAP[$self_addr]; //@line 5607 "cPickle.c"
        var $64=(($63+76)&4294967295); //@line 5607 "cPickle.c"
        var $65=HEAP[$64]; //@line 5607 "cPickle.c"
        FUNCTION_TABLE[$62]($65); //@line 5607 "cPickle.c"
        __label__ = 11; break; //@line 5607 "cPickle.c"
      case 11: // $bb10
        var $66=HEAP[$self_addr]; //@line 5608 "cPickle.c"
        var $67=(($66+76)&4294967295); //@line 5608 "cPickle.c"
        var $68=HEAP[$value_addr]; //@line 5608 "cPickle.c"
        HEAP[$67]=$68; //@line 5608 "cPickle.c"
        var $69=HEAP[$value_addr]; //@line 5609 "cPickle.c"
        var $70=($69)!=0; //@line 5609 "cPickle.c"
        if ($70) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 5609 "cPickle.c"
      case 12: // $bb11
        var $71=HEAP[$value_addr]; //@line 5609 "cPickle.c"
        var $72=(($71)&4294967295); //@line 5609 "cPickle.c"
        var $73=HEAP[$72]; //@line 5609 "cPickle.c"
        var $74=((($73) + 1)&4294967295); //@line 5609 "cPickle.c"
        var $75=HEAP[$value_addr]; //@line 5609 "cPickle.c"
        var $76=(($75)&4294967295); //@line 5609 "cPickle.c"
        HEAP[$76]=$74; //@line 5609 "cPickle.c"
        __label__ = 13; break; //@line 5609 "cPickle.c"
      case 13: // $bb12
        HEAP[$0]=0; //@line 5610 "cPickle.c"
        __label__ = 24; break; //@line 5610 "cPickle.c"
      case 14: // $bb13
        var $77=HEAP[$value_addr]; //@line 5613 "cPickle.c"
        var $78=($77)==0; //@line 5613 "cPickle.c"
        if ($78) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 5613 "cPickle.c"
      case 15: // $bb14
        var $79=HEAP[_PyExc_TypeError]; //@line 5614 "cPickle.c"
        _PyErr_SetString($79, ((__str69)&4294967295)); //@line 5614 "cPickle.c"
        HEAP[$0]=-1; //@line 5616 "cPickle.c"
        __label__ = 24; break; //@line 5616 "cPickle.c"
      case 16: // $bb15
        var $80=HEAP[$name_addr]; //@line 5619 "cPickle.c"
        var $81=_strcmp($80, ((__str70)&4294967295)); //@line 5619 "cPickle.c"
        var $82=((($81))|0)==0; //@line 5619 "cPickle.c"
        if ($82) { __label__ = 17; break; } else { __label__ = 23; break; } //@line 5619 "cPickle.c"
      case 17: // $bb16
        var $83=HEAP[$value_addr]; //@line 5620 "cPickle.c"
        var $84=(($83+4)&4294967295); //@line 5620 "cPickle.c"
        var $85=HEAP[$84]; //@line 5620 "cPickle.c"
        var $86=(($85+84)&4294967295); //@line 5620 "cPickle.c"
        var $87=HEAP[$86]; //@line 5620 "cPickle.c"
        var $88=($87) & 536870912; //@line 5620 "cPickle.c"
        var $89=((($88))|0)==0; //@line 5620 "cPickle.c"
        if ($89) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 5620 "cPickle.c"
      case 18: // $bb17
        var $90=HEAP[_PyExc_TypeError]; //@line 5621 "cPickle.c"
        _PyErr_SetString($90, ((__str71)&4294967295)); //@line 5621 "cPickle.c"
        HEAP[$0]=-1; //@line 5623 "cPickle.c"
        __label__ = 24; break; //@line 5623 "cPickle.c"
      case 19: // $bb18
        var $91=HEAP[$self_addr]; //@line 5625 "cPickle.c"
        var $92=(($91+24)&4294967295); //@line 5625 "cPickle.c"
        var $93=HEAP[$92]; //@line 5625 "cPickle.c"
        var $94=($93)!=0; //@line 5625 "cPickle.c"
        if ($94) { __label__ = 20; break; } else { __label__ = 22; break; } //@line 5625 "cPickle.c"
      case 20: // $bb19
        var $95=HEAP[$self_addr]; //@line 5625 "cPickle.c"
        var $96=(($95+24)&4294967295); //@line 5625 "cPickle.c"
        var $97=HEAP[$96]; //@line 5625 "cPickle.c"
        var $98=(($97)&4294967295); //@line 5625 "cPickle.c"
        var $99=HEAP[$98]; //@line 5625 "cPickle.c"
        var $100=((($99) - 1)&4294967295); //@line 5625 "cPickle.c"
        var $101=(($97)&4294967295); //@line 5625 "cPickle.c"
        HEAP[$101]=$100; //@line 5625 "cPickle.c"
        var $102=(($97)&4294967295); //@line 5625 "cPickle.c"
        var $103=HEAP[$102]; //@line 5625 "cPickle.c"
        var $104=((($103))|0)==0; //@line 5625 "cPickle.c"
        if ($104) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 5625 "cPickle.c"
      case 21: // $bb20
        var $105=HEAP[$self_addr]; //@line 5625 "cPickle.c"
        var $106=(($105+24)&4294967295); //@line 5625 "cPickle.c"
        var $107=HEAP[$106]; //@line 5625 "cPickle.c"
        var $108=(($107+4)&4294967295); //@line 5625 "cPickle.c"
        var $109=HEAP[$108]; //@line 5625 "cPickle.c"
        var $110=(($109+24)&4294967295); //@line 5625 "cPickle.c"
        var $111=HEAP[$110]; //@line 5625 "cPickle.c"
        var $112=HEAP[$self_addr]; //@line 5625 "cPickle.c"
        var $113=(($112+24)&4294967295); //@line 5625 "cPickle.c"
        var $114=HEAP[$113]; //@line 5625 "cPickle.c"
        FUNCTION_TABLE[$111]($114); //@line 5625 "cPickle.c"
        __label__ = 22; break; //@line 5625 "cPickle.c"
      case 22: // $bb21
        var $115=HEAP[$self_addr]; //@line 5626 "cPickle.c"
        var $116=(($115+24)&4294967295); //@line 5626 "cPickle.c"
        var $117=HEAP[$value_addr]; //@line 5626 "cPickle.c"
        HEAP[$116]=$117; //@line 5626 "cPickle.c"
        var $118=HEAP[$value_addr]; //@line 5627 "cPickle.c"
        var $119=(($118)&4294967295); //@line 5627 "cPickle.c"
        var $120=HEAP[$119]; //@line 5627 "cPickle.c"
        var $121=((($120) + 1)&4294967295); //@line 5627 "cPickle.c"
        var $122=HEAP[$value_addr]; //@line 5627 "cPickle.c"
        var $123=(($122)&4294967295); //@line 5627 "cPickle.c"
        HEAP[$123]=$121; //@line 5627 "cPickle.c"
        HEAP[$0]=0; //@line 5628 "cPickle.c"
        __label__ = 24; break; //@line 5628 "cPickle.c"
      case 23: // $bb22
        var $124=HEAP[_PyExc_AttributeError]; //@line 5631 "cPickle.c"
        var $125=HEAP[$name_addr]; //@line 5631 "cPickle.c"
        _PyErr_SetString($124, $125); //@line 5631 "cPickle.c"
        HEAP[$0]=-1; //@line 5632 "cPickle.c"
        __label__ = 24; break; //@line 5632 "cPickle.c"
      case 24: // $bb23
        var $126=HEAP[$0]; //@line 5603 "cPickle.c"
        HEAP[$retval]=$126; //@line 5603 "cPickle.c"
        __label__ = 25; break; //@line 5603 "cPickle.c"
      case 25: // $return
        var $retval24=HEAP[$retval]; //@line 5603 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval24; //@line 5603 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _cpm_dump($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kwds_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $ob=__stackBase__+20;
        var $file=__stackBase__+24;
        var $res=__stackBase__+28;
        var $pickler=__stackBase__+32;
        var $proto=__stackBase__+36;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$kwds_addr]=$kwds;
        HEAP[$res]=0; //@line 5644 "cPickle.c"
        HEAP[$pickler]=0; //@line 5645 "cPickle.c"
        HEAP[$proto]=0; //@line 5646 "cPickle.c"
        var $1=HEAP[$args_addr]; //@line 5648 "cPickle.c"
        var $2=HEAP[$kwds_addr]; //@line 5648 "cPickle.c"
        var $3=_PyArg_ParseTupleAndKeywords($1, $2, ((__str111)&4294967295), ((_kwlist_16354)&4294967295), $ob, $file, $proto); //@line 5648 "cPickle.c"
        var $4=((($3))|0)==0; //@line 5648 "cPickle.c"
        if ($4) { __label__ = 4; break; } else { __label__ = 1; break; } //@line 5648 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[$proto]; //@line 5652 "cPickle.c"
        var $6=HEAP[$file]; //@line 5652 "cPickle.c"
        var $7=_newPicklerobject($6, $5); //@line 5652 "cPickle.c"
        HEAP[$pickler]=$7; //@line 5652 "cPickle.c"
        var $8=HEAP[$pickler]; //@line 5652 "cPickle.c"
        var $9=($8)==0; //@line 5652 "cPickle.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 2; break; } //@line 5652 "cPickle.c"
      case 2: // $bb1
        var $10=HEAP[$ob]; //@line 5655 "cPickle.c"
        var $11=HEAP[$pickler]; //@line 5655 "cPickle.c"
        var $12=_dump($11, $10); //@line 5655 "cPickle.c"
        var $13=((($12))|0) < 0; //@line 5655 "cPickle.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 5655 "cPickle.c"
      case 3: // $bb2
        var $14=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 5658 "cPickle.c"
        var $15=((($14) + 1)&4294967295); //@line 5658 "cPickle.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$15; //@line 5658 "cPickle.c"
        HEAP[$res]=__Py_NoneStruct; //@line 5659 "cPickle.c"
        __label__ = 4; break; //@line 5661 "cPickle.c"
      case 4: // $finally
        var $16=HEAP[$pickler]; //@line 5662 "cPickle.c"
        var $17=($16)!=0; //@line 5662 "cPickle.c"
        if ($17) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 5662 "cPickle.c"
      case 5: // $bb3
        var $18=HEAP[$pickler]; //@line 5662 "cPickle.c"
        var $19=$18; //@line 5662 "cPickle.c"
        var $20=(($19)&4294967295); //@line 5662 "cPickle.c"
        var $21=HEAP[$20]; //@line 5662 "cPickle.c"
        var $22=((($21) - 1)&4294967295); //@line 5662 "cPickle.c"
        var $23=(($19)&4294967295); //@line 5662 "cPickle.c"
        HEAP[$23]=$22; //@line 5662 "cPickle.c"
        var $24=(($19)&4294967295); //@line 5662 "cPickle.c"
        var $25=HEAP[$24]; //@line 5662 "cPickle.c"
        var $26=((($25))|0)==0; //@line 5662 "cPickle.c"
        if ($26) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 5662 "cPickle.c"
      case 6: // $bb4
        var $27=HEAP[$pickler]; //@line 5662 "cPickle.c"
        var $28=$27; //@line 5662 "cPickle.c"
        var $29=(($28+4)&4294967295); //@line 5662 "cPickle.c"
        var $30=HEAP[$29]; //@line 5662 "cPickle.c"
        var $31=(($30+24)&4294967295); //@line 5662 "cPickle.c"
        var $32=HEAP[$31]; //@line 5662 "cPickle.c"
        var $33=HEAP[$pickler]; //@line 5662 "cPickle.c"
        var $34=$33; //@line 5662 "cPickle.c"
        FUNCTION_TABLE[$32]($34); //@line 5662 "cPickle.c"
        __label__ = 7; break; //@line 5662 "cPickle.c"
      case 7: // $bb5
        var $35=HEAP[$res]; //@line 5664 "cPickle.c"
        HEAP[$0]=$35; //@line 5664 "cPickle.c"
        var $36=HEAP[$0]; //@line 5664 "cPickle.c"
        HEAP[$retval]=$36; //@line 5664 "cPickle.c"
        __label__ = 8; break; //@line 5664 "cPickle.c"
      case 8: // $return
        var $retval6=HEAP[$retval]; //@line 5664 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 5664 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _cpm_dumps($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kwds_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $ob=__stackBase__+20;
        var $file=__stackBase__+24;
        var $res=__stackBase__+28;
        var $pickler=__stackBase__+32;
        var $proto=__stackBase__+36;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$kwds_addr]=$kwds;
        HEAP[$file]=0; //@line 5673 "cPickle.c"
        HEAP[$res]=0; //@line 5673 "cPickle.c"
        HEAP[$pickler]=0; //@line 5674 "cPickle.c"
        HEAP[$proto]=0; //@line 5675 "cPickle.c"
        var $1=HEAP[$args_addr]; //@line 5677 "cPickle.c"
        var $2=HEAP[$kwds_addr]; //@line 5677 "cPickle.c"
        var $3=_PyArg_ParseTupleAndKeywords($1, $2, ((__str113)&4294967295), ((_kwlist_16391)&4294967295), $ob, $proto); //@line 5677 "cPickle.c"
        var $4=((($3))|0)==0; //@line 5677 "cPickle.c"
        if ($4) { __label__ = 5; break; } else { __label__ = 1; break; } //@line 5677 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[_PycStringIO]; //@line 5681 "cPickle.c"
        var $6=(($5+16)&4294967295); //@line 5681 "cPickle.c"
        var $7=HEAP[$6]; //@line 5681 "cPickle.c"
        var $8=FUNCTION_TABLE[$7](128); //@line 5681 "cPickle.c"
        HEAP[$file]=$8; //@line 5681 "cPickle.c"
        var $9=HEAP[$file]; //@line 5681 "cPickle.c"
        var $10=($9)==0; //@line 5681 "cPickle.c"
        if ($10) { __label__ = 5; break; } else { __label__ = 2; break; } //@line 5681 "cPickle.c"
      case 2: // $bb1
        var $11=HEAP[$proto]; //@line 5684 "cPickle.c"
        var $12=HEAP[$file]; //@line 5684 "cPickle.c"
        var $13=_newPicklerobject($12, $11); //@line 5684 "cPickle.c"
        HEAP[$pickler]=$13; //@line 5684 "cPickle.c"
        var $14=HEAP[$pickler]; //@line 5684 "cPickle.c"
        var $15=($14)==0; //@line 5684 "cPickle.c"
        if ($15) { __label__ = 5; break; } else { __label__ = 3; break; } //@line 5684 "cPickle.c"
      case 3: // $bb2
        var $16=HEAP[$ob]; //@line 5687 "cPickle.c"
        var $17=HEAP[$pickler]; //@line 5687 "cPickle.c"
        var $18=_dump($17, $16); //@line 5687 "cPickle.c"
        var $19=((($18))|0) < 0; //@line 5687 "cPickle.c"
        if ($19) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 5687 "cPickle.c"
      case 4: // $bb3
        var $20=HEAP[_PycStringIO]; //@line 5690 "cPickle.c"
        var $21=(($20+12)&4294967295); //@line 5690 "cPickle.c"
        var $22=HEAP[$21]; //@line 5690 "cPickle.c"
        var $23=HEAP[$file]; //@line 5690 "cPickle.c"
        var $24=FUNCTION_TABLE[$22]($23); //@line 5690 "cPickle.c"
        HEAP[$res]=$24; //@line 5690 "cPickle.c"
        __label__ = 5; break; //@line 5692 "cPickle.c"
      case 5: // $finally
        var $25=HEAP[$pickler]; //@line 5693 "cPickle.c"
        var $26=($25)!=0; //@line 5693 "cPickle.c"
        if ($26) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 5693 "cPickle.c"
      case 6: // $bb4
        var $27=HEAP[$pickler]; //@line 5693 "cPickle.c"
        var $28=$27; //@line 5693 "cPickle.c"
        var $29=(($28)&4294967295); //@line 5693 "cPickle.c"
        var $30=HEAP[$29]; //@line 5693 "cPickle.c"
        var $31=((($30) - 1)&4294967295); //@line 5693 "cPickle.c"
        var $32=(($28)&4294967295); //@line 5693 "cPickle.c"
        HEAP[$32]=$31; //@line 5693 "cPickle.c"
        var $33=(($28)&4294967295); //@line 5693 "cPickle.c"
        var $34=HEAP[$33]; //@line 5693 "cPickle.c"
        var $35=((($34))|0)==0; //@line 5693 "cPickle.c"
        if ($35) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 5693 "cPickle.c"
      case 7: // $bb5
        var $36=HEAP[$pickler]; //@line 5693 "cPickle.c"
        var $37=$36; //@line 5693 "cPickle.c"
        var $38=(($37+4)&4294967295); //@line 5693 "cPickle.c"
        var $39=HEAP[$38]; //@line 5693 "cPickle.c"
        var $40=(($39+24)&4294967295); //@line 5693 "cPickle.c"
        var $41=HEAP[$40]; //@line 5693 "cPickle.c"
        var $42=HEAP[$pickler]; //@line 5693 "cPickle.c"
        var $43=$42; //@line 5693 "cPickle.c"
        FUNCTION_TABLE[$41]($43); //@line 5693 "cPickle.c"
        __label__ = 8; break; //@line 5693 "cPickle.c"
      case 8: // $bb6
        var $44=HEAP[$file]; //@line 5694 "cPickle.c"
        var $45=($44)!=0; //@line 5694 "cPickle.c"
        if ($45) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 5694 "cPickle.c"
      case 9: // $bb7
        var $46=HEAP[$file]; //@line 5694 "cPickle.c"
        var $47=(($46)&4294967295); //@line 5694 "cPickle.c"
        var $48=HEAP[$47]; //@line 5694 "cPickle.c"
        var $49=((($48) - 1)&4294967295); //@line 5694 "cPickle.c"
        var $50=HEAP[$file]; //@line 5694 "cPickle.c"
        var $51=(($50)&4294967295); //@line 5694 "cPickle.c"
        HEAP[$51]=$49; //@line 5694 "cPickle.c"
        var $52=HEAP[$file]; //@line 5694 "cPickle.c"
        var $53=(($52)&4294967295); //@line 5694 "cPickle.c"
        var $54=HEAP[$53]; //@line 5694 "cPickle.c"
        var $55=((($54))|0)==0; //@line 5694 "cPickle.c"
        if ($55) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 5694 "cPickle.c"
      case 10: // $bb8
        var $56=HEAP[$file]; //@line 5694 "cPickle.c"
        var $57=(($56+4)&4294967295); //@line 5694 "cPickle.c"
        var $58=HEAP[$57]; //@line 5694 "cPickle.c"
        var $59=(($58+24)&4294967295); //@line 5694 "cPickle.c"
        var $60=HEAP[$59]; //@line 5694 "cPickle.c"
        var $61=HEAP[$file]; //@line 5694 "cPickle.c"
        FUNCTION_TABLE[$60]($61); //@line 5694 "cPickle.c"
        __label__ = 11; break; //@line 5694 "cPickle.c"
      case 11: // $bb9
        var $62=HEAP[$res]; //@line 5696 "cPickle.c"
        HEAP[$0]=$62; //@line 5696 "cPickle.c"
        var $63=HEAP[$0]; //@line 5696 "cPickle.c"
        HEAP[$retval]=$63; //@line 5696 "cPickle.c"
        __label__ = 12; break; //@line 5696 "cPickle.c"
      case 12: // $return
        var $retval10=HEAP[$retval]; //@line 5696 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 5696 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _cpm_load($self, $ob) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $ob_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $unpickler=__stackBase__+16;
        var $res=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$ob_addr]=$ob;
        HEAP[$unpickler]=0; //@line 5704 "cPickle.c"
        HEAP[$res]=0; //@line 5705 "cPickle.c"
        var $1=HEAP[$ob_addr]; //@line 5707 "cPickle.c"
        var $2=_newUnpicklerobject($1); //@line 5707 "cPickle.c"
        HEAP[$unpickler]=$2; //@line 5707 "cPickle.c"
        var $3=HEAP[$unpickler]; //@line 5707 "cPickle.c"
        var $4=($3)==0; //@line 5707 "cPickle.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 5707 "cPickle.c"
      case 1: // $bb
        var $5=HEAP[$unpickler]; //@line 5710 "cPickle.c"
        var $6=_load($5); //@line 5710 "cPickle.c"
        HEAP[$res]=$6; //@line 5710 "cPickle.c"
        __label__ = 2; break; //@line 5712 "cPickle.c"
      case 2: // $finally
        var $7=HEAP[$unpickler]; //@line 5713 "cPickle.c"
        var $8=($7)!=0; //@line 5713 "cPickle.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 5713 "cPickle.c"
      case 3: // $bb1
        var $9=HEAP[$unpickler]; //@line 5713 "cPickle.c"
        var $10=$9; //@line 5713 "cPickle.c"
        var $11=(($10)&4294967295); //@line 5713 "cPickle.c"
        var $12=HEAP[$11]; //@line 5713 "cPickle.c"
        var $13=((($12) - 1)&4294967295); //@line 5713 "cPickle.c"
        var $14=(($10)&4294967295); //@line 5713 "cPickle.c"
        HEAP[$14]=$13; //@line 5713 "cPickle.c"
        var $15=(($10)&4294967295); //@line 5713 "cPickle.c"
        var $16=HEAP[$15]; //@line 5713 "cPickle.c"
        var $17=((($16))|0)==0; //@line 5713 "cPickle.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 5713 "cPickle.c"
      case 4: // $bb2
        var $18=HEAP[$unpickler]; //@line 5713 "cPickle.c"
        var $19=$18; //@line 5713 "cPickle.c"
        var $20=(($19+4)&4294967295); //@line 5713 "cPickle.c"
        var $21=HEAP[$20]; //@line 5713 "cPickle.c"
        var $22=(($21+24)&4294967295); //@line 5713 "cPickle.c"
        var $23=HEAP[$22]; //@line 5713 "cPickle.c"
        var $24=HEAP[$unpickler]; //@line 5713 "cPickle.c"
        var $25=$24; //@line 5713 "cPickle.c"
        FUNCTION_TABLE[$23]($25); //@line 5713 "cPickle.c"
        __label__ = 5; break; //@line 5713 "cPickle.c"
      case 5: // $bb3
        var $26=HEAP[$res]; //@line 5715 "cPickle.c"
        HEAP[$0]=$26; //@line 5715 "cPickle.c"
        var $27=HEAP[$0]; //@line 5715 "cPickle.c"
        HEAP[$retval]=$27; //@line 5715 "cPickle.c"
        __label__ = 6; break; //@line 5715 "cPickle.c"
      case 6: // $return
        var $retval4=HEAP[$retval]; //@line 5715 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 5715 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _cpm_loads($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $ob=__stackBase__+16;
        var $file=__stackBase__+20;
        var $res=__stackBase__+24;
        var $unpickler=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$file]=0; //@line 5723 "cPickle.c"
        HEAP[$res]=0; //@line 5723 "cPickle.c"
        HEAP[$unpickler]=0; //@line 5724 "cPickle.c"
        var $1=HEAP[$args_addr]; //@line 5726 "cPickle.c"
        var $2=_PyArg_ParseTuple($1, ((__str114)&4294967295), $ob); //@line 5726 "cPickle.c"
        var $3=((($2))|0)==0; //@line 5726 "cPickle.c"
        if ($3) { __label__ = 4; break; } else { __label__ = 1; break; } //@line 5726 "cPickle.c"
      case 1: // $bb
        var $4=HEAP[_PycStringIO]; //@line 5729 "cPickle.c"
        var $5=(($4+20)&4294967295); //@line 5729 "cPickle.c"
        var $6=HEAP[$5]; //@line 5729 "cPickle.c"
        var $7=HEAP[$ob]; //@line 5729 "cPickle.c"
        var $8=FUNCTION_TABLE[$6]($7); //@line 5729 "cPickle.c"
        HEAP[$file]=$8; //@line 5729 "cPickle.c"
        var $9=HEAP[$file]; //@line 5729 "cPickle.c"
        var $10=($9)==0; //@line 5729 "cPickle.c"
        if ($10) { __label__ = 4; break; } else { __label__ = 2; break; } //@line 5729 "cPickle.c"
      case 2: // $bb1
        var $11=HEAP[$file]; //@line 5732 "cPickle.c"
        var $12=_newUnpicklerobject($11); //@line 5732 "cPickle.c"
        HEAP[$unpickler]=$12; //@line 5732 "cPickle.c"
        var $13=HEAP[$unpickler]; //@line 5732 "cPickle.c"
        var $14=($13)==0; //@line 5732 "cPickle.c"
        if ($14) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 5732 "cPickle.c"
      case 3: // $bb2
        var $15=HEAP[$unpickler]; //@line 5735 "cPickle.c"
        var $16=_load($15); //@line 5735 "cPickle.c"
        HEAP[$res]=$16; //@line 5735 "cPickle.c"
        __label__ = 4; break; //@line 5737 "cPickle.c"
      case 4: // $finally
        var $17=HEAP[$file]; //@line 5738 "cPickle.c"
        var $18=($17)!=0; //@line 5738 "cPickle.c"
        if ($18) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 5738 "cPickle.c"
      case 5: // $bb3
        var $19=HEAP[$file]; //@line 5738 "cPickle.c"
        var $20=(($19)&4294967295); //@line 5738 "cPickle.c"
        var $21=HEAP[$20]; //@line 5738 "cPickle.c"
        var $22=((($21) - 1)&4294967295); //@line 5738 "cPickle.c"
        var $23=HEAP[$file]; //@line 5738 "cPickle.c"
        var $24=(($23)&4294967295); //@line 5738 "cPickle.c"
        HEAP[$24]=$22; //@line 5738 "cPickle.c"
        var $25=HEAP[$file]; //@line 5738 "cPickle.c"
        var $26=(($25)&4294967295); //@line 5738 "cPickle.c"
        var $27=HEAP[$26]; //@line 5738 "cPickle.c"
        var $28=((($27))|0)==0; //@line 5738 "cPickle.c"
        if ($28) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 5738 "cPickle.c"
      case 6: // $bb4
        var $29=HEAP[$file]; //@line 5738 "cPickle.c"
        var $30=(($29+4)&4294967295); //@line 5738 "cPickle.c"
        var $31=HEAP[$30]; //@line 5738 "cPickle.c"
        var $32=(($31+24)&4294967295); //@line 5738 "cPickle.c"
        var $33=HEAP[$32]; //@line 5738 "cPickle.c"
        var $34=HEAP[$file]; //@line 5738 "cPickle.c"
        FUNCTION_TABLE[$33]($34); //@line 5738 "cPickle.c"
        __label__ = 7; break; //@line 5738 "cPickle.c"
      case 7: // $bb5
        var $35=HEAP[$unpickler]; //@line 5739 "cPickle.c"
        var $36=($35)!=0; //@line 5739 "cPickle.c"
        if ($36) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 5739 "cPickle.c"
      case 8: // $bb6
        var $37=HEAP[$unpickler]; //@line 5739 "cPickle.c"
        var $38=$37; //@line 5739 "cPickle.c"
        var $39=(($38)&4294967295); //@line 5739 "cPickle.c"
        var $40=HEAP[$39]; //@line 5739 "cPickle.c"
        var $41=((($40) - 1)&4294967295); //@line 5739 "cPickle.c"
        var $42=(($38)&4294967295); //@line 5739 "cPickle.c"
        HEAP[$42]=$41; //@line 5739 "cPickle.c"
        var $43=(($38)&4294967295); //@line 5739 "cPickle.c"
        var $44=HEAP[$43]; //@line 5739 "cPickle.c"
        var $45=((($44))|0)==0; //@line 5739 "cPickle.c"
        if ($45) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 5739 "cPickle.c"
      case 9: // $bb7
        var $46=HEAP[$unpickler]; //@line 5739 "cPickle.c"
        var $47=$46; //@line 5739 "cPickle.c"
        var $48=(($47+4)&4294967295); //@line 5739 "cPickle.c"
        var $49=HEAP[$48]; //@line 5739 "cPickle.c"
        var $50=(($49+24)&4294967295); //@line 5739 "cPickle.c"
        var $51=HEAP[$50]; //@line 5739 "cPickle.c"
        var $52=HEAP[$unpickler]; //@line 5739 "cPickle.c"
        var $53=$52; //@line 5739 "cPickle.c"
        FUNCTION_TABLE[$51]($53); //@line 5739 "cPickle.c"
        __label__ = 10; break; //@line 5739 "cPickle.c"
      case 10: // $bb8
        var $54=HEAP[$res]; //@line 5741 "cPickle.c"
        HEAP[$0]=$54; //@line 5741 "cPickle.c"
        var $55=HEAP[$0]; //@line 5741 "cPickle.c"
        HEAP[$retval]=$55; //@line 5741 "cPickle.c"
        __label__ = 11; break; //@line 5741 "cPickle.c"
      case 11: // $return
        var $retval9=HEAP[$retval]; //@line 5741 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 5741 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _init_stuff($module_dict) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $module_dict_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $copyreg=__stackBase__+12;
        var $t=__stackBase__+16;
        var $r=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$module_dict_addr]=$module_dict;
        var $1=_PyType_Ready(_Unpicklertype); //@line 5833 "cPickle.c"
        var $2=((($1))|0) < 0; //@line 5833 "cPickle.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 5833 "cPickle.c"
      case 1: // $bb
        HEAP[$0]=-1; //@line 5834 "cPickle.c"
        __label__ = 89; break; //@line 5834 "cPickle.c"
      case 2: // $bb1
        var $3=_PyType_Ready(_Picklertype); //@line 5835 "cPickle.c"
        var $4=((($3))|0) < 0; //@line 5835 "cPickle.c"
        if ($4) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 5835 "cPickle.c"
      case 3: // $bb2
        HEAP[$0]=-1; //@line 5836 "cPickle.c"
        __label__ = 89; break; //@line 5836 "cPickle.c"
      case 4: // $bb3
        var $5=_PyString_InternFromString(((__str126)&4294967295)); //@line 5838 "cPickle.c"
        HEAP[___class___str]=$5; //@line 5838 "cPickle.c"
        var $6=HEAP[___class___str]; //@line 5838 "cPickle.c"
        var $7=($6)==0; //@line 5838 "cPickle.c"
        if ($7) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5838 "cPickle.c"
      case 5: // $bb4
        HEAP[$0]=-1; //@line 5838 "cPickle.c"
        __label__ = 89; break; //@line 5838 "cPickle.c"
      case 6: // $bb5
        var $8=_PyString_InternFromString(((__str127)&4294967295)); //@line 5839 "cPickle.c"
        HEAP[___getinitargs___str]=$8; //@line 5839 "cPickle.c"
        var $9=HEAP[___getinitargs___str]; //@line 5839 "cPickle.c"
        var $10=($9)==0; //@line 5839 "cPickle.c"
        if ($10) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 5839 "cPickle.c"
      case 7: // $bb6
        HEAP[$0]=-1; //@line 5839 "cPickle.c"
        __label__ = 89; break; //@line 5839 "cPickle.c"
      case 8: // $bb7
        var $11=_PyString_InternFromString(((__str128)&4294967295)); //@line 5840 "cPickle.c"
        HEAP[___dict___str]=$11; //@line 5840 "cPickle.c"
        var $12=HEAP[___dict___str]; //@line 5840 "cPickle.c"
        var $13=($12)==0; //@line 5840 "cPickle.c"
        if ($13) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 5840 "cPickle.c"
      case 9: // $bb8
        HEAP[$0]=-1; //@line 5840 "cPickle.c"
        __label__ = 89; break; //@line 5840 "cPickle.c"
      case 10: // $bb9
        var $14=_PyString_InternFromString(((__str129)&4294967295)); //@line 5841 "cPickle.c"
        HEAP[___getstate___str]=$14; //@line 5841 "cPickle.c"
        var $15=HEAP[___getstate___str]; //@line 5841 "cPickle.c"
        var $16=($15)==0; //@line 5841 "cPickle.c"
        if ($16) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 5841 "cPickle.c"
      case 11: // $bb10
        HEAP[$0]=-1; //@line 5841 "cPickle.c"
        __label__ = 89; break; //@line 5841 "cPickle.c"
      case 12: // $bb11
        var $17=_PyString_InternFromString(((__str130)&4294967295)); //@line 5842 "cPickle.c"
        HEAP[___setstate___str]=$17; //@line 5842 "cPickle.c"
        var $18=HEAP[___setstate___str]; //@line 5842 "cPickle.c"
        var $19=($18)==0; //@line 5842 "cPickle.c"
        if ($19) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 5842 "cPickle.c"
      case 13: // $bb12
        HEAP[$0]=-1; //@line 5842 "cPickle.c"
        __label__ = 89; break; //@line 5842 "cPickle.c"
      case 14: // $bb13
        var $20=_PyString_InternFromString(((__str131)&4294967295)); //@line 5843 "cPickle.c"
        HEAP[___name___str]=$20; //@line 5843 "cPickle.c"
        var $21=HEAP[___name___str]; //@line 5843 "cPickle.c"
        var $22=($21)==0; //@line 5843 "cPickle.c"
        if ($22) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 5843 "cPickle.c"
      case 15: // $bb14
        HEAP[$0]=-1; //@line 5843 "cPickle.c"
        __label__ = 89; break; //@line 5843 "cPickle.c"
      case 16: // $bb15
        var $23=_PyString_InternFromString(((__str132)&4294967295)); //@line 5844 "cPickle.c"
        HEAP[___main___str]=$23; //@line 5844 "cPickle.c"
        var $24=HEAP[___main___str]; //@line 5844 "cPickle.c"
        var $25=($24)==0; //@line 5844 "cPickle.c"
        if ($25) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 5844 "cPickle.c"
      case 17: // $bb16
        HEAP[$0]=-1; //@line 5844 "cPickle.c"
        __label__ = 89; break; //@line 5844 "cPickle.c"
      case 18: // $bb17
        var $26=_PyString_InternFromString(((__str133)&4294967295)); //@line 5845 "cPickle.c"
        HEAP[___reduce___str]=$26; //@line 5845 "cPickle.c"
        var $27=HEAP[___reduce___str]; //@line 5845 "cPickle.c"
        var $28=($27)==0; //@line 5845 "cPickle.c"
        if ($28) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 5845 "cPickle.c"
      case 19: // $bb18
        HEAP[$0]=-1; //@line 5845 "cPickle.c"
        __label__ = 89; break; //@line 5845 "cPickle.c"
      case 20: // $bb19
        var $29=_PyString_InternFromString(((__str134)&4294967295)); //@line 5846 "cPickle.c"
        HEAP[___reduce_ex___str]=$29; //@line 5846 "cPickle.c"
        var $30=HEAP[___reduce_ex___str]; //@line 5846 "cPickle.c"
        var $31=($30)==0; //@line 5846 "cPickle.c"
        if ($31) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 5846 "cPickle.c"
      case 21: // $bb20
        HEAP[$0]=-1; //@line 5846 "cPickle.c"
        __label__ = 89; break; //@line 5846 "cPickle.c"
      case 22: // $bb21
        var $32=_PyString_InternFromString(((__str135)&4294967295)); //@line 5847 "cPickle.c"
        HEAP[_write_str]=$32; //@line 5847 "cPickle.c"
        var $33=HEAP[_write_str]; //@line 5847 "cPickle.c"
        var $34=($33)==0; //@line 5847 "cPickle.c"
        if ($34) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 5847 "cPickle.c"
      case 23: // $bb22
        HEAP[$0]=-1; //@line 5847 "cPickle.c"
        __label__ = 89; break; //@line 5847 "cPickle.c"
      case 24: // $bb23
        var $35=_PyString_InternFromString(((__str136)&4294967295)); //@line 5848 "cPickle.c"
        HEAP[_append_str]=$35; //@line 5848 "cPickle.c"
        var $36=HEAP[_append_str]; //@line 5848 "cPickle.c"
        var $37=($36)==0; //@line 5848 "cPickle.c"
        if ($37) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 5848 "cPickle.c"
      case 25: // $bb24
        HEAP[$0]=-1; //@line 5848 "cPickle.c"
        __label__ = 89; break; //@line 5848 "cPickle.c"
      case 26: // $bb25
        var $38=_PyString_InternFromString(((__str137)&4294967295)); //@line 5849 "cPickle.c"
        HEAP[_read_str]=$38; //@line 5849 "cPickle.c"
        var $39=HEAP[_read_str]; //@line 5849 "cPickle.c"
        var $40=($39)==0; //@line 5849 "cPickle.c"
        if ($40) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 5849 "cPickle.c"
      case 27: // $bb26
        HEAP[$0]=-1; //@line 5849 "cPickle.c"
        __label__ = 89; break; //@line 5849 "cPickle.c"
      case 28: // $bb27
        var $41=_PyString_InternFromString(((__str138)&4294967295)); //@line 5850 "cPickle.c"
        HEAP[_readline_str]=$41; //@line 5850 "cPickle.c"
        var $42=HEAP[_readline_str]; //@line 5850 "cPickle.c"
        var $43=($42)==0; //@line 5850 "cPickle.c"
        if ($43) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 5850 "cPickle.c"
      case 29: // $bb28
        HEAP[$0]=-1; //@line 5850 "cPickle.c"
        __label__ = 89; break; //@line 5850 "cPickle.c"
      case 30: // $bb29
        var $44=_PyString_InternFromString(((__str139)&4294967295)); //@line 5851 "cPickle.c"
        HEAP[_dispatch_table_str]=$44; //@line 5851 "cPickle.c"
        var $45=HEAP[_dispatch_table_str]; //@line 5851 "cPickle.c"
        var $46=($45)==0; //@line 5851 "cPickle.c"
        if ($46) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 5851 "cPickle.c"
      case 31: // $bb30
        HEAP[$0]=-1; //@line 5851 "cPickle.c"
        __label__ = 89; break; //@line 5851 "cPickle.c"
      case 32: // $bb31
        var $47=_PyImport_ImportModule(((__str63)&4294967295)); //@line 5853 "cPickle.c"
        HEAP[$copyreg]=$47; //@line 5853 "cPickle.c"
        var $48=HEAP[$copyreg]; //@line 5853 "cPickle.c"
        var $49=($48)==0; //@line 5853 "cPickle.c"
        if ($49) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 5853 "cPickle.c"
      case 33: // $bb32
        HEAP[$0]=-1; //@line 5854 "cPickle.c"
        __label__ = 89; break; //@line 5854 "cPickle.c"
      case 34: // $bb33
        var $50=HEAP[_dispatch_table_str]; //@line 5858 "cPickle.c"
        var $51=HEAP[$copyreg]; //@line 5858 "cPickle.c"
        var $52=_PyObject_GetAttr($51, $50); //@line 5858 "cPickle.c"
        HEAP[_dispatch_table]=$52; //@line 5858 "cPickle.c"
        var $53=HEAP[_dispatch_table]; //@line 5859 "cPickle.c"
        var $54=($53)==0; //@line 5859 "cPickle.c"
        if ($54) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 5859 "cPickle.c"
      case 35: // $bb34
        HEAP[$0]=-1; //@line 5859 "cPickle.c"
        __label__ = 89; break; //@line 5859 "cPickle.c"
      case 36: // $bb35
        var $55=HEAP[$copyreg]; //@line 5861 "cPickle.c"
        var $56=_PyObject_GetAttrString($55, ((__str140)&4294967295)); //@line 5861 "cPickle.c"
        HEAP[_extension_registry]=$56; //@line 5861 "cPickle.c"
        var $57=HEAP[_extension_registry]; //@line 5863 "cPickle.c"
        var $58=($57)==0; //@line 5863 "cPickle.c"
        if ($58) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 5863 "cPickle.c"
      case 37: // $bb36
        HEAP[$0]=-1; //@line 5863 "cPickle.c"
        __label__ = 89; break; //@line 5863 "cPickle.c"
      case 38: // $bb37
        var $59=HEAP[$copyreg]; //@line 5865 "cPickle.c"
        var $60=_PyObject_GetAttrString($59, ((__str141)&4294967295)); //@line 5865 "cPickle.c"
        HEAP[_inverted_registry]=$60; //@line 5865 "cPickle.c"
        var $61=HEAP[_inverted_registry]; //@line 5867 "cPickle.c"
        var $62=($61)==0; //@line 5867 "cPickle.c"
        if ($62) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 5867 "cPickle.c"
      case 39: // $bb38
        HEAP[$0]=-1; //@line 5867 "cPickle.c"
        __label__ = 89; break; //@line 5867 "cPickle.c"
      case 40: // $bb39
        var $63=HEAP[$copyreg]; //@line 5869 "cPickle.c"
        var $64=_PyObject_GetAttrString($63, ((__str142)&4294967295)); //@line 5869 "cPickle.c"
        HEAP[_extension_cache]=$64; //@line 5869 "cPickle.c"
        var $65=HEAP[_extension_cache]; //@line 5871 "cPickle.c"
        var $66=($65)==0; //@line 5871 "cPickle.c"
        if ($66) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 5871 "cPickle.c"
      case 41: // $bb40
        HEAP[$0]=-1; //@line 5871 "cPickle.c"
        __label__ = 89; break; //@line 5871 "cPickle.c"
      case 42: // $bb41
        var $67=HEAP[$copyreg]; //@line 5873 "cPickle.c"
        var $68=(($67)&4294967295); //@line 5873 "cPickle.c"
        var $69=HEAP[$68]; //@line 5873 "cPickle.c"
        var $70=((($69) - 1)&4294967295); //@line 5873 "cPickle.c"
        var $71=HEAP[$copyreg]; //@line 5873 "cPickle.c"
        var $72=(($71)&4294967295); //@line 5873 "cPickle.c"
        HEAP[$72]=$70; //@line 5873 "cPickle.c"
        var $73=HEAP[$copyreg]; //@line 5873 "cPickle.c"
        var $74=(($73)&4294967295); //@line 5873 "cPickle.c"
        var $75=HEAP[$74]; //@line 5873 "cPickle.c"
        var $76=((($75))|0)==0; //@line 5873 "cPickle.c"
        if ($76) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 5873 "cPickle.c"
      case 43: // $bb42
        var $77=HEAP[$copyreg]; //@line 5873 "cPickle.c"
        var $78=(($77+4)&4294967295); //@line 5873 "cPickle.c"
        var $79=HEAP[$78]; //@line 5873 "cPickle.c"
        var $80=(($79+24)&4294967295); //@line 5873 "cPickle.c"
        var $81=HEAP[$80]; //@line 5873 "cPickle.c"
        var $82=HEAP[$copyreg]; //@line 5873 "cPickle.c"
        FUNCTION_TABLE[$81]($82); //@line 5873 "cPickle.c"
        __label__ = 44; break; //@line 5873 "cPickle.c"
      case 44: // $bb43
        var $83=_PyTuple_New(0); //@line 5875 "cPickle.c"
        HEAP[_empty_tuple]=$83; //@line 5875 "cPickle.c"
        var $84=HEAP[_empty_tuple]; //@line 5875 "cPickle.c"
        var $85=($84)==0; //@line 5875 "cPickle.c"
        if ($85) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 5875 "cPickle.c"
      case 45: // $bb44
        HEAP[$0]=-1; //@line 5876 "cPickle.c"
        __label__ = 89; break; //@line 5876 "cPickle.c"
      case 46: // $bb45
        var $86=_PyTuple_New(2); //@line 5878 "cPickle.c"
        HEAP[_two_tuple]=$86; //@line 5878 "cPickle.c"
        var $87=HEAP[_two_tuple]; //@line 5879 "cPickle.c"
        var $88=($87)==0; //@line 5879 "cPickle.c"
        if ($88) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 5879 "cPickle.c"
      case 47: // $bb46
        HEAP[$0]=-1; //@line 5880 "cPickle.c"
        __label__ = 89; break; //@line 5880 "cPickle.c"
      case 48: // $bb47
        var $89=HEAP[_two_tuple]; //@line 5885 "cPickle.c"
        var $90=$89; //@line 5885 "cPickle.c"
        _PyObject_GC_UnTrack($90); //@line 5885 "cPickle.c"
        var $91=_PyImport_ImportModule(((__str143)&4294967295)); //@line 5888 "cPickle.c"
        HEAP[$t]=$91; //@line 5888 "cPickle.c"
        var $92=HEAP[$t]; //@line 5888 "cPickle.c"
        var $93=($92)==0; //@line 5888 "cPickle.c"
        if ($93) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 5888 "cPickle.c"
      case 49: // $bb48
        HEAP[$0]=-1; //@line 5888 "cPickle.c"
        __label__ = 89; break; //@line 5888 "cPickle.c"
      case 50: // $bb49
        var $94=HEAP[$module_dict_addr]; //@line 5889 "cPickle.c"
        var $95=HEAP[$t]; //@line 5889 "cPickle.c"
        var $96=_PyDict_SetItemString($94, ((__str144)&4294967295), $95); //@line 5889 "cPickle.c"
        var $97=((($96))|0) < 0; //@line 5889 "cPickle.c"
        if ($97) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 5889 "cPickle.c"
      case 51: // $bb50
        HEAP[$0]=-1; //@line 5890 "cPickle.c"
        __label__ = 89; break; //@line 5890 "cPickle.c"
      case 52: // $bb51
        var $98=_PyDict_New(); //@line 5892 "cPickle.c"
        HEAP[$t]=$98; //@line 5892 "cPickle.c"
        var $99=HEAP[$t]; //@line 5892 "cPickle.c"
        var $100=($99)==0; //@line 5892 "cPickle.c"
        if ($100) { __label__ = 53; break; } else { __label__ = 54; break; } //@line 5892 "cPickle.c"
      case 53: // $bb52
        HEAP[$0]=-1; //@line 5892 "cPickle.c"
        __label__ = 89; break; //@line 5892 "cPickle.c"
      case 54: // $bb53
        var $101=HEAP[$module_dict_addr]; //@line 5893 "cPickle.c"
        var $102=HEAP[$t]; //@line 5893 "cPickle.c"
        var $103=_PyRun_StringFlags(((__str145)&4294967295), 257, $101, $102, 0); //@line 5893 "cPickle.c"
        HEAP[$r]=$103; //@line 5893 "cPickle.c"
        var $104=HEAP[$r]; //@line 5893 "cPickle.c"
        var $105=($104)==0; //@line 5893 "cPickle.c"
        if ($105) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 5893 "cPickle.c"
      case 55: // $bb54
        HEAP[$0]=-1; //@line 5893 "cPickle.c"
        __label__ = 89; break; //@line 5893 "cPickle.c"
      case 56: // $bb55
        var $106=HEAP[$r]; //@line 5898 "cPickle.c"
        var $107=(($106)&4294967295); //@line 5898 "cPickle.c"
        var $108=HEAP[$107]; //@line 5898 "cPickle.c"
        var $109=((($108) - 1)&4294967295); //@line 5898 "cPickle.c"
        var $110=HEAP[$r]; //@line 5898 "cPickle.c"
        var $111=(($110)&4294967295); //@line 5898 "cPickle.c"
        HEAP[$111]=$109; //@line 5898 "cPickle.c"
        var $112=HEAP[$r]; //@line 5898 "cPickle.c"
        var $113=(($112)&4294967295); //@line 5898 "cPickle.c"
        var $114=HEAP[$113]; //@line 5898 "cPickle.c"
        var $115=((($114))|0)==0; //@line 5898 "cPickle.c"
        if ($115) { __label__ = 57; break; } else { __label__ = 58; break; } //@line 5898 "cPickle.c"
      case 57: // $bb56
        var $116=HEAP[$r]; //@line 5898 "cPickle.c"
        var $117=(($116+4)&4294967295); //@line 5898 "cPickle.c"
        var $118=HEAP[$117]; //@line 5898 "cPickle.c"
        var $119=(($118+24)&4294967295); //@line 5898 "cPickle.c"
        var $120=HEAP[$119]; //@line 5898 "cPickle.c"
        var $121=HEAP[$r]; //@line 5898 "cPickle.c"
        FUNCTION_TABLE[$120]($121); //@line 5898 "cPickle.c"
        __label__ = 58; break; //@line 5898 "cPickle.c"
      case 58: // $bb57
        var $122=HEAP[$t]; //@line 5900 "cPickle.c"
        var $123=_PyErr_NewException(((__str146)&4294967295), 0, $122); //@line 5900 "cPickle.c"
        HEAP[_PickleError]=$123; //@line 5900 "cPickle.c"
        var $124=HEAP[_PickleError]; //@line 5901 "cPickle.c"
        var $125=($124)==0; //@line 5901 "cPickle.c"
        if ($125) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 5901 "cPickle.c"
      case 59: // $bb58
        HEAP[$0]=-1; //@line 5902 "cPickle.c"
        __label__ = 89; break; //@line 5902 "cPickle.c"
      case 60: // $bb59
        var $126=HEAP[$t]; //@line 5904 "cPickle.c"
        var $127=(($126)&4294967295); //@line 5904 "cPickle.c"
        var $128=HEAP[$127]; //@line 5904 "cPickle.c"
        var $129=((($128) - 1)&4294967295); //@line 5904 "cPickle.c"
        var $130=HEAP[$t]; //@line 5904 "cPickle.c"
        var $131=(($130)&4294967295); //@line 5904 "cPickle.c"
        HEAP[$131]=$129; //@line 5904 "cPickle.c"
        var $132=HEAP[$t]; //@line 5904 "cPickle.c"
        var $133=(($132)&4294967295); //@line 5904 "cPickle.c"
        var $134=HEAP[$133]; //@line 5904 "cPickle.c"
        var $135=((($134))|0)==0; //@line 5904 "cPickle.c"
        if ($135) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 5904 "cPickle.c"
      case 61: // $bb60
        var $136=HEAP[$t]; //@line 5904 "cPickle.c"
        var $137=(($136+4)&4294967295); //@line 5904 "cPickle.c"
        var $138=HEAP[$137]; //@line 5904 "cPickle.c"
        var $139=(($138+24)&4294967295); //@line 5904 "cPickle.c"
        var $140=HEAP[$139]; //@line 5904 "cPickle.c"
        var $141=HEAP[$t]; //@line 5904 "cPickle.c"
        FUNCTION_TABLE[$140]($141); //@line 5904 "cPickle.c"
        __label__ = 62; break; //@line 5904 "cPickle.c"
      case 62: // $bb61
        var $142=HEAP[_PickleError]; //@line 5906 "cPickle.c"
        var $143=_PyErr_NewException(((__str147)&4294967295), $142, 0); //@line 5906 "cPickle.c"
        HEAP[_PicklingError]=$143; //@line 5906 "cPickle.c"
        var $144=HEAP[_PicklingError]; //@line 5908 "cPickle.c"
        var $145=($144)==0; //@line 5908 "cPickle.c"
        if ($145) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 5908 "cPickle.c"
      case 63: // $bb62
        HEAP[$0]=-1; //@line 5909 "cPickle.c"
        __label__ = 89; break; //@line 5909 "cPickle.c"
      case 64: // $bb63
        var $146=_PyDict_New(); //@line 5911 "cPickle.c"
        HEAP[$t]=$146; //@line 5911 "cPickle.c"
        var $147=HEAP[$t]; //@line 5911 "cPickle.c"
        var $148=($147)==0; //@line 5911 "cPickle.c"
        if ($148) { __label__ = 65; break; } else { __label__ = 66; break; } //@line 5911 "cPickle.c"
      case 65: // $bb64
        HEAP[$0]=-1; //@line 5911 "cPickle.c"
        __label__ = 89; break; //@line 5911 "cPickle.c"
      case 66: // $bb65
        var $149=HEAP[$module_dict_addr]; //@line 5912 "cPickle.c"
        var $150=HEAP[$t]; //@line 5912 "cPickle.c"
        var $151=_PyRun_StringFlags(((__str148)&4294967295), 257, $149, $150, 0); //@line 5912 "cPickle.c"
        HEAP[$r]=$151; //@line 5912 "cPickle.c"
        var $152=HEAP[$r]; //@line 5912 "cPickle.c"
        var $153=($152)==0; //@line 5912 "cPickle.c"
        if ($153) { __label__ = 67; break; } else { __label__ = 68; break; } //@line 5912 "cPickle.c"
      case 67: // $bb66
        HEAP[$0]=-1; //@line 5912 "cPickle.c"
        __label__ = 89; break; //@line 5912 "cPickle.c"
      case 68: // $bb67
        var $154=HEAP[$r]; //@line 5919 "cPickle.c"
        var $155=(($154)&4294967295); //@line 5919 "cPickle.c"
        var $156=HEAP[$155]; //@line 5919 "cPickle.c"
        var $157=((($156) - 1)&4294967295); //@line 5919 "cPickle.c"
        var $158=HEAP[$r]; //@line 5919 "cPickle.c"
        var $159=(($158)&4294967295); //@line 5919 "cPickle.c"
        HEAP[$159]=$157; //@line 5919 "cPickle.c"
        var $160=HEAP[$r]; //@line 5919 "cPickle.c"
        var $161=(($160)&4294967295); //@line 5919 "cPickle.c"
        var $162=HEAP[$161]; //@line 5919 "cPickle.c"
        var $163=((($162))|0)==0; //@line 5919 "cPickle.c"
        if ($163) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 5919 "cPickle.c"
      case 69: // $bb68
        var $164=HEAP[$r]; //@line 5919 "cPickle.c"
        var $165=(($164+4)&4294967295); //@line 5919 "cPickle.c"
        var $166=HEAP[$165]; //@line 5919 "cPickle.c"
        var $167=(($166+24)&4294967295); //@line 5919 "cPickle.c"
        var $168=HEAP[$167]; //@line 5919 "cPickle.c"
        var $169=HEAP[$r]; //@line 5919 "cPickle.c"
        FUNCTION_TABLE[$168]($169); //@line 5919 "cPickle.c"
        __label__ = 70; break; //@line 5919 "cPickle.c"
      case 70: // $bb69
        var $170=HEAP[_PicklingError]; //@line 5921 "cPickle.c"
        var $171=HEAP[$t]; //@line 5921 "cPickle.c"
        var $172=_PyErr_NewException(((__str149)&4294967295), $170, $171); //@line 5921 "cPickle.c"
        HEAP[_UnpickleableError]=$172; //@line 5921 "cPickle.c"
        var $173=HEAP[_UnpickleableError]; //@line 5921 "cPickle.c"
        var $174=($173)==0; //@line 5921 "cPickle.c"
        if ($174) { __label__ = 71; break; } else { __label__ = 72; break; } //@line 5921 "cPickle.c"
      case 71: // $bb70
        HEAP[$0]=-1; //@line 5923 "cPickle.c"
        __label__ = 89; break; //@line 5923 "cPickle.c"
      case 72: // $bb71
        var $175=HEAP[$t]; //@line 5925 "cPickle.c"
        var $176=(($175)&4294967295); //@line 5925 "cPickle.c"
        var $177=HEAP[$176]; //@line 5925 "cPickle.c"
        var $178=((($177) - 1)&4294967295); //@line 5925 "cPickle.c"
        var $179=HEAP[$t]; //@line 5925 "cPickle.c"
        var $180=(($179)&4294967295); //@line 5925 "cPickle.c"
        HEAP[$180]=$178; //@line 5925 "cPickle.c"
        var $181=HEAP[$t]; //@line 5925 "cPickle.c"
        var $182=(($181)&4294967295); //@line 5925 "cPickle.c"
        var $183=HEAP[$182]; //@line 5925 "cPickle.c"
        var $184=((($183))|0)==0; //@line 5925 "cPickle.c"
        if ($184) { __label__ = 73; break; } else { __label__ = 74; break; } //@line 5925 "cPickle.c"
      case 73: // $bb72
        var $185=HEAP[$t]; //@line 5925 "cPickle.c"
        var $186=(($185+4)&4294967295); //@line 5925 "cPickle.c"
        var $187=HEAP[$186]; //@line 5925 "cPickle.c"
        var $188=(($187+24)&4294967295); //@line 5925 "cPickle.c"
        var $189=HEAP[$188]; //@line 5925 "cPickle.c"
        var $190=HEAP[$t]; //@line 5925 "cPickle.c"
        FUNCTION_TABLE[$189]($190); //@line 5925 "cPickle.c"
        __label__ = 74; break; //@line 5925 "cPickle.c"
      case 74: // $bb73
        var $191=HEAP[_PickleError]; //@line 5927 "cPickle.c"
        var $192=_PyErr_NewException(((__str150)&4294967295), $191, 0); //@line 5927 "cPickle.c"
        HEAP[_UnpicklingError]=$192; //@line 5927 "cPickle.c"
        var $193=HEAP[_UnpicklingError]; //@line 5927 "cPickle.c"
        var $194=($193)==0; //@line 5927 "cPickle.c"
        if ($194) { __label__ = 75; break; } else { __label__ = 76; break; } //@line 5927 "cPickle.c"
      case 75: // $bb74
        HEAP[$0]=-1; //@line 5929 "cPickle.c"
        __label__ = 89; break; //@line 5929 "cPickle.c"
      case 76: // $bb75
        var $195=HEAP[_UnpicklingError]; //@line 5931 "cPickle.c"
        var $196=_PyErr_NewException(((__str151)&4294967295), $195, 0); //@line 5931 "cPickle.c"
        HEAP[_BadPickleGet]=$196; //@line 5931 "cPickle.c"
        var $197=HEAP[_BadPickleGet]; //@line 5931 "cPickle.c"
        var $198=($197)==0; //@line 5931 "cPickle.c"
        if ($198) { __label__ = 77; break; } else { __label__ = 78; break; } //@line 5931 "cPickle.c"
      case 77: // $bb76
        HEAP[$0]=-1; //@line 5933 "cPickle.c"
        __label__ = 89; break; //@line 5933 "cPickle.c"
      case 78: // $bb77
        var $199=HEAP[_PickleError]; //@line 5935 "cPickle.c"
        var $200=HEAP[$module_dict_addr]; //@line 5935 "cPickle.c"
        var $201=_PyDict_SetItemString($200, ((__str152)&4294967295), $199); //@line 5935 "cPickle.c"
        var $202=((($201))|0) < 0; //@line 5935 "cPickle.c"
        if ($202) { __label__ = 79; break; } else { __label__ = 80; break; } //@line 5935 "cPickle.c"
      case 79: // $bb78
        HEAP[$0]=-1; //@line 5937 "cPickle.c"
        __label__ = 89; break; //@line 5937 "cPickle.c"
      case 80: // $bb79
        var $203=HEAP[_PicklingError]; //@line 5939 "cPickle.c"
        var $204=HEAP[$module_dict_addr]; //@line 5939 "cPickle.c"
        var $205=_PyDict_SetItemString($204, ((__str75)&4294967295), $203); //@line 5939 "cPickle.c"
        var $206=((($205))|0) < 0; //@line 5939 "cPickle.c"
        if ($206) { __label__ = 81; break; } else { __label__ = 82; break; } //@line 5939 "cPickle.c"
      case 81: // $bb80
        HEAP[$0]=-1; //@line 5941 "cPickle.c"
        __label__ = 89; break; //@line 5941 "cPickle.c"
      case 82: // $bb81
        var $207=HEAP[_UnpicklingError]; //@line 5943 "cPickle.c"
        var $208=HEAP[$module_dict_addr]; //@line 5943 "cPickle.c"
        var $209=_PyDict_SetItemString($208, ((__str110)&4294967295), $207); //@line 5943 "cPickle.c"
        var $210=((($209))|0) < 0; //@line 5943 "cPickle.c"
        if ($210) { __label__ = 83; break; } else { __label__ = 84; break; } //@line 5943 "cPickle.c"
      case 83: // $bb82
        HEAP[$0]=-1; //@line 5945 "cPickle.c"
        __label__ = 89; break; //@line 5945 "cPickle.c"
      case 84: // $bb83
        var $211=HEAP[_UnpickleableError]; //@line 5947 "cPickle.c"
        var $212=HEAP[$module_dict_addr]; //@line 5947 "cPickle.c"
        var $213=_PyDict_SetItemString($212, ((__str153)&4294967295), $211); //@line 5947 "cPickle.c"
        var $214=((($213))|0) < 0; //@line 5947 "cPickle.c"
        if ($214) { __label__ = 85; break; } else { __label__ = 86; break; } //@line 5947 "cPickle.c"
      case 85: // $bb84
        HEAP[$0]=-1; //@line 5949 "cPickle.c"
        __label__ = 89; break; //@line 5949 "cPickle.c"
      case 86: // $bb85
        var $215=HEAP[_BadPickleGet]; //@line 5951 "cPickle.c"
        var $216=HEAP[$module_dict_addr]; //@line 5951 "cPickle.c"
        var $217=_PyDict_SetItemString($216, ((__str154)&4294967295), $215); //@line 5951 "cPickle.c"
        var $218=((($217))|0) < 0; //@line 5951 "cPickle.c"
        if ($218) { __label__ = 87; break; } else { __label__ = 88; break; } //@line 5951 "cPickle.c"
      case 87: // $bb86
        HEAP[$0]=-1; //@line 5953 "cPickle.c"
        __label__ = 89; break; //@line 5953 "cPickle.c"
      case 88: // $bb87
        var $219=_PyCapsule_Import(((__str155)&4294967295), 0); //@line 5955 "cPickle.c"
        var $220=$219; //@line 5955 "cPickle.c"
        HEAP[_PycStringIO]=$220; //@line 5955 "cPickle.c"
        HEAP[$0]=0; //@line 5957 "cPickle.c"
        __label__ = 89; break; //@line 5957 "cPickle.c"
      case 89: // $bb88
        var $221=HEAP[$0]; //@line 5834 "cPickle.c"
        HEAP[$retval]=$221; //@line 5834 "cPickle.c"
        __label__ = 90; break; //@line 5834 "cPickle.c"
      case 90: // $return
        var $retval89=HEAP[$retval]; //@line 5834 "cPickle.c"
        STACKTOP = __stackBase__;
        return $retval89; //@line 5834 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _initcPickle() {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $m=__stackBase__;
        var $d=__stackBase__+4;
        var $di=__stackBase__+8;
        var $v=__stackBase__+12;
        var $k=__stackBase__+16;
        var $i=__stackBase__+20;
        var $rev=__stackBase__+24;
        var $format_version=__stackBase__+28;
        var $compatible_formats=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$rev]=((__str156)&4294967295); //@line 5968 "cPickle.c"
        var $0=((_Picklertype+4)&4294967295); //@line 5972 "cPickle.c"
        HEAP[$0]=_PyType_Type; //@line 5972 "cPickle.c"
        var $1=((_Unpicklertype+4)&4294967295); //@line 5973 "cPickle.c"
        HEAP[$1]=_PyType_Type; //@line 5973 "cPickle.c"
        var $2=((_PdataType+4)&4294967295); //@line 5974 "cPickle.c"
        HEAP[$2]=_PyType_Type; //@line 5974 "cPickle.c"
        var $3=_PyDict_New(); //@line 5979 "cPickle.c"
        HEAP[$di]=$3; //@line 5979 "cPickle.c"
        var $4=HEAP[$di]; //@line 5980 "cPickle.c"
        var $5=($4)==0; //@line 5980 "cPickle.c"
        if ($5) { __label__ = 21; break; } else { __label__ = 1; break; } //@line 5980 "cPickle.c"
      case 1: // $bb
        var $6=HEAP[$di]; //@line 5981 "cPickle.c"
        var $7=_init_stuff($6); //@line 5981 "cPickle.c"
        var $8=((($7))|0) < 0; //@line 5981 "cPickle.c"
        if ($8) { __label__ = 21; break; } else { __label__ = 2; break; } //@line 5981 "cPickle.c"
      case 2: // $bb1
        var $9=_Py_InitModule4(((__str157)&4294967295), ((_cPickle_methods)&4294967295), ((_cPickle_module_documentation)&4294967295), 0, 1013); //@line 5984 "cPickle.c"
        HEAP[$m]=$9; //@line 5984 "cPickle.c"
        var $10=HEAP[$m]; //@line 5987 "cPickle.c"
        var $11=($10)==0; //@line 5987 "cPickle.c"
        if ($11) { __label__ = 21; break; } else { __label__ = 3; break; } //@line 5987 "cPickle.c"
      case 3: // $bb2
        var $12=HEAP[$m]; //@line 5991 "cPickle.c"
        var $13=_PyModule_GetDict($12); //@line 5991 "cPickle.c"
        HEAP[$d]=$13; //@line 5991 "cPickle.c"
        var $14=HEAP[$rev]; //@line 5992 "cPickle.c"
        var $15=_PyString_FromString($14); //@line 5992 "cPickle.c"
        HEAP[$v]=$15; //@line 5992 "cPickle.c"
        var $16=HEAP[$v]; //@line 5993 "cPickle.c"
        var $17=HEAP[$d]; //@line 5993 "cPickle.c"
        var $18=_PyDict_SetItemString($17, ((__str158)&4294967295), $16); //@line 5993 "cPickle.c"
        var $19=HEAP[$v]; //@line 5994 "cPickle.c"
        var $20=($19)!=0; //@line 5994 "cPickle.c"
        if ($20) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 5994 "cPickle.c"
      case 4: // $bb3
        var $21=HEAP[$v]; //@line 5994 "cPickle.c"
        var $22=(($21)&4294967295); //@line 5994 "cPickle.c"
        var $23=HEAP[$22]; //@line 5994 "cPickle.c"
        var $24=((($23) - 1)&4294967295); //@line 5994 "cPickle.c"
        var $25=(($21)&4294967295); //@line 5994 "cPickle.c"
        HEAP[$25]=$24; //@line 5994 "cPickle.c"
        var $26=(($21)&4294967295); //@line 5994 "cPickle.c"
        var $27=HEAP[$26]; //@line 5994 "cPickle.c"
        var $28=((($27))|0)==0; //@line 5994 "cPickle.c"
        if ($28) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 5994 "cPickle.c"
      case 5: // $bb4
        var $29=HEAP[$v]; //@line 5994 "cPickle.c"
        var $30=(($29+4)&4294967295); //@line 5994 "cPickle.c"
        var $31=HEAP[$30]; //@line 5994 "cPickle.c"
        var $32=(($31+24)&4294967295); //@line 5994 "cPickle.c"
        var $33=HEAP[$32]; //@line 5994 "cPickle.c"
        var $34=HEAP[$v]; //@line 5994 "cPickle.c"
        FUNCTION_TABLE[$33]($34); //@line 5994 "cPickle.c"
        __label__ = 6; break; //@line 5994 "cPickle.c"
      case 6: // $bb5
        HEAP[$i]=0; //@line 5997 "cPickle.c"
        __label__ = 11; break; //@line 5997 "cPickle.c"
      case 7: // $bb6
        var $35=HEAP[$v]; //@line 5998 "cPickle.c"
        var $36=HEAP[$k]; //@line 5998 "cPickle.c"
        var $37=HEAP[$d]; //@line 5998 "cPickle.c"
        var $38=_PyObject_SetItem($37, $36, $35); //@line 5998 "cPickle.c"
        var $39=((($38))|0) < 0; //@line 5998 "cPickle.c"
        if ($39) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 5998 "cPickle.c"
      case 8: // $bb7
        var $40=HEAP[$di]; //@line 5999 "cPickle.c"
        var $41=(($40)&4294967295); //@line 5999 "cPickle.c"
        var $42=HEAP[$41]; //@line 5999 "cPickle.c"
        var $43=((($42) - 1)&4294967295); //@line 5999 "cPickle.c"
        var $44=HEAP[$di]; //@line 5999 "cPickle.c"
        var $45=(($44)&4294967295); //@line 5999 "cPickle.c"
        HEAP[$45]=$43; //@line 5999 "cPickle.c"
        var $46=HEAP[$di]; //@line 5999 "cPickle.c"
        var $47=(($46)&4294967295); //@line 5999 "cPickle.c"
        var $48=HEAP[$47]; //@line 5999 "cPickle.c"
        var $49=((($48))|0)==0; //@line 5999 "cPickle.c"
        if ($49) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 5999 "cPickle.c"
      case 9: // $bb8
        var $50=HEAP[$di]; //@line 5999 "cPickle.c"
        var $51=(($50+4)&4294967295); //@line 5999 "cPickle.c"
        var $52=HEAP[$51]; //@line 5999 "cPickle.c"
        var $53=(($52+24)&4294967295); //@line 5999 "cPickle.c"
        var $54=HEAP[$53]; //@line 5999 "cPickle.c"
        var $55=HEAP[$di]; //@line 5999 "cPickle.c"
        FUNCTION_TABLE[$54]($55); //@line 5999 "cPickle.c"
        __label__ = 10; break; //@line 5999 "cPickle.c"
      case 10: // $bb9
        __label__ = 21; break; //@line 5999 "cPickle.c"
      case 11: // $bb10
        var $56=HEAP[$di]; //@line 5997 "cPickle.c"
        var $57=_PyDict_Next($56, $i, $k, $v); //@line 5997 "cPickle.c"
        var $58=((($57))|0)!=0; //@line 5997 "cPickle.c"
        if ($58) { __label__ = 7; break; } else { __label__ = 12; break; } //@line 5997 "cPickle.c"
      case 12: // $bb11
        var $59=HEAP[$di]; //@line 6003 "cPickle.c"
        var $60=(($59)&4294967295); //@line 6003 "cPickle.c"
        var $61=HEAP[$60]; //@line 6003 "cPickle.c"
        var $62=((($61) - 1)&4294967295); //@line 6003 "cPickle.c"
        var $63=HEAP[$di]; //@line 6003 "cPickle.c"
        var $64=(($63)&4294967295); //@line 6003 "cPickle.c"
        HEAP[$64]=$62; //@line 6003 "cPickle.c"
        var $65=HEAP[$di]; //@line 6003 "cPickle.c"
        var $66=(($65)&4294967295); //@line 6003 "cPickle.c"
        var $67=HEAP[$66]; //@line 6003 "cPickle.c"
        var $68=((($67))|0)==0; //@line 6003 "cPickle.c"
        if ($68) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 6003 "cPickle.c"
      case 13: // $bb12
        var $69=HEAP[$di]; //@line 6003 "cPickle.c"
        var $70=(($69+4)&4294967295); //@line 6003 "cPickle.c"
        var $71=HEAP[$70]; //@line 6003 "cPickle.c"
        var $72=(($71+24)&4294967295); //@line 6003 "cPickle.c"
        var $73=HEAP[$72]; //@line 6003 "cPickle.c"
        var $74=HEAP[$di]; //@line 6003 "cPickle.c"
        FUNCTION_TABLE[$73]($74); //@line 6003 "cPickle.c"
        __label__ = 14; break; //@line 6003 "cPickle.c"
      case 14: // $bb13
        var $75=HEAP[$m]; //@line 6005 "cPickle.c"
        var $76=_PyModule_AddIntConstant($75, ((__str159)&4294967295), 2); //@line 6005 "cPickle.c"
        HEAP[$i]=$76; //@line 6005 "cPickle.c"
        var $77=HEAP[$i]; //@line 6006 "cPickle.c"
        var $78=((($77))|0) < 0; //@line 6006 "cPickle.c"
        if ($78) { __label__ = 21; break; } else { __label__ = 15; break; } //@line 6006 "cPickle.c"
      case 15: // $bb14
        var $79=_PyString_FromString(((__str160)&4294967295)); //@line 6011 "cPickle.c"
        HEAP[$format_version]=$79; //@line 6011 "cPickle.c"
        var $80=_Py_BuildValue(((__str161)&4294967295), ((__str162)&4294967295), ((__str163)&4294967295), ((__str164)&4294967295), ((__str165)&4294967295), ((__str160)&4294967295)); //@line 6013 "cPickle.c"
        HEAP[$compatible_formats]=$80; //@line 6013 "cPickle.c"
        var $81=HEAP[$d]; //@line 6019 "cPickle.c"
        var $82=HEAP[$format_version]; //@line 6019 "cPickle.c"
        var $83=_PyDict_SetItemString($81, ((__str166)&4294967295), $82); //@line 6019 "cPickle.c"
        var $84=HEAP[$d]; //@line 6020 "cPickle.c"
        var $85=HEAP[$compatible_formats]; //@line 6020 "cPickle.c"
        var $86=_PyDict_SetItemString($84, ((__str167)&4294967295), $85); //@line 6020 "cPickle.c"
        var $87=HEAP[$format_version]; //@line 6021 "cPickle.c"
        var $88=($87)!=0; //@line 6021 "cPickle.c"
        if ($88) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 6021 "cPickle.c"
      case 16: // $bb15
        var $89=HEAP[$format_version]; //@line 6021 "cPickle.c"
        var $90=(($89)&4294967295); //@line 6021 "cPickle.c"
        var $91=HEAP[$90]; //@line 6021 "cPickle.c"
        var $92=((($91) - 1)&4294967295); //@line 6021 "cPickle.c"
        var $93=HEAP[$format_version]; //@line 6021 "cPickle.c"
        var $94=(($93)&4294967295); //@line 6021 "cPickle.c"
        HEAP[$94]=$92; //@line 6021 "cPickle.c"
        var $95=HEAP[$format_version]; //@line 6021 "cPickle.c"
        var $96=(($95)&4294967295); //@line 6021 "cPickle.c"
        var $97=HEAP[$96]; //@line 6021 "cPickle.c"
        var $98=((($97))|0)==0; //@line 6021 "cPickle.c"
        if ($98) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 6021 "cPickle.c"
      case 17: // $bb16
        var $99=HEAP[$format_version]; //@line 6021 "cPickle.c"
        var $100=(($99+4)&4294967295); //@line 6021 "cPickle.c"
        var $101=HEAP[$100]; //@line 6021 "cPickle.c"
        var $102=(($101+24)&4294967295); //@line 6021 "cPickle.c"
        var $103=HEAP[$102]; //@line 6021 "cPickle.c"
        var $104=HEAP[$format_version]; //@line 6021 "cPickle.c"
        FUNCTION_TABLE[$103]($104); //@line 6021 "cPickle.c"
        __label__ = 18; break; //@line 6021 "cPickle.c"
      case 18: // $bb17
        var $105=HEAP[$compatible_formats]; //@line 6022 "cPickle.c"
        var $106=($105)!=0; //@line 6022 "cPickle.c"
        if ($106) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 6022 "cPickle.c"
      case 19: // $bb18
        var $107=HEAP[$compatible_formats]; //@line 6022 "cPickle.c"
        var $108=(($107)&4294967295); //@line 6022 "cPickle.c"
        var $109=HEAP[$108]; //@line 6022 "cPickle.c"
        var $110=((($109) - 1)&4294967295); //@line 6022 "cPickle.c"
        var $111=HEAP[$compatible_formats]; //@line 6022 "cPickle.c"
        var $112=(($111)&4294967295); //@line 6022 "cPickle.c"
        HEAP[$112]=$110; //@line 6022 "cPickle.c"
        var $113=HEAP[$compatible_formats]; //@line 6022 "cPickle.c"
        var $114=(($113)&4294967295); //@line 6022 "cPickle.c"
        var $115=HEAP[$114]; //@line 6022 "cPickle.c"
        var $116=((($115))|0)==0; //@line 6022 "cPickle.c"
        if ($116) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 6022 "cPickle.c"
      case 20: // $bb19
        var $117=HEAP[$compatible_formats]; //@line 6022 "cPickle.c"
        var $118=(($117+4)&4294967295); //@line 6022 "cPickle.c"
        var $119=HEAP[$118]; //@line 6022 "cPickle.c"
        var $120=(($119+24)&4294967295); //@line 6022 "cPickle.c"
        var $121=HEAP[$120]; //@line 6022 "cPickle.c"
        var $122=HEAP[$compatible_formats]; //@line 6022 "cPickle.c"
        FUNCTION_TABLE[$121]($122); //@line 6022 "cPickle.c"
        __label__ = 21; break; //@line 6022 "cPickle.c"
      case 21: // $bb20
        __label__ = 22; break; //@line 5980 "cPickle.c"
      case 22: // $return
        STACKTOP = __stackBase__;
        return; //@line 5980 "cPickle.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  Module["_initcPickle"] = _initcPickle;
FUNCTION_TABLE = FUNCTION_TABLE.concat([0,0,__PyObject_NextNotImplemented,0,_write_file,0,_write_cStringIO,0,_write_none,0,_write_other,0,_read_file,0,_readline_file,0,_read_cStringIO,0,_readline_cStringIO,0,_read_other,0,_readline_other,0,_Pdata_dealloc,0,_Pickler_dump,0,_Pickle_clear_memo,0,_Pickle_getvalue,0,_Pickler_get_pers_func,0,_Pickler_set_pers_func,0,_Pickler_set_inst_pers_func,0,_Pickler_get_memo,0,_Pickler_set_memo,0,_Pickler_get_error,0,_Pickler_dealloc,0,_PyObject_GenericGetAttr,0,_PyObject_GenericSetAttr,0,_Pickler_traverse,0,_Pickler_clear,0,_Unpickler_load,0,_Unpickler_noload,0,_Unpickler_dealloc,0,_Unpickler_getattr,0,_Unpickler_setattr,0,_Unpickler_traverse,0,_Unpickler_clear,0,_cpm_dump,0,_cpm_dumps,0,_cpm_load,0,_cpm_loads,0,_get_Pickler,0,_get_Unpickler,0]);

// === Auto-generated postamble setup entry stuff ===

function run(args) {
  
_cPickle_module_documentation=allocate([67,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,32,97,110,100,32,111,112,116,105,109,105,122,97,116,105,111,110,32,111,102,32,116,104,101,32,80,121,116,104,111,110,32,112,105,99,107,108,101,32,109,111,100,117,108,101,46,0] /* C implementation and */, "i8", ALLOC_NORMAL);
_MARKv=allocate([40], "i8", ALLOC_NORMAL);
__str=allocate([99,80,105,99,107,108,101,46,80,100,97,116,97,0] /* cPickle.Pdata\00 */, "i8", ALLOC_NORMAL);
__str1=allocate(1, "i8", ALLOC_NORMAL);
_PdataType=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_UnpicklingError=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str2=allocate([117,110,112,105,99,107,108,105,110,103,32,115,116,97,99,107,32,117,110,100,101,114,102,108,111,119,0] /* unpickling stack und */, "i8", ALLOC_NORMAL);
_PycStringIO=allocate(1, "%struct.PycStringIO_CAPI*", ALLOC_NORMAL);
_empty_tuple=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
_PicklingError=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str3=allocate([110,111,32,105,110,116,32,119,104,101,114,101,32,105,110,116,32,101,120,112,101,99,116,101,100,32,105,110,32,109,101,109,111,0] /* no int where int exp */, "i8", ALLOC_NORMAL);
__str4=allocate([37,108,100,10,0] /* %ld\0A\00 */, "i8", ALLOC_NORMAL);
__str5=allocate([37,100,10,0] /* %d\0A\00 */, "i8", ALLOC_NORMAL);
__str6=allocate([95,95,109,111,100,117,108,101,95,95,0] /* __module__\00 */, "i8", ALLOC_NORMAL);
__str7=allocate([109,111,100,117,108,101,115,0] /* modules\00 */, "i8", ALLOC_NORMAL);
___main___str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str8=allocate([102,97,115,116,32,109,111,100,101,58,32,99,97,110,39,116,32,112,105,99,107,108,101,32,99,121,99,108,105,99,32,111,98,106,101,99,116,115,32,105,110,99,108,117,100,105,110,103,32,111,98,106,101,99,116,32,116,121,112,101,32,37,115,32,97,116,32,37,112,0] /* fast mode: can't pic */, "i8", ALLOC_NORMAL);
_none_9451=allocate([78], "i8", ALLOC_NORMAL);
_len_9463=allocate([4,4] /* \04\04 */, "i8", ALLOC_NORMAL);
_buf_9462=allocate(8, "i8*", ALLOC_NORMAL);
__str9=allocate([73,48,48,10,0] /* I00\0A\00 */, "i8", ALLOC_NORMAL);
__str10=allocate([73,48,49,10,0] /* I01\0A\00 */, "i8", ALLOC_NORMAL);
__str11=allocate([108,111,110,103,32,116,111,111,32,108,97,114,103,101,32,116,111,32,112,105,99,107,108,101,0] /* long too large to pi */, "i8", ALLOC_NORMAL);
_l_9538=allocate([76], "i8", ALLOC_NORMAL);
__str12=allocate([10,0] /* \0A\00 */, "i8", ALLOC_NORMAL);
_string_9677=allocate([83], "i8", ALLOC_NORMAL);
_hexdigit_9788=allocate(1, "i8*", ALLOC_NORMAL);
__str13=allocate([48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,0] /* 0123456789abcdef\00 */, "i8", ALLOC_NORMAL);
_string_9895=allocate([86], "i8", ALLOC_NORMAL);
__str14=allocate([80,121,84,117,112,108,101,95,83,105,122,101,40,116,41,32,61,61,32,108,101,110,0] /* PyTuple_Size(t) == l */, "i8", ALLOC_NORMAL);
__str15=allocate([46,46,47,99,112,121,116,104,111,110,47,77,111,100,117,108,101,115,47,99,80,105,99,107,108,101,46,99,0] /* ../cpython/Modules/c */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___10017=allocate([115,116,111,114,101,95,116,117,112,108,101,95,101,108,101,109,101,110,116,115,0] /* store_tuple_elements */, "i8", ALLOC_NORMAL);
_pop_10042=allocate([48], "i8", ALLOC_NORMAL);
_len2opcode_10044=allocate([41,133,134,135] /* )\85\86\87 */, "i8", ALLOC_NORMAL);
_pop_mark_10043=allocate([49], "i8", ALLOC_NORMAL);
_tuple_10041=allocate([116], "i8", ALLOC_NORMAL);
__str16=allocate([105,116,101,114,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* iter != ((void _)0)\ */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___10137=allocate([98,97,116,99,104,95,108,105,115,116,0] /* batch_list\00 */, "i8", ALLOC_NORMAL);
_append_10135=allocate([97], "i8", ALLOC_NORMAL);
_appends_10136=allocate([101], "i8", ALLOC_NORMAL);
__str17=allocate([32,119,104,105,108,101,32,112,105,99,107,108,105,110,103,32,97,110,32,111,98,106,101,99,116,0] /*  while pickling an o */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___10326=allocate([98,97,116,99,104,95,100,105,99,116,0] /* batch_dict\00 */, "i8", ALLOC_NORMAL);
__str18=allocate([100,105,99,116,32,105,116,101,109,115,32,105,116,101,114,97,116,111,114,32,109,117,115,116,32,114,101,116,117,114,110,32,50,45,116,117,112,108,101,115,0] /* dict items iterator  */, "i8", ALLOC_NORMAL);
_setitem_10324=allocate([115], "i8", ALLOC_NORMAL);
_setitems_10325=allocate([117], "i8", ALLOC_NORMAL);
__str19=allocate([111,98,106,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* obj != ((void _)0)\0 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___10501=allocate([98,97,116,99,104,95,100,105,99,116,95,101,120,97,99,116,0] /* batch_dict_exact\00 */, "i8", ALLOC_NORMAL);
__str20=allocate([115,101,108,102,45,62,112,114,111,116,111,32,62,32,48,0] /* self->proto > 0\00 */, "i8", ALLOC_NORMAL);
_setitem_10499=allocate([115], "i8", ALLOC_NORMAL);
_setitems_10500=allocate([117], "i8", ALLOC_NORMAL);
__str21=allocate([100,105,99,116,105,111,110,97,114,121,32,99,104,97,110,103,101,100,32,115,105,122,101,32,100,117,114,105,110,103,32,105,116,101,114,97,116,105,111,110,0] /* dictionary changed s */, "i8", ALLOC_NORMAL);
__str22=allocate([105,116,101,114,105,116,101,109,115,0] /* iteritems\00 */, "i8", ALLOC_NORMAL);
__str23=allocate([40,41,0] /* ()\00 */, "i8", ALLOC_NORMAL);
___class___str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
___getinitargs___str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str24=allocate([99,108,97,115,115,32,104,97,115,32,110,111,32,110,97,109,101,0] /* class has no name\00 */, "i8", ALLOC_NORMAL);
_inst_10654=allocate([105], "i8", ALLOC_NORMAL);
_obj_10655=allocate([111], "i8", ALLOC_NORMAL);
___getstate___str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
___dict___str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
_build_10656=allocate([98], "i8", ALLOC_NORMAL);
___name___str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str25=allocate([67,97,110,39,116,32,112,105,99,107,108,101,32,37,115,58,32,105,109,112,111,114,116,32,111,102,32,109,111,100,117,108,101,32,37,115,32,102,97,105,108,101,100,0] /* Can't pickle %s: imp */, "i8", ALLOC_NORMAL);
__str26=allocate([79,83,0] /* OS\00 */, "i8", ALLOC_NORMAL);
__str27=allocate([67,97,110,39,116,32,112,105,99,107,108,101,32,37,115,58,32,97,116,116,114,105,98,117,116,101,32,108,111,111,107,117,112,32,37,115,46,37,115,32,102,97,105,108,101,100,0] /* Can't pickle %s: att */, "i8", ALLOC_NORMAL);
__str28=allocate([79,83,83,0] /* OSS\00 */, "i8", ALLOC_NORMAL);
__str29=allocate([67,97,110,39,116,32,112,105,99,107,108,101,32,37,115,58,32,105,116,39,115,32,110,111,116,32,116,104,101,32,115,97,109,101,32,111,98,106,101,99,116,32,97,115,32,37,115,46,37,115,0] /* Can't pickle %s: it' */, "i8", ALLOC_NORMAL);
_two_tuple=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
_extension_registry=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str30=allocate([67,97,110,39,116,32,112,105,99,107,108,101,32,37,115,58,32,101,120,116,101,110,115,105,111,110,32,99,111,100,101,32,37,115,32,105,115,110,39,116,32,97,110,32,105,110,116,101,103,101,114,0] /* Can't pickle %s: ext */, "i8", ALLOC_NORMAL);
__str31=allocate([79,79,0] /* OO\00 */, "i8", ALLOC_NORMAL);
__str32=allocate([67,97,110,39,116,32,112,105,99,107,108,101,32,37,115,58,32,101,120,116,101,110,115,105,111,110,32,99,111,100,101,32,37,108,100,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* Can't pickle %s: ext */, "i8", ALLOC_NORMAL);
__str33=allocate([79,108,0] /* Ol\00 */, "i8", ALLOC_NORMAL);
_global_10855=allocate([99], "i8", ALLOC_NORMAL);
__str34=allocate([112,101,114,115,105,115,116,101,110,116,32,105,100,32,109,117,115,116,32,98,101,32,115,116,114,105,110,103,0] /* persistent id must b */, "i8", ALLOC_NORMAL);
_persid_10999=allocate([80], "i8", ALLOC_NORMAL);
_binpersid_11000=allocate([81], "i8", ALLOC_NORMAL);
__str35=allocate([116,117,112,108,101,32,114,101,116,117,114,110,101,100,32,98,121,32,37,115,32,109,117,115,116,32,99,111,110,116,97,105,110,32,50,32,116,104,114,111,117,103,104,32,53,32,101,108,101,109,101,110,116,115,0] /* tuple returned by %s */, "i8", ALLOC_NORMAL);
__str36=allocate([79,0] /* O\00 */, "i8", ALLOC_NORMAL);
__str37=allocate([115,97,118,101,95,114,101,100,117,99,101,0] /* save_reduce\00 */, "i8", ALLOC_NORMAL);
__str38=allocate([83,101,99,111,110,100,32,101,108,101,109,101,110,116,32,111,102,32,116,117,112,108,101,32,114,101,116,117,114,110,101,100,32,98,121,32,37,115,32,109,117,115,116,32,98,101,32,97,32,116,117,112,108,101,0] /* Second element of tu */, "i8", ALLOC_NORMAL);
__str39=allocate([70,111,117,114,116,104,32,101,108,101,109,101,110,116,32,111,102,32,116,117,112,108,101,32,114,101,116,117,114,110,101,100,32,98,121,32,37,115,32,109,117,115,116,32,98,101,32,97,110,32,105,116,101,114,97,116,111,114,44,32,110,111,116,32,37,115,0] /* Fourth element of tu */, "i8", ALLOC_NORMAL);
__str40=allocate([79,115,0] /* Os\00 */, "i8", ALLOC_NORMAL);
__str41=allocate([70,105,102,116,104,32,101,108,101,109,101,110,116,32,111,102,32,116,117,112,108,101,32,114,101,116,117,114,110,101,100,32,98,121,32,37,115,32,109,117,115,116,32,98,101,32,97,110,32,105,116,101,114,97,116,111,114,44,32,110,111,116,32,37,115,0] /* Fifth element of tup */, "i8", ALLOC_NORMAL);
__str42=allocate([95,95,110,101,119,111,98,106,95,95,0] /* __newobj__\00 */, "i8", ALLOC_NORMAL);
__str43=allocate([95,95,110,101,119,111,98,106,95,95,32,97,114,103,108,105,115,116,32,105,115,32,101,109,112,116,121,0] /* __newobj__ arglist i */, "i8", ALLOC_NORMAL);
__str44=allocate([95,95,110,101,119,95,95,0] /* __new__\00 */, "i8", ALLOC_NORMAL);
__str45=allocate([97,114,103,115,91,48,93,32,102,114,111,109,32,95,95,110,101,119,111,98,106,95,95,32,97,114,103,115,32,104,97,115,32,110,111,32,95,95,110,101,119,95,95,0] /* args[0] from __newob */, "i8", ALLOC_NORMAL);
__str46=allocate([97,114,103,115,91,48,93,32,102,114,111,109,32,95,95,110,101,119,111,98,106,95,95,32,97,114,103,115,32,104,97,115,32,116,104,101,32,119,114,111,110,103,32,99,108,97,115,115,0] /* args[0] from __newob */, "i8", ALLOC_NORMAL);
_newobj_11120=allocate([-127], "i8", ALLOC_NORMAL);
_reduce_11118=allocate([82], "i8", ALLOC_NORMAL);
_build_11119=allocate([98], "i8", ALLOC_NORMAL);
_PickleError=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
_dispatch_table=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
___reduce_ex___str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
___reduce___str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
_UnpickleableError=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str47=allocate([86,97,108,117,101,32,114,101,116,117,114,110,101,100,32,98,121,32,37,115,32,109,117,115,116,32,98,101,32,115,116,114,105,110,103,32,111,114,32,116,117,112,108,101,0] /* Value returned by %s */, "i8", ALLOC_NORMAL);
__str48=allocate([115,101,108,102,45,62,112,114,111,116,111,32,62,61,32,48,32,38,38,32,115,101,108,102,45,62,112,114,111,116,111,32,60,32,50,53,54,0] /* self->proto >= 0 &&  */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___11692=allocate([100,117,109,112,0] /* dump\00 */, "i8", ALLOC_NORMAL);
_stop_11690=allocate([46], "i8", ALLOC_NORMAL);
__str49=allocate([124,105,58,103,101,116,118,97,108,117,101,0] /* |i:getvalue\00 */, "i8", ALLOC_NORMAL);
__str50=allocate([65,116,116,101,109,112,116,32,116,111,32,103,101,116,118,97,108,117,101,40,41,32,97,32,110,111,110,45,108,105,115,116,45,98,97,115,101,100,32,112,105,99,107,108,101,114,0] /* Attempt to getvalue( */, "i8", ALLOC_NORMAL);
__str51=allocate([73,110,118,97,108,105,100,32,103,101,116,32,100,97,116,97,0] /* Invalid get data\00 */, "i8", ALLOC_NORMAL);
__str52=allocate([85,110,101,120,112,101,99,116,101,100,32,100,97,116,97,32,105,110,32,105,110,116,101,114,110,97,108,32,108,105,115,116,0] /* Unexpected data in i */, "i8", ALLOC_NORMAL);
__str53=allocate([79,124,105,58,100,117,109,112,0] /* O|i:dump\00 */, "i8", ALLOC_NORMAL);
__str54=allocate([100,117,109,112,0] /* dump\00 */, "i8", ALLOC_NORMAL);
__str55=allocate([100,117,109,112,40,111,98,106,101,99,116,41,32,45,45,32,87,114,105,116,101,32,97,110,32,111,98,106,101,99,116,32,105,110,32,112,105,99,107,108,101,32,102,111,114,109,97,116,32,116,111,32,116,104,101,32,111,98,106,101,99,116,39,115,32,112,105,99,107,108,101,32,115,116,114,101,97,109,0] /* dump(object) -- Writ */, "i8", ALLOC_NORMAL);
__str56=allocate([99,108,101,97,114,95,109,101,109,111,0] /* clear_memo\00 */, "i8", ALLOC_NORMAL);
__str57=allocate([99,108,101,97,114,95,109,101,109,111,40,41,32,45,45,32,67,108,101,97,114,32,116,104,101,32,112,105,99,107,108,101,114,115,32,109,101,109,111,0] /* clear_memo() -- Clea */, "i8", ALLOC_NORMAL);
__str58=allocate([103,101,116,118,97,108,117,101,0] /* getvalue\00 */, "i8", ALLOC_NORMAL);
__str59=allocate([103,101,116,118,97,108,117,101,40,41,32,45,45,32,70,105,110,105,115,104,32,112,105,99,107,105,110,103,32,97,32,108,105,115,116,45,98,97,115,101,100,32,112,105,99,107,108,101,0] /* getvalue() -- Finish */, "i8", ALLOC_NORMAL);
_Pickler_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str60=allocate([112,105,99,107,108,101,32,112,114,111,116,111,99,111,108,32,37,100,32,97,115,107,101,100,32,102,111,114,59,32,116,104,101,32,104,105,103,104,101,115,116,32,97,118,97,105,108,97,98,108,101,32,112,114,111,116,111,99,111,108,32,105,115,32,37,100,0] /* pickle protocol %d a */, "i8", ALLOC_NORMAL);
__str61=allocate([73,47,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,99,108,111,115,101,100,32,102,105,108,101,0] /* I/O operation on clo */, "i8", ALLOC_NORMAL);
_write_str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str62=allocate([97,114,103,117,109,101,110,116,32,109,117,115,116,32,104,97,118,101,32,39,119,114,105,116,101,39,32,97,116,116,114,105,98,117,116,101,0] /* argument must have ' */, "i8", ALLOC_NORMAL);
__str63=allocate([99,111,112,121,95,114,101,103,0] /* copy_reg\00 */, "i8", ALLOC_NORMAL);
_dispatch_table_str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str64=allocate([124,105,58,80,105,99,107,108,101,114,0] /* |i:Pickler\00 */, "i8", ALLOC_NORMAL);
__str65=allocate([79,124,105,58,80,105,99,107,108,101,114,0] /* O|i:Pickler\00 */, "i8", ALLOC_NORMAL);
_kwlist_12011=allocate(12, "i8*", ALLOC_NORMAL);
__str66=allocate([102,105,108,101,0] /* file\00 */, "i8", ALLOC_NORMAL);
__str67=allocate([112,114,111,116,111,99,111,108,0] /* protocol\00 */, "i8", ALLOC_NORMAL);
__str68=allocate([112,101,114,115,105,115,116,101,110,116,95,105,100,0] /* persistent_id\00 */, "i8", ALLOC_NORMAL);
__str69=allocate([97,116,116,114,105,98,117,116,101,32,100,101,108,101,116,105,111,110,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0] /* attribute deletion i */, "i8", ALLOC_NORMAL);
__str70=allocate([109,101,109,111,0] /* memo\00 */, "i8", ALLOC_NORMAL);
__str71=allocate([109,101,109,111,32,109,117,115,116,32,98,101,32,97,32,100,105,99,116,105,111,110,97,114,121,0] /* memo must be a dicti */, "i8", ALLOC_NORMAL);
__str72=allocate([98,105,110,97,114,121,0] /* binary\00 */, "i8", ALLOC_NORMAL);
__str73=allocate([102,97,115,116,0] /* fast\00 */, "i8", ALLOC_NORMAL);
_Pickler_members=allocate([0, 0, 0, 0, 1, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str74=allocate([105,110,115,116,95,112,101,114,115,105,115,116,101,110,116,95,105,100,0] /* inst_persistent_id\0 */, "i8", ALLOC_NORMAL);
__str75=allocate([80,105,99,107,108,105,110,103,69,114,114,111,114,0] /* PicklingError\00 */, "i8", ALLOC_NORMAL);
_Pickler_getsets=allocate(100, ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_Picklertype__doc__=allocate([79,98,106,101,99,116,115,32,116,104,97,116,32,107,110,111,119,32,104,111,119,32,116,111,32,112,105,99,107,108,101,32,111,98,106,101,99,116,115,10,0] /* Objects that know ho */, "i8", ALLOC_NORMAL);
__str76=allocate([99,80,105,99,107,108,101,46,80,105,99,107,108,101,114,0] /* cPickle.Pickler\00 */, "i8", ALLOC_NORMAL);
_Picklertype=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str77=allocate([71,108,111,98,97,108,32,97,110,100,32,105,110,115,116,97,110,99,101,32,112,105,99,107,108,101,115,32,97,114,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,0] /* Global and instance  */, "i8", ALLOC_NORMAL);
__str78=allocate([99,111,117,108,100,32,110,111,116,32,102,105,110,100,32,77,65,82,75,0] /* could not find MARK\ */, "i8", ALLOC_NORMAL);
__str79=allocate([112,105,99,107,108,101,32,100,97,116,97,32,119,97,115,32,116,114,117,110,99,97,116,101,100,0] /* pickle data was trun */, "i8", ALLOC_NORMAL);
__str80=allocate([99,111,117,108,100,32,110,111,116,32,99,111,110,118,101,114,116,32,115,116,114,105,110,103,32,116,111,32,105,110,116,0] /* could not convert st */, "i8", ALLOC_NORMAL);
__str81=allocate([98,111,111,108,101,97,110,32,61,61,32,40,40,80,121,79,98,106,101,99,116,32,42,41,32,38,95,80,121,95,84,114,117,101,83,116,114,117,99,116,41,32,124,124,32,98,111,111,108,101,97,110,32,61,61,32,40,40,80,121,79,98,106,101,99,116,32,42,41,32,38,95,80,121,95,90,101,114,111,83,116,114,117,99,116,41,0] /* boolean == ((PyObjec */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___12572=allocate([108,111,97,100,95,98,111,111,108,0] /* load_bool\00 */, "i8", ALLOC_NORMAL);
__str82=allocate([115,105,122,101,32,61,61,32,49,32,124,124,32,115,105,122,101,32,61,61,32,52,0] /* size == 1 || size == */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___12743=allocate([108,111,97,100,95,99,111,117,110,116,101,100,95,108,111,110,103,0] /* load_counted_long\00 */, "i8", ALLOC_NORMAL);
__str83=allocate([76,79,78,71,32,112,105,99,107,108,101,32,104,97,115,32,110,101,103,97,116,105,118,101,32,98,121,116,101,32,99,111,117,110,116,0] /* LONG pickle has nega */, "i8", ALLOC_NORMAL);
__str84=allocate([99,111,117,108,100,32,110,111,116,32,99,111,110,118,101,114,116,32,115,116,114,105,110,103,32,116,111,32,102,108,111,97,116,0] /* could not convert st */, "i8", ALLOC_NORMAL);
__str85=allocate([105,110,115,101,99,117,114,101,32,115,116,114,105,110,103,32,112,105,99,107,108,101,0] /* insecure string pick */, "i8", ALLOC_NORMAL);
__str86=allocate([66,73,78,83,84,82,73,78,71,32,112,105,99,107,108,101,32,104,97,115,32,110,101,103,97,116,105,118,101,32,98,121,116,101,32,99,111,117,110,116,0] /* BINSTRING pickle has */, "i8", ALLOC_NORMAL);
__str87=allocate([66,73,78,85,78,73,67,79,68,69,32,112,105,99,107,108,101,32,104,97,115,32,110,101,103,97,116,105,118,101,32,98,121,116,101,32,99,111,117,110,116,0] /* BINUNICODE pickle ha */, "i8", ALLOC_NORMAL);
__str88=allocate([98,97,100,32,112,105,99,107,108,101,32,100,97,116,97,0] /* bad pickle data\00 */, "i8", ALLOC_NORMAL);
__str89=allocate([78,69,87,79,66,74,32,101,120,112,101,99,116,101,100,32,97,110,32,97,114,103,32,116,117,112,108,101,46,0] /* NEWOBJ expected an a */, "i8", ALLOC_NORMAL);
__str90=allocate([78,69,87,79,66,74,32,99,108,97,115,115,32,97,114,103,117,109,101,110,116,32,105,115,110,39,116,32,97,32,116,121,112,101,32,111,98,106,101,99,116,0] /* NEWOBJ class argumen */, "i8", ALLOC_NORMAL);
__str91=allocate([78,69,87,79,66,74,32,99,108,97,115,115,32,97,114,103,117,109,101,110,116,32,104,97,115,32,78,85,76,76,32,116,112,95,110,101,119,0] /* NEWOBJ class argumen */, "i8", ALLOC_NORMAL);
__str92=allocate([65,32,108,111,97,100,32,112,101,114,115,105,115,116,101,110,116,32,105,100,32,105,110,115,116,114,117,99,116,105,111,110,32,119,97,115,32,101,110,99,111,117,110,116,101,114,101,100,44,10,98,117,116,32,110,111,32,112,101,114,115,105,115,116,101,110,116,95,108,111,97,100,32,102,117,110,99,116,105,111,110,32,119,97,115,32,115,112,101,99,105,102,105,101,100,46,0] /* A load persistent id */, "i8", ALLOC_NORMAL);
_BadPickleGet=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str93=allocate([110,98,121,116,101,115,32,61,61,32,49,32,124,124,32,110,98,121,116,101,115,32,61,61,32,50,32,124,124,32,110,98,121,116,101,115,32,61,61,32,52,0] /* nbytes == 1 || nbyte */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___14342=allocate([108,111,97,100,95,101,120,116,101,110,115,105,111,110,0] /* load_extension\00 */, "i8", ALLOC_NORMAL);
__str94=allocate([69,88,84,32,115,112,101,99,105,102,105,101,115,32,99,111,100,101,32,60,61,32,48,0] /* EXT specifies code < */, "i8", ALLOC_NORMAL);
_extension_cache=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
_inverted_registry=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str95=allocate([117,110,114,101,103,105,115,116,101,114,101,100,32,101,120,116,101,110,115,105,111,110,32,99,111,100,101,32,37,108,100,0] /* unregistered extensi */, "i8", ALLOC_NORMAL);
__str96=allocate([95,105,110,118,101,114,116,101,100,95,114,101,103,105,115,116,114,121,91,37,108,100,93,32,105,115,110,39,116,32,97,32,50,45,116,117,112,108,101,32,111,102,32,115,116,114,105,110,103,115,0] /* _inverted_registry[% */, "i8", ALLOC_NORMAL);
_append_str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
___setstate___str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str97=allocate([115,116,97,116,101,32,105,115,32,110,111,116,32,97,32,100,105,99,116,105,111,110,97,114,121,0] /* state is not a dicti */, "i8", ALLOC_NORMAL);
__str98=allocate([115,108,111,116,32,115,116,97,116,101,32,105,115,32,110,111,116,32,97,32,100,105,99,116,105,111,110,97,114,121,0] /* slot state is not a  */, "i8", ALLOC_NORMAL);
__str99=allocate([105,32,62,61,32,48,0] /* i >= 0\00 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___15142=allocate([108,111,97,100,95,112,114,111,116,111,0] /* load_proto\00 */, "i8", ALLOC_NORMAL);
__str100=allocate([117,110,115,117,112,112,111,114,116,101,100,32,112,105,99,107,108,101,32,112,114,111,116,111,99,111,108,58,32,37,100,0] /* unsupported pickle p */, "i8", ALLOC_NORMAL);
__str101=allocate([105,110,118,97,108,105,100,32,108,111,97,100,32,107,101,121,44,32,39,37,115,39,46,0] /* invalid load key, '% */, "i8", ALLOC_NORMAL);
__str102=allocate([99,0] /* c\00 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___15558=allocate([110,111,108,111,97,100,95,101,120,116,101,110,115,105,111,110,0] /* noload_extension\00 */, "i8", ALLOC_NORMAL);
__str103=allocate([108,111,97,100,0] /* load\00 */, "i8", ALLOC_NORMAL);
__str104=allocate([108,111,97,100,40,41,32,45,45,32,76,111,97,100,32,97,32,112,105,99,107,108,101,0] /* load() -- Load a pic */, "i8", ALLOC_NORMAL);
__str105=allocate([110,111,108,111,97,100,0] /* noload\00 */, "i8", ALLOC_NORMAL);
__str106=allocate([110,111,108,111,97,100,40,41,32,45,45,32,110,111,116,32,108,111,97,100,32,97,32,112,105,99,107,108,101,44,32,98,117,116,32,103,111,32,116,104,114,111,117,103,104,32,109,111,115,116,32,111,102,32,116,104,101,32,109,111,116,105,111,110,115,10,10,84,104,105,115,32,102,117,110,99,116,105,111,110,32,99,97,110,32,98,101,32,117,115,101,100,32,116,111,32,114,101,97,100,32,112,97,115,116,32,97,32,112,105,99,107,108,101,32,119,105,116,104,111,117,116,32,105,110,115,116,97,110,116,105,97,116,105,110,103,10,97,110,121,32,111,98,106,101,99,116,115,32,111,114,32,105,109,112,111,114,116,105,110,103,32,97,110,121,32,109,111,100,117,108,101,115,46,32,32,73,116,32,99,97,110,32,97,108,115,111,32,98,101,32,117,115,101,100,32,116,111,32,102,105,110,100,32,97,108,108,10,112,101,114,115,105,115,116,101,110,116,32,114,101,102,101,114,101,110,99,101,115,32,119,105,116,104,111,117,116,32,105,110,115,116,97,110,116,105,97,116,105,110,103,32,97,110,121,32,111,98,106,101,99,116,115,32,111,114,32,105,109,112,111,114,116,105,110,103,10,97,110,121,32,109,111,100,117,108,101,115,46,10,0] /* noload() -- not load */, "i8", ALLOC_NORMAL);
_Unpickler_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_readline_str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
_read_str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str107=allocate([97,114,103,117,109,101,110,116,32,109,117,115,116,32,104,97,118,101,32,39,114,101,97,100,39,32,97,110,100,32,39,114,101,97,100,108,105,110,101,39,32,97,116,116,114,105,98,117,116,101,115,0] /* argument must have ' */, "i8", ALLOC_NORMAL);
__str108=allocate([112,101,114,115,105,115,116,101,110,116,95,108,111,97,100,0] /* persistent_load\00 */, "i8", ALLOC_NORMAL);
__str109=allocate([102,105,110,100,95,103,108,111,98,97,108,0] /* find_global\00 */, "i8", ALLOC_NORMAL);
__str110=allocate([85,110,112,105,99,107,108,105,110,103,69,114,114,111,114,0] /* UnpicklingError\00 */, "i8", ALLOC_NORMAL);
__str111=allocate([79,79,124,105,0] /* OO|i\00 */, "i8", ALLOC_NORMAL);
_kwlist_16354=allocate(16, "i8*", ALLOC_NORMAL);
__str112=allocate([111,98,106,0] /* obj\00 */, "i8", ALLOC_NORMAL);
__str113=allocate([79,124,105,58,100,117,109,112,115,0] /* O|i:dumps\00 */, "i8", ALLOC_NORMAL);
_kwlist_16391=allocate(12, "i8*", ALLOC_NORMAL);
__str114=allocate([83,58,108,111,97,100,115,0] /* S:loads\00 */, "i8", ALLOC_NORMAL);
_Unpicklertype__doc__=allocate([79,98,106,101,99,116,115,32,116,104,97,116,32,107,110,111,119,32,104,111,119,32,116,111,32,117,110,112,105,99,107,108,101,0] /* Objects that know ho */, "i8", ALLOC_NORMAL);
__str115=allocate([99,80,105,99,107,108,101,46,85,110,112,105,99,107,108,101,114,0] /* cPickle.Unpickler\00 */, "i8", ALLOC_NORMAL);
_Unpicklertype=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str116=allocate([100,117,109,112,40,111,98,106,44,32,102,105,108,101,44,32,112,114,111,116,111,99,111,108,61,48,41,32,45,45,32,87,114,105,116,101,32,97,110,32,111,98,106,101,99,116,32,105,110,32,112,105,99,107,108,101,32,102,111,114,109,97,116,32,116,111,32,116,104,101,32,103,105,118,101,110,32,102,105,108,101,46,10,10,83,101,101,32,116,104,101,32,80,105,99,107,108,101,114,32,100,111,99,115,116,114,105,110,103,32,102,111,114,32,116,104,101,32,109,101,97,110,105,110,103,32,111,102,32,111,112,116,105,111,110,97,108,32,97,114,103,117,109,101,110,116,32,112,114,111,116,111,46,0] /* dump(obj, file, prot */, "i8", ALLOC_NORMAL);
__str117=allocate([100,117,109,112,115,0] /* dumps\00 */, "i8", ALLOC_NORMAL);
__str118=allocate([100,117,109,112,115,40,111,98,106,44,32,112,114,111,116,111,99,111,108,61,48,41,32,45,45,32,82,101,116,117,114,110,32,97,32,115,116,114,105,110,103,32,99,111,110,116,97,105,110,105,110,103,32,97,110,32,111,98,106,101,99,116,32,105,110,32,112,105,99,107,108,101,32,102,111,114,109,97,116,46,10,10,83,101,101,32,116,104,101,32,80,105,99,107,108,101,114,32,100,111,99,115,116,114,105,110,103,32,102,111,114,32,116,104,101,32,109,101,97,110,105,110,103,32,111,102,32,111,112,116,105,111,110,97,108,32,97,114,103,117,109,101,110,116,32,112,114,111,116,111,46,0] /* dumps(obj, protocol= */, "i8", ALLOC_NORMAL);
__str119=allocate([108,111,97,100,40,102,105,108,101,41,32,45,45,32,76,111,97,100,32,97,32,112,105,99,107,108,101,32,102,114,111,109,32,116,104,101,32,103,105,118,101,110,32,102,105,108,101,0] /* load(file) -- Load a */, "i8", ALLOC_NORMAL);
__str120=allocate([108,111,97,100,115,0] /* loads\00 */, "i8", ALLOC_NORMAL);
__str121=allocate([108,111,97,100,115,40,115,116,114,105,110,103,41,32,45,45,32,76,111,97,100,32,97,32,112,105,99,107,108,101,32,102,114,111,109,32,116,104,101,32,103,105,118,101,110,32,115,116,114,105,110,103,0] /* loads(string) -- Loa */, "i8", ALLOC_NORMAL);
__str122=allocate([80,105,99,107,108,101,114,0] /* Pickler\00 */, "i8", ALLOC_NORMAL);
__str123=allocate([80,105,99,107,108,101,114,40,102,105,108,101,44,32,112,114,111,116,111,99,111,108,61,48,41,32,45,45,32,67,114,101,97,116,101,32,97,32,112,105,99,107,108,101,114,46,10,10,84,104,105,115,32,116,97,107,101,115,32,97,32,102,105,108,101,45,108,105,107,101,32,111,98,106,101,99,116,32,102,111,114,32,119,114,105,116,105,110,103,32,97,32,112,105,99,107,108,101,32,100,97,116,97,32,115,116,114,101,97,109,46,10,84,104,101,32,111,112,116,105,111,110,97,108,32,112,114,111,116,111,32,97,114,103,117,109,101,110,116,32,116,101,108,108,115,32,116,104,101,32,112,105,99,107,108,101,114,32,116,111,32,117,115,101,32,116,104,101,32,103,105,118,101,110,10,112,114,111,116,111,99,111,108,59,32,115,117,112,112,111,114,116,101,100,32,112,114,111,116,111,99,111,108,115,32,97,114,101,32,48,44,32,49,44,32,50,46,32,32,84,104,101,32,100,101,102,97,117,108,116,10,112,114,111,116,111,99,111,108,32,105,115,32,48,44,32,116,111,32,98,101,32,98,97,99,107,119,97,114,100,115,32,99,111,109,112,97,116,105,98,108,101,46,32,32,40,80,114,111,116,111,99,111,108,32,48,32,105,115,32,116,104,101,10,111,110,108,121,32,112,114,111,116,111,99,111,108,32,116,104,97,116,32,99,97,110,32,98,101,32,119,114,105,116,116,101,110,32,116,111,32,97,32,102,105,108,101,32,111,112,101,110,101,100,32,105,110,32,116,101,120,116,10,109,111,100,101,32,97,110,100,32,114,101,97,100,32,98,97,99,107,32,115,117,99,99,101,115,115,102,117,108,108,121,46,32,32,87,104,101,110,32,117,115,105,110,103,32,97,32,112,114,111,116,111,99,111,108,32,104,105,103,104,101,114,10,116,104,97,110,32,48,44,32,109,97,107,101,32,115,117,114,101,32,116,104,101,32,102,105,108,101,32,105,115,32,111,112,101,110,101,100,32,105,110,32,98,105,110,97,114,121,32,109,111,100,101,44,32,98,111,116,104,32,119,104,101,110,10,112,105,99,107,108,105,110,103,32,97,110,100,32,117,110,112,105,99,107,108,105,110,103,46,41,10,10,80,114,111,116,111,99,111,108,32,49,32,105,115,32,109,111,114,101,32,101,102,102,105,99,105,101,110,116,32,116,104,97,110,32,112,114,111,116,111,99,111,108,32,48,59,32,112,114,111,116,111,99,111,108,32,50,32,105,115,10,109,111,114,101,32,101,102,102,105,99,105,101,110,116,32,116,104,97,110,32,112,114,111,116,111,99,111,108,32,49,46,10,10,83,112,101,99,105,102,121,105,110,103,32,97,32,110,101,103,97,116,105,118,101,32,112,114,111,116,111,99,111,108,32,118,101,114,115,105,111,110,32,115,101,108,101,99,116,115,32,116,104,101,32,104,105,103,104,101,115,116,10,112,114,111,116,111,99,111,108,32,118,101,114,115,105,111,110,32,115,117,112,112,111,114,116,101,100,46,32,32,84,104,101,32,104,105,103,104,101,114,32,116,104,101,32,112,114,111,116,111,99,111,108,32,117,115,101,100,44,32,116,104,101,10,109,111,114,101,32,114,101,99,101,110,116,32,116,104,101,32,118,101,114,115,105,111,110,32,111,102,32,80,121,116,104,111,110,32,110,101,101,100,101,100,32,116,111,32,114,101,97,100,32,116,104,101,32,112,105,99,107,108,101,10,112,114,111,100,117,99,101,100,46,10,10,84,104,101,32,102,105,108,101,32,112,97,114,97,109,101,116,101,114,32,109,117,115,116,32,104,97,118,101,32,97,32,119,114,105,116,101,40,41,32,109,101,116,104,111,100,32,116,104,97,116,32,97,99,99,101,112,116,115,32,97,32,115,105,110,103,108,101,10,115,116,114,105,110,103,32,97,114,103,117,109,101,110,116,46,32,32,73,116,32,99,97,110,32,116,104,117,115,32,98,101,32,97,110,32,111,112,101,110,32,102,105,108,101,32,111,98,106,101,99,116,44,32,97,32,83,116,114,105,110,103,73,79,10,111,98,106,101,99,116,44,32,111,114,32,97,110,121,32,111,116,104,101,114,32,99,117,115,116,111,109,32,111,98,106,101,99,116,32,116,104,97,116,32,109,101,101,116,115,32,116,104,105,115,32,105,110,116,101,114,102,97,99,101,46,10,0] /* Pickler(file, protoc */, "i8", ALLOC_NORMAL);
__str124=allocate([85,110,112,105,99,107,108,101,114,0] /* Unpickler\00 */, "i8", ALLOC_NORMAL);
__str125=allocate([85,110,112,105,99,107,108,101,114,40,102,105,108,101,41,32,45,45,32,67,114,101,97,116,101,32,97,110,32,117,110,112,105,99,107,108,101,114,46,0] /* Unpickler(file) -- C */, "i8", ALLOC_NORMAL);
_cPickle_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str126=allocate([95,95,99,108,97,115,115,95,95,0] /* __class__\00 */, "i8", ALLOC_NORMAL);
__str127=allocate([95,95,103,101,116,105,110,105,116,97,114,103,115,95,95,0] /* __getinitargs__\00 */, "i8", ALLOC_NORMAL);
__str128=allocate([95,95,100,105,99,116,95,95,0] /* __dict__\00 */, "i8", ALLOC_NORMAL);
__str129=allocate([95,95,103,101,116,115,116,97,116,101,95,95,0] /* __getstate__\00 */, "i8", ALLOC_NORMAL);
__str130=allocate([95,95,115,101,116,115,116,97,116,101,95,95,0] /* __setstate__\00 */, "i8", ALLOC_NORMAL);
__str131=allocate([95,95,110,97,109,101,95,95,0] /* __name__\00 */, "i8", ALLOC_NORMAL);
__str132=allocate([95,95,109,97,105,110,95,95,0] /* __main__\00 */, "i8", ALLOC_NORMAL);
__str133=allocate([95,95,114,101,100,117,99,101,95,95,0] /* __reduce__\00 */, "i8", ALLOC_NORMAL);
__str134=allocate([95,95,114,101,100,117,99,101,95,101,120,95,95,0] /* __reduce_ex__\00 */, "i8", ALLOC_NORMAL);
__str135=allocate([119,114,105,116,101,0] /* write\00 */, "i8", ALLOC_NORMAL);
__str136=allocate([97,112,112,101,110,100,0] /* append\00 */, "i8", ALLOC_NORMAL);
__str137=allocate([114,101,97,100,0] /* read\00 */, "i8", ALLOC_NORMAL);
__str138=allocate([114,101,97,100,108,105,110,101,0] /* readline\00 */, "i8", ALLOC_NORMAL);
__str139=allocate([100,105,115,112,97,116,99,104,95,116,97,98,108,101,0] /* dispatch_table\00 */, "i8", ALLOC_NORMAL);
__str140=allocate([95,101,120,116,101,110,115,105,111,110,95,114,101,103,105,115,116,114,121,0] /* _extension_registry\ */, "i8", ALLOC_NORMAL);
__str141=allocate([95,105,110,118,101,114,116,101,100,95,114,101,103,105,115,116,114,121,0] /* _inverted_registry\0 */, "i8", ALLOC_NORMAL);
__str142=allocate([95,101,120,116,101,110,115,105,111,110,95,99,97,99,104,101,0] /* _extension_cache\00 */, "i8", ALLOC_NORMAL);
__str143=allocate([95,95,98,117,105,108,116,105,110,95,95,0] /* __builtin__\00 */, "i8", ALLOC_NORMAL);
__str144=allocate([95,95,98,117,105,108,116,105,110,115,95,95,0] /* __builtins__\00 */, "i8", ALLOC_NORMAL);
__str145=allocate([100,101,102,32,95,95,115,116,114,95,95,40,115,101,108,102,41,58,10,32,32,114,101,116,117,114,110,32,115,101,108,102,46,97,114,103,115,32,97,110,100,32,40,39,37,115,39,32,37,32,115,101,108,102,46,97,114,103,115,91,48,93,41,32,111,114,32,39,40,119,104,97,116,41,39,10,0] /* def __str__(self):\0 */, "i8", ALLOC_NORMAL);
__str146=allocate([99,80,105,99,107,108,101,46,80,105,99,107,108,101,69,114,114,111,114,0] /* cPickle.PickleError\ */, "i8", ALLOC_NORMAL);
__str147=allocate([99,80,105,99,107,108,101,46,80,105,99,107,108,105,110,103,69,114,114,111,114,0] /* cPickle.PicklingErro */, "i8", ALLOC_NORMAL);
__str148=allocate([100,101,102,32,95,95,115,116,114,95,95,40,115,101,108,102,41,58,10,32,32,97,61,115,101,108,102,46,97,114,103,115,10,32,32,97,61,97,32,97,110,100,32,116,121,112,101,40,97,91,48,93,41,32,111,114,32,39,40,119,104,97,116,41,39,10,32,32,114,101,116,117,114,110,32,39,67,97,110,110,111,116,32,112,105,99,107,108,101,32,37,115,32,111,98,106,101,99,116,115,39,32,37,32,97,10,0] /* def __str__(self):\0 */, "i8", ALLOC_NORMAL);
__str149=allocate([99,80,105,99,107,108,101,46,85,110,112,105,99,107,108,101,97,98,108,101,69,114,114,111,114,0] /* cPickle.Unpickleable */, "i8", ALLOC_NORMAL);
__str150=allocate([99,80,105,99,107,108,101,46,85,110,112,105,99,107,108,105,110,103,69,114,114,111,114,0] /* cPickle.UnpicklingEr */, "i8", ALLOC_NORMAL);
__str151=allocate([99,80,105,99,107,108,101,46,66,97,100,80,105,99,107,108,101,71,101,116,0] /* cPickle.BadPickleGet */, "i8", ALLOC_NORMAL);
__str152=allocate([80,105,99,107,108,101,69,114,114,111,114,0] /* PickleError\00 */, "i8", ALLOC_NORMAL);
__str153=allocate([85,110,112,105,99,107,108,101,97,98,108,101,69,114,114,111,114,0] /* UnpickleableError\00 */, "i8", ALLOC_NORMAL);
__str154=allocate([66,97,100,80,105,99,107,108,101,71,101,116,0] /* BadPickleGet\00 */, "i8", ALLOC_NORMAL);
__str155=allocate([99,83,116,114,105,110,103,73,79,46,99,83,116,114,105,110,103,73,79,95,67,65,80,73,0] /* cStringIO.cStringIO_ */, "i8", ALLOC_NORMAL);
__str156=allocate([49,46,55,49,0] /* 1.71\00 */, "i8", ALLOC_NORMAL);
__str157=allocate([99,80,105,99,107,108,101,0] /* cPickle\00 */, "i8", ALLOC_NORMAL);
__str158=allocate([95,95,118,101,114,115,105,111,110,95,95,0] /* __version__\00 */, "i8", ALLOC_NORMAL);
__str159=allocate([72,73,71,72,69,83,84,95,80,82,79,84,79,67,79,76,0] /* HIGHEST_PROTOCOL\00 */, "i8", ALLOC_NORMAL);
__str160=allocate([50,46,48,0] /* 2.0\00 */, "i8", ALLOC_NORMAL);
__str161=allocate([91,115,115,115,115,115,93,0] /* [sssss]\00 */, "i8", ALLOC_NORMAL);
__str162=allocate([49,46,48,0] /* 1.0\00 */, "i8", ALLOC_NORMAL);
__str163=allocate([49,46,49,0] /* 1.1\00 */, "i8", ALLOC_NORMAL);
__str164=allocate([49,46,50,0] /* 1.2\00 */, "i8", ALLOC_NORMAL);
__str165=allocate([49,46,51,0] /* 1.3\00 */, "i8", ALLOC_NORMAL);
__str166=allocate([102,111,114,109,97,116,95,118,101,114,115,105,111,110,0] /* format_version\00 */, "i8", ALLOC_NORMAL);
__str167=allocate([99,111,109,112,97,116,105,98,108,101,95,102,111,114,109,97,116,115,0] /* compatible_formats\0 */, "i8", ALLOC_NORMAL);
HEAP[_PdataType+12]=((__str)&4294967295);
HEAP[_PdataType+24]=(FUNCTION_TABLE_OFFSET + 24);
HEAP[_PdataType+88]=((__str1)&4294967295);
HEAP[_buf_9462]=((__str9)&4294967295);
HEAP[_buf_9462+4]=((__str10)&4294967295);
HEAP[_hexdigit_9788]=((__str13)&4294967295);
HEAP[_Pickler_methods]=((__str54)&4294967295);
HEAP[_Pickler_methods+4]=(FUNCTION_TABLE_OFFSET + 26);
HEAP[_Pickler_methods+12]=((__str55)&4294967295);
HEAP[_Pickler_methods+16]=((__str56)&4294967295);
HEAP[_Pickler_methods+20]=(FUNCTION_TABLE_OFFSET + 28);
HEAP[_Pickler_methods+28]=((__str57)&4294967295);
HEAP[_Pickler_methods+32]=((__str58)&4294967295);
HEAP[_Pickler_methods+36]=(FUNCTION_TABLE_OFFSET + 30);
HEAP[_Pickler_methods+44]=((__str59)&4294967295);
HEAP[_kwlist_12011]=((__str66)&4294967295);
HEAP[_kwlist_12011+4]=((__str67)&4294967295);
HEAP[_Pickler_members]=((__str72)&4294967295);
HEAP[_Pickler_members+20]=((__str73)&4294967295);
HEAP[_Pickler_getsets]=((__str68)&4294967295);
HEAP[_Pickler_getsets+4]=(FUNCTION_TABLE_OFFSET + 32);
HEAP[_Pickler_getsets+8]=(FUNCTION_TABLE_OFFSET + 34);
HEAP[_Pickler_getsets+20]=((__str74)&4294967295);
HEAP[_Pickler_getsets+28]=(FUNCTION_TABLE_OFFSET + 36);
HEAP[_Pickler_getsets+40]=((__str70)&4294967295);
HEAP[_Pickler_getsets+44]=(FUNCTION_TABLE_OFFSET + 38);
HEAP[_Pickler_getsets+48]=(FUNCTION_TABLE_OFFSET + 40);
HEAP[_Pickler_getsets+60]=((__str75)&4294967295);
HEAP[_Pickler_getsets+64]=(FUNCTION_TABLE_OFFSET + 42);
HEAP[_Picklertype+12]=((__str76)&4294967295);
HEAP[_Picklertype+24]=(FUNCTION_TABLE_OFFSET + 44);
HEAP[_Picklertype+72]=(FUNCTION_TABLE_OFFSET + 46);
HEAP[_Picklertype+76]=(FUNCTION_TABLE_OFFSET + 48);
HEAP[_Picklertype+88]=((_Picklertype__doc__)&4294967295);
HEAP[_Picklertype+92]=(FUNCTION_TABLE_OFFSET + 50);
HEAP[_Picklertype+96]=(FUNCTION_TABLE_OFFSET + 52);
HEAP[_Picklertype+116]=((_Pickler_methods)&4294967295);
HEAP[_Picklertype+120]=_Pickler_members;
HEAP[_Picklertype+124]=_Pickler_getsets;
HEAP[_Unpickler_methods]=((__str103)&4294967295);
HEAP[_Unpickler_methods+4]=(FUNCTION_TABLE_OFFSET + 54);
HEAP[_Unpickler_methods+12]=((__str104)&4294967295);
HEAP[_Unpickler_methods+16]=((__str105)&4294967295);
HEAP[_Unpickler_methods+20]=(FUNCTION_TABLE_OFFSET + 56);
HEAP[_Unpickler_methods+28]=((__str106)&4294967295);
HEAP[_kwlist_16354]=((__str112)&4294967295);
HEAP[_kwlist_16354+4]=((__str66)&4294967295);
HEAP[_kwlist_16354+8]=((__str67)&4294967295);
HEAP[_kwlist_16391]=((__str112)&4294967295);
HEAP[_kwlist_16391+4]=((__str67)&4294967295);
HEAP[_Unpicklertype+12]=((__str115)&4294967295);
HEAP[_Unpicklertype+24]=(FUNCTION_TABLE_OFFSET + 58);
HEAP[_Unpicklertype+32]=(FUNCTION_TABLE_OFFSET + 60);
HEAP[_Unpicklertype+36]=(FUNCTION_TABLE_OFFSET + 62);
HEAP[_Unpicklertype+88]=((_Unpicklertype__doc__)&4294967295);
HEAP[_Unpicklertype+92]=(FUNCTION_TABLE_OFFSET + 64);
HEAP[_Unpicklertype+96]=(FUNCTION_TABLE_OFFSET + 66);
HEAP[_cPickle_methods]=((__str54)&4294967295);
HEAP[_cPickle_methods+4]=(FUNCTION_TABLE_OFFSET + 68);
HEAP[_cPickle_methods+12]=((__str116)&4294967295);
HEAP[_cPickle_methods+16]=((__str117)&4294967295);
HEAP[_cPickle_methods+20]=(FUNCTION_TABLE_OFFSET + 70);
HEAP[_cPickle_methods+28]=((__str118)&4294967295);
HEAP[_cPickle_methods+32]=((__str103)&4294967295);
HEAP[_cPickle_methods+36]=(FUNCTION_TABLE_OFFSET + 72);
HEAP[_cPickle_methods+44]=((__str119)&4294967295);
HEAP[_cPickle_methods+48]=((__str120)&4294967295);
HEAP[_cPickle_methods+52]=(FUNCTION_TABLE_OFFSET + 74);
HEAP[_cPickle_methods+60]=((__str121)&4294967295);
HEAP[_cPickle_methods+64]=((__str122)&4294967295);
HEAP[_cPickle_methods+68]=(FUNCTION_TABLE_OFFSET + 76);
HEAP[_cPickle_methods+76]=((__str123)&4294967295);
HEAP[_cPickle_methods+80]=((__str124)&4294967295);
HEAP[_cPickle_methods+84]=(FUNCTION_TABLE_OFFSET + 78);
HEAP[_cPickle_methods+92]=((__str125)&4294967295);

  __globalConstructor__();
}
Module['run'] = run;

// {{PRE_RUN_ADDITIONS}}

run();

// {{POST_RUN_ADDITIONS}}





  // {{MODULE_ADDITIONS}}

  return Module;
});

