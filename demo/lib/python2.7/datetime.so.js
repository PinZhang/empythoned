"use strict";

// Capture the output of this into a variable, if you want
(function(FUNCTION_TABLE_OFFSET) {
  var Module = {};
  var args = [];
  Module.arguments = [];

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime essentials
//========================================

var __globalConstructor__ = function globalConstructor() {
}

// === Body ===



var $0___SIZE = 80; // %0
  
var $1___SIZE = 20; // %1
  
var $2___SIZE = 48; // %2
  
var $3___SIZE = 16; // %3
  
var $4___SIZE = 156; // %4
  
var $5___SIZE = 196; // %5
  
var $6___SIZE = 80; // %6
  
var $7___SIZE = 20; // %7
  
var $8___SIZE = 240; // %8
  
var $9___SIZE = 156; // %9
  
var $10___SIZE = 96; // %10
  
var $11___SIZE = 120; // %11
  
var $12___SIZE = 144; // %12
  
var $13___SIZE = 320; // %13
  
var $14___SIZE = 80; // %14
  
var $15___SIZE = 8; // %15
  
var $16___SIZE = 192; // %16
  
var $struct_FILE___SIZE = 148; // %struct.FILE
  var $struct_FILE___FLATTENER = [0,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64,68,70,71,72,76,84,88,92,96,100,104,108];
var $struct_PyBufferProcs___SIZE = 24; // %struct.PyBufferProcs
  
var $struct_PyDateTime_CAPI___SIZE = 44; // %struct.PyDateTime_CAPI
  
var $struct_PyDateTime_Date___SIZE = 20; // %struct.PyDateTime_Date
  var $struct_PyDateTime_Date___FLATTENER = [0,4,8,12,13];
var $struct_PyDateTime_DateTime___SIZE = 28; // %struct.PyDateTime_DateTime
  var $struct_PyDateTime_DateTime___FLATTENER = [0,4,8,12,13,24];
var $struct_PyDateTime_Delta___SIZE = 24; // %struct.PyDateTime_Delta
  
var $struct_PyDateTime_TZInfo___SIZE = 8; // %struct.PyDateTime_TZInfo
  
var $struct_PyDateTime_Time___SIZE = 24; // %struct.PyDateTime_Time
  var $struct_PyDateTime_Time___FLATTENER = [0,4,8,12,13,20];
var $struct_PyGetSetDef___SIZE = 20; // %struct.PyGetSetDef
  
var $struct_PyIntObject___SIZE = 12; // %struct.PyIntObject
  
var $struct_PyMappingMethods___SIZE = 12; // %struct.PyMappingMethods
  
var $struct_PyMemberDef___SIZE = 20; // %struct.PyMemberDef
  
var $struct_PyMethodDef___SIZE = 16; // %struct.PyMethodDef
  
var $struct_PyNumberMethods___SIZE = 156; // %struct.PyNumberMethods
  
var $struct_PyObject___SIZE = 8; // %struct.PyObject
  
var $struct_PySequenceMethods___SIZE = 40; // %struct.PySequenceMethods
  
var $struct_PyStringObject___SIZE = 24; // %struct.PyStringObject
  
var $struct_PyStructSequence___SIZE = 16; // %struct.PyStructSequence
  
var $struct_PyStructSequence_Desc___SIZE = 16; // %struct.PyStructSequence_Desc
  
var $struct_PyStructSequence_Field___SIZE = 8; // %struct.PyStructSequence_Field
  
var $struct_PyTupleObject___SIZE = 16; // %struct.PyTupleObject
  
var $struct_PyUnicodeObject___SIZE = 24; // %struct.PyUnicodeObject
  
var $struct_PyVarObject___SIZE = 12; // %struct.PyVarObject
  
var $struct_Py_buffer___SIZE = 52; // %struct.Py_buffer
  var $struct_Py_buffer___FLATTENER = [0,4,8,12,16,20,24,28,32,36,40,48];
var $struct__IO_marker___SIZE = 12; // %struct._IO_marker
  
var $struct__PyDateTime_BaseTZInfo___SIZE = 16; // %struct._PyDateTime_BaseTZInfo
  
var $struct__typeobject___SIZE = 196; // %struct._typeobject
  
var $struct_fd_set___SIZE = 128; // %struct.fd_set
  
var $struct_timeb___SIZE = 12; // %struct.timeb
  var $struct_timeb___FLATTENER = [0,4,6,8];
var $struct_timeval___SIZE = 8; // %struct.timeval
  
var $struct_timezone___SIZE = 8; // %struct.timezone
  
var $struct_tm___SIZE = 44; // %struct.tm
  
var __str;
var __str1;
var ___PRETTY_FUNCTION___8440;
var __str2;
var __days_in_month;
var __days_before_month;
var __str3;
var ___PRETTY_FUNCTION___8488;
var __str4;
var ___PRETTY_FUNCTION___8505;
var __str5;
var ___PRETTY_FUNCTION___8522;
var __str6;
var __str7;
var ___PRETTY_FUNCTION___8550;
var __str8;
var __str9;
var __str10;
var __str11;
var _PyExc_OverflowError;
var __str12;
var _PyExc_ValueError;
var __str13;
var __str14;
var __str15;
var __str16;
var __str17;
var __str18;
var __str19;
var __str20;
var ___PRETTY_FUNCTION___8694;
var __str21;
var __str22;
var __str23;
var __str24;
var ___PRETTY_FUNCTION___8725;
var __str25;
var __str26;
var ___PRETTY_FUNCTION___8752;
var __str27;
var __str28;
var __str29;
var __Py_NoneStruct;
var __str30;
var ___PRETTY_FUNCTION___8976;
var __str31;
var _PyExc_TypeError;
var __str32;
var __str33;
var ___PRETTY_FUNCTION___9023;
var __str34;
var __str35;
var __str36;
var ___PRETTY_FUNCTION___9075;
var __str37;
var __str38;
var __str39;
var __str40;
var __str41;
var __str42;
var __str43;
var ___PRETTY_FUNCTION___9150;
var __str44;
var ___PRETTY_FUNCTION___9191;
var __str45;
var __str46;
var ___PRETTY_FUNCTION___9239;
var __str47;
var ___PRETTY_FUNCTION___9306;
var __str48;
var __str49;
var __str50;
var __str51;
var _MonthNames_9355;
var __str52;
var __str53;
var __str54;
var __str55;
var __str56;
var __str57;
var __str58;
var __str59;
var __str60;
var __str61;
var __str62;
var __str63;
var _DayNames_9354;
var __str64;
var __str65;
var __str66;
var __str67;
var __str68;
var __str69;
var __str70;
var __str71;
var __str72;
var ___PRETTY_FUNCTION___9398;
var __str73;
var __str74;
var __str75;
var ___PRETTY_FUNCTION___9485;
var __str76;
var __str77;
var __str78;
var __str79;
var __str80;
var __str81;
var __str82;
var __str83;
var __str84;
var __str85;
var __str86;
var __str87;
var __str88;
var __str89;
var __str90;
var __str91;
var __str92;
var __str93;
var __str94;
var __str95;
var __str96;
var ___PRETTY_FUNCTION___9722;
var __str97;
var ___PRETTY_FUNCTION___9746;
var __str98;
var __str99;
var __str100;
var __str101;
var __str102;
var ___PRETTY_FUNCTION___9835;
var __Py_TrueStruct;
var __Py_ZeroStruct;
var __str103;
var _us_per_us;
var _us_per_ms;
var _us_per_second;
var _us_per_minute;
var _us_per_hour;
var _us_per_day;
var _us_per_week;
var _seconds_per_day;
var __str104;
var ___PRETTY_FUNCTION___9958;
var __str105;
var __str106;
var __str107;
var __Py_NotImplementedStruct;
var __str108;
var ___PRETTY_FUNCTION___10169;
var __str109;
var __str110;
var ___PRETTY_FUNCTION___10356;
var _PyFloat_Type;
var __str111;
var __str112;
var __str113;
var _keywords_10491;
var __str114;
var __str115;
var __str116;
var __str117;
var __str118;
var __str119;
var __str120;
var __str121;
var __str122;
var __str123;
var __str124;
var __str125;
var __str126;
var _PyExc_SystemError;
var __str127;
var __str128;
var __str129;
var __str130;
var __str131;
var __str132;
var _delta_members;
var __str133;
var __str134;
var __str135;
var __str136;
var _delta_methods;
var _delta_doc;
var _delta_as_number;
var __str137;
var _PyDateTime_DeltaType;
var __str138;
var __str139;
var __str140;
var _date_getset;
var _date_kws;
var __str141;
var __str142;
var __str143;
var __str144;
var __str145;
var __str146;
var __str147;
var _keywords_11164;
var __str148;
var __str149;
var __str150;
var __str151;
var __str152;
var __str153;
var __str154;
var __str155;
var __str156;
var __str157;
var __str158;
var __str159;
var __str160;
var __str161;
var __str162;
var __str163;
var __str164;
var __str165;
var __str166;
var __str167;
var __str168;
var __str169;
var __str170;
var __str171;
var __str172;
var __str173;
var __str174;
var __str175;
var _date_methods;
var _date_doc;
var _date_as_number;
var __str176;
var _PyDateTime_DateType;
var _PyExc_NotImplementedError;
var __str177;
var __str178;
var __str179;
var __str180;
var __str181;
var __str182;
var __str183;
var __str184;
var __str185;
var __str186;
var __str187;
var __str188;
var __str189;
var __str190;
var __str191;
var _tzinfo_methods;
var _tzinfo_doc;
var __str192;
var _PyDateTime_TZInfoType;
var __str193;
var __str194;
var __str195;
var __str196;
var _time_getset;
var _time_kws;
var __str197;
var __str198;
var __str199;
var __str200;
var _keywords_12042;
var __str201;
var __str202;
var ___PRETTY_FUNCTION___12043;
var __str203;
var ___PRETTY_FUNCTION___12084;
var __str204;
var __str205;
var __str206;
var __str207;
var ___PRETTY_FUNCTION___12202;
var __str208;
var __str209;
var __str210;
var __str211;
var __str212;
var __str213;
var __str214;
var __str215;
var __str216;
var __str217;
var _time_methods;
var _time_doc;
var _time_as_number;
var __str218;
var _PyDateTime_TimeType;
var _datetime_getset;
var _datetime_kws;
var __str219;
var __str220;
var __str221;
var __str222;
var _keywords_12654;
var __str223;
var __str224;
var _keywords_12701;
var __str225;
var __str226;
var __str227;
var _module_12751;
var __str228;
var __str229;
var __str230;
var __str231;
var _keywords_12871;
var __str232;
var __str233;
var ___PRETTY_FUNCTION___13012;
var ___PRETTY_FUNCTION___13120;
var __str234;
var __str235;
var __str236;
var __str237;
var __str238;
var __str239;
var __str240;
var _keywords_13363;
var __str241;
var __str242;
var ___PRETTY_FUNCTION___13367;
var ___PRETTY_FUNCTION___13435;
var __str243;
var ___PRETTY_FUNCTION___13531;
var __str244;
var __str245;
var _keywords_13698;
var __str246;
var __str247;
var __str248;
var __str249;
var __str250;
var __str251;
var __str252;
var __str253;
var __str254;
var __str255;
var __str256;
var __str257;
var __str258;
var __str259;
var __str260;
var __str261;
var __str262;
var __str263;
var __str264;
var __str265;
var __str266;
var __str267;
var _datetime_methods;
var _datetime_doc;
var _datetime_as_number;
var __str268;
var _PyDateTime_DateTimeType;
var _module_methods;
var _CAPI;
var __str269;
var __str270;
var __str271;
var __str272;
var __str273;
var __str274;
var __str275;
var __str276;
var __str277;
var __str278;
var __str279;
var ___PRETTY_FUNCTION___14028;
var __str280;
var __str281;
var __str282;
var _PyExc_IOError;
var _time_doc283;
var _clock_doc;
var __str1284;
var _sleep_doc;
var __str2285;
var __str3286;
var __str4287;
var __str5288;
var __str6289;
var __str7290;
var __str8291;
var __str9292;
var __str10293;
var __str11294;
var __str12295;
var __str13296;
var __str14297;
var __str15298;
var __str16299;
var __str17300;
var __str18301;
var __str19302;
var _struct_time_type_fields;
var _struct_time_type_desc;
var __str20303;
var __str21304;
var _StructTimeType;
var __str22305;
var _gmtime_doc;
var __str23306;
var _localtime_doc;
var __str24307;
var _moddict;
var __str25308;
var __str26309;
var __str27310;
var __str28311;
var __str29312;
var __str30313;
var __str31314;
var __str32315;
var __str33316;
var __str34317;
var __str35318;
var _strftime_doc;
var __str36319;
var __str37320;
var __str38321;
var _strptime_doc;
var __str39322;
var __str40323;
var _asctime_doc;
var __str41324;
var __str42325;
var _ctime_doc;
var __str43326;
var _mktime_doc;
var __str44327;
var _tzset_doc;
var __str45328;
var __str46329;
var __str47330;
var __str48331;
var __str49332;
var __str50333;
var __str51334;
var __str52335;
var __str53336;
var __str54337;
var __str55338;
var __str56339;
var __str57340;
var __str58341;
var _time_methods342;
var _module_doc;
var _Py_IgnoreEnvironmentFlag;
var __str59343;
var _initialized;
var __str60344;




































































































  function _divmod($x, $y, $r) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $x_addr=__stackBase__;
        var $y_addr=__stackBase__+4;
        var $r_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $quo=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$x_addr]=$x;
        HEAP[$y_addr]=$y;
        HEAP[$r_addr]=$r;
        var $1=HEAP[$y_addr]; //@line 133 "datetimemodule.c"
        var $2=((($1))|0) <= 0; //@line 133 "datetimemodule.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 133 "datetimemodule.c"
      case 1: // $bb
        ___assert_fail(((__str)&4294967295), ((__str1)&4294967295), 133, ((___PRETTY_FUNCTION___8440)&4294967295)); //@line 133 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 533"; //@line 133 "datetimemodule.c"
      case 2: // $bb1
        var $3=HEAP[$x_addr]; //@line 134 "datetimemodule.c"
        var $4=HEAP[$y_addr]; //@line 134 "datetimemodule.c"
        var $5=((((($3))|0)/((($4))|0))|0); //@line 134 "datetimemodule.c"
        HEAP[$quo]=$5; //@line 134 "datetimemodule.c"
        var $6=HEAP[$quo]; //@line 135 "datetimemodule.c"
        var $7=HEAP[$y_addr]; //@line 135 "datetimemodule.c"
        var $8=((($6) * ($7))&4294967295); //@line 135 "datetimemodule.c"
        var $9=HEAP[$x_addr]; //@line 135 "datetimemodule.c"
        var $10=((($9) - ($8))&4294967295); //@line 135 "datetimemodule.c"
        var $11=HEAP[$r_addr]; //@line 135 "datetimemodule.c"
        HEAP[$11]=$10; //@line 135 "datetimemodule.c"
        var $12=HEAP[$r_addr]; //@line 136 "datetimemodule.c"
        var $13=HEAP[$12]; //@line 136 "datetimemodule.c"
        var $14=((($13))|0) < 0; //@line 136 "datetimemodule.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 136 "datetimemodule.c"
      case 3: // $bb2
        var $15=HEAP[$quo]; //@line 137 "datetimemodule.c"
        var $16=((($15) - 1)&4294967295); //@line 137 "datetimemodule.c"
        HEAP[$quo]=$16; //@line 137 "datetimemodule.c"
        var $17=HEAP[$r_addr]; //@line 138 "datetimemodule.c"
        var $18=HEAP[$17]; //@line 138 "datetimemodule.c"
        var $19=HEAP[$y_addr]; //@line 138 "datetimemodule.c"
        var $20=((($18) + ($19))&4294967295); //@line 138 "datetimemodule.c"
        var $21=HEAP[$r_addr]; //@line 138 "datetimemodule.c"
        HEAP[$21]=$20; //@line 138 "datetimemodule.c"
        __label__ = 4; break; //@line 138 "datetimemodule.c"
      case 4: // $bb3
        var $22=HEAP[$r_addr]; //@line 140 "datetimemodule.c"
        var $23=HEAP[$22]; //@line 140 "datetimemodule.c"
        var $24=((($23))|0) < 0; //@line 140 "datetimemodule.c"
        if ($24) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 140 "datetimemodule.c"
      case 5: // $bb4
        var $25=HEAP[$r_addr]; //@line 140 "datetimemodule.c"
        var $26=HEAP[$25]; //@line 140 "datetimemodule.c"
        var $27=HEAP[$y_addr]; //@line 140 "datetimemodule.c"
        var $28=((($26))|0) >= ((($27))|0); //@line 140 "datetimemodule.c"
        if ($28) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 140 "datetimemodule.c"
      case 6: // $bb5
        ___assert_fail(((__str2)&4294967295), ((__str1)&4294967295), 140, ((___PRETTY_FUNCTION___8440)&4294967295)); //@line 140 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 579"; //@line 140 "datetimemodule.c"
      case 7: // $bb6
        var $29=HEAP[$quo]; //@line 141 "datetimemodule.c"
        HEAP[$0]=$29; //@line 141 "datetimemodule.c"
        var $30=HEAP[$0]; //@line 141 "datetimemodule.c"
        HEAP[$retval]=$30; //@line 141 "datetimemodule.c"
        __label__ = 8; break; //@line 141 "datetimemodule.c"
      case 8: // $return
        var $retval7=HEAP[$retval]; //@line 141 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 141 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _round_to_long($x) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $x_addr=__stackBase__;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$x_addr]=$x;
        var $1=HEAP[$x_addr]; //@line 150 "datetimemodule.c"
        var $2=($1) >= 0; //@line 150 "datetimemodule.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 150 "datetimemodule.c"
      case 1: // $bb
        var $3=HEAP[$x_addr]; //@line 151 "datetimemodule.c"
        var $4=($3) + 0.5; //@line 151 "datetimemodule.c"
        var $5=_floor($4); //@line 151 "datetimemodule.c"
        HEAP[$x_addr]=$5; //@line 151 "datetimemodule.c"
        __label__ = 3; break; //@line 151 "datetimemodule.c"
      case 2: // $bb1
        var $6=HEAP[$x_addr]; //@line 153 "datetimemodule.c"
        var $7=($6) - 0.5; //@line 153 "datetimemodule.c"
        var $8=_ceil($7); //@line 153 "datetimemodule.c"
        HEAP[$x_addr]=$8; //@line 153 "datetimemodule.c"
        __label__ = 3; break; //@line 153 "datetimemodule.c"
      case 3: // $bb2
        var $9=HEAP[$x_addr]; //@line 154 "datetimemodule.c"
        var $10=((($9))|0); //@line 154 "datetimemodule.c"
        HEAP[$0]=$10; //@line 154 "datetimemodule.c"
        var $11=HEAP[$0]; //@line 154 "datetimemodule.c"
        HEAP[$retval]=$11; //@line 154 "datetimemodule.c"
        __label__ = 4; break; //@line 154 "datetimemodule.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 154 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 154 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _is_leap($year) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $year_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $iftmp_0=__stackBase__+8;
        var $0=__stackBase__+12;
        var $ayear=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$year_addr]=$year;
        var $1=HEAP[$year_addr]; //@line 184 "datetimemodule.c"
        HEAP[$ayear]=$1; //@line 184 "datetimemodule.c"
        var $2=HEAP[$ayear]; //@line 185 "datetimemodule.c"
        var $3=($2) & 3; //@line 185 "datetimemodule.c"
        var $4=((($3))|0)!=0; //@line 185 "datetimemodule.c"
        if ($4) { __label__ = 4; break; } else { __label__ = 1; break; } //@line 185 "datetimemodule.c"
      case 1: // $bb
        var $5=HEAP[$ayear]; //@line 185 "datetimemodule.c"
        var $6=((($5))>>>0) % 100; //@line 185 "datetimemodule.c"
        var $7=((($6))|0)!=0; //@line 185 "datetimemodule.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 185 "datetimemodule.c"
      case 2: // $bb1
        var $8=HEAP[$ayear]; //@line 185 "datetimemodule.c"
        var $9=((($8))>>>0) % 400; //@line 185 "datetimemodule.c"
        var $10=((($9))|0)==0; //@line 185 "datetimemodule.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 185 "datetimemodule.c"
      case 3: // $bb2
        HEAP[$iftmp_0]=1; //@line 185 "datetimemodule.c"
        __label__ = 5; break; //@line 185 "datetimemodule.c"
      case 4: // $bb3
        HEAP[$iftmp_0]=0; //@line 185 "datetimemodule.c"
        __label__ = 5; break; //@line 185 "datetimemodule.c"
      case 5: // $bb4
        var $11=HEAP[$iftmp_0]; //@line 185 "datetimemodule.c"
        HEAP[$0]=$11; //@line 185 "datetimemodule.c"
        var $12=HEAP[$0]; //@line 185 "datetimemodule.c"
        HEAP[$retval]=$12; //@line 185 "datetimemodule.c"
        __label__ = 6; break; //@line 185 "datetimemodule.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 185 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 185 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _days_in_month($year, $month) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $year_addr=__stackBase__;
        var $month_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$year_addr]=$year;
        HEAP[$month_addr]=$month;
        var $1=HEAP[$month_addr]; //@line 192 "datetimemodule.c"
        var $2=((($1))|0) <= 0; //@line 192 "datetimemodule.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 192 "datetimemodule.c"
      case 1: // $bb
        ___assert_fail(((__str3)&4294967295), ((__str1)&4294967295), 192, ((___PRETTY_FUNCTION___8488)&4294967295)); //@line 192 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 714"; //@line 192 "datetimemodule.c"
      case 2: // $bb1
        var $3=HEAP[$month_addr]; //@line 193 "datetimemodule.c"
        var $4=((($3))|0) > 12; //@line 193 "datetimemodule.c"
        if ($4) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 193 "datetimemodule.c"
      case 3: // $bb2
        ___assert_fail(((__str4)&4294967295), ((__str1)&4294967295), 193, ((___PRETTY_FUNCTION___8488)&4294967295)); //@line 193 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 723"; //@line 193 "datetimemodule.c"
      case 4: // $bb3
        var $5=HEAP[$month_addr]; //@line 194 "datetimemodule.c"
        var $6=((($5))|0)!=2; //@line 194 "datetimemodule.c"
        if ($6) { __label__ = 7; break; } else { __label__ = 5; break; } //@line 194 "datetimemodule.c"
      case 5: // $bb4
        var $7=HEAP[$year_addr]; //@line 194 "datetimemodule.c"
        var $8=_is_leap($7); //@line 194 "datetimemodule.c"
        var $9=((($8))|0)==0; //@line 194 "datetimemodule.c"
        if ($9) { __label__ = 7; break; } else { __label__ = 6; break; } //@line 194 "datetimemodule.c"
      case 6: // $bb5
        HEAP[$0]=29; //@line 195 "datetimemodule.c"
        __label__ = 8; break; //@line 195 "datetimemodule.c"
      case 7: // $bb6
        var $10=HEAP[$month_addr]; //@line 197 "datetimemodule.c"
        var $11=((__days_in_month+$10*4)&4294967295); //@line 197 "datetimemodule.c"
        var $12=HEAP[$11]; //@line 197 "datetimemodule.c"
        HEAP[$0]=$12; //@line 197 "datetimemodule.c"
        __label__ = 8; break; //@line 197 "datetimemodule.c"
      case 8: // $bb7
        var $13=HEAP[$0]; //@line 195 "datetimemodule.c"
        HEAP[$retval]=$13; //@line 195 "datetimemodule.c"
        __label__ = 9; break; //@line 195 "datetimemodule.c"
      case 9: // $return
        var $retval8=HEAP[$retval]; //@line 195 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval8; //@line 195 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _days_before_month($year, $month) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $year_addr=__stackBase__;
        var $month_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $days=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$year_addr]=$year;
        HEAP[$month_addr]=$month;
        var $1=HEAP[$month_addr]; //@line 206 "datetimemodule.c"
        var $2=((($1))|0) <= 0; //@line 206 "datetimemodule.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 206 "datetimemodule.c"
      case 1: // $bb
        ___assert_fail(((__str3)&4294967295), ((__str1)&4294967295), 206, ((___PRETTY_FUNCTION___8505)&4294967295)); //@line 206 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 777"; //@line 206 "datetimemodule.c"
      case 2: // $bb1
        var $3=HEAP[$month_addr]; //@line 207 "datetimemodule.c"
        var $4=((($3))|0) > 12; //@line 207 "datetimemodule.c"
        if ($4) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 207 "datetimemodule.c"
      case 3: // $bb2
        ___assert_fail(((__str4)&4294967295), ((__str1)&4294967295), 207, ((___PRETTY_FUNCTION___8505)&4294967295)); //@line 207 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 786"; //@line 207 "datetimemodule.c"
      case 4: // $bb3
        var $5=HEAP[$month_addr]; //@line 208 "datetimemodule.c"
        var $6=((__days_before_month+$5*4)&4294967295); //@line 208 "datetimemodule.c"
        var $7=HEAP[$6]; //@line 208 "datetimemodule.c"
        HEAP[$days]=$7; //@line 208 "datetimemodule.c"
        var $8=HEAP[$month_addr]; //@line 209 "datetimemodule.c"
        var $9=((($8))|0) > 2; //@line 209 "datetimemodule.c"
        if ($9) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 209 "datetimemodule.c"
      case 5: // $bb4
        var $10=HEAP[$year_addr]; //@line 209 "datetimemodule.c"
        var $11=_is_leap($10); //@line 209 "datetimemodule.c"
        var $12=((($11))|0)!=0; //@line 209 "datetimemodule.c"
        if ($12) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 209 "datetimemodule.c"
      case 6: // $bb5
        var $13=HEAP[$days]; //@line 210 "datetimemodule.c"
        var $14=((($13) + 1)&4294967295); //@line 210 "datetimemodule.c"
        HEAP[$days]=$14; //@line 210 "datetimemodule.c"
        __label__ = 7; break; //@line 210 "datetimemodule.c"
      case 7: // $bb6
        var $15=HEAP[$days]; //@line 211 "datetimemodule.c"
        HEAP[$0]=$15; //@line 211 "datetimemodule.c"
        var $16=HEAP[$0]; //@line 211 "datetimemodule.c"
        HEAP[$retval]=$16; //@line 211 "datetimemodule.c"
        __label__ = 8; break; //@line 211 "datetimemodule.c"
      case 8: // $return
        var $retval7=HEAP[$retval]; //@line 211 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 211 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _days_before_year($year) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $year_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $y=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$year_addr]=$year;
        var $1=HEAP[$year_addr]; //@line 220 "datetimemodule.c"
        var $2=((($1) - 1)&4294967295); //@line 220 "datetimemodule.c"
        HEAP[$y]=$2; //@line 220 "datetimemodule.c"
        var $3=HEAP[$year_addr]; //@line 226 "datetimemodule.c"
        var $4=((($3))|0) < 0; //@line 226 "datetimemodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 226 "datetimemodule.c"
      case 1: // $bb
        ___assert_fail(((__str5)&4294967295), ((__str1)&4294967295), 226, ((___PRETTY_FUNCTION___8522)&4294967295)); //@line 226 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 841"; //@line 226 "datetimemodule.c"
      case 2: // $bb1
        var $5=HEAP[$y]; //@line 227 "datetimemodule.c"
        var $6=((($5))|0) >= 0; //@line 227 "datetimemodule.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 227 "datetimemodule.c"
      case 3: // $bb2
        var $7=HEAP[$y]; //@line 228 "datetimemodule.c"
        var $8=((($7) * 365)&4294967295); //@line 228 "datetimemodule.c"
        var $9=HEAP[$y]; //@line 228 "datetimemodule.c"
        var $10=((((($9))|0)/4)|0); //@line 228 "datetimemodule.c"
        var $11=((($8) + ($10))&4294967295); //@line 228 "datetimemodule.c"
        var $12=HEAP[$y]; //@line 228 "datetimemodule.c"
        var $13=((((($12))|0)/100)|0); //@line 228 "datetimemodule.c"
        var $14=((($11) - ($13))&4294967295); //@line 228 "datetimemodule.c"
        var $15=HEAP[$y]; //@line 228 "datetimemodule.c"
        var $16=((((($15))|0)/400)|0); //@line 228 "datetimemodule.c"
        var $17=((($14) + ($16))&4294967295); //@line 228 "datetimemodule.c"
        HEAP[$0]=$17; //@line 228 "datetimemodule.c"
        __label__ = 7; break; //@line 228 "datetimemodule.c"
      case 4: // $bb3
        var $18=HEAP[$y]; //@line 230 "datetimemodule.c"
        var $19=((($18))|0)!=-1; //@line 230 "datetimemodule.c"
        if ($19) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 230 "datetimemodule.c"
      case 5: // $bb4
        ___assert_fail(((__str6)&4294967295), ((__str1)&4294967295), 230, ((___PRETTY_FUNCTION___8522)&4294967295)); //@line 230 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 870"; //@line 230 "datetimemodule.c"
      case 6: // $bb5
        HEAP[$0]=-366; //@line 231 "datetimemodule.c"
        __label__ = 7; break; //@line 231 "datetimemodule.c"
      case 7: // $bb6
        var $20=HEAP[$0]; //@line 228 "datetimemodule.c"
        HEAP[$retval]=$20; //@line 228 "datetimemodule.c"
        __label__ = 8; break; //@line 228 "datetimemodule.c"
      case 8: // $return
        var $retval7=HEAP[$retval]; //@line 228 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 228 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _ord_to_ymd($ordinal, $year, $month, $day) {
    var __stackBase__  = STACKTOP; STACKTOP += 52; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 52);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $ordinal_addr=__stackBase__;
        var $year_addr=__stackBase__+4;
        var $month_addr=__stackBase__+8;
        var $day_addr=__stackBase__+12;
        var $iftmp_4=__stackBase__+16;
        var $iftmp_3=__stackBase__+20;
        var $n=__stackBase__+24;
        var $n1=__stackBase__+28;
        var $n4=__stackBase__+32;
        var $n100=__stackBase__+36;
        var $n400=__stackBase__+40;
        var $leapyear=__stackBase__+44;
        var $preceding=__stackBase__+48;
        var $_alloca_point_=0;
        HEAP[$ordinal_addr]=$ordinal;
        HEAP[$year_addr]=$year;
        HEAP[$month_addr]=$month;
        HEAP[$day_addr]=$day;
        var $0=HEAP[$ordinal_addr]; //@line 270 "datetimemodule.c"
        var $1=((($0))|0) <= 0; //@line 270 "datetimemodule.c"
        if ($1) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 270 "datetimemodule.c"
      case 1: // $bb
        ___assert_fail(((__str7)&4294967295), ((__str1)&4294967295), 270, ((___PRETTY_FUNCTION___8550)&4294967295)); //@line 270 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 924"; //@line 270 "datetimemodule.c"
      case 2: // $bb1
        var $2=HEAP[$ordinal_addr]; //@line 271 "datetimemodule.c"
        var $3=((($2) - 1)&4294967295); //@line 271 "datetimemodule.c"
        HEAP[$ordinal_addr]=$3; //@line 271 "datetimemodule.c"
        var $4=HEAP[$ordinal_addr]; //@line 272 "datetimemodule.c"
        var $5=((((($4))|0)/146097)|0); //@line 272 "datetimemodule.c"
        HEAP[$n400]=$5; //@line 272 "datetimemodule.c"
        var $6=HEAP[$ordinal_addr]; //@line 273 "datetimemodule.c"
        var $7=((($6))|0) % 146097; //@line 273 "datetimemodule.c"
        HEAP[$n]=$7; //@line 273 "datetimemodule.c"
        var $8=HEAP[$n400]; //@line 274 "datetimemodule.c"
        var $9=((($8) * 400)&4294967295); //@line 274 "datetimemodule.c"
        var $10=((($9) + 1)&4294967295); //@line 274 "datetimemodule.c"
        var $11=HEAP[$year_addr]; //@line 274 "datetimemodule.c"
        HEAP[$11]=$10; //@line 274 "datetimemodule.c"
        var $12=HEAP[$n]; //@line 283 "datetimemodule.c"
        var $13=((((($12))|0)/36524)|0); //@line 283 "datetimemodule.c"
        HEAP[$n100]=$13; //@line 283 "datetimemodule.c"
        var $14=HEAP[$n]; //@line 284 "datetimemodule.c"
        var $15=((($14))|0) % 36524; //@line 284 "datetimemodule.c"
        HEAP[$n]=$15; //@line 284 "datetimemodule.c"
        var $16=HEAP[$n]; //@line 287 "datetimemodule.c"
        var $17=((((($16))|0)/1461)|0); //@line 287 "datetimemodule.c"
        HEAP[$n4]=$17; //@line 287 "datetimemodule.c"
        var $18=HEAP[$n]; //@line 288 "datetimemodule.c"
        var $19=((($18))|0) % 1461; //@line 288 "datetimemodule.c"
        HEAP[$n]=$19; //@line 288 "datetimemodule.c"
        var $20=HEAP[$n]; //@line 294 "datetimemodule.c"
        var $21=((((($20))|0)/365)|0); //@line 294 "datetimemodule.c"
        HEAP[$n1]=$21; //@line 294 "datetimemodule.c"
        var $22=HEAP[$n]; //@line 295 "datetimemodule.c"
        var $23=((($22))|0) % 365; //@line 295 "datetimemodule.c"
        HEAP[$n]=$23; //@line 295 "datetimemodule.c"
        var $24=HEAP[$year_addr]; //@line 297 "datetimemodule.c"
        var $25=HEAP[$24]; //@line 297 "datetimemodule.c"
        var $26=HEAP[$n100]; //@line 297 "datetimemodule.c"
        var $27=((($26) * 25)&4294967295); //@line 297 "datetimemodule.c"
        var $28=HEAP[$n4]; //@line 297 "datetimemodule.c"
        var $29=((($27) + ($28))&4294967295); //@line 297 "datetimemodule.c"
        var $30=((($29) * 4)&4294967295); //@line 297 "datetimemodule.c"
        var $31=HEAP[$n1]; //@line 297 "datetimemodule.c"
        var $32=((($30) + ($31))&4294967295); //@line 297 "datetimemodule.c"
        var $33=((($25) + ($32))&4294967295); //@line 297 "datetimemodule.c"
        var $34=HEAP[$year_addr]; //@line 297 "datetimemodule.c"
        HEAP[$34]=$33; //@line 297 "datetimemodule.c"
        var $35=HEAP[$n1]; //@line 298 "datetimemodule.c"
        var $36=((($35))|0)==4; //@line 298 "datetimemodule.c"
        if ($36) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 298 "datetimemodule.c"
      case 3: // $bb2
        var $37=HEAP[$n100]; //@line 298 "datetimemodule.c"
        var $38=((($37))|0)==4; //@line 298 "datetimemodule.c"
        if ($38) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 298 "datetimemodule.c"
      case 4: // $bb3
        var $39=HEAP[$n]; //@line 299 "datetimemodule.c"
        var $40=((($39))|0)!=0; //@line 299 "datetimemodule.c"
        if ($40) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 299 "datetimemodule.c"
      case 5: // $bb4
        ___assert_fail(((__str8)&4294967295), ((__str1)&4294967295), 299, ((___PRETTY_FUNCTION___8550)&4294967295)); //@line 299 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 987"; //@line 299 "datetimemodule.c"
      case 6: // $bb5
        var $41=HEAP[$year_addr]; //@line 300 "datetimemodule.c"
        var $42=HEAP[$41]; //@line 300 "datetimemodule.c"
        var $43=((($42) - 1)&4294967295); //@line 300 "datetimemodule.c"
        var $44=HEAP[$year_addr]; //@line 300 "datetimemodule.c"
        HEAP[$44]=$43; //@line 300 "datetimemodule.c"
        var $45=HEAP[$month_addr]; //@line 301 "datetimemodule.c"
        HEAP[$45]=12; //@line 301 "datetimemodule.c"
        var $46=HEAP[$day_addr]; //@line 302 "datetimemodule.c"
        HEAP[$46]=31; //@line 302 "datetimemodule.c"
        __label__ = 25; break; //@line 302 "datetimemodule.c"
      case 7: // $bb6
        var $47=HEAP[$n1]; //@line 310 "datetimemodule.c"
        var $48=((($47))|0)!=3; //@line 310 "datetimemodule.c"
        if ($48) { __label__ = 11; break; } else { __label__ = 8; break; } //@line 310 "datetimemodule.c"
      case 8: // $bb7
        var $49=HEAP[$n4]; //@line 310 "datetimemodule.c"
        var $50=((($49))|0)!=24; //@line 310 "datetimemodule.c"
        if ($50) { __label__ = 10; break; } else { __label__ = 9; break; } //@line 310 "datetimemodule.c"
      case 9: // $bb8
        var $51=HEAP[$n100]; //@line 310 "datetimemodule.c"
        var $52=((($51))|0)==3; //@line 310 "datetimemodule.c"
        if ($52) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 310 "datetimemodule.c"
      case 10: // $bb9
        HEAP[$iftmp_3]=1; //@line 310 "datetimemodule.c"
        __label__ = 12; break; //@line 310 "datetimemodule.c"
      case 11: // $bb10
        HEAP[$iftmp_3]=0; //@line 310 "datetimemodule.c"
        __label__ = 12; break; //@line 310 "datetimemodule.c"
      case 12: // $bb11
        var $53=HEAP[$iftmp_3]; //@line 310 "datetimemodule.c"
        HEAP[$leapyear]=$53; //@line 310 "datetimemodule.c"
        var $54=HEAP[$year_addr]; //@line 311 "datetimemodule.c"
        var $55=HEAP[$54]; //@line 311 "datetimemodule.c"
        var $56=_is_leap($55); //@line 311 "datetimemodule.c"
        var $57=HEAP[$leapyear]; //@line 311 "datetimemodule.c"
        var $58=((($56))|0)!=((($57))|0); //@line 311 "datetimemodule.c"
        if ($58) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 311 "datetimemodule.c"
      case 13: // $bb12
        ___assert_fail(((__str9)&4294967295), ((__str1)&4294967295), 311, ((___PRETTY_FUNCTION___8550)&4294967295)); //@line 311 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 1036"; //@line 311 "datetimemodule.c"
      case 14: // $bb13
        var $59=HEAP[$n]; //@line 312 "datetimemodule.c"
        var $60=((($59) + 50)&4294967295); //@line 312 "datetimemodule.c"
        var $61=((($60))|0) >> 5; //@line 312 "datetimemodule.c"
        var $62=HEAP[$month_addr]; //@line 312 "datetimemodule.c"
        HEAP[$62]=$61; //@line 312 "datetimemodule.c"
        var $63=HEAP[$month_addr]; //@line 313 "datetimemodule.c"
        var $64=HEAP[$63]; //@line 313 "datetimemodule.c"
        var $65=((__days_before_month+$64*4)&4294967295); //@line 313 "datetimemodule.c"
        var $66=HEAP[$65]; //@line 313 "datetimemodule.c"
        var $67=HEAP[$month_addr]; //@line 313 "datetimemodule.c"
        var $68=HEAP[$67]; //@line 313 "datetimemodule.c"
        var $69=((($68))|0) <= 2; //@line 313 "datetimemodule.c"
        if ($69) { __label__ = 17; break; } else { __label__ = 15; break; } //@line 313 "datetimemodule.c"
      case 15: // $bb14
        var $70=HEAP[$leapyear]; //@line 313 "datetimemodule.c"
        var $71=((($70))|0)==0; //@line 313 "datetimemodule.c"
        if ($71) { __label__ = 17; break; } else { __label__ = 16; break; } //@line 313 "datetimemodule.c"
      case 16: // $bb15
        HEAP[$iftmp_4]=1; //@line 313 "datetimemodule.c"
        __label__ = 18; break; //@line 313 "datetimemodule.c"
      case 17: // $bb16
        HEAP[$iftmp_4]=0; //@line 313 "datetimemodule.c"
        __label__ = 18; break; //@line 313 "datetimemodule.c"
      case 18: // $bb17
        var $72=HEAP[$iftmp_4]; //@line 313 "datetimemodule.c"
        var $73=((($66) + ($72))&4294967295); //@line 313 "datetimemodule.c"
        HEAP[$preceding]=$73; //@line 313 "datetimemodule.c"
        var $74=HEAP[$preceding]; //@line 314 "datetimemodule.c"
        var $75=HEAP[$n]; //@line 314 "datetimemodule.c"
        var $76=((($74))|0) > ((($75))|0); //@line 314 "datetimemodule.c"
        if ($76) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 314 "datetimemodule.c"
      case 19: // $bb18
        var $77=HEAP[$month_addr]; //@line 316 "datetimemodule.c"
        var $78=HEAP[$77]; //@line 316 "datetimemodule.c"
        var $79=((($78) - 1)&4294967295); //@line 316 "datetimemodule.c"
        var $80=HEAP[$month_addr]; //@line 316 "datetimemodule.c"
        HEAP[$80]=$79; //@line 316 "datetimemodule.c"
        var $81=HEAP[$month_addr]; //@line 317 "datetimemodule.c"
        var $82=HEAP[$81]; //@line 317 "datetimemodule.c"
        var $83=HEAP[$year_addr]; //@line 317 "datetimemodule.c"
        var $84=HEAP[$83]; //@line 317 "datetimemodule.c"
        var $85=_days_in_month($84, $82); //@line 317 "datetimemodule.c"
        var $86=HEAP[$preceding]; //@line 317 "datetimemodule.c"
        var $87=((($86) - ($85))&4294967295); //@line 317 "datetimemodule.c"
        HEAP[$preceding]=$87; //@line 317 "datetimemodule.c"
        __label__ = 20; break; //@line 317 "datetimemodule.c"
      case 20: // $bb19
        var $88=HEAP[$n]; //@line 319 "datetimemodule.c"
        var $89=HEAP[$preceding]; //@line 319 "datetimemodule.c"
        var $90=((($88) - ($89))&4294967295); //@line 319 "datetimemodule.c"
        HEAP[$n]=$90; //@line 319 "datetimemodule.c"
        var $91=HEAP[$n]; //@line 320 "datetimemodule.c"
        var $92=((($91))|0) < 0; //@line 320 "datetimemodule.c"
        if ($92) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 320 "datetimemodule.c"
      case 21: // $bb20
        ___assert_fail(((__str10)&4294967295), ((__str1)&4294967295), 320, ((___PRETTY_FUNCTION___8550)&4294967295)); //@line 320 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 1102"; //@line 320 "datetimemodule.c"
      case 22: // $bb21
        var $93=HEAP[$month_addr]; //@line 321 "datetimemodule.c"
        var $94=HEAP[$93]; //@line 321 "datetimemodule.c"
        var $95=HEAP[$year_addr]; //@line 321 "datetimemodule.c"
        var $96=HEAP[$95]; //@line 321 "datetimemodule.c"
        var $97=_days_in_month($96, $94); //@line 321 "datetimemodule.c"
        var $98=HEAP[$n]; //@line 321 "datetimemodule.c"
        var $99=((($97))|0) <= ((($98))|0); //@line 321 "datetimemodule.c"
        if ($99) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 321 "datetimemodule.c"
      case 23: // $bb22
        ___assert_fail(((__str11)&4294967295), ((__str1)&4294967295), 321, ((___PRETTY_FUNCTION___8550)&4294967295)); //@line 321 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 1116"; //@line 321 "datetimemodule.c"
      case 24: // $bb23
        var $100=HEAP[$n]; //@line 323 "datetimemodule.c"
        var $101=((($100) + 1)&4294967295); //@line 323 "datetimemodule.c"
        var $102=HEAP[$day_addr]; //@line 323 "datetimemodule.c"
        HEAP[$102]=$101; //@line 323 "datetimemodule.c"
        __label__ = 25; break; //@line 323 "datetimemodule.c"
      case 25: // $bb24
        __label__ = 26; break; //@line 303 "datetimemodule.c"
      case 26: // $return
        STACKTOP = __stackBase__;
        return; //@line 303 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _ymd_to_ord($year, $month, $day) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $year_addr=__stackBase__;
        var $month_addr=__stackBase__+4;
        var $day_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$year_addr]=$year;
        HEAP[$month_addr]=$month;
        HEAP[$day_addr]=$day;
        var $1=HEAP[$year_addr]; //@line 330 "datetimemodule.c"
        var $2=_days_before_year($1); //@line 330 "datetimemodule.c"
        var $3=HEAP[$year_addr]; //@line 330 "datetimemodule.c"
        var $4=HEAP[$month_addr]; //@line 330 "datetimemodule.c"
        var $5=_days_before_month($3, $4); //@line 330 "datetimemodule.c"
        var $6=((($2) + ($5))&4294967295); //@line 330 "datetimemodule.c"
        var $7=HEAP[$day_addr]; //@line 330 "datetimemodule.c"
        var $8=((($6) + ($7))&4294967295); //@line 330 "datetimemodule.c"
        HEAP[$0]=$8; //@line 330 "datetimemodule.c"
        var $9=HEAP[$0]; //@line 330 "datetimemodule.c"
        HEAP[$retval]=$9; //@line 330 "datetimemodule.c"
        __label__ = 1; break; //@line 330 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 330 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 330 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _weekday($year, $month, $day) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $year_addr=__stackBase__;
        var $month_addr=__stackBase__+4;
        var $day_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$year_addr]=$year;
        HEAP[$month_addr]=$month;
        HEAP[$day_addr]=$day;
        var $1=HEAP[$year_addr]; //@line 337 "datetimemodule.c"
        var $2=HEAP[$month_addr]; //@line 337 "datetimemodule.c"
        var $3=HEAP[$day_addr]; //@line 337 "datetimemodule.c"
        var $4=_ymd_to_ord($1, $2, $3); //@line 337 "datetimemodule.c"
        var $5=((($4) + 6)&4294967295); //@line 337 "datetimemodule.c"
        var $6=((($5))|0) % 7; //@line 337 "datetimemodule.c"
        HEAP[$0]=$6; //@line 337 "datetimemodule.c"
        var $7=HEAP[$0]; //@line 337 "datetimemodule.c"
        HEAP[$retval]=$7; //@line 337 "datetimemodule.c"
        __label__ = 1; break; //@line 337 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 337 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 337 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iso_week1_monday($year) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $year_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $first_day=__stackBase__+12;
        var $first_weekday=__stackBase__+16;
        var $week1_monday=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$year_addr]=$year;
        var $1=HEAP[$year_addr]; //@line 346 "datetimemodule.c"
        var $2=_ymd_to_ord($1, 1, 1); //@line 346 "datetimemodule.c"
        HEAP[$first_day]=$2; //@line 346 "datetimemodule.c"
        var $3=HEAP[$first_day]; //@line 348 "datetimemodule.c"
        var $4=((($3) + 6)&4294967295); //@line 348 "datetimemodule.c"
        var $5=((($4))|0) % 7; //@line 348 "datetimemodule.c"
        HEAP[$first_weekday]=$5; //@line 348 "datetimemodule.c"
        var $6=HEAP[$first_day]; //@line 350 "datetimemodule.c"
        var $7=HEAP[$first_weekday]; //@line 350 "datetimemodule.c"
        var $8=((($6) - ($7))&4294967295); //@line 350 "datetimemodule.c"
        HEAP[$week1_monday]=$8; //@line 350 "datetimemodule.c"
        var $9=HEAP[$first_weekday]; //@line 352 "datetimemodule.c"
        var $10=((($9))|0) > 3; //@line 352 "datetimemodule.c"
        if ($10) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 352 "datetimemodule.c"
      case 1: // $bb
        var $11=HEAP[$week1_monday]; //@line 353 "datetimemodule.c"
        var $12=((($11) + 7)&4294967295); //@line 353 "datetimemodule.c"
        HEAP[$week1_monday]=$12; //@line 353 "datetimemodule.c"
        __label__ = 2; break; //@line 353 "datetimemodule.c"
      case 2: // $bb1
        var $13=HEAP[$week1_monday]; //@line 354 "datetimemodule.c"
        HEAP[$0]=$13; //@line 354 "datetimemodule.c"
        var $14=HEAP[$0]; //@line 354 "datetimemodule.c"
        HEAP[$retval]=$14; //@line 354 "datetimemodule.c"
        __label__ = 3; break; //@line 354 "datetimemodule.c"
      case 3: // $return
        var $retval2=HEAP[$retval]; //@line 354 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval2; //@line 354 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _check_delta_day_range($days) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $days_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$days_addr]=$days;
        var $1=HEAP[$days_addr]; //@line 367 "datetimemodule.c"
        var $2=((($1))|0) >= -999999999; //@line 367 "datetimemodule.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 367 "datetimemodule.c"
      case 1: // $bb
        var $3=HEAP[$days_addr]; //@line 367 "datetimemodule.c"
        var $4=((($3))|0) <= 999999999; //@line 367 "datetimemodule.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 367 "datetimemodule.c"
      case 2: // $bb1
        HEAP[$0]=0; //@line 368 "datetimemodule.c"
        __label__ = 4; break; //@line 368 "datetimemodule.c"
      case 3: // $bb2
        var $5=HEAP[_PyExc_OverflowError]; //@line 369 "datetimemodule.c"
        var $6=HEAP[$days_addr]; //@line 369 "datetimemodule.c"
        var $7=_PyErr_Format($5, ((__str12)&4294967295), $6, 999999999); //@line 369 "datetimemodule.c"
        HEAP[$0]=-1; //@line 372 "datetimemodule.c"
        __label__ = 4; break; //@line 372 "datetimemodule.c"
      case 4: // $bb3
        var $8=HEAP[$0]; //@line 368 "datetimemodule.c"
        HEAP[$retval]=$8; //@line 368 "datetimemodule.c"
        __label__ = 5; break; //@line 368 "datetimemodule.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 368 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 368 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _check_date_args($year, $month, $day) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $year_addr=__stackBase__;
        var $month_addr=__stackBase__+4;
        var $day_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$year_addr]=$year;
        HEAP[$month_addr]=$month;
        HEAP[$day_addr]=$day;
        var $1=HEAP[$year_addr]; //@line 382 "datetimemodule.c"
        var $2=((($1))|0) <= 0; //@line 382 "datetimemodule.c"
        if ($2) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 382 "datetimemodule.c"
      case 1: // $bb
        var $3=HEAP[$year_addr]; //@line 382 "datetimemodule.c"
        var $4=((($3))|0) > 9999; //@line 382 "datetimemodule.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 382 "datetimemodule.c"
      case 2: // $bb1
        var $5=HEAP[_PyExc_ValueError]; //@line 383 "datetimemodule.c"
        _PyErr_SetString($5, ((__str13)&4294967295)); //@line 383 "datetimemodule.c"
        HEAP[$0]=-1; //@line 385 "datetimemodule.c"
        __label__ = 10; break; //@line 385 "datetimemodule.c"
      case 3: // $bb2
        var $6=HEAP[$month_addr]; //@line 387 "datetimemodule.c"
        var $7=((($6))|0) <= 0; //@line 387 "datetimemodule.c"
        if ($7) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 387 "datetimemodule.c"
      case 4: // $bb3
        var $8=HEAP[$month_addr]; //@line 387 "datetimemodule.c"
        var $9=((($8))|0) > 12; //@line 387 "datetimemodule.c"
        if ($9) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 387 "datetimemodule.c"
      case 5: // $bb4
        var $10=HEAP[_PyExc_ValueError]; //@line 388 "datetimemodule.c"
        _PyErr_SetString($10, ((__str14)&4294967295)); //@line 388 "datetimemodule.c"
        HEAP[$0]=-1; //@line 390 "datetimemodule.c"
        __label__ = 10; break; //@line 390 "datetimemodule.c"
      case 6: // $bb5
        var $11=HEAP[$day_addr]; //@line 392 "datetimemodule.c"
        var $12=((($11))|0) <= 0; //@line 392 "datetimemodule.c"
        if ($12) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 392 "datetimemodule.c"
      case 7: // $bb6
        var $13=HEAP[$year_addr]; //@line 392 "datetimemodule.c"
        var $14=HEAP[$month_addr]; //@line 392 "datetimemodule.c"
        var $15=_days_in_month($13, $14); //@line 392 "datetimemodule.c"
        var $16=HEAP[$day_addr]; //@line 392 "datetimemodule.c"
        var $17=((($15))|0) < ((($16))|0); //@line 392 "datetimemodule.c"
        if ($17) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 392 "datetimemodule.c"
      case 8: // $bb7
        var $18=HEAP[_PyExc_ValueError]; //@line 393 "datetimemodule.c"
        _PyErr_SetString($18, ((__str15)&4294967295)); //@line 393 "datetimemodule.c"
        HEAP[$0]=-1; //@line 395 "datetimemodule.c"
        __label__ = 10; break; //@line 395 "datetimemodule.c"
      case 9: // $bb8
        HEAP[$0]=0; //@line 397 "datetimemodule.c"
        __label__ = 10; break; //@line 397 "datetimemodule.c"
      case 10: // $bb9
        var $19=HEAP[$0]; //@line 385 "datetimemodule.c"
        HEAP[$retval]=$19; //@line 385 "datetimemodule.c"
        __label__ = 11; break; //@line 385 "datetimemodule.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 385 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 385 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _check_time_args($h, $m, $s, $us) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $h_addr=__stackBase__;
        var $m_addr=__stackBase__+4;
        var $s_addr=__stackBase__+8;
        var $us_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$h_addr]=$h;
        HEAP[$m_addr]=$m;
        HEAP[$s_addr]=$s;
        HEAP[$us_addr]=$us;
        var $1=HEAP[$h_addr]; //@line 406 "datetimemodule.c"
        var $2=((($1))|0) < 0; //@line 406 "datetimemodule.c"
        if ($2) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 406 "datetimemodule.c"
      case 1: // $bb
        var $3=HEAP[$h_addr]; //@line 406 "datetimemodule.c"
        var $4=((($3))|0) > 23; //@line 406 "datetimemodule.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 406 "datetimemodule.c"
      case 2: // $bb1
        var $5=HEAP[_PyExc_ValueError]; //@line 407 "datetimemodule.c"
        _PyErr_SetString($5, ((__str16)&4294967295)); //@line 407 "datetimemodule.c"
        HEAP[$0]=-1; //@line 409 "datetimemodule.c"
        __label__ = 13; break; //@line 409 "datetimemodule.c"
      case 3: // $bb2
        var $6=HEAP[$m_addr]; //@line 411 "datetimemodule.c"
        var $7=((($6))|0) < 0; //@line 411 "datetimemodule.c"
        if ($7) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 411 "datetimemodule.c"
      case 4: // $bb3
        var $8=HEAP[$m_addr]; //@line 411 "datetimemodule.c"
        var $9=((($8))|0) > 59; //@line 411 "datetimemodule.c"
        if ($9) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 411 "datetimemodule.c"
      case 5: // $bb4
        var $10=HEAP[_PyExc_ValueError]; //@line 412 "datetimemodule.c"
        _PyErr_SetString($10, ((__str17)&4294967295)); //@line 412 "datetimemodule.c"
        HEAP[$0]=-1; //@line 414 "datetimemodule.c"
        __label__ = 13; break; //@line 414 "datetimemodule.c"
      case 6: // $bb5
        var $11=HEAP[$s_addr]; //@line 416 "datetimemodule.c"
        var $12=((($11))|0) < 0; //@line 416 "datetimemodule.c"
        if ($12) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 416 "datetimemodule.c"
      case 7: // $bb6
        var $13=HEAP[$s_addr]; //@line 416 "datetimemodule.c"
        var $14=((($13))|0) > 59; //@line 416 "datetimemodule.c"
        if ($14) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 416 "datetimemodule.c"
      case 8: // $bb7
        var $15=HEAP[_PyExc_ValueError]; //@line 417 "datetimemodule.c"
        _PyErr_SetString($15, ((__str18)&4294967295)); //@line 417 "datetimemodule.c"
        HEAP[$0]=-1; //@line 419 "datetimemodule.c"
        __label__ = 13; break; //@line 419 "datetimemodule.c"
      case 9: // $bb8
        var $16=HEAP[$us_addr]; //@line 421 "datetimemodule.c"
        var $17=((($16))|0) < 0; //@line 421 "datetimemodule.c"
        if ($17) { __label__ = 11; break; } else { __label__ = 10; break; } //@line 421 "datetimemodule.c"
      case 10: // $bb9
        var $18=HEAP[$us_addr]; //@line 421 "datetimemodule.c"
        var $19=((($18))|0) > 999999; //@line 421 "datetimemodule.c"
        if ($19) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 421 "datetimemodule.c"
      case 11: // $bb10
        var $20=HEAP[_PyExc_ValueError]; //@line 422 "datetimemodule.c"
        _PyErr_SetString($20, ((__str19)&4294967295)); //@line 422 "datetimemodule.c"
        HEAP[$0]=-1; //@line 424 "datetimemodule.c"
        __label__ = 13; break; //@line 424 "datetimemodule.c"
      case 12: // $bb11
        HEAP[$0]=0; //@line 426 "datetimemodule.c"
        __label__ = 13; break; //@line 426 "datetimemodule.c"
      case 13: // $bb12
        var $21=HEAP[$0]; //@line 409 "datetimemodule.c"
        HEAP[$retval]=$21; //@line 409 "datetimemodule.c"
        __label__ = 14; break; //@line 409 "datetimemodule.c"
      case 14: // $return
        var $retval13=HEAP[$retval]; //@line 409 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 409 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normalize_pair($hi, $lo, $factor) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $hi_addr=__stackBase__;
        var $lo_addr=__stackBase__+4;
        var $factor_addr=__stackBase__+8;
        var $num_hi=__stackBase__+12;
        var $new_hi=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$hi_addr]=$hi;
        HEAP[$lo_addr]=$lo;
        HEAP[$factor_addr]=$factor;
        var $0=HEAP[$factor_addr]; //@line 442 "datetimemodule.c"
        var $1=((($0))|0) <= 0; //@line 442 "datetimemodule.c"
        if ($1) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 442 "datetimemodule.c"
      case 1: // $bb
        ___assert_fail(((__str20)&4294967295), ((__str1)&4294967295), 442, ((___PRETTY_FUNCTION___8694)&4294967295)); //@line 442 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 1484"; //@line 442 "datetimemodule.c"
      case 2: // $bb1
        var $2=HEAP[$lo_addr]; //@line 443 "datetimemodule.c"
        var $3=HEAP[$hi_addr]; //@line 443 "datetimemodule.c"
        var $4=($2)==($3); //@line 443 "datetimemodule.c"
        if ($4) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 443 "datetimemodule.c"
      case 3: // $bb2
        ___assert_fail(((__str21)&4294967295), ((__str1)&4294967295), 443, ((___PRETTY_FUNCTION___8694)&4294967295)); //@line 443 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 1494"; //@line 443 "datetimemodule.c"
      case 4: // $bb3
        var $5=HEAP[$lo_addr]; //@line 444 "datetimemodule.c"
        var $6=HEAP[$5]; //@line 444 "datetimemodule.c"
        var $7=((($6))|0) < 0; //@line 444 "datetimemodule.c"
        if ($7) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 444 "datetimemodule.c"
      case 5: // $bb4
        var $8=HEAP[$lo_addr]; //@line 444 "datetimemodule.c"
        var $9=HEAP[$8]; //@line 444 "datetimemodule.c"
        var $10=HEAP[$factor_addr]; //@line 444 "datetimemodule.c"
        var $11=((($9))|0) >= ((($10))|0); //@line 444 "datetimemodule.c"
        if ($11) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 444 "datetimemodule.c"
      case 6: // $bb5
        var $12=HEAP[$lo_addr]; //@line 445 "datetimemodule.c"
        var $13=HEAP[$12]; //@line 445 "datetimemodule.c"
        var $14=HEAP[$factor_addr]; //@line 445 "datetimemodule.c"
        var $15=HEAP[$lo_addr]; //@line 445 "datetimemodule.c"
        var $16=_divmod($13, $14, $15); //@line 445 "datetimemodule.c"
        HEAP[$num_hi]=$16; //@line 445 "datetimemodule.c"
        var $17=HEAP[$hi_addr]; //@line 446 "datetimemodule.c"
        var $18=HEAP[$17]; //@line 446 "datetimemodule.c"
        var $19=HEAP[$num_hi]; //@line 446 "datetimemodule.c"
        var $20=((($18) + ($19))&4294967295); //@line 446 "datetimemodule.c"
        HEAP[$new_hi]=$20; //@line 446 "datetimemodule.c"
        var $21=HEAP[$hi_addr]; //@line 447 "datetimemodule.c"
        var $22=HEAP[$21]; //@line 447 "datetimemodule.c"
        var $23=HEAP[$new_hi]; //@line 447 "datetimemodule.c"
        var $24=($22) ^ ($23); //@line 447 "datetimemodule.c"
        var $25=HEAP[$new_hi]; //@line 447 "datetimemodule.c"
        var $26=HEAP[$num_hi]; //@line 447 "datetimemodule.c"
        var $27=($25) ^ ($26); //@line 447 "datetimemodule.c"
        var $28=($24) & ($27); //@line 447 "datetimemodule.c"
        var $29=((($28))|0) < 0; //@line 447 "datetimemodule.c"
        if ($29) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 447 "datetimemodule.c"
      case 7: // $bb6
        ___assert_fail(((__str22)&4294967295), ((__str1)&4294967295), 447, ((___PRETTY_FUNCTION___8694)&4294967295)); //@line 447 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 1536"; //@line 447 "datetimemodule.c"
      case 8: // $bb7
        var $30=HEAP[$hi_addr]; //@line 448 "datetimemodule.c"
        var $31=HEAP[$new_hi]; //@line 448 "datetimemodule.c"
        HEAP[$30]=$31; //@line 448 "datetimemodule.c"
        __label__ = 9; break; //@line 448 "datetimemodule.c"
      case 9: // $bb8
        var $32=HEAP[$lo_addr]; //@line 450 "datetimemodule.c"
        var $33=HEAP[$32]; //@line 450 "datetimemodule.c"
        var $34=((($33))|0) < 0; //@line 450 "datetimemodule.c"
        if ($34) { __label__ = 11; break; } else { __label__ = 10; break; } //@line 450 "datetimemodule.c"
      case 10: // $bb9
        var $35=HEAP[$lo_addr]; //@line 450 "datetimemodule.c"
        var $36=HEAP[$35]; //@line 450 "datetimemodule.c"
        var $37=HEAP[$factor_addr]; //@line 450 "datetimemodule.c"
        var $38=((($36))|0) >= ((($37))|0); //@line 450 "datetimemodule.c"
        if ($38) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 450 "datetimemodule.c"
      case 11: // $bb10
        ___assert_fail(((__str23)&4294967295), ((__str1)&4294967295), 450, ((___PRETTY_FUNCTION___8694)&4294967295)); //@line 450 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 1559"; //@line 450 "datetimemodule.c"
      case 12: // $bb11
        __label__ = 13; break; //@line 451 "datetimemodule.c"
      case 13: // $return
        STACKTOP = __stackBase__;
        return; //@line 451 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normalize_d_s_us($d, $s, $us) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $d_addr=__stackBase__;
        var $s_addr=__stackBase__+4;
        var $us_addr=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$d_addr]=$d;
        HEAP[$s_addr]=$s;
        HEAP[$us_addr]=$us;
        var $0=HEAP[$us_addr]; //@line 462 "datetimemodule.c"
        var $1=HEAP[$0]; //@line 462 "datetimemodule.c"
        var $2=((($1))|0) < 0; //@line 462 "datetimemodule.c"
        if ($2) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 462 "datetimemodule.c"
      case 1: // $bb
        var $3=HEAP[$us_addr]; //@line 462 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 462 "datetimemodule.c"
        var $5=((($4))|0) > 999999; //@line 462 "datetimemodule.c"
        if ($5) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 462 "datetimemodule.c"
      case 2: // $bb1
        var $6=HEAP[$s_addr]; //@line 463 "datetimemodule.c"
        var $7=HEAP[$us_addr]; //@line 463 "datetimemodule.c"
        _normalize_pair($6, $7, 1000000); //@line 463 "datetimemodule.c"
        __label__ = 3; break; //@line 463 "datetimemodule.c"
      case 3: // $bb2
        var $8=HEAP[$s_addr]; //@line 469 "datetimemodule.c"
        var $9=HEAP[$8]; //@line 469 "datetimemodule.c"
        var $10=((($9))|0) < 0; //@line 469 "datetimemodule.c"
        if ($10) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 469 "datetimemodule.c"
      case 4: // $bb3
        var $11=HEAP[$s_addr]; //@line 469 "datetimemodule.c"
        var $12=HEAP[$11]; //@line 469 "datetimemodule.c"
        var $13=((($12))|0) > 86399; //@line 469 "datetimemodule.c"
        if ($13) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 469 "datetimemodule.c"
      case 5: // $bb4
        var $14=HEAP[$d_addr]; //@line 470 "datetimemodule.c"
        var $15=HEAP[$s_addr]; //@line 470 "datetimemodule.c"
        _normalize_pair($14, $15, 86400); //@line 470 "datetimemodule.c"
        __label__ = 6; break; //@line 470 "datetimemodule.c"
      case 6: // $bb5
        var $16=HEAP[$s_addr]; //@line 476 "datetimemodule.c"
        var $17=HEAP[$16]; //@line 476 "datetimemodule.c"
        var $18=((($17))|0) < 0; //@line 476 "datetimemodule.c"
        if ($18) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 476 "datetimemodule.c"
      case 7: // $bb6
        var $19=HEAP[$s_addr]; //@line 476 "datetimemodule.c"
        var $20=HEAP[$19]; //@line 476 "datetimemodule.c"
        var $21=((($20))|0) > 86399; //@line 476 "datetimemodule.c"
        if ($21) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 476 "datetimemodule.c"
      case 8: // $bb7
        ___assert_fail(((__str24)&4294967295), ((__str1)&4294967295), 476, ((___PRETTY_FUNCTION___8725)&4294967295)); //@line 476 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 1630"; //@line 476 "datetimemodule.c"
      case 9: // $bb8
        var $22=HEAP[$us_addr]; //@line 477 "datetimemodule.c"
        var $23=HEAP[$22]; //@line 477 "datetimemodule.c"
        var $24=((($23))|0) < 0; //@line 477 "datetimemodule.c"
        if ($24) { __label__ = 11; break; } else { __label__ = 10; break; } //@line 477 "datetimemodule.c"
      case 10: // $bb9
        var $25=HEAP[$us_addr]; //@line 477 "datetimemodule.c"
        var $26=HEAP[$25]; //@line 477 "datetimemodule.c"
        var $27=((($26))|0) > 999999; //@line 477 "datetimemodule.c"
        if ($27) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 477 "datetimemodule.c"
      case 11: // $bb10
        ___assert_fail(((__str25)&4294967295), ((__str1)&4294967295), 477, ((___PRETTY_FUNCTION___8725)&4294967295)); //@line 477 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 1646"; //@line 477 "datetimemodule.c"
      case 12: // $bb11
        __label__ = 13; break; //@line 478 "datetimemodule.c"
      case 13: // $return
        STACKTOP = __stackBase__;
        return; //@line 478 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normalize_y_m_d($y, $m, $d) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $y_addr=__stackBase__;
        var $m_addr=__stackBase__+4;
        var $d_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $dim=__stackBase__+20;
        var $ordinal=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$y_addr]=$y;
        HEAP[$m_addr]=$m;
        HEAP[$d_addr]=$d;
        var $1=HEAP[$m_addr]; //@line 497 "datetimemodule.c"
        var $2=HEAP[$1]; //@line 497 "datetimemodule.c"
        var $3=((($2))|0) <= 0; //@line 497 "datetimemodule.c"
        if ($3) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 497 "datetimemodule.c"
      case 1: // $bb
        var $4=HEAP[$m_addr]; //@line 497 "datetimemodule.c"
        var $5=HEAP[$4]; //@line 497 "datetimemodule.c"
        var $6=((($5))|0) > 12; //@line 497 "datetimemodule.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 497 "datetimemodule.c"
      case 2: // $bb1
        var $7=HEAP[$m_addr]; //@line 498 "datetimemodule.c"
        var $8=HEAP[$7]; //@line 498 "datetimemodule.c"
        var $9=((($8) - 1)&4294967295); //@line 498 "datetimemodule.c"
        var $10=HEAP[$m_addr]; //@line 498 "datetimemodule.c"
        HEAP[$10]=$9; //@line 498 "datetimemodule.c"
        var $11=HEAP[$y_addr]; //@line 499 "datetimemodule.c"
        var $12=HEAP[$m_addr]; //@line 499 "datetimemodule.c"
        _normalize_pair($11, $12, 12); //@line 499 "datetimemodule.c"
        var $13=HEAP[$m_addr]; //@line 500 "datetimemodule.c"
        var $14=HEAP[$13]; //@line 500 "datetimemodule.c"
        var $15=((($14) + 1)&4294967295); //@line 500 "datetimemodule.c"
        var $16=HEAP[$m_addr]; //@line 500 "datetimemodule.c"
        HEAP[$16]=$15; //@line 500 "datetimemodule.c"
        __label__ = 3; break; //@line 500 "datetimemodule.c"
      case 3: // $bb2
        var $17=HEAP[$m_addr]; //@line 505 "datetimemodule.c"
        var $18=HEAP[$17]; //@line 505 "datetimemodule.c"
        var $19=((($18))|0) <= 0; //@line 505 "datetimemodule.c"
        if ($19) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 505 "datetimemodule.c"
      case 4: // $bb3
        var $20=HEAP[$m_addr]; //@line 505 "datetimemodule.c"
        var $21=HEAP[$20]; //@line 505 "datetimemodule.c"
        var $22=((($21))|0) > 12; //@line 505 "datetimemodule.c"
        if ($22) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 505 "datetimemodule.c"
      case 5: // $bb4
        ___assert_fail(((__str26)&4294967295), ((__str1)&4294967295), 505, ((___PRETTY_FUNCTION___8752)&4294967295)); //@line 505 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 1714"; //@line 505 "datetimemodule.c"
      case 6: // $bb5
        var $23=HEAP[$m_addr]; //@line 512 "datetimemodule.c"
        var $24=HEAP[$23]; //@line 512 "datetimemodule.c"
        var $25=HEAP[$y_addr]; //@line 512 "datetimemodule.c"
        var $26=HEAP[$25]; //@line 512 "datetimemodule.c"
        var $27=_days_in_month($26, $24); //@line 512 "datetimemodule.c"
        HEAP[$dim]=$27; //@line 512 "datetimemodule.c"
        var $28=HEAP[$d_addr]; //@line 513 "datetimemodule.c"
        var $29=HEAP[$28]; //@line 513 "datetimemodule.c"
        var $30=((($29))|0) <= 0; //@line 513 "datetimemodule.c"
        if ($30) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 513 "datetimemodule.c"
      case 7: // $bb6
        var $31=HEAP[$d_addr]; //@line 513 "datetimemodule.c"
        var $32=HEAP[$31]; //@line 513 "datetimemodule.c"
        var $33=HEAP[$dim]; //@line 513 "datetimemodule.c"
        var $34=((($32))|0) > ((($33))|0); //@line 513 "datetimemodule.c"
        if ($34) { __label__ = 8; break; } else { __label__ = 20; break; } //@line 513 "datetimemodule.c"
      case 8: // $bb7
        var $35=HEAP[$d_addr]; //@line 518 "datetimemodule.c"
        var $36=HEAP[$35]; //@line 518 "datetimemodule.c"
        var $37=((($36))|0)==0; //@line 518 "datetimemodule.c"
        if ($37) { __label__ = 9; break; } else { __label__ = 13; break; } //@line 518 "datetimemodule.c"
      case 9: // $bb8
        var $38=HEAP[$m_addr]; //@line 519 "datetimemodule.c"
        var $39=HEAP[$38]; //@line 519 "datetimemodule.c"
        var $40=((($39) - 1)&4294967295); //@line 519 "datetimemodule.c"
        var $41=HEAP[$m_addr]; //@line 519 "datetimemodule.c"
        HEAP[$41]=$40; //@line 519 "datetimemodule.c"
        var $42=HEAP[$m_addr]; //@line 520 "datetimemodule.c"
        var $43=HEAP[$42]; //@line 520 "datetimemodule.c"
        var $44=((($43))|0) > 0; //@line 520 "datetimemodule.c"
        if ($44) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 520 "datetimemodule.c"
      case 10: // $bb9
        var $45=HEAP[$m_addr]; //@line 521 "datetimemodule.c"
        var $46=HEAP[$45]; //@line 521 "datetimemodule.c"
        var $47=HEAP[$y_addr]; //@line 521 "datetimemodule.c"
        var $48=HEAP[$47]; //@line 521 "datetimemodule.c"
        var $49=_days_in_month($48, $46); //@line 521 "datetimemodule.c"
        var $50=HEAP[$d_addr]; //@line 521 "datetimemodule.c"
        HEAP[$50]=$49; //@line 521 "datetimemodule.c"
        __label__ = 12; break; //@line 521 "datetimemodule.c"
      case 11: // $bb10
        var $51=HEAP[$y_addr]; //@line 523 "datetimemodule.c"
        var $52=HEAP[$51]; //@line 523 "datetimemodule.c"
        var $53=((($52) - 1)&4294967295); //@line 523 "datetimemodule.c"
        var $54=HEAP[$y_addr]; //@line 523 "datetimemodule.c"
        HEAP[$54]=$53; //@line 523 "datetimemodule.c"
        var $55=HEAP[$m_addr]; //@line 524 "datetimemodule.c"
        HEAP[$55]=12; //@line 524 "datetimemodule.c"
        var $56=HEAP[$d_addr]; //@line 525 "datetimemodule.c"
        HEAP[$56]=31; //@line 525 "datetimemodule.c"
        __label__ = 12; break; //@line 525 "datetimemodule.c"
      case 12: // $bb11
        __label__ = 20; break; //@line 525 "datetimemodule.c"
      case 13: // $bb12
        var $57=HEAP[$d_addr]; //@line 528 "datetimemodule.c"
        var $58=HEAP[$57]; //@line 528 "datetimemodule.c"
        var $59=HEAP[$dim]; //@line 528 "datetimemodule.c"
        var $60=((($59) + 1)&4294967295); //@line 528 "datetimemodule.c"
        var $61=((($58))|0)==((($60))|0); //@line 528 "datetimemodule.c"
        if ($61) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 528 "datetimemodule.c"
      case 14: // $bb13
        var $62=HEAP[$m_addr]; //@line 530 "datetimemodule.c"
        var $63=HEAP[$62]; //@line 530 "datetimemodule.c"
        var $64=((($63) + 1)&4294967295); //@line 530 "datetimemodule.c"
        var $65=HEAP[$m_addr]; //@line 530 "datetimemodule.c"
        HEAP[$65]=$64; //@line 530 "datetimemodule.c"
        var $66=HEAP[$d_addr]; //@line 531 "datetimemodule.c"
        HEAP[$66]=1; //@line 531 "datetimemodule.c"
        var $67=HEAP[$m_addr]; //@line 532 "datetimemodule.c"
        var $68=HEAP[$67]; //@line 532 "datetimemodule.c"
        var $69=((($68))|0) > 12; //@line 532 "datetimemodule.c"
        if ($69) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 532 "datetimemodule.c"
      case 15: // $bb14
        var $70=HEAP[$m_addr]; //@line 533 "datetimemodule.c"
        HEAP[$70]=1; //@line 533 "datetimemodule.c"
        var $71=HEAP[$y_addr]; //@line 534 "datetimemodule.c"
        var $72=HEAP[$71]; //@line 534 "datetimemodule.c"
        var $73=((($72) + 1)&4294967295); //@line 534 "datetimemodule.c"
        var $74=HEAP[$y_addr]; //@line 534 "datetimemodule.c"
        HEAP[$74]=$73; //@line 534 "datetimemodule.c"
        __label__ = 16; break; //@line 534 "datetimemodule.c"
      case 16: // $bb15
        __label__ = 20; break; //@line 534 "datetimemodule.c"
      case 17: // $bb16
        var $75=HEAP[$m_addr]; //@line 539 "datetimemodule.c"
        var $76=HEAP[$75]; //@line 539 "datetimemodule.c"
        var $77=HEAP[$y_addr]; //@line 539 "datetimemodule.c"
        var $78=HEAP[$77]; //@line 539 "datetimemodule.c"
        var $79=_ymd_to_ord($78, $76, 1); //@line 539 "datetimemodule.c"
        var $80=HEAP[$d_addr]; //@line 539 "datetimemodule.c"
        var $81=HEAP[$80]; //@line 539 "datetimemodule.c"
        var $82=((($79) + ($81))&4294967295); //@line 539 "datetimemodule.c"
        var $83=((($82) - 1)&4294967295); //@line 539 "datetimemodule.c"
        HEAP[$ordinal]=$83; //@line 539 "datetimemodule.c"
        var $84=HEAP[$ordinal]; //@line 540 "datetimemodule.c"
        var $85=((($84))|0) <= 0; //@line 540 "datetimemodule.c"
        if ($85) { __label__ = 27; break; } else { __label__ = 18; break; } //@line 540 "datetimemodule.c"
      case 18: // $bb17
        var $86=HEAP[$ordinal]; //@line 540 "datetimemodule.c"
        var $87=((($86))|0) > 3652059; //@line 540 "datetimemodule.c"
        if ($87) { __label__ = 27; break; } else { __label__ = 19; break; } //@line 540 "datetimemodule.c"
      case 19: // $bb18
        var $88=HEAP[$ordinal]; //@line 543 "datetimemodule.c"
        var $89=HEAP[$y_addr]; //@line 543 "datetimemodule.c"
        var $90=HEAP[$m_addr]; //@line 543 "datetimemodule.c"
        var $91=HEAP[$d_addr]; //@line 543 "datetimemodule.c"
        _ord_to_ymd($88, $89, $90, $91); //@line 543 "datetimemodule.c"
        HEAP[$0]=0; //@line 544 "datetimemodule.c"
        __label__ = 28; break; //@line 544 "datetimemodule.c"
      case 20: // $bb19
        var $92=HEAP[$m_addr]; //@line 548 "datetimemodule.c"
        var $93=HEAP[$92]; //@line 548 "datetimemodule.c"
        var $94=((($93))|0) <= 0; //@line 548 "datetimemodule.c"
        if ($94) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 548 "datetimemodule.c"
      case 21: // $bb20
        ___assert_fail(((__str27)&4294967295), ((__str1)&4294967295), 548, ((___PRETTY_FUNCTION___8752)&4294967295)); //@line 548 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 1849"; //@line 548 "datetimemodule.c"
      case 22: // $bb21
        var $95=HEAP[$d_addr]; //@line 549 "datetimemodule.c"
        var $96=HEAP[$95]; //@line 549 "datetimemodule.c"
        var $97=((($96))|0) <= 0; //@line 549 "datetimemodule.c"
        if ($97) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 549 "datetimemodule.c"
      case 23: // $bb22
        ___assert_fail(((__str28)&4294967295), ((__str1)&4294967295), 549, ((___PRETTY_FUNCTION___8752)&4294967295)); //@line 549 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 1859"; //@line 549 "datetimemodule.c"
      case 24: // $bb23
        var $98=HEAP[$y_addr]; //@line 550 "datetimemodule.c"
        var $99=HEAP[$98]; //@line 550 "datetimemodule.c"
        var $100=((($99))|0) > 0; //@line 550 "datetimemodule.c"
        if ($100) { __label__ = 25; break; } else { __label__ = 27; break; } //@line 550 "datetimemodule.c"
      case 25: // $bb24
        var $101=HEAP[$y_addr]; //@line 550 "datetimemodule.c"
        var $102=HEAP[$101]; //@line 550 "datetimemodule.c"
        var $103=((($102))|0) <= 9999; //@line 550 "datetimemodule.c"
        if ($103) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 550 "datetimemodule.c"
      case 26: // $bb25
        HEAP[$0]=0; //@line 551 "datetimemodule.c"
        __label__ = 28; break; //@line 551 "datetimemodule.c"
      case 27: // $error
        var $104=HEAP[_PyExc_OverflowError]; //@line 553 "datetimemodule.c"
        _PyErr_SetString($104, ((__str29)&4294967295)); //@line 553 "datetimemodule.c"
        HEAP[$0]=-1; //@line 555 "datetimemodule.c"
        __label__ = 28; break; //@line 555 "datetimemodule.c"
      case 28: // $bb26
        var $105=HEAP[$0]; //@line 544 "datetimemodule.c"
        HEAP[$retval]=$105; //@line 544 "datetimemodule.c"
        __label__ = 29; break; //@line 544 "datetimemodule.c"
      case 29: // $return
        var $retval27=HEAP[$retval]; //@line 544 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval27; //@line 544 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normalize_date($year, $month, $day) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $year_addr=__stackBase__;
        var $month_addr=__stackBase__+4;
        var $day_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$year_addr]=$year;
        HEAP[$month_addr]=$month;
        HEAP[$day_addr]=$day;
        var $1=HEAP[$year_addr]; //@line 566 "datetimemodule.c"
        var $2=HEAP[$month_addr]; //@line 566 "datetimemodule.c"
        var $3=HEAP[$day_addr]; //@line 566 "datetimemodule.c"
        var $4=_normalize_y_m_d($1, $2, $3); //@line 566 "datetimemodule.c"
        HEAP[$0]=$4; //@line 566 "datetimemodule.c"
        var $5=HEAP[$0]; //@line 566 "datetimemodule.c"
        HEAP[$retval]=$5; //@line 566 "datetimemodule.c"
        __label__ = 1; break; //@line 566 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 566 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 566 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _normalize_datetime($year, $month, $day, $hour, $minute, $second, $microsecond) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $year_addr=__stackBase__;
        var $month_addr=__stackBase__+4;
        var $day_addr=__stackBase__+8;
        var $hour_addr=__stackBase__+12;
        var $minute_addr=__stackBase__+16;
        var $second_addr=__stackBase__+20;
        var $microsecond_addr=__stackBase__+24;
        var $retval=__stackBase__+28;
        var $0=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$year_addr]=$year;
        HEAP[$month_addr]=$month;
        HEAP[$day_addr]=$day;
        HEAP[$hour_addr]=$hour;
        HEAP[$minute_addr]=$minute;
        HEAP[$second_addr]=$second;
        HEAP[$microsecond_addr]=$microsecond;
        var $1=HEAP[$second_addr]; //@line 577 "datetimemodule.c"
        var $2=HEAP[$microsecond_addr]; //@line 577 "datetimemodule.c"
        _normalize_pair($1, $2, 1000000); //@line 577 "datetimemodule.c"
        var $3=HEAP[$minute_addr]; //@line 578 "datetimemodule.c"
        var $4=HEAP[$second_addr]; //@line 578 "datetimemodule.c"
        _normalize_pair($3, $4, 60); //@line 578 "datetimemodule.c"
        var $5=HEAP[$hour_addr]; //@line 579 "datetimemodule.c"
        var $6=HEAP[$minute_addr]; //@line 579 "datetimemodule.c"
        _normalize_pair($5, $6, 60); //@line 579 "datetimemodule.c"
        var $7=HEAP[$day_addr]; //@line 580 "datetimemodule.c"
        var $8=HEAP[$hour_addr]; //@line 580 "datetimemodule.c"
        _normalize_pair($7, $8, 24); //@line 580 "datetimemodule.c"
        var $9=HEAP[$year_addr]; //@line 581 "datetimemodule.c"
        var $10=HEAP[$month_addr]; //@line 581 "datetimemodule.c"
        var $11=HEAP[$day_addr]; //@line 581 "datetimemodule.c"
        var $12=_normalize_date($9, $10, $11); //@line 581 "datetimemodule.c"
        HEAP[$0]=$12; //@line 581 "datetimemodule.c"
        var $13=HEAP[$0]; //@line 581 "datetimemodule.c"
        HEAP[$retval]=$13; //@line 581 "datetimemodule.c"
        __label__ = 1; break; //@line 581 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 581 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 581 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_alloc($type, $aware) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $type_addr=__stackBase__;
        var $aware_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $iftmp_14=__stackBase__+16;
        var $self=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$type_addr]=$type;
        HEAP[$aware_addr]=$aware;
        var $1=HEAP[$aware_addr]; //@line 610 "datetimemodule.c"
        var $2=((($1))|0)!=0; //@line 610 "datetimemodule.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 610 "datetimemodule.c"
      case 1: // $bb
        HEAP[$iftmp_14]=24; //@line 610 "datetimemodule.c"
        __label__ = 3; break; //@line 610 "datetimemodule.c"
      case 2: // $bb1
        HEAP[$iftmp_14]=20; //@line 610 "datetimemodule.c"
        __label__ = 3; break; //@line 610 "datetimemodule.c"
      case 3: // $bb2
        var $3=HEAP[$iftmp_14]; //@line 610 "datetimemodule.c"
        var $4=_malloc($3); //@line 610 "datetimemodule.c"
        var $5=$4; //@line 610 "datetimemodule.c"
        HEAP[$self]=$5; //@line 610 "datetimemodule.c"
        var $6=HEAP[$self]; //@line 614 "datetimemodule.c"
        var $7=($6)==0; //@line 614 "datetimemodule.c"
        if ($7) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 614 "datetimemodule.c"
      case 4: // $bb3
        var $8=_PyErr_NoMemory(); //@line 615 "datetimemodule.c"
        HEAP[$0]=$8; //@line 615 "datetimemodule.c"
        __label__ = 6; break; //@line 615 "datetimemodule.c"
      case 5: // $bb4
        var $9=HEAP[$self]; //@line 616 "datetimemodule.c"
        var $10=(($9+4)&4294967295); //@line 616 "datetimemodule.c"
        var $11=HEAP[$type_addr]; //@line 616 "datetimemodule.c"
        HEAP[$10]=$11; //@line 616 "datetimemodule.c"
        var $12=HEAP[$self]; //@line 616 "datetimemodule.c"
        var $13=(($12)&4294967295); //@line 616 "datetimemodule.c"
        HEAP[$13]=1; //@line 616 "datetimemodule.c"
        var $14=HEAP[$self]; //@line 617 "datetimemodule.c"
        HEAP[$0]=$14; //@line 617 "datetimemodule.c"
        __label__ = 6; break; //@line 617 "datetimemodule.c"
      case 6: // $bb5
        var $15=HEAP[$0]; //@line 615 "datetimemodule.c"
        HEAP[$retval]=$15; //@line 615 "datetimemodule.c"
        __label__ = 7; break; //@line 615 "datetimemodule.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 615 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 615 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_alloc($type, $aware) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $type_addr=__stackBase__;
        var $aware_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $iftmp_15=__stackBase__+16;
        var $self=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$type_addr]=$type;
        HEAP[$aware_addr]=$aware;
        var $1=HEAP[$aware_addr]; //@line 625 "datetimemodule.c"
        var $2=((($1))|0)!=0; //@line 625 "datetimemodule.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 625 "datetimemodule.c"
      case 1: // $bb
        HEAP[$iftmp_15]=28; //@line 625 "datetimemodule.c"
        __label__ = 3; break; //@line 625 "datetimemodule.c"
      case 2: // $bb1
        HEAP[$iftmp_15]=24; //@line 625 "datetimemodule.c"
        __label__ = 3; break; //@line 625 "datetimemodule.c"
      case 3: // $bb2
        var $3=HEAP[$iftmp_15]; //@line 625 "datetimemodule.c"
        var $4=_malloc($3); //@line 625 "datetimemodule.c"
        var $5=$4; //@line 625 "datetimemodule.c"
        HEAP[$self]=$5; //@line 625 "datetimemodule.c"
        var $6=HEAP[$self]; //@line 629 "datetimemodule.c"
        var $7=($6)==0; //@line 629 "datetimemodule.c"
        if ($7) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 629 "datetimemodule.c"
      case 4: // $bb3
        var $8=_PyErr_NoMemory(); //@line 630 "datetimemodule.c"
        HEAP[$0]=$8; //@line 630 "datetimemodule.c"
        __label__ = 6; break; //@line 630 "datetimemodule.c"
      case 5: // $bb4
        var $9=HEAP[$self]; //@line 631 "datetimemodule.c"
        var $10=(($9+4)&4294967295); //@line 631 "datetimemodule.c"
        var $11=HEAP[$type_addr]; //@line 631 "datetimemodule.c"
        HEAP[$10]=$11; //@line 631 "datetimemodule.c"
        var $12=HEAP[$self]; //@line 631 "datetimemodule.c"
        var $13=(($12)&4294967295); //@line 631 "datetimemodule.c"
        HEAP[$13]=1; //@line 631 "datetimemodule.c"
        var $14=HEAP[$self]; //@line 632 "datetimemodule.c"
        HEAP[$0]=$14; //@line 632 "datetimemodule.c"
        __label__ = 6; break; //@line 632 "datetimemodule.c"
      case 6: // $bb5
        var $15=HEAP[$0]; //@line 630 "datetimemodule.c"
        HEAP[$retval]=$15; //@line 630 "datetimemodule.c"
        __label__ = 7; break; //@line 630 "datetimemodule.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 630 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 630 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _set_date_fields($self, $y, $m, $d) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $y_addr=__stackBase__+4;
        var $m_addr=__stackBase__+8;
        var $d_addr=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$y_addr]=$y;
        HEAP[$m_addr]=$m;
        HEAP[$d_addr]=$d;
        var $0=HEAP[$self_addr]; //@line 644 "datetimemodule.c"
        var $1=(($0+8)&4294967295); //@line 644 "datetimemodule.c"
        HEAP[$1]=-1; //@line 644 "datetimemodule.c"
        var $2=HEAP[$y_addr]; //@line 645 "datetimemodule.c"
        var $3=($2) & 65280; //@line 645 "datetimemodule.c"
        var $4=((($3))|0) >> 8; //@line 645 "datetimemodule.c"
        var $5=((($4)) & 255); //@line 645 "datetimemodule.c"
        var $6=HEAP[$self_addr]; //@line 645 "datetimemodule.c"
        var $7=(($6+13)&4294967295); //@line 645 "datetimemodule.c"
        var $8=(($7)&4294967295); //@line 645 "datetimemodule.c"
        HEAP[$8]=$5; //@line 645 "datetimemodule.c"
        var $9=HEAP[$y_addr]; //@line 645 "datetimemodule.c"
        var $10=((($9)) & 255); //@line 645 "datetimemodule.c"
        var $11=HEAP[$self_addr]; //@line 645 "datetimemodule.c"
        var $12=(($11+13)&4294967295); //@line 645 "datetimemodule.c"
        var $13=(($12+1)&4294967295); //@line 645 "datetimemodule.c"
        HEAP[$13]=$10; //@line 645 "datetimemodule.c"
        var $14=HEAP[$m_addr]; //@line 646 "datetimemodule.c"
        var $15=((($14)) & 255); //@line 646 "datetimemodule.c"
        var $16=HEAP[$self_addr]; //@line 646 "datetimemodule.c"
        var $17=(($16+13)&4294967295); //@line 646 "datetimemodule.c"
        var $18=(($17+2)&4294967295); //@line 646 "datetimemodule.c"
        HEAP[$18]=$15; //@line 646 "datetimemodule.c"
        var $19=HEAP[$d_addr]; //@line 647 "datetimemodule.c"
        var $20=((($19)) & 255); //@line 647 "datetimemodule.c"
        var $21=HEAP[$self_addr]; //@line 647 "datetimemodule.c"
        var $22=(($21+13)&4294967295); //@line 647 "datetimemodule.c"
        var $23=(($22+3)&4294967295); //@line 647 "datetimemodule.c"
        HEAP[$23]=$20; //@line 647 "datetimemodule.c"
        __label__ = 1; break; //@line 648 "datetimemodule.c"
      case 1: // $return
        STACKTOP = __stackBase__;
        return; //@line 648 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _new_date_ex($year, $month, $day, $type) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $year_addr=__stackBase__;
        var $month_addr=__stackBase__+4;
        var $day_addr=__stackBase__+8;
        var $type_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $self=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$year_addr]=$year;
        HEAP[$month_addr]=$month;
        HEAP[$day_addr]=$day;
        HEAP[$type_addr]=$type;
        var $1=HEAP[$type_addr]; //@line 660 "datetimemodule.c"
        var $2=(($1+152)&4294967295); //@line 660 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 660 "datetimemodule.c"
        var $4=HEAP[$type_addr]; //@line 660 "datetimemodule.c"
        var $5=FUNCTION_TABLE[$3]($4, 0); //@line 660 "datetimemodule.c"
        var $6=$5; //@line 660 "datetimemodule.c"
        HEAP[$self]=$6; //@line 660 "datetimemodule.c"
        var $7=HEAP[$self]; //@line 661 "datetimemodule.c"
        var $8=($7)!=0; //@line 661 "datetimemodule.c"
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 661 "datetimemodule.c"
      case 1: // $bb
        var $9=HEAP[$self]; //@line 662 "datetimemodule.c"
        var $10=HEAP[$year_addr]; //@line 662 "datetimemodule.c"
        var $11=HEAP[$month_addr]; //@line 662 "datetimemodule.c"
        var $12=HEAP[$day_addr]; //@line 662 "datetimemodule.c"
        _set_date_fields($9, $10, $11, $12); //@line 662 "datetimemodule.c"
        __label__ = 2; break; //@line 662 "datetimemodule.c"
      case 2: // $bb1
        var $13=HEAP[$self]; //@line 663 "datetimemodule.c"
        var $14=$13; //@line 663 "datetimemodule.c"
        HEAP[$0]=$14; //@line 663 "datetimemodule.c"
        var $15=HEAP[$0]; //@line 663 "datetimemodule.c"
        HEAP[$retval]=$15; //@line 663 "datetimemodule.c"
        __label__ = 3; break; //@line 663 "datetimemodule.c"
      case 3: // $return
        var $retval2=HEAP[$retval]; //@line 663 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval2; //@line 663 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _new_datetime_ex($year, $month, $day, $hour, $minute, $second, $usecond, $tzinfo, $type) {
    var __stackBase__  = STACKTOP; STACKTOP += 49; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 49);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $year_addr=__stackBase__;
        var $month_addr=__stackBase__+4;
        var $day_addr=__stackBase__+8;
        var $hour_addr=__stackBase__+12;
        var $minute_addr=__stackBase__+16;
        var $second_addr=__stackBase__+20;
        var $usecond_addr=__stackBase__+24;
        var $tzinfo_addr=__stackBase__+28;
        var $type_addr=__stackBase__+32;
        var $retval=__stackBase__+36;
        var $0=__stackBase__+40;
        var $self=__stackBase__+44;
        var $aware=__stackBase__+48;
        var $_alloca_point_=0;
        HEAP[$year_addr]=$year;
        HEAP[$month_addr]=$month;
        HEAP[$day_addr]=$day;
        HEAP[$hour_addr]=$hour;
        HEAP[$minute_addr]=$minute;
        HEAP[$second_addr]=$second;
        HEAP[$usecond_addr]=$usecond;
        HEAP[$tzinfo_addr]=$tzinfo;
        HEAP[$type_addr]=$type;
        var $1=HEAP[$tzinfo_addr]; //@line 675 "datetimemodule.c"
        var $2=($1)!=(__Py_NoneStruct); //@line 675 "datetimemodule.c"
        var $3=unSign(($2), 1, 0); //@line 675 "datetimemodule.c"
        HEAP[$aware]=$3; //@line 675 "datetimemodule.c"
        var $4=HEAP[$type_addr]; //@line 677 "datetimemodule.c"
        var $5=(($4+152)&4294967295); //@line 677 "datetimemodule.c"
        var $6=HEAP[$5]; //@line 677 "datetimemodule.c"
        var $7=HEAP[$aware]; //@line 677 "datetimemodule.c"
        var $8=reSign(($7), 8, 0); //@line 677 "datetimemodule.c"
        var $9=HEAP[$type_addr]; //@line 677 "datetimemodule.c"
        var $10=FUNCTION_TABLE[$6]($9, $8); //@line 677 "datetimemodule.c"
        var $11=$10; //@line 677 "datetimemodule.c"
        HEAP[$self]=$11; //@line 677 "datetimemodule.c"
        var $12=HEAP[$self]; //@line 678 "datetimemodule.c"
        var $13=($12)!=0; //@line 678 "datetimemodule.c"
        if ($13) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 678 "datetimemodule.c"
      case 1: // $bb
        var $14=HEAP[$self]; //@line 679 "datetimemodule.c"
        var $15=(($14+12)&4294967295); //@line 679 "datetimemodule.c"
        var $16=HEAP[$aware]; //@line 679 "datetimemodule.c"
        HEAP[$15]=$16; //@line 679 "datetimemodule.c"
        var $17=HEAP[$self]; //@line 680 "datetimemodule.c"
        var $18=$17; //@line 680 "datetimemodule.c"
        var $19=HEAP[$year_addr]; //@line 680 "datetimemodule.c"
        var $20=HEAP[$month_addr]; //@line 680 "datetimemodule.c"
        var $21=HEAP[$day_addr]; //@line 680 "datetimemodule.c"
        _set_date_fields($18, $19, $20, $21); //@line 680 "datetimemodule.c"
        var $22=HEAP[$hour_addr]; //@line 681 "datetimemodule.c"
        var $23=((($22)) & 255); //@line 681 "datetimemodule.c"
        var $24=HEAP[$self]; //@line 681 "datetimemodule.c"
        var $25=(($24+13)&4294967295); //@line 681 "datetimemodule.c"
        var $26=(($25+4)&4294967295); //@line 681 "datetimemodule.c"
        HEAP[$26]=$23; //@line 681 "datetimemodule.c"
        var $27=HEAP[$minute_addr]; //@line 682 "datetimemodule.c"
        var $28=((($27)) & 255); //@line 682 "datetimemodule.c"
        var $29=HEAP[$self]; //@line 682 "datetimemodule.c"
        var $30=(($29+13)&4294967295); //@line 682 "datetimemodule.c"
        var $31=(($30+5)&4294967295); //@line 682 "datetimemodule.c"
        HEAP[$31]=$28; //@line 682 "datetimemodule.c"
        var $32=HEAP[$second_addr]; //@line 683 "datetimemodule.c"
        var $33=((($32)) & 255); //@line 683 "datetimemodule.c"
        var $34=HEAP[$self]; //@line 683 "datetimemodule.c"
        var $35=(($34+13)&4294967295); //@line 683 "datetimemodule.c"
        var $36=(($35+6)&4294967295); //@line 683 "datetimemodule.c"
        HEAP[$36]=$33; //@line 683 "datetimemodule.c"
        var $37=HEAP[$usecond_addr]; //@line 684 "datetimemodule.c"
        var $38=($37) & 16711680; //@line 684 "datetimemodule.c"
        var $39=((($38))|0) >> 16; //@line 684 "datetimemodule.c"
        var $40=((($39)) & 255); //@line 684 "datetimemodule.c"
        var $41=HEAP[$self]; //@line 684 "datetimemodule.c"
        var $42=(($41+13)&4294967295); //@line 684 "datetimemodule.c"
        var $43=(($42+7)&4294967295); //@line 684 "datetimemodule.c"
        HEAP[$43]=$40; //@line 684 "datetimemodule.c"
        var $44=HEAP[$usecond_addr]; //@line 684 "datetimemodule.c"
        var $45=($44) & 65280; //@line 684 "datetimemodule.c"
        var $46=((($45))|0) >> 8; //@line 684 "datetimemodule.c"
        var $47=((($46)) & 255); //@line 684 "datetimemodule.c"
        var $48=HEAP[$self]; //@line 684 "datetimemodule.c"
        var $49=(($48+13)&4294967295); //@line 684 "datetimemodule.c"
        var $50=(($49+8)&4294967295); //@line 684 "datetimemodule.c"
        HEAP[$50]=$47; //@line 684 "datetimemodule.c"
        var $51=HEAP[$usecond_addr]; //@line 684 "datetimemodule.c"
        var $52=((($51)) & 255); //@line 684 "datetimemodule.c"
        var $53=HEAP[$self]; //@line 684 "datetimemodule.c"
        var $54=(($53+13)&4294967295); //@line 684 "datetimemodule.c"
        var $55=(($54+9)&4294967295); //@line 684 "datetimemodule.c"
        HEAP[$55]=$52; //@line 684 "datetimemodule.c"
        var $56=HEAP[$aware]; //@line 685 "datetimemodule.c"
        var $57=reSign(($56), 8, 0)!=0; //@line 685 "datetimemodule.c"
        if ($57) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 685 "datetimemodule.c"
      case 2: // $bb1
        var $58=HEAP[$tzinfo_addr]; //@line 686 "datetimemodule.c"
        var $59=(($58)&4294967295); //@line 686 "datetimemodule.c"
        var $60=HEAP[$59]; //@line 686 "datetimemodule.c"
        var $61=((($60) + 1)&4294967295); //@line 686 "datetimemodule.c"
        var $62=HEAP[$tzinfo_addr]; //@line 686 "datetimemodule.c"
        var $63=(($62)&4294967295); //@line 686 "datetimemodule.c"
        HEAP[$63]=$61; //@line 686 "datetimemodule.c"
        var $64=HEAP[$self]; //@line 687 "datetimemodule.c"
        var $65=(($64+24)&4294967295); //@line 687 "datetimemodule.c"
        var $66=HEAP[$tzinfo_addr]; //@line 687 "datetimemodule.c"
        HEAP[$65]=$66; //@line 687 "datetimemodule.c"
        __label__ = 3; break; //@line 687 "datetimemodule.c"
      case 3: // $bb2
        var $67=HEAP[$self]; //@line 690 "datetimemodule.c"
        var $68=$67; //@line 690 "datetimemodule.c"
        HEAP[$0]=$68; //@line 690 "datetimemodule.c"
        var $69=HEAP[$0]; //@line 690 "datetimemodule.c"
        HEAP[$retval]=$69; //@line 690 "datetimemodule.c"
        __label__ = 4; break; //@line 690 "datetimemodule.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 690 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 690 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _new_time_ex($hour, $minute, $second, $usecond, $tzinfo, $type) {
    var __stackBase__  = STACKTOP; STACKTOP += 37; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 37);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $hour_addr=__stackBase__;
        var $minute_addr=__stackBase__+4;
        var $second_addr=__stackBase__+8;
        var $usecond_addr=__stackBase__+12;
        var $tzinfo_addr=__stackBase__+16;
        var $type_addr=__stackBase__+20;
        var $retval=__stackBase__+24;
        var $0=__stackBase__+28;
        var $self=__stackBase__+32;
        var $aware=__stackBase__+36;
        var $_alloca_point_=0;
        HEAP[$hour_addr]=$hour;
        HEAP[$minute_addr]=$minute;
        HEAP[$second_addr]=$second;
        HEAP[$usecond_addr]=$usecond;
        HEAP[$tzinfo_addr]=$tzinfo;
        HEAP[$type_addr]=$type;
        var $1=HEAP[$tzinfo_addr]; //@line 703 "datetimemodule.c"
        var $2=($1)!=(__Py_NoneStruct); //@line 703 "datetimemodule.c"
        var $3=unSign(($2), 1, 0); //@line 703 "datetimemodule.c"
        HEAP[$aware]=$3; //@line 703 "datetimemodule.c"
        var $4=HEAP[$type_addr]; //@line 705 "datetimemodule.c"
        var $5=(($4+152)&4294967295); //@line 705 "datetimemodule.c"
        var $6=HEAP[$5]; //@line 705 "datetimemodule.c"
        var $7=HEAP[$aware]; //@line 705 "datetimemodule.c"
        var $8=reSign(($7), 8, 0); //@line 705 "datetimemodule.c"
        var $9=HEAP[$type_addr]; //@line 705 "datetimemodule.c"
        var $10=FUNCTION_TABLE[$6]($9, $8); //@line 705 "datetimemodule.c"
        var $11=$10; //@line 705 "datetimemodule.c"
        HEAP[$self]=$11; //@line 705 "datetimemodule.c"
        var $12=HEAP[$self]; //@line 706 "datetimemodule.c"
        var $13=($12)!=0; //@line 706 "datetimemodule.c"
        if ($13) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 706 "datetimemodule.c"
      case 1: // $bb
        var $14=HEAP[$self]; //@line 707 "datetimemodule.c"
        var $15=(($14+12)&4294967295); //@line 707 "datetimemodule.c"
        var $16=HEAP[$aware]; //@line 707 "datetimemodule.c"
        HEAP[$15]=$16; //@line 707 "datetimemodule.c"
        var $17=HEAP[$self]; //@line 708 "datetimemodule.c"
        var $18=(($17+8)&4294967295); //@line 708 "datetimemodule.c"
        HEAP[$18]=-1; //@line 708 "datetimemodule.c"
        var $19=HEAP[$hour_addr]; //@line 709 "datetimemodule.c"
        var $20=((($19)) & 255); //@line 709 "datetimemodule.c"
        var $21=HEAP[$self]; //@line 709 "datetimemodule.c"
        var $22=(($21+13)&4294967295); //@line 709 "datetimemodule.c"
        var $23=(($22)&4294967295); //@line 709 "datetimemodule.c"
        HEAP[$23]=$20; //@line 709 "datetimemodule.c"
        var $24=HEAP[$minute_addr]; //@line 710 "datetimemodule.c"
        var $25=((($24)) & 255); //@line 710 "datetimemodule.c"
        var $26=HEAP[$self]; //@line 710 "datetimemodule.c"
        var $27=(($26+13)&4294967295); //@line 710 "datetimemodule.c"
        var $28=(($27+1)&4294967295); //@line 710 "datetimemodule.c"
        HEAP[$28]=$25; //@line 710 "datetimemodule.c"
        var $29=HEAP[$second_addr]; //@line 711 "datetimemodule.c"
        var $30=((($29)) & 255); //@line 711 "datetimemodule.c"
        var $31=HEAP[$self]; //@line 711 "datetimemodule.c"
        var $32=(($31+13)&4294967295); //@line 711 "datetimemodule.c"
        var $33=(($32+2)&4294967295); //@line 711 "datetimemodule.c"
        HEAP[$33]=$30; //@line 711 "datetimemodule.c"
        var $34=HEAP[$usecond_addr]; //@line 712 "datetimemodule.c"
        var $35=($34) & 16711680; //@line 712 "datetimemodule.c"
        var $36=((($35))|0) >> 16; //@line 712 "datetimemodule.c"
        var $37=((($36)) & 255); //@line 712 "datetimemodule.c"
        var $38=HEAP[$self]; //@line 712 "datetimemodule.c"
        var $39=(($38+13)&4294967295); //@line 712 "datetimemodule.c"
        var $40=(($39+3)&4294967295); //@line 712 "datetimemodule.c"
        HEAP[$40]=$37; //@line 712 "datetimemodule.c"
        var $41=HEAP[$usecond_addr]; //@line 712 "datetimemodule.c"
        var $42=($41) & 65280; //@line 712 "datetimemodule.c"
        var $43=((($42))|0) >> 8; //@line 712 "datetimemodule.c"
        var $44=((($43)) & 255); //@line 712 "datetimemodule.c"
        var $45=HEAP[$self]; //@line 712 "datetimemodule.c"
        var $46=(($45+13)&4294967295); //@line 712 "datetimemodule.c"
        var $47=(($46+4)&4294967295); //@line 712 "datetimemodule.c"
        HEAP[$47]=$44; //@line 712 "datetimemodule.c"
        var $48=HEAP[$usecond_addr]; //@line 712 "datetimemodule.c"
        var $49=((($48)) & 255); //@line 712 "datetimemodule.c"
        var $50=HEAP[$self]; //@line 712 "datetimemodule.c"
        var $51=(($50+13)&4294967295); //@line 712 "datetimemodule.c"
        var $52=(($51+5)&4294967295); //@line 712 "datetimemodule.c"
        HEAP[$52]=$49; //@line 712 "datetimemodule.c"
        var $53=HEAP[$aware]; //@line 713 "datetimemodule.c"
        var $54=reSign(($53), 8, 0)!=0; //@line 713 "datetimemodule.c"
        if ($54) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 713 "datetimemodule.c"
      case 2: // $bb1
        var $55=HEAP[$tzinfo_addr]; //@line 714 "datetimemodule.c"
        var $56=(($55)&4294967295); //@line 714 "datetimemodule.c"
        var $57=HEAP[$56]; //@line 714 "datetimemodule.c"
        var $58=((($57) + 1)&4294967295); //@line 714 "datetimemodule.c"
        var $59=HEAP[$tzinfo_addr]; //@line 714 "datetimemodule.c"
        var $60=(($59)&4294967295); //@line 714 "datetimemodule.c"
        HEAP[$60]=$58; //@line 714 "datetimemodule.c"
        var $61=HEAP[$self]; //@line 715 "datetimemodule.c"
        var $62=(($61+20)&4294967295); //@line 715 "datetimemodule.c"
        var $63=HEAP[$tzinfo_addr]; //@line 715 "datetimemodule.c"
        HEAP[$62]=$63; //@line 715 "datetimemodule.c"
        __label__ = 3; break; //@line 715 "datetimemodule.c"
      case 3: // $bb2
        var $64=HEAP[$self]; //@line 718 "datetimemodule.c"
        var $65=$64; //@line 718 "datetimemodule.c"
        HEAP[$0]=$65; //@line 718 "datetimemodule.c"
        var $66=HEAP[$0]; //@line 718 "datetimemodule.c"
        HEAP[$retval]=$66; //@line 718 "datetimemodule.c"
        __label__ = 4; break; //@line 718 "datetimemodule.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 718 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 718 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _new_delta_ex($days, $seconds, $microseconds, $normalize, $type) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $days_addr=__stackBase__;
        var $seconds_addr=__stackBase__+4;
        var $microseconds_addr=__stackBase__+8;
        var $normalize_addr=__stackBase__+12;
        var $type_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $self=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$days_addr]=$days;
        HEAP[$seconds_addr]=$seconds;
        HEAP[$microseconds_addr]=$microseconds;
        HEAP[$normalize_addr]=$normalize;
        HEAP[$type_addr]=$type;
        var $1=HEAP[$normalize_addr]; //@line 736 "datetimemodule.c"
        var $2=((($1))|0)!=0; //@line 736 "datetimemodule.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 736 "datetimemodule.c"
      case 1: // $bb
        _normalize_d_s_us($days_addr, $seconds_addr, $microseconds_addr); //@line 737 "datetimemodule.c"
        __label__ = 2; break; //@line 737 "datetimemodule.c"
      case 2: // $bb1
        var $3=HEAP[$seconds_addr]; //@line 738 "datetimemodule.c"
        var $4=((($3))|0) < 0; //@line 738 "datetimemodule.c"
        if ($4) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 738 "datetimemodule.c"
      case 3: // $bb2
        var $5=HEAP[$seconds_addr]; //@line 738 "datetimemodule.c"
        var $6=((($5))|0) > 86399; //@line 738 "datetimemodule.c"
        if ($6) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 738 "datetimemodule.c"
      case 4: // $bb3
        ___assert_fail(((__str30)&4294967295), ((__str1)&4294967295), 738, ((___PRETTY_FUNCTION___8976)&4294967295)); //@line 738 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 2513"; //@line 738 "datetimemodule.c"
      case 5: // $bb4
        var $7=HEAP[$microseconds_addr]; //@line 739 "datetimemodule.c"
        var $8=((($7))|0) < 0; //@line 739 "datetimemodule.c"
        if ($8) { __label__ = 7; break; } else { __label__ = 6; break; } //@line 739 "datetimemodule.c"
      case 6: // $bb5
        var $9=HEAP[$microseconds_addr]; //@line 739 "datetimemodule.c"
        var $10=((($9))|0) > 999999; //@line 739 "datetimemodule.c"
        if ($10) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 739 "datetimemodule.c"
      case 7: // $bb6
        ___assert_fail(((__str31)&4294967295), ((__str1)&4294967295), 739, ((___PRETTY_FUNCTION___8976)&4294967295)); //@line 739 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 2527"; //@line 739 "datetimemodule.c"
      case 8: // $bb7
        var $11=HEAP[$days_addr]; //@line 741 "datetimemodule.c"
        var $12=_check_delta_day_range($11); //@line 741 "datetimemodule.c"
        var $13=((($12))|0) < 0; //@line 741 "datetimemodule.c"
        if ($13) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 741 "datetimemodule.c"
      case 9: // $bb8
        HEAP[$0]=0; //@line 742 "datetimemodule.c"
        __label__ = 13; break; //@line 742 "datetimemodule.c"
      case 10: // $bb9
        var $14=HEAP[$type_addr]; //@line 744 "datetimemodule.c"
        var $15=(($14+152)&4294967295); //@line 744 "datetimemodule.c"
        var $16=HEAP[$15]; //@line 744 "datetimemodule.c"
        var $17=HEAP[$type_addr]; //@line 744 "datetimemodule.c"
        var $18=FUNCTION_TABLE[$16]($17, 0); //@line 744 "datetimemodule.c"
        var $19=$18; //@line 744 "datetimemodule.c"
        HEAP[$self]=$19; //@line 744 "datetimemodule.c"
        var $20=HEAP[$self]; //@line 745 "datetimemodule.c"
        var $21=($20)!=0; //@line 745 "datetimemodule.c"
        if ($21) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 745 "datetimemodule.c"
      case 11: // $bb10
        var $22=HEAP[$self]; //@line 746 "datetimemodule.c"
        var $23=(($22+8)&4294967295); //@line 746 "datetimemodule.c"
        HEAP[$23]=-1; //@line 746 "datetimemodule.c"
        var $24=HEAP[$days_addr]; //@line 747 "datetimemodule.c"
        var $25=HEAP[$self]; //@line 747 "datetimemodule.c"
        var $26=(($25+12)&4294967295); //@line 747 "datetimemodule.c"
        HEAP[$26]=$24; //@line 747 "datetimemodule.c"
        var $27=HEAP[$seconds_addr]; //@line 748 "datetimemodule.c"
        var $28=HEAP[$self]; //@line 748 "datetimemodule.c"
        var $29=(($28+16)&4294967295); //@line 748 "datetimemodule.c"
        HEAP[$29]=$27; //@line 748 "datetimemodule.c"
        var $30=HEAP[$microseconds_addr]; //@line 749 "datetimemodule.c"
        var $31=HEAP[$self]; //@line 749 "datetimemodule.c"
        var $32=(($31+20)&4294967295); //@line 749 "datetimemodule.c"
        HEAP[$32]=$30; //@line 749 "datetimemodule.c"
        __label__ = 12; break; //@line 749 "datetimemodule.c"
      case 12: // $bb11
        var $33=HEAP[$self]; //@line 751 "datetimemodule.c"
        var $34=$33; //@line 751 "datetimemodule.c"
        HEAP[$0]=$34; //@line 751 "datetimemodule.c"
        __label__ = 13; break; //@line 751 "datetimemodule.c"
      case 13: // $bb12
        var $35=HEAP[$0]; //@line 742 "datetimemodule.c"
        HEAP[$retval]=$35; //@line 742 "datetimemodule.c"
        __label__ = 14; break; //@line 742 "datetimemodule.c"
      case 14: // $return
        var $retval13=HEAP[$retval]; //@line 742 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 742 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _check_tzinfo_subclass($p) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $p_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$p_addr]=$p;
        var $1=HEAP[$p_addr]; //@line 767 "datetimemodule.c"
        var $2=($1)==(__Py_NoneStruct); //@line 767 "datetimemodule.c"
        if ($2) { __label__ = 3; break; } else { __label__ = 1; break; } //@line 767 "datetimemodule.c"
      case 1: // $bb
        var $3=HEAP[$p_addr]; //@line 767 "datetimemodule.c"
        var $4=(($3+4)&4294967295); //@line 767 "datetimemodule.c"
        var $5=HEAP[$4]; //@line 767 "datetimemodule.c"
        var $6=($5)==(_PyDateTime_TZInfoType); //@line 767 "datetimemodule.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 767 "datetimemodule.c"
      case 2: // $bb1
        var $7=HEAP[$p_addr]; //@line 767 "datetimemodule.c"
        var $8=(($7+4)&4294967295); //@line 767 "datetimemodule.c"
        var $9=HEAP[$8]; //@line 767 "datetimemodule.c"
        var $10=_PyType_IsSubtype($9, _PyDateTime_TZInfoType); //@line 767 "datetimemodule.c"
        var $11=((($10))|0)!=0; //@line 767 "datetimemodule.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 767 "datetimemodule.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 768 "datetimemodule.c"
        __label__ = 5; break; //@line 768 "datetimemodule.c"
      case 4: // $bb3
        var $12=HEAP[$p_addr]; //@line 769 "datetimemodule.c"
        var $13=(($12+4)&4294967295); //@line 769 "datetimemodule.c"
        var $14=HEAP[$13]; //@line 769 "datetimemodule.c"
        var $15=(($14+12)&4294967295); //@line 769 "datetimemodule.c"
        var $16=HEAP[$15]; //@line 769 "datetimemodule.c"
        var $17=HEAP[_PyExc_TypeError]; //@line 769 "datetimemodule.c"
        var $18=_PyErr_Format($17, ((__str32)&4294967295), $16); //@line 769 "datetimemodule.c"
        HEAP[$0]=-1; //@line 773 "datetimemodule.c"
        __label__ = 5; break; //@line 773 "datetimemodule.c"
      case 5: // $bb4
        var $19=HEAP[$0]; //@line 768 "datetimemodule.c"
        HEAP[$retval]=$19; //@line 768 "datetimemodule.c"
        __label__ = 6; break; //@line 768 "datetimemodule.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 768 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 768 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _call_tzinfo_method($tzinfo, $methname, $tzinfoarg) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $tzinfo_addr=__stackBase__;
        var $methname_addr=__stackBase__+4;
        var $tzinfoarg_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $result=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$tzinfo_addr]=$tzinfo;
        HEAP[$methname_addr]=$methname;
        HEAP[$tzinfoarg_addr]=$tzinfoarg;
        var $1=HEAP[$tzinfo_addr]; //@line 784 "datetimemodule.c"
        var $2=($1)==0; //@line 784 "datetimemodule.c"
        if ($2) { __label__ = 3; break; } else { __label__ = 1; break; } //@line 784 "datetimemodule.c"
      case 1: // $bb
        var $3=HEAP[$methname_addr]; //@line 784 "datetimemodule.c"
        var $4=($3)==0; //@line 784 "datetimemodule.c"
        if ($4) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 784 "datetimemodule.c"
      case 2: // $bb1
        var $5=HEAP[$tzinfoarg_addr]; //@line 784 "datetimemodule.c"
        var $6=($5)==0; //@line 784 "datetimemodule.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 784 "datetimemodule.c"
      case 3: // $bb2
        ___assert_fail(((__str33)&4294967295), ((__str1)&4294967295), 784, ((___PRETTY_FUNCTION___9023)&4294967295)); //@line 784 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 2674"; //@line 784 "datetimemodule.c"
      case 4: // $bb3
        var $7=HEAP[$tzinfo_addr]; //@line 785 "datetimemodule.c"
        var $8=_check_tzinfo_subclass($7); //@line 785 "datetimemodule.c"
        var $9=((($8))|0) < 0; //@line 785 "datetimemodule.c"
        if ($9) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 785 "datetimemodule.c"
      case 5: // $bb4
        ___assert_fail(((__str34)&4294967295), ((__str1)&4294967295), 785, ((___PRETTY_FUNCTION___9023)&4294967295)); //@line 785 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 2684"; //@line 785 "datetimemodule.c"
      case 6: // $bb5
        var $10=HEAP[$tzinfo_addr]; //@line 786 "datetimemodule.c"
        var $11=($10)==(__Py_NoneStruct); //@line 786 "datetimemodule.c"
        if ($11) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 786 "datetimemodule.c"
      case 7: // $bb6
        HEAP[$result]=__Py_NoneStruct; //@line 787 "datetimemodule.c"
        var $12=HEAP[$result]; //@line 788 "datetimemodule.c"
        var $13=(($12)&4294967295); //@line 788 "datetimemodule.c"
        var $14=HEAP[$13]; //@line 788 "datetimemodule.c"
        var $15=((($14) + 1)&4294967295); //@line 788 "datetimemodule.c"
        var $16=HEAP[$result]; //@line 788 "datetimemodule.c"
        var $17=(($16)&4294967295); //@line 788 "datetimemodule.c"
        HEAP[$17]=$15; //@line 788 "datetimemodule.c"
        __label__ = 9; break; //@line 788 "datetimemodule.c"
      case 8: // $bb7
        var $18=HEAP[$tzinfo_addr]; //@line 791 "datetimemodule.c"
        var $19=HEAP[$methname_addr]; //@line 791 "datetimemodule.c"
        var $20=HEAP[$tzinfoarg_addr]; //@line 791 "datetimemodule.c"
        var $21=__PyObject_CallMethod_SizeT($18, $19, ((__str35)&4294967295), $20); //@line 791 "datetimemodule.c"
        HEAP[$result]=$21; //@line 791 "datetimemodule.c"
        __label__ = 9; break; //@line 791 "datetimemodule.c"
      case 9: // $bb8
        var $22=HEAP[$result]; //@line 792 "datetimemodule.c"
        HEAP[$0]=$22; //@line 792 "datetimemodule.c"
        var $23=HEAP[$0]; //@line 792 "datetimemodule.c"
        HEAP[$retval]=$23; //@line 792 "datetimemodule.c"
        __label__ = 10; break; //@line 792 "datetimemodule.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 792 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 792 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _get_tzinfo_member($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $tzinfo=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$tzinfo]=0; //@line 802 "datetimemodule.c"
        var $1=HEAP[$self_addr]; //@line 804 "datetimemodule.c"
        var $2=(($1+4)&4294967295); //@line 804 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 804 "datetimemodule.c"
        var $4=($3)==(_PyDateTime_DateTimeType); //@line 804 "datetimemodule.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 804 "datetimemodule.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 804 "datetimemodule.c"
        var $6=(($5+4)&4294967295); //@line 804 "datetimemodule.c"
        var $7=HEAP[$6]; //@line 804 "datetimemodule.c"
        var $8=_PyType_IsSubtype($7, _PyDateTime_DateTimeType); //@line 804 "datetimemodule.c"
        var $9=((($8))|0)!=0; //@line 804 "datetimemodule.c"
        if ($9) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 804 "datetimemodule.c"
      case 2: // $bb1
        var $10=HEAP[$self_addr]; //@line 804 "datetimemodule.c"
        var $11=$10; //@line 804 "datetimemodule.c"
        var $12=(($11+12)&4294967295); //@line 804 "datetimemodule.c"
        var $13=HEAP[$12]; //@line 804 "datetimemodule.c"
        var $14=reSign(($13), 8, 0)==0; //@line 804 "datetimemodule.c"
        if ($14) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 804 "datetimemodule.c"
      case 3: // $bb2
        var $15=HEAP[$self_addr]; //@line 805 "datetimemodule.c"
        var $16=$15; //@line 805 "datetimemodule.c"
        var $17=(($16+24)&4294967295); //@line 805 "datetimemodule.c"
        var $18=HEAP[$17]; //@line 805 "datetimemodule.c"
        HEAP[$tzinfo]=$18; //@line 805 "datetimemodule.c"
        __label__ = 8; break; //@line 805 "datetimemodule.c"
      case 4: // $bb3
        var $19=HEAP[$self_addr]; //@line 806 "datetimemodule.c"
        var $20=(($19+4)&4294967295); //@line 806 "datetimemodule.c"
        var $21=HEAP[$20]; //@line 806 "datetimemodule.c"
        var $22=($21)==(_PyDateTime_TimeType); //@line 806 "datetimemodule.c"
        if ($22) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 806 "datetimemodule.c"
      case 5: // $bb4
        var $23=HEAP[$self_addr]; //@line 806 "datetimemodule.c"
        var $24=(($23+4)&4294967295); //@line 806 "datetimemodule.c"
        var $25=HEAP[$24]; //@line 806 "datetimemodule.c"
        var $26=_PyType_IsSubtype($25, _PyDateTime_TimeType); //@line 806 "datetimemodule.c"
        var $27=((($26))|0)!=0; //@line 806 "datetimemodule.c"
        if ($27) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 806 "datetimemodule.c"
      case 6: // $bb5
        var $28=HEAP[$self_addr]; //@line 806 "datetimemodule.c"
        var $29=$28; //@line 806 "datetimemodule.c"
        var $30=(($29+12)&4294967295); //@line 806 "datetimemodule.c"
        var $31=HEAP[$30]; //@line 806 "datetimemodule.c"
        var $32=reSign(($31), 8, 0)!=0; //@line 806 "datetimemodule.c"
        if ($32) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 806 "datetimemodule.c"
      case 7: // $bb6
        var $33=HEAP[$self_addr]; //@line 807 "datetimemodule.c"
        var $34=$33; //@line 807 "datetimemodule.c"
        var $35=(($34+20)&4294967295); //@line 807 "datetimemodule.c"
        var $36=HEAP[$35]; //@line 807 "datetimemodule.c"
        HEAP[$tzinfo]=$36; //@line 807 "datetimemodule.c"
        __label__ = 8; break; //@line 807 "datetimemodule.c"
      case 8: // $bb7
        var $37=HEAP[$tzinfo]; //@line 809 "datetimemodule.c"
        HEAP[$0]=$37; //@line 809 "datetimemodule.c"
        var $38=HEAP[$0]; //@line 809 "datetimemodule.c"
        HEAP[$retval]=$38; //@line 809 "datetimemodule.c"
        __label__ = 9; break; //@line 809 "datetimemodule.c"
      case 9: // $return
        var $retval8=HEAP[$retval]; //@line 809 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval8; //@line 809 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _call_utc_tzinfo_method($tzinfo, $name, $tzinfoarg, $none) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $tzinfo_addr=__stackBase__;
        var $name_addr=__stackBase__+4;
        var $tzinfoarg_addr=__stackBase__+8;
        var $none_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $u=__stackBase__+24;
        var $result=__stackBase__+28;
        var $days=__stackBase__+32;
        var $ss=__stackBase__+36;
        var $_alloca_point_=0;
        HEAP[$tzinfo_addr]=$tzinfo;
        HEAP[$name_addr]=$name;
        HEAP[$tzinfoarg_addr]=$tzinfoarg;
        HEAP[$none_addr]=$none;
        HEAP[$result]=-1; //@line 825 "datetimemodule.c"
        var $1=HEAP[$tzinfo_addr]; //@line 827 "datetimemodule.c"
        var $2=($1)==0; //@line 827 "datetimemodule.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 827 "datetimemodule.c"
      case 1: // $bb
        ___assert_fail(((__str36)&4294967295), ((__str1)&4294967295), 827, ((___PRETTY_FUNCTION___9075)&4294967295)); //@line 827 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 2841"; //@line 827 "datetimemodule.c"
      case 2: // $bb1
        var $3=HEAP[$tzinfo_addr]; //@line 828 "datetimemodule.c"
        var $4=(($3+4)&4294967295); //@line 828 "datetimemodule.c"
        var $5=HEAP[$4]; //@line 828 "datetimemodule.c"
        var $6=($5)!=(_PyDateTime_TZInfoType); //@line 828 "datetimemodule.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 828 "datetimemodule.c"
      case 3: // $bb2
        var $7=HEAP[$tzinfo_addr]; //@line 828 "datetimemodule.c"
        var $8=(($7+4)&4294967295); //@line 828 "datetimemodule.c"
        var $9=HEAP[$8]; //@line 828 "datetimemodule.c"
        var $10=_PyType_IsSubtype($9, _PyDateTime_TZInfoType); //@line 828 "datetimemodule.c"
        var $11=((($10))|0)==0; //@line 828 "datetimemodule.c"
        if ($11) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 828 "datetimemodule.c"
      case 4: // $bb3
        ___assert_fail(((__str37)&4294967295), ((__str1)&4294967295), 828, ((___PRETTY_FUNCTION___9075)&4294967295)); //@line 828 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 2860"; //@line 828 "datetimemodule.c"
      case 5: // $bb4
        var $12=HEAP[$tzinfoarg_addr]; //@line 829 "datetimemodule.c"
        var $13=($12)==0; //@line 829 "datetimemodule.c"
        if ($13) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 829 "datetimemodule.c"
      case 6: // $bb5
        ___assert_fail(((__str38)&4294967295), ((__str1)&4294967295), 829, ((___PRETTY_FUNCTION___9075)&4294967295)); //@line 829 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 2869"; //@line 829 "datetimemodule.c"
      case 7: // $bb6
        var $14=HEAP[$none_addr]; //@line 831 "datetimemodule.c"
        HEAP[$14]=0; //@line 831 "datetimemodule.c"
        var $15=HEAP[$tzinfo_addr]; //@line 832 "datetimemodule.c"
        var $16=HEAP[$name_addr]; //@line 832 "datetimemodule.c"
        var $17=HEAP[$tzinfoarg_addr]; //@line 832 "datetimemodule.c"
        var $18=_call_tzinfo_method($15, $16, $17); //@line 832 "datetimemodule.c"
        HEAP[$u]=$18; //@line 832 "datetimemodule.c"
        var $19=HEAP[$u]; //@line 833 "datetimemodule.c"
        var $20=($19)==0; //@line 833 "datetimemodule.c"
        if ($20) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 833 "datetimemodule.c"
      case 8: // $bb7
        HEAP[$0]=-1; //@line 834 "datetimemodule.c"
        __label__ = 27; break; //@line 834 "datetimemodule.c"
      case 9: // $bb8
        var $21=HEAP[$u]; //@line 836 "datetimemodule.c"
        var $22=($21)==(__Py_NoneStruct); //@line 836 "datetimemodule.c"
        if ($22) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 836 "datetimemodule.c"
      case 10: // $bb9
        HEAP[$result]=0; //@line 837 "datetimemodule.c"
        var $23=HEAP[$none_addr]; //@line 838 "datetimemodule.c"
        HEAP[$23]=1; //@line 838 "datetimemodule.c"
        __label__ = 21; break; //@line 838 "datetimemodule.c"
      case 11: // $bb10
        var $24=HEAP[$u]; //@line 840 "datetimemodule.c"
        var $25=(($24+4)&4294967295); //@line 840 "datetimemodule.c"
        var $26=HEAP[$25]; //@line 840 "datetimemodule.c"
        var $27=($26)==(_PyDateTime_DeltaType); //@line 840 "datetimemodule.c"
        if ($27) { __label__ = 13; break; } else { __label__ = 12; break; } //@line 840 "datetimemodule.c"
      case 12: // $bb11
        var $28=HEAP[$u]; //@line 840 "datetimemodule.c"
        var $29=(($28+4)&4294967295); //@line 840 "datetimemodule.c"
        var $30=HEAP[$29]; //@line 840 "datetimemodule.c"
        var $31=_PyType_IsSubtype($30, _PyDateTime_DeltaType); //@line 840 "datetimemodule.c"
        var $32=((($31))|0)!=0; //@line 840 "datetimemodule.c"
        if ($32) { __label__ = 13; break; } else { __label__ = 20; break; } //@line 840 "datetimemodule.c"
      case 13: // $bb12
        var $33=HEAP[$u]; //@line 841 "datetimemodule.c"
        var $34=$33; //@line 841 "datetimemodule.c"
        var $35=(($34+12)&4294967295); //@line 841 "datetimemodule.c"
        var $36=HEAP[$35]; //@line 841 "datetimemodule.c"
        HEAP[$days]=$36; //@line 841 "datetimemodule.c"
        var $37=HEAP[$days]; //@line 842 "datetimemodule.c"
        var $38=((($37))|0) < -1; //@line 842 "datetimemodule.c"
        if ($38) { __label__ = 15; break; } else { __label__ = 14; break; } //@line 842 "datetimemodule.c"
      case 14: // $bb13
        var $39=HEAP[$days]; //@line 842 "datetimemodule.c"
        var $40=((($39))|0) > 0; //@line 842 "datetimemodule.c"
        if ($40) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 842 "datetimemodule.c"
      case 15: // $bb14
        HEAP[$result]=1440; //@line 843 "datetimemodule.c"
        __label__ = 19; break; //@line 843 "datetimemodule.c"
      case 16: // $bb15
        var $41=HEAP[$days]; //@line 848 "datetimemodule.c"
        var $42=((($41) * 86400)&4294967295); //@line 848 "datetimemodule.c"
        var $43=HEAP[$u]; //@line 848 "datetimemodule.c"
        var $44=$43; //@line 848 "datetimemodule.c"
        var $45=(($44+16)&4294967295); //@line 848 "datetimemodule.c"
        var $46=HEAP[$45]; //@line 848 "datetimemodule.c"
        var $47=((($42) + ($46))&4294967295); //@line 848 "datetimemodule.c"
        HEAP[$ss]=$47; //@line 848 "datetimemodule.c"
        var $48=HEAP[$ss]; //@line 849 "datetimemodule.c"
        var $49=_divmod($48, 60, $ss); //@line 849 "datetimemodule.c"
        HEAP[$result]=$49; //@line 849 "datetimemodule.c"
        var $50=HEAP[$ss]; //@line 850 "datetimemodule.c"
        var $51=((($50))|0)!=0; //@line 850 "datetimemodule.c"
        if ($51) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 850 "datetimemodule.c"
      case 17: // $bb16
        var $52=HEAP[$u]; //@line 850 "datetimemodule.c"
        var $53=$52; //@line 850 "datetimemodule.c"
        var $54=(($53+20)&4294967295); //@line 850 "datetimemodule.c"
        var $55=HEAP[$54]; //@line 850 "datetimemodule.c"
        var $56=((($55))|0)!=0; //@line 850 "datetimemodule.c"
        if ($56) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 850 "datetimemodule.c"
      case 18: // $bb17
        var $57=HEAP[_PyExc_ValueError]; //@line 851 "datetimemodule.c"
        var $58=HEAP[$name_addr]; //@line 851 "datetimemodule.c"
        var $59=_PyErr_Format($57, ((__str39)&4294967295), $58); //@line 851 "datetimemodule.c"
        HEAP[$result]=-1; //@line 855 "datetimemodule.c"
        __label__ = 19; break; //@line 855 "datetimemodule.c"
      case 19: // $bb18
        __label__ = 21; break; //@line 855 "datetimemodule.c"
      case 20: // $bb19
        var $60=HEAP[$u]; //@line 860 "datetimemodule.c"
        var $61=(($60+4)&4294967295); //@line 860 "datetimemodule.c"
        var $62=HEAP[$61]; //@line 860 "datetimemodule.c"
        var $63=(($62+12)&4294967295); //@line 860 "datetimemodule.c"
        var $64=HEAP[$63]; //@line 860 "datetimemodule.c"
        var $65=HEAP[_PyExc_TypeError]; //@line 860 "datetimemodule.c"
        var $66=HEAP[$name_addr]; //@line 860 "datetimemodule.c"
        var $67=_PyErr_Format($65, ((__str40)&4294967295), $66, $64); //@line 860 "datetimemodule.c"
        __label__ = 21; break; //@line 860 "datetimemodule.c"
      case 21: // $bb20
        var $68=HEAP[$u]; //@line 866 "datetimemodule.c"
        var $69=(($68)&4294967295); //@line 866 "datetimemodule.c"
        var $70=HEAP[$69]; //@line 866 "datetimemodule.c"
        var $71=((($70) - 1)&4294967295); //@line 866 "datetimemodule.c"
        var $72=HEAP[$u]; //@line 866 "datetimemodule.c"
        var $73=(($72)&4294967295); //@line 866 "datetimemodule.c"
        HEAP[$73]=$71; //@line 866 "datetimemodule.c"
        var $74=HEAP[$u]; //@line 866 "datetimemodule.c"
        var $75=(($74)&4294967295); //@line 866 "datetimemodule.c"
        var $76=HEAP[$75]; //@line 866 "datetimemodule.c"
        var $77=((($76))|0)==0; //@line 866 "datetimemodule.c"
        if ($77) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 866 "datetimemodule.c"
      case 22: // $bb21
        var $78=HEAP[$u]; //@line 866 "datetimemodule.c"
        var $79=(($78+4)&4294967295); //@line 866 "datetimemodule.c"
        var $80=HEAP[$79]; //@line 866 "datetimemodule.c"
        var $81=(($80+24)&4294967295); //@line 866 "datetimemodule.c"
        var $82=HEAP[$81]; //@line 866 "datetimemodule.c"
        var $83=HEAP[$u]; //@line 866 "datetimemodule.c"
        FUNCTION_TABLE[$82]($83); //@line 866 "datetimemodule.c"
        __label__ = 23; break; //@line 866 "datetimemodule.c"
      case 23: // $bb22
        var $84=HEAP[$result]; //@line 867 "datetimemodule.c"
        var $85=((($84))|0) < -1439; //@line 867 "datetimemodule.c"
        if ($85) { __label__ = 25; break; } else { __label__ = 24; break; } //@line 867 "datetimemodule.c"
      case 24: // $bb23
        var $86=HEAP[$result]; //@line 867 "datetimemodule.c"
        var $87=((($86))|0) > 1439; //@line 867 "datetimemodule.c"
        if ($87) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 867 "datetimemodule.c"
      case 25: // $bb24
        var $88=HEAP[_PyExc_ValueError]; //@line 868 "datetimemodule.c"
        var $89=HEAP[$name_addr]; //@line 868 "datetimemodule.c"
        var $90=HEAP[$result]; //@line 868 "datetimemodule.c"
        var $91=_PyErr_Format($88, ((__str41)&4294967295), $89, $90); //@line 868 "datetimemodule.c"
        HEAP[$result]=-1; //@line 872 "datetimemodule.c"
        __label__ = 26; break; //@line 872 "datetimemodule.c"
      case 26: // $bb25
        var $92=HEAP[$result]; //@line 874 "datetimemodule.c"
        HEAP[$0]=$92; //@line 874 "datetimemodule.c"
        __label__ = 27; break; //@line 874 "datetimemodule.c"
      case 27: // $bb26
        var $93=HEAP[$0]; //@line 834 "datetimemodule.c"
        HEAP[$retval]=$93; //@line 834 "datetimemodule.c"
        __label__ = 28; break; //@line 834 "datetimemodule.c"
      case 28: // $return
        var $retval27=HEAP[$retval]; //@line 834 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval27; //@line 834 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _call_utcoffset($tzinfo, $tzinfoarg, $none) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $tzinfo_addr=__stackBase__;
        var $tzinfoarg_addr=__stackBase__+4;
        var $none_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$tzinfo_addr]=$tzinfo;
        HEAP[$tzinfoarg_addr]=$tzinfoarg;
        HEAP[$none_addr]=$none;
        var $1=HEAP[$tzinfo_addr]; //@line 888 "datetimemodule.c"
        var $2=HEAP[$tzinfoarg_addr]; //@line 888 "datetimemodule.c"
        var $3=HEAP[$none_addr]; //@line 888 "datetimemodule.c"
        var $4=_call_utc_tzinfo_method($1, ((__str42)&4294967295), $2, $3); //@line 888 "datetimemodule.c"
        HEAP[$0]=$4; //@line 888 "datetimemodule.c"
        var $5=HEAP[$0]; //@line 888 "datetimemodule.c"
        HEAP[$retval]=$5; //@line 888 "datetimemodule.c"
        __label__ = 1; break; //@line 888 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 888 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 888 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _offset_as_timedelta($tzinfo, $name, $tzinfoarg) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $tzinfo_addr=__stackBase__;
        var $name_addr=__stackBase__+4;
        var $tzinfoarg_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $result=__stackBase__+20;
        var $none=__stackBase__+24;
        var $offset=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$tzinfo_addr]=$tzinfo;
        HEAP[$name_addr]=$name;
        HEAP[$tzinfoarg_addr]=$tzinfoarg;
        var $1=HEAP[$tzinfo_addr]; //@line 897 "datetimemodule.c"
        var $2=($1)==0; //@line 897 "datetimemodule.c"
        if ($2) { __label__ = 3; break; } else { __label__ = 1; break; } //@line 897 "datetimemodule.c"
      case 1: // $bb
        var $3=HEAP[$name_addr]; //@line 897 "datetimemodule.c"
        var $4=($3)==0; //@line 897 "datetimemodule.c"
        if ($4) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 897 "datetimemodule.c"
      case 2: // $bb1
        var $5=HEAP[$tzinfoarg_addr]; //@line 897 "datetimemodule.c"
        var $6=($5)==0; //@line 897 "datetimemodule.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 897 "datetimemodule.c"
      case 3: // $bb2
        ___assert_fail(((__str43)&4294967295), ((__str1)&4294967295), 897, ((___PRETTY_FUNCTION___9150)&4294967295)); //@line 897 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 3100"; //@line 897 "datetimemodule.c"
      case 4: // $bb3
        var $7=HEAP[$tzinfo_addr]; //@line 898 "datetimemodule.c"
        var $8=($7)==(__Py_NoneStruct); //@line 898 "datetimemodule.c"
        if ($8) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 898 "datetimemodule.c"
      case 5: // $bb4
        HEAP[$result]=__Py_NoneStruct; //@line 899 "datetimemodule.c"
        var $9=HEAP[$result]; //@line 900 "datetimemodule.c"
        var $10=(($9)&4294967295); //@line 900 "datetimemodule.c"
        var $11=HEAP[$10]; //@line 900 "datetimemodule.c"
        var $12=((($11) + 1)&4294967295); //@line 900 "datetimemodule.c"
        var $13=HEAP[$result]; //@line 900 "datetimemodule.c"
        var $14=(($13)&4294967295); //@line 900 "datetimemodule.c"
        HEAP[$14]=$12; //@line 900 "datetimemodule.c"
        __label__ = 12; break; //@line 900 "datetimemodule.c"
      case 6: // $bb5
        var $15=HEAP[$tzinfo_addr]; //@line 905 "datetimemodule.c"
        var $16=HEAP[$name_addr]; //@line 905 "datetimemodule.c"
        var $17=HEAP[$tzinfoarg_addr]; //@line 905 "datetimemodule.c"
        var $18=_call_utc_tzinfo_method($15, $16, $17, $none); //@line 905 "datetimemodule.c"
        HEAP[$offset]=$18; //@line 905 "datetimemodule.c"
        var $19=HEAP[$offset]; //@line 906 "datetimemodule.c"
        var $20=((($19))|0) < 0; //@line 906 "datetimemodule.c"
        if ($20) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 906 "datetimemodule.c"
      case 7: // $bb6
        var $21=_PyErr_Occurred(); //@line 906 "datetimemodule.c"
        var $22=($21)!=0; //@line 906 "datetimemodule.c"
        if ($22) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 906 "datetimemodule.c"
      case 8: // $bb7
        HEAP[$0]=0; //@line 907 "datetimemodule.c"
        __label__ = 13; break; //@line 907 "datetimemodule.c"
      case 9: // $bb8
        var $23=HEAP[$none]; //@line 908 "datetimemodule.c"
        var $24=((($23))|0)!=0; //@line 908 "datetimemodule.c"
        if ($24) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 908 "datetimemodule.c"
      case 10: // $bb9
        HEAP[$result]=__Py_NoneStruct; //@line 909 "datetimemodule.c"
        var $25=HEAP[$result]; //@line 910 "datetimemodule.c"
        var $26=(($25)&4294967295); //@line 910 "datetimemodule.c"
        var $27=HEAP[$26]; //@line 910 "datetimemodule.c"
        var $28=((($27) + 1)&4294967295); //@line 910 "datetimemodule.c"
        var $29=HEAP[$result]; //@line 910 "datetimemodule.c"
        var $30=(($29)&4294967295); //@line 910 "datetimemodule.c"
        HEAP[$30]=$28; //@line 910 "datetimemodule.c"
        __label__ = 12; break; //@line 910 "datetimemodule.c"
      case 11: // $bb10
        var $31=HEAP[$offset]; //@line 913 "datetimemodule.c"
        var $32=((($31) * 60)&4294967295); //@line 913 "datetimemodule.c"
        var $33=_new_delta_ex(0, $32, 0, 1, _PyDateTime_DeltaType); //@line 913 "datetimemodule.c"
        HEAP[$result]=$33; //@line 913 "datetimemodule.c"
        __label__ = 12; break; //@line 913 "datetimemodule.c"
      case 12: // $bb11
        var $34=HEAP[$result]; //@line 915 "datetimemodule.c"
        HEAP[$0]=$34; //@line 915 "datetimemodule.c"
        __label__ = 13; break; //@line 915 "datetimemodule.c"
      case 13: // $bb12
        var $35=HEAP[$0]; //@line 907 "datetimemodule.c"
        HEAP[$retval]=$35; //@line 907 "datetimemodule.c"
        __label__ = 14; break; //@line 907 "datetimemodule.c"
      case 14: // $return
        var $retval13=HEAP[$retval]; //@line 907 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 907 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _call_dst($tzinfo, $tzinfoarg, $none) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $tzinfo_addr=__stackBase__;
        var $tzinfoarg_addr=__stackBase__+4;
        var $none_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$tzinfo_addr]=$tzinfo;
        HEAP[$tzinfoarg_addr]=$tzinfoarg;
        HEAP[$none_addr]=$none;
        var $1=HEAP[$tzinfo_addr]; //@line 929 "datetimemodule.c"
        var $2=HEAP[$tzinfoarg_addr]; //@line 929 "datetimemodule.c"
        var $3=HEAP[$none_addr]; //@line 929 "datetimemodule.c"
        var $4=_call_utc_tzinfo_method($1, ((__str44)&4294967295), $2, $3); //@line 929 "datetimemodule.c"
        HEAP[$0]=$4; //@line 929 "datetimemodule.c"
        var $5=HEAP[$0]; //@line 929 "datetimemodule.c"
        HEAP[$retval]=$5; //@line 929 "datetimemodule.c"
        __label__ = 1; break; //@line 929 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 929 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 929 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _call_tzname($tzinfo, $tzinfoarg) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $tzinfo_addr=__stackBase__;
        var $tzinfoarg_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $result=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$tzinfo_addr]=$tzinfo;
        HEAP[$tzinfoarg_addr]=$tzinfoarg;
        var $1=HEAP[$tzinfo_addr]; //@line 942 "datetimemodule.c"
        var $2=($1)==0; //@line 942 "datetimemodule.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 942 "datetimemodule.c"
      case 1: // $bb
        ___assert_fail(((__str36)&4294967295), ((__str1)&4294967295), 942, ((___PRETTY_FUNCTION___9191)&4294967295)); //@line 942 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 3229"; //@line 942 "datetimemodule.c"
      case 2: // $bb1
        var $3=HEAP[$tzinfo_addr]; //@line 943 "datetimemodule.c"
        var $4=_check_tzinfo_subclass($3); //@line 943 "datetimemodule.c"
        var $5=((($4))|0) < 0; //@line 943 "datetimemodule.c"
        if ($5) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 943 "datetimemodule.c"
      case 3: // $bb2
        ___assert_fail(((__str34)&4294967295), ((__str1)&4294967295), 943, ((___PRETTY_FUNCTION___9191)&4294967295)); //@line 943 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 3239"; //@line 943 "datetimemodule.c"
      case 4: // $bb3
        var $6=HEAP[$tzinfoarg_addr]; //@line 944 "datetimemodule.c"
        var $7=($6)==0; //@line 944 "datetimemodule.c"
        if ($7) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 944 "datetimemodule.c"
      case 5: // $bb4
        ___assert_fail(((__str38)&4294967295), ((__str1)&4294967295), 944, ((___PRETTY_FUNCTION___9191)&4294967295)); //@line 944 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 3248"; //@line 944 "datetimemodule.c"
      case 6: // $bb5
        var $8=HEAP[$tzinfo_addr]; //@line 946 "datetimemodule.c"
        var $9=($8)==(__Py_NoneStruct); //@line 946 "datetimemodule.c"
        if ($9) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 946 "datetimemodule.c"
      case 7: // $bb6
        HEAP[$result]=__Py_NoneStruct; //@line 947 "datetimemodule.c"
        var $10=HEAP[$result]; //@line 948 "datetimemodule.c"
        var $11=(($10)&4294967295); //@line 948 "datetimemodule.c"
        var $12=HEAP[$11]; //@line 948 "datetimemodule.c"
        var $13=((($12) + 1)&4294967295); //@line 948 "datetimemodule.c"
        var $14=HEAP[$result]; //@line 948 "datetimemodule.c"
        var $15=(($14)&4294967295); //@line 948 "datetimemodule.c"
        HEAP[$15]=$13; //@line 948 "datetimemodule.c"
        __label__ = 9; break; //@line 948 "datetimemodule.c"
      case 8: // $bb7
        var $16=HEAP[$tzinfo_addr]; //@line 951 "datetimemodule.c"
        var $17=HEAP[$tzinfoarg_addr]; //@line 951 "datetimemodule.c"
        var $18=__PyObject_CallMethod_SizeT($16, ((__str45)&4294967295), ((__str35)&4294967295), $17); //@line 951 "datetimemodule.c"
        HEAP[$result]=$18; //@line 951 "datetimemodule.c"
        __label__ = 9; break; //@line 951 "datetimemodule.c"
      case 9: // $bb8
        var $19=HEAP[$result]; //@line 953 "datetimemodule.c"
        var $20=($19)!=0; //@line 953 "datetimemodule.c"
        if ($20) { __label__ = 10; break; } else { __label__ = 15; break; } //@line 953 "datetimemodule.c"
      case 10: // $bb9
        var $21=HEAP[$result]; //@line 953 "datetimemodule.c"
        var $22=($21)!=(__Py_NoneStruct); //@line 953 "datetimemodule.c"
        if ($22) { __label__ = 11; break; } else { __label__ = 15; break; } //@line 953 "datetimemodule.c"
      case 11: // $bb10
        var $23=HEAP[$result]; //@line 953 "datetimemodule.c"
        var $24=(($23+4)&4294967295); //@line 953 "datetimemodule.c"
        var $25=HEAP[$24]; //@line 953 "datetimemodule.c"
        var $26=(($25+84)&4294967295); //@line 953 "datetimemodule.c"
        var $27=HEAP[$26]; //@line 953 "datetimemodule.c"
        var $28=($27) & 134217728; //@line 953 "datetimemodule.c"
        var $29=((($28))|0)==0; //@line 953 "datetimemodule.c"
        if ($29) { __label__ = 12; break; } else { __label__ = 15; break; } //@line 953 "datetimemodule.c"
      case 12: // $bb11
        var $30=HEAP[$result]; //@line 954 "datetimemodule.c"
        var $31=(($30+4)&4294967295); //@line 954 "datetimemodule.c"
        var $32=HEAP[$31]; //@line 954 "datetimemodule.c"
        var $33=(($32+12)&4294967295); //@line 954 "datetimemodule.c"
        var $34=HEAP[$33]; //@line 954 "datetimemodule.c"
        var $35=HEAP[_PyExc_TypeError]; //@line 954 "datetimemodule.c"
        var $36=_PyErr_Format($35, ((__str46)&4294967295), $34); //@line 954 "datetimemodule.c"
        var $37=HEAP[$result]; //@line 957 "datetimemodule.c"
        var $38=(($37)&4294967295); //@line 957 "datetimemodule.c"
        var $39=HEAP[$38]; //@line 957 "datetimemodule.c"
        var $40=((($39) - 1)&4294967295); //@line 957 "datetimemodule.c"
        var $41=HEAP[$result]; //@line 957 "datetimemodule.c"
        var $42=(($41)&4294967295); //@line 957 "datetimemodule.c"
        HEAP[$42]=$40; //@line 957 "datetimemodule.c"
        var $43=HEAP[$result]; //@line 957 "datetimemodule.c"
        var $44=(($43)&4294967295); //@line 957 "datetimemodule.c"
        var $45=HEAP[$44]; //@line 957 "datetimemodule.c"
        var $46=((($45))|0)==0; //@line 957 "datetimemodule.c"
        if ($46) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 957 "datetimemodule.c"
      case 13: // $bb12
        var $47=HEAP[$result]; //@line 957 "datetimemodule.c"
        var $48=(($47+4)&4294967295); //@line 957 "datetimemodule.c"
        var $49=HEAP[$48]; //@line 957 "datetimemodule.c"
        var $50=(($49+24)&4294967295); //@line 957 "datetimemodule.c"
        var $51=HEAP[$50]; //@line 957 "datetimemodule.c"
        var $52=HEAP[$result]; //@line 957 "datetimemodule.c"
        FUNCTION_TABLE[$51]($52); //@line 957 "datetimemodule.c"
        __label__ = 14; break; //@line 957 "datetimemodule.c"
      case 14: // $bb13
        HEAP[$result]=0; //@line 958 "datetimemodule.c"
        __label__ = 15; break; //@line 958 "datetimemodule.c"
      case 15: // $bb14
        var $53=HEAP[$result]; //@line 960 "datetimemodule.c"
        HEAP[$0]=$53; //@line 960 "datetimemodule.c"
        var $54=HEAP[$0]; //@line 960 "datetimemodule.c"
        HEAP[$retval]=$54; //@line 960 "datetimemodule.c"
        __label__ = 16; break; //@line 960 "datetimemodule.c"
      case 16: // $return
        var $retval15=HEAP[$retval]; //@line 960 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval15; //@line 960 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _classify_utcoffset($op, $tzinfoarg, $offset) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $op_addr=__stackBase__;
        var $tzinfoarg_addr=__stackBase__+4;
        var $offset_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $iftmp_41=__stackBase__+16;
        var $iftmp_40=__stackBase__+20;
        var $0=__stackBase__+24;
        var $none=__stackBase__+28;
        var $tzinfo=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$op_addr]=$op;
        HEAP[$tzinfoarg_addr]=$tzinfoarg;
        HEAP[$offset_addr]=$offset;
        var $1=HEAP[$tzinfoarg_addr]; //@line 996 "datetimemodule.c"
        var $2=($1)==0; //@line 996 "datetimemodule.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 996 "datetimemodule.c"
      case 1: // $bb
        ___assert_fail(((__str38)&4294967295), ((__str1)&4294967295), 996, ((___PRETTY_FUNCTION___9239)&4294967295)); //@line 996 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 3367"; //@line 996 "datetimemodule.c"
      case 2: // $bb1
        var $3=HEAP[$offset_addr]; //@line 997 "datetimemodule.c"
        HEAP[$3]=0; //@line 997 "datetimemodule.c"
        var $4=HEAP[$op_addr]; //@line 998 "datetimemodule.c"
        var $5=_get_tzinfo_member($4); //@line 998 "datetimemodule.c"
        HEAP[$tzinfo]=$5; //@line 998 "datetimemodule.c"
        var $6=HEAP[$tzinfo]; //@line 999 "datetimemodule.c"
        var $7=($6)==(__Py_NoneStruct); //@line 999 "datetimemodule.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 999 "datetimemodule.c"
      case 3: // $bb2
        HEAP[$0]=2; //@line 1000 "datetimemodule.c"
        __label__ = 19; break; //@line 1000 "datetimemodule.c"
      case 4: // $bb3
        var $8=HEAP[$tzinfo]; //@line 1001 "datetimemodule.c"
        var $9=($8)==0; //@line 1001 "datetimemodule.c"
        if ($9) { __label__ = 5; break; } else { __label__ = 12; break; } //@line 1001 "datetimemodule.c"
      case 5: // $bb4
        var $10=HEAP[$op_addr]; //@line 1003 "datetimemodule.c"
        var $11=(($10+4)&4294967295); //@line 1003 "datetimemodule.c"
        var $12=HEAP[$11]; //@line 1003 "datetimemodule.c"
        var $13=($12)==(_PyDateTime_TimeType); //@line 1003 "datetimemodule.c"
        if ($13) { __label__ = 9; break; } else { __label__ = 6; break; } //@line 1003 "datetimemodule.c"
      case 6: // $bb5
        var $14=HEAP[$op_addr]; //@line 1003 "datetimemodule.c"
        var $15=(($14+4)&4294967295); //@line 1003 "datetimemodule.c"
        var $16=HEAP[$15]; //@line 1003 "datetimemodule.c"
        var $17=_PyType_IsSubtype($16, _PyDateTime_TimeType); //@line 1003 "datetimemodule.c"
        var $18=((($17))|0)!=0; //@line 1003 "datetimemodule.c"
        if ($18) { __label__ = 9; break; } else { __label__ = 7; break; } //@line 1003 "datetimemodule.c"
      case 7: // $bb6
        var $19=HEAP[$op_addr]; //@line 1003 "datetimemodule.c"
        var $20=(($19+4)&4294967295); //@line 1003 "datetimemodule.c"
        var $21=HEAP[$20]; //@line 1003 "datetimemodule.c"
        var $22=($21)==(_PyDateTime_DateType); //@line 1003 "datetimemodule.c"
        if ($22) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 1003 "datetimemodule.c"
      case 8: // $bb7
        var $23=HEAP[$op_addr]; //@line 1003 "datetimemodule.c"
        var $24=(($23+4)&4294967295); //@line 1003 "datetimemodule.c"
        var $25=HEAP[$24]; //@line 1003 "datetimemodule.c"
        var $26=_PyType_IsSubtype($25, _PyDateTime_DateType); //@line 1003 "datetimemodule.c"
        var $27=((($26))|0)!=0; //@line 1003 "datetimemodule.c"
        if ($27) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1003 "datetimemodule.c"
      case 9: // $bb8
        HEAP[$iftmp_40]=2; //@line 1003 "datetimemodule.c"
        __label__ = 11; break; //@line 1003 "datetimemodule.c"
      case 10: // $bb9
        HEAP[$iftmp_40]=1; //@line 1003 "datetimemodule.c"
        __label__ = 11; break; //@line 1003 "datetimemodule.c"
      case 11: // $bb10
        var $28=HEAP[$iftmp_40]; //@line 1003 "datetimemodule.c"
        HEAP[$0]=$28; //@line 1003 "datetimemodule.c"
        __label__ = 19; break; //@line 1003 "datetimemodule.c"
      case 12: // $bb11
        var $29=HEAP[$tzinfo]; //@line 1006 "datetimemodule.c"
        var $30=HEAP[$tzinfoarg_addr]; //@line 1006 "datetimemodule.c"
        var $31=_call_utcoffset($29, $30, $none); //@line 1006 "datetimemodule.c"
        var $32=HEAP[$offset_addr]; //@line 1006 "datetimemodule.c"
        HEAP[$32]=$31; //@line 1006 "datetimemodule.c"
        var $33=HEAP[$offset_addr]; //@line 1007 "datetimemodule.c"
        var $34=HEAP[$33]; //@line 1007 "datetimemodule.c"
        var $35=((($34))|0)==-1; //@line 1007 "datetimemodule.c"
        if ($35) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 1007 "datetimemodule.c"
      case 13: // $bb12
        var $36=_PyErr_Occurred(); //@line 1007 "datetimemodule.c"
        var $37=($36)!=0; //@line 1007 "datetimemodule.c"
        if ($37) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1007 "datetimemodule.c"
      case 14: // $bb13
        HEAP[$0]=0; //@line 1008 "datetimemodule.c"
        __label__ = 19; break; //@line 1008 "datetimemodule.c"
      case 15: // $bb14
        var $38=HEAP[$none]; //@line 1009 "datetimemodule.c"
        var $39=((($38))|0)!=0; //@line 1009 "datetimemodule.c"
        if ($39) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 1009 "datetimemodule.c"
      case 16: // $bb15
        HEAP[$iftmp_41]=2; //@line 1009 "datetimemodule.c"
        __label__ = 18; break; //@line 1009 "datetimemodule.c"
      case 17: // $bb16
        HEAP[$iftmp_41]=3; //@line 1009 "datetimemodule.c"
        __label__ = 18; break; //@line 1009 "datetimemodule.c"
      case 18: // $bb17
        var $40=HEAP[$iftmp_41]; //@line 1009 "datetimemodule.c"
        HEAP[$0]=$40; //@line 1009 "datetimemodule.c"
        __label__ = 19; break; //@line 1009 "datetimemodule.c"
      case 19: // $bb18
        var $41=HEAP[$0]; //@line 1000 "datetimemodule.c"
        HEAP[$retval]=$41; //@line 1000 "datetimemodule.c"
        __label__ = 20; break; //@line 1000 "datetimemodule.c"
      case 20: // $return
        var $retval19=HEAP[$retval]; //@line 1000 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval19; //@line 1000 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _classify_two_utcoffsets($o1, $offset1, $n1, $tzinfoarg1, $o2, $offset2, $n2, $tzinfoarg2) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $o1_addr=__stackBase__;
        var $offset1_addr=__stackBase__+4;
        var $n1_addr=__stackBase__+8;
        var $tzinfoarg1_addr=__stackBase__+12;
        var $o2_addr=__stackBase__+16;
        var $offset2_addr=__stackBase__+20;
        var $n2_addr=__stackBase__+24;
        var $tzinfoarg2_addr=__stackBase__+28;
        var $retval=__stackBase__+32;
        var $0=__stackBase__+36;
        var $_alloca_point_=0;
        HEAP[$o1_addr]=$o1;
        HEAP[$offset1_addr]=$offset1;
        HEAP[$n1_addr]=$n1;
        HEAP[$tzinfoarg1_addr]=$tzinfoarg1;
        HEAP[$o2_addr]=$o2;
        HEAP[$offset2_addr]=$offset2;
        HEAP[$n2_addr]=$n2;
        HEAP[$tzinfoarg2_addr]=$tzinfoarg2;
        var $1=HEAP[$o1_addr]; //@line 1027 "datetimemodule.c"
        var $2=_get_tzinfo_member($1); //@line 1027 "datetimemodule.c"
        var $3=HEAP[$o2_addr]; //@line 1027 "datetimemodule.c"
        var $4=_get_tzinfo_member($3); //@line 1027 "datetimemodule.c"
        var $5=($2)==($4); //@line 1027 "datetimemodule.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1027 "datetimemodule.c"
      case 1: // $bb
        var $6=HEAP[$offset2_addr]; //@line 1028 "datetimemodule.c"
        HEAP[$6]=0; //@line 1028 "datetimemodule.c"
        var $7=HEAP[$offset2_addr]; //@line 1028 "datetimemodule.c"
        var $8=HEAP[$7]; //@line 1028 "datetimemodule.c"
        var $9=HEAP[$offset1_addr]; //@line 1028 "datetimemodule.c"
        HEAP[$9]=$8; //@line 1028 "datetimemodule.c"
        var $10=HEAP[$n2_addr]; //@line 1029 "datetimemodule.c"
        HEAP[$10]=2; //@line 1029 "datetimemodule.c"
        var $11=HEAP[$n2_addr]; //@line 1029 "datetimemodule.c"
        var $12=HEAP[$11]; //@line 1029 "datetimemodule.c"
        var $13=HEAP[$n1_addr]; //@line 1029 "datetimemodule.c"
        HEAP[$13]=$12; //@line 1029 "datetimemodule.c"
        __label__ = 6; break; //@line 1029 "datetimemodule.c"
      case 2: // $bb1
        var $14=HEAP[$o1_addr]; //@line 1032 "datetimemodule.c"
        var $15=HEAP[$tzinfoarg1_addr]; //@line 1032 "datetimemodule.c"
        var $16=HEAP[$offset1_addr]; //@line 1032 "datetimemodule.c"
        var $17=_classify_utcoffset($14, $15, $16); //@line 1032 "datetimemodule.c"
        var $18=HEAP[$n1_addr]; //@line 1032 "datetimemodule.c"
        HEAP[$18]=$17; //@line 1032 "datetimemodule.c"
        var $19=HEAP[$n1_addr]; //@line 1033 "datetimemodule.c"
        var $20=HEAP[$19]; //@line 1033 "datetimemodule.c"
        var $21=((($20))|0)==0; //@line 1033 "datetimemodule.c"
        if ($21) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1033 "datetimemodule.c"
      case 3: // $bb2
        HEAP[$0]=-1; //@line 1034 "datetimemodule.c"
        __label__ = 7; break; //@line 1034 "datetimemodule.c"
      case 4: // $bb3
        var $22=HEAP[$o2_addr]; //@line 1035 "datetimemodule.c"
        var $23=HEAP[$tzinfoarg2_addr]; //@line 1035 "datetimemodule.c"
        var $24=HEAP[$offset2_addr]; //@line 1035 "datetimemodule.c"
        var $25=_classify_utcoffset($22, $23, $24); //@line 1035 "datetimemodule.c"
        var $26=HEAP[$n2_addr]; //@line 1035 "datetimemodule.c"
        HEAP[$26]=$25; //@line 1035 "datetimemodule.c"
        var $27=HEAP[$n2_addr]; //@line 1036 "datetimemodule.c"
        var $28=HEAP[$27]; //@line 1036 "datetimemodule.c"
        var $29=((($28))|0)==0; //@line 1036 "datetimemodule.c"
        if ($29) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1036 "datetimemodule.c"
      case 5: // $bb4
        HEAP[$0]=-1; //@line 1037 "datetimemodule.c"
        __label__ = 7; break; //@line 1037 "datetimemodule.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 1039 "datetimemodule.c"
        __label__ = 7; break; //@line 1039 "datetimemodule.c"
      case 7: // $bb6
        var $30=HEAP[$0]; //@line 1034 "datetimemodule.c"
        HEAP[$retval]=$30; //@line 1034 "datetimemodule.c"
        __label__ = 8; break; //@line 1034 "datetimemodule.c"
      case 8: // $return
        var $retval7=HEAP[$retval]; //@line 1034 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 1034 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _append_keyword_tzinfo($repr, $tzinfo) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $repr_addr=__stackBase__;
        var $tzinfo_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $temp=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$repr_addr]=$repr;
        HEAP[$tzinfo_addr]=$tzinfo;
        var $1=HEAP[$repr_addr]; //@line 1052 "datetimemodule.c"
        var $2=(($1+4)&4294967295); //@line 1052 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 1052 "datetimemodule.c"
        var $4=(($3+84)&4294967295); //@line 1052 "datetimemodule.c"
        var $5=HEAP[$4]; //@line 1052 "datetimemodule.c"
        var $6=($5) & 134217728; //@line 1052 "datetimemodule.c"
        var $7=((($6))|0)==0; //@line 1052 "datetimemodule.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1052 "datetimemodule.c"
      case 1: // $bb
        ___assert_fail(((__str47)&4294967295), ((__str1)&4294967295), 1052, ((___PRETTY_FUNCTION___9306)&4294967295)); //@line 1052 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 3602"; //@line 1052 "datetimemodule.c"
      case 2: // $bb1
        var $8=HEAP[$tzinfo_addr]; //@line 1053 "datetimemodule.c"
        var $9=($8)==0; //@line 1053 "datetimemodule.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1053 "datetimemodule.c"
      case 3: // $bb2
        ___assert_fail(((__str48)&4294967295), ((__str1)&4294967295), 1053, ((___PRETTY_FUNCTION___9306)&4294967295)); //@line 1053 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 3611"; //@line 1053 "datetimemodule.c"
      case 4: // $bb3
        var $10=HEAP[$tzinfo_addr]; //@line 1054 "datetimemodule.c"
        var $11=($10)==(__Py_NoneStruct); //@line 1054 "datetimemodule.c"
        if ($11) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1054 "datetimemodule.c"
      case 5: // $bb4
        var $12=HEAP[$repr_addr]; //@line 1055 "datetimemodule.c"
        HEAP[$0]=$12; //@line 1055 "datetimemodule.c"
        __label__ = 13; break; //@line 1055 "datetimemodule.c"
      case 6: // $bb5
        var $13=HEAP[$repr_addr]; //@line 1057 "datetimemodule.c"
        var $14=_PyString_AsString($13); //@line 1057 "datetimemodule.c"
        var $15=HEAP[$repr_addr]; //@line 1057 "datetimemodule.c"
        var $16=_PyString_Size($15); //@line 1057 "datetimemodule.c"
        var $17=((($16) - 1)&4294967295); //@line 1057 "datetimemodule.c"
        var $18=(($14+$17)&4294967295); //@line 1057 "datetimemodule.c"
        var $19=HEAP[$18]; //@line 1057 "datetimemodule.c"
        var $20=reSign(($19), 8, 0)!=41; //@line 1057 "datetimemodule.c"
        if ($20) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1057 "datetimemodule.c"
      case 7: // $bb6
        ___assert_fail(((__str49)&4294967295), ((__str1)&4294967295), 1057, ((___PRETTY_FUNCTION___9306)&4294967295)); //@line 1057 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 3636"; //@line 1057 "datetimemodule.c"
      case 8: // $bb7
        var $21=HEAP[$repr_addr]; //@line 1058 "datetimemodule.c"
        var $22=_PyString_Size($21); //@line 1058 "datetimemodule.c"
        var $23=((($22) - 1)&4294967295); //@line 1058 "datetimemodule.c"
        var $24=HEAP[$repr_addr]; //@line 1058 "datetimemodule.c"
        var $25=_PyString_AsString($24); //@line 1058 "datetimemodule.c"
        var $26=_PyString_FromStringAndSize($25, $23); //@line 1058 "datetimemodule.c"
        HEAP[$temp]=$26; //@line 1058 "datetimemodule.c"
        var $27=HEAP[$repr_addr]; //@line 1060 "datetimemodule.c"
        var $28=(($27)&4294967295); //@line 1060 "datetimemodule.c"
        var $29=HEAP[$28]; //@line 1060 "datetimemodule.c"
        var $30=((($29) - 1)&4294967295); //@line 1060 "datetimemodule.c"
        var $31=(($27)&4294967295); //@line 1060 "datetimemodule.c"
        HEAP[$31]=$30; //@line 1060 "datetimemodule.c"
        var $32=(($27)&4294967295); //@line 1060 "datetimemodule.c"
        var $33=HEAP[$32]; //@line 1060 "datetimemodule.c"
        var $34=((($33))|0)==0; //@line 1060 "datetimemodule.c"
        if ($34) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1060 "datetimemodule.c"
      case 9: // $bb8
        var $35=HEAP[$repr_addr]; //@line 1060 "datetimemodule.c"
        var $36=(($35+4)&4294967295); //@line 1060 "datetimemodule.c"
        var $37=HEAP[$36]; //@line 1060 "datetimemodule.c"
        var $38=(($37+24)&4294967295); //@line 1060 "datetimemodule.c"
        var $39=HEAP[$38]; //@line 1060 "datetimemodule.c"
        var $40=HEAP[$repr_addr]; //@line 1060 "datetimemodule.c"
        FUNCTION_TABLE[$39]($40); //@line 1060 "datetimemodule.c"
        __label__ = 10; break; //@line 1060 "datetimemodule.c"
      case 10: // $bb9
        var $41=HEAP[$temp]; //@line 1061 "datetimemodule.c"
        var $42=($41)==0; //@line 1061 "datetimemodule.c"
        if ($42) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1061 "datetimemodule.c"
      case 11: // $bb10
        HEAP[$0]=0; //@line 1062 "datetimemodule.c"
        __label__ = 13; break; //@line 1062 "datetimemodule.c"
      case 12: // $bb11
        var $43=HEAP[$temp]; //@line 1063 "datetimemodule.c"
        HEAP[$repr_addr]=$43; //@line 1063 "datetimemodule.c"
        var $44=_PyString_FromString(((__str50)&4294967295)); //@line 1066 "datetimemodule.c"
        _PyString_ConcatAndDel($repr_addr, $44); //@line 1066 "datetimemodule.c"
        var $45=HEAP[$tzinfo_addr]; //@line 1069 "datetimemodule.c"
        var $46=_PyObject_Repr($45); //@line 1069 "datetimemodule.c"
        _PyString_ConcatAndDel($repr_addr, $46); //@line 1069 "datetimemodule.c"
        var $47=_PyString_FromString(((__str51)&4294967295)); //@line 1072 "datetimemodule.c"
        _PyString_ConcatAndDel($repr_addr, $47); //@line 1072 "datetimemodule.c"
        var $48=HEAP[$repr_addr]; //@line 1073 "datetimemodule.c"
        HEAP[$0]=$48; //@line 1073 "datetimemodule.c"
        __label__ = 13; break; //@line 1073 "datetimemodule.c"
      case 13: // $bb12
        var $49=HEAP[$0]; //@line 1055 "datetimemodule.c"
        HEAP[$retval]=$49; //@line 1055 "datetimemodule.c"
        __label__ = 14; break; //@line 1055 "datetimemodule.c"
      case 14: // $return
        var $retval13=HEAP[$retval]; //@line 1055 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 1055 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _format_ctime($date, $hours, $minutes, $seconds) {
    var __stackBase__  = STACKTOP; STACKTOP += 156; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 156);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $date_addr=__stackBase__;
        var $hours_addr=__stackBase__+4;
        var $minutes_addr=__stackBase__+8;
        var $seconds_addr=__stackBase__+12;
        var $retval=__stackBase__+16;
        var $0=__stackBase__+20;
        var $buffer=__stackBase__+24;
        var $wday=__stackBase__+152;
        var $_alloca_point_=0;
        HEAP[$date_addr]=$date;
        HEAP[$hours_addr]=$hours;
        HEAP[$minutes_addr]=$minutes;
        HEAP[$seconds_addr]=$seconds;
        var $1=HEAP[$date_addr]; //@line 1092 "datetimemodule.c"
        var $2=(($1+13)&4294967295); //@line 1092 "datetimemodule.c"
        var $3=(($2+3)&4294967295); //@line 1092 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 1092 "datetimemodule.c"
        var $5=unSign(($4), 8, 0); //@line 1092 "datetimemodule.c"
        var $6=HEAP[$date_addr]; //@line 1092 "datetimemodule.c"
        var $7=(($6+13)&4294967295); //@line 1092 "datetimemodule.c"
        var $8=(($7+2)&4294967295); //@line 1092 "datetimemodule.c"
        var $9=HEAP[$8]; //@line 1092 "datetimemodule.c"
        var $10=unSign(($9), 8, 0); //@line 1092 "datetimemodule.c"
        var $11=HEAP[$date_addr]; //@line 1092 "datetimemodule.c"
        var $12=(($11+13)&4294967295); //@line 1092 "datetimemodule.c"
        var $13=(($12)&4294967295); //@line 1092 "datetimemodule.c"
        var $14=HEAP[$13]; //@line 1092 "datetimemodule.c"
        var $15=unSign(($14), 8, 0); //@line 1092 "datetimemodule.c"
        var $16=($15) << 8; //@line 1092 "datetimemodule.c"
        var $17=HEAP[$date_addr]; //@line 1092 "datetimemodule.c"
        var $18=(($17+13)&4294967295); //@line 1092 "datetimemodule.c"
        var $19=(($18+1)&4294967295); //@line 1092 "datetimemodule.c"
        var $20=HEAP[$19]; //@line 1092 "datetimemodule.c"
        var $21=unSign(($20), 8, 0); //@line 1092 "datetimemodule.c"
        var $22=($16) | ($21); //@line 1092 "datetimemodule.c"
        var $23=_weekday($22, $10, $5); //@line 1092 "datetimemodule.c"
        HEAP[$wday]=$23; //@line 1092 "datetimemodule.c"
        var $24=HEAP[$date_addr]; //@line 1094 "datetimemodule.c"
        var $25=(($24+13)&4294967295); //@line 1094 "datetimemodule.c"
        var $26=(($25)&4294967295); //@line 1094 "datetimemodule.c"
        var $27=HEAP[$26]; //@line 1094 "datetimemodule.c"
        var $28=unSign(($27), 8, 0); //@line 1094 "datetimemodule.c"
        var $29=($28) << 8; //@line 1094 "datetimemodule.c"
        var $30=HEAP[$date_addr]; //@line 1094 "datetimemodule.c"
        var $31=(($30+13)&4294967295); //@line 1094 "datetimemodule.c"
        var $32=(($31+1)&4294967295); //@line 1094 "datetimemodule.c"
        var $33=HEAP[$32]; //@line 1094 "datetimemodule.c"
        var $34=unSign(($33), 8, 0); //@line 1094 "datetimemodule.c"
        var $35=($29) | ($34); //@line 1094 "datetimemodule.c"
        var $36=HEAP[$date_addr]; //@line 1094 "datetimemodule.c"
        var $37=(($36+13)&4294967295); //@line 1094 "datetimemodule.c"
        var $38=(($37+3)&4294967295); //@line 1094 "datetimemodule.c"
        var $39=HEAP[$38]; //@line 1094 "datetimemodule.c"
        var $40=unSign(($39), 8, 0); //@line 1094 "datetimemodule.c"
        var $41=HEAP[$date_addr]; //@line 1094 "datetimemodule.c"
        var $42=(($41+13)&4294967295); //@line 1094 "datetimemodule.c"
        var $43=(($42+2)&4294967295); //@line 1094 "datetimemodule.c"
        var $44=HEAP[$43]; //@line 1094 "datetimemodule.c"
        var $45=unSign(($44), 8, 0); //@line 1094 "datetimemodule.c"
        var $46=((($45) - 1)&4294967295); //@line 1094 "datetimemodule.c"
        var $47=((_MonthNames_9355+$46*4)&4294967295); //@line 1094 "datetimemodule.c"
        var $48=HEAP[$47]; //@line 1094 "datetimemodule.c"
        var $49=HEAP[$wday]; //@line 1094 "datetimemodule.c"
        var $50=((_DayNames_9354+$49*4)&4294967295); //@line 1094 "datetimemodule.c"
        var $51=HEAP[$50]; //@line 1094 "datetimemodule.c"
        var $buffer1=$buffer; //@line 1094 "datetimemodule.c"
        var $52=HEAP[$hours_addr]; //@line 1094 "datetimemodule.c"
        var $53=HEAP[$minutes_addr]; //@line 1094 "datetimemodule.c"
        var $54=HEAP[$seconds_addr]; //@line 1094 "datetimemodule.c"
        var $55=_PyOS_snprintf($buffer1, 128, ((__str71)&4294967295), $51, $48, $40, $52, $53, $54, $35); //@line 1094 "datetimemodule.c"
        var $buffer2=$buffer; //@line 1098 "datetimemodule.c"
        var $56=_PyString_FromString($buffer2); //@line 1098 "datetimemodule.c"
        HEAP[$0]=$56; //@line 1098 "datetimemodule.c"
        var $57=HEAP[$0]; //@line 1098 "datetimemodule.c"
        HEAP[$retval]=$57; //@line 1098 "datetimemodule.c"
        __label__ = 1; break; //@line 1098 "datetimemodule.c"
      case 1: // $return
        var $retval3=HEAP[$retval]; //@line 1098 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 1098 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _format_utcoffset($buf, $buflen, $sep, $tzinfo, $tzinfoarg) {
    var __stackBase__  = STACKTOP; STACKTOP += 45; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 45);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $buf_addr=__stackBase__;
        var $buflen_addr=__stackBase__+4;
        var $sep_addr=__stackBase__+8;
        var $tzinfo_addr=__stackBase__+12;
        var $tzinfoarg_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $offset=__stackBase__+28;
        var $hours=__stackBase__+32;
        var $minutes=__stackBase__+36;
        var $sign=__stackBase__+40;
        var $none=__stackBase__+41;
        var $_alloca_point_=0;
        HEAP[$buf_addr]=$buf;
        HEAP[$buflen_addr]=$buflen;
        HEAP[$sep_addr]=$sep;
        HEAP[$tzinfo_addr]=$tzinfo;
        HEAP[$tzinfoarg_addr]=$tzinfoarg;
        var $1=HEAP[$buflen_addr]; //@line 1121 "datetimemodule.c"
        var $2=((($1))|0)==0; //@line 1121 "datetimemodule.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1121 "datetimemodule.c"
      case 1: // $bb
        ___assert_fail(((__str72)&4294967295), ((__str1)&4294967295), 1121, ((___PRETTY_FUNCTION___9398)&4294967295)); //@line 1121 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 3849"; //@line 1121 "datetimemodule.c"
      case 2: // $bb1
        var $3=HEAP[$tzinfo_addr]; //@line 1123 "datetimemodule.c"
        var $4=HEAP[$tzinfoarg_addr]; //@line 1123 "datetimemodule.c"
        var $5=_call_utcoffset($3, $4, $none); //@line 1123 "datetimemodule.c"
        HEAP[$offset]=$5; //@line 1123 "datetimemodule.c"
        var $6=HEAP[$offset]; //@line 1124 "datetimemodule.c"
        var $7=((($6))|0)==-1; //@line 1124 "datetimemodule.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 1124 "datetimemodule.c"
      case 3: // $bb2
        var $8=_PyErr_Occurred(); //@line 1124 "datetimemodule.c"
        var $9=($8)!=0; //@line 1124 "datetimemodule.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1124 "datetimemodule.c"
      case 4: // $bb3
        HEAP[$0]=-1; //@line 1125 "datetimemodule.c"
        __label__ = 10; break; //@line 1125 "datetimemodule.c"
      case 5: // $bb4
        var $10=HEAP[$none]; //@line 1126 "datetimemodule.c"
        var $11=((($10))|0)!=0; //@line 1126 "datetimemodule.c"
        if ($11) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1126 "datetimemodule.c"
      case 6: // $bb5
        var $12=HEAP[$buf_addr]; //@line 1127 "datetimemodule.c"
        HEAP[$12]=0; //@line 1127 "datetimemodule.c"
        HEAP[$0]=0; //@line 1128 "datetimemodule.c"
        __label__ = 10; break; //@line 1128 "datetimemodule.c"
      case 7: // $bb6
        HEAP[$sign]=43; //@line 1130 "datetimemodule.c"
        var $13=HEAP[$offset]; //@line 1131 "datetimemodule.c"
        var $14=((($13))|0) < 0; //@line 1131 "datetimemodule.c"
        if ($14) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1131 "datetimemodule.c"
      case 8: // $bb7
        HEAP[$sign]=45; //@line 1132 "datetimemodule.c"
        var $15=HEAP[$offset]; //@line 1133 "datetimemodule.c"
        var $16=((0 - ($15))&4294967295); //@line 1133 "datetimemodule.c"
        HEAP[$offset]=$16; //@line 1133 "datetimemodule.c"
        __label__ = 9; break; //@line 1133 "datetimemodule.c"
      case 9: // $bb8
        var $17=HEAP[$offset]; //@line 1135 "datetimemodule.c"
        var $18=_divmod($17, 60, $minutes); //@line 1135 "datetimemodule.c"
        HEAP[$hours]=$18; //@line 1135 "datetimemodule.c"
        var $19=HEAP[$minutes]; //@line 1136 "datetimemodule.c"
        var $20=HEAP[$sign]; //@line 1136 "datetimemodule.c"
        var $21=reSign(($20), 8, 0); //@line 1136 "datetimemodule.c"
        var $22=HEAP[$buf_addr]; //@line 1136 "datetimemodule.c"
        var $23=HEAP[$buflen_addr]; //@line 1136 "datetimemodule.c"
        var $24=HEAP[$hours]; //@line 1136 "datetimemodule.c"
        var $25=HEAP[$sep_addr]; //@line 1136 "datetimemodule.c"
        var $26=_PyOS_snprintf($22, $23, ((__str73)&4294967295), $21, $24, $25, $19); //@line 1136 "datetimemodule.c"
        HEAP[$0]=0; //@line 1137 "datetimemodule.c"
        __label__ = 10; break; //@line 1137 "datetimemodule.c"
      case 10: // $bb9
        var $27=HEAP[$0]; //@line 1125 "datetimemodule.c"
        HEAP[$retval]=$27; //@line 1125 "datetimemodule.c"
        __label__ = 11; break; //@line 1125 "datetimemodule.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 1125 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 1125 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _make_freplacement($object) {
    var __stackBase__  = STACKTOP; STACKTOP += 76; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 76);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $object_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $freplacement=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$object_addr]=$object;
        var $1=HEAP[$object_addr]; //@line 1144 "datetimemodule.c"
        var $2=(($1+4)&4294967295); //@line 1144 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 1144 "datetimemodule.c"
        var $4=($3)==(_PyDateTime_TimeType); //@line 1144 "datetimemodule.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 1144 "datetimemodule.c"
      case 1: // $bb
        var $5=HEAP[$object_addr]; //@line 1144 "datetimemodule.c"
        var $6=(($5+4)&4294967295); //@line 1144 "datetimemodule.c"
        var $7=HEAP[$6]; //@line 1144 "datetimemodule.c"
        var $8=_PyType_IsSubtype($7, _PyDateTime_TimeType); //@line 1144 "datetimemodule.c"
        var $9=((($8))|0)!=0; //@line 1144 "datetimemodule.c"
        if ($9) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1144 "datetimemodule.c"
      case 2: // $bb1
        var $10=HEAP[$object_addr]; //@line 1145 "datetimemodule.c"
        var $11=$10; //@line 1145 "datetimemodule.c"
        var $12=(($11+13)&4294967295); //@line 1145 "datetimemodule.c"
        var $13=(($12+3)&4294967295); //@line 1145 "datetimemodule.c"
        var $14=HEAP[$13]; //@line 1145 "datetimemodule.c"
        var $15=unSign(($14), 8, 0); //@line 1145 "datetimemodule.c"
        var $16=($15) << 16; //@line 1145 "datetimemodule.c"
        var $17=HEAP[$object_addr]; //@line 1145 "datetimemodule.c"
        var $18=$17; //@line 1145 "datetimemodule.c"
        var $19=(($18+13)&4294967295); //@line 1145 "datetimemodule.c"
        var $20=(($19+4)&4294967295); //@line 1145 "datetimemodule.c"
        var $21=HEAP[$20]; //@line 1145 "datetimemodule.c"
        var $22=unSign(($21), 8, 0); //@line 1145 "datetimemodule.c"
        var $23=($22) << 8; //@line 1145 "datetimemodule.c"
        var $24=($16) | ($23); //@line 1145 "datetimemodule.c"
        var $25=HEAP[$object_addr]; //@line 1145 "datetimemodule.c"
        var $26=$25; //@line 1145 "datetimemodule.c"
        var $27=(($26+13)&4294967295); //@line 1145 "datetimemodule.c"
        var $28=(($27+5)&4294967295); //@line 1145 "datetimemodule.c"
        var $29=HEAP[$28]; //@line 1145 "datetimemodule.c"
        var $30=unSign(($29), 8, 0); //@line 1145 "datetimemodule.c"
        var $31=($24) | ($30); //@line 1145 "datetimemodule.c"
        var $freplacement2=$freplacement; //@line 1145 "datetimemodule.c"
        var $32=_sprintf($freplacement2, ((__str74)&4294967295), $31); //@line 1145 "datetimemodule.c"
        __label__ = 7; break; //@line 1145 "datetimemodule.c"
      case 3: // $bb3
        var $33=HEAP[$object_addr]; //@line 1146 "datetimemodule.c"
        var $34=(($33+4)&4294967295); //@line 1146 "datetimemodule.c"
        var $35=HEAP[$34]; //@line 1146 "datetimemodule.c"
        var $36=($35)==(_PyDateTime_DateTimeType); //@line 1146 "datetimemodule.c"
        if ($36) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 1146 "datetimemodule.c"
      case 4: // $bb4
        var $37=HEAP[$object_addr]; //@line 1146 "datetimemodule.c"
        var $38=(($37+4)&4294967295); //@line 1146 "datetimemodule.c"
        var $39=HEAP[$38]; //@line 1146 "datetimemodule.c"
        var $40=_PyType_IsSubtype($39, _PyDateTime_DateTimeType); //@line 1146 "datetimemodule.c"
        var $41=((($40))|0)!=0; //@line 1146 "datetimemodule.c"
        if ($41) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1146 "datetimemodule.c"
      case 5: // $bb5
        var $42=HEAP[$object_addr]; //@line 1147 "datetimemodule.c"
        var $43=$42; //@line 1147 "datetimemodule.c"
        var $44=(($43+13)&4294967295); //@line 1147 "datetimemodule.c"
        var $45=(($44+7)&4294967295); //@line 1147 "datetimemodule.c"
        var $46=HEAP[$45]; //@line 1147 "datetimemodule.c"
        var $47=unSign(($46), 8, 0); //@line 1147 "datetimemodule.c"
        var $48=($47) << 16; //@line 1147 "datetimemodule.c"
        var $49=HEAP[$object_addr]; //@line 1147 "datetimemodule.c"
        var $50=$49; //@line 1147 "datetimemodule.c"
        var $51=(($50+13)&4294967295); //@line 1147 "datetimemodule.c"
        var $52=(($51+8)&4294967295); //@line 1147 "datetimemodule.c"
        var $53=HEAP[$52]; //@line 1147 "datetimemodule.c"
        var $54=unSign(($53), 8, 0); //@line 1147 "datetimemodule.c"
        var $55=($54) << 8; //@line 1147 "datetimemodule.c"
        var $56=($48) | ($55); //@line 1147 "datetimemodule.c"
        var $57=HEAP[$object_addr]; //@line 1147 "datetimemodule.c"
        var $58=$57; //@line 1147 "datetimemodule.c"
        var $59=(($58+13)&4294967295); //@line 1147 "datetimemodule.c"
        var $60=(($59+9)&4294967295); //@line 1147 "datetimemodule.c"
        var $61=HEAP[$60]; //@line 1147 "datetimemodule.c"
        var $62=unSign(($61), 8, 0); //@line 1147 "datetimemodule.c"
        var $63=($56) | ($62); //@line 1147 "datetimemodule.c"
        var $freplacement6=$freplacement; //@line 1147 "datetimemodule.c"
        var $64=_sprintf($freplacement6, ((__str74)&4294967295), $63); //@line 1147 "datetimemodule.c"
        __label__ = 7; break; //@line 1147 "datetimemodule.c"
      case 6: // $bb7
        var $freplacement8=$freplacement; //@line 1149 "datetimemodule.c"
        var $65=_sprintf($freplacement8, ((__str74)&4294967295), 0); //@line 1149 "datetimemodule.c"
        __label__ = 7; break; //@line 1149 "datetimemodule.c"
      case 7: // $bb9
        var $freplacement10=$freplacement; //@line 1151 "datetimemodule.c"
        var $66=_strlen($freplacement10); //@line 1151 "datetimemodule.c"
        var $freplacement11=$freplacement; //@line 1151 "datetimemodule.c"
        var $67=_PyString_FromStringAndSize($freplacement11, $66); //@line 1151 "datetimemodule.c"
        HEAP[$0]=$67; //@line 1151 "datetimemodule.c"
        var $68=HEAP[$0]; //@line 1151 "datetimemodule.c"
        HEAP[$retval]=$68; //@line 1151 "datetimemodule.c"
        __label__ = 8; break; //@line 1151 "datetimemodule.c"
      case 8: // $return
        var $retval12=HEAP[$retval]; //@line 1151 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval12; //@line 1151 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _wrap_strftime($object, $format, $format_len, $timetuple, $tzinfoarg) {
    var __stackBase__  = STACKTOP; STACKTOP += 201; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 201);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $object_addr=__stackBase__;
        var $format_addr=__stackBase__+4;
        var $format_len_addr=__stackBase__+8;
        var $timetuple_addr=__stackBase__+12;
        var $tzinfoarg_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $result=__stackBase__+28;
        var $zreplacement=__stackBase__+32;
        var $Zreplacement=__stackBase__+36;
        var $freplacement=__stackBase__+40;
        var $pin=__stackBase__+44;
        var $ch=__stackBase__+48;
        var $newfmt=__stackBase__+49;
        var $pnew=__stackBase__+53;
        var $totalnew=__stackBase__+57;
        var $usednew=__stackBase__+61;
        var $ptoappend=__stackBase__+65;
        var $ntoappend=__stackBase__+69;
        var $year=__stackBase__+73;
        var $pyyear=__stackBase__+77;
        var $buf=__stackBase__+81;
        var $tzinfo=__stackBase__+181;
        var $tzinfo38=__stackBase__+185;
        var $temp=__stackBase__+189;
        var $bigger=__stackBase__+193;
        var $time=__stackBase__+197;
        var $_alloca_point_=0;
        HEAP[$object_addr]=$object;
        HEAP[$format_addr]=$format;
        HEAP[$format_len_addr]=$format_len;
        HEAP[$timetuple_addr]=$timetuple;
        HEAP[$tzinfoarg_addr]=$tzinfoarg;
        HEAP[$result]=0; //@line 1165 "datetimemodule.c"
        HEAP[$zreplacement]=0; //@line 1167 "datetimemodule.c"
        HEAP[$Zreplacement]=0; //@line 1168 "datetimemodule.c"
        HEAP[$freplacement]=0; //@line 1169 "datetimemodule.c"
        HEAP[$newfmt]=0; //@line 1174 "datetimemodule.c"
        var $1=HEAP[$object_addr]; //@line 1183 "datetimemodule.c"
        var $2=($1)==0; //@line 1183 "datetimemodule.c"
        if ($2) { __label__ = 3; break; } else { __label__ = 1; break; } //@line 1183 "datetimemodule.c"
      case 1: // $bb
        var $3=HEAP[$format_addr]; //@line 1183 "datetimemodule.c"
        var $4=($3)==0; //@line 1183 "datetimemodule.c"
        if ($4) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 1183 "datetimemodule.c"
      case 2: // $bb1
        var $5=HEAP[$timetuple_addr]; //@line 1183 "datetimemodule.c"
        var $6=($5)==0; //@line 1183 "datetimemodule.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1183 "datetimemodule.c"
      case 3: // $bb2
        ___assert_fail(((__str75)&4294967295), ((__str1)&4294967295), 1183, ((___PRETTY_FUNCTION___9485)&4294967295)); //@line 1183 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 4112"; //@line 1183 "datetimemodule.c"
      case 4: // $bb3
        var $7=HEAP[$timetuple_addr]; //@line 1196 "datetimemodule.c"
        var $8=_PySequence_GetItem($7, 0); //@line 1196 "datetimemodule.c"
        HEAP[$pyyear]=$8; //@line 1196 "datetimemodule.c"
        var $9=HEAP[$pyyear]; //@line 1197 "datetimemodule.c"
        var $10=($9)==0; //@line 1197 "datetimemodule.c"
        if ($10) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1197 "datetimemodule.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 1197 "datetimemodule.c"
        __label__ = 96; break; //@line 1197 "datetimemodule.c"
      case 6: // $bb5
        var $11=HEAP[$pyyear]; //@line 1198 "datetimemodule.c"
        var $12=(($11+4)&4294967295); //@line 1198 "datetimemodule.c"
        var $13=HEAP[$12]; //@line 1198 "datetimemodule.c"
        var $14=(($13+84)&4294967295); //@line 1198 "datetimemodule.c"
        var $15=HEAP[$14]; //@line 1198 "datetimemodule.c"
        var $16=($15) & 8388608; //@line 1198 "datetimemodule.c"
        var $17=((($16))|0)==0; //@line 1198 "datetimemodule.c"
        if ($17) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1198 "datetimemodule.c"
      case 7: // $bb6
        ___assert_fail(((__str76)&4294967295), ((__str1)&4294967295), 1198, ((___PRETTY_FUNCTION___9485)&4294967295)); //@line 1198 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 4140"; //@line 1198 "datetimemodule.c"
      case 8: // $bb7
        var $18=HEAP[$pyyear]; //@line 1199 "datetimemodule.c"
        var $19=_PyInt_AsLong($18); //@line 1199 "datetimemodule.c"
        HEAP[$year]=$19; //@line 1199 "datetimemodule.c"
        var $20=HEAP[$pyyear]; //@line 1200 "datetimemodule.c"
        var $21=(($20)&4294967295); //@line 1200 "datetimemodule.c"
        var $22=HEAP[$21]; //@line 1200 "datetimemodule.c"
        var $23=((($22) - 1)&4294967295); //@line 1200 "datetimemodule.c"
        var $24=HEAP[$pyyear]; //@line 1200 "datetimemodule.c"
        var $25=(($24)&4294967295); //@line 1200 "datetimemodule.c"
        HEAP[$25]=$23; //@line 1200 "datetimemodule.c"
        var $26=HEAP[$pyyear]; //@line 1200 "datetimemodule.c"
        var $27=(($26)&4294967295); //@line 1200 "datetimemodule.c"
        var $28=HEAP[$27]; //@line 1200 "datetimemodule.c"
        var $29=((($28))|0)==0; //@line 1200 "datetimemodule.c"
        if ($29) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1200 "datetimemodule.c"
      case 9: // $bb8
        var $30=HEAP[$pyyear]; //@line 1200 "datetimemodule.c"
        var $31=(($30+4)&4294967295); //@line 1200 "datetimemodule.c"
        var $32=HEAP[$31]; //@line 1200 "datetimemodule.c"
        var $33=(($32+24)&4294967295); //@line 1200 "datetimemodule.c"
        var $34=HEAP[$33]; //@line 1200 "datetimemodule.c"
        var $35=HEAP[$pyyear]; //@line 1200 "datetimemodule.c"
        FUNCTION_TABLE[$34]($35); //@line 1200 "datetimemodule.c"
        __label__ = 10; break; //@line 1200 "datetimemodule.c"
      case 10: // $bb9
        var $36=HEAP[$year]; //@line 1201 "datetimemodule.c"
        var $37=((($36))|0) <= 1899; //@line 1201 "datetimemodule.c"
        if ($37) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1201 "datetimemodule.c"
      case 11: // $bb10
        var $38=HEAP[_PyExc_ValueError]; //@line 1202 "datetimemodule.c"
        var $39=HEAP[$year]; //@line 1202 "datetimemodule.c"
        var $40=_PyErr_Format($38, ((__str77)&4294967295), $39); //@line 1202 "datetimemodule.c"
        HEAP[$0]=0; //@line 1206 "datetimemodule.c"
        __label__ = 96; break; //@line 1206 "datetimemodule.c"
      case 12: // $bb11
        var $41=HEAP[$format_len_addr]; //@line 1214 "datetimemodule.c"
        var $42=((($41))>>>0) > 2147483646; //@line 1214 "datetimemodule.c"
        if ($42) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1214 "datetimemodule.c"
      case 13: // $bb12
        var $43=_PyErr_NoMemory(); //@line 1215 "datetimemodule.c"
        __label__ = 83; break; //@line 1215 "datetimemodule.c"
      case 14: // $bb13
        var $44=HEAP[$format_len_addr]; //@line 1219 "datetimemodule.c"
        var $45=((($44) + 1)&4294967295); //@line 1219 "datetimemodule.c"
        HEAP[$totalnew]=$45; //@line 1219 "datetimemodule.c"
        var $46=HEAP[$totalnew]; //@line 1220 "datetimemodule.c"
        var $47=_PyString_FromStringAndSize(0, $46); //@line 1220 "datetimemodule.c"
        HEAP[$newfmt]=$47; //@line 1220 "datetimemodule.c"
        var $48=HEAP[$newfmt]; //@line 1221 "datetimemodule.c"
        var $49=($48)==0; //@line 1221 "datetimemodule.c"
        if ($49) { __label__ = 83; break; } else { __label__ = 15; break; } //@line 1221 "datetimemodule.c"
      case 15: // $bb14
        var $50=HEAP[$newfmt]; //@line 1222 "datetimemodule.c"
        var $51=_PyString_AsString($50); //@line 1222 "datetimemodule.c"
        HEAP[$pnew]=$51; //@line 1222 "datetimemodule.c"
        HEAP[$usednew]=0; //@line 1223 "datetimemodule.c"
        var $52=HEAP[$format_addr]; //@line 1225 "datetimemodule.c"
        HEAP[$pin]=$52; //@line 1225 "datetimemodule.c"
        __label__ = 78; break; //@line 1225 "datetimemodule.c"
      case 16: // $bb15
        var $53=HEAP[$ch]; //@line 1227 "datetimemodule.c"
        var $54=reSign(($53), 8, 0)!=37; //@line 1227 "datetimemodule.c"
        if ($54) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 1227 "datetimemodule.c"
      case 17: // $bb16
        var $55=HEAP[$pin]; //@line 1228 "datetimemodule.c"
        var $56=(($55+-1)&4294967295); //@line 1228 "datetimemodule.c"
        HEAP[$ptoappend]=$56; //@line 1228 "datetimemodule.c"
        HEAP[$ntoappend]=1; //@line 1229 "datetimemodule.c"
        __label__ = 67; break; //@line 1229 "datetimemodule.c"
      case 18: // $bb17
        var $57=HEAP[$pin]; //@line 1231 "datetimemodule.c"
        var $58=HEAP[$57]; //@line 1231 "datetimemodule.c"
        HEAP[$ch]=$58; //@line 1231 "datetimemodule.c"
        var $59=HEAP[$ch]; //@line 1231 "datetimemodule.c"
        var $60=reSign(($59), 8, 0)==0; //@line 1231 "datetimemodule.c"
        var $61=unSign(($60), 1, 0); //@line 1231 "datetimemodule.c"
        var $62=HEAP[$pin]; //@line 1231 "datetimemodule.c"
        var $63=(($62+1)&4294967295); //@line 1231 "datetimemodule.c"
        HEAP[$pin]=$63; //@line 1231 "datetimemodule.c"
        var $toBool=reSign(($61), 8, 0)!=0; //@line 1231 "datetimemodule.c"
        if ($toBool) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 1231 "datetimemodule.c"
      case 19: // $bb18
        var $64=HEAP[_PyExc_ValueError]; //@line 1233 "datetimemodule.c"
        _PyErr_SetString($64, ((__str78)&4294967295)); //@line 1233 "datetimemodule.c"
        __label__ = 83; break; //@line 1233 "datetimemodule.c"
      case 20: // $bb19
        var $65=HEAP[$ch]; //@line 1238 "datetimemodule.c"
        var $66=reSign(($65), 8, 0)==122; //@line 1238 "datetimemodule.c"
        if ($66) { __label__ = 21; break; } else { __label__ = 34; break; } //@line 1238 "datetimemodule.c"
      case 21: // $bb20
        var $67=HEAP[$zreplacement]; //@line 1239 "datetimemodule.c"
        var $68=($67)==0; //@line 1239 "datetimemodule.c"
        if ($68) { __label__ = 22; break; } else { __label__ = 31; break; } //@line 1239 "datetimemodule.c"
      case 22: // $bb21
        var $69=HEAP[$object_addr]; //@line 1242 "datetimemodule.c"
        var $70=_get_tzinfo_member($69); //@line 1242 "datetimemodule.c"
        HEAP[$tzinfo]=$70; //@line 1242 "datetimemodule.c"
        var $71=_PyString_FromString(((__str79)&4294967295)); //@line 1243 "datetimemodule.c"
        HEAP[$zreplacement]=$71; //@line 1243 "datetimemodule.c"
        var $72=HEAP[$zreplacement]; //@line 1244 "datetimemodule.c"
        var $73=($72)==0; //@line 1244 "datetimemodule.c"
        if ($73) { __label__ = 83; break; } else { __label__ = 23; break; } //@line 1244 "datetimemodule.c"
      case 23: // $bb22
        var $74=HEAP[$tzinfo]; //@line 1245 "datetimemodule.c"
        var $75=($74)!=(__Py_NoneStruct); //@line 1245 "datetimemodule.c"
        if ($75) { __label__ = 24; break; } else { __label__ = 31; break; } //@line 1245 "datetimemodule.c"
      case 24: // $bb23
        var $76=HEAP[$tzinfo]; //@line 1245 "datetimemodule.c"
        var $77=($76)!=0; //@line 1245 "datetimemodule.c"
        if ($77) { __label__ = 25; break; } else { __label__ = 31; break; } //@line 1245 "datetimemodule.c"
      case 25: // $bb24
        var $78=HEAP[$tzinfoarg_addr]; //@line 1246 "datetimemodule.c"
        var $79=($78)==0; //@line 1246 "datetimemodule.c"
        if ($79) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1246 "datetimemodule.c"
      case 26: // $bb25
        ___assert_fail(((__str38)&4294967295), ((__str1)&4294967295), 1246, ((___PRETTY_FUNCTION___9485)&4294967295)); //@line 1246 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 4279"; //@line 1246 "datetimemodule.c"
      case 27: // $bb26
        var $buf27=$buf; //@line 1247 "datetimemodule.c"
        var $80=HEAP[$tzinfo]; //@line 1247 "datetimemodule.c"
        var $81=HEAP[$tzinfoarg_addr]; //@line 1247 "datetimemodule.c"
        var $82=_format_utcoffset($buf27, 100, ((__str79)&4294967295), $80, $81); //@line 1247 "datetimemodule.c"
        var $83=((($82))|0) < 0; //@line 1247 "datetimemodule.c"
        if ($83) { __label__ = 83; break; } else { __label__ = 28; break; } //@line 1247 "datetimemodule.c"
      case 28: // $bb28
        var $84=HEAP[$zreplacement]; //@line 1253 "datetimemodule.c"
        var $85=(($84)&4294967295); //@line 1253 "datetimemodule.c"
        var $86=HEAP[$85]; //@line 1253 "datetimemodule.c"
        var $87=((($86) - 1)&4294967295); //@line 1253 "datetimemodule.c"
        var $88=HEAP[$zreplacement]; //@line 1253 "datetimemodule.c"
        var $89=(($88)&4294967295); //@line 1253 "datetimemodule.c"
        HEAP[$89]=$87; //@line 1253 "datetimemodule.c"
        var $90=HEAP[$zreplacement]; //@line 1253 "datetimemodule.c"
        var $91=(($90)&4294967295); //@line 1253 "datetimemodule.c"
        var $92=HEAP[$91]; //@line 1253 "datetimemodule.c"
        var $93=((($92))|0)==0; //@line 1253 "datetimemodule.c"
        if ($93) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 1253 "datetimemodule.c"
      case 29: // $bb29
        var $94=HEAP[$zreplacement]; //@line 1253 "datetimemodule.c"
        var $95=(($94+4)&4294967295); //@line 1253 "datetimemodule.c"
        var $96=HEAP[$95]; //@line 1253 "datetimemodule.c"
        var $97=(($96+24)&4294967295); //@line 1253 "datetimemodule.c"
        var $98=HEAP[$97]; //@line 1253 "datetimemodule.c"
        var $99=HEAP[$zreplacement]; //@line 1253 "datetimemodule.c"
        FUNCTION_TABLE[$98]($99); //@line 1253 "datetimemodule.c"
        __label__ = 30; break; //@line 1253 "datetimemodule.c"
      case 30: // $bb30
        var $buf31=$buf; //@line 1254 "datetimemodule.c"
        var $100=_PyString_FromString($buf31); //@line 1254 "datetimemodule.c"
        HEAP[$zreplacement]=$100; //@line 1254 "datetimemodule.c"
        var $101=HEAP[$zreplacement]; //@line 1255 "datetimemodule.c"
        var $102=($101)==0; //@line 1255 "datetimemodule.c"
        if ($102) { __label__ = 83; break; } else { __label__ = 31; break; } //@line 1255 "datetimemodule.c"
      case 31: // $bb32
        var $103=HEAP[$zreplacement]; //@line 1258 "datetimemodule.c"
        var $104=($103)==0; //@line 1258 "datetimemodule.c"
        if ($104) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 1258 "datetimemodule.c"
      case 32: // $bb33
        ___assert_fail(((__str80)&4294967295), ((__str1)&4294967295), 1258, ((___PRETTY_FUNCTION___9485)&4294967295)); //@line 1258 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 4328"; //@line 1258 "datetimemodule.c"
      case 33: // $bb34
        var $105=HEAP[$zreplacement]; //@line 1259 "datetimemodule.c"
        var $106=$105; //@line 1259 "datetimemodule.c"
        var $107=(($106+20)&4294967295); //@line 1259 "datetimemodule.c"
        var $108=(($107)&4294967295); //@line 1259 "datetimemodule.c"
        HEAP[$ptoappend]=$108; //@line 1259 "datetimemodule.c"
        var $109=HEAP[$zreplacement]; //@line 1260 "datetimemodule.c"
        var $110=$109; //@line 1260 "datetimemodule.c"
        var $111=(($110+8)&4294967295); //@line 1260 "datetimemodule.c"
        var $112=HEAP[$111]; //@line 1260 "datetimemodule.c"
        HEAP[$ntoappend]=$112; //@line 1260 "datetimemodule.c"
        __label__ = 67; break; //@line 1260 "datetimemodule.c"
      case 34: // $bb35
        var $113=HEAP[$ch]; //@line 1262 "datetimemodule.c"
        var $114=reSign(($113), 8, 0)==90; //@line 1262 "datetimemodule.c"
        if ($114) { __label__ = 35; break; } else { __label__ = 58; break; } //@line 1262 "datetimemodule.c"
      case 35: // $bb36
        var $115=HEAP[$Zreplacement]; //@line 1264 "datetimemodule.c"
        var $116=($115)==0; //@line 1264 "datetimemodule.c"
        if ($116) { __label__ = 36; break; } else { __label__ = 55; break; } //@line 1264 "datetimemodule.c"
      case 36: // $bb37
        var $117=HEAP[$object_addr]; //@line 1265 "datetimemodule.c"
        var $118=_get_tzinfo_member($117); //@line 1265 "datetimemodule.c"
        HEAP[$tzinfo38]=$118; //@line 1265 "datetimemodule.c"
        var $119=_PyString_FromString(((__str79)&4294967295)); //@line 1266 "datetimemodule.c"
        HEAP[$Zreplacement]=$119; //@line 1266 "datetimemodule.c"
        var $120=HEAP[$Zreplacement]; //@line 1267 "datetimemodule.c"
        var $121=($120)==0; //@line 1267 "datetimemodule.c"
        if ($121) { __label__ = 83; break; } else { __label__ = 37; break; } //@line 1267 "datetimemodule.c"
      case 37: // $bb39
        var $122=HEAP[$tzinfo38]; //@line 1268 "datetimemodule.c"
        var $123=($122)!=(__Py_NoneStruct); //@line 1268 "datetimemodule.c"
        if ($123) { __label__ = 38; break; } else { __label__ = 55; break; } //@line 1268 "datetimemodule.c"
      case 38: // $bb40
        var $124=HEAP[$tzinfo38]; //@line 1268 "datetimemodule.c"
        var $125=($124)!=0; //@line 1268 "datetimemodule.c"
        if ($125) { __label__ = 39; break; } else { __label__ = 55; break; } //@line 1268 "datetimemodule.c"
      case 39: // $bb41
        var $126=HEAP[$tzinfoarg_addr]; //@line 1270 "datetimemodule.c"
        var $127=($126)==0; //@line 1270 "datetimemodule.c"
        if ($127) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 1270 "datetimemodule.c"
      case 40: // $bb42
        ___assert_fail(((__str38)&4294967295), ((__str1)&4294967295), 1270, ((___PRETTY_FUNCTION___9485)&4294967295)); //@line 1270 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 4382"; //@line 1270 "datetimemodule.c"
      case 41: // $bb43
        var $128=HEAP[$tzinfo38]; //@line 1271 "datetimemodule.c"
        var $129=HEAP[$tzinfoarg_addr]; //@line 1271 "datetimemodule.c"
        var $130=_call_tzname($128, $129); //@line 1271 "datetimemodule.c"
        HEAP[$temp]=$130; //@line 1271 "datetimemodule.c"
        var $131=HEAP[$temp]; //@line 1272 "datetimemodule.c"
        var $132=($131)==0; //@line 1272 "datetimemodule.c"
        if ($132) { __label__ = 83; break; } else { __label__ = 42; break; } //@line 1272 "datetimemodule.c"
      case 42: // $bb44
        var $133=HEAP[$temp]; //@line 1273 "datetimemodule.c"
        var $134=($133)!=(__Py_NoneStruct); //@line 1273 "datetimemodule.c"
        if ($134) { __label__ = 43; break; } else { __label__ = 53; break; } //@line 1273 "datetimemodule.c"
      case 43: // $bb45
        var $135=HEAP[$temp]; //@line 1274 "datetimemodule.c"
        var $136=(($135+4)&4294967295); //@line 1274 "datetimemodule.c"
        var $137=HEAP[$136]; //@line 1274 "datetimemodule.c"
        var $138=(($137+84)&4294967295); //@line 1274 "datetimemodule.c"
        var $139=HEAP[$138]; //@line 1274 "datetimemodule.c"
        var $140=($139) & 134217728; //@line 1274 "datetimemodule.c"
        var $141=((($140))|0)==0; //@line 1274 "datetimemodule.c"
        if ($141) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 1274 "datetimemodule.c"
      case 44: // $bb46
        ___assert_fail(((__str81)&4294967295), ((__str1)&4294967295), 1274, ((___PRETTY_FUNCTION___9485)&4294967295)); //@line 1274 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 4410"; //@line 1274 "datetimemodule.c"
      case 45: // $bb47
        var $142=HEAP[$Zreplacement]; //@line 1281 "datetimemodule.c"
        var $143=(($142)&4294967295); //@line 1281 "datetimemodule.c"
        var $144=HEAP[$143]; //@line 1281 "datetimemodule.c"
        var $145=((($144) - 1)&4294967295); //@line 1281 "datetimemodule.c"
        var $146=HEAP[$Zreplacement]; //@line 1281 "datetimemodule.c"
        var $147=(($146)&4294967295); //@line 1281 "datetimemodule.c"
        HEAP[$147]=$145; //@line 1281 "datetimemodule.c"
        var $148=HEAP[$Zreplacement]; //@line 1281 "datetimemodule.c"
        var $149=(($148)&4294967295); //@line 1281 "datetimemodule.c"
        var $150=HEAP[$149]; //@line 1281 "datetimemodule.c"
        var $151=((($150))|0)==0; //@line 1281 "datetimemodule.c"
        if ($151) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 1281 "datetimemodule.c"
      case 46: // $bb48
        var $152=HEAP[$Zreplacement]; //@line 1281 "datetimemodule.c"
        var $153=(($152+4)&4294967295); //@line 1281 "datetimemodule.c"
        var $154=HEAP[$153]; //@line 1281 "datetimemodule.c"
        var $155=(($154+24)&4294967295); //@line 1281 "datetimemodule.c"
        var $156=HEAP[$155]; //@line 1281 "datetimemodule.c"
        var $157=HEAP[$Zreplacement]; //@line 1281 "datetimemodule.c"
        FUNCTION_TABLE[$156]($157); //@line 1281 "datetimemodule.c"
        __label__ = 47; break; //@line 1281 "datetimemodule.c"
      case 47: // $bb49
        var $158=HEAP[$temp]; //@line 1282 "datetimemodule.c"
        var $159=__PyObject_CallMethod_SizeT($158, ((__str82)&4294967295), ((__str83)&4294967295), ((__str84)&4294967295), ((__str85)&4294967295)); //@line 1282 "datetimemodule.c"
        HEAP[$Zreplacement]=$159; //@line 1282 "datetimemodule.c"
        var $160=HEAP[$temp]; //@line 1285 "datetimemodule.c"
        var $161=(($160)&4294967295); //@line 1285 "datetimemodule.c"
        var $162=HEAP[$161]; //@line 1285 "datetimemodule.c"
        var $163=((($162) - 1)&4294967295); //@line 1285 "datetimemodule.c"
        var $164=HEAP[$temp]; //@line 1285 "datetimemodule.c"
        var $165=(($164)&4294967295); //@line 1285 "datetimemodule.c"
        HEAP[$165]=$163; //@line 1285 "datetimemodule.c"
        var $166=HEAP[$temp]; //@line 1285 "datetimemodule.c"
        var $167=(($166)&4294967295); //@line 1285 "datetimemodule.c"
        var $168=HEAP[$167]; //@line 1285 "datetimemodule.c"
        var $169=((($168))|0)==0; //@line 1285 "datetimemodule.c"
        if ($169) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 1285 "datetimemodule.c"
      case 48: // $bb50
        var $170=HEAP[$temp]; //@line 1285 "datetimemodule.c"
        var $171=(($170+4)&4294967295); //@line 1285 "datetimemodule.c"
        var $172=HEAP[$171]; //@line 1285 "datetimemodule.c"
        var $173=(($172+24)&4294967295); //@line 1285 "datetimemodule.c"
        var $174=HEAP[$173]; //@line 1285 "datetimemodule.c"
        var $175=HEAP[$temp]; //@line 1285 "datetimemodule.c"
        FUNCTION_TABLE[$174]($175); //@line 1285 "datetimemodule.c"
        __label__ = 49; break; //@line 1285 "datetimemodule.c"
      case 49: // $bb51
        var $176=HEAP[$Zreplacement]; //@line 1286 "datetimemodule.c"
        var $177=($176)==0; //@line 1286 "datetimemodule.c"
        if ($177) { __label__ = 83; break; } else { __label__ = 50; break; } //@line 1286 "datetimemodule.c"
      case 50: // $bb52
        var $178=HEAP[$Zreplacement]; //@line 1288 "datetimemodule.c"
        var $179=(($178+4)&4294967295); //@line 1288 "datetimemodule.c"
        var $180=HEAP[$179]; //@line 1288 "datetimemodule.c"
        var $181=(($180+84)&4294967295); //@line 1288 "datetimemodule.c"
        var $182=HEAP[$181]; //@line 1288 "datetimemodule.c"
        var $183=($182) & 134217728; //@line 1288 "datetimemodule.c"
        var $184=((($183))|0)==0; //@line 1288 "datetimemodule.c"
        if ($184) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 1288 "datetimemodule.c"
      case 51: // $bb53
        var $185=HEAP[_PyExc_TypeError]; //@line 1289 "datetimemodule.c"
        _PyErr_SetString($185, ((__str86)&4294967295)); //@line 1289 "datetimemodule.c"
        __label__ = 83; break; //@line 1289 "datetimemodule.c"
      case 52: // $bb54
        __label__ = 55; break; //@line 1289 "datetimemodule.c"
      case 53: // $bb55
        var $186=HEAP[$temp]; //@line 1294 "datetimemodule.c"
        var $187=(($186)&4294967295); //@line 1294 "datetimemodule.c"
        var $188=HEAP[$187]; //@line 1294 "datetimemodule.c"
        var $189=((($188) - 1)&4294967295); //@line 1294 "datetimemodule.c"
        var $190=HEAP[$temp]; //@line 1294 "datetimemodule.c"
        var $191=(($190)&4294967295); //@line 1294 "datetimemodule.c"
        HEAP[$191]=$189; //@line 1294 "datetimemodule.c"
        var $192=HEAP[$temp]; //@line 1294 "datetimemodule.c"
        var $193=(($192)&4294967295); //@line 1294 "datetimemodule.c"
        var $194=HEAP[$193]; //@line 1294 "datetimemodule.c"
        var $195=((($194))|0)==0; //@line 1294 "datetimemodule.c"
        if ($195) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 1294 "datetimemodule.c"
      case 54: // $bb56
        var $196=HEAP[$temp]; //@line 1294 "datetimemodule.c"
        var $197=(($196+4)&4294967295); //@line 1294 "datetimemodule.c"
        var $198=HEAP[$197]; //@line 1294 "datetimemodule.c"
        var $199=(($198+24)&4294967295); //@line 1294 "datetimemodule.c"
        var $200=HEAP[$199]; //@line 1294 "datetimemodule.c"
        var $201=HEAP[$temp]; //@line 1294 "datetimemodule.c"
        FUNCTION_TABLE[$200]($201); //@line 1294 "datetimemodule.c"
        __label__ = 55; break; //@line 1294 "datetimemodule.c"
      case 55: // $bb57
        var $202=HEAP[$Zreplacement]; //@line 1297 "datetimemodule.c"
        var $203=($202)==0; //@line 1297 "datetimemodule.c"
        if ($203) { __label__ = 56; break; } else { __label__ = 57; break; } //@line 1297 "datetimemodule.c"
      case 56: // $bb58
        ___assert_fail(((__str87)&4294967295), ((__str1)&4294967295), 1297, ((___PRETTY_FUNCTION___9485)&4294967295)); //@line 1297 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 4517"; //@line 1297 "datetimemodule.c"
      case 57: // $bb59
        var $204=HEAP[$Zreplacement]; //@line 1298 "datetimemodule.c"
        var $205=$204; //@line 1298 "datetimemodule.c"
        var $206=(($205+20)&4294967295); //@line 1298 "datetimemodule.c"
        var $207=(($206)&4294967295); //@line 1298 "datetimemodule.c"
        HEAP[$ptoappend]=$207; //@line 1298 "datetimemodule.c"
        var $208=HEAP[$Zreplacement]; //@line 1299 "datetimemodule.c"
        var $209=$208; //@line 1299 "datetimemodule.c"
        var $210=(($209+8)&4294967295); //@line 1299 "datetimemodule.c"
        var $211=HEAP[$210]; //@line 1299 "datetimemodule.c"
        HEAP[$ntoappend]=$211; //@line 1299 "datetimemodule.c"
        __label__ = 67; break; //@line 1299 "datetimemodule.c"
      case 58: // $bb60
        var $212=HEAP[$ch]; //@line 1301 "datetimemodule.c"
        var $213=reSign(($212), 8, 0)==102; //@line 1301 "datetimemodule.c"
        if ($213) { __label__ = 59; break; } else { __label__ = 66; break; } //@line 1301 "datetimemodule.c"
      case 59: // $bb61
        var $214=HEAP[$freplacement]; //@line 1303 "datetimemodule.c"
        var $215=($214)==0; //@line 1303 "datetimemodule.c"
        if ($215) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 1303 "datetimemodule.c"
      case 60: // $bb62
        var $216=HEAP[$object_addr]; //@line 1304 "datetimemodule.c"
        var $217=_make_freplacement($216); //@line 1304 "datetimemodule.c"
        HEAP[$freplacement]=$217; //@line 1304 "datetimemodule.c"
        var $218=HEAP[$freplacement]; //@line 1305 "datetimemodule.c"
        var $219=($218)==0; //@line 1305 "datetimemodule.c"
        if ($219) { __label__ = 83; break; } else { __label__ = 61; break; } //@line 1305 "datetimemodule.c"
      case 61: // $bb63
        var $220=HEAP[$freplacement]; //@line 1308 "datetimemodule.c"
        var $221=($220)==0; //@line 1308 "datetimemodule.c"
        if ($221) { __label__ = 62; break; } else { __label__ = 63; break; } //@line 1308 "datetimemodule.c"
      case 62: // $bb64
        ___assert_fail(((__str88)&4294967295), ((__str1)&4294967295), 1308, ((___PRETTY_FUNCTION___9485)&4294967295)); //@line 1308 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 4557"; //@line 1308 "datetimemodule.c"
      case 63: // $bb65
        var $222=HEAP[$freplacement]; //@line 1309 "datetimemodule.c"
        var $223=(($222+4)&4294967295); //@line 1309 "datetimemodule.c"
        var $224=HEAP[$223]; //@line 1309 "datetimemodule.c"
        var $225=(($224+84)&4294967295); //@line 1309 "datetimemodule.c"
        var $226=HEAP[$225]; //@line 1309 "datetimemodule.c"
        var $227=($226) & 134217728; //@line 1309 "datetimemodule.c"
        var $228=((($227))|0)==0; //@line 1309 "datetimemodule.c"
        if ($228) { __label__ = 64; break; } else { __label__ = 65; break; } //@line 1309 "datetimemodule.c"
      case 64: // $bb66
        ___assert_fail(((__str89)&4294967295), ((__str1)&4294967295), 1309, ((___PRETTY_FUNCTION___9485)&4294967295)); //@line 1309 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 4571"; //@line 1309 "datetimemodule.c"
      case 65: // $bb67
        var $229=HEAP[$freplacement]; //@line 1310 "datetimemodule.c"
        var $230=$229; //@line 1310 "datetimemodule.c"
        var $231=(($230+20)&4294967295); //@line 1310 "datetimemodule.c"
        var $232=(($231)&4294967295); //@line 1310 "datetimemodule.c"
        HEAP[$ptoappend]=$232; //@line 1310 "datetimemodule.c"
        var $233=HEAP[$freplacement]; //@line 1311 "datetimemodule.c"
        var $234=$233; //@line 1311 "datetimemodule.c"
        var $235=(($234+8)&4294967295); //@line 1311 "datetimemodule.c"
        var $236=HEAP[$235]; //@line 1311 "datetimemodule.c"
        HEAP[$ntoappend]=$236; //@line 1311 "datetimemodule.c"
        __label__ = 67; break; //@line 1311 "datetimemodule.c"
      case 66: // $bb68
        var $237=HEAP[$pin]; //@line 1315 "datetimemodule.c"
        var $238=(($237+-2)&4294967295); //@line 1315 "datetimemodule.c"
        HEAP[$ptoappend]=$238; //@line 1315 "datetimemodule.c"
        HEAP[$ntoappend]=2; //@line 1316 "datetimemodule.c"
        __label__ = 67; break; //@line 1316 "datetimemodule.c"
      case 67: // $bb69
        var $239=HEAP[$ptoappend]; //@line 1322 "datetimemodule.c"
        var $240=($239)==0; //@line 1322 "datetimemodule.c"
        if ($240) { __label__ = 68; break; } else { __label__ = 69; break; } //@line 1322 "datetimemodule.c"
      case 68: // $bb70
        ___assert_fail(((__str90)&4294967295), ((__str1)&4294967295), 1322, ((___PRETTY_FUNCTION___9485)&4294967295)); //@line 1322 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 4600"; //@line 1322 "datetimemodule.c"
      case 69: // $bb71
        var $241=HEAP[$ntoappend]; //@line 1324 "datetimemodule.c"
        var $242=((($241))|0)==0; //@line 1324 "datetimemodule.c"
        if ($242) { __label__ = 78; break; } else { __label__ = 70; break; } //@line 1324 "datetimemodule.c"
      case 70: // $bb72
        __label__ = 75; break; //@line 1324 "datetimemodule.c"
      case 71: // $bb73
        var $243=HEAP[$totalnew]; //@line 1327 "datetimemodule.c"
        var $244=($243) << 1; //@line 1327 "datetimemodule.c"
        HEAP[$bigger]=$244; //@line 1327 "datetimemodule.c"
        var $245=HEAP[$bigger]; //@line 1328 "datetimemodule.c"
        var $246=((($245))>>>0) >>> 1; //@line 1328 "datetimemodule.c"
        var $247=HEAP[$totalnew]; //@line 1328 "datetimemodule.c"
        var $248=((($246))|0)!=((($247))|0); //@line 1328 "datetimemodule.c"
        if ($248) { __label__ = 72; break; } else { __label__ = 73; break; } //@line 1328 "datetimemodule.c"
      case 72: // $bb74
        var $249=_PyErr_NoMemory(); //@line 1329 "datetimemodule.c"
        __label__ = 83; break; //@line 1329 "datetimemodule.c"
      case 73: // $bb75
        var $250=HEAP[$bigger]; //@line 1332 "datetimemodule.c"
        var $251=__PyString_Resize($newfmt, $250); //@line 1332 "datetimemodule.c"
        var $252=((($251))|0) < 0; //@line 1332 "datetimemodule.c"
        if ($252) { __label__ = 83; break; } else { __label__ = 74; break; } //@line 1332 "datetimemodule.c"
      case 74: // $bb76
        var $253=HEAP[$bigger]; //@line 1334 "datetimemodule.c"
        HEAP[$totalnew]=$253; //@line 1334 "datetimemodule.c"
        var $254=HEAP[$newfmt]; //@line 1335 "datetimemodule.c"
        var $255=_PyString_AsString($254); //@line 1335 "datetimemodule.c"
        var $256=HEAP[$usednew]; //@line 1335 "datetimemodule.c"
        var $257=(($255+$256)&4294967295); //@line 1335 "datetimemodule.c"
        HEAP[$pnew]=$257; //@line 1335 "datetimemodule.c"
        __label__ = 75; break; //@line 1335 "datetimemodule.c"
      case 75: // $bb77
        var $258=HEAP[$usednew]; //@line 1326 "datetimemodule.c"
        var $259=HEAP[$ntoappend]; //@line 1326 "datetimemodule.c"
        var $260=((($258) + ($259))&4294967295); //@line 1326 "datetimemodule.c"
        var $261=HEAP[$totalnew]; //@line 1326 "datetimemodule.c"
        var $262=((($260))>>>0) > ((($261))>>>0); //@line 1326 "datetimemodule.c"
        if ($262) { __label__ = 71; break; } else { __label__ = 76; break; } //@line 1326 "datetimemodule.c"
      case 76: // $bb78
        var $263=HEAP[$pnew]; //@line 1337 "datetimemodule.c"
        var $264=HEAP[$ptoappend]; //@line 1337 "datetimemodule.c"
        var $265=HEAP[$ntoappend]; //@line 1337 "datetimemodule.c"
        _llvm_memcpy_p0i8_p0i8_i32($263, $264, $265, 1, 0); //@line 1337 "datetimemodule.c"
        var $266=HEAP[$pnew]; //@line 1338 "datetimemodule.c"
        var $267=HEAP[$ntoappend]; //@line 1338 "datetimemodule.c"
        var $268=(($266+$267)&4294967295); //@line 1338 "datetimemodule.c"
        HEAP[$pnew]=$268; //@line 1338 "datetimemodule.c"
        var $269=HEAP[$usednew]; //@line 1339 "datetimemodule.c"
        var $270=HEAP[$ntoappend]; //@line 1339 "datetimemodule.c"
        var $271=((($269) + ($270))&4294967295); //@line 1339 "datetimemodule.c"
        HEAP[$usednew]=$271; //@line 1339 "datetimemodule.c"
        var $272=HEAP[$usednew]; //@line 1340 "datetimemodule.c"
        var $273=HEAP[$totalnew]; //@line 1340 "datetimemodule.c"
        var $274=((($272))>>>0) > ((($273))>>>0); //@line 1340 "datetimemodule.c"
        if ($274) { __label__ = 77; break; } else { __label__ = 78; break; } //@line 1340 "datetimemodule.c"
      case 77: // $bb79
        ___assert_fail(((__str91)&4294967295), ((__str1)&4294967295), 1340, ((___PRETTY_FUNCTION___9485)&4294967295)); //@line 1340 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 4669"; //@line 1340 "datetimemodule.c"
      case 78: // $bb80
        var $275=HEAP[$pin]; //@line 1226 "datetimemodule.c"
        var $276=HEAP[$275]; //@line 1226 "datetimemodule.c"
        HEAP[$ch]=$276; //@line 1226 "datetimemodule.c"
        var $277=HEAP[$ch]; //@line 1226 "datetimemodule.c"
        var $278=reSign(($277), 8, 0)!=0; //@line 1226 "datetimemodule.c"
        var $279=unSign(($278), 1, 0); //@line 1226 "datetimemodule.c"
        var $280=HEAP[$pin]; //@line 1226 "datetimemodule.c"
        var $281=(($280+1)&4294967295); //@line 1226 "datetimemodule.c"
        HEAP[$pin]=$281; //@line 1226 "datetimemodule.c"
        var $toBool81=reSign(($279), 8, 0)!=0; //@line 1226 "datetimemodule.c"
        if ($toBool81) { __label__ = 16; break; } else { __label__ = 79; break; } //@line 1226 "datetimemodule.c"
      case 79: // $bb82
        var $282=HEAP[$usednew]; //@line 1343 "datetimemodule.c"
        var $283=__PyString_Resize($newfmt, $282); //@line 1343 "datetimemodule.c"
        var $284=((($283))|0) < 0; //@line 1343 "datetimemodule.c"
        if ($284) { __label__ = 83; break; } else { __label__ = 80; break; } //@line 1343 "datetimemodule.c"
      case 80: // $bb83
        var $285=_PyImport_ImportModuleNoBlock(((__str92)&4294967295)); //@line 1346 "datetimemodule.c"
        HEAP[$time]=$285; //@line 1346 "datetimemodule.c"
        var $286=HEAP[$time]; //@line 1347 "datetimemodule.c"
        var $287=($286)==0; //@line 1347 "datetimemodule.c"
        if ($287) { __label__ = 83; break; } else { __label__ = 81; break; } //@line 1347 "datetimemodule.c"
      case 81: // $bb84
        var $288=HEAP[$newfmt]; //@line 1349 "datetimemodule.c"
        var $289=HEAP[$time]; //@line 1349 "datetimemodule.c"
        var $290=HEAP[$timetuple_addr]; //@line 1349 "datetimemodule.c"
        var $291=__PyObject_CallMethod_SizeT($289, ((__str93)&4294967295), ((__str94)&4294967295), $288, $290); //@line 1349 "datetimemodule.c"
        HEAP[$result]=$291; //@line 1349 "datetimemodule.c"
        var $292=HEAP[$time]; //@line 1351 "datetimemodule.c"
        var $293=(($292)&4294967295); //@line 1351 "datetimemodule.c"
        var $294=HEAP[$293]; //@line 1351 "datetimemodule.c"
        var $295=((($294) - 1)&4294967295); //@line 1351 "datetimemodule.c"
        var $296=HEAP[$time]; //@line 1351 "datetimemodule.c"
        var $297=(($296)&4294967295); //@line 1351 "datetimemodule.c"
        HEAP[$297]=$295; //@line 1351 "datetimemodule.c"
        var $298=HEAP[$time]; //@line 1351 "datetimemodule.c"
        var $299=(($298)&4294967295); //@line 1351 "datetimemodule.c"
        var $300=HEAP[$299]; //@line 1351 "datetimemodule.c"
        var $301=((($300))|0)==0; //@line 1351 "datetimemodule.c"
        if ($301) { __label__ = 82; break; } else { __label__ = 83; break; } //@line 1351 "datetimemodule.c"
      case 82: // $bb85
        var $302=HEAP[$time]; //@line 1351 "datetimemodule.c"
        var $303=(($302+4)&4294967295); //@line 1351 "datetimemodule.c"
        var $304=HEAP[$303]; //@line 1351 "datetimemodule.c"
        var $305=(($304+24)&4294967295); //@line 1351 "datetimemodule.c"
        var $306=HEAP[$305]; //@line 1351 "datetimemodule.c"
        var $307=HEAP[$time]; //@line 1351 "datetimemodule.c"
        FUNCTION_TABLE[$306]($307); //@line 1351 "datetimemodule.c"
        __label__ = 83; break; //@line 1353 "datetimemodule.c"
      case 83: // $Done
        var $308=HEAP[$freplacement]; //@line 1354 "datetimemodule.c"
        var $309=($308)!=0; //@line 1354 "datetimemodule.c"
        if ($309) { __label__ = 84; break; } else { __label__ = 86; break; } //@line 1354 "datetimemodule.c"
      case 84: // $bb86
        var $310=HEAP[$freplacement]; //@line 1354 "datetimemodule.c"
        var $311=(($310)&4294967295); //@line 1354 "datetimemodule.c"
        var $312=HEAP[$311]; //@line 1354 "datetimemodule.c"
        var $313=((($312) - 1)&4294967295); //@line 1354 "datetimemodule.c"
        var $314=HEAP[$freplacement]; //@line 1354 "datetimemodule.c"
        var $315=(($314)&4294967295); //@line 1354 "datetimemodule.c"
        HEAP[$315]=$313; //@line 1354 "datetimemodule.c"
        var $316=HEAP[$freplacement]; //@line 1354 "datetimemodule.c"
        var $317=(($316)&4294967295); //@line 1354 "datetimemodule.c"
        var $318=HEAP[$317]; //@line 1354 "datetimemodule.c"
        var $319=((($318))|0)==0; //@line 1354 "datetimemodule.c"
        if ($319) { __label__ = 85; break; } else { __label__ = 86; break; } //@line 1354 "datetimemodule.c"
      case 85: // $bb87
        var $320=HEAP[$freplacement]; //@line 1354 "datetimemodule.c"
        var $321=(($320+4)&4294967295); //@line 1354 "datetimemodule.c"
        var $322=HEAP[$321]; //@line 1354 "datetimemodule.c"
        var $323=(($322+24)&4294967295); //@line 1354 "datetimemodule.c"
        var $324=HEAP[$323]; //@line 1354 "datetimemodule.c"
        var $325=HEAP[$freplacement]; //@line 1354 "datetimemodule.c"
        FUNCTION_TABLE[$324]($325); //@line 1354 "datetimemodule.c"
        __label__ = 86; break; //@line 1354 "datetimemodule.c"
      case 86: // $bb88
        var $326=HEAP[$zreplacement]; //@line 1355 "datetimemodule.c"
        var $327=($326)!=0; //@line 1355 "datetimemodule.c"
        if ($327) { __label__ = 87; break; } else { __label__ = 89; break; } //@line 1355 "datetimemodule.c"
      case 87: // $bb89
        var $328=HEAP[$zreplacement]; //@line 1355 "datetimemodule.c"
        var $329=(($328)&4294967295); //@line 1355 "datetimemodule.c"
        var $330=HEAP[$329]; //@line 1355 "datetimemodule.c"
        var $331=((($330) - 1)&4294967295); //@line 1355 "datetimemodule.c"
        var $332=HEAP[$zreplacement]; //@line 1355 "datetimemodule.c"
        var $333=(($332)&4294967295); //@line 1355 "datetimemodule.c"
        HEAP[$333]=$331; //@line 1355 "datetimemodule.c"
        var $334=HEAP[$zreplacement]; //@line 1355 "datetimemodule.c"
        var $335=(($334)&4294967295); //@line 1355 "datetimemodule.c"
        var $336=HEAP[$335]; //@line 1355 "datetimemodule.c"
        var $337=((($336))|0)==0; //@line 1355 "datetimemodule.c"
        if ($337) { __label__ = 88; break; } else { __label__ = 89; break; } //@line 1355 "datetimemodule.c"
      case 88: // $bb90
        var $338=HEAP[$zreplacement]; //@line 1355 "datetimemodule.c"
        var $339=(($338+4)&4294967295); //@line 1355 "datetimemodule.c"
        var $340=HEAP[$339]; //@line 1355 "datetimemodule.c"
        var $341=(($340+24)&4294967295); //@line 1355 "datetimemodule.c"
        var $342=HEAP[$341]; //@line 1355 "datetimemodule.c"
        var $343=HEAP[$zreplacement]; //@line 1355 "datetimemodule.c"
        FUNCTION_TABLE[$342]($343); //@line 1355 "datetimemodule.c"
        __label__ = 89; break; //@line 1355 "datetimemodule.c"
      case 89: // $bb91
        var $344=HEAP[$Zreplacement]; //@line 1356 "datetimemodule.c"
        var $345=($344)!=0; //@line 1356 "datetimemodule.c"
        if ($345) { __label__ = 90; break; } else { __label__ = 92; break; } //@line 1356 "datetimemodule.c"
      case 90: // $bb92
        var $346=HEAP[$Zreplacement]; //@line 1356 "datetimemodule.c"
        var $347=(($346)&4294967295); //@line 1356 "datetimemodule.c"
        var $348=HEAP[$347]; //@line 1356 "datetimemodule.c"
        var $349=((($348) - 1)&4294967295); //@line 1356 "datetimemodule.c"
        var $350=HEAP[$Zreplacement]; //@line 1356 "datetimemodule.c"
        var $351=(($350)&4294967295); //@line 1356 "datetimemodule.c"
        HEAP[$351]=$349; //@line 1356 "datetimemodule.c"
        var $352=HEAP[$Zreplacement]; //@line 1356 "datetimemodule.c"
        var $353=(($352)&4294967295); //@line 1356 "datetimemodule.c"
        var $354=HEAP[$353]; //@line 1356 "datetimemodule.c"
        var $355=((($354))|0)==0; //@line 1356 "datetimemodule.c"
        if ($355) { __label__ = 91; break; } else { __label__ = 92; break; } //@line 1356 "datetimemodule.c"
      case 91: // $bb93
        var $356=HEAP[$Zreplacement]; //@line 1356 "datetimemodule.c"
        var $357=(($356+4)&4294967295); //@line 1356 "datetimemodule.c"
        var $358=HEAP[$357]; //@line 1356 "datetimemodule.c"
        var $359=(($358+24)&4294967295); //@line 1356 "datetimemodule.c"
        var $360=HEAP[$359]; //@line 1356 "datetimemodule.c"
        var $361=HEAP[$Zreplacement]; //@line 1356 "datetimemodule.c"
        FUNCTION_TABLE[$360]($361); //@line 1356 "datetimemodule.c"
        __label__ = 92; break; //@line 1356 "datetimemodule.c"
      case 92: // $bb94
        var $362=HEAP[$newfmt]; //@line 1357 "datetimemodule.c"
        var $363=($362)!=0; //@line 1357 "datetimemodule.c"
        if ($363) { __label__ = 93; break; } else { __label__ = 95; break; } //@line 1357 "datetimemodule.c"
      case 93: // $bb95
        var $364=HEAP[$newfmt]; //@line 1357 "datetimemodule.c"
        var $365=(($364)&4294967295); //@line 1357 "datetimemodule.c"
        var $366=HEAP[$365]; //@line 1357 "datetimemodule.c"
        var $367=((($366) - 1)&4294967295); //@line 1357 "datetimemodule.c"
        var $368=(($364)&4294967295); //@line 1357 "datetimemodule.c"
        HEAP[$368]=$367; //@line 1357 "datetimemodule.c"
        var $369=(($364)&4294967295); //@line 1357 "datetimemodule.c"
        var $370=HEAP[$369]; //@line 1357 "datetimemodule.c"
        var $371=((($370))|0)==0; //@line 1357 "datetimemodule.c"
        if ($371) { __label__ = 94; break; } else { __label__ = 95; break; } //@line 1357 "datetimemodule.c"
      case 94: // $bb96
        var $372=HEAP[$newfmt]; //@line 1357 "datetimemodule.c"
        var $373=(($372+4)&4294967295); //@line 1357 "datetimemodule.c"
        var $374=HEAP[$373]; //@line 1357 "datetimemodule.c"
        var $375=(($374+24)&4294967295); //@line 1357 "datetimemodule.c"
        var $376=HEAP[$375]; //@line 1357 "datetimemodule.c"
        var $377=HEAP[$newfmt]; //@line 1357 "datetimemodule.c"
        FUNCTION_TABLE[$376]($377); //@line 1357 "datetimemodule.c"
        __label__ = 95; break; //@line 1357 "datetimemodule.c"
      case 95: // $bb97
        var $378=HEAP[$result]; //@line 1358 "datetimemodule.c"
        HEAP[$0]=$378; //@line 1358 "datetimemodule.c"
        __label__ = 96; break; //@line 1358 "datetimemodule.c"
      case 96: // $bb98
        var $379=HEAP[$0]; //@line 1197 "datetimemodule.c"
        HEAP[$retval]=$379; //@line 1197 "datetimemodule.c"
        __label__ = 97; break; //@line 1197 "datetimemodule.c"
      case 97: // $return
        var $retval99=HEAP[$retval]; //@line 1197 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval99; //@line 1197 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _isoformat_date($dt, $buffer, $bufflen) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $dt_addr=__stackBase__;
        var $buffer_addr=__stackBase__+4;
        var $bufflen_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $x=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$dt_addr]=$dt;
        HEAP[$buffer_addr]=$buffer;
        HEAP[$bufflen_addr]=$bufflen;
        var $1=HEAP[$dt_addr]; //@line 1365 "datetimemodule.c"
        var $2=(($1+13)&4294967295); //@line 1365 "datetimemodule.c"
        var $3=(($2+3)&4294967295); //@line 1365 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 1365 "datetimemodule.c"
        var $5=unSign(($4), 8, 0); //@line 1365 "datetimemodule.c"
        var $6=HEAP[$dt_addr]; //@line 1365 "datetimemodule.c"
        var $7=(($6+13)&4294967295); //@line 1365 "datetimemodule.c"
        var $8=(($7+2)&4294967295); //@line 1365 "datetimemodule.c"
        var $9=HEAP[$8]; //@line 1365 "datetimemodule.c"
        var $10=unSign(($9), 8, 0); //@line 1365 "datetimemodule.c"
        var $11=HEAP[$dt_addr]; //@line 1365 "datetimemodule.c"
        var $12=(($11+13)&4294967295); //@line 1365 "datetimemodule.c"
        var $13=(($12)&4294967295); //@line 1365 "datetimemodule.c"
        var $14=HEAP[$13]; //@line 1365 "datetimemodule.c"
        var $15=unSign(($14), 8, 0); //@line 1365 "datetimemodule.c"
        var $16=($15) << 8; //@line 1365 "datetimemodule.c"
        var $17=HEAP[$dt_addr]; //@line 1365 "datetimemodule.c"
        var $18=(($17+13)&4294967295); //@line 1365 "datetimemodule.c"
        var $19=(($18+1)&4294967295); //@line 1365 "datetimemodule.c"
        var $20=HEAP[$19]; //@line 1365 "datetimemodule.c"
        var $21=unSign(($20), 8, 0); //@line 1365 "datetimemodule.c"
        var $22=($16) | ($21); //@line 1365 "datetimemodule.c"
        var $23=HEAP[$bufflen_addr]; //@line 1365 "datetimemodule.c"
        var $24=HEAP[$buffer_addr]; //@line 1365 "datetimemodule.c"
        var $25=_PyOS_snprintf($24, $23, ((__str95)&4294967295), $22, $10, $5); //@line 1365 "datetimemodule.c"
        HEAP[$x]=$25; //@line 1365 "datetimemodule.c"
        var $26=HEAP[$bufflen_addr]; //@line 1368 "datetimemodule.c"
        var $27=HEAP[$x]; //@line 1368 "datetimemodule.c"
        var $28=((($26))|0) < ((($27))|0); //@line 1368 "datetimemodule.c"
        if ($28) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1368 "datetimemodule.c"
      case 1: // $bb
        ___assert_fail(((__str96)&4294967295), ((__str1)&4294967295), 1368, ((___PRETTY_FUNCTION___9722)&4294967295)); //@line 1368 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 4921"; //@line 1368 "datetimemodule.c"
      case 2: // $bb1
        var $29=HEAP[$buffer_addr]; //@line 1369 "datetimemodule.c"
        var $30=HEAP[$x]; //@line 1369 "datetimemodule.c"
        var $31=(($29+$30)&4294967295); //@line 1369 "datetimemodule.c"
        HEAP[$0]=$31; //@line 1369 "datetimemodule.c"
        var $32=HEAP[$0]; //@line 1369 "datetimemodule.c"
        HEAP[$retval]=$32; //@line 1369 "datetimemodule.c"
        __label__ = 3; break; //@line 1369 "datetimemodule.c"
      case 3: // $return
        var $retval2=HEAP[$retval]; //@line 1369 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval2; //@line 1369 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _isoformat_time($dt, $buffer, $bufflen) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $dt_addr=__stackBase__;
        var $buffer_addr=__stackBase__+4;
        var $bufflen_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $x=__stackBase__+20;
        var $us=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$dt_addr]=$dt;
        HEAP[$buffer_addr]=$buffer;
        HEAP[$bufflen_addr]=$bufflen;
        var $1=HEAP[$dt_addr]; //@line 1376 "datetimemodule.c"
        var $2=(($1+13)&4294967295); //@line 1376 "datetimemodule.c"
        var $3=(($2+7)&4294967295); //@line 1376 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 1376 "datetimemodule.c"
        var $5=unSign(($4), 8, 0); //@line 1376 "datetimemodule.c"
        var $6=($5) << 16; //@line 1376 "datetimemodule.c"
        var $7=HEAP[$dt_addr]; //@line 1376 "datetimemodule.c"
        var $8=(($7+13)&4294967295); //@line 1376 "datetimemodule.c"
        var $9=(($8+8)&4294967295); //@line 1376 "datetimemodule.c"
        var $10=HEAP[$9]; //@line 1376 "datetimemodule.c"
        var $11=unSign(($10), 8, 0); //@line 1376 "datetimemodule.c"
        var $12=($11) << 8; //@line 1376 "datetimemodule.c"
        var $13=($6) | ($12); //@line 1376 "datetimemodule.c"
        var $14=HEAP[$dt_addr]; //@line 1376 "datetimemodule.c"
        var $15=(($14+13)&4294967295); //@line 1376 "datetimemodule.c"
        var $16=(($15+9)&4294967295); //@line 1376 "datetimemodule.c"
        var $17=HEAP[$16]; //@line 1376 "datetimemodule.c"
        var $18=unSign(($17), 8, 0); //@line 1376 "datetimemodule.c"
        var $19=($13) | ($18); //@line 1376 "datetimemodule.c"
        HEAP[$us]=$19; //@line 1376 "datetimemodule.c"
        var $20=HEAP[$dt_addr]; //@line 1378 "datetimemodule.c"
        var $21=(($20+13)&4294967295); //@line 1378 "datetimemodule.c"
        var $22=(($21+6)&4294967295); //@line 1378 "datetimemodule.c"
        var $23=HEAP[$22]; //@line 1378 "datetimemodule.c"
        var $24=unSign(($23), 8, 0); //@line 1378 "datetimemodule.c"
        var $25=HEAP[$dt_addr]; //@line 1378 "datetimemodule.c"
        var $26=(($25+13)&4294967295); //@line 1378 "datetimemodule.c"
        var $27=(($26+5)&4294967295); //@line 1378 "datetimemodule.c"
        var $28=HEAP[$27]; //@line 1378 "datetimemodule.c"
        var $29=unSign(($28), 8, 0); //@line 1378 "datetimemodule.c"
        var $30=HEAP[$dt_addr]; //@line 1378 "datetimemodule.c"
        var $31=(($30+13)&4294967295); //@line 1378 "datetimemodule.c"
        var $32=(($31+4)&4294967295); //@line 1378 "datetimemodule.c"
        var $33=HEAP[$32]; //@line 1378 "datetimemodule.c"
        var $34=unSign(($33), 8, 0); //@line 1378 "datetimemodule.c"
        var $35=HEAP[$bufflen_addr]; //@line 1378 "datetimemodule.c"
        var $36=HEAP[$buffer_addr]; //@line 1378 "datetimemodule.c"
        var $37=_PyOS_snprintf($36, $35, ((__str97)&4294967295), $34, $29, $24); //@line 1378 "datetimemodule.c"
        HEAP[$x]=$37; //@line 1378 "datetimemodule.c"
        var $38=HEAP[$bufflen_addr]; //@line 1383 "datetimemodule.c"
        var $39=HEAP[$x]; //@line 1383 "datetimemodule.c"
        var $40=((($38))|0) < ((($39))|0); //@line 1383 "datetimemodule.c"
        if ($40) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1383 "datetimemodule.c"
      case 1: // $bb
        ___assert_fail(((__str96)&4294967295), ((__str1)&4294967295), 1383, ((___PRETTY_FUNCTION___9746)&4294967295)); //@line 1383 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 5002"; //@line 1383 "datetimemodule.c"
      case 2: // $bb1
        var $41=HEAP[$us]; //@line 1384 "datetimemodule.c"
        var $42=((($41))|0)!=0; //@line 1384 "datetimemodule.c"
        if ($42) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1384 "datetimemodule.c"
      case 3: // $bb2
        var $43=HEAP[$bufflen_addr]; //@line 1385 "datetimemodule.c"
        var $44=HEAP[$x]; //@line 1385 "datetimemodule.c"
        var $45=((($43) - ($44))&4294967295); //@line 1385 "datetimemodule.c"
        var $46=HEAP[$buffer_addr]; //@line 1385 "datetimemodule.c"
        var $47=HEAP[$x]; //@line 1385 "datetimemodule.c"
        var $48=(($46+$47)&4294967295); //@line 1385 "datetimemodule.c"
        var $49=HEAP[$us]; //@line 1385 "datetimemodule.c"
        var $50=_PyOS_snprintf($48, $45, ((__str98)&4294967295), $49); //@line 1385 "datetimemodule.c"
        var $51=HEAP[$x]; //@line 1385 "datetimemodule.c"
        var $52=((($50) + ($51))&4294967295); //@line 1385 "datetimemodule.c"
        HEAP[$x]=$52; //@line 1385 "datetimemodule.c"
        __label__ = 4; break; //@line 1385 "datetimemodule.c"
      case 4: // $bb3
        var $53=HEAP[$bufflen_addr]; //@line 1386 "datetimemodule.c"
        var $54=HEAP[$x]; //@line 1386 "datetimemodule.c"
        var $55=((($53))|0) < ((($54))|0); //@line 1386 "datetimemodule.c"
        if ($55) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1386 "datetimemodule.c"
      case 5: // $bb4
        ___assert_fail(((__str96)&4294967295), ((__str1)&4294967295), 1386, ((___PRETTY_FUNCTION___9746)&4294967295)); //@line 1386 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 5031"; //@line 1386 "datetimemodule.c"
      case 6: // $bb5
        var $56=HEAP[$buffer_addr]; //@line 1387 "datetimemodule.c"
        var $57=HEAP[$x]; //@line 1387 "datetimemodule.c"
        var $58=(($56+$57)&4294967295); //@line 1387 "datetimemodule.c"
        HEAP[$0]=$58; //@line 1387 "datetimemodule.c"
        var $59=HEAP[$0]; //@line 1387 "datetimemodule.c"
        HEAP[$retval]=$59; //@line 1387 "datetimemodule.c"
        __label__ = 7; break; //@line 1387 "datetimemodule.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 1387 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 1387 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_time() {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval=__stackBase__;
        var $0=__stackBase__+4;
        var $result=__stackBase__+8;
        var $time=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$result]=0; //@line 1399 "datetimemodule.c"
        var $1=_PyImport_ImportModuleNoBlock(((__str92)&4294967295)); //@line 1400 "datetimemodule.c"
        HEAP[$time]=$1; //@line 1400 "datetimemodule.c"
        var $2=HEAP[$time]; //@line 1402 "datetimemodule.c"
        var $3=($2)!=0; //@line 1402 "datetimemodule.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 1402 "datetimemodule.c"
      case 1: // $bb
        var $4=HEAP[$time]; //@line 1403 "datetimemodule.c"
        var $5=__PyObject_CallMethod_SizeT($4, ((__str92)&4294967295), ((__str99)&4294967295)); //@line 1403 "datetimemodule.c"
        HEAP[$result]=$5; //@line 1403 "datetimemodule.c"
        var $6=HEAP[$time]; //@line 1404 "datetimemodule.c"
        var $7=(($6)&4294967295); //@line 1404 "datetimemodule.c"
        var $8=HEAP[$7]; //@line 1404 "datetimemodule.c"
        var $9=((($8) - 1)&4294967295); //@line 1404 "datetimemodule.c"
        var $10=HEAP[$time]; //@line 1404 "datetimemodule.c"
        var $11=(($10)&4294967295); //@line 1404 "datetimemodule.c"
        HEAP[$11]=$9; //@line 1404 "datetimemodule.c"
        var $12=HEAP[$time]; //@line 1404 "datetimemodule.c"
        var $13=(($12)&4294967295); //@line 1404 "datetimemodule.c"
        var $14=HEAP[$13]; //@line 1404 "datetimemodule.c"
        var $15=((($14))|0)==0; //@line 1404 "datetimemodule.c"
        if ($15) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1404 "datetimemodule.c"
      case 2: // $bb1
        var $16=HEAP[$time]; //@line 1404 "datetimemodule.c"
        var $17=(($16+4)&4294967295); //@line 1404 "datetimemodule.c"
        var $18=HEAP[$17]; //@line 1404 "datetimemodule.c"
        var $19=(($18+24)&4294967295); //@line 1404 "datetimemodule.c"
        var $20=HEAP[$19]; //@line 1404 "datetimemodule.c"
        var $21=HEAP[$time]; //@line 1404 "datetimemodule.c"
        FUNCTION_TABLE[$20]($21); //@line 1404 "datetimemodule.c"
        __label__ = 3; break; //@line 1404 "datetimemodule.c"
      case 3: // $bb2
        var $22=HEAP[$result]; //@line 1406 "datetimemodule.c"
        HEAP[$0]=$22; //@line 1406 "datetimemodule.c"
        var $23=HEAP[$0]; //@line 1406 "datetimemodule.c"
        HEAP[$retval]=$23; //@line 1406 "datetimemodule.c"
        __label__ = 4; break; //@line 1406 "datetimemodule.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 1406 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 1406 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _build_struct_time($y, $m, $d, $hh, $mm, $ss, $dstflag) {
    var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 44);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $y_addr=__stackBase__;
        var $m_addr=__stackBase__+4;
        var $d_addr=__stackBase__+8;
        var $hh_addr=__stackBase__+12;
        var $mm_addr=__stackBase__+16;
        var $ss_addr=__stackBase__+20;
        var $dstflag_addr=__stackBase__+24;
        var $retval=__stackBase__+28;
        var $0=__stackBase__+32;
        var $time=__stackBase__+36;
        var $result=__stackBase__+40;
        var $_alloca_point_=0;
        HEAP[$y_addr]=$y;
        HEAP[$m_addr]=$m;
        HEAP[$d_addr]=$d;
        HEAP[$hh_addr]=$hh;
        HEAP[$mm_addr]=$mm;
        HEAP[$ss_addr]=$ss;
        HEAP[$dstflag_addr]=$dstflag;
        HEAP[$result]=0; //@line 1416 "datetimemodule.c"
        var $1=_PyImport_ImportModuleNoBlock(((__str92)&4294967295)); //@line 1418 "datetimemodule.c"
        HEAP[$time]=$1; //@line 1418 "datetimemodule.c"
        var $2=HEAP[$time]; //@line 1419 "datetimemodule.c"
        var $3=($2)!=0; //@line 1419 "datetimemodule.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 1419 "datetimemodule.c"
      case 1: // $bb
        var $4=HEAP[$y_addr]; //@line 1420 "datetimemodule.c"
        var $5=HEAP[$m_addr]; //@line 1420 "datetimemodule.c"
        var $6=_days_before_month($4, $5); //@line 1420 "datetimemodule.c"
        var $7=HEAP[$d_addr]; //@line 1420 "datetimemodule.c"
        var $8=((($6) + ($7))&4294967295); //@line 1420 "datetimemodule.c"
        var $9=HEAP[$y_addr]; //@line 1420 "datetimemodule.c"
        var $10=HEAP[$m_addr]; //@line 1420 "datetimemodule.c"
        var $11=HEAP[$d_addr]; //@line 1420 "datetimemodule.c"
        var $12=_weekday($9, $10, $11); //@line 1420 "datetimemodule.c"
        var $13=HEAP[$time]; //@line 1420 "datetimemodule.c"
        var $14=HEAP[$y_addr]; //@line 1420 "datetimemodule.c"
        var $15=HEAP[$m_addr]; //@line 1420 "datetimemodule.c"
        var $16=HEAP[$d_addr]; //@line 1420 "datetimemodule.c"
        var $17=HEAP[$hh_addr]; //@line 1420 "datetimemodule.c"
        var $18=HEAP[$mm_addr]; //@line 1420 "datetimemodule.c"
        var $19=HEAP[$ss_addr]; //@line 1420 "datetimemodule.c"
        var $20=HEAP[$dstflag_addr]; //@line 1420 "datetimemodule.c"
        var $21=__PyObject_CallMethod_SizeT($13, ((__str100)&4294967295), ((__str101)&4294967295), $14, $15, $16, $17, $18, $19, $12, $8, $20); //@line 1420 "datetimemodule.c"
        HEAP[$result]=$21; //@line 1420 "datetimemodule.c"
        var $22=HEAP[$time]; //@line 1427 "datetimemodule.c"
        var $23=(($22)&4294967295); //@line 1427 "datetimemodule.c"
        var $24=HEAP[$23]; //@line 1427 "datetimemodule.c"
        var $25=((($24) - 1)&4294967295); //@line 1427 "datetimemodule.c"
        var $26=HEAP[$time]; //@line 1427 "datetimemodule.c"
        var $27=(($26)&4294967295); //@line 1427 "datetimemodule.c"
        HEAP[$27]=$25; //@line 1427 "datetimemodule.c"
        var $28=HEAP[$time]; //@line 1427 "datetimemodule.c"
        var $29=(($28)&4294967295); //@line 1427 "datetimemodule.c"
        var $30=HEAP[$29]; //@line 1427 "datetimemodule.c"
        var $31=((($30))|0)==0; //@line 1427 "datetimemodule.c"
        if ($31) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1427 "datetimemodule.c"
      case 2: // $bb1
        var $32=HEAP[$time]; //@line 1427 "datetimemodule.c"
        var $33=(($32+4)&4294967295); //@line 1427 "datetimemodule.c"
        var $34=HEAP[$33]; //@line 1427 "datetimemodule.c"
        var $35=(($34+24)&4294967295); //@line 1427 "datetimemodule.c"
        var $36=HEAP[$35]; //@line 1427 "datetimemodule.c"
        var $37=HEAP[$time]; //@line 1427 "datetimemodule.c"
        FUNCTION_TABLE[$36]($37); //@line 1427 "datetimemodule.c"
        __label__ = 3; break; //@line 1427 "datetimemodule.c"
      case 3: // $bb2
        var $38=HEAP[$result]; //@line 1429 "datetimemodule.c"
        HEAP[$0]=$38; //@line 1429 "datetimemodule.c"
        var $39=HEAP[$0]; //@line 1429 "datetimemodule.c"
        HEAP[$retval]=$39; //@line 1429 "datetimemodule.c"
        __label__ = 4; break; //@line 1429 "datetimemodule.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 1429 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 1429 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _diff_to_bool($diff, $op) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $diff_addr=__stackBase__;
        var $op_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $iftmp_83=__stackBase__+16;
        var $result=__stackBase__+20;
        var $istrue=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$diff_addr]=$diff;
        HEAP[$op_addr]=$op;
        var $1=HEAP[$op_addr]; //@line 1446 "datetimemodule.c"
        if ($1 == 0) {
          __label__ = 5; break;
        }
        else if ($1 == 1) {
          __label__ = 3; break;
        }
        else if ($1 == 2) {
          __label__ = 1; break;
        }
        else if ($1 == 3) {
          __label__ = 2; break;
        }
        else if ($1 == 4) {
          __label__ = 6; break;
        }
        else if ($1 == 5) {
          __label__ = 4; break;
        }
        else {
        __label__ = 7; break;
        }
        
      case 1: // $bb
        var $2=HEAP[$diff_addr]; //@line 1447 "datetimemodule.c"
        var $3=((($2))|0)==0; //@line 1447 "datetimemodule.c"
        var $4=unSign(($3), 1, 0); //@line 1447 "datetimemodule.c"
        HEAP[$istrue]=$4; //@line 1447 "datetimemodule.c"
        __label__ = 8; break; //@line 1447 "datetimemodule.c"
      case 2: // $bb1
        var $5=HEAP[$diff_addr]; //@line 1448 "datetimemodule.c"
        var $6=((($5))|0)!=0; //@line 1448 "datetimemodule.c"
        var $7=unSign(($6), 1, 0); //@line 1448 "datetimemodule.c"
        HEAP[$istrue]=$7; //@line 1448 "datetimemodule.c"
        __label__ = 8; break; //@line 1448 "datetimemodule.c"
      case 3: // $bb2
        var $8=HEAP[$diff_addr]; //@line 1449 "datetimemodule.c"
        var $9=((($8))|0) <= 0; //@line 1449 "datetimemodule.c"
        var $10=unSign(($9), 1, 0); //@line 1449 "datetimemodule.c"
        HEAP[$istrue]=$10; //@line 1449 "datetimemodule.c"
        __label__ = 8; break; //@line 1449 "datetimemodule.c"
      case 4: // $bb3
        var $11=HEAP[$diff_addr]; //@line 1450 "datetimemodule.c"
        var $12=((($11))|0) >= 0; //@line 1450 "datetimemodule.c"
        var $13=unSign(($12), 1, 0); //@line 1450 "datetimemodule.c"
        HEAP[$istrue]=$13; //@line 1450 "datetimemodule.c"
        __label__ = 8; break; //@line 1450 "datetimemodule.c"
      case 5: // $bb4
        var $14=HEAP[$diff_addr]; //@line 1451 "datetimemodule.c"
        var $15=((($14))|0) < 0; //@line 1451 "datetimemodule.c"
        var $16=unSign(($15), 1, 0); //@line 1451 "datetimemodule.c"
        HEAP[$istrue]=$16; //@line 1451 "datetimemodule.c"
        __label__ = 8; break; //@line 1451 "datetimemodule.c"
      case 6: // $bb5
        var $17=HEAP[$diff_addr]; //@line 1452 "datetimemodule.c"
        var $18=((($17))|0) > 0; //@line 1452 "datetimemodule.c"
        var $19=unSign(($18), 1, 0); //@line 1452 "datetimemodule.c"
        HEAP[$istrue]=$19; //@line 1452 "datetimemodule.c"
        __label__ = 8; break; //@line 1452 "datetimemodule.c"
      case 7: // $bb6
        ___assert_fail(((__str102)&4294967295), ((__str1)&4294967295), 1454, ((___PRETTY_FUNCTION___9835)&4294967295)); //@line 1454 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 5267"; //@line 1454 "datetimemodule.c"
      case 8: // $bb7
        var $20=HEAP[$istrue]; //@line 1457 "datetimemodule.c"
        var $21=((($20))|0)!=0; //@line 1457 "datetimemodule.c"
        if ($21) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1457 "datetimemodule.c"
      case 9: // $bb8
        HEAP[$iftmp_83]=__Py_TrueStruct; //@line 1457 "datetimemodule.c"
        __label__ = 11; break; //@line 1457 "datetimemodule.c"
      case 10: // $bb9
        HEAP[$iftmp_83]=__Py_ZeroStruct; //@line 1457 "datetimemodule.c"
        __label__ = 11; break; //@line 1457 "datetimemodule.c"
      case 11: // $bb10
        var $22=HEAP[$iftmp_83]; //@line 1457 "datetimemodule.c"
        HEAP[$result]=$22; //@line 1457 "datetimemodule.c"
        var $23=HEAP[$result]; //@line 1458 "datetimemodule.c"
        var $24=(($23)&4294967295); //@line 1458 "datetimemodule.c"
        var $25=HEAP[$24]; //@line 1458 "datetimemodule.c"
        var $26=((($25) + 1)&4294967295); //@line 1458 "datetimemodule.c"
        var $27=HEAP[$result]; //@line 1458 "datetimemodule.c"
        var $28=(($27)&4294967295); //@line 1458 "datetimemodule.c"
        HEAP[$28]=$26; //@line 1458 "datetimemodule.c"
        var $29=HEAP[$result]; //@line 1459 "datetimemodule.c"
        HEAP[$0]=$29; //@line 1459 "datetimemodule.c"
        var $30=HEAP[$0]; //@line 1459 "datetimemodule.c"
        HEAP[$retval]=$30; //@line 1459 "datetimemodule.c"
        __label__ = 12; break; //@line 1459 "datetimemodule.c"
      case 12: // $return
        var $retval11=HEAP[$retval]; //@line 1459 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 1459 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _cmperror($a, $b) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $a_addr=__stackBase__;
        var $b_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$a_addr]=$a;
        HEAP[$b_addr]=$b;
        var $1=HEAP[$b_addr]; //@line 1466 "datetimemodule.c"
        var $2=(($1+4)&4294967295); //@line 1466 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 1466 "datetimemodule.c"
        var $4=(($3+12)&4294967295); //@line 1466 "datetimemodule.c"
        var $5=HEAP[$4]; //@line 1466 "datetimemodule.c"
        var $6=HEAP[$a_addr]; //@line 1466 "datetimemodule.c"
        var $7=(($6+4)&4294967295); //@line 1466 "datetimemodule.c"
        var $8=HEAP[$7]; //@line 1466 "datetimemodule.c"
        var $9=(($8+12)&4294967295); //@line 1466 "datetimemodule.c"
        var $10=HEAP[$9]; //@line 1466 "datetimemodule.c"
        var $11=HEAP[_PyExc_TypeError]; //@line 1466 "datetimemodule.c"
        var $12=_PyErr_Format($11, ((__str103)&4294967295), $10, $5); //@line 1466 "datetimemodule.c"
        HEAP[$0]=0; //@line 1469 "datetimemodule.c"
        var $13=HEAP[$0]; //@line 1469 "datetimemodule.c"
        HEAP[$retval]=$13; //@line 1469 "datetimemodule.c"
        __label__ = 1; break; //@line 1469 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 1469 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 1469 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _delta_to_microseconds($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $x1=__stackBase__+12;
        var $x2=__stackBase__+16;
        var $x3=__stackBase__+20;
        var $result=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$x1]=0; //@line 1503 "datetimemodule.c"
        HEAP[$x2]=0; //@line 1504 "datetimemodule.c"
        HEAP[$x3]=0; //@line 1505 "datetimemodule.c"
        HEAP[$result]=0; //@line 1506 "datetimemodule.c"
        var $1=HEAP[$self_addr]; //@line 1508 "datetimemodule.c"
        var $2=(($1+12)&4294967295); //@line 1508 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 1508 "datetimemodule.c"
        var $4=_PyInt_FromLong($3); //@line 1508 "datetimemodule.c"
        HEAP[$x1]=$4; //@line 1508 "datetimemodule.c"
        var $5=HEAP[$x1]; //@line 1509 "datetimemodule.c"
        var $6=($5)==0; //@line 1509 "datetimemodule.c"
        if ($6) { __label__ = 15; break; } else { __label__ = 1; break; } //@line 1509 "datetimemodule.c"
      case 1: // $bb
        var $7=HEAP[_seconds_per_day]; //@line 1511 "datetimemodule.c"
        var $8=HEAP[$x1]; //@line 1511 "datetimemodule.c"
        var $9=_PyNumber_Multiply($8, $7); //@line 1511 "datetimemodule.c"
        HEAP[$x2]=$9; //@line 1511 "datetimemodule.c"
        var $10=HEAP[$x2]; //@line 1512 "datetimemodule.c"
        var $11=($10)==0; //@line 1512 "datetimemodule.c"
        if ($11) { __label__ = 15; break; } else { __label__ = 2; break; } //@line 1512 "datetimemodule.c"
      case 2: // $bb1
        var $12=HEAP[$x1]; //@line 1514 "datetimemodule.c"
        var $13=(($12)&4294967295); //@line 1514 "datetimemodule.c"
        var $14=HEAP[$13]; //@line 1514 "datetimemodule.c"
        var $15=((($14) - 1)&4294967295); //@line 1514 "datetimemodule.c"
        var $16=HEAP[$x1]; //@line 1514 "datetimemodule.c"
        var $17=(($16)&4294967295); //@line 1514 "datetimemodule.c"
        HEAP[$17]=$15; //@line 1514 "datetimemodule.c"
        var $18=HEAP[$x1]; //@line 1514 "datetimemodule.c"
        var $19=(($18)&4294967295); //@line 1514 "datetimemodule.c"
        var $20=HEAP[$19]; //@line 1514 "datetimemodule.c"
        var $21=((($20))|0)==0; //@line 1514 "datetimemodule.c"
        if ($21) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1514 "datetimemodule.c"
      case 3: // $bb2
        var $22=HEAP[$x1]; //@line 1514 "datetimemodule.c"
        var $23=(($22+4)&4294967295); //@line 1514 "datetimemodule.c"
        var $24=HEAP[$23]; //@line 1514 "datetimemodule.c"
        var $25=(($24+24)&4294967295); //@line 1514 "datetimemodule.c"
        var $26=HEAP[$25]; //@line 1514 "datetimemodule.c"
        var $27=HEAP[$x1]; //@line 1514 "datetimemodule.c"
        FUNCTION_TABLE[$26]($27); //@line 1514 "datetimemodule.c"
        __label__ = 4; break; //@line 1514 "datetimemodule.c"
      case 4: // $bb3
        HEAP[$x1]=0; //@line 1515 "datetimemodule.c"
        var $28=HEAP[$self_addr]; //@line 1518 "datetimemodule.c"
        var $29=(($28+16)&4294967295); //@line 1518 "datetimemodule.c"
        var $30=HEAP[$29]; //@line 1518 "datetimemodule.c"
        var $31=_PyInt_FromLong($30); //@line 1518 "datetimemodule.c"
        HEAP[$x1]=$31; //@line 1518 "datetimemodule.c"
        var $32=HEAP[$x1]; //@line 1519 "datetimemodule.c"
        var $33=($32)==0; //@line 1519 "datetimemodule.c"
        if ($33) { __label__ = 15; break; } else { __label__ = 5; break; } //@line 1519 "datetimemodule.c"
      case 5: // $bb4
        var $34=HEAP[$x1]; //@line 1521 "datetimemodule.c"
        var $35=HEAP[$x2]; //@line 1521 "datetimemodule.c"
        var $36=_PyNumber_Add($34, $35); //@line 1521 "datetimemodule.c"
        HEAP[$x3]=$36; //@line 1521 "datetimemodule.c"
        var $37=HEAP[$x3]; //@line 1522 "datetimemodule.c"
        var $38=($37)==0; //@line 1522 "datetimemodule.c"
        if ($38) { __label__ = 15; break; } else { __label__ = 6; break; } //@line 1522 "datetimemodule.c"
      case 6: // $bb5
        var $39=HEAP[$x1]; //@line 1524 "datetimemodule.c"
        var $40=(($39)&4294967295); //@line 1524 "datetimemodule.c"
        var $41=HEAP[$40]; //@line 1524 "datetimemodule.c"
        var $42=((($41) - 1)&4294967295); //@line 1524 "datetimemodule.c"
        var $43=HEAP[$x1]; //@line 1524 "datetimemodule.c"
        var $44=(($43)&4294967295); //@line 1524 "datetimemodule.c"
        HEAP[$44]=$42; //@line 1524 "datetimemodule.c"
        var $45=HEAP[$x1]; //@line 1524 "datetimemodule.c"
        var $46=(($45)&4294967295); //@line 1524 "datetimemodule.c"
        var $47=HEAP[$46]; //@line 1524 "datetimemodule.c"
        var $48=((($47))|0)==0; //@line 1524 "datetimemodule.c"
        if ($48) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1524 "datetimemodule.c"
      case 7: // $bb6
        var $49=HEAP[$x1]; //@line 1524 "datetimemodule.c"
        var $50=(($49+4)&4294967295); //@line 1524 "datetimemodule.c"
        var $51=HEAP[$50]; //@line 1524 "datetimemodule.c"
        var $52=(($51+24)&4294967295); //@line 1524 "datetimemodule.c"
        var $53=HEAP[$52]; //@line 1524 "datetimemodule.c"
        var $54=HEAP[$x1]; //@line 1524 "datetimemodule.c"
        FUNCTION_TABLE[$53]($54); //@line 1524 "datetimemodule.c"
        __label__ = 8; break; //@line 1524 "datetimemodule.c"
      case 8: // $bb7
        var $55=HEAP[$x2]; //@line 1525 "datetimemodule.c"
        var $56=(($55)&4294967295); //@line 1525 "datetimemodule.c"
        var $57=HEAP[$56]; //@line 1525 "datetimemodule.c"
        var $58=((($57) - 1)&4294967295); //@line 1525 "datetimemodule.c"
        var $59=HEAP[$x2]; //@line 1525 "datetimemodule.c"
        var $60=(($59)&4294967295); //@line 1525 "datetimemodule.c"
        HEAP[$60]=$58; //@line 1525 "datetimemodule.c"
        var $61=HEAP[$x2]; //@line 1525 "datetimemodule.c"
        var $62=(($61)&4294967295); //@line 1525 "datetimemodule.c"
        var $63=HEAP[$62]; //@line 1525 "datetimemodule.c"
        var $64=((($63))|0)==0; //@line 1525 "datetimemodule.c"
        if ($64) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1525 "datetimemodule.c"
      case 9: // $bb8
        var $65=HEAP[$x2]; //@line 1525 "datetimemodule.c"
        var $66=(($65+4)&4294967295); //@line 1525 "datetimemodule.c"
        var $67=HEAP[$66]; //@line 1525 "datetimemodule.c"
        var $68=(($67+24)&4294967295); //@line 1525 "datetimemodule.c"
        var $69=HEAP[$68]; //@line 1525 "datetimemodule.c"
        var $70=HEAP[$x2]; //@line 1525 "datetimemodule.c"
        FUNCTION_TABLE[$69]($70); //@line 1525 "datetimemodule.c"
        __label__ = 10; break; //@line 1525 "datetimemodule.c"
      case 10: // $bb9
        HEAP[$x2]=0; //@line 1526 "datetimemodule.c"
        var $71=HEAP[_us_per_second]; //@line 1529 "datetimemodule.c"
        var $72=HEAP[$x3]; //@line 1529 "datetimemodule.c"
        var $73=_PyNumber_Multiply($72, $71); //@line 1529 "datetimemodule.c"
        HEAP[$x1]=$73; //@line 1529 "datetimemodule.c"
        var $74=HEAP[$x1]; //@line 1530 "datetimemodule.c"
        var $75=($74)==0; //@line 1530 "datetimemodule.c"
        if ($75) { __label__ = 15; break; } else { __label__ = 11; break; } //@line 1530 "datetimemodule.c"
      case 11: // $bb10
        var $76=HEAP[$x3]; //@line 1532 "datetimemodule.c"
        var $77=(($76)&4294967295); //@line 1532 "datetimemodule.c"
        var $78=HEAP[$77]; //@line 1532 "datetimemodule.c"
        var $79=((($78) - 1)&4294967295); //@line 1532 "datetimemodule.c"
        var $80=HEAP[$x3]; //@line 1532 "datetimemodule.c"
        var $81=(($80)&4294967295); //@line 1532 "datetimemodule.c"
        HEAP[$81]=$79; //@line 1532 "datetimemodule.c"
        var $82=HEAP[$x3]; //@line 1532 "datetimemodule.c"
        var $83=(($82)&4294967295); //@line 1532 "datetimemodule.c"
        var $84=HEAP[$83]; //@line 1532 "datetimemodule.c"
        var $85=((($84))|0)==0; //@line 1532 "datetimemodule.c"
        if ($85) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1532 "datetimemodule.c"
      case 12: // $bb11
        var $86=HEAP[$x3]; //@line 1532 "datetimemodule.c"
        var $87=(($86+4)&4294967295); //@line 1532 "datetimemodule.c"
        var $88=HEAP[$87]; //@line 1532 "datetimemodule.c"
        var $89=(($88+24)&4294967295); //@line 1532 "datetimemodule.c"
        var $90=HEAP[$89]; //@line 1532 "datetimemodule.c"
        var $91=HEAP[$x3]; //@line 1532 "datetimemodule.c"
        FUNCTION_TABLE[$90]($91); //@line 1532 "datetimemodule.c"
        __label__ = 13; break; //@line 1532 "datetimemodule.c"
      case 13: // $bb12
        HEAP[$x3]=0; //@line 1533 "datetimemodule.c"
        var $92=HEAP[$self_addr]; //@line 1536 "datetimemodule.c"
        var $93=(($92+20)&4294967295); //@line 1536 "datetimemodule.c"
        var $94=HEAP[$93]; //@line 1536 "datetimemodule.c"
        var $95=_PyInt_FromLong($94); //@line 1536 "datetimemodule.c"
        HEAP[$x2]=$95; //@line 1536 "datetimemodule.c"
        var $96=HEAP[$x2]; //@line 1537 "datetimemodule.c"
        var $97=($96)==0; //@line 1537 "datetimemodule.c"
        if ($97) { __label__ = 15; break; } else { __label__ = 14; break; } //@line 1537 "datetimemodule.c"
      case 14: // $bb13
        var $98=HEAP[$x1]; //@line 1539 "datetimemodule.c"
        var $99=HEAP[$x2]; //@line 1539 "datetimemodule.c"
        var $100=_PyNumber_Add($98, $99); //@line 1539 "datetimemodule.c"
        HEAP[$result]=$100; //@line 1539 "datetimemodule.c"
        __label__ = 15; break; //@line 1541 "datetimemodule.c"
      case 15: // $Done
        var $101=HEAP[$x1]; //@line 1542 "datetimemodule.c"
        var $102=($101)!=0; //@line 1542 "datetimemodule.c"
        if ($102) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 1542 "datetimemodule.c"
      case 16: // $bb14
        var $103=HEAP[$x1]; //@line 1542 "datetimemodule.c"
        var $104=(($103)&4294967295); //@line 1542 "datetimemodule.c"
        var $105=HEAP[$104]; //@line 1542 "datetimemodule.c"
        var $106=((($105) - 1)&4294967295); //@line 1542 "datetimemodule.c"
        var $107=HEAP[$x1]; //@line 1542 "datetimemodule.c"
        var $108=(($107)&4294967295); //@line 1542 "datetimemodule.c"
        HEAP[$108]=$106; //@line 1542 "datetimemodule.c"
        var $109=HEAP[$x1]; //@line 1542 "datetimemodule.c"
        var $110=(($109)&4294967295); //@line 1542 "datetimemodule.c"
        var $111=HEAP[$110]; //@line 1542 "datetimemodule.c"
        var $112=((($111))|0)==0; //@line 1542 "datetimemodule.c"
        if ($112) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 1542 "datetimemodule.c"
      case 17: // $bb15
        var $113=HEAP[$x1]; //@line 1542 "datetimemodule.c"
        var $114=(($113+4)&4294967295); //@line 1542 "datetimemodule.c"
        var $115=HEAP[$114]; //@line 1542 "datetimemodule.c"
        var $116=(($115+24)&4294967295); //@line 1542 "datetimemodule.c"
        var $117=HEAP[$116]; //@line 1542 "datetimemodule.c"
        var $118=HEAP[$x1]; //@line 1542 "datetimemodule.c"
        FUNCTION_TABLE[$117]($118); //@line 1542 "datetimemodule.c"
        __label__ = 18; break; //@line 1542 "datetimemodule.c"
      case 18: // $bb16
        var $119=HEAP[$x2]; //@line 1543 "datetimemodule.c"
        var $120=($119)!=0; //@line 1543 "datetimemodule.c"
        if ($120) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 1543 "datetimemodule.c"
      case 19: // $bb17
        var $121=HEAP[$x2]; //@line 1543 "datetimemodule.c"
        var $122=(($121)&4294967295); //@line 1543 "datetimemodule.c"
        var $123=HEAP[$122]; //@line 1543 "datetimemodule.c"
        var $124=((($123) - 1)&4294967295); //@line 1543 "datetimemodule.c"
        var $125=HEAP[$x2]; //@line 1543 "datetimemodule.c"
        var $126=(($125)&4294967295); //@line 1543 "datetimemodule.c"
        HEAP[$126]=$124; //@line 1543 "datetimemodule.c"
        var $127=HEAP[$x2]; //@line 1543 "datetimemodule.c"
        var $128=(($127)&4294967295); //@line 1543 "datetimemodule.c"
        var $129=HEAP[$128]; //@line 1543 "datetimemodule.c"
        var $130=((($129))|0)==0; //@line 1543 "datetimemodule.c"
        if ($130) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1543 "datetimemodule.c"
      case 20: // $bb18
        var $131=HEAP[$x2]; //@line 1543 "datetimemodule.c"
        var $132=(($131+4)&4294967295); //@line 1543 "datetimemodule.c"
        var $133=HEAP[$132]; //@line 1543 "datetimemodule.c"
        var $134=(($133+24)&4294967295); //@line 1543 "datetimemodule.c"
        var $135=HEAP[$134]; //@line 1543 "datetimemodule.c"
        var $136=HEAP[$x2]; //@line 1543 "datetimemodule.c"
        FUNCTION_TABLE[$135]($136); //@line 1543 "datetimemodule.c"
        __label__ = 21; break; //@line 1543 "datetimemodule.c"
      case 21: // $bb19
        var $137=HEAP[$x3]; //@line 1544 "datetimemodule.c"
        var $138=($137)!=0; //@line 1544 "datetimemodule.c"
        if ($138) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 1544 "datetimemodule.c"
      case 22: // $bb20
        var $139=HEAP[$x3]; //@line 1544 "datetimemodule.c"
        var $140=(($139)&4294967295); //@line 1544 "datetimemodule.c"
        var $141=HEAP[$140]; //@line 1544 "datetimemodule.c"
        var $142=((($141) - 1)&4294967295); //@line 1544 "datetimemodule.c"
        var $143=HEAP[$x3]; //@line 1544 "datetimemodule.c"
        var $144=(($143)&4294967295); //@line 1544 "datetimemodule.c"
        HEAP[$144]=$142; //@line 1544 "datetimemodule.c"
        var $145=HEAP[$x3]; //@line 1544 "datetimemodule.c"
        var $146=(($145)&4294967295); //@line 1544 "datetimemodule.c"
        var $147=HEAP[$146]; //@line 1544 "datetimemodule.c"
        var $148=((($147))|0)==0; //@line 1544 "datetimemodule.c"
        if ($148) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 1544 "datetimemodule.c"
      case 23: // $bb21
        var $149=HEAP[$x3]; //@line 1544 "datetimemodule.c"
        var $150=(($149+4)&4294967295); //@line 1544 "datetimemodule.c"
        var $151=HEAP[$150]; //@line 1544 "datetimemodule.c"
        var $152=(($151+24)&4294967295); //@line 1544 "datetimemodule.c"
        var $153=HEAP[$152]; //@line 1544 "datetimemodule.c"
        var $154=HEAP[$x3]; //@line 1544 "datetimemodule.c"
        FUNCTION_TABLE[$153]($154); //@line 1544 "datetimemodule.c"
        __label__ = 24; break; //@line 1544 "datetimemodule.c"
      case 24: // $bb22
        var $155=HEAP[$result]; //@line 1545 "datetimemodule.c"
        HEAP[$0]=$155; //@line 1545 "datetimemodule.c"
        var $156=HEAP[$0]; //@line 1545 "datetimemodule.c"
        HEAP[$retval]=$156; //@line 1545 "datetimemodule.c"
        __label__ = 25; break; //@line 1545 "datetimemodule.c"
      case 25: // $return
        var $retval23=HEAP[$retval]; //@line 1545 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval23; //@line 1545 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _microseconds_to_delta_ex($pyus, $type) {
    var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 44);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $pyus_addr=__stackBase__;
        var $type_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $us=__stackBase__+16;
        var $s=__stackBase__+20;
        var $d=__stackBase__+24;
        var $temp=__stackBase__+28;
        var $tuple=__stackBase__+32;
        var $num=__stackBase__+36;
        var $result=__stackBase__+40;
        var $_alloca_point_=0;
        HEAP[$pyus_addr]=$pyus;
        HEAP[$type_addr]=$type;
        HEAP[$tuple]=0; //@line 1558 "datetimemodule.c"
        HEAP[$num]=0; //@line 1559 "datetimemodule.c"
        HEAP[$result]=0; //@line 1560 "datetimemodule.c"
        var $1=HEAP[_us_per_second]; //@line 1562 "datetimemodule.c"
        var $2=HEAP[$pyus_addr]; //@line 1562 "datetimemodule.c"
        var $3=_PyNumber_Divmod($2, $1); //@line 1562 "datetimemodule.c"
        HEAP[$tuple]=$3; //@line 1562 "datetimemodule.c"
        var $4=HEAP[$tuple]; //@line 1563 "datetimemodule.c"
        var $5=($4)==0; //@line 1563 "datetimemodule.c"
        if ($5) { __label__ = 33; break; } else { __label__ = 1; break; } //@line 1563 "datetimemodule.c"
      case 1: // $bb
        var $6=HEAP[$tuple]; //@line 1566 "datetimemodule.c"
        var $7=_PyTuple_GetItem($6, 1); //@line 1566 "datetimemodule.c"
        HEAP[$num]=$7; //@line 1566 "datetimemodule.c"
        var $8=HEAP[$num]; //@line 1567 "datetimemodule.c"
        var $9=($8)==0; //@line 1567 "datetimemodule.c"
        if ($9) { __label__ = 33; break; } else { __label__ = 2; break; } //@line 1567 "datetimemodule.c"
      case 2: // $bb1
        var $10=HEAP[$num]; //@line 1569 "datetimemodule.c"
        var $11=_PyLong_AsLong($10); //@line 1569 "datetimemodule.c"
        HEAP[$temp]=$11; //@line 1569 "datetimemodule.c"
        HEAP[$num]=0; //@line 1570 "datetimemodule.c"
        var $12=HEAP[$temp]; //@line 1571 "datetimemodule.c"
        var $13=((($12))|0)==-1; //@line 1571 "datetimemodule.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1571 "datetimemodule.c"
      case 3: // $bb2
        var $14=_PyErr_Occurred(); //@line 1571 "datetimemodule.c"
        var $15=($14)!=0; //@line 1571 "datetimemodule.c"
        if ($15) { __label__ = 33; break; } else { __label__ = 4; break; } //@line 1571 "datetimemodule.c"
      case 4: // $bb3
        var $16=HEAP[$temp]; //@line 1573 "datetimemodule.c"
        var $17=((($16))|0) < 0; //@line 1573 "datetimemodule.c"
        if ($17) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 1573 "datetimemodule.c"
      case 5: // $bb4
        var $18=HEAP[$temp]; //@line 1573 "datetimemodule.c"
        var $19=((($18))|0) > 999999; //@line 1573 "datetimemodule.c"
        if ($19) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1573 "datetimemodule.c"
      case 6: // $bb5
        ___assert_fail(((__str104)&4294967295), ((__str1)&4294967295), 1573, ((___PRETTY_FUNCTION___9958)&4294967295)); //@line 1573 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 5699"; //@line 1573 "datetimemodule.c"
      case 7: // $bb6
        var $20=HEAP[$temp]; //@line 1574 "datetimemodule.c"
        HEAP[$us]=$20; //@line 1574 "datetimemodule.c"
        var $21=HEAP[$us]; //@line 1575 "datetimemodule.c"
        var $22=((($21))|0) < 0; //@line 1575 "datetimemodule.c"
        if ($22) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 1575 "datetimemodule.c"
      case 8: // $bb7
        var $23=_PyErr_Occurred(); //@line 1577 "datetimemodule.c"
        var $24=($23)==0; //@line 1577 "datetimemodule.c"
        if ($24) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1577 "datetimemodule.c"
      case 9: // $bb8
        ___assert_fail(((__str105)&4294967295), ((__str1)&4294967295), 1577, ((___PRETTY_FUNCTION___9958)&4294967295)); //@line 1577 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 5715"; //@line 1577 "datetimemodule.c"
      case 10: // $bb9
        __label__ = 33; break; //@line 1577 "datetimemodule.c"
      case 11: // $bb10
        var $25=HEAP[$tuple]; //@line 1581 "datetimemodule.c"
        var $26=_PyTuple_GetItem($25, 0); //@line 1581 "datetimemodule.c"
        HEAP[$num]=$26; //@line 1581 "datetimemodule.c"
        var $27=HEAP[$num]; //@line 1582 "datetimemodule.c"
        var $28=($27)==0; //@line 1582 "datetimemodule.c"
        if ($28) { __label__ = 33; break; } else { __label__ = 12; break; } //@line 1582 "datetimemodule.c"
      case 12: // $bb11
        var $29=HEAP[$num]; //@line 1584 "datetimemodule.c"
        var $30=(($29)&4294967295); //@line 1584 "datetimemodule.c"
        var $31=HEAP[$30]; //@line 1584 "datetimemodule.c"
        var $32=((($31) + 1)&4294967295); //@line 1584 "datetimemodule.c"
        var $33=HEAP[$num]; //@line 1584 "datetimemodule.c"
        var $34=(($33)&4294967295); //@line 1584 "datetimemodule.c"
        HEAP[$34]=$32; //@line 1584 "datetimemodule.c"
        var $35=HEAP[$tuple]; //@line 1585 "datetimemodule.c"
        var $36=(($35)&4294967295); //@line 1585 "datetimemodule.c"
        var $37=HEAP[$36]; //@line 1585 "datetimemodule.c"
        var $38=((($37) - 1)&4294967295); //@line 1585 "datetimemodule.c"
        var $39=HEAP[$tuple]; //@line 1585 "datetimemodule.c"
        var $40=(($39)&4294967295); //@line 1585 "datetimemodule.c"
        HEAP[$40]=$38; //@line 1585 "datetimemodule.c"
        var $41=HEAP[$tuple]; //@line 1585 "datetimemodule.c"
        var $42=(($41)&4294967295); //@line 1585 "datetimemodule.c"
        var $43=HEAP[$42]; //@line 1585 "datetimemodule.c"
        var $44=((($43))|0)==0; //@line 1585 "datetimemodule.c"
        if ($44) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1585 "datetimemodule.c"
      case 13: // $bb12
        var $45=HEAP[$tuple]; //@line 1585 "datetimemodule.c"
        var $46=(($45+4)&4294967295); //@line 1585 "datetimemodule.c"
        var $47=HEAP[$46]; //@line 1585 "datetimemodule.c"
        var $48=(($47+24)&4294967295); //@line 1585 "datetimemodule.c"
        var $49=HEAP[$48]; //@line 1585 "datetimemodule.c"
        var $50=HEAP[$tuple]; //@line 1585 "datetimemodule.c"
        FUNCTION_TABLE[$49]($50); //@line 1585 "datetimemodule.c"
        __label__ = 14; break; //@line 1585 "datetimemodule.c"
      case 14: // $bb13
        var $51=HEAP[_seconds_per_day]; //@line 1587 "datetimemodule.c"
        var $52=HEAP[$num]; //@line 1587 "datetimemodule.c"
        var $53=_PyNumber_Divmod($52, $51); //@line 1587 "datetimemodule.c"
        HEAP[$tuple]=$53; //@line 1587 "datetimemodule.c"
        var $54=HEAP[$tuple]; //@line 1588 "datetimemodule.c"
        var $55=($54)==0; //@line 1588 "datetimemodule.c"
        if ($55) { __label__ = 33; break; } else { __label__ = 15; break; } //@line 1588 "datetimemodule.c"
      case 15: // $bb14
        var $56=HEAP[$num]; //@line 1590 "datetimemodule.c"
        var $57=(($56)&4294967295); //@line 1590 "datetimemodule.c"
        var $58=HEAP[$57]; //@line 1590 "datetimemodule.c"
        var $59=((($58) - 1)&4294967295); //@line 1590 "datetimemodule.c"
        var $60=HEAP[$num]; //@line 1590 "datetimemodule.c"
        var $61=(($60)&4294967295); //@line 1590 "datetimemodule.c"
        HEAP[$61]=$59; //@line 1590 "datetimemodule.c"
        var $62=HEAP[$num]; //@line 1590 "datetimemodule.c"
        var $63=(($62)&4294967295); //@line 1590 "datetimemodule.c"
        var $64=HEAP[$63]; //@line 1590 "datetimemodule.c"
        var $65=((($64))|0)==0; //@line 1590 "datetimemodule.c"
        if ($65) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 1590 "datetimemodule.c"
      case 16: // $bb15
        var $66=HEAP[$num]; //@line 1590 "datetimemodule.c"
        var $67=(($66+4)&4294967295); //@line 1590 "datetimemodule.c"
        var $68=HEAP[$67]; //@line 1590 "datetimemodule.c"
        var $69=(($68+24)&4294967295); //@line 1590 "datetimemodule.c"
        var $70=HEAP[$69]; //@line 1590 "datetimemodule.c"
        var $71=HEAP[$num]; //@line 1590 "datetimemodule.c"
        FUNCTION_TABLE[$70]($71); //@line 1590 "datetimemodule.c"
        __label__ = 17; break; //@line 1590 "datetimemodule.c"
      case 17: // $bb16
        var $72=HEAP[$tuple]; //@line 1592 "datetimemodule.c"
        var $73=_PyTuple_GetItem($72, 1); //@line 1592 "datetimemodule.c"
        HEAP[$num]=$73; //@line 1592 "datetimemodule.c"
        var $74=HEAP[$num]; //@line 1593 "datetimemodule.c"
        var $75=($74)==0; //@line 1593 "datetimemodule.c"
        if ($75) { __label__ = 33; break; } else { __label__ = 18; break; } //@line 1593 "datetimemodule.c"
      case 18: // $bb17
        var $76=HEAP[$num]; //@line 1595 "datetimemodule.c"
        var $77=_PyLong_AsLong($76); //@line 1595 "datetimemodule.c"
        HEAP[$temp]=$77; //@line 1595 "datetimemodule.c"
        HEAP[$num]=0; //@line 1596 "datetimemodule.c"
        var $78=HEAP[$temp]; //@line 1597 "datetimemodule.c"
        var $79=((($78))|0)==-1; //@line 1597 "datetimemodule.c"
        if ($79) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 1597 "datetimemodule.c"
      case 19: // $bb18
        var $80=_PyErr_Occurred(); //@line 1597 "datetimemodule.c"
        var $81=($80)!=0; //@line 1597 "datetimemodule.c"
        if ($81) { __label__ = 33; break; } else { __label__ = 20; break; } //@line 1597 "datetimemodule.c"
      case 20: // $bb19
        var $82=HEAP[$temp]; //@line 1599 "datetimemodule.c"
        var $83=((($82))|0) < 0; //@line 1599 "datetimemodule.c"
        if ($83) { __label__ = 22; break; } else { __label__ = 21; break; } //@line 1599 "datetimemodule.c"
      case 21: // $bb20
        var $84=HEAP[$temp]; //@line 1599 "datetimemodule.c"
        var $85=((($84))|0) > 86399; //@line 1599 "datetimemodule.c"
        if ($85) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 1599 "datetimemodule.c"
      case 22: // $bb21
        ___assert_fail(((__str106)&4294967295), ((__str1)&4294967295), 1599, ((___PRETTY_FUNCTION___9958)&4294967295)); //@line 1599 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 5826"; //@line 1599 "datetimemodule.c"
      case 23: // $bb22
        var $86=HEAP[$temp]; //@line 1600 "datetimemodule.c"
        HEAP[$s]=$86; //@line 1600 "datetimemodule.c"
        var $87=HEAP[$s]; //@line 1602 "datetimemodule.c"
        var $88=((($87))|0) < 0; //@line 1602 "datetimemodule.c"
        if ($88) { __label__ = 24; break; } else { __label__ = 27; break; } //@line 1602 "datetimemodule.c"
      case 24: // $bb23
        var $89=_PyErr_Occurred(); //@line 1604 "datetimemodule.c"
        var $90=($89)==0; //@line 1604 "datetimemodule.c"
        if ($90) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 1604 "datetimemodule.c"
      case 25: // $bb24
        ___assert_fail(((__str105)&4294967295), ((__str1)&4294967295), 1604, ((___PRETTY_FUNCTION___9958)&4294967295)); //@line 1604 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 5842"; //@line 1604 "datetimemodule.c"
      case 26: // $bb25
        __label__ = 33; break; //@line 1604 "datetimemodule.c"
      case 27: // $bb26
        var $91=HEAP[$tuple]; //@line 1608 "datetimemodule.c"
        var $92=_PyTuple_GetItem($91, 0); //@line 1608 "datetimemodule.c"
        HEAP[$num]=$92; //@line 1608 "datetimemodule.c"
        var $93=HEAP[$num]; //@line 1609 "datetimemodule.c"
        var $94=($93)==0; //@line 1609 "datetimemodule.c"
        if ($94) { __label__ = 33; break; } else { __label__ = 28; break; } //@line 1609 "datetimemodule.c"
      case 28: // $bb27
        var $95=HEAP[$num]; //@line 1611 "datetimemodule.c"
        var $96=(($95)&4294967295); //@line 1611 "datetimemodule.c"
        var $97=HEAP[$96]; //@line 1611 "datetimemodule.c"
        var $98=((($97) + 1)&4294967295); //@line 1611 "datetimemodule.c"
        var $99=HEAP[$num]; //@line 1611 "datetimemodule.c"
        var $100=(($99)&4294967295); //@line 1611 "datetimemodule.c"
        HEAP[$100]=$98; //@line 1611 "datetimemodule.c"
        var $101=HEAP[$num]; //@line 1612 "datetimemodule.c"
        var $102=_PyLong_AsLong($101); //@line 1612 "datetimemodule.c"
        HEAP[$temp]=$102; //@line 1612 "datetimemodule.c"
        var $103=HEAP[$temp]; //@line 1613 "datetimemodule.c"
        var $104=((($103))|0)==-1; //@line 1613 "datetimemodule.c"
        if ($104) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 1613 "datetimemodule.c"
      case 29: // $bb28
        var $105=_PyErr_Occurred(); //@line 1613 "datetimemodule.c"
        var $106=($105)!=0; //@line 1613 "datetimemodule.c"
        if ($106) { __label__ = 33; break; } else { __label__ = 30; break; } //@line 1613 "datetimemodule.c"
      case 30: // $bb29
        var $107=HEAP[$temp]; //@line 1615 "datetimemodule.c"
        HEAP[$d]=$107; //@line 1615 "datetimemodule.c"
        var $108=HEAP[$d]; //@line 1616 "datetimemodule.c"
        var $109=HEAP[$temp]; //@line 1616 "datetimemodule.c"
        var $110=((($108))|0)!=((($109))|0); //@line 1616 "datetimemodule.c"
        if ($110) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 1616 "datetimemodule.c"
      case 31: // $bb30
        var $111=HEAP[_PyExc_OverflowError]; //@line 1617 "datetimemodule.c"
        _PyErr_SetString($111, ((__str107)&4294967295)); //@line 1617 "datetimemodule.c"
        __label__ = 33; break; //@line 1617 "datetimemodule.c"
      case 32: // $bb31
        var $112=HEAP[$d]; //@line 1621 "datetimemodule.c"
        var $113=HEAP[$s]; //@line 1621 "datetimemodule.c"
        var $114=HEAP[$us]; //@line 1621 "datetimemodule.c"
        var $115=HEAP[$type_addr]; //@line 1621 "datetimemodule.c"
        var $116=_new_delta_ex($112, $113, $114, 0, $115); //@line 1621 "datetimemodule.c"
        HEAP[$result]=$116; //@line 1621 "datetimemodule.c"
        __label__ = 33; break; //@line 1623 "datetimemodule.c"
      case 33: // $Done
        var $117=HEAP[$tuple]; //@line 1624 "datetimemodule.c"
        var $118=($117)!=0; //@line 1624 "datetimemodule.c"
        if ($118) { __label__ = 34; break; } else { __label__ = 36; break; } //@line 1624 "datetimemodule.c"
      case 34: // $bb32
        var $119=HEAP[$tuple]; //@line 1624 "datetimemodule.c"
        var $120=(($119)&4294967295); //@line 1624 "datetimemodule.c"
        var $121=HEAP[$120]; //@line 1624 "datetimemodule.c"
        var $122=((($121) - 1)&4294967295); //@line 1624 "datetimemodule.c"
        var $123=HEAP[$tuple]; //@line 1624 "datetimemodule.c"
        var $124=(($123)&4294967295); //@line 1624 "datetimemodule.c"
        HEAP[$124]=$122; //@line 1624 "datetimemodule.c"
        var $125=HEAP[$tuple]; //@line 1624 "datetimemodule.c"
        var $126=(($125)&4294967295); //@line 1624 "datetimemodule.c"
        var $127=HEAP[$126]; //@line 1624 "datetimemodule.c"
        var $128=((($127))|0)==0; //@line 1624 "datetimemodule.c"
        if ($128) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 1624 "datetimemodule.c"
      case 35: // $bb33
        var $129=HEAP[$tuple]; //@line 1624 "datetimemodule.c"
        var $130=(($129+4)&4294967295); //@line 1624 "datetimemodule.c"
        var $131=HEAP[$130]; //@line 1624 "datetimemodule.c"
        var $132=(($131+24)&4294967295); //@line 1624 "datetimemodule.c"
        var $133=HEAP[$132]; //@line 1624 "datetimemodule.c"
        var $134=HEAP[$tuple]; //@line 1624 "datetimemodule.c"
        FUNCTION_TABLE[$133]($134); //@line 1624 "datetimemodule.c"
        __label__ = 36; break; //@line 1624 "datetimemodule.c"
      case 36: // $bb34
        var $135=HEAP[$num]; //@line 1625 "datetimemodule.c"
        var $136=($135)!=0; //@line 1625 "datetimemodule.c"
        if ($136) { __label__ = 37; break; } else { __label__ = 39; break; } //@line 1625 "datetimemodule.c"
      case 37: // $bb35
        var $137=HEAP[$num]; //@line 1625 "datetimemodule.c"
        var $138=(($137)&4294967295); //@line 1625 "datetimemodule.c"
        var $139=HEAP[$138]; //@line 1625 "datetimemodule.c"
        var $140=((($139) - 1)&4294967295); //@line 1625 "datetimemodule.c"
        var $141=HEAP[$num]; //@line 1625 "datetimemodule.c"
        var $142=(($141)&4294967295); //@line 1625 "datetimemodule.c"
        HEAP[$142]=$140; //@line 1625 "datetimemodule.c"
        var $143=HEAP[$num]; //@line 1625 "datetimemodule.c"
        var $144=(($143)&4294967295); //@line 1625 "datetimemodule.c"
        var $145=HEAP[$144]; //@line 1625 "datetimemodule.c"
        var $146=((($145))|0)==0; //@line 1625 "datetimemodule.c"
        if ($146) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 1625 "datetimemodule.c"
      case 38: // $bb36
        var $147=HEAP[$num]; //@line 1625 "datetimemodule.c"
        var $148=(($147+4)&4294967295); //@line 1625 "datetimemodule.c"
        var $149=HEAP[$148]; //@line 1625 "datetimemodule.c"
        var $150=(($149+24)&4294967295); //@line 1625 "datetimemodule.c"
        var $151=HEAP[$150]; //@line 1625 "datetimemodule.c"
        var $152=HEAP[$num]; //@line 1625 "datetimemodule.c"
        FUNCTION_TABLE[$151]($152); //@line 1625 "datetimemodule.c"
        __label__ = 39; break; //@line 1625 "datetimemodule.c"
      case 39: // $bb37
        var $153=HEAP[$result]; //@line 1626 "datetimemodule.c"
        HEAP[$0]=$153; //@line 1626 "datetimemodule.c"
        var $154=HEAP[$0]; //@line 1626 "datetimemodule.c"
        HEAP[$retval]=$154; //@line 1626 "datetimemodule.c"
        __label__ = 40; break; //@line 1626 "datetimemodule.c"
      case 40: // $return
        var $retval38=HEAP[$retval]; //@line 1626 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval38; //@line 1626 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _multiply_int_timedelta($intobj, $delta) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $intobj_addr=__stackBase__;
        var $delta_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $pyus_in=__stackBase__+16;
        var $pyus_out=__stackBase__+20;
        var $result=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$intobj_addr]=$intobj;
        HEAP[$delta_addr]=$delta;
        var $1=HEAP[$delta_addr]; //@line 1639 "datetimemodule.c"
        var $2=_delta_to_microseconds($1); //@line 1639 "datetimemodule.c"
        HEAP[$pyus_in]=$2; //@line 1639 "datetimemodule.c"
        var $3=HEAP[$pyus_in]; //@line 1640 "datetimemodule.c"
        var $4=($3)==0; //@line 1640 "datetimemodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1640 "datetimemodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 1641 "datetimemodule.c"
        __label__ = 9; break; //@line 1641 "datetimemodule.c"
      case 2: // $bb1
        var $5=HEAP[$pyus_in]; //@line 1643 "datetimemodule.c"
        var $6=HEAP[$intobj_addr]; //@line 1643 "datetimemodule.c"
        var $7=_PyNumber_Multiply($5, $6); //@line 1643 "datetimemodule.c"
        HEAP[$pyus_out]=$7; //@line 1643 "datetimemodule.c"
        var $8=HEAP[$pyus_in]; //@line 1644 "datetimemodule.c"
        var $9=(($8)&4294967295); //@line 1644 "datetimemodule.c"
        var $10=HEAP[$9]; //@line 1644 "datetimemodule.c"
        var $11=((($10) - 1)&4294967295); //@line 1644 "datetimemodule.c"
        var $12=HEAP[$pyus_in]; //@line 1644 "datetimemodule.c"
        var $13=(($12)&4294967295); //@line 1644 "datetimemodule.c"
        HEAP[$13]=$11; //@line 1644 "datetimemodule.c"
        var $14=HEAP[$pyus_in]; //@line 1644 "datetimemodule.c"
        var $15=(($14)&4294967295); //@line 1644 "datetimemodule.c"
        var $16=HEAP[$15]; //@line 1644 "datetimemodule.c"
        var $17=((($16))|0)==0; //@line 1644 "datetimemodule.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1644 "datetimemodule.c"
      case 3: // $bb2
        var $18=HEAP[$pyus_in]; //@line 1644 "datetimemodule.c"
        var $19=(($18+4)&4294967295); //@line 1644 "datetimemodule.c"
        var $20=HEAP[$19]; //@line 1644 "datetimemodule.c"
        var $21=(($20+24)&4294967295); //@line 1644 "datetimemodule.c"
        var $22=HEAP[$21]; //@line 1644 "datetimemodule.c"
        var $23=HEAP[$pyus_in]; //@line 1644 "datetimemodule.c"
        FUNCTION_TABLE[$22]($23); //@line 1644 "datetimemodule.c"
        __label__ = 4; break; //@line 1644 "datetimemodule.c"
      case 4: // $bb3
        var $24=HEAP[$pyus_out]; //@line 1645 "datetimemodule.c"
        var $25=($24)==0; //@line 1645 "datetimemodule.c"
        if ($25) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1645 "datetimemodule.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 1646 "datetimemodule.c"
        __label__ = 9; break; //@line 1646 "datetimemodule.c"
      case 6: // $bb5
        var $26=HEAP[$pyus_out]; //@line 1648 "datetimemodule.c"
        var $27=_microseconds_to_delta_ex($26, _PyDateTime_DeltaType); //@line 1648 "datetimemodule.c"
        HEAP[$result]=$27; //@line 1648 "datetimemodule.c"
        var $28=HEAP[$pyus_out]; //@line 1649 "datetimemodule.c"
        var $29=(($28)&4294967295); //@line 1649 "datetimemodule.c"
        var $30=HEAP[$29]; //@line 1649 "datetimemodule.c"
        var $31=((($30) - 1)&4294967295); //@line 1649 "datetimemodule.c"
        var $32=HEAP[$pyus_out]; //@line 1649 "datetimemodule.c"
        var $33=(($32)&4294967295); //@line 1649 "datetimemodule.c"
        HEAP[$33]=$31; //@line 1649 "datetimemodule.c"
        var $34=HEAP[$pyus_out]; //@line 1649 "datetimemodule.c"
        var $35=(($34)&4294967295); //@line 1649 "datetimemodule.c"
        var $36=HEAP[$35]; //@line 1649 "datetimemodule.c"
        var $37=((($36))|0)==0; //@line 1649 "datetimemodule.c"
        if ($37) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1649 "datetimemodule.c"
      case 7: // $bb6
        var $38=HEAP[$pyus_out]; //@line 1649 "datetimemodule.c"
        var $39=(($38+4)&4294967295); //@line 1649 "datetimemodule.c"
        var $40=HEAP[$39]; //@line 1649 "datetimemodule.c"
        var $41=(($40+24)&4294967295); //@line 1649 "datetimemodule.c"
        var $42=HEAP[$41]; //@line 1649 "datetimemodule.c"
        var $43=HEAP[$pyus_out]; //@line 1649 "datetimemodule.c"
        FUNCTION_TABLE[$42]($43); //@line 1649 "datetimemodule.c"
        __label__ = 8; break; //@line 1649 "datetimemodule.c"
      case 8: // $bb7
        var $44=HEAP[$result]; //@line 1650 "datetimemodule.c"
        HEAP[$0]=$44; //@line 1650 "datetimemodule.c"
        __label__ = 9; break; //@line 1650 "datetimemodule.c"
      case 9: // $bb8
        var $45=HEAP[$0]; //@line 1641 "datetimemodule.c"
        HEAP[$retval]=$45; //@line 1641 "datetimemodule.c"
        __label__ = 10; break; //@line 1641 "datetimemodule.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 1641 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 1641 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _divide_timedelta_int($delta, $intobj) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $delta_addr=__stackBase__;
        var $intobj_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $pyus_in=__stackBase__+16;
        var $pyus_out=__stackBase__+20;
        var $result=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$delta_addr]=$delta;
        HEAP[$intobj_addr]=$intobj;
        var $1=HEAP[$delta_addr]; //@line 1660 "datetimemodule.c"
        var $2=_delta_to_microseconds($1); //@line 1660 "datetimemodule.c"
        HEAP[$pyus_in]=$2; //@line 1660 "datetimemodule.c"
        var $3=HEAP[$pyus_in]; //@line 1661 "datetimemodule.c"
        var $4=($3)==0; //@line 1661 "datetimemodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1661 "datetimemodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 1662 "datetimemodule.c"
        __label__ = 9; break; //@line 1662 "datetimemodule.c"
      case 2: // $bb1
        var $5=HEAP[$pyus_in]; //@line 1664 "datetimemodule.c"
        var $6=HEAP[$intobj_addr]; //@line 1664 "datetimemodule.c"
        var $7=_PyNumber_FloorDivide($5, $6); //@line 1664 "datetimemodule.c"
        HEAP[$pyus_out]=$7; //@line 1664 "datetimemodule.c"
        var $8=HEAP[$pyus_in]; //@line 1665 "datetimemodule.c"
        var $9=(($8)&4294967295); //@line 1665 "datetimemodule.c"
        var $10=HEAP[$9]; //@line 1665 "datetimemodule.c"
        var $11=((($10) - 1)&4294967295); //@line 1665 "datetimemodule.c"
        var $12=HEAP[$pyus_in]; //@line 1665 "datetimemodule.c"
        var $13=(($12)&4294967295); //@line 1665 "datetimemodule.c"
        HEAP[$13]=$11; //@line 1665 "datetimemodule.c"
        var $14=HEAP[$pyus_in]; //@line 1665 "datetimemodule.c"
        var $15=(($14)&4294967295); //@line 1665 "datetimemodule.c"
        var $16=HEAP[$15]; //@line 1665 "datetimemodule.c"
        var $17=((($16))|0)==0; //@line 1665 "datetimemodule.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1665 "datetimemodule.c"
      case 3: // $bb2
        var $18=HEAP[$pyus_in]; //@line 1665 "datetimemodule.c"
        var $19=(($18+4)&4294967295); //@line 1665 "datetimemodule.c"
        var $20=HEAP[$19]; //@line 1665 "datetimemodule.c"
        var $21=(($20+24)&4294967295); //@line 1665 "datetimemodule.c"
        var $22=HEAP[$21]; //@line 1665 "datetimemodule.c"
        var $23=HEAP[$pyus_in]; //@line 1665 "datetimemodule.c"
        FUNCTION_TABLE[$22]($23); //@line 1665 "datetimemodule.c"
        __label__ = 4; break; //@line 1665 "datetimemodule.c"
      case 4: // $bb3
        var $24=HEAP[$pyus_out]; //@line 1666 "datetimemodule.c"
        var $25=($24)==0; //@line 1666 "datetimemodule.c"
        if ($25) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1666 "datetimemodule.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 1667 "datetimemodule.c"
        __label__ = 9; break; //@line 1667 "datetimemodule.c"
      case 6: // $bb5
        var $26=HEAP[$pyus_out]; //@line 1669 "datetimemodule.c"
        var $27=_microseconds_to_delta_ex($26, _PyDateTime_DeltaType); //@line 1669 "datetimemodule.c"
        HEAP[$result]=$27; //@line 1669 "datetimemodule.c"
        var $28=HEAP[$pyus_out]; //@line 1670 "datetimemodule.c"
        var $29=(($28)&4294967295); //@line 1670 "datetimemodule.c"
        var $30=HEAP[$29]; //@line 1670 "datetimemodule.c"
        var $31=((($30) - 1)&4294967295); //@line 1670 "datetimemodule.c"
        var $32=HEAP[$pyus_out]; //@line 1670 "datetimemodule.c"
        var $33=(($32)&4294967295); //@line 1670 "datetimemodule.c"
        HEAP[$33]=$31; //@line 1670 "datetimemodule.c"
        var $34=HEAP[$pyus_out]; //@line 1670 "datetimemodule.c"
        var $35=(($34)&4294967295); //@line 1670 "datetimemodule.c"
        var $36=HEAP[$35]; //@line 1670 "datetimemodule.c"
        var $37=((($36))|0)==0; //@line 1670 "datetimemodule.c"
        if ($37) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1670 "datetimemodule.c"
      case 7: // $bb6
        var $38=HEAP[$pyus_out]; //@line 1670 "datetimemodule.c"
        var $39=(($38+4)&4294967295); //@line 1670 "datetimemodule.c"
        var $40=HEAP[$39]; //@line 1670 "datetimemodule.c"
        var $41=(($40+24)&4294967295); //@line 1670 "datetimemodule.c"
        var $42=HEAP[$41]; //@line 1670 "datetimemodule.c"
        var $43=HEAP[$pyus_out]; //@line 1670 "datetimemodule.c"
        FUNCTION_TABLE[$42]($43); //@line 1670 "datetimemodule.c"
        __label__ = 8; break; //@line 1670 "datetimemodule.c"
      case 8: // $bb7
        var $44=HEAP[$result]; //@line 1671 "datetimemodule.c"
        HEAP[$0]=$44; //@line 1671 "datetimemodule.c"
        __label__ = 9; break; //@line 1671 "datetimemodule.c"
      case 9: // $bb8
        var $45=HEAP[$0]; //@line 1662 "datetimemodule.c"
        HEAP[$retval]=$45; //@line 1662 "datetimemodule.c"
        __label__ = 10; break; //@line 1662 "datetimemodule.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 1662 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 1662 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _delta_add($left, $right) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $left_addr=__stackBase__;
        var $right_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $result=__stackBase__+16;
        var $days=__stackBase__+20;
        var $seconds=__stackBase__+24;
        var $microseconds=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$left_addr]=$left;
        HEAP[$right_addr]=$right;
        HEAP[$result]=__Py_NotImplementedStruct; //@line 1677 "datetimemodule.c"
        var $1=HEAP[$left_addr]; //@line 1679 "datetimemodule.c"
        var $2=(($1+4)&4294967295); //@line 1679 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 1679 "datetimemodule.c"
        var $4=($3)==(_PyDateTime_DeltaType); //@line 1679 "datetimemodule.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 1679 "datetimemodule.c"
      case 1: // $bb
        var $5=HEAP[$left_addr]; //@line 1679 "datetimemodule.c"
        var $6=(($5+4)&4294967295); //@line 1679 "datetimemodule.c"
        var $7=HEAP[$6]; //@line 1679 "datetimemodule.c"
        var $8=_PyType_IsSubtype($7, _PyDateTime_DeltaType); //@line 1679 "datetimemodule.c"
        var $9=((($8))|0)!=0; //@line 1679 "datetimemodule.c"
        if ($9) { __label__ = 2; break; } else { __label__ = 5; break; } //@line 1679 "datetimemodule.c"
      case 2: // $bb1
        var $10=HEAP[$right_addr]; //@line 1679 "datetimemodule.c"
        var $11=(($10+4)&4294967295); //@line 1679 "datetimemodule.c"
        var $12=HEAP[$11]; //@line 1679 "datetimemodule.c"
        var $13=($12)==(_PyDateTime_DeltaType); //@line 1679 "datetimemodule.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 1679 "datetimemodule.c"
      case 3: // $bb2
        var $14=HEAP[$right_addr]; //@line 1679 "datetimemodule.c"
        var $15=(($14+4)&4294967295); //@line 1679 "datetimemodule.c"
        var $16=HEAP[$15]; //@line 1679 "datetimemodule.c"
        var $17=_PyType_IsSubtype($16, _PyDateTime_DeltaType); //@line 1679 "datetimemodule.c"
        var $18=((($17))|0)!=0; //@line 1679 "datetimemodule.c"
        if ($18) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1679 "datetimemodule.c"
      case 4: // $bb3
        var $19=HEAP[$left_addr]; //@line 1684 "datetimemodule.c"
        var $20=$19; //@line 1684 "datetimemodule.c"
        var $21=(($20+12)&4294967295); //@line 1684 "datetimemodule.c"
        var $22=HEAP[$21]; //@line 1684 "datetimemodule.c"
        var $23=HEAP[$right_addr]; //@line 1684 "datetimemodule.c"
        var $24=$23; //@line 1684 "datetimemodule.c"
        var $25=(($24+12)&4294967295); //@line 1684 "datetimemodule.c"
        var $26=HEAP[$25]; //@line 1684 "datetimemodule.c"
        var $27=((($22) + ($26))&4294967295); //@line 1684 "datetimemodule.c"
        HEAP[$days]=$27; //@line 1684 "datetimemodule.c"
        var $28=HEAP[$left_addr]; //@line 1685 "datetimemodule.c"
        var $29=$28; //@line 1685 "datetimemodule.c"
        var $30=(($29+16)&4294967295); //@line 1685 "datetimemodule.c"
        var $31=HEAP[$30]; //@line 1685 "datetimemodule.c"
        var $32=HEAP[$right_addr]; //@line 1685 "datetimemodule.c"
        var $33=$32; //@line 1685 "datetimemodule.c"
        var $34=(($33+16)&4294967295); //@line 1685 "datetimemodule.c"
        var $35=HEAP[$34]; //@line 1685 "datetimemodule.c"
        var $36=((($31) + ($35))&4294967295); //@line 1685 "datetimemodule.c"
        HEAP[$seconds]=$36; //@line 1685 "datetimemodule.c"
        var $37=HEAP[$left_addr]; //@line 1687 "datetimemodule.c"
        var $38=$37; //@line 1687 "datetimemodule.c"
        var $39=(($38+20)&4294967295); //@line 1687 "datetimemodule.c"
        var $40=HEAP[$39]; //@line 1687 "datetimemodule.c"
        var $41=HEAP[$right_addr]; //@line 1687 "datetimemodule.c"
        var $42=$41; //@line 1687 "datetimemodule.c"
        var $43=(($42+20)&4294967295); //@line 1687 "datetimemodule.c"
        var $44=HEAP[$43]; //@line 1687 "datetimemodule.c"
        var $45=((($40) + ($44))&4294967295); //@line 1687 "datetimemodule.c"
        HEAP[$microseconds]=$45; //@line 1687 "datetimemodule.c"
        var $46=HEAP[$days]; //@line 1688 "datetimemodule.c"
        var $47=HEAP[$seconds]; //@line 1688 "datetimemodule.c"
        var $48=HEAP[$microseconds]; //@line 1688 "datetimemodule.c"
        var $49=_new_delta_ex($46, $47, $48, 1, _PyDateTime_DeltaType); //@line 1688 "datetimemodule.c"
        HEAP[$result]=$49; //@line 1688 "datetimemodule.c"
        __label__ = 5; break; //@line 1688 "datetimemodule.c"
      case 5: // $bb4
        var $50=HEAP[$result]; //@line 1691 "datetimemodule.c"
        var $51=($50)==(__Py_NotImplementedStruct); //@line 1691 "datetimemodule.c"
        if ($51) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1691 "datetimemodule.c"
      case 6: // $bb5
        var $52=HEAP[$result]; //@line 1692 "datetimemodule.c"
        var $53=(($52)&4294967295); //@line 1692 "datetimemodule.c"
        var $54=HEAP[$53]; //@line 1692 "datetimemodule.c"
        var $55=((($54) + 1)&4294967295); //@line 1692 "datetimemodule.c"
        var $56=HEAP[$result]; //@line 1692 "datetimemodule.c"
        var $57=(($56)&4294967295); //@line 1692 "datetimemodule.c"
        HEAP[$57]=$55; //@line 1692 "datetimemodule.c"
        __label__ = 7; break; //@line 1692 "datetimemodule.c"
      case 7: // $bb6
        var $58=HEAP[$result]; //@line 1693 "datetimemodule.c"
        HEAP[$0]=$58; //@line 1693 "datetimemodule.c"
        var $59=HEAP[$0]; //@line 1693 "datetimemodule.c"
        HEAP[$retval]=$59; //@line 1693 "datetimemodule.c"
        __label__ = 8; break; //@line 1693 "datetimemodule.c"
      case 8: // $return
        var $retval7=HEAP[$retval]; //@line 1693 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 1693 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _delta_negative($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 1699 "datetimemodule.c"
        var $2=(($1+20)&4294967295); //@line 1699 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 1699 "datetimemodule.c"
        var $4=((0 - ($3))&4294967295); //@line 1699 "datetimemodule.c"
        var $5=HEAP[$self_addr]; //@line 1699 "datetimemodule.c"
        var $6=(($5+16)&4294967295); //@line 1699 "datetimemodule.c"
        var $7=HEAP[$6]; //@line 1699 "datetimemodule.c"
        var $8=((0 - ($7))&4294967295); //@line 1699 "datetimemodule.c"
        var $9=HEAP[$self_addr]; //@line 1699 "datetimemodule.c"
        var $10=(($9+12)&4294967295); //@line 1699 "datetimemodule.c"
        var $11=HEAP[$10]; //@line 1699 "datetimemodule.c"
        var $12=((0 - ($11))&4294967295); //@line 1699 "datetimemodule.c"
        var $13=_new_delta_ex($12, $8, $4, 1, _PyDateTime_DeltaType); //@line 1699 "datetimemodule.c"
        HEAP[$0]=$13; //@line 1699 "datetimemodule.c"
        var $14=HEAP[$0]; //@line 1699 "datetimemodule.c"
        HEAP[$retval]=$14; //@line 1699 "datetimemodule.c"
        __label__ = 1; break; //@line 1699 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 1699 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 1699 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _delta_positive($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 1711 "datetimemodule.c"
        var $2=(($1+20)&4294967295); //@line 1711 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 1711 "datetimemodule.c"
        var $4=HEAP[$self_addr]; //@line 1711 "datetimemodule.c"
        var $5=(($4+16)&4294967295); //@line 1711 "datetimemodule.c"
        var $6=HEAP[$5]; //@line 1711 "datetimemodule.c"
        var $7=HEAP[$self_addr]; //@line 1711 "datetimemodule.c"
        var $8=(($7+12)&4294967295); //@line 1711 "datetimemodule.c"
        var $9=HEAP[$8]; //@line 1711 "datetimemodule.c"
        var $10=_new_delta_ex($9, $6, $3, 0, _PyDateTime_DeltaType); //@line 1711 "datetimemodule.c"
        HEAP[$0]=$10; //@line 1711 "datetimemodule.c"
        var $11=HEAP[$0]; //@line 1711 "datetimemodule.c"
        HEAP[$retval]=$11; //@line 1711 "datetimemodule.c"
        __label__ = 1; break; //@line 1711 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 1711 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 1711 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _delta_abs($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $result=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 1722 "datetimemodule.c"
        var $2=(($1+20)&4294967295); //@line 1722 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 1722 "datetimemodule.c"
        var $4=((($3))|0) < 0; //@line 1722 "datetimemodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1722 "datetimemodule.c"
      case 1: // $bb
        ___assert_fail(((__str108)&4294967295), ((__str1)&4294967295), 1722, ((___PRETTY_FUNCTION___10169)&4294967295)); //@line 1722 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 6390"; //@line 1722 "datetimemodule.c"
      case 2: // $bb1
        var $5=HEAP[$self_addr]; //@line 1723 "datetimemodule.c"
        var $6=(($5+16)&4294967295); //@line 1723 "datetimemodule.c"
        var $7=HEAP[$6]; //@line 1723 "datetimemodule.c"
        var $8=((($7))|0) < 0; //@line 1723 "datetimemodule.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1723 "datetimemodule.c"
      case 3: // $bb2
        ___assert_fail(((__str109)&4294967295), ((__str1)&4294967295), 1723, ((___PRETTY_FUNCTION___10169)&4294967295)); //@line 1723 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 6401"; //@line 1723 "datetimemodule.c"
      case 4: // $bb3
        var $9=HEAP[$self_addr]; //@line 1725 "datetimemodule.c"
        var $10=(($9+12)&4294967295); //@line 1725 "datetimemodule.c"
        var $11=HEAP[$10]; //@line 1725 "datetimemodule.c"
        var $12=((($11))|0) < 0; //@line 1725 "datetimemodule.c"
        if ($12) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1725 "datetimemodule.c"
      case 5: // $bb4
        var $13=HEAP[$self_addr]; //@line 1726 "datetimemodule.c"
        var $14=_delta_negative($13); //@line 1726 "datetimemodule.c"
        HEAP[$result]=$14; //@line 1726 "datetimemodule.c"
        __label__ = 7; break; //@line 1726 "datetimemodule.c"
      case 6: // $bb5
        var $15=HEAP[$self_addr]; //@line 1728 "datetimemodule.c"
        var $16=_delta_positive($15); //@line 1728 "datetimemodule.c"
        HEAP[$result]=$16; //@line 1728 "datetimemodule.c"
        __label__ = 7; break; //@line 1728 "datetimemodule.c"
      case 7: // $bb6
        var $17=HEAP[$result]; //@line 1730 "datetimemodule.c"
        HEAP[$0]=$17; //@line 1730 "datetimemodule.c"
        var $18=HEAP[$0]; //@line 1730 "datetimemodule.c"
        HEAP[$retval]=$18; //@line 1730 "datetimemodule.c"
        __label__ = 8; break; //@line 1730 "datetimemodule.c"
      case 8: // $return
        var $retval7=HEAP[$retval]; //@line 1730 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 1730 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _delta_subtract($left, $right) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $left_addr=__stackBase__;
        var $right_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $result=__stackBase__+16;
        var $days=__stackBase__+20;
        var $seconds=__stackBase__+24;
        var $microseconds=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$left_addr]=$left;
        HEAP[$right_addr]=$right;
        HEAP[$result]=__Py_NotImplementedStruct; //@line 1736 "datetimemodule.c"
        var $1=HEAP[$left_addr]; //@line 1738 "datetimemodule.c"
        var $2=(($1+4)&4294967295); //@line 1738 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 1738 "datetimemodule.c"
        var $4=($3)==(_PyDateTime_DeltaType); //@line 1738 "datetimemodule.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 1738 "datetimemodule.c"
      case 1: // $bb
        var $5=HEAP[$left_addr]; //@line 1738 "datetimemodule.c"
        var $6=(($5+4)&4294967295); //@line 1738 "datetimemodule.c"
        var $7=HEAP[$6]; //@line 1738 "datetimemodule.c"
        var $8=_PyType_IsSubtype($7, _PyDateTime_DeltaType); //@line 1738 "datetimemodule.c"
        var $9=((($8))|0)!=0; //@line 1738 "datetimemodule.c"
        if ($9) { __label__ = 2; break; } else { __label__ = 5; break; } //@line 1738 "datetimemodule.c"
      case 2: // $bb1
        var $10=HEAP[$right_addr]; //@line 1738 "datetimemodule.c"
        var $11=(($10+4)&4294967295); //@line 1738 "datetimemodule.c"
        var $12=HEAP[$11]; //@line 1738 "datetimemodule.c"
        var $13=($12)==(_PyDateTime_DeltaType); //@line 1738 "datetimemodule.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 1738 "datetimemodule.c"
      case 3: // $bb2
        var $14=HEAP[$right_addr]; //@line 1738 "datetimemodule.c"
        var $15=(($14+4)&4294967295); //@line 1738 "datetimemodule.c"
        var $16=HEAP[$15]; //@line 1738 "datetimemodule.c"
        var $17=_PyType_IsSubtype($16, _PyDateTime_DeltaType); //@line 1738 "datetimemodule.c"
        var $18=((($17))|0)!=0; //@line 1738 "datetimemodule.c"
        if ($18) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1738 "datetimemodule.c"
      case 4: // $bb3
        var $19=HEAP[$left_addr]; //@line 1743 "datetimemodule.c"
        var $20=$19; //@line 1743 "datetimemodule.c"
        var $21=(($20+12)&4294967295); //@line 1743 "datetimemodule.c"
        var $22=HEAP[$21]; //@line 1743 "datetimemodule.c"
        var $23=HEAP[$right_addr]; //@line 1743 "datetimemodule.c"
        var $24=$23; //@line 1743 "datetimemodule.c"
        var $25=(($24+12)&4294967295); //@line 1743 "datetimemodule.c"
        var $26=HEAP[$25]; //@line 1743 "datetimemodule.c"
        var $27=((($22) - ($26))&4294967295); //@line 1743 "datetimemodule.c"
        HEAP[$days]=$27; //@line 1743 "datetimemodule.c"
        var $28=HEAP[$left_addr]; //@line 1744 "datetimemodule.c"
        var $29=$28; //@line 1744 "datetimemodule.c"
        var $30=(($29+16)&4294967295); //@line 1744 "datetimemodule.c"
        var $31=HEAP[$30]; //@line 1744 "datetimemodule.c"
        var $32=HEAP[$right_addr]; //@line 1744 "datetimemodule.c"
        var $33=$32; //@line 1744 "datetimemodule.c"
        var $34=(($33+16)&4294967295); //@line 1744 "datetimemodule.c"
        var $35=HEAP[$34]; //@line 1744 "datetimemodule.c"
        var $36=((($31) - ($35))&4294967295); //@line 1744 "datetimemodule.c"
        HEAP[$seconds]=$36; //@line 1744 "datetimemodule.c"
        var $37=HEAP[$left_addr]; //@line 1746 "datetimemodule.c"
        var $38=$37; //@line 1746 "datetimemodule.c"
        var $39=(($38+20)&4294967295); //@line 1746 "datetimemodule.c"
        var $40=HEAP[$39]; //@line 1746 "datetimemodule.c"
        var $41=HEAP[$right_addr]; //@line 1746 "datetimemodule.c"
        var $42=$41; //@line 1746 "datetimemodule.c"
        var $43=(($42+20)&4294967295); //@line 1746 "datetimemodule.c"
        var $44=HEAP[$43]; //@line 1746 "datetimemodule.c"
        var $45=((($40) - ($44))&4294967295); //@line 1746 "datetimemodule.c"
        HEAP[$microseconds]=$45; //@line 1746 "datetimemodule.c"
        var $46=HEAP[$days]; //@line 1747 "datetimemodule.c"
        var $47=HEAP[$seconds]; //@line 1747 "datetimemodule.c"
        var $48=HEAP[$microseconds]; //@line 1747 "datetimemodule.c"
        var $49=_new_delta_ex($46, $47, $48, 1, _PyDateTime_DeltaType); //@line 1747 "datetimemodule.c"
        HEAP[$result]=$49; //@line 1747 "datetimemodule.c"
        __label__ = 5; break; //@line 1747 "datetimemodule.c"
      case 5: // $bb4
        var $50=HEAP[$result]; //@line 1750 "datetimemodule.c"
        var $51=($50)==(__Py_NotImplementedStruct); //@line 1750 "datetimemodule.c"
        if ($51) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1750 "datetimemodule.c"
      case 6: // $bb5
        var $52=HEAP[$result]; //@line 1751 "datetimemodule.c"
        var $53=(($52)&4294967295); //@line 1751 "datetimemodule.c"
        var $54=HEAP[$53]; //@line 1751 "datetimemodule.c"
        var $55=((($54) + 1)&4294967295); //@line 1751 "datetimemodule.c"
        var $56=HEAP[$result]; //@line 1751 "datetimemodule.c"
        var $57=(($56)&4294967295); //@line 1751 "datetimemodule.c"
        HEAP[$57]=$55; //@line 1751 "datetimemodule.c"
        __label__ = 7; break; //@line 1751 "datetimemodule.c"
      case 7: // $bb6
        var $58=HEAP[$result]; //@line 1752 "datetimemodule.c"
        HEAP[$0]=$58; //@line 1752 "datetimemodule.c"
        var $59=HEAP[$0]; //@line 1752 "datetimemodule.c"
        HEAP[$retval]=$59; //@line 1752 "datetimemodule.c"
        __label__ = 8; break; //@line 1752 "datetimemodule.c"
      case 8: // $return
        var $retval7=HEAP[$retval]; //@line 1752 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 1752 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _delta_richcompare($self, $other, $op) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $other_addr=__stackBase__+4;
        var $op_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $diff=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$other_addr]=$other;
        HEAP[$op_addr]=$op;
        HEAP[$diff]=42; //@line 1762 "datetimemodule.c"
        var $1=HEAP[$other_addr]; //@line 1764 "datetimemodule.c"
        var $2=(($1+4)&4294967295); //@line 1764 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 1764 "datetimemodule.c"
        var $4=($3)==(_PyDateTime_DeltaType); //@line 1764 "datetimemodule.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 1764 "datetimemodule.c"
      case 1: // $bb
        var $5=HEAP[$other_addr]; //@line 1764 "datetimemodule.c"
        var $6=(($5+4)&4294967295); //@line 1764 "datetimemodule.c"
        var $7=HEAP[$6]; //@line 1764 "datetimemodule.c"
        var $8=_PyType_IsSubtype($7, _PyDateTime_DeltaType); //@line 1764 "datetimemodule.c"
        var $9=((($8))|0)!=0; //@line 1764 "datetimemodule.c"
        if ($9) { __label__ = 2; break; } else { __label__ = 6; break; } //@line 1764 "datetimemodule.c"
      case 2: // $bb1
        var $10=HEAP[$self_addr]; //@line 1765 "datetimemodule.c"
        var $11=(($10+12)&4294967295); //@line 1765 "datetimemodule.c"
        var $12=HEAP[$11]; //@line 1765 "datetimemodule.c"
        var $13=HEAP[$other_addr]; //@line 1765 "datetimemodule.c"
        var $14=$13; //@line 1765 "datetimemodule.c"
        var $15=(($14+12)&4294967295); //@line 1765 "datetimemodule.c"
        var $16=HEAP[$15]; //@line 1765 "datetimemodule.c"
        var $17=((($12) - ($16))&4294967295); //@line 1765 "datetimemodule.c"
        HEAP[$diff]=$17; //@line 1765 "datetimemodule.c"
        var $18=HEAP[$diff]; //@line 1766 "datetimemodule.c"
        var $19=((($18))|0)==0; //@line 1766 "datetimemodule.c"
        if ($19) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 1766 "datetimemodule.c"
      case 3: // $bb2
        var $20=HEAP[$self_addr]; //@line 1767 "datetimemodule.c"
        var $21=(($20+16)&4294967295); //@line 1767 "datetimemodule.c"
        var $22=HEAP[$21]; //@line 1767 "datetimemodule.c"
        var $23=HEAP[$other_addr]; //@line 1767 "datetimemodule.c"
        var $24=$23; //@line 1767 "datetimemodule.c"
        var $25=(($24+16)&4294967295); //@line 1767 "datetimemodule.c"
        var $26=HEAP[$25]; //@line 1767 "datetimemodule.c"
        var $27=((($22) - ($26))&4294967295); //@line 1767 "datetimemodule.c"
        HEAP[$diff]=$27; //@line 1767 "datetimemodule.c"
        var $28=HEAP[$diff]; //@line 1768 "datetimemodule.c"
        var $29=((($28))|0)==0; //@line 1768 "datetimemodule.c"
        if ($29) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1768 "datetimemodule.c"
      case 4: // $bb3
        var $30=HEAP[$self_addr]; //@line 1769 "datetimemodule.c"
        var $31=(($30+20)&4294967295); //@line 1769 "datetimemodule.c"
        var $32=HEAP[$31]; //@line 1769 "datetimemodule.c"
        var $33=HEAP[$other_addr]; //@line 1769 "datetimemodule.c"
        var $34=$33; //@line 1769 "datetimemodule.c"
        var $35=(($34+20)&4294967295); //@line 1769 "datetimemodule.c"
        var $36=HEAP[$35]; //@line 1769 "datetimemodule.c"
        var $37=((($32) - ($36))&4294967295); //@line 1769 "datetimemodule.c"
        HEAP[$diff]=$37; //@line 1769 "datetimemodule.c"
        __label__ = 5; break; //@line 1769 "datetimemodule.c"
      case 5: // $bb4
        __label__ = 10; break; //@line 1769 "datetimemodule.c"
      case 6: // $bb5
        var $38=HEAP[$op_addr]; //@line 1773 "datetimemodule.c"
        var $39=((($38))|0)==2; //@line 1773 "datetimemodule.c"
        if ($39) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 1773 "datetimemodule.c"
      case 7: // $bb6
        var $40=HEAP[$op_addr]; //@line 1773 "datetimemodule.c"
        var $41=((($40))|0)==3; //@line 1773 "datetimemodule.c"
        if ($41) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1773 "datetimemodule.c"
      case 8: // $bb7
        HEAP[$diff]=1; //@line 1774 "datetimemodule.c"
        __label__ = 10; break; //@line 1774 "datetimemodule.c"
      case 9: // $bb8
        var $42=HEAP[$self_addr]; //@line 1777 "datetimemodule.c"
        var $43=$42; //@line 1777 "datetimemodule.c"
        var $44=HEAP[$other_addr]; //@line 1777 "datetimemodule.c"
        var $45=_cmperror($43, $44); //@line 1777 "datetimemodule.c"
        HEAP[$0]=$45; //@line 1777 "datetimemodule.c"
        __label__ = 11; break; //@line 1777 "datetimemodule.c"
      case 10: // $bb9
        var $46=HEAP[$diff]; //@line 1779 "datetimemodule.c"
        var $47=HEAP[$op_addr]; //@line 1779 "datetimemodule.c"
        var $48=_diff_to_bool($46, $47); //@line 1779 "datetimemodule.c"
        HEAP[$0]=$48; //@line 1779 "datetimemodule.c"
        __label__ = 11; break; //@line 1779 "datetimemodule.c"
      case 11: // $bb10
        var $49=HEAP[$0]; //@line 1777 "datetimemodule.c"
        HEAP[$retval]=$49; //@line 1777 "datetimemodule.c"
        __label__ = 12; break; //@line 1777 "datetimemodule.c"
      case 12: // $return
        var $retval11=HEAP[$retval]; //@line 1777 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 1777 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _delta_hash($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $temp=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 1787 "datetimemodule.c"
        var $2=(($1+8)&4294967295); //@line 1787 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 1787 "datetimemodule.c"
        var $4=((($3))|0)==-1; //@line 1787 "datetimemodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 1787 "datetimemodule.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 1788 "datetimemodule.c"
        var $6=_delta_getstate($5); //@line 1788 "datetimemodule.c"
        HEAP[$temp]=$6; //@line 1788 "datetimemodule.c"
        var $7=HEAP[$temp]; //@line 1789 "datetimemodule.c"
        var $8=($7)!=0; //@line 1789 "datetimemodule.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 1789 "datetimemodule.c"
      case 2: // $bb1
        var $9=HEAP[$temp]; //@line 1790 "datetimemodule.c"
        var $10=_PyObject_Hash($9); //@line 1790 "datetimemodule.c"
        var $11=HEAP[$self_addr]; //@line 1790 "datetimemodule.c"
        var $12=(($11+8)&4294967295); //@line 1790 "datetimemodule.c"
        HEAP[$12]=$10; //@line 1790 "datetimemodule.c"
        var $13=HEAP[$temp]; //@line 1791 "datetimemodule.c"
        var $14=(($13)&4294967295); //@line 1791 "datetimemodule.c"
        var $15=HEAP[$14]; //@line 1791 "datetimemodule.c"
        var $16=((($15) - 1)&4294967295); //@line 1791 "datetimemodule.c"
        var $17=HEAP[$temp]; //@line 1791 "datetimemodule.c"
        var $18=(($17)&4294967295); //@line 1791 "datetimemodule.c"
        HEAP[$18]=$16; //@line 1791 "datetimemodule.c"
        var $19=HEAP[$temp]; //@line 1791 "datetimemodule.c"
        var $20=(($19)&4294967295); //@line 1791 "datetimemodule.c"
        var $21=HEAP[$20]; //@line 1791 "datetimemodule.c"
        var $22=((($21))|0)==0; //@line 1791 "datetimemodule.c"
        if ($22) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1791 "datetimemodule.c"
      case 3: // $bb2
        var $23=HEAP[$temp]; //@line 1791 "datetimemodule.c"
        var $24=(($23+4)&4294967295); //@line 1791 "datetimemodule.c"
        var $25=HEAP[$24]; //@line 1791 "datetimemodule.c"
        var $26=(($25+24)&4294967295); //@line 1791 "datetimemodule.c"
        var $27=HEAP[$26]; //@line 1791 "datetimemodule.c"
        var $28=HEAP[$temp]; //@line 1791 "datetimemodule.c"
        FUNCTION_TABLE[$27]($28); //@line 1791 "datetimemodule.c"
        __label__ = 4; break; //@line 1791 "datetimemodule.c"
      case 4: // $bb3
        var $29=HEAP[$self_addr]; //@line 1794 "datetimemodule.c"
        var $30=(($29+8)&4294967295); //@line 1794 "datetimemodule.c"
        var $31=HEAP[$30]; //@line 1794 "datetimemodule.c"
        HEAP[$0]=$31; //@line 1794 "datetimemodule.c"
        var $32=HEAP[$0]; //@line 1794 "datetimemodule.c"
        HEAP[$retval]=$32; //@line 1794 "datetimemodule.c"
        __label__ = 5; break; //@line 1794 "datetimemodule.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 1794 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 1794 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _delta_multiply($left, $right) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $left_addr=__stackBase__;
        var $right_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $result=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$left_addr]=$left;
        HEAP[$right_addr]=$right;
        HEAP[$result]=__Py_NotImplementedStruct; //@line 1800 "datetimemodule.c"
        var $1=HEAP[$left_addr]; //@line 1802 "datetimemodule.c"
        var $2=(($1+4)&4294967295); //@line 1802 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 1802 "datetimemodule.c"
        var $4=($3)==(_PyDateTime_DeltaType); //@line 1802 "datetimemodule.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 1802 "datetimemodule.c"
      case 1: // $bb
        var $5=HEAP[$left_addr]; //@line 1802 "datetimemodule.c"
        var $6=(($5+4)&4294967295); //@line 1802 "datetimemodule.c"
        var $7=HEAP[$6]; //@line 1802 "datetimemodule.c"
        var $8=_PyType_IsSubtype($7, _PyDateTime_DeltaType); //@line 1802 "datetimemodule.c"
        var $9=((($8))|0)!=0; //@line 1802 "datetimemodule.c"
        if ($9) { __label__ = 2; break; } else { __label__ = 6; break; } //@line 1802 "datetimemodule.c"
      case 2: // $bb1
        var $10=HEAP[$right_addr]; //@line 1804 "datetimemodule.c"
        var $11=(($10+4)&4294967295); //@line 1804 "datetimemodule.c"
        var $12=HEAP[$11]; //@line 1804 "datetimemodule.c"
        var $13=(($12+84)&4294967295); //@line 1804 "datetimemodule.c"
        var $14=HEAP[$13]; //@line 1804 "datetimemodule.c"
        var $15=($14) & 8388608; //@line 1804 "datetimemodule.c"
        var $16=((($15))|0)!=0; //@line 1804 "datetimemodule.c"
        if ($16) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 1804 "datetimemodule.c"
      case 3: // $bb2
        var $17=HEAP[$right_addr]; //@line 1804 "datetimemodule.c"
        var $18=(($17+4)&4294967295); //@line 1804 "datetimemodule.c"
        var $19=HEAP[$18]; //@line 1804 "datetimemodule.c"
        var $20=(($19+84)&4294967295); //@line 1804 "datetimemodule.c"
        var $21=HEAP[$20]; //@line 1804 "datetimemodule.c"
        var $22=($21) & 16777216; //@line 1804 "datetimemodule.c"
        var $23=((($22))|0)!=0; //@line 1804 "datetimemodule.c"
        if ($23) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1804 "datetimemodule.c"
      case 4: // $bb3
        var $24=HEAP[$left_addr]; //@line 1805 "datetimemodule.c"
        var $25=$24; //@line 1805 "datetimemodule.c"
        var $26=HEAP[$right_addr]; //@line 1805 "datetimemodule.c"
        var $27=_multiply_int_timedelta($26, $25); //@line 1805 "datetimemodule.c"
        HEAP[$result]=$27; //@line 1805 "datetimemodule.c"
        __label__ = 5; break; //@line 1805 "datetimemodule.c"
      case 5: // $bb4
        __label__ = 9; break; //@line 1805 "datetimemodule.c"
      case 6: // $bb5
        var $28=HEAP[$left_addr]; //@line 1808 "datetimemodule.c"
        var $29=(($28+4)&4294967295); //@line 1808 "datetimemodule.c"
        var $30=HEAP[$29]; //@line 1808 "datetimemodule.c"
        var $31=(($30+84)&4294967295); //@line 1808 "datetimemodule.c"
        var $32=HEAP[$31]; //@line 1808 "datetimemodule.c"
        var $33=($32) & 8388608; //@line 1808 "datetimemodule.c"
        var $34=((($33))|0)!=0; //@line 1808 "datetimemodule.c"
        if ($34) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 1808 "datetimemodule.c"
      case 7: // $bb6
        var $35=HEAP[$left_addr]; //@line 1808 "datetimemodule.c"
        var $36=(($35+4)&4294967295); //@line 1808 "datetimemodule.c"
        var $37=HEAP[$36]; //@line 1808 "datetimemodule.c"
        var $38=(($37+84)&4294967295); //@line 1808 "datetimemodule.c"
        var $39=HEAP[$38]; //@line 1808 "datetimemodule.c"
        var $40=($39) & 16777216; //@line 1808 "datetimemodule.c"
        var $41=((($40))|0)!=0; //@line 1808 "datetimemodule.c"
        if ($41) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1808 "datetimemodule.c"
      case 8: // $bb7
        var $42=HEAP[$right_addr]; //@line 1809 "datetimemodule.c"
        var $43=$42; //@line 1809 "datetimemodule.c"
        var $44=HEAP[$left_addr]; //@line 1809 "datetimemodule.c"
        var $45=_multiply_int_timedelta($44, $43); //@line 1809 "datetimemodule.c"
        HEAP[$result]=$45; //@line 1809 "datetimemodule.c"
        __label__ = 9; break; //@line 1809 "datetimemodule.c"
      case 9: // $bb8
        var $46=HEAP[$result]; //@line 1812 "datetimemodule.c"
        var $47=($46)==(__Py_NotImplementedStruct); //@line 1812 "datetimemodule.c"
        if ($47) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1812 "datetimemodule.c"
      case 10: // $bb9
        var $48=HEAP[$result]; //@line 1813 "datetimemodule.c"
        var $49=(($48)&4294967295); //@line 1813 "datetimemodule.c"
        var $50=HEAP[$49]; //@line 1813 "datetimemodule.c"
        var $51=((($50) + 1)&4294967295); //@line 1813 "datetimemodule.c"
        var $52=HEAP[$result]; //@line 1813 "datetimemodule.c"
        var $53=(($52)&4294967295); //@line 1813 "datetimemodule.c"
        HEAP[$53]=$51; //@line 1813 "datetimemodule.c"
        __label__ = 11; break; //@line 1813 "datetimemodule.c"
      case 11: // $bb10
        var $54=HEAP[$result]; //@line 1814 "datetimemodule.c"
        HEAP[$0]=$54; //@line 1814 "datetimemodule.c"
        var $55=HEAP[$0]; //@line 1814 "datetimemodule.c"
        HEAP[$retval]=$55; //@line 1814 "datetimemodule.c"
        __label__ = 12; break; //@line 1814 "datetimemodule.c"
      case 12: // $return
        var $retval11=HEAP[$retval]; //@line 1814 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 1814 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _delta_divide($left, $right) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $left_addr=__stackBase__;
        var $right_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $result=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$left_addr]=$left;
        HEAP[$right_addr]=$right;
        HEAP[$result]=__Py_NotImplementedStruct; //@line 1820 "datetimemodule.c"
        var $1=HEAP[$left_addr]; //@line 1822 "datetimemodule.c"
        var $2=(($1+4)&4294967295); //@line 1822 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 1822 "datetimemodule.c"
        var $4=($3)==(_PyDateTime_DeltaType); //@line 1822 "datetimemodule.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 1822 "datetimemodule.c"
      case 1: // $bb
        var $5=HEAP[$left_addr]; //@line 1822 "datetimemodule.c"
        var $6=(($5+4)&4294967295); //@line 1822 "datetimemodule.c"
        var $7=HEAP[$6]; //@line 1822 "datetimemodule.c"
        var $8=_PyType_IsSubtype($7, _PyDateTime_DeltaType); //@line 1822 "datetimemodule.c"
        var $9=((($8))|0)!=0; //@line 1822 "datetimemodule.c"
        if ($9) { __label__ = 2; break; } else { __label__ = 5; break; } //@line 1822 "datetimemodule.c"
      case 2: // $bb1
        var $10=HEAP[$right_addr]; //@line 1824 "datetimemodule.c"
        var $11=(($10+4)&4294967295); //@line 1824 "datetimemodule.c"
        var $12=HEAP[$11]; //@line 1824 "datetimemodule.c"
        var $13=(($12+84)&4294967295); //@line 1824 "datetimemodule.c"
        var $14=HEAP[$13]; //@line 1824 "datetimemodule.c"
        var $15=($14) & 8388608; //@line 1824 "datetimemodule.c"
        var $16=((($15))|0)!=0; //@line 1824 "datetimemodule.c"
        if ($16) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 1824 "datetimemodule.c"
      case 3: // $bb2
        var $17=HEAP[$right_addr]; //@line 1824 "datetimemodule.c"
        var $18=(($17+4)&4294967295); //@line 1824 "datetimemodule.c"
        var $19=HEAP[$18]; //@line 1824 "datetimemodule.c"
        var $20=(($19+84)&4294967295); //@line 1824 "datetimemodule.c"
        var $21=HEAP[$20]; //@line 1824 "datetimemodule.c"
        var $22=($21) & 16777216; //@line 1824 "datetimemodule.c"
        var $23=((($22))|0)!=0; //@line 1824 "datetimemodule.c"
        if ($23) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1824 "datetimemodule.c"
      case 4: // $bb3
        var $24=HEAP[$left_addr]; //@line 1825 "datetimemodule.c"
        var $25=$24; //@line 1825 "datetimemodule.c"
        var $26=HEAP[$right_addr]; //@line 1825 "datetimemodule.c"
        var $27=_divide_timedelta_int($25, $26); //@line 1825 "datetimemodule.c"
        HEAP[$result]=$27; //@line 1825 "datetimemodule.c"
        __label__ = 5; break; //@line 1825 "datetimemodule.c"
      case 5: // $bb4
        var $28=HEAP[$result]; //@line 1830 "datetimemodule.c"
        var $29=($28)==(__Py_NotImplementedStruct); //@line 1830 "datetimemodule.c"
        if ($29) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1830 "datetimemodule.c"
      case 6: // $bb5
        var $30=HEAP[$result]; //@line 1831 "datetimemodule.c"
        var $31=(($30)&4294967295); //@line 1831 "datetimemodule.c"
        var $32=HEAP[$31]; //@line 1831 "datetimemodule.c"
        var $33=((($32) + 1)&4294967295); //@line 1831 "datetimemodule.c"
        var $34=HEAP[$result]; //@line 1831 "datetimemodule.c"
        var $35=(($34)&4294967295); //@line 1831 "datetimemodule.c"
        HEAP[$35]=$33; //@line 1831 "datetimemodule.c"
        __label__ = 7; break; //@line 1831 "datetimemodule.c"
      case 7: // $bb6
        var $36=HEAP[$result]; //@line 1832 "datetimemodule.c"
        HEAP[$0]=$36; //@line 1832 "datetimemodule.c"
        var $37=HEAP[$0]; //@line 1832 "datetimemodule.c"
        HEAP[$retval]=$37; //@line 1832 "datetimemodule.c"
        __label__ = 8; break; //@line 1832 "datetimemodule.c"
      case 8: // $return
        var $retval7=HEAP[$retval]; //@line 1832 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 1832 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _accum($tag, $sofar, $num, $factor, $leftover) {
    var __stackBase__  = STACKTOP; STACKTOP += 68; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 68);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $tag_addr=__stackBase__;
        var $sofar_addr=__stackBase__+4;
        var $num_addr=__stackBase__+8;
        var $factor_addr=__stackBase__+12;
        var $leftover_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $prod=__stackBase__+28;
        var $sum=__stackBase__+32;
        var $dnum=__stackBase__+36;
        var $fracpart=__stackBase__+44;
        var $intpart=__stackBase__+52;
        var $x=__stackBase__+60;
        var $y=__stackBase__+64;
        var $_alloca_point_=0;
        HEAP[$tag_addr]=$tag;
        HEAP[$sofar_addr]=$sofar;
        HEAP[$num_addr]=$num;
        HEAP[$factor_addr]=$factor;
        HEAP[$leftover_addr]=$leftover;
        var $1=HEAP[$num_addr]; //@line 1851 "datetimemodule.c"
        var $2=($1)==0; //@line 1851 "datetimemodule.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1851 "datetimemodule.c"
      case 1: // $bb
        ___assert_fail(((__str110)&4294967295), ((__str1)&4294967295), 1851, ((___PRETTY_FUNCTION___10356)&4294967295)); //@line 1851 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 6969"; //@line 1851 "datetimemodule.c"
      case 2: // $bb1
        var $3=HEAP[$num_addr]; //@line 1853 "datetimemodule.c"
        var $4=(($3+4)&4294967295); //@line 1853 "datetimemodule.c"
        var $5=HEAP[$4]; //@line 1853 "datetimemodule.c"
        var $6=(($5+84)&4294967295); //@line 1853 "datetimemodule.c"
        var $7=HEAP[$6]; //@line 1853 "datetimemodule.c"
        var $8=($7) & 8388608; //@line 1853 "datetimemodule.c"
        var $9=((($8))|0)!=0; //@line 1853 "datetimemodule.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 1853 "datetimemodule.c"
      case 3: // $bb2
        var $10=HEAP[$num_addr]; //@line 1853 "datetimemodule.c"
        var $11=(($10+4)&4294967295); //@line 1853 "datetimemodule.c"
        var $12=HEAP[$11]; //@line 1853 "datetimemodule.c"
        var $13=(($12+84)&4294967295); //@line 1853 "datetimemodule.c"
        var $14=HEAP[$13]; //@line 1853 "datetimemodule.c"
        var $15=($14) & 16777216; //@line 1853 "datetimemodule.c"
        var $16=((($15))|0)!=0; //@line 1853 "datetimemodule.c"
        if ($16) { __label__ = 4; break; } else { __label__ = 9; break; } //@line 1853 "datetimemodule.c"
      case 4: // $bb3
        var $17=HEAP[$num_addr]; //@line 1854 "datetimemodule.c"
        var $18=HEAP[$factor_addr]; //@line 1854 "datetimemodule.c"
        var $19=_PyNumber_Multiply($17, $18); //@line 1854 "datetimemodule.c"
        HEAP[$prod]=$19; //@line 1854 "datetimemodule.c"
        var $20=HEAP[$prod]; //@line 1855 "datetimemodule.c"
        var $21=($20)==0; //@line 1855 "datetimemodule.c"
        if ($21) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1855 "datetimemodule.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 1856 "datetimemodule.c"
        __label__ = 42; break; //@line 1856 "datetimemodule.c"
      case 6: // $bb5
        var $22=HEAP[$sofar_addr]; //@line 1857 "datetimemodule.c"
        var $23=HEAP[$prod]; //@line 1857 "datetimemodule.c"
        var $24=_PyNumber_Add($22, $23); //@line 1857 "datetimemodule.c"
        HEAP[$sum]=$24; //@line 1857 "datetimemodule.c"
        var $25=HEAP[$prod]; //@line 1858 "datetimemodule.c"
        var $26=(($25)&4294967295); //@line 1858 "datetimemodule.c"
        var $27=HEAP[$26]; //@line 1858 "datetimemodule.c"
        var $28=((($27) - 1)&4294967295); //@line 1858 "datetimemodule.c"
        var $29=HEAP[$prod]; //@line 1858 "datetimemodule.c"
        var $30=(($29)&4294967295); //@line 1858 "datetimemodule.c"
        HEAP[$30]=$28; //@line 1858 "datetimemodule.c"
        var $31=HEAP[$prod]; //@line 1858 "datetimemodule.c"
        var $32=(($31)&4294967295); //@line 1858 "datetimemodule.c"
        var $33=HEAP[$32]; //@line 1858 "datetimemodule.c"
        var $34=((($33))|0)==0; //@line 1858 "datetimemodule.c"
        if ($34) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1858 "datetimemodule.c"
      case 7: // $bb6
        var $35=HEAP[$prod]; //@line 1858 "datetimemodule.c"
        var $36=(($35+4)&4294967295); //@line 1858 "datetimemodule.c"
        var $37=HEAP[$36]; //@line 1858 "datetimemodule.c"
        var $38=(($37+24)&4294967295); //@line 1858 "datetimemodule.c"
        var $39=HEAP[$38]; //@line 1858 "datetimemodule.c"
        var $40=HEAP[$prod]; //@line 1858 "datetimemodule.c"
        FUNCTION_TABLE[$39]($40); //@line 1858 "datetimemodule.c"
        __label__ = 8; break; //@line 1858 "datetimemodule.c"
      case 8: // $bb7
        var $41=HEAP[$sum]; //@line 1859 "datetimemodule.c"
        HEAP[$0]=$41; //@line 1859 "datetimemodule.c"
        __label__ = 42; break; //@line 1859 "datetimemodule.c"
      case 9: // $bb8
        var $42=HEAP[$num_addr]; //@line 1862 "datetimemodule.c"
        var $43=(($42+4)&4294967295); //@line 1862 "datetimemodule.c"
        var $44=HEAP[$43]; //@line 1862 "datetimemodule.c"
        var $45=($44)==(_PyFloat_Type); //@line 1862 "datetimemodule.c"
        if ($45) { __label__ = 11; break; } else { __label__ = 10; break; } //@line 1862 "datetimemodule.c"
      case 10: // $bb9
        var $46=HEAP[$num_addr]; //@line 1862 "datetimemodule.c"
        var $47=(($46+4)&4294967295); //@line 1862 "datetimemodule.c"
        var $48=HEAP[$47]; //@line 1862 "datetimemodule.c"
        var $49=_PyType_IsSubtype($48, _PyFloat_Type); //@line 1862 "datetimemodule.c"
        var $50=((($49))|0)!=0; //@line 1862 "datetimemodule.c"
        if ($50) { __label__ = 11; break; } else { __label__ = 41; break; } //@line 1862 "datetimemodule.c"
      case 11: // $bb10
        var $51=HEAP[$num_addr]; //@line 1877 "datetimemodule.c"
        var $52=_PyFloat_AsDouble($51); //@line 1877 "datetimemodule.c"
        HEAP[$dnum]=$52; //@line 1877 "datetimemodule.c"
        var $53=HEAP[$dnum]; //@line 1878 "datetimemodule.c"
        var $54=($53) == -1; //@line 1878 "datetimemodule.c"
        if ($54) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 1878 "datetimemodule.c"
      case 12: // $bb11
        var $55=_PyErr_Occurred(); //@line 1878 "datetimemodule.c"
        var $56=($55)!=0; //@line 1878 "datetimemodule.c"
        if ($56) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1878 "datetimemodule.c"
      case 13: // $bb12
        HEAP[$0]=0; //@line 1879 "datetimemodule.c"
        __label__ = 42; break; //@line 1879 "datetimemodule.c"
      case 14: // $bb13
        var $57=HEAP[$dnum]; //@line 1880 "datetimemodule.c"
        var $58=_modf($57, $intpart); //@line 1880 "datetimemodule.c"
        HEAP[$fracpart]=$58; //@line 1880 "datetimemodule.c"
        var $59=HEAP[$intpart]; //@line 1881 "datetimemodule.c"
        var $60=_PyLong_FromDouble($59); //@line 1881 "datetimemodule.c"
        HEAP[$x]=$60; //@line 1881 "datetimemodule.c"
        var $61=HEAP[$x]; //@line 1882 "datetimemodule.c"
        var $62=($61)==0; //@line 1882 "datetimemodule.c"
        if ($62) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1882 "datetimemodule.c"
      case 15: // $bb14
        HEAP[$0]=0; //@line 1883 "datetimemodule.c"
        __label__ = 42; break; //@line 1883 "datetimemodule.c"
      case 16: // $bb15
        var $63=HEAP[$x]; //@line 1885 "datetimemodule.c"
        var $64=HEAP[$factor_addr]; //@line 1885 "datetimemodule.c"
        var $65=_PyNumber_Multiply($63, $64); //@line 1885 "datetimemodule.c"
        HEAP[$prod]=$65; //@line 1885 "datetimemodule.c"
        var $66=HEAP[$x]; //@line 1886 "datetimemodule.c"
        var $67=(($66)&4294967295); //@line 1886 "datetimemodule.c"
        var $68=HEAP[$67]; //@line 1886 "datetimemodule.c"
        var $69=((($68) - 1)&4294967295); //@line 1886 "datetimemodule.c"
        var $70=HEAP[$x]; //@line 1886 "datetimemodule.c"
        var $71=(($70)&4294967295); //@line 1886 "datetimemodule.c"
        HEAP[$71]=$69; //@line 1886 "datetimemodule.c"
        var $72=HEAP[$x]; //@line 1886 "datetimemodule.c"
        var $73=(($72)&4294967295); //@line 1886 "datetimemodule.c"
        var $74=HEAP[$73]; //@line 1886 "datetimemodule.c"
        var $75=((($74))|0)==0; //@line 1886 "datetimemodule.c"
        if ($75) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 1886 "datetimemodule.c"
      case 17: // $bb16
        var $76=HEAP[$x]; //@line 1886 "datetimemodule.c"
        var $77=(($76+4)&4294967295); //@line 1886 "datetimemodule.c"
        var $78=HEAP[$77]; //@line 1886 "datetimemodule.c"
        var $79=(($78+24)&4294967295); //@line 1886 "datetimemodule.c"
        var $80=HEAP[$79]; //@line 1886 "datetimemodule.c"
        var $81=HEAP[$x]; //@line 1886 "datetimemodule.c"
        FUNCTION_TABLE[$80]($81); //@line 1886 "datetimemodule.c"
        __label__ = 18; break; //@line 1886 "datetimemodule.c"
      case 18: // $bb17
        var $82=HEAP[$prod]; //@line 1887 "datetimemodule.c"
        var $83=($82)==0; //@line 1887 "datetimemodule.c"
        if ($83) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 1887 "datetimemodule.c"
      case 19: // $bb18
        HEAP[$0]=0; //@line 1888 "datetimemodule.c"
        __label__ = 42; break; //@line 1888 "datetimemodule.c"
      case 20: // $bb19
        var $84=HEAP[$sofar_addr]; //@line 1890 "datetimemodule.c"
        var $85=HEAP[$prod]; //@line 1890 "datetimemodule.c"
        var $86=_PyNumber_Add($84, $85); //@line 1890 "datetimemodule.c"
        HEAP[$sum]=$86; //@line 1890 "datetimemodule.c"
        var $87=HEAP[$prod]; //@line 1891 "datetimemodule.c"
        var $88=(($87)&4294967295); //@line 1891 "datetimemodule.c"
        var $89=HEAP[$88]; //@line 1891 "datetimemodule.c"
        var $90=((($89) - 1)&4294967295); //@line 1891 "datetimemodule.c"
        var $91=HEAP[$prod]; //@line 1891 "datetimemodule.c"
        var $92=(($91)&4294967295); //@line 1891 "datetimemodule.c"
        HEAP[$92]=$90; //@line 1891 "datetimemodule.c"
        var $93=HEAP[$prod]; //@line 1891 "datetimemodule.c"
        var $94=(($93)&4294967295); //@line 1891 "datetimemodule.c"
        var $95=HEAP[$94]; //@line 1891 "datetimemodule.c"
        var $96=((($95))|0)==0; //@line 1891 "datetimemodule.c"
        if ($96) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 1891 "datetimemodule.c"
      case 21: // $bb20
        var $97=HEAP[$prod]; //@line 1891 "datetimemodule.c"
        var $98=(($97+4)&4294967295); //@line 1891 "datetimemodule.c"
        var $99=HEAP[$98]; //@line 1891 "datetimemodule.c"
        var $100=(($99+24)&4294967295); //@line 1891 "datetimemodule.c"
        var $101=HEAP[$100]; //@line 1891 "datetimemodule.c"
        var $102=HEAP[$prod]; //@line 1891 "datetimemodule.c"
        FUNCTION_TABLE[$101]($102); //@line 1891 "datetimemodule.c"
        __label__ = 22; break; //@line 1891 "datetimemodule.c"
      case 22: // $bb21
        var $103=HEAP[$sum]; //@line 1892 "datetimemodule.c"
        var $104=($103)==0; //@line 1892 "datetimemodule.c"
        if ($104) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 1892 "datetimemodule.c"
      case 23: // $bb22
        HEAP[$0]=0; //@line 1893 "datetimemodule.c"
        __label__ = 42; break; //@line 1893 "datetimemodule.c"
      case 24: // $bb23
        var $105=HEAP[$fracpart]; //@line 1895 "datetimemodule.c"
        var $106=($105) == 0; //@line 1895 "datetimemodule.c"
        if ($106) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 1895 "datetimemodule.c"
      case 25: // $bb24
        var $107=HEAP[$sum]; //@line 1896 "datetimemodule.c"
        HEAP[$0]=$107; //@line 1896 "datetimemodule.c"
        __label__ = 42; break; //@line 1896 "datetimemodule.c"
      case 26: // $bb25
        var $108=HEAP[$factor_addr]; //@line 1901 "datetimemodule.c"
        var $109=(($108+4)&4294967295); //@line 1901 "datetimemodule.c"
        var $110=HEAP[$109]; //@line 1901 "datetimemodule.c"
        var $111=(($110+84)&4294967295); //@line 1901 "datetimemodule.c"
        var $112=HEAP[$111]; //@line 1901 "datetimemodule.c"
        var $113=($112) & 8388608; //@line 1901 "datetimemodule.c"
        var $114=((($113))|0)==0; //@line 1901 "datetimemodule.c"
        if ($114) { __label__ = 27; break; } else { __label__ = 29; break; } //@line 1901 "datetimemodule.c"
      case 27: // $bb26
        var $115=HEAP[$factor_addr]; //@line 1901 "datetimemodule.c"
        var $116=(($115+4)&4294967295); //@line 1901 "datetimemodule.c"
        var $117=HEAP[$116]; //@line 1901 "datetimemodule.c"
        var $118=(($117+84)&4294967295); //@line 1901 "datetimemodule.c"
        var $119=HEAP[$118]; //@line 1901 "datetimemodule.c"
        var $120=($119) & 16777216; //@line 1901 "datetimemodule.c"
        var $121=((($120))|0)==0; //@line 1901 "datetimemodule.c"
        if ($121) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 1901 "datetimemodule.c"
      case 28: // $bb27
        ___assert_fail(((__str111)&4294967295), ((__str1)&4294967295), 1901, ((___PRETTY_FUNCTION___10356)&4294967295)); //@line 1901 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 7195"; //@line 1901 "datetimemodule.c"
      case 29: // $bb28
        var $122=HEAP[$factor_addr]; //@line 1902 "datetimemodule.c"
        var $123=(($122+4)&4294967295); //@line 1902 "datetimemodule.c"
        var $124=HEAP[$123]; //@line 1902 "datetimemodule.c"
        var $125=(($124+84)&4294967295); //@line 1902 "datetimemodule.c"
        var $126=HEAP[$125]; //@line 1902 "datetimemodule.c"
        var $127=($126) & 8388608; //@line 1902 "datetimemodule.c"
        var $128=((($127))|0)!=0; //@line 1902 "datetimemodule.c"
        if ($128) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 1902 "datetimemodule.c"
      case 30: // $bb29
        var $129=HEAP[$factor_addr]; //@line 1903 "datetimemodule.c"
        var $130=_PyInt_AsLong($129); //@line 1903 "datetimemodule.c"
        var $131=((($130))|0); //@line 1903 "datetimemodule.c"
        HEAP[$dnum]=$131; //@line 1903 "datetimemodule.c"
        __label__ = 32; break; //@line 1903 "datetimemodule.c"
      case 31: // $bb30
        var $132=HEAP[$factor_addr]; //@line 1905 "datetimemodule.c"
        var $133=_PyLong_AsDouble($132); //@line 1905 "datetimemodule.c"
        HEAP[$dnum]=$133; //@line 1905 "datetimemodule.c"
        __label__ = 32; break; //@line 1905 "datetimemodule.c"
      case 32: // $bb31
        var $134=HEAP[$dnum]; //@line 1907 "datetimemodule.c"
        var $135=HEAP[$fracpart]; //@line 1907 "datetimemodule.c"
        var $136=($134) * ($135); //@line 1907 "datetimemodule.c"
        HEAP[$dnum]=$136; //@line 1907 "datetimemodule.c"
        var $137=HEAP[$dnum]; //@line 1908 "datetimemodule.c"
        var $138=_modf($137, $intpart); //@line 1908 "datetimemodule.c"
        HEAP[$fracpart]=$138; //@line 1908 "datetimemodule.c"
        var $139=HEAP[$intpart]; //@line 1909 "datetimemodule.c"
        var $140=_PyLong_FromDouble($139); //@line 1909 "datetimemodule.c"
        HEAP[$x]=$140; //@line 1909 "datetimemodule.c"
        var $141=HEAP[$x]; //@line 1910 "datetimemodule.c"
        var $142=($141)==0; //@line 1910 "datetimemodule.c"
        if ($142) { __label__ = 33; break; } else { __label__ = 36; break; } //@line 1910 "datetimemodule.c"
      case 33: // $bb32
        var $143=HEAP[$sum]; //@line 1911 "datetimemodule.c"
        var $144=(($143)&4294967295); //@line 1911 "datetimemodule.c"
        var $145=HEAP[$144]; //@line 1911 "datetimemodule.c"
        var $146=((($145) - 1)&4294967295); //@line 1911 "datetimemodule.c"
        var $147=HEAP[$sum]; //@line 1911 "datetimemodule.c"
        var $148=(($147)&4294967295); //@line 1911 "datetimemodule.c"
        HEAP[$148]=$146; //@line 1911 "datetimemodule.c"
        var $149=HEAP[$sum]; //@line 1911 "datetimemodule.c"
        var $150=(($149)&4294967295); //@line 1911 "datetimemodule.c"
        var $151=HEAP[$150]; //@line 1911 "datetimemodule.c"
        var $152=((($151))|0)==0; //@line 1911 "datetimemodule.c"
        if ($152) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 1911 "datetimemodule.c"
      case 34: // $bb33
        var $153=HEAP[$sum]; //@line 1911 "datetimemodule.c"
        var $154=(($153+4)&4294967295); //@line 1911 "datetimemodule.c"
        var $155=HEAP[$154]; //@line 1911 "datetimemodule.c"
        var $156=(($155+24)&4294967295); //@line 1911 "datetimemodule.c"
        var $157=HEAP[$156]; //@line 1911 "datetimemodule.c"
        var $158=HEAP[$sum]; //@line 1911 "datetimemodule.c"
        FUNCTION_TABLE[$157]($158); //@line 1911 "datetimemodule.c"
        __label__ = 35; break; //@line 1911 "datetimemodule.c"
      case 35: // $bb34
        HEAP[$0]=0; //@line 1912 "datetimemodule.c"
        __label__ = 42; break; //@line 1912 "datetimemodule.c"
      case 36: // $bb35
        var $159=HEAP[$sum]; //@line 1915 "datetimemodule.c"
        var $160=HEAP[$x]; //@line 1915 "datetimemodule.c"
        var $161=_PyNumber_Add($159, $160); //@line 1915 "datetimemodule.c"
        HEAP[$y]=$161; //@line 1915 "datetimemodule.c"
        var $162=HEAP[$sum]; //@line 1916 "datetimemodule.c"
        var $163=(($162)&4294967295); //@line 1916 "datetimemodule.c"
        var $164=HEAP[$163]; //@line 1916 "datetimemodule.c"
        var $165=((($164) - 1)&4294967295); //@line 1916 "datetimemodule.c"
        var $166=HEAP[$sum]; //@line 1916 "datetimemodule.c"
        var $167=(($166)&4294967295); //@line 1916 "datetimemodule.c"
        HEAP[$167]=$165; //@line 1916 "datetimemodule.c"
        var $168=HEAP[$sum]; //@line 1916 "datetimemodule.c"
        var $169=(($168)&4294967295); //@line 1916 "datetimemodule.c"
        var $170=HEAP[$169]; //@line 1916 "datetimemodule.c"
        var $171=((($170))|0)==0; //@line 1916 "datetimemodule.c"
        if ($171) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 1916 "datetimemodule.c"
      case 37: // $bb36
        var $172=HEAP[$sum]; //@line 1916 "datetimemodule.c"
        var $173=(($172+4)&4294967295); //@line 1916 "datetimemodule.c"
        var $174=HEAP[$173]; //@line 1916 "datetimemodule.c"
        var $175=(($174+24)&4294967295); //@line 1916 "datetimemodule.c"
        var $176=HEAP[$175]; //@line 1916 "datetimemodule.c"
        var $177=HEAP[$sum]; //@line 1916 "datetimemodule.c"
        FUNCTION_TABLE[$176]($177); //@line 1916 "datetimemodule.c"
        __label__ = 38; break; //@line 1916 "datetimemodule.c"
      case 38: // $bb37
        var $178=HEAP[$x]; //@line 1917 "datetimemodule.c"
        var $179=(($178)&4294967295); //@line 1917 "datetimemodule.c"
        var $180=HEAP[$179]; //@line 1917 "datetimemodule.c"
        var $181=((($180) - 1)&4294967295); //@line 1917 "datetimemodule.c"
        var $182=HEAP[$x]; //@line 1917 "datetimemodule.c"
        var $183=(($182)&4294967295); //@line 1917 "datetimemodule.c"
        HEAP[$183]=$181; //@line 1917 "datetimemodule.c"
        var $184=HEAP[$x]; //@line 1917 "datetimemodule.c"
        var $185=(($184)&4294967295); //@line 1917 "datetimemodule.c"
        var $186=HEAP[$185]; //@line 1917 "datetimemodule.c"
        var $187=((($186))|0)==0; //@line 1917 "datetimemodule.c"
        if ($187) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 1917 "datetimemodule.c"
      case 39: // $bb38
        var $188=HEAP[$x]; //@line 1917 "datetimemodule.c"
        var $189=(($188+4)&4294967295); //@line 1917 "datetimemodule.c"
        var $190=HEAP[$189]; //@line 1917 "datetimemodule.c"
        var $191=(($190+24)&4294967295); //@line 1917 "datetimemodule.c"
        var $192=HEAP[$191]; //@line 1917 "datetimemodule.c"
        var $193=HEAP[$x]; //@line 1917 "datetimemodule.c"
        FUNCTION_TABLE[$192]($193); //@line 1917 "datetimemodule.c"
        __label__ = 40; break; //@line 1917 "datetimemodule.c"
      case 40: // $bb39
        var $194=HEAP[$leftover_addr]; //@line 1918 "datetimemodule.c"
        var $195=HEAP[$194]; //@line 1918 "datetimemodule.c"
        var $196=HEAP[$fracpart]; //@line 1918 "datetimemodule.c"
        var $197=($195) + ($196); //@line 1918 "datetimemodule.c"
        var $198=HEAP[$leftover_addr]; //@line 1918 "datetimemodule.c"
        HEAP[$198]=$197; //@line 1918 "datetimemodule.c"
        var $199=HEAP[$y]; //@line 1919 "datetimemodule.c"
        HEAP[$0]=$199; //@line 1919 "datetimemodule.c"
        __label__ = 42; break; //@line 1919 "datetimemodule.c"
      case 41: // $bb40
        var $200=HEAP[$num_addr]; //@line 1922 "datetimemodule.c"
        var $201=(($200+4)&4294967295); //@line 1922 "datetimemodule.c"
        var $202=HEAP[$201]; //@line 1922 "datetimemodule.c"
        var $203=(($202+12)&4294967295); //@line 1922 "datetimemodule.c"
        var $204=HEAP[$203]; //@line 1922 "datetimemodule.c"
        var $205=HEAP[_PyExc_TypeError]; //@line 1922 "datetimemodule.c"
        var $206=HEAP[$tag_addr]; //@line 1922 "datetimemodule.c"
        var $207=_PyErr_Format($205, ((__str112)&4294967295), $206, $204); //@line 1922 "datetimemodule.c"
        HEAP[$0]=0; //@line 1925 "datetimemodule.c"
        __label__ = 42; break; //@line 1925 "datetimemodule.c"
      case 42: // $bb41
        var $208=HEAP[$0]; //@line 1856 "datetimemodule.c"
        HEAP[$retval]=$208; //@line 1856 "datetimemodule.c"
        __label__ = 43; break; //@line 1856 "datetimemodule.c"
      case 43: // $return
        var $retval42=HEAP[$retval]; //@line 1856 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval42; //@line 1856 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _delta_new($type, $args, $kw) {
    var __stackBase__  = STACKTOP; STACKTOP += 72; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 72);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $type_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kw_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $self=__stackBase__+20;
        var $day=__stackBase__+24;
        var $second=__stackBase__+28;
        var $us=__stackBase__+32;
        var $ms=__stackBase__+36;
        var $minute=__stackBase__+40;
        var $hour=__stackBase__+44;
        var $week=__stackBase__+48;
        var $x=__stackBase__+52;
        var $y=__stackBase__+56;
        var $leftover_us=__stackBase__+60;
        var $temp=__stackBase__+68;
        var $_alloca_point_=0;
        HEAP[$type_addr]=$type;
        HEAP[$args_addr]=$args;
        HEAP[$kw_addr]=$kw;
        HEAP[$self]=0; //@line 1931 "datetimemodule.c"
        HEAP[$day]=0; //@line 1934 "datetimemodule.c"
        HEAP[$second]=0; //@line 1935 "datetimemodule.c"
        HEAP[$us]=0; //@line 1936 "datetimemodule.c"
        HEAP[$ms]=0; //@line 1937 "datetimemodule.c"
        HEAP[$minute]=0; //@line 1938 "datetimemodule.c"
        HEAP[$hour]=0; //@line 1939 "datetimemodule.c"
        HEAP[$week]=0; //@line 1940 "datetimemodule.c"
        HEAP[$x]=0; //@line 1942 "datetimemodule.c"
        HEAP[$y]=0; //@line 1943 "datetimemodule.c"
        HEAP[$leftover_us]=0; //@line 1944 "datetimemodule.c"
        var $1=HEAP[$args_addr]; //@line 1951 "datetimemodule.c"
        var $2=HEAP[$kw_addr]; //@line 1951 "datetimemodule.c"
        var $3=__PyArg_ParseTupleAndKeywords_SizeT($1, $2, ((__str113)&4294967295), ((_keywords_10491)&4294967295), $day, $second, $us, $ms, $minute, $hour, $week); //@line 1951 "datetimemodule.c"
        var $4=((($3))|0)==0; //@line 1951 "datetimemodule.c"
        if ($4) { __label__ = 42; break; } else { __label__ = 1; break; } //@line 1951 "datetimemodule.c"
      case 1: // $bb
        var $5=_PyInt_FromLong(0); //@line 1957 "datetimemodule.c"
        HEAP[$x]=$5; //@line 1957 "datetimemodule.c"
        var $6=HEAP[$x]; //@line 1958 "datetimemodule.c"
        var $7=($6)==0; //@line 1958 "datetimemodule.c"
        if ($7) { __label__ = 42; break; } else { __label__ = 2; break; } //@line 1958 "datetimemodule.c"
      case 2: // $bb1
        var $8=HEAP[$us]; //@line 1967 "datetimemodule.c"
        var $9=($8)!=0; //@line 1967 "datetimemodule.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 1967 "datetimemodule.c"
      case 3: // $bb2
        var $10=HEAP[_us_per_us]; //@line 1968 "datetimemodule.c"
        var $11=HEAP[$us]; //@line 1968 "datetimemodule.c"
        var $12=HEAP[$x]; //@line 1968 "datetimemodule.c"
        var $13=_accum(((__str116)&4294967295), $12, $11, $10, $leftover_us); //@line 1968 "datetimemodule.c"
        HEAP[$y]=$13; //@line 1968 "datetimemodule.c"
        var $14=HEAP[$x]; //@line 1969 "datetimemodule.c"
        var $15=(($14)&4294967295); //@line 1969 "datetimemodule.c"
        var $16=HEAP[$15]; //@line 1969 "datetimemodule.c"
        var $17=((($16) - 1)&4294967295); //@line 1969 "datetimemodule.c"
        var $18=HEAP[$x]; //@line 1969 "datetimemodule.c"
        var $19=(($18)&4294967295); //@line 1969 "datetimemodule.c"
        HEAP[$19]=$17; //@line 1969 "datetimemodule.c"
        var $20=HEAP[$x]; //@line 1969 "datetimemodule.c"
        var $21=(($20)&4294967295); //@line 1969 "datetimemodule.c"
        var $22=HEAP[$21]; //@line 1969 "datetimemodule.c"
        var $23=((($22))|0)==0; //@line 1969 "datetimemodule.c"
        if ($23) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1969 "datetimemodule.c"
      case 4: // $bb3
        var $24=HEAP[$x]; //@line 1969 "datetimemodule.c"
        var $25=(($24+4)&4294967295); //@line 1969 "datetimemodule.c"
        var $26=HEAP[$25]; //@line 1969 "datetimemodule.c"
        var $27=(($26+24)&4294967295); //@line 1969 "datetimemodule.c"
        var $28=HEAP[$27]; //@line 1969 "datetimemodule.c"
        var $29=HEAP[$x]; //@line 1969 "datetimemodule.c"
        FUNCTION_TABLE[$28]($29); //@line 1969 "datetimemodule.c"
        __label__ = 5; break; //@line 1969 "datetimemodule.c"
      case 5: // $bb4
        var $30=HEAP[$y]; //@line 1969 "datetimemodule.c"
        HEAP[$x]=$30; //@line 1969 "datetimemodule.c"
        var $31=HEAP[$x]; //@line 1969 "datetimemodule.c"
        var $32=($31)==0; //@line 1969 "datetimemodule.c"
        if ($32) { __label__ = 42; break; } else { __label__ = 6; break; } //@line 1969 "datetimemodule.c"
      case 6: // $bb5
        var $33=HEAP[$ms]; //@line 1971 "datetimemodule.c"
        var $34=($33)!=0; //@line 1971 "datetimemodule.c"
        if ($34) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 1971 "datetimemodule.c"
      case 7: // $bb6
        var $35=HEAP[_us_per_ms]; //@line 1972 "datetimemodule.c"
        var $36=HEAP[$ms]; //@line 1972 "datetimemodule.c"
        var $37=HEAP[$x]; //@line 1972 "datetimemodule.c"
        var $38=_accum(((__str117)&4294967295), $37, $36, $35, $leftover_us); //@line 1972 "datetimemodule.c"
        HEAP[$y]=$38; //@line 1972 "datetimemodule.c"
        var $39=HEAP[$x]; //@line 1973 "datetimemodule.c"
        var $40=(($39)&4294967295); //@line 1973 "datetimemodule.c"
        var $41=HEAP[$40]; //@line 1973 "datetimemodule.c"
        var $42=((($41) - 1)&4294967295); //@line 1973 "datetimemodule.c"
        var $43=HEAP[$x]; //@line 1973 "datetimemodule.c"
        var $44=(($43)&4294967295); //@line 1973 "datetimemodule.c"
        HEAP[$44]=$42; //@line 1973 "datetimemodule.c"
        var $45=HEAP[$x]; //@line 1973 "datetimemodule.c"
        var $46=(($45)&4294967295); //@line 1973 "datetimemodule.c"
        var $47=HEAP[$46]; //@line 1973 "datetimemodule.c"
        var $48=((($47))|0)==0; //@line 1973 "datetimemodule.c"
        if ($48) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1973 "datetimemodule.c"
      case 8: // $bb7
        var $49=HEAP[$x]; //@line 1973 "datetimemodule.c"
        var $50=(($49+4)&4294967295); //@line 1973 "datetimemodule.c"
        var $51=HEAP[$50]; //@line 1973 "datetimemodule.c"
        var $52=(($51+24)&4294967295); //@line 1973 "datetimemodule.c"
        var $53=HEAP[$52]; //@line 1973 "datetimemodule.c"
        var $54=HEAP[$x]; //@line 1973 "datetimemodule.c"
        FUNCTION_TABLE[$53]($54); //@line 1973 "datetimemodule.c"
        __label__ = 9; break; //@line 1973 "datetimemodule.c"
      case 9: // $bb8
        var $55=HEAP[$y]; //@line 1973 "datetimemodule.c"
        HEAP[$x]=$55; //@line 1973 "datetimemodule.c"
        var $56=HEAP[$x]; //@line 1973 "datetimemodule.c"
        var $57=($56)==0; //@line 1973 "datetimemodule.c"
        if ($57) { __label__ = 42; break; } else { __label__ = 10; break; } //@line 1973 "datetimemodule.c"
      case 10: // $bb9
        var $58=HEAP[$second]; //@line 1975 "datetimemodule.c"
        var $59=($58)!=0; //@line 1975 "datetimemodule.c"
        if ($59) { __label__ = 11; break; } else { __label__ = 14; break; } //@line 1975 "datetimemodule.c"
      case 11: // $bb10
        var $60=HEAP[_us_per_second]; //@line 1976 "datetimemodule.c"
        var $61=HEAP[$second]; //@line 1976 "datetimemodule.c"
        var $62=HEAP[$x]; //@line 1976 "datetimemodule.c"
        var $63=_accum(((__str115)&4294967295), $62, $61, $60, $leftover_us); //@line 1976 "datetimemodule.c"
        HEAP[$y]=$63; //@line 1976 "datetimemodule.c"
        var $64=HEAP[$x]; //@line 1977 "datetimemodule.c"
        var $65=(($64)&4294967295); //@line 1977 "datetimemodule.c"
        var $66=HEAP[$65]; //@line 1977 "datetimemodule.c"
        var $67=((($66) - 1)&4294967295); //@line 1977 "datetimemodule.c"
        var $68=HEAP[$x]; //@line 1977 "datetimemodule.c"
        var $69=(($68)&4294967295); //@line 1977 "datetimemodule.c"
        HEAP[$69]=$67; //@line 1977 "datetimemodule.c"
        var $70=HEAP[$x]; //@line 1977 "datetimemodule.c"
        var $71=(($70)&4294967295); //@line 1977 "datetimemodule.c"
        var $72=HEAP[$71]; //@line 1977 "datetimemodule.c"
        var $73=((($72))|0)==0; //@line 1977 "datetimemodule.c"
        if ($73) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1977 "datetimemodule.c"
      case 12: // $bb11
        var $74=HEAP[$x]; //@line 1977 "datetimemodule.c"
        var $75=(($74+4)&4294967295); //@line 1977 "datetimemodule.c"
        var $76=HEAP[$75]; //@line 1977 "datetimemodule.c"
        var $77=(($76+24)&4294967295); //@line 1977 "datetimemodule.c"
        var $78=HEAP[$77]; //@line 1977 "datetimemodule.c"
        var $79=HEAP[$x]; //@line 1977 "datetimemodule.c"
        FUNCTION_TABLE[$78]($79); //@line 1977 "datetimemodule.c"
        __label__ = 13; break; //@line 1977 "datetimemodule.c"
      case 13: // $bb12
        var $80=HEAP[$y]; //@line 1977 "datetimemodule.c"
        HEAP[$x]=$80; //@line 1977 "datetimemodule.c"
        var $81=HEAP[$x]; //@line 1977 "datetimemodule.c"
        var $82=($81)==0; //@line 1977 "datetimemodule.c"
        if ($82) { __label__ = 42; break; } else { __label__ = 14; break; } //@line 1977 "datetimemodule.c"
      case 14: // $bb13
        var $83=HEAP[$minute]; //@line 1979 "datetimemodule.c"
        var $84=($83)!=0; //@line 1979 "datetimemodule.c"
        if ($84) { __label__ = 15; break; } else { __label__ = 18; break; } //@line 1979 "datetimemodule.c"
      case 15: // $bb14
        var $85=HEAP[_us_per_minute]; //@line 1980 "datetimemodule.c"
        var $86=HEAP[$minute]; //@line 1980 "datetimemodule.c"
        var $87=HEAP[$x]; //@line 1980 "datetimemodule.c"
        var $88=_accum(((__str118)&4294967295), $87, $86, $85, $leftover_us); //@line 1980 "datetimemodule.c"
        HEAP[$y]=$88; //@line 1980 "datetimemodule.c"
        var $89=HEAP[$x]; //@line 1981 "datetimemodule.c"
        var $90=(($89)&4294967295); //@line 1981 "datetimemodule.c"
        var $91=HEAP[$90]; //@line 1981 "datetimemodule.c"
        var $92=((($91) - 1)&4294967295); //@line 1981 "datetimemodule.c"
        var $93=HEAP[$x]; //@line 1981 "datetimemodule.c"
        var $94=(($93)&4294967295); //@line 1981 "datetimemodule.c"
        HEAP[$94]=$92; //@line 1981 "datetimemodule.c"
        var $95=HEAP[$x]; //@line 1981 "datetimemodule.c"
        var $96=(($95)&4294967295); //@line 1981 "datetimemodule.c"
        var $97=HEAP[$96]; //@line 1981 "datetimemodule.c"
        var $98=((($97))|0)==0; //@line 1981 "datetimemodule.c"
        if ($98) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 1981 "datetimemodule.c"
      case 16: // $bb15
        var $99=HEAP[$x]; //@line 1981 "datetimemodule.c"
        var $100=(($99+4)&4294967295); //@line 1981 "datetimemodule.c"
        var $101=HEAP[$100]; //@line 1981 "datetimemodule.c"
        var $102=(($101+24)&4294967295); //@line 1981 "datetimemodule.c"
        var $103=HEAP[$102]; //@line 1981 "datetimemodule.c"
        var $104=HEAP[$x]; //@line 1981 "datetimemodule.c"
        FUNCTION_TABLE[$103]($104); //@line 1981 "datetimemodule.c"
        __label__ = 17; break; //@line 1981 "datetimemodule.c"
      case 17: // $bb16
        var $105=HEAP[$y]; //@line 1981 "datetimemodule.c"
        HEAP[$x]=$105; //@line 1981 "datetimemodule.c"
        var $106=HEAP[$x]; //@line 1981 "datetimemodule.c"
        var $107=($106)==0; //@line 1981 "datetimemodule.c"
        if ($107) { __label__ = 42; break; } else { __label__ = 18; break; } //@line 1981 "datetimemodule.c"
      case 18: // $bb17
        var $108=HEAP[$hour]; //@line 1983 "datetimemodule.c"
        var $109=($108)!=0; //@line 1983 "datetimemodule.c"
        if ($109) { __label__ = 19; break; } else { __label__ = 22; break; } //@line 1983 "datetimemodule.c"
      case 19: // $bb18
        var $110=HEAP[_us_per_hour]; //@line 1984 "datetimemodule.c"
        var $111=HEAP[$hour]; //@line 1984 "datetimemodule.c"
        var $112=HEAP[$x]; //@line 1984 "datetimemodule.c"
        var $113=_accum(((__str119)&4294967295), $112, $111, $110, $leftover_us); //@line 1984 "datetimemodule.c"
        HEAP[$y]=$113; //@line 1984 "datetimemodule.c"
        var $114=HEAP[$x]; //@line 1985 "datetimemodule.c"
        var $115=(($114)&4294967295); //@line 1985 "datetimemodule.c"
        var $116=HEAP[$115]; //@line 1985 "datetimemodule.c"
        var $117=((($116) - 1)&4294967295); //@line 1985 "datetimemodule.c"
        var $118=HEAP[$x]; //@line 1985 "datetimemodule.c"
        var $119=(($118)&4294967295); //@line 1985 "datetimemodule.c"
        HEAP[$119]=$117; //@line 1985 "datetimemodule.c"
        var $120=HEAP[$x]; //@line 1985 "datetimemodule.c"
        var $121=(($120)&4294967295); //@line 1985 "datetimemodule.c"
        var $122=HEAP[$121]; //@line 1985 "datetimemodule.c"
        var $123=((($122))|0)==0; //@line 1985 "datetimemodule.c"
        if ($123) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1985 "datetimemodule.c"
      case 20: // $bb19
        var $124=HEAP[$x]; //@line 1985 "datetimemodule.c"
        var $125=(($124+4)&4294967295); //@line 1985 "datetimemodule.c"
        var $126=HEAP[$125]; //@line 1985 "datetimemodule.c"
        var $127=(($126+24)&4294967295); //@line 1985 "datetimemodule.c"
        var $128=HEAP[$127]; //@line 1985 "datetimemodule.c"
        var $129=HEAP[$x]; //@line 1985 "datetimemodule.c"
        FUNCTION_TABLE[$128]($129); //@line 1985 "datetimemodule.c"
        __label__ = 21; break; //@line 1985 "datetimemodule.c"
      case 21: // $bb20
        var $130=HEAP[$y]; //@line 1985 "datetimemodule.c"
        HEAP[$x]=$130; //@line 1985 "datetimemodule.c"
        var $131=HEAP[$x]; //@line 1985 "datetimemodule.c"
        var $132=($131)==0; //@line 1985 "datetimemodule.c"
        if ($132) { __label__ = 42; break; } else { __label__ = 22; break; } //@line 1985 "datetimemodule.c"
      case 22: // $bb21
        var $133=HEAP[$day]; //@line 1987 "datetimemodule.c"
        var $134=($133)!=0; //@line 1987 "datetimemodule.c"
        if ($134) { __label__ = 23; break; } else { __label__ = 26; break; } //@line 1987 "datetimemodule.c"
      case 23: // $bb22
        var $135=HEAP[_us_per_day]; //@line 1988 "datetimemodule.c"
        var $136=HEAP[$day]; //@line 1988 "datetimemodule.c"
        var $137=HEAP[$x]; //@line 1988 "datetimemodule.c"
        var $138=_accum(((__str114)&4294967295), $137, $136, $135, $leftover_us); //@line 1988 "datetimemodule.c"
        HEAP[$y]=$138; //@line 1988 "datetimemodule.c"
        var $139=HEAP[$x]; //@line 1989 "datetimemodule.c"
        var $140=(($139)&4294967295); //@line 1989 "datetimemodule.c"
        var $141=HEAP[$140]; //@line 1989 "datetimemodule.c"
        var $142=((($141) - 1)&4294967295); //@line 1989 "datetimemodule.c"
        var $143=HEAP[$x]; //@line 1989 "datetimemodule.c"
        var $144=(($143)&4294967295); //@line 1989 "datetimemodule.c"
        HEAP[$144]=$142; //@line 1989 "datetimemodule.c"
        var $145=HEAP[$x]; //@line 1989 "datetimemodule.c"
        var $146=(($145)&4294967295); //@line 1989 "datetimemodule.c"
        var $147=HEAP[$146]; //@line 1989 "datetimemodule.c"
        var $148=((($147))|0)==0; //@line 1989 "datetimemodule.c"
        if ($148) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 1989 "datetimemodule.c"
      case 24: // $bb23
        var $149=HEAP[$x]; //@line 1989 "datetimemodule.c"
        var $150=(($149+4)&4294967295); //@line 1989 "datetimemodule.c"
        var $151=HEAP[$150]; //@line 1989 "datetimemodule.c"
        var $152=(($151+24)&4294967295); //@line 1989 "datetimemodule.c"
        var $153=HEAP[$152]; //@line 1989 "datetimemodule.c"
        var $154=HEAP[$x]; //@line 1989 "datetimemodule.c"
        FUNCTION_TABLE[$153]($154); //@line 1989 "datetimemodule.c"
        __label__ = 25; break; //@line 1989 "datetimemodule.c"
      case 25: // $bb24
        var $155=HEAP[$y]; //@line 1989 "datetimemodule.c"
        HEAP[$x]=$155; //@line 1989 "datetimemodule.c"
        var $156=HEAP[$x]; //@line 1989 "datetimemodule.c"
        var $157=($156)==0; //@line 1989 "datetimemodule.c"
        if ($157) { __label__ = 42; break; } else { __label__ = 26; break; } //@line 1989 "datetimemodule.c"
      case 26: // $bb25
        var $158=HEAP[$week]; //@line 1991 "datetimemodule.c"
        var $159=($158)!=0; //@line 1991 "datetimemodule.c"
        if ($159) { __label__ = 27; break; } else { __label__ = 30; break; } //@line 1991 "datetimemodule.c"
      case 27: // $bb26
        var $160=HEAP[_us_per_week]; //@line 1992 "datetimemodule.c"
        var $161=HEAP[$week]; //@line 1992 "datetimemodule.c"
        var $162=HEAP[$x]; //@line 1992 "datetimemodule.c"
        var $163=_accum(((__str120)&4294967295), $162, $161, $160, $leftover_us); //@line 1992 "datetimemodule.c"
        HEAP[$y]=$163; //@line 1992 "datetimemodule.c"
        var $164=HEAP[$x]; //@line 1993 "datetimemodule.c"
        var $165=(($164)&4294967295); //@line 1993 "datetimemodule.c"
        var $166=HEAP[$165]; //@line 1993 "datetimemodule.c"
        var $167=((($166) - 1)&4294967295); //@line 1993 "datetimemodule.c"
        var $168=HEAP[$x]; //@line 1993 "datetimemodule.c"
        var $169=(($168)&4294967295); //@line 1993 "datetimemodule.c"
        HEAP[$169]=$167; //@line 1993 "datetimemodule.c"
        var $170=HEAP[$x]; //@line 1993 "datetimemodule.c"
        var $171=(($170)&4294967295); //@line 1993 "datetimemodule.c"
        var $172=HEAP[$171]; //@line 1993 "datetimemodule.c"
        var $173=((($172))|0)==0; //@line 1993 "datetimemodule.c"
        if ($173) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 1993 "datetimemodule.c"
      case 28: // $bb27
        var $174=HEAP[$x]; //@line 1993 "datetimemodule.c"
        var $175=(($174+4)&4294967295); //@line 1993 "datetimemodule.c"
        var $176=HEAP[$175]; //@line 1993 "datetimemodule.c"
        var $177=(($176+24)&4294967295); //@line 1993 "datetimemodule.c"
        var $178=HEAP[$177]; //@line 1993 "datetimemodule.c"
        var $179=HEAP[$x]; //@line 1993 "datetimemodule.c"
        FUNCTION_TABLE[$178]($179); //@line 1993 "datetimemodule.c"
        __label__ = 29; break; //@line 1993 "datetimemodule.c"
      case 29: // $bb28
        var $180=HEAP[$y]; //@line 1993 "datetimemodule.c"
        HEAP[$x]=$180; //@line 1993 "datetimemodule.c"
        var $181=HEAP[$x]; //@line 1993 "datetimemodule.c"
        var $182=($181)==0; //@line 1993 "datetimemodule.c"
        if ($182) { __label__ = 42; break; } else { __label__ = 30; break; } //@line 1993 "datetimemodule.c"
      case 30: // $bb29
        var $183=HEAP[$leftover_us]; //@line 1995 "datetimemodule.c"
        var $184=($183) != 0; //@line 1995 "datetimemodule.c"
        if ($184) { __label__ = 31; break; } else { __label__ = 40; break; } //@line 1995 "datetimemodule.c"
      case 31: // $bb30
        var $185=HEAP[$leftover_us]; //@line 1997 "datetimemodule.c"
        var $186=_round_to_long($185); //@line 1997 "datetimemodule.c"
        var $187=_PyLong_FromLong($186); //@line 1997 "datetimemodule.c"
        HEAP[$temp]=$187; //@line 1997 "datetimemodule.c"
        var $188=HEAP[$temp]; //@line 1998 "datetimemodule.c"
        var $189=($188)==0; //@line 1998 "datetimemodule.c"
        if ($189) { __label__ = 32; break; } else { __label__ = 35; break; } //@line 1998 "datetimemodule.c"
      case 32: // $bb31
        var $190=HEAP[$x]; //@line 1999 "datetimemodule.c"
        var $191=(($190)&4294967295); //@line 1999 "datetimemodule.c"
        var $192=HEAP[$191]; //@line 1999 "datetimemodule.c"
        var $193=((($192) - 1)&4294967295); //@line 1999 "datetimemodule.c"
        var $194=HEAP[$x]; //@line 1999 "datetimemodule.c"
        var $195=(($194)&4294967295); //@line 1999 "datetimemodule.c"
        HEAP[$195]=$193; //@line 1999 "datetimemodule.c"
        var $196=HEAP[$x]; //@line 1999 "datetimemodule.c"
        var $197=(($196)&4294967295); //@line 1999 "datetimemodule.c"
        var $198=HEAP[$197]; //@line 1999 "datetimemodule.c"
        var $199=((($198))|0)==0; //@line 1999 "datetimemodule.c"
        if ($199) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 1999 "datetimemodule.c"
      case 33: // $bb32
        var $200=HEAP[$x]; //@line 1999 "datetimemodule.c"
        var $201=(($200+4)&4294967295); //@line 1999 "datetimemodule.c"
        var $202=HEAP[$201]; //@line 1999 "datetimemodule.c"
        var $203=(($202+24)&4294967295); //@line 1999 "datetimemodule.c"
        var $204=HEAP[$203]; //@line 1999 "datetimemodule.c"
        var $205=HEAP[$x]; //@line 1999 "datetimemodule.c"
        FUNCTION_TABLE[$204]($205); //@line 1999 "datetimemodule.c"
        __label__ = 34; break; //@line 1999 "datetimemodule.c"
      case 34: // $bb33
        __label__ = 42; break; //@line 1999 "datetimemodule.c"
      case 35: // $bb34
        var $206=HEAP[$x]; //@line 2002 "datetimemodule.c"
        var $207=HEAP[$temp]; //@line 2002 "datetimemodule.c"
        var $208=_PyNumber_Add($206, $207); //@line 2002 "datetimemodule.c"
        HEAP[$y]=$208; //@line 2002 "datetimemodule.c"
        var $209=HEAP[$temp]; //@line 2003 "datetimemodule.c"
        var $210=(($209)&4294967295); //@line 2003 "datetimemodule.c"
        var $211=HEAP[$210]; //@line 2003 "datetimemodule.c"
        var $212=((($211) - 1)&4294967295); //@line 2003 "datetimemodule.c"
        var $213=HEAP[$temp]; //@line 2003 "datetimemodule.c"
        var $214=(($213)&4294967295); //@line 2003 "datetimemodule.c"
        HEAP[$214]=$212; //@line 2003 "datetimemodule.c"
        var $215=HEAP[$temp]; //@line 2003 "datetimemodule.c"
        var $216=(($215)&4294967295); //@line 2003 "datetimemodule.c"
        var $217=HEAP[$216]; //@line 2003 "datetimemodule.c"
        var $218=((($217))|0)==0; //@line 2003 "datetimemodule.c"
        if ($218) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 2003 "datetimemodule.c"
      case 36: // $bb35
        var $219=HEAP[$temp]; //@line 2003 "datetimemodule.c"
        var $220=(($219+4)&4294967295); //@line 2003 "datetimemodule.c"
        var $221=HEAP[$220]; //@line 2003 "datetimemodule.c"
        var $222=(($221+24)&4294967295); //@line 2003 "datetimemodule.c"
        var $223=HEAP[$222]; //@line 2003 "datetimemodule.c"
        var $224=HEAP[$temp]; //@line 2003 "datetimemodule.c"
        FUNCTION_TABLE[$223]($224); //@line 2003 "datetimemodule.c"
        __label__ = 37; break; //@line 2003 "datetimemodule.c"
      case 37: // $bb36
        var $225=HEAP[$x]; //@line 2004 "datetimemodule.c"
        var $226=(($225)&4294967295); //@line 2004 "datetimemodule.c"
        var $227=HEAP[$226]; //@line 2004 "datetimemodule.c"
        var $228=((($227) - 1)&4294967295); //@line 2004 "datetimemodule.c"
        var $229=HEAP[$x]; //@line 2004 "datetimemodule.c"
        var $230=(($229)&4294967295); //@line 2004 "datetimemodule.c"
        HEAP[$230]=$228; //@line 2004 "datetimemodule.c"
        var $231=HEAP[$x]; //@line 2004 "datetimemodule.c"
        var $232=(($231)&4294967295); //@line 2004 "datetimemodule.c"
        var $233=HEAP[$232]; //@line 2004 "datetimemodule.c"
        var $234=((($233))|0)==0; //@line 2004 "datetimemodule.c"
        if ($234) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 2004 "datetimemodule.c"
      case 38: // $bb37
        var $235=HEAP[$x]; //@line 2004 "datetimemodule.c"
        var $236=(($235+4)&4294967295); //@line 2004 "datetimemodule.c"
        var $237=HEAP[$236]; //@line 2004 "datetimemodule.c"
        var $238=(($237+24)&4294967295); //@line 2004 "datetimemodule.c"
        var $239=HEAP[$238]; //@line 2004 "datetimemodule.c"
        var $240=HEAP[$x]; //@line 2004 "datetimemodule.c"
        FUNCTION_TABLE[$239]($240); //@line 2004 "datetimemodule.c"
        __label__ = 39; break; //@line 2004 "datetimemodule.c"
      case 39: // $bb38
        var $241=HEAP[$y]; //@line 2004 "datetimemodule.c"
        HEAP[$x]=$241; //@line 2004 "datetimemodule.c"
        var $242=HEAP[$x]; //@line 2004 "datetimemodule.c"
        var $243=($242)==0; //@line 2004 "datetimemodule.c"
        if ($243) { __label__ = 42; break; } else { __label__ = 40; break; } //@line 2004 "datetimemodule.c"
      case 40: // $bb39
        var $244=HEAP[$x]; //@line 2007 "datetimemodule.c"
        var $245=HEAP[$type_addr]; //@line 2007 "datetimemodule.c"
        var $246=_microseconds_to_delta_ex($244, $245); //@line 2007 "datetimemodule.c"
        HEAP[$self]=$246; //@line 2007 "datetimemodule.c"
        var $247=HEAP[$x]; //@line 2008 "datetimemodule.c"
        var $248=(($247)&4294967295); //@line 2008 "datetimemodule.c"
        var $249=HEAP[$248]; //@line 2008 "datetimemodule.c"
        var $250=((($249) - 1)&4294967295); //@line 2008 "datetimemodule.c"
        var $251=HEAP[$x]; //@line 2008 "datetimemodule.c"
        var $252=(($251)&4294967295); //@line 2008 "datetimemodule.c"
        HEAP[$252]=$250; //@line 2008 "datetimemodule.c"
        var $253=HEAP[$x]; //@line 2008 "datetimemodule.c"
        var $254=(($253)&4294967295); //@line 2008 "datetimemodule.c"
        var $255=HEAP[$254]; //@line 2008 "datetimemodule.c"
        var $256=((($255))|0)==0; //@line 2008 "datetimemodule.c"
        if ($256) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 2008 "datetimemodule.c"
      case 41: // $bb40
        var $257=HEAP[$x]; //@line 2008 "datetimemodule.c"
        var $258=(($257+4)&4294967295); //@line 2008 "datetimemodule.c"
        var $259=HEAP[$258]; //@line 2008 "datetimemodule.c"
        var $260=(($259+24)&4294967295); //@line 2008 "datetimemodule.c"
        var $261=HEAP[$260]; //@line 2008 "datetimemodule.c"
        var $262=HEAP[$x]; //@line 2008 "datetimemodule.c"
        FUNCTION_TABLE[$261]($262); //@line 2008 "datetimemodule.c"
        __label__ = 42; break; //@line 2009 "datetimemodule.c"
      case 42: // $Done
        var $263=HEAP[$self]; //@line 2010 "datetimemodule.c"
        HEAP[$0]=$263; //@line 2010 "datetimemodule.c"
        var $264=HEAP[$0]; //@line 2010 "datetimemodule.c"
        HEAP[$retval]=$264; //@line 2010 "datetimemodule.c"
        __label__ = 43; break; //@line 2010 "datetimemodule.c"
      case 43: // $return
        var $retval41=HEAP[$retval]; //@line 2010 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval41; //@line 2010 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _delta_nonzero($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $iftmp_135=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 2018 "datetimemodule.c"
        var $2=(($1+12)&4294967295); //@line 2018 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 2018 "datetimemodule.c"
        var $4=((($3))|0)!=0; //@line 2018 "datetimemodule.c"
        if ($4) { __label__ = 3; break; } else { __label__ = 1; break; } //@line 2018 "datetimemodule.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 2018 "datetimemodule.c"
        var $6=(($5+16)&4294967295); //@line 2018 "datetimemodule.c"
        var $7=HEAP[$6]; //@line 2018 "datetimemodule.c"
        var $8=((($7))|0)!=0; //@line 2018 "datetimemodule.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 2018 "datetimemodule.c"
      case 2: // $bb1
        var $9=HEAP[$self_addr]; //@line 2018 "datetimemodule.c"
        var $10=(($9+20)&4294967295); //@line 2018 "datetimemodule.c"
        var $11=HEAP[$10]; //@line 2018 "datetimemodule.c"
        var $12=((($11))|0)!=0; //@line 2018 "datetimemodule.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 2018 "datetimemodule.c"
      case 3: // $bb2
        HEAP[$iftmp_135]=1; //@line 2018 "datetimemodule.c"
        __label__ = 5; break; //@line 2018 "datetimemodule.c"
      case 4: // $bb3
        HEAP[$iftmp_135]=0; //@line 2018 "datetimemodule.c"
        __label__ = 5; break; //@line 2018 "datetimemodule.c"
      case 5: // $bb4
        var $13=HEAP[$iftmp_135]; //@line 2018 "datetimemodule.c"
        HEAP[$0]=$13; //@line 2018 "datetimemodule.c"
        var $14=HEAP[$0]; //@line 2018 "datetimemodule.c"
        HEAP[$retval]=$14; //@line 2018 "datetimemodule.c"
        __label__ = 6; break; //@line 2018 "datetimemodule.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 2018 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 2018 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _delta_repr($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 2026 "datetimemodule.c"
        var $2=(($1+20)&4294967295); //@line 2026 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 2026 "datetimemodule.c"
        var $4=((($3))|0)!=0; //@line 2026 "datetimemodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2026 "datetimemodule.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 2027 "datetimemodule.c"
        var $6=(($5+20)&4294967295); //@line 2027 "datetimemodule.c"
        var $7=HEAP[$6]; //@line 2027 "datetimemodule.c"
        var $8=HEAP[$self_addr]; //@line 2027 "datetimemodule.c"
        var $9=(($8+16)&4294967295); //@line 2027 "datetimemodule.c"
        var $10=HEAP[$9]; //@line 2027 "datetimemodule.c"
        var $11=HEAP[$self_addr]; //@line 2027 "datetimemodule.c"
        var $12=(($11+12)&4294967295); //@line 2027 "datetimemodule.c"
        var $13=HEAP[$12]; //@line 2027 "datetimemodule.c"
        var $14=HEAP[$self_addr]; //@line 2027 "datetimemodule.c"
        var $15=$14; //@line 2027 "datetimemodule.c"
        var $16=(($15+4)&4294967295); //@line 2027 "datetimemodule.c"
        var $17=HEAP[$16]; //@line 2027 "datetimemodule.c"
        var $18=(($17+12)&4294967295); //@line 2027 "datetimemodule.c"
        var $19=HEAP[$18]; //@line 2027 "datetimemodule.c"
        var $20=_PyString_FromFormat(((__str121)&4294967295), $19, $13, $10, $7); //@line 2027 "datetimemodule.c"
        HEAP[$0]=$20; //@line 2027 "datetimemodule.c"
        __label__ = 5; break; //@line 2027 "datetimemodule.c"
      case 2: // $bb1
        var $21=HEAP[$self_addr]; //@line 2032 "datetimemodule.c"
        var $22=(($21+16)&4294967295); //@line 2032 "datetimemodule.c"
        var $23=HEAP[$22]; //@line 2032 "datetimemodule.c"
        var $24=((($23))|0)!=0; //@line 2032 "datetimemodule.c"
        if ($24) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 2032 "datetimemodule.c"
      case 3: // $bb2
        var $25=HEAP[$self_addr]; //@line 2033 "datetimemodule.c"
        var $26=(($25+16)&4294967295); //@line 2033 "datetimemodule.c"
        var $27=HEAP[$26]; //@line 2033 "datetimemodule.c"
        var $28=HEAP[$self_addr]; //@line 2033 "datetimemodule.c"
        var $29=(($28+12)&4294967295); //@line 2033 "datetimemodule.c"
        var $30=HEAP[$29]; //@line 2033 "datetimemodule.c"
        var $31=HEAP[$self_addr]; //@line 2033 "datetimemodule.c"
        var $32=$31; //@line 2033 "datetimemodule.c"
        var $33=(($32+4)&4294967295); //@line 2033 "datetimemodule.c"
        var $34=HEAP[$33]; //@line 2033 "datetimemodule.c"
        var $35=(($34+12)&4294967295); //@line 2033 "datetimemodule.c"
        var $36=HEAP[$35]; //@line 2033 "datetimemodule.c"
        var $37=_PyString_FromFormat(((__str122)&4294967295), $36, $30, $27); //@line 2033 "datetimemodule.c"
        HEAP[$0]=$37; //@line 2033 "datetimemodule.c"
        __label__ = 5; break; //@line 2033 "datetimemodule.c"
      case 4: // $bb3
        var $38=HEAP[$self_addr]; //@line 2038 "datetimemodule.c"
        var $39=(($38+12)&4294967295); //@line 2038 "datetimemodule.c"
        var $40=HEAP[$39]; //@line 2038 "datetimemodule.c"
        var $41=HEAP[$self_addr]; //@line 2038 "datetimemodule.c"
        var $42=$41; //@line 2038 "datetimemodule.c"
        var $43=(($42+4)&4294967295); //@line 2038 "datetimemodule.c"
        var $44=HEAP[$43]; //@line 2038 "datetimemodule.c"
        var $45=(($44+12)&4294967295); //@line 2038 "datetimemodule.c"
        var $46=HEAP[$45]; //@line 2038 "datetimemodule.c"
        var $47=_PyString_FromFormat(((__str123)&4294967295), $46, $40); //@line 2038 "datetimemodule.c"
        HEAP[$0]=$47; //@line 2038 "datetimemodule.c"
        __label__ = 5; break; //@line 2038 "datetimemodule.c"
      case 5: // $bb4
        var $48=HEAP[$0]; //@line 2027 "datetimemodule.c"
        HEAP[$retval]=$48; //@line 2027 "datetimemodule.c"
        __label__ = 6; break; //@line 2027 "datetimemodule.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 2027 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 2027 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _delta_str($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 148; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 148);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $iftmp_141=__stackBase__+12;
        var $days=__stackBase__+16;
        var $seconds=__stackBase__+20;
        var $us=__stackBase__+24;
        var $hours=__stackBase__+28;
        var $minutes=__stackBase__+32;
        var $buf=__stackBase__+36;
        var $pbuf=__stackBase__+136;
        var $buflen=__stackBase__+140;
        var $n=__stackBase__+144;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 2046 "datetimemodule.c"
        var $2=(($1+12)&4294967295); //@line 2046 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 2046 "datetimemodule.c"
        HEAP[$days]=$3; //@line 2046 "datetimemodule.c"
        var $4=HEAP[$self_addr]; //@line 2047 "datetimemodule.c"
        var $5=(($4+16)&4294967295); //@line 2047 "datetimemodule.c"
        var $6=HEAP[$5]; //@line 2047 "datetimemodule.c"
        HEAP[$seconds]=$6; //@line 2047 "datetimemodule.c"
        var $7=HEAP[$self_addr]; //@line 2048 "datetimemodule.c"
        var $8=(($7+20)&4294967295); //@line 2048 "datetimemodule.c"
        var $9=HEAP[$8]; //@line 2048 "datetimemodule.c"
        HEAP[$us]=$9; //@line 2048 "datetimemodule.c"
        var $buf1=$buf; //@line 2052 "datetimemodule.c"
        HEAP[$pbuf]=$buf1; //@line 2052 "datetimemodule.c"
        HEAP[$buflen]=100; //@line 2053 "datetimemodule.c"
        var $10=HEAP[$seconds]; //@line 2056 "datetimemodule.c"
        var $11=_divmod($10, 60, $seconds); //@line 2056 "datetimemodule.c"
        HEAP[$minutes]=$11; //@line 2056 "datetimemodule.c"
        var $12=HEAP[$minutes]; //@line 2057 "datetimemodule.c"
        var $13=_divmod($12, 60, $minutes); //@line 2057 "datetimemodule.c"
        HEAP[$hours]=$13; //@line 2057 "datetimemodule.c"
        var $14=HEAP[$days]; //@line 2059 "datetimemodule.c"
        var $15=((($14))|0)!=0; //@line 2059 "datetimemodule.c"
        if ($15) { __label__ = 1; break; } else { __label__ = 8; break; } //@line 2059 "datetimemodule.c"
      case 1: // $bb
        var $16=HEAP[$days]; //@line 2060 "datetimemodule.c"
        var $17=((($16))|0)==1; //@line 2060 "datetimemodule.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 2060 "datetimemodule.c"
      case 2: // $bb2
        var $18=HEAP[$days]; //@line 2060 "datetimemodule.c"
        var $19=((($18))|0)==-1; //@line 2060 "datetimemodule.c"
        if ($19) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 2060 "datetimemodule.c"
      case 3: // $bb3
        HEAP[$iftmp_141]=((__str79)&4294967295); //@line 2060 "datetimemodule.c"
        __label__ = 5; break; //@line 2060 "datetimemodule.c"
      case 4: // $bb4
        HEAP[$iftmp_141]=((__str124)&4294967295); //@line 2060 "datetimemodule.c"
        __label__ = 5; break; //@line 2060 "datetimemodule.c"
      case 5: // $bb5
        var $20=HEAP[$pbuf]; //@line 2060 "datetimemodule.c"
        var $21=HEAP[$buflen]; //@line 2060 "datetimemodule.c"
        var $22=HEAP[$days]; //@line 2060 "datetimemodule.c"
        var $23=HEAP[$iftmp_141]; //@line 2060 "datetimemodule.c"
        var $24=_PyOS_snprintf($20, $21, ((__str125)&4294967295), $22, $23); //@line 2060 "datetimemodule.c"
        HEAP[$n]=$24; //@line 2060 "datetimemodule.c"
        var $25=HEAP[$n]; //@line 2062 "datetimemodule.c"
        var $26=((($25))|0) < 0; //@line 2062 "datetimemodule.c"
        if ($26) { __label__ = 15; break; } else { __label__ = 6; break; } //@line 2062 "datetimemodule.c"
      case 6: // $bb6
        var $27=HEAP[$n]; //@line 2062 "datetimemodule.c"
        var $28=HEAP[$buflen]; //@line 2062 "datetimemodule.c"
        var $29=((($27))>>>0) >= ((($28))>>>0); //@line 2062 "datetimemodule.c"
        if ($29) { __label__ = 15; break; } else { __label__ = 7; break; } //@line 2062 "datetimemodule.c"
      case 7: // $bb7
        var $30=HEAP[$pbuf]; //@line 2064 "datetimemodule.c"
        var $31=HEAP[$n]; //@line 2064 "datetimemodule.c"
        var $32=(($30+$31)&4294967295); //@line 2064 "datetimemodule.c"
        HEAP[$pbuf]=$32; //@line 2064 "datetimemodule.c"
        var $33=HEAP[$n]; //@line 2065 "datetimemodule.c"
        var $34=HEAP[$buflen]; //@line 2065 "datetimemodule.c"
        var $35=((($34) - ($33))&4294967295); //@line 2065 "datetimemodule.c"
        HEAP[$buflen]=$35; //@line 2065 "datetimemodule.c"
        __label__ = 8; break; //@line 2065 "datetimemodule.c"
      case 8: // $bb8
        var $36=HEAP[$seconds]; //@line 2068 "datetimemodule.c"
        var $37=HEAP[$minutes]; //@line 2068 "datetimemodule.c"
        var $38=HEAP[$pbuf]; //@line 2068 "datetimemodule.c"
        var $39=HEAP[$buflen]; //@line 2068 "datetimemodule.c"
        var $40=HEAP[$hours]; //@line 2068 "datetimemodule.c"
        var $41=_PyOS_snprintf($38, $39, ((__str126)&4294967295), $40, $37, $36); //@line 2068 "datetimemodule.c"
        HEAP[$n]=$41; //@line 2068 "datetimemodule.c"
        var $42=HEAP[$n]; //@line 2070 "datetimemodule.c"
        var $43=((($42))|0) < 0; //@line 2070 "datetimemodule.c"
        if ($43) { __label__ = 15; break; } else { __label__ = 9; break; } //@line 2070 "datetimemodule.c"
      case 9: // $bb9
        var $44=HEAP[$n]; //@line 2070 "datetimemodule.c"
        var $45=HEAP[$buflen]; //@line 2070 "datetimemodule.c"
        var $46=((($44))>>>0) >= ((($45))>>>0); //@line 2070 "datetimemodule.c"
        if ($46) { __label__ = 15; break; } else { __label__ = 10; break; } //@line 2070 "datetimemodule.c"
      case 10: // $bb10
        var $47=HEAP[$pbuf]; //@line 2072 "datetimemodule.c"
        var $48=HEAP[$n]; //@line 2072 "datetimemodule.c"
        var $49=(($47+$48)&4294967295); //@line 2072 "datetimemodule.c"
        HEAP[$pbuf]=$49; //@line 2072 "datetimemodule.c"
        var $50=HEAP[$n]; //@line 2073 "datetimemodule.c"
        var $51=HEAP[$buflen]; //@line 2073 "datetimemodule.c"
        var $52=((($51) - ($50))&4294967295); //@line 2073 "datetimemodule.c"
        HEAP[$buflen]=$52; //@line 2073 "datetimemodule.c"
        var $53=HEAP[$us]; //@line 2075 "datetimemodule.c"
        var $54=((($53))|0)!=0; //@line 2075 "datetimemodule.c"
        if ($54) { __label__ = 11; break; } else { __label__ = 14; break; } //@line 2075 "datetimemodule.c"
      case 11: // $bb11
        var $55=HEAP[$pbuf]; //@line 2076 "datetimemodule.c"
        var $56=HEAP[$buflen]; //@line 2076 "datetimemodule.c"
        var $57=HEAP[$us]; //@line 2076 "datetimemodule.c"
        var $58=_PyOS_snprintf($55, $56, ((__str98)&4294967295), $57); //@line 2076 "datetimemodule.c"
        HEAP[$n]=$58; //@line 2076 "datetimemodule.c"
        var $59=HEAP[$n]; //@line 2077 "datetimemodule.c"
        var $60=((($59))|0) < 0; //@line 2077 "datetimemodule.c"
        if ($60) { __label__ = 15; break; } else { __label__ = 12; break; } //@line 2077 "datetimemodule.c"
      case 12: // $bb12
        var $61=HEAP[$n]; //@line 2077 "datetimemodule.c"
        var $62=HEAP[$buflen]; //@line 2077 "datetimemodule.c"
        var $63=((($61))>>>0) >= ((($62))>>>0); //@line 2077 "datetimemodule.c"
        if ($63) { __label__ = 15; break; } else { __label__ = 13; break; } //@line 2077 "datetimemodule.c"
      case 13: // $bb13
        var $64=HEAP[$pbuf]; //@line 2079 "datetimemodule.c"
        var $65=HEAP[$n]; //@line 2079 "datetimemodule.c"
        var $66=(($64+$65)&4294967295); //@line 2079 "datetimemodule.c"
        HEAP[$pbuf]=$66; //@line 2079 "datetimemodule.c"
        __label__ = 14; break; //@line 2079 "datetimemodule.c"
      case 14: // $bb14
        var $67=HEAP[$pbuf]; //@line 2082 "datetimemodule.c"
        var $68=($67); //@line 2082 "datetimemodule.c"
        var $buf15=$buf; //@line 2082 "datetimemodule.c"
        var $buf1516=($buf15); //@line 2082 "datetimemodule.c"
        var $69=((($68) - ($buf1516))&4294967295); //@line 2082 "datetimemodule.c"
        var $buf18=$buf; //@line 2082 "datetimemodule.c"
        var $70=_PyString_FromStringAndSize($buf18, $69); //@line 2082 "datetimemodule.c"
        HEAP[$0]=$70; //@line 2082 "datetimemodule.c"
        __label__ = 16; break; //@line 2082 "datetimemodule.c"
      case 15: // $Fail
        var $71=HEAP[_PyExc_SystemError]; //@line 2085 "datetimemodule.c"
        _PyErr_SetString($71, ((__str127)&4294967295)); //@line 2085 "datetimemodule.c"
        HEAP[$0]=0; //@line 2086 "datetimemodule.c"
        __label__ = 16; break; //@line 2086 "datetimemodule.c"
      case 16: // $bb19
        var $72=HEAP[$0]; //@line 2082 "datetimemodule.c"
        HEAP[$retval]=$72; //@line 2082 "datetimemodule.c"
        __label__ = 17; break; //@line 2082 "datetimemodule.c"
      case 17: // $return
        var $retval20=HEAP[$retval]; //@line 2082 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval20; //@line 2082 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _delta_getstate($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 2095 "datetimemodule.c"
        var $2=(($1+20)&4294967295); //@line 2095 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 2095 "datetimemodule.c"
        var $4=HEAP[$self_addr]; //@line 2095 "datetimemodule.c"
        var $5=(($4+16)&4294967295); //@line 2095 "datetimemodule.c"
        var $6=HEAP[$5]; //@line 2095 "datetimemodule.c"
        var $7=HEAP[$self_addr]; //@line 2095 "datetimemodule.c"
        var $8=(($7+12)&4294967295); //@line 2095 "datetimemodule.c"
        var $9=HEAP[$8]; //@line 2095 "datetimemodule.c"
        var $10=__Py_BuildValue_SizeT(((__str128)&4294967295), $9, $6, $3); //@line 2095 "datetimemodule.c"
        HEAP[$0]=$10; //@line 2095 "datetimemodule.c"
        var $11=HEAP[$0]; //@line 2095 "datetimemodule.c"
        HEAP[$retval]=$11; //@line 2095 "datetimemodule.c"
        __label__ = 1; break; //@line 2095 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 2095 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 2095 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _delta_total_seconds($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $total_seconds=__stackBase__+12;
        var $total_microseconds=__stackBase__+16;
        var $one_million=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 2107 "datetimemodule.c"
        var $2=$1; //@line 2107 "datetimemodule.c"
        var $3=_delta_to_microseconds($2); //@line 2107 "datetimemodule.c"
        HEAP[$total_microseconds]=$3; //@line 2107 "datetimemodule.c"
        var $4=HEAP[$total_microseconds]; //@line 2108 "datetimemodule.c"
        var $5=($4)==0; //@line 2108 "datetimemodule.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2108 "datetimemodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 2109 "datetimemodule.c"
        __label__ = 11; break; //@line 2109 "datetimemodule.c"
      case 2: // $bb1
        var $6=_PyLong_FromLong(1000000); //@line 2111 "datetimemodule.c"
        HEAP[$one_million]=$6; //@line 2111 "datetimemodule.c"
        var $7=HEAP[$one_million]; //@line 2112 "datetimemodule.c"
        var $8=($7)==0; //@line 2112 "datetimemodule.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 2112 "datetimemodule.c"
      case 3: // $bb2
        var $9=HEAP[$total_microseconds]; //@line 2113 "datetimemodule.c"
        var $10=(($9)&4294967295); //@line 2113 "datetimemodule.c"
        var $11=HEAP[$10]; //@line 2113 "datetimemodule.c"
        var $12=((($11) - 1)&4294967295); //@line 2113 "datetimemodule.c"
        var $13=HEAP[$total_microseconds]; //@line 2113 "datetimemodule.c"
        var $14=(($13)&4294967295); //@line 2113 "datetimemodule.c"
        HEAP[$14]=$12; //@line 2113 "datetimemodule.c"
        var $15=HEAP[$total_microseconds]; //@line 2113 "datetimemodule.c"
        var $16=(($15)&4294967295); //@line 2113 "datetimemodule.c"
        var $17=HEAP[$16]; //@line 2113 "datetimemodule.c"
        var $18=((($17))|0)==0; //@line 2113 "datetimemodule.c"
        if ($18) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 2113 "datetimemodule.c"
      case 4: // $bb3
        var $19=HEAP[$total_microseconds]; //@line 2113 "datetimemodule.c"
        var $20=(($19+4)&4294967295); //@line 2113 "datetimemodule.c"
        var $21=HEAP[$20]; //@line 2113 "datetimemodule.c"
        var $22=(($21+24)&4294967295); //@line 2113 "datetimemodule.c"
        var $23=HEAP[$22]; //@line 2113 "datetimemodule.c"
        var $24=HEAP[$total_microseconds]; //@line 2113 "datetimemodule.c"
        FUNCTION_TABLE[$23]($24); //@line 2113 "datetimemodule.c"
        __label__ = 5; break; //@line 2113 "datetimemodule.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 2114 "datetimemodule.c"
        __label__ = 11; break; //@line 2114 "datetimemodule.c"
      case 6: // $bb5
        var $25=HEAP[$total_microseconds]; //@line 2117 "datetimemodule.c"
        var $26=HEAP[$one_million]; //@line 2117 "datetimemodule.c"
        var $27=_PyNumber_TrueDivide($25, $26); //@line 2117 "datetimemodule.c"
        HEAP[$total_seconds]=$27; //@line 2117 "datetimemodule.c"
        var $28=HEAP[$total_microseconds]; //@line 2119 "datetimemodule.c"
        var $29=(($28)&4294967295); //@line 2119 "datetimemodule.c"
        var $30=HEAP[$29]; //@line 2119 "datetimemodule.c"
        var $31=((($30) - 1)&4294967295); //@line 2119 "datetimemodule.c"
        var $32=HEAP[$total_microseconds]; //@line 2119 "datetimemodule.c"
        var $33=(($32)&4294967295); //@line 2119 "datetimemodule.c"
        HEAP[$33]=$31; //@line 2119 "datetimemodule.c"
        var $34=HEAP[$total_microseconds]; //@line 2119 "datetimemodule.c"
        var $35=(($34)&4294967295); //@line 2119 "datetimemodule.c"
        var $36=HEAP[$35]; //@line 2119 "datetimemodule.c"
        var $37=((($36))|0)==0; //@line 2119 "datetimemodule.c"
        if ($37) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 2119 "datetimemodule.c"
      case 7: // $bb6
        var $38=HEAP[$total_microseconds]; //@line 2119 "datetimemodule.c"
        var $39=(($38+4)&4294967295); //@line 2119 "datetimemodule.c"
        var $40=HEAP[$39]; //@line 2119 "datetimemodule.c"
        var $41=(($40+24)&4294967295); //@line 2119 "datetimemodule.c"
        var $42=HEAP[$41]; //@line 2119 "datetimemodule.c"
        var $43=HEAP[$total_microseconds]; //@line 2119 "datetimemodule.c"
        FUNCTION_TABLE[$42]($43); //@line 2119 "datetimemodule.c"
        __label__ = 8; break; //@line 2119 "datetimemodule.c"
      case 8: // $bb7
        var $44=HEAP[$one_million]; //@line 2120 "datetimemodule.c"
        var $45=(($44)&4294967295); //@line 2120 "datetimemodule.c"
        var $46=HEAP[$45]; //@line 2120 "datetimemodule.c"
        var $47=((($46) - 1)&4294967295); //@line 2120 "datetimemodule.c"
        var $48=HEAP[$one_million]; //@line 2120 "datetimemodule.c"
        var $49=(($48)&4294967295); //@line 2120 "datetimemodule.c"
        HEAP[$49]=$47; //@line 2120 "datetimemodule.c"
        var $50=HEAP[$one_million]; //@line 2120 "datetimemodule.c"
        var $51=(($50)&4294967295); //@line 2120 "datetimemodule.c"
        var $52=HEAP[$51]; //@line 2120 "datetimemodule.c"
        var $53=((($52))|0)==0; //@line 2120 "datetimemodule.c"
        if ($53) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 2120 "datetimemodule.c"
      case 9: // $bb8
        var $54=HEAP[$one_million]; //@line 2120 "datetimemodule.c"
        var $55=(($54+4)&4294967295); //@line 2120 "datetimemodule.c"
        var $56=HEAP[$55]; //@line 2120 "datetimemodule.c"
        var $57=(($56+24)&4294967295); //@line 2120 "datetimemodule.c"
        var $58=HEAP[$57]; //@line 2120 "datetimemodule.c"
        var $59=HEAP[$one_million]; //@line 2120 "datetimemodule.c"
        FUNCTION_TABLE[$58]($59); //@line 2120 "datetimemodule.c"
        __label__ = 10; break; //@line 2120 "datetimemodule.c"
      case 10: // $bb9
        var $60=HEAP[$total_seconds]; //@line 2121 "datetimemodule.c"
        HEAP[$0]=$60; //@line 2121 "datetimemodule.c"
        __label__ = 11; break; //@line 2121 "datetimemodule.c"
      case 11: // $bb10
        var $61=HEAP[$0]; //@line 2109 "datetimemodule.c"
        HEAP[$retval]=$61; //@line 2109 "datetimemodule.c"
        __label__ = 12; break; //@line 2109 "datetimemodule.c"
      case 12: // $return
        var $retval11=HEAP[$retval]; //@line 2109 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 2109 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _delta_reduce($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 2127 "datetimemodule.c"
        var $2=_delta_getstate($1); //@line 2127 "datetimemodule.c"
        var $3=HEAP[$self_addr]; //@line 2127 "datetimemodule.c"
        var $4=$3; //@line 2127 "datetimemodule.c"
        var $5=(($4+4)&4294967295); //@line 2127 "datetimemodule.c"
        var $6=HEAP[$5]; //@line 2127 "datetimemodule.c"
        var $7=__Py_BuildValue_SizeT(((__str129)&4294967295), $6, $2); //@line 2127 "datetimemodule.c"
        HEAP[$0]=$7; //@line 2127 "datetimemodule.c"
        var $8=HEAP[$0]; //@line 2127 "datetimemodule.c"
        HEAP[$retval]=$8; //@line 2127 "datetimemodule.c"
        __label__ = 1; break; //@line 2127 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 2127 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 2127 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _date_year($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $unused_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$unused_addr]=$unused;
        var $1=HEAP[$self_addr]; //@line 2251 "datetimemodule.c"
        var $2=(($1+13)&4294967295); //@line 2251 "datetimemodule.c"
        var $3=(($2)&4294967295); //@line 2251 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 2251 "datetimemodule.c"
        var $5=unSign(($4), 8, 0); //@line 2251 "datetimemodule.c"
        var $6=($5) << 8; //@line 2251 "datetimemodule.c"
        var $7=HEAP[$self_addr]; //@line 2251 "datetimemodule.c"
        var $8=(($7+13)&4294967295); //@line 2251 "datetimemodule.c"
        var $9=(($8+1)&4294967295); //@line 2251 "datetimemodule.c"
        var $10=HEAP[$9]; //@line 2251 "datetimemodule.c"
        var $11=unSign(($10), 8, 0); //@line 2251 "datetimemodule.c"
        var $12=($6) | ($11); //@line 2251 "datetimemodule.c"
        var $13=_PyInt_FromLong($12); //@line 2251 "datetimemodule.c"
        HEAP[$0]=$13; //@line 2251 "datetimemodule.c"
        var $14=HEAP[$0]; //@line 2251 "datetimemodule.c"
        HEAP[$retval]=$14; //@line 2251 "datetimemodule.c"
        __label__ = 1; break; //@line 2251 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 2251 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 2251 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _date_month($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $unused_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$unused_addr]=$unused;
        var $1=HEAP[$self_addr]; //@line 2257 "datetimemodule.c"
        var $2=(($1+13)&4294967295); //@line 2257 "datetimemodule.c"
        var $3=(($2+2)&4294967295); //@line 2257 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 2257 "datetimemodule.c"
        var $5=unSign(($4), 8, 0); //@line 2257 "datetimemodule.c"
        var $6=_PyInt_FromLong($5); //@line 2257 "datetimemodule.c"
        HEAP[$0]=$6; //@line 2257 "datetimemodule.c"
        var $7=HEAP[$0]; //@line 2257 "datetimemodule.c"
        HEAP[$retval]=$7; //@line 2257 "datetimemodule.c"
        __label__ = 1; break; //@line 2257 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 2257 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 2257 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _date_day($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $unused_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$unused_addr]=$unused;
        var $1=HEAP[$self_addr]; //@line 2263 "datetimemodule.c"
        var $2=(($1+13)&4294967295); //@line 2263 "datetimemodule.c"
        var $3=(($2+3)&4294967295); //@line 2263 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 2263 "datetimemodule.c"
        var $5=unSign(($4), 8, 0); //@line 2263 "datetimemodule.c"
        var $6=_PyInt_FromLong($5); //@line 2263 "datetimemodule.c"
        HEAP[$0]=$6; //@line 2263 "datetimemodule.c"
        var $7=HEAP[$0]; //@line 2263 "datetimemodule.c"
        HEAP[$retval]=$7; //@line 2263 "datetimemodule.c"
        __label__ = 1; break; //@line 2263 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 2263 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 2263 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _date_new($type, $args, $kw) {
    var __stackBase__  = STACKTOP; STACKTOP += 48; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 48);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $type_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kw_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $self=__stackBase__+20;
        var $state=__stackBase__+24;
        var $year=__stackBase__+28;
        var $month=__stackBase__+32;
        var $day=__stackBase__+36;
        var $me=__stackBase__+40;
        var $pdata=__stackBase__+44;
        var $_alloca_point_=0;
        HEAP[$type_addr]=$type;
        HEAP[$args_addr]=$args;
        HEAP[$kw_addr]=$kw;
        HEAP[$self]=0; //@line 2280 "datetimemodule.c"
        var $1=HEAP[$args_addr]; //@line 2287 "datetimemodule.c"
        var $2=$1; //@line 2287 "datetimemodule.c"
        var $3=(($2+8)&4294967295); //@line 2287 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 2287 "datetimemodule.c"
        var $5=((($4))|0)==1; //@line 2287 "datetimemodule.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 7; break; } //@line 2287 "datetimemodule.c"
      case 1: // $bb
        var $6=HEAP[$args_addr]; //@line 2287 "datetimemodule.c"
        var $7=$6; //@line 2287 "datetimemodule.c"
        var $8=(($7+12)&4294967295); //@line 2287 "datetimemodule.c"
        var $9=(($8)&4294967295); //@line 2287 "datetimemodule.c"
        var $10=HEAP[$9]; //@line 2287 "datetimemodule.c"
        HEAP[$state]=$10; //@line 2287 "datetimemodule.c"
        var $11=HEAP[$state]; //@line 2287 "datetimemodule.c"
        var $12=(($11+4)&4294967295); //@line 2287 "datetimemodule.c"
        var $13=HEAP[$12]; //@line 2287 "datetimemodule.c"
        var $14=(($13+84)&4294967295); //@line 2287 "datetimemodule.c"
        var $15=HEAP[$14]; //@line 2287 "datetimemodule.c"
        var $16=($15) & 134217728; //@line 2287 "datetimemodule.c"
        var $17=((($16))|0)!=0; //@line 2287 "datetimemodule.c"
        if ($17) { __label__ = 2; break; } else { __label__ = 7; break; } //@line 2287 "datetimemodule.c"
      case 2: // $bb1
        var $18=HEAP[$state]; //@line 2287 "datetimemodule.c"
        var $19=$18; //@line 2287 "datetimemodule.c"
        var $20=(($19+8)&4294967295); //@line 2287 "datetimemodule.c"
        var $21=HEAP[$20]; //@line 2287 "datetimemodule.c"
        var $22=((($21))|0)==4; //@line 2287 "datetimemodule.c"
        if ($22) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 2287 "datetimemodule.c"
      case 3: // $bb2
        var $23=HEAP[$state]; //@line 2287 "datetimemodule.c"
        var $24=$23; //@line 2287 "datetimemodule.c"
        var $25=(($24+20)&4294967295); //@line 2287 "datetimemodule.c"
        var $26=(($25+2)&4294967295); //@line 2287 "datetimemodule.c"
        var $27=HEAP[$26]; //@line 2287 "datetimemodule.c"
        var $28=reSign(($27), 8, 0); //@line 2287 "datetimemodule.c"
        var $29=((($28) - 1)&4294967295); //@line 2287 "datetimemodule.c"
        var $30=((($29))>>>0) <= 11; //@line 2287 "datetimemodule.c"
        if ($30) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 2287 "datetimemodule.c"
      case 4: // $bb3
        var $31=HEAP[$type_addr]; //@line 2294 "datetimemodule.c"
        var $32=(($31+152)&4294967295); //@line 2294 "datetimemodule.c"
        var $33=HEAP[$32]; //@line 2294 "datetimemodule.c"
        var $34=HEAP[$type_addr]; //@line 2294 "datetimemodule.c"
        var $35=FUNCTION_TABLE[$33]($34, 0); //@line 2294 "datetimemodule.c"
        var $36=$35; //@line 2294 "datetimemodule.c"
        HEAP[$me]=$36; //@line 2294 "datetimemodule.c"
        var $37=HEAP[$me]; //@line 2295 "datetimemodule.c"
        var $38=($37)!=0; //@line 2295 "datetimemodule.c"
        if ($38) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 2295 "datetimemodule.c"
      case 5: // $bb4
        var $39=HEAP[$state]; //@line 2296 "datetimemodule.c"
        var $40=$39; //@line 2296 "datetimemodule.c"
        var $41=(($40+20)&4294967295); //@line 2296 "datetimemodule.c"
        var $42=(($41)&4294967295); //@line 2296 "datetimemodule.c"
        HEAP[$pdata]=$42; //@line 2296 "datetimemodule.c"
        var $43=HEAP[$me]; //@line 2297 "datetimemodule.c"
        var $44=(($43+13)&4294967295); //@line 2297 "datetimemodule.c"
        var $45=(($44)&4294967295); //@line 2297 "datetimemodule.c"
        var $46=HEAP[$pdata]; //@line 2297 "datetimemodule.c"
        _llvm_memcpy_p0i8_p0i8_i32($45, $46, 4, 1, 0); //@line 2297 "datetimemodule.c"
        var $47=HEAP[$me]; //@line 2298 "datetimemodule.c"
        var $48=(($47+8)&4294967295); //@line 2298 "datetimemodule.c"
        HEAP[$48]=-1; //@line 2298 "datetimemodule.c"
        __label__ = 6; break; //@line 2298 "datetimemodule.c"
      case 6: // $bb5
        var $49=HEAP[$me]; //@line 2300 "datetimemodule.c"
        var $50=$49; //@line 2300 "datetimemodule.c"
        HEAP[$0]=$50; //@line 2300 "datetimemodule.c"
        __label__ = 12; break; //@line 2300 "datetimemodule.c"
      case 7: // $bb6
        var $51=HEAP[$args_addr]; //@line 2303 "datetimemodule.c"
        var $52=HEAP[$kw_addr]; //@line 2303 "datetimemodule.c"
        var $53=__PyArg_ParseTupleAndKeywords_SizeT($51, $52, ((__str128)&4294967295), ((_date_kws)&4294967295), $year, $month, $day); //@line 2303 "datetimemodule.c"
        var $54=((($53))|0)!=0; //@line 2303 "datetimemodule.c"
        if ($54) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 2303 "datetimemodule.c"
      case 8: // $bb7
        var $55=HEAP[$day]; //@line 2305 "datetimemodule.c"
        var $56=HEAP[$month]; //@line 2305 "datetimemodule.c"
        var $57=HEAP[$year]; //@line 2305 "datetimemodule.c"
        var $58=_check_date_args($57, $56, $55); //@line 2305 "datetimemodule.c"
        var $59=((($58))|0) < 0; //@line 2305 "datetimemodule.c"
        if ($59) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 2305 "datetimemodule.c"
      case 9: // $bb8
        HEAP[$0]=0; //@line 2306 "datetimemodule.c"
        __label__ = 12; break; //@line 2306 "datetimemodule.c"
      case 10: // $bb9
        var $60=HEAP[$day]; //@line 2307 "datetimemodule.c"
        var $61=HEAP[$month]; //@line 2307 "datetimemodule.c"
        var $62=HEAP[$year]; //@line 2307 "datetimemodule.c"
        var $63=HEAP[$type_addr]; //@line 2307 "datetimemodule.c"
        var $64=_new_date_ex($62, $61, $60, $63); //@line 2307 "datetimemodule.c"
        HEAP[$self]=$64; //@line 2307 "datetimemodule.c"
        __label__ = 11; break; //@line 2307 "datetimemodule.c"
      case 11: // $bb10
        var $65=HEAP[$self]; //@line 2309 "datetimemodule.c"
        HEAP[$0]=$65; //@line 2309 "datetimemodule.c"
        __label__ = 12; break; //@line 2309 "datetimemodule.c"
      case 12: // $bb11
        var $66=HEAP[$0]; //@line 2300 "datetimemodule.c"
        HEAP[$retval]=$66; //@line 2300 "datetimemodule.c"
        __label__ = 13; break; //@line 2300 "datetimemodule.c"
      case 13: // $return
        var $retval12=HEAP[$retval]; //@line 2300 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval12; //@line 2300 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _date_local_from_time_t($cls, $ts) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $cls_addr=__stackBase__;
        var $ts_addr=__stackBase__+4;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $tm=__stackBase__+20;
        var $t=__stackBase__+24;
        var $result=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$cls_addr]=$cls;
        HEAP[$ts_addr]=$ts;
        HEAP[$result]=0; //@line 2318 "datetimemodule.c"
        var $1=HEAP[$ts_addr]; //@line 2320 "datetimemodule.c"
        var $2=__PyTime_DoubleToTimet($1); //@line 2320 "datetimemodule.c"
        HEAP[$t]=$2; //@line 2320 "datetimemodule.c"
        var $3=HEAP[$t]; //@line 2321 "datetimemodule.c"
        var $4=((($3))|0)==-1; //@line 2321 "datetimemodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 2321 "datetimemodule.c"
      case 1: // $bb
        var $5=_PyErr_Occurred(); //@line 2321 "datetimemodule.c"
        var $6=($5)!=0; //@line 2321 "datetimemodule.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2321 "datetimemodule.c"
      case 2: // $bb1
        HEAP[$0]=0; //@line 2322 "datetimemodule.c"
        __label__ = 7; break; //@line 2322 "datetimemodule.c"
      case 3: // $bb2
        var $7=_localtime($t); //@line 2323 "datetimemodule.c"
        HEAP[$tm]=$7; //@line 2323 "datetimemodule.c"
        var $8=HEAP[$tm]; //@line 2324 "datetimemodule.c"
        var $9=($8)!=0; //@line 2324 "datetimemodule.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 2324 "datetimemodule.c"
      case 4: // $bb3
        var $10=HEAP[$tm]; //@line 2325 "datetimemodule.c"
        var $11=(($10+12)&4294967295); //@line 2325 "datetimemodule.c"
        var $12=HEAP[$11]; //@line 2325 "datetimemodule.c"
        var $13=HEAP[$tm]; //@line 2325 "datetimemodule.c"
        var $14=(($13+16)&4294967295); //@line 2325 "datetimemodule.c"
        var $15=HEAP[$14]; //@line 2325 "datetimemodule.c"
        var $16=((($15) + 1)&4294967295); //@line 2325 "datetimemodule.c"
        var $17=HEAP[$tm]; //@line 2325 "datetimemodule.c"
        var $18=(($17+20)&4294967295); //@line 2325 "datetimemodule.c"
        var $19=HEAP[$18]; //@line 2325 "datetimemodule.c"
        var $20=((($19) + 1900)&4294967295); //@line 2325 "datetimemodule.c"
        var $21=HEAP[$cls_addr]; //@line 2325 "datetimemodule.c"
        var $22=__PyObject_CallFunction_SizeT($21, ((__str128)&4294967295), $20, $16, $12); //@line 2325 "datetimemodule.c"
        HEAP[$result]=$22; //@line 2325 "datetimemodule.c"
        __label__ = 6; break; //@line 2325 "datetimemodule.c"
      case 5: // $bb4
        var $23=HEAP[_PyExc_ValueError]; //@line 2330 "datetimemodule.c"
        _PyErr_SetString($23, ((__str141)&4294967295)); //@line 2330 "datetimemodule.c"
        __label__ = 6; break; //@line 2330 "datetimemodule.c"
      case 6: // $bb5
        var $24=HEAP[$result]; //@line 2333 "datetimemodule.c"
        HEAP[$0]=$24; //@line 2333 "datetimemodule.c"
        __label__ = 7; break; //@line 2333 "datetimemodule.c"
      case 7: // $bb6
        var $25=HEAP[$0]; //@line 2322 "datetimemodule.c"
        HEAP[$retval]=$25; //@line 2322 "datetimemodule.c"
        __label__ = 8; break; //@line 2322 "datetimemodule.c"
      case 8: // $return
        var $retval7=HEAP[$retval]; //@line 2322 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 2322 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _date_today($cls, $dummy) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $cls_addr=__stackBase__;
        var $dummy_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $time=__stackBase__+16;
        var $result=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$cls_addr]=$cls;
        HEAP[$dummy_addr]=$dummy;
        var $1=_time_time(); //@line 2347 "datetimemodule.c"
        HEAP[$time]=$1; //@line 2347 "datetimemodule.c"
        var $2=HEAP[$time]; //@line 2348 "datetimemodule.c"
        var $3=($2)==0; //@line 2348 "datetimemodule.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2348 "datetimemodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 2349 "datetimemodule.c"
        __label__ = 5; break; //@line 2349 "datetimemodule.c"
      case 2: // $bb1
        var $4=HEAP[$cls_addr]; //@line 2357 "datetimemodule.c"
        var $5=HEAP[$time]; //@line 2357 "datetimemodule.c"
        var $6=__PyObject_CallMethod_SizeT($4, ((__str142)&4294967295), ((__str35)&4294967295), $5); //@line 2357 "datetimemodule.c"
        HEAP[$result]=$6; //@line 2357 "datetimemodule.c"
        var $7=HEAP[$time]; //@line 2358 "datetimemodule.c"
        var $8=(($7)&4294967295); //@line 2358 "datetimemodule.c"
        var $9=HEAP[$8]; //@line 2358 "datetimemodule.c"
        var $10=((($9) - 1)&4294967295); //@line 2358 "datetimemodule.c"
        var $11=HEAP[$time]; //@line 2358 "datetimemodule.c"
        var $12=(($11)&4294967295); //@line 2358 "datetimemodule.c"
        HEAP[$12]=$10; //@line 2358 "datetimemodule.c"
        var $13=HEAP[$time]; //@line 2358 "datetimemodule.c"
        var $14=(($13)&4294967295); //@line 2358 "datetimemodule.c"
        var $15=HEAP[$14]; //@line 2358 "datetimemodule.c"
        var $16=((($15))|0)==0; //@line 2358 "datetimemodule.c"
        if ($16) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 2358 "datetimemodule.c"
      case 3: // $bb2
        var $17=HEAP[$time]; //@line 2358 "datetimemodule.c"
        var $18=(($17+4)&4294967295); //@line 2358 "datetimemodule.c"
        var $19=HEAP[$18]; //@line 2358 "datetimemodule.c"
        var $20=(($19+24)&4294967295); //@line 2358 "datetimemodule.c"
        var $21=HEAP[$20]; //@line 2358 "datetimemodule.c"
        var $22=HEAP[$time]; //@line 2358 "datetimemodule.c"
        FUNCTION_TABLE[$21]($22); //@line 2358 "datetimemodule.c"
        __label__ = 4; break; //@line 2358 "datetimemodule.c"
      case 4: // $bb3
        var $23=HEAP[$result]; //@line 2359 "datetimemodule.c"
        HEAP[$0]=$23; //@line 2359 "datetimemodule.c"
        __label__ = 5; break; //@line 2359 "datetimemodule.c"
      case 5: // $bb4
        var $24=HEAP[$0]; //@line 2349 "datetimemodule.c"
        HEAP[$retval]=$24; //@line 2349 "datetimemodule.c"
        __label__ = 6; break; //@line 2349 "datetimemodule.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 2349 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 2349 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _date_fromtimestamp($cls, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $cls_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $timestamp=__stackBase__+16;
        var $result=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$cls_addr]=$cls;
        HEAP[$args_addr]=$args;
        HEAP[$result]=0; //@line 2367 "datetimemodule.c"
        var $1=HEAP[$args_addr]; //@line 2369 "datetimemodule.c"
        var $2=__PyArg_ParseTuple_SizeT($1, ((__str143)&4294967295), $timestamp); //@line 2369 "datetimemodule.c"
        var $3=((($2))|0)!=0; //@line 2369 "datetimemodule.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2369 "datetimemodule.c"
      case 1: // $bb
        var $4=HEAP[$timestamp]; //@line 2370 "datetimemodule.c"
        var $5=HEAP[$cls_addr]; //@line 2370 "datetimemodule.c"
        var $6=_date_local_from_time_t($5, $4); //@line 2370 "datetimemodule.c"
        HEAP[$result]=$6; //@line 2370 "datetimemodule.c"
        __label__ = 2; break; //@line 2370 "datetimemodule.c"
      case 2: // $bb1
        var $7=HEAP[$result]; //@line 2371 "datetimemodule.c"
        HEAP[$0]=$7; //@line 2371 "datetimemodule.c"
        var $8=HEAP[$0]; //@line 2371 "datetimemodule.c"
        HEAP[$retval]=$8; //@line 2371 "datetimemodule.c"
        __label__ = 3; break; //@line 2371 "datetimemodule.c"
      case 3: // $return
        var $retval2=HEAP[$retval]; //@line 2371 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval2; //@line 2371 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _date_fromordinal($cls, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $cls_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $result=__stackBase__+16;
        var $ordinal=__stackBase__+20;
        var $year=__stackBase__+24;
        var $month=__stackBase__+28;
        var $day=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$cls_addr]=$cls;
        HEAP[$args_addr]=$args;
        HEAP[$result]=0; //@line 2380 "datetimemodule.c"
        var $1=HEAP[$args_addr]; //@line 2383 "datetimemodule.c"
        var $2=__PyArg_ParseTuple_SizeT($1, ((__str144)&4294967295), $ordinal); //@line 2383 "datetimemodule.c"
        var $3=((($2))|0)!=0; //@line 2383 "datetimemodule.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 2383 "datetimemodule.c"
      case 1: // $bb
        var $4=HEAP[$ordinal]; //@line 2388 "datetimemodule.c"
        var $5=((($4))|0) <= 0; //@line 2388 "datetimemodule.c"
        if ($5) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2388 "datetimemodule.c"
      case 2: // $bb1
        var $6=HEAP[_PyExc_ValueError]; //@line 2389 "datetimemodule.c"
        _PyErr_SetString($6, ((__str145)&4294967295)); //@line 2389 "datetimemodule.c"
        __label__ = 4; break; //@line 2389 "datetimemodule.c"
      case 3: // $bb2
        var $7=HEAP[$ordinal]; //@line 2392 "datetimemodule.c"
        _ord_to_ymd($7, $year, $month, $day); //@line 2392 "datetimemodule.c"
        var $8=HEAP[$day]; //@line 2393 "datetimemodule.c"
        var $9=HEAP[$month]; //@line 2393 "datetimemodule.c"
        var $10=HEAP[$year]; //@line 2393 "datetimemodule.c"
        var $11=HEAP[$cls_addr]; //@line 2393 "datetimemodule.c"
        var $12=__PyObject_CallFunction_SizeT($11, ((__str128)&4294967295), $10, $9, $8); //@line 2393 "datetimemodule.c"
        HEAP[$result]=$12; //@line 2393 "datetimemodule.c"
        __label__ = 4; break; //@line 2393 "datetimemodule.c"
      case 4: // $bb3
        var $13=HEAP[$result]; //@line 2397 "datetimemodule.c"
        HEAP[$0]=$13; //@line 2397 "datetimemodule.c"
        var $14=HEAP[$0]; //@line 2397 "datetimemodule.c"
        HEAP[$retval]=$14; //@line 2397 "datetimemodule.c"
        __label__ = 5; break; //@line 2397 "datetimemodule.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 2397 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 2397 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _add_date_timedelta($date, $delta, $negate) {
    var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 44);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $date_addr=__stackBase__;
        var $delta_addr=__stackBase__+4;
        var $negate_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $iftmp_174=__stackBase__+20;
        var $result=__stackBase__+24;
        var $year=__stackBase__+28;
        var $month=__stackBase__+32;
        var $deltadays=__stackBase__+36;
        var $day=__stackBase__+40;
        var $_alloca_point_=0;
        HEAP[$date_addr]=$date;
        HEAP[$delta_addr]=$delta;
        HEAP[$negate_addr]=$negate;
        HEAP[$result]=0; //@line 2410 "datetimemodule.c"
        var $1=HEAP[$date_addr]; //@line 2411 "datetimemodule.c"
        var $2=(($1+13)&4294967295); //@line 2411 "datetimemodule.c"
        var $3=(($2)&4294967295); //@line 2411 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 2411 "datetimemodule.c"
        var $5=unSign(($4), 8, 0); //@line 2411 "datetimemodule.c"
        var $6=($5) << 8; //@line 2411 "datetimemodule.c"
        var $7=HEAP[$date_addr]; //@line 2411 "datetimemodule.c"
        var $8=(($7+13)&4294967295); //@line 2411 "datetimemodule.c"
        var $9=(($8+1)&4294967295); //@line 2411 "datetimemodule.c"
        var $10=HEAP[$9]; //@line 2411 "datetimemodule.c"
        var $11=unSign(($10), 8, 0); //@line 2411 "datetimemodule.c"
        var $12=($6) | ($11); //@line 2411 "datetimemodule.c"
        HEAP[$year]=$12; //@line 2411 "datetimemodule.c"
        var $13=HEAP[$date_addr]; //@line 2412 "datetimemodule.c"
        var $14=(($13+13)&4294967295); //@line 2412 "datetimemodule.c"
        var $15=(($14+2)&4294967295); //@line 2412 "datetimemodule.c"
        var $16=HEAP[$15]; //@line 2412 "datetimemodule.c"
        var $17=unSign(($16), 8, 0); //@line 2412 "datetimemodule.c"
        HEAP[$month]=$17; //@line 2412 "datetimemodule.c"
        var $18=HEAP[$delta_addr]; //@line 2413 "datetimemodule.c"
        var $19=(($18+12)&4294967295); //@line 2413 "datetimemodule.c"
        var $20=HEAP[$19]; //@line 2413 "datetimemodule.c"
        HEAP[$deltadays]=$20; //@line 2413 "datetimemodule.c"
        var $21=HEAP[$date_addr]; //@line 2415 "datetimemodule.c"
        var $22=(($21+13)&4294967295); //@line 2415 "datetimemodule.c"
        var $23=(($22+3)&4294967295); //@line 2415 "datetimemodule.c"
        var $24=HEAP[$23]; //@line 2415 "datetimemodule.c"
        var $25=unSign(($24), 8, 0); //@line 2415 "datetimemodule.c"
        var $26=HEAP[$negate_addr]; //@line 2415 "datetimemodule.c"
        var $27=((($26))|0)!=0; //@line 2415 "datetimemodule.c"
        if ($27) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2415 "datetimemodule.c"
      case 1: // $bb
        var $28=HEAP[$deltadays]; //@line 2415 "datetimemodule.c"
        var $29=((0 - ($28))&4294967295); //@line 2415 "datetimemodule.c"
        HEAP[$iftmp_174]=$29; //@line 2415 "datetimemodule.c"
        __label__ = 3; break; //@line 2415 "datetimemodule.c"
      case 2: // $bb1
        var $30=HEAP[$deltadays]; //@line 2415 "datetimemodule.c"
        HEAP[$iftmp_174]=$30; //@line 2415 "datetimemodule.c"
        __label__ = 3; break; //@line 2415 "datetimemodule.c"
      case 3: // $bb2
        var $31=HEAP[$iftmp_174]; //@line 2415 "datetimemodule.c"
        var $32=((($25) + ($31))&4294967295); //@line 2415 "datetimemodule.c"
        HEAP[$day]=$32; //@line 2415 "datetimemodule.c"
        var $33=_normalize_date($year, $month, $day); //@line 2417 "datetimemodule.c"
        var $34=((($33))|0) >= 0; //@line 2417 "datetimemodule.c"
        if ($34) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 2417 "datetimemodule.c"
      case 4: // $bb3
        var $35=HEAP[$day]; //@line 2418 "datetimemodule.c"
        var $36=HEAP[$month]; //@line 2418 "datetimemodule.c"
        var $37=HEAP[$year]; //@line 2418 "datetimemodule.c"
        var $38=_new_date_ex($37, $36, $35, _PyDateTime_DateType); //@line 2418 "datetimemodule.c"
        HEAP[$result]=$38; //@line 2418 "datetimemodule.c"
        __label__ = 5; break; //@line 2418 "datetimemodule.c"
      case 5: // $bb4
        var $39=HEAP[$result]; //@line 2419 "datetimemodule.c"
        HEAP[$0]=$39; //@line 2419 "datetimemodule.c"
        var $40=HEAP[$0]; //@line 2419 "datetimemodule.c"
        HEAP[$retval]=$40; //@line 2419 "datetimemodule.c"
        __label__ = 6; break; //@line 2419 "datetimemodule.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 2419 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 2419 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _date_add($left, $right) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $left_addr=__stackBase__;
        var $right_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$left_addr]=$left;
        HEAP[$right_addr]=$right;
        var $1=HEAP[$left_addr]; //@line 2425 "datetimemodule.c"
        var $2=(($1+4)&4294967295); //@line 2425 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 2425 "datetimemodule.c"
        var $4=($3)==(_PyDateTime_DateTimeType); //@line 2425 "datetimemodule.c"
        if ($4) { __label__ = 4; break; } else { __label__ = 1; break; } //@line 2425 "datetimemodule.c"
      case 1: // $bb
        var $5=HEAP[$left_addr]; //@line 2425 "datetimemodule.c"
        var $6=(($5+4)&4294967295); //@line 2425 "datetimemodule.c"
        var $7=HEAP[$6]; //@line 2425 "datetimemodule.c"
        var $8=_PyType_IsSubtype($7, _PyDateTime_DateTimeType); //@line 2425 "datetimemodule.c"
        var $9=((($8))|0)!=0; //@line 2425 "datetimemodule.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 2; break; } //@line 2425 "datetimemodule.c"
      case 2: // $bb1
        var $10=HEAP[$right_addr]; //@line 2425 "datetimemodule.c"
        var $11=(($10+4)&4294967295); //@line 2425 "datetimemodule.c"
        var $12=HEAP[$11]; //@line 2425 "datetimemodule.c"
        var $13=($12)==(_PyDateTime_DateTimeType); //@line 2425 "datetimemodule.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 2425 "datetimemodule.c"
      case 3: // $bb2
        var $14=HEAP[$right_addr]; //@line 2425 "datetimemodule.c"
        var $15=(($14+4)&4294967295); //@line 2425 "datetimemodule.c"
        var $16=HEAP[$15]; //@line 2425 "datetimemodule.c"
        var $17=_PyType_IsSubtype($16, _PyDateTime_DateTimeType); //@line 2425 "datetimemodule.c"
        var $18=((($17))|0)!=0; //@line 2425 "datetimemodule.c"
        if ($18) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 2425 "datetimemodule.c"
      case 4: // $bb3
        var $19=HEAP[((__Py_NotImplementedStruct)&4294967295)]; //@line 2426 "datetimemodule.c"
        var $20=((($19) + 1)&4294967295); //@line 2426 "datetimemodule.c"
        HEAP[((__Py_NotImplementedStruct)&4294967295)]=$20; //@line 2426 "datetimemodule.c"
        HEAP[$0]=__Py_NotImplementedStruct; //@line 2427 "datetimemodule.c"
        __label__ = 15; break; //@line 2427 "datetimemodule.c"
      case 5: // $bb4
        var $21=HEAP[$left_addr]; //@line 2429 "datetimemodule.c"
        var $22=(($21+4)&4294967295); //@line 2429 "datetimemodule.c"
        var $23=HEAP[$22]; //@line 2429 "datetimemodule.c"
        var $24=($23)==(_PyDateTime_DateType); //@line 2429 "datetimemodule.c"
        if ($24) { __label__ = 7; break; } else { __label__ = 6; break; } //@line 2429 "datetimemodule.c"
      case 6: // $bb5
        var $25=HEAP[$left_addr]; //@line 2429 "datetimemodule.c"
        var $26=(($25+4)&4294967295); //@line 2429 "datetimemodule.c"
        var $27=HEAP[$26]; //@line 2429 "datetimemodule.c"
        var $28=_PyType_IsSubtype($27, _PyDateTime_DateType); //@line 2429 "datetimemodule.c"
        var $29=((($28))|0)!=0; //@line 2429 "datetimemodule.c"
        if ($29) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 2429 "datetimemodule.c"
      case 7: // $bb6
        var $30=HEAP[$right_addr]; //@line 2431 "datetimemodule.c"
        var $31=(($30+4)&4294967295); //@line 2431 "datetimemodule.c"
        var $32=HEAP[$31]; //@line 2431 "datetimemodule.c"
        var $33=($32)==(_PyDateTime_DeltaType); //@line 2431 "datetimemodule.c"
        if ($33) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 2431 "datetimemodule.c"
      case 8: // $bb7
        var $34=HEAP[$right_addr]; //@line 2431 "datetimemodule.c"
        var $35=(($34+4)&4294967295); //@line 2431 "datetimemodule.c"
        var $36=HEAP[$35]; //@line 2431 "datetimemodule.c"
        var $37=_PyType_IsSubtype($36, _PyDateTime_DeltaType); //@line 2431 "datetimemodule.c"
        var $38=((($37))|0)!=0; //@line 2431 "datetimemodule.c"
        if ($38) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 2431 "datetimemodule.c"
      case 9: // $bb8
        var $39=HEAP[$right_addr]; //@line 2433 "datetimemodule.c"
        var $40=$39; //@line 2433 "datetimemodule.c"
        var $41=HEAP[$left_addr]; //@line 2433 "datetimemodule.c"
        var $42=$41; //@line 2433 "datetimemodule.c"
        var $43=_add_date_timedelta($42, $40, 0); //@line 2433 "datetimemodule.c"
        HEAP[$0]=$43; //@line 2433 "datetimemodule.c"
        __label__ = 15; break; //@line 2433 "datetimemodule.c"
      case 10: // $bb9
        __label__ = 14; break; //@line 2433 "datetimemodule.c"
      case 11: // $bb10
        var $44=HEAP[$left_addr]; //@line 2441 "datetimemodule.c"
        var $45=(($44+4)&4294967295); //@line 2441 "datetimemodule.c"
        var $46=HEAP[$45]; //@line 2441 "datetimemodule.c"
        var $47=($46)==(_PyDateTime_DeltaType); //@line 2441 "datetimemodule.c"
        if ($47) { __label__ = 13; break; } else { __label__ = 12; break; } //@line 2441 "datetimemodule.c"
      case 12: // $bb11
        var $48=HEAP[$left_addr]; //@line 2441 "datetimemodule.c"
        var $49=(($48+4)&4294967295); //@line 2441 "datetimemodule.c"
        var $50=HEAP[$49]; //@line 2441 "datetimemodule.c"
        var $51=_PyType_IsSubtype($50, _PyDateTime_DeltaType); //@line 2441 "datetimemodule.c"
        var $52=((($51))|0)!=0; //@line 2441 "datetimemodule.c"
        if ($52) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 2441 "datetimemodule.c"
      case 13: // $bb12
        var $53=HEAP[$left_addr]; //@line 2443 "datetimemodule.c"
        var $54=$53; //@line 2443 "datetimemodule.c"
        var $55=HEAP[$right_addr]; //@line 2443 "datetimemodule.c"
        var $56=$55; //@line 2443 "datetimemodule.c"
        var $57=_add_date_timedelta($56, $54, 0); //@line 2443 "datetimemodule.c"
        HEAP[$0]=$57; //@line 2443 "datetimemodule.c"
        __label__ = 15; break; //@line 2443 "datetimemodule.c"
      case 14: // $bb13
        var $58=HEAP[((__Py_NotImplementedStruct)&4294967295)]; //@line 2447 "datetimemodule.c"
        var $59=((($58) + 1)&4294967295); //@line 2447 "datetimemodule.c"
        HEAP[((__Py_NotImplementedStruct)&4294967295)]=$59; //@line 2447 "datetimemodule.c"
        HEAP[$0]=__Py_NotImplementedStruct; //@line 2448 "datetimemodule.c"
        __label__ = 15; break; //@line 2448 "datetimemodule.c"
      case 15: // $bb14
        var $60=HEAP[$0]; //@line 2427 "datetimemodule.c"
        HEAP[$retval]=$60; //@line 2427 "datetimemodule.c"
        __label__ = 16; break; //@line 2427 "datetimemodule.c"
      case 16: // $return
        var $retval15=HEAP[$retval]; //@line 2427 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval15; //@line 2427 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _date_subtract($left, $right) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $left_addr=__stackBase__;
        var $right_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $left_ord=__stackBase__+16;
        var $right_ord=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$left_addr]=$left;
        HEAP[$right_addr]=$right;
        var $1=HEAP[$left_addr]; //@line 2454 "datetimemodule.c"
        var $2=(($1+4)&4294967295); //@line 2454 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 2454 "datetimemodule.c"
        var $4=($3)==(_PyDateTime_DateTimeType); //@line 2454 "datetimemodule.c"
        if ($4) { __label__ = 4; break; } else { __label__ = 1; break; } //@line 2454 "datetimemodule.c"
      case 1: // $bb
        var $5=HEAP[$left_addr]; //@line 2454 "datetimemodule.c"
        var $6=(($5+4)&4294967295); //@line 2454 "datetimemodule.c"
        var $7=HEAP[$6]; //@line 2454 "datetimemodule.c"
        var $8=_PyType_IsSubtype($7, _PyDateTime_DateTimeType); //@line 2454 "datetimemodule.c"
        var $9=((($8))|0)!=0; //@line 2454 "datetimemodule.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 2; break; } //@line 2454 "datetimemodule.c"
      case 2: // $bb1
        var $10=HEAP[$right_addr]; //@line 2454 "datetimemodule.c"
        var $11=(($10+4)&4294967295); //@line 2454 "datetimemodule.c"
        var $12=HEAP[$11]; //@line 2454 "datetimemodule.c"
        var $13=($12)==(_PyDateTime_DateTimeType); //@line 2454 "datetimemodule.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 2454 "datetimemodule.c"
      case 3: // $bb2
        var $14=HEAP[$right_addr]; //@line 2454 "datetimemodule.c"
        var $15=(($14+4)&4294967295); //@line 2454 "datetimemodule.c"
        var $16=HEAP[$15]; //@line 2454 "datetimemodule.c"
        var $17=_PyType_IsSubtype($16, _PyDateTime_DateTimeType); //@line 2454 "datetimemodule.c"
        var $18=((($17))|0)!=0; //@line 2454 "datetimemodule.c"
        if ($18) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 2454 "datetimemodule.c"
      case 4: // $bb3
        var $19=HEAP[((__Py_NotImplementedStruct)&4294967295)]; //@line 2455 "datetimemodule.c"
        var $20=((($19) + 1)&4294967295); //@line 2455 "datetimemodule.c"
        HEAP[((__Py_NotImplementedStruct)&4294967295)]=$20; //@line 2455 "datetimemodule.c"
        HEAP[$0]=__Py_NotImplementedStruct; //@line 2456 "datetimemodule.c"
        __label__ = 14; break; //@line 2456 "datetimemodule.c"
      case 5: // $bb4
        var $21=HEAP[$left_addr]; //@line 2458 "datetimemodule.c"
        var $22=(($21+4)&4294967295); //@line 2458 "datetimemodule.c"
        var $23=HEAP[$22]; //@line 2458 "datetimemodule.c"
        var $24=($23)==(_PyDateTime_DateType); //@line 2458 "datetimemodule.c"
        if ($24) { __label__ = 7; break; } else { __label__ = 6; break; } //@line 2458 "datetimemodule.c"
      case 6: // $bb5
        var $25=HEAP[$left_addr]; //@line 2458 "datetimemodule.c"
        var $26=(($25+4)&4294967295); //@line 2458 "datetimemodule.c"
        var $27=HEAP[$26]; //@line 2458 "datetimemodule.c"
        var $28=_PyType_IsSubtype($27, _PyDateTime_DateType); //@line 2458 "datetimemodule.c"
        var $29=((($28))|0)!=0; //@line 2458 "datetimemodule.c"
        if ($29) { __label__ = 7; break; } else { __label__ = 13; break; } //@line 2458 "datetimemodule.c"
      case 7: // $bb6
        var $30=HEAP[$right_addr]; //@line 2459 "datetimemodule.c"
        var $31=(($30+4)&4294967295); //@line 2459 "datetimemodule.c"
        var $32=HEAP[$31]; //@line 2459 "datetimemodule.c"
        var $33=($32)==(_PyDateTime_DateType); //@line 2459 "datetimemodule.c"
        if ($33) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 2459 "datetimemodule.c"
      case 8: // $bb7
        var $34=HEAP[$right_addr]; //@line 2459 "datetimemodule.c"
        var $35=(($34+4)&4294967295); //@line 2459 "datetimemodule.c"
        var $36=HEAP[$35]; //@line 2459 "datetimemodule.c"
        var $37=_PyType_IsSubtype($36, _PyDateTime_DateType); //@line 2459 "datetimemodule.c"
        var $38=((($37))|0)!=0; //@line 2459 "datetimemodule.c"
        if ($38) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 2459 "datetimemodule.c"
      case 9: // $bb8
        var $39=HEAP[$left_addr]; //@line 2463 "datetimemodule.c"
        var $40=$39; //@line 2463 "datetimemodule.c"
        var $41=(($40+13)&4294967295); //@line 2463 "datetimemodule.c"
        var $42=(($41+3)&4294967295); //@line 2463 "datetimemodule.c"
        var $43=HEAP[$42]; //@line 2463 "datetimemodule.c"
        var $44=unSign(($43), 8, 0); //@line 2463 "datetimemodule.c"
        var $45=HEAP[$left_addr]; //@line 2463 "datetimemodule.c"
        var $46=$45; //@line 2463 "datetimemodule.c"
        var $47=(($46+13)&4294967295); //@line 2463 "datetimemodule.c"
        var $48=(($47+2)&4294967295); //@line 2463 "datetimemodule.c"
        var $49=HEAP[$48]; //@line 2463 "datetimemodule.c"
        var $50=unSign(($49), 8, 0); //@line 2463 "datetimemodule.c"
        var $51=HEAP[$left_addr]; //@line 2463 "datetimemodule.c"
        var $52=$51; //@line 2463 "datetimemodule.c"
        var $53=(($52+13)&4294967295); //@line 2463 "datetimemodule.c"
        var $54=(($53)&4294967295); //@line 2463 "datetimemodule.c"
        var $55=HEAP[$54]; //@line 2463 "datetimemodule.c"
        var $56=unSign(($55), 8, 0); //@line 2463 "datetimemodule.c"
        var $57=($56) << 8; //@line 2463 "datetimemodule.c"
        var $58=HEAP[$left_addr]; //@line 2463 "datetimemodule.c"
        var $59=$58; //@line 2463 "datetimemodule.c"
        var $60=(($59+13)&4294967295); //@line 2463 "datetimemodule.c"
        var $61=(($60+1)&4294967295); //@line 2463 "datetimemodule.c"
        var $62=HEAP[$61]; //@line 2463 "datetimemodule.c"
        var $63=unSign(($62), 8, 0); //@line 2463 "datetimemodule.c"
        var $64=($57) | ($63); //@line 2463 "datetimemodule.c"
        var $65=_ymd_to_ord($64, $50, $44); //@line 2463 "datetimemodule.c"
        HEAP[$left_ord]=$65; //@line 2463 "datetimemodule.c"
        var $66=HEAP[$right_addr]; //@line 2466 "datetimemodule.c"
        var $67=$66; //@line 2466 "datetimemodule.c"
        var $68=(($67+13)&4294967295); //@line 2466 "datetimemodule.c"
        var $69=(($68+3)&4294967295); //@line 2466 "datetimemodule.c"
        var $70=HEAP[$69]; //@line 2466 "datetimemodule.c"
        var $71=unSign(($70), 8, 0); //@line 2466 "datetimemodule.c"
        var $72=HEAP[$right_addr]; //@line 2466 "datetimemodule.c"
        var $73=$72; //@line 2466 "datetimemodule.c"
        var $74=(($73+13)&4294967295); //@line 2466 "datetimemodule.c"
        var $75=(($74+2)&4294967295); //@line 2466 "datetimemodule.c"
        var $76=HEAP[$75]; //@line 2466 "datetimemodule.c"
        var $77=unSign(($76), 8, 0); //@line 2466 "datetimemodule.c"
        var $78=HEAP[$right_addr]; //@line 2466 "datetimemodule.c"
        var $79=$78; //@line 2466 "datetimemodule.c"
        var $80=(($79+13)&4294967295); //@line 2466 "datetimemodule.c"
        var $81=(($80)&4294967295); //@line 2466 "datetimemodule.c"
        var $82=HEAP[$81]; //@line 2466 "datetimemodule.c"
        var $83=unSign(($82), 8, 0); //@line 2466 "datetimemodule.c"
        var $84=($83) << 8; //@line 2466 "datetimemodule.c"
        var $85=HEAP[$right_addr]; //@line 2466 "datetimemodule.c"
        var $86=$85; //@line 2466 "datetimemodule.c"
        var $87=(($86+13)&4294967295); //@line 2466 "datetimemodule.c"
        var $88=(($87+1)&4294967295); //@line 2466 "datetimemodule.c"
        var $89=HEAP[$88]; //@line 2466 "datetimemodule.c"
        var $90=unSign(($89), 8, 0); //@line 2466 "datetimemodule.c"
        var $91=($84) | ($90); //@line 2466 "datetimemodule.c"
        var $92=_ymd_to_ord($91, $77, $71); //@line 2466 "datetimemodule.c"
        HEAP[$right_ord]=$92; //@line 2466 "datetimemodule.c"
        var $93=HEAP[$left_ord]; //@line 2467 "datetimemodule.c"
        var $94=HEAP[$right_ord]; //@line 2467 "datetimemodule.c"
        var $95=((($93) - ($94))&4294967295); //@line 2467 "datetimemodule.c"
        var $96=_new_delta_ex($95, 0, 0, 0, _PyDateTime_DeltaType); //@line 2467 "datetimemodule.c"
        HEAP[$0]=$96; //@line 2467 "datetimemodule.c"
        __label__ = 14; break; //@line 2467 "datetimemodule.c"
      case 10: // $bb9
        var $97=HEAP[$right_addr]; //@line 2469 "datetimemodule.c"
        var $98=(($97+4)&4294967295); //@line 2469 "datetimemodule.c"
        var $99=HEAP[$98]; //@line 2469 "datetimemodule.c"
        var $100=($99)==(_PyDateTime_DeltaType); //@line 2469 "datetimemodule.c"
        if ($100) { __label__ = 12; break; } else { __label__ = 11; break; } //@line 2469 "datetimemodule.c"
      case 11: // $bb10
        var $101=HEAP[$right_addr]; //@line 2469 "datetimemodule.c"
        var $102=(($101+4)&4294967295); //@line 2469 "datetimemodule.c"
        var $103=HEAP[$102]; //@line 2469 "datetimemodule.c"
        var $104=_PyType_IsSubtype($103, _PyDateTime_DeltaType); //@line 2469 "datetimemodule.c"
        var $105=((($104))|0)!=0; //@line 2469 "datetimemodule.c"
        if ($105) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 2469 "datetimemodule.c"
      case 12: // $bb11
        var $106=HEAP[$right_addr]; //@line 2471 "datetimemodule.c"
        var $107=$106; //@line 2471 "datetimemodule.c"
        var $108=HEAP[$left_addr]; //@line 2471 "datetimemodule.c"
        var $109=$108; //@line 2471 "datetimemodule.c"
        var $110=_add_date_timedelta($109, $107, 1); //@line 2471 "datetimemodule.c"
        HEAP[$0]=$110; //@line 2471 "datetimemodule.c"
        __label__ = 14; break; //@line 2471 "datetimemodule.c"
      case 13: // $bb12
        var $111=HEAP[((__Py_NotImplementedStruct)&4294967295)]; //@line 2476 "datetimemodule.c"
        var $112=((($111) + 1)&4294967295); //@line 2476 "datetimemodule.c"
        HEAP[((__Py_NotImplementedStruct)&4294967295)]=$112; //@line 2476 "datetimemodule.c"
        HEAP[$0]=__Py_NotImplementedStruct; //@line 2477 "datetimemodule.c"
        __label__ = 14; break; //@line 2477 "datetimemodule.c"
      case 14: // $bb13
        var $113=HEAP[$0]; //@line 2456 "datetimemodule.c"
        HEAP[$retval]=$113; //@line 2456 "datetimemodule.c"
        __label__ = 15; break; //@line 2456 "datetimemodule.c"
      case 15: // $return
        var $retval14=HEAP[$retval]; //@line 2456 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval14; //@line 2456 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _date_repr($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 1044; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 1044);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $buffer=__stackBase__+12;
        var $type_name=__stackBase__+1040;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 2489 "datetimemodule.c"
        var $2=$1; //@line 2489 "datetimemodule.c"
        var $3=(($2+4)&4294967295); //@line 2489 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 2489 "datetimemodule.c"
        var $5=(($4+12)&4294967295); //@line 2489 "datetimemodule.c"
        var $6=HEAP[$5]; //@line 2489 "datetimemodule.c"
        HEAP[$type_name]=$6; //@line 2489 "datetimemodule.c"
        var $7=HEAP[$self_addr]; //@line 2490 "datetimemodule.c"
        var $8=(($7+13)&4294967295); //@line 2490 "datetimemodule.c"
        var $9=(($8+3)&4294967295); //@line 2490 "datetimemodule.c"
        var $10=HEAP[$9]; //@line 2490 "datetimemodule.c"
        var $11=unSign(($10), 8, 0); //@line 2490 "datetimemodule.c"
        var $12=HEAP[$self_addr]; //@line 2490 "datetimemodule.c"
        var $13=(($12+13)&4294967295); //@line 2490 "datetimemodule.c"
        var $14=(($13+2)&4294967295); //@line 2490 "datetimemodule.c"
        var $15=HEAP[$14]; //@line 2490 "datetimemodule.c"
        var $16=unSign(($15), 8, 0); //@line 2490 "datetimemodule.c"
        var $17=HEAP[$self_addr]; //@line 2490 "datetimemodule.c"
        var $18=(($17+13)&4294967295); //@line 2490 "datetimemodule.c"
        var $19=(($18)&4294967295); //@line 2490 "datetimemodule.c"
        var $20=HEAP[$19]; //@line 2490 "datetimemodule.c"
        var $21=unSign(($20), 8, 0); //@line 2490 "datetimemodule.c"
        var $22=($21) << 8; //@line 2490 "datetimemodule.c"
        var $23=HEAP[$self_addr]; //@line 2490 "datetimemodule.c"
        var $24=(($23+13)&4294967295); //@line 2490 "datetimemodule.c"
        var $25=(($24+1)&4294967295); //@line 2490 "datetimemodule.c"
        var $26=HEAP[$25]; //@line 2490 "datetimemodule.c"
        var $27=unSign(($26), 8, 0); //@line 2490 "datetimemodule.c"
        var $28=($22) | ($27); //@line 2490 "datetimemodule.c"
        var $buffer1=$buffer; //@line 2490 "datetimemodule.c"
        var $29=HEAP[$type_name]; //@line 2490 "datetimemodule.c"
        var $30=_PyOS_snprintf($buffer1, 1028, ((__str121)&4294967295), $29, $28, $16, $11); //@line 2490 "datetimemodule.c"
        var $buffer2=$buffer; //@line 2494 "datetimemodule.c"
        var $31=_PyString_FromString($buffer2); //@line 2494 "datetimemodule.c"
        HEAP[$0]=$31; //@line 2494 "datetimemodule.c"
        var $32=HEAP[$0]; //@line 2494 "datetimemodule.c"
        HEAP[$retval]=$32; //@line 2494 "datetimemodule.c"
        __label__ = 1; break; //@line 2494 "datetimemodule.c"
      case 1: // $return
        var $retval3=HEAP[$retval]; //@line 2494 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 2494 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _date_isoformat($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 140; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 140);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $buffer=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 2502 "datetimemodule.c"
        var $buffer1=$buffer; //@line 2502 "datetimemodule.c"
        var $2=_isoformat_date($1, $buffer1, 128); //@line 2502 "datetimemodule.c"
        var $buffer2=$buffer; //@line 2503 "datetimemodule.c"
        var $3=_PyString_FromString($buffer2); //@line 2503 "datetimemodule.c"
        HEAP[$0]=$3; //@line 2503 "datetimemodule.c"
        var $4=HEAP[$0]; //@line 2503 "datetimemodule.c"
        HEAP[$retval]=$4; //@line 2503 "datetimemodule.c"
        __label__ = 1; break; //@line 2503 "datetimemodule.c"
      case 1: // $return
        var $retval3=HEAP[$retval]; //@line 2503 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 2503 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _date_str($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 2510 "datetimemodule.c"
        var $2=$1; //@line 2510 "datetimemodule.c"
        var $3=__PyObject_CallMethod_SizeT($2, ((__str146)&4294967295), ((__str99)&4294967295)); //@line 2510 "datetimemodule.c"
        HEAP[$0]=$3; //@line 2510 "datetimemodule.c"
        var $4=HEAP[$0]; //@line 2510 "datetimemodule.c"
        HEAP[$retval]=$4; //@line 2510 "datetimemodule.c"
        __label__ = 1; break; //@line 2510 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 2510 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 2510 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _date_ctime($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 2517 "datetimemodule.c"
        var $2=_format_ctime($1, 0, 0, 0); //@line 2517 "datetimemodule.c"
        HEAP[$0]=$2; //@line 2517 "datetimemodule.c"
        var $3=HEAP[$0]; //@line 2517 "datetimemodule.c"
        HEAP[$retval]=$3; //@line 2517 "datetimemodule.c"
        __label__ = 1; break; //@line 2517 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 2517 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 2517 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _date_strftime($self, $args, $kw) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kw_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $result=__stackBase__+20;
        var $tuple=__stackBase__+24;
        var $format=__stackBase__+28;
        var $format_len=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$kw_addr]=$kw;
        var $1=HEAP[$args_addr]; //@line 2532 "datetimemodule.c"
        var $2=HEAP[$kw_addr]; //@line 2532 "datetimemodule.c"
        var $3=__PyArg_ParseTupleAndKeywords_SizeT($1, $2, ((__str147)&4294967295), ((_keywords_11164)&4294967295), $format, $format_len); //@line 2532 "datetimemodule.c"
        var $4=((($3))|0)==0; //@line 2532 "datetimemodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2532 "datetimemodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 2534 "datetimemodule.c"
        __label__ = 7; break; //@line 2534 "datetimemodule.c"
      case 2: // $bb1
        var $5=HEAP[$self_addr]; //@line 2536 "datetimemodule.c"
        var $6=$5; //@line 2536 "datetimemodule.c"
        var $7=__PyObject_CallMethod_SizeT($6, ((__str149)&4294967295), ((__str99)&4294967295)); //@line 2536 "datetimemodule.c"
        HEAP[$tuple]=$7; //@line 2536 "datetimemodule.c"
        var $8=HEAP[$tuple]; //@line 2537 "datetimemodule.c"
        var $9=($8)==0; //@line 2537 "datetimemodule.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 2537 "datetimemodule.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 2538 "datetimemodule.c"
        __label__ = 7; break; //@line 2538 "datetimemodule.c"
      case 4: // $bb3
        var $10=HEAP[$self_addr]; //@line 2539 "datetimemodule.c"
        var $11=$10; //@line 2539 "datetimemodule.c"
        var $12=HEAP[$format_len]; //@line 2539 "datetimemodule.c"
        var $13=HEAP[$format]; //@line 2539 "datetimemodule.c"
        var $14=HEAP[$self_addr]; //@line 2539 "datetimemodule.c"
        var $15=$14; //@line 2539 "datetimemodule.c"
        var $16=HEAP[$tuple]; //@line 2539 "datetimemodule.c"
        var $17=_wrap_strftime($15, $13, $12, $16, $11); //@line 2539 "datetimemodule.c"
        HEAP[$result]=$17; //@line 2539 "datetimemodule.c"
        var $18=HEAP[$tuple]; //@line 2541 "datetimemodule.c"
        var $19=(($18)&4294967295); //@line 2541 "datetimemodule.c"
        var $20=HEAP[$19]; //@line 2541 "datetimemodule.c"
        var $21=((($20) - 1)&4294967295); //@line 2541 "datetimemodule.c"
        var $22=HEAP[$tuple]; //@line 2541 "datetimemodule.c"
        var $23=(($22)&4294967295); //@line 2541 "datetimemodule.c"
        HEAP[$23]=$21; //@line 2541 "datetimemodule.c"
        var $24=HEAP[$tuple]; //@line 2541 "datetimemodule.c"
        var $25=(($24)&4294967295); //@line 2541 "datetimemodule.c"
        var $26=HEAP[$25]; //@line 2541 "datetimemodule.c"
        var $27=((($26))|0)==0; //@line 2541 "datetimemodule.c"
        if ($27) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 2541 "datetimemodule.c"
      case 5: // $bb4
        var $28=HEAP[$tuple]; //@line 2541 "datetimemodule.c"
        var $29=(($28+4)&4294967295); //@line 2541 "datetimemodule.c"
        var $30=HEAP[$29]; //@line 2541 "datetimemodule.c"
        var $31=(($30+24)&4294967295); //@line 2541 "datetimemodule.c"
        var $32=HEAP[$31]; //@line 2541 "datetimemodule.c"
        var $33=HEAP[$tuple]; //@line 2541 "datetimemodule.c"
        FUNCTION_TABLE[$32]($33); //@line 2541 "datetimemodule.c"
        __label__ = 6; break; //@line 2541 "datetimemodule.c"
      case 6: // $bb5
        var $34=HEAP[$result]; //@line 2542 "datetimemodule.c"
        HEAP[$0]=$34; //@line 2542 "datetimemodule.c"
        __label__ = 7; break; //@line 2542 "datetimemodule.c"
      case 7: // $bb6
        var $35=HEAP[$0]; //@line 2534 "datetimemodule.c"
        HEAP[$retval]=$35; //@line 2534 "datetimemodule.c"
        __label__ = 8; break; //@line 2534 "datetimemodule.c"
      case 8: // $return
        var $retval7=HEAP[$retval]; //@line 2534 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 2534 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _date_format($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $format=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$args_addr]; //@line 2550 "datetimemodule.c"
        var $2=__PyArg_ParseTuple_SizeT($1, ((__str150)&4294967295), $format); //@line 2550 "datetimemodule.c"
        var $3=((($2))|0)==0; //@line 2550 "datetimemodule.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2550 "datetimemodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 2551 "datetimemodule.c"
        __label__ = 12; break; //@line 2551 "datetimemodule.c"
      case 2: // $bb1
        var $4=HEAP[$format]; //@line 2554 "datetimemodule.c"
        var $5=(($4+4)&4294967295); //@line 2554 "datetimemodule.c"
        var $6=HEAP[$5]; //@line 2554 "datetimemodule.c"
        var $7=(($6+84)&4294967295); //@line 2554 "datetimemodule.c"
        var $8=HEAP[$7]; //@line 2554 "datetimemodule.c"
        var $9=($8) & 134217728; //@line 2554 "datetimemodule.c"
        var $10=((($9))|0)!=0; //@line 2554 "datetimemodule.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 2554 "datetimemodule.c"
      case 3: // $bb2
        var $11=HEAP[$format]; //@line 2556 "datetimemodule.c"
        var $12=$11; //@line 2556 "datetimemodule.c"
        var $13=(($12+8)&4294967295); //@line 2556 "datetimemodule.c"
        var $14=HEAP[$13]; //@line 2556 "datetimemodule.c"
        var $15=((($14))|0)==0; //@line 2556 "datetimemodule.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 2556 "datetimemodule.c"
      case 4: // $bb3
        var $16=HEAP[$self_addr]; //@line 2557 "datetimemodule.c"
        var $17=$16; //@line 2557 "datetimemodule.c"
        var $18=_PyObject_Str($17); //@line 2557 "datetimemodule.c"
        HEAP[$0]=$18; //@line 2557 "datetimemodule.c"
        __label__ = 12; break; //@line 2557 "datetimemodule.c"
      case 5: // $bb4
        __label__ = 11; break; //@line 2557 "datetimemodule.c"
      case 6: // $bb5
        var $19=HEAP[$format]; //@line 2558 "datetimemodule.c"
        var $20=(($19+4)&4294967295); //@line 2558 "datetimemodule.c"
        var $21=HEAP[$20]; //@line 2558 "datetimemodule.c"
        var $22=(($21+84)&4294967295); //@line 2558 "datetimemodule.c"
        var $23=HEAP[$22]; //@line 2558 "datetimemodule.c"
        var $24=($23) & 268435456; //@line 2558 "datetimemodule.c"
        var $25=((($24))|0)!=0; //@line 2558 "datetimemodule.c"
        if ($25) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 2558 "datetimemodule.c"
      case 7: // $bb6
        var $26=HEAP[$format]; //@line 2560 "datetimemodule.c"
        var $27=$26; //@line 2560 "datetimemodule.c"
        var $28=(($27+8)&4294967295); //@line 2560 "datetimemodule.c"
        var $29=HEAP[$28]; //@line 2560 "datetimemodule.c"
        var $30=((($29))|0)==0; //@line 2560 "datetimemodule.c"
        if ($30) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 2560 "datetimemodule.c"
      case 8: // $bb7
        var $31=HEAP[$self_addr]; //@line 2561 "datetimemodule.c"
        var $32=$31; //@line 2561 "datetimemodule.c"
        var $33=_PyObject_Unicode($32); //@line 2561 "datetimemodule.c"
        HEAP[$0]=$33; //@line 2561 "datetimemodule.c"
        __label__ = 12; break; //@line 2561 "datetimemodule.c"
      case 9: // $bb8
        __label__ = 11; break; //@line 2561 "datetimemodule.c"
      case 10: // $bb9
        var $34=HEAP[$format]; //@line 2563 "datetimemodule.c"
        var $35=(($34+4)&4294967295); //@line 2563 "datetimemodule.c"
        var $36=HEAP[$35]; //@line 2563 "datetimemodule.c"
        var $37=(($36+12)&4294967295); //@line 2563 "datetimemodule.c"
        var $38=HEAP[$37]; //@line 2563 "datetimemodule.c"
        var $39=HEAP[_PyExc_ValueError]; //@line 2563 "datetimemodule.c"
        var $40=_PyErr_Format($39, ((__str151)&4294967295), $38); //@line 2563 "datetimemodule.c"
        HEAP[$0]=0; //@line 2566 "datetimemodule.c"
        __label__ = 12; break; //@line 2566 "datetimemodule.c"
      case 11: // $bb10
        var $41=HEAP[$format]; //@line 2568 "datetimemodule.c"
        var $42=HEAP[$self_addr]; //@line 2568 "datetimemodule.c"
        var $43=$42; //@line 2568 "datetimemodule.c"
        var $44=__PyObject_CallMethod_SizeT($43, ((__str93)&4294967295), ((__str35)&4294967295), $41); //@line 2568 "datetimemodule.c"
        HEAP[$0]=$44; //@line 2568 "datetimemodule.c"
        __label__ = 12; break; //@line 2568 "datetimemodule.c"
      case 12: // $bb11
        var $45=HEAP[$0]; //@line 2551 "datetimemodule.c"
        HEAP[$retval]=$45; //@line 2551 "datetimemodule.c"
        __label__ = 13; break; //@line 2551 "datetimemodule.c"
      case 13: // $return
        var $retval12=HEAP[$retval]; //@line 2551 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval12; //@line 2551 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _date_isoweekday($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $dow=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 2576 "datetimemodule.c"
        var $2=(($1+13)&4294967295); //@line 2576 "datetimemodule.c"
        var $3=(($2+3)&4294967295); //@line 2576 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 2576 "datetimemodule.c"
        var $5=unSign(($4), 8, 0); //@line 2576 "datetimemodule.c"
        var $6=HEAP[$self_addr]; //@line 2576 "datetimemodule.c"
        var $7=(($6+13)&4294967295); //@line 2576 "datetimemodule.c"
        var $8=(($7+2)&4294967295); //@line 2576 "datetimemodule.c"
        var $9=HEAP[$8]; //@line 2576 "datetimemodule.c"
        var $10=unSign(($9), 8, 0); //@line 2576 "datetimemodule.c"
        var $11=HEAP[$self_addr]; //@line 2576 "datetimemodule.c"
        var $12=(($11+13)&4294967295); //@line 2576 "datetimemodule.c"
        var $13=(($12)&4294967295); //@line 2576 "datetimemodule.c"
        var $14=HEAP[$13]; //@line 2576 "datetimemodule.c"
        var $15=unSign(($14), 8, 0); //@line 2576 "datetimemodule.c"
        var $16=($15) << 8; //@line 2576 "datetimemodule.c"
        var $17=HEAP[$self_addr]; //@line 2576 "datetimemodule.c"
        var $18=(($17+13)&4294967295); //@line 2576 "datetimemodule.c"
        var $19=(($18+1)&4294967295); //@line 2576 "datetimemodule.c"
        var $20=HEAP[$19]; //@line 2576 "datetimemodule.c"
        var $21=unSign(($20), 8, 0); //@line 2576 "datetimemodule.c"
        var $22=($16) | ($21); //@line 2576 "datetimemodule.c"
        var $23=_weekday($22, $10, $5); //@line 2576 "datetimemodule.c"
        HEAP[$dow]=$23; //@line 2576 "datetimemodule.c"
        var $24=HEAP[$dow]; //@line 2578 "datetimemodule.c"
        var $25=((($24) + 1)&4294967295); //@line 2578 "datetimemodule.c"
        var $26=_PyInt_FromLong($25); //@line 2578 "datetimemodule.c"
        HEAP[$0]=$26; //@line 2578 "datetimemodule.c"
        var $27=HEAP[$0]; //@line 2578 "datetimemodule.c"
        HEAP[$retval]=$27; //@line 2578 "datetimemodule.c"
        __label__ = 1; break; //@line 2578 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 2578 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 2578 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _date_isocalendar($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $year=__stackBase__+12;
        var $week1_monday=__stackBase__+16;
        var $today=__stackBase__+20;
        var $week=__stackBase__+24;
        var $day=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 2584 "datetimemodule.c"
        var $2=(($1+13)&4294967295); //@line 2584 "datetimemodule.c"
        var $3=(($2)&4294967295); //@line 2584 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 2584 "datetimemodule.c"
        var $5=unSign(($4), 8, 0); //@line 2584 "datetimemodule.c"
        var $6=($5) << 8; //@line 2584 "datetimemodule.c"
        var $7=HEAP[$self_addr]; //@line 2584 "datetimemodule.c"
        var $8=(($7+13)&4294967295); //@line 2584 "datetimemodule.c"
        var $9=(($8+1)&4294967295); //@line 2584 "datetimemodule.c"
        var $10=HEAP[$9]; //@line 2584 "datetimemodule.c"
        var $11=unSign(($10), 8, 0); //@line 2584 "datetimemodule.c"
        var $12=($6) | ($11); //@line 2584 "datetimemodule.c"
        HEAP[$year]=$12; //@line 2584 "datetimemodule.c"
        var $13=HEAP[$year]; //@line 2585 "datetimemodule.c"
        var $14=_iso_week1_monday($13); //@line 2585 "datetimemodule.c"
        HEAP[$week1_monday]=$14; //@line 2585 "datetimemodule.c"
        var $15=HEAP[$self_addr]; //@line 2586 "datetimemodule.c"
        var $16=(($15+13)&4294967295); //@line 2586 "datetimemodule.c"
        var $17=(($16+3)&4294967295); //@line 2586 "datetimemodule.c"
        var $18=HEAP[$17]; //@line 2586 "datetimemodule.c"
        var $19=unSign(($18), 8, 0); //@line 2586 "datetimemodule.c"
        var $20=HEAP[$self_addr]; //@line 2586 "datetimemodule.c"
        var $21=(($20+13)&4294967295); //@line 2586 "datetimemodule.c"
        var $22=(($21+2)&4294967295); //@line 2586 "datetimemodule.c"
        var $23=HEAP[$22]; //@line 2586 "datetimemodule.c"
        var $24=unSign(($23), 8, 0); //@line 2586 "datetimemodule.c"
        var $25=HEAP[$year]; //@line 2586 "datetimemodule.c"
        var $26=_ymd_to_ord($25, $24, $19); //@line 2586 "datetimemodule.c"
        HEAP[$today]=$26; //@line 2586 "datetimemodule.c"
        var $27=HEAP[$today]; //@line 2590 "datetimemodule.c"
        var $28=HEAP[$week1_monday]; //@line 2590 "datetimemodule.c"
        var $29=((($27) - ($28))&4294967295); //@line 2590 "datetimemodule.c"
        var $30=_divmod($29, 7, $day); //@line 2590 "datetimemodule.c"
        HEAP[$week]=$30; //@line 2590 "datetimemodule.c"
        var $31=HEAP[$week]; //@line 2591 "datetimemodule.c"
        var $32=((($31))|0) < 0; //@line 2591 "datetimemodule.c"
        if ($32) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2591 "datetimemodule.c"
      case 1: // $bb
        var $33=HEAP[$year]; //@line 2592 "datetimemodule.c"
        var $34=((($33) - 1)&4294967295); //@line 2592 "datetimemodule.c"
        HEAP[$year]=$34; //@line 2592 "datetimemodule.c"
        var $35=HEAP[$year]; //@line 2593 "datetimemodule.c"
        var $36=_iso_week1_monday($35); //@line 2593 "datetimemodule.c"
        HEAP[$week1_monday]=$36; //@line 2593 "datetimemodule.c"
        var $37=HEAP[$today]; //@line 2594 "datetimemodule.c"
        var $38=HEAP[$week1_monday]; //@line 2594 "datetimemodule.c"
        var $39=((($37) - ($38))&4294967295); //@line 2594 "datetimemodule.c"
        var $40=_divmod($39, 7, $day); //@line 2594 "datetimemodule.c"
        HEAP[$week]=$40; //@line 2594 "datetimemodule.c"
        __label__ = 5; break; //@line 2594 "datetimemodule.c"
      case 2: // $bb1
        var $41=HEAP[$week]; //@line 2596 "datetimemodule.c"
        var $42=((($41))|0) > 51; //@line 2596 "datetimemodule.c"
        if ($42) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 2596 "datetimemodule.c"
      case 3: // $bb2
        var $43=HEAP[$year]; //@line 2596 "datetimemodule.c"
        var $44=((($43) + 1)&4294967295); //@line 2596 "datetimemodule.c"
        var $45=_iso_week1_monday($44); //@line 2596 "datetimemodule.c"
        var $46=HEAP[$today]; //@line 2596 "datetimemodule.c"
        var $47=((($45))|0) <= ((($46))|0); //@line 2596 "datetimemodule.c"
        if ($47) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 2596 "datetimemodule.c"
      case 4: // $bb3
        var $48=HEAP[$year]; //@line 2597 "datetimemodule.c"
        var $49=((($48) + 1)&4294967295); //@line 2597 "datetimemodule.c"
        HEAP[$year]=$49; //@line 2597 "datetimemodule.c"
        HEAP[$week]=0; //@line 2598 "datetimemodule.c"
        __label__ = 5; break; //@line 2598 "datetimemodule.c"
      case 5: // $bb4
        var $50=HEAP[$day]; //@line 2600 "datetimemodule.c"
        var $51=((($50) + 1)&4294967295); //@line 2600 "datetimemodule.c"
        var $52=HEAP[$week]; //@line 2600 "datetimemodule.c"
        var $53=((($52) + 1)&4294967295); //@line 2600 "datetimemodule.c"
        var $54=HEAP[$year]; //@line 2600 "datetimemodule.c"
        var $55=__Py_BuildValue_SizeT(((__str128)&4294967295), $54, $53, $51); //@line 2600 "datetimemodule.c"
        HEAP[$0]=$55; //@line 2600 "datetimemodule.c"
        var $56=HEAP[$0]; //@line 2600 "datetimemodule.c"
        HEAP[$retval]=$56; //@line 2600 "datetimemodule.c"
        __label__ = 6; break; //@line 2600 "datetimemodule.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 2600 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 2600 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _date_richcompare($self, $other, $op) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $other_addr=__stackBase__+4;
        var $op_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $diff=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$other_addr]=$other;
        HEAP[$op_addr]=$op;
        HEAP[$diff]=42; //@line 2612 "datetimemodule.c"
        var $1=HEAP[$other_addr]; //@line 2614 "datetimemodule.c"
        var $2=(($1+4)&4294967295); //@line 2614 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 2614 "datetimemodule.c"
        var $4=($3)==(_PyDateTime_DateType); //@line 2614 "datetimemodule.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 2614 "datetimemodule.c"
      case 1: // $bb
        var $5=HEAP[$other_addr]; //@line 2614 "datetimemodule.c"
        var $6=(($5+4)&4294967295); //@line 2614 "datetimemodule.c"
        var $7=HEAP[$6]; //@line 2614 "datetimemodule.c"
        var $8=_PyType_IsSubtype($7, _PyDateTime_DateType); //@line 2614 "datetimemodule.c"
        var $9=((($8))|0)!=0; //@line 2614 "datetimemodule.c"
        if ($9) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2614 "datetimemodule.c"
      case 2: // $bb1
        var $10=HEAP[$other_addr]; //@line 2615 "datetimemodule.c"
        var $11=$10; //@line 2615 "datetimemodule.c"
        var $12=(($11+13)&4294967295); //@line 2615 "datetimemodule.c"
        var $13=(($12)&4294967295); //@line 2615 "datetimemodule.c"
        var $14=HEAP[$self_addr]; //@line 2615 "datetimemodule.c"
        var $15=(($14+13)&4294967295); //@line 2615 "datetimemodule.c"
        var $16=(($15)&4294967295); //@line 2615 "datetimemodule.c"
        var $17=_memcmp($16, $13, 4); //@line 2615 "datetimemodule.c"
        HEAP[$diff]=$17; //@line 2615 "datetimemodule.c"
        __label__ = 9; break; //@line 2615 "datetimemodule.c"
      case 3: // $bb2
        var $18=HEAP[$other_addr]; //@line 2618 "datetimemodule.c"
        var $19=_PyObject_HasAttrString($18, ((__str149)&4294967295)); //@line 2618 "datetimemodule.c"
        var $20=((($19))|0)!=0; //@line 2618 "datetimemodule.c"
        if ($20) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 2618 "datetimemodule.c"
      case 4: // $bb3
        var $21=HEAP[((__Py_NotImplementedStruct)&4294967295)]; //@line 2620 "datetimemodule.c"
        var $22=((($21) + 1)&4294967295); //@line 2620 "datetimemodule.c"
        HEAP[((__Py_NotImplementedStruct)&4294967295)]=$22; //@line 2620 "datetimemodule.c"
        HEAP[$0]=__Py_NotImplementedStruct; //@line 2621 "datetimemodule.c"
        __label__ = 10; break; //@line 2621 "datetimemodule.c"
      case 5: // $bb4
        var $23=HEAP[$op_addr]; //@line 2623 "datetimemodule.c"
        var $24=((($23))|0)==2; //@line 2623 "datetimemodule.c"
        if ($24) { __label__ = 7; break; } else { __label__ = 6; break; } //@line 2623 "datetimemodule.c"
      case 6: // $bb5
        var $25=HEAP[$op_addr]; //@line 2623 "datetimemodule.c"
        var $26=((($25))|0)==3; //@line 2623 "datetimemodule.c"
        if ($26) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 2623 "datetimemodule.c"
      case 7: // $bb6
        HEAP[$diff]=1; //@line 2624 "datetimemodule.c"
        __label__ = 9; break; //@line 2624 "datetimemodule.c"
      case 8: // $bb7
        var $27=HEAP[$self_addr]; //@line 2627 "datetimemodule.c"
        var $28=$27; //@line 2627 "datetimemodule.c"
        var $29=HEAP[$other_addr]; //@line 2627 "datetimemodule.c"
        var $30=_cmperror($28, $29); //@line 2627 "datetimemodule.c"
        HEAP[$0]=$30; //@line 2627 "datetimemodule.c"
        __label__ = 10; break; //@line 2627 "datetimemodule.c"
      case 9: // $bb8
        var $31=HEAP[$diff]; //@line 2629 "datetimemodule.c"
        var $32=HEAP[$op_addr]; //@line 2629 "datetimemodule.c"
        var $33=_diff_to_bool($31, $32); //@line 2629 "datetimemodule.c"
        HEAP[$0]=$33; //@line 2629 "datetimemodule.c"
        __label__ = 10; break; //@line 2629 "datetimemodule.c"
      case 10: // $bb9
        var $34=HEAP[$0]; //@line 2621 "datetimemodule.c"
        HEAP[$retval]=$34; //@line 2621 "datetimemodule.c"
        __label__ = 11; break; //@line 2621 "datetimemodule.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 2621 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 2621 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _date_timetuple($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 2635 "datetimemodule.c"
        var $2=(($1+13)&4294967295); //@line 2635 "datetimemodule.c"
        var $3=(($2+3)&4294967295); //@line 2635 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 2635 "datetimemodule.c"
        var $5=unSign(($4), 8, 0); //@line 2635 "datetimemodule.c"
        var $6=HEAP[$self_addr]; //@line 2635 "datetimemodule.c"
        var $7=(($6+13)&4294967295); //@line 2635 "datetimemodule.c"
        var $8=(($7+2)&4294967295); //@line 2635 "datetimemodule.c"
        var $9=HEAP[$8]; //@line 2635 "datetimemodule.c"
        var $10=unSign(($9), 8, 0); //@line 2635 "datetimemodule.c"
        var $11=HEAP[$self_addr]; //@line 2635 "datetimemodule.c"
        var $12=(($11+13)&4294967295); //@line 2635 "datetimemodule.c"
        var $13=(($12)&4294967295); //@line 2635 "datetimemodule.c"
        var $14=HEAP[$13]; //@line 2635 "datetimemodule.c"
        var $15=unSign(($14), 8, 0); //@line 2635 "datetimemodule.c"
        var $16=($15) << 8; //@line 2635 "datetimemodule.c"
        var $17=HEAP[$self_addr]; //@line 2635 "datetimemodule.c"
        var $18=(($17+13)&4294967295); //@line 2635 "datetimemodule.c"
        var $19=(($18+1)&4294967295); //@line 2635 "datetimemodule.c"
        var $20=HEAP[$19]; //@line 2635 "datetimemodule.c"
        var $21=unSign(($20), 8, 0); //@line 2635 "datetimemodule.c"
        var $22=($16) | ($21); //@line 2635 "datetimemodule.c"
        var $23=_build_struct_time($22, $10, $5, 0, 0, 0, -1); //@line 2635 "datetimemodule.c"
        HEAP[$0]=$23; //@line 2635 "datetimemodule.c"
        var $24=HEAP[$0]; //@line 2635 "datetimemodule.c"
        HEAP[$retval]=$24; //@line 2635 "datetimemodule.c"
        __label__ = 1; break; //@line 2635 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 2635 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 2635 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _date_replace($self, $args, $kw) {
    var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 40);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kw_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $clone=__stackBase__+20;
        var $tuple=__stackBase__+24;
        var $year=__stackBase__+28;
        var $month=__stackBase__+32;
        var $day=__stackBase__+36;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$kw_addr]=$kw;
        var $1=HEAP[$self_addr]; //@line 2646 "datetimemodule.c"
        var $2=(($1+13)&4294967295); //@line 2646 "datetimemodule.c"
        var $3=(($2)&4294967295); //@line 2646 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 2646 "datetimemodule.c"
        var $5=unSign(($4), 8, 0); //@line 2646 "datetimemodule.c"
        var $6=($5) << 8; //@line 2646 "datetimemodule.c"
        var $7=HEAP[$self_addr]; //@line 2646 "datetimemodule.c"
        var $8=(($7+13)&4294967295); //@line 2646 "datetimemodule.c"
        var $9=(($8+1)&4294967295); //@line 2646 "datetimemodule.c"
        var $10=HEAP[$9]; //@line 2646 "datetimemodule.c"
        var $11=unSign(($10), 8, 0); //@line 2646 "datetimemodule.c"
        var $12=($6) | ($11); //@line 2646 "datetimemodule.c"
        HEAP[$year]=$12; //@line 2646 "datetimemodule.c"
        var $13=HEAP[$self_addr]; //@line 2647 "datetimemodule.c"
        var $14=(($13+13)&4294967295); //@line 2647 "datetimemodule.c"
        var $15=(($14+2)&4294967295); //@line 2647 "datetimemodule.c"
        var $16=HEAP[$15]; //@line 2647 "datetimemodule.c"
        var $17=unSign(($16), 8, 0); //@line 2647 "datetimemodule.c"
        HEAP[$month]=$17; //@line 2647 "datetimemodule.c"
        var $18=HEAP[$self_addr]; //@line 2648 "datetimemodule.c"
        var $19=(($18+13)&4294967295); //@line 2648 "datetimemodule.c"
        var $20=(($19+3)&4294967295); //@line 2648 "datetimemodule.c"
        var $21=HEAP[$20]; //@line 2648 "datetimemodule.c"
        var $22=unSign(($21), 8, 0); //@line 2648 "datetimemodule.c"
        HEAP[$day]=$22; //@line 2648 "datetimemodule.c"
        var $23=HEAP[$args_addr]; //@line 2650 "datetimemodule.c"
        var $24=HEAP[$kw_addr]; //@line 2650 "datetimemodule.c"
        var $25=__PyArg_ParseTupleAndKeywords_SizeT($23, $24, ((__str152)&4294967295), ((_date_kws)&4294967295), $year, $month, $day); //@line 2650 "datetimemodule.c"
        var $26=((($25))|0)==0; //@line 2650 "datetimemodule.c"
        if ($26) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2650 "datetimemodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 2652 "datetimemodule.c"
        __label__ = 7; break; //@line 2652 "datetimemodule.c"
      case 2: // $bb1
        var $27=HEAP[$day]; //@line 2653 "datetimemodule.c"
        var $28=HEAP[$month]; //@line 2653 "datetimemodule.c"
        var $29=HEAP[$year]; //@line 2653 "datetimemodule.c"
        var $30=__Py_BuildValue_SizeT(((__str128)&4294967295), $29, $28, $27); //@line 2653 "datetimemodule.c"
        HEAP[$tuple]=$30; //@line 2653 "datetimemodule.c"
        var $31=HEAP[$tuple]; //@line 2654 "datetimemodule.c"
        var $32=($31)==0; //@line 2654 "datetimemodule.c"
        if ($32) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 2654 "datetimemodule.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 2655 "datetimemodule.c"
        __label__ = 7; break; //@line 2655 "datetimemodule.c"
      case 4: // $bb3
        var $33=HEAP[$self_addr]; //@line 2656 "datetimemodule.c"
        var $34=$33; //@line 2656 "datetimemodule.c"
        var $35=(($34+4)&4294967295); //@line 2656 "datetimemodule.c"
        var $36=HEAP[$35]; //@line 2656 "datetimemodule.c"
        var $37=HEAP[$tuple]; //@line 2656 "datetimemodule.c"
        var $38=_date_new($36, $37, 0); //@line 2656 "datetimemodule.c"
        HEAP[$clone]=$38; //@line 2656 "datetimemodule.c"
        var $39=HEAP[$tuple]; //@line 2657 "datetimemodule.c"
        var $40=(($39)&4294967295); //@line 2657 "datetimemodule.c"
        var $41=HEAP[$40]; //@line 2657 "datetimemodule.c"
        var $42=((($41) - 1)&4294967295); //@line 2657 "datetimemodule.c"
        var $43=HEAP[$tuple]; //@line 2657 "datetimemodule.c"
        var $44=(($43)&4294967295); //@line 2657 "datetimemodule.c"
        HEAP[$44]=$42; //@line 2657 "datetimemodule.c"
        var $45=HEAP[$tuple]; //@line 2657 "datetimemodule.c"
        var $46=(($45)&4294967295); //@line 2657 "datetimemodule.c"
        var $47=HEAP[$46]; //@line 2657 "datetimemodule.c"
        var $48=((($47))|0)==0; //@line 2657 "datetimemodule.c"
        if ($48) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 2657 "datetimemodule.c"
      case 5: // $bb4
        var $49=HEAP[$tuple]; //@line 2657 "datetimemodule.c"
        var $50=(($49+4)&4294967295); //@line 2657 "datetimemodule.c"
        var $51=HEAP[$50]; //@line 2657 "datetimemodule.c"
        var $52=(($51+24)&4294967295); //@line 2657 "datetimemodule.c"
        var $53=HEAP[$52]; //@line 2657 "datetimemodule.c"
        var $54=HEAP[$tuple]; //@line 2657 "datetimemodule.c"
        FUNCTION_TABLE[$53]($54); //@line 2657 "datetimemodule.c"
        __label__ = 6; break; //@line 2657 "datetimemodule.c"
      case 6: // $bb5
        var $55=HEAP[$clone]; //@line 2658 "datetimemodule.c"
        HEAP[$0]=$55; //@line 2658 "datetimemodule.c"
        __label__ = 7; break; //@line 2658 "datetimemodule.c"
      case 7: // $bb6
        var $56=HEAP[$0]; //@line 2652 "datetimemodule.c"
        HEAP[$retval]=$56; //@line 2652 "datetimemodule.c"
        __label__ = 8; break; //@line 2652 "datetimemodule.c"
      case 8: // $return
        var $retval7=HEAP[$retval]; //@line 2652 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 2652 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _date_hash($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $temp=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 2666 "datetimemodule.c"
        var $2=(($1+8)&4294967295); //@line 2666 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 2666 "datetimemodule.c"
        var $4=((($3))|0)==-1; //@line 2666 "datetimemodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 2666 "datetimemodule.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 2667 "datetimemodule.c"
        var $6=_date_getstate($5); //@line 2667 "datetimemodule.c"
        HEAP[$temp]=$6; //@line 2667 "datetimemodule.c"
        var $7=HEAP[$temp]; //@line 2668 "datetimemodule.c"
        var $8=($7)!=0; //@line 2668 "datetimemodule.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 2668 "datetimemodule.c"
      case 2: // $bb1
        var $9=HEAP[$temp]; //@line 2669 "datetimemodule.c"
        var $10=_PyObject_Hash($9); //@line 2669 "datetimemodule.c"
        var $11=HEAP[$self_addr]; //@line 2669 "datetimemodule.c"
        var $12=(($11+8)&4294967295); //@line 2669 "datetimemodule.c"
        HEAP[$12]=$10; //@line 2669 "datetimemodule.c"
        var $13=HEAP[$temp]; //@line 2670 "datetimemodule.c"
        var $14=(($13)&4294967295); //@line 2670 "datetimemodule.c"
        var $15=HEAP[$14]; //@line 2670 "datetimemodule.c"
        var $16=((($15) - 1)&4294967295); //@line 2670 "datetimemodule.c"
        var $17=HEAP[$temp]; //@line 2670 "datetimemodule.c"
        var $18=(($17)&4294967295); //@line 2670 "datetimemodule.c"
        HEAP[$18]=$16; //@line 2670 "datetimemodule.c"
        var $19=HEAP[$temp]; //@line 2670 "datetimemodule.c"
        var $20=(($19)&4294967295); //@line 2670 "datetimemodule.c"
        var $21=HEAP[$20]; //@line 2670 "datetimemodule.c"
        var $22=((($21))|0)==0; //@line 2670 "datetimemodule.c"
        if ($22) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 2670 "datetimemodule.c"
      case 3: // $bb2
        var $23=HEAP[$temp]; //@line 2670 "datetimemodule.c"
        var $24=(($23+4)&4294967295); //@line 2670 "datetimemodule.c"
        var $25=HEAP[$24]; //@line 2670 "datetimemodule.c"
        var $26=(($25+24)&4294967295); //@line 2670 "datetimemodule.c"
        var $27=HEAP[$26]; //@line 2670 "datetimemodule.c"
        var $28=HEAP[$temp]; //@line 2670 "datetimemodule.c"
        FUNCTION_TABLE[$27]($28); //@line 2670 "datetimemodule.c"
        __label__ = 4; break; //@line 2670 "datetimemodule.c"
      case 4: // $bb3
        var $29=HEAP[$self_addr]; //@line 2673 "datetimemodule.c"
        var $30=(($29+8)&4294967295); //@line 2673 "datetimemodule.c"
        var $31=HEAP[$30]; //@line 2673 "datetimemodule.c"
        HEAP[$0]=$31; //@line 2673 "datetimemodule.c"
        var $32=HEAP[$0]; //@line 2673 "datetimemodule.c"
        HEAP[$retval]=$32; //@line 2673 "datetimemodule.c"
        __label__ = 5; break; //@line 2673 "datetimemodule.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 2673 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 2673 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _date_toordinal($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 2679 "datetimemodule.c"
        var $2=(($1+13)&4294967295); //@line 2679 "datetimemodule.c"
        var $3=(($2+3)&4294967295); //@line 2679 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 2679 "datetimemodule.c"
        var $5=unSign(($4), 8, 0); //@line 2679 "datetimemodule.c"
        var $6=HEAP[$self_addr]; //@line 2679 "datetimemodule.c"
        var $7=(($6+13)&4294967295); //@line 2679 "datetimemodule.c"
        var $8=(($7+2)&4294967295); //@line 2679 "datetimemodule.c"
        var $9=HEAP[$8]; //@line 2679 "datetimemodule.c"
        var $10=unSign(($9), 8, 0); //@line 2679 "datetimemodule.c"
        var $11=HEAP[$self_addr]; //@line 2679 "datetimemodule.c"
        var $12=(($11+13)&4294967295); //@line 2679 "datetimemodule.c"
        var $13=(($12)&4294967295); //@line 2679 "datetimemodule.c"
        var $14=HEAP[$13]; //@line 2679 "datetimemodule.c"
        var $15=unSign(($14), 8, 0); //@line 2679 "datetimemodule.c"
        var $16=($15) << 8; //@line 2679 "datetimemodule.c"
        var $17=HEAP[$self_addr]; //@line 2679 "datetimemodule.c"
        var $18=(($17+13)&4294967295); //@line 2679 "datetimemodule.c"
        var $19=(($18+1)&4294967295); //@line 2679 "datetimemodule.c"
        var $20=HEAP[$19]; //@line 2679 "datetimemodule.c"
        var $21=unSign(($20), 8, 0); //@line 2679 "datetimemodule.c"
        var $22=($16) | ($21); //@line 2679 "datetimemodule.c"
        var $23=_ymd_to_ord($22, $10, $5); //@line 2679 "datetimemodule.c"
        var $24=_PyInt_FromLong($23); //@line 2679 "datetimemodule.c"
        HEAP[$0]=$24; //@line 2679 "datetimemodule.c"
        var $25=HEAP[$0]; //@line 2679 "datetimemodule.c"
        HEAP[$retval]=$25; //@line 2679 "datetimemodule.c"
        __label__ = 1; break; //@line 2679 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 2679 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 2679 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _date_weekday($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $dow=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 2686 "datetimemodule.c"
        var $2=(($1+13)&4294967295); //@line 2686 "datetimemodule.c"
        var $3=(($2+3)&4294967295); //@line 2686 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 2686 "datetimemodule.c"
        var $5=unSign(($4), 8, 0); //@line 2686 "datetimemodule.c"
        var $6=HEAP[$self_addr]; //@line 2686 "datetimemodule.c"
        var $7=(($6+13)&4294967295); //@line 2686 "datetimemodule.c"
        var $8=(($7+2)&4294967295); //@line 2686 "datetimemodule.c"
        var $9=HEAP[$8]; //@line 2686 "datetimemodule.c"
        var $10=unSign(($9), 8, 0); //@line 2686 "datetimemodule.c"
        var $11=HEAP[$self_addr]; //@line 2686 "datetimemodule.c"
        var $12=(($11+13)&4294967295); //@line 2686 "datetimemodule.c"
        var $13=(($12)&4294967295); //@line 2686 "datetimemodule.c"
        var $14=HEAP[$13]; //@line 2686 "datetimemodule.c"
        var $15=unSign(($14), 8, 0); //@line 2686 "datetimemodule.c"
        var $16=($15) << 8; //@line 2686 "datetimemodule.c"
        var $17=HEAP[$self_addr]; //@line 2686 "datetimemodule.c"
        var $18=(($17+13)&4294967295); //@line 2686 "datetimemodule.c"
        var $19=(($18+1)&4294967295); //@line 2686 "datetimemodule.c"
        var $20=HEAP[$19]; //@line 2686 "datetimemodule.c"
        var $21=unSign(($20), 8, 0); //@line 2686 "datetimemodule.c"
        var $22=($16) | ($21); //@line 2686 "datetimemodule.c"
        var $23=_weekday($22, $10, $5); //@line 2686 "datetimemodule.c"
        HEAP[$dow]=$23; //@line 2686 "datetimemodule.c"
        var $24=HEAP[$dow]; //@line 2688 "datetimemodule.c"
        var $25=_PyInt_FromLong($24); //@line 2688 "datetimemodule.c"
        HEAP[$0]=$25; //@line 2688 "datetimemodule.c"
        var $26=HEAP[$0]; //@line 2688 "datetimemodule.c"
        HEAP[$retval]=$26; //@line 2688 "datetimemodule.c"
        __label__ = 1; break; //@line 2688 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 2688 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 2688 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _date_getstate($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 2697 "datetimemodule.c"
        var $2=(($1+13)&4294967295); //@line 2697 "datetimemodule.c"
        var $3=$2; //@line 2697 "datetimemodule.c"
        var $4=_PyString_FromStringAndSize($3, 4); //@line 2697 "datetimemodule.c"
        var $5=__Py_BuildValue_SizeT(((__str153)&4294967295), $4); //@line 2697 "datetimemodule.c"
        HEAP[$0]=$5; //@line 2697 "datetimemodule.c"
        var $6=HEAP[$0]; //@line 2697 "datetimemodule.c"
        HEAP[$retval]=$6; //@line 2697 "datetimemodule.c"
        __label__ = 1; break; //@line 2697 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 2697 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 2697 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _date_reduce($self, $arg) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $arg_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$arg_addr]=$arg;
        var $1=HEAP[$self_addr]; //@line 2706 "datetimemodule.c"
        var $2=_date_getstate($1); //@line 2706 "datetimemodule.c"
        var $3=HEAP[$self_addr]; //@line 2706 "datetimemodule.c"
        var $4=$3; //@line 2706 "datetimemodule.c"
        var $5=(($4+4)&4294967295); //@line 2706 "datetimemodule.c"
        var $6=HEAP[$5]; //@line 2706 "datetimemodule.c"
        var $7=__Py_BuildValue_SizeT(((__str154)&4294967295), $6, $2); //@line 2706 "datetimemodule.c"
        HEAP[$0]=$7; //@line 2706 "datetimemodule.c"
        var $8=HEAP[$0]; //@line 2706 "datetimemodule.c"
        HEAP[$retval]=$8; //@line 2706 "datetimemodule.c"
        __label__ = 1; break; //@line 2706 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 2706 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 2706 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _tzinfo_nogo($methodname) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $methodname_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$methodname_addr]=$methodname;
        var $1=HEAP[_PyExc_NotImplementedError]; //@line 2849 "datetimemodule.c"
        var $2=HEAP[$methodname_addr]; //@line 2849 "datetimemodule.c"
        var $3=_PyErr_Format($1, ((__str177)&4294967295), $2); //@line 2849 "datetimemodule.c"
        HEAP[$0]=0; //@line 2852 "datetimemodule.c"
        var $4=HEAP[$0]; //@line 2852 "datetimemodule.c"
        HEAP[$retval]=$4; //@line 2852 "datetimemodule.c"
        __label__ = 1; break; //@line 2852 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 2852 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 2852 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _tzinfo_tzname($self, $dt) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $dt_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$dt_addr]=$dt;
        var $1=_tzinfo_nogo(((__str45)&4294967295)); //@line 2860 "datetimemodule.c"
        HEAP[$0]=$1; //@line 2860 "datetimemodule.c"
        var $2=HEAP[$0]; //@line 2860 "datetimemodule.c"
        HEAP[$retval]=$2; //@line 2860 "datetimemodule.c"
        __label__ = 1; break; //@line 2860 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 2860 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 2860 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _tzinfo_utcoffset($self, $dt) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $dt_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$dt_addr]=$dt;
        var $1=_tzinfo_nogo(((__str42)&4294967295)); //@line 2866 "datetimemodule.c"
        HEAP[$0]=$1; //@line 2866 "datetimemodule.c"
        var $2=HEAP[$0]; //@line 2866 "datetimemodule.c"
        HEAP[$retval]=$2; //@line 2866 "datetimemodule.c"
        __label__ = 1; break; //@line 2866 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 2866 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 2866 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _tzinfo_dst($self, $dt) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $dt_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$dt_addr]=$dt;
        var $1=_tzinfo_nogo(((__str44)&4294967295)); //@line 2872 "datetimemodule.c"
        HEAP[$0]=$1; //@line 2872 "datetimemodule.c"
        var $2=HEAP[$0]; //@line 2872 "datetimemodule.c"
        HEAP[$retval]=$2; //@line 2872 "datetimemodule.c"
        __label__ = 1; break; //@line 2872 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 2872 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 2872 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _tzinfo_fromutc($self, $dt) {
    var __stackBase__  = STACKTOP; STACKTOP += 64; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 64);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $dt_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $y=__stackBase__+16;
        var $m=__stackBase__+20;
        var $d=__stackBase__+24;
        var $hh=__stackBase__+28;
        var $mm=__stackBase__+32;
        var $ss=__stackBase__+36;
        var $us=__stackBase__+40;
        var $result=__stackBase__+44;
        var $off=__stackBase__+48;
        var $dst=__stackBase__+52;
        var $none=__stackBase__+56;
        var $delta=__stackBase__+60;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$dt_addr]=$dt;
        var $1=HEAP[$dt_addr]; //@line 2885 "datetimemodule.c"
        var $2=$1; //@line 2885 "datetimemodule.c"
        var $3=(($2+4)&4294967295); //@line 2885 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 2885 "datetimemodule.c"
        var $5=($4)!=(_PyDateTime_DateTimeType); //@line 2885 "datetimemodule.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 2885 "datetimemodule.c"
      case 1: // $bb
        var $6=HEAP[$dt_addr]; //@line 2885 "datetimemodule.c"
        var $7=$6; //@line 2885 "datetimemodule.c"
        var $8=(($7+4)&4294967295); //@line 2885 "datetimemodule.c"
        var $9=HEAP[$8]; //@line 2885 "datetimemodule.c"
        var $10=_PyType_IsSubtype($9, _PyDateTime_DateTimeType); //@line 2885 "datetimemodule.c"
        var $11=((($10))|0)==0; //@line 2885 "datetimemodule.c"
        if ($11) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2885 "datetimemodule.c"
      case 2: // $bb1
        var $12=HEAP[_PyExc_TypeError]; //@line 2886 "datetimemodule.c"
        _PyErr_SetString($12, ((__str178)&4294967295)); //@line 2886 "datetimemodule.c"
        HEAP[$0]=0; //@line 2888 "datetimemodule.c"
        __label__ = 37; break; //@line 2888 "datetimemodule.c"
      case 3: // $bb2
        var $13=HEAP[$dt_addr]; //@line 2890 "datetimemodule.c"
        var $14=$13; //@line 2890 "datetimemodule.c"
        var $15=(($14+12)&4294967295); //@line 2890 "datetimemodule.c"
        var $16=HEAP[$15]; //@line 2890 "datetimemodule.c"
        var $17=reSign(($16), 8, 0)==0; //@line 2890 "datetimemodule.c"
        if ($17) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 2890 "datetimemodule.c"
      case 4: // $bb3
        var $18=HEAP[$dt_addr]; //@line 2890 "datetimemodule.c"
        var $19=(($18+24)&4294967295); //@line 2890 "datetimemodule.c"
        var $20=HEAP[$19]; //@line 2890 "datetimemodule.c"
        var $21=HEAP[$self_addr]; //@line 2890 "datetimemodule.c"
        var $22=($20)!=($21); //@line 2890 "datetimemodule.c"
        if ($22) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 2890 "datetimemodule.c"
      case 5: // $bb4
        var $23=HEAP[_PyExc_ValueError]; //@line 2891 "datetimemodule.c"
        _PyErr_SetString($23, ((__str179)&4294967295)); //@line 2891 "datetimemodule.c"
        HEAP[$0]=0; //@line 2893 "datetimemodule.c"
        __label__ = 37; break; //@line 2893 "datetimemodule.c"
      case 6: // $bb5
        var $24=HEAP[$dt_addr]; //@line 2896 "datetimemodule.c"
        var $25=$24; //@line 2896 "datetimemodule.c"
        var $26=HEAP[$dt_addr]; //@line 2896 "datetimemodule.c"
        var $27=(($26+24)&4294967295); //@line 2896 "datetimemodule.c"
        var $28=HEAP[$27]; //@line 2896 "datetimemodule.c"
        var $29=_call_utcoffset($28, $25, $none); //@line 2896 "datetimemodule.c"
        HEAP[$off]=$29; //@line 2896 "datetimemodule.c"
        var $30=HEAP[$off]; //@line 2897 "datetimemodule.c"
        var $31=((($30))|0)==-1; //@line 2897 "datetimemodule.c"
        if ($31) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 2897 "datetimemodule.c"
      case 7: // $bb6
        var $32=_PyErr_Occurred(); //@line 2897 "datetimemodule.c"
        var $33=($32)!=0; //@line 2897 "datetimemodule.c"
        if ($33) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 2897 "datetimemodule.c"
      case 8: // $bb7
        HEAP[$0]=0; //@line 2898 "datetimemodule.c"
        __label__ = 37; break; //@line 2898 "datetimemodule.c"
      case 9: // $bb8
        var $34=HEAP[$none]; //@line 2899 "datetimemodule.c"
        var $35=((($34))|0)!=0; //@line 2899 "datetimemodule.c"
        if ($35) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 2899 "datetimemodule.c"
      case 10: // $bb9
        var $36=HEAP[_PyExc_ValueError]; //@line 2900 "datetimemodule.c"
        _PyErr_SetString($36, ((__str180)&4294967295)); //@line 2900 "datetimemodule.c"
        HEAP[$0]=0; //@line 2902 "datetimemodule.c"
        __label__ = 37; break; //@line 2902 "datetimemodule.c"
      case 11: // $bb10
        var $37=HEAP[$dt_addr]; //@line 2905 "datetimemodule.c"
        var $38=$37; //@line 2905 "datetimemodule.c"
        var $39=HEAP[$dt_addr]; //@line 2905 "datetimemodule.c"
        var $40=(($39+24)&4294967295); //@line 2905 "datetimemodule.c"
        var $41=HEAP[$40]; //@line 2905 "datetimemodule.c"
        var $42=_call_dst($41, $38, $none); //@line 2905 "datetimemodule.c"
        HEAP[$dst]=$42; //@line 2905 "datetimemodule.c"
        var $43=HEAP[$dst]; //@line 2906 "datetimemodule.c"
        var $44=((($43))|0)==-1; //@line 2906 "datetimemodule.c"
        if ($44) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 2906 "datetimemodule.c"
      case 12: // $bb11
        var $45=_PyErr_Occurred(); //@line 2906 "datetimemodule.c"
        var $46=($45)!=0; //@line 2906 "datetimemodule.c"
        if ($46) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 2906 "datetimemodule.c"
      case 13: // $bb12
        HEAP[$0]=0; //@line 2907 "datetimemodule.c"
        __label__ = 37; break; //@line 2907 "datetimemodule.c"
      case 14: // $bb13
        var $47=HEAP[$none]; //@line 2908 "datetimemodule.c"
        var $48=((($47))|0)!=0; //@line 2908 "datetimemodule.c"
        if ($48) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 2908 "datetimemodule.c"
      case 15: // $bb14
        var $49=HEAP[_PyExc_ValueError]; //@line 2909 "datetimemodule.c"
        _PyErr_SetString($49, ((__str181)&4294967295)); //@line 2909 "datetimemodule.c"
        HEAP[$0]=0; //@line 2911 "datetimemodule.c"
        __label__ = 37; break; //@line 2911 "datetimemodule.c"
      case 16: // $bb15
        var $50=HEAP[$dt_addr]; //@line 2914 "datetimemodule.c"
        var $51=$50; //@line 2914 "datetimemodule.c"
        var $52=(($51+13)&4294967295); //@line 2914 "datetimemodule.c"
        var $53=(($52)&4294967295); //@line 2914 "datetimemodule.c"
        var $54=HEAP[$53]; //@line 2914 "datetimemodule.c"
        var $55=unSign(($54), 8, 0); //@line 2914 "datetimemodule.c"
        var $56=($55) << 8; //@line 2914 "datetimemodule.c"
        var $57=HEAP[$dt_addr]; //@line 2914 "datetimemodule.c"
        var $58=$57; //@line 2914 "datetimemodule.c"
        var $59=(($58+13)&4294967295); //@line 2914 "datetimemodule.c"
        var $60=(($59+1)&4294967295); //@line 2914 "datetimemodule.c"
        var $61=HEAP[$60]; //@line 2914 "datetimemodule.c"
        var $62=unSign(($61), 8, 0); //@line 2914 "datetimemodule.c"
        var $63=($56) | ($62); //@line 2914 "datetimemodule.c"
        HEAP[$y]=$63; //@line 2914 "datetimemodule.c"
        var $64=HEAP[$dt_addr]; //@line 2915 "datetimemodule.c"
        var $65=$64; //@line 2915 "datetimemodule.c"
        var $66=(($65+13)&4294967295); //@line 2915 "datetimemodule.c"
        var $67=(($66+2)&4294967295); //@line 2915 "datetimemodule.c"
        var $68=HEAP[$67]; //@line 2915 "datetimemodule.c"
        var $69=unSign(($68), 8, 0); //@line 2915 "datetimemodule.c"
        HEAP[$m]=$69; //@line 2915 "datetimemodule.c"
        var $70=HEAP[$dt_addr]; //@line 2916 "datetimemodule.c"
        var $71=$70; //@line 2916 "datetimemodule.c"
        var $72=(($71+13)&4294967295); //@line 2916 "datetimemodule.c"
        var $73=(($72+3)&4294967295); //@line 2916 "datetimemodule.c"
        var $74=HEAP[$73]; //@line 2916 "datetimemodule.c"
        var $75=unSign(($74), 8, 0); //@line 2916 "datetimemodule.c"
        HEAP[$d]=$75; //@line 2916 "datetimemodule.c"
        var $76=HEAP[$dt_addr]; //@line 2917 "datetimemodule.c"
        var $77=(($76+13)&4294967295); //@line 2917 "datetimemodule.c"
        var $78=(($77+4)&4294967295); //@line 2917 "datetimemodule.c"
        var $79=HEAP[$78]; //@line 2917 "datetimemodule.c"
        var $80=unSign(($79), 8, 0); //@line 2917 "datetimemodule.c"
        HEAP[$hh]=$80; //@line 2917 "datetimemodule.c"
        var $81=HEAP[$dt_addr]; //@line 2918 "datetimemodule.c"
        var $82=(($81+13)&4294967295); //@line 2918 "datetimemodule.c"
        var $83=(($82+5)&4294967295); //@line 2918 "datetimemodule.c"
        var $84=HEAP[$83]; //@line 2918 "datetimemodule.c"
        var $85=unSign(($84), 8, 0); //@line 2918 "datetimemodule.c"
        HEAP[$mm]=$85; //@line 2918 "datetimemodule.c"
        var $86=HEAP[$dt_addr]; //@line 2919 "datetimemodule.c"
        var $87=(($86+13)&4294967295); //@line 2919 "datetimemodule.c"
        var $88=(($87+6)&4294967295); //@line 2919 "datetimemodule.c"
        var $89=HEAP[$88]; //@line 2919 "datetimemodule.c"
        var $90=unSign(($89), 8, 0); //@line 2919 "datetimemodule.c"
        HEAP[$ss]=$90; //@line 2919 "datetimemodule.c"
        var $91=HEAP[$dt_addr]; //@line 2920 "datetimemodule.c"
        var $92=(($91+13)&4294967295); //@line 2920 "datetimemodule.c"
        var $93=(($92+7)&4294967295); //@line 2920 "datetimemodule.c"
        var $94=HEAP[$93]; //@line 2920 "datetimemodule.c"
        var $95=unSign(($94), 8, 0); //@line 2920 "datetimemodule.c"
        var $96=($95) << 16; //@line 2920 "datetimemodule.c"
        var $97=HEAP[$dt_addr]; //@line 2920 "datetimemodule.c"
        var $98=(($97+13)&4294967295); //@line 2920 "datetimemodule.c"
        var $99=(($98+8)&4294967295); //@line 2920 "datetimemodule.c"
        var $100=HEAP[$99]; //@line 2920 "datetimemodule.c"
        var $101=unSign(($100), 8, 0); //@line 2920 "datetimemodule.c"
        var $102=($101) << 8; //@line 2920 "datetimemodule.c"
        var $103=($96) | ($102); //@line 2920 "datetimemodule.c"
        var $104=HEAP[$dt_addr]; //@line 2920 "datetimemodule.c"
        var $105=(($104+13)&4294967295); //@line 2920 "datetimemodule.c"
        var $106=(($105+9)&4294967295); //@line 2920 "datetimemodule.c"
        var $107=HEAP[$106]; //@line 2920 "datetimemodule.c"
        var $108=unSign(($107), 8, 0); //@line 2920 "datetimemodule.c"
        var $109=($103) | ($108); //@line 2920 "datetimemodule.c"
        HEAP[$us]=$109; //@line 2920 "datetimemodule.c"
        var $110=HEAP[$off]; //@line 2922 "datetimemodule.c"
        var $111=HEAP[$dst]; //@line 2922 "datetimemodule.c"
        var $112=((($110) - ($111))&4294967295); //@line 2922 "datetimemodule.c"
        HEAP[$delta]=$112; //@line 2922 "datetimemodule.c"
        var $113=HEAP[$mm]; //@line 2923 "datetimemodule.c"
        var $114=HEAP[$delta]; //@line 2923 "datetimemodule.c"
        var $115=((($113) + ($114))&4294967295); //@line 2923 "datetimemodule.c"
        HEAP[$mm]=$115; //@line 2923 "datetimemodule.c"
        var $116=HEAP[$mm]; //@line 2924 "datetimemodule.c"
        var $117=((($116))|0) < 0; //@line 2924 "datetimemodule.c"
        if ($117) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 2924 "datetimemodule.c"
      case 17: // $bb16
        var $118=HEAP[$mm]; //@line 2924 "datetimemodule.c"
        var $119=((($118))|0) > 59; //@line 2924 "datetimemodule.c"
        if ($119) { __label__ = 18; break; } else { __label__ = 20; break; } //@line 2924 "datetimemodule.c"
      case 18: // $bb17
        var $120=_normalize_datetime($y, $m, $d, $hh, $mm, $ss, $us); //@line 2924 "datetimemodule.c"
        var $121=((($120))|0) < 0; //@line 2924 "datetimemodule.c"
        if ($121) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 2924 "datetimemodule.c"
      case 19: // $bb18
        HEAP[$0]=0; //@line 2926 "datetimemodule.c"
        __label__ = 37; break; //@line 2926 "datetimemodule.c"
      case 20: // $bb19
        var $122=HEAP[$dt_addr]; //@line 2927 "datetimemodule.c"
        var $123=(($122+24)&4294967295); //@line 2927 "datetimemodule.c"
        var $124=HEAP[$123]; //@line 2927 "datetimemodule.c"
        var $125=HEAP[$us]; //@line 2927 "datetimemodule.c"
        var $126=HEAP[$ss]; //@line 2927 "datetimemodule.c"
        var $127=HEAP[$mm]; //@line 2927 "datetimemodule.c"
        var $128=HEAP[$hh]; //@line 2927 "datetimemodule.c"
        var $129=HEAP[$d]; //@line 2927 "datetimemodule.c"
        var $130=HEAP[$m]; //@line 2927 "datetimemodule.c"
        var $131=HEAP[$y]; //@line 2927 "datetimemodule.c"
        var $132=_new_datetime_ex($131, $130, $129, $128, $127, $126, $125, $124, _PyDateTime_DateTimeType); //@line 2927 "datetimemodule.c"
        HEAP[$result]=$132; //@line 2927 "datetimemodule.c"
        var $133=HEAP[$result]; //@line 2928 "datetimemodule.c"
        var $134=($133)==0; //@line 2928 "datetimemodule.c"
        if ($134) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 2928 "datetimemodule.c"
      case 21: // $bb20
        var $135=HEAP[$result]; //@line 2929 "datetimemodule.c"
        HEAP[$0]=$135; //@line 2929 "datetimemodule.c"
        __label__ = 37; break; //@line 2929 "datetimemodule.c"
      case 22: // $bb21
        var $136=HEAP[$dt_addr]; //@line 2931 "datetimemodule.c"
        var $137=(($136+24)&4294967295); //@line 2931 "datetimemodule.c"
        var $138=HEAP[$137]; //@line 2931 "datetimemodule.c"
        var $139=HEAP[$result]; //@line 2931 "datetimemodule.c"
        var $140=_call_dst($138, $139, $none); //@line 2931 "datetimemodule.c"
        HEAP[$dst]=$140; //@line 2931 "datetimemodule.c"
        var $141=HEAP[$dst]; //@line 2932 "datetimemodule.c"
        var $142=((($141))|0)==-1; //@line 2932 "datetimemodule.c"
        if ($142) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 2932 "datetimemodule.c"
      case 23: // $bb22
        var $143=_PyErr_Occurred(); //@line 2932 "datetimemodule.c"
        var $144=($143)!=0; //@line 2932 "datetimemodule.c"
        if ($144) { __label__ = 34; break; } else { __label__ = 24; break; } //@line 2932 "datetimemodule.c"
      case 24: // $bb23
        var $145=HEAP[$none]; //@line 2934 "datetimemodule.c"
        var $146=((($145))|0)!=0; //@line 2934 "datetimemodule.c"
        if ($146) { __label__ = 33; break; } else { __label__ = 25; break; } //@line 2934 "datetimemodule.c"
      case 25: // $bb24
        var $147=HEAP[$dst]; //@line 2936 "datetimemodule.c"
        var $148=((($147))|0)==0; //@line 2936 "datetimemodule.c"
        if ($148) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 2936 "datetimemodule.c"
      case 26: // $bb25
        var $149=HEAP[$result]; //@line 2937 "datetimemodule.c"
        HEAP[$0]=$149; //@line 2937 "datetimemodule.c"
        __label__ = 37; break; //@line 2937 "datetimemodule.c"
      case 27: // $bb26
        var $150=HEAP[$mm]; //@line 2939 "datetimemodule.c"
        var $151=HEAP[$dst]; //@line 2939 "datetimemodule.c"
        var $152=((($150) + ($151))&4294967295); //@line 2939 "datetimemodule.c"
        HEAP[$mm]=$152; //@line 2939 "datetimemodule.c"
        var $153=HEAP[$mm]; //@line 2940 "datetimemodule.c"
        var $154=((($153))|0) < 0; //@line 2940 "datetimemodule.c"
        if ($154) { __label__ = 29; break; } else { __label__ = 28; break; } //@line 2940 "datetimemodule.c"
      case 28: // $bb27
        var $155=HEAP[$mm]; //@line 2940 "datetimemodule.c"
        var $156=((($155))|0) > 59; //@line 2940 "datetimemodule.c"
        if ($156) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 2940 "datetimemodule.c"
      case 29: // $bb28
        var $157=_normalize_datetime($y, $m, $d, $hh, $mm, $ss, $us); //@line 2940 "datetimemodule.c"
        var $158=((($157))|0) < 0; //@line 2940 "datetimemodule.c"
        if ($158) { __label__ = 34; break; } else { __label__ = 30; break; } //@line 2940 "datetimemodule.c"
      case 30: // $bb29
        var $159=HEAP[$result]; //@line 2943 "datetimemodule.c"
        var $160=(($159)&4294967295); //@line 2943 "datetimemodule.c"
        var $161=HEAP[$160]; //@line 2943 "datetimemodule.c"
        var $162=((($161) - 1)&4294967295); //@line 2943 "datetimemodule.c"
        var $163=HEAP[$result]; //@line 2943 "datetimemodule.c"
        var $164=(($163)&4294967295); //@line 2943 "datetimemodule.c"
        HEAP[$164]=$162; //@line 2943 "datetimemodule.c"
        var $165=HEAP[$result]; //@line 2943 "datetimemodule.c"
        var $166=(($165)&4294967295); //@line 2943 "datetimemodule.c"
        var $167=HEAP[$166]; //@line 2943 "datetimemodule.c"
        var $168=((($167))|0)==0; //@line 2943 "datetimemodule.c"
        if ($168) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 2943 "datetimemodule.c"
      case 31: // $bb30
        var $169=HEAP[$result]; //@line 2943 "datetimemodule.c"
        var $170=(($169+4)&4294967295); //@line 2943 "datetimemodule.c"
        var $171=HEAP[$170]; //@line 2943 "datetimemodule.c"
        var $172=(($171+24)&4294967295); //@line 2943 "datetimemodule.c"
        var $173=HEAP[$172]; //@line 2943 "datetimemodule.c"
        var $174=HEAP[$result]; //@line 2943 "datetimemodule.c"
        FUNCTION_TABLE[$173]($174); //@line 2943 "datetimemodule.c"
        __label__ = 32; break; //@line 2943 "datetimemodule.c"
      case 32: // $bb31
        var $175=HEAP[$dt_addr]; //@line 2944 "datetimemodule.c"
        var $176=(($175+24)&4294967295); //@line 2944 "datetimemodule.c"
        var $177=HEAP[$176]; //@line 2944 "datetimemodule.c"
        var $178=HEAP[$us]; //@line 2944 "datetimemodule.c"
        var $179=HEAP[$ss]; //@line 2944 "datetimemodule.c"
        var $180=HEAP[$mm]; //@line 2944 "datetimemodule.c"
        var $181=HEAP[$hh]; //@line 2944 "datetimemodule.c"
        var $182=HEAP[$d]; //@line 2944 "datetimemodule.c"
        var $183=HEAP[$m]; //@line 2944 "datetimemodule.c"
        var $184=HEAP[$y]; //@line 2944 "datetimemodule.c"
        var $185=_new_datetime_ex($184, $183, $182, $181, $180, $179, $178, $177, _PyDateTime_DateTimeType); //@line 2944 "datetimemodule.c"
        HEAP[$result]=$185; //@line 2944 "datetimemodule.c"
        var $186=HEAP[$result]; //@line 2945 "datetimemodule.c"
        HEAP[$0]=$186; //@line 2945 "datetimemodule.c"
        __label__ = 37; break; //@line 2945 "datetimemodule.c"
      case 33: // $Inconsistent
        var $187=HEAP[_PyExc_ValueError]; //@line 2948 "datetimemodule.c"
        _PyErr_SetString($187, ((__str182)&4294967295)); //@line 2948 "datetimemodule.c"
        __label__ = 34; break; //@line 2952 "datetimemodule.c"
      case 34: // $Fail
        var $188=HEAP[$result]; //@line 2953 "datetimemodule.c"
        var $189=(($188)&4294967295); //@line 2953 "datetimemodule.c"
        var $190=HEAP[$189]; //@line 2953 "datetimemodule.c"
        var $191=((($190) - 1)&4294967295); //@line 2953 "datetimemodule.c"
        var $192=HEAP[$result]; //@line 2953 "datetimemodule.c"
        var $193=(($192)&4294967295); //@line 2953 "datetimemodule.c"
        HEAP[$193]=$191; //@line 2953 "datetimemodule.c"
        var $194=HEAP[$result]; //@line 2953 "datetimemodule.c"
        var $195=(($194)&4294967295); //@line 2953 "datetimemodule.c"
        var $196=HEAP[$195]; //@line 2953 "datetimemodule.c"
        var $197=((($196))|0)==0; //@line 2953 "datetimemodule.c"
        if ($197) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 2953 "datetimemodule.c"
      case 35: // $bb32
        var $198=HEAP[$result]; //@line 2953 "datetimemodule.c"
        var $199=(($198+4)&4294967295); //@line 2953 "datetimemodule.c"
        var $200=HEAP[$199]; //@line 2953 "datetimemodule.c"
        var $201=(($200+24)&4294967295); //@line 2953 "datetimemodule.c"
        var $202=HEAP[$201]; //@line 2953 "datetimemodule.c"
        var $203=HEAP[$result]; //@line 2953 "datetimemodule.c"
        FUNCTION_TABLE[$202]($203); //@line 2953 "datetimemodule.c"
        __label__ = 36; break; //@line 2953 "datetimemodule.c"
      case 36: // $bb33
        HEAP[$0]=0; //@line 2954 "datetimemodule.c"
        __label__ = 37; break; //@line 2954 "datetimemodule.c"
      case 37: // $bb34
        var $204=HEAP[$0]; //@line 2888 "datetimemodule.c"
        HEAP[$retval]=$204; //@line 2888 "datetimemodule.c"
        __label__ = 38; break; //@line 2888 "datetimemodule.c"
      case 38: // $return
        var $retval35=HEAP[$retval]; //@line 2888 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval35; //@line 2888 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _tzinfo_reduce($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $args=__stackBase__+12;
        var $state=__stackBase__+16;
        var $tmp=__stackBase__+20;
        var $getinitargs=__stackBase__+24;
        var $getstate=__stackBase__+28;
        var $dictptr=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=_PyTuple_New(0); //@line 2968 "datetimemodule.c"
        HEAP[$tmp]=$1; //@line 2968 "datetimemodule.c"
        var $2=HEAP[$tmp]; //@line 2969 "datetimemodule.c"
        var $3=($2)==0; //@line 2969 "datetimemodule.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2969 "datetimemodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 2970 "datetimemodule.c"
        __label__ = 33; break; //@line 2970 "datetimemodule.c"
      case 2: // $bb1
        var $4=HEAP[$self_addr]; //@line 2972 "datetimemodule.c"
        var $5=_PyObject_GetAttrString($4, ((__str183)&4294967295)); //@line 2972 "datetimemodule.c"
        HEAP[$getinitargs]=$5; //@line 2972 "datetimemodule.c"
        var $6=HEAP[$getinitargs]; //@line 2973 "datetimemodule.c"
        var $7=($6)!=0; //@line 2973 "datetimemodule.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 10; break; } //@line 2973 "datetimemodule.c"
      case 3: // $bb2
        var $8=HEAP[$getinitargs]; //@line 2974 "datetimemodule.c"
        var $9=HEAP[$tmp]; //@line 2974 "datetimemodule.c"
        var $10=_PyObject_CallObject($8, $9); //@line 2974 "datetimemodule.c"
        HEAP[$args]=$10; //@line 2974 "datetimemodule.c"
        var $11=HEAP[$getinitargs]; //@line 2975 "datetimemodule.c"
        var $12=(($11)&4294967295); //@line 2975 "datetimemodule.c"
        var $13=HEAP[$12]; //@line 2975 "datetimemodule.c"
        var $14=((($13) - 1)&4294967295); //@line 2975 "datetimemodule.c"
        var $15=HEAP[$getinitargs]; //@line 2975 "datetimemodule.c"
        var $16=(($15)&4294967295); //@line 2975 "datetimemodule.c"
        HEAP[$16]=$14; //@line 2975 "datetimemodule.c"
        var $17=HEAP[$getinitargs]; //@line 2975 "datetimemodule.c"
        var $18=(($17)&4294967295); //@line 2975 "datetimemodule.c"
        var $19=HEAP[$18]; //@line 2975 "datetimemodule.c"
        var $20=((($19))|0)==0; //@line 2975 "datetimemodule.c"
        if ($20) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 2975 "datetimemodule.c"
      case 4: // $bb3
        var $21=HEAP[$getinitargs]; //@line 2975 "datetimemodule.c"
        var $22=(($21+4)&4294967295); //@line 2975 "datetimemodule.c"
        var $23=HEAP[$22]; //@line 2975 "datetimemodule.c"
        var $24=(($23+24)&4294967295); //@line 2975 "datetimemodule.c"
        var $25=HEAP[$24]; //@line 2975 "datetimemodule.c"
        var $26=HEAP[$getinitargs]; //@line 2975 "datetimemodule.c"
        FUNCTION_TABLE[$25]($26); //@line 2975 "datetimemodule.c"
        __label__ = 5; break; //@line 2975 "datetimemodule.c"
      case 5: // $bb4
        var $27=HEAP[$args]; //@line 2976 "datetimemodule.c"
        var $28=($27)==0; //@line 2976 "datetimemodule.c"
        if ($28) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 2976 "datetimemodule.c"
      case 6: // $bb5
        var $29=HEAP[$tmp]; //@line 2977 "datetimemodule.c"
        var $30=(($29)&4294967295); //@line 2977 "datetimemodule.c"
        var $31=HEAP[$30]; //@line 2977 "datetimemodule.c"
        var $32=((($31) - 1)&4294967295); //@line 2977 "datetimemodule.c"
        var $33=HEAP[$tmp]; //@line 2977 "datetimemodule.c"
        var $34=(($33)&4294967295); //@line 2977 "datetimemodule.c"
        HEAP[$34]=$32; //@line 2977 "datetimemodule.c"
        var $35=HEAP[$tmp]; //@line 2977 "datetimemodule.c"
        var $36=(($35)&4294967295); //@line 2977 "datetimemodule.c"
        var $37=HEAP[$36]; //@line 2977 "datetimemodule.c"
        var $38=((($37))|0)==0; //@line 2977 "datetimemodule.c"
        if ($38) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 2977 "datetimemodule.c"
      case 7: // $bb6
        var $39=HEAP[$tmp]; //@line 2977 "datetimemodule.c"
        var $40=(($39+4)&4294967295); //@line 2977 "datetimemodule.c"
        var $41=HEAP[$40]; //@line 2977 "datetimemodule.c"
        var $42=(($41+24)&4294967295); //@line 2977 "datetimemodule.c"
        var $43=HEAP[$42]; //@line 2977 "datetimemodule.c"
        var $44=HEAP[$tmp]; //@line 2977 "datetimemodule.c"
        FUNCTION_TABLE[$43]($44); //@line 2977 "datetimemodule.c"
        __label__ = 8; break; //@line 2977 "datetimemodule.c"
      case 8: // $bb7
        HEAP[$0]=0; //@line 2978 "datetimemodule.c"
        __label__ = 33; break; //@line 2978 "datetimemodule.c"
      case 9: // $bb8
        __label__ = 11; break; //@line 2978 "datetimemodule.c"
      case 10: // $bb9
        _PyErr_Clear(); //@line 2982 "datetimemodule.c"
        var $45=HEAP[$tmp]; //@line 2983 "datetimemodule.c"
        HEAP[$args]=$45; //@line 2983 "datetimemodule.c"
        var $46=HEAP[$args]; //@line 2984 "datetimemodule.c"
        var $47=(($46)&4294967295); //@line 2984 "datetimemodule.c"
        var $48=HEAP[$47]; //@line 2984 "datetimemodule.c"
        var $49=((($48) + 1)&4294967295); //@line 2984 "datetimemodule.c"
        var $50=HEAP[$args]; //@line 2984 "datetimemodule.c"
        var $51=(($50)&4294967295); //@line 2984 "datetimemodule.c"
        HEAP[$51]=$49; //@line 2984 "datetimemodule.c"
        __label__ = 11; break; //@line 2984 "datetimemodule.c"
      case 11: // $bb10
        var $52=HEAP[$self_addr]; //@line 2987 "datetimemodule.c"
        var $53=_PyObject_GetAttrString($52, ((__str184)&4294967295)); //@line 2987 "datetimemodule.c"
        HEAP[$getstate]=$53; //@line 2987 "datetimemodule.c"
        var $54=HEAP[$getstate]; //@line 2988 "datetimemodule.c"
        var $55=($54)!=0; //@line 2988 "datetimemodule.c"
        if ($55) { __label__ = 12; break; } else { __label__ = 21; break; } //@line 2988 "datetimemodule.c"
      case 12: // $bb11
        var $56=HEAP[$getstate]; //@line 2989 "datetimemodule.c"
        var $57=HEAP[$tmp]; //@line 2989 "datetimemodule.c"
        var $58=_PyObject_CallObject($56, $57); //@line 2989 "datetimemodule.c"
        HEAP[$state]=$58; //@line 2989 "datetimemodule.c"
        var $59=HEAP[$getstate]; //@line 2990 "datetimemodule.c"
        var $60=(($59)&4294967295); //@line 2990 "datetimemodule.c"
        var $61=HEAP[$60]; //@line 2990 "datetimemodule.c"
        var $62=((($61) - 1)&4294967295); //@line 2990 "datetimemodule.c"
        var $63=HEAP[$getstate]; //@line 2990 "datetimemodule.c"
        var $64=(($63)&4294967295); //@line 2990 "datetimemodule.c"
        HEAP[$64]=$62; //@line 2990 "datetimemodule.c"
        var $65=HEAP[$getstate]; //@line 2990 "datetimemodule.c"
        var $66=(($65)&4294967295); //@line 2990 "datetimemodule.c"
        var $67=HEAP[$66]; //@line 2990 "datetimemodule.c"
        var $68=((($67))|0)==0; //@line 2990 "datetimemodule.c"
        if ($68) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 2990 "datetimemodule.c"
      case 13: // $bb12
        var $69=HEAP[$getstate]; //@line 2990 "datetimemodule.c"
        var $70=(($69+4)&4294967295); //@line 2990 "datetimemodule.c"
        var $71=HEAP[$70]; //@line 2990 "datetimemodule.c"
        var $72=(($71+24)&4294967295); //@line 2990 "datetimemodule.c"
        var $73=HEAP[$72]; //@line 2990 "datetimemodule.c"
        var $74=HEAP[$getstate]; //@line 2990 "datetimemodule.c"
        FUNCTION_TABLE[$73]($74); //@line 2990 "datetimemodule.c"
        __label__ = 14; break; //@line 2990 "datetimemodule.c"
      case 14: // $bb13
        var $75=HEAP[$state]; //@line 2991 "datetimemodule.c"
        var $76=($75)==0; //@line 2991 "datetimemodule.c"
        if ($76) { __label__ = 15; break; } else { __label__ = 20; break; } //@line 2991 "datetimemodule.c"
      case 15: // $bb14
        var $77=HEAP[$args]; //@line 2992 "datetimemodule.c"
        var $78=(($77)&4294967295); //@line 2992 "datetimemodule.c"
        var $79=HEAP[$78]; //@line 2992 "datetimemodule.c"
        var $80=((($79) - 1)&4294967295); //@line 2992 "datetimemodule.c"
        var $81=HEAP[$args]; //@line 2992 "datetimemodule.c"
        var $82=(($81)&4294967295); //@line 2992 "datetimemodule.c"
        HEAP[$82]=$80; //@line 2992 "datetimemodule.c"
        var $83=HEAP[$args]; //@line 2992 "datetimemodule.c"
        var $84=(($83)&4294967295); //@line 2992 "datetimemodule.c"
        var $85=HEAP[$84]; //@line 2992 "datetimemodule.c"
        var $86=((($85))|0)==0; //@line 2992 "datetimemodule.c"
        if ($86) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 2992 "datetimemodule.c"
      case 16: // $bb15
        var $87=HEAP[$args]; //@line 2992 "datetimemodule.c"
        var $88=(($87+4)&4294967295); //@line 2992 "datetimemodule.c"
        var $89=HEAP[$88]; //@line 2992 "datetimemodule.c"
        var $90=(($89+24)&4294967295); //@line 2992 "datetimemodule.c"
        var $91=HEAP[$90]; //@line 2992 "datetimemodule.c"
        var $92=HEAP[$args]; //@line 2992 "datetimemodule.c"
        FUNCTION_TABLE[$91]($92); //@line 2992 "datetimemodule.c"
        __label__ = 17; break; //@line 2992 "datetimemodule.c"
      case 17: // $bb16
        var $93=HEAP[$tmp]; //@line 2993 "datetimemodule.c"
        var $94=(($93)&4294967295); //@line 2993 "datetimemodule.c"
        var $95=HEAP[$94]; //@line 2993 "datetimemodule.c"
        var $96=((($95) - 1)&4294967295); //@line 2993 "datetimemodule.c"
        var $97=HEAP[$tmp]; //@line 2993 "datetimemodule.c"
        var $98=(($97)&4294967295); //@line 2993 "datetimemodule.c"
        HEAP[$98]=$96; //@line 2993 "datetimemodule.c"
        var $99=HEAP[$tmp]; //@line 2993 "datetimemodule.c"
        var $100=(($99)&4294967295); //@line 2993 "datetimemodule.c"
        var $101=HEAP[$100]; //@line 2993 "datetimemodule.c"
        var $102=((($101))|0)==0; //@line 2993 "datetimemodule.c"
        if ($102) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 2993 "datetimemodule.c"
      case 18: // $bb17
        var $103=HEAP[$tmp]; //@line 2993 "datetimemodule.c"
        var $104=(($103+4)&4294967295); //@line 2993 "datetimemodule.c"
        var $105=HEAP[$104]; //@line 2993 "datetimemodule.c"
        var $106=(($105+24)&4294967295); //@line 2993 "datetimemodule.c"
        var $107=HEAP[$106]; //@line 2993 "datetimemodule.c"
        var $108=HEAP[$tmp]; //@line 2993 "datetimemodule.c"
        FUNCTION_TABLE[$107]($108); //@line 2993 "datetimemodule.c"
        __label__ = 19; break; //@line 2993 "datetimemodule.c"
      case 19: // $bb18
        HEAP[$0]=0; //@line 2994 "datetimemodule.c"
        __label__ = 33; break; //@line 2994 "datetimemodule.c"
      case 20: // $bb19
        __label__ = 26; break; //@line 2994 "datetimemodule.c"
      case 21: // $bb20
        _PyErr_Clear(); //@line 2999 "datetimemodule.c"
        HEAP[$state]=__Py_NoneStruct; //@line 3000 "datetimemodule.c"
        var $109=HEAP[$self_addr]; //@line 3001 "datetimemodule.c"
        var $110=__PyObject_GetDictPtr($109); //@line 3001 "datetimemodule.c"
        HEAP[$dictptr]=$110; //@line 3001 "datetimemodule.c"
        var $111=HEAP[$dictptr]; //@line 3002 "datetimemodule.c"
        var $112=($111)!=0; //@line 3002 "datetimemodule.c"
        if ($112) { __label__ = 22; break; } else { __label__ = 25; break; } //@line 3002 "datetimemodule.c"
      case 22: // $bb21
        var $113=HEAP[$dictptr]; //@line 3002 "datetimemodule.c"
        var $114=HEAP[$113]; //@line 3002 "datetimemodule.c"
        var $115=($114)!=0; //@line 3002 "datetimemodule.c"
        if ($115) { __label__ = 23; break; } else { __label__ = 25; break; } //@line 3002 "datetimemodule.c"
      case 23: // $bb22
        var $116=HEAP[$dictptr]; //@line 3002 "datetimemodule.c"
        var $117=HEAP[$116]; //@line 3002 "datetimemodule.c"
        var $118=_PyDict_Size($117); //@line 3002 "datetimemodule.c"
        var $119=((($118))|0)!=0; //@line 3002 "datetimemodule.c"
        if ($119) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 3002 "datetimemodule.c"
      case 24: // $bb23
        var $120=HEAP[$dictptr]; //@line 3003 "datetimemodule.c"
        var $121=HEAP[$120]; //@line 3003 "datetimemodule.c"
        HEAP[$state]=$121; //@line 3003 "datetimemodule.c"
        __label__ = 25; break; //@line 3003 "datetimemodule.c"
      case 25: // $bb24
        var $122=HEAP[$state]; //@line 3004 "datetimemodule.c"
        var $123=(($122)&4294967295); //@line 3004 "datetimemodule.c"
        var $124=HEAP[$123]; //@line 3004 "datetimemodule.c"
        var $125=((($124) + 1)&4294967295); //@line 3004 "datetimemodule.c"
        var $126=HEAP[$state]; //@line 3004 "datetimemodule.c"
        var $127=(($126)&4294967295); //@line 3004 "datetimemodule.c"
        HEAP[$127]=$125; //@line 3004 "datetimemodule.c"
        __label__ = 26; break; //@line 3004 "datetimemodule.c"
      case 26: // $bb25
        var $128=HEAP[$tmp]; //@line 3007 "datetimemodule.c"
        var $129=(($128)&4294967295); //@line 3007 "datetimemodule.c"
        var $130=HEAP[$129]; //@line 3007 "datetimemodule.c"
        var $131=((($130) - 1)&4294967295); //@line 3007 "datetimemodule.c"
        var $132=HEAP[$tmp]; //@line 3007 "datetimemodule.c"
        var $133=(($132)&4294967295); //@line 3007 "datetimemodule.c"
        HEAP[$133]=$131; //@line 3007 "datetimemodule.c"
        var $134=HEAP[$tmp]; //@line 3007 "datetimemodule.c"
        var $135=(($134)&4294967295); //@line 3007 "datetimemodule.c"
        var $136=HEAP[$135]; //@line 3007 "datetimemodule.c"
        var $137=((($136))|0)==0; //@line 3007 "datetimemodule.c"
        if ($137) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 3007 "datetimemodule.c"
      case 27: // $bb26
        var $138=HEAP[$tmp]; //@line 3007 "datetimemodule.c"
        var $139=(($138+4)&4294967295); //@line 3007 "datetimemodule.c"
        var $140=HEAP[$139]; //@line 3007 "datetimemodule.c"
        var $141=(($140+24)&4294967295); //@line 3007 "datetimemodule.c"
        var $142=HEAP[$141]; //@line 3007 "datetimemodule.c"
        var $143=HEAP[$tmp]; //@line 3007 "datetimemodule.c"
        FUNCTION_TABLE[$142]($143); //@line 3007 "datetimemodule.c"
        __label__ = 28; break; //@line 3007 "datetimemodule.c"
      case 28: // $bb27
        var $144=HEAP[$state]; //@line 3009 "datetimemodule.c"
        var $145=($144)==(__Py_NoneStruct); //@line 3009 "datetimemodule.c"
        if ($145) { __label__ = 29; break; } else { __label__ = 32; break; } //@line 3009 "datetimemodule.c"
      case 29: // $bb28
        var $146=HEAP[$state]; //@line 3010 "datetimemodule.c"
        var $147=(($146)&4294967295); //@line 3010 "datetimemodule.c"
        var $148=HEAP[$147]; //@line 3010 "datetimemodule.c"
        var $149=((($148) - 1)&4294967295); //@line 3010 "datetimemodule.c"
        var $150=HEAP[$state]; //@line 3010 "datetimemodule.c"
        var $151=(($150)&4294967295); //@line 3010 "datetimemodule.c"
        HEAP[$151]=$149; //@line 3010 "datetimemodule.c"
        var $152=HEAP[$state]; //@line 3010 "datetimemodule.c"
        var $153=(($152)&4294967295); //@line 3010 "datetimemodule.c"
        var $154=HEAP[$153]; //@line 3010 "datetimemodule.c"
        var $155=((($154))|0)==0; //@line 3010 "datetimemodule.c"
        if ($155) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 3010 "datetimemodule.c"
      case 30: // $bb29
        var $156=HEAP[$state]; //@line 3010 "datetimemodule.c"
        var $157=(($156+4)&4294967295); //@line 3010 "datetimemodule.c"
        var $158=HEAP[$157]; //@line 3010 "datetimemodule.c"
        var $159=(($158+24)&4294967295); //@line 3010 "datetimemodule.c"
        var $160=HEAP[$159]; //@line 3010 "datetimemodule.c"
        var $161=HEAP[$state]; //@line 3010 "datetimemodule.c"
        FUNCTION_TABLE[$160]($161); //@line 3010 "datetimemodule.c"
        __label__ = 31; break; //@line 3010 "datetimemodule.c"
      case 31: // $bb30
        var $162=HEAP[$self_addr]; //@line 3011 "datetimemodule.c"
        var $163=(($162+4)&4294967295); //@line 3011 "datetimemodule.c"
        var $164=HEAP[$163]; //@line 3011 "datetimemodule.c"
        var $165=HEAP[$args]; //@line 3011 "datetimemodule.c"
        var $166=__Py_BuildValue_SizeT(((__str154)&4294967295), $164, $165); //@line 3011 "datetimemodule.c"
        HEAP[$0]=$166; //@line 3011 "datetimemodule.c"
        __label__ = 33; break; //@line 3011 "datetimemodule.c"
      case 32: // $bb31
        var $167=HEAP[$self_addr]; //@line 3014 "datetimemodule.c"
        var $168=(($167+4)&4294967295); //@line 3014 "datetimemodule.c"
        var $169=HEAP[$168]; //@line 3014 "datetimemodule.c"
        var $170=HEAP[$args]; //@line 3014 "datetimemodule.c"
        var $171=HEAP[$state]; //@line 3014 "datetimemodule.c"
        var $172=__Py_BuildValue_SizeT(((__str185)&4294967295), $169, $170, $171); //@line 3014 "datetimemodule.c"
        HEAP[$0]=$172; //@line 3014 "datetimemodule.c"
        __label__ = 33; break; //@line 3014 "datetimemodule.c"
      case 33: // $bb32
        var $173=HEAP[$0]; //@line 2970 "datetimemodule.c"
        HEAP[$retval]=$173; //@line 2970 "datetimemodule.c"
        __label__ = 34; break; //@line 2970 "datetimemodule.c"
      case 34: // $return
        var $retval33=HEAP[$retval]; //@line 2970 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval33; //@line 2970 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_hour($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $unused_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$unused_addr]=$unused;
        var $1=HEAP[$self_addr]; //@line 3095 "datetimemodule.c"
        var $2=(($1+13)&4294967295); //@line 3095 "datetimemodule.c"
        var $3=(($2)&4294967295); //@line 3095 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 3095 "datetimemodule.c"
        var $5=unSign(($4), 8, 0); //@line 3095 "datetimemodule.c"
        var $6=_PyInt_FromLong($5); //@line 3095 "datetimemodule.c"
        HEAP[$0]=$6; //@line 3095 "datetimemodule.c"
        var $7=HEAP[$0]; //@line 3095 "datetimemodule.c"
        HEAP[$retval]=$7; //@line 3095 "datetimemodule.c"
        __label__ = 1; break; //@line 3095 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 3095 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 3095 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_minute($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $unused_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$unused_addr]=$unused;
        var $1=HEAP[$self_addr]; //@line 3101 "datetimemodule.c"
        var $2=(($1+13)&4294967295); //@line 3101 "datetimemodule.c"
        var $3=(($2+1)&4294967295); //@line 3101 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 3101 "datetimemodule.c"
        var $5=unSign(($4), 8, 0); //@line 3101 "datetimemodule.c"
        var $6=_PyInt_FromLong($5); //@line 3101 "datetimemodule.c"
        HEAP[$0]=$6; //@line 3101 "datetimemodule.c"
        var $7=HEAP[$0]; //@line 3101 "datetimemodule.c"
        HEAP[$retval]=$7; //@line 3101 "datetimemodule.c"
        __label__ = 1; break; //@line 3101 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 3101 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 3101 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _py_time_second($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $unused_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$unused_addr]=$unused;
        var $1=HEAP[$self_addr]; //@line 3108 "datetimemodule.c"
        var $2=(($1+13)&4294967295); //@line 3108 "datetimemodule.c"
        var $3=(($2+2)&4294967295); //@line 3108 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 3108 "datetimemodule.c"
        var $5=unSign(($4), 8, 0); //@line 3108 "datetimemodule.c"
        var $6=_PyInt_FromLong($5); //@line 3108 "datetimemodule.c"
        HEAP[$0]=$6; //@line 3108 "datetimemodule.c"
        var $7=HEAP[$0]; //@line 3108 "datetimemodule.c"
        HEAP[$retval]=$7; //@line 3108 "datetimemodule.c"
        __label__ = 1; break; //@line 3108 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 3108 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 3108 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_microsecond($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $unused_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$unused_addr]=$unused;
        var $1=HEAP[$self_addr]; //@line 3114 "datetimemodule.c"
        var $2=(($1+13)&4294967295); //@line 3114 "datetimemodule.c"
        var $3=(($2+3)&4294967295); //@line 3114 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 3114 "datetimemodule.c"
        var $5=unSign(($4), 8, 0); //@line 3114 "datetimemodule.c"
        var $6=($5) << 16; //@line 3114 "datetimemodule.c"
        var $7=HEAP[$self_addr]; //@line 3114 "datetimemodule.c"
        var $8=(($7+13)&4294967295); //@line 3114 "datetimemodule.c"
        var $9=(($8+4)&4294967295); //@line 3114 "datetimemodule.c"
        var $10=HEAP[$9]; //@line 3114 "datetimemodule.c"
        var $11=unSign(($10), 8, 0); //@line 3114 "datetimemodule.c"
        var $12=($11) << 8; //@line 3114 "datetimemodule.c"
        var $13=($6) | ($12); //@line 3114 "datetimemodule.c"
        var $14=HEAP[$self_addr]; //@line 3114 "datetimemodule.c"
        var $15=(($14+13)&4294967295); //@line 3114 "datetimemodule.c"
        var $16=(($15+5)&4294967295); //@line 3114 "datetimemodule.c"
        var $17=HEAP[$16]; //@line 3114 "datetimemodule.c"
        var $18=unSign(($17), 8, 0); //@line 3114 "datetimemodule.c"
        var $19=($13) | ($18); //@line 3114 "datetimemodule.c"
        var $20=_PyInt_FromLong($19); //@line 3114 "datetimemodule.c"
        HEAP[$0]=$20; //@line 3114 "datetimemodule.c"
        var $21=HEAP[$0]; //@line 3114 "datetimemodule.c"
        HEAP[$retval]=$21; //@line 3114 "datetimemodule.c"
        __label__ = 1; break; //@line 3114 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 3114 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 3114 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_tzinfo($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $unused_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $iftmp_259=__stackBase__+16;
        var $result=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$unused_addr]=$unused;
        var $1=HEAP[$self_addr]; //@line 3120 "datetimemodule.c"
        var $2=$1; //@line 3120 "datetimemodule.c"
        var $3=(($2+12)&4294967295); //@line 3120 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 3120 "datetimemodule.c"
        var $5=reSign(($4), 8, 0)!=0; //@line 3120 "datetimemodule.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3120 "datetimemodule.c"
      case 1: // $bb
        var $6=HEAP[$self_addr]; //@line 3120 "datetimemodule.c"
        var $7=(($6+20)&4294967295); //@line 3120 "datetimemodule.c"
        var $8=HEAP[$7]; //@line 3120 "datetimemodule.c"
        HEAP[$iftmp_259]=$8; //@line 3120 "datetimemodule.c"
        __label__ = 3; break; //@line 3120 "datetimemodule.c"
      case 2: // $bb1
        HEAP[$iftmp_259]=__Py_NoneStruct; //@line 3120 "datetimemodule.c"
        __label__ = 3; break; //@line 3120 "datetimemodule.c"
      case 3: // $bb2
        var $9=HEAP[$iftmp_259]; //@line 3120 "datetimemodule.c"
        HEAP[$result]=$9; //@line 3120 "datetimemodule.c"
        var $10=HEAP[$result]; //@line 3121 "datetimemodule.c"
        var $11=(($10)&4294967295); //@line 3121 "datetimemodule.c"
        var $12=HEAP[$11]; //@line 3121 "datetimemodule.c"
        var $13=((($12) + 1)&4294967295); //@line 3121 "datetimemodule.c"
        var $14=HEAP[$result]; //@line 3121 "datetimemodule.c"
        var $15=(($14)&4294967295); //@line 3121 "datetimemodule.c"
        HEAP[$15]=$13; //@line 3121 "datetimemodule.c"
        var $16=HEAP[$result]; //@line 3122 "datetimemodule.c"
        HEAP[$0]=$16; //@line 3122 "datetimemodule.c"
        var $17=HEAP[$0]; //@line 3122 "datetimemodule.c"
        HEAP[$retval]=$17; //@line 3122 "datetimemodule.c"
        __label__ = 4; break; //@line 3122 "datetimemodule.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 3122 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 3122 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_new($type, $args, $kw) {
    var __stackBase__  = STACKTOP; STACKTOP += 57; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 57);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $type_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kw_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $self=__stackBase__+20;
        var $state=__stackBase__+24;
        var $hour=__stackBase__+28;
        var $minute=__stackBase__+32;
        var $second=__stackBase__+36;
        var $usecond=__stackBase__+40;
        var $tzinfo=__stackBase__+44;
        var $me=__stackBase__+48;
        var $aware=__stackBase__+52;
        var $pdata=__stackBase__+53;
        var $_alloca_point_=0;
        HEAP[$type_addr]=$type;
        HEAP[$args_addr]=$args;
        HEAP[$kw_addr]=$kw;
        HEAP[$self]=0; //@line 3144 "datetimemodule.c"
        HEAP[$hour]=0; //@line 3146 "datetimemodule.c"
        HEAP[$minute]=0; //@line 3147 "datetimemodule.c"
        HEAP[$second]=0; //@line 3148 "datetimemodule.c"
        HEAP[$usecond]=0; //@line 3149 "datetimemodule.c"
        HEAP[$tzinfo]=__Py_NoneStruct; //@line 3150 "datetimemodule.c"
        var $1=HEAP[$args_addr]; //@line 3153 "datetimemodule.c"
        var $2=$1; //@line 3153 "datetimemodule.c"
        var $3=(($2+8)&4294967295); //@line 3153 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 3153 "datetimemodule.c"
        var $5=((($4))|0) > 0; //@line 3153 "datetimemodule.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 12; break; } //@line 3153 "datetimemodule.c"
      case 1: // $bb
        var $6=HEAP[$args_addr]; //@line 3153 "datetimemodule.c"
        var $7=$6; //@line 3153 "datetimemodule.c"
        var $8=(($7+8)&4294967295); //@line 3153 "datetimemodule.c"
        var $9=HEAP[$8]; //@line 3153 "datetimemodule.c"
        var $10=((($9))|0) <= 2; //@line 3153 "datetimemodule.c"
        if ($10) { __label__ = 2; break; } else { __label__ = 12; break; } //@line 3153 "datetimemodule.c"
      case 2: // $bb1
        var $11=HEAP[$args_addr]; //@line 3153 "datetimemodule.c"
        var $12=$11; //@line 3153 "datetimemodule.c"
        var $13=(($12+12)&4294967295); //@line 3153 "datetimemodule.c"
        var $14=(($13)&4294967295); //@line 3153 "datetimemodule.c"
        var $15=HEAP[$14]; //@line 3153 "datetimemodule.c"
        HEAP[$state]=$15; //@line 3153 "datetimemodule.c"
        var $16=HEAP[$state]; //@line 3153 "datetimemodule.c"
        var $17=(($16+4)&4294967295); //@line 3153 "datetimemodule.c"
        var $18=HEAP[$17]; //@line 3153 "datetimemodule.c"
        var $19=(($18+84)&4294967295); //@line 3153 "datetimemodule.c"
        var $20=HEAP[$19]; //@line 3153 "datetimemodule.c"
        var $21=($20) & 134217728; //@line 3153 "datetimemodule.c"
        var $22=((($21))|0)!=0; //@line 3153 "datetimemodule.c"
        if ($22) { __label__ = 3; break; } else { __label__ = 12; break; } //@line 3153 "datetimemodule.c"
      case 3: // $bb2
        var $23=HEAP[$state]; //@line 3153 "datetimemodule.c"
        var $24=$23; //@line 3153 "datetimemodule.c"
        var $25=(($24+8)&4294967295); //@line 3153 "datetimemodule.c"
        var $26=HEAP[$25]; //@line 3153 "datetimemodule.c"
        var $27=((($26))|0)==6; //@line 3153 "datetimemodule.c"
        if ($27) { __label__ = 4; break; } else { __label__ = 12; break; } //@line 3153 "datetimemodule.c"
      case 4: // $bb3
        var $28=HEAP[$state]; //@line 3153 "datetimemodule.c"
        var $29=$28; //@line 3153 "datetimemodule.c"
        var $30=(($29+20)&4294967295); //@line 3153 "datetimemodule.c"
        var $31=(($30)&4294967295); //@line 3153 "datetimemodule.c"
        var $32=HEAP[$31]; //@line 3153 "datetimemodule.c"
        var $33=unSign(($32), 8, 0) <= 23; //@line 3153 "datetimemodule.c"
        if ($33) { __label__ = 5; break; } else { __label__ = 12; break; } //@line 3153 "datetimemodule.c"
      case 5: // $bb4
        var $34=HEAP[$args_addr]; //@line 3162 "datetimemodule.c"
        var $35=$34; //@line 3162 "datetimemodule.c"
        var $36=(($35+8)&4294967295); //@line 3162 "datetimemodule.c"
        var $37=HEAP[$36]; //@line 3162 "datetimemodule.c"
        var $38=((($37))|0)==2; //@line 3162 "datetimemodule.c"
        if ($38) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 3162 "datetimemodule.c"
      case 6: // $bb5
        var $39=HEAP[$args_addr]; //@line 3163 "datetimemodule.c"
        var $40=$39; //@line 3163 "datetimemodule.c"
        var $41=(($40+12)&4294967295); //@line 3163 "datetimemodule.c"
        var $42=(($41+4)&4294967295); //@line 3163 "datetimemodule.c"
        var $43=HEAP[$42]; //@line 3163 "datetimemodule.c"
        HEAP[$tzinfo]=$43; //@line 3163 "datetimemodule.c"
        var $44=HEAP[$tzinfo]; //@line 3164 "datetimemodule.c"
        var $45=_check_tzinfo_subclass($44); //@line 3164 "datetimemodule.c"
        var $46=((($45))|0) < 0; //@line 3164 "datetimemodule.c"
        if ($46) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3164 "datetimemodule.c"
      case 7: // $bb6
        var $47=HEAP[_PyExc_TypeError]; //@line 3165 "datetimemodule.c"
        _PyErr_SetString($47, ((__str197)&4294967295)); //@line 3165 "datetimemodule.c"
        HEAP[$0]=0; //@line 3167 "datetimemodule.c"
        __label__ = 19; break; //@line 3167 "datetimemodule.c"
      case 8: // $bb7
        var $48=HEAP[$tzinfo]; //@line 3170 "datetimemodule.c"
        var $49=($48)!=(__Py_NoneStruct); //@line 3170 "datetimemodule.c"
        var $50=unSign(($49), 1, 0); //@line 3170 "datetimemodule.c"
        HEAP[$aware]=$50; //@line 3170 "datetimemodule.c"
        var $51=HEAP[$type_addr]; //@line 3171 "datetimemodule.c"
        var $52=(($51+152)&4294967295); //@line 3171 "datetimemodule.c"
        var $53=HEAP[$52]; //@line 3171 "datetimemodule.c"
        var $54=HEAP[$aware]; //@line 3171 "datetimemodule.c"
        var $55=reSign(($54), 8, 0); //@line 3171 "datetimemodule.c"
        var $56=HEAP[$type_addr]; //@line 3171 "datetimemodule.c"
        var $57=FUNCTION_TABLE[$53]($56, $55); //@line 3171 "datetimemodule.c"
        var $58=$57; //@line 3171 "datetimemodule.c"
        HEAP[$me]=$58; //@line 3171 "datetimemodule.c"
        var $59=HEAP[$me]; //@line 3172 "datetimemodule.c"
        var $60=($59)!=0; //@line 3172 "datetimemodule.c"
        if ($60) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 3172 "datetimemodule.c"
      case 9: // $bb8
        var $61=HEAP[$state]; //@line 3173 "datetimemodule.c"
        var $62=$61; //@line 3173 "datetimemodule.c"
        var $63=(($62+20)&4294967295); //@line 3173 "datetimemodule.c"
        var $64=(($63)&4294967295); //@line 3173 "datetimemodule.c"
        HEAP[$pdata]=$64; //@line 3173 "datetimemodule.c"
        var $65=HEAP[$me]; //@line 3175 "datetimemodule.c"
        var $66=(($65+13)&4294967295); //@line 3175 "datetimemodule.c"
        var $67=(($66)&4294967295); //@line 3175 "datetimemodule.c"
        var $68=HEAP[$pdata]; //@line 3175 "datetimemodule.c"
        _llvm_memcpy_p0i8_p0i8_i32($67, $68, 6, 1, 0); //@line 3175 "datetimemodule.c"
        var $69=HEAP[$me]; //@line 3176 "datetimemodule.c"
        var $70=(($69+8)&4294967295); //@line 3176 "datetimemodule.c"
        HEAP[$70]=-1; //@line 3176 "datetimemodule.c"
        var $71=HEAP[$me]; //@line 3177 "datetimemodule.c"
        var $72=(($71+12)&4294967295); //@line 3177 "datetimemodule.c"
        var $73=HEAP[$aware]; //@line 3177 "datetimemodule.c"
        HEAP[$72]=$73; //@line 3177 "datetimemodule.c"
        var $74=HEAP[$aware]; //@line 3178 "datetimemodule.c"
        var $75=reSign(($74), 8, 0)!=0; //@line 3178 "datetimemodule.c"
        if ($75) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3178 "datetimemodule.c"
      case 10: // $bb9
        var $76=HEAP[$tzinfo]; //@line 3179 "datetimemodule.c"
        var $77=(($76)&4294967295); //@line 3179 "datetimemodule.c"
        var $78=HEAP[$77]; //@line 3179 "datetimemodule.c"
        var $79=((($78) + 1)&4294967295); //@line 3179 "datetimemodule.c"
        var $80=(($76)&4294967295); //@line 3179 "datetimemodule.c"
        HEAP[$80]=$79; //@line 3179 "datetimemodule.c"
        var $81=HEAP[$tzinfo]; //@line 3180 "datetimemodule.c"
        var $82=HEAP[$me]; //@line 3180 "datetimemodule.c"
        var $83=(($82+20)&4294967295); //@line 3180 "datetimemodule.c"
        HEAP[$83]=$81; //@line 3180 "datetimemodule.c"
        __label__ = 11; break; //@line 3180 "datetimemodule.c"
      case 11: // $bb10
        var $84=HEAP[$me]; //@line 3183 "datetimemodule.c"
        var $85=$84; //@line 3183 "datetimemodule.c"
        HEAP[$0]=$85; //@line 3183 "datetimemodule.c"
        __label__ = 19; break; //@line 3183 "datetimemodule.c"
      case 12: // $bb11
        var $86=HEAP[$args_addr]; //@line 3186 "datetimemodule.c"
        var $87=HEAP[$kw_addr]; //@line 3186 "datetimemodule.c"
        var $88=__PyArg_ParseTupleAndKeywords_SizeT($86, $87, ((__str198)&4294967295), ((_time_kws)&4294967295), $hour, $minute, $second, $usecond, $tzinfo); //@line 3186 "datetimemodule.c"
        var $89=((($88))|0)!=0; //@line 3186 "datetimemodule.c"
        if ($89) { __label__ = 13; break; } else { __label__ = 18; break; } //@line 3186 "datetimemodule.c"
      case 13: // $bb12
        var $90=HEAP[$usecond]; //@line 3189 "datetimemodule.c"
        var $91=HEAP[$second]; //@line 3189 "datetimemodule.c"
        var $92=HEAP[$minute]; //@line 3189 "datetimemodule.c"
        var $93=HEAP[$hour]; //@line 3189 "datetimemodule.c"
        var $94=_check_time_args($93, $92, $91, $90); //@line 3189 "datetimemodule.c"
        var $95=((($94))|0) < 0; //@line 3189 "datetimemodule.c"
        if ($95) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 3189 "datetimemodule.c"
      case 14: // $bb13
        HEAP[$0]=0; //@line 3190 "datetimemodule.c"
        __label__ = 19; break; //@line 3190 "datetimemodule.c"
      case 15: // $bb14
        var $96=HEAP[$tzinfo]; //@line 3191 "datetimemodule.c"
        var $97=_check_tzinfo_subclass($96); //@line 3191 "datetimemodule.c"
        var $98=((($97))|0) < 0; //@line 3191 "datetimemodule.c"
        if ($98) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 3191 "datetimemodule.c"
      case 16: // $bb15
        HEAP[$0]=0; //@line 3192 "datetimemodule.c"
        __label__ = 19; break; //@line 3192 "datetimemodule.c"
      case 17: // $bb16
        var $99=HEAP[$tzinfo]; //@line 3193 "datetimemodule.c"
        var $100=HEAP[$usecond]; //@line 3193 "datetimemodule.c"
        var $101=HEAP[$second]; //@line 3193 "datetimemodule.c"
        var $102=HEAP[$minute]; //@line 3193 "datetimemodule.c"
        var $103=HEAP[$hour]; //@line 3193 "datetimemodule.c"
        var $104=HEAP[$type_addr]; //@line 3193 "datetimemodule.c"
        var $105=_new_time_ex($103, $102, $101, $100, $99, $104); //@line 3193 "datetimemodule.c"
        HEAP[$self]=$105; //@line 3193 "datetimemodule.c"
        __label__ = 18; break; //@line 3193 "datetimemodule.c"
      case 18: // $bb17
        var $106=HEAP[$self]; //@line 3196 "datetimemodule.c"
        HEAP[$0]=$106; //@line 3196 "datetimemodule.c"
        __label__ = 19; break; //@line 3196 "datetimemodule.c"
      case 19: // $bb18
        var $107=HEAP[$0]; //@line 3167 "datetimemodule.c"
        HEAP[$retval]=$107; //@line 3167 "datetimemodule.c"
        __label__ = 20; break; //@line 3167 "datetimemodule.c"
      case 20: // $return
        var $retval19=HEAP[$retval]; //@line 3167 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval19; //@line 3167 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_dealloc($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $0=HEAP[$self_addr]; //@line 3206 "datetimemodule.c"
        var $1=$0; //@line 3206 "datetimemodule.c"
        var $2=(($1+12)&4294967295); //@line 3206 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 3206 "datetimemodule.c"
        var $4=reSign(($3), 8, 0)!=0; //@line 3206 "datetimemodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 3206 "datetimemodule.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 3207 "datetimemodule.c"
        var $6=(($5+20)&4294967295); //@line 3207 "datetimemodule.c"
        var $7=HEAP[$6]; //@line 3207 "datetimemodule.c"
        var $8=($7)!=0; //@line 3207 "datetimemodule.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 3207 "datetimemodule.c"
      case 2: // $bb1
        var $9=HEAP[$self_addr]; //@line 3207 "datetimemodule.c"
        var $10=(($9+20)&4294967295); //@line 3207 "datetimemodule.c"
        var $11=HEAP[$10]; //@line 3207 "datetimemodule.c"
        var $12=(($11)&4294967295); //@line 3207 "datetimemodule.c"
        var $13=HEAP[$12]; //@line 3207 "datetimemodule.c"
        var $14=((($13) - 1)&4294967295); //@line 3207 "datetimemodule.c"
        var $15=(($11)&4294967295); //@line 3207 "datetimemodule.c"
        HEAP[$15]=$14; //@line 3207 "datetimemodule.c"
        var $16=(($11)&4294967295); //@line 3207 "datetimemodule.c"
        var $17=HEAP[$16]; //@line 3207 "datetimemodule.c"
        var $18=((($17))|0)==0; //@line 3207 "datetimemodule.c"
        if ($18) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3207 "datetimemodule.c"
      case 3: // $bb2
        var $19=HEAP[$self_addr]; //@line 3207 "datetimemodule.c"
        var $20=(($19+20)&4294967295); //@line 3207 "datetimemodule.c"
        var $21=HEAP[$20]; //@line 3207 "datetimemodule.c"
        var $22=(($21+4)&4294967295); //@line 3207 "datetimemodule.c"
        var $23=HEAP[$22]; //@line 3207 "datetimemodule.c"
        var $24=(($23+24)&4294967295); //@line 3207 "datetimemodule.c"
        var $25=HEAP[$24]; //@line 3207 "datetimemodule.c"
        var $26=HEAP[$self_addr]; //@line 3207 "datetimemodule.c"
        var $27=(($26+20)&4294967295); //@line 3207 "datetimemodule.c"
        var $28=HEAP[$27]; //@line 3207 "datetimemodule.c"
        FUNCTION_TABLE[$25]($28); //@line 3207 "datetimemodule.c"
        __label__ = 4; break; //@line 3207 "datetimemodule.c"
      case 4: // $bb3
        var $29=HEAP[$self_addr]; //@line 3209 "datetimemodule.c"
        var $30=$29; //@line 3209 "datetimemodule.c"
        var $31=(($30+4)&4294967295); //@line 3209 "datetimemodule.c"
        var $32=HEAP[$31]; //@line 3209 "datetimemodule.c"
        var $33=(($32+160)&4294967295); //@line 3209 "datetimemodule.c"
        var $34=HEAP[$33]; //@line 3209 "datetimemodule.c"
        var $35=HEAP[$self_addr]; //@line 3209 "datetimemodule.c"
        var $36=$35; //@line 3209 "datetimemodule.c"
        FUNCTION_TABLE[$34]($36); //@line 3209 "datetimemodule.c"
        __label__ = 5; break; //@line 3210 "datetimemodule.c"
      case 5: // $return
        STACKTOP = __stackBase__;
        return; //@line 3210 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_utcoffset($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $unused_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $iftmp_286=__stackBase__+12;
        var $0=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$unused_addr]=$unused;
        var $1=HEAP[$self_addr]; //@line 3219 "datetimemodule.c"
        var $2=$1; //@line 3219 "datetimemodule.c"
        var $3=(($2+12)&4294967295); //@line 3219 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 3219 "datetimemodule.c"
        var $5=reSign(($4), 8, 0)!=0; //@line 3219 "datetimemodule.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3219 "datetimemodule.c"
      case 1: // $bb
        var $6=HEAP[$self_addr]; //@line 3219 "datetimemodule.c"
        var $7=(($6+20)&4294967295); //@line 3219 "datetimemodule.c"
        var $8=HEAP[$7]; //@line 3219 "datetimemodule.c"
        HEAP[$iftmp_286]=$8; //@line 3219 "datetimemodule.c"
        __label__ = 3; break; //@line 3219 "datetimemodule.c"
      case 2: // $bb1
        HEAP[$iftmp_286]=__Py_NoneStruct; //@line 3219 "datetimemodule.c"
        __label__ = 3; break; //@line 3219 "datetimemodule.c"
      case 3: // $bb2
        var $9=HEAP[$iftmp_286]; //@line 3219 "datetimemodule.c"
        var $10=_offset_as_timedelta($9, ((__str42)&4294967295), __Py_NoneStruct); //@line 3219 "datetimemodule.c"
        HEAP[$0]=$10; //@line 3219 "datetimemodule.c"
        var $11=HEAP[$0]; //@line 3219 "datetimemodule.c"
        HEAP[$retval]=$11; //@line 3219 "datetimemodule.c"
        __label__ = 4; break; //@line 3219 "datetimemodule.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 3219 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 3219 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_dst($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $unused_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $iftmp_288=__stackBase__+12;
        var $0=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$unused_addr]=$unused;
        var $1=HEAP[$self_addr]; //@line 3225 "datetimemodule.c"
        var $2=$1; //@line 3225 "datetimemodule.c"
        var $3=(($2+12)&4294967295); //@line 3225 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 3225 "datetimemodule.c"
        var $5=reSign(($4), 8, 0)!=0; //@line 3225 "datetimemodule.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3225 "datetimemodule.c"
      case 1: // $bb
        var $6=HEAP[$self_addr]; //@line 3225 "datetimemodule.c"
        var $7=(($6+20)&4294967295); //@line 3225 "datetimemodule.c"
        var $8=HEAP[$7]; //@line 3225 "datetimemodule.c"
        HEAP[$iftmp_288]=$8; //@line 3225 "datetimemodule.c"
        __label__ = 3; break; //@line 3225 "datetimemodule.c"
      case 2: // $bb1
        HEAP[$iftmp_288]=__Py_NoneStruct; //@line 3225 "datetimemodule.c"
        __label__ = 3; break; //@line 3225 "datetimemodule.c"
      case 3: // $bb2
        var $9=HEAP[$iftmp_288]; //@line 3225 "datetimemodule.c"
        var $10=_offset_as_timedelta($9, ((__str44)&4294967295), __Py_NoneStruct); //@line 3225 "datetimemodule.c"
        HEAP[$0]=$10; //@line 3225 "datetimemodule.c"
        var $11=HEAP[$0]; //@line 3225 "datetimemodule.c"
        HEAP[$retval]=$11; //@line 3225 "datetimemodule.c"
        __label__ = 4; break; //@line 3225 "datetimemodule.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 3225 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 3225 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_tzname($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $unused_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $iftmp_290=__stackBase__+12;
        var $0=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$unused_addr]=$unused;
        var $1=HEAP[$self_addr]; //@line 3231 "datetimemodule.c"
        var $2=$1; //@line 3231 "datetimemodule.c"
        var $3=(($2+12)&4294967295); //@line 3231 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 3231 "datetimemodule.c"
        var $5=reSign(($4), 8, 0)!=0; //@line 3231 "datetimemodule.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3231 "datetimemodule.c"
      case 1: // $bb
        var $6=HEAP[$self_addr]; //@line 3231 "datetimemodule.c"
        var $7=(($6+20)&4294967295); //@line 3231 "datetimemodule.c"
        var $8=HEAP[$7]; //@line 3231 "datetimemodule.c"
        HEAP[$iftmp_290]=$8; //@line 3231 "datetimemodule.c"
        __label__ = 3; break; //@line 3231 "datetimemodule.c"
      case 2: // $bb1
        HEAP[$iftmp_290]=__Py_NoneStruct; //@line 3231 "datetimemodule.c"
        __label__ = 3; break; //@line 3231 "datetimemodule.c"
      case 3: // $bb2
        var $9=HEAP[$iftmp_290]; //@line 3231 "datetimemodule.c"
        var $10=_call_tzname($9, __Py_NoneStruct); //@line 3231 "datetimemodule.c"
        HEAP[$0]=$10; //@line 3231 "datetimemodule.c"
        var $11=HEAP[$0]; //@line 3231 "datetimemodule.c"
        HEAP[$retval]=$11; //@line 3231 "datetimemodule.c"
        __label__ = 4; break; //@line 3231 "datetimemodule.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 3231 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 3231 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_repr($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 136; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 136);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $buffer=__stackBase__+12;
        var $type_name=__stackBase__+112;
        var $h=__stackBase__+116;
        var $m=__stackBase__+120;
        var $s=__stackBase__+124;
        var $us=__stackBase__+128;
        var $result=__stackBase__+132;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 3243 "datetimemodule.c"
        var $2=$1; //@line 3243 "datetimemodule.c"
        var $3=(($2+4)&4294967295); //@line 3243 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 3243 "datetimemodule.c"
        var $5=(($4+12)&4294967295); //@line 3243 "datetimemodule.c"
        var $6=HEAP[$5]; //@line 3243 "datetimemodule.c"
        HEAP[$type_name]=$6; //@line 3243 "datetimemodule.c"
        var $7=HEAP[$self_addr]; //@line 3244 "datetimemodule.c"
        var $8=(($7+13)&4294967295); //@line 3244 "datetimemodule.c"
        var $9=(($8)&4294967295); //@line 3244 "datetimemodule.c"
        var $10=HEAP[$9]; //@line 3244 "datetimemodule.c"
        var $11=unSign(($10), 8, 0); //@line 3244 "datetimemodule.c"
        HEAP[$h]=$11; //@line 3244 "datetimemodule.c"
        var $12=HEAP[$self_addr]; //@line 3245 "datetimemodule.c"
        var $13=(($12+13)&4294967295); //@line 3245 "datetimemodule.c"
        var $14=(($13+1)&4294967295); //@line 3245 "datetimemodule.c"
        var $15=HEAP[$14]; //@line 3245 "datetimemodule.c"
        var $16=unSign(($15), 8, 0); //@line 3245 "datetimemodule.c"
        HEAP[$m]=$16; //@line 3245 "datetimemodule.c"
        var $17=HEAP[$self_addr]; //@line 3246 "datetimemodule.c"
        var $18=(($17+13)&4294967295); //@line 3246 "datetimemodule.c"
        var $19=(($18+2)&4294967295); //@line 3246 "datetimemodule.c"
        var $20=HEAP[$19]; //@line 3246 "datetimemodule.c"
        var $21=unSign(($20), 8, 0); //@line 3246 "datetimemodule.c"
        HEAP[$s]=$21; //@line 3246 "datetimemodule.c"
        var $22=HEAP[$self_addr]; //@line 3247 "datetimemodule.c"
        var $23=(($22+13)&4294967295); //@line 3247 "datetimemodule.c"
        var $24=(($23+3)&4294967295); //@line 3247 "datetimemodule.c"
        var $25=HEAP[$24]; //@line 3247 "datetimemodule.c"
        var $26=unSign(($25), 8, 0); //@line 3247 "datetimemodule.c"
        var $27=($26) << 16; //@line 3247 "datetimemodule.c"
        var $28=HEAP[$self_addr]; //@line 3247 "datetimemodule.c"
        var $29=(($28+13)&4294967295); //@line 3247 "datetimemodule.c"
        var $30=(($29+4)&4294967295); //@line 3247 "datetimemodule.c"
        var $31=HEAP[$30]; //@line 3247 "datetimemodule.c"
        var $32=unSign(($31), 8, 0); //@line 3247 "datetimemodule.c"
        var $33=($32) << 8; //@line 3247 "datetimemodule.c"
        var $34=($27) | ($33); //@line 3247 "datetimemodule.c"
        var $35=HEAP[$self_addr]; //@line 3247 "datetimemodule.c"
        var $36=(($35+13)&4294967295); //@line 3247 "datetimemodule.c"
        var $37=(($36+5)&4294967295); //@line 3247 "datetimemodule.c"
        var $38=HEAP[$37]; //@line 3247 "datetimemodule.c"
        var $39=unSign(($38), 8, 0); //@line 3247 "datetimemodule.c"
        var $40=($34) | ($39); //@line 3247 "datetimemodule.c"
        HEAP[$us]=$40; //@line 3247 "datetimemodule.c"
        HEAP[$result]=0; //@line 3248 "datetimemodule.c"
        var $41=HEAP[$us]; //@line 3250 "datetimemodule.c"
        var $42=((($41))|0)!=0; //@line 3250 "datetimemodule.c"
        if ($42) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3250 "datetimemodule.c"
      case 1: // $bb
        var $buffer1=$buffer; //@line 3251 "datetimemodule.c"
        var $43=HEAP[$type_name]; //@line 3251 "datetimemodule.c"
        var $44=HEAP[$h]; //@line 3251 "datetimemodule.c"
        var $45=HEAP[$m]; //@line 3251 "datetimemodule.c"
        var $46=HEAP[$s]; //@line 3251 "datetimemodule.c"
        var $47=HEAP[$us]; //@line 3251 "datetimemodule.c"
        var $48=_PyOS_snprintf($buffer1, 100, ((__str199)&4294967295), $43, $44, $45, $46, $47); //@line 3251 "datetimemodule.c"
        __label__ = 5; break; //@line 3251 "datetimemodule.c"
      case 2: // $bb2
        var $49=HEAP[$s]; //@line 3253 "datetimemodule.c"
        var $50=((($49))|0)!=0; //@line 3253 "datetimemodule.c"
        if ($50) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3253 "datetimemodule.c"
      case 3: // $bb3
        var $buffer4=$buffer; //@line 3254 "datetimemodule.c"
        var $51=HEAP[$type_name]; //@line 3254 "datetimemodule.c"
        var $52=HEAP[$h]; //@line 3254 "datetimemodule.c"
        var $53=HEAP[$m]; //@line 3254 "datetimemodule.c"
        var $54=HEAP[$s]; //@line 3254 "datetimemodule.c"
        var $55=_PyOS_snprintf($buffer4, 100, ((__str121)&4294967295), $51, $52, $53, $54); //@line 3254 "datetimemodule.c"
        __label__ = 5; break; //@line 3254 "datetimemodule.c"
      case 4: // $bb5
        var $buffer6=$buffer; //@line 3257 "datetimemodule.c"
        var $56=HEAP[$type_name]; //@line 3257 "datetimemodule.c"
        var $57=HEAP[$h]; //@line 3257 "datetimemodule.c"
        var $58=HEAP[$m]; //@line 3257 "datetimemodule.c"
        var $59=_PyOS_snprintf($buffer6, 100, ((__str122)&4294967295), $56, $57, $58); //@line 3257 "datetimemodule.c"
        __label__ = 5; break; //@line 3257 "datetimemodule.c"
      case 5: // $bb7
        var $buffer8=$buffer; //@line 3259 "datetimemodule.c"
        var $60=_PyString_FromString($buffer8); //@line 3259 "datetimemodule.c"
        HEAP[$result]=$60; //@line 3259 "datetimemodule.c"
        var $61=HEAP[$result]; //@line 3260 "datetimemodule.c"
        var $62=($61)!=0; //@line 3260 "datetimemodule.c"
        if ($62) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 3260 "datetimemodule.c"
      case 6: // $bb9
        var $63=HEAP[$self_addr]; //@line 3260 "datetimemodule.c"
        var $64=$63; //@line 3260 "datetimemodule.c"
        var $65=(($64+12)&4294967295); //@line 3260 "datetimemodule.c"
        var $66=HEAP[$65]; //@line 3260 "datetimemodule.c"
        var $67=reSign(($66), 8, 0)!=0; //@line 3260 "datetimemodule.c"
        if ($67) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3260 "datetimemodule.c"
      case 7: // $bb10
        var $68=HEAP[$self_addr]; //@line 3261 "datetimemodule.c"
        var $69=(($68+20)&4294967295); //@line 3261 "datetimemodule.c"
        var $70=HEAP[$69]; //@line 3261 "datetimemodule.c"
        var $71=HEAP[$result]; //@line 3261 "datetimemodule.c"
        var $72=_append_keyword_tzinfo($71, $70); //@line 3261 "datetimemodule.c"
        HEAP[$result]=$72; //@line 3261 "datetimemodule.c"
        __label__ = 8; break; //@line 3261 "datetimemodule.c"
      case 8: // $bb11
        var $73=HEAP[$result]; //@line 3262 "datetimemodule.c"
        HEAP[$0]=$73; //@line 3262 "datetimemodule.c"
        var $74=HEAP[$0]; //@line 3262 "datetimemodule.c"
        HEAP[$retval]=$74; //@line 3262 "datetimemodule.c"
        __label__ = 9; break; //@line 3262 "datetimemodule.c"
      case 9: // $return
        var $retval12=HEAP[$retval]; //@line 3262 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval12; //@line 3262 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_str($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 3268 "datetimemodule.c"
        var $2=$1; //@line 3268 "datetimemodule.c"
        var $3=__PyObject_CallMethod_SizeT($2, ((__str146)&4294967295), ((__str99)&4294967295)); //@line 3268 "datetimemodule.c"
        HEAP[$0]=$3; //@line 3268 "datetimemodule.c"
        var $4=HEAP[$0]; //@line 3268 "datetimemodule.c"
        HEAP[$retval]=$4; //@line 3268 "datetimemodule.c"
        __label__ = 1; break; //@line 3268 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 3268 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 3268 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_isoformat($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 152; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 152);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $unused_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $buf=__stackBase__+16;
        var $result=__stackBase__+116;
        var $datetime=__stackBase__+120;
        var $pdatetime=__stackBase__+148;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$unused_addr]=$unused;
        HEAP[$pdatetime]=$datetime; //@line 3278 "datetimemodule.c"
        var $1=HEAP[$self_addr]; //@line 3281 "datetimemodule.c"
        var $2=(($1+13)&4294967295); //@line 3281 "datetimemodule.c"
        var $3=(($2)&4294967295); //@line 3281 "datetimemodule.c"
        var $4=HEAP[$pdatetime]; //@line 3281 "datetimemodule.c"
        var $5=(($4+13)&4294967295); //@line 3281 "datetimemodule.c"
        var $6=(($5)&4294967295); //@line 3281 "datetimemodule.c"
        var $7=(($6+4)&4294967295); //@line 3281 "datetimemodule.c"
        _llvm_memcpy_p0i8_p0i8_i32($7, $3, 6, 1, 0); //@line 3281 "datetimemodule.c"
        var $8=HEAP[$pdatetime]; //@line 3285 "datetimemodule.c"
        var $buf1=$buf; //@line 3285 "datetimemodule.c"
        var $9=_isoformat_time($8, $buf1, 100); //@line 3285 "datetimemodule.c"
        var $buf2=$buf; //@line 3286 "datetimemodule.c"
        var $10=_PyString_FromString($buf2); //@line 3286 "datetimemodule.c"
        HEAP[$result]=$10; //@line 3286 "datetimemodule.c"
        var $11=HEAP[$result]; //@line 3287 "datetimemodule.c"
        var $12=($11)==0; //@line 3287 "datetimemodule.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 1; break; } //@line 3287 "datetimemodule.c"
      case 1: // $bb
        var $13=HEAP[$self_addr]; //@line 3287 "datetimemodule.c"
        var $14=$13; //@line 3287 "datetimemodule.c"
        var $15=(($14+12)&4294967295); //@line 3287 "datetimemodule.c"
        var $16=HEAP[$15]; //@line 3287 "datetimemodule.c"
        var $17=reSign(($16), 8, 0)==0; //@line 3287 "datetimemodule.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 3287 "datetimemodule.c"
      case 2: // $bb3
        var $18=HEAP[$self_addr]; //@line 3287 "datetimemodule.c"
        var $19=(($18+20)&4294967295); //@line 3287 "datetimemodule.c"
        var $20=HEAP[$19]; //@line 3287 "datetimemodule.c"
        var $21=($20)==(__Py_NoneStruct); //@line 3287 "datetimemodule.c"
        if ($21) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3287 "datetimemodule.c"
      case 3: // $bb4
        var $22=HEAP[$result]; //@line 3288 "datetimemodule.c"
        HEAP[$0]=$22; //@line 3288 "datetimemodule.c"
        __label__ = 9; break; //@line 3288 "datetimemodule.c"
      case 4: // $bb5
        var $23=HEAP[$self_addr]; //@line 3291 "datetimemodule.c"
        var $24=(($23+20)&4294967295); //@line 3291 "datetimemodule.c"
        var $25=HEAP[$24]; //@line 3291 "datetimemodule.c"
        var $buf6=$buf; //@line 3291 "datetimemodule.c"
        var $26=_format_utcoffset($buf6, 100, ((__str200)&4294967295), $25, __Py_NoneStruct); //@line 3291 "datetimemodule.c"
        var $27=((($26))|0) < 0; //@line 3291 "datetimemodule.c"
        if ($27) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 3291 "datetimemodule.c"
      case 5: // $bb7
        var $28=HEAP[$result]; //@line 3293 "datetimemodule.c"
        var $29=(($28)&4294967295); //@line 3293 "datetimemodule.c"
        var $30=HEAP[$29]; //@line 3293 "datetimemodule.c"
        var $31=((($30) - 1)&4294967295); //@line 3293 "datetimemodule.c"
        var $32=(($28)&4294967295); //@line 3293 "datetimemodule.c"
        HEAP[$32]=$31; //@line 3293 "datetimemodule.c"
        var $33=(($28)&4294967295); //@line 3293 "datetimemodule.c"
        var $34=HEAP[$33]; //@line 3293 "datetimemodule.c"
        var $35=((($34))|0)==0; //@line 3293 "datetimemodule.c"
        if ($35) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3293 "datetimemodule.c"
      case 6: // $bb8
        var $36=HEAP[$result]; //@line 3293 "datetimemodule.c"
        var $37=(($36+4)&4294967295); //@line 3293 "datetimemodule.c"
        var $38=HEAP[$37]; //@line 3293 "datetimemodule.c"
        var $39=(($38+24)&4294967295); //@line 3293 "datetimemodule.c"
        var $40=HEAP[$39]; //@line 3293 "datetimemodule.c"
        var $41=HEAP[$result]; //@line 3293 "datetimemodule.c"
        FUNCTION_TABLE[$40]($41); //@line 3293 "datetimemodule.c"
        __label__ = 7; break; //@line 3293 "datetimemodule.c"
      case 7: // $bb9
        HEAP[$0]=0; //@line 3294 "datetimemodule.c"
        __label__ = 9; break; //@line 3294 "datetimemodule.c"
      case 8: // $bb10
        var $buf11=$buf; //@line 3296 "datetimemodule.c"
        var $42=_PyString_FromString($buf11); //@line 3296 "datetimemodule.c"
        _PyString_ConcatAndDel($result, $42); //@line 3296 "datetimemodule.c"
        var $43=HEAP[$result]; //@line 3297 "datetimemodule.c"
        HEAP[$0]=$43; //@line 3297 "datetimemodule.c"
        __label__ = 9; break; //@line 3297 "datetimemodule.c"
      case 9: // $bb12
        var $44=HEAP[$0]; //@line 3288 "datetimemodule.c"
        HEAP[$retval]=$44; //@line 3288 "datetimemodule.c"
        __label__ = 10; break; //@line 3288 "datetimemodule.c"
      case 10: // $return
        var $retval13=HEAP[$retval]; //@line 3288 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 3288 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_strftime($self, $args, $kw) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kw_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $result=__stackBase__+20;
        var $tuple=__stackBase__+24;
        var $format=__stackBase__+28;
        var $format_len=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$kw_addr]=$kw;
        var $1=HEAP[$args_addr]; //@line 3309 "datetimemodule.c"
        var $2=HEAP[$kw_addr]; //@line 3309 "datetimemodule.c"
        var $3=__PyArg_ParseTupleAndKeywords_SizeT($1, $2, ((__str147)&4294967295), ((_keywords_12042)&4294967295), $format, $format_len); //@line 3309 "datetimemodule.c"
        var $4=((($3))|0)==0; //@line 3309 "datetimemodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3309 "datetimemodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 3311 "datetimemodule.c"
        __label__ = 9; break; //@line 3311 "datetimemodule.c"
      case 2: // $bb1
        var $5=HEAP[$self_addr]; //@line 3317 "datetimemodule.c"
        var $6=(($5+13)&4294967295); //@line 3317 "datetimemodule.c"
        var $7=(($6+2)&4294967295); //@line 3317 "datetimemodule.c"
        var $8=HEAP[$7]; //@line 3317 "datetimemodule.c"
        var $9=unSign(($8), 8, 0); //@line 3317 "datetimemodule.c"
        var $10=HEAP[$self_addr]; //@line 3317 "datetimemodule.c"
        var $11=(($10+13)&4294967295); //@line 3317 "datetimemodule.c"
        var $12=(($11+1)&4294967295); //@line 3317 "datetimemodule.c"
        var $13=HEAP[$12]; //@line 3317 "datetimemodule.c"
        var $14=unSign(($13), 8, 0); //@line 3317 "datetimemodule.c"
        var $15=HEAP[$self_addr]; //@line 3317 "datetimemodule.c"
        var $16=(($15+13)&4294967295); //@line 3317 "datetimemodule.c"
        var $17=(($16)&4294967295); //@line 3317 "datetimemodule.c"
        var $18=HEAP[$17]; //@line 3317 "datetimemodule.c"
        var $19=unSign(($18), 8, 0); //@line 3317 "datetimemodule.c"
        var $20=__Py_BuildValue_SizeT(((__str201)&4294967295), 1900, 1, 1, $19, $14, $9, 0, 1, -1); //@line 3317 "datetimemodule.c"
        HEAP[$tuple]=$20; //@line 3317 "datetimemodule.c"
        var $21=HEAP[$tuple]; //@line 3323 "datetimemodule.c"
        var $22=($21)==0; //@line 3323 "datetimemodule.c"
        if ($22) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3323 "datetimemodule.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 3324 "datetimemodule.c"
        __label__ = 9; break; //@line 3324 "datetimemodule.c"
      case 4: // $bb3
        var $23=HEAP[$tuple]; //@line 3325 "datetimemodule.c"
        var $24=_PyTuple_Size($23); //@line 3325 "datetimemodule.c"
        var $25=((($24))|0)!=9; //@line 3325 "datetimemodule.c"
        if ($25) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3325 "datetimemodule.c"
      case 5: // $bb4
        ___assert_fail(((__str202)&4294967295), ((__str1)&4294967295), 3325, ((___PRETTY_FUNCTION___12043)&4294967295)); //@line 3325 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 12034"; //@line 3325 "datetimemodule.c"
      case 6: // $bb5
        var $26=HEAP[$format_len]; //@line 3326 "datetimemodule.c"
        var $27=HEAP[$format]; //@line 3326 "datetimemodule.c"
        var $28=HEAP[$self_addr]; //@line 3326 "datetimemodule.c"
        var $29=$28; //@line 3326 "datetimemodule.c"
        var $30=HEAP[$tuple]; //@line 3326 "datetimemodule.c"
        var $31=_wrap_strftime($29, $27, $26, $30, __Py_NoneStruct); //@line 3326 "datetimemodule.c"
        HEAP[$result]=$31; //@line 3326 "datetimemodule.c"
        var $32=HEAP[$tuple]; //@line 3328 "datetimemodule.c"
        var $33=(($32)&4294967295); //@line 3328 "datetimemodule.c"
        var $34=HEAP[$33]; //@line 3328 "datetimemodule.c"
        var $35=((($34) - 1)&4294967295); //@line 3328 "datetimemodule.c"
        var $36=HEAP[$tuple]; //@line 3328 "datetimemodule.c"
        var $37=(($36)&4294967295); //@line 3328 "datetimemodule.c"
        HEAP[$37]=$35; //@line 3328 "datetimemodule.c"
        var $38=HEAP[$tuple]; //@line 3328 "datetimemodule.c"
        var $39=(($38)&4294967295); //@line 3328 "datetimemodule.c"
        var $40=HEAP[$39]; //@line 3328 "datetimemodule.c"
        var $41=((($40))|0)==0; //@line 3328 "datetimemodule.c"
        if ($41) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3328 "datetimemodule.c"
      case 7: // $bb6
        var $42=HEAP[$tuple]; //@line 3328 "datetimemodule.c"
        var $43=(($42+4)&4294967295); //@line 3328 "datetimemodule.c"
        var $44=HEAP[$43]; //@line 3328 "datetimemodule.c"
        var $45=(($44+24)&4294967295); //@line 3328 "datetimemodule.c"
        var $46=HEAP[$45]; //@line 3328 "datetimemodule.c"
        var $47=HEAP[$tuple]; //@line 3328 "datetimemodule.c"
        FUNCTION_TABLE[$46]($47); //@line 3328 "datetimemodule.c"
        __label__ = 8; break; //@line 3328 "datetimemodule.c"
      case 8: // $bb7
        var $48=HEAP[$result]; //@line 3329 "datetimemodule.c"
        HEAP[$0]=$48; //@line 3329 "datetimemodule.c"
        __label__ = 9; break; //@line 3329 "datetimemodule.c"
      case 9: // $bb8
        var $49=HEAP[$0]; //@line 3311 "datetimemodule.c"
        HEAP[$retval]=$49; //@line 3311 "datetimemodule.c"
        __label__ = 10; break; //@line 3311 "datetimemodule.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 3311 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 3311 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_richcompare($self, $other, $op) {
    var __stackBase__  = STACKTOP; STACKTOP += 48; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 48);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $other_addr=__stackBase__+4;
        var $op_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $iftmp_304=__stackBase__+20;
        var $diff=__stackBase__+24;
        var $n1=__stackBase__+28;
        var $n2=__stackBase__+32;
        var $offset1=__stackBase__+36;
        var $offset2=__stackBase__+40;
        var $result=__stackBase__+44;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$other_addr]=$other;
        HEAP[$op_addr]=$op;
        var $1=HEAP[$other_addr]; //@line 3347 "datetimemodule.c"
        var $2=(($1+4)&4294967295); //@line 3347 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 3347 "datetimemodule.c"
        var $4=($3)!=(_PyDateTime_TimeType); //@line 3347 "datetimemodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 9; break; } //@line 3347 "datetimemodule.c"
      case 1: // $bb
        var $5=HEAP[$other_addr]; //@line 3347 "datetimemodule.c"
        var $6=(($5+4)&4294967295); //@line 3347 "datetimemodule.c"
        var $7=HEAP[$6]; //@line 3347 "datetimemodule.c"
        var $8=_PyType_IsSubtype($7, _PyDateTime_TimeType); //@line 3347 "datetimemodule.c"
        var $9=((($8))|0)==0; //@line 3347 "datetimemodule.c"
        if ($9) { __label__ = 2; break; } else { __label__ = 9; break; } //@line 3347 "datetimemodule.c"
      case 2: // $bb1
        var $10=HEAP[$op_addr]; //@line 3348 "datetimemodule.c"
        var $11=((($10))|0)==2; //@line 3348 "datetimemodule.c"
        if ($11) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 3348 "datetimemodule.c"
      case 3: // $bb2
        var $12=HEAP[$op_addr]; //@line 3348 "datetimemodule.c"
        var $13=((($12))|0)==3; //@line 3348 "datetimemodule.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 8; break; } //@line 3348 "datetimemodule.c"
      case 4: // $bb3
        var $14=HEAP[$op_addr]; //@line 3349 "datetimemodule.c"
        var $15=((($14))|0)==2; //@line 3349 "datetimemodule.c"
        if ($15) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3349 "datetimemodule.c"
      case 5: // $bb4
        HEAP[$iftmp_304]=__Py_ZeroStruct; //@line 3349 "datetimemodule.c"
        __label__ = 7; break; //@line 3349 "datetimemodule.c"
      case 6: // $bb5
        HEAP[$iftmp_304]=__Py_TrueStruct; //@line 3349 "datetimemodule.c"
        __label__ = 7; break; //@line 3349 "datetimemodule.c"
      case 7: // $bb6
        var $16=HEAP[$iftmp_304]; //@line 3349 "datetimemodule.c"
        HEAP[$result]=$16; //@line 3349 "datetimemodule.c"
        var $17=HEAP[$result]; //@line 3350 "datetimemodule.c"
        var $18=(($17)&4294967295); //@line 3350 "datetimemodule.c"
        var $19=HEAP[$18]; //@line 3350 "datetimemodule.c"
        var $20=((($19) + 1)&4294967295); //@line 3350 "datetimemodule.c"
        var $21=HEAP[$result]; //@line 3350 "datetimemodule.c"
        var $22=(($21)&4294967295); //@line 3350 "datetimemodule.c"
        HEAP[$22]=$20; //@line 3350 "datetimemodule.c"
        var $23=HEAP[$result]; //@line 3351 "datetimemodule.c"
        HEAP[$0]=$23; //@line 3351 "datetimemodule.c"
        __label__ = 27; break; //@line 3351 "datetimemodule.c"
      case 8: // $bb7
        var $24=HEAP[$self_addr]; //@line 3354 "datetimemodule.c"
        var $25=$24; //@line 3354 "datetimemodule.c"
        var $26=HEAP[$other_addr]; //@line 3354 "datetimemodule.c"
        var $27=_cmperror($25, $26); //@line 3354 "datetimemodule.c"
        HEAP[$0]=$27; //@line 3354 "datetimemodule.c"
        __label__ = 27; break; //@line 3354 "datetimemodule.c"
      case 9: // $bb8
        var $28=HEAP[$self_addr]; //@line 3356 "datetimemodule.c"
        var $29=$28; //@line 3356 "datetimemodule.c"
        var $30=HEAP[$other_addr]; //@line 3356 "datetimemodule.c"
        var $31=_classify_two_utcoffsets($29, $offset1, $n1, __Py_NoneStruct, $30, $offset2, $n2, __Py_NoneStruct); //@line 3356 "datetimemodule.c"
        var $32=((($31))|0) < 0; //@line 3356 "datetimemodule.c"
        if ($32) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3356 "datetimemodule.c"
      case 10: // $bb9
        HEAP[$0]=0; //@line 3358 "datetimemodule.c"
        __label__ = 27; break; //@line 3358 "datetimemodule.c"
      case 11: // $bb10
        var $33=HEAP[$n1]; //@line 3359 "datetimemodule.c"
        var $34=((($33))|0)==1; //@line 3359 "datetimemodule.c"
        if ($34) { __label__ = 13; break; } else { __label__ = 12; break; } //@line 3359 "datetimemodule.c"
      case 12: // $bb11
        var $35=HEAP[$n2]; //@line 3359 "datetimemodule.c"
        var $36=((($35))|0)==1; //@line 3359 "datetimemodule.c"
        if ($36) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 3359 "datetimemodule.c"
      case 13: // $bb12
        ___assert_fail(((__str203)&4294967295), ((__str1)&4294967295), 3359, ((___PRETTY_FUNCTION___12084)&4294967295)); //@line 3359 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 12196"; //@line 3359 "datetimemodule.c"
      case 14: // $bb13
        var $37=HEAP[$n1]; //@line 3364 "datetimemodule.c"
        var $38=HEAP[$n2]; //@line 3364 "datetimemodule.c"
        var $39=((($37))|0)==((($38))|0); //@line 3364 "datetimemodule.c"
        if ($39) { __label__ = 15; break; } else { __label__ = 17; break; } //@line 3364 "datetimemodule.c"
      case 15: // $bb14
        var $40=HEAP[$offset1]; //@line 3364 "datetimemodule.c"
        var $41=HEAP[$offset2]; //@line 3364 "datetimemodule.c"
        var $42=((($40))|0)==((($41))|0); //@line 3364 "datetimemodule.c"
        if ($42) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 3364 "datetimemodule.c"
      case 16: // $bb15
        var $43=HEAP[$other_addr]; //@line 3365 "datetimemodule.c"
        var $44=$43; //@line 3365 "datetimemodule.c"
        var $45=(($44+13)&4294967295); //@line 3365 "datetimemodule.c"
        var $46=(($45)&4294967295); //@line 3365 "datetimemodule.c"
        var $47=HEAP[$self_addr]; //@line 3365 "datetimemodule.c"
        var $48=(($47+13)&4294967295); //@line 3365 "datetimemodule.c"
        var $49=(($48)&4294967295); //@line 3365 "datetimemodule.c"
        var $50=_memcmp($49, $46, 6); //@line 3365 "datetimemodule.c"
        HEAP[$diff]=$50; //@line 3365 "datetimemodule.c"
        var $51=HEAP[$diff]; //@line 3367 "datetimemodule.c"
        var $52=HEAP[$op_addr]; //@line 3367 "datetimemodule.c"
        var $53=_diff_to_bool($51, $52); //@line 3367 "datetimemodule.c"
        HEAP[$0]=$53; //@line 3367 "datetimemodule.c"
        __label__ = 27; break; //@line 3367 "datetimemodule.c"
      case 17: // $bb16
        var $54=HEAP[$n1]; //@line 3370 "datetimemodule.c"
        var $55=((($54))|0)==3; //@line 3370 "datetimemodule.c"
        if ($55) { __label__ = 18; break; } else { __label__ = 24; break; } //@line 3370 "datetimemodule.c"
      case 18: // $bb17
        var $56=HEAP[$n2]; //@line 3370 "datetimemodule.c"
        var $57=((($56))|0)==3; //@line 3370 "datetimemodule.c"
        if ($57) { __label__ = 19; break; } else { __label__ = 24; break; } //@line 3370 "datetimemodule.c"
      case 19: // $bb18
        var $58=HEAP[$offset1]; //@line 3371 "datetimemodule.c"
        var $59=HEAP[$offset2]; //@line 3371 "datetimemodule.c"
        var $60=((($58))|0)==((($59))|0); //@line 3371 "datetimemodule.c"
        if ($60) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 3371 "datetimemodule.c"
      case 20: // $bb19
        ___assert_fail(((__str204)&4294967295), ((__str1)&4294967295), 3371, ((___PRETTY_FUNCTION___12084)&4294967295)); //@line 3371 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 12244"; //@line 3371 "datetimemodule.c"
      case 21: // $bb20
        var $61=HEAP[$self_addr]; //@line 3375 "datetimemodule.c"
        var $62=(($61+13)&4294967295); //@line 3375 "datetimemodule.c"
        var $63=(($62)&4294967295); //@line 3375 "datetimemodule.c"
        var $64=HEAP[$63]; //@line 3375 "datetimemodule.c"
        var $65=unSign(($64), 8, 0); //@line 3375 "datetimemodule.c"
        var $66=((($65) * 3600)&4294967295); //@line 3375 "datetimemodule.c"
        var $67=HEAP[$self_addr]; //@line 3375 "datetimemodule.c"
        var $68=(($67+13)&4294967295); //@line 3375 "datetimemodule.c"
        var $69=(($68+1)&4294967295); //@line 3375 "datetimemodule.c"
        var $70=HEAP[$69]; //@line 3375 "datetimemodule.c"
        var $71=unSign(($70), 8, 0); //@line 3375 "datetimemodule.c"
        var $72=HEAP[$offset1]; //@line 3375 "datetimemodule.c"
        var $73=((($71) - ($72))&4294967295); //@line 3375 "datetimemodule.c"
        var $74=((($73) * 60)&4294967295); //@line 3375 "datetimemodule.c"
        var $75=((($66) + ($74))&4294967295); //@line 3375 "datetimemodule.c"
        var $76=HEAP[$self_addr]; //@line 3375 "datetimemodule.c"
        var $77=(($76+13)&4294967295); //@line 3375 "datetimemodule.c"
        var $78=(($77+2)&4294967295); //@line 3375 "datetimemodule.c"
        var $79=HEAP[$78]; //@line 3375 "datetimemodule.c"
        var $80=unSign(($79), 8, 0); //@line 3375 "datetimemodule.c"
        var $81=((($75) + ($80))&4294967295); //@line 3375 "datetimemodule.c"
        HEAP[$offset1]=$81; //@line 3375 "datetimemodule.c"
        var $82=HEAP[$other_addr]; //@line 3378 "datetimemodule.c"
        var $83=$82; //@line 3378 "datetimemodule.c"
        var $84=(($83+13)&4294967295); //@line 3378 "datetimemodule.c"
        var $85=(($84)&4294967295); //@line 3378 "datetimemodule.c"
        var $86=HEAP[$85]; //@line 3378 "datetimemodule.c"
        var $87=unSign(($86), 8, 0); //@line 3378 "datetimemodule.c"
        var $88=((($87) * 3600)&4294967295); //@line 3378 "datetimemodule.c"
        var $89=HEAP[$other_addr]; //@line 3378 "datetimemodule.c"
        var $90=$89; //@line 3378 "datetimemodule.c"
        var $91=(($90+13)&4294967295); //@line 3378 "datetimemodule.c"
        var $92=(($91+1)&4294967295); //@line 3378 "datetimemodule.c"
        var $93=HEAP[$92]; //@line 3378 "datetimemodule.c"
        var $94=unSign(($93), 8, 0); //@line 3378 "datetimemodule.c"
        var $95=HEAP[$offset2]; //@line 3378 "datetimemodule.c"
        var $96=((($94) - ($95))&4294967295); //@line 3378 "datetimemodule.c"
        var $97=((($96) * 60)&4294967295); //@line 3378 "datetimemodule.c"
        var $98=((($88) + ($97))&4294967295); //@line 3378 "datetimemodule.c"
        var $99=HEAP[$other_addr]; //@line 3378 "datetimemodule.c"
        var $100=$99; //@line 3378 "datetimemodule.c"
        var $101=(($100+13)&4294967295); //@line 3378 "datetimemodule.c"
        var $102=(($101+2)&4294967295); //@line 3378 "datetimemodule.c"
        var $103=HEAP[$102]; //@line 3378 "datetimemodule.c"
        var $104=unSign(($103), 8, 0); //@line 3378 "datetimemodule.c"
        var $105=((($98) + ($104))&4294967295); //@line 3378 "datetimemodule.c"
        HEAP[$offset2]=$105; //@line 3378 "datetimemodule.c"
        var $106=HEAP[$offset1]; //@line 3381 "datetimemodule.c"
        var $107=HEAP[$offset2]; //@line 3381 "datetimemodule.c"
        var $108=((($106) - ($107))&4294967295); //@line 3381 "datetimemodule.c"
        HEAP[$diff]=$108; //@line 3381 "datetimemodule.c"
        var $109=HEAP[$diff]; //@line 3382 "datetimemodule.c"
        var $110=((($109))|0)==0; //@line 3382 "datetimemodule.c"
        if ($110) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 3382 "datetimemodule.c"
      case 22: // $bb21
        var $111=HEAP[$self_addr]; //@line 3383 "datetimemodule.c"
        var $112=(($111+13)&4294967295); //@line 3383 "datetimemodule.c"
        var $113=(($112+3)&4294967295); //@line 3383 "datetimemodule.c"
        var $114=HEAP[$113]; //@line 3383 "datetimemodule.c"
        var $115=unSign(($114), 8, 0); //@line 3383 "datetimemodule.c"
        var $116=($115) << 16; //@line 3383 "datetimemodule.c"
        var $117=HEAP[$self_addr]; //@line 3383 "datetimemodule.c"
        var $118=(($117+13)&4294967295); //@line 3383 "datetimemodule.c"
        var $119=(($118+4)&4294967295); //@line 3383 "datetimemodule.c"
        var $120=HEAP[$119]; //@line 3383 "datetimemodule.c"
        var $121=unSign(($120), 8, 0); //@line 3383 "datetimemodule.c"
        var $122=($121) << 8; //@line 3383 "datetimemodule.c"
        var $123=($116) | ($122); //@line 3383 "datetimemodule.c"
        var $124=HEAP[$self_addr]; //@line 3383 "datetimemodule.c"
        var $125=(($124+13)&4294967295); //@line 3383 "datetimemodule.c"
        var $126=(($125+5)&4294967295); //@line 3383 "datetimemodule.c"
        var $127=HEAP[$126]; //@line 3383 "datetimemodule.c"
        var $128=unSign(($127), 8, 0); //@line 3383 "datetimemodule.c"
        var $129=($123) | ($128); //@line 3383 "datetimemodule.c"
        var $130=HEAP[$other_addr]; //@line 3383 "datetimemodule.c"
        var $131=$130; //@line 3383 "datetimemodule.c"
        var $132=(($131+13)&4294967295); //@line 3383 "datetimemodule.c"
        var $133=(($132+3)&4294967295); //@line 3383 "datetimemodule.c"
        var $134=HEAP[$133]; //@line 3383 "datetimemodule.c"
        var $135=unSign(($134), 8, 0); //@line 3383 "datetimemodule.c"
        var $136=($135) << 16; //@line 3383 "datetimemodule.c"
        var $137=HEAP[$other_addr]; //@line 3383 "datetimemodule.c"
        var $138=$137; //@line 3383 "datetimemodule.c"
        var $139=(($138+13)&4294967295); //@line 3383 "datetimemodule.c"
        var $140=(($139+4)&4294967295); //@line 3383 "datetimemodule.c"
        var $141=HEAP[$140]; //@line 3383 "datetimemodule.c"
        var $142=unSign(($141), 8, 0); //@line 3383 "datetimemodule.c"
        var $143=($142) << 8; //@line 3383 "datetimemodule.c"
        var $144=($136) | ($143); //@line 3383 "datetimemodule.c"
        var $145=HEAP[$other_addr]; //@line 3383 "datetimemodule.c"
        var $146=$145; //@line 3383 "datetimemodule.c"
        var $147=(($146+13)&4294967295); //@line 3383 "datetimemodule.c"
        var $148=(($147+5)&4294967295); //@line 3383 "datetimemodule.c"
        var $149=HEAP[$148]; //@line 3383 "datetimemodule.c"
        var $150=unSign(($149), 8, 0); //@line 3383 "datetimemodule.c"
        var $151=($144) | ($150); //@line 3383 "datetimemodule.c"
        var $152=((($129) - ($151))&4294967295); //@line 3383 "datetimemodule.c"
        HEAP[$diff]=$152; //@line 3383 "datetimemodule.c"
        __label__ = 23; break; //@line 3383 "datetimemodule.c"
      case 23: // $bb22
        var $153=HEAP[$diff]; //@line 3385 "datetimemodule.c"
        var $154=HEAP[$op_addr]; //@line 3385 "datetimemodule.c"
        var $155=_diff_to_bool($153, $154); //@line 3385 "datetimemodule.c"
        HEAP[$0]=$155; //@line 3385 "datetimemodule.c"
        __label__ = 27; break; //@line 3385 "datetimemodule.c"
      case 24: // $bb23
        var $156=HEAP[$n1]; //@line 3388 "datetimemodule.c"
        var $157=HEAP[$n2]; //@line 3388 "datetimemodule.c"
        var $158=((($156))|0)==((($157))|0); //@line 3388 "datetimemodule.c"
        if ($158) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 3388 "datetimemodule.c"
      case 25: // $bb24
        ___assert_fail(((__str205)&4294967295), ((__str1)&4294967295), 3388, ((___PRETTY_FUNCTION___12084)&4294967295)); //@line 3388 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 12363"; //@line 3388 "datetimemodule.c"
      case 26: // $bb25
        var $159=HEAP[_PyExc_TypeError]; //@line 3389 "datetimemodule.c"
        _PyErr_SetString($159, ((__str206)&4294967295)); //@line 3389 "datetimemodule.c"
        HEAP[$0]=0; //@line 3392 "datetimemodule.c"
        __label__ = 27; break; //@line 3392 "datetimemodule.c"
      case 27: // $bb26
        var $160=HEAP[$0]; //@line 3351 "datetimemodule.c"
        HEAP[$retval]=$160; //@line 3351 "datetimemodule.c"
        __label__ = 28; break; //@line 3351 "datetimemodule.c"
      case 28: // $return
        var $retval27=HEAP[$retval]; //@line 3351 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval27; //@line 3351 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_hash($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $n=__stackBase__+12;
        var $offset=__stackBase__+16;
        var $temp=__stackBase__+20;
        var $hour=__stackBase__+24;
        var $minute=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 3398 "datetimemodule.c"
        var $2=(($1+8)&4294967295); //@line 3398 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 3398 "datetimemodule.c"
        var $4=((($3))|0)==-1; //@line 3398 "datetimemodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 18; break; } //@line 3398 "datetimemodule.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 3403 "datetimemodule.c"
        var $6=$5; //@line 3403 "datetimemodule.c"
        var $7=_classify_utcoffset($6, __Py_NoneStruct, $offset); //@line 3403 "datetimemodule.c"
        HEAP[$n]=$7; //@line 3403 "datetimemodule.c"
        var $8=HEAP[$n]; //@line 3404 "datetimemodule.c"
        var $9=((($8))|0)==1; //@line 3404 "datetimemodule.c"
        if ($9) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3404 "datetimemodule.c"
      case 2: // $bb1
        ___assert_fail(((__str207)&4294967295), ((__str1)&4294967295), 3404, ((___PRETTY_FUNCTION___12202)&4294967295)); //@line 3404 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 12415"; //@line 3404 "datetimemodule.c"
      case 3: // $bb2
        var $10=HEAP[$n]; //@line 3405 "datetimemodule.c"
        var $11=((($10))|0)==0; //@line 3405 "datetimemodule.c"
        if ($11) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 3405 "datetimemodule.c"
      case 4: // $bb3
        HEAP[$0]=-1; //@line 3406 "datetimemodule.c"
        __label__ = 19; break; //@line 3406 "datetimemodule.c"
      case 5: // $bb4
        var $12=HEAP[$offset]; //@line 3409 "datetimemodule.c"
        var $13=((($12))|0)==0; //@line 3409 "datetimemodule.c"
        if ($13) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3409 "datetimemodule.c"
      case 6: // $bb5
        var $14=HEAP[$self_addr]; //@line 3410 "datetimemodule.c"
        var $15=(($14+13)&4294967295); //@line 3410 "datetimemodule.c"
        var $16=$15; //@line 3410 "datetimemodule.c"
        var $17=_PyString_FromStringAndSize($16, 6); //@line 3410 "datetimemodule.c"
        HEAP[$temp]=$17; //@line 3410 "datetimemodule.c"
        __label__ = 15; break; //@line 3410 "datetimemodule.c"
      case 7: // $bb6
        var $18=HEAP[$n]; //@line 3416 "datetimemodule.c"
        var $19=((($18))|0)!=3; //@line 3416 "datetimemodule.c"
        if ($19) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3416 "datetimemodule.c"
      case 8: // $bb7
        ___assert_fail(((__str208)&4294967295), ((__str1)&4294967295), 3416, ((___PRETTY_FUNCTION___12202)&4294967295)); //@line 3416 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 12448"; //@line 3416 "datetimemodule.c"
      case 9: // $bb8
        var $20=HEAP[$self_addr]; //@line 3417 "datetimemodule.c"
        var $21=$20; //@line 3417 "datetimemodule.c"
        var $22=(($21+12)&4294967295); //@line 3417 "datetimemodule.c"
        var $23=HEAP[$22]; //@line 3417 "datetimemodule.c"
        var $24=reSign(($23), 8, 0)==0; //@line 3417 "datetimemodule.c"
        if ($24) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3417 "datetimemodule.c"
      case 10: // $bb9
        ___assert_fail(((__str209)&4294967295), ((__str1)&4294967295), 3417, ((___PRETTY_FUNCTION___12202)&4294967295)); //@line 3417 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 12460"; //@line 3417 "datetimemodule.c"
      case 11: // $bb10
        var $25=HEAP[$self_addr]; //@line 3418 "datetimemodule.c"
        var $26=(($25+13)&4294967295); //@line 3418 "datetimemodule.c"
        var $27=(($26)&4294967295); //@line 3418 "datetimemodule.c"
        var $28=HEAP[$27]; //@line 3418 "datetimemodule.c"
        var $29=unSign(($28), 8, 0); //@line 3418 "datetimemodule.c"
        var $30=((($29) * 60)&4294967295); //@line 3418 "datetimemodule.c"
        var $31=HEAP[$self_addr]; //@line 3418 "datetimemodule.c"
        var $32=(($31+13)&4294967295); //@line 3418 "datetimemodule.c"
        var $33=(($32+1)&4294967295); //@line 3418 "datetimemodule.c"
        var $34=HEAP[$33]; //@line 3418 "datetimemodule.c"
        var $35=unSign(($34), 8, 0); //@line 3418 "datetimemodule.c"
        var $36=((($30) + ($35))&4294967295); //@line 3418 "datetimemodule.c"
        var $37=HEAP[$offset]; //@line 3418 "datetimemodule.c"
        var $38=((($36) - ($37))&4294967295); //@line 3418 "datetimemodule.c"
        var $39=_divmod($38, 60, $minute); //@line 3418 "datetimemodule.c"
        HEAP[$hour]=$39; //@line 3418 "datetimemodule.c"
        var $40=HEAP[$hour]; //@line 3422 "datetimemodule.c"
        var $41=((($40))|0) < 0; //@line 3422 "datetimemodule.c"
        if ($41) { __label__ = 14; break; } else { __label__ = 12; break; } //@line 3422 "datetimemodule.c"
      case 12: // $bb11
        var $42=HEAP[$hour]; //@line 3422 "datetimemodule.c"
        var $43=((($42))|0) > 23; //@line 3422 "datetimemodule.c"
        if ($43) { __label__ = 14; break; } else { __label__ = 13; break; } //@line 3422 "datetimemodule.c"
      case 13: // $bb12
        var $44=HEAP[$self_addr]; //@line 3423 "datetimemodule.c"
        var $45=(($44+13)&4294967295); //@line 3423 "datetimemodule.c"
        var $46=(($45+3)&4294967295); //@line 3423 "datetimemodule.c"
        var $47=HEAP[$46]; //@line 3423 "datetimemodule.c"
        var $48=unSign(($47), 8, 0); //@line 3423 "datetimemodule.c"
        var $49=($48) << 16; //@line 3423 "datetimemodule.c"
        var $50=HEAP[$self_addr]; //@line 3423 "datetimemodule.c"
        var $51=(($50+13)&4294967295); //@line 3423 "datetimemodule.c"
        var $52=(($51+4)&4294967295); //@line 3423 "datetimemodule.c"
        var $53=HEAP[$52]; //@line 3423 "datetimemodule.c"
        var $54=unSign(($53), 8, 0); //@line 3423 "datetimemodule.c"
        var $55=($54) << 8; //@line 3423 "datetimemodule.c"
        var $56=($49) | ($55); //@line 3423 "datetimemodule.c"
        var $57=HEAP[$self_addr]; //@line 3423 "datetimemodule.c"
        var $58=(($57+13)&4294967295); //@line 3423 "datetimemodule.c"
        var $59=(($58+5)&4294967295); //@line 3423 "datetimemodule.c"
        var $60=HEAP[$59]; //@line 3423 "datetimemodule.c"
        var $61=unSign(($60), 8, 0); //@line 3423 "datetimemodule.c"
        var $62=($56) | ($61); //@line 3423 "datetimemodule.c"
        var $63=HEAP[$self_addr]; //@line 3423 "datetimemodule.c"
        var $64=(($63+13)&4294967295); //@line 3423 "datetimemodule.c"
        var $65=(($64+2)&4294967295); //@line 3423 "datetimemodule.c"
        var $66=HEAP[$65]; //@line 3423 "datetimemodule.c"
        var $67=unSign(($66), 8, 0); //@line 3423 "datetimemodule.c"
        var $68=HEAP[$minute]; //@line 3423 "datetimemodule.c"
        var $69=HEAP[$hour]; //@line 3423 "datetimemodule.c"
        var $70=_new_time_ex($69, $68, $67, $62, __Py_NoneStruct, _PyDateTime_TimeType); //@line 3423 "datetimemodule.c"
        HEAP[$temp]=$70; //@line 3423 "datetimemodule.c"
        __label__ = 15; break; //@line 3423 "datetimemodule.c"
      case 14: // $bb13
        var $71=HEAP[$self_addr]; //@line 3428 "datetimemodule.c"
        var $72=(($71+13)&4294967295); //@line 3428 "datetimemodule.c"
        var $73=(($72+3)&4294967295); //@line 3428 "datetimemodule.c"
        var $74=HEAP[$73]; //@line 3428 "datetimemodule.c"
        var $75=unSign(($74), 8, 0); //@line 3428 "datetimemodule.c"
        var $76=($75) << 16; //@line 3428 "datetimemodule.c"
        var $77=HEAP[$self_addr]; //@line 3428 "datetimemodule.c"
        var $78=(($77+13)&4294967295); //@line 3428 "datetimemodule.c"
        var $79=(($78+4)&4294967295); //@line 3428 "datetimemodule.c"
        var $80=HEAP[$79]; //@line 3428 "datetimemodule.c"
        var $81=unSign(($80), 8, 0); //@line 3428 "datetimemodule.c"
        var $82=($81) << 8; //@line 3428 "datetimemodule.c"
        var $83=($76) | ($82); //@line 3428 "datetimemodule.c"
        var $84=HEAP[$self_addr]; //@line 3428 "datetimemodule.c"
        var $85=(($84+13)&4294967295); //@line 3428 "datetimemodule.c"
        var $86=(($85+5)&4294967295); //@line 3428 "datetimemodule.c"
        var $87=HEAP[$86]; //@line 3428 "datetimemodule.c"
        var $88=unSign(($87), 8, 0); //@line 3428 "datetimemodule.c"
        var $89=($83) | ($88); //@line 3428 "datetimemodule.c"
        var $90=HEAP[$self_addr]; //@line 3428 "datetimemodule.c"
        var $91=(($90+13)&4294967295); //@line 3428 "datetimemodule.c"
        var $92=(($91+2)&4294967295); //@line 3428 "datetimemodule.c"
        var $93=HEAP[$92]; //@line 3428 "datetimemodule.c"
        var $94=unSign(($93), 8, 0); //@line 3428 "datetimemodule.c"
        var $95=HEAP[$minute]; //@line 3428 "datetimemodule.c"
        var $96=HEAP[$hour]; //@line 3428 "datetimemodule.c"
        var $97=__Py_BuildValue_SizeT(((__str210)&4294967295), $96, $95, $94, $89); //@line 3428 "datetimemodule.c"
        HEAP[$temp]=$97; //@line 3428 "datetimemodule.c"
        __label__ = 15; break; //@line 3428 "datetimemodule.c"
      case 15: // $bb14
        var $98=HEAP[$temp]; //@line 3433 "datetimemodule.c"
        var $99=($98)!=0; //@line 3433 "datetimemodule.c"
        if ($99) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 3433 "datetimemodule.c"
      case 16: // $bb15
        var $100=HEAP[$temp]; //@line 3434 "datetimemodule.c"
        var $101=_PyObject_Hash($100); //@line 3434 "datetimemodule.c"
        var $102=HEAP[$self_addr]; //@line 3434 "datetimemodule.c"
        var $103=(($102+8)&4294967295); //@line 3434 "datetimemodule.c"
        HEAP[$103]=$101; //@line 3434 "datetimemodule.c"
        var $104=HEAP[$temp]; //@line 3435 "datetimemodule.c"
        var $105=(($104)&4294967295); //@line 3435 "datetimemodule.c"
        var $106=HEAP[$105]; //@line 3435 "datetimemodule.c"
        var $107=((($106) - 1)&4294967295); //@line 3435 "datetimemodule.c"
        var $108=HEAP[$temp]; //@line 3435 "datetimemodule.c"
        var $109=(($108)&4294967295); //@line 3435 "datetimemodule.c"
        HEAP[$109]=$107; //@line 3435 "datetimemodule.c"
        var $110=HEAP[$temp]; //@line 3435 "datetimemodule.c"
        var $111=(($110)&4294967295); //@line 3435 "datetimemodule.c"
        var $112=HEAP[$111]; //@line 3435 "datetimemodule.c"
        var $113=((($112))|0)==0; //@line 3435 "datetimemodule.c"
        if ($113) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 3435 "datetimemodule.c"
      case 17: // $bb16
        var $114=HEAP[$temp]; //@line 3435 "datetimemodule.c"
        var $115=(($114+4)&4294967295); //@line 3435 "datetimemodule.c"
        var $116=HEAP[$115]; //@line 3435 "datetimemodule.c"
        var $117=(($116+24)&4294967295); //@line 3435 "datetimemodule.c"
        var $118=HEAP[$117]; //@line 3435 "datetimemodule.c"
        var $119=HEAP[$temp]; //@line 3435 "datetimemodule.c"
        FUNCTION_TABLE[$118]($119); //@line 3435 "datetimemodule.c"
        __label__ = 18; break; //@line 3435 "datetimemodule.c"
      case 18: // $bb17
        var $120=HEAP[$self_addr]; //@line 3438 "datetimemodule.c"
        var $121=(($120+8)&4294967295); //@line 3438 "datetimemodule.c"
        var $122=HEAP[$121]; //@line 3438 "datetimemodule.c"
        HEAP[$0]=$122; //@line 3438 "datetimemodule.c"
        __label__ = 19; break; //@line 3438 "datetimemodule.c"
      case 19: // $bb18
        var $123=HEAP[$0]; //@line 3406 "datetimemodule.c"
        HEAP[$retval]=$123; //@line 3406 "datetimemodule.c"
        __label__ = 20; break; //@line 3406 "datetimemodule.c"
      case 20: // $return
        var $retval19=HEAP[$retval]; //@line 3406 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval19; //@line 3406 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_replace($self, $args, $kw) {
    var __stackBase__  = STACKTOP; STACKTOP += 52; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 52);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kw_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $iftmp_337=__stackBase__+20;
        var $clone=__stackBase__+24;
        var $tuple=__stackBase__+28;
        var $hh=__stackBase__+32;
        var $mm=__stackBase__+36;
        var $ss=__stackBase__+40;
        var $us=__stackBase__+44;
        var $tzinfo=__stackBase__+48;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$kw_addr]=$kw;
        var $1=HEAP[$self_addr]; //@line 3446 "datetimemodule.c"
        var $2=(($1+13)&4294967295); //@line 3446 "datetimemodule.c"
        var $3=(($2)&4294967295); //@line 3446 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 3446 "datetimemodule.c"
        var $5=unSign(($4), 8, 0); //@line 3446 "datetimemodule.c"
        HEAP[$hh]=$5; //@line 3446 "datetimemodule.c"
        var $6=HEAP[$self_addr]; //@line 3447 "datetimemodule.c"
        var $7=(($6+13)&4294967295); //@line 3447 "datetimemodule.c"
        var $8=(($7+1)&4294967295); //@line 3447 "datetimemodule.c"
        var $9=HEAP[$8]; //@line 3447 "datetimemodule.c"
        var $10=unSign(($9), 8, 0); //@line 3447 "datetimemodule.c"
        HEAP[$mm]=$10; //@line 3447 "datetimemodule.c"
        var $11=HEAP[$self_addr]; //@line 3448 "datetimemodule.c"
        var $12=(($11+13)&4294967295); //@line 3448 "datetimemodule.c"
        var $13=(($12+2)&4294967295); //@line 3448 "datetimemodule.c"
        var $14=HEAP[$13]; //@line 3448 "datetimemodule.c"
        var $15=unSign(($14), 8, 0); //@line 3448 "datetimemodule.c"
        HEAP[$ss]=$15; //@line 3448 "datetimemodule.c"
        var $16=HEAP[$self_addr]; //@line 3449 "datetimemodule.c"
        var $17=(($16+13)&4294967295); //@line 3449 "datetimemodule.c"
        var $18=(($17+3)&4294967295); //@line 3449 "datetimemodule.c"
        var $19=HEAP[$18]; //@line 3449 "datetimemodule.c"
        var $20=unSign(($19), 8, 0); //@line 3449 "datetimemodule.c"
        var $21=($20) << 16; //@line 3449 "datetimemodule.c"
        var $22=HEAP[$self_addr]; //@line 3449 "datetimemodule.c"
        var $23=(($22+13)&4294967295); //@line 3449 "datetimemodule.c"
        var $24=(($23+4)&4294967295); //@line 3449 "datetimemodule.c"
        var $25=HEAP[$24]; //@line 3449 "datetimemodule.c"
        var $26=unSign(($25), 8, 0); //@line 3449 "datetimemodule.c"
        var $27=($26) << 8; //@line 3449 "datetimemodule.c"
        var $28=($21) | ($27); //@line 3449 "datetimemodule.c"
        var $29=HEAP[$self_addr]; //@line 3449 "datetimemodule.c"
        var $30=(($29+13)&4294967295); //@line 3449 "datetimemodule.c"
        var $31=(($30+5)&4294967295); //@line 3449 "datetimemodule.c"
        var $32=HEAP[$31]; //@line 3449 "datetimemodule.c"
        var $33=unSign(($32), 8, 0); //@line 3449 "datetimemodule.c"
        var $34=($28) | ($33); //@line 3449 "datetimemodule.c"
        HEAP[$us]=$34; //@line 3449 "datetimemodule.c"
        var $35=HEAP[$self_addr]; //@line 3450 "datetimemodule.c"
        var $36=$35; //@line 3450 "datetimemodule.c"
        var $37=(($36+12)&4294967295); //@line 3450 "datetimemodule.c"
        var $38=HEAP[$37]; //@line 3450 "datetimemodule.c"
        var $39=reSign(($38), 8, 0)!=0; //@line 3450 "datetimemodule.c"
        if ($39) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3450 "datetimemodule.c"
      case 1: // $bb
        var $40=HEAP[$self_addr]; //@line 3450 "datetimemodule.c"
        var $41=(($40+20)&4294967295); //@line 3450 "datetimemodule.c"
        var $42=HEAP[$41]; //@line 3450 "datetimemodule.c"
        HEAP[$iftmp_337]=$42; //@line 3450 "datetimemodule.c"
        __label__ = 3; break; //@line 3450 "datetimemodule.c"
      case 2: // $bb1
        HEAP[$iftmp_337]=__Py_NoneStruct; //@line 3450 "datetimemodule.c"
        __label__ = 3; break; //@line 3450 "datetimemodule.c"
      case 3: // $bb2
        var $43=HEAP[$iftmp_337]; //@line 3450 "datetimemodule.c"
        HEAP[$tzinfo]=$43; //@line 3450 "datetimemodule.c"
        var $44=HEAP[$args_addr]; //@line 3452 "datetimemodule.c"
        var $45=HEAP[$kw_addr]; //@line 3452 "datetimemodule.c"
        var $46=__PyArg_ParseTupleAndKeywords_SizeT($44, $45, ((__str211)&4294967295), ((_time_kws)&4294967295), $hh, $mm, $ss, $us, $tzinfo); //@line 3452 "datetimemodule.c"
        var $47=((($46))|0)==0; //@line 3452 "datetimemodule.c"
        if ($47) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 3452 "datetimemodule.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 3455 "datetimemodule.c"
        __label__ = 10; break; //@line 3455 "datetimemodule.c"
      case 5: // $bb4
        var $48=HEAP[$tzinfo]; //@line 3456 "datetimemodule.c"
        var $49=HEAP[$us]; //@line 3456 "datetimemodule.c"
        var $50=HEAP[$ss]; //@line 3456 "datetimemodule.c"
        var $51=HEAP[$mm]; //@line 3456 "datetimemodule.c"
        var $52=HEAP[$hh]; //@line 3456 "datetimemodule.c"
        var $53=__Py_BuildValue_SizeT(((__str212)&4294967295), $52, $51, $50, $49, $48); //@line 3456 "datetimemodule.c"
        HEAP[$tuple]=$53; //@line 3456 "datetimemodule.c"
        var $54=HEAP[$tuple]; //@line 3457 "datetimemodule.c"
        var $55=($54)==0; //@line 3457 "datetimemodule.c"
        if ($55) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3457 "datetimemodule.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 3458 "datetimemodule.c"
        __label__ = 10; break; //@line 3458 "datetimemodule.c"
      case 7: // $bb6
        var $56=HEAP[$self_addr]; //@line 3459 "datetimemodule.c"
        var $57=$56; //@line 3459 "datetimemodule.c"
        var $58=(($57+4)&4294967295); //@line 3459 "datetimemodule.c"
        var $59=HEAP[$58]; //@line 3459 "datetimemodule.c"
        var $60=HEAP[$tuple]; //@line 3459 "datetimemodule.c"
        var $61=_time_new($59, $60, 0); //@line 3459 "datetimemodule.c"
        HEAP[$clone]=$61; //@line 3459 "datetimemodule.c"
        var $62=HEAP[$tuple]; //@line 3460 "datetimemodule.c"
        var $63=(($62)&4294967295); //@line 3460 "datetimemodule.c"
        var $64=HEAP[$63]; //@line 3460 "datetimemodule.c"
        var $65=((($64) - 1)&4294967295); //@line 3460 "datetimemodule.c"
        var $66=HEAP[$tuple]; //@line 3460 "datetimemodule.c"
        var $67=(($66)&4294967295); //@line 3460 "datetimemodule.c"
        HEAP[$67]=$65; //@line 3460 "datetimemodule.c"
        var $68=HEAP[$tuple]; //@line 3460 "datetimemodule.c"
        var $69=(($68)&4294967295); //@line 3460 "datetimemodule.c"
        var $70=HEAP[$69]; //@line 3460 "datetimemodule.c"
        var $71=((($70))|0)==0; //@line 3460 "datetimemodule.c"
        if ($71) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3460 "datetimemodule.c"
      case 8: // $bb7
        var $72=HEAP[$tuple]; //@line 3460 "datetimemodule.c"
        var $73=(($72+4)&4294967295); //@line 3460 "datetimemodule.c"
        var $74=HEAP[$73]; //@line 3460 "datetimemodule.c"
        var $75=(($74+24)&4294967295); //@line 3460 "datetimemodule.c"
        var $76=HEAP[$75]; //@line 3460 "datetimemodule.c"
        var $77=HEAP[$tuple]; //@line 3460 "datetimemodule.c"
        FUNCTION_TABLE[$76]($77); //@line 3460 "datetimemodule.c"
        __label__ = 9; break; //@line 3460 "datetimemodule.c"
      case 9: // $bb8
        var $78=HEAP[$clone]; //@line 3461 "datetimemodule.c"
        HEAP[$0]=$78; //@line 3461 "datetimemodule.c"
        __label__ = 10; break; //@line 3461 "datetimemodule.c"
      case 10: // $bb9
        var $79=HEAP[$0]; //@line 3455 "datetimemodule.c"
        HEAP[$retval]=$79; //@line 3455 "datetimemodule.c"
        __label__ = 11; break; //@line 3455 "datetimemodule.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 3455 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 3455 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_nonzero($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $offset=__stackBase__+12;
        var $none=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 3470 "datetimemodule.c"
        var $2=(($1+13)&4294967295); //@line 3470 "datetimemodule.c"
        var $3=(($2+2)&4294967295); //@line 3470 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 3470 "datetimemodule.c"
        var $5=reSign(($4), 8, 0)!=0; //@line 3470 "datetimemodule.c"
        if ($5) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 3470 "datetimemodule.c"
      case 1: // $bb
        var $6=HEAP[$self_addr]; //@line 3470 "datetimemodule.c"
        var $7=(($6+13)&4294967295); //@line 3470 "datetimemodule.c"
        var $8=(($7+3)&4294967295); //@line 3470 "datetimemodule.c"
        var $9=HEAP[$8]; //@line 3470 "datetimemodule.c"
        var $10=unSign(($9), 8, 0); //@line 3470 "datetimemodule.c"
        var $11=($10) << 16; //@line 3470 "datetimemodule.c"
        var $12=HEAP[$self_addr]; //@line 3470 "datetimemodule.c"
        var $13=(($12+13)&4294967295); //@line 3470 "datetimemodule.c"
        var $14=(($13+4)&4294967295); //@line 3470 "datetimemodule.c"
        var $15=HEAP[$14]; //@line 3470 "datetimemodule.c"
        var $16=unSign(($15), 8, 0); //@line 3470 "datetimemodule.c"
        var $17=($16) << 8; //@line 3470 "datetimemodule.c"
        var $18=($11) | ($17); //@line 3470 "datetimemodule.c"
        var $19=HEAP[$self_addr]; //@line 3470 "datetimemodule.c"
        var $20=(($19+13)&4294967295); //@line 3470 "datetimemodule.c"
        var $21=(($20+5)&4294967295); //@line 3470 "datetimemodule.c"
        var $22=HEAP[$21]; //@line 3470 "datetimemodule.c"
        var $23=unSign(($22), 8, 0); //@line 3470 "datetimemodule.c"
        var $24=($18) | ($23); //@line 3470 "datetimemodule.c"
        var $25=((($24))|0)!=0; //@line 3470 "datetimemodule.c"
        if ($25) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3470 "datetimemodule.c"
      case 2: // $bb1
        HEAP[$0]=1; //@line 3474 "datetimemodule.c"
        __label__ = 9; break; //@line 3474 "datetimemodule.c"
      case 3: // $bb2
        HEAP[$offset]=0; //@line 3476 "datetimemodule.c"
        var $26=HEAP[$self_addr]; //@line 3477 "datetimemodule.c"
        var $27=$26; //@line 3477 "datetimemodule.c"
        var $28=(($27+12)&4294967295); //@line 3477 "datetimemodule.c"
        var $29=HEAP[$28]; //@line 3477 "datetimemodule.c"
        var $30=reSign(($29), 8, 0)!=0; //@line 3477 "datetimemodule.c"
        if ($30) { __label__ = 4; break; } else { __label__ = 8; break; } //@line 3477 "datetimemodule.c"
      case 4: // $bb3
        var $31=HEAP[$self_addr]; //@line 3477 "datetimemodule.c"
        var $32=(($31+20)&4294967295); //@line 3477 "datetimemodule.c"
        var $33=HEAP[$32]; //@line 3477 "datetimemodule.c"
        var $34=($33)!=(__Py_NoneStruct); //@line 3477 "datetimemodule.c"
        if ($34) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 3477 "datetimemodule.c"
      case 5: // $bb4
        var $35=HEAP[$self_addr]; //@line 3478 "datetimemodule.c"
        var $36=(($35+20)&4294967295); //@line 3478 "datetimemodule.c"
        var $37=HEAP[$36]; //@line 3478 "datetimemodule.c"
        var $38=_call_utcoffset($37, __Py_NoneStruct, $none); //@line 3478 "datetimemodule.c"
        HEAP[$offset]=$38; //@line 3478 "datetimemodule.c"
        var $39=HEAP[$offset]; //@line 3479 "datetimemodule.c"
        var $40=((($39))|0)==-1; //@line 3479 "datetimemodule.c"
        if ($40) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 3479 "datetimemodule.c"
      case 6: // $bb5
        var $41=_PyErr_Occurred(); //@line 3479 "datetimemodule.c"
        var $42=($41)!=0; //@line 3479 "datetimemodule.c"
        if ($42) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3479 "datetimemodule.c"
      case 7: // $bb6
        HEAP[$0]=-1; //@line 3480 "datetimemodule.c"
        __label__ = 9; break; //@line 3480 "datetimemodule.c"
      case 8: // $bb7
        var $43=HEAP[$self_addr]; //@line 3482 "datetimemodule.c"
        var $44=(($43+13)&4294967295); //@line 3482 "datetimemodule.c"
        var $45=(($44+1)&4294967295); //@line 3482 "datetimemodule.c"
        var $46=HEAP[$45]; //@line 3482 "datetimemodule.c"
        var $47=unSign(($46), 8, 0); //@line 3482 "datetimemodule.c"
        var $48=HEAP[$offset]; //@line 3482 "datetimemodule.c"
        var $49=((($47) - ($48))&4294967295); //@line 3482 "datetimemodule.c"
        var $50=HEAP[$self_addr]; //@line 3482 "datetimemodule.c"
        var $51=(($50+13)&4294967295); //@line 3482 "datetimemodule.c"
        var $52=(($51)&4294967295); //@line 3482 "datetimemodule.c"
        var $53=HEAP[$52]; //@line 3482 "datetimemodule.c"
        var $54=unSign(($53), 8, 0); //@line 3482 "datetimemodule.c"
        var $55=((($54) * 60)&4294967295); //@line 3482 "datetimemodule.c"
        var $56=((($49) + ($55))&4294967295); //@line 3482 "datetimemodule.c"
        var $57=((($56))|0)!=0; //@line 3482 "datetimemodule.c"
        var $58=unSign(($57), 1, 0); //@line 3482 "datetimemodule.c"
        HEAP[$0]=$58; //@line 3482 "datetimemodule.c"
        __label__ = 9; break; //@line 3482 "datetimemodule.c"
      case 9: // $bb8
        var $59=HEAP[$0]; //@line 3474 "datetimemodule.c"
        HEAP[$retval]=$59; //@line 3474 "datetimemodule.c"
        __label__ = 10; break; //@line 3474 "datetimemodule.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 3474 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 3474 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_getstate($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $basestate=__stackBase__+12;
        var $result=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$result]=0; //@line 3496 "datetimemodule.c"
        var $1=HEAP[$self_addr]; //@line 3498 "datetimemodule.c"
        var $2=(($1+13)&4294967295); //@line 3498 "datetimemodule.c"
        var $3=$2; //@line 3498 "datetimemodule.c"
        var $4=_PyString_FromStringAndSize($3, 6); //@line 3498 "datetimemodule.c"
        HEAP[$basestate]=$4; //@line 3498 "datetimemodule.c"
        var $5=HEAP[$basestate]; //@line 3500 "datetimemodule.c"
        var $6=($5)!=0; //@line 3500 "datetimemodule.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 7; break; } //@line 3500 "datetimemodule.c"
      case 1: // $bb
        var $7=HEAP[$self_addr]; //@line 3501 "datetimemodule.c"
        var $8=$7; //@line 3501 "datetimemodule.c"
        var $9=(($8+12)&4294967295); //@line 3501 "datetimemodule.c"
        var $10=HEAP[$9]; //@line 3501 "datetimemodule.c"
        var $11=reSign(($10), 8, 0)==0; //@line 3501 "datetimemodule.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 3501 "datetimemodule.c"
      case 2: // $bb1
        var $12=HEAP[$self_addr]; //@line 3501 "datetimemodule.c"
        var $13=(($12+20)&4294967295); //@line 3501 "datetimemodule.c"
        var $14=HEAP[$13]; //@line 3501 "datetimemodule.c"
        var $15=($14)==(__Py_NoneStruct); //@line 3501 "datetimemodule.c"
        if ($15) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3501 "datetimemodule.c"
      case 3: // $bb2
        var $16=HEAP[$basestate]; //@line 3502 "datetimemodule.c"
        var $17=_PyTuple_Pack(1, $16); //@line 3502 "datetimemodule.c"
        HEAP[$result]=$17; //@line 3502 "datetimemodule.c"
        __label__ = 5; break; //@line 3502 "datetimemodule.c"
      case 4: // $bb3
        var $18=HEAP[$self_addr]; //@line 3504 "datetimemodule.c"
        var $19=(($18+20)&4294967295); //@line 3504 "datetimemodule.c"
        var $20=HEAP[$19]; //@line 3504 "datetimemodule.c"
        var $21=HEAP[$basestate]; //@line 3504 "datetimemodule.c"
        var $22=_PyTuple_Pack(2, $21, $20); //@line 3504 "datetimemodule.c"
        HEAP[$result]=$22; //@line 3504 "datetimemodule.c"
        __label__ = 5; break; //@line 3504 "datetimemodule.c"
      case 5: // $bb4
        var $23=HEAP[$basestate]; //@line 3505 "datetimemodule.c"
        var $24=(($23)&4294967295); //@line 3505 "datetimemodule.c"
        var $25=HEAP[$24]; //@line 3505 "datetimemodule.c"
        var $26=((($25) - 1)&4294967295); //@line 3505 "datetimemodule.c"
        var $27=HEAP[$basestate]; //@line 3505 "datetimemodule.c"
        var $28=(($27)&4294967295); //@line 3505 "datetimemodule.c"
        HEAP[$28]=$26; //@line 3505 "datetimemodule.c"
        var $29=HEAP[$basestate]; //@line 3505 "datetimemodule.c"
        var $30=(($29)&4294967295); //@line 3505 "datetimemodule.c"
        var $31=HEAP[$30]; //@line 3505 "datetimemodule.c"
        var $32=((($31))|0)==0; //@line 3505 "datetimemodule.c"
        if ($32) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3505 "datetimemodule.c"
      case 6: // $bb5
        var $33=HEAP[$basestate]; //@line 3505 "datetimemodule.c"
        var $34=(($33+4)&4294967295); //@line 3505 "datetimemodule.c"
        var $35=HEAP[$34]; //@line 3505 "datetimemodule.c"
        var $36=(($35+24)&4294967295); //@line 3505 "datetimemodule.c"
        var $37=HEAP[$36]; //@line 3505 "datetimemodule.c"
        var $38=HEAP[$basestate]; //@line 3505 "datetimemodule.c"
        FUNCTION_TABLE[$37]($38); //@line 3505 "datetimemodule.c"
        __label__ = 7; break; //@line 3505 "datetimemodule.c"
      case 7: // $bb6
        var $39=HEAP[$result]; //@line 3507 "datetimemodule.c"
        HEAP[$0]=$39; //@line 3507 "datetimemodule.c"
        var $40=HEAP[$0]; //@line 3507 "datetimemodule.c"
        HEAP[$retval]=$40; //@line 3507 "datetimemodule.c"
        __label__ = 8; break; //@line 3507 "datetimemodule.c"
      case 8: // $return
        var $retval7=HEAP[$retval]; //@line 3507 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 3507 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_reduce($self, $arg) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $arg_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$arg_addr]=$arg;
        var $1=HEAP[$self_addr]; //@line 3513 "datetimemodule.c"
        var $2=_time_getstate($1); //@line 3513 "datetimemodule.c"
        var $3=HEAP[$self_addr]; //@line 3513 "datetimemodule.c"
        var $4=$3; //@line 3513 "datetimemodule.c"
        var $5=(($4+4)&4294967295); //@line 3513 "datetimemodule.c"
        var $6=HEAP[$5]; //@line 3513 "datetimemodule.c"
        var $7=__Py_BuildValue_SizeT(((__str154)&4294967295), $6, $2); //@line 3513 "datetimemodule.c"
        HEAP[$0]=$7; //@line 3513 "datetimemodule.c"
        var $8=HEAP[$0]; //@line 3513 "datetimemodule.c"
        HEAP[$retval]=$8; //@line 3513 "datetimemodule.c"
        __label__ = 1; break; //@line 3513 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 3513 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 3513 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_hour($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $unused_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$unused_addr]=$unused;
        var $1=HEAP[$self_addr]; //@line 3621 "datetimemodule.c"
        var $2=(($1+13)&4294967295); //@line 3621 "datetimemodule.c"
        var $3=(($2+4)&4294967295); //@line 3621 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 3621 "datetimemodule.c"
        var $5=unSign(($4), 8, 0); //@line 3621 "datetimemodule.c"
        var $6=_PyInt_FromLong($5); //@line 3621 "datetimemodule.c"
        HEAP[$0]=$6; //@line 3621 "datetimemodule.c"
        var $7=HEAP[$0]; //@line 3621 "datetimemodule.c"
        HEAP[$retval]=$7; //@line 3621 "datetimemodule.c"
        __label__ = 1; break; //@line 3621 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 3621 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 3621 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_minute($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $unused_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$unused_addr]=$unused;
        var $1=HEAP[$self_addr]; //@line 3627 "datetimemodule.c"
        var $2=(($1+13)&4294967295); //@line 3627 "datetimemodule.c"
        var $3=(($2+5)&4294967295); //@line 3627 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 3627 "datetimemodule.c"
        var $5=unSign(($4), 8, 0); //@line 3627 "datetimemodule.c"
        var $6=_PyInt_FromLong($5); //@line 3627 "datetimemodule.c"
        HEAP[$0]=$6; //@line 3627 "datetimemodule.c"
        var $7=HEAP[$0]; //@line 3627 "datetimemodule.c"
        HEAP[$retval]=$7; //@line 3627 "datetimemodule.c"
        __label__ = 1; break; //@line 3627 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 3627 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 3627 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_second($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $unused_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$unused_addr]=$unused;
        var $1=HEAP[$self_addr]; //@line 3633 "datetimemodule.c"
        var $2=(($1+13)&4294967295); //@line 3633 "datetimemodule.c"
        var $3=(($2+6)&4294967295); //@line 3633 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 3633 "datetimemodule.c"
        var $5=unSign(($4), 8, 0); //@line 3633 "datetimemodule.c"
        var $6=_PyInt_FromLong($5); //@line 3633 "datetimemodule.c"
        HEAP[$0]=$6; //@line 3633 "datetimemodule.c"
        var $7=HEAP[$0]; //@line 3633 "datetimemodule.c"
        HEAP[$retval]=$7; //@line 3633 "datetimemodule.c"
        __label__ = 1; break; //@line 3633 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 3633 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 3633 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_microsecond($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $unused_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$unused_addr]=$unused;
        var $1=HEAP[$self_addr]; //@line 3639 "datetimemodule.c"
        var $2=(($1+13)&4294967295); //@line 3639 "datetimemodule.c"
        var $3=(($2+7)&4294967295); //@line 3639 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 3639 "datetimemodule.c"
        var $5=unSign(($4), 8, 0); //@line 3639 "datetimemodule.c"
        var $6=($5) << 16; //@line 3639 "datetimemodule.c"
        var $7=HEAP[$self_addr]; //@line 3639 "datetimemodule.c"
        var $8=(($7+13)&4294967295); //@line 3639 "datetimemodule.c"
        var $9=(($8+8)&4294967295); //@line 3639 "datetimemodule.c"
        var $10=HEAP[$9]; //@line 3639 "datetimemodule.c"
        var $11=unSign(($10), 8, 0); //@line 3639 "datetimemodule.c"
        var $12=($11) << 8; //@line 3639 "datetimemodule.c"
        var $13=($6) | ($12); //@line 3639 "datetimemodule.c"
        var $14=HEAP[$self_addr]; //@line 3639 "datetimemodule.c"
        var $15=(($14+13)&4294967295); //@line 3639 "datetimemodule.c"
        var $16=(($15+9)&4294967295); //@line 3639 "datetimemodule.c"
        var $17=HEAP[$16]; //@line 3639 "datetimemodule.c"
        var $18=unSign(($17), 8, 0); //@line 3639 "datetimemodule.c"
        var $19=($13) | ($18); //@line 3639 "datetimemodule.c"
        var $20=_PyInt_FromLong($19); //@line 3639 "datetimemodule.c"
        HEAP[$0]=$20; //@line 3639 "datetimemodule.c"
        var $21=HEAP[$0]; //@line 3639 "datetimemodule.c"
        HEAP[$retval]=$21; //@line 3639 "datetimemodule.c"
        __label__ = 1; break; //@line 3639 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 3639 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 3639 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_tzinfo($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $unused_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $iftmp_348=__stackBase__+16;
        var $result=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$unused_addr]=$unused;
        var $1=HEAP[$self_addr]; //@line 3645 "datetimemodule.c"
        var $2=$1; //@line 3645 "datetimemodule.c"
        var $3=(($2+12)&4294967295); //@line 3645 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 3645 "datetimemodule.c"
        var $5=reSign(($4), 8, 0)!=0; //@line 3645 "datetimemodule.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3645 "datetimemodule.c"
      case 1: // $bb
        var $6=HEAP[$self_addr]; //@line 3645 "datetimemodule.c"
        var $7=(($6+24)&4294967295); //@line 3645 "datetimemodule.c"
        var $8=HEAP[$7]; //@line 3645 "datetimemodule.c"
        HEAP[$iftmp_348]=$8; //@line 3645 "datetimemodule.c"
        __label__ = 3; break; //@line 3645 "datetimemodule.c"
      case 2: // $bb1
        HEAP[$iftmp_348]=__Py_NoneStruct; //@line 3645 "datetimemodule.c"
        __label__ = 3; break; //@line 3645 "datetimemodule.c"
      case 3: // $bb2
        var $9=HEAP[$iftmp_348]; //@line 3645 "datetimemodule.c"
        HEAP[$result]=$9; //@line 3645 "datetimemodule.c"
        var $10=HEAP[$result]; //@line 3646 "datetimemodule.c"
        var $11=(($10)&4294967295); //@line 3646 "datetimemodule.c"
        var $12=HEAP[$11]; //@line 3646 "datetimemodule.c"
        var $13=((($12) + 1)&4294967295); //@line 3646 "datetimemodule.c"
        var $14=HEAP[$result]; //@line 3646 "datetimemodule.c"
        var $15=(($14)&4294967295); //@line 3646 "datetimemodule.c"
        HEAP[$15]=$13; //@line 3646 "datetimemodule.c"
        var $16=HEAP[$result]; //@line 3647 "datetimemodule.c"
        HEAP[$0]=$16; //@line 3647 "datetimemodule.c"
        var $17=HEAP[$0]; //@line 3647 "datetimemodule.c"
        HEAP[$retval]=$17; //@line 3647 "datetimemodule.c"
        __label__ = 4; break; //@line 3647 "datetimemodule.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 3647 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 3647 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_new($type, $args, $kw) {
    var __stackBase__  = STACKTOP; STACKTOP += 69; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 69);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $type_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kw_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $self=__stackBase__+20;
        var $state=__stackBase__+24;
        var $year=__stackBase__+28;
        var $month=__stackBase__+32;
        var $day=__stackBase__+36;
        var $hour=__stackBase__+40;
        var $minute=__stackBase__+44;
        var $second=__stackBase__+48;
        var $usecond=__stackBase__+52;
        var $tzinfo=__stackBase__+56;
        var $me=__stackBase__+60;
        var $aware=__stackBase__+64;
        var $pdata=__stackBase__+65;
        var $_alloca_point_=0;
        HEAP[$type_addr]=$type;
        HEAP[$args_addr]=$args;
        HEAP[$kw_addr]=$kw;
        HEAP[$self]=0; //@line 3671 "datetimemodule.c"
        HEAP[$hour]=0; //@line 3676 "datetimemodule.c"
        HEAP[$minute]=0; //@line 3677 "datetimemodule.c"
        HEAP[$second]=0; //@line 3678 "datetimemodule.c"
        HEAP[$usecond]=0; //@line 3679 "datetimemodule.c"
        HEAP[$tzinfo]=__Py_NoneStruct; //@line 3680 "datetimemodule.c"
        var $1=HEAP[$args_addr]; //@line 3683 "datetimemodule.c"
        var $2=$1; //@line 3683 "datetimemodule.c"
        var $3=(($2+8)&4294967295); //@line 3683 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 3683 "datetimemodule.c"
        var $5=((($4))|0) > 0; //@line 3683 "datetimemodule.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 12; break; } //@line 3683 "datetimemodule.c"
      case 1: // $bb
        var $6=HEAP[$args_addr]; //@line 3683 "datetimemodule.c"
        var $7=$6; //@line 3683 "datetimemodule.c"
        var $8=(($7+8)&4294967295); //@line 3683 "datetimemodule.c"
        var $9=HEAP[$8]; //@line 3683 "datetimemodule.c"
        var $10=((($9))|0) <= 2; //@line 3683 "datetimemodule.c"
        if ($10) { __label__ = 2; break; } else { __label__ = 12; break; } //@line 3683 "datetimemodule.c"
      case 2: // $bb1
        var $11=HEAP[$args_addr]; //@line 3683 "datetimemodule.c"
        var $12=$11; //@line 3683 "datetimemodule.c"
        var $13=(($12+12)&4294967295); //@line 3683 "datetimemodule.c"
        var $14=(($13)&4294967295); //@line 3683 "datetimemodule.c"
        var $15=HEAP[$14]; //@line 3683 "datetimemodule.c"
        HEAP[$state]=$15; //@line 3683 "datetimemodule.c"
        var $16=HEAP[$state]; //@line 3683 "datetimemodule.c"
        var $17=(($16+4)&4294967295); //@line 3683 "datetimemodule.c"
        var $18=HEAP[$17]; //@line 3683 "datetimemodule.c"
        var $19=(($18+84)&4294967295); //@line 3683 "datetimemodule.c"
        var $20=HEAP[$19]; //@line 3683 "datetimemodule.c"
        var $21=($20) & 134217728; //@line 3683 "datetimemodule.c"
        var $22=((($21))|0)!=0; //@line 3683 "datetimemodule.c"
        if ($22) { __label__ = 3; break; } else { __label__ = 12; break; } //@line 3683 "datetimemodule.c"
      case 3: // $bb2
        var $23=HEAP[$state]; //@line 3683 "datetimemodule.c"
        var $24=$23; //@line 3683 "datetimemodule.c"
        var $25=(($24+8)&4294967295); //@line 3683 "datetimemodule.c"
        var $26=HEAP[$25]; //@line 3683 "datetimemodule.c"
        var $27=((($26))|0)==10; //@line 3683 "datetimemodule.c"
        if ($27) { __label__ = 4; break; } else { __label__ = 12; break; } //@line 3683 "datetimemodule.c"
      case 4: // $bb3
        var $28=HEAP[$state]; //@line 3683 "datetimemodule.c"
        var $29=$28; //@line 3683 "datetimemodule.c"
        var $30=(($29+20)&4294967295); //@line 3683 "datetimemodule.c"
        var $31=(($30+2)&4294967295); //@line 3683 "datetimemodule.c"
        var $32=HEAP[$31]; //@line 3683 "datetimemodule.c"
        var $33=reSign(($32), 8, 0); //@line 3683 "datetimemodule.c"
        var $34=((($33) - 1)&4294967295); //@line 3683 "datetimemodule.c"
        var $35=((($34))>>>0) <= 11; //@line 3683 "datetimemodule.c"
        if ($35) { __label__ = 5; break; } else { __label__ = 12; break; } //@line 3683 "datetimemodule.c"
      case 5: // $bb4
        var $36=HEAP[$args_addr]; //@line 3692 "datetimemodule.c"
        var $37=$36; //@line 3692 "datetimemodule.c"
        var $38=(($37+8)&4294967295); //@line 3692 "datetimemodule.c"
        var $39=HEAP[$38]; //@line 3692 "datetimemodule.c"
        var $40=((($39))|0)==2; //@line 3692 "datetimemodule.c"
        if ($40) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 3692 "datetimemodule.c"
      case 6: // $bb5
        var $41=HEAP[$args_addr]; //@line 3693 "datetimemodule.c"
        var $42=$41; //@line 3693 "datetimemodule.c"
        var $43=(($42+12)&4294967295); //@line 3693 "datetimemodule.c"
        var $44=(($43+4)&4294967295); //@line 3693 "datetimemodule.c"
        var $45=HEAP[$44]; //@line 3693 "datetimemodule.c"
        HEAP[$tzinfo]=$45; //@line 3693 "datetimemodule.c"
        var $46=HEAP[$tzinfo]; //@line 3694 "datetimemodule.c"
        var $47=_check_tzinfo_subclass($46); //@line 3694 "datetimemodule.c"
        var $48=((($47))|0) < 0; //@line 3694 "datetimemodule.c"
        if ($48) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 3694 "datetimemodule.c"
      case 7: // $bb6
        var $49=HEAP[_PyExc_TypeError]; //@line 3695 "datetimemodule.c"
        _PyErr_SetString($49, ((__str197)&4294967295)); //@line 3695 "datetimemodule.c"
        HEAP[$0]=0; //@line 3697 "datetimemodule.c"
        __label__ = 21; break; //@line 3697 "datetimemodule.c"
      case 8: // $bb7
        var $50=HEAP[$tzinfo]; //@line 3700 "datetimemodule.c"
        var $51=($50)!=(__Py_NoneStruct); //@line 3700 "datetimemodule.c"
        var $52=unSign(($51), 1, 0); //@line 3700 "datetimemodule.c"
        HEAP[$aware]=$52; //@line 3700 "datetimemodule.c"
        var $53=HEAP[$type_addr]; //@line 3701 "datetimemodule.c"
        var $54=(($53+152)&4294967295); //@line 3701 "datetimemodule.c"
        var $55=HEAP[$54]; //@line 3701 "datetimemodule.c"
        var $56=HEAP[$aware]; //@line 3701 "datetimemodule.c"
        var $57=reSign(($56), 8, 0); //@line 3701 "datetimemodule.c"
        var $58=HEAP[$type_addr]; //@line 3701 "datetimemodule.c"
        var $59=FUNCTION_TABLE[$55]($58, $57); //@line 3701 "datetimemodule.c"
        var $60=$59; //@line 3701 "datetimemodule.c"
        HEAP[$me]=$60; //@line 3701 "datetimemodule.c"
        var $61=HEAP[$me]; //@line 3702 "datetimemodule.c"
        var $62=($61)!=0; //@line 3702 "datetimemodule.c"
        if ($62) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 3702 "datetimemodule.c"
      case 9: // $bb8
        var $63=HEAP[$state]; //@line 3703 "datetimemodule.c"
        var $64=$63; //@line 3703 "datetimemodule.c"
        var $65=(($64+20)&4294967295); //@line 3703 "datetimemodule.c"
        var $66=(($65)&4294967295); //@line 3703 "datetimemodule.c"
        HEAP[$pdata]=$66; //@line 3703 "datetimemodule.c"
        var $67=HEAP[$me]; //@line 3705 "datetimemodule.c"
        var $68=(($67+13)&4294967295); //@line 3705 "datetimemodule.c"
        var $69=(($68)&4294967295); //@line 3705 "datetimemodule.c"
        var $70=HEAP[$pdata]; //@line 3705 "datetimemodule.c"
        _llvm_memcpy_p0i8_p0i8_i32($69, $70, 10, 1, 0); //@line 3705 "datetimemodule.c"
        var $71=HEAP[$me]; //@line 3706 "datetimemodule.c"
        var $72=(($71+8)&4294967295); //@line 3706 "datetimemodule.c"
        HEAP[$72]=-1; //@line 3706 "datetimemodule.c"
        var $73=HEAP[$me]; //@line 3707 "datetimemodule.c"
        var $74=(($73+12)&4294967295); //@line 3707 "datetimemodule.c"
        var $75=HEAP[$aware]; //@line 3707 "datetimemodule.c"
        HEAP[$74]=$75; //@line 3707 "datetimemodule.c"
        var $76=HEAP[$aware]; //@line 3708 "datetimemodule.c"
        var $77=reSign(($76), 8, 0)!=0; //@line 3708 "datetimemodule.c"
        if ($77) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3708 "datetimemodule.c"
      case 10: // $bb9
        var $78=HEAP[$tzinfo]; //@line 3709 "datetimemodule.c"
        var $79=(($78)&4294967295); //@line 3709 "datetimemodule.c"
        var $80=HEAP[$79]; //@line 3709 "datetimemodule.c"
        var $81=((($80) + 1)&4294967295); //@line 3709 "datetimemodule.c"
        var $82=(($78)&4294967295); //@line 3709 "datetimemodule.c"
        HEAP[$82]=$81; //@line 3709 "datetimemodule.c"
        var $83=HEAP[$tzinfo]; //@line 3710 "datetimemodule.c"
        var $84=HEAP[$me]; //@line 3710 "datetimemodule.c"
        var $85=(($84+24)&4294967295); //@line 3710 "datetimemodule.c"
        HEAP[$85]=$83; //@line 3710 "datetimemodule.c"
        __label__ = 11; break; //@line 3710 "datetimemodule.c"
      case 11: // $bb10
        var $86=HEAP[$me]; //@line 3713 "datetimemodule.c"
        var $87=$86; //@line 3713 "datetimemodule.c"
        HEAP[$0]=$87; //@line 3713 "datetimemodule.c"
        __label__ = 21; break; //@line 3713 "datetimemodule.c"
      case 12: // $bb11
        var $88=HEAP[$args_addr]; //@line 3716 "datetimemodule.c"
        var $89=HEAP[$kw_addr]; //@line 3716 "datetimemodule.c"
        var $90=__PyArg_ParseTupleAndKeywords_SizeT($88, $89, ((__str219)&4294967295), ((_datetime_kws)&4294967295), $year, $month, $day, $hour, $minute, $second, $usecond, $tzinfo); //@line 3716 "datetimemodule.c"
        var $91=((($90))|0)!=0; //@line 3716 "datetimemodule.c"
        if ($91) { __label__ = 13; break; } else { __label__ = 20; break; } //@line 3716 "datetimemodule.c"
      case 13: // $bb12
        var $92=HEAP[$day]; //@line 3719 "datetimemodule.c"
        var $93=HEAP[$month]; //@line 3719 "datetimemodule.c"
        var $94=HEAP[$year]; //@line 3719 "datetimemodule.c"
        var $95=_check_date_args($94, $93, $92); //@line 3719 "datetimemodule.c"
        var $96=((($95))|0) < 0; //@line 3719 "datetimemodule.c"
        if ($96) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 3719 "datetimemodule.c"
      case 14: // $bb13
        HEAP[$0]=0; //@line 3720 "datetimemodule.c"
        __label__ = 21; break; //@line 3720 "datetimemodule.c"
      case 15: // $bb14
        var $97=HEAP[$usecond]; //@line 3721 "datetimemodule.c"
        var $98=HEAP[$second]; //@line 3721 "datetimemodule.c"
        var $99=HEAP[$minute]; //@line 3721 "datetimemodule.c"
        var $100=HEAP[$hour]; //@line 3721 "datetimemodule.c"
        var $101=_check_time_args($100, $99, $98, $97); //@line 3721 "datetimemodule.c"
        var $102=((($101))|0) < 0; //@line 3721 "datetimemodule.c"
        if ($102) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 3721 "datetimemodule.c"
      case 16: // $bb15
        HEAP[$0]=0; //@line 3722 "datetimemodule.c"
        __label__ = 21; break; //@line 3722 "datetimemodule.c"
      case 17: // $bb16
        var $103=HEAP[$tzinfo]; //@line 3723 "datetimemodule.c"
        var $104=_check_tzinfo_subclass($103); //@line 3723 "datetimemodule.c"
        var $105=((($104))|0) < 0; //@line 3723 "datetimemodule.c"
        if ($105) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 3723 "datetimemodule.c"
      case 18: // $bb17
        HEAP[$0]=0; //@line 3724 "datetimemodule.c"
        __label__ = 21; break; //@line 3724 "datetimemodule.c"
      case 19: // $bb18
        var $106=HEAP[$tzinfo]; //@line 3725 "datetimemodule.c"
        var $107=HEAP[$usecond]; //@line 3725 "datetimemodule.c"
        var $108=HEAP[$second]; //@line 3725 "datetimemodule.c"
        var $109=HEAP[$minute]; //@line 3725 "datetimemodule.c"
        var $110=HEAP[$hour]; //@line 3725 "datetimemodule.c"
        var $111=HEAP[$day]; //@line 3725 "datetimemodule.c"
        var $112=HEAP[$month]; //@line 3725 "datetimemodule.c"
        var $113=HEAP[$year]; //@line 3725 "datetimemodule.c"
        var $114=HEAP[$type_addr]; //@line 3725 "datetimemodule.c"
        var $115=_new_datetime_ex($113, $112, $111, $110, $109, $108, $107, $106, $114); //@line 3725 "datetimemodule.c"
        HEAP[$self]=$115; //@line 3725 "datetimemodule.c"
        __label__ = 20; break; //@line 3725 "datetimemodule.c"
      case 20: // $bb19
        var $116=HEAP[$self]; //@line 3729 "datetimemodule.c"
        HEAP[$0]=$116; //@line 3729 "datetimemodule.c"
        __label__ = 21; break; //@line 3729 "datetimemodule.c"
      case 21: // $bb20
        var $117=HEAP[$0]; //@line 3697 "datetimemodule.c"
        HEAP[$retval]=$117; //@line 3697 "datetimemodule.c"
        __label__ = 22; break; //@line 3697 "datetimemodule.c"
      case 22: // $return
        var $retval21=HEAP[$retval]; //@line 3697 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval21; //@line 3697 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_from_timet_and_us($cls, $f, $timet, $us, $tzinfo) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $cls_addr=__stackBase__;
        var $f_addr=__stackBase__+4;
        var $timet_addr=__stackBase__+8;
        var $us_addr=__stackBase__+12;
        var $tzinfo_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $tm=__stackBase__+28;
        var $result=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$cls_addr]=$cls;
        HEAP[$f_addr]=$f;
        HEAP[$timet_addr]=$timet;
        HEAP[$us_addr]=$us;
        HEAP[$tzinfo_addr]=$tzinfo;
        HEAP[$result]=0; //@line 3744 "datetimemodule.c"
        var $1=HEAP[$f_addr]; //@line 3746 "datetimemodule.c"
        var $2=FUNCTION_TABLE[$1]($timet_addr); //@line 3746 "datetimemodule.c"
        HEAP[$tm]=$2; //@line 3746 "datetimemodule.c"
        var $3=HEAP[$tm]; //@line 3747 "datetimemodule.c"
        var $4=($3)!=0; //@line 3747 "datetimemodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 3747 "datetimemodule.c"
      case 1: // $bb
        var $5=HEAP[$tm]; //@line 3754 "datetimemodule.c"
        var $6=(($5)&4294967295); //@line 3754 "datetimemodule.c"
        var $7=HEAP[$6]; //@line 3754 "datetimemodule.c"
        var $8=((($7))|0) > 59; //@line 3754 "datetimemodule.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3754 "datetimemodule.c"
      case 2: // $bb1
        var $9=HEAP[$tm]; //@line 3755 "datetimemodule.c"
        var $10=(($9)&4294967295); //@line 3755 "datetimemodule.c"
        HEAP[$10]=59; //@line 3755 "datetimemodule.c"
        __label__ = 3; break; //@line 3755 "datetimemodule.c"
      case 3: // $bb2
        var $11=HEAP[$tm]; //@line 3756 "datetimemodule.c"
        var $12=(($11)&4294967295); //@line 3756 "datetimemodule.c"
        var $13=HEAP[$12]; //@line 3756 "datetimemodule.c"
        var $14=HEAP[$tm]; //@line 3756 "datetimemodule.c"
        var $15=(($14+4)&4294967295); //@line 3756 "datetimemodule.c"
        var $16=HEAP[$15]; //@line 3756 "datetimemodule.c"
        var $17=HEAP[$tm]; //@line 3756 "datetimemodule.c"
        var $18=(($17+8)&4294967295); //@line 3756 "datetimemodule.c"
        var $19=HEAP[$18]; //@line 3756 "datetimemodule.c"
        var $20=HEAP[$tm]; //@line 3756 "datetimemodule.c"
        var $21=(($20+12)&4294967295); //@line 3756 "datetimemodule.c"
        var $22=HEAP[$21]; //@line 3756 "datetimemodule.c"
        var $23=HEAP[$tm]; //@line 3756 "datetimemodule.c"
        var $24=(($23+16)&4294967295); //@line 3756 "datetimemodule.c"
        var $25=HEAP[$24]; //@line 3756 "datetimemodule.c"
        var $26=((($25) + 1)&4294967295); //@line 3756 "datetimemodule.c"
        var $27=HEAP[$tm]; //@line 3756 "datetimemodule.c"
        var $28=(($27+20)&4294967295); //@line 3756 "datetimemodule.c"
        var $29=HEAP[$28]; //@line 3756 "datetimemodule.c"
        var $30=((($29) + 1900)&4294967295); //@line 3756 "datetimemodule.c"
        var $31=HEAP[$cls_addr]; //@line 3756 "datetimemodule.c"
        var $32=HEAP[$us_addr]; //@line 3756 "datetimemodule.c"
        var $33=HEAP[$tzinfo_addr]; //@line 3756 "datetimemodule.c"
        var $34=__PyObject_CallFunction_SizeT($31, ((__str220)&4294967295), $30, $26, $22, $19, $16, $13, $32, $33); //@line 3756 "datetimemodule.c"
        HEAP[$result]=$34; //@line 3756 "datetimemodule.c"
        __label__ = 5; break; //@line 3756 "datetimemodule.c"
      case 4: // $bb3
        var $35=HEAP[_PyExc_ValueError]; //@line 3767 "datetimemodule.c"
        _PyErr_SetString($35, ((__str221)&4294967295)); //@line 3767 "datetimemodule.c"
        __label__ = 5; break; //@line 3767 "datetimemodule.c"
      case 5: // $bb4
        var $36=HEAP[$result]; //@line 3770 "datetimemodule.c"
        HEAP[$0]=$36; //@line 3770 "datetimemodule.c"
        var $37=HEAP[$0]; //@line 3770 "datetimemodule.c"
        HEAP[$retval]=$37; //@line 3770 "datetimemodule.c"
        __label__ = 6; break; //@line 3770 "datetimemodule.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 3770 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 3770 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_from_timestamp($cls, $f, $timestamp, $tzinfo) {
    var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 44);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $cls_addr=__stackBase__;
        var $f_addr=__stackBase__+4;
        var $timestamp_addr=__stackBase__+8;
        var $tzinfo_addr=__stackBase__+16;
        var $retval=__stackBase__+20;
        var $0=__stackBase__+24;
        var $timet=__stackBase__+28;
        var $fraction=__stackBase__+32;
        var $us=__stackBase__+40;
        var $_alloca_point_=0;
        HEAP[$cls_addr]=$cls;
        HEAP[$f_addr]=$f;
        HEAP[$timestamp_addr]=$timestamp;
        HEAP[$tzinfo_addr]=$tzinfo;
        var $1=HEAP[$timestamp_addr]; //@line 3788 "datetimemodule.c"
        var $2=__PyTime_DoubleToTimet($1); //@line 3788 "datetimemodule.c"
        HEAP[$timet]=$2; //@line 3788 "datetimemodule.c"
        var $3=HEAP[$timet]; //@line 3789 "datetimemodule.c"
        var $4=((($3))|0)==-1; //@line 3789 "datetimemodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 3789 "datetimemodule.c"
      case 1: // $bb
        var $5=_PyErr_Occurred(); //@line 3789 "datetimemodule.c"
        var $6=($5)!=0; //@line 3789 "datetimemodule.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 3789 "datetimemodule.c"
      case 2: // $bb1
        HEAP[$0]=0; //@line 3790 "datetimemodule.c"
        __label__ = 8; break; //@line 3790 "datetimemodule.c"
      case 3: // $bb2
        var $7=HEAP[$timet]; //@line 3791 "datetimemodule.c"
        var $8=((($7))|0); //@line 3791 "datetimemodule.c"
        var $9=HEAP[$timestamp_addr]; //@line 3791 "datetimemodule.c"
        var $10=($9) - ($8); //@line 3791 "datetimemodule.c"
        HEAP[$fraction]=$10; //@line 3791 "datetimemodule.c"
        var $11=HEAP[$fraction]; //@line 3792 "datetimemodule.c"
        var $12=($11) * 1000000; //@line 3792 "datetimemodule.c"
        var $13=_round_to_long($12); //@line 3792 "datetimemodule.c"
        HEAP[$us]=$13; //@line 3792 "datetimemodule.c"
        var $14=HEAP[$us]; //@line 3793 "datetimemodule.c"
        var $15=((($14))|0) < 0; //@line 3793 "datetimemodule.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 3793 "datetimemodule.c"
      case 4: // $bb3
        var $16=HEAP[$timet]; //@line 3796 "datetimemodule.c"
        var $17=((($16) - 1)&4294967295); //@line 3796 "datetimemodule.c"
        HEAP[$timet]=$17; //@line 3796 "datetimemodule.c"
        var $18=HEAP[$us]; //@line 3797 "datetimemodule.c"
        var $19=((($18) + 1000000)&4294967295); //@line 3797 "datetimemodule.c"
        HEAP[$us]=$19; //@line 3797 "datetimemodule.c"
        __label__ = 5; break; //@line 3797 "datetimemodule.c"
      case 5: // $bb4
        var $20=HEAP[$us]; //@line 3802 "datetimemodule.c"
        var $21=((($20))|0)==1000000; //@line 3802 "datetimemodule.c"
        if ($21) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3802 "datetimemodule.c"
      case 6: // $bb5
        var $22=HEAP[$timet]; //@line 3803 "datetimemodule.c"
        var $23=((($22) + 1)&4294967295); //@line 3803 "datetimemodule.c"
        HEAP[$timet]=$23; //@line 3803 "datetimemodule.c"
        HEAP[$us]=0; //@line 3804 "datetimemodule.c"
        __label__ = 7; break; //@line 3804 "datetimemodule.c"
      case 7: // $bb6
        var $24=HEAP[$cls_addr]; //@line 3806 "datetimemodule.c"
        var $25=HEAP[$f_addr]; //@line 3806 "datetimemodule.c"
        var $26=HEAP[$timet]; //@line 3806 "datetimemodule.c"
        var $27=HEAP[$us]; //@line 3806 "datetimemodule.c"
        var $28=HEAP[$tzinfo_addr]; //@line 3806 "datetimemodule.c"
        var $29=_datetime_from_timet_and_us($24, $25, $26, $27, $28); //@line 3806 "datetimemodule.c"
        HEAP[$0]=$29; //@line 3806 "datetimemodule.c"
        __label__ = 8; break; //@line 3806 "datetimemodule.c"
      case 8: // $bb7
        var $30=HEAP[$0]; //@line 3790 "datetimemodule.c"
        HEAP[$retval]=$30; //@line 3790 "datetimemodule.c"
        __label__ = 9; break; //@line 3790 "datetimemodule.c"
      case 9: // $return
        var $retval8=HEAP[$retval]; //@line 3790 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval8; //@line 3790 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_best_possible($cls, $f, $tzinfo) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $cls_addr=__stackBase__;
        var $f_addr=__stackBase__+4;
        var $tzinfo_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $t=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$cls_addr]=$cls;
        HEAP[$f_addr]=$f;
        HEAP[$tzinfo_addr]=$tzinfo;
        var $1=_gettimeofday($t, 0); //@line 3822 "datetimemodule.c"
        var $2=(($t+4)&4294967295); //@line 3824 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 3824 "datetimemodule.c"
        var $4=(($t)&4294967295); //@line 3824 "datetimemodule.c"
        var $5=HEAP[$4]; //@line 3824 "datetimemodule.c"
        var $6=HEAP[$cls_addr]; //@line 3824 "datetimemodule.c"
        var $7=HEAP[$f_addr]; //@line 3824 "datetimemodule.c"
        var $8=HEAP[$tzinfo_addr]; //@line 3824 "datetimemodule.c"
        var $9=_datetime_from_timet_and_us($6, $7, $5, $3, $8); //@line 3824 "datetimemodule.c"
        HEAP[$0]=$9; //@line 3824 "datetimemodule.c"
        var $10=HEAP[$0]; //@line 3824 "datetimemodule.c"
        HEAP[$retval]=$10; //@line 3824 "datetimemodule.c"
        __label__ = 1; break; //@line 3824 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 3824 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 3824 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_now($cls, $args, $kw) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $cls_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kw_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $iftmp_382=__stackBase__+16;
        var $0=__stackBase__+20;
        var $self=__stackBase__+24;
        var $tzinfo=__stackBase__+28;
        var $temp=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$cls_addr]=$cls;
        HEAP[$args_addr]=$args;
        HEAP[$kw_addr]=$kw;
        HEAP[$tzinfo]=__Py_NoneStruct; //@line 3856 "datetimemodule.c"
        var $1=HEAP[$args_addr]; //@line 3859 "datetimemodule.c"
        var $2=HEAP[$kw_addr]; //@line 3859 "datetimemodule.c"
        var $3=__PyArg_ParseTupleAndKeywords_SizeT($1, $2, ((__str222)&4294967295), ((_keywords_12654)&4294967295), $tzinfo); //@line 3859 "datetimemodule.c"
        var $4=((($3))|0)==0; //@line 3859 "datetimemodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3859 "datetimemodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 3861 "datetimemodule.c"
        __label__ = 12; break; //@line 3861 "datetimemodule.c"
      case 2: // $bb1
        var $5=HEAP[$tzinfo]; //@line 3862 "datetimemodule.c"
        var $6=_check_tzinfo_subclass($5); //@line 3862 "datetimemodule.c"
        var $7=((($6))|0) < 0; //@line 3862 "datetimemodule.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3862 "datetimemodule.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 3863 "datetimemodule.c"
        __label__ = 12; break; //@line 3863 "datetimemodule.c"
      case 4: // $bb3
        var $8=HEAP[$tzinfo]; //@line 3865 "datetimemodule.c"
        var $9=HEAP[$tzinfo]; //@line 3865 "datetimemodule.c"
        var $10=($9)==(__Py_NoneStruct); //@line 3865 "datetimemodule.c"
        if ($10) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3865 "datetimemodule.c"
      case 5: // $bb4
        HEAP[$iftmp_382]=(FUNCTION_TABLE_OFFSET + 2); //@line 3865 "datetimemodule.c"
        __label__ = 7; break; //@line 3865 "datetimemodule.c"
      case 6: // $bb5
        HEAP[$iftmp_382]=(FUNCTION_TABLE_OFFSET + 4); //@line 3865 "datetimemodule.c"
        __label__ = 7; break; //@line 3865 "datetimemodule.c"
      case 7: // $bb6
        var $11=HEAP[$cls_addr]; //@line 3865 "datetimemodule.c"
        var $12=HEAP[$iftmp_382]; //@line 3865 "datetimemodule.c"
        var $13=_datetime_best_possible($11, $12, $8); //@line 3865 "datetimemodule.c"
        HEAP[$self]=$13; //@line 3865 "datetimemodule.c"
        var $14=HEAP[$self]; //@line 3868 "datetimemodule.c"
        var $15=($14)!=0; //@line 3868 "datetimemodule.c"
        if ($15) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 3868 "datetimemodule.c"
      case 8: // $bb7
        var $16=HEAP[$tzinfo]; //@line 3868 "datetimemodule.c"
        var $17=($16)!=(__Py_NoneStruct); //@line 3868 "datetimemodule.c"
        if ($17) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 3868 "datetimemodule.c"
      case 9: // $bb8
        var $18=HEAP[$self]; //@line 3870 "datetimemodule.c"
        HEAP[$temp]=$18; //@line 3870 "datetimemodule.c"
        var $19=HEAP[$tzinfo]; //@line 3871 "datetimemodule.c"
        var $20=HEAP[$self]; //@line 3871 "datetimemodule.c"
        var $21=__PyObject_CallMethod_SizeT($19, ((__str189)&4294967295), ((__str35)&4294967295), $20); //@line 3871 "datetimemodule.c"
        HEAP[$self]=$21; //@line 3871 "datetimemodule.c"
        var $22=HEAP[$temp]; //@line 3872 "datetimemodule.c"
        var $23=(($22)&4294967295); //@line 3872 "datetimemodule.c"
        var $24=HEAP[$23]; //@line 3872 "datetimemodule.c"
        var $25=((($24) - 1)&4294967295); //@line 3872 "datetimemodule.c"
        var $26=HEAP[$temp]; //@line 3872 "datetimemodule.c"
        var $27=(($26)&4294967295); //@line 3872 "datetimemodule.c"
        HEAP[$27]=$25; //@line 3872 "datetimemodule.c"
        var $28=HEAP[$temp]; //@line 3872 "datetimemodule.c"
        var $29=(($28)&4294967295); //@line 3872 "datetimemodule.c"
        var $30=HEAP[$29]; //@line 3872 "datetimemodule.c"
        var $31=((($30))|0)==0; //@line 3872 "datetimemodule.c"
        if ($31) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3872 "datetimemodule.c"
      case 10: // $bb9
        var $32=HEAP[$temp]; //@line 3872 "datetimemodule.c"
        var $33=(($32+4)&4294967295); //@line 3872 "datetimemodule.c"
        var $34=HEAP[$33]; //@line 3872 "datetimemodule.c"
        var $35=(($34+24)&4294967295); //@line 3872 "datetimemodule.c"
        var $36=HEAP[$35]; //@line 3872 "datetimemodule.c"
        var $37=HEAP[$temp]; //@line 3872 "datetimemodule.c"
        FUNCTION_TABLE[$36]($37); //@line 3872 "datetimemodule.c"
        __label__ = 11; break; //@line 3872 "datetimemodule.c"
      case 11: // $bb10
        var $38=HEAP[$self]; //@line 3874 "datetimemodule.c"
        HEAP[$0]=$38; //@line 3874 "datetimemodule.c"
        __label__ = 12; break; //@line 3874 "datetimemodule.c"
      case 12: // $bb11
        var $39=HEAP[$0]; //@line 3861 "datetimemodule.c"
        HEAP[$retval]=$39; //@line 3861 "datetimemodule.c"
        __label__ = 13; break; //@line 3861 "datetimemodule.c"
      case 13: // $return
        var $retval12=HEAP[$retval]; //@line 3861 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval12; //@line 3861 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_utcnow($cls, $dummy) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $cls_addr=__stackBase__;
        var $dummy_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$cls_addr]=$cls;
        HEAP[$dummy_addr]=$dummy;
        var $1=HEAP[$cls_addr]; //@line 3883 "datetimemodule.c"
        var $2=_datetime_best_possible($1, (FUNCTION_TABLE_OFFSET + 4), __Py_NoneStruct); //@line 3883 "datetimemodule.c"
        HEAP[$0]=$2; //@line 3883 "datetimemodule.c"
        var $3=HEAP[$0]; //@line 3883 "datetimemodule.c"
        HEAP[$retval]=$3; //@line 3883 "datetimemodule.c"
        __label__ = 1; break; //@line 3883 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 3883 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 3883 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_fromtimestamp($cls, $args, $kw) {
    var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 44);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $cls_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kw_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $iftmp_389=__stackBase__+16;
        var $0=__stackBase__+20;
        var $self=__stackBase__+24;
        var $timestamp=__stackBase__+28;
        var $tzinfo=__stackBase__+36;
        var $temp=__stackBase__+40;
        var $_alloca_point_=0;
        HEAP[$cls_addr]=$cls;
        HEAP[$args_addr]=$args;
        HEAP[$kw_addr]=$kw;
        HEAP[$tzinfo]=__Py_NoneStruct; //@line 3892 "datetimemodule.c"
        var $1=HEAP[$args_addr]; //@line 3895 "datetimemodule.c"
        var $2=HEAP[$kw_addr]; //@line 3895 "datetimemodule.c"
        var $3=__PyArg_ParseTupleAndKeywords_SizeT($1, $2, ((__str224)&4294967295), ((_keywords_12701)&4294967295), $timestamp, $tzinfo); //@line 3895 "datetimemodule.c"
        var $4=((($3))|0)==0; //@line 3895 "datetimemodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3895 "datetimemodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 3897 "datetimemodule.c"
        __label__ = 12; break; //@line 3897 "datetimemodule.c"
      case 2: // $bb1
        var $5=HEAP[$tzinfo]; //@line 3898 "datetimemodule.c"
        var $6=_check_tzinfo_subclass($5); //@line 3898 "datetimemodule.c"
        var $7=((($6))|0) < 0; //@line 3898 "datetimemodule.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3898 "datetimemodule.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 3899 "datetimemodule.c"
        __label__ = 12; break; //@line 3899 "datetimemodule.c"
      case 4: // $bb3
        var $8=HEAP[$tzinfo]; //@line 3901 "datetimemodule.c"
        var $9=HEAP[$timestamp]; //@line 3901 "datetimemodule.c"
        var $10=HEAP[$tzinfo]; //@line 3901 "datetimemodule.c"
        var $11=($10)==(__Py_NoneStruct); //@line 3901 "datetimemodule.c"
        if ($11) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3901 "datetimemodule.c"
      case 5: // $bb4
        HEAP[$iftmp_389]=(FUNCTION_TABLE_OFFSET + 2); //@line 3901 "datetimemodule.c"
        __label__ = 7; break; //@line 3901 "datetimemodule.c"
      case 6: // $bb5
        HEAP[$iftmp_389]=(FUNCTION_TABLE_OFFSET + 4); //@line 3901 "datetimemodule.c"
        __label__ = 7; break; //@line 3901 "datetimemodule.c"
      case 7: // $bb6
        var $12=HEAP[$cls_addr]; //@line 3901 "datetimemodule.c"
        var $13=HEAP[$iftmp_389]; //@line 3901 "datetimemodule.c"
        var $14=_datetime_from_timestamp($12, $13, $9, $8); //@line 3901 "datetimemodule.c"
        HEAP[$self]=$14; //@line 3901 "datetimemodule.c"
        var $15=HEAP[$self]; //@line 3905 "datetimemodule.c"
        var $16=($15)!=0; //@line 3905 "datetimemodule.c"
        if ($16) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 3905 "datetimemodule.c"
      case 8: // $bb7
        var $17=HEAP[$tzinfo]; //@line 3905 "datetimemodule.c"
        var $18=($17)!=(__Py_NoneStruct); //@line 3905 "datetimemodule.c"
        if ($18) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 3905 "datetimemodule.c"
      case 9: // $bb8
        var $19=HEAP[$self]; //@line 3907 "datetimemodule.c"
        HEAP[$temp]=$19; //@line 3907 "datetimemodule.c"
        var $20=HEAP[$tzinfo]; //@line 3908 "datetimemodule.c"
        var $21=HEAP[$self]; //@line 3908 "datetimemodule.c"
        var $22=__PyObject_CallMethod_SizeT($20, ((__str189)&4294967295), ((__str35)&4294967295), $21); //@line 3908 "datetimemodule.c"
        HEAP[$self]=$22; //@line 3908 "datetimemodule.c"
        var $23=HEAP[$temp]; //@line 3909 "datetimemodule.c"
        var $24=(($23)&4294967295); //@line 3909 "datetimemodule.c"
        var $25=HEAP[$24]; //@line 3909 "datetimemodule.c"
        var $26=((($25) - 1)&4294967295); //@line 3909 "datetimemodule.c"
        var $27=HEAP[$temp]; //@line 3909 "datetimemodule.c"
        var $28=(($27)&4294967295); //@line 3909 "datetimemodule.c"
        HEAP[$28]=$26; //@line 3909 "datetimemodule.c"
        var $29=HEAP[$temp]; //@line 3909 "datetimemodule.c"
        var $30=(($29)&4294967295); //@line 3909 "datetimemodule.c"
        var $31=HEAP[$30]; //@line 3909 "datetimemodule.c"
        var $32=((($31))|0)==0; //@line 3909 "datetimemodule.c"
        if ($32) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3909 "datetimemodule.c"
      case 10: // $bb9
        var $33=HEAP[$temp]; //@line 3909 "datetimemodule.c"
        var $34=(($33+4)&4294967295); //@line 3909 "datetimemodule.c"
        var $35=HEAP[$34]; //@line 3909 "datetimemodule.c"
        var $36=(($35+24)&4294967295); //@line 3909 "datetimemodule.c"
        var $37=HEAP[$36]; //@line 3909 "datetimemodule.c"
        var $38=HEAP[$temp]; //@line 3909 "datetimemodule.c"
        FUNCTION_TABLE[$37]($38); //@line 3909 "datetimemodule.c"
        __label__ = 11; break; //@line 3909 "datetimemodule.c"
      case 11: // $bb10
        var $39=HEAP[$self]; //@line 3911 "datetimemodule.c"
        HEAP[$0]=$39; //@line 3911 "datetimemodule.c"
        __label__ = 12; break; //@line 3911 "datetimemodule.c"
      case 12: // $bb11
        var $40=HEAP[$0]; //@line 3897 "datetimemodule.c"
        HEAP[$retval]=$40; //@line 3897 "datetimemodule.c"
        __label__ = 13; break; //@line 3897 "datetimemodule.c"
      case 13: // $return
        var $retval12=HEAP[$retval]; //@line 3897 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval12; //@line 3897 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_utcfromtimestamp($cls, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $cls_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $timestamp=__stackBase__+16;
        var $result=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$cls_addr]=$cls;
        HEAP[$args_addr]=$args;
        HEAP[$result]=0; //@line 3919 "datetimemodule.c"
        var $1=HEAP[$args_addr]; //@line 3921 "datetimemodule.c"
        var $2=__PyArg_ParseTuple_SizeT($1, ((__str226)&4294967295), $timestamp); //@line 3921 "datetimemodule.c"
        var $3=((($2))|0)!=0; //@line 3921 "datetimemodule.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3921 "datetimemodule.c"
      case 1: // $bb
        var $4=HEAP[$timestamp]; //@line 3922 "datetimemodule.c"
        var $5=HEAP[$cls_addr]; //@line 3922 "datetimemodule.c"
        var $6=_datetime_from_timestamp($5, (FUNCTION_TABLE_OFFSET + 4), $4, __Py_NoneStruct); //@line 3922 "datetimemodule.c"
        HEAP[$result]=$6; //@line 3922 "datetimemodule.c"
        __label__ = 2; break; //@line 3922 "datetimemodule.c"
      case 2: // $bb1
        var $7=HEAP[$result]; //@line 3924 "datetimemodule.c"
        HEAP[$0]=$7; //@line 3924 "datetimemodule.c"
        var $8=HEAP[$0]; //@line 3924 "datetimemodule.c"
        HEAP[$retval]=$8; //@line 3924 "datetimemodule.c"
        __label__ = 3; break; //@line 3924 "datetimemodule.c"
      case 3: // $return
        var $retval2=HEAP[$retval]; //@line 3924 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval2; //@line 3924 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_strptime($cls, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 80; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 80);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $cls_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $result=__stackBase__+16;
        var $obj=__stackBase__+20;
        var $st=__stackBase__+24;
        var $frac=__stackBase__+28;
        var $string=__stackBase__+32;
        var $format=__stackBase__+36;
        var $i=__stackBase__+40;
        var $good_timetuple=__stackBase__+44;
        var $ia=__stackBase__+48;
        var $p=__stackBase__+76;
        var $_alloca_point_=0;
        HEAP[$cls_addr]=$cls;
        HEAP[$args_addr]=$args;
        HEAP[$result]=0; //@line 3932 "datetimemodule.c"
        HEAP[$st]=0; //@line 3932 "datetimemodule.c"
        HEAP[$frac]=0; //@line 3932 "datetimemodule.c"
        var $1=HEAP[$args_addr]; //@line 3935 "datetimemodule.c"
        var $2=__PyArg_ParseTuple_SizeT($1, ((__str227)&4294967295), $string, $format); //@line 3935 "datetimemodule.c"
        var $3=((($2))|0)==0; //@line 3935 "datetimemodule.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 3935 "datetimemodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 3936 "datetimemodule.c"
        __label__ = 45; break; //@line 3936 "datetimemodule.c"
      case 2: // $bb1
        var $4=HEAP[_module_12751]; //@line 3938 "datetimemodule.c"
        var $5=($4)==0; //@line 3938 "datetimemodule.c"
        if ($5) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 3938 "datetimemodule.c"
      case 3: // $bb2
        var $6=_PyImport_ImportModuleNoBlock(((__str228)&4294967295)); //@line 3938 "datetimemodule.c"
        HEAP[_module_12751]=$6; //@line 3938 "datetimemodule.c"
        var $7=HEAP[_module_12751]; //@line 3938 "datetimemodule.c"
        var $8=($7)==0; //@line 3938 "datetimemodule.c"
        if ($8) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 3938 "datetimemodule.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 3940 "datetimemodule.c"
        __label__ = 45; break; //@line 3940 "datetimemodule.c"
      case 5: // $bb4
        var $9=HEAP[$format]; //@line 3945 "datetimemodule.c"
        var $10=HEAP[$string]; //@line 3945 "datetimemodule.c"
        var $11=HEAP[_module_12751]; //@line 3945 "datetimemodule.c"
        var $12=__PyObject_CallMethod_SizeT($11, ((__str228)&4294967295), ((__str83)&4294967295), $10, $9); //@line 3945 "datetimemodule.c"
        HEAP[$obj]=$12; //@line 3945 "datetimemodule.c"
        var $13=HEAP[$obj]; //@line 3946 "datetimemodule.c"
        var $14=($13)!=0; //@line 3946 "datetimemodule.c"
        if ($14) { __label__ = 6; break; } else { __label__ = 35; break; } //@line 3946 "datetimemodule.c"
      case 6: // $bb5
        HEAP[$good_timetuple]=1; //@line 3947 "datetimemodule.c"
        var $15=HEAP[$obj]; //@line 3949 "datetimemodule.c"
        var $16=_PySequence_Check($15); //@line 3949 "datetimemodule.c"
        var $17=((($16))|0)==0; //@line 3949 "datetimemodule.c"
        if ($17) { __label__ = 31; break; } else { __label__ = 7; break; } //@line 3949 "datetimemodule.c"
      case 7: // $bb6
        var $18=HEAP[$obj]; //@line 3949 "datetimemodule.c"
        var $19=_PySequence_Size($18); //@line 3949 "datetimemodule.c"
        var $20=((($19))|0)!=2; //@line 3949 "datetimemodule.c"
        if ($20) { __label__ = 31; break; } else { __label__ = 8; break; } //@line 3949 "datetimemodule.c"
      case 8: // $bb7
        var $21=HEAP[$obj]; //@line 3950 "datetimemodule.c"
        var $22=_PySequence_GetItem($21, 0); //@line 3950 "datetimemodule.c"
        HEAP[$st]=$22; //@line 3950 "datetimemodule.c"
        var $23=HEAP[$obj]; //@line 3951 "datetimemodule.c"
        var $24=_PySequence_GetItem($23, 1); //@line 3951 "datetimemodule.c"
        HEAP[$frac]=$24; //@line 3951 "datetimemodule.c"
        var $25=HEAP[$st]; //@line 3952 "datetimemodule.c"
        var $26=($25)==0; //@line 3952 "datetimemodule.c"
        if ($26) { __label__ = 10; break; } else { __label__ = 9; break; } //@line 3952 "datetimemodule.c"
      case 9: // $bb8
        var $27=HEAP[$frac]; //@line 3952 "datetimemodule.c"
        var $28=($27)==0; //@line 3952 "datetimemodule.c"
        if ($28) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3952 "datetimemodule.c"
      case 10: // $bb9
        HEAP[$good_timetuple]=0; //@line 3953 "datetimemodule.c"
        __label__ = 11; break; //@line 3953 "datetimemodule.c"
      case 11: // $bb10
        var $29=HEAP[$good_timetuple]; //@line 3956 "datetimemodule.c"
        var $30=((($29))|0)==0; //@line 3956 "datetimemodule.c"
        if ($30) { __label__ = 25; break; } else { __label__ = 12; break; } //@line 3956 "datetimemodule.c"
      case 12: // $bb11
        var $31=HEAP[$st]; //@line 3956 "datetimemodule.c"
        var $32=_PySequence_Check($31); //@line 3956 "datetimemodule.c"
        var $33=((($32))|0)==0; //@line 3956 "datetimemodule.c"
        if ($33) { __label__ = 25; break; } else { __label__ = 13; break; } //@line 3956 "datetimemodule.c"
      case 13: // $bb12
        var $34=HEAP[$st]; //@line 3956 "datetimemodule.c"
        var $35=_PySequence_Size($34); //@line 3956 "datetimemodule.c"
        var $36=((($35))|0) <= 5; //@line 3956 "datetimemodule.c"
        if ($36) { __label__ = 25; break; } else { __label__ = 14; break; } //@line 3956 "datetimemodule.c"
      case 14: // $bb13
        HEAP[$i]=0; //@line 3959 "datetimemodule.c"
        __label__ = 23; break; //@line 3959 "datetimemodule.c"
      case 15: // $bb14
        var $37=HEAP[$st]; //@line 3960 "datetimemodule.c"
        var $38=HEAP[$i]; //@line 3960 "datetimemodule.c"
        var $39=_PySequence_GetItem($37, $38); //@line 3960 "datetimemodule.c"
        HEAP[$p]=$39; //@line 3960 "datetimemodule.c"
        var $40=HEAP[$p]; //@line 3961 "datetimemodule.c"
        var $41=($40)==0; //@line 3961 "datetimemodule.c"
        if ($41) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 3961 "datetimemodule.c"
      case 16: // $bb15
        HEAP[$good_timetuple]=0; //@line 3962 "datetimemodule.c"
        __label__ = 24; break; //@line 3962 "datetimemodule.c"
      case 17: // $bb16
        var $42=HEAP[$p]; //@line 3965 "datetimemodule.c"
        var $43=(($42+4)&4294967295); //@line 3965 "datetimemodule.c"
        var $44=HEAP[$43]; //@line 3965 "datetimemodule.c"
        var $45=(($44+84)&4294967295); //@line 3965 "datetimemodule.c"
        var $46=HEAP[$45]; //@line 3965 "datetimemodule.c"
        var $47=($46) & 8388608; //@line 3965 "datetimemodule.c"
        var $48=((($47))|0)!=0; //@line 3965 "datetimemodule.c"
        if ($48) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 3965 "datetimemodule.c"
      case 18: // $bb17
        var $49=HEAP[$i]; //@line 3966 "datetimemodule.c"
        var $50=HEAP[$p]; //@line 3966 "datetimemodule.c"
        var $51=_PyInt_AsLong($50); //@line 3966 "datetimemodule.c"
        var $52=(($ia+$49*4)&4294967295); //@line 3966 "datetimemodule.c"
        HEAP[$52]=$51; //@line 3966 "datetimemodule.c"
        __label__ = 20; break; //@line 3966 "datetimemodule.c"
      case 19: // $bb18
        HEAP[$good_timetuple]=0; //@line 3968 "datetimemodule.c"
        __label__ = 20; break; //@line 3968 "datetimemodule.c"
      case 20: // $bb19
        var $53=HEAP[$p]; //@line 3969 "datetimemodule.c"
        var $54=(($53)&4294967295); //@line 3969 "datetimemodule.c"
        var $55=HEAP[$54]; //@line 3969 "datetimemodule.c"
        var $56=((($55) - 1)&4294967295); //@line 3969 "datetimemodule.c"
        var $57=HEAP[$p]; //@line 3969 "datetimemodule.c"
        var $58=(($57)&4294967295); //@line 3969 "datetimemodule.c"
        HEAP[$58]=$56; //@line 3969 "datetimemodule.c"
        var $59=HEAP[$p]; //@line 3969 "datetimemodule.c"
        var $60=(($59)&4294967295); //@line 3969 "datetimemodule.c"
        var $61=HEAP[$60]; //@line 3969 "datetimemodule.c"
        var $62=((($61))|0)==0; //@line 3969 "datetimemodule.c"
        if ($62) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 3969 "datetimemodule.c"
      case 21: // $bb20
        var $63=HEAP[$p]; //@line 3969 "datetimemodule.c"
        var $64=(($63+4)&4294967295); //@line 3969 "datetimemodule.c"
        var $65=HEAP[$64]; //@line 3969 "datetimemodule.c"
        var $66=(($65+24)&4294967295); //@line 3969 "datetimemodule.c"
        var $67=HEAP[$66]; //@line 3969 "datetimemodule.c"
        var $68=HEAP[$p]; //@line 3969 "datetimemodule.c"
        FUNCTION_TABLE[$67]($68); //@line 3969 "datetimemodule.c"
        __label__ = 22; break; //@line 3969 "datetimemodule.c"
      case 22: // $bb21
        var $69=HEAP[$i]; //@line 3959 "datetimemodule.c"
        var $70=((($69) + 1)&4294967295); //@line 3959 "datetimemodule.c"
        HEAP[$i]=$70; //@line 3959 "datetimemodule.c"
        __label__ = 23; break; //@line 3959 "datetimemodule.c"
      case 23: // $bb22
        var $71=HEAP[$i]; //@line 3959 "datetimemodule.c"
        var $72=((($71))|0) <= 5; //@line 3959 "datetimemodule.c"
        if ($72) { __label__ = 15; break; } else { __label__ = 24; break; } //@line 3959 "datetimemodule.c"
      case 24: // $bb23
        __label__ = 26; break; //@line 3959 "datetimemodule.c"
      case 25: // $bb24
        HEAP[$good_timetuple]=0; //@line 3973 "datetimemodule.c"
        __label__ = 26; break; //@line 3973 "datetimemodule.c"
      case 26: // $bb25
        var $73=HEAP[$good_timetuple]; //@line 3975 "datetimemodule.c"
        var $74=((($73))|0)==0; //@line 3975 "datetimemodule.c"
        if ($74) { __label__ = 29; break; } else { __label__ = 27; break; } //@line 3975 "datetimemodule.c"
      case 27: // $bb26
        var $75=HEAP[$frac]; //@line 3975 "datetimemodule.c"
        var $76=(($75+4)&4294967295); //@line 3975 "datetimemodule.c"
        var $77=HEAP[$76]; //@line 3975 "datetimemodule.c"
        var $78=(($77+84)&4294967295); //@line 3975 "datetimemodule.c"
        var $79=HEAP[$78]; //@line 3975 "datetimemodule.c"
        var $80=($79) & 8388608; //@line 3975 "datetimemodule.c"
        var $81=((($80))|0)==0; //@line 3975 "datetimemodule.c"
        if ($81) { __label__ = 29; break; } else { __label__ = 28; break; } //@line 3975 "datetimemodule.c"
      case 28: // $bb27
        var $82=HEAP[$frac]; //@line 3976 "datetimemodule.c"
        var $83=_PyInt_AsLong($82); //@line 3976 "datetimemodule.c"
        var $84=(($ia+24)&4294967295); //@line 3976 "datetimemodule.c"
        HEAP[$84]=$83; //@line 3976 "datetimemodule.c"
        __label__ = 30; break; //@line 3976 "datetimemodule.c"
      case 29: // $bb28
        HEAP[$good_timetuple]=0; //@line 3978 "datetimemodule.c"
        __label__ = 30; break; //@line 3978 "datetimemodule.c"
      case 30: // $bb29
        __label__ = 32; break; //@line 3978 "datetimemodule.c"
      case 31: // $bb30
        HEAP[$good_timetuple]=0; //@line 3981 "datetimemodule.c"
        __label__ = 32; break; //@line 3981 "datetimemodule.c"
      case 32: // $bb31
        var $85=HEAP[$good_timetuple]; //@line 3982 "datetimemodule.c"
        var $86=((($85))|0)!=0; //@line 3982 "datetimemodule.c"
        if ($86) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 3982 "datetimemodule.c"
      case 33: // $bb32
        var $87=(($ia+24)&4294967295); //@line 3983 "datetimemodule.c"
        var $88=HEAP[$87]; //@line 3983 "datetimemodule.c"
        var $89=(($ia+20)&4294967295); //@line 3983 "datetimemodule.c"
        var $90=HEAP[$89]; //@line 3983 "datetimemodule.c"
        var $91=(($ia+16)&4294967295); //@line 3983 "datetimemodule.c"
        var $92=HEAP[$91]; //@line 3983 "datetimemodule.c"
        var $93=(($ia+12)&4294967295); //@line 3983 "datetimemodule.c"
        var $94=HEAP[$93]; //@line 3983 "datetimemodule.c"
        var $95=(($ia+8)&4294967295); //@line 3983 "datetimemodule.c"
        var $96=HEAP[$95]; //@line 3983 "datetimemodule.c"
        var $97=(($ia+4)&4294967295); //@line 3983 "datetimemodule.c"
        var $98=HEAP[$97]; //@line 3983 "datetimemodule.c"
        var $99=(($ia)&4294967295); //@line 3983 "datetimemodule.c"
        var $100=HEAP[$99]; //@line 3983 "datetimemodule.c"
        var $101=HEAP[$cls_addr]; //@line 3983 "datetimemodule.c"
        var $102=__PyObject_CallFunction_SizeT($101, ((__str229)&4294967295), $100, $98, $96, $94, $92, $90, $88); //@line 3983 "datetimemodule.c"
        HEAP[$result]=$102; //@line 3983 "datetimemodule.c"
        __label__ = 35; break; //@line 3983 "datetimemodule.c"
      case 34: // $bb33
        var $103=HEAP[_PyExc_ValueError]; //@line 3988 "datetimemodule.c"
        _PyErr_SetString($103, ((__str230)&4294967295)); //@line 3988 "datetimemodule.c"
        __label__ = 35; break; //@line 3988 "datetimemodule.c"
      case 35: // $bb34
        var $104=HEAP[$obj]; //@line 3991 "datetimemodule.c"
        var $105=($104)!=0; //@line 3991 "datetimemodule.c"
        if ($105) { __label__ = 36; break; } else { __label__ = 38; break; } //@line 3991 "datetimemodule.c"
      case 36: // $bb35
        var $106=HEAP[$obj]; //@line 3991 "datetimemodule.c"
        var $107=(($106)&4294967295); //@line 3991 "datetimemodule.c"
        var $108=HEAP[$107]; //@line 3991 "datetimemodule.c"
        var $109=((($108) - 1)&4294967295); //@line 3991 "datetimemodule.c"
        var $110=HEAP[$obj]; //@line 3991 "datetimemodule.c"
        var $111=(($110)&4294967295); //@line 3991 "datetimemodule.c"
        HEAP[$111]=$109; //@line 3991 "datetimemodule.c"
        var $112=HEAP[$obj]; //@line 3991 "datetimemodule.c"
        var $113=(($112)&4294967295); //@line 3991 "datetimemodule.c"
        var $114=HEAP[$113]; //@line 3991 "datetimemodule.c"
        var $115=((($114))|0)==0; //@line 3991 "datetimemodule.c"
        if ($115) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 3991 "datetimemodule.c"
      case 37: // $bb36
        var $116=HEAP[$obj]; //@line 3991 "datetimemodule.c"
        var $117=(($116+4)&4294967295); //@line 3991 "datetimemodule.c"
        var $118=HEAP[$117]; //@line 3991 "datetimemodule.c"
        var $119=(($118+24)&4294967295); //@line 3991 "datetimemodule.c"
        var $120=HEAP[$119]; //@line 3991 "datetimemodule.c"
        var $121=HEAP[$obj]; //@line 3991 "datetimemodule.c"
        FUNCTION_TABLE[$120]($121); //@line 3991 "datetimemodule.c"
        __label__ = 38; break; //@line 3991 "datetimemodule.c"
      case 38: // $bb37
        var $122=HEAP[$st]; //@line 3992 "datetimemodule.c"
        var $123=($122)!=0; //@line 3992 "datetimemodule.c"
        if ($123) { __label__ = 39; break; } else { __label__ = 41; break; } //@line 3992 "datetimemodule.c"
      case 39: // $bb38
        var $124=HEAP[$st]; //@line 3992 "datetimemodule.c"
        var $125=(($124)&4294967295); //@line 3992 "datetimemodule.c"
        var $126=HEAP[$125]; //@line 3992 "datetimemodule.c"
        var $127=((($126) - 1)&4294967295); //@line 3992 "datetimemodule.c"
        var $128=HEAP[$st]; //@line 3992 "datetimemodule.c"
        var $129=(($128)&4294967295); //@line 3992 "datetimemodule.c"
        HEAP[$129]=$127; //@line 3992 "datetimemodule.c"
        var $130=HEAP[$st]; //@line 3992 "datetimemodule.c"
        var $131=(($130)&4294967295); //@line 3992 "datetimemodule.c"
        var $132=HEAP[$131]; //@line 3992 "datetimemodule.c"
        var $133=((($132))|0)==0; //@line 3992 "datetimemodule.c"
        if ($133) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 3992 "datetimemodule.c"
      case 40: // $bb39
        var $134=HEAP[$st]; //@line 3992 "datetimemodule.c"
        var $135=(($134+4)&4294967295); //@line 3992 "datetimemodule.c"
        var $136=HEAP[$135]; //@line 3992 "datetimemodule.c"
        var $137=(($136+24)&4294967295); //@line 3992 "datetimemodule.c"
        var $138=HEAP[$137]; //@line 3992 "datetimemodule.c"
        var $139=HEAP[$st]; //@line 3992 "datetimemodule.c"
        FUNCTION_TABLE[$138]($139); //@line 3992 "datetimemodule.c"
        __label__ = 41; break; //@line 3992 "datetimemodule.c"
      case 41: // $bb40
        var $140=HEAP[$frac]; //@line 3993 "datetimemodule.c"
        var $141=($140)!=0; //@line 3993 "datetimemodule.c"
        if ($141) { __label__ = 42; break; } else { __label__ = 44; break; } //@line 3993 "datetimemodule.c"
      case 42: // $bb41
        var $142=HEAP[$frac]; //@line 3993 "datetimemodule.c"
        var $143=(($142)&4294967295); //@line 3993 "datetimemodule.c"
        var $144=HEAP[$143]; //@line 3993 "datetimemodule.c"
        var $145=((($144) - 1)&4294967295); //@line 3993 "datetimemodule.c"
        var $146=HEAP[$frac]; //@line 3993 "datetimemodule.c"
        var $147=(($146)&4294967295); //@line 3993 "datetimemodule.c"
        HEAP[$147]=$145; //@line 3993 "datetimemodule.c"
        var $148=HEAP[$frac]; //@line 3993 "datetimemodule.c"
        var $149=(($148)&4294967295); //@line 3993 "datetimemodule.c"
        var $150=HEAP[$149]; //@line 3993 "datetimemodule.c"
        var $151=((($150))|0)==0; //@line 3993 "datetimemodule.c"
        if ($151) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 3993 "datetimemodule.c"
      case 43: // $bb42
        var $152=HEAP[$frac]; //@line 3993 "datetimemodule.c"
        var $153=(($152+4)&4294967295); //@line 3993 "datetimemodule.c"
        var $154=HEAP[$153]; //@line 3993 "datetimemodule.c"
        var $155=(($154+24)&4294967295); //@line 3993 "datetimemodule.c"
        var $156=HEAP[$155]; //@line 3993 "datetimemodule.c"
        var $157=HEAP[$frac]; //@line 3993 "datetimemodule.c"
        FUNCTION_TABLE[$156]($157); //@line 3993 "datetimemodule.c"
        __label__ = 44; break; //@line 3993 "datetimemodule.c"
      case 44: // $bb43
        var $158=HEAP[$result]; //@line 3994 "datetimemodule.c"
        HEAP[$0]=$158; //@line 3994 "datetimemodule.c"
        __label__ = 45; break; //@line 3994 "datetimemodule.c"
      case 45: // $bb44
        var $159=HEAP[$0]; //@line 3936 "datetimemodule.c"
        HEAP[$retval]=$159; //@line 3936 "datetimemodule.c"
        __label__ = 46; break; //@line 3936 "datetimemodule.c"
      case 46: // $return
        var $retval45=HEAP[$retval]; //@line 3936 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval45; //@line 3936 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_combine($cls, $args, $kw) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $cls_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kw_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $date=__stackBase__+20;
        var $time=__stackBase__+24;
        var $result=__stackBase__+28;
        var $tzinfo=__stackBase__+32;
        var $_alloca_point_=0;
        HEAP[$cls_addr]=$cls;
        HEAP[$args_addr]=$args;
        HEAP[$kw_addr]=$kw;
        HEAP[$result]=0; //@line 4004 "datetimemodule.c"
        var $1=HEAP[$args_addr]; //@line 4006 "datetimemodule.c"
        var $2=HEAP[$kw_addr]; //@line 4006 "datetimemodule.c"
        var $3=__PyArg_ParseTupleAndKeywords_SizeT($1, $2, ((__str231)&4294967295), ((_keywords_12871)&4294967295), _PyDateTime_DateType, $date, _PyDateTime_TimeType, $time); //@line 4006 "datetimemodule.c"
        var $4=((($3))|0)!=0; //@line 4006 "datetimemodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 4006 "datetimemodule.c"
      case 1: // $bb
        HEAP[$tzinfo]=__Py_NoneStruct; //@line 4009 "datetimemodule.c"
        var $5=HEAP[$time]; //@line 4011 "datetimemodule.c"
        var $6=$5; //@line 4011 "datetimemodule.c"
        var $7=(($6+12)&4294967295); //@line 4011 "datetimemodule.c"
        var $8=HEAP[$7]; //@line 4011 "datetimemodule.c"
        var $9=reSign(($8), 8, 0)!=0; //@line 4011 "datetimemodule.c"
        if ($9) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 4011 "datetimemodule.c"
      case 2: // $bb1
        var $10=HEAP[$time]; //@line 4012 "datetimemodule.c"
        var $11=$10; //@line 4012 "datetimemodule.c"
        var $12=(($11+20)&4294967295); //@line 4012 "datetimemodule.c"
        var $13=HEAP[$12]; //@line 4012 "datetimemodule.c"
        HEAP[$tzinfo]=$13; //@line 4012 "datetimemodule.c"
        __label__ = 3; break; //@line 4012 "datetimemodule.c"
      case 3: // $bb2
        var $14=HEAP[$time]; //@line 4013 "datetimemodule.c"
        var $15=$14; //@line 4013 "datetimemodule.c"
        var $16=(($15+13)&4294967295); //@line 4013 "datetimemodule.c"
        var $17=(($16+3)&4294967295); //@line 4013 "datetimemodule.c"
        var $18=HEAP[$17]; //@line 4013 "datetimemodule.c"
        var $19=unSign(($18), 8, 0); //@line 4013 "datetimemodule.c"
        var $20=($19) << 16; //@line 4013 "datetimemodule.c"
        var $21=HEAP[$time]; //@line 4013 "datetimemodule.c"
        var $22=$21; //@line 4013 "datetimemodule.c"
        var $23=(($22+13)&4294967295); //@line 4013 "datetimemodule.c"
        var $24=(($23+4)&4294967295); //@line 4013 "datetimemodule.c"
        var $25=HEAP[$24]; //@line 4013 "datetimemodule.c"
        var $26=unSign(($25), 8, 0); //@line 4013 "datetimemodule.c"
        var $27=($26) << 8; //@line 4013 "datetimemodule.c"
        var $28=($20) | ($27); //@line 4013 "datetimemodule.c"
        var $29=HEAP[$time]; //@line 4013 "datetimemodule.c"
        var $30=$29; //@line 4013 "datetimemodule.c"
        var $31=(($30+13)&4294967295); //@line 4013 "datetimemodule.c"
        var $32=(($31+5)&4294967295); //@line 4013 "datetimemodule.c"
        var $33=HEAP[$32]; //@line 4013 "datetimemodule.c"
        var $34=unSign(($33), 8, 0); //@line 4013 "datetimemodule.c"
        var $35=($28) | ($34); //@line 4013 "datetimemodule.c"
        var $36=HEAP[$time]; //@line 4013 "datetimemodule.c"
        var $37=$36; //@line 4013 "datetimemodule.c"
        var $38=(($37+13)&4294967295); //@line 4013 "datetimemodule.c"
        var $39=(($38+2)&4294967295); //@line 4013 "datetimemodule.c"
        var $40=HEAP[$39]; //@line 4013 "datetimemodule.c"
        var $41=unSign(($40), 8, 0); //@line 4013 "datetimemodule.c"
        var $42=HEAP[$time]; //@line 4013 "datetimemodule.c"
        var $43=$42; //@line 4013 "datetimemodule.c"
        var $44=(($43+13)&4294967295); //@line 4013 "datetimemodule.c"
        var $45=(($44+1)&4294967295); //@line 4013 "datetimemodule.c"
        var $46=HEAP[$45]; //@line 4013 "datetimemodule.c"
        var $47=unSign(($46), 8, 0); //@line 4013 "datetimemodule.c"
        var $48=HEAP[$time]; //@line 4013 "datetimemodule.c"
        var $49=$48; //@line 4013 "datetimemodule.c"
        var $50=(($49+13)&4294967295); //@line 4013 "datetimemodule.c"
        var $51=(($50)&4294967295); //@line 4013 "datetimemodule.c"
        var $52=HEAP[$51]; //@line 4013 "datetimemodule.c"
        var $53=unSign(($52), 8, 0); //@line 4013 "datetimemodule.c"
        var $54=HEAP[$date]; //@line 4013 "datetimemodule.c"
        var $55=$54; //@line 4013 "datetimemodule.c"
        var $56=(($55+13)&4294967295); //@line 4013 "datetimemodule.c"
        var $57=(($56+3)&4294967295); //@line 4013 "datetimemodule.c"
        var $58=HEAP[$57]; //@line 4013 "datetimemodule.c"
        var $59=unSign(($58), 8, 0); //@line 4013 "datetimemodule.c"
        var $60=HEAP[$date]; //@line 4013 "datetimemodule.c"
        var $61=$60; //@line 4013 "datetimemodule.c"
        var $62=(($61+13)&4294967295); //@line 4013 "datetimemodule.c"
        var $63=(($62+2)&4294967295); //@line 4013 "datetimemodule.c"
        var $64=HEAP[$63]; //@line 4013 "datetimemodule.c"
        var $65=unSign(($64), 8, 0); //@line 4013 "datetimemodule.c"
        var $66=HEAP[$date]; //@line 4013 "datetimemodule.c"
        var $67=$66; //@line 4013 "datetimemodule.c"
        var $68=(($67+13)&4294967295); //@line 4013 "datetimemodule.c"
        var $69=(($68)&4294967295); //@line 4013 "datetimemodule.c"
        var $70=HEAP[$69]; //@line 4013 "datetimemodule.c"
        var $71=unSign(($70), 8, 0); //@line 4013 "datetimemodule.c"
        var $72=($71) << 8; //@line 4013 "datetimemodule.c"
        var $73=HEAP[$date]; //@line 4013 "datetimemodule.c"
        var $74=$73; //@line 4013 "datetimemodule.c"
        var $75=(($74+13)&4294967295); //@line 4013 "datetimemodule.c"
        var $76=(($75+1)&4294967295); //@line 4013 "datetimemodule.c"
        var $77=HEAP[$76]; //@line 4013 "datetimemodule.c"
        var $78=unSign(($77), 8, 0); //@line 4013 "datetimemodule.c"
        var $79=($72) | ($78); //@line 4013 "datetimemodule.c"
        var $80=HEAP[$cls_addr]; //@line 4013 "datetimemodule.c"
        var $81=HEAP[$tzinfo]; //@line 4013 "datetimemodule.c"
        var $82=__PyObject_CallFunction_SizeT($80, ((__str220)&4294967295), $79, $65, $59, $53, $47, $41, $35, $81); //@line 4013 "datetimemodule.c"
        HEAP[$result]=$82; //@line 4013 "datetimemodule.c"
        __label__ = 4; break; //@line 4013 "datetimemodule.c"
      case 4: // $bb3
        var $83=HEAP[$result]; //@line 4023 "datetimemodule.c"
        HEAP[$0]=$83; //@line 4023 "datetimemodule.c"
        var $84=HEAP[$0]; //@line 4023 "datetimemodule.c"
        HEAP[$retval]=$84; //@line 4023 "datetimemodule.c"
        __label__ = 5; break; //@line 4023 "datetimemodule.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 4023 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 4023 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_dealloc($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $0=HEAP[$self_addr]; //@line 4033 "datetimemodule.c"
        var $1=$0; //@line 4033 "datetimemodule.c"
        var $2=(($1+12)&4294967295); //@line 4033 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 4033 "datetimemodule.c"
        var $4=reSign(($3), 8, 0)!=0; //@line 4033 "datetimemodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 4033 "datetimemodule.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 4034 "datetimemodule.c"
        var $6=(($5+24)&4294967295); //@line 4034 "datetimemodule.c"
        var $7=HEAP[$6]; //@line 4034 "datetimemodule.c"
        var $8=($7)!=0; //@line 4034 "datetimemodule.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 4034 "datetimemodule.c"
      case 2: // $bb1
        var $9=HEAP[$self_addr]; //@line 4034 "datetimemodule.c"
        var $10=(($9+24)&4294967295); //@line 4034 "datetimemodule.c"
        var $11=HEAP[$10]; //@line 4034 "datetimemodule.c"
        var $12=(($11)&4294967295); //@line 4034 "datetimemodule.c"
        var $13=HEAP[$12]; //@line 4034 "datetimemodule.c"
        var $14=((($13) - 1)&4294967295); //@line 4034 "datetimemodule.c"
        var $15=(($11)&4294967295); //@line 4034 "datetimemodule.c"
        HEAP[$15]=$14; //@line 4034 "datetimemodule.c"
        var $16=(($11)&4294967295); //@line 4034 "datetimemodule.c"
        var $17=HEAP[$16]; //@line 4034 "datetimemodule.c"
        var $18=((($17))|0)==0; //@line 4034 "datetimemodule.c"
        if ($18) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4034 "datetimemodule.c"
      case 3: // $bb2
        var $19=HEAP[$self_addr]; //@line 4034 "datetimemodule.c"
        var $20=(($19+24)&4294967295); //@line 4034 "datetimemodule.c"
        var $21=HEAP[$20]; //@line 4034 "datetimemodule.c"
        var $22=(($21+4)&4294967295); //@line 4034 "datetimemodule.c"
        var $23=HEAP[$22]; //@line 4034 "datetimemodule.c"
        var $24=(($23+24)&4294967295); //@line 4034 "datetimemodule.c"
        var $25=HEAP[$24]; //@line 4034 "datetimemodule.c"
        var $26=HEAP[$self_addr]; //@line 4034 "datetimemodule.c"
        var $27=(($26+24)&4294967295); //@line 4034 "datetimemodule.c"
        var $28=HEAP[$27]; //@line 4034 "datetimemodule.c"
        FUNCTION_TABLE[$25]($28); //@line 4034 "datetimemodule.c"
        __label__ = 4; break; //@line 4034 "datetimemodule.c"
      case 4: // $bb3
        var $29=HEAP[$self_addr]; //@line 4036 "datetimemodule.c"
        var $30=$29; //@line 4036 "datetimemodule.c"
        var $31=(($30+4)&4294967295); //@line 4036 "datetimemodule.c"
        var $32=HEAP[$31]; //@line 4036 "datetimemodule.c"
        var $33=(($32+160)&4294967295); //@line 4036 "datetimemodule.c"
        var $34=HEAP[$33]; //@line 4036 "datetimemodule.c"
        var $35=HEAP[$self_addr]; //@line 4036 "datetimemodule.c"
        var $36=$35; //@line 4036 "datetimemodule.c"
        FUNCTION_TABLE[$34]($36); //@line 4036 "datetimemodule.c"
        __label__ = 5; break; //@line 4037 "datetimemodule.c"
      case 5: // $return
        STACKTOP = __stackBase__;
        return; //@line 4037 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_utcoffset($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $unused_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $iftmp_428=__stackBase__+12;
        var $0=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$unused_addr]=$unused;
        var $1=HEAP[$self_addr]; //@line 4046 "datetimemodule.c"
        var $2=$1; //@line 4046 "datetimemodule.c"
        var $3=HEAP[$self_addr]; //@line 4046 "datetimemodule.c"
        var $4=$3; //@line 4046 "datetimemodule.c"
        var $5=(($4+12)&4294967295); //@line 4046 "datetimemodule.c"
        var $6=HEAP[$5]; //@line 4046 "datetimemodule.c"
        var $7=reSign(($6), 8, 0)!=0; //@line 4046 "datetimemodule.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4046 "datetimemodule.c"
      case 1: // $bb
        var $8=HEAP[$self_addr]; //@line 4046 "datetimemodule.c"
        var $9=(($8+24)&4294967295); //@line 4046 "datetimemodule.c"
        var $10=HEAP[$9]; //@line 4046 "datetimemodule.c"
        HEAP[$iftmp_428]=$10; //@line 4046 "datetimemodule.c"
        __label__ = 3; break; //@line 4046 "datetimemodule.c"
      case 2: // $bb1
        HEAP[$iftmp_428]=__Py_NoneStruct; //@line 4046 "datetimemodule.c"
        __label__ = 3; break; //@line 4046 "datetimemodule.c"
      case 3: // $bb2
        var $11=HEAP[$iftmp_428]; //@line 4046 "datetimemodule.c"
        var $12=_offset_as_timedelta($11, ((__str42)&4294967295), $2); //@line 4046 "datetimemodule.c"
        HEAP[$0]=$12; //@line 4046 "datetimemodule.c"
        var $13=HEAP[$0]; //@line 4046 "datetimemodule.c"
        HEAP[$retval]=$13; //@line 4046 "datetimemodule.c"
        __label__ = 4; break; //@line 4046 "datetimemodule.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 4046 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 4046 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_dst($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $unused_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $iftmp_431=__stackBase__+12;
        var $0=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$unused_addr]=$unused;
        var $1=HEAP[$self_addr]; //@line 4052 "datetimemodule.c"
        var $2=$1; //@line 4052 "datetimemodule.c"
        var $3=HEAP[$self_addr]; //@line 4052 "datetimemodule.c"
        var $4=$3; //@line 4052 "datetimemodule.c"
        var $5=(($4+12)&4294967295); //@line 4052 "datetimemodule.c"
        var $6=HEAP[$5]; //@line 4052 "datetimemodule.c"
        var $7=reSign(($6), 8, 0)!=0; //@line 4052 "datetimemodule.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4052 "datetimemodule.c"
      case 1: // $bb
        var $8=HEAP[$self_addr]; //@line 4052 "datetimemodule.c"
        var $9=(($8+24)&4294967295); //@line 4052 "datetimemodule.c"
        var $10=HEAP[$9]; //@line 4052 "datetimemodule.c"
        HEAP[$iftmp_431]=$10; //@line 4052 "datetimemodule.c"
        __label__ = 3; break; //@line 4052 "datetimemodule.c"
      case 2: // $bb1
        HEAP[$iftmp_431]=__Py_NoneStruct; //@line 4052 "datetimemodule.c"
        __label__ = 3; break; //@line 4052 "datetimemodule.c"
      case 3: // $bb2
        var $11=HEAP[$iftmp_431]; //@line 4052 "datetimemodule.c"
        var $12=_offset_as_timedelta($11, ((__str44)&4294967295), $2); //@line 4052 "datetimemodule.c"
        HEAP[$0]=$12; //@line 4052 "datetimemodule.c"
        var $13=HEAP[$0]; //@line 4052 "datetimemodule.c"
        HEAP[$retval]=$13; //@line 4052 "datetimemodule.c"
        __label__ = 4; break; //@line 4052 "datetimemodule.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 4052 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 4052 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_tzname($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $unused_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $iftmp_434=__stackBase__+12;
        var $0=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$unused_addr]=$unused;
        var $1=HEAP[$self_addr]; //@line 4058 "datetimemodule.c"
        var $2=$1; //@line 4058 "datetimemodule.c"
        var $3=HEAP[$self_addr]; //@line 4058 "datetimemodule.c"
        var $4=$3; //@line 4058 "datetimemodule.c"
        var $5=(($4+12)&4294967295); //@line 4058 "datetimemodule.c"
        var $6=HEAP[$5]; //@line 4058 "datetimemodule.c"
        var $7=reSign(($6), 8, 0)!=0; //@line 4058 "datetimemodule.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4058 "datetimemodule.c"
      case 1: // $bb
        var $8=HEAP[$self_addr]; //@line 4058 "datetimemodule.c"
        var $9=(($8+24)&4294967295); //@line 4058 "datetimemodule.c"
        var $10=HEAP[$9]; //@line 4058 "datetimemodule.c"
        HEAP[$iftmp_434]=$10; //@line 4058 "datetimemodule.c"
        __label__ = 3; break; //@line 4058 "datetimemodule.c"
      case 2: // $bb1
        HEAP[$iftmp_434]=__Py_NoneStruct; //@line 4058 "datetimemodule.c"
        __label__ = 3; break; //@line 4058 "datetimemodule.c"
      case 3: // $bb2
        var $11=HEAP[$iftmp_434]; //@line 4058 "datetimemodule.c"
        var $12=_call_tzname($11, $2); //@line 4058 "datetimemodule.c"
        HEAP[$0]=$12; //@line 4058 "datetimemodule.c"
        var $13=HEAP[$0]; //@line 4058 "datetimemodule.c"
        HEAP[$retval]=$13; //@line 4058 "datetimemodule.c"
        __label__ = 4; break; //@line 4058 "datetimemodule.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 4058 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 4058 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _add_datetime_timedelta($date, $delta, $factor) {
    var __stackBase__  = STACKTOP; STACKTOP += 52; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 52);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $date_addr=__stackBase__;
        var $delta_addr=__stackBase__+4;
        var $factor_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $iftmp_440=__stackBase__+16;
        var $0=__stackBase__+20;
        var $year=__stackBase__+24;
        var $month=__stackBase__+28;
        var $day=__stackBase__+32;
        var $hour=__stackBase__+36;
        var $minute=__stackBase__+40;
        var $second=__stackBase__+44;
        var $microsecond=__stackBase__+48;
        var $_alloca_point_=0;
        HEAP[$date_addr]=$date;
        HEAP[$delta_addr]=$delta;
        HEAP[$factor_addr]=$factor;
        var $1=HEAP[$date_addr]; //@line 4076 "datetimemodule.c"
        var $2=$1; //@line 4076 "datetimemodule.c"
        var $3=(($2+13)&4294967295); //@line 4076 "datetimemodule.c"
        var $4=(($3)&4294967295); //@line 4076 "datetimemodule.c"
        var $5=HEAP[$4]; //@line 4076 "datetimemodule.c"
        var $6=unSign(($5), 8, 0); //@line 4076 "datetimemodule.c"
        var $7=($6) << 8; //@line 4076 "datetimemodule.c"
        var $8=HEAP[$date_addr]; //@line 4076 "datetimemodule.c"
        var $9=$8; //@line 4076 "datetimemodule.c"
        var $10=(($9+13)&4294967295); //@line 4076 "datetimemodule.c"
        var $11=(($10+1)&4294967295); //@line 4076 "datetimemodule.c"
        var $12=HEAP[$11]; //@line 4076 "datetimemodule.c"
        var $13=unSign(($12), 8, 0); //@line 4076 "datetimemodule.c"
        var $14=($7) | ($13); //@line 4076 "datetimemodule.c"
        HEAP[$year]=$14; //@line 4076 "datetimemodule.c"
        var $15=HEAP[$date_addr]; //@line 4077 "datetimemodule.c"
        var $16=$15; //@line 4077 "datetimemodule.c"
        var $17=(($16+13)&4294967295); //@line 4077 "datetimemodule.c"
        var $18=(($17+2)&4294967295); //@line 4077 "datetimemodule.c"
        var $19=HEAP[$18]; //@line 4077 "datetimemodule.c"
        var $20=unSign(($19), 8, 0); //@line 4077 "datetimemodule.c"
        HEAP[$month]=$20; //@line 4077 "datetimemodule.c"
        var $21=HEAP[$date_addr]; //@line 4078 "datetimemodule.c"
        var $22=$21; //@line 4078 "datetimemodule.c"
        var $23=(($22+13)&4294967295); //@line 4078 "datetimemodule.c"
        var $24=(($23+3)&4294967295); //@line 4078 "datetimemodule.c"
        var $25=HEAP[$24]; //@line 4078 "datetimemodule.c"
        var $26=unSign(($25), 8, 0); //@line 4078 "datetimemodule.c"
        var $27=HEAP[$delta_addr]; //@line 4078 "datetimemodule.c"
        var $28=(($27+12)&4294967295); //@line 4078 "datetimemodule.c"
        var $29=HEAP[$28]; //@line 4078 "datetimemodule.c"
        var $30=HEAP[$factor_addr]; //@line 4078 "datetimemodule.c"
        var $31=((($29) * ($30))&4294967295); //@line 4078 "datetimemodule.c"
        var $32=((($26) + ($31))&4294967295); //@line 4078 "datetimemodule.c"
        HEAP[$day]=$32; //@line 4078 "datetimemodule.c"
        var $33=HEAP[$date_addr]; //@line 4079 "datetimemodule.c"
        var $34=(($33+13)&4294967295); //@line 4079 "datetimemodule.c"
        var $35=(($34+4)&4294967295); //@line 4079 "datetimemodule.c"
        var $36=HEAP[$35]; //@line 4079 "datetimemodule.c"
        var $37=unSign(($36), 8, 0); //@line 4079 "datetimemodule.c"
        HEAP[$hour]=$37; //@line 4079 "datetimemodule.c"
        var $38=HEAP[$date_addr]; //@line 4080 "datetimemodule.c"
        var $39=(($38+13)&4294967295); //@line 4080 "datetimemodule.c"
        var $40=(($39+5)&4294967295); //@line 4080 "datetimemodule.c"
        var $41=HEAP[$40]; //@line 4080 "datetimemodule.c"
        var $42=unSign(($41), 8, 0); //@line 4080 "datetimemodule.c"
        HEAP[$minute]=$42; //@line 4080 "datetimemodule.c"
        var $43=HEAP[$date_addr]; //@line 4081 "datetimemodule.c"
        var $44=(($43+13)&4294967295); //@line 4081 "datetimemodule.c"
        var $45=(($44+6)&4294967295); //@line 4081 "datetimemodule.c"
        var $46=HEAP[$45]; //@line 4081 "datetimemodule.c"
        var $47=unSign(($46), 8, 0); //@line 4081 "datetimemodule.c"
        var $48=HEAP[$delta_addr]; //@line 4081 "datetimemodule.c"
        var $49=(($48+16)&4294967295); //@line 4081 "datetimemodule.c"
        var $50=HEAP[$49]; //@line 4081 "datetimemodule.c"
        var $51=HEAP[$factor_addr]; //@line 4081 "datetimemodule.c"
        var $52=((($50) * ($51))&4294967295); //@line 4081 "datetimemodule.c"
        var $53=((($47) + ($52))&4294967295); //@line 4081 "datetimemodule.c"
        HEAP[$second]=$53; //@line 4081 "datetimemodule.c"
        var $54=HEAP[$date_addr]; //@line 4083 "datetimemodule.c"
        var $55=(($54+13)&4294967295); //@line 4083 "datetimemodule.c"
        var $56=(($55+7)&4294967295); //@line 4083 "datetimemodule.c"
        var $57=HEAP[$56]; //@line 4083 "datetimemodule.c"
        var $58=unSign(($57), 8, 0); //@line 4083 "datetimemodule.c"
        var $59=($58) << 16; //@line 4083 "datetimemodule.c"
        var $60=HEAP[$date_addr]; //@line 4083 "datetimemodule.c"
        var $61=(($60+13)&4294967295); //@line 4083 "datetimemodule.c"
        var $62=(($61+8)&4294967295); //@line 4083 "datetimemodule.c"
        var $63=HEAP[$62]; //@line 4083 "datetimemodule.c"
        var $64=unSign(($63), 8, 0); //@line 4083 "datetimemodule.c"
        var $65=($64) << 8; //@line 4083 "datetimemodule.c"
        var $66=($59) | ($65); //@line 4083 "datetimemodule.c"
        var $67=HEAP[$date_addr]; //@line 4083 "datetimemodule.c"
        var $68=(($67+13)&4294967295); //@line 4083 "datetimemodule.c"
        var $69=(($68+9)&4294967295); //@line 4083 "datetimemodule.c"
        var $70=HEAP[$69]; //@line 4083 "datetimemodule.c"
        var $71=unSign(($70), 8, 0); //@line 4083 "datetimemodule.c"
        var $72=($66) | ($71); //@line 4083 "datetimemodule.c"
        var $73=HEAP[$delta_addr]; //@line 4083 "datetimemodule.c"
        var $74=(($73+20)&4294967295); //@line 4083 "datetimemodule.c"
        var $75=HEAP[$74]; //@line 4083 "datetimemodule.c"
        var $76=HEAP[$factor_addr]; //@line 4083 "datetimemodule.c"
        var $77=((($75) * ($76))&4294967295); //@line 4083 "datetimemodule.c"
        var $78=((($72) + ($77))&4294967295); //@line 4083 "datetimemodule.c"
        HEAP[$microsecond]=$78; //@line 4083 "datetimemodule.c"
        var $79=HEAP[$factor_addr]; //@line 4085 "datetimemodule.c"
        var $80=((($79))|0)!=1; //@line 4085 "datetimemodule.c"
        if ($80) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 4085 "datetimemodule.c"
      case 1: // $bb
        var $81=HEAP[$factor_addr]; //@line 4085 "datetimemodule.c"
        var $82=((($81))|0)!=-1; //@line 4085 "datetimemodule.c"
        if ($82) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 4085 "datetimemodule.c"
      case 2: // $bb1
        ___assert_fail(((__str233)&4294967295), ((__str1)&4294967295), 4085, ((___PRETTY_FUNCTION___13012)&4294967295)); //@line 4085 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 14789"; //@line 4085 "datetimemodule.c"
      case 3: // $bb2
        var $83=_normalize_datetime($year, $month, $day, $hour, $minute, $second, $microsecond); //@line 4086 "datetimemodule.c"
        var $84=((($83))|0) < 0; //@line 4086 "datetimemodule.c"
        if ($84) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4086 "datetimemodule.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 4088 "datetimemodule.c"
        __label__ = 9; break; //@line 4088 "datetimemodule.c"
      case 5: // $bb4
        var $85=HEAP[$date_addr]; //@line 4090 "datetimemodule.c"
        var $86=$85; //@line 4090 "datetimemodule.c"
        var $87=(($86+12)&4294967295); //@line 4090 "datetimemodule.c"
        var $88=HEAP[$87]; //@line 4090 "datetimemodule.c"
        var $89=reSign(($88), 8, 0)!=0; //@line 4090 "datetimemodule.c"
        if ($89) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 4090 "datetimemodule.c"
      case 6: // $bb5
        var $90=HEAP[$date_addr]; //@line 4090 "datetimemodule.c"
        var $91=(($90+24)&4294967295); //@line 4090 "datetimemodule.c"
        var $92=HEAP[$91]; //@line 4090 "datetimemodule.c"
        HEAP[$iftmp_440]=$92; //@line 4090 "datetimemodule.c"
        __label__ = 8; break; //@line 4090 "datetimemodule.c"
      case 7: // $bb6
        HEAP[$iftmp_440]=__Py_NoneStruct; //@line 4090 "datetimemodule.c"
        __label__ = 8; break; //@line 4090 "datetimemodule.c"
      case 8: // $bb7
        var $93=HEAP[$microsecond]; //@line 4090 "datetimemodule.c"
        var $94=HEAP[$second]; //@line 4090 "datetimemodule.c"
        var $95=HEAP[$minute]; //@line 4090 "datetimemodule.c"
        var $96=HEAP[$hour]; //@line 4090 "datetimemodule.c"
        var $97=HEAP[$day]; //@line 4090 "datetimemodule.c"
        var $98=HEAP[$month]; //@line 4090 "datetimemodule.c"
        var $99=HEAP[$year]; //@line 4090 "datetimemodule.c"
        var $100=HEAP[$iftmp_440]; //@line 4090 "datetimemodule.c"
        var $101=_new_datetime_ex($99, $98, $97, $96, $95, $94, $93, $100, _PyDateTime_DateTimeType); //@line 4090 "datetimemodule.c"
        HEAP[$0]=$101; //@line 4090 "datetimemodule.c"
        __label__ = 9; break; //@line 4090 "datetimemodule.c"
      case 9: // $bb8
        var $102=HEAP[$0]; //@line 4088 "datetimemodule.c"
        HEAP[$retval]=$102; //@line 4088 "datetimemodule.c"
        __label__ = 10; break; //@line 4088 "datetimemodule.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 4088 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 4088 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_add($left, $right) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $left_addr=__stackBase__;
        var $right_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$left_addr]=$left;
        HEAP[$right_addr]=$right;
        var $1=HEAP[$left_addr]; //@line 4098 "datetimemodule.c"
        var $2=(($1+4)&4294967295); //@line 4098 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 4098 "datetimemodule.c"
        var $4=($3)==(_PyDateTime_DateTimeType); //@line 4098 "datetimemodule.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 4098 "datetimemodule.c"
      case 1: // $bb
        var $5=HEAP[$left_addr]; //@line 4098 "datetimemodule.c"
        var $6=(($5+4)&4294967295); //@line 4098 "datetimemodule.c"
        var $7=HEAP[$6]; //@line 4098 "datetimemodule.c"
        var $8=_PyType_IsSubtype($7, _PyDateTime_DateTimeType); //@line 4098 "datetimemodule.c"
        var $9=((($8))|0)!=0; //@line 4098 "datetimemodule.c"
        if ($9) { __label__ = 2; break; } else { __label__ = 6; break; } //@line 4098 "datetimemodule.c"
      case 2: // $bb1
        var $10=HEAP[$right_addr]; //@line 4100 "datetimemodule.c"
        var $11=(($10+4)&4294967295); //@line 4100 "datetimemodule.c"
        var $12=HEAP[$11]; //@line 4100 "datetimemodule.c"
        var $13=($12)==(_PyDateTime_DeltaType); //@line 4100 "datetimemodule.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 4100 "datetimemodule.c"
      case 3: // $bb2
        var $14=HEAP[$right_addr]; //@line 4100 "datetimemodule.c"
        var $15=(($14+4)&4294967295); //@line 4100 "datetimemodule.c"
        var $16=HEAP[$15]; //@line 4100 "datetimemodule.c"
        var $17=_PyType_IsSubtype($16, _PyDateTime_DeltaType); //@line 4100 "datetimemodule.c"
        var $18=((($17))|0)!=0; //@line 4100 "datetimemodule.c"
        if ($18) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4100 "datetimemodule.c"
      case 4: // $bb3
        var $19=HEAP[$right_addr]; //@line 4102 "datetimemodule.c"
        var $20=$19; //@line 4102 "datetimemodule.c"
        var $21=HEAP[$left_addr]; //@line 4102 "datetimemodule.c"
        var $22=$21; //@line 4102 "datetimemodule.c"
        var $23=_add_datetime_timedelta($22, $20, 1); //@line 4102 "datetimemodule.c"
        HEAP[$0]=$23; //@line 4102 "datetimemodule.c"
        __label__ = 10; break; //@line 4102 "datetimemodule.c"
      case 5: // $bb4
        __label__ = 9; break; //@line 4102 "datetimemodule.c"
      case 6: // $bb5
        var $24=HEAP[$left_addr]; //@line 4107 "datetimemodule.c"
        var $25=(($24+4)&4294967295); //@line 4107 "datetimemodule.c"
        var $26=HEAP[$25]; //@line 4107 "datetimemodule.c"
        var $27=($26)==(_PyDateTime_DeltaType); //@line 4107 "datetimemodule.c"
        if ($27) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 4107 "datetimemodule.c"
      case 7: // $bb6
        var $28=HEAP[$left_addr]; //@line 4107 "datetimemodule.c"
        var $29=(($28+4)&4294967295); //@line 4107 "datetimemodule.c"
        var $30=HEAP[$29]; //@line 4107 "datetimemodule.c"
        var $31=_PyType_IsSubtype($30, _PyDateTime_DeltaType); //@line 4107 "datetimemodule.c"
        var $32=((($31))|0)!=0; //@line 4107 "datetimemodule.c"
        if ($32) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4107 "datetimemodule.c"
      case 8: // $bb7
        var $33=HEAP[$left_addr]; //@line 4109 "datetimemodule.c"
        var $34=$33; //@line 4109 "datetimemodule.c"
        var $35=HEAP[$right_addr]; //@line 4109 "datetimemodule.c"
        var $36=$35; //@line 4109 "datetimemodule.c"
        var $37=_add_datetime_timedelta($36, $34, 1); //@line 4109 "datetimemodule.c"
        HEAP[$0]=$37; //@line 4109 "datetimemodule.c"
        __label__ = 10; break; //@line 4109 "datetimemodule.c"
      case 9: // $bb8
        var $38=HEAP[((__Py_NotImplementedStruct)&4294967295)]; //@line 4113 "datetimemodule.c"
        var $39=((($38) + 1)&4294967295); //@line 4113 "datetimemodule.c"
        HEAP[((__Py_NotImplementedStruct)&4294967295)]=$39; //@line 4113 "datetimemodule.c"
        HEAP[$0]=__Py_NotImplementedStruct; //@line 4114 "datetimemodule.c"
        __label__ = 10; break; //@line 4114 "datetimemodule.c"
      case 10: // $bb9
        var $40=HEAP[$0]; //@line 4102 "datetimemodule.c"
        HEAP[$retval]=$40; //@line 4102 "datetimemodule.c"
        __label__ = 11; break; //@line 4102 "datetimemodule.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 4102 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 4102 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_subtract($left, $right) {
    var __stackBase__  = STACKTOP; STACKTOP += 48; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 48);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $left_addr=__stackBase__;
        var $right_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $result=__stackBase__+16;
        var $n1=__stackBase__+20;
        var $n2=__stackBase__+24;
        var $offset1=__stackBase__+28;
        var $offset2=__stackBase__+32;
        var $delta_d=__stackBase__+36;
        var $delta_s=__stackBase__+40;
        var $delta_us=__stackBase__+44;
        var $_alloca_point_=0;
        HEAP[$left_addr]=$left;
        HEAP[$right_addr]=$right;
        HEAP[$result]=__Py_NotImplementedStruct; //@line 4120 "datetimemodule.c"
        var $1=HEAP[$left_addr]; //@line 4122 "datetimemodule.c"
        var $2=(($1+4)&4294967295); //@line 4122 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 4122 "datetimemodule.c"
        var $4=($3)==(_PyDateTime_DateTimeType); //@line 4122 "datetimemodule.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 4122 "datetimemodule.c"
      case 1: // $bb
        var $5=HEAP[$left_addr]; //@line 4122 "datetimemodule.c"
        var $6=(($5+4)&4294967295); //@line 4122 "datetimemodule.c"
        var $7=HEAP[$6]; //@line 4122 "datetimemodule.c"
        var $8=_PyType_IsSubtype($7, _PyDateTime_DateTimeType); //@line 4122 "datetimemodule.c"
        var $9=((($8))|0)!=0; //@line 4122 "datetimemodule.c"
        if ($9) { __label__ = 2; break; } else { __label__ = 15; break; } //@line 4122 "datetimemodule.c"
      case 2: // $bb1
        var $10=HEAP[$right_addr]; //@line 4124 "datetimemodule.c"
        var $11=(($10+4)&4294967295); //@line 4124 "datetimemodule.c"
        var $12=HEAP[$11]; //@line 4124 "datetimemodule.c"
        var $13=($12)==(_PyDateTime_DateTimeType); //@line 4124 "datetimemodule.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 4124 "datetimemodule.c"
      case 3: // $bb2
        var $14=HEAP[$right_addr]; //@line 4124 "datetimemodule.c"
        var $15=(($14+4)&4294967295); //@line 4124 "datetimemodule.c"
        var $16=HEAP[$15]; //@line 4124 "datetimemodule.c"
        var $17=_PyType_IsSubtype($16, _PyDateTime_DateTimeType); //@line 4124 "datetimemodule.c"
        var $18=((($17))|0)!=0; //@line 4124 "datetimemodule.c"
        if ($18) { __label__ = 4; break; } else { __label__ = 12; break; } //@line 4124 "datetimemodule.c"
      case 4: // $bb3
        var $19=HEAP[$left_addr]; //@line 4130 "datetimemodule.c"
        var $20=HEAP[$left_addr]; //@line 4130 "datetimemodule.c"
        var $21=HEAP[$right_addr]; //@line 4130 "datetimemodule.c"
        var $22=HEAP[$right_addr]; //@line 4130 "datetimemodule.c"
        var $23=_classify_two_utcoffsets($19, $offset1, $n1, $20, $21, $offset2, $n2, $22); //@line 4130 "datetimemodule.c"
        var $24=((($23))|0) < 0; //@line 4130 "datetimemodule.c"
        if ($24) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4130 "datetimemodule.c"
      case 5: // $bb4
        HEAP[$0]=0; //@line 4133 "datetimemodule.c"
        __label__ = 18; break; //@line 4133 "datetimemodule.c"
      case 6: // $bb5
        var $25=HEAP[$n1]; //@line 4134 "datetimemodule.c"
        var $26=((($25))|0)==1; //@line 4134 "datetimemodule.c"
        if ($26) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 4134 "datetimemodule.c"
      case 7: // $bb6
        var $27=HEAP[$n2]; //@line 4134 "datetimemodule.c"
        var $28=((($27))|0)==1; //@line 4134 "datetimemodule.c"
        if ($28) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4134 "datetimemodule.c"
      case 8: // $bb7
        ___assert_fail(((__str203)&4294967295), ((__str1)&4294967295), 4134, ((___PRETTY_FUNCTION___13120)&4294967295)); //@line 4134 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 15019"; //@line 4134 "datetimemodule.c"
      case 9: // $bb8
        var $29=HEAP[$n1]; //@line 4135 "datetimemodule.c"
        var $30=HEAP[$n2]; //@line 4135 "datetimemodule.c"
        var $31=((($29))|0)!=((($30))|0); //@line 4135 "datetimemodule.c"
        if ($31) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 4135 "datetimemodule.c"
      case 10: // $bb9
        var $32=HEAP[_PyExc_TypeError]; //@line 4136 "datetimemodule.c"
        _PyErr_SetString($32, ((__str234)&4294967295)); //@line 4136 "datetimemodule.c"
        HEAP[$0]=0; //@line 4139 "datetimemodule.c"
        __label__ = 18; break; //@line 4139 "datetimemodule.c"
      case 11: // $bb10
        var $33=HEAP[$left_addr]; //@line 4141 "datetimemodule.c"
        var $34=$33; //@line 4141 "datetimemodule.c"
        var $35=(($34+13)&4294967295); //@line 4141 "datetimemodule.c"
        var $36=(($35+3)&4294967295); //@line 4141 "datetimemodule.c"
        var $37=HEAP[$36]; //@line 4141 "datetimemodule.c"
        var $38=unSign(($37), 8, 0); //@line 4141 "datetimemodule.c"
        var $39=HEAP[$left_addr]; //@line 4141 "datetimemodule.c"
        var $40=$39; //@line 4141 "datetimemodule.c"
        var $41=(($40+13)&4294967295); //@line 4141 "datetimemodule.c"
        var $42=(($41+2)&4294967295); //@line 4141 "datetimemodule.c"
        var $43=HEAP[$42]; //@line 4141 "datetimemodule.c"
        var $44=unSign(($43), 8, 0); //@line 4141 "datetimemodule.c"
        var $45=HEAP[$left_addr]; //@line 4141 "datetimemodule.c"
        var $46=$45; //@line 4141 "datetimemodule.c"
        var $47=(($46+13)&4294967295); //@line 4141 "datetimemodule.c"
        var $48=(($47)&4294967295); //@line 4141 "datetimemodule.c"
        var $49=HEAP[$48]; //@line 4141 "datetimemodule.c"
        var $50=unSign(($49), 8, 0); //@line 4141 "datetimemodule.c"
        var $51=($50) << 8; //@line 4141 "datetimemodule.c"
        var $52=HEAP[$left_addr]; //@line 4141 "datetimemodule.c"
        var $53=$52; //@line 4141 "datetimemodule.c"
        var $54=(($53+13)&4294967295); //@line 4141 "datetimemodule.c"
        var $55=(($54+1)&4294967295); //@line 4141 "datetimemodule.c"
        var $56=HEAP[$55]; //@line 4141 "datetimemodule.c"
        var $57=unSign(($56), 8, 0); //@line 4141 "datetimemodule.c"
        var $58=($51) | ($57); //@line 4141 "datetimemodule.c"
        var $59=_ymd_to_ord($58, $44, $38); //@line 4141 "datetimemodule.c"
        var $60=HEAP[$right_addr]; //@line 4141 "datetimemodule.c"
        var $61=$60; //@line 4141 "datetimemodule.c"
        var $62=(($61+13)&4294967295); //@line 4141 "datetimemodule.c"
        var $63=(($62+3)&4294967295); //@line 4141 "datetimemodule.c"
        var $64=HEAP[$63]; //@line 4141 "datetimemodule.c"
        var $65=unSign(($64), 8, 0); //@line 4141 "datetimemodule.c"
        var $66=HEAP[$right_addr]; //@line 4141 "datetimemodule.c"
        var $67=$66; //@line 4141 "datetimemodule.c"
        var $68=(($67+13)&4294967295); //@line 4141 "datetimemodule.c"
        var $69=(($68+2)&4294967295); //@line 4141 "datetimemodule.c"
        var $70=HEAP[$69]; //@line 4141 "datetimemodule.c"
        var $71=unSign(($70), 8, 0); //@line 4141 "datetimemodule.c"
        var $72=HEAP[$right_addr]; //@line 4141 "datetimemodule.c"
        var $73=$72; //@line 4141 "datetimemodule.c"
        var $74=(($73+13)&4294967295); //@line 4141 "datetimemodule.c"
        var $75=(($74)&4294967295); //@line 4141 "datetimemodule.c"
        var $76=HEAP[$75]; //@line 4141 "datetimemodule.c"
        var $77=unSign(($76), 8, 0); //@line 4141 "datetimemodule.c"
        var $78=($77) << 8; //@line 4141 "datetimemodule.c"
        var $79=HEAP[$right_addr]; //@line 4141 "datetimemodule.c"
        var $80=$79; //@line 4141 "datetimemodule.c"
        var $81=(($80+13)&4294967295); //@line 4141 "datetimemodule.c"
        var $82=(($81+1)&4294967295); //@line 4141 "datetimemodule.c"
        var $83=HEAP[$82]; //@line 4141 "datetimemodule.c"
        var $84=unSign(($83), 8, 0); //@line 4141 "datetimemodule.c"
        var $85=($78) | ($84); //@line 4141 "datetimemodule.c"
        var $86=_ymd_to_ord($85, $71, $65); //@line 4141 "datetimemodule.c"
        var $87=((($59) - ($86))&4294967295); //@line 4141 "datetimemodule.c"
        HEAP[$delta_d]=$87; //@line 4141 "datetimemodule.c"
        var $88=HEAP[$left_addr]; //@line 4151 "datetimemodule.c"
        var $89=$88; //@line 4151 "datetimemodule.c"
        var $90=(($89+13)&4294967295); //@line 4151 "datetimemodule.c"
        var $91=(($90+4)&4294967295); //@line 4151 "datetimemodule.c"
        var $92=HEAP[$91]; //@line 4151 "datetimemodule.c"
        var $93=unSign(($92), 8, 0); //@line 4151 "datetimemodule.c"
        var $94=HEAP[$right_addr]; //@line 4151 "datetimemodule.c"
        var $95=$94; //@line 4151 "datetimemodule.c"
        var $96=(($95+13)&4294967295); //@line 4151 "datetimemodule.c"
        var $97=(($96+4)&4294967295); //@line 4151 "datetimemodule.c"
        var $98=HEAP[$97]; //@line 4151 "datetimemodule.c"
        var $99=unSign(($98), 8, 0); //@line 4151 "datetimemodule.c"
        var $100=((($93) - ($99))&4294967295); //@line 4151 "datetimemodule.c"
        var $101=((($100) * 3600)&4294967295); //@line 4151 "datetimemodule.c"
        var $102=HEAP[$left_addr]; //@line 4151 "datetimemodule.c"
        var $103=$102; //@line 4151 "datetimemodule.c"
        var $104=(($103+13)&4294967295); //@line 4151 "datetimemodule.c"
        var $105=(($104+5)&4294967295); //@line 4151 "datetimemodule.c"
        var $106=HEAP[$105]; //@line 4151 "datetimemodule.c"
        var $107=unSign(($106), 8, 0); //@line 4151 "datetimemodule.c"
        var $108=HEAP[$right_addr]; //@line 4151 "datetimemodule.c"
        var $109=$108; //@line 4151 "datetimemodule.c"
        var $110=(($109+13)&4294967295); //@line 4151 "datetimemodule.c"
        var $111=(($110+5)&4294967295); //@line 4151 "datetimemodule.c"
        var $112=HEAP[$111]; //@line 4151 "datetimemodule.c"
        var $113=unSign(($112), 8, 0); //@line 4151 "datetimemodule.c"
        var $114=((($107) - ($113))&4294967295); //@line 4151 "datetimemodule.c"
        var $115=((($114) * 60)&4294967295); //@line 4151 "datetimemodule.c"
        var $116=((($101) + ($115))&4294967295); //@line 4151 "datetimemodule.c"
        var $117=HEAP[$left_addr]; //@line 4151 "datetimemodule.c"
        var $118=$117; //@line 4151 "datetimemodule.c"
        var $119=(($118+13)&4294967295); //@line 4151 "datetimemodule.c"
        var $120=(($119+6)&4294967295); //@line 4151 "datetimemodule.c"
        var $121=HEAP[$120]; //@line 4151 "datetimemodule.c"
        var $122=unSign(($121), 8, 0); //@line 4151 "datetimemodule.c"
        var $123=HEAP[$right_addr]; //@line 4151 "datetimemodule.c"
        var $124=$123; //@line 4151 "datetimemodule.c"
        var $125=(($124+13)&4294967295); //@line 4151 "datetimemodule.c"
        var $126=(($125+6)&4294967295); //@line 4151 "datetimemodule.c"
        var $127=HEAP[$126]; //@line 4151 "datetimemodule.c"
        var $128=unSign(($127), 8, 0); //@line 4151 "datetimemodule.c"
        var $129=((($122) - ($128))&4294967295); //@line 4151 "datetimemodule.c"
        var $130=((($116) + ($129))&4294967295); //@line 4151 "datetimemodule.c"
        HEAP[$delta_s]=$130; //@line 4151 "datetimemodule.c"
        var $131=HEAP[$left_addr]; //@line 4157 "datetimemodule.c"
        var $132=$131; //@line 4157 "datetimemodule.c"
        var $133=(($132+13)&4294967295); //@line 4157 "datetimemodule.c"
        var $134=(($133+7)&4294967295); //@line 4157 "datetimemodule.c"
        var $135=HEAP[$134]; //@line 4157 "datetimemodule.c"
        var $136=unSign(($135), 8, 0); //@line 4157 "datetimemodule.c"
        var $137=($136) << 16; //@line 4157 "datetimemodule.c"
        var $138=HEAP[$left_addr]; //@line 4157 "datetimemodule.c"
        var $139=$138; //@line 4157 "datetimemodule.c"
        var $140=(($139+13)&4294967295); //@line 4157 "datetimemodule.c"
        var $141=(($140+8)&4294967295); //@line 4157 "datetimemodule.c"
        var $142=HEAP[$141]; //@line 4157 "datetimemodule.c"
        var $143=unSign(($142), 8, 0); //@line 4157 "datetimemodule.c"
        var $144=($143) << 8; //@line 4157 "datetimemodule.c"
        var $145=($137) | ($144); //@line 4157 "datetimemodule.c"
        var $146=HEAP[$left_addr]; //@line 4157 "datetimemodule.c"
        var $147=$146; //@line 4157 "datetimemodule.c"
        var $148=(($147+13)&4294967295); //@line 4157 "datetimemodule.c"
        var $149=(($148+9)&4294967295); //@line 4157 "datetimemodule.c"
        var $150=HEAP[$149]; //@line 4157 "datetimemodule.c"
        var $151=unSign(($150), 8, 0); //@line 4157 "datetimemodule.c"
        var $152=($145) | ($151); //@line 4157 "datetimemodule.c"
        var $153=HEAP[$right_addr]; //@line 4157 "datetimemodule.c"
        var $154=$153; //@line 4157 "datetimemodule.c"
        var $155=(($154+13)&4294967295); //@line 4157 "datetimemodule.c"
        var $156=(($155+7)&4294967295); //@line 4157 "datetimemodule.c"
        var $157=HEAP[$156]; //@line 4157 "datetimemodule.c"
        var $158=unSign(($157), 8, 0); //@line 4157 "datetimemodule.c"
        var $159=($158) << 16; //@line 4157 "datetimemodule.c"
        var $160=HEAP[$right_addr]; //@line 4157 "datetimemodule.c"
        var $161=$160; //@line 4157 "datetimemodule.c"
        var $162=(($161+13)&4294967295); //@line 4157 "datetimemodule.c"
        var $163=(($162+8)&4294967295); //@line 4157 "datetimemodule.c"
        var $164=HEAP[$163]; //@line 4157 "datetimemodule.c"
        var $165=unSign(($164), 8, 0); //@line 4157 "datetimemodule.c"
        var $166=($165) << 8; //@line 4157 "datetimemodule.c"
        var $167=($159) | ($166); //@line 4157 "datetimemodule.c"
        var $168=HEAP[$right_addr]; //@line 4157 "datetimemodule.c"
        var $169=$168; //@line 4157 "datetimemodule.c"
        var $170=(($169+13)&4294967295); //@line 4157 "datetimemodule.c"
        var $171=(($170+9)&4294967295); //@line 4157 "datetimemodule.c"
        var $172=HEAP[$171]; //@line 4157 "datetimemodule.c"
        var $173=unSign(($172), 8, 0); //@line 4157 "datetimemodule.c"
        var $174=($167) | ($173); //@line 4157 "datetimemodule.c"
        var $175=((($152) - ($174))&4294967295); //@line 4157 "datetimemodule.c"
        HEAP[$delta_us]=$175; //@line 4157 "datetimemodule.c"
        var $176=HEAP[$offset2]; //@line 4162 "datetimemodule.c"
        var $177=HEAP[$offset1]; //@line 4162 "datetimemodule.c"
        var $178=((($176) - ($177))&4294967295); //@line 4162 "datetimemodule.c"
        var $179=((($178) * 60)&4294967295); //@line 4162 "datetimemodule.c"
        var $180=HEAP[$delta_s]; //@line 4162 "datetimemodule.c"
        var $181=((($179) + ($180))&4294967295); //@line 4162 "datetimemodule.c"
        HEAP[$delta_s]=$181; //@line 4162 "datetimemodule.c"
        var $182=HEAP[$delta_d]; //@line 4163 "datetimemodule.c"
        var $183=HEAP[$delta_s]; //@line 4163 "datetimemodule.c"
        var $184=HEAP[$delta_us]; //@line 4163 "datetimemodule.c"
        var $185=_new_delta_ex($182, $183, $184, 1, _PyDateTime_DeltaType); //@line 4163 "datetimemodule.c"
        HEAP[$result]=$185; //@line 4163 "datetimemodule.c"
        __label__ = 15; break; //@line 4163 "datetimemodule.c"
      case 12: // $bb11
        var $186=HEAP[$right_addr]; //@line 4165 "datetimemodule.c"
        var $187=(($186+4)&4294967295); //@line 4165 "datetimemodule.c"
        var $188=HEAP[$187]; //@line 4165 "datetimemodule.c"
        var $189=($188)==(_PyDateTime_DeltaType); //@line 4165 "datetimemodule.c"
        if ($189) { __label__ = 14; break; } else { __label__ = 13; break; } //@line 4165 "datetimemodule.c"
      case 13: // $bb12
        var $190=HEAP[$right_addr]; //@line 4165 "datetimemodule.c"
        var $191=(($190+4)&4294967295); //@line 4165 "datetimemodule.c"
        var $192=HEAP[$191]; //@line 4165 "datetimemodule.c"
        var $193=_PyType_IsSubtype($192, _PyDateTime_DeltaType); //@line 4165 "datetimemodule.c"
        var $194=((($193))|0)!=0; //@line 4165 "datetimemodule.c"
        if ($194) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 4165 "datetimemodule.c"
      case 14: // $bb13
        var $195=HEAP[$right_addr]; //@line 4167 "datetimemodule.c"
        var $196=$195; //@line 4167 "datetimemodule.c"
        var $197=HEAP[$left_addr]; //@line 4167 "datetimemodule.c"
        var $198=$197; //@line 4167 "datetimemodule.c"
        var $199=_add_datetime_timedelta($198, $196, -1); //@line 4167 "datetimemodule.c"
        HEAP[$result]=$199; //@line 4167 "datetimemodule.c"
        __label__ = 15; break; //@line 4167 "datetimemodule.c"
      case 15: // $bb14
        var $200=HEAP[$result]; //@line 4174 "datetimemodule.c"
        var $201=($200)==(__Py_NotImplementedStruct); //@line 4174 "datetimemodule.c"
        if ($201) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 4174 "datetimemodule.c"
      case 16: // $bb15
        var $202=HEAP[$result]; //@line 4175 "datetimemodule.c"
        var $203=(($202)&4294967295); //@line 4175 "datetimemodule.c"
        var $204=HEAP[$203]; //@line 4175 "datetimemodule.c"
        var $205=((($204) + 1)&4294967295); //@line 4175 "datetimemodule.c"
        var $206=HEAP[$result]; //@line 4175 "datetimemodule.c"
        var $207=(($206)&4294967295); //@line 4175 "datetimemodule.c"
        HEAP[$207]=$205; //@line 4175 "datetimemodule.c"
        __label__ = 17; break; //@line 4175 "datetimemodule.c"
      case 17: // $bb16
        var $208=HEAP[$result]; //@line 4176 "datetimemodule.c"
        HEAP[$0]=$208; //@line 4176 "datetimemodule.c"
        __label__ = 18; break; //@line 4176 "datetimemodule.c"
      case 18: // $bb17
        var $209=HEAP[$0]; //@line 4133 "datetimemodule.c"
        HEAP[$retval]=$209; //@line 4133 "datetimemodule.c"
        __label__ = 19; break; //@line 4133 "datetimemodule.c"
      case 19: // $return
        var $retval18=HEAP[$retval]; //@line 4133 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval18; //@line 4133 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_repr($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 1020; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 1020);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $buffer=__stackBase__+12;
        var $type_name=__stackBase__+1012;
        var $baserepr=__stackBase__+1016;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 4185 "datetimemodule.c"
        var $2=$1; //@line 4185 "datetimemodule.c"
        var $3=(($2+4)&4294967295); //@line 4185 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 4185 "datetimemodule.c"
        var $5=(($4+12)&4294967295); //@line 4185 "datetimemodule.c"
        var $6=HEAP[$5]; //@line 4185 "datetimemodule.c"
        HEAP[$type_name]=$6; //@line 4185 "datetimemodule.c"
        var $7=HEAP[$self_addr]; //@line 4188 "datetimemodule.c"
        var $8=(($7+13)&4294967295); //@line 4188 "datetimemodule.c"
        var $9=(($8+7)&4294967295); //@line 4188 "datetimemodule.c"
        var $10=HEAP[$9]; //@line 4188 "datetimemodule.c"
        var $11=unSign(($10), 8, 0); //@line 4188 "datetimemodule.c"
        var $12=($11) << 16; //@line 4188 "datetimemodule.c"
        var $13=HEAP[$self_addr]; //@line 4188 "datetimemodule.c"
        var $14=(($13+13)&4294967295); //@line 4188 "datetimemodule.c"
        var $15=(($14+8)&4294967295); //@line 4188 "datetimemodule.c"
        var $16=HEAP[$15]; //@line 4188 "datetimemodule.c"
        var $17=unSign(($16), 8, 0); //@line 4188 "datetimemodule.c"
        var $18=($17) << 8; //@line 4188 "datetimemodule.c"
        var $19=($12) | ($18); //@line 4188 "datetimemodule.c"
        var $20=HEAP[$self_addr]; //@line 4188 "datetimemodule.c"
        var $21=(($20+13)&4294967295); //@line 4188 "datetimemodule.c"
        var $22=(($21+9)&4294967295); //@line 4188 "datetimemodule.c"
        var $23=HEAP[$22]; //@line 4188 "datetimemodule.c"
        var $24=unSign(($23), 8, 0); //@line 4188 "datetimemodule.c"
        var $25=($19) | ($24); //@line 4188 "datetimemodule.c"
        var $26=((($25))|0)!=0; //@line 4188 "datetimemodule.c"
        if ($26) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4188 "datetimemodule.c"
      case 1: // $bb
        var $27=HEAP[$self_addr]; //@line 4189 "datetimemodule.c"
        var $28=(($27+13)&4294967295); //@line 4189 "datetimemodule.c"
        var $29=(($28+7)&4294967295); //@line 4189 "datetimemodule.c"
        var $30=HEAP[$29]; //@line 4189 "datetimemodule.c"
        var $31=unSign(($30), 8, 0); //@line 4189 "datetimemodule.c"
        var $32=($31) << 16; //@line 4189 "datetimemodule.c"
        var $33=HEAP[$self_addr]; //@line 4189 "datetimemodule.c"
        var $34=(($33+13)&4294967295); //@line 4189 "datetimemodule.c"
        var $35=(($34+8)&4294967295); //@line 4189 "datetimemodule.c"
        var $36=HEAP[$35]; //@line 4189 "datetimemodule.c"
        var $37=unSign(($36), 8, 0); //@line 4189 "datetimemodule.c"
        var $38=($37) << 8; //@line 4189 "datetimemodule.c"
        var $39=($32) | ($38); //@line 4189 "datetimemodule.c"
        var $40=HEAP[$self_addr]; //@line 4189 "datetimemodule.c"
        var $41=(($40+13)&4294967295); //@line 4189 "datetimemodule.c"
        var $42=(($41+9)&4294967295); //@line 4189 "datetimemodule.c"
        var $43=HEAP[$42]; //@line 4189 "datetimemodule.c"
        var $44=unSign(($43), 8, 0); //@line 4189 "datetimemodule.c"
        var $45=($39) | ($44); //@line 4189 "datetimemodule.c"
        var $46=HEAP[$self_addr]; //@line 4189 "datetimemodule.c"
        var $47=(($46+13)&4294967295); //@line 4189 "datetimemodule.c"
        var $48=(($47+6)&4294967295); //@line 4189 "datetimemodule.c"
        var $49=HEAP[$48]; //@line 4189 "datetimemodule.c"
        var $50=unSign(($49), 8, 0); //@line 4189 "datetimemodule.c"
        var $51=HEAP[$self_addr]; //@line 4189 "datetimemodule.c"
        var $52=(($51+13)&4294967295); //@line 4189 "datetimemodule.c"
        var $53=(($52+5)&4294967295); //@line 4189 "datetimemodule.c"
        var $54=HEAP[$53]; //@line 4189 "datetimemodule.c"
        var $55=unSign(($54), 8, 0); //@line 4189 "datetimemodule.c"
        var $56=HEAP[$self_addr]; //@line 4189 "datetimemodule.c"
        var $57=(($56+13)&4294967295); //@line 4189 "datetimemodule.c"
        var $58=(($57+4)&4294967295); //@line 4189 "datetimemodule.c"
        var $59=HEAP[$58]; //@line 4189 "datetimemodule.c"
        var $60=unSign(($59), 8, 0); //@line 4189 "datetimemodule.c"
        var $61=HEAP[$self_addr]; //@line 4189 "datetimemodule.c"
        var $62=$61; //@line 4189 "datetimemodule.c"
        var $63=(($62+13)&4294967295); //@line 4189 "datetimemodule.c"
        var $64=(($63+3)&4294967295); //@line 4189 "datetimemodule.c"
        var $65=HEAP[$64]; //@line 4189 "datetimemodule.c"
        var $66=unSign(($65), 8, 0); //@line 4189 "datetimemodule.c"
        var $67=HEAP[$self_addr]; //@line 4189 "datetimemodule.c"
        var $68=$67; //@line 4189 "datetimemodule.c"
        var $69=(($68+13)&4294967295); //@line 4189 "datetimemodule.c"
        var $70=(($69+2)&4294967295); //@line 4189 "datetimemodule.c"
        var $71=HEAP[$70]; //@line 4189 "datetimemodule.c"
        var $72=unSign(($71), 8, 0); //@line 4189 "datetimemodule.c"
        var $73=HEAP[$self_addr]; //@line 4189 "datetimemodule.c"
        var $74=$73; //@line 4189 "datetimemodule.c"
        var $75=(($74+13)&4294967295); //@line 4189 "datetimemodule.c"
        var $76=(($75)&4294967295); //@line 4189 "datetimemodule.c"
        var $77=HEAP[$76]; //@line 4189 "datetimemodule.c"
        var $78=unSign(($77), 8, 0); //@line 4189 "datetimemodule.c"
        var $79=($78) << 8; //@line 4189 "datetimemodule.c"
        var $80=HEAP[$self_addr]; //@line 4189 "datetimemodule.c"
        var $81=$80; //@line 4189 "datetimemodule.c"
        var $82=(($81+13)&4294967295); //@line 4189 "datetimemodule.c"
        var $83=(($82+1)&4294967295); //@line 4189 "datetimemodule.c"
        var $84=HEAP[$83]; //@line 4189 "datetimemodule.c"
        var $85=unSign(($84), 8, 0); //@line 4189 "datetimemodule.c"
        var $86=($79) | ($85); //@line 4189 "datetimemodule.c"
        var $buffer1=$buffer; //@line 4189 "datetimemodule.c"
        var $87=HEAP[$type_name]; //@line 4189 "datetimemodule.c"
        var $88=_PyOS_snprintf($buffer1, 1000, ((__str235)&4294967295), $87, $86, $72, $66, $60, $55, $50, $45); //@line 4189 "datetimemodule.c"
        __label__ = 5; break; //@line 4189 "datetimemodule.c"
      case 2: // $bb2
        var $89=HEAP[$self_addr]; //@line 4197 "datetimemodule.c"
        var $90=(($89+13)&4294967295); //@line 4197 "datetimemodule.c"
        var $91=(($90+6)&4294967295); //@line 4197 "datetimemodule.c"
        var $92=HEAP[$91]; //@line 4197 "datetimemodule.c"
        var $93=reSign(($92), 8, 0)!=0; //@line 4197 "datetimemodule.c"
        if ($93) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4197 "datetimemodule.c"
      case 3: // $bb3
        var $94=HEAP[$self_addr]; //@line 4198 "datetimemodule.c"
        var $95=(($94+13)&4294967295); //@line 4198 "datetimemodule.c"
        var $96=(($95+6)&4294967295); //@line 4198 "datetimemodule.c"
        var $97=HEAP[$96]; //@line 4198 "datetimemodule.c"
        var $98=unSign(($97), 8, 0); //@line 4198 "datetimemodule.c"
        var $99=HEAP[$self_addr]; //@line 4198 "datetimemodule.c"
        var $100=(($99+13)&4294967295); //@line 4198 "datetimemodule.c"
        var $101=(($100+5)&4294967295); //@line 4198 "datetimemodule.c"
        var $102=HEAP[$101]; //@line 4198 "datetimemodule.c"
        var $103=unSign(($102), 8, 0); //@line 4198 "datetimemodule.c"
        var $104=HEAP[$self_addr]; //@line 4198 "datetimemodule.c"
        var $105=(($104+13)&4294967295); //@line 4198 "datetimemodule.c"
        var $106=(($105+4)&4294967295); //@line 4198 "datetimemodule.c"
        var $107=HEAP[$106]; //@line 4198 "datetimemodule.c"
        var $108=unSign(($107), 8, 0); //@line 4198 "datetimemodule.c"
        var $109=HEAP[$self_addr]; //@line 4198 "datetimemodule.c"
        var $110=$109; //@line 4198 "datetimemodule.c"
        var $111=(($110+13)&4294967295); //@line 4198 "datetimemodule.c"
        var $112=(($111+3)&4294967295); //@line 4198 "datetimemodule.c"
        var $113=HEAP[$112]; //@line 4198 "datetimemodule.c"
        var $114=unSign(($113), 8, 0); //@line 4198 "datetimemodule.c"
        var $115=HEAP[$self_addr]; //@line 4198 "datetimemodule.c"
        var $116=$115; //@line 4198 "datetimemodule.c"
        var $117=(($116+13)&4294967295); //@line 4198 "datetimemodule.c"
        var $118=(($117+2)&4294967295); //@line 4198 "datetimemodule.c"
        var $119=HEAP[$118]; //@line 4198 "datetimemodule.c"
        var $120=unSign(($119), 8, 0); //@line 4198 "datetimemodule.c"
        var $121=HEAP[$self_addr]; //@line 4198 "datetimemodule.c"
        var $122=$121; //@line 4198 "datetimemodule.c"
        var $123=(($122+13)&4294967295); //@line 4198 "datetimemodule.c"
        var $124=(($123)&4294967295); //@line 4198 "datetimemodule.c"
        var $125=HEAP[$124]; //@line 4198 "datetimemodule.c"
        var $126=unSign(($125), 8, 0); //@line 4198 "datetimemodule.c"
        var $127=($126) << 8; //@line 4198 "datetimemodule.c"
        var $128=HEAP[$self_addr]; //@line 4198 "datetimemodule.c"
        var $129=$128; //@line 4198 "datetimemodule.c"
        var $130=(($129+13)&4294967295); //@line 4198 "datetimemodule.c"
        var $131=(($130+1)&4294967295); //@line 4198 "datetimemodule.c"
        var $132=HEAP[$131]; //@line 4198 "datetimemodule.c"
        var $133=unSign(($132), 8, 0); //@line 4198 "datetimemodule.c"
        var $134=($127) | ($133); //@line 4198 "datetimemodule.c"
        var $buffer4=$buffer; //@line 4198 "datetimemodule.c"
        var $135=HEAP[$type_name]; //@line 4198 "datetimemodule.c"
        var $136=_PyOS_snprintf($buffer4, 1000, ((__str236)&4294967295), $135, $134, $120, $114, $108, $103, $98); //@line 4198 "datetimemodule.c"
        __label__ = 5; break; //@line 4198 "datetimemodule.c"
      case 4: // $bb5
        var $137=HEAP[$self_addr]; //@line 4206 "datetimemodule.c"
        var $138=(($137+13)&4294967295); //@line 4206 "datetimemodule.c"
        var $139=(($138+5)&4294967295); //@line 4206 "datetimemodule.c"
        var $140=HEAP[$139]; //@line 4206 "datetimemodule.c"
        var $141=unSign(($140), 8, 0); //@line 4206 "datetimemodule.c"
        var $142=HEAP[$self_addr]; //@line 4206 "datetimemodule.c"
        var $143=(($142+13)&4294967295); //@line 4206 "datetimemodule.c"
        var $144=(($143+4)&4294967295); //@line 4206 "datetimemodule.c"
        var $145=HEAP[$144]; //@line 4206 "datetimemodule.c"
        var $146=unSign(($145), 8, 0); //@line 4206 "datetimemodule.c"
        var $147=HEAP[$self_addr]; //@line 4206 "datetimemodule.c"
        var $148=$147; //@line 4206 "datetimemodule.c"
        var $149=(($148+13)&4294967295); //@line 4206 "datetimemodule.c"
        var $150=(($149+3)&4294967295); //@line 4206 "datetimemodule.c"
        var $151=HEAP[$150]; //@line 4206 "datetimemodule.c"
        var $152=unSign(($151), 8, 0); //@line 4206 "datetimemodule.c"
        var $153=HEAP[$self_addr]; //@line 4206 "datetimemodule.c"
        var $154=$153; //@line 4206 "datetimemodule.c"
        var $155=(($154+13)&4294967295); //@line 4206 "datetimemodule.c"
        var $156=(($155+2)&4294967295); //@line 4206 "datetimemodule.c"
        var $157=HEAP[$156]; //@line 4206 "datetimemodule.c"
        var $158=unSign(($157), 8, 0); //@line 4206 "datetimemodule.c"
        var $159=HEAP[$self_addr]; //@line 4206 "datetimemodule.c"
        var $160=$159; //@line 4206 "datetimemodule.c"
        var $161=(($160+13)&4294967295); //@line 4206 "datetimemodule.c"
        var $162=(($161)&4294967295); //@line 4206 "datetimemodule.c"
        var $163=HEAP[$162]; //@line 4206 "datetimemodule.c"
        var $164=unSign(($163), 8, 0); //@line 4206 "datetimemodule.c"
        var $165=($164) << 8; //@line 4206 "datetimemodule.c"
        var $166=HEAP[$self_addr]; //@line 4206 "datetimemodule.c"
        var $167=$166; //@line 4206 "datetimemodule.c"
        var $168=(($167+13)&4294967295); //@line 4206 "datetimemodule.c"
        var $169=(($168+1)&4294967295); //@line 4206 "datetimemodule.c"
        var $170=HEAP[$169]; //@line 4206 "datetimemodule.c"
        var $171=unSign(($170), 8, 0); //@line 4206 "datetimemodule.c"
        var $172=($165) | ($171); //@line 4206 "datetimemodule.c"
        var $buffer6=$buffer; //@line 4206 "datetimemodule.c"
        var $173=HEAP[$type_name]; //@line 4206 "datetimemodule.c"
        var $174=_PyOS_snprintf($buffer6, 1000, ((__str237)&4294967295), $173, $172, $158, $152, $146, $141); //@line 4206 "datetimemodule.c"
        __label__ = 5; break; //@line 4206 "datetimemodule.c"
      case 5: // $bb7
        var $buffer8=$buffer; //@line 4212 "datetimemodule.c"
        var $175=_PyString_FromString($buffer8); //@line 4212 "datetimemodule.c"
        HEAP[$baserepr]=$175; //@line 4212 "datetimemodule.c"
        var $176=HEAP[$baserepr]; //@line 4213 "datetimemodule.c"
        var $177=($176)==0; //@line 4213 "datetimemodule.c"
        if ($177) { __label__ = 7; break; } else { __label__ = 6; break; } //@line 4213 "datetimemodule.c"
      case 6: // $bb9
        var $178=HEAP[$self_addr]; //@line 4213 "datetimemodule.c"
        var $179=$178; //@line 4213 "datetimemodule.c"
        var $180=(($179+12)&4294967295); //@line 4213 "datetimemodule.c"
        var $181=HEAP[$180]; //@line 4213 "datetimemodule.c"
        var $182=reSign(($181), 8, 0)==0; //@line 4213 "datetimemodule.c"
        if ($182) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4213 "datetimemodule.c"
      case 7: // $bb10
        var $183=HEAP[$baserepr]; //@line 4214 "datetimemodule.c"
        HEAP[$0]=$183; //@line 4214 "datetimemodule.c"
        __label__ = 9; break; //@line 4214 "datetimemodule.c"
      case 8: // $bb11
        var $184=HEAP[$self_addr]; //@line 4215 "datetimemodule.c"
        var $185=(($184+24)&4294967295); //@line 4215 "datetimemodule.c"
        var $186=HEAP[$185]; //@line 4215 "datetimemodule.c"
        var $187=HEAP[$baserepr]; //@line 4215 "datetimemodule.c"
        var $188=_append_keyword_tzinfo($187, $186); //@line 4215 "datetimemodule.c"
        HEAP[$0]=$188; //@line 4215 "datetimemodule.c"
        __label__ = 9; break; //@line 4215 "datetimemodule.c"
      case 9: // $bb12
        var $189=HEAP[$0]; //@line 4214 "datetimemodule.c"
        HEAP[$retval]=$189; //@line 4214 "datetimemodule.c"
        __label__ = 10; break; //@line 4214 "datetimemodule.c"
      case 10: // $return
        var $retval13=HEAP[$retval]; //@line 4214 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 4214 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_str($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 4221 "datetimemodule.c"
        var $2=$1; //@line 4221 "datetimemodule.c"
        var $3=__PyObject_CallMethod_SizeT($2, ((__str146)&4294967295), ((__str238)&4294967295), ((__str239)&4294967295)); //@line 4221 "datetimemodule.c"
        HEAP[$0]=$3; //@line 4221 "datetimemodule.c"
        var $4=HEAP[$0]; //@line 4221 "datetimemodule.c"
        HEAP[$retval]=$4; //@line 4221 "datetimemodule.c"
        __label__ = 1; break; //@line 4221 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 4221 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 4221 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_isoformat($self, $args, $kw) {
    var __stackBase__  = STACKTOP; STACKTOP += 129; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 129);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kw_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $sep=__stackBase__+20;
        var $buffer=__stackBase__+21;
        var $cp=__stackBase__+121;
        var $result=__stackBase__+125;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$kw_addr]=$kw;
        HEAP[$sep]=84; //@line 4227 "datetimemodule.c"
        var $1=HEAP[$args_addr]; //@line 4233 "datetimemodule.c"
        var $2=HEAP[$kw_addr]; //@line 4233 "datetimemodule.c"
        var $3=__PyArg_ParseTupleAndKeywords_SizeT($1, $2, ((__str240)&4294967295), ((_keywords_13363)&4294967295), $sep); //@line 4233 "datetimemodule.c"
        var $4=((($3))|0)==0; //@line 4233 "datetimemodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4233 "datetimemodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 4235 "datetimemodule.c"
        __label__ = 12; break; //@line 4235 "datetimemodule.c"
      case 2: // $bb1
        var $5=HEAP[$self_addr]; //@line 4236 "datetimemodule.c"
        var $6=$5; //@line 4236 "datetimemodule.c"
        var $buffer2=$buffer; //@line 4236 "datetimemodule.c"
        var $7=_isoformat_date($6, $buffer2, 100); //@line 4236 "datetimemodule.c"
        HEAP[$cp]=$7; //@line 4236 "datetimemodule.c"
        var $8=HEAP[$cp]; //@line 4237 "datetimemodule.c"
        var $9=($8)==0; //@line 4237 "datetimemodule.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4237 "datetimemodule.c"
      case 3: // $bb3
        ___assert_fail(((__str242)&4294967295), ((__str1)&4294967295), 4237, ((___PRETTY_FUNCTION___13367)&4294967295)); //@line 4237 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 15563"; //@line 4237 "datetimemodule.c"
      case 4: // $bb4
        var $10=HEAP[$sep]; //@line 4238 "datetimemodule.c"
        var $11=HEAP[$cp]; //@line 4238 "datetimemodule.c"
        HEAP[$11]=$10; //@line 4238 "datetimemodule.c"
        var $12=HEAP[$cp]; //@line 4238 "datetimemodule.c"
        var $13=(($12+1)&4294967295); //@line 4238 "datetimemodule.c"
        HEAP[$cp]=$13; //@line 4238 "datetimemodule.c"
        var $14=HEAP[$cp]; //@line 4239 "datetimemodule.c"
        var $15=($14); //@line 4239 "datetimemodule.c"
        var $buffer5=$buffer; //@line 4239 "datetimemodule.c"
        var $buffer56=($buffer5); //@line 4239 "datetimemodule.c"
        var $16=((($15) - ($buffer56))&4294967295); //@line 4239 "datetimemodule.c"
        var $17=((100 - ($16))&4294967295); //@line 4239 "datetimemodule.c"
        var $18=HEAP[$self_addr]; //@line 4239 "datetimemodule.c"
        var $19=HEAP[$cp]; //@line 4239 "datetimemodule.c"
        var $20=_isoformat_time($18, $19, $17); //@line 4239 "datetimemodule.c"
        HEAP[$cp]=$20; //@line 4239 "datetimemodule.c"
        var $21=HEAP[$cp]; //@line 4240 "datetimemodule.c"
        var $22=($21); //@line 4240 "datetimemodule.c"
        var $buffer8=$buffer; //@line 4240 "datetimemodule.c"
        var $buffer89=($buffer8); //@line 4240 "datetimemodule.c"
        var $23=((($22) - ($buffer89))&4294967295); //@line 4240 "datetimemodule.c"
        var $buffer11=$buffer; //@line 4240 "datetimemodule.c"
        var $24=_PyString_FromStringAndSize($buffer11, $23); //@line 4240 "datetimemodule.c"
        HEAP[$result]=$24; //@line 4240 "datetimemodule.c"
        var $25=HEAP[$result]; //@line 4241 "datetimemodule.c"
        var $26=($25)==0; //@line 4241 "datetimemodule.c"
        if ($26) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 4241 "datetimemodule.c"
      case 5: // $bb12
        var $27=HEAP[$self_addr]; //@line 4241 "datetimemodule.c"
        var $28=$27; //@line 4241 "datetimemodule.c"
        var $29=(($28+12)&4294967295); //@line 4241 "datetimemodule.c"
        var $30=HEAP[$29]; //@line 4241 "datetimemodule.c"
        var $31=reSign(($30), 8, 0)==0; //@line 4241 "datetimemodule.c"
        if ($31) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 4241 "datetimemodule.c"
      case 6: // $bb13
        var $32=HEAP[$result]; //@line 4242 "datetimemodule.c"
        HEAP[$0]=$32; //@line 4242 "datetimemodule.c"
        __label__ = 12; break; //@line 4242 "datetimemodule.c"
      case 7: // $bb14
        var $33=HEAP[$self_addr]; //@line 4245 "datetimemodule.c"
        var $34=$33; //@line 4245 "datetimemodule.c"
        var $35=HEAP[$self_addr]; //@line 4245 "datetimemodule.c"
        var $36=(($35+24)&4294967295); //@line 4245 "datetimemodule.c"
        var $37=HEAP[$36]; //@line 4245 "datetimemodule.c"
        var $buffer15=$buffer; //@line 4245 "datetimemodule.c"
        var $38=_format_utcoffset($buffer15, 100, ((__str200)&4294967295), $37, $34); //@line 4245 "datetimemodule.c"
        var $39=((($38))|0) < 0; //@line 4245 "datetimemodule.c"
        if ($39) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 4245 "datetimemodule.c"
      case 8: // $bb16
        var $40=HEAP[$result]; //@line 4247 "datetimemodule.c"
        var $41=(($40)&4294967295); //@line 4247 "datetimemodule.c"
        var $42=HEAP[$41]; //@line 4247 "datetimemodule.c"
        var $43=((($42) - 1)&4294967295); //@line 4247 "datetimemodule.c"
        var $44=(($40)&4294967295); //@line 4247 "datetimemodule.c"
        HEAP[$44]=$43; //@line 4247 "datetimemodule.c"
        var $45=(($40)&4294967295); //@line 4247 "datetimemodule.c"
        var $46=HEAP[$45]; //@line 4247 "datetimemodule.c"
        var $47=((($46))|0)==0; //@line 4247 "datetimemodule.c"
        if ($47) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 4247 "datetimemodule.c"
      case 9: // $bb17
        var $48=HEAP[$result]; //@line 4247 "datetimemodule.c"
        var $49=(($48+4)&4294967295); //@line 4247 "datetimemodule.c"
        var $50=HEAP[$49]; //@line 4247 "datetimemodule.c"
        var $51=(($50+24)&4294967295); //@line 4247 "datetimemodule.c"
        var $52=HEAP[$51]; //@line 4247 "datetimemodule.c"
        var $53=HEAP[$result]; //@line 4247 "datetimemodule.c"
        FUNCTION_TABLE[$52]($53); //@line 4247 "datetimemodule.c"
        __label__ = 10; break; //@line 4247 "datetimemodule.c"
      case 10: // $bb18
        HEAP[$0]=0; //@line 4248 "datetimemodule.c"
        __label__ = 12; break; //@line 4248 "datetimemodule.c"
      case 11: // $bb19
        var $buffer20=$buffer; //@line 4250 "datetimemodule.c"
        var $54=_PyString_FromString($buffer20); //@line 4250 "datetimemodule.c"
        _PyString_ConcatAndDel($result, $54); //@line 4250 "datetimemodule.c"
        var $55=HEAP[$result]; //@line 4251 "datetimemodule.c"
        HEAP[$0]=$55; //@line 4251 "datetimemodule.c"
        __label__ = 12; break; //@line 4251 "datetimemodule.c"
      case 12: // $bb21
        var $56=HEAP[$0]; //@line 4235 "datetimemodule.c"
        HEAP[$retval]=$56; //@line 4235 "datetimemodule.c"
        __label__ = 13; break; //@line 4235 "datetimemodule.c"
      case 13: // $return
        var $retval22=HEAP[$retval]; //@line 4235 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval22; //@line 4235 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_ctime($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 4257 "datetimemodule.c"
        var $2=(($1+13)&4294967295); //@line 4257 "datetimemodule.c"
        var $3=(($2+6)&4294967295); //@line 4257 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 4257 "datetimemodule.c"
        var $5=unSign(($4), 8, 0); //@line 4257 "datetimemodule.c"
        var $6=HEAP[$self_addr]; //@line 4257 "datetimemodule.c"
        var $7=(($6+13)&4294967295); //@line 4257 "datetimemodule.c"
        var $8=(($7+5)&4294967295); //@line 4257 "datetimemodule.c"
        var $9=HEAP[$8]; //@line 4257 "datetimemodule.c"
        var $10=unSign(($9), 8, 0); //@line 4257 "datetimemodule.c"
        var $11=HEAP[$self_addr]; //@line 4257 "datetimemodule.c"
        var $12=(($11+13)&4294967295); //@line 4257 "datetimemodule.c"
        var $13=(($12+4)&4294967295); //@line 4257 "datetimemodule.c"
        var $14=HEAP[$13]; //@line 4257 "datetimemodule.c"
        var $15=unSign(($14), 8, 0); //@line 4257 "datetimemodule.c"
        var $16=HEAP[$self_addr]; //@line 4257 "datetimemodule.c"
        var $17=$16; //@line 4257 "datetimemodule.c"
        var $18=_format_ctime($17, $15, $10, $5); //@line 4257 "datetimemodule.c"
        HEAP[$0]=$18; //@line 4257 "datetimemodule.c"
        var $19=HEAP[$0]; //@line 4257 "datetimemodule.c"
        HEAP[$retval]=$19; //@line 4257 "datetimemodule.c"
        __label__ = 1; break; //@line 4257 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 4257 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 4257 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_richcompare($self, $other, $op) {
    var __stackBase__  = STACKTOP; STACKTOP += 52; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 52);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $other_addr=__stackBase__+4;
        var $op_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $iftmp_510=__stackBase__+16;
        var $0=__stackBase__+20;
        var $diff=__stackBase__+24;
        var $n1=__stackBase__+28;
        var $n2=__stackBase__+32;
        var $offset1=__stackBase__+36;
        var $offset2=__stackBase__+40;
        var $result=__stackBase__+44;
        var $delta=__stackBase__+48;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$other_addr]=$other;
        HEAP[$op_addr]=$op;
        var $1=HEAP[$other_addr]; //@line 4276 "datetimemodule.c"
        var $2=(($1+4)&4294967295); //@line 4276 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 4276 "datetimemodule.c"
        var $4=($3)!=(_PyDateTime_DateTimeType); //@line 4276 "datetimemodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 13; break; } //@line 4276 "datetimemodule.c"
      case 1: // $bb
        var $5=HEAP[$other_addr]; //@line 4276 "datetimemodule.c"
        var $6=(($5+4)&4294967295); //@line 4276 "datetimemodule.c"
        var $7=HEAP[$6]; //@line 4276 "datetimemodule.c"
        var $8=_PyType_IsSubtype($7, _PyDateTime_DateTimeType); //@line 4276 "datetimemodule.c"
        var $9=((($8))|0)==0; //@line 4276 "datetimemodule.c"
        if ($9) { __label__ = 2; break; } else { __label__ = 13; break; } //@line 4276 "datetimemodule.c"
      case 2: // $bb1
        var $10=HEAP[$other_addr]; //@line 4286 "datetimemodule.c"
        var $11=_PyObject_HasAttrString($10, ((__str149)&4294967295)); //@line 4286 "datetimemodule.c"
        var $12=((($11))|0)!=0; //@line 4286 "datetimemodule.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 4286 "datetimemodule.c"
      case 3: // $bb2
        var $13=HEAP[$other_addr]; //@line 4286 "datetimemodule.c"
        var $14=(($13+4)&4294967295); //@line 4286 "datetimemodule.c"
        var $15=HEAP[$14]; //@line 4286 "datetimemodule.c"
        var $16=($15)!=(_PyDateTime_DateType); //@line 4286 "datetimemodule.c"
        if ($16) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 4286 "datetimemodule.c"
      case 4: // $bb3
        var $17=HEAP[$other_addr]; //@line 4286 "datetimemodule.c"
        var $18=(($17+4)&4294967295); //@line 4286 "datetimemodule.c"
        var $19=HEAP[$18]; //@line 4286 "datetimemodule.c"
        var $20=_PyType_IsSubtype($19, _PyDateTime_DateType); //@line 4286 "datetimemodule.c"
        var $21=((($20))|0)==0; //@line 4286 "datetimemodule.c"
        if ($21) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4286 "datetimemodule.c"
      case 5: // $bb4
        var $22=HEAP[((__Py_NotImplementedStruct)&4294967295)]; //@line 4289 "datetimemodule.c"
        var $23=((($22) + 1)&4294967295); //@line 4289 "datetimemodule.c"
        HEAP[((__Py_NotImplementedStruct)&4294967295)]=$23; //@line 4289 "datetimemodule.c"
        HEAP[$0]=__Py_NotImplementedStruct; //@line 4290 "datetimemodule.c"
        __label__ = 35; break; //@line 4290 "datetimemodule.c"
      case 6: // $bb5
        var $24=HEAP[$op_addr]; //@line 4292 "datetimemodule.c"
        var $25=((($24))|0)==2; //@line 4292 "datetimemodule.c"
        if ($25) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 4292 "datetimemodule.c"
      case 7: // $bb6
        var $26=HEAP[$op_addr]; //@line 4292 "datetimemodule.c"
        var $27=((($26))|0)==3; //@line 4292 "datetimemodule.c"
        if ($27) { __label__ = 8; break; } else { __label__ = 12; break; } //@line 4292 "datetimemodule.c"
      case 8: // $bb7
        var $28=HEAP[$op_addr]; //@line 4293 "datetimemodule.c"
        var $29=((($28))|0)==2; //@line 4293 "datetimemodule.c"
        if ($29) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 4293 "datetimemodule.c"
      case 9: // $bb8
        HEAP[$iftmp_510]=__Py_ZeroStruct; //@line 4293 "datetimemodule.c"
        __label__ = 11; break; //@line 4293 "datetimemodule.c"
      case 10: // $bb9
        HEAP[$iftmp_510]=__Py_TrueStruct; //@line 4293 "datetimemodule.c"
        __label__ = 11; break; //@line 4293 "datetimemodule.c"
      case 11: // $bb10
        var $30=HEAP[$iftmp_510]; //@line 4293 "datetimemodule.c"
        HEAP[$result]=$30; //@line 4293 "datetimemodule.c"
        var $31=HEAP[$result]; //@line 4294 "datetimemodule.c"
        var $32=(($31)&4294967295); //@line 4294 "datetimemodule.c"
        var $33=HEAP[$32]; //@line 4294 "datetimemodule.c"
        var $34=((($33) + 1)&4294967295); //@line 4294 "datetimemodule.c"
        var $35=HEAP[$result]; //@line 4294 "datetimemodule.c"
        var $36=(($35)&4294967295); //@line 4294 "datetimemodule.c"
        HEAP[$36]=$34; //@line 4294 "datetimemodule.c"
        var $37=HEAP[$result]; //@line 4295 "datetimemodule.c"
        HEAP[$0]=$37; //@line 4295 "datetimemodule.c"
        __label__ = 35; break; //@line 4295 "datetimemodule.c"
      case 12: // $bb11
        var $38=HEAP[$self_addr]; //@line 4298 "datetimemodule.c"
        var $39=$38; //@line 4298 "datetimemodule.c"
        var $40=HEAP[$other_addr]; //@line 4298 "datetimemodule.c"
        var $41=_cmperror($39, $40); //@line 4298 "datetimemodule.c"
        HEAP[$0]=$41; //@line 4298 "datetimemodule.c"
        __label__ = 35; break; //@line 4298 "datetimemodule.c"
      case 13: // $bb12
        var $42=HEAP[$self_addr]; //@line 4301 "datetimemodule.c"
        var $43=$42; //@line 4301 "datetimemodule.c"
        var $44=HEAP[$self_addr]; //@line 4301 "datetimemodule.c"
        var $45=$44; //@line 4301 "datetimemodule.c"
        var $46=HEAP[$other_addr]; //@line 4301 "datetimemodule.c"
        var $47=HEAP[$other_addr]; //@line 4301 "datetimemodule.c"
        var $48=_classify_two_utcoffsets($45, $offset1, $n1, $43, $46, $offset2, $n2, $47); //@line 4301 "datetimemodule.c"
        var $49=((($48))|0) < 0; //@line 4301 "datetimemodule.c"
        if ($49) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 4301 "datetimemodule.c"
      case 14: // $bb13
        HEAP[$0]=0; //@line 4305 "datetimemodule.c"
        __label__ = 35; break; //@line 4305 "datetimemodule.c"
      case 15: // $bb14
        var $50=HEAP[$n1]; //@line 4306 "datetimemodule.c"
        var $51=((($50))|0)==1; //@line 4306 "datetimemodule.c"
        if ($51) { __label__ = 17; break; } else { __label__ = 16; break; } //@line 4306 "datetimemodule.c"
      case 16: // $bb15
        var $52=HEAP[$n2]; //@line 4306 "datetimemodule.c"
        var $53=((($52))|0)==1; //@line 4306 "datetimemodule.c"
        if ($53) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 4306 "datetimemodule.c"
      case 17: // $bb16
        ___assert_fail(((__str203)&4294967295), ((__str1)&4294967295), 4306, ((___PRETTY_FUNCTION___13435)&4294967295)); //@line 4306 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 15842"; //@line 4306 "datetimemodule.c"
      case 18: // $bb17
        var $54=HEAP[$n1]; //@line 4311 "datetimemodule.c"
        var $55=HEAP[$n2]; //@line 4311 "datetimemodule.c"
        var $56=((($54))|0)==((($55))|0); //@line 4311 "datetimemodule.c"
        if ($56) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 4311 "datetimemodule.c"
      case 19: // $bb18
        var $57=HEAP[$offset1]; //@line 4311 "datetimemodule.c"
        var $58=HEAP[$offset2]; //@line 4311 "datetimemodule.c"
        var $59=((($57))|0)==((($58))|0); //@line 4311 "datetimemodule.c"
        if ($59) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 4311 "datetimemodule.c"
      case 20: // $bb19
        var $60=HEAP[$other_addr]; //@line 4312 "datetimemodule.c"
        var $61=$60; //@line 4312 "datetimemodule.c"
        var $62=(($61+13)&4294967295); //@line 4312 "datetimemodule.c"
        var $63=(($62)&4294967295); //@line 4312 "datetimemodule.c"
        var $64=HEAP[$self_addr]; //@line 4312 "datetimemodule.c"
        var $65=(($64+13)&4294967295); //@line 4312 "datetimemodule.c"
        var $66=(($65)&4294967295); //@line 4312 "datetimemodule.c"
        var $67=_memcmp($66, $63, 10); //@line 4312 "datetimemodule.c"
        HEAP[$diff]=$67; //@line 4312 "datetimemodule.c"
        var $68=HEAP[$diff]; //@line 4314 "datetimemodule.c"
        var $69=HEAP[$op_addr]; //@line 4314 "datetimemodule.c"
        var $70=_diff_to_bool($68, $69); //@line 4314 "datetimemodule.c"
        HEAP[$0]=$70; //@line 4314 "datetimemodule.c"
        __label__ = 35; break; //@line 4314 "datetimemodule.c"
      case 21: // $bb20
        var $71=HEAP[$n1]; //@line 4317 "datetimemodule.c"
        var $72=((($71))|0)==3; //@line 4317 "datetimemodule.c"
        if ($72) { __label__ = 22; break; } else { __label__ = 32; break; } //@line 4317 "datetimemodule.c"
      case 22: // $bb21
        var $73=HEAP[$n2]; //@line 4317 "datetimemodule.c"
        var $74=((($73))|0)==3; //@line 4317 "datetimemodule.c"
        if ($74) { __label__ = 23; break; } else { __label__ = 32; break; } //@line 4317 "datetimemodule.c"
      case 23: // $bb22
        var $75=HEAP[$offset1]; //@line 4320 "datetimemodule.c"
        var $76=HEAP[$offset2]; //@line 4320 "datetimemodule.c"
        var $77=((($75))|0)==((($76))|0); //@line 4320 "datetimemodule.c"
        if ($77) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 4320 "datetimemodule.c"
      case 24: // $bb23
        ___assert_fail(((__str204)&4294967295), ((__str1)&4294967295), 4320, ((___PRETTY_FUNCTION___13435)&4294967295)); //@line 4320 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 15891"; //@line 4320 "datetimemodule.c"
      case 25: // $bb24
        var $78=HEAP[$self_addr]; //@line 4321 "datetimemodule.c"
        var $79=$78; //@line 4321 "datetimemodule.c"
        var $80=HEAP[$other_addr]; //@line 4321 "datetimemodule.c"
        var $81=_datetime_subtract($79, $80); //@line 4321 "datetimemodule.c"
        var $82=$81; //@line 4321 "datetimemodule.c"
        HEAP[$delta]=$82; //@line 4321 "datetimemodule.c"
        var $83=HEAP[$delta]; //@line 4323 "datetimemodule.c"
        var $84=($83)==0; //@line 4323 "datetimemodule.c"
        if ($84) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 4323 "datetimemodule.c"
      case 26: // $bb25
        HEAP[$0]=0; //@line 4324 "datetimemodule.c"
        __label__ = 35; break; //@line 4324 "datetimemodule.c"
      case 27: // $bb26
        var $85=HEAP[$delta]; //@line 4325 "datetimemodule.c"
        var $86=(($85+12)&4294967295); //@line 4325 "datetimemodule.c"
        var $87=HEAP[$86]; //@line 4325 "datetimemodule.c"
        HEAP[$diff]=$87; //@line 4325 "datetimemodule.c"
        var $88=HEAP[$diff]; //@line 4326 "datetimemodule.c"
        var $89=((($88))|0)==0; //@line 4326 "datetimemodule.c"
        if ($89) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 4326 "datetimemodule.c"
      case 28: // $bb27
        var $90=HEAP[$delta]; //@line 4327 "datetimemodule.c"
        var $91=(($90+16)&4294967295); //@line 4327 "datetimemodule.c"
        var $92=HEAP[$91]; //@line 4327 "datetimemodule.c"
        var $93=HEAP[$delta]; //@line 4327 "datetimemodule.c"
        var $94=(($93+20)&4294967295); //@line 4327 "datetimemodule.c"
        var $95=HEAP[$94]; //@line 4327 "datetimemodule.c"
        var $96=($92) | ($95); //@line 4327 "datetimemodule.c"
        HEAP[$diff]=$96; //@line 4327 "datetimemodule.c"
        __label__ = 29; break; //@line 4327 "datetimemodule.c"
      case 29: // $bb28
        var $97=HEAP[$delta]; //@line 4329 "datetimemodule.c"
        var $98=$97; //@line 4329 "datetimemodule.c"
        var $99=(($98)&4294967295); //@line 4329 "datetimemodule.c"
        var $100=HEAP[$99]; //@line 4329 "datetimemodule.c"
        var $101=((($100) - 1)&4294967295); //@line 4329 "datetimemodule.c"
        var $102=(($98)&4294967295); //@line 4329 "datetimemodule.c"
        HEAP[$102]=$101; //@line 4329 "datetimemodule.c"
        var $103=(($98)&4294967295); //@line 4329 "datetimemodule.c"
        var $104=HEAP[$103]; //@line 4329 "datetimemodule.c"
        var $105=((($104))|0)==0; //@line 4329 "datetimemodule.c"
        if ($105) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 4329 "datetimemodule.c"
      case 30: // $bb29
        var $106=HEAP[$delta]; //@line 4329 "datetimemodule.c"
        var $107=$106; //@line 4329 "datetimemodule.c"
        var $108=(($107+4)&4294967295); //@line 4329 "datetimemodule.c"
        var $109=HEAP[$108]; //@line 4329 "datetimemodule.c"
        var $110=(($109+24)&4294967295); //@line 4329 "datetimemodule.c"
        var $111=HEAP[$110]; //@line 4329 "datetimemodule.c"
        var $112=HEAP[$delta]; //@line 4329 "datetimemodule.c"
        var $113=$112; //@line 4329 "datetimemodule.c"
        FUNCTION_TABLE[$111]($113); //@line 4329 "datetimemodule.c"
        __label__ = 31; break; //@line 4329 "datetimemodule.c"
      case 31: // $bb30
        var $114=HEAP[$diff]; //@line 4330 "datetimemodule.c"
        var $115=HEAP[$op_addr]; //@line 4330 "datetimemodule.c"
        var $116=_diff_to_bool($114, $115); //@line 4330 "datetimemodule.c"
        HEAP[$0]=$116; //@line 4330 "datetimemodule.c"
        __label__ = 35; break; //@line 4330 "datetimemodule.c"
      case 32: // $bb31
        var $117=HEAP[$n1]; //@line 4333 "datetimemodule.c"
        var $118=HEAP[$n2]; //@line 4333 "datetimemodule.c"
        var $119=((($117))|0)==((($118))|0); //@line 4333 "datetimemodule.c"
        if ($119) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 4333 "datetimemodule.c"
      case 33: // $bb32
        ___assert_fail(((__str205)&4294967295), ((__str1)&4294967295), 4333, ((___PRETTY_FUNCTION___13435)&4294967295)); //@line 4333 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 15968"; //@line 4333 "datetimemodule.c"
      case 34: // $bb33
        var $120=HEAP[_PyExc_TypeError]; //@line 4334 "datetimemodule.c"
        _PyErr_SetString($120, ((__str243)&4294967295)); //@line 4334 "datetimemodule.c"
        HEAP[$0]=0; //@line 4337 "datetimemodule.c"
        __label__ = 35; break; //@line 4337 "datetimemodule.c"
      case 35: // $bb34
        var $121=HEAP[$0]; //@line 4290 "datetimemodule.c"
        HEAP[$retval]=$121; //@line 4290 "datetimemodule.c"
        __label__ = 36; break; //@line 4290 "datetimemodule.c"
      case 36: // $return
        var $retval35=HEAP[$retval]; //@line 4290 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval35; //@line 4290 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_hash($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $n=__stackBase__+12;
        var $offset=__stackBase__+16;
        var $temp=__stackBase__+20;
        var $days=__stackBase__+24;
        var $seconds=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 4343 "datetimemodule.c"
        var $2=(($1+8)&4294967295); //@line 4343 "datetimemodule.c"
        var $3=HEAP[$2]; //@line 4343 "datetimemodule.c"
        var $4=((($3))|0)==-1; //@line 4343 "datetimemodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 15; break; } //@line 4343 "datetimemodule.c"
      case 1: // $bb
        var $5=HEAP[$self_addr]; //@line 4348 "datetimemodule.c"
        var $6=$5; //@line 4348 "datetimemodule.c"
        var $7=HEAP[$self_addr]; //@line 4348 "datetimemodule.c"
        var $8=$7; //@line 4348 "datetimemodule.c"
        var $9=_classify_utcoffset($8, $6, $offset); //@line 4348 "datetimemodule.c"
        HEAP[$n]=$9; //@line 4348 "datetimemodule.c"
        var $10=HEAP[$n]; //@line 4350 "datetimemodule.c"
        var $11=((($10))|0)==1; //@line 4350 "datetimemodule.c"
        if ($11) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 4350 "datetimemodule.c"
      case 2: // $bb1
        ___assert_fail(((__str207)&4294967295), ((__str1)&4294967295), 4350, ((___PRETTY_FUNCTION___13531)&4294967295)); //@line 4350 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 16022"; //@line 4350 "datetimemodule.c"
      case 3: // $bb2
        var $12=HEAP[$n]; //@line 4351 "datetimemodule.c"
        var $13=((($12))|0)==0; //@line 4351 "datetimemodule.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4351 "datetimemodule.c"
      case 4: // $bb3
        HEAP[$0]=-1; //@line 4352 "datetimemodule.c"
        __label__ = 16; break; //@line 4352 "datetimemodule.c"
      case 5: // $bb4
        var $14=HEAP[$n]; //@line 4355 "datetimemodule.c"
        var $15=((($14))|0)==2; //@line 4355 "datetimemodule.c"
        if ($15) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 4355 "datetimemodule.c"
      case 6: // $bb5
        var $16=HEAP[$self_addr]; //@line 4356 "datetimemodule.c"
        var $17=(($16+13)&4294967295); //@line 4356 "datetimemodule.c"
        var $18=$17; //@line 4356 "datetimemodule.c"
        var $19=_PyString_FromStringAndSize($18, 10); //@line 4356 "datetimemodule.c"
        HEAP[$temp]=$19; //@line 4356 "datetimemodule.c"
        __label__ = 12; break; //@line 4356 "datetimemodule.c"
      case 7: // $bb6
        var $20=HEAP[$n]; //@line 4363 "datetimemodule.c"
        var $21=((($20))|0)!=3; //@line 4363 "datetimemodule.c"
        if ($21) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4363 "datetimemodule.c"
      case 8: // $bb7
        ___assert_fail(((__str208)&4294967295), ((__str1)&4294967295), 4363, ((___PRETTY_FUNCTION___13531)&4294967295)); //@line 4363 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 16055"; //@line 4363 "datetimemodule.c"
      case 9: // $bb8
        var $22=HEAP[$self_addr]; //@line 4364 "datetimemodule.c"
        var $23=$22; //@line 4364 "datetimemodule.c"
        var $24=(($23+12)&4294967295); //@line 4364 "datetimemodule.c"
        var $25=HEAP[$24]; //@line 4364 "datetimemodule.c"
        var $26=reSign(($25), 8, 0)==0; //@line 4364 "datetimemodule.c"
        if ($26) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 4364 "datetimemodule.c"
      case 10: // $bb9
        ___assert_fail(((__str209)&4294967295), ((__str1)&4294967295), 4364, ((___PRETTY_FUNCTION___13531)&4294967295)); //@line 4364 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 16067"; //@line 4364 "datetimemodule.c"
      case 11: // $bb10
        var $27=HEAP[$self_addr]; //@line 4365 "datetimemodule.c"
        var $28=$27; //@line 4365 "datetimemodule.c"
        var $29=(($28+13)&4294967295); //@line 4365 "datetimemodule.c"
        var $30=(($29+3)&4294967295); //@line 4365 "datetimemodule.c"
        var $31=HEAP[$30]; //@line 4365 "datetimemodule.c"
        var $32=unSign(($31), 8, 0); //@line 4365 "datetimemodule.c"
        var $33=HEAP[$self_addr]; //@line 4365 "datetimemodule.c"
        var $34=$33; //@line 4365 "datetimemodule.c"
        var $35=(($34+13)&4294967295); //@line 4365 "datetimemodule.c"
        var $36=(($35+2)&4294967295); //@line 4365 "datetimemodule.c"
        var $37=HEAP[$36]; //@line 4365 "datetimemodule.c"
        var $38=unSign(($37), 8, 0); //@line 4365 "datetimemodule.c"
        var $39=HEAP[$self_addr]; //@line 4365 "datetimemodule.c"
        var $40=$39; //@line 4365 "datetimemodule.c"
        var $41=(($40+13)&4294967295); //@line 4365 "datetimemodule.c"
        var $42=(($41)&4294967295); //@line 4365 "datetimemodule.c"
        var $43=HEAP[$42]; //@line 4365 "datetimemodule.c"
        var $44=unSign(($43), 8, 0); //@line 4365 "datetimemodule.c"
        var $45=($44) << 8; //@line 4365 "datetimemodule.c"
        var $46=HEAP[$self_addr]; //@line 4365 "datetimemodule.c"
        var $47=$46; //@line 4365 "datetimemodule.c"
        var $48=(($47+13)&4294967295); //@line 4365 "datetimemodule.c"
        var $49=(($48+1)&4294967295); //@line 4365 "datetimemodule.c"
        var $50=HEAP[$49]; //@line 4365 "datetimemodule.c"
        var $51=unSign(($50), 8, 0); //@line 4365 "datetimemodule.c"
        var $52=($45) | ($51); //@line 4365 "datetimemodule.c"
        var $53=_ymd_to_ord($52, $38, $32); //@line 4365 "datetimemodule.c"
        HEAP[$days]=$53; //@line 4365 "datetimemodule.c"
        var $54=HEAP[$self_addr]; //@line 4368 "datetimemodule.c"
        var $55=(($54+13)&4294967295); //@line 4368 "datetimemodule.c"
        var $56=(($55+4)&4294967295); //@line 4368 "datetimemodule.c"
        var $57=HEAP[$56]; //@line 4368 "datetimemodule.c"
        var $58=unSign(($57), 8, 0); //@line 4368 "datetimemodule.c"
        var $59=((($58) * 3600)&4294967295); //@line 4368 "datetimemodule.c"
        var $60=HEAP[$self_addr]; //@line 4368 "datetimemodule.c"
        var $61=(($60+13)&4294967295); //@line 4368 "datetimemodule.c"
        var $62=(($61+5)&4294967295); //@line 4368 "datetimemodule.c"
        var $63=HEAP[$62]; //@line 4368 "datetimemodule.c"
        var $64=unSign(($63), 8, 0); //@line 4368 "datetimemodule.c"
        var $65=HEAP[$offset]; //@line 4368 "datetimemodule.c"
        var $66=((($64) - ($65))&4294967295); //@line 4368 "datetimemodule.c"
        var $67=((($66) * 60)&4294967295); //@line 4368 "datetimemodule.c"
        var $68=((($59) + ($67))&4294967295); //@line 4368 "datetimemodule.c"
        var $69=HEAP[$self_addr]; //@line 4368 "datetimemodule.c"
        var $70=(($69+13)&4294967295); //@line 4368 "datetimemodule.c"
        var $71=(($70+6)&4294967295); //@line 4368 "datetimemodule.c"
        var $72=HEAP[$71]; //@line 4368 "datetimemodule.c"
        var $73=unSign(($72), 8, 0); //@line 4368 "datetimemodule.c"
        var $74=((($68) + ($73))&4294967295); //@line 4368 "datetimemodule.c"
        HEAP[$seconds]=$74; //@line 4368 "datetimemodule.c"
        var $75=HEAP[$self_addr]; //@line 4371 "datetimemodule.c"
        var $76=(($75+13)&4294967295); //@line 4371 "datetimemodule.c"
        var $77=(($76+7)&4294967295); //@line 4371 "datetimemodule.c"
        var $78=HEAP[$77]; //@line 4371 "datetimemodule.c"
        var $79=unSign(($78), 8, 0); //@line 4371 "datetimemodule.c"
        var $80=($79) << 16; //@line 4371 "datetimemodule.c"
        var $81=HEAP[$self_addr]; //@line 4371 "datetimemodule.c"
        var $82=(($81+13)&4294967295); //@line 4371 "datetimemodule.c"
        var $83=(($82+8)&4294967295); //@line 4371 "datetimemodule.c"
        var $84=HEAP[$83]; //@line 4371 "datetimemodule.c"
        var $85=unSign(($84), 8, 0); //@line 4371 "datetimemodule.c"
        var $86=($85) << 8; //@line 4371 "datetimemodule.c"
        var $87=($80) | ($86); //@line 4371 "datetimemodule.c"
        var $88=HEAP[$self_addr]; //@line 4371 "datetimemodule.c"
        var $89=(($88+13)&4294967295); //@line 4371 "datetimemodule.c"
        var $90=(($89+9)&4294967295); //@line 4371 "datetimemodule.c"
        var $91=HEAP[$90]; //@line 4371 "datetimemodule.c"
        var $92=unSign(($91), 8, 0); //@line 4371 "datetimemodule.c"
        var $93=($87) | ($92); //@line 4371 "datetimemodule.c"
        var $94=HEAP[$days]; //@line 4371 "datetimemodule.c"
        var $95=HEAP[$seconds]; //@line 4371 "datetimemodule.c"
        var $96=_new_delta_ex($94, $95, $93, 1, _PyDateTime_DeltaType); //@line 4371 "datetimemodule.c"
        HEAP[$temp]=$96; //@line 4371 "datetimemodule.c"
        __label__ = 12; break; //@line 4371 "datetimemodule.c"
      case 12: // $bb11
        var $97=HEAP[$temp]; //@line 4376 "datetimemodule.c"
        var $98=($97)!=0; //@line 4376 "datetimemodule.c"
        if ($98) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 4376 "datetimemodule.c"
      case 13: // $bb12
        var $99=HEAP[$temp]; //@line 4377 "datetimemodule.c"
        var $100=_PyObject_Hash($99); //@line 4377 "datetimemodule.c"
        var $101=HEAP[$self_addr]; //@line 4377 "datetimemodule.c"
        var $102=(($101+8)&4294967295); //@line 4377 "datetimemodule.c"
        HEAP[$102]=$100; //@line 4377 "datetimemodule.c"
        var $103=HEAP[$temp]; //@line 4378 "datetimemodule.c"
        var $104=(($103)&4294967295); //@line 4378 "datetimemodule.c"
        var $105=HEAP[$104]; //@line 4378 "datetimemodule.c"
        var $106=((($105) - 1)&4294967295); //@line 4378 "datetimemodule.c"
        var $107=HEAP[$temp]; //@line 4378 "datetimemodule.c"
        var $108=(($107)&4294967295); //@line 4378 "datetimemodule.c"
        HEAP[$108]=$106; //@line 4378 "datetimemodule.c"
        var $109=HEAP[$temp]; //@line 4378 "datetimemodule.c"
        var $110=(($109)&4294967295); //@line 4378 "datetimemodule.c"
        var $111=HEAP[$110]; //@line 4378 "datetimemodule.c"
        var $112=((($111))|0)==0; //@line 4378 "datetimemodule.c"
        if ($112) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 4378 "datetimemodule.c"
      case 14: // $bb13
        var $113=HEAP[$temp]; //@line 4378 "datetimemodule.c"
        var $114=(($113+4)&4294967295); //@line 4378 "datetimemodule.c"
        var $115=HEAP[$114]; //@line 4378 "datetimemodule.c"
        var $116=(($115+24)&4294967295); //@line 4378 "datetimemodule.c"
        var $117=HEAP[$116]; //@line 4378 "datetimemodule.c"
        var $118=HEAP[$temp]; //@line 4378 "datetimemodule.c"
        FUNCTION_TABLE[$117]($118); //@line 4378 "datetimemodule.c"
        __label__ = 15; break; //@line 4378 "datetimemodule.c"
      case 15: // $bb14
        var $119=HEAP[$self_addr]; //@line 4381 "datetimemodule.c"
        var $120=(($119+8)&4294967295); //@line 4381 "datetimemodule.c"
        var $121=HEAP[$120]; //@line 4381 "datetimemodule.c"
        HEAP[$0]=$121; //@line 4381 "datetimemodule.c"
        __label__ = 16; break; //@line 4381 "datetimemodule.c"
      case 16: // $bb15
        var $122=HEAP[$0]; //@line 4352 "datetimemodule.c"
        HEAP[$retval]=$122; //@line 4352 "datetimemodule.c"
        __label__ = 17; break; //@line 4352 "datetimemodule.c"
      case 17: // $return
        var $retval16=HEAP[$retval]; //@line 4352 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval16; //@line 4352 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_replace($self, $args, $kw) {
    var __stackBase__  = STACKTOP; STACKTOP += 64; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 64);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kw_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $iftmp_544=__stackBase__+20;
        var $clone=__stackBase__+24;
        var $tuple=__stackBase__+28;
        var $y=__stackBase__+32;
        var $m=__stackBase__+36;
        var $d=__stackBase__+40;
        var $hh=__stackBase__+44;
        var $mm=__stackBase__+48;
        var $ss=__stackBase__+52;
        var $us=__stackBase__+56;
        var $tzinfo=__stackBase__+60;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$kw_addr]=$kw;
        var $1=HEAP[$self_addr]; //@line 4389 "datetimemodule.c"
        var $2=$1; //@line 4389 "datetimemodule.c"
        var $3=(($2+13)&4294967295); //@line 4389 "datetimemodule.c"
        var $4=(($3)&4294967295); //@line 4389 "datetimemodule.c"
        var $5=HEAP[$4]; //@line 4389 "datetimemodule.c"
        var $6=unSign(($5), 8, 0); //@line 4389 "datetimemodule.c"
        var $7=($6) << 8; //@line 4389 "datetimemodule.c"
        var $8=HEAP[$self_addr]; //@line 4389 "datetimemodule.c"
        var $9=$8; //@line 4389 "datetimemodule.c"
        var $10=(($9+13)&4294967295); //@line 4389 "datetimemodule.c"
        var $11=(($10+1)&4294967295); //@line 4389 "datetimemodule.c"
        var $12=HEAP[$11]; //@line 4389 "datetimemodule.c"
        var $13=unSign(($12), 8, 0); //@line 4389 "datetimemodule.c"
        var $14=($7) | ($13); //@line 4389 "datetimemodule.c"
        HEAP[$y]=$14; //@line 4389 "datetimemodule.c"
        var $15=HEAP[$self_addr]; //@line 4390 "datetimemodule.c"
        var $16=$15; //@line 4390 "datetimemodule.c"
        var $17=(($16+13)&4294967295); //@line 4390 "datetimemodule.c"
        var $18=(($17+2)&4294967295); //@line 4390 "datetimemodule.c"
        var $19=HEAP[$18]; //@line 4390 "datetimemodule.c"
        var $20=unSign(($19), 8, 0); //@line 4390 "datetimemodule.c"
        HEAP[$m]=$20; //@line 4390 "datetimemodule.c"
        var $21=HEAP[$self_addr]; //@line 4391 "datetimemodule.c"
        var $22=$21; //@line 4391 "datetimemodule.c"
        var $23=(($22+13)&4294967295); //@line 4391 "datetimemodule.c"
        var $24=(($23+3)&4294967295); //@line 4391 "datetimemodule.c"
        var $25=HEAP[$24]; //@line 4391 "datetimemodule.c"
        var $26=unSign(($25), 8, 0); //@line 4391 "datetimemodule.c"
        HEAP[$d]=$26; //@line 4391 "datetimemodule.c"
        var $27=HEAP[$self_addr]; //@line 4392 "datetimemodule.c"
        var $28=(($27+13)&4294967295); //@line 4392 "datetimemodule.c"
        var $29=(($28+4)&4294967295); //@line 4392 "datetimemodule.c"
        var $30=HEAP[$29]; //@line 4392 "datetimemodule.c"
        var $31=unSign(($30), 8, 0); //@line 4392 "datetimemodule.c"
        HEAP[$hh]=$31; //@line 4392 "datetimemodule.c"
        var $32=HEAP[$self_addr]; //@line 4393 "datetimemodule.c"
        var $33=(($32+13)&4294967295); //@line 4393 "datetimemodule.c"
        var $34=(($33+5)&4294967295); //@line 4393 "datetimemodule.c"
        var $35=HEAP[$34]; //@line 4393 "datetimemodule.c"
        var $36=unSign(($35), 8, 0); //@line 4393 "datetimemodule.c"
        HEAP[$mm]=$36; //@line 4393 "datetimemodule.c"
        var $37=HEAP[$self_addr]; //@line 4394 "datetimemodule.c"
        var $38=(($37+13)&4294967295); //@line 4394 "datetimemodule.c"
        var $39=(($38+6)&4294967295); //@line 4394 "datetimemodule.c"
        var $40=HEAP[$39]; //@line 4394 "datetimemodule.c"
        var $41=unSign(($40), 8, 0); //@line 4394 "datetimemodule.c"
        HEAP[$ss]=$41; //@line 4394 "datetimemodule.c"
        var $42=HEAP[$self_addr]; //@line 4395 "datetimemodule.c"
        var $43=(($42+13)&4294967295); //@line 4395 "datetimemodule.c"
        var $44=(($43+7)&4294967295); //@line 4395 "datetimemodule.c"
        var $45=HEAP[$44]; //@line 4395 "datetimemodule.c"
        var $46=unSign(($45), 8, 0); //@line 4395 "datetimemodule.c"
        var $47=($46) << 16; //@line 4395 "datetimemodule.c"
        var $48=HEAP[$self_addr]; //@line 4395 "datetimemodule.c"
        var $49=(($48+13)&4294967295); //@line 4395 "datetimemodule.c"
        var $50=(($49+8)&4294967295); //@line 4395 "datetimemodule.c"
        var $51=HEAP[$50]; //@line 4395 "datetimemodule.c"
        var $52=unSign(($51), 8, 0); //@line 4395 "datetimemodule.c"
        var $53=($52) << 8; //@line 4395 "datetimemodule.c"
        var $54=($47) | ($53); //@line 4395 "datetimemodule.c"
        var $55=HEAP[$self_addr]; //@line 4395 "datetimemodule.c"
        var $56=(($55+13)&4294967295); //@line 4395 "datetimemodule.c"
        var $57=(($56+9)&4294967295); //@line 4395 "datetimemodule.c"
        var $58=HEAP[$57]; //@line 4395 "datetimemodule.c"
        var $59=unSign(($58), 8, 0); //@line 4395 "datetimemodule.c"
        var $60=($54) | ($59); //@line 4395 "datetimemodule.c"
        HEAP[$us]=$60; //@line 4395 "datetimemodule.c"
        var $61=HEAP[$self_addr]; //@line 4396 "datetimemodule.c"
        var $62=$61; //@line 4396 "datetimemodule.c"
        var $63=(($62+12)&4294967295); //@line 4396 "datetimemodule.c"
        var $64=HEAP[$63]; //@line 4396 "datetimemodule.c"
        var $65=reSign(($64), 8, 0)!=0; //@line 4396 "datetimemodule.c"
        if ($65) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4396 "datetimemodule.c"
      case 1: // $bb
        var $66=HEAP[$self_addr]; //@line 4396 "datetimemodule.c"
        var $67=(($66+24)&4294967295); //@line 4396 "datetimemodule.c"
        var $68=HEAP[$67]; //@line 4396 "datetimemodule.c"
        HEAP[$iftmp_544]=$68; //@line 4396 "datetimemodule.c"
        __label__ = 3; break; //@line 4396 "datetimemodule.c"
      case 2: // $bb1
        HEAP[$iftmp_544]=__Py_NoneStruct; //@line 4396 "datetimemodule.c"
        __label__ = 3; break; //@line 4396 "datetimemodule.c"
      case 3: // $bb2
        var $69=HEAP[$iftmp_544]; //@line 4396 "datetimemodule.c"
        HEAP[$tzinfo]=$69; //@line 4396 "datetimemodule.c"
        var $70=HEAP[$args_addr]; //@line 4398 "datetimemodule.c"
        var $71=HEAP[$kw_addr]; //@line 4398 "datetimemodule.c"
        var $72=__PyArg_ParseTupleAndKeywords_SizeT($70, $71, ((__str244)&4294967295), ((_datetime_kws)&4294967295), $y, $m, $d, $hh, $mm, $ss, $us, $tzinfo); //@line 4398 "datetimemodule.c"
        var $73=((($72))|0)==0; //@line 4398 "datetimemodule.c"
        if ($73) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4398 "datetimemodule.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 4402 "datetimemodule.c"
        __label__ = 10; break; //@line 4402 "datetimemodule.c"
      case 5: // $bb4
        var $74=HEAP[$tzinfo]; //@line 4403 "datetimemodule.c"
        var $75=HEAP[$us]; //@line 4403 "datetimemodule.c"
        var $76=HEAP[$ss]; //@line 4403 "datetimemodule.c"
        var $77=HEAP[$mm]; //@line 4403 "datetimemodule.c"
        var $78=HEAP[$hh]; //@line 4403 "datetimemodule.c"
        var $79=HEAP[$d]; //@line 4403 "datetimemodule.c"
        var $80=HEAP[$m]; //@line 4403 "datetimemodule.c"
        var $81=HEAP[$y]; //@line 4403 "datetimemodule.c"
        var $82=__Py_BuildValue_SizeT(((__str220)&4294967295), $81, $80, $79, $78, $77, $76, $75, $74); //@line 4403 "datetimemodule.c"
        HEAP[$tuple]=$82; //@line 4403 "datetimemodule.c"
        var $83=HEAP[$tuple]; //@line 4404 "datetimemodule.c"
        var $84=($83)==0; //@line 4404 "datetimemodule.c"
        if ($84) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 4404 "datetimemodule.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 4405 "datetimemodule.c"
        __label__ = 10; break; //@line 4405 "datetimemodule.c"
      case 7: // $bb6
        var $85=HEAP[$self_addr]; //@line 4406 "datetimemodule.c"
        var $86=$85; //@line 4406 "datetimemodule.c"
        var $87=(($86+4)&4294967295); //@line 4406 "datetimemodule.c"
        var $88=HEAP[$87]; //@line 4406 "datetimemodule.c"
        var $89=HEAP[$tuple]; //@line 4406 "datetimemodule.c"
        var $90=_datetime_new($88, $89, 0); //@line 4406 "datetimemodule.c"
        HEAP[$clone]=$90; //@line 4406 "datetimemodule.c"
        var $91=HEAP[$tuple]; //@line 4407 "datetimemodule.c"
        var $92=(($91)&4294967295); //@line 4407 "datetimemodule.c"
        var $93=HEAP[$92]; //@line 4407 "datetimemodule.c"
        var $94=((($93) - 1)&4294967295); //@line 4407 "datetimemodule.c"
        var $95=HEAP[$tuple]; //@line 4407 "datetimemodule.c"
        var $96=(($95)&4294967295); //@line 4407 "datetimemodule.c"
        HEAP[$96]=$94; //@line 4407 "datetimemodule.c"
        var $97=HEAP[$tuple]; //@line 4407 "datetimemodule.c"
        var $98=(($97)&4294967295); //@line 4407 "datetimemodule.c"
        var $99=HEAP[$98]; //@line 4407 "datetimemodule.c"
        var $100=((($99))|0)==0; //@line 4407 "datetimemodule.c"
        if ($100) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4407 "datetimemodule.c"
      case 8: // $bb7
        var $101=HEAP[$tuple]; //@line 4407 "datetimemodule.c"
        var $102=(($101+4)&4294967295); //@line 4407 "datetimemodule.c"
        var $103=HEAP[$102]; //@line 4407 "datetimemodule.c"
        var $104=(($103+24)&4294967295); //@line 4407 "datetimemodule.c"
        var $105=HEAP[$104]; //@line 4407 "datetimemodule.c"
        var $106=HEAP[$tuple]; //@line 4407 "datetimemodule.c"
        FUNCTION_TABLE[$105]($106); //@line 4407 "datetimemodule.c"
        __label__ = 9; break; //@line 4407 "datetimemodule.c"
      case 9: // $bb8
        var $107=HEAP[$clone]; //@line 4408 "datetimemodule.c"
        HEAP[$0]=$107; //@line 4408 "datetimemodule.c"
        __label__ = 10; break; //@line 4408 "datetimemodule.c"
      case 10: // $bb9
        var $108=HEAP[$0]; //@line 4402 "datetimemodule.c"
        HEAP[$retval]=$108; //@line 4402 "datetimemodule.c"
        __label__ = 11; break; //@line 4402 "datetimemodule.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 4402 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 4402 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_astimezone($self, $args, $kw) {
    var __stackBase__  = STACKTOP; STACKTOP += 68; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 68);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $kw_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $y=__stackBase__+20;
        var $m=__stackBase__+24;
        var $d=__stackBase__+28;
        var $hh=__stackBase__+32;
        var $mm=__stackBase__+36;
        var $ss=__stackBase__+40;
        var $us=__stackBase__+44;
        var $result=__stackBase__+48;
        var $offset=__stackBase__+52;
        var $none=__stackBase__+56;
        var $tzinfo=__stackBase__+60;
        var $temp=__stackBase__+64;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$kw_addr]=$kw;
        var $1=HEAP[$args_addr]; //@line 4421 "datetimemodule.c"
        var $2=HEAP[$kw_addr]; //@line 4421 "datetimemodule.c"
        var $3=__PyArg_ParseTupleAndKeywords_SizeT($1, $2, ((__str245)&4294967295), ((_keywords_13698)&4294967295), _PyDateTime_TZInfoType, $tzinfo); //@line 4421 "datetimemodule.c"
        var $4=((($3))|0)==0; //@line 4421 "datetimemodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4421 "datetimemodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 4423 "datetimemodule.c"
        __label__ = 19; break; //@line 4423 "datetimemodule.c"
      case 2: // $bb1
        var $5=HEAP[$self_addr]; //@line 4425 "datetimemodule.c"
        var $6=$5; //@line 4425 "datetimemodule.c"
        var $7=(($6+12)&4294967295); //@line 4425 "datetimemodule.c"
        var $8=HEAP[$7]; //@line 4425 "datetimemodule.c"
        var $9=reSign(($8), 8, 0)==0; //@line 4425 "datetimemodule.c"
        if ($9) { __label__ = 18; break; } else { __label__ = 3; break; } //@line 4425 "datetimemodule.c"
      case 3: // $bb2
        var $10=HEAP[$self_addr]; //@line 4425 "datetimemodule.c"
        var $11=(($10+24)&4294967295); //@line 4425 "datetimemodule.c"
        var $12=HEAP[$11]; //@line 4425 "datetimemodule.c"
        var $13=($12)==(__Py_NoneStruct); //@line 4425 "datetimemodule.c"
        if ($13) { __label__ = 18; break; } else { __label__ = 4; break; } //@line 4425 "datetimemodule.c"
      case 4: // $bb3
        var $14=HEAP[$self_addr]; //@line 4429 "datetimemodule.c"
        var $15=(($14+24)&4294967295); //@line 4429 "datetimemodule.c"
        var $16=HEAP[$15]; //@line 4429 "datetimemodule.c"
        var $17=HEAP[$tzinfo]; //@line 4429 "datetimemodule.c"
        var $18=($16)==($17); //@line 4429 "datetimemodule.c"
        if ($18) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4429 "datetimemodule.c"
      case 5: // $bb4
        var $19=HEAP[$self_addr]; //@line 4430 "datetimemodule.c"
        var $20=$19; //@line 4430 "datetimemodule.c"
        var $21=(($20)&4294967295); //@line 4430 "datetimemodule.c"
        var $22=HEAP[$21]; //@line 4430 "datetimemodule.c"
        var $23=((($22) + 1)&4294967295); //@line 4430 "datetimemodule.c"
        var $24=(($20)&4294967295); //@line 4430 "datetimemodule.c"
        HEAP[$24]=$23; //@line 4430 "datetimemodule.c"
        var $25=HEAP[$self_addr]; //@line 4431 "datetimemodule.c"
        var $26=$25; //@line 4431 "datetimemodule.c"
        HEAP[$0]=$26; //@line 4431 "datetimemodule.c"
        __label__ = 19; break; //@line 4431 "datetimemodule.c"
      case 6: // $bb5
        var $27=HEAP[$self_addr]; //@line 4435 "datetimemodule.c"
        var $28=$27; //@line 4435 "datetimemodule.c"
        var $29=HEAP[$self_addr]; //@line 4435 "datetimemodule.c"
        var $30=(($29+24)&4294967295); //@line 4435 "datetimemodule.c"
        var $31=HEAP[$30]; //@line 4435 "datetimemodule.c"
        var $32=_call_utcoffset($31, $28, $none); //@line 4435 "datetimemodule.c"
        HEAP[$offset]=$32; //@line 4435 "datetimemodule.c"
        var $33=HEAP[$offset]; //@line 4436 "datetimemodule.c"
        var $34=((($33))|0)==-1; //@line 4436 "datetimemodule.c"
        if ($34) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 4436 "datetimemodule.c"
      case 7: // $bb6
        var $35=_PyErr_Occurred(); //@line 4436 "datetimemodule.c"
        var $36=($35)!=0; //@line 4436 "datetimemodule.c"
        if ($36) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4436 "datetimemodule.c"
      case 8: // $bb7
        HEAP[$0]=0; //@line 4437 "datetimemodule.c"
        __label__ = 19; break; //@line 4437 "datetimemodule.c"
      case 9: // $bb8
        var $37=HEAP[$none]; //@line 4438 "datetimemodule.c"
        var $38=((($37))|0)!=0; //@line 4438 "datetimemodule.c"
        if ($38) { __label__ = 18; break; } else { __label__ = 10; break; } //@line 4438 "datetimemodule.c"
      case 10: // $bb9
        var $39=HEAP[$self_addr]; //@line 4441 "datetimemodule.c"
        var $40=$39; //@line 4441 "datetimemodule.c"
        var $41=(($40+13)&4294967295); //@line 4441 "datetimemodule.c"
        var $42=(($41)&4294967295); //@line 4441 "datetimemodule.c"
        var $43=HEAP[$42]; //@line 4441 "datetimemodule.c"
        var $44=unSign(($43), 8, 0); //@line 4441 "datetimemodule.c"
        var $45=($44) << 8; //@line 4441 "datetimemodule.c"
        var $46=HEAP[$self_addr]; //@line 4441 "datetimemodule.c"
        var $47=$46; //@line 4441 "datetimemodule.c"
        var $48=(($47+13)&4294967295); //@line 4441 "datetimemodule.c"
        var $49=(($48+1)&4294967295); //@line 4441 "datetimemodule.c"
        var $50=HEAP[$49]; //@line 4441 "datetimemodule.c"
        var $51=unSign(($50), 8, 0); //@line 4441 "datetimemodule.c"
        var $52=($45) | ($51); //@line 4441 "datetimemodule.c"
        HEAP[$y]=$52; //@line 4441 "datetimemodule.c"
        var $53=HEAP[$self_addr]; //@line 4442 "datetimemodule.c"
        var $54=$53; //@line 4442 "datetimemodule.c"
        var $55=(($54+13)&4294967295); //@line 4442 "datetimemodule.c"
        var $56=(($55+2)&4294967295); //@line 4442 "datetimemodule.c"
        var $57=HEAP[$56]; //@line 4442 "datetimemodule.c"
        var $58=unSign(($57), 8, 0); //@line 4442 "datetimemodule.c"
        HEAP[$m]=$58; //@line 4442 "datetimemodule.c"
        var $59=HEAP[$self_addr]; //@line 4443 "datetimemodule.c"
        var $60=$59; //@line 4443 "datetimemodule.c"
        var $61=(($60+13)&4294967295); //@line 4443 "datetimemodule.c"
        var $62=(($61+3)&4294967295); //@line 4443 "datetimemodule.c"
        var $63=HEAP[$62]; //@line 4443 "datetimemodule.c"
        var $64=unSign(($63), 8, 0); //@line 4443 "datetimemodule.c"
        HEAP[$d]=$64; //@line 4443 "datetimemodule.c"
        var $65=HEAP[$self_addr]; //@line 4444 "datetimemodule.c"
        var $66=(($65+13)&4294967295); //@line 4444 "datetimemodule.c"
        var $67=(($66+4)&4294967295); //@line 4444 "datetimemodule.c"
        var $68=HEAP[$67]; //@line 4444 "datetimemodule.c"
        var $69=unSign(($68), 8, 0); //@line 4444 "datetimemodule.c"
        HEAP[$hh]=$69; //@line 4444 "datetimemodule.c"
        var $70=HEAP[$self_addr]; //@line 4445 "datetimemodule.c"
        var $71=(($70+13)&4294967295); //@line 4445 "datetimemodule.c"
        var $72=(($71+5)&4294967295); //@line 4445 "datetimemodule.c"
        var $73=HEAP[$72]; //@line 4445 "datetimemodule.c"
        var $74=unSign(($73), 8, 0); //@line 4445 "datetimemodule.c"
        HEAP[$mm]=$74; //@line 4445 "datetimemodule.c"
        var $75=HEAP[$self_addr]; //@line 4446 "datetimemodule.c"
        var $76=(($75+13)&4294967295); //@line 4446 "datetimemodule.c"
        var $77=(($76+6)&4294967295); //@line 4446 "datetimemodule.c"
        var $78=HEAP[$77]; //@line 4446 "datetimemodule.c"
        var $79=unSign(($78), 8, 0); //@line 4446 "datetimemodule.c"
        HEAP[$ss]=$79; //@line 4446 "datetimemodule.c"
        var $80=HEAP[$self_addr]; //@line 4447 "datetimemodule.c"
        var $81=(($80+13)&4294967295); //@line 4447 "datetimemodule.c"
        var $82=(($81+7)&4294967295); //@line 4447 "datetimemodule.c"
        var $83=HEAP[$82]; //@line 4447 "datetimemodule.c"
        var $84=unSign(($83), 8, 0); //@line 4447 "datetimemodule.c"
        var $85=($84) << 16; //@line 4447 "datetimemodule.c"
        var $86=HEAP[$self_addr]; //@line 4447 "datetimemodule.c"
        var $87=(($86+13)&4294967295); //@line 4447 "datetimemodule.c"
        var $88=(($87+8)&4294967295); //@line 4447 "datetimemodule.c"
        var $89=HEAP[$88]; //@line 4447 "datetimemodule.c"
        var $90=unSign(($89), 8, 0); //@line 4447 "datetimemodule.c"
        var $91=($90) << 8; //@line 4447 "datetimemodule.c"
        var $92=($85) | ($91); //@line 4447 "datetimemodule.c"
        var $93=HEAP[$self_addr]; //@line 4447 "datetimemodule.c"
        var $94=(($93+13)&4294967295); //@line 4447 "datetimemodule.c"
        var $95=(($94+9)&4294967295); //@line 4447 "datetimemodule.c"
        var $96=HEAP[$95]; //@line 4447 "datetimemodule.c"
        var $97=unSign(($96), 8, 0); //@line 4447 "datetimemodule.c"
        var $98=($92) | ($97); //@line 4447 "datetimemodule.c"
        HEAP[$us]=$98; //@line 4447 "datetimemodule.c"
        var $99=HEAP[$mm]; //@line 4449 "datetimemodule.c"
        var $100=HEAP[$offset]; //@line 4449 "datetimemodule.c"
        var $101=((($99) - ($100))&4294967295); //@line 4449 "datetimemodule.c"
        HEAP[$mm]=$101; //@line 4449 "datetimemodule.c"
        var $102=HEAP[$mm]; //@line 4450 "datetimemodule.c"
        var $103=((($102))|0) < 0; //@line 4450 "datetimemodule.c"
        if ($103) { __label__ = 12; break; } else { __label__ = 11; break; } //@line 4450 "datetimemodule.c"
      case 11: // $bb10
        var $104=HEAP[$mm]; //@line 4450 "datetimemodule.c"
        var $105=((($104))|0) > 59; //@line 4450 "datetimemodule.c"
        if ($105) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 4450 "datetimemodule.c"
      case 12: // $bb11
        var $106=_normalize_datetime($y, $m, $d, $hh, $mm, $ss, $us); //@line 4450 "datetimemodule.c"
        var $107=((($106))|0) < 0; //@line 4450 "datetimemodule.c"
        if ($107) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 4450 "datetimemodule.c"
      case 13: // $bb12
        HEAP[$0]=0; //@line 4452 "datetimemodule.c"
        __label__ = 19; break; //@line 4452 "datetimemodule.c"
      case 14: // $bb13
        var $108=HEAP[$tzinfo]; //@line 4455 "datetimemodule.c"
        var $109=HEAP[$us]; //@line 4455 "datetimemodule.c"
        var $110=HEAP[$ss]; //@line 4455 "datetimemodule.c"
        var $111=HEAP[$mm]; //@line 4455 "datetimemodule.c"
        var $112=HEAP[$hh]; //@line 4455 "datetimemodule.c"
        var $113=HEAP[$d]; //@line 4455 "datetimemodule.c"
        var $114=HEAP[$m]; //@line 4455 "datetimemodule.c"
        var $115=HEAP[$y]; //@line 4455 "datetimemodule.c"
        var $116=_new_datetime_ex($115, $114, $113, $112, $111, $110, $109, $108, _PyDateTime_DateTimeType); //@line 4455 "datetimemodule.c"
        HEAP[$result]=$116; //@line 4455 "datetimemodule.c"
        var $117=HEAP[$result]; //@line 4456 "datetimemodule.c"
        var $118=($117)!=0; //@line 4456 "datetimemodule.c"
        if ($118) { __label__ = 15; break; } else { __label__ = 17; break; } //@line 4456 "datetimemodule.c"
      case 15: // $bb14
        var $119=HEAP[$result]; //@line 4457 "datetimemodule.c"
        HEAP[$temp]=$119; //@line 4457 "datetimemodule.c"
        var $120=HEAP[$tzinfo]; //@line 4459 "datetimemodule.c"
        var $121=HEAP[$temp]; //@line 4459 "datetimemodule.c"
        var $122=__PyObject_CallMethod_SizeT($120, ((__str189)&4294967295), ((__str35)&4294967295), $121); //@line 4459 "datetimemodule.c"
        HEAP[$result]=$122; //@line 4459 "datetimemodule.c"
        var $123=HEAP[$temp]; //@line 4460 "datetimemodule.c"
        var $124=(($123)&4294967295); //@line 4460 "datetimemodule.c"
        var $125=HEAP[$124]; //@line 4460 "datetimemodule.c"
        var $126=((($125) - 1)&4294967295); //@line 4460 "datetimemodule.c"
        var $127=HEAP[$temp]; //@line 4460 "datetimemodule.c"
        var $128=(($127)&4294967295); //@line 4460 "datetimemodule.c"
        HEAP[$128]=$126; //@line 4460 "datetimemodule.c"
        var $129=HEAP[$temp]; //@line 4460 "datetimemodule.c"
        var $130=(($129)&4294967295); //@line 4460 "datetimemodule.c"
        var $131=HEAP[$130]; //@line 4460 "datetimemodule.c"
        var $132=((($131))|0)==0; //@line 4460 "datetimemodule.c"
        if ($132) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 4460 "datetimemodule.c"
      case 16: // $bb15
        var $133=HEAP[$temp]; //@line 4460 "datetimemodule.c"
        var $134=(($133+4)&4294967295); //@line 4460 "datetimemodule.c"
        var $135=HEAP[$134]; //@line 4460 "datetimemodule.c"
        var $136=(($135+24)&4294967295); //@line 4460 "datetimemodule.c"
        var $137=HEAP[$136]; //@line 4460 "datetimemodule.c"
        var $138=HEAP[$temp]; //@line 4460 "datetimemodule.c"
        FUNCTION_TABLE[$137]($138); //@line 4460 "datetimemodule.c"
        __label__ = 17; break; //@line 4460 "datetimemodule.c"
      case 17: // $bb16
        var $139=HEAP[$result]; //@line 4462 "datetimemodule.c"
        HEAP[$0]=$139; //@line 4462 "datetimemodule.c"
        __label__ = 19; break; //@line 4462 "datetimemodule.c"
      case 18: // $NeedAware
        var $140=HEAP[_PyExc_ValueError]; //@line 4465 "datetimemodule.c"
        _PyErr_SetString($140, ((__str246)&4294967295)); //@line 4465 "datetimemodule.c"
        HEAP[$0]=0; //@line 4467 "datetimemodule.c"
        __label__ = 19; break; //@line 4467 "datetimemodule.c"
      case 19: // $bb17
        var $141=HEAP[$0]; //@line 4423 "datetimemodule.c"
        HEAP[$retval]=$141; //@line 4423 "datetimemodule.c"
        __label__ = 20; break; //@line 4423 "datetimemodule.c"
      case 20: // $return
        var $retval18=HEAP[$retval]; //@line 4423 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval18; //@line 4423 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_timetuple($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $dstflag=__stackBase__+12;
        var $none=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$dstflag]=-1; //@line 4473 "datetimemodule.c"
        var $1=HEAP[$self_addr]; //@line 4475 "datetimemodule.c"
        var $2=$1; //@line 4475 "datetimemodule.c"
        var $3=(($2+12)&4294967295); //@line 4475 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 4475 "datetimemodule.c"
        var $5=reSign(($4), 8, 0)!=0; //@line 4475 "datetimemodule.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 9; break; } //@line 4475 "datetimemodule.c"
      case 1: // $bb
        var $6=HEAP[$self_addr]; //@line 4475 "datetimemodule.c"
        var $7=(($6+24)&4294967295); //@line 4475 "datetimemodule.c"
        var $8=HEAP[$7]; //@line 4475 "datetimemodule.c"
        var $9=($8)!=(__Py_NoneStruct); //@line 4475 "datetimemodule.c"
        if ($9) { __label__ = 2; break; } else { __label__ = 9; break; } //@line 4475 "datetimemodule.c"
      case 2: // $bb1
        var $10=HEAP[$self_addr]; //@line 4478 "datetimemodule.c"
        var $11=$10; //@line 4478 "datetimemodule.c"
        var $12=HEAP[$self_addr]; //@line 4478 "datetimemodule.c"
        var $13=(($12+24)&4294967295); //@line 4478 "datetimemodule.c"
        var $14=HEAP[$13]; //@line 4478 "datetimemodule.c"
        var $15=_call_dst($14, $11, $none); //@line 4478 "datetimemodule.c"
        HEAP[$dstflag]=$15; //@line 4478 "datetimemodule.c"
        var $16=HEAP[$dstflag]; //@line 4479 "datetimemodule.c"
        var $17=((($16))|0)==-1; //@line 4479 "datetimemodule.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 4479 "datetimemodule.c"
      case 3: // $bb2
        var $18=_PyErr_Occurred(); //@line 4479 "datetimemodule.c"
        var $19=($18)!=0; //@line 4479 "datetimemodule.c"
        if ($19) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4479 "datetimemodule.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 4480 "datetimemodule.c"
        __label__ = 10; break; //@line 4480 "datetimemodule.c"
      case 5: // $bb4
        var $20=HEAP[$none]; //@line 4482 "datetimemodule.c"
        var $21=((($20))|0)!=0; //@line 4482 "datetimemodule.c"
        if ($21) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 4482 "datetimemodule.c"
      case 6: // $bb5
        HEAP[$dstflag]=-1; //@line 4483 "datetimemodule.c"
        __label__ = 9; break; //@line 4483 "datetimemodule.c"
      case 7: // $bb6
        var $22=HEAP[$dstflag]; //@line 4484 "datetimemodule.c"
        var $23=((($22))|0)!=0; //@line 4484 "datetimemodule.c"
        if ($23) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4484 "datetimemodule.c"
      case 8: // $bb7
        HEAP[$dstflag]=1; //@line 4485 "datetimemodule.c"
        __label__ = 9; break; //@line 4485 "datetimemodule.c"
      case 9: // $bb8
        var $24=HEAP[$self_addr]; //@line 4488 "datetimemodule.c"
        var $25=(($24+13)&4294967295); //@line 4488 "datetimemodule.c"
        var $26=(($25+6)&4294967295); //@line 4488 "datetimemodule.c"
        var $27=HEAP[$26]; //@line 4488 "datetimemodule.c"
        var $28=unSign(($27), 8, 0); //@line 4488 "datetimemodule.c"
        var $29=HEAP[$self_addr]; //@line 4488 "datetimemodule.c"
        var $30=(($29+13)&4294967295); //@line 4488 "datetimemodule.c"
        var $31=(($30+5)&4294967295); //@line 4488 "datetimemodule.c"
        var $32=HEAP[$31]; //@line 4488 "datetimemodule.c"
        var $33=unSign(($32), 8, 0); //@line 4488 "datetimemodule.c"
        var $34=HEAP[$self_addr]; //@line 4488 "datetimemodule.c"
        var $35=(($34+13)&4294967295); //@line 4488 "datetimemodule.c"
        var $36=(($35+4)&4294967295); //@line 4488 "datetimemodule.c"
        var $37=HEAP[$36]; //@line 4488 "datetimemodule.c"
        var $38=unSign(($37), 8, 0); //@line 4488 "datetimemodule.c"
        var $39=HEAP[$self_addr]; //@line 4488 "datetimemodule.c"
        var $40=$39; //@line 4488 "datetimemodule.c"
        var $41=(($40+13)&4294967295); //@line 4488 "datetimemodule.c"
        var $42=(($41+3)&4294967295); //@line 4488 "datetimemodule.c"
        var $43=HEAP[$42]; //@line 4488 "datetimemodule.c"
        var $44=unSign(($43), 8, 0); //@line 4488 "datetimemodule.c"
        var $45=HEAP[$self_addr]; //@line 4488 "datetimemodule.c"
        var $46=$45; //@line 4488 "datetimemodule.c"
        var $47=(($46+13)&4294967295); //@line 4488 "datetimemodule.c"
        var $48=(($47+2)&4294967295); //@line 4488 "datetimemodule.c"
        var $49=HEAP[$48]; //@line 4488 "datetimemodule.c"
        var $50=unSign(($49), 8, 0); //@line 4488 "datetimemodule.c"
        var $51=HEAP[$self_addr]; //@line 4488 "datetimemodule.c"
        var $52=$51; //@line 4488 "datetimemodule.c"
        var $53=(($52+13)&4294967295); //@line 4488 "datetimemodule.c"
        var $54=(($53)&4294967295); //@line 4488 "datetimemodule.c"
        var $55=HEAP[$54]; //@line 4488 "datetimemodule.c"
        var $56=unSign(($55), 8, 0); //@line 4488 "datetimemodule.c"
        var $57=($56) << 8; //@line 4488 "datetimemodule.c"
        var $58=HEAP[$self_addr]; //@line 4488 "datetimemodule.c"
        var $59=$58; //@line 4488 "datetimemodule.c"
        var $60=(($59+13)&4294967295); //@line 4488 "datetimemodule.c"
        var $61=(($60+1)&4294967295); //@line 4488 "datetimemodule.c"
        var $62=HEAP[$61]; //@line 4488 "datetimemodule.c"
        var $63=unSign(($62), 8, 0); //@line 4488 "datetimemodule.c"
        var $64=($57) | ($63); //@line 4488 "datetimemodule.c"
        var $65=HEAP[$dstflag]; //@line 4488 "datetimemodule.c"
        var $66=_build_struct_time($64, $50, $44, $38, $33, $28, $65); //@line 4488 "datetimemodule.c"
        HEAP[$0]=$66; //@line 4488 "datetimemodule.c"
        __label__ = 10; break; //@line 4488 "datetimemodule.c"
      case 10: // $bb9
        var $67=HEAP[$0]; //@line 4480 "datetimemodule.c"
        HEAP[$retval]=$67; //@line 4480 "datetimemodule.c"
        __label__ = 11; break; //@line 4480 "datetimemodule.c"
      case 11: // $return
        var $retval10=HEAP[$retval]; //@line 4480 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 4480 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_getdate($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 4500 "datetimemodule.c"
        var $2=$1; //@line 4500 "datetimemodule.c"
        var $3=(($2+13)&4294967295); //@line 4500 "datetimemodule.c"
        var $4=(($3+3)&4294967295); //@line 4500 "datetimemodule.c"
        var $5=HEAP[$4]; //@line 4500 "datetimemodule.c"
        var $6=unSign(($5), 8, 0); //@line 4500 "datetimemodule.c"
        var $7=HEAP[$self_addr]; //@line 4500 "datetimemodule.c"
        var $8=$7; //@line 4500 "datetimemodule.c"
        var $9=(($8+13)&4294967295); //@line 4500 "datetimemodule.c"
        var $10=(($9+2)&4294967295); //@line 4500 "datetimemodule.c"
        var $11=HEAP[$10]; //@line 4500 "datetimemodule.c"
        var $12=unSign(($11), 8, 0); //@line 4500 "datetimemodule.c"
        var $13=HEAP[$self_addr]; //@line 4500 "datetimemodule.c"
        var $14=$13; //@line 4500 "datetimemodule.c"
        var $15=(($14+13)&4294967295); //@line 4500 "datetimemodule.c"
        var $16=(($15)&4294967295); //@line 4500 "datetimemodule.c"
        var $17=HEAP[$16]; //@line 4500 "datetimemodule.c"
        var $18=unSign(($17), 8, 0); //@line 4500 "datetimemodule.c"
        var $19=($18) << 8; //@line 4500 "datetimemodule.c"
        var $20=HEAP[$self_addr]; //@line 4500 "datetimemodule.c"
        var $21=$20; //@line 4500 "datetimemodule.c"
        var $22=(($21+13)&4294967295); //@line 4500 "datetimemodule.c"
        var $23=(($22+1)&4294967295); //@line 4500 "datetimemodule.c"
        var $24=HEAP[$23]; //@line 4500 "datetimemodule.c"
        var $25=unSign(($24), 8, 0); //@line 4500 "datetimemodule.c"
        var $26=($19) | ($25); //@line 4500 "datetimemodule.c"
        var $27=_new_date_ex($26, $12, $6, _PyDateTime_DateType); //@line 4500 "datetimemodule.c"
        HEAP[$0]=$27; //@line 4500 "datetimemodule.c"
        var $28=HEAP[$0]; //@line 4500 "datetimemodule.c"
        HEAP[$retval]=$28; //@line 4500 "datetimemodule.c"
        __label__ = 1; break; //@line 4500 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 4500 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 4500 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_gettime($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 4508 "datetimemodule.c"
        var $2=(($1+13)&4294967295); //@line 4508 "datetimemodule.c"
        var $3=(($2+7)&4294967295); //@line 4508 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 4508 "datetimemodule.c"
        var $5=unSign(($4), 8, 0); //@line 4508 "datetimemodule.c"
        var $6=($5) << 16; //@line 4508 "datetimemodule.c"
        var $7=HEAP[$self_addr]; //@line 4508 "datetimemodule.c"
        var $8=(($7+13)&4294967295); //@line 4508 "datetimemodule.c"
        var $9=(($8+8)&4294967295); //@line 4508 "datetimemodule.c"
        var $10=HEAP[$9]; //@line 4508 "datetimemodule.c"
        var $11=unSign(($10), 8, 0); //@line 4508 "datetimemodule.c"
        var $12=($11) << 8; //@line 4508 "datetimemodule.c"
        var $13=($6) | ($12); //@line 4508 "datetimemodule.c"
        var $14=HEAP[$self_addr]; //@line 4508 "datetimemodule.c"
        var $15=(($14+13)&4294967295); //@line 4508 "datetimemodule.c"
        var $16=(($15+9)&4294967295); //@line 4508 "datetimemodule.c"
        var $17=HEAP[$16]; //@line 4508 "datetimemodule.c"
        var $18=unSign(($17), 8, 0); //@line 4508 "datetimemodule.c"
        var $19=($13) | ($18); //@line 4508 "datetimemodule.c"
        var $20=HEAP[$self_addr]; //@line 4508 "datetimemodule.c"
        var $21=(($20+13)&4294967295); //@line 4508 "datetimemodule.c"
        var $22=(($21+6)&4294967295); //@line 4508 "datetimemodule.c"
        var $23=HEAP[$22]; //@line 4508 "datetimemodule.c"
        var $24=unSign(($23), 8, 0); //@line 4508 "datetimemodule.c"
        var $25=HEAP[$self_addr]; //@line 4508 "datetimemodule.c"
        var $26=(($25+13)&4294967295); //@line 4508 "datetimemodule.c"
        var $27=(($26+5)&4294967295); //@line 4508 "datetimemodule.c"
        var $28=HEAP[$27]; //@line 4508 "datetimemodule.c"
        var $29=unSign(($28), 8, 0); //@line 4508 "datetimemodule.c"
        var $30=HEAP[$self_addr]; //@line 4508 "datetimemodule.c"
        var $31=(($30+13)&4294967295); //@line 4508 "datetimemodule.c"
        var $32=(($31+4)&4294967295); //@line 4508 "datetimemodule.c"
        var $33=HEAP[$32]; //@line 4508 "datetimemodule.c"
        var $34=unSign(($33), 8, 0); //@line 4508 "datetimemodule.c"
        var $35=_new_time_ex($34, $29, $24, $19, __Py_NoneStruct, _PyDateTime_TimeType); //@line 4508 "datetimemodule.c"
        HEAP[$0]=$35; //@line 4508 "datetimemodule.c"
        var $36=HEAP[$0]; //@line 4508 "datetimemodule.c"
        HEAP[$retval]=$36; //@line 4508 "datetimemodule.c"
        __label__ = 1; break; //@line 4508 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 4508 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 4508 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_gettimetz($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $iftmp_588=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 4518 "datetimemodule.c"
        var $2=$1; //@line 4518 "datetimemodule.c"
        var $3=(($2+12)&4294967295); //@line 4518 "datetimemodule.c"
        var $4=HEAP[$3]; //@line 4518 "datetimemodule.c"
        var $5=reSign(($4), 8, 0)!=0; //@line 4518 "datetimemodule.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 4518 "datetimemodule.c"
      case 1: // $bb
        var $6=HEAP[$self_addr]; //@line 4518 "datetimemodule.c"
        var $7=(($6+24)&4294967295); //@line 4518 "datetimemodule.c"
        var $8=HEAP[$7]; //@line 4518 "datetimemodule.c"
        HEAP[$iftmp_588]=$8; //@line 4518 "datetimemodule.c"
        __label__ = 3; break; //@line 4518 "datetimemodule.c"
      case 2: // $bb1
        HEAP[$iftmp_588]=__Py_NoneStruct; //@line 4518 "datetimemodule.c"
        __label__ = 3; break; //@line 4518 "datetimemodule.c"
      case 3: // $bb2
        var $9=HEAP[$self_addr]; //@line 4518 "datetimemodule.c"
        var $10=(($9+13)&4294967295); //@line 4518 "datetimemodule.c"
        var $11=(($10+7)&4294967295); //@line 4518 "datetimemodule.c"
        var $12=HEAP[$11]; //@line 4518 "datetimemodule.c"
        var $13=unSign(($12), 8, 0); //@line 4518 "datetimemodule.c"
        var $14=($13) << 16; //@line 4518 "datetimemodule.c"
        var $15=HEAP[$self_addr]; //@line 4518 "datetimemodule.c"
        var $16=(($15+13)&4294967295); //@line 4518 "datetimemodule.c"
        var $17=(($16+8)&4294967295); //@line 4518 "datetimemodule.c"
        var $18=HEAP[$17]; //@line 4518 "datetimemodule.c"
        var $19=unSign(($18), 8, 0); //@line 4518 "datetimemodule.c"
        var $20=($19) << 8; //@line 4518 "datetimemodule.c"
        var $21=($14) | ($20); //@line 4518 "datetimemodule.c"
        var $22=HEAP[$self_addr]; //@line 4518 "datetimemodule.c"
        var $23=(($22+13)&4294967295); //@line 4518 "datetimemodule.c"
        var $24=(($23+9)&4294967295); //@line 4518 "datetimemodule.c"
        var $25=HEAP[$24]; //@line 4518 "datetimemodule.c"
        var $26=unSign(($25), 8, 0); //@line 4518 "datetimemodule.c"
        var $27=($21) | ($26); //@line 4518 "datetimemodule.c"
        var $28=HEAP[$self_addr]; //@line 4518 "datetimemodule.c"
        var $29=(($28+13)&4294967295); //@line 4518 "datetimemodule.c"
        var $30=(($29+6)&4294967295); //@line 4518 "datetimemodule.c"
        var $31=HEAP[$30]; //@line 4518 "datetimemodule.c"
        var $32=unSign(($31), 8, 0); //@line 4518 "datetimemodule.c"
        var $33=HEAP[$self_addr]; //@line 4518 "datetimemodule.c"
        var $34=(($33+13)&4294967295); //@line 4518 "datetimemodule.c"
        var $35=(($34+5)&4294967295); //@line 4518 "datetimemodule.c"
        var $36=HEAP[$35]; //@line 4518 "datetimemodule.c"
        var $37=unSign(($36), 8, 0); //@line 4518 "datetimemodule.c"
        var $38=HEAP[$self_addr]; //@line 4518 "datetimemodule.c"
        var $39=(($38+13)&4294967295); //@line 4518 "datetimemodule.c"
        var $40=(($39+4)&4294967295); //@line 4518 "datetimemodule.c"
        var $41=HEAP[$40]; //@line 4518 "datetimemodule.c"
        var $42=unSign(($41), 8, 0); //@line 4518 "datetimemodule.c"
        var $43=HEAP[$iftmp_588]; //@line 4518 "datetimemodule.c"
        var $44=_new_time_ex($42, $37, $32, $27, $43, _PyDateTime_TimeType); //@line 4518 "datetimemodule.c"
        HEAP[$0]=$44; //@line 4518 "datetimemodule.c"
        var $45=HEAP[$0]; //@line 4518 "datetimemodule.c"
        HEAP[$retval]=$45; //@line 4518 "datetimemodule.c"
        __label__ = 4; break; //@line 4518 "datetimemodule.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 4518 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 4518 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_utctimetuple($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 52; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 52);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $y=__stackBase__+12;
        var $m=__stackBase__+16;
        var $d=__stackBase__+20;
        var $hh=__stackBase__+24;
        var $mm=__stackBase__+28;
        var $ss=__stackBase__+32;
        var $us=__stackBase__+36;
        var $offset=__stackBase__+40;
        var $none=__stackBase__+44;
        var $stat=__stackBase__+48;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        var $1=HEAP[$self_addr]; //@line 4528 "datetimemodule.c"
        var $2=$1; //@line 4528 "datetimemodule.c"
        var $3=(($2+13)&4294967295); //@line 4528 "datetimemodule.c"
        var $4=(($3)&4294967295); //@line 4528 "datetimemodule.c"
        var $5=HEAP[$4]; //@line 4528 "datetimemodule.c"
        var $6=unSign(($5), 8, 0); //@line 4528 "datetimemodule.c"
        var $7=($6) << 8; //@line 4528 "datetimemodule.c"
        var $8=HEAP[$self_addr]; //@line 4528 "datetimemodule.c"
        var $9=$8; //@line 4528 "datetimemodule.c"
        var $10=(($9+13)&4294967295); //@line 4528 "datetimemodule.c"
        var $11=(($10+1)&4294967295); //@line 4528 "datetimemodule.c"
        var $12=HEAP[$11]; //@line 4528 "datetimemodule.c"
        var $13=unSign(($12), 8, 0); //@line 4528 "datetimemodule.c"
        var $14=($7) | ($13); //@line 4528 "datetimemodule.c"
        HEAP[$y]=$14; //@line 4528 "datetimemodule.c"
        var $15=HEAP[$self_addr]; //@line 4529 "datetimemodule.c"
        var $16=$15; //@line 4529 "datetimemodule.c"
        var $17=(($16+13)&4294967295); //@line 4529 "datetimemodule.c"
        var $18=(($17+2)&4294967295); //@line 4529 "datetimemodule.c"
        var $19=HEAP[$18]; //@line 4529 "datetimemodule.c"
        var $20=unSign(($19), 8, 0); //@line 4529 "datetimemodule.c"
        HEAP[$m]=$20; //@line 4529 "datetimemodule.c"
        var $21=HEAP[$self_addr]; //@line 4530 "datetimemodule.c"
        var $22=$21; //@line 4530 "datetimemodule.c"
        var $23=(($22+13)&4294967295); //@line 4530 "datetimemodule.c"
        var $24=(($23+3)&4294967295); //@line 4530 "datetimemodule.c"
        var $25=HEAP[$24]; //@line 4530 "datetimemodule.c"
        var $26=unSign(($25), 8, 0); //@line 4530 "datetimemodule.c"
        HEAP[$d]=$26; //@line 4530 "datetimemodule.c"
        var $27=HEAP[$self_addr]; //@line 4531 "datetimemodule.c"
        var $28=(($27+13)&4294967295); //@line 4531 "datetimemodule.c"
        var $29=(($28+4)&4294967295); //@line 4531 "datetimemodule.c"
        var $30=HEAP[$29]; //@line 4531 "datetimemodule.c"
        var $31=unSign(($30), 8, 0); //@line 4531 "datetimemodule.c"
        HEAP[$hh]=$31; //@line 4531 "datetimemodule.c"
        var $32=HEAP[$self_addr]; //@line 4532 "datetimemodule.c"
        var $33=(($32+13)&4294967295); //@line 4532 "datetimemodule.c"
        var $34=(($33+5)&4294967295); //@line 4532 "datetimemodule.c"
        var $35=HEAP[$34]; //@line 4532 "datetimemodule.c"
        var $36=unSign(($35), 8, 0); //@line 4532 "datetimemodule.c"
        HEAP[$mm]=$36; //@line 4532 "datetimemodule.c"
        var $37=HEAP[$self_addr]; //@line 4533 "datetimemodule.c"
        var $38=(($37+13)&4294967295); //@line 4533 "datetimemodule.c"
        var $39=(($38+6)&4294967295); //@line 4533 "datetimemodule.c"
        var $40=HEAP[$39]; //@line 4533 "datetimemodule.c"
        var $41=unSign(($40), 8, 0); //@line 4533 "datetimemodule.c"
        HEAP[$ss]=$41; //@line 4533 "datetimemodule.c"
        HEAP[$us]=0; //@line 4534 "datetimemodule.c"
        HEAP[$offset]=0; //@line 4535 "datetimemodule.c"
        var $42=HEAP[$self_addr]; //@line 4537 "datetimemodule.c"
        var $43=$42; //@line 4537 "datetimemodule.c"
        var $44=(($43+12)&4294967295); //@line 4537 "datetimemodule.c"
        var $45=HEAP[$44]; //@line 4537 "datetimemodule.c"
        var $46=reSign(($45), 8, 0)!=0; //@line 4537 "datetimemodule.c"
        if ($46) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 4537 "datetimemodule.c"
      case 1: // $bb
        var $47=HEAP[$self_addr]; //@line 4537 "datetimemodule.c"
        var $48=(($47+24)&4294967295); //@line 4537 "datetimemodule.c"
        var $49=HEAP[$48]; //@line 4537 "datetimemodule.c"
        var $50=($49)!=(__Py_NoneStruct); //@line 4537 "datetimemodule.c"
        if ($50) { __label__ = 2; break; } else { __label__ = 5; break; } //@line 4537 "datetimemodule.c"
      case 2: // $bb1
        var $51=HEAP[$self_addr]; //@line 4540 "datetimemodule.c"
        var $52=$51; //@line 4540 "datetimemodule.c"
        var $53=HEAP[$self_addr]; //@line 4540 "datetimemodule.c"
        var $54=(($53+24)&4294967295); //@line 4540 "datetimemodule.c"
        var $55=HEAP[$54]; //@line 4540 "datetimemodule.c"
        var $56=_call_utcoffset($55, $52, $none); //@line 4540 "datetimemodule.c"
        HEAP[$offset]=$56; //@line 4540 "datetimemodule.c"
        var $57=HEAP[$offset]; //@line 4541 "datetimemodule.c"
        var $58=((($57))|0)==-1; //@line 4541 "datetimemodule.c"
        if ($58) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 4541 "datetimemodule.c"
      case 3: // $bb2
        var $59=_PyErr_Occurred(); //@line 4541 "datetimemodule.c"
        var $60=($59)!=0; //@line 4541 "datetimemodule.c"
        if ($60) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4541 "datetimemodule.c"
      case 4: // $bb3
        HEAP[$0]=0; //@line 4542 "datetimemodule.c"
        __label__ = 11; break; //@line 4542 "datetimemodule.c"
      case 5: // $bb4
        var $61=HEAP[$offset]; //@line 4547 "datetimemodule.c"
        var $62=((($61))|0)!=0; //@line 4547 "datetimemodule.c"
        if ($62) { __label__ = 6; break; } else { __label__ = 10; break; } //@line 4547 "datetimemodule.c"
      case 6: // $bb5
        var $63=HEAP[$mm]; //@line 4551 "datetimemodule.c"
        var $64=HEAP[$offset]; //@line 4551 "datetimemodule.c"
        var $65=((($63) - ($64))&4294967295); //@line 4551 "datetimemodule.c"
        HEAP[$mm]=$65; //@line 4551 "datetimemodule.c"
        var $66=_normalize_datetime($y, $m, $d, $hh, $mm, $ss, $us); //@line 4552 "datetimemodule.c"
        HEAP[$stat]=$66; //@line 4552 "datetimemodule.c"
        var $67=HEAP[$stat]; //@line 4553 "datetimemodule.c"
        var $68=((($67))|0) < 0; //@line 4553 "datetimemodule.c"
        if ($68) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 4553 "datetimemodule.c"
      case 7: // $bb6
        var $69=HEAP[_PyExc_OverflowError]; //@line 4557 "datetimemodule.c"
        var $70=_PyErr_ExceptionMatches($69); //@line 4557 "datetimemodule.c"
        var $71=((($70))|0)!=0; //@line 4557 "datetimemodule.c"
        if ($71) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4557 "datetimemodule.c"
      case 8: // $bb7
        _PyErr_Clear(); //@line 4558 "datetimemodule.c"
        __label__ = 10; break; //@line 4558 "datetimemodule.c"
      case 9: // $bb8
        HEAP[$0]=0; //@line 4560 "datetimemodule.c"
        __label__ = 11; break; //@line 4560 "datetimemodule.c"
      case 10: // $bb9
        var $72=HEAP[$ss]; //@line 4563 "datetimemodule.c"
        var $73=HEAP[$mm]; //@line 4563 "datetimemodule.c"
        var $74=HEAP[$hh]; //@line 4563 "datetimemodule.c"
        var $75=HEAP[$d]; //@line 4563 "datetimemodule.c"
        var $76=HEAP[$m]; //@line 4563 "datetimemodule.c"
        var $77=HEAP[$y]; //@line 4563 "datetimemodule.c"
        var $78=_build_struct_time($77, $76, $75, $74, $73, $72, 0); //@line 4563 "datetimemodule.c"
        HEAP[$0]=$78; //@line 4563 "datetimemodule.c"
        __label__ = 11; break; //@line 4563 "datetimemodule.c"
      case 11: // $bb10
        var $79=HEAP[$0]; //@line 4542 "datetimemodule.c"
        HEAP[$retval]=$79; //@line 4542 "datetimemodule.c"
        __label__ = 12; break; //@line 4542 "datetimemodule.c"
      case 12: // $return
        var $retval11=HEAP[$retval]; //@line 4542 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 4542 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_getstate($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $basestate=__stackBase__+12;
        var $result=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$result]=0; //@line 4577 "datetimemodule.c"
        var $1=HEAP[$self_addr]; //@line 4579 "datetimemodule.c"
        var $2=(($1+13)&4294967295); //@line 4579 "datetimemodule.c"
        var $3=$2; //@line 4579 "datetimemodule.c"
        var $4=_PyString_FromStringAndSize($3, 10); //@line 4579 "datetimemodule.c"
        HEAP[$basestate]=$4; //@line 4579 "datetimemodule.c"
        var $5=HEAP[$basestate]; //@line 4581 "datetimemodule.c"
        var $6=($5)!=0; //@line 4581 "datetimemodule.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 7; break; } //@line 4581 "datetimemodule.c"
      case 1: // $bb
        var $7=HEAP[$self_addr]; //@line 4582 "datetimemodule.c"
        var $8=$7; //@line 4582 "datetimemodule.c"
        var $9=(($8+12)&4294967295); //@line 4582 "datetimemodule.c"
        var $10=HEAP[$9]; //@line 4582 "datetimemodule.c"
        var $11=reSign(($10), 8, 0)==0; //@line 4582 "datetimemodule.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 4582 "datetimemodule.c"
      case 2: // $bb1
        var $12=HEAP[$self_addr]; //@line 4582 "datetimemodule.c"
        var $13=(($12+24)&4294967295); //@line 4582 "datetimemodule.c"
        var $14=HEAP[$13]; //@line 4582 "datetimemodule.c"
        var $15=($14)==(__Py_NoneStruct); //@line 4582 "datetimemodule.c"
        if ($15) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4582 "datetimemodule.c"
      case 3: // $bb2
        var $16=HEAP[$basestate]; //@line 4583 "datetimemodule.c"
        var $17=_PyTuple_Pack(1, $16); //@line 4583 "datetimemodule.c"
        HEAP[$result]=$17; //@line 4583 "datetimemodule.c"
        __label__ = 5; break; //@line 4583 "datetimemodule.c"
      case 4: // $bb3
        var $18=HEAP[$self_addr]; //@line 4585 "datetimemodule.c"
        var $19=(($18+24)&4294967295); //@line 4585 "datetimemodule.c"
        var $20=HEAP[$19]; //@line 4585 "datetimemodule.c"
        var $21=HEAP[$basestate]; //@line 4585 "datetimemodule.c"
        var $22=_PyTuple_Pack(2, $21, $20); //@line 4585 "datetimemodule.c"
        HEAP[$result]=$22; //@line 4585 "datetimemodule.c"
        __label__ = 5; break; //@line 4585 "datetimemodule.c"
      case 5: // $bb4
        var $23=HEAP[$basestate]; //@line 4586 "datetimemodule.c"
        var $24=(($23)&4294967295); //@line 4586 "datetimemodule.c"
        var $25=HEAP[$24]; //@line 4586 "datetimemodule.c"
        var $26=((($25) - 1)&4294967295); //@line 4586 "datetimemodule.c"
        var $27=HEAP[$basestate]; //@line 4586 "datetimemodule.c"
        var $28=(($27)&4294967295); //@line 4586 "datetimemodule.c"
        HEAP[$28]=$26; //@line 4586 "datetimemodule.c"
        var $29=HEAP[$basestate]; //@line 4586 "datetimemodule.c"
        var $30=(($29)&4294967295); //@line 4586 "datetimemodule.c"
        var $31=HEAP[$30]; //@line 4586 "datetimemodule.c"
        var $32=((($31))|0)==0; //@line 4586 "datetimemodule.c"
        if ($32) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 4586 "datetimemodule.c"
      case 6: // $bb5
        var $33=HEAP[$basestate]; //@line 4586 "datetimemodule.c"
        var $34=(($33+4)&4294967295); //@line 4586 "datetimemodule.c"
        var $35=HEAP[$34]; //@line 4586 "datetimemodule.c"
        var $36=(($35+24)&4294967295); //@line 4586 "datetimemodule.c"
        var $37=HEAP[$36]; //@line 4586 "datetimemodule.c"
        var $38=HEAP[$basestate]; //@line 4586 "datetimemodule.c"
        FUNCTION_TABLE[$37]($38); //@line 4586 "datetimemodule.c"
        __label__ = 7; break; //@line 4586 "datetimemodule.c"
      case 7: // $bb6
        var $39=HEAP[$result]; //@line 4588 "datetimemodule.c"
        HEAP[$0]=$39; //@line 4588 "datetimemodule.c"
        var $40=HEAP[$0]; //@line 4588 "datetimemodule.c"
        HEAP[$retval]=$40; //@line 4588 "datetimemodule.c"
        __label__ = 8; break; //@line 4588 "datetimemodule.c"
      case 8: // $return
        var $retval7=HEAP[$retval]; //@line 4588 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 4588 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _datetime_reduce($self, $arg) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $arg_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$arg_addr]=$arg;
        var $1=HEAP[$self_addr]; //@line 4594 "datetimemodule.c"
        var $2=_datetime_getstate($1); //@line 4594 "datetimemodule.c"
        var $3=HEAP[$self_addr]; //@line 4594 "datetimemodule.c"
        var $4=$3; //@line 4594 "datetimemodule.c"
        var $5=(($4+4)&4294967295); //@line 4594 "datetimemodule.c"
        var $6=HEAP[$5]; //@line 4594 "datetimemodule.c"
        var $7=__Py_BuildValue_SizeT(((__str154)&4294967295), $6, $2); //@line 4594 "datetimemodule.c"
        HEAP[$0]=$7; //@line 4594 "datetimemodule.c"
        var $8=HEAP[$0]; //@line 4594 "datetimemodule.c"
        HEAP[$retval]=$8; //@line 4594 "datetimemodule.c"
        __label__ = 1; break; //@line 4594 "datetimemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 4594 "datetimemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 4594 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _initdatetime() {
    var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $m=__stackBase__;
        var $d=__stackBase__+4;
        var $x=__stackBase__+8;
        var $_alloca_point_=0;
        var $0=_Py_InitModule4(((__str269)&4294967295), _module_methods, ((__str270)&4294967295), 0, 1013); //@line 4771 "datetimemodule.c"
        HEAP[$m]=$0; //@line 4771 "datetimemodule.c"
        var $1=HEAP[$m]; //@line 4773 "datetimemodule.c"
        var $2=($1)==0; //@line 4773 "datetimemodule.c"
        if ($2) { __label__ = 83; break; } else { __label__ = 1; break; } //@line 4773 "datetimemodule.c"
      case 1: // $bb
        var $3=_PyType_Ready(_PyDateTime_DateType); //@line 4776 "datetimemodule.c"
        var $4=((($3))|0) < 0; //@line 4776 "datetimemodule.c"
        if ($4) { __label__ = 83; break; } else { __label__ = 2; break; } //@line 4776 "datetimemodule.c"
      case 2: // $bb1
        var $5=_PyType_Ready(_PyDateTime_DateTimeType); //@line 4778 "datetimemodule.c"
        var $6=((($5))|0) < 0; //@line 4778 "datetimemodule.c"
        if ($6) { __label__ = 83; break; } else { __label__ = 3; break; } //@line 4778 "datetimemodule.c"
      case 3: // $bb2
        var $7=_PyType_Ready(_PyDateTime_DeltaType); //@line 4780 "datetimemodule.c"
        var $8=((($7))|0) < 0; //@line 4780 "datetimemodule.c"
        if ($8) { __label__ = 83; break; } else { __label__ = 4; break; } //@line 4780 "datetimemodule.c"
      case 4: // $bb3
        var $9=_PyType_Ready(_PyDateTime_TimeType); //@line 4782 "datetimemodule.c"
        var $10=((($9))|0) < 0; //@line 4782 "datetimemodule.c"
        if ($10) { __label__ = 83; break; } else { __label__ = 5; break; } //@line 4782 "datetimemodule.c"
      case 5: // $bb4
        var $11=_PyType_Ready(_PyDateTime_TZInfoType); //@line 4784 "datetimemodule.c"
        var $12=((($11))|0) < 0; //@line 4784 "datetimemodule.c"
        if ($12) { __label__ = 83; break; } else { __label__ = 6; break; } //@line 4784 "datetimemodule.c"
      case 6: // $bb5
        var $13=HEAP[((_PyDateTime_DeltaType+132)&4294967295)]; //@line 4788 "datetimemodule.c"
        HEAP[$d]=$13; //@line 4788 "datetimemodule.c"
        var $14=_new_delta_ex(0, 0, 1, 0, _PyDateTime_DeltaType); //@line 4790 "datetimemodule.c"
        HEAP[$x]=$14; //@line 4790 "datetimemodule.c"
        var $15=HEAP[$x]; //@line 4791 "datetimemodule.c"
        var $16=($15)==0; //@line 4791 "datetimemodule.c"
        if ($16) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 4791 "datetimemodule.c"
      case 7: // $bb6
        var $17=HEAP[$d]; //@line 4791 "datetimemodule.c"
        var $18=HEAP[$x]; //@line 4791 "datetimemodule.c"
        var $19=_PyDict_SetItemString($17, ((__str271)&4294967295), $18); //@line 4791 "datetimemodule.c"
        var $20=((($19))|0) < 0; //@line 4791 "datetimemodule.c"
        if ($20) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4791 "datetimemodule.c"
      case 8: // $bb7
        __label__ = 83; break; //@line 4791 "datetimemodule.c"
      case 9: // $bb8
        var $21=HEAP[$x]; //@line 4793 "datetimemodule.c"
        var $22=(($21)&4294967295); //@line 4793 "datetimemodule.c"
        var $23=HEAP[$22]; //@line 4793 "datetimemodule.c"
        var $24=((($23) - 1)&4294967295); //@line 4793 "datetimemodule.c"
        var $25=HEAP[$x]; //@line 4793 "datetimemodule.c"
        var $26=(($25)&4294967295); //@line 4793 "datetimemodule.c"
        HEAP[$26]=$24; //@line 4793 "datetimemodule.c"
        var $27=HEAP[$x]; //@line 4793 "datetimemodule.c"
        var $28=(($27)&4294967295); //@line 4793 "datetimemodule.c"
        var $29=HEAP[$28]; //@line 4793 "datetimemodule.c"
        var $30=((($29))|0)==0; //@line 4793 "datetimemodule.c"
        if ($30) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 4793 "datetimemodule.c"
      case 10: // $bb9
        var $31=HEAP[$x]; //@line 4793 "datetimemodule.c"
        var $32=(($31+4)&4294967295); //@line 4793 "datetimemodule.c"
        var $33=HEAP[$32]; //@line 4793 "datetimemodule.c"
        var $34=(($33+24)&4294967295); //@line 4793 "datetimemodule.c"
        var $35=HEAP[$34]; //@line 4793 "datetimemodule.c"
        var $36=HEAP[$x]; //@line 4793 "datetimemodule.c"
        FUNCTION_TABLE[$35]($36); //@line 4793 "datetimemodule.c"
        __label__ = 11; break; //@line 4793 "datetimemodule.c"
      case 11: // $bb10
        var $37=_new_delta_ex(-999999999, 0, 0, 0, _PyDateTime_DeltaType); //@line 4795 "datetimemodule.c"
        HEAP[$x]=$37; //@line 4795 "datetimemodule.c"
        var $38=HEAP[$x]; //@line 4796 "datetimemodule.c"
        var $39=($38)==0; //@line 4796 "datetimemodule.c"
        if ($39) { __label__ = 13; break; } else { __label__ = 12; break; } //@line 4796 "datetimemodule.c"
      case 12: // $bb11
        var $40=HEAP[$d]; //@line 4796 "datetimemodule.c"
        var $41=HEAP[$x]; //@line 4796 "datetimemodule.c"
        var $42=_PyDict_SetItemString($40, ((__str272)&4294967295), $41); //@line 4796 "datetimemodule.c"
        var $43=((($42))|0) < 0; //@line 4796 "datetimemodule.c"
        if ($43) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 4796 "datetimemodule.c"
      case 13: // $bb12
        __label__ = 83; break; //@line 4796 "datetimemodule.c"
      case 14: // $bb13
        var $44=HEAP[$x]; //@line 4798 "datetimemodule.c"
        var $45=(($44)&4294967295); //@line 4798 "datetimemodule.c"
        var $46=HEAP[$45]; //@line 4798 "datetimemodule.c"
        var $47=((($46) - 1)&4294967295); //@line 4798 "datetimemodule.c"
        var $48=HEAP[$x]; //@line 4798 "datetimemodule.c"
        var $49=(($48)&4294967295); //@line 4798 "datetimemodule.c"
        HEAP[$49]=$47; //@line 4798 "datetimemodule.c"
        var $50=HEAP[$x]; //@line 4798 "datetimemodule.c"
        var $51=(($50)&4294967295); //@line 4798 "datetimemodule.c"
        var $52=HEAP[$51]; //@line 4798 "datetimemodule.c"
        var $53=((($52))|0)==0; //@line 4798 "datetimemodule.c"
        if ($53) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 4798 "datetimemodule.c"
      case 15: // $bb14
        var $54=HEAP[$x]; //@line 4798 "datetimemodule.c"
        var $55=(($54+4)&4294967295); //@line 4798 "datetimemodule.c"
        var $56=HEAP[$55]; //@line 4798 "datetimemodule.c"
        var $57=(($56+24)&4294967295); //@line 4798 "datetimemodule.c"
        var $58=HEAP[$57]; //@line 4798 "datetimemodule.c"
        var $59=HEAP[$x]; //@line 4798 "datetimemodule.c"
        FUNCTION_TABLE[$58]($59); //@line 4798 "datetimemodule.c"
        __label__ = 16; break; //@line 4798 "datetimemodule.c"
      case 16: // $bb15
        var $60=_new_delta_ex(999999999, 86399, 999999, 0, _PyDateTime_DeltaType); //@line 4800 "datetimemodule.c"
        HEAP[$x]=$60; //@line 4800 "datetimemodule.c"
        var $61=HEAP[$x]; //@line 4801 "datetimemodule.c"
        var $62=($61)==0; //@line 4801 "datetimemodule.c"
        if ($62) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 4801 "datetimemodule.c"
      case 17: // $bb16
        var $63=HEAP[$d]; //@line 4801 "datetimemodule.c"
        var $64=HEAP[$x]; //@line 4801 "datetimemodule.c"
        var $65=_PyDict_SetItemString($63, ((__str273)&4294967295), $64); //@line 4801 "datetimemodule.c"
        var $66=((($65))|0) < 0; //@line 4801 "datetimemodule.c"
        if ($66) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 4801 "datetimemodule.c"
      case 18: // $bb17
        __label__ = 83; break; //@line 4801 "datetimemodule.c"
      case 19: // $bb18
        var $67=HEAP[$x]; //@line 4803 "datetimemodule.c"
        var $68=(($67)&4294967295); //@line 4803 "datetimemodule.c"
        var $69=HEAP[$68]; //@line 4803 "datetimemodule.c"
        var $70=((($69) - 1)&4294967295); //@line 4803 "datetimemodule.c"
        var $71=HEAP[$x]; //@line 4803 "datetimemodule.c"
        var $72=(($71)&4294967295); //@line 4803 "datetimemodule.c"
        HEAP[$72]=$70; //@line 4803 "datetimemodule.c"
        var $73=HEAP[$x]; //@line 4803 "datetimemodule.c"
        var $74=(($73)&4294967295); //@line 4803 "datetimemodule.c"
        var $75=HEAP[$74]; //@line 4803 "datetimemodule.c"
        var $76=((($75))|0)==0; //@line 4803 "datetimemodule.c"
        if ($76) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 4803 "datetimemodule.c"
      case 20: // $bb19
        var $77=HEAP[$x]; //@line 4803 "datetimemodule.c"
        var $78=(($77+4)&4294967295); //@line 4803 "datetimemodule.c"
        var $79=HEAP[$78]; //@line 4803 "datetimemodule.c"
        var $80=(($79+24)&4294967295); //@line 4803 "datetimemodule.c"
        var $81=HEAP[$80]; //@line 4803 "datetimemodule.c"
        var $82=HEAP[$x]; //@line 4803 "datetimemodule.c"
        FUNCTION_TABLE[$81]($82); //@line 4803 "datetimemodule.c"
        __label__ = 21; break; //@line 4803 "datetimemodule.c"
      case 21: // $bb20
        var $83=HEAP[((_PyDateTime_DateType+132)&4294967295)]; //@line 4806 "datetimemodule.c"
        HEAP[$d]=$83; //@line 4806 "datetimemodule.c"
        var $84=_new_date_ex(1, 1, 1, _PyDateTime_DateType); //@line 4808 "datetimemodule.c"
        HEAP[$x]=$84; //@line 4808 "datetimemodule.c"
        var $85=HEAP[$x]; //@line 4809 "datetimemodule.c"
        var $86=($85)==0; //@line 4809 "datetimemodule.c"
        if ($86) { __label__ = 23; break; } else { __label__ = 22; break; } //@line 4809 "datetimemodule.c"
      case 22: // $bb21
        var $87=HEAP[$d]; //@line 4809 "datetimemodule.c"
        var $88=HEAP[$x]; //@line 4809 "datetimemodule.c"
        var $89=_PyDict_SetItemString($87, ((__str272)&4294967295), $88); //@line 4809 "datetimemodule.c"
        var $90=((($89))|0) < 0; //@line 4809 "datetimemodule.c"
        if ($90) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 4809 "datetimemodule.c"
      case 23: // $bb22
        __label__ = 83; break; //@line 4809 "datetimemodule.c"
      case 24: // $bb23
        var $91=HEAP[$x]; //@line 4811 "datetimemodule.c"
        var $92=(($91)&4294967295); //@line 4811 "datetimemodule.c"
        var $93=HEAP[$92]; //@line 4811 "datetimemodule.c"
        var $94=((($93) - 1)&4294967295); //@line 4811 "datetimemodule.c"
        var $95=HEAP[$x]; //@line 4811 "datetimemodule.c"
        var $96=(($95)&4294967295); //@line 4811 "datetimemodule.c"
        HEAP[$96]=$94; //@line 4811 "datetimemodule.c"
        var $97=HEAP[$x]; //@line 4811 "datetimemodule.c"
        var $98=(($97)&4294967295); //@line 4811 "datetimemodule.c"
        var $99=HEAP[$98]; //@line 4811 "datetimemodule.c"
        var $100=((($99))|0)==0; //@line 4811 "datetimemodule.c"
        if ($100) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 4811 "datetimemodule.c"
      case 25: // $bb24
        var $101=HEAP[$x]; //@line 4811 "datetimemodule.c"
        var $102=(($101+4)&4294967295); //@line 4811 "datetimemodule.c"
        var $103=HEAP[$102]; //@line 4811 "datetimemodule.c"
        var $104=(($103+24)&4294967295); //@line 4811 "datetimemodule.c"
        var $105=HEAP[$104]; //@line 4811 "datetimemodule.c"
        var $106=HEAP[$x]; //@line 4811 "datetimemodule.c"
        FUNCTION_TABLE[$105]($106); //@line 4811 "datetimemodule.c"
        __label__ = 26; break; //@line 4811 "datetimemodule.c"
      case 26: // $bb25
        var $107=_new_date_ex(9999, 12, 31, _PyDateTime_DateType); //@line 4813 "datetimemodule.c"
        HEAP[$x]=$107; //@line 4813 "datetimemodule.c"
        var $108=HEAP[$x]; //@line 4814 "datetimemodule.c"
        var $109=($108)==0; //@line 4814 "datetimemodule.c"
        if ($109) { __label__ = 28; break; } else { __label__ = 27; break; } //@line 4814 "datetimemodule.c"
      case 27: // $bb26
        var $110=HEAP[$d]; //@line 4814 "datetimemodule.c"
        var $111=HEAP[$x]; //@line 4814 "datetimemodule.c"
        var $112=_PyDict_SetItemString($110, ((__str273)&4294967295), $111); //@line 4814 "datetimemodule.c"
        var $113=((($112))|0) < 0; //@line 4814 "datetimemodule.c"
        if ($113) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 4814 "datetimemodule.c"
      case 28: // $bb27
        __label__ = 83; break; //@line 4814 "datetimemodule.c"
      case 29: // $bb28
        var $114=HEAP[$x]; //@line 4816 "datetimemodule.c"
        var $115=(($114)&4294967295); //@line 4816 "datetimemodule.c"
        var $116=HEAP[$115]; //@line 4816 "datetimemodule.c"
        var $117=((($116) - 1)&4294967295); //@line 4816 "datetimemodule.c"
        var $118=HEAP[$x]; //@line 4816 "datetimemodule.c"
        var $119=(($118)&4294967295); //@line 4816 "datetimemodule.c"
        HEAP[$119]=$117; //@line 4816 "datetimemodule.c"
        var $120=HEAP[$x]; //@line 4816 "datetimemodule.c"
        var $121=(($120)&4294967295); //@line 4816 "datetimemodule.c"
        var $122=HEAP[$121]; //@line 4816 "datetimemodule.c"
        var $123=((($122))|0)==0; //@line 4816 "datetimemodule.c"
        if ($123) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 4816 "datetimemodule.c"
      case 30: // $bb29
        var $124=HEAP[$x]; //@line 4816 "datetimemodule.c"
        var $125=(($124+4)&4294967295); //@line 4816 "datetimemodule.c"
        var $126=HEAP[$125]; //@line 4816 "datetimemodule.c"
        var $127=(($126+24)&4294967295); //@line 4816 "datetimemodule.c"
        var $128=HEAP[$127]; //@line 4816 "datetimemodule.c"
        var $129=HEAP[$x]; //@line 4816 "datetimemodule.c"
        FUNCTION_TABLE[$128]($129); //@line 4816 "datetimemodule.c"
        __label__ = 31; break; //@line 4816 "datetimemodule.c"
      case 31: // $bb30
        var $130=_new_delta_ex(1, 0, 0, 0, _PyDateTime_DeltaType); //@line 4818 "datetimemodule.c"
        HEAP[$x]=$130; //@line 4818 "datetimemodule.c"
        var $131=HEAP[$x]; //@line 4819 "datetimemodule.c"
        var $132=($131)==0; //@line 4819 "datetimemodule.c"
        if ($132) { __label__ = 33; break; } else { __label__ = 32; break; } //@line 4819 "datetimemodule.c"
      case 32: // $bb31
        var $133=HEAP[$d]; //@line 4819 "datetimemodule.c"
        var $134=HEAP[$x]; //@line 4819 "datetimemodule.c"
        var $135=_PyDict_SetItemString($133, ((__str271)&4294967295), $134); //@line 4819 "datetimemodule.c"
        var $136=((($135))|0) < 0; //@line 4819 "datetimemodule.c"
        if ($136) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 4819 "datetimemodule.c"
      case 33: // $bb32
        __label__ = 83; break; //@line 4819 "datetimemodule.c"
      case 34: // $bb33
        var $137=HEAP[$x]; //@line 4821 "datetimemodule.c"
        var $138=(($137)&4294967295); //@line 4821 "datetimemodule.c"
        var $139=HEAP[$138]; //@line 4821 "datetimemodule.c"
        var $140=((($139) - 1)&4294967295); //@line 4821 "datetimemodule.c"
        var $141=HEAP[$x]; //@line 4821 "datetimemodule.c"
        var $142=(($141)&4294967295); //@line 4821 "datetimemodule.c"
        HEAP[$142]=$140; //@line 4821 "datetimemodule.c"
        var $143=HEAP[$x]; //@line 4821 "datetimemodule.c"
        var $144=(($143)&4294967295); //@line 4821 "datetimemodule.c"
        var $145=HEAP[$144]; //@line 4821 "datetimemodule.c"
        var $146=((($145))|0)==0; //@line 4821 "datetimemodule.c"
        if ($146) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 4821 "datetimemodule.c"
      case 35: // $bb34
        var $147=HEAP[$x]; //@line 4821 "datetimemodule.c"
        var $148=(($147+4)&4294967295); //@line 4821 "datetimemodule.c"
        var $149=HEAP[$148]; //@line 4821 "datetimemodule.c"
        var $150=(($149+24)&4294967295); //@line 4821 "datetimemodule.c"
        var $151=HEAP[$150]; //@line 4821 "datetimemodule.c"
        var $152=HEAP[$x]; //@line 4821 "datetimemodule.c"
        FUNCTION_TABLE[$151]($152); //@line 4821 "datetimemodule.c"
        __label__ = 36; break; //@line 4821 "datetimemodule.c"
      case 36: // $bb35
        var $153=HEAP[((_PyDateTime_TimeType+132)&4294967295)]; //@line 4824 "datetimemodule.c"
        HEAP[$d]=$153; //@line 4824 "datetimemodule.c"
        var $154=_new_time_ex(0, 0, 0, 0, __Py_NoneStruct, _PyDateTime_TimeType); //@line 4826 "datetimemodule.c"
        HEAP[$x]=$154; //@line 4826 "datetimemodule.c"
        var $155=HEAP[$x]; //@line 4827 "datetimemodule.c"
        var $156=($155)==0; //@line 4827 "datetimemodule.c"
        if ($156) { __label__ = 38; break; } else { __label__ = 37; break; } //@line 4827 "datetimemodule.c"
      case 37: // $bb36
        var $157=HEAP[$d]; //@line 4827 "datetimemodule.c"
        var $158=HEAP[$x]; //@line 4827 "datetimemodule.c"
        var $159=_PyDict_SetItemString($157, ((__str272)&4294967295), $158); //@line 4827 "datetimemodule.c"
        var $160=((($159))|0) < 0; //@line 4827 "datetimemodule.c"
        if ($160) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 4827 "datetimemodule.c"
      case 38: // $bb37
        __label__ = 83; break; //@line 4827 "datetimemodule.c"
      case 39: // $bb38
        var $161=HEAP[$x]; //@line 4829 "datetimemodule.c"
        var $162=(($161)&4294967295); //@line 4829 "datetimemodule.c"
        var $163=HEAP[$162]; //@line 4829 "datetimemodule.c"
        var $164=((($163) - 1)&4294967295); //@line 4829 "datetimemodule.c"
        var $165=HEAP[$x]; //@line 4829 "datetimemodule.c"
        var $166=(($165)&4294967295); //@line 4829 "datetimemodule.c"
        HEAP[$166]=$164; //@line 4829 "datetimemodule.c"
        var $167=HEAP[$x]; //@line 4829 "datetimemodule.c"
        var $168=(($167)&4294967295); //@line 4829 "datetimemodule.c"
        var $169=HEAP[$168]; //@line 4829 "datetimemodule.c"
        var $170=((($169))|0)==0; //@line 4829 "datetimemodule.c"
        if ($170) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 4829 "datetimemodule.c"
      case 40: // $bb39
        var $171=HEAP[$x]; //@line 4829 "datetimemodule.c"
        var $172=(($171+4)&4294967295); //@line 4829 "datetimemodule.c"
        var $173=HEAP[$172]; //@line 4829 "datetimemodule.c"
        var $174=(($173+24)&4294967295); //@line 4829 "datetimemodule.c"
        var $175=HEAP[$174]; //@line 4829 "datetimemodule.c"
        var $176=HEAP[$x]; //@line 4829 "datetimemodule.c"
        FUNCTION_TABLE[$175]($176); //@line 4829 "datetimemodule.c"
        __label__ = 41; break; //@line 4829 "datetimemodule.c"
      case 41: // $bb40
        var $177=_new_time_ex(23, 59, 59, 999999, __Py_NoneStruct, _PyDateTime_TimeType); //@line 4831 "datetimemodule.c"
        HEAP[$x]=$177; //@line 4831 "datetimemodule.c"
        var $178=HEAP[$x]; //@line 4832 "datetimemodule.c"
        var $179=($178)==0; //@line 4832 "datetimemodule.c"
        if ($179) { __label__ = 43; break; } else { __label__ = 42; break; } //@line 4832 "datetimemodule.c"
      case 42: // $bb41
        var $180=HEAP[$d]; //@line 4832 "datetimemodule.c"
        var $181=HEAP[$x]; //@line 4832 "datetimemodule.c"
        var $182=_PyDict_SetItemString($180, ((__str273)&4294967295), $181); //@line 4832 "datetimemodule.c"
        var $183=((($182))|0) < 0; //@line 4832 "datetimemodule.c"
        if ($183) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 4832 "datetimemodule.c"
      case 43: // $bb42
        __label__ = 83; break; //@line 4832 "datetimemodule.c"
      case 44: // $bb43
        var $184=HEAP[$x]; //@line 4834 "datetimemodule.c"
        var $185=(($184)&4294967295); //@line 4834 "datetimemodule.c"
        var $186=HEAP[$185]; //@line 4834 "datetimemodule.c"
        var $187=((($186) - 1)&4294967295); //@line 4834 "datetimemodule.c"
        var $188=HEAP[$x]; //@line 4834 "datetimemodule.c"
        var $189=(($188)&4294967295); //@line 4834 "datetimemodule.c"
        HEAP[$189]=$187; //@line 4834 "datetimemodule.c"
        var $190=HEAP[$x]; //@line 4834 "datetimemodule.c"
        var $191=(($190)&4294967295); //@line 4834 "datetimemodule.c"
        var $192=HEAP[$191]; //@line 4834 "datetimemodule.c"
        var $193=((($192))|0)==0; //@line 4834 "datetimemodule.c"
        if ($193) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 4834 "datetimemodule.c"
      case 45: // $bb44
        var $194=HEAP[$x]; //@line 4834 "datetimemodule.c"
        var $195=(($194+4)&4294967295); //@line 4834 "datetimemodule.c"
        var $196=HEAP[$195]; //@line 4834 "datetimemodule.c"
        var $197=(($196+24)&4294967295); //@line 4834 "datetimemodule.c"
        var $198=HEAP[$197]; //@line 4834 "datetimemodule.c"
        var $199=HEAP[$x]; //@line 4834 "datetimemodule.c"
        FUNCTION_TABLE[$198]($199); //@line 4834 "datetimemodule.c"
        __label__ = 46; break; //@line 4834 "datetimemodule.c"
      case 46: // $bb45
        var $200=_new_delta_ex(0, 0, 1, 0, _PyDateTime_DeltaType); //@line 4836 "datetimemodule.c"
        HEAP[$x]=$200; //@line 4836 "datetimemodule.c"
        var $201=HEAP[$x]; //@line 4837 "datetimemodule.c"
        var $202=($201)==0; //@line 4837 "datetimemodule.c"
        if ($202) { __label__ = 48; break; } else { __label__ = 47; break; } //@line 4837 "datetimemodule.c"
      case 47: // $bb46
        var $203=HEAP[$d]; //@line 4837 "datetimemodule.c"
        var $204=HEAP[$x]; //@line 4837 "datetimemodule.c"
        var $205=_PyDict_SetItemString($203, ((__str271)&4294967295), $204); //@line 4837 "datetimemodule.c"
        var $206=((($205))|0) < 0; //@line 4837 "datetimemodule.c"
        if ($206) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 4837 "datetimemodule.c"
      case 48: // $bb47
        __label__ = 83; break; //@line 4837 "datetimemodule.c"
      case 49: // $bb48
        var $207=HEAP[$x]; //@line 4839 "datetimemodule.c"
        var $208=(($207)&4294967295); //@line 4839 "datetimemodule.c"
        var $209=HEAP[$208]; //@line 4839 "datetimemodule.c"
        var $210=((($209) - 1)&4294967295); //@line 4839 "datetimemodule.c"
        var $211=HEAP[$x]; //@line 4839 "datetimemodule.c"
        var $212=(($211)&4294967295); //@line 4839 "datetimemodule.c"
        HEAP[$212]=$210; //@line 4839 "datetimemodule.c"
        var $213=HEAP[$x]; //@line 4839 "datetimemodule.c"
        var $214=(($213)&4294967295); //@line 4839 "datetimemodule.c"
        var $215=HEAP[$214]; //@line 4839 "datetimemodule.c"
        var $216=((($215))|0)==0; //@line 4839 "datetimemodule.c"
        if ($216) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 4839 "datetimemodule.c"
      case 50: // $bb49
        var $217=HEAP[$x]; //@line 4839 "datetimemodule.c"
        var $218=(($217+4)&4294967295); //@line 4839 "datetimemodule.c"
        var $219=HEAP[$218]; //@line 4839 "datetimemodule.c"
        var $220=(($219+24)&4294967295); //@line 4839 "datetimemodule.c"
        var $221=HEAP[$220]; //@line 4839 "datetimemodule.c"
        var $222=HEAP[$x]; //@line 4839 "datetimemodule.c"
        FUNCTION_TABLE[$221]($222); //@line 4839 "datetimemodule.c"
        __label__ = 51; break; //@line 4839 "datetimemodule.c"
      case 51: // $bb50
        var $223=HEAP[((_PyDateTime_DateTimeType+132)&4294967295)]; //@line 4842 "datetimemodule.c"
        HEAP[$d]=$223; //@line 4842 "datetimemodule.c"
        var $224=_new_datetime_ex(1, 1, 1, 0, 0, 0, 0, __Py_NoneStruct, _PyDateTime_DateTimeType); //@line 4844 "datetimemodule.c"
        HEAP[$x]=$224; //@line 4844 "datetimemodule.c"
        var $225=HEAP[$x]; //@line 4845 "datetimemodule.c"
        var $226=($225)==0; //@line 4845 "datetimemodule.c"
        if ($226) { __label__ = 53; break; } else { __label__ = 52; break; } //@line 4845 "datetimemodule.c"
      case 52: // $bb51
        var $227=HEAP[$d]; //@line 4845 "datetimemodule.c"
        var $228=HEAP[$x]; //@line 4845 "datetimemodule.c"
        var $229=_PyDict_SetItemString($227, ((__str272)&4294967295), $228); //@line 4845 "datetimemodule.c"
        var $230=((($229))|0) < 0; //@line 4845 "datetimemodule.c"
        if ($230) { __label__ = 53; break; } else { __label__ = 54; break; } //@line 4845 "datetimemodule.c"
      case 53: // $bb52
        __label__ = 83; break; //@line 4845 "datetimemodule.c"
      case 54: // $bb53
        var $231=HEAP[$x]; //@line 4847 "datetimemodule.c"
        var $232=(($231)&4294967295); //@line 4847 "datetimemodule.c"
        var $233=HEAP[$232]; //@line 4847 "datetimemodule.c"
        var $234=((($233) - 1)&4294967295); //@line 4847 "datetimemodule.c"
        var $235=HEAP[$x]; //@line 4847 "datetimemodule.c"
        var $236=(($235)&4294967295); //@line 4847 "datetimemodule.c"
        HEAP[$236]=$234; //@line 4847 "datetimemodule.c"
        var $237=HEAP[$x]; //@line 4847 "datetimemodule.c"
        var $238=(($237)&4294967295); //@line 4847 "datetimemodule.c"
        var $239=HEAP[$238]; //@line 4847 "datetimemodule.c"
        var $240=((($239))|0)==0; //@line 4847 "datetimemodule.c"
        if ($240) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 4847 "datetimemodule.c"
      case 55: // $bb54
        var $241=HEAP[$x]; //@line 4847 "datetimemodule.c"
        var $242=(($241+4)&4294967295); //@line 4847 "datetimemodule.c"
        var $243=HEAP[$242]; //@line 4847 "datetimemodule.c"
        var $244=(($243+24)&4294967295); //@line 4847 "datetimemodule.c"
        var $245=HEAP[$244]; //@line 4847 "datetimemodule.c"
        var $246=HEAP[$x]; //@line 4847 "datetimemodule.c"
        FUNCTION_TABLE[$245]($246); //@line 4847 "datetimemodule.c"
        __label__ = 56; break; //@line 4847 "datetimemodule.c"
      case 56: // $bb55
        var $247=_new_datetime_ex(9999, 12, 31, 23, 59, 59, 999999, __Py_NoneStruct, _PyDateTime_DateTimeType); //@line 4849 "datetimemodule.c"
        HEAP[$x]=$247; //@line 4849 "datetimemodule.c"
        var $248=HEAP[$x]; //@line 4850 "datetimemodule.c"
        var $249=($248)==0; //@line 4850 "datetimemodule.c"
        if ($249) { __label__ = 58; break; } else { __label__ = 57; break; } //@line 4850 "datetimemodule.c"
      case 57: // $bb56
        var $250=HEAP[$d]; //@line 4850 "datetimemodule.c"
        var $251=HEAP[$x]; //@line 4850 "datetimemodule.c"
        var $252=_PyDict_SetItemString($250, ((__str273)&4294967295), $251); //@line 4850 "datetimemodule.c"
        var $253=((($252))|0) < 0; //@line 4850 "datetimemodule.c"
        if ($253) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 4850 "datetimemodule.c"
      case 58: // $bb57
        __label__ = 83; break; //@line 4850 "datetimemodule.c"
      case 59: // $bb58
        var $254=HEAP[$x]; //@line 4852 "datetimemodule.c"
        var $255=(($254)&4294967295); //@line 4852 "datetimemodule.c"
        var $256=HEAP[$255]; //@line 4852 "datetimemodule.c"
        var $257=((($256) - 1)&4294967295); //@line 4852 "datetimemodule.c"
        var $258=HEAP[$x]; //@line 4852 "datetimemodule.c"
        var $259=(($258)&4294967295); //@line 4852 "datetimemodule.c"
        HEAP[$259]=$257; //@line 4852 "datetimemodule.c"
        var $260=HEAP[$x]; //@line 4852 "datetimemodule.c"
        var $261=(($260)&4294967295); //@line 4852 "datetimemodule.c"
        var $262=HEAP[$261]; //@line 4852 "datetimemodule.c"
        var $263=((($262))|0)==0; //@line 4852 "datetimemodule.c"
        if ($263) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 4852 "datetimemodule.c"
      case 60: // $bb59
        var $264=HEAP[$x]; //@line 4852 "datetimemodule.c"
        var $265=(($264+4)&4294967295); //@line 4852 "datetimemodule.c"
        var $266=HEAP[$265]; //@line 4852 "datetimemodule.c"
        var $267=(($266+24)&4294967295); //@line 4852 "datetimemodule.c"
        var $268=HEAP[$267]; //@line 4852 "datetimemodule.c"
        var $269=HEAP[$x]; //@line 4852 "datetimemodule.c"
        FUNCTION_TABLE[$268]($269); //@line 4852 "datetimemodule.c"
        __label__ = 61; break; //@line 4852 "datetimemodule.c"
      case 61: // $bb60
        var $270=_new_delta_ex(0, 0, 1, 0, _PyDateTime_DeltaType); //@line 4854 "datetimemodule.c"
        HEAP[$x]=$270; //@line 4854 "datetimemodule.c"
        var $271=HEAP[$x]; //@line 4855 "datetimemodule.c"
        var $272=($271)==0; //@line 4855 "datetimemodule.c"
        if ($272) { __label__ = 63; break; } else { __label__ = 62; break; } //@line 4855 "datetimemodule.c"
      case 62: // $bb61
        var $273=HEAP[$d]; //@line 4855 "datetimemodule.c"
        var $274=HEAP[$x]; //@line 4855 "datetimemodule.c"
        var $275=_PyDict_SetItemString($273, ((__str271)&4294967295), $274); //@line 4855 "datetimemodule.c"
        var $276=((($275))|0) < 0; //@line 4855 "datetimemodule.c"
        if ($276) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 4855 "datetimemodule.c"
      case 63: // $bb62
        __label__ = 83; break; //@line 4855 "datetimemodule.c"
      case 64: // $bb63
        var $277=HEAP[$x]; //@line 4857 "datetimemodule.c"
        var $278=(($277)&4294967295); //@line 4857 "datetimemodule.c"
        var $279=HEAP[$278]; //@line 4857 "datetimemodule.c"
        var $280=((($279) - 1)&4294967295); //@line 4857 "datetimemodule.c"
        var $281=HEAP[$x]; //@line 4857 "datetimemodule.c"
        var $282=(($281)&4294967295); //@line 4857 "datetimemodule.c"
        HEAP[$282]=$280; //@line 4857 "datetimemodule.c"
        var $283=HEAP[$x]; //@line 4857 "datetimemodule.c"
        var $284=(($283)&4294967295); //@line 4857 "datetimemodule.c"
        var $285=HEAP[$284]; //@line 4857 "datetimemodule.c"
        var $286=((($285))|0)==0; //@line 4857 "datetimemodule.c"
        if ($286) { __label__ = 65; break; } else { __label__ = 66; break; } //@line 4857 "datetimemodule.c"
      case 65: // $bb64
        var $287=HEAP[$x]; //@line 4857 "datetimemodule.c"
        var $288=(($287+4)&4294967295); //@line 4857 "datetimemodule.c"
        var $289=HEAP[$288]; //@line 4857 "datetimemodule.c"
        var $290=(($289+24)&4294967295); //@line 4857 "datetimemodule.c"
        var $291=HEAP[$290]; //@line 4857 "datetimemodule.c"
        var $292=HEAP[$x]; //@line 4857 "datetimemodule.c"
        FUNCTION_TABLE[$291]($292); //@line 4857 "datetimemodule.c"
        __label__ = 66; break; //@line 4857 "datetimemodule.c"
      case 66: // $bb65
        var $293=HEAP[$m]; //@line 4860 "datetimemodule.c"
        var $294=_PyModule_AddIntConstant($293, ((__str274)&4294967295), 1); //@line 4860 "datetimemodule.c"
        var $295=HEAP[$m]; //@line 4861 "datetimemodule.c"
        var $296=_PyModule_AddIntConstant($295, ((__str275)&4294967295), 9999); //@line 4861 "datetimemodule.c"
        var $297=((_PyDateTime_DateType)&4294967295); //@line 4863 "datetimemodule.c"
        var $298=HEAP[$297]; //@line 4863 "datetimemodule.c"
        var $299=((($298) + 1)&4294967295); //@line 4863 "datetimemodule.c"
        var $300=((_PyDateTime_DateType)&4294967295); //@line 4863 "datetimemodule.c"
        HEAP[$300]=$299; //@line 4863 "datetimemodule.c"
        var $301=HEAP[$m]; //@line 4864 "datetimemodule.c"
        var $302=_PyModule_AddObject($301, ((__str232)&4294967295), _PyDateTime_DateType); //@line 4864 "datetimemodule.c"
        var $303=((_PyDateTime_DateTimeType)&4294967295); //@line 4866 "datetimemodule.c"
        var $304=HEAP[$303]; //@line 4866 "datetimemodule.c"
        var $305=((($304) + 1)&4294967295); //@line 4866 "datetimemodule.c"
        var $306=((_PyDateTime_DateTimeType)&4294967295); //@line 4866 "datetimemodule.c"
        HEAP[$306]=$305; //@line 4866 "datetimemodule.c"
        var $307=HEAP[$m]; //@line 4867 "datetimemodule.c"
        var $308=_PyModule_AddObject($307, ((__str269)&4294967295), _PyDateTime_DateTimeType); //@line 4867 "datetimemodule.c"
        var $309=((_PyDateTime_TimeType)&4294967295); //@line 4870 "datetimemodule.c"
        var $310=HEAP[$309]; //@line 4870 "datetimemodule.c"
        var $311=((($310) + 1)&4294967295); //@line 4870 "datetimemodule.c"
        var $312=((_PyDateTime_TimeType)&4294967295); //@line 4870 "datetimemodule.c"
        HEAP[$312]=$311; //@line 4870 "datetimemodule.c"
        var $313=HEAP[$m]; //@line 4871 "datetimemodule.c"
        var $314=_PyModule_AddObject($313, ((__str92)&4294967295), _PyDateTime_TimeType); //@line 4871 "datetimemodule.c"
        var $315=((_PyDateTime_DeltaType)&4294967295); //@line 4873 "datetimemodule.c"
        var $316=HEAP[$315]; //@line 4873 "datetimemodule.c"
        var $317=((($316) + 1)&4294967295); //@line 4873 "datetimemodule.c"
        var $318=((_PyDateTime_DeltaType)&4294967295); //@line 4873 "datetimemodule.c"
        HEAP[$318]=$317; //@line 4873 "datetimemodule.c"
        var $319=HEAP[$m]; //@line 4874 "datetimemodule.c"
        var $320=_PyModule_AddObject($319, ((__str276)&4294967295), _PyDateTime_DeltaType); //@line 4874 "datetimemodule.c"
        var $321=((_PyDateTime_TZInfoType)&4294967295); //@line 4876 "datetimemodule.c"
        var $322=HEAP[$321]; //@line 4876 "datetimemodule.c"
        var $323=((($322) + 1)&4294967295); //@line 4876 "datetimemodule.c"
        var $324=((_PyDateTime_TZInfoType)&4294967295); //@line 4876 "datetimemodule.c"
        HEAP[$324]=$323; //@line 4876 "datetimemodule.c"
        var $325=HEAP[$m]; //@line 4877 "datetimemodule.c"
        var $326=_PyModule_AddObject($325, ((__str48)&4294967295), _PyDateTime_TZInfoType); //@line 4877 "datetimemodule.c"
        var $327=_PyCapsule_New(_CAPI, ((__str277)&4294967295), 0); //@line 4879 "datetimemodule.c"
        HEAP[$x]=$327; //@line 4879 "datetimemodule.c"
        var $328=HEAP[$x]; //@line 4880 "datetimemodule.c"
        var $329=($328)==0; //@line 4880 "datetimemodule.c"
        if ($329) { __label__ = 83; break; } else { __label__ = 67; break; } //@line 4880 "datetimemodule.c"
      case 67: // $bb66
        var $330=HEAP[$m]; //@line 4882 "datetimemodule.c"
        var $331=HEAP[$x]; //@line 4882 "datetimemodule.c"
        var $332=_PyModule_AddObject($330, ((__str278)&4294967295), $331); //@line 4882 "datetimemodule.c"
        var $333=_days_before_year(5); //@line 4888 "datetimemodule.c"
        var $334=((($333))|0)!=1461; //@line 4888 "datetimemodule.c"
        if ($334) { __label__ = 68; break; } else { __label__ = 69; break; } //@line 4888 "datetimemodule.c"
      case 68: // $bb67
        ___assert_fail(((__str279)&4294967295), ((__str1)&4294967295), 4888, ((___PRETTY_FUNCTION___14028)&4294967295)); //@line 4888 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 17843"; //@line 4888 "datetimemodule.c"
      case 69: // $bb68
        var $335=_days_before_year(401); //@line 4894 "datetimemodule.c"
        var $336=((($335))|0)!=146097; //@line 4894 "datetimemodule.c"
        if ($336) { __label__ = 70; break; } else { __label__ = 71; break; } //@line 4894 "datetimemodule.c"
      case 70: // $bb69
        ___assert_fail(((__str280)&4294967295), ((__str1)&4294967295), 4894, ((___PRETTY_FUNCTION___14028)&4294967295)); //@line 4894 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 17852"; //@line 4894 "datetimemodule.c"
      case 71: // $bb70
        var $337=_days_before_year(101); //@line 4900 "datetimemodule.c"
        var $338=((($337))|0)!=36524; //@line 4900 "datetimemodule.c"
        if ($338) { __label__ = 72; break; } else { __label__ = 73; break; } //@line 4900 "datetimemodule.c"
      case 72: // $bb71
        ___assert_fail(((__str281)&4294967295), ((__str1)&4294967295), 4900, ((___PRETTY_FUNCTION___14028)&4294967295)); //@line 4900 "datetimemodule.c"
        throw "Reached an unreachable! Original .ll line: 17861"; //@line 4900 "datetimemodule.c"
      case 73: // $bb72
        var $339=_PyInt_FromLong(1); //@line 4902 "datetimemodule.c"
        HEAP[_us_per_us]=$339; //@line 4902 "datetimemodule.c"
        var $340=_PyInt_FromLong(1000); //@line 4903 "datetimemodule.c"
        HEAP[_us_per_ms]=$340; //@line 4903 "datetimemodule.c"
        var $341=_PyInt_FromLong(1000000); //@line 4904 "datetimemodule.c"
        HEAP[_us_per_second]=$341; //@line 4904 "datetimemodule.c"
        var $342=_PyInt_FromLong(60000000); //@line 4905 "datetimemodule.c"
        HEAP[_us_per_minute]=$342; //@line 4905 "datetimemodule.c"
        var $343=_PyInt_FromLong(86400); //@line 4906 "datetimemodule.c"
        HEAP[_seconds_per_day]=$343; //@line 4906 "datetimemodule.c"
        var $344=HEAP[_us_per_us]; //@line 4907 "datetimemodule.c"
        var $345=($344)==0; //@line 4907 "datetimemodule.c"
        if ($345) { __label__ = 78; break; } else { __label__ = 74; break; } //@line 4907 "datetimemodule.c"
      case 74: // $bb73
        var $346=HEAP[_us_per_ms]; //@line 4907 "datetimemodule.c"
        var $347=($346)==0; //@line 4907 "datetimemodule.c"
        if ($347) { __label__ = 78; break; } else { __label__ = 75; break; } //@line 4907 "datetimemodule.c"
      case 75: // $bb74
        var $348=HEAP[_us_per_second]; //@line 4907 "datetimemodule.c"
        var $349=($348)==0; //@line 4907 "datetimemodule.c"
        if ($349) { __label__ = 78; break; } else { __label__ = 76; break; } //@line 4907 "datetimemodule.c"
      case 76: // $bb75
        var $350=HEAP[_us_per_minute]; //@line 4907 "datetimemodule.c"
        var $351=($350)==0; //@line 4907 "datetimemodule.c"
        if ($351) { __label__ = 78; break; } else { __label__ = 77; break; } //@line 4907 "datetimemodule.c"
      case 77: // $bb76
        var $352=HEAP[_seconds_per_day]; //@line 4907 "datetimemodule.c"
        var $353=($352)==0; //@line 4907 "datetimemodule.c"
        if ($353) { __label__ = 78; break; } else { __label__ = 79; break; } //@line 4907 "datetimemodule.c"
      case 78: // $bb77
        __label__ = 83; break; //@line 4907 "datetimemodule.c"
      case 79: // $bb78
        var $354=_PyLong_FromDouble(3600000000); //@line 4914 "datetimemodule.c"
        HEAP[_us_per_hour]=$354; //@line 4914 "datetimemodule.c"
        var $355=_PyLong_FromDouble(86400000000); //@line 4915 "datetimemodule.c"
        HEAP[_us_per_day]=$355; //@line 4915 "datetimemodule.c"
        var $356=_PyLong_FromDouble(604800000000); //@line 4916 "datetimemodule.c"
        HEAP[_us_per_week]=$356; //@line 4916 "datetimemodule.c"
        var $357=HEAP[_us_per_hour]; //@line 4917 "datetimemodule.c"
        var $358=($357)==0; //@line 4917 "datetimemodule.c"
        if ($358) { __label__ = 82; break; } else { __label__ = 80; break; } //@line 4917 "datetimemodule.c"
      case 80: // $bb79
        var $359=HEAP[_us_per_day]; //@line 4917 "datetimemodule.c"
        var $360=($359)==0; //@line 4917 "datetimemodule.c"
        if ($360) { __label__ = 82; break; } else { __label__ = 81; break; } //@line 4917 "datetimemodule.c"
      case 81: // $bb80
        var $361=HEAP[_us_per_week]; //@line 4917 "datetimemodule.c"
        var $362=($361)==0; //@line 4917 "datetimemodule.c"
        if ($362) { __label__ = 82; break; } else { __label__ = 83; break; } //@line 4917 "datetimemodule.c"
      case 82: // $bb81
        __label__ = 83; break; //@line 4917 "datetimemodule.c"
      case 83: // $bb82
        __label__ = 84; break; //@line 4774 "datetimemodule.c"
      case 84: // $return
        STACKTOP = __stackBase__;
        return; //@line 4774 "datetimemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  Module["_initdatetime"] = _initdatetime;

  function __PyTime_DoubleToTimet($x) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $x_addr=__stackBase__;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $result=__stackBase__+16;
        var $diff=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$x_addr]=$x;
        var $1=HEAP[$x_addr]; //@line 108 "timemodule.c"
        var $2=((($1))|0); //@line 108 "timemodule.c"
        HEAP[$result]=$2; //@line 108 "timemodule.c"
        var $3=HEAP[$result]; //@line 118 "timemodule.c"
        var $4=((($3))|0); //@line 118 "timemodule.c"
        var $5=HEAP[$x_addr]; //@line 118 "timemodule.c"
        var $6=($5) - ($4); //@line 118 "timemodule.c"
        HEAP[$diff]=$6; //@line 118 "timemodule.c"
        var $7=HEAP[$diff]; //@line 119 "timemodule.c"
        var $8=($7) <= -1; //@line 119 "timemodule.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 119 "timemodule.c"
      case 1: // $bb
        var $9=HEAP[$diff]; //@line 119 "timemodule.c"
        var $10=($9) >= 1; //@line 119 "timemodule.c"
        if ($10) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 119 "timemodule.c"
      case 2: // $bb1
        var $11=HEAP[_PyExc_ValueError]; //@line 120 "timemodule.c"
        _PyErr_SetString($11, ((__str282)&4294967295)); //@line 120 "timemodule.c"
        HEAP[$result]=-1; //@line 122 "timemodule.c"
        __label__ = 3; break; //@line 122 "timemodule.c"
      case 3: // $bb2
        var $12=HEAP[$result]; //@line 124 "timemodule.c"
        HEAP[$0]=$12; //@line 124 "timemodule.c"
        var $13=HEAP[$0]; //@line 124 "timemodule.c"
        HEAP[$retval]=$13; //@line 124 "timemodule.c"
        __label__ = 4; break; //@line 124 "timemodule.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 124 "timemodule.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 124 "timemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_time346($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $unused_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $secs=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$unused_addr]=$unused;
        var $1=_floattime(); //@line 131 "timemodule.c"
        HEAP[$secs]=$1; //@line 131 "timemodule.c"
        var $2=HEAP[$secs]; //@line 132 "timemodule.c"
        var $3=($2) == 0; //@line 132 "timemodule.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 132 "timemodule.c"
      case 1: // $bb
        var $4=HEAP[_PyExc_IOError]; //@line 133 "timemodule.c"
        var $5=_PyErr_SetFromErrno($4); //@line 133 "timemodule.c"
        HEAP[$0]=0; //@line 134 "timemodule.c"
        __label__ = 3; break; //@line 134 "timemodule.c"
      case 2: // $bb1
        var $6=HEAP[$secs]; //@line 136 "timemodule.c"
        var $7=_PyFloat_FromDouble($6); //@line 136 "timemodule.c"
        HEAP[$0]=$7; //@line 136 "timemodule.c"
        __label__ = 3; break; //@line 136 "timemodule.c"
      case 3: // $bb2
        var $8=HEAP[$0]; //@line 134 "timemodule.c"
        HEAP[$retval]=$8; //@line 134 "timemodule.c"
        __label__ = 4; break; //@line 134 "timemodule.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 134 "timemodule.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 134 "timemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_clock($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $unused_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$unused_addr]=$unused;
        var $1=_clock(); //@line 158 "timemodule.c"
        var $2=((($1))|0); //@line 158 "timemodule.c"
        var $3=($2) / 1000000; //@line 158 "timemodule.c"
        var $4=_PyFloat_FromDouble($3); //@line 158 "timemodule.c"
        HEAP[$0]=$4; //@line 158 "timemodule.c"
        var $5=HEAP[$0]; //@line 158 "timemodule.c"
        HEAP[$retval]=$5; //@line 158 "timemodule.c"
        __label__ = 1; break; //@line 158 "timemodule.c"
      case 1: // $return
        var $retval1=HEAP[$retval]; //@line 158 "timemodule.c"
        STACKTOP = __stackBase__;
        return $retval1; //@line 158 "timemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_sleep($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $secs=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$args_addr]; //@line 204 "timemodule.c"
        var $2=_PyArg_ParseTuple($1, ((__str1284)&4294967295), $secs); //@line 204 "timemodule.c"
        var $3=((($2))|0)==0; //@line 204 "timemodule.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 204 "timemodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 205 "timemodule.c"
        __label__ = 5; break; //@line 205 "timemodule.c"
      case 2: // $bb1
        var $4=HEAP[$secs]; //@line 206 "timemodule.c"
        var $5=_floatsleep($4); //@line 206 "timemodule.c"
        var $6=((($5))|0)!=0; //@line 206 "timemodule.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 206 "timemodule.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 207 "timemodule.c"
        __label__ = 5; break; //@line 207 "timemodule.c"
      case 4: // $bb3
        var $7=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 208 "timemodule.c"
        var $8=((($7) + 1)&4294967295); //@line 208 "timemodule.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$8; //@line 208 "timemodule.c"
        HEAP[$0]=__Py_NoneStruct; //@line 209 "timemodule.c"
        __label__ = 5; break; //@line 209 "timemodule.c"
      case 5: // $bb4
        var $9=HEAP[$0]; //@line 205 "timemodule.c"
        HEAP[$retval]=$9; //@line 205 "timemodule.c"
        __label__ = 6; break; //@line 205 "timemodule.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 205 "timemodule.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 205 "timemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _tmtotuple($p) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $p_addr=__stackBase__;
        var $retval=__stackBase__+4;
        var $0=__stackBase__+8;
        var $v=__stackBase__+12;
        var $_alloca_point_=0;
        HEAP[$p_addr]=$p;
        var $1=_PyStructSequence_New(_StructTimeType); //@line 250 "timemodule.c"
        HEAP[$v]=$1; //@line 250 "timemodule.c"
        var $2=HEAP[$v]; //@line 251 "timemodule.c"
        var $3=($2)==0; //@line 251 "timemodule.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 251 "timemodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 252 "timemodule.c"
        __label__ = 8; break; //@line 252 "timemodule.c"
      case 2: // $bb1
        var $4=HEAP[$v]; //@line 256 "timemodule.c"
        var $5=$4; //@line 256 "timemodule.c"
        var $6=HEAP[$p_addr]; //@line 256 "timemodule.c"
        var $7=(($6+20)&4294967295); //@line 256 "timemodule.c"
        var $8=HEAP[$7]; //@line 256 "timemodule.c"
        var $9=((($8) + 1900)&4294967295); //@line 256 "timemodule.c"
        var $10=_PyInt_FromLong($9); //@line 256 "timemodule.c"
        var $11=(($5+12)&4294967295); //@line 256 "timemodule.c"
        var $12=(($11)&4294967295); //@line 256 "timemodule.c"
        HEAP[$12]=$10; //@line 256 "timemodule.c"
        var $13=HEAP[$v]; //@line 257 "timemodule.c"
        var $14=$13; //@line 257 "timemodule.c"
        var $15=HEAP[$p_addr]; //@line 257 "timemodule.c"
        var $16=(($15+16)&4294967295); //@line 257 "timemodule.c"
        var $17=HEAP[$16]; //@line 257 "timemodule.c"
        var $18=((($17) + 1)&4294967295); //@line 257 "timemodule.c"
        var $19=_PyInt_FromLong($18); //@line 257 "timemodule.c"
        var $20=(($14+12)&4294967295); //@line 257 "timemodule.c"
        var $21=(($20+4)&4294967295); //@line 257 "timemodule.c"
        HEAP[$21]=$19; //@line 257 "timemodule.c"
        var $22=HEAP[$v]; //@line 258 "timemodule.c"
        var $23=$22; //@line 258 "timemodule.c"
        var $24=HEAP[$p_addr]; //@line 258 "timemodule.c"
        var $25=(($24+12)&4294967295); //@line 258 "timemodule.c"
        var $26=HEAP[$25]; //@line 258 "timemodule.c"
        var $27=_PyInt_FromLong($26); //@line 258 "timemodule.c"
        var $28=(($23+12)&4294967295); //@line 258 "timemodule.c"
        var $29=(($28+8)&4294967295); //@line 258 "timemodule.c"
        HEAP[$29]=$27; //@line 258 "timemodule.c"
        var $30=HEAP[$v]; //@line 259 "timemodule.c"
        var $31=$30; //@line 259 "timemodule.c"
        var $32=HEAP[$p_addr]; //@line 259 "timemodule.c"
        var $33=(($32+8)&4294967295); //@line 259 "timemodule.c"
        var $34=HEAP[$33]; //@line 259 "timemodule.c"
        var $35=_PyInt_FromLong($34); //@line 259 "timemodule.c"
        var $36=(($31+12)&4294967295); //@line 259 "timemodule.c"
        var $37=(($36+12)&4294967295); //@line 259 "timemodule.c"
        HEAP[$37]=$35; //@line 259 "timemodule.c"
        var $38=HEAP[$v]; //@line 260 "timemodule.c"
        var $39=$38; //@line 260 "timemodule.c"
        var $40=HEAP[$p_addr]; //@line 260 "timemodule.c"
        var $41=(($40+4)&4294967295); //@line 260 "timemodule.c"
        var $42=HEAP[$41]; //@line 260 "timemodule.c"
        var $43=_PyInt_FromLong($42); //@line 260 "timemodule.c"
        var $44=(($39+12)&4294967295); //@line 260 "timemodule.c"
        var $45=(($44+16)&4294967295); //@line 260 "timemodule.c"
        HEAP[$45]=$43; //@line 260 "timemodule.c"
        var $46=HEAP[$v]; //@line 261 "timemodule.c"
        var $47=$46; //@line 261 "timemodule.c"
        var $48=HEAP[$p_addr]; //@line 261 "timemodule.c"
        var $49=(($48)&4294967295); //@line 261 "timemodule.c"
        var $50=HEAP[$49]; //@line 261 "timemodule.c"
        var $51=_PyInt_FromLong($50); //@line 261 "timemodule.c"
        var $52=(($47+12)&4294967295); //@line 261 "timemodule.c"
        var $53=(($52+20)&4294967295); //@line 261 "timemodule.c"
        HEAP[$53]=$51; //@line 261 "timemodule.c"
        var $54=HEAP[$v]; //@line 262 "timemodule.c"
        var $55=$54; //@line 262 "timemodule.c"
        var $56=HEAP[$p_addr]; //@line 262 "timemodule.c"
        var $57=(($56+24)&4294967295); //@line 262 "timemodule.c"
        var $58=HEAP[$57]; //@line 262 "timemodule.c"
        var $59=((($58) + 6)&4294967295); //@line 262 "timemodule.c"
        var $60=((($59))|0) % 7; //@line 262 "timemodule.c"
        var $61=_PyInt_FromLong($60); //@line 262 "timemodule.c"
        var $62=(($55+12)&4294967295); //@line 262 "timemodule.c"
        var $63=(($62+24)&4294967295); //@line 262 "timemodule.c"
        HEAP[$63]=$61; //@line 262 "timemodule.c"
        var $64=HEAP[$v]; //@line 263 "timemodule.c"
        var $65=$64; //@line 263 "timemodule.c"
        var $66=HEAP[$p_addr]; //@line 263 "timemodule.c"
        var $67=(($66+28)&4294967295); //@line 263 "timemodule.c"
        var $68=HEAP[$67]; //@line 263 "timemodule.c"
        var $69=((($68) + 1)&4294967295); //@line 263 "timemodule.c"
        var $70=_PyInt_FromLong($69); //@line 263 "timemodule.c"
        var $71=(($65+12)&4294967295); //@line 263 "timemodule.c"
        var $72=(($71+28)&4294967295); //@line 263 "timemodule.c"
        HEAP[$72]=$70; //@line 263 "timemodule.c"
        var $73=HEAP[$v]; //@line 264 "timemodule.c"
        var $74=$73; //@line 264 "timemodule.c"
        var $75=HEAP[$p_addr]; //@line 264 "timemodule.c"
        var $76=(($75+32)&4294967295); //@line 264 "timemodule.c"
        var $77=HEAP[$76]; //@line 264 "timemodule.c"
        var $78=_PyInt_FromLong($77); //@line 264 "timemodule.c"
        var $79=(($74+12)&4294967295); //@line 264 "timemodule.c"
        var $80=(($79+32)&4294967295); //@line 264 "timemodule.c"
        HEAP[$80]=$78; //@line 264 "timemodule.c"
        var $81=_PyErr_Occurred(); //@line 266 "timemodule.c"
        var $82=($81)!=0; //@line 266 "timemodule.c"
        if ($82) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 266 "timemodule.c"
      case 3: // $bb2
        var $83=HEAP[$v]; //@line 267 "timemodule.c"
        var $84=($83)!=0; //@line 267 "timemodule.c"
        if ($84) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 267 "timemodule.c"
      case 4: // $bb3
        var $85=HEAP[$v]; //@line 267 "timemodule.c"
        var $86=(($85)&4294967295); //@line 267 "timemodule.c"
        var $87=HEAP[$86]; //@line 267 "timemodule.c"
        var $88=((($87) - 1)&4294967295); //@line 267 "timemodule.c"
        var $89=HEAP[$v]; //@line 267 "timemodule.c"
        var $90=(($89)&4294967295); //@line 267 "timemodule.c"
        HEAP[$90]=$88; //@line 267 "timemodule.c"
        var $91=HEAP[$v]; //@line 267 "timemodule.c"
        var $92=(($91)&4294967295); //@line 267 "timemodule.c"
        var $93=HEAP[$92]; //@line 267 "timemodule.c"
        var $94=((($93))|0)==0; //@line 267 "timemodule.c"
        if ($94) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 267 "timemodule.c"
      case 5: // $bb4
        var $95=HEAP[$v]; //@line 267 "timemodule.c"
        var $96=(($95+4)&4294967295); //@line 267 "timemodule.c"
        var $97=HEAP[$96]; //@line 267 "timemodule.c"
        var $98=(($97+24)&4294967295); //@line 267 "timemodule.c"
        var $99=HEAP[$98]; //@line 267 "timemodule.c"
        var $100=HEAP[$v]; //@line 267 "timemodule.c"
        FUNCTION_TABLE[$99]($100); //@line 267 "timemodule.c"
        __label__ = 6; break; //@line 267 "timemodule.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 268 "timemodule.c"
        __label__ = 8; break; //@line 268 "timemodule.c"
      case 7: // $bb6
        var $101=HEAP[$v]; //@line 271 "timemodule.c"
        HEAP[$0]=$101; //@line 271 "timemodule.c"
        __label__ = 8; break; //@line 271 "timemodule.c"
      case 8: // $bb7
        var $102=HEAP[$0]; //@line 252 "timemodule.c"
        HEAP[$retval]=$102; //@line 252 "timemodule.c"
        __label__ = 9; break; //@line 252 "timemodule.c"
      case 9: // $return
        var $retval8=HEAP[$retval]; //@line 252 "timemodule.c"
        STACKTOP = __stackBase__;
        return $retval8; //@line 252 "timemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_convert($when, $function) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $when_addr=__stackBase__;
        var $function_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $p=__stackBase__+20;
        var $whent=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$when_addr]=$when;
        HEAP[$function_addr]=$function;
        var $1=HEAP[$when_addr]; //@line 278 "timemodule.c"
        var $2=__PyTime_DoubleToTimet($1); //@line 278 "timemodule.c"
        HEAP[$whent]=$2; //@line 278 "timemodule.c"
        var $3=HEAP[$whent]; //@line 280 "timemodule.c"
        var $4=((($3))|0)==-1; //@line 280 "timemodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 280 "timemodule.c"
      case 1: // $bb
        var $5=_PyErr_Occurred(); //@line 280 "timemodule.c"
        var $6=($5)!=0; //@line 280 "timemodule.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 280 "timemodule.c"
      case 2: // $bb1
        HEAP[$0]=0; //@line 281 "timemodule.c"
        __label__ = 8; break; //@line 281 "timemodule.c"
      case 3: // $bb2
        var $7=___errno_location(); //@line 282 "timemodule.c"
        HEAP[$7]=0; //@line 282 "timemodule.c"
        var $8=HEAP[$function_addr]; //@line 283 "timemodule.c"
        var $9=FUNCTION_TABLE[$8]($whent); //@line 283 "timemodule.c"
        HEAP[$p]=$9; //@line 283 "timemodule.c"
        var $10=HEAP[$p]; //@line 284 "timemodule.c"
        var $11=($10)==0; //@line 284 "timemodule.c"
        if ($11) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 284 "timemodule.c"
      case 4: // $bb3
        var $12=___errno_location(); //@line 286 "timemodule.c"
        var $13=HEAP[$12]; //@line 286 "timemodule.c"
        var $14=((($13))|0)==0; //@line 286 "timemodule.c"
        if ($14) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 286 "timemodule.c"
      case 5: // $bb4
        var $15=___errno_location(); //@line 287 "timemodule.c"
        HEAP[$15]=22; //@line 287 "timemodule.c"
        __label__ = 6; break; //@line 287 "timemodule.c"
      case 6: // $bb5
        var $16=HEAP[_PyExc_ValueError]; //@line 289 "timemodule.c"
        var $17=_PyErr_SetFromErrno($16); //@line 289 "timemodule.c"
        HEAP[$0]=$17; //@line 289 "timemodule.c"
        __label__ = 8; break; //@line 289 "timemodule.c"
      case 7: // $bb6
        var $18=HEAP[$p]; //@line 291 "timemodule.c"
        var $19=_tmtotuple($18); //@line 291 "timemodule.c"
        HEAP[$0]=$19; //@line 291 "timemodule.c"
        __label__ = 8; break; //@line 291 "timemodule.c"
      case 8: // $bb7
        var $20=HEAP[$0]; //@line 281 "timemodule.c"
        HEAP[$retval]=$20; //@line 281 "timemodule.c"
        __label__ = 9; break; //@line 281 "timemodule.c"
      case 9: // $return
        var $retval8=HEAP[$retval]; //@line 281 "timemodule.c"
        STACKTOP = __stackBase__;
        return $retval8; //@line 281 "timemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _parse_time_double_args($args, $format, $pwhen) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $args_addr=__stackBase__;
        var $format_addr=__stackBase__+4;
        var $pwhen_addr=__stackBase__+8;
        var $retval=__stackBase__+12;
        var $0=__stackBase__+16;
        var $ot=__stackBase__+20;
        var $when=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$args_addr]=$args;
        HEAP[$format_addr]=$format;
        HEAP[$pwhen_addr]=$pwhen;
        HEAP[$ot]=0; //@line 301 "timemodule.c"
        var $1=HEAP[$args_addr]; //@line 303 "timemodule.c"
        var $2=HEAP[$format_addr]; //@line 303 "timemodule.c"
        var $3=_PyArg_ParseTuple($1, $2, $ot); //@line 303 "timemodule.c"
        var $4=((($3))|0)==0; //@line 303 "timemodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 303 "timemodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 304 "timemodule.c"
        __label__ = 9; break; //@line 304 "timemodule.c"
      case 2: // $bb1
        var $5=HEAP[$ot]; //@line 305 "timemodule.c"
        var $6=($5)==0; //@line 305 "timemodule.c"
        if ($6) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 305 "timemodule.c"
      case 3: // $bb2
        var $7=HEAP[$ot]; //@line 305 "timemodule.c"
        var $8=($7)==(__Py_NoneStruct); //@line 305 "timemodule.c"
        if ($8) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 305 "timemodule.c"
      case 4: // $bb3
        var $9=_floattime(); //@line 306 "timemodule.c"
        var $10=HEAP[$pwhen_addr]; //@line 306 "timemodule.c"
        HEAP[$10]=$9; //@line 306 "timemodule.c"
        __label__ = 8; break; //@line 306 "timemodule.c"
      case 5: // $bb4
        var $11=HEAP[$ot]; //@line 308 "timemodule.c"
        var $12=_PyFloat_AsDouble($11); //@line 308 "timemodule.c"
        HEAP[$when]=$12; //@line 308 "timemodule.c"
        var $13=_PyErr_Occurred(); //@line 309 "timemodule.c"
        var $14=($13)!=0; //@line 309 "timemodule.c"
        if ($14) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 309 "timemodule.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 310 "timemodule.c"
        __label__ = 9; break; //@line 310 "timemodule.c"
      case 7: // $bb6
        var $15=HEAP[$pwhen_addr]; //@line 311 "timemodule.c"
        var $16=HEAP[$when]; //@line 311 "timemodule.c"
        HEAP[$15]=$16; //@line 311 "timemodule.c"
        __label__ = 8; break; //@line 311 "timemodule.c"
      case 8: // $bb7
        HEAP[$0]=1; //@line 313 "timemodule.c"
        __label__ = 9; break; //@line 313 "timemodule.c"
      case 9: // $bb8
        var $17=HEAP[$0]; //@line 304 "timemodule.c"
        HEAP[$retval]=$17; //@line 304 "timemodule.c"
        __label__ = 10; break; //@line 304 "timemodule.c"
      case 10: // $return
        var $retval9=HEAP[$retval]; //@line 304 "timemodule.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 304 "timemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_gmtime($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $when=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$args_addr]; //@line 320 "timemodule.c"
        var $2=_parse_time_double_args($1, ((__str22305)&4294967295), $when); //@line 320 "timemodule.c"
        var $3=((($2))|0)==0; //@line 320 "timemodule.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 320 "timemodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 321 "timemodule.c"
        __label__ = 3; break; //@line 321 "timemodule.c"
      case 2: // $bb1
        var $4=HEAP[$when]; //@line 322 "timemodule.c"
        var $5=_time_convert($4, (FUNCTION_TABLE_OFFSET + 4)); //@line 322 "timemodule.c"
        HEAP[$0]=$5; //@line 322 "timemodule.c"
        __label__ = 3; break; //@line 322 "timemodule.c"
      case 3: // $bb2
        var $6=HEAP[$0]; //@line 321 "timemodule.c"
        HEAP[$retval]=$6; //@line 321 "timemodule.c"
        __label__ = 4; break; //@line 321 "timemodule.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 321 "timemodule.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 321 "timemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_localtime($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $when=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=HEAP[$args_addr]; //@line 336 "timemodule.c"
        var $2=_parse_time_double_args($1, ((__str23306)&4294967295), $when); //@line 336 "timemodule.c"
        var $3=((($2))|0)==0; //@line 336 "timemodule.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 336 "timemodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 337 "timemodule.c"
        __label__ = 3; break; //@line 337 "timemodule.c"
      case 2: // $bb1
        var $4=HEAP[$when]; //@line 338 "timemodule.c"
        var $5=_time_convert($4, (FUNCTION_TABLE_OFFSET + 2)); //@line 338 "timemodule.c"
        HEAP[$0]=$5; //@line 338 "timemodule.c"
        __label__ = 3; break; //@line 338 "timemodule.c"
      case 3: // $bb2
        var $6=HEAP[$0]; //@line 337 "timemodule.c"
        HEAP[$retval]=$6; //@line 337 "timemodule.c"
        __label__ = 4; break; //@line 337 "timemodule.c"
      case 4: // $return
        var $retval3=HEAP[$retval]; //@line 337 "timemodule.c"
        STACKTOP = __stackBase__;
        return $retval3; //@line 337 "timemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _gettmarg($args, $p) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $args_addr=__stackBase__;
        var $p_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $y=__stackBase__+16;
        var $accept=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$args_addr]=$args;
        HEAP[$p_addr]=$p;
        var $1=HEAP[$p_addr]; //@line 352 "timemodule.c"
        var $2=$1; //@line 352 "timemodule.c"
        _llvm_memset_p0i8_i32($2, 0, 44, 1, 0); //@line 352 "timemodule.c"
        var $3=HEAP[$p_addr]; //@line 354 "timemodule.c"
        var $4=(($3+32)&4294967295); //@line 354 "timemodule.c"
        var $5=HEAP[$p_addr]; //@line 354 "timemodule.c"
        var $6=(($5+28)&4294967295); //@line 354 "timemodule.c"
        var $7=HEAP[$p_addr]; //@line 354 "timemodule.c"
        var $8=(($7+24)&4294967295); //@line 354 "timemodule.c"
        var $9=HEAP[$p_addr]; //@line 354 "timemodule.c"
        var $10=(($9)&4294967295); //@line 354 "timemodule.c"
        var $11=HEAP[$p_addr]; //@line 354 "timemodule.c"
        var $12=(($11+4)&4294967295); //@line 354 "timemodule.c"
        var $13=HEAP[$p_addr]; //@line 354 "timemodule.c"
        var $14=(($13+8)&4294967295); //@line 354 "timemodule.c"
        var $15=HEAP[$p_addr]; //@line 354 "timemodule.c"
        var $16=(($15+12)&4294967295); //@line 354 "timemodule.c"
        var $17=HEAP[$p_addr]; //@line 354 "timemodule.c"
        var $18=(($17+16)&4294967295); //@line 354 "timemodule.c"
        var $19=HEAP[$args_addr]; //@line 354 "timemodule.c"
        var $20=_PyArg_Parse($19, ((__str24307)&4294967295), $y, $18, $16, $14, $12, $10, $8, $6, $4); //@line 354 "timemodule.c"
        var $21=((($20))|0)==0; //@line 354 "timemodule.c"
        if ($21) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 354 "timemodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 364 "timemodule.c"
        __label__ = 15; break; //@line 364 "timemodule.c"
      case 2: // $bb1
        var $22=HEAP[$y]; //@line 365 "timemodule.c"
        var $23=((($22))|0) <= 1899; //@line 365 "timemodule.c"
        if ($23) { __label__ = 3; break; } else { __label__ = 14; break; } //@line 365 "timemodule.c"
      case 3: // $bb2
        var $24=HEAP[_moddict]; //@line 367 "timemodule.c"
        var $25=_PyDict_GetItemString($24, ((__str25308)&4294967295)); //@line 367 "timemodule.c"
        HEAP[$accept]=$25; //@line 367 "timemodule.c"
        var $26=HEAP[$accept]; //@line 368 "timemodule.c"
        var $27=($26)==0; //@line 368 "timemodule.c"
        if ($27) { __label__ = 6; break; } else { __label__ = 4; break; } //@line 368 "timemodule.c"
      case 4: // $bb3
        var $28=HEAP[$accept]; //@line 368 "timemodule.c"
        var $29=(($28+4)&4294967295); //@line 368 "timemodule.c"
        var $30=HEAP[$29]; //@line 368 "timemodule.c"
        var $31=(($30+84)&4294967295); //@line 368 "timemodule.c"
        var $32=HEAP[$31]; //@line 368 "timemodule.c"
        var $33=($32) & 8388608; //@line 368 "timemodule.c"
        var $34=((($33))|0)==0; //@line 368 "timemodule.c"
        if ($34) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 368 "timemodule.c"
      case 5: // $bb4
        var $35=HEAP[$accept]; //@line 368 "timemodule.c"
        var $36=_PyInt_AsLong($35); //@line 368 "timemodule.c"
        var $37=((($36))|0)==0; //@line 368 "timemodule.c"
        if ($37) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 368 "timemodule.c"
      case 6: // $bb5
        var $38=HEAP[_PyExc_ValueError]; //@line 370 "timemodule.c"
        _PyErr_SetString($38, ((__str26309)&4294967295)); //@line 370 "timemodule.c"
        HEAP[$0]=0; //@line 372 "timemodule.c"
        __label__ = 15; break; //@line 372 "timemodule.c"
      case 7: // $bb6
        var $39=HEAP[$y]; //@line 374 "timemodule.c"
        var $40=((($39))|0) <= 68; //@line 374 "timemodule.c"
        if ($40) { __label__ = 10; break; } else { __label__ = 8; break; } //@line 374 "timemodule.c"
      case 8: // $bb7
        var $41=HEAP[$y]; //@line 374 "timemodule.c"
        var $42=((($41))|0) > 99; //@line 374 "timemodule.c"
        if ($42) { __label__ = 10; break; } else { __label__ = 9; break; } //@line 374 "timemodule.c"
      case 9: // $bb8
        var $43=HEAP[$y]; //@line 375 "timemodule.c"
        var $44=((($43) + 1900)&4294967295); //@line 375 "timemodule.c"
        HEAP[$y]=$44; //@line 375 "timemodule.c"
        __label__ = 14; break; //@line 375 "timemodule.c"
      case 10: // $bb9
        var $45=HEAP[$y]; //@line 376 "timemodule.c"
        var $46=((($45))|0) < 0; //@line 376 "timemodule.c"
        if ($46) { __label__ = 13; break; } else { __label__ = 11; break; } //@line 376 "timemodule.c"
      case 11: // $bb10
        var $47=HEAP[$y]; //@line 376 "timemodule.c"
        var $48=((($47))|0) > 68; //@line 376 "timemodule.c"
        if ($48) { __label__ = 13; break; } else { __label__ = 12; break; } //@line 376 "timemodule.c"
      case 12: // $bb11
        var $49=HEAP[$y]; //@line 377 "timemodule.c"
        var $50=((($49) + 2000)&4294967295); //@line 377 "timemodule.c"
        HEAP[$y]=$50; //@line 377 "timemodule.c"
        __label__ = 14; break; //@line 377 "timemodule.c"
      case 13: // $bb12
        var $51=HEAP[_PyExc_ValueError]; //@line 379 "timemodule.c"
        _PyErr_SetString($51, ((__str27310)&4294967295)); //@line 379 "timemodule.c"
        HEAP[$0]=0; //@line 381 "timemodule.c"
        __label__ = 15; break; //@line 381 "timemodule.c"
      case 14: // $bb13
        var $52=HEAP[$y]; //@line 384 "timemodule.c"
        var $53=((($52) - 1900)&4294967295); //@line 384 "timemodule.c"
        var $54=HEAP[$p_addr]; //@line 384 "timemodule.c"
        var $55=(($54+20)&4294967295); //@line 384 "timemodule.c"
        HEAP[$55]=$53; //@line 384 "timemodule.c"
        var $56=HEAP[$p_addr]; //@line 385 "timemodule.c"
        var $57=(($56+16)&4294967295); //@line 385 "timemodule.c"
        var $58=HEAP[$57]; //@line 385 "timemodule.c"
        var $59=((($58) - 1)&4294967295); //@line 385 "timemodule.c"
        var $60=HEAP[$p_addr]; //@line 385 "timemodule.c"
        var $61=(($60+16)&4294967295); //@line 385 "timemodule.c"
        HEAP[$61]=$59; //@line 385 "timemodule.c"
        var $62=HEAP[$p_addr]; //@line 386 "timemodule.c"
        var $63=(($62+24)&4294967295); //@line 386 "timemodule.c"
        var $64=HEAP[$63]; //@line 386 "timemodule.c"
        var $65=((($64) + 1)&4294967295); //@line 386 "timemodule.c"
        var $66=((($65))|0) % 7; //@line 386 "timemodule.c"
        var $67=HEAP[$p_addr]; //@line 386 "timemodule.c"
        var $68=(($67+24)&4294967295); //@line 386 "timemodule.c"
        HEAP[$68]=$66; //@line 386 "timemodule.c"
        var $69=HEAP[$p_addr]; //@line 387 "timemodule.c"
        var $70=(($69+28)&4294967295); //@line 387 "timemodule.c"
        var $71=HEAP[$70]; //@line 387 "timemodule.c"
        var $72=((($71) - 1)&4294967295); //@line 387 "timemodule.c"
        var $73=HEAP[$p_addr]; //@line 387 "timemodule.c"
        var $74=(($73+28)&4294967295); //@line 387 "timemodule.c"
        HEAP[$74]=$72; //@line 387 "timemodule.c"
        HEAP[$0]=1; //@line 388 "timemodule.c"
        __label__ = 15; break; //@line 388 "timemodule.c"
      case 15: // $bb14
        var $75=HEAP[$0]; //@line 364 "timemodule.c"
        HEAP[$retval]=$75; //@line 364 "timemodule.c"
        __label__ = 16; break; //@line 364 "timemodule.c"
      case 16: // $return
        var $retval15=HEAP[$retval]; //@line 364 "timemodule.c"
        STACKTOP = __stackBase__;
        return $retval15; //@line 364 "timemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_strftime347($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 92; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 92);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $tup=__stackBase__+16;
        var $buf=__stackBase__+20;
        var $fmt=__stackBase__+64;
        var $fmtlen=__stackBase__+68;
        var $buflen=__stackBase__+72;
        var $outbuf=__stackBase__+76;
        var $i=__stackBase__+80;
        var $tt=__stackBase__+84;
        var $ret=__stackBase__+88;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$tup]=0; //@line 395 "timemodule.c"
        HEAP[$outbuf]=0; //@line 399 "timemodule.c"
        var $buf1=$buf; //@line 402 "timemodule.c"
        _llvm_memset_p0i8_i32($buf1, 0, 44, 1, 0); //@line 402 "timemodule.c"
        var $1=HEAP[$args_addr]; //@line 404 "timemodule.c"
        var $2=_PyArg_ParseTuple($1, ((__str28311)&4294967295), $fmt, $tup); //@line 404 "timemodule.c"
        var $3=((($2))|0)==0; //@line 404 "timemodule.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 404 "timemodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 405 "timemodule.c"
        __label__ = 43; break; //@line 405 "timemodule.c"
      case 2: // $bb2
        var $4=HEAP[$tup]; //@line 407 "timemodule.c"
        var $5=($4)==0; //@line 407 "timemodule.c"
        if ($5) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 407 "timemodule.c"
      case 3: // $bb3
        var $6=_time(0); //@line 408 "timemodule.c"
        HEAP[$tt]=$6; //@line 408 "timemodule.c"
        var $7=_localtime($tt); //@line 409 "timemodule.c"
        var $buf4=$buf; //@line 409 "timemodule.c"
        var $8=$7; //@line 409 "timemodule.c"
        _llvm_memcpy_p0i8_p0i8_i32($buf4, $8, 44, 4, 0); //@line 409 "timemodule.c"
        __label__ = 6; break; //@line 409 "timemodule.c"
      case 4: // $bb5
        var $9=HEAP[$tup]; //@line 410 "timemodule.c"
        var $10=_gettmarg($9, $buf); //@line 410 "timemodule.c"
        var $11=((($10))|0)==0; //@line 410 "timemodule.c"
        if ($11) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 410 "timemodule.c"
      case 5: // $bb6
        HEAP[$0]=0; //@line 411 "timemodule.c"
        __label__ = 43; break; //@line 411 "timemodule.c"
      case 6: // $bb7
        var $12=(($buf+16)&4294967295); //@line 437 "timemodule.c"
        var $13=HEAP[$12]; //@line 437 "timemodule.c"
        var $14=((($13))|0)==-1; //@line 437 "timemodule.c"
        if ($14) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 437 "timemodule.c"
      case 7: // $bb8
        var $15=(($buf+16)&4294967295); //@line 438 "timemodule.c"
        HEAP[$15]=0; //@line 438 "timemodule.c"
        __label__ = 11; break; //@line 438 "timemodule.c"
      case 8: // $bb9
        var $16=(($buf+16)&4294967295); //@line 439 "timemodule.c"
        var $17=HEAP[$16]; //@line 439 "timemodule.c"
        var $18=((($17))|0) < 0; //@line 439 "timemodule.c"
        if ($18) { __label__ = 10; break; } else { __label__ = 9; break; } //@line 439 "timemodule.c"
      case 9: // $bb10
        var $19=(($buf+16)&4294967295); //@line 439 "timemodule.c"
        var $20=HEAP[$19]; //@line 439 "timemodule.c"
        var $21=((($20))|0) > 11; //@line 439 "timemodule.c"
        if ($21) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 439 "timemodule.c"
      case 10: // $bb11
        var $22=HEAP[_PyExc_ValueError]; //@line 440 "timemodule.c"
        _PyErr_SetString($22, ((__str29312)&4294967295)); //@line 440 "timemodule.c"
        HEAP[$0]=0; //@line 441 "timemodule.c"
        __label__ = 43; break; //@line 441 "timemodule.c"
      case 11: // $bb12
        var $23=(($buf+12)&4294967295); //@line 443 "timemodule.c"
        var $24=HEAP[$23]; //@line 443 "timemodule.c"
        var $25=((($24))|0)==0; //@line 443 "timemodule.c"
        if ($25) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 443 "timemodule.c"
      case 12: // $bb13
        var $26=(($buf+12)&4294967295); //@line 444 "timemodule.c"
        HEAP[$26]=1; //@line 444 "timemodule.c"
        __label__ = 16; break; //@line 444 "timemodule.c"
      case 13: // $bb14
        var $27=(($buf+12)&4294967295); //@line 445 "timemodule.c"
        var $28=HEAP[$27]; //@line 445 "timemodule.c"
        var $29=((($28))|0) < 0; //@line 445 "timemodule.c"
        if ($29) { __label__ = 15; break; } else { __label__ = 14; break; } //@line 445 "timemodule.c"
      case 14: // $bb15
        var $30=(($buf+12)&4294967295); //@line 445 "timemodule.c"
        var $31=HEAP[$30]; //@line 445 "timemodule.c"
        var $32=((($31))|0) > 31; //@line 445 "timemodule.c"
        if ($32) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 445 "timemodule.c"
      case 15: // $bb16
        var $33=HEAP[_PyExc_ValueError]; //@line 446 "timemodule.c"
        _PyErr_SetString($33, ((__str30313)&4294967295)); //@line 446 "timemodule.c"
        HEAP[$0]=0; //@line 447 "timemodule.c"
        __label__ = 43; break; //@line 447 "timemodule.c"
      case 16: // $bb17
        var $34=(($buf+8)&4294967295); //@line 449 "timemodule.c"
        var $35=HEAP[$34]; //@line 449 "timemodule.c"
        var $36=((($35))|0) < 0; //@line 449 "timemodule.c"
        if ($36) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 449 "timemodule.c"
      case 17: // $bb18
        var $37=(($buf+8)&4294967295); //@line 449 "timemodule.c"
        var $38=HEAP[$37]; //@line 449 "timemodule.c"
        var $39=((($38))|0) > 23; //@line 449 "timemodule.c"
        if ($39) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 449 "timemodule.c"
      case 18: // $bb19
        var $40=HEAP[_PyExc_ValueError]; //@line 450 "timemodule.c"
        _PyErr_SetString($40, ((__str31314)&4294967295)); //@line 450 "timemodule.c"
        HEAP[$0]=0; //@line 451 "timemodule.c"
        __label__ = 43; break; //@line 451 "timemodule.c"
      case 19: // $bb20
        var $41=(($buf+4)&4294967295); //@line 453 "timemodule.c"
        var $42=HEAP[$41]; //@line 453 "timemodule.c"
        var $43=((($42))|0) < 0; //@line 453 "timemodule.c"
        if ($43) { __label__ = 21; break; } else { __label__ = 20; break; } //@line 453 "timemodule.c"
      case 20: // $bb21
        var $44=(($buf+4)&4294967295); //@line 453 "timemodule.c"
        var $45=HEAP[$44]; //@line 453 "timemodule.c"
        var $46=((($45))|0) > 59; //@line 453 "timemodule.c"
        if ($46) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 453 "timemodule.c"
      case 21: // $bb22
        var $47=HEAP[_PyExc_ValueError]; //@line 454 "timemodule.c"
        _PyErr_SetString($47, ((__str32315)&4294967295)); //@line 454 "timemodule.c"
        HEAP[$0]=0; //@line 455 "timemodule.c"
        __label__ = 43; break; //@line 455 "timemodule.c"
      case 22: // $bb23
        var $48=(($buf)&4294967295); //@line 457 "timemodule.c"
        var $49=HEAP[$48]; //@line 457 "timemodule.c"
        var $50=((($49))|0) < 0; //@line 457 "timemodule.c"
        if ($50) { __label__ = 24; break; } else { __label__ = 23; break; } //@line 457 "timemodule.c"
      case 23: // $bb24
        var $51=(($buf)&4294967295); //@line 457 "timemodule.c"
        var $52=HEAP[$51]; //@line 457 "timemodule.c"
        var $53=((($52))|0) > 61; //@line 457 "timemodule.c"
        if ($53) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 457 "timemodule.c"
      case 24: // $bb25
        var $54=HEAP[_PyExc_ValueError]; //@line 458 "timemodule.c"
        _PyErr_SetString($54, ((__str33316)&4294967295)); //@line 458 "timemodule.c"
        HEAP[$0]=0; //@line 459 "timemodule.c"
        __label__ = 43; break; //@line 459 "timemodule.c"
      case 25: // $bb26
        var $55=(($buf+24)&4294967295); //@line 463 "timemodule.c"
        var $56=HEAP[$55]; //@line 463 "timemodule.c"
        var $57=((($56))|0) < 0; //@line 463 "timemodule.c"
        if ($57) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 463 "timemodule.c"
      case 26: // $bb27
        var $58=HEAP[_PyExc_ValueError]; //@line 464 "timemodule.c"
        _PyErr_SetString($58, ((__str34317)&4294967295)); //@line 464 "timemodule.c"
        HEAP[$0]=0; //@line 465 "timemodule.c"
        __label__ = 43; break; //@line 465 "timemodule.c"
      case 27: // $bb28
        var $59=(($buf+28)&4294967295); //@line 467 "timemodule.c"
        var $60=HEAP[$59]; //@line 467 "timemodule.c"
        var $61=((($60))|0)==-1; //@line 467 "timemodule.c"
        if ($61) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 467 "timemodule.c"
      case 28: // $bb29
        var $62=(($buf+28)&4294967295); //@line 468 "timemodule.c"
        HEAP[$62]=0; //@line 468 "timemodule.c"
        __label__ = 32; break; //@line 468 "timemodule.c"
      case 29: // $bb30
        var $63=(($buf+28)&4294967295); //@line 469 "timemodule.c"
        var $64=HEAP[$63]; //@line 469 "timemodule.c"
        var $65=((($64))|0) < 0; //@line 469 "timemodule.c"
        if ($65) { __label__ = 31; break; } else { __label__ = 30; break; } //@line 469 "timemodule.c"
      case 30: // $bb31
        var $66=(($buf+28)&4294967295); //@line 469 "timemodule.c"
        var $67=HEAP[$66]; //@line 469 "timemodule.c"
        var $68=((($67))|0) > 365; //@line 469 "timemodule.c"
        if ($68) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 469 "timemodule.c"
      case 31: // $bb32
        var $69=HEAP[_PyExc_ValueError]; //@line 470 "timemodule.c"
        _PyErr_SetString($69, ((__str35318)&4294967295)); //@line 470 "timemodule.c"
        HEAP[$0]=0; //@line 471 "timemodule.c"
        __label__ = 43; break; //@line 471 "timemodule.c"
      case 32: // $bb33
        var $70=(($buf+32)&4294967295); //@line 476 "timemodule.c"
        var $71=HEAP[$70]; //@line 476 "timemodule.c"
        var $72=((($71))|0) < -1; //@line 476 "timemodule.c"
        if ($72) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 476 "timemodule.c"
      case 33: // $bb34
        var $73=(($buf+32)&4294967295); //@line 477 "timemodule.c"
        HEAP[$73]=-1; //@line 477 "timemodule.c"
        __label__ = 36; break; //@line 477 "timemodule.c"
      case 34: // $bb35
        var $74=(($buf+32)&4294967295); //@line 478 "timemodule.c"
        var $75=HEAP[$74]; //@line 478 "timemodule.c"
        var $76=((($75))|0) > 1; //@line 478 "timemodule.c"
        if ($76) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 478 "timemodule.c"
      case 35: // $bb36
        var $77=(($buf+32)&4294967295); //@line 479 "timemodule.c"
        HEAP[$77]=1; //@line 479 "timemodule.c"
        __label__ = 36; break; //@line 479 "timemodule.c"
      case 36: // $bb37
        var $78=HEAP[$fmt]; //@line 498 "timemodule.c"
        var $79=_strlen($78); //@line 498 "timemodule.c"
        HEAP[$fmtlen]=$79; //@line 498 "timemodule.c"
        HEAP[$i]=1024; //@line 503 "timemodule.c"
        __label__ = 37; break; //@line 503 "timemodule.c"
      case 37: // $bb38
        var $80=HEAP[$i]; //@line 504 "timemodule.c"
        var $81=_malloc($80); //@line 504 "timemodule.c"
        HEAP[$outbuf]=$81; //@line 504 "timemodule.c"
        var $82=HEAP[$outbuf]; //@line 505 "timemodule.c"
        var $83=($82)==0; //@line 505 "timemodule.c"
        if ($83) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 505 "timemodule.c"
      case 38: // $bb39
        var $84=_PyErr_NoMemory(); //@line 506 "timemodule.c"
        HEAP[$0]=$84; //@line 506 "timemodule.c"
        __label__ = 43; break; //@line 506 "timemodule.c"
      case 39: // $bb40
        var $85=HEAP[$fmt]; //@line 508 "timemodule.c"
        var $86=HEAP[$outbuf]; //@line 508 "timemodule.c"
        var $87=HEAP[$i]; //@line 508 "timemodule.c"
        var $88=_strftime($86, $87, $85, $buf); //@line 508 "timemodule.c"
        HEAP[$buflen]=$88; //@line 508 "timemodule.c"
        var $89=HEAP[$buflen]; //@line 509 "timemodule.c"
        var $90=((($89))|0)!=0; //@line 509 "timemodule.c"
        if ($90) { __label__ = 41; break; } else { __label__ = 40; break; } //@line 509 "timemodule.c"
      case 40: // $bb41
        var $91=HEAP[$fmtlen]; //@line 509 "timemodule.c"
        var $92=((($91) * 256)&4294967295); //@line 509 "timemodule.c"
        var $93=HEAP[$i]; //@line 509 "timemodule.c"
        var $94=((($92))>>>0) <= ((($93))>>>0); //@line 509 "timemodule.c"
        if ($94) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 509 "timemodule.c"
      case 41: // $bb42
        var $95=HEAP[$buflen]; //@line 516 "timemodule.c"
        var $96=HEAP[$outbuf]; //@line 516 "timemodule.c"
        var $97=_PyString_FromStringAndSize($96, $95); //@line 516 "timemodule.c"
        HEAP[$ret]=$97; //@line 516 "timemodule.c"
        var $98=HEAP[$outbuf]; //@line 517 "timemodule.c"
        _free($98); //@line 517 "timemodule.c"
        var $99=HEAP[$ret]; //@line 518 "timemodule.c"
        HEAP[$0]=$99; //@line 518 "timemodule.c"
        __label__ = 43; break; //@line 518 "timemodule.c"
      case 42: // $bb43
        var $100=HEAP[$outbuf]; //@line 520 "timemodule.c"
        _free($100); //@line 520 "timemodule.c"
        var $101=HEAP[$i]; //@line 503 "timemodule.c"
        var $102=HEAP[$i]; //@line 503 "timemodule.c"
        var $103=((($101) + ($102))&4294967295); //@line 503 "timemodule.c"
        HEAP[$i]=$103; //@line 503 "timemodule.c"
        __label__ = 37; break; //@line 503 "timemodule.c"
      case 43: // $bb44
        var $104=HEAP[$0]; //@line 405 "timemodule.c"
        HEAP[$retval]=$104; //@line 405 "timemodule.c"
        __label__ = 44; break; //@line 405 "timemodule.c"
      case 44: // $return
        var $retval45=HEAP[$retval]; //@line 405 "timemodule.c"
        STACKTOP = __stackBase__;
        return $retval45; //@line 405 "timemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_strptime($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 24);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $strptime_module=__stackBase__+16;
        var $strptime_result=__stackBase__+20;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        var $1=_PyImport_ImportModuleNoBlock(((__str36319)&4294967295)); //@line 543 "timemodule.c"
        HEAP[$strptime_module]=$1; //@line 543 "timemodule.c"
        var $2=HEAP[$strptime_module]; //@line 546 "timemodule.c"
        var $3=($2)==0; //@line 546 "timemodule.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 546 "timemodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 547 "timemodule.c"
        __label__ = 5; break; //@line 547 "timemodule.c"
      case 2: // $bb1
        var $4=HEAP[$strptime_module]; //@line 548 "timemodule.c"
        var $5=HEAP[$args_addr]; //@line 548 "timemodule.c"
        var $6=_PyObject_CallMethod($4, ((__str37320)&4294967295), ((__str38321)&4294967295), $5); //@line 548 "timemodule.c"
        HEAP[$strptime_result]=$6; //@line 548 "timemodule.c"
        var $7=HEAP[$strptime_module]; //@line 550 "timemodule.c"
        var $8=(($7)&4294967295); //@line 550 "timemodule.c"
        var $9=HEAP[$8]; //@line 550 "timemodule.c"
        var $10=((($9) - 1)&4294967295); //@line 550 "timemodule.c"
        var $11=HEAP[$strptime_module]; //@line 550 "timemodule.c"
        var $12=(($11)&4294967295); //@line 550 "timemodule.c"
        HEAP[$12]=$10; //@line 550 "timemodule.c"
        var $13=HEAP[$strptime_module]; //@line 550 "timemodule.c"
        var $14=(($13)&4294967295); //@line 550 "timemodule.c"
        var $15=HEAP[$14]; //@line 550 "timemodule.c"
        var $16=((($15))|0)==0; //@line 550 "timemodule.c"
        if ($16) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 550 "timemodule.c"
      case 3: // $bb2
        var $17=HEAP[$strptime_module]; //@line 550 "timemodule.c"
        var $18=(($17+4)&4294967295); //@line 550 "timemodule.c"
        var $19=HEAP[$18]; //@line 550 "timemodule.c"
        var $20=(($19+24)&4294967295); //@line 550 "timemodule.c"
        var $21=HEAP[$20]; //@line 550 "timemodule.c"
        var $22=HEAP[$strptime_module]; //@line 550 "timemodule.c"
        FUNCTION_TABLE[$21]($22); //@line 550 "timemodule.c"
        __label__ = 4; break; //@line 550 "timemodule.c"
      case 4: // $bb3
        var $23=HEAP[$strptime_result]; //@line 551 "timemodule.c"
        HEAP[$0]=$23; //@line 551 "timemodule.c"
        __label__ = 5; break; //@line 551 "timemodule.c"
      case 5: // $bb4
        var $24=HEAP[$0]; //@line 547 "timemodule.c"
        HEAP[$retval]=$24; //@line 547 "timemodule.c"
        __label__ = 6; break; //@line 547 "timemodule.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 547 "timemodule.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 547 "timemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_asctime($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 72; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 72);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $tup=__stackBase__+16;
        var $buf=__stackBase__+20;
        var $p=__stackBase__+64;
        var $tt=__stackBase__+68;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$tup]=0; //@line 564 "timemodule.c"
        var $1=HEAP[$args_addr]; //@line 567 "timemodule.c"
        var $2=_PyArg_UnpackTuple($1, ((__str39322)&4294967295), 0, 1, $tup); //@line 567 "timemodule.c"
        var $3=((($2))|0)==0; //@line 567 "timemodule.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 567 "timemodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 568 "timemodule.c"
        __label__ = 11; break; //@line 568 "timemodule.c"
      case 2: // $bb1
        var $4=HEAP[$tup]; //@line 569 "timemodule.c"
        var $5=($4)==0; //@line 569 "timemodule.c"
        if ($5) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 569 "timemodule.c"
      case 3: // $bb2
        var $6=_time(0); //@line 570 "timemodule.c"
        HEAP[$tt]=$6; //@line 570 "timemodule.c"
        var $7=_localtime($tt); //@line 571 "timemodule.c"
        var $buf3=$buf; //@line 571 "timemodule.c"
        var $8=$7; //@line 571 "timemodule.c"
        _llvm_memcpy_p0i8_p0i8_i32($buf3, $8, 44, 4, 0); //@line 571 "timemodule.c"
        __label__ = 6; break; //@line 571 "timemodule.c"
      case 4: // $bb4
        var $9=HEAP[$tup]; //@line 572 "timemodule.c"
        var $10=_gettmarg($9, $buf); //@line 572 "timemodule.c"
        var $11=((($10))|0)==0; //@line 572 "timemodule.c"
        if ($11) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 572 "timemodule.c"
      case 5: // $bb5
        HEAP[$0]=0; //@line 573 "timemodule.c"
        __label__ = 11; break; //@line 573 "timemodule.c"
      case 6: // $bb6
        var $12=_asctime($buf); //@line 574 "timemodule.c"
        HEAP[$p]=$12; //@line 574 "timemodule.c"
        var $13=HEAP[$p]; //@line 575 "timemodule.c"
        var $14=($13)==0; //@line 575 "timemodule.c"
        if ($14) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 575 "timemodule.c"
      case 7: // $bb7
        var $15=HEAP[_PyExc_ValueError]; //@line 576 "timemodule.c"
        _PyErr_SetString($15, ((__str40323)&4294967295)); //@line 576 "timemodule.c"
        HEAP[$0]=0; //@line 577 "timemodule.c"
        __label__ = 11; break; //@line 577 "timemodule.c"
      case 8: // $bb8
        var $16=HEAP[$p]; //@line 579 "timemodule.c"
        var $17=(($16+24)&4294967295); //@line 579 "timemodule.c"
        var $18=HEAP[$17]; //@line 579 "timemodule.c"
        var $19=reSign(($18), 8, 0)==10; //@line 579 "timemodule.c"
        if ($19) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 579 "timemodule.c"
      case 9: // $bb9
        var $20=HEAP[$p]; //@line 580 "timemodule.c"
        var $21=(($20+24)&4294967295); //@line 580 "timemodule.c"
        HEAP[$21]=0; //@line 580 "timemodule.c"
        __label__ = 10; break; //@line 580 "timemodule.c"
      case 10: // $bb10
        var $22=HEAP[$p]; //@line 581 "timemodule.c"
        var $23=_PyString_FromString($22); //@line 581 "timemodule.c"
        HEAP[$0]=$23; //@line 581 "timemodule.c"
        __label__ = 11; break; //@line 581 "timemodule.c"
      case 11: // $bb11
        var $24=HEAP[$0]; //@line 568 "timemodule.c"
        HEAP[$retval]=$24; //@line 568 "timemodule.c"
        __label__ = 12; break; //@line 568 "timemodule.c"
      case 12: // $return
        var $retval12=HEAP[$retval]; //@line 568 "timemodule.c"
        STACKTOP = __stackBase__;
        return $retval12; //@line 568 "timemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_ctime($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $args_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $ot=__stackBase__+16;
        var $tt=__stackBase__+20;
        var $p=__stackBase__+24;
        var $dt=__stackBase__+28;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$args_addr]=$args;
        HEAP[$ot]=0; //@line 594 "timemodule.c"
        var $1=HEAP[$args_addr]; //@line 598 "timemodule.c"
        var $2=_PyArg_UnpackTuple($1, ((__str41324)&4294967295), 0, 1, $ot); //@line 598 "timemodule.c"
        var $3=((($2))|0)==0; //@line 598 "timemodule.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 598 "timemodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 599 "timemodule.c"
        __label__ = 15; break; //@line 599 "timemodule.c"
      case 2: // $bb1
        var $4=HEAP[$ot]; //@line 600 "timemodule.c"
        var $5=($4)==0; //@line 600 "timemodule.c"
        if ($5) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 600 "timemodule.c"
      case 3: // $bb2
        var $6=HEAP[$ot]; //@line 600 "timemodule.c"
        var $7=($6)==(__Py_NoneStruct); //@line 600 "timemodule.c"
        if ($7) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 600 "timemodule.c"
      case 4: // $bb3
        var $8=_time(0); //@line 601 "timemodule.c"
        HEAP[$tt]=$8; //@line 601 "timemodule.c"
        __label__ = 10; break; //@line 601 "timemodule.c"
      case 5: // $bb4
        var $9=HEAP[$ot]; //@line 603 "timemodule.c"
        var $10=_PyFloat_AsDouble($9); //@line 603 "timemodule.c"
        HEAP[$dt]=$10; //@line 603 "timemodule.c"
        var $11=_PyErr_Occurred(); //@line 604 "timemodule.c"
        var $12=($11)!=0; //@line 604 "timemodule.c"
        if ($12) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 604 "timemodule.c"
      case 6: // $bb5
        HEAP[$0]=0; //@line 605 "timemodule.c"
        __label__ = 15; break; //@line 605 "timemodule.c"
      case 7: // $bb6
        var $13=HEAP[$dt]; //@line 606 "timemodule.c"
        var $14=__PyTime_DoubleToTimet($13); //@line 606 "timemodule.c"
        HEAP[$tt]=$14; //@line 606 "timemodule.c"
        var $15=HEAP[$tt]; //@line 607 "timemodule.c"
        var $16=((($15))|0)==-1; //@line 607 "timemodule.c"
        if ($16) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 607 "timemodule.c"
      case 8: // $bb7
        var $17=_PyErr_Occurred(); //@line 607 "timemodule.c"
        var $18=($17)!=0; //@line 607 "timemodule.c"
        if ($18) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 607 "timemodule.c"
      case 9: // $bb8
        HEAP[$0]=0; //@line 608 "timemodule.c"
        __label__ = 15; break; //@line 608 "timemodule.c"
      case 10: // $bb9
        var $19=_ctime($tt); //@line 610 "timemodule.c"
        HEAP[$p]=$19; //@line 610 "timemodule.c"
        var $20=HEAP[$p]; //@line 611 "timemodule.c"
        var $21=($20)==0; //@line 611 "timemodule.c"
        if ($21) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 611 "timemodule.c"
      case 11: // $bb10
        var $22=HEAP[_PyExc_ValueError]; //@line 612 "timemodule.c"
        _PyErr_SetString($22, ((__str42325)&4294967295)); //@line 612 "timemodule.c"
        HEAP[$0]=0; //@line 613 "timemodule.c"
        __label__ = 15; break; //@line 613 "timemodule.c"
      case 12: // $bb11
        var $23=HEAP[$p]; //@line 615 "timemodule.c"
        var $24=(($23+24)&4294967295); //@line 615 "timemodule.c"
        var $25=HEAP[$24]; //@line 615 "timemodule.c"
        var $26=reSign(($25), 8, 0)==10; //@line 615 "timemodule.c"
        if ($26) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 615 "timemodule.c"
      case 13: // $bb12
        var $27=HEAP[$p]; //@line 616 "timemodule.c"
        var $28=(($27+24)&4294967295); //@line 616 "timemodule.c"
        HEAP[$28]=0; //@line 616 "timemodule.c"
        __label__ = 14; break; //@line 616 "timemodule.c"
      case 14: // $bb13
        var $29=HEAP[$p]; //@line 617 "timemodule.c"
        var $30=_PyString_FromString($29); //@line 617 "timemodule.c"
        HEAP[$0]=$30; //@line 617 "timemodule.c"
        __label__ = 15; break; //@line 617 "timemodule.c"
      case 15: // $bb14
        var $31=HEAP[$0]; //@line 599 "timemodule.c"
        HEAP[$retval]=$31; //@line 599 "timemodule.c"
        __label__ = 16; break; //@line 599 "timemodule.c"
      case 16: // $return
        var $retval15=HEAP[$retval]; //@line 599 "timemodule.c"
        STACKTOP = __stackBase__;
        return $retval15; //@line 599 "timemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_mktime($self, $tup) {
    var __stackBase__  = STACKTOP; STACKTOP += 64; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 64);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $tup_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $buf=__stackBase__+16;
        var $tt=__stackBase__+60;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$tup_addr]=$tup;
        var $1=HEAP[$tup_addr]; //@line 633 "timemodule.c"
        var $2=_gettmarg($1, $buf); //@line 633 "timemodule.c"
        var $3=((($2))|0)==0; //@line 633 "timemodule.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 633 "timemodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 634 "timemodule.c"
        __label__ = 6; break; //@line 634 "timemodule.c"
      case 2: // $bb1
        var $4=(($buf+24)&4294967295); //@line 635 "timemodule.c"
        HEAP[$4]=-1; //@line 635 "timemodule.c"
        var $5=_mktime($buf); //@line 636 "timemodule.c"
        HEAP[$tt]=$5; //@line 636 "timemodule.c"
        var $6=HEAP[$tt]; //@line 639 "timemodule.c"
        var $7=((($6))|0)==-1; //@line 639 "timemodule.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 639 "timemodule.c"
      case 3: // $bb2
        var $8=(($buf+24)&4294967295); //@line 639 "timemodule.c"
        var $9=HEAP[$8]; //@line 639 "timemodule.c"
        var $10=((($9))|0)==-1; //@line 639 "timemodule.c"
        if ($10) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 639 "timemodule.c"
      case 4: // $bb3
        var $11=HEAP[_PyExc_OverflowError]; //@line 640 "timemodule.c"
        _PyErr_SetString($11, ((__str43326)&4294967295)); //@line 640 "timemodule.c"
        HEAP[$0]=0; //@line 642 "timemodule.c"
        __label__ = 6; break; //@line 642 "timemodule.c"
      case 5: // $bb4
        var $12=HEAP[$tt]; //@line 644 "timemodule.c"
        var $13=((($12))|0); //@line 644 "timemodule.c"
        var $14=_PyFloat_FromDouble($13); //@line 644 "timemodule.c"
        HEAP[$0]=$14; //@line 644 "timemodule.c"
        __label__ = 6; break; //@line 644 "timemodule.c"
      case 6: // $bb5
        var $15=HEAP[$0]; //@line 634 "timemodule.c"
        HEAP[$retval]=$15; //@line 634 "timemodule.c"
        __label__ = 7; break; //@line 634 "timemodule.c"
      case 7: // $return
        var $retval6=HEAP[$retval]; //@line 634 "timemodule.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 634 "timemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _time_tzset($self, $unused) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr=__stackBase__;
        var $unused_addr=__stackBase__+4;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $m=__stackBase__+16;
        var $_alloca_point_=0;
        HEAP[$self_addr]=$self;
        HEAP[$unused_addr]=$unused;
        var $1=_PyImport_ImportModuleNoBlock(((__str44327)&4294967295)); //@line 661 "timemodule.c"
        HEAP[$m]=$1; //@line 661 "timemodule.c"
        var $2=HEAP[$m]; //@line 662 "timemodule.c"
        var $3=($2)==0; //@line 662 "timemodule.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 662 "timemodule.c"
      case 1: // $bb
        HEAP[$0]=0; //@line 663 "timemodule.c"
        __label__ = 5; break; //@line 663 "timemodule.c"
      case 2: // $bb1
        _tzset(); //@line 666 "timemodule.c"
        var $4=HEAP[$m]; //@line 669 "timemodule.c"
        _inittimezone($4); //@line 669 "timemodule.c"
        var $5=HEAP[$m]; //@line 670 "timemodule.c"
        var $6=(($5)&4294967295); //@line 670 "timemodule.c"
        var $7=HEAP[$6]; //@line 670 "timemodule.c"
        var $8=((($7) - 1)&4294967295); //@line 670 "timemodule.c"
        var $9=HEAP[$m]; //@line 670 "timemodule.c"
        var $10=(($9)&4294967295); //@line 670 "timemodule.c"
        HEAP[$10]=$8; //@line 670 "timemodule.c"
        var $11=HEAP[$m]; //@line 670 "timemodule.c"
        var $12=(($11)&4294967295); //@line 670 "timemodule.c"
        var $13=HEAP[$12]; //@line 670 "timemodule.c"
        var $14=((($13))|0)==0; //@line 670 "timemodule.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 670 "timemodule.c"
      case 3: // $bb2
        var $15=HEAP[$m]; //@line 670 "timemodule.c"
        var $16=(($15+4)&4294967295); //@line 670 "timemodule.c"
        var $17=HEAP[$16]; //@line 670 "timemodule.c"
        var $18=(($17+24)&4294967295); //@line 670 "timemodule.c"
        var $19=HEAP[$18]; //@line 670 "timemodule.c"
        var $20=HEAP[$m]; //@line 670 "timemodule.c"
        FUNCTION_TABLE[$19]($20); //@line 670 "timemodule.c"
        __label__ = 4; break; //@line 670 "timemodule.c"
      case 4: // $bb3
        var $21=HEAP[((__Py_NoneStruct)&4294967295)]; //@line 672 "timemodule.c"
        var $22=((($21) + 1)&4294967295); //@line 672 "timemodule.c"
        HEAP[((__Py_NoneStruct)&4294967295)]=$22; //@line 672 "timemodule.c"
        HEAP[$0]=__Py_NoneStruct; //@line 673 "timemodule.c"
        __label__ = 5; break; //@line 673 "timemodule.c"
      case 5: // $bb4
        var $23=HEAP[$0]; //@line 663 "timemodule.c"
        HEAP[$retval]=$23; //@line 663 "timemodule.c"
        __label__ = 6; break; //@line 663 "timemodule.c"
      case 6: // $return
        var $retval5=HEAP[$retval]; //@line 663 "timemodule.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 663 "timemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _inittimezone($m) {
    var __stackBase__  = STACKTOP; STACKTOP += 48; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 48);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $m_addr=__stackBase__;
        var $iftmp_53=__stackBase__+4;
        var $iftmp_51=__stackBase__+8;
        var $t=__stackBase__+12;
        var $p=__stackBase__+16;
        var $janzone=__stackBase__+20;
        var $julyzone=__stackBase__+24;
        var $janname=__stackBase__+28;
        var $julyname=__stackBase__+38;
        var $_alloca_point_=0;
        HEAP[$m_addr]=$m;
        var $0=_time(0); //@line 735 "timemodule.c"
        var $1=((((($0))|0)/31557600)|0); //@line 735 "timemodule.c"
        var $2=((($1) * 31557600)&4294967295); //@line 735 "timemodule.c"
        HEAP[$t]=$2; //@line 735 "timemodule.c"
        var $3=_localtime($t); //@line 736 "timemodule.c"
        HEAP[$p]=$3; //@line 736 "timemodule.c"
        var $4=HEAP[$p]; //@line 737 "timemodule.c"
        var $5=(($4+36)&4294967295); //@line 737 "timemodule.c"
        var $6=HEAP[$5]; //@line 737 "timemodule.c"
        var $7=((0 - ($6))&4294967295); //@line 737 "timemodule.c"
        HEAP[$janzone]=$7; //@line 737 "timemodule.c"
        var $8=HEAP[$p]; //@line 738 "timemodule.c"
        var $9=(($8+40)&4294967295); //@line 738 "timemodule.c"
        var $10=HEAP[$9]; //@line 738 "timemodule.c"
        var $11=($10)!=0; //@line 738 "timemodule.c"
        if ($11) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 738 "timemodule.c"
      case 1: // $bb
        var $12=HEAP[$p]; //@line 738 "timemodule.c"
        var $13=(($12+40)&4294967295); //@line 738 "timemodule.c"
        var $14=HEAP[$13]; //@line 738 "timemodule.c"
        HEAP[$iftmp_51]=$14; //@line 738 "timemodule.c"
        __label__ = 3; break; //@line 738 "timemodule.c"
      case 2: // $bb1
        HEAP[$iftmp_51]=((__str45328)&4294967295); //@line 738 "timemodule.c"
        __label__ = 3; break; //@line 738 "timemodule.c"
      case 3: // $bb2
        var $janname3=$janname; //@line 738 "timemodule.c"
        var $15=HEAP[$iftmp_51]; //@line 738 "timemodule.c"
        var $16=_strncpy($janname3, $15, 9); //@line 738 "timemodule.c"
        var $17=(($janname+9)&4294967295); //@line 739 "timemodule.c"
        HEAP[$17]=0; //@line 739 "timemodule.c"
        var $18=HEAP[$t]; //@line 740 "timemodule.c"
        var $19=((($18) + 15778800)&4294967295); //@line 740 "timemodule.c"
        HEAP[$t]=$19; //@line 740 "timemodule.c"
        var $20=_localtime($t); //@line 741 "timemodule.c"
        HEAP[$p]=$20; //@line 741 "timemodule.c"
        var $21=HEAP[$p]; //@line 742 "timemodule.c"
        var $22=(($21+36)&4294967295); //@line 742 "timemodule.c"
        var $23=HEAP[$22]; //@line 742 "timemodule.c"
        var $24=((0 - ($23))&4294967295); //@line 742 "timemodule.c"
        HEAP[$julyzone]=$24; //@line 742 "timemodule.c"
        var $25=HEAP[$p]; //@line 743 "timemodule.c"
        var $26=(($25+40)&4294967295); //@line 743 "timemodule.c"
        var $27=HEAP[$26]; //@line 743 "timemodule.c"
        var $28=($27)!=0; //@line 743 "timemodule.c"
        if ($28) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 743 "timemodule.c"
      case 4: // $bb4
        var $29=HEAP[$p]; //@line 743 "timemodule.c"
        var $30=(($29+40)&4294967295); //@line 743 "timemodule.c"
        var $31=HEAP[$30]; //@line 743 "timemodule.c"
        HEAP[$iftmp_53]=$31; //@line 743 "timemodule.c"
        __label__ = 6; break; //@line 743 "timemodule.c"
      case 5: // $bb5
        HEAP[$iftmp_53]=((__str45328)&4294967295); //@line 743 "timemodule.c"
        __label__ = 6; break; //@line 743 "timemodule.c"
      case 6: // $bb6
        var $julyname7=$julyname; //@line 743 "timemodule.c"
        var $32=HEAP[$iftmp_53]; //@line 743 "timemodule.c"
        var $33=_strncpy($julyname7, $32, 9); //@line 743 "timemodule.c"
        var $34=(($julyname+9)&4294967295); //@line 744 "timemodule.c"
        HEAP[$34]=0; //@line 744 "timemodule.c"
        var $35=HEAP[$janzone]; //@line 746 "timemodule.c"
        var $36=HEAP[$julyzone]; //@line 746 "timemodule.c"
        var $37=((($35))|0) < ((($36))|0); //@line 746 "timemodule.c"
        if ($37) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 746 "timemodule.c"
      case 7: // $bb8
        var $38=HEAP[$m_addr]; //@line 748 "timemodule.c"
        var $39=HEAP[$julyzone]; //@line 748 "timemodule.c"
        var $40=_PyModule_AddIntConstant($38, ((__str46329)&4294967295), $39); //@line 748 "timemodule.c"
        var $41=HEAP[$m_addr]; //@line 749 "timemodule.c"
        var $42=HEAP[$janzone]; //@line 749 "timemodule.c"
        var $43=_PyModule_AddIntConstant($41, ((__str47330)&4294967295), $42); //@line 749 "timemodule.c"
        var $44=HEAP[$janzone]; //@line 750 "timemodule.c"
        var $45=HEAP[$julyzone]; //@line 750 "timemodule.c"
        var $46=((($44))|0)!=((($45))|0); //@line 750 "timemodule.c"
        var $47=unSign(($46), 1, 0); //@line 750 "timemodule.c"
        var $48=HEAP[$m_addr]; //@line 750 "timemodule.c"
        var $49=_PyModule_AddIntConstant($48, ((__str48331)&4294967295), $47); //@line 750 "timemodule.c"
        var $julyname9=$julyname; //@line 752 "timemodule.c"
        var $janname10=$janname; //@line 752 "timemodule.c"
        var $50=_Py_BuildValue(((__str49332)&4294967295), $julyname9, $janname10); //@line 752 "timemodule.c"
        var $51=HEAP[$m_addr]; //@line 752 "timemodule.c"
        var $52=_PyModule_AddObject($51, ((__str50333)&4294967295), $50); //@line 752 "timemodule.c"
        __label__ = 9; break; //@line 752 "timemodule.c"
      case 8: // $bb11
        var $53=HEAP[$m_addr]; //@line 756 "timemodule.c"
        var $54=HEAP[$janzone]; //@line 756 "timemodule.c"
        var $55=_PyModule_AddIntConstant($53, ((__str46329)&4294967295), $54); //@line 756 "timemodule.c"
        var $56=HEAP[$m_addr]; //@line 757 "timemodule.c"
        var $57=HEAP[$julyzone]; //@line 757 "timemodule.c"
        var $58=_PyModule_AddIntConstant($56, ((__str47330)&4294967295), $57); //@line 757 "timemodule.c"
        var $59=HEAP[$janzone]; //@line 758 "timemodule.c"
        var $60=HEAP[$julyzone]; //@line 758 "timemodule.c"
        var $61=((($59))|0)!=((($60))|0); //@line 758 "timemodule.c"
        var $62=unSign(($61), 1, 0); //@line 758 "timemodule.c"
        var $63=HEAP[$m_addr]; //@line 758 "timemodule.c"
        var $64=_PyModule_AddIntConstant($63, ((__str48331)&4294967295), $62); //@line 758 "timemodule.c"
        var $janname12=$janname; //@line 760 "timemodule.c"
        var $julyname13=$julyname; //@line 760 "timemodule.c"
        var $65=_Py_BuildValue(((__str49332)&4294967295), $janname12, $julyname13); //@line 760 "timemodule.c"
        var $66=HEAP[$m_addr]; //@line 760 "timemodule.c"
        var $67=_PyModule_AddObject($66, ((__str50333)&4294967295), $65); //@line 760 "timemodule.c"
        __label__ = 9; break; //@line 760 "timemodule.c"
      case 9: // $bb14
        __label__ = 10; break; //@line 776 "timemodule.c"
      case 10: // $return
        STACKTOP = __stackBase__;
        return; //@line 776 "timemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _inittime() {
    var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $iftmp_56=__stackBase__;
        var $iftmp_54=__stackBase__+4;
        var $m=__stackBase__+8;
        var $p=__stackBase__+12;
        var $_alloca_point_=0;
        var $0=_Py_InitModule4(((__str44327)&4294967295), ((_time_methods342)&4294967295), ((_module_doc)&4294967295), 0, 1013); //@line 854 "timemodule.c"
        HEAP[$m]=$0; //@line 854 "timemodule.c"
        var $1=HEAP[$m]; //@line 855 "timemodule.c"
        var $2=($1)==0; //@line 855 "timemodule.c"
        if ($2) { __label__ = 11; break; } else { __label__ = 1; break; } //@line 855 "timemodule.c"
      case 1: // $bb
        var $3=HEAP[_Py_IgnoreEnvironmentFlag]; //@line 859 "timemodule.c"
        var $4=((($3))|0)==0; //@line 859 "timemodule.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 859 "timemodule.c"
      case 2: // $bb1
        var $5=_getenv(((__str59343)&4294967295)); //@line 859 "timemodule.c"
        HEAP[$iftmp_54]=$5; //@line 859 "timemodule.c"
        __label__ = 4; break; //@line 859 "timemodule.c"
      case 3: // $bb2
        HEAP[$iftmp_54]=0; //@line 859 "timemodule.c"
        __label__ = 4; break; //@line 859 "timemodule.c"
      case 4: // $bb3
        var $6=HEAP[$iftmp_54]; //@line 859 "timemodule.c"
        HEAP[$p]=$6; //@line 859 "timemodule.c"
        var $7=HEAP[$p]; //@line 860 "timemodule.c"
        var $8=($7)==0; //@line 860 "timemodule.c"
        if ($8) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 860 "timemodule.c"
      case 5: // $bb4
        var $9=HEAP[$p]; //@line 860 "timemodule.c"
        var $10=HEAP[$9]; //@line 860 "timemodule.c"
        var $11=reSign(($10), 8, 0)==0; //@line 860 "timemodule.c"
        if ($11) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 860 "timemodule.c"
      case 6: // $bb5
        HEAP[$iftmp_56]=1; //@line 860 "timemodule.c"
        __label__ = 8; break; //@line 860 "timemodule.c"
      case 7: // $bb6
        HEAP[$iftmp_56]=0; //@line 860 "timemodule.c"
        __label__ = 8; break; //@line 860 "timemodule.c"
      case 8: // $bb7
        var $12=HEAP[$m]; //@line 860 "timemodule.c"
        var $13=HEAP[$iftmp_56]; //@line 860 "timemodule.c"
        var $14=_PyModule_AddIntConstant($12, ((__str25308)&4294967295), $13); //@line 860 "timemodule.c"
        var $15=HEAP[$m]; //@line 862 "timemodule.c"
        var $16=_PyModule_GetDict($15); //@line 862 "timemodule.c"
        HEAP[_moddict]=$16; //@line 862 "timemodule.c"
        var $17=HEAP[_moddict]; //@line 863 "timemodule.c"
        var $18=(($17)&4294967295); //@line 863 "timemodule.c"
        var $19=HEAP[$18]; //@line 863 "timemodule.c"
        var $20=((($19) + 1)&4294967295); //@line 863 "timemodule.c"
        var $21=(($17)&4294967295); //@line 863 "timemodule.c"
        HEAP[$21]=$20; //@line 863 "timemodule.c"
        var $22=HEAP[$m]; //@line 866 "timemodule.c"
        _inittimezone($22); //@line 866 "timemodule.c"
        var $23=HEAP[_initialized]; //@line 877 "timemodule.c"
        var $24=((($23))|0)==0; //@line 877 "timemodule.c"
        if ($24) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 877 "timemodule.c"
      case 9: // $bb8
        _PyStructSequence_InitType(_StructTimeType, _struct_time_type_desc); //@line 878 "timemodule.c"
        __label__ = 10; break; //@line 878 "timemodule.c"
      case 10: // $bb9
        var $25=((_StructTimeType)&4294967295); //@line 881 "timemodule.c"
        var $26=HEAP[$25]; //@line 881 "timemodule.c"
        var $27=((($26) + 1)&4294967295); //@line 881 "timemodule.c"
        var $28=((_StructTimeType)&4294967295); //@line 881 "timemodule.c"
        HEAP[$28]=$27; //@line 881 "timemodule.c"
        var $29=HEAP[$m]; //@line 882 "timemodule.c"
        var $30=_PyModule_AddObject($29, ((__str60344)&4294967295), _StructTimeType); //@line 882 "timemodule.c"
        HEAP[_initialized]=1; //@line 883 "timemodule.c"
        __label__ = 11; break; //@line 883 "timemodule.c"
      case 11: // $bb10
        __label__ = 12; break; //@line 856 "timemodule.c"
      case 12: // $return
        STACKTOP = __stackBase__;
        return; //@line 856 "timemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _floattime() {
    var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 36);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval=__stackBase__;
        var $0=__stackBase__+8;
        var $t=__stackBase__+16;
        var $t2=__stackBase__+24;
        var $_alloca_point_=0;
        var $1=_gettimeofday($t, 0); //@line 907 "timemodule.c"
        var $2=((($1))|0)==0; //@line 907 "timemodule.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 907 "timemodule.c"
      case 1: // $bb
        var $3=(($t)&4294967295); //@line 908 "timemodule.c"
        var $4=HEAP[$3]; //@line 908 "timemodule.c"
        var $5=((($4))|0); //@line 908 "timemodule.c"
        var $6=(($t+4)&4294967295); //@line 908 "timemodule.c"
        var $7=HEAP[$6]; //@line 908 "timemodule.c"
        var $8=((($7))|0); //@line 908 "timemodule.c"
        var $9=($8) * 0.000001; //@line 908 "timemodule.c"
        var $10=($5) + ($9); //@line 908 "timemodule.c"
        HEAP[$0]=$10; //@line 908 "timemodule.c"
        __label__ = 3; break; //@line 908 "timemodule.c"
      case 2: // $bb1
        var $11=_ftime($t2); //@line 916 "timemodule.c"
        var $12=(($t2)&4294967295); //@line 917 "timemodule.c"
        var $13=HEAP[$12]; //@line 917 "timemodule.c"
        var $14=((($13))|0); //@line 917 "timemodule.c"
        var $15=(($t2+4)&4294967295); //@line 917 "timemodule.c"
        var $16=HEAP[$15]; //@line 917 "timemodule.c"
        var $17=unSign(($16), 16, 0); //@line 917 "timemodule.c"
        var $18=($17) * 0.001; //@line 917 "timemodule.c"
        var $19=($14) + ($18); //@line 917 "timemodule.c"
        HEAP[$0]=$19; //@line 917 "timemodule.c"
        __label__ = 3; break; //@line 917 "timemodule.c"
      case 3: // $bb3
        var $20=HEAP[$0]; //@line 908 "timemodule.c"
        HEAP[$retval]=$20; //@line 908 "timemodule.c"
        __label__ = 4; break; //@line 908 "timemodule.c"
      case 4: // $return
        var $retval4=HEAP[$retval]; //@line 908 "timemodule.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 908 "timemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _floatsleep($secs) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP < STACK_MAX); _memset(__stackBase__, 0, 32);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $secs_addr=__stackBase__;
        var $retval=__stackBase__+8;
        var $0=__stackBase__+12;
        var $t=__stackBase__+16;
        var $frac=__stackBase__+24;
        var $_alloca_point_=0;
        HEAP[$secs_addr]=$secs;
        var $1=HEAP[$secs_addr]; //@line 938 "timemodule.c"
        var $2=_fmod($1, 1); //@line 938 "timemodule.c"
        HEAP[$frac]=$2; //@line 938 "timemodule.c"
        var $3=HEAP[$secs_addr]; //@line 939 "timemodule.c"
        var $4=_floor($3); //@line 939 "timemodule.c"
        HEAP[$secs_addr]=$4; //@line 939 "timemodule.c"
        var $5=HEAP[$secs_addr]; //@line 940 "timemodule.c"
        var $6=((($5))|0); //@line 940 "timemodule.c"
        var $7=(($t)&4294967295); //@line 940 "timemodule.c"
        HEAP[$7]=$6; //@line 940 "timemodule.c"
        var $8=HEAP[$frac]; //@line 941 "timemodule.c"
        var $9=($8) * 1000000; //@line 941 "timemodule.c"
        var $10=((($9))|0); //@line 941 "timemodule.c"
        var $11=(($t+4)&4294967295); //@line 941 "timemodule.c"
        HEAP[$11]=$10; //@line 941 "timemodule.c"
        var $12=_select(0, 0, 0, 0, $t); //@line 943 "timemodule.c"
        var $13=((($12))|0)!=0; //@line 943 "timemodule.c"
        if ($13) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 943 "timemodule.c"
      case 1: // $bb
        var $14=___errno_location(); //@line 945 "timemodule.c"
        var $15=HEAP[$14]; //@line 945 "timemodule.c"
        var $16=((($15))|0)!=4; //@line 945 "timemodule.c"
        if ($16) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 945 "timemodule.c"
      case 2: // $bb1
        var $17=HEAP[_PyExc_IOError]; //@line 950 "timemodule.c"
        var $18=_PyErr_SetFromErrno($17); //@line 950 "timemodule.c"
        HEAP[$0]=-1; //@line 951 "timemodule.c"
        __label__ = 4; break; //@line 951 "timemodule.c"
      case 3: // $bb2
        HEAP[$0]=0; //@line 1051 "timemodule.c"
        __label__ = 4; break; //@line 1051 "timemodule.c"
      case 4: // $bb3
        var $19=HEAP[$0]; //@line 951 "timemodule.c"
        HEAP[$retval]=$19; //@line 951 "timemodule.c"
        __label__ = 5; break; //@line 951 "timemodule.c"
      case 5: // $return
        var $retval4=HEAP[$retval]; //@line 951 "timemodule.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 951 "timemodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  
FUNCTION_TABLE = FUNCTION_TABLE.concat([0,0,_localtime,0,_gmtime,0,_delta_total_seconds,0,_delta_reduce,0,_delta_add,0,_delta_subtract,0,_delta_multiply,0,_delta_divide,0,_delta_negative,0,_delta_positive,0,_delta_abs,0,_delta_nonzero,0,_delta_repr,0,_delta_hash,0,_delta_str,0,_PyObject_GenericGetAttr,0,_delta_richcompare,0,_delta_new,0,_date_year,0,_date_month,0,_date_day,0,_date_fromtimestamp,0,_date_fromordinal,0,_date_today,0,_date_ctime,0,_date_strftime,0,_date_format,0,_date_timetuple,0,_date_isocalendar,0,_date_isoformat,0,_date_isoweekday,0,_date_toordinal,0,_date_weekday,0,_date_replace,0,_date_reduce,0,_date_add,0,_date_subtract,0,_date_repr,0,_date_hash,0,_date_str,0,_date_richcompare,0,_date_new,0,_tzinfo_tzname,0,_tzinfo_utcoffset,0,_tzinfo_dst,0,_tzinfo_fromutc,0,_tzinfo_reduce,0,_PyType_GenericNew,0,_time_hour,0,_time_minute,0,_py_time_second,0,_time_microsecond,0,_time_tzinfo,0,_time_isoformat,0,_time_strftime,0,_time_utcoffset,0,_time_tzname,0,_time_dst,0,_time_replace,0,_time_reduce,0,_time_nonzero,0,_time_dealloc,0,_time_repr,0,_time_hash,0,_time_str,0,_time_richcompare,0,_time_alloc,0,_time_new,0,_datetime_hour,0,_datetime_minute,0,_datetime_second,0,_datetime_microsecond,0,_datetime_tzinfo,0,_datetime_now,0,_datetime_utcnow,0,_datetime_fromtimestamp,0,_datetime_utcfromtimestamp,0,_datetime_strptime,0,_datetime_combine,0,_datetime_getdate,0,_datetime_gettime,0,_datetime_gettimetz,0,_datetime_ctime,0,_datetime_timetuple,0,_datetime_utctimetuple,0,_datetime_isoformat,0,_datetime_utcoffset,0,_datetime_tzname,0,_datetime_dst,0,_datetime_replace,0,_datetime_astimezone,0,_datetime_reduce,0,_datetime_add,0,_datetime_subtract,0,_datetime_dealloc,0,_datetime_repr,0,_datetime_hash,0,_datetime_str,0,_datetime_richcompare,0,_datetime_alloc,0,_datetime_new,0,_new_date_ex,0,_new_datetime_ex,0,_new_time_ex,0,_new_delta_ex,0,_time_time346,0,_time_clock,0,_time_sleep,0,_time_gmtime,0,_time_localtime,0,_time_asctime,0,_time_ctime,0,_time_mktime,0,_time_strftime347,0,_time_strptime,0,_time_tzset,0]);

// === Auto-generated postamble setup entry stuff ===

function run(args) {
  
__str=allocate([121,32,62,32,48,0] /* y > 0\00 */, "i8", ALLOC_NORMAL);
__str1=allocate([46,46,47,99,112,121,116,104,111,110,47,77,111,100,117,108,101,115,47,100,97,116,101,116,105,109,101,109,111,100,117,108,101,46,99,0] /* ../cpython/Modules/d */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8440=allocate([100,105,118,109,111,100,0] /* divmod\00 */, "i8", ALLOC_NORMAL);
__str2=allocate([48,32,60,61,32,42,114,32,38,38,32,42,114,32,60,32,121,0] /* 0 <= _r && _r < y\00 */, "i8", ALLOC_NORMAL);
__days_in_month=allocate([0, 0, 0, 0, 31, 0, 0, 0, 28, 0, 0, 0, 31, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0, 31, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_NORMAL);
__days_before_month=allocate([0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 59, 0, 0, 0, 90, 0, 0, 0, 120, 0, 0, 0, 151, 0, 0, 0, 181, 0, 0, 0, 212, 0, 0, 0, 243, 0, 0, 0, 273, 0, 0, 0, 304, 0, 0, 0, 334, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_NORMAL);
__str3=allocate([109,111,110,116,104,32,62,61,32,49,0] /* month >= 1\00 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8488=allocate([100,97,121,115,95,105,110,95,109,111,110,116,104,0] /* days_in_month\00 */, "i8", ALLOC_NORMAL);
__str4=allocate([109,111,110,116,104,32,60,61,32,49,50,0] /* month <= 12\00 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8505=allocate([100,97,121,115,95,98,101,102,111,114,101,95,109,111,110,116,104,0] /* days_before_month\00 */, "i8", ALLOC_NORMAL);
__str5=allocate([121,101,97,114,32,62,61,32,48,0] /* year >= 0\00 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8522=allocate([100,97,121,115,95,98,101,102,111,114,101,95,121,101,97,114,0] /* days_before_year\00 */, "i8", ALLOC_NORMAL);
__str6=allocate([121,32,61,61,32,45,49,0] /* y == -1\00 */, "i8", ALLOC_NORMAL);
__str7=allocate([111,114,100,105,110,97,108,32,62,61,32,49,0] /* ordinal >= 1\00 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8550=allocate([111,114,100,95,116,111,95,121,109,100,0] /* ord_to_ymd\00 */, "i8", ALLOC_NORMAL);
__str8=allocate([110,32,61,61,32,48,0] /* n == 0\00 */, "i8", ALLOC_NORMAL);
__str9=allocate([108,101,97,112,121,101,97,114,32,61,61,32,105,115,95,108,101,97,112,40,42,121,101,97,114,41,0] /* leapyear == is_leap( */, "i8", ALLOC_NORMAL);
__str10=allocate([48,32,60,61,32,110,0] /* 0 <= n\00 */, "i8", ALLOC_NORMAL);
__str11=allocate([110,32,60,32,100,97,121,115,95,105,110,95,109,111,110,116,104,40,42,121,101,97,114,44,32,42,109,111,110,116,104,41,0] /* n < days_in_month(_y */, "i8", ALLOC_NORMAL);
__str12=allocate([100,97,121,115,61,37,100,59,32,109,117,115,116,32,104,97,118,101,32,109,97,103,110,105,116,117,100,101,32,60,61,32,37,100,0] /* days=%d; must have m */, "i8", ALLOC_NORMAL);
__str13=allocate([121,101,97,114,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* year is out of range */, "i8", ALLOC_NORMAL);
__str14=allocate([109,111,110,116,104,32,109,117,115,116,32,98,101,32,105,110,32,49,46,46,49,50,0] /* month must be in 1.. */, "i8", ALLOC_NORMAL);
__str15=allocate([100,97,121,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,32,102,111,114,32,109,111,110,116,104,0] /* day is out of range  */, "i8", ALLOC_NORMAL);
__str16=allocate([104,111,117,114,32,109,117,115,116,32,98,101,32,105,110,32,48,46,46,50,51,0] /* hour must be in 0..2 */, "i8", ALLOC_NORMAL);
__str17=allocate([109,105,110,117,116,101,32,109,117,115,116,32,98,101,32,105,110,32,48,46,46,53,57,0] /* minute must be in 0. */, "i8", ALLOC_NORMAL);
__str18=allocate([115,101,99,111,110,100,32,109,117,115,116,32,98,101,32,105,110,32,48,46,46,53,57,0] /* second must be in 0. */, "i8", ALLOC_NORMAL);
__str19=allocate([109,105,99,114,111,115,101,99,111,110,100,32,109,117,115,116,32,98,101,32,105,110,32,48,46,46,57,57,57,57,57,57,0] /* microsecond must be  */, "i8", ALLOC_NORMAL);
__str20=allocate([102,97,99,116,111,114,32,62,32,48,0] /* factor > 0\00 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8694=allocate([110,111,114,109,97,108,105,122,101,95,112,97,105,114,0] /* normalize_pair\00 */, "i8", ALLOC_NORMAL);
__str21=allocate([108,111,32,33,61,32,104,105,0] /* lo != hi\00 */, "i8", ALLOC_NORMAL);
__str22=allocate([33,32,40,40,40,40,110,101,119,95,104,105,41,32,94,32,40,42,104,105,41,41,32,38,32,40,40,110,101,119,95,104,105,41,32,94,32,40,110,117,109,95,104,105,41,41,41,32,60,32,48,41,0] /* ! ((((new_hi) ^ (_hi */, "i8", ALLOC_NORMAL);
__str23=allocate([48,32,60,61,32,42,108,111,32,38,38,32,42,108,111,32,60,32,102,97,99,116,111,114,0] /* 0 <= _lo && _lo < fa */, "i8", ALLOC_NORMAL);
__str24=allocate([48,32,60,61,32,42,115,32,38,38,32,42,115,32,60,32,50,52,42,51,54,48,48,0] /* 0 <= _s && _s < 24_3 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8725=allocate([110,111,114,109,97,108,105,122,101,95,100,95,115,95,117,115,0] /* normalize_d_s_us\00 */, "i8", ALLOC_NORMAL);
__str25=allocate([48,32,60,61,32,42,117,115,32,38,38,32,42,117,115,32,60,32,49,48,48,48,48,48,48,0] /* 0 <= _us && _us < 10 */, "i8", ALLOC_NORMAL);
__str26=allocate([49,32,60,61,32,42,109,32,38,38,32,42,109,32,60,61,32,49,50,0] /* 1 <= _m && _m <= 12\ */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8752=allocate([110,111,114,109,97,108,105,122,101,95,121,95,109,95,100,0] /* normalize_y_m_d\00 */, "i8", ALLOC_NORMAL);
__str27=allocate([42,109,32,62,32,48,0] /* _m > 0\00 */, "i8", ALLOC_NORMAL);
__str28=allocate([42,100,32,62,32,48,0] /* _d > 0\00 */, "i8", ALLOC_NORMAL);
__str29=allocate([100,97,116,101,32,118,97,108,117,101,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* date value out of ra */, "i8", ALLOC_NORMAL);
__str30=allocate([48,32,60,61,32,115,101,99,111,110,100,115,32,38,38,32,115,101,99,111,110,100,115,32,60,32,50,52,42,51,54,48,48,0] /* 0 <= seconds && seco */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8976=allocate([110,101,119,95,100,101,108,116,97,95,101,120,0] /* new_delta_ex\00 */, "i8", ALLOC_NORMAL);
__str31=allocate([48,32,60,61,32,109,105,99,114,111,115,101,99,111,110,100,115,32,38,38,32,109,105,99,114,111,115,101,99,111,110,100,115,32,60,32,49,48,48,48,48,48,48,0] /* 0 <= microseconds && */, "i8", ALLOC_NORMAL);
__str32=allocate([116,122,105,110,102,111,32,97,114,103,117,109,101,110,116,32,109,117,115,116,32,98,101,32,78,111,110,101,32,111,114,32,111,102,32,97,32,116,122,105,110,102,111,32,115,117,98,99,108,97,115,115,44,32,110,111,116,32,116,121,112,101,32,39,37,115,39,0] /* tzinfo argument must */, "i8", ALLOC_NORMAL);
__str33=allocate([116,122,105,110,102,111,32,38,38,32,109,101,116,104,110,97,109,101,32,38,38,32,116,122,105,110,102,111,97,114,103,0] /* tzinfo && methname & */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___9023=allocate([99,97,108,108,95,116,122,105,110,102,111,95,109,101,116,104,111,100,0] /* call_tzinfo_method\0 */, "i8", ALLOC_NORMAL);
__str34=allocate([99,104,101,99,107,95,116,122,105,110,102,111,95,115,117,98,99,108,97,115,115,40,116,122,105,110,102,111,41,32,62,61,32,48,0] /* check_tzinfo_subclas */, "i8", ALLOC_NORMAL);
__str35=allocate([79,0] /* O\00 */, "i8", ALLOC_NORMAL);
__str36=allocate([116,122,105,110,102,111,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* tzinfo != ((void _)0 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___9075=allocate([99,97,108,108,95,117,116,99,95,116,122,105,110,102,111,95,109,101,116,104,111,100,0] /* call_utc_tzinfo_meth */, "i8", ALLOC_NORMAL);
__str37=allocate([40,40,40,40,80,121,79,98,106,101,99,116,42,41,40,116,122,105,110,102,111,41,41,45,62,111,98,95,116,121,112,101,41,32,61,61,32,40,38,80,121,68,97,116,101,84,105,109,101,95,84,90,73,110,102,111,84,121,112,101,41,32,124,124,32,80,121,84,121,112,101,95,73,115,83,117,98,116,121,112,101,40,40,40,40,80,121,79,98,106,101,99,116,42,41,40,116,122,105,110,102,111,41,41,45,62,111,98,95,116,121,112,101,41,44,32,40,38,80,121,68,97,116,101,84,105,109,101,95,84,90,73,110,102,111,84,121,112,101,41,41,41,0] /* ((((PyObject_)(tzinf */, "i8", ALLOC_NORMAL);
__str38=allocate([116,122,105,110,102,111,97,114,103,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* tzinfoarg != ((void  */, "i8", ALLOC_NORMAL);
__str39=allocate([116,122,105,110,102,111,46,37,115,40,41,32,109,117,115,116,32,114,101,116,117,114,110,32,97,32,119,104,111,108,101,32,110,117,109,98,101,114,32,111,102,32,109,105,110,117,116,101,115,0] /* tzinfo.%s() must ret */, "i8", ALLOC_NORMAL);
__str40=allocate([116,122,105,110,102,111,46,37,115,40,41,32,109,117,115,116,32,114,101,116,117,114,110,32,78,111,110,101,32,111,114,32,116,105,109,101,100,101,108,116,97,44,32,110,111,116,32,39,37,115,39,0] /* tzinfo.%s() must ret */, "i8", ALLOC_NORMAL);
__str41=allocate([116,122,105,110,102,111,46,37,115,40,41,32,114,101,116,117,114,110,101,100,32,37,100,59,32,109,117,115,116,32,98,101,32,105,110,32,45,49,52,51,57,32,46,46,32,49,52,51,57,0] /* tzinfo.%s() returned */, "i8", ALLOC_NORMAL);
__str42=allocate([117,116,99,111,102,102,115,101,116,0] /* utcoffset\00 */, "i8", ALLOC_NORMAL);
__str43=allocate([116,122,105,110,102,111,32,38,38,32,110,97,109,101,32,38,38,32,116,122,105,110,102,111,97,114,103,0] /* tzinfo && name && tz */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___9150=allocate([111,102,102,115,101,116,95,97,115,95,116,105,109,101,100,101,108,116,97,0] /* offset_as_timedelta\ */, "i8", ALLOC_NORMAL);
__str44=allocate([100,115,116,0] /* dst\00 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___9191=allocate([99,97,108,108,95,116,122,110,97,109,101,0] /* call_tzname\00 */, "i8", ALLOC_NORMAL);
__str45=allocate([116,122,110,97,109,101,0] /* tzname\00 */, "i8", ALLOC_NORMAL);
__str46=allocate([116,122,105,110,102,111,46,116,122,110,97,109,101,40,41,32,109,117,115,116,32,114,101,116,117,114,110,32,78,111,110,101,32,111,114,32,97,32,115,116,114,105,110,103,44,32,110,111,116,32,39,37,115,39,0] /* tzinfo.tzname() must */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___9239=allocate([99,108,97,115,115,105,102,121,95,117,116,99,111,102,102,115,101,116,0] /* classify_utcoffset\0 */, "i8", ALLOC_NORMAL);
__str47=allocate([40,40,40,40,40,40,80,121,79,98,106,101,99,116,42,41,40,114,101,112,114,41,41,45,62,111,98,95,116,121,112,101,41,41,45,62,116,112,95,102,108,97,103,115,32,38,32,40,40,49,76,60,60,50,55,41,41,41,32,33,61,32,48,41,0] /* ((((((PyObject_)(rep */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___9306=allocate([97,112,112,101,110,100,95,107,101,121,119,111,114,100,95,116,122,105,110,102,111,0] /* append_keyword_tzinf */, "i8", ALLOC_NORMAL);
__str48=allocate([116,122,105,110,102,111,0] /* tzinfo\00 */, "i8", ALLOC_NORMAL);
__str49=allocate([80,121,83,116,114,105,110,103,95,65,115,83,116,114,105,110,103,40,114,101,112,114,41,91,80,121,83,116,114,105,110,103,95,83,105,122,101,40,114,101,112,114,41,45,49,93,32,61,61,32,39,41,39,0] /* PyString_AsString(re */, "i8", ALLOC_NORMAL);
__str50=allocate([44,32,116,122,105,110,102,111,61,0] /* , tzinfo=\00 */, "i8", ALLOC_NORMAL);
__str51=allocate([41,0] /* )\00 */, "i8", ALLOC_NORMAL);
_MonthNames_9355=allocate(48, "i8*", ALLOC_NORMAL);
__str52=allocate([74,97,110,0] /* Jan\00 */, "i8", ALLOC_NORMAL);
__str53=allocate([70,101,98,0] /* Feb\00 */, "i8", ALLOC_NORMAL);
__str54=allocate([77,97,114,0] /* Mar\00 */, "i8", ALLOC_NORMAL);
__str55=allocate([65,112,114,0] /* Apr\00 */, "i8", ALLOC_NORMAL);
__str56=allocate([77,97,121,0] /* May\00 */, "i8", ALLOC_NORMAL);
__str57=allocate([74,117,110,0] /* Jun\00 */, "i8", ALLOC_NORMAL);
__str58=allocate([74,117,108,0] /* Jul\00 */, "i8", ALLOC_NORMAL);
__str59=allocate([65,117,103,0] /* Aug\00 */, "i8", ALLOC_NORMAL);
__str60=allocate([83,101,112,0] /* Sep\00 */, "i8", ALLOC_NORMAL);
__str61=allocate([79,99,116,0] /* Oct\00 */, "i8", ALLOC_NORMAL);
__str62=allocate([78,111,118,0] /* Nov\00 */, "i8", ALLOC_NORMAL);
__str63=allocate([68,101,99,0] /* Dec\00 */, "i8", ALLOC_NORMAL);
_DayNames_9354=allocate(28, "i8*", ALLOC_NORMAL);
__str64=allocate([77,111,110,0] /* Mon\00 */, "i8", ALLOC_NORMAL);
__str65=allocate([84,117,101,0] /* Tue\00 */, "i8", ALLOC_NORMAL);
__str66=allocate([87,101,100,0] /* Wed\00 */, "i8", ALLOC_NORMAL);
__str67=allocate([84,104,117,0] /* Thu\00 */, "i8", ALLOC_NORMAL);
__str68=allocate([70,114,105,0] /* Fri\00 */, "i8", ALLOC_NORMAL);
__str69=allocate([83,97,116,0] /* Sat\00 */, "i8", ALLOC_NORMAL);
__str70=allocate([83,117,110,0] /* Sun\00 */, "i8", ALLOC_NORMAL);
__str71=allocate([37,115,32,37,115,32,37,50,100,32,37,48,50,100,58,37,48,50,100,58,37,48,50,100,32,37,48,52,100,0] /* %s %s %2d %02d:%02d: */, "i8", ALLOC_NORMAL);
__str72=allocate([98,117,102,108,101,110,32,62,61,32,49,0] /* buflen >= 1\00 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___9398=allocate([102,111,114,109,97,116,95,117,116,99,111,102,102,115,101,116,0] /* format_utcoffset\00 */, "i8", ALLOC_NORMAL);
__str73=allocate([37,99,37,48,50,100,37,115,37,48,50,100,0] /* %c%02d%s%02d\00 */, "i8", ALLOC_NORMAL);
__str74=allocate([37,48,54,100,0] /* %06d\00 */, "i8", ALLOC_NORMAL);
__str75=allocate([111,98,106,101,99,116,32,38,38,32,102,111,114,109,97,116,32,38,38,32,116,105,109,101,116,117,112,108,101,0] /* object && format &&  */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___9485=allocate([119,114,97,112,95,115,116,114,102,116,105,109,101,0] /* wrap_strftime\00 */, "i8", ALLOC_NORMAL);
__str76=allocate([40,40,40,40,112,121,121,101,97,114,41,45,62,111,98,95,116,121,112,101,41,45,62,116,112,95,102,108,97,103,115,32,38,32,40,40,49,76,60,60,50,51,41,41,41,32,33,61,32,48,41,0] /* ((((pyyear)->ob_type */, "i8", ALLOC_NORMAL);
__str77=allocate([121,101,97,114,61,37,108,100,32,105,115,32,98,101,102,111,114,101,32,49,57,48,48,59,32,116,104,101,32,100,97,116,101,116,105,109,101,32,115,116,114,102,116,105,109,101,40,41,32,109,101,116,104,111,100,115,32,114,101,113,117,105,114,101,32,121,101,97,114,32,62,61,32,49,57,48,48,0] /* year=%ld is before 1 */, "i8", ALLOC_NORMAL);
__str78=allocate([115,116,114,102,116,105,109,101,32,102,111,114,109,97,116,32,101,110,100,115,32,119,105,116,104,32,114,97,119,32,37,0] /* strftime format ends */, "i8", ALLOC_NORMAL);
__str79=allocate(1, "i8", ALLOC_NORMAL);
__str80=allocate([122,114,101,112,108,97,99,101,109,101,110,116,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* zreplacement != ((vo */, "i8", ALLOC_NORMAL);
__str81=allocate([40,40,40,40,40,40,80,121,79,98,106,101,99,116,42,41,40,116,101,109,112,41,41,45,62,111,98,95,116,121,112,101,41,41,45,62,116,112,95,102,108,97,103,115,32,38,32,40,40,49,76,60,60,50,55,41,41,41,32,33,61,32,48,41,0] /* ((((((PyObject_)(tem */, "i8", ALLOC_NORMAL);
__str82=allocate([114,101,112,108,97,99,101,0] /* replace\00 */, "i8", ALLOC_NORMAL);
__str83=allocate([115,115,0] /* ss\00 */, "i8", ALLOC_NORMAL);
__str84=allocate([37,0] /* %\00 */, "i8", ALLOC_NORMAL);
__str85=allocate([37,37,0] /* %%\00 */, "i8", ALLOC_NORMAL);
__str86=allocate([116,122,110,97,109,101,46,114,101,112,108,97,99,101,40,41,32,100,105,100,32,110,111,116,32,114,101,116,117,114,110,32,97,32,115,116,114,105,110,103,0] /* tzname.replace() did */, "i8", ALLOC_NORMAL);
__str87=allocate([90,114,101,112,108,97,99,101,109,101,110,116,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* Zreplacement != ((vo */, "i8", ALLOC_NORMAL);
__str88=allocate([102,114,101,112,108,97,99,101,109,101,110,116,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* freplacement != ((vo */, "i8", ALLOC_NORMAL);
__str89=allocate([40,40,40,40,40,40,80,121,79,98,106,101,99,116,42,41,40,102,114,101,112,108,97,99,101,109,101,110,116,41,41,45,62,111,98,95,116,121,112,101,41,41,45,62,116,112,95,102,108,97,103,115,32,38,32,40,40,49,76,60,60,50,55,41,41,41,32,33,61,32,48,41,0] /* ((((((PyObject_)(fre */, "i8", ALLOC_NORMAL);
__str90=allocate([112,116,111,97,112,112,101,110,100,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* ptoappend != ((void  */, "i8", ALLOC_NORMAL);
__str91=allocate([117,115,101,100,110,101,119,32,60,61,32,116,111,116,97,108,110,101,119,0] /* usednew <= totalnew\ */, "i8", ALLOC_NORMAL);
__str92=allocate([116,105,109,101,0] /* time\00 */, "i8", ALLOC_NORMAL);
__str93=allocate([115,116,114,102,116,105,109,101,0] /* strftime\00 */, "i8", ALLOC_NORMAL);
__str94=allocate([79,79,0] /* OO\00 */, "i8", ALLOC_NORMAL);
__str95=allocate([37,48,52,100,45,37,48,50,100,45,37,48,50,100,0] /* %04d-%02d-%02d\00 */, "i8", ALLOC_NORMAL);
__str96=allocate([98,117,102,102,108,101,110,32,62,61,32,120,0] /* bufflen >= x\00 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___9722=allocate([105,115,111,102,111,114,109,97,116,95,100,97,116,101,0] /* isoformat_date\00 */, "i8", ALLOC_NORMAL);
__str97=allocate([37,48,50,100,58,37,48,50,100,58,37,48,50,100,0] /* %02d:%02d:%02d\00 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___9746=allocate([105,115,111,102,111,114,109,97,116,95,116,105,109,101,0] /* isoformat_time\00 */, "i8", ALLOC_NORMAL);
__str98=allocate([46,37,48,54,100,0] /* .%06d\00 */, "i8", ALLOC_NORMAL);
__str99=allocate([40,41,0] /* ()\00 */, "i8", ALLOC_NORMAL);
__str100=allocate([115,116,114,117,99,116,95,116,105,109,101,0] /* struct_time\00 */, "i8", ALLOC_NORMAL);
__str101=allocate([40,40,105,105,105,105,105,105,105,105,105,41,41,0] /* ((iiiiiiiii))\00 */, "i8", ALLOC_NORMAL);
__str102=allocate([33,32,34,111,112,32,117,110,107,110,111,119,110,34,0] /* ! \22op unknown\22\0 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___9835=allocate([100,105,102,102,95,116,111,95,98,111,111,108,0] /* diff_to_bool\00 */, "i8", ALLOC_NORMAL);
__str103=allocate([99,97,110,39,116,32,99,111,109,112,97,114,101,32,37,115,32,116,111,32,37,115,0] /* can't compare %s to  */, "i8", ALLOC_NORMAL);
_us_per_us=allocate(1, "%struct.PyDateTime_TZInfo*", ALLOC_NORMAL);
_us_per_ms=allocate(1, "%struct.PyDateTime_TZInfo*", ALLOC_NORMAL);
_us_per_second=allocate(1, "%struct.PyDateTime_TZInfo*", ALLOC_NORMAL);
_us_per_minute=allocate(1, "%struct.PyDateTime_TZInfo*", ALLOC_NORMAL);
_us_per_hour=allocate(1, "%struct.PyDateTime_TZInfo*", ALLOC_NORMAL);
_us_per_day=allocate(1, "%struct.PyDateTime_TZInfo*", ALLOC_NORMAL);
_us_per_week=allocate(1, "%struct.PyDateTime_TZInfo*", ALLOC_NORMAL);
_seconds_per_day=allocate(1, "%struct.PyDateTime_TZInfo*", ALLOC_NORMAL);
__str104=allocate([48,32,60,61,32,116,101,109,112,32,38,38,32,116,101,109,112,32,60,32,49,48,48,48,48,48,48,0] /* 0 <= temp && temp <  */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___9958=allocate([109,105,99,114,111,115,101,99,111,110,100,115,95,116,111,95,100,101,108,116,97,95,101,120,0] /* microseconds_to_delt */, "i8", ALLOC_NORMAL);
__str105=allocate([80,121,69,114,114,95,79,99,99,117,114,114,101,100,40,41,0] /* PyErr_Occurred()\00 */, "i8", ALLOC_NORMAL);
__str106=allocate([48,32,60,61,32,116,101,109,112,32,38,38,32,116,101,109,112,32,60,32,50,52,42,51,54,48,48,0] /* 0 <= temp && temp <  */, "i8", ALLOC_NORMAL);
__str107=allocate([110,111,114,109,97,108,105,122,101,100,32,100,97,121,115,32,116,111,111,32,108,97,114,103,101,32,116,111,32,102,105,116,32,105,110,32,97,32,67,32,105,110,116,0] /* normalized days too  */, "i8", ALLOC_NORMAL);
__str108=allocate([40,40,40,80,121,68,97,116,101,84,105,109,101,95,68,101,108,116,97,32,42,41,40,115,101,108,102,41,41,45,62,109,105,99,114,111,115,101,99,111,110,100,115,41,32,62,61,32,48,0] /* (((PyDateTime_Delta  */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___10169=allocate([100,101,108,116,97,95,97,98,115,0] /* delta_abs\00 */, "i8", ALLOC_NORMAL);
__str109=allocate([40,40,40,80,121,68,97,116,101,84,105,109,101,95,68,101,108,116,97,32,42,41,40,115,101,108,102,41,41,45,62,115,101,99,111,110,100,115,41,32,62,61,32,48,0] /* (((PyDateTime_Delta  */, "i8", ALLOC_NORMAL);
__str110=allocate([110,117,109,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* num != ((void _)0)\0 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___10356=allocate([97,99,99,117,109,0] /* accum\00 */, "i8", ALLOC_NORMAL);
__str111=allocate([40,40,40,40,102,97,99,116,111,114,41,45,62,111,98,95,116,121,112,101,41,45,62,116,112,95,102,108,97,103,115,32,38,32,40,40,49,76,60,60,50,51,41,41,41,32,33,61,32,48,41,32,124,124,32,40,40,40,40,40,40,80,121,79,98,106,101,99,116,42,41,40,102,97,99,116,111,114,41,41,45,62,111,98,95,116,121,112,101,41,41,45,62,116,112,95,102,108,97,103,115,32,38,32,40,40,49,76,60,60,50,52,41,41,41,32,33,61,32,48,41,0] /* ((((factor)->ob_type */, "i8", ALLOC_NORMAL);
__str112=allocate([117,110,115,117,112,112,111,114,116,101,100,32,116,121,112,101,32,102,111,114,32,116,105,109,101,100,101,108,116,97,32,37,115,32,99,111,109,112,111,110,101,110,116,58,32,37,115,0] /* unsupported type for */, "i8", ALLOC_NORMAL);
__str113=allocate([124,79,79,79,79,79,79,79,58,95,95,110,101,119,95,95,0] /* |OOOOOOO:__new__\00 */, "i8", ALLOC_NORMAL);
_keywords_10491=allocate(32, "i8*", ALLOC_NORMAL);
__str114=allocate([100,97,121,115,0] /* days\00 */, "i8", ALLOC_NORMAL);
__str115=allocate([115,101,99,111,110,100,115,0] /* seconds\00 */, "i8", ALLOC_NORMAL);
__str116=allocate([109,105,99,114,111,115,101,99,111,110,100,115,0] /* microseconds\00 */, "i8", ALLOC_NORMAL);
__str117=allocate([109,105,108,108,105,115,101,99,111,110,100,115,0] /* milliseconds\00 */, "i8", ALLOC_NORMAL);
__str118=allocate([109,105,110,117,116,101,115,0] /* minutes\00 */, "i8", ALLOC_NORMAL);
__str119=allocate([104,111,117,114,115,0] /* hours\00 */, "i8", ALLOC_NORMAL);
__str120=allocate([119,101,101,107,115,0] /* weeks\00 */, "i8", ALLOC_NORMAL);
__str121=allocate([37,115,40,37,100,44,32,37,100,44,32,37,100,41,0] /* %s(%d, %d, %d)\00 */, "i8", ALLOC_NORMAL);
__str122=allocate([37,115,40,37,100,44,32,37,100,41,0] /* %s(%d, %d)\00 */, "i8", ALLOC_NORMAL);
__str123=allocate([37,115,40,37,100,41,0] /* %s(%d)\00 */, "i8", ALLOC_NORMAL);
__str124=allocate([115,0] /* s\00 */, "i8", ALLOC_NORMAL);
__str125=allocate([37,100,32,100,97,121,37,115,44,32,0] /* %d day%s, \00 */, "i8", ALLOC_NORMAL);
__str126=allocate([37,100,58,37,48,50,100,58,37,48,50,100,0] /* %d:%02d:%02d\00 */, "i8", ALLOC_NORMAL);
__str127=allocate([103,111,111,102,121,32,114,101,115,117,108,116,32,102,114,111,109,32,80,121,79,83,95,115,110,112,114,105,110,116,102,0] /* goofy result from Py */, "i8", ALLOC_NORMAL);
__str128=allocate([105,105,105,0] /* iii\00 */, "i8", ALLOC_NORMAL);
__str129=allocate([79,78,0] /* ON\00 */, "i8", ALLOC_NORMAL);
__str130=allocate([78,117,109,98,101,114,32,111,102,32,100,97,121,115,46,0] /* Number of days.\00 */, "i8", ALLOC_NORMAL);
__str131=allocate([78,117,109,98,101,114,32,111,102,32,115,101,99,111,110,100,115,32,40,62,61,32,48,32,97,110,100,32,108,101,115,115,32,116,104,97,110,32,49,32,100,97,121,41,46,0] /* Number of seconds (> */, "i8", ALLOC_NORMAL);
__str132=allocate([78,117,109,98,101,114,32,111,102,32,109,105,99,114,111,115,101,99,111,110,100,115,32,40,62,61,32,48,32,97,110,100,32,108,101,115,115,32,116,104,97,110,32,49,32,115,101,99,111,110,100,41,46,0] /* Number of microsecon */, "i8", ALLOC_NORMAL);
_delta_members=allocate([0, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 20, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str133=allocate([116,111,116,97,108,95,115,101,99,111,110,100,115,0] /* total_seconds\00 */, "i8", ALLOC_NORMAL);
__str134=allocate([84,111,116,97,108,32,115,101,99,111,110,100,115,32,105,110,32,116,104,101,32,100,117,114,97,116,105,111,110,46,0] /* Total seconds in the */, "i8", ALLOC_NORMAL);
__str135=allocate([95,95,114,101,100,117,99,101,95,95,0] /* __reduce__\00 */, "i8", ALLOC_NORMAL);
__str136=allocate([95,95,114,101,100,117,99,101,95,95,40,41,32,45,62,32,40,99,108,115,44,32,115,116,97,116,101,41,0] /* __reduce__() -> (cls */, "i8", ALLOC_NORMAL);
_delta_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_delta_doc=allocate([68,105,102,102,101,114,101,110,99,101,32,98,101,116,119,101,101,110,32,116,119,111,32,100,97,116,101,116,105,109,101,32,118,97,108,117,101,115,46,0] /* Difference between t */, "i8", ALLOC_NORMAL);
_delta_as_number=allocate(156, ["%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo**, %struct.PyDateTime_TZInfo**)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i8","i8","i8","i8"], ALLOC_NORMAL);
__str137=allocate([100,97,116,101,116,105,109,101,46,116,105,109,101,100,101,108,116,97,0] /* datetime.timedelta\0 */, "i8", ALLOC_NORMAL);
_PyDateTime_DeltaType=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132603, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyDateTime_TZInfo*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, %struct.FILE*, i32)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, i8*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, i8*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, i32 (%struct.PyDateTime_TZInfo*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyDateTime_TZInfo*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct._typeobject*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"void (i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str138=allocate([121,101,97,114,0] /* year\00 */, "i8", ALLOC_NORMAL);
__str139=allocate([109,111,110,116,104,0] /* month\00 */, "i8", ALLOC_NORMAL);
__str140=allocate([100,97,121,0] /* day\00 */, "i8", ALLOC_NORMAL);
_date_getset=allocate(80, ["i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_date_kws=allocate(16, "i8*", ALLOC_NORMAL);
__str141=allocate([116,105,109,101,115,116,97,109,112,32,111,117,116,32,111,102,32,114,97,110,103,101,32,102,111,114,32,112,108,97,116,102,111,114,109,32,108,111,99,97,108,116,105,109,101,40,41,32,102,117,110,99,116,105,111,110,0] /* timestamp out of ran */, "i8", ALLOC_NORMAL);
__str142=allocate([102,114,111,109,116,105,109,101,115,116,97,109,112,0] /* fromtimestamp\00 */, "i8", ALLOC_NORMAL);
__str143=allocate([100,58,102,114,111,109,116,105,109,101,115,116,97,109,112,0] /* d:fromtimestamp\00 */, "i8", ALLOC_NORMAL);
__str144=allocate([105,58,102,114,111,109,111,114,100,105,110,97,108,0] /* i:fromordinal\00 */, "i8", ALLOC_NORMAL);
__str145=allocate([111,114,100,105,110,97,108,32,109,117,115,116,32,98,101,32,62,61,32,49,0] /* ordinal must be >= 1 */, "i8", ALLOC_NORMAL);
__str146=allocate([105,115,111,102,111,114,109,97,116,0] /* isoformat\00 */, "i8", ALLOC_NORMAL);
__str147=allocate([115,35,58,115,116,114,102,116,105,109,101,0] /* s#:strftime\00 */, "i8", ALLOC_NORMAL);
_keywords_11164=allocate(8, "i8*", ALLOC_NORMAL);
__str148=allocate([102,111,114,109,97,116,0] /* format\00 */, "i8", ALLOC_NORMAL);
__str149=allocate([116,105,109,101,116,117,112,108,101,0] /* timetuple\00 */, "i8", ALLOC_NORMAL);
__str150=allocate([79,58,95,95,102,111,114,109,97,116,95,95,0] /* O:__format__\00 */, "i8", ALLOC_NORMAL);
__str151=allocate([95,95,102,111,114,109,97,116,95,95,32,101,120,112,101,99,116,115,32,115,116,114,32,111,114,32,117,110,105,99,111,100,101,44,32,110,111,116,32,37,46,50,48,48,115,0] /* __format__ expects s */, "i8", ALLOC_NORMAL);
__str152=allocate([124,105,105,105,58,114,101,112,108,97,99,101,0] /* |iii:replace\00 */, "i8", ALLOC_NORMAL);
__str153=allocate([40,78,41,0] /* (N)\00 */, "i8", ALLOC_NORMAL);
__str154=allocate([40,79,78,41,0] /* (ON)\00 */, "i8", ALLOC_NORMAL);
__str155=allocate([116,105,109,101,115,116,97,109,112,32,45,62,32,108,111,99,97,108,32,100,97,116,101,32,102,114,111,109,32,97,32,80,79,83,73,88,32,116,105,109,101,115,116,97,109,112,32,40,108,105,107,101,32,116,105,109,101,46,116,105,109,101,40,41,41,46,0] /* timestamp -> local d */, "i8", ALLOC_NORMAL);
__str156=allocate([102,114,111,109,111,114,100,105,110,97,108,0] /* fromordinal\00 */, "i8", ALLOC_NORMAL);
__str157=allocate([105,110,116,32,45,62,32,100,97,116,101,32,99,111,114,114,101,115,112,111,110,100,105,110,103,32,116,111,32,97,32,112,114,111,108,101,112,116,105,99,32,71,114,101,103,111,114,105,97,110,32,111,114,100,105,110,97,108,46,0] /* int -> date correspo */, "i8", ALLOC_NORMAL);
__str158=allocate([116,111,100,97,121,0] /* today\00 */, "i8", ALLOC_NORMAL);
__str159=allocate([67,117,114,114,101,110,116,32,100,97,116,101,32,111,114,32,100,97,116,101,116,105,109,101,58,32,32,115,97,109,101,32,97,115,32,115,101,108,102,46,95,95,99,108,97,115,115,95,95,46,102,114,111,109,116,105,109,101,115,116,97,109,112,40,116,105,109,101,46,116,105,109,101,40,41,41,46,0] /* Current date or date */, "i8", ALLOC_NORMAL);
__str160=allocate([99,116,105,109,101,0] /* ctime\00 */, "i8", ALLOC_NORMAL);
__str161=allocate([82,101,116,117,114,110,32,99,116,105,109,101,40,41,32,115,116,121,108,101,32,115,116,114,105,110,103,46,0] /* Return ctime() style */, "i8", ALLOC_NORMAL);
__str162=allocate([102,111,114,109,97,116,32,45,62,32,115,116,114,102,116,105,109,101,40,41,32,115,116,121,108,101,32,115,116,114,105,110,103,46,0] /* format -> strftime() */, "i8", ALLOC_NORMAL);
__str163=allocate([95,95,102,111,114,109,97,116,95,95,0] /* __format__\00 */, "i8", ALLOC_NORMAL);
__str164=allocate([70,111,114,109,97,116,115,32,115,101,108,102,32,119,105,116,104,32,115,116,114,102,116,105,109,101,46,0] /* Formats self with st */, "i8", ALLOC_NORMAL);
__str165=allocate([82,101,116,117,114,110,32,116,105,109,101,32,116,117,112,108,101,44,32,99,111,109,112,97,116,105,98,108,101,32,119,105,116,104,32,116,105,109,101,46,108,111,99,97,108,116,105,109,101,40,41,46,0] /* Return time tuple, c */, "i8", ALLOC_NORMAL);
__str166=allocate([105,115,111,99,97,108,101,110,100,97,114,0] /* isocalendar\00 */, "i8", ALLOC_NORMAL);
__str167=allocate([82,101,116,117,114,110,32,97,32,51,45,116,117,112,108,101,32,99,111,110,116,97,105,110,105,110,103,32,73,83,79,32,121,101,97,114,44,32,119,101,101,107,32,110,117,109,98,101,114,44,32,97,110,100,32,119,101,101,107,100,97,121,46,0] /* Return a 3-tuple con */, "i8", ALLOC_NORMAL);
__str168=allocate([82,101,116,117,114,110,32,115,116,114,105,110,103,32,105,110,32,73,83,79,32,56,54,48,49,32,102,111,114,109,97,116,44,32,89,89,89,89,45,77,77,45,68,68,46,0] /* Return string in ISO */, "i8", ALLOC_NORMAL);
__str169=allocate([105,115,111,119,101,101,107,100,97,121,0] /* isoweekday\00 */, "i8", ALLOC_NORMAL);
__str170=allocate([82,101,116,117,114,110,32,116,104,101,32,100,97,121,32,111,102,32,116,104,101,32,119,101,101,107,32,114,101,112,114,101,115,101,110,116,101,100,32,98,121,32,116,104,101,32,100,97,116,101,46,10,77,111,110,100,97,121,32,61,61,32,49,32,46,46,46,32,83,117,110,100,97,121,32,61,61,32,55,0] /* Return the day of th */, "i8", ALLOC_NORMAL);
__str171=allocate([116,111,111,114,100,105,110,97,108,0] /* toordinal\00 */, "i8", ALLOC_NORMAL);
__str172=allocate([82,101,116,117,114,110,32,112,114,111,108,101,112,116,105,99,32,71,114,101,103,111,114,105,97,110,32,111,114,100,105,110,97,108,46,32,32,74,97,110,117,97,114,121,32,49,32,111,102,32,121,101,97,114,32,49,32,105,115,32,100,97,121,32,49,46,0] /* Return proleptic Gre */, "i8", ALLOC_NORMAL);
__str173=allocate([119,101,101,107,100,97,121,0] /* weekday\00 */, "i8", ALLOC_NORMAL);
__str174=allocate([82,101,116,117,114,110,32,116,104,101,32,100,97,121,32,111,102,32,116,104,101,32,119,101,101,107,32,114,101,112,114,101,115,101,110,116,101,100,32,98,121,32,116,104,101,32,100,97,116,101,46,10,77,111,110,100,97,121,32,61,61,32,48,32,46,46,46,32,83,117,110,100,97,121,32,61,61,32,54,0] /* Return the day of th */, "i8", ALLOC_NORMAL);
__str175=allocate([82,101,116,117,114,110,32,100,97,116,101,32,119,105,116,104,32,110,101,119,32,115,112,101,99,105,102,105,101,100,32,102,105,101,108,100,115,46,0] /* Return date with new */, "i8", ALLOC_NORMAL);
_date_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_date_doc=allocate([100,97,116,101,40,121,101,97,114,44,32,109,111,110,116,104,44,32,100,97,121,41,32,45,45,62,32,100,97,116,101,32,111,98,106,101,99,116,0] /* date(year, month, da */, "i8", ALLOC_NORMAL);
_date_as_number=allocate(156, ["%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str176=allocate([100,97,116,101,116,105,109,101,46,100,97,116,101,0] /* datetime.date\00 */, "i8", ALLOC_NORMAL);
_PyDateTime_DateType=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132603, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyDateTime_TZInfo*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, %struct.FILE*, i32)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, i8*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, i8*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, i32 (%struct.PyDateTime_TZInfo*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyDateTime_TZInfo*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct._typeobject*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"void (i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str177=allocate([97,32,116,122,105,110,102,111,32,115,117,98,99,108,97,115,115,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,37,115,40,41,0] /* a tzinfo subclass mu */, "i8", ALLOC_NORMAL);
__str178=allocate([102,114,111,109,117,116,99,58,32,97,114,103,117,109,101,110,116,32,109,117,115,116,32,98,101,32,97,32,100,97,116,101,116,105,109,101,0] /* fromutc: argument mu */, "i8", ALLOC_NORMAL);
__str179=allocate([102,114,111,109,117,116,99,58,32,100,116,46,116,122,105,110,102,111,32,105,115,32,110,111,116,32,115,101,108,102,0] /* fromutc: dt.tzinfo i */, "i8", ALLOC_NORMAL);
__str180=allocate([102,114,111,109,117,116,99,58,32,110,111,110,45,78,111,110,101,32,117,116,99,111,102,102,115,101,116,40,41,32,114,101,115,117,108,116,32,114,101,113,117,105,114,101,100,0] /* fromutc: non-None ut */, "i8", ALLOC_NORMAL);
__str181=allocate([102,114,111,109,117,116,99,58,32,110,111,110,45,78,111,110,101,32,100,115,116,40,41,32,114,101,115,117,108,116,32,114,101,113,117,105,114,101,100,0] /* fromutc: non-None ds */, "i8", ALLOC_NORMAL);
__str182=allocate([102,114,111,109,117,116,99,58,32,116,122,46,100,115,116,40,41,32,103,97,118,101,105,110,99,111,110,115,105,115,116,101,110,116,32,114,101,115,117,108,116,115,59,32,99,97,110,110,111,116,32,99,111,110,118,101,114,116,0] /* fromutc: tz.dst() ga */, "i8", ALLOC_NORMAL);
__str183=allocate([95,95,103,101,116,105,110,105,116,97,114,103,115,95,95,0] /* __getinitargs__\00 */, "i8", ALLOC_NORMAL);
__str184=allocate([95,95,103,101,116,115,116,97,116,101,95,95,0] /* __getstate__\00 */, "i8", ALLOC_NORMAL);
__str185=allocate([40,79,78,78,41,0] /* (ONN)\00 */, "i8", ALLOC_NORMAL);
__str186=allocate([100,97,116,101,116,105,109,101,32,45,62,32,115,116,114,105,110,103,32,110,97,109,101,32,111,102,32,116,105,109,101,32,122,111,110,101,46,0] /* datetime -> string n */, "i8", ALLOC_NORMAL);
__str187=allocate([100,97,116,101,116,105,109,101,32,45,62,32,109,105,110,117,116,101,115,32,101,97,115,116,32,111,102,32,85,84,67,32,40,110,101,103,97,116,105,118,101,32,102,111,114,32,119,101,115,116,32,111,102,32,85,84,67,41,46,0] /* datetime -> minutes  */, "i8", ALLOC_NORMAL);
__str188=allocate([100,97,116,101,116,105,109,101,32,45,62,32,68,83,84,32,111,102,102,115,101,116,32,105,110,32,109,105,110,117,116,101,115,32,101,97,115,116,32,111,102,32,85,84,67,46,0] /* datetime -> DST offs */, "i8", ALLOC_NORMAL);
__str189=allocate([102,114,111,109,117,116,99,0] /* fromutc\00 */, "i8", ALLOC_NORMAL);
__str190=allocate([100,97,116,101,116,105,109,101,32,105,110,32,85,84,67,32,45,62,32,100,97,116,101,116,105,109,101,32,105,110,32,108,111,99,97,108,32,116,105,109,101,46,0] /* datetime in UTC -> d */, "i8", ALLOC_NORMAL);
__str191=allocate([45,62,32,40,99,108,115,44,32,115,116,97,116,101,41,0] /* -> (cls, state)\00 */, "i8", ALLOC_NORMAL);
_tzinfo_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_tzinfo_doc=allocate([65,98,115,116,114,97,99,116,32,98,97,115,101,32,99,108,97,115,115,32,102,111,114,32,116,105,109,101,32,122,111,110,101,32,105,110,102,111,32,111,98,106,101,99,116,115,46,0] /* Abstract base class  */, "i8", ALLOC_NORMAL);
__str192=allocate([100,97,116,101,116,105,109,101,46,116,122,105,110,102,111,0] /* datetime.tzinfo\00 */, "i8", ALLOC_NORMAL);
_PyDateTime_TZInfoType=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132603, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyDateTime_TZInfo*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, %struct.FILE*, i32)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, i8*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, i8*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, i32 (%struct.PyDateTime_TZInfo*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyDateTime_TZInfo*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct._typeobject*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"void (i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str193=allocate([104,111,117,114,0] /* hour\00 */, "i8", ALLOC_NORMAL);
__str194=allocate([109,105,110,117,116,101,0] /* minute\00 */, "i8", ALLOC_NORMAL);
__str195=allocate([115,101,99,111,110,100,0] /* second\00 */, "i8", ALLOC_NORMAL);
__str196=allocate([109,105,99,114,111,115,101,99,111,110,100,0] /* microsecond\00 */, "i8", ALLOC_NORMAL);
_time_getset=allocate(120, ["i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_time_kws=allocate(24, "i8*", ALLOC_NORMAL);
__str197=allocate([98,97,100,32,116,122,105,110,102,111,32,115,116,97,116,101,32,97,114,103,0] /* bad tzinfo state arg */, "i8", ALLOC_NORMAL);
__str198=allocate([124,105,105,105,105,79,0] /* |iiiiO\00 */, "i8", ALLOC_NORMAL);
__str199=allocate([37,115,40,37,100,44,32,37,100,44,32,37,100,44,32,37,100,41,0] /* %s(%d, %d, %d, %d)\0 */, "i8", ALLOC_NORMAL);
__str200=allocate([58,0] /* :\00 */, "i8", ALLOC_NORMAL);
_keywords_12042=allocate(8, "i8*", ALLOC_NORMAL);
__str201=allocate([105,105,105,105,105,105,105,105,105,0] /* iiiiiiiii\00 */, "i8", ALLOC_NORMAL);
__str202=allocate([80,121,84,117,112,108,101,95,83,105,122,101,40,116,117,112,108,101,41,32,61,61,32,57,0] /* PyTuple_Size(tuple)  */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___12043=allocate([116,105,109,101,95,115,116,114,102,116,105,109,101,0] /* time_strftime\00 */, "i8", ALLOC_NORMAL);
__str203=allocate([110,49,32,33,61,32,79,70,70,83,69,84,95,85,78,75,78,79,87,78,32,38,38,32,110,50,32,33,61,32,79,70,70,83,69,84,95,85,78,75,78,79,87,78,0] /* n1 != OFFSET_UNKNOWN */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___12084=allocate([116,105,109,101,95,114,105,99,104,99,111,109,112,97,114,101,0] /* time_richcompare\00 */, "i8", ALLOC_NORMAL);
__str204=allocate([111,102,102,115,101,116,49,32,33,61,32,111,102,102,115,101,116,50,0] /* offset1 != offset2\0 */, "i8", ALLOC_NORMAL);
__str205=allocate([110,49,32,33,61,32,110,50,0] /* n1 != n2\00 */, "i8", ALLOC_NORMAL);
__str206=allocate([99,97,110,39,116,32,99,111,109,112,97,114,101,32,111,102,102,115,101,116,45,110,97,105,118,101,32,97,110,100,32,111,102,102,115,101,116,45,97,119,97,114,101,32,116,105,109,101,115,0] /* can't compare offset */, "i8", ALLOC_NORMAL);
__str207=allocate([110,32,33,61,32,79,70,70,83,69,84,95,85,78,75,78,79,87,78,0] /* n != OFFSET_UNKNOWN\ */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___12202=allocate([116,105,109,101,95,104,97,115,104,0] /* time_hash\00 */, "i8", ALLOC_NORMAL);
__str208=allocate([110,32,61,61,32,79,70,70,83,69,84,95,65,87,65,82,69,0] /* n == OFFSET_AWARE\00 */, "i8", ALLOC_NORMAL);
__str209=allocate([40,40,40,95,80,121,68,97,116,101,84,105,109,101,95,66,97,115,101,84,90,73,110,102,111,32,42,41,40,115,101,108,102,41,41,45,62,104,97,115,116,122,105,110,102,111,41,0] /* (((_PyDateTime_BaseT */, "i8", ALLOC_NORMAL);
__str210=allocate([105,105,105,105,0] /* iiii\00 */, "i8", ALLOC_NORMAL);
__str211=allocate([124,105,105,105,105,79,58,114,101,112,108,97,99,101,0] /* |iiiiO:replace\00 */, "i8", ALLOC_NORMAL);
__str212=allocate([105,105,105,105,79,0] /* iiiiO\00 */, "i8", ALLOC_NORMAL);
__str213=allocate([82,101,116,117,114,110,32,115,116,114,105,110,103,32,105,110,32,73,83,79,32,56,54,48,49,32,102,111,114,109,97,116,44,32,72,72,58,77,77,58,83,83,91,46,109,109,109,109,109,109,93,91,43,72,72,58,77,77,93,46,0] /* Return string in ISO */, "i8", ALLOC_NORMAL);
__str214=allocate([82,101,116,117,114,110,32,115,101,108,102,46,116,122,105,110,102,111,46,117,116,99,111,102,102,115,101,116,40,115,101,108,102,41,46,0] /* Return self.tzinfo.u */, "i8", ALLOC_NORMAL);
__str215=allocate([82,101,116,117,114,110,32,115,101,108,102,46,116,122,105,110,102,111,46,116,122,110,97,109,101,40,115,101,108,102,41,46,0] /* Return self.tzinfo.t */, "i8", ALLOC_NORMAL);
__str216=allocate([82,101,116,117,114,110,32,115,101,108,102,46,116,122,105,110,102,111,46,100,115,116,40,115,101,108,102,41,46,0] /* Return self.tzinfo.d */, "i8", ALLOC_NORMAL);
__str217=allocate([82,101,116,117,114,110,32,116,105,109,101,32,119,105,116,104,32,110,101,119,32,115,112,101,99,105,102,105,101,100,32,102,105,101,108,100,115,46,0] /* Return time with new */, "i8", ALLOC_NORMAL);
_time_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_time_doc=allocate([116,105,109,101,40,91,104,111,117,114,91,44,32,109,105,110,117,116,101,91,44,32,115,101,99,111,110,100,91,44,32,109,105,99,114,111,115,101,99,111,110,100,91,44,32,116,122,105,110,102,111,93,93,93,93,93,41,32,45,45,62,32,97,32,116,105,109,101,32,111,98,106,101,99,116,10,10,65,108,108,32,97,114,103,117,109,101,110,116,115,32,97,114,101,32,111,112,116,105,111,110,97,108,46,32,116,122,105,110,102,111,32,109,97,121,32,98,101,32,78,111,110,101,44,32,111,114,32,97,110,32,105,110,115,116,97,110,99,101,32,111,102,10,97,32,116,122,105,110,102,111,32,115,117,98,99,108,97,115,115,46,32,84,104,101,32,114,101,109,97,105,110,105,110,103,32,97,114,103,117,109,101,110,116,115,32,109,97,121,32,98,101,32,105,110,116,115,32,111,114,32,108,111,110,103,115,46,10,0] /* time([hour[, minute[ */, "i8", ALLOC_NORMAL);
_time_as_number=allocate(156, ["%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str218=allocate([100,97,116,101,116,105,109,101,46,116,105,109,101,0] /* datetime.time\00 */, "i8", ALLOC_NORMAL);
_PyDateTime_TimeType=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132603, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyDateTime_TZInfo*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, %struct.FILE*, i32)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, i8*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, i8*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, i32 (%struct.PyDateTime_TZInfo*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyDateTime_TZInfo*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct._typeobject*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"void (i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_datetime_getset=allocate(120, ["i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_datetime_kws=allocate(36, "i8*", ALLOC_NORMAL);
__str219=allocate([105,105,105,124,105,105,105,105,79,0] /* iii|iiiiO\00 */, "i8", ALLOC_NORMAL);
__str220=allocate([105,105,105,105,105,105,105,79,0] /* iiiiiiiO\00 */, "i8", ALLOC_NORMAL);
__str221=allocate([116,105,109,101,115,116,97,109,112,32,111,117,116,32,111,102,32,114,97,110,103,101,32,102,111,114,32,112,108,97,116,102,111,114,109,32,108,111,99,97,108,116,105,109,101,40,41,47,103,109,116,105,109,101,40,41,32,102,117,110,99,116,105,111,110,0] /* timestamp out of ran */, "i8", ALLOC_NORMAL);
__str222=allocate([124,79,58,110,111,119,0] /* |O:now\00 */, "i8", ALLOC_NORMAL);
_keywords_12654=allocate(8, "i8*", ALLOC_NORMAL);
__str223=allocate([116,122,0] /* tz\00 */, "i8", ALLOC_NORMAL);
__str224=allocate([100,124,79,58,102,114,111,109,116,105,109,101,115,116,97,109,112,0] /* d|O:fromtimestamp\00 */, "i8", ALLOC_NORMAL);
_keywords_12701=allocate(12, "i8*", ALLOC_NORMAL);
__str225=allocate([116,105,109,101,115,116,97,109,112,0] /* timestamp\00 */, "i8", ALLOC_NORMAL);
__str226=allocate([100,58,117,116,99,102,114,111,109,116,105,109,101,115,116,97,109,112,0] /* d:utcfromtimestamp\0 */, "i8", ALLOC_NORMAL);
__str227=allocate([115,115,58,115,116,114,112,116,105,109,101,0] /* ss:strptime\00 */, "i8", ALLOC_NORMAL);
_module_12751=allocate(1, "%struct.PyDateTime_TZInfo*", ALLOC_NORMAL);
__str228=allocate([95,115,116,114,112,116,105,109,101,0] /* _strptime\00 */, "i8", ALLOC_NORMAL);
__str229=allocate([105,105,105,105,105,105,105,0] /* iiiiiii\00 */, "i8", ALLOC_NORMAL);
__str230=allocate([117,110,101,120,112,101,99,116,101,100,32,118,97,108,117,101,32,102,114,111,109,32,95,115,116,114,112,116,105,109,101,46,95,115,116,114,112,116,105,109,101,0] /* unexpected value fro */, "i8", ALLOC_NORMAL);
__str231=allocate([79,33,79,33,58,99,111,109,98,105,110,101,0] /* O!O!:combine\00 */, "i8", ALLOC_NORMAL);
_keywords_12871=allocate(12, "i8*", ALLOC_NORMAL);
__str232=allocate([100,97,116,101,0] /* date\00 */, "i8", ALLOC_NORMAL);
__str233=allocate([102,97,99,116,111,114,32,61,61,32,49,32,124,124,32,102,97,99,116,111,114,32,61,61,32,45,49,0] /* factor == 1 || facto */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___13012=allocate([97,100,100,95,100,97,116,101,116,105,109,101,95,116,105,109,101,100,101,108,116,97,0] /* add_datetime_timedel */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___13120=allocate([100,97,116,101,116,105,109,101,95,115,117,98,116,114,97,99,116,0] /* datetime_subtract\00 */, "i8", ALLOC_NORMAL);
__str234=allocate([99,97,110,39,116,32,115,117,98,116,114,97,99,116,32,111,102,102,115,101,116,45,110,97,105,118,101,32,97,110,100,32,111,102,102,115,101,116,45,97,119,97,114,101,32,100,97,116,101,116,105,109,101,115,0] /* can't subtract offse */, "i8", ALLOC_NORMAL);
__str235=allocate([37,115,40,37,100,44,32,37,100,44,32,37,100,44,32,37,100,44,32,37,100,44,32,37,100,44,32,37,100,41,0] /* %s(%d, %d, %d, %d, % */, "i8", ALLOC_NORMAL);
__str236=allocate([37,115,40,37,100,44,32,37,100,44,32,37,100,44,32,37,100,44,32,37,100,44,32,37,100,41,0] /* %s(%d, %d, %d, %d, % */, "i8", ALLOC_NORMAL);
__str237=allocate([37,115,40,37,100,44,32,37,100,44,32,37,100,44,32,37,100,44,32,37,100,41,0] /* %s(%d, %d, %d, %d, % */, "i8", ALLOC_NORMAL);
__str238=allocate([40,115,41,0] /* (s)\00 */, "i8", ALLOC_NORMAL);
__str239=allocate([32,0] /*  \00 */, "i8", ALLOC_NORMAL);
__str240=allocate([124,99,58,105,115,111,102,111,114,109,97,116,0] /* |c:isoformat\00 */, "i8", ALLOC_NORMAL);
_keywords_13363=allocate(8, "i8*", ALLOC_NORMAL);
__str241=allocate([115,101,112,0] /* sep\00 */, "i8", ALLOC_NORMAL);
__str242=allocate([99,112,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* cp != ((void _)0)\00 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___13367=allocate([100,97,116,101,116,105,109,101,95,105,115,111,102,111,114,109,97,116,0] /* datetime_isoformat\0 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___13435=allocate([100,97,116,101,116,105,109,101,95,114,105,99,104,99,111,109,112,97,114,101,0] /* datetime_richcompare */, "i8", ALLOC_NORMAL);
__str243=allocate([99,97,110,39,116,32,99,111,109,112,97,114,101,32,111,102,102,115,101,116,45,110,97,105,118,101,32,97,110,100,32,111,102,102,115,101,116,45,97,119,97,114,101,32,100,97,116,101,116,105,109,101,115,0] /* can't compare offset */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___13531=allocate([100,97,116,101,116,105,109,101,95,104,97,115,104,0] /* datetime_hash\00 */, "i8", ALLOC_NORMAL);
__str244=allocate([124,105,105,105,105,105,105,105,79,58,114,101,112,108,97,99,101,0] /* |iiiiiiiO:replace\00 */, "i8", ALLOC_NORMAL);
__str245=allocate([79,33,58,97,115,116,105,109,101,122,111,110,101,0] /* O!:astimezone\00 */, "i8", ALLOC_NORMAL);
_keywords_13698=allocate(8, "i8*", ALLOC_NORMAL);
__str246=allocate([97,115,116,105,109,101,122,111,110,101,40,41,32,99,97,110,110,111,116,32,98,101,32,97,112,112,108,105,101,100,32,116,111,32,97,32,110,97,105,118,101,32,100,97,116,101,116,105,109,101,0] /* astimezone() cannot  */, "i8", ALLOC_NORMAL);
__str247=allocate([110,111,119,0] /* now\00 */, "i8", ALLOC_NORMAL);
__str248=allocate([91,116,122,93,32,45,62,32,110,101,119,32,100,97,116,101,116,105,109,101,32,119,105,116,104,32,116,122,39,115,32,108,111,99,97,108,32,100,97,121,32,97,110,100,32,116,105,109,101,46,0] /* [tz] -> new datetime */, "i8", ALLOC_NORMAL);
__str249=allocate([117,116,99,110,111,119,0] /* utcnow\00 */, "i8", ALLOC_NORMAL);
__str250=allocate([82,101,116,117,114,110,32,97,32,110,101,119,32,100,97,116,101,116,105,109,101,32,114,101,112,114,101,115,101,110,116,105,110,103,32,85,84,67,32,100,97,121,32,97,110,100,32,116,105,109,101,46,0] /* Return a new datetim */, "i8", ALLOC_NORMAL);
__str251=allocate([116,105,109,101,115,116,97,109,112,91,44,32,116,122,93,32,45,62,32,116,122,39,115,32,108,111,99,97,108,32,116,105,109,101,32,102,114,111,109,32,80,79,83,73,88,32,116,105,109,101,115,116,97,109,112,46,0] /* timestamp[, tz] -> t */, "i8", ALLOC_NORMAL);
__str252=allocate([117,116,99,102,114,111,109,116,105,109,101,115,116,97,109,112,0] /* utcfromtimestamp\00 */, "i8", ALLOC_NORMAL);
__str253=allocate([116,105,109,101,115,116,97,109,112,32,45,62,32,85,84,67,32,100,97,116,101,116,105,109,101,32,102,114,111,109,32,97,32,80,79,83,73,88,32,116,105,109,101,115,116,97,109,112,32,40,108,105,107,101,32,116,105,109,101,46,116,105,109,101,40,41,41,46,0] /* timestamp -> UTC dat */, "i8", ALLOC_NORMAL);
__str254=allocate([115,116,114,112,116,105,109,101,0] /* strptime\00 */, "i8", ALLOC_NORMAL);
__str255=allocate([115,116,114,105,110,103,44,32,102,111,114,109,97,116,32,45,62,32,110,101,119,32,100,97,116,101,116,105,109,101,32,112,97,114,115,101,100,32,102,114,111,109,32,97,32,115,116,114,105,110,103,32,40,108,105,107,101,32,116,105,109,101,46,115,116,114,112,116,105,109,101,40,41,41,46,0] /* string, format -> ne */, "i8", ALLOC_NORMAL);
__str256=allocate([99,111,109,98,105,110,101,0] /* combine\00 */, "i8", ALLOC_NORMAL);
__str257=allocate([100,97,116,101,44,32,116,105,109,101,32,45,62,32,100,97,116,101,116,105,109,101,32,119,105,116,104,32,115,97,109,101,32,100,97,116,101,32,97,110,100,32,116,105,109,101,32,102,105,101,108,100,115,0] /* date, time -> dateti */, "i8", ALLOC_NORMAL);
__str258=allocate([82,101,116,117,114,110,32,100,97,116,101,32,111,98,106,101,99,116,32,119,105,116,104,32,115,97,109,101,32,121,101,97,114,44,32,109,111,110,116,104,32,97,110,100,32,100,97,121,46,0] /* Return date object w */, "i8", ALLOC_NORMAL);
__str259=allocate([82,101,116,117,114,110,32,116,105,109,101,32,111,98,106,101,99,116,32,119,105,116,104,32,115,97,109,101,32,116,105,109,101,32,98,117,116,32,119,105,116,104,32,116,122,105,110,102,111,61,78,111,110,101,46,0] /* Return time object w */, "i8", ALLOC_NORMAL);
__str260=allocate([116,105,109,101,116,122,0] /* timetz\00 */, "i8", ALLOC_NORMAL);
__str261=allocate([82,101,116,117,114,110,32,116,105,109,101,32,111,98,106,101,99,116,32,119,105,116,104,32,115,97,109,101,32,116,105,109,101,32,97,110,100,32,116,122,105,110,102,111,46,0] /* Return time object w */, "i8", ALLOC_NORMAL);
__str262=allocate([117,116,99,116,105,109,101,116,117,112,108,101,0] /* utctimetuple\00 */, "i8", ALLOC_NORMAL);
__str263=allocate([82,101,116,117,114,110,32,85,84,67,32,116,105,109,101,32,116,117,112,108,101,44,32,99,111,109,112,97,116,105,98,108,101,32,119,105,116,104,32,116,105,109,101,46,108,111,99,97,108,116,105,109,101,40,41,46,0] /* Return UTC time tupl */, "i8", ALLOC_NORMAL);
__str264=allocate([91,115,101,112,93,32,45,62,32,115,116,114,105,110,103,32,105,110,32,73,83,79,32,56,54,48,49,32,102,111,114,109,97,116,44,32,89,89,89,89,45,77,77,45,68,68,84,72,72,58,77,77,58,83,83,91,46,109,109,109,109,109,109,93,91,43,72,72,58,77,77,93,46,10,10,115,101,112,32,105,115,32,117,115,101,100,32,116,111,32,115,101,112,97,114,97,116,101,32,116,104,101,32,121,101,97,114,32,102,114,111,109,32,116,104,101,32,116,105,109,101,44,32,97,110,100,32,100,101,102,97,117,108,116,115,32,116,111,32,39,84,39,46,0] /* [sep] -> string in I */, "i8", ALLOC_NORMAL);
__str265=allocate([82,101,116,117,114,110,32,100,97,116,101,116,105,109,101,32,119,105,116,104,32,110,101,119,32,115,112,101,99,105,102,105,101,100,32,102,105,101,108,100,115,46,0] /* Return datetime with */, "i8", ALLOC_NORMAL);
__str266=allocate([97,115,116,105,109,101,122,111,110,101,0] /* astimezone\00 */, "i8", ALLOC_NORMAL);
__str267=allocate([116,122,32,45,62,32,99,111,110,118,101,114,116,32,116,111,32,108,111,99,97,108,32,116,105,109,101,32,105,110,32,110,101,119,32,116,105,109,101,122,111,110,101,32,116,122,10,0] /* tz -> convert to loc */, "i8", ALLOC_NORMAL);
_datetime_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_datetime_doc=allocate([100,97,116,101,116,105,109,101,40,121,101,97,114,44,32,109,111,110,116,104,44,32,100,97,121,91,44,32,104,111,117,114,91,44,32,109,105,110,117,116,101,91,44,32,115,101,99,111,110,100,91,44,32,109,105,99,114,111,115,101,99,111,110,100,91,44,116,122,105,110,102,111,93,93,93,93,93,41,10,10,84,104,101,32,121,101,97,114,44,32,109,111,110,116,104,32,97,110,100,32,100,97,121,32,97,114,103,117,109,101,110,116,115,32,97,114,101,32,114,101,113,117,105,114,101,100,46,32,116,122,105,110,102,111,32,109,97,121,32,98,101,32,78,111,110,101,44,32,111,114,32,97,110,10,105,110,115,116,97,110,99,101,32,111,102,32,97,32,116,122,105,110,102,111,32,115,117,98,99,108,97,115,115,46,32,84,104,101,32,114,101,109,97,105,110,105,110,103,32,97,114,103,117,109,101,110,116,115,32,109,97,121,32,98,101,32,105,110,116,115,32,111,114,32,108,111,110,103,115,46,10,0] /* datetime(year, month */, "i8", ALLOC_NORMAL);
_datetime_as_number=allocate(156, ["%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str268=allocate([100,97,116,101,116,105,109,101,46,100,97,116,101,116,105,109,101,0] /* datetime.datetime\00 */, "i8", ALLOC_NORMAL);
_PyDateTime_DateTimeType=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132603, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyDateTime_TZInfo*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, %struct.FILE*, i32)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, i8*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, i8*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, i32 (%struct.PyDateTime_TZInfo*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyDateTime_TZInfo*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct._typeobject*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"void (i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_module_methods=allocate(16, ["i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_CAPI=allocate(44, ["%struct._typeobject*",0,0,0,"%struct._typeobject*",0,0,0,"%struct._typeobject*",0,0,0,"%struct._typeobject*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyDateTime_TZInfo* (i32, i32, i32, %struct._typeobject*)*",0,0,0,"%struct.PyDateTime_TZInfo* (i32, i32, i32, i32, i32, i32, i32, %struct.PyDateTime_TZInfo*, %struct._typeobject*)*",0,0,0,"%struct.PyDateTime_TZInfo* (i32, i32, i32, i32, %struct.PyDateTime_TZInfo*, %struct._typeobject*)*",0,0,0,"%struct.PyDateTime_TZInfo* (i32, i32, i32, i32, %struct._typeobject*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0], ALLOC_NORMAL);
__str269=allocate([100,97,116,101,116,105,109,101,0] /* datetime\00 */, "i8", ALLOC_NORMAL);
__str270=allocate([70,97,115,116,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,32,111,102,32,116,104,101,32,100,97,116,101,116,105,109,101,32,116,121,112,101,46,0] /* Fast implementation  */, "i8", ALLOC_NORMAL);
__str271=allocate([114,101,115,111,108,117,116,105,111,110,0] /* resolution\00 */, "i8", ALLOC_NORMAL);
__str272=allocate([109,105,110,0] /* min\00 */, "i8", ALLOC_NORMAL);
__str273=allocate([109,97,120,0] /* max\00 */, "i8", ALLOC_NORMAL);
__str274=allocate([77,73,78,89,69,65,82,0] /* MINYEAR\00 */, "i8", ALLOC_NORMAL);
__str275=allocate([77,65,88,89,69,65,82,0] /* MAXYEAR\00 */, "i8", ALLOC_NORMAL);
__str276=allocate([116,105,109,101,100,101,108,116,97,0] /* timedelta\00 */, "i8", ALLOC_NORMAL);
__str277=allocate([100,97,116,101,116,105,109,101,46,100,97,116,101,116,105,109,101,95,67,65,80,73,0] /* datetime.datetime_CA */, "i8", ALLOC_NORMAL);
__str278=allocate([100,97,116,101,116,105,109,101,95,67,65,80,73,0] /* datetime_CAPI\00 */, "i8", ALLOC_NORMAL);
__str279=allocate([49,52,54,49,32,61,61,32,100,97,121,115,95,98,101,102,111,114,101,95,121,101,97,114,40,52,43,49,41,0] /* 1461 == days_before_ */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___14028=allocate([105,110,105,116,100,97,116,101,116,105,109,101,0] /* initdatetime\00 */, "i8", ALLOC_NORMAL);
__str280=allocate([49,52,54,48,57,55,32,61,61,32,100,97,121,115,95,98,101,102,111,114,101,95,121,101,97,114,40,52,48,48,43,49,41,0] /* 146097 == days_befor */, "i8", ALLOC_NORMAL);
__str281=allocate([51,54,53,50,52,32,61,61,32,100,97,121,115,95,98,101,102,111,114,101,95,121,101,97,114,40,49,48,48,43,49,41,0] /* 36524 == days_before */, "i8", ALLOC_NORMAL);
__str282=allocate([116,105,109,101,115,116,97,109,112,32,111,117,116,32,111,102,32,114,97,110,103,101,32,102,111,114,32,112,108,97,116,102,111,114,109,32,116,105,109,101,95,116,0] /* timestamp out of ran */, "i8", ALLOC_NORMAL);
_time_doc283=allocate([116,105,109,101,40,41,32,45,62,32,102,108,111,97,116,105,110,103,32,112,111,105,110,116,32,110,117,109,98,101,114,10,10,82,101,116,117,114,110,32,116,104,101,32,99,117,114,114,101,110,116,32,116,105,109,101,32,105,110,32,115,101,99,111,110,100,115,32,115,105,110,99,101,32,116,104,101,32,69,112,111,99,104,46,10,70,114,97,99,116,105,111,110,115,32,111,102,32,97,32,115,101,99,111,110,100,32,109,97,121,32,98,101,32,112,114,101,115,101,110,116,32,105,102,32,116,104,101,32,115,121,115,116,101,109,32,99,108,111,99,107,32,112,114,111,118,105,100,101,115,32,116,104,101,109,46,0] /* time() -> floating p */, "i8", ALLOC_NORMAL);
_clock_doc=allocate([99,108,111,99,107,40,41,32,45,62,32,102,108,111,97,116,105,110,103,32,112,111,105,110,116,32,110,117,109,98,101,114,10,10,82,101,116,117,114,110,32,116,104,101,32,67,80,85,32,116,105,109,101,32,111,114,32,114,101,97,108,32,116,105,109,101,32,115,105,110,99,101,32,116,104,101,32,115,116,97,114,116,32,111,102,32,116,104,101,32,112,114,111,99,101,115,115,32,111,114,32,115,105,110,99,101,10,116,104,101,32,102,105,114,115,116,32,99,97,108,108,32,116,111,32,99,108,111,99,107,40,41,46,32,32,84,104,105,115,32,104,97,115,32,97,115,32,109,117,99,104,32,112,114,101,99,105,115,105,111,110,32,97,115,32,116,104,101,32,115,121,115,116,101,109,10,114,101,99,111,114,100,115,46,0] /* clock() -> floating  */, "i8", ALLOC_NORMAL);
__str1284=allocate([100,58,115,108,101,101,112,0] /* d:sleep\00 */, "i8", ALLOC_NORMAL);
_sleep_doc=allocate([115,108,101,101,112,40,115,101,99,111,110,100,115,41,10,10,68,101,108,97,121,32,101,120,101,99,117,116,105,111,110,32,102,111,114,32,97,32,103,105,118,101,110,32,110,117,109,98,101,114,32,111,102,32,115,101,99,111,110,100,115,46,32,32,84,104,101,32,97,114,103,117,109,101,110,116,32,109,97,121,32,98,101,10,97,32,102,108,111,97,116,105,110,103,32,112,111,105,110,116,32,110,117,109,98,101,114,32,102,111,114,32,115,117,98,115,101,99,111,110,100,32,112,114,101,99,105,115,105,111,110,46,0] /* sleep(seconds)\0A\0A */, "i8", ALLOC_NORMAL);
__str2285=allocate([116,109,95,121,101,97,114,0] /* tm_year\00 */, "i8", ALLOC_NORMAL);
__str3286=allocate([121,101,97,114,44,32,102,111,114,32,101,120,97,109,112,108,101,44,32,49,57,57,51,0] /* year, for example, 1 */, "i8", ALLOC_NORMAL);
__str4287=allocate([116,109,95,109,111,110,0] /* tm_mon\00 */, "i8", ALLOC_NORMAL);
__str5288=allocate([109,111,110,116,104,32,111,102,32,121,101,97,114,44,32,114,97,110,103,101,32,91,49,44,32,49,50,93,0] /* month of year, range */, "i8", ALLOC_NORMAL);
__str6289=allocate([116,109,95,109,100,97,121,0] /* tm_mday\00 */, "i8", ALLOC_NORMAL);
__str7290=allocate([100,97,121,32,111,102,32,109,111,110,116,104,44,32,114,97,110,103,101,32,91,49,44,32,51,49,93,0] /* day of month, range  */, "i8", ALLOC_NORMAL);
__str8291=allocate([116,109,95,104,111,117,114,0] /* tm_hour\00 */, "i8", ALLOC_NORMAL);
__str9292=allocate([104,111,117,114,115,44,32,114,97,110,103,101,32,91,48,44,32,50,51,93,0] /* hours, range [0, 23] */, "i8", ALLOC_NORMAL);
__str10293=allocate([116,109,95,109,105,110,0] /* tm_min\00 */, "i8", ALLOC_NORMAL);
__str11294=allocate([109,105,110,117,116,101,115,44,32,114,97,110,103,101,32,91,48,44,32,53,57,93,0] /* minutes, range [0, 5 */, "i8", ALLOC_NORMAL);
__str12295=allocate([116,109,95,115,101,99,0] /* tm_sec\00 */, "i8", ALLOC_NORMAL);
__str13296=allocate([115,101,99,111,110,100,115,44,32,114,97,110,103,101,32,91,48,44,32,54,49,93,41,0] /* seconds, range [0, 6 */, "i8", ALLOC_NORMAL);
__str14297=allocate([116,109,95,119,100,97,121,0] /* tm_wday\00 */, "i8", ALLOC_NORMAL);
__str15298=allocate([100,97,121,32,111,102,32,119,101,101,107,44,32,114,97,110,103,101,32,91,48,44,32,54,93,44,32,77,111,110,100,97,121,32,105,115,32,48,0] /* day of week, range [ */, "i8", ALLOC_NORMAL);
__str16299=allocate([116,109,95,121,100,97,121,0] /* tm_yday\00 */, "i8", ALLOC_NORMAL);
__str17300=allocate([100,97,121,32,111,102,32,121,101,97,114,44,32,114,97,110,103,101,32,91,49,44,32,51,54,54,93,0] /* day of year, range [ */, "i8", ALLOC_NORMAL);
__str18301=allocate([116,109,95,105,115,100,115,116,0] /* tm_isdst\00 */, "i8", ALLOC_NORMAL);
__str19302=allocate([49,32,105,102,32,115,117,109,109,101,114,32,116,105,109,101,32,105,115,32,105,110,32,101,102,102,101,99,116,44,32,48,32,105,102,32,110,111,116,44,32,97,110,100,32,45,49,32,105,102,32,117,110,107,110,111,119,110,0] /* 1 if summer time is  */, "i8", ALLOC_NORMAL);
_struct_time_type_fields=allocate(80, ["i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8"], ALLOC_NORMAL);
_struct_time_type_desc=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0], ["i8*",0,0,0,"i8*",0,0,0,"%struct.PyStructSequence_Field*",0,0,0,"i32",0,0,0], ALLOC_NORMAL);
__str20303=allocate([116,105,109,101,46,115,116,114,117,99,116,95,116,105,109,101,0] /* time.struct_time\00 */, "i8", ALLOC_NORMAL);
__str21304=allocate([84,104,101,32,116,105,109,101,32,118,97,108,117,101,32,97,115,32,114,101,116,117,114,110,101,100,32,98,121,32,103,109,116,105,109,101,40,41,44,32,108,111,99,97,108,116,105,109,101,40,41,44,32,97,110,100,32,115,116,114,112,116,105,109,101,40,41,44,32,97,110,100,10,32,97,99,99,101,112,116,101,100,32,98,121,32,97,115,99,116,105,109,101,40,41,44,32,109,107,116,105,109,101,40,41,32,97,110,100,32,115,116,114,102,116,105,109,101,40,41,46,32,32,77,97,121,32,98,101,32,99,111,110,115,105,100,101,114,101,100,32,97,115,32,97,10,32,115,101,113,117,101,110,99,101,32,111,102,32,57,32,105,110,116,101,103,101,114,115,46,10,10,32,78,111,116,101,32,116,104,97,116,32,115,101,118,101,114,97,108,32,102,105,101,108,100,115,39,32,118,97,108,117,101,115,32,97,114,101,32,110,111,116,32,116,104,101,32,115,97,109,101,32,97,115,32,116,104,111,115,101,32,100,101,102,105,110,101,100,32,98,121,10,32,116,104,101,32,67,32,108,97,110,103,117,97,103,101,32,115,116,97,110,100,97,114,100,32,102,111,114,32,115,116,114,117,99,116,32,116,109,46,32,32,70,111,114,32,101,120,97,109,112,108,101,44,32,116,104,101,32,118,97,108,117,101,32,111,102,32,116,104,101,10,32,102,105,101,108,100,32,116,109,95,121,101,97,114,32,105,115,32,116,104,101,32,97,99,116,117,97,108,32,121,101,97,114,44,32,110,111,116,32,121,101,97,114,32,45,32,49,57,48,48,46,32,32,83,101,101,32,105,110,100,105,118,105,100,117,97,108,10,32,102,105,101,108,100,115,39,32,100,101,115,99,114,105,112,116,105,111,110,115,32,102,111,114,32,100,101,116,97,105,108,115,46,0] /* The time value as re */, "i8", ALLOC_NORMAL);
_StructTimeType=allocate(196, ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyDateTime_TZInfo*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, %struct.FILE*, i32)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, i8*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, i8*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, i32 (%struct.PyDateTime_TZInfo*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyDateTime_TZInfo*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct._typeobject*, %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"void (i8*)*",0,0,0,"i32 (%struct.PyDateTime_TZInfo*)*",0,0,0,"%struct.PyDateTime_TZInfo*",0,0,0,"%struct.PyDateTime_TZInfo*",0,0,0,"%struct.PyDateTime_TZInfo*",0,0,0,"%struct.PyDateTime_TZInfo*",0,0,0,"%struct.PyDateTime_TZInfo*",0,0,0,"void (%struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0], ALLOC_NORMAL);
__str22305=allocate([124,79,58,103,109,116,105,109,101,0] /* |O:gmtime\00 */, "i8", ALLOC_NORMAL);
_gmtime_doc=allocate([103,109,116,105,109,101,40,91,115,101,99,111,110,100,115,93,41,32,45,62,32,40,116,109,95,121,101,97,114,44,32,116,109,95,109,111,110,44,32,116,109,95,109,100,97,121,44,32,116,109,95,104,111,117,114,44,32,116,109,95,109,105,110,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,116,109,95,115,101,99,44,32,116,109,95,119,100,97,121,44,32,116,109,95,121,100,97,121,44,32,116,109,95,105,115,100,115,116,41,10,10,67,111,110,118,101,114,116,32,115,101,99,111,110,100,115,32,115,105,110,99,101,32,116,104,101,32,69,112,111,99,104,32,116,111,32,97,32,116,105,109,101,32,116,117,112,108,101,32,101,120,112,114,101,115,115,105,110,103,32,85,84,67,32,40,97,46,107,46,97,46,10,71,77,84,41,46,32,32,87,104,101,110,32,39,115,101,99,111,110,100,115,39,32,105,115,32,110,111,116,32,112,97,115,115,101,100,32,105,110,44,32,99,111,110,118,101,114,116,32,116,104,101,32,99,117,114,114,101,110,116,32,116,105,109,101,32,105,110,115,116,101,97,100,46,0] /* gmtime([seconds]) -> */, "i8", ALLOC_NORMAL);
__str23306=allocate([124,79,58,108,111,99,97,108,116,105,109,101,0] /* |O:localtime\00 */, "i8", ALLOC_NORMAL);
_localtime_doc=allocate([108,111,99,97,108,116,105,109,101,40,91,115,101,99,111,110,100,115,93,41,32,45,62,32,40,116,109,95,121,101,97,114,44,116,109,95,109,111,110,44,116,109,95,109,100,97,121,44,116,109,95,104,111,117,114,44,116,109,95,109,105,110,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,116,109,95,115,101,99,44,116,109,95,119,100,97,121,44,116,109,95,121,100,97,121,44,116,109,95,105,115,100,115,116,41,10,10,67,111,110,118,101,114,116,32,115,101,99,111,110,100,115,32,115,105,110,99,101,32,116,104,101,32,69,112,111,99,104,32,116,111,32,97,32,116,105,109,101,32,116,117,112,108,101,32,101,120,112,114,101,115,115,105,110,103,32,108,111,99,97,108,32,116,105,109,101,46,10,87,104,101,110,32,39,115,101,99,111,110,100,115,39,32,105,115,32,110,111,116,32,112,97,115,115,101,100,32,105,110,44,32,99,111,110,118,101,114,116,32,116,104,101,32,99,117,114,114,101,110,116,32,116,105,109,101,32,105,110,115,116,101,97,100,46,0] /* localtime([seconds]) */, "i8", ALLOC_NORMAL);
__str24307=allocate([40,105,105,105,105,105,105,105,105,105,41,0] /* (iiiiiiiii)\00 */, "i8", ALLOC_NORMAL);
_moddict=allocate(1, "%struct.PyDateTime_TZInfo*", ALLOC_NORMAL);
__str25308=allocate([97,99,99,101,112,116,50,100,121,101,97,114,0] /* accept2dyear\00 */, "i8", ALLOC_NORMAL);
__str26309=allocate([121,101,97,114,32,62,61,32,49,57,48,48,32,114,101,113,117,105,114,101,100,0] /* year >= 1900 require */, "i8", ALLOC_NORMAL);
__str27310=allocate([121,101,97,114,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* year out of range\00 */, "i8", ALLOC_NORMAL);
__str28311=allocate([115,124,79,58,115,116,114,102,116,105,109,101,0] /* s|O:strftime\00 */, "i8", ALLOC_NORMAL);
__str29312=allocate([109,111,110,116,104,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* month out of range\0 */, "i8", ALLOC_NORMAL);
__str30313=allocate([100,97,121,32,111,102,32,109,111,110,116,104,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* day of month out of  */, "i8", ALLOC_NORMAL);
__str31314=allocate([104,111,117,114,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* hour out of range\00 */, "i8", ALLOC_NORMAL);
__str32315=allocate([109,105,110,117,116,101,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* minute out of range\ */, "i8", ALLOC_NORMAL);
__str33316=allocate([115,101,99,111,110,100,115,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* seconds out of range */, "i8", ALLOC_NORMAL);
__str34317=allocate([100,97,121,32,111,102,32,119,101,101,107,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* day of week out of r */, "i8", ALLOC_NORMAL);
__str35318=allocate([100,97,121,32,111,102,32,121,101,97,114,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* day of year out of r */, "i8", ALLOC_NORMAL);
_strftime_doc=allocate([115,116,114,102,116,105,109,101,40,102,111,114,109,97,116,91,44,32,116,117,112,108,101,93,41,32,45,62,32,115,116,114,105,110,103,10,10,67,111,110,118,101,114,116,32,97,32,116,105,109,101,32,116,117,112,108,101,32,116,111,32,97,32,115,116,114,105,110,103,32,97,99,99,111,114,100,105,110,103,32,116,111,32,97,32,102,111,114,109,97,116,32,115,112,101,99,105,102,105,99,97,116,105,111,110,46,10,83,101,101,32,116,104,101,32,108,105,98,114,97,114,121,32,114,101,102,101,114,101,110,99,101,32,109,97,110,117,97,108,32,102,111,114,32,102,111,114,109,97,116,116,105,110,103,32,99,111,100,101,115,46,32,87,104,101,110,32,116,104,101,32,116,105,109,101,32,116,117,112,108,101,10,105,115,32,110,111,116,32,112,114,101,115,101,110,116,44,32,99,117,114,114,101,110,116,32,116,105,109,101,32,97,115,32,114,101,116,117,114,110,101,100,32,98,121,32,108,111,99,97,108,116,105,109,101,40,41,32,105,115,32,117,115,101,100,46,0] /* strftime(format[, tu */, "i8", ALLOC_NORMAL);
__str36319=allocate([95,115,116,114,112,116,105,109,101,0] /* _strptime\00 */, "i8", ALLOC_NORMAL);
__str37320=allocate([95,115,116,114,112,116,105,109,101,95,116,105,109,101,0] /* _strptime_time\00 */, "i8", ALLOC_NORMAL);
__str38321=allocate([79,0] /* O\00 */, "i8", ALLOC_NORMAL);
_strptime_doc=allocate([115,116,114,112,116,105,109,101,40,115,116,114,105,110,103,44,32,102,111,114,109,97,116,41,32,45,62,32,115,116,114,117,99,116,95,116,105,109,101,10,10,80,97,114,115,101,32,97,32,115,116,114,105,110,103,32,116,111,32,97,32,116,105,109,101,32,116,117,112,108,101,32,97,99,99,111,114,100,105,110,103,32,116,111,32,97,32,102,111,114,109,97,116,32,115,112,101,99,105,102,105,99,97,116,105,111,110,46,10,83,101,101,32,116,104,101,32,108,105,98,114,97,114,121,32,114,101,102,101,114,101,110,99,101,32,109,97,110,117,97,108,32,102,111,114,32,102,111,114,109,97,116,116,105,110,103,32,99,111,100,101,115,32,40,115,97,109,101,32,97,115,32,115,116,114,102,116,105,109,101,40,41,41,46,0] /* strptime(string, for */, "i8", ALLOC_NORMAL);
__str39322=allocate([97,115,99,116,105,109,101,0] /* asctime\00 */, "i8", ALLOC_NORMAL);
__str40323=allocate([105,110,118,97,108,105,100,32,116,105,109,101,0] /* invalid time\00 */, "i8", ALLOC_NORMAL);
_asctime_doc=allocate([97,115,99,116,105,109,101,40,91,116,117,112,108,101,93,41,32,45,62,32,115,116,114,105,110,103,10,10,67,111,110,118,101,114,116,32,97,32,116,105,109,101,32,116,117,112,108,101,32,116,111,32,97,32,115,116,114,105,110,103,44,32,101,46,103,46,32,39,83,97,116,32,74,117,110,32,48,54,32,49,54,58,50,54,58,49,49,32,49,57,57,56,39,46,10,87,104,101,110,32,116,104,101,32,116,105,109,101,32,116,117,112,108,101,32,105,115,32,110,111,116,32,112,114,101,115,101,110,116,44,32,99,117,114,114,101,110,116,32,116,105,109,101,32,97,115,32,114,101,116,117,114,110,101,100,32,98,121,32,108,111,99,97,108,116,105,109,101,40,41,10,105,115,32,117,115,101,100,46,0] /* asctime([tuple]) ->  */, "i8", ALLOC_NORMAL);
__str41324=allocate([99,116,105,109,101,0] /* ctime\00 */, "i8", ALLOC_NORMAL);
__str42325=allocate([117,110,99,111,110,118,101,114,116,105,98,108,101,32,116,105,109,101,0] /* unconvertible time\0 */, "i8", ALLOC_NORMAL);
_ctime_doc=allocate([99,116,105,109,101,40,115,101,99,111,110,100,115,41,32,45,62,32,115,116,114,105,110,103,10,10,67,111,110,118,101,114,116,32,97,32,116,105,109,101,32,105,110,32,115,101,99,111,110,100,115,32,115,105,110,99,101,32,116,104,101,32,69,112,111,99,104,32,116,111,32,97,32,115,116,114,105,110,103,32,105,110,32,108,111,99,97,108,32,116,105,109,101,46,10,84,104,105,115,32,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,111,32,97,115,99,116,105,109,101,40,108,111,99,97,108,116,105,109,101,40,115,101,99,111,110,100,115,41,41,46,32,87,104,101,110,32,116,104,101,32,116,105,109,101,32,116,117,112,108,101,32,105,115,10,110,111,116,32,112,114,101,115,101,110,116,44,32,99,117,114,114,101,110,116,32,116,105,109,101,32,97,115,32,114,101,116,117,114,110,101,100,32,98,121,32,108,111,99,97,108,116,105,109,101,40,41,32,105,115,32,117,115,101,100,46,0] /* ctime(seconds) -> st */, "i8", ALLOC_NORMAL);
__str43326=allocate([109,107,116,105,109,101,32,97,114,103,117,109,101,110,116,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* mktime argument out  */, "i8", ALLOC_NORMAL);
_mktime_doc=allocate([109,107,116,105,109,101,40,116,117,112,108,101,41,32,45,62,32,102,108,111,97,116,105,110,103,32,112,111,105,110,116,32,110,117,109,98,101,114,10,10,67,111,110,118,101,114,116,32,97,32,116,105,109,101,32,116,117,112,108,101,32,105,110,32,108,111,99,97,108,32,116,105,109,101,32,116,111,32,115,101,99,111,110,100,115,32,115,105,110,99,101,32,116,104,101,32,69,112,111,99,104,46,0] /* mktime(tuple) -> flo */, "i8", ALLOC_NORMAL);
__str44327=allocate([116,105,109,101,0] /* time\00 */, "i8", ALLOC_NORMAL);
_tzset_doc=allocate([116,122,115,101,116,40,41,10,10,73,110,105,116,105,97,108,105,122,101,44,32,111,114,32,114,101,105,110,105,116,105,97,108,105,122,101,44,32,116,104,101,32,108,111,99,97,108,32,116,105,109,101,122,111,110,101,32,116,111,32,116,104,101,32,118,97,108,117,101,32,115,116,111,114,101,100,32,105,110,10,111,115,46,101,110,118,105,114,111,110,91,39,84,90,39,93,46,32,84,104,101,32,84,90,32,101,110,118,105,114,111,110,109,101,110,116,32,118,97,114,105,97,98,108,101,32,115,104,111,117,108,100,32,98,101,32,115,112,101,99,105,102,105,101,100,32,105,110,10,115,116,97,110,100,97,114,100,32,85,110,105,120,32,116,105,109,101,122,111,110,101,32,102,111,114,109,97,116,32,97,115,32,100,111,99,117,109,101,110,116,101,100,32,105,110,32,116,104,101,32,116,122,115,101,116,32,109,97,110,32,112,97,103,101,10,40,101,103,46,32,39,85,83,47,69,97,115,116,101,114,110,39,44,32,39,69,117,114,111,112,101,47,65,109,115,116,101,114,100,97,109,39,41,46,32,85,110,107,110,111,119,110,32,116,105,109,101,122,111,110,101,115,32,119,105,108,108,32,115,105,108,101,110,116,108,121,10,102,97,108,108,32,98,97,99,107,32,116,111,32,85,84,67,46,32,73,102,32,116,104,101,32,84,90,32,101,110,118,105,114,111,110,109,101,110,116,32,118,97,114,105,97,98,108,101,32,105,115,32,110,111,116,32,115,101,116,44,32,116,104,101,32,108,111,99,97,108,10,116,105,109,101,122,111,110,101,32,105,115,32,115,101,116,32,116,111,32,116,104,101,32,115,121,115,116,101,109,115,32,98,101,115,116,32,103,117,101,115,115,32,111,102,32,119,97,108,108,99,108,111,99,107,32,116,105,109,101,46,10,67,104,97,110,103,105,110,103,32,116,104,101,32,84,90,32,101,110,118,105,114,111,110,109,101,110,116,32,118,97,114,105,97,98,108,101,32,119,105,116,104,111,117,116,32,99,97,108,108,105,110,103,32,116,122,115,101,116,32,42,109,97,121,42,32,99,104,97,110,103,101,10,116,104,101,32,108,111,99,97,108,32,116,105,109,101,122,111,110,101,32,117,115,101,100,32,98,121,32,109,101,116,104,111,100,115,32,115,117,99,104,32,97,115,32,108,111,99,97,108,116,105,109,101,44,32,98,117,116,32,116,104,105,115,32,98,101,104,97,118,105,111,117,114,10,115,104,111,117,108,100,32,110,111,116,32,98,101,32,114,101,108,105,101,100,32,111,110,46,0] /* tzset()\0A\0AInitial */, "i8", ALLOC_NORMAL);
__str45328=allocate([32,32,32,0] /*    \00 */, "i8", ALLOC_NORMAL);
__str46329=allocate([116,105,109,101,122,111,110,101,0] /* timezone\00 */, "i8", ALLOC_NORMAL);
__str47330=allocate([97,108,116,122,111,110,101,0] /* altzone\00 */, "i8", ALLOC_NORMAL);
__str48331=allocate([100,97,121,108,105,103,104,116,0] /* daylight\00 */, "i8", ALLOC_NORMAL);
__str49332=allocate([40,122,122,41,0] /* (zz)\00 */, "i8", ALLOC_NORMAL);
__str50333=allocate([116,122,110,97,109,101,0] /* tzname\00 */, "i8", ALLOC_NORMAL);
__str51334=allocate([99,108,111,99,107,0] /* clock\00 */, "i8", ALLOC_NORMAL);
__str52335=allocate([115,108,101,101,112,0] /* sleep\00 */, "i8", ALLOC_NORMAL);
__str53336=allocate([103,109,116,105,109,101,0] /* gmtime\00 */, "i8", ALLOC_NORMAL);
__str54337=allocate([108,111,99,97,108,116,105,109,101,0] /* localtime\00 */, "i8", ALLOC_NORMAL);
__str55338=allocate([109,107,116,105,109,101,0] /* mktime\00 */, "i8", ALLOC_NORMAL);
__str56339=allocate([115,116,114,102,116,105,109,101,0] /* strftime\00 */, "i8", ALLOC_NORMAL);
__str57340=allocate([115,116,114,112,116,105,109,101,0] /* strptime\00 */, "i8", ALLOC_NORMAL);
__str58341=allocate([116,122,115,101,116,0] /* tzset\00 */, "i8", ALLOC_NORMAL);
_time_methods342=allocate([0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyDateTime_TZInfo* (%struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_module_doc=allocate([84,104,105,115,32,109,111,100,117,108,101,32,112,114,111,118,105,100,101,115,32,118,97,114,105,111,117,115,32,102,117,110,99,116,105,111,110,115,32,116,111,32,109,97,110,105,112,117,108,97,116,101,32,116,105,109,101,32,118,97,108,117,101,115,46,10,10,84,104,101,114,101,32,97,114,101,32,116,119,111,32,115,116,97,110,100,97,114,100,32,114,101,112,114,101,115,101,110,116,97,116,105,111,110,115,32,111,102,32,116,105,109,101,46,32,32,79,110,101,32,105,115,32,116,104,101,32,110,117,109,98,101,114,10,111,102,32,115,101,99,111,110,100,115,32,115,105,110,99,101,32,116,104,101,32,69,112,111,99,104,44,32,105,110,32,85,84,67,32,40,97,46,107,46,97,46,32,71,77,84,41,46,32,32,73,116,32,109,97,121,32,98,101,32,97,110,32,105,110,116,101,103,101,114,10,111,114,32,97,32,102,108,111,97,116,105,110,103,32,112,111,105,110,116,32,110,117,109,98,101,114,32,40,116,111,32,114,101,112,114,101,115,101,110,116,32,102,114,97,99,116,105,111,110,115,32,111,102,32,115,101,99,111,110,100,115,41,46,10,84,104,101,32,69,112,111,99,104,32,105,115,32,115,121,115,116,101,109,45,100,101,102,105,110,101,100,59,32,111,110,32,85,110,105,120,44,32,105,116,32,105,115,32,103,101,110,101,114,97,108,108,121,32,74,97,110,117,97,114,121,32,49,115,116,44,32,49,57,55,48,46,10,84,104,101,32,97,99,116,117,97,108,32,118,97,108,117,101,32,99,97,110,32,98,101,32,114,101,116,114,105,101,118,101,100,32,98,121,32,99,97,108,108,105,110,103,32,103,109,116,105,109,101,40,48,41,46,10,10,84,104,101,32,111,116,104,101,114,32,114,101,112,114,101,115,101,110,116,97,116,105,111,110,32,105,115,32,97,32,116,117,112,108,101,32,111,102,32,57,32,105,110,116,101,103,101,114,115,32,103,105,118,105,110,103,32,108,111,99,97,108,32,116,105,109,101,46,10,84,104,101,32,116,117,112,108,101,32,105,116,101,109,115,32,97,114,101,58,10,32,32,121,101,97,114,32,40,102,111,117,114,32,100,105,103,105,116,115,44,32,101,46,103,46,32,49,57,57,56,41,10,32,32,109,111,110,116,104,32,40,49,45,49,50,41,10,32,32,100,97,121,32,40,49,45,51,49,41,10,32,32,104,111,117,114,115,32,40,48,45,50,51,41,10,32,32,109,105,110,117,116,101,115,32,40,48,45,53,57,41,10,32,32,115,101,99,111,110,100,115,32,40,48,45,53,57,41,10,32,32,119,101,101,107,100,97,121,32,40,48,45,54,44,32,77,111,110,100,97,121,32,105,115,32,48,41,10,32,32,74,117,108,105,97,110,32,100,97,121,32,40,100,97,121,32,105,110,32,116,104,101,32,121,101,97,114,44,32,49,45,51,54,54,41,10,32,32,68,83,84,32,40,68,97,121,108,105,103,104,116,32,83,97,118,105,110,103,115,32,84,105,109,101,41,32,102,108,97,103,32,40,45,49,44,32,48,32,111,114,32,49,41,10,73,102,32,116,104,101,32,68,83,84,32,102,108,97,103,32,105,115,32,48,44,32,116,104,101,32,116,105,109,101,32,105,115,32,103,105,118,101,110,32,105,110,32,116,104,101,32,114,101,103,117,108,97,114,32,116,105,109,101,32,122,111,110,101,59,10,105,102,32,105,116,32,105,115,32,49,44,32,116,104,101,32,116,105,109,101,32,105,115,32,103,105,118,101,110,32,105,110,32,116,104,101,32,68,83,84,32,116,105,109,101,32,122,111,110,101,59,10,105,102,32,105,116,32,105,115,32,45,49,44,32,109,107,116,105,109,101,40,41,32,115,104,111,117,108,100,32,103,117,101,115,115,32,98,97,115,101,100,32,111,110,32,116,104,101,32,100,97,116,101,32,97,110,100,32,116,105,109,101,46,10,10,86,97,114,105,97,98,108,101,115,58,10,10,116,105,109,101,122,111,110,101,32,45,45,32,100,105,102,102,101,114,101,110,99,101,32,105,110,32,115,101,99,111,110,100,115,32,98,101,116,119,101,101,110,32,85,84,67,32,97,110,100,32,108,111,99,97,108,32,115,116,97,110,100,97,114,100,32,116,105,109,101,10,97,108,116,122,111,110,101,32,45,45,32,100,105,102,102,101,114,101,110,99,101,32,105,110,32,32,115,101,99,111,110,100,115,32,98,101,116,119,101,101,110,32,85,84,67,32,97,110,100,32,108,111,99,97,108,32,68,83,84,32,116,105,109,101,10,100,97,121,108,105,103,104,116,32,45,45,32,119,104,101,116,104,101,114,32,108,111,99,97,108,32,116,105,109,101,32,115,104,111,117,108,100,32,114,101,102,108,101,99,116,32,68,83,84,10,116,122,110,97,109,101,32,45,45,32,116,117,112,108,101,32,111,102,32,40,115,116,97,110,100,97,114,100,32,116,105,109,101,32,122,111,110,101,32,110,97,109,101,44,32,68,83,84,32,116,105,109,101,32,122,111,110,101,32,110,97,109,101,41,10,10,70,117,110,99,116,105,111,110,115,58,10,10,116,105,109,101,40,41,32,45,45,32,114,101,116,117,114,110,32,99,117,114,114,101,110,116,32,116,105,109,101,32,105,110,32,115,101,99,111,110,100,115,32,115,105,110,99,101,32,116,104,101,32,69,112,111,99,104,32,97,115,32,97,32,102,108,111,97,116,10,99,108,111,99,107,40,41,32,45,45,32,114,101,116,117,114,110,32,67,80,85,32,116,105,109,101,32,115,105,110,99,101,32,112,114,111,99,101,115,115,32,115,116,97,114,116,32,97,115,32,97,32,102,108,111,97,116,10,115,108,101,101,112,40,41,32,45,45,32,100,101,108,97,121,32,102,111,114,32,97,32,110,117,109,98,101,114,32,111,102,32,115,101,99,111,110,100,115,32,103,105,118,101,110,32,97,115,32,97,32,102,108,111,97,116,10,103,109,116,105,109,101,40,41,32,45,45,32,99,111,110,118,101,114,116,32,115,101,99,111,110,100,115,32,115,105,110,99,101,32,69,112,111,99,104,32,116,111,32,85,84,67,32,116,117,112,108,101,10,108,111,99,97,108,116,105,109,101,40,41,32,45,45,32,99,111,110,118,101,114,116,32,115,101,99,111,110,100,115,32,115,105,110,99,101,32,69,112,111,99,104,32,116,111,32,108,111,99,97,108,32,116,105,109,101,32,116,117,112,108,101,10,97,115,99,116,105,109,101,40,41,32,45,45,32,99,111,110,118,101,114,116,32,116,105,109,101,32,116,117,112,108,101,32,116,111,32,115,116,114,105,110,103,10,99,116,105,109,101,40,41,32,45,45,32,99,111,110,118,101,114,116,32,116,105,109,101,32,105,110,32,115,101,99,111,110,100,115,32,116,111,32,115,116,114,105,110,103,10,109,107,116,105,109,101,40,41,32,45,45,32,99,111,110,118,101,114,116,32,108,111,99,97,108,32,116,105,109,101,32,116,117,112,108,101,32,116,111,32,115,101,99,111,110,100,115,32,115,105,110,99,101,32,69,112,111,99,104,10,115,116,114,102,116,105,109,101,40,41,32,45,45,32,99,111,110,118,101,114,116,32,116,105,109,101,32,116,117,112,108,101,32,116,111,32,115,116,114,105,110,103,32,97,99,99,111,114,100,105,110,103,32,116,111,32,102,111,114,109,97,116,32,115,112,101,99,105,102,105,99,97,116,105,111,110,10,115,116,114,112,116,105,109,101,40,41,32,45,45,32,112,97,114,115,101,32,115,116,114,105,110,103,32,116,111,32,116,105,109,101,32,116,117,112,108,101,32,97,99,99,111,114,100,105,110,103,32,116,111,32,102,111,114,109,97,116,32,115,112,101,99,105,102,105,99,97,116,105,111,110,10,116,122,115,101,116,40,41,32,45,45,32,99,104,97,110,103,101,32,116,104,101,32,108,111,99,97,108,32,116,105,109,101,122,111,110,101,0] /* This module provides */, "i8", ALLOC_NORMAL);
__str59343=allocate([80,89,84,72,79,78,89,50,75,0] /* PYTHONY2K\00 */, "i8", ALLOC_NORMAL);
_initialized=allocate(1, "i32", ALLOC_NORMAL);
__str60344=allocate([115,116,114,117,99,116,95,116,105,109,101,0] /* struct_time\00 */, "i8", ALLOC_NORMAL);
HEAP[_MonthNames_9355]=((__str52)&4294967295);
HEAP[_MonthNames_9355+4]=((__str53)&4294967295);
HEAP[_MonthNames_9355+8]=((__str54)&4294967295);
HEAP[_MonthNames_9355+12]=((__str55)&4294967295);
HEAP[_MonthNames_9355+16]=((__str56)&4294967295);
HEAP[_MonthNames_9355+20]=((__str57)&4294967295);
HEAP[_MonthNames_9355+24]=((__str58)&4294967295);
HEAP[_MonthNames_9355+28]=((__str59)&4294967295);
HEAP[_MonthNames_9355+32]=((__str60)&4294967295);
HEAP[_MonthNames_9355+36]=((__str61)&4294967295);
HEAP[_MonthNames_9355+40]=((__str62)&4294967295);
HEAP[_MonthNames_9355+44]=((__str63)&4294967295);
HEAP[_DayNames_9354]=((__str64)&4294967295);
HEAP[_DayNames_9354+4]=((__str65)&4294967295);
HEAP[_DayNames_9354+8]=((__str66)&4294967295);
HEAP[_DayNames_9354+12]=((__str67)&4294967295);
HEAP[_DayNames_9354+16]=((__str68)&4294967295);
HEAP[_DayNames_9354+20]=((__str69)&4294967295);
HEAP[_DayNames_9354+24]=((__str70)&4294967295);
HEAP[_keywords_10491]=((__str114)&4294967295);
HEAP[_keywords_10491+4]=((__str115)&4294967295);
HEAP[_keywords_10491+8]=((__str116)&4294967295);
HEAP[_keywords_10491+12]=((__str117)&4294967295);
HEAP[_keywords_10491+16]=((__str118)&4294967295);
HEAP[_keywords_10491+20]=((__str119)&4294967295);
HEAP[_keywords_10491+24]=((__str120)&4294967295);
HEAP[_delta_members]=((__str114)&4294967295);
HEAP[_delta_members+16]=((__str130)&4294967295);
HEAP[_delta_members+20]=((__str115)&4294967295);
HEAP[_delta_members+36]=((__str131)&4294967295);
HEAP[_delta_members+40]=((__str116)&4294967295);
HEAP[_delta_members+56]=((__str132)&4294967295);
HEAP[_delta_methods]=((__str133)&4294967295);
HEAP[_delta_methods+4]=(FUNCTION_TABLE_OFFSET + 6);
HEAP[_delta_methods+12]=((__str134)&4294967295);
HEAP[_delta_methods+16]=((__str135)&4294967295);
HEAP[_delta_methods+20]=(FUNCTION_TABLE_OFFSET + 8);
HEAP[_delta_methods+28]=((__str136)&4294967295);
HEAP[_delta_as_number]=(FUNCTION_TABLE_OFFSET + 10);
HEAP[_delta_as_number+4]=(FUNCTION_TABLE_OFFSET + 12);
HEAP[_delta_as_number+8]=(FUNCTION_TABLE_OFFSET + 14);
HEAP[_delta_as_number+12]=(FUNCTION_TABLE_OFFSET + 16);
HEAP[_delta_as_number+28]=(FUNCTION_TABLE_OFFSET + 18);
HEAP[_delta_as_number+32]=(FUNCTION_TABLE_OFFSET + 20);
HEAP[_delta_as_number+36]=(FUNCTION_TABLE_OFFSET + 22);
HEAP[_delta_as_number+40]=(FUNCTION_TABLE_OFFSET + 24);
HEAP[_delta_as_number+136]=(FUNCTION_TABLE_OFFSET + 16);
HEAP[_PyDateTime_DeltaType+12]=((__str137)&4294967295);
HEAP[_PyDateTime_DeltaType+44]=(FUNCTION_TABLE_OFFSET + 26);
HEAP[_PyDateTime_DeltaType+48]=_delta_as_number;
HEAP[_PyDateTime_DeltaType+60]=(FUNCTION_TABLE_OFFSET + 28);
HEAP[_PyDateTime_DeltaType+68]=(FUNCTION_TABLE_OFFSET + 30);
HEAP[_PyDateTime_DeltaType+72]=(FUNCTION_TABLE_OFFSET + 32);
HEAP[_PyDateTime_DeltaType+88]=((_delta_doc)&4294967295);
HEAP[_PyDateTime_DeltaType+100]=(FUNCTION_TABLE_OFFSET + 34);
HEAP[_PyDateTime_DeltaType+116]=((_delta_methods)&4294967295);
HEAP[_PyDateTime_DeltaType+120]=((_delta_members)&4294967295);
HEAP[_PyDateTime_DeltaType+156]=(FUNCTION_TABLE_OFFSET + 36);
HEAP[_date_getset]=((__str138)&4294967295);
HEAP[_date_getset+4]=(FUNCTION_TABLE_OFFSET + 38);
HEAP[_date_getset+20]=((__str139)&4294967295);
HEAP[_date_getset+24]=(FUNCTION_TABLE_OFFSET + 40);
HEAP[_date_getset+40]=((__str140)&4294967295);
HEAP[_date_getset+44]=(FUNCTION_TABLE_OFFSET + 42);
HEAP[_date_kws]=((__str138)&4294967295);
HEAP[_date_kws+4]=((__str139)&4294967295);
HEAP[_date_kws+8]=((__str140)&4294967295);
HEAP[_keywords_11164]=((__str148)&4294967295);
HEAP[_date_methods]=((__str142)&4294967295);
HEAP[_date_methods+4]=(FUNCTION_TABLE_OFFSET + 44);
HEAP[_date_methods+12]=((__str155)&4294967295);
HEAP[_date_methods+16]=((__str156)&4294967295);
HEAP[_date_methods+20]=(FUNCTION_TABLE_OFFSET + 46);
HEAP[_date_methods+28]=((__str157)&4294967295);
HEAP[_date_methods+32]=((__str158)&4294967295);
HEAP[_date_methods+36]=(FUNCTION_TABLE_OFFSET + 48);
HEAP[_date_methods+44]=((__str159)&4294967295);
HEAP[_date_methods+48]=((__str160)&4294967295);
HEAP[_date_methods+52]=(FUNCTION_TABLE_OFFSET + 50);
HEAP[_date_methods+60]=((__str161)&4294967295);
HEAP[_date_methods+64]=((__str93)&4294967295);
HEAP[_date_methods+68]=(FUNCTION_TABLE_OFFSET + 52);
HEAP[_date_methods+76]=((__str162)&4294967295);
HEAP[_date_methods+80]=((__str163)&4294967295);
HEAP[_date_methods+84]=(FUNCTION_TABLE_OFFSET + 54);
HEAP[_date_methods+92]=((__str164)&4294967295);
HEAP[_date_methods+96]=((__str149)&4294967295);
HEAP[_date_methods+100]=(FUNCTION_TABLE_OFFSET + 56);
HEAP[_date_methods+108]=((__str165)&4294967295);
HEAP[_date_methods+112]=((__str166)&4294967295);
HEAP[_date_methods+116]=(FUNCTION_TABLE_OFFSET + 58);
HEAP[_date_methods+124]=((__str167)&4294967295);
HEAP[_date_methods+128]=((__str146)&4294967295);
HEAP[_date_methods+132]=(FUNCTION_TABLE_OFFSET + 60);
HEAP[_date_methods+140]=((__str168)&4294967295);
HEAP[_date_methods+144]=((__str169)&4294967295);
HEAP[_date_methods+148]=(FUNCTION_TABLE_OFFSET + 62);
HEAP[_date_methods+156]=((__str170)&4294967295);
HEAP[_date_methods+160]=((__str171)&4294967295);
HEAP[_date_methods+164]=(FUNCTION_TABLE_OFFSET + 64);
HEAP[_date_methods+172]=((__str172)&4294967295);
HEAP[_date_methods+176]=((__str173)&4294967295);
HEAP[_date_methods+180]=(FUNCTION_TABLE_OFFSET + 66);
HEAP[_date_methods+188]=((__str174)&4294967295);
HEAP[_date_methods+192]=((__str82)&4294967295);
HEAP[_date_methods+196]=(FUNCTION_TABLE_OFFSET + 68);
HEAP[_date_methods+204]=((__str175)&4294967295);
HEAP[_date_methods+208]=((__str135)&4294967295);
HEAP[_date_methods+212]=(FUNCTION_TABLE_OFFSET + 70);
HEAP[_date_methods+220]=((__str136)&4294967295);
HEAP[_date_as_number]=(FUNCTION_TABLE_OFFSET + 72);
HEAP[_date_as_number+4]=(FUNCTION_TABLE_OFFSET + 74);
HEAP[_PyDateTime_DateType+12]=((__str176)&4294967295);
HEAP[_PyDateTime_DateType+44]=(FUNCTION_TABLE_OFFSET + 76);
HEAP[_PyDateTime_DateType+48]=_date_as_number;
HEAP[_PyDateTime_DateType+60]=(FUNCTION_TABLE_OFFSET + 78);
HEAP[_PyDateTime_DateType+68]=(FUNCTION_TABLE_OFFSET + 80);
HEAP[_PyDateTime_DateType+72]=(FUNCTION_TABLE_OFFSET + 32);
HEAP[_PyDateTime_DateType+88]=((_date_doc)&4294967295);
HEAP[_PyDateTime_DateType+100]=(FUNCTION_TABLE_OFFSET + 82);
HEAP[_PyDateTime_DateType+116]=((_date_methods)&4294967295);
HEAP[_PyDateTime_DateType+124]=_date_getset;
HEAP[_PyDateTime_DateType+156]=(FUNCTION_TABLE_OFFSET + 84);
HEAP[_tzinfo_methods]=((__str45)&4294967295);
HEAP[_tzinfo_methods+4]=(FUNCTION_TABLE_OFFSET + 86);
HEAP[_tzinfo_methods+12]=((__str186)&4294967295);
HEAP[_tzinfo_methods+16]=((__str42)&4294967295);
HEAP[_tzinfo_methods+20]=(FUNCTION_TABLE_OFFSET + 88);
HEAP[_tzinfo_methods+28]=((__str187)&4294967295);
HEAP[_tzinfo_methods+32]=((__str44)&4294967295);
HEAP[_tzinfo_methods+36]=(FUNCTION_TABLE_OFFSET + 90);
HEAP[_tzinfo_methods+44]=((__str188)&4294967295);
HEAP[_tzinfo_methods+48]=((__str189)&4294967295);
HEAP[_tzinfo_methods+52]=(FUNCTION_TABLE_OFFSET + 92);
HEAP[_tzinfo_methods+60]=((__str190)&4294967295);
HEAP[_tzinfo_methods+64]=((__str135)&4294967295);
HEAP[_tzinfo_methods+68]=(FUNCTION_TABLE_OFFSET + 94);
HEAP[_tzinfo_methods+76]=((__str191)&4294967295);
HEAP[_PyDateTime_TZInfoType+12]=((__str192)&4294967295);
HEAP[_PyDateTime_TZInfoType+72]=(FUNCTION_TABLE_OFFSET + 32);
HEAP[_PyDateTime_TZInfoType+88]=((_tzinfo_doc)&4294967295);
HEAP[_PyDateTime_TZInfoType+116]=((_tzinfo_methods)&4294967295);
HEAP[_PyDateTime_TZInfoType+156]=(FUNCTION_TABLE_OFFSET + 96);
HEAP[_time_getset]=((__str193)&4294967295);
HEAP[_time_getset+4]=(FUNCTION_TABLE_OFFSET + 98);
HEAP[_time_getset+20]=((__str194)&4294967295);
HEAP[_time_getset+24]=(FUNCTION_TABLE_OFFSET + 100);
HEAP[_time_getset+40]=((__str195)&4294967295);
HEAP[_time_getset+44]=(FUNCTION_TABLE_OFFSET + 102);
HEAP[_time_getset+60]=((__str196)&4294967295);
HEAP[_time_getset+64]=(FUNCTION_TABLE_OFFSET + 104);
HEAP[_time_getset+80]=((__str48)&4294967295);
HEAP[_time_getset+84]=(FUNCTION_TABLE_OFFSET + 106);
HEAP[_time_kws]=((__str193)&4294967295);
HEAP[_time_kws+4]=((__str194)&4294967295);
HEAP[_time_kws+8]=((__str195)&4294967295);
HEAP[_time_kws+12]=((__str196)&4294967295);
HEAP[_time_kws+16]=((__str48)&4294967295);
HEAP[_keywords_12042]=((__str148)&4294967295);
HEAP[_time_methods]=((__str146)&4294967295);
HEAP[_time_methods+4]=(FUNCTION_TABLE_OFFSET + 108);
HEAP[_time_methods+12]=((__str213)&4294967295);
HEAP[_time_methods+16]=((__str93)&4294967295);
HEAP[_time_methods+20]=(FUNCTION_TABLE_OFFSET + 110);
HEAP[_time_methods+28]=((__str162)&4294967295);
HEAP[_time_methods+32]=((__str163)&4294967295);
HEAP[_time_methods+36]=(FUNCTION_TABLE_OFFSET + 54);
HEAP[_time_methods+44]=((__str164)&4294967295);
HEAP[_time_methods+48]=((__str42)&4294967295);
HEAP[_time_methods+52]=(FUNCTION_TABLE_OFFSET + 112);
HEAP[_time_methods+60]=((__str214)&4294967295);
HEAP[_time_methods+64]=((__str45)&4294967295);
HEAP[_time_methods+68]=(FUNCTION_TABLE_OFFSET + 114);
HEAP[_time_methods+76]=((__str215)&4294967295);
HEAP[_time_methods+80]=((__str44)&4294967295);
HEAP[_time_methods+84]=(FUNCTION_TABLE_OFFSET + 116);
HEAP[_time_methods+92]=((__str216)&4294967295);
HEAP[_time_methods+96]=((__str82)&4294967295);
HEAP[_time_methods+100]=(FUNCTION_TABLE_OFFSET + 118);
HEAP[_time_methods+108]=((__str217)&4294967295);
HEAP[_time_methods+112]=((__str135)&4294967295);
HEAP[_time_methods+116]=(FUNCTION_TABLE_OFFSET + 120);
HEAP[_time_methods+124]=((__str136)&4294967295);
HEAP[_time_as_number+40]=(FUNCTION_TABLE_OFFSET + 122);
HEAP[_PyDateTime_TimeType+12]=((__str218)&4294967295);
HEAP[_PyDateTime_TimeType+24]=(FUNCTION_TABLE_OFFSET + 124);
HEAP[_PyDateTime_TimeType+44]=(FUNCTION_TABLE_OFFSET + 126);
HEAP[_PyDateTime_TimeType+48]=_time_as_number;
HEAP[_PyDateTime_TimeType+60]=(FUNCTION_TABLE_OFFSET + 128);
HEAP[_PyDateTime_TimeType+68]=(FUNCTION_TABLE_OFFSET + 130);
HEAP[_PyDateTime_TimeType+72]=(FUNCTION_TABLE_OFFSET + 32);
HEAP[_PyDateTime_TimeType+88]=((_time_doc)&4294967295);
HEAP[_PyDateTime_TimeType+100]=(FUNCTION_TABLE_OFFSET + 132);
HEAP[_PyDateTime_TimeType+116]=((_time_methods)&4294967295);
HEAP[_PyDateTime_TimeType+124]=_time_getset;
HEAP[_PyDateTime_TimeType+152]=(FUNCTION_TABLE_OFFSET + 134);
HEAP[_PyDateTime_TimeType+156]=(FUNCTION_TABLE_OFFSET + 136);
HEAP[_datetime_getset]=((__str193)&4294967295);
HEAP[_datetime_getset+4]=(FUNCTION_TABLE_OFFSET + 138);
HEAP[_datetime_getset+20]=((__str194)&4294967295);
HEAP[_datetime_getset+24]=(FUNCTION_TABLE_OFFSET + 140);
HEAP[_datetime_getset+40]=((__str195)&4294967295);
HEAP[_datetime_getset+44]=(FUNCTION_TABLE_OFFSET + 142);
HEAP[_datetime_getset+60]=((__str196)&4294967295);
HEAP[_datetime_getset+64]=(FUNCTION_TABLE_OFFSET + 144);
HEAP[_datetime_getset+80]=((__str48)&4294967295);
HEAP[_datetime_getset+84]=(FUNCTION_TABLE_OFFSET + 146);
HEAP[_datetime_kws]=((__str138)&4294967295);
HEAP[_datetime_kws+4]=((__str139)&4294967295);
HEAP[_datetime_kws+8]=((__str140)&4294967295);
HEAP[_datetime_kws+12]=((__str193)&4294967295);
HEAP[_datetime_kws+16]=((__str194)&4294967295);
HEAP[_datetime_kws+20]=((__str195)&4294967295);
HEAP[_datetime_kws+24]=((__str196)&4294967295);
HEAP[_datetime_kws+28]=((__str48)&4294967295);
HEAP[_keywords_12654]=((__str223)&4294967295);
HEAP[_keywords_12701]=((__str225)&4294967295);
HEAP[_keywords_12701+4]=((__str223)&4294967295);
HEAP[_keywords_12871]=((__str232)&4294967295);
HEAP[_keywords_12871+4]=((__str92)&4294967295);
HEAP[_keywords_13363]=((__str241)&4294967295);
HEAP[_keywords_13698]=((__str223)&4294967295);
HEAP[_datetime_methods]=((__str247)&4294967295);
HEAP[_datetime_methods+4]=(FUNCTION_TABLE_OFFSET + 148);
HEAP[_datetime_methods+12]=((__str248)&4294967295);
HEAP[_datetime_methods+16]=((__str249)&4294967295);
HEAP[_datetime_methods+20]=(FUNCTION_TABLE_OFFSET + 150);
HEAP[_datetime_methods+28]=((__str250)&4294967295);
HEAP[_datetime_methods+32]=((__str142)&4294967295);
HEAP[_datetime_methods+36]=(FUNCTION_TABLE_OFFSET + 152);
HEAP[_datetime_methods+44]=((__str251)&4294967295);
HEAP[_datetime_methods+48]=((__str252)&4294967295);
HEAP[_datetime_methods+52]=(FUNCTION_TABLE_OFFSET + 154);
HEAP[_datetime_methods+60]=((__str253)&4294967295);
HEAP[_datetime_methods+64]=((__str254)&4294967295);
HEAP[_datetime_methods+68]=(FUNCTION_TABLE_OFFSET + 156);
HEAP[_datetime_methods+76]=((__str255)&4294967295);
HEAP[_datetime_methods+80]=((__str256)&4294967295);
HEAP[_datetime_methods+84]=(FUNCTION_TABLE_OFFSET + 158);
HEAP[_datetime_methods+92]=((__str257)&4294967295);
HEAP[_datetime_methods+96]=((__str232)&4294967295);
HEAP[_datetime_methods+100]=(FUNCTION_TABLE_OFFSET + 160);
HEAP[_datetime_methods+108]=((__str258)&4294967295);
HEAP[_datetime_methods+112]=((__str92)&4294967295);
HEAP[_datetime_methods+116]=(FUNCTION_TABLE_OFFSET + 162);
HEAP[_datetime_methods+124]=((__str259)&4294967295);
HEAP[_datetime_methods+128]=((__str260)&4294967295);
HEAP[_datetime_methods+132]=(FUNCTION_TABLE_OFFSET + 164);
HEAP[_datetime_methods+140]=((__str261)&4294967295);
HEAP[_datetime_methods+144]=((__str160)&4294967295);
HEAP[_datetime_methods+148]=(FUNCTION_TABLE_OFFSET + 166);
HEAP[_datetime_methods+156]=((__str161)&4294967295);
HEAP[_datetime_methods+160]=((__str149)&4294967295);
HEAP[_datetime_methods+164]=(FUNCTION_TABLE_OFFSET + 168);
HEAP[_datetime_methods+172]=((__str165)&4294967295);
HEAP[_datetime_methods+176]=((__str262)&4294967295);
HEAP[_datetime_methods+180]=(FUNCTION_TABLE_OFFSET + 170);
HEAP[_datetime_methods+188]=((__str263)&4294967295);
HEAP[_datetime_methods+192]=((__str146)&4294967295);
HEAP[_datetime_methods+196]=(FUNCTION_TABLE_OFFSET + 172);
HEAP[_datetime_methods+204]=((__str264)&4294967295);
HEAP[_datetime_methods+208]=((__str42)&4294967295);
HEAP[_datetime_methods+212]=(FUNCTION_TABLE_OFFSET + 174);
HEAP[_datetime_methods+220]=((__str214)&4294967295);
HEAP[_datetime_methods+224]=((__str45)&4294967295);
HEAP[_datetime_methods+228]=(FUNCTION_TABLE_OFFSET + 176);
HEAP[_datetime_methods+236]=((__str215)&4294967295);
HEAP[_datetime_methods+240]=((__str44)&4294967295);
HEAP[_datetime_methods+244]=(FUNCTION_TABLE_OFFSET + 178);
HEAP[_datetime_methods+252]=((__str216)&4294967295);
HEAP[_datetime_methods+256]=((__str82)&4294967295);
HEAP[_datetime_methods+260]=(FUNCTION_TABLE_OFFSET + 180);
HEAP[_datetime_methods+268]=((__str265)&4294967295);
HEAP[_datetime_methods+272]=((__str266)&4294967295);
HEAP[_datetime_methods+276]=(FUNCTION_TABLE_OFFSET + 182);
HEAP[_datetime_methods+284]=((__str267)&4294967295);
HEAP[_datetime_methods+288]=((__str135)&4294967295);
HEAP[_datetime_methods+292]=(FUNCTION_TABLE_OFFSET + 184);
HEAP[_datetime_methods+300]=((__str136)&4294967295);
HEAP[_datetime_as_number]=(FUNCTION_TABLE_OFFSET + 186);
HEAP[_datetime_as_number+4]=(FUNCTION_TABLE_OFFSET + 188);
HEAP[_PyDateTime_DateTimeType+12]=((__str268)&4294967295);
HEAP[_PyDateTime_DateTimeType+24]=(FUNCTION_TABLE_OFFSET + 190);
HEAP[_PyDateTime_DateTimeType+44]=(FUNCTION_TABLE_OFFSET + 192);
HEAP[_PyDateTime_DateTimeType+48]=_datetime_as_number;
HEAP[_PyDateTime_DateTimeType+60]=(FUNCTION_TABLE_OFFSET + 194);
HEAP[_PyDateTime_DateTimeType+68]=(FUNCTION_TABLE_OFFSET + 196);
HEAP[_PyDateTime_DateTimeType+72]=(FUNCTION_TABLE_OFFSET + 32);
HEAP[_PyDateTime_DateTimeType+88]=((_datetime_doc)&4294967295);
HEAP[_PyDateTime_DateTimeType+100]=(FUNCTION_TABLE_OFFSET + 198);
HEAP[_PyDateTime_DateTimeType+116]=((_datetime_methods)&4294967295);
HEAP[_PyDateTime_DateTimeType+124]=_datetime_getset;
HEAP[_PyDateTime_DateTimeType+128]=_PyDateTime_DateType;
HEAP[_PyDateTime_DateTimeType+152]=(FUNCTION_TABLE_OFFSET + 200);
HEAP[_PyDateTime_DateTimeType+156]=(FUNCTION_TABLE_OFFSET + 202);
HEAP[_CAPI]=_PyDateTime_DateType;
HEAP[_CAPI+4]=_PyDateTime_DateTimeType;
HEAP[_CAPI+8]=_PyDateTime_TimeType;
HEAP[_CAPI+12]=_PyDateTime_DeltaType;
HEAP[_CAPI+16]=_PyDateTime_TZInfoType;
HEAP[_CAPI+20]=(FUNCTION_TABLE_OFFSET + 204);
HEAP[_CAPI+24]=(FUNCTION_TABLE_OFFSET + 206);
HEAP[_CAPI+28]=(FUNCTION_TABLE_OFFSET + 208);
HEAP[_CAPI+32]=(FUNCTION_TABLE_OFFSET + 210);
HEAP[_CAPI+36]=(FUNCTION_TABLE_OFFSET + 152);
HEAP[_CAPI+40]=(FUNCTION_TABLE_OFFSET + 44);
HEAP[_struct_time_type_fields]=((__str2285)&4294967295);
HEAP[_struct_time_type_fields+4]=((__str3286)&4294967295);
HEAP[_struct_time_type_fields+8]=((__str4287)&4294967295);
HEAP[_struct_time_type_fields+12]=((__str5288)&4294967295);
HEAP[_struct_time_type_fields+16]=((__str6289)&4294967295);
HEAP[_struct_time_type_fields+20]=((__str7290)&4294967295);
HEAP[_struct_time_type_fields+24]=((__str8291)&4294967295);
HEAP[_struct_time_type_fields+28]=((__str9292)&4294967295);
HEAP[_struct_time_type_fields+32]=((__str10293)&4294967295);
HEAP[_struct_time_type_fields+36]=((__str11294)&4294967295);
HEAP[_struct_time_type_fields+40]=((__str12295)&4294967295);
HEAP[_struct_time_type_fields+44]=((__str13296)&4294967295);
HEAP[_struct_time_type_fields+48]=((__str14297)&4294967295);
HEAP[_struct_time_type_fields+52]=((__str15298)&4294967295);
HEAP[_struct_time_type_fields+56]=((__str16299)&4294967295);
HEAP[_struct_time_type_fields+60]=((__str17300)&4294967295);
HEAP[_struct_time_type_fields+64]=((__str18301)&4294967295);
HEAP[_struct_time_type_fields+68]=((__str19302)&4294967295);
HEAP[_struct_time_type_desc]=((__str20303)&4294967295);
HEAP[_struct_time_type_desc+4]=((__str21304)&4294967295);
HEAP[_struct_time_type_desc+8]=((_struct_time_type_fields)&4294967295);
HEAP[_time_methods342]=((__str44327)&4294967295);
HEAP[_time_methods342+4]=(FUNCTION_TABLE_OFFSET + 212);
HEAP[_time_methods342+12]=((_time_doc283)&4294967295);
HEAP[_time_methods342+16]=((__str51334)&4294967295);
HEAP[_time_methods342+20]=(FUNCTION_TABLE_OFFSET + 214);
HEAP[_time_methods342+28]=((_clock_doc)&4294967295);
HEAP[_time_methods342+32]=((__str52335)&4294967295);
HEAP[_time_methods342+36]=(FUNCTION_TABLE_OFFSET + 216);
HEAP[_time_methods342+44]=((_sleep_doc)&4294967295);
HEAP[_time_methods342+48]=((__str53336)&4294967295);
HEAP[_time_methods342+52]=(FUNCTION_TABLE_OFFSET + 218);
HEAP[_time_methods342+60]=((_gmtime_doc)&4294967295);
HEAP[_time_methods342+64]=((__str54337)&4294967295);
HEAP[_time_methods342+68]=(FUNCTION_TABLE_OFFSET + 220);
HEAP[_time_methods342+76]=((_localtime_doc)&4294967295);
HEAP[_time_methods342+80]=((__str39322)&4294967295);
HEAP[_time_methods342+84]=(FUNCTION_TABLE_OFFSET + 222);
HEAP[_time_methods342+92]=((_asctime_doc)&4294967295);
HEAP[_time_methods342+96]=((__str41324)&4294967295);
HEAP[_time_methods342+100]=(FUNCTION_TABLE_OFFSET + 224);
HEAP[_time_methods342+108]=((_ctime_doc)&4294967295);
HEAP[_time_methods342+112]=((__str55338)&4294967295);
HEAP[_time_methods342+116]=(FUNCTION_TABLE_OFFSET + 226);
HEAP[_time_methods342+124]=((_mktime_doc)&4294967295);
HEAP[_time_methods342+128]=((__str56339)&4294967295);
HEAP[_time_methods342+132]=(FUNCTION_TABLE_OFFSET + 228);
HEAP[_time_methods342+140]=((_strftime_doc)&4294967295);
HEAP[_time_methods342+144]=((__str57340)&4294967295);
HEAP[_time_methods342+148]=(FUNCTION_TABLE_OFFSET + 230);
HEAP[_time_methods342+156]=((_strptime_doc)&4294967295);
HEAP[_time_methods342+160]=((__str58341)&4294967295);
HEAP[_time_methods342+164]=(FUNCTION_TABLE_OFFSET + 232);
HEAP[_time_methods342+172]=((_tzset_doc)&4294967295);

  __globalConstructor__();
}
Module['run'] = run;

// {{PRE_RUN_ADDITIONS}}

run();

// {{POST_RUN_ADDITIONS}}





  // {{MODULE_ADDITIONS}}

  return Module;
});

