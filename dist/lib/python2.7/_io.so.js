// Warning: 64 bit OR - precision limit may be hit on llvm line 25462
"use strict";

// Capture the output of this into a variable, if you want
(function(FUNCTION_TABLE_OFFSET) {
  var Module = {};
  var args = [];
  Module.arguments = [];

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime essentials
//========================================

var __globalConstructor__ = function globalConstructor() {
}

// === Body ===



var $0___SIZE = 96; // %0
  
var $1___SIZE = 16; // %1
  
var $2___SIZE = 196; // %2
  
var $3___SIZE = 256; // %3
  
var $4___SIZE = 16; // %4
  
var $5___SIZE = 40; // %5
  
var $6___SIZE = 20; // %6
  
var $7___SIZE = 20; // %7
  
var $8___SIZE = 80; // %8
  
var $9___SIZE = 20; // %9
  
var $10___SIZE = 208; // %10
  
var $11___SIZE = 176; // %11
  
var $12___SIZE = 40; // %12
  
var $13___SIZE = 288; // %13
  
var $14___SIZE = 320; // %14
  
var $15___SIZE = 224; // %15
  
var $16___SIZE = 196; // %16
  
var $17___SIZE = 320; // %17
  
var $18___SIZE = 48; // %18
  
var $19___SIZE = 32; // %19
  
var $20___SIZE = 224; // %20
  
var $21___SIZE = 80; // %21
  
var $22___SIZE = 80; // %22
  
var $23___SIZE = 16; // %23
  
var $24___SIZE = 240; // %24
  
var $25___SIZE = 80; // %25
  
var $26___SIZE = 120; // %26
  
var $struct_FILE___SIZE = 148; // %struct.FILE
  var $struct_FILE___FLATTENER = [0,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64,68,70,71,72,76,84,88,92,96,100,104,108];
var $struct_PyBlockingIOErrorObject___SIZE = 36; // %struct.PyBlockingIOErrorObject
  
var $struct_PyBufferProcs___SIZE = 24; // %struct.PyBufferProcs
  
var $struct_PyByteArrayObject___SIZE = 24; // %struct.PyByteArrayObject
  
var $struct_PyEnvironmentErrorObject___SIZE = 32; // %struct.PyEnvironmentErrorObject
  
var $struct_PyGetSetDef___SIZE = 20; // %struct.PyGetSetDef
  
var $struct_PyIntObject___SIZE = 12; // %struct.PyIntObject
  
var $struct_PyLongObject___SIZE = 0; // %struct.PyLongObject
  var $struct_PyLongObject___FLATTENER = [];
var $struct_PyMappingMethods___SIZE = 12; // %struct.PyMappingMethods
  
var $struct_PyMemberDef___SIZE = 20; // %struct.PyMemberDef
  
var $struct_PyMethodDef___SIZE = 16; // %struct.PyMethodDef
  
var $struct_PyNumberMethods___SIZE = 156; // %struct.PyNumberMethods
  
var $struct_PyObject___SIZE = 8; // %struct.PyObject
  
var $struct_PySequenceMethods___SIZE = 40; // %struct.PySequenceMethods
  
var $struct_PyStringObject___SIZE = 24; // %struct.PyStringObject
  
var $struct_PyTupleObject___SIZE = 16; // %struct.PyTupleObject
  
var $struct_PyUnicodeObject___SIZE = 24; // %struct.PyUnicodeObject
  
var $struct_Py_buffer___SIZE = 52; // %struct.Py_buffer
  var $struct_Py_buffer___FLATTENER = [0,4,8,12,16,20,24,28,32,36,40,48];
var $struct__IO_marker___SIZE = 12; // %struct._IO_marker
  
var $struct__typeobject___SIZE = 196; // %struct._typeobject
  
var $struct_anon___SIZE = 12; // %struct.anon
  
var $struct_buffered___SIZE = 100; // %struct.buffered
  var $struct_buffered___FLATTENER = [0,4,8,12,16,20,24,28,32,40,44,52,60,68,76,84,88,92,96];
var $struct_bytesio___SIZE = 32; // %struct.bytesio
  
var $struct_cookie_type___SIZE = 24; // %struct.cookie_type
  var $struct_cookie_type___FLATTENER = [0,8,12,16,20];
var $struct_encodefuncentry___SIZE = 8; // %struct.encodefuncentry
  
var $struct_fileio___SIZE = 24; // %struct.fileio
  
var $struct_iobase___SIZE = 16; // %struct.iobase
  
var $struct_nldecoder_object___SIZE = 20; // %struct.nldecoder_object
  
var $struct_rwpair___SIZE = 24; // %struct.rwpair
  
var $struct_stat___SIZE = 96; // %struct.stat
  var $struct_stat___FLATTENER = [0,8,12,16,20,24,28,32,40,44,52,56,64,72,80,88];
var $struct_stringio___SIZE = 48; // %struct.stringio
  var $struct_stringio___FLATTENER = [0,4,8,12,16,20,24,25,26,27,28,32,36,40,44];
var $struct_textio___SIZE = 96; // %struct.textio
  var $struct_textio___FLATTENER = [0,4,8,12,16,20,24,28,32,36,40,44,48,49,50,51,52,53,56,60,64,68,72,76,80,84,88,92];
var $struct_timespec___SIZE = 8; // %struct.timespec
  
var $union_PyGC_Head___SIZE = 12; // %union.PyGC_Head
  
var _bufferediobase_doc;
var __str;
var __str1;
var __str2;

var __str3;
var _bufferediobase_detach_doc;
var __str4;
var _bufferediobase_read_doc;
var _bufferediobase_read1_doc;
var __str5;
var _bufferediobase_write_doc;
var __str6;
var __str7;
var _bufferediobase_methods;
var __str8;
var _PyBufferedIOBase_Type;
var __str9;
var __str10;
var ___PRETTY_FUNCTION___8563;

var __str11;
var __str12;

var __str13;
var __str14;

var __str15;
var __str16;
var _eintr_int_9093;
var __str17;
var ___PRETTY_FUNCTION___9098;

var __str18;
var __str19;
var __str20;
var __str21;
var __str22;
var __str23;
var __str24;
var __str25;
var __str26;
var __str27;
var __str28;
var __str29;
var __str30;
var __str31;
var __str32;

var __str33;
var __str34;
var _bufferedreader_doc;
var __str35;
var __str36;
var __str37;

var __str38;
var __str39;
var ___PRETTY_FUNCTION___10369;
var __str40;
var __str41;
var __str42;
var __str43;
var __str44;
var __str45;
var __str46;
var __str47;
var __str48;
var __str49;
var __str50;
var __str51;
var _bufferedreader_methods;
var _bufferedreader_members;
var __str52;
var _bufferedreader_getset;
var __str53;
var _PyBufferedReader_Type;

var __str54;
var _bufferedwriter_doc;
var __str55;
var __str56;
var __str57;
var __str58;
var __str59;
var __str60;
var ___PRETTY_FUNCTION___10762;
var _bufferedwriter_methods;
var _bufferedwriter_members;
var _bufferedwriter_getset;
var __str61;
var _PyBufferedWriter_Type;
var _bufferedrwpair_doc;
var __str62;
var __str63;
var ___PRETTY_FUNCTION___11129;

var _bufferedrwpair_methods;
var _bufferedrwpair_getset;
var __str64;
var _PyBufferedRWPair_Type;
var _bufferedrandom_doc;
var _bufferedrandom_methods;
var _bufferedrandom_members;
var _bufferedrandom_getset;
var __str65;
var _PyBufferedRandom_Type;
var __str66;
var __str167;
var ___PRETTY_FUNCTION___8438;
var __str268;
var __str369;
var ___PRETTY_FUNCTION___8477;

var __str470;
var ___PRETTY_FUNCTION___8514;
var __str571;
var _flush_doc;
var __str672;
var _getval_doc;
var _isatty_doc;
var _tell_doc;
var _read_doc;
var __str773;
var __str874;
var ___PRETTY_FUNCTION___8642;
var _read1_doc;
var _readline_doc;
var __str975;
var _readlines_doc;
var __str1076;
var _readinto_doc;
var __str1177;
var __str1278;
var ___PRETTY_FUNCTION___8844;
var _truncate_doc;
var __str1480;
var _seek_doc;
var __str1682;
var __str1783;
var __str1884;
var _write_doc;
var _writelines_doc;
var _close_doc;
var __str1985;
var __str2086;
var ___PRETTY_FUNCTION___9134;
var __str2187;
var __str2288;
var __str2389;
var __str2490;
var ___PRETTY_FUNCTION___9218;
var __str2692;
var ___PRETTY_FUNCTION___9255;
var __str2793;
var __str2894;
var __str3096;
var _bytesio_getsetlist;
var __str39105;
var __str43109;
var __str45111;
var __str48114;
var __str49115;
var _bytesio_methods;
var _bytesio_doc;
var __str50116;
var _PyBytesIO_Type;
var __str117;
var __str1118;
var __str2119;
var __str3120;
var ___PRETTY_FUNCTION___8576;
var __str4121;

var __str5122;
var __str6123;
var __str7124;
var ___PRETTY_FUNCTION___8670;
var __str8125;
var _kwlist_8657;
var __str9126;
var __str11128;

var __str12129;
var __str13130;


var __str14131;
var __str15132;
var __str16133;
var __str17134;
var __str19136;
var ___PRETTY_FUNCTION___8879;
var __str20137;
var __str21138;
var __str22139;
var __str23140;
var __str24141;
var __str25142;
var __str26143;
var __str27144;
var __str28145;
var __str29146;
var __str30147;
var __str31148;
var __str32149;
var __str33150;
var __str34151;
var __str35152;
var __str36153;
var _fileio_doc;
var _read_doc154;
var _readall_doc;
var _write_doc155;
var _fileno_doc;
var _seek_doc156;
var _truncate_doc157;
var _tell_doc158;
var _readinto_doc159;
var _close_doc160;
var _isatty_doc161;
var _seekable_doc;
var _readable_doc;
var _writable_doc;
var __str37162;
var __str38163;
var __str39164;
var __str40165;
var __str41166;
var __str42167;
var __str43168;
var __str44169;
var __str45170;
var __str46171;
var __str48173;
var _fileio_methods;
var __str49174;
var __str50175;
var __str51176;
var __str52177;
var _fileio_getsetlist;
var __str53178;
var _PyFileIO_Type;
var _iobase_doc;
var _iobase_seek_doc;
var __str181;
var _iobase_tell_doc;
var __str1182;
var _iobase_truncate_doc;
var __str2183;
var _iobase_flush_doc;
var __str3184;
var __str4185;
var _iobase_close_doc;
var __str5186;
var __str6187;
var ___PRETTY_FUNCTION___8634;
var _iobase_seekable_doc;
var __str7188;
var _iobase_readable_doc;
var __str8189;
var _iobase_writable_doc;
var __str9190;
var _iobase_fileno_doc;
var __str10191;
var _iobase_isatty_doc;
var _iobase_readline_doc;
var __str13194;
var __str14195;
var __str15196;
var __str17198;
var __str18199;
var ___PRETTY_FUNCTION___8875;

var _iobase_readlines_doc;
var __str19200;
var __str20201;
var __str21202;
var __str22203;
var __str23204;
var __str24205;
var __str25206;
var __str26207;
var __str27208;
var __str28209;
var __str29210;
var __str30211;
var __str31212;
var __str32213;
var __str33214;
var __str34215;
var __str35216;
var __str36217;
var __str37218;
var __str38219;
var _iobase_methods;
var __str39220;
var _iobase_getset;
var __str40221;
var _PyIOBase_Type;
var _rawiobase_doc;
var __str41223;
var __str42224;
var _rawiobase_readall_doc;
var _rawiobase_methods;
var __str44226;
var _PyRawIOBase_Type;
var _module_doc;
var __str232;
var __str1233;
var ___PRETTY_FUNCTION___8454;
var __str2234;
var __str3235;
var _blockingioerror_members;
var __str4236;
var __str5237;
var __PyExc_BlockingIOError;
var _PyExc_BlockingIOError;
var _open_doc;
var __str6239;
var __str7240;
var __str8241;
var __str9242;
var __str10243;
var __str11244;
var __str12245;
var __str13246;
var __str14247;
var __str15248;
var __str16249;
var __str17250;
var __str18251;
var __str19252;
var __str20253;
var __str21254;
var __str22255;
var __str23256;
var __str24257;
var __str25258;
var __str26259;
var __str27260;
var __str28261;
var __str29262;
var __str30263;
var __str31264;
var ___PRETTY_FUNCTION___8811;
var __str32265;
var __str33266;
var __PyIO_os_module;
var __PyIO_locale_module;
var __PyIO_unsupported_operation;
var __str34268;
var _module_methods;
var __str35269;
var __str36270;
var __str37271;

var __str38272;
var __str39273;
var __str40274;
var __str41275;
var __str42276;
var __str43277;
var __str44278;
var __str45279;
var __str46280;
var __str47281;
var __str48282;
var __str49283;
var __str50284;
var __str51285;
var __str52286;
var __str53287;
var __PyIO_str_close;
var __str54289;
var __PyIO_str_closed;
var __str55291;
var __PyIO_str_decode;
var __str56292;
var __PyIO_str_encode;
var __PyIO_str_fileno;
var __str57294;
var __PyIO_str_flush;
var __str58296;
var __PyIO_str_getstate;
var __PyIO_str_isatty;
var __str59298;
var __PyIO_str_newlines;
var __str60299;
var __PyIO_str_nl;
var __str61300;
var __PyIO_str_read;
var __str62302;
var __PyIO_str_read1;
var __str63303;
var __PyIO_str_readable;
var __str64305;
var __PyIO_str_readinto;
var __str65307;
var __PyIO_str_readline;
var __str66309;
var __PyIO_str_reset;
var __str67;
var __PyIO_str_seek;
var __str68;
var __PyIO_str_seekable;
var __str69;
var __PyIO_str_setstate;
var __str70;
var __PyIO_str_tell;
var __str71;
var __PyIO_str_truncate;
var __str72;
var __PyIO_str_write;
var __str73;
var __PyIO_str_writable;
var __PyIO_empty_str;
var __PyIO_empty_bytes;
var __PyIO_zero;
var _stringio_doc;
var __str319;
var __str1320;
var ___PRETTY_FUNCTION___8442;
var __str2321;
var ___PRETTY_FUNCTION___8484;
var __str3322;
var __str4323;
var __str5324;
var __str6325;
var _stringio_getvalue_doc;
var __str8327;
var _stringio_tell_doc;
var _stringio_read_doc;
var __str9328;
var __str10329;
var __str11330;
var _stringio_readline_doc;
var __str12331;
var __str13332;
var _stringio_truncate_doc;
var __str14333;
var __str15334;
var _stringio_seek_doc;
var __str16335;
var __str17336;
var __str18337;
var __str19338;
var _stringio_write_doc;
var __str20339;
var _stringio_close_doc;
var __str21340;
var ___PRETTY_FUNCTION___9021;
var __str22341;
var ___PRETTY_FUNCTION___9091;
var __str23342;
var __str24343;
var __str25344;
var __str26345;
var __str27346;
var __str28347;
var __str29348;
var __str30349;
var __str31350;
var ___PRETTY_FUNCTION___9352;
var __str32351;
var __str33352;
var __str34353;
var __str35354;
var __str36355;
var __str37356;
var __str38357;
var __str39358;
var __str40359;
var __str41360;
var __str42361;
var __str43362;
var __str44363;
var __str45364;
var __str46365;
var __str47366;
var __str48367;
var _stringio_methods;
var __str49368;
var __str50369;
var __str51370;
var _stringio_getset;
var __str52371;
var _PyStringIO_Type;
var _textiobase_doc;
var _textiobase_detach_doc;
var _textiobase_read_doc;
var __str1375;
var _textiobase_readline_doc;
var __str2376;
var _textiobase_write_doc;
var __str3377;
var _textiobase_encoding_doc;
var _textiobase_newlines_doc;
var _textiobase_errors_doc;
var _textiobase_methods;
var __str4378;
var __str5379;
var __str6380;
var _textiobase_getset;
var __str7381;
var _PyTextIOBase_Type;
var _incrementalnewlinedecoder_doc;
var __str8383;
var __str9384;
var __str10385;
var __str11386;
var __str12387;
var __str13388;
var __str14389;
var __str15390;
var ___PRETTY_FUNCTION___8596;
var __str16391;
var __str17392;
var __str18393;
var __str19394;
var __str20395;
var __str21396;
var __str22397;
var __str23398;
var __str24399;
var __str25400;
var __str26401;
var __str27402;
var __str28403;
var __str29404;
var __str30405;
var __str31406;
var _incrementalnewlinedecoder_methods;
var _incrementalnewlinedecoder_getset;
var __str32407;
var _PyIncrementalNewlineDecoder_Type;
var _textiowrapper_doc;
var _encodefuncs;
var __str33409;
var __str34410;
var __str35411;
var __str36412;
var __str37413;
var __str38414;
var __str39415;
var __str40416;
var __str41417;
var __str42418;
var __str43419;
var __str44420;
var __str45421;
var __str46422;
var __str47423;
var __str48424;

var __str49425;
var __str50426;
var __str51427;
var __str52428;
var __str53429;
var __str55431;
var __str56432;
var ___PRETTY_FUNCTION___9695;
var __str57433;
var __str58434;
var __str59435;
var __str60436;
var __str61437;
var __str62438;
var __str63439;
var ___PRETTY_FUNCTION___10189;
var __str64440;
var __str65441;
var __str66442;
var ___PRETTY_FUNCTION___10233;
var __str67443;
var __str68444;
var __str70446;
var ___PRETTY_FUNCTION___10735;
var __str71447;
var __str72448;
var __str73449;
var __str74;
var __str75;
var __str76;
var __str77;
var __str78;
var __str79;
var __str80;
var __str81;
var __str82;
var __str83;
var __str84;
var ___PRETTY_FUNCTION___11188;
var __str85;
var __str86;
var __str87;
var __str88;
var __str89;
var ___PRETTY_FUNCTION___11475;
var __str90;
var __str91;
var __str92;
var __str93;
var __str94;
var __str95;
var __str96;
var __str97;
var __str98;
var __str99;
var __str100;
var __str101;
var __str102;
var __str103;
var __str104;
var __str105;
var _textiowrapper_methods;
var _textiowrapper_members;
var __str106;
var __str107;
var _textiowrapper_getset;
var __str108;
var _PyTextIOWrapper_Type;


































































































































  function _bufferediobase_readinto($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 52; _memset(__stackBase__, 0, 52);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $buf=__stackBase__;
        var $len;
        var $data;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$args_addr; //@line 42 "bufferedio.c"
        var $2=__PyArg_ParseTuple_SizeT($1, __str, allocate([$buf,0,0,0], ["%struct.Py_buffer*",0,0,0], ALLOC_STACK)); //@line 42 "bufferedio.c"
        var $3=($2)==0; //@line 42 "bufferedio.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 42 "bufferedio.c"
      case 1: // $bb
        $0=0; //@line 43 "bufferedio.c"
        __label__ = 11; break; //@line 43 "bufferedio.c"
      case 2: // $bb1
        var $4=$buf+8; //@line 46 "bufferedio.c"
        var $5=HEAP[$4]; //@line 46 "bufferedio.c"
        var $6=$self_addr; //@line 46 "bufferedio.c"
        var $7=__PyObject_CallMethod_SizeT($6, __str1, __str2, allocate([$5,0,0,0], ["i32",0,0,0], ALLOC_STACK)); //@line 46 "bufferedio.c"
        $data=$7; //@line 46 "bufferedio.c"
        var $8=$data; //@line 47 "bufferedio.c"
        var $9=($8)==0; //@line 47 "bufferedio.c"
        if ($9) { __label__ = 10; break; } else { __label__ = 3; break; } //@line 47 "bufferedio.c"
      case 3: // $bb2
        var $10=$data; //@line 50 "bufferedio.c"
        var $11=$10+4; //@line 50 "bufferedio.c"
        var $12=HEAP[$11]; //@line 50 "bufferedio.c"
        var $13=$12+84; //@line 50 "bufferedio.c"
        var $14=HEAP[$13]; //@line 50 "bufferedio.c"
        var $15=($14) & 134217728; //@line 50 "bufferedio.c"
        var $16=($15)==0; //@line 50 "bufferedio.c"
        var $17=$data; //@line 51 "bufferedio.c"
        if ($16) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 50 "bufferedio.c"
      case 4: // $bb3
        var $18=$17; //@line 51 "bufferedio.c"
        var $19=HEAP[$18]; //@line 51 "bufferedio.c"
        var $20=($19) - 1; //@line 51 "bufferedio.c"
        var $21=$data; //@line 51 "bufferedio.c"
        var $22=$21; //@line 51 "bufferedio.c"
        HEAP[$22]=$20; //@line 51 "bufferedio.c"
        var $23=$data; //@line 51 "bufferedio.c"
        var $24=$23; //@line 51 "bufferedio.c"
        var $25=HEAP[$24]; //@line 51 "bufferedio.c"
        var $26=($25)==0; //@line 51 "bufferedio.c"
        if ($26) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 51 "bufferedio.c"
      case 5: // $bb4
        var $27=$data; //@line 51 "bufferedio.c"
        var $28=$27+4; //@line 51 "bufferedio.c"
        var $29=HEAP[$28]; //@line 51 "bufferedio.c"
        var $30=$29+24; //@line 51 "bufferedio.c"
        var $31=HEAP[$30]; //@line 51 "bufferedio.c"
        var $32=$data; //@line 51 "bufferedio.c"
        FUNCTION_TABLE[$31]($32); //@line 51 "bufferedio.c"
        __label__ = 6; break; //@line 51 "bufferedio.c"
      case 6: // $bb5
        var $33=HEAP[_PyExc_TypeError]; //@line 52 "bufferedio.c"
        _PyErr_SetString($33, __str3); //@line 52 "bufferedio.c"
        __label__ = 10; break; //@line 52 "bufferedio.c"
      case 7: // $bb6
        var $34=$17; //@line 56 "bufferedio.c"
        var $35=$34+8; //@line 56 "bufferedio.c"
        var $36=HEAP[$35]; //@line 56 "bufferedio.c"
        $len=$36; //@line 56 "bufferedio.c"
        var $37=$len; //@line 57 "bufferedio.c"
        var $38=$data; //@line 57 "bufferedio.c"
        var $39=$38; //@line 57 "bufferedio.c"
        var $40=$39+20; //@line 57 "bufferedio.c"
        var $41=$40; //@line 57 "bufferedio.c"
        var $42=$buf; //@line 57 "bufferedio.c"
        var $43=HEAP[$42]; //@line 57 "bufferedio.c"
        _llvm_memcpy_p0i8_p0i8_i32($43, $41, $37, 1, 0); //@line 57 "bufferedio.c"
        _PyBuffer_Release($buf); //@line 59 "bufferedio.c"
        var $44=$data; //@line 60 "bufferedio.c"
        var $45=$44; //@line 60 "bufferedio.c"
        var $46=HEAP[$45]; //@line 60 "bufferedio.c"
        var $47=($46) - 1; //@line 60 "bufferedio.c"
        var $48=$data; //@line 60 "bufferedio.c"
        var $49=$48; //@line 60 "bufferedio.c"
        HEAP[$49]=$47; //@line 60 "bufferedio.c"
        var $50=$data; //@line 60 "bufferedio.c"
        var $51=$50; //@line 60 "bufferedio.c"
        var $52=HEAP[$51]; //@line 60 "bufferedio.c"
        var $53=($52)==0; //@line 60 "bufferedio.c"
        if ($53) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 60 "bufferedio.c"
      case 8: // $bb7
        var $54=$data; //@line 60 "bufferedio.c"
        var $55=$54+4; //@line 60 "bufferedio.c"
        var $56=HEAP[$55]; //@line 60 "bufferedio.c"
        var $57=$56+24; //@line 60 "bufferedio.c"
        var $58=HEAP[$57]; //@line 60 "bufferedio.c"
        var $59=$data; //@line 60 "bufferedio.c"
        FUNCTION_TABLE[$58]($59); //@line 60 "bufferedio.c"
        __label__ = 9; break; //@line 60 "bufferedio.c"
      case 9: // $bb8
        var $60=$len; //@line 62 "bufferedio.c"
        var $61=_PyLong_FromSsize_t($60); //@line 62 "bufferedio.c"
        $0=$61; //@line 62 "bufferedio.c"
        __label__ = 11; break; //@line 62 "bufferedio.c"
      case 10: // $error
        _PyBuffer_Release($buf); //@line 65 "bufferedio.c"
        $0=0; //@line 66 "bufferedio.c"
        __label__ = 11; break; //@line 66 "bufferedio.c"
      case 11: // $bb9
        var $62=$0; //@line 43 "bufferedio.c"
        $retval=$62; //@line 43 "bufferedio.c"
        var $retval10=$retval; //@line 43 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 43 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferediobase_unsupported($message) {
    ;
    var __label__;
  
    var $message_addr;
    var $retval;
    var $0;
    $message_addr=$message;
    var $1=HEAP[__PyIO_unsupported_operation]; //@line 72 "bufferedio.c"
    var $2=$message_addr; //@line 72 "bufferedio.c"
    _PyErr_SetString($1, $2); //@line 72 "bufferedio.c"
    $0=0; //@line 73 "bufferedio.c"
    var $3=$0; //@line 73 "bufferedio.c"
    $retval=$3; //@line 73 "bufferedio.c"
    var $retval1=$retval; //@line 73 "bufferedio.c"
    ;
    return $retval1; //@line 73 "bufferedio.c"
  }
  

  function _bufferediobase_detach($self) {
    ;
    var __label__;
  
    var $self_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    var $1=_bufferediobase_unsupported(__str4); //@line 85 "bufferedio.c"
    $0=$1; //@line 85 "bufferedio.c"
    var $2=$0; //@line 85 "bufferedio.c"
    $retval=$2; //@line 85 "bufferedio.c"
    var $retval1=$retval; //@line 85 "bufferedio.c"
    ;
    return $retval1; //@line 85 "bufferedio.c"
  }
  

  function _bufferediobase_read($self, $args) {
    ;
    var __label__;
  
    var $self_addr;
    var $args_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $args_addr=$args;
    var $1=_bufferediobase_unsupported(__str1); //@line 109 "bufferedio.c"
    $0=$1; //@line 109 "bufferedio.c"
    var $2=$0; //@line 109 "bufferedio.c"
    $retval=$2; //@line 109 "bufferedio.c"
    var $retval1=$retval; //@line 109 "bufferedio.c"
    ;
    return $retval1; //@line 109 "bufferedio.c"
  }
  

  function _bufferediobase_read1($self, $args) {
    ;
    var __label__;
  
    var $self_addr;
    var $args_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $args_addr=$args;
    var $1=_bufferediobase_unsupported(__str5); //@line 122 "bufferedio.c"
    $0=$1; //@line 122 "bufferedio.c"
    var $2=$0; //@line 122 "bufferedio.c"
    $retval=$2; //@line 122 "bufferedio.c"
    var $retval1=$retval; //@line 122 "bufferedio.c"
    ;
    return $retval1; //@line 122 "bufferedio.c"
  }
  

  function _bufferediobase_write($self, $args) {
    ;
    var __label__;
  
    var $self_addr;
    var $args_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $args_addr=$args;
    var $1=_bufferediobase_unsupported(__str6); //@line 137 "bufferedio.c"
    $0=$1; //@line 137 "bufferedio.c"
    var $2=$0; //@line 137 "bufferedio.c"
    $retval=$2; //@line 137 "bufferedio.c"
    var $retval1=$retval; //@line 137 "bufferedio.c"
    ;
    return $retval1; //@line 137 "bufferedio.c"
  }
  

  function _buffered_dealloc($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $g;
        var $_py_tmp;
        var $_py_tmp12;
        $self_addr=$self;
        var $0=$self_addr; //@line 368 "bufferedio.c"
        var $1=$0+12; //@line 368 "bufferedio.c"
        var $2=HEAP[$1]; //@line 368 "bufferedio.c"
        var $3=($2)!=0; //@line 368 "bufferedio.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 368 "bufferedio.c"
      case 1: // $bb
        var $4=$self_addr; //@line 368 "bufferedio.c"
        var $5=$4; //@line 368 "bufferedio.c"
        var $6=__PyIOBase_finalize($5); //@line 368 "bufferedio.c"
        var $7=($6) < 0; //@line 368 "bufferedio.c"
        if ($7) { __label__ = 15; break; } else { __label__ = 2; break; } //@line 368 "bufferedio.c"
      case 2: // $bb1
        var $8=$self_addr; //@line 370 "bufferedio.c"
        var $9=$8; //@line 370 "bufferedio.c"
        var $10=$9+-12; //@line 370 "bufferedio.c"
        $g=$10; //@line 370 "bufferedio.c"
        var $11=$g; //@line 370 "bufferedio.c"
        var $12=$11; //@line 370 "bufferedio.c"
        var $13=$12+8; //@line 370 "bufferedio.c"
        var $14=HEAP[$13]; //@line 370 "bufferedio.c"
        var $15=($14)==-2; //@line 370 "bufferedio.c"
        if ($15) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 370 "bufferedio.c"
      case 3: // $bb2
        ___assert_fail(__str9, __str10, 370, ___PRETTY_FUNCTION___8563); //@line 370 "bufferedio.c"
        throw "Reached an unreachable!" //@line 370 "bufferedio.c"
      case 4: // $bb3
        var $16=$g; //@line 370 "bufferedio.c"
        var $17=$16; //@line 370 "bufferedio.c"
        var $18=$17+8; //@line 370 "bufferedio.c"
        HEAP[$18]=-2; //@line 370 "bufferedio.c"
        var $19=$g; //@line 370 "bufferedio.c"
        var $20=$19; //@line 370 "bufferedio.c"
        var $21=$20+4; //@line 370 "bufferedio.c"
        var $22=HEAP[$21]; //@line 370 "bufferedio.c"
        var $23=$g; //@line 370 "bufferedio.c"
        var $24=$23; //@line 370 "bufferedio.c"
        var $25=$24; //@line 370 "bufferedio.c"
        var $26=HEAP[$25]; //@line 370 "bufferedio.c"
        var $27=$22; //@line 370 "bufferedio.c"
        var $28=$27; //@line 370 "bufferedio.c"
        HEAP[$28]=$26; //@line 370 "bufferedio.c"
        var $29=$g; //@line 370 "bufferedio.c"
        var $30=$29; //@line 370 "bufferedio.c"
        var $31=$30; //@line 370 "bufferedio.c"
        var $32=HEAP[$31]; //@line 370 "bufferedio.c"
        var $33=$g; //@line 370 "bufferedio.c"
        var $34=$33; //@line 370 "bufferedio.c"
        var $35=$34+4; //@line 370 "bufferedio.c"
        var $36=HEAP[$35]; //@line 370 "bufferedio.c"
        var $37=$32; //@line 370 "bufferedio.c"
        var $38=$37+4; //@line 370 "bufferedio.c"
        HEAP[$38]=$36; //@line 370 "bufferedio.c"
        var $39=$g; //@line 370 "bufferedio.c"
        var $40=$39; //@line 370 "bufferedio.c"
        var $41=$40; //@line 370 "bufferedio.c"
        HEAP[$41]=0; //@line 370 "bufferedio.c"
        var $42=$self_addr; //@line 371 "bufferedio.c"
        var $43=$42+12; //@line 371 "bufferedio.c"
        HEAP[$43]=0; //@line 371 "bufferedio.c"
        var $44=$self_addr; //@line 372 "bufferedio.c"
        var $45=$44+96; //@line 372 "bufferedio.c"
        var $46=HEAP[$45]; //@line 372 "bufferedio.c"
        var $47=($46)!=0; //@line 372 "bufferedio.c"
        if ($47) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 372 "bufferedio.c"
      case 5: // $bb4
        var $48=$self_addr; //@line 373 "bufferedio.c"
        var $49=$48; //@line 373 "bufferedio.c"
        _PyObject_ClearWeakRefs($49); //@line 373 "bufferedio.c"
        __label__ = 6; break; //@line 373 "bufferedio.c"
      case 6: // $bb5
        var $50=$self_addr; //@line 374 "bufferedio.c"
        var $51=$50+8; //@line 374 "bufferedio.c"
        var $52=HEAP[$51]; //@line 374 "bufferedio.c"
        var $53=($52)!=0; //@line 374 "bufferedio.c"
        if ($53) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 374 "bufferedio.c"
      case 7: // $bb6
        var $54=$self_addr; //@line 374 "bufferedio.c"
        var $55=$54+8; //@line 374 "bufferedio.c"
        var $56=HEAP[$55]; //@line 374 "bufferedio.c"
        $_py_tmp=$56; //@line 374 "bufferedio.c"
        var $57=$self_addr; //@line 374 "bufferedio.c"
        var $58=$57+8; //@line 374 "bufferedio.c"
        HEAP[$58]=0; //@line 374 "bufferedio.c"
        var $59=$_py_tmp; //@line 374 "bufferedio.c"
        var $60=$59; //@line 374 "bufferedio.c"
        var $61=HEAP[$60]; //@line 374 "bufferedio.c"
        var $62=($61) - 1; //@line 374 "bufferedio.c"
        var $63=$_py_tmp; //@line 374 "bufferedio.c"
        var $64=$63; //@line 374 "bufferedio.c"
        HEAP[$64]=$62; //@line 374 "bufferedio.c"
        var $65=$_py_tmp; //@line 374 "bufferedio.c"
        var $66=$65; //@line 374 "bufferedio.c"
        var $67=HEAP[$66]; //@line 374 "bufferedio.c"
        var $68=($67)==0; //@line 374 "bufferedio.c"
        if ($68) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 374 "bufferedio.c"
      case 8: // $bb7
        var $69=$_py_tmp; //@line 374 "bufferedio.c"
        var $70=$69+4; //@line 374 "bufferedio.c"
        var $71=HEAP[$70]; //@line 374 "bufferedio.c"
        var $72=$71+24; //@line 374 "bufferedio.c"
        var $73=HEAP[$72]; //@line 374 "bufferedio.c"
        var $74=$_py_tmp; //@line 374 "bufferedio.c"
        FUNCTION_TABLE[$73]($74); //@line 374 "bufferedio.c"
        __label__ = 9; break; //@line 374 "bufferedio.c"
      case 9: // $bb8
        var $75=$self_addr; //@line 375 "bufferedio.c"
        var $76=$75+40; //@line 375 "bufferedio.c"
        var $77=HEAP[$76]; //@line 375 "bufferedio.c"
        var $78=($77)!=0; //@line 375 "bufferedio.c"
        if ($78) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 375 "bufferedio.c"
      case 10: // $bb9
        var $79=$self_addr; //@line 376 "bufferedio.c"
        var $80=$79+40; //@line 376 "bufferedio.c"
        var $81=HEAP[$80]; //@line 376 "bufferedio.c"
        _PyMem_Free($81); //@line 376 "bufferedio.c"
        var $82=$self_addr; //@line 377 "bufferedio.c"
        var $83=$82+40; //@line 377 "bufferedio.c"
        HEAP[$83]=0; //@line 377 "bufferedio.c"
        __label__ = 11; break; //@line 377 "bufferedio.c"
      case 11: // $bb10
        var $84=$self_addr; //@line 385 "bufferedio.c"
        var $85=$84+92; //@line 385 "bufferedio.c"
        var $86=HEAP[$85]; //@line 385 "bufferedio.c"
        var $87=($86)!=0; //@line 385 "bufferedio.c"
        if ($87) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 385 "bufferedio.c"
      case 12: // $bb11
        var $88=$self_addr; //@line 385 "bufferedio.c"
        var $89=$88+92; //@line 385 "bufferedio.c"
        var $90=HEAP[$89]; //@line 385 "bufferedio.c"
        $_py_tmp12=$90; //@line 385 "bufferedio.c"
        var $91=$self_addr; //@line 385 "bufferedio.c"
        var $92=$91+92; //@line 385 "bufferedio.c"
        HEAP[$92]=0; //@line 385 "bufferedio.c"
        var $93=$_py_tmp12; //@line 385 "bufferedio.c"
        var $94=$93; //@line 385 "bufferedio.c"
        var $95=HEAP[$94]; //@line 385 "bufferedio.c"
        var $96=($95) - 1; //@line 385 "bufferedio.c"
        var $97=$_py_tmp12; //@line 385 "bufferedio.c"
        var $98=$97; //@line 385 "bufferedio.c"
        HEAP[$98]=$96; //@line 385 "bufferedio.c"
        var $99=$_py_tmp12; //@line 385 "bufferedio.c"
        var $100=$99; //@line 385 "bufferedio.c"
        var $101=HEAP[$100]; //@line 385 "bufferedio.c"
        var $102=($101)==0; //@line 385 "bufferedio.c"
        if ($102) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 385 "bufferedio.c"
      case 13: // $bb13
        var $103=$_py_tmp12; //@line 385 "bufferedio.c"
        var $104=$103+4; //@line 385 "bufferedio.c"
        var $105=HEAP[$104]; //@line 385 "bufferedio.c"
        var $106=$105+24; //@line 385 "bufferedio.c"
        var $107=HEAP[$106]; //@line 385 "bufferedio.c"
        var $108=$_py_tmp12; //@line 385 "bufferedio.c"
        FUNCTION_TABLE[$107]($108); //@line 385 "bufferedio.c"
        __label__ = 14; break; //@line 385 "bufferedio.c"
      case 14: // $bb14
        var $109=$self_addr; //@line 386 "bufferedio.c"
        var $110=$109; //@line 386 "bufferedio.c"
        var $111=$110+4; //@line 386 "bufferedio.c"
        var $112=HEAP[$111]; //@line 386 "bufferedio.c"
        var $113=$112+160; //@line 386 "bufferedio.c"
        var $114=HEAP[$113]; //@line 386 "bufferedio.c"
        var $115=$self_addr; //@line 386 "bufferedio.c"
        var $116=$115; //@line 386 "bufferedio.c"
        FUNCTION_TABLE[$114]($116); //@line 386 "bufferedio.c"
        __label__ = 15; break; //@line 386 "bufferedio.c"
      case 15: // $return
        ;
        return; //@line 369 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_traverse($self, $visit, $arg) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $visit_addr;
        var $arg_addr;
        var $retval;
        var $0;
        var $vret;
        var $vret4;
        $self_addr=$self;
        $visit_addr=$visit;
        $arg_addr=$arg;
        var $1=$self_addr; //@line 392 "bufferedio.c"
        var $2=$1+8; //@line 392 "bufferedio.c"
        var $3=HEAP[$2]; //@line 392 "bufferedio.c"
        var $4=($3)!=0; //@line 392 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 392 "bufferedio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 392 "bufferedio.c"
        var $6=$5+8; //@line 392 "bufferedio.c"
        var $7=HEAP[$6]; //@line 392 "bufferedio.c"
        var $8=$visit_addr; //@line 392 "bufferedio.c"
        var $9=$arg_addr; //@line 392 "bufferedio.c"
        var $10=FUNCTION_TABLE[$8]($7, $9); //@line 392 "bufferedio.c"
        $vret=$10; //@line 392 "bufferedio.c"
        var $11=$vret; //@line 392 "bufferedio.c"
        var $12=($11)!=0; //@line 392 "bufferedio.c"
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 392 "bufferedio.c"
      case 2: // $bb1
        var $13=$vret; //@line 392 "bufferedio.c"
        $0=$13; //@line 392 "bufferedio.c"
        __label__ = 7; break; //@line 392 "bufferedio.c"
      case 3: // $bb2
        var $14=$self_addr; //@line 393 "bufferedio.c"
        var $15=$14+92; //@line 393 "bufferedio.c"
        var $16=HEAP[$15]; //@line 393 "bufferedio.c"
        var $17=($16)!=0; //@line 393 "bufferedio.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 393 "bufferedio.c"
      case 4: // $bb3
        var $18=$self_addr; //@line 393 "bufferedio.c"
        var $19=$18+92; //@line 393 "bufferedio.c"
        var $20=HEAP[$19]; //@line 393 "bufferedio.c"
        var $21=$visit_addr; //@line 393 "bufferedio.c"
        var $22=$arg_addr; //@line 393 "bufferedio.c"
        var $23=FUNCTION_TABLE[$21]($20, $22); //@line 393 "bufferedio.c"
        $vret4=$23; //@line 393 "bufferedio.c"
        var $24=$vret4; //@line 393 "bufferedio.c"
        var $25=($24)!=0; //@line 393 "bufferedio.c"
        if ($25) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 393 "bufferedio.c"
      case 5: // $bb5
        var $26=$vret4; //@line 393 "bufferedio.c"
        $0=$26; //@line 393 "bufferedio.c"
        __label__ = 7; break; //@line 393 "bufferedio.c"
      case 6: // $bb6
        $0=0; //@line 394 "bufferedio.c"
        __label__ = 7; break; //@line 394 "bufferedio.c"
      case 7: // $bb7
        var $27=$0; //@line 392 "bufferedio.c"
        $retval=$27; //@line 392 "bufferedio.c"
        var $retval8=$retval; //@line 392 "bufferedio.c"
        ;
        return $retval8; //@line 392 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_clear($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $_py_tmp;
        var $_py_tmp7;
        $self_addr=$self;
        var $1=$self_addr; //@line 400 "bufferedio.c"
        var $2=$1+12; //@line 400 "bufferedio.c"
        var $3=HEAP[$2]; //@line 400 "bufferedio.c"
        var $4=($3)!=0; //@line 400 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 400 "bufferedio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 400 "bufferedio.c"
        var $6=$5; //@line 400 "bufferedio.c"
        var $7=__PyIOBase_finalize($6); //@line 400 "bufferedio.c"
        var $8=($7) < 0; //@line 400 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 400 "bufferedio.c"
      case 2: // $bb1
        $0=-1; //@line 401 "bufferedio.c"
        __label__ = 10; break; //@line 401 "bufferedio.c"
      case 3: // $bb2
        var $9=$self_addr; //@line 402 "bufferedio.c"
        var $10=$9+12; //@line 402 "bufferedio.c"
        HEAP[$10]=0; //@line 402 "bufferedio.c"
        var $11=$self_addr; //@line 403 "bufferedio.c"
        var $12=$11+8; //@line 403 "bufferedio.c"
        var $13=HEAP[$12]; //@line 403 "bufferedio.c"
        var $14=($13)!=0; //@line 403 "bufferedio.c"
        if ($14) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 403 "bufferedio.c"
      case 4: // $bb3
        var $15=$self_addr; //@line 403 "bufferedio.c"
        var $16=$15+8; //@line 403 "bufferedio.c"
        var $17=HEAP[$16]; //@line 403 "bufferedio.c"
        $_py_tmp=$17; //@line 403 "bufferedio.c"
        var $18=$self_addr; //@line 403 "bufferedio.c"
        var $19=$18+8; //@line 403 "bufferedio.c"
        HEAP[$19]=0; //@line 403 "bufferedio.c"
        var $20=$_py_tmp; //@line 403 "bufferedio.c"
        var $21=$20; //@line 403 "bufferedio.c"
        var $22=HEAP[$21]; //@line 403 "bufferedio.c"
        var $23=($22) - 1; //@line 403 "bufferedio.c"
        var $24=$_py_tmp; //@line 403 "bufferedio.c"
        var $25=$24; //@line 403 "bufferedio.c"
        HEAP[$25]=$23; //@line 403 "bufferedio.c"
        var $26=$_py_tmp; //@line 403 "bufferedio.c"
        var $27=$26; //@line 403 "bufferedio.c"
        var $28=HEAP[$27]; //@line 403 "bufferedio.c"
        var $29=($28)==0; //@line 403 "bufferedio.c"
        if ($29) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 403 "bufferedio.c"
      case 5: // $bb4
        var $30=$_py_tmp; //@line 403 "bufferedio.c"
        var $31=$30+4; //@line 403 "bufferedio.c"
        var $32=HEAP[$31]; //@line 403 "bufferedio.c"
        var $33=$32+24; //@line 403 "bufferedio.c"
        var $34=HEAP[$33]; //@line 403 "bufferedio.c"
        var $35=$_py_tmp; //@line 403 "bufferedio.c"
        FUNCTION_TABLE[$34]($35); //@line 403 "bufferedio.c"
        __label__ = 6; break; //@line 403 "bufferedio.c"
      case 6: // $bb5
        var $36=$self_addr; //@line 404 "bufferedio.c"
        var $37=$36+92; //@line 404 "bufferedio.c"
        var $38=HEAP[$37]; //@line 404 "bufferedio.c"
        var $39=($38)!=0; //@line 404 "bufferedio.c"
        if ($39) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 404 "bufferedio.c"
      case 7: // $bb6
        var $40=$self_addr; //@line 404 "bufferedio.c"
        var $41=$40+92; //@line 404 "bufferedio.c"
        var $42=HEAP[$41]; //@line 404 "bufferedio.c"
        $_py_tmp7=$42; //@line 404 "bufferedio.c"
        var $43=$self_addr; //@line 404 "bufferedio.c"
        var $44=$43+92; //@line 404 "bufferedio.c"
        HEAP[$44]=0; //@line 404 "bufferedio.c"
        var $45=$_py_tmp7; //@line 404 "bufferedio.c"
        var $46=$45; //@line 404 "bufferedio.c"
        var $47=HEAP[$46]; //@line 404 "bufferedio.c"
        var $48=($47) - 1; //@line 404 "bufferedio.c"
        var $49=$_py_tmp7; //@line 404 "bufferedio.c"
        var $50=$49; //@line 404 "bufferedio.c"
        HEAP[$50]=$48; //@line 404 "bufferedio.c"
        var $51=$_py_tmp7; //@line 404 "bufferedio.c"
        var $52=$51; //@line 404 "bufferedio.c"
        var $53=HEAP[$52]; //@line 404 "bufferedio.c"
        var $54=($53)==0; //@line 404 "bufferedio.c"
        if ($54) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 404 "bufferedio.c"
      case 8: // $bb8
        var $55=$_py_tmp7; //@line 404 "bufferedio.c"
        var $56=$55+4; //@line 404 "bufferedio.c"
        var $57=HEAP[$56]; //@line 404 "bufferedio.c"
        var $58=$57+24; //@line 404 "bufferedio.c"
        var $59=HEAP[$58]; //@line 404 "bufferedio.c"
        var $60=$_py_tmp7; //@line 404 "bufferedio.c"
        FUNCTION_TABLE[$59]($60); //@line 404 "bufferedio.c"
        __label__ = 9; break; //@line 404 "bufferedio.c"
      case 9: // $bb9
        $0=0; //@line 405 "bufferedio.c"
        __label__ = 10; break; //@line 405 "bufferedio.c"
      case 10: // $bb10
        var $61=$0; //@line 401 "bufferedio.c"
        $retval=$61; //@line 401 "bufferedio.c"
        var $retval11=$retval; //@line 401 "bufferedio.c"
        ;
        return $retval11; //@line 401 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_simple_flush($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 419 "bufferedio.c"
        var $2=$1+12; //@line 419 "bufferedio.c"
        var $3=HEAP[$2]; //@line 419 "bufferedio.c"
        var $4=($3) <= 0; //@line 419 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 419 "bufferedio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 419 "bufferedio.c"
        var $6=$5+16; //@line 419 "bufferedio.c"
        var $7=HEAP[$6]; //@line 419 "bufferedio.c"
        var $8=($7)!=0; //@line 419 "bufferedio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 419 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 419 "bufferedio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str11); //@line 419 "bufferedio.c"
        __label__ = 4; break; //@line 419 "bufferedio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str12); //@line 419 "bufferedio.c"
        __label__ = 4; break; //@line 419 "bufferedio.c"
      case 4: // $bb3
        $0=0; //@line 419 "bufferedio.c"
        __label__ = 6; break; //@line 419 "bufferedio.c"
      case 5: // $bb4
        var $10=HEAP[__PyIO_str_flush]; //@line 420 "bufferedio.c"
        var $11=$self_addr; //@line 420 "bufferedio.c"
        var $12=$11+8; //@line 420 "bufferedio.c"
        var $13=HEAP[$12]; //@line 420 "bufferedio.c"
        var $14=_PyObject_CallMethodObjArgs($13, $10, allocate(4, "i8*", ALLOC_STACK)); //@line 420 "bufferedio.c"
        $0=$14; //@line 420 "bufferedio.c"
        __label__ = 6; break; //@line 420 "bufferedio.c"
      case 6: // $bb5
        var $15=$0; //@line 419 "bufferedio.c"
        $retval=$15; //@line 419 "bufferedio.c"
        var $retval6=$retval; //@line 419 "bufferedio.c"
        ;
        return $retval6; //@line 419 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_closed($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $closed;
        var $res;
        $self_addr=$self;
        var $1=$self_addr; //@line 428 "bufferedio.c"
        var $2=$1+12; //@line 428 "bufferedio.c"
        var $3=HEAP[$2]; //@line 428 "bufferedio.c"
        var $4=($3) <= 0; //@line 428 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 428 "bufferedio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 428 "bufferedio.c"
        var $6=$5+16; //@line 428 "bufferedio.c"
        var $7=HEAP[$6]; //@line 428 "bufferedio.c"
        var $8=($7)!=0; //@line 428 "bufferedio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 428 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 428 "bufferedio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str11); //@line 428 "bufferedio.c"
        __label__ = 4; break; //@line 428 "bufferedio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str12); //@line 428 "bufferedio.c"
        __label__ = 4; break; //@line 428 "bufferedio.c"
      case 4: // $bb3
        $0=-1; //@line 428 "bufferedio.c"
        __label__ = 10; break; //@line 428 "bufferedio.c"
      case 5: // $bb4
        var $10=HEAP[__PyIO_str_closed]; //@line 429 "bufferedio.c"
        var $11=$self_addr; //@line 429 "bufferedio.c"
        var $12=$11+8; //@line 429 "bufferedio.c"
        var $13=HEAP[$12]; //@line 429 "bufferedio.c"
        var $14=_PyObject_GetAttr($13, $10); //@line 429 "bufferedio.c"
        $res=$14; //@line 429 "bufferedio.c"
        var $15=$res; //@line 430 "bufferedio.c"
        var $16=($15)==0; //@line 430 "bufferedio.c"
        if ($16) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 430 "bufferedio.c"
      case 6: // $bb5
        $0=-1; //@line 431 "bufferedio.c"
        __label__ = 10; break; //@line 431 "bufferedio.c"
      case 7: // $bb6
        var $17=$res; //@line 432 "bufferedio.c"
        var $18=_PyObject_IsTrue($17); //@line 432 "bufferedio.c"
        $closed=$18; //@line 432 "bufferedio.c"
        var $19=$res; //@line 433 "bufferedio.c"
        var $20=$19; //@line 433 "bufferedio.c"
        var $21=HEAP[$20]; //@line 433 "bufferedio.c"
        var $22=($21) - 1; //@line 433 "bufferedio.c"
        var $23=$res; //@line 433 "bufferedio.c"
        var $24=$23; //@line 433 "bufferedio.c"
        HEAP[$24]=$22; //@line 433 "bufferedio.c"
        var $25=$res; //@line 433 "bufferedio.c"
        var $26=$25; //@line 433 "bufferedio.c"
        var $27=HEAP[$26]; //@line 433 "bufferedio.c"
        var $28=($27)==0; //@line 433 "bufferedio.c"
        if ($28) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 433 "bufferedio.c"
      case 8: // $bb7
        var $29=$res; //@line 433 "bufferedio.c"
        var $30=$29+4; //@line 433 "bufferedio.c"
        var $31=HEAP[$30]; //@line 433 "bufferedio.c"
        var $32=$31+24; //@line 433 "bufferedio.c"
        var $33=HEAP[$32]; //@line 433 "bufferedio.c"
        var $34=$res; //@line 433 "bufferedio.c"
        FUNCTION_TABLE[$33]($34); //@line 433 "bufferedio.c"
        __label__ = 9; break; //@line 433 "bufferedio.c"
      case 9: // $bb8
        var $35=$closed; //@line 434 "bufferedio.c"
        $0=$35; //@line 434 "bufferedio.c"
        __label__ = 10; break; //@line 434 "bufferedio.c"
      case 10: // $bb9
        var $36=$0; //@line 428 "bufferedio.c"
        $retval=$36; //@line 428 "bufferedio.c"
        var $retval10=$retval; //@line 428 "bufferedio.c"
        ;
        return $retval10; //@line 428 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_closed_get($self, $context) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $context_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $context_addr=$context;
        var $1=$self_addr; //@line 440 "bufferedio.c"
        var $2=$1+12; //@line 440 "bufferedio.c"
        var $3=HEAP[$2]; //@line 440 "bufferedio.c"
        var $4=($3) <= 0; //@line 440 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 440 "bufferedio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 440 "bufferedio.c"
        var $6=$5+16; //@line 440 "bufferedio.c"
        var $7=HEAP[$6]; //@line 440 "bufferedio.c"
        var $8=($7)!=0; //@line 440 "bufferedio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 440 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 440 "bufferedio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str11); //@line 440 "bufferedio.c"
        __label__ = 4; break; //@line 440 "bufferedio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str12); //@line 440 "bufferedio.c"
        __label__ = 4; break; //@line 440 "bufferedio.c"
      case 4: // $bb3
        $0=0; //@line 440 "bufferedio.c"
        __label__ = 6; break; //@line 440 "bufferedio.c"
      case 5: // $bb4
        var $10=HEAP[__PyIO_str_closed]; //@line 441 "bufferedio.c"
        var $11=$self_addr; //@line 441 "bufferedio.c"
        var $12=$11+8; //@line 441 "bufferedio.c"
        var $13=HEAP[$12]; //@line 441 "bufferedio.c"
        var $14=_PyObject_GetAttr($13, $10); //@line 441 "bufferedio.c"
        $0=$14; //@line 441 "bufferedio.c"
        __label__ = 6; break; //@line 441 "bufferedio.c"
      case 6: // $bb5
        var $15=$0; //@line 440 "bufferedio.c"
        $retval=$15; //@line 440 "bufferedio.c"
        var $retval6=$retval; //@line 440 "bufferedio.c"
        ;
        return $retval6; //@line 440 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_close($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $res;
        var $r;
        $self_addr=$self;
        $args_addr=$args;
        $res=0; //@line 447 "bufferedio.c"
        var $1=$self_addr; //@line 450 "bufferedio.c"
        var $2=$1+12; //@line 450 "bufferedio.c"
        var $3=HEAP[$2]; //@line 450 "bufferedio.c"
        var $4=($3) <= 0; //@line 450 "bufferedio.c"
        var $5=$self_addr; //@line 450 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 450 "bufferedio.c"
      case 1: // $bb
        var $6=$5+16; //@line 450 "bufferedio.c"
        var $7=HEAP[$6]; //@line 450 "bufferedio.c"
        var $8=($7)!=0; //@line 450 "bufferedio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 450 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 450 "bufferedio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str11); //@line 450 "bufferedio.c"
        __label__ = 4; break; //@line 450 "bufferedio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str12); //@line 450 "bufferedio.c"
        __label__ = 4; break; //@line 450 "bufferedio.c"
      case 4: // $bb3
        $0=0; //@line 450 "bufferedio.c"
        __label__ = 14; break; //@line 450 "bufferedio.c"
      case 5: // $bb4
        var $10=_buffered_closed($5); //@line 454 "bufferedio.c"
        $r=$10; //@line 454 "bufferedio.c"
        var $11=$r; //@line 455 "bufferedio.c"
        var $12=($11) < 0; //@line 455 "bufferedio.c"
        if ($12) { __label__ = 13; break; } else { __label__ = 6; break; } //@line 455 "bufferedio.c"
      case 6: // $bb5
        var $13=$r; //@line 457 "bufferedio.c"
        var $14=($13) > 0; //@line 457 "bufferedio.c"
        if ($14) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 457 "bufferedio.c"
      case 7: // $bb6
        $res=__Py_NoneStruct; //@line 458 "bufferedio.c"
        var $15=$res; //@line 459 "bufferedio.c"
        var $16=$15; //@line 459 "bufferedio.c"
        var $17=HEAP[$16]; //@line 459 "bufferedio.c"
        var $18=($17) + 1; //@line 459 "bufferedio.c"
        var $19=$res; //@line 459 "bufferedio.c"
        var $20=$19; //@line 459 "bufferedio.c"
        HEAP[$20]=$18; //@line 459 "bufferedio.c"
        __label__ = 13; break; //@line 459 "bufferedio.c"
      case 8: // $bb7
        var $21=HEAP[__PyIO_str_flush]; //@line 464 "bufferedio.c"
        var $22=$self_addr; //@line 464 "bufferedio.c"
        var $23=$22; //@line 464 "bufferedio.c"
        var $24=_PyObject_CallMethodObjArgs($23, $21, allocate(4, "i8*", ALLOC_STACK)); //@line 464 "bufferedio.c"
        $res=$24; //@line 464 "bufferedio.c"
        var $25=$res; //@line 467 "bufferedio.c"
        var $26=($25)==0; //@line 467 "bufferedio.c"
        if ($26) { __label__ = 13; break; } else { __label__ = 9; break; } //@line 467 "bufferedio.c"
      case 9: // $bb8
        var $27=$res; //@line 470 "bufferedio.c"
        var $28=($27)!=0; //@line 470 "bufferedio.c"
        if ($28) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 470 "bufferedio.c"
      case 10: // $bb9
        var $29=$res; //@line 470 "bufferedio.c"
        var $30=$29; //@line 470 "bufferedio.c"
        var $31=HEAP[$30]; //@line 470 "bufferedio.c"
        var $32=($31) - 1; //@line 470 "bufferedio.c"
        var $33=$res; //@line 470 "bufferedio.c"
        var $34=$33; //@line 470 "bufferedio.c"
        HEAP[$34]=$32; //@line 470 "bufferedio.c"
        var $35=$res; //@line 470 "bufferedio.c"
        var $36=$35; //@line 470 "bufferedio.c"
        var $37=HEAP[$36]; //@line 470 "bufferedio.c"
        var $38=($37)==0; //@line 470 "bufferedio.c"
        if ($38) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 470 "bufferedio.c"
      case 11: // $bb10
        var $39=$res; //@line 470 "bufferedio.c"
        var $40=$39+4; //@line 470 "bufferedio.c"
        var $41=HEAP[$40]; //@line 470 "bufferedio.c"
        var $42=$41+24; //@line 470 "bufferedio.c"
        var $43=HEAP[$42]; //@line 470 "bufferedio.c"
        var $44=$res; //@line 470 "bufferedio.c"
        FUNCTION_TABLE[$43]($44); //@line 470 "bufferedio.c"
        __label__ = 12; break; //@line 470 "bufferedio.c"
      case 12: // $bb11
        var $45=HEAP[__PyIO_str_close]; //@line 472 "bufferedio.c"
        var $46=$self_addr; //@line 472 "bufferedio.c"
        var $47=$46+8; //@line 472 "bufferedio.c"
        var $48=HEAP[$47]; //@line 472 "bufferedio.c"
        var $49=_PyObject_CallMethodObjArgs($48, $45, allocate(4, "i8*", ALLOC_STACK)); //@line 472 "bufferedio.c"
        $res=$49; //@line 472 "bufferedio.c"
        __label__ = 13; break; //@line 474 "bufferedio.c"
      case 13: // $end
        var $50=$res; //@line 476 "bufferedio.c"
        $0=$50; //@line 476 "bufferedio.c"
        __label__ = 14; break; //@line 476 "bufferedio.c"
      case 14: // $bb12
        var $51=$0; //@line 450 "bufferedio.c"
        $retval=$51; //@line 450 "bufferedio.c"
        var $retval13=$retval; //@line 450 "bufferedio.c"
        ;
        return $retval13; //@line 450 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_detach($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $raw;
        var $res;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 485 "bufferedio.c"
        var $2=$1+12; //@line 485 "bufferedio.c"
        var $3=HEAP[$2]; //@line 485 "bufferedio.c"
        var $4=($3) <= 0; //@line 485 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 485 "bufferedio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 485 "bufferedio.c"
        var $6=$5+16; //@line 485 "bufferedio.c"
        var $7=HEAP[$6]; //@line 485 "bufferedio.c"
        var $8=($7)!=0; //@line 485 "bufferedio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 485 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 485 "bufferedio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str11); //@line 485 "bufferedio.c"
        __label__ = 4; break; //@line 485 "bufferedio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str12); //@line 485 "bufferedio.c"
        __label__ = 4; break; //@line 485 "bufferedio.c"
      case 4: // $bb3
        $0=0; //@line 485 "bufferedio.c"
        __label__ = 10; break; //@line 485 "bufferedio.c"
      case 5: // $bb4
        var $10=HEAP[__PyIO_str_flush]; //@line 486 "bufferedio.c"
        var $11=$self_addr; //@line 486 "bufferedio.c"
        var $12=$11; //@line 486 "bufferedio.c"
        var $13=_PyObject_CallMethodObjArgs($12, $10, allocate(4, "i8*", ALLOC_STACK)); //@line 486 "bufferedio.c"
        $res=$13; //@line 486 "bufferedio.c"
        var $14=$res; //@line 487 "bufferedio.c"
        var $15=($14)==0; //@line 487 "bufferedio.c"
        if ($15) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 487 "bufferedio.c"
      case 6: // $bb5
        $0=0; //@line 488 "bufferedio.c"
        __label__ = 10; break; //@line 488 "bufferedio.c"
      case 7: // $bb6
        var $16=$res; //@line 489 "bufferedio.c"
        var $17=$16; //@line 489 "bufferedio.c"
        var $18=HEAP[$17]; //@line 489 "bufferedio.c"
        var $19=($18) - 1; //@line 489 "bufferedio.c"
        var $20=$res; //@line 489 "bufferedio.c"
        var $21=$20; //@line 489 "bufferedio.c"
        HEAP[$21]=$19; //@line 489 "bufferedio.c"
        var $22=$res; //@line 489 "bufferedio.c"
        var $23=$22; //@line 489 "bufferedio.c"
        var $24=HEAP[$23]; //@line 489 "bufferedio.c"
        var $25=($24)==0; //@line 489 "bufferedio.c"
        if ($25) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 489 "bufferedio.c"
      case 8: // $bb7
        var $26=$res; //@line 489 "bufferedio.c"
        var $27=$26+4; //@line 489 "bufferedio.c"
        var $28=HEAP[$27]; //@line 489 "bufferedio.c"
        var $29=$28+24; //@line 489 "bufferedio.c"
        var $30=HEAP[$29]; //@line 489 "bufferedio.c"
        var $31=$res; //@line 489 "bufferedio.c"
        FUNCTION_TABLE[$30]($31); //@line 489 "bufferedio.c"
        __label__ = 9; break; //@line 489 "bufferedio.c"
      case 9: // $bb8
        var $32=$self_addr; //@line 490 "bufferedio.c"
        var $33=$32+8; //@line 490 "bufferedio.c"
        var $34=HEAP[$33]; //@line 490 "bufferedio.c"
        $raw=$34; //@line 490 "bufferedio.c"
        var $35=$self_addr; //@line 491 "bufferedio.c"
        var $36=$35+8; //@line 491 "bufferedio.c"
        HEAP[$36]=0; //@line 491 "bufferedio.c"
        var $37=$self_addr; //@line 492 "bufferedio.c"
        var $38=$37+16; //@line 492 "bufferedio.c"
        HEAP[$38]=1; //@line 492 "bufferedio.c"
        var $39=$self_addr; //@line 493 "bufferedio.c"
        var $40=$39+12; //@line 493 "bufferedio.c"
        HEAP[$40]=0; //@line 493 "bufferedio.c"
        var $41=$raw; //@line 494 "bufferedio.c"
        $0=$41; //@line 494 "bufferedio.c"
        __label__ = 10; break; //@line 494 "bufferedio.c"
      case 10: // $bb9
        var $42=$0; //@line 485 "bufferedio.c"
        $retval=$42; //@line 485 "bufferedio.c"
        var $retval10=$retval; //@line 485 "bufferedio.c"
        ;
        return $retval10; //@line 485 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_seekable($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 502 "bufferedio.c"
        var $2=$1+12; //@line 502 "bufferedio.c"
        var $3=HEAP[$2]; //@line 502 "bufferedio.c"
        var $4=($3) <= 0; //@line 502 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 502 "bufferedio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 502 "bufferedio.c"
        var $6=$5+16; //@line 502 "bufferedio.c"
        var $7=HEAP[$6]; //@line 502 "bufferedio.c"
        var $8=($7)!=0; //@line 502 "bufferedio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 502 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 502 "bufferedio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str11); //@line 502 "bufferedio.c"
        __label__ = 4; break; //@line 502 "bufferedio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str12); //@line 502 "bufferedio.c"
        __label__ = 4; break; //@line 502 "bufferedio.c"
      case 4: // $bb3
        $0=0; //@line 502 "bufferedio.c"
        __label__ = 6; break; //@line 502 "bufferedio.c"
      case 5: // $bb4
        var $10=HEAP[__PyIO_str_seekable]; //@line 503 "bufferedio.c"
        var $11=$self_addr; //@line 503 "bufferedio.c"
        var $12=$11+8; //@line 503 "bufferedio.c"
        var $13=HEAP[$12]; //@line 503 "bufferedio.c"
        var $14=_PyObject_CallMethodObjArgs($13, $10, allocate(4, "i8*", ALLOC_STACK)); //@line 503 "bufferedio.c"
        $0=$14; //@line 503 "bufferedio.c"
        __label__ = 6; break; //@line 503 "bufferedio.c"
      case 6: // $bb5
        var $15=$0; //@line 502 "bufferedio.c"
        $retval=$15; //@line 502 "bufferedio.c"
        var $retval6=$retval; //@line 502 "bufferedio.c"
        ;
        return $retval6; //@line 502 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_readable($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 509 "bufferedio.c"
        var $2=$1+12; //@line 509 "bufferedio.c"
        var $3=HEAP[$2]; //@line 509 "bufferedio.c"
        var $4=($3) <= 0; //@line 509 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 509 "bufferedio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 509 "bufferedio.c"
        var $6=$5+16; //@line 509 "bufferedio.c"
        var $7=HEAP[$6]; //@line 509 "bufferedio.c"
        var $8=($7)!=0; //@line 509 "bufferedio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 509 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 509 "bufferedio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str11); //@line 509 "bufferedio.c"
        __label__ = 4; break; //@line 509 "bufferedio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str12); //@line 509 "bufferedio.c"
        __label__ = 4; break; //@line 509 "bufferedio.c"
      case 4: // $bb3
        $0=0; //@line 509 "bufferedio.c"
        __label__ = 6; break; //@line 509 "bufferedio.c"
      case 5: // $bb4
        var $10=HEAP[__PyIO_str_readable]; //@line 510 "bufferedio.c"
        var $11=$self_addr; //@line 510 "bufferedio.c"
        var $12=$11+8; //@line 510 "bufferedio.c"
        var $13=HEAP[$12]; //@line 510 "bufferedio.c"
        var $14=_PyObject_CallMethodObjArgs($13, $10, allocate(4, "i8*", ALLOC_STACK)); //@line 510 "bufferedio.c"
        $0=$14; //@line 510 "bufferedio.c"
        __label__ = 6; break; //@line 510 "bufferedio.c"
      case 6: // $bb5
        var $15=$0; //@line 509 "bufferedio.c"
        $retval=$15; //@line 509 "bufferedio.c"
        var $retval6=$retval; //@line 509 "bufferedio.c"
        ;
        return $retval6; //@line 509 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_writable($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 516 "bufferedio.c"
        var $2=$1+12; //@line 516 "bufferedio.c"
        var $3=HEAP[$2]; //@line 516 "bufferedio.c"
        var $4=($3) <= 0; //@line 516 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 516 "bufferedio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 516 "bufferedio.c"
        var $6=$5+16; //@line 516 "bufferedio.c"
        var $7=HEAP[$6]; //@line 516 "bufferedio.c"
        var $8=($7)!=0; //@line 516 "bufferedio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 516 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 516 "bufferedio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str11); //@line 516 "bufferedio.c"
        __label__ = 4; break; //@line 516 "bufferedio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str12); //@line 516 "bufferedio.c"
        __label__ = 4; break; //@line 516 "bufferedio.c"
      case 4: // $bb3
        $0=0; //@line 516 "bufferedio.c"
        __label__ = 6; break; //@line 516 "bufferedio.c"
      case 5: // $bb4
        var $10=HEAP[__PyIO_str_writable]; //@line 517 "bufferedio.c"
        var $11=$self_addr; //@line 517 "bufferedio.c"
        var $12=$11+8; //@line 517 "bufferedio.c"
        var $13=HEAP[$12]; //@line 517 "bufferedio.c"
        var $14=_PyObject_CallMethodObjArgs($13, $10, allocate(4, "i8*", ALLOC_STACK)); //@line 517 "bufferedio.c"
        $0=$14; //@line 517 "bufferedio.c"
        __label__ = 6; break; //@line 517 "bufferedio.c"
      case 6: // $bb5
        var $15=$0; //@line 516 "bufferedio.c"
        $retval=$15; //@line 516 "bufferedio.c"
        var $retval6=$retval; //@line 516 "bufferedio.c"
        ;
        return $retval6; //@line 516 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_name_get($self, $context) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $context_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $context_addr=$context;
        var $1=$self_addr; //@line 523 "bufferedio.c"
        var $2=$1+12; //@line 523 "bufferedio.c"
        var $3=HEAP[$2]; //@line 523 "bufferedio.c"
        var $4=($3) <= 0; //@line 523 "bufferedio.c"
        var $5=$self_addr; //@line 523 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 523 "bufferedio.c"
      case 1: // $bb
        var $6=$5+16; //@line 523 "bufferedio.c"
        var $7=HEAP[$6]; //@line 523 "bufferedio.c"
        var $8=($7)!=0; //@line 523 "bufferedio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 523 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 523 "bufferedio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str11); //@line 523 "bufferedio.c"
        __label__ = 4; break; //@line 523 "bufferedio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str12); //@line 523 "bufferedio.c"
        __label__ = 4; break; //@line 523 "bufferedio.c"
      case 4: // $bb3
        $0=0; //@line 523 "bufferedio.c"
        __label__ = 6; break; //@line 523 "bufferedio.c"
      case 5: // $bb4
        var $10=$5+8; //@line 524 "bufferedio.c"
        var $11=HEAP[$10]; //@line 524 "bufferedio.c"
        var $12=_PyObject_GetAttrString($11, __str13); //@line 524 "bufferedio.c"
        $0=$12; //@line 524 "bufferedio.c"
        __label__ = 6; break; //@line 524 "bufferedio.c"
      case 6: // $bb5
        var $13=$0; //@line 523 "bufferedio.c"
        $retval=$13; //@line 523 "bufferedio.c"
        var $retval6=$retval; //@line 523 "bufferedio.c"
        ;
        return $retval6; //@line 523 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_mode_get($self, $context) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $context_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $context_addr=$context;
        var $1=$self_addr; //@line 530 "bufferedio.c"
        var $2=$1+12; //@line 530 "bufferedio.c"
        var $3=HEAP[$2]; //@line 530 "bufferedio.c"
        var $4=($3) <= 0; //@line 530 "bufferedio.c"
        var $5=$self_addr; //@line 530 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 530 "bufferedio.c"
      case 1: // $bb
        var $6=$5+16; //@line 530 "bufferedio.c"
        var $7=HEAP[$6]; //@line 530 "bufferedio.c"
        var $8=($7)!=0; //@line 530 "bufferedio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 530 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 530 "bufferedio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str11); //@line 530 "bufferedio.c"
        __label__ = 4; break; //@line 530 "bufferedio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str12); //@line 530 "bufferedio.c"
        __label__ = 4; break; //@line 530 "bufferedio.c"
      case 4: // $bb3
        $0=0; //@line 530 "bufferedio.c"
        __label__ = 6; break; //@line 530 "bufferedio.c"
      case 5: // $bb4
        var $10=$5+8; //@line 531 "bufferedio.c"
        var $11=HEAP[$10]; //@line 531 "bufferedio.c"
        var $12=_PyObject_GetAttrString($11, __str14); //@line 531 "bufferedio.c"
        $0=$12; //@line 531 "bufferedio.c"
        __label__ = 6; break; //@line 531 "bufferedio.c"
      case 6: // $bb5
        var $13=$0; //@line 530 "bufferedio.c"
        $retval=$13; //@line 530 "bufferedio.c"
        var $retval6=$retval; //@line 530 "bufferedio.c"
        ;
        return $retval6; //@line 530 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_fileno($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 539 "bufferedio.c"
        var $2=$1+12; //@line 539 "bufferedio.c"
        var $3=HEAP[$2]; //@line 539 "bufferedio.c"
        var $4=($3) <= 0; //@line 539 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 539 "bufferedio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 539 "bufferedio.c"
        var $6=$5+16; //@line 539 "bufferedio.c"
        var $7=HEAP[$6]; //@line 539 "bufferedio.c"
        var $8=($7)!=0; //@line 539 "bufferedio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 539 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 539 "bufferedio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str11); //@line 539 "bufferedio.c"
        __label__ = 4; break; //@line 539 "bufferedio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str12); //@line 539 "bufferedio.c"
        __label__ = 4; break; //@line 539 "bufferedio.c"
      case 4: // $bb3
        $0=0; //@line 539 "bufferedio.c"
        __label__ = 6; break; //@line 539 "bufferedio.c"
      case 5: // $bb4
        var $10=HEAP[__PyIO_str_fileno]; //@line 540 "bufferedio.c"
        var $11=$self_addr; //@line 540 "bufferedio.c"
        var $12=$11+8; //@line 540 "bufferedio.c"
        var $13=HEAP[$12]; //@line 540 "bufferedio.c"
        var $14=_PyObject_CallMethodObjArgs($13, $10, allocate(4, "i8*", ALLOC_STACK)); //@line 540 "bufferedio.c"
        $0=$14; //@line 540 "bufferedio.c"
        __label__ = 6; break; //@line 540 "bufferedio.c"
      case 6: // $bb5
        var $15=$0; //@line 539 "bufferedio.c"
        $retval=$15; //@line 539 "bufferedio.c"
        var $retval6=$retval; //@line 539 "bufferedio.c"
        ;
        return $retval6; //@line 539 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_isatty($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 546 "bufferedio.c"
        var $2=$1+12; //@line 546 "bufferedio.c"
        var $3=HEAP[$2]; //@line 546 "bufferedio.c"
        var $4=($3) <= 0; //@line 546 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 546 "bufferedio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 546 "bufferedio.c"
        var $6=$5+16; //@line 546 "bufferedio.c"
        var $7=HEAP[$6]; //@line 546 "bufferedio.c"
        var $8=($7)!=0; //@line 546 "bufferedio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 546 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 546 "bufferedio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str11); //@line 546 "bufferedio.c"
        __label__ = 4; break; //@line 546 "bufferedio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str12); //@line 546 "bufferedio.c"
        __label__ = 4; break; //@line 546 "bufferedio.c"
      case 4: // $bb3
        $0=0; //@line 546 "bufferedio.c"
        __label__ = 6; break; //@line 546 "bufferedio.c"
      case 5: // $bb4
        var $10=HEAP[__PyIO_str_isatty]; //@line 547 "bufferedio.c"
        var $11=$self_addr; //@line 547 "bufferedio.c"
        var $12=$11+8; //@line 547 "bufferedio.c"
        var $13=HEAP[$12]; //@line 547 "bufferedio.c"
        var $14=_PyObject_CallMethodObjArgs($13, $10, allocate(4, "i8*", ALLOC_STACK)); //@line 547 "bufferedio.c"
        $0=$14; //@line 547 "bufferedio.c"
        __label__ = 6; break; //@line 547 "bufferedio.c"
      case 6: // $bb5
        var $15=$0; //@line 546 "bufferedio.c"
        $retval=$15; //@line 546 "bufferedio.c"
        var $retval6=$retval; //@line 546 "bufferedio.c"
        ;
        return $retval6; //@line 546 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __buffered_check_blocking_error() {
    var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval;
        var $0;
        var $t=__stackBase__;
        var $v=__stackBase__+4;
        var $tb=__stackBase__+8;
        var $err;
        _PyErr_Fetch($t, $v, $tb); //@line 582 "bufferedio.c"
        var $1=HEAP[$v]; //@line 583 "bufferedio.c"
        var $2=($1)==0; //@line 583 "bufferedio.c"
        if ($2) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 583 "bufferedio.c"
      case 1: // $bb
        var $3=HEAP[_PyExc_BlockingIOError]; //@line 583 "bufferedio.c"
        var $4=HEAP[$v]; //@line 583 "bufferedio.c"
        var $5=_PyErr_GivenExceptionMatches($4, $3); //@line 583 "bufferedio.c"
        var $6=($5)==0; //@line 583 "bufferedio.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 583 "bufferedio.c"
      case 2: // $bb1
        var $7=HEAP[$tb]; //@line 584 "bufferedio.c"
        var $8=HEAP[$v]; //@line 584 "bufferedio.c"
        var $9=HEAP[$t]; //@line 584 "bufferedio.c"
        _PyErr_Restore($9, $8, $7); //@line 584 "bufferedio.c"
        $0=0; //@line 585 "bufferedio.c"
        __label__ = 4; break; //@line 585 "bufferedio.c"
      case 3: // $bb2
        var $10=HEAP[$v]; //@line 587 "bufferedio.c"
        var $11=$10; //@line 587 "bufferedio.c"
        $err=$11; //@line 587 "bufferedio.c"
        var $12=HEAP[$tb]; //@line 589 "bufferedio.c"
        var $13=HEAP[$v]; //@line 589 "bufferedio.c"
        var $14=HEAP[$t]; //@line 589 "bufferedio.c"
        _PyErr_Restore($14, $13, $12); //@line 589 "bufferedio.c"
        var $15=$err; //@line 590 "bufferedio.c"
        var $16=$15+32; //@line 590 "bufferedio.c"
        $0=$16; //@line 590 "bufferedio.c"
        __label__ = 4; break; //@line 590 "bufferedio.c"
      case 4: // $bb3
        var $17=$0; //@line 585 "bufferedio.c"
        $retval=$17; //@line 585 "bufferedio.c"
        var $retval4=$retval; //@line 585 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 585 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __buffered_raw_tell($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $n;
        var $res;
        $self_addr=$self;
        var $1=HEAP[__PyIO_str_tell]; //@line 598 "bufferedio.c"
        var $2=$self_addr; //@line 598 "bufferedio.c"
        var $3=$2+8; //@line 598 "bufferedio.c"
        var $4=HEAP[$3]; //@line 598 "bufferedio.c"
        var $5=_PyObject_CallMethodObjArgs($4, $1, allocate(4, "i8*", ALLOC_STACK)); //@line 598 "bufferedio.c"
        $res=$5; //@line 598 "bufferedio.c"
        var $6=$res; //@line 599 "bufferedio.c"
        var $7=($6)==0; //@line 599 "bufferedio.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 599 "bufferedio.c"
      case 1: // $bb
        $0=-1; //@line 600 "bufferedio.c"
        __label__ = 9; break; //@line 600 "bufferedio.c"
      case 2: // $bb1
        var $8=HEAP[_PyExc_ValueError]; //@line 601 "bufferedio.c"
        var $9=$res; //@line 601 "bufferedio.c"
        var $10=_PyNumber_AsOff_t($9, $8); //@line 601 "bufferedio.c"
        $n=$10; //@line 601 "bufferedio.c"
        var $11=$res; //@line 602 "bufferedio.c"
        var $12=$11; //@line 602 "bufferedio.c"
        var $13=HEAP[$12]; //@line 602 "bufferedio.c"
        var $14=($13) - 1; //@line 602 "bufferedio.c"
        var $15=$res; //@line 602 "bufferedio.c"
        var $16=$15; //@line 602 "bufferedio.c"
        HEAP[$16]=$14; //@line 602 "bufferedio.c"
        var $17=$res; //@line 602 "bufferedio.c"
        var $18=$17; //@line 602 "bufferedio.c"
        var $19=HEAP[$18]; //@line 602 "bufferedio.c"
        var $20=($19)==0; //@line 602 "bufferedio.c"
        if ($20) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 602 "bufferedio.c"
      case 3: // $bb2
        var $21=$res; //@line 602 "bufferedio.c"
        var $22=$21+4; //@line 602 "bufferedio.c"
        var $23=HEAP[$22]; //@line 602 "bufferedio.c"
        var $24=$23+24; //@line 602 "bufferedio.c"
        var $25=HEAP[$24]; //@line 602 "bufferedio.c"
        var $26=$res; //@line 602 "bufferedio.c"
        FUNCTION_TABLE[$25]($26); //@line 602 "bufferedio.c"
        __label__ = 4; break; //@line 602 "bufferedio.c"
      case 4: // $bb3
        var $27=$n; //@line 603 "bufferedio.c"
        var $28=($27) < 0; //@line 603 "bufferedio.c"
        if ($28) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 603 "bufferedio.c"
      case 5: // $bb4
        var $29=_PyErr_Occurred(); //@line 604 "bufferedio.c"
        var $30=($29)==0; //@line 604 "bufferedio.c"
        if ($30) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 604 "bufferedio.c"
      case 6: // $bb5
        var $31=HEAP[_PyExc_IOError]; //@line 605 "bufferedio.c"
        var $32=$n; //@line 605 "bufferedio.c"
        var $33=_PyErr_Format($31, __str15, allocate([$32,0,0,0,0,0,0,0], ["i64",0,0,0,0,0,0,0], ALLOC_STACK)); //@line 605 "bufferedio.c"
        __label__ = 7; break; //@line 605 "bufferedio.c"
      case 7: // $bb6
        $0=-1; //@line 608 "bufferedio.c"
        __label__ = 9; break; //@line 608 "bufferedio.c"
      case 8: // $bb7
        var $34=$self_addr; //@line 610 "bufferedio.c"
        var $35=$34+32; //@line 610 "bufferedio.c"
        var $36=$n; //@line 610 "bufferedio.c"
        HEAP[$35]=$36; //@line 610 "bufferedio.c"
        var $37=$n; //@line 611 "bufferedio.c"
        $0=$37; //@line 611 "bufferedio.c"
        __label__ = 9; break; //@line 611 "bufferedio.c"
      case 9: // $bb8
        var $38=$0; //@line 600 "bufferedio.c"
        $retval=$38; //@line 600 "bufferedio.c"
        var $retval9=$retval; //@line 600 "bufferedio.c"
        ;
        return $retval9; //@line 600 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __buffered_raw_seek($self, $target, $whence) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $target_addr;
        var $whence_addr;
        var $retval;
        var $0;
        var $res;
        var $posobj;
        var $whenceobj;
        var $n;
        $self_addr=$self;
        $target_addr=$target;
        $whence_addr=$whence;
        var $1=$target_addr; //@line 620 "bufferedio.c"
        var $2=_PyLong_FromLongLong($1); //@line 620 "bufferedio.c"
        $posobj=$2; //@line 620 "bufferedio.c"
        var $3=$posobj; //@line 621 "bufferedio.c"
        var $4=($3)==0; //@line 621 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 621 "bufferedio.c"
      case 1: // $bb
        $0=-1; //@line 622 "bufferedio.c"
        __label__ = 19; break; //@line 622 "bufferedio.c"
      case 2: // $bb1
        var $5=$whence_addr; //@line 623 "bufferedio.c"
        var $6=_PyLong_FromLong($5); //@line 623 "bufferedio.c"
        $whenceobj=$6; //@line 623 "bufferedio.c"
        var $7=$whenceobj; //@line 624 "bufferedio.c"
        var $8=($7)==0; //@line 624 "bufferedio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 624 "bufferedio.c"
      case 3: // $bb2
        var $9=$posobj; //@line 625 "bufferedio.c"
        var $10=$9; //@line 625 "bufferedio.c"
        var $11=HEAP[$10]; //@line 625 "bufferedio.c"
        var $12=($11) - 1; //@line 625 "bufferedio.c"
        var $13=$posobj; //@line 625 "bufferedio.c"
        var $14=$13; //@line 625 "bufferedio.c"
        HEAP[$14]=$12; //@line 625 "bufferedio.c"
        var $15=$posobj; //@line 625 "bufferedio.c"
        var $16=$15; //@line 625 "bufferedio.c"
        var $17=HEAP[$16]; //@line 625 "bufferedio.c"
        var $18=($17)==0; //@line 625 "bufferedio.c"
        if ($18) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 625 "bufferedio.c"
      case 4: // $bb3
        var $19=$posobj; //@line 625 "bufferedio.c"
        var $20=$19+4; //@line 625 "bufferedio.c"
        var $21=HEAP[$20]; //@line 625 "bufferedio.c"
        var $22=$21+24; //@line 625 "bufferedio.c"
        var $23=HEAP[$22]; //@line 625 "bufferedio.c"
        var $24=$posobj; //@line 625 "bufferedio.c"
        FUNCTION_TABLE[$23]($24); //@line 625 "bufferedio.c"
        __label__ = 5; break; //@line 625 "bufferedio.c"
      case 5: // $bb4
        $0=-1; //@line 626 "bufferedio.c"
        __label__ = 19; break; //@line 626 "bufferedio.c"
      case 6: // $bb5
        var $25=HEAP[__PyIO_str_seek]; //@line 628 "bufferedio.c"
        var $26=$self_addr; //@line 628 "bufferedio.c"
        var $27=$26+8; //@line 628 "bufferedio.c"
        var $28=HEAP[$27]; //@line 628 "bufferedio.c"
        var $29=$posobj; //@line 628 "bufferedio.c"
        var $30=$whenceobj; //@line 628 "bufferedio.c"
        var $31=_PyObject_CallMethodObjArgs($28, $25, allocate([$29,0,0,0,$30,0,0,0,0,0,0,0], ["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 628 "bufferedio.c"
        $res=$31; //@line 628 "bufferedio.c"
        var $32=$posobj; //@line 630 "bufferedio.c"
        var $33=$32; //@line 630 "bufferedio.c"
        var $34=HEAP[$33]; //@line 630 "bufferedio.c"
        var $35=($34) - 1; //@line 630 "bufferedio.c"
        var $36=$posobj; //@line 630 "bufferedio.c"
        var $37=$36; //@line 630 "bufferedio.c"
        HEAP[$37]=$35; //@line 630 "bufferedio.c"
        var $38=$posobj; //@line 630 "bufferedio.c"
        var $39=$38; //@line 630 "bufferedio.c"
        var $40=HEAP[$39]; //@line 630 "bufferedio.c"
        var $41=($40)==0; //@line 630 "bufferedio.c"
        if ($41) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 630 "bufferedio.c"
      case 7: // $bb6
        var $42=$posobj; //@line 630 "bufferedio.c"
        var $43=$42+4; //@line 630 "bufferedio.c"
        var $44=HEAP[$43]; //@line 630 "bufferedio.c"
        var $45=$44+24; //@line 630 "bufferedio.c"
        var $46=HEAP[$45]; //@line 630 "bufferedio.c"
        var $47=$posobj; //@line 630 "bufferedio.c"
        FUNCTION_TABLE[$46]($47); //@line 630 "bufferedio.c"
        __label__ = 8; break; //@line 630 "bufferedio.c"
      case 8: // $bb7
        var $48=$whenceobj; //@line 631 "bufferedio.c"
        var $49=$48; //@line 631 "bufferedio.c"
        var $50=HEAP[$49]; //@line 631 "bufferedio.c"
        var $51=($50) - 1; //@line 631 "bufferedio.c"
        var $52=$whenceobj; //@line 631 "bufferedio.c"
        var $53=$52; //@line 631 "bufferedio.c"
        HEAP[$53]=$51; //@line 631 "bufferedio.c"
        var $54=$whenceobj; //@line 631 "bufferedio.c"
        var $55=$54; //@line 631 "bufferedio.c"
        var $56=HEAP[$55]; //@line 631 "bufferedio.c"
        var $57=($56)==0; //@line 631 "bufferedio.c"
        if ($57) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 631 "bufferedio.c"
      case 9: // $bb8
        var $58=$whenceobj; //@line 631 "bufferedio.c"
        var $59=$58+4; //@line 631 "bufferedio.c"
        var $60=HEAP[$59]; //@line 631 "bufferedio.c"
        var $61=$60+24; //@line 631 "bufferedio.c"
        var $62=HEAP[$61]; //@line 631 "bufferedio.c"
        var $63=$whenceobj; //@line 631 "bufferedio.c"
        FUNCTION_TABLE[$62]($63); //@line 631 "bufferedio.c"
        __label__ = 10; break; //@line 631 "bufferedio.c"
      case 10: // $bb9
        var $64=$res; //@line 632 "bufferedio.c"
        var $65=($64)==0; //@line 632 "bufferedio.c"
        if ($65) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 632 "bufferedio.c"
      case 11: // $bb10
        $0=-1; //@line 633 "bufferedio.c"
        __label__ = 19; break; //@line 633 "bufferedio.c"
      case 12: // $bb11
        var $66=HEAP[_PyExc_ValueError]; //@line 634 "bufferedio.c"
        var $67=$res; //@line 634 "bufferedio.c"
        var $68=_PyNumber_AsOff_t($67, $66); //@line 634 "bufferedio.c"
        $n=$68; //@line 634 "bufferedio.c"
        var $69=$res; //@line 635 "bufferedio.c"
        var $70=$69; //@line 635 "bufferedio.c"
        var $71=HEAP[$70]; //@line 635 "bufferedio.c"
        var $72=($71) - 1; //@line 635 "bufferedio.c"
        var $73=$res; //@line 635 "bufferedio.c"
        var $74=$73; //@line 635 "bufferedio.c"
        HEAP[$74]=$72; //@line 635 "bufferedio.c"
        var $75=$res; //@line 635 "bufferedio.c"
        var $76=$75; //@line 635 "bufferedio.c"
        var $77=HEAP[$76]; //@line 635 "bufferedio.c"
        var $78=($77)==0; //@line 635 "bufferedio.c"
        if ($78) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 635 "bufferedio.c"
      case 13: // $bb12
        var $79=$res; //@line 635 "bufferedio.c"
        var $80=$79+4; //@line 635 "bufferedio.c"
        var $81=HEAP[$80]; //@line 635 "bufferedio.c"
        var $82=$81+24; //@line 635 "bufferedio.c"
        var $83=HEAP[$82]; //@line 635 "bufferedio.c"
        var $84=$res; //@line 635 "bufferedio.c"
        FUNCTION_TABLE[$83]($84); //@line 635 "bufferedio.c"
        __label__ = 14; break; //@line 635 "bufferedio.c"
      case 14: // $bb13
        var $85=$n; //@line 636 "bufferedio.c"
        var $86=($85) < 0; //@line 636 "bufferedio.c"
        if ($86) { __label__ = 15; break; } else { __label__ = 18; break; } //@line 636 "bufferedio.c"
      case 15: // $bb14
        var $87=_PyErr_Occurred(); //@line 637 "bufferedio.c"
        var $88=($87)==0; //@line 637 "bufferedio.c"
        if ($88) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 637 "bufferedio.c"
      case 16: // $bb15
        var $89=HEAP[_PyExc_IOError]; //@line 638 "bufferedio.c"
        var $90=$n; //@line 638 "bufferedio.c"
        var $91=_PyErr_Format($89, __str15, allocate([$90,0,0,0,0,0,0,0], ["i64",0,0,0,0,0,0,0], ALLOC_STACK)); //@line 638 "bufferedio.c"
        __label__ = 17; break; //@line 638 "bufferedio.c"
      case 17: // $bb16
        $0=-1; //@line 641 "bufferedio.c"
        __label__ = 19; break; //@line 641 "bufferedio.c"
      case 18: // $bb17
        var $92=$self_addr; //@line 643 "bufferedio.c"
        var $93=$92+32; //@line 643 "bufferedio.c"
        var $94=$n; //@line 643 "bufferedio.c"
        HEAP[$93]=$94; //@line 643 "bufferedio.c"
        var $95=$n; //@line 644 "bufferedio.c"
        $0=$95; //@line 644 "bufferedio.c"
        __label__ = 19; break; //@line 644 "bufferedio.c"
      case 19: // $bb18
        var $96=$0; //@line 622 "bufferedio.c"
        $retval=$96; //@line 622 "bufferedio.c"
        var $retval19=$retval; //@line 622 "bufferedio.c"
        ;
        return $retval19; //@line 622 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __buffered_init($self) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $n;
        $self_addr=$self;
        var $1=$self_addr; //@line 651 "bufferedio.c"
        var $2=$1+84; //@line 651 "bufferedio.c"
        var $3=HEAP[$2]; //@line 651 "bufferedio.c"
        var $4=($3) <= 0; //@line 651 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 651 "bufferedio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 652 "bufferedio.c"
        _PyErr_SetString($5, __str16); //@line 652 "bufferedio.c"
        $0=-1; //@line 654 "bufferedio.c"
        __label__ = 15; break; //@line 654 "bufferedio.c"
      case 2: // $bb1
        var $6=$self_addr; //@line 656 "bufferedio.c"
        var $7=$6+40; //@line 656 "bufferedio.c"
        var $8=HEAP[$7]; //@line 656 "bufferedio.c"
        var $9=($8)!=0; //@line 656 "bufferedio.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 656 "bufferedio.c"
      case 3: // $bb2
        var $10=$self_addr; //@line 657 "bufferedio.c"
        var $11=$10+40; //@line 657 "bufferedio.c"
        var $12=HEAP[$11]; //@line 657 "bufferedio.c"
        _PyMem_Free($12); //@line 657 "bufferedio.c"
        __label__ = 4; break; //@line 657 "bufferedio.c"
      case 4: // $bb3
        var $13=$self_addr; //@line 658 "bufferedio.c"
        var $14=$13+84; //@line 658 "bufferedio.c"
        var $15=HEAP[$14]; //@line 658 "bufferedio.c"
        var $16=_PyMem_Malloc($15); //@line 658 "bufferedio.c"
        var $17=$self_addr; //@line 658 "bufferedio.c"
        var $18=$17+40; //@line 658 "bufferedio.c"
        HEAP[$18]=$16; //@line 658 "bufferedio.c"
        var $19=$self_addr; //@line 659 "bufferedio.c"
        var $20=$19+40; //@line 659 "bufferedio.c"
        var $21=HEAP[$20]; //@line 659 "bufferedio.c"
        var $22=($21)==0; //@line 659 "bufferedio.c"
        if ($22) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 659 "bufferedio.c"
      case 5: // $bb4
        var $23=_PyErr_NoMemory(); //@line 660 "bufferedio.c"
        $0=-1; //@line 661 "bufferedio.c"
        __label__ = 15; break; //@line 661 "bufferedio.c"
      case 6: // $bb5
        var $24=$self_addr; //@line 675 "bufferedio.c"
        var $25=$24+84; //@line 675 "bufferedio.c"
        var $26=HEAP[$25]; //@line 675 "bufferedio.c"
        var $27=($26) - 1; //@line 675 "bufferedio.c"
        $n=$27; //@line 675 "bufferedio.c"
        var $28=($27) & 1; //@line 675 "bufferedio.c"
        var $29=((($28)) & 255); //@line 675 "bufferedio.c"
        var $toBool1=($29)!=0; //@line 675 "bufferedio.c"
        if ($toBool1) { __lastLabel__ = 6; __label__ = 7; break; } else { __lastLabel__ = 6; __label__ = 9; break; } //@line 675 "bufferedio.c"
      case 7: // $bb6
        var $30=__lastLabel__ == 7 ? $31 : ($27);
        var $31=($30) >> 1; //@line 675 "bufferedio.c"
        var $32=($31) & 1; //@line 675 "bufferedio.c"
        var $33=((($32)) & 255); //@line 675 "bufferedio.c"
        var $toBool=($33)!=0; //@line 675 "bufferedio.c"
        if ($toBool) { __lastLabel__ = 7; __label__ = 7; break; } else { __lastLabel__ = 7; __label__ = 8; break; } //@line 675 "bufferedio.c"
      case 8: // $bb7_bb8_crit_edge
        $n=$31;
        __lastLabel__ = 8; __label__ = 9; break;
      case 9: // $bb8
        var $_lcssa=__lastLabel__ == 8 ? $31 : ($27);
        var $34=($_lcssa)==0; //@line 677 "bufferedio.c"
        var $35=$self_addr; //@line 678 "bufferedio.c"
        if ($34) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 677 "bufferedio.c"
      case 10: // $bb9
        var $36=$35+84; //@line 678 "bufferedio.c"
        var $37=HEAP[$36]; //@line 678 "bufferedio.c"
        var $38=($37) - 1; //@line 678 "bufferedio.c"
        var $39=$self_addr; //@line 678 "bufferedio.c"
        var $40=$39+88; //@line 678 "bufferedio.c"
        HEAP[$40]=$38; //@line 678 "bufferedio.c"
        __label__ = 12; break; //@line 678 "bufferedio.c"
      case 11: // $bb10
        var $41=$35+88; //@line 680 "bufferedio.c"
        HEAP[$41]=0; //@line 680 "bufferedio.c"
        __label__ = 12; break; //@line 680 "bufferedio.c"
      case 12: // $bb11
        var $42=$self_addr; //@line 681 "bufferedio.c"
        var $43=__buffered_raw_tell($42); //@line 681 "bufferedio.c"
        var $44=($43)==-1; //@line 681 "bufferedio.c"
        if ($44) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 681 "bufferedio.c"
      case 13: // $bb12
        _PyErr_Clear(); //@line 682 "bufferedio.c"
        __label__ = 14; break; //@line 682 "bufferedio.c"
      case 14: // $bb13
        $0=0; //@line 683 "bufferedio.c"
        __label__ = 15; break; //@line 683 "bufferedio.c"
      case 15: // $bb14
        var $45=$0; //@line 654 "bufferedio.c"
        $retval=$45; //@line 654 "bufferedio.c"
        var $retval15=$retval; //@line 654 "bufferedio.c"
        ;
        return $retval15; //@line 654 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __trap_eintr() {
    var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval;
        var $0;
        var $typ=__stackBase__;
        var $val=__stackBase__+4;
        var $tb=__stackBase__+8;
        var $env_err;
        var $1=HEAP[_eintr_int_9093]; //@line 697 "bufferedio.c"
        var $2=($1)==0; //@line 697 "bufferedio.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 697 "bufferedio.c"
      case 1: // $bb
        var $3=_PyLong_FromLong(4); //@line 698 "bufferedio.c"
        HEAP[_eintr_int_9093]=$3; //@line 698 "bufferedio.c"
        var $4=HEAP[_eintr_int_9093]; //@line 699 "bufferedio.c"
        var $5=($4)==0; //@line 699 "bufferedio.c"
        if ($5) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 699 "bufferedio.c"
      case 2: // $bb1
        ___assert_fail(__str17, __str10, 699, ___PRETTY_FUNCTION___9098); //@line 699 "bufferedio.c"
        throw "Reached an unreachable!" //@line 699 "bufferedio.c"
      case 3: // $bb2
        var $6=HEAP[_PyExc_EnvironmentError]; //@line 701 "bufferedio.c"
        var $7=_PyErr_ExceptionMatches($6); //@line 701 "bufferedio.c"
        var $8=($7)==0; //@line 701 "bufferedio.c"
        if ($8) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 701 "bufferedio.c"
      case 4: // $bb3
        $0=0; //@line 702 "bufferedio.c"
        __label__ = 18; break; //@line 702 "bufferedio.c"
      case 5: // $bb4
        _PyErr_Fetch($typ, $val, $tb); //@line 703 "bufferedio.c"
        _PyErr_NormalizeException($typ, $val, $tb); //@line 704 "bufferedio.c"
        var $9=HEAP[$val]; //@line 705 "bufferedio.c"
        var $10=$9; //@line 705 "bufferedio.c"
        $env_err=$10; //@line 705 "bufferedio.c"
        var $11=$env_err; //@line 706 "bufferedio.c"
        var $12=($11)==0; //@line 706 "bufferedio.c"
        if ($12) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 706 "bufferedio.c"
      case 6: // $bb5
        ___assert_fail(__str18, __str10, 706, ___PRETTY_FUNCTION___9098); //@line 706 "bufferedio.c"
        throw "Reached an unreachable!" //@line 706 "bufferedio.c"
      case 7: // $bb6
        var $13=$env_err; //@line 707 "bufferedio.c"
        var $14=$13+20; //@line 707 "bufferedio.c"
        var $15=HEAP[$14]; //@line 707 "bufferedio.c"
        var $16=($15)!=0; //@line 707 "bufferedio.c"
        if ($16) { __label__ = 8; break; } else { __label__ = 17; break; } //@line 707 "bufferedio.c"
      case 8: // $bb7
        var $17=HEAP[_eintr_int_9093]; //@line 707 "bufferedio.c"
        var $18=$env_err; //@line 707 "bufferedio.c"
        var $19=$18+20; //@line 707 "bufferedio.c"
        var $20=HEAP[$19]; //@line 707 "bufferedio.c"
        var $21=_PyObject_RichCompareBool($20, $17, 2); //@line 707 "bufferedio.c"
        var $22=($21) > 0; //@line 707 "bufferedio.c"
        if ($22) { __label__ = 9; break; } else { __label__ = 17; break; } //@line 707 "bufferedio.c"
      case 9: // $bb8
        var $23=HEAP[$typ]; //@line 709 "bufferedio.c"
        var $24=$23; //@line 709 "bufferedio.c"
        var $25=HEAP[$24]; //@line 709 "bufferedio.c"
        var $26=($25) - 1; //@line 709 "bufferedio.c"
        var $27=$23; //@line 709 "bufferedio.c"
        HEAP[$27]=$26; //@line 709 "bufferedio.c"
        var $28=$23; //@line 709 "bufferedio.c"
        var $29=HEAP[$28]; //@line 709 "bufferedio.c"
        var $30=($29)==0; //@line 709 "bufferedio.c"
        if ($30) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 709 "bufferedio.c"
      case 10: // $bb9
        var $31=HEAP[$typ]; //@line 709 "bufferedio.c"
        var $32=$31+4; //@line 709 "bufferedio.c"
        var $33=HEAP[$32]; //@line 709 "bufferedio.c"
        var $34=$33+24; //@line 709 "bufferedio.c"
        var $35=HEAP[$34]; //@line 709 "bufferedio.c"
        var $36=HEAP[$typ]; //@line 709 "bufferedio.c"
        FUNCTION_TABLE[$35]($36); //@line 709 "bufferedio.c"
        __label__ = 11; break; //@line 709 "bufferedio.c"
      case 11: // $bb10
        var $37=HEAP[$val]; //@line 710 "bufferedio.c"
        var $38=$37; //@line 710 "bufferedio.c"
        var $39=HEAP[$38]; //@line 710 "bufferedio.c"
        var $40=($39) - 1; //@line 710 "bufferedio.c"
        var $41=$37; //@line 710 "bufferedio.c"
        HEAP[$41]=$40; //@line 710 "bufferedio.c"
        var $42=$37; //@line 710 "bufferedio.c"
        var $43=HEAP[$42]; //@line 710 "bufferedio.c"
        var $44=($43)==0; //@line 710 "bufferedio.c"
        if ($44) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 710 "bufferedio.c"
      case 12: // $bb11
        var $45=HEAP[$val]; //@line 710 "bufferedio.c"
        var $46=$45+4; //@line 710 "bufferedio.c"
        var $47=HEAP[$46]; //@line 710 "bufferedio.c"
        var $48=$47+24; //@line 710 "bufferedio.c"
        var $49=HEAP[$48]; //@line 710 "bufferedio.c"
        var $50=HEAP[$val]; //@line 710 "bufferedio.c"
        FUNCTION_TABLE[$49]($50); //@line 710 "bufferedio.c"
        __label__ = 13; break; //@line 710 "bufferedio.c"
      case 13: // $bb12
        var $51=HEAP[$tb]; //@line 711 "bufferedio.c"
        var $52=($51)!=0; //@line 711 "bufferedio.c"
        if ($52) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 711 "bufferedio.c"
      case 14: // $bb13
        var $53=HEAP[$tb]; //@line 711 "bufferedio.c"
        var $54=$53; //@line 711 "bufferedio.c"
        var $55=HEAP[$54]; //@line 711 "bufferedio.c"
        var $56=($55) - 1; //@line 711 "bufferedio.c"
        var $57=$53; //@line 711 "bufferedio.c"
        HEAP[$57]=$56; //@line 711 "bufferedio.c"
        var $58=$53; //@line 711 "bufferedio.c"
        var $59=HEAP[$58]; //@line 711 "bufferedio.c"
        var $60=($59)==0; //@line 711 "bufferedio.c"
        if ($60) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 711 "bufferedio.c"
      case 15: // $bb14
        var $61=HEAP[$tb]; //@line 711 "bufferedio.c"
        var $62=$61+4; //@line 711 "bufferedio.c"
        var $63=HEAP[$62]; //@line 711 "bufferedio.c"
        var $64=$63+24; //@line 711 "bufferedio.c"
        var $65=HEAP[$64]; //@line 711 "bufferedio.c"
        var $66=HEAP[$tb]; //@line 711 "bufferedio.c"
        FUNCTION_TABLE[$65]($66); //@line 711 "bufferedio.c"
        __label__ = 16; break; //@line 711 "bufferedio.c"
      case 16: // $bb15
        $0=1; //@line 712 "bufferedio.c"
        __label__ = 18; break; //@line 712 "bufferedio.c"
      case 17: // $bb16
        var $67=HEAP[$tb]; //@line 715 "bufferedio.c"
        var $68=HEAP[$val]; //@line 715 "bufferedio.c"
        var $69=HEAP[$typ]; //@line 715 "bufferedio.c"
        _PyErr_Restore($69, $68, $67); //@line 715 "bufferedio.c"
        $0=0; //@line 716 "bufferedio.c"
        __label__ = 18; break; //@line 716 "bufferedio.c"
      case 18: // $bb17
        var $70=$0; //@line 702 "bufferedio.c"
        $retval=$70; //@line 702 "bufferedio.c"
        var $retval18=$retval; //@line 702 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval18; //@line 702 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_flush($self, $args) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $iftmp_86;
        var $iftmp_84;
        var $0;
        var $res;
        var $n;
        var $_py_tmp;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 728 "bufferedio.c"
        var $2=$1+12; //@line 728 "bufferedio.c"
        var $3=HEAP[$2]; //@line 728 "bufferedio.c"
        var $4=($3) <= 0; //@line 728 "bufferedio.c"
        var $5=$self_addr; //@line 728 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 728 "bufferedio.c"
      case 1: // $bb
        var $6=$5+16; //@line 728 "bufferedio.c"
        var $7=HEAP[$6]; //@line 728 "bufferedio.c"
        var $8=($7)!=0; //@line 728 "bufferedio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 728 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 728 "bufferedio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str11); //@line 728 "bufferedio.c"
        __label__ = 4; break; //@line 728 "bufferedio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str12); //@line 728 "bufferedio.c"
        __label__ = 4; break; //@line 728 "bufferedio.c"
      case 4: // $bb3
        $0=0; //@line 728 "bufferedio.c"
        __label__ = 25; break; //@line 728 "bufferedio.c"
      case 5: // $bb4
        var $10=$5+28; //@line 729 "bufferedio.c"
        var $11=HEAP[$10]; //@line 729 "bufferedio.c"
        var $12=($11)!=0; //@line 729 "bufferedio.c"
        var $13=$self_addr; //@line 729 "bufferedio.c"
        if ($12) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 729 "bufferedio.c"
      case 6: // $bb5
        var $14=$13+8; //@line 729 "bufferedio.c"
        var $15=HEAP[$14]; //@line 729 "bufferedio.c"
        var $16=__PyFileIO_closed($15); //@line 729 "bufferedio.c"
        var $17=($16)!=0; //@line 729 "bufferedio.c"
        var $18=($17); //@line 729 "bufferedio.c"
        $iftmp_84=$18; //@line 729 "bufferedio.c"
        __lastLabel__ = 6; __label__ = 8; break; //@line 729 "bufferedio.c"
      case 7: // $bb6
        var $19=_buffered_closed($13); //@line 729 "bufferedio.c"
        var $20=($19)!=0; //@line 729 "bufferedio.c"
        var $21=($20); //@line 729 "bufferedio.c"
        $iftmp_84=$21; //@line 729 "bufferedio.c"
        __lastLabel__ = 7; __label__ = 8; break; //@line 729 "bufferedio.c"
      case 8: // $bb7
        var $22=__lastLabel__ == 7 ? $21 : ($18);
        var $toBool=($22)!=0; //@line 729 "bufferedio.c"
        if ($toBool) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 729 "bufferedio.c"
      case 9: // $bb8
        var $23=HEAP[_PyExc_ValueError]; //@line 729 "bufferedio.c"
        _PyErr_SetString($23, __str19); //@line 729 "bufferedio.c"
        $0=0; //@line 729 "bufferedio.c"
        __label__ = 25; break; //@line 729 "bufferedio.c"
      case 10: // $bb9
        var $24=$self_addr; //@line 733 "bufferedio.c"
        var $25=__bufferedwriter_flush_unlocked($24, 0); //@line 733 "bufferedio.c"
        $res=$25; //@line 733 "bufferedio.c"
        var $26=$res; //@line 734 "bufferedio.c"
        var $27=($26)!=0; //@line 734 "bufferedio.c"
        if ($27) { __label__ = 11; break; } else { __label__ = 24; break; } //@line 734 "bufferedio.c"
      case 11: // $bb10
        var $28=$self_addr; //@line 734 "bufferedio.c"
        var $29=$28+20; //@line 734 "bufferedio.c"
        var $30=HEAP[$29]; //@line 734 "bufferedio.c"
        var $31=($30)!=0; //@line 734 "bufferedio.c"
        if ($31) { __label__ = 12; break; } else { __label__ = 24; break; } //@line 734 "bufferedio.c"
      case 12: // $bb11
        var $32=$self_addr; //@line 738 "bufferedio.c"
        var $33=$32+20; //@line 738 "bufferedio.c"
        var $34=HEAP[$33]; //@line 738 "bufferedio.c"
        var $35=($34)==0; //@line 738 "bufferedio.c"
        if ($35) { __label__ = 14; break; } else { __label__ = 13; break; } //@line 738 "bufferedio.c"
      case 13: // $bb12
        var $36=$self_addr; //@line 738 "bufferedio.c"
        var $37=$36+60; //@line 738 "bufferedio.c"
        var $38=HEAP[$37]; //@line 738 "bufferedio.c"
        var $39=($38)!=-1; //@line 738 "bufferedio.c"
        if ($39) { __label__ = 16; break; } else { __label__ = 14; break; } //@line 738 "bufferedio.c"
      case 14: // $bb13
        var $40=$self_addr; //@line 738 "bufferedio.c"
        var $41=$40+24; //@line 738 "bufferedio.c"
        var $42=HEAP[$41]; //@line 738 "bufferedio.c"
        var $43=($42)==0; //@line 738 "bufferedio.c"
        if ($43) { __label__ = 18; break; } else { __label__ = 15; break; } //@line 738 "bufferedio.c"
      case 15: // $bb14
        var $44=$self_addr; //@line 738 "bufferedio.c"
        var $45=$44+76; //@line 738 "bufferedio.c"
        var $46=HEAP[$45]; //@line 738 "bufferedio.c"
        var $47=($46)!=-1; //@line 738 "bufferedio.c"
        if ($47) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 738 "bufferedio.c"
      case 16: // $bb15
        var $48=$self_addr; //@line 738 "bufferedio.c"
        var $49=$48+52; //@line 738 "bufferedio.c"
        var $50=HEAP[$49]; //@line 738 "bufferedio.c"
        var $51=($50) < 0; //@line 738 "bufferedio.c"
        if ($51) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 738 "bufferedio.c"
      case 17: // $bb16
        var $52=$self_addr; //@line 738 "bufferedio.c"
        var $53=$52+44; //@line 738 "bufferedio.c"
        var $54=HEAP[$53]; //@line 738 "bufferedio.c"
        var $55=$self_addr; //@line 738 "bufferedio.c"
        var $56=$55+52; //@line 738 "bufferedio.c"
        var $57=HEAP[$56]; //@line 738 "bufferedio.c"
        var $58=($54) - ($57); //@line 738 "bufferedio.c"
        $iftmp_86=$58; //@line 738 "bufferedio.c"
        __label__ = 19; break; //@line 738 "bufferedio.c"
      case 18: // $bb17
        $iftmp_86=0; //@line 738 "bufferedio.c"
        __label__ = 19; break; //@line 738 "bufferedio.c"
      case 19: // $bb18
        var $59=$self_addr; //@line 738 "bufferedio.c"
        var $60=$iftmp_86; //@line 738 "bufferedio.c"
        var $61=__buffered_raw_seek($59, $60, 1); //@line 738 "bufferedio.c"
        $n=$61; //@line 738 "bufferedio.c"
        var $62=($61)==-1; //@line 739 "bufferedio.c"
        if ($62) { __label__ = 20; break; } else { __label__ = 23; break; } //@line 739 "bufferedio.c"
      case 20: // $bb19
        var $63=$res; //@line 740 "bufferedio.c"
        var $64=($63)!=0; //@line 740 "bufferedio.c"
        if ($64) { __label__ = 21; break; } else { __label__ = 23; break; } //@line 740 "bufferedio.c"
      case 21: // $bb20
        var $65=$res; //@line 740 "bufferedio.c"
        $_py_tmp=$65; //@line 740 "bufferedio.c"
        $res=0; //@line 740 "bufferedio.c"
        var $66=$_py_tmp; //@line 740 "bufferedio.c"
        var $67=$66; //@line 740 "bufferedio.c"
        var $68=HEAP[$67]; //@line 740 "bufferedio.c"
        var $69=($68) - 1; //@line 740 "bufferedio.c"
        var $70=$_py_tmp; //@line 740 "bufferedio.c"
        var $71=$70; //@line 740 "bufferedio.c"
        HEAP[$71]=$69; //@line 740 "bufferedio.c"
        var $72=$_py_tmp; //@line 740 "bufferedio.c"
        var $73=$72; //@line 740 "bufferedio.c"
        var $74=HEAP[$73]; //@line 740 "bufferedio.c"
        var $75=($74)==0; //@line 740 "bufferedio.c"
        if ($75) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 740 "bufferedio.c"
      case 22: // $bb21
        var $76=$_py_tmp; //@line 740 "bufferedio.c"
        var $77=$76+4; //@line 740 "bufferedio.c"
        var $78=HEAP[$77]; //@line 740 "bufferedio.c"
        var $79=$78+24; //@line 740 "bufferedio.c"
        var $80=HEAP[$79]; //@line 740 "bufferedio.c"
        var $81=$_py_tmp; //@line 740 "bufferedio.c"
        FUNCTION_TABLE[$80]($81); //@line 740 "bufferedio.c"
        __label__ = 23; break; //@line 740 "bufferedio.c"
      case 23: // $bb22
        var $82=$self_addr; //@line 741 "bufferedio.c"
        __bufferedreader_reset_buf($82); //@line 741 "bufferedio.c"
        __label__ = 24; break; //@line 741 "bufferedio.c"
      case 24: // $bb23
        var $83=$res; //@line 745 "bufferedio.c"
        $0=$83; //@line 745 "bufferedio.c"
        __label__ = 25; break; //@line 745 "bufferedio.c"
      case 25: // $bb24
        var $84=$0; //@line 728 "bufferedio.c"
        $retval=$84; //@line 728 "bufferedio.c"
        var $retval25=$retval; //@line 728 "bufferedio.c"
        ;
        return $retval25; //@line 728 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_peek($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $n=__stackBase__;
        var $res;
        var $_py_tmp;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$n]=0; //@line 751 "bufferedio.c"
        $res=0; //@line 752 "bufferedio.c"
        var $1=$self_addr; //@line 754 "bufferedio.c"
        var $2=$1+12; //@line 754 "bufferedio.c"
        var $3=HEAP[$2]; //@line 754 "bufferedio.c"
        var $4=($3) <= 0; //@line 754 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 754 "bufferedio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 754 "bufferedio.c"
        var $6=$5+16; //@line 754 "bufferedio.c"
        var $7=HEAP[$6]; //@line 754 "bufferedio.c"
        var $8=($7)!=0; //@line 754 "bufferedio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 754 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 754 "bufferedio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str11); //@line 754 "bufferedio.c"
        __label__ = 4; break; //@line 754 "bufferedio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str12); //@line 754 "bufferedio.c"
        __label__ = 4; break; //@line 754 "bufferedio.c"
      case 4: // $bb3
        $0=0; //@line 754 "bufferedio.c"
        __label__ = 14; break; //@line 754 "bufferedio.c"
      case 5: // $bb4
        var $10=$args_addr; //@line 755 "bufferedio.c"
        var $11=__PyArg_ParseTuple_SizeT($10, __str20, allocate([$n,0,0,0], ["i32*",0,0,0], ALLOC_STACK)); //@line 755 "bufferedio.c"
        var $12=($11)==0; //@line 755 "bufferedio.c"
        if ($12) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 755 "bufferedio.c"
      case 6: // $bb5
        $0=0; //@line 756 "bufferedio.c"
        __label__ = 14; break; //@line 756 "bufferedio.c"
      case 7: // $bb6
        var $13=$self_addr; //@line 762 "bufferedio.c"
        var $14=$13+24; //@line 762 "bufferedio.c"
        var $15=HEAP[$14]; //@line 762 "bufferedio.c"
        var $16=($15)!=0; //@line 762 "bufferedio.c"
        if ($16) { __label__ = 8; break; } else { __label__ = 12; break; } //@line 762 "bufferedio.c"
      case 8: // $bb7
        var $17=$self_addr; //@line 763 "bufferedio.c"
        var $18=__bufferedwriter_flush_unlocked($17, 1); //@line 763 "bufferedio.c"
        $res=$18; //@line 763 "bufferedio.c"
        var $19=$res; //@line 764 "bufferedio.c"
        var $20=($19)==0; //@line 764 "bufferedio.c"
        if ($20) { __label__ = 13; break; } else { __label__ = 9; break; } //@line 764 "bufferedio.c"
      case 9: // $bb8
        var $21=$res; //@line 766 "bufferedio.c"
        var $22=($21)!=0; //@line 766 "bufferedio.c"
        if ($22) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 766 "bufferedio.c"
      case 10: // $bb9
        var $23=$res; //@line 766 "bufferedio.c"
        $_py_tmp=$23; //@line 766 "bufferedio.c"
        $res=0; //@line 766 "bufferedio.c"
        var $24=$_py_tmp; //@line 766 "bufferedio.c"
        var $25=$24; //@line 766 "bufferedio.c"
        var $26=HEAP[$25]; //@line 766 "bufferedio.c"
        var $27=($26) - 1; //@line 766 "bufferedio.c"
        var $28=$_py_tmp; //@line 766 "bufferedio.c"
        var $29=$28; //@line 766 "bufferedio.c"
        HEAP[$29]=$27; //@line 766 "bufferedio.c"
        var $30=$_py_tmp; //@line 766 "bufferedio.c"
        var $31=$30; //@line 766 "bufferedio.c"
        var $32=HEAP[$31]; //@line 766 "bufferedio.c"
        var $33=($32)==0; //@line 766 "bufferedio.c"
        if ($33) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 766 "bufferedio.c"
      case 11: // $bb10
        var $34=$_py_tmp; //@line 766 "bufferedio.c"
        var $35=$34+4; //@line 766 "bufferedio.c"
        var $36=HEAP[$35]; //@line 766 "bufferedio.c"
        var $37=$36+24; //@line 766 "bufferedio.c"
        var $38=HEAP[$37]; //@line 766 "bufferedio.c"
        var $39=$_py_tmp; //@line 766 "bufferedio.c"
        FUNCTION_TABLE[$38]($39); //@line 766 "bufferedio.c"
        __label__ = 12; break; //@line 766 "bufferedio.c"
      case 12: // $bb11
        var $40=HEAP[$n]; //@line 768 "bufferedio.c"
        var $41=$self_addr; //@line 768 "bufferedio.c"
        var $42=__bufferedreader_peek_unlocked($41, $40); //@line 768 "bufferedio.c"
        $res=$42; //@line 768 "bufferedio.c"
        __label__ = 13; break; //@line 770 "bufferedio.c"
      case 13: // $end
        var $43=$res; //@line 772 "bufferedio.c"
        $0=$43; //@line 772 "bufferedio.c"
        __label__ = 14; break; //@line 772 "bufferedio.c"
      case 14: // $bb12
        var $44=$0; //@line 754 "bufferedio.c"
        $retval=$44; //@line 754 "bufferedio.c"
        var $retval13=$retval; //@line 754 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 754 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_read($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $iftmp_94;
        var $0;
        var $n=__stackBase__;
        var $res;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$n]=-1; //@line 778 "bufferedio.c"
        var $1=$self_addr; //@line 781 "bufferedio.c"
        var $2=$1+12; //@line 781 "bufferedio.c"
        var $3=HEAP[$2]; //@line 781 "bufferedio.c"
        var $4=($3) <= 0; //@line 781 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 781 "bufferedio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 781 "bufferedio.c"
        var $6=$5+16; //@line 781 "bufferedio.c"
        var $7=HEAP[$6]; //@line 781 "bufferedio.c"
        var $8=($7)!=0; //@line 781 "bufferedio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 781 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 781 "bufferedio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str11); //@line 781 "bufferedio.c"
        __label__ = 4; break; //@line 781 "bufferedio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str12); //@line 781 "bufferedio.c"
        __label__ = 4; break; //@line 781 "bufferedio.c"
      case 4: // $bb3
        $0=0; //@line 781 "bufferedio.c"
        __label__ = 21; break; //@line 781 "bufferedio.c"
      case 5: // $bb4
        var $10=$args_addr; //@line 782 "bufferedio.c"
        var $11=__PyArg_ParseTuple_SizeT($10, __str21, allocate([(FUNCTION_TABLE_OFFSET + 2),0,0,0,$n,0,0,0], ["i32 (%struct.PyObject*, i8*)*",0,0,0,"i32*",0,0,0], ALLOC_STACK)); //@line 782 "bufferedio.c"
        var $12=($11)==0; //@line 782 "bufferedio.c"
        if ($12) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 782 "bufferedio.c"
      case 6: // $bb5
        $0=0; //@line 783 "bufferedio.c"
        __label__ = 21; break; //@line 783 "bufferedio.c"
      case 7: // $bb6
        var $13=HEAP[$n]; //@line 785 "bufferedio.c"
        var $14=($13) < -1; //@line 785 "bufferedio.c"
        if ($14) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 785 "bufferedio.c"
      case 8: // $bb7
        var $15=HEAP[_PyExc_ValueError]; //@line 786 "bufferedio.c"
        _PyErr_SetString($15, __str22); //@line 786 "bufferedio.c"
        $0=0; //@line 788 "bufferedio.c"
        __label__ = 21; break; //@line 788 "bufferedio.c"
      case 9: // $bb8
        var $16=$self_addr; //@line 791 "bufferedio.c"
        var $17=$16+28; //@line 791 "bufferedio.c"
        var $18=HEAP[$17]; //@line 791 "bufferedio.c"
        var $19=($18)!=0; //@line 791 "bufferedio.c"
        var $20=$self_addr; //@line 791 "bufferedio.c"
        if ($19) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 791 "bufferedio.c"
      case 10: // $bb9
        var $21=$20+8; //@line 791 "bufferedio.c"
        var $22=HEAP[$21]; //@line 791 "bufferedio.c"
        var $23=__PyFileIO_closed($22); //@line 791 "bufferedio.c"
        var $24=($23)!=0; //@line 791 "bufferedio.c"
        var $25=($24); //@line 791 "bufferedio.c"
        $iftmp_94=$25; //@line 791 "bufferedio.c"
        __lastLabel__ = 10; __label__ = 12; break; //@line 791 "bufferedio.c"
      case 11: // $bb10
        var $26=_buffered_closed($20); //@line 791 "bufferedio.c"
        var $27=($26)!=0; //@line 791 "bufferedio.c"
        var $28=($27); //@line 791 "bufferedio.c"
        $iftmp_94=$28; //@line 791 "bufferedio.c"
        __lastLabel__ = 11; __label__ = 12; break; //@line 791 "bufferedio.c"
      case 12: // $bb11
        var $29=__lastLabel__ == 11 ? $28 : ($25);
        var $toBool=($29)!=0; //@line 791 "bufferedio.c"
        if ($toBool) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 791 "bufferedio.c"
      case 13: // $bb12
        var $30=HEAP[_PyExc_ValueError]; //@line 791 "bufferedio.c"
        _PyErr_SetString($30, __str23); //@line 791 "bufferedio.c"
        $0=0; //@line 791 "bufferedio.c"
        __label__ = 21; break; //@line 791 "bufferedio.c"
      case 14: // $bb13
        var $31=HEAP[$n]; //@line 793 "bufferedio.c"
        var $32=($31)==-1; //@line 793 "bufferedio.c"
        if ($32) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 793 "bufferedio.c"
      case 15: // $bb14
        var $33=$self_addr; //@line 797 "bufferedio.c"
        var $34=__bufferedreader_read_all($33); //@line 797 "bufferedio.c"
        $res=$34; //@line 797 "bufferedio.c"
        __label__ = 20; break; //@line 797 "bufferedio.c"
      case 16: // $bb15
        var $35=HEAP[$n]; //@line 801 "bufferedio.c"
        var $36=$self_addr; //@line 801 "bufferedio.c"
        var $37=__bufferedreader_read_fast($36, $35); //@line 801 "bufferedio.c"
        $res=$37; //@line 801 "bufferedio.c"
        var $38=$res; //@line 802 "bufferedio.c"
        var $39=($38)==(__Py_NoneStruct); //@line 802 "bufferedio.c"
        if ($39) { __label__ = 17; break; } else { __label__ = 20; break; } //@line 802 "bufferedio.c"
      case 17: // $bb16
        var $40=$res; //@line 803 "bufferedio.c"
        var $41=$40; //@line 803 "bufferedio.c"
        var $42=HEAP[$41]; //@line 803 "bufferedio.c"
        var $43=($42) - 1; //@line 803 "bufferedio.c"
        var $44=$res; //@line 803 "bufferedio.c"
        var $45=$44; //@line 803 "bufferedio.c"
        HEAP[$45]=$43; //@line 803 "bufferedio.c"
        var $46=$res; //@line 803 "bufferedio.c"
        var $47=$46; //@line 803 "bufferedio.c"
        var $48=HEAP[$47]; //@line 803 "bufferedio.c"
        var $49=($48)==0; //@line 803 "bufferedio.c"
        if ($49) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 803 "bufferedio.c"
      case 18: // $bb17
        var $50=$res; //@line 803 "bufferedio.c"
        var $51=$50+4; //@line 803 "bufferedio.c"
        var $52=HEAP[$51]; //@line 803 "bufferedio.c"
        var $53=$52+24; //@line 803 "bufferedio.c"
        var $54=HEAP[$53]; //@line 803 "bufferedio.c"
        var $55=$res; //@line 803 "bufferedio.c"
        FUNCTION_TABLE[$54]($55); //@line 803 "bufferedio.c"
        __label__ = 19; break; //@line 803 "bufferedio.c"
      case 19: // $bb18
        var $56=HEAP[$n]; //@line 806 "bufferedio.c"
        var $57=$self_addr; //@line 806 "bufferedio.c"
        var $58=__bufferedreader_read_generic($57, $56); //@line 806 "bufferedio.c"
        $res=$58; //@line 806 "bufferedio.c"
        __label__ = 20; break; //@line 806 "bufferedio.c"
      case 20: // $bb19
        var $59=$res; //@line 811 "bufferedio.c"
        $0=$59; //@line 811 "bufferedio.c"
        __label__ = 21; break; //@line 811 "bufferedio.c"
      case 21: // $bb20
        var $60=$0; //@line 781 "bufferedio.c"
        $retval=$60; //@line 781 "bufferedio.c"
        var $retval21=$retval; //@line 781 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval21; //@line 781 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_read1($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $iftmp_104;
        var $0;
        var $n=__stackBase__;
        var $have;
        var $r;
        var $res;
        var $_py_tmp;
        $self_addr=$self;
        $args_addr=$args;
        $res=0; //@line 818 "bufferedio.c"
        var $1=$self_addr; //@line 820 "bufferedio.c"
        var $2=$1+12; //@line 820 "bufferedio.c"
        var $3=HEAP[$2]; //@line 820 "bufferedio.c"
        var $4=($3) <= 0; //@line 820 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 820 "bufferedio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 820 "bufferedio.c"
        var $6=$5+16; //@line 820 "bufferedio.c"
        var $7=HEAP[$6]; //@line 820 "bufferedio.c"
        var $8=($7)!=0; //@line 820 "bufferedio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 820 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 820 "bufferedio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str11); //@line 820 "bufferedio.c"
        __label__ = 4; break; //@line 820 "bufferedio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str12); //@line 820 "bufferedio.c"
        __label__ = 4; break; //@line 820 "bufferedio.c"
      case 4: // $bb3
        $0=0; //@line 820 "bufferedio.c"
        __label__ = 33; break; //@line 820 "bufferedio.c"
      case 5: // $bb4
        var $10=$args_addr; //@line 821 "bufferedio.c"
        var $11=__PyArg_ParseTuple_SizeT($10, __str24, allocate([$n,0,0,0], ["i32*",0,0,0], ALLOC_STACK)); //@line 821 "bufferedio.c"
        var $12=($11)==0; //@line 821 "bufferedio.c"
        if ($12) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 821 "bufferedio.c"
      case 6: // $bb5
        $0=0; //@line 822 "bufferedio.c"
        __label__ = 33; break; //@line 822 "bufferedio.c"
      case 7: // $bb6
        var $13=HEAP[$n]; //@line 825 "bufferedio.c"
        var $14=($13) < 0; //@line 825 "bufferedio.c"
        if ($14) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 825 "bufferedio.c"
      case 8: // $bb7
        var $15=HEAP[_PyExc_ValueError]; //@line 826 "bufferedio.c"
        _PyErr_SetString($15, __str25); //@line 826 "bufferedio.c"
        $0=0; //@line 828 "bufferedio.c"
        __label__ = 33; break; //@line 828 "bufferedio.c"
      case 9: // $bb8
        var $16=HEAP[$n]; //@line 830 "bufferedio.c"
        var $17=($16)==0; //@line 830 "bufferedio.c"
        if ($17) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 830 "bufferedio.c"
      case 10: // $bb9
        var $18=_PyString_FromStringAndSize(0, 0); //@line 831 "bufferedio.c"
        $0=$18; //@line 831 "bufferedio.c"
        __label__ = 33; break; //@line 831 "bufferedio.c"
      case 11: // $bb10
        var $19=$self_addr; //@line 836 "bufferedio.c"
        var $20=$19+24; //@line 836 "bufferedio.c"
        var $21=HEAP[$20]; //@line 836 "bufferedio.c"
        var $22=($21)!=0; //@line 836 "bufferedio.c"
        if ($22) { __label__ = 12; break; } else { __label__ = 16; break; } //@line 836 "bufferedio.c"
      case 12: // $bb11
        var $23=$self_addr; //@line 837 "bufferedio.c"
        var $24=__bufferedwriter_flush_unlocked($23, 1); //@line 837 "bufferedio.c"
        $res=$24; //@line 837 "bufferedio.c"
        var $25=$res; //@line 838 "bufferedio.c"
        var $26=($25)==0; //@line 838 "bufferedio.c"
        if ($26) { __label__ = 32; break; } else { __label__ = 13; break; } //@line 838 "bufferedio.c"
      case 13: // $bb12
        var $27=$res; //@line 840 "bufferedio.c"
        var $28=($27)!=0; //@line 840 "bufferedio.c"
        if ($28) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 840 "bufferedio.c"
      case 14: // $bb13
        var $29=$res; //@line 840 "bufferedio.c"
        $_py_tmp=$29; //@line 840 "bufferedio.c"
        $res=0; //@line 840 "bufferedio.c"
        var $30=$_py_tmp; //@line 840 "bufferedio.c"
        var $31=$30; //@line 840 "bufferedio.c"
        var $32=HEAP[$31]; //@line 840 "bufferedio.c"
        var $33=($32) - 1; //@line 840 "bufferedio.c"
        var $34=$_py_tmp; //@line 840 "bufferedio.c"
        var $35=$34; //@line 840 "bufferedio.c"
        HEAP[$35]=$33; //@line 840 "bufferedio.c"
        var $36=$_py_tmp; //@line 840 "bufferedio.c"
        var $37=$36; //@line 840 "bufferedio.c"
        var $38=HEAP[$37]; //@line 840 "bufferedio.c"
        var $39=($38)==0; //@line 840 "bufferedio.c"
        if ($39) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 840 "bufferedio.c"
      case 15: // $bb14
        var $40=$_py_tmp; //@line 840 "bufferedio.c"
        var $41=$40+4; //@line 840 "bufferedio.c"
        var $42=HEAP[$41]; //@line 840 "bufferedio.c"
        var $43=$42+24; //@line 840 "bufferedio.c"
        var $44=HEAP[$43]; //@line 840 "bufferedio.c"
        var $45=$_py_tmp; //@line 840 "bufferedio.c"
        FUNCTION_TABLE[$44]($45); //@line 840 "bufferedio.c"
        __label__ = 16; break; //@line 840 "bufferedio.c"
      case 16: // $bb15
        var $46=$self_addr; //@line 851 "bufferedio.c"
        var $47=$46+20; //@line 851 "bufferedio.c"
        var $48=HEAP[$47]; //@line 851 "bufferedio.c"
        var $49=($48)==0; //@line 851 "bufferedio.c"
        if ($49) { __label__ = 19; break; } else { __label__ = 17; break; } //@line 851 "bufferedio.c"
      case 17: // $bb16
        var $50=$self_addr; //@line 851 "bufferedio.c"
        var $51=$50+20; //@line 851 "bufferedio.c"
        var $52=HEAP[$51]; //@line 851 "bufferedio.c"
        var $53=($52)==0; //@line 851 "bufferedio.c"
        if ($53) { __label__ = 19; break; } else { __label__ = 18; break; } //@line 851 "bufferedio.c"
      case 18: // $bb17
        var $54=$self_addr; //@line 851 "bufferedio.c"
        var $55=$54+60; //@line 851 "bufferedio.c"
        var $56=HEAP[$55]; //@line 851 "bufferedio.c"
        var $57=($56)==-1; //@line 851 "bufferedio.c"
        if ($57) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 851 "bufferedio.c"
      case 19: // $bb20_thread
        $iftmp_104=0; //@line 851 "bufferedio.c"
        $have=0; //@line 851 "bufferedio.c"
        __label__ = 25; break;
      case 20: // $bb20
        var $58=$self_addr; //@line 851 "bufferedio.c"
        var $59=$58+60; //@line 851 "bufferedio.c"
        var $60=HEAP[$59]; //@line 851 "bufferedio.c"
        var $61=((($60)) & 4294967295); //@line 851 "bufferedio.c"
        var $62=$self_addr; //@line 851 "bufferedio.c"
        var $63=$62+44; //@line 851 "bufferedio.c"
        var $64=HEAP[$63]; //@line 851 "bufferedio.c"
        var $65=((($64)) & 4294967295); //@line 851 "bufferedio.c"
        var $66=($61) - ($65); //@line 851 "bufferedio.c"
        $iftmp_104=$66; //@line 851 "bufferedio.c"
        $have=$66; //@line 851 "bufferedio.c"
        var $67=($66) > 0; //@line 852 "bufferedio.c"
        if ($67) { __label__ = 21; break; } else { __label__ = 25; break; } //@line 852 "bufferedio.c"
      case 21: // $bb21
        var $68=HEAP[$n]; //@line 853 "bufferedio.c"
        var $69=$have; //@line 853 "bufferedio.c"
        var $70=($68) > ($69); //@line 853 "bufferedio.c"
        if ($70) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 853 "bufferedio.c"
      case 22: // $bb22
        var $71=$have; //@line 854 "bufferedio.c"
        HEAP[$n]=$71; //@line 854 "bufferedio.c"
        __label__ = 23; break; //@line 854 "bufferedio.c"
      case 23: // $bb23
        var $72=HEAP[$n]; //@line 855 "bufferedio.c"
        var $73=$self_addr; //@line 855 "bufferedio.c"
        var $74=$73+40; //@line 855 "bufferedio.c"
        var $75=HEAP[$74]; //@line 855 "bufferedio.c"
        var $76=$self_addr; //@line 855 "bufferedio.c"
        var $77=$76+44; //@line 855 "bufferedio.c"
        var $78=HEAP[$77]; //@line 855 "bufferedio.c"
        var $79=((($78)) & 4294967295); //@line 855 "bufferedio.c"
        var $80=$75+$79; //@line 855 "bufferedio.c"
        var $81=_PyString_FromStringAndSize($80, $72); //@line 855 "bufferedio.c"
        $res=$81; //@line 855 "bufferedio.c"
        var $82=($81)==0; //@line 856 "bufferedio.c"
        if ($82) { __label__ = 32; break; } else { __label__ = 24; break; } //@line 856 "bufferedio.c"
      case 24: // $bb24
        var $83=$self_addr; //@line 858 "bufferedio.c"
        var $84=$83+44; //@line 858 "bufferedio.c"
        var $85=HEAP[$84]; //@line 858 "bufferedio.c"
        var $86=HEAP[$n]; //@line 858 "bufferedio.c"
        var $87=($86); //@line 858 "bufferedio.c"
        var $88=($87) + ($85); //@line 858 "bufferedio.c"
        var $89=$self_addr; //@line 858 "bufferedio.c"
        var $90=$89+44; //@line 858 "bufferedio.c"
        HEAP[$90]=$88; //@line 858 "bufferedio.c"
        __label__ = 32; break; //@line 858 "bufferedio.c"
      case 25: // $bb25
        var $91=$self_addr; //@line 863 "bufferedio.c"
        __bufferedreader_reset_buf($91); //@line 863 "bufferedio.c"
        var $92=$self_addr; //@line 864 "bufferedio.c"
        var $93=__bufferedreader_fill_buffer($92); //@line 864 "bufferedio.c"
        $r=$93; //@line 864 "bufferedio.c"
        var $94=($93)==-1; //@line 865 "bufferedio.c"
        if ($94) { __label__ = 32; break; } else { __label__ = 26; break; } //@line 865 "bufferedio.c"
      case 26: // $bb26
        var $95=$r; //@line 867 "bufferedio.c"
        var $96=($95)==-2; //@line 867 "bufferedio.c"
        if ($96) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 867 "bufferedio.c"
      case 27: // $bb27
        $r=0; //@line 868 "bufferedio.c"
        __label__ = 28; break; //@line 868 "bufferedio.c"
      case 28: // $bb28
        var $97=HEAP[$n]; //@line 869 "bufferedio.c"
        var $98=$r; //@line 869 "bufferedio.c"
        var $99=($97) > ($98); //@line 869 "bufferedio.c"
        if ($99) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 869 "bufferedio.c"
      case 29: // $bb29
        var $100=$r; //@line 870 "bufferedio.c"
        HEAP[$n]=$100; //@line 870 "bufferedio.c"
        __label__ = 30; break; //@line 870 "bufferedio.c"
      case 30: // $bb30
        var $101=HEAP[$n]; //@line 871 "bufferedio.c"
        var $102=$self_addr; //@line 871 "bufferedio.c"
        var $103=$102+40; //@line 871 "bufferedio.c"
        var $104=HEAP[$103]; //@line 871 "bufferedio.c"
        var $105=_PyString_FromStringAndSize($104, $101); //@line 871 "bufferedio.c"
        $res=$105; //@line 871 "bufferedio.c"
        var $106=($105)==0; //@line 872 "bufferedio.c"
        if ($106) { __label__ = 32; break; } else { __label__ = 31; break; } //@line 872 "bufferedio.c"
      case 31: // $bb31
        var $107=HEAP[$n]; //@line 874 "bufferedio.c"
        var $108=($107); //@line 874 "bufferedio.c"
        var $109=$self_addr; //@line 874 "bufferedio.c"
        var $110=$109+44; //@line 874 "bufferedio.c"
        HEAP[$110]=$108; //@line 874 "bufferedio.c"
        __label__ = 32; break; //@line 876 "bufferedio.c"
      case 32: // $end
        var $111=$res; //@line 878 "bufferedio.c"
        $0=$111; //@line 878 "bufferedio.c"
        __label__ = 33; break; //@line 878 "bufferedio.c"
      case 33: // $bb32
        var $112=$0; //@line 820 "bufferedio.c"
        $retval=$112; //@line 820 "bufferedio.c"
        var $retval33=$retval; //@line 820 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval33; //@line 820 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_readinto($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $res;
        $self_addr=$self;
        $args_addr=$args;
        $res=0; //@line 884 "bufferedio.c"
        var $1=$self_addr; //@line 886 "bufferedio.c"
        var $2=$1+12; //@line 886 "bufferedio.c"
        var $3=HEAP[$2]; //@line 886 "bufferedio.c"
        var $4=($3) <= 0; //@line 886 "bufferedio.c"
        var $5=$self_addr; //@line 886 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 886 "bufferedio.c"
      case 1: // $bb
        var $6=$5+16; //@line 886 "bufferedio.c"
        var $7=HEAP[$6]; //@line 886 "bufferedio.c"
        var $8=($7)!=0; //@line 886 "bufferedio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 886 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 886 "bufferedio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str11); //@line 886 "bufferedio.c"
        __label__ = 4; break; //@line 886 "bufferedio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str12); //@line 886 "bufferedio.c"
        __label__ = 4; break; //@line 886 "bufferedio.c"
      case 4: // $bb3
        $0=0; //@line 886 "bufferedio.c"
        __label__ = 11; break; //@line 886 "bufferedio.c"
      case 5: // $bb4
        var $10=$5+24; //@line 889 "bufferedio.c"
        var $11=HEAP[$10]; //@line 889 "bufferedio.c"
        var $12=($11)!=0; //@line 889 "bufferedio.c"
        if ($12) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 889 "bufferedio.c"
      case 6: // $bb5
        var $13=$self_addr; //@line 892 "bufferedio.c"
        var $14=__bufferedwriter_flush_unlocked($13, 0); //@line 892 "bufferedio.c"
        $res=$14; //@line 892 "bufferedio.c"
        var $15=$res; //@line 894 "bufferedio.c"
        var $16=($15)==0; //@line 894 "bufferedio.c"
        if ($16) { __label__ = 10; break; } else { __label__ = 7; break; } //@line 894 "bufferedio.c"
      case 7: // $bb6
        var $17=$res; //@line 896 "bufferedio.c"
        var $18=$17; //@line 896 "bufferedio.c"
        var $19=HEAP[$18]; //@line 896 "bufferedio.c"
        var $20=($19) - 1; //@line 896 "bufferedio.c"
        var $21=$res; //@line 896 "bufferedio.c"
        var $22=$21; //@line 896 "bufferedio.c"
        HEAP[$22]=$20; //@line 896 "bufferedio.c"
        var $23=$res; //@line 896 "bufferedio.c"
        var $24=$23; //@line 896 "bufferedio.c"
        var $25=HEAP[$24]; //@line 896 "bufferedio.c"
        var $26=($25)==0; //@line 896 "bufferedio.c"
        if ($26) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 896 "bufferedio.c"
      case 8: // $bb7
        var $27=$res; //@line 896 "bufferedio.c"
        var $28=$27+4; //@line 896 "bufferedio.c"
        var $29=HEAP[$28]; //@line 896 "bufferedio.c"
        var $30=$29+24; //@line 896 "bufferedio.c"
        var $31=HEAP[$30]; //@line 896 "bufferedio.c"
        var $32=$res; //@line 896 "bufferedio.c"
        FUNCTION_TABLE[$31]($32); //@line 896 "bufferedio.c"
        __label__ = 9; break; //@line 896 "bufferedio.c"
      case 9: // $bb8
        var $33=$self_addr; //@line 898 "bufferedio.c"
        var $34=$33; //@line 898 "bufferedio.c"
        var $35=$args_addr; //@line 898 "bufferedio.c"
        var $36=_bufferediobase_readinto($34, $35); //@line 898 "bufferedio.c"
        $res=$36; //@line 898 "bufferedio.c"
        __label__ = 10; break; //@line 900 "bufferedio.c"
      case 10: // $end
        var $37=$res; //@line 901 "bufferedio.c"
        $0=$37; //@line 901 "bufferedio.c"
        __label__ = 11; break; //@line 901 "bufferedio.c"
      case 11: // $bb9
        var $38=$0; //@line 886 "bufferedio.c"
        $retval=$38; //@line 886 "bufferedio.c"
        var $retval10=$retval; //@line 886 "bufferedio.c"
        ;
        return $retval10; //@line 886 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __buffered_readline($self, $limit) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $limit_addr;
        var $retval;
        var $iftmp_116;
        var $0;
        var $iftmp_114;
        var $res;
        var $chunks;
        var $n;
        var $written;
        var $start;
        var $s;
        var $end;
        var $_py_tmp;
        var $_py_tmp31;
        var $_py_tmp36;
        var $_py_tmp57;
        var $_py_tmp62;
        var $_py_tmp70;
        var $_py_tmp75;
        $self_addr=$self;
        $limit_addr=$limit;
        $res=0; //@line 907 "bufferedio.c"
        $chunks=0; //@line 908 "bufferedio.c"
        $written=0; //@line 909 "bufferedio.c"
        var $1=$self_addr; //@line 912 "bufferedio.c"
        var $2=$1+28; //@line 912 "bufferedio.c"
        var $3=HEAP[$2]; //@line 912 "bufferedio.c"
        var $4=($3)!=0; //@line 912 "bufferedio.c"
        var $5=$self_addr; //@line 912 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 912 "bufferedio.c"
      case 1: // $bb
        var $6=$5+8; //@line 912 "bufferedio.c"
        var $7=HEAP[$6]; //@line 912 "bufferedio.c"
        var $8=__PyFileIO_closed($7); //@line 912 "bufferedio.c"
        var $9=($8)!=0; //@line 912 "bufferedio.c"
        var $10=($9); //@line 912 "bufferedio.c"
        $iftmp_114=$10; //@line 912 "bufferedio.c"
        __lastLabel__ = 1; __label__ = 3; break; //@line 912 "bufferedio.c"
      case 2: // $bb1
        var $11=_buffered_closed($5); //@line 912 "bufferedio.c"
        var $12=($11)!=0; //@line 912 "bufferedio.c"
        var $13=($12); //@line 912 "bufferedio.c"
        $iftmp_114=$13; //@line 912 "bufferedio.c"
        __lastLabel__ = 2; __label__ = 3; break; //@line 912 "bufferedio.c"
      case 3: // $bb2
        var $14=__lastLabel__ == 2 ? $13 : ($10);
        var $toBool=($14)!=0; //@line 912 "bufferedio.c"
        if ($toBool) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 912 "bufferedio.c"
      case 4: // $bb3
        var $15=HEAP[_PyExc_ValueError]; //@line 912 "bufferedio.c"
        _PyErr_SetString($15, __str26); //@line 912 "bufferedio.c"
        $0=0; //@line 912 "bufferedio.c"
        __label__ = 71; break; //@line 912 "bufferedio.c"
      case 5: // $bb4
        var $16=$self_addr; //@line 917 "bufferedio.c"
        var $17=$16+20; //@line 917 "bufferedio.c"
        var $18=HEAP[$17]; //@line 917 "bufferedio.c"
        var $19=($18)==0; //@line 917 "bufferedio.c"
        if ($19) { __label__ = 9; break; } else { __label__ = 6; break; } //@line 917 "bufferedio.c"
      case 6: // $bb5
        var $20=$self_addr; //@line 917 "bufferedio.c"
        var $21=$20+20; //@line 917 "bufferedio.c"
        var $22=HEAP[$21]; //@line 917 "bufferedio.c"
        var $23=($22)==0; //@line 917 "bufferedio.c"
        if ($23) { __label__ = 9; break; } else { __label__ = 7; break; } //@line 917 "bufferedio.c"
      case 7: // $bb6
        var $24=$self_addr; //@line 917 "bufferedio.c"
        var $25=$24+60; //@line 917 "bufferedio.c"
        var $26=HEAP[$25]; //@line 917 "bufferedio.c"
        var $27=($26)==-1; //@line 917 "bufferedio.c"
        if ($27) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 917 "bufferedio.c"
      case 8: // $bb7
        var $28=$self_addr; //@line 917 "bufferedio.c"
        var $29=$28+60; //@line 917 "bufferedio.c"
        var $30=HEAP[$29]; //@line 917 "bufferedio.c"
        var $31=((($30)) & 4294967295); //@line 917 "bufferedio.c"
        var $32=$self_addr; //@line 917 "bufferedio.c"
        var $33=$32+44; //@line 917 "bufferedio.c"
        var $34=HEAP[$33]; //@line 917 "bufferedio.c"
        var $35=((($34)) & 4294967295); //@line 917 "bufferedio.c"
        var $36=($31) - ($35); //@line 917 "bufferedio.c"
        $iftmp_116=$36; //@line 917 "bufferedio.c"
        __label__ = 10; break; //@line 917 "bufferedio.c"
      case 9: // $bb8
        $iftmp_116=0; //@line 917 "bufferedio.c"
        __label__ = 10; break; //@line 917 "bufferedio.c"
      case 10: // $bb9
        var $37=$iftmp_116; //@line 917 "bufferedio.c"
        $n=$37; //@line 917 "bufferedio.c"
        var $38=$limit_addr; //@line 918 "bufferedio.c"
        var $39=($38) >= 0; //@line 918 "bufferedio.c"
        if ($39) { __label__ = 11; break; } else { __label__ = 13; break; } //@line 918 "bufferedio.c"
      case 11: // $bb10
        var $40=$n; //@line 918 "bufferedio.c"
        var $41=$limit_addr; //@line 918 "bufferedio.c"
        var $42=($40) > ($41); //@line 918 "bufferedio.c"
        if ($42) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 918 "bufferedio.c"
      case 12: // $bb11
        var $43=$limit_addr; //@line 919 "bufferedio.c"
        $n=$43; //@line 919 "bufferedio.c"
        __label__ = 13; break; //@line 919 "bufferedio.c"
      case 13: // $bb12
        var $44=$self_addr; //@line 920 "bufferedio.c"
        var $45=$44+40; //@line 920 "bufferedio.c"
        var $46=HEAP[$45]; //@line 920 "bufferedio.c"
        var $47=$self_addr; //@line 920 "bufferedio.c"
        var $48=$47+44; //@line 920 "bufferedio.c"
        var $49=HEAP[$48]; //@line 920 "bufferedio.c"
        var $50=((($49)) & 4294967295); //@line 920 "bufferedio.c"
        var $51=$46+$50; //@line 920 "bufferedio.c"
        $start=$51; //@line 920 "bufferedio.c"
        var $52=$n; //@line 921 "bufferedio.c"
        var $53=$start; //@line 921 "bufferedio.c"
        var $54=_memchr($53, 10, $52); //@line 921 "bufferedio.c"
        $s=$54; //@line 921 "bufferedio.c"
        var $55=($54)!=0; //@line 922 "bufferedio.c"
        if ($55) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 922 "bufferedio.c"
      case 14: // $bb13
        var $56=$s; //@line 923 "bufferedio.c"
        var $57=($56); //@line 923 "bufferedio.c"
        var $58=$start; //@line 923 "bufferedio.c"
        var $59=($58); //@line 923 "bufferedio.c"
        var $_neg=0 - ($59);
        var $60=($57) + 1;
        var $61=($60) + ($_neg); //@line 923 "bufferedio.c"
        var $62=$start; //@line 923 "bufferedio.c"
        var $63=_PyString_FromStringAndSize($62, $61); //@line 923 "bufferedio.c"
        $res=$63; //@line 923 "bufferedio.c"
        var $64=$res; //@line 924 "bufferedio.c"
        var $65=($64)!=0; //@line 924 "bufferedio.c"
        if ($65) { __label__ = 15; break; } else { __label__ = 67; break; } //@line 924 "bufferedio.c"
      case 15: // $bb14
        var $66=$self_addr; //@line 925 "bufferedio.c"
        var $67=$66+44; //@line 925 "bufferedio.c"
        var $68=HEAP[$67]; //@line 925 "bufferedio.c"
        var $69=$s; //@line 925 "bufferedio.c"
        var $70=($69); //@line 925 "bufferedio.c"
        var $71=$start; //@line 925 "bufferedio.c"
        var $72=($71); //@line 925 "bufferedio.c"
        var $_neg2=0 - ($72);
        var $73=($70) + 1;
        var $74=($73) + ($_neg2); //@line 925 "bufferedio.c"
        var $75=($74); //@line 925 "bufferedio.c"
        var $76=($75) + ($68); //@line 925 "bufferedio.c"
        var $77=$self_addr; //@line 925 "bufferedio.c"
        var $78=$77+44; //@line 925 "bufferedio.c"
        HEAP[$78]=$76; //@line 925 "bufferedio.c"
        __label__ = 67; break; //@line 925 "bufferedio.c"
      case 16: // $bb16
        var $79=$n; //@line 928 "bufferedio.c"
        var $80=$limit_addr; //@line 928 "bufferedio.c"
        var $81=($79)==($80); //@line 928 "bufferedio.c"
        if ($81) { __label__ = 17; break; } else { __label__ = 19; break; } //@line 928 "bufferedio.c"
      case 17: // $bb17
        var $82=$start; //@line 929 "bufferedio.c"
        var $83=$n; //@line 929 "bufferedio.c"
        var $84=_PyString_FromStringAndSize($82, $83); //@line 929 "bufferedio.c"
        $res=$84; //@line 929 "bufferedio.c"
        var $85=$res; //@line 930 "bufferedio.c"
        var $86=($85)!=0; //@line 930 "bufferedio.c"
        if ($86) { __label__ = 18; break; } else { __label__ = 67; break; } //@line 930 "bufferedio.c"
      case 18: // $bb18
        var $87=$self_addr; //@line 931 "bufferedio.c"
        var $88=$87+44; //@line 931 "bufferedio.c"
        var $89=HEAP[$88]; //@line 931 "bufferedio.c"
        var $90=$n; //@line 931 "bufferedio.c"
        var $91=($90); //@line 931 "bufferedio.c"
        var $92=($91) + ($89); //@line 931 "bufferedio.c"
        var $93=$self_addr; //@line 931 "bufferedio.c"
        var $94=$93+44; //@line 931 "bufferedio.c"
        HEAP[$94]=$92; //@line 931 "bufferedio.c"
        __label__ = 67; break; //@line 931 "bufferedio.c"
      case 19: // $bb20
        var $95=$self_addr; //@line 939 "bufferedio.c"
        var $96=$95+24; //@line 939 "bufferedio.c"
        var $97=HEAP[$96]; //@line 939 "bufferedio.c"
        var $98=($97)!=0; //@line 939 "bufferedio.c"
        if ($98) { __label__ = 20; break; } else { __label__ = 24; break; } //@line 939 "bufferedio.c"
      case 20: // $bb21
        var $99=$self_addr; //@line 940 "bufferedio.c"
        var $100=__bufferedwriter_flush_unlocked($99, 1); //@line 940 "bufferedio.c"
        $res=$100; //@line 940 "bufferedio.c"
        var $101=$res; //@line 941 "bufferedio.c"
        var $102=($101)==0; //@line 941 "bufferedio.c"
        if ($102) { __label__ = 67; break; } else { __label__ = 21; break; } //@line 941 "bufferedio.c"
      case 21: // $bb22
        var $103=$res; //@line 943 "bufferedio.c"
        var $104=($103)!=0; //@line 943 "bufferedio.c"
        if ($104) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 943 "bufferedio.c"
      case 22: // $bb23
        var $105=$res; //@line 943 "bufferedio.c"
        $_py_tmp=$105; //@line 943 "bufferedio.c"
        $res=0; //@line 943 "bufferedio.c"
        var $106=$_py_tmp; //@line 943 "bufferedio.c"
        var $107=$106; //@line 943 "bufferedio.c"
        var $108=HEAP[$107]; //@line 943 "bufferedio.c"
        var $109=($108) - 1; //@line 943 "bufferedio.c"
        var $110=$_py_tmp; //@line 943 "bufferedio.c"
        var $111=$110; //@line 943 "bufferedio.c"
        HEAP[$111]=$109; //@line 943 "bufferedio.c"
        var $112=$_py_tmp; //@line 943 "bufferedio.c"
        var $113=$112; //@line 943 "bufferedio.c"
        var $114=HEAP[$113]; //@line 943 "bufferedio.c"
        var $115=($114)==0; //@line 943 "bufferedio.c"
        if ($115) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 943 "bufferedio.c"
      case 23: // $bb24
        var $116=$_py_tmp; //@line 943 "bufferedio.c"
        var $117=$116+4; //@line 943 "bufferedio.c"
        var $118=HEAP[$117]; //@line 943 "bufferedio.c"
        var $119=$118+24; //@line 943 "bufferedio.c"
        var $120=HEAP[$119]; //@line 943 "bufferedio.c"
        var $121=$_py_tmp; //@line 943 "bufferedio.c"
        FUNCTION_TABLE[$120]($121); //@line 943 "bufferedio.c"
        __label__ = 24; break; //@line 943 "bufferedio.c"
      case 24: // $bb25
        var $122=_PyList_New(0); //@line 945 "bufferedio.c"
        $chunks=$122; //@line 945 "bufferedio.c"
        var $123=($122)==0; //@line 946 "bufferedio.c"
        if ($123) { __label__ = 70; break; } else { __label__ = 25; break; } //@line 946 "bufferedio.c"
      case 25: // $bb26
        var $124=$n; //@line 948 "bufferedio.c"
        var $125=($124) > 0; //@line 948 "bufferedio.c"
        if ($125) { __label__ = 26; break; } else { __label__ = 36; break; } //@line 948 "bufferedio.c"
      case 26: // $bb27
        var $126=$start; //@line 949 "bufferedio.c"
        var $127=$n; //@line 949 "bufferedio.c"
        var $128=_PyString_FromStringAndSize($126, $127); //@line 949 "bufferedio.c"
        $res=$128; //@line 949 "bufferedio.c"
        var $129=$res; //@line 950 "bufferedio.c"
        var $130=($129)==0; //@line 950 "bufferedio.c"
        if ($130) { __label__ = 67; break; } else { __label__ = 27; break; } //@line 950 "bufferedio.c"
      case 27: // $bb28
        var $131=$chunks; //@line 952 "bufferedio.c"
        var $132=$res; //@line 952 "bufferedio.c"
        var $133=_PyList_Append($131, $132); //@line 952 "bufferedio.c"
        var $134=($133) < 0; //@line 952 "bufferedio.c"
        var $135=$res; //@line 953 "bufferedio.c"
        var $136=($135)!=0; //@line 953 "bufferedio.c"
        if ($134) { __label__ = 28; break; } else { __label__ = 31; break; } //@line 952 "bufferedio.c"
      case 28: // $bb29
        if ($136) { __label__ = 29; break; } else { __label__ = 67; break; } //@line 953 "bufferedio.c"
      case 29: // $bb30
        var $137=$res; //@line 953 "bufferedio.c"
        $_py_tmp31=$137; //@line 953 "bufferedio.c"
        $res=0; //@line 953 "bufferedio.c"
        var $138=$_py_tmp31; //@line 953 "bufferedio.c"
        var $139=$138; //@line 953 "bufferedio.c"
        var $140=HEAP[$139]; //@line 953 "bufferedio.c"
        var $141=($140) - 1; //@line 953 "bufferedio.c"
        var $142=$_py_tmp31; //@line 953 "bufferedio.c"
        var $143=$142; //@line 953 "bufferedio.c"
        HEAP[$143]=$141; //@line 953 "bufferedio.c"
        var $144=$_py_tmp31; //@line 953 "bufferedio.c"
        var $145=$144; //@line 953 "bufferedio.c"
        var $146=HEAP[$145]; //@line 953 "bufferedio.c"
        var $147=($146)==0; //@line 953 "bufferedio.c"
        if ($147) { __label__ = 30; break; } else { __label__ = 67; break; } //@line 953 "bufferedio.c"
      case 30: // $bb32
        var $148=$_py_tmp31; //@line 953 "bufferedio.c"
        var $149=$148+4; //@line 953 "bufferedio.c"
        var $150=HEAP[$149]; //@line 953 "bufferedio.c"
        var $151=$150+24; //@line 953 "bufferedio.c"
        var $152=HEAP[$151]; //@line 953 "bufferedio.c"
        var $153=$_py_tmp31; //@line 953 "bufferedio.c"
        FUNCTION_TABLE[$152]($153); //@line 953 "bufferedio.c"
        __label__ = 67; break; //@line 953 "bufferedio.c"
      case 31: // $bb34
        if ($136) { __label__ = 32; break; } else { __label__ = 34; break; } //@line 956 "bufferedio.c"
      case 32: // $bb35
        var $154=$res; //@line 956 "bufferedio.c"
        $_py_tmp36=$154; //@line 956 "bufferedio.c"
        $res=0; //@line 956 "bufferedio.c"
        var $155=$_py_tmp36; //@line 956 "bufferedio.c"
        var $156=$155; //@line 956 "bufferedio.c"
        var $157=HEAP[$156]; //@line 956 "bufferedio.c"
        var $158=($157) - 1; //@line 956 "bufferedio.c"
        var $159=$_py_tmp36; //@line 956 "bufferedio.c"
        var $160=$159; //@line 956 "bufferedio.c"
        HEAP[$160]=$158; //@line 956 "bufferedio.c"
        var $161=$_py_tmp36; //@line 956 "bufferedio.c"
        var $162=$161; //@line 956 "bufferedio.c"
        var $163=HEAP[$162]; //@line 956 "bufferedio.c"
        var $164=($163)==0; //@line 956 "bufferedio.c"
        if ($164) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 956 "bufferedio.c"
      case 33: // $bb37
        var $165=$_py_tmp36; //@line 956 "bufferedio.c"
        var $166=$165+4; //@line 956 "bufferedio.c"
        var $167=HEAP[$166]; //@line 956 "bufferedio.c"
        var $168=$167+24; //@line 956 "bufferedio.c"
        var $169=HEAP[$168]; //@line 956 "bufferedio.c"
        var $170=$_py_tmp36; //@line 956 "bufferedio.c"
        FUNCTION_TABLE[$169]($170); //@line 956 "bufferedio.c"
        __label__ = 34; break; //@line 956 "bufferedio.c"
      case 34: // $bb38
        var $171=$written; //@line 957 "bufferedio.c"
        var $172=$n; //@line 957 "bufferedio.c"
        var $173=($172) + ($171); //@line 957 "bufferedio.c"
        $written=$173; //@line 957 "bufferedio.c"
        var $174=$limit_addr; //@line 958 "bufferedio.c"
        var $175=($174) >= 0; //@line 958 "bufferedio.c"
        if ($175) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 958 "bufferedio.c"
      case 35: // $bb39
        var $176=$limit_addr; //@line 959 "bufferedio.c"
        var $177=$n; //@line 959 "bufferedio.c"
        var $178=($176) - ($177); //@line 959 "bufferedio.c"
        $limit_addr=$178; //@line 959 "bufferedio.c"
        __label__ = 36; break; //@line 959 "bufferedio.c"
      case 36: // $bb40
        var $179=$self_addr; //@line 963 "bufferedio.c"
        __bufferedreader_reset_buf($179); //@line 963 "bufferedio.c"
        var $180=$self_addr; //@line 964 "bufferedio.c"
        var $181=__bufferedreader_fill_buffer($180); //@line 964 "bufferedio.c"
        $n=$181; //@line 964 "bufferedio.c"
        var $182=($181)==-1; //@line 965 "bufferedio.c"
        if ($182) { __label__ = 67; break; } else { __label__ = 37; break; } //@line 965 "bufferedio.c"
      case 37: // $bb41
        var $183=$n; //@line 967 "bufferedio.c"
        var $184=($183) <= 0; //@line 967 "bufferedio.c"
        if ($184) { __label__ = 58; break; } else { __label__ = 38; break; } //@line 967 "bufferedio.c"
      case 38: // $bb42
        var $185=$limit_addr; //@line 969 "bufferedio.c"
        var $186=($185) >= 0; //@line 969 "bufferedio.c"
        if ($186) { __label__ = 39; break; } else { __label__ = 41; break; } //@line 969 "bufferedio.c"
      case 39: // $bb43
        var $187=$n; //@line 969 "bufferedio.c"
        var $188=$limit_addr; //@line 969 "bufferedio.c"
        var $189=($187) > ($188); //@line 969 "bufferedio.c"
        if ($189) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 969 "bufferedio.c"
      case 40: // $bb44
        var $190=$limit_addr; //@line 970 "bufferedio.c"
        $n=$190; //@line 970 "bufferedio.c"
        __label__ = 41; break; //@line 970 "bufferedio.c"
      case 41: // $bb45
        var $191=$self_addr; //@line 971 "bufferedio.c"
        var $192=$191+40; //@line 971 "bufferedio.c"
        var $193=HEAP[$192]; //@line 971 "bufferedio.c"
        $start=$193; //@line 971 "bufferedio.c"
        var $194=$start; //@line 972 "bufferedio.c"
        var $195=$n; //@line 972 "bufferedio.c"
        var $196=$194+$195; //@line 972 "bufferedio.c"
        $end=$196; //@line 972 "bufferedio.c"
        var $197=$start; //@line 973 "bufferedio.c"
        $s=$197; //@line 973 "bufferedio.c"
        __label__ = 45; break; //@line 973 "bufferedio.c"
      case 42: // $bb46
        var $198=$s; //@line 975 "bufferedio.c"
        var $199=HEAP[$198]; //@line 975 "bufferedio.c"
        var $200=($199)==10; //@line 975 "bufferedio.c"
        var $201=($200); //@line 975 "bufferedio.c"
        var $202=$s; //@line 975 "bufferedio.c"
        var $203=$202+1; //@line 975 "bufferedio.c"
        $s=$203; //@line 975 "bufferedio.c"
        var $toBool47=($201)!=0; //@line 975 "bufferedio.c"
        if ($toBool47) { __label__ = 43; break; } else { __label__ = 45; break; } //@line 975 "bufferedio.c"
      case 43: // $bb48
        var $204=$s; //@line 976 "bufferedio.c"
        var $205=($204); //@line 976 "bufferedio.c"
        var $206=$start; //@line 976 "bufferedio.c"
        var $207=($206); //@line 976 "bufferedio.c"
        var $208=($205) - ($207); //@line 976 "bufferedio.c"
        var $209=$start; //@line 976 "bufferedio.c"
        var $210=_PyString_FromStringAndSize($209, $208); //@line 976 "bufferedio.c"
        $res=$210; //@line 976 "bufferedio.c"
        var $211=$res; //@line 977 "bufferedio.c"
        var $212=($211)==0; //@line 977 "bufferedio.c"
        if ($212) { __label__ = 67; break; } else { __label__ = 44; break; } //@line 977 "bufferedio.c"
      case 44: // $bb49
        var $213=$s; //@line 979 "bufferedio.c"
        var $214=($213); //@line 979 "bufferedio.c"
        var $215=$start; //@line 979 "bufferedio.c"
        var $216=($215); //@line 979 "bufferedio.c"
        var $217=($214) - ($216); //@line 979 "bufferedio.c"
        var $218=($217); //@line 979 "bufferedio.c"
        var $219=$self_addr; //@line 979 "bufferedio.c"
        var $220=$219+44; //@line 979 "bufferedio.c"
        HEAP[$220]=$218; //@line 979 "bufferedio.c"
        __label__ = 58; break; //@line 979 "bufferedio.c"
      case 45: // $bb50
        var $221=$s; //@line 974 "bufferedio.c"
        var $222=$end; //@line 974 "bufferedio.c"
        var $223=($221) < ($222); //@line 974 "bufferedio.c"
        if ($223) { __label__ = 42; break; } else { __label__ = 46; break; } //@line 974 "bufferedio.c"
      case 46: // $bb51
        var $224=$start; //@line 983 "bufferedio.c"
        var $225=$n; //@line 983 "bufferedio.c"
        var $226=_PyString_FromStringAndSize($224, $225); //@line 983 "bufferedio.c"
        $res=$226; //@line 983 "bufferedio.c"
        var $227=$res; //@line 984 "bufferedio.c"
        var $228=($227)==0; //@line 984 "bufferedio.c"
        if ($228) { __label__ = 67; break; } else { __label__ = 47; break; } //@line 984 "bufferedio.c"
      case 47: // $bb52
        var $229=$n; //@line 986 "bufferedio.c"
        var $230=$limit_addr; //@line 986 "bufferedio.c"
        var $231=($229)==($230); //@line 986 "bufferedio.c"
        if ($231) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 986 "bufferedio.c"
      case 48: // $bb53
        var $232=$n; //@line 987 "bufferedio.c"
        var $233=($232); //@line 987 "bufferedio.c"
        var $234=$self_addr; //@line 987 "bufferedio.c"
        var $235=$234+44; //@line 987 "bufferedio.c"
        HEAP[$235]=$233; //@line 987 "bufferedio.c"
        __label__ = 58; break; //@line 987 "bufferedio.c"
      case 49: // $bb54
        var $236=$chunks; //@line 990 "bufferedio.c"
        var $237=$res; //@line 990 "bufferedio.c"
        var $238=_PyList_Append($236, $237); //@line 990 "bufferedio.c"
        var $239=($238) < 0; //@line 990 "bufferedio.c"
        var $240=$res; //@line 991 "bufferedio.c"
        var $241=($240)!=0; //@line 991 "bufferedio.c"
        if ($239) { __label__ = 50; break; } else { __label__ = 53; break; } //@line 990 "bufferedio.c"
      case 50: // $bb55
        if ($241) { __label__ = 51; break; } else { __label__ = 67; break; } //@line 991 "bufferedio.c"
      case 51: // $bb56
        var $242=$res; //@line 991 "bufferedio.c"
        $_py_tmp57=$242; //@line 991 "bufferedio.c"
        $res=0; //@line 991 "bufferedio.c"
        var $243=$_py_tmp57; //@line 991 "bufferedio.c"
        var $244=$243; //@line 991 "bufferedio.c"
        var $245=HEAP[$244]; //@line 991 "bufferedio.c"
        var $246=($245) - 1; //@line 991 "bufferedio.c"
        var $247=$_py_tmp57; //@line 991 "bufferedio.c"
        var $248=$247; //@line 991 "bufferedio.c"
        HEAP[$248]=$246; //@line 991 "bufferedio.c"
        var $249=$_py_tmp57; //@line 991 "bufferedio.c"
        var $250=$249; //@line 991 "bufferedio.c"
        var $251=HEAP[$250]; //@line 991 "bufferedio.c"
        var $252=($251)==0; //@line 991 "bufferedio.c"
        if ($252) { __label__ = 52; break; } else { __label__ = 67; break; } //@line 991 "bufferedio.c"
      case 52: // $bb58
        var $253=$_py_tmp57; //@line 991 "bufferedio.c"
        var $254=$253+4; //@line 991 "bufferedio.c"
        var $255=HEAP[$254]; //@line 991 "bufferedio.c"
        var $256=$255+24; //@line 991 "bufferedio.c"
        var $257=HEAP[$256]; //@line 991 "bufferedio.c"
        var $258=$_py_tmp57; //@line 991 "bufferedio.c"
        FUNCTION_TABLE[$257]($258); //@line 991 "bufferedio.c"
        __label__ = 67; break; //@line 991 "bufferedio.c"
      case 53: // $bb60
        if ($241) { __label__ = 54; break; } else { __label__ = 56; break; } //@line 994 "bufferedio.c"
      case 54: // $bb61
        var $259=$res; //@line 994 "bufferedio.c"
        $_py_tmp62=$259; //@line 994 "bufferedio.c"
        $res=0; //@line 994 "bufferedio.c"
        var $260=$_py_tmp62; //@line 994 "bufferedio.c"
        var $261=$260; //@line 994 "bufferedio.c"
        var $262=HEAP[$261]; //@line 994 "bufferedio.c"
        var $263=($262) - 1; //@line 994 "bufferedio.c"
        var $264=$_py_tmp62; //@line 994 "bufferedio.c"
        var $265=$264; //@line 994 "bufferedio.c"
        HEAP[$265]=$263; //@line 994 "bufferedio.c"
        var $266=$_py_tmp62; //@line 994 "bufferedio.c"
        var $267=$266; //@line 994 "bufferedio.c"
        var $268=HEAP[$267]; //@line 994 "bufferedio.c"
        var $269=($268)==0; //@line 994 "bufferedio.c"
        if ($269) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 994 "bufferedio.c"
      case 55: // $bb63
        var $270=$_py_tmp62; //@line 994 "bufferedio.c"
        var $271=$270+4; //@line 994 "bufferedio.c"
        var $272=HEAP[$271]; //@line 994 "bufferedio.c"
        var $273=$272+24; //@line 994 "bufferedio.c"
        var $274=HEAP[$273]; //@line 994 "bufferedio.c"
        var $275=$_py_tmp62; //@line 994 "bufferedio.c"
        FUNCTION_TABLE[$274]($275); //@line 994 "bufferedio.c"
        __label__ = 56; break; //@line 994 "bufferedio.c"
      case 56: // $bb64
        var $276=$written; //@line 995 "bufferedio.c"
        var $277=$n; //@line 995 "bufferedio.c"
        var $278=($277) + ($276); //@line 995 "bufferedio.c"
        $written=$278; //@line 995 "bufferedio.c"
        var $279=$limit_addr; //@line 996 "bufferedio.c"
        var $280=($279) >= 0; //@line 996 "bufferedio.c"
        if ($280) { __label__ = 57; break; } else { __label__ = 36; break; } //@line 996 "bufferedio.c"
      case 57: // $bb65
        var $281=$limit_addr; //@line 997 "bufferedio.c"
        var $282=$n; //@line 997 "bufferedio.c"
        var $283=($281) - ($282); //@line 997 "bufferedio.c"
        $limit_addr=$283; //@line 997 "bufferedio.c"
        __label__ = 36; break; //@line 997 "bufferedio.c"
      case 58: // $found
        var $284=$res; //@line 1000 "bufferedio.c"
        var $285=($284)!=0; //@line 1000 "bufferedio.c"
        if ($285) { __label__ = 59; break; } else { __label__ = 66; break; } //@line 1000 "bufferedio.c"
      case 59: // $bb67
        var $286=$chunks; //@line 1000 "bufferedio.c"
        var $287=$res; //@line 1000 "bufferedio.c"
        var $288=_PyList_Append($286, $287); //@line 1000 "bufferedio.c"
        var $289=($288) < 0; //@line 1000 "bufferedio.c"
        var $290=$res; //@line 1001 "bufferedio.c"
        var $291=($290)!=0; //@line 1001 "bufferedio.c"
        if ($289) { __label__ = 60; break; } else { __label__ = 63; break; } //@line 1000 "bufferedio.c"
      case 60: // $bb68
        if ($291) { __label__ = 61; break; } else { __label__ = 67; break; } //@line 1001 "bufferedio.c"
      case 61: // $bb69
        var $292=$res; //@line 1001 "bufferedio.c"
        $_py_tmp70=$292; //@line 1001 "bufferedio.c"
        $res=0; //@line 1001 "bufferedio.c"
        var $293=$_py_tmp70; //@line 1001 "bufferedio.c"
        var $294=$293; //@line 1001 "bufferedio.c"
        var $295=HEAP[$294]; //@line 1001 "bufferedio.c"
        var $296=($295) - 1; //@line 1001 "bufferedio.c"
        var $297=$_py_tmp70; //@line 1001 "bufferedio.c"
        var $298=$297; //@line 1001 "bufferedio.c"
        HEAP[$298]=$296; //@line 1001 "bufferedio.c"
        var $299=$_py_tmp70; //@line 1001 "bufferedio.c"
        var $300=$299; //@line 1001 "bufferedio.c"
        var $301=HEAP[$300]; //@line 1001 "bufferedio.c"
        var $302=($301)==0; //@line 1001 "bufferedio.c"
        if ($302) { __label__ = 62; break; } else { __label__ = 67; break; } //@line 1001 "bufferedio.c"
      case 62: // $bb71
        var $303=$_py_tmp70; //@line 1001 "bufferedio.c"
        var $304=$303+4; //@line 1001 "bufferedio.c"
        var $305=HEAP[$304]; //@line 1001 "bufferedio.c"
        var $306=$305+24; //@line 1001 "bufferedio.c"
        var $307=HEAP[$306]; //@line 1001 "bufferedio.c"
        var $308=$_py_tmp70; //@line 1001 "bufferedio.c"
        FUNCTION_TABLE[$307]($308); //@line 1001 "bufferedio.c"
        __label__ = 67; break; //@line 1001 "bufferedio.c"
      case 63: // $bb73
        if ($291) { __label__ = 64; break; } else { __label__ = 66; break; } //@line 1004 "bufferedio.c"
      case 64: // $bb74
        var $309=$res; //@line 1004 "bufferedio.c"
        $_py_tmp75=$309; //@line 1004 "bufferedio.c"
        $res=0; //@line 1004 "bufferedio.c"
        var $310=$_py_tmp75; //@line 1004 "bufferedio.c"
        var $311=$310; //@line 1004 "bufferedio.c"
        var $312=HEAP[$311]; //@line 1004 "bufferedio.c"
        var $313=($312) - 1; //@line 1004 "bufferedio.c"
        var $314=$_py_tmp75; //@line 1004 "bufferedio.c"
        var $315=$314; //@line 1004 "bufferedio.c"
        HEAP[$315]=$313; //@line 1004 "bufferedio.c"
        var $316=$_py_tmp75; //@line 1004 "bufferedio.c"
        var $317=$316; //@line 1004 "bufferedio.c"
        var $318=HEAP[$317]; //@line 1004 "bufferedio.c"
        var $319=($318)==0; //@line 1004 "bufferedio.c"
        if ($319) { __label__ = 65; break; } else { __label__ = 66; break; } //@line 1004 "bufferedio.c"
      case 65: // $bb76
        var $320=$_py_tmp75; //@line 1004 "bufferedio.c"
        var $321=$320+4; //@line 1004 "bufferedio.c"
        var $322=HEAP[$321]; //@line 1004 "bufferedio.c"
        var $323=$322+24; //@line 1004 "bufferedio.c"
        var $324=HEAP[$323]; //@line 1004 "bufferedio.c"
        var $325=$_py_tmp75; //@line 1004 "bufferedio.c"
        FUNCTION_TABLE[$324]($325); //@line 1004 "bufferedio.c"
        __label__ = 66; break; //@line 1004 "bufferedio.c"
      case 66: // $bb77
        var $326=HEAP[__PyIO_empty_bytes]; //@line 1005 "bufferedio.c"
        var $327=$chunks; //@line 1005 "bufferedio.c"
        var $328=__PyString_Join($326, $327); //@line 1005 "bufferedio.c"
        $res=$328; //@line 1005 "bufferedio.c"
        __label__ = 67; break; //@line 1007 "bufferedio.c"
      case 67: // $end_unlocked
        var $_pr1=$chunks;
        var $329=($_pr1)!=0; //@line 1010 "bufferedio.c"
        if ($329) { __label__ = 68; break; } else { __label__ = 70; break; } //@line 1010 "bufferedio.c"
      case 68: // $bb79
        var $330=$chunks; //@line 1010 "bufferedio.c"
        var $331=$330; //@line 1010 "bufferedio.c"
        var $332=HEAP[$331]; //@line 1010 "bufferedio.c"
        var $333=($332) - 1; //@line 1010 "bufferedio.c"
        var $334=$chunks; //@line 1010 "bufferedio.c"
        var $335=$334; //@line 1010 "bufferedio.c"
        HEAP[$335]=$333; //@line 1010 "bufferedio.c"
        var $336=$chunks; //@line 1010 "bufferedio.c"
        var $337=$336; //@line 1010 "bufferedio.c"
        var $338=HEAP[$337]; //@line 1010 "bufferedio.c"
        var $339=($338)==0; //@line 1010 "bufferedio.c"
        if ($339) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 1010 "bufferedio.c"
      case 69: // $bb80
        var $340=$chunks; //@line 1010 "bufferedio.c"
        var $341=$340+4; //@line 1010 "bufferedio.c"
        var $342=HEAP[$341]; //@line 1010 "bufferedio.c"
        var $343=$342+24; //@line 1010 "bufferedio.c"
        var $344=HEAP[$343]; //@line 1010 "bufferedio.c"
        var $345=$chunks; //@line 1010 "bufferedio.c"
        FUNCTION_TABLE[$344]($345); //@line 1010 "bufferedio.c"
        __label__ = 70; break; //@line 1010 "bufferedio.c"
      case 70: // $bb81
        var $346=$res; //@line 1011 "bufferedio.c"
        $0=$346; //@line 1011 "bufferedio.c"
        __label__ = 71; break; //@line 1011 "bufferedio.c"
      case 71: // $bb82
        var $347=$0; //@line 912 "bufferedio.c"
        $retval=$347; //@line 912 "bufferedio.c"
        var $retval83=$retval; //@line 912 "bufferedio.c"
        ;
        return $retval83; //@line 912 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_readline($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $limit=__stackBase__;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$limit]=-1; //@line 1017 "bufferedio.c"
        var $1=$self_addr; //@line 1019 "bufferedio.c"
        var $2=$1+12; //@line 1019 "bufferedio.c"
        var $3=HEAP[$2]; //@line 1019 "bufferedio.c"
        var $4=($3) <= 0; //@line 1019 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 1019 "bufferedio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 1019 "bufferedio.c"
        var $6=$5+16; //@line 1019 "bufferedio.c"
        var $7=HEAP[$6]; //@line 1019 "bufferedio.c"
        var $8=($7)!=0; //@line 1019 "bufferedio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 1019 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1019 "bufferedio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str11); //@line 1019 "bufferedio.c"
        __label__ = 4; break; //@line 1019 "bufferedio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str12); //@line 1019 "bufferedio.c"
        __label__ = 4; break; //@line 1019 "bufferedio.c"
      case 4: // $bb3
        $0=0; //@line 1019 "bufferedio.c"
        __label__ = 8; break; //@line 1019 "bufferedio.c"
      case 5: // $bb4
        var $10=$args_addr; //@line 1020 "bufferedio.c"
        var $11=__PyArg_ParseTuple_SizeT($10, __str27, allocate([(FUNCTION_TABLE_OFFSET + 2),0,0,0,$limit,0,0,0], ["i32 (%struct.PyObject*, i8*)*",0,0,0,"i32*",0,0,0], ALLOC_STACK)); //@line 1020 "bufferedio.c"
        var $12=($11)==0; //@line 1020 "bufferedio.c"
        if ($12) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1020 "bufferedio.c"
      case 6: // $bb5
        $0=0; //@line 1021 "bufferedio.c"
        __label__ = 8; break; //@line 1021 "bufferedio.c"
      case 7: // $bb6
        var $13=HEAP[$limit]; //@line 1022 "bufferedio.c"
        var $14=$self_addr; //@line 1022 "bufferedio.c"
        var $15=__buffered_readline($14, $13); //@line 1022 "bufferedio.c"
        $0=$15; //@line 1022 "bufferedio.c"
        __label__ = 8; break; //@line 1022 "bufferedio.c"
      case 8: // $bb7
        var $16=$0; //@line 1019 "bufferedio.c"
        $retval=$16; //@line 1019 "bufferedio.c"
        var $retval8=$retval; //@line 1019 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval8; //@line 1019 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_tell($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $iftmp_133;
        var $0;
        var $pos;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 1031 "bufferedio.c"
        var $2=$1+12; //@line 1031 "bufferedio.c"
        var $3=HEAP[$2]; //@line 1031 "bufferedio.c"
        var $4=($3) <= 0; //@line 1031 "bufferedio.c"
        var $5=$self_addr; //@line 1031 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 1031 "bufferedio.c"
      case 1: // $bb
        var $6=$5+16; //@line 1031 "bufferedio.c"
        var $7=HEAP[$6]; //@line 1031 "bufferedio.c"
        var $8=($7)!=0; //@line 1031 "bufferedio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 1031 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1031 "bufferedio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str11); //@line 1031 "bufferedio.c"
        __label__ = 4; break; //@line 1031 "bufferedio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str12); //@line 1031 "bufferedio.c"
        __label__ = 4; break; //@line 1031 "bufferedio.c"
      case 4: // $bb3
        $0=0; //@line 1031 "bufferedio.c"
        __label__ = 15; break; //@line 1031 "bufferedio.c"
      case 5: // $bb4
        var $10=__buffered_raw_tell($5); //@line 1032 "bufferedio.c"
        $pos=$10; //@line 1032 "bufferedio.c"
        var $11=$pos; //@line 1033 "bufferedio.c"
        var $12=($11)==-1; //@line 1033 "bufferedio.c"
        if ($12) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1033 "bufferedio.c"
      case 6: // $bb5
        $0=0; //@line 1034 "bufferedio.c"
        __label__ = 15; break; //@line 1034 "bufferedio.c"
      case 7: // $bb6
        var $13=$self_addr; //@line 1035 "bufferedio.c"
        var $14=$13+20; //@line 1035 "bufferedio.c"
        var $15=HEAP[$14]; //@line 1035 "bufferedio.c"
        var $16=($15)==0; //@line 1035 "bufferedio.c"
        if ($16) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 1035 "bufferedio.c"
      case 8: // $bb7
        var $17=$self_addr; //@line 1035 "bufferedio.c"
        var $18=$17+60; //@line 1035 "bufferedio.c"
        var $19=HEAP[$18]; //@line 1035 "bufferedio.c"
        var $20=($19)!=-1; //@line 1035 "bufferedio.c"
        if ($20) { __label__ = 11; break; } else { __label__ = 9; break; } //@line 1035 "bufferedio.c"
      case 9: // $bb8
        var $21=$self_addr; //@line 1035 "bufferedio.c"
        var $22=$21+24; //@line 1035 "bufferedio.c"
        var $23=HEAP[$22]; //@line 1035 "bufferedio.c"
        var $24=($23)==0; //@line 1035 "bufferedio.c"
        if ($24) { __label__ = 13; break; } else { __label__ = 10; break; } //@line 1035 "bufferedio.c"
      case 10: // $bb9
        var $25=$self_addr; //@line 1035 "bufferedio.c"
        var $26=$25+76; //@line 1035 "bufferedio.c"
        var $27=HEAP[$26]; //@line 1035 "bufferedio.c"
        var $28=($27)!=-1; //@line 1035 "bufferedio.c"
        if ($28) { __label__ = 11; break; } else { __label__ = 13; break; } //@line 1035 "bufferedio.c"
      case 11: // $bb10
        var $29=$self_addr; //@line 1035 "bufferedio.c"
        var $30=$29+52; //@line 1035 "bufferedio.c"
        var $31=HEAP[$30]; //@line 1035 "bufferedio.c"
        var $32=($31) < 0; //@line 1035 "bufferedio.c"
        if ($32) { __label__ = 13; break; } else { __label__ = 12; break; } //@line 1035 "bufferedio.c"
      case 12: // $bb11
        var $33=$self_addr; //@line 1035 "bufferedio.c"
        var $34=$33+52; //@line 1035 "bufferedio.c"
        var $35=HEAP[$34]; //@line 1035 "bufferedio.c"
        var $36=$self_addr; //@line 1035 "bufferedio.c"
        var $37=$36+44; //@line 1035 "bufferedio.c"
        var $38=HEAP[$37]; //@line 1035 "bufferedio.c"
        var $39=($35) - ($38); //@line 1035 "bufferedio.c"
        $iftmp_133=$39; //@line 1035 "bufferedio.c"
        __label__ = 14; break; //@line 1035 "bufferedio.c"
      case 13: // $bb12
        $iftmp_133=0; //@line 1035 "bufferedio.c"
        __label__ = 14; break; //@line 1035 "bufferedio.c"
      case 14: // $bb13
        var $40=$pos; //@line 1035 "bufferedio.c"
        var $41=$iftmp_133; //@line 1035 "bufferedio.c"
        var $42=($40) - ($41); //@line 1035 "bufferedio.c"
        $pos=$42; //@line 1035 "bufferedio.c"
        var $43=$pos; //@line 1037 "bufferedio.c"
        var $44=_PyLong_FromLongLong($43); //@line 1037 "bufferedio.c"
        $0=$44; //@line 1037 "bufferedio.c"
        __label__ = 15; break; //@line 1037 "bufferedio.c"
      case 15: // $bb14
        var $45=$0; //@line 1031 "bufferedio.c"
        $retval=$45; //@line 1031 "bufferedio.c"
        var $retval15=$retval; //@line 1031 "bufferedio.c"
        ;
        return $retval15; //@line 1031 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_seek($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $iftmp_150;
        var $iftmp_148;
        var $iftmp_146;
        var $iftmp_145;
        var $iftmp_140;
        var $0;
        var $target;
        var $n;
        var $whence=__stackBase__;
        var $targetobj=__stackBase__+4;
        var $res;
        var $current;
        var $avail;
        var $offset;
        var $_py_tmp;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$whence]=0; //@line 1044 "bufferedio.c"
        $res=0; //@line 1045 "bufferedio.c"
        var $1=$self_addr; //@line 1047 "bufferedio.c"
        var $2=$1+12; //@line 1047 "bufferedio.c"
        var $3=HEAP[$2]; //@line 1047 "bufferedio.c"
        var $4=($3) <= 0; //@line 1047 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 1047 "bufferedio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 1047 "bufferedio.c"
        var $6=$5+16; //@line 1047 "bufferedio.c"
        var $7=HEAP[$6]; //@line 1047 "bufferedio.c"
        var $8=($7)!=0; //@line 1047 "bufferedio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 1047 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1047 "bufferedio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str11); //@line 1047 "bufferedio.c"
        __label__ = 4; break; //@line 1047 "bufferedio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str12); //@line 1047 "bufferedio.c"
        __label__ = 4; break; //@line 1047 "bufferedio.c"
      case 4: // $bb3
        $0=0; //@line 1047 "bufferedio.c"
        __label__ = 60; break; //@line 1047 "bufferedio.c"
      case 5: // $bb4
        var $10=$args_addr; //@line 1048 "bufferedio.c"
        var $11=__PyArg_ParseTuple_SizeT($10, __str28, allocate([$targetobj,0,0,0,$whence,0,0,0], ["%struct.PyObject**",0,0,0,"i32*",0,0,0], ALLOC_STACK)); //@line 1048 "bufferedio.c"
        var $12=($11)==0; //@line 1048 "bufferedio.c"
        if ($12) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1048 "bufferedio.c"
      case 6: // $bb5
        $0=0; //@line 1049 "bufferedio.c"
        __label__ = 60; break; //@line 1049 "bufferedio.c"
      case 7: // $bb6
        var $13=HEAP[$whence]; //@line 1051 "bufferedio.c"
        var $14=($13) < 0; //@line 1051 "bufferedio.c"
        var $15=HEAP[$whence]; //@line 1051 "bufferedio.c"
        var $16=($15) > 2; //@line 1051 "bufferedio.c"
        var $or_cond=($14) | ($16);
        if ($or_cond) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1051 "bufferedio.c"
      case 8: // $bb8
        var $17=HEAP[$whence]; //@line 1052 "bufferedio.c"
        var $18=HEAP[_PyExc_ValueError]; //@line 1052 "bufferedio.c"
        var $19=_PyErr_Format($18, __str29, allocate([$17,0,0,0], ["i32",0,0,0], ALLOC_STACK)); //@line 1052 "bufferedio.c"
        $0=0; //@line 1054 "bufferedio.c"
        __label__ = 60; break; //@line 1054 "bufferedio.c"
      case 9: // $bb9
        var $20=$self_addr; //@line 1057 "bufferedio.c"
        var $21=$20+28; //@line 1057 "bufferedio.c"
        var $22=HEAP[$21]; //@line 1057 "bufferedio.c"
        var $23=($22)!=0; //@line 1057 "bufferedio.c"
        var $24=$self_addr; //@line 1057 "bufferedio.c"
        if ($23) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1057 "bufferedio.c"
      case 10: // $bb10
        var $25=$24+8; //@line 1057 "bufferedio.c"
        var $26=HEAP[$25]; //@line 1057 "bufferedio.c"
        var $27=__PyFileIO_closed($26); //@line 1057 "bufferedio.c"
        var $28=($27)!=0; //@line 1057 "bufferedio.c"
        var $29=($28); //@line 1057 "bufferedio.c"
        $iftmp_140=$29; //@line 1057 "bufferedio.c"
        __lastLabel__ = 10; __label__ = 12; break; //@line 1057 "bufferedio.c"
      case 11: // $bb11
        var $30=_buffered_closed($24); //@line 1057 "bufferedio.c"
        var $31=($30)!=0; //@line 1057 "bufferedio.c"
        var $32=($31); //@line 1057 "bufferedio.c"
        $iftmp_140=$32; //@line 1057 "bufferedio.c"
        __lastLabel__ = 11; __label__ = 12; break; //@line 1057 "bufferedio.c"
      case 12: // $bb12
        var $33=__lastLabel__ == 11 ? $32 : ($29);
        var $toBool=($33)!=0; //@line 1057 "bufferedio.c"
        var $34=HEAP[_PyExc_ValueError]; //@line 1057 "bufferedio.c"
        if ($toBool) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1057 "bufferedio.c"
      case 13: // $bb13
        _PyErr_SetString($34, __str30); //@line 1057 "bufferedio.c"
        $0=0; //@line 1057 "bufferedio.c"
        __label__ = 60; break; //@line 1057 "bufferedio.c"
      case 14: // $bb14
        var $35=HEAP[$targetobj]; //@line 1059 "bufferedio.c"
        var $36=_PyNumber_AsOff_t($35, $34); //@line 1059 "bufferedio.c"
        $target=$36; //@line 1059 "bufferedio.c"
        var $37=$target; //@line 1060 "bufferedio.c"
        var $38=($37)==-1; //@line 1060 "bufferedio.c"
        if ($38) { __label__ = 15; break; } else { __label__ = 17; break; } //@line 1060 "bufferedio.c"
      case 15: // $bb15
        var $39=_PyErr_Occurred(); //@line 1060 "bufferedio.c"
        var $40=($39)!=0; //@line 1060 "bufferedio.c"
        if ($40) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 1060 "bufferedio.c"
      case 16: // $bb16
        $0=0; //@line 1061 "bufferedio.c"
        __label__ = 60; break; //@line 1061 "bufferedio.c"
      case 17: // $bb17
        var $41=HEAP[$whence]; //@line 1063 "bufferedio.c"
        var $42=($41)!=2; //@line 1063 "bufferedio.c"
        if ($42) { __label__ = 18; break; } else { __label__ = 40; break; } //@line 1063 "bufferedio.c"
      case 18: // $bb18
        var $43=$self_addr; //@line 1063 "bufferedio.c"
        var $44=$43+20; //@line 1063 "bufferedio.c"
        var $45=HEAP[$44]; //@line 1063 "bufferedio.c"
        var $46=($45)!=0; //@line 1063 "bufferedio.c"
        if ($46) { __label__ = 19; break; } else { __label__ = 40; break; } //@line 1063 "bufferedio.c"
      case 19: // $bb19
        var $47=$self_addr; //@line 1071 "bufferedio.c"
        var $48=$47+32; //@line 1071 "bufferedio.c"
        var $49=HEAP[$48]; //@line 1071 "bufferedio.c"
        var $50=($49)!=-1; //@line 1071 "bufferedio.c"
        var $51=$self_addr; //@line 1071 "bufferedio.c"
        if ($50) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1071 "bufferedio.c"
      case 20: // $bb20
        var $52=$51+32; //@line 1071 "bufferedio.c"
        var $53=HEAP[$52]; //@line 1071 "bufferedio.c"
        $iftmp_145=$53; //@line 1071 "bufferedio.c"
        __label__ = 22; break; //@line 1071 "bufferedio.c"
      case 21: // $bb21
        var $54=__buffered_raw_tell($51); //@line 1071 "bufferedio.c"
        $iftmp_145=$54; //@line 1071 "bufferedio.c"
        __label__ = 22; break; //@line 1071 "bufferedio.c"
      case 22: // $bb22
        var $55=$iftmp_145; //@line 1071 "bufferedio.c"
        $current=$55; //@line 1071 "bufferedio.c"
        var $56=$self_addr; //@line 1072 "bufferedio.c"
        var $57=$56+20; //@line 1072 "bufferedio.c"
        var $58=HEAP[$57]; //@line 1072 "bufferedio.c"
        var $59=($58)==0; //@line 1072 "bufferedio.c"
        if ($59) { __label__ = 25; break; } else { __label__ = 23; break; } //@line 1072 "bufferedio.c"
      case 23: // $bb23
        var $60=$self_addr; //@line 1072 "bufferedio.c"
        var $61=$60+20; //@line 1072 "bufferedio.c"
        var $62=HEAP[$61]; //@line 1072 "bufferedio.c"
        var $63=($62)==0; //@line 1072 "bufferedio.c"
        if ($63) { __label__ = 25; break; } else { __label__ = 24; break; } //@line 1072 "bufferedio.c"
      case 24: // $bb24
        var $64=$self_addr; //@line 1072 "bufferedio.c"
        var $65=$64+60; //@line 1072 "bufferedio.c"
        var $66=HEAP[$65]; //@line 1072 "bufferedio.c"
        var $67=($66)==-1; //@line 1072 "bufferedio.c"
        if ($67) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 1072 "bufferedio.c"
      case 25: // $bb27_thread
        $iftmp_146=0; //@line 1072 "bufferedio.c"
        $avail=0; //@line 1072 "bufferedio.c"
        __label__ = 40; break;
      case 26: // $bb27
        var $68=$self_addr; //@line 1072 "bufferedio.c"
        var $69=$68+60; //@line 1072 "bufferedio.c"
        var $70=HEAP[$69]; //@line 1072 "bufferedio.c"
        var $71=$self_addr; //@line 1072 "bufferedio.c"
        var $72=$71+44; //@line 1072 "bufferedio.c"
        var $73=HEAP[$72]; //@line 1072 "bufferedio.c"
        var $74=($70) - ($73); //@line 1072 "bufferedio.c"
        $iftmp_146=$74; //@line 1072 "bufferedio.c"
        $avail=$74; //@line 1072 "bufferedio.c"
        var $75=($74) > 0; //@line 1073 "bufferedio.c"
        if ($75) { __label__ = 27; break; } else { __label__ = 40; break; } //@line 1073 "bufferedio.c"
      case 27: // $bb28
        var $76=HEAP[$whence]; //@line 1075 "bufferedio.c"
        var $77=($76)==0; //@line 1075 "bufferedio.c"
        if ($77) { __label__ = 28; break; } else { __label__ = 36; break; } //@line 1075 "bufferedio.c"
      case 28: // $bb29
        var $78=$self_addr; //@line 1076 "bufferedio.c"
        var $79=$78+20; //@line 1076 "bufferedio.c"
        var $80=HEAP[$79]; //@line 1076 "bufferedio.c"
        var $81=($80)==0; //@line 1076 "bufferedio.c"
        if ($81) { __label__ = 30; break; } else { __label__ = 29; break; } //@line 1076 "bufferedio.c"
      case 29: // $bb30
        var $82=$self_addr; //@line 1076 "bufferedio.c"
        var $83=$82+60; //@line 1076 "bufferedio.c"
        var $84=HEAP[$83]; //@line 1076 "bufferedio.c"
        var $85=($84)!=-1; //@line 1076 "bufferedio.c"
        if ($85) { __label__ = 32; break; } else { __label__ = 30; break; } //@line 1076 "bufferedio.c"
      case 30: // $bb31
        var $86=$self_addr; //@line 1076 "bufferedio.c"
        var $87=$86+24; //@line 1076 "bufferedio.c"
        var $88=HEAP[$87]; //@line 1076 "bufferedio.c"
        var $89=($88)==0; //@line 1076 "bufferedio.c"
        if ($89) { __label__ = 34; break; } else { __label__ = 31; break; } //@line 1076 "bufferedio.c"
      case 31: // $bb32
        var $90=$self_addr; //@line 1076 "bufferedio.c"
        var $91=$90+76; //@line 1076 "bufferedio.c"
        var $92=HEAP[$91]; //@line 1076 "bufferedio.c"
        var $93=($92)!=-1; //@line 1076 "bufferedio.c"
        if ($93) { __label__ = 32; break; } else { __label__ = 34; break; } //@line 1076 "bufferedio.c"
      case 32: // $bb33
        var $94=$self_addr; //@line 1076 "bufferedio.c"
        var $95=$94+52; //@line 1076 "bufferedio.c"
        var $96=HEAP[$95]; //@line 1076 "bufferedio.c"
        var $97=($96) < 0; //@line 1076 "bufferedio.c"
        if ($97) { __label__ = 34; break; } else { __label__ = 33; break; } //@line 1076 "bufferedio.c"
      case 33: // $bb34
        var $98=$self_addr; //@line 1076 "bufferedio.c"
        var $99=$98+52; //@line 1076 "bufferedio.c"
        var $100=HEAP[$99]; //@line 1076 "bufferedio.c"
        var $101=$self_addr; //@line 1076 "bufferedio.c"
        var $102=$101+44; //@line 1076 "bufferedio.c"
        var $103=HEAP[$102]; //@line 1076 "bufferedio.c"
        var $104=($100) - ($103); //@line 1076 "bufferedio.c"
        $iftmp_148=$104; //@line 1076 "bufferedio.c"
        __label__ = 35; break; //@line 1076 "bufferedio.c"
      case 34: // $bb35
        $iftmp_148=0; //@line 1076 "bufferedio.c"
        __label__ = 35; break; //@line 1076 "bufferedio.c"
      case 35: // $bb36
        var $105=$current; //@line 1076 "bufferedio.c"
        var $106=$iftmp_148; //@line 1076 "bufferedio.c"
        var $_neg=0 - ($106);
        var $107=$target; //@line 1076 "bufferedio.c"
        var $_neg2=0 - ($105);
        var $_neg_neg=0 - ($_neg);
        var $_neg3=($_neg_neg) + ($_neg2);
        var $108=($_neg3) + ($107);
        $offset=$108; //@line 1076 "bufferedio.c"
        __label__ = 37; break; //@line 1076 "bufferedio.c"
      case 36: // $bb37
        var $109=$target; //@line 1078 "bufferedio.c"
        $offset=$109; //@line 1078 "bufferedio.c"
        __label__ = 37; break; //@line 1078 "bufferedio.c"
      case 37: // $bb38
        var $110=$self_addr; //@line 1079 "bufferedio.c"
        var $111=$110+44; //@line 1079 "bufferedio.c"
        var $112=HEAP[$111]; //@line 1079 "bufferedio.c"
        var $113=0 - ($112); //@line 1079 "bufferedio.c"
        var $114=$offset; //@line 1079 "bufferedio.c"
        var $115=($113) <= ($114); //@line 1079 "bufferedio.c"
        if ($115) { __label__ = 38; break; } else { __label__ = 40; break; } //@line 1079 "bufferedio.c"
      case 38: // $bb39
        var $116=$offset; //@line 1079 "bufferedio.c"
        var $117=$avail; //@line 1079 "bufferedio.c"
        var $118=($116) <= ($117); //@line 1079 "bufferedio.c"
        if ($118) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 1079 "bufferedio.c"
      case 39: // $bb40
        var $119=$self_addr; //@line 1080 "bufferedio.c"
        var $120=$119+44; //@line 1080 "bufferedio.c"
        var $121=HEAP[$120]; //@line 1080 "bufferedio.c"
        var $122=$offset; //@line 1080 "bufferedio.c"
        var $123=($122) + ($121); //@line 1080 "bufferedio.c"
        var $124=$self_addr; //@line 1080 "bufferedio.c"
        var $125=$124+44; //@line 1080 "bufferedio.c"
        HEAP[$125]=$123; //@line 1080 "bufferedio.c"
        var $126=$current; //@line 1081 "bufferedio.c"
        var $127=$avail; //@line 1081 "bufferedio.c"
        var $_neg4=0 - ($127);
        var $128=$offset; //@line 1081 "bufferedio.c"
        var $129=($_neg4) + ($126);
        var $130=($129) + ($128); //@line 1081 "bufferedio.c"
        var $131=_PyLong_FromLongLong($130); //@line 1081 "bufferedio.c"
        $0=$131; //@line 1081 "bufferedio.c"
        __label__ = 60; break; //@line 1081 "bufferedio.c"
      case 40: // $bb41
        var $132=$self_addr; //@line 1090 "bufferedio.c"
        var $133=$132+24; //@line 1090 "bufferedio.c"
        var $134=HEAP[$133]; //@line 1090 "bufferedio.c"
        var $135=($134)!=0; //@line 1090 "bufferedio.c"
        if ($135) { __label__ = 41; break; } else { __label__ = 46; break; } //@line 1090 "bufferedio.c"
      case 41: // $bb42
        var $136=$self_addr; //@line 1091 "bufferedio.c"
        var $137=__bufferedwriter_flush_unlocked($136, 0); //@line 1091 "bufferedio.c"
        $res=$137; //@line 1091 "bufferedio.c"
        var $138=$res; //@line 1092 "bufferedio.c"
        var $139=($138)==0; //@line 1092 "bufferedio.c"
        if ($139) { __label__ = 59; break; } else { __label__ = 42; break; } //@line 1092 "bufferedio.c"
      case 42: // $bb43
        var $140=$res; //@line 1094 "bufferedio.c"
        var $141=($140)!=0; //@line 1094 "bufferedio.c"
        if ($141) { __label__ = 43; break; } else { __label__ = 45; break; } //@line 1094 "bufferedio.c"
      case 43: // $bb44
        var $142=$res; //@line 1094 "bufferedio.c"
        $_py_tmp=$142; //@line 1094 "bufferedio.c"
        $res=0; //@line 1094 "bufferedio.c"
        var $143=$_py_tmp; //@line 1094 "bufferedio.c"
        var $144=$143; //@line 1094 "bufferedio.c"
        var $145=HEAP[$144]; //@line 1094 "bufferedio.c"
        var $146=($145) - 1; //@line 1094 "bufferedio.c"
        var $147=$_py_tmp; //@line 1094 "bufferedio.c"
        var $148=$147; //@line 1094 "bufferedio.c"
        HEAP[$148]=$146; //@line 1094 "bufferedio.c"
        var $149=$_py_tmp; //@line 1094 "bufferedio.c"
        var $150=$149; //@line 1094 "bufferedio.c"
        var $151=HEAP[$150]; //@line 1094 "bufferedio.c"
        var $152=($151)==0; //@line 1094 "bufferedio.c"
        if ($152) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 1094 "bufferedio.c"
      case 44: // $bb45
        var $153=$_py_tmp; //@line 1094 "bufferedio.c"
        var $154=$153+4; //@line 1094 "bufferedio.c"
        var $155=HEAP[$154]; //@line 1094 "bufferedio.c"
        var $156=$155+24; //@line 1094 "bufferedio.c"
        var $157=HEAP[$156]; //@line 1094 "bufferedio.c"
        var $158=$_py_tmp; //@line 1094 "bufferedio.c"
        FUNCTION_TABLE[$157]($158); //@line 1094 "bufferedio.c"
        __label__ = 45; break; //@line 1094 "bufferedio.c"
      case 45: // $bb46
        var $159=$self_addr; //@line 1095 "bufferedio.c"
        __bufferedwriter_reset_buf($159); //@line 1095 "bufferedio.c"
        __label__ = 46; break; //@line 1095 "bufferedio.c"
      case 46: // $bb47
        var $160=HEAP[$whence]; //@line 1099 "bufferedio.c"
        var $161=($160)==1; //@line 1099 "bufferedio.c"
        if ($161) { __label__ = 47; break; } else { __label__ = 55; break; } //@line 1099 "bufferedio.c"
      case 47: // $bb48
        var $162=$self_addr; //@line 1100 "bufferedio.c"
        var $163=$162+20; //@line 1100 "bufferedio.c"
        var $164=HEAP[$163]; //@line 1100 "bufferedio.c"
        var $165=($164)==0; //@line 1100 "bufferedio.c"
        if ($165) { __label__ = 49; break; } else { __label__ = 48; break; } //@line 1100 "bufferedio.c"
      case 48: // $bb49
        var $166=$self_addr; //@line 1100 "bufferedio.c"
        var $167=$166+60; //@line 1100 "bufferedio.c"
        var $168=HEAP[$167]; //@line 1100 "bufferedio.c"
        var $169=($168)!=-1; //@line 1100 "bufferedio.c"
        if ($169) { __label__ = 51; break; } else { __label__ = 49; break; } //@line 1100 "bufferedio.c"
      case 49: // $bb50
        var $170=$self_addr; //@line 1100 "bufferedio.c"
        var $171=$170+24; //@line 1100 "bufferedio.c"
        var $172=HEAP[$171]; //@line 1100 "bufferedio.c"
        var $173=($172)==0; //@line 1100 "bufferedio.c"
        if ($173) { __label__ = 53; break; } else { __label__ = 50; break; } //@line 1100 "bufferedio.c"
      case 50: // $bb51
        var $174=$self_addr; //@line 1100 "bufferedio.c"
        var $175=$174+76; //@line 1100 "bufferedio.c"
        var $176=HEAP[$175]; //@line 1100 "bufferedio.c"
        var $177=($176)!=-1; //@line 1100 "bufferedio.c"
        if ($177) { __label__ = 51; break; } else { __label__ = 53; break; } //@line 1100 "bufferedio.c"
      case 51: // $bb52
        var $178=$self_addr; //@line 1100 "bufferedio.c"
        var $179=$178+52; //@line 1100 "bufferedio.c"
        var $180=HEAP[$179]; //@line 1100 "bufferedio.c"
        var $181=($180) < 0; //@line 1100 "bufferedio.c"
        if ($181) { __label__ = 53; break; } else { __label__ = 52; break; } //@line 1100 "bufferedio.c"
      case 52: // $bb53
        var $182=$self_addr; //@line 1100 "bufferedio.c"
        var $183=$182+52; //@line 1100 "bufferedio.c"
        var $184=HEAP[$183]; //@line 1100 "bufferedio.c"
        var $185=$self_addr; //@line 1100 "bufferedio.c"
        var $186=$185+44; //@line 1100 "bufferedio.c"
        var $187=HEAP[$186]; //@line 1100 "bufferedio.c"
        var $188=($184) - ($187); //@line 1100 "bufferedio.c"
        $iftmp_150=$188; //@line 1100 "bufferedio.c"
        __label__ = 54; break; //@line 1100 "bufferedio.c"
      case 53: // $bb54
        $iftmp_150=0; //@line 1100 "bufferedio.c"
        __label__ = 54; break; //@line 1100 "bufferedio.c"
      case 54: // $bb55
        var $189=$target; //@line 1100 "bufferedio.c"
        var $190=$iftmp_150; //@line 1100 "bufferedio.c"
        var $191=($189) - ($190); //@line 1100 "bufferedio.c"
        $target=$191; //@line 1100 "bufferedio.c"
        __label__ = 55; break; //@line 1100 "bufferedio.c"
      case 55: // $bb56
        var $192=HEAP[$whence]; //@line 1101 "bufferedio.c"
        var $193=$self_addr; //@line 1101 "bufferedio.c"
        var $194=$target; //@line 1101 "bufferedio.c"
        var $195=__buffered_raw_seek($193, $194, $192); //@line 1101 "bufferedio.c"
        $n=$195; //@line 1101 "bufferedio.c"
        var $196=($195)==-1; //@line 1102 "bufferedio.c"
        if ($196) { __label__ = 59; break; } else { __label__ = 56; break; } //@line 1102 "bufferedio.c"
      case 56: // $bb57
        var $197=$self_addr; //@line 1104 "bufferedio.c"
        var $198=$197+52; //@line 1104 "bufferedio.c"
        HEAP[$198]=-1; //@line 1104 "bufferedio.c"
        var $199=$n; //@line 1105 "bufferedio.c"
        var $200=_PyLong_FromLongLong($199); //@line 1105 "bufferedio.c"
        $res=$200; //@line 1105 "bufferedio.c"
        var $201=$res; //@line 1106 "bufferedio.c"
        var $202=($201)!=0; //@line 1106 "bufferedio.c"
        if ($202) { __label__ = 57; break; } else { __label__ = 59; break; } //@line 1106 "bufferedio.c"
      case 57: // $bb58
        var $203=$self_addr; //@line 1106 "bufferedio.c"
        var $204=$203+20; //@line 1106 "bufferedio.c"
        var $205=HEAP[$204]; //@line 1106 "bufferedio.c"
        var $206=($205)!=0; //@line 1106 "bufferedio.c"
        if ($206) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 1106 "bufferedio.c"
      case 58: // $bb59
        var $207=$self_addr; //@line 1107 "bufferedio.c"
        __bufferedreader_reset_buf($207); //@line 1107 "bufferedio.c"
        __label__ = 59; break; //@line 1109 "bufferedio.c"
      case 59: // $end
        var $208=$res; //@line 1111 "bufferedio.c"
        $0=$208; //@line 1111 "bufferedio.c"
        __label__ = 60; break; //@line 1111 "bufferedio.c"
      case 60: // $bb60
        var $209=$0; //@line 1047 "bufferedio.c"
        $retval=$209; //@line 1047 "bufferedio.c"
        var $retval61=$retval; //@line 1047 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval61; //@line 1047 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_truncate($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $iftmp_155;
        var $0;
        var $pos=__stackBase__;
        var $res;
        var $_py_tmp;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$pos]=__Py_NoneStruct; //@line 1117 "bufferedio.c"
        $res=0; //@line 1118 "bufferedio.c"
        var $1=$self_addr; //@line 1120 "bufferedio.c"
        var $2=$1+12; //@line 1120 "bufferedio.c"
        var $3=HEAP[$2]; //@line 1120 "bufferedio.c"
        var $4=($3) <= 0; //@line 1120 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 1120 "bufferedio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 1120 "bufferedio.c"
        var $6=$5+16; //@line 1120 "bufferedio.c"
        var $7=HEAP[$6]; //@line 1120 "bufferedio.c"
        var $8=($7)!=0; //@line 1120 "bufferedio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 1120 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1120 "bufferedio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str11); //@line 1120 "bufferedio.c"
        __label__ = 4; break; //@line 1120 "bufferedio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str12); //@line 1120 "bufferedio.c"
        __label__ = 4; break; //@line 1120 "bufferedio.c"
      case 4: // $bb3
        $0=0; //@line 1120 "bufferedio.c"
        __label__ = 27; break; //@line 1120 "bufferedio.c"
      case 5: // $bb4
        var $10=$args_addr; //@line 1121 "bufferedio.c"
        var $11=__PyArg_ParseTuple_SizeT($10, __str31, allocate([$pos,0,0,0], ["%struct.PyObject**",0,0,0], ALLOC_STACK)); //@line 1121 "bufferedio.c"
        var $12=($11)==0; //@line 1121 "bufferedio.c"
        if ($12) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1121 "bufferedio.c"
      case 6: // $bb5
        $0=0; //@line 1122 "bufferedio.c"
        __label__ = 27; break; //@line 1122 "bufferedio.c"
      case 7: // $bb6
        var $13=$self_addr; //@line 1128 "bufferedio.c"
        var $14=$13+24; //@line 1128 "bufferedio.c"
        var $15=HEAP[$14]; //@line 1128 "bufferedio.c"
        var $16=($15)!=0; //@line 1128 "bufferedio.c"
        if ($16) { __label__ = 8; break; } else { __label__ = 12; break; } //@line 1128 "bufferedio.c"
      case 8: // $bb7
        var $17=$self_addr; //@line 1129 "bufferedio.c"
        var $18=__bufferedwriter_flush_unlocked($17, 0); //@line 1129 "bufferedio.c"
        $res=$18; //@line 1129 "bufferedio.c"
        var $19=$res; //@line 1130 "bufferedio.c"
        var $20=($19)==0; //@line 1130 "bufferedio.c"
        if ($20) { __label__ = 26; break; } else { __label__ = 9; break; } //@line 1130 "bufferedio.c"
      case 9: // $bb8
        var $21=$res; //@line 1132 "bufferedio.c"
        var $22=($21)!=0; //@line 1132 "bufferedio.c"
        if ($22) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 1132 "bufferedio.c"
      case 10: // $bb9
        var $23=$res; //@line 1132 "bufferedio.c"
        $_py_tmp=$23; //@line 1132 "bufferedio.c"
        $res=0; //@line 1132 "bufferedio.c"
        var $24=$_py_tmp; //@line 1132 "bufferedio.c"
        var $25=$24; //@line 1132 "bufferedio.c"
        var $26=HEAP[$25]; //@line 1132 "bufferedio.c"
        var $27=($26) - 1; //@line 1132 "bufferedio.c"
        var $28=$_py_tmp; //@line 1132 "bufferedio.c"
        var $29=$28; //@line 1132 "bufferedio.c"
        HEAP[$29]=$27; //@line 1132 "bufferedio.c"
        var $30=$_py_tmp; //@line 1132 "bufferedio.c"
        var $31=$30; //@line 1132 "bufferedio.c"
        var $32=HEAP[$31]; //@line 1132 "bufferedio.c"
        var $33=($32)==0; //@line 1132 "bufferedio.c"
        if ($33) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1132 "bufferedio.c"
      case 11: // $bb10
        var $34=$_py_tmp; //@line 1132 "bufferedio.c"
        var $35=$34+4; //@line 1132 "bufferedio.c"
        var $36=HEAP[$35]; //@line 1132 "bufferedio.c"
        var $37=$36+24; //@line 1132 "bufferedio.c"
        var $38=HEAP[$37]; //@line 1132 "bufferedio.c"
        var $39=$_py_tmp; //@line 1132 "bufferedio.c"
        FUNCTION_TABLE[$38]($39); //@line 1132 "bufferedio.c"
        __label__ = 12; break; //@line 1132 "bufferedio.c"
      case 12: // $bb11
        var $40=$self_addr; //@line 1134 "bufferedio.c"
        var $41=$40+20; //@line 1134 "bufferedio.c"
        var $42=HEAP[$41]; //@line 1134 "bufferedio.c"
        var $43=($42)!=0; //@line 1134 "bufferedio.c"
        if ($43) { __label__ = 13; break; } else { __label__ = 23; break; } //@line 1134 "bufferedio.c"
      case 13: // $bb12
        var $44=HEAP[$pos]; //@line 1135 "bufferedio.c"
        var $45=($44)==(__Py_NoneStruct); //@line 1135 "bufferedio.c"
        if ($45) { __label__ = 14; break; } else { __label__ = 22; break; } //@line 1135 "bufferedio.c"
      case 14: // $bb13
        var $46=$self_addr; //@line 1138 "bufferedio.c"
        var $47=$46+20; //@line 1138 "bufferedio.c"
        var $48=HEAP[$47]; //@line 1138 "bufferedio.c"
        var $49=($48)==0; //@line 1138 "bufferedio.c"
        if ($49) { __label__ = 16; break; } else { __label__ = 15; break; } //@line 1138 "bufferedio.c"
      case 15: // $bb14
        var $50=$self_addr; //@line 1138 "bufferedio.c"
        var $51=$50+60; //@line 1138 "bufferedio.c"
        var $52=HEAP[$51]; //@line 1138 "bufferedio.c"
        var $53=($52)!=-1; //@line 1138 "bufferedio.c"
        if ($53) { __label__ = 18; break; } else { __label__ = 16; break; } //@line 1138 "bufferedio.c"
      case 16: // $bb15
        var $54=$self_addr; //@line 1138 "bufferedio.c"
        var $55=$54+24; //@line 1138 "bufferedio.c"
        var $56=HEAP[$55]; //@line 1138 "bufferedio.c"
        var $57=($56)==0; //@line 1138 "bufferedio.c"
        if ($57) { __label__ = 20; break; } else { __label__ = 17; break; } //@line 1138 "bufferedio.c"
      case 17: // $bb16
        var $58=$self_addr; //@line 1138 "bufferedio.c"
        var $59=$58+76; //@line 1138 "bufferedio.c"
        var $60=HEAP[$59]; //@line 1138 "bufferedio.c"
        var $61=($60)!=-1; //@line 1138 "bufferedio.c"
        if ($61) { __label__ = 18; break; } else { __label__ = 20; break; } //@line 1138 "bufferedio.c"
      case 18: // $bb17
        var $62=$self_addr; //@line 1138 "bufferedio.c"
        var $63=$62+52; //@line 1138 "bufferedio.c"
        var $64=HEAP[$63]; //@line 1138 "bufferedio.c"
        var $65=($64) < 0; //@line 1138 "bufferedio.c"
        if ($65) { __label__ = 20; break; } else { __label__ = 19; break; } //@line 1138 "bufferedio.c"
      case 19: // $bb18
        var $66=$self_addr; //@line 1138 "bufferedio.c"
        var $67=$66+44; //@line 1138 "bufferedio.c"
        var $68=HEAP[$67]; //@line 1138 "bufferedio.c"
        var $69=$self_addr; //@line 1138 "bufferedio.c"
        var $70=$69+52; //@line 1138 "bufferedio.c"
        var $71=HEAP[$70]; //@line 1138 "bufferedio.c"
        var $72=($68) - ($71); //@line 1138 "bufferedio.c"
        $iftmp_155=$72; //@line 1138 "bufferedio.c"
        __label__ = 21; break; //@line 1138 "bufferedio.c"
      case 20: // $bb19
        $iftmp_155=0; //@line 1138 "bufferedio.c"
        __label__ = 21; break; //@line 1138 "bufferedio.c"
      case 21: // $bb20
        var $73=$self_addr; //@line 1138 "bufferedio.c"
        var $74=$iftmp_155; //@line 1138 "bufferedio.c"
        var $75=__buffered_raw_seek($73, $74, 1); //@line 1138 "bufferedio.c"
        var $76=($75)==-1; //@line 1138 "bufferedio.c"
        if ($76) { __label__ = 26; break; } else { __label__ = 22; break; } //@line 1138 "bufferedio.c"
      case 22: // $bb21
        var $77=$self_addr; //@line 1141 "bufferedio.c"
        __bufferedreader_reset_buf($77); //@line 1141 "bufferedio.c"
        __label__ = 23; break; //@line 1141 "bufferedio.c"
      case 23: // $bb22
        var $78=HEAP[$pos]; //@line 1143 "bufferedio.c"
        var $79=HEAP[__PyIO_str_truncate]; //@line 1143 "bufferedio.c"
        var $80=$self_addr; //@line 1143 "bufferedio.c"
        var $81=$80+8; //@line 1143 "bufferedio.c"
        var $82=HEAP[$81]; //@line 1143 "bufferedio.c"
        var $83=_PyObject_CallMethodObjArgs($82, $79, allocate([$78,0,0,0,0,0,0,0], ["%struct.PyObject*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 1143 "bufferedio.c"
        $res=$83; //@line 1143 "bufferedio.c"
        var $84=($83)==0; //@line 1144 "bufferedio.c"
        if ($84) { __label__ = 26; break; } else { __label__ = 24; break; } //@line 1144 "bufferedio.c"
      case 24: // $bb23
        var $85=$self_addr; //@line 1147 "bufferedio.c"
        var $86=__buffered_raw_tell($85); //@line 1147 "bufferedio.c"
        var $87=($86)==-1; //@line 1147 "bufferedio.c"
        if ($87) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 1147 "bufferedio.c"
      case 25: // $bb24
        _PyErr_Clear(); //@line 1148 "bufferedio.c"
        __label__ = 26; break; //@line 1150 "bufferedio.c"
      case 26: // $end
        var $88=$res; //@line 1152 "bufferedio.c"
        $0=$88; //@line 1152 "bufferedio.c"
        __label__ = 27; break; //@line 1152 "bufferedio.c"
      case 27: // $bb25
        var $89=$0; //@line 1120 "bufferedio.c"
        $retval=$89; //@line 1120 "bufferedio.c"
        var $retval26=$retval; //@line 1120 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval26; //@line 1120 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_iternext($self) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $line;
        var $tp;
        $self_addr=$self;
        var $1=$self_addr; //@line 1161 "bufferedio.c"
        var $2=$1+12; //@line 1161 "bufferedio.c"
        var $3=HEAP[$2]; //@line 1161 "bufferedio.c"
        var $4=($3) <= 0; //@line 1161 "bufferedio.c"
        var $5=$self_addr; //@line 1161 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 1161 "bufferedio.c"
      case 1: // $bb
        var $6=$5+16; //@line 1161 "bufferedio.c"
        var $7=HEAP[$6]; //@line 1161 "bufferedio.c"
        var $8=($7)!=0; //@line 1161 "bufferedio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 1161 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1161 "bufferedio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str11); //@line 1161 "bufferedio.c"
        __label__ = 4; break; //@line 1161 "bufferedio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str12); //@line 1161 "bufferedio.c"
        __label__ = 4; break; //@line 1161 "bufferedio.c"
      case 4: // $bb3
        $0=0; //@line 1161 "bufferedio.c"
        __label__ = 19; break; //@line 1161 "bufferedio.c"
      case 5: // $bb4
        var $10=$5; //@line 1163 "bufferedio.c"
        var $11=$10+4; //@line 1163 "bufferedio.c"
        var $12=HEAP[$11]; //@line 1163 "bufferedio.c"
        $tp=$12; //@line 1163 "bufferedio.c"
        var $13=$tp; //@line 1164 "bufferedio.c"
        var $14=($13)==(_PyBufferedReader_Type); //@line 1164 "bufferedio.c"
        var $15=$tp; //@line 1164 "bufferedio.c"
        var $16=($15)==(_PyBufferedRandom_Type); //@line 1164 "bufferedio.c"
        var $or_cond=($14) | ($16);
        if ($or_cond) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1164 "bufferedio.c"
      case 6: // $bb6
        var $17=$self_addr; //@line 1167 "bufferedio.c"
        var $18=__buffered_readline($17, -1); //@line 1167 "bufferedio.c"
        $line=$18; //@line 1167 "bufferedio.c"
        __lastLabel__ = 6; __label__ = 12; break; //@line 1167 "bufferedio.c"
      case 7: // $bb7
        var $19=HEAP[__PyIO_str_readline]; //@line 1170 "bufferedio.c"
        var $20=$self_addr; //@line 1170 "bufferedio.c"
        var $21=$20; //@line 1170 "bufferedio.c"
        var $22=_PyObject_CallMethodObjArgs($21, $19, allocate(4, "i8*", ALLOC_STACK)); //@line 1170 "bufferedio.c"
        $line=$22; //@line 1170 "bufferedio.c"
        var $23=$line; //@line 1172 "bufferedio.c"
        var $24=($23)!=0; //@line 1172 "bufferedio.c"
        if ($24) { __label__ = 8; break; } else { __label__ = 13; break; } //@line 1172 "bufferedio.c"
      case 8: // $bb8
        var $25=$line; //@line 1172 "bufferedio.c"
        var $26=$25+4; //@line 1172 "bufferedio.c"
        var $27=HEAP[$26]; //@line 1172 "bufferedio.c"
        var $28=$27+84; //@line 1172 "bufferedio.c"
        var $29=HEAP[$28]; //@line 1172 "bufferedio.c"
        var $30=($29) & 134217728; //@line 1172 "bufferedio.c"
        var $31=($30)==0; //@line 1172 "bufferedio.c"
        var $32=$line; //@line 1173 "bufferedio.c"
        if ($31) { __lastLabel__ = 8; __label__ = 9; break; } else { __lastLabel__ = 8; __label__ = 12; break; } //@line 1172 "bufferedio.c"
      case 9: // $bb9
        var $33=$32+4; //@line 1173 "bufferedio.c"
        var $34=HEAP[$33]; //@line 1173 "bufferedio.c"
        var $35=$34+12; //@line 1173 "bufferedio.c"
        var $36=HEAP[$35]; //@line 1173 "bufferedio.c"
        var $37=HEAP[_PyExc_IOError]; //@line 1173 "bufferedio.c"
        var $38=_PyErr_Format($37, __str32, allocate([$36,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 1173 "bufferedio.c"
        var $39=$line; //@line 1176 "bufferedio.c"
        var $40=$39; //@line 1176 "bufferedio.c"
        var $41=HEAP[$40]; //@line 1176 "bufferedio.c"
        var $42=($41) - 1; //@line 1176 "bufferedio.c"
        var $43=$line; //@line 1176 "bufferedio.c"
        var $44=$43; //@line 1176 "bufferedio.c"
        HEAP[$44]=$42; //@line 1176 "bufferedio.c"
        var $45=$line; //@line 1176 "bufferedio.c"
        var $46=$45; //@line 1176 "bufferedio.c"
        var $47=HEAP[$46]; //@line 1176 "bufferedio.c"
        var $48=($47)==0; //@line 1176 "bufferedio.c"
        if ($48) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1176 "bufferedio.c"
      case 10: // $bb10
        var $49=$line; //@line 1176 "bufferedio.c"
        var $50=$49+4; //@line 1176 "bufferedio.c"
        var $51=HEAP[$50]; //@line 1176 "bufferedio.c"
        var $52=$51+24; //@line 1176 "bufferedio.c"
        var $53=HEAP[$52]; //@line 1176 "bufferedio.c"
        var $54=$line; //@line 1176 "bufferedio.c"
        FUNCTION_TABLE[$53]($54); //@line 1176 "bufferedio.c"
        __label__ = 11; break; //@line 1176 "bufferedio.c"
      case 11: // $bb11
        $0=0; //@line 1177 "bufferedio.c"
        __label__ = 19; break; //@line 1177 "bufferedio.c"
      case 12: // $bb12
        var $55=__lastLabel__ == 6 ? $18 : ($32);
        var $56=($55)==0; //@line 1181 "bufferedio.c"
        if ($56) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1181 "bufferedio.c"
      case 13: // $bb13
        $0=0; //@line 1182 "bufferedio.c"
        __label__ = 19; break; //@line 1182 "bufferedio.c"
      case 14: // $bb14
        var $57=$line; //@line 1184 "bufferedio.c"
        var $58=$57; //@line 1184 "bufferedio.c"
        var $59=$58+8; //@line 1184 "bufferedio.c"
        var $60=HEAP[$59]; //@line 1184 "bufferedio.c"
        var $61=($60)==0; //@line 1184 "bufferedio.c"
        var $62=$line; //@line 1186 "bufferedio.c"
        if ($61) { __label__ = 15; break; } else { __label__ = 18; break; } //@line 1184 "bufferedio.c"
      case 15: // $bb15
        var $63=$62; //@line 1186 "bufferedio.c"
        var $64=HEAP[$63]; //@line 1186 "bufferedio.c"
        var $65=($64) - 1; //@line 1186 "bufferedio.c"
        var $66=$line; //@line 1186 "bufferedio.c"
        var $67=$66; //@line 1186 "bufferedio.c"
        HEAP[$67]=$65; //@line 1186 "bufferedio.c"
        var $68=$line; //@line 1186 "bufferedio.c"
        var $69=$68; //@line 1186 "bufferedio.c"
        var $70=HEAP[$69]; //@line 1186 "bufferedio.c"
        var $71=($70)==0; //@line 1186 "bufferedio.c"
        if ($71) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 1186 "bufferedio.c"
      case 16: // $bb16
        var $72=$line; //@line 1186 "bufferedio.c"
        var $73=$72+4; //@line 1186 "bufferedio.c"
        var $74=HEAP[$73]; //@line 1186 "bufferedio.c"
        var $75=$74+24; //@line 1186 "bufferedio.c"
        var $76=HEAP[$75]; //@line 1186 "bufferedio.c"
        var $77=$line; //@line 1186 "bufferedio.c"
        FUNCTION_TABLE[$76]($77); //@line 1186 "bufferedio.c"
        __label__ = 17; break; //@line 1186 "bufferedio.c"
      case 17: // $bb17
        $0=0; //@line 1187 "bufferedio.c"
        __label__ = 19; break; //@line 1187 "bufferedio.c"
      case 18: // $bb18
        $0=$62; //@line 1190 "bufferedio.c"
        __label__ = 19; break; //@line 1190 "bufferedio.c"
      case 19: // $bb19
        var $78=$0; //@line 1161 "bufferedio.c"
        $retval=$78; //@line 1161 "bufferedio.c"
        var $retval20=$retval; //@line 1161 "bufferedio.c"
        ;
        return $retval20; //@line 1161 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _buffered_repr($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $nameobj;
        var $res;
        var $repr;
        $self_addr=$self;
        var $1=$self_addr; //@line 1198 "bufferedio.c"
        var $2=$1; //@line 1198 "bufferedio.c"
        var $3=_PyObject_GetAttrString($2, __str13); //@line 1198 "bufferedio.c"
        $nameobj=$3; //@line 1198 "bufferedio.c"
        var $4=$nameobj; //@line 1199 "bufferedio.c"
        var $5=($4)==0; //@line 1199 "bufferedio.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 1199 "bufferedio.c"
      case 1: // $bb
        var $6=HEAP[_PyExc_AttributeError]; //@line 1200 "bufferedio.c"
        var $7=_PyErr_ExceptionMatches($6); //@line 1200 "bufferedio.c"
        var $8=($7)!=0; //@line 1200 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1200 "bufferedio.c"
      case 2: // $bb1
        _PyErr_Clear(); //@line 1201 "bufferedio.c"
        var $9=$self_addr; //@line 1204 "bufferedio.c"
        var $10=$9; //@line 1204 "bufferedio.c"
        var $11=$10+4; //@line 1204 "bufferedio.c"
        var $12=HEAP[$11]; //@line 1204 "bufferedio.c"
        var $13=$12+12; //@line 1204 "bufferedio.c"
        var $14=HEAP[$13]; //@line 1204 "bufferedio.c"
        var $15=_PyString_FromFormat(__str33, allocate([$14,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 1204 "bufferedio.c"
        $res=$15; //@line 1204 "bufferedio.c"
        __label__ = 10; break; //@line 1204 "bufferedio.c"
      case 3: // $bb2
        $0=0; //@line 1203 "bufferedio.c"
        __label__ = 11; break; //@line 1203 "bufferedio.c"
      case 4: // $bb3
        var $16=$nameobj; //@line 1207 "bufferedio.c"
        var $17=_PyObject_Repr($16); //@line 1207 "bufferedio.c"
        $repr=$17; //@line 1207 "bufferedio.c"
        var $18=$nameobj; //@line 1208 "bufferedio.c"
        var $19=$18; //@line 1208 "bufferedio.c"
        var $20=HEAP[$19]; //@line 1208 "bufferedio.c"
        var $21=($20) - 1; //@line 1208 "bufferedio.c"
        var $22=$nameobj; //@line 1208 "bufferedio.c"
        var $23=$22; //@line 1208 "bufferedio.c"
        HEAP[$23]=$21; //@line 1208 "bufferedio.c"
        var $24=$nameobj; //@line 1208 "bufferedio.c"
        var $25=$24; //@line 1208 "bufferedio.c"
        var $26=HEAP[$25]; //@line 1208 "bufferedio.c"
        var $27=($26)==0; //@line 1208 "bufferedio.c"
        if ($27) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1208 "bufferedio.c"
      case 5: // $bb4
        var $28=$nameobj; //@line 1208 "bufferedio.c"
        var $29=$28+4; //@line 1208 "bufferedio.c"
        var $30=HEAP[$29]; //@line 1208 "bufferedio.c"
        var $31=$30+24; //@line 1208 "bufferedio.c"
        var $32=HEAP[$31]; //@line 1208 "bufferedio.c"
        var $33=$nameobj; //@line 1208 "bufferedio.c"
        FUNCTION_TABLE[$32]($33); //@line 1208 "bufferedio.c"
        __label__ = 6; break; //@line 1208 "bufferedio.c"
      case 6: // $bb5
        var $34=$repr; //@line 1209 "bufferedio.c"
        var $35=($34)==0; //@line 1209 "bufferedio.c"
        if ($35) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1209 "bufferedio.c"
      case 7: // $bb6
        $0=0; //@line 1210 "bufferedio.c"
        __label__ = 11; break; //@line 1210 "bufferedio.c"
      case 8: // $bb7
        var $36=$repr; //@line 1211 "bufferedio.c"
        var $37=$36; //@line 1211 "bufferedio.c"
        var $38=$37+20; //@line 1211 "bufferedio.c"
        var $39=$38; //@line 1211 "bufferedio.c"
        var $40=$self_addr; //@line 1211 "bufferedio.c"
        var $41=$40; //@line 1211 "bufferedio.c"
        var $42=$41+4; //@line 1211 "bufferedio.c"
        var $43=HEAP[$42]; //@line 1211 "bufferedio.c"
        var $44=$43+12; //@line 1211 "bufferedio.c"
        var $45=HEAP[$44]; //@line 1211 "bufferedio.c"
        var $46=_PyString_FromFormat(__str34, allocate([$45,0,0,0,$39,0,0,0], ["i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 1211 "bufferedio.c"
        $res=$46; //@line 1211 "bufferedio.c"
        var $47=$repr; //@line 1214 "bufferedio.c"
        var $48=$47; //@line 1214 "bufferedio.c"
        var $49=HEAP[$48]; //@line 1214 "bufferedio.c"
        var $50=($49) - 1; //@line 1214 "bufferedio.c"
        var $51=$repr; //@line 1214 "bufferedio.c"
        var $52=$51; //@line 1214 "bufferedio.c"
        HEAP[$52]=$50; //@line 1214 "bufferedio.c"
        var $53=$repr; //@line 1214 "bufferedio.c"
        var $54=$53; //@line 1214 "bufferedio.c"
        var $55=HEAP[$54]; //@line 1214 "bufferedio.c"
        var $56=($55)==0; //@line 1214 "bufferedio.c"
        if ($56) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1214 "bufferedio.c"
      case 9: // $bb8
        var $57=$repr; //@line 1214 "bufferedio.c"
        var $58=$57+4; //@line 1214 "bufferedio.c"
        var $59=HEAP[$58]; //@line 1214 "bufferedio.c"
        var $60=$59+24; //@line 1214 "bufferedio.c"
        var $61=HEAP[$60]; //@line 1214 "bufferedio.c"
        var $62=$repr; //@line 1214 "bufferedio.c"
        FUNCTION_TABLE[$61]($62); //@line 1214 "bufferedio.c"
        __label__ = 10; break; //@line 1214 "bufferedio.c"
      case 10: // $bb9
        var $63=$res; //@line 1216 "bufferedio.c"
        $0=$63; //@line 1216 "bufferedio.c"
        __label__ = 11; break; //@line 1216 "bufferedio.c"
      case 11: // $bb10
        var $64=$0; //@line 1203 "bufferedio.c"
        $retval=$64; //@line 1203 "bufferedio.c"
        var $retval11=$retval; //@line 1203 "bufferedio.c"
        ;
        return $retval11; //@line 1203 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __bufferedreader_reset_buf($self) {
    ;
    var __label__;
  
    var $self_addr;
    $self_addr=$self;
    var $0=$self_addr; //@line 1228 "bufferedio.c"
    var $1=$0+60; //@line 1228 "bufferedio.c"
    HEAP[$1]=-1; //@line 1228 "bufferedio.c"
    ;
    return; //@line 1229 "bufferedio.c"
  }
  

  function _bufferedreader_init($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $kwds_addr;
        var $retval;
        var $iftmp_176;
        var $0;
        var $kwlist=__stackBase__;
        var $buffer_size=__stackBase__+12;
        var $raw=__stackBase__+16;
        var $_py_tmp;
        $self_addr=$self;
        $args_addr=$args;
        $kwds_addr=$kwds;
        var $1=$kwlist; //@line 1234 "bufferedio.c"
        HEAP[$1]=__str35; //@line 1234 "bufferedio.c"
        var $2=$kwlist+4; //@line 1234 "bufferedio.c"
        HEAP[$2]=__str36; //@line 1234 "bufferedio.c"
        var $3=$kwlist+8; //@line 1234 "bufferedio.c"
        HEAP[$3]=0; //@line 1234 "bufferedio.c"
        HEAP[$buffer_size]=8192; //@line 1235 "bufferedio.c"
        var $4=$self_addr; //@line 1238 "bufferedio.c"
        var $5=$4+12; //@line 1238 "bufferedio.c"
        HEAP[$5]=0; //@line 1238 "bufferedio.c"
        var $6=$self_addr; //@line 1239 "bufferedio.c"
        var $7=$6+16; //@line 1239 "bufferedio.c"
        HEAP[$7]=0; //@line 1239 "bufferedio.c"
        var $8=$args_addr; //@line 1241 "bufferedio.c"
        var $9=$kwds_addr; //@line 1241 "bufferedio.c"
        var $kwlist1=$kwlist; //@line 1241 "bufferedio.c"
        var $10=__PyArg_ParseTupleAndKeywords_SizeT($8, $9, __str37, $kwlist1, allocate([$raw,0,0,0,$buffer_size,0,0,0], ["%struct.PyObject**",0,0,0,"i32*",0,0,0], ALLOC_STACK)); //@line 1241 "bufferedio.c"
        var $11=($10)==0; //@line 1241 "bufferedio.c"
        if ($11) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1241 "bufferedio.c"
      case 1: // $bb
        $0=-1; //@line 1243 "bufferedio.c"
        __label__ = 14; break; //@line 1243 "bufferedio.c"
      case 2: // $bb2
        var $12=HEAP[$raw]; //@line 1246 "bufferedio.c"
        var $13=__PyIOBase_check_readable($12, __Py_TrueStruct); //@line 1246 "bufferedio.c"
        var $14=($13)==0; //@line 1246 "bufferedio.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1246 "bufferedio.c"
      case 3: // $bb3
        $0=-1; //@line 1247 "bufferedio.c"
        __label__ = 14; break; //@line 1247 "bufferedio.c"
      case 4: // $bb4
        var $15=$self_addr; //@line 1249 "bufferedio.c"
        var $16=$15+8; //@line 1249 "bufferedio.c"
        var $17=HEAP[$16]; //@line 1249 "bufferedio.c"
        var $18=($17)!=0; //@line 1249 "bufferedio.c"
        if ($18) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 1249 "bufferedio.c"
      case 5: // $bb5
        var $19=$self_addr; //@line 1249 "bufferedio.c"
        var $20=$19+8; //@line 1249 "bufferedio.c"
        var $21=HEAP[$20]; //@line 1249 "bufferedio.c"
        $_py_tmp=$21; //@line 1249 "bufferedio.c"
        var $22=$self_addr; //@line 1249 "bufferedio.c"
        var $23=$22+8; //@line 1249 "bufferedio.c"
        HEAP[$23]=0; //@line 1249 "bufferedio.c"
        var $24=$_py_tmp; //@line 1249 "bufferedio.c"
        var $25=$24; //@line 1249 "bufferedio.c"
        var $26=HEAP[$25]; //@line 1249 "bufferedio.c"
        var $27=($26) - 1; //@line 1249 "bufferedio.c"
        var $28=$_py_tmp; //@line 1249 "bufferedio.c"
        var $29=$28; //@line 1249 "bufferedio.c"
        HEAP[$29]=$27; //@line 1249 "bufferedio.c"
        var $30=$_py_tmp; //@line 1249 "bufferedio.c"
        var $31=$30; //@line 1249 "bufferedio.c"
        var $32=HEAP[$31]; //@line 1249 "bufferedio.c"
        var $33=($32)==0; //@line 1249 "bufferedio.c"
        if ($33) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1249 "bufferedio.c"
      case 6: // $bb6
        var $34=$_py_tmp; //@line 1249 "bufferedio.c"
        var $35=$34+4; //@line 1249 "bufferedio.c"
        var $36=HEAP[$35]; //@line 1249 "bufferedio.c"
        var $37=$36+24; //@line 1249 "bufferedio.c"
        var $38=HEAP[$37]; //@line 1249 "bufferedio.c"
        var $39=$_py_tmp; //@line 1249 "bufferedio.c"
        FUNCTION_TABLE[$38]($39); //@line 1249 "bufferedio.c"
        __label__ = 7; break; //@line 1249 "bufferedio.c"
      case 7: // $bb7
        var $40=HEAP[$raw]; //@line 1250 "bufferedio.c"
        var $41=$40; //@line 1250 "bufferedio.c"
        var $42=HEAP[$41]; //@line 1250 "bufferedio.c"
        var $43=($42) + 1; //@line 1250 "bufferedio.c"
        var $44=$40; //@line 1250 "bufferedio.c"
        HEAP[$44]=$43; //@line 1250 "bufferedio.c"
        var $45=HEAP[$raw]; //@line 1251 "bufferedio.c"
        var $46=$self_addr; //@line 1251 "bufferedio.c"
        var $47=$46+8; //@line 1251 "bufferedio.c"
        HEAP[$47]=$45; //@line 1251 "bufferedio.c"
        var $48=HEAP[$buffer_size]; //@line 1252 "bufferedio.c"
        var $49=$self_addr; //@line 1252 "bufferedio.c"
        var $50=$49+84; //@line 1252 "bufferedio.c"
        HEAP[$50]=$48; //@line 1252 "bufferedio.c"
        var $51=$self_addr; //@line 1253 "bufferedio.c"
        var $52=$51+20; //@line 1253 "bufferedio.c"
        HEAP[$52]=1; //@line 1253 "bufferedio.c"
        var $53=$self_addr; //@line 1254 "bufferedio.c"
        var $54=$53+24; //@line 1254 "bufferedio.c"
        HEAP[$54]=0; //@line 1254 "bufferedio.c"
        var $55=$self_addr; //@line 1256 "bufferedio.c"
        var $56=__buffered_init($55); //@line 1256 "bufferedio.c"
        var $57=($56) < 0; //@line 1256 "bufferedio.c"
        if ($57) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1256 "bufferedio.c"
      case 8: // $bb8
        $0=-1; //@line 1257 "bufferedio.c"
        __label__ = 14; break; //@line 1257 "bufferedio.c"
      case 9: // $bb9
        var $58=$self_addr; //@line 1258 "bufferedio.c"
        __bufferedreader_reset_buf($58); //@line 1258 "bufferedio.c"
        var $59=$self_addr; //@line 1260 "bufferedio.c"
        var $60=$59; //@line 1260 "bufferedio.c"
        var $61=$60+4; //@line 1260 "bufferedio.c"
        var $62=HEAP[$61]; //@line 1260 "bufferedio.c"
        var $63=($62)!=(_PyBufferedReader_Type); //@line 1260 "bufferedio.c"
        if ($63) { __label__ = 12; break; } else { __label__ = 10; break; } //@line 1260 "bufferedio.c"
      case 10: // $bb10
        var $64=HEAP[$raw]; //@line 1260 "bufferedio.c"
        var $65=$64+4; //@line 1260 "bufferedio.c"
        var $66=HEAP[$65]; //@line 1260 "bufferedio.c"
        var $67=($66)!=(_PyFileIO_Type); //@line 1260 "bufferedio.c"
        if ($67) { __label__ = 12; break; } else { __label__ = 11; break; } //@line 1260 "bufferedio.c"
      case 11: // $bb11
        $iftmp_176=1; //@line 1260 "bufferedio.c"
        __label__ = 13; break; //@line 1260 "bufferedio.c"
      case 12: // $bb12
        $iftmp_176=0; //@line 1260 "bufferedio.c"
        __label__ = 13; break; //@line 1260 "bufferedio.c"
      case 13: // $bb13
        var $68=$self_addr; //@line 1260 "bufferedio.c"
        var $69=$68+28; //@line 1260 "bufferedio.c"
        var $70=$iftmp_176; //@line 1260 "bufferedio.c"
        HEAP[$69]=$70; //@line 1260 "bufferedio.c"
        var $71=$self_addr; //@line 1263 "bufferedio.c"
        var $72=$71+12; //@line 1263 "bufferedio.c"
        HEAP[$72]=1; //@line 1263 "bufferedio.c"
        $0=0; //@line 1264 "bufferedio.c"
        __label__ = 14; break; //@line 1264 "bufferedio.c"
      case 14: // $bb14
        var $73=$0; //@line 1243 "bufferedio.c"
        $retval=$73; //@line 1243 "bufferedio.c"
        var $retval15=$retval; //@line 1243 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval15; //@line 1243 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __bufferedreader_raw_read($self, $start, $len) {
    var __stackBase__  = STACKTOP; STACKTOP += 52; _memset(__stackBase__, 0, 52);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $start_addr;
        var $len_addr;
        var $retval;
        var $0;
        var $buf=__stackBase__;
        var $memobj;
        var $res;
        var $n;
        $self_addr=$self;
        $start_addr=$start;
        $len_addr=$len;
        var $1=$start_addr; //@line 1274 "bufferedio.c"
        var $2=$len_addr; //@line 1274 "bufferedio.c"
        var $3=_PyBuffer_FillInfo($buf, 0, $1, $2, 0, 9); //@line 1274 "bufferedio.c"
        var $4=($3)==-1; //@line 1274 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1274 "bufferedio.c"
      case 1: // $bb
        $0=-1; //@line 1275 "bufferedio.c"
        __label__ = 23; break; //@line 1275 "bufferedio.c"
      case 2: // $bb1
        var $5=_PyMemoryView_FromBuffer($buf); //@line 1276 "bufferedio.c"
        $memobj=$5; //@line 1276 "bufferedio.c"
        var $6=$memobj; //@line 1277 "bufferedio.c"
        var $7=($6)==0; //@line 1277 "bufferedio.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1277 "bufferedio.c"
      case 3: // $bb2
        $0=-1; //@line 1278 "bufferedio.c"
        __label__ = 23; break; //@line 1278 "bufferedio.c"
      case 4: // $bb3
        var $8=HEAP[__PyIO_str_readinto]; //@line 1285 "bufferedio.c"
        var $9=$self_addr; //@line 1285 "bufferedio.c"
        var $10=$9+8; //@line 1285 "bufferedio.c"
        var $11=HEAP[$10]; //@line 1285 "bufferedio.c"
        var $12=$memobj; //@line 1285 "bufferedio.c"
        var $13=_PyObject_CallMethodObjArgs($11, $8, allocate([$12,0,0,0,0,0,0,0], ["%struct.PyObject*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 1285 "bufferedio.c"
        $res=$13; //@line 1285 "bufferedio.c"
        var $14=($13)!=0; //@line 1286 "bufferedio.c"
        if ($14) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 1286 "bufferedio.c"
      case 5: // $bb4
        var $15=__trap_eintr(); //@line 1286 "bufferedio.c"
        var $16=($15)!=0; //@line 1286 "bufferedio.c"
        if ($16) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 1286 "bufferedio.c"
      case 6: // $bb5
        var $17=$memobj; //@line 1287 "bufferedio.c"
        var $18=$17; //@line 1287 "bufferedio.c"
        var $19=HEAP[$18]; //@line 1287 "bufferedio.c"
        var $20=($19) - 1; //@line 1287 "bufferedio.c"
        var $21=$memobj; //@line 1287 "bufferedio.c"
        var $22=$21; //@line 1287 "bufferedio.c"
        HEAP[$22]=$20; //@line 1287 "bufferedio.c"
        var $23=$memobj; //@line 1287 "bufferedio.c"
        var $24=$23; //@line 1287 "bufferedio.c"
        var $25=HEAP[$24]; //@line 1287 "bufferedio.c"
        var $26=($25)==0; //@line 1287 "bufferedio.c"
        if ($26) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1287 "bufferedio.c"
      case 7: // $bb6
        var $27=$memobj; //@line 1287 "bufferedio.c"
        var $28=$27+4; //@line 1287 "bufferedio.c"
        var $29=HEAP[$28]; //@line 1287 "bufferedio.c"
        var $30=$29+24; //@line 1287 "bufferedio.c"
        var $31=HEAP[$30]; //@line 1287 "bufferedio.c"
        var $32=$memobj; //@line 1287 "bufferedio.c"
        FUNCTION_TABLE[$31]($32); //@line 1287 "bufferedio.c"
        __label__ = 8; break; //@line 1287 "bufferedio.c"
      case 8: // $bb7
        var $33=$res; //@line 1288 "bufferedio.c"
        var $34=($33)==0; //@line 1288 "bufferedio.c"
        if ($34) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1288 "bufferedio.c"
      case 9: // $bb8
        $0=-1; //@line 1289 "bufferedio.c"
        __label__ = 23; break; //@line 1289 "bufferedio.c"
      case 10: // $bb9
        var $35=$res; //@line 1290 "bufferedio.c"
        var $36=($35)==(__Py_NoneStruct); //@line 1290 "bufferedio.c"
        if ($36) { __label__ = 11; break; } else { __label__ = 14; break; } //@line 1290 "bufferedio.c"
      case 11: // $bb10
        var $37=$res; //@line 1292 "bufferedio.c"
        var $38=$37; //@line 1292 "bufferedio.c"
        var $39=HEAP[$38]; //@line 1292 "bufferedio.c"
        var $40=($39) - 1; //@line 1292 "bufferedio.c"
        var $41=$res; //@line 1292 "bufferedio.c"
        var $42=$41; //@line 1292 "bufferedio.c"
        HEAP[$42]=$40; //@line 1292 "bufferedio.c"
        var $43=$res; //@line 1292 "bufferedio.c"
        var $44=$43; //@line 1292 "bufferedio.c"
        var $45=HEAP[$44]; //@line 1292 "bufferedio.c"
        var $46=($45)==0; //@line 1292 "bufferedio.c"
        if ($46) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1292 "bufferedio.c"
      case 12: // $bb11
        var $47=$res; //@line 1292 "bufferedio.c"
        var $48=$47+4; //@line 1292 "bufferedio.c"
        var $49=HEAP[$48]; //@line 1292 "bufferedio.c"
        var $50=$49+24; //@line 1292 "bufferedio.c"
        var $51=HEAP[$50]; //@line 1292 "bufferedio.c"
        var $52=$res; //@line 1292 "bufferedio.c"
        FUNCTION_TABLE[$51]($52); //@line 1292 "bufferedio.c"
        __label__ = 13; break; //@line 1292 "bufferedio.c"
      case 13: // $bb12
        $0=-2; //@line 1293 "bufferedio.c"
        __label__ = 23; break; //@line 1293 "bufferedio.c"
      case 14: // $bb13
        var $53=HEAP[_PyExc_ValueError]; //@line 1295 "bufferedio.c"
        var $54=$res; //@line 1295 "bufferedio.c"
        var $55=_PyNumber_AsSsize_t($54, $53); //@line 1295 "bufferedio.c"
        $n=$55; //@line 1295 "bufferedio.c"
        var $56=$res; //@line 1296 "bufferedio.c"
        var $57=$56; //@line 1296 "bufferedio.c"
        var $58=HEAP[$57]; //@line 1296 "bufferedio.c"
        var $59=($58) - 1; //@line 1296 "bufferedio.c"
        var $60=$res; //@line 1296 "bufferedio.c"
        var $61=$60; //@line 1296 "bufferedio.c"
        HEAP[$61]=$59; //@line 1296 "bufferedio.c"
        var $62=$res; //@line 1296 "bufferedio.c"
        var $63=$62; //@line 1296 "bufferedio.c"
        var $64=HEAP[$63]; //@line 1296 "bufferedio.c"
        var $65=($64)==0; //@line 1296 "bufferedio.c"
        if ($65) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 1296 "bufferedio.c"
      case 15: // $bb14
        var $66=$res; //@line 1296 "bufferedio.c"
        var $67=$66+4; //@line 1296 "bufferedio.c"
        var $68=HEAP[$67]; //@line 1296 "bufferedio.c"
        var $69=$68+24; //@line 1296 "bufferedio.c"
        var $70=HEAP[$69]; //@line 1296 "bufferedio.c"
        var $71=$res; //@line 1296 "bufferedio.c"
        FUNCTION_TABLE[$70]($71); //@line 1296 "bufferedio.c"
        __label__ = 16; break; //@line 1296 "bufferedio.c"
      case 16: // $bb15
        var $72=$n; //@line 1297 "bufferedio.c"
        var $73=($72) < 0; //@line 1297 "bufferedio.c"
        if ($73) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 1297 "bufferedio.c"
      case 17: // $bb16
        var $74=$n; //@line 1297 "bufferedio.c"
        var $75=$len_addr; //@line 1297 "bufferedio.c"
        var $76=($74) > ($75); //@line 1297 "bufferedio.c"
        if ($76) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 1297 "bufferedio.c"
      case 18: // $bb17
        var $77=HEAP[_PyExc_IOError]; //@line 1298 "bufferedio.c"
        var $78=$n; //@line 1298 "bufferedio.c"
        var $79=$len_addr; //@line 1298 "bufferedio.c"
        var $80=_PyErr_Format($77, __str38, allocate([$78,0,0,0,$79,0,0,0], ["i32",0,0,0,"i32",0,0,0], ALLOC_STACK)); //@line 1298 "bufferedio.c"
        $0=-1; //@line 1301 "bufferedio.c"
        __label__ = 23; break; //@line 1301 "bufferedio.c"
      case 19: // $bb18
        var $81=$n; //@line 1303 "bufferedio.c"
        var $82=($81) > 0; //@line 1303 "bufferedio.c"
        if ($82) { __label__ = 20; break; } else { __label__ = 22; break; } //@line 1303 "bufferedio.c"
      case 20: // $bb19
        var $83=$self_addr; //@line 1303 "bufferedio.c"
        var $84=$83+32; //@line 1303 "bufferedio.c"
        var $85=HEAP[$84]; //@line 1303 "bufferedio.c"
        var $86=($85)!=-1; //@line 1303 "bufferedio.c"
        if ($86) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 1303 "bufferedio.c"
      case 21: // $bb20
        var $87=$self_addr; //@line 1304 "bufferedio.c"
        var $88=$87+32; //@line 1304 "bufferedio.c"
        var $89=HEAP[$88]; //@line 1304 "bufferedio.c"
        var $90=$n; //@line 1304 "bufferedio.c"
        var $91=($90); //@line 1304 "bufferedio.c"
        var $92=($91) + ($89); //@line 1304 "bufferedio.c"
        var $93=$self_addr; //@line 1304 "bufferedio.c"
        var $94=$93+32; //@line 1304 "bufferedio.c"
        HEAP[$94]=$92; //@line 1304 "bufferedio.c"
        __label__ = 22; break; //@line 1304 "bufferedio.c"
      case 22: // $bb21
        var $95=$n; //@line 1305 "bufferedio.c"
        $0=$95; //@line 1305 "bufferedio.c"
        __label__ = 23; break; //@line 1305 "bufferedio.c"
      case 23: // $bb22
        var $96=$0; //@line 1275 "bufferedio.c"
        $retval=$96; //@line 1275 "bufferedio.c"
        var $retval23=$retval; //@line 1275 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval23; //@line 1275 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __bufferedreader_fill_buffer($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $start;
        var $len;
        var $n;
        $self_addr=$self;
        var $1=$self_addr; //@line 1312 "bufferedio.c"
        var $2=$1+20; //@line 1312 "bufferedio.c"
        var $3=HEAP[$2]; //@line 1312 "bufferedio.c"
        var $4=($3)==0; //@line 1312 "bufferedio.c"
        if ($4) { __label__ = 3; break; } else { __label__ = 1; break; } //@line 1312 "bufferedio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 1312 "bufferedio.c"
        var $6=$5+60; //@line 1312 "bufferedio.c"
        var $7=HEAP[$6]; //@line 1312 "bufferedio.c"
        var $8=($7)==-1; //@line 1312 "bufferedio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 1312 "bufferedio.c"
      case 2: // $bb1
        var $9=$self_addr; //@line 1313 "bufferedio.c"
        var $10=$9+60; //@line 1313 "bufferedio.c"
        var $11=HEAP[$10]; //@line 1313 "bufferedio.c"
        var $12=((($11)) & 4294967295); //@line 1313 "bufferedio.c"
        $start=$12; //@line 1313 "bufferedio.c"
        __label__ = 4; break; //@line 1313 "bufferedio.c"
      case 3: // $bb2
        $start=0; //@line 1315 "bufferedio.c"
        __label__ = 4; break; //@line 1315 "bufferedio.c"
      case 4: // $bb3
        var $13=$self_addr; //@line 1316 "bufferedio.c"
        var $14=$13+84; //@line 1316 "bufferedio.c"
        var $15=HEAP[$14]; //@line 1316 "bufferedio.c"
        var $16=$start; //@line 1316 "bufferedio.c"
        var $17=($15) - ($16); //@line 1316 "bufferedio.c"
        $len=$17; //@line 1316 "bufferedio.c"
        var $18=$self_addr; //@line 1317 "bufferedio.c"
        var $19=$18+40; //@line 1317 "bufferedio.c"
        var $20=HEAP[$19]; //@line 1317 "bufferedio.c"
        var $21=$start; //@line 1317 "bufferedio.c"
        var $22=$20+$21; //@line 1317 "bufferedio.c"
        var $23=$self_addr; //@line 1317 "bufferedio.c"
        var $24=$len; //@line 1317 "bufferedio.c"
        var $25=__bufferedreader_raw_read($23, $22, $24); //@line 1317 "bufferedio.c"
        $n=$25; //@line 1317 "bufferedio.c"
        var $26=($25) <= 0; //@line 1318 "bufferedio.c"
        if ($26) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1318 "bufferedio.c"
      case 5: // $bb4
        var $27=$n; //@line 1319 "bufferedio.c"
        $0=$27; //@line 1319 "bufferedio.c"
        __label__ = 7; break; //@line 1319 "bufferedio.c"
      case 6: // $bb5
        var $28=$start; //@line 1320 "bufferedio.c"
        var $29=$n; //@line 1320 "bufferedio.c"
        var $30=($29) + ($28); //@line 1320 "bufferedio.c"
        var $31=($30); //@line 1320 "bufferedio.c"
        var $32=$self_addr; //@line 1320 "bufferedio.c"
        var $33=$32+60; //@line 1320 "bufferedio.c"
        HEAP[$33]=$31; //@line 1320 "bufferedio.c"
        var $34=$start; //@line 1321 "bufferedio.c"
        var $35=$n; //@line 1321 "bufferedio.c"
        var $36=($35) + ($34); //@line 1321 "bufferedio.c"
        var $37=($36); //@line 1321 "bufferedio.c"
        var $38=$self_addr; //@line 1321 "bufferedio.c"
        var $39=$38+52; //@line 1321 "bufferedio.c"
        HEAP[$39]=$37; //@line 1321 "bufferedio.c"
        var $40=$n; //@line 1322 "bufferedio.c"
        $0=$40; //@line 1322 "bufferedio.c"
        __label__ = 7; break; //@line 1322 "bufferedio.c"
      case 7: // $bb6
        var $41=$0; //@line 1319 "bufferedio.c"
        $retval=$41; //@line 1319 "bufferedio.c"
        var $retval7=$retval; //@line 1319 "bufferedio.c"
        ;
        return $retval7; //@line 1319 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __bufferedreader_read_all($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $iftmp_182;
        var $0;
        var $current_size;
        var $res;
        var $data;
        var $chunks;
        var $_py_tmp;
        $self_addr=$self;
        $data=0; //@line 1329 "bufferedio.c"
        var $1=_PyList_New(0); //@line 1330 "bufferedio.c"
        $chunks=$1; //@line 1330 "bufferedio.c"
        var $2=$chunks; //@line 1332 "bufferedio.c"
        var $3=($2)==0; //@line 1332 "bufferedio.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1332 "bufferedio.c"
      case 1: // $bb
        $0=0; //@line 1333 "bufferedio.c"
        __label__ = 52; break; //@line 1333 "bufferedio.c"
      case 2: // $bb1
        var $4=$self_addr; //@line 1336 "bufferedio.c"
        var $5=$4+20; //@line 1336 "bufferedio.c"
        var $6=HEAP[$5]; //@line 1336 "bufferedio.c"
        var $7=($6)==0; //@line 1336 "bufferedio.c"
        if ($7) { __label__ = 5; break; } else { __label__ = 3; break; } //@line 1336 "bufferedio.c"
      case 3: // $bb2
        var $8=$self_addr; //@line 1336 "bufferedio.c"
        var $9=$8+20; //@line 1336 "bufferedio.c"
        var $10=HEAP[$9]; //@line 1336 "bufferedio.c"
        var $11=($10)==0; //@line 1336 "bufferedio.c"
        if ($11) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 1336 "bufferedio.c"
      case 4: // $bb3
        var $12=$self_addr; //@line 1336 "bufferedio.c"
        var $13=$12+60; //@line 1336 "bufferedio.c"
        var $14=HEAP[$13]; //@line 1336 "bufferedio.c"
        var $15=($14)==-1; //@line 1336 "bufferedio.c"
        if ($15) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1336 "bufferedio.c"
      case 5: // $bb6_thread
        $iftmp_182=0; //@line 1336 "bufferedio.c"
        $current_size=0; //@line 1336 "bufferedio.c"
        __label__ = 11; break;
      case 6: // $bb6
        var $16=$self_addr; //@line 1336 "bufferedio.c"
        var $17=$16+60; //@line 1336 "bufferedio.c"
        var $18=HEAP[$17]; //@line 1336 "bufferedio.c"
        var $19=((($18)) & 4294967295); //@line 1336 "bufferedio.c"
        var $20=$self_addr; //@line 1336 "bufferedio.c"
        var $21=$20+44; //@line 1336 "bufferedio.c"
        var $22=HEAP[$21]; //@line 1336 "bufferedio.c"
        var $23=((($22)) & 4294967295); //@line 1336 "bufferedio.c"
        var $24=($19) - ($23); //@line 1336 "bufferedio.c"
        $iftmp_182=$24; //@line 1336 "bufferedio.c"
        $current_size=$24; //@line 1336 "bufferedio.c"
        var $25=($24)!=0; //@line 1337 "bufferedio.c"
        if ($25) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 1337 "bufferedio.c"
      case 7: // $bb7
        var $26=$self_addr; //@line 1338 "bufferedio.c"
        var $27=$26+40; //@line 1338 "bufferedio.c"
        var $28=HEAP[$27]; //@line 1338 "bufferedio.c"
        var $29=$self_addr; //@line 1338 "bufferedio.c"
        var $30=$29+44; //@line 1338 "bufferedio.c"
        var $31=HEAP[$30]; //@line 1338 "bufferedio.c"
        var $32=((($31)) & 4294967295); //@line 1338 "bufferedio.c"
        var $33=$28+$32; //@line 1338 "bufferedio.c"
        var $34=$current_size; //@line 1338 "bufferedio.c"
        var $35=_PyString_FromStringAndSize($33, $34); //@line 1338 "bufferedio.c"
        $data=$35; //@line 1338 "bufferedio.c"
        var $36=$data; //@line 1340 "bufferedio.c"
        var $37=($36)==0; //@line 1340 "bufferedio.c"
        if ($37) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 1340 "bufferedio.c"
      case 8: // $bb8
        var $38=$chunks; //@line 1341 "bufferedio.c"
        var $39=$38; //@line 1341 "bufferedio.c"
        var $40=HEAP[$39]; //@line 1341 "bufferedio.c"
        var $41=($40) - 1; //@line 1341 "bufferedio.c"
        var $42=$chunks; //@line 1341 "bufferedio.c"
        var $43=$42; //@line 1341 "bufferedio.c"
        HEAP[$43]=$41; //@line 1341 "bufferedio.c"
        var $44=$chunks; //@line 1341 "bufferedio.c"
        var $45=$44; //@line 1341 "bufferedio.c"
        var $46=HEAP[$45]; //@line 1341 "bufferedio.c"
        var $47=($46)==0; //@line 1341 "bufferedio.c"
        if ($47) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1341 "bufferedio.c"
      case 9: // $bb9
        var $48=$chunks; //@line 1341 "bufferedio.c"
        var $49=$48+4; //@line 1341 "bufferedio.c"
        var $50=HEAP[$49]; //@line 1341 "bufferedio.c"
        var $51=$50+24; //@line 1341 "bufferedio.c"
        var $52=HEAP[$51]; //@line 1341 "bufferedio.c"
        var $53=$chunks; //@line 1341 "bufferedio.c"
        FUNCTION_TABLE[$52]($53); //@line 1341 "bufferedio.c"
        __label__ = 10; break; //@line 1341 "bufferedio.c"
      case 10: // $bb10
        $0=0; //@line 1342 "bufferedio.c"
        __label__ = 52; break; //@line 1342 "bufferedio.c"
      case 11: // $bb11
        var $54=$self_addr; //@line 1345 "bufferedio.c"
        __bufferedreader_reset_buf($54); //@line 1345 "bufferedio.c"
        var $55=$self_addr; //@line 1347 "bufferedio.c"
        var $56=$55+24; //@line 1347 "bufferedio.c"
        var $57=HEAP[$56]; //@line 1347 "bufferedio.c"
        var $58=($57)!=0; //@line 1347 "bufferedio.c"
        if ($58) { __label__ = 12; break; } else { __label__ = 19; break; } //@line 1347 "bufferedio.c"
      case 12: // $bb12
        var $59=$self_addr; //@line 1348 "bufferedio.c"
        var $60=__bufferedwriter_flush_unlocked($59, 1); //@line 1348 "bufferedio.c"
        $res=$60; //@line 1348 "bufferedio.c"
        var $61=$res; //@line 1349 "bufferedio.c"
        var $62=($61)==0; //@line 1349 "bufferedio.c"
        if ($62) { __label__ = 13; break; } else { __label__ = 16; break; } //@line 1349 "bufferedio.c"
      case 13: // $bb13
        var $63=$chunks; //@line 1350 "bufferedio.c"
        var $64=$63; //@line 1350 "bufferedio.c"
        var $65=HEAP[$64]; //@line 1350 "bufferedio.c"
        var $66=($65) - 1; //@line 1350 "bufferedio.c"
        var $67=$chunks; //@line 1350 "bufferedio.c"
        var $68=$67; //@line 1350 "bufferedio.c"
        HEAP[$68]=$66; //@line 1350 "bufferedio.c"
        var $69=$chunks; //@line 1350 "bufferedio.c"
        var $70=$69; //@line 1350 "bufferedio.c"
        var $71=HEAP[$70]; //@line 1350 "bufferedio.c"
        var $72=($71)==0; //@line 1350 "bufferedio.c"
        if ($72) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1350 "bufferedio.c"
      case 14: // $bb14
        var $73=$chunks; //@line 1350 "bufferedio.c"
        var $74=$73+4; //@line 1350 "bufferedio.c"
        var $75=HEAP[$74]; //@line 1350 "bufferedio.c"
        var $76=$75+24; //@line 1350 "bufferedio.c"
        var $77=HEAP[$76]; //@line 1350 "bufferedio.c"
        var $78=$chunks; //@line 1350 "bufferedio.c"
        FUNCTION_TABLE[$77]($78); //@line 1350 "bufferedio.c"
        __label__ = 15; break; //@line 1350 "bufferedio.c"
      case 15: // $bb15
        $0=0; //@line 1351 "bufferedio.c"
        __label__ = 52; break; //@line 1351 "bufferedio.c"
      case 16: // $bb16
        var $79=$res; //@line 1353 "bufferedio.c"
        var $80=($79)!=0; //@line 1353 "bufferedio.c"
        if ($80) { __label__ = 17; break; } else { __label__ = 19; break; } //@line 1353 "bufferedio.c"
      case 17: // $bb17
        var $81=$res; //@line 1353 "bufferedio.c"
        $_py_tmp=$81; //@line 1353 "bufferedio.c"
        $res=0; //@line 1353 "bufferedio.c"
        var $82=$_py_tmp; //@line 1353 "bufferedio.c"
        var $83=$82; //@line 1353 "bufferedio.c"
        var $84=HEAP[$83]; //@line 1353 "bufferedio.c"
        var $85=($84) - 1; //@line 1353 "bufferedio.c"
        var $86=$_py_tmp; //@line 1353 "bufferedio.c"
        var $87=$86; //@line 1353 "bufferedio.c"
        HEAP[$87]=$85; //@line 1353 "bufferedio.c"
        var $88=$_py_tmp; //@line 1353 "bufferedio.c"
        var $89=$88; //@line 1353 "bufferedio.c"
        var $90=HEAP[$89]; //@line 1353 "bufferedio.c"
        var $91=($90)==0; //@line 1353 "bufferedio.c"
        if ($91) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 1353 "bufferedio.c"
      case 18: // $bb18
        var $92=$_py_tmp; //@line 1353 "bufferedio.c"
        var $93=$92+4; //@line 1353 "bufferedio.c"
        var $94=HEAP[$93]; //@line 1353 "bufferedio.c"
        var $95=$94+24; //@line 1353 "bufferedio.c"
        var $96=HEAP[$95]; //@line 1353 "bufferedio.c"
        var $97=$_py_tmp; //@line 1353 "bufferedio.c"
        FUNCTION_TABLE[$96]($97); //@line 1353 "bufferedio.c"
        __label__ = 19; break; //@line 1353 "bufferedio.c"
      case 19: // $bb19
        var $98=$data; //@line 1356 "bufferedio.c"
        var $99=($98)!=0; //@line 1356 "bufferedio.c"
        if ($99) { __label__ = 20; break; } else { __label__ = 28; break; } //@line 1356 "bufferedio.c"
      case 20: // $bb20
        var $100=$chunks; //@line 1357 "bufferedio.c"
        var $101=$data; //@line 1357 "bufferedio.c"
        var $102=_PyList_Append($100, $101); //@line 1357 "bufferedio.c"
        var $103=($102) < 0; //@line 1357 "bufferedio.c"
        var $104=$data; //@line 1358 "bufferedio.c"
        var $105=$104; //@line 1358 "bufferedio.c"
        var $106=HEAP[$105]; //@line 1358 "bufferedio.c"
        var $107=($106) - 1; //@line 1358 "bufferedio.c"
        var $108=$data; //@line 1358 "bufferedio.c"
        var $109=$108; //@line 1358 "bufferedio.c"
        HEAP[$109]=$107; //@line 1358 "bufferedio.c"
        var $110=$data; //@line 1358 "bufferedio.c"
        var $111=$110; //@line 1358 "bufferedio.c"
        var $112=HEAP[$111]; //@line 1358 "bufferedio.c"
        var $113=($112)==0; //@line 1358 "bufferedio.c"
        if ($103) { __label__ = 21; break; } else { __label__ = 26; break; } //@line 1357 "bufferedio.c"
      case 21: // $bb21
        if ($113) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 1358 "bufferedio.c"
      case 22: // $bb22
        var $114=$data; //@line 1358 "bufferedio.c"
        var $115=$114+4; //@line 1358 "bufferedio.c"
        var $116=HEAP[$115]; //@line 1358 "bufferedio.c"
        var $117=$116+24; //@line 1358 "bufferedio.c"
        var $118=HEAP[$117]; //@line 1358 "bufferedio.c"
        var $119=$data; //@line 1358 "bufferedio.c"
        FUNCTION_TABLE[$118]($119); //@line 1358 "bufferedio.c"
        __label__ = 23; break; //@line 1358 "bufferedio.c"
      case 23: // $bb23
        var $120=$chunks; //@line 1359 "bufferedio.c"
        var $121=$120; //@line 1359 "bufferedio.c"
        var $122=HEAP[$121]; //@line 1359 "bufferedio.c"
        var $123=($122) - 1; //@line 1359 "bufferedio.c"
        var $124=$chunks; //@line 1359 "bufferedio.c"
        var $125=$124; //@line 1359 "bufferedio.c"
        HEAP[$125]=$123; //@line 1359 "bufferedio.c"
        var $126=$chunks; //@line 1359 "bufferedio.c"
        var $127=$126; //@line 1359 "bufferedio.c"
        var $128=HEAP[$127]; //@line 1359 "bufferedio.c"
        var $129=($128)==0; //@line 1359 "bufferedio.c"
        if ($129) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 1359 "bufferedio.c"
      case 24: // $bb24
        var $130=$chunks; //@line 1359 "bufferedio.c"
        var $131=$130+4; //@line 1359 "bufferedio.c"
        var $132=HEAP[$131]; //@line 1359 "bufferedio.c"
        var $133=$132+24; //@line 1359 "bufferedio.c"
        var $134=HEAP[$133]; //@line 1359 "bufferedio.c"
        var $135=$chunks; //@line 1359 "bufferedio.c"
        FUNCTION_TABLE[$134]($135); //@line 1359 "bufferedio.c"
        __label__ = 25; break; //@line 1359 "bufferedio.c"
      case 25: // $bb25
        $0=0; //@line 1360 "bufferedio.c"
        __label__ = 52; break; //@line 1360 "bufferedio.c"
      case 26: // $bb26
        if ($113) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 1362 "bufferedio.c"
      case 27: // $bb27
        var $136=$data; //@line 1362 "bufferedio.c"
        var $137=$136+4; //@line 1362 "bufferedio.c"
        var $138=HEAP[$137]; //@line 1362 "bufferedio.c"
        var $139=$138+24; //@line 1362 "bufferedio.c"
        var $140=HEAP[$139]; //@line 1362 "bufferedio.c"
        var $141=$data; //@line 1362 "bufferedio.c"
        FUNCTION_TABLE[$140]($141); //@line 1362 "bufferedio.c"
        __label__ = 28; break; //@line 1362 "bufferedio.c"
      case 28: // $bb28
        var $142=HEAP[__PyIO_str_read]; //@line 1366 "bufferedio.c"
        var $143=$self_addr; //@line 1366 "bufferedio.c"
        var $144=$143+8; //@line 1366 "bufferedio.c"
        var $145=HEAP[$144]; //@line 1366 "bufferedio.c"
        var $146=_PyObject_CallMethodObjArgs($145, $142, allocate(4, "i8*", ALLOC_STACK)); //@line 1366 "bufferedio.c"
        $data=$146; //@line 1366 "bufferedio.c"
        var $147=($146)==0; //@line 1367 "bufferedio.c"
        if ($147) { __label__ = 29; break; } else { __label__ = 32; break; } //@line 1367 "bufferedio.c"
      case 29: // $bb29
        var $148=$chunks; //@line 1368 "bufferedio.c"
        var $149=$148; //@line 1368 "bufferedio.c"
        var $150=HEAP[$149]; //@line 1368 "bufferedio.c"
        var $151=($150) - 1; //@line 1368 "bufferedio.c"
        var $152=$chunks; //@line 1368 "bufferedio.c"
        var $153=$152; //@line 1368 "bufferedio.c"
        HEAP[$153]=$151; //@line 1368 "bufferedio.c"
        var $154=$chunks; //@line 1368 "bufferedio.c"
        var $155=$154; //@line 1368 "bufferedio.c"
        var $156=HEAP[$155]; //@line 1368 "bufferedio.c"
        var $157=($156)==0; //@line 1368 "bufferedio.c"
        if ($157) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 1368 "bufferedio.c"
      case 30: // $bb30
        var $158=$chunks; //@line 1368 "bufferedio.c"
        var $159=$158+4; //@line 1368 "bufferedio.c"
        var $160=HEAP[$159]; //@line 1368 "bufferedio.c"
        var $161=$160+24; //@line 1368 "bufferedio.c"
        var $162=HEAP[$161]; //@line 1368 "bufferedio.c"
        var $163=$chunks; //@line 1368 "bufferedio.c"
        FUNCTION_TABLE[$162]($163); //@line 1368 "bufferedio.c"
        __label__ = 31; break; //@line 1368 "bufferedio.c"
      case 31: // $bb31
        $0=0; //@line 1369 "bufferedio.c"
        __label__ = 52; break; //@line 1369 "bufferedio.c"
      case 32: // $bb32
        var $164=$data; //@line 1371 "bufferedio.c"
        var $165=($164)!=(__Py_NoneStruct); //@line 1371 "bufferedio.c"
        if ($165) { __label__ = 33; break; } else { __label__ = 41; break; } //@line 1371 "bufferedio.c"
      case 33: // $bb33
        var $166=$data; //@line 1371 "bufferedio.c"
        var $167=$166+4; //@line 1371 "bufferedio.c"
        var $168=HEAP[$167]; //@line 1371 "bufferedio.c"
        var $169=$168+84; //@line 1371 "bufferedio.c"
        var $170=HEAP[$169]; //@line 1371 "bufferedio.c"
        var $171=($170) & 134217728; //@line 1371 "bufferedio.c"
        var $172=($171)==0; //@line 1371 "bufferedio.c"
        var $173=$data; //@line 1372 "bufferedio.c"
        if ($172) { __label__ = 34; break; } else { __label__ = 39; break; } //@line 1371 "bufferedio.c"
      case 34: // $bb34
        var $174=$173; //@line 1372 "bufferedio.c"
        var $175=HEAP[$174]; //@line 1372 "bufferedio.c"
        var $176=($175) - 1; //@line 1372 "bufferedio.c"
        var $177=$data; //@line 1372 "bufferedio.c"
        var $178=$177; //@line 1372 "bufferedio.c"
        HEAP[$178]=$176; //@line 1372 "bufferedio.c"
        var $179=$data; //@line 1372 "bufferedio.c"
        var $180=$179; //@line 1372 "bufferedio.c"
        var $181=HEAP[$180]; //@line 1372 "bufferedio.c"
        var $182=($181)==0; //@line 1372 "bufferedio.c"
        if ($182) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 1372 "bufferedio.c"
      case 35: // $bb35
        var $183=$data; //@line 1372 "bufferedio.c"
        var $184=$183+4; //@line 1372 "bufferedio.c"
        var $185=HEAP[$184]; //@line 1372 "bufferedio.c"
        var $186=$185+24; //@line 1372 "bufferedio.c"
        var $187=HEAP[$186]; //@line 1372 "bufferedio.c"
        var $188=$data; //@line 1372 "bufferedio.c"
        FUNCTION_TABLE[$187]($188); //@line 1372 "bufferedio.c"
        __label__ = 36; break; //@line 1372 "bufferedio.c"
      case 36: // $bb36
        var $189=$chunks; //@line 1373 "bufferedio.c"
        var $190=$189; //@line 1373 "bufferedio.c"
        var $191=HEAP[$190]; //@line 1373 "bufferedio.c"
        var $192=($191) - 1; //@line 1373 "bufferedio.c"
        var $193=$chunks; //@line 1373 "bufferedio.c"
        var $194=$193; //@line 1373 "bufferedio.c"
        HEAP[$194]=$192; //@line 1373 "bufferedio.c"
        var $195=$chunks; //@line 1373 "bufferedio.c"
        var $196=$195; //@line 1373 "bufferedio.c"
        var $197=HEAP[$196]; //@line 1373 "bufferedio.c"
        var $198=($197)==0; //@line 1373 "bufferedio.c"
        if ($198) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 1373 "bufferedio.c"
      case 37: // $bb37
        var $199=$chunks; //@line 1373 "bufferedio.c"
        var $200=$199+4; //@line 1373 "bufferedio.c"
        var $201=HEAP[$200]; //@line 1373 "bufferedio.c"
        var $202=$201+24; //@line 1373 "bufferedio.c"
        var $203=HEAP[$202]; //@line 1373 "bufferedio.c"
        var $204=$chunks; //@line 1373 "bufferedio.c"
        FUNCTION_TABLE[$203]($204); //@line 1373 "bufferedio.c"
        __label__ = 38; break; //@line 1373 "bufferedio.c"
      case 38: // $bb38
        var $205=HEAP[_PyExc_TypeError]; //@line 1374 "bufferedio.c"
        _PyErr_SetString($205, __str3); //@line 1374 "bufferedio.c"
        $0=0; //@line 1375 "bufferedio.c"
        __label__ = 52; break; //@line 1375 "bufferedio.c"
      case 39: // $bb39
        var $206=($173)==(__Py_NoneStruct); //@line 1377 "bufferedio.c"
        if ($206) { __label__ = 41; break; } else { __label__ = 40; break; } //@line 1377 "bufferedio.c"
      case 40: // $bb40
        var $207=$data; //@line 1377 "bufferedio.c"
        var $208=$207; //@line 1377 "bufferedio.c"
        var $209=$208+8; //@line 1377 "bufferedio.c"
        var $210=HEAP[$209]; //@line 1377 "bufferedio.c"
        var $211=($210)==0; //@line 1377 "bufferedio.c"
        if ($211) { __label__ = 41; break; } else { __label__ = 50; break; } //@line 1377 "bufferedio.c"
      case 41: // $bb41
        var $212=$current_size; //@line 1378 "bufferedio.c"
        var $213=($212)==0; //@line 1378 "bufferedio.c"
        if ($213) { __label__ = 42; break; } else { __label__ = 45; break; } //@line 1378 "bufferedio.c"
      case 42: // $bb42
        var $214=$chunks; //@line 1379 "bufferedio.c"
        var $215=$214; //@line 1379 "bufferedio.c"
        var $216=HEAP[$215]; //@line 1379 "bufferedio.c"
        var $217=($216) - 1; //@line 1379 "bufferedio.c"
        var $218=$chunks; //@line 1379 "bufferedio.c"
        var $219=$218; //@line 1379 "bufferedio.c"
        HEAP[$219]=$217; //@line 1379 "bufferedio.c"
        var $220=$chunks; //@line 1379 "bufferedio.c"
        var $221=$220; //@line 1379 "bufferedio.c"
        var $222=HEAP[$221]; //@line 1379 "bufferedio.c"
        var $223=($222)==0; //@line 1379 "bufferedio.c"
        if ($223) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 1379 "bufferedio.c"
      case 43: // $bb43
        var $224=$chunks; //@line 1379 "bufferedio.c"
        var $225=$224+4; //@line 1379 "bufferedio.c"
        var $226=HEAP[$225]; //@line 1379 "bufferedio.c"
        var $227=$226+24; //@line 1379 "bufferedio.c"
        var $228=HEAP[$227]; //@line 1379 "bufferedio.c"
        var $229=$chunks; //@line 1379 "bufferedio.c"
        FUNCTION_TABLE[$228]($229); //@line 1379 "bufferedio.c"
        __label__ = 44; break; //@line 1379 "bufferedio.c"
      case 44: // $bb44
        var $230=$data; //@line 1380 "bufferedio.c"
        $0=$230; //@line 1380 "bufferedio.c"
        __label__ = 52; break; //@line 1380 "bufferedio.c"
      case 45: // $bb45
        var $231=HEAP[__PyIO_empty_bytes]; //@line 1383 "bufferedio.c"
        var $232=$chunks; //@line 1383 "bufferedio.c"
        var $233=__PyString_Join($231, $232); //@line 1383 "bufferedio.c"
        $res=$233; //@line 1383 "bufferedio.c"
        var $234=$data; //@line 1384 "bufferedio.c"
        var $235=$234; //@line 1384 "bufferedio.c"
        var $236=HEAP[$235]; //@line 1384 "bufferedio.c"
        var $237=($236) - 1; //@line 1384 "bufferedio.c"
        var $238=$data; //@line 1384 "bufferedio.c"
        var $239=$238; //@line 1384 "bufferedio.c"
        HEAP[$239]=$237; //@line 1384 "bufferedio.c"
        var $240=$data; //@line 1384 "bufferedio.c"
        var $241=$240; //@line 1384 "bufferedio.c"
        var $242=HEAP[$241]; //@line 1384 "bufferedio.c"
        var $243=($242)==0; //@line 1384 "bufferedio.c"
        if ($243) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 1384 "bufferedio.c"
      case 46: // $bb46
        var $244=$data; //@line 1384 "bufferedio.c"
        var $245=$244+4; //@line 1384 "bufferedio.c"
        var $246=HEAP[$245]; //@line 1384 "bufferedio.c"
        var $247=$246+24; //@line 1384 "bufferedio.c"
        var $248=HEAP[$247]; //@line 1384 "bufferedio.c"
        var $249=$data; //@line 1384 "bufferedio.c"
        FUNCTION_TABLE[$248]($249); //@line 1384 "bufferedio.c"
        __label__ = 47; break; //@line 1384 "bufferedio.c"
      case 47: // $bb47
        var $250=$chunks; //@line 1385 "bufferedio.c"
        var $251=$250; //@line 1385 "bufferedio.c"
        var $252=HEAP[$251]; //@line 1385 "bufferedio.c"
        var $253=($252) - 1; //@line 1385 "bufferedio.c"
        var $254=$chunks; //@line 1385 "bufferedio.c"
        var $255=$254; //@line 1385 "bufferedio.c"
        HEAP[$255]=$253; //@line 1385 "bufferedio.c"
        var $256=$chunks; //@line 1385 "bufferedio.c"
        var $257=$256; //@line 1385 "bufferedio.c"
        var $258=HEAP[$257]; //@line 1385 "bufferedio.c"
        var $259=($258)==0; //@line 1385 "bufferedio.c"
        if ($259) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 1385 "bufferedio.c"
      case 48: // $bb48
        var $260=$chunks; //@line 1385 "bufferedio.c"
        var $261=$260+4; //@line 1385 "bufferedio.c"
        var $262=HEAP[$261]; //@line 1385 "bufferedio.c"
        var $263=$262+24; //@line 1385 "bufferedio.c"
        var $264=HEAP[$263]; //@line 1385 "bufferedio.c"
        var $265=$chunks; //@line 1385 "bufferedio.c"
        FUNCTION_TABLE[$264]($265); //@line 1385 "bufferedio.c"
        __label__ = 49; break; //@line 1385 "bufferedio.c"
      case 49: // $bb49
        var $266=$res; //@line 1386 "bufferedio.c"
        $0=$266; //@line 1386 "bufferedio.c"
        __label__ = 52; break; //@line 1386 "bufferedio.c"
      case 50: // $bb50
        var $267=$data; //@line 1389 "bufferedio.c"
        var $268=$267; //@line 1389 "bufferedio.c"
        var $269=$268+8; //@line 1389 "bufferedio.c"
        var $270=HEAP[$269]; //@line 1389 "bufferedio.c"
        var $271=$current_size; //@line 1389 "bufferedio.c"
        var $272=($271) + ($270); //@line 1389 "bufferedio.c"
        $current_size=$272; //@line 1389 "bufferedio.c"
        var $273=$self_addr; //@line 1390 "bufferedio.c"
        var $274=$273+32; //@line 1390 "bufferedio.c"
        var $275=HEAP[$274]; //@line 1390 "bufferedio.c"
        var $276=($275)!=-1; //@line 1390 "bufferedio.c"
        if ($276) { __label__ = 51; break; } else { __label__ = 19; break; } //@line 1390 "bufferedio.c"
      case 51: // $bb51
        var $277=$self_addr; //@line 1391 "bufferedio.c"
        var $278=$277+32; //@line 1391 "bufferedio.c"
        var $279=HEAP[$278]; //@line 1391 "bufferedio.c"
        var $280=$data; //@line 1391 "bufferedio.c"
        var $281=$280; //@line 1391 "bufferedio.c"
        var $282=$281+8; //@line 1391 "bufferedio.c"
        var $283=HEAP[$282]; //@line 1391 "bufferedio.c"
        var $284=($283); //@line 1391 "bufferedio.c"
        var $285=($284) + ($279); //@line 1391 "bufferedio.c"
        var $286=$self_addr; //@line 1391 "bufferedio.c"
        var $287=$286+32; //@line 1391 "bufferedio.c"
        HEAP[$287]=$285; //@line 1391 "bufferedio.c"
        __label__ = 19; break; //@line 1391 "bufferedio.c"
      case 52: // $bb53
        var $288=$0; //@line 1333 "bufferedio.c"
        $retval=$288; //@line 1333 "bufferedio.c"
        var $retval54=$retval; //@line 1333 "bufferedio.c"
        ;
        return $retval54; //@line 1333 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __bufferedreader_read_fast($self, $n) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $n_addr;
        var $retval;
        var $0;
        var $iftmp_189;
        var $current_size;
        var $res;
        $self_addr=$self;
        $n_addr=$n;
        var $1=$self_addr; //@line 1402 "bufferedio.c"
        var $2=$1+20; //@line 1402 "bufferedio.c"
        var $3=HEAP[$2]; //@line 1402 "bufferedio.c"
        var $4=($3)==0; //@line 1402 "bufferedio.c"
        if ($4) { __label__ = 4; break; } else { __label__ = 1; break; } //@line 1402 "bufferedio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 1402 "bufferedio.c"
        var $6=$5+20; //@line 1402 "bufferedio.c"
        var $7=HEAP[$6]; //@line 1402 "bufferedio.c"
        var $8=($7)==0; //@line 1402 "bufferedio.c"
        if ($8) { __label__ = 4; break; } else { __label__ = 2; break; } //@line 1402 "bufferedio.c"
      case 2: // $bb1
        var $9=$self_addr; //@line 1402 "bufferedio.c"
        var $10=$9+60; //@line 1402 "bufferedio.c"
        var $11=HEAP[$10]; //@line 1402 "bufferedio.c"
        var $12=($11)==-1; //@line 1402 "bufferedio.c"
        if ($12) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 1402 "bufferedio.c"
      case 3: // $bb2
        var $13=$self_addr; //@line 1402 "bufferedio.c"
        var $14=$13+60; //@line 1402 "bufferedio.c"
        var $15=HEAP[$14]; //@line 1402 "bufferedio.c"
        var $16=((($15)) & 4294967295); //@line 1402 "bufferedio.c"
        var $17=$self_addr; //@line 1402 "bufferedio.c"
        var $18=$17+44; //@line 1402 "bufferedio.c"
        var $19=HEAP[$18]; //@line 1402 "bufferedio.c"
        var $20=((($19)) & 4294967295); //@line 1402 "bufferedio.c"
        var $21=($16) - ($20); //@line 1402 "bufferedio.c"
        $iftmp_189=$21; //@line 1402 "bufferedio.c"
        __label__ = 5; break; //@line 1402 "bufferedio.c"
      case 4: // $bb3
        $iftmp_189=0; //@line 1402 "bufferedio.c"
        __label__ = 5; break; //@line 1402 "bufferedio.c"
      case 5: // $bb4
        var $22=$iftmp_189; //@line 1402 "bufferedio.c"
        $current_size=$22; //@line 1402 "bufferedio.c"
        var $23=$n_addr; //@line 1403 "bufferedio.c"
        var $24=$current_size; //@line 1403 "bufferedio.c"
        var $25=($23) <= ($24); //@line 1403 "bufferedio.c"
        if ($25) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 1403 "bufferedio.c"
      case 6: // $bb5
        var $26=$self_addr; //@line 1405 "bufferedio.c"
        var $27=$26+40; //@line 1405 "bufferedio.c"
        var $28=HEAP[$27]; //@line 1405 "bufferedio.c"
        var $29=$self_addr; //@line 1405 "bufferedio.c"
        var $30=$29+44; //@line 1405 "bufferedio.c"
        var $31=HEAP[$30]; //@line 1405 "bufferedio.c"
        var $32=((($31)) & 4294967295); //@line 1405 "bufferedio.c"
        var $33=$28+$32; //@line 1405 "bufferedio.c"
        var $34=$n_addr; //@line 1405 "bufferedio.c"
        var $35=_PyString_FromStringAndSize($33, $34); //@line 1405 "bufferedio.c"
        $res=$35; //@line 1405 "bufferedio.c"
        var $36=$res; //@line 1406 "bufferedio.c"
        var $37=($36)!=0; //@line 1406 "bufferedio.c"
        if ($37) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1406 "bufferedio.c"
      case 7: // $bb6
        var $38=$self_addr; //@line 1407 "bufferedio.c"
        var $39=$38+44; //@line 1407 "bufferedio.c"
        var $40=HEAP[$39]; //@line 1407 "bufferedio.c"
        var $41=$n_addr; //@line 1407 "bufferedio.c"
        var $42=($41); //@line 1407 "bufferedio.c"
        var $43=($42) + ($40); //@line 1407 "bufferedio.c"
        var $44=$self_addr; //@line 1407 "bufferedio.c"
        var $45=$44+44; //@line 1407 "bufferedio.c"
        HEAP[$45]=$43; //@line 1407 "bufferedio.c"
        __label__ = 8; break; //@line 1407 "bufferedio.c"
      case 8: // $bb7
        var $46=$res; //@line 1408 "bufferedio.c"
        $0=$46; //@line 1408 "bufferedio.c"
        __label__ = 10; break; //@line 1408 "bufferedio.c"
      case 9: // $bb8
        var $47=HEAP[__Py_NoneStruct]; //@line 1410 "bufferedio.c"
        var $48=($47) + 1; //@line 1410 "bufferedio.c"
        HEAP[__Py_NoneStruct]=$48; //@line 1410 "bufferedio.c"
        $0=__Py_NoneStruct; //@line 1410 "bufferedio.c"
        __label__ = 10; break; //@line 1410 "bufferedio.c"
      case 10: // $bb9
        var $49=$0; //@line 1408 "bufferedio.c"
        $retval=$49; //@line 1408 "bufferedio.c"
        var $retval10=$retval; //@line 1408 "bufferedio.c"
        ;
        return $retval10; //@line 1408 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __bufferedreader_read_generic($self, $n) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $n_addr;
        var $retval;
        var $iftmp_195;
        var $0;
        var $iftmp_190;
        var $res=__stackBase__;
        var $current_size;
        var $remaining;
        var $written;
        var $out;
        var $r;
        var $r31;
        $self_addr=$self;
        $n_addr=$n;
        HEAP[$res]=0; //@line 1419 "bufferedio.c"
        var $1=$self_addr; //@line 1423 "bufferedio.c"
        var $2=$1+20; //@line 1423 "bufferedio.c"
        var $3=HEAP[$2]; //@line 1423 "bufferedio.c"
        var $4=($3)==0; //@line 1423 "bufferedio.c"
        if ($4) { __label__ = 4; break; } else { __label__ = 1; break; } //@line 1423 "bufferedio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 1423 "bufferedio.c"
        var $6=$5+20; //@line 1423 "bufferedio.c"
        var $7=HEAP[$6]; //@line 1423 "bufferedio.c"
        var $8=($7)==0; //@line 1423 "bufferedio.c"
        if ($8) { __label__ = 4; break; } else { __label__ = 2; break; } //@line 1423 "bufferedio.c"
      case 2: // $bb1
        var $9=$self_addr; //@line 1423 "bufferedio.c"
        var $10=$9+60; //@line 1423 "bufferedio.c"
        var $11=HEAP[$10]; //@line 1423 "bufferedio.c"
        var $12=($11)==-1; //@line 1423 "bufferedio.c"
        if ($12) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 1423 "bufferedio.c"
      case 3: // $bb2
        var $13=$self_addr; //@line 1423 "bufferedio.c"
        var $14=$13+60; //@line 1423 "bufferedio.c"
        var $15=HEAP[$14]; //@line 1423 "bufferedio.c"
        var $16=((($15)) & 4294967295); //@line 1423 "bufferedio.c"
        var $17=$self_addr; //@line 1423 "bufferedio.c"
        var $18=$17+44; //@line 1423 "bufferedio.c"
        var $19=HEAP[$18]; //@line 1423 "bufferedio.c"
        var $20=((($19)) & 4294967295); //@line 1423 "bufferedio.c"
        var $21=($16) - ($20); //@line 1423 "bufferedio.c"
        $iftmp_190=$21; //@line 1423 "bufferedio.c"
        __label__ = 5; break; //@line 1423 "bufferedio.c"
      case 4: // $bb3
        $iftmp_190=0; //@line 1423 "bufferedio.c"
        __label__ = 5; break; //@line 1423 "bufferedio.c"
      case 5: // $bb4
        var $22=$iftmp_190; //@line 1423 "bufferedio.c"
        $current_size=$22; //@line 1423 "bufferedio.c"
        var $23=$n_addr; //@line 1424 "bufferedio.c"
        var $24=$current_size; //@line 1424 "bufferedio.c"
        var $25=($23) <= ($24); //@line 1424 "bufferedio.c"
        if ($25) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1424 "bufferedio.c"
      case 6: // $bb5
        var $26=$self_addr; //@line 1425 "bufferedio.c"
        var $27=$n_addr; //@line 1425 "bufferedio.c"
        var $28=__bufferedreader_read_fast($26, $27); //@line 1425 "bufferedio.c"
        $0=$28; //@line 1425 "bufferedio.c"
        __label__ = 49; break; //@line 1425 "bufferedio.c"
      case 7: // $bb6
        var $29=$n_addr; //@line 1427 "bufferedio.c"
        var $30=_PyString_FromStringAndSize(0, $29); //@line 1427 "bufferedio.c"
        HEAP[$res]=$30; //@line 1427 "bufferedio.c"
        var $31=HEAP[$res]; //@line 1428 "bufferedio.c"
        var $32=($31)==0; //@line 1428 "bufferedio.c"
        if ($32) { __label__ = 48; break; } else { __label__ = 8; break; } //@line 1428 "bufferedio.c"
      case 8: // $bb7
        var $33=HEAP[$res]; //@line 1430 "bufferedio.c"
        var $34=$33; //@line 1430 "bufferedio.c"
        var $35=$34+20; //@line 1430 "bufferedio.c"
        var $36=$35; //@line 1430 "bufferedio.c"
        $out=$36; //@line 1430 "bufferedio.c"
        var $37=$n_addr; //@line 1431 "bufferedio.c"
        $remaining=$37; //@line 1431 "bufferedio.c"
        $written=0; //@line 1432 "bufferedio.c"
        var $38=$current_size; //@line 1433 "bufferedio.c"
        var $39=($38) > 0; //@line 1433 "bufferedio.c"
        if ($39) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1433 "bufferedio.c"
      case 9: // $bb8
        var $40=$current_size; //@line 1434 "bufferedio.c"
        var $41=$self_addr; //@line 1434 "bufferedio.c"
        var $42=$41+40; //@line 1434 "bufferedio.c"
        var $43=HEAP[$42]; //@line 1434 "bufferedio.c"
        var $44=$self_addr; //@line 1434 "bufferedio.c"
        var $45=$44+44; //@line 1434 "bufferedio.c"
        var $46=HEAP[$45]; //@line 1434 "bufferedio.c"
        var $47=((($46)) & 4294967295); //@line 1434 "bufferedio.c"
        var $48=$43+$47; //@line 1434 "bufferedio.c"
        var $49=$out; //@line 1434 "bufferedio.c"
        _llvm_memcpy_p0i8_p0i8_i32($49, $48, $40, 1, 0); //@line 1434 "bufferedio.c"
        var $50=$remaining; //@line 1435 "bufferedio.c"
        var $51=$current_size; //@line 1435 "bufferedio.c"
        var $52=($50) - ($51); //@line 1435 "bufferedio.c"
        $remaining=$52; //@line 1435 "bufferedio.c"
        var $53=$written; //@line 1436 "bufferedio.c"
        var $54=$current_size; //@line 1436 "bufferedio.c"
        var $55=($54) + ($53); //@line 1436 "bufferedio.c"
        $written=$55; //@line 1436 "bufferedio.c"
        __label__ = 10; break; //@line 1436 "bufferedio.c"
      case 10: // $bb9
        var $56=$self_addr; //@line 1438 "bufferedio.c"
        __bufferedreader_reset_buf($56); //@line 1438 "bufferedio.c"
        var $_pr=$remaining;
        __lastLabel__ = 10; __label__ = 25; break; //@line 1438 "bufferedio.c"
      case 11: // $bb10
        var $57=$self_addr; //@line 1442 "bufferedio.c"
        var $58=$57+88; //@line 1442 "bufferedio.c"
        var $59=HEAP[$58]; //@line 1442 "bufferedio.c"
        var $60=($59)!=0; //@line 1442 "bufferedio.c"
        var $61=$self_addr; //@line 1442 "bufferedio.c"
        if ($60) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1442 "bufferedio.c"
      case 12: // $bb11
        var $62=$61+88; //@line 1442 "bufferedio.c"
        var $63=HEAP[$62]; //@line 1442 "bufferedio.c"
        var $not=($63) ^ -1; //@line 1442 "bufferedio.c"
        var $64=$remaining; //@line 1442 "bufferedio.c"
        var $65=($64) & ($not); //@line 1442 "bufferedio.c"
        $iftmp_195=$65; //@line 1442 "bufferedio.c"
        __lastLabel__ = 12; __label__ = 14; break; //@line 1442 "bufferedio.c"
      case 13: // $bb13
        var $66=$61+84; //@line 1442 "bufferedio.c"
        var $67=HEAP[$66]; //@line 1442 "bufferedio.c"
        var $68=$self_addr; //@line 1442 "bufferedio.c"
        var $69=$68+84; //@line 1442 "bufferedio.c"
        var $70=HEAP[$69]; //@line 1442 "bufferedio.c"
        var $71=$remaining; //@line 1442 "bufferedio.c"
        var $72=((($71)/($70))|0); //@line 1442 "bufferedio.c"
        var $73=($72) * ($67); //@line 1442 "bufferedio.c"
        $iftmp_195=$73; //@line 1442 "bufferedio.c"
        __lastLabel__ = 13; __label__ = 14; break; //@line 1442 "bufferedio.c"
      case 14: // $bb14
        var $74=__lastLabel__ == 13 ? $73 : ($65);
        $r=$74; //@line 1442 "bufferedio.c"
        var $75=($74)==0; //@line 1443 "bufferedio.c"
        if ($75) { __label__ = 26; break; } else { __label__ = 15; break; } //@line 1443 "bufferedio.c"
      case 15: // $bb15
        var $76=$out; //@line 1445 "bufferedio.c"
        var $77=$written; //@line 1445 "bufferedio.c"
        var $78=$76+$77; //@line 1445 "bufferedio.c"
        var $79=$self_addr; //@line 1445 "bufferedio.c"
        var $80=$r; //@line 1445 "bufferedio.c"
        var $81=__bufferedreader_raw_read($79, $78, $80); //@line 1445 "bufferedio.c"
        $r=$81; //@line 1445 "bufferedio.c"
        var $82=$r; //@line 1446 "bufferedio.c"
        var $83=($82)==-1; //@line 1446 "bufferedio.c"
        if ($83) { __label__ = 45; break; } else { __label__ = 16; break; } //@line 1446 "bufferedio.c"
      case 16: // $bb16
        var $84=$r; //@line 1448 "bufferedio.c"
        var $85=($84)==0; //@line 1448 "bufferedio.c"
        var $86=$r; //@line 1448 "bufferedio.c"
        var $87=($86)==-2; //@line 1448 "bufferedio.c"
        var $or_cond=($85) | ($87);
        if ($or_cond) { __label__ = 17; break; } else { __label__ = 24; break; } //@line 1448 "bufferedio.c"
      case 17: // $bb18
        var $88=$r; //@line 1450 "bufferedio.c"
        var $89=($88)==0; //@line 1450 "bufferedio.c"
        if ($89) { __label__ = 19; break; } else { __label__ = 18; break; } //@line 1450 "bufferedio.c"
      case 18: // $bb19
        var $90=$written; //@line 1450 "bufferedio.c"
        var $91=($90) > 0; //@line 1450 "bufferedio.c"
        if ($91) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 1450 "bufferedio.c"
      case 19: // $bb20
        var $92=$written; //@line 1451 "bufferedio.c"
        var $93=__PyString_Resize($res, $92); //@line 1451 "bufferedio.c"
        var $94=($93)!=0; //@line 1451 "bufferedio.c"
        if ($94) { __label__ = 45; break; } else { __label__ = 20; break; } //@line 1451 "bufferedio.c"
      case 20: // $bb21
        var $95=HEAP[$res]; //@line 1453 "bufferedio.c"
        $0=$95; //@line 1453 "bufferedio.c"
        __label__ = 49; break; //@line 1453 "bufferedio.c"
      case 21: // $bb22
        var $96=HEAP[$res]; //@line 1455 "bufferedio.c"
        var $97=$96; //@line 1455 "bufferedio.c"
        var $98=HEAP[$97]; //@line 1455 "bufferedio.c"
        var $99=($98) - 1; //@line 1455 "bufferedio.c"
        var $100=$96; //@line 1455 "bufferedio.c"
        HEAP[$100]=$99; //@line 1455 "bufferedio.c"
        var $101=$96; //@line 1455 "bufferedio.c"
        var $102=HEAP[$101]; //@line 1455 "bufferedio.c"
        var $103=($102)==0; //@line 1455 "bufferedio.c"
        if ($103) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 1455 "bufferedio.c"
      case 22: // $bb23
        var $104=HEAP[$res]; //@line 1455 "bufferedio.c"
        var $105=$104+4; //@line 1455 "bufferedio.c"
        var $106=HEAP[$105]; //@line 1455 "bufferedio.c"
        var $107=$106+24; //@line 1455 "bufferedio.c"
        var $108=HEAP[$107]; //@line 1455 "bufferedio.c"
        var $109=HEAP[$res]; //@line 1455 "bufferedio.c"
        FUNCTION_TABLE[$108]($109); //@line 1455 "bufferedio.c"
        __label__ = 23; break; //@line 1455 "bufferedio.c"
      case 23: // $bb24
        var $110=HEAP[__Py_NoneStruct]; //@line 1456 "bufferedio.c"
        var $111=($110) + 1; //@line 1456 "bufferedio.c"
        HEAP[__Py_NoneStruct]=$111; //@line 1456 "bufferedio.c"
        $0=__Py_NoneStruct; //@line 1457 "bufferedio.c"
        __label__ = 49; break; //@line 1457 "bufferedio.c"
      case 24: // $bb25
        var $112=$remaining; //@line 1459 "bufferedio.c"
        var $113=$r; //@line 1459 "bufferedio.c"
        var $114=($112) - ($113); //@line 1459 "bufferedio.c"
        $remaining=$114; //@line 1459 "bufferedio.c"
        var $115=$written; //@line 1460 "bufferedio.c"
        var $116=$r; //@line 1460 "bufferedio.c"
        var $117=($116) + ($115); //@line 1460 "bufferedio.c"
        $written=$117; //@line 1460 "bufferedio.c"
        __lastLabel__ = 24; __label__ = 25; break; //@line 1460 "bufferedio.c"
      case 25: // $bb26
        var $118=__lastLabel__ == 24 ? $114 : ($_pr);
        var $119=($118) > 0; //@line 1439 "bufferedio.c"
        if ($119) { __label__ = 11; break; } else { __label__ = 26; break; } //@line 1439 "bufferedio.c"
      case 26: // $bb27
        var $120=$self_addr; //@line 1462 "bufferedio.c"
        var $121=$120+84; //@line 1462 "bufferedio.c"
        var $122=HEAP[$121]; //@line 1462 "bufferedio.c"
        var $123=$remaining; //@line 1462 "bufferedio.c"
        var $124=($122) < ($123); //@line 1462 "bufferedio.c"
        if ($124) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 1462 "bufferedio.c"
      case 27: // $bb28
        ___assert_fail(__str39, __str10, 1462, ___PRETTY_FUNCTION___10369); //@line 1462 "bufferedio.c"
        throw "Reached an unreachable!" //@line 1462 "bufferedio.c"
      case 28: // $bb29
        var $125=$self_addr; //@line 1463 "bufferedio.c"
        var $126=$125+44; //@line 1463 "bufferedio.c"
        HEAP[$126]=0; //@line 1463 "bufferedio.c"
        var $127=$self_addr; //@line 1464 "bufferedio.c"
        var $128=$127+52; //@line 1464 "bufferedio.c"
        HEAP[$128]=0; //@line 1464 "bufferedio.c"
        var $129=$self_addr; //@line 1465 "bufferedio.c"
        var $130=$129+60; //@line 1465 "bufferedio.c"
        HEAP[$130]=0; //@line 1465 "bufferedio.c"
        var $_old=$remaining; //@line 1469 "bufferedio.c"
        var $_old4=($_old) <= 0; //@line 1469 "bufferedio.c"
        if ($_old4) { __label__ = 44; break; } else { __label__ = 43; break; } //@line 1469 "bufferedio.c"
      case 29: // $bb30
        var $131=$self_addr; //@line 1470 "bufferedio.c"
        var $132=__bufferedreader_fill_buffer($131); //@line 1470 "bufferedio.c"
        $r31=$132; //@line 1470 "bufferedio.c"
        var $133=$r31; //@line 1471 "bufferedio.c"
        var $134=($133)==-1; //@line 1471 "bufferedio.c"
        if ($134) { __label__ = 45; break; } else { __label__ = 30; break; } //@line 1471 "bufferedio.c"
      case 30: // $bb32
        var $135=$r31; //@line 1473 "bufferedio.c"
        var $136=($135)==0; //@line 1473 "bufferedio.c"
        var $137=$r31; //@line 1473 "bufferedio.c"
        var $138=($137)==-2; //@line 1473 "bufferedio.c"
        var $or_cond3=($136) | ($138);
        if ($or_cond3) { __label__ = 31; break; } else { __label__ = 38; break; } //@line 1473 "bufferedio.c"
      case 31: // $bb34
        var $139=$r31; //@line 1475 "bufferedio.c"
        var $140=($139)==0; //@line 1475 "bufferedio.c"
        if ($140) { __label__ = 33; break; } else { __label__ = 32; break; } //@line 1475 "bufferedio.c"
      case 32: // $bb35
        var $141=$written; //@line 1475 "bufferedio.c"
        var $142=($141) > 0; //@line 1475 "bufferedio.c"
        if ($142) { __label__ = 33; break; } else { __label__ = 35; break; } //@line 1475 "bufferedio.c"
      case 33: // $bb36
        var $143=$written; //@line 1476 "bufferedio.c"
        var $144=__PyString_Resize($res, $143); //@line 1476 "bufferedio.c"
        var $145=($144)!=0; //@line 1476 "bufferedio.c"
        if ($145) { __label__ = 45; break; } else { __label__ = 34; break; } //@line 1476 "bufferedio.c"
      case 34: // $bb37
        var $146=HEAP[$res]; //@line 1478 "bufferedio.c"
        $0=$146; //@line 1478 "bufferedio.c"
        __label__ = 49; break; //@line 1478 "bufferedio.c"
      case 35: // $bb38
        var $147=HEAP[$res]; //@line 1480 "bufferedio.c"
        var $148=$147; //@line 1480 "bufferedio.c"
        var $149=HEAP[$148]; //@line 1480 "bufferedio.c"
        var $150=($149) - 1; //@line 1480 "bufferedio.c"
        var $151=$147; //@line 1480 "bufferedio.c"
        HEAP[$151]=$150; //@line 1480 "bufferedio.c"
        var $152=$147; //@line 1480 "bufferedio.c"
        var $153=HEAP[$152]; //@line 1480 "bufferedio.c"
        var $154=($153)==0; //@line 1480 "bufferedio.c"
        if ($154) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 1480 "bufferedio.c"
      case 36: // $bb39
        var $155=HEAP[$res]; //@line 1480 "bufferedio.c"
        var $156=$155+4; //@line 1480 "bufferedio.c"
        var $157=HEAP[$156]; //@line 1480 "bufferedio.c"
        var $158=$157+24; //@line 1480 "bufferedio.c"
        var $159=HEAP[$158]; //@line 1480 "bufferedio.c"
        var $160=HEAP[$res]; //@line 1480 "bufferedio.c"
        FUNCTION_TABLE[$159]($160); //@line 1480 "bufferedio.c"
        __label__ = 37; break; //@line 1480 "bufferedio.c"
      case 37: // $bb40
        var $161=HEAP[__Py_NoneStruct]; //@line 1481 "bufferedio.c"
        var $162=($161) + 1; //@line 1481 "bufferedio.c"
        HEAP[__Py_NoneStruct]=$162; //@line 1481 "bufferedio.c"
        $0=__Py_NoneStruct; //@line 1482 "bufferedio.c"
        __label__ = 49; break; //@line 1482 "bufferedio.c"
      case 38: // $bb41
        var $163=$remaining; //@line 1484 "bufferedio.c"
        var $164=$r31; //@line 1484 "bufferedio.c"
        var $165=($163) > ($164); //@line 1484 "bufferedio.c"
        if ($165) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 1484 "bufferedio.c"
      case 39: // $bb42
        var $166=$r31; //@line 1485 "bufferedio.c"
        var $167=$self_addr; //@line 1485 "bufferedio.c"
        var $168=$167+40; //@line 1485 "bufferedio.c"
        var $169=HEAP[$168]; //@line 1485 "bufferedio.c"
        var $170=$self_addr; //@line 1485 "bufferedio.c"
        var $171=$170+44; //@line 1485 "bufferedio.c"
        var $172=HEAP[$171]; //@line 1485 "bufferedio.c"
        var $173=((($172)) & 4294967295); //@line 1485 "bufferedio.c"
        var $174=$169+$173; //@line 1485 "bufferedio.c"
        var $175=$out; //@line 1485 "bufferedio.c"
        var $176=$written; //@line 1485 "bufferedio.c"
        var $177=$175+$176; //@line 1485 "bufferedio.c"
        _llvm_memcpy_p0i8_p0i8_i32($177, $174, $166, 1, 0); //@line 1485 "bufferedio.c"
        var $178=$written; //@line 1486 "bufferedio.c"
        var $179=$r31; //@line 1486 "bufferedio.c"
        var $180=($179) + ($178); //@line 1486 "bufferedio.c"
        $written=$180; //@line 1486 "bufferedio.c"
        var $181=$self_addr; //@line 1487 "bufferedio.c"
        var $182=$181+44; //@line 1487 "bufferedio.c"
        var $183=HEAP[$182]; //@line 1487 "bufferedio.c"
        var $184=$r31; //@line 1487 "bufferedio.c"
        var $185=($184); //@line 1487 "bufferedio.c"
        var $186=($185) + ($183); //@line 1487 "bufferedio.c"
        var $187=$self_addr; //@line 1487 "bufferedio.c"
        var $188=$187+44; //@line 1487 "bufferedio.c"
        HEAP[$188]=$186; //@line 1487 "bufferedio.c"
        var $189=$remaining; //@line 1488 "bufferedio.c"
        var $190=$r31; //@line 1488 "bufferedio.c"
        var $191=($189) - ($190); //@line 1488 "bufferedio.c"
        $remaining=$191; //@line 1488 "bufferedio.c"
        __label__ = 42; break; //@line 1488 "bufferedio.c"
      case 40: // $bb43
        var $192=$remaining; //@line 1490 "bufferedio.c"
        var $193=($192) > 0; //@line 1490 "bufferedio.c"
        if ($193) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 1490 "bufferedio.c"
      case 41: // $bb44
        var $194=$remaining; //@line 1491 "bufferedio.c"
        var $195=$self_addr; //@line 1491 "bufferedio.c"
        var $196=$195+40; //@line 1491 "bufferedio.c"
        var $197=HEAP[$196]; //@line 1491 "bufferedio.c"
        var $198=$self_addr; //@line 1491 "bufferedio.c"
        var $199=$198+44; //@line 1491 "bufferedio.c"
        var $200=HEAP[$199]; //@line 1491 "bufferedio.c"
        var $201=((($200)) & 4294967295); //@line 1491 "bufferedio.c"
        var $202=$197+$201; //@line 1491 "bufferedio.c"
        var $203=$out; //@line 1491 "bufferedio.c"
        var $204=$written; //@line 1491 "bufferedio.c"
        var $205=$203+$204; //@line 1491 "bufferedio.c"
        _llvm_memcpy_p0i8_p0i8_i32($205, $202, $194, 1, 0); //@line 1491 "bufferedio.c"
        var $206=$written; //@line 1492 "bufferedio.c"
        var $207=$remaining; //@line 1492 "bufferedio.c"
        var $208=($207) + ($206); //@line 1492 "bufferedio.c"
        $written=$208; //@line 1492 "bufferedio.c"
        var $209=$self_addr; //@line 1493 "bufferedio.c"
        var $210=$209+44; //@line 1493 "bufferedio.c"
        var $211=HEAP[$210]; //@line 1493 "bufferedio.c"
        var $212=$remaining; //@line 1493 "bufferedio.c"
        var $213=($212); //@line 1493 "bufferedio.c"
        var $214=($213) + ($211); //@line 1493 "bufferedio.c"
        var $215=$self_addr; //@line 1493 "bufferedio.c"
        var $216=$215+44; //@line 1493 "bufferedio.c"
        HEAP[$216]=$214; //@line 1493 "bufferedio.c"
        $remaining=0; //@line 1494 "bufferedio.c"
        __label__ = 42; break; //@line 1494 "bufferedio.c"
      case 42: // $bb45
        var $217=$remaining; //@line 1496 "bufferedio.c"
        var $218=($217)==0; //@line 1496 "bufferedio.c"
        var $219=$remaining; //@line 1469 "bufferedio.c"
        var $220=($219) <= 0; //@line 1469 "bufferedio.c"
        var $or_cond5=($218) | ($220);
        if ($or_cond5) { __label__ = 44; break; } else { __label__ = 43; break; } //@line 1496 "bufferedio.c"
      case 43: // $bb47
        var $221=$self_addr; //@line 1469 "bufferedio.c"
        var $222=$221+60; //@line 1469 "bufferedio.c"
        var $223=HEAP[$222]; //@line 1469 "bufferedio.c"
        var $224=$self_addr; //@line 1469 "bufferedio.c"
        var $225=$224+84; //@line 1469 "bufferedio.c"
        var $226=HEAP[$225]; //@line 1469 "bufferedio.c"
        var $227=($226); //@line 1469 "bufferedio.c"
        var $228=($223) < ($227); //@line 1469 "bufferedio.c"
        if ($228) { __label__ = 29; break; } else { __label__ = 44; break; } //@line 1469 "bufferedio.c"
      case 44: // $bb48
        var $229=HEAP[$res]; //@line 1500 "bufferedio.c"
        $0=$229; //@line 1500 "bufferedio.c"
        __label__ = 49; break; //@line 1500 "bufferedio.c"
      case 45: // $error
        var $_pr6=HEAP[$res];
        var $230=($_pr6)!=0; //@line 1503 "bufferedio.c"
        if ($230) { __label__ = 46; break; } else { __label__ = 48; break; } //@line 1503 "bufferedio.c"
      case 46: // $bb49
        var $231=HEAP[$res]; //@line 1503 "bufferedio.c"
        var $232=$231; //@line 1503 "bufferedio.c"
        var $233=HEAP[$232]; //@line 1503 "bufferedio.c"
        var $234=($233) - 1; //@line 1503 "bufferedio.c"
        var $235=$231; //@line 1503 "bufferedio.c"
        HEAP[$235]=$234; //@line 1503 "bufferedio.c"
        var $236=$231; //@line 1503 "bufferedio.c"
        var $237=HEAP[$236]; //@line 1503 "bufferedio.c"
        var $238=($237)==0; //@line 1503 "bufferedio.c"
        if ($238) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 1503 "bufferedio.c"
      case 47: // $bb50
        var $239=HEAP[$res]; //@line 1503 "bufferedio.c"
        var $240=$239+4; //@line 1503 "bufferedio.c"
        var $241=HEAP[$240]; //@line 1503 "bufferedio.c"
        var $242=$241+24; //@line 1503 "bufferedio.c"
        var $243=HEAP[$242]; //@line 1503 "bufferedio.c"
        var $244=HEAP[$res]; //@line 1503 "bufferedio.c"
        FUNCTION_TABLE[$243]($244); //@line 1503 "bufferedio.c"
        __label__ = 48; break; //@line 1503 "bufferedio.c"
      case 48: // $bb51
        $0=0; //@line 1504 "bufferedio.c"
        __label__ = 49; break; //@line 1504 "bufferedio.c"
      case 49: // $bb52
        var $245=$0; //@line 1425 "bufferedio.c"
        $retval=$245; //@line 1425 "bufferedio.c"
        var $retval53=$retval; //@line 1425 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval53; //@line 1425 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __bufferedreader_peek_unlocked($self, $n) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $n_addr;
        var $retval;
        var $0;
        var $iftmp_208;
        var $have;
        var $r;
        $self_addr=$self;
        $n_addr=$n;
        var $1=$self_addr; //@line 1512 "bufferedio.c"
        var $2=$1+20; //@line 1512 "bufferedio.c"
        var $3=HEAP[$2]; //@line 1512 "bufferedio.c"
        var $4=($3)==0; //@line 1512 "bufferedio.c"
        if ($4) { __label__ = 3; break; } else { __label__ = 1; break; } //@line 1512 "bufferedio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 1512 "bufferedio.c"
        var $6=$5+20; //@line 1512 "bufferedio.c"
        var $7=HEAP[$6]; //@line 1512 "bufferedio.c"
        var $8=($7)==0; //@line 1512 "bufferedio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 1512 "bufferedio.c"
      case 2: // $bb1
        var $9=$self_addr; //@line 1512 "bufferedio.c"
        var $10=$9+60; //@line 1512 "bufferedio.c"
        var $11=HEAP[$10]; //@line 1512 "bufferedio.c"
        var $12=($11)==-1; //@line 1512 "bufferedio.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1512 "bufferedio.c"
      case 3: // $bb4_thread
        $iftmp_208=0; //@line 1512 "bufferedio.c"
        $have=0; //@line 1512 "bufferedio.c"
        var $13=$self_addr; //@line 1520 "bufferedio.c"
        __lastLabel__ = 3; __label__ = 6; break;
      case 4: // $bb4
        var $14=$self_addr; //@line 1512 "bufferedio.c"
        var $15=$14+60; //@line 1512 "bufferedio.c"
        var $16=HEAP[$15]; //@line 1512 "bufferedio.c"
        var $17=((($16)) & 4294967295); //@line 1512 "bufferedio.c"
        var $18=$self_addr; //@line 1512 "bufferedio.c"
        var $19=$18+44; //@line 1512 "bufferedio.c"
        var $20=HEAP[$19]; //@line 1512 "bufferedio.c"
        var $21=((($20)) & 4294967295); //@line 1512 "bufferedio.c"
        var $22=($17) - ($21); //@line 1512 "bufferedio.c"
        $iftmp_208=$22; //@line 1512 "bufferedio.c"
        $have=$22; //@line 1512 "bufferedio.c"
        var $23=($22) > 0; //@line 1519 "bufferedio.c"
        var $24=$self_addr; //@line 1520 "bufferedio.c"
        if ($23) { __lastLabel__ = 4; __label__ = 5; break; } else { __lastLabel__ = 4; __label__ = 6; break; } //@line 1519 "bufferedio.c"
      case 5: // $bb5
        var $25=$24+40; //@line 1520 "bufferedio.c"
        var $26=HEAP[$25]; //@line 1520 "bufferedio.c"
        var $27=$self_addr; //@line 1520 "bufferedio.c"
        var $28=$27+44; //@line 1520 "bufferedio.c"
        var $29=HEAP[$28]; //@line 1520 "bufferedio.c"
        var $30=((($29)) & 4294967295); //@line 1520 "bufferedio.c"
        var $31=$26+$30; //@line 1520 "bufferedio.c"
        var $32=$have; //@line 1520 "bufferedio.c"
        var $33=_PyString_FromStringAndSize($31, $32); //@line 1520 "bufferedio.c"
        $0=$33; //@line 1520 "bufferedio.c"
        __label__ = 11; break; //@line 1520 "bufferedio.c"
      case 6: // $bb6
        var $34=__lastLabel__ == 3 ? $13 : ($24);
        __bufferedreader_reset_buf($34); //@line 1524 "bufferedio.c"
        var $35=$self_addr; //@line 1525 "bufferedio.c"
        var $36=__bufferedreader_fill_buffer($35); //@line 1525 "bufferedio.c"
        $r=$36; //@line 1525 "bufferedio.c"
        var $37=($36)==-1; //@line 1526 "bufferedio.c"
        if ($37) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1526 "bufferedio.c"
      case 7: // $bb7
        $0=0; //@line 1527 "bufferedio.c"
        __label__ = 11; break; //@line 1527 "bufferedio.c"
      case 8: // $bb8
        var $38=$r; //@line 1528 "bufferedio.c"
        var $39=($38)==-2; //@line 1528 "bufferedio.c"
        if ($39) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1528 "bufferedio.c"
      case 9: // $bb9
        $r=0; //@line 1529 "bufferedio.c"
        __label__ = 10; break; //@line 1529 "bufferedio.c"
      case 10: // $bb10
        var $40=$self_addr; //@line 1530 "bufferedio.c"
        var $41=$40+44; //@line 1530 "bufferedio.c"
        HEAP[$41]=0; //@line 1530 "bufferedio.c"
        var $42=$self_addr; //@line 1531 "bufferedio.c"
        var $43=$42+40; //@line 1531 "bufferedio.c"
        var $44=HEAP[$43]; //@line 1531 "bufferedio.c"
        var $45=$r; //@line 1531 "bufferedio.c"
        var $46=_PyString_FromStringAndSize($44, $45); //@line 1531 "bufferedio.c"
        $0=$46; //@line 1531 "bufferedio.c"
        __label__ = 11; break; //@line 1531 "bufferedio.c"
      case 11: // $bb11
        var $47=$0; //@line 1520 "bufferedio.c"
        $retval=$47; //@line 1520 "bufferedio.c"
        var $retval12=$retval; //@line 1520 "bufferedio.c"
        ;
        return $retval12; //@line 1520 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _complain_about_max_buffer_size() {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $retval;
        var $0;
        var $1=HEAP[_PyExc_DeprecationWarning]; //@line 1615 "bufferedio.c"
        var $2=_PyErr_WarnEx($1, __str54, 1); //@line 1615 "bufferedio.c"
        var $3=($2) < 0; //@line 1615 "bufferedio.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1615 "bufferedio.c"
      case 1: // $bb
        $0=0; //@line 1617 "bufferedio.c"
        __label__ = 3; break; //@line 1617 "bufferedio.c"
      case 2: // $bb1
        $0=1; //@line 1618 "bufferedio.c"
        __label__ = 3; break; //@line 1618 "bufferedio.c"
      case 3: // $bb2
        var $4=$0; //@line 1617 "bufferedio.c"
        $retval=$4; //@line 1617 "bufferedio.c"
        var $retval3=$retval; //@line 1617 "bufferedio.c"
        ;
        return $retval3; //@line 1617 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __bufferedwriter_reset_buf($self) {
    ;
    var __label__;
  
    var $self_addr;
    $self_addr=$self;
    var $0=$self_addr; //@line 1635 "bufferedio.c"
    var $1=$0+68; //@line 1635 "bufferedio.c"
    HEAP[$1]=0; //@line 1635 "bufferedio.c"
    var $2=$self_addr; //@line 1636 "bufferedio.c"
    var $3=$2+76; //@line 1636 "bufferedio.c"
    HEAP[$3]=-1; //@line 1636 "bufferedio.c"
    ;
    return; //@line 1637 "bufferedio.c"
  }
  

  function _bufferedwriter_init($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $kwds_addr;
        var $retval;
        var $iftmp_217;
        var $0;
        var $kwlist=__stackBase__;
        var $buffer_size=__stackBase__+16;
        var $max_buffer_size=__stackBase__+20;
        var $raw=__stackBase__+24;
        var $_py_tmp;
        $self_addr=$self;
        $args_addr=$args;
        $kwds_addr=$kwds;
        var $1=$kwlist; //@line 1643 "bufferedio.c"
        HEAP[$1]=__str35; //@line 1643 "bufferedio.c"
        var $2=$kwlist+4; //@line 1643 "bufferedio.c"
        HEAP[$2]=__str36; //@line 1643 "bufferedio.c"
        var $3=$kwlist+8; //@line 1643 "bufferedio.c"
        HEAP[$3]=__str55; //@line 1643 "bufferedio.c"
        var $4=$kwlist+12; //@line 1643 "bufferedio.c"
        HEAP[$4]=0; //@line 1643 "bufferedio.c"
        HEAP[$buffer_size]=8192; //@line 1644 "bufferedio.c"
        HEAP[$max_buffer_size]=-234; //@line 1645 "bufferedio.c"
        var $5=$self_addr; //@line 1648 "bufferedio.c"
        var $6=$5+12; //@line 1648 "bufferedio.c"
        HEAP[$6]=0; //@line 1648 "bufferedio.c"
        var $7=$self_addr; //@line 1649 "bufferedio.c"
        var $8=$7+16; //@line 1649 "bufferedio.c"
        HEAP[$8]=0; //@line 1649 "bufferedio.c"
        var $9=$args_addr; //@line 1651 "bufferedio.c"
        var $10=$kwds_addr; //@line 1651 "bufferedio.c"
        var $kwlist1=$kwlist; //@line 1651 "bufferedio.c"
        var $11=__PyArg_ParseTupleAndKeywords_SizeT($9, $10, __str56, $kwlist1, allocate([$raw,0,0,0,$buffer_size,0,0,0,$max_buffer_size,0,0,0], ["%struct.PyObject**",0,0,0,"i32*",0,0,0,"i32*",0,0,0], ALLOC_STACK)); //@line 1651 "bufferedio.c"
        var $12=($11)==0; //@line 1651 "bufferedio.c"
        if ($12) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1651 "bufferedio.c"
      case 1: // $bb
        $0=-1; //@line 1653 "bufferedio.c"
        __label__ = 17; break; //@line 1653 "bufferedio.c"
      case 2: // $bb2
        var $13=HEAP[$max_buffer_size]; //@line 1656 "bufferedio.c"
        var $14=($13)!=-234; //@line 1656 "bufferedio.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 1656 "bufferedio.c"
      case 3: // $bb3
        var $15=_complain_about_max_buffer_size(); //@line 1656 "bufferedio.c"
        var $16=($15)==0; //@line 1656 "bufferedio.c"
        if ($16) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1656 "bufferedio.c"
      case 4: // $bb4
        $0=-1; //@line 1657 "bufferedio.c"
        __label__ = 17; break; //@line 1657 "bufferedio.c"
      case 5: // $bb5
        var $17=HEAP[$raw]; //@line 1659 "bufferedio.c"
        var $18=__PyIOBase_check_writable($17, __Py_TrueStruct); //@line 1659 "bufferedio.c"
        var $19=($18)==0; //@line 1659 "bufferedio.c"
        if ($19) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1659 "bufferedio.c"
      case 6: // $bb6
        $0=-1; //@line 1660 "bufferedio.c"
        __label__ = 17; break; //@line 1660 "bufferedio.c"
      case 7: // $bb7
        var $20=$self_addr; //@line 1662 "bufferedio.c"
        var $21=$20+8; //@line 1662 "bufferedio.c"
        var $22=HEAP[$21]; //@line 1662 "bufferedio.c"
        var $23=($22)!=0; //@line 1662 "bufferedio.c"
        if ($23) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 1662 "bufferedio.c"
      case 8: // $bb8
        var $24=$self_addr; //@line 1662 "bufferedio.c"
        var $25=$24+8; //@line 1662 "bufferedio.c"
        var $26=HEAP[$25]; //@line 1662 "bufferedio.c"
        $_py_tmp=$26; //@line 1662 "bufferedio.c"
        var $27=$self_addr; //@line 1662 "bufferedio.c"
        var $28=$27+8; //@line 1662 "bufferedio.c"
        HEAP[$28]=0; //@line 1662 "bufferedio.c"
        var $29=$_py_tmp; //@line 1662 "bufferedio.c"
        var $30=$29; //@line 1662 "bufferedio.c"
        var $31=HEAP[$30]; //@line 1662 "bufferedio.c"
        var $32=($31) - 1; //@line 1662 "bufferedio.c"
        var $33=$_py_tmp; //@line 1662 "bufferedio.c"
        var $34=$33; //@line 1662 "bufferedio.c"
        HEAP[$34]=$32; //@line 1662 "bufferedio.c"
        var $35=$_py_tmp; //@line 1662 "bufferedio.c"
        var $36=$35; //@line 1662 "bufferedio.c"
        var $37=HEAP[$36]; //@line 1662 "bufferedio.c"
        var $38=($37)==0; //@line 1662 "bufferedio.c"
        if ($38) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1662 "bufferedio.c"
      case 9: // $bb9
        var $39=$_py_tmp; //@line 1662 "bufferedio.c"
        var $40=$39+4; //@line 1662 "bufferedio.c"
        var $41=HEAP[$40]; //@line 1662 "bufferedio.c"
        var $42=$41+24; //@line 1662 "bufferedio.c"
        var $43=HEAP[$42]; //@line 1662 "bufferedio.c"
        var $44=$_py_tmp; //@line 1662 "bufferedio.c"
        FUNCTION_TABLE[$43]($44); //@line 1662 "bufferedio.c"
        __label__ = 10; break; //@line 1662 "bufferedio.c"
      case 10: // $bb10
        var $45=HEAP[$raw]; //@line 1663 "bufferedio.c"
        var $46=$45; //@line 1663 "bufferedio.c"
        var $47=HEAP[$46]; //@line 1663 "bufferedio.c"
        var $48=($47) + 1; //@line 1663 "bufferedio.c"
        var $49=$45; //@line 1663 "bufferedio.c"
        HEAP[$49]=$48; //@line 1663 "bufferedio.c"
        var $50=HEAP[$raw]; //@line 1664 "bufferedio.c"
        var $51=$self_addr; //@line 1664 "bufferedio.c"
        var $52=$51+8; //@line 1664 "bufferedio.c"
        HEAP[$52]=$50; //@line 1664 "bufferedio.c"
        var $53=$self_addr; //@line 1665 "bufferedio.c"
        var $54=$53+20; //@line 1665 "bufferedio.c"
        HEAP[$54]=0; //@line 1665 "bufferedio.c"
        var $55=$self_addr; //@line 1666 "bufferedio.c"
        var $56=$55+24; //@line 1666 "bufferedio.c"
        HEAP[$56]=1; //@line 1666 "bufferedio.c"
        var $57=HEAP[$buffer_size]; //@line 1668 "bufferedio.c"
        var $58=$self_addr; //@line 1668 "bufferedio.c"
        var $59=$58+84; //@line 1668 "bufferedio.c"
        HEAP[$59]=$57; //@line 1668 "bufferedio.c"
        var $60=$self_addr; //@line 1669 "bufferedio.c"
        var $61=__buffered_init($60); //@line 1669 "bufferedio.c"
        var $62=($61) < 0; //@line 1669 "bufferedio.c"
        if ($62) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1669 "bufferedio.c"
      case 11: // $bb11
        $0=-1; //@line 1670 "bufferedio.c"
        __label__ = 17; break; //@line 1670 "bufferedio.c"
      case 12: // $bb12
        var $63=$self_addr; //@line 1671 "bufferedio.c"
        __bufferedwriter_reset_buf($63); //@line 1671 "bufferedio.c"
        var $64=$self_addr; //@line 1672 "bufferedio.c"
        var $65=$64+44; //@line 1672 "bufferedio.c"
        HEAP[$65]=0; //@line 1672 "bufferedio.c"
        var $66=$self_addr; //@line 1674 "bufferedio.c"
        var $67=$66; //@line 1674 "bufferedio.c"
        var $68=$67+4; //@line 1674 "bufferedio.c"
        var $69=HEAP[$68]; //@line 1674 "bufferedio.c"
        var $70=($69)!=(_PyBufferedWriter_Type); //@line 1674 "bufferedio.c"
        if ($70) { __label__ = 15; break; } else { __label__ = 13; break; } //@line 1674 "bufferedio.c"
      case 13: // $bb13
        var $71=HEAP[$raw]; //@line 1674 "bufferedio.c"
        var $72=$71+4; //@line 1674 "bufferedio.c"
        var $73=HEAP[$72]; //@line 1674 "bufferedio.c"
        var $74=($73)!=(_PyFileIO_Type); //@line 1674 "bufferedio.c"
        if ($74) { __label__ = 15; break; } else { __label__ = 14; break; } //@line 1674 "bufferedio.c"
      case 14: // $bb14
        $iftmp_217=1; //@line 1674 "bufferedio.c"
        __label__ = 16; break; //@line 1674 "bufferedio.c"
      case 15: // $bb15
        $iftmp_217=0; //@line 1674 "bufferedio.c"
        __label__ = 16; break; //@line 1674 "bufferedio.c"
      case 16: // $bb16
        var $75=$self_addr; //@line 1674 "bufferedio.c"
        var $76=$75+28; //@line 1674 "bufferedio.c"
        var $77=$iftmp_217; //@line 1674 "bufferedio.c"
        HEAP[$76]=$77; //@line 1674 "bufferedio.c"
        var $78=$self_addr; //@line 1677 "bufferedio.c"
        var $79=$78+12; //@line 1677 "bufferedio.c"
        HEAP[$79]=1; //@line 1677 "bufferedio.c"
        $0=0; //@line 1678 "bufferedio.c"
        __label__ = 17; break; //@line 1678 "bufferedio.c"
      case 17: // $bb17
        var $80=$0; //@line 1653 "bufferedio.c"
        $retval=$80; //@line 1653 "bufferedio.c"
        var $retval18=$retval; //@line 1653 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval18; //@line 1653 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __bufferedwriter_raw_write($self, $start, $len) {
    var __stackBase__  = STACKTOP; STACKTOP += 52; _memset(__stackBase__, 0, 52);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $start_addr;
        var $len_addr;
        var $retval;
        var $0;
        var $buf=__stackBase__;
        var $memobj;
        var $res;
        var $n;
        $self_addr=$self;
        $start_addr=$start;
        $len_addr=$len;
        var $1=$start_addr; //@line 1688 "bufferedio.c"
        var $2=$len_addr; //@line 1688 "bufferedio.c"
        var $3=_PyBuffer_FillInfo($buf, 0, $1, $2, 1, 8); //@line 1688 "bufferedio.c"
        var $4=($3)==-1; //@line 1688 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1688 "bufferedio.c"
      case 1: // $bb
        $0=-1; //@line 1689 "bufferedio.c"
        __label__ = 19; break; //@line 1689 "bufferedio.c"
      case 2: // $bb1
        var $5=_PyMemoryView_FromBuffer($buf); //@line 1690 "bufferedio.c"
        $memobj=$5; //@line 1690 "bufferedio.c"
        var $6=$memobj; //@line 1691 "bufferedio.c"
        var $7=($6)==0; //@line 1691 "bufferedio.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1691 "bufferedio.c"
      case 3: // $bb2
        $0=-1; //@line 1692 "bufferedio.c"
        __label__ = 19; break; //@line 1692 "bufferedio.c"
      case 4: // $bb3
        var $8=HEAP[__PyIO_str_write]; //@line 1699 "bufferedio.c"
        var $9=$self_addr; //@line 1699 "bufferedio.c"
        var $10=$9+8; //@line 1699 "bufferedio.c"
        var $11=HEAP[$10]; //@line 1699 "bufferedio.c"
        var $12=$memobj; //@line 1699 "bufferedio.c"
        var $13=_PyObject_CallMethodObjArgs($11, $8, allocate([$12,0,0,0,0,0,0,0], ["%struct.PyObject*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 1699 "bufferedio.c"
        $res=$13; //@line 1699 "bufferedio.c"
        var $14=($13)!=0; //@line 1700 "bufferedio.c"
        if ($14) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 1700 "bufferedio.c"
      case 5: // $bb4
        var $15=__trap_eintr(); //@line 1700 "bufferedio.c"
        var $16=($15)!=0; //@line 1700 "bufferedio.c"
        if ($16) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 1700 "bufferedio.c"
      case 6: // $bb5
        var $17=$memobj; //@line 1701 "bufferedio.c"
        var $18=$17; //@line 1701 "bufferedio.c"
        var $19=HEAP[$18]; //@line 1701 "bufferedio.c"
        var $20=($19) - 1; //@line 1701 "bufferedio.c"
        var $21=$memobj; //@line 1701 "bufferedio.c"
        var $22=$21; //@line 1701 "bufferedio.c"
        HEAP[$22]=$20; //@line 1701 "bufferedio.c"
        var $23=$memobj; //@line 1701 "bufferedio.c"
        var $24=$23; //@line 1701 "bufferedio.c"
        var $25=HEAP[$24]; //@line 1701 "bufferedio.c"
        var $26=($25)==0; //@line 1701 "bufferedio.c"
        if ($26) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1701 "bufferedio.c"
      case 7: // $bb6
        var $27=$memobj; //@line 1701 "bufferedio.c"
        var $28=$27+4; //@line 1701 "bufferedio.c"
        var $29=HEAP[$28]; //@line 1701 "bufferedio.c"
        var $30=$29+24; //@line 1701 "bufferedio.c"
        var $31=HEAP[$30]; //@line 1701 "bufferedio.c"
        var $32=$memobj; //@line 1701 "bufferedio.c"
        FUNCTION_TABLE[$31]($32); //@line 1701 "bufferedio.c"
        __label__ = 8; break; //@line 1701 "bufferedio.c"
      case 8: // $bb7
        var $33=$res; //@line 1702 "bufferedio.c"
        var $34=($33)==0; //@line 1702 "bufferedio.c"
        if ($34) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1702 "bufferedio.c"
      case 9: // $bb8
        $0=-1; //@line 1703 "bufferedio.c"
        __label__ = 19; break; //@line 1703 "bufferedio.c"
      case 10: // $bb9
        var $35=HEAP[_PyExc_ValueError]; //@line 1704 "bufferedio.c"
        var $36=$res; //@line 1704 "bufferedio.c"
        var $37=_PyNumber_AsSsize_t($36, $35); //@line 1704 "bufferedio.c"
        $n=$37; //@line 1704 "bufferedio.c"
        var $38=$res; //@line 1705 "bufferedio.c"
        var $39=$38; //@line 1705 "bufferedio.c"
        var $40=HEAP[$39]; //@line 1705 "bufferedio.c"
        var $41=($40) - 1; //@line 1705 "bufferedio.c"
        var $42=$res; //@line 1705 "bufferedio.c"
        var $43=$42; //@line 1705 "bufferedio.c"
        HEAP[$43]=$41; //@line 1705 "bufferedio.c"
        var $44=$res; //@line 1705 "bufferedio.c"
        var $45=$44; //@line 1705 "bufferedio.c"
        var $46=HEAP[$45]; //@line 1705 "bufferedio.c"
        var $47=($46)==0; //@line 1705 "bufferedio.c"
        if ($47) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1705 "bufferedio.c"
      case 11: // $bb10
        var $48=$res; //@line 1705 "bufferedio.c"
        var $49=$48+4; //@line 1705 "bufferedio.c"
        var $50=HEAP[$49]; //@line 1705 "bufferedio.c"
        var $51=$50+24; //@line 1705 "bufferedio.c"
        var $52=HEAP[$51]; //@line 1705 "bufferedio.c"
        var $53=$res; //@line 1705 "bufferedio.c"
        FUNCTION_TABLE[$52]($53); //@line 1705 "bufferedio.c"
        __label__ = 12; break; //@line 1705 "bufferedio.c"
      case 12: // $bb11
        var $54=$n; //@line 1706 "bufferedio.c"
        var $55=($54) < 0; //@line 1706 "bufferedio.c"
        if ($55) { __label__ = 14; break; } else { __label__ = 13; break; } //@line 1706 "bufferedio.c"
      case 13: // $bb12
        var $56=$n; //@line 1706 "bufferedio.c"
        var $57=$len_addr; //@line 1706 "bufferedio.c"
        var $58=($56) > ($57); //@line 1706 "bufferedio.c"
        if ($58) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1706 "bufferedio.c"
      case 14: // $bb13
        var $59=HEAP[_PyExc_IOError]; //@line 1707 "bufferedio.c"
        var $60=$n; //@line 1707 "bufferedio.c"
        var $61=$len_addr; //@line 1707 "bufferedio.c"
        var $62=_PyErr_Format($59, __str57, allocate([$60,0,0,0,$61,0,0,0], ["i32",0,0,0,"i32",0,0,0], ALLOC_STACK)); //@line 1707 "bufferedio.c"
        $0=-1; //@line 1710 "bufferedio.c"
        __label__ = 19; break; //@line 1710 "bufferedio.c"
      case 15: // $bb14
        var $63=$n; //@line 1712 "bufferedio.c"
        var $64=($63) > 0; //@line 1712 "bufferedio.c"
        if ($64) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 1712 "bufferedio.c"
      case 16: // $bb15
        var $65=$self_addr; //@line 1712 "bufferedio.c"
        var $66=$65+32; //@line 1712 "bufferedio.c"
        var $67=HEAP[$66]; //@line 1712 "bufferedio.c"
        var $68=($67)!=-1; //@line 1712 "bufferedio.c"
        if ($68) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 1712 "bufferedio.c"
      case 17: // $bb16
        var $69=$self_addr; //@line 1713 "bufferedio.c"
        var $70=$69+32; //@line 1713 "bufferedio.c"
        var $71=HEAP[$70]; //@line 1713 "bufferedio.c"
        var $72=$n; //@line 1713 "bufferedio.c"
        var $73=($72); //@line 1713 "bufferedio.c"
        var $74=($73) + ($71); //@line 1713 "bufferedio.c"
        var $75=$self_addr; //@line 1713 "bufferedio.c"
        var $76=$75+32; //@line 1713 "bufferedio.c"
        HEAP[$76]=$74; //@line 1713 "bufferedio.c"
        __label__ = 18; break; //@line 1713 "bufferedio.c"
      case 18: // $bb17
        var $77=$n; //@line 1714 "bufferedio.c"
        $0=$77; //@line 1714 "bufferedio.c"
        __label__ = 19; break; //@line 1714 "bufferedio.c"
      case 19: // $bb18
        var $78=$0; //@line 1689 "bufferedio.c"
        $retval=$78; //@line 1689 "bufferedio.c"
        var $retval19=$retval; //@line 1689 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval19; //@line 1689 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __bufferedwriter_flush_unlocked($self, $restore_pos) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $restore_pos_addr;
        var $retval;
        var $0;
        var $iftmp_223;
        var $written;
        var $n;
        var $rewind;
        var $w;
        var $forward;
        $self_addr=$self;
        $restore_pos_addr=$restore_pos;
        $written=0; //@line 1722 "bufferedio.c"
        var $1=$self_addr; //@line 1725 "bufferedio.c"
        var $2=$1+24; //@line 1725 "bufferedio.c"
        var $3=HEAP[$2]; //@line 1725 "bufferedio.c"
        var $4=($3)==0; //@line 1725 "bufferedio.c"
        if ($4) { __label__ = 23; break; } else { __label__ = 1; break; } //@line 1725 "bufferedio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 1725 "bufferedio.c"
        var $6=$5+76; //@line 1725 "bufferedio.c"
        var $7=HEAP[$6]; //@line 1725 "bufferedio.c"
        var $8=($7)==-1; //@line 1725 "bufferedio.c"
        if ($8) { __label__ = 23; break; } else { __label__ = 2; break; } //@line 1725 "bufferedio.c"
      case 2: // $bb1
        var $9=$self_addr; //@line 1725 "bufferedio.c"
        var $10=$9+68; //@line 1725 "bufferedio.c"
        var $11=HEAP[$10]; //@line 1725 "bufferedio.c"
        var $12=$self_addr; //@line 1725 "bufferedio.c"
        var $13=$12+76; //@line 1725 "bufferedio.c"
        var $14=HEAP[$13]; //@line 1725 "bufferedio.c"
        var $15=($11)==($14); //@line 1725 "bufferedio.c"
        if ($15) { __label__ = 23; break; } else { __label__ = 3; break; } //@line 1725 "bufferedio.c"
      case 3: // $bb2
        var $16=$self_addr; //@line 1728 "bufferedio.c"
        var $17=$16+20; //@line 1728 "bufferedio.c"
        var $18=HEAP[$17]; //@line 1728 "bufferedio.c"
        var $19=($18)==0; //@line 1728 "bufferedio.c"
        if ($19) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 1728 "bufferedio.c"
      case 4: // $bb3
        var $20=$self_addr; //@line 1728 "bufferedio.c"
        var $21=$20+60; //@line 1728 "bufferedio.c"
        var $22=HEAP[$21]; //@line 1728 "bufferedio.c"
        var $23=($22)!=-1; //@line 1728 "bufferedio.c"
        if ($23) { __label__ = 7; break; } else { __label__ = 5; break; } //@line 1728 "bufferedio.c"
      case 5: // $bb4
        var $24=$self_addr; //@line 1728 "bufferedio.c"
        var $25=$24+24; //@line 1728 "bufferedio.c"
        var $26=HEAP[$25]; //@line 1728 "bufferedio.c"
        var $27=($26)==0; //@line 1728 "bufferedio.c"
        if ($27) { __label__ = 9; break; } else { __label__ = 6; break; } //@line 1728 "bufferedio.c"
      case 6: // $bb5
        var $28=$self_addr; //@line 1728 "bufferedio.c"
        var $29=$28+76; //@line 1728 "bufferedio.c"
        var $30=HEAP[$29]; //@line 1728 "bufferedio.c"
        var $31=($30)!=-1; //@line 1728 "bufferedio.c"
        if ($31) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 1728 "bufferedio.c"
      case 7: // $bb6
        var $32=$self_addr; //@line 1728 "bufferedio.c"
        var $33=$32+52; //@line 1728 "bufferedio.c"
        var $34=HEAP[$33]; //@line 1728 "bufferedio.c"
        var $35=($34) < 0; //@line 1728 "bufferedio.c"
        if ($35) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 1728 "bufferedio.c"
      case 8: // $bb7
        var $36=$self_addr; //@line 1728 "bufferedio.c"
        var $37=$36+52; //@line 1728 "bufferedio.c"
        var $38=HEAP[$37]; //@line 1728 "bufferedio.c"
        var $39=$self_addr; //@line 1728 "bufferedio.c"
        var $40=$39+44; //@line 1728 "bufferedio.c"
        var $41=HEAP[$40]; //@line 1728 "bufferedio.c"
        var $42=($38) - ($41); //@line 1728 "bufferedio.c"
        $iftmp_223=$42; //@line 1728 "bufferedio.c"
        __label__ = 10; break; //@line 1728 "bufferedio.c"
      case 9: // $bb8
        $iftmp_223=0; //@line 1728 "bufferedio.c"
        __label__ = 10; break; //@line 1728 "bufferedio.c"
      case 10: // $bb9
        var $43=$self_addr; //@line 1728 "bufferedio.c"
        var $44=$43+44; //@line 1728 "bufferedio.c"
        var $45=HEAP[$44]; //@line 1728 "bufferedio.c"
        var $46=$self_addr; //@line 1728 "bufferedio.c"
        var $47=$46+68; //@line 1728 "bufferedio.c"
        var $48=HEAP[$47]; //@line 1728 "bufferedio.c"
        var $49=($45) - ($48); //@line 1728 "bufferedio.c"
        var $50=$iftmp_223; //@line 1728 "bufferedio.c"
        var $51=($50) + ($49); //@line 1728 "bufferedio.c"
        $rewind=$51; //@line 1728 "bufferedio.c"
        var $52=($51)!=0; //@line 1729 "bufferedio.c"
        if ($52) { __label__ = 11; break; } else { __label__ = 17; break; } //@line 1729 "bufferedio.c"
      case 11: // $bb10
        var $53=$rewind; //@line 1730 "bufferedio.c"
        var $54=0 - ($53); //@line 1730 "bufferedio.c"
        var $55=$self_addr; //@line 1730 "bufferedio.c"
        var $56=__buffered_raw_seek($55, $54, 1); //@line 1730 "bufferedio.c"
        $n=$56; //@line 1730 "bufferedio.c"
        var $57=$n; //@line 1731 "bufferedio.c"
        var $58=($57) < 0; //@line 1731 "bufferedio.c"
        if ($58) { __label__ = 24; break; } else { __label__ = 12; break; } //@line 1731 "bufferedio.c"
      case 12: // $bb11
        var $59=$self_addr; //@line 1734 "bufferedio.c"
        var $60=$59+52; //@line 1734 "bufferedio.c"
        var $61=HEAP[$60]; //@line 1734 "bufferedio.c"
        var $62=$rewind; //@line 1734 "bufferedio.c"
        var $63=($61) - ($62); //@line 1734 "bufferedio.c"
        var $64=$self_addr; //@line 1734 "bufferedio.c"
        var $65=$64+52; //@line 1734 "bufferedio.c"
        HEAP[$65]=$63; //@line 1734 "bufferedio.c"
        __label__ = 17; break; //@line 1734 "bufferedio.c"
      case 13: // $bb13
        var $66=$self_addr; //@line 1737 "bufferedio.c"
        var $67=$66+76; //@line 1737 "bufferedio.c"
        var $68=HEAP[$67]; //@line 1737 "bufferedio.c"
        var $69=((($68)) & 4294967295); //@line 1737 "bufferedio.c"
        var $70=$self_addr; //@line 1737 "bufferedio.c"
        var $71=$70+68; //@line 1737 "bufferedio.c"
        var $72=HEAP[$71]; //@line 1737 "bufferedio.c"
        var $73=((($72)) & 4294967295); //@line 1737 "bufferedio.c"
        var $74=($69) - ($73); //@line 1737 "bufferedio.c"
        var $75=$self_addr; //@line 1737 "bufferedio.c"
        var $76=$75+40; //@line 1737 "bufferedio.c"
        var $77=HEAP[$76]; //@line 1737 "bufferedio.c"
        var $78=$self_addr; //@line 1737 "bufferedio.c"
        var $79=$78+68; //@line 1737 "bufferedio.c"
        var $80=HEAP[$79]; //@line 1737 "bufferedio.c"
        var $81=((($80)) & 4294967295); //@line 1737 "bufferedio.c"
        var $82=$77+$81; //@line 1737 "bufferedio.c"
        var $83=$self_addr; //@line 1737 "bufferedio.c"
        var $84=__bufferedwriter_raw_write($83, $82, $74); //@line 1737 "bufferedio.c"
        var $85=($84); //@line 1737 "bufferedio.c"
        $n=$85; //@line 1737 "bufferedio.c"
        var $86=$n; //@line 1741 "bufferedio.c"
        var $87=($86)==-1; //@line 1741 "bufferedio.c"
        if ($87) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 1741 "bufferedio.c"
      case 14: // $bb14
        var $88=__buffered_check_blocking_error(); //@line 1742 "bufferedio.c"
        $w=$88; //@line 1742 "bufferedio.c"
        var $89=$w; //@line 1743 "bufferedio.c"
        var $90=($89)==0; //@line 1743 "bufferedio.c"
        if ($90) { __label__ = 24; break; } else { __label__ = 15; break; } //@line 1743 "bufferedio.c"
      case 15: // $bb15
        var $91=$self_addr; //@line 1745 "bufferedio.c"
        var $92=$91+68; //@line 1745 "bufferedio.c"
        var $93=HEAP[$92]; //@line 1745 "bufferedio.c"
        var $94=$w; //@line 1745 "bufferedio.c"
        var $95=HEAP[$94]; //@line 1745 "bufferedio.c"
        var $96=($95); //@line 1745 "bufferedio.c"
        var $97=($96) + ($93); //@line 1745 "bufferedio.c"
        var $98=$self_addr; //@line 1745 "bufferedio.c"
        var $99=$98+68; //@line 1745 "bufferedio.c"
        HEAP[$99]=$97; //@line 1745 "bufferedio.c"
        var $100=$self_addr; //@line 1746 "bufferedio.c"
        var $101=$100+68; //@line 1746 "bufferedio.c"
        var $102=HEAP[$101]; //@line 1746 "bufferedio.c"
        var $103=$self_addr; //@line 1746 "bufferedio.c"
        var $104=$103+52; //@line 1746 "bufferedio.c"
        HEAP[$104]=$102; //@line 1746 "bufferedio.c"
        var $105=$w; //@line 1747 "bufferedio.c"
        var $106=HEAP[$105]; //@line 1747 "bufferedio.c"
        var $107=$written; //@line 1747 "bufferedio.c"
        var $108=($107) + ($106); //@line 1747 "bufferedio.c"
        $written=$108; //@line 1747 "bufferedio.c"
        var $109=$w; //@line 1748 "bufferedio.c"
        var $110=$written; //@line 1748 "bufferedio.c"
        HEAP[$109]=$110; //@line 1748 "bufferedio.c"
        __label__ = 24; break; //@line 1748 "bufferedio.c"
      case 16: // $bb16
        var $111=$self_addr; //@line 1752 "bufferedio.c"
        var $112=$111+68; //@line 1752 "bufferedio.c"
        var $113=HEAP[$112]; //@line 1752 "bufferedio.c"
        var $114=$n; //@line 1752 "bufferedio.c"
        var $115=($114) + ($113); //@line 1752 "bufferedio.c"
        var $116=$self_addr; //@line 1752 "bufferedio.c"
        var $117=$116+68; //@line 1752 "bufferedio.c"
        HEAP[$117]=$115; //@line 1752 "bufferedio.c"
        var $118=$self_addr; //@line 1753 "bufferedio.c"
        var $119=$118+68; //@line 1753 "bufferedio.c"
        var $120=HEAP[$119]; //@line 1753 "bufferedio.c"
        var $121=$self_addr; //@line 1753 "bufferedio.c"
        var $122=$121+52; //@line 1753 "bufferedio.c"
        HEAP[$122]=$120; //@line 1753 "bufferedio.c"
        var $123=$n; //@line 1754 "bufferedio.c"
        var $124=((($123)) & 4294967295); //@line 1754 "bufferedio.c"
        var $125=$written; //@line 1754 "bufferedio.c"
        var $126=($124) + ($125); //@line 1754 "bufferedio.c"
        $written=$126; //@line 1754 "bufferedio.c"
        var $127=_PyErr_CheckSignals(); //@line 1758 "bufferedio.c"
        var $128=($127) < 0; //@line 1758 "bufferedio.c"
        if ($128) { __label__ = 24; break; } else { __label__ = 17; break; } //@line 1758 "bufferedio.c"
      case 17: // $bb17
        var $129=$self_addr; //@line 1736 "bufferedio.c"
        var $130=$129+68; //@line 1736 "bufferedio.c"
        var $131=HEAP[$130]; //@line 1736 "bufferedio.c"
        var $132=$self_addr; //@line 1736 "bufferedio.c"
        var $133=$132+76; //@line 1736 "bufferedio.c"
        var $134=HEAP[$133]; //@line 1736 "bufferedio.c"
        var $135=($131) < ($134); //@line 1736 "bufferedio.c"
        if ($135) { __label__ = 13; break; } else { __label__ = 18; break; } //@line 1736 "bufferedio.c"
      case 18: // $bb18
        var $136=$restore_pos_addr; //@line 1762 "bufferedio.c"
        var $137=($136)!=0; //@line 1762 "bufferedio.c"
        if ($137) { __label__ = 19; break; } else { __label__ = 22; break; } //@line 1762 "bufferedio.c"
      case 19: // $bb19
        var $138=$written; //@line 1763 "bufferedio.c"
        var $139=($138); //@line 1763 "bufferedio.c"
        var $140=$rewind; //@line 1763 "bufferedio.c"
        var $141=($140) - ($139); //@line 1763 "bufferedio.c"
        $forward=$141; //@line 1763 "bufferedio.c"
        var $142=$forward; //@line 1764 "bufferedio.c"
        var $143=($142)!=0; //@line 1764 "bufferedio.c"
        if ($143) { __label__ = 20; break; } else { __label__ = 22; break; } //@line 1764 "bufferedio.c"
      case 20: // $bb20
        var $144=$self_addr; //@line 1765 "bufferedio.c"
        var $145=$forward; //@line 1765 "bufferedio.c"
        var $146=__buffered_raw_seek($144, $145, 1); //@line 1765 "bufferedio.c"
        $n=$146; //@line 1765 "bufferedio.c"
        var $147=$n; //@line 1766 "bufferedio.c"
        var $148=($147) < 0; //@line 1766 "bufferedio.c"
        if ($148) { __label__ = 24; break; } else { __label__ = 21; break; } //@line 1766 "bufferedio.c"
      case 21: // $bb21
        var $149=$self_addr; //@line 1769 "bufferedio.c"
        var $150=$149+52; //@line 1769 "bufferedio.c"
        var $151=HEAP[$150]; //@line 1769 "bufferedio.c"
        var $152=$forward; //@line 1769 "bufferedio.c"
        var $153=($152) + ($151); //@line 1769 "bufferedio.c"
        var $154=$self_addr; //@line 1769 "bufferedio.c"
        var $155=$154+52; //@line 1769 "bufferedio.c"
        HEAP[$155]=$153; //@line 1769 "bufferedio.c"
        __label__ = 22; break; //@line 1769 "bufferedio.c"
      case 22: // $bb22
        var $156=$self_addr; //@line 1772 "bufferedio.c"
        __bufferedwriter_reset_buf($156); //@line 1772 "bufferedio.c"
        __label__ = 23; break; //@line 1774 "bufferedio.c"
      case 23: // $end
        var $157=HEAP[__Py_NoneStruct]; //@line 1775 "bufferedio.c"
        var $158=($157) + 1; //@line 1775 "bufferedio.c"
        HEAP[__Py_NoneStruct]=$158; //@line 1775 "bufferedio.c"
        $0=__Py_NoneStruct; //@line 1775 "bufferedio.c"
        __label__ = 25; break; //@line 1775 "bufferedio.c"
      case 24: // $error
        $0=0; //@line 1778 "bufferedio.c"
        __label__ = 25; break; //@line 1778 "bufferedio.c"
      case 25: // $bb23
        var $159=$0; //@line 1775 "bufferedio.c"
        $retval=$159; //@line 1775 "bufferedio.c"
        var $retval24=$retval; //@line 1775 "bufferedio.c"
        ;
        return $retval24; //@line 1775 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferedwriter_write($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 52; _memset(__stackBase__, 0, 52);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $iftmp_229;
        var $iftmp_226;
        var $0;
        var $res;
        var $buf=__stackBase__;
        var $written;
        var $avail;
        var $remaining;
        var $offset;
        var $w;
        var $_py_tmp;
        var $n;
        var $w54;
        $self_addr=$self;
        $args_addr=$args;
        $res=0; //@line 1784 "bufferedio.c"
        var $1=$self_addr; //@line 1789 "bufferedio.c"
        var $2=$1+12; //@line 1789 "bufferedio.c"
        var $3=HEAP[$2]; //@line 1789 "bufferedio.c"
        var $4=($3) <= 0; //@line 1789 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 1789 "bufferedio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 1789 "bufferedio.c"
        var $6=$5+16; //@line 1789 "bufferedio.c"
        var $7=HEAP[$6]; //@line 1789 "bufferedio.c"
        var $8=($7)!=0; //@line 1789 "bufferedio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 1789 "bufferedio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1789 "bufferedio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str11); //@line 1789 "bufferedio.c"
        __label__ = 4; break; //@line 1789 "bufferedio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str12); //@line 1789 "bufferedio.c"
        __label__ = 4; break; //@line 1789 "bufferedio.c"
      case 4: // $bb3
        $0=0; //@line 1789 "bufferedio.c"
        __label__ = 74; break; //@line 1789 "bufferedio.c"
      case 5: // $bb4
        var $10=$args_addr; //@line 1790 "bufferedio.c"
        var $11=__PyArg_ParseTuple_SizeT($10, __str58, allocate([$buf,0,0,0], ["%struct.Py_buffer*",0,0,0], ALLOC_STACK)); //@line 1790 "bufferedio.c"
        var $12=($11)==0; //@line 1790 "bufferedio.c"
        if ($12) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1790 "bufferedio.c"
      case 6: // $bb5
        $0=0; //@line 1791 "bufferedio.c"
        __label__ = 74; break; //@line 1791 "bufferedio.c"
      case 7: // $bb6
        var $13=$self_addr; //@line 1794 "bufferedio.c"
        var $14=$13+28; //@line 1794 "bufferedio.c"
        var $15=HEAP[$14]; //@line 1794 "bufferedio.c"
        var $16=($15)!=0; //@line 1794 "bufferedio.c"
        var $17=$self_addr; //@line 1794 "bufferedio.c"
        if ($16) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1794 "bufferedio.c"
      case 8: // $bb7
        var $18=$17+8; //@line 1794 "bufferedio.c"
        var $19=HEAP[$18]; //@line 1794 "bufferedio.c"
        var $20=__PyFileIO_closed($19); //@line 1794 "bufferedio.c"
        var $21=($20)!=0; //@line 1794 "bufferedio.c"
        var $22=($21); //@line 1794 "bufferedio.c"
        $iftmp_226=$22; //@line 1794 "bufferedio.c"
        __lastLabel__ = 8; __label__ = 10; break; //@line 1794 "bufferedio.c"
      case 9: // $bb8
        var $23=_buffered_closed($17); //@line 1794 "bufferedio.c"
        var $24=($23)!=0; //@line 1794 "bufferedio.c"
        var $25=($24); //@line 1794 "bufferedio.c"
        $iftmp_226=$25; //@line 1794 "bufferedio.c"
        __lastLabel__ = 9; __label__ = 10; break; //@line 1794 "bufferedio.c"
      case 10: // $bb9
        var $26=__lastLabel__ == 9 ? $25 : ($22);
        var $toBool=($26)!=0; //@line 1794 "bufferedio.c"
        if ($toBool) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1794 "bufferedio.c"
      case 11: // $bb10
        var $27=HEAP[_PyExc_ValueError]; //@line 1795 "bufferedio.c"
        _PyErr_SetString($27, __str59); //@line 1795 "bufferedio.c"
        _PyBuffer_Release($buf); //@line 1796 "bufferedio.c"
        $0=0; //@line 1797 "bufferedio.c"
        __label__ = 74; break; //@line 1797 "bufferedio.c"
      case 12: // $bb11
        var $28=$self_addr; //@line 1806 "bufferedio.c"
        var $29=$28+20; //@line 1806 "bufferedio.c"
        var $30=HEAP[$29]; //@line 1806 "bufferedio.c"
        var $31=($30)==0; //@line 1806 "bufferedio.c"
        if ($31) { __label__ = 14; break; } else { __label__ = 13; break; } //@line 1806 "bufferedio.c"
      case 13: // $bb12
        var $32=$self_addr; //@line 1806 "bufferedio.c"
        var $33=$32+60; //@line 1806 "bufferedio.c"
        var $34=HEAP[$33]; //@line 1806 "bufferedio.c"
        var $35=($34)==-1; //@line 1806 "bufferedio.c"
        if ($35) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 1806 "bufferedio.c"
      case 14: // $bb13
        var $36=$self_addr; //@line 1806 "bufferedio.c"
        var $37=$36+24; //@line 1806 "bufferedio.c"
        var $38=HEAP[$37]; //@line 1806 "bufferedio.c"
        var $39=($38)==0; //@line 1806 "bufferedio.c"
        if ($39) { __label__ = 16; break; } else { __label__ = 15; break; } //@line 1806 "bufferedio.c"
      case 15: // $bb14
        var $40=$self_addr; //@line 1806 "bufferedio.c"
        var $41=$40+76; //@line 1806 "bufferedio.c"
        var $42=HEAP[$41]; //@line 1806 "bufferedio.c"
        var $43=($42)==-1; //@line 1806 "bufferedio.c"
        if ($43) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 1806 "bufferedio.c"
      case 16: // $bb15
        var $44=$self_addr; //@line 1807 "bufferedio.c"
        var $45=$44+44; //@line 1807 "bufferedio.c"
        HEAP[$45]=0; //@line 1807 "bufferedio.c"
        var $46=$self_addr; //@line 1808 "bufferedio.c"
        var $47=$46+52; //@line 1808 "bufferedio.c"
        HEAP[$47]=0; //@line 1808 "bufferedio.c"
        __label__ = 17; break; //@line 1808 "bufferedio.c"
      case 17: // $bb16
        var $48=$self_addr; //@line 1810 "bufferedio.c"
        var $49=$48+84; //@line 1810 "bufferedio.c"
        var $50=HEAP[$49]; //@line 1810 "bufferedio.c"
        var $51=$self_addr; //@line 1810 "bufferedio.c"
        var $52=$51+44; //@line 1810 "bufferedio.c"
        var $53=HEAP[$52]; //@line 1810 "bufferedio.c"
        var $54=((($53)) & 4294967295); //@line 1810 "bufferedio.c"
        var $55=($50) - ($54); //@line 1810 "bufferedio.c"
        $avail=$55; //@line 1810 "bufferedio.c"
        var $56=$buf+8; //@line 1811 "bufferedio.c"
        var $57=HEAP[$56]; //@line 1811 "bufferedio.c"
        var $58=$avail; //@line 1811 "bufferedio.c"
        var $59=($57) <= ($58); //@line 1811 "bufferedio.c"
        if ($59) { __label__ = 18; break; } else { __label__ = 29; break; } //@line 1811 "bufferedio.c"
      case 18: // $bb17
        var $60=$buf+8; //@line 1812 "bufferedio.c"
        var $61=HEAP[$60]; //@line 1812 "bufferedio.c"
        var $62=$buf; //@line 1812 "bufferedio.c"
        var $63=HEAP[$62]; //@line 1812 "bufferedio.c"
        var $64=$self_addr; //@line 1812 "bufferedio.c"
        var $65=$64+40; //@line 1812 "bufferedio.c"
        var $66=HEAP[$65]; //@line 1812 "bufferedio.c"
        var $67=$self_addr; //@line 1812 "bufferedio.c"
        var $68=$67+44; //@line 1812 "bufferedio.c"
        var $69=HEAP[$68]; //@line 1812 "bufferedio.c"
        var $70=((($69)) & 4294967295); //@line 1812 "bufferedio.c"
        var $71=$66+$70; //@line 1812 "bufferedio.c"
        _llvm_memcpy_p0i8_p0i8_i32($71, $63, $61, 1, 0); //@line 1812 "bufferedio.c"
        var $72=$self_addr; //@line 1813 "bufferedio.c"
        var $73=$72+24; //@line 1813 "bufferedio.c"
        var $74=HEAP[$73]; //@line 1813 "bufferedio.c"
        var $75=($74)==0; //@line 1813 "bufferedio.c"
        if ($75) { __label__ = 21; break; } else { __label__ = 19; break; } //@line 1813 "bufferedio.c"
      case 19: // $bb18
        var $76=$self_addr; //@line 1813 "bufferedio.c"
        var $77=$76+76; //@line 1813 "bufferedio.c"
        var $78=HEAP[$77]; //@line 1813 "bufferedio.c"
        var $79=($78)==-1; //@line 1813 "bufferedio.c"
        if ($79) { __label__ = 21; break; } else { __label__ = 20; break; } //@line 1813 "bufferedio.c"
      case 20: // $bb19
        var $80=$self_addr; //@line 1813 "bufferedio.c"
        var $81=$80+68; //@line 1813 "bufferedio.c"
        var $82=HEAP[$81]; //@line 1813 "bufferedio.c"
        var $83=$self_addr; //@line 1813 "bufferedio.c"
        var $84=$83+44; //@line 1813 "bufferedio.c"
        var $85=HEAP[$84]; //@line 1813 "bufferedio.c"
        var $86=($82) > ($85); //@line 1813 "bufferedio.c"
        if ($86) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 1813 "bufferedio.c"
      case 21: // $bb20
        var $87=$self_addr; //@line 1814 "bufferedio.c"
        var $88=$87+44; //@line 1814 "bufferedio.c"
        var $89=HEAP[$88]; //@line 1814 "bufferedio.c"
        var $90=$self_addr; //@line 1814 "bufferedio.c"
        var $91=$90+68; //@line 1814 "bufferedio.c"
        HEAP[$91]=$89; //@line 1814 "bufferedio.c"
        __label__ = 22; break; //@line 1814 "bufferedio.c"
      case 22: // $bb21
        var $92=$self_addr; //@line 1816 "bufferedio.c"
        var $93=$92+44; //@line 1816 "bufferedio.c"
        var $94=HEAP[$93]; //@line 1816 "bufferedio.c"
        var $95=$buf+8; //@line 1816 "bufferedio.c"
        var $96=HEAP[$95]; //@line 1816 "bufferedio.c"
        var $97=($96); //@line 1816 "bufferedio.c"
        var $98=($97) + ($94); //@line 1816 "bufferedio.c"
        var $99=$self_addr; //@line 1816 "bufferedio.c"
        var $100=$99+44; //@line 1816 "bufferedio.c"
        HEAP[$100]=$98; //@line 1816 "bufferedio.c"
        var $101=$self_addr; //@line 1816 "bufferedio.c"
        var $102=$101+20; //@line 1816 "bufferedio.c"
        var $103=HEAP[$102]; //@line 1816 "bufferedio.c"
        var $104=($103)!=0; //@line 1816 "bufferedio.c"
        if ($104) { __label__ = 23; break; } else { __label__ = 26; break; } //@line 1816 "bufferedio.c"
      case 23: // $bb22
        var $105=$self_addr; //@line 1816 "bufferedio.c"
        var $106=$105+60; //@line 1816 "bufferedio.c"
        var $107=HEAP[$106]; //@line 1816 "bufferedio.c"
        var $108=($107)!=-1; //@line 1816 "bufferedio.c"
        if ($108) { __label__ = 24; break; } else { __label__ = 26; break; } //@line 1816 "bufferedio.c"
      case 24: // $bb23
        var $109=$self_addr; //@line 1816 "bufferedio.c"
        var $110=$109+60; //@line 1816 "bufferedio.c"
        var $111=HEAP[$110]; //@line 1816 "bufferedio.c"
        var $112=$self_addr; //@line 1816 "bufferedio.c"
        var $113=$112+44; //@line 1816 "bufferedio.c"
        var $114=HEAP[$113]; //@line 1816 "bufferedio.c"
        var $115=($111) < ($114); //@line 1816 "bufferedio.c"
        if ($115) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 1816 "bufferedio.c"
      case 25: // $bb24
        var $116=$self_addr; //@line 1816 "bufferedio.c"
        var $117=$116+44; //@line 1816 "bufferedio.c"
        var $118=HEAP[$117]; //@line 1816 "bufferedio.c"
        var $119=$self_addr; //@line 1816 "bufferedio.c"
        var $120=$119+60; //@line 1816 "bufferedio.c"
        HEAP[$120]=$118; //@line 1816 "bufferedio.c"
        __label__ = 26; break; //@line 1816 "bufferedio.c"
      case 26: // $bb25
        var $121=$self_addr; //@line 1817 "bufferedio.c"
        var $122=$121+44; //@line 1817 "bufferedio.c"
        var $123=HEAP[$122]; //@line 1817 "bufferedio.c"
        var $124=$self_addr; //@line 1817 "bufferedio.c"
        var $125=$124+76; //@line 1817 "bufferedio.c"
        var $126=HEAP[$125]; //@line 1817 "bufferedio.c"
        var $127=($123) > ($126); //@line 1817 "bufferedio.c"
        if ($127) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 1817 "bufferedio.c"
      case 27: // $bb26
        var $128=$self_addr; //@line 1818 "bufferedio.c"
        var $129=$128+44; //@line 1818 "bufferedio.c"
        var $130=HEAP[$129]; //@line 1818 "bufferedio.c"
        var $131=$self_addr; //@line 1818 "bufferedio.c"
        var $132=$131+76; //@line 1818 "bufferedio.c"
        HEAP[$132]=$130; //@line 1818 "bufferedio.c"
        __label__ = 28; break; //@line 1818 "bufferedio.c"
      case 28: // $bb27
        var $133=$buf+8; //@line 1819 "bufferedio.c"
        var $134=HEAP[$133]; //@line 1819 "bufferedio.c"
        $written=$134; //@line 1819 "bufferedio.c"
        __label__ = 72; break; //@line 1819 "bufferedio.c"
      case 29: // $bb28
        var $135=$self_addr; //@line 1824 "bufferedio.c"
        var $136=__bufferedwriter_flush_unlocked($135, 0); //@line 1824 "bufferedio.c"
        $res=$136; //@line 1824 "bufferedio.c"
        var $137=$res; //@line 1825 "bufferedio.c"
        var $138=($137)==0; //@line 1825 "bufferedio.c"
        if ($138) { __label__ = 30; break; } else { __label__ = 39; break; } //@line 1825 "bufferedio.c"
      case 30: // $bb29
        var $139=__buffered_check_blocking_error(); //@line 1826 "bufferedio.c"
        $w=$139; //@line 1826 "bufferedio.c"
        var $140=$w; //@line 1827 "bufferedio.c"
        var $141=($140)==0; //@line 1827 "bufferedio.c"
        if ($141) { __label__ = 73; break; } else { __label__ = 31; break; } //@line 1827 "bufferedio.c"
      case 31: // $bb30
        var $142=$self_addr; //@line 1829 "bufferedio.c"
        var $143=$142+20; //@line 1829 "bufferedio.c"
        var $144=HEAP[$143]; //@line 1829 "bufferedio.c"
        var $145=($144)!=0; //@line 1829 "bufferedio.c"
        if ($145) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 1829 "bufferedio.c"
      case 32: // $bb31
        var $146=$self_addr; //@line 1830 "bufferedio.c"
        __bufferedreader_reset_buf($146); //@line 1830 "bufferedio.c"
        __label__ = 33; break; //@line 1830 "bufferedio.c"
      case 33: // $bb32
        var $147=$self_addr; //@line 1832 "bufferedio.c"
        var $148=$147+24; //@line 1832 "bufferedio.c"
        var $149=HEAP[$148]; //@line 1832 "bufferedio.c"
        var $150=($149)==0; //@line 1832 "bufferedio.c"
        if ($150) { __label__ = 35; break; } else { __label__ = 34; break; } //@line 1832 "bufferedio.c"
      case 34: // $bb33
        var $151=$self_addr; //@line 1832 "bufferedio.c"
        var $152=$151+76; //@line 1832 "bufferedio.c"
        var $153=HEAP[$152]; //@line 1832 "bufferedio.c"
        var $154=($153)==-1; //@line 1832 "bufferedio.c"
        if ($154) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 1832 "bufferedio.c"
      case 35: // $bb34
        ___assert_fail(__str60, __str10, 1832, ___PRETTY_FUNCTION___10762); //@line 1832 "bufferedio.c"
        throw "Reached an unreachable!" //@line 1832 "bufferedio.c"
      case 36: // $bb35
        var $155=$self_addr; //@line 1833 "bufferedio.c"
        var $156=$155+76; //@line 1833 "bufferedio.c"
        var $157=HEAP[$156]; //@line 1833 "bufferedio.c"
        var $158=((($157)) & 4294967295); //@line 1833 "bufferedio.c"
        var $159=$self_addr; //@line 1833 "bufferedio.c"
        var $160=$159+68; //@line 1833 "bufferedio.c"
        var $161=HEAP[$160]; //@line 1833 "bufferedio.c"
        var $162=((($161)) & 4294967295); //@line 1833 "bufferedio.c"
        var $163=($158) - ($162); //@line 1833 "bufferedio.c"
        var $164=$self_addr; //@line 1833 "bufferedio.c"
        var $165=$164+40; //@line 1833 "bufferedio.c"
        var $166=HEAP[$165]; //@line 1833 "bufferedio.c"
        var $167=$self_addr; //@line 1833 "bufferedio.c"
        var $168=$167+68; //@line 1833 "bufferedio.c"
        var $169=HEAP[$168]; //@line 1833 "bufferedio.c"
        var $170=((($169)) & 4294967295); //@line 1833 "bufferedio.c"
        var $171=$166+$170; //@line 1833 "bufferedio.c"
        var $172=$self_addr; //@line 1833 "bufferedio.c"
        var $173=$172+40; //@line 1833 "bufferedio.c"
        var $174=HEAP[$173]; //@line 1833 "bufferedio.c"
        _llvm_memmove_p0i8_p0i8_i32($174, $171, $163, 1, 0); //@line 1833 "bufferedio.c"
        var $175=$self_addr; //@line 1836 "bufferedio.c"
        var $176=$175+76; //@line 1836 "bufferedio.c"
        var $177=HEAP[$176]; //@line 1836 "bufferedio.c"
        var $178=$self_addr; //@line 1836 "bufferedio.c"
        var $179=$178+68; //@line 1836 "bufferedio.c"
        var $180=HEAP[$179]; //@line 1836 "bufferedio.c"
        var $181=($177) - ($180); //@line 1836 "bufferedio.c"
        var $182=$self_addr; //@line 1836 "bufferedio.c"
        var $183=$182+76; //@line 1836 "bufferedio.c"
        HEAP[$183]=$181; //@line 1836 "bufferedio.c"
        var $184=$self_addr; //@line 1837 "bufferedio.c"
        var $185=$184+52; //@line 1837 "bufferedio.c"
        var $186=HEAP[$185]; //@line 1837 "bufferedio.c"
        var $187=$self_addr; //@line 1837 "bufferedio.c"
        var $188=$187+68; //@line 1837 "bufferedio.c"
        var $189=HEAP[$188]; //@line 1837 "bufferedio.c"
        var $190=($186) - ($189); //@line 1837 "bufferedio.c"
        var $191=$self_addr; //@line 1837 "bufferedio.c"
        var $192=$191+52; //@line 1837 "bufferedio.c"
        HEAP[$192]=$190; //@line 1837 "bufferedio.c"
        var $193=$self_addr; //@line 1838 "bufferedio.c"
        var $194=$193+44; //@line 1838 "bufferedio.c"
        var $195=HEAP[$194]; //@line 1838 "bufferedio.c"
        var $196=$self_addr; //@line 1838 "bufferedio.c"
        var $197=$196+68; //@line 1838 "bufferedio.c"
        var $198=HEAP[$197]; //@line 1838 "bufferedio.c"
        var $199=($195) - ($198); //@line 1838 "bufferedio.c"
        var $200=$self_addr; //@line 1838 "bufferedio.c"
        var $201=$200+44; //@line 1838 "bufferedio.c"
        HEAP[$201]=$199; //@line 1838 "bufferedio.c"
        var $202=$self_addr; //@line 1839 "bufferedio.c"
        var $203=$202+68; //@line 1839 "bufferedio.c"
        HEAP[$203]=0; //@line 1839 "bufferedio.c"
        var $204=$self_addr; //@line 1840 "bufferedio.c"
        var $205=$204+84; //@line 1840 "bufferedio.c"
        var $206=HEAP[$205]; //@line 1840 "bufferedio.c"
        var $207=$self_addr; //@line 1840 "bufferedio.c"
        var $208=$207+76; //@line 1840 "bufferedio.c"
        var $209=HEAP[$208]; //@line 1840 "bufferedio.c"
        var $210=((($209)) & 4294967295); //@line 1840 "bufferedio.c"
        var $211=($206) - ($210); //@line 1840 "bufferedio.c"
        $avail=$211; //@line 1840 "bufferedio.c"
        var $212=$buf+8; //@line 1842 "bufferedio.c"
        var $213=HEAP[$212]; //@line 1842 "bufferedio.c"
        var $214=$avail; //@line 1842 "bufferedio.c"
        var $215=($213) <= ($214); //@line 1842 "bufferedio.c"
        if ($215) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 1842 "bufferedio.c"
      case 37: // $bb36
        _PyErr_Clear(); //@line 1844 "bufferedio.c"
        var $216=$buf+8; //@line 1845 "bufferedio.c"
        var $217=HEAP[$216]; //@line 1845 "bufferedio.c"
        var $218=$buf; //@line 1845 "bufferedio.c"
        var $219=HEAP[$218]; //@line 1845 "bufferedio.c"
        var $220=$self_addr; //@line 1845 "bufferedio.c"
        var $221=$220+40; //@line 1845 "bufferedio.c"
        var $222=HEAP[$221]; //@line 1845 "bufferedio.c"
        var $223=$self_addr; //@line 1845 "bufferedio.c"
        var $224=$223+76; //@line 1845 "bufferedio.c"
        var $225=HEAP[$224]; //@line 1845 "bufferedio.c"
        var $226=((($225)) & 4294967295); //@line 1845 "bufferedio.c"
        var $227=$222+$226; //@line 1845 "bufferedio.c"
        _llvm_memcpy_p0i8_p0i8_i32($227, $219, $217, 1, 0); //@line 1845 "bufferedio.c"
        var $228=$self_addr; //@line 1846 "bufferedio.c"
        var $229=$228+76; //@line 1846 "bufferedio.c"
        var $230=HEAP[$229]; //@line 1846 "bufferedio.c"
        var $231=$buf+8; //@line 1846 "bufferedio.c"
        var $232=HEAP[$231]; //@line 1846 "bufferedio.c"
        var $233=($232); //@line 1846 "bufferedio.c"
        var $234=($233) + ($230); //@line 1846 "bufferedio.c"
        var $235=$self_addr; //@line 1846 "bufferedio.c"
        var $236=$235+76; //@line 1846 "bufferedio.c"
        HEAP[$236]=$234; //@line 1846 "bufferedio.c"
        var $237=$buf+8; //@line 1847 "bufferedio.c"
        var $238=HEAP[$237]; //@line 1847 "bufferedio.c"
        $written=$238; //@line 1847 "bufferedio.c"
        __label__ = 72; break; //@line 1847 "bufferedio.c"
      case 38: // $bb37
        var $239=$avail; //@line 1851 "bufferedio.c"
        var $240=$buf; //@line 1851 "bufferedio.c"
        var $241=HEAP[$240]; //@line 1851 "bufferedio.c"
        var $242=$self_addr; //@line 1851 "bufferedio.c"
        var $243=$242+40; //@line 1851 "bufferedio.c"
        var $244=HEAP[$243]; //@line 1851 "bufferedio.c"
        var $245=$self_addr; //@line 1851 "bufferedio.c"
        var $246=$245+76; //@line 1851 "bufferedio.c"
        var $247=HEAP[$246]; //@line 1851 "bufferedio.c"
        var $248=((($247)) & 4294967295); //@line 1851 "bufferedio.c"
        var $249=$244+$248; //@line 1851 "bufferedio.c"
        _llvm_memcpy_p0i8_p0i8_i32($249, $241, $239, 1, 0); //@line 1851 "bufferedio.c"
        var $250=$self_addr; //@line 1852 "bufferedio.c"
        var $251=$250+76; //@line 1852 "bufferedio.c"
        var $252=HEAP[$251]; //@line 1852 "bufferedio.c"
        var $253=$avail; //@line 1852 "bufferedio.c"
        var $254=($253); //@line 1852 "bufferedio.c"
        var $255=($254) + ($252); //@line 1852 "bufferedio.c"
        var $256=$self_addr; //@line 1852 "bufferedio.c"
        var $257=$256+76; //@line 1852 "bufferedio.c"
        HEAP[$257]=$255; //@line 1852 "bufferedio.c"
        var $258=$w; //@line 1854 "bufferedio.c"
        var $259=$avail; //@line 1854 "bufferedio.c"
        HEAP[$258]=$259; //@line 1854 "bufferedio.c"
        __label__ = 73; break; //@line 1854 "bufferedio.c"
      case 39: // $bb38
        var $260=$res; //@line 1857 "bufferedio.c"
        var $261=($260)!=0; //@line 1857 "bufferedio.c"
        if ($261) { __label__ = 40; break; } else { __label__ = 42; break; } //@line 1857 "bufferedio.c"
      case 40: // $bb39
        var $262=$res; //@line 1857 "bufferedio.c"
        $_py_tmp=$262; //@line 1857 "bufferedio.c"
        $res=0; //@line 1857 "bufferedio.c"
        var $263=$_py_tmp; //@line 1857 "bufferedio.c"
        var $264=$263; //@line 1857 "bufferedio.c"
        var $265=HEAP[$264]; //@line 1857 "bufferedio.c"
        var $266=($265) - 1; //@line 1857 "bufferedio.c"
        var $267=$_py_tmp; //@line 1857 "bufferedio.c"
        var $268=$267; //@line 1857 "bufferedio.c"
        HEAP[$268]=$266; //@line 1857 "bufferedio.c"
        var $269=$_py_tmp; //@line 1857 "bufferedio.c"
        var $270=$269; //@line 1857 "bufferedio.c"
        var $271=HEAP[$270]; //@line 1857 "bufferedio.c"
        var $272=($271)==0; //@line 1857 "bufferedio.c"
        if ($272) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 1857 "bufferedio.c"
      case 41: // $bb40
        var $273=$_py_tmp; //@line 1857 "bufferedio.c"
        var $274=$273+4; //@line 1857 "bufferedio.c"
        var $275=HEAP[$274]; //@line 1857 "bufferedio.c"
        var $276=$275+24; //@line 1857 "bufferedio.c"
        var $277=HEAP[$276]; //@line 1857 "bufferedio.c"
        var $278=$_py_tmp; //@line 1857 "bufferedio.c"
        FUNCTION_TABLE[$277]($278); //@line 1857 "bufferedio.c"
        __label__ = 42; break; //@line 1857 "bufferedio.c"
      case 42: // $bb41
        var $279=$self_addr; //@line 1865 "bufferedio.c"
        var $280=$279+20; //@line 1865 "bufferedio.c"
        var $281=HEAP[$280]; //@line 1865 "bufferedio.c"
        var $282=($281)==0; //@line 1865 "bufferedio.c"
        if ($282) { __label__ = 44; break; } else { __label__ = 43; break; } //@line 1865 "bufferedio.c"
      case 43: // $bb42
        var $283=$self_addr; //@line 1865 "bufferedio.c"
        var $284=$283+60; //@line 1865 "bufferedio.c"
        var $285=HEAP[$284]; //@line 1865 "bufferedio.c"
        var $286=($285)!=-1; //@line 1865 "bufferedio.c"
        if ($286) { __label__ = 46; break; } else { __label__ = 44; break; } //@line 1865 "bufferedio.c"
      case 44: // $bb43
        var $287=$self_addr; //@line 1865 "bufferedio.c"
        var $288=$287+24; //@line 1865 "bufferedio.c"
        var $289=HEAP[$288]; //@line 1865 "bufferedio.c"
        var $290=($289)==0; //@line 1865 "bufferedio.c"
        if ($290) { __label__ = 47; break; } else { __label__ = 45; break; } //@line 1865 "bufferedio.c"
      case 45: // $bb44
        var $291=$self_addr; //@line 1865 "bufferedio.c"
        var $292=$291+76; //@line 1865 "bufferedio.c"
        var $293=HEAP[$292]; //@line 1865 "bufferedio.c"
        var $294=($293)!=-1; //@line 1865 "bufferedio.c"
        if ($294) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 1865 "bufferedio.c"
      case 46: // $bb45
        var $295=$self_addr; //@line 1865 "bufferedio.c"
        var $296=$295+52; //@line 1865 "bufferedio.c"
        var $297=HEAP[$296]; //@line 1865 "bufferedio.c"
        var $298=($297) < 0; //@line 1865 "bufferedio.c"
        if ($298) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 1865 "bufferedio.c"
      case 47: // $bb48_thread
        $iftmp_229=0; //@line 1865 "bufferedio.c"
        $offset=0; //@line 1865 "bufferedio.c"
        __label__ = 51; break;
      case 48: // $bb48
        var $299=$self_addr; //@line 1865 "bufferedio.c"
        var $300=$299+52; //@line 1865 "bufferedio.c"
        var $301=HEAP[$300]; //@line 1865 "bufferedio.c"
        var $302=$self_addr; //@line 1865 "bufferedio.c"
        var $303=$302+44; //@line 1865 "bufferedio.c"
        var $304=HEAP[$303]; //@line 1865 "bufferedio.c"
        var $305=($301) - ($304); //@line 1865 "bufferedio.c"
        $iftmp_229=$305; //@line 1865 "bufferedio.c"
        $offset=$305; //@line 1865 "bufferedio.c"
        var $306=($305)!=0; //@line 1866 "bufferedio.c"
        if ($306) { __label__ = 49; break; } else { __label__ = 51; break; } //@line 1866 "bufferedio.c"
      case 49: // $bb49
        var $307=$offset; //@line 1867 "bufferedio.c"
        var $308=0 - ($307); //@line 1867 "bufferedio.c"
        var $309=$self_addr; //@line 1867 "bufferedio.c"
        var $310=__buffered_raw_seek($309, $308, 1); //@line 1867 "bufferedio.c"
        var $311=($310) < 0; //@line 1867 "bufferedio.c"
        if ($311) { __label__ = 73; break; } else { __label__ = 50; break; } //@line 1867 "bufferedio.c"
      case 50: // $bb50
        var $312=$self_addr; //@line 1869 "bufferedio.c"
        var $313=$312+52; //@line 1869 "bufferedio.c"
        var $314=HEAP[$313]; //@line 1869 "bufferedio.c"
        var $315=$offset; //@line 1869 "bufferedio.c"
        var $316=($314) - ($315); //@line 1869 "bufferedio.c"
        var $317=$self_addr; //@line 1869 "bufferedio.c"
        var $318=$317+52; //@line 1869 "bufferedio.c"
        HEAP[$318]=$316; //@line 1869 "bufferedio.c"
        __label__ = 51; break; //@line 1869 "bufferedio.c"
      case 51: // $bb51
        var $319=$buf+8; //@line 1873 "bufferedio.c"
        var $320=HEAP[$319]; //@line 1873 "bufferedio.c"
        $remaining=$320; //@line 1873 "bufferedio.c"
        $written=0; //@line 1874 "bufferedio.c"
        var $321=$buf+8; //@line 1877 "bufferedio.c"
        var $322=$buf; //@line 1877 "bufferedio.c"
        __label__ = 62; break; //@line 1874 "bufferedio.c"
      case 52: // $bb52
        var $323=HEAP[$321]; //@line 1877 "bufferedio.c"
        var $324=$written; //@line 1877 "bufferedio.c"
        var $325=($323) - ($324); //@line 1877 "bufferedio.c"
        var $326=HEAP[$322]; //@line 1877 "bufferedio.c"
        var $327=$written; //@line 1877 "bufferedio.c"
        var $328=$326+$327; //@line 1877 "bufferedio.c"
        var $329=$self_addr; //@line 1877 "bufferedio.c"
        var $330=__bufferedwriter_raw_write($329, $328, $325); //@line 1877 "bufferedio.c"
        $n=$330; //@line 1877 "bufferedio.c"
        var $331=$n; //@line 1878 "bufferedio.c"
        var $332=($331)==-1; //@line 1878 "bufferedio.c"
        if ($332) { __label__ = 53; break; } else { __label__ = 61; break; } //@line 1878 "bufferedio.c"
      case 53: // $bb53
        var $333=__buffered_check_blocking_error(); //@line 1879 "bufferedio.c"
        $w54=$333; //@line 1879 "bufferedio.c"
        var $334=$w54; //@line 1880 "bufferedio.c"
        var $335=($334)==0; //@line 1880 "bufferedio.c"
        if ($335) { __label__ = 73; break; } else { __label__ = 54; break; } //@line 1880 "bufferedio.c"
      case 54: // $bb55
        var $336=$w54; //@line 1882 "bufferedio.c"
        var $337=HEAP[$336]; //@line 1882 "bufferedio.c"
        var $338=$written; //@line 1882 "bufferedio.c"
        var $339=($338) + ($337); //@line 1882 "bufferedio.c"
        $written=$339; //@line 1882 "bufferedio.c"
        var $340=$w54; //@line 1883 "bufferedio.c"
        var $341=HEAP[$340]; //@line 1883 "bufferedio.c"
        var $342=$remaining; //@line 1883 "bufferedio.c"
        var $343=($342) - ($341); //@line 1883 "bufferedio.c"
        $remaining=$343; //@line 1883 "bufferedio.c"
        var $344=$self_addr; //@line 1884 "bufferedio.c"
        var $345=$344+84; //@line 1884 "bufferedio.c"
        var $346=HEAP[$345]; //@line 1884 "bufferedio.c"
        var $347=$remaining; //@line 1884 "bufferedio.c"
        var $348=($346) < ($347); //@line 1884 "bufferedio.c"
        if ($348) { __label__ = 55; break; } else { __label__ = 60; break; } //@line 1884 "bufferedio.c"
      case 55: // $bb56
        var $349=$self_addr; //@line 1886 "bufferedio.c"
        var $350=$349+84; //@line 1886 "bufferedio.c"
        var $351=HEAP[$350]; //@line 1886 "bufferedio.c"
        var $352=$buf; //@line 1886 "bufferedio.c"
        var $353=HEAP[$352]; //@line 1886 "bufferedio.c"
        var $354=$written; //@line 1886 "bufferedio.c"
        var $355=$353+$354; //@line 1886 "bufferedio.c"
        var $356=$self_addr; //@line 1886 "bufferedio.c"
        var $357=$356+40; //@line 1886 "bufferedio.c"
        var $358=HEAP[$357]; //@line 1886 "bufferedio.c"
        _llvm_memcpy_p0i8_p0i8_i32($358, $355, $351, 1, 0); //@line 1886 "bufferedio.c"
        var $359=$self_addr; //@line 1888 "bufferedio.c"
        var $360=$359+52; //@line 1888 "bufferedio.c"
        HEAP[$360]=0; //@line 1888 "bufferedio.c"
        var $361=$self_addr; //@line 1889 "bufferedio.c"
        var $362=$361+84; //@line 1889 "bufferedio.c"
        var $363=HEAP[$362]; //@line 1889 "bufferedio.c"
        var $364=($363); //@line 1889 "bufferedio.c"
        var $365=$self_addr; //@line 1889 "bufferedio.c"
        var $366=$365+44; //@line 1889 "bufferedio.c"
        HEAP[$366]=$364; //@line 1889 "bufferedio.c"
        var $367=$self_addr; //@line 1889 "bufferedio.c"
        var $368=$367+20; //@line 1889 "bufferedio.c"
        var $369=HEAP[$368]; //@line 1889 "bufferedio.c"
        var $370=($369)!=0; //@line 1889 "bufferedio.c"
        if ($370) { __label__ = 56; break; } else { __label__ = 59; break; } //@line 1889 "bufferedio.c"
      case 56: // $bb57
        var $371=$self_addr; //@line 1889 "bufferedio.c"
        var $372=$371+60; //@line 1889 "bufferedio.c"
        var $373=HEAP[$372]; //@line 1889 "bufferedio.c"
        var $374=($373)!=-1; //@line 1889 "bufferedio.c"
        if ($374) { __label__ = 57; break; } else { __label__ = 59; break; } //@line 1889 "bufferedio.c"
      case 57: // $bb58
        var $375=$self_addr; //@line 1889 "bufferedio.c"
        var $376=$375+60; //@line 1889 "bufferedio.c"
        var $377=HEAP[$376]; //@line 1889 "bufferedio.c"
        var $378=$self_addr; //@line 1889 "bufferedio.c"
        var $379=$378+44; //@line 1889 "bufferedio.c"
        var $380=HEAP[$379]; //@line 1889 "bufferedio.c"
        var $381=($377) < ($380); //@line 1889 "bufferedio.c"
        if ($381) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 1889 "bufferedio.c"
      case 58: // $bb59
        var $382=$self_addr; //@line 1889 "bufferedio.c"
        var $383=$382+44; //@line 1889 "bufferedio.c"
        var $384=HEAP[$383]; //@line 1889 "bufferedio.c"
        var $385=$self_addr; //@line 1889 "bufferedio.c"
        var $386=$385+60; //@line 1889 "bufferedio.c"
        HEAP[$386]=$384; //@line 1889 "bufferedio.c"
        __label__ = 59; break; //@line 1889 "bufferedio.c"
      case 59: // $bb60
        var $387=$self_addr; //@line 1890 "bufferedio.c"
        var $388=$387+84; //@line 1890 "bufferedio.c"
        var $389=HEAP[$388]; //@line 1890 "bufferedio.c"
        var $390=($389); //@line 1890 "bufferedio.c"
        var $391=$self_addr; //@line 1890 "bufferedio.c"
        var $392=$391+76; //@line 1890 "bufferedio.c"
        HEAP[$392]=$390; //@line 1890 "bufferedio.c"
        var $393=$self_addr; //@line 1891 "bufferedio.c"
        var $394=$393+84; //@line 1891 "bufferedio.c"
        var $395=HEAP[$394]; //@line 1891 "bufferedio.c"
        var $396=$written; //@line 1891 "bufferedio.c"
        var $397=($396) + ($395); //@line 1891 "bufferedio.c"
        var $398=$w54; //@line 1891 "bufferedio.c"
        HEAP[$398]=$397; //@line 1891 "bufferedio.c"
        __label__ = 73; break; //@line 1891 "bufferedio.c"
      case 60: // $bb61
        _PyErr_Clear(); //@line 1895 "bufferedio.c"
        __label__ = 63; break; //@line 1895 "bufferedio.c"
      case 61: // $bb62
        var $399=$written; //@line 1898 "bufferedio.c"
        var $400=$n; //@line 1898 "bufferedio.c"
        var $401=($400) + ($399); //@line 1898 "bufferedio.c"
        $written=$401; //@line 1898 "bufferedio.c"
        var $402=$remaining; //@line 1899 "bufferedio.c"
        var $403=$n; //@line 1899 "bufferedio.c"
        var $404=($402) - ($403); //@line 1899 "bufferedio.c"
        $remaining=$404; //@line 1899 "bufferedio.c"
        var $405=_PyErr_CheckSignals(); //@line 1903 "bufferedio.c"
        var $406=($405) < 0; //@line 1903 "bufferedio.c"
        if ($406) { __label__ = 73; break; } else { __label__ = 62; break; } //@line 1903 "bufferedio.c"
      case 62: // $bb63
        var $407=$self_addr; //@line 1875 "bufferedio.c"
        var $408=$407+84; //@line 1875 "bufferedio.c"
        var $409=HEAP[$408]; //@line 1875 "bufferedio.c"
        var $410=$remaining; //@line 1875 "bufferedio.c"
        var $411=($409) < ($410); //@line 1875 "bufferedio.c"
        if ($411) { __label__ = 52; break; } else { __label__ = 63; break; } //@line 1875 "bufferedio.c"
      case 63: // $bb64
        var $412=$self_addr; //@line 1906 "bufferedio.c"
        var $413=$412+20; //@line 1906 "bufferedio.c"
        var $414=HEAP[$413]; //@line 1906 "bufferedio.c"
        var $415=($414)!=0; //@line 1906 "bufferedio.c"
        if ($415) { __label__ = 64; break; } else { __label__ = 65; break; } //@line 1906 "bufferedio.c"
      case 64: // $bb65
        var $416=$self_addr; //@line 1907 "bufferedio.c"
        __bufferedreader_reset_buf($416); //@line 1907 "bufferedio.c"
        __label__ = 65; break; //@line 1907 "bufferedio.c"
      case 65: // $bb66
        var $417=$remaining; //@line 1908 "bufferedio.c"
        var $418=($417) > 0; //@line 1908 "bufferedio.c"
        if ($418) { __label__ = 66; break; } else { __label__ = 67; break; } //@line 1908 "bufferedio.c"
      case 66: // $bb67
        var $419=$remaining; //@line 1909 "bufferedio.c"
        var $420=$buf; //@line 1909 "bufferedio.c"
        var $421=HEAP[$420]; //@line 1909 "bufferedio.c"
        var $422=$written; //@line 1909 "bufferedio.c"
        var $423=$421+$422; //@line 1909 "bufferedio.c"
        var $424=$self_addr; //@line 1909 "bufferedio.c"
        var $425=$424+40; //@line 1909 "bufferedio.c"
        var $426=HEAP[$425]; //@line 1909 "bufferedio.c"
        _llvm_memcpy_p0i8_p0i8_i32($426, $423, $419, 1, 0); //@line 1909 "bufferedio.c"
        var $427=$written; //@line 1910 "bufferedio.c"
        var $428=$remaining; //@line 1910 "bufferedio.c"
        var $429=($428) + ($427); //@line 1910 "bufferedio.c"
        $written=$429; //@line 1910 "bufferedio.c"
        __label__ = 67; break; //@line 1910 "bufferedio.c"
      case 67: // $bb68
        var $430=$self_addr; //@line 1912 "bufferedio.c"
        var $431=$430+68; //@line 1912 "bufferedio.c"
        HEAP[$431]=0; //@line 1912 "bufferedio.c"
        var $432=$remaining; //@line 1914 "bufferedio.c"
        var $433=($432); //@line 1914 "bufferedio.c"
        var $434=$self_addr; //@line 1914 "bufferedio.c"
        var $435=$434+76; //@line 1914 "bufferedio.c"
        HEAP[$435]=$433; //@line 1914 "bufferedio.c"
        var $436=$remaining; //@line 1915 "bufferedio.c"
        var $437=($436); //@line 1915 "bufferedio.c"
        var $438=$self_addr; //@line 1915 "bufferedio.c"
        var $439=$438+44; //@line 1915 "bufferedio.c"
        HEAP[$439]=$437; //@line 1915 "bufferedio.c"
        var $440=$self_addr; //@line 1915 "bufferedio.c"
        var $441=$440+20; //@line 1915 "bufferedio.c"
        var $442=HEAP[$441]; //@line 1915 "bufferedio.c"
        var $443=($442)!=0; //@line 1915 "bufferedio.c"
        if ($443) { __label__ = 68; break; } else { __label__ = 71; break; } //@line 1915 "bufferedio.c"
      case 68: // $bb69
        var $444=$self_addr; //@line 1915 "bufferedio.c"
        var $445=$444+60; //@line 1915 "bufferedio.c"
        var $446=HEAP[$445]; //@line 1915 "bufferedio.c"
        var $447=($446)!=-1; //@line 1915 "bufferedio.c"
        if ($447) { __label__ = 69; break; } else { __label__ = 71; break; } //@line 1915 "bufferedio.c"
      case 69: // $bb70
        var $448=$self_addr; //@line 1915 "bufferedio.c"
        var $449=$448+60; //@line 1915 "bufferedio.c"
        var $450=HEAP[$449]; //@line 1915 "bufferedio.c"
        var $451=$self_addr; //@line 1915 "bufferedio.c"
        var $452=$451+44; //@line 1915 "bufferedio.c"
        var $453=HEAP[$452]; //@line 1915 "bufferedio.c"
        var $454=($450) < ($453); //@line 1915 "bufferedio.c"
        if ($454) { __label__ = 70; break; } else { __label__ = 71; break; } //@line 1915 "bufferedio.c"
      case 70: // $bb71
        var $455=$self_addr; //@line 1915 "bufferedio.c"
        var $456=$455+44; //@line 1915 "bufferedio.c"
        var $457=HEAP[$456]; //@line 1915 "bufferedio.c"
        var $458=$self_addr; //@line 1915 "bufferedio.c"
        var $459=$458+60; //@line 1915 "bufferedio.c"
        HEAP[$459]=$457; //@line 1915 "bufferedio.c"
        __label__ = 71; break; //@line 1915 "bufferedio.c"
      case 71: // $bb72
        var $460=$self_addr; //@line 1916 "bufferedio.c"
        var $461=$460+52; //@line 1916 "bufferedio.c"
        HEAP[$461]=0; //@line 1916 "bufferedio.c"
        __label__ = 72; break; //@line 1918 "bufferedio.c"
      case 72: // $end
        var $462=$written; //@line 1919 "bufferedio.c"
        var $463=_PyLong_FromSsize_t($462); //@line 1919 "bufferedio.c"
        $res=$463; //@line 1919 "bufferedio.c"
        __label__ = 73; break; //@line 1921 "bufferedio.c"
      case 73: // $error
        _PyBuffer_Release($buf); //@line 1923 "bufferedio.c"
        var $464=$res; //@line 1924 "bufferedio.c"
        $0=$464; //@line 1924 "bufferedio.c"
        __label__ = 74; break; //@line 1924 "bufferedio.c"
      case 74: // $bb73
        var $465=$0; //@line 1789 "bufferedio.c"
        $retval=$465; //@line 1789 "bufferedio.c"
        var $retval74=$retval; //@line 1789 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval74; //@line 1789 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferedrwpair_init($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 16; _memset(__stackBase__, 0, 16);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $kwds_addr;
        var $retval;
        var $0;
        var $reader=__stackBase__;
        var $writer=__stackBase__+4;
        var $buffer_size=__stackBase__+8;
        var $max_buffer_size=__stackBase__+12;
        var $_py_tmp;
        $self_addr=$self;
        $args_addr=$args;
        $kwds_addr=$kwds;
        HEAP[$buffer_size]=8192; //@line 2034 "bufferedio.c"
        HEAP[$max_buffer_size]=-234; //@line 2035 "bufferedio.c"
        var $1=$args_addr; //@line 2037 "bufferedio.c"
        var $2=__PyArg_ParseTuple_SizeT($1, __str62, allocate([$reader,0,0,0,$writer,0,0,0,$buffer_size,0,0,0,$max_buffer_size,0,0,0], ["%struct.PyObject**",0,0,0,"%struct.PyObject**",0,0,0,"i32*",0,0,0,"i32*",0,0,0], ALLOC_STACK)); //@line 2037 "bufferedio.c"
        var $3=($2)==0; //@line 2037 "bufferedio.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2037 "bufferedio.c"
      case 1: // $bb
        $0=-1; //@line 2039 "bufferedio.c"
        __label__ = 17; break; //@line 2039 "bufferedio.c"
      case 2: // $bb1
        var $4=HEAP[$max_buffer_size]; //@line 2042 "bufferedio.c"
        var $5=($4)!=-234; //@line 2042 "bufferedio.c"
        if ($5) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 2042 "bufferedio.c"
      case 3: // $bb2
        var $6=_complain_about_max_buffer_size(); //@line 2042 "bufferedio.c"
        var $7=($6)==0; //@line 2042 "bufferedio.c"
        if ($7) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 2042 "bufferedio.c"
      case 4: // $bb3
        $0=-1; //@line 2043 "bufferedio.c"
        __label__ = 17; break; //@line 2043 "bufferedio.c"
      case 5: // $bb4
        var $8=HEAP[$reader]; //@line 2045 "bufferedio.c"
        var $9=__PyIOBase_check_readable($8, __Py_TrueStruct); //@line 2045 "bufferedio.c"
        var $10=($9)==0; //@line 2045 "bufferedio.c"
        if ($10) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 2045 "bufferedio.c"
      case 6: // $bb5
        $0=-1; //@line 2046 "bufferedio.c"
        __label__ = 17; break; //@line 2046 "bufferedio.c"
      case 7: // $bb6
        var $11=HEAP[$writer]; //@line 2047 "bufferedio.c"
        var $12=__PyIOBase_check_writable($11, __Py_TrueStruct); //@line 2047 "bufferedio.c"
        var $13=($12)==0; //@line 2047 "bufferedio.c"
        if ($13) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 2047 "bufferedio.c"
      case 8: // $bb7
        $0=-1; //@line 2048 "bufferedio.c"
        __label__ = 17; break; //@line 2048 "bufferedio.c"
      case 9: // $bb8
        var $14=HEAP[$buffer_size]; //@line 2050 "bufferedio.c"
        var $15=HEAP[$reader]; //@line 2050 "bufferedio.c"
        var $16=__PyObject_CallFunction_SizeT(_PyBufferedReader_Type, __str63, allocate([$15,0,0,0,$14,0,0,0], ["%struct.PyObject*",0,0,0,"i32",0,0,0], ALLOC_STACK)); //@line 2050 "bufferedio.c"
        var $17=$16; //@line 2050 "bufferedio.c"
        var $18=$self_addr; //@line 2050 "bufferedio.c"
        var $19=$18+8; //@line 2050 "bufferedio.c"
        HEAP[$19]=$17; //@line 2050 "bufferedio.c"
        var $20=$self_addr; //@line 2052 "bufferedio.c"
        var $21=$20+8; //@line 2052 "bufferedio.c"
        var $22=HEAP[$21]; //@line 2052 "bufferedio.c"
        var $23=($22)==0; //@line 2052 "bufferedio.c"
        if ($23) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 2052 "bufferedio.c"
      case 10: // $bb9
        $0=-1; //@line 2053 "bufferedio.c"
        __label__ = 17; break; //@line 2053 "bufferedio.c"
      case 11: // $bb10
        var $24=HEAP[$buffer_size]; //@line 2055 "bufferedio.c"
        var $25=HEAP[$writer]; //@line 2055 "bufferedio.c"
        var $26=__PyObject_CallFunction_SizeT(_PyBufferedWriter_Type, __str63, allocate([$25,0,0,0,$24,0,0,0], ["%struct.PyObject*",0,0,0,"i32",0,0,0], ALLOC_STACK)); //@line 2055 "bufferedio.c"
        var $27=$26; //@line 2055 "bufferedio.c"
        var $28=$self_addr; //@line 2055 "bufferedio.c"
        var $29=$28+12; //@line 2055 "bufferedio.c"
        HEAP[$29]=$27; //@line 2055 "bufferedio.c"
        var $30=$self_addr; //@line 2057 "bufferedio.c"
        var $31=$30+12; //@line 2057 "bufferedio.c"
        var $32=HEAP[$31]; //@line 2057 "bufferedio.c"
        var $33=($32)==0; //@line 2057 "bufferedio.c"
        if ($33) { __label__ = 12; break; } else { __label__ = 16; break; } //@line 2057 "bufferedio.c"
      case 12: // $bb11
        var $34=$self_addr; //@line 2058 "bufferedio.c"
        var $35=$34+8; //@line 2058 "bufferedio.c"
        var $36=HEAP[$35]; //@line 2058 "bufferedio.c"
        var $37=($36)!=0; //@line 2058 "bufferedio.c"
        if ($37) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 2058 "bufferedio.c"
      case 13: // $bb12
        var $38=$self_addr; //@line 2058 "bufferedio.c"
        var $39=$38+8; //@line 2058 "bufferedio.c"
        var $40=HEAP[$39]; //@line 2058 "bufferedio.c"
        var $41=$40; //@line 2058 "bufferedio.c"
        $_py_tmp=$41; //@line 2058 "bufferedio.c"
        var $42=$self_addr; //@line 2058 "bufferedio.c"
        var $43=$42+8; //@line 2058 "bufferedio.c"
        HEAP[$43]=0; //@line 2058 "bufferedio.c"
        var $44=$_py_tmp; //@line 2058 "bufferedio.c"
        var $45=$44; //@line 2058 "bufferedio.c"
        var $46=HEAP[$45]; //@line 2058 "bufferedio.c"
        var $47=($46) - 1; //@line 2058 "bufferedio.c"
        var $48=$_py_tmp; //@line 2058 "bufferedio.c"
        var $49=$48; //@line 2058 "bufferedio.c"
        HEAP[$49]=$47; //@line 2058 "bufferedio.c"
        var $50=$_py_tmp; //@line 2058 "bufferedio.c"
        var $51=$50; //@line 2058 "bufferedio.c"
        var $52=HEAP[$51]; //@line 2058 "bufferedio.c"
        var $53=($52)==0; //@line 2058 "bufferedio.c"
        if ($53) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 2058 "bufferedio.c"
      case 14: // $bb13
        var $54=$_py_tmp; //@line 2058 "bufferedio.c"
        var $55=$54+4; //@line 2058 "bufferedio.c"
        var $56=HEAP[$55]; //@line 2058 "bufferedio.c"
        var $57=$56+24; //@line 2058 "bufferedio.c"
        var $58=HEAP[$57]; //@line 2058 "bufferedio.c"
        var $59=$_py_tmp; //@line 2058 "bufferedio.c"
        FUNCTION_TABLE[$58]($59); //@line 2058 "bufferedio.c"
        __label__ = 15; break; //@line 2058 "bufferedio.c"
      case 15: // $bb14
        $0=-1; //@line 2059 "bufferedio.c"
        __label__ = 17; break; //@line 2059 "bufferedio.c"
      case 16: // $bb15
        $0=0; //@line 2062 "bufferedio.c"
        __label__ = 17; break; //@line 2062 "bufferedio.c"
      case 17: // $bb16
        var $60=$0; //@line 2039 "bufferedio.c"
        $retval=$60; //@line 2039 "bufferedio.c"
        var $retval17=$retval; //@line 2039 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval17; //@line 2039 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferedrwpair_traverse($self, $visit, $arg) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $visit_addr;
        var $arg_addr;
        var $retval;
        var $0;
        var $vret;
        $self_addr=$self;
        $visit_addr=$visit;
        $arg_addr=$arg;
        var $1=$self_addr; //@line 2068 "bufferedio.c"
        var $2=$1+16; //@line 2068 "bufferedio.c"
        var $3=HEAP[$2]; //@line 2068 "bufferedio.c"
        var $4=($3)!=0; //@line 2068 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 2068 "bufferedio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 2068 "bufferedio.c"
        var $6=$5+16; //@line 2068 "bufferedio.c"
        var $7=HEAP[$6]; //@line 2068 "bufferedio.c"
        var $8=$visit_addr; //@line 2068 "bufferedio.c"
        var $9=$arg_addr; //@line 2068 "bufferedio.c"
        var $10=FUNCTION_TABLE[$8]($7, $9); //@line 2068 "bufferedio.c"
        $vret=$10; //@line 2068 "bufferedio.c"
        var $11=$vret; //@line 2068 "bufferedio.c"
        var $12=($11)!=0; //@line 2068 "bufferedio.c"
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2068 "bufferedio.c"
      case 2: // $bb1
        var $13=$vret; //@line 2068 "bufferedio.c"
        $0=$13; //@line 2068 "bufferedio.c"
        __label__ = 4; break; //@line 2068 "bufferedio.c"
      case 3: // $bb2
        $0=0; //@line 2069 "bufferedio.c"
        __label__ = 4; break; //@line 2069 "bufferedio.c"
      case 4: // $bb3
        var $14=$0; //@line 2068 "bufferedio.c"
        $retval=$14; //@line 2068 "bufferedio.c"
        var $retval4=$retval; //@line 2068 "bufferedio.c"
        ;
        return $retval4; //@line 2068 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferedrwpair_clear($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $_py_tmp;
        var $_py_tmp4;
        var $_py_tmp8;
        $self_addr=$self;
        var $1=$self_addr; //@line 2075 "bufferedio.c"
        var $2=$1+8; //@line 2075 "bufferedio.c"
        var $3=HEAP[$2]; //@line 2075 "bufferedio.c"
        var $4=($3)!=0; //@line 2075 "bufferedio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 2075 "bufferedio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 2075 "bufferedio.c"
        var $6=$5+8; //@line 2075 "bufferedio.c"
        var $7=HEAP[$6]; //@line 2075 "bufferedio.c"
        var $8=$7; //@line 2075 "bufferedio.c"
        $_py_tmp=$8; //@line 2075 "bufferedio.c"
        var $9=$self_addr; //@line 2075 "bufferedio.c"
        var $10=$9+8; //@line 2075 "bufferedio.c"
        HEAP[$10]=0; //@line 2075 "bufferedio.c"
        var $11=$_py_tmp; //@line 2075 "bufferedio.c"
        var $12=$11; //@line 2075 "bufferedio.c"
        var $13=HEAP[$12]; //@line 2075 "bufferedio.c"
        var $14=($13) - 1; //@line 2075 "bufferedio.c"
        var $15=$_py_tmp; //@line 2075 "bufferedio.c"
        var $16=$15; //@line 2075 "bufferedio.c"
        HEAP[$16]=$14; //@line 2075 "bufferedio.c"
        var $17=$_py_tmp; //@line 2075 "bufferedio.c"
        var $18=$17; //@line 2075 "bufferedio.c"
        var $19=HEAP[$18]; //@line 2075 "bufferedio.c"
        var $20=($19)==0; //@line 2075 "bufferedio.c"
        if ($20) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2075 "bufferedio.c"
      case 2: // $bb1
        var $21=$_py_tmp; //@line 2075 "bufferedio.c"
        var $22=$21+4; //@line 2075 "bufferedio.c"
        var $23=HEAP[$22]; //@line 2075 "bufferedio.c"
        var $24=$23+24; //@line 2075 "bufferedio.c"
        var $25=HEAP[$24]; //@line 2075 "bufferedio.c"
        var $26=$_py_tmp; //@line 2075 "bufferedio.c"
        FUNCTION_TABLE[$25]($26); //@line 2075 "bufferedio.c"
        __label__ = 3; break; //@line 2075 "bufferedio.c"
      case 3: // $bb2
        var $27=$self_addr; //@line 2076 "bufferedio.c"
        var $28=$27+12; //@line 2076 "bufferedio.c"
        var $29=HEAP[$28]; //@line 2076 "bufferedio.c"
        var $30=($29)!=0; //@line 2076 "bufferedio.c"
        if ($30) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 2076 "bufferedio.c"
      case 4: // $bb3
        var $31=$self_addr; //@line 2076 "bufferedio.c"
        var $32=$31+12; //@line 2076 "bufferedio.c"
        var $33=HEAP[$32]; //@line 2076 "bufferedio.c"
        var $34=$33; //@line 2076 "bufferedio.c"
        $_py_tmp4=$34; //@line 2076 "bufferedio.c"
        var $35=$self_addr; //@line 2076 "bufferedio.c"
        var $36=$35+12; //@line 2076 "bufferedio.c"
        HEAP[$36]=0; //@line 2076 "bufferedio.c"
        var $37=$_py_tmp4; //@line 2076 "bufferedio.c"
        var $38=$37; //@line 2076 "bufferedio.c"
        var $39=HEAP[$38]; //@line 2076 "bufferedio.c"
        var $40=($39) - 1; //@line 2076 "bufferedio.c"
        var $41=$_py_tmp4; //@line 2076 "bufferedio.c"
        var $42=$41; //@line 2076 "bufferedio.c"
        HEAP[$42]=$40; //@line 2076 "bufferedio.c"
        var $43=$_py_tmp4; //@line 2076 "bufferedio.c"
        var $44=$43; //@line 2076 "bufferedio.c"
        var $45=HEAP[$44]; //@line 2076 "bufferedio.c"
        var $46=($45)==0; //@line 2076 "bufferedio.c"
        if ($46) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 2076 "bufferedio.c"
      case 5: // $bb5
        var $47=$_py_tmp4; //@line 2076 "bufferedio.c"
        var $48=$47+4; //@line 2076 "bufferedio.c"
        var $49=HEAP[$48]; //@line 2076 "bufferedio.c"
        var $50=$49+24; //@line 2076 "bufferedio.c"
        var $51=HEAP[$50]; //@line 2076 "bufferedio.c"
        var $52=$_py_tmp4; //@line 2076 "bufferedio.c"
        FUNCTION_TABLE[$51]($52); //@line 2076 "bufferedio.c"
        __label__ = 6; break; //@line 2076 "bufferedio.c"
      case 6: // $bb6
        var $53=$self_addr; //@line 2077 "bufferedio.c"
        var $54=$53+16; //@line 2077 "bufferedio.c"
        var $55=HEAP[$54]; //@line 2077 "bufferedio.c"
        var $56=($55)!=0; //@line 2077 "bufferedio.c"
        if ($56) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 2077 "bufferedio.c"
      case 7: // $bb7
        var $57=$self_addr; //@line 2077 "bufferedio.c"
        var $58=$57+16; //@line 2077 "bufferedio.c"
        var $59=HEAP[$58]; //@line 2077 "bufferedio.c"
        $_py_tmp8=$59; //@line 2077 "bufferedio.c"
        var $60=$self_addr; //@line 2077 "bufferedio.c"
        var $61=$60+16; //@line 2077 "bufferedio.c"
        HEAP[$61]=0; //@line 2077 "bufferedio.c"
        var $62=$_py_tmp8; //@line 2077 "bufferedio.c"
        var $63=$62; //@line 2077 "bufferedio.c"
        var $64=HEAP[$63]; //@line 2077 "bufferedio.c"
        var $65=($64) - 1; //@line 2077 "bufferedio.c"
        var $66=$_py_tmp8; //@line 2077 "bufferedio.c"
        var $67=$66; //@line 2077 "bufferedio.c"
        HEAP[$67]=$65; //@line 2077 "bufferedio.c"
        var $68=$_py_tmp8; //@line 2077 "bufferedio.c"
        var $69=$68; //@line 2077 "bufferedio.c"
        var $70=HEAP[$69]; //@line 2077 "bufferedio.c"
        var $71=($70)==0; //@line 2077 "bufferedio.c"
        if ($71) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 2077 "bufferedio.c"
      case 8: // $bb9
        var $72=$_py_tmp8; //@line 2077 "bufferedio.c"
        var $73=$72+4; //@line 2077 "bufferedio.c"
        var $74=HEAP[$73]; //@line 2077 "bufferedio.c"
        var $75=$74+24; //@line 2077 "bufferedio.c"
        var $76=HEAP[$75]; //@line 2077 "bufferedio.c"
        var $77=$_py_tmp8; //@line 2077 "bufferedio.c"
        FUNCTION_TABLE[$76]($77); //@line 2077 "bufferedio.c"
        __label__ = 9; break; //@line 2077 "bufferedio.c"
      case 9: // $bb10
        $0=0; //@line 2078 "bufferedio.c"
        var $78=$0; //@line 2078 "bufferedio.c"
        $retval=$78; //@line 2078 "bufferedio.c"
        var $retval11=$retval; //@line 2078 "bufferedio.c"
        ;
        return $retval11; //@line 2078 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferedrwpair_dealloc($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $g;
        var $_py_tmp;
        var $_py_tmp6;
        var $_py_tmp10;
        $self_addr=$self;
        var $0=$self_addr; //@line 2084 "bufferedio.c"
        var $1=$0; //@line 2084 "bufferedio.c"
        var $2=$1+-12; //@line 2084 "bufferedio.c"
        $g=$2; //@line 2084 "bufferedio.c"
        var $3=$g; //@line 2084 "bufferedio.c"
        var $4=$3; //@line 2084 "bufferedio.c"
        var $5=$4+8; //@line 2084 "bufferedio.c"
        var $6=HEAP[$5]; //@line 2084 "bufferedio.c"
        var $7=($6)==-2; //@line 2084 "bufferedio.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2084 "bufferedio.c"
      case 1: // $bb
        ___assert_fail(__str9, __str10, 2084, ___PRETTY_FUNCTION___11129); //@line 2084 "bufferedio.c"
        throw "Reached an unreachable!" //@line 2084 "bufferedio.c"
      case 2: // $bb1
        var $8=$g; //@line 2084 "bufferedio.c"
        var $9=$8; //@line 2084 "bufferedio.c"
        var $10=$9+8; //@line 2084 "bufferedio.c"
        HEAP[$10]=-2; //@line 2084 "bufferedio.c"
        var $11=$g; //@line 2084 "bufferedio.c"
        var $12=$11; //@line 2084 "bufferedio.c"
        var $13=$12+4; //@line 2084 "bufferedio.c"
        var $14=HEAP[$13]; //@line 2084 "bufferedio.c"
        var $15=$g; //@line 2084 "bufferedio.c"
        var $16=$15; //@line 2084 "bufferedio.c"
        var $17=$16; //@line 2084 "bufferedio.c"
        var $18=HEAP[$17]; //@line 2084 "bufferedio.c"
        var $19=$14; //@line 2084 "bufferedio.c"
        var $20=$19; //@line 2084 "bufferedio.c"
        HEAP[$20]=$18; //@line 2084 "bufferedio.c"
        var $21=$g; //@line 2084 "bufferedio.c"
        var $22=$21; //@line 2084 "bufferedio.c"
        var $23=$22; //@line 2084 "bufferedio.c"
        var $24=HEAP[$23]; //@line 2084 "bufferedio.c"
        var $25=$g; //@line 2084 "bufferedio.c"
        var $26=$25; //@line 2084 "bufferedio.c"
        var $27=$26+4; //@line 2084 "bufferedio.c"
        var $28=HEAP[$27]; //@line 2084 "bufferedio.c"
        var $29=$24; //@line 2084 "bufferedio.c"
        var $30=$29+4; //@line 2084 "bufferedio.c"
        HEAP[$30]=$28; //@line 2084 "bufferedio.c"
        var $31=$g; //@line 2084 "bufferedio.c"
        var $32=$31; //@line 2084 "bufferedio.c"
        var $33=$32; //@line 2084 "bufferedio.c"
        HEAP[$33]=0; //@line 2084 "bufferedio.c"
        var $34=$self_addr; //@line 2085 "bufferedio.c"
        var $35=$34+8; //@line 2085 "bufferedio.c"
        var $36=HEAP[$35]; //@line 2085 "bufferedio.c"
        var $37=($36)!=0; //@line 2085 "bufferedio.c"
        if ($37) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 2085 "bufferedio.c"
      case 3: // $bb2
        var $38=$self_addr; //@line 2085 "bufferedio.c"
        var $39=$38+8; //@line 2085 "bufferedio.c"
        var $40=HEAP[$39]; //@line 2085 "bufferedio.c"
        var $41=$40; //@line 2085 "bufferedio.c"
        $_py_tmp=$41; //@line 2085 "bufferedio.c"
        var $42=$self_addr; //@line 2085 "bufferedio.c"
        var $43=$42+8; //@line 2085 "bufferedio.c"
        HEAP[$43]=0; //@line 2085 "bufferedio.c"
        var $44=$_py_tmp; //@line 2085 "bufferedio.c"
        var $45=$44; //@line 2085 "bufferedio.c"
        var $46=HEAP[$45]; //@line 2085 "bufferedio.c"
        var $47=($46) - 1; //@line 2085 "bufferedio.c"
        var $48=$_py_tmp; //@line 2085 "bufferedio.c"
        var $49=$48; //@line 2085 "bufferedio.c"
        HEAP[$49]=$47; //@line 2085 "bufferedio.c"
        var $50=$_py_tmp; //@line 2085 "bufferedio.c"
        var $51=$50; //@line 2085 "bufferedio.c"
        var $52=HEAP[$51]; //@line 2085 "bufferedio.c"
        var $53=($52)==0; //@line 2085 "bufferedio.c"
        if ($53) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 2085 "bufferedio.c"
      case 4: // $bb3
        var $54=$_py_tmp; //@line 2085 "bufferedio.c"
        var $55=$54+4; //@line 2085 "bufferedio.c"
        var $56=HEAP[$55]; //@line 2085 "bufferedio.c"
        var $57=$56+24; //@line 2085 "bufferedio.c"
        var $58=HEAP[$57]; //@line 2085 "bufferedio.c"
        var $59=$_py_tmp; //@line 2085 "bufferedio.c"
        FUNCTION_TABLE[$58]($59); //@line 2085 "bufferedio.c"
        __label__ = 5; break; //@line 2085 "bufferedio.c"
      case 5: // $bb4
        var $60=$self_addr; //@line 2086 "bufferedio.c"
        var $61=$60+12; //@line 2086 "bufferedio.c"
        var $62=HEAP[$61]; //@line 2086 "bufferedio.c"
        var $63=($62)!=0; //@line 2086 "bufferedio.c"
        if ($63) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 2086 "bufferedio.c"
      case 6: // $bb5
        var $64=$self_addr; //@line 2086 "bufferedio.c"
        var $65=$64+12; //@line 2086 "bufferedio.c"
        var $66=HEAP[$65]; //@line 2086 "bufferedio.c"
        var $67=$66; //@line 2086 "bufferedio.c"
        $_py_tmp6=$67; //@line 2086 "bufferedio.c"
        var $68=$self_addr; //@line 2086 "bufferedio.c"
        var $69=$68+12; //@line 2086 "bufferedio.c"
        HEAP[$69]=0; //@line 2086 "bufferedio.c"
        var $70=$_py_tmp6; //@line 2086 "bufferedio.c"
        var $71=$70; //@line 2086 "bufferedio.c"
        var $72=HEAP[$71]; //@line 2086 "bufferedio.c"
        var $73=($72) - 1; //@line 2086 "bufferedio.c"
        var $74=$_py_tmp6; //@line 2086 "bufferedio.c"
        var $75=$74; //@line 2086 "bufferedio.c"
        HEAP[$75]=$73; //@line 2086 "bufferedio.c"
        var $76=$_py_tmp6; //@line 2086 "bufferedio.c"
        var $77=$76; //@line 2086 "bufferedio.c"
        var $78=HEAP[$77]; //@line 2086 "bufferedio.c"
        var $79=($78)==0; //@line 2086 "bufferedio.c"
        if ($79) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 2086 "bufferedio.c"
      case 7: // $bb7
        var $80=$_py_tmp6; //@line 2086 "bufferedio.c"
        var $81=$80+4; //@line 2086 "bufferedio.c"
        var $82=HEAP[$81]; //@line 2086 "bufferedio.c"
        var $83=$82+24; //@line 2086 "bufferedio.c"
        var $84=HEAP[$83]; //@line 2086 "bufferedio.c"
        var $85=$_py_tmp6; //@line 2086 "bufferedio.c"
        FUNCTION_TABLE[$84]($85); //@line 2086 "bufferedio.c"
        __label__ = 8; break; //@line 2086 "bufferedio.c"
      case 8: // $bb8
        var $86=$self_addr; //@line 2087 "bufferedio.c"
        var $87=$86+16; //@line 2087 "bufferedio.c"
        var $88=HEAP[$87]; //@line 2087 "bufferedio.c"
        var $89=($88)!=0; //@line 2087 "bufferedio.c"
        if ($89) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 2087 "bufferedio.c"
      case 9: // $bb9
        var $90=$self_addr; //@line 2087 "bufferedio.c"
        var $91=$90+16; //@line 2087 "bufferedio.c"
        var $92=HEAP[$91]; //@line 2087 "bufferedio.c"
        $_py_tmp10=$92; //@line 2087 "bufferedio.c"
        var $93=$self_addr; //@line 2087 "bufferedio.c"
        var $94=$93+16; //@line 2087 "bufferedio.c"
        HEAP[$94]=0; //@line 2087 "bufferedio.c"
        var $95=$_py_tmp10; //@line 2087 "bufferedio.c"
        var $96=$95; //@line 2087 "bufferedio.c"
        var $97=HEAP[$96]; //@line 2087 "bufferedio.c"
        var $98=($97) - 1; //@line 2087 "bufferedio.c"
        var $99=$_py_tmp10; //@line 2087 "bufferedio.c"
        var $100=$99; //@line 2087 "bufferedio.c"
        HEAP[$100]=$98; //@line 2087 "bufferedio.c"
        var $101=$_py_tmp10; //@line 2087 "bufferedio.c"
        var $102=$101; //@line 2087 "bufferedio.c"
        var $103=HEAP[$102]; //@line 2087 "bufferedio.c"
        var $104=($103)==0; //@line 2087 "bufferedio.c"
        if ($104) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 2087 "bufferedio.c"
      case 10: // $bb11
        var $105=$_py_tmp10; //@line 2087 "bufferedio.c"
        var $106=$105+4; //@line 2087 "bufferedio.c"
        var $107=HEAP[$106]; //@line 2087 "bufferedio.c"
        var $108=$107+24; //@line 2087 "bufferedio.c"
        var $109=HEAP[$108]; //@line 2087 "bufferedio.c"
        var $110=$_py_tmp10; //@line 2087 "bufferedio.c"
        FUNCTION_TABLE[$109]($110); //@line 2087 "bufferedio.c"
        __label__ = 11; break; //@line 2087 "bufferedio.c"
      case 11: // $bb12
        var $111=$self_addr; //@line 2088 "bufferedio.c"
        var $112=$111; //@line 2088 "bufferedio.c"
        var $113=$112+4; //@line 2088 "bufferedio.c"
        var $114=HEAP[$113]; //@line 2088 "bufferedio.c"
        var $115=$114+160; //@line 2088 "bufferedio.c"
        var $116=HEAP[$115]; //@line 2088 "bufferedio.c"
        var $117=$self_addr; //@line 2088 "bufferedio.c"
        var $118=$117; //@line 2088 "bufferedio.c"
        FUNCTION_TABLE[$116]($118); //@line 2088 "bufferedio.c"
        ;
        return; //@line 2089 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __forward_call($self, $name, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $name_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $func;
        var $ret;
        $self_addr=$self;
        $name_addr=$name;
        $args_addr=$args;
        var $1=$self_addr; //@line 2094 "bufferedio.c"
        var $2=$1; //@line 2094 "bufferedio.c"
        var $3=$name_addr; //@line 2094 "bufferedio.c"
        var $4=_PyObject_GetAttrString($2, $3); //@line 2094 "bufferedio.c"
        $func=$4; //@line 2094 "bufferedio.c"
        var $5=$func; //@line 2097 "bufferedio.c"
        var $6=($5)==0; //@line 2097 "bufferedio.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2097 "bufferedio.c"
      case 1: // $bb
        var $7=HEAP[_PyExc_AttributeError]; //@line 2098 "bufferedio.c"
        var $8=$name_addr; //@line 2098 "bufferedio.c"
        _PyErr_SetString($7, $8); //@line 2098 "bufferedio.c"
        $0=0; //@line 2099 "bufferedio.c"
        __label__ = 5; break; //@line 2099 "bufferedio.c"
      case 2: // $bb1
        var $9=$func; //@line 2102 "bufferedio.c"
        var $10=$args_addr; //@line 2102 "bufferedio.c"
        var $11=_PyObject_CallObject($9, $10); //@line 2102 "bufferedio.c"
        $ret=$11; //@line 2102 "bufferedio.c"
        var $12=$func; //@line 2103 "bufferedio.c"
        var $13=$12; //@line 2103 "bufferedio.c"
        var $14=HEAP[$13]; //@line 2103 "bufferedio.c"
        var $15=($14) - 1; //@line 2103 "bufferedio.c"
        var $16=$func; //@line 2103 "bufferedio.c"
        var $17=$16; //@line 2103 "bufferedio.c"
        HEAP[$17]=$15; //@line 2103 "bufferedio.c"
        var $18=$func; //@line 2103 "bufferedio.c"
        var $19=$18; //@line 2103 "bufferedio.c"
        var $20=HEAP[$19]; //@line 2103 "bufferedio.c"
        var $21=($20)==0; //@line 2103 "bufferedio.c"
        if ($21) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 2103 "bufferedio.c"
      case 3: // $bb2
        var $22=$func; //@line 2103 "bufferedio.c"
        var $23=$22+4; //@line 2103 "bufferedio.c"
        var $24=HEAP[$23]; //@line 2103 "bufferedio.c"
        var $25=$24+24; //@line 2103 "bufferedio.c"
        var $26=HEAP[$25]; //@line 2103 "bufferedio.c"
        var $27=$func; //@line 2103 "bufferedio.c"
        FUNCTION_TABLE[$26]($27); //@line 2103 "bufferedio.c"
        __label__ = 4; break; //@line 2103 "bufferedio.c"
      case 4: // $bb3
        var $28=$ret; //@line 2104 "bufferedio.c"
        $0=$28; //@line 2104 "bufferedio.c"
        __label__ = 5; break; //@line 2104 "bufferedio.c"
      case 5: // $bb4
        var $29=$0; //@line 2099 "bufferedio.c"
        $retval=$29; //@line 2099 "bufferedio.c"
        var $retval5=$retval; //@line 2099 "bufferedio.c"
        ;
        return $retval5; //@line 2099 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferedrwpair_read($self, $args) {
    ;
    var __label__;
  
    var $self_addr;
    var $args_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $args_addr=$args;
    var $1=$self_addr; //@line 2110 "bufferedio.c"
    var $2=$1+8; //@line 2110 "bufferedio.c"
    var $3=HEAP[$2]; //@line 2110 "bufferedio.c"
    var $4=$args_addr; //@line 2110 "bufferedio.c"
    var $5=__forward_call($3, __str1, $4); //@line 2110 "bufferedio.c"
    $0=$5; //@line 2110 "bufferedio.c"
    var $6=$0; //@line 2110 "bufferedio.c"
    $retval=$6; //@line 2110 "bufferedio.c"
    var $retval1=$retval; //@line 2110 "bufferedio.c"
    ;
    return $retval1; //@line 2110 "bufferedio.c"
  }
  

  function _bufferedrwpair_peek($self, $args) {
    ;
    var __label__;
  
    var $self_addr;
    var $args_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $args_addr=$args;
    var $1=$self_addr; //@line 2116 "bufferedio.c"
    var $2=$1+8; //@line 2116 "bufferedio.c"
    var $3=HEAP[$2]; //@line 2116 "bufferedio.c"
    var $4=$args_addr; //@line 2116 "bufferedio.c"
    var $5=__forward_call($3, __str47, $4); //@line 2116 "bufferedio.c"
    $0=$5; //@line 2116 "bufferedio.c"
    var $6=$0; //@line 2116 "bufferedio.c"
    $retval=$6; //@line 2116 "bufferedio.c"
    var $retval1=$retval; //@line 2116 "bufferedio.c"
    ;
    return $retval1; //@line 2116 "bufferedio.c"
  }
  

  function _bufferedrwpair_read1($self, $args) {
    ;
    var __label__;
  
    var $self_addr;
    var $args_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $args_addr=$args;
    var $1=$self_addr; //@line 2122 "bufferedio.c"
    var $2=$1+8; //@line 2122 "bufferedio.c"
    var $3=HEAP[$2]; //@line 2122 "bufferedio.c"
    var $4=$args_addr; //@line 2122 "bufferedio.c"
    var $5=__forward_call($3, __str5, $4); //@line 2122 "bufferedio.c"
    $0=$5; //@line 2122 "bufferedio.c"
    var $6=$0; //@line 2122 "bufferedio.c"
    $retval=$6; //@line 2122 "bufferedio.c"
    var $retval1=$retval; //@line 2122 "bufferedio.c"
    ;
    return $retval1; //@line 2122 "bufferedio.c"
  }
  

  function _bufferedrwpair_readinto($self, $args) {
    ;
    var __label__;
  
    var $self_addr;
    var $args_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $args_addr=$args;
    var $1=$self_addr; //@line 2128 "bufferedio.c"
    var $2=$1+8; //@line 2128 "bufferedio.c"
    var $3=HEAP[$2]; //@line 2128 "bufferedio.c"
    var $4=$args_addr; //@line 2128 "bufferedio.c"
    var $5=__forward_call($3, __str7, $4); //@line 2128 "bufferedio.c"
    $0=$5; //@line 2128 "bufferedio.c"
    var $6=$0; //@line 2128 "bufferedio.c"
    $retval=$6; //@line 2128 "bufferedio.c"
    var $retval1=$retval; //@line 2128 "bufferedio.c"
    ;
    return $retval1; //@line 2128 "bufferedio.c"
  }
  

  function _bufferedrwpair_write($self, $args) {
    ;
    var __label__;
  
    var $self_addr;
    var $args_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $args_addr=$args;
    var $1=$self_addr; //@line 2134 "bufferedio.c"
    var $2=$1+12; //@line 2134 "bufferedio.c"
    var $3=HEAP[$2]; //@line 2134 "bufferedio.c"
    var $4=$args_addr; //@line 2134 "bufferedio.c"
    var $5=__forward_call($3, __str6, $4); //@line 2134 "bufferedio.c"
    $0=$5; //@line 2134 "bufferedio.c"
    var $6=$0; //@line 2134 "bufferedio.c"
    $retval=$6; //@line 2134 "bufferedio.c"
    var $retval1=$retval; //@line 2134 "bufferedio.c"
    ;
    return $retval1; //@line 2134 "bufferedio.c"
  }
  

  function _bufferedrwpair_flush($self, $args) {
    ;
    var __label__;
  
    var $self_addr;
    var $args_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $args_addr=$args;
    var $1=$self_addr; //@line 2140 "bufferedio.c"
    var $2=$1+12; //@line 2140 "bufferedio.c"
    var $3=HEAP[$2]; //@line 2140 "bufferedio.c"
    var $4=$args_addr; //@line 2140 "bufferedio.c"
    var $5=__forward_call($3, __str40, $4); //@line 2140 "bufferedio.c"
    $0=$5; //@line 2140 "bufferedio.c"
    var $6=$0; //@line 2140 "bufferedio.c"
    $retval=$6; //@line 2140 "bufferedio.c"
    var $retval1=$retval; //@line 2140 "bufferedio.c"
    ;
    return $retval1; //@line 2140 "bufferedio.c"
  }
  

  function _bufferedrwpair_readable($self, $args) {
    ;
    var __label__;
  
    var $self_addr;
    var $args_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $args_addr=$args;
    var $1=$self_addr; //@line 2146 "bufferedio.c"
    var $2=$1+8; //@line 2146 "bufferedio.c"
    var $3=HEAP[$2]; //@line 2146 "bufferedio.c"
    var $4=$args_addr; //@line 2146 "bufferedio.c"
    var $5=__forward_call($3, __str43, $4); //@line 2146 "bufferedio.c"
    $0=$5; //@line 2146 "bufferedio.c"
    var $6=$0; //@line 2146 "bufferedio.c"
    $retval=$6; //@line 2146 "bufferedio.c"
    var $retval1=$retval; //@line 2146 "bufferedio.c"
    ;
    return $retval1; //@line 2146 "bufferedio.c"
  }
  

  function _bufferedrwpair_writable($self, $args) {
    ;
    var __label__;
  
    var $self_addr;
    var $args_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $args_addr=$args;
    var $1=$self_addr; //@line 2152 "bufferedio.c"
    var $2=$1+12; //@line 2152 "bufferedio.c"
    var $3=HEAP[$2]; //@line 2152 "bufferedio.c"
    var $4=$args_addr; //@line 2152 "bufferedio.c"
    var $5=__forward_call($3, __str44, $4); //@line 2152 "bufferedio.c"
    $0=$5; //@line 2152 "bufferedio.c"
    var $6=$0; //@line 2152 "bufferedio.c"
    $retval=$6; //@line 2152 "bufferedio.c"
    var $retval1=$retval; //@line 2152 "bufferedio.c"
    ;
    return $retval1; //@line 2152 "bufferedio.c"
  }
  

  function _bufferedrwpair_close($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $ret;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 2158 "bufferedio.c"
        var $2=$1+12; //@line 2158 "bufferedio.c"
        var $3=HEAP[$2]; //@line 2158 "bufferedio.c"
        var $4=$args_addr; //@line 2158 "bufferedio.c"
        var $5=__forward_call($3, __str41, $4); //@line 2158 "bufferedio.c"
        $ret=$5; //@line 2158 "bufferedio.c"
        var $6=$ret; //@line 2159 "bufferedio.c"
        var $7=($6)==0; //@line 2159 "bufferedio.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2159 "bufferedio.c"
      case 1: // $bb
        $0=0; //@line 2160 "bufferedio.c"
        __label__ = 5; break; //@line 2160 "bufferedio.c"
      case 2: // $bb1
        var $8=$ret; //@line 2161 "bufferedio.c"
        var $9=$8; //@line 2161 "bufferedio.c"
        var $10=HEAP[$9]; //@line 2161 "bufferedio.c"
        var $11=($10) - 1; //@line 2161 "bufferedio.c"
        var $12=$ret; //@line 2161 "bufferedio.c"
        var $13=$12; //@line 2161 "bufferedio.c"
        HEAP[$13]=$11; //@line 2161 "bufferedio.c"
        var $14=$ret; //@line 2161 "bufferedio.c"
        var $15=$14; //@line 2161 "bufferedio.c"
        var $16=HEAP[$15]; //@line 2161 "bufferedio.c"
        var $17=($16)==0; //@line 2161 "bufferedio.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 2161 "bufferedio.c"
      case 3: // $bb2
        var $18=$ret; //@line 2161 "bufferedio.c"
        var $19=$18+4; //@line 2161 "bufferedio.c"
        var $20=HEAP[$19]; //@line 2161 "bufferedio.c"
        var $21=$20+24; //@line 2161 "bufferedio.c"
        var $22=HEAP[$21]; //@line 2161 "bufferedio.c"
        var $23=$ret; //@line 2161 "bufferedio.c"
        FUNCTION_TABLE[$22]($23); //@line 2161 "bufferedio.c"
        __label__ = 4; break; //@line 2161 "bufferedio.c"
      case 4: // $bb3
        var $24=$self_addr; //@line 2163 "bufferedio.c"
        var $25=$24+8; //@line 2163 "bufferedio.c"
        var $26=HEAP[$25]; //@line 2163 "bufferedio.c"
        var $27=$args_addr; //@line 2163 "bufferedio.c"
        var $28=__forward_call($26, __str41, $27); //@line 2163 "bufferedio.c"
        $0=$28; //@line 2163 "bufferedio.c"
        __label__ = 5; break; //@line 2163 "bufferedio.c"
      case 5: // $bb4
        var $29=$0; //@line 2160 "bufferedio.c"
        $retval=$29; //@line 2160 "bufferedio.c"
        var $retval5=$retval; //@line 2160 "bufferedio.c"
        ;
        return $retval5; //@line 2160 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferedrwpair_isatty($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $ret;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 2169 "bufferedio.c"
        var $2=$1+12; //@line 2169 "bufferedio.c"
        var $3=HEAP[$2]; //@line 2169 "bufferedio.c"
        var $4=$args_addr; //@line 2169 "bufferedio.c"
        var $5=__forward_call($3, __str46, $4); //@line 2169 "bufferedio.c"
        $ret=$5; //@line 2169 "bufferedio.c"
        var $6=$ret; //@line 2171 "bufferedio.c"
        var $7=($6)!=(__Py_ZeroStruct); //@line 2171 "bufferedio.c"
        var $8=$ret; //@line 2173 "bufferedio.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2171 "bufferedio.c"
      case 1: // $bb
        $0=$8; //@line 2173 "bufferedio.c"
        __label__ = 5; break; //@line 2173 "bufferedio.c"
      case 2: // $bb1
        var $9=$8; //@line 2175 "bufferedio.c"
        var $10=HEAP[$9]; //@line 2175 "bufferedio.c"
        var $11=($10) - 1; //@line 2175 "bufferedio.c"
        var $12=$ret; //@line 2175 "bufferedio.c"
        var $13=$12; //@line 2175 "bufferedio.c"
        HEAP[$13]=$11; //@line 2175 "bufferedio.c"
        var $14=$ret; //@line 2175 "bufferedio.c"
        var $15=$14; //@line 2175 "bufferedio.c"
        var $16=HEAP[$15]; //@line 2175 "bufferedio.c"
        var $17=($16)==0; //@line 2175 "bufferedio.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 2175 "bufferedio.c"
      case 3: // $bb2
        var $18=$ret; //@line 2175 "bufferedio.c"
        var $19=$18+4; //@line 2175 "bufferedio.c"
        var $20=HEAP[$19]; //@line 2175 "bufferedio.c"
        var $21=$20+24; //@line 2175 "bufferedio.c"
        var $22=HEAP[$21]; //@line 2175 "bufferedio.c"
        var $23=$ret; //@line 2175 "bufferedio.c"
        FUNCTION_TABLE[$22]($23); //@line 2175 "bufferedio.c"
        __label__ = 4; break; //@line 2175 "bufferedio.c"
      case 4: // $bb3
        var $24=$self_addr; //@line 2177 "bufferedio.c"
        var $25=$24+8; //@line 2177 "bufferedio.c"
        var $26=HEAP[$25]; //@line 2177 "bufferedio.c"
        var $27=$args_addr; //@line 2177 "bufferedio.c"
        var $28=__forward_call($26, __str46, $27); //@line 2177 "bufferedio.c"
        $0=$28; //@line 2177 "bufferedio.c"
        __label__ = 5; break; //@line 2177 "bufferedio.c"
      case 5: // $bb4
        var $29=$0; //@line 2173 "bufferedio.c"
        $retval=$29; //@line 2173 "bufferedio.c"
        var $retval5=$retval; //@line 2173 "bufferedio.c"
        ;
        return $retval5; //@line 2173 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bufferedrwpair_closed_get($self, $context) {
    ;
    var __label__;
  
    var $self_addr;
    var $context_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $context_addr=$context;
    var $1=HEAP[__PyIO_str_closed]; //@line 2183 "bufferedio.c"
    var $2=$self_addr; //@line 2183 "bufferedio.c"
    var $3=$2+12; //@line 2183 "bufferedio.c"
    var $4=HEAP[$3]; //@line 2183 "bufferedio.c"
    var $5=$4; //@line 2183 "bufferedio.c"
    var $6=_PyObject_GetAttr($5, $1); //@line 2183 "bufferedio.c"
    $0=$6; //@line 2183 "bufferedio.c"
    var $7=$0; //@line 2183 "bufferedio.c"
    $retval=$7; //@line 2183 "bufferedio.c"
    var $retval1=$retval; //@line 2183 "bufferedio.c"
    ;
    return $retval1; //@line 2183 "bufferedio.c"
  }
  

  function _bufferedrandom_init($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $kwds_addr;
        var $retval;
        var $iftmp_259;
        var $0;
        var $kwlist=__stackBase__;
        var $buffer_size=__stackBase__+16;
        var $max_buffer_size=__stackBase__+20;
        var $raw=__stackBase__+24;
        var $_py_tmp;
        $self_addr=$self;
        $args_addr=$args;
        $kwds_addr=$kwds;
        var $1=$kwlist; //@line 2268 "bufferedio.c"
        HEAP[$1]=__str35; //@line 2268 "bufferedio.c"
        var $2=$kwlist+4; //@line 2268 "bufferedio.c"
        HEAP[$2]=__str36; //@line 2268 "bufferedio.c"
        var $3=$kwlist+8; //@line 2268 "bufferedio.c"
        HEAP[$3]=__str55; //@line 2268 "bufferedio.c"
        var $4=$kwlist+12; //@line 2268 "bufferedio.c"
        HEAP[$4]=0; //@line 2268 "bufferedio.c"
        HEAP[$buffer_size]=8192; //@line 2269 "bufferedio.c"
        HEAP[$max_buffer_size]=-234; //@line 2270 "bufferedio.c"
        var $5=$self_addr; //@line 2273 "bufferedio.c"
        var $6=$5+12; //@line 2273 "bufferedio.c"
        HEAP[$6]=0; //@line 2273 "bufferedio.c"
        var $7=$self_addr; //@line 2274 "bufferedio.c"
        var $8=$7+16; //@line 2274 "bufferedio.c"
        HEAP[$8]=0; //@line 2274 "bufferedio.c"
        var $9=$args_addr; //@line 2276 "bufferedio.c"
        var $10=$kwds_addr; //@line 2276 "bufferedio.c"
        var $kwlist1=$kwlist; //@line 2276 "bufferedio.c"
        var $11=__PyArg_ParseTupleAndKeywords_SizeT($9, $10, __str56, $kwlist1, allocate([$raw,0,0,0,$buffer_size,0,0,0,$max_buffer_size,0,0,0], ["%struct.PyObject**",0,0,0,"i32*",0,0,0,"i32*",0,0,0], ALLOC_STACK)); //@line 2276 "bufferedio.c"
        var $12=($11)==0; //@line 2276 "bufferedio.c"
        if ($12) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 2276 "bufferedio.c"
      case 1: // $bb
        $0=-1; //@line 2278 "bufferedio.c"
        __label__ = 21; break; //@line 2278 "bufferedio.c"
      case 2: // $bb2
        var $13=HEAP[$max_buffer_size]; //@line 2281 "bufferedio.c"
        var $14=($13)!=-234; //@line 2281 "bufferedio.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 2281 "bufferedio.c"
      case 3: // $bb3
        var $15=_complain_about_max_buffer_size(); //@line 2281 "bufferedio.c"
        var $16=($15)==0; //@line 2281 "bufferedio.c"
        if ($16) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 2281 "bufferedio.c"
      case 4: // $bb4
        $0=-1; //@line 2282 "bufferedio.c"
        __label__ = 21; break; //@line 2282 "bufferedio.c"
      case 5: // $bb5
        var $17=HEAP[$raw]; //@line 2284 "bufferedio.c"
        var $18=__PyIOBase_check_seekable($17, __Py_TrueStruct); //@line 2284 "bufferedio.c"
        var $19=($18)==0; //@line 2284 "bufferedio.c"
        if ($19) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 2284 "bufferedio.c"
      case 6: // $bb6
        $0=-1; //@line 2285 "bufferedio.c"
        __label__ = 21; break; //@line 2285 "bufferedio.c"
      case 7: // $bb7
        var $20=HEAP[$raw]; //@line 2286 "bufferedio.c"
        var $21=__PyIOBase_check_readable($20, __Py_TrueStruct); //@line 2286 "bufferedio.c"
        var $22=($21)==0; //@line 2286 "bufferedio.c"
        if ($22) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 2286 "bufferedio.c"
      case 8: // $bb8
        $0=-1; //@line 2287 "bufferedio.c"
        __label__ = 21; break; //@line 2287 "bufferedio.c"
      case 9: // $bb9
        var $23=HEAP[$raw]; //@line 2288 "bufferedio.c"
        var $24=__PyIOBase_check_writable($23, __Py_TrueStruct); //@line 2288 "bufferedio.c"
        var $25=($24)==0; //@line 2288 "bufferedio.c"
        if ($25) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 2288 "bufferedio.c"
      case 10: // $bb10
        $0=-1; //@line 2289 "bufferedio.c"
        __label__ = 21; break; //@line 2289 "bufferedio.c"
      case 11: // $bb11
        var $26=$self_addr; //@line 2291 "bufferedio.c"
        var $27=$26+8; //@line 2291 "bufferedio.c"
        var $28=HEAP[$27]; //@line 2291 "bufferedio.c"
        var $29=($28)!=0; //@line 2291 "bufferedio.c"
        if ($29) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 2291 "bufferedio.c"
      case 12: // $bb12
        var $30=$self_addr; //@line 2291 "bufferedio.c"
        var $31=$30+8; //@line 2291 "bufferedio.c"
        var $32=HEAP[$31]; //@line 2291 "bufferedio.c"
        $_py_tmp=$32; //@line 2291 "bufferedio.c"
        var $33=$self_addr; //@line 2291 "bufferedio.c"
        var $34=$33+8; //@line 2291 "bufferedio.c"
        HEAP[$34]=0; //@line 2291 "bufferedio.c"
        var $35=$_py_tmp; //@line 2291 "bufferedio.c"
        var $36=$35; //@line 2291 "bufferedio.c"
        var $37=HEAP[$36]; //@line 2291 "bufferedio.c"
        var $38=($37) - 1; //@line 2291 "bufferedio.c"
        var $39=$_py_tmp; //@line 2291 "bufferedio.c"
        var $40=$39; //@line 2291 "bufferedio.c"
        HEAP[$40]=$38; //@line 2291 "bufferedio.c"
        var $41=$_py_tmp; //@line 2291 "bufferedio.c"
        var $42=$41; //@line 2291 "bufferedio.c"
        var $43=HEAP[$42]; //@line 2291 "bufferedio.c"
        var $44=($43)==0; //@line 2291 "bufferedio.c"
        if ($44) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 2291 "bufferedio.c"
      case 13: // $bb13
        var $45=$_py_tmp; //@line 2291 "bufferedio.c"
        var $46=$45+4; //@line 2291 "bufferedio.c"
        var $47=HEAP[$46]; //@line 2291 "bufferedio.c"
        var $48=$47+24; //@line 2291 "bufferedio.c"
        var $49=HEAP[$48]; //@line 2291 "bufferedio.c"
        var $50=$_py_tmp; //@line 2291 "bufferedio.c"
        FUNCTION_TABLE[$49]($50); //@line 2291 "bufferedio.c"
        __label__ = 14; break; //@line 2291 "bufferedio.c"
      case 14: // $bb14
        var $51=HEAP[$raw]; //@line 2292 "bufferedio.c"
        var $52=$51; //@line 2292 "bufferedio.c"
        var $53=HEAP[$52]; //@line 2292 "bufferedio.c"
        var $54=($53) + 1; //@line 2292 "bufferedio.c"
        var $55=$51; //@line 2292 "bufferedio.c"
        HEAP[$55]=$54; //@line 2292 "bufferedio.c"
        var $56=HEAP[$raw]; //@line 2293 "bufferedio.c"
        var $57=$self_addr; //@line 2293 "bufferedio.c"
        var $58=$57+8; //@line 2293 "bufferedio.c"
        HEAP[$58]=$56; //@line 2293 "bufferedio.c"
        var $59=HEAP[$buffer_size]; //@line 2294 "bufferedio.c"
        var $60=$self_addr; //@line 2294 "bufferedio.c"
        var $61=$60+84; //@line 2294 "bufferedio.c"
        HEAP[$61]=$59; //@line 2294 "bufferedio.c"
        var $62=$self_addr; //@line 2295 "bufferedio.c"
        var $63=$62+20; //@line 2295 "bufferedio.c"
        HEAP[$63]=1; //@line 2295 "bufferedio.c"
        var $64=$self_addr; //@line 2296 "bufferedio.c"
        var $65=$64+24; //@line 2296 "bufferedio.c"
        HEAP[$65]=1; //@line 2296 "bufferedio.c"
        var $66=$self_addr; //@line 2298 "bufferedio.c"
        var $67=__buffered_init($66); //@line 2298 "bufferedio.c"
        var $68=($67) < 0; //@line 2298 "bufferedio.c"
        if ($68) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 2298 "bufferedio.c"
      case 15: // $bb15
        $0=-1; //@line 2299 "bufferedio.c"
        __label__ = 21; break; //@line 2299 "bufferedio.c"
      case 16: // $bb16
        var $69=$self_addr; //@line 2300 "bufferedio.c"
        __bufferedreader_reset_buf($69); //@line 2300 "bufferedio.c"
        var $70=$self_addr; //@line 2301 "bufferedio.c"
        __bufferedwriter_reset_buf($70); //@line 2301 "bufferedio.c"
        var $71=$self_addr; //@line 2302 "bufferedio.c"
        var $72=$71+44; //@line 2302 "bufferedio.c"
        HEAP[$72]=0; //@line 2302 "bufferedio.c"
        var $73=$self_addr; //@line 2304 "bufferedio.c"
        var $74=$73; //@line 2304 "bufferedio.c"
        var $75=$74+4; //@line 2304 "bufferedio.c"
        var $76=HEAP[$75]; //@line 2304 "bufferedio.c"
        var $77=($76)!=(_PyBufferedRandom_Type); //@line 2304 "bufferedio.c"
        if ($77) { __label__ = 19; break; } else { __label__ = 17; break; } //@line 2304 "bufferedio.c"
      case 17: // $bb17
        var $78=HEAP[$raw]; //@line 2304 "bufferedio.c"
        var $79=$78+4; //@line 2304 "bufferedio.c"
        var $80=HEAP[$79]; //@line 2304 "bufferedio.c"
        var $81=($80)!=(_PyFileIO_Type); //@line 2304 "bufferedio.c"
        if ($81) { __label__ = 19; break; } else { __label__ = 18; break; } //@line 2304 "bufferedio.c"
      case 18: // $bb18
        $iftmp_259=1; //@line 2304 "bufferedio.c"
        __label__ = 20; break; //@line 2304 "bufferedio.c"
      case 19: // $bb19
        $iftmp_259=0; //@line 2304 "bufferedio.c"
        __label__ = 20; break; //@line 2304 "bufferedio.c"
      case 20: // $bb20
        var $82=$self_addr; //@line 2304 "bufferedio.c"
        var $83=$82+28; //@line 2304 "bufferedio.c"
        var $84=$iftmp_259; //@line 2304 "bufferedio.c"
        HEAP[$83]=$84; //@line 2304 "bufferedio.c"
        var $85=$self_addr; //@line 2307 "bufferedio.c"
        var $86=$85+12; //@line 2307 "bufferedio.c"
        HEAP[$86]=1; //@line 2307 "bufferedio.c"
        $0=0; //@line 2308 "bufferedio.c"
        __label__ = 21; break; //@line 2308 "bufferedio.c"
      case 21: // $bb21
        var $87=$0; //@line 2278 "bufferedio.c"
        $retval=$87; //@line 2278 "bufferedio.c"
        var $retval22=$retval; //@line 2278 "bufferedio.c"
        STACKTOP = __stackBase__;
        return $retval22; //@line 2278 "bufferedio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _get_line($self, $output) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $output_addr;
        var $retval;
        var $0;
        var $n;
        var $str_end;
        var $len;
        $self_addr=$self;
        $output_addr=$output;
        var $1=$self_addr; //@line 32 "bytesio.c"
        var $2=$1+8; //@line 32 "bytesio.c"
        var $3=HEAP[$2]; //@line 32 "bytesio.c"
        var $4=($3)==0; //@line 32 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 32 "bytesio.c"
      case 1: // $bb
        ___assert_fail(__str66, __str167, 32, ___PRETTY_FUNCTION___8438); //@line 32 "bytesio.c"
        throw "Reached an unreachable!" //@line 32 "bytesio.c"
      case 2: // $bb1
        var $5=$self_addr; //@line 35 "bytesio.c"
        var $6=$5+8; //@line 35 "bytesio.c"
        var $7=HEAP[$6]; //@line 35 "bytesio.c"
        var $8=$self_addr; //@line 35 "bytesio.c"
        var $9=$8+16; //@line 35 "bytesio.c"
        var $10=HEAP[$9]; //@line 35 "bytesio.c"
        var $11=$7+$10; //@line 35 "bytesio.c"
        $str_end=$11; //@line 35 "bytesio.c"
        var $12=$self_addr; //@line 36 "bytesio.c"
        var $13=$12+8; //@line 36 "bytesio.c"
        var $14=HEAP[$13]; //@line 36 "bytesio.c"
        var $15=$self_addr; //@line 36 "bytesio.c"
        var $16=$15+12; //@line 36 "bytesio.c"
        var $17=HEAP[$16]; //@line 36 "bytesio.c"
        var $18=$14+$17; //@line 36 "bytesio.c"
        $n=$18; //@line 36 "bytesio.c"
        __label__ = 4; break; //@line 36 "bytesio.c"
      case 3: // $bb2
        var $19=$n; //@line 38 "bytesio.c"
        var $20=$19+1; //@line 38 "bytesio.c"
        $n=$20; //@line 38 "bytesio.c"
        __label__ = 4; break; //@line 38 "bytesio.c"
      case 4: // $bb3
        var $21=$n; //@line 37 "bytesio.c"
        var $22=$str_end; //@line 37 "bytesio.c"
        var $23=($21) >= ($22); //@line 37 "bytesio.c"
        if ($23) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 37 "bytesio.c"
      case 5: // $bb4
        var $24=$n; //@line 37 "bytesio.c"
        var $25=HEAP[$24]; //@line 37 "bytesio.c"
        var $26=($25)!=10; //@line 37 "bytesio.c"
        if ($26) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 37 "bytesio.c"
      case 6: // $bb5
        var $27=$n; //@line 41 "bytesio.c"
        var $28=$str_end; //@line 41 "bytesio.c"
        var $29=($27) < ($28); //@line 41 "bytesio.c"
        if ($29) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 41 "bytesio.c"
      case 7: // $bb6
        var $30=$n; //@line 42 "bytesio.c"
        var $31=$30+1; //@line 42 "bytesio.c"
        $n=$31; //@line 42 "bytesio.c"
        __label__ = 8; break; //@line 42 "bytesio.c"
      case 8: // $bb7
        var $32=$n; //@line 45 "bytesio.c"
        var $33=($32); //@line 45 "bytesio.c"
        var $34=$self_addr; //@line 45 "bytesio.c"
        var $35=$34+8; //@line 45 "bytesio.c"
        var $36=HEAP[$35]; //@line 45 "bytesio.c"
        var $37=$self_addr; //@line 45 "bytesio.c"
        var $38=$37+12; //@line 45 "bytesio.c"
        var $39=HEAP[$38]; //@line 45 "bytesio.c"
        var $40=$36+$39; //@line 45 "bytesio.c"
        var $41=($40); //@line 45 "bytesio.c"
        var $42=($33) - ($41); //@line 45 "bytesio.c"
        $len=$42; //@line 45 "bytesio.c"
        var $43=$self_addr; //@line 46 "bytesio.c"
        var $44=$43+8; //@line 46 "bytesio.c"
        var $45=HEAP[$44]; //@line 46 "bytesio.c"
        var $46=$self_addr; //@line 46 "bytesio.c"
        var $47=$46+12; //@line 46 "bytesio.c"
        var $48=HEAP[$47]; //@line 46 "bytesio.c"
        var $49=$45+$48; //@line 46 "bytesio.c"
        var $50=$output_addr; //@line 46 "bytesio.c"
        HEAP[$50]=$49; //@line 46 "bytesio.c"
        var $51=$len; //@line 48 "bytesio.c"
        var $52=($51) < 0; //@line 48 "bytesio.c"
        if ($52) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 48 "bytesio.c"
      case 9: // $bb8
        ___assert_fail(__str268, __str167, 48, ___PRETTY_FUNCTION___8438); //@line 48 "bytesio.c"
        throw "Reached an unreachable!" //@line 48 "bytesio.c"
      case 10: // $bb9
        var $53=$self_addr; //@line 49 "bytesio.c"
        var $54=$53+12; //@line 49 "bytesio.c"
        var $55=HEAP[$54]; //@line 49 "bytesio.c"
        var $56=$len; //@line 49 "bytesio.c"
        var $57=2147483647 - ($56); //@line 49 "bytesio.c"
        var $58=($55) >= ($57); //@line 49 "bytesio.c"
        if ($58) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 49 "bytesio.c"
      case 11: // $bb10
        ___assert_fail(__str369, __str167, 49, ___PRETTY_FUNCTION___8438); //@line 49 "bytesio.c"
        throw "Reached an unreachable!" //@line 49 "bytesio.c"
      case 12: // $bb11
        var $59=$self_addr; //@line 50 "bytesio.c"
        var $60=$59+12; //@line 50 "bytesio.c"
        var $61=HEAP[$60]; //@line 50 "bytesio.c"
        var $62=$len; //@line 50 "bytesio.c"
        var $63=($62) + ($61); //@line 50 "bytesio.c"
        var $64=$self_addr; //@line 50 "bytesio.c"
        var $65=$64+12; //@line 50 "bytesio.c"
        HEAP[$65]=$63; //@line 50 "bytesio.c"
        var $66=$len; //@line 52 "bytesio.c"
        $0=$66; //@line 52 "bytesio.c"
        var $67=$0; //@line 52 "bytesio.c"
        $retval=$67; //@line 52 "bytesio.c"
        var $retval12=$retval; //@line 52 "bytesio.c"
        ;
        return $retval12; //@line 52 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _resize_buffer($self, $size) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $size_addr;
        var $retval;
        var $iftmp_2;
        var $0;
        var $alloc;
        var $new_buf;
        $self_addr=$self;
        $size_addr=$size;
        var $1=$self_addr; //@line 63 "bytesio.c"
        var $2=$1+20; //@line 63 "bytesio.c"
        var $3=HEAP[$2]; //@line 63 "bytesio.c"
        $alloc=$3; //@line 63 "bytesio.c"
        $new_buf=0; //@line 64 "bytesio.c"
        var $4=$self_addr; //@line 66 "bytesio.c"
        var $5=$4+8; //@line 66 "bytesio.c"
        var $6=HEAP[$5]; //@line 66 "bytesio.c"
        var $7=($6)==0; //@line 66 "bytesio.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 66 "bytesio.c"
      case 1: // $bb
        ___assert_fail(__str66, __str167, 66, ___PRETTY_FUNCTION___8477); //@line 66 "bytesio.c"
        throw "Reached an unreachable!" //@line 66 "bytesio.c"
      case 2: // $bb1
        var $8=$size_addr; //@line 70 "bytesio.c"
        var $9=($8) < 0; //@line 70 "bytesio.c"
        if ($9) { __label__ = 16; break; } else { __label__ = 3; break; } //@line 70 "bytesio.c"
      case 3: // $bb2
        var $10=$alloc; //@line 73 "bytesio.c"
        var $11=Math.floor(($10)/2); //@line 73 "bytesio.c"
        var $12=$size_addr; //@line 73 "bytesio.c"
        var $13=($11) > ($12); //@line 73 "bytesio.c"
        var $14=$size_addr; //@line 75 "bytesio.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 73 "bytesio.c"
      case 4: // $bb3
        var $15=($14) + 1; //@line 75 "bytesio.c"
        $alloc=$15; //@line 75 "bytesio.c"
        __label__ = 13; break; //@line 75 "bytesio.c"
      case 5: // $bb4
        var $16=$alloc; //@line 77 "bytesio.c"
        var $17=($14) < ($16); //@line 77 "bytesio.c"
        if ($17) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 77 "bytesio.c"
      case 6: // $bb5
        $0=0; //@line 79 "bytesio.c"
        __label__ = 17; break; //@line 79 "bytesio.c"
      case 7: // $bb6
        var $18=$size_addr; //@line 81 "bytesio.c"
        var $19=($18); //@line 81 "bytesio.c"
        var $20=$alloc; //@line 81 "bytesio.c"
        var $21=($20); //@line 81 "bytesio.c"
        var $22=($21) * 1.125; //@line 81 "bytesio.c"
        var $23=($19) <= ($22); //@line 81 "bytesio.c"
        var $24=$size_addr; //@line 83 "bytesio.c"
        if ($23) { __label__ = 8; break; } else { __label__ = 12; break; } //@line 81 "bytesio.c"
      case 8: // $bb7
        var $25=($24) >>> 3; //@line 83 "bytesio.c"
        var $26=$size_addr; //@line 83 "bytesio.c"
        var $27=$size_addr; //@line 83 "bytesio.c"
        var $28=($27) <= 8; //@line 83 "bytesio.c"
        if ($28) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 83 "bytesio.c"
      case 9: // $bb8
        $iftmp_2=3; //@line 83 "bytesio.c"
        __label__ = 11; break; //@line 83 "bytesio.c"
      case 10: // $bb9
        $iftmp_2=6; //@line 83 "bytesio.c"
        __label__ = 11; break; //@line 83 "bytesio.c"
      case 11: // $bb10
        var $29=$iftmp_2; //@line 83 "bytesio.c"
        var $30=($26) + ($25); //@line 83 "bytesio.c"
        var $31=($30) + ($29); //@line 83 "bytesio.c"
        $alloc=$31; //@line 83 "bytesio.c"
        __label__ = 13; break; //@line 83 "bytesio.c"
      case 12: // $bb11
        var $32=($24) + 1; //@line 87 "bytesio.c"
        $alloc=$32; //@line 87 "bytesio.c"
        __label__ = 13; break; //@line 87 "bytesio.c"
      case 13: // $bb12
        var $33=$self_addr; //@line 92 "bytesio.c"
        var $34=$33+8; //@line 92 "bytesio.c"
        var $35=HEAP[$34]; //@line 92 "bytesio.c"
        var $36=$alloc; //@line 92 "bytesio.c"
        var $37=_PyMem_Realloc($35, $36); //@line 92 "bytesio.c"
        $new_buf=$37; //@line 92 "bytesio.c"
        var $38=($37)==0; //@line 93 "bytesio.c"
        if ($38) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 93 "bytesio.c"
      case 14: // $bb13
        var $39=_PyErr_NoMemory(); //@line 94 "bytesio.c"
        $0=-1; //@line 95 "bytesio.c"
        __label__ = 17; break; //@line 95 "bytesio.c"
      case 15: // $bb14
        var $40=$self_addr; //@line 97 "bytesio.c"
        var $41=$40+20; //@line 97 "bytesio.c"
        var $42=$alloc; //@line 97 "bytesio.c"
        HEAP[$41]=$42; //@line 97 "bytesio.c"
        var $43=$self_addr; //@line 98 "bytesio.c"
        var $44=$43+8; //@line 98 "bytesio.c"
        var $45=$new_buf; //@line 98 "bytesio.c"
        HEAP[$44]=$45; //@line 98 "bytesio.c"
        $0=0; //@line 100 "bytesio.c"
        __label__ = 17; break; //@line 100 "bytesio.c"
      case 16: // $overflow
        var $46=HEAP[_PyExc_OverflowError]; //@line 103 "bytesio.c"
        _PyErr_SetString($46, __str470); //@line 103 "bytesio.c"
        $0=-1; //@line 105 "bytesio.c"
        __label__ = 17; break; //@line 105 "bytesio.c"
      case 17: // $bb15
        var $47=$0; //@line 79 "bytesio.c"
        $retval=$47; //@line 79 "bytesio.c"
        var $retval16=$retval; //@line 79 "bytesio.c"
        ;
        return $retval16; //@line 79 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _write_bytes($self, $bytes, $len) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $bytes_addr;
        var $len_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $bytes_addr=$bytes;
        $len_addr=$len;
        var $1=$self_addr; //@line 113 "bytesio.c"
        var $2=$1+8; //@line 113 "bytesio.c"
        var $3=HEAP[$2]; //@line 113 "bytesio.c"
        var $4=($3)==0; //@line 113 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 113 "bytesio.c"
      case 1: // $bb
        ___assert_fail(__str66, __str167, 113, ___PRETTY_FUNCTION___8514); //@line 113 "bytesio.c"
        throw "Reached an unreachable!" //@line 113 "bytesio.c"
      case 2: // $bb1
        var $5=$self_addr; //@line 114 "bytesio.c"
        var $6=$5+12; //@line 114 "bytesio.c"
        var $7=HEAP[$6]; //@line 114 "bytesio.c"
        var $8=($7) < 0; //@line 114 "bytesio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 114 "bytesio.c"
      case 3: // $bb2
        ___assert_fail(__str571, __str167, 114, ___PRETTY_FUNCTION___8514); //@line 114 "bytesio.c"
        throw "Reached an unreachable!" //@line 114 "bytesio.c"
      case 4: // $bb3
        var $9=$len_addr; //@line 115 "bytesio.c"
        var $10=($9) < 0; //@line 115 "bytesio.c"
        if ($10) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 115 "bytesio.c"
      case 5: // $bb4
        ___assert_fail(__str268, __str167, 115, ___PRETTY_FUNCTION___8514); //@line 115 "bytesio.c"
        throw "Reached an unreachable!" //@line 115 "bytesio.c"
      case 6: // $bb5
        var $11=$self_addr; //@line 117 "bytesio.c"
        var $12=$11+12; //@line 117 "bytesio.c"
        var $13=HEAP[$12]; //@line 117 "bytesio.c"
        var $14=$len_addr; //@line 117 "bytesio.c"
        var $15=($14) + ($13); //@line 117 "bytesio.c"
        var $16=$self_addr; //@line 117 "bytesio.c"
        var $17=$16+20; //@line 117 "bytesio.c"
        var $18=HEAP[$17]; //@line 117 "bytesio.c"
        var $19=($15) > ($18); //@line 117 "bytesio.c"
        if ($19) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 117 "bytesio.c"
      case 7: // $bb6
        var $20=$self_addr; //@line 118 "bytesio.c"
        var $21=$20+12; //@line 118 "bytesio.c"
        var $22=HEAP[$21]; //@line 118 "bytesio.c"
        var $23=$len_addr; //@line 118 "bytesio.c"
        var $24=($23) + ($22); //@line 118 "bytesio.c"
        var $25=$self_addr; //@line 118 "bytesio.c"
        var $26=_resize_buffer($25, $24); //@line 118 "bytesio.c"
        var $27=($26) < 0; //@line 118 "bytesio.c"
        if ($27) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 118 "bytesio.c"
      case 8: // $bb7
        $0=-1; //@line 119 "bytesio.c"
        __label__ = 14; break; //@line 119 "bytesio.c"
      case 9: // $bb8
        var $28=$self_addr; //@line 122 "bytesio.c"
        var $29=$28+12; //@line 122 "bytesio.c"
        var $30=HEAP[$29]; //@line 122 "bytesio.c"
        var $31=$self_addr; //@line 122 "bytesio.c"
        var $32=$31+16; //@line 122 "bytesio.c"
        var $33=HEAP[$32]; //@line 122 "bytesio.c"
        var $34=($30) > ($33); //@line 122 "bytesio.c"
        if ($34) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 122 "bytesio.c"
      case 10: // $bb9
        var $35=$self_addr; //@line 131 "bytesio.c"
        var $36=$35+12; //@line 131 "bytesio.c"
        var $37=HEAP[$36]; //@line 131 "bytesio.c"
        var $38=$self_addr; //@line 131 "bytesio.c"
        var $39=$38+16; //@line 131 "bytesio.c"
        var $40=HEAP[$39]; //@line 131 "bytesio.c"
        var $41=($37) - ($40); //@line 131 "bytesio.c"
        var $42=$self_addr; //@line 131 "bytesio.c"
        var $43=$42+8; //@line 131 "bytesio.c"
        var $44=HEAP[$43]; //@line 131 "bytesio.c"
        var $45=$self_addr; //@line 131 "bytesio.c"
        var $46=$45+16; //@line 131 "bytesio.c"
        var $47=HEAP[$46]; //@line 131 "bytesio.c"
        var $48=$44+$47; //@line 131 "bytesio.c"
        _llvm_memset_p0i8_i32($48, 0, $41, 1, 0); //@line 131 "bytesio.c"
        __label__ = 11; break; //@line 131 "bytesio.c"
      case 11: // $bb10
        var $49=$len_addr; //@line 137 "bytesio.c"
        var $50=$self_addr; //@line 137 "bytesio.c"
        var $51=$50+8; //@line 137 "bytesio.c"
        var $52=HEAP[$51]; //@line 137 "bytesio.c"
        var $53=$self_addr; //@line 137 "bytesio.c"
        var $54=$53+12; //@line 137 "bytesio.c"
        var $55=HEAP[$54]; //@line 137 "bytesio.c"
        var $56=$52+$55; //@line 137 "bytesio.c"
        var $57=$bytes_addr; //@line 137 "bytesio.c"
        _llvm_memcpy_p0i8_p0i8_i32($56, $57, $49, 1, 0); //@line 137 "bytesio.c"
        var $58=$self_addr; //@line 138 "bytesio.c"
        var $59=$58+12; //@line 138 "bytesio.c"
        var $60=HEAP[$59]; //@line 138 "bytesio.c"
        var $61=$len_addr; //@line 138 "bytesio.c"
        var $62=($61) + ($60); //@line 138 "bytesio.c"
        var $63=$self_addr; //@line 138 "bytesio.c"
        var $64=$63+12; //@line 138 "bytesio.c"
        HEAP[$64]=$62; //@line 138 "bytesio.c"
        var $65=$self_addr; //@line 141 "bytesio.c"
        var $66=$65+16; //@line 141 "bytesio.c"
        var $67=HEAP[$66]; //@line 141 "bytesio.c"
        var $68=$self_addr; //@line 141 "bytesio.c"
        var $69=$68+12; //@line 141 "bytesio.c"
        var $70=HEAP[$69]; //@line 141 "bytesio.c"
        var $71=($67) < ($70); //@line 141 "bytesio.c"
        if ($71) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 141 "bytesio.c"
      case 12: // $bb11
        var $72=$self_addr; //@line 142 "bytesio.c"
        var $73=$72+12; //@line 142 "bytesio.c"
        var $74=HEAP[$73]; //@line 142 "bytesio.c"
        var $75=$self_addr; //@line 142 "bytesio.c"
        var $76=$75+16; //@line 142 "bytesio.c"
        HEAP[$76]=$74; //@line 142 "bytesio.c"
        __label__ = 13; break; //@line 142 "bytesio.c"
      case 13: // $bb12
        var $77=$len_addr; //@line 145 "bytesio.c"
        $0=$77; //@line 145 "bytesio.c"
        __label__ = 14; break; //@line 145 "bytesio.c"
      case 14: // $bb13
        var $78=$0; //@line 119 "bytesio.c"
        $retval=$78; //@line 119 "bytesio.c"
        var $retval14=$retval; //@line 119 "bytesio.c"
        ;
        return $retval14; //@line 119 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_get_closed($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        var $1=$self_addr; //@line 151 "bytesio.c"
        var $2=$1+8; //@line 151 "bytesio.c"
        var $3=HEAP[$2]; //@line 151 "bytesio.c"
        var $4=($3)==0; //@line 151 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 151 "bytesio.c"
      case 1: // $bb
        var $5=HEAP[__Py_TrueStruct]; //@line 152 "bytesio.c"
        var $6=($5) + 1; //@line 152 "bytesio.c"
        HEAP[__Py_TrueStruct]=$6; //@line 152 "bytesio.c"
        $0=__Py_TrueStruct; //@line 152 "bytesio.c"
        __label__ = 3; break; //@line 152 "bytesio.c"
      case 2: // $bb1
        var $7=HEAP[__Py_ZeroStruct]; //@line 155 "bytesio.c"
        var $8=($7) + 1; //@line 155 "bytesio.c"
        HEAP[__Py_ZeroStruct]=$8; //@line 155 "bytesio.c"
        $0=__Py_ZeroStruct; //@line 155 "bytesio.c"
        __label__ = 3; break; //@line 155 "bytesio.c"
      case 3: // $bb2
        var $9=$0; //@line 152 "bytesio.c"
        $retval=$9; //@line 152 "bytesio.c"
        var $retval3=$retval; //@line 152 "bytesio.c"
        ;
        return $retval3; //@line 152 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _return_true($self) {
    ;
    var __label__;
  
    var $retval;
    var $0;
    var $1=HEAP[__Py_TrueStruct]; //@line 163 "bytesio.c"
    var $2=($1) + 1; //@line 163 "bytesio.c"
    HEAP[__Py_TrueStruct]=$2; //@line 163 "bytesio.c"
    $0=__Py_TrueStruct; //@line 163 "bytesio.c"
    var $3=$0; //@line 163 "bytesio.c"
    $retval=$3; //@line 163 "bytesio.c"
    var $retval1=$retval; //@line 163 "bytesio.c"
    ;
    return $retval1; //@line 163 "bytesio.c"
  }
  

  function _bytesio_flush($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        var $1=$self_addr; //@line 172 "bytesio.c"
        var $2=$1+8; //@line 172 "bytesio.c"
        var $3=HEAP[$2]; //@line 172 "bytesio.c"
        var $4=($3)==0; //@line 172 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 172 "bytesio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 172 "bytesio.c"
        _PyErr_SetString($5, __str672); //@line 172 "bytesio.c"
        $0=0; //@line 172 "bytesio.c"
        __label__ = 3; break; //@line 172 "bytesio.c"
      case 2: // $bb1
        var $6=HEAP[__Py_NoneStruct]; //@line 173 "bytesio.c"
        var $7=($6) + 1; //@line 173 "bytesio.c"
        HEAP[__Py_NoneStruct]=$7; //@line 173 "bytesio.c"
        $0=__Py_NoneStruct; //@line 173 "bytesio.c"
        __label__ = 3; break; //@line 173 "bytesio.c"
      case 3: // $bb2
        var $8=$0; //@line 172 "bytesio.c"
        $retval=$8; //@line 172 "bytesio.c"
        var $retval3=$retval; //@line 172 "bytesio.c"
        ;
        return $retval3; //@line 172 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_getvalue($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        var $1=$self_addr; //@line 184 "bytesio.c"
        var $2=$1+8; //@line 184 "bytesio.c"
        var $3=HEAP[$2]; //@line 184 "bytesio.c"
        var $4=($3)==0; //@line 184 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 184 "bytesio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 184 "bytesio.c"
        _PyErr_SetString($5, __str672); //@line 184 "bytesio.c"
        $0=0; //@line 184 "bytesio.c"
        __label__ = 3; break; //@line 184 "bytesio.c"
      case 2: // $bb1
        var $6=$self_addr; //@line 185 "bytesio.c"
        var $7=$6+16; //@line 185 "bytesio.c"
        var $8=HEAP[$7]; //@line 185 "bytesio.c"
        var $9=$self_addr; //@line 185 "bytesio.c"
        var $10=$9+8; //@line 185 "bytesio.c"
        var $11=HEAP[$10]; //@line 185 "bytesio.c"
        var $12=_PyString_FromStringAndSize($11, $8); //@line 185 "bytesio.c"
        $0=$12; //@line 185 "bytesio.c"
        __label__ = 3; break; //@line 185 "bytesio.c"
      case 3: // $bb2
        var $13=$0; //@line 184 "bytesio.c"
        $retval=$13; //@line 184 "bytesio.c"
        var $retval3=$retval; //@line 184 "bytesio.c"
        ;
        return $retval3; //@line 184 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_isatty($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        var $1=$self_addr; //@line 197 "bytesio.c"
        var $2=$1+8; //@line 197 "bytesio.c"
        var $3=HEAP[$2]; //@line 197 "bytesio.c"
        var $4=($3)==0; //@line 197 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 197 "bytesio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 197 "bytesio.c"
        _PyErr_SetString($5, __str672); //@line 197 "bytesio.c"
        $0=0; //@line 197 "bytesio.c"
        __label__ = 3; break; //@line 197 "bytesio.c"
      case 2: // $bb1
        var $6=HEAP[__Py_ZeroStruct]; //@line 198 "bytesio.c"
        var $7=($6) + 1; //@line 198 "bytesio.c"
        HEAP[__Py_ZeroStruct]=$7; //@line 198 "bytesio.c"
        $0=__Py_ZeroStruct; //@line 198 "bytesio.c"
        __label__ = 3; break; //@line 198 "bytesio.c"
      case 3: // $bb2
        var $8=$0; //@line 197 "bytesio.c"
        $retval=$8; //@line 197 "bytesio.c"
        var $retval3=$retval; //@line 197 "bytesio.c"
        ;
        return $retval3; //@line 197 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_tell($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        var $1=$self_addr; //@line 207 "bytesio.c"
        var $2=$1+8; //@line 207 "bytesio.c"
        var $3=HEAP[$2]; //@line 207 "bytesio.c"
        var $4=($3)==0; //@line 207 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 207 "bytesio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 207 "bytesio.c"
        _PyErr_SetString($5, __str672); //@line 207 "bytesio.c"
        $0=0; //@line 207 "bytesio.c"
        __label__ = 3; break; //@line 207 "bytesio.c"
      case 2: // $bb1
        var $6=$self_addr; //@line 208 "bytesio.c"
        var $7=$6+12; //@line 208 "bytesio.c"
        var $8=HEAP[$7]; //@line 208 "bytesio.c"
        var $9=_PyLong_FromSsize_t($8); //@line 208 "bytesio.c"
        $0=$9; //@line 208 "bytesio.c"
        __label__ = 3; break; //@line 208 "bytesio.c"
      case 3: // $bb2
        var $10=$0; //@line 207 "bytesio.c"
        $retval=$10; //@line 207 "bytesio.c"
        var $retval3=$retval; //@line 207 "bytesio.c"
        ;
        return $retval3; //@line 207 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_read($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $size;
        var $n;
        var $output;
        var $arg=__stackBase__;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$arg]=__Py_NoneStruct; //@line 222 "bytesio.c"
        var $1=$self_addr; //@line 224 "bytesio.c"
        var $2=$1+8; //@line 224 "bytesio.c"
        var $3=HEAP[$2]; //@line 224 "bytesio.c"
        var $4=($3)==0; //@line 224 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 224 "bytesio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 224 "bytesio.c"
        _PyErr_SetString($5, __str672); //@line 224 "bytesio.c"
        $0=0; //@line 224 "bytesio.c"
        __label__ = 18; break; //@line 224 "bytesio.c"
      case 2: // $bb1
        var $6=$args_addr; //@line 226 "bytesio.c"
        var $7=_PyArg_ParseTuple($6, __str773, allocate([$arg,0,0,0], ["%struct.PyObject**",0,0,0], ALLOC_STACK)); //@line 226 "bytesio.c"
        var $8=($7)==0; //@line 226 "bytesio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 226 "bytesio.c"
      case 3: // $bb2
        $0=0; //@line 227 "bytesio.c"
        __label__ = 18; break; //@line 227 "bytesio.c"
      case 4: // $bb3
        var $9=HEAP[$arg]; //@line 229 "bytesio.c"
        var $10=_PyNumber_Check($9); //@line 229 "bytesio.c"
        var $11=($10)!=0; //@line 229 "bytesio.c"
        if ($11) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 229 "bytesio.c"
      case 5: // $bb4
        var $12=HEAP[_PyExc_OverflowError]; //@line 230 "bytesio.c"
        var $13=HEAP[$arg]; //@line 230 "bytesio.c"
        var $14=_PyNumber_AsSsize_t($13, $12); //@line 230 "bytesio.c"
        $size=$14; //@line 230 "bytesio.c"
        var $15=$size; //@line 231 "bytesio.c"
        var $16=($15)==-1; //@line 231 "bytesio.c"
        if ($16) { __label__ = 6; break; } else { __label__ = 11; break; } //@line 231 "bytesio.c"
      case 6: // $bb5
        var $17=_PyErr_Occurred(); //@line 231 "bytesio.c"
        var $18=($17)!=0; //@line 231 "bytesio.c"
        if ($18) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 231 "bytesio.c"
      case 7: // $bb6
        $0=0; //@line 232 "bytesio.c"
        __label__ = 18; break; //@line 232 "bytesio.c"
      case 8: // $bb8
        var $19=HEAP[$arg]; //@line 234 "bytesio.c"
        var $20=($19)==(__Py_NoneStruct); //@line 234 "bytesio.c"
        if ($20) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 234 "bytesio.c"
      case 9: // $bb9
        $size=-1; //@line 236 "bytesio.c"
        __label__ = 11; break; //@line 236 "bytesio.c"
      case 10: // $bb10
        var $21=HEAP[$arg]; //@line 239 "bytesio.c"
        var $22=$21+4; //@line 239 "bytesio.c"
        var $23=HEAP[$22]; //@line 239 "bytesio.c"
        var $24=$23+12; //@line 239 "bytesio.c"
        var $25=HEAP[$24]; //@line 239 "bytesio.c"
        var $26=HEAP[_PyExc_TypeError]; //@line 239 "bytesio.c"
        var $27=_PyErr_Format($26, __str874, allocate([$25,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 239 "bytesio.c"
        $0=0; //@line 241 "bytesio.c"
        __label__ = 18; break; //@line 241 "bytesio.c"
      case 11: // $bb11
        var $28=$self_addr; //@line 245 "bytesio.c"
        var $29=$28+16; //@line 245 "bytesio.c"
        var $30=HEAP[$29]; //@line 245 "bytesio.c"
        var $31=$self_addr; //@line 245 "bytesio.c"
        var $32=$31+12; //@line 245 "bytesio.c"
        var $33=HEAP[$32]; //@line 245 "bytesio.c"
        var $34=($30) - ($33); //@line 245 "bytesio.c"
        $n=$34; //@line 245 "bytesio.c"
        var $35=$size; //@line 246 "bytesio.c"
        var $36=($35) < 0; //@line 246 "bytesio.c"
        if ($36) { __lastLabel__ = 11; __label__ = 13; break; } else { __lastLabel__ = 11; __label__ = 12; break; } //@line 246 "bytesio.c"
      case 12: // $bb12
        var $37=$size; //@line 246 "bytesio.c"
        var $38=$n; //@line 246 "bytesio.c"
        var $39=($37) > ($38); //@line 246 "bytesio.c"
        if ($39) { __lastLabel__ = 12; __label__ = 13; break; } else { __lastLabel__ = 12; __label__ = 15; break; } //@line 246 "bytesio.c"
      case 13: // $bb13
        var $40=__lastLabel__ == 12 ? $38 : ($34);
        $size=$40; //@line 247 "bytesio.c"
        var $41=($40) < 0; //@line 248 "bytesio.c"
        if ($41) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 248 "bytesio.c"
      case 14: // $bb14
        $size=0; //@line 249 "bytesio.c"
        __label__ = 15; break; //@line 249 "bytesio.c"
      case 15: // $bb15
        var $42=$self_addr; //@line 252 "bytesio.c"
        var $43=$42+8; //@line 252 "bytesio.c"
        var $44=HEAP[$43]; //@line 252 "bytesio.c"
        var $45=($44)==0; //@line 252 "bytesio.c"
        if ($45) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 252 "bytesio.c"
      case 16: // $bb16
        ___assert_fail(__str66, __str167, 252, ___PRETTY_FUNCTION___8642); //@line 252 "bytesio.c"
        throw "Reached an unreachable!" //@line 252 "bytesio.c"
      case 17: // $bb17
        var $46=$self_addr; //@line 253 "bytesio.c"
        var $47=$46+8; //@line 253 "bytesio.c"
        var $48=HEAP[$47]; //@line 253 "bytesio.c"
        var $49=$self_addr; //@line 253 "bytesio.c"
        var $50=$49+12; //@line 253 "bytesio.c"
        var $51=HEAP[$50]; //@line 253 "bytesio.c"
        var $52=$48+$51; //@line 253 "bytesio.c"
        $output=$52; //@line 253 "bytesio.c"
        var $53=$self_addr; //@line 254 "bytesio.c"
        var $54=$53+12; //@line 254 "bytesio.c"
        var $55=HEAP[$54]; //@line 254 "bytesio.c"
        var $56=$size; //@line 254 "bytesio.c"
        var $57=($56) + ($55); //@line 254 "bytesio.c"
        var $58=$self_addr; //@line 254 "bytesio.c"
        var $59=$58+12; //@line 254 "bytesio.c"
        HEAP[$59]=$57; //@line 254 "bytesio.c"
        var $60=$output; //@line 256 "bytesio.c"
        var $61=$size; //@line 256 "bytesio.c"
        var $62=_PyString_FromStringAndSize($60, $61); //@line 256 "bytesio.c"
        $0=$62; //@line 256 "bytesio.c"
        __label__ = 18; break; //@line 256 "bytesio.c"
      case 18: // $bb18
        var $63=$0; //@line 224 "bytesio.c"
        $retval=$63; //@line 224 "bytesio.c"
        var $retval19=$retval; //@line 224 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval19; //@line 224 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_read1($self, $n) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $n_addr;
        var $retval;
        var $0;
        var $arg;
        var $res;
        $self_addr=$self;
        $n_addr=$n;
        var $1=$n_addr; //@line 271 "bytesio.c"
        var $2=_PyTuple_Pack(1, allocate([$1,0,0,0], ["%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 271 "bytesio.c"
        $arg=$2; //@line 271 "bytesio.c"
        var $3=$arg; //@line 272 "bytesio.c"
        var $4=($3)==0; //@line 272 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 272 "bytesio.c"
      case 1: // $bb
        $0=0; //@line 273 "bytesio.c"
        __label__ = 5; break; //@line 273 "bytesio.c"
      case 2: // $bb1
        var $5=$self_addr; //@line 274 "bytesio.c"
        var $6=$arg; //@line 274 "bytesio.c"
        var $7=_bytesio_read($5, $6); //@line 274 "bytesio.c"
        $res=$7; //@line 274 "bytesio.c"
        var $8=$arg; //@line 275 "bytesio.c"
        var $9=$8; //@line 275 "bytesio.c"
        var $10=HEAP[$9]; //@line 275 "bytesio.c"
        var $11=($10) - 1; //@line 275 "bytesio.c"
        var $12=$arg; //@line 275 "bytesio.c"
        var $13=$12; //@line 275 "bytesio.c"
        HEAP[$13]=$11; //@line 275 "bytesio.c"
        var $14=$arg; //@line 275 "bytesio.c"
        var $15=$14; //@line 275 "bytesio.c"
        var $16=HEAP[$15]; //@line 275 "bytesio.c"
        var $17=($16)==0; //@line 275 "bytesio.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 275 "bytesio.c"
      case 3: // $bb2
        var $18=$arg; //@line 275 "bytesio.c"
        var $19=$18+4; //@line 275 "bytesio.c"
        var $20=HEAP[$19]; //@line 275 "bytesio.c"
        var $21=$20+24; //@line 275 "bytesio.c"
        var $22=HEAP[$21]; //@line 275 "bytesio.c"
        var $23=$arg; //@line 275 "bytesio.c"
        FUNCTION_TABLE[$22]($23); //@line 275 "bytesio.c"
        __label__ = 4; break; //@line 275 "bytesio.c"
      case 4: // $bb3
        var $24=$res; //@line 276 "bytesio.c"
        $0=$24; //@line 276 "bytesio.c"
        __label__ = 5; break; //@line 276 "bytesio.c"
      case 5: // $bb4
        var $25=$0; //@line 273 "bytesio.c"
        $retval=$25; //@line 273 "bytesio.c"
        var $retval5=$retval; //@line 273 "bytesio.c"
        ;
        return $retval5; //@line 273 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_readline($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $size;
        var $n;
        var $output=__stackBase__;
        var $arg=__stackBase__+4;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$arg]=__Py_NoneStruct; //@line 291 "bytesio.c"
        var $1=$self_addr; //@line 293 "bytesio.c"
        var $2=$1+8; //@line 293 "bytesio.c"
        var $3=HEAP[$2]; //@line 293 "bytesio.c"
        var $4=($3)==0; //@line 293 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 293 "bytesio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 293 "bytesio.c"
        _PyErr_SetString($5, __str672); //@line 293 "bytesio.c"
        $0=0; //@line 293 "bytesio.c"
        __label__ = 15; break; //@line 293 "bytesio.c"
      case 2: // $bb1
        var $6=$args_addr; //@line 295 "bytesio.c"
        var $7=_PyArg_ParseTuple($6, __str975, allocate([$arg,0,0,0], ["%struct.PyObject**",0,0,0], ALLOC_STACK)); //@line 295 "bytesio.c"
        var $8=($7)==0; //@line 295 "bytesio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 295 "bytesio.c"
      case 3: // $bb2
        $0=0; //@line 296 "bytesio.c"
        __label__ = 15; break; //@line 296 "bytesio.c"
      case 4: // $bb3
        var $9=HEAP[$arg]; //@line 298 "bytesio.c"
        var $10=_PyNumber_Check($9); //@line 298 "bytesio.c"
        var $11=($10)!=0; //@line 298 "bytesio.c"
        if ($11) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 298 "bytesio.c"
      case 5: // $bb4
        var $12=HEAP[_PyExc_OverflowError]; //@line 299 "bytesio.c"
        var $13=HEAP[$arg]; //@line 299 "bytesio.c"
        var $14=_PyNumber_AsSsize_t($13, $12); //@line 299 "bytesio.c"
        $size=$14; //@line 299 "bytesio.c"
        var $15=$size; //@line 300 "bytesio.c"
        var $16=($15)==-1; //@line 300 "bytesio.c"
        if ($16) { __label__ = 6; break; } else { __label__ = 11; break; } //@line 300 "bytesio.c"
      case 6: // $bb5
        var $17=_PyErr_Occurred(); //@line 300 "bytesio.c"
        var $18=($17)!=0; //@line 300 "bytesio.c"
        if ($18) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 300 "bytesio.c"
      case 7: // $bb6
        $0=0; //@line 301 "bytesio.c"
        __label__ = 15; break; //@line 301 "bytesio.c"
      case 8: // $bb8
        var $19=HEAP[$arg]; //@line 303 "bytesio.c"
        var $20=($19)==(__Py_NoneStruct); //@line 303 "bytesio.c"
        if ($20) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 303 "bytesio.c"
      case 9: // $bb9
        $size=-1; //@line 305 "bytesio.c"
        __label__ = 11; break; //@line 305 "bytesio.c"
      case 10: // $bb10
        var $21=HEAP[$arg]; //@line 308 "bytesio.c"
        var $22=$21+4; //@line 308 "bytesio.c"
        var $23=HEAP[$22]; //@line 308 "bytesio.c"
        var $24=$23+12; //@line 308 "bytesio.c"
        var $25=HEAP[$24]; //@line 308 "bytesio.c"
        var $26=HEAP[_PyExc_TypeError]; //@line 308 "bytesio.c"
        var $27=_PyErr_Format($26, __str874, allocate([$25,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 308 "bytesio.c"
        $0=0; //@line 310 "bytesio.c"
        __label__ = 15; break; //@line 310 "bytesio.c"
      case 11: // $bb11
        var $28=$self_addr; //@line 313 "bytesio.c"
        var $29=_get_line($28, $output); //@line 313 "bytesio.c"
        $n=$29; //@line 313 "bytesio.c"
        var $30=$size; //@line 315 "bytesio.c"
        var $31=($30) >= 0; //@line 315 "bytesio.c"
        if ($31) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 315 "bytesio.c"
      case 12: // $bb12
        var $32=$size; //@line 315 "bytesio.c"
        var $33=$n; //@line 315 "bytesio.c"
        var $34=($32) < ($33); //@line 315 "bytesio.c"
        if ($34) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 315 "bytesio.c"
      case 13: // $bb13
        var $35=$n; //@line 316 "bytesio.c"
        var $36=$size; //@line 316 "bytesio.c"
        var $37=($35) - ($36); //@line 316 "bytesio.c"
        $size=$37; //@line 316 "bytesio.c"
        var $38=$n; //@line 317 "bytesio.c"
        var $39=$size; //@line 317 "bytesio.c"
        var $40=($38) - ($39); //@line 317 "bytesio.c"
        $n=$40; //@line 317 "bytesio.c"
        var $41=$self_addr; //@line 318 "bytesio.c"
        var $42=$41+12; //@line 318 "bytesio.c"
        var $43=HEAP[$42]; //@line 318 "bytesio.c"
        var $44=$size; //@line 318 "bytesio.c"
        var $45=($43) - ($44); //@line 318 "bytesio.c"
        var $46=$self_addr; //@line 318 "bytesio.c"
        var $47=$46+12; //@line 318 "bytesio.c"
        HEAP[$47]=$45; //@line 318 "bytesio.c"
        __label__ = 14; break; //@line 318 "bytesio.c"
      case 14: // $bb14
        var $48=HEAP[$output]; //@line 321 "bytesio.c"
        var $49=$n; //@line 321 "bytesio.c"
        var $50=_PyString_FromStringAndSize($48, $49); //@line 321 "bytesio.c"
        $0=$50; //@line 321 "bytesio.c"
        __label__ = 15; break; //@line 321 "bytesio.c"
      case 15: // $bb15
        var $51=$0; //@line 293 "bytesio.c"
        $retval=$51; //@line 293 "bytesio.c"
        var $retval16=$retval; //@line 293 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval16; //@line 293 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_readlines($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $maxsize;
        var $size;
        var $n;
        var $result;
        var $line;
        var $output=__stackBase__;
        var $arg=__stackBase__+4;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$arg]=__Py_NoneStruct; //@line 337 "bytesio.c"
        var $1=$self_addr; //@line 339 "bytesio.c"
        var $2=$1+8; //@line 339 "bytesio.c"
        var $3=HEAP[$2]; //@line 339 "bytesio.c"
        var $4=($3)==0; //@line 339 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 339 "bytesio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 339 "bytesio.c"
        _PyErr_SetString($5, __str672); //@line 339 "bytesio.c"
        $0=0; //@line 339 "bytesio.c"
        __label__ = 26; break; //@line 339 "bytesio.c"
      case 2: // $bb1
        var $6=$args_addr; //@line 341 "bytesio.c"
        var $7=_PyArg_ParseTuple($6, __str1076, allocate([$arg,0,0,0], ["%struct.PyObject**",0,0,0], ALLOC_STACK)); //@line 341 "bytesio.c"
        var $8=($7)==0; //@line 341 "bytesio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 341 "bytesio.c"
      case 3: // $bb2
        $0=0; //@line 342 "bytesio.c"
        __label__ = 26; break; //@line 342 "bytesio.c"
      case 4: // $bb3
        var $9=HEAP[$arg]; //@line 344 "bytesio.c"
        var $10=_PyNumber_Check($9); //@line 344 "bytesio.c"
        var $11=($10)!=0; //@line 344 "bytesio.c"
        if ($11) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 344 "bytesio.c"
      case 5: // $bb4
        var $12=HEAP[_PyExc_OverflowError]; //@line 345 "bytesio.c"
        var $13=HEAP[$arg]; //@line 345 "bytesio.c"
        var $14=_PyNumber_AsSsize_t($13, $12); //@line 345 "bytesio.c"
        $maxsize=$14; //@line 345 "bytesio.c"
        var $15=$maxsize; //@line 346 "bytesio.c"
        var $16=($15)==-1; //@line 346 "bytesio.c"
        if ($16) { __label__ = 6; break; } else { __label__ = 11; break; } //@line 346 "bytesio.c"
      case 6: // $bb5
        var $17=_PyErr_Occurred(); //@line 346 "bytesio.c"
        var $18=($17)!=0; //@line 346 "bytesio.c"
        if ($18) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 346 "bytesio.c"
      case 7: // $bb6
        $0=0; //@line 347 "bytesio.c"
        __label__ = 26; break; //@line 347 "bytesio.c"
      case 8: // $bb8
        var $19=HEAP[$arg]; //@line 349 "bytesio.c"
        var $20=($19)==(__Py_NoneStruct); //@line 349 "bytesio.c"
        if ($20) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 349 "bytesio.c"
      case 9: // $bb9
        $maxsize=-1; //@line 351 "bytesio.c"
        __label__ = 11; break; //@line 351 "bytesio.c"
      case 10: // $bb10
        var $21=HEAP[$arg]; //@line 354 "bytesio.c"
        var $22=$21+4; //@line 354 "bytesio.c"
        var $23=HEAP[$22]; //@line 354 "bytesio.c"
        var $24=$23+12; //@line 354 "bytesio.c"
        var $25=HEAP[$24]; //@line 354 "bytesio.c"
        var $26=HEAP[_PyExc_TypeError]; //@line 354 "bytesio.c"
        var $27=_PyErr_Format($26, __str874, allocate([$25,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 354 "bytesio.c"
        $0=0; //@line 356 "bytesio.c"
        __label__ = 26; break; //@line 356 "bytesio.c"
      case 11: // $bb11
        $size=0; //@line 359 "bytesio.c"
        var $28=_PyList_New(0); //@line 360 "bytesio.c"
        $result=$28; //@line 360 "bytesio.c"
        var $29=($28)==0; //@line 361 "bytesio.c"
        if ($29) { __label__ = 12; break; } else { __label__ = 21; break; } //@line 361 "bytesio.c"
      case 12: // $bb12
        $0=0; //@line 362 "bytesio.c"
        __label__ = 26; break; //@line 362 "bytesio.c"
      case 13: // $bb14
        var $30=HEAP[$output]; //@line 365 "bytesio.c"
        var $31=$n; //@line 365 "bytesio.c"
        var $32=_PyString_FromStringAndSize($30, $31); //@line 365 "bytesio.c"
        $line=$32; //@line 365 "bytesio.c"
        var $33=$line; //@line 366 "bytesio.c"
        var $34=($33)==0; //@line 366 "bytesio.c"
        if ($34) { __label__ = 23; break; } else { __label__ = 14; break; } //@line 366 "bytesio.c"
      case 14: // $bb15
        var $35=$result; //@line 368 "bytesio.c"
        var $36=$line; //@line 368 "bytesio.c"
        var $37=_PyList_Append($35, $36); //@line 368 "bytesio.c"
        var $38=($37)==-1; //@line 368 "bytesio.c"
        var $39=$line; //@line 369 "bytesio.c"
        var $40=$39; //@line 369 "bytesio.c"
        var $41=HEAP[$40]; //@line 369 "bytesio.c"
        var $42=($41) - 1; //@line 369 "bytesio.c"
        var $43=$line; //@line 369 "bytesio.c"
        var $44=$43; //@line 369 "bytesio.c"
        HEAP[$44]=$42; //@line 369 "bytesio.c"
        var $45=$line; //@line 369 "bytesio.c"
        var $46=$45; //@line 369 "bytesio.c"
        var $47=HEAP[$46]; //@line 369 "bytesio.c"
        var $48=($47)==0; //@line 369 "bytesio.c"
        if ($38) { __label__ = 15; break; } else { __label__ = 17; break; } //@line 368 "bytesio.c"
      case 15: // $bb16
        if ($48) { __label__ = 16; break; } else { __label__ = 23; break; } //@line 369 "bytesio.c"
      case 16: // $bb17
        var $49=$line; //@line 369 "bytesio.c"
        var $50=$49+4; //@line 369 "bytesio.c"
        var $51=HEAP[$50]; //@line 369 "bytesio.c"
        var $52=$51+24; //@line 369 "bytesio.c"
        var $53=HEAP[$52]; //@line 369 "bytesio.c"
        var $54=$line; //@line 369 "bytesio.c"
        FUNCTION_TABLE[$53]($54); //@line 369 "bytesio.c"
        __label__ = 23; break; //@line 369 "bytesio.c"
      case 17: // $bb19
        if ($48) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 372 "bytesio.c"
      case 18: // $bb20
        var $55=$line; //@line 372 "bytesio.c"
        var $56=$55+4; //@line 372 "bytesio.c"
        var $57=HEAP[$56]; //@line 372 "bytesio.c"
        var $58=$57+24; //@line 372 "bytesio.c"
        var $59=HEAP[$58]; //@line 372 "bytesio.c"
        var $60=$line; //@line 372 "bytesio.c"
        FUNCTION_TABLE[$59]($60); //@line 372 "bytesio.c"
        __label__ = 19; break; //@line 372 "bytesio.c"
      case 19: // $bb21
        var $61=$size; //@line 373 "bytesio.c"
        var $62=$n; //@line 373 "bytesio.c"
        var $63=($62) + ($61); //@line 373 "bytesio.c"
        $size=$63; //@line 373 "bytesio.c"
        var $64=$maxsize; //@line 374 "bytesio.c"
        var $65=($64) > 0; //@line 374 "bytesio.c"
        if ($65) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 374 "bytesio.c"
      case 20: // $bb22
        var $66=$size; //@line 374 "bytesio.c"
        var $67=$maxsize; //@line 374 "bytesio.c"
        var $68=($66) >= ($67); //@line 374 "bytesio.c"
        if ($68) { __label__ = 22; break; } else { __label__ = 21; break; } //@line 374 "bytesio.c"
      case 21: // $bb23
        var $69=$self_addr; //@line 364 "bytesio.c"
        var $70=_get_line($69, $output); //@line 364 "bytesio.c"
        $n=$70; //@line 364 "bytesio.c"
        var $71=($70)!=0; //@line 364 "bytesio.c"
        if ($71) { __label__ = 13; break; } else { __label__ = 22; break; } //@line 364 "bytesio.c"
      case 22: // $bb24
        var $72=$result; //@line 377 "bytesio.c"
        $0=$72; //@line 377 "bytesio.c"
        __label__ = 26; break; //@line 377 "bytesio.c"
      case 23: // $on_error
        var $73=$result; //@line 380 "bytesio.c"
        var $74=$73; //@line 380 "bytesio.c"
        var $75=HEAP[$74]; //@line 380 "bytesio.c"
        var $76=($75) - 1; //@line 380 "bytesio.c"
        var $77=$result; //@line 380 "bytesio.c"
        var $78=$77; //@line 380 "bytesio.c"
        HEAP[$78]=$76; //@line 380 "bytesio.c"
        var $79=$result; //@line 380 "bytesio.c"
        var $80=$79; //@line 380 "bytesio.c"
        var $81=HEAP[$80]; //@line 380 "bytesio.c"
        var $82=($81)==0; //@line 380 "bytesio.c"
        if ($82) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 380 "bytesio.c"
      case 24: // $bb25
        var $83=$result; //@line 380 "bytesio.c"
        var $84=$83+4; //@line 380 "bytesio.c"
        var $85=HEAP[$84]; //@line 380 "bytesio.c"
        var $86=$85+24; //@line 380 "bytesio.c"
        var $87=HEAP[$86]; //@line 380 "bytesio.c"
        var $88=$result; //@line 380 "bytesio.c"
        FUNCTION_TABLE[$87]($88); //@line 380 "bytesio.c"
        __label__ = 25; break; //@line 380 "bytesio.c"
      case 25: // $bb26
        $0=0; //@line 381 "bytesio.c"
        __label__ = 26; break; //@line 381 "bytesio.c"
      case 26: // $bb27
        var $89=$0; //@line 339 "bytesio.c"
        $retval=$89; //@line 339 "bytesio.c"
        var $retval28=$retval; //@line 339 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval28; //@line 339 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_readinto($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 52; _memset(__stackBase__, 0, 52);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $buf=__stackBase__;
        var $len;
        var $n;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 396 "bytesio.c"
        var $2=$1+8; //@line 396 "bytesio.c"
        var $3=HEAP[$2]; //@line 396 "bytesio.c"
        var $4=($3)==0; //@line 396 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 396 "bytesio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 396 "bytesio.c"
        _PyErr_SetString($5, __str672); //@line 396 "bytesio.c"
        $0=0; //@line 396 "bytesio.c"
        __label__ = 12; break; //@line 396 "bytesio.c"
      case 2: // $bb1
        var $6=$args_addr; //@line 398 "bytesio.c"
        var $7=_PyArg_ParseTuple($6, __str1177, allocate([$buf,0,0,0], ["%struct.Py_buffer*",0,0,0], ALLOC_STACK)); //@line 398 "bytesio.c"
        var $8=($7)==0; //@line 398 "bytesio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 398 "bytesio.c"
      case 3: // $bb2
        $0=0; //@line 399 "bytesio.c"
        __label__ = 12; break; //@line 399 "bytesio.c"
      case 4: // $bb3
        var $9=$buf+8; //@line 401 "bytesio.c"
        var $10=HEAP[$9]; //@line 401 "bytesio.c"
        $len=$10; //@line 401 "bytesio.c"
        var $11=$self_addr; //@line 403 "bytesio.c"
        var $12=$11+16; //@line 403 "bytesio.c"
        var $13=HEAP[$12]; //@line 403 "bytesio.c"
        var $14=$self_addr; //@line 403 "bytesio.c"
        var $15=$14+12; //@line 403 "bytesio.c"
        var $16=HEAP[$15]; //@line 403 "bytesio.c"
        var $17=($13) - ($16); //@line 403 "bytesio.c"
        $n=$17; //@line 403 "bytesio.c"
        var $18=$len; //@line 404 "bytesio.c"
        var $19=$n; //@line 404 "bytesio.c"
        var $20=($18) > ($19); //@line 404 "bytesio.c"
        if ($20) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 404 "bytesio.c"
      case 5: // $bb4
        var $21=$n; //@line 405 "bytesio.c"
        $len=$21; //@line 405 "bytesio.c"
        var $22=$len; //@line 406 "bytesio.c"
        var $23=($22) < 0; //@line 406 "bytesio.c"
        if ($23) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 406 "bytesio.c"
      case 6: // $bb5
        $len=0; //@line 407 "bytesio.c"
        __label__ = 7; break; //@line 407 "bytesio.c"
      case 7: // $bb6
        var $24=$len; //@line 410 "bytesio.c"
        var $25=$self_addr; //@line 410 "bytesio.c"
        var $26=$25+8; //@line 410 "bytesio.c"
        var $27=HEAP[$26]; //@line 410 "bytesio.c"
        var $28=$self_addr; //@line 410 "bytesio.c"
        var $29=$28+12; //@line 410 "bytesio.c"
        var $30=HEAP[$29]; //@line 410 "bytesio.c"
        var $31=$27+$30; //@line 410 "bytesio.c"
        var $32=$buf; //@line 410 "bytesio.c"
        var $33=HEAP[$32]; //@line 410 "bytesio.c"
        _llvm_memcpy_p0i8_p0i8_i32($33, $31, $24, 1, 0); //@line 410 "bytesio.c"
        var $34=$self_addr; //@line 411 "bytesio.c"
        var $35=$34+12; //@line 411 "bytesio.c"
        var $36=HEAP[$35]; //@line 411 "bytesio.c"
        var $37=$len; //@line 411 "bytesio.c"
        var $38=($37) + ($36); //@line 411 "bytesio.c"
        var $39=($38)==2147483647; //@line 411 "bytesio.c"
        if ($39) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 411 "bytesio.c"
      case 8: // $bb7
        ___assert_fail(__str1278, __str167, 411, ___PRETTY_FUNCTION___8844); //@line 411 "bytesio.c"
        throw "Reached an unreachable!" //@line 411 "bytesio.c"
      case 9: // $bb8
        var $40=$len; //@line 412 "bytesio.c"
        var $41=($40) < 0; //@line 412 "bytesio.c"
        if ($41) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 412 "bytesio.c"
      case 10: // $bb9
        ___assert_fail(__str268, __str167, 412, ___PRETTY_FUNCTION___8844); //@line 412 "bytesio.c"
        throw "Reached an unreachable!" //@line 412 "bytesio.c"
      case 11: // $bb10
        var $42=$self_addr; //@line 413 "bytesio.c"
        var $43=$42+12; //@line 413 "bytesio.c"
        var $44=HEAP[$43]; //@line 413 "bytesio.c"
        var $45=$len; //@line 413 "bytesio.c"
        var $46=($45) + ($44); //@line 413 "bytesio.c"
        var $47=$self_addr; //@line 413 "bytesio.c"
        var $48=$47+12; //@line 413 "bytesio.c"
        HEAP[$48]=$46; //@line 413 "bytesio.c"
        _PyBuffer_Release($buf); //@line 415 "bytesio.c"
        var $49=$len; //@line 416 "bytesio.c"
        var $50=_PyLong_FromSsize_t($49); //@line 416 "bytesio.c"
        $0=$50; //@line 416 "bytesio.c"
        __label__ = 12; break; //@line 416 "bytesio.c"
      case 12: // $bb11
        var $51=$0; //@line 396 "bytesio.c"
        $retval=$51; //@line 396 "bytesio.c"
        var $retval12=$retval; //@line 396 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval12; //@line 396 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_truncate($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $size;
        var $arg=__stackBase__;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$arg]=__Py_NoneStruct; //@line 429 "bytesio.c"
        var $1=$self_addr; //@line 431 "bytesio.c"
        var $2=$1+8; //@line 431 "bytesio.c"
        var $3=HEAP[$2]; //@line 431 "bytesio.c"
        var $4=($3)==0; //@line 431 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 431 "bytesio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 431 "bytesio.c"
        _PyErr_SetString($5, __str672); //@line 431 "bytesio.c"
        $0=0; //@line 431 "bytesio.c"
        __label__ = 18; break; //@line 431 "bytesio.c"
      case 2: // $bb1
        var $6=$args_addr; //@line 433 "bytesio.c"
        var $7=_PyArg_ParseTuple($6, __str31, allocate([$arg,0,0,0], ["%struct.PyObject**",0,0,0], ALLOC_STACK)); //@line 433 "bytesio.c"
        var $8=($7)==0; //@line 433 "bytesio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 433 "bytesio.c"
      case 3: // $bb2
        $0=0; //@line 434 "bytesio.c"
        __label__ = 18; break; //@line 434 "bytesio.c"
      case 4: // $bb3
        var $9=HEAP[$arg]; //@line 436 "bytesio.c"
        var $10=_PyNumber_Check($9); //@line 436 "bytesio.c"
        var $11=($10)!=0; //@line 436 "bytesio.c"
        if ($11) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 436 "bytesio.c"
      case 5: // $bb4
        var $12=HEAP[_PyExc_OverflowError]; //@line 437 "bytesio.c"
        var $13=HEAP[$arg]; //@line 437 "bytesio.c"
        var $14=_PyNumber_AsSsize_t($13, $12); //@line 437 "bytesio.c"
        $size=$14; //@line 437 "bytesio.c"
        var $15=$size; //@line 438 "bytesio.c"
        var $16=($15)==-1; //@line 438 "bytesio.c"
        if ($16) { __lastLabel__ = 5; __label__ = 6; break; } else { __lastLabel__ = 5; __label__ = 12; break; } //@line 438 "bytesio.c"
      case 6: // $bb5
        var $17=_PyErr_Occurred(); //@line 438 "bytesio.c"
        var $18=($17)!=0; //@line 438 "bytesio.c"
        if ($18) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 438 "bytesio.c"
      case 7: // $bb6
        $0=0; //@line 439 "bytesio.c"
        __label__ = 18; break; //@line 439 "bytesio.c"
      case 8: // $bb8
        var $19=HEAP[$arg]; //@line 441 "bytesio.c"
        var $20=($19)==(__Py_NoneStruct); //@line 441 "bytesio.c"
        if ($20) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 441 "bytesio.c"
      case 9: // $bb9
        var $21=$self_addr; //@line 443 "bytesio.c"
        var $22=$21+12; //@line 443 "bytesio.c"
        var $23=HEAP[$22]; //@line 443 "bytesio.c"
        $size=$23; //@line 443 "bytesio.c"
        __lastLabel__ = 9; __label__ = 12; break; //@line 443 "bytesio.c"
      case 10: // $bb10
        var $24=HEAP[$arg]; //@line 446 "bytesio.c"
        var $25=$24+4; //@line 446 "bytesio.c"
        var $26=HEAP[$25]; //@line 446 "bytesio.c"
        var $27=$26+12; //@line 446 "bytesio.c"
        var $28=HEAP[$27]; //@line 446 "bytesio.c"
        var $29=HEAP[_PyExc_TypeError]; //@line 446 "bytesio.c"
        var $30=_PyErr_Format($29, __str874, allocate([$28,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 446 "bytesio.c"
        $0=0; //@line 448 "bytesio.c"
        __label__ = 18; break; //@line 448 "bytesio.c"
      case 11: // $bb11thread_pre_split
        var $_pr=$size;
        __lastLabel__ = 11; __label__ = 12; break;
      case 12: // $bb11
        var $31=__lastLabel__ == 11 ? $_pr : (__lastLabel__ == 5 ? $15 : ($23));
        var $32=($31) < 0; //@line 451 "bytesio.c"
        if ($32) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 451 "bytesio.c"
      case 13: // $bb12
        var $33=HEAP[_PyExc_ValueError]; //@line 452 "bytesio.c"
        var $34=$size; //@line 452 "bytesio.c"
        var $35=_PyErr_Format($33, __str1480, allocate([$34,0,0,0], ["i32",0,0,0], ALLOC_STACK)); //@line 452 "bytesio.c"
        $0=0; //@line 454 "bytesio.c"
        __label__ = 18; break; //@line 454 "bytesio.c"
      case 14: // $bb13
        var $36=$self_addr; //@line 457 "bytesio.c"
        var $37=$36+16; //@line 457 "bytesio.c"
        var $38=HEAP[$37]; //@line 457 "bytesio.c"
        var $39=$size; //@line 457 "bytesio.c"
        var $40=($38) > ($39); //@line 457 "bytesio.c"
        if ($40) { __label__ = 15; break; } else { __label__ = 17; break; } //@line 457 "bytesio.c"
      case 15: // $bb14
        var $41=$self_addr; //@line 458 "bytesio.c"
        var $42=$41+16; //@line 458 "bytesio.c"
        var $43=$size; //@line 458 "bytesio.c"
        HEAP[$42]=$43; //@line 458 "bytesio.c"
        var $44=$size; //@line 459 "bytesio.c"
        var $45=$self_addr; //@line 459 "bytesio.c"
        var $46=_resize_buffer($45, $44); //@line 459 "bytesio.c"
        var $47=($46) < 0; //@line 459 "bytesio.c"
        if ($47) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 459 "bytesio.c"
      case 16: // $bb15
        $0=0; //@line 460 "bytesio.c"
        __label__ = 18; break; //@line 460 "bytesio.c"
      case 17: // $bb16
        var $48=$size; //@line 463 "bytesio.c"
        var $49=_PyLong_FromSsize_t($48); //@line 463 "bytesio.c"
        $0=$49; //@line 463 "bytesio.c"
        __label__ = 18; break; //@line 463 "bytesio.c"
      case 18: // $bb17
        var $50=$0; //@line 431 "bytesio.c"
        $retval=$50; //@line 431 "bytesio.c"
        var $retval18=$retval; //@line 431 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval18; //@line 431 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_iternext($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $next=__stackBase__;
        var $n;
        $self_addr=$self;
        var $1=$self_addr; //@line 472 "bytesio.c"
        var $2=$1+8; //@line 472 "bytesio.c"
        var $3=HEAP[$2]; //@line 472 "bytesio.c"
        var $4=($3)==0; //@line 472 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 472 "bytesio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 472 "bytesio.c"
        _PyErr_SetString($5, __str672); //@line 472 "bytesio.c"
        $0=0; //@line 472 "bytesio.c"
        __label__ = 6; break; //@line 472 "bytesio.c"
      case 2: // $bb1
        var $6=$self_addr; //@line 474 "bytesio.c"
        var $7=_get_line($6, $next); //@line 474 "bytesio.c"
        $n=$7; //@line 474 "bytesio.c"
        var $8=HEAP[$next]; //@line 476 "bytesio.c"
        var $9=($8)==0; //@line 476 "bytesio.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 476 "bytesio.c"
      case 3: // $bb2
        var $10=$n; //@line 476 "bytesio.c"
        var $11=($10)==0; //@line 476 "bytesio.c"
        if ($11) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 476 "bytesio.c"
      case 4: // $bb3
        $0=0; //@line 477 "bytesio.c"
        __label__ = 6; break; //@line 477 "bytesio.c"
      case 5: // $bb4
        var $12=HEAP[$next]; //@line 479 "bytesio.c"
        var $13=$n; //@line 479 "bytesio.c"
        var $14=_PyString_FromStringAndSize($12, $13); //@line 479 "bytesio.c"
        $0=$14; //@line 479 "bytesio.c"
        __label__ = 6; break; //@line 479 "bytesio.c"
      case 6: // $bb5
        var $15=$0; //@line 472 "bytesio.c"
        $retval=$15; //@line 472 "bytesio.c"
        var $retval6=$retval; //@line 472 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval6; //@line 472 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_seek($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $posobj=__stackBase__;
        var $pos;
        var $mode=__stackBase__+4;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$mode]=0; //@line 496 "bytesio.c"
        var $1=$self_addr; //@line 498 "bytesio.c"
        var $2=$1+8; //@line 498 "bytesio.c"
        var $3=HEAP[$2]; //@line 498 "bytesio.c"
        var $4=($3)==0; //@line 498 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 498 "bytesio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 498 "bytesio.c"
        _PyErr_SetString($5, __str672); //@line 498 "bytesio.c"
        $0=0; //@line 498 "bytesio.c"
        __label__ = 24; break; //@line 498 "bytesio.c"
      case 2: // $bb1
        var $6=$args_addr; //@line 500 "bytesio.c"
        var $7=_PyArg_ParseTuple($6, __str28, allocate([$posobj,0,0,0,$mode,0,0,0], ["%struct.PyObject**",0,0,0,"i32*",0,0,0], ALLOC_STACK)); //@line 500 "bytesio.c"
        var $8=($7)==0; //@line 500 "bytesio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 500 "bytesio.c"
      case 3: // $bb2
        $0=0; //@line 501 "bytesio.c"
        __label__ = 24; break; //@line 501 "bytesio.c"
      case 4: // $bb3
        var $9=HEAP[_PyExc_OverflowError]; //@line 503 "bytesio.c"
        var $10=HEAP[$posobj]; //@line 503 "bytesio.c"
        var $11=_PyNumber_AsSsize_t($10, $9); //@line 503 "bytesio.c"
        $pos=$11; //@line 503 "bytesio.c"
        var $12=$pos; //@line 504 "bytesio.c"
        var $13=($12)==-1; //@line 504 "bytesio.c"
        if ($13) { __lastLabel__ = 4; __label__ = 5; break; } else { __lastLabel__ = 4; __label__ = 8; break; } //@line 504 "bytesio.c"
      case 5: // $bb4
        var $14=_PyErr_Occurred(); //@line 504 "bytesio.c"
        var $15=($14)!=0; //@line 504 "bytesio.c"
        if ($15) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 504 "bytesio.c"
      case 6: // $bb5
        $0=0; //@line 505 "bytesio.c"
        __label__ = 24; break; //@line 505 "bytesio.c"
      case 7: // $bb6thread_pre_split
        var $_pr=$pos;
        __lastLabel__ = 7; __label__ = 8; break;
      case 8: // $bb6
        var $16=__lastLabel__ == 7 ? $_pr : ($12);
        var $17=($16) < 0; //@line 507 "bytesio.c"
        var $18=HEAP[$mode]; //@line 507 "bytesio.c"
        var $19=($18)==0; //@line 507 "bytesio.c"
        var $or_cond=($17) & ($19);
        if ($or_cond) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 507 "bytesio.c"
      case 9: // $bb8
        var $20=HEAP[_PyExc_ValueError]; //@line 508 "bytesio.c"
        var $21=$pos; //@line 508 "bytesio.c"
        var $22=_PyErr_Format($20, __str1682, allocate([$21,0,0,0], ["i32",0,0,0], ALLOC_STACK)); //@line 508 "bytesio.c"
        $0=0; //@line 510 "bytesio.c"
        __label__ = 24; break; //@line 510 "bytesio.c"
      case 10: // $bb9
        var $23=($18)==1; //@line 516 "bytesio.c"
        if ($23) { __label__ = 11; break; } else { __label__ = 14; break; } //@line 516 "bytesio.c"
      case 11: // $bb10
        var $24=$self_addr; //@line 517 "bytesio.c"
        var $25=$24+12; //@line 517 "bytesio.c"
        var $26=HEAP[$25]; //@line 517 "bytesio.c"
        var $27=2147483647 - ($26); //@line 517 "bytesio.c"
        var $28=$pos; //@line 517 "bytesio.c"
        var $29=($27) < ($28); //@line 517 "bytesio.c"
        if ($29) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 517 "bytesio.c"
      case 12: // $bb11
        var $30=HEAP[_PyExc_OverflowError]; //@line 518 "bytesio.c"
        _PyErr_SetString($30, __str1783); //@line 518 "bytesio.c"
        $0=0; //@line 520 "bytesio.c"
        __label__ = 24; break; //@line 520 "bytesio.c"
      case 13: // $bb12
        var $31=$self_addr; //@line 522 "bytesio.c"
        var $32=$31+12; //@line 522 "bytesio.c"
        var $33=HEAP[$32]; //@line 522 "bytesio.c"
        var $34=$pos; //@line 522 "bytesio.c"
        var $35=($34) + ($33); //@line 522 "bytesio.c"
        $pos=$35; //@line 522 "bytesio.c"
        __lastLabel__ = 13; __label__ = 21; break; //@line 522 "bytesio.c"
      case 14: // $bb13
        var $36=HEAP[$mode]; //@line 524 "bytesio.c"
        var $37=($36)==2; //@line 524 "bytesio.c"
        if ($37) { __label__ = 15; break; } else { __label__ = 18; break; } //@line 524 "bytesio.c"
      case 15: // $bb14
        var $38=$self_addr; //@line 525 "bytesio.c"
        var $39=$38+16; //@line 525 "bytesio.c"
        var $40=HEAP[$39]; //@line 525 "bytesio.c"
        var $41=2147483647 - ($40); //@line 525 "bytesio.c"
        var $42=$pos; //@line 525 "bytesio.c"
        var $43=($41) < ($42); //@line 525 "bytesio.c"
        if ($43) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 525 "bytesio.c"
      case 16: // $bb15
        var $44=HEAP[_PyExc_OverflowError]; //@line 526 "bytesio.c"
        _PyErr_SetString($44, __str1783); //@line 526 "bytesio.c"
        $0=0; //@line 528 "bytesio.c"
        __label__ = 24; break; //@line 528 "bytesio.c"
      case 17: // $bb16
        var $45=$self_addr; //@line 530 "bytesio.c"
        var $46=$45+16; //@line 530 "bytesio.c"
        var $47=HEAP[$46]; //@line 530 "bytesio.c"
        var $48=$pos; //@line 530 "bytesio.c"
        var $49=($48) + ($47); //@line 530 "bytesio.c"
        $pos=$49; //@line 530 "bytesio.c"
        __lastLabel__ = 17; __label__ = 21; break; //@line 530 "bytesio.c"
      case 18: // $bb17
        var $50=HEAP[$mode]; //@line 532 "bytesio.c"
        var $51=($50)!=0; //@line 532 "bytesio.c"
        if ($51) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 532 "bytesio.c"
      case 19: // $bb18
        var $52=HEAP[$mode]; //@line 533 "bytesio.c"
        var $53=HEAP[_PyExc_ValueError]; //@line 533 "bytesio.c"
        var $54=_PyErr_Format($53, __str1884, allocate([$52,0,0,0], ["i32",0,0,0], ALLOC_STACK)); //@line 533 "bytesio.c"
        $0=0; //@line 535 "bytesio.c"
        __label__ = 24; break; //@line 535 "bytesio.c"
      case 20: // $bb19thread_pre_split
        var $_pr2=$pos;
        __lastLabel__ = 20; __label__ = 21; break;
      case 21: // $bb19
        var $55=__lastLabel__ == 20 ? $_pr2 : (__lastLabel__ == 17 ? $49 : ($35));
        var $56=($55) < 0; //@line 538 "bytesio.c"
        if ($56) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 538 "bytesio.c"
      case 22: // $bb20
        $pos=0; //@line 539 "bytesio.c"
        __label__ = 23; break; //@line 539 "bytesio.c"
      case 23: // $bb21
        var $57=$self_addr; //@line 540 "bytesio.c"
        var $58=$57+12; //@line 540 "bytesio.c"
        var $59=$pos; //@line 540 "bytesio.c"
        HEAP[$58]=$59; //@line 540 "bytesio.c"
        var $60=$self_addr; //@line 542 "bytesio.c"
        var $61=$60+12; //@line 542 "bytesio.c"
        var $62=HEAP[$61]; //@line 542 "bytesio.c"
        var $63=_PyLong_FromSsize_t($62); //@line 542 "bytesio.c"
        $0=$63; //@line 542 "bytesio.c"
        __label__ = 24; break; //@line 542 "bytesio.c"
      case 24: // $bb22
        var $64=$0; //@line 498 "bytesio.c"
        $retval=$64; //@line 498 "bytesio.c"
        var $retval23=$retval; //@line 498 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval23; //@line 498 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_write($self, $obj) {
    var __stackBase__  = STACKTOP; STACKTOP += 52; _memset(__stackBase__, 0, 52);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $obj_addr;
        var $retval;
        var $0;
        var $n;
        var $buf=__stackBase__;
        var $result;
        $self_addr=$self;
        $obj_addr=$obj;
        $n=0; //@line 553 "bytesio.c"
        $result=0; //@line 555 "bytesio.c"
        var $1=$self_addr; //@line 557 "bytesio.c"
        var $2=$1+8; //@line 557 "bytesio.c"
        var $3=HEAP[$2]; //@line 557 "bytesio.c"
        var $4=($3)==0; //@line 557 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 557 "bytesio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 557 "bytesio.c"
        _PyErr_SetString($5, __str672); //@line 557 "bytesio.c"
        $0=0; //@line 557 "bytesio.c"
        __label__ = 10; break; //@line 557 "bytesio.c"
      case 2: // $bb1
        var $6=$obj_addr; //@line 559 "bytesio.c"
        var $7=_PyObject_GetBuffer($6, $buf, 8); //@line 559 "bytesio.c"
        var $8=($7) < 0; //@line 559 "bytesio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 559 "bytesio.c"
      case 3: // $bb2
        $0=0; //@line 560 "bytesio.c"
        __label__ = 10; break; //@line 560 "bytesio.c"
      case 4: // $bb3
        var $9=$buf+8; //@line 562 "bytesio.c"
        var $10=HEAP[$9]; //@line 562 "bytesio.c"
        var $11=($10)!=0; //@line 562 "bytesio.c"
        if ($11) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 562 "bytesio.c"
      case 5: // $bb4
        var $12=$buf+8; //@line 563 "bytesio.c"
        var $13=HEAP[$12]; //@line 563 "bytesio.c"
        var $14=$buf; //@line 563 "bytesio.c"
        var $15=HEAP[$14]; //@line 563 "bytesio.c"
        var $16=$self_addr; //@line 563 "bytesio.c"
        var $17=_write_bytes($16, $15, $13); //@line 563 "bytesio.c"
        $n=$17; //@line 563 "bytesio.c"
        __lastLabel__ = 5; __label__ = 7; break; //@line 563 "bytesio.c"
      case 6: // $bb5thread_pre_split
        var $_pr=$n;
        __lastLabel__ = 6; __label__ = 7; break;
      case 7: // $bb5
        var $18=__lastLabel__ == 6 ? $_pr : ($17);
        var $19=($18) >= 0; //@line 564 "bytesio.c"
        if ($19) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 564 "bytesio.c"
      case 8: // $bb6
        var $20=$n; //@line 565 "bytesio.c"
        var $21=_PyLong_FromSsize_t($20); //@line 565 "bytesio.c"
        $result=$21; //@line 565 "bytesio.c"
        __label__ = 9; break; //@line 565 "bytesio.c"
      case 9: // $bb7
        _PyBuffer_Release($buf); //@line 567 "bytesio.c"
        var $22=$result; //@line 568 "bytesio.c"
        $0=$22; //@line 568 "bytesio.c"
        __label__ = 10; break; //@line 568 "bytesio.c"
      case 10: // $bb8
        var $23=$0; //@line 557 "bytesio.c"
        $retval=$23; //@line 557 "bytesio.c"
        var $retval9=$retval; //@line 557 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 557 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_writelines($self, $v) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $v_addr;
        var $retval;
        var $0;
        var $it;
        var $item;
        var $ret;
        $self_addr=$self;
        $v_addr=$v;
        var $1=$self_addr; //@line 584 "bytesio.c"
        var $2=$1+8; //@line 584 "bytesio.c"
        var $3=HEAP[$2]; //@line 584 "bytesio.c"
        var $4=($3)==0; //@line 584 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 584 "bytesio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 584 "bytesio.c"
        _PyErr_SetString($5, __str672); //@line 584 "bytesio.c"
        $0=0; //@line 584 "bytesio.c"
        __label__ = 18; break; //@line 584 "bytesio.c"
      case 2: // $bb1
        var $6=$v_addr; //@line 586 "bytesio.c"
        var $7=_PyObject_GetIter($6); //@line 586 "bytesio.c"
        $it=$7; //@line 586 "bytesio.c"
        var $8=$it; //@line 587 "bytesio.c"
        var $9=($8)==0; //@line 587 "bytesio.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 12; break; } //@line 587 "bytesio.c"
      case 3: // $bb2
        $0=0; //@line 588 "bytesio.c"
        __label__ = 18; break; //@line 588 "bytesio.c"
      case 4: // $bb4
        var $10=$self_addr; //@line 591 "bytesio.c"
        var $11=$item; //@line 591 "bytesio.c"
        var $12=_bytesio_write($10, $11); //@line 591 "bytesio.c"
        $ret=$12; //@line 591 "bytesio.c"
        var $13=$item; //@line 592 "bytesio.c"
        var $14=$13; //@line 592 "bytesio.c"
        var $15=HEAP[$14]; //@line 592 "bytesio.c"
        var $16=($15) - 1; //@line 592 "bytesio.c"
        var $17=$item; //@line 592 "bytesio.c"
        var $18=$17; //@line 592 "bytesio.c"
        HEAP[$18]=$16; //@line 592 "bytesio.c"
        var $19=$item; //@line 592 "bytesio.c"
        var $20=$19; //@line 592 "bytesio.c"
        var $21=HEAP[$20]; //@line 592 "bytesio.c"
        var $22=($21)==0; //@line 592 "bytesio.c"
        if ($22) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 592 "bytesio.c"
      case 5: // $bb5
        var $23=$item; //@line 592 "bytesio.c"
        var $24=$23+4; //@line 592 "bytesio.c"
        var $25=HEAP[$24]; //@line 592 "bytesio.c"
        var $26=$25+24; //@line 592 "bytesio.c"
        var $27=HEAP[$26]; //@line 592 "bytesio.c"
        var $28=$item; //@line 592 "bytesio.c"
        FUNCTION_TABLE[$27]($28); //@line 592 "bytesio.c"
        __label__ = 6; break; //@line 592 "bytesio.c"
      case 6: // $bb6
        var $29=$ret; //@line 593 "bytesio.c"
        var $30=($29)==0; //@line 593 "bytesio.c"
        if ($30) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 593 "bytesio.c"
      case 7: // $bb7
        var $31=$it; //@line 594 "bytesio.c"
        var $32=$31; //@line 594 "bytesio.c"
        var $33=HEAP[$32]; //@line 594 "bytesio.c"
        var $34=($33) - 1; //@line 594 "bytesio.c"
        var $35=$it; //@line 594 "bytesio.c"
        var $36=$35; //@line 594 "bytesio.c"
        HEAP[$36]=$34; //@line 594 "bytesio.c"
        var $37=$it; //@line 594 "bytesio.c"
        var $38=$37; //@line 594 "bytesio.c"
        var $39=HEAP[$38]; //@line 594 "bytesio.c"
        var $40=($39)==0; //@line 594 "bytesio.c"
        if ($40) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 594 "bytesio.c"
      case 8: // $bb8
        var $41=$it; //@line 594 "bytesio.c"
        var $42=$41+4; //@line 594 "bytesio.c"
        var $43=HEAP[$42]; //@line 594 "bytesio.c"
        var $44=$43+24; //@line 594 "bytesio.c"
        var $45=HEAP[$44]; //@line 594 "bytesio.c"
        var $46=$it; //@line 594 "bytesio.c"
        FUNCTION_TABLE[$45]($46); //@line 594 "bytesio.c"
        __label__ = 9; break; //@line 594 "bytesio.c"
      case 9: // $bb9
        $0=0; //@line 595 "bytesio.c"
        __label__ = 18; break; //@line 595 "bytesio.c"
      case 10: // $bb10
        var $47=$ret; //@line 597 "bytesio.c"
        var $48=$47; //@line 597 "bytesio.c"
        var $49=HEAP[$48]; //@line 597 "bytesio.c"
        var $50=($49) - 1; //@line 597 "bytesio.c"
        var $51=$ret; //@line 597 "bytesio.c"
        var $52=$51; //@line 597 "bytesio.c"
        HEAP[$52]=$50; //@line 597 "bytesio.c"
        var $53=$ret; //@line 597 "bytesio.c"
        var $54=$53; //@line 597 "bytesio.c"
        var $55=HEAP[$54]; //@line 597 "bytesio.c"
        var $56=($55)==0; //@line 597 "bytesio.c"
        if ($56) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 597 "bytesio.c"
      case 11: // $bb11
        var $57=$ret; //@line 597 "bytesio.c"
        var $58=$57+4; //@line 597 "bytesio.c"
        var $59=HEAP[$58]; //@line 597 "bytesio.c"
        var $60=$59+24; //@line 597 "bytesio.c"
        var $61=HEAP[$60]; //@line 597 "bytesio.c"
        var $62=$ret; //@line 597 "bytesio.c"
        FUNCTION_TABLE[$61]($62); //@line 597 "bytesio.c"
        __label__ = 12; break; //@line 597 "bytesio.c"
      case 12: // $bb12
        var $63=$it; //@line 590 "bytesio.c"
        var $64=_PyIter_Next($63); //@line 590 "bytesio.c"
        $item=$64; //@line 590 "bytesio.c"
        var $65=($64)!=0; //@line 590 "bytesio.c"
        if ($65) { __label__ = 4; break; } else { __label__ = 13; break; } //@line 590 "bytesio.c"
      case 13: // $bb13
        var $66=$it; //@line 599 "bytesio.c"
        var $67=$66; //@line 599 "bytesio.c"
        var $68=HEAP[$67]; //@line 599 "bytesio.c"
        var $69=($68) - 1; //@line 599 "bytesio.c"
        var $70=$it; //@line 599 "bytesio.c"
        var $71=$70; //@line 599 "bytesio.c"
        HEAP[$71]=$69; //@line 599 "bytesio.c"
        var $72=$it; //@line 599 "bytesio.c"
        var $73=$72; //@line 599 "bytesio.c"
        var $74=HEAP[$73]; //@line 599 "bytesio.c"
        var $75=($74)==0; //@line 599 "bytesio.c"
        if ($75) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 599 "bytesio.c"
      case 14: // $bb14
        var $76=$it; //@line 599 "bytesio.c"
        var $77=$76+4; //@line 599 "bytesio.c"
        var $78=HEAP[$77]; //@line 599 "bytesio.c"
        var $79=$78+24; //@line 599 "bytesio.c"
        var $80=HEAP[$79]; //@line 599 "bytesio.c"
        var $81=$it; //@line 599 "bytesio.c"
        FUNCTION_TABLE[$80]($81); //@line 599 "bytesio.c"
        __label__ = 15; break; //@line 599 "bytesio.c"
      case 15: // $bb15
        var $82=_PyErr_Occurred(); //@line 602 "bytesio.c"
        var $83=($82)!=0; //@line 602 "bytesio.c"
        if ($83) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 602 "bytesio.c"
      case 16: // $bb16
        $0=0; //@line 603 "bytesio.c"
        __label__ = 18; break; //@line 603 "bytesio.c"
      case 17: // $bb17
        var $84=HEAP[__Py_NoneStruct]; //@line 605 "bytesio.c"
        var $85=($84) + 1; //@line 605 "bytesio.c"
        HEAP[__Py_NoneStruct]=$85; //@line 605 "bytesio.c"
        $0=__Py_NoneStruct; //@line 605 "bytesio.c"
        __label__ = 18; break; //@line 605 "bytesio.c"
      case 18: // $bb18
        var $86=$0; //@line 584 "bytesio.c"
        $retval=$86; //@line 584 "bytesio.c"
        var $retval19=$retval; //@line 584 "bytesio.c"
        ;
        return $retval19; //@line 584 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_close($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        var $1=$self_addr; //@line 614 "bytesio.c"
        var $2=$1+8; //@line 614 "bytesio.c"
        var $3=HEAP[$2]; //@line 614 "bytesio.c"
        var $4=($3)!=0; //@line 614 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 614 "bytesio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 615 "bytesio.c"
        var $6=$5+8; //@line 615 "bytesio.c"
        var $7=HEAP[$6]; //@line 615 "bytesio.c"
        _PyMem_Free($7); //@line 615 "bytesio.c"
        var $8=$self_addr; //@line 616 "bytesio.c"
        var $9=$8+8; //@line 616 "bytesio.c"
        HEAP[$9]=0; //@line 616 "bytesio.c"
        __label__ = 2; break; //@line 616 "bytesio.c"
      case 2: // $bb1
        var $10=HEAP[__Py_NoneStruct]; //@line 618 "bytesio.c"
        var $11=($10) + 1; //@line 618 "bytesio.c"
        HEAP[__Py_NoneStruct]=$11; //@line 618 "bytesio.c"
        $0=__Py_NoneStruct; //@line 618 "bytesio.c"
        var $12=$0; //@line 618 "bytesio.c"
        $retval=$12; //@line 618 "bytesio.c"
        var $retval2=$retval; //@line 618 "bytesio.c"
        ;
        return $retval2; //@line 618 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_getstate($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $initvalue;
        var $dict;
        var $state;
        $self_addr=$self;
        var $1=$self_addr; //@line 639 "bytesio.c"
        var $2=_bytesio_getvalue($1); //@line 639 "bytesio.c"
        $initvalue=$2; //@line 639 "bytesio.c"
        var $3=$initvalue; //@line 643 "bytesio.c"
        var $4=($3)==0; //@line 643 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 643 "bytesio.c"
      case 1: // $bb
        $0=0; //@line 644 "bytesio.c"
        __label__ = 9; break; //@line 644 "bytesio.c"
      case 2: // $bb1
        var $5=$self_addr; //@line 645 "bytesio.c"
        var $6=$5+24; //@line 645 "bytesio.c"
        var $7=HEAP[$6]; //@line 645 "bytesio.c"
        var $8=($7)==0; //@line 645 "bytesio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 645 "bytesio.c"
      case 3: // $bb2
        var $9=HEAP[__Py_NoneStruct]; //@line 646 "bytesio.c"
        var $10=($9) + 1; //@line 646 "bytesio.c"
        HEAP[__Py_NoneStruct]=$10; //@line 646 "bytesio.c"
        $dict=__Py_NoneStruct; //@line 647 "bytesio.c"
        __label__ = 6; break; //@line 647 "bytesio.c"
      case 4: // $bb3
        var $11=$self_addr; //@line 650 "bytesio.c"
        var $12=$11+24; //@line 650 "bytesio.c"
        var $13=HEAP[$12]; //@line 650 "bytesio.c"
        var $14=_PyDict_Copy($13); //@line 650 "bytesio.c"
        $dict=$14; //@line 650 "bytesio.c"
        var $15=$dict; //@line 651 "bytesio.c"
        var $16=($15)==0; //@line 651 "bytesio.c"
        if ($16) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 651 "bytesio.c"
      case 5: // $bb4
        $0=0; //@line 652 "bytesio.c"
        __label__ = 9; break; //@line 652 "bytesio.c"
      case 6: // $bb5
        var $17=$self_addr; //@line 655 "bytesio.c"
        var $18=$17+12; //@line 655 "bytesio.c"
        var $19=HEAP[$18]; //@line 655 "bytesio.c"
        var $20=$initvalue; //@line 655 "bytesio.c"
        var $21=$dict; //@line 655 "bytesio.c"
        var $22=_Py_BuildValue(__str1985, allocate([$20,0,0,0,$19,0,0,0,$21,0,0,0], ["%struct.PyObject*",0,0,0,"i32",0,0,0,"%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 655 "bytesio.c"
        $state=$22; //@line 655 "bytesio.c"
        var $23=$initvalue; //@line 656 "bytesio.c"
        var $24=$23; //@line 656 "bytesio.c"
        var $25=HEAP[$24]; //@line 656 "bytesio.c"
        var $26=($25) - 1; //@line 656 "bytesio.c"
        var $27=$initvalue; //@line 656 "bytesio.c"
        var $28=$27; //@line 656 "bytesio.c"
        HEAP[$28]=$26; //@line 656 "bytesio.c"
        var $29=$initvalue; //@line 656 "bytesio.c"
        var $30=$29; //@line 656 "bytesio.c"
        var $31=HEAP[$30]; //@line 656 "bytesio.c"
        var $32=($31)==0; //@line 656 "bytesio.c"
        if ($32) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 656 "bytesio.c"
      case 7: // $bb6
        var $33=$initvalue; //@line 656 "bytesio.c"
        var $34=$33+4; //@line 656 "bytesio.c"
        var $35=HEAP[$34]; //@line 656 "bytesio.c"
        var $36=$35+24; //@line 656 "bytesio.c"
        var $37=HEAP[$36]; //@line 656 "bytesio.c"
        var $38=$initvalue; //@line 656 "bytesio.c"
        FUNCTION_TABLE[$37]($38); //@line 656 "bytesio.c"
        __label__ = 8; break; //@line 656 "bytesio.c"
      case 8: // $bb7
        var $39=$state; //@line 657 "bytesio.c"
        $0=$39; //@line 657 "bytesio.c"
        __label__ = 9; break; //@line 657 "bytesio.c"
      case 9: // $bb8
        var $40=$0; //@line 644 "bytesio.c"
        $retval=$40; //@line 644 "bytesio.c"
        var $retval9=$retval; //@line 644 "bytesio.c"
        ;
        return $retval9; //@line 644 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_setstate($self, $state) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $state_addr;
        var $retval;
        var $0;
        var $result;
        var $position_obj;
        var $dict;
        var $pos;
        $self_addr=$self;
        $state_addr=$state;
        var $1=$state_addr; //@line 668 "bytesio.c"
        var $2=($1)==0; //@line 668 "bytesio.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 668 "bytesio.c"
      case 1: // $bb
        ___assert_fail(__str2086, __str167, 668, ___PRETTY_FUNCTION___9134); //@line 668 "bytesio.c"
        throw "Reached an unreachable!" //@line 668 "bytesio.c"
      case 2: // $bb1
        var $3=$state_addr; //@line 673 "bytesio.c"
        var $4=$3+4; //@line 673 "bytesio.c"
        var $5=HEAP[$4]; //@line 673 "bytesio.c"
        var $6=$5+84; //@line 673 "bytesio.c"
        var $7=HEAP[$6]; //@line 673 "bytesio.c"
        var $8=($7) & 67108864; //@line 673 "bytesio.c"
        var $9=($8)==0; //@line 673 "bytesio.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 673 "bytesio.c"
      case 3: // $bb2
        var $10=$state_addr; //@line 673 "bytesio.c"
        var $11=$10; //@line 673 "bytesio.c"
        var $12=$11+8; //@line 673 "bytesio.c"
        var $13=HEAP[$12]; //@line 673 "bytesio.c"
        var $14=($13) <= 2; //@line 673 "bytesio.c"
        if ($14) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 673 "bytesio.c"
      case 4: // $bb3
        var $15=$state_addr; //@line 674 "bytesio.c"
        var $16=$15+4; //@line 674 "bytesio.c"
        var $17=HEAP[$16]; //@line 674 "bytesio.c"
        var $18=$17+12; //@line 674 "bytesio.c"
        var $19=HEAP[$18]; //@line 674 "bytesio.c"
        var $20=$self_addr; //@line 674 "bytesio.c"
        var $21=$20; //@line 674 "bytesio.c"
        var $22=$21+4; //@line 674 "bytesio.c"
        var $23=HEAP[$22]; //@line 674 "bytesio.c"
        var $24=$23+12; //@line 674 "bytesio.c"
        var $25=HEAP[$24]; //@line 674 "bytesio.c"
        var $26=HEAP[_PyExc_TypeError]; //@line 674 "bytesio.c"
        var $27=_PyErr_Format($26, __str2187, allocate([$25,0,0,0,$19,0,0,0], ["i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 674 "bytesio.c"
        $0=0; //@line 677 "bytesio.c"
        __label__ = 27; break; //@line 677 "bytesio.c"
      case 5: // $bb4
        var $28=$self_addr; //@line 681 "bytesio.c"
        var $29=$28+16; //@line 681 "bytesio.c"
        HEAP[$29]=0; //@line 681 "bytesio.c"
        var $30=$self_addr; //@line 682 "bytesio.c"
        var $31=$30+12; //@line 682 "bytesio.c"
        HEAP[$31]=0; //@line 682 "bytesio.c"
        var $32=$state_addr; //@line 686 "bytesio.c"
        var $33=$32; //@line 686 "bytesio.c"
        var $34=$33+12; //@line 686 "bytesio.c"
        var $35=$34; //@line 686 "bytesio.c"
        var $36=HEAP[$35]; //@line 686 "bytesio.c"
        var $37=$self_addr; //@line 686 "bytesio.c"
        var $38=_bytesio_write($37, $36); //@line 686 "bytesio.c"
        $result=$38; //@line 686 "bytesio.c"
        var $39=$result; //@line 687 "bytesio.c"
        var $40=($39)==0; //@line 687 "bytesio.c"
        if ($40) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 687 "bytesio.c"
      case 6: // $bb5
        $0=0; //@line 688 "bytesio.c"
        __label__ = 27; break; //@line 688 "bytesio.c"
      case 7: // $bb6
        var $41=$result; //@line 689 "bytesio.c"
        var $42=$41; //@line 689 "bytesio.c"
        var $43=HEAP[$42]; //@line 689 "bytesio.c"
        var $44=($43) - 1; //@line 689 "bytesio.c"
        var $45=$result; //@line 689 "bytesio.c"
        var $46=$45; //@line 689 "bytesio.c"
        HEAP[$46]=$44; //@line 689 "bytesio.c"
        var $47=$result; //@line 689 "bytesio.c"
        var $48=$47; //@line 689 "bytesio.c"
        var $49=HEAP[$48]; //@line 689 "bytesio.c"
        var $50=($49)==0; //@line 689 "bytesio.c"
        if ($50) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 689 "bytesio.c"
      case 8: // $bb7
        var $51=$result; //@line 689 "bytesio.c"
        var $52=$51+4; //@line 689 "bytesio.c"
        var $53=HEAP[$52]; //@line 689 "bytesio.c"
        var $54=$53+24; //@line 689 "bytesio.c"
        var $55=HEAP[$54]; //@line 689 "bytesio.c"
        var $56=$result; //@line 689 "bytesio.c"
        FUNCTION_TABLE[$55]($56); //@line 689 "bytesio.c"
        __label__ = 9; break; //@line 689 "bytesio.c"
      case 9: // $bb8
        var $57=$state_addr; //@line 694 "bytesio.c"
        var $58=$57; //@line 694 "bytesio.c"
        var $59=$58+12; //@line 694 "bytesio.c"
        var $60=$59+4; //@line 694 "bytesio.c"
        var $61=HEAP[$60]; //@line 694 "bytesio.c"
        $position_obj=$61; //@line 694 "bytesio.c"
        var $62=$position_obj; //@line 695 "bytesio.c"
        var $63=$62+4; //@line 695 "bytesio.c"
        var $64=HEAP[$63]; //@line 695 "bytesio.c"
        var $65=$64+48; //@line 695 "bytesio.c"
        var $66=HEAP[$65]; //@line 695 "bytesio.c"
        var $67=($66)==0; //@line 695 "bytesio.c"
        if ($67) { __label__ = 12; break; } else { __label__ = 10; break; } //@line 695 "bytesio.c"
      case 10: // $bb9
        var $68=$position_obj; //@line 695 "bytesio.c"
        var $69=$68+4; //@line 695 "bytesio.c"
        var $70=HEAP[$69]; //@line 695 "bytesio.c"
        var $71=$70+84; //@line 695 "bytesio.c"
        var $72=HEAP[$71]; //@line 695 "bytesio.c"
        var $73=($72) & 131072; //@line 695 "bytesio.c"
        var $74=($73)==0; //@line 695 "bytesio.c"
        if ($74) { __label__ = 12; break; } else { __label__ = 11; break; } //@line 695 "bytesio.c"
      case 11: // $bb10
        var $75=$position_obj; //@line 695 "bytesio.c"
        var $76=$75+4; //@line 695 "bytesio.c"
        var $77=HEAP[$76]; //@line 695 "bytesio.c"
        var $78=$77+48; //@line 695 "bytesio.c"
        var $79=HEAP[$78]; //@line 695 "bytesio.c"
        var $80=$79+152; //@line 695 "bytesio.c"
        var $81=HEAP[$80]; //@line 695 "bytesio.c"
        var $82=($81)==0; //@line 695 "bytesio.c"
        if ($82) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 695 "bytesio.c"
      case 12: // $bb11
        var $83=$position_obj; //@line 696 "bytesio.c"
        var $84=$83+4; //@line 696 "bytesio.c"
        var $85=HEAP[$84]; //@line 696 "bytesio.c"
        var $86=$85+12; //@line 696 "bytesio.c"
        var $87=HEAP[$86]; //@line 696 "bytesio.c"
        var $88=HEAP[_PyExc_TypeError]; //@line 696 "bytesio.c"
        var $89=_PyErr_Format($88, __str2288, allocate([$87,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 696 "bytesio.c"
        $0=0; //@line 699 "bytesio.c"
        __label__ = 27; break; //@line 699 "bytesio.c"
      case 13: // $bb12
        var $90=HEAP[_PyExc_OverflowError]; //@line 701 "bytesio.c"
        var $91=$position_obj; //@line 701 "bytesio.c"
        var $92=_PyNumber_AsSsize_t($91, $90); //@line 701 "bytesio.c"
        $pos=$92; //@line 701 "bytesio.c"
        var $93=$pos; //@line 702 "bytesio.c"
        var $94=($93)==-1; //@line 702 "bytesio.c"
        if ($94) { __lastLabel__ = 13; __label__ = 14; break; } else { __lastLabel__ = 13; __label__ = 17; break; } //@line 702 "bytesio.c"
      case 14: // $bb13
        var $95=_PyErr_Occurred(); //@line 702 "bytesio.c"
        var $96=($95)!=0; //@line 702 "bytesio.c"
        if ($96) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 702 "bytesio.c"
      case 15: // $bb14
        $0=0; //@line 703 "bytesio.c"
        __label__ = 27; break; //@line 703 "bytesio.c"
      case 16: // $bb15thread_pre_split
        var $_pr=$pos;
        __lastLabel__ = 16; __label__ = 17; break;
      case 17: // $bb15
        var $97=__lastLabel__ == 16 ? $_pr : ($93);
        var $98=($97) < 0; //@line 704 "bytesio.c"
        if ($98) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 704 "bytesio.c"
      case 18: // $bb16
        var $99=HEAP[_PyExc_ValueError]; //@line 705 "bytesio.c"
        _PyErr_SetString($99, __str2389); //@line 705 "bytesio.c"
        $0=0; //@line 707 "bytesio.c"
        __label__ = 27; break; //@line 707 "bytesio.c"
      case 19: // $bb17
        var $100=$self_addr; //@line 709 "bytesio.c"
        var $101=$100+12; //@line 709 "bytesio.c"
        var $102=$pos; //@line 709 "bytesio.c"
        HEAP[$101]=$102; //@line 709 "bytesio.c"
        var $103=$state_addr; //@line 712 "bytesio.c"
        var $104=$103; //@line 712 "bytesio.c"
        var $105=$104+12; //@line 712 "bytesio.c"
        var $106=$105+8; //@line 712 "bytesio.c"
        var $107=HEAP[$106]; //@line 712 "bytesio.c"
        $dict=$107; //@line 712 "bytesio.c"
        var $108=$dict; //@line 713 "bytesio.c"
        var $109=($108)!=(__Py_NoneStruct); //@line 713 "bytesio.c"
        if ($109) { __label__ = 20; break; } else { __label__ = 26; break; } //@line 713 "bytesio.c"
      case 20: // $bb18
        var $110=$dict; //@line 714 "bytesio.c"
        var $111=$110+4; //@line 714 "bytesio.c"
        var $112=HEAP[$111]; //@line 714 "bytesio.c"
        var $113=$112+84; //@line 714 "bytesio.c"
        var $114=HEAP[$113]; //@line 714 "bytesio.c"
        var $115=($114) & 536870912; //@line 714 "bytesio.c"
        var $116=($115)==0; //@line 714 "bytesio.c"
        if ($116) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 714 "bytesio.c"
      case 21: // $bb19
        var $117=$dict; //@line 715 "bytesio.c"
        var $118=$117+4; //@line 715 "bytesio.c"
        var $119=HEAP[$118]; //@line 715 "bytesio.c"
        var $120=$119+12; //@line 715 "bytesio.c"
        var $121=HEAP[$120]; //@line 715 "bytesio.c"
        var $122=HEAP[_PyExc_TypeError]; //@line 715 "bytesio.c"
        var $123=_PyErr_Format($122, __str2490, allocate([$121,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 715 "bytesio.c"
        $0=0; //@line 718 "bytesio.c"
        __label__ = 27; break; //@line 718 "bytesio.c"
      case 22: // $bb20
        var $124=$self_addr; //@line 720 "bytesio.c"
        var $125=$124+24; //@line 720 "bytesio.c"
        var $126=HEAP[$125]; //@line 720 "bytesio.c"
        var $127=($126)!=0; //@line 720 "bytesio.c"
        if ($127) { __label__ = 23; break; } else { __label__ = 25; break; } //@line 720 "bytesio.c"
      case 23: // $bb21
        var $128=$self_addr; //@line 723 "bytesio.c"
        var $129=$128+24; //@line 723 "bytesio.c"
        var $130=HEAP[$129]; //@line 723 "bytesio.c"
        var $131=$dict; //@line 723 "bytesio.c"
        var $132=_PyDict_Update($130, $131); //@line 723 "bytesio.c"
        var $133=($132) < 0; //@line 723 "bytesio.c"
        if ($133) { __label__ = 24; break; } else { __label__ = 26; break; } //@line 723 "bytesio.c"
      case 24: // $bb22
        $0=0; //@line 724 "bytesio.c"
        __label__ = 27; break; //@line 724 "bytesio.c"
      case 25: // $bb24
        var $134=$dict; //@line 727 "bytesio.c"
        var $135=$134; //@line 727 "bytesio.c"
        var $136=HEAP[$135]; //@line 727 "bytesio.c"
        var $137=($136) + 1; //@line 727 "bytesio.c"
        var $138=$dict; //@line 727 "bytesio.c"
        var $139=$138; //@line 727 "bytesio.c"
        HEAP[$139]=$137; //@line 727 "bytesio.c"
        var $140=$self_addr; //@line 728 "bytesio.c"
        var $141=$140+24; //@line 728 "bytesio.c"
        var $142=$dict; //@line 728 "bytesio.c"
        HEAP[$141]=$142; //@line 728 "bytesio.c"
        __label__ = 26; break; //@line 728 "bytesio.c"
      case 26: // $bb25
        var $143=HEAP[__Py_NoneStruct]; //@line 732 "bytesio.c"
        var $144=($143) + 1; //@line 732 "bytesio.c"
        HEAP[__Py_NoneStruct]=$144; //@line 732 "bytesio.c"
        $0=__Py_NoneStruct; //@line 732 "bytesio.c"
        __label__ = 27; break; //@line 732 "bytesio.c"
      case 27: // $bb26
        var $145=$0; //@line 677 "bytesio.c"
        $retval=$145; //@line 677 "bytesio.c"
        var $retval27=$retval; //@line 677 "bytesio.c"
        ;
        return $retval27; //@line 677 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_dealloc($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $g;
        var $_py_tmp;
        $self_addr=$self;
        var $0=$self_addr; //@line 738 "bytesio.c"
        var $1=$0; //@line 738 "bytesio.c"
        var $2=$1+-12; //@line 738 "bytesio.c"
        $g=$2; //@line 738 "bytesio.c"
        var $3=$g; //@line 738 "bytesio.c"
        var $4=$3; //@line 738 "bytesio.c"
        var $5=$4+8; //@line 738 "bytesio.c"
        var $6=HEAP[$5]; //@line 738 "bytesio.c"
        var $7=($6)==-2; //@line 738 "bytesio.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 738 "bytesio.c"
      case 1: // $bb
        ___assert_fail(__str9, __str167, 738, ___PRETTY_FUNCTION___9218); //@line 738 "bytesio.c"
        throw "Reached an unreachable!" //@line 738 "bytesio.c"
      case 2: // $bb1
        var $8=$g; //@line 738 "bytesio.c"
        var $9=$8; //@line 738 "bytesio.c"
        var $10=$9+8; //@line 738 "bytesio.c"
        HEAP[$10]=-2; //@line 738 "bytesio.c"
        var $11=$g; //@line 738 "bytesio.c"
        var $12=$11; //@line 738 "bytesio.c"
        var $13=$12+4; //@line 738 "bytesio.c"
        var $14=HEAP[$13]; //@line 738 "bytesio.c"
        var $15=$g; //@line 738 "bytesio.c"
        var $16=$15; //@line 738 "bytesio.c"
        var $17=$16; //@line 738 "bytesio.c"
        var $18=HEAP[$17]; //@line 738 "bytesio.c"
        var $19=$14; //@line 738 "bytesio.c"
        var $20=$19; //@line 738 "bytesio.c"
        HEAP[$20]=$18; //@line 738 "bytesio.c"
        var $21=$g; //@line 738 "bytesio.c"
        var $22=$21; //@line 738 "bytesio.c"
        var $23=$22; //@line 738 "bytesio.c"
        var $24=HEAP[$23]; //@line 738 "bytesio.c"
        var $25=$g; //@line 738 "bytesio.c"
        var $26=$25; //@line 738 "bytesio.c"
        var $27=$26+4; //@line 738 "bytesio.c"
        var $28=HEAP[$27]; //@line 738 "bytesio.c"
        var $29=$24; //@line 738 "bytesio.c"
        var $30=$29+4; //@line 738 "bytesio.c"
        HEAP[$30]=$28; //@line 738 "bytesio.c"
        var $31=$g; //@line 738 "bytesio.c"
        var $32=$31; //@line 738 "bytesio.c"
        var $33=$32; //@line 738 "bytesio.c"
        HEAP[$33]=0; //@line 738 "bytesio.c"
        var $34=$self_addr; //@line 739 "bytesio.c"
        var $35=$34+8; //@line 739 "bytesio.c"
        var $36=HEAP[$35]; //@line 739 "bytesio.c"
        var $37=($36)!=0; //@line 739 "bytesio.c"
        if ($37) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 739 "bytesio.c"
      case 3: // $bb2
        var $38=$self_addr; //@line 740 "bytesio.c"
        var $39=$38+8; //@line 740 "bytesio.c"
        var $40=HEAP[$39]; //@line 740 "bytesio.c"
        _PyMem_Free($40); //@line 740 "bytesio.c"
        var $41=$self_addr; //@line 741 "bytesio.c"
        var $42=$41+8; //@line 741 "bytesio.c"
        HEAP[$42]=0; //@line 741 "bytesio.c"
        __label__ = 4; break; //@line 741 "bytesio.c"
      case 4: // $bb3
        var $43=$self_addr; //@line 743 "bytesio.c"
        var $44=$43+24; //@line 743 "bytesio.c"
        var $45=HEAP[$44]; //@line 743 "bytesio.c"
        var $46=($45)!=0; //@line 743 "bytesio.c"
        if ($46) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 743 "bytesio.c"
      case 5: // $bb4
        var $47=$self_addr; //@line 743 "bytesio.c"
        var $48=$47+24; //@line 743 "bytesio.c"
        var $49=HEAP[$48]; //@line 743 "bytesio.c"
        $_py_tmp=$49; //@line 743 "bytesio.c"
        var $50=$self_addr; //@line 743 "bytesio.c"
        var $51=$50+24; //@line 743 "bytesio.c"
        HEAP[$51]=0; //@line 743 "bytesio.c"
        var $52=$_py_tmp; //@line 743 "bytesio.c"
        var $53=$52; //@line 743 "bytesio.c"
        var $54=HEAP[$53]; //@line 743 "bytesio.c"
        var $55=($54) - 1; //@line 743 "bytesio.c"
        var $56=$_py_tmp; //@line 743 "bytesio.c"
        var $57=$56; //@line 743 "bytesio.c"
        HEAP[$57]=$55; //@line 743 "bytesio.c"
        var $58=$_py_tmp; //@line 743 "bytesio.c"
        var $59=$58; //@line 743 "bytesio.c"
        var $60=HEAP[$59]; //@line 743 "bytesio.c"
        var $61=($60)==0; //@line 743 "bytesio.c"
        if ($61) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 743 "bytesio.c"
      case 6: // $bb5
        var $62=$_py_tmp; //@line 743 "bytesio.c"
        var $63=$62+4; //@line 743 "bytesio.c"
        var $64=HEAP[$63]; //@line 743 "bytesio.c"
        var $65=$64+24; //@line 743 "bytesio.c"
        var $66=HEAP[$65]; //@line 743 "bytesio.c"
        var $67=$_py_tmp; //@line 743 "bytesio.c"
        FUNCTION_TABLE[$66]($67); //@line 743 "bytesio.c"
        __label__ = 7; break; //@line 743 "bytesio.c"
      case 7: // $bb6
        var $68=$self_addr; //@line 744 "bytesio.c"
        var $69=$68+28; //@line 744 "bytesio.c"
        var $70=HEAP[$69]; //@line 744 "bytesio.c"
        var $71=($70)!=0; //@line 744 "bytesio.c"
        if ($71) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 744 "bytesio.c"
      case 8: // $bb7
        var $72=$self_addr; //@line 745 "bytesio.c"
        var $73=$72; //@line 745 "bytesio.c"
        _PyObject_ClearWeakRefs($73); //@line 745 "bytesio.c"
        __label__ = 9; break; //@line 745 "bytesio.c"
      case 9: // $bb8
        var $74=$self_addr; //@line 746 "bytesio.c"
        var $75=$74; //@line 746 "bytesio.c"
        var $76=$75+4; //@line 746 "bytesio.c"
        var $77=HEAP[$76]; //@line 746 "bytesio.c"
        var $78=$77+160; //@line 746 "bytesio.c"
        var $79=HEAP[$78]; //@line 746 "bytesio.c"
        var $80=$self_addr; //@line 746 "bytesio.c"
        var $81=$80; //@line 746 "bytesio.c"
        FUNCTION_TABLE[$79]($81); //@line 746 "bytesio.c"
        ;
        return; //@line 747 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_new($type, $args, $kwds) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $type_addr;
        var $args_addr;
        var $kwds_addr;
        var $retval;
        var $0;
        var $self;
        $type_addr=$type;
        $args_addr=$args;
        $kwds_addr=$kwds;
        var $1=$type_addr; //@line 754 "bytesio.c"
        var $2=($1)==0; //@line 754 "bytesio.c"
        if ($2) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 754 "bytesio.c"
      case 1: // $bb
        var $3=$type_addr; //@line 754 "bytesio.c"
        var $4=$3+152; //@line 754 "bytesio.c"
        var $5=HEAP[$4]; //@line 754 "bytesio.c"
        var $6=($5)==0; //@line 754 "bytesio.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 754 "bytesio.c"
      case 2: // $bb1
        ___assert_fail(__str2692, __str167, 754, ___PRETTY_FUNCTION___9255); //@line 754 "bytesio.c"
        throw "Reached an unreachable!" //@line 754 "bytesio.c"
      case 3: // $bb2
        var $7=$type_addr; //@line 755 "bytesio.c"
        var $8=$7+152; //@line 755 "bytesio.c"
        var $9=HEAP[$8]; //@line 755 "bytesio.c"
        var $10=$type_addr; //@line 755 "bytesio.c"
        var $11=FUNCTION_TABLE[$9]($10, 0); //@line 755 "bytesio.c"
        var $12=$11; //@line 755 "bytesio.c"
        $self=$12; //@line 755 "bytesio.c"
        var $13=$self; //@line 756 "bytesio.c"
        var $14=($13)==0; //@line 756 "bytesio.c"
        if ($14) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 756 "bytesio.c"
      case 4: // $bb3
        $0=0; //@line 757 "bytesio.c"
        __label__ = 10; break; //@line 757 "bytesio.c"
      case 5: // $bb4
        var $15=_PyMem_Malloc(0); //@line 762 "bytesio.c"
        var $16=$self; //@line 762 "bytesio.c"
        var $17=$16+8; //@line 762 "bytesio.c"
        HEAP[$17]=$15; //@line 762 "bytesio.c"
        var $18=$self; //@line 763 "bytesio.c"
        var $19=$18+8; //@line 763 "bytesio.c"
        var $20=HEAP[$19]; //@line 763 "bytesio.c"
        var $21=($20)==0; //@line 763 "bytesio.c"
        var $22=$self; //@line 764 "bytesio.c"
        var $23=$22; //@line 764 "bytesio.c"
        if ($21) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 763 "bytesio.c"
      case 6: // $bb5
        var $24=$23; //@line 764 "bytesio.c"
        var $25=HEAP[$24]; //@line 764 "bytesio.c"
        var $26=($25) - 1; //@line 764 "bytesio.c"
        var $27=$23; //@line 764 "bytesio.c"
        HEAP[$27]=$26; //@line 764 "bytesio.c"
        var $28=$23; //@line 764 "bytesio.c"
        var $29=HEAP[$28]; //@line 764 "bytesio.c"
        var $30=($29)==0; //@line 764 "bytesio.c"
        if ($30) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 764 "bytesio.c"
      case 7: // $bb6
        var $31=$self; //@line 764 "bytesio.c"
        var $32=$31; //@line 764 "bytesio.c"
        var $33=$32+4; //@line 764 "bytesio.c"
        var $34=HEAP[$33]; //@line 764 "bytesio.c"
        var $35=$34+24; //@line 764 "bytesio.c"
        var $36=HEAP[$35]; //@line 764 "bytesio.c"
        var $37=$self; //@line 764 "bytesio.c"
        var $38=$37; //@line 764 "bytesio.c"
        FUNCTION_TABLE[$36]($38); //@line 764 "bytesio.c"
        __label__ = 8; break; //@line 764 "bytesio.c"
      case 8: // $bb7
        var $39=_PyErr_NoMemory(); //@line 765 "bytesio.c"
        $0=$39; //@line 765 "bytesio.c"
        __label__ = 10; break; //@line 765 "bytesio.c"
      case 9: // $bb8
        $0=$23; //@line 768 "bytesio.c"
        __label__ = 10; break; //@line 768 "bytesio.c"
      case 10: // $bb9
        var $40=$0; //@line 757 "bytesio.c"
        $retval=$40; //@line 757 "bytesio.c"
        var $retval10=$retval; //@line 757 "bytesio.c"
        ;
        return $retval10; //@line 757 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_init($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $kwds_addr;
        var $retval;
        var $0;
        var $kwlist=__stackBase__;
        var $initvalue=__stackBase__+8;
        var $res;
        $self_addr=$self;
        $args_addr=$args;
        $kwds_addr=$kwds;
        var $1=$kwlist; //@line 774 "bytesio.c"
        HEAP[$1]=__str2793; //@line 774 "bytesio.c"
        var $2=$kwlist+4; //@line 774 "bytesio.c"
        HEAP[$2]=0; //@line 774 "bytesio.c"
        HEAP[$initvalue]=0; //@line 775 "bytesio.c"
        var $3=$args_addr; //@line 777 "bytesio.c"
        var $4=$kwds_addr; //@line 777 "bytesio.c"
        var $kwlist1=$kwlist; //@line 777 "bytesio.c"
        var $5=_PyArg_ParseTupleAndKeywords($3, $4, __str2894, $kwlist1, allocate([$initvalue,0,0,0], ["%struct.PyObject**",0,0,0], ALLOC_STACK)); //@line 777 "bytesio.c"
        var $6=($5)==0; //@line 777 "bytesio.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 777 "bytesio.c"
      case 1: // $bb
        $0=-1; //@line 779 "bytesio.c"
        __label__ = 9; break; //@line 779 "bytesio.c"
      case 2: // $bb2
        var $7=$self_addr; //@line 782 "bytesio.c"
        var $8=$7+16; //@line 782 "bytesio.c"
        HEAP[$8]=0; //@line 782 "bytesio.c"
        var $9=$self_addr; //@line 783 "bytesio.c"
        var $10=$9+12; //@line 783 "bytesio.c"
        HEAP[$10]=0; //@line 783 "bytesio.c"
        var $11=HEAP[$initvalue]; //@line 785 "bytesio.c"
        var $12=($11)!=0; //@line 785 "bytesio.c"
        var $13=HEAP[$initvalue]; //@line 785 "bytesio.c"
        var $14=($13)!=(__Py_NoneStruct); //@line 785 "bytesio.c"
        var $or_cond=($12) & ($14);
        if ($or_cond) { __label__ = 3; break; } else { __label__ = 8; break; } //@line 785 "bytesio.c"
      case 3: // $bb4
        var $15=HEAP[$initvalue]; //@line 787 "bytesio.c"
        var $16=$self_addr; //@line 787 "bytesio.c"
        var $17=_bytesio_write($16, $15); //@line 787 "bytesio.c"
        $res=$17; //@line 787 "bytesio.c"
        var $18=$res; //@line 788 "bytesio.c"
        var $19=($18)==0; //@line 788 "bytesio.c"
        if ($19) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 788 "bytesio.c"
      case 4: // $bb5
        $0=-1; //@line 789 "bytesio.c"
        __label__ = 9; break; //@line 789 "bytesio.c"
      case 5: // $bb6
        var $20=$res; //@line 790 "bytesio.c"
        var $21=$20; //@line 790 "bytesio.c"
        var $22=HEAP[$21]; //@line 790 "bytesio.c"
        var $23=($22) - 1; //@line 790 "bytesio.c"
        var $24=$res; //@line 790 "bytesio.c"
        var $25=$24; //@line 790 "bytesio.c"
        HEAP[$25]=$23; //@line 790 "bytesio.c"
        var $26=$res; //@line 790 "bytesio.c"
        var $27=$26; //@line 790 "bytesio.c"
        var $28=HEAP[$27]; //@line 790 "bytesio.c"
        var $29=($28)==0; //@line 790 "bytesio.c"
        if ($29) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 790 "bytesio.c"
      case 6: // $bb7
        var $30=$res; //@line 790 "bytesio.c"
        var $31=$30+4; //@line 790 "bytesio.c"
        var $32=HEAP[$31]; //@line 790 "bytesio.c"
        var $33=$32+24; //@line 790 "bytesio.c"
        var $34=HEAP[$33]; //@line 790 "bytesio.c"
        var $35=$res; //@line 790 "bytesio.c"
        FUNCTION_TABLE[$34]($35); //@line 790 "bytesio.c"
        __label__ = 7; break; //@line 790 "bytesio.c"
      case 7: // $bb8
        var $36=$self_addr; //@line 791 "bytesio.c"
        var $37=$36+12; //@line 791 "bytesio.c"
        HEAP[$37]=0; //@line 791 "bytesio.c"
        __label__ = 8; break; //@line 791 "bytesio.c"
      case 8: // $bb9
        $0=0; //@line 794 "bytesio.c"
        __label__ = 9; break; //@line 794 "bytesio.c"
      case 9: // $bb10
        var $38=$0; //@line 779 "bytesio.c"
        $retval=$38; //@line 779 "bytesio.c"
        var $retval11=$retval; //@line 779 "bytesio.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 779 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_traverse($self, $visit, $arg) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $visit_addr;
        var $arg_addr;
        var $retval;
        var $0;
        var $vret;
        $self_addr=$self;
        $visit_addr=$visit;
        $arg_addr=$arg;
        var $1=$self_addr; //@line 800 "bytesio.c"
        var $2=$1+24; //@line 800 "bytesio.c"
        var $3=HEAP[$2]; //@line 800 "bytesio.c"
        var $4=($3)!=0; //@line 800 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 800 "bytesio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 800 "bytesio.c"
        var $6=$5+24; //@line 800 "bytesio.c"
        var $7=HEAP[$6]; //@line 800 "bytesio.c"
        var $8=$visit_addr; //@line 800 "bytesio.c"
        var $9=$arg_addr; //@line 800 "bytesio.c"
        var $10=FUNCTION_TABLE[$8]($7, $9); //@line 800 "bytesio.c"
        $vret=$10; //@line 800 "bytesio.c"
        var $11=$vret; //@line 800 "bytesio.c"
        var $12=($11)!=0; //@line 800 "bytesio.c"
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 800 "bytesio.c"
      case 2: // $bb1
        var $13=$vret; //@line 800 "bytesio.c"
        $0=$13; //@line 800 "bytesio.c"
        __label__ = 4; break; //@line 800 "bytesio.c"
      case 3: // $bb2
        $0=0; //@line 801 "bytesio.c"
        __label__ = 4; break; //@line 801 "bytesio.c"
      case 4: // $bb3
        var $14=$0; //@line 800 "bytesio.c"
        $retval=$14; //@line 800 "bytesio.c"
        var $retval4=$retval; //@line 800 "bytesio.c"
        ;
        return $retval4; //@line 800 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _bytesio_clear($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $_py_tmp;
        $self_addr=$self;
        var $1=$self_addr; //@line 807 "bytesio.c"
        var $2=$1+24; //@line 807 "bytesio.c"
        var $3=HEAP[$2]; //@line 807 "bytesio.c"
        var $4=($3)!=0; //@line 807 "bytesio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 807 "bytesio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 807 "bytesio.c"
        var $6=$5+24; //@line 807 "bytesio.c"
        var $7=HEAP[$6]; //@line 807 "bytesio.c"
        $_py_tmp=$7; //@line 807 "bytesio.c"
        var $8=$self_addr; //@line 807 "bytesio.c"
        var $9=$8+24; //@line 807 "bytesio.c"
        HEAP[$9]=0; //@line 807 "bytesio.c"
        var $10=$_py_tmp; //@line 807 "bytesio.c"
        var $11=$10; //@line 807 "bytesio.c"
        var $12=HEAP[$11]; //@line 807 "bytesio.c"
        var $13=($12) - 1; //@line 807 "bytesio.c"
        var $14=$_py_tmp; //@line 807 "bytesio.c"
        var $15=$14; //@line 807 "bytesio.c"
        HEAP[$15]=$13; //@line 807 "bytesio.c"
        var $16=$_py_tmp; //@line 807 "bytesio.c"
        var $17=$16; //@line 807 "bytesio.c"
        var $18=HEAP[$17]; //@line 807 "bytesio.c"
        var $19=($18)==0; //@line 807 "bytesio.c"
        if ($19) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 807 "bytesio.c"
      case 2: // $bb1
        var $20=$_py_tmp; //@line 807 "bytesio.c"
        var $21=$20+4; //@line 807 "bytesio.c"
        var $22=HEAP[$21]; //@line 807 "bytesio.c"
        var $23=$22+24; //@line 807 "bytesio.c"
        var $24=HEAP[$23]; //@line 807 "bytesio.c"
        var $25=$_py_tmp; //@line 807 "bytesio.c"
        FUNCTION_TABLE[$24]($25); //@line 807 "bytesio.c"
        __label__ = 3; break; //@line 807 "bytesio.c"
      case 3: // $bb2
        $0=0; //@line 808 "bytesio.c"
        var $26=$0; //@line 808 "bytesio.c"
        $retval=$26; //@line 808 "bytesio.c"
        var $retval3=$retval; //@line 808 "bytesio.c"
        ;
        return $retval3; //@line 808 "bytesio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __PyFileIO_closed($self) {
    ;
    var __label__;
  
    var $self_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    var $1=$self_addr; //@line 69 "fileio.c"
    var $2=$1; //@line 69 "fileio.c"
    var $3=$2+8; //@line 69 "fileio.c"
    var $4=HEAP[$3]; //@line 69 "fileio.c"
    var $5=($4) < 0; //@line 69 "fileio.c"
    var $6=($5); //@line 69 "fileio.c"
    $0=$6; //@line 69 "fileio.c"
    var $7=$0; //@line 69 "fileio.c"
    $retval=$7; //@line 69 "fileio.c"
    var $retval1=$retval; //@line 69 "fileio.c"
    ;
    return $retval1; //@line 69 "fileio.c"
  }
  

  function _internal_close($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $err;
        var $save_errno;
        var $fd;
        $self_addr=$self;
        $err=0; //@line 81 "fileio.c"
        $save_errno=0; //@line 82 "fileio.c"
        var $1=$self_addr; //@line 83 "fileio.c"
        var $2=$1+8; //@line 83 "fileio.c"
        var $3=HEAP[$2]; //@line 83 "fileio.c"
        var $4=($3) >= 0; //@line 83 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 83 "fileio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 84 "fileio.c"
        var $6=$5+8; //@line 84 "fileio.c"
        var $7=HEAP[$6]; //@line 84 "fileio.c"
        $fd=$7; //@line 84 "fileio.c"
        var $8=$self_addr; //@line 85 "fileio.c"
        var $9=$8+8; //@line 85 "fileio.c"
        HEAP[$9]=-1; //@line 85 "fileio.c"
        var $10=$fd; //@line 89 "fileio.c"
        var $11=_close($10); //@line 89 "fileio.c"
        $err=$11; //@line 89 "fileio.c"
        var $12=$err; //@line 90 "fileio.c"
        var $13=($12) < 0; //@line 90 "fileio.c"
        if ($13) { __label__ = 2; break; } else { __label__ = 5; break; } //@line 90 "fileio.c"
      case 2: // $bb1
        var $14=___errno_location(); //@line 91 "fileio.c"
        var $15=HEAP[$14]; //@line 91 "fileio.c"
        $save_errno=$15; //@line 91 "fileio.c"
        __label__ = 3; break; //@line 91 "fileio.c"
      case 3: // $bb2
        var $_pr=$err;
        var $16=($_pr) < 0; //@line 98 "fileio.c"
        if ($16) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 98 "fileio.c"
      case 4: // $bb3
        var $17=___errno_location(); //@line 99 "fileio.c"
        var $18=$save_errno; //@line 99 "fileio.c"
        HEAP[$17]=$18; //@line 99 "fileio.c"
        var $19=HEAP[_PyExc_IOError]; //@line 100 "fileio.c"
        var $20=_PyErr_SetFromErrno($19); //@line 100 "fileio.c"
        $0=-1; //@line 101 "fileio.c"
        __label__ = 6; break; //@line 101 "fileio.c"
      case 5: // $bb4
        $0=0; //@line 103 "fileio.c"
        __label__ = 6; break; //@line 103 "fileio.c"
      case 6: // $bb5
        var $21=$0; //@line 101 "fileio.c"
        $retval=$21; //@line 101 "fileio.c"
        var $retval6=$retval; //@line 101 "fileio.c"
        ;
        return $retval6; //@line 101 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_close($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        var $1=$self_addr; //@line 109 "fileio.c"
        var $2=$1+12; //@line 109 "fileio.c"
        var $3=HEAP[$2]; //@line 109 "fileio.c"
        var $4=($3) << 27; //@line 109 "fileio.c"
        var $5=($4) >>> 31; //@line 109 "fileio.c"
        var $6=((($5)) & 1); //@line 109 "fileio.c"
        var $7=($6)==0; //@line 109 "fileio.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 109 "fileio.c"
      case 1: // $bb
        var $8=$self_addr; //@line 110 "fileio.c"
        var $9=$8+8; //@line 110 "fileio.c"
        HEAP[$9]=-1; //@line 110 "fileio.c"
        var $10=HEAP[__Py_NoneStruct]; //@line 111 "fileio.c"
        var $11=($10) + 1; //@line 111 "fileio.c"
        HEAP[__Py_NoneStruct]=$11; //@line 111 "fileio.c"
        $0=__Py_NoneStruct; //@line 111 "fileio.c"
        __label__ = 5; break; //@line 111 "fileio.c"
      case 2: // $bb1
        var $12=___errno_location(); //@line 113 "fileio.c"
        var $13=$self_addr; //@line 113 "fileio.c"
        var $14=_internal_close($13); //@line 113 "fileio.c"
        HEAP[$12]=$14; //@line 113 "fileio.c"
        var $15=___errno_location(); //@line 114 "fileio.c"
        var $16=HEAP[$15]; //@line 114 "fileio.c"
        var $17=($16) < 0; //@line 114 "fileio.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 114 "fileio.c"
      case 3: // $bb2
        $0=0; //@line 115 "fileio.c"
        __label__ = 5; break; //@line 115 "fileio.c"
      case 4: // $bb3
        var $18=$self_addr; //@line 117 "fileio.c"
        var $19=__PyObject_CallMethod_SizeT(_PyRawIOBase_Type, __str117, __str1118, allocate([$18,0,0,0], ["%struct.fileio*",0,0,0], ALLOC_STACK)); //@line 117 "fileio.c"
        $0=$19; //@line 117 "fileio.c"
        __label__ = 5; break; //@line 117 "fileio.c"
      case 5: // $bb4
        var $20=$0; //@line 111 "fileio.c"
        $retval=$20; //@line 111 "fileio.c"
        var $retval5=$retval; //@line 111 "fileio.c"
        ;
        return $retval5; //@line 111 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_new($type, $args, $kwds) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $type_addr;
        var $args_addr;
        var $kwds_addr;
        var $retval;
        var $0;
        var $self;
        $type_addr=$type;
        $args_addr=$args;
        $kwds_addr=$kwds;
        var $1=$type_addr; //@line 126 "fileio.c"
        var $2=($1)==0; //@line 126 "fileio.c"
        if ($2) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 126 "fileio.c"
      case 1: // $bb
        var $3=$type_addr; //@line 126 "fileio.c"
        var $4=$3+152; //@line 126 "fileio.c"
        var $5=HEAP[$4]; //@line 126 "fileio.c"
        var $6=($5)==0; //@line 126 "fileio.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 126 "fileio.c"
      case 2: // $bb1
        ___assert_fail(__str2119, __str3120, 126, ___PRETTY_FUNCTION___8576); //@line 126 "fileio.c"
        throw "Reached an unreachable!" //@line 126 "fileio.c"
      case 3: // $bb2
        var $7=$type_addr; //@line 128 "fileio.c"
        var $8=$7+152; //@line 128 "fileio.c"
        var $9=HEAP[$8]; //@line 128 "fileio.c"
        var $10=$type_addr; //@line 128 "fileio.c"
        var $11=FUNCTION_TABLE[$9]($10, 0); //@line 128 "fileio.c"
        var $12=$11; //@line 128 "fileio.c"
        $self=$12; //@line 128 "fileio.c"
        var $13=$self; //@line 129 "fileio.c"
        var $14=($13)!=0; //@line 129 "fileio.c"
        if ($14) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 129 "fileio.c"
      case 4: // $bb3
        var $15=$self; //@line 130 "fileio.c"
        var $16=$15+8; //@line 130 "fileio.c"
        HEAP[$16]=-1; //@line 130 "fileio.c"
        var $17=$self; //@line 131 "fileio.c"
        var $18=$17+12; //@line 131 "fileio.c"
        var $19=HEAP[$18]; //@line 131 "fileio.c"
        var $20=($19) & -2; //@line 131 "fileio.c"
        HEAP[$18]=$20; //@line 131 "fileio.c"
        var $21=$self; //@line 132 "fileio.c"
        var $22=$21+12; //@line 132 "fileio.c"
        var $23=HEAP[$22]; //@line 132 "fileio.c"
        var $24=($23) & -3; //@line 132 "fileio.c"
        HEAP[$22]=$24; //@line 132 "fileio.c"
        var $25=$self; //@line 133 "fileio.c"
        var $26=$25+12; //@line 133 "fileio.c"
        var $27=HEAP[$26]; //@line 133 "fileio.c"
        var $28=($27) & -13; //@line 133 "fileio.c"
        var $29=($28) | 12; //@line 133 "fileio.c"
        HEAP[$26]=$29; //@line 133 "fileio.c"
        var $30=$self; //@line 134 "fileio.c"
        var $31=$30+12; //@line 134 "fileio.c"
        var $32=HEAP[$31]; //@line 134 "fileio.c"
        var $33=($32) & -17; //@line 134 "fileio.c"
        var $34=($33) | 16; //@line 134 "fileio.c"
        HEAP[$31]=$34; //@line 134 "fileio.c"
        var $35=$self; //@line 135 "fileio.c"
        var $36=$35+16; //@line 135 "fileio.c"
        HEAP[$36]=0; //@line 135 "fileio.c"
        __label__ = 5; break; //@line 135 "fileio.c"
      case 5: // $bb4
        var $37=$self; //@line 138 "fileio.c"
        var $38=$37; //@line 138 "fileio.c"
        $0=$38; //@line 138 "fileio.c"
        var $39=$0; //@line 138 "fileio.c"
        $retval=$39; //@line 138 "fileio.c"
        var $retval5=$retval; //@line 138 "fileio.c"
        ;
        return $retval5; //@line 138 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _dircheck($self, $name) {
    var __stackBase__  = STACKTOP; STACKTOP += 96; _memset(__stackBase__, 0, 96);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $name_addr;
        var $retval;
        var $0;
        var $buf=__stackBase__;
        var $msg;
        var $exc;
        $self_addr=$self;
        $name_addr=$name;
        var $1=$self_addr; //@line 150 "fileio.c"
        var $2=$1+8; //@line 150 "fileio.c"
        var $3=HEAP[$2]; //@line 150 "fileio.c"
        var $4=($3) < 0; //@line 150 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 150 "fileio.c"
      case 1: // $bb
        $0=0; //@line 151 "fileio.c"
        __label__ = 11; break; //@line 151 "fileio.c"
      case 2: // $bb1
        var $5=$self_addr; //@line 152 "fileio.c"
        var $6=$5+8; //@line 152 "fileio.c"
        var $7=HEAP[$6]; //@line 152 "fileio.c"
        var $8=___01fstat64_($7, $buf); //@line 152 "fileio.c"
        var $9=($8)==0; //@line 152 "fileio.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 10; break; } //@line 152 "fileio.c"
      case 3: // $bb2
        var $10=$buf+16; //@line 152 "fileio.c"
        var $11=HEAP[$10]; //@line 152 "fileio.c"
        var $12=($11) & 61440; //@line 152 "fileio.c"
        var $13=($12)==16384; //@line 152 "fileio.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 10; break; } //@line 152 "fileio.c"
      case 4: // $bb3
        var $14=_strerror(21); //@line 153 "fileio.c"
        $msg=$14; //@line 153 "fileio.c"
        var $15=$self_addr; //@line 155 "fileio.c"
        var $16=_internal_close($15); //@line 155 "fileio.c"
        var $17=($16)!=0; //@line 155 "fileio.c"
        if ($17) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 155 "fileio.c"
      case 5: // $bb4
        $0=-1; //@line 156 "fileio.c"
        __label__ = 11; break; //@line 156 "fileio.c"
      case 6: // $bb5
        var $18=HEAP[_PyExc_IOError]; //@line 158 "fileio.c"
        var $19=$msg; //@line 158 "fileio.c"
        var $20=$name_addr; //@line 158 "fileio.c"
        var $21=__PyObject_CallFunction_SizeT($18, __str4121, allocate([21,0,0,0,$19,0,0,0,$20,0,0,0], ["i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 158 "fileio.c"
        $exc=$21; //@line 158 "fileio.c"
        var $22=HEAP[_PyExc_IOError]; //@line 160 "fileio.c"
        var $23=$exc; //@line 160 "fileio.c"
        _PyErr_SetObject($22, $23); //@line 160 "fileio.c"
        var $24=$exc; //@line 161 "fileio.c"
        var $25=($24)!=0; //@line 161 "fileio.c"
        if ($25) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 161 "fileio.c"
      case 7: // $bb6
        var $26=$exc; //@line 161 "fileio.c"
        var $27=$26; //@line 161 "fileio.c"
        var $28=HEAP[$27]; //@line 161 "fileio.c"
        var $29=($28) - 1; //@line 161 "fileio.c"
        var $30=$exc; //@line 161 "fileio.c"
        var $31=$30; //@line 161 "fileio.c"
        HEAP[$31]=$29; //@line 161 "fileio.c"
        var $32=$exc; //@line 161 "fileio.c"
        var $33=$32; //@line 161 "fileio.c"
        var $34=HEAP[$33]; //@line 161 "fileio.c"
        var $35=($34)==0; //@line 161 "fileio.c"
        if ($35) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 161 "fileio.c"
      case 8: // $bb7
        var $36=$exc; //@line 161 "fileio.c"
        var $37=$36+4; //@line 161 "fileio.c"
        var $38=HEAP[$37]; //@line 161 "fileio.c"
        var $39=$38+24; //@line 161 "fileio.c"
        var $40=HEAP[$39]; //@line 161 "fileio.c"
        var $41=$exc; //@line 161 "fileio.c"
        FUNCTION_TABLE[$40]($41); //@line 161 "fileio.c"
        __label__ = 9; break; //@line 161 "fileio.c"
      case 9: // $bb8
        $0=-1; //@line 162 "fileio.c"
        __label__ = 11; break; //@line 162 "fileio.c"
      case 10: // $bb9
        $0=0; //@line 165 "fileio.c"
        __label__ = 11; break; //@line 165 "fileio.c"
      case 11: // $bb10
        var $42=$0; //@line 151 "fileio.c"
        $retval=$42; //@line 151 "fileio.c"
        var $retval11=$retval; //@line 151 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 151 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _check_fd($fd) {
    var __stackBase__  = STACKTOP; STACKTOP += 96; _memset(__stackBase__, 0, 96);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $fd_addr;
        var $retval;
        var $0;
        var $buf=__stackBase__;
        var $exc;
        var $msg;
        $fd_addr=$fd;
        var $1=$fd_addr; //@line 173 "fileio.c"
        var $2=___01fstat64_($1, $buf); //@line 173 "fileio.c"
        var $3=($2) < 0; //@line 173 "fileio.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 6; break; } //@line 173 "fileio.c"
      case 1: // $bb
        var $4=___errno_location(); //@line 173 "fileio.c"
        var $5=HEAP[$4]; //@line 173 "fileio.c"
        var $6=($5)==9; //@line 173 "fileio.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 6; break; } //@line 173 "fileio.c"
      case 2: // $bb1
        var $7=_strerror(9); //@line 175 "fileio.c"
        $msg=$7; //@line 175 "fileio.c"
        var $8=HEAP[_PyExc_OSError]; //@line 176 "fileio.c"
        var $9=$msg; //@line 176 "fileio.c"
        var $10=__PyObject_CallFunction_SizeT($8, __str5122, allocate([9,0,0,0,$9,0,0,0], ["i32",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 176 "fileio.c"
        $exc=$10; //@line 176 "fileio.c"
        var $11=HEAP[_PyExc_OSError]; //@line 178 "fileio.c"
        var $12=$exc; //@line 178 "fileio.c"
        _PyErr_SetObject($11, $12); //@line 178 "fileio.c"
        var $13=$exc; //@line 179 "fileio.c"
        var $14=($13)!=0; //@line 179 "fileio.c"
        if ($14) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 179 "fileio.c"
      case 3: // $bb2
        var $15=$exc; //@line 179 "fileio.c"
        var $16=$15; //@line 179 "fileio.c"
        var $17=HEAP[$16]; //@line 179 "fileio.c"
        var $18=($17) - 1; //@line 179 "fileio.c"
        var $19=$exc; //@line 179 "fileio.c"
        var $20=$19; //@line 179 "fileio.c"
        HEAP[$20]=$18; //@line 179 "fileio.c"
        var $21=$exc; //@line 179 "fileio.c"
        var $22=$21; //@line 179 "fileio.c"
        var $23=HEAP[$22]; //@line 179 "fileio.c"
        var $24=($23)==0; //@line 179 "fileio.c"
        if ($24) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 179 "fileio.c"
      case 4: // $bb3
        var $25=$exc; //@line 179 "fileio.c"
        var $26=$25+4; //@line 179 "fileio.c"
        var $27=HEAP[$26]; //@line 179 "fileio.c"
        var $28=$27+24; //@line 179 "fileio.c"
        var $29=HEAP[$28]; //@line 179 "fileio.c"
        var $30=$exc; //@line 179 "fileio.c"
        FUNCTION_TABLE[$29]($30); //@line 179 "fileio.c"
        __label__ = 5; break; //@line 179 "fileio.c"
      case 5: // $bb4
        $0=-1; //@line 180 "fileio.c"
        __label__ = 7; break; //@line 180 "fileio.c"
      case 6: // $bb5
        $0=0; //@line 183 "fileio.c"
        __label__ = 7; break; //@line 183 "fileio.c"
      case 7: // $bb6
        var $31=$0; //@line 180 "fileio.c"
        $retval=$31; //@line 180 "fileio.c"
        var $retval7=$retval; //@line 180 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval7; //@line 180 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_init($oself, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $oself_addr;
        var $args_addr;
        var $kwds_addr;
        var $retval;
        var $0;
        var $self;
        var $name=__stackBase__;
        var $nameobj=__stackBase__+4;
        var $stringobj;
        var $mode=__stackBase__+8;
        var $s;
        var $ret;
        var $rwa;
        var $plus;
        var $append;
        var $flags;
        var $fd;
        var $closefd=__stackBase__+12;
        var $namelen=__stackBase__+16;
        var $u;
        var $pos;
        var $_py_tmp;
        $oself_addr=$oself;
        $args_addr=$args;
        $kwds_addr=$kwds;
        var $1=$oself_addr; //@line 190 "fileio.c"
        var $2=$1; //@line 190 "fileio.c"
        $self=$2; //@line 190 "fileio.c"
        HEAP[$name]=0; //@line 192 "fileio.c"
        $stringobj=0; //@line 193 "fileio.c"
        HEAP[$mode]=__str6123; //@line 194 "fileio.c"
        $ret=0; //@line 199 "fileio.c"
        $rwa=0; //@line 200 "fileio.c"
        $plus=0; //@line 200 "fileio.c"
        $append=0; //@line 200 "fileio.c"
        $flags=0; //@line 201 "fileio.c"
        $fd=-1; //@line 202 "fileio.c"
        HEAP[$closefd]=1; //@line 203 "fileio.c"
        var $3=$oself_addr; //@line 205 "fileio.c"
        var $4=$3+4; //@line 205 "fileio.c"
        var $5=HEAP[$4]; //@line 205 "fileio.c"
        var $6=($5)!=(_PyFileIO_Type); //@line 205 "fileio.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 205 "fileio.c"
      case 1: // $bb
        var $7=$oself_addr; //@line 205 "fileio.c"
        var $8=$7+4; //@line 205 "fileio.c"
        var $9=HEAP[$8]; //@line 205 "fileio.c"
        var $10=_PyType_IsSubtype($9, _PyFileIO_Type); //@line 205 "fileio.c"
        var $11=($10)==0; //@line 205 "fileio.c"
        if ($11) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 205 "fileio.c"
      case 2: // $bb1
        ___assert_fail(__str7124, __str3120, 205, ___PRETTY_FUNCTION___8670); //@line 205 "fileio.c"
        throw "Reached an unreachable!" //@line 205 "fileio.c"
      case 3: // $bb2
        var $12=$self; //@line 206 "fileio.c"
        var $13=$12+8; //@line 206 "fileio.c"
        var $14=HEAP[$13]; //@line 206 "fileio.c"
        var $15=($14) >= 0; //@line 206 "fileio.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 206 "fileio.c"
      case 4: // $bb3
        var $16=$self; //@line 208 "fileio.c"
        var $17=_internal_close($16); //@line 208 "fileio.c"
        var $18=($17) < 0; //@line 208 "fileio.c"
        if ($18) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 208 "fileio.c"
      case 5: // $bb4
        $0=-1; //@line 209 "fileio.c"
        __label__ = 71; break; //@line 209 "fileio.c"
      case 6: // $bb5
        var $19=$args_addr; //@line 212 "fileio.c"
        var $20=$kwds_addr; //@line 212 "fileio.c"
        var $21=__PyArg_ParseTupleAndKeywords_SizeT($19, $20, __str8125, _kwlist_8657, allocate([$nameobj,0,0,0,$mode,0,0,0,$closefd,0,0,0], ["%struct.PyObject**",0,0,0,"i8**",0,0,0,"i32*",0,0,0], ALLOC_STACK)); //@line 212 "fileio.c"
        var $22=($21)==0; //@line 212 "fileio.c"
        if ($22) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 212 "fileio.c"
      case 7: // $bb6
        $0=-1; //@line 214 "fileio.c"
        __label__ = 71; break; //@line 214 "fileio.c"
      case 8: // $bb7
        var $23=HEAP[$nameobj]; //@line 216 "fileio.c"
        var $24=$23+4; //@line 216 "fileio.c"
        var $25=HEAP[$24]; //@line 216 "fileio.c"
        var $26=($25)==(_PyFloat_Type); //@line 216 "fileio.c"
        if ($26) { __label__ = 10; break; } else { __label__ = 9; break; } //@line 216 "fileio.c"
      case 9: // $bb8
        var $27=HEAP[$nameobj]; //@line 216 "fileio.c"
        var $28=$27+4; //@line 216 "fileio.c"
        var $29=HEAP[$28]; //@line 216 "fileio.c"
        var $30=_PyType_IsSubtype($29, _PyFloat_Type); //@line 216 "fileio.c"
        var $31=($30)!=0; //@line 216 "fileio.c"
        if ($31) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 216 "fileio.c"
      case 10: // $bb9
        var $32=HEAP[_PyExc_TypeError]; //@line 217 "fileio.c"
        _PyErr_SetString($32, __str12129); //@line 217 "fileio.c"
        $0=-1; //@line 219 "fileio.c"
        __label__ = 71; break; //@line 219 "fileio.c"
      case 11: // $bb10
        var $33=HEAP[$nameobj]; //@line 222 "fileio.c"
        var $34=_PyLong_AsLong($33); //@line 222 "fileio.c"
        $fd=$34; //@line 222 "fileio.c"
        var $35=$fd; //@line 223 "fileio.c"
        var $36=($35) < 0; //@line 223 "fileio.c"
        if ($36) { __label__ = 12; break; } else { __label__ = 29; break; } //@line 223 "fileio.c"
      case 12: // $bb11
        var $37=_PyErr_Occurred(); //@line 224 "fileio.c"
        var $38=($37)==0; //@line 224 "fileio.c"
        if ($38) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 224 "fileio.c"
      case 13: // $bb12
        var $39=HEAP[_PyExc_ValueError]; //@line 225 "fileio.c"
        _PyErr_SetString($39, __str13130); //@line 225 "fileio.c"
        $0=-1; //@line 227 "fileio.c"
        __label__ = 71; break; //@line 227 "fileio.c"
      case 14: // $bb14
        _PyErr_Clear(); //@line 229 "fileio.c"
        var $_pr=$fd;
        var $40=($_pr) < 0; //@line 237 "fileio.c"
        if ($40) { __label__ = 15; break; } else { __label__ = 29; break; } //@line 237 "fileio.c"
      case 15: // $bb15
        var $41=HEAP[$nameobj]; //@line 239 "fileio.c"
        var $42=$41+4; //@line 239 "fileio.c"
        var $43=HEAP[$42]; //@line 239 "fileio.c"
        var $44=$43+84; //@line 239 "fileio.c"
        var $45=HEAP[$44]; //@line 239 "fileio.c"
        var $46=($45) & 134217728; //@line 239 "fileio.c"
        var $47=($46)!=0; //@line 239 "fileio.c"
        if ($47) { __label__ = 18; break; } else { __label__ = 16; break; } //@line 239 "fileio.c"
      case 16: // $bb16
        var $48=HEAP[$nameobj]; //@line 239 "fileio.c"
        var $49=$48+4; //@line 239 "fileio.c"
        var $50=HEAP[$49]; //@line 239 "fileio.c"
        var $51=($50)==(_PyByteArray_Type); //@line 239 "fileio.c"
        if ($51) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 239 "fileio.c"
      case 17: // $bb17
        var $52=HEAP[$nameobj]; //@line 239 "fileio.c"
        var $53=$52+4; //@line 239 "fileio.c"
        var $54=HEAP[$53]; //@line 239 "fileio.c"
        var $55=_PyType_IsSubtype($54, _PyByteArray_Type); //@line 239 "fileio.c"
        var $56=($55)!=0; //@line 239 "fileio.c"
        if ($56) { __label__ = 18; break; } else { __label__ = 20; break; } //@line 239 "fileio.c"
      case 18: // $bb18
        var $57=HEAP[$nameobj]; //@line 241 "fileio.c"
        var $58=_PyObject_AsCharBuffer($57, $name, $namelen); //@line 241 "fileio.c"
        var $59=($58) < 0; //@line 241 "fileio.c"
        if ($59) { __label__ = 19; break; } else { __label__ = 29; break; } //@line 241 "fileio.c"
      case 19: // $bb19
        $0=-1; //@line 242 "fileio.c"
        __label__ = 71; break; //@line 242 "fileio.c"
      case 20: // $bb21
        var $60=HEAP[$nameobj]; //@line 245 "fileio.c"
        var $61=_PyUnicodeUCS2_FromObject($60); //@line 245 "fileio.c"
        $u=$61; //@line 245 "fileio.c"
        var $62=$u; //@line 247 "fileio.c"
        var $63=($62)==0; //@line 247 "fileio.c"
        if ($63) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 247 "fileio.c"
      case 21: // $bb22
        $0=-1; //@line 248 "fileio.c"
        __label__ = 71; break; //@line 248 "fileio.c"
      case 22: // $bb23
        var $64=HEAP[_Py_FileSystemDefaultEncoding]; //@line 250 "fileio.c"
        var $65=$u; //@line 250 "fileio.c"
        var $66=_PyUnicodeUCS2_AsEncodedString($65, $64, 0); //@line 250 "fileio.c"
        $stringobj=$66; //@line 250 "fileio.c"
        var $67=$u; //@line 252 "fileio.c"
        var $68=$67; //@line 252 "fileio.c"
        var $69=HEAP[$68]; //@line 252 "fileio.c"
        var $70=($69) - 1; //@line 252 "fileio.c"
        var $71=$u; //@line 252 "fileio.c"
        var $72=$71; //@line 252 "fileio.c"
        HEAP[$72]=$70; //@line 252 "fileio.c"
        var $73=$u; //@line 252 "fileio.c"
        var $74=$73; //@line 252 "fileio.c"
        var $75=HEAP[$74]; //@line 252 "fileio.c"
        var $76=($75)==0; //@line 252 "fileio.c"
        if ($76) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 252 "fileio.c"
      case 23: // $bb24
        var $77=$u; //@line 252 "fileio.c"
        var $78=$77+4; //@line 252 "fileio.c"
        var $79=HEAP[$78]; //@line 252 "fileio.c"
        var $80=$79+24; //@line 252 "fileio.c"
        var $81=HEAP[$80]; //@line 252 "fileio.c"
        var $82=$u; //@line 252 "fileio.c"
        FUNCTION_TABLE[$81]($82); //@line 252 "fileio.c"
        __label__ = 24; break; //@line 252 "fileio.c"
      case 24: // $bb25
        var $83=$stringobj; //@line 253 "fileio.c"
        var $84=($83)==0; //@line 253 "fileio.c"
        if ($84) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 253 "fileio.c"
      case 25: // $bb26
        $0=-1; //@line 254 "fileio.c"
        __label__ = 71; break; //@line 254 "fileio.c"
      case 26: // $bb27
        var $85=$stringobj; //@line 255 "fileio.c"
        var $86=$85+4; //@line 255 "fileio.c"
        var $87=HEAP[$86]; //@line 255 "fileio.c"
        var $88=$87+84; //@line 255 "fileio.c"
        var $89=HEAP[$88]; //@line 255 "fileio.c"
        var $90=($89) & 134217728; //@line 255 "fileio.c"
        var $91=($90)==0; //@line 255 "fileio.c"
        if ($91) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 255 "fileio.c"
      case 27: // $bb28
        var $92=HEAP[_PyExc_TypeError]; //@line 256 "fileio.c"
        _PyErr_SetString($92, __str14131); //@line 256 "fileio.c"
        __label__ = 66; break; //@line 256 "fileio.c"
      case 28: // $bb29
        var $93=$stringobj; //@line 260 "fileio.c"
        var $94=$93; //@line 260 "fileio.c"
        var $95=$94+20; //@line 260 "fileio.c"
        var $96=$95; //@line 260 "fileio.c"
        HEAP[$name]=$96; //@line 260 "fileio.c"
        __label__ = 29; break; //@line 260 "fileio.c"
      case 29: // $bb30
        var $97=HEAP[$mode]; //@line 264 "fileio.c"
        $s=$97; //@line 264 "fileio.c"
        __label__ = 41; break; //@line 264 "fileio.c"
      case 30: // $bb31
        var $98=$s; //@line 266 "fileio.c"
        var $99=HEAP[$98]; //@line 266 "fileio.c"
        var $100=($99); //@line 266 "fileio.c"
        var $101=$s; //@line 266 "fileio.c"
        var $102=$101+1; //@line 266 "fileio.c"
        $s=$102; //@line 266 "fileio.c"
        if ($100 == 43) {
          __label__ = 38; break;
        }
        else if ($100 == 97) {
          __label__ = 36; break;
        }
        else if ($100 == 98) {
          __label__ = 41; break;
        }
        else if ($100 == 114) {
          __label__ = 31; break;
        }
        else if ($100 == 119) {
          __label__ = 34; break;
        }
        else {
        __label__ = 40; break;
        }
        
      case 31: // $bb32
        var $103=$rwa; //@line 268 "fileio.c"
        var $104=($103)!=0; //@line 268 "fileio.c"
        if ($104) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 268 "fileio.c"
      case 32: // $bad_mode
        var $105=HEAP[_PyExc_ValueError]; //@line 270 "fileio.c"
        _PyErr_SetString($105, __str15132); //@line 270 "fileio.c"
        __label__ = 66; break; //@line 270 "fileio.c"
      case 33: // $bb33
        $rwa=1; //@line 275 "fileio.c"
        var $106=$self; //@line 276 "fileio.c"
        var $107=$106+12; //@line 276 "fileio.c"
        var $108=HEAP[$107]; //@line 276 "fileio.c"
        var $109=($108) & -2; //@line 276 "fileio.c"
        var $110=($109) | 1; //@line 276 "fileio.c"
        HEAP[$107]=$110; //@line 276 "fileio.c"
        __label__ = 41; break; //@line 276 "fileio.c"
      case 34: // $bb34
        var $111=$rwa; //@line 279 "fileio.c"
        var $112=($111)!=0; //@line 279 "fileio.c"
        if ($112) { __label__ = 32; break; } else { __label__ = 35; break; } //@line 279 "fileio.c"
      case 35: // $bb35
        $rwa=1; //@line 281 "fileio.c"
        var $113=$self; //@line 282 "fileio.c"
        var $114=$113+12; //@line 282 "fileio.c"
        var $115=HEAP[$114]; //@line 282 "fileio.c"
        var $116=($115) & -3; //@line 282 "fileio.c"
        var $117=($116) | 2; //@line 282 "fileio.c"
        HEAP[$114]=$117; //@line 282 "fileio.c"
        var $118=$flags; //@line 283 "fileio.c"
        var $119=($118) | 576; //@line 283 "fileio.c"
        $flags=$119; //@line 283 "fileio.c"
        __label__ = 41; break; //@line 283 "fileio.c"
      case 36: // $bb36
        var $120=$rwa; //@line 286 "fileio.c"
        var $121=($120)!=0; //@line 286 "fileio.c"
        if ($121) { __label__ = 32; break; } else { __label__ = 37; break; } //@line 286 "fileio.c"
      case 37: // $bb37
        $rwa=1; //@line 288 "fileio.c"
        var $122=$self; //@line 289 "fileio.c"
        var $123=$122+12; //@line 289 "fileio.c"
        var $124=HEAP[$123]; //@line 289 "fileio.c"
        var $125=($124) & -3; //@line 289 "fileio.c"
        var $126=($125) | 2; //@line 289 "fileio.c"
        HEAP[$123]=$126; //@line 289 "fileio.c"
        var $127=$flags; //@line 290 "fileio.c"
        var $128=($127) | 64; //@line 290 "fileio.c"
        $flags=$128; //@line 290 "fileio.c"
        $append=1; //@line 291 "fileio.c"
        __label__ = 41; break; //@line 291 "fileio.c"
      case 38: // $bb39
        var $129=$plus; //@line 296 "fileio.c"
        var $130=($129)!=0; //@line 296 "fileio.c"
        if ($130) { __label__ = 32; break; } else { __label__ = 39; break; } //@line 296 "fileio.c"
      case 39: // $bb40
        var $131=$self; //@line 298 "fileio.c"
        var $132=$131+12; //@line 298 "fileio.c"
        var $133=HEAP[$132]; //@line 298 "fileio.c"
        var $134=($133) & -3; //@line 298 "fileio.c"
        var $135=($134) | 2; //@line 298 "fileio.c"
        HEAP[$132]=$135; //@line 298 "fileio.c"
        var $136=$self; //@line 298 "fileio.c"
        var $137=$136+12; //@line 298 "fileio.c"
        var $138=HEAP[$137]; //@line 298 "fileio.c"
        var $139=($138) << 30; //@line 298 "fileio.c"
        var $140=($139) >>> 31; //@line 298 "fileio.c"
        var $141=((($140)) & 1); //@line 298 "fileio.c"
        var $142=$self; //@line 298 "fileio.c"
        var $143=$142+12; //@line 298 "fileio.c"
        var $144=($141); //@line 298 "fileio.c"
        var $145=HEAP[$143]; //@line 298 "fileio.c"
        var $146=($144) & 1; //@line 298 "fileio.c"
        var $147=($145) & -2; //@line 298 "fileio.c"
        var $148=($146) | ($147); //@line 298 "fileio.c"
        HEAP[$143]=$148; //@line 298 "fileio.c"
        $plus=1; //@line 299 "fileio.c"
        __label__ = 41; break; //@line 299 "fileio.c"
      case 40: // $bb41
        var $149=HEAP[$mode]; //@line 302 "fileio.c"
        var $150=HEAP[_PyExc_ValueError]; //@line 302 "fileio.c"
        var $151=_PyErr_Format($150, __str16133, allocate([$149,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 302 "fileio.c"
        __label__ = 66; break; //@line 302 "fileio.c"
      case 41: // $bb42
        var $152=$s; //@line 265 "fileio.c"
        var $153=HEAP[$152]; //@line 265 "fileio.c"
        var $154=($153)!=0; //@line 265 "fileio.c"
        if ($154) { __label__ = 30; break; } else { __label__ = 42; break; } //@line 265 "fileio.c"
      case 42: // $bb43
        var $155=$rwa; //@line 308 "fileio.c"
        var $156=($155)==0; //@line 308 "fileio.c"
        if ($156) { __label__ = 32; break; } else { __label__ = 43; break; } //@line 308 "fileio.c"
      case 43: // $bb44
        var $157=$self; //@line 311 "fileio.c"
        var $158=$157+12; //@line 311 "fileio.c"
        var $159=HEAP[$158]; //@line 311 "fileio.c"
        var $160=($159) << 31; //@line 311 "fileio.c"
        var $161=($160) >>> 31; //@line 311 "fileio.c"
        var $162=((($161)) & 1); //@line 311 "fileio.c"
        var $163=($162)==0; //@line 311 "fileio.c"
        if ($163) { __label__ = 46; break; } else { __label__ = 44; break; } //@line 311 "fileio.c"
      case 44: // $bb45
        var $164=$self; //@line 311 "fileio.c"
        var $165=$164+12; //@line 311 "fileio.c"
        var $166=HEAP[$165]; //@line 311 "fileio.c"
        var $167=($166) << 30; //@line 311 "fileio.c"
        var $168=($167) >>> 31; //@line 311 "fileio.c"
        var $169=((($168)) & 1); //@line 311 "fileio.c"
        var $170=($169)==0; //@line 311 "fileio.c"
        if ($170) { __label__ = 46; break; } else { __label__ = 45; break; } //@line 311 "fileio.c"
      case 45: // $bb46
        var $171=$flags; //@line 312 "fileio.c"
        var $172=($171) | 2; //@line 312 "fileio.c"
        $flags=$172; //@line 312 "fileio.c"
        __label__ = 49; break; //@line 312 "fileio.c"
      case 46: // $bb47
        var $173=$self; //@line 313 "fileio.c"
        var $174=$173+12; //@line 313 "fileio.c"
        var $175=HEAP[$174]; //@line 313 "fileio.c"
        var $176=($175) << 31; //@line 313 "fileio.c"
        var $177=($176) >>> 31; //@line 313 "fileio.c"
        var $178=((($177)) & 1); //@line 313 "fileio.c"
        var $179=($178)!=0; //@line 313 "fileio.c"
        var $180=$flags; //@line 314 "fileio.c"
        if ($179) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 313 "fileio.c"
      case 47: // $bb48
        $flags=$180; //@line 314 "fileio.c"
        __label__ = 49; break; //@line 314 "fileio.c"
      case 48: // $bb49
        var $181=($180) | 1; //@line 316 "fileio.c"
        $flags=$181; //@line 316 "fileio.c"
        __label__ = 49; break; //@line 316 "fileio.c"
      case 49: // $bb50
        var $182=$append; //@line 323 "fileio.c"
        var $183=($182)!=0; //@line 323 "fileio.c"
        if ($183) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 323 "fileio.c"
      case 50: // $bb51
        var $184=$flags; //@line 324 "fileio.c"
        var $185=($184) | 1024; //@line 324 "fileio.c"
        $flags=$185; //@line 324 "fileio.c"
        __label__ = 51; break; //@line 324 "fileio.c"
      case 51: // $bb52
        var $186=$fd; //@line 327 "fileio.c"
        var $187=($186) >= 0; //@line 327 "fileio.c"
        if ($187) { __label__ = 52; break; } else { __label__ = 54; break; } //@line 327 "fileio.c"
      case 52: // $bb53
        var $188=$fd; //@line 328 "fileio.c"
        var $189=_check_fd($188); //@line 328 "fileio.c"
        var $190=($189)!=0; //@line 328 "fileio.c"
        if ($190) { __label__ = 66; break; } else { __label__ = 53; break; } //@line 328 "fileio.c"
      case 53: // $bb54
        var $191=$self; //@line 330 "fileio.c"
        var $192=$191+8; //@line 330 "fileio.c"
        var $193=$fd; //@line 330 "fileio.c"
        HEAP[$192]=$193; //@line 330 "fileio.c"
        var $194=HEAP[$closefd]; //@line 331 "fileio.c"
        var $195=((($194)) & 255); //@line 331 "fileio.c"
        var $196=((($195)) & 1); //@line 331 "fileio.c"
        var $197=$self; //@line 331 "fileio.c"
        var $198=$197+12; //@line 331 "fileio.c"
        var $199=($196); //@line 331 "fileio.c"
        var $200=HEAP[$198]; //@line 331 "fileio.c"
        var $201=($199) << 4; //@line 331 "fileio.c"
        var $202=($201) & 16; //@line 331 "fileio.c"
        var $203=($200) & -17; //@line 331 "fileio.c"
        var $204=($202) | ($203); //@line 331 "fileio.c"
        HEAP[$198]=$204; //@line 331 "fileio.c"
        __label__ = 59; break; //@line 331 "fileio.c"
      case 54: // $bb55
        var $205=$self; //@line 334 "fileio.c"
        var $206=$205+12; //@line 334 "fileio.c"
        var $207=HEAP[$206]; //@line 334 "fileio.c"
        var $208=($207) & -17; //@line 334 "fileio.c"
        var $209=($208) | 16; //@line 334 "fileio.c"
        HEAP[$206]=$209; //@line 334 "fileio.c"
        var $210=HEAP[$closefd]; //@line 335 "fileio.c"
        var $211=($210)==0; //@line 335 "fileio.c"
        if ($211) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 335 "fileio.c"
      case 55: // $bb56
        var $212=HEAP[_PyExc_ValueError]; //@line 336 "fileio.c"
        _PyErr_SetString($212, __str17134); //@line 336 "fileio.c"
        __label__ = 66; break; //@line 336 "fileio.c"
      case 56: // $bb57
        var $213=___errno_location(); //@line 342 "fileio.c"
        HEAP[$213]=0; //@line 342 "fileio.c"
        var $214=HEAP[$name]; //@line 348 "fileio.c"
        var $215=$flags; //@line 348 "fileio.c"
        var $216=___01open64_($214, $215, allocate([438,0,0,0], ["i32",0,0,0], ALLOC_STACK)); //@line 348 "fileio.c"
        var $217=$self; //@line 348 "fileio.c"
        var $218=$217+8; //@line 348 "fileio.c"
        HEAP[$218]=$216; //@line 348 "fileio.c"
        var $219=$self; //@line 350 "fileio.c"
        var $220=$219+8; //@line 350 "fileio.c"
        var $221=HEAP[$220]; //@line 350 "fileio.c"
        var $222=($221) < 0; //@line 350 "fileio.c"
        var $223=HEAP[$name]; //@line 356 "fileio.c"
        if ($222) { __label__ = 57; break; } else { __label__ = 58; break; } //@line 350 "fileio.c"
      case 57: // $bb58
        var $224=HEAP[_PyExc_IOError]; //@line 356 "fileio.c"
        var $225=_PyErr_SetFromErrnoWithFilename($224, $223); //@line 356 "fileio.c"
        __label__ = 66; break; //@line 356 "fileio.c"
      case 58: // $bb59
        var $226=$self; //@line 359 "fileio.c"
        var $227=_dircheck($226, $223); //@line 359 "fileio.c"
        var $228=($227) < 0; //@line 359 "fileio.c"
        if ($228) { __label__ = 66; break; } else { __label__ = 59; break; } //@line 359 "fileio.c"
      case 59: // $bb60
        var $229=HEAP[$nameobj]; //@line 363 "fileio.c"
        var $230=$self; //@line 363 "fileio.c"
        var $231=$230; //@line 363 "fileio.c"
        var $232=_PyObject_SetAttrString($231, __str13, $229); //@line 363 "fileio.c"
        var $233=($232) < 0; //@line 363 "fileio.c"
        if ($233) { __label__ = 66; break; } else { __label__ = 60; break; } //@line 363 "fileio.c"
      case 60: // $bb61
        var $234=$append; //@line 366 "fileio.c"
        var $235=($234)!=0; //@line 366 "fileio.c"
        if ($235) { __label__ = 61; break; } else { __label__ = 67; break; } //@line 366 "fileio.c"
      case 61: // $bb62
        var $236=$self; //@line 370 "fileio.c"
        var $237=$236+8; //@line 370 "fileio.c"
        var $238=HEAP[$237]; //@line 370 "fileio.c"
        var $239=_portable_lseek($238, 0, 2); //@line 370 "fileio.c"
        $pos=$239; //@line 370 "fileio.c"
        var $240=$pos; //@line 371 "fileio.c"
        var $241=($240)==0; //@line 371 "fileio.c"
        if ($241) { __label__ = 62; break; } else { __label__ = 64; break; } //@line 371 "fileio.c"
      case 62: // $bb63
        var $242=HEAP[$closefd]; //@line 372 "fileio.c"
        var $243=($242)!=0; //@line 372 "fileio.c"
        if ($243) { __label__ = 63; break; } else { __label__ = 66; break; } //@line 372 "fileio.c"
      case 63: // $bb64
        var $244=$self; //@line 373 "fileio.c"
        var $245=$244+8; //@line 373 "fileio.c"
        var $246=HEAP[$245]; //@line 373 "fileio.c"
        var $247=_close($246); //@line 373 "fileio.c"
        var $248=$self; //@line 374 "fileio.c"
        var $249=$248+8; //@line 374 "fileio.c"
        HEAP[$249]=-1; //@line 374 "fileio.c"
        __label__ = 66; break; //@line 374 "fileio.c"
      case 64: // $bb66
        var $250=$pos; //@line 378 "fileio.c"
        var $251=$250; //@line 378 "fileio.c"
        var $252=HEAP[$251]; //@line 378 "fileio.c"
        var $253=($252) - 1; //@line 378 "fileio.c"
        var $254=$pos; //@line 378 "fileio.c"
        var $255=$254; //@line 378 "fileio.c"
        HEAP[$255]=$253; //@line 378 "fileio.c"
        var $256=$pos; //@line 378 "fileio.c"
        var $257=$256; //@line 378 "fileio.c"
        var $258=HEAP[$257]; //@line 378 "fileio.c"
        var $259=($258)==0; //@line 378 "fileio.c"
        if ($259) { __label__ = 65; break; } else { __label__ = 67; break; } //@line 378 "fileio.c"
      case 65: // $bb67
        var $260=$pos; //@line 378 "fileio.c"
        var $261=$260+4; //@line 378 "fileio.c"
        var $262=HEAP[$261]; //@line 378 "fileio.c"
        var $263=$262+24; //@line 378 "fileio.c"
        var $264=HEAP[$263]; //@line 378 "fileio.c"
        var $265=$pos; //@line 378 "fileio.c"
        FUNCTION_TABLE[$264]($265); //@line 378 "fileio.c"
        __label__ = 67; break; //@line 378 "fileio.c"
      case 66: // $error
        $ret=-1; //@line 384 "fileio.c"
        __label__ = 67; break; //@line 386 "fileio.c"
      case 67: // $done
        var $266=$stringobj; //@line 387 "fileio.c"
        var $267=($266)!=0; //@line 387 "fileio.c"
        if ($267) { __label__ = 68; break; } else { __label__ = 70; break; } //@line 387 "fileio.c"
      case 68: // $bb69
        var $268=$stringobj; //@line 387 "fileio.c"
        $_py_tmp=$268; //@line 387 "fileio.c"
        $stringobj=0; //@line 387 "fileio.c"
        var $269=$_py_tmp; //@line 387 "fileio.c"
        var $270=$269; //@line 387 "fileio.c"
        var $271=HEAP[$270]; //@line 387 "fileio.c"
        var $272=($271) - 1; //@line 387 "fileio.c"
        var $273=$_py_tmp; //@line 387 "fileio.c"
        var $274=$273; //@line 387 "fileio.c"
        HEAP[$274]=$272; //@line 387 "fileio.c"
        var $275=$_py_tmp; //@line 387 "fileio.c"
        var $276=$275; //@line 387 "fileio.c"
        var $277=HEAP[$276]; //@line 387 "fileio.c"
        var $278=($277)==0; //@line 387 "fileio.c"
        if ($278) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 387 "fileio.c"
      case 69: // $bb70
        var $279=$_py_tmp; //@line 387 "fileio.c"
        var $280=$279+4; //@line 387 "fileio.c"
        var $281=HEAP[$280]; //@line 387 "fileio.c"
        var $282=$281+24; //@line 387 "fileio.c"
        var $283=HEAP[$282]; //@line 387 "fileio.c"
        var $284=$_py_tmp; //@line 387 "fileio.c"
        FUNCTION_TABLE[$283]($284); //@line 387 "fileio.c"
        __label__ = 70; break; //@line 387 "fileio.c"
      case 70: // $bb71
        var $285=$ret; //@line 388 "fileio.c"
        $0=$285; //@line 388 "fileio.c"
        __label__ = 71; break; //@line 388 "fileio.c"
      case 71: // $bb72
        var $286=$0; //@line 209 "fileio.c"
        $retval=$286; //@line 209 "fileio.c"
        var $retval73=$retval; //@line 209 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval73; //@line 209 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_traverse($self, $visit, $arg) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $visit_addr;
        var $arg_addr;
        var $retval;
        var $0;
        var $vret;
        $self_addr=$self;
        $visit_addr=$visit;
        $arg_addr=$arg;
        var $1=$self_addr; //@line 394 "fileio.c"
        var $2=$1+20; //@line 394 "fileio.c"
        var $3=HEAP[$2]; //@line 394 "fileio.c"
        var $4=($3)!=0; //@line 394 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 394 "fileio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 394 "fileio.c"
        var $6=$5+20; //@line 394 "fileio.c"
        var $7=HEAP[$6]; //@line 394 "fileio.c"
        var $8=$visit_addr; //@line 394 "fileio.c"
        var $9=$arg_addr; //@line 394 "fileio.c"
        var $10=FUNCTION_TABLE[$8]($7, $9); //@line 394 "fileio.c"
        $vret=$10; //@line 394 "fileio.c"
        var $11=$vret; //@line 394 "fileio.c"
        var $12=($11)!=0; //@line 394 "fileio.c"
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 394 "fileio.c"
      case 2: // $bb1
        var $13=$vret; //@line 394 "fileio.c"
        $0=$13; //@line 394 "fileio.c"
        __label__ = 4; break; //@line 394 "fileio.c"
      case 3: // $bb2
        $0=0; //@line 395 "fileio.c"
        __label__ = 4; break; //@line 395 "fileio.c"
      case 4: // $bb3
        var $14=$0; //@line 394 "fileio.c"
        $retval=$14; //@line 394 "fileio.c"
        var $retval4=$retval; //@line 394 "fileio.c"
        ;
        return $retval4; //@line 394 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_clear($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $_py_tmp;
        $self_addr=$self;
        var $1=$self_addr; //@line 401 "fileio.c"
        var $2=$1+20; //@line 401 "fileio.c"
        var $3=HEAP[$2]; //@line 401 "fileio.c"
        var $4=($3)!=0; //@line 401 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 401 "fileio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 401 "fileio.c"
        var $6=$5+20; //@line 401 "fileio.c"
        var $7=HEAP[$6]; //@line 401 "fileio.c"
        $_py_tmp=$7; //@line 401 "fileio.c"
        var $8=$self_addr; //@line 401 "fileio.c"
        var $9=$8+20; //@line 401 "fileio.c"
        HEAP[$9]=0; //@line 401 "fileio.c"
        var $10=$_py_tmp; //@line 401 "fileio.c"
        var $11=$10; //@line 401 "fileio.c"
        var $12=HEAP[$11]; //@line 401 "fileio.c"
        var $13=($12) - 1; //@line 401 "fileio.c"
        var $14=$_py_tmp; //@line 401 "fileio.c"
        var $15=$14; //@line 401 "fileio.c"
        HEAP[$15]=$13; //@line 401 "fileio.c"
        var $16=$_py_tmp; //@line 401 "fileio.c"
        var $17=$16; //@line 401 "fileio.c"
        var $18=HEAP[$17]; //@line 401 "fileio.c"
        var $19=($18)==0; //@line 401 "fileio.c"
        if ($19) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 401 "fileio.c"
      case 2: // $bb1
        var $20=$_py_tmp; //@line 401 "fileio.c"
        var $21=$20+4; //@line 401 "fileio.c"
        var $22=HEAP[$21]; //@line 401 "fileio.c"
        var $23=$22+24; //@line 401 "fileio.c"
        var $24=HEAP[$23]; //@line 401 "fileio.c"
        var $25=$_py_tmp; //@line 401 "fileio.c"
        FUNCTION_TABLE[$24]($25); //@line 401 "fileio.c"
        __label__ = 3; break; //@line 401 "fileio.c"
      case 3: // $bb2
        $0=0; //@line 402 "fileio.c"
        var $26=$0; //@line 402 "fileio.c"
        $retval=$26; //@line 402 "fileio.c"
        var $retval3=$retval; //@line 402 "fileio.c"
        ;
        return $retval3; //@line 402 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_dealloc($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $g;
        var $_py_tmp;
        $self_addr=$self;
        var $0=$self_addr; //@line 408 "fileio.c"
        var $1=$0; //@line 408 "fileio.c"
        var $2=__PyIOBase_finalize($1); //@line 408 "fileio.c"
        var $3=($2) < 0; //@line 408 "fileio.c"
        if ($3) { __label__ = 9; break; } else { __label__ = 1; break; } //@line 408 "fileio.c"
      case 1: // $bb
        var $4=$self_addr; //@line 410 "fileio.c"
        var $5=$4; //@line 410 "fileio.c"
        var $6=$5+-12; //@line 410 "fileio.c"
        $g=$6; //@line 410 "fileio.c"
        var $7=$g; //@line 410 "fileio.c"
        var $8=$7; //@line 410 "fileio.c"
        var $9=$8+8; //@line 410 "fileio.c"
        var $10=HEAP[$9]; //@line 410 "fileio.c"
        var $11=($10)==-2; //@line 410 "fileio.c"
        if ($11) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 410 "fileio.c"
      case 2: // $bb1
        ___assert_fail(__str19136, __str3120, 410, ___PRETTY_FUNCTION___8879); //@line 410 "fileio.c"
        throw "Reached an unreachable!" //@line 410 "fileio.c"
      case 3: // $bb2
        var $12=$g; //@line 410 "fileio.c"
        var $13=$12; //@line 410 "fileio.c"
        var $14=$13+8; //@line 410 "fileio.c"
        HEAP[$14]=-2; //@line 410 "fileio.c"
        var $15=$g; //@line 410 "fileio.c"
        var $16=$15; //@line 410 "fileio.c"
        var $17=$16+4; //@line 410 "fileio.c"
        var $18=HEAP[$17]; //@line 410 "fileio.c"
        var $19=$g; //@line 410 "fileio.c"
        var $20=$19; //@line 410 "fileio.c"
        var $21=$20; //@line 410 "fileio.c"
        var $22=HEAP[$21]; //@line 410 "fileio.c"
        var $23=$18; //@line 410 "fileio.c"
        var $24=$23; //@line 410 "fileio.c"
        HEAP[$24]=$22; //@line 410 "fileio.c"
        var $25=$g; //@line 410 "fileio.c"
        var $26=$25; //@line 410 "fileio.c"
        var $27=$26; //@line 410 "fileio.c"
        var $28=HEAP[$27]; //@line 410 "fileio.c"
        var $29=$g; //@line 410 "fileio.c"
        var $30=$29; //@line 410 "fileio.c"
        var $31=$30+4; //@line 410 "fileio.c"
        var $32=HEAP[$31]; //@line 410 "fileio.c"
        var $33=$28; //@line 410 "fileio.c"
        var $34=$33+4; //@line 410 "fileio.c"
        HEAP[$34]=$32; //@line 410 "fileio.c"
        var $35=$g; //@line 410 "fileio.c"
        var $36=$35; //@line 410 "fileio.c"
        var $37=$36; //@line 410 "fileio.c"
        HEAP[$37]=0; //@line 410 "fileio.c"
        var $38=$self_addr; //@line 411 "fileio.c"
        var $39=$38+16; //@line 411 "fileio.c"
        var $40=HEAP[$39]; //@line 411 "fileio.c"
        var $41=($40)!=0; //@line 411 "fileio.c"
        if ($41) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 411 "fileio.c"
      case 4: // $bb3
        var $42=$self_addr; //@line 412 "fileio.c"
        var $43=$42; //@line 412 "fileio.c"
        _PyObject_ClearWeakRefs($43); //@line 412 "fileio.c"
        __label__ = 5; break; //@line 412 "fileio.c"
      case 5: // $bb4
        var $44=$self_addr; //@line 413 "fileio.c"
        var $45=$44+20; //@line 413 "fileio.c"
        var $46=HEAP[$45]; //@line 413 "fileio.c"
        var $47=($46)!=0; //@line 413 "fileio.c"
        if ($47) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 413 "fileio.c"
      case 6: // $bb5
        var $48=$self_addr; //@line 413 "fileio.c"
        var $49=$48+20; //@line 413 "fileio.c"
        var $50=HEAP[$49]; //@line 413 "fileio.c"
        $_py_tmp=$50; //@line 413 "fileio.c"
        var $51=$self_addr; //@line 413 "fileio.c"
        var $52=$51+20; //@line 413 "fileio.c"
        HEAP[$52]=0; //@line 413 "fileio.c"
        var $53=$_py_tmp; //@line 413 "fileio.c"
        var $54=$53; //@line 413 "fileio.c"
        var $55=HEAP[$54]; //@line 413 "fileio.c"
        var $56=($55) - 1; //@line 413 "fileio.c"
        var $57=$_py_tmp; //@line 413 "fileio.c"
        var $58=$57; //@line 413 "fileio.c"
        HEAP[$58]=$56; //@line 413 "fileio.c"
        var $59=$_py_tmp; //@line 413 "fileio.c"
        var $60=$59; //@line 413 "fileio.c"
        var $61=HEAP[$60]; //@line 413 "fileio.c"
        var $62=($61)==0; //@line 413 "fileio.c"
        if ($62) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 413 "fileio.c"
      case 7: // $bb6
        var $63=$_py_tmp; //@line 413 "fileio.c"
        var $64=$63+4; //@line 413 "fileio.c"
        var $65=HEAP[$64]; //@line 413 "fileio.c"
        var $66=$65+24; //@line 413 "fileio.c"
        var $67=HEAP[$66]; //@line 413 "fileio.c"
        var $68=$_py_tmp; //@line 413 "fileio.c"
        FUNCTION_TABLE[$67]($68); //@line 413 "fileio.c"
        __label__ = 8; break; //@line 413 "fileio.c"
      case 8: // $bb7
        var $69=$self_addr; //@line 414 "fileio.c"
        var $70=$69; //@line 414 "fileio.c"
        var $71=$70+4; //@line 414 "fileio.c"
        var $72=HEAP[$71]; //@line 414 "fileio.c"
        var $73=$72+160; //@line 414 "fileio.c"
        var $74=HEAP[$73]; //@line 414 "fileio.c"
        var $75=$self_addr; //@line 414 "fileio.c"
        var $76=$75; //@line 414 "fileio.c"
        FUNCTION_TABLE[$74]($76); //@line 414 "fileio.c"
        __label__ = 9; break; //@line 414 "fileio.c"
      case 9: // $return
        ;
        return; //@line 409 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _err_closed() {
    ;
    var __label__;
  
    var $retval;
    var $0;
    var $1=HEAP[_PyExc_ValueError]; //@line 420 "fileio.c"
    _PyErr_SetString($1, __str20137); //@line 420 "fileio.c"
    $0=0; //@line 421 "fileio.c"
    var $2=$0; //@line 421 "fileio.c"
    $retval=$2; //@line 421 "fileio.c"
    var $retval1=$retval; //@line 421 "fileio.c"
    ;
    return $retval1; //@line 421 "fileio.c"
  }
  

  function _err_mode($action) {
    ;
    var __label__;
  
    var $action_addr;
    var $retval;
    var $0;
    $action_addr=$action;
    var $1=HEAP[_PyExc_ValueError]; //@line 427 "fileio.c"
    var $2=$action_addr; //@line 427 "fileio.c"
    var $3=_PyErr_Format($1, __str21138, allocate([$2,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 427 "fileio.c"
    $0=0; //@line 428 "fileio.c"
    var $4=$0; //@line 428 "fileio.c"
    $retval=$4; //@line 428 "fileio.c"
    var $retval1=$retval; //@line 428 "fileio.c"
    ;
    return $retval1; //@line 428 "fileio.c"
  }
  

  function _fileio_fileno($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        var $1=$self_addr; //@line 434 "fileio.c"
        var $2=$1+8; //@line 434 "fileio.c"
        var $3=HEAP[$2]; //@line 434 "fileio.c"
        var $4=($3) < 0; //@line 434 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 434 "fileio.c"
      case 1: // $bb
        var $5=_err_closed(); //@line 435 "fileio.c"
        $0=$5; //@line 435 "fileio.c"
        __label__ = 3; break; //@line 435 "fileio.c"
      case 2: // $bb1
        var $6=$self_addr; //@line 436 "fileio.c"
        var $7=$6+8; //@line 436 "fileio.c"
        var $8=HEAP[$7]; //@line 436 "fileio.c"
        var $9=_PyInt_FromLong($8); //@line 436 "fileio.c"
        $0=$9; //@line 436 "fileio.c"
        __label__ = 3; break; //@line 436 "fileio.c"
      case 3: // $bb2
        var $10=$0; //@line 435 "fileio.c"
        $retval=$10; //@line 435 "fileio.c"
        var $retval3=$retval; //@line 435 "fileio.c"
        ;
        return $retval3; //@line 435 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_readable($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        var $1=$self_addr; //@line 442 "fileio.c"
        var $2=$1+8; //@line 442 "fileio.c"
        var $3=HEAP[$2]; //@line 442 "fileio.c"
        var $4=($3) < 0; //@line 442 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 442 "fileio.c"
      case 1: // $bb
        var $5=_err_closed(); //@line 443 "fileio.c"
        $0=$5; //@line 443 "fileio.c"
        __label__ = 3; break; //@line 443 "fileio.c"
      case 2: // $bb1
        var $6=$self_addr; //@line 444 "fileio.c"
        var $7=$6+12; //@line 444 "fileio.c"
        var $8=HEAP[$7]; //@line 444 "fileio.c"
        var $9=($8) << 31; //@line 444 "fileio.c"
        var $10=($9) >>> 31; //@line 444 "fileio.c"
        var $11=((($10)) & 1); //@line 444 "fileio.c"
        var $12=($11); //@line 444 "fileio.c"
        var $13=_PyBool_FromLong($12); //@line 444 "fileio.c"
        $0=$13; //@line 444 "fileio.c"
        __label__ = 3; break; //@line 444 "fileio.c"
      case 3: // $bb2
        var $14=$0; //@line 443 "fileio.c"
        $retval=$14; //@line 443 "fileio.c"
        var $retval3=$retval; //@line 443 "fileio.c"
        ;
        return $retval3; //@line 443 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_writable($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        var $1=$self_addr; //@line 450 "fileio.c"
        var $2=$1+8; //@line 450 "fileio.c"
        var $3=HEAP[$2]; //@line 450 "fileio.c"
        var $4=($3) < 0; //@line 450 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 450 "fileio.c"
      case 1: // $bb
        var $5=_err_closed(); //@line 451 "fileio.c"
        $0=$5; //@line 451 "fileio.c"
        __label__ = 3; break; //@line 451 "fileio.c"
      case 2: // $bb1
        var $6=$self_addr; //@line 452 "fileio.c"
        var $7=$6+12; //@line 452 "fileio.c"
        var $8=HEAP[$7]; //@line 452 "fileio.c"
        var $9=($8) << 30; //@line 452 "fileio.c"
        var $10=($9) >>> 31; //@line 452 "fileio.c"
        var $11=((($10)) & 1); //@line 452 "fileio.c"
        var $12=($11); //@line 452 "fileio.c"
        var $13=_PyBool_FromLong($12); //@line 452 "fileio.c"
        $0=$13; //@line 452 "fileio.c"
        __label__ = 3; break; //@line 452 "fileio.c"
      case 3: // $bb2
        var $14=$0; //@line 451 "fileio.c"
        $retval=$14; //@line 451 "fileio.c"
        var $retval3=$retval; //@line 451 "fileio.c"
        ;
        return $retval3; //@line 451 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_seekable($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $pos;
        $self_addr=$self;
        var $1=$self_addr; //@line 458 "fileio.c"
        var $2=$1+8; //@line 458 "fileio.c"
        var $3=HEAP[$2]; //@line 458 "fileio.c"
        var $4=($3) < 0; //@line 458 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 458 "fileio.c"
      case 1: // $bb
        var $5=_err_closed(); //@line 459 "fileio.c"
        $0=$5; //@line 459 "fileio.c"
        __label__ = 9; break; //@line 459 "fileio.c"
      case 2: // $bb1
        var $6=$self_addr; //@line 460 "fileio.c"
        var $7=$6+12; //@line 460 "fileio.c"
        var $8=HEAP[$7]; //@line 460 "fileio.c"
        var $9=($8) << 28; //@line 460 "fileio.c"
        var $10=($9) >> 30; //@line 460 "fileio.c"
        var $11=((($10)) & 3); //@line 460 "fileio.c"
        var $12=($11) < 0; //@line 460 "fileio.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 8; break; } //@line 460 "fileio.c"
      case 3: // $bb2
        var $13=$self_addr; //@line 461 "fileio.c"
        var $14=$13+8; //@line 461 "fileio.c"
        var $15=HEAP[$14]; //@line 461 "fileio.c"
        var $16=_portable_lseek($15, 0, 1); //@line 461 "fileio.c"
        $pos=$16; //@line 461 "fileio.c"
        var $17=$pos; //@line 462 "fileio.c"
        var $18=($17)==0; //@line 462 "fileio.c"
        if ($18) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 462 "fileio.c"
      case 4: // $bb3
        _PyErr_Clear(); //@line 463 "fileio.c"
        var $19=$self_addr; //@line 464 "fileio.c"
        var $20=$19+12; //@line 464 "fileio.c"
        var $21=HEAP[$20]; //@line 464 "fileio.c"
        var $22=($21) & -13; //@line 464 "fileio.c"
        HEAP[$20]=$22; //@line 464 "fileio.c"
        __label__ = 8; break; //@line 464 "fileio.c"
      case 5: // $bb4
        var $23=$pos; //@line 466 "fileio.c"
        var $24=$23; //@line 466 "fileio.c"
        var $25=HEAP[$24]; //@line 466 "fileio.c"
        var $26=($25) - 1; //@line 466 "fileio.c"
        var $27=$pos; //@line 466 "fileio.c"
        var $28=$27; //@line 466 "fileio.c"
        HEAP[$28]=$26; //@line 466 "fileio.c"
        var $29=$pos; //@line 466 "fileio.c"
        var $30=$29; //@line 466 "fileio.c"
        var $31=HEAP[$30]; //@line 466 "fileio.c"
        var $32=($31)==0; //@line 466 "fileio.c"
        if ($32) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 466 "fileio.c"
      case 6: // $bb5
        var $33=$pos; //@line 466 "fileio.c"
        var $34=$33+4; //@line 466 "fileio.c"
        var $35=HEAP[$34]; //@line 466 "fileio.c"
        var $36=$35+24; //@line 466 "fileio.c"
        var $37=HEAP[$36]; //@line 466 "fileio.c"
        var $38=$pos; //@line 466 "fileio.c"
        FUNCTION_TABLE[$37]($38); //@line 466 "fileio.c"
        __label__ = 7; break; //@line 466 "fileio.c"
      case 7: // $bb6
        var $39=$self_addr; //@line 467 "fileio.c"
        var $40=$39+12; //@line 467 "fileio.c"
        var $41=HEAP[$40]; //@line 467 "fileio.c"
        var $42=($41) & -13; //@line 467 "fileio.c"
        var $43=($42) | 4; //@line 467 "fileio.c"
        HEAP[$40]=$43; //@line 467 "fileio.c"
        __label__ = 8; break; //@line 467 "fileio.c"
      case 8: // $bb7
        var $44=$self_addr; //@line 470 "fileio.c"
        var $45=$44+12; //@line 470 "fileio.c"
        var $46=HEAP[$45]; //@line 470 "fileio.c"
        var $47=($46) << 28; //@line 470 "fileio.c"
        var $48=($47) >> 30; //@line 470 "fileio.c"
        var $49=((($48)) & 3); //@line 470 "fileio.c"
        var $50=($49); //@line 470 "fileio.c"
        var $51=_PyBool_FromLong($50); //@line 470 "fileio.c"
        $0=$51; //@line 470 "fileio.c"
        __label__ = 9; break; //@line 470 "fileio.c"
      case 9: // $bb8
        var $52=$0; //@line 459 "fileio.c"
        $retval=$52; //@line 459 "fileio.c"
        var $retval9=$retval; //@line 459 "fileio.c"
        ;
        return $retval9; //@line 459 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_readinto($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 52; _memset(__stackBase__, 0, 52);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $pbuf=__stackBase__;
        var $n;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 479 "fileio.c"
        var $2=$1+8; //@line 479 "fileio.c"
        var $3=HEAP[$2]; //@line 479 "fileio.c"
        var $4=($3) < 0; //@line 479 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 479 "fileio.c"
      case 1: // $bb
        var $5=_err_closed(); //@line 480 "fileio.c"
        $0=$5; //@line 480 "fileio.c"
        __label__ = 11; break; //@line 480 "fileio.c"
      case 2: // $bb1
        var $6=$self_addr; //@line 481 "fileio.c"
        var $7=$6+12; //@line 481 "fileio.c"
        var $8=HEAP[$7]; //@line 481 "fileio.c"
        var $9=($8) << 31; //@line 481 "fileio.c"
        var $10=($9) >>> 31; //@line 481 "fileio.c"
        var $11=((($10)) & 1); //@line 481 "fileio.c"
        var $12=($11)==0; //@line 481 "fileio.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 481 "fileio.c"
      case 3: // $bb2
        var $13=_err_mode(__str22139); //@line 482 "fileio.c"
        $0=$13; //@line 482 "fileio.c"
        __label__ = 11; break; //@line 482 "fileio.c"
      case 4: // $bb3
        var $14=$args_addr; //@line 484 "fileio.c"
        var $15=__PyArg_ParseTuple_SizeT($14, __str23140, allocate([$pbuf,0,0,0], ["%struct.Py_buffer*",0,0,0], ALLOC_STACK)); //@line 484 "fileio.c"
        var $16=($15)==0; //@line 484 "fileio.c"
        if ($16) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 484 "fileio.c"
      case 5: // $bb4
        $0=0; //@line 485 "fileio.c"
        __label__ = 11; break; //@line 485 "fileio.c"
      case 6: // $bb5
        var $17=___errno_location(); //@line 489 "fileio.c"
        HEAP[$17]=0; //@line 489 "fileio.c"
        var $18=$pbuf+8; //@line 490 "fileio.c"
        var $19=HEAP[$18]; //@line 490 "fileio.c"
        var $20=$pbuf; //@line 490 "fileio.c"
        var $21=HEAP[$20]; //@line 490 "fileio.c"
        var $22=$self_addr; //@line 490 "fileio.c"
        var $23=$22+8; //@line 490 "fileio.c"
        var $24=HEAP[$23]; //@line 490 "fileio.c"
        var $25=_read($24, $21, $19); //@line 490 "fileio.c"
        $n=$25; //@line 490 "fileio.c"
        _PyBuffer_Release($pbuf); //@line 494 "fileio.c"
        var $26=$n; //@line 495 "fileio.c"
        var $27=($26) < 0; //@line 495 "fileio.c"
        if ($27) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 495 "fileio.c"
      case 7: // $bb6
        var $28=___errno_location(); //@line 496 "fileio.c"
        var $29=HEAP[$28]; //@line 496 "fileio.c"
        var $30=($29)==11; //@line 496 "fileio.c"
        if ($30) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 496 "fileio.c"
      case 8: // $bb7
        var $31=HEAP[__Py_NoneStruct]; //@line 497 "fileio.c"
        var $32=($31) + 1; //@line 497 "fileio.c"
        HEAP[__Py_NoneStruct]=$32; //@line 497 "fileio.c"
        $0=__Py_NoneStruct; //@line 497 "fileio.c"
        __label__ = 11; break; //@line 497 "fileio.c"
      case 9: // $bb8
        var $33=HEAP[_PyExc_IOError]; //@line 498 "fileio.c"
        var $34=_PyErr_SetFromErrno($33); //@line 498 "fileio.c"
        $0=0; //@line 499 "fileio.c"
        __label__ = 11; break; //@line 499 "fileio.c"
      case 10: // $bb9
        var $35=$n; //@line 502 "fileio.c"
        var $36=_PyLong_FromSsize_t($35); //@line 502 "fileio.c"
        $0=$36; //@line 502 "fileio.c"
        __label__ = 11; break; //@line 502 "fileio.c"
      case 11: // $bb10
        var $37=$0; //@line 480 "fileio.c"
        $retval=$37; //@line 480 "fileio.c"
        var $retval11=$retval; //@line 480 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 480 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _new_buffersize($self, $currentsize) {
    var __stackBase__  = STACKTOP; STACKTOP += 96; _memset(__stackBase__, 0, 96);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $currentsize_addr;
        var $retval;
        var $0;
        var $pos;
        var $end;
        var $st=__stackBase__;
        $self_addr=$self;
        $currentsize_addr=$currentsize;
        var $1=$self_addr; //@line 511 "fileio.c"
        var $2=$1+8; //@line 511 "fileio.c"
        var $3=HEAP[$2]; //@line 511 "fileio.c"
        var $4=___01fstat64_($3, $st); //@line 511 "fileio.c"
        var $5=($4)==0; //@line 511 "fileio.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 511 "fileio.c"
      case 1: // $bb
        var $6=$st+44; //@line 512 "fileio.c"
        var $7=HEAP[$6]; //@line 512 "fileio.c"
        $end=$7; //@line 512 "fileio.c"
        var $8=$self_addr; //@line 513 "fileio.c"
        var $9=$8+8; //@line 513 "fileio.c"
        var $10=HEAP[$9]; //@line 513 "fileio.c"
        var $11=___01lseek64_($10, 0, 1); //@line 513 "fileio.c"
        $pos=$11; //@line 513 "fileio.c"
        var $12=$end; //@line 518 "fileio.c"
        var $13=($12) > 8191; //@line 518 "fileio.c"
        if ($13) { __label__ = 2; break; } else { __label__ = 4; break; } //@line 518 "fileio.c"
      case 2: // $bb1
        var $14=$end; //@line 518 "fileio.c"
        var $15=$pos; //@line 518 "fileio.c"
        var $16=($14) >= ($15); //@line 518 "fileio.c"
        var $17=$pos; //@line 518 "fileio.c"
        var $18=($17) >= 0; //@line 518 "fileio.c"
        var $or_cond=($16) & ($18);
        if ($or_cond) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 518 "fileio.c"
      case 3: // $bb3
        var $19=$end; //@line 520 "fileio.c"
        var $20=((($19)) & 4294967295); //@line 520 "fileio.c"
        var $21=$currentsize_addr; //@line 520 "fileio.c"
        var $22=$pos; //@line 520 "fileio.c"
        var $23=((($22)) & 4294967295); //@line 520 "fileio.c"
        var $_neg=0 - ($23);
        var $24=($21) + 1; //@line 520 "fileio.c"
        var $25=($24) + ($20);
        var $26=($25) + ($_neg); //@line 520 "fileio.c"
        $0=$26; //@line 520 "fileio.c"
        __label__ = 9; break; //@line 520 "fileio.c"
      case 4: // $bb4
        var $27=$currentsize_addr; //@line 524 "fileio.c"
        var $28=($27) > 8192; //@line 524 "fileio.c"
        if ($28) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 524 "fileio.c"
      case 5: // $bb5
        var $29=($27) <= 524288; //@line 527 "fileio.c"
        var $30=$currentsize_addr; //@line 528 "fileio.c"
        if ($29) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 527 "fileio.c"
      case 6: // $bb6
        var $31=$currentsize_addr; //@line 528 "fileio.c"
        var $32=($31) + ($30); //@line 528 "fileio.c"
        $0=$32; //@line 528 "fileio.c"
        __label__ = 9; break; //@line 528 "fileio.c"
      case 7: // $bb7
        var $33=($30) + 524288; //@line 530 "fileio.c"
        $0=$33; //@line 530 "fileio.c"
        __label__ = 9; break; //@line 530 "fileio.c"
      case 8: // $bb8
        var $34=($27) + 8192; //@line 532 "fileio.c"
        $0=$34; //@line 532 "fileio.c"
        __label__ = 9; break; //@line 532 "fileio.c"
      case 9: // $bb9
        var $35=$0; //@line 520 "fileio.c"
        $retval=$35; //@line 520 "fileio.c"
        var $retval10=$retval; //@line 520 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval10; //@line 520 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_readall($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $result=__stackBase__;
        var $total;
        var $n;
        var $newsize;
        $self_addr=$self;
        $total=0; //@line 539 "fileio.c"
        var $1=$self_addr; //@line 542 "fileio.c"
        var $2=$1+8; //@line 542 "fileio.c"
        var $3=HEAP[$2]; //@line 542 "fileio.c"
        var $4=($3) < 0; //@line 542 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 542 "fileio.c"
      case 1: // $bb
        var $5=_err_closed(); //@line 543 "fileio.c"
        $0=$5; //@line 543 "fileio.c"
        __label__ = 32; break; //@line 543 "fileio.c"
      case 2: // $bb1
        var $6=_PyString_FromStringAndSize(0, 8192); //@line 547 "fileio.c"
        HEAP[$result]=$6; //@line 547 "fileio.c"
        var $7=HEAP[$result]; //@line 548 "fileio.c"
        var $8=($7)==0; //@line 548 "fileio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 548 "fileio.c"
      case 3: // $bb2
        $0=0; //@line 549 "fileio.c"
        __label__ = 32; break; //@line 549 "fileio.c"
      case 4: // $bb3
        var $9=$total; //@line 552 "fileio.c"
        var $10=$self_addr; //@line 552 "fileio.c"
        var $11=_new_buffersize($10, $9); //@line 552 "fileio.c"
        $newsize=$11; //@line 552 "fileio.c"
        var $12=$newsize; //@line 553 "fileio.c"
        var $13=($12) < 0; //@line 553 "fileio.c"
        var $14=$newsize; //@line 553 "fileio.c"
        var $15=($14)==0; //@line 553 "fileio.c"
        var $or_cond=($13) | ($15);
        if ($or_cond) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 553 "fileio.c"
      case 5: // $bb5
        var $16=HEAP[_PyExc_OverflowError]; //@line 554 "fileio.c"
        _PyErr_SetString($16, __str24141); //@line 554 "fileio.c"
        var $17=HEAP[$result]; //@line 557 "fileio.c"
        var $18=$17; //@line 557 "fileio.c"
        var $19=HEAP[$18]; //@line 557 "fileio.c"
        var $20=($19) - 1; //@line 557 "fileio.c"
        var $21=$17; //@line 557 "fileio.c"
        HEAP[$21]=$20; //@line 557 "fileio.c"
        var $22=$17; //@line 557 "fileio.c"
        var $23=HEAP[$22]; //@line 557 "fileio.c"
        var $24=($23)==0; //@line 557 "fileio.c"
        if ($24) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 557 "fileio.c"
      case 6: // $bb6
        var $25=HEAP[$result]; //@line 557 "fileio.c"
        var $26=$25+4; //@line 557 "fileio.c"
        var $27=HEAP[$26]; //@line 557 "fileio.c"
        var $28=$27+24; //@line 557 "fileio.c"
        var $29=HEAP[$28]; //@line 557 "fileio.c"
        var $30=HEAP[$result]; //@line 557 "fileio.c"
        FUNCTION_TABLE[$29]($30); //@line 557 "fileio.c"
        __label__ = 7; break; //@line 557 "fileio.c"
      case 7: // $bb7
        $0=0; //@line 558 "fileio.c"
        __label__ = 32; break; //@line 558 "fileio.c"
      case 8: // $bb8
        var $31=HEAP[$result]; //@line 561 "fileio.c"
        var $32=$31; //@line 561 "fileio.c"
        var $33=$32+8; //@line 561 "fileio.c"
        var $34=HEAP[$33]; //@line 561 "fileio.c"
        var $35=$newsize; //@line 561 "fileio.c"
        var $36=($34) < ($35); //@line 561 "fileio.c"
        if ($36) { __label__ = 9; break; } else { __label__ = 15; break; } //@line 561 "fileio.c"
      case 9: // $bb9
        var $37=$newsize; //@line 562 "fileio.c"
        var $38=__PyString_Resize($result, $37); //@line 562 "fileio.c"
        var $39=($38) < 0; //@line 562 "fileio.c"
        if ($39) { __label__ = 10; break; } else { __label__ = 15; break; } //@line 562 "fileio.c"
      case 10: // $bb10
        var $40=$total; //@line 563 "fileio.c"
        var $41=($40)==0; //@line 563 "fileio.c"
        if ($41) { __label__ = 11; break; } else { __label__ = 14; break; } //@line 563 "fileio.c"
      case 11: // $bb11
        var $42=HEAP[$result]; //@line 564 "fileio.c"
        var $43=$42; //@line 564 "fileio.c"
        var $44=HEAP[$43]; //@line 564 "fileio.c"
        var $45=($44) - 1; //@line 564 "fileio.c"
        var $46=$42; //@line 564 "fileio.c"
        HEAP[$46]=$45; //@line 564 "fileio.c"
        var $47=$42; //@line 564 "fileio.c"
        var $48=HEAP[$47]; //@line 564 "fileio.c"
        var $49=($48)==0; //@line 564 "fileio.c"
        if ($49) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 564 "fileio.c"
      case 12: // $bb12
        var $50=HEAP[$result]; //@line 564 "fileio.c"
        var $51=$50+4; //@line 564 "fileio.c"
        var $52=HEAP[$51]; //@line 564 "fileio.c"
        var $53=$52+24; //@line 564 "fileio.c"
        var $54=HEAP[$53]; //@line 564 "fileio.c"
        var $55=HEAP[$result]; //@line 564 "fileio.c"
        FUNCTION_TABLE[$54]($55); //@line 564 "fileio.c"
        __label__ = 13; break; //@line 564 "fileio.c"
      case 13: // $bb13
        $0=0; //@line 565 "fileio.c"
        __label__ = 32; break; //@line 565 "fileio.c"
      case 14: // $bb14
        _PyErr_Clear(); //@line 567 "fileio.c"
        __label__ = 26; break; //@line 567 "fileio.c"
      case 15: // $bb15
        var $56=___errno_location(); //@line 572 "fileio.c"
        HEAP[$56]=0; //@line 572 "fileio.c"
        var $57=$total; //@line 573 "fileio.c"
        var $58=$newsize; //@line 573 "fileio.c"
        var $59=($58) - ($57); //@line 573 "fileio.c"
        var $60=HEAP[$result]; //@line 573 "fileio.c"
        var $61=$60; //@line 573 "fileio.c"
        var $62=$61+20; //@line 573 "fileio.c"
        var $63=$62; //@line 573 "fileio.c"
        var $64=$total; //@line 573 "fileio.c"
        var $65=$63+$64; //@line 573 "fileio.c"
        var $66=$self_addr; //@line 573 "fileio.c"
        var $67=$66+8; //@line 573 "fileio.c"
        var $68=HEAP[$67]; //@line 573 "fileio.c"
        var $69=_read($68, $65, $59); //@line 573 "fileio.c"
        $n=$69; //@line 573 "fileio.c"
        var $70=($69)==0; //@line 577 "fileio.c"
        if ($70) { __label__ = 26; break; } else { __label__ = 16; break; } //@line 577 "fileio.c"
      case 16: // $bb16
        var $71=$n; //@line 579 "fileio.c"
        var $72=($71) < 0; //@line 579 "fileio.c"
        var $73=$total; //@line 580 "fileio.c"
        if ($72) { __label__ = 17; break; } else { __label__ = 25; break; } //@line 579 "fileio.c"
      case 17: // $bb17
        var $74=($73) > 0; //@line 580 "fileio.c"
        if ($74) { __label__ = 26; break; } else { __label__ = 18; break; } //@line 580 "fileio.c"
      case 18: // $bb18
        var $75=___errno_location(); //@line 582 "fileio.c"
        var $76=HEAP[$75]; //@line 582 "fileio.c"
        var $77=($76)==11; //@line 582 "fileio.c"
        var $78=HEAP[$result]; //@line 583 "fileio.c"
        var $79=$78; //@line 583 "fileio.c"
        var $80=HEAP[$79]; //@line 583 "fileio.c"
        var $81=($80) - 1; //@line 583 "fileio.c"
        var $82=$78; //@line 583 "fileio.c"
        HEAP[$82]=$81; //@line 583 "fileio.c"
        var $83=$78; //@line 583 "fileio.c"
        var $84=HEAP[$83]; //@line 583 "fileio.c"
        var $85=($84)==0; //@line 583 "fileio.c"
        if ($77) { __label__ = 19; break; } else { __label__ = 22; break; } //@line 582 "fileio.c"
      case 19: // $bb19
        if ($85) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 583 "fileio.c"
      case 20: // $bb20
        var $86=HEAP[$result]; //@line 583 "fileio.c"
        var $87=$86+4; //@line 583 "fileio.c"
        var $88=HEAP[$87]; //@line 583 "fileio.c"
        var $89=$88+24; //@line 583 "fileio.c"
        var $90=HEAP[$89]; //@line 583 "fileio.c"
        var $91=HEAP[$result]; //@line 583 "fileio.c"
        FUNCTION_TABLE[$90]($91); //@line 583 "fileio.c"
        __label__ = 21; break; //@line 583 "fileio.c"
      case 21: // $bb21
        var $92=HEAP[__Py_NoneStruct]; //@line 584 "fileio.c"
        var $93=($92) + 1; //@line 584 "fileio.c"
        HEAP[__Py_NoneStruct]=$93; //@line 584 "fileio.c"
        $0=__Py_NoneStruct; //@line 584 "fileio.c"
        __label__ = 32; break; //@line 584 "fileio.c"
      case 22: // $bb22
        if ($85) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 586 "fileio.c"
      case 23: // $bb23
        var $94=HEAP[$result]; //@line 586 "fileio.c"
        var $95=$94+4; //@line 586 "fileio.c"
        var $96=HEAP[$95]; //@line 586 "fileio.c"
        var $97=$96+24; //@line 586 "fileio.c"
        var $98=HEAP[$97]; //@line 586 "fileio.c"
        var $99=HEAP[$result]; //@line 586 "fileio.c"
        FUNCTION_TABLE[$98]($99); //@line 586 "fileio.c"
        __label__ = 24; break; //@line 586 "fileio.c"
      case 24: // $bb24
        var $100=HEAP[_PyExc_IOError]; //@line 587 "fileio.c"
        var $101=_PyErr_SetFromErrno($100); //@line 587 "fileio.c"
        $0=0; //@line 588 "fileio.c"
        __label__ = 32; break; //@line 588 "fileio.c"
      case 25: // $bb25
        var $102=$n; //@line 590 "fileio.c"
        var $103=($102) + ($73); //@line 590 "fileio.c"
        $total=$103; //@line 590 "fileio.c"
        __label__ = 4; break; //@line 590 "fileio.c"
      case 26: // $bb26
        var $104=HEAP[$result]; //@line 593 "fileio.c"
        var $105=$104; //@line 593 "fileio.c"
        var $106=$105+8; //@line 593 "fileio.c"
        var $107=HEAP[$106]; //@line 593 "fileio.c"
        var $108=$total; //@line 593 "fileio.c"
        var $109=($107) > ($108); //@line 593 "fileio.c"
        if ($109) { __label__ = 27; break; } else { __label__ = 31; break; } //@line 593 "fileio.c"
      case 27: // $bb27
        var $110=$total; //@line 594 "fileio.c"
        var $111=__PyString_Resize($result, $110); //@line 594 "fileio.c"
        var $112=($111) < 0; //@line 594 "fileio.c"
        if ($112) { __label__ = 28; break; } else { __label__ = 31; break; } //@line 594 "fileio.c"
      case 28: // $bb28
        var $113=HEAP[$result]; //@line 596 "fileio.c"
        var $114=$113; //@line 596 "fileio.c"
        var $115=HEAP[$114]; //@line 596 "fileio.c"
        var $116=($115) - 1; //@line 596 "fileio.c"
        var $117=$113; //@line 596 "fileio.c"
        HEAP[$117]=$116; //@line 596 "fileio.c"
        var $118=$113; //@line 596 "fileio.c"
        var $119=HEAP[$118]; //@line 596 "fileio.c"
        var $120=($119)==0; //@line 596 "fileio.c"
        if ($120) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 596 "fileio.c"
      case 29: // $bb29
        var $121=HEAP[$result]; //@line 596 "fileio.c"
        var $122=$121+4; //@line 596 "fileio.c"
        var $123=HEAP[$122]; //@line 596 "fileio.c"
        var $124=$123+24; //@line 596 "fileio.c"
        var $125=HEAP[$124]; //@line 596 "fileio.c"
        var $126=HEAP[$result]; //@line 596 "fileio.c"
        FUNCTION_TABLE[$125]($126); //@line 596 "fileio.c"
        __label__ = 30; break; //@line 596 "fileio.c"
      case 30: // $bb30
        $0=0; //@line 597 "fileio.c"
        __label__ = 32; break; //@line 597 "fileio.c"
      case 31: // $bb31
        var $127=HEAP[$result]; //@line 600 "fileio.c"
        $0=$127; //@line 600 "fileio.c"
        __label__ = 32; break; //@line 600 "fileio.c"
      case 32: // $bb32
        var $128=$0; //@line 543 "fileio.c"
        $retval=$128; //@line 543 "fileio.c"
        var $retval33=$retval; //@line 543 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval33; //@line 543 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_read($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $ptr;
        var $n;
        var $size=__stackBase__;
        var $bytes=__stackBase__+4;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$size]=-1; //@line 608 "fileio.c"
        var $1=$self_addr; //@line 611 "fileio.c"
        var $2=$1+8; //@line 611 "fileio.c"
        var $3=HEAP[$2]; //@line 611 "fileio.c"
        var $4=($3) < 0; //@line 611 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 611 "fileio.c"
      case 1: // $bb
        var $5=_err_closed(); //@line 612 "fileio.c"
        $0=$5; //@line 612 "fileio.c"
        __label__ = 22; break; //@line 612 "fileio.c"
      case 2: // $bb1
        var $6=$self_addr; //@line 613 "fileio.c"
        var $7=$6+12; //@line 613 "fileio.c"
        var $8=HEAP[$7]; //@line 613 "fileio.c"
        var $9=($8) << 31; //@line 613 "fileio.c"
        var $10=($9) >>> 31; //@line 613 "fileio.c"
        var $11=((($10)) & 1); //@line 613 "fileio.c"
        var $12=($11)==0; //@line 613 "fileio.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 613 "fileio.c"
      case 3: // $bb2
        var $13=_err_mode(__str22139); //@line 614 "fileio.c"
        $0=$13; //@line 614 "fileio.c"
        __label__ = 22; break; //@line 614 "fileio.c"
      case 4: // $bb3
        var $14=$args_addr; //@line 616 "fileio.c"
        var $15=__PyArg_ParseTuple_SizeT($14, __str25142, allocate([(FUNCTION_TABLE_OFFSET + 2),0,0,0,$size,0,0,0], ["i32 (%struct.PyObject*, i8*)*",0,0,0,"i32*",0,0,0], ALLOC_STACK)); //@line 616 "fileio.c"
        var $16=($15)==0; //@line 616 "fileio.c"
        if ($16) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 616 "fileio.c"
      case 5: // $bb4
        $0=0; //@line 617 "fileio.c"
        __label__ = 22; break; //@line 617 "fileio.c"
      case 6: // $bb5
        var $17=HEAP[$size]; //@line 619 "fileio.c"
        var $18=($17) < 0; //@line 619 "fileio.c"
        if ($18) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 619 "fileio.c"
      case 7: // $bb6
        var $19=$self_addr; //@line 620 "fileio.c"
        var $20=_fileio_readall($19); //@line 620 "fileio.c"
        $0=$20; //@line 620 "fileio.c"
        __label__ = 22; break; //@line 620 "fileio.c"
      case 8: // $bb7
        var $21=HEAP[$size]; //@line 623 "fileio.c"
        var $22=_PyString_FromStringAndSize(0, $21); //@line 623 "fileio.c"
        HEAP[$bytes]=$22; //@line 623 "fileio.c"
        var $23=HEAP[$bytes]; //@line 624 "fileio.c"
        var $24=($23)==0; //@line 624 "fileio.c"
        if ($24) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 624 "fileio.c"
      case 9: // $bb8
        $0=0; //@line 625 "fileio.c"
        __label__ = 22; break; //@line 625 "fileio.c"
      case 10: // $bb9
        var $25=HEAP[$bytes]; //@line 626 "fileio.c"
        var $26=$25; //@line 626 "fileio.c"
        var $27=$26+20; //@line 626 "fileio.c"
        var $28=$27; //@line 626 "fileio.c"
        $ptr=$28; //@line 626 "fileio.c"
        var $29=___errno_location(); //@line 630 "fileio.c"
        HEAP[$29]=0; //@line 630 "fileio.c"
        var $30=HEAP[$size]; //@line 631 "fileio.c"
        var $31=$self_addr; //@line 631 "fileio.c"
        var $32=$31+8; //@line 631 "fileio.c"
        var $33=HEAP[$32]; //@line 631 "fileio.c"
        var $34=$ptr; //@line 631 "fileio.c"
        var $35=_read($33, $34, $30); //@line 631 "fileio.c"
        $n=$35; //@line 631 "fileio.c"
        var $36=$n; //@line 636 "fileio.c"
        var $37=($36) < 0; //@line 636 "fileio.c"
        if ($37) { __label__ = 11; break; } else { __label__ = 16; break; } //@line 636 "fileio.c"
      case 11: // $bb10
        var $38=HEAP[$bytes]; //@line 637 "fileio.c"
        var $39=$38; //@line 637 "fileio.c"
        var $40=HEAP[$39]; //@line 637 "fileio.c"
        var $41=($40) - 1; //@line 637 "fileio.c"
        var $42=$38; //@line 637 "fileio.c"
        HEAP[$42]=$41; //@line 637 "fileio.c"
        var $43=$38; //@line 637 "fileio.c"
        var $44=HEAP[$43]; //@line 637 "fileio.c"
        var $45=($44)==0; //@line 637 "fileio.c"
        if ($45) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 637 "fileio.c"
      case 12: // $bb11
        var $46=HEAP[$bytes]; //@line 637 "fileio.c"
        var $47=$46+4; //@line 637 "fileio.c"
        var $48=HEAP[$47]; //@line 637 "fileio.c"
        var $49=$48+24; //@line 637 "fileio.c"
        var $50=HEAP[$49]; //@line 637 "fileio.c"
        var $51=HEAP[$bytes]; //@line 637 "fileio.c"
        FUNCTION_TABLE[$50]($51); //@line 637 "fileio.c"
        __label__ = 13; break; //@line 637 "fileio.c"
      case 13: // $bb12
        var $52=___errno_location(); //@line 638 "fileio.c"
        var $53=HEAP[$52]; //@line 638 "fileio.c"
        var $54=($53)==11; //@line 638 "fileio.c"
        if ($54) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 638 "fileio.c"
      case 14: // $bb13
        var $55=HEAP[__Py_NoneStruct]; //@line 639 "fileio.c"
        var $56=($55) + 1; //@line 639 "fileio.c"
        HEAP[__Py_NoneStruct]=$56; //@line 639 "fileio.c"
        $0=__Py_NoneStruct; //@line 639 "fileio.c"
        __label__ = 22; break; //@line 639 "fileio.c"
      case 15: // $bb14
        var $57=HEAP[_PyExc_IOError]; //@line 640 "fileio.c"
        var $58=_PyErr_SetFromErrno($57); //@line 640 "fileio.c"
        $0=0; //@line 641 "fileio.c"
        __label__ = 22; break; //@line 641 "fileio.c"
      case 16: // $bb15
        var $59=HEAP[$size]; //@line 644 "fileio.c"
        var $60=$n; //@line 644 "fileio.c"
        var $61=($60)!=($59); //@line 644 "fileio.c"
        if ($61) { __label__ = 17; break; } else { __label__ = 21; break; } //@line 644 "fileio.c"
      case 17: // $bb16
        var $62=$n; //@line 645 "fileio.c"
        var $63=__PyString_Resize($bytes, $62); //@line 645 "fileio.c"
        var $64=($63) < 0; //@line 645 "fileio.c"
        if ($64) { __label__ = 18; break; } else { __label__ = 21; break; } //@line 645 "fileio.c"
      case 18: // $bb17
        var $65=HEAP[$bytes]; //@line 646 "fileio.c"
        var $66=$65; //@line 646 "fileio.c"
        var $67=HEAP[$66]; //@line 646 "fileio.c"
        var $68=($67) - 1; //@line 646 "fileio.c"
        var $69=$65; //@line 646 "fileio.c"
        HEAP[$69]=$68; //@line 646 "fileio.c"
        var $70=$65; //@line 646 "fileio.c"
        var $71=HEAP[$70]; //@line 646 "fileio.c"
        var $72=($71)==0; //@line 646 "fileio.c"
        if ($72) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 646 "fileio.c"
      case 19: // $bb18
        var $73=HEAP[$bytes]; //@line 646 "fileio.c"
        var $74=$73+4; //@line 646 "fileio.c"
        var $75=HEAP[$74]; //@line 646 "fileio.c"
        var $76=$75+24; //@line 646 "fileio.c"
        var $77=HEAP[$76]; //@line 646 "fileio.c"
        var $78=HEAP[$bytes]; //@line 646 "fileio.c"
        FUNCTION_TABLE[$77]($78); //@line 646 "fileio.c"
        __label__ = 20; break; //@line 646 "fileio.c"
      case 20: // $bb19
        $0=0; //@line 647 "fileio.c"
        __label__ = 22; break; //@line 647 "fileio.c"
      case 21: // $bb20
        var $79=HEAP[$bytes]; //@line 651 "fileio.c"
        $0=$79; //@line 651 "fileio.c"
        __label__ = 22; break; //@line 651 "fileio.c"
      case 22: // $bb21
        var $80=$0; //@line 612 "fileio.c"
        $retval=$80; //@line 612 "fileio.c"
        var $retval22=$retval; //@line 612 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval22; //@line 612 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_write($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 52; _memset(__stackBase__, 0, 52);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $pbuf=__stackBase__;
        var $n;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 660 "fileio.c"
        var $2=$1+8; //@line 660 "fileio.c"
        var $3=HEAP[$2]; //@line 660 "fileio.c"
        var $4=($3) < 0; //@line 660 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 660 "fileio.c"
      case 1: // $bb
        var $5=_err_closed(); //@line 661 "fileio.c"
        $0=$5; //@line 661 "fileio.c"
        __label__ = 11; break; //@line 661 "fileio.c"
      case 2: // $bb1
        var $6=$self_addr; //@line 662 "fileio.c"
        var $7=$6+12; //@line 662 "fileio.c"
        var $8=HEAP[$7]; //@line 662 "fileio.c"
        var $9=($8) << 30; //@line 662 "fileio.c"
        var $10=($9) >>> 31; //@line 662 "fileio.c"
        var $11=((($10)) & 1); //@line 662 "fileio.c"
        var $12=($11)==0; //@line 662 "fileio.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 662 "fileio.c"
      case 3: // $bb2
        var $13=_err_mode(__str26143); //@line 663 "fileio.c"
        $0=$13; //@line 663 "fileio.c"
        __label__ = 11; break; //@line 663 "fileio.c"
      case 4: // $bb3
        var $14=$args_addr; //@line 665 "fileio.c"
        var $15=__PyArg_ParseTuple_SizeT($14, __str27144, allocate([$pbuf,0,0,0], ["%struct.Py_buffer*",0,0,0], ALLOC_STACK)); //@line 665 "fileio.c"
        var $16=($15)==0; //@line 665 "fileio.c"
        if ($16) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 665 "fileio.c"
      case 5: // $bb4
        $0=0; //@line 666 "fileio.c"
        __label__ = 11; break; //@line 666 "fileio.c"
      case 6: // $bb5
        var $17=___errno_location(); //@line 670 "fileio.c"
        HEAP[$17]=0; //@line 670 "fileio.c"
        var $18=$pbuf+8; //@line 671 "fileio.c"
        var $19=HEAP[$18]; //@line 671 "fileio.c"
        var $20=$pbuf; //@line 671 "fileio.c"
        var $21=HEAP[$20]; //@line 671 "fileio.c"
        var $22=$self_addr; //@line 671 "fileio.c"
        var $23=$22+8; //@line 671 "fileio.c"
        var $24=HEAP[$23]; //@line 671 "fileio.c"
        var $25=_write($24, $21, $19); //@line 671 "fileio.c"
        $n=$25; //@line 671 "fileio.c"
        _PyBuffer_Release($pbuf); //@line 676 "fileio.c"
        var $26=$n; //@line 678 "fileio.c"
        var $27=($26) < 0; //@line 678 "fileio.c"
        if ($27) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 678 "fileio.c"
      case 7: // $bb6
        var $28=___errno_location(); //@line 679 "fileio.c"
        var $29=HEAP[$28]; //@line 679 "fileio.c"
        var $30=($29)==11; //@line 679 "fileio.c"
        if ($30) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 679 "fileio.c"
      case 8: // $bb7
        var $31=HEAP[__Py_NoneStruct]; //@line 680 "fileio.c"
        var $32=($31) + 1; //@line 680 "fileio.c"
        HEAP[__Py_NoneStruct]=$32; //@line 680 "fileio.c"
        $0=__Py_NoneStruct; //@line 680 "fileio.c"
        __label__ = 11; break; //@line 680 "fileio.c"
      case 9: // $bb8
        var $33=HEAP[_PyExc_IOError]; //@line 681 "fileio.c"
        var $34=_PyErr_SetFromErrno($33); //@line 681 "fileio.c"
        $0=0; //@line 682 "fileio.c"
        __label__ = 11; break; //@line 682 "fileio.c"
      case 10: // $bb9
        var $35=$n; //@line 685 "fileio.c"
        var $36=_PyLong_FromSsize_t($35); //@line 685 "fileio.c"
        $0=$36; //@line 685 "fileio.c"
        __label__ = 11; break; //@line 685 "fileio.c"
      case 11: // $bb10
        var $37=$0; //@line 661 "fileio.c"
        $retval=$37; //@line 661 "fileio.c"
        var $retval11=$retval; //@line 661 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval11; //@line 661 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _portable_lseek($fd, $posobj, $whence) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $fd_addr;
        var $posobj_addr;
        var $whence_addr;
        var $retval;
        var $0;
        var $pos;
        var $res;
        $fd_addr=$fd;
        $posobj_addr=$posobj;
        $whence_addr=$whence;
        var $1=$posobj_addr; //@line 711 "fileio.c"
        var $2=($1)==0; //@line 711 "fileio.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 711 "fileio.c"
      case 1: // $bb
        $pos=0; //@line 712 "fileio.c"
        __label__ = 7; break; //@line 712 "fileio.c"
      case 2: // $bb1
        var $3=$posobj_addr; //@line 714 "fileio.c"
        var $4=$3+4; //@line 714 "fileio.c"
        var $5=HEAP[$4]; //@line 714 "fileio.c"
        var $6=($5)==(_PyFloat_Type); //@line 714 "fileio.c"
        if ($6) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 714 "fileio.c"
      case 3: // $bb2
        var $7=$posobj_addr; //@line 714 "fileio.c"
        var $8=$7+4; //@line 714 "fileio.c"
        var $9=HEAP[$8]; //@line 714 "fileio.c"
        var $10=_PyType_IsSubtype($9, _PyFloat_Type); //@line 714 "fileio.c"
        var $11=($10)!=0; //@line 714 "fileio.c"
        if ($11) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 714 "fileio.c"
      case 4: // $bb3
        var $12=HEAP[_PyExc_TypeError]; //@line 715 "fileio.c"
        _PyErr_SetString($12, __str28145); //@line 715 "fileio.c"
        $0=0; //@line 716 "fileio.c"
        __label__ = 10; break; //@line 716 "fileio.c"
      case 5: // $bb4
        var $13=$posobj_addr; //@line 719 "fileio.c"
        var $14=_PyLong_AsLongLong($13); //@line 719 "fileio.c"
        $pos=$14; //@line 719 "fileio.c"
        var $15=_PyErr_Occurred(); //@line 723 "fileio.c"
        var $16=($15)!=0; //@line 723 "fileio.c"
        if ($16) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 723 "fileio.c"
      case 6: // $bb5
        $0=0; //@line 724 "fileio.c"
        __label__ = 10; break; //@line 724 "fileio.c"
      case 7: // $bb6
        var $17=$fd_addr; //@line 732 "fileio.c"
        var $18=$pos; //@line 732 "fileio.c"
        var $19=$whence_addr; //@line 732 "fileio.c"
        var $20=___01lseek64_($17, $18, $19); //@line 732 "fileio.c"
        $res=$20; //@line 732 "fileio.c"
        var $21=($20) < 0; //@line 737 "fileio.c"
        if ($21) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 737 "fileio.c"
      case 8: // $bb7
        var $22=HEAP[_PyExc_IOError]; //@line 738 "fileio.c"
        var $23=_PyErr_SetFromErrno($22); //@line 738 "fileio.c"
        $0=$23; //@line 738 "fileio.c"
        __label__ = 10; break; //@line 738 "fileio.c"
      case 9: // $bb8
        var $24=$res; //@line 741 "fileio.c"
        var $25=_PyLong_FromLongLong($24); //@line 741 "fileio.c"
        $0=$25; //@line 741 "fileio.c"
        __label__ = 10; break; //@line 741 "fileio.c"
      case 10: // $bb9
        var $26=$0; //@line 716 "fileio.c"
        $retval=$26; //@line 716 "fileio.c"
        var $retval10=$retval; //@line 716 "fileio.c"
        ;
        return $retval10; //@line 716 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_seek($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $posobj=__stackBase__;
        var $whence=__stackBase__+4;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$whence]=0; //@line 751 "fileio.c"
        var $1=$self_addr; //@line 753 "fileio.c"
        var $2=$1+8; //@line 753 "fileio.c"
        var $3=HEAP[$2]; //@line 753 "fileio.c"
        var $4=($3) < 0; //@line 753 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 753 "fileio.c"
      case 1: // $bb
        var $5=_err_closed(); //@line 754 "fileio.c"
        $0=$5; //@line 754 "fileio.c"
        __label__ = 5; break; //@line 754 "fileio.c"
      case 2: // $bb1
        var $6=$args_addr; //@line 756 "fileio.c"
        var $7=__PyArg_ParseTuple_SizeT($6, __str29146, allocate([$posobj,0,0,0,$whence,0,0,0], ["%struct.PyObject**",0,0,0,"i32*",0,0,0], ALLOC_STACK)); //@line 756 "fileio.c"
        var $8=($7)==0; //@line 756 "fileio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 756 "fileio.c"
      case 3: // $bb2
        $0=0; //@line 757 "fileio.c"
        __label__ = 5; break; //@line 757 "fileio.c"
      case 4: // $bb3
        var $9=HEAP[$whence]; //@line 759 "fileio.c"
        var $10=HEAP[$posobj]; //@line 759 "fileio.c"
        var $11=$self_addr; //@line 759 "fileio.c"
        var $12=$11+8; //@line 759 "fileio.c"
        var $13=HEAP[$12]; //@line 759 "fileio.c"
        var $14=_portable_lseek($13, $10, $9); //@line 759 "fileio.c"
        $0=$14; //@line 759 "fileio.c"
        __label__ = 5; break; //@line 759 "fileio.c"
      case 5: // $bb4
        var $15=$0; //@line 754 "fileio.c"
        $retval=$15; //@line 754 "fileio.c"
        var $retval5=$retval; //@line 754 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 754 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_tell($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 765 "fileio.c"
        var $2=$1+8; //@line 765 "fileio.c"
        var $3=HEAP[$2]; //@line 765 "fileio.c"
        var $4=($3) < 0; //@line 765 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 765 "fileio.c"
      case 1: // $bb
        var $5=_err_closed(); //@line 766 "fileio.c"
        $0=$5; //@line 766 "fileio.c"
        __label__ = 3; break; //@line 766 "fileio.c"
      case 2: // $bb1
        var $6=$self_addr; //@line 768 "fileio.c"
        var $7=$6+8; //@line 768 "fileio.c"
        var $8=HEAP[$7]; //@line 768 "fileio.c"
        var $9=_portable_lseek($8, 0, 1); //@line 768 "fileio.c"
        $0=$9; //@line 768 "fileio.c"
        __label__ = 3; break; //@line 768 "fileio.c"
      case 3: // $bb2
        var $10=$0; //@line 766 "fileio.c"
        $retval=$10; //@line 766 "fileio.c"
        var $retval3=$retval; //@line 766 "fileio.c"
        ;
        return $retval3; //@line 766 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_truncate($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $posobj=__stackBase__;
        var $pos;
        var $ret;
        var $fd;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$posobj]=0; //@line 775 "fileio.c"
        var $1=$self_addr; //@line 782 "fileio.c"
        var $2=$1+8; //@line 782 "fileio.c"
        var $3=HEAP[$2]; //@line 782 "fileio.c"
        $fd=$3; //@line 782 "fileio.c"
        var $4=$fd; //@line 783 "fileio.c"
        var $5=($4) < 0; //@line 783 "fileio.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 783 "fileio.c"
      case 1: // $bb
        var $6=_err_closed(); //@line 784 "fileio.c"
        $0=$6; //@line 784 "fileio.c"
        __label__ = 19; break; //@line 784 "fileio.c"
      case 2: // $bb1
        var $7=$self_addr; //@line 785 "fileio.c"
        var $8=$7+12; //@line 785 "fileio.c"
        var $9=HEAP[$8]; //@line 785 "fileio.c"
        var $10=($9) << 30; //@line 785 "fileio.c"
        var $11=($10) >>> 31; //@line 785 "fileio.c"
        var $12=((($11)) & 1); //@line 785 "fileio.c"
        var $13=($12)==0; //@line 785 "fileio.c"
        if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 785 "fileio.c"
      case 3: // $bb2
        var $14=_err_mode(__str26143); //@line 786 "fileio.c"
        $0=$14; //@line 786 "fileio.c"
        __label__ = 19; break; //@line 786 "fileio.c"
      case 4: // $bb3
        var $15=$args_addr; //@line 788 "fileio.c"
        var $16=__PyArg_ParseTuple_SizeT($15, __str30147, allocate([$posobj,0,0,0], ["%struct.PyObject**",0,0,0], ALLOC_STACK)); //@line 788 "fileio.c"
        var $17=($16)==0; //@line 788 "fileio.c"
        if ($17) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 788 "fileio.c"
      case 5: // $bb4
        $0=0; //@line 789 "fileio.c"
        __label__ = 19; break; //@line 789 "fileio.c"
      case 6: // $bb5
        var $18=HEAP[$posobj]; //@line 791 "fileio.c"
        var $19=($18)==(__Py_NoneStruct); //@line 791 "fileio.c"
        var $20=HEAP[$posobj]; //@line 791 "fileio.c"
        var $21=($20)==0; //@line 791 "fileio.c"
        var $or_cond=($19) | ($21);
        if ($or_cond) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 791 "fileio.c"
      case 7: // $bb7
        var $22=$fd; //@line 793 "fileio.c"
        var $23=_portable_lseek($22, 0, 1); //@line 793 "fileio.c"
        HEAP[$posobj]=$23; //@line 793 "fileio.c"
        var $24=HEAP[$posobj]; //@line 794 "fileio.c"
        var $25=($24)==0; //@line 794 "fileio.c"
        if ($25) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 794 "fileio.c"
      case 8: // $bb8
        $0=0; //@line 795 "fileio.c"
        __label__ = 19; break; //@line 795 "fileio.c"
      case 9: // $bb10
        var $26=HEAP[$posobj]; //@line 798 "fileio.c"
        var $27=$26; //@line 798 "fileio.c"
        var $28=HEAP[$27]; //@line 798 "fileio.c"
        var $29=($28) + 1; //@line 798 "fileio.c"
        var $30=$26; //@line 798 "fileio.c"
        HEAP[$30]=$29; //@line 798 "fileio.c"
        __label__ = 10; break; //@line 798 "fileio.c"
      case 10: // $bb11
        var $31=HEAP[$posobj]; //@line 848 "fileio.c"
        var $32=_PyLong_AsLongLong($31); //@line 848 "fileio.c"
        $pos=$32; //@line 848 "fileio.c"
        var $33=_PyErr_Occurred(); //@line 852 "fileio.c"
        var $34=($33)!=0; //@line 852 "fileio.c"
        if ($34) { __label__ = 11; break; } else { __label__ = 14; break; } //@line 852 "fileio.c"
      case 11: // $bb12
        var $35=HEAP[$posobj]; //@line 853 "fileio.c"
        var $36=$35; //@line 853 "fileio.c"
        var $37=HEAP[$36]; //@line 853 "fileio.c"
        var $38=($37) - 1; //@line 853 "fileio.c"
        var $39=$35; //@line 853 "fileio.c"
        HEAP[$39]=$38; //@line 853 "fileio.c"
        var $40=$35; //@line 853 "fileio.c"
        var $41=HEAP[$40]; //@line 853 "fileio.c"
        var $42=($41)==0; //@line 853 "fileio.c"
        if ($42) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 853 "fileio.c"
      case 12: // $bb13
        var $43=HEAP[$posobj]; //@line 853 "fileio.c"
        var $44=$43+4; //@line 853 "fileio.c"
        var $45=HEAP[$44]; //@line 853 "fileio.c"
        var $46=$45+24; //@line 853 "fileio.c"
        var $47=HEAP[$46]; //@line 853 "fileio.c"
        var $48=HEAP[$posobj]; //@line 853 "fileio.c"
        FUNCTION_TABLE[$47]($48); //@line 853 "fileio.c"
        __label__ = 13; break; //@line 853 "fileio.c"
      case 13: // $bb14
        $0=0; //@line 854 "fileio.c"
        __label__ = 19; break; //@line 854 "fileio.c"
      case 14: // $bb15
        var $49=___errno_location(); //@line 858 "fileio.c"
        HEAP[$49]=0; //@line 858 "fileio.c"
        var $50=$fd; //@line 859 "fileio.c"
        var $51=$pos; //@line 859 "fileio.c"
        var $52=___01ftruncate64_($50, $51); //@line 859 "fileio.c"
        $ret=$52; //@line 859 "fileio.c"
        var $53=$ret; //@line 864 "fileio.c"
        var $54=($53)!=0; //@line 864 "fileio.c"
        var $55=HEAP[$posobj]; //@line 865 "fileio.c"
        if ($54) { __label__ = 15; break; } else { __label__ = 18; break; } //@line 864 "fileio.c"
      case 15: // $bb16
        var $56=$55; //@line 865 "fileio.c"
        var $57=HEAP[$56]; //@line 865 "fileio.c"
        var $58=($57) - 1; //@line 865 "fileio.c"
        var $59=$55; //@line 865 "fileio.c"
        HEAP[$59]=$58; //@line 865 "fileio.c"
        var $60=$55; //@line 865 "fileio.c"
        var $61=HEAP[$60]; //@line 865 "fileio.c"
        var $62=($61)==0; //@line 865 "fileio.c"
        if ($62) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 865 "fileio.c"
      case 16: // $bb17
        var $63=HEAP[$posobj]; //@line 865 "fileio.c"
        var $64=$63+4; //@line 865 "fileio.c"
        var $65=HEAP[$64]; //@line 865 "fileio.c"
        var $66=$65+24; //@line 865 "fileio.c"
        var $67=HEAP[$66]; //@line 865 "fileio.c"
        var $68=HEAP[$posobj]; //@line 865 "fileio.c"
        FUNCTION_TABLE[$67]($68); //@line 865 "fileio.c"
        __label__ = 17; break; //@line 865 "fileio.c"
      case 17: // $bb18
        var $69=HEAP[_PyExc_IOError]; //@line 866 "fileio.c"
        var $70=_PyErr_SetFromErrno($69); //@line 866 "fileio.c"
        $0=0; //@line 867 "fileio.c"
        __label__ = 19; break; //@line 867 "fileio.c"
      case 18: // $bb19
        $0=$55; //@line 870 "fileio.c"
        __label__ = 19; break; //@line 870 "fileio.c"
      case 19: // $bb20
        var $71=$0; //@line 784 "fileio.c"
        $retval=$71; //@line 784 "fileio.c"
        var $retval21=$retval; //@line 784 "fileio.c"
        STACKTOP = __stackBase__;
        return $retval21; //@line 784 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _mode_string($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        var $1=$self_addr; //@line 877 "fileio.c"
        var $2=$1+12; //@line 877 "fileio.c"
        var $3=HEAP[$2]; //@line 877 "fileio.c"
        var $4=($3) << 31; //@line 877 "fileio.c"
        var $5=($4) >>> 31; //@line 877 "fileio.c"
        var $6=((($5)) & 1); //@line 877 "fileio.c"
        var $7=($6)!=0; //@line 877 "fileio.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 877 "fileio.c"
      case 1: // $bb
        var $8=$self_addr; //@line 878 "fileio.c"
        var $9=$8+12; //@line 878 "fileio.c"
        var $10=HEAP[$9]; //@line 878 "fileio.c"
        var $11=($10) << 30; //@line 878 "fileio.c"
        var $12=($11) >>> 31; //@line 878 "fileio.c"
        var $13=((($12)) & 1); //@line 878 "fileio.c"
        var $14=($13)!=0; //@line 878 "fileio.c"
        if ($14) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 878 "fileio.c"
      case 2: // $bb1
        $0=__str31148; //@line 879 "fileio.c"
        __label__ = 5; break; //@line 879 "fileio.c"
      case 3: // $bb2
        $0=__str32149; //@line 881 "fileio.c"
        __label__ = 5; break; //@line 881 "fileio.c"
      case 4: // $bb3
        $0=__str33150; //@line 884 "fileio.c"
        __label__ = 5; break; //@line 884 "fileio.c"
      case 5: // $bb4
        var $15=$0; //@line 879 "fileio.c"
        $retval=$15; //@line 879 "fileio.c"
        var $retval5=$retval; //@line 879 "fileio.c"
        ;
        return $retval5; //@line 879 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_repr($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $nameobj;
        var $res;
        var $repr;
        $self_addr=$self;
        var $1=$self_addr; //@line 892 "fileio.c"
        var $2=$1+8; //@line 892 "fileio.c"
        var $3=HEAP[$2]; //@line 892 "fileio.c"
        var $4=($3) < 0; //@line 892 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 892 "fileio.c"
      case 1: // $bb
        var $5=_PyString_FromFormat(__str34151, allocate(1, "i32", ALLOC_STACK)); //@line 893 "fileio.c"
        $0=$5; //@line 893 "fileio.c"
        __label__ = 13; break; //@line 893 "fileio.c"
      case 2: // $bb1
        var $6=$self_addr; //@line 895 "fileio.c"
        var $7=$6; //@line 895 "fileio.c"
        var $8=_PyObject_GetAttrString($7, __str13); //@line 895 "fileio.c"
        $nameobj=$8; //@line 895 "fileio.c"
        var $9=$nameobj; //@line 896 "fileio.c"
        var $10=($9)==0; //@line 896 "fileio.c"
        if ($10) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 896 "fileio.c"
      case 3: // $bb2
        var $11=HEAP[_PyExc_AttributeError]; //@line 897 "fileio.c"
        var $12=_PyErr_ExceptionMatches($11); //@line 897 "fileio.c"
        var $13=($12)!=0; //@line 897 "fileio.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 897 "fileio.c"
      case 4: // $bb3
        _PyErr_Clear(); //@line 898 "fileio.c"
        var $14=$self_addr; //@line 901 "fileio.c"
        var $15=_mode_string($14); //@line 901 "fileio.c"
        var $16=$self_addr; //@line 901 "fileio.c"
        var $17=$16+8; //@line 901 "fileio.c"
        var $18=HEAP[$17]; //@line 901 "fileio.c"
        var $19=_PyString_FromFormat(__str35152, allocate([$18,0,0,0,$15,0,0,0], ["i32",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 901 "fileio.c"
        $res=$19; //@line 901 "fileio.c"
        __label__ = 12; break; //@line 901 "fileio.c"
      case 5: // $bb4
        $0=0; //@line 900 "fileio.c"
        __label__ = 13; break; //@line 900 "fileio.c"
      case 6: // $bb5
        var $20=$nameobj; //@line 905 "fileio.c"
        var $21=_PyObject_Repr($20); //@line 905 "fileio.c"
        $repr=$21; //@line 905 "fileio.c"
        var $22=$nameobj; //@line 906 "fileio.c"
        var $23=$22; //@line 906 "fileio.c"
        var $24=HEAP[$23]; //@line 906 "fileio.c"
        var $25=($24) - 1; //@line 906 "fileio.c"
        var $26=$nameobj; //@line 906 "fileio.c"
        var $27=$26; //@line 906 "fileio.c"
        HEAP[$27]=$25; //@line 906 "fileio.c"
        var $28=$nameobj; //@line 906 "fileio.c"
        var $29=$28; //@line 906 "fileio.c"
        var $30=HEAP[$29]; //@line 906 "fileio.c"
        var $31=($30)==0; //@line 906 "fileio.c"
        if ($31) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 906 "fileio.c"
      case 7: // $bb6
        var $32=$nameobj; //@line 906 "fileio.c"
        var $33=$32+4; //@line 906 "fileio.c"
        var $34=HEAP[$33]; //@line 906 "fileio.c"
        var $35=$34+24; //@line 906 "fileio.c"
        var $36=HEAP[$35]; //@line 906 "fileio.c"
        var $37=$nameobj; //@line 906 "fileio.c"
        FUNCTION_TABLE[$36]($37); //@line 906 "fileio.c"
        __label__ = 8; break; //@line 906 "fileio.c"
      case 8: // $bb7
        var $38=$repr; //@line 907 "fileio.c"
        var $39=($38)==0; //@line 907 "fileio.c"
        if ($39) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 907 "fileio.c"
      case 9: // $bb8
        $0=0; //@line 908 "fileio.c"
        __label__ = 13; break; //@line 908 "fileio.c"
      case 10: // $bb9
        var $40=$self_addr; //@line 909 "fileio.c"
        var $41=_mode_string($40); //@line 909 "fileio.c"
        var $42=$repr; //@line 909 "fileio.c"
        var $43=$42; //@line 909 "fileio.c"
        var $44=$43+20; //@line 909 "fileio.c"
        var $45=$44; //@line 909 "fileio.c"
        var $46=_PyString_FromFormat(__str36153, allocate([$45,0,0,0,$41,0,0,0], ["i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 909 "fileio.c"
        $res=$46; //@line 909 "fileio.c"
        var $47=$repr; //@line 912 "fileio.c"
        var $48=$47; //@line 912 "fileio.c"
        var $49=HEAP[$48]; //@line 912 "fileio.c"
        var $50=($49) - 1; //@line 912 "fileio.c"
        var $51=$repr; //@line 912 "fileio.c"
        var $52=$51; //@line 912 "fileio.c"
        HEAP[$52]=$50; //@line 912 "fileio.c"
        var $53=$repr; //@line 912 "fileio.c"
        var $54=$53; //@line 912 "fileio.c"
        var $55=HEAP[$54]; //@line 912 "fileio.c"
        var $56=($55)==0; //@line 912 "fileio.c"
        if ($56) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 912 "fileio.c"
      case 11: // $bb10
        var $57=$repr; //@line 912 "fileio.c"
        var $58=$57+4; //@line 912 "fileio.c"
        var $59=HEAP[$58]; //@line 912 "fileio.c"
        var $60=$59+24; //@line 912 "fileio.c"
        var $61=HEAP[$60]; //@line 912 "fileio.c"
        var $62=$repr; //@line 912 "fileio.c"
        FUNCTION_TABLE[$61]($62); //@line 912 "fileio.c"
        __label__ = 12; break; //@line 912 "fileio.c"
      case 12: // $bb11
        var $63=$res; //@line 914 "fileio.c"
        $0=$63; //@line 914 "fileio.c"
        __label__ = 13; break; //@line 914 "fileio.c"
      case 13: // $bb12
        var $64=$0; //@line 893 "fileio.c"
        $retval=$64; //@line 893 "fileio.c"
        var $retval13=$retval; //@line 893 "fileio.c"
        ;
        return $retval13; //@line 893 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _fileio_isatty($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $res;
        $self_addr=$self;
        var $1=$self_addr; //@line 922 "fileio.c"
        var $2=$1+8; //@line 922 "fileio.c"
        var $3=HEAP[$2]; //@line 922 "fileio.c"
        var $4=($3) < 0; //@line 922 "fileio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 922 "fileio.c"
      case 1: // $bb
        var $5=_err_closed(); //@line 923 "fileio.c"
        $0=$5; //@line 923 "fileio.c"
        __label__ = 3; break; //@line 923 "fileio.c"
      case 2: // $bb1
        var $6=$self_addr; //@line 925 "fileio.c"
        var $7=$6+8; //@line 925 "fileio.c"
        var $8=HEAP[$7]; //@line 925 "fileio.c"
        var $9=_isatty($8); //@line 925 "fileio.c"
        $res=$9; //@line 925 "fileio.c"
        var $10=$res; //@line 927 "fileio.c"
        var $11=_PyBool_FromLong($10); //@line 927 "fileio.c"
        $0=$11; //@line 927 "fileio.c"
        __label__ = 3; break; //@line 927 "fileio.c"
      case 3: // $bb2
        var $12=$0; //@line 923 "fileio.c"
        $retval=$12; //@line 923 "fileio.c"
        var $retval3=$retval; //@line 923 "fileio.c"
        ;
        return $retval3; //@line 923 "fileio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _get_closed($self, $closure) {
    ;
    var __label__;
  
    var $self_addr;
    var $closure_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $closure_addr=$closure;
    var $1=$self_addr; //@line 1031 "fileio.c"
    var $2=$1+8; //@line 1031 "fileio.c"
    var $3=HEAP[$2]; //@line 1031 "fileio.c"
    var $4=($3) < 0; //@line 1031 "fileio.c"
    var $5=($4); //@line 1031 "fileio.c"
    var $6=_PyBool_FromLong($5); //@line 1031 "fileio.c"
    $0=$6; //@line 1031 "fileio.c"
    var $7=$0; //@line 1031 "fileio.c"
    $retval=$7; //@line 1031 "fileio.c"
    var $retval1=$retval; //@line 1031 "fileio.c"
    ;
    return $retval1; //@line 1031 "fileio.c"
  }
  

  function _get_closefd($self, $closure) {
    ;
    var __label__;
  
    var $self_addr;
    var $closure_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $closure_addr=$closure;
    var $1=$self_addr; //@line 1037 "fileio.c"
    var $2=$1+12; //@line 1037 "fileio.c"
    var $3=HEAP[$2]; //@line 1037 "fileio.c"
    var $4=($3) << 27; //@line 1037 "fileio.c"
    var $5=($4) >>> 31; //@line 1037 "fileio.c"
    var $6=((($5)) & 1); //@line 1037 "fileio.c"
    var $7=($6); //@line 1037 "fileio.c"
    var $8=_PyBool_FromLong($7); //@line 1037 "fileio.c"
    $0=$8; //@line 1037 "fileio.c"
    var $9=$0; //@line 1037 "fileio.c"
    $retval=$9; //@line 1037 "fileio.c"
    var $retval1=$retval; //@line 1037 "fileio.c"
    ;
    return $retval1; //@line 1037 "fileio.c"
  }
  

  function _get_mode($self, $closure) {
    ;
    var __label__;
  
    var $self_addr;
    var $closure_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $closure_addr=$closure;
    var $1=$self_addr; //@line 1043 "fileio.c"
    var $2=_mode_string($1); //@line 1043 "fileio.c"
    var $3=_PyUnicodeUCS2_FromString($2); //@line 1043 "fileio.c"
    $0=$3; //@line 1043 "fileio.c"
    var $4=$0; //@line 1043 "fileio.c"
    $retval=$4; //@line 1043 "fileio.c"
    var $retval1=$retval; //@line 1043 "fileio.c"
    ;
    return $retval1; //@line 1043 "fileio.c"
  }
  

  function _iobase_unsupported($message) {
    ;
    var __label__;
  
    var $message_addr;
    var $retval;
    var $0;
    $message_addr=$message;
    var $1=HEAP[__PyIO_unsupported_operation]; //@line 68 "iobase.c"
    var $2=$message_addr; //@line 68 "iobase.c"
    _PyErr_SetString($1, $2); //@line 68 "iobase.c"
    $0=0; //@line 69 "iobase.c"
    var $3=$0; //@line 69 "iobase.c"
    $retval=$3; //@line 69 "iobase.c"
    var $retval1=$retval; //@line 69 "iobase.c"
    ;
    return $retval1; //@line 69 "iobase.c"
  }
  

  function _iobase_seek($self, $args) {
    ;
    var __label__;
  
    var $self_addr;
    var $args_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $args_addr=$args;
    var $1=_iobase_unsupported(__str181); //@line 90 "iobase.c"
    $0=$1; //@line 90 "iobase.c"
    var $2=$0; //@line 90 "iobase.c"
    $retval=$2; //@line 90 "iobase.c"
    var $retval1=$retval; //@line 90 "iobase.c"
    ;
    return $retval1; //@line 90 "iobase.c"
  }
  

  function _iobase_tell($self, $args) {
    ;
    var __label__;
  
    var $self_addr;
    var $args_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $args_addr=$args;
    var $1=$self_addr; //@line 99 "iobase.c"
    var $2=__PyObject_CallMethod_SizeT($1, __str181, __str1182, allocate([0,0,0,0,1,0,0,0], ["i32",0,0,0,"i32",0,0,0], ALLOC_STACK)); //@line 99 "iobase.c"
    $0=$2; //@line 99 "iobase.c"
    var $3=$0; //@line 99 "iobase.c"
    $retval=$3; //@line 99 "iobase.c"
    var $retval1=$retval; //@line 99 "iobase.c"
    ;
    return $retval1; //@line 99 "iobase.c"
  }
  

  function _iobase_truncate($self, $args) {
    ;
    var __label__;
  
    var $self_addr;
    var $args_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $args_addr=$args;
    var $1=_iobase_unsupported(__str2183); //@line 111 "iobase.c"
    $0=$1; //@line 111 "iobase.c"
    var $2=$0; //@line 111 "iobase.c"
    $retval=$2; //@line 111 "iobase.c"
    var $retval1=$retval; //@line 111 "iobase.c"
    ;
    return $retval1; //@line 111 "iobase.c"
  }
  

  function _iobase_flush($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 125 "iobase.c"
        var $2=_PyObject_HasAttrString($1, __str3184); //@line 125 "iobase.c"
        var $3=($2)!=0; //@line 125 "iobase.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 125 "iobase.c"
      case 1: // $bb
        var $4=HEAP[_PyExc_ValueError]; //@line 126 "iobase.c"
        _PyErr_SetString($4, __str4185); //@line 126 "iobase.c"
        $0=0; //@line 127 "iobase.c"
        __label__ = 3; break; //@line 127 "iobase.c"
      case 2: // $bb1
        var $5=HEAP[__Py_NoneStruct]; //@line 129 "iobase.c"
        var $6=($5) + 1; //@line 129 "iobase.c"
        HEAP[__Py_NoneStruct]=$6; //@line 129 "iobase.c"
        $0=__Py_NoneStruct; //@line 129 "iobase.c"
        __label__ = 3; break; //@line 129 "iobase.c"
      case 3: // $bb2
        var $7=$0; //@line 127 "iobase.c"
        $retval=$7; //@line 127 "iobase.c"
        var $retval3=$retval; //@line 127 "iobase.c"
        ;
        return $retval3; //@line 127 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_closed($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $res;
        var $closed;
        $self_addr=$self;
        var $1=HEAP[__PyIO_str_closed]; //@line 144 "iobase.c"
        var $2=$self_addr; //@line 144 "iobase.c"
        var $3=_PyObject_GetAttr($2, $1); //@line 144 "iobase.c"
        $res=$3; //@line 144 "iobase.c"
        var $4=$res; //@line 145 "iobase.c"
        var $5=($4)==0; //@line 145 "iobase.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 145 "iobase.c"
      case 1: // $bb
        $0=0; //@line 146 "iobase.c"
        __label__ = 5; break; //@line 146 "iobase.c"
      case 2: // $bb1
        var $6=$res; //@line 147 "iobase.c"
        var $7=_PyObject_IsTrue($6); //@line 147 "iobase.c"
        $closed=$7; //@line 147 "iobase.c"
        var $8=$res; //@line 148 "iobase.c"
        var $9=$8; //@line 148 "iobase.c"
        var $10=HEAP[$9]; //@line 148 "iobase.c"
        var $11=($10) - 1; //@line 148 "iobase.c"
        var $12=$res; //@line 148 "iobase.c"
        var $13=$12; //@line 148 "iobase.c"
        HEAP[$13]=$11; //@line 148 "iobase.c"
        var $14=$res; //@line 148 "iobase.c"
        var $15=$14; //@line 148 "iobase.c"
        var $16=HEAP[$15]; //@line 148 "iobase.c"
        var $17=($16)==0; //@line 148 "iobase.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 148 "iobase.c"
      case 3: // $bb2
        var $18=$res; //@line 148 "iobase.c"
        var $19=$18+4; //@line 148 "iobase.c"
        var $20=HEAP[$19]; //@line 148 "iobase.c"
        var $21=$20+24; //@line 148 "iobase.c"
        var $22=HEAP[$21]; //@line 148 "iobase.c"
        var $23=$res; //@line 148 "iobase.c"
        FUNCTION_TABLE[$22]($23); //@line 148 "iobase.c"
        __label__ = 4; break; //@line 148 "iobase.c"
      case 4: // $bb3
        var $24=$closed; //@line 149 "iobase.c"
        $0=$24; //@line 149 "iobase.c"
        __label__ = 5; break; //@line 149 "iobase.c"
      case 5: // $bb4
        var $25=$0; //@line 146 "iobase.c"
        $retval=$25; //@line 146 "iobase.c"
        var $retval5=$retval; //@line 146 "iobase.c"
        ;
        return $retval5; //@line 146 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_closed_get($self, $context) {
    ;
    var __label__;
  
    var $self_addr;
    var $context_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $context_addr=$context;
    var $1=$self_addr; //@line 155 "iobase.c"
    var $2=_PyObject_HasAttrString($1, __str3184); //@line 155 "iobase.c"
    var $3=_PyBool_FromLong($2); //@line 155 "iobase.c"
    $0=$3; //@line 155 "iobase.c"
    var $4=$0; //@line 155 "iobase.c"
    $retval=$4; //@line 155 "iobase.c"
    var $retval1=$retval; //@line 155 "iobase.c"
    ;
    return $retval1; //@line 155 "iobase.c"
  }
  

  function __PyIOBase_check_closed($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 161 "iobase.c"
        var $2=_iobase_closed($1); //@line 161 "iobase.c"
        var $3=($2)!=0; //@line 161 "iobase.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 161 "iobase.c"
      case 1: // $bb
        var $4=HEAP[_PyExc_ValueError]; //@line 162 "iobase.c"
        _PyErr_SetString($4, __str4185); //@line 162 "iobase.c"
        $0=0; //@line 163 "iobase.c"
        __label__ = 5; break; //@line 163 "iobase.c"
      case 2: // $bb1
        var $5=$args_addr; //@line 165 "iobase.c"
        var $6=($5)==(__Py_TrueStruct); //@line 165 "iobase.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 165 "iobase.c"
      case 3: // $bb2
        $0=__Py_NoneStruct; //@line 166 "iobase.c"
        __label__ = 5; break; //@line 166 "iobase.c"
      case 4: // $bb3
        var $7=HEAP[__Py_NoneStruct]; //@line 168 "iobase.c"
        var $8=($7) + 1; //@line 168 "iobase.c"
        HEAP[__Py_NoneStruct]=$8; //@line 168 "iobase.c"
        $0=__Py_NoneStruct; //@line 168 "iobase.c"
        __label__ = 5; break; //@line 168 "iobase.c"
      case 5: // $bb4
        var $9=$0; //@line 163 "iobase.c"
        $retval=$9; //@line 163 "iobase.c"
        var $retval5=$retval; //@line 163 "iobase.c"
        ;
        return $retval5; //@line 163 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_close($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $res;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 180 "iobase.c"
        var $2=_PyObject_HasAttrString($1, __str3184); //@line 180 "iobase.c"
        var $3=($2)!=0; //@line 180 "iobase.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 180 "iobase.c"
      case 1: // $bb
        var $4=HEAP[__Py_NoneStruct]; //@line 181 "iobase.c"
        var $5=($4) + 1; //@line 181 "iobase.c"
        HEAP[__Py_NoneStruct]=$5; //@line 181 "iobase.c"
        $0=__Py_NoneStruct; //@line 181 "iobase.c"
        __label__ = 8; break; //@line 181 "iobase.c"
      case 2: // $bb1
        var $6=HEAP[__PyIO_str_flush]; //@line 183 "iobase.c"
        var $7=$self_addr; //@line 183 "iobase.c"
        var $8=_PyObject_CallMethodObjArgs($7, $6, allocate(4, "i8*", ALLOC_STACK)); //@line 183 "iobase.c"
        $res=$8; //@line 183 "iobase.c"
        var $9=$self_addr; //@line 184 "iobase.c"
        var $10=_PyObject_SetAttrString($9, __str3184, __Py_TrueStruct); //@line 184 "iobase.c"
        var $11=$res; //@line 185 "iobase.c"
        var $12=($11)==0; //@line 185 "iobase.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 185 "iobase.c"
      case 3: // $bb2
        $0=0; //@line 186 "iobase.c"
        __label__ = 8; break; //@line 186 "iobase.c"
      case 4: // $bb3
        var $13=$res; //@line 188 "iobase.c"
        var $14=($13)!=0; //@line 188 "iobase.c"
        if ($14) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 188 "iobase.c"
      case 5: // $bb4
        var $15=$res; //@line 188 "iobase.c"
        var $16=$15; //@line 188 "iobase.c"
        var $17=HEAP[$16]; //@line 188 "iobase.c"
        var $18=($17) - 1; //@line 188 "iobase.c"
        var $19=$res; //@line 188 "iobase.c"
        var $20=$19; //@line 188 "iobase.c"
        HEAP[$20]=$18; //@line 188 "iobase.c"
        var $21=$res; //@line 188 "iobase.c"
        var $22=$21; //@line 188 "iobase.c"
        var $23=HEAP[$22]; //@line 188 "iobase.c"
        var $24=($23)==0; //@line 188 "iobase.c"
        if ($24) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 188 "iobase.c"
      case 6: // $bb5
        var $25=$res; //@line 188 "iobase.c"
        var $26=$25+4; //@line 188 "iobase.c"
        var $27=HEAP[$26]; //@line 188 "iobase.c"
        var $28=$27+24; //@line 188 "iobase.c"
        var $29=HEAP[$28]; //@line 188 "iobase.c"
        var $30=$res; //@line 188 "iobase.c"
        FUNCTION_TABLE[$29]($30); //@line 188 "iobase.c"
        __label__ = 7; break; //@line 188 "iobase.c"
      case 7: // $bb6
        var $31=HEAP[__Py_NoneStruct]; //@line 189 "iobase.c"
        var $32=($31) + 1; //@line 189 "iobase.c"
        HEAP[__Py_NoneStruct]=$32; //@line 189 "iobase.c"
        $0=__Py_NoneStruct; //@line 189 "iobase.c"
        __label__ = 8; break; //@line 189 "iobase.c"
      case 8: // $bb7
        var $33=$0; //@line 181 "iobase.c"
        $retval=$33; //@line 181 "iobase.c"
        var $retval8=$retval; //@line 181 "iobase.c"
        ;
        return $retval8; //@line 181 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __PyIOBase_finalize($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $res;
        var $tp=__stackBase__;
        var $v=__stackBase__+4;
        var $tb=__stackBase__+8;
        var $closed;
        var $is_zombie;
        var $refcnt;
        $self_addr=$self;
        $closed=1; //@line 199 "iobase.c"
        var $1=$self_addr; //@line 204 "iobase.c"
        var $2=$1; //@line 204 "iobase.c"
        var $3=HEAP[$2]; //@line 204 "iobase.c"
        var $4=($3)==0; //@line 204 "iobase.c"
        var $5=($4); //@line 204 "iobase.c"
        $is_zombie=$5; //@line 204 "iobase.c"
        var $6=$is_zombie; //@line 205 "iobase.c"
        var $7=($6)!=0; //@line 205 "iobase.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 205 "iobase.c"
      case 1: // $bb
        var $8=$self_addr; //@line 206 "iobase.c"
        var $9=$8; //@line 206 "iobase.c"
        var $10=HEAP[$9]; //@line 206 "iobase.c"
        var $11=($10) + 1; //@line 206 "iobase.c"
        var $12=$self_addr; //@line 206 "iobase.c"
        var $13=$12; //@line 206 "iobase.c"
        HEAP[$13]=$11; //@line 206 "iobase.c"
        __label__ = 2; break; //@line 206 "iobase.c"
      case 2: // $bb1
        _PyErr_Fetch($tp, $v, $tb); //@line 208 "iobase.c"
        var $14=HEAP[__PyIO_str_closed]; //@line 211 "iobase.c"
        var $15=$self_addr; //@line 211 "iobase.c"
        var $16=_PyObject_GetAttr($15, $14); //@line 211 "iobase.c"
        $res=$16; //@line 211 "iobase.c"
        var $17=($16)==0; //@line 212 "iobase.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 212 "iobase.c"
      case 3: // $bb2
        _PyErr_Clear(); //@line 213 "iobase.c"
        __label__ = 8; break; //@line 213 "iobase.c"
      case 4: // $bb3
        var $18=$res; //@line 215 "iobase.c"
        var $19=_PyObject_IsTrue($18); //@line 215 "iobase.c"
        $closed=$19; //@line 215 "iobase.c"
        var $20=$res; //@line 216 "iobase.c"
        var $21=$20; //@line 216 "iobase.c"
        var $22=HEAP[$21]; //@line 216 "iobase.c"
        var $23=($22) - 1; //@line 216 "iobase.c"
        var $24=$res; //@line 216 "iobase.c"
        var $25=$24; //@line 216 "iobase.c"
        HEAP[$25]=$23; //@line 216 "iobase.c"
        var $26=$res; //@line 216 "iobase.c"
        var $27=$26; //@line 216 "iobase.c"
        var $28=HEAP[$27]; //@line 216 "iobase.c"
        var $29=($28)==0; //@line 216 "iobase.c"
        if ($29) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 216 "iobase.c"
      case 5: // $bb4
        var $30=$res; //@line 216 "iobase.c"
        var $31=$30+4; //@line 216 "iobase.c"
        var $32=HEAP[$31]; //@line 216 "iobase.c"
        var $33=$32+24; //@line 216 "iobase.c"
        var $34=HEAP[$33]; //@line 216 "iobase.c"
        var $35=$res; //@line 216 "iobase.c"
        FUNCTION_TABLE[$34]($35); //@line 216 "iobase.c"
        __label__ = 6; break; //@line 216 "iobase.c"
      case 6: // $bb5
        var $36=$closed; //@line 217 "iobase.c"
        var $37=($36)==-1; //@line 217 "iobase.c"
        if ($37) { __lastLabel__ = 6; __label__ = 7; break; } else { __lastLabel__ = 6; __label__ = 9; break; } //@line 217 "iobase.c"
      case 7: // $bb6
        _PyErr_Clear(); //@line 218 "iobase.c"
        __label__ = 8; break; //@line 218 "iobase.c"
      case 8: // $bb7thread_pre_split
        var $_pr=$closed;
        __lastLabel__ = 8; __label__ = 9; break;
      case 9: // $bb7
        var $38=__lastLabel__ == 8 ? $_pr : ($36);
        var $39=($38)==0; //@line 220 "iobase.c"
        if ($39) { __label__ = 10; break; } else { __label__ = 14; break; } //@line 220 "iobase.c"
      case 10: // $bb8
        var $40=HEAP[__PyIO_str_close]; //@line 221 "iobase.c"
        var $41=$self_addr; //@line 221 "iobase.c"
        var $42=_PyObject_CallMethodObjArgs($41, $40, allocate(4, "i8*", ALLOC_STACK)); //@line 221 "iobase.c"
        $res=$42; //@line 221 "iobase.c"
        var $43=$res; //@line 226 "iobase.c"
        var $44=($43)==0; //@line 226 "iobase.c"
        if ($44) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 226 "iobase.c"
      case 11: // $bb9
        _PyErr_Clear(); //@line 227 "iobase.c"
        __label__ = 14; break; //@line 227 "iobase.c"
      case 12: // $bb10
        var $45=$res; //@line 229 "iobase.c"
        var $46=$45; //@line 229 "iobase.c"
        var $47=HEAP[$46]; //@line 229 "iobase.c"
        var $48=($47) - 1; //@line 229 "iobase.c"
        var $49=$res; //@line 229 "iobase.c"
        var $50=$49; //@line 229 "iobase.c"
        HEAP[$50]=$48; //@line 229 "iobase.c"
        var $51=$res; //@line 229 "iobase.c"
        var $52=$51; //@line 229 "iobase.c"
        var $53=HEAP[$52]; //@line 229 "iobase.c"
        var $54=($53)==0; //@line 229 "iobase.c"
        if ($54) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 229 "iobase.c"
      case 13: // $bb11
        var $55=$res; //@line 229 "iobase.c"
        var $56=$55+4; //@line 229 "iobase.c"
        var $57=HEAP[$56]; //@line 229 "iobase.c"
        var $58=$57+24; //@line 229 "iobase.c"
        var $59=HEAP[$58]; //@line 229 "iobase.c"
        var $60=$res; //@line 229 "iobase.c"
        FUNCTION_TABLE[$59]($60); //@line 229 "iobase.c"
        __label__ = 14; break; //@line 229 "iobase.c"
      case 14: // $bb12
        var $61=HEAP[$tb]; //@line 231 "iobase.c"
        var $62=HEAP[$v]; //@line 231 "iobase.c"
        var $63=HEAP[$tp]; //@line 231 "iobase.c"
        _PyErr_Restore($63, $62, $61); //@line 231 "iobase.c"
        var $64=$is_zombie; //@line 232 "iobase.c"
        var $65=($64)!=0; //@line 232 "iobase.c"
        if ($65) { __label__ = 15; break; } else { __label__ = 17; break; } //@line 232 "iobase.c"
      case 15: // $bb13
        var $66=$self_addr; //@line 233 "iobase.c"
        var $67=$66; //@line 233 "iobase.c"
        var $68=HEAP[$67]; //@line 233 "iobase.c"
        var $69=($68) - 1; //@line 233 "iobase.c"
        var $70=$self_addr; //@line 233 "iobase.c"
        var $71=$70; //@line 233 "iobase.c"
        HEAP[$71]=$69; //@line 233 "iobase.c"
        var $72=$self_addr; //@line 233 "iobase.c"
        var $73=$72; //@line 233 "iobase.c"
        var $74=HEAP[$73]; //@line 233 "iobase.c"
        var $75=($74)!=0; //@line 233 "iobase.c"
        if ($75) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 233 "iobase.c"
      case 16: // $bb14
        var $76=$self_addr; //@line 236 "iobase.c"
        var $77=$76; //@line 236 "iobase.c"
        var $78=HEAP[$77]; //@line 236 "iobase.c"
        $refcnt=$78; //@line 236 "iobase.c"
        var $79=$self_addr; //@line 237 "iobase.c"
        var $80=$79; //@line 237 "iobase.c"
        HEAP[$80]=1; //@line 237 "iobase.c"
        var $81=$self_addr; //@line 238 "iobase.c"
        var $82=$81; //@line 238 "iobase.c"
        var $83=$refcnt; //@line 238 "iobase.c"
        HEAP[$82]=$83; //@line 238 "iobase.c"
        $0=-1; //@line 252 "iobase.c"
        __label__ = 18; break; //@line 252 "iobase.c"
      case 17: // $bb15
        $0=0; //@line 255 "iobase.c"
        __label__ = 18; break; //@line 255 "iobase.c"
      case 18: // $bb16
        var $84=$0; //@line 252 "iobase.c"
        $retval=$84; //@line 252 "iobase.c"
        var $retval17=$retval; //@line 252 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval17; //@line 252 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_traverse($self, $visit, $arg) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $visit_addr;
        var $arg_addr;
        var $retval;
        var $0;
        var $vret;
        $self_addr=$self;
        $visit_addr=$visit;
        $arg_addr=$arg;
        var $1=$self_addr; //@line 261 "iobase.c"
        var $2=$1+8; //@line 261 "iobase.c"
        var $3=HEAP[$2]; //@line 261 "iobase.c"
        var $4=($3)!=0; //@line 261 "iobase.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 261 "iobase.c"
      case 1: // $bb
        var $5=$self_addr; //@line 261 "iobase.c"
        var $6=$5+8; //@line 261 "iobase.c"
        var $7=HEAP[$6]; //@line 261 "iobase.c"
        var $8=$visit_addr; //@line 261 "iobase.c"
        var $9=$arg_addr; //@line 261 "iobase.c"
        var $10=FUNCTION_TABLE[$8]($7, $9); //@line 261 "iobase.c"
        $vret=$10; //@line 261 "iobase.c"
        var $11=$vret; //@line 261 "iobase.c"
        var $12=($11)!=0; //@line 261 "iobase.c"
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 261 "iobase.c"
      case 2: // $bb1
        var $13=$vret; //@line 261 "iobase.c"
        $0=$13; //@line 261 "iobase.c"
        __label__ = 4; break; //@line 261 "iobase.c"
      case 3: // $bb2
        $0=0; //@line 262 "iobase.c"
        __label__ = 4; break; //@line 262 "iobase.c"
      case 4: // $bb3
        var $14=$0; //@line 261 "iobase.c"
        $retval=$14; //@line 261 "iobase.c"
        var $retval4=$retval; //@line 261 "iobase.c"
        ;
        return $retval4; //@line 261 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_clear($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $_py_tmp;
        $self_addr=$self;
        var $1=$self_addr; //@line 268 "iobase.c"
        var $2=$1; //@line 268 "iobase.c"
        var $3=__PyIOBase_finalize($2); //@line 268 "iobase.c"
        var $4=($3) < 0; //@line 268 "iobase.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 268 "iobase.c"
      case 1: // $bb
        $0=-1; //@line 269 "iobase.c"
        __label__ = 6; break; //@line 269 "iobase.c"
      case 2: // $bb1
        var $5=$self_addr; //@line 270 "iobase.c"
        var $6=$5+8; //@line 270 "iobase.c"
        var $7=HEAP[$6]; //@line 270 "iobase.c"
        var $8=($7)!=0; //@line 270 "iobase.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 270 "iobase.c"
      case 3: // $bb2
        var $9=$self_addr; //@line 270 "iobase.c"
        var $10=$9+8; //@line 270 "iobase.c"
        var $11=HEAP[$10]; //@line 270 "iobase.c"
        $_py_tmp=$11; //@line 270 "iobase.c"
        var $12=$self_addr; //@line 270 "iobase.c"
        var $13=$12+8; //@line 270 "iobase.c"
        HEAP[$13]=0; //@line 270 "iobase.c"
        var $14=$_py_tmp; //@line 270 "iobase.c"
        var $15=$14; //@line 270 "iobase.c"
        var $16=HEAP[$15]; //@line 270 "iobase.c"
        var $17=($16) - 1; //@line 270 "iobase.c"
        var $18=$_py_tmp; //@line 270 "iobase.c"
        var $19=$18; //@line 270 "iobase.c"
        HEAP[$19]=$17; //@line 270 "iobase.c"
        var $20=$_py_tmp; //@line 270 "iobase.c"
        var $21=$20; //@line 270 "iobase.c"
        var $22=HEAP[$21]; //@line 270 "iobase.c"
        var $23=($22)==0; //@line 270 "iobase.c"
        if ($23) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 270 "iobase.c"
      case 4: // $bb3
        var $24=$_py_tmp; //@line 270 "iobase.c"
        var $25=$24+4; //@line 270 "iobase.c"
        var $26=HEAP[$25]; //@line 270 "iobase.c"
        var $27=$26+24; //@line 270 "iobase.c"
        var $28=HEAP[$27]; //@line 270 "iobase.c"
        var $29=$_py_tmp; //@line 270 "iobase.c"
        FUNCTION_TABLE[$28]($29); //@line 270 "iobase.c"
        __label__ = 5; break; //@line 270 "iobase.c"
      case 5: // $bb4
        $0=0; //@line 271 "iobase.c"
        __label__ = 6; break; //@line 271 "iobase.c"
      case 6: // $bb5
        var $30=$0; //@line 269 "iobase.c"
        $retval=$30; //@line 269 "iobase.c"
        var $retval6=$retval; //@line 269 "iobase.c"
        ;
        return $retval6; //@line 269 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_dealloc($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $g;
        var $_py_tmp;
        $self_addr=$self;
        var $0=$self_addr; //@line 284 "iobase.c"
        var $1=$0; //@line 284 "iobase.c"
        var $2=__PyIOBase_finalize($1); //@line 284 "iobase.c"
        var $3=($2) < 0; //@line 284 "iobase.c"
        var $4=$self_addr; //@line 287 "iobase.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 284 "iobase.c"
      case 1: // $bb
        var $5=$4; //@line 287 "iobase.c"
        var $6=$5+4; //@line 287 "iobase.c"
        var $7=HEAP[$6]; //@line 287 "iobase.c"
        var $8=$7+84; //@line 287 "iobase.c"
        var $9=HEAP[$8]; //@line 287 "iobase.c"
        var $10=($9) & 512; //@line 287 "iobase.c"
        var $11=($10)!=0; //@line 287 "iobase.c"
        if ($11) { __label__ = 2; break; } else { __label__ = 11; break; } //@line 287 "iobase.c"
      case 2: // $bb1
        var $12=$self_addr; //@line 288 "iobase.c"
        var $13=$12; //@line 288 "iobase.c"
        var $14=$13+4; //@line 288 "iobase.c"
        var $15=HEAP[$14]; //@line 288 "iobase.c"
        var $16=$15; //@line 288 "iobase.c"
        var $17=$16; //@line 288 "iobase.c"
        var $18=HEAP[$17]; //@line 288 "iobase.c"
        var $19=($18) + 1; //@line 288 "iobase.c"
        var $20=$16; //@line 288 "iobase.c"
        HEAP[$20]=$19; //@line 288 "iobase.c"
        __label__ = 11; break; //@line 288 "iobase.c"
      case 3: // $bb3
        var $21=$4; //@line 291 "iobase.c"
        var $22=$21+-12; //@line 291 "iobase.c"
        $g=$22; //@line 291 "iobase.c"
        var $23=$g; //@line 291 "iobase.c"
        var $24=$23; //@line 291 "iobase.c"
        var $25=$24+8; //@line 291 "iobase.c"
        var $26=HEAP[$25]; //@line 291 "iobase.c"
        var $27=($26)==-2; //@line 291 "iobase.c"
        if ($27) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 291 "iobase.c"
      case 4: // $bb4
        ___assert_fail(__str5186, __str6187, 291, ___PRETTY_FUNCTION___8634); //@line 291 "iobase.c"
        throw "Reached an unreachable!" //@line 291 "iobase.c"
      case 5: // $bb5
        var $28=$g; //@line 291 "iobase.c"
        var $29=$28; //@line 291 "iobase.c"
        var $30=$29+8; //@line 291 "iobase.c"
        HEAP[$30]=-2; //@line 291 "iobase.c"
        var $31=$g; //@line 291 "iobase.c"
        var $32=$31; //@line 291 "iobase.c"
        var $33=$32+4; //@line 291 "iobase.c"
        var $34=HEAP[$33]; //@line 291 "iobase.c"
        var $35=$g; //@line 291 "iobase.c"
        var $36=$35; //@line 291 "iobase.c"
        var $37=$36; //@line 291 "iobase.c"
        var $38=HEAP[$37]; //@line 291 "iobase.c"
        var $39=$34; //@line 291 "iobase.c"
        var $40=$39; //@line 291 "iobase.c"
        HEAP[$40]=$38; //@line 291 "iobase.c"
        var $41=$g; //@line 291 "iobase.c"
        var $42=$41; //@line 291 "iobase.c"
        var $43=$42; //@line 291 "iobase.c"
        var $44=HEAP[$43]; //@line 291 "iobase.c"
        var $45=$g; //@line 291 "iobase.c"
        var $46=$45; //@line 291 "iobase.c"
        var $47=$46+4; //@line 291 "iobase.c"
        var $48=HEAP[$47]; //@line 291 "iobase.c"
        var $49=$44; //@line 291 "iobase.c"
        var $50=$49+4; //@line 291 "iobase.c"
        HEAP[$50]=$48; //@line 291 "iobase.c"
        var $51=$g; //@line 291 "iobase.c"
        var $52=$51; //@line 291 "iobase.c"
        var $53=$52; //@line 291 "iobase.c"
        HEAP[$53]=0; //@line 291 "iobase.c"
        var $54=$self_addr; //@line 292 "iobase.c"
        var $55=$54+12; //@line 292 "iobase.c"
        var $56=HEAP[$55]; //@line 292 "iobase.c"
        var $57=($56)!=0; //@line 292 "iobase.c"
        if ($57) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 292 "iobase.c"
      case 6: // $bb6
        var $58=$self_addr; //@line 293 "iobase.c"
        var $59=$58; //@line 293 "iobase.c"
        _PyObject_ClearWeakRefs($59); //@line 293 "iobase.c"
        __label__ = 7; break; //@line 293 "iobase.c"
      case 7: // $bb7
        var $60=$self_addr; //@line 294 "iobase.c"
        var $61=$60+8; //@line 294 "iobase.c"
        var $62=HEAP[$61]; //@line 294 "iobase.c"
        var $63=($62)!=0; //@line 294 "iobase.c"
        if ($63) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 294 "iobase.c"
      case 8: // $bb8
        var $64=$self_addr; //@line 294 "iobase.c"
        var $65=$64+8; //@line 294 "iobase.c"
        var $66=HEAP[$65]; //@line 294 "iobase.c"
        $_py_tmp=$66; //@line 294 "iobase.c"
        var $67=$self_addr; //@line 294 "iobase.c"
        var $68=$67+8; //@line 294 "iobase.c"
        HEAP[$68]=0; //@line 294 "iobase.c"
        var $69=$_py_tmp; //@line 294 "iobase.c"
        var $70=$69; //@line 294 "iobase.c"
        var $71=HEAP[$70]; //@line 294 "iobase.c"
        var $72=($71) - 1; //@line 294 "iobase.c"
        var $73=$_py_tmp; //@line 294 "iobase.c"
        var $74=$73; //@line 294 "iobase.c"
        HEAP[$74]=$72; //@line 294 "iobase.c"
        var $75=$_py_tmp; //@line 294 "iobase.c"
        var $76=$75; //@line 294 "iobase.c"
        var $77=HEAP[$76]; //@line 294 "iobase.c"
        var $78=($77)==0; //@line 294 "iobase.c"
        if ($78) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 294 "iobase.c"
      case 9: // $bb9
        var $79=$_py_tmp; //@line 294 "iobase.c"
        var $80=$79+4; //@line 294 "iobase.c"
        var $81=HEAP[$80]; //@line 294 "iobase.c"
        var $82=$81+24; //@line 294 "iobase.c"
        var $83=HEAP[$82]; //@line 294 "iobase.c"
        var $84=$_py_tmp; //@line 294 "iobase.c"
        FUNCTION_TABLE[$83]($84); //@line 294 "iobase.c"
        __label__ = 10; break; //@line 294 "iobase.c"
      case 10: // $bb10
        var $85=$self_addr; //@line 295 "iobase.c"
        var $86=$85; //@line 295 "iobase.c"
        var $87=$86+4; //@line 295 "iobase.c"
        var $88=HEAP[$87]; //@line 295 "iobase.c"
        var $89=$88+160; //@line 295 "iobase.c"
        var $90=HEAP[$89]; //@line 295 "iobase.c"
        var $91=$self_addr; //@line 295 "iobase.c"
        var $92=$91; //@line 295 "iobase.c"
        FUNCTION_TABLE[$90]($92); //@line 295 "iobase.c"
        __label__ = 11; break; //@line 295 "iobase.c"
      case 11: // $return
        ;
        return; //@line 289 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_seekable($self, $args) {
    ;
    var __label__;
  
    var $self_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    var $1=HEAP[__Py_ZeroStruct]; //@line 309 "iobase.c"
    var $2=($1) + 1; //@line 309 "iobase.c"
    HEAP[__Py_ZeroStruct]=$2; //@line 309 "iobase.c"
    $0=__Py_ZeroStruct; //@line 309 "iobase.c"
    var $3=$0; //@line 309 "iobase.c"
    $retval=$3; //@line 309 "iobase.c"
    var $retval1=$retval; //@line 309 "iobase.c"
    ;
    return $retval1; //@line 309 "iobase.c"
  }
  

  function __PyIOBase_check_seekable($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $res;
        var $_py_tmp;
        $self_addr=$self;
        $args_addr=$args;
        var $1=HEAP[__PyIO_str_seekable]; //@line 315 "iobase.c"
        var $2=$self_addr; //@line 315 "iobase.c"
        var $3=_PyObject_CallMethodObjArgs($2, $1, allocate(4, "i8*", ALLOC_STACK)); //@line 315 "iobase.c"
        $res=$3; //@line 315 "iobase.c"
        var $4=$res; //@line 316 "iobase.c"
        var $5=($4)==0; //@line 316 "iobase.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 316 "iobase.c"
      case 1: // $bb
        $0=0; //@line 317 "iobase.c"
        __label__ = 11; break; //@line 317 "iobase.c"
      case 2: // $bb1
        var $6=$res; //@line 318 "iobase.c"
        var $7=($6)!=(__Py_TrueStruct); //@line 318 "iobase.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 318 "iobase.c"
      case 3: // $bb2
        var $8=$res; //@line 319 "iobase.c"
        var $9=($8)!=0; //@line 319 "iobase.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 319 "iobase.c"
      case 4: // $bb3
        var $10=$res; //@line 319 "iobase.c"
        $_py_tmp=$10; //@line 319 "iobase.c"
        $res=0; //@line 319 "iobase.c"
        var $11=$_py_tmp; //@line 319 "iobase.c"
        var $12=$11; //@line 319 "iobase.c"
        var $13=HEAP[$12]; //@line 319 "iobase.c"
        var $14=($13) - 1; //@line 319 "iobase.c"
        var $15=$_py_tmp; //@line 319 "iobase.c"
        var $16=$15; //@line 319 "iobase.c"
        HEAP[$16]=$14; //@line 319 "iobase.c"
        var $17=$_py_tmp; //@line 319 "iobase.c"
        var $18=$17; //@line 319 "iobase.c"
        var $19=HEAP[$18]; //@line 319 "iobase.c"
        var $20=($19)==0; //@line 319 "iobase.c"
        if ($20) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 319 "iobase.c"
      case 5: // $bb4
        var $21=$_py_tmp; //@line 319 "iobase.c"
        var $22=$21+4; //@line 319 "iobase.c"
        var $23=HEAP[$22]; //@line 319 "iobase.c"
        var $24=$23+24; //@line 319 "iobase.c"
        var $25=HEAP[$24]; //@line 319 "iobase.c"
        var $26=$_py_tmp; //@line 319 "iobase.c"
        FUNCTION_TABLE[$25]($26); //@line 319 "iobase.c"
        __label__ = 6; break; //@line 319 "iobase.c"
      case 6: // $bb5
        var $27=HEAP[_PyExc_IOError]; //@line 320 "iobase.c"
        _PyErr_SetString($27, __str7188); //@line 320 "iobase.c"
        $0=0; //@line 321 "iobase.c"
        __label__ = 11; break; //@line 321 "iobase.c"
      case 7: // $bb6
        var $28=$args_addr; //@line 323 "iobase.c"
        var $29=($28)==(__Py_TrueStruct); //@line 323 "iobase.c"
        if ($29) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 323 "iobase.c"
      case 8: // $bb7
        var $30=$res; //@line 324 "iobase.c"
        var $31=$30; //@line 324 "iobase.c"
        var $32=HEAP[$31]; //@line 324 "iobase.c"
        var $33=($32) - 1; //@line 324 "iobase.c"
        var $34=$res; //@line 324 "iobase.c"
        var $35=$34; //@line 324 "iobase.c"
        HEAP[$35]=$33; //@line 324 "iobase.c"
        var $36=$res; //@line 324 "iobase.c"
        var $37=$36; //@line 324 "iobase.c"
        var $38=HEAP[$37]; //@line 324 "iobase.c"
        var $39=($38)==0; //@line 324 "iobase.c"
        if ($39) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 324 "iobase.c"
      case 9: // $bb8
        var $40=$res; //@line 324 "iobase.c"
        var $41=$40+4; //@line 324 "iobase.c"
        var $42=HEAP[$41]; //@line 324 "iobase.c"
        var $43=$42+24; //@line 324 "iobase.c"
        var $44=HEAP[$43]; //@line 324 "iobase.c"
        var $45=$res; //@line 324 "iobase.c"
        FUNCTION_TABLE[$44]($45); //@line 324 "iobase.c"
        __label__ = 10; break; //@line 324 "iobase.c"
      case 10: // $bb9
        var $46=$res; //@line 326 "iobase.c"
        $0=$46; //@line 326 "iobase.c"
        __label__ = 11; break; //@line 326 "iobase.c"
      case 11: // $bb10
        var $47=$0; //@line 317 "iobase.c"
        $retval=$47; //@line 317 "iobase.c"
        var $retval11=$retval; //@line 317 "iobase.c"
        ;
        return $retval11; //@line 317 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_readable($self, $args) {
    ;
    var __label__;
  
    var $self_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    var $1=HEAP[__Py_ZeroStruct]; //@line 337 "iobase.c"
    var $2=($1) + 1; //@line 337 "iobase.c"
    HEAP[__Py_ZeroStruct]=$2; //@line 337 "iobase.c"
    $0=__Py_ZeroStruct; //@line 337 "iobase.c"
    var $3=$0; //@line 337 "iobase.c"
    $retval=$3; //@line 337 "iobase.c"
    var $retval1=$retval; //@line 337 "iobase.c"
    ;
    return $retval1; //@line 337 "iobase.c"
  }
  

  function __PyIOBase_check_readable($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $res;
        var $_py_tmp;
        $self_addr=$self;
        $args_addr=$args;
        var $1=HEAP[__PyIO_str_readable]; //@line 344 "iobase.c"
        var $2=$self_addr; //@line 344 "iobase.c"
        var $3=_PyObject_CallMethodObjArgs($2, $1, allocate(4, "i8*", ALLOC_STACK)); //@line 344 "iobase.c"
        $res=$3; //@line 344 "iobase.c"
        var $4=$res; //@line 345 "iobase.c"
        var $5=($4)==0; //@line 345 "iobase.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 345 "iobase.c"
      case 1: // $bb
        $0=0; //@line 346 "iobase.c"
        __label__ = 11; break; //@line 346 "iobase.c"
      case 2: // $bb1
        var $6=$res; //@line 347 "iobase.c"
        var $7=($6)!=(__Py_TrueStruct); //@line 347 "iobase.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 347 "iobase.c"
      case 3: // $bb2
        var $8=$res; //@line 348 "iobase.c"
        var $9=($8)!=0; //@line 348 "iobase.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 348 "iobase.c"
      case 4: // $bb3
        var $10=$res; //@line 348 "iobase.c"
        $_py_tmp=$10; //@line 348 "iobase.c"
        $res=0; //@line 348 "iobase.c"
        var $11=$_py_tmp; //@line 348 "iobase.c"
        var $12=$11; //@line 348 "iobase.c"
        var $13=HEAP[$12]; //@line 348 "iobase.c"
        var $14=($13) - 1; //@line 348 "iobase.c"
        var $15=$_py_tmp; //@line 348 "iobase.c"
        var $16=$15; //@line 348 "iobase.c"
        HEAP[$16]=$14; //@line 348 "iobase.c"
        var $17=$_py_tmp; //@line 348 "iobase.c"
        var $18=$17; //@line 348 "iobase.c"
        var $19=HEAP[$18]; //@line 348 "iobase.c"
        var $20=($19)==0; //@line 348 "iobase.c"
        if ($20) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 348 "iobase.c"
      case 5: // $bb4
        var $21=$_py_tmp; //@line 348 "iobase.c"
        var $22=$21+4; //@line 348 "iobase.c"
        var $23=HEAP[$22]; //@line 348 "iobase.c"
        var $24=$23+24; //@line 348 "iobase.c"
        var $25=HEAP[$24]; //@line 348 "iobase.c"
        var $26=$_py_tmp; //@line 348 "iobase.c"
        FUNCTION_TABLE[$25]($26); //@line 348 "iobase.c"
        __label__ = 6; break; //@line 348 "iobase.c"
      case 6: // $bb5
        var $27=HEAP[_PyExc_IOError]; //@line 349 "iobase.c"
        _PyErr_SetString($27, __str8189); //@line 349 "iobase.c"
        $0=0; //@line 350 "iobase.c"
        __label__ = 11; break; //@line 350 "iobase.c"
      case 7: // $bb6
        var $28=$args_addr; //@line 352 "iobase.c"
        var $29=($28)==(__Py_TrueStruct); //@line 352 "iobase.c"
        if ($29) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 352 "iobase.c"
      case 8: // $bb7
        var $30=$res; //@line 353 "iobase.c"
        var $31=$30; //@line 353 "iobase.c"
        var $32=HEAP[$31]; //@line 353 "iobase.c"
        var $33=($32) - 1; //@line 353 "iobase.c"
        var $34=$res; //@line 353 "iobase.c"
        var $35=$34; //@line 353 "iobase.c"
        HEAP[$35]=$33; //@line 353 "iobase.c"
        var $36=$res; //@line 353 "iobase.c"
        var $37=$36; //@line 353 "iobase.c"
        var $38=HEAP[$37]; //@line 353 "iobase.c"
        var $39=($38)==0; //@line 353 "iobase.c"
        if ($39) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 353 "iobase.c"
      case 9: // $bb8
        var $40=$res; //@line 353 "iobase.c"
        var $41=$40+4; //@line 353 "iobase.c"
        var $42=HEAP[$41]; //@line 353 "iobase.c"
        var $43=$42+24; //@line 353 "iobase.c"
        var $44=HEAP[$43]; //@line 353 "iobase.c"
        var $45=$res; //@line 353 "iobase.c"
        FUNCTION_TABLE[$44]($45); //@line 353 "iobase.c"
        __label__ = 10; break; //@line 353 "iobase.c"
      case 10: // $bb9
        var $46=$res; //@line 355 "iobase.c"
        $0=$46; //@line 355 "iobase.c"
        __label__ = 11; break; //@line 355 "iobase.c"
      case 11: // $bb10
        var $47=$0; //@line 346 "iobase.c"
        $retval=$47; //@line 346 "iobase.c"
        var $retval11=$retval; //@line 346 "iobase.c"
        ;
        return $retval11; //@line 346 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_writable($self, $args) {
    ;
    var __label__;
  
    var $self_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    var $1=HEAP[__Py_ZeroStruct]; //@line 366 "iobase.c"
    var $2=($1) + 1; //@line 366 "iobase.c"
    HEAP[__Py_ZeroStruct]=$2; //@line 366 "iobase.c"
    $0=__Py_ZeroStruct; //@line 366 "iobase.c"
    var $3=$0; //@line 366 "iobase.c"
    $retval=$3; //@line 366 "iobase.c"
    var $retval1=$retval; //@line 366 "iobase.c"
    ;
    return $retval1; //@line 366 "iobase.c"
  }
  

  function __PyIOBase_check_writable($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $res;
        var $_py_tmp;
        $self_addr=$self;
        $args_addr=$args;
        var $1=HEAP[__PyIO_str_writable]; //@line 373 "iobase.c"
        var $2=$self_addr; //@line 373 "iobase.c"
        var $3=_PyObject_CallMethodObjArgs($2, $1, allocate(4, "i8*", ALLOC_STACK)); //@line 373 "iobase.c"
        $res=$3; //@line 373 "iobase.c"
        var $4=$res; //@line 374 "iobase.c"
        var $5=($4)==0; //@line 374 "iobase.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 374 "iobase.c"
      case 1: // $bb
        $0=0; //@line 375 "iobase.c"
        __label__ = 11; break; //@line 375 "iobase.c"
      case 2: // $bb1
        var $6=$res; //@line 376 "iobase.c"
        var $7=($6)!=(__Py_TrueStruct); //@line 376 "iobase.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 376 "iobase.c"
      case 3: // $bb2
        var $8=$res; //@line 377 "iobase.c"
        var $9=($8)!=0; //@line 377 "iobase.c"
        if ($9) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 377 "iobase.c"
      case 4: // $bb3
        var $10=$res; //@line 377 "iobase.c"
        $_py_tmp=$10; //@line 377 "iobase.c"
        $res=0; //@line 377 "iobase.c"
        var $11=$_py_tmp; //@line 377 "iobase.c"
        var $12=$11; //@line 377 "iobase.c"
        var $13=HEAP[$12]; //@line 377 "iobase.c"
        var $14=($13) - 1; //@line 377 "iobase.c"
        var $15=$_py_tmp; //@line 377 "iobase.c"
        var $16=$15; //@line 377 "iobase.c"
        HEAP[$16]=$14; //@line 377 "iobase.c"
        var $17=$_py_tmp; //@line 377 "iobase.c"
        var $18=$17; //@line 377 "iobase.c"
        var $19=HEAP[$18]; //@line 377 "iobase.c"
        var $20=($19)==0; //@line 377 "iobase.c"
        if ($20) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 377 "iobase.c"
      case 5: // $bb4
        var $21=$_py_tmp; //@line 377 "iobase.c"
        var $22=$21+4; //@line 377 "iobase.c"
        var $23=HEAP[$22]; //@line 377 "iobase.c"
        var $24=$23+24; //@line 377 "iobase.c"
        var $25=HEAP[$24]; //@line 377 "iobase.c"
        var $26=$_py_tmp; //@line 377 "iobase.c"
        FUNCTION_TABLE[$25]($26); //@line 377 "iobase.c"
        __label__ = 6; break; //@line 377 "iobase.c"
      case 6: // $bb5
        var $27=HEAP[_PyExc_IOError]; //@line 378 "iobase.c"
        _PyErr_SetString($27, __str9190); //@line 378 "iobase.c"
        $0=0; //@line 379 "iobase.c"
        __label__ = 11; break; //@line 379 "iobase.c"
      case 7: // $bb6
        var $28=$args_addr; //@line 381 "iobase.c"
        var $29=($28)==(__Py_TrueStruct); //@line 381 "iobase.c"
        if ($29) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 381 "iobase.c"
      case 8: // $bb7
        var $30=$res; //@line 382 "iobase.c"
        var $31=$30; //@line 382 "iobase.c"
        var $32=HEAP[$31]; //@line 382 "iobase.c"
        var $33=($32) - 1; //@line 382 "iobase.c"
        var $34=$res; //@line 382 "iobase.c"
        var $35=$34; //@line 382 "iobase.c"
        HEAP[$35]=$33; //@line 382 "iobase.c"
        var $36=$res; //@line 382 "iobase.c"
        var $37=$36; //@line 382 "iobase.c"
        var $38=HEAP[$37]; //@line 382 "iobase.c"
        var $39=($38)==0; //@line 382 "iobase.c"
        if ($39) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 382 "iobase.c"
      case 9: // $bb8
        var $40=$res; //@line 382 "iobase.c"
        var $41=$40+4; //@line 382 "iobase.c"
        var $42=HEAP[$41]; //@line 382 "iobase.c"
        var $43=$42+24; //@line 382 "iobase.c"
        var $44=HEAP[$43]; //@line 382 "iobase.c"
        var $45=$res; //@line 382 "iobase.c"
        FUNCTION_TABLE[$44]($45); //@line 382 "iobase.c"
        __label__ = 10; break; //@line 382 "iobase.c"
      case 10: // $bb9
        var $46=$res; //@line 384 "iobase.c"
        $0=$46; //@line 384 "iobase.c"
        __label__ = 11; break; //@line 384 "iobase.c"
      case 11: // $bb10
        var $47=$0; //@line 375 "iobase.c"
        $retval=$47; //@line 375 "iobase.c"
        var $retval11=$retval; //@line 375 "iobase.c"
        ;
        return $retval11; //@line 375 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_enter($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 392 "iobase.c"
        var $2=__PyIOBase_check_closed($1, __Py_TrueStruct); //@line 392 "iobase.c"
        var $3=($2)==0; //@line 392 "iobase.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 392 "iobase.c"
      case 1: // $bb
        $0=0; //@line 393 "iobase.c"
        __label__ = 3; break; //@line 393 "iobase.c"
      case 2: // $bb1
        var $4=$self_addr; //@line 395 "iobase.c"
        var $5=$4; //@line 395 "iobase.c"
        var $6=HEAP[$5]; //@line 395 "iobase.c"
        var $7=($6) + 1; //@line 395 "iobase.c"
        var $8=$self_addr; //@line 395 "iobase.c"
        var $9=$8; //@line 395 "iobase.c"
        HEAP[$9]=$7; //@line 395 "iobase.c"
        var $10=$self_addr; //@line 396 "iobase.c"
        $0=$10; //@line 396 "iobase.c"
        __label__ = 3; break; //@line 396 "iobase.c"
      case 3: // $bb2
        var $11=$0; //@line 393 "iobase.c"
        $retval=$11; //@line 393 "iobase.c"
        var $retval3=$retval; //@line 393 "iobase.c"
        ;
        return $retval3; //@line 393 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_exit($self, $args) {
    ;
    var __label__;
  
    var $self_addr;
    var $args_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $args_addr=$args;
    var $1=HEAP[__PyIO_str_close]; //@line 402 "iobase.c"
    var $2=$self_addr; //@line 402 "iobase.c"
    var $3=_PyObject_CallMethodObjArgs($2, $1, allocate(4, "i8*", ALLOC_STACK)); //@line 402 "iobase.c"
    $0=$3; //@line 402 "iobase.c"
    var $4=$0; //@line 402 "iobase.c"
    $retval=$4; //@line 402 "iobase.c"
    var $retval1=$retval; //@line 402 "iobase.c"
    ;
    return $retval1; //@line 402 "iobase.c"
  }
  

  function _iobase_fileno($self, $args) {
    ;
    var __label__;
  
    var $self_addr;
    var $args_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $args_addr=$args;
    var $1=_iobase_unsupported(__str10191); //@line 417 "iobase.c"
    $0=$1; //@line 417 "iobase.c"
    var $2=$0; //@line 417 "iobase.c"
    $retval=$2; //@line 417 "iobase.c"
    var $retval1=$retval; //@line 417 "iobase.c"
    ;
    return $retval1; //@line 417 "iobase.c"
  }
  

  function _iobase_isatty($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 428 "iobase.c"
        var $2=__PyIOBase_check_closed($1, __Py_TrueStruct); //@line 428 "iobase.c"
        var $3=($2)==0; //@line 428 "iobase.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 428 "iobase.c"
      case 1: // $bb
        $0=0; //@line 429 "iobase.c"
        __label__ = 3; break; //@line 429 "iobase.c"
      case 2: // $bb1
        var $4=HEAP[__Py_ZeroStruct]; //@line 430 "iobase.c"
        var $5=($4) + 1; //@line 430 "iobase.c"
        HEAP[__Py_ZeroStruct]=$5; //@line 430 "iobase.c"
        $0=__Py_ZeroStruct; //@line 430 "iobase.c"
        __label__ = 3; break; //@line 430 "iobase.c"
      case 3: // $bb2
        var $6=$0; //@line 429 "iobase.c"
        $retval=$6; //@line 429 "iobase.c"
        var $retval3=$retval; //@line 429 "iobase.c"
        ;
        return $retval3; //@line 429 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_readline($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $iftmp_62;
        var $iftmp_54;
        var $iftmp_51;
        var $0;
        var $limit=__stackBase__;
        var $has_peek;
        var $buffer;
        var $result;
        var $old_size;
        var $nreadahead;
        var $b;
        var $readahead;
        var $n;
        var $buf;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$limit]=-1; //@line 449 "iobase.c"
        $has_peek=0; //@line 450 "iobase.c"
        $old_size=-1; //@line 452 "iobase.c"
        var $1=$args_addr; //@line 454 "iobase.c"
        var $2=__PyArg_ParseTuple_SizeT($1, __str27, allocate([(FUNCTION_TABLE_OFFSET + 2),0,0,0,$limit,0,0,0], ["i32 (%struct.PyObject*, i8*)*",0,0,0,"i32*",0,0,0], ALLOC_STACK)); //@line 454 "iobase.c"
        var $3=($2)==0; //@line 454 "iobase.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 454 "iobase.c"
      case 1: // $bb
        $0=0; //@line 455 "iobase.c"
        __label__ = 66; break; //@line 455 "iobase.c"
      case 2: // $bb1
        var $4=$self_addr; //@line 458 "iobase.c"
        var $5=_PyObject_HasAttrString($4, __str47); //@line 458 "iobase.c"
        var $6=($5)!=0; //@line 458 "iobase.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 458 "iobase.c"
      case 3: // $bb2
        $has_peek=1; //@line 459 "iobase.c"
        __label__ = 4; break; //@line 459 "iobase.c"
      case 4: // $bb3
        var $7=_PyByteArray_FromStringAndSize(0, 0); //@line 461 "iobase.c"
        $buffer=$7; //@line 461 "iobase.c"
        var $8=($7)==0; //@line 462 "iobase.c"
        if ($8) { __label__ = 5; break; } else { __label__ = 49; break; } //@line 462 "iobase.c"
      case 5: // $bb4
        $0=0; //@line 463 "iobase.c"
        __label__ = 66; break; //@line 463 "iobase.c"
      case 6: // $bb6
        $nreadahead=1; //@line 466 "iobase.c"
        var $9=$has_peek; //@line 469 "iobase.c"
        var $10=($9)!=0; //@line 469 "iobase.c"
        if ($10) { __label__ = 7; break; } else { __label__ = 21; break; } //@line 469 "iobase.c"
      case 7: // $bb7
        var $11=$self_addr; //@line 470 "iobase.c"
        var $12=__PyObject_CallMethod_SizeT($11, __str47, __str13194, allocate([1,0,0,0], ["i32",0,0,0], ALLOC_STACK)); //@line 470 "iobase.c"
        $readahead=$12; //@line 470 "iobase.c"
        var $13=$readahead; //@line 471 "iobase.c"
        var $14=($13)==0; //@line 471 "iobase.c"
        if ($14) { __label__ = 63; break; } else { __label__ = 8; break; } //@line 471 "iobase.c"
      case 8: // $bb8
        var $15=$readahead; //@line 473 "iobase.c"
        var $16=$15+4; //@line 473 "iobase.c"
        var $17=HEAP[$16]; //@line 473 "iobase.c"
        var $18=$17+84; //@line 473 "iobase.c"
        var $19=HEAP[$18]; //@line 473 "iobase.c"
        var $20=($19) & 134217728; //@line 473 "iobase.c"
        var $21=($20)==0; //@line 473 "iobase.c"
        var $22=$readahead; //@line 474 "iobase.c"
        if ($21) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 473 "iobase.c"
      case 9: // $bb9
        var $23=$22+4; //@line 474 "iobase.c"
        var $24=HEAP[$23]; //@line 474 "iobase.c"
        var $25=$24+12; //@line 474 "iobase.c"
        var $26=HEAP[$25]; //@line 474 "iobase.c"
        var $27=HEAP[_PyExc_IOError]; //@line 474 "iobase.c"
        var $28=_PyErr_Format($27, __str14195, allocate([$26,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 474 "iobase.c"
        var $29=$readahead; //@line 477 "iobase.c"
        var $30=$29; //@line 477 "iobase.c"
        var $31=HEAP[$30]; //@line 477 "iobase.c"
        var $32=($31) - 1; //@line 477 "iobase.c"
        var $33=$readahead; //@line 477 "iobase.c"
        var $34=$33; //@line 477 "iobase.c"
        HEAP[$34]=$32; //@line 477 "iobase.c"
        var $35=$readahead; //@line 477 "iobase.c"
        var $36=$35; //@line 477 "iobase.c"
        var $37=HEAP[$36]; //@line 477 "iobase.c"
        var $38=($37)==0; //@line 477 "iobase.c"
        if ($38) { __label__ = 10; break; } else { __label__ = 63; break; } //@line 477 "iobase.c"
      case 10: // $bb10
        var $39=$readahead; //@line 477 "iobase.c"
        var $40=$39+4; //@line 477 "iobase.c"
        var $41=HEAP[$40]; //@line 477 "iobase.c"
        var $42=$41+24; //@line 477 "iobase.c"
        var $43=HEAP[$42]; //@line 477 "iobase.c"
        var $44=$readahead; //@line 477 "iobase.c"
        FUNCTION_TABLE[$43]($44); //@line 477 "iobase.c"
        __label__ = 63; break; //@line 477 "iobase.c"
      case 11: // $bb12
        var $45=$22; //@line 480 "iobase.c"
        var $46=$45+8; //@line 480 "iobase.c"
        var $47=HEAP[$46]; //@line 480 "iobase.c"
        var $48=($47) > 0; //@line 480 "iobase.c"
        if ($48) { __label__ = 12; break; } else { __label__ = 19; break; } //@line 480 "iobase.c"
      case 12: // $bb13
        $n=0; //@line 481 "iobase.c"
        var $49=$readahead; //@line 482 "iobase.c"
        var $50=$49; //@line 482 "iobase.c"
        var $51=$50+20; //@line 482 "iobase.c"
        var $52=$51; //@line 482 "iobase.c"
        $buf=$52; //@line 482 "iobase.c"
        var $53=HEAP[$limit]; //@line 483 "iobase.c"
        var $54=($53) >= 0; //@line 483 "iobase.c"
        if ($54) { __label__ = 13; break; } else { __label__ = 16; break; } //@line 483 "iobase.c"
      case 13: // $bb14
        var $55=$readahead; //@line 485 "iobase.c"
        var $56=$55; //@line 485 "iobase.c"
        var $57=$56+8; //@line 485 "iobase.c"
        var $58=HEAP[$57]; //@line 485 "iobase.c"
        var $59=$n; //@line 485 "iobase.c"
        var $60=($58) <= ($59); //@line 485 "iobase.c"
        if ($60) { __label__ = 18; break; } else { __label__ = 14; break; } //@line 485 "iobase.c"
      case 14: // $bb15
        var $61=HEAP[$limit]; //@line 485 "iobase.c"
        var $62=$n; //@line 485 "iobase.c"
        var $63=($62) >= ($61); //@line 485 "iobase.c"
        if ($63) { __label__ = 18; break; } else { __label__ = 15; break; } //@line 485 "iobase.c"
      case 15: // $bb16
        var $64=$buf; //@line 487 "iobase.c"
        var $65=$n; //@line 487 "iobase.c"
        var $66=$64+$65; //@line 487 "iobase.c"
        var $67=HEAP[$66]; //@line 487 "iobase.c"
        var $68=($67)==10; //@line 487 "iobase.c"
        var $69=($68); //@line 487 "iobase.c"
        var $70=$n; //@line 487 "iobase.c"
        var $71=($70) + 1; //@line 487 "iobase.c"
        $n=$71; //@line 487 "iobase.c"
        var $toBool=($69)!=0; //@line 487 "iobase.c"
        if ($toBool) { __label__ = 18; break; } else { __label__ = 13; break; } //@line 487 "iobase.c"
      case 16: // $bb19
        var $72=$readahead; //@line 493 "iobase.c"
        var $73=$72; //@line 493 "iobase.c"
        var $74=$73+8; //@line 493 "iobase.c"
        var $75=HEAP[$74]; //@line 493 "iobase.c"
        var $76=$n; //@line 493 "iobase.c"
        var $77=($75) <= ($76); //@line 493 "iobase.c"
        if ($77) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 493 "iobase.c"
      case 17: // $bb20
        var $78=$buf; //@line 495 "iobase.c"
        var $79=$n; //@line 495 "iobase.c"
        var $80=$78+$79; //@line 495 "iobase.c"
        var $81=HEAP[$80]; //@line 495 "iobase.c"
        var $82=($81)==10; //@line 495 "iobase.c"
        var $83=($82); //@line 495 "iobase.c"
        var $84=$n; //@line 495 "iobase.c"
        var $85=($84) + 1; //@line 495 "iobase.c"
        $n=$85; //@line 495 "iobase.c"
        var $toBool21=($83)!=0; //@line 495 "iobase.c"
        if ($toBool21) { __label__ = 18; break; } else { __label__ = 16; break; } //@line 495 "iobase.c"
      case 18: // $bb23
        var $86=$n; //@line 499 "iobase.c"
        $nreadahead=$86; //@line 499 "iobase.c"
        __label__ = 19; break; //@line 499 "iobase.c"
      case 19: // $bb24
        var $87=$readahead; //@line 501 "iobase.c"
        var $88=$87; //@line 501 "iobase.c"
        var $89=HEAP[$88]; //@line 501 "iobase.c"
        var $90=($89) - 1; //@line 501 "iobase.c"
        var $91=$readahead; //@line 501 "iobase.c"
        var $92=$91; //@line 501 "iobase.c"
        HEAP[$92]=$90; //@line 501 "iobase.c"
        var $93=$readahead; //@line 501 "iobase.c"
        var $94=$93; //@line 501 "iobase.c"
        var $95=HEAP[$94]; //@line 501 "iobase.c"
        var $96=($95)==0; //@line 501 "iobase.c"
        if ($96) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 501 "iobase.c"
      case 20: // $bb25
        var $97=$readahead; //@line 501 "iobase.c"
        var $98=$97+4; //@line 501 "iobase.c"
        var $99=HEAP[$98]; //@line 501 "iobase.c"
        var $100=$99+24; //@line 501 "iobase.c"
        var $101=HEAP[$100]; //@line 501 "iobase.c"
        var $102=$readahead; //@line 501 "iobase.c"
        FUNCTION_TABLE[$101]($102); //@line 501 "iobase.c"
        __label__ = 21; break; //@line 501 "iobase.c"
      case 21: // $bb26
        var $103=$self_addr; //@line 504 "iobase.c"
        var $104=$nreadahead; //@line 504 "iobase.c"
        var $105=__PyObject_CallMethod_SizeT($103, __str15196, __str2, allocate([$104,0,0,0], ["i32",0,0,0], ALLOC_STACK)); //@line 504 "iobase.c"
        $b=$105; //@line 504 "iobase.c"
        var $106=($105)==0; //@line 505 "iobase.c"
        if ($106) { __label__ = 63; break; } else { __label__ = 22; break; } //@line 505 "iobase.c"
      case 22: // $bb27
        var $107=$b; //@line 507 "iobase.c"
        var $108=$107+4; //@line 507 "iobase.c"
        var $109=HEAP[$108]; //@line 507 "iobase.c"
        var $110=$109+84; //@line 507 "iobase.c"
        var $111=HEAP[$110]; //@line 507 "iobase.c"
        var $112=($111) & 134217728; //@line 507 "iobase.c"
        var $113=($112)==0; //@line 507 "iobase.c"
        var $114=$b; //@line 508 "iobase.c"
        if ($113) { __label__ = 23; break; } else { __label__ = 25; break; } //@line 507 "iobase.c"
      case 23: // $bb28
        var $115=$114+4; //@line 508 "iobase.c"
        var $116=HEAP[$115]; //@line 508 "iobase.c"
        var $117=$116+12; //@line 508 "iobase.c"
        var $118=HEAP[$117]; //@line 508 "iobase.c"
        var $119=HEAP[_PyExc_IOError]; //@line 508 "iobase.c"
        var $120=_PyErr_Format($119, __str17198, allocate([$118,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 508 "iobase.c"
        var $121=$b; //@line 511 "iobase.c"
        var $122=$121; //@line 511 "iobase.c"
        var $123=HEAP[$122]; //@line 511 "iobase.c"
        var $124=($123) - 1; //@line 511 "iobase.c"
        var $125=$b; //@line 511 "iobase.c"
        var $126=$125; //@line 511 "iobase.c"
        HEAP[$126]=$124; //@line 511 "iobase.c"
        var $127=$b; //@line 511 "iobase.c"
        var $128=$127; //@line 511 "iobase.c"
        var $129=HEAP[$128]; //@line 511 "iobase.c"
        var $130=($129)==0; //@line 511 "iobase.c"
        if ($130) { __label__ = 24; break; } else { __label__ = 63; break; } //@line 511 "iobase.c"
      case 24: // $bb29
        var $131=$b; //@line 511 "iobase.c"
        var $132=$131+4; //@line 511 "iobase.c"
        var $133=HEAP[$132]; //@line 511 "iobase.c"
        var $134=$133+24; //@line 511 "iobase.c"
        var $135=HEAP[$134]; //@line 511 "iobase.c"
        var $136=$b; //@line 511 "iobase.c"
        FUNCTION_TABLE[$135]($136); //@line 511 "iobase.c"
        __label__ = 63; break; //@line 511 "iobase.c"
      case 25: // $bb31
        var $137=$114; //@line 514 "iobase.c"
        var $138=$137+8; //@line 514 "iobase.c"
        var $139=HEAP[$138]; //@line 514 "iobase.c"
        var $140=($139)==0; //@line 514 "iobase.c"
        if ($140) { __label__ = 26; break; } else { __label__ = 28; break; } //@line 514 "iobase.c"
      case 26: // $bb32
        var $141=$b; //@line 515 "iobase.c"
        var $142=$141; //@line 515 "iobase.c"
        var $143=HEAP[$142]; //@line 515 "iobase.c"
        var $144=($143) - 1; //@line 515 "iobase.c"
        var $145=$b; //@line 515 "iobase.c"
        var $146=$145; //@line 515 "iobase.c"
        HEAP[$146]=$144; //@line 515 "iobase.c"
        var $147=$b; //@line 515 "iobase.c"
        var $148=$147; //@line 515 "iobase.c"
        var $149=HEAP[$148]; //@line 515 "iobase.c"
        var $150=($149)==0; //@line 515 "iobase.c"
        if ($150) { __label__ = 27; break; } else { __label__ = 51; break; } //@line 515 "iobase.c"
      case 27: // $bb33
        var $151=$b; //@line 515 "iobase.c"
        var $152=$151+4; //@line 515 "iobase.c"
        var $153=HEAP[$152]; //@line 515 "iobase.c"
        var $154=$153+24; //@line 515 "iobase.c"
        var $155=HEAP[$154]; //@line 515 "iobase.c"
        var $156=$b; //@line 515 "iobase.c"
        FUNCTION_TABLE[$155]($156); //@line 515 "iobase.c"
        __label__ = 51; break; //@line 515 "iobase.c"
      case 28: // $bb35
        var $157=$buffer; //@line 519 "iobase.c"
        var $158=$157+4; //@line 519 "iobase.c"
        var $159=HEAP[$158]; //@line 519 "iobase.c"
        var $160=($159)!=(_PyByteArray_Type); //@line 519 "iobase.c"
        if ($160) { __label__ = 29; break; } else { __label__ = 31; break; } //@line 519 "iobase.c"
      case 29: // $bb36
        var $161=$buffer; //@line 519 "iobase.c"
        var $162=$161+4; //@line 519 "iobase.c"
        var $163=HEAP[$162]; //@line 519 "iobase.c"
        var $164=_PyType_IsSubtype($163, _PyByteArray_Type); //@line 519 "iobase.c"
        var $165=($164)==0; //@line 519 "iobase.c"
        if ($165) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 519 "iobase.c"
      case 30: // $bb37
        ___assert_fail(__str18199, __str6187, 519, ___PRETTY_FUNCTION___8875); //@line 519 "iobase.c"
        throw "Reached an unreachable!" //@line 519 "iobase.c"
      case 31: // $bb38
        var $166=$buffer; //@line 519 "iobase.c"
        var $167=$166; //@line 519 "iobase.c"
        var $168=$167+8; //@line 519 "iobase.c"
        var $169=HEAP[$168]; //@line 519 "iobase.c"
        $old_size=$169; //@line 519 "iobase.c"
        var $170=$b; //@line 520 "iobase.c"
        var $171=$170; //@line 520 "iobase.c"
        var $172=$171+8; //@line 520 "iobase.c"
        var $173=HEAP[$172]; //@line 520 "iobase.c"
        var $174=$old_size; //@line 520 "iobase.c"
        var $175=($174) + ($173); //@line 520 "iobase.c"
        var $176=$buffer; //@line 520 "iobase.c"
        var $177=_PyByteArray_Resize($176, $175); //@line 520 "iobase.c"
        var $178=$b; //@line 521 "iobase.c"
        var $179=$178; //@line 521 "iobase.c"
        var $180=$179+8; //@line 521 "iobase.c"
        var $181=HEAP[$180]; //@line 521 "iobase.c"
        var $182=$b; //@line 521 "iobase.c"
        var $183=$182; //@line 521 "iobase.c"
        var $184=$183+20; //@line 521 "iobase.c"
        var $185=$184; //@line 521 "iobase.c"
        var $186=$buffer; //@line 521 "iobase.c"
        var $187=$186+4; //@line 521 "iobase.c"
        var $188=HEAP[$187]; //@line 521 "iobase.c"
        var $189=($188)!=(_PyByteArray_Type); //@line 521 "iobase.c"
        if ($189) { __label__ = 32; break; } else { __label__ = 34; break; } //@line 521 "iobase.c"
      case 32: // $bb39
        var $190=$buffer; //@line 521 "iobase.c"
        var $191=$190+4; //@line 521 "iobase.c"
        var $192=HEAP[$191]; //@line 521 "iobase.c"
        var $193=_PyType_IsSubtype($192, _PyByteArray_Type); //@line 521 "iobase.c"
        var $194=($193)==0; //@line 521 "iobase.c"
        if ($194) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 521 "iobase.c"
      case 33: // $bb40
        ___assert_fail(__str18199, __str6187, 521, ___PRETTY_FUNCTION___8875); //@line 521 "iobase.c"
        throw "Reached an unreachable!" //@line 521 "iobase.c"
      case 34: // $bb41
        var $195=$buffer; //@line 521 "iobase.c"
        var $196=$195; //@line 521 "iobase.c"
        var $197=$196+8; //@line 521 "iobase.c"
        var $198=HEAP[$197]; //@line 521 "iobase.c"
        var $199=($198)!=0; //@line 521 "iobase.c"
        if ($199) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 521 "iobase.c"
      case 35: // $bb42
        var $200=$buffer; //@line 521 "iobase.c"
        var $201=$200; //@line 521 "iobase.c"
        var $202=$201+20; //@line 521 "iobase.c"
        var $203=HEAP[$202]; //@line 521 "iobase.c"
        $iftmp_51=$203; //@line 521 "iobase.c"
        __label__ = 37; break; //@line 521 "iobase.c"
      case 36: // $bb43
        $iftmp_51=__PyByteArray_empty_string; //@line 521 "iobase.c"
        __label__ = 37; break; //@line 521 "iobase.c"
      case 37: // $bb44
        var $204=$iftmp_51; //@line 521 "iobase.c"
        var $205=$old_size; //@line 521 "iobase.c"
        var $206=$204+$205; //@line 521 "iobase.c"
        _llvm_memcpy_p0i8_p0i8_i32($206, $185, $181, 1, 0); //@line 521 "iobase.c"
        var $207=$b; //@line 524 "iobase.c"
        var $208=$207; //@line 524 "iobase.c"
        var $209=HEAP[$208]; //@line 524 "iobase.c"
        var $210=($209) - 1; //@line 524 "iobase.c"
        var $211=$b; //@line 524 "iobase.c"
        var $212=$211; //@line 524 "iobase.c"
        HEAP[$212]=$210; //@line 524 "iobase.c"
        var $213=$b; //@line 524 "iobase.c"
        var $214=$213; //@line 524 "iobase.c"
        var $215=HEAP[$214]; //@line 524 "iobase.c"
        var $216=($215)==0; //@line 524 "iobase.c"
        if ($216) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 524 "iobase.c"
      case 38: // $bb45
        var $217=$b; //@line 524 "iobase.c"
        var $218=$217+4; //@line 524 "iobase.c"
        var $219=HEAP[$218]; //@line 524 "iobase.c"
        var $220=$219+24; //@line 524 "iobase.c"
        var $221=HEAP[$220]; //@line 524 "iobase.c"
        var $222=$b; //@line 524 "iobase.c"
        FUNCTION_TABLE[$221]($222); //@line 524 "iobase.c"
        __label__ = 39; break; //@line 524 "iobase.c"
      case 39: // $bb46
        var $223=$buffer; //@line 526 "iobase.c"
        var $224=$223+4; //@line 526 "iobase.c"
        var $225=HEAP[$224]; //@line 526 "iobase.c"
        var $226=($225)!=(_PyByteArray_Type); //@line 526 "iobase.c"
        if ($226) { __label__ = 40; break; } else { __label__ = 42; break; } //@line 526 "iobase.c"
      case 40: // $bb47
        var $227=$buffer; //@line 526 "iobase.c"
        var $228=$227+4; //@line 526 "iobase.c"
        var $229=HEAP[$228]; //@line 526 "iobase.c"
        var $230=_PyType_IsSubtype($229, _PyByteArray_Type); //@line 526 "iobase.c"
        var $231=($230)==0; //@line 526 "iobase.c"
        if ($231) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 526 "iobase.c"
      case 41: // $bb48
        ___assert_fail(__str18199, __str6187, 526, ___PRETTY_FUNCTION___8875); //@line 526 "iobase.c"
        throw "Reached an unreachable!" //@line 526 "iobase.c"
      case 42: // $bb49
        var $232=$buffer; //@line 526 "iobase.c"
        var $233=$232; //@line 526 "iobase.c"
        var $234=$233+8; //@line 526 "iobase.c"
        var $235=HEAP[$234]; //@line 526 "iobase.c"
        var $236=($235)!=0; //@line 526 "iobase.c"
        if ($236) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 526 "iobase.c"
      case 43: // $bb50
        var $237=$buffer; //@line 526 "iobase.c"
        var $238=$237; //@line 526 "iobase.c"
        var $239=$238+20; //@line 526 "iobase.c"
        var $240=HEAP[$239]; //@line 526 "iobase.c"
        $iftmp_54=$240; //@line 526 "iobase.c"
        __label__ = 45; break; //@line 526 "iobase.c"
      case 44: // $bb51
        $iftmp_54=__PyByteArray_empty_string; //@line 526 "iobase.c"
        __label__ = 45; break; //@line 526 "iobase.c"
      case 45: // $bb52
        var $241=$buffer; //@line 526 "iobase.c"
        var $242=$241+4; //@line 526 "iobase.c"
        var $243=HEAP[$242]; //@line 526 "iobase.c"
        var $244=($243)!=(_PyByteArray_Type); //@line 526 "iobase.c"
        if ($244) { __label__ = 46; break; } else { __label__ = 48; break; } //@line 526 "iobase.c"
      case 46: // $bb53
        var $245=$buffer; //@line 526 "iobase.c"
        var $246=$245+4; //@line 526 "iobase.c"
        var $247=HEAP[$246]; //@line 526 "iobase.c"
        var $248=_PyType_IsSubtype($247, _PyByteArray_Type); //@line 526 "iobase.c"
        var $249=($248)==0; //@line 526 "iobase.c"
        if ($249) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 526 "iobase.c"
      case 47: // $bb54
        ___assert_fail(__str18199, __str6187, 526, ___PRETTY_FUNCTION___8875); //@line 526 "iobase.c"
        throw "Reached an unreachable!" //@line 526 "iobase.c"
      case 48: // $bb55
        var $250=$buffer; //@line 526 "iobase.c"
        var $251=$250; //@line 526 "iobase.c"
        var $252=$251+8; //@line 526 "iobase.c"
        var $253=HEAP[$252]; //@line 526 "iobase.c"
        var $254=($253) - 1; //@line 526 "iobase.c"
        var $255=$iftmp_54; //@line 526 "iobase.c"
        var $256=$255+$254; //@line 526 "iobase.c"
        var $257=HEAP[$256]; //@line 526 "iobase.c"
        var $258=($257)==10; //@line 526 "iobase.c"
        if ($258) { __label__ = 51; break; } else { __label__ = 49; break; } //@line 526 "iobase.c"
      case 49: // $bb56
        var $259=HEAP[$limit]; //@line 465 "iobase.c"
        var $260=($259) < 0; //@line 465 "iobase.c"
        if ($260) { __label__ = 6; break; } else { __label__ = 50; break; } //@line 465 "iobase.c"
      case 50: // $bb57
        var $261=$buffer; //@line 465 "iobase.c"
        var $262=$261; //@line 465 "iobase.c"
        var $263=$262+8; //@line 465 "iobase.c"
        var $264=HEAP[$263]; //@line 465 "iobase.c"
        var $265=HEAP[$limit]; //@line 465 "iobase.c"
        var $266=($264) < ($265); //@line 465 "iobase.c"
        if ($266) { __label__ = 6; break; } else { __label__ = 51; break; } //@line 465 "iobase.c"
      case 51: // $bb58
        var $267=$buffer; //@line 530 "iobase.c"
        var $268=$267+4; //@line 530 "iobase.c"
        var $269=HEAP[$268]; //@line 530 "iobase.c"
        var $270=($269)!=(_PyByteArray_Type); //@line 530 "iobase.c"
        if ($270) { __label__ = 52; break; } else { __label__ = 54; break; } //@line 530 "iobase.c"
      case 52: // $bb59
        var $271=$buffer; //@line 530 "iobase.c"
        var $272=$271+4; //@line 530 "iobase.c"
        var $273=HEAP[$272]; //@line 530 "iobase.c"
        var $274=_PyType_IsSubtype($273, _PyByteArray_Type); //@line 530 "iobase.c"
        var $275=($274)==0; //@line 530 "iobase.c"
        if ($275) { __label__ = 53; break; } else { __label__ = 54; break; } //@line 530 "iobase.c"
      case 53: // $bb60
        ___assert_fail(__str18199, __str6187, 531, ___PRETTY_FUNCTION___8875); //@line 530 "iobase.c"
        throw "Reached an unreachable!" //@line 530 "iobase.c"
      case 54: // $bb61
        var $276=$buffer; //@line 530 "iobase.c"
        var $277=$276; //@line 530 "iobase.c"
        var $278=$277+8; //@line 530 "iobase.c"
        var $279=HEAP[$278]; //@line 530 "iobase.c"
        var $280=$buffer; //@line 530 "iobase.c"
        var $281=$280+4; //@line 530 "iobase.c"
        var $282=HEAP[$281]; //@line 530 "iobase.c"
        var $283=($282)!=(_PyByteArray_Type); //@line 530 "iobase.c"
        if ($283) { __label__ = 55; break; } else { __label__ = 57; break; } //@line 530 "iobase.c"
      case 55: // $bb62
        var $284=$buffer; //@line 530 "iobase.c"
        var $285=$284+4; //@line 530 "iobase.c"
        var $286=HEAP[$285]; //@line 530 "iobase.c"
        var $287=_PyType_IsSubtype($286, _PyByteArray_Type); //@line 530 "iobase.c"
        var $288=($287)==0; //@line 530 "iobase.c"
        if ($288) { __label__ = 56; break; } else { __label__ = 57; break; } //@line 530 "iobase.c"
      case 56: // $bb63
        ___assert_fail(__str18199, __str6187, 530, ___PRETTY_FUNCTION___8875); //@line 530 "iobase.c"
        throw "Reached an unreachable!" //@line 530 "iobase.c"
      case 57: // $bb64
        var $289=$buffer; //@line 530 "iobase.c"
        var $290=$289; //@line 530 "iobase.c"
        var $291=$290+8; //@line 530 "iobase.c"
        var $292=HEAP[$291]; //@line 530 "iobase.c"
        var $293=($292)!=0; //@line 530 "iobase.c"
        if ($293) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 530 "iobase.c"
      case 58: // $bb65
        var $294=$buffer; //@line 530 "iobase.c"
        var $295=$294; //@line 530 "iobase.c"
        var $296=$295+20; //@line 530 "iobase.c"
        var $297=HEAP[$296]; //@line 530 "iobase.c"
        $iftmp_62=$297; //@line 530 "iobase.c"
        __label__ = 60; break; //@line 530 "iobase.c"
      case 59: // $bb66
        $iftmp_62=__PyByteArray_empty_string; //@line 530 "iobase.c"
        __label__ = 60; break; //@line 530 "iobase.c"
      case 60: // $bb67
        var $298=$iftmp_62; //@line 530 "iobase.c"
        var $299=_PyString_FromStringAndSize($298, $279); //@line 530 "iobase.c"
        $result=$299; //@line 530 "iobase.c"
        var $300=$buffer; //@line 532 "iobase.c"
        var $301=$300; //@line 532 "iobase.c"
        var $302=HEAP[$301]; //@line 532 "iobase.c"
        var $303=($302) - 1; //@line 532 "iobase.c"
        var $304=$buffer; //@line 532 "iobase.c"
        var $305=$304; //@line 532 "iobase.c"
        HEAP[$305]=$303; //@line 532 "iobase.c"
        var $306=$buffer; //@line 532 "iobase.c"
        var $307=$306; //@line 532 "iobase.c"
        var $308=HEAP[$307]; //@line 532 "iobase.c"
        var $309=($308)==0; //@line 532 "iobase.c"
        if ($309) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 532 "iobase.c"
      case 61: // $bb68
        var $310=$buffer; //@line 532 "iobase.c"
        var $311=$310+4; //@line 532 "iobase.c"
        var $312=HEAP[$311]; //@line 532 "iobase.c"
        var $313=$312+24; //@line 532 "iobase.c"
        var $314=HEAP[$313]; //@line 532 "iobase.c"
        var $315=$buffer; //@line 532 "iobase.c"
        FUNCTION_TABLE[$314]($315); //@line 532 "iobase.c"
        __label__ = 62; break; //@line 532 "iobase.c"
      case 62: // $bb69
        var $316=$result; //@line 533 "iobase.c"
        $0=$316; //@line 533 "iobase.c"
        __label__ = 66; break; //@line 533 "iobase.c"
      case 63: // $fail
        var $317=$buffer; //@line 535 "iobase.c"
        var $318=$317; //@line 535 "iobase.c"
        var $319=HEAP[$318]; //@line 535 "iobase.c"
        var $320=($319) - 1; //@line 535 "iobase.c"
        var $321=$buffer; //@line 535 "iobase.c"
        var $322=$321; //@line 535 "iobase.c"
        HEAP[$322]=$320; //@line 535 "iobase.c"
        var $323=$buffer; //@line 535 "iobase.c"
        var $324=$323; //@line 535 "iobase.c"
        var $325=HEAP[$324]; //@line 535 "iobase.c"
        var $326=($325)==0; //@line 535 "iobase.c"
        if ($326) { __label__ = 64; break; } else { __label__ = 65; break; } //@line 535 "iobase.c"
      case 64: // $bb70
        var $327=$buffer; //@line 535 "iobase.c"
        var $328=$327+4; //@line 535 "iobase.c"
        var $329=HEAP[$328]; //@line 535 "iobase.c"
        var $330=$329+24; //@line 535 "iobase.c"
        var $331=HEAP[$330]; //@line 535 "iobase.c"
        var $332=$buffer; //@line 535 "iobase.c"
        FUNCTION_TABLE[$331]($332); //@line 535 "iobase.c"
        __label__ = 65; break; //@line 535 "iobase.c"
      case 65: // $bb71
        $0=0; //@line 536 "iobase.c"
        __label__ = 66; break; //@line 536 "iobase.c"
      case 66: // $bb72
        var $333=$0; //@line 455 "iobase.c"
        $retval=$333; //@line 455 "iobase.c"
        var $retval73=$retval; //@line 455 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval73; //@line 455 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_iter($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        var $1=$self_addr; //@line 542 "iobase.c"
        var $2=__PyIOBase_check_closed($1, __Py_TrueStruct); //@line 542 "iobase.c"
        var $3=($2)==0; //@line 542 "iobase.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 542 "iobase.c"
      case 1: // $bb
        $0=0; //@line 543 "iobase.c"
        __label__ = 3; break; //@line 543 "iobase.c"
      case 2: // $bb1
        var $4=$self_addr; //@line 545 "iobase.c"
        var $5=$4; //@line 545 "iobase.c"
        var $6=HEAP[$5]; //@line 545 "iobase.c"
        var $7=($6) + 1; //@line 545 "iobase.c"
        var $8=$self_addr; //@line 545 "iobase.c"
        var $9=$8; //@line 545 "iobase.c"
        HEAP[$9]=$7; //@line 545 "iobase.c"
        var $10=$self_addr; //@line 546 "iobase.c"
        $0=$10; //@line 546 "iobase.c"
        __label__ = 3; break; //@line 546 "iobase.c"
      case 3: // $bb2
        var $11=$0; //@line 543 "iobase.c"
        $retval=$11; //@line 543 "iobase.c"
        var $retval3=$retval; //@line 543 "iobase.c"
        ;
        return $retval3; //@line 543 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_iternext($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $line;
        $self_addr=$self;
        var $1=HEAP[__PyIO_str_readline]; //@line 552 "iobase.c"
        var $2=$self_addr; //@line 552 "iobase.c"
        var $3=_PyObject_CallMethodObjArgs($2, $1, allocate(4, "i8*", ALLOC_STACK)); //@line 552 "iobase.c"
        $line=$3; //@line 552 "iobase.c"
        var $4=$line; //@line 554 "iobase.c"
        var $5=($4)==0; //@line 554 "iobase.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 554 "iobase.c"
      case 1: // $bb
        $0=0; //@line 555 "iobase.c"
        __label__ = 7; break; //@line 555 "iobase.c"
      case 2: // $bb1
        var $6=$line; //@line 557 "iobase.c"
        var $7=_PyObject_Size($6); //@line 557 "iobase.c"
        var $8=($7)==0; //@line 557 "iobase.c"
        var $9=$line; //@line 558 "iobase.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 557 "iobase.c"
      case 3: // $bb2
        var $10=$9; //@line 558 "iobase.c"
        var $11=HEAP[$10]; //@line 558 "iobase.c"
        var $12=($11) - 1; //@line 558 "iobase.c"
        var $13=$line; //@line 558 "iobase.c"
        var $14=$13; //@line 558 "iobase.c"
        HEAP[$14]=$12; //@line 558 "iobase.c"
        var $15=$line; //@line 558 "iobase.c"
        var $16=$15; //@line 558 "iobase.c"
        var $17=HEAP[$16]; //@line 558 "iobase.c"
        var $18=($17)==0; //@line 558 "iobase.c"
        if ($18) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 558 "iobase.c"
      case 4: // $bb3
        var $19=$line; //@line 558 "iobase.c"
        var $20=$19+4; //@line 558 "iobase.c"
        var $21=HEAP[$20]; //@line 558 "iobase.c"
        var $22=$21+24; //@line 558 "iobase.c"
        var $23=HEAP[$22]; //@line 558 "iobase.c"
        var $24=$line; //@line 558 "iobase.c"
        FUNCTION_TABLE[$23]($24); //@line 558 "iobase.c"
        __label__ = 5; break; //@line 558 "iobase.c"
      case 5: // $bb4
        $0=0; //@line 559 "iobase.c"
        __label__ = 7; break; //@line 559 "iobase.c"
      case 6: // $bb5
        $0=$9; //@line 562 "iobase.c"
        __label__ = 7; break; //@line 562 "iobase.c"
      case 7: // $bb6
        var $25=$0; //@line 555 "iobase.c"
        $retval=$25; //@line 555 "iobase.c"
        var $retval7=$retval; //@line 555 "iobase.c"
        ;
        return $retval7; //@line 555 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_readlines($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $hint=__stackBase__;
        var $length;
        var $result;
        var $ret;
        var $line;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$hint]=-1; //@line 575 "iobase.c"
        $length=0; //@line 575 "iobase.c"
        var $1=$args_addr; //@line 578 "iobase.c"
        var $2=__PyArg_ParseTuple_SizeT($1, __str19200, allocate([(FUNCTION_TABLE_OFFSET + 2),0,0,0,$hint,0,0,0], ["i32 (%struct.PyObject*, i8*)*",0,0,0,"i32*",0,0,0], ALLOC_STACK)); //@line 578 "iobase.c"
        var $3=($2)==0; //@line 578 "iobase.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 578 "iobase.c"
      case 1: // $bb
        $0=0; //@line 579 "iobase.c"
        __label__ = 27; break; //@line 579 "iobase.c"
      case 2: // $bb1
        var $4=_PyList_New(0); //@line 582 "iobase.c"
        $result=$4; //@line 582 "iobase.c"
        var $5=$result; //@line 583 "iobase.c"
        var $6=($5)==0; //@line 583 "iobase.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 583 "iobase.c"
      case 3: // $bb2
        $0=0; //@line 584 "iobase.c"
        __label__ = 27; break; //@line 584 "iobase.c"
      case 4: // $bb3
        var $7=HEAP[$hint]; //@line 586 "iobase.c"
        var $8=($7) <= 0; //@line 586 "iobase.c"
        if ($8) { __label__ = 5; break; } else { __label__ = 12; break; } //@line 586 "iobase.c"
      case 5: // $bb4
        var $9=$result; //@line 590 "iobase.c"
        var $10=$self_addr; //@line 590 "iobase.c"
        var $11=__PyObject_CallMethod_SizeT($9, __str20201, __str21202, allocate([$10,0,0,0], ["%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 590 "iobase.c"
        $ret=$11; //@line 590 "iobase.c"
        var $12=$ret; //@line 591 "iobase.c"
        var $13=($12)==0; //@line 591 "iobase.c"
        if ($13) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 591 "iobase.c"
      case 6: // $bb5
        var $14=$result; //@line 592 "iobase.c"
        var $15=$14; //@line 592 "iobase.c"
        var $16=HEAP[$15]; //@line 592 "iobase.c"
        var $17=($16) - 1; //@line 592 "iobase.c"
        var $18=$result; //@line 592 "iobase.c"
        var $19=$18; //@line 592 "iobase.c"
        HEAP[$19]=$17; //@line 592 "iobase.c"
        var $20=$result; //@line 592 "iobase.c"
        var $21=$20; //@line 592 "iobase.c"
        var $22=HEAP[$21]; //@line 592 "iobase.c"
        var $23=($22)==0; //@line 592 "iobase.c"
        if ($23) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 592 "iobase.c"
      case 7: // $bb6
        var $24=$result; //@line 592 "iobase.c"
        var $25=$24+4; //@line 592 "iobase.c"
        var $26=HEAP[$25]; //@line 592 "iobase.c"
        var $27=$26+24; //@line 592 "iobase.c"
        var $28=HEAP[$27]; //@line 592 "iobase.c"
        var $29=$result; //@line 592 "iobase.c"
        FUNCTION_TABLE[$28]($29); //@line 592 "iobase.c"
        __label__ = 8; break; //@line 592 "iobase.c"
      case 8: // $bb7
        $0=0; //@line 593 "iobase.c"
        __label__ = 27; break; //@line 593 "iobase.c"
      case 9: // $bb8
        var $30=$ret; //@line 595 "iobase.c"
        var $31=$30; //@line 595 "iobase.c"
        var $32=HEAP[$31]; //@line 595 "iobase.c"
        var $33=($32) - 1; //@line 595 "iobase.c"
        var $34=$ret; //@line 595 "iobase.c"
        var $35=$34; //@line 595 "iobase.c"
        HEAP[$35]=$33; //@line 595 "iobase.c"
        var $36=$ret; //@line 595 "iobase.c"
        var $37=$36; //@line 595 "iobase.c"
        var $38=HEAP[$37]; //@line 595 "iobase.c"
        var $39=($38)==0; //@line 595 "iobase.c"
        if ($39) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 595 "iobase.c"
      case 10: // $bb9
        var $40=$ret; //@line 595 "iobase.c"
        var $41=$40+4; //@line 595 "iobase.c"
        var $42=HEAP[$41]; //@line 595 "iobase.c"
        var $43=$42+24; //@line 595 "iobase.c"
        var $44=HEAP[$43]; //@line 595 "iobase.c"
        var $45=$ret; //@line 595 "iobase.c"
        FUNCTION_TABLE[$44]($45); //@line 595 "iobase.c"
        __label__ = 11; break; //@line 595 "iobase.c"
      case 11: // $bb10
        var $46=$result; //@line 596 "iobase.c"
        $0=$46; //@line 596 "iobase.c"
        __label__ = 27; break; //@line 596 "iobase.c"
      case 12: // $bb11
        var $47=$self_addr; //@line 600 "iobase.c"
        var $48=_PyIter_Next($47); //@line 600 "iobase.c"
        $line=$48; //@line 600 "iobase.c"
        var $49=($48)==0; //@line 601 "iobase.c"
        if ($49) { __label__ = 13; break; } else { __label__ = 17; break; } //@line 601 "iobase.c"
      case 13: // $bb12
        var $50=_PyErr_Occurred(); //@line 602 "iobase.c"
        var $51=($50)!=0; //@line 602 "iobase.c"
        if ($51) { __label__ = 14; break; } else { __label__ = 26; break; } //@line 602 "iobase.c"
      case 14: // $bb13
        var $52=$result; //@line 603 "iobase.c"
        var $53=$52; //@line 603 "iobase.c"
        var $54=HEAP[$53]; //@line 603 "iobase.c"
        var $55=($54) - 1; //@line 603 "iobase.c"
        var $56=$result; //@line 603 "iobase.c"
        var $57=$56; //@line 603 "iobase.c"
        HEAP[$57]=$55; //@line 603 "iobase.c"
        var $58=$result; //@line 603 "iobase.c"
        var $59=$58; //@line 603 "iobase.c"
        var $60=HEAP[$59]; //@line 603 "iobase.c"
        var $61=($60)==0; //@line 603 "iobase.c"
        if ($61) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 603 "iobase.c"
      case 15: // $bb14
        var $62=$result; //@line 603 "iobase.c"
        var $63=$62+4; //@line 603 "iobase.c"
        var $64=HEAP[$63]; //@line 603 "iobase.c"
        var $65=$64+24; //@line 603 "iobase.c"
        var $66=HEAP[$65]; //@line 603 "iobase.c"
        var $67=$result; //@line 603 "iobase.c"
        FUNCTION_TABLE[$66]($67); //@line 603 "iobase.c"
        __label__ = 16; break; //@line 603 "iobase.c"
      case 16: // $bb15
        $0=0; //@line 604 "iobase.c"
        __label__ = 27; break; //@line 604 "iobase.c"
      case 17: // $bb16
        var $68=$result; //@line 610 "iobase.c"
        var $69=$line; //@line 610 "iobase.c"
        var $70=_PyList_Append($68, $69); //@line 610 "iobase.c"
        var $71=($70) < 0; //@line 610 "iobase.c"
        var $72=$line; //@line 611 "iobase.c"
        if ($71) { __label__ = 18; break; } else { __label__ = 23; break; } //@line 610 "iobase.c"
      case 18: // $bb17
        var $73=$72; //@line 611 "iobase.c"
        var $74=HEAP[$73]; //@line 611 "iobase.c"
        var $75=($74) - 1; //@line 611 "iobase.c"
        var $76=$line; //@line 611 "iobase.c"
        var $77=$76; //@line 611 "iobase.c"
        HEAP[$77]=$75; //@line 611 "iobase.c"
        var $78=$line; //@line 611 "iobase.c"
        var $79=$78; //@line 611 "iobase.c"
        var $80=HEAP[$79]; //@line 611 "iobase.c"
        var $81=($80)==0; //@line 611 "iobase.c"
        if ($81) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 611 "iobase.c"
      case 19: // $bb18
        var $82=$line; //@line 611 "iobase.c"
        var $83=$82+4; //@line 611 "iobase.c"
        var $84=HEAP[$83]; //@line 611 "iobase.c"
        var $85=$84+24; //@line 611 "iobase.c"
        var $86=HEAP[$85]; //@line 611 "iobase.c"
        var $87=$line; //@line 611 "iobase.c"
        FUNCTION_TABLE[$86]($87); //@line 611 "iobase.c"
        __label__ = 20; break; //@line 611 "iobase.c"
      case 20: // $bb19
        var $88=$result; //@line 612 "iobase.c"
        var $89=$88; //@line 612 "iobase.c"
        var $90=HEAP[$89]; //@line 612 "iobase.c"
        var $91=($90) - 1; //@line 612 "iobase.c"
        var $92=$result; //@line 612 "iobase.c"
        var $93=$92; //@line 612 "iobase.c"
        HEAP[$93]=$91; //@line 612 "iobase.c"
        var $94=$result; //@line 612 "iobase.c"
        var $95=$94; //@line 612 "iobase.c"
        var $96=HEAP[$95]; //@line 612 "iobase.c"
        var $97=($96)==0; //@line 612 "iobase.c"
        if ($97) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 612 "iobase.c"
      case 21: // $bb20
        var $98=$result; //@line 612 "iobase.c"
        var $99=$98+4; //@line 612 "iobase.c"
        var $100=HEAP[$99]; //@line 612 "iobase.c"
        var $101=$100+24; //@line 612 "iobase.c"
        var $102=HEAP[$101]; //@line 612 "iobase.c"
        var $103=$result; //@line 612 "iobase.c"
        FUNCTION_TABLE[$102]($103); //@line 612 "iobase.c"
        __label__ = 22; break; //@line 612 "iobase.c"
      case 22: // $bb21
        $0=0; //@line 613 "iobase.c"
        __label__ = 27; break; //@line 613 "iobase.c"
      case 23: // $bb22
        var $104=_PyObject_Size($72); //@line 615 "iobase.c"
        var $105=$length; //@line 615 "iobase.c"
        var $106=($105) + ($104); //@line 615 "iobase.c"
        $length=$106; //@line 615 "iobase.c"
        var $107=$line; //@line 616 "iobase.c"
        var $108=$107; //@line 616 "iobase.c"
        var $109=HEAP[$108]; //@line 616 "iobase.c"
        var $110=($109) - 1; //@line 616 "iobase.c"
        var $111=$line; //@line 616 "iobase.c"
        var $112=$111; //@line 616 "iobase.c"
        HEAP[$112]=$110; //@line 616 "iobase.c"
        var $113=$line; //@line 616 "iobase.c"
        var $114=$113; //@line 616 "iobase.c"
        var $115=HEAP[$114]; //@line 616 "iobase.c"
        var $116=($115)==0; //@line 616 "iobase.c"
        if ($116) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 616 "iobase.c"
      case 24: // $bb23
        var $117=$line; //@line 616 "iobase.c"
        var $118=$117+4; //@line 616 "iobase.c"
        var $119=HEAP[$118]; //@line 616 "iobase.c"
        var $120=$119+24; //@line 616 "iobase.c"
        var $121=HEAP[$120]; //@line 616 "iobase.c"
        var $122=$line; //@line 616 "iobase.c"
        FUNCTION_TABLE[$121]($122); //@line 616 "iobase.c"
        __label__ = 25; break; //@line 616 "iobase.c"
      case 25: // $bb24
        var $123=HEAP[$hint]; //@line 618 "iobase.c"
        var $124=$length; //@line 618 "iobase.c"
        var $125=($124) > ($123); //@line 618 "iobase.c"
        if ($125) { __label__ = 26; break; } else { __label__ = 12; break; } //@line 618 "iobase.c"
      case 26: // $bb26
        var $126=$result; //@line 621 "iobase.c"
        $0=$126; //@line 621 "iobase.c"
        __label__ = 27; break; //@line 621 "iobase.c"
      case 27: // $bb27
        var $127=$0; //@line 579 "iobase.c"
        $retval=$127; //@line 579 "iobase.c"
        var $retval28=$retval; //@line 579 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval28; //@line 579 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _iobase_writelines($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $lines=__stackBase__;
        var $iter;
        var $res;
        var $line;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$args_addr; //@line 629 "iobase.c"
        var $2=__PyArg_ParseTuple_SizeT($1, __str22203, allocate([$lines,0,0,0], ["%struct.PyObject**",0,0,0], ALLOC_STACK)); //@line 629 "iobase.c"
        var $3=($2)==0; //@line 629 "iobase.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 629 "iobase.c"
      case 1: // $bb
        $0=0; //@line 630 "iobase.c"
        __label__ = 22; break; //@line 630 "iobase.c"
      case 2: // $bb1
        var $4=$self_addr; //@line 633 "iobase.c"
        var $5=__PyIOBase_check_closed($4, __Py_TrueStruct); //@line 633 "iobase.c"
        var $6=($5)==0; //@line 633 "iobase.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 633 "iobase.c"
      case 3: // $bb2
        $0=0; //@line 634 "iobase.c"
        __label__ = 22; break; //@line 634 "iobase.c"
      case 4: // $bb3
        var $7=HEAP[$lines]; //@line 636 "iobase.c"
        var $8=_PyObject_GetIter($7); //@line 636 "iobase.c"
        $iter=$8; //@line 636 "iobase.c"
        var $9=$iter; //@line 637 "iobase.c"
        var $10=($9)==0; //@line 637 "iobase.c"
        if ($10) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 637 "iobase.c"
      case 5: // $bb4
        $0=0; //@line 638 "iobase.c"
        __label__ = 22; break; //@line 638 "iobase.c"
      case 6: // $bb5
        var $11=$iter; //@line 641 "iobase.c"
        var $12=_PyIter_Next($11); //@line 641 "iobase.c"
        $line=$12; //@line 641 "iobase.c"
        var $13=($12)==0; //@line 642 "iobase.c"
        if ($13) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 642 "iobase.c"
      case 7: // $bb6
        var $14=_PyErr_Occurred(); //@line 643 "iobase.c"
        var $15=($14)!=0; //@line 643 "iobase.c"
        var $16=$iter; //@line 644 "iobase.c"
        var $17=$16; //@line 644 "iobase.c"
        var $18=HEAP[$17]; //@line 644 "iobase.c"
        var $19=($18) - 1; //@line 644 "iobase.c"
        var $20=$iter; //@line 644 "iobase.c"
        var $21=$20; //@line 644 "iobase.c"
        HEAP[$21]=$19; //@line 644 "iobase.c"
        var $22=$iter; //@line 644 "iobase.c"
        var $23=$22; //@line 644 "iobase.c"
        var $24=HEAP[$23]; //@line 644 "iobase.c"
        var $25=($24)==0; //@line 644 "iobase.c"
        if ($15) { __label__ = 8; break; } else { __label__ = 19; break; } //@line 643 "iobase.c"
      case 8: // $bb7
        if ($25) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 644 "iobase.c"
      case 9: // $bb8
        var $26=$iter; //@line 644 "iobase.c"
        var $27=$26+4; //@line 644 "iobase.c"
        var $28=HEAP[$27]; //@line 644 "iobase.c"
        var $29=$28+24; //@line 644 "iobase.c"
        var $30=HEAP[$29]; //@line 644 "iobase.c"
        var $31=$iter; //@line 644 "iobase.c"
        FUNCTION_TABLE[$30]($31); //@line 644 "iobase.c"
        __label__ = 10; break; //@line 644 "iobase.c"
      case 10: // $bb9
        $0=0; //@line 645 "iobase.c"
        __label__ = 22; break; //@line 645 "iobase.c"
      case 11: // $bb10
        var $32=HEAP[__PyIO_str_write]; //@line 651 "iobase.c"
        var $33=$self_addr; //@line 651 "iobase.c"
        var $34=$line; //@line 651 "iobase.c"
        var $35=_PyObject_CallMethodObjArgs($33, $32, allocate([$34,0,0,0,0,0,0,0], ["%struct.PyObject*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 651 "iobase.c"
        $res=$35; //@line 651 "iobase.c"
        var $36=$line; //@line 652 "iobase.c"
        var $37=$36; //@line 652 "iobase.c"
        var $38=HEAP[$37]; //@line 652 "iobase.c"
        var $39=($38) - 1; //@line 652 "iobase.c"
        var $40=$line; //@line 652 "iobase.c"
        var $41=$40; //@line 652 "iobase.c"
        HEAP[$41]=$39; //@line 652 "iobase.c"
        var $42=$line; //@line 652 "iobase.c"
        var $43=$42; //@line 652 "iobase.c"
        var $44=HEAP[$43]; //@line 652 "iobase.c"
        var $45=($44)==0; //@line 652 "iobase.c"
        if ($45) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 652 "iobase.c"
      case 12: // $bb11
        var $46=$line; //@line 652 "iobase.c"
        var $47=$46+4; //@line 652 "iobase.c"
        var $48=HEAP[$47]; //@line 652 "iobase.c"
        var $49=$48+24; //@line 652 "iobase.c"
        var $50=HEAP[$49]; //@line 652 "iobase.c"
        var $51=$line; //@line 652 "iobase.c"
        FUNCTION_TABLE[$50]($51); //@line 652 "iobase.c"
        __label__ = 13; break; //@line 652 "iobase.c"
      case 13: // $bb12
        var $52=$res; //@line 653 "iobase.c"
        var $53=($52)==0; //@line 653 "iobase.c"
        if ($53) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 653 "iobase.c"
      case 14: // $bb13
        var $54=$iter; //@line 654 "iobase.c"
        var $55=$54; //@line 654 "iobase.c"
        var $56=HEAP[$55]; //@line 654 "iobase.c"
        var $57=($56) - 1; //@line 654 "iobase.c"
        var $58=$iter; //@line 654 "iobase.c"
        var $59=$58; //@line 654 "iobase.c"
        HEAP[$59]=$57; //@line 654 "iobase.c"
        var $60=$iter; //@line 654 "iobase.c"
        var $61=$60; //@line 654 "iobase.c"
        var $62=HEAP[$61]; //@line 654 "iobase.c"
        var $63=($62)==0; //@line 654 "iobase.c"
        if ($63) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 654 "iobase.c"
      case 15: // $bb14
        var $64=$iter; //@line 654 "iobase.c"
        var $65=$64+4; //@line 654 "iobase.c"
        var $66=HEAP[$65]; //@line 654 "iobase.c"
        var $67=$66+24; //@line 654 "iobase.c"
        var $68=HEAP[$67]; //@line 654 "iobase.c"
        var $69=$iter; //@line 654 "iobase.c"
        FUNCTION_TABLE[$68]($69); //@line 654 "iobase.c"
        __label__ = 16; break; //@line 654 "iobase.c"
      case 16: // $bb15
        $0=0; //@line 655 "iobase.c"
        __label__ = 22; break; //@line 655 "iobase.c"
      case 17: // $bb16
        var $70=$res; //@line 657 "iobase.c"
        var $71=$70; //@line 657 "iobase.c"
        var $72=HEAP[$71]; //@line 657 "iobase.c"
        var $73=($72) - 1; //@line 657 "iobase.c"
        var $74=$res; //@line 657 "iobase.c"
        var $75=$74; //@line 657 "iobase.c"
        HEAP[$75]=$73; //@line 657 "iobase.c"
        var $76=$res; //@line 657 "iobase.c"
        var $77=$76; //@line 657 "iobase.c"
        var $78=HEAP[$77]; //@line 657 "iobase.c"
        var $79=($78)==0; //@line 657 "iobase.c"
        if ($79) { __label__ = 18; break; } else { __label__ = 6; break; } //@line 657 "iobase.c"
      case 18: // $bb17
        var $80=$res; //@line 657 "iobase.c"
        var $81=$80+4; //@line 657 "iobase.c"
        var $82=HEAP[$81]; //@line 657 "iobase.c"
        var $83=$82+24; //@line 657 "iobase.c"
        var $84=HEAP[$83]; //@line 657 "iobase.c"
        var $85=$res; //@line 657 "iobase.c"
        FUNCTION_TABLE[$84]($85); //@line 657 "iobase.c"
        __label__ = 6; break; //@line 657 "iobase.c"
      case 19: // $bb19
        if ($25) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 659 "iobase.c"
      case 20: // $bb20
        var $86=$iter; //@line 659 "iobase.c"
        var $87=$86+4; //@line 659 "iobase.c"
        var $88=HEAP[$87]; //@line 659 "iobase.c"
        var $89=$88+24; //@line 659 "iobase.c"
        var $90=HEAP[$89]; //@line 659 "iobase.c"
        var $91=$iter; //@line 659 "iobase.c"
        FUNCTION_TABLE[$90]($91); //@line 659 "iobase.c"
        __label__ = 21; break; //@line 659 "iobase.c"
      case 21: // $bb21
        var $92=HEAP[__Py_NoneStruct]; //@line 660 "iobase.c"
        var $93=($92) + 1; //@line 660 "iobase.c"
        HEAP[__Py_NoneStruct]=$93; //@line 660 "iobase.c"
        $0=__Py_NoneStruct; //@line 660 "iobase.c"
        __label__ = 22; break; //@line 660 "iobase.c"
      case 22: // $bb22
        var $94=$0; //@line 630 "iobase.c"
        $retval=$94; //@line 630 "iobase.c"
        var $retval23=$retval; //@line 630 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval23; //@line 630 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _rawiobase_read($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $n=__stackBase__;
        var $b;
        var $res;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$n]=-1; //@line 762 "iobase.c"
        var $1=$args_addr; //@line 765 "iobase.c"
        var $2=__PyArg_ParseTuple_SizeT($1, __str41223, allocate([$n,0,0,0], ["i32*",0,0,0], ALLOC_STACK)); //@line 765 "iobase.c"
        var $3=($2)==0; //@line 765 "iobase.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 765 "iobase.c"
      case 1: // $bb
        $0=0; //@line 766 "iobase.c"
        __label__ = 20; break; //@line 766 "iobase.c"
      case 2: // $bb1
        var $4=HEAP[$n]; //@line 769 "iobase.c"
        var $5=($4) < 0; //@line 769 "iobase.c"
        if ($5) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 769 "iobase.c"
      case 3: // $bb2
        var $6=$self_addr; //@line 770 "iobase.c"
        var $7=__PyObject_CallMethod_SizeT($6, __str42224, 0, allocate(1, "i32", ALLOC_STACK)); //@line 770 "iobase.c"
        $0=$7; //@line 770 "iobase.c"
        __label__ = 20; break; //@line 770 "iobase.c"
      case 4: // $bb3
        var $8=HEAP[$n]; //@line 774 "iobase.c"
        var $9=_PyByteArray_FromStringAndSize(0, $8); //@line 774 "iobase.c"
        $b=$9; //@line 774 "iobase.c"
        var $10=$b; //@line 775 "iobase.c"
        var $11=($10)==0; //@line 775 "iobase.c"
        if ($11) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 775 "iobase.c"
      case 5: // $bb4
        $0=0; //@line 776 "iobase.c"
        __label__ = 20; break; //@line 776 "iobase.c"
      case 6: // $bb5
        var $12=HEAP[__PyIO_str_readinto]; //@line 778 "iobase.c"
        var $13=$self_addr; //@line 778 "iobase.c"
        var $14=$b; //@line 778 "iobase.c"
        var $15=_PyObject_CallMethodObjArgs($13, $12, allocate([$14,0,0,0,0,0,0,0], ["%struct.PyObject*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 778 "iobase.c"
        $res=$15; //@line 778 "iobase.c"
        var $16=$res; //@line 779 "iobase.c"
        var $17=($16)==0; //@line 779 "iobase.c"
        var $18=$res; //@line 779 "iobase.c"
        var $19=($18)==(__Py_NoneStruct); //@line 779 "iobase.c"
        var $or_cond=($17) | ($19);
        if ($or_cond) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 779 "iobase.c"
      case 7: // $bb7
        var $20=$b; //@line 780 "iobase.c"
        var $21=$20; //@line 780 "iobase.c"
        var $22=HEAP[$21]; //@line 780 "iobase.c"
        var $23=($22) - 1; //@line 780 "iobase.c"
        var $24=$b; //@line 780 "iobase.c"
        var $25=$24; //@line 780 "iobase.c"
        HEAP[$25]=$23; //@line 780 "iobase.c"
        var $26=$b; //@line 780 "iobase.c"
        var $27=$26; //@line 780 "iobase.c"
        var $28=HEAP[$27]; //@line 780 "iobase.c"
        var $29=($28)==0; //@line 780 "iobase.c"
        if ($29) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 780 "iobase.c"
      case 8: // $bb8
        var $30=$b; //@line 780 "iobase.c"
        var $31=$30+4; //@line 780 "iobase.c"
        var $32=HEAP[$31]; //@line 780 "iobase.c"
        var $33=$32+24; //@line 780 "iobase.c"
        var $34=HEAP[$33]; //@line 780 "iobase.c"
        var $35=$b; //@line 780 "iobase.c"
        FUNCTION_TABLE[$34]($35); //@line 780 "iobase.c"
        __label__ = 9; break; //@line 780 "iobase.c"
      case 9: // $bb9
        var $36=$res; //@line 781 "iobase.c"
        $0=$36; //@line 781 "iobase.c"
        __label__ = 20; break; //@line 781 "iobase.c"
      case 10: // $bb10
        var $37=HEAP[_PyExc_ValueError]; //@line 784 "iobase.c"
        var $38=$res; //@line 784 "iobase.c"
        var $39=_PyNumber_AsSsize_t($38, $37); //@line 784 "iobase.c"
        HEAP[$n]=$39; //@line 784 "iobase.c"
        var $40=$res; //@line 785 "iobase.c"
        var $41=$40; //@line 785 "iobase.c"
        var $42=HEAP[$41]; //@line 785 "iobase.c"
        var $43=($42) - 1; //@line 785 "iobase.c"
        var $44=$res; //@line 785 "iobase.c"
        var $45=$44; //@line 785 "iobase.c"
        HEAP[$45]=$43; //@line 785 "iobase.c"
        var $46=$res; //@line 785 "iobase.c"
        var $47=$46; //@line 785 "iobase.c"
        var $48=HEAP[$47]; //@line 785 "iobase.c"
        var $49=($48)==0; //@line 785 "iobase.c"
        if ($49) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 785 "iobase.c"
      case 11: // $bb11
        var $50=$res; //@line 785 "iobase.c"
        var $51=$50+4; //@line 785 "iobase.c"
        var $52=HEAP[$51]; //@line 785 "iobase.c"
        var $53=$52+24; //@line 785 "iobase.c"
        var $54=HEAP[$53]; //@line 785 "iobase.c"
        var $55=$res; //@line 785 "iobase.c"
        FUNCTION_TABLE[$54]($55); //@line 785 "iobase.c"
        __label__ = 12; break; //@line 785 "iobase.c"
      case 12: // $bb12
        var $56=HEAP[$n]; //@line 786 "iobase.c"
        var $57=($56)==-1; //@line 786 "iobase.c"
        if ($57) { __label__ = 13; break; } else { __label__ = 17; break; } //@line 786 "iobase.c"
      case 13: // $bb13
        var $58=_PyErr_Occurred(); //@line 786 "iobase.c"
        var $59=($58)!=0; //@line 786 "iobase.c"
        if ($59) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 786 "iobase.c"
      case 14: // $bb14
        var $60=$b; //@line 787 "iobase.c"
        var $61=$60; //@line 787 "iobase.c"
        var $62=HEAP[$61]; //@line 787 "iobase.c"
        var $63=($62) - 1; //@line 787 "iobase.c"
        var $64=$b; //@line 787 "iobase.c"
        var $65=$64; //@line 787 "iobase.c"
        HEAP[$65]=$63; //@line 787 "iobase.c"
        var $66=$b; //@line 787 "iobase.c"
        var $67=$66; //@line 787 "iobase.c"
        var $68=HEAP[$67]; //@line 787 "iobase.c"
        var $69=($68)==0; //@line 787 "iobase.c"
        if ($69) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 787 "iobase.c"
      case 15: // $bb15
        var $70=$b; //@line 787 "iobase.c"
        var $71=$70+4; //@line 787 "iobase.c"
        var $72=HEAP[$71]; //@line 787 "iobase.c"
        var $73=$72+24; //@line 787 "iobase.c"
        var $74=HEAP[$73]; //@line 787 "iobase.c"
        var $75=$b; //@line 787 "iobase.c"
        FUNCTION_TABLE[$74]($75); //@line 787 "iobase.c"
        __label__ = 16; break; //@line 787 "iobase.c"
      case 16: // $bb16
        $0=0; //@line 788 "iobase.c"
        __label__ = 20; break; //@line 788 "iobase.c"
      case 17: // $bb17
        var $76=HEAP[$n]; //@line 791 "iobase.c"
        var $77=$b; //@line 791 "iobase.c"
        var $78=_PyByteArray_AsString($77); //@line 791 "iobase.c"
        var $79=_PyString_FromStringAndSize($78, $76); //@line 791 "iobase.c"
        $res=$79; //@line 791 "iobase.c"
        var $80=$b; //@line 792 "iobase.c"
        var $81=$80; //@line 792 "iobase.c"
        var $82=HEAP[$81]; //@line 792 "iobase.c"
        var $83=($82) - 1; //@line 792 "iobase.c"
        var $84=$b; //@line 792 "iobase.c"
        var $85=$84; //@line 792 "iobase.c"
        HEAP[$85]=$83; //@line 792 "iobase.c"
        var $86=$b; //@line 792 "iobase.c"
        var $87=$86; //@line 792 "iobase.c"
        var $88=HEAP[$87]; //@line 792 "iobase.c"
        var $89=($88)==0; //@line 792 "iobase.c"
        if ($89) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 792 "iobase.c"
      case 18: // $bb18
        var $90=$b; //@line 792 "iobase.c"
        var $91=$90+4; //@line 792 "iobase.c"
        var $92=HEAP[$91]; //@line 792 "iobase.c"
        var $93=$92+24; //@line 792 "iobase.c"
        var $94=HEAP[$93]; //@line 792 "iobase.c"
        var $95=$b; //@line 792 "iobase.c"
        FUNCTION_TABLE[$94]($95); //@line 792 "iobase.c"
        __label__ = 19; break; //@line 792 "iobase.c"
      case 19: // $bb19
        var $96=$res; //@line 793 "iobase.c"
        $0=$96; //@line 793 "iobase.c"
        __label__ = 20; break; //@line 793 "iobase.c"
      case 20: // $bb20
        var $97=$0; //@line 766 "iobase.c"
        $retval=$97; //@line 766 "iobase.c"
        var $retval21=$retval; //@line 766 "iobase.c"
        STACKTOP = __stackBase__;
        return $retval21; //@line 766 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _rawiobase_readall($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $r;
        var $chunks;
        var $result;
        var $data;
        $self_addr=$self;
        $args_addr=$args;
        var $1=_PyList_New(0); //@line 804 "iobase.c"
        $chunks=$1; //@line 804 "iobase.c"
        var $2=$chunks; //@line 807 "iobase.c"
        var $3=($2)==0; //@line 807 "iobase.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 807 "iobase.c"
      case 1: // $bb
        $0=0; //@line 808 "iobase.c"
        __label__ = 31; break; //@line 808 "iobase.c"
      case 2: // $bb1
        var $4=$self_addr; //@line 812 "iobase.c"
        var $5=__PyObject_CallMethod_SizeT($4, __str15196, __str13194, allocate([8192,0,0,0], ["i32",0,0,0], ALLOC_STACK)); //@line 812 "iobase.c"
        $data=$5; //@line 812 "iobase.c"
        var $6=($5)==0; //@line 813 "iobase.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 813 "iobase.c"
      case 3: // $bb2
        var $7=$chunks; //@line 814 "iobase.c"
        var $8=$7; //@line 814 "iobase.c"
        var $9=HEAP[$8]; //@line 814 "iobase.c"
        var $10=($9) - 1; //@line 814 "iobase.c"
        var $11=$chunks; //@line 814 "iobase.c"
        var $12=$11; //@line 814 "iobase.c"
        HEAP[$12]=$10; //@line 814 "iobase.c"
        var $13=$chunks; //@line 814 "iobase.c"
        var $14=$13; //@line 814 "iobase.c"
        var $15=HEAP[$14]; //@line 814 "iobase.c"
        var $16=($15)==0; //@line 814 "iobase.c"
        if ($16) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 814 "iobase.c"
      case 4: // $bb3
        var $17=$chunks; //@line 814 "iobase.c"
        var $18=$17+4; //@line 814 "iobase.c"
        var $19=HEAP[$18]; //@line 814 "iobase.c"
        var $20=$19+24; //@line 814 "iobase.c"
        var $21=HEAP[$20]; //@line 814 "iobase.c"
        var $22=$chunks; //@line 814 "iobase.c"
        FUNCTION_TABLE[$21]($22); //@line 814 "iobase.c"
        __label__ = 5; break; //@line 814 "iobase.c"
      case 5: // $bb4
        $0=0; //@line 815 "iobase.c"
        __label__ = 31; break; //@line 815 "iobase.c"
      case 6: // $bb5
        var $23=$data; //@line 817 "iobase.c"
        var $24=($23)==(__Py_NoneStruct); //@line 817 "iobase.c"
        if ($24) { __label__ = 7; break; } else { __label__ = 13; break; } //@line 817 "iobase.c"
      case 7: // $bb6
        var $25=$chunks; //@line 818 "iobase.c"
        var $26=$25; //@line 818 "iobase.c"
        var $27=$26+8; //@line 818 "iobase.c"
        var $28=HEAP[$27]; //@line 818 "iobase.c"
        var $29=($28)==0; //@line 818 "iobase.c"
        if ($29) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 818 "iobase.c"
      case 8: // $bb7
        var $30=$chunks; //@line 819 "iobase.c"
        var $31=$30; //@line 819 "iobase.c"
        var $32=HEAP[$31]; //@line 819 "iobase.c"
        var $33=($32) - 1; //@line 819 "iobase.c"
        var $34=$chunks; //@line 819 "iobase.c"
        var $35=$34; //@line 819 "iobase.c"
        HEAP[$35]=$33; //@line 819 "iobase.c"
        var $36=$chunks; //@line 819 "iobase.c"
        var $37=$36; //@line 819 "iobase.c"
        var $38=HEAP[$37]; //@line 819 "iobase.c"
        var $39=($38)==0; //@line 819 "iobase.c"
        if ($39) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 819 "iobase.c"
      case 9: // $bb8
        var $40=$chunks; //@line 819 "iobase.c"
        var $41=$40+4; //@line 819 "iobase.c"
        var $42=HEAP[$41]; //@line 819 "iobase.c"
        var $43=$42+24; //@line 819 "iobase.c"
        var $44=HEAP[$43]; //@line 819 "iobase.c"
        var $45=$chunks; //@line 819 "iobase.c"
        FUNCTION_TABLE[$44]($45); //@line 819 "iobase.c"
        __label__ = 10; break; //@line 819 "iobase.c"
      case 10: // $bb9
        var $46=$data; //@line 820 "iobase.c"
        $0=$46; //@line 820 "iobase.c"
        __label__ = 31; break; //@line 820 "iobase.c"
      case 11: // $bb10
        var $47=$data; //@line 822 "iobase.c"
        var $48=$47; //@line 822 "iobase.c"
        var $49=HEAP[$48]; //@line 822 "iobase.c"
        var $50=($49) - 1; //@line 822 "iobase.c"
        var $51=$data; //@line 822 "iobase.c"
        var $52=$51; //@line 822 "iobase.c"
        HEAP[$52]=$50; //@line 822 "iobase.c"
        var $53=$data; //@line 822 "iobase.c"
        var $54=$53; //@line 822 "iobase.c"
        var $55=HEAP[$54]; //@line 822 "iobase.c"
        var $56=($55)==0; //@line 822 "iobase.c"
        if ($56) { __label__ = 12; break; } else { __label__ = 28; break; } //@line 822 "iobase.c"
      case 12: // $bb11
        var $57=$data; //@line 822 "iobase.c"
        var $58=$57+4; //@line 822 "iobase.c"
        var $59=HEAP[$58]; //@line 822 "iobase.c"
        var $60=$59+24; //@line 822 "iobase.c"
        var $61=HEAP[$60]; //@line 822 "iobase.c"
        var $62=$data; //@line 822 "iobase.c"
        FUNCTION_TABLE[$61]($62); //@line 822 "iobase.c"
        __label__ = 28; break; //@line 822 "iobase.c"
      case 13: // $bb13
        var $63=$data; //@line 825 "iobase.c"
        var $64=$63+4; //@line 825 "iobase.c"
        var $65=HEAP[$64]; //@line 825 "iobase.c"
        var $66=$65+84; //@line 825 "iobase.c"
        var $67=HEAP[$66]; //@line 825 "iobase.c"
        var $68=($67) & 134217728; //@line 825 "iobase.c"
        var $69=($68)==0; //@line 825 "iobase.c"
        if ($69) { __label__ = 14; break; } else { __label__ = 19; break; } //@line 825 "iobase.c"
      case 14: // $bb14
        var $70=$chunks; //@line 826 "iobase.c"
        var $71=$70; //@line 826 "iobase.c"
        var $72=HEAP[$71]; //@line 826 "iobase.c"
        var $73=($72) - 1; //@line 826 "iobase.c"
        var $74=$chunks; //@line 826 "iobase.c"
        var $75=$74; //@line 826 "iobase.c"
        HEAP[$75]=$73; //@line 826 "iobase.c"
        var $76=$chunks; //@line 826 "iobase.c"
        var $77=$76; //@line 826 "iobase.c"
        var $78=HEAP[$77]; //@line 826 "iobase.c"
        var $79=($78)==0; //@line 826 "iobase.c"
        if ($79) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 826 "iobase.c"
      case 15: // $bb15
        var $80=$chunks; //@line 826 "iobase.c"
        var $81=$80+4; //@line 826 "iobase.c"
        var $82=HEAP[$81]; //@line 826 "iobase.c"
        var $83=$82+24; //@line 826 "iobase.c"
        var $84=HEAP[$83]; //@line 826 "iobase.c"
        var $85=$chunks; //@line 826 "iobase.c"
        FUNCTION_TABLE[$84]($85); //@line 826 "iobase.c"
        __label__ = 16; break; //@line 826 "iobase.c"
      case 16: // $bb16
        var $86=$data; //@line 827 "iobase.c"
        var $87=$86; //@line 827 "iobase.c"
        var $88=HEAP[$87]; //@line 827 "iobase.c"
        var $89=($88) - 1; //@line 827 "iobase.c"
        var $90=$data; //@line 827 "iobase.c"
        var $91=$90; //@line 827 "iobase.c"
        HEAP[$91]=$89; //@line 827 "iobase.c"
        var $92=$data; //@line 827 "iobase.c"
        var $93=$92; //@line 827 "iobase.c"
        var $94=HEAP[$93]; //@line 827 "iobase.c"
        var $95=($94)==0; //@line 827 "iobase.c"
        if ($95) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 827 "iobase.c"
      case 17: // $bb17
        var $96=$data; //@line 827 "iobase.c"
        var $97=$96+4; //@line 827 "iobase.c"
        var $98=HEAP[$97]; //@line 827 "iobase.c"
        var $99=$98+24; //@line 827 "iobase.c"
        var $100=HEAP[$99]; //@line 827 "iobase.c"
        var $101=$data; //@line 827 "iobase.c"
        FUNCTION_TABLE[$100]($101); //@line 827 "iobase.c"
        __label__ = 18; break; //@line 827 "iobase.c"
      case 18: // $bb18
        var $102=HEAP[_PyExc_TypeError]; //@line 828 "iobase.c"
        _PyErr_SetString($102, __str3); //@line 828 "iobase.c"
        $0=0; //@line 829 "iobase.c"
        __label__ = 31; break; //@line 829 "iobase.c"
      case 19: // $bb19
        var $103=$data; //@line 831 "iobase.c"
        var $104=$103; //@line 831 "iobase.c"
        var $105=$104+8; //@line 831 "iobase.c"
        var $106=HEAP[$105]; //@line 831 "iobase.c"
        var $107=($106)==0; //@line 831 "iobase.c"
        if ($107) { __label__ = 20; break; } else { __label__ = 22; break; } //@line 831 "iobase.c"
      case 20: // $bb20
        var $108=$data; //@line 833 "iobase.c"
        var $109=$108; //@line 833 "iobase.c"
        var $110=HEAP[$109]; //@line 833 "iobase.c"
        var $111=($110) - 1; //@line 833 "iobase.c"
        var $112=$data; //@line 833 "iobase.c"
        var $113=$112; //@line 833 "iobase.c"
        HEAP[$113]=$111; //@line 833 "iobase.c"
        var $114=$data; //@line 833 "iobase.c"
        var $115=$114; //@line 833 "iobase.c"
        var $116=HEAP[$115]; //@line 833 "iobase.c"
        var $117=($116)==0; //@line 833 "iobase.c"
        if ($117) { __label__ = 21; break; } else { __label__ = 28; break; } //@line 833 "iobase.c"
      case 21: // $bb21
        var $118=$data; //@line 833 "iobase.c"
        var $119=$118+4; //@line 833 "iobase.c"
        var $120=HEAP[$119]; //@line 833 "iobase.c"
        var $121=$120+24; //@line 833 "iobase.c"
        var $122=HEAP[$121]; //@line 833 "iobase.c"
        var $123=$data; //@line 833 "iobase.c"
        FUNCTION_TABLE[$122]($123); //@line 833 "iobase.c"
        __label__ = 28; break; //@line 833 "iobase.c"
      case 22: // $bb23
        var $124=$chunks; //@line 836 "iobase.c"
        var $125=$data; //@line 836 "iobase.c"
        var $126=_PyList_Append($124, $125); //@line 836 "iobase.c"
        $r=$126; //@line 836 "iobase.c"
        var $127=$data; //@line 837 "iobase.c"
        var $128=$127; //@line 837 "iobase.c"
        var $129=HEAP[$128]; //@line 837 "iobase.c"
        var $130=($129) - 1; //@line 837 "iobase.c"
        var $131=$data; //@line 837 "iobase.c"
        var $132=$131; //@line 837 "iobase.c"
        HEAP[$132]=$130; //@line 837 "iobase.c"
        var $133=$data; //@line 837 "iobase.c"
        var $134=$133; //@line 837 "iobase.c"
        var $135=HEAP[$134]; //@line 837 "iobase.c"
        var $136=($135)==0; //@line 837 "iobase.c"
        if ($136) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 837 "iobase.c"
      case 23: // $bb24
        var $137=$data; //@line 837 "iobase.c"
        var $138=$137+4; //@line 837 "iobase.c"
        var $139=HEAP[$138]; //@line 837 "iobase.c"
        var $140=$139+24; //@line 837 "iobase.c"
        var $141=HEAP[$140]; //@line 837 "iobase.c"
        var $142=$data; //@line 837 "iobase.c"
        FUNCTION_TABLE[$141]($142); //@line 837 "iobase.c"
        __label__ = 24; break; //@line 837 "iobase.c"
      case 24: // $bb25
        var $143=$r; //@line 838 "iobase.c"
        var $144=($143) < 0; //@line 838 "iobase.c"
        if ($144) { __label__ = 25; break; } else { __label__ = 2; break; } //@line 838 "iobase.c"
      case 25: // $bb26
        var $145=$chunks; //@line 839 "iobase.c"
        var $146=$145; //@line 839 "iobase.c"
        var $147=HEAP[$146]; //@line 839 "iobase.c"
        var $148=($147) - 1; //@line 839 "iobase.c"
        var $149=$chunks; //@line 839 "iobase.c"
        var $150=$149; //@line 839 "iobase.c"
        HEAP[$150]=$148; //@line 839 "iobase.c"
        var $151=$chunks; //@line 839 "iobase.c"
        var $152=$151; //@line 839 "iobase.c"
        var $153=HEAP[$152]; //@line 839 "iobase.c"
        var $154=($153)==0; //@line 839 "iobase.c"
        if ($154) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 839 "iobase.c"
      case 26: // $bb27
        var $155=$chunks; //@line 839 "iobase.c"
        var $156=$155+4; //@line 839 "iobase.c"
        var $157=HEAP[$156]; //@line 839 "iobase.c"
        var $158=$157+24; //@line 839 "iobase.c"
        var $159=HEAP[$158]; //@line 839 "iobase.c"
        var $160=$chunks; //@line 839 "iobase.c"
        FUNCTION_TABLE[$159]($160); //@line 839 "iobase.c"
        __label__ = 27; break; //@line 839 "iobase.c"
      case 27: // $bb28
        $0=0; //@line 840 "iobase.c"
        __label__ = 31; break; //@line 840 "iobase.c"
      case 28: // $bb30
        var $161=HEAP[__PyIO_empty_bytes]; //@line 843 "iobase.c"
        var $162=$chunks; //@line 843 "iobase.c"
        var $163=__PyString_Join($161, $162); //@line 843 "iobase.c"
        $result=$163; //@line 843 "iobase.c"
        var $164=$chunks; //@line 844 "iobase.c"
        var $165=$164; //@line 844 "iobase.c"
        var $166=HEAP[$165]; //@line 844 "iobase.c"
        var $167=($166) - 1; //@line 844 "iobase.c"
        var $168=$chunks; //@line 844 "iobase.c"
        var $169=$168; //@line 844 "iobase.c"
        HEAP[$169]=$167; //@line 844 "iobase.c"
        var $170=$chunks; //@line 844 "iobase.c"
        var $171=$170; //@line 844 "iobase.c"
        var $172=HEAP[$171]; //@line 844 "iobase.c"
        var $173=($172)==0; //@line 844 "iobase.c"
        if ($173) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 844 "iobase.c"
      case 29: // $bb31
        var $174=$chunks; //@line 844 "iobase.c"
        var $175=$174+4; //@line 844 "iobase.c"
        var $176=HEAP[$175]; //@line 844 "iobase.c"
        var $177=$176+24; //@line 844 "iobase.c"
        var $178=HEAP[$177]; //@line 844 "iobase.c"
        var $179=$chunks; //@line 844 "iobase.c"
        FUNCTION_TABLE[$178]($179); //@line 844 "iobase.c"
        __label__ = 30; break; //@line 844 "iobase.c"
      case 30: // $bb32
        var $180=$result; //@line 845 "iobase.c"
        $0=$180; //@line 845 "iobase.c"
        __label__ = 31; break; //@line 845 "iobase.c"
      case 31: // $bb33
        var $181=$0; //@line 808 "iobase.c"
        $retval=$181; //@line 808 "iobase.c"
        var $retval34=$retval; //@line 808 "iobase.c"
        ;
        return $retval34; //@line 808 "iobase.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _blockingioerror_init($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $kwds_addr;
        var $retval;
        var $0;
        var $myerrno=__stackBase__;
        var $strerror=__stackBase__+4;
        var $baseargs;
        var $written=__stackBase__+8;
        $self_addr=$self;
        $args_addr=$args;
        $kwds_addr=$kwds;
        HEAP[$myerrno]=0; //@line 100 "_iomodule.c"
        HEAP[$strerror]=0; //@line 100 "_iomodule.c"
        $baseargs=0; //@line 101 "_iomodule.c"
        HEAP[$written]=0; //@line 102 "_iomodule.c"
        var $1=$args_addr; //@line 104 "_iomodule.c"
        var $2=$1+4; //@line 104 "_iomodule.c"
        var $3=HEAP[$2]; //@line 104 "_iomodule.c"
        var $4=$3+84; //@line 104 "_iomodule.c"
        var $5=HEAP[$4]; //@line 104 "_iomodule.c"
        var $6=($5) & 67108864; //@line 104 "_iomodule.c"
        var $7=($6)==0; //@line 104 "_iomodule.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 104 "_iomodule.c"
      case 1: // $bb
        ___assert_fail(__str232, __str1233, 104, ___PRETTY_FUNCTION___8454); //@line 104 "_iomodule.c"
        throw "Reached an unreachable!" //@line 104 "_iomodule.c"
      case 2: // $bb1
        var $8=$self_addr; //@line 106 "_iomodule.c"
        var $9=$8+32; //@line 106 "_iomodule.c"
        HEAP[$9]=0; //@line 106 "_iomodule.c"
        var $10=$args_addr; //@line 107 "_iomodule.c"
        var $11=__PyArg_ParseTuple_SizeT($10, __str2234, allocate([$myerrno,0,0,0,$strerror,0,0,0,$written,0,0,0], ["%struct.PyObject**",0,0,0,"%struct.PyObject**",0,0,0,"i32*",0,0,0], ALLOC_STACK)); //@line 107 "_iomodule.c"
        var $12=($11)==0; //@line 107 "_iomodule.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 107 "_iomodule.c"
      case 3: // $bb2
        $0=-1; //@line 109 "_iomodule.c"
        __label__ = 13; break; //@line 109 "_iomodule.c"
      case 4: // $bb3
        var $13=HEAP[$strerror]; //@line 111 "_iomodule.c"
        var $14=HEAP[$myerrno]; //@line 111 "_iomodule.c"
        var $15=_PyTuple_Pack(2, allocate([$14,0,0,0,$13,0,0,0], ["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 111 "_iomodule.c"
        $baseargs=$15; //@line 111 "_iomodule.c"
        var $16=$baseargs; //@line 112 "_iomodule.c"
        var $17=($16)==0; //@line 112 "_iomodule.c"
        if ($17) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 112 "_iomodule.c"
      case 5: // $bb4
        $0=-1; //@line 113 "_iomodule.c"
        __label__ = 13; break; //@line 113 "_iomodule.c"
      case 6: // $bb5
        var $18=HEAP[_PyExc_IOError]; //@line 115 "_iomodule.c"
        var $19=$18; //@line 115 "_iomodule.c"
        var $20=$19+148; //@line 115 "_iomodule.c"
        var $21=HEAP[$20]; //@line 115 "_iomodule.c"
        var $22=$self_addr; //@line 115 "_iomodule.c"
        var $23=$22; //@line 115 "_iomodule.c"
        var $24=$baseargs; //@line 115 "_iomodule.c"
        var $25=$kwds_addr; //@line 115 "_iomodule.c"
        var $26=FUNCTION_TABLE[$21]($23, $24, $25); //@line 115 "_iomodule.c"
        var $27=($26)==-1; //@line 115 "_iomodule.c"
        var $28=$baseargs; //@line 117 "_iomodule.c"
        var $29=$28; //@line 117 "_iomodule.c"
        var $30=HEAP[$29]; //@line 117 "_iomodule.c"
        var $31=($30) - 1; //@line 117 "_iomodule.c"
        var $32=$baseargs; //@line 117 "_iomodule.c"
        var $33=$32; //@line 117 "_iomodule.c"
        HEAP[$33]=$31; //@line 117 "_iomodule.c"
        var $34=$baseargs; //@line 117 "_iomodule.c"
        var $35=$34; //@line 117 "_iomodule.c"
        var $36=HEAP[$35]; //@line 117 "_iomodule.c"
        var $37=($36)==0; //@line 117 "_iomodule.c"
        if ($27) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 115 "_iomodule.c"
      case 7: // $bb6
        if ($37) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 117 "_iomodule.c"
      case 8: // $bb7
        var $38=$baseargs; //@line 117 "_iomodule.c"
        var $39=$38+4; //@line 117 "_iomodule.c"
        var $40=HEAP[$39]; //@line 117 "_iomodule.c"
        var $41=$40+24; //@line 117 "_iomodule.c"
        var $42=HEAP[$41]; //@line 117 "_iomodule.c"
        var $43=$baseargs; //@line 117 "_iomodule.c"
        FUNCTION_TABLE[$42]($43); //@line 117 "_iomodule.c"
        __label__ = 9; break; //@line 117 "_iomodule.c"
      case 9: // $bb8
        $0=-1; //@line 118 "_iomodule.c"
        __label__ = 13; break; //@line 118 "_iomodule.c"
      case 10: // $bb9
        if ($37) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 120 "_iomodule.c"
      case 11: // $bb10
        var $44=$baseargs; //@line 120 "_iomodule.c"
        var $45=$44+4; //@line 120 "_iomodule.c"
        var $46=HEAP[$45]; //@line 120 "_iomodule.c"
        var $47=$46+24; //@line 120 "_iomodule.c"
        var $48=HEAP[$47]; //@line 120 "_iomodule.c"
        var $49=$baseargs; //@line 120 "_iomodule.c"
        FUNCTION_TABLE[$48]($49); //@line 120 "_iomodule.c"
        __label__ = 12; break; //@line 120 "_iomodule.c"
      case 12: // $bb11
        var $50=HEAP[$written]; //@line 122 "_iomodule.c"
        var $51=$self_addr; //@line 122 "_iomodule.c"
        var $52=$51+32; //@line 122 "_iomodule.c"
        HEAP[$52]=$50; //@line 122 "_iomodule.c"
        $0=0; //@line 123 "_iomodule.c"
        __label__ = 13; break; //@line 123 "_iomodule.c"
      case 13: // $bb12
        var $53=$0; //@line 109 "_iomodule.c"
        $retval=$53; //@line 109 "_iomodule.c"
        var $retval13=$retval; //@line 109 "_iomodule.c"
        STACKTOP = __stackBase__;
        return $retval13; //@line 109 "_iomodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _io_open($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 161; _memset(__stackBase__, 0, 161);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $kwds_addr;
        var $retval;
        var $0;
        var $kwlist=__stackBase__;
        var $file=__stackBase__+32;
        var $mode=__stackBase__+36;
        var $buffering=__stackBase__+40;
        var $closefd=__stackBase__+44;
        var $encoding=__stackBase__+48;
        var $errors=__stackBase__+52;
        var $newline=__stackBase__+56;
        var $i;
        var $reading;
        var $writing;
        var $appending;
        var $updating;
        var $text;
        var $binary;
        var $universal;
        var $rawmode=__stackBase__+60;
        var $m;
        var $line_buffering;
        var $isatty;
        var $raw;
        var $modeobj;
        var $buffer;
        var $wrapper;
        var $repr;
        var $c;
        var $res;
        var $st=__stackBase__+65;
        var $fileno;
        var $res66;
        var $Buffered_class;
        var $_py_tmp;
        var $_py_tmp100;
        $self_addr=$self;
        $args_addr=$args;
        $kwds_addr=$kwds;
        var $1=$kwlist; //@line 292 "_iomodule.c"
        HEAP[$1]=__str6239; //@line 292 "_iomodule.c"
        var $2=$kwlist+4; //@line 292 "_iomodule.c"
        HEAP[$2]=__str7240; //@line 292 "_iomodule.c"
        var $3=$kwlist+8; //@line 292 "_iomodule.c"
        HEAP[$3]=__str8241; //@line 292 "_iomodule.c"
        var $4=$kwlist+12; //@line 292 "_iomodule.c"
        HEAP[$4]=__str9242; //@line 292 "_iomodule.c"
        var $5=$kwlist+16; //@line 292 "_iomodule.c"
        HEAP[$5]=__str10243; //@line 292 "_iomodule.c"
        var $6=$kwlist+20; //@line 292 "_iomodule.c"
        HEAP[$6]=__str11244; //@line 292 "_iomodule.c"
        var $7=$kwlist+24; //@line 292 "_iomodule.c"
        HEAP[$7]=__str12245; //@line 292 "_iomodule.c"
        var $8=$kwlist+28; //@line 292 "_iomodule.c"
        HEAP[$8]=0; //@line 292 "_iomodule.c"
        HEAP[$mode]=__str13246; //@line 294 "_iomodule.c"
        HEAP[$buffering]=-1; //@line 295 "_iomodule.c"
        HEAP[$closefd]=1; //@line 295 "_iomodule.c"
        HEAP[$encoding]=0; //@line 296 "_iomodule.c"
        HEAP[$errors]=0; //@line 296 "_iomodule.c"
        HEAP[$newline]=0; //@line 296 "_iomodule.c"
        $reading=0; //@line 299 "_iomodule.c"
        $writing=0; //@line 299 "_iomodule.c"
        $appending=0; //@line 299 "_iomodule.c"
        $updating=0; //@line 299 "_iomodule.c"
        $text=0; //@line 300 "_iomodule.c"
        $binary=0; //@line 300 "_iomodule.c"
        $universal=0; //@line 300 "_iomodule.c"
        $modeobj=0; //@line 305 "_iomodule.c"
        $buffer=0; //@line 305 "_iomodule.c"
        $wrapper=0; //@line 305 "_iomodule.c"
        var $9=$args_addr; //@line 307 "_iomodule.c"
        var $10=$kwds_addr; //@line 307 "_iomodule.c"
        var $kwlist1=$kwlist; //@line 307 "_iomodule.c"
        var $11=__PyArg_ParseTupleAndKeywords_SizeT($9, $10, __str14247, $kwlist1, allocate([$file,0,0,0,$mode,0,0,0,$buffering,0,0,0,$encoding,0,0,0,$errors,0,0,0,$newline,0,0,0,$closefd,0,0,0], ["%struct.PyObject**",0,0,0,"i8**",0,0,0,"i32*",0,0,0,"i8**",0,0,0,"i8**",0,0,0,"i8**",0,0,0,"i32*",0,0,0], ALLOC_STACK)); //@line 307 "_iomodule.c"
        var $12=($11)==0; //@line 307 "_iomodule.c"
        if ($12) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 307 "_iomodule.c"
      case 1: // $bb
        $0=0; //@line 311 "_iomodule.c"
        __label__ = 120; break; //@line 311 "_iomodule.c"
      case 2: // $bb2
        var $13=HEAP[$file]; //@line 314 "_iomodule.c"
        var $14=$13+4; //@line 314 "_iomodule.c"
        var $15=HEAP[$14]; //@line 314 "_iomodule.c"
        var $16=$15+84; //@line 314 "_iomodule.c"
        var $17=HEAP[$16]; //@line 314 "_iomodule.c"
        var $18=($17) & 268435456; //@line 314 "_iomodule.c"
        var $19=($18)==0; //@line 314 "_iomodule.c"
        if ($19) { __label__ = 3; break; } else { __label__ = 9; break; } //@line 314 "_iomodule.c"
      case 3: // $bb3
        var $20=HEAP[$file]; //@line 314 "_iomodule.c"
        var $21=$20+4; //@line 314 "_iomodule.c"
        var $22=HEAP[$21]; //@line 314 "_iomodule.c"
        var $23=$22+84; //@line 314 "_iomodule.c"
        var $24=HEAP[$23]; //@line 314 "_iomodule.c"
        var $25=($24) & 134217728; //@line 314 "_iomodule.c"
        var $26=($25)==0; //@line 314 "_iomodule.c"
        if ($26) { __label__ = 4; break; } else { __label__ = 9; break; } //@line 314 "_iomodule.c"
      case 4: // $bb4
        var $27=HEAP[$file]; //@line 314 "_iomodule.c"
        var $28=_PyNumber_Check($27); //@line 314 "_iomodule.c"
        var $29=($28)==0; //@line 314 "_iomodule.c"
        if ($29) { __label__ = 5; break; } else { __label__ = 9; break; } //@line 314 "_iomodule.c"
      case 5: // $bb5
        var $30=HEAP[$file]; //@line 317 "_iomodule.c"
        var $31=_PyObject_Repr($30); //@line 317 "_iomodule.c"
        $repr=$31; //@line 317 "_iomodule.c"
        var $32=$repr; //@line 318 "_iomodule.c"
        var $33=($32)!=0; //@line 318 "_iomodule.c"
        if ($33) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 318 "_iomodule.c"
      case 6: // $bb6
        var $34=$repr; //@line 319 "_iomodule.c"
        var $35=$34; //@line 319 "_iomodule.c"
        var $36=$35+20; //@line 319 "_iomodule.c"
        var $37=$36; //@line 319 "_iomodule.c"
        var $38=HEAP[_PyExc_TypeError]; //@line 319 "_iomodule.c"
        var $39=_PyErr_Format($38, __str15248, allocate([$37,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 319 "_iomodule.c"
        var $40=$repr; //@line 321 "_iomodule.c"
        var $41=$40; //@line 321 "_iomodule.c"
        var $42=HEAP[$41]; //@line 321 "_iomodule.c"
        var $43=($42) - 1; //@line 321 "_iomodule.c"
        var $44=$repr; //@line 321 "_iomodule.c"
        var $45=$44; //@line 321 "_iomodule.c"
        HEAP[$45]=$43; //@line 321 "_iomodule.c"
        var $46=$repr; //@line 321 "_iomodule.c"
        var $47=$46; //@line 321 "_iomodule.c"
        var $48=HEAP[$47]; //@line 321 "_iomodule.c"
        var $49=($48)==0; //@line 321 "_iomodule.c"
        if ($49) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 321 "_iomodule.c"
      case 7: // $bb7
        var $50=$repr; //@line 321 "_iomodule.c"
        var $51=$50+4; //@line 321 "_iomodule.c"
        var $52=HEAP[$51]; //@line 321 "_iomodule.c"
        var $53=$52+24; //@line 321 "_iomodule.c"
        var $54=HEAP[$53]; //@line 321 "_iomodule.c"
        var $55=$repr; //@line 321 "_iomodule.c"
        FUNCTION_TABLE[$54]($55); //@line 321 "_iomodule.c"
        __label__ = 8; break; //@line 321 "_iomodule.c"
      case 8: // $bb8
        $0=0; //@line 323 "_iomodule.c"
        __label__ = 120; break; //@line 323 "_iomodule.c"
      case 9: // $bb9
        $i=0; //@line 327 "_iomodule.c"
        __label__ = 21; break; //@line 327 "_iomodule.c"
      case 10: // $bb10
        var $56=HEAP[$mode]; //@line 328 "_iomodule.c"
        var $57=$i; //@line 328 "_iomodule.c"
        var $58=$56+$57; //@line 328 "_iomodule.c"
        var $59=HEAP[$58]; //@line 328 "_iomodule.c"
        $c=$59; //@line 328 "_iomodule.c"
        var $60=$c; //@line 330 "_iomodule.c"
        var $61=($60); //@line 330 "_iomodule.c"
        if ($61 == 43) {
          __label__ = 14; break;
        }
        else if ($61 == 85) {
          __label__ = 17; break;
        }
        else if ($61 == 97) {
          __label__ = 13; break;
        }
        else if ($61 == 98) {
          __label__ = 16; break;
        }
        else if ($61 == 114) {
          __label__ = 11; break;
        }
        else if ($61 == 116) {
          __label__ = 15; break;
        }
        else if ($61 == 119) {
          __label__ = 12; break;
        }
        else {
        __label__ = 19; break;
        }
        
      case 11: // $bb11
        $reading=1; //@line 332 "_iomodule.c"
        __label__ = 18; break; //@line 332 "_iomodule.c"
      case 12: // $bb12
        $writing=1; //@line 335 "_iomodule.c"
        __label__ = 18; break; //@line 335 "_iomodule.c"
      case 13: // $bb13
        $appending=1; //@line 338 "_iomodule.c"
        __label__ = 18; break; //@line 338 "_iomodule.c"
      case 14: // $bb14
        $updating=1; //@line 341 "_iomodule.c"
        __label__ = 18; break; //@line 341 "_iomodule.c"
      case 15: // $bb15
        $text=1; //@line 344 "_iomodule.c"
        __label__ = 18; break; //@line 344 "_iomodule.c"
      case 16: // $bb16
        $binary=1; //@line 347 "_iomodule.c"
        __label__ = 18; break; //@line 347 "_iomodule.c"
      case 17: // $bb17
        $universal=1; //@line 350 "_iomodule.c"
        $reading=1; //@line 351 "_iomodule.c"
        __label__ = 18; break; //@line 351 "_iomodule.c"
      case 18: // $bb19
        var $62=$c; //@line 358 "_iomodule.c"
        var $63=($62); //@line 358 "_iomodule.c"
        var $64=HEAP[$mode]; //@line 358 "_iomodule.c"
        var $65=$i; //@line 358 "_iomodule.c"
        var $66=$64+$65; //@line 358 "_iomodule.c"
        var $67=$66+1; //@line 358 "_iomodule.c"
        var $68=_strchr($67, $63); //@line 358 "_iomodule.c"
        var $69=($68)!=0; //@line 358 "_iomodule.c"
        if ($69) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 358 "_iomodule.c"
      case 19: // $invalid_mode
        var $70=HEAP[$mode]; //@line 360 "_iomodule.c"
        var $71=HEAP[_PyExc_ValueError]; //@line 360 "_iomodule.c"
        var $72=_PyErr_Format($71, __str16249, allocate([$70,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 360 "_iomodule.c"
        $0=0; //@line 361 "_iomodule.c"
        __label__ = 120; break; //@line 361 "_iomodule.c"
      case 20: // $bb20
        var $73=$i; //@line 327 "_iomodule.c"
        var $74=($73) + 1; //@line 327 "_iomodule.c"
        $i=$74; //@line 327 "_iomodule.c"
        __label__ = 21; break; //@line 327 "_iomodule.c"
      case 21: // $bb21
        var $75=HEAP[$mode]; //@line 327 "_iomodule.c"
        var $76=_strlen($75); //@line 327 "_iomodule.c"
        var $77=$i; //@line 327 "_iomodule.c"
        var $78=($76) > ($77); //@line 327 "_iomodule.c"
        if ($78) { __label__ = 10; break; } else { __label__ = 22; break; } //@line 327 "_iomodule.c"
      case 22: // $bb22
        var $rawmode23=$rawmode; //@line 366 "_iomodule.c"
        $m=$rawmode23; //@line 366 "_iomodule.c"
        var $79=$reading; //@line 367 "_iomodule.c"
        var $80=($79)!=0; //@line 367 "_iomodule.c"
        if ($80) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 367 "_iomodule.c"
      case 23: // $bb24
        var $81=$m; //@line 367 "_iomodule.c"
        HEAP[$81]=114; //@line 367 "_iomodule.c"
        var $82=$m; //@line 367 "_iomodule.c"
        var $83=$82+1; //@line 367 "_iomodule.c"
        $m=$83; //@line 367 "_iomodule.c"
        __label__ = 24; break; //@line 367 "_iomodule.c"
      case 24: // $bb25
        var $84=$writing; //@line 368 "_iomodule.c"
        var $85=($84)!=0; //@line 368 "_iomodule.c"
        if ($85) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 368 "_iomodule.c"
      case 25: // $bb26
        var $86=$m; //@line 368 "_iomodule.c"
        HEAP[$86]=119; //@line 368 "_iomodule.c"
        var $87=$m; //@line 368 "_iomodule.c"
        var $88=$87+1; //@line 368 "_iomodule.c"
        $m=$88; //@line 368 "_iomodule.c"
        __label__ = 26; break; //@line 368 "_iomodule.c"
      case 26: // $bb27
        var $89=$appending; //@line 369 "_iomodule.c"
        var $90=($89)!=0; //@line 369 "_iomodule.c"
        if ($90) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 369 "_iomodule.c"
      case 27: // $bb28
        var $91=$m; //@line 369 "_iomodule.c"
        HEAP[$91]=97; //@line 369 "_iomodule.c"
        var $92=$m; //@line 369 "_iomodule.c"
        var $93=$92+1; //@line 369 "_iomodule.c"
        $m=$93; //@line 369 "_iomodule.c"
        __label__ = 28; break; //@line 369 "_iomodule.c"
      case 28: // $bb29
        var $94=$updating; //@line 370 "_iomodule.c"
        var $95=($94)!=0; //@line 370 "_iomodule.c"
        if ($95) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 370 "_iomodule.c"
      case 29: // $bb30
        var $96=$m; //@line 370 "_iomodule.c"
        HEAP[$96]=43; //@line 370 "_iomodule.c"
        var $97=$m; //@line 370 "_iomodule.c"
        var $98=$97+1; //@line 370 "_iomodule.c"
        $m=$98; //@line 370 "_iomodule.c"
        __label__ = 30; break; //@line 370 "_iomodule.c"
      case 30: // $bb31
        var $99=$m; //@line 371 "_iomodule.c"
        HEAP[$99]=0; //@line 371 "_iomodule.c"
        var $100=$universal; //@line 374 "_iomodule.c"
        var $101=($100)!=0; //@line 374 "_iomodule.c"
        if ($101) { __label__ = 31; break; } else { __label__ = 35; break; } //@line 374 "_iomodule.c"
      case 31: // $bb32
        var $102=$writing; //@line 375 "_iomodule.c"
        var $103=($102)!=0; //@line 375 "_iomodule.c"
        if ($103) { __label__ = 33; break; } else { __label__ = 32; break; } //@line 375 "_iomodule.c"
      case 32: // $bb33
        var $104=$appending; //@line 375 "_iomodule.c"
        var $105=($104)!=0; //@line 375 "_iomodule.c"
        if ($105) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 375 "_iomodule.c"
      case 33: // $bb34
        var $106=HEAP[_PyExc_ValueError]; //@line 376 "_iomodule.c"
        _PyErr_SetString($106, __str17250); //@line 376 "_iomodule.c"
        $0=0; //@line 378 "_iomodule.c"
        __label__ = 120; break; //@line 378 "_iomodule.c"
      case 34: // $bb35
        $reading=1; //@line 380 "_iomodule.c"
        __label__ = 35; break; //@line 380 "_iomodule.c"
      case 35: // $bb36
        var $107=$text; //@line 383 "_iomodule.c"
        var $108=($107)!=0; //@line 383 "_iomodule.c"
        if ($108) { __label__ = 36; break; } else { __label__ = 38; break; } //@line 383 "_iomodule.c"
      case 36: // $bb37
        var $109=$binary; //@line 383 "_iomodule.c"
        var $110=($109)!=0; //@line 383 "_iomodule.c"
        if ($110) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 383 "_iomodule.c"
      case 37: // $bb38
        var $111=HEAP[_PyExc_ValueError]; //@line 384 "_iomodule.c"
        _PyErr_SetString($111, __str18251); //@line 384 "_iomodule.c"
        $0=0; //@line 386 "_iomodule.c"
        __label__ = 120; break; //@line 386 "_iomodule.c"
      case 38: // $bb39
        var $112=$reading; //@line 389 "_iomodule.c"
        var $113=$writing; //@line 389 "_iomodule.c"
        var $114=$appending; //@line 389 "_iomodule.c"
        var $115=($113) + ($112); //@line 389 "_iomodule.c"
        var $116=($115) + ($114); //@line 389 "_iomodule.c"
        var $117=($116) > 1; //@line 389 "_iomodule.c"
        if ($117) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 389 "_iomodule.c"
      case 39: // $bb40
        var $118=HEAP[_PyExc_ValueError]; //@line 390 "_iomodule.c"
        _PyErr_SetString($118, __str19252); //@line 390 "_iomodule.c"
        $0=0; //@line 392 "_iomodule.c"
        __label__ = 120; break; //@line 392 "_iomodule.c"
      case 40: // $bb41
        var $119=$binary; //@line 395 "_iomodule.c"
        var $120=($119)!=0; //@line 395 "_iomodule.c"
        if ($120) { __label__ = 41; break; } else { __label__ = 49; break; } //@line 395 "_iomodule.c"
      case 41: // $bb42
        var $121=HEAP[$encoding]; //@line 395 "_iomodule.c"
        var $122=($121)!=0; //@line 395 "_iomodule.c"
        if ($122) { __label__ = 42; break; } else { __label__ = 43; break; } //@line 395 "_iomodule.c"
      case 42: // $bb43
        var $123=HEAP[_PyExc_ValueError]; //@line 396 "_iomodule.c"
        _PyErr_SetString($123, __str20253); //@line 396 "_iomodule.c"
        $0=0; //@line 398 "_iomodule.c"
        __label__ = 120; break; //@line 398 "_iomodule.c"
      case 43: // $bb44
        var $_pr=$binary;
        var $124=($_pr)!=0; //@line 401 "_iomodule.c"
        if ($124) { __label__ = 44; break; } else { __label__ = 49; break; } //@line 401 "_iomodule.c"
      case 44: // $bb45
        var $125=HEAP[$errors]; //@line 401 "_iomodule.c"
        var $126=($125)!=0; //@line 401 "_iomodule.c"
        if ($126) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 401 "_iomodule.c"
      case 45: // $bb46
        var $127=HEAP[_PyExc_ValueError]; //@line 402 "_iomodule.c"
        _PyErr_SetString($127, __str21254); //@line 402 "_iomodule.c"
        $0=0; //@line 404 "_iomodule.c"
        __label__ = 120; break; //@line 404 "_iomodule.c"
      case 46: // $bb47
        var $_pr1_pr=$binary;
        var $128=($_pr1_pr)!=0; //@line 407 "_iomodule.c"
        if ($128) { __label__ = 47; break; } else { __label__ = 49; break; } //@line 407 "_iomodule.c"
      case 47: // $bb48
        var $129=HEAP[$newline]; //@line 407 "_iomodule.c"
        var $130=($129)!=0; //@line 407 "_iomodule.c"
        if ($130) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 407 "_iomodule.c"
      case 48: // $bb49
        var $131=HEAP[_PyExc_ValueError]; //@line 408 "_iomodule.c"
        _PyErr_SetString($131, __str22255); //@line 408 "_iomodule.c"
        $0=0; //@line 410 "_iomodule.c"
        __label__ = 120; break; //@line 410 "_iomodule.c"
      case 49: // $bb50
        var $132=HEAP[$closefd]; //@line 414 "_iomodule.c"
        var $133=HEAP[$file]; //@line 414 "_iomodule.c"
        var $rawmode51=$rawmode; //@line 414 "_iomodule.c"
        var $134=__PyObject_CallFunction_SizeT(_PyFileIO_Type, __str23256, allocate([$133,0,0,0,$rawmode51,0,0,0,$132,0,0,0], ["%struct.PyObject*",0,0,0,"i8*",0,0,0,"i32",0,0,0], ALLOC_STACK)); //@line 414 "_iomodule.c"
        $raw=$134; //@line 414 "_iomodule.c"
        var $135=($134)==0; //@line 416 "_iomodule.c"
        if ($135) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 416 "_iomodule.c"
      case 50: // $bb52
        $0=0; //@line 417 "_iomodule.c"
        __label__ = 120; break; //@line 417 "_iomodule.c"
      case 51: // $bb53
        var $136=HEAP[$mode]; //@line 419 "_iomodule.c"
        var $137=_PyUnicodeUCS2_FromString($136); //@line 419 "_iomodule.c"
        $modeobj=$137; //@line 419 "_iomodule.c"
        var $138=$modeobj; //@line 420 "_iomodule.c"
        var $139=($138)==0; //@line 420 "_iomodule.c"
        if ($139) { __label__ = 107; break; } else { __label__ = 52; break; } //@line 420 "_iomodule.c"
      case 52: // $bb54
        var $140=$raw; //@line 425 "_iomodule.c"
        var $141=__PyObject_CallMethod_SizeT($140, __str24257, 0, allocate(1, "i32", ALLOC_STACK)); //@line 425 "_iomodule.c"
        $res=$141; //@line 425 "_iomodule.c"
        var $142=$res; //@line 426 "_iomodule.c"
        var $143=($142)==0; //@line 426 "_iomodule.c"
        if ($143) { __label__ = 107; break; } else { __label__ = 53; break; } //@line 426 "_iomodule.c"
      case 53: // $bb55
        var $144=$res; //@line 428 "_iomodule.c"
        var $145=_PyLong_AsLong($144); //@line 428 "_iomodule.c"
        $isatty=$145; //@line 428 "_iomodule.c"
        var $146=$res; //@line 429 "_iomodule.c"
        var $147=$146; //@line 429 "_iomodule.c"
        var $148=HEAP[$147]; //@line 429 "_iomodule.c"
        var $149=($148) - 1; //@line 429 "_iomodule.c"
        var $150=$res; //@line 429 "_iomodule.c"
        var $151=$150; //@line 429 "_iomodule.c"
        HEAP[$151]=$149; //@line 429 "_iomodule.c"
        var $152=$res; //@line 429 "_iomodule.c"
        var $153=$152; //@line 429 "_iomodule.c"
        var $154=HEAP[$153]; //@line 429 "_iomodule.c"
        var $155=($154)==0; //@line 429 "_iomodule.c"
        if ($155) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 429 "_iomodule.c"
      case 54: // $bb56
        var $156=$res; //@line 429 "_iomodule.c"
        var $157=$156+4; //@line 429 "_iomodule.c"
        var $158=HEAP[$157]; //@line 429 "_iomodule.c"
        var $159=$158+24; //@line 429 "_iomodule.c"
        var $160=HEAP[$159]; //@line 429 "_iomodule.c"
        var $161=$res; //@line 429 "_iomodule.c"
        FUNCTION_TABLE[$160]($161); //@line 429 "_iomodule.c"
        __label__ = 55; break; //@line 429 "_iomodule.c"
      case 55: // $bb57
        var $162=$isatty; //@line 430 "_iomodule.c"
        var $163=($162)==-1; //@line 430 "_iomodule.c"
        if ($163) { __label__ = 56; break; } else { __label__ = 57; break; } //@line 430 "_iomodule.c"
      case 56: // $bb58
        var $164=_PyErr_Occurred(); //@line 430 "_iomodule.c"
        var $165=($164)!=0; //@line 430 "_iomodule.c"
        if ($165) { __label__ = 107; break; } else { __label__ = 57; break; } //@line 430 "_iomodule.c"
      case 57: // $bb59
        var $166=HEAP[$buffering]; //@line 434 "_iomodule.c"
        var $167=($166)==1; //@line 434 "_iomodule.c"
        if ($167) { __label__ = 61; break; } else { __label__ = 58; break; } //@line 434 "_iomodule.c"
      case 58: // $bb60
        var $168=HEAP[$buffering]; //@line 434 "_iomodule.c"
        var $169=($168) >= 0; //@line 434 "_iomodule.c"
        if ($169) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 434 "_iomodule.c"
      case 59: // $bb64_thread3
        $line_buffering=0; //@line 439 "_iomodule.c"
        __label__ = 71; break;
      case 60: // $bb61
        var $170=$isatty; //@line 434 "_iomodule.c"
        var $171=($170)!=0; //@line 434 "_iomodule.c"
        if ($171) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 434 "_iomodule.c"
      case 61: // $bb64_thread
        HEAP[$buffering]=-1; //@line 435 "_iomodule.c"
        $line_buffering=1; //@line 436 "_iomodule.c"
        __label__ = 63; break;
      case 62: // $bb64
        var $_pr2_pr=HEAP[$buffering];
        $line_buffering=0; //@line 439 "_iomodule.c"
        var $172=($_pr2_pr) < 0; //@line 441 "_iomodule.c"
        if ($172) { __lastLabel__ = 62; __label__ = 63; break; } else { __lastLabel__ = 62; __label__ = 75; break; } //@line 441 "_iomodule.c"
      case 63: // $bb65
        HEAP[$buffering]=8192; //@line 442 "_iomodule.c"
        var $173=$raw; //@line 447 "_iomodule.c"
        var $174=__PyObject_CallMethod_SizeT($173, __str25258, 0, allocate(1, "i32", ALLOC_STACK)); //@line 447 "_iomodule.c"
        $res66=$174; //@line 447 "_iomodule.c"
        var $175=($174)==0; //@line 448 "_iomodule.c"
        if ($175) { __label__ = 107; break; } else { __label__ = 64; break; } //@line 448 "_iomodule.c"
      case 64: // $bb67
        var $176=$res66; //@line 451 "_iomodule.c"
        var $177=_PyInt_AsLong($176); //@line 451 "_iomodule.c"
        $fileno=$177; //@line 451 "_iomodule.c"
        var $178=$res66; //@line 452 "_iomodule.c"
        var $179=$178; //@line 452 "_iomodule.c"
        var $180=HEAP[$179]; //@line 452 "_iomodule.c"
        var $181=($180) - 1; //@line 452 "_iomodule.c"
        var $182=$res66; //@line 452 "_iomodule.c"
        var $183=$182; //@line 452 "_iomodule.c"
        HEAP[$183]=$181; //@line 452 "_iomodule.c"
        var $184=$res66; //@line 452 "_iomodule.c"
        var $185=$184; //@line 452 "_iomodule.c"
        var $186=HEAP[$185]; //@line 452 "_iomodule.c"
        var $187=($186)==0; //@line 452 "_iomodule.c"
        if ($187) { __label__ = 65; break; } else { __label__ = 66; break; } //@line 452 "_iomodule.c"
      case 65: // $bb68
        var $188=$res66; //@line 452 "_iomodule.c"
        var $189=$188+4; //@line 452 "_iomodule.c"
        var $190=HEAP[$189]; //@line 452 "_iomodule.c"
        var $191=$190+24; //@line 452 "_iomodule.c"
        var $192=HEAP[$191]; //@line 452 "_iomodule.c"
        var $193=$res66; //@line 452 "_iomodule.c"
        FUNCTION_TABLE[$192]($193); //@line 452 "_iomodule.c"
        __label__ = 66; break; //@line 452 "_iomodule.c"
      case 66: // $bb69
        var $194=$fileno; //@line 453 "_iomodule.c"
        var $195=($194)==-1; //@line 453 "_iomodule.c"
        if ($195) { __label__ = 67; break; } else { __label__ = 68; break; } //@line 453 "_iomodule.c"
      case 67: // $bb70
        var $196=_PyErr_Occurred(); //@line 453 "_iomodule.c"
        var $197=($196)!=0; //@line 453 "_iomodule.c"
        if ($197) { __label__ = 107; break; } else { __label__ = 68; break; } //@line 453 "_iomodule.c"
      case 68: // $bb71
        var $198=$fileno; //@line 456 "_iomodule.c"
        var $199=___01fstat64_($198, $st); //@line 456 "_iomodule.c"
        var $200=($199) >= 0; //@line 456 "_iomodule.c"
        if ($200) { __label__ = 69; break; } else { __label__ = 71; break; } //@line 456 "_iomodule.c"
      case 69: // $bb72
        var $201=$st+52; //@line 456 "_iomodule.c"
        var $202=HEAP[$201]; //@line 456 "_iomodule.c"
        var $203=($202) > 1; //@line 456 "_iomodule.c"
        if ($203) { __label__ = 70; break; } else { __label__ = 71; break; } //@line 456 "_iomodule.c"
      case 70: // $bb73
        var $204=$st+52; //@line 457 "_iomodule.c"
        var $205=HEAP[$204]; //@line 457 "_iomodule.c"
        HEAP[$buffering]=$205; //@line 457 "_iomodule.c"
        __lastLabel__ = 70; __label__ = 72; break; //@line 457 "_iomodule.c"
      case 71: // $bb74thread_pre_split
        var $_pr4=HEAP[$buffering];
        __lastLabel__ = 71; __label__ = 72; break;
      case 72: // $bb74
        var $206=__lastLabel__ == 71 ? $_pr4 : ($205);
        var $207=($206) < 0; //@line 461 "_iomodule.c"
        if ($207) { __label__ = 73; break; } else { __label__ = 74; break; } //@line 461 "_iomodule.c"
      case 73: // $bb75
        var $208=HEAP[_PyExc_ValueError]; //@line 462 "_iomodule.c"
        _PyErr_SetString($208, __str26259); //@line 462 "_iomodule.c"
        __label__ = 107; break; //@line 462 "_iomodule.c"
      case 74: // $bb76thread_pre_split
        var $_pr7=HEAP[$buffering];
        __lastLabel__ = 74; __label__ = 75; break;
      case 75: // $bb76
        var $209=__lastLabel__ == 74 ? $_pr7 : ($_pr2_pr);
        var $210=($209)==0; //@line 468 "_iomodule.c"
        if ($210) { __label__ = 76; break; } else { __label__ = 81; break; } //@line 468 "_iomodule.c"
      case 76: // $bb77
        var $211=$binary; //@line 469 "_iomodule.c"
        var $212=($211)==0; //@line 469 "_iomodule.c"
        if ($212) { __label__ = 77; break; } else { __label__ = 78; break; } //@line 469 "_iomodule.c"
      case 77: // $bb78
        var $213=HEAP[_PyExc_ValueError]; //@line 470 "_iomodule.c"
        _PyErr_SetString($213, __str27260); //@line 470 "_iomodule.c"
        __label__ = 107; break; //@line 470 "_iomodule.c"
      case 78: // $bb79
        var $214=$modeobj; //@line 475 "_iomodule.c"
        var $215=$214; //@line 475 "_iomodule.c"
        var $216=HEAP[$215]; //@line 475 "_iomodule.c"
        var $217=($216) - 1; //@line 475 "_iomodule.c"
        var $218=$modeobj; //@line 475 "_iomodule.c"
        var $219=$218; //@line 475 "_iomodule.c"
        HEAP[$219]=$217; //@line 475 "_iomodule.c"
        var $220=$modeobj; //@line 475 "_iomodule.c"
        var $221=$220; //@line 475 "_iomodule.c"
        var $222=HEAP[$221]; //@line 475 "_iomodule.c"
        var $223=($222)==0; //@line 475 "_iomodule.c"
        if ($223) { __label__ = 79; break; } else { __label__ = 80; break; } //@line 475 "_iomodule.c"
      case 79: // $bb80
        var $224=$modeobj; //@line 475 "_iomodule.c"
        var $225=$224+4; //@line 475 "_iomodule.c"
        var $226=HEAP[$225]; //@line 475 "_iomodule.c"
        var $227=$226+24; //@line 475 "_iomodule.c"
        var $228=HEAP[$227]; //@line 475 "_iomodule.c"
        var $229=$modeobj; //@line 475 "_iomodule.c"
        FUNCTION_TABLE[$228]($229); //@line 475 "_iomodule.c"
        __label__ = 80; break; //@line 475 "_iomodule.c"
      case 80: // $bb81
        var $230=$raw; //@line 476 "_iomodule.c"
        $0=$230; //@line 476 "_iomodule.c"
        __label__ = 120; break; //@line 476 "_iomodule.c"
      case 81: // $bb82
        var $231=$updating; //@line 483 "_iomodule.c"
        var $232=($231)!=0; //@line 483 "_iomodule.c"
        if ($232) { __label__ = 82; break; } else { __label__ = 83; break; } //@line 483 "_iomodule.c"
      case 82: // $bb83
        $Buffered_class=_PyBufferedRandom_Type; //@line 484 "_iomodule.c"
        __label__ = 89; break; //@line 484 "_iomodule.c"
      case 83: // $bb84
        var $233=$writing; //@line 485 "_iomodule.c"
        var $234=($233)!=0; //@line 485 "_iomodule.c"
        if ($234) { __label__ = 85; break; } else { __label__ = 84; break; } //@line 485 "_iomodule.c"
      case 84: // $bb85
        var $235=$appending; //@line 485 "_iomodule.c"
        var $236=($235)!=0; //@line 485 "_iomodule.c"
        if ($236) { __label__ = 85; break; } else { __label__ = 86; break; } //@line 485 "_iomodule.c"
      case 85: // $bb86
        $Buffered_class=_PyBufferedWriter_Type; //@line 486 "_iomodule.c"
        __label__ = 89; break; //@line 486 "_iomodule.c"
      case 86: // $bb87
        var $237=$reading; //@line 487 "_iomodule.c"
        var $238=($237)!=0; //@line 487 "_iomodule.c"
        if ($238) { __label__ = 87; break; } else { __label__ = 88; break; } //@line 487 "_iomodule.c"
      case 87: // $bb88
        $Buffered_class=_PyBufferedReader_Type; //@line 488 "_iomodule.c"
        __label__ = 89; break; //@line 488 "_iomodule.c"
      case 88: // $bb89
        var $239=HEAP[$mode]; //@line 490 "_iomodule.c"
        var $240=HEAP[_PyExc_ValueError]; //@line 490 "_iomodule.c"
        var $241=_PyErr_Format($240, __str28261, allocate([$239,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 490 "_iomodule.c"
        __label__ = 107; break; //@line 490 "_iomodule.c"
      case 89: // $bb90
        var $242=HEAP[$buffering]; //@line 495 "_iomodule.c"
        var $243=$Buffered_class; //@line 495 "_iomodule.c"
        var $244=$raw; //@line 495 "_iomodule.c"
        var $245=__PyObject_CallFunction_SizeT($243, __str29262, allocate([$244,0,0,0,$242,0,0,0], ["%struct.PyObject*",0,0,0,"i32",0,0,0], ALLOC_STACK)); //@line 495 "_iomodule.c"
        $buffer=$245; //@line 495 "_iomodule.c"
        var $246=$raw; //@line 497 "_iomodule.c"
        var $247=($246)!=0; //@line 497 "_iomodule.c"
        if ($247) { __lastLabel__ = 89; __label__ = 90; break; } else { __lastLabel__ = 89; __label__ = 93; break; } //@line 497 "_iomodule.c"
      case 90: // $bb91
        var $248=$raw; //@line 497 "_iomodule.c"
        $_py_tmp=$248; //@line 497 "_iomodule.c"
        $raw=0; //@line 497 "_iomodule.c"
        var $249=$_py_tmp; //@line 497 "_iomodule.c"
        var $250=$249; //@line 497 "_iomodule.c"
        var $251=HEAP[$250]; //@line 497 "_iomodule.c"
        var $252=($251) - 1; //@line 497 "_iomodule.c"
        var $253=$_py_tmp; //@line 497 "_iomodule.c"
        var $254=$253; //@line 497 "_iomodule.c"
        HEAP[$254]=$252; //@line 497 "_iomodule.c"
        var $255=$_py_tmp; //@line 497 "_iomodule.c"
        var $256=$255; //@line 497 "_iomodule.c"
        var $257=HEAP[$256]; //@line 497 "_iomodule.c"
        var $258=($257)==0; //@line 497 "_iomodule.c"
        if ($258) { __label__ = 91; break; } else { __label__ = 92; break; } //@line 497 "_iomodule.c"
      case 91: // $bb92
        var $259=$_py_tmp; //@line 497 "_iomodule.c"
        var $260=$259+4; //@line 497 "_iomodule.c"
        var $261=HEAP[$260]; //@line 497 "_iomodule.c"
        var $262=$261+24; //@line 497 "_iomodule.c"
        var $263=HEAP[$262]; //@line 497 "_iomodule.c"
        var $264=$_py_tmp; //@line 497 "_iomodule.c"
        FUNCTION_TABLE[$263]($264); //@line 497 "_iomodule.c"
        __label__ = 92; break; //@line 497 "_iomodule.c"
      case 92: // $bb93thread_pre_split
        var $_pr5=$buffer;
        __lastLabel__ = 92; __label__ = 93; break;
      case 93: // $bb93
        var $265=__lastLabel__ == 92 ? $_pr5 : ($245);
        var $266=($265)==0; //@line 498 "_iomodule.c"
        if ($266) { __label__ = 107; break; } else { __label__ = 94; break; } //@line 498 "_iomodule.c"
      case 94: // $bb94
        var $267=$binary; //@line 503 "_iomodule.c"
        var $268=($267)!=0; //@line 503 "_iomodule.c"
        if ($268) { __label__ = 95; break; } else { __label__ = 98; break; } //@line 503 "_iomodule.c"
      case 95: // $bb95
        var $269=$modeobj; //@line 504 "_iomodule.c"
        var $270=$269; //@line 504 "_iomodule.c"
        var $271=HEAP[$270]; //@line 504 "_iomodule.c"
        var $272=($271) - 1; //@line 504 "_iomodule.c"
        var $273=$modeobj; //@line 504 "_iomodule.c"
        var $274=$273; //@line 504 "_iomodule.c"
        HEAP[$274]=$272; //@line 504 "_iomodule.c"
        var $275=$modeobj; //@line 504 "_iomodule.c"
        var $276=$275; //@line 504 "_iomodule.c"
        var $277=HEAP[$276]; //@line 504 "_iomodule.c"
        var $278=($277)==0; //@line 504 "_iomodule.c"
        if ($278) { __label__ = 96; break; } else { __label__ = 97; break; } //@line 504 "_iomodule.c"
      case 96: // $bb96
        var $279=$modeobj; //@line 504 "_iomodule.c"
        var $280=$279+4; //@line 504 "_iomodule.c"
        var $281=HEAP[$280]; //@line 504 "_iomodule.c"
        var $282=$281+24; //@line 504 "_iomodule.c"
        var $283=HEAP[$282]; //@line 504 "_iomodule.c"
        var $284=$modeobj; //@line 504 "_iomodule.c"
        FUNCTION_TABLE[$283]($284); //@line 504 "_iomodule.c"
        __label__ = 97; break; //@line 504 "_iomodule.c"
      case 97: // $bb97
        var $285=$buffer; //@line 505 "_iomodule.c"
        $0=$285; //@line 505 "_iomodule.c"
        __label__ = 120; break; //@line 505 "_iomodule.c"
      case 98: // $bb98
        var $286=HEAP[$newline]; //@line 509 "_iomodule.c"
        var $287=HEAP[$errors]; //@line 509 "_iomodule.c"
        var $288=HEAP[$encoding]; //@line 509 "_iomodule.c"
        var $289=$buffer; //@line 509 "_iomodule.c"
        var $290=$line_buffering; //@line 509 "_iomodule.c"
        var $291=__PyObject_CallFunction_SizeT(_PyTextIOWrapper_Type, __str30263, allocate([$289,0,0,0,$288,0,0,0,$287,0,0,0,$286,0,0,0,$290,0,0,0], ["%struct.PyObject*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0], ALLOC_STACK)); //@line 509 "_iomodule.c"
        $wrapper=$291; //@line 509 "_iomodule.c"
        var $292=$buffer; //@line 514 "_iomodule.c"
        var $293=($292)!=0; //@line 514 "_iomodule.c"
        if ($293) { __lastLabel__ = 98; __label__ = 99; break; } else { __lastLabel__ = 98; __label__ = 102; break; } //@line 514 "_iomodule.c"
      case 99: // $bb99
        var $294=$buffer; //@line 514 "_iomodule.c"
        $_py_tmp100=$294; //@line 514 "_iomodule.c"
        $buffer=0; //@line 514 "_iomodule.c"
        var $295=$_py_tmp100; //@line 514 "_iomodule.c"
        var $296=$295; //@line 514 "_iomodule.c"
        var $297=HEAP[$296]; //@line 514 "_iomodule.c"
        var $298=($297) - 1; //@line 514 "_iomodule.c"
        var $299=$_py_tmp100; //@line 514 "_iomodule.c"
        var $300=$299; //@line 514 "_iomodule.c"
        HEAP[$300]=$298; //@line 514 "_iomodule.c"
        var $301=$_py_tmp100; //@line 514 "_iomodule.c"
        var $302=$301; //@line 514 "_iomodule.c"
        var $303=HEAP[$302]; //@line 514 "_iomodule.c"
        var $304=($303)==0; //@line 514 "_iomodule.c"
        if ($304) { __label__ = 100; break; } else { __label__ = 101; break; } //@line 514 "_iomodule.c"
      case 100: // $bb101
        var $305=$_py_tmp100; //@line 514 "_iomodule.c"
        var $306=$305+4; //@line 514 "_iomodule.c"
        var $307=HEAP[$306]; //@line 514 "_iomodule.c"
        var $308=$307+24; //@line 514 "_iomodule.c"
        var $309=HEAP[$308]; //@line 514 "_iomodule.c"
        var $310=$_py_tmp100; //@line 514 "_iomodule.c"
        FUNCTION_TABLE[$309]($310); //@line 514 "_iomodule.c"
        __label__ = 101; break; //@line 514 "_iomodule.c"
      case 101: // $bb102thread_pre_split
        var $_pr6=$wrapper;
        __lastLabel__ = 101; __label__ = 102; break;
      case 102: // $bb102
        var $311=__lastLabel__ == 101 ? $_pr6 : ($291);
        var $312=($311)==0; //@line 515 "_iomodule.c"
        if ($312) { __label__ = 107; break; } else { __label__ = 103; break; } //@line 515 "_iomodule.c"
      case 103: // $bb103
        var $313=$wrapper; //@line 518 "_iomodule.c"
        var $314=$modeobj; //@line 518 "_iomodule.c"
        var $315=_PyObject_SetAttrString($313, __str7240, $314); //@line 518 "_iomodule.c"
        var $316=($315) < 0; //@line 518 "_iomodule.c"
        if ($316) { __label__ = 107; break; } else { __label__ = 104; break; } //@line 518 "_iomodule.c"
      case 104: // $bb104
        var $317=$modeobj; //@line 520 "_iomodule.c"
        var $318=$317; //@line 520 "_iomodule.c"
        var $319=HEAP[$318]; //@line 520 "_iomodule.c"
        var $320=($319) - 1; //@line 520 "_iomodule.c"
        var $321=$modeobj; //@line 520 "_iomodule.c"
        var $322=$321; //@line 520 "_iomodule.c"
        HEAP[$322]=$320; //@line 520 "_iomodule.c"
        var $323=$modeobj; //@line 520 "_iomodule.c"
        var $324=$323; //@line 520 "_iomodule.c"
        var $325=HEAP[$324]; //@line 520 "_iomodule.c"
        var $326=($325)==0; //@line 520 "_iomodule.c"
        if ($326) { __label__ = 105; break; } else { __label__ = 106; break; } //@line 520 "_iomodule.c"
      case 105: // $bb105
        var $327=$modeobj; //@line 520 "_iomodule.c"
        var $328=$327+4; //@line 520 "_iomodule.c"
        var $329=HEAP[$328]; //@line 520 "_iomodule.c"
        var $330=$329+24; //@line 520 "_iomodule.c"
        var $331=HEAP[$330]; //@line 520 "_iomodule.c"
        var $332=$modeobj; //@line 520 "_iomodule.c"
        FUNCTION_TABLE[$331]($332); //@line 520 "_iomodule.c"
        __label__ = 106; break; //@line 520 "_iomodule.c"
      case 106: // $bb106
        var $333=$wrapper; //@line 521 "_iomodule.c"
        $0=$333; //@line 521 "_iomodule.c"
        __label__ = 120; break; //@line 521 "_iomodule.c"
      case 107: // $error
        var $334=$raw; //@line 524 "_iomodule.c"
        var $335=($334)!=0; //@line 524 "_iomodule.c"
        if ($335) { __label__ = 108; break; } else { __label__ = 110; break; } //@line 524 "_iomodule.c"
      case 108: // $bb107
        var $336=$raw; //@line 524 "_iomodule.c"
        var $337=$336; //@line 524 "_iomodule.c"
        var $338=HEAP[$337]; //@line 524 "_iomodule.c"
        var $339=($338) - 1; //@line 524 "_iomodule.c"
        var $340=$raw; //@line 524 "_iomodule.c"
        var $341=$340; //@line 524 "_iomodule.c"
        HEAP[$341]=$339; //@line 524 "_iomodule.c"
        var $342=$raw; //@line 524 "_iomodule.c"
        var $343=$342; //@line 524 "_iomodule.c"
        var $344=HEAP[$343]; //@line 524 "_iomodule.c"
        var $345=($344)==0; //@line 524 "_iomodule.c"
        if ($345) { __label__ = 109; break; } else { __label__ = 110; break; } //@line 524 "_iomodule.c"
      case 109: // $bb108
        var $346=$raw; //@line 524 "_iomodule.c"
        var $347=$346+4; //@line 524 "_iomodule.c"
        var $348=HEAP[$347]; //@line 524 "_iomodule.c"
        var $349=$348+24; //@line 524 "_iomodule.c"
        var $350=HEAP[$349]; //@line 524 "_iomodule.c"
        var $351=$raw; //@line 524 "_iomodule.c"
        FUNCTION_TABLE[$350]($351); //@line 524 "_iomodule.c"
        __label__ = 110; break; //@line 524 "_iomodule.c"
      case 110: // $bb109
        var $352=$modeobj; //@line 525 "_iomodule.c"
        var $353=($352)!=0; //@line 525 "_iomodule.c"
        if ($353) { __label__ = 111; break; } else { __label__ = 113; break; } //@line 525 "_iomodule.c"
      case 111: // $bb110
        var $354=$modeobj; //@line 525 "_iomodule.c"
        var $355=$354; //@line 525 "_iomodule.c"
        var $356=HEAP[$355]; //@line 525 "_iomodule.c"
        var $357=($356) - 1; //@line 525 "_iomodule.c"
        var $358=$modeobj; //@line 525 "_iomodule.c"
        var $359=$358; //@line 525 "_iomodule.c"
        HEAP[$359]=$357; //@line 525 "_iomodule.c"
        var $360=$modeobj; //@line 525 "_iomodule.c"
        var $361=$360; //@line 525 "_iomodule.c"
        var $362=HEAP[$361]; //@line 525 "_iomodule.c"
        var $363=($362)==0; //@line 525 "_iomodule.c"
        if ($363) { __label__ = 112; break; } else { __label__ = 113; break; } //@line 525 "_iomodule.c"
      case 112: // $bb111
        var $364=$modeobj; //@line 525 "_iomodule.c"
        var $365=$364+4; //@line 525 "_iomodule.c"
        var $366=HEAP[$365]; //@line 525 "_iomodule.c"
        var $367=$366+24; //@line 525 "_iomodule.c"
        var $368=HEAP[$367]; //@line 525 "_iomodule.c"
        var $369=$modeobj; //@line 525 "_iomodule.c"
        FUNCTION_TABLE[$368]($369); //@line 525 "_iomodule.c"
        __label__ = 113; break; //@line 525 "_iomodule.c"
      case 113: // $bb112
        var $370=$buffer; //@line 526 "_iomodule.c"
        var $371=($370)!=0; //@line 526 "_iomodule.c"
        if ($371) { __label__ = 114; break; } else { __label__ = 116; break; } //@line 526 "_iomodule.c"
      case 114: // $bb113
        var $372=$buffer; //@line 526 "_iomodule.c"
        var $373=$372; //@line 526 "_iomodule.c"
        var $374=HEAP[$373]; //@line 526 "_iomodule.c"
        var $375=($374) - 1; //@line 526 "_iomodule.c"
        var $376=$buffer; //@line 526 "_iomodule.c"
        var $377=$376; //@line 526 "_iomodule.c"
        HEAP[$377]=$375; //@line 526 "_iomodule.c"
        var $378=$buffer; //@line 526 "_iomodule.c"
        var $379=$378; //@line 526 "_iomodule.c"
        var $380=HEAP[$379]; //@line 526 "_iomodule.c"
        var $381=($380)==0; //@line 526 "_iomodule.c"
        if ($381) { __label__ = 115; break; } else { __label__ = 116; break; } //@line 526 "_iomodule.c"
      case 115: // $bb114
        var $382=$buffer; //@line 526 "_iomodule.c"
        var $383=$382+4; //@line 526 "_iomodule.c"
        var $384=HEAP[$383]; //@line 526 "_iomodule.c"
        var $385=$384+24; //@line 526 "_iomodule.c"
        var $386=HEAP[$385]; //@line 526 "_iomodule.c"
        var $387=$buffer; //@line 526 "_iomodule.c"
        FUNCTION_TABLE[$386]($387); //@line 526 "_iomodule.c"
        __label__ = 116; break; //@line 526 "_iomodule.c"
      case 116: // $bb115
        var $388=$wrapper; //@line 527 "_iomodule.c"
        var $389=($388)!=0; //@line 527 "_iomodule.c"
        if ($389) { __label__ = 117; break; } else { __label__ = 119; break; } //@line 527 "_iomodule.c"
      case 117: // $bb116
        var $390=$wrapper; //@line 527 "_iomodule.c"
        var $391=$390; //@line 527 "_iomodule.c"
        var $392=HEAP[$391]; //@line 527 "_iomodule.c"
        var $393=($392) - 1; //@line 527 "_iomodule.c"
        var $394=$wrapper; //@line 527 "_iomodule.c"
        var $395=$394; //@line 527 "_iomodule.c"
        HEAP[$395]=$393; //@line 527 "_iomodule.c"
        var $396=$wrapper; //@line 527 "_iomodule.c"
        var $397=$396; //@line 527 "_iomodule.c"
        var $398=HEAP[$397]; //@line 527 "_iomodule.c"
        var $399=($398)==0; //@line 527 "_iomodule.c"
        if ($399) { __label__ = 118; break; } else { __label__ = 119; break; } //@line 527 "_iomodule.c"
      case 118: // $bb117
        var $400=$wrapper; //@line 527 "_iomodule.c"
        var $401=$400+4; //@line 527 "_iomodule.c"
        var $402=HEAP[$401]; //@line 527 "_iomodule.c"
        var $403=$402+24; //@line 527 "_iomodule.c"
        var $404=HEAP[$403]; //@line 527 "_iomodule.c"
        var $405=$wrapper; //@line 527 "_iomodule.c"
        FUNCTION_TABLE[$404]($405); //@line 527 "_iomodule.c"
        __label__ = 119; break; //@line 527 "_iomodule.c"
      case 119: // $bb118
        $0=0; //@line 528 "_iomodule.c"
        __label__ = 120; break; //@line 528 "_iomodule.c"
      case 120: // $bb119
        var $406=$0; //@line 311 "_iomodule.c"
        $retval=$406; //@line 311 "_iomodule.c"
        var $retval120=$retval; //@line 311 "_iomodule.c"
        STACKTOP = __stackBase__;
        return $retval120; //@line 311 "_iomodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _PyNumber_AsOff_t($item, $err) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $item_addr;
        var $err_addr;
        var $retval;
        var $0;
        var $result;
        var $runerr;
        var $value;
        $item_addr=$item;
        $err_addr=$err;
        var $1=$item_addr; //@line 540 "_iomodule.c"
        var $2=_PyNumber_Index($1); //@line 540 "_iomodule.c"
        $value=$2; //@line 540 "_iomodule.c"
        var $3=$value; //@line 541 "_iomodule.c"
        var $4=($3)==0; //@line 541 "_iomodule.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 541 "_iomodule.c"
      case 1: // $bb
        $0=-1; //@line 542 "_iomodule.c"
        __label__ = 17; break; //@line 542 "_iomodule.c"
      case 2: // $bb1
        var $5=$value; //@line 544 "_iomodule.c"
        var $6=$5+4; //@line 544 "_iomodule.c"
        var $7=HEAP[$6]; //@line 544 "_iomodule.c"
        var $8=$7+84; //@line 544 "_iomodule.c"
        var $9=HEAP[$8]; //@line 544 "_iomodule.c"
        var $10=($9) & 8388608; //@line 544 "_iomodule.c"
        var $11=($10)!=0; //@line 544 "_iomodule.c"
        var $12=$value; //@line 546 "_iomodule.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 544 "_iomodule.c"
      case 3: // $bb2
        var $13=$12; //@line 546 "_iomodule.c"
        var $14=$13+8; //@line 546 "_iomodule.c"
        var $15=HEAP[$14]; //@line 546 "_iomodule.c"
        var $16=($15); //@line 546 "_iomodule.c"
        $result=$16; //@line 546 "_iomodule.c"
        __label__ = 14; break; //@line 546 "_iomodule.c"
      case 4: // $bb3
        var $17=_PyLong_AsLongLong($12); //@line 551 "_iomodule.c"
        $result=$17; //@line 551 "_iomodule.c"
        var $18=$result; //@line 552 "_iomodule.c"
        var $19=($18)!=-1; //@line 552 "_iomodule.c"
        if ($19) { __label__ = 14; break; } else { __label__ = 5; break; } //@line 552 "_iomodule.c"
      case 5: // $bb4
        var $20=_PyErr_Occurred(); //@line 552 "_iomodule.c"
        $runerr=$20; //@line 552 "_iomodule.c"
        var $21=$runerr; //@line 552 "_iomodule.c"
        var $22=($21)==0; //@line 552 "_iomodule.c"
        if ($22) { __label__ = 14; break; } else { __label__ = 6; break; } //@line 552 "_iomodule.c"
      case 6: // $bb5
        var $23=HEAP[_PyExc_OverflowError]; //@line 556 "_iomodule.c"
        var $24=$runerr; //@line 556 "_iomodule.c"
        var $25=_PyErr_GivenExceptionMatches($24, $23); //@line 556 "_iomodule.c"
        var $26=($25)==0; //@line 556 "_iomodule.c"
        if ($26) { __label__ = 14; break; } else { __label__ = 7; break; } //@line 556 "_iomodule.c"
      case 7: // $bb6
        _PyErr_Clear(); //@line 559 "_iomodule.c"
        var $27=$err_addr; //@line 563 "_iomodule.c"
        var $28=($27)==0; //@line 563 "_iomodule.c"
        if ($28) { __label__ = 8; break; } else { __label__ = 13; break; } //@line 563 "_iomodule.c"
      case 8: // $bb7
        var $29=$value; //@line 564 "_iomodule.c"
        var $30=$29+4; //@line 564 "_iomodule.c"
        var $31=HEAP[$30]; //@line 564 "_iomodule.c"
        var $32=$31+84; //@line 564 "_iomodule.c"
        var $33=HEAP[$32]; //@line 564 "_iomodule.c"
        var $34=($33) & 16777216; //@line 564 "_iomodule.c"
        var $35=($34)==0; //@line 564 "_iomodule.c"
        if ($35) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 564 "_iomodule.c"
      case 9: // $bb8
        ___assert_fail(__str31264, __str1233, 564, ___PRETTY_FUNCTION___8811); //@line 564 "_iomodule.c"
        throw "Reached an unreachable!" //@line 564 "_iomodule.c"
      case 10: // $bb9
        var $36=$value; //@line 568 "_iomodule.c"
        var $37=__PyLong_Sign($36); //@line 568 "_iomodule.c"
        var $38=($37) < 0; //@line 568 "_iomodule.c"
        if ($38) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 568 "_iomodule.c"
      case 11: // $bb10
        $result=-9223372036854776000; //@line 569 "_iomodule.c"
        __label__ = 14; break; //@line 569 "_iomodule.c"
      case 12: // $bb11
        $result=9223372036854776000; //@line 571 "_iomodule.c"
        __label__ = 14; break; //@line 571 "_iomodule.c"
      case 13: // $bb13
        var $39=$item_addr; //@line 575 "_iomodule.c"
        var $40=$39+4; //@line 575 "_iomodule.c"
        var $41=HEAP[$40]; //@line 575 "_iomodule.c"
        var $42=$41+12; //@line 575 "_iomodule.c"
        var $43=HEAP[$42]; //@line 575 "_iomodule.c"
        var $44=$err_addr; //@line 575 "_iomodule.c"
        var $45=_PyErr_Format($44, __str32265, allocate([$43,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 575 "_iomodule.c"
        __label__ = 14; break; //@line 580 "_iomodule.c"
      case 14: // $finish
        var $46=$value; //@line 581 "_iomodule.c"
        var $47=$46; //@line 581 "_iomodule.c"
        var $48=HEAP[$47]; //@line 581 "_iomodule.c"
        var $49=($48) - 1; //@line 581 "_iomodule.c"
        var $50=$value; //@line 581 "_iomodule.c"
        var $51=$50; //@line 581 "_iomodule.c"
        HEAP[$51]=$49; //@line 581 "_iomodule.c"
        var $52=$value; //@line 581 "_iomodule.c"
        var $53=$52; //@line 581 "_iomodule.c"
        var $54=HEAP[$53]; //@line 581 "_iomodule.c"
        var $55=($54)==0; //@line 581 "_iomodule.c"
        if ($55) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 581 "_iomodule.c"
      case 15: // $bb14
        var $56=$value; //@line 581 "_iomodule.c"
        var $57=$56+4; //@line 581 "_iomodule.c"
        var $58=HEAP[$57]; //@line 581 "_iomodule.c"
        var $59=$58+24; //@line 581 "_iomodule.c"
        var $60=HEAP[$59]; //@line 581 "_iomodule.c"
        var $61=$value; //@line 581 "_iomodule.c"
        FUNCTION_TABLE[$60]($61); //@line 581 "_iomodule.c"
        __label__ = 16; break; //@line 581 "_iomodule.c"
      case 16: // $bb15
        var $62=$result; //@line 582 "_iomodule.c"
        $0=$62; //@line 582 "_iomodule.c"
        __label__ = 17; break; //@line 582 "_iomodule.c"
      case 17: // $bb16
        var $63=$0; //@line 542 "_iomodule.c"
        $retval=$63; //@line 542 "_iomodule.c"
        var $retval17=$retval; //@line 542 "_iomodule.c"
        ;
        return $retval17; //@line 542 "_iomodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __PyIO_ConvertSsize_t($obj, $result) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $obj_addr;
        var $result_addr;
        var $retval;
        var $0;
        var $limit;
        $obj_addr=$obj;
        $result_addr=$result;
        var $1=$obj_addr; //@line 590 "_iomodule.c"
        var $2=($1)==(__Py_NoneStruct); //@line 590 "_iomodule.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 590 "_iomodule.c"
      case 1: // $bb
        $limit=-1; //@line 591 "_iomodule.c"
        __label__ = 7; break; //@line 591 "_iomodule.c"
      case 2: // $bb1
        var $3=$obj_addr; //@line 593 "_iomodule.c"
        var $4=_PyNumber_Check($3); //@line 593 "_iomodule.c"
        var $5=($4)!=0; //@line 593 "_iomodule.c"
        if ($5) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 593 "_iomodule.c"
      case 3: // $bb2
        var $6=HEAP[_PyExc_OverflowError]; //@line 594 "_iomodule.c"
        var $7=$obj_addr; //@line 594 "_iomodule.c"
        var $8=_PyNumber_AsSsize_t($7, $6); //@line 594 "_iomodule.c"
        $limit=$8; //@line 594 "_iomodule.c"
        var $9=$limit; //@line 595 "_iomodule.c"
        var $10=($9)==-1; //@line 595 "_iomodule.c"
        if ($10) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 595 "_iomodule.c"
      case 4: // $bb3
        var $11=_PyErr_Occurred(); //@line 595 "_iomodule.c"
        var $12=($11)!=0; //@line 595 "_iomodule.c"
        if ($12) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 595 "_iomodule.c"
      case 5: // $bb4
        $0=0; //@line 596 "_iomodule.c"
        __label__ = 8; break; //@line 596 "_iomodule.c"
      case 6: // $bb6
        var $13=$obj_addr; //@line 599 "_iomodule.c"
        var $14=$13+4; //@line 599 "_iomodule.c"
        var $15=HEAP[$14]; //@line 599 "_iomodule.c"
        var $16=$15+12; //@line 599 "_iomodule.c"
        var $17=HEAP[$16]; //@line 599 "_iomodule.c"
        var $18=HEAP[_PyExc_TypeError]; //@line 599 "_iomodule.c"
        var $19=_PyErr_Format($18, __str33266, allocate([$17,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 599 "_iomodule.c"
        $0=0; //@line 602 "_iomodule.c"
        __label__ = 8; break; //@line 602 "_iomodule.c"
      case 7: // $bb7
        var $20=$result_addr; //@line 604 "_iomodule.c"
        var $21=$20; //@line 604 "_iomodule.c"
        var $22=$limit; //@line 604 "_iomodule.c"
        HEAP[$21]=$22; //@line 604 "_iomodule.c"
        $0=1; //@line 605 "_iomodule.c"
        __label__ = 8; break; //@line 605 "_iomodule.c"
      case 8: // $bb8
        var $23=$0; //@line 596 "_iomodule.c"
        $retval=$23; //@line 596 "_iomodule.c"
        var $retval9=$retval; //@line 596 "_iomodule.c"
        ;
        return $retval9; //@line 596 "_iomodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _init_io() {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $m;
        var $_py_tmp;
        var $_py_tmp105;
        var $0=_Py_InitModule4(__str35269, _module_methods, _module_doc, 0, 1013); //@line 626 "_iomodule.c"
        $m=$0; //@line 626 "_iomodule.c"
        var $1=$m; //@line 627 "_iomodule.c"
        var $2=($1)==0; //@line 627 "_iomodule.c"
        if ($2) { __label__ = 95; break; } else { __label__ = 1; break; } //@line 627 "_iomodule.c"
      case 1: // $bb
        var $3=_PyImport_ImportModule(__str36270); //@line 631 "_iomodule.c"
        HEAP[__PyIO_os_module]=$3; //@line 631 "_iomodule.c"
        var $4=HEAP[__PyIO_os_module]; //@line 632 "_iomodule.c"
        var $5=($4)==0; //@line 632 "_iomodule.c"
        if ($5) { __label__ = 90; break; } else { __label__ = 2; break; } //@line 632 "_iomodule.c"
      case 2: // $bb1
        var $6=$m; //@line 645 "_iomodule.c"
        var $7=_PyModule_AddIntConstant($6, __str37271, 8192); //@line 645 "_iomodule.c"
        var $8=($7) < 0; //@line 645 "_iomodule.c"
        if ($8) { __label__ = 87; break; } else { __label__ = 3; break; } //@line 645 "_iomodule.c"
      case 3: // $bb2
        var $9=HEAP[_PyExc_IOError]; //@line 649 "_iomodule.c"
        var $10=HEAP[_PyExc_ValueError]; //@line 649 "_iomodule.c"
        var $11=__PyObject_CallFunction_SizeT(_PyType_Type, __str38272, allocate([__str39273,0,0,0,$10,0,0,0,$9,0,0,0], ["i8*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 649 "_iomodule.c"
        HEAP[__PyIO_unsupported_operation]=$11; //@line 649 "_iomodule.c"
        var $12=HEAP[__PyIO_unsupported_operation]; //@line 652 "_iomodule.c"
        var $13=($12)==0; //@line 652 "_iomodule.c"
        if ($13) { __label__ = 87; break; } else { __label__ = 4; break; } //@line 652 "_iomodule.c"
      case 4: // $bb3
        var $14=HEAP[__PyIO_unsupported_operation]; //@line 654 "_iomodule.c"
        var $15=$14; //@line 654 "_iomodule.c"
        var $16=HEAP[$15]; //@line 654 "_iomodule.c"
        var $17=($16) + 1; //@line 654 "_iomodule.c"
        var $18=$14; //@line 654 "_iomodule.c"
        HEAP[$18]=$17; //@line 654 "_iomodule.c"
        var $19=HEAP[__PyIO_unsupported_operation]; //@line 655 "_iomodule.c"
        var $20=$m; //@line 655 "_iomodule.c"
        var $21=_PyModule_AddObject($20, __str39273, $19); //@line 655 "_iomodule.c"
        var $22=($21) < 0; //@line 655 "_iomodule.c"
        if ($22) { __label__ = 87; break; } else { __label__ = 5; break; } //@line 655 "_iomodule.c"
      case 5: // $bb4
        var $23=HEAP[_PyExc_IOError]; //@line 660 "_iomodule.c"
        var $24=$23; //@line 660 "_iomodule.c"
        HEAP[__PyExc_BlockingIOError+128]=$24; //@line 660 "_iomodule.c"
        var $25=_PyType_Ready(__PyExc_BlockingIOError); //@line 661 "_iomodule.c"
        var $26=($25) < 0; //@line 661 "_iomodule.c"
        if ($26) { __label__ = 87; break; } else { __label__ = 6; break; } //@line 661 "_iomodule.c"
      case 6: // $bb5
        var $27=HEAP[__PyExc_BlockingIOError]; //@line 661 "_iomodule.c"
        var $28=($27) + 1; //@line 661 "_iomodule.c"
        HEAP[__PyExc_BlockingIOError]=$28; //@line 661 "_iomodule.c"
        var $29=$m; //@line 661 "_iomodule.c"
        var $30=_PyModule_AddObject($29, __str4236, __PyExc_BlockingIOError); //@line 661 "_iomodule.c"
        var $31=($30) < 0; //@line 661 "_iomodule.c"
        if ($31) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 661 "_iomodule.c"
      case 7: // $bb6
        var $32=HEAP[__PyExc_BlockingIOError]; //@line 661 "_iomodule.c"
        var $33=($32) - 1; //@line 661 "_iomodule.c"
        HEAP[__PyExc_BlockingIOError]=$33; //@line 661 "_iomodule.c"
        var $34=HEAP[__PyExc_BlockingIOError]; //@line 661 "_iomodule.c"
        var $35=($34)==0; //@line 661 "_iomodule.c"
        if ($35) { __label__ = 8; break; } else { __label__ = 87; break; } //@line 661 "_iomodule.c"
      case 8: // $bb7
        var $36=HEAP[__PyExc_BlockingIOError+4]; //@line 661 "_iomodule.c"
        var $37=$36+24; //@line 661 "_iomodule.c"
        var $38=HEAP[$37]; //@line 661 "_iomodule.c"
        FUNCTION_TABLE[$38](__PyExc_BlockingIOError); //@line 661 "_iomodule.c"
        __label__ = 87; break; //@line 661 "_iomodule.c"
      case 9: // $bb9
        var $39=_PyType_Ready(_PyIOBase_Type); //@line 666 "_iomodule.c"
        var $40=($39) < 0; //@line 666 "_iomodule.c"
        if ($40) { __label__ = 87; break; } else { __label__ = 10; break; } //@line 666 "_iomodule.c"
      case 10: // $bb10
        var $41=HEAP[_PyIOBase_Type]; //@line 666 "_iomodule.c"
        var $42=($41) + 1; //@line 666 "_iomodule.c"
        HEAP[_PyIOBase_Type]=$42; //@line 666 "_iomodule.c"
        var $43=$m; //@line 666 "_iomodule.c"
        var $44=_PyModule_AddObject($43, __str40274, _PyIOBase_Type); //@line 666 "_iomodule.c"
        var $45=($44) < 0; //@line 666 "_iomodule.c"
        if ($45) { __label__ = 11; break; } else { __label__ = 13; break; } //@line 666 "_iomodule.c"
      case 11: // $bb11
        var $46=HEAP[_PyIOBase_Type]; //@line 666 "_iomodule.c"
        var $47=($46) - 1; //@line 666 "_iomodule.c"
        HEAP[_PyIOBase_Type]=$47; //@line 666 "_iomodule.c"
        var $48=HEAP[_PyIOBase_Type]; //@line 666 "_iomodule.c"
        var $49=($48)==0; //@line 666 "_iomodule.c"
        if ($49) { __label__ = 12; break; } else { __label__ = 87; break; } //@line 666 "_iomodule.c"
      case 12: // $bb12
        var $50=HEAP[_PyIOBase_Type+4]; //@line 666 "_iomodule.c"
        var $51=$50+24; //@line 666 "_iomodule.c"
        var $52=HEAP[$51]; //@line 666 "_iomodule.c"
        FUNCTION_TABLE[$52](_PyIOBase_Type); //@line 666 "_iomodule.c"
        __label__ = 87; break; //@line 666 "_iomodule.c"
      case 13: // $bb14
        var $53=_PyType_Ready(_PyRawIOBase_Type); //@line 667 "_iomodule.c"
        var $54=($53) < 0; //@line 667 "_iomodule.c"
        if ($54) { __label__ = 87; break; } else { __label__ = 14; break; } //@line 667 "_iomodule.c"
      case 14: // $bb15
        var $55=HEAP[_PyRawIOBase_Type]; //@line 667 "_iomodule.c"
        var $56=($55) + 1; //@line 667 "_iomodule.c"
        HEAP[_PyRawIOBase_Type]=$56; //@line 667 "_iomodule.c"
        var $57=$m; //@line 667 "_iomodule.c"
        var $58=_PyModule_AddObject($57, __str41275, _PyRawIOBase_Type); //@line 667 "_iomodule.c"
        var $59=($58) < 0; //@line 667 "_iomodule.c"
        if ($59) { __label__ = 15; break; } else { __label__ = 17; break; } //@line 667 "_iomodule.c"
      case 15: // $bb16
        var $60=HEAP[_PyRawIOBase_Type]; //@line 667 "_iomodule.c"
        var $61=($60) - 1; //@line 667 "_iomodule.c"
        HEAP[_PyRawIOBase_Type]=$61; //@line 667 "_iomodule.c"
        var $62=HEAP[_PyRawIOBase_Type]; //@line 667 "_iomodule.c"
        var $63=($62)==0; //@line 667 "_iomodule.c"
        if ($63) { __label__ = 16; break; } else { __label__ = 87; break; } //@line 667 "_iomodule.c"
      case 16: // $bb17
        var $64=HEAP[_PyRawIOBase_Type+4]; //@line 667 "_iomodule.c"
        var $65=$64+24; //@line 667 "_iomodule.c"
        var $66=HEAP[$65]; //@line 667 "_iomodule.c"
        FUNCTION_TABLE[$66](_PyRawIOBase_Type); //@line 667 "_iomodule.c"
        __label__ = 87; break; //@line 667 "_iomodule.c"
      case 17: // $bb19
        var $67=_PyType_Ready(_PyBufferedIOBase_Type); //@line 668 "_iomodule.c"
        var $68=($67) < 0; //@line 668 "_iomodule.c"
        if ($68) { __label__ = 87; break; } else { __label__ = 18; break; } //@line 668 "_iomodule.c"
      case 18: // $bb20
        var $69=HEAP[_PyBufferedIOBase_Type]; //@line 668 "_iomodule.c"
        var $70=($69) + 1; //@line 668 "_iomodule.c"
        HEAP[_PyBufferedIOBase_Type]=$70; //@line 668 "_iomodule.c"
        var $71=$m; //@line 668 "_iomodule.c"
        var $72=_PyModule_AddObject($71, __str42276, _PyBufferedIOBase_Type); //@line 668 "_iomodule.c"
        var $73=($72) < 0; //@line 668 "_iomodule.c"
        if ($73) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 668 "_iomodule.c"
      case 19: // $bb21
        var $74=HEAP[_PyBufferedIOBase_Type]; //@line 668 "_iomodule.c"
        var $75=($74) - 1; //@line 668 "_iomodule.c"
        HEAP[_PyBufferedIOBase_Type]=$75; //@line 668 "_iomodule.c"
        var $76=HEAP[_PyBufferedIOBase_Type]; //@line 668 "_iomodule.c"
        var $77=($76)==0; //@line 668 "_iomodule.c"
        if ($77) { __label__ = 20; break; } else { __label__ = 87; break; } //@line 668 "_iomodule.c"
      case 20: // $bb22
        var $78=HEAP[_PyBufferedIOBase_Type+4]; //@line 668 "_iomodule.c"
        var $79=$78+24; //@line 668 "_iomodule.c"
        var $80=HEAP[$79]; //@line 668 "_iomodule.c"
        FUNCTION_TABLE[$80](_PyBufferedIOBase_Type); //@line 668 "_iomodule.c"
        __label__ = 87; break; //@line 668 "_iomodule.c"
      case 21: // $bb24
        var $81=_PyType_Ready(_PyTextIOBase_Type); //@line 669 "_iomodule.c"
        var $82=($81) < 0; //@line 669 "_iomodule.c"
        if ($82) { __label__ = 87; break; } else { __label__ = 22; break; } //@line 669 "_iomodule.c"
      case 22: // $bb25
        var $83=HEAP[_PyTextIOBase_Type]; //@line 669 "_iomodule.c"
        var $84=($83) + 1; //@line 669 "_iomodule.c"
        HEAP[_PyTextIOBase_Type]=$84; //@line 669 "_iomodule.c"
        var $85=$m; //@line 669 "_iomodule.c"
        var $86=_PyModule_AddObject($85, __str43277, _PyTextIOBase_Type); //@line 669 "_iomodule.c"
        var $87=($86) < 0; //@line 669 "_iomodule.c"
        if ($87) { __label__ = 23; break; } else { __label__ = 25; break; } //@line 669 "_iomodule.c"
      case 23: // $bb26
        var $88=HEAP[_PyTextIOBase_Type]; //@line 669 "_iomodule.c"
        var $89=($88) - 1; //@line 669 "_iomodule.c"
        HEAP[_PyTextIOBase_Type]=$89; //@line 669 "_iomodule.c"
        var $90=HEAP[_PyTextIOBase_Type]; //@line 669 "_iomodule.c"
        var $91=($90)==0; //@line 669 "_iomodule.c"
        if ($91) { __label__ = 24; break; } else { __label__ = 87; break; } //@line 669 "_iomodule.c"
      case 24: // $bb27
        var $92=HEAP[_PyTextIOBase_Type+4]; //@line 669 "_iomodule.c"
        var $93=$92+24; //@line 669 "_iomodule.c"
        var $94=HEAP[$93]; //@line 669 "_iomodule.c"
        FUNCTION_TABLE[$94](_PyTextIOBase_Type); //@line 669 "_iomodule.c"
        __label__ = 87; break; //@line 669 "_iomodule.c"
      case 25: // $bb29
        HEAP[_PyFileIO_Type+128]=_PyRawIOBase_Type; //@line 673 "_iomodule.c"
        var $95=_PyType_Ready(_PyFileIO_Type); //@line 674 "_iomodule.c"
        var $96=($95) < 0; //@line 674 "_iomodule.c"
        if ($96) { __label__ = 87; break; } else { __label__ = 26; break; } //@line 674 "_iomodule.c"
      case 26: // $bb30
        var $97=HEAP[_PyFileIO_Type]; //@line 674 "_iomodule.c"
        var $98=($97) + 1; //@line 674 "_iomodule.c"
        HEAP[_PyFileIO_Type]=$98; //@line 674 "_iomodule.c"
        var $99=$m; //@line 674 "_iomodule.c"
        var $100=_PyModule_AddObject($99, __str44278, _PyFileIO_Type); //@line 674 "_iomodule.c"
        var $101=($100) < 0; //@line 674 "_iomodule.c"
        if ($101) { __label__ = 27; break; } else { __label__ = 29; break; } //@line 674 "_iomodule.c"
      case 27: // $bb31
        var $102=HEAP[_PyFileIO_Type]; //@line 674 "_iomodule.c"
        var $103=($102) - 1; //@line 674 "_iomodule.c"
        HEAP[_PyFileIO_Type]=$103; //@line 674 "_iomodule.c"
        var $104=HEAP[_PyFileIO_Type]; //@line 674 "_iomodule.c"
        var $105=($104)==0; //@line 674 "_iomodule.c"
        if ($105) { __label__ = 28; break; } else { __label__ = 87; break; } //@line 674 "_iomodule.c"
      case 28: // $bb32
        var $106=HEAP[_PyFileIO_Type+4]; //@line 674 "_iomodule.c"
        var $107=$106+24; //@line 674 "_iomodule.c"
        var $108=HEAP[$107]; //@line 674 "_iomodule.c"
        FUNCTION_TABLE[$108](_PyFileIO_Type); //@line 674 "_iomodule.c"
        __label__ = 87; break; //@line 674 "_iomodule.c"
      case 29: // $bb34
        HEAP[_PyBytesIO_Type+128]=_PyBufferedIOBase_Type; //@line 677 "_iomodule.c"
        var $109=_PyType_Ready(_PyBytesIO_Type); //@line 678 "_iomodule.c"
        var $110=($109) < 0; //@line 678 "_iomodule.c"
        if ($110) { __label__ = 87; break; } else { __label__ = 30; break; } //@line 678 "_iomodule.c"
      case 30: // $bb35
        var $111=HEAP[_PyBytesIO_Type]; //@line 678 "_iomodule.c"
        var $112=($111) + 1; //@line 678 "_iomodule.c"
        HEAP[_PyBytesIO_Type]=$112; //@line 678 "_iomodule.c"
        var $113=$m; //@line 678 "_iomodule.c"
        var $114=_PyModule_AddObject($113, __str45279, _PyBytesIO_Type); //@line 678 "_iomodule.c"
        var $115=($114) < 0; //@line 678 "_iomodule.c"
        if ($115) { __label__ = 31; break; } else { __label__ = 33; break; } //@line 678 "_iomodule.c"
      case 31: // $bb36
        var $116=HEAP[_PyBytesIO_Type]; //@line 678 "_iomodule.c"
        var $117=($116) - 1; //@line 678 "_iomodule.c"
        HEAP[_PyBytesIO_Type]=$117; //@line 678 "_iomodule.c"
        var $118=HEAP[_PyBytesIO_Type]; //@line 678 "_iomodule.c"
        var $119=($118)==0; //@line 678 "_iomodule.c"
        if ($119) { __label__ = 32; break; } else { __label__ = 87; break; } //@line 678 "_iomodule.c"
      case 32: // $bb37
        var $120=HEAP[_PyBytesIO_Type+4]; //@line 678 "_iomodule.c"
        var $121=$120+24; //@line 678 "_iomodule.c"
        var $122=HEAP[$121]; //@line 678 "_iomodule.c"
        FUNCTION_TABLE[$122](_PyBytesIO_Type); //@line 678 "_iomodule.c"
        __label__ = 87; break; //@line 678 "_iomodule.c"
      case 33: // $bb39
        HEAP[_PyStringIO_Type+128]=_PyTextIOBase_Type; //@line 681 "_iomodule.c"
        var $123=_PyType_Ready(_PyStringIO_Type); //@line 682 "_iomodule.c"
        var $124=($123) < 0; //@line 682 "_iomodule.c"
        if ($124) { __label__ = 87; break; } else { __label__ = 34; break; } //@line 682 "_iomodule.c"
      case 34: // $bb40
        var $125=HEAP[_PyStringIO_Type]; //@line 682 "_iomodule.c"
        var $126=($125) + 1; //@line 682 "_iomodule.c"
        HEAP[_PyStringIO_Type]=$126; //@line 682 "_iomodule.c"
        var $127=$m; //@line 682 "_iomodule.c"
        var $128=_PyModule_AddObject($127, __str46280, _PyStringIO_Type); //@line 682 "_iomodule.c"
        var $129=($128) < 0; //@line 682 "_iomodule.c"
        if ($129) { __label__ = 35; break; } else { __label__ = 37; break; } //@line 682 "_iomodule.c"
      case 35: // $bb41
        var $130=HEAP[_PyStringIO_Type]; //@line 682 "_iomodule.c"
        var $131=($130) - 1; //@line 682 "_iomodule.c"
        HEAP[_PyStringIO_Type]=$131; //@line 682 "_iomodule.c"
        var $132=HEAP[_PyStringIO_Type]; //@line 682 "_iomodule.c"
        var $133=($132)==0; //@line 682 "_iomodule.c"
        if ($133) { __label__ = 36; break; } else { __label__ = 87; break; } //@line 682 "_iomodule.c"
      case 36: // $bb42
        var $134=HEAP[_PyStringIO_Type+4]; //@line 682 "_iomodule.c"
        var $135=$134+24; //@line 682 "_iomodule.c"
        var $136=HEAP[$135]; //@line 682 "_iomodule.c"
        FUNCTION_TABLE[$136](_PyStringIO_Type); //@line 682 "_iomodule.c"
        __label__ = 87; break; //@line 682 "_iomodule.c"
      case 37: // $bb44
        HEAP[_PyBufferedReader_Type+128]=_PyBufferedIOBase_Type; //@line 685 "_iomodule.c"
        var $137=_PyType_Ready(_PyBufferedReader_Type); //@line 686 "_iomodule.c"
        var $138=($137) < 0; //@line 686 "_iomodule.c"
        if ($138) { __label__ = 87; break; } else { __label__ = 38; break; } //@line 686 "_iomodule.c"
      case 38: // $bb45
        var $139=HEAP[_PyBufferedReader_Type]; //@line 686 "_iomodule.c"
        var $140=($139) + 1; //@line 686 "_iomodule.c"
        HEAP[_PyBufferedReader_Type]=$140; //@line 686 "_iomodule.c"
        var $141=$m; //@line 686 "_iomodule.c"
        var $142=_PyModule_AddObject($141, __str47281, _PyBufferedReader_Type); //@line 686 "_iomodule.c"
        var $143=($142) < 0; //@line 686 "_iomodule.c"
        if ($143) { __label__ = 39; break; } else { __label__ = 41; break; } //@line 686 "_iomodule.c"
      case 39: // $bb46
        var $144=HEAP[_PyBufferedReader_Type]; //@line 686 "_iomodule.c"
        var $145=($144) - 1; //@line 686 "_iomodule.c"
        HEAP[_PyBufferedReader_Type]=$145; //@line 686 "_iomodule.c"
        var $146=HEAP[_PyBufferedReader_Type]; //@line 686 "_iomodule.c"
        var $147=($146)==0; //@line 686 "_iomodule.c"
        if ($147) { __label__ = 40; break; } else { __label__ = 87; break; } //@line 686 "_iomodule.c"
      case 40: // $bb47
        var $148=HEAP[_PyBufferedReader_Type+4]; //@line 686 "_iomodule.c"
        var $149=$148+24; //@line 686 "_iomodule.c"
        var $150=HEAP[$149]; //@line 686 "_iomodule.c"
        FUNCTION_TABLE[$150](_PyBufferedReader_Type); //@line 686 "_iomodule.c"
        __label__ = 87; break; //@line 686 "_iomodule.c"
      case 41: // $bb49
        HEAP[_PyBufferedWriter_Type+128]=_PyBufferedIOBase_Type; //@line 689 "_iomodule.c"
        var $151=_PyType_Ready(_PyBufferedWriter_Type); //@line 690 "_iomodule.c"
        var $152=($151) < 0; //@line 690 "_iomodule.c"
        if ($152) { __label__ = 87; break; } else { __label__ = 42; break; } //@line 690 "_iomodule.c"
      case 42: // $bb50
        var $153=HEAP[_PyBufferedWriter_Type]; //@line 690 "_iomodule.c"
        var $154=($153) + 1; //@line 690 "_iomodule.c"
        HEAP[_PyBufferedWriter_Type]=$154; //@line 690 "_iomodule.c"
        var $155=$m; //@line 690 "_iomodule.c"
        var $156=_PyModule_AddObject($155, __str48282, _PyBufferedWriter_Type); //@line 690 "_iomodule.c"
        var $157=($156) < 0; //@line 690 "_iomodule.c"
        if ($157) { __label__ = 43; break; } else { __label__ = 45; break; } //@line 690 "_iomodule.c"
      case 43: // $bb51
        var $158=HEAP[_PyBufferedWriter_Type]; //@line 690 "_iomodule.c"
        var $159=($158) - 1; //@line 690 "_iomodule.c"
        HEAP[_PyBufferedWriter_Type]=$159; //@line 690 "_iomodule.c"
        var $160=HEAP[_PyBufferedWriter_Type]; //@line 690 "_iomodule.c"
        var $161=($160)==0; //@line 690 "_iomodule.c"
        if ($161) { __label__ = 44; break; } else { __label__ = 87; break; } //@line 690 "_iomodule.c"
      case 44: // $bb52
        var $162=HEAP[_PyBufferedWriter_Type+4]; //@line 690 "_iomodule.c"
        var $163=$162+24; //@line 690 "_iomodule.c"
        var $164=HEAP[$163]; //@line 690 "_iomodule.c"
        FUNCTION_TABLE[$164](_PyBufferedWriter_Type); //@line 690 "_iomodule.c"
        __label__ = 87; break; //@line 690 "_iomodule.c"
      case 45: // $bb54
        HEAP[_PyBufferedRWPair_Type+128]=_PyBufferedIOBase_Type; //@line 693 "_iomodule.c"
        var $165=_PyType_Ready(_PyBufferedRWPair_Type); //@line 694 "_iomodule.c"
        var $166=($165) < 0; //@line 694 "_iomodule.c"
        if ($166) { __label__ = 87; break; } else { __label__ = 46; break; } //@line 694 "_iomodule.c"
      case 46: // $bb55
        var $167=HEAP[_PyBufferedRWPair_Type]; //@line 694 "_iomodule.c"
        var $168=($167) + 1; //@line 694 "_iomodule.c"
        HEAP[_PyBufferedRWPair_Type]=$168; //@line 694 "_iomodule.c"
        var $169=$m; //@line 694 "_iomodule.c"
        var $170=_PyModule_AddObject($169, __str49283, _PyBufferedRWPair_Type); //@line 694 "_iomodule.c"
        var $171=($170) < 0; //@line 694 "_iomodule.c"
        if ($171) { __label__ = 47; break; } else { __label__ = 49; break; } //@line 694 "_iomodule.c"
      case 47: // $bb56
        var $172=HEAP[_PyBufferedRWPair_Type]; //@line 694 "_iomodule.c"
        var $173=($172) - 1; //@line 694 "_iomodule.c"
        HEAP[_PyBufferedRWPair_Type]=$173; //@line 694 "_iomodule.c"
        var $174=HEAP[_PyBufferedRWPair_Type]; //@line 694 "_iomodule.c"
        var $175=($174)==0; //@line 694 "_iomodule.c"
        if ($175) { __label__ = 48; break; } else { __label__ = 87; break; } //@line 694 "_iomodule.c"
      case 48: // $bb57
        var $176=HEAP[_PyBufferedRWPair_Type+4]; //@line 694 "_iomodule.c"
        var $177=$176+24; //@line 694 "_iomodule.c"
        var $178=HEAP[$177]; //@line 694 "_iomodule.c"
        FUNCTION_TABLE[$178](_PyBufferedRWPair_Type); //@line 694 "_iomodule.c"
        __label__ = 87; break; //@line 694 "_iomodule.c"
      case 49: // $bb59
        HEAP[_PyBufferedRandom_Type+128]=_PyBufferedIOBase_Type; //@line 697 "_iomodule.c"
        var $179=_PyType_Ready(_PyBufferedRandom_Type); //@line 698 "_iomodule.c"
        var $180=($179) < 0; //@line 698 "_iomodule.c"
        if ($180) { __label__ = 87; break; } else { __label__ = 50; break; } //@line 698 "_iomodule.c"
      case 50: // $bb60
        var $181=HEAP[_PyBufferedRandom_Type]; //@line 698 "_iomodule.c"
        var $182=($181) + 1; //@line 698 "_iomodule.c"
        HEAP[_PyBufferedRandom_Type]=$182; //@line 698 "_iomodule.c"
        var $183=$m; //@line 698 "_iomodule.c"
        var $184=_PyModule_AddObject($183, __str50284, _PyBufferedRandom_Type); //@line 698 "_iomodule.c"
        var $185=($184) < 0; //@line 698 "_iomodule.c"
        if ($185) { __label__ = 51; break; } else { __label__ = 53; break; } //@line 698 "_iomodule.c"
      case 51: // $bb61
        var $186=HEAP[_PyBufferedRandom_Type]; //@line 698 "_iomodule.c"
        var $187=($186) - 1; //@line 698 "_iomodule.c"
        HEAP[_PyBufferedRandom_Type]=$187; //@line 698 "_iomodule.c"
        var $188=HEAP[_PyBufferedRandom_Type]; //@line 698 "_iomodule.c"
        var $189=($188)==0; //@line 698 "_iomodule.c"
        if ($189) { __label__ = 52; break; } else { __label__ = 87; break; } //@line 698 "_iomodule.c"
      case 52: // $bb62
        var $190=HEAP[_PyBufferedRandom_Type+4]; //@line 698 "_iomodule.c"
        var $191=$190+24; //@line 698 "_iomodule.c"
        var $192=HEAP[$191]; //@line 698 "_iomodule.c"
        FUNCTION_TABLE[$192](_PyBufferedRandom_Type); //@line 698 "_iomodule.c"
        __label__ = 87; break; //@line 698 "_iomodule.c"
      case 53: // $bb64
        HEAP[_PyTextIOWrapper_Type+128]=_PyTextIOBase_Type; //@line 701 "_iomodule.c"
        var $193=_PyType_Ready(_PyTextIOWrapper_Type); //@line 702 "_iomodule.c"
        var $194=($193) < 0; //@line 702 "_iomodule.c"
        if ($194) { __label__ = 87; break; } else { __label__ = 54; break; } //@line 702 "_iomodule.c"
      case 54: // $bb65
        var $195=HEAP[_PyTextIOWrapper_Type]; //@line 702 "_iomodule.c"
        var $196=($195) + 1; //@line 702 "_iomodule.c"
        HEAP[_PyTextIOWrapper_Type]=$196; //@line 702 "_iomodule.c"
        var $197=$m; //@line 702 "_iomodule.c"
        var $198=_PyModule_AddObject($197, __str51285, _PyTextIOWrapper_Type); //@line 702 "_iomodule.c"
        var $199=($198) < 0; //@line 702 "_iomodule.c"
        if ($199) { __label__ = 55; break; } else { __label__ = 57; break; } //@line 702 "_iomodule.c"
      case 55: // $bb66
        var $200=HEAP[_PyTextIOWrapper_Type]; //@line 702 "_iomodule.c"
        var $201=($200) - 1; //@line 702 "_iomodule.c"
        HEAP[_PyTextIOWrapper_Type]=$201; //@line 702 "_iomodule.c"
        var $202=HEAP[_PyTextIOWrapper_Type]; //@line 702 "_iomodule.c"
        var $203=($202)==0; //@line 702 "_iomodule.c"
        if ($203) { __label__ = 56; break; } else { __label__ = 87; break; } //@line 702 "_iomodule.c"
      case 56: // $bb67
        var $204=HEAP[_PyTextIOWrapper_Type+4]; //@line 702 "_iomodule.c"
        var $205=$204+24; //@line 702 "_iomodule.c"
        var $206=HEAP[$205]; //@line 702 "_iomodule.c"
        FUNCTION_TABLE[$206](_PyTextIOWrapper_Type); //@line 702 "_iomodule.c"
        __label__ = 87; break; //@line 702 "_iomodule.c"
      case 57: // $bb69
        var $207=_PyType_Ready(_PyIncrementalNewlineDecoder_Type); //@line 705 "_iomodule.c"
        var $208=($207) < 0; //@line 705 "_iomodule.c"
        if ($208) { __label__ = 87; break; } else { __label__ = 58; break; } //@line 705 "_iomodule.c"
      case 58: // $bb70
        var $209=HEAP[_PyIncrementalNewlineDecoder_Type]; //@line 705 "_iomodule.c"
        var $210=($209) + 1; //@line 705 "_iomodule.c"
        HEAP[_PyIncrementalNewlineDecoder_Type]=$210; //@line 705 "_iomodule.c"
        var $211=$m; //@line 705 "_iomodule.c"
        var $212=_PyModule_AddObject($211, __str52286, _PyIncrementalNewlineDecoder_Type); //@line 705 "_iomodule.c"
        var $213=($212) < 0; //@line 705 "_iomodule.c"
        if ($213) { __label__ = 59; break; } else { __label__ = 61; break; } //@line 705 "_iomodule.c"
      case 59: // $bb71
        var $214=HEAP[_PyIncrementalNewlineDecoder_Type]; //@line 705 "_iomodule.c"
        var $215=($214) - 1; //@line 705 "_iomodule.c"
        HEAP[_PyIncrementalNewlineDecoder_Type]=$215; //@line 705 "_iomodule.c"
        var $216=HEAP[_PyIncrementalNewlineDecoder_Type]; //@line 705 "_iomodule.c"
        var $217=($216)==0; //@line 705 "_iomodule.c"
        if ($217) { __label__ = 60; break; } else { __label__ = 87; break; } //@line 705 "_iomodule.c"
      case 60: // $bb72
        var $218=HEAP[_PyIncrementalNewlineDecoder_Type+4]; //@line 705 "_iomodule.c"
        var $219=$218+24; //@line 705 "_iomodule.c"
        var $220=HEAP[$219]; //@line 705 "_iomodule.c"
        FUNCTION_TABLE[$220](_PyIncrementalNewlineDecoder_Type); //@line 705 "_iomodule.c"
        __label__ = 87; break; //@line 705 "_iomodule.c"
      case 61: // $bb74
        var $221=_PyString_InternFromString(__str53287); //@line 708 "_iomodule.c"
        HEAP[__PyIO_str_close]=$221; //@line 708 "_iomodule.c"
        var $222=HEAP[__PyIO_str_close]; //@line 708 "_iomodule.c"
        var $223=($222)==0; //@line 708 "_iomodule.c"
        if ($223) { __label__ = 87; break; } else { __label__ = 62; break; } //@line 708 "_iomodule.c"
      case 62: // $bb75
        var $224=_PyString_InternFromString(__str54289); //@line 710 "_iomodule.c"
        HEAP[__PyIO_str_closed]=$224; //@line 710 "_iomodule.c"
        var $225=HEAP[__PyIO_str_closed]; //@line 710 "_iomodule.c"
        var $226=($225)==0; //@line 710 "_iomodule.c"
        if ($226) { __label__ = 87; break; } else { __label__ = 63; break; } //@line 710 "_iomodule.c"
      case 63: // $bb76
        var $227=_PyString_InternFromString(__str55291); //@line 712 "_iomodule.c"
        HEAP[__PyIO_str_decode]=$227; //@line 712 "_iomodule.c"
        var $228=HEAP[__PyIO_str_decode]; //@line 712 "_iomodule.c"
        var $229=($228)==0; //@line 712 "_iomodule.c"
        if ($229) { __label__ = 87; break; } else { __label__ = 64; break; } //@line 712 "_iomodule.c"
      case 64: // $bb77
        var $230=_PyString_InternFromString(__str56292); //@line 714 "_iomodule.c"
        HEAP[__PyIO_str_encode]=$230; //@line 714 "_iomodule.c"
        var $231=HEAP[__PyIO_str_encode]; //@line 714 "_iomodule.c"
        var $232=($231)==0; //@line 714 "_iomodule.c"
        if ($232) { __label__ = 87; break; } else { __label__ = 65; break; } //@line 714 "_iomodule.c"
      case 65: // $bb78
        var $233=_PyString_InternFromString(__str25258); //@line 716 "_iomodule.c"
        HEAP[__PyIO_str_fileno]=$233; //@line 716 "_iomodule.c"
        var $234=HEAP[__PyIO_str_fileno]; //@line 716 "_iomodule.c"
        var $235=($234)==0; //@line 716 "_iomodule.c"
        if ($235) { __label__ = 87; break; } else { __label__ = 66; break; } //@line 716 "_iomodule.c"
      case 66: // $bb79
        var $236=_PyString_InternFromString(__str57294); //@line 718 "_iomodule.c"
        HEAP[__PyIO_str_flush]=$236; //@line 718 "_iomodule.c"
        var $237=HEAP[__PyIO_str_flush]; //@line 718 "_iomodule.c"
        var $238=($237)==0; //@line 718 "_iomodule.c"
        if ($238) { __label__ = 87; break; } else { __label__ = 67; break; } //@line 718 "_iomodule.c"
      case 67: // $bb80
        var $239=_PyString_InternFromString(__str58296); //@line 720 "_iomodule.c"
        HEAP[__PyIO_str_getstate]=$239; //@line 720 "_iomodule.c"
        var $240=HEAP[__PyIO_str_getstate]; //@line 720 "_iomodule.c"
        var $241=($240)==0; //@line 720 "_iomodule.c"
        if ($241) { __label__ = 87; break; } else { __label__ = 68; break; } //@line 720 "_iomodule.c"
      case 68: // $bb81
        var $242=_PyString_InternFromString(__str24257); //@line 722 "_iomodule.c"
        HEAP[__PyIO_str_isatty]=$242; //@line 722 "_iomodule.c"
        var $243=HEAP[__PyIO_str_isatty]; //@line 722 "_iomodule.c"
        var $244=($243)==0; //@line 722 "_iomodule.c"
        if ($244) { __label__ = 87; break; } else { __label__ = 69; break; } //@line 722 "_iomodule.c"
      case 69: // $bb82
        var $245=_PyString_InternFromString(__str59298); //@line 724 "_iomodule.c"
        HEAP[__PyIO_str_newlines]=$245; //@line 724 "_iomodule.c"
        var $246=HEAP[__PyIO_str_newlines]; //@line 724 "_iomodule.c"
        var $247=($246)==0; //@line 724 "_iomodule.c"
        if ($247) { __label__ = 87; break; } else { __label__ = 70; break; } //@line 724 "_iomodule.c"
      case 70: // $bb83
        var $248=_PyString_InternFromString(__str60299); //@line 726 "_iomodule.c"
        HEAP[__PyIO_str_nl]=$248; //@line 726 "_iomodule.c"
        var $249=HEAP[__PyIO_str_nl]; //@line 726 "_iomodule.c"
        var $250=($249)==0; //@line 726 "_iomodule.c"
        if ($250) { __label__ = 87; break; } else { __label__ = 71; break; } //@line 726 "_iomodule.c"
      case 71: // $bb84
        var $251=_PyString_InternFromString(__str61300); //@line 728 "_iomodule.c"
        HEAP[__PyIO_str_read]=$251; //@line 728 "_iomodule.c"
        var $252=HEAP[__PyIO_str_read]; //@line 728 "_iomodule.c"
        var $253=($252)==0; //@line 728 "_iomodule.c"
        if ($253) { __label__ = 87; break; } else { __label__ = 72; break; } //@line 728 "_iomodule.c"
      case 72: // $bb85
        var $254=_PyString_InternFromString(__str62302); //@line 730 "_iomodule.c"
        HEAP[__PyIO_str_read1]=$254; //@line 730 "_iomodule.c"
        var $255=HEAP[__PyIO_str_read1]; //@line 730 "_iomodule.c"
        var $256=($255)==0; //@line 730 "_iomodule.c"
        if ($256) { __label__ = 87; break; } else { __label__ = 73; break; } //@line 730 "_iomodule.c"
      case 73: // $bb86
        var $257=_PyString_InternFromString(__str63303); //@line 732 "_iomodule.c"
        HEAP[__PyIO_str_readable]=$257; //@line 732 "_iomodule.c"
        var $258=HEAP[__PyIO_str_readable]; //@line 732 "_iomodule.c"
        var $259=($258)==0; //@line 732 "_iomodule.c"
        if ($259) { __label__ = 87; break; } else { __label__ = 74; break; } //@line 732 "_iomodule.c"
      case 74: // $bb87
        var $260=_PyString_InternFromString(__str64305); //@line 734 "_iomodule.c"
        HEAP[__PyIO_str_readinto]=$260; //@line 734 "_iomodule.c"
        var $261=HEAP[__PyIO_str_readinto]; //@line 734 "_iomodule.c"
        var $262=($261)==0; //@line 734 "_iomodule.c"
        if ($262) { __label__ = 87; break; } else { __label__ = 75; break; } //@line 734 "_iomodule.c"
      case 75: // $bb88
        var $263=_PyString_InternFromString(__str65307); //@line 736 "_iomodule.c"
        HEAP[__PyIO_str_readline]=$263; //@line 736 "_iomodule.c"
        var $264=HEAP[__PyIO_str_readline]; //@line 736 "_iomodule.c"
        var $265=($264)==0; //@line 736 "_iomodule.c"
        if ($265) { __label__ = 87; break; } else { __label__ = 76; break; } //@line 736 "_iomodule.c"
      case 76: // $bb89
        var $266=_PyString_InternFromString(__str66309); //@line 738 "_iomodule.c"
        HEAP[__PyIO_str_reset]=$266; //@line 738 "_iomodule.c"
        var $267=HEAP[__PyIO_str_reset]; //@line 738 "_iomodule.c"
        var $268=($267)==0; //@line 738 "_iomodule.c"
        if ($268) { __label__ = 87; break; } else { __label__ = 77; break; } //@line 738 "_iomodule.c"
      case 77: // $bb90
        var $269=_PyString_InternFromString(__str67); //@line 740 "_iomodule.c"
        HEAP[__PyIO_str_seek]=$269; //@line 740 "_iomodule.c"
        var $270=HEAP[__PyIO_str_seek]; //@line 740 "_iomodule.c"
        var $271=($270)==0; //@line 740 "_iomodule.c"
        if ($271) { __label__ = 87; break; } else { __label__ = 78; break; } //@line 740 "_iomodule.c"
      case 78: // $bb91
        var $272=_PyString_InternFromString(__str68); //@line 742 "_iomodule.c"
        HEAP[__PyIO_str_seekable]=$272; //@line 742 "_iomodule.c"
        var $273=HEAP[__PyIO_str_seekable]; //@line 742 "_iomodule.c"
        var $274=($273)==0; //@line 742 "_iomodule.c"
        if ($274) { __label__ = 87; break; } else { __label__ = 79; break; } //@line 742 "_iomodule.c"
      case 79: // $bb92
        var $275=_PyString_InternFromString(__str69); //@line 744 "_iomodule.c"
        HEAP[__PyIO_str_setstate]=$275; //@line 744 "_iomodule.c"
        var $276=HEAP[__PyIO_str_setstate]; //@line 744 "_iomodule.c"
        var $277=($276)==0; //@line 744 "_iomodule.c"
        if ($277) { __label__ = 87; break; } else { __label__ = 80; break; } //@line 744 "_iomodule.c"
      case 80: // $bb93
        var $278=_PyString_InternFromString(__str70); //@line 746 "_iomodule.c"
        HEAP[__PyIO_str_tell]=$278; //@line 746 "_iomodule.c"
        var $279=HEAP[__PyIO_str_tell]; //@line 746 "_iomodule.c"
        var $280=($279)==0; //@line 746 "_iomodule.c"
        if ($280) { __label__ = 87; break; } else { __label__ = 81; break; } //@line 746 "_iomodule.c"
      case 81: // $bb94
        var $281=_PyString_InternFromString(__str71); //@line 748 "_iomodule.c"
        HEAP[__PyIO_str_truncate]=$281; //@line 748 "_iomodule.c"
        var $282=HEAP[__PyIO_str_truncate]; //@line 748 "_iomodule.c"
        var $283=($282)==0; //@line 748 "_iomodule.c"
        if ($283) { __label__ = 87; break; } else { __label__ = 82; break; } //@line 748 "_iomodule.c"
      case 82: // $bb95
        var $284=_PyString_InternFromString(__str72); //@line 750 "_iomodule.c"
        HEAP[__PyIO_str_write]=$284; //@line 750 "_iomodule.c"
        var $285=HEAP[__PyIO_str_write]; //@line 750 "_iomodule.c"
        var $286=($285)==0; //@line 750 "_iomodule.c"
        if ($286) { __label__ = 87; break; } else { __label__ = 83; break; } //@line 750 "_iomodule.c"
      case 83: // $bb96
        var $287=_PyString_InternFromString(__str73); //@line 752 "_iomodule.c"
        HEAP[__PyIO_str_writable]=$287; //@line 752 "_iomodule.c"
        var $288=HEAP[__PyIO_str_writable]; //@line 752 "_iomodule.c"
        var $289=($288)==0; //@line 752 "_iomodule.c"
        if ($289) { __label__ = 87; break; } else { __label__ = 84; break; } //@line 752 "_iomodule.c"
      case 84: // $bb97
        var $290=_PyUnicodeUCS2_FromStringAndSize(0, 0); //@line 755 "_iomodule.c"
        HEAP[__PyIO_empty_str]=$290; //@line 755 "_iomodule.c"
        var $291=HEAP[__PyIO_empty_str]; //@line 755 "_iomodule.c"
        var $292=($291)==0; //@line 755 "_iomodule.c"
        if ($292) { __label__ = 87; break; } else { __label__ = 85; break; } //@line 755 "_iomodule.c"
      case 85: // $bb98
        var $293=_PyString_FromStringAndSize(0, 0); //@line 757 "_iomodule.c"
        HEAP[__PyIO_empty_bytes]=$293; //@line 757 "_iomodule.c"
        var $294=HEAP[__PyIO_empty_bytes]; //@line 757 "_iomodule.c"
        var $295=($294)==0; //@line 757 "_iomodule.c"
        if ($295) { __label__ = 87; break; } else { __label__ = 86; break; } //@line 757 "_iomodule.c"
      case 86: // $bb99
        var $296=_PyLong_FromLong(0); //@line 759 "_iomodule.c"
        HEAP[__PyIO_zero]=$296; //@line 759 "_iomodule.c"
        var $297=HEAP[__PyIO_zero]; //@line 759 "_iomodule.c"
        var $298=($297)==0; //@line 759 "_iomodule.c"
        if ($298) { __label__ = 87; break; } else { __label__ = 95; break; } //@line 759 "_iomodule.c"
      case 87: // $fail
        var $_pr=HEAP[__PyIO_os_module];
        var $299=($_pr)!=0; //@line 765 "_iomodule.c"
        if ($299) { __label__ = 88; break; } else { __label__ = 90; break; } //@line 765 "_iomodule.c"
      case 88: // $bb101
        var $300=HEAP[__PyIO_os_module]; //@line 765 "_iomodule.c"
        $_py_tmp=$300; //@line 765 "_iomodule.c"
        HEAP[__PyIO_os_module]=0; //@line 765 "_iomodule.c"
        var $301=$_py_tmp; //@line 765 "_iomodule.c"
        var $302=$301; //@line 765 "_iomodule.c"
        var $303=HEAP[$302]; //@line 765 "_iomodule.c"
        var $304=($303) - 1; //@line 765 "_iomodule.c"
        var $305=$_py_tmp; //@line 765 "_iomodule.c"
        var $306=$305; //@line 765 "_iomodule.c"
        HEAP[$306]=$304; //@line 765 "_iomodule.c"
        var $307=$_py_tmp; //@line 765 "_iomodule.c"
        var $308=$307; //@line 765 "_iomodule.c"
        var $309=HEAP[$308]; //@line 765 "_iomodule.c"
        var $310=($309)==0; //@line 765 "_iomodule.c"
        if ($310) { __label__ = 89; break; } else { __label__ = 90; break; } //@line 765 "_iomodule.c"
      case 89: // $bb102
        var $311=$_py_tmp; //@line 765 "_iomodule.c"
        var $312=$311+4; //@line 765 "_iomodule.c"
        var $313=HEAP[$312]; //@line 765 "_iomodule.c"
        var $314=$313+24; //@line 765 "_iomodule.c"
        var $315=HEAP[$314]; //@line 765 "_iomodule.c"
        var $316=$_py_tmp; //@line 765 "_iomodule.c"
        FUNCTION_TABLE[$315]($316); //@line 765 "_iomodule.c"
        __label__ = 90; break; //@line 765 "_iomodule.c"
      case 90: // $bb103
        var $317=HEAP[__PyIO_unsupported_operation]; //@line 766 "_iomodule.c"
        var $318=($317)!=0; //@line 766 "_iomodule.c"
        if ($318) { __label__ = 91; break; } else { __label__ = 93; break; } //@line 766 "_iomodule.c"
      case 91: // $bb104
        var $319=HEAP[__PyIO_unsupported_operation]; //@line 766 "_iomodule.c"
        $_py_tmp105=$319; //@line 766 "_iomodule.c"
        HEAP[__PyIO_unsupported_operation]=0; //@line 766 "_iomodule.c"
        var $320=$_py_tmp105; //@line 766 "_iomodule.c"
        var $321=$320; //@line 766 "_iomodule.c"
        var $322=HEAP[$321]; //@line 766 "_iomodule.c"
        var $323=($322) - 1; //@line 766 "_iomodule.c"
        var $324=$_py_tmp105; //@line 766 "_iomodule.c"
        var $325=$324; //@line 766 "_iomodule.c"
        HEAP[$325]=$323; //@line 766 "_iomodule.c"
        var $326=$_py_tmp105; //@line 766 "_iomodule.c"
        var $327=$326; //@line 766 "_iomodule.c"
        var $328=HEAP[$327]; //@line 766 "_iomodule.c"
        var $329=($328)==0; //@line 766 "_iomodule.c"
        if ($329) { __label__ = 92; break; } else { __label__ = 93; break; } //@line 766 "_iomodule.c"
      case 92: // $bb106
        var $330=$_py_tmp105; //@line 766 "_iomodule.c"
        var $331=$330+4; //@line 766 "_iomodule.c"
        var $332=HEAP[$331]; //@line 766 "_iomodule.c"
        var $333=$332+24; //@line 766 "_iomodule.c"
        var $334=HEAP[$333]; //@line 766 "_iomodule.c"
        var $335=$_py_tmp105; //@line 766 "_iomodule.c"
        FUNCTION_TABLE[$334]($335); //@line 766 "_iomodule.c"
        __label__ = 93; break; //@line 766 "_iomodule.c"
      case 93: // $bb107
        var $336=$m; //@line 767 "_iomodule.c"
        var $337=$336; //@line 767 "_iomodule.c"
        var $338=HEAP[$337]; //@line 767 "_iomodule.c"
        var $339=($338) - 1; //@line 767 "_iomodule.c"
        var $340=$m; //@line 767 "_iomodule.c"
        var $341=$340; //@line 767 "_iomodule.c"
        HEAP[$341]=$339; //@line 767 "_iomodule.c"
        var $342=$m; //@line 767 "_iomodule.c"
        var $343=$342; //@line 767 "_iomodule.c"
        var $344=HEAP[$343]; //@line 767 "_iomodule.c"
        var $345=($344)==0; //@line 767 "_iomodule.c"
        if ($345) { __label__ = 94; break; } else { __label__ = 95; break; } //@line 767 "_iomodule.c"
      case 94: // $bb108
        var $346=$m; //@line 767 "_iomodule.c"
        var $347=$346+4; //@line 767 "_iomodule.c"
        var $348=HEAP[$347]; //@line 767 "_iomodule.c"
        var $349=$348+24; //@line 767 "_iomodule.c"
        var $350=HEAP[$349]; //@line 767 "_iomodule.c"
        var $351=$m; //@line 767 "_iomodule.c"
        FUNCTION_TABLE[$350]($351); //@line 767 "_iomodule.c"
        __label__ = 95; break; //@line 767 "_iomodule.c"
      case 95: // $return
        ;
        return; //@line 628 "_iomodule.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  Module["_init_io"] = _init_io;

  function _resize_buffer373($self, $size) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $size_addr;
        var $retval;
        var $iftmp_1;
        var $0;
        var $alloc;
        var $new_buf;
        $self_addr=$self;
        $size_addr=$size;
        var $1=$self_addr; //@line 58 "stringio.c"
        var $2=$1+20; //@line 58 "stringio.c"
        var $3=HEAP[$2]; //@line 58 "stringio.c"
        $alloc=$3; //@line 58 "stringio.c"
        $new_buf=0; //@line 59 "stringio.c"
        var $4=$self_addr; //@line 61 "stringio.c"
        var $5=$4+8; //@line 61 "stringio.c"
        var $6=HEAP[$5]; //@line 61 "stringio.c"
        var $7=($6)==0; //@line 61 "stringio.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 61 "stringio.c"
      case 1: // $bb
        ___assert_fail(__str319, __str1320, 61, ___PRETTY_FUNCTION___8442); //@line 61 "stringio.c"
        throw "Reached an unreachable!" //@line 61 "stringio.c"
      case 2: // $bb1
        var $8=$size_addr; //@line 64 "stringio.c"
        var $9=($8) + 1; //@line 64 "stringio.c"
        $size_addr=$9; //@line 64 "stringio.c"
        var $10=$size_addr; //@line 67 "stringio.c"
        var $11=($10) < 0; //@line 67 "stringio.c"
        if ($11) { __label__ = 17; break; } else { __label__ = 3; break; } //@line 67 "stringio.c"
      case 3: // $bb2
        var $12=$alloc; //@line 70 "stringio.c"
        var $13=Math.floor(($12)/2); //@line 70 "stringio.c"
        var $14=$size_addr; //@line 70 "stringio.c"
        var $15=($13) > ($14); //@line 70 "stringio.c"
        var $16=$size_addr; //@line 72 "stringio.c"
        if ($15) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 70 "stringio.c"
      case 4: // $bb3
        var $17=($16) + 1; //@line 72 "stringio.c"
        $alloc=$17; //@line 72 "stringio.c"
        __lastLabel__ = 4; __label__ = 13; break; //@line 72 "stringio.c"
      case 5: // $bb4
        var $18=$alloc; //@line 74 "stringio.c"
        var $19=($16) < ($18); //@line 74 "stringio.c"
        if ($19) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 74 "stringio.c"
      case 6: // $bb5
        $0=0; //@line 76 "stringio.c"
        __label__ = 18; break; //@line 76 "stringio.c"
      case 7: // $bb6
        var $20=$size_addr; //@line 78 "stringio.c"
        var $21=($20); //@line 78 "stringio.c"
        var $22=$alloc; //@line 78 "stringio.c"
        var $23=($22); //@line 78 "stringio.c"
        var $24=($23) * 1.125; //@line 78 "stringio.c"
        var $25=($21) <= ($24); //@line 78 "stringio.c"
        var $26=$size_addr; //@line 80 "stringio.c"
        if ($25) { __label__ = 8; break; } else { __label__ = 12; break; } //@line 78 "stringio.c"
      case 8: // $bb7
        var $27=($26) >>> 3; //@line 80 "stringio.c"
        var $28=$size_addr; //@line 80 "stringio.c"
        var $29=$size_addr; //@line 80 "stringio.c"
        var $30=($29) <= 8; //@line 80 "stringio.c"
        if ($30) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 80 "stringio.c"
      case 9: // $bb8
        $iftmp_1=3; //@line 80 "stringio.c"
        __label__ = 11; break; //@line 80 "stringio.c"
      case 10: // $bb9
        $iftmp_1=6; //@line 80 "stringio.c"
        __label__ = 11; break; //@line 80 "stringio.c"
      case 11: // $bb10
        var $31=$iftmp_1; //@line 80 "stringio.c"
        var $32=($28) + ($27); //@line 80 "stringio.c"
        var $33=($32) + ($31); //@line 80 "stringio.c"
        $alloc=$33; //@line 80 "stringio.c"
        __lastLabel__ = 11; __label__ = 13; break; //@line 80 "stringio.c"
      case 12: // $bb11
        var $34=($26) + 1; //@line 84 "stringio.c"
        $alloc=$34; //@line 84 "stringio.c"
        __lastLabel__ = 12; __label__ = 13; break; //@line 84 "stringio.c"
      case 13: // $bb12
        var $35=__lastLabel__ == 12 ? $34 : (__lastLabel__ == 11 ? $33 : ($17));
        var $36=($35) < 0; //@line 87 "stringio.c"
        if ($36) { __label__ = 17; break; } else { __label__ = 14; break; } //@line 87 "stringio.c"
      case 14: // $bb13
        var $37=$alloc; //@line 89 "stringio.c"
        var $38=($37) * 2; //@line 89 "stringio.c"
        var $39=$self_addr; //@line 89 "stringio.c"
        var $40=$39+8; //@line 89 "stringio.c"
        var $41=HEAP[$40]; //@line 89 "stringio.c"
        var $42=$41; //@line 89 "stringio.c"
        var $43=_PyMem_Realloc($42, $38); //@line 89 "stringio.c"
        var $44=$43; //@line 89 "stringio.c"
        $new_buf=$44; //@line 89 "stringio.c"
        var $45=$new_buf; //@line 91 "stringio.c"
        var $46=($45)==0; //@line 91 "stringio.c"
        if ($46) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 91 "stringio.c"
      case 15: // $bb14
        var $47=_PyErr_NoMemory(); //@line 92 "stringio.c"
        $0=-1; //@line 93 "stringio.c"
        __label__ = 18; break; //@line 93 "stringio.c"
      case 16: // $bb15
        var $48=$self_addr; //@line 95 "stringio.c"
        var $49=$48+20; //@line 95 "stringio.c"
        var $50=$alloc; //@line 95 "stringio.c"
        HEAP[$49]=$50; //@line 95 "stringio.c"
        var $51=$self_addr; //@line 96 "stringio.c"
        var $52=$51+8; //@line 96 "stringio.c"
        var $53=$new_buf; //@line 96 "stringio.c"
        HEAP[$52]=$53; //@line 96 "stringio.c"
        $0=0; //@line 98 "stringio.c"
        __label__ = 18; break; //@line 98 "stringio.c"
      case 17: // $overflow
        var $54=HEAP[_PyExc_OverflowError]; //@line 101 "stringio.c"
        _PyErr_SetString($54, __str2321); //@line 101 "stringio.c"
        $0=-1; //@line 103 "stringio.c"
        __label__ = 18; break; //@line 103 "stringio.c"
      case 18: // $bb16
        var $55=$0; //@line 76 "stringio.c"
        $retval=$55; //@line 76 "stringio.c"
        var $retval17=$retval; //@line 76 "stringio.c"
        ;
        return $retval17; //@line 76 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _write_str($self, $obj) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $obj_addr;
        var $retval;
        var $0;
        var $str;
        var $len;
        var $decoded;
        var $translated;
        $self_addr=$self;
        $obj_addr=$obj;
        $decoded=0; //@line 113 "stringio.c"
        var $1=$self_addr; //@line 114 "stringio.c"
        var $2=$1+8; //@line 114 "stringio.c"
        var $3=HEAP[$2]; //@line 114 "stringio.c"
        var $4=($3)==0; //@line 114 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 114 "stringio.c"
      case 1: // $bb
        ___assert_fail(__str319, __str1320, 114, ___PRETTY_FUNCTION___8484); //@line 114 "stringio.c"
        throw "Reached an unreachable!" //@line 114 "stringio.c"
      case 2: // $bb1
        var $5=$self_addr; //@line 115 "stringio.c"
        var $6=$5+12; //@line 115 "stringio.c"
        var $7=HEAP[$6]; //@line 115 "stringio.c"
        var $8=($7) < 0; //@line 115 "stringio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 115 "stringio.c"
      case 3: // $bb2
        ___assert_fail(__str3322, __str1320, 115, ___PRETTY_FUNCTION___8484); //@line 115 "stringio.c"
        throw "Reached an unreachable!" //@line 115 "stringio.c"
      case 4: // $bb3
        var $9=$self_addr; //@line 117 "stringio.c"
        var $10=$9+28; //@line 117 "stringio.c"
        var $11=HEAP[$10]; //@line 117 "stringio.c"
        var $12=($11)!=0; //@line 117 "stringio.c"
        if ($12) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 117 "stringio.c"
      case 5: // $bb4
        var $13=$self_addr; //@line 118 "stringio.c"
        var $14=$13+28; //@line 118 "stringio.c"
        var $15=HEAP[$14]; //@line 118 "stringio.c"
        var $16=$obj_addr; //@line 118 "stringio.c"
        var $17=__PyIncrementalNewlineDecoder_decode($15, $16, 1); //@line 118 "stringio.c"
        $decoded=$17; //@line 118 "stringio.c"
        __label__ = 7; break; //@line 118 "stringio.c"
      case 6: // $bb5
        var $18=$obj_addr; //@line 122 "stringio.c"
        $decoded=$18; //@line 122 "stringio.c"
        var $19=$decoded; //@line 123 "stringio.c"
        var $20=$19; //@line 123 "stringio.c"
        var $21=HEAP[$20]; //@line 123 "stringio.c"
        var $22=($21) + 1; //@line 123 "stringio.c"
        var $23=$decoded; //@line 123 "stringio.c"
        var $24=$23; //@line 123 "stringio.c"
        HEAP[$24]=$22; //@line 123 "stringio.c"
        __label__ = 7; break; //@line 123 "stringio.c"
      case 7: // $bb6
        var $25=$self_addr; //@line 125 "stringio.c"
        var $26=$25+36; //@line 125 "stringio.c"
        var $27=HEAP[$26]; //@line 125 "stringio.c"
        var $28=($27)!=0; //@line 125 "stringio.c"
        if ($28) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 125 "stringio.c"
      case 8: // $bb7
        var $29=$self_addr; //@line 127 "stringio.c"
        var $30=$29+36; //@line 127 "stringio.c"
        var $31=HEAP[$30]; //@line 127 "stringio.c"
        var $32=HEAP[__PyIO_str_nl]; //@line 127 "stringio.c"
        var $33=$decoded; //@line 127 "stringio.c"
        var $34=_PyUnicodeUCS2_Replace($33, $32, $31, -1); //@line 127 "stringio.c"
        $translated=$34; //@line 127 "stringio.c"
        var $35=$decoded; //@line 128 "stringio.c"
        var $36=$35; //@line 128 "stringio.c"
        var $37=HEAP[$36]; //@line 128 "stringio.c"
        var $38=($37) - 1; //@line 128 "stringio.c"
        var $39=$decoded; //@line 128 "stringio.c"
        var $40=$39; //@line 128 "stringio.c"
        HEAP[$40]=$38; //@line 128 "stringio.c"
        var $41=$decoded; //@line 128 "stringio.c"
        var $42=$41; //@line 128 "stringio.c"
        var $43=HEAP[$42]; //@line 128 "stringio.c"
        var $44=($43)==0; //@line 128 "stringio.c"
        if ($44) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 128 "stringio.c"
      case 9: // $bb8
        var $45=$decoded; //@line 128 "stringio.c"
        var $46=$45+4; //@line 128 "stringio.c"
        var $47=HEAP[$46]; //@line 128 "stringio.c"
        var $48=$47+24; //@line 128 "stringio.c"
        var $49=HEAP[$48]; //@line 128 "stringio.c"
        var $50=$decoded; //@line 128 "stringio.c"
        FUNCTION_TABLE[$49]($50); //@line 128 "stringio.c"
        __label__ = 10; break; //@line 128 "stringio.c"
      case 10: // $bb9
        var $51=$translated; //@line 129 "stringio.c"
        $decoded=$51; //@line 129 "stringio.c"
        __lastLabel__ = 10; __label__ = 12; break; //@line 129 "stringio.c"
      case 11: // $bb10thread_pre_split
        var $_pr=$decoded;
        __lastLabel__ = 11; __label__ = 12; break;
      case 12: // $bb10
        var $52=__lastLabel__ == 11 ? $_pr : ($51);
        var $53=($52)==0; //@line 131 "stringio.c"
        if ($53) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 131 "stringio.c"
      case 13: // $bb11
        $0=-1; //@line 132 "stringio.c"
        __label__ = 33; break; //@line 132 "stringio.c"
      case 14: // $bb12
        var $54=$decoded; //@line 134 "stringio.c"
        var $55=$54+4; //@line 134 "stringio.c"
        var $56=HEAP[$55]; //@line 134 "stringio.c"
        var $57=$56+84; //@line 134 "stringio.c"
        var $58=HEAP[$57]; //@line 134 "stringio.c"
        var $59=($58) & 268435456; //@line 134 "stringio.c"
        var $60=($59)==0; //@line 134 "stringio.c"
        if ($60) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 134 "stringio.c"
      case 15: // $bb13
        ___assert_fail(__str4323, __str1320, 134, ___PRETTY_FUNCTION___8484); //@line 134 "stringio.c"
        throw "Reached an unreachable!" //@line 134 "stringio.c"
      case 16: // $bb14
        var $61=$decoded; //@line 135 "stringio.c"
        var $62=$61; //@line 135 "stringio.c"
        var $63=$62+12; //@line 135 "stringio.c"
        var $64=HEAP[$63]; //@line 135 "stringio.c"
        $str=$64; //@line 135 "stringio.c"
        var $65=$decoded; //@line 136 "stringio.c"
        var $66=$65; //@line 136 "stringio.c"
        var $67=$66+8; //@line 136 "stringio.c"
        var $68=HEAP[$67]; //@line 136 "stringio.c"
        $len=$68; //@line 136 "stringio.c"
        var $69=$len; //@line 138 "stringio.c"
        var $70=($69) < 0; //@line 138 "stringio.c"
        if ($70) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 138 "stringio.c"
      case 17: // $bb15
        ___assert_fail(__str5324, __str1320, 138, ___PRETTY_FUNCTION___8484); //@line 138 "stringio.c"
        throw "Reached an unreachable!" //@line 138 "stringio.c"
      case 18: // $bb16
        var $71=$self_addr; //@line 143 "stringio.c"
        var $72=$71+12; //@line 143 "stringio.c"
        var $73=HEAP[$72]; //@line 143 "stringio.c"
        var $74=$len; //@line 143 "stringio.c"
        var $75=2147483647 - ($74); //@line 143 "stringio.c"
        var $76=($73) > ($75); //@line 143 "stringio.c"
        if ($76) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 143 "stringio.c"
      case 19: // $bb17
        var $77=HEAP[_PyExc_OverflowError]; //@line 144 "stringio.c"
        _PyErr_SetString($77, __str6325); //@line 144 "stringio.c"
        __label__ = 29; break; //@line 144 "stringio.c"
      case 20: // $bb18
        var $78=$self_addr; //@line 148 "stringio.c"
        var $79=$78+12; //@line 148 "stringio.c"
        var $80=HEAP[$79]; //@line 148 "stringio.c"
        var $81=$len; //@line 148 "stringio.c"
        var $82=($81) + ($80); //@line 148 "stringio.c"
        var $83=$self_addr; //@line 148 "stringio.c"
        var $84=$83+16; //@line 148 "stringio.c"
        var $85=HEAP[$84]; //@line 148 "stringio.c"
        var $86=($82) > ($85); //@line 148 "stringio.c"
        if ($86) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 148 "stringio.c"
      case 21: // $bb19
        var $87=$self_addr; //@line 149 "stringio.c"
        var $88=$87+12; //@line 149 "stringio.c"
        var $89=HEAP[$88]; //@line 149 "stringio.c"
        var $90=$len; //@line 149 "stringio.c"
        var $91=($90) + ($89); //@line 149 "stringio.c"
        var $92=$self_addr; //@line 149 "stringio.c"
        var $93=_resize_buffer373($92, $91); //@line 149 "stringio.c"
        var $94=($93) < 0; //@line 149 "stringio.c"
        if ($94) { __label__ = 29; break; } else { __label__ = 22; break; } //@line 149 "stringio.c"
      case 22: // $bb20
        var $95=$self_addr; //@line 153 "stringio.c"
        var $96=$95+12; //@line 153 "stringio.c"
        var $97=HEAP[$96]; //@line 153 "stringio.c"
        var $98=$self_addr; //@line 153 "stringio.c"
        var $99=$98+16; //@line 153 "stringio.c"
        var $100=HEAP[$99]; //@line 153 "stringio.c"
        var $101=($97) > ($100); //@line 153 "stringio.c"
        if ($101) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 153 "stringio.c"
      case 23: // $bb21
        var $102=$self_addr; //@line 163 "stringio.c"
        var $103=$102+12; //@line 163 "stringio.c"
        var $104=HEAP[$103]; //@line 163 "stringio.c"
        var $105=$self_addr; //@line 163 "stringio.c"
        var $106=$105+16; //@line 163 "stringio.c"
        var $107=HEAP[$106]; //@line 163 "stringio.c"
        var $108=($104) - ($107); //@line 163 "stringio.c"
        var $109=($108) * 2; //@line 163 "stringio.c"
        var $110=$self_addr; //@line 163 "stringio.c"
        var $111=$110+8; //@line 163 "stringio.c"
        var $112=HEAP[$111]; //@line 163 "stringio.c"
        var $113=$self_addr; //@line 163 "stringio.c"
        var $114=$113+16; //@line 163 "stringio.c"
        var $115=HEAP[$114]; //@line 163 "stringio.c"
        var $116=$112+2*$115; //@line 163 "stringio.c"
        var $117=$116; //@line 163 "stringio.c"
        _llvm_memset_p0i8_i32($117, 0, $109, 1, 0); //@line 163 "stringio.c"
        __label__ = 24; break; //@line 163 "stringio.c"
      case 24: // $bb22
        var $118=$len; //@line 169 "stringio.c"
        var $119=($118) * 2; //@line 169 "stringio.c"
        var $120=$self_addr; //@line 169 "stringio.c"
        var $121=$120+8; //@line 169 "stringio.c"
        var $122=HEAP[$121]; //@line 169 "stringio.c"
        var $123=$self_addr; //@line 169 "stringio.c"
        var $124=$123+12; //@line 169 "stringio.c"
        var $125=HEAP[$124]; //@line 169 "stringio.c"
        var $126=$122+2*$125; //@line 169 "stringio.c"
        var $127=$str; //@line 169 "stringio.c"
        var $128=$126; //@line 169 "stringio.c"
        var $129=$127; //@line 169 "stringio.c"
        _llvm_memcpy_p0i8_p0i8_i32($128, $129, $119, 1, 0); //@line 169 "stringio.c"
        var $130=$self_addr; //@line 170 "stringio.c"
        var $131=$130+12; //@line 170 "stringio.c"
        var $132=HEAP[$131]; //@line 170 "stringio.c"
        var $133=$len; //@line 170 "stringio.c"
        var $134=($133) + ($132); //@line 170 "stringio.c"
        var $135=$self_addr; //@line 170 "stringio.c"
        var $136=$135+12; //@line 170 "stringio.c"
        HEAP[$136]=$134; //@line 170 "stringio.c"
        var $137=$self_addr; //@line 173 "stringio.c"
        var $138=$137+16; //@line 173 "stringio.c"
        var $139=HEAP[$138]; //@line 173 "stringio.c"
        var $140=$self_addr; //@line 173 "stringio.c"
        var $141=$140+12; //@line 173 "stringio.c"
        var $142=HEAP[$141]; //@line 173 "stringio.c"
        var $143=($139) < ($142); //@line 173 "stringio.c"
        if ($143) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 173 "stringio.c"
      case 25: // $bb23
        var $144=$self_addr; //@line 174 "stringio.c"
        var $145=$144+12; //@line 174 "stringio.c"
        var $146=HEAP[$145]; //@line 174 "stringio.c"
        var $147=$self_addr; //@line 174 "stringio.c"
        var $148=$147+16; //@line 174 "stringio.c"
        HEAP[$148]=$146; //@line 174 "stringio.c"
        __label__ = 26; break; //@line 174 "stringio.c"
      case 26: // $bb24
        var $149=$decoded; //@line 177 "stringio.c"
        var $150=$149; //@line 177 "stringio.c"
        var $151=HEAP[$150]; //@line 177 "stringio.c"
        var $152=($151) - 1; //@line 177 "stringio.c"
        var $153=$decoded; //@line 177 "stringio.c"
        var $154=$153; //@line 177 "stringio.c"
        HEAP[$154]=$152; //@line 177 "stringio.c"
        var $155=$decoded; //@line 177 "stringio.c"
        var $156=$155; //@line 177 "stringio.c"
        var $157=HEAP[$156]; //@line 177 "stringio.c"
        var $158=($157)==0; //@line 177 "stringio.c"
        if ($158) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 177 "stringio.c"
      case 27: // $bb25
        var $159=$decoded; //@line 177 "stringio.c"
        var $160=$159+4; //@line 177 "stringio.c"
        var $161=HEAP[$160]; //@line 177 "stringio.c"
        var $162=$161+24; //@line 177 "stringio.c"
        var $163=HEAP[$162]; //@line 177 "stringio.c"
        var $164=$decoded; //@line 177 "stringio.c"
        FUNCTION_TABLE[$163]($164); //@line 177 "stringio.c"
        __label__ = 28; break; //@line 177 "stringio.c"
      case 28: // $bb26
        $0=0; //@line 178 "stringio.c"
        __label__ = 33; break; //@line 178 "stringio.c"
      case 29: // $fail
        var $165=$decoded; //@line 181 "stringio.c"
        var $166=($165)!=0; //@line 181 "stringio.c"
        if ($166) { __label__ = 30; break; } else { __label__ = 32; break; } //@line 181 "stringio.c"
      case 30: // $bb27
        var $167=$decoded; //@line 181 "stringio.c"
        var $168=$167; //@line 181 "stringio.c"
        var $169=HEAP[$168]; //@line 181 "stringio.c"
        var $170=($169) - 1; //@line 181 "stringio.c"
        var $171=$decoded; //@line 181 "stringio.c"
        var $172=$171; //@line 181 "stringio.c"
        HEAP[$172]=$170; //@line 181 "stringio.c"
        var $173=$decoded; //@line 181 "stringio.c"
        var $174=$173; //@line 181 "stringio.c"
        var $175=HEAP[$174]; //@line 181 "stringio.c"
        var $176=($175)==0; //@line 181 "stringio.c"
        if ($176) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 181 "stringio.c"
      case 31: // $bb28
        var $177=$decoded; //@line 181 "stringio.c"
        var $178=$177+4; //@line 181 "stringio.c"
        var $179=HEAP[$178]; //@line 181 "stringio.c"
        var $180=$179+24; //@line 181 "stringio.c"
        var $181=HEAP[$180]; //@line 181 "stringio.c"
        var $182=$decoded; //@line 181 "stringio.c"
        FUNCTION_TABLE[$181]($182); //@line 181 "stringio.c"
        __label__ = 32; break; //@line 181 "stringio.c"
      case 32: // $bb29
        $0=-1; //@line 182 "stringio.c"
        __label__ = 33; break; //@line 182 "stringio.c"
      case 33: // $bb30
        var $183=$0; //@line 132 "stringio.c"
        $retval=$183; //@line 132 "stringio.c"
        var $retval31=$retval; //@line 132 "stringio.c"
        ;
        return $retval31; //@line 132 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_getvalue($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        var $1=$self_addr; //@line 191 "stringio.c"
        var $2=$1+24; //@line 191 "stringio.c"
        var $3=HEAP[$2]; //@line 191 "stringio.c"
        var $4=($3) <= 0; //@line 191 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 191 "stringio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 191 "stringio.c"
        _PyErr_SetString($5, __str12); //@line 191 "stringio.c"
        $0=0; //@line 191 "stringio.c"
        __label__ = 5; break; //@line 191 "stringio.c"
      case 2: // $bb1
        var $6=$self_addr; //@line 192 "stringio.c"
        var $7=$6+25; //@line 192 "stringio.c"
        var $8=HEAP[$7]; //@line 192 "stringio.c"
        var $9=($8)!=0; //@line 192 "stringio.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 192 "stringio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 192 "stringio.c"
        _PyErr_SetString($10, __str8327); //@line 192 "stringio.c"
        $0=0; //@line 192 "stringio.c"
        __label__ = 5; break; //@line 192 "stringio.c"
      case 4: // $bb3
        var $11=$self_addr; //@line 193 "stringio.c"
        var $12=$11+16; //@line 193 "stringio.c"
        var $13=HEAP[$12]; //@line 193 "stringio.c"
        var $14=$self_addr; //@line 193 "stringio.c"
        var $15=$14+8; //@line 193 "stringio.c"
        var $16=HEAP[$15]; //@line 193 "stringio.c"
        var $17=_PyUnicodeUCS2_FromUnicode($16, $13); //@line 193 "stringio.c"
        $0=$17; //@line 193 "stringio.c"
        __label__ = 5; break; //@line 193 "stringio.c"
      case 5: // $bb4
        var $18=$0; //@line 191 "stringio.c"
        $retval=$18; //@line 191 "stringio.c"
        var $retval5=$retval; //@line 191 "stringio.c"
        ;
        return $retval5; //@line 191 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_tell($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        var $1=$self_addr; //@line 202 "stringio.c"
        var $2=$1+24; //@line 202 "stringio.c"
        var $3=HEAP[$2]; //@line 202 "stringio.c"
        var $4=($3) <= 0; //@line 202 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 202 "stringio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 202 "stringio.c"
        _PyErr_SetString($5, __str12); //@line 202 "stringio.c"
        $0=0; //@line 202 "stringio.c"
        __label__ = 5; break; //@line 202 "stringio.c"
      case 2: // $bb1
        var $6=$self_addr; //@line 203 "stringio.c"
        var $7=$6+25; //@line 203 "stringio.c"
        var $8=HEAP[$7]; //@line 203 "stringio.c"
        var $9=($8)!=0; //@line 203 "stringio.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 203 "stringio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 203 "stringio.c"
        _PyErr_SetString($10, __str8327); //@line 203 "stringio.c"
        $0=0; //@line 203 "stringio.c"
        __label__ = 5; break; //@line 203 "stringio.c"
      case 4: // $bb3
        var $11=$self_addr; //@line 204 "stringio.c"
        var $12=$11+12; //@line 204 "stringio.c"
        var $13=HEAP[$12]; //@line 204 "stringio.c"
        var $14=_PyLong_FromSsize_t($13); //@line 204 "stringio.c"
        $0=$14; //@line 204 "stringio.c"
        __label__ = 5; break; //@line 204 "stringio.c"
      case 5: // $bb4
        var $15=$0; //@line 202 "stringio.c"
        $retval=$15; //@line 202 "stringio.c"
        var $retval5=$retval; //@line 202 "stringio.c"
        ;
        return $retval5; //@line 202 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_read($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $size;
        var $n;
        var $output;
        var $arg=__stackBase__;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$arg]=__Py_NoneStruct; //@line 218 "stringio.c"
        var $1=$self_addr; //@line 220 "stringio.c"
        var $2=$1+24; //@line 220 "stringio.c"
        var $3=HEAP[$2]; //@line 220 "stringio.c"
        var $4=($3) <= 0; //@line 220 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 220 "stringio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 220 "stringio.c"
        _PyErr_SetString($5, __str12); //@line 220 "stringio.c"
        $0=0; //@line 220 "stringio.c"
        __label__ = 18; break; //@line 220 "stringio.c"
      case 2: // $bb1
        var $6=$args_addr; //@line 221 "stringio.c"
        var $7=__PyArg_ParseTuple_SizeT($6, __str9328, allocate([$arg,0,0,0], ["%struct.PyObject**",0,0,0], ALLOC_STACK)); //@line 221 "stringio.c"
        var $8=($7)==0; //@line 221 "stringio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 221 "stringio.c"
      case 3: // $bb2
        $0=0; //@line 222 "stringio.c"
        __label__ = 18; break; //@line 222 "stringio.c"
      case 4: // $bb3
        var $9=$self_addr; //@line 223 "stringio.c"
        var $10=$9+25; //@line 223 "stringio.c"
        var $11=HEAP[$10]; //@line 223 "stringio.c"
        var $12=($11)!=0; //@line 223 "stringio.c"
        if ($12) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 223 "stringio.c"
      case 5: // $bb4
        var $13=HEAP[_PyExc_ValueError]; //@line 223 "stringio.c"
        _PyErr_SetString($13, __str8327); //@line 223 "stringio.c"
        $0=0; //@line 223 "stringio.c"
        __label__ = 18; break; //@line 223 "stringio.c"
      case 6: // $bb5
        var $14=HEAP[$arg]; //@line 225 "stringio.c"
        var $15=_PyNumber_Check($14); //@line 225 "stringio.c"
        var $16=($15)!=0; //@line 225 "stringio.c"
        if ($16) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 225 "stringio.c"
      case 7: // $bb6
        var $17=HEAP[_PyExc_OverflowError]; //@line 226 "stringio.c"
        var $18=HEAP[$arg]; //@line 226 "stringio.c"
        var $19=_PyNumber_AsSsize_t($18, $17); //@line 226 "stringio.c"
        $size=$19; //@line 226 "stringio.c"
        var $20=$size; //@line 227 "stringio.c"
        var $21=($20)==-1; //@line 227 "stringio.c"
        if ($21) { __label__ = 8; break; } else { __label__ = 13; break; } //@line 227 "stringio.c"
      case 8: // $bb7
        var $22=_PyErr_Occurred(); //@line 227 "stringio.c"
        var $23=($22)!=0; //@line 227 "stringio.c"
        if ($23) { __label__ = 9; break; } else { __label__ = 13; break; } //@line 227 "stringio.c"
      case 9: // $bb8
        $0=0; //@line 228 "stringio.c"
        __label__ = 18; break; //@line 228 "stringio.c"
      case 10: // $bb10
        var $24=HEAP[$arg]; //@line 230 "stringio.c"
        var $25=($24)==(__Py_NoneStruct); //@line 230 "stringio.c"
        if ($25) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 230 "stringio.c"
      case 11: // $bb11
        $size=-1; //@line 232 "stringio.c"
        __label__ = 13; break; //@line 232 "stringio.c"
      case 12: // $bb12
        var $26=HEAP[$arg]; //@line 235 "stringio.c"
        var $27=$26+4; //@line 235 "stringio.c"
        var $28=HEAP[$27]; //@line 235 "stringio.c"
        var $29=$28+12; //@line 235 "stringio.c"
        var $30=HEAP[$29]; //@line 235 "stringio.c"
        var $31=HEAP[_PyExc_TypeError]; //@line 235 "stringio.c"
        var $32=_PyErr_Format($31, __str10329, allocate([$30,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 235 "stringio.c"
        $0=0; //@line 237 "stringio.c"
        __label__ = 18; break; //@line 237 "stringio.c"
      case 13: // $bb13
        var $33=$self_addr; //@line 241 "stringio.c"
        var $34=$33+16; //@line 241 "stringio.c"
        var $35=HEAP[$34]; //@line 241 "stringio.c"
        var $36=$self_addr; //@line 241 "stringio.c"
        var $37=$36+12; //@line 241 "stringio.c"
        var $38=HEAP[$37]; //@line 241 "stringio.c"
        var $39=($35) - ($38); //@line 241 "stringio.c"
        $n=$39; //@line 241 "stringio.c"
        var $40=$size; //@line 242 "stringio.c"
        var $41=($40) < 0; //@line 242 "stringio.c"
        if ($41) { __lastLabel__ = 13; __label__ = 15; break; } else { __lastLabel__ = 13; __label__ = 14; break; } //@line 242 "stringio.c"
      case 14: // $bb14
        var $42=$size; //@line 242 "stringio.c"
        var $43=$n; //@line 242 "stringio.c"
        var $44=($42) > ($43); //@line 242 "stringio.c"
        if ($44) { __lastLabel__ = 14; __label__ = 15; break; } else { __lastLabel__ = 14; __label__ = 17; break; } //@line 242 "stringio.c"
      case 15: // $bb15
        var $45=__lastLabel__ == 14 ? $43 : ($39);
        $size=$45; //@line 243 "stringio.c"
        var $46=($45) < 0; //@line 244 "stringio.c"
        if ($46) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 244 "stringio.c"
      case 16: // $bb16
        $size=0; //@line 245 "stringio.c"
        __label__ = 17; break; //@line 245 "stringio.c"
      case 17: // $bb17
        var $47=$self_addr; //@line 248 "stringio.c"
        var $48=$47+8; //@line 248 "stringio.c"
        var $49=HEAP[$48]; //@line 248 "stringio.c"
        var $50=$self_addr; //@line 248 "stringio.c"
        var $51=$50+12; //@line 248 "stringio.c"
        var $52=HEAP[$51]; //@line 248 "stringio.c"
        var $53=$49+2*$52; //@line 248 "stringio.c"
        $output=$53; //@line 248 "stringio.c"
        var $54=$self_addr; //@line 249 "stringio.c"
        var $55=$54+12; //@line 249 "stringio.c"
        var $56=HEAP[$55]; //@line 249 "stringio.c"
        var $57=$size; //@line 249 "stringio.c"
        var $58=($57) + ($56); //@line 249 "stringio.c"
        var $59=$self_addr; //@line 249 "stringio.c"
        var $60=$59+12; //@line 249 "stringio.c"
        HEAP[$60]=$58; //@line 249 "stringio.c"
        var $61=$output; //@line 250 "stringio.c"
        var $62=$size; //@line 250 "stringio.c"
        var $63=_PyUnicodeUCS2_FromUnicode($61, $62); //@line 250 "stringio.c"
        $0=$63; //@line 250 "stringio.c"
        __label__ = 18; break; //@line 250 "stringio.c"
      case 18: // $bb18
        var $64=$0; //@line 220 "stringio.c"
        $retval=$64; //@line 220 "stringio.c"
        var $retval19=$retval; //@line 220 "stringio.c"
        STACKTOP = __stackBase__;
        return $retval19; //@line 220 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __stringio_readline($self, $limit) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $limit_addr;
        var $retval;
        var $0;
        var $start;
        var $end;
        var $old_char;
        var $len;
        var $consumed=__stackBase__;
        $self_addr=$self;
        $limit_addr=$limit;
        var $1=$self_addr; //@line 261 "stringio.c"
        var $2=$1+12; //@line 261 "stringio.c"
        var $3=HEAP[$2]; //@line 261 "stringio.c"
        var $4=$self_addr; //@line 261 "stringio.c"
        var $5=$4+16; //@line 261 "stringio.c"
        var $6=HEAP[$5]; //@line 261 "stringio.c"
        var $7=($3) >= ($6); //@line 261 "stringio.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 261 "stringio.c"
      case 1: // $bb
        var $8=_PyUnicodeUCS2_FromString(__str11330); //@line 262 "stringio.c"
        $0=$8; //@line 262 "stringio.c"
        __label__ = 8; break; //@line 262 "stringio.c"
      case 2: // $bb1
        var $9=$self_addr; //@line 264 "stringio.c"
        var $10=$9+8; //@line 264 "stringio.c"
        var $11=HEAP[$10]; //@line 264 "stringio.c"
        var $12=$self_addr; //@line 264 "stringio.c"
        var $13=$12+12; //@line 264 "stringio.c"
        var $14=HEAP[$13]; //@line 264 "stringio.c"
        var $15=$11+2*$14; //@line 264 "stringio.c"
        $start=$15; //@line 264 "stringio.c"
        var $16=$limit_addr; //@line 265 "stringio.c"
        var $17=($16) < 0; //@line 265 "stringio.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 265 "stringio.c"
      case 3: // $bb2
        var $18=$self_addr; //@line 265 "stringio.c"
        var $19=$18+16; //@line 265 "stringio.c"
        var $20=HEAP[$19]; //@line 265 "stringio.c"
        var $21=$self_addr; //@line 265 "stringio.c"
        var $22=$21+12; //@line 265 "stringio.c"
        var $23=HEAP[$22]; //@line 265 "stringio.c"
        var $24=($20) - ($23); //@line 265 "stringio.c"
        var $25=$limit_addr; //@line 265 "stringio.c"
        var $26=($24) < ($25); //@line 265 "stringio.c"
        if ($26) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 265 "stringio.c"
      case 4: // $bb3
        var $27=$self_addr; //@line 266 "stringio.c"
        var $28=$27+16; //@line 266 "stringio.c"
        var $29=HEAP[$28]; //@line 266 "stringio.c"
        var $30=$self_addr; //@line 266 "stringio.c"
        var $31=$30+12; //@line 266 "stringio.c"
        var $32=HEAP[$31]; //@line 266 "stringio.c"
        var $33=($29) - ($32); //@line 266 "stringio.c"
        $limit_addr=$33; //@line 266 "stringio.c"
        __label__ = 5; break; //@line 266 "stringio.c"
      case 5: // $bb4
        var $34=$start; //@line 268 "stringio.c"
        var $35=$limit_addr; //@line 268 "stringio.c"
        var $36=$34+2*$35; //@line 268 "stringio.c"
        $end=$36; //@line 268 "stringio.c"
        var $37=$end; //@line 269 "stringio.c"
        var $38=HEAP[$37]; //@line 269 "stringio.c"
        $old_char=$38; //@line 269 "stringio.c"
        var $39=$end; //@line 270 "stringio.c"
        HEAP[$39]=0; //@line 270 "stringio.c"
        var $40=$self_addr; //@line 271 "stringio.c"
        var $41=$40+32; //@line 271 "stringio.c"
        var $42=HEAP[$41]; //@line 271 "stringio.c"
        var $43=$self_addr; //@line 271 "stringio.c"
        var $44=$43+26; //@line 271 "stringio.c"
        var $45=HEAP[$44]; //@line 271 "stringio.c"
        var $46=($45); //@line 271 "stringio.c"
        var $47=$self_addr; //@line 271 "stringio.c"
        var $48=$47+27; //@line 271 "stringio.c"
        var $49=HEAP[$48]; //@line 271 "stringio.c"
        var $50=($49); //@line 271 "stringio.c"
        var $51=$start; //@line 271 "stringio.c"
        var $52=$end; //@line 271 "stringio.c"
        var $53=__PyIO_find_line_ending($50, $46, $42, $51, $52, $consumed); //@line 271 "stringio.c"
        $len=$53; //@line 271 "stringio.c"
        var $54=$end; //@line 274 "stringio.c"
        var $55=$old_char; //@line 274 "stringio.c"
        HEAP[$54]=$55; //@line 274 "stringio.c"
        var $56=$len; //@line 277 "stringio.c"
        var $57=($56) < 0; //@line 277 "stringio.c"
        if ($57) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 277 "stringio.c"
      case 6: // $bb5
        var $58=$limit_addr; //@line 278 "stringio.c"
        $len=$58; //@line 278 "stringio.c"
        __label__ = 7; break; //@line 278 "stringio.c"
      case 7: // $bb6
        var $59=$self_addr; //@line 279 "stringio.c"
        var $60=$59+12; //@line 279 "stringio.c"
        var $61=HEAP[$60]; //@line 279 "stringio.c"
        var $62=$len; //@line 279 "stringio.c"
        var $63=($62) + ($61); //@line 279 "stringio.c"
        var $64=$self_addr; //@line 279 "stringio.c"
        var $65=$64+12; //@line 279 "stringio.c"
        HEAP[$65]=$63; //@line 279 "stringio.c"
        var $66=$start; //@line 280 "stringio.c"
        var $67=$len; //@line 280 "stringio.c"
        var $68=_PyUnicodeUCS2_FromUnicode($66, $67); //@line 280 "stringio.c"
        $0=$68; //@line 280 "stringio.c"
        __label__ = 8; break; //@line 280 "stringio.c"
      case 8: // $bb7
        var $69=$0; //@line 262 "stringio.c"
        $retval=$69; //@line 262 "stringio.c"
        var $retval8=$retval; //@line 262 "stringio.c"
        STACKTOP = __stackBase__;
        return $retval8; //@line 262 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_readline($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $arg=__stackBase__;
        var $limit;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$arg]=__Py_NoneStruct; //@line 291 "stringio.c"
        $limit=-1; //@line 292 "stringio.c"
        var $1=$self_addr; //@line 294 "stringio.c"
        var $2=$1+24; //@line 294 "stringio.c"
        var $3=HEAP[$2]; //@line 294 "stringio.c"
        var $4=($3) <= 0; //@line 294 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 294 "stringio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 294 "stringio.c"
        _PyErr_SetString($5, __str12); //@line 294 "stringio.c"
        $0=0; //@line 294 "stringio.c"
        __label__ = 13; break; //@line 294 "stringio.c"
      case 2: // $bb1
        var $6=$args_addr; //@line 295 "stringio.c"
        var $7=__PyArg_ParseTuple_SizeT($6, __str12331, allocate([$arg,0,0,0], ["%struct.PyObject**",0,0,0], ALLOC_STACK)); //@line 295 "stringio.c"
        var $8=($7)==0; //@line 295 "stringio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 295 "stringio.c"
      case 3: // $bb2
        $0=0; //@line 296 "stringio.c"
        __label__ = 13; break; //@line 296 "stringio.c"
      case 4: // $bb3
        var $9=$self_addr; //@line 297 "stringio.c"
        var $10=$9+25; //@line 297 "stringio.c"
        var $11=HEAP[$10]; //@line 297 "stringio.c"
        var $12=($11)!=0; //@line 297 "stringio.c"
        if ($12) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 297 "stringio.c"
      case 5: // $bb4
        var $13=HEAP[_PyExc_ValueError]; //@line 297 "stringio.c"
        _PyErr_SetString($13, __str8327); //@line 297 "stringio.c"
        $0=0; //@line 297 "stringio.c"
        __label__ = 13; break; //@line 297 "stringio.c"
      case 6: // $bb5
        var $14=HEAP[$arg]; //@line 299 "stringio.c"
        var $15=_PyNumber_Check($14); //@line 299 "stringio.c"
        var $16=($15)!=0; //@line 299 "stringio.c"
        if ($16) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 299 "stringio.c"
      case 7: // $bb6
        var $17=HEAP[_PyExc_OverflowError]; //@line 300 "stringio.c"
        var $18=HEAP[$arg]; //@line 300 "stringio.c"
        var $19=_PyNumber_AsSsize_t($18, $17); //@line 300 "stringio.c"
        $limit=$19; //@line 300 "stringio.c"
        var $20=$limit; //@line 301 "stringio.c"
        var $21=($20)==-1; //@line 301 "stringio.c"
        if ($21) { __label__ = 8; break; } else { __label__ = 12; break; } //@line 301 "stringio.c"
      case 8: // $bb7
        var $22=_PyErr_Occurred(); //@line 301 "stringio.c"
        var $23=($22)!=0; //@line 301 "stringio.c"
        if ($23) { __label__ = 9; break; } else { __label__ = 12; break; } //@line 301 "stringio.c"
      case 9: // $bb8
        $0=0; //@line 302 "stringio.c"
        __label__ = 13; break; //@line 302 "stringio.c"
      case 10: // $bb10
        var $24=HEAP[$arg]; //@line 304 "stringio.c"
        var $25=($24)!=(__Py_NoneStruct); //@line 304 "stringio.c"
        if ($25) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 304 "stringio.c"
      case 11: // $bb11
        var $26=HEAP[$arg]; //@line 305 "stringio.c"
        var $27=$26+4; //@line 305 "stringio.c"
        var $28=HEAP[$27]; //@line 305 "stringio.c"
        var $29=$28+12; //@line 305 "stringio.c"
        var $30=HEAP[$29]; //@line 305 "stringio.c"
        var $31=HEAP[_PyExc_TypeError]; //@line 305 "stringio.c"
        var $32=_PyErr_Format($31, __str10329, allocate([$30,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 305 "stringio.c"
        $0=0; //@line 307 "stringio.c"
        __label__ = 13; break; //@line 307 "stringio.c"
      case 12: // $bb12
        var $33=$self_addr; //@line 309 "stringio.c"
        var $34=$limit; //@line 309 "stringio.c"
        var $35=__stringio_readline($33, $34); //@line 309 "stringio.c"
        $0=$35; //@line 309 "stringio.c"
        __label__ = 13; break; //@line 309 "stringio.c"
      case 13: // $bb13
        var $36=$0; //@line 294 "stringio.c"
        $retval=$36; //@line 294 "stringio.c"
        var $retval14=$retval; //@line 294 "stringio.c"
        STACKTOP = __stackBase__;
        return $retval14; //@line 294 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_iternext($self) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $line;
        $self_addr=$self;
        var $1=$self_addr; //@line 317 "stringio.c"
        var $2=$1+24; //@line 317 "stringio.c"
        var $3=HEAP[$2]; //@line 317 "stringio.c"
        var $4=($3) <= 0; //@line 317 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 317 "stringio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 317 "stringio.c"
        _PyErr_SetString($5, __str12); //@line 317 "stringio.c"
        $0=0; //@line 317 "stringio.c"
        __label__ = 18; break; //@line 317 "stringio.c"
      case 2: // $bb1
        var $6=$self_addr; //@line 318 "stringio.c"
        var $7=$6+25; //@line 318 "stringio.c"
        var $8=HEAP[$7]; //@line 318 "stringio.c"
        var $9=($8)!=0; //@line 318 "stringio.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 318 "stringio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 318 "stringio.c"
        _PyErr_SetString($10, __str8327); //@line 318 "stringio.c"
        $0=0; //@line 318 "stringio.c"
        __label__ = 18; break; //@line 318 "stringio.c"
      case 4: // $bb3
        var $11=$self_addr; //@line 320 "stringio.c"
        var $12=$11; //@line 320 "stringio.c"
        var $13=$12+4; //@line 320 "stringio.c"
        var $14=HEAP[$13]; //@line 320 "stringio.c"
        var $15=($14)==(_PyStringIO_Type); //@line 320 "stringio.c"
        if ($15) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 320 "stringio.c"
      case 5: // $bb4
        var $16=$self_addr; //@line 322 "stringio.c"
        var $17=__stringio_readline($16, -1); //@line 322 "stringio.c"
        $line=$17; //@line 322 "stringio.c"
        __lastLabel__ = 5; __label__ = 11; break; //@line 322 "stringio.c"
      case 6: // $bb5
        var $18=HEAP[__PyIO_str_readline]; //@line 326 "stringio.c"
        var $19=$self_addr; //@line 326 "stringio.c"
        var $20=$19; //@line 326 "stringio.c"
        var $21=_PyObject_CallMethodObjArgs($20, $18, allocate(4, "i8*", ALLOC_STACK)); //@line 326 "stringio.c"
        $line=$21; //@line 326 "stringio.c"
        var $22=$line; //@line 328 "stringio.c"
        var $23=($22)!=0; //@line 328 "stringio.c"
        if ($23) { __label__ = 7; break; } else { __label__ = 12; break; } //@line 328 "stringio.c"
      case 7: // $bb6
        var $24=$line; //@line 328 "stringio.c"
        var $25=$24+4; //@line 328 "stringio.c"
        var $26=HEAP[$25]; //@line 328 "stringio.c"
        var $27=$26+84; //@line 328 "stringio.c"
        var $28=HEAP[$27]; //@line 328 "stringio.c"
        var $29=($28) & 268435456; //@line 328 "stringio.c"
        var $30=($29)==0; //@line 328 "stringio.c"
        var $31=$line; //@line 329 "stringio.c"
        if ($30) { __lastLabel__ = 7; __label__ = 8; break; } else { __lastLabel__ = 7; __label__ = 11; break; } //@line 328 "stringio.c"
      case 8: // $bb7
        var $32=$31+4; //@line 329 "stringio.c"
        var $33=HEAP[$32]; //@line 329 "stringio.c"
        var $34=$33+12; //@line 329 "stringio.c"
        var $35=HEAP[$34]; //@line 329 "stringio.c"
        var $36=HEAP[_PyExc_IOError]; //@line 329 "stringio.c"
        var $37=_PyErr_Format($36, __str13332, allocate([$35,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 329 "stringio.c"
        var $38=$line; //@line 332 "stringio.c"
        var $39=$38; //@line 332 "stringio.c"
        var $40=HEAP[$39]; //@line 332 "stringio.c"
        var $41=($40) - 1; //@line 332 "stringio.c"
        var $42=$line; //@line 332 "stringio.c"
        var $43=$42; //@line 332 "stringio.c"
        HEAP[$43]=$41; //@line 332 "stringio.c"
        var $44=$line; //@line 332 "stringio.c"
        var $45=$44; //@line 332 "stringio.c"
        var $46=HEAP[$45]; //@line 332 "stringio.c"
        var $47=($46)==0; //@line 332 "stringio.c"
        if ($47) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 332 "stringio.c"
      case 9: // $bb8
        var $48=$line; //@line 332 "stringio.c"
        var $49=$48+4; //@line 332 "stringio.c"
        var $50=HEAP[$49]; //@line 332 "stringio.c"
        var $51=$50+24; //@line 332 "stringio.c"
        var $52=HEAP[$51]; //@line 332 "stringio.c"
        var $53=$line; //@line 332 "stringio.c"
        FUNCTION_TABLE[$52]($53); //@line 332 "stringio.c"
        __label__ = 10; break; //@line 332 "stringio.c"
      case 10: // $bb9
        $0=0; //@line 333 "stringio.c"
        __label__ = 18; break; //@line 333 "stringio.c"
      case 11: // $bb10
        var $54=__lastLabel__ == 5 ? $17 : ($31);
        var $55=($54)==0; //@line 337 "stringio.c"
        if ($55) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 337 "stringio.c"
      case 12: // $bb11
        $0=0; //@line 338 "stringio.c"
        __label__ = 18; break; //@line 338 "stringio.c"
      case 13: // $bb12
        var $56=$line; //@line 340 "stringio.c"
        var $57=$56; //@line 340 "stringio.c"
        var $58=$57+8; //@line 340 "stringio.c"
        var $59=HEAP[$58]; //@line 340 "stringio.c"
        var $60=($59)==0; //@line 340 "stringio.c"
        var $61=$line; //@line 342 "stringio.c"
        if ($60) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 340 "stringio.c"
      case 14: // $bb13
        var $62=$61; //@line 342 "stringio.c"
        var $63=HEAP[$62]; //@line 342 "stringio.c"
        var $64=($63) - 1; //@line 342 "stringio.c"
        var $65=$line; //@line 342 "stringio.c"
        var $66=$65; //@line 342 "stringio.c"
        HEAP[$66]=$64; //@line 342 "stringio.c"
        var $67=$line; //@line 342 "stringio.c"
        var $68=$67; //@line 342 "stringio.c"
        var $69=HEAP[$68]; //@line 342 "stringio.c"
        var $70=($69)==0; //@line 342 "stringio.c"
        if ($70) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 342 "stringio.c"
      case 15: // $bb14
        var $71=$line; //@line 342 "stringio.c"
        var $72=$71+4; //@line 342 "stringio.c"
        var $73=HEAP[$72]; //@line 342 "stringio.c"
        var $74=$73+24; //@line 342 "stringio.c"
        var $75=HEAP[$74]; //@line 342 "stringio.c"
        var $76=$line; //@line 342 "stringio.c"
        FUNCTION_TABLE[$75]($76); //@line 342 "stringio.c"
        __label__ = 16; break; //@line 342 "stringio.c"
      case 16: // $bb15
        $0=0; //@line 343 "stringio.c"
        __label__ = 18; break; //@line 343 "stringio.c"
      case 17: // $bb16
        $0=$61; //@line 346 "stringio.c"
        __label__ = 18; break; //@line 346 "stringio.c"
      case 18: // $bb17
        var $77=$0; //@line 317 "stringio.c"
        $retval=$77; //@line 317 "stringio.c"
        var $retval18=$retval; //@line 317 "stringio.c"
        ;
        return $retval18; //@line 317 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_truncate($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $size;
        var $arg=__stackBase__;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$arg]=__Py_NoneStruct; //@line 360 "stringio.c"
        var $1=$self_addr; //@line 362 "stringio.c"
        var $2=$1+24; //@line 362 "stringio.c"
        var $3=HEAP[$2]; //@line 362 "stringio.c"
        var $4=($3) <= 0; //@line 362 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 362 "stringio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 362 "stringio.c"
        _PyErr_SetString($5, __str12); //@line 362 "stringio.c"
        $0=0; //@line 362 "stringio.c"
        __label__ = 21; break; //@line 362 "stringio.c"
      case 2: // $bb1
        var $6=$args_addr; //@line 363 "stringio.c"
        var $7=__PyArg_ParseTuple_SizeT($6, __str14333, allocate([$arg,0,0,0], ["%struct.PyObject**",0,0,0], ALLOC_STACK)); //@line 363 "stringio.c"
        var $8=($7)==0; //@line 363 "stringio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 363 "stringio.c"
      case 3: // $bb2
        $0=0; //@line 364 "stringio.c"
        __label__ = 21; break; //@line 364 "stringio.c"
      case 4: // $bb3
        var $9=$self_addr; //@line 365 "stringio.c"
        var $10=$9+25; //@line 365 "stringio.c"
        var $11=HEAP[$10]; //@line 365 "stringio.c"
        var $12=($11)!=0; //@line 365 "stringio.c"
        if ($12) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 365 "stringio.c"
      case 5: // $bb4
        var $13=HEAP[_PyExc_ValueError]; //@line 365 "stringio.c"
        _PyErr_SetString($13, __str8327); //@line 365 "stringio.c"
        $0=0; //@line 365 "stringio.c"
        __label__ = 21; break; //@line 365 "stringio.c"
      case 6: // $bb5
        var $14=HEAP[$arg]; //@line 367 "stringio.c"
        var $15=_PyNumber_Check($14); //@line 367 "stringio.c"
        var $16=($15)!=0; //@line 367 "stringio.c"
        if ($16) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 367 "stringio.c"
      case 7: // $bb6
        var $17=HEAP[_PyExc_OverflowError]; //@line 368 "stringio.c"
        var $18=HEAP[$arg]; //@line 368 "stringio.c"
        var $19=_PyNumber_AsSsize_t($18, $17); //@line 368 "stringio.c"
        $size=$19; //@line 368 "stringio.c"
        var $20=$size; //@line 369 "stringio.c"
        var $21=($20)==-1; //@line 369 "stringio.c"
        if ($21) { __lastLabel__ = 7; __label__ = 8; break; } else { __lastLabel__ = 7; __label__ = 14; break; } //@line 369 "stringio.c"
      case 8: // $bb7
        var $22=_PyErr_Occurred(); //@line 369 "stringio.c"
        var $23=($22)!=0; //@line 369 "stringio.c"
        if ($23) { __label__ = 9; break; } else { __label__ = 13; break; } //@line 369 "stringio.c"
      case 9: // $bb8
        $0=0; //@line 370 "stringio.c"
        __label__ = 21; break; //@line 370 "stringio.c"
      case 10: // $bb10
        var $24=HEAP[$arg]; //@line 372 "stringio.c"
        var $25=($24)==(__Py_NoneStruct); //@line 372 "stringio.c"
        if ($25) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 372 "stringio.c"
      case 11: // $bb11
        var $26=$self_addr; //@line 374 "stringio.c"
        var $27=$26+12; //@line 374 "stringio.c"
        var $28=HEAP[$27]; //@line 374 "stringio.c"
        $size=$28; //@line 374 "stringio.c"
        __lastLabel__ = 11; __label__ = 14; break; //@line 374 "stringio.c"
      case 12: // $bb12
        var $29=HEAP[$arg]; //@line 377 "stringio.c"
        var $30=$29+4; //@line 377 "stringio.c"
        var $31=HEAP[$30]; //@line 377 "stringio.c"
        var $32=$31+12; //@line 377 "stringio.c"
        var $33=HEAP[$32]; //@line 377 "stringio.c"
        var $34=HEAP[_PyExc_TypeError]; //@line 377 "stringio.c"
        var $35=_PyErr_Format($34, __str10329, allocate([$33,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 377 "stringio.c"
        $0=0; //@line 379 "stringio.c"
        __label__ = 21; break; //@line 379 "stringio.c"
      case 13: // $bb13thread_pre_split
        var $_pr=$size;
        __lastLabel__ = 13; __label__ = 14; break;
      case 14: // $bb13
        var $36=__lastLabel__ == 13 ? $_pr : (__lastLabel__ == 7 ? $20 : ($28));
        var $37=($36) < 0; //@line 382 "stringio.c"
        if ($37) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 382 "stringio.c"
      case 15: // $bb14
        var $38=HEAP[_PyExc_ValueError]; //@line 383 "stringio.c"
        var $39=$size; //@line 383 "stringio.c"
        var $40=_PyErr_Format($38, __str15334, allocate([$39,0,0,0], ["i32",0,0,0], ALLOC_STACK)); //@line 383 "stringio.c"
        $0=0; //@line 385 "stringio.c"
        __label__ = 21; break; //@line 385 "stringio.c"
      case 16: // $bb15
        var $41=$self_addr; //@line 388 "stringio.c"
        var $42=$41+16; //@line 388 "stringio.c"
        var $43=HEAP[$42]; //@line 388 "stringio.c"
        var $44=$size; //@line 388 "stringio.c"
        var $45=($43) > ($44); //@line 388 "stringio.c"
        if ($45) { __label__ = 17; break; } else { __label__ = 20; break; } //@line 388 "stringio.c"
      case 17: // $bb16
        var $46=$size; //@line 389 "stringio.c"
        var $47=$self_addr; //@line 389 "stringio.c"
        var $48=_resize_buffer373($47, $46); //@line 389 "stringio.c"
        var $49=($48) < 0; //@line 389 "stringio.c"
        if ($49) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 389 "stringio.c"
      case 18: // $bb17
        $0=0; //@line 390 "stringio.c"
        __label__ = 21; break; //@line 390 "stringio.c"
      case 19: // $bb18
        var $50=$self_addr; //@line 391 "stringio.c"
        var $51=$50+16; //@line 391 "stringio.c"
        var $52=$size; //@line 391 "stringio.c"
        HEAP[$51]=$52; //@line 391 "stringio.c"
        __label__ = 20; break; //@line 391 "stringio.c"
      case 20: // $bb19
        var $53=$size; //@line 394 "stringio.c"
        var $54=_PyLong_FromSsize_t($53); //@line 394 "stringio.c"
        $0=$54; //@line 394 "stringio.c"
        __label__ = 21; break; //@line 394 "stringio.c"
      case 21: // $bb20
        var $55=$0; //@line 362 "stringio.c"
        $retval=$55; //@line 362 "stringio.c"
        var $retval21=$retval; //@line 362 "stringio.c"
        STACKTOP = __stackBase__;
        return $retval21; //@line 362 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_seek($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $posobj=__stackBase__;
        var $pos;
        var $mode=__stackBase__+4;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$mode]=0; //@line 411 "stringio.c"
        var $1=$self_addr; //@line 413 "stringio.c"
        var $2=$1+24; //@line 413 "stringio.c"
        var $3=HEAP[$2]; //@line 413 "stringio.c"
        var $4=($3) <= 0; //@line 413 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 413 "stringio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 413 "stringio.c"
        _PyErr_SetString($5, __str12); //@line 413 "stringio.c"
        $0=0; //@line 413 "stringio.c"
        __label__ = 23; break; //@line 413 "stringio.c"
      case 2: // $bb1
        var $6=$args_addr; //@line 414 "stringio.c"
        var $7=__PyArg_ParseTuple_SizeT($6, __str16335, allocate([$posobj,0,0,0,$mode,0,0,0], ["%struct.PyObject**",0,0,0,"i32*",0,0,0], ALLOC_STACK)); //@line 414 "stringio.c"
        var $8=($7)==0; //@line 414 "stringio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 414 "stringio.c"
      case 3: // $bb2
        $0=0; //@line 415 "stringio.c"
        __label__ = 23; break; //@line 415 "stringio.c"
      case 4: // $bb3
        var $9=HEAP[_PyExc_OverflowError]; //@line 417 "stringio.c"
        var $10=HEAP[$posobj]; //@line 417 "stringio.c"
        var $11=_PyNumber_AsSsize_t($10, $9); //@line 417 "stringio.c"
        $pos=$11; //@line 417 "stringio.c"
        var $12=$pos; //@line 418 "stringio.c"
        var $13=($12)==-1; //@line 418 "stringio.c"
        if ($13) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 418 "stringio.c"
      case 5: // $bb4
        var $14=_PyErr_Occurred(); //@line 418 "stringio.c"
        var $15=($14)!=0; //@line 418 "stringio.c"
        if ($15) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 418 "stringio.c"
      case 6: // $bb5
        $0=0; //@line 419 "stringio.c"
        __label__ = 23; break; //@line 419 "stringio.c"
      case 7: // $bb6
        var $16=$self_addr; //@line 421 "stringio.c"
        var $17=$16+25; //@line 421 "stringio.c"
        var $18=HEAP[$17]; //@line 421 "stringio.c"
        var $19=($18)!=0; //@line 421 "stringio.c"
        if ($19) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 421 "stringio.c"
      case 8: // $bb7
        var $20=HEAP[_PyExc_ValueError]; //@line 421 "stringio.c"
        _PyErr_SetString($20, __str8327); //@line 421 "stringio.c"
        $0=0; //@line 421 "stringio.c"
        __label__ = 23; break; //@line 421 "stringio.c"
      case 9: // $bb8
        var $21=HEAP[$mode]; //@line 423 "stringio.c"
        var $22=($21)==0; //@line 423 "stringio.c"
        var $23=HEAP[$mode]; //@line 423 "stringio.c"
        var $24=($23)==1; //@line 423 "stringio.c"
        var $or_cond=($22) | ($24);
        var $25=HEAP[$mode]; //@line 423 "stringio.c"
        var $26=($25)==2; //@line 423 "stringio.c"
        var $or_cond3=($or_cond) | ($26);
        if ($or_cond3) { __label__ = 11; break; } else { __label__ = 10; break; } //@line 423 "stringio.c"
      case 10: // $bb11
        var $27=HEAP[$mode]; //@line 424 "stringio.c"
        var $28=HEAP[_PyExc_ValueError]; //@line 424 "stringio.c"
        var $29=_PyErr_Format($28, __str17336, allocate([$27,0,0,0], ["i32",0,0,0], ALLOC_STACK)); //@line 424 "stringio.c"
        $0=0; //@line 426 "stringio.c"
        __label__ = 23; break; //@line 426 "stringio.c"
      case 11: // $bb12
        var $30=$pos; //@line 428 "stringio.c"
        var $31=($30) >= 0; //@line 428 "stringio.c"
        var $_pr=HEAP[$mode];
        var $32=($_pr)!=0; //@line 433 "stringio.c"
        if ($31) { __label__ = 14; break; } else { __label__ = 12; break; } //@line 428 "stringio.c"
      case 12: // $bb13
        if ($32) { __label__ = 16; break; } else { __label__ = 13; break; } //@line 428 "stringio.c"
      case 13: // $bb14
        var $33=HEAP[_PyExc_ValueError]; //@line 429 "stringio.c"
        var $34=$pos; //@line 429 "stringio.c"
        var $35=_PyErr_Format($33, __str18337, allocate([$34,0,0,0], ["i32",0,0,0], ALLOC_STACK)); //@line 429 "stringio.c"
        $0=0; //@line 431 "stringio.c"
        __label__ = 23; break; //@line 431 "stringio.c"
      case 14: // $bb15
        if ($32) { __label__ = 16; break; } else { __label__ = 15; break; } //@line 433 "stringio.c"
      case 15: // $bb18_thread
        var $_pr5=HEAP[$mode];
        __lastLabel__ = 15; __label__ = 20; break;
      case 16: // $bb16
        var $36=$pos; //@line 433 "stringio.c"
        var $37=($36)!=0; //@line 433 "stringio.c"
        if ($37) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 433 "stringio.c"
      case 17: // $bb17
        var $38=HEAP[_PyExc_IOError]; //@line 434 "stringio.c"
        _PyErr_SetString($38, __str19338); //@line 434 "stringio.c"
        $0=0; //@line 436 "stringio.c"
        __label__ = 23; break; //@line 436 "stringio.c"
      case 18: // $bb18
        var $_pr4=HEAP[$mode];
        var $39=($_pr4)==1; //@line 442 "stringio.c"
        if ($39) { __lastLabel__ = 18; __label__ = 19; break; } else { __lastLabel__ = 18; __label__ = 20; break; } //@line 442 "stringio.c"
      case 19: // $bb19
        var $40=$self_addr; //@line 443 "stringio.c"
        var $41=$40+12; //@line 443 "stringio.c"
        var $42=HEAP[$41]; //@line 443 "stringio.c"
        $pos=$42; //@line 443 "stringio.c"
        __label__ = 22; break; //@line 443 "stringio.c"
      case 20: // $bb20
        var $43=__lastLabel__ == 15 ? $_pr5 : ($_pr4);
        var $44=($43)==2; //@line 445 "stringio.c"
        if ($44) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 445 "stringio.c"
      case 21: // $bb21
        var $45=$self_addr; //@line 446 "stringio.c"
        var $46=$45+16; //@line 446 "stringio.c"
        var $47=HEAP[$46]; //@line 446 "stringio.c"
        $pos=$47; //@line 446 "stringio.c"
        __label__ = 22; break; //@line 446 "stringio.c"
      case 22: // $bb22
        var $48=$self_addr; //@line 449 "stringio.c"
        var $49=$48+12; //@line 449 "stringio.c"
        var $50=$pos; //@line 449 "stringio.c"
        HEAP[$49]=$50; //@line 449 "stringio.c"
        var $51=$self_addr; //@line 451 "stringio.c"
        var $52=$51+12; //@line 451 "stringio.c"
        var $53=HEAP[$52]; //@line 451 "stringio.c"
        var $54=_PyLong_FromSsize_t($53); //@line 451 "stringio.c"
        $0=$54; //@line 451 "stringio.c"
        __label__ = 23; break; //@line 451 "stringio.c"
      case 23: // $bb23
        var $55=$0; //@line 413 "stringio.c"
        $retval=$55; //@line 413 "stringio.c"
        var $retval24=$retval; //@line 413 "stringio.c"
        STACKTOP = __stackBase__;
        return $retval24; //@line 413 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_write($self, $obj) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $obj_addr;
        var $retval;
        var $0;
        var $size;
        $self_addr=$self;
        $obj_addr=$obj;
        var $1=$self_addr; //@line 465 "stringio.c"
        var $2=$1+24; //@line 465 "stringio.c"
        var $3=HEAP[$2]; //@line 465 "stringio.c"
        var $4=($3) <= 0; //@line 465 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 465 "stringio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 465 "stringio.c"
        _PyErr_SetString($5, __str12); //@line 465 "stringio.c"
        $0=0; //@line 465 "stringio.c"
        __label__ = 10; break; //@line 465 "stringio.c"
      case 2: // $bb1
        var $6=$obj_addr; //@line 466 "stringio.c"
        var $7=$6+4; //@line 466 "stringio.c"
        var $8=HEAP[$7]; //@line 466 "stringio.c"
        var $9=$8+84; //@line 466 "stringio.c"
        var $10=HEAP[$9]; //@line 466 "stringio.c"
        var $11=($10) & 268435456; //@line 466 "stringio.c"
        var $12=($11)==0; //@line 466 "stringio.c"
        if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 466 "stringio.c"
      case 3: // $bb2
        var $13=$obj_addr; //@line 467 "stringio.c"
        var $14=$13+4; //@line 467 "stringio.c"
        var $15=HEAP[$14]; //@line 467 "stringio.c"
        var $16=$15+12; //@line 467 "stringio.c"
        var $17=HEAP[$16]; //@line 467 "stringio.c"
        var $18=HEAP[_PyExc_TypeError]; //@line 467 "stringio.c"
        var $19=_PyErr_Format($18, __str20339, allocate([$17,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 467 "stringio.c"
        $0=0; //@line 469 "stringio.c"
        __label__ = 10; break; //@line 469 "stringio.c"
      case 4: // $bb3
        var $20=$self_addr; //@line 471 "stringio.c"
        var $21=$20+25; //@line 471 "stringio.c"
        var $22=HEAP[$21]; //@line 471 "stringio.c"
        var $23=($22)!=0; //@line 471 "stringio.c"
        if ($23) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 471 "stringio.c"
      case 5: // $bb4
        var $24=HEAP[_PyExc_ValueError]; //@line 471 "stringio.c"
        _PyErr_SetString($24, __str8327); //@line 471 "stringio.c"
        $0=0; //@line 471 "stringio.c"
        __label__ = 10; break; //@line 471 "stringio.c"
      case 6: // $bb5
        var $25=$obj_addr; //@line 472 "stringio.c"
        var $26=$25; //@line 472 "stringio.c"
        var $27=$26+8; //@line 472 "stringio.c"
        var $28=HEAP[$27]; //@line 472 "stringio.c"
        $size=$28; //@line 472 "stringio.c"
        var $29=$size; //@line 474 "stringio.c"
        var $30=($29) > 0; //@line 474 "stringio.c"
        if ($30) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 474 "stringio.c"
      case 7: // $bb6
        var $31=$self_addr; //@line 474 "stringio.c"
        var $32=$obj_addr; //@line 474 "stringio.c"
        var $33=_write_str($31, $32); //@line 474 "stringio.c"
        var $34=($33) < 0; //@line 474 "stringio.c"
        if ($34) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 474 "stringio.c"
      case 8: // $bb7
        $0=0; //@line 475 "stringio.c"
        __label__ = 10; break; //@line 475 "stringio.c"
      case 9: // $bb8
        var $35=$size; //@line 477 "stringio.c"
        var $36=_PyLong_FromSsize_t($35); //@line 477 "stringio.c"
        $0=$36; //@line 477 "stringio.c"
        __label__ = 10; break; //@line 477 "stringio.c"
      case 10: // $bb9
        var $37=$0; //@line 465 "stringio.c"
        $retval=$37; //@line 465 "stringio.c"
        var $retval10=$retval; //@line 465 "stringio.c"
        ;
        return $retval10; //@line 465 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_close($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $_py_tmp;
        var $_py_tmp6;
        var $_py_tmp10;
        $self_addr=$self;
        var $1=$self_addr; //@line 489 "stringio.c"
        var $2=$1+25; //@line 489 "stringio.c"
        HEAP[$2]=1; //@line 489 "stringio.c"
        var $3=$self_addr; //@line 491 "stringio.c"
        var $4=_resize_buffer373($3, 0); //@line 491 "stringio.c"
        var $5=($4) < 0; //@line 491 "stringio.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 491 "stringio.c"
      case 1: // $bb
        $0=0; //@line 492 "stringio.c"
        __label__ = 12; break; //@line 492 "stringio.c"
      case 2: // $bb1
        var $6=$self_addr; //@line 493 "stringio.c"
        var $7=$6+32; //@line 493 "stringio.c"
        var $8=HEAP[$7]; //@line 493 "stringio.c"
        var $9=($8)!=0; //@line 493 "stringio.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 493 "stringio.c"
      case 3: // $bb2
        var $10=$self_addr; //@line 493 "stringio.c"
        var $11=$10+32; //@line 493 "stringio.c"
        var $12=HEAP[$11]; //@line 493 "stringio.c"
        $_py_tmp=$12; //@line 493 "stringio.c"
        var $13=$self_addr; //@line 493 "stringio.c"
        var $14=$13+32; //@line 493 "stringio.c"
        HEAP[$14]=0; //@line 493 "stringio.c"
        var $15=$_py_tmp; //@line 493 "stringio.c"
        var $16=$15; //@line 493 "stringio.c"
        var $17=HEAP[$16]; //@line 493 "stringio.c"
        var $18=($17) - 1; //@line 493 "stringio.c"
        var $19=$_py_tmp; //@line 493 "stringio.c"
        var $20=$19; //@line 493 "stringio.c"
        HEAP[$20]=$18; //@line 493 "stringio.c"
        var $21=$_py_tmp; //@line 493 "stringio.c"
        var $22=$21; //@line 493 "stringio.c"
        var $23=HEAP[$22]; //@line 493 "stringio.c"
        var $24=($23)==0; //@line 493 "stringio.c"
        if ($24) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 493 "stringio.c"
      case 4: // $bb3
        var $25=$_py_tmp; //@line 493 "stringio.c"
        var $26=$25+4; //@line 493 "stringio.c"
        var $27=HEAP[$26]; //@line 493 "stringio.c"
        var $28=$27+24; //@line 493 "stringio.c"
        var $29=HEAP[$28]; //@line 493 "stringio.c"
        var $30=$_py_tmp; //@line 493 "stringio.c"
        FUNCTION_TABLE[$29]($30); //@line 493 "stringio.c"
        __label__ = 5; break; //@line 493 "stringio.c"
      case 5: // $bb4
        var $31=$self_addr; //@line 494 "stringio.c"
        var $32=$31+36; //@line 494 "stringio.c"
        var $33=HEAP[$32]; //@line 494 "stringio.c"
        var $34=($33)!=0; //@line 494 "stringio.c"
        if ($34) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 494 "stringio.c"
      case 6: // $bb5
        var $35=$self_addr; //@line 494 "stringio.c"
        var $36=$35+36; //@line 494 "stringio.c"
        var $37=HEAP[$36]; //@line 494 "stringio.c"
        $_py_tmp6=$37; //@line 494 "stringio.c"
        var $38=$self_addr; //@line 494 "stringio.c"
        var $39=$38+36; //@line 494 "stringio.c"
        HEAP[$39]=0; //@line 494 "stringio.c"
        var $40=$_py_tmp6; //@line 494 "stringio.c"
        var $41=$40; //@line 494 "stringio.c"
        var $42=HEAP[$41]; //@line 494 "stringio.c"
        var $43=($42) - 1; //@line 494 "stringio.c"
        var $44=$_py_tmp6; //@line 494 "stringio.c"
        var $45=$44; //@line 494 "stringio.c"
        HEAP[$45]=$43; //@line 494 "stringio.c"
        var $46=$_py_tmp6; //@line 494 "stringio.c"
        var $47=$46; //@line 494 "stringio.c"
        var $48=HEAP[$47]; //@line 494 "stringio.c"
        var $49=($48)==0; //@line 494 "stringio.c"
        if ($49) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 494 "stringio.c"
      case 7: // $bb7
        var $50=$_py_tmp6; //@line 494 "stringio.c"
        var $51=$50+4; //@line 494 "stringio.c"
        var $52=HEAP[$51]; //@line 494 "stringio.c"
        var $53=$52+24; //@line 494 "stringio.c"
        var $54=HEAP[$53]; //@line 494 "stringio.c"
        var $55=$_py_tmp6; //@line 494 "stringio.c"
        FUNCTION_TABLE[$54]($55); //@line 494 "stringio.c"
        __label__ = 8; break; //@line 494 "stringio.c"
      case 8: // $bb8
        var $56=$self_addr; //@line 495 "stringio.c"
        var $57=$56+28; //@line 495 "stringio.c"
        var $58=HEAP[$57]; //@line 495 "stringio.c"
        var $59=($58)!=0; //@line 495 "stringio.c"
        if ($59) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 495 "stringio.c"
      case 9: // $bb9
        var $60=$self_addr; //@line 495 "stringio.c"
        var $61=$60+28; //@line 495 "stringio.c"
        var $62=HEAP[$61]; //@line 495 "stringio.c"
        $_py_tmp10=$62; //@line 495 "stringio.c"
        var $63=$self_addr; //@line 495 "stringio.c"
        var $64=$63+28; //@line 495 "stringio.c"
        HEAP[$64]=0; //@line 495 "stringio.c"
        var $65=$_py_tmp10; //@line 495 "stringio.c"
        var $66=$65; //@line 495 "stringio.c"
        var $67=HEAP[$66]; //@line 495 "stringio.c"
        var $68=($67) - 1; //@line 495 "stringio.c"
        var $69=$_py_tmp10; //@line 495 "stringio.c"
        var $70=$69; //@line 495 "stringio.c"
        HEAP[$70]=$68; //@line 495 "stringio.c"
        var $71=$_py_tmp10; //@line 495 "stringio.c"
        var $72=$71; //@line 495 "stringio.c"
        var $73=HEAP[$72]; //@line 495 "stringio.c"
        var $74=($73)==0; //@line 495 "stringio.c"
        if ($74) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 495 "stringio.c"
      case 10: // $bb11
        var $75=$_py_tmp10; //@line 495 "stringio.c"
        var $76=$75+4; //@line 495 "stringio.c"
        var $77=HEAP[$76]; //@line 495 "stringio.c"
        var $78=$77+24; //@line 495 "stringio.c"
        var $79=HEAP[$78]; //@line 495 "stringio.c"
        var $80=$_py_tmp10; //@line 495 "stringio.c"
        FUNCTION_TABLE[$79]($80); //@line 495 "stringio.c"
        __label__ = 11; break; //@line 495 "stringio.c"
      case 11: // $bb12
        var $81=HEAP[__Py_NoneStruct]; //@line 496 "stringio.c"
        var $82=($81) + 1; //@line 496 "stringio.c"
        HEAP[__Py_NoneStruct]=$82; //@line 496 "stringio.c"
        $0=__Py_NoneStruct; //@line 496 "stringio.c"
        __label__ = 12; break; //@line 496 "stringio.c"
      case 12: // $bb13
        var $83=$0; //@line 492 "stringio.c"
        $retval=$83; //@line 492 "stringio.c"
        var $retval14=$retval; //@line 492 "stringio.c"
        ;
        return $retval14; //@line 492 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_traverse($self, $visit, $arg) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $visit_addr;
        var $arg_addr;
        var $retval;
        var $0;
        var $vret;
        $self_addr=$self;
        $visit_addr=$visit;
        $arg_addr=$arg;
        var $1=$self_addr; //@line 502 "stringio.c"
        var $2=$1+40; //@line 502 "stringio.c"
        var $3=HEAP[$2]; //@line 502 "stringio.c"
        var $4=($3)!=0; //@line 502 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 502 "stringio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 502 "stringio.c"
        var $6=$5+40; //@line 502 "stringio.c"
        var $7=HEAP[$6]; //@line 502 "stringio.c"
        var $8=$visit_addr; //@line 502 "stringio.c"
        var $9=$arg_addr; //@line 502 "stringio.c"
        var $10=FUNCTION_TABLE[$8]($7, $9); //@line 502 "stringio.c"
        $vret=$10; //@line 502 "stringio.c"
        var $11=$vret; //@line 502 "stringio.c"
        var $12=($11)!=0; //@line 502 "stringio.c"
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 502 "stringio.c"
      case 2: // $bb1
        var $13=$vret; //@line 502 "stringio.c"
        $0=$13; //@line 502 "stringio.c"
        __label__ = 4; break; //@line 502 "stringio.c"
      case 3: // $bb2
        $0=0; //@line 503 "stringio.c"
        __label__ = 4; break; //@line 503 "stringio.c"
      case 4: // $bb3
        var $14=$0; //@line 502 "stringio.c"
        $retval=$14; //@line 502 "stringio.c"
        var $retval4=$retval; //@line 502 "stringio.c"
        ;
        return $retval4; //@line 502 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_clear($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $_py_tmp;
        $self_addr=$self;
        var $1=$self_addr; //@line 509 "stringio.c"
        var $2=$1+40; //@line 509 "stringio.c"
        var $3=HEAP[$2]; //@line 509 "stringio.c"
        var $4=($3)!=0; //@line 509 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 509 "stringio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 509 "stringio.c"
        var $6=$5+40; //@line 509 "stringio.c"
        var $7=HEAP[$6]; //@line 509 "stringio.c"
        $_py_tmp=$7; //@line 509 "stringio.c"
        var $8=$self_addr; //@line 509 "stringio.c"
        var $9=$8+40; //@line 509 "stringio.c"
        HEAP[$9]=0; //@line 509 "stringio.c"
        var $10=$_py_tmp; //@line 509 "stringio.c"
        var $11=$10; //@line 509 "stringio.c"
        var $12=HEAP[$11]; //@line 509 "stringio.c"
        var $13=($12) - 1; //@line 509 "stringio.c"
        var $14=$_py_tmp; //@line 509 "stringio.c"
        var $15=$14; //@line 509 "stringio.c"
        HEAP[$15]=$13; //@line 509 "stringio.c"
        var $16=$_py_tmp; //@line 509 "stringio.c"
        var $17=$16; //@line 509 "stringio.c"
        var $18=HEAP[$17]; //@line 509 "stringio.c"
        var $19=($18)==0; //@line 509 "stringio.c"
        if ($19) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 509 "stringio.c"
      case 2: // $bb1
        var $20=$_py_tmp; //@line 509 "stringio.c"
        var $21=$20+4; //@line 509 "stringio.c"
        var $22=HEAP[$21]; //@line 509 "stringio.c"
        var $23=$22+24; //@line 509 "stringio.c"
        var $24=HEAP[$23]; //@line 509 "stringio.c"
        var $25=$_py_tmp; //@line 509 "stringio.c"
        FUNCTION_TABLE[$24]($25); //@line 509 "stringio.c"
        __label__ = 3; break; //@line 509 "stringio.c"
      case 3: // $bb2
        $0=0; //@line 510 "stringio.c"
        var $26=$0; //@line 510 "stringio.c"
        $retval=$26; //@line 510 "stringio.c"
        var $retval3=$retval; //@line 510 "stringio.c"
        ;
        return $retval3; //@line 510 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_dealloc($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $g;
        var $_py_tmp;
        var $_py_tmp8;
        var $_py_tmp12;
        var $_py_tmp16;
        $self_addr=$self;
        var $0=$self_addr; //@line 516 "stringio.c"
        var $1=$0; //@line 516 "stringio.c"
        var $2=$1+-12; //@line 516 "stringio.c"
        $g=$2; //@line 516 "stringio.c"
        var $3=$g; //@line 516 "stringio.c"
        var $4=$3; //@line 516 "stringio.c"
        var $5=$4+8; //@line 516 "stringio.c"
        var $6=HEAP[$5]; //@line 516 "stringio.c"
        var $7=($6)==-2; //@line 516 "stringio.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 516 "stringio.c"
      case 1: // $bb
        ___assert_fail(__str21340, __str1320, 516, ___PRETTY_FUNCTION___9021); //@line 516 "stringio.c"
        throw "Reached an unreachable!" //@line 516 "stringio.c"
      case 2: // $bb1
        var $8=$g; //@line 516 "stringio.c"
        var $9=$8; //@line 516 "stringio.c"
        var $10=$9+8; //@line 516 "stringio.c"
        HEAP[$10]=-2; //@line 516 "stringio.c"
        var $11=$g; //@line 516 "stringio.c"
        var $12=$11; //@line 516 "stringio.c"
        var $13=$12+4; //@line 516 "stringio.c"
        var $14=HEAP[$13]; //@line 516 "stringio.c"
        var $15=$g; //@line 516 "stringio.c"
        var $16=$15; //@line 516 "stringio.c"
        var $17=$16; //@line 516 "stringio.c"
        var $18=HEAP[$17]; //@line 516 "stringio.c"
        var $19=$14; //@line 516 "stringio.c"
        var $20=$19; //@line 516 "stringio.c"
        HEAP[$20]=$18; //@line 516 "stringio.c"
        var $21=$g; //@line 516 "stringio.c"
        var $22=$21; //@line 516 "stringio.c"
        var $23=$22; //@line 516 "stringio.c"
        var $24=HEAP[$23]; //@line 516 "stringio.c"
        var $25=$g; //@line 516 "stringio.c"
        var $26=$25; //@line 516 "stringio.c"
        var $27=$26+4; //@line 516 "stringio.c"
        var $28=HEAP[$27]; //@line 516 "stringio.c"
        var $29=$24; //@line 516 "stringio.c"
        var $30=$29+4; //@line 516 "stringio.c"
        HEAP[$30]=$28; //@line 516 "stringio.c"
        var $31=$g; //@line 516 "stringio.c"
        var $32=$31; //@line 516 "stringio.c"
        var $33=$32; //@line 516 "stringio.c"
        HEAP[$33]=0; //@line 516 "stringio.c"
        var $34=$self_addr; //@line 517 "stringio.c"
        var $35=$34+24; //@line 517 "stringio.c"
        HEAP[$35]=0; //@line 517 "stringio.c"
        var $36=$self_addr; //@line 518 "stringio.c"
        var $37=$36+8; //@line 518 "stringio.c"
        var $38=HEAP[$37]; //@line 518 "stringio.c"
        var $39=($38)!=0; //@line 518 "stringio.c"
        if ($39) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 518 "stringio.c"
      case 3: // $bb2
        var $40=$self_addr; //@line 519 "stringio.c"
        var $41=$40+8; //@line 519 "stringio.c"
        var $42=HEAP[$41]; //@line 519 "stringio.c"
        var $43=$42; //@line 519 "stringio.c"
        _PyMem_Free($43); //@line 519 "stringio.c"
        var $44=$self_addr; //@line 520 "stringio.c"
        var $45=$44+8; //@line 520 "stringio.c"
        HEAP[$45]=0; //@line 520 "stringio.c"
        __label__ = 4; break; //@line 520 "stringio.c"
      case 4: // $bb3
        var $46=$self_addr; //@line 522 "stringio.c"
        var $47=$46+32; //@line 522 "stringio.c"
        var $48=HEAP[$47]; //@line 522 "stringio.c"
        var $49=($48)!=0; //@line 522 "stringio.c"
        if ($49) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 522 "stringio.c"
      case 5: // $bb4
        var $50=$self_addr; //@line 522 "stringio.c"
        var $51=$50+32; //@line 522 "stringio.c"
        var $52=HEAP[$51]; //@line 522 "stringio.c"
        $_py_tmp=$52; //@line 522 "stringio.c"
        var $53=$self_addr; //@line 522 "stringio.c"
        var $54=$53+32; //@line 522 "stringio.c"
        HEAP[$54]=0; //@line 522 "stringio.c"
        var $55=$_py_tmp; //@line 522 "stringio.c"
        var $56=$55; //@line 522 "stringio.c"
        var $57=HEAP[$56]; //@line 522 "stringio.c"
        var $58=($57) - 1; //@line 522 "stringio.c"
        var $59=$_py_tmp; //@line 522 "stringio.c"
        var $60=$59; //@line 522 "stringio.c"
        HEAP[$60]=$58; //@line 522 "stringio.c"
        var $61=$_py_tmp; //@line 522 "stringio.c"
        var $62=$61; //@line 522 "stringio.c"
        var $63=HEAP[$62]; //@line 522 "stringio.c"
        var $64=($63)==0; //@line 522 "stringio.c"
        if ($64) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 522 "stringio.c"
      case 6: // $bb5
        var $65=$_py_tmp; //@line 522 "stringio.c"
        var $66=$65+4; //@line 522 "stringio.c"
        var $67=HEAP[$66]; //@line 522 "stringio.c"
        var $68=$67+24; //@line 522 "stringio.c"
        var $69=HEAP[$68]; //@line 522 "stringio.c"
        var $70=$_py_tmp; //@line 522 "stringio.c"
        FUNCTION_TABLE[$69]($70); //@line 522 "stringio.c"
        __label__ = 7; break; //@line 522 "stringio.c"
      case 7: // $bb6
        var $71=$self_addr; //@line 523 "stringio.c"
        var $72=$71+36; //@line 523 "stringio.c"
        var $73=HEAP[$72]; //@line 523 "stringio.c"
        var $74=($73)!=0; //@line 523 "stringio.c"
        if ($74) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 523 "stringio.c"
      case 8: // $bb7
        var $75=$self_addr; //@line 523 "stringio.c"
        var $76=$75+36; //@line 523 "stringio.c"
        var $77=HEAP[$76]; //@line 523 "stringio.c"
        $_py_tmp8=$77; //@line 523 "stringio.c"
        var $78=$self_addr; //@line 523 "stringio.c"
        var $79=$78+36; //@line 523 "stringio.c"
        HEAP[$79]=0; //@line 523 "stringio.c"
        var $80=$_py_tmp8; //@line 523 "stringio.c"
        var $81=$80; //@line 523 "stringio.c"
        var $82=HEAP[$81]; //@line 523 "stringio.c"
        var $83=($82) - 1; //@line 523 "stringio.c"
        var $84=$_py_tmp8; //@line 523 "stringio.c"
        var $85=$84; //@line 523 "stringio.c"
        HEAP[$85]=$83; //@line 523 "stringio.c"
        var $86=$_py_tmp8; //@line 523 "stringio.c"
        var $87=$86; //@line 523 "stringio.c"
        var $88=HEAP[$87]; //@line 523 "stringio.c"
        var $89=($88)==0; //@line 523 "stringio.c"
        if ($89) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 523 "stringio.c"
      case 9: // $bb9
        var $90=$_py_tmp8; //@line 523 "stringio.c"
        var $91=$90+4; //@line 523 "stringio.c"
        var $92=HEAP[$91]; //@line 523 "stringio.c"
        var $93=$92+24; //@line 523 "stringio.c"
        var $94=HEAP[$93]; //@line 523 "stringio.c"
        var $95=$_py_tmp8; //@line 523 "stringio.c"
        FUNCTION_TABLE[$94]($95); //@line 523 "stringio.c"
        __label__ = 10; break; //@line 523 "stringio.c"
      case 10: // $bb10
        var $96=$self_addr; //@line 524 "stringio.c"
        var $97=$96+28; //@line 524 "stringio.c"
        var $98=HEAP[$97]; //@line 524 "stringio.c"
        var $99=($98)!=0; //@line 524 "stringio.c"
        if ($99) { __label__ = 11; break; } else { __label__ = 13; break; } //@line 524 "stringio.c"
      case 11: // $bb11
        var $100=$self_addr; //@line 524 "stringio.c"
        var $101=$100+28; //@line 524 "stringio.c"
        var $102=HEAP[$101]; //@line 524 "stringio.c"
        $_py_tmp12=$102; //@line 524 "stringio.c"
        var $103=$self_addr; //@line 524 "stringio.c"
        var $104=$103+28; //@line 524 "stringio.c"
        HEAP[$104]=0; //@line 524 "stringio.c"
        var $105=$_py_tmp12; //@line 524 "stringio.c"
        var $106=$105; //@line 524 "stringio.c"
        var $107=HEAP[$106]; //@line 524 "stringio.c"
        var $108=($107) - 1; //@line 524 "stringio.c"
        var $109=$_py_tmp12; //@line 524 "stringio.c"
        var $110=$109; //@line 524 "stringio.c"
        HEAP[$110]=$108; //@line 524 "stringio.c"
        var $111=$_py_tmp12; //@line 524 "stringio.c"
        var $112=$111; //@line 524 "stringio.c"
        var $113=HEAP[$112]; //@line 524 "stringio.c"
        var $114=($113)==0; //@line 524 "stringio.c"
        if ($114) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 524 "stringio.c"
      case 12: // $bb13
        var $115=$_py_tmp12; //@line 524 "stringio.c"
        var $116=$115+4; //@line 524 "stringio.c"
        var $117=HEAP[$116]; //@line 524 "stringio.c"
        var $118=$117+24; //@line 524 "stringio.c"
        var $119=HEAP[$118]; //@line 524 "stringio.c"
        var $120=$_py_tmp12; //@line 524 "stringio.c"
        FUNCTION_TABLE[$119]($120); //@line 524 "stringio.c"
        __label__ = 13; break; //@line 524 "stringio.c"
      case 13: // $bb14
        var $121=$self_addr; //@line 525 "stringio.c"
        var $122=$121+40; //@line 525 "stringio.c"
        var $123=HEAP[$122]; //@line 525 "stringio.c"
        var $124=($123)!=0; //@line 525 "stringio.c"
        if ($124) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 525 "stringio.c"
      case 14: // $bb15
        var $125=$self_addr; //@line 525 "stringio.c"
        var $126=$125+40; //@line 525 "stringio.c"
        var $127=HEAP[$126]; //@line 525 "stringio.c"
        $_py_tmp16=$127; //@line 525 "stringio.c"
        var $128=$self_addr; //@line 525 "stringio.c"
        var $129=$128+40; //@line 525 "stringio.c"
        HEAP[$129]=0; //@line 525 "stringio.c"
        var $130=$_py_tmp16; //@line 525 "stringio.c"
        var $131=$130; //@line 525 "stringio.c"
        var $132=HEAP[$131]; //@line 525 "stringio.c"
        var $133=($132) - 1; //@line 525 "stringio.c"
        var $134=$_py_tmp16; //@line 525 "stringio.c"
        var $135=$134; //@line 525 "stringio.c"
        HEAP[$135]=$133; //@line 525 "stringio.c"
        var $136=$_py_tmp16; //@line 525 "stringio.c"
        var $137=$136; //@line 525 "stringio.c"
        var $138=HEAP[$137]; //@line 525 "stringio.c"
        var $139=($138)==0; //@line 525 "stringio.c"
        if ($139) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 525 "stringio.c"
      case 15: // $bb17
        var $140=$_py_tmp16; //@line 525 "stringio.c"
        var $141=$140+4; //@line 525 "stringio.c"
        var $142=HEAP[$141]; //@line 525 "stringio.c"
        var $143=$142+24; //@line 525 "stringio.c"
        var $144=HEAP[$143]; //@line 525 "stringio.c"
        var $145=$_py_tmp16; //@line 525 "stringio.c"
        FUNCTION_TABLE[$144]($145); //@line 525 "stringio.c"
        __label__ = 16; break; //@line 525 "stringio.c"
      case 16: // $bb18
        var $146=$self_addr; //@line 526 "stringio.c"
        var $147=$146+44; //@line 526 "stringio.c"
        var $148=HEAP[$147]; //@line 526 "stringio.c"
        var $149=($148)!=0; //@line 526 "stringio.c"
        if ($149) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 526 "stringio.c"
      case 17: // $bb19
        var $150=$self_addr; //@line 527 "stringio.c"
        var $151=$150; //@line 527 "stringio.c"
        _PyObject_ClearWeakRefs($151); //@line 527 "stringio.c"
        __label__ = 18; break; //@line 527 "stringio.c"
      case 18: // $bb20
        var $152=$self_addr; //@line 528 "stringio.c"
        var $153=$152; //@line 528 "stringio.c"
        var $154=$153+4; //@line 528 "stringio.c"
        var $155=HEAP[$154]; //@line 528 "stringio.c"
        var $156=$155+160; //@line 528 "stringio.c"
        var $157=HEAP[$156]; //@line 528 "stringio.c"
        var $158=$self_addr; //@line 528 "stringio.c"
        var $159=$158; //@line 528 "stringio.c"
        FUNCTION_TABLE[$157]($159); //@line 528 "stringio.c"
        ;
        return; //@line 529 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_new($type, $args, $kwds) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $type_addr;
        var $args_addr;
        var $kwds_addr;
        var $retval;
        var $0;
        var $self;
        $type_addr=$type;
        $args_addr=$args;
        $kwds_addr=$kwds;
        var $1=$type_addr; //@line 536 "stringio.c"
        var $2=($1)==0; //@line 536 "stringio.c"
        if ($2) { __label__ = 2; break; } else { __label__ = 1; break; } //@line 536 "stringio.c"
      case 1: // $bb
        var $3=$type_addr; //@line 536 "stringio.c"
        var $4=$3+152; //@line 536 "stringio.c"
        var $5=HEAP[$4]; //@line 536 "stringio.c"
        var $6=($5)==0; //@line 536 "stringio.c"
        if ($6) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 536 "stringio.c"
      case 2: // $bb1
        ___assert_fail(__str22341, __str1320, 536, ___PRETTY_FUNCTION___9091); //@line 536 "stringio.c"
        throw "Reached an unreachable!" //@line 536 "stringio.c"
      case 3: // $bb2
        var $7=$type_addr; //@line 537 "stringio.c"
        var $8=$7+152; //@line 537 "stringio.c"
        var $9=HEAP[$8]; //@line 537 "stringio.c"
        var $10=$type_addr; //@line 537 "stringio.c"
        var $11=FUNCTION_TABLE[$9]($10, 0); //@line 537 "stringio.c"
        var $12=$11; //@line 537 "stringio.c"
        $self=$12; //@line 537 "stringio.c"
        var $13=$self; //@line 538 "stringio.c"
        var $14=($13)==0; //@line 538 "stringio.c"
        if ($14) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 538 "stringio.c"
      case 4: // $bb3
        $0=0; //@line 539 "stringio.c"
        __label__ = 10; break; //@line 539 "stringio.c"
      case 5: // $bb4
        var $15=_PyMem_Malloc(0); //@line 544 "stringio.c"
        var $16=$15; //@line 544 "stringio.c"
        var $17=$self; //@line 544 "stringio.c"
        var $18=$17+8; //@line 544 "stringio.c"
        HEAP[$18]=$16; //@line 544 "stringio.c"
        var $19=$self; //@line 545 "stringio.c"
        var $20=$19+8; //@line 545 "stringio.c"
        var $21=HEAP[$20]; //@line 545 "stringio.c"
        var $22=($21)==0; //@line 545 "stringio.c"
        var $23=$self; //@line 546 "stringio.c"
        var $24=$23; //@line 546 "stringio.c"
        if ($22) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 545 "stringio.c"
      case 6: // $bb5
        var $25=$24; //@line 546 "stringio.c"
        var $26=HEAP[$25]; //@line 546 "stringio.c"
        var $27=($26) - 1; //@line 546 "stringio.c"
        var $28=$24; //@line 546 "stringio.c"
        HEAP[$28]=$27; //@line 546 "stringio.c"
        var $29=$24; //@line 546 "stringio.c"
        var $30=HEAP[$29]; //@line 546 "stringio.c"
        var $31=($30)==0; //@line 546 "stringio.c"
        if ($31) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 546 "stringio.c"
      case 7: // $bb6
        var $32=$self; //@line 546 "stringio.c"
        var $33=$32; //@line 546 "stringio.c"
        var $34=$33+4; //@line 546 "stringio.c"
        var $35=HEAP[$34]; //@line 546 "stringio.c"
        var $36=$35+24; //@line 546 "stringio.c"
        var $37=HEAP[$36]; //@line 546 "stringio.c"
        var $38=$self; //@line 546 "stringio.c"
        var $39=$38; //@line 546 "stringio.c"
        FUNCTION_TABLE[$37]($39); //@line 546 "stringio.c"
        __label__ = 8; break; //@line 546 "stringio.c"
      case 8: // $bb7
        var $40=_PyErr_NoMemory(); //@line 547 "stringio.c"
        $0=$40; //@line 547 "stringio.c"
        __label__ = 10; break; //@line 547 "stringio.c"
      case 9: // $bb8
        $0=$24; //@line 550 "stringio.c"
        __label__ = 10; break; //@line 550 "stringio.c"
      case 10: // $bb9
        var $41=$0; //@line 539 "stringio.c"
        $retval=$41; //@line 539 "stringio.c"
        var $retval10=$retval; //@line 539 "stringio.c"
        ;
        return $retval10; //@line 539 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_init($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $kwds_addr;
        var $retval;
        var $iftmp_90;
        var $0;
        var $kwlist=__stackBase__;
        var $value=__stackBase__+12;
        var $newline=__stackBase__+16;
        var $_py_tmp;
        var $_py_tmp21;
        var $_py_tmp25;
        var $len;
        $self_addr=$self;
        $args_addr=$args;
        $kwds_addr=$kwds;
        var $1=$kwlist; //@line 556 "stringio.c"
        HEAP[$1]=__str23342; //@line 556 "stringio.c"
        var $2=$kwlist+4; //@line 556 "stringio.c"
        HEAP[$2]=__str24343; //@line 556 "stringio.c"
        var $3=$kwlist+8; //@line 556 "stringio.c"
        HEAP[$3]=0; //@line 556 "stringio.c"
        HEAP[$value]=0; //@line 557 "stringio.c"
        HEAP[$newline]=__str25344; //@line 558 "stringio.c"
        var $4=$args_addr; //@line 560 "stringio.c"
        var $5=$kwds_addr; //@line 560 "stringio.c"
        var $kwlist1=$kwlist; //@line 560 "stringio.c"
        var $6=__PyArg_ParseTupleAndKeywords_SizeT($4, $5, __str26345, $kwlist1, allocate([$value,0,0,0,$newline,0,0,0], ["%struct.PyObject**",0,0,0,"i8**",0,0,0], ALLOC_STACK)); //@line 560 "stringio.c"
        var $7=($6)==0; //@line 560 "stringio.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 560 "stringio.c"
      case 1: // $bb
        $0=-1; //@line 562 "stringio.c"
        __label__ = 45; break; //@line 562 "stringio.c"
      case 2: // $bb2
        var $8=HEAP[$newline]; //@line 564 "stringio.c"
        var $9=($8)!=0; //@line 564 "stringio.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 12; break; } //@line 564 "stringio.c"
      case 3: // $bb3
        var $10=HEAP[$newline]; //@line 564 "stringio.c"
        var $11=$10; //@line 564 "stringio.c"
        var $12=HEAP[$11]; //@line 564 "stringio.c"
        var $13=($12)!=0; //@line 564 "stringio.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 12; break; } //@line 564 "stringio.c"
      case 4: // $bb4
        var $14=HEAP[$newline]; //@line 564 "stringio.c"
        var $15=$14; //@line 564 "stringio.c"
        var $16=HEAP[$15]; //@line 564 "stringio.c"
        var $17=($16)!=10; //@line 564 "stringio.c"
        if ($17) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 564 "stringio.c"
      case 5: // $bb5
        var $18=HEAP[$newline]; //@line 564 "stringio.c"
        var $19=$18+1; //@line 564 "stringio.c"
        var $20=HEAP[$19]; //@line 564 "stringio.c"
        var $21=($20)!=0; //@line 564 "stringio.c"
        if ($21) { __label__ = 6; break; } else { __label__ = 12; break; } //@line 564 "stringio.c"
      case 6: // $bb6
        var $22=HEAP[$newline]; //@line 564 "stringio.c"
        var $23=$22; //@line 564 "stringio.c"
        var $24=HEAP[$23]; //@line 564 "stringio.c"
        var $25=($24)!=13; //@line 564 "stringio.c"
        if ($25) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 564 "stringio.c"
      case 7: // $bb7
        var $26=HEAP[$newline]; //@line 564 "stringio.c"
        var $27=$26+1; //@line 564 "stringio.c"
        var $28=HEAP[$27]; //@line 564 "stringio.c"
        var $29=($28)!=0; //@line 564 "stringio.c"
        if ($29) { __label__ = 8; break; } else { __label__ = 12; break; } //@line 564 "stringio.c"
      case 8: // $bb8
        var $30=HEAP[$newline]; //@line 564 "stringio.c"
        var $31=$30; //@line 564 "stringio.c"
        var $32=HEAP[$31]; //@line 564 "stringio.c"
        var $33=($32)!=13; //@line 564 "stringio.c"
        if ($33) { __label__ = 11; break; } else { __label__ = 9; break; } //@line 564 "stringio.c"
      case 9: // $bb9
        var $34=HEAP[$newline]; //@line 564 "stringio.c"
        var $35=$34+1; //@line 564 "stringio.c"
        var $36=HEAP[$35]; //@line 564 "stringio.c"
        var $37=($36)!=10; //@line 564 "stringio.c"
        if ($37) { __label__ = 11; break; } else { __label__ = 10; break; } //@line 564 "stringio.c"
      case 10: // $bb10
        var $38=HEAP[$newline]; //@line 564 "stringio.c"
        var $39=$38+2; //@line 564 "stringio.c"
        var $40=HEAP[$39]; //@line 564 "stringio.c"
        var $41=($40)!=0; //@line 564 "stringio.c"
        if ($41) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 564 "stringio.c"
      case 11: // $bb11
        var $42=HEAP[$newline]; //@line 568 "stringio.c"
        var $43=HEAP[_PyExc_ValueError]; //@line 568 "stringio.c"
        var $44=_PyErr_Format($43, __str27346, allocate([$42,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 568 "stringio.c"
        $0=-1; //@line 570 "stringio.c"
        __label__ = 45; break; //@line 570 "stringio.c"
      case 12: // $bb12
        var $45=HEAP[$value]; //@line 572 "stringio.c"
        var $46=($45)!=0; //@line 572 "stringio.c"
        var $47=HEAP[$value]; //@line 572 "stringio.c"
        var $48=($47)!=(__Py_NoneStruct); //@line 572 "stringio.c"
        var $or_cond=($46) & ($48);
        if ($or_cond) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 572 "stringio.c"
      case 13: // $bb14
        var $49=HEAP[$value]; //@line 572 "stringio.c"
        var $50=$49+4; //@line 572 "stringio.c"
        var $51=HEAP[$50]; //@line 572 "stringio.c"
        var $52=$51+84; //@line 572 "stringio.c"
        var $53=HEAP[$52]; //@line 572 "stringio.c"
        var $54=($53) & 268435456; //@line 572 "stringio.c"
        var $55=($54)==0; //@line 572 "stringio.c"
        if ($55) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 572 "stringio.c"
      case 14: // $bb15
        var $56=HEAP[$value]; //@line 573 "stringio.c"
        var $57=$56+4; //@line 573 "stringio.c"
        var $58=HEAP[$57]; //@line 573 "stringio.c"
        var $59=$58+12; //@line 573 "stringio.c"
        var $60=HEAP[$59]; //@line 573 "stringio.c"
        var $61=HEAP[_PyExc_TypeError]; //@line 573 "stringio.c"
        var $62=_PyErr_Format($61, __str28347, allocate([$60,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 573 "stringio.c"
        $0=-1; //@line 576 "stringio.c"
        __label__ = 45; break; //@line 576 "stringio.c"
      case 15: // $bb16
        var $63=$self_addr; //@line 579 "stringio.c"
        var $64=$63+24; //@line 579 "stringio.c"
        HEAP[$64]=0; //@line 579 "stringio.c"
        var $65=$self_addr; //@line 581 "stringio.c"
        var $66=$65+32; //@line 581 "stringio.c"
        var $67=HEAP[$66]; //@line 581 "stringio.c"
        var $68=($67)!=0; //@line 581 "stringio.c"
        if ($68) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 581 "stringio.c"
      case 16: // $bb17
        var $69=$self_addr; //@line 581 "stringio.c"
        var $70=$69+32; //@line 581 "stringio.c"
        var $71=HEAP[$70]; //@line 581 "stringio.c"
        $_py_tmp=$71; //@line 581 "stringio.c"
        var $72=$self_addr; //@line 581 "stringio.c"
        var $73=$72+32; //@line 581 "stringio.c"
        HEAP[$73]=0; //@line 581 "stringio.c"
        var $74=$_py_tmp; //@line 581 "stringio.c"
        var $75=$74; //@line 581 "stringio.c"
        var $76=HEAP[$75]; //@line 581 "stringio.c"
        var $77=($76) - 1; //@line 581 "stringio.c"
        var $78=$_py_tmp; //@line 581 "stringio.c"
        var $79=$78; //@line 581 "stringio.c"
        HEAP[$79]=$77; //@line 581 "stringio.c"
        var $80=$_py_tmp; //@line 581 "stringio.c"
        var $81=$80; //@line 581 "stringio.c"
        var $82=HEAP[$81]; //@line 581 "stringio.c"
        var $83=($82)==0; //@line 581 "stringio.c"
        if ($83) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 581 "stringio.c"
      case 17: // $bb18
        var $84=$_py_tmp; //@line 581 "stringio.c"
        var $85=$84+4; //@line 581 "stringio.c"
        var $86=HEAP[$85]; //@line 581 "stringio.c"
        var $87=$86+24; //@line 581 "stringio.c"
        var $88=HEAP[$87]; //@line 581 "stringio.c"
        var $89=$_py_tmp; //@line 581 "stringio.c"
        FUNCTION_TABLE[$88]($89); //@line 581 "stringio.c"
        __label__ = 18; break; //@line 581 "stringio.c"
      case 18: // $bb19
        var $90=$self_addr; //@line 582 "stringio.c"
        var $91=$90+36; //@line 582 "stringio.c"
        var $92=HEAP[$91]; //@line 582 "stringio.c"
        var $93=($92)!=0; //@line 582 "stringio.c"
        if ($93) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 582 "stringio.c"
      case 19: // $bb20
        var $94=$self_addr; //@line 582 "stringio.c"
        var $95=$94+36; //@line 582 "stringio.c"
        var $96=HEAP[$95]; //@line 582 "stringio.c"
        $_py_tmp21=$96; //@line 582 "stringio.c"
        var $97=$self_addr; //@line 582 "stringio.c"
        var $98=$97+36; //@line 582 "stringio.c"
        HEAP[$98]=0; //@line 582 "stringio.c"
        var $99=$_py_tmp21; //@line 582 "stringio.c"
        var $100=$99; //@line 582 "stringio.c"
        var $101=HEAP[$100]; //@line 582 "stringio.c"
        var $102=($101) - 1; //@line 582 "stringio.c"
        var $103=$_py_tmp21; //@line 582 "stringio.c"
        var $104=$103; //@line 582 "stringio.c"
        HEAP[$104]=$102; //@line 582 "stringio.c"
        var $105=$_py_tmp21; //@line 582 "stringio.c"
        var $106=$105; //@line 582 "stringio.c"
        var $107=HEAP[$106]; //@line 582 "stringio.c"
        var $108=($107)==0; //@line 582 "stringio.c"
        if ($108) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 582 "stringio.c"
      case 20: // $bb22
        var $109=$_py_tmp21; //@line 582 "stringio.c"
        var $110=$109+4; //@line 582 "stringio.c"
        var $111=HEAP[$110]; //@line 582 "stringio.c"
        var $112=$111+24; //@line 582 "stringio.c"
        var $113=HEAP[$112]; //@line 582 "stringio.c"
        var $114=$_py_tmp21; //@line 582 "stringio.c"
        FUNCTION_TABLE[$113]($114); //@line 582 "stringio.c"
        __label__ = 21; break; //@line 582 "stringio.c"
      case 21: // $bb23
        var $115=$self_addr; //@line 583 "stringio.c"
        var $116=$115+28; //@line 583 "stringio.c"
        var $117=HEAP[$116]; //@line 583 "stringio.c"
        var $118=($117)!=0; //@line 583 "stringio.c"
        if ($118) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 583 "stringio.c"
      case 22: // $bb24
        var $119=$self_addr; //@line 583 "stringio.c"
        var $120=$119+28; //@line 583 "stringio.c"
        var $121=HEAP[$120]; //@line 583 "stringio.c"
        $_py_tmp25=$121; //@line 583 "stringio.c"
        var $122=$self_addr; //@line 583 "stringio.c"
        var $123=$122+28; //@line 583 "stringio.c"
        HEAP[$123]=0; //@line 583 "stringio.c"
        var $124=$_py_tmp25; //@line 583 "stringio.c"
        var $125=$124; //@line 583 "stringio.c"
        var $126=HEAP[$125]; //@line 583 "stringio.c"
        var $127=($126) - 1; //@line 583 "stringio.c"
        var $128=$_py_tmp25; //@line 583 "stringio.c"
        var $129=$128; //@line 583 "stringio.c"
        HEAP[$129]=$127; //@line 583 "stringio.c"
        var $130=$_py_tmp25; //@line 583 "stringio.c"
        var $131=$130; //@line 583 "stringio.c"
        var $132=HEAP[$131]; //@line 583 "stringio.c"
        var $133=($132)==0; //@line 583 "stringio.c"
        if ($133) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 583 "stringio.c"
      case 23: // $bb26
        var $134=$_py_tmp25; //@line 583 "stringio.c"
        var $135=$134+4; //@line 583 "stringio.c"
        var $136=HEAP[$135]; //@line 583 "stringio.c"
        var $137=$136+24; //@line 583 "stringio.c"
        var $138=HEAP[$137]; //@line 583 "stringio.c"
        var $139=$_py_tmp25; //@line 583 "stringio.c"
        FUNCTION_TABLE[$138]($139); //@line 583 "stringio.c"
        __label__ = 24; break; //@line 583 "stringio.c"
      case 24: // $bb27
        var $140=HEAP[$newline]; //@line 585 "stringio.c"
        var $141=($140)!=0; //@line 585 "stringio.c"
        if ($141) { __label__ = 25; break; } else { __label__ = 29; break; } //@line 585 "stringio.c"
      case 25: // $bb28
        var $142=HEAP[$newline]; //@line 586 "stringio.c"
        var $143=_PyString_FromString($142); //@line 586 "stringio.c"
        var $144=$self_addr; //@line 586 "stringio.c"
        var $145=$144+32; //@line 586 "stringio.c"
        HEAP[$145]=$143; //@line 586 "stringio.c"
        var $146=$self_addr; //@line 587 "stringio.c"
        var $147=$146+32; //@line 587 "stringio.c"
        var $148=HEAP[$147]; //@line 587 "stringio.c"
        var $149=($148)==0; //@line 587 "stringio.c"
        if ($149) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 587 "stringio.c"
      case 26: // $bb29
        $0=-1; //@line 588 "stringio.c"
        __label__ = 45; break; //@line 588 "stringio.c"
      case 27: // $bb30
        var $_pr=HEAP[$newline];
        var $150=($_pr)==0; //@line 590 "stringio.c"
        if ($150) { __label__ = 29; break; } else { __label__ = 28; break; } //@line 590 "stringio.c"
      case 28: // $bb31
        var $151=HEAP[$newline]; //@line 590 "stringio.c"
        var $152=$151; //@line 590 "stringio.c"
        var $153=HEAP[$152]; //@line 590 "stringio.c"
        var $154=($153)==0; //@line 590 "stringio.c"
        if ($154) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 590 "stringio.c"
      case 29: // $bb32
        $iftmp_90=1; //@line 590 "stringio.c"
        __label__ = 31; break; //@line 590 "stringio.c"
      case 30: // $bb33
        $iftmp_90=0; //@line 590 "stringio.c"
        __label__ = 31; break; //@line 590 "stringio.c"
      case 31: // $bb34
        var $155=$iftmp_90; //@line 590 "stringio.c"
        var $156=((($155)) & 255); //@line 590 "stringio.c"
        var $157=$self_addr; //@line 590 "stringio.c"
        var $158=$157+26; //@line 590 "stringio.c"
        HEAP[$158]=$156; //@line 590 "stringio.c"
        var $159=HEAP[$newline]; //@line 591 "stringio.c"
        var $160=($159)==0; //@line 591 "stringio.c"
        var $161=($160); //@line 591 "stringio.c"
        var $162=$self_addr; //@line 591 "stringio.c"
        var $163=$162+27; //@line 591 "stringio.c"
        HEAP[$163]=$161; //@line 591 "stringio.c"
        var $164=HEAP[$newline]; //@line 598 "stringio.c"
        var $165=($164)!=0; //@line 598 "stringio.c"
        if ($165) { __label__ = 32; break; } else { __label__ = 34; break; } //@line 598 "stringio.c"
      case 32: // $bb35
        var $166=HEAP[$newline]; //@line 598 "stringio.c"
        var $167=$166; //@line 598 "stringio.c"
        var $168=HEAP[$167]; //@line 598 "stringio.c"
        var $169=($168)==13; //@line 598 "stringio.c"
        if ($169) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 598 "stringio.c"
      case 33: // $bb36
        var $170=HEAP[$newline]; //@line 599 "stringio.c"
        var $171=_PyUnicodeUCS2_FromString($170); //@line 599 "stringio.c"
        var $172=$self_addr; //@line 599 "stringio.c"
        var $173=$172+36; //@line 599 "stringio.c"
        HEAP[$173]=$171; //@line 599 "stringio.c"
        __label__ = 34; break; //@line 599 "stringio.c"
      case 34: // $bb37
        var $174=$self_addr; //@line 602 "stringio.c"
        var $175=$174+26; //@line 602 "stringio.c"
        var $176=HEAP[$175]; //@line 602 "stringio.c"
        var $177=($176)!=0; //@line 602 "stringio.c"
        if ($177) { __label__ = 35; break; } else { __label__ = 37; break; } //@line 602 "stringio.c"
      case 35: // $bb38
        var $178=$self_addr; //@line 603 "stringio.c"
        var $179=$178+27; //@line 603 "stringio.c"
        var $180=HEAP[$179]; //@line 603 "stringio.c"
        var $181=($180); //@line 603 "stringio.c"
        var $182=__PyObject_CallFunction_SizeT(_PyIncrementalNewlineDecoder_Type, __str29348, allocate([__Py_NoneStruct,0,0,0,$181,0,0,0], ["%struct.PyObject*",0,0,0,"i32",0,0,0], ALLOC_STACK)); //@line 603 "stringio.c"
        var $183=$self_addr; //@line 603 "stringio.c"
        var $184=$183+28; //@line 603 "stringio.c"
        HEAP[$184]=$182; //@line 603 "stringio.c"
        var $185=$self_addr; //@line 606 "stringio.c"
        var $186=$185+28; //@line 606 "stringio.c"
        var $187=HEAP[$186]; //@line 606 "stringio.c"
        var $188=($187)==0; //@line 606 "stringio.c"
        if ($188) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 606 "stringio.c"
      case 36: // $bb39
        $0=-1; //@line 607 "stringio.c"
        __label__ = 45; break; //@line 607 "stringio.c"
      case 37: // $bb40
        var $189=$self_addr; //@line 612 "stringio.c"
        var $190=$189+16; //@line 612 "stringio.c"
        HEAP[$190]=0; //@line 612 "stringio.c"
        var $191=HEAP[$value]; //@line 613 "stringio.c"
        var $192=($191)==0; //@line 613 "stringio.c"
        var $193=HEAP[$value]; //@line 613 "stringio.c"
        var $194=($193)==(__Py_NoneStruct); //@line 613 "stringio.c"
        var $or_cond3=($192) | ($194);
        if ($or_cond3) { __label__ = 42; break; } else { __label__ = 38; break; } //@line 613 "stringio.c"
      case 38: // $bb42
        var $195=HEAP[$value]; //@line 614 "stringio.c"
        var $196=_PyUnicodeUCS2_GetSize($195); //@line 614 "stringio.c"
        $len=$196; //@line 614 "stringio.c"
        var $197=$len; //@line 617 "stringio.c"
        var $198=$self_addr; //@line 617 "stringio.c"
        var $199=_resize_buffer373($198, $197); //@line 617 "stringio.c"
        var $200=($199) < 0; //@line 617 "stringio.c"
        if ($200) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 617 "stringio.c"
      case 39: // $bb43
        $0=-1; //@line 618 "stringio.c"
        __label__ = 45; break; //@line 618 "stringio.c"
      case 40: // $bb44
        var $201=$self_addr; //@line 619 "stringio.c"
        var $202=$201+12; //@line 619 "stringio.c"
        HEAP[$202]=0; //@line 619 "stringio.c"
        var $203=HEAP[$value]; //@line 620 "stringio.c"
        var $204=$self_addr; //@line 620 "stringio.c"
        var $205=_write_str($204, $203); //@line 620 "stringio.c"
        var $206=($205) < 0; //@line 620 "stringio.c"
        if ($206) { __label__ = 41; break; } else { __label__ = 44; break; } //@line 620 "stringio.c"
      case 41: // $bb45
        $0=-1; //@line 621 "stringio.c"
        __label__ = 45; break; //@line 621 "stringio.c"
      case 42: // $bb47
        var $207=$self_addr; //@line 624 "stringio.c"
        var $208=_resize_buffer373($207, 0); //@line 624 "stringio.c"
        var $209=($208) < 0; //@line 624 "stringio.c"
        if ($209) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 624 "stringio.c"
      case 43: // $bb48
        $0=-1; //@line 625 "stringio.c"
        __label__ = 45; break; //@line 625 "stringio.c"
      case 44: // $bb49
        var $210=$self_addr; //@line 627 "stringio.c"
        var $211=$210+12; //@line 627 "stringio.c"
        HEAP[$211]=0; //@line 627 "stringio.c"
        var $212=$self_addr; //@line 629 "stringio.c"
        var $213=$212+25; //@line 629 "stringio.c"
        HEAP[$213]=0; //@line 629 "stringio.c"
        var $214=$self_addr; //@line 630 "stringio.c"
        var $215=$214+24; //@line 630 "stringio.c"
        HEAP[$215]=1; //@line 630 "stringio.c"
        $0=0; //@line 631 "stringio.c"
        __label__ = 45; break; //@line 631 "stringio.c"
      case 45: // $bb50
        var $216=$0; //@line 562 "stringio.c"
        $retval=$216; //@line 562 "stringio.c"
        var $retval51=$retval; //@line 562 "stringio.c"
        STACKTOP = __stackBase__;
        return $retval51; //@line 562 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_seekable($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 638 "stringio.c"
        var $2=$1+24; //@line 638 "stringio.c"
        var $3=HEAP[$2]; //@line 638 "stringio.c"
        var $4=($3) <= 0; //@line 638 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 638 "stringio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 638 "stringio.c"
        _PyErr_SetString($5, __str12); //@line 638 "stringio.c"
        $0=0; //@line 638 "stringio.c"
        __label__ = 3; break; //@line 638 "stringio.c"
      case 2: // $bb1
        var $6=HEAP[__Py_TrueStruct]; //@line 639 "stringio.c"
        var $7=($6) + 1; //@line 639 "stringio.c"
        HEAP[__Py_TrueStruct]=$7; //@line 639 "stringio.c"
        $0=__Py_TrueStruct; //@line 639 "stringio.c"
        __label__ = 3; break; //@line 639 "stringio.c"
      case 3: // $bb2
        var $8=$0; //@line 638 "stringio.c"
        $retval=$8; //@line 638 "stringio.c"
        var $retval3=$retval; //@line 638 "stringio.c"
        ;
        return $retval3; //@line 638 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_readable($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 645 "stringio.c"
        var $2=$1+24; //@line 645 "stringio.c"
        var $3=HEAP[$2]; //@line 645 "stringio.c"
        var $4=($3) <= 0; //@line 645 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 645 "stringio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 645 "stringio.c"
        _PyErr_SetString($5, __str12); //@line 645 "stringio.c"
        $0=0; //@line 645 "stringio.c"
        __label__ = 3; break; //@line 645 "stringio.c"
      case 2: // $bb1
        var $6=HEAP[__Py_TrueStruct]; //@line 646 "stringio.c"
        var $7=($6) + 1; //@line 646 "stringio.c"
        HEAP[__Py_TrueStruct]=$7; //@line 646 "stringio.c"
        $0=__Py_TrueStruct; //@line 646 "stringio.c"
        __label__ = 3; break; //@line 646 "stringio.c"
      case 3: // $bb2
        var $8=$0; //@line 645 "stringio.c"
        $retval=$8; //@line 645 "stringio.c"
        var $retval3=$retval; //@line 645 "stringio.c"
        ;
        return $retval3; //@line 645 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_writable($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 652 "stringio.c"
        var $2=$1+24; //@line 652 "stringio.c"
        var $3=HEAP[$2]; //@line 652 "stringio.c"
        var $4=($3) <= 0; //@line 652 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 652 "stringio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 652 "stringio.c"
        _PyErr_SetString($5, __str12); //@line 652 "stringio.c"
        $0=0; //@line 652 "stringio.c"
        __label__ = 3; break; //@line 652 "stringio.c"
      case 2: // $bb1
        var $6=HEAP[__Py_TrueStruct]; //@line 653 "stringio.c"
        var $7=($6) + 1; //@line 653 "stringio.c"
        HEAP[__Py_TrueStruct]=$7; //@line 653 "stringio.c"
        $0=__Py_TrueStruct; //@line 653 "stringio.c"
        __label__ = 3; break; //@line 653 "stringio.c"
      case 3: // $bb2
        var $8=$0; //@line 652 "stringio.c"
        $retval=$8; //@line 652 "stringio.c"
        var $retval3=$retval; //@line 652 "stringio.c"
        ;
        return $retval3; //@line 652 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_getstate($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $iftmp_109;
        var $0;
        var $initvalue;
        var $dict;
        var $state;
        $self_addr=$self;
        var $1=$self_addr; //@line 671 "stringio.c"
        var $2=_stringio_getvalue($1); //@line 671 "stringio.c"
        $initvalue=$2; //@line 671 "stringio.c"
        var $3=$initvalue; //@line 675 "stringio.c"
        var $4=($3)==0; //@line 675 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 675 "stringio.c"
      case 1: // $bb
        $0=0; //@line 676 "stringio.c"
        __label__ = 12; break; //@line 676 "stringio.c"
      case 2: // $bb1
        var $5=$self_addr; //@line 677 "stringio.c"
        var $6=$5+40; //@line 677 "stringio.c"
        var $7=HEAP[$6]; //@line 677 "stringio.c"
        var $8=($7)==0; //@line 677 "stringio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 677 "stringio.c"
      case 3: // $bb2
        var $9=HEAP[__Py_NoneStruct]; //@line 678 "stringio.c"
        var $10=($9) + 1; //@line 678 "stringio.c"
        HEAP[__Py_NoneStruct]=$10; //@line 678 "stringio.c"
        $dict=__Py_NoneStruct; //@line 679 "stringio.c"
        __label__ = 6; break; //@line 679 "stringio.c"
      case 4: // $bb3
        var $11=$self_addr; //@line 682 "stringio.c"
        var $12=$11+40; //@line 682 "stringio.c"
        var $13=HEAP[$12]; //@line 682 "stringio.c"
        var $14=_PyDict_Copy($13); //@line 682 "stringio.c"
        $dict=$14; //@line 682 "stringio.c"
        var $15=$dict; //@line 683 "stringio.c"
        var $16=($15)==0; //@line 683 "stringio.c"
        if ($16) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 683 "stringio.c"
      case 5: // $bb4
        $0=0; //@line 684 "stringio.c"
        __label__ = 12; break; //@line 684 "stringio.c"
      case 6: // $bb5
        var $17=$self_addr; //@line 687 "stringio.c"
        var $18=$17+12; //@line 687 "stringio.c"
        var $19=HEAP[$18]; //@line 687 "stringio.c"
        var $20=$self_addr; //@line 687 "stringio.c"
        var $21=$20+32; //@line 687 "stringio.c"
        var $22=HEAP[$21]; //@line 687 "stringio.c"
        var $23=($22)!=0; //@line 687 "stringio.c"
        if ($23) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 687 "stringio.c"
      case 7: // $bb6
        var $24=$self_addr; //@line 687 "stringio.c"
        var $25=$24+32; //@line 687 "stringio.c"
        var $26=HEAP[$25]; //@line 687 "stringio.c"
        $iftmp_109=$26; //@line 687 "stringio.c"
        __label__ = 9; break; //@line 687 "stringio.c"
      case 8: // $bb7
        $iftmp_109=__Py_NoneStruct; //@line 687 "stringio.c"
        __label__ = 9; break; //@line 687 "stringio.c"
      case 9: // $bb8
        var $27=$initvalue; //@line 687 "stringio.c"
        var $28=$iftmp_109; //@line 687 "stringio.c"
        var $29=$dict; //@line 687 "stringio.c"
        var $30=__Py_BuildValue_SizeT(__str30349, allocate([$27,0,0,0,$28,0,0,0,$19,0,0,0,$29,0,0,0], ["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"i32",0,0,0,"%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 687 "stringio.c"
        $state=$30; //@line 687 "stringio.c"
        var $31=$initvalue; //@line 690 "stringio.c"
        var $32=$31; //@line 690 "stringio.c"
        var $33=HEAP[$32]; //@line 690 "stringio.c"
        var $34=($33) - 1; //@line 690 "stringio.c"
        var $35=$initvalue; //@line 690 "stringio.c"
        var $36=$35; //@line 690 "stringio.c"
        HEAP[$36]=$34; //@line 690 "stringio.c"
        var $37=$initvalue; //@line 690 "stringio.c"
        var $38=$37; //@line 690 "stringio.c"
        var $39=HEAP[$38]; //@line 690 "stringio.c"
        var $40=($39)==0; //@line 690 "stringio.c"
        if ($40) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 690 "stringio.c"
      case 10: // $bb9
        var $41=$initvalue; //@line 690 "stringio.c"
        var $42=$41+4; //@line 690 "stringio.c"
        var $43=HEAP[$42]; //@line 690 "stringio.c"
        var $44=$43+24; //@line 690 "stringio.c"
        var $45=HEAP[$44]; //@line 690 "stringio.c"
        var $46=$initvalue; //@line 690 "stringio.c"
        FUNCTION_TABLE[$45]($46); //@line 690 "stringio.c"
        __label__ = 11; break; //@line 690 "stringio.c"
      case 11: // $bb10
        var $47=$state; //@line 691 "stringio.c"
        $0=$47; //@line 691 "stringio.c"
        __label__ = 12; break; //@line 691 "stringio.c"
      case 12: // $bb11
        var $48=$0; //@line 676 "stringio.c"
        $retval=$48; //@line 676 "stringio.c"
        var $retval12=$retval; //@line 676 "stringio.c"
        ;
        return $retval12; //@line 676 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_setstate($self, $state) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $state_addr;
        var $retval;
        var $0;
        var $initarg;
        var $position_obj;
        var $dict;
        var $pos;
        var $buf;
        var $bufsize;
        $self_addr=$self;
        $state_addr=$state;
        var $1=$state_addr; //@line 702 "stringio.c"
        var $2=($1)==0; //@line 702 "stringio.c"
        if ($2) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 702 "stringio.c"
      case 1: // $bb
        ___assert_fail(__str31350, __str1320, 702, ___PRETTY_FUNCTION___9352); //@line 702 "stringio.c"
        throw "Reached an unreachable!" //@line 702 "stringio.c"
      case 2: // $bb1
        var $3=$self_addr; //@line 703 "stringio.c"
        var $4=$3+25; //@line 703 "stringio.c"
        var $5=HEAP[$4]; //@line 703 "stringio.c"
        var $6=($5)!=0; //@line 703 "stringio.c"
        if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 703 "stringio.c"
      case 3: // $bb2
        var $7=HEAP[_PyExc_ValueError]; //@line 703 "stringio.c"
        _PyErr_SetString($7, __str8327); //@line 703 "stringio.c"
        $0=0; //@line 703 "stringio.c"
        __label__ = 35; break; //@line 703 "stringio.c"
      case 4: // $bb3
        var $8=$state_addr; //@line 708 "stringio.c"
        var $9=$8+4; //@line 708 "stringio.c"
        var $10=HEAP[$9]; //@line 708 "stringio.c"
        var $11=$10+84; //@line 708 "stringio.c"
        var $12=HEAP[$11]; //@line 708 "stringio.c"
        var $13=($12) & 67108864; //@line 708 "stringio.c"
        var $14=($13)==0; //@line 708 "stringio.c"
        if ($14) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 708 "stringio.c"
      case 5: // $bb4
        var $15=$state_addr; //@line 708 "stringio.c"
        var $16=$15; //@line 708 "stringio.c"
        var $17=$16+8; //@line 708 "stringio.c"
        var $18=HEAP[$17]; //@line 708 "stringio.c"
        var $19=($18) <= 3; //@line 708 "stringio.c"
        if ($19) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 708 "stringio.c"
      case 6: // $bb5
        var $20=$state_addr; //@line 709 "stringio.c"
        var $21=$20+4; //@line 709 "stringio.c"
        var $22=HEAP[$21]; //@line 709 "stringio.c"
        var $23=$22+12; //@line 709 "stringio.c"
        var $24=HEAP[$23]; //@line 709 "stringio.c"
        var $25=$self_addr; //@line 709 "stringio.c"
        var $26=$25; //@line 709 "stringio.c"
        var $27=$26+4; //@line 709 "stringio.c"
        var $28=HEAP[$27]; //@line 709 "stringio.c"
        var $29=$28+12; //@line 709 "stringio.c"
        var $30=HEAP[$29]; //@line 709 "stringio.c"
        var $31=HEAP[_PyExc_TypeError]; //@line 709 "stringio.c"
        var $32=_PyErr_Format($31, __str32351, allocate([$30,0,0,0,$24,0,0,0], ["i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 709 "stringio.c"
        $0=0; //@line 712 "stringio.c"
        __label__ = 35; break; //@line 712 "stringio.c"
      case 7: // $bb6
        var $33=$state_addr; //@line 716 "stringio.c"
        var $34=_PyTuple_GetSlice($33, 0, 2); //@line 716 "stringio.c"
        $initarg=$34; //@line 716 "stringio.c"
        var $35=$initarg; //@line 717 "stringio.c"
        var $36=($35)==0; //@line 717 "stringio.c"
        if ($36) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 717 "stringio.c"
      case 8: // $bb7
        $0=0; //@line 718 "stringio.c"
        __label__ = 35; break; //@line 718 "stringio.c"
      case 9: // $bb8
        var $37=$self_addr; //@line 719 "stringio.c"
        var $38=$initarg; //@line 719 "stringio.c"
        var $39=_stringio_init($37, $38, 0); //@line 719 "stringio.c"
        var $40=($39) < 0; //@line 719 "stringio.c"
        var $41=$initarg; //@line 720 "stringio.c"
        var $42=$41; //@line 720 "stringio.c"
        var $43=HEAP[$42]; //@line 720 "stringio.c"
        var $44=($43) - 1; //@line 720 "stringio.c"
        var $45=$initarg; //@line 720 "stringio.c"
        var $46=$45; //@line 720 "stringio.c"
        HEAP[$46]=$44; //@line 720 "stringio.c"
        var $47=$initarg; //@line 720 "stringio.c"
        var $48=$47; //@line 720 "stringio.c"
        var $49=HEAP[$48]; //@line 720 "stringio.c"
        var $50=($49)==0; //@line 720 "stringio.c"
        if ($40) { __label__ = 10; break; } else { __label__ = 13; break; } //@line 719 "stringio.c"
      case 10: // $bb9
        if ($50) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 720 "stringio.c"
      case 11: // $bb10
        var $51=$initarg; //@line 720 "stringio.c"
        var $52=$51+4; //@line 720 "stringio.c"
        var $53=HEAP[$52]; //@line 720 "stringio.c"
        var $54=$53+24; //@line 720 "stringio.c"
        var $55=HEAP[$54]; //@line 720 "stringio.c"
        var $56=$initarg; //@line 720 "stringio.c"
        FUNCTION_TABLE[$55]($56); //@line 720 "stringio.c"
        __label__ = 12; break; //@line 720 "stringio.c"
      case 12: // $bb11
        $0=0; //@line 721 "stringio.c"
        __label__ = 35; break; //@line 721 "stringio.c"
      case 13: // $bb12
        if ($50) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 723 "stringio.c"
      case 14: // $bb13
        var $57=$initarg; //@line 723 "stringio.c"
        var $58=$57+4; //@line 723 "stringio.c"
        var $59=HEAP[$58]; //@line 723 "stringio.c"
        var $60=$59+24; //@line 723 "stringio.c"
        var $61=HEAP[$60]; //@line 723 "stringio.c"
        var $62=$initarg; //@line 723 "stringio.c"
        FUNCTION_TABLE[$61]($62); //@line 723 "stringio.c"
        __label__ = 15; break; //@line 723 "stringio.c"
      case 15: // $bb14
        var $63=$state_addr; //@line 732 "stringio.c"
        var $64=$63; //@line 732 "stringio.c"
        var $65=$64+12; //@line 732 "stringio.c"
        var $66=$65; //@line 732 "stringio.c"
        var $67=HEAP[$66]; //@line 732 "stringio.c"
        var $68=$67; //@line 732 "stringio.c"
        var $69=$68+12; //@line 732 "stringio.c"
        var $70=HEAP[$69]; //@line 732 "stringio.c"
        $buf=$70; //@line 732 "stringio.c"
        var $71=$state_addr; //@line 733 "stringio.c"
        var $72=$71; //@line 733 "stringio.c"
        var $73=$72+12; //@line 733 "stringio.c"
        var $74=$73; //@line 733 "stringio.c"
        var $75=HEAP[$74]; //@line 733 "stringio.c"
        var $76=$75; //@line 733 "stringio.c"
        var $77=$76+8; //@line 733 "stringio.c"
        var $78=HEAP[$77]; //@line 733 "stringio.c"
        $bufsize=$78; //@line 733 "stringio.c"
        var $79=$bufsize; //@line 734 "stringio.c"
        var $80=$self_addr; //@line 734 "stringio.c"
        var $81=_resize_buffer373($80, $79); //@line 734 "stringio.c"
        var $82=($81) < 0; //@line 734 "stringio.c"
        if ($82) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 734 "stringio.c"
      case 16: // $bb15
        $0=0; //@line 735 "stringio.c"
        __label__ = 35; break; //@line 735 "stringio.c"
      case 17: // $bb16
        var $83=$bufsize; //@line 736 "stringio.c"
        var $84=($83) * 2; //@line 736 "stringio.c"
        var $85=$self_addr; //@line 736 "stringio.c"
        var $86=$85+8; //@line 736 "stringio.c"
        var $87=HEAP[$86]; //@line 736 "stringio.c"
        var $88=$buf; //@line 736 "stringio.c"
        var $89=$87; //@line 736 "stringio.c"
        var $90=$88; //@line 736 "stringio.c"
        _llvm_memcpy_p0i8_p0i8_i32($89, $90, $84, 1, 0); //@line 736 "stringio.c"
        var $91=$self_addr; //@line 737 "stringio.c"
        var $92=$91+16; //@line 737 "stringio.c"
        var $93=$bufsize; //@line 737 "stringio.c"
        HEAP[$92]=$93; //@line 737 "stringio.c"
        var $94=$state_addr; //@line 743 "stringio.c"
        var $95=$94; //@line 743 "stringio.c"
        var $96=$95+12; //@line 743 "stringio.c"
        var $97=$96+8; //@line 743 "stringio.c"
        var $98=HEAP[$97]; //@line 743 "stringio.c"
        $position_obj=$98; //@line 743 "stringio.c"
        var $99=$position_obj; //@line 744 "stringio.c"
        var $100=$99+4; //@line 744 "stringio.c"
        var $101=HEAP[$100]; //@line 744 "stringio.c"
        var $102=$101+48; //@line 744 "stringio.c"
        var $103=HEAP[$102]; //@line 744 "stringio.c"
        var $104=($103)==0; //@line 744 "stringio.c"
        if ($104) { __label__ = 20; break; } else { __label__ = 18; break; } //@line 744 "stringio.c"
      case 18: // $bb17
        var $105=$position_obj; //@line 744 "stringio.c"
        var $106=$105+4; //@line 744 "stringio.c"
        var $107=HEAP[$106]; //@line 744 "stringio.c"
        var $108=$107+84; //@line 744 "stringio.c"
        var $109=HEAP[$108]; //@line 744 "stringio.c"
        var $110=($109) & 131072; //@line 744 "stringio.c"
        var $111=($110)==0; //@line 744 "stringio.c"
        if ($111) { __label__ = 20; break; } else { __label__ = 19; break; } //@line 744 "stringio.c"
      case 19: // $bb18
        var $112=$position_obj; //@line 744 "stringio.c"
        var $113=$112+4; //@line 744 "stringio.c"
        var $114=HEAP[$113]; //@line 744 "stringio.c"
        var $115=$114+48; //@line 744 "stringio.c"
        var $116=HEAP[$115]; //@line 744 "stringio.c"
        var $117=$116+152; //@line 744 "stringio.c"
        var $118=HEAP[$117]; //@line 744 "stringio.c"
        var $119=($118)==0; //@line 744 "stringio.c"
        if ($119) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 744 "stringio.c"
      case 20: // $bb19
        var $120=$position_obj; //@line 745 "stringio.c"
        var $121=$120+4; //@line 745 "stringio.c"
        var $122=HEAP[$121]; //@line 745 "stringio.c"
        var $123=$122+12; //@line 745 "stringio.c"
        var $124=HEAP[$123]; //@line 745 "stringio.c"
        var $125=HEAP[_PyExc_TypeError]; //@line 745 "stringio.c"
        var $126=_PyErr_Format($125, __str33352, allocate([$124,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 745 "stringio.c"
        $0=0; //@line 748 "stringio.c"
        __label__ = 35; break; //@line 748 "stringio.c"
      case 21: // $bb20
        var $127=HEAP[_PyExc_OverflowError]; //@line 750 "stringio.c"
        var $128=$position_obj; //@line 750 "stringio.c"
        var $129=_PyNumber_AsSsize_t($128, $127); //@line 750 "stringio.c"
        $pos=$129; //@line 750 "stringio.c"
        var $130=$pos; //@line 751 "stringio.c"
        var $131=($130)==-1; //@line 751 "stringio.c"
        if ($131) { __lastLabel__ = 21; __label__ = 22; break; } else { __lastLabel__ = 21; __label__ = 25; break; } //@line 751 "stringio.c"
      case 22: // $bb21
        var $132=_PyErr_Occurred(); //@line 751 "stringio.c"
        var $133=($132)!=0; //@line 751 "stringio.c"
        if ($133) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 751 "stringio.c"
      case 23: // $bb22
        $0=0; //@line 752 "stringio.c"
        __label__ = 35; break; //@line 752 "stringio.c"
      case 24: // $bb23thread_pre_split
        var $_pr=$pos;
        __lastLabel__ = 24; __label__ = 25; break;
      case 25: // $bb23
        var $134=__lastLabel__ == 24 ? $_pr : ($130);
        var $135=($134) < 0; //@line 753 "stringio.c"
        if ($135) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 753 "stringio.c"
      case 26: // $bb24
        var $136=HEAP[_PyExc_ValueError]; //@line 754 "stringio.c"
        _PyErr_SetString($136, __str34353); //@line 754 "stringio.c"
        $0=0; //@line 756 "stringio.c"
        __label__ = 35; break; //@line 756 "stringio.c"
      case 27: // $bb25
        var $137=$self_addr; //@line 758 "stringio.c"
        var $138=$137+12; //@line 758 "stringio.c"
        var $139=$pos; //@line 758 "stringio.c"
        HEAP[$138]=$139; //@line 758 "stringio.c"
        var $140=$state_addr; //@line 761 "stringio.c"
        var $141=$140; //@line 761 "stringio.c"
        var $142=$141+12; //@line 761 "stringio.c"
        var $143=$142+12; //@line 761 "stringio.c"
        var $144=HEAP[$143]; //@line 761 "stringio.c"
        $dict=$144; //@line 761 "stringio.c"
        var $145=$dict; //@line 762 "stringio.c"
        var $146=($145)!=(__Py_NoneStruct); //@line 762 "stringio.c"
        if ($146) { __label__ = 28; break; } else { __label__ = 34; break; } //@line 762 "stringio.c"
      case 28: // $bb26
        var $147=$dict; //@line 763 "stringio.c"
        var $148=$147+4; //@line 763 "stringio.c"
        var $149=HEAP[$148]; //@line 763 "stringio.c"
        var $150=$149+84; //@line 763 "stringio.c"
        var $151=HEAP[$150]; //@line 763 "stringio.c"
        var $152=($151) & 536870912; //@line 763 "stringio.c"
        var $153=($152)==0; //@line 763 "stringio.c"
        if ($153) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 763 "stringio.c"
      case 29: // $bb27
        var $154=$dict; //@line 764 "stringio.c"
        var $155=$154+4; //@line 764 "stringio.c"
        var $156=HEAP[$155]; //@line 764 "stringio.c"
        var $157=$156+12; //@line 764 "stringio.c"
        var $158=HEAP[$157]; //@line 764 "stringio.c"
        var $159=HEAP[_PyExc_TypeError]; //@line 764 "stringio.c"
        var $160=_PyErr_Format($159, __str35354, allocate([$158,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 764 "stringio.c"
        $0=0; //@line 767 "stringio.c"
        __label__ = 35; break; //@line 767 "stringio.c"
      case 30: // $bb28
        var $161=$self_addr; //@line 769 "stringio.c"
        var $162=$161+40; //@line 769 "stringio.c"
        var $163=HEAP[$162]; //@line 769 "stringio.c"
        var $164=($163)!=0; //@line 769 "stringio.c"
        if ($164) { __label__ = 31; break; } else { __label__ = 33; break; } //@line 769 "stringio.c"
      case 31: // $bb29
        var $165=$self_addr; //@line 772 "stringio.c"
        var $166=$165+40; //@line 772 "stringio.c"
        var $167=HEAP[$166]; //@line 772 "stringio.c"
        var $168=$dict; //@line 772 "stringio.c"
        var $169=_PyDict_Update($167, $168); //@line 772 "stringio.c"
        var $170=($169) < 0; //@line 772 "stringio.c"
        if ($170) { __label__ = 32; break; } else { __label__ = 34; break; } //@line 772 "stringio.c"
      case 32: // $bb30
        $0=0; //@line 773 "stringio.c"
        __label__ = 35; break; //@line 773 "stringio.c"
      case 33: // $bb32
        var $171=$dict; //@line 776 "stringio.c"
        var $172=$171; //@line 776 "stringio.c"
        var $173=HEAP[$172]; //@line 776 "stringio.c"
        var $174=($173) + 1; //@line 776 "stringio.c"
        var $175=$dict; //@line 776 "stringio.c"
        var $176=$175; //@line 776 "stringio.c"
        HEAP[$176]=$174; //@line 776 "stringio.c"
        var $177=$self_addr; //@line 777 "stringio.c"
        var $178=$177+40; //@line 777 "stringio.c"
        var $179=$dict; //@line 777 "stringio.c"
        HEAP[$178]=$179; //@line 777 "stringio.c"
        __label__ = 34; break; //@line 777 "stringio.c"
      case 34: // $bb33
        var $180=HEAP[__Py_NoneStruct]; //@line 781 "stringio.c"
        var $181=($180) + 1; //@line 781 "stringio.c"
        HEAP[__Py_NoneStruct]=$181; //@line 781 "stringio.c"
        $0=__Py_NoneStruct; //@line 781 "stringio.c"
        __label__ = 35; break; //@line 781 "stringio.c"
      case 35: // $bb34
        var $182=$0; //@line 703 "stringio.c"
        $retval=$182; //@line 703 "stringio.c"
        var $retval35=$retval; //@line 703 "stringio.c"
        ;
        return $retval35; //@line 703 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_closed($self, $context) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $context_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $context_addr=$context;
        var $1=$self_addr; //@line 788 "stringio.c"
        var $2=$1+24; //@line 788 "stringio.c"
        var $3=HEAP[$2]; //@line 788 "stringio.c"
        var $4=($3) <= 0; //@line 788 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 788 "stringio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 788 "stringio.c"
        _PyErr_SetString($5, __str12); //@line 788 "stringio.c"
        $0=0; //@line 788 "stringio.c"
        __label__ = 3; break; //@line 788 "stringio.c"
      case 2: // $bb1
        var $6=$self_addr; //@line 789 "stringio.c"
        var $7=$6+25; //@line 789 "stringio.c"
        var $8=HEAP[$7]; //@line 789 "stringio.c"
        var $9=($8); //@line 789 "stringio.c"
        var $10=_PyBool_FromLong($9); //@line 789 "stringio.c"
        $0=$10; //@line 789 "stringio.c"
        __label__ = 3; break; //@line 789 "stringio.c"
      case 3: // $bb2
        var $11=$0; //@line 788 "stringio.c"
        $retval=$11; //@line 788 "stringio.c"
        var $retval3=$retval; //@line 788 "stringio.c"
        ;
        return $retval3; //@line 788 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_line_buffering($self, $context) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $context_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $context_addr=$context;
        var $1=$self_addr; //@line 795 "stringio.c"
        var $2=$1+24; //@line 795 "stringio.c"
        var $3=HEAP[$2]; //@line 795 "stringio.c"
        var $4=($3) <= 0; //@line 795 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 795 "stringio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 795 "stringio.c"
        _PyErr_SetString($5, __str12); //@line 795 "stringio.c"
        $0=0; //@line 795 "stringio.c"
        __label__ = 5; break; //@line 795 "stringio.c"
      case 2: // $bb1
        var $6=$self_addr; //@line 796 "stringio.c"
        var $7=$6+25; //@line 796 "stringio.c"
        var $8=HEAP[$7]; //@line 796 "stringio.c"
        var $9=($8)!=0; //@line 796 "stringio.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 796 "stringio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 796 "stringio.c"
        _PyErr_SetString($10, __str8327); //@line 796 "stringio.c"
        $0=0; //@line 796 "stringio.c"
        __label__ = 5; break; //@line 796 "stringio.c"
      case 4: // $bb3
        var $11=HEAP[__Py_ZeroStruct]; //@line 797 "stringio.c"
        var $12=($11) + 1; //@line 797 "stringio.c"
        HEAP[__Py_ZeroStruct]=$12; //@line 797 "stringio.c"
        $0=__Py_ZeroStruct; //@line 797 "stringio.c"
        __label__ = 5; break; //@line 797 "stringio.c"
      case 5: // $bb4
        var $13=$0; //@line 795 "stringio.c"
        $retval=$13; //@line 795 "stringio.c"
        var $retval5=$retval; //@line 795 "stringio.c"
        ;
        return $retval5; //@line 795 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _stringio_newlines($self, $context) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $context_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $context_addr=$context;
        var $1=$self_addr; //@line 803 "stringio.c"
        var $2=$1+24; //@line 803 "stringio.c"
        var $3=HEAP[$2]; //@line 803 "stringio.c"
        var $4=($3) <= 0; //@line 803 "stringio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 803 "stringio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_ValueError]; //@line 803 "stringio.c"
        _PyErr_SetString($5, __str12); //@line 803 "stringio.c"
        $0=0; //@line 803 "stringio.c"
        __label__ = 7; break; //@line 803 "stringio.c"
      case 2: // $bb1
        var $6=$self_addr; //@line 804 "stringio.c"
        var $7=$6+25; //@line 804 "stringio.c"
        var $8=HEAP[$7]; //@line 804 "stringio.c"
        var $9=($8)!=0; //@line 804 "stringio.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 804 "stringio.c"
      case 3: // $bb2
        var $10=HEAP[_PyExc_ValueError]; //@line 804 "stringio.c"
        _PyErr_SetString($10, __str8327); //@line 804 "stringio.c"
        $0=0; //@line 804 "stringio.c"
        __label__ = 7; break; //@line 804 "stringio.c"
      case 4: // $bb3
        var $11=$self_addr; //@line 805 "stringio.c"
        var $12=$11+28; //@line 805 "stringio.c"
        var $13=HEAP[$12]; //@line 805 "stringio.c"
        var $14=($13)==0; //@line 805 "stringio.c"
        if ($14) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 805 "stringio.c"
      case 5: // $bb4
        var $15=HEAP[__Py_NoneStruct]; //@line 806 "stringio.c"
        var $16=($15) + 1; //@line 806 "stringio.c"
        HEAP[__Py_NoneStruct]=$16; //@line 806 "stringio.c"
        $0=__Py_NoneStruct; //@line 806 "stringio.c"
        __label__ = 7; break; //@line 806 "stringio.c"
      case 6: // $bb5
        var $17=HEAP[__PyIO_str_newlines]; //@line 807 "stringio.c"
        var $18=$self_addr; //@line 807 "stringio.c"
        var $19=$18+28; //@line 807 "stringio.c"
        var $20=HEAP[$19]; //@line 807 "stringio.c"
        var $21=_PyObject_GetAttr($20, $17); //@line 807 "stringio.c"
        $0=$21; //@line 807 "stringio.c"
        __label__ = 7; break; //@line 807 "stringio.c"
      case 7: // $bb6
        var $22=$0; //@line 803 "stringio.c"
        $retval=$22; //@line 803 "stringio.c"
        var $retval7=$retval; //@line 803 "stringio.c"
        ;
        return $retval7; //@line 803 "stringio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __unsupported($message) {
    ;
    var __label__;
  
    var $message_addr;
    var $retval;
    var $0;
    $message_addr=$message;
    var $1=HEAP[__PyIO_unsupported_operation]; //@line 27 "textio.c"
    var $2=$message_addr; //@line 27 "textio.c"
    _PyErr_SetString($1, $2); //@line 27 "textio.c"
    $0=0; //@line 28 "textio.c"
    var $3=$0; //@line 28 "textio.c"
    $retval=$3; //@line 28 "textio.c"
    var $retval1=$retval; //@line 28 "textio.c"
    ;
    return $retval1; //@line 28 "textio.c"
  }
  

  function _textiobase_detach($self) {
    ;
    var __label__;
  
    var $self_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    var $1=__unsupported(__str4); //@line 41 "textio.c"
    $0=$1; //@line 41 "textio.c"
    var $2=$0; //@line 41 "textio.c"
    $retval=$2; //@line 41 "textio.c"
    var $retval1=$retval; //@line 41 "textio.c"
    ;
    return $retval1; //@line 41 "textio.c"
  }
  

  function _textiobase_read($self, $args) {
    ;
    var __label__;
  
    var $self_addr;
    var $args_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $args_addr=$args;
    var $1=__unsupported(__str1375); //@line 54 "textio.c"
    $0=$1; //@line 54 "textio.c"
    var $2=$0; //@line 54 "textio.c"
    $retval=$2; //@line 54 "textio.c"
    var $retval1=$retval; //@line 54 "textio.c"
    ;
    return $retval1; //@line 54 "textio.c"
  }
  

  function _textiobase_readline($self, $args) {
    ;
    var __label__;
  
    var $self_addr;
    var $args_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $args_addr=$args;
    var $1=__unsupported(__str2376); //@line 66 "textio.c"
    $0=$1; //@line 66 "textio.c"
    var $2=$0; //@line 66 "textio.c"
    $retval=$2; //@line 66 "textio.c"
    var $retval1=$retval; //@line 66 "textio.c"
    ;
    return $retval1; //@line 66 "textio.c"
  }
  

  function _textiobase_write($self, $args) {
    ;
    var __label__;
  
    var $self_addr;
    var $args_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $args_addr=$args;
    var $1=__unsupported(__str3377); //@line 78 "textio.c"
    $0=$1; //@line 78 "textio.c"
    var $2=$0; //@line 78 "textio.c"
    $retval=$2; //@line 78 "textio.c"
    var $retval1=$retval; //@line 78 "textio.c"
    ;
    return $retval1; //@line 78 "textio.c"
  }
  

  function _textiobase_encoding_get($self, $context) {
    ;
    var __label__;
  
    var $self_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    var $1=HEAP[__Py_NoneStruct]; //@line 90 "textio.c"
    var $2=($1) + 1; //@line 90 "textio.c"
    HEAP[__Py_NoneStruct]=$2; //@line 90 "textio.c"
    $0=__Py_NoneStruct; //@line 90 "textio.c"
    var $3=$0; //@line 90 "textio.c"
    $retval=$3; //@line 90 "textio.c"
    var $retval1=$retval; //@line 90 "textio.c"
    ;
    return $retval1; //@line 90 "textio.c"
  }
  

  function _textiobase_newlines_get($self, $context) {
    ;
    var __label__;
  
    var $self_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    var $1=HEAP[__Py_NoneStruct]; //@line 104 "textio.c"
    var $2=($1) + 1; //@line 104 "textio.c"
    HEAP[__Py_NoneStruct]=$2; //@line 104 "textio.c"
    $0=__Py_NoneStruct; //@line 104 "textio.c"
    var $3=$0; //@line 104 "textio.c"
    $retval=$3; //@line 104 "textio.c"
    var $retval1=$retval; //@line 104 "textio.c"
    ;
    return $retval1; //@line 104 "textio.c"
  }
  

  function _textiobase_errors_get($self, $context) {
    ;
    var __label__;
  
    var $self_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    var $1=HEAP[__Py_NoneStruct]; //@line 116 "textio.c"
    var $2=($1) + 1; //@line 116 "textio.c"
    HEAP[__Py_NoneStruct]=$2; //@line 116 "textio.c"
    $0=__Py_NoneStruct; //@line 116 "textio.c"
    var $3=$0; //@line 116 "textio.c"
    $retval=$3; //@line 116 "textio.c"
    var $retval1=$retval; //@line 116 "textio.c"
    ;
    return $retval1; //@line 116 "textio.c"
  }
  

  function _incrementalnewlinedecoder_init($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 28; _memset(__stackBase__, 0, 28);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $kwds_addr;
        var $retval;
        var $0;
        var $decoder=__stackBase__;
        var $translate=__stackBase__+4;
        var $errors=__stackBase__+8;
        var $kwlist=__stackBase__+12;
        $self_addr=$self;
        $args_addr=$args;
        $kwds_addr=$kwds;
        HEAP[$errors]=0; //@line 204 "textio.c"
        var $1=$kwlist; //@line 205 "textio.c"
        HEAP[$1]=__str8383; //@line 205 "textio.c"
        var $2=$kwlist+4; //@line 205 "textio.c"
        HEAP[$2]=__str9384; //@line 205 "textio.c"
        var $3=$kwlist+8; //@line 205 "textio.c"
        HEAP[$3]=__str6380; //@line 205 "textio.c"
        var $4=$kwlist+12; //@line 205 "textio.c"
        HEAP[$4]=0; //@line 205 "textio.c"
        var $5=$args_addr; //@line 207 "textio.c"
        var $6=$kwds_addr; //@line 207 "textio.c"
        var $kwlist1=$kwlist; //@line 207 "textio.c"
        var $7=__PyArg_ParseTupleAndKeywords_SizeT($5, $6, __str10385, $kwlist1, allocate([$decoder,0,0,0,$translate,0,0,0,$errors,0,0,0], ["%struct.PyObject**",0,0,0,"i32*",0,0,0,"%struct.PyObject**",0,0,0], ALLOC_STACK)); //@line 207 "textio.c"
        var $8=($7)==0; //@line 207 "textio.c"
        if ($8) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 207 "textio.c"
      case 1: // $bb
        $0=-1; //@line 209 "textio.c"
        __label__ = 7; break; //@line 209 "textio.c"
      case 2: // $bb2
        var $9=HEAP[$decoder]; //@line 211 "textio.c"
        var $10=$self_addr; //@line 211 "textio.c"
        var $11=$10+8; //@line 211 "textio.c"
        HEAP[$11]=$9; //@line 211 "textio.c"
        var $12=HEAP[$decoder]; //@line 212 "textio.c"
        var $13=$12; //@line 212 "textio.c"
        var $14=HEAP[$13]; //@line 212 "textio.c"
        var $15=($14) + 1; //@line 212 "textio.c"
        var $16=$12; //@line 212 "textio.c"
        HEAP[$16]=$15; //@line 212 "textio.c"
        var $17=HEAP[$errors]; //@line 214 "textio.c"
        var $18=($17)==0; //@line 214 "textio.c"
        if ($18) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 214 "textio.c"
      case 3: // $bb3
        var $19=_PyUnicodeUCS2_FromString(__str11386); //@line 215 "textio.c"
        var $20=$self_addr; //@line 215 "textio.c"
        var $21=$20+12; //@line 215 "textio.c"
        HEAP[$21]=$19; //@line 215 "textio.c"
        var $22=$self_addr; //@line 216 "textio.c"
        var $23=$22+12; //@line 216 "textio.c"
        var $24=HEAP[$23]; //@line 216 "textio.c"
        var $25=($24)==0; //@line 216 "textio.c"
        if ($25) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 216 "textio.c"
      case 4: // $bb4
        $0=-1; //@line 217 "textio.c"
        __label__ = 7; break; //@line 217 "textio.c"
      case 5: // $bb6
        var $26=HEAP[$errors]; //@line 220 "textio.c"
        var $27=$26; //@line 220 "textio.c"
        var $28=HEAP[$27]; //@line 220 "textio.c"
        var $29=($28) + 1; //@line 220 "textio.c"
        var $30=$26; //@line 220 "textio.c"
        HEAP[$30]=$29; //@line 220 "textio.c"
        var $31=HEAP[$errors]; //@line 221 "textio.c"
        var $32=$self_addr; //@line 221 "textio.c"
        var $33=$32+12; //@line 221 "textio.c"
        HEAP[$33]=$31; //@line 221 "textio.c"
        __label__ = 6; break; //@line 221 "textio.c"
      case 6: // $bb7
        var $34=HEAP[$translate]; //@line 224 "textio.c"
        var $35=((($34)) & 255); //@line 224 "textio.c"
        var $36=((($35)) & 1); //@line 224 "textio.c"
        var $37=$self_addr; //@line 224 "textio.c"
        var $38=$37+16; //@line 224 "textio.c"
        var $39=($36); //@line 224 "textio.c"
        var $40=HEAP[$38]; //@line 224 "textio.c"
        var $41=($39) << 1; //@line 224 "textio.c"
        var $42=($41) & 2; //@line 224 "textio.c"
        var $43=($40) & -3; //@line 224 "textio.c"
        var $44=($42) | ($43); //@line 224 "textio.c"
        HEAP[$38]=$44; //@line 224 "textio.c"
        var $45=$self_addr; //@line 225 "textio.c"
        var $46=$45+16; //@line 225 "textio.c"
        var $47=HEAP[$46]; //@line 225 "textio.c"
        var $48=($47) & -29; //@line 225 "textio.c"
        HEAP[$46]=$48; //@line 225 "textio.c"
        var $49=$self_addr; //@line 226 "textio.c"
        var $50=$49+16; //@line 226 "textio.c"
        var $51=HEAP[$50]; //@line 226 "textio.c"
        var $52=($51) & -2; //@line 226 "textio.c"
        HEAP[$50]=$52; //@line 226 "textio.c"
        $0=0; //@line 228 "textio.c"
        __label__ = 7; break; //@line 228 "textio.c"
      case 7: // $bb8
        var $53=$0; //@line 209 "textio.c"
        $retval=$53; //@line 209 "textio.c"
        var $retval9=$retval; //@line 209 "textio.c"
        STACKTOP = __stackBase__;
        return $retval9; //@line 209 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _incrementalnewlinedecoder_dealloc($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $_py_tmp;
        var $_py_tmp4;
        $self_addr=$self;
        var $0=$self_addr; //@line 234 "textio.c"
        var $1=$0+8; //@line 234 "textio.c"
        var $2=HEAP[$1]; //@line 234 "textio.c"
        var $3=($2)!=0; //@line 234 "textio.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 234 "textio.c"
      case 1: // $bb
        var $4=$self_addr; //@line 234 "textio.c"
        var $5=$4+8; //@line 234 "textio.c"
        var $6=HEAP[$5]; //@line 234 "textio.c"
        $_py_tmp=$6; //@line 234 "textio.c"
        var $7=$self_addr; //@line 234 "textio.c"
        var $8=$7+8; //@line 234 "textio.c"
        HEAP[$8]=0; //@line 234 "textio.c"
        var $9=$_py_tmp; //@line 234 "textio.c"
        var $10=$9; //@line 234 "textio.c"
        var $11=HEAP[$10]; //@line 234 "textio.c"
        var $12=($11) - 1; //@line 234 "textio.c"
        var $13=$_py_tmp; //@line 234 "textio.c"
        var $14=$13; //@line 234 "textio.c"
        HEAP[$14]=$12; //@line 234 "textio.c"
        var $15=$_py_tmp; //@line 234 "textio.c"
        var $16=$15; //@line 234 "textio.c"
        var $17=HEAP[$16]; //@line 234 "textio.c"
        var $18=($17)==0; //@line 234 "textio.c"
        if ($18) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 234 "textio.c"
      case 2: // $bb1
        var $19=$_py_tmp; //@line 234 "textio.c"
        var $20=$19+4; //@line 234 "textio.c"
        var $21=HEAP[$20]; //@line 234 "textio.c"
        var $22=$21+24; //@line 234 "textio.c"
        var $23=HEAP[$22]; //@line 234 "textio.c"
        var $24=$_py_tmp; //@line 234 "textio.c"
        FUNCTION_TABLE[$23]($24); //@line 234 "textio.c"
        __label__ = 3; break; //@line 234 "textio.c"
      case 3: // $bb2
        var $25=$self_addr; //@line 235 "textio.c"
        var $26=$25+12; //@line 235 "textio.c"
        var $27=HEAP[$26]; //@line 235 "textio.c"
        var $28=($27)!=0; //@line 235 "textio.c"
        if ($28) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 235 "textio.c"
      case 4: // $bb3
        var $29=$self_addr; //@line 235 "textio.c"
        var $30=$29+12; //@line 235 "textio.c"
        var $31=HEAP[$30]; //@line 235 "textio.c"
        $_py_tmp4=$31; //@line 235 "textio.c"
        var $32=$self_addr; //@line 235 "textio.c"
        var $33=$32+12; //@line 235 "textio.c"
        HEAP[$33]=0; //@line 235 "textio.c"
        var $34=$_py_tmp4; //@line 235 "textio.c"
        var $35=$34; //@line 235 "textio.c"
        var $36=HEAP[$35]; //@line 235 "textio.c"
        var $37=($36) - 1; //@line 235 "textio.c"
        var $38=$_py_tmp4; //@line 235 "textio.c"
        var $39=$38; //@line 235 "textio.c"
        HEAP[$39]=$37; //@line 235 "textio.c"
        var $40=$_py_tmp4; //@line 235 "textio.c"
        var $41=$40; //@line 235 "textio.c"
        var $42=HEAP[$41]; //@line 235 "textio.c"
        var $43=($42)==0; //@line 235 "textio.c"
        if ($43) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 235 "textio.c"
      case 5: // $bb5
        var $44=$_py_tmp4; //@line 235 "textio.c"
        var $45=$44+4; //@line 235 "textio.c"
        var $46=HEAP[$45]; //@line 235 "textio.c"
        var $47=$46+24; //@line 235 "textio.c"
        var $48=HEAP[$47]; //@line 235 "textio.c"
        var $49=$_py_tmp4; //@line 235 "textio.c"
        FUNCTION_TABLE[$48]($49); //@line 235 "textio.c"
        __label__ = 6; break; //@line 235 "textio.c"
      case 6: // $bb6
        var $50=$self_addr; //@line 236 "textio.c"
        var $51=$50; //@line 236 "textio.c"
        var $52=$51+4; //@line 236 "textio.c"
        var $53=HEAP[$52]; //@line 236 "textio.c"
        var $54=$53+160; //@line 236 "textio.c"
        var $55=HEAP[$54]; //@line 236 "textio.c"
        var $56=$self_addr; //@line 236 "textio.c"
        var $57=$56; //@line 236 "textio.c"
        FUNCTION_TABLE[$55]($57); //@line 236 "textio.c"
        ;
        return; //@line 237 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __PyIncrementalNewlineDecoder_decode($_self, $input, $final) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $_self_addr;
        var $input_addr;
        var $final_addr;
        var $retval;
        var $iftmp_10;
        var $0;
        var $output=__stackBase__;
        var $output_len;
        var $self;
        var $out;
        var $modified;
        var $modified25;
        var $in_str;
        var $len;
        var $seennl;
        var $only_lf;
        var $s;
        var $end;
        var $c;
        var $s49;
        var $end50;
        var $c54;
        var $translated;
        var $out_str;
        var $in;
        var $out66;
        var $end67;
        var $c76;
        $_self_addr=$_self;
        $input_addr=$input;
        $final_addr=$final;
        var $1=$_self_addr; //@line 250 "textio.c"
        var $2=$1; //@line 250 "textio.c"
        $self=$2; //@line 250 "textio.c"
        var $3=$self; //@line 252 "textio.c"
        var $4=$3+8; //@line 252 "textio.c"
        var $5=HEAP[$4]; //@line 252 "textio.c"
        var $6=($5)==0; //@line 252 "textio.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 252 "textio.c"
      case 1: // $bb
        var $7=HEAP[_PyExc_ValueError]; //@line 253 "textio.c"
        _PyErr_SetString($7, __str12387); //@line 253 "textio.c"
        $0=0; //@line 255 "textio.c"
        __label__ = 84; break; //@line 255 "textio.c"
      case 2: // $bb1
        var $8=$self; //@line 259 "textio.c"
        var $9=$8+8; //@line 259 "textio.c"
        var $10=HEAP[$9]; //@line 259 "textio.c"
        var $11=($10)!=(__Py_NoneStruct); //@line 259 "textio.c"
        if ($11) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 259 "textio.c"
      case 3: // $bb2
        var $12=$final_addr; //@line 260 "textio.c"
        var $13=($12)!=0; //@line 260 "textio.c"
        if ($13) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 260 "textio.c"
      case 4: // $bb3
        $iftmp_10=__Py_TrueStruct; //@line 260 "textio.c"
        __label__ = 6; break; //@line 260 "textio.c"
      case 5: // $bb4
        $iftmp_10=__Py_ZeroStruct; //@line 260 "textio.c"
        __label__ = 6; break; //@line 260 "textio.c"
      case 6: // $bb5
        var $14=HEAP[__PyIO_str_decode]; //@line 260 "textio.c"
        var $15=$self; //@line 260 "textio.c"
        var $16=$15+8; //@line 260 "textio.c"
        var $17=HEAP[$16]; //@line 260 "textio.c"
        var $18=$input_addr; //@line 260 "textio.c"
        var $19=$iftmp_10; //@line 260 "textio.c"
        var $20=_PyObject_CallMethodObjArgs($17, $14, allocate([$18,0,0,0,$19,0,0,0,0,0,0,0], ["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 260 "textio.c"
        HEAP[$output]=$20; //@line 260 "textio.c"
        __lastLabel__ = 6; __label__ = 8; break; //@line 260 "textio.c"
      case 7: // $bb6
        var $21=$input_addr; //@line 264 "textio.c"
        HEAP[$output]=$21; //@line 264 "textio.c"
        var $22=HEAP[$output]; //@line 265 "textio.c"
        var $23=$22; //@line 265 "textio.c"
        var $24=HEAP[$23]; //@line 265 "textio.c"
        var $25=($24) + 1; //@line 265 "textio.c"
        var $26=$22; //@line 265 "textio.c"
        HEAP[$26]=$25; //@line 265 "textio.c"
        var $_pr=HEAP[$output];
        __lastLabel__ = 7; __label__ = 8; break; //@line 265 "textio.c"
      case 8: // $bb7
        var $27=__lastLabel__ == 7 ? $_pr : ($20);
        var $28=($27)==0; //@line 268 "textio.c"
        if ($28) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 268 "textio.c"
      case 9: // $bb8
        $0=0; //@line 269 "textio.c"
        __label__ = 84; break; //@line 269 "textio.c"
      case 10: // $bb9
        var $29=HEAP[$output]; //@line 271 "textio.c"
        var $30=$29+4; //@line 271 "textio.c"
        var $31=HEAP[$30]; //@line 271 "textio.c"
        var $32=$31+84; //@line 271 "textio.c"
        var $33=HEAP[$32]; //@line 271 "textio.c"
        var $34=($33) & 268435456; //@line 271 "textio.c"
        var $35=($34)==0; //@line 271 "textio.c"
        if ($35) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 271 "textio.c"
      case 11: // $bb10
        var $36=HEAP[_PyExc_TypeError]; //@line 272 "textio.c"
        _PyErr_SetString($36, __str13388); //@line 272 "textio.c"
        __label__ = 81; break; //@line 272 "textio.c"
      case 12: // $bb11
        var $37=HEAP[$output]; //@line 277 "textio.c"
        var $38=$37; //@line 277 "textio.c"
        var $39=$38+8; //@line 277 "textio.c"
        var $40=HEAP[$39]; //@line 277 "textio.c"
        $output_len=$40; //@line 277 "textio.c"
        var $41=$self; //@line 278 "textio.c"
        var $42=$41+16; //@line 278 "textio.c"
        var $43=HEAP[$42]; //@line 278 "textio.c"
        var $44=($43) << 7; //@line 278 "textio.c"
        var $45=($44) >> 7; //@line 278 "textio.c"
        var $46=((($45)) & 1); //@line 278 "textio.c"
        var $47=($46)!=0; //@line 278 "textio.c"
        if ($47) { __label__ = 13; break; } else { __label__ = 19; break; } //@line 278 "textio.c"
      case 13: // $bb12
        var $48=$final_addr; //@line 278 "textio.c"
        var $49=($48)!=0; //@line 278 "textio.c"
        if ($49) { __label__ = 15; break; } else { __label__ = 14; break; } //@line 278 "textio.c"
      case 14: // $bb13
        var $50=$output_len; //@line 278 "textio.c"
        var $51=($50) > 0; //@line 278 "textio.c"
        if ($51) { __label__ = 15; break; } else { __label__ = 19; break; } //@line 278 "textio.c"
      case 15: // $bb14
        var $52=$output_len; //@line 280 "textio.c"
        var $53=($52) + 1; //@line 280 "textio.c"
        var $54=_PyUnicodeUCS2_FromUnicode(0, $53); //@line 280 "textio.c"
        $modified=$54; //@line 280 "textio.c"
        var $55=($54)==0; //@line 281 "textio.c"
        if ($55) { __label__ = 81; break; } else { __label__ = 16; break; } //@line 281 "textio.c"
      case 16: // $bb15
        var $56=$modified; //@line 283 "textio.c"
        var $57=$56; //@line 283 "textio.c"
        var $58=$57+12; //@line 283 "textio.c"
        var $59=HEAP[$58]; //@line 283 "textio.c"
        $out=$59; //@line 283 "textio.c"
        var $60=$out; //@line 284 "textio.c"
        var $61=$60; //@line 284 "textio.c"
        HEAP[$61]=13; //@line 284 "textio.c"
        var $62=$output_len; //@line 285 "textio.c"
        var $63=($62) * 2; //@line 285 "textio.c"
        var $64=HEAP[$output]; //@line 285 "textio.c"
        var $65=$64; //@line 285 "textio.c"
        var $66=$65+12; //@line 285 "textio.c"
        var $67=HEAP[$66]; //@line 285 "textio.c"
        var $68=$out; //@line 285 "textio.c"
        var $69=$68+2; //@line 285 "textio.c"
        var $70=$69; //@line 285 "textio.c"
        var $71=$67; //@line 285 "textio.c"
        _llvm_memcpy_p0i8_p0i8_i32($70, $71, $63, 1, 0); //@line 285 "textio.c"
        var $72=HEAP[$output]; //@line 287 "textio.c"
        var $73=$72; //@line 287 "textio.c"
        var $74=HEAP[$73]; //@line 287 "textio.c"
        var $75=($74) - 1; //@line 287 "textio.c"
        var $76=$72; //@line 287 "textio.c"
        HEAP[$76]=$75; //@line 287 "textio.c"
        var $77=$72; //@line 287 "textio.c"
        var $78=HEAP[$77]; //@line 287 "textio.c"
        var $79=($78)==0; //@line 287 "textio.c"
        if ($79) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 287 "textio.c"
      case 17: // $bb16
        var $80=HEAP[$output]; //@line 287 "textio.c"
        var $81=$80+4; //@line 287 "textio.c"
        var $82=HEAP[$81]; //@line 287 "textio.c"
        var $83=$82+24; //@line 287 "textio.c"
        var $84=HEAP[$83]; //@line 287 "textio.c"
        var $85=HEAP[$output]; //@line 287 "textio.c"
        FUNCTION_TABLE[$84]($85); //@line 287 "textio.c"
        __label__ = 18; break; //@line 287 "textio.c"
      case 18: // $bb17
        var $86=$modified; //@line 288 "textio.c"
        HEAP[$output]=$86; //@line 288 "textio.c"
        var $87=$self; //@line 289 "textio.c"
        var $88=$87+16; //@line 289 "textio.c"
        var $89=HEAP[$88]; //@line 289 "textio.c"
        var $90=($89) & -2; //@line 289 "textio.c"
        HEAP[$88]=$90; //@line 289 "textio.c"
        var $91=$output_len; //@line 290 "textio.c"
        var $92=($91) + 1; //@line 290 "textio.c"
        $output_len=$92; //@line 290 "textio.c"
        __label__ = 19; break; //@line 290 "textio.c"
      case 19: // $bb18
        var $93=$final_addr; //@line 296 "textio.c"
        var $94=($93)==0; //@line 296 "textio.c"
        if ($94) { __label__ = 20; break; } else { __label__ = 29; break; } //@line 296 "textio.c"
      case 20: // $bb19
        var $95=$output_len; //@line 297 "textio.c"
        var $96=($95) > 0; //@line 297 "textio.c"
        if ($96) { __label__ = 21; break; } else { __label__ = 29; break; } //@line 297 "textio.c"
      case 21: // $bb20
        var $97=HEAP[$output]; //@line 297 "textio.c"
        var $98=$97; //@line 297 "textio.c"
        var $99=$98+12; //@line 297 "textio.c"
        var $100=HEAP[$99]; //@line 297 "textio.c"
        var $101=$output_len; //@line 297 "textio.c"
        var $102=($101) - 1; //@line 297 "textio.c"
        var $103=$100+2*$102; //@line 297 "textio.c"
        var $104=HEAP[$103]; //@line 297 "textio.c"
        var $105=($104)==13; //@line 297 "textio.c"
        if ($105) { __label__ = 22; break; } else { __label__ = 29; break; } //@line 297 "textio.c"
      case 22: // $bb21
        var $106=HEAP[$output]; //@line 300 "textio.c"
        var $107=$106; //@line 300 "textio.c"
        var $108=HEAP[$107]; //@line 300 "textio.c"
        var $109=($108)==1; //@line 300 "textio.c"
        var $110=$output_len; //@line 301 "textio.c"
        var $111=($110) - 1; //@line 301 "textio.c"
        if ($109) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 300 "textio.c"
      case 23: // $bb22
        var $112=_PyUnicodeUCS2_Resize($output, $111); //@line 301 "textio.c"
        var $113=($112) < 0; //@line 301 "textio.c"
        if ($113) { __label__ = 81; break; } else { __label__ = 28; break; } //@line 301 "textio.c"
      case 24: // $bb24
        var $114=HEAP[$output]; //@line 307 "textio.c"
        var $115=$114; //@line 307 "textio.c"
        var $116=$115+12; //@line 307 "textio.c"
        var $117=HEAP[$116]; //@line 307 "textio.c"
        var $118=_PyUnicodeUCS2_FromUnicode($117, $111); //@line 307 "textio.c"
        $modified25=$118; //@line 307 "textio.c"
        var $119=$modified25; //@line 308 "textio.c"
        var $120=($119)==0; //@line 308 "textio.c"
        if ($120) { __label__ = 81; break; } else { __label__ = 25; break; } //@line 308 "textio.c"
      case 25: // $bb26
        var $121=HEAP[$output]; //@line 310 "textio.c"
        var $122=$121; //@line 310 "textio.c"
        var $123=HEAP[$122]; //@line 310 "textio.c"
        var $124=($123) - 1; //@line 310 "textio.c"
        var $125=$121; //@line 310 "textio.c"
        HEAP[$125]=$124; //@line 310 "textio.c"
        var $126=$121; //@line 310 "textio.c"
        var $127=HEAP[$126]; //@line 310 "textio.c"
        var $128=($127)==0; //@line 310 "textio.c"
        if ($128) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 310 "textio.c"
      case 26: // $bb27
        var $129=HEAP[$output]; //@line 310 "textio.c"
        var $130=$129+4; //@line 310 "textio.c"
        var $131=HEAP[$130]; //@line 310 "textio.c"
        var $132=$131+24; //@line 310 "textio.c"
        var $133=HEAP[$132]; //@line 310 "textio.c"
        var $134=HEAP[$output]; //@line 310 "textio.c"
        FUNCTION_TABLE[$133]($134); //@line 310 "textio.c"
        __label__ = 27; break; //@line 310 "textio.c"
      case 27: // $bb28
        var $135=$modified25; //@line 311 "textio.c"
        HEAP[$output]=$135; //@line 311 "textio.c"
        __label__ = 28; break; //@line 311 "textio.c"
      case 28: // $bb29
        var $136=$self; //@line 313 "textio.c"
        var $137=$136+16; //@line 313 "textio.c"
        var $138=HEAP[$137]; //@line 313 "textio.c"
        var $139=($138) & -2; //@line 313 "textio.c"
        var $140=($139) | 1; //@line 313 "textio.c"
        HEAP[$137]=$140; //@line 313 "textio.c"
        __label__ = 29; break; //@line 313 "textio.c"
      case 29: // $bb30
        var $141=$self; //@line 322 "textio.c"
        var $142=$141+16; //@line 322 "textio.c"
        var $143=HEAP[$142]; //@line 322 "textio.c"
        var $144=($143) << 3; //@line 322 "textio.c"
        var $145=($144) >>> 5; //@line 322 "textio.c"
        var $146=((($145)) & 7); //@line 322 "textio.c"
        var $147=($146); //@line 322 "textio.c"
        $seennl=$147; //@line 322 "textio.c"
        $only_lf=0; //@line 323 "textio.c"
        var $148=HEAP[$output]; //@line 325 "textio.c"
        var $149=$148; //@line 325 "textio.c"
        var $150=$149+12; //@line 325 "textio.c"
        var $151=HEAP[$150]; //@line 325 "textio.c"
        $in_str=$151; //@line 325 "textio.c"
        var $152=HEAP[$output]; //@line 326 "textio.c"
        var $153=$152; //@line 326 "textio.c"
        var $154=$153+8; //@line 326 "textio.c"
        var $155=HEAP[$154]; //@line 326 "textio.c"
        $len=$155; //@line 326 "textio.c"
        var $156=($155)==0; //@line 328 "textio.c"
        if ($156) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 328 "textio.c"
      case 30: // $bb31
        var $157=HEAP[$output]; //@line 329 "textio.c"
        $0=$157; //@line 329 "textio.c"
        __label__ = 84; break; //@line 329 "textio.c"
      case 31: // $bb32
        var $158=$seennl; //@line 334 "textio.c"
        var $159=($158)==2; //@line 334 "textio.c"
        var $160=$seennl; //@line 334 "textio.c"
        var $161=($160)==0; //@line 334 "textio.c"
        var $or_cond=($159) | ($161);
        if ($or_cond) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 334 "textio.c"
      case 32: // $bb34
        var $162=$len; //@line 335 "textio.c"
        var $163=($162) * 2; //@line 335 "textio.c"
        var $164=$in_str; //@line 335 "textio.c"
        var $165=$164; //@line 335 "textio.c"
        var $166=_memchr($165, 13, $163); //@line 335 "textio.c"
        var $167=($166)==0; //@line 335 "textio.c"
        var $168=($167); //@line 335 "textio.c"
        $only_lf=$168; //@line 335 "textio.c"
        __lastLabel__ = 32; __label__ = 34; break; //@line 335 "textio.c"
      case 33: // $bb35thread_pre_split
        var $_pr2=$only_lf;
        __lastLabel__ = 33; __label__ = 34; break;
      case 34: // $bb35
        var $169=__lastLabel__ == 33 ? $_pr2 : ($168);
        var $170=($169)!=0; //@line 338 "textio.c"
        if ($170) { __label__ = 35; break; } else { __label__ = 43; break; } //@line 338 "textio.c"
      case 35: // $bb36
        var $171=$seennl; //@line 342 "textio.c"
        var $172=($171)==0; //@line 342 "textio.c"
        if ($172) { __label__ = 36; break; } else { __label__ = 80; break; } //@line 342 "textio.c"
      case 36: // $bb37
        var $173=$len; //@line 342 "textio.c"
        var $174=($173) * 2; //@line 342 "textio.c"
        var $175=$in_str; //@line 342 "textio.c"
        var $176=$175; //@line 342 "textio.c"
        var $177=_memchr($176, 10, $174); //@line 342 "textio.c"
        var $178=($177)!=0; //@line 342 "textio.c"
        if ($178) { __label__ = 37; break; } else { __label__ = 80; break; } //@line 342 "textio.c"
      case 37: // $bb38
        var $179=$in_str; //@line 345 "textio.c"
        $s=$179; //@line 345 "textio.c"
        var $180=$in_str; //@line 346 "textio.c"
        var $181=$len; //@line 346 "textio.c"
        var $182=$180+2*$181; //@line 346 "textio.c"
        $end=$182; //@line 346 "textio.c"
        __label__ = 39; break; //@line 346 "textio.c"
      case 38: // $bb40
        var $183=$187+2; //@line 351 "textio.c"
        $s=$183; //@line 351 "textio.c"
        __label__ = 39; break; //@line 351 "textio.c"
      case 39: // $bb41
        var $184=$s; //@line 350 "textio.c"
        var $185=HEAP[$184]; //@line 350 "textio.c"
        var $186=($185) > 10; //@line 350 "textio.c"
        var $187=$s; //@line 351 "textio.c"
        if ($186) { __label__ = 38; break; } else { __label__ = 40; break; } //@line 350 "textio.c"
      case 40: // $bb42
        var $188=HEAP[$187]; //@line 352 "textio.c"
        $c=$188; //@line 352 "textio.c"
        var $189=$s; //@line 352 "textio.c"
        var $190=$189+2; //@line 352 "textio.c"
        $s=$190; //@line 352 "textio.c"
        var $191=$c; //@line 353 "textio.c"
        var $192=($191)==10; //@line 353 "textio.c"
        if ($192) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 353 "textio.c"
      case 41: // $bb43
        var $193=$seennl; //@line 354 "textio.c"
        var $194=($193) | 2; //@line 354 "textio.c"
        $seennl=$194; //@line 354 "textio.c"
        __label__ = 80; break; //@line 354 "textio.c"
      case 42: // $bb44
        var $195=$s; //@line 357 "textio.c"
        var $196=$end; //@line 357 "textio.c"
        var $197=($195) > ($196); //@line 357 "textio.c"
        if ($197) { __label__ = 80; break; } else { __label__ = 39; break; } //@line 357 "textio.c"
      case 43: // $bb47
        var $198=$self; //@line 364 "textio.c"
        var $199=$198+16; //@line 364 "textio.c"
        var $200=HEAP[$199]; //@line 364 "textio.c"
        var $201=($200) << 6; //@line 364 "textio.c"
        var $202=($201) >> 7; //@line 364 "textio.c"
        var $203=((($202)) & 1); //@line 364 "textio.c"
        var $204=($203)==0; //@line 364 "textio.c"
        if ($204) { __label__ = 44; break; } else { __label__ = 56; break; } //@line 364 "textio.c"
      case 44: // $bb48
        var $205=$seennl; //@line 367 "textio.c"
        var $206=($205)==7; //@line 367 "textio.c"
        if ($206) { __label__ = 80; break; } else { __label__ = 45; break; } //@line 367 "textio.c"
      case 45: // $bb51
        var $207=$in_str; //@line 369 "textio.c"
        $s49=$207; //@line 369 "textio.c"
        var $208=$in_str; //@line 370 "textio.c"
        var $209=$len; //@line 370 "textio.c"
        var $210=$208+2*$209; //@line 370 "textio.c"
        $end50=$210; //@line 370 "textio.c"
        __label__ = 47; break; //@line 370 "textio.c"
      case 46: // $bb53
        var $211=$215+2; //@line 375 "textio.c"
        $s49=$211; //@line 375 "textio.c"
        __label__ = 47; break; //@line 375 "textio.c"
      case 47: // $bb55
        var $212=$s49; //@line 374 "textio.c"
        var $213=HEAP[$212]; //@line 374 "textio.c"
        var $214=($213) > 13; //@line 374 "textio.c"
        var $215=$s49; //@line 375 "textio.c"
        if ($214) { __label__ = 46; break; } else { __label__ = 48; break; } //@line 374 "textio.c"
      case 48: // $bb56
        var $216=HEAP[$215]; //@line 376 "textio.c"
        $c54=$216; //@line 376 "textio.c"
        var $217=$s49; //@line 376 "textio.c"
        var $218=$217+2; //@line 376 "textio.c"
        $s49=$218; //@line 376 "textio.c"
        var $219=$c54; //@line 377 "textio.c"
        var $220=($219)==10; //@line 377 "textio.c"
        if ($220) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 377 "textio.c"
      case 49: // $bb57
        var $221=$seennl; //@line 378 "textio.c"
        var $222=($221) | 2; //@line 378 "textio.c"
        $seennl=$222; //@line 378 "textio.c"
        __label__ = 54; break; //@line 378 "textio.c"
      case 50: // $bb58
        var $223=$c54; //@line 379 "textio.c"
        var $224=($223)==13; //@line 379 "textio.c"
        if ($224) { __label__ = 51; break; } else { __label__ = 54; break; } //@line 379 "textio.c"
      case 51: // $bb59
        var $225=$s49; //@line 380 "textio.c"
        var $226=HEAP[$225]; //@line 380 "textio.c"
        var $227=($226)==10; //@line 380 "textio.c"
        var $228=$seennl; //@line 381 "textio.c"
        if ($227) { __label__ = 52; break; } else { __label__ = 53; break; } //@line 380 "textio.c"
      case 52: // $bb60
        var $229=($228) | 4; //@line 381 "textio.c"
        $seennl=$229; //@line 381 "textio.c"
        var $230=$s49; //@line 382 "textio.c"
        var $231=$230+2; //@line 382 "textio.c"
        $s49=$231; //@line 382 "textio.c"
        __label__ = 54; break; //@line 382 "textio.c"
      case 53: // $bb61
        var $232=($228) | 1; //@line 385 "textio.c"
        $seennl=$232; //@line 385 "textio.c"
        __label__ = 54; break; //@line 385 "textio.c"
      case 54: // $bb62
        var $233=$s49; //@line 387 "textio.c"
        var $234=$end50; //@line 387 "textio.c"
        var $235=($233) > ($234); //@line 387 "textio.c"
        if ($235) { __label__ = 80; break; } else { __label__ = 55; break; } //@line 387 "textio.c"
      case 55: // $bb63
        var $236=$seennl; //@line 389 "textio.c"
        var $237=($236)==7; //@line 389 "textio.c"
        if ($237) { __label__ = 80; break; } else { __label__ = 47; break; } //@line 389 "textio.c"
      case 56: // $bb65
        $translated=0; //@line 396 "textio.c"
        var $238=HEAP[$output]; //@line 399 "textio.c"
        var $239=$238; //@line 399 "textio.c"
        var $240=HEAP[$239]; //@line 399 "textio.c"
        var $241=($240)!=1; //@line 399 "textio.c"
        if ($241) { __label__ = 57; break; } else { __label__ = 61; break; } //@line 399 "textio.c"
      case 57: // $bb68
        var $242=$len; //@line 404 "textio.c"
        var $243=_PyUnicodeUCS2_FromUnicode(0, $242); //@line 404 "textio.c"
        $translated=$243; //@line 404 "textio.c"
        var $244=$translated; //@line 405 "textio.c"
        var $245=($244)==0; //@line 405 "textio.c"
        if ($245) { __label__ = 81; break; } else { __label__ = 58; break; } //@line 405 "textio.c"
      case 58: // $bb69
        var $246=$translated; //@line 407 "textio.c"
        var $247=$246; //@line 407 "textio.c"
        var $248=HEAP[$247]; //@line 407 "textio.c"
        var $249=($248)!=1; //@line 407 "textio.c"
        if ($249) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 407 "textio.c"
      case 59: // $bb70
        ___assert_fail(__str14389, __str15390, 407, ___PRETTY_FUNCTION___8596); //@line 407 "textio.c"
        throw "Reached an unreachable!" //@line 407 "textio.c"
      case 60: // $bb71
        var $250=$len; //@line 408 "textio.c"
        var $251=($250) * 2; //@line 408 "textio.c"
        var $252=HEAP[$output]; //@line 408 "textio.c"
        var $253=$252; //@line 408 "textio.c"
        var $254=$253+12; //@line 408 "textio.c"
        var $255=HEAP[$254]; //@line 408 "textio.c"
        var $256=$translated; //@line 408 "textio.c"
        var $257=$256; //@line 408 "textio.c"
        var $258=$257+12; //@line 408 "textio.c"
        var $259=HEAP[$258]; //@line 408 "textio.c"
        var $260=$259; //@line 408 "textio.c"
        var $261=$255; //@line 408 "textio.c"
        _llvm_memcpy_p0i8_p0i8_i32($260, $261, $251, 1, 0); //@line 408 "textio.c"
        __label__ = 62; break; //@line 408 "textio.c"
      case 61: // $bb72
        var $262=HEAP[$output]; //@line 413 "textio.c"
        $translated=$262; //@line 413 "textio.c"
        __label__ = 62; break; //@line 413 "textio.c"
      case 62: // $bb73
        var $263=$translated; //@line 415 "textio.c"
        var $264=$263; //@line 415 "textio.c"
        var $265=$264+12; //@line 415 "textio.c"
        var $266=HEAP[$265]; //@line 415 "textio.c"
        $out_str=$266; //@line 415 "textio.c"
        var $267=$in_str; //@line 416 "textio.c"
        $in=$267; //@line 416 "textio.c"
        var $268=$out_str; //@line 417 "textio.c"
        $out66=$268; //@line 417 "textio.c"
        var $269=$in_str; //@line 418 "textio.c"
        var $270=$len; //@line 418 "textio.c"
        var $271=$269+2*$270; //@line 418 "textio.c"
        $end67=$271; //@line 418 "textio.c"
        __label__ = 64; break; //@line 418 "textio.c"
      case 63: // $bb75
        var $272=$out66; //@line 423 "textio.c"
        var $273=$c76; //@line 423 "textio.c"
        HEAP[$272]=$273; //@line 423 "textio.c"
        var $274=$out66; //@line 423 "textio.c"
        var $275=$274+2; //@line 423 "textio.c"
        $out66=$275; //@line 423 "textio.c"
        __label__ = 64; break; //@line 423 "textio.c"
      case 64: // $bb77
        var $276=$in; //@line 422 "textio.c"
        var $277=HEAP[$276]; //@line 422 "textio.c"
        $c76=$277; //@line 422 "textio.c"
        var $278=$c76; //@line 422 "textio.c"
        var $279=($278) > 13; //@line 422 "textio.c"
        var $280=($279); //@line 422 "textio.c"
        var $281=$in; //@line 422 "textio.c"
        var $282=$281+2; //@line 422 "textio.c"
        $in=$282; //@line 422 "textio.c"
        var $toBool=($280)!=0; //@line 422 "textio.c"
        if ($toBool) { __label__ = 63; break; } else { __label__ = 65; break; } //@line 422 "textio.c"
      case 65: // $bb78
        var $283=$c76; //@line 424 "textio.c"
        var $284=($283)==10; //@line 424 "textio.c"
        if ($284) { __label__ = 66; break; } else { __label__ = 67; break; } //@line 424 "textio.c"
      case 66: // $bb79
        var $285=$out66; //@line 425 "textio.c"
        var $286=$c76; //@line 425 "textio.c"
        HEAP[$285]=$286; //@line 425 "textio.c"
        var $287=$out66; //@line 425 "textio.c"
        var $288=$287+2; //@line 425 "textio.c"
        $out66=$288; //@line 425 "textio.c"
        var $289=$seennl; //@line 426 "textio.c"
        var $290=($289) | 2; //@line 426 "textio.c"
        $seennl=$290; //@line 426 "textio.c"
        __label__ = 64; break; //@line 426 "textio.c"
      case 67: // $bb80
        var $291=$c76; //@line 429 "textio.c"
        var $292=($291)==13; //@line 429 "textio.c"
        var $293=$in; //@line 430 "textio.c"
        if ($292) { __label__ = 68; break; } else { __label__ = 72; break; } //@line 429 "textio.c"
      case 68: // $bb81
        var $294=HEAP[$293]; //@line 430 "textio.c"
        var $295=($294)==10; //@line 430 "textio.c"
        if ($295) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 430 "textio.c"
      case 69: // $bb82
        var $296=$in; //@line 431 "textio.c"
        var $297=$296+2; //@line 431 "textio.c"
        $in=$297; //@line 431 "textio.c"
        var $298=$seennl; //@line 432 "textio.c"
        var $299=($298) | 4; //@line 432 "textio.c"
        $seennl=$299; //@line 432 "textio.c"
        __label__ = 71; break; //@line 432 "textio.c"
      case 70: // $bb83
        var $300=$seennl; //@line 435 "textio.c"
        var $301=($300) | 1; //@line 435 "textio.c"
        $seennl=$301; //@line 435 "textio.c"
        __label__ = 71; break; //@line 435 "textio.c"
      case 71: // $bb84
        var $302=$out66; //@line 436 "textio.c"
        HEAP[$302]=10; //@line 436 "textio.c"
        var $303=$out66; //@line 436 "textio.c"
        var $304=$303+2; //@line 436 "textio.c"
        $out66=$304; //@line 436 "textio.c"
        __label__ = 64; break; //@line 436 "textio.c"
      case 72: // $bb85
        var $305=$end67; //@line 439 "textio.c"
        var $306=($293) > ($305); //@line 439 "textio.c"
        if ($306) { __label__ = 74; break; } else { __label__ = 73; break; } //@line 439 "textio.c"
      case 73: // $bb86
        var $307=$out66; //@line 441 "textio.c"
        var $308=$c76; //@line 441 "textio.c"
        HEAP[$307]=$308; //@line 441 "textio.c"
        var $309=$out66; //@line 441 "textio.c"
        var $310=$309+2; //@line 441 "textio.c"
        $out66=$310; //@line 441 "textio.c"
        __label__ = 64; break; //@line 441 "textio.c"
      case 74: // $bb88
        var $311=HEAP[$output]; //@line 443 "textio.c"
        var $312=$translated; //@line 443 "textio.c"
        var $313=($312)!=($311); //@line 443 "textio.c"
        if ($313) { __label__ = 75; break; } else { __label__ = 78; break; } //@line 443 "textio.c"
      case 75: // $bb89
        var $314=HEAP[$output]; //@line 444 "textio.c"
        var $315=$314; //@line 444 "textio.c"
        var $316=HEAP[$315]; //@line 444 "textio.c"
        var $317=($316) - 1; //@line 444 "textio.c"
        var $318=$314; //@line 444 "textio.c"
        HEAP[$318]=$317; //@line 444 "textio.c"
        var $319=$314; //@line 444 "textio.c"
        var $320=HEAP[$319]; //@line 444 "textio.c"
        var $321=($320)==0; //@line 444 "textio.c"
        if ($321) { __label__ = 76; break; } else { __label__ = 77; break; } //@line 444 "textio.c"
      case 76: // $bb90
        var $322=HEAP[$output]; //@line 444 "textio.c"
        var $323=$322+4; //@line 444 "textio.c"
        var $324=HEAP[$323]; //@line 444 "textio.c"
        var $325=$324+24; //@line 444 "textio.c"
        var $326=HEAP[$325]; //@line 444 "textio.c"
        var $327=HEAP[$output]; //@line 444 "textio.c"
        FUNCTION_TABLE[$326]($327); //@line 444 "textio.c"
        __label__ = 77; break; //@line 444 "textio.c"
      case 77: // $bb91
        var $328=$translated; //@line 445 "textio.c"
        HEAP[$output]=$328; //@line 445 "textio.c"
        __label__ = 78; break; //@line 445 "textio.c"
      case 78: // $bb92
        var $329=$out66; //@line 447 "textio.c"
        var $330=($329); //@line 447 "textio.c"
        var $331=$out_str; //@line 447 "textio.c"
        var $332=($331); //@line 447 "textio.c"
        var $333=($330) - ($332); //@line 447 "textio.c"
        var $334=((($333)/2)|0); //@line 447 "textio.c"
        var $335=$len; //@line 447 "textio.c"
        var $336=($334)!=($335); //@line 447 "textio.c"
        if ($336) { __label__ = 79; break; } else { __label__ = 80; break; } //@line 447 "textio.c"
      case 79: // $bb93
        var $337=$out66; //@line 448 "textio.c"
        var $338=($337); //@line 448 "textio.c"
        var $339=$out_str; //@line 448 "textio.c"
        var $340=($339); //@line 448 "textio.c"
        var $341=($338) - ($340); //@line 448 "textio.c"
        var $342=((($341)/2)|0); //@line 448 "textio.c"
        var $343=_PyUnicodeUCS2_Resize($output, $342); //@line 448 "textio.c"
        var $344=($343) < 0; //@line 448 "textio.c"
        if ($344) { __label__ = 81; break; } else { __label__ = 80; break; } //@line 448 "textio.c"
      case 80: // $bb94
        var $345=$self; //@line 452 "textio.c"
        var $346=$345+16; //@line 452 "textio.c"
        var $347=HEAP[$346]; //@line 452 "textio.c"
        var $348=($347) << 3; //@line 452 "textio.c"
        var $349=($348) >>> 5; //@line 452 "textio.c"
        var $350=((($349)) & 7); //@line 452 "textio.c"
        var $351=($350); //@line 452 "textio.c"
        var $352=$seennl; //@line 452 "textio.c"
        var $353=((($352)) & 255); //@line 452 "textio.c"
        var $354=($351) | ($353); //@line 452 "textio.c"
        var $355=((($354)) & 7); //@line 452 "textio.c"
        var $356=$self; //@line 452 "textio.c"
        var $357=$356+16; //@line 452 "textio.c"
        var $358=($355); //@line 452 "textio.c"
        var $359=HEAP[$357]; //@line 452 "textio.c"
        var $360=($358) << 2; //@line 452 "textio.c"
        var $361=($360) & 28; //@line 452 "textio.c"
        var $362=($359) & -29; //@line 452 "textio.c"
        var $363=($361) | ($362); //@line 452 "textio.c"
        HEAP[$357]=$363; //@line 452 "textio.c"
        var $364=HEAP[$output]; //@line 455 "textio.c"
        $0=$364; //@line 455 "textio.c"
        __label__ = 84; break; //@line 455 "textio.c"
      case 81: // $error
        var $365=HEAP[$output]; //@line 458 "textio.c"
        var $366=$365; //@line 458 "textio.c"
        var $367=HEAP[$366]; //@line 458 "textio.c"
        var $368=($367) - 1; //@line 458 "textio.c"
        var $369=$365; //@line 458 "textio.c"
        HEAP[$369]=$368; //@line 458 "textio.c"
        var $370=$365; //@line 458 "textio.c"
        var $371=HEAP[$370]; //@line 458 "textio.c"
        var $372=($371)==0; //@line 458 "textio.c"
        if ($372) { __label__ = 82; break; } else { __label__ = 83; break; } //@line 458 "textio.c"
      case 82: // $bb95
        var $373=HEAP[$output]; //@line 458 "textio.c"
        var $374=$373+4; //@line 458 "textio.c"
        var $375=HEAP[$374]; //@line 458 "textio.c"
        var $376=$375+24; //@line 458 "textio.c"
        var $377=HEAP[$376]; //@line 458 "textio.c"
        var $378=HEAP[$output]; //@line 458 "textio.c"
        FUNCTION_TABLE[$377]($378); //@line 458 "textio.c"
        __label__ = 83; break; //@line 458 "textio.c"
      case 83: // $bb96
        $0=0; //@line 459 "textio.c"
        __label__ = 84; break; //@line 459 "textio.c"
      case 84: // $bb97
        var $379=$0; //@line 255 "textio.c"
        $retval=$379; //@line 255 "textio.c"
        var $retval98=$retval; //@line 255 "textio.c"
        STACKTOP = __stackBase__;
        return $retval98; //@line 255 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _incrementalnewlinedecoder_decode($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 20; _memset(__stackBase__, 0, 20);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $kwds_addr;
        var $retval;
        var $0;
        var $kwlist=__stackBase__;
        var $input=__stackBase__+12;
        var $final=__stackBase__+16;
        $self_addr=$self;
        $args_addr=$args;
        $kwds_addr=$kwds;
        var $1=$kwlist; //@line 466 "textio.c"
        HEAP[$1]=__str16391; //@line 466 "textio.c"
        var $2=$kwlist+4; //@line 466 "textio.c"
        HEAP[$2]=__str17392; //@line 466 "textio.c"
        var $3=$kwlist+8; //@line 466 "textio.c"
        HEAP[$3]=0; //@line 466 "textio.c"
        HEAP[$final]=0; //@line 468 "textio.c"
        var $4=$args_addr; //@line 470 "textio.c"
        var $5=$kwds_addr; //@line 470 "textio.c"
        var $kwlist1=$kwlist; //@line 470 "textio.c"
        var $6=__PyArg_ParseTupleAndKeywords_SizeT($4, $5, __str18393, $kwlist1, allocate([$input,0,0,0,$final,0,0,0], ["%struct.PyObject**",0,0,0,"i32*",0,0,0], ALLOC_STACK)); //@line 470 "textio.c"
        var $7=($6)==0; //@line 470 "textio.c"
        if ($7) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 470 "textio.c"
      case 1: // $bb
        $0=0; //@line 472 "textio.c"
        __label__ = 3; break; //@line 472 "textio.c"
      case 2: // $bb2
        var $8=HEAP[$final]; //@line 473 "textio.c"
        var $9=HEAP[$input]; //@line 473 "textio.c"
        var $10=$self_addr; //@line 473 "textio.c"
        var $11=$10; //@line 473 "textio.c"
        var $12=__PyIncrementalNewlineDecoder_decode($11, $9, $8); //@line 473 "textio.c"
        $0=$12; //@line 473 "textio.c"
        __label__ = 3; break; //@line 473 "textio.c"
      case 3: // $bb3
        var $13=$0; //@line 472 "textio.c"
        $retval=$13; //@line 472 "textio.c"
        var $retval4=$retval; //@line 472 "textio.c"
        STACKTOP = __stackBase__;
        return $retval4; //@line 472 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _incrementalnewlinedecoder_getstate($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $buffer=__stackBase__;
        var $flag=__stackBase__+4;
        var $state;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 482 "textio.c"
        var $2=$1+8; //@line 482 "textio.c"
        var $3=HEAP[$2]; //@line 482 "textio.c"
        var $4=($3)!=(__Py_NoneStruct); //@line 482 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 9; break; } //@line 482 "textio.c"
      case 1: // $bb
        var $5=HEAP[__PyIO_str_getstate]; //@line 484 "textio.c"
        var $6=$self_addr; //@line 484 "textio.c"
        var $7=$6+8; //@line 484 "textio.c"
        var $8=HEAP[$7]; //@line 484 "textio.c"
        var $9=_PyObject_CallMethodObjArgs($8, $5, allocate(4, "i8*", ALLOC_STACK)); //@line 484 "textio.c"
        $state=$9; //@line 484 "textio.c"
        var $10=$state; //@line 485 "textio.c"
        var $11=($10)==0; //@line 485 "textio.c"
        if ($11) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 485 "textio.c"
      case 2: // $bb1
        $0=0; //@line 486 "textio.c"
        __label__ = 13; break; //@line 486 "textio.c"
      case 3: // $bb2
        var $12=$state; //@line 487 "textio.c"
        var $13=__PyArg_Parse_SizeT($12, __str19394, allocate([$buffer,0,0,0,$flag,0,0,0], ["%struct.PyObject**",0,0,0,"i64*",0,0,0], ALLOC_STACK)); //@line 487 "textio.c"
        var $14=($13)==0; //@line 487 "textio.c"
        if ($14) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 487 "textio.c"
      case 4: // $bb3
        var $15=$state; //@line 488 "textio.c"
        var $16=$15; //@line 488 "textio.c"
        var $17=HEAP[$16]; //@line 488 "textio.c"
        var $18=($17) - 1; //@line 488 "textio.c"
        var $19=$state; //@line 488 "textio.c"
        var $20=$19; //@line 488 "textio.c"
        HEAP[$20]=$18; //@line 488 "textio.c"
        var $21=$state; //@line 488 "textio.c"
        var $22=$21; //@line 488 "textio.c"
        var $23=HEAP[$22]; //@line 488 "textio.c"
        var $24=($23)==0; //@line 488 "textio.c"
        if ($24) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 488 "textio.c"
      case 5: // $bb4
        var $25=$state; //@line 488 "textio.c"
        var $26=$25+4; //@line 488 "textio.c"
        var $27=HEAP[$26]; //@line 488 "textio.c"
        var $28=$27+24; //@line 488 "textio.c"
        var $29=HEAP[$28]; //@line 488 "textio.c"
        var $30=$state; //@line 488 "textio.c"
        FUNCTION_TABLE[$29]($30); //@line 488 "textio.c"
        __label__ = 6; break; //@line 488 "textio.c"
      case 6: // $bb5
        $0=0; //@line 489 "textio.c"
        __label__ = 13; break; //@line 489 "textio.c"
      case 7: // $bb6
        var $31=HEAP[$buffer]; //@line 491 "textio.c"
        var $32=$31; //@line 491 "textio.c"
        var $33=HEAP[$32]; //@line 491 "textio.c"
        var $34=($33) + 1; //@line 491 "textio.c"
        var $35=$31; //@line 491 "textio.c"
        HEAP[$35]=$34; //@line 491 "textio.c"
        var $36=$state; //@line 492 "textio.c"
        var $37=$36; //@line 492 "textio.c"
        var $38=HEAP[$37]; //@line 492 "textio.c"
        var $39=($38) - 1; //@line 492 "textio.c"
        var $40=$state; //@line 492 "textio.c"
        var $41=$40; //@line 492 "textio.c"
        HEAP[$41]=$39; //@line 492 "textio.c"
        var $42=$state; //@line 492 "textio.c"
        var $43=$42; //@line 492 "textio.c"
        var $44=HEAP[$43]; //@line 492 "textio.c"
        var $45=($44)==0; //@line 492 "textio.c"
        if ($45) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 492 "textio.c"
      case 8: // $bb7
        var $46=$state; //@line 492 "textio.c"
        var $47=$46+4; //@line 492 "textio.c"
        var $48=HEAP[$47]; //@line 492 "textio.c"
        var $49=$48+24; //@line 492 "textio.c"
        var $50=HEAP[$49]; //@line 492 "textio.c"
        var $51=$state; //@line 492 "textio.c"
        FUNCTION_TABLE[$50]($51); //@line 492 "textio.c"
        __label__ = 10; break; //@line 492 "textio.c"
      case 9: // $bb9
        var $52=_PyString_FromString(__str20395); //@line 495 "textio.c"
        HEAP[$buffer]=$52; //@line 495 "textio.c"
        HEAP[$flag]=0; //@line 496 "textio.c"
        __label__ = 10; break; //@line 496 "textio.c"
      case 10: // $bb10
        var $53=HEAP[$flag]; //@line 498 "textio.c"
        var $54=($53)*Math.pow(2,1); //@line 498 "textio.c"
        HEAP[$flag]=$54; //@line 498 "textio.c"
        var $55=$self_addr; //@line 499 "textio.c"
        var $56=$55+16; //@line 499 "textio.c"
        var $57=HEAP[$56]; //@line 499 "textio.c"
        var $58=($57) << 7; //@line 499 "textio.c"
        var $59=($58) >> 7; //@line 499 "textio.c"
        var $60=((($59)) & 1); //@line 499 "textio.c"
        var $61=($60)!=0; //@line 499 "textio.c"
        if ($61) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 499 "textio.c"
      case 11: // $bb11
        var $62=HEAP[$flag]; //@line 500 "textio.c"
        var $63=Runtime.or64(($62), 1); //@line 500 "textio.c"
        HEAP[$flag]=$63; //@line 500 "textio.c"
        __label__ = 12; break; //@line 500 "textio.c"
      case 12: // $bb12
        var $64=HEAP[$flag]; //@line 501 "textio.c"
        var $65=HEAP[$buffer]; //@line 501 "textio.c"
        var $66=__Py_BuildValue_SizeT(__str21396, allocate([$65,0,0,0,$64,0,0,0,0,0,0,0], ["%struct.PyObject*",0,0,0,"i64",0,0,0,0,0,0,0], ALLOC_STACK)); //@line 501 "textio.c"
        $0=$66; //@line 501 "textio.c"
        __label__ = 13; break; //@line 501 "textio.c"
      case 13: // $bb13
        var $67=$0; //@line 486 "textio.c"
        $retval=$67; //@line 486 "textio.c"
        var $retval14=$retval; //@line 486 "textio.c"
        STACKTOP = __stackBase__;
        return $retval14; //@line 486 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _incrementalnewlinedecoder_setstate($self, $state) {
    var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $state_addr;
        var $retval;
        var $0;
        var $buffer=__stackBase__;
        var $flag=__stackBase__+4;
        $self_addr=$self;
        $state_addr=$state;
        var $1=$state_addr; //@line 510 "textio.c"
        var $2=__PyArg_Parse_SizeT($1, __str19394, allocate([$buffer,0,0,0,$flag,0,0,0], ["%struct.PyObject**",0,0,0,"i64*",0,0,0], ALLOC_STACK)); //@line 510 "textio.c"
        var $3=($2)==0; //@line 510 "textio.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 510 "textio.c"
      case 1: // $bb
        $0=0; //@line 511 "textio.c"
        __label__ = 5; break; //@line 511 "textio.c"
      case 2: // $bb1
        var $4=HEAP[$flag]; //@line 513 "textio.c"
        var $5=((($4)) & 255); //@line 513 "textio.c"
        var $6=((($5)) & 1); //@line 513 "textio.c"
        var $7=$self_addr; //@line 513 "textio.c"
        var $8=$7+16; //@line 513 "textio.c"
        var $9=($6); //@line 513 "textio.c"
        var $10=HEAP[$8]; //@line 513 "textio.c"
        var $11=($9) & 1; //@line 513 "textio.c"
        var $12=($10) & -2; //@line 513 "textio.c"
        var $13=($11) | ($12); //@line 513 "textio.c"
        HEAP[$8]=$13; //@line 513 "textio.c"
        var $14=HEAP[$flag]; //@line 514 "textio.c"
        var $15=($14)/Math.pow(2,1); //@line 514 "textio.c"
        HEAP[$flag]=$15; //@line 514 "textio.c"
        var $16=$self_addr; //@line 516 "textio.c"
        var $17=$16+8; //@line 516 "textio.c"
        var $18=HEAP[$17]; //@line 516 "textio.c"
        var $19=($18)!=(__Py_NoneStruct); //@line 516 "textio.c"
        if ($19) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 516 "textio.c"
      case 3: // $bb2
        var $20=HEAP[$flag]; //@line 517 "textio.c"
        var $21=HEAP[$buffer]; //@line 517 "textio.c"
        var $22=$self_addr; //@line 517 "textio.c"
        var $23=$22+8; //@line 517 "textio.c"
        var $24=HEAP[$23]; //@line 517 "textio.c"
        var $25=__PyObject_CallMethod_SizeT($24, __str22397, __str23398, allocate([$21,0,0,0,$20,0,0,0,0,0,0,0], ["%struct.PyObject*",0,0,0,"i64",0,0,0,0,0,0,0], ALLOC_STACK)); //@line 517 "textio.c"
        $0=$25; //@line 517 "textio.c"
        __label__ = 5; break; //@line 517 "textio.c"
      case 4: // $bb3
        var $26=HEAP[__Py_NoneStruct]; //@line 520 "textio.c"
        var $27=($26) + 1; //@line 520 "textio.c"
        HEAP[__Py_NoneStruct]=$27; //@line 520 "textio.c"
        $0=__Py_NoneStruct; //@line 520 "textio.c"
        __label__ = 5; break; //@line 520 "textio.c"
      case 5: // $bb4
        var $28=$0; //@line 511 "textio.c"
        $retval=$28; //@line 511 "textio.c"
        var $retval5=$retval; //@line 511 "textio.c"
        STACKTOP = __stackBase__;
        return $retval5; //@line 511 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _incrementalnewlinedecoder_reset($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 526 "textio.c"
        var $2=$1+16; //@line 526 "textio.c"
        var $3=HEAP[$2]; //@line 526 "textio.c"
        var $4=($3) & -29; //@line 526 "textio.c"
        HEAP[$2]=$4; //@line 526 "textio.c"
        var $5=$self_addr; //@line 527 "textio.c"
        var $6=$5+16; //@line 527 "textio.c"
        var $7=HEAP[$6]; //@line 527 "textio.c"
        var $8=($7) & -2; //@line 527 "textio.c"
        HEAP[$6]=$8; //@line 527 "textio.c"
        var $9=$self_addr; //@line 528 "textio.c"
        var $10=$9+8; //@line 528 "textio.c"
        var $11=HEAP[$10]; //@line 528 "textio.c"
        var $12=($11)!=(__Py_NoneStruct); //@line 528 "textio.c"
        if ($12) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 528 "textio.c"
      case 1: // $bb
        var $13=HEAP[__PyIO_str_reset]; //@line 529 "textio.c"
        var $14=$self_addr; //@line 529 "textio.c"
        var $15=$14+8; //@line 529 "textio.c"
        var $16=HEAP[$15]; //@line 529 "textio.c"
        var $17=_PyObject_CallMethodObjArgs($16, $13, allocate(4, "i8*", ALLOC_STACK)); //@line 529 "textio.c"
        $0=$17; //@line 529 "textio.c"
        __label__ = 3; break; //@line 529 "textio.c"
      case 2: // $bb1
        var $18=HEAP[__Py_NoneStruct]; //@line 531 "textio.c"
        var $19=($18) + 1; //@line 531 "textio.c"
        HEAP[__Py_NoneStruct]=$19; //@line 531 "textio.c"
        $0=__Py_NoneStruct; //@line 531 "textio.c"
        __label__ = 3; break; //@line 531 "textio.c"
      case 3: // $bb2
        var $20=$0; //@line 529 "textio.c"
        $retval=$20; //@line 529 "textio.c"
        var $retval3=$retval; //@line 529 "textio.c"
        ;
        return $retval3; //@line 529 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _incrementalnewlinedecoder_newlines_get($self, $context) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $context_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $context_addr=$context;
        var $1=$self_addr; //@line 537 "textio.c"
        var $2=$1+16; //@line 537 "textio.c"
        var $3=HEAP[$2]; //@line 537 "textio.c"
        var $4=($3) << 3; //@line 537 "textio.c"
        var $5=($4) >>> 5; //@line 537 "textio.c"
        var $6=((($5)) & 7); //@line 537 "textio.c"
        var $7=($6); //@line 537 "textio.c"
        if ($7 == 1) {
          __label__ = 1; break;
        }
        else if ($7 == 2) {
          __label__ = 2; break;
        }
        else if ($7 == 3) {
          __label__ = 4; break;
        }
        else if ($7 == 4) {
          __label__ = 3; break;
        }
        else if ($7 == 5) {
          __label__ = 5; break;
        }
        else if ($7 == 6) {
          __label__ = 6; break;
        }
        else if ($7 == 7) {
          __label__ = 7; break;
        }
        else {
        __label__ = 8; break;
        }
        
      case 1: // $bb
        var $8=_PyUnicodeUCS2_FromString(__str24399); //@line 539 "textio.c"
        $0=$8; //@line 539 "textio.c"
        __label__ = 9; break; //@line 539 "textio.c"
      case 2: // $bb1
        var $9=_PyUnicodeUCS2_FromString(__str25400); //@line 541 "textio.c"
        $0=$9; //@line 541 "textio.c"
        __label__ = 9; break; //@line 541 "textio.c"
      case 3: // $bb2
        var $10=_PyUnicodeUCS2_FromString(__str26401); //@line 543 "textio.c"
        $0=$10; //@line 543 "textio.c"
        __label__ = 9; break; //@line 543 "textio.c"
      case 4: // $bb3
        var $11=__Py_BuildValue_SizeT(__str27402, allocate([__str24399,0,0,0,__str25400,0,0,0], ["i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 545 "textio.c"
        $0=$11; //@line 545 "textio.c"
        __label__ = 9; break; //@line 545 "textio.c"
      case 5: // $bb4
        var $12=__Py_BuildValue_SizeT(__str27402, allocate([__str24399,0,0,0,__str26401,0,0,0], ["i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 547 "textio.c"
        $0=$12; //@line 547 "textio.c"
        __label__ = 9; break; //@line 547 "textio.c"
      case 6: // $bb5
        var $13=__Py_BuildValue_SizeT(__str27402, allocate([__str25400,0,0,0,__str26401,0,0,0], ["i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 549 "textio.c"
        $0=$13; //@line 549 "textio.c"
        __label__ = 9; break; //@line 549 "textio.c"
      case 7: // $bb6
        var $14=__Py_BuildValue_SizeT(__str28403, allocate([__str24399,0,0,0,__str25400,0,0,0,__str26401,0,0,0], ["i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 551 "textio.c"
        $0=$14; //@line 551 "textio.c"
        __label__ = 9; break; //@line 551 "textio.c"
      case 8: // $bb7
        var $15=HEAP[__Py_NoneStruct]; //@line 553 "textio.c"
        var $16=($15) + 1; //@line 553 "textio.c"
        HEAP[__Py_NoneStruct]=$16; //@line 553 "textio.c"
        $0=__Py_NoneStruct; //@line 553 "textio.c"
        __label__ = 9; break; //@line 553 "textio.c"
      case 9: // $bb8
        var $17=$0; //@line 539 "textio.c"
        $retval=$17; //@line 539 "textio.c"
        var $retval9=$retval; //@line 539 "textio.c"
        ;
        return $retval9; //@line 539 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _ascii_encode($self, $text) {
    ;
    var __label__;
  
    var $self_addr;
    var $text_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $text_addr=$text;
    var $1=$self_addr; //@line 701 "textio.c"
    var $2=$1+40; //@line 701 "textio.c"
    var $3=HEAP[$2]; //@line 701 "textio.c"
    var $4=$3; //@line 701 "textio.c"
    var $5=$4+20; //@line 701 "textio.c"
    var $6=$5; //@line 701 "textio.c"
    var $7=$text_addr; //@line 701 "textio.c"
    var $8=$7; //@line 701 "textio.c"
    var $9=$8+8; //@line 701 "textio.c"
    var $10=HEAP[$9]; //@line 701 "textio.c"
    var $11=$text_addr; //@line 701 "textio.c"
    var $12=$11; //@line 701 "textio.c"
    var $13=$12+12; //@line 701 "textio.c"
    var $14=HEAP[$13]; //@line 701 "textio.c"
    var $15=_PyUnicodeUCS2_EncodeASCII($14, $10, $6); //@line 701 "textio.c"
    $0=$15; //@line 701 "textio.c"
    var $16=$0; //@line 701 "textio.c"
    $retval=$16; //@line 701 "textio.c"
    var $retval1=$retval; //@line 701 "textio.c"
    ;
    return $retval1; //@line 701 "textio.c"
  }
  

  function _utf16be_encode($self, $text) {
    ;
    var __label__;
  
    var $self_addr;
    var $text_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $text_addr=$text;
    var $1=$self_addr; //@line 709 "textio.c"
    var $2=$1+40; //@line 709 "textio.c"
    var $3=HEAP[$2]; //@line 709 "textio.c"
    var $4=$3; //@line 709 "textio.c"
    var $5=$4+20; //@line 709 "textio.c"
    var $6=$5; //@line 709 "textio.c"
    var $7=$text_addr; //@line 709 "textio.c"
    var $8=$7; //@line 709 "textio.c"
    var $9=$8+8; //@line 709 "textio.c"
    var $10=HEAP[$9]; //@line 709 "textio.c"
    var $11=$text_addr; //@line 709 "textio.c"
    var $12=$11; //@line 709 "textio.c"
    var $13=$12+12; //@line 709 "textio.c"
    var $14=HEAP[$13]; //@line 709 "textio.c"
    var $15=_PyUnicodeUCS2_EncodeUTF16($14, $10, $6, 1); //@line 709 "textio.c"
    $0=$15; //@line 709 "textio.c"
    var $16=$0; //@line 709 "textio.c"
    $retval=$16; //@line 709 "textio.c"
    var $retval1=$retval; //@line 709 "textio.c"
    ;
    return $retval1; //@line 709 "textio.c"
  }
  

  function _utf16le_encode($self, $text) {
    ;
    var __label__;
  
    var $self_addr;
    var $text_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $text_addr=$text;
    var $1=$self_addr; //@line 717 "textio.c"
    var $2=$1+40; //@line 717 "textio.c"
    var $3=HEAP[$2]; //@line 717 "textio.c"
    var $4=$3; //@line 717 "textio.c"
    var $5=$4+20; //@line 717 "textio.c"
    var $6=$5; //@line 717 "textio.c"
    var $7=$text_addr; //@line 717 "textio.c"
    var $8=$7; //@line 717 "textio.c"
    var $9=$8+8; //@line 717 "textio.c"
    var $10=HEAP[$9]; //@line 717 "textio.c"
    var $11=$text_addr; //@line 717 "textio.c"
    var $12=$11; //@line 717 "textio.c"
    var $13=$12+12; //@line 717 "textio.c"
    var $14=HEAP[$13]; //@line 717 "textio.c"
    var $15=_PyUnicodeUCS2_EncodeUTF16($14, $10, $6, -1); //@line 717 "textio.c"
    $0=$15; //@line 717 "textio.c"
    var $16=$0; //@line 717 "textio.c"
    $retval=$16; //@line 717 "textio.c"
    var $retval1=$retval; //@line 717 "textio.c"
    ;
    return $retval1; //@line 717 "textio.c"
  }
  

  function _utf16_encode($self, $text) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $text_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $text_addr=$text;
        var $1=$self_addr; //@line 725 "textio.c"
        var $2=$1+60; //@line 725 "textio.c"
        var $3=HEAP[$2]; //@line 725 "textio.c"
        var $4=($3)==0; //@line 725 "textio.c"
        var $5=$self_addr; //@line 730 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 725 "textio.c"
      case 1: // $bb
        var $6=$text_addr; //@line 730 "textio.c"
        var $7=_utf16le_encode($5, $6); //@line 730 "textio.c"
        $0=$7; //@line 730 "textio.c"
        __label__ = 3; break; //@line 730 "textio.c"
      case 2: // $bb1
        var $8=$5+40; //@line 733 "textio.c"
        var $9=HEAP[$8]; //@line 733 "textio.c"
        var $10=$9; //@line 733 "textio.c"
        var $11=$10+20; //@line 733 "textio.c"
        var $12=$11; //@line 733 "textio.c"
        var $13=$text_addr; //@line 733 "textio.c"
        var $14=$13; //@line 733 "textio.c"
        var $15=$14+8; //@line 733 "textio.c"
        var $16=HEAP[$15]; //@line 733 "textio.c"
        var $17=$text_addr; //@line 733 "textio.c"
        var $18=$17; //@line 733 "textio.c"
        var $19=$18+12; //@line 733 "textio.c"
        var $20=HEAP[$19]; //@line 733 "textio.c"
        var $21=_PyUnicodeUCS2_EncodeUTF16($20, $16, $12, 0); //@line 733 "textio.c"
        $0=$21; //@line 733 "textio.c"
        __label__ = 3; break; //@line 733 "textio.c"
      case 3: // $bb2
        var $22=$0; //@line 730 "textio.c"
        $retval=$22; //@line 730 "textio.c"
        var $retval3=$retval; //@line 730 "textio.c"
        ;
        return $retval3; //@line 730 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _utf32be_encode($self, $text) {
    ;
    var __label__;
  
    var $self_addr;
    var $text_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $text_addr=$text;
    var $1=$self_addr; //@line 741 "textio.c"
    var $2=$1+40; //@line 741 "textio.c"
    var $3=HEAP[$2]; //@line 741 "textio.c"
    var $4=$3; //@line 741 "textio.c"
    var $5=$4+20; //@line 741 "textio.c"
    var $6=$5; //@line 741 "textio.c"
    var $7=$text_addr; //@line 741 "textio.c"
    var $8=$7; //@line 741 "textio.c"
    var $9=$8+8; //@line 741 "textio.c"
    var $10=HEAP[$9]; //@line 741 "textio.c"
    var $11=$text_addr; //@line 741 "textio.c"
    var $12=$11; //@line 741 "textio.c"
    var $13=$12+12; //@line 741 "textio.c"
    var $14=HEAP[$13]; //@line 741 "textio.c"
    var $15=_PyUnicodeUCS2_EncodeUTF32($14, $10, $6, 1); //@line 741 "textio.c"
    $0=$15; //@line 741 "textio.c"
    var $16=$0; //@line 741 "textio.c"
    $retval=$16; //@line 741 "textio.c"
    var $retval1=$retval; //@line 741 "textio.c"
    ;
    return $retval1; //@line 741 "textio.c"
  }
  

  function _utf32le_encode($self, $text) {
    ;
    var __label__;
  
    var $self_addr;
    var $text_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $text_addr=$text;
    var $1=$self_addr; //@line 749 "textio.c"
    var $2=$1+40; //@line 749 "textio.c"
    var $3=HEAP[$2]; //@line 749 "textio.c"
    var $4=$3; //@line 749 "textio.c"
    var $5=$4+20; //@line 749 "textio.c"
    var $6=$5; //@line 749 "textio.c"
    var $7=$text_addr; //@line 749 "textio.c"
    var $8=$7; //@line 749 "textio.c"
    var $9=$8+8; //@line 749 "textio.c"
    var $10=HEAP[$9]; //@line 749 "textio.c"
    var $11=$text_addr; //@line 749 "textio.c"
    var $12=$11; //@line 749 "textio.c"
    var $13=$12+12; //@line 749 "textio.c"
    var $14=HEAP[$13]; //@line 749 "textio.c"
    var $15=_PyUnicodeUCS2_EncodeUTF32($14, $10, $6, -1); //@line 749 "textio.c"
    $0=$15; //@line 749 "textio.c"
    var $16=$0; //@line 749 "textio.c"
    $retval=$16; //@line 749 "textio.c"
    var $retval1=$retval; //@line 749 "textio.c"
    ;
    return $retval1; //@line 749 "textio.c"
  }
  

  function _utf32_encode($self, $text) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $text_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $text_addr=$text;
        var $1=$self_addr; //@line 757 "textio.c"
        var $2=$1+60; //@line 757 "textio.c"
        var $3=HEAP[$2]; //@line 757 "textio.c"
        var $4=($3)==0; //@line 757 "textio.c"
        var $5=$self_addr; //@line 762 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 757 "textio.c"
      case 1: // $bb
        var $6=$text_addr; //@line 762 "textio.c"
        var $7=_utf32le_encode($5, $6); //@line 762 "textio.c"
        $0=$7; //@line 762 "textio.c"
        __label__ = 3; break; //@line 762 "textio.c"
      case 2: // $bb1
        var $8=$5+40; //@line 765 "textio.c"
        var $9=HEAP[$8]; //@line 765 "textio.c"
        var $10=$9; //@line 765 "textio.c"
        var $11=$10+20; //@line 765 "textio.c"
        var $12=$11; //@line 765 "textio.c"
        var $13=$text_addr; //@line 765 "textio.c"
        var $14=$13; //@line 765 "textio.c"
        var $15=$14+8; //@line 765 "textio.c"
        var $16=HEAP[$15]; //@line 765 "textio.c"
        var $17=$text_addr; //@line 765 "textio.c"
        var $18=$17; //@line 765 "textio.c"
        var $19=$18+12; //@line 765 "textio.c"
        var $20=HEAP[$19]; //@line 765 "textio.c"
        var $21=_PyUnicodeUCS2_EncodeUTF32($20, $16, $12, 0); //@line 765 "textio.c"
        $0=$21; //@line 765 "textio.c"
        __label__ = 3; break; //@line 765 "textio.c"
      case 3: // $bb2
        var $22=$0; //@line 762 "textio.c"
        $retval=$22; //@line 762 "textio.c"
        var $retval3=$retval; //@line 762 "textio.c"
        ;
        return $retval3; //@line 762 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _utf8_encode($self, $text) {
    ;
    var __label__;
  
    var $self_addr;
    var $text_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $text_addr=$text;
    var $1=$self_addr; //@line 773 "textio.c"
    var $2=$1+40; //@line 773 "textio.c"
    var $3=HEAP[$2]; //@line 773 "textio.c"
    var $4=$3; //@line 773 "textio.c"
    var $5=$4+20; //@line 773 "textio.c"
    var $6=$5; //@line 773 "textio.c"
    var $7=$text_addr; //@line 773 "textio.c"
    var $8=$7; //@line 773 "textio.c"
    var $9=$8+8; //@line 773 "textio.c"
    var $10=HEAP[$9]; //@line 773 "textio.c"
    var $11=$text_addr; //@line 773 "textio.c"
    var $12=$11; //@line 773 "textio.c"
    var $13=$12+12; //@line 773 "textio.c"
    var $14=HEAP[$13]; //@line 773 "textio.c"
    var $15=_PyUnicodeUCS2_EncodeUTF8($14, $10, $6); //@line 773 "textio.c"
    $0=$15; //@line 773 "textio.c"
    var $16=$0; //@line 773 "textio.c"
    $retval=$16; //@line 773 "textio.c"
    var $retval1=$retval; //@line 773 "textio.c"
    ;
    return $retval1; //@line 773 "textio.c"
  }
  

  function _latin1_encode($self, $text) {
    ;
    var __label__;
  
    var $self_addr;
    var $text_addr;
    var $retval;
    var $0;
    $self_addr=$self;
    $text_addr=$text;
    var $1=$self_addr; //@line 781 "textio.c"
    var $2=$1+40; //@line 781 "textio.c"
    var $3=HEAP[$2]; //@line 781 "textio.c"
    var $4=$3; //@line 781 "textio.c"
    var $5=$4+20; //@line 781 "textio.c"
    var $6=$5; //@line 781 "textio.c"
    var $7=$text_addr; //@line 781 "textio.c"
    var $8=$7; //@line 781 "textio.c"
    var $9=$8+8; //@line 781 "textio.c"
    var $10=HEAP[$9]; //@line 781 "textio.c"
    var $11=$text_addr; //@line 781 "textio.c"
    var $12=$11; //@line 781 "textio.c"
    var $13=$12+12; //@line 781 "textio.c"
    var $14=HEAP[$13]; //@line 781 "textio.c"
    var $15=_PyUnicodeUCS2_EncodeLatin1($14, $10, $6); //@line 781 "textio.c"
    $0=$15; //@line 781 "textio.c"
    var $16=$0; //@line 781 "textio.c"
    $retval=$16; //@line 781 "textio.c"
    var $retval1=$retval; //@line 781 "textio.c"
    ;
    return $retval1; //@line 781 "textio.c"
  }
  

  function _textiowrapper_init($self, $args, $kwds) {
    var __stackBase__  = STACKTOP; STACKTOP += 44; _memset(__stackBase__, 0, 44);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $kwds_addr;
        var $retval;
        var $iftmp_118;
        var $iftmp_111;
        var $0;
        var $kwlist=__stackBase__;
        var $buffer=__stackBase__+24;
        var $raw;
        var $encoding=__stackBase__+28;
        var $errors=__stackBase__+32;
        var $newline=__stackBase__+36;
        var $line_buffering=__stackBase__+40;
        var $res;
        var $r;
        var $_py_tmp;
        var $_py_tmp17;
        var $_py_tmp21;
        var $_py_tmp25;
        var $_py_tmp29;
        var $_py_tmp33;
        var $_py_tmp37;
        var $_py_tmp41;
        var $_py_tmp45;
        var $_py_tmp49;
        var $_py_tmp59;
        var $incrementalDecoder;
        var $_py_tmp95;
        var $ci;
        var $e;
        var $cookieObj;
        var $cmp;
        $self_addr=$self;
        $args_addr=$args;
        $kwds_addr=$kwds;
        var $1=$kwlist; //@line 812 "textio.c"
        HEAP[$1]=__str42418; //@line 812 "textio.c"
        var $2=$kwlist+4; //@line 812 "textio.c"
        HEAP[$2]=__str4378; //@line 812 "textio.c"
        var $3=$kwlist+8; //@line 812 "textio.c"
        HEAP[$3]=__str6380; //@line 812 "textio.c"
        var $4=$kwlist+12; //@line 812 "textio.c"
        HEAP[$4]=__str43419; //@line 812 "textio.c"
        var $5=$kwlist+16; //@line 812 "textio.c"
        HEAP[$5]=__str44420; //@line 812 "textio.c"
        var $6=$kwlist+20; //@line 812 "textio.c"
        HEAP[$6]=0; //@line 812 "textio.c"
        HEAP[$encoding]=0; //@line 814 "textio.c"
        HEAP[$errors]=0; //@line 815 "textio.c"
        HEAP[$newline]=0; //@line 816 "textio.c"
        HEAP[$line_buffering]=0; //@line 817 "textio.c"
        var $7=$self_addr; //@line 822 "textio.c"
        var $8=$7+8; //@line 822 "textio.c"
        HEAP[$8]=0; //@line 822 "textio.c"
        var $9=$self_addr; //@line 823 "textio.c"
        var $10=$9+12; //@line 823 "textio.c"
        HEAP[$10]=0; //@line 823 "textio.c"
        var $11=$args_addr; //@line 824 "textio.c"
        var $12=$kwds_addr; //@line 824 "textio.c"
        var $kwlist1=$kwlist; //@line 824 "textio.c"
        var $13=__PyArg_ParseTupleAndKeywords_SizeT($11, $12, __str45421, $kwlist1, allocate([$buffer,0,0,0,$encoding,0,0,0,$errors,0,0,0,$newline,0,0,0,$line_buffering,0,0,0], ["%struct.PyObject**",0,0,0,"i8**",0,0,0,"i8**",0,0,0,"i8**",0,0,0,"i32*",0,0,0], ALLOC_STACK)); //@line 824 "textio.c"
        var $14=($13)==0; //@line 824 "textio.c"
        if ($14) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 824 "textio.c"
      case 1: // $bb
        $0=-1; //@line 827 "textio.c"
        __label__ = 134; break; //@line 827 "textio.c"
      case 2: // $bb2
        var $15=HEAP[$newline]; //@line 829 "textio.c"
        var $16=($15)!=0; //@line 829 "textio.c"
        if ($16) { __label__ = 3; break; } else { __label__ = 12; break; } //@line 829 "textio.c"
      case 3: // $bb3
        var $17=HEAP[$newline]; //@line 829 "textio.c"
        var $18=$17; //@line 829 "textio.c"
        var $19=HEAP[$18]; //@line 829 "textio.c"
        var $20=($19)!=0; //@line 829 "textio.c"
        if ($20) { __label__ = 4; break; } else { __label__ = 12; break; } //@line 829 "textio.c"
      case 4: // $bb4
        var $21=HEAP[$newline]; //@line 829 "textio.c"
        var $22=$21; //@line 829 "textio.c"
        var $23=HEAP[$22]; //@line 829 "textio.c"
        var $24=($23)!=10; //@line 829 "textio.c"
        if ($24) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 829 "textio.c"
      case 5: // $bb5
        var $25=HEAP[$newline]; //@line 829 "textio.c"
        var $26=$25+1; //@line 829 "textio.c"
        var $27=HEAP[$26]; //@line 829 "textio.c"
        var $28=($27)!=0; //@line 829 "textio.c"
        if ($28) { __label__ = 6; break; } else { __label__ = 12; break; } //@line 829 "textio.c"
      case 6: // $bb6
        var $29=HEAP[$newline]; //@line 829 "textio.c"
        var $30=$29; //@line 829 "textio.c"
        var $31=HEAP[$30]; //@line 829 "textio.c"
        var $32=($31)!=13; //@line 829 "textio.c"
        if ($32) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 829 "textio.c"
      case 7: // $bb7
        var $33=HEAP[$newline]; //@line 829 "textio.c"
        var $34=$33+1; //@line 829 "textio.c"
        var $35=HEAP[$34]; //@line 829 "textio.c"
        var $36=($35)!=0; //@line 829 "textio.c"
        if ($36) { __label__ = 8; break; } else { __label__ = 12; break; } //@line 829 "textio.c"
      case 8: // $bb8
        var $37=HEAP[$newline]; //@line 829 "textio.c"
        var $38=$37; //@line 829 "textio.c"
        var $39=HEAP[$38]; //@line 829 "textio.c"
        var $40=($39)!=13; //@line 829 "textio.c"
        if ($40) { __label__ = 11; break; } else { __label__ = 9; break; } //@line 829 "textio.c"
      case 9: // $bb9
        var $41=HEAP[$newline]; //@line 829 "textio.c"
        var $42=$41+1; //@line 829 "textio.c"
        var $43=HEAP[$42]; //@line 829 "textio.c"
        var $44=($43)!=10; //@line 829 "textio.c"
        if ($44) { __label__ = 11; break; } else { __label__ = 10; break; } //@line 829 "textio.c"
      case 10: // $bb10
        var $45=HEAP[$newline]; //@line 829 "textio.c"
        var $46=$45+2; //@line 829 "textio.c"
        var $47=HEAP[$46]; //@line 829 "textio.c"
        var $48=($47)!=0; //@line 829 "textio.c"
        if ($48) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 829 "textio.c"
      case 11: // $bb11
        var $49=HEAP[$newline]; //@line 833 "textio.c"
        var $50=HEAP[_PyExc_ValueError]; //@line 833 "textio.c"
        var $51=_PyErr_Format($50, __str46422, allocate([$49,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 833 "textio.c"
        $0=-1; //@line 835 "textio.c"
        __label__ = 134; break; //@line 835 "textio.c"
      case 12: // $bb12
        var $52=$self_addr; //@line 838 "textio.c"
        var $53=$52+20; //@line 838 "textio.c"
        var $54=HEAP[$53]; //@line 838 "textio.c"
        var $55=($54)!=0; //@line 838 "textio.c"
        if ($55) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 838 "textio.c"
      case 13: // $bb13
        var $56=$self_addr; //@line 838 "textio.c"
        var $57=$56+20; //@line 838 "textio.c"
        var $58=HEAP[$57]; //@line 838 "textio.c"
        $_py_tmp=$58; //@line 838 "textio.c"
        var $59=$self_addr; //@line 838 "textio.c"
        var $60=$59+20; //@line 838 "textio.c"
        HEAP[$60]=0; //@line 838 "textio.c"
        var $61=$_py_tmp; //@line 838 "textio.c"
        var $62=$61; //@line 838 "textio.c"
        var $63=HEAP[$62]; //@line 838 "textio.c"
        var $64=($63) - 1; //@line 838 "textio.c"
        var $65=$_py_tmp; //@line 838 "textio.c"
        var $66=$65; //@line 838 "textio.c"
        HEAP[$66]=$64; //@line 838 "textio.c"
        var $67=$_py_tmp; //@line 838 "textio.c"
        var $68=$67; //@line 838 "textio.c"
        var $69=HEAP[$68]; //@line 838 "textio.c"
        var $70=($69)==0; //@line 838 "textio.c"
        if ($70) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 838 "textio.c"
      case 14: // $bb14
        var $71=$_py_tmp; //@line 838 "textio.c"
        var $72=$71+4; //@line 838 "textio.c"
        var $73=HEAP[$72]; //@line 838 "textio.c"
        var $74=$73+24; //@line 838 "textio.c"
        var $75=HEAP[$74]; //@line 838 "textio.c"
        var $76=$_py_tmp; //@line 838 "textio.c"
        FUNCTION_TABLE[$75]($76); //@line 838 "textio.c"
        __label__ = 15; break; //@line 838 "textio.c"
      case 15: // $bb15
        var $77=$self_addr; //@line 839 "textio.c"
        var $78=$77+24; //@line 839 "textio.c"
        var $79=HEAP[$78]; //@line 839 "textio.c"
        var $80=($79)!=0; //@line 839 "textio.c"
        if ($80) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 839 "textio.c"
      case 16: // $bb16
        var $81=$self_addr; //@line 839 "textio.c"
        var $82=$81+24; //@line 839 "textio.c"
        var $83=HEAP[$82]; //@line 839 "textio.c"
        $_py_tmp17=$83; //@line 839 "textio.c"
        var $84=$self_addr; //@line 839 "textio.c"
        var $85=$84+24; //@line 839 "textio.c"
        HEAP[$85]=0; //@line 839 "textio.c"
        var $86=$_py_tmp17; //@line 839 "textio.c"
        var $87=$86; //@line 839 "textio.c"
        var $88=HEAP[$87]; //@line 839 "textio.c"
        var $89=($88) - 1; //@line 839 "textio.c"
        var $90=$_py_tmp17; //@line 839 "textio.c"
        var $91=$90; //@line 839 "textio.c"
        HEAP[$91]=$89; //@line 839 "textio.c"
        var $92=$_py_tmp17; //@line 839 "textio.c"
        var $93=$92; //@line 839 "textio.c"
        var $94=HEAP[$93]; //@line 839 "textio.c"
        var $95=($94)==0; //@line 839 "textio.c"
        if ($95) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 839 "textio.c"
      case 17: // $bb18
        var $96=$_py_tmp17; //@line 839 "textio.c"
        var $97=$96+4; //@line 839 "textio.c"
        var $98=HEAP[$97]; //@line 839 "textio.c"
        var $99=$98+24; //@line 839 "textio.c"
        var $100=HEAP[$99]; //@line 839 "textio.c"
        var $101=$_py_tmp17; //@line 839 "textio.c"
        FUNCTION_TABLE[$100]($101); //@line 839 "textio.c"
        __label__ = 18; break; //@line 839 "textio.c"
      case 18: // $bb19
        var $102=$self_addr; //@line 840 "textio.c"
        var $103=$102+28; //@line 840 "textio.c"
        var $104=HEAP[$103]; //@line 840 "textio.c"
        var $105=($104)!=0; //@line 840 "textio.c"
        if ($105) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 840 "textio.c"
      case 19: // $bb20
        var $106=$self_addr; //@line 840 "textio.c"
        var $107=$106+28; //@line 840 "textio.c"
        var $108=HEAP[$107]; //@line 840 "textio.c"
        $_py_tmp21=$108; //@line 840 "textio.c"
        var $109=$self_addr; //@line 840 "textio.c"
        var $110=$109+28; //@line 840 "textio.c"
        HEAP[$110]=0; //@line 840 "textio.c"
        var $111=$_py_tmp21; //@line 840 "textio.c"
        var $112=$111; //@line 840 "textio.c"
        var $113=HEAP[$112]; //@line 840 "textio.c"
        var $114=($113) - 1; //@line 840 "textio.c"
        var $115=$_py_tmp21; //@line 840 "textio.c"
        var $116=$115; //@line 840 "textio.c"
        HEAP[$116]=$114; //@line 840 "textio.c"
        var $117=$_py_tmp21; //@line 840 "textio.c"
        var $118=$117; //@line 840 "textio.c"
        var $119=HEAP[$118]; //@line 840 "textio.c"
        var $120=($119)==0; //@line 840 "textio.c"
        if ($120) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 840 "textio.c"
      case 20: // $bb22
        var $121=$_py_tmp21; //@line 840 "textio.c"
        var $122=$121+4; //@line 840 "textio.c"
        var $123=HEAP[$122]; //@line 840 "textio.c"
        var $124=$123+24; //@line 840 "textio.c"
        var $125=HEAP[$124]; //@line 840 "textio.c"
        var $126=$_py_tmp21; //@line 840 "textio.c"
        FUNCTION_TABLE[$125]($126); //@line 840 "textio.c"
        __label__ = 21; break; //@line 840 "textio.c"
      case 21: // $bb23
        var $127=$self_addr; //@line 841 "textio.c"
        var $128=$127+32; //@line 841 "textio.c"
        var $129=HEAP[$128]; //@line 841 "textio.c"
        var $130=($129)!=0; //@line 841 "textio.c"
        if ($130) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 841 "textio.c"
      case 22: // $bb24
        var $131=$self_addr; //@line 841 "textio.c"
        var $132=$131+32; //@line 841 "textio.c"
        var $133=HEAP[$132]; //@line 841 "textio.c"
        $_py_tmp25=$133; //@line 841 "textio.c"
        var $134=$self_addr; //@line 841 "textio.c"
        var $135=$134+32; //@line 841 "textio.c"
        HEAP[$135]=0; //@line 841 "textio.c"
        var $136=$_py_tmp25; //@line 841 "textio.c"
        var $137=$136; //@line 841 "textio.c"
        var $138=HEAP[$137]; //@line 841 "textio.c"
        var $139=($138) - 1; //@line 841 "textio.c"
        var $140=$_py_tmp25; //@line 841 "textio.c"
        var $141=$140; //@line 841 "textio.c"
        HEAP[$141]=$139; //@line 841 "textio.c"
        var $142=$_py_tmp25; //@line 841 "textio.c"
        var $143=$142; //@line 841 "textio.c"
        var $144=HEAP[$143]; //@line 841 "textio.c"
        var $145=($144)==0; //@line 841 "textio.c"
        if ($145) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 841 "textio.c"
      case 23: // $bb26
        var $146=$_py_tmp25; //@line 841 "textio.c"
        var $147=$146+4; //@line 841 "textio.c"
        var $148=HEAP[$147]; //@line 841 "textio.c"
        var $149=$148+24; //@line 841 "textio.c"
        var $150=HEAP[$149]; //@line 841 "textio.c"
        var $151=$_py_tmp25; //@line 841 "textio.c"
        FUNCTION_TABLE[$150]($151); //@line 841 "textio.c"
        __label__ = 24; break; //@line 841 "textio.c"
      case 24: // $bb27
        var $152=$self_addr; //@line 842 "textio.c"
        var $153=$152+36; //@line 842 "textio.c"
        var $154=HEAP[$153]; //@line 842 "textio.c"
        var $155=($154)!=0; //@line 842 "textio.c"
        if ($155) { __label__ = 25; break; } else { __label__ = 27; break; } //@line 842 "textio.c"
      case 25: // $bb28
        var $156=$self_addr; //@line 842 "textio.c"
        var $157=$156+36; //@line 842 "textio.c"
        var $158=HEAP[$157]; //@line 842 "textio.c"
        $_py_tmp29=$158; //@line 842 "textio.c"
        var $159=$self_addr; //@line 842 "textio.c"
        var $160=$159+36; //@line 842 "textio.c"
        HEAP[$160]=0; //@line 842 "textio.c"
        var $161=$_py_tmp29; //@line 842 "textio.c"
        var $162=$161; //@line 842 "textio.c"
        var $163=HEAP[$162]; //@line 842 "textio.c"
        var $164=($163) - 1; //@line 842 "textio.c"
        var $165=$_py_tmp29; //@line 842 "textio.c"
        var $166=$165; //@line 842 "textio.c"
        HEAP[$166]=$164; //@line 842 "textio.c"
        var $167=$_py_tmp29; //@line 842 "textio.c"
        var $168=$167; //@line 842 "textio.c"
        var $169=HEAP[$168]; //@line 842 "textio.c"
        var $170=($169)==0; //@line 842 "textio.c"
        if ($170) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 842 "textio.c"
      case 26: // $bb30
        var $171=$_py_tmp29; //@line 842 "textio.c"
        var $172=$171+4; //@line 842 "textio.c"
        var $173=HEAP[$172]; //@line 842 "textio.c"
        var $174=$173+24; //@line 842 "textio.c"
        var $175=HEAP[$174]; //@line 842 "textio.c"
        var $176=$_py_tmp29; //@line 842 "textio.c"
        FUNCTION_TABLE[$175]($176); //@line 842 "textio.c"
        __label__ = 27; break; //@line 842 "textio.c"
      case 27: // $bb31
        var $177=$self_addr; //@line 843 "textio.c"
        var $178=$177+64; //@line 843 "textio.c"
        var $179=HEAP[$178]; //@line 843 "textio.c"
        var $180=($179)!=0; //@line 843 "textio.c"
        if ($180) { __label__ = 28; break; } else { __label__ = 30; break; } //@line 843 "textio.c"
      case 28: // $bb32
        var $181=$self_addr; //@line 843 "textio.c"
        var $182=$181+64; //@line 843 "textio.c"
        var $183=HEAP[$182]; //@line 843 "textio.c"
        $_py_tmp33=$183; //@line 843 "textio.c"
        var $184=$self_addr; //@line 843 "textio.c"
        var $185=$184+64; //@line 843 "textio.c"
        HEAP[$185]=0; //@line 843 "textio.c"
        var $186=$_py_tmp33; //@line 843 "textio.c"
        var $187=$186; //@line 843 "textio.c"
        var $188=HEAP[$187]; //@line 843 "textio.c"
        var $189=($188) - 1; //@line 843 "textio.c"
        var $190=$_py_tmp33; //@line 843 "textio.c"
        var $191=$190; //@line 843 "textio.c"
        HEAP[$191]=$189; //@line 843 "textio.c"
        var $192=$_py_tmp33; //@line 843 "textio.c"
        var $193=$192; //@line 843 "textio.c"
        var $194=HEAP[$193]; //@line 843 "textio.c"
        var $195=($194)==0; //@line 843 "textio.c"
        if ($195) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 843 "textio.c"
      case 29: // $bb34
        var $196=$_py_tmp33; //@line 843 "textio.c"
        var $197=$196+4; //@line 843 "textio.c"
        var $198=HEAP[$197]; //@line 843 "textio.c"
        var $199=$198+24; //@line 843 "textio.c"
        var $200=HEAP[$199]; //@line 843 "textio.c"
        var $201=$_py_tmp33; //@line 843 "textio.c"
        FUNCTION_TABLE[$200]($201); //@line 843 "textio.c"
        __label__ = 30; break; //@line 843 "textio.c"
      case 30: // $bb35
        var $202=$self_addr; //@line 844 "textio.c"
        var $203=$202+72; //@line 844 "textio.c"
        var $204=HEAP[$203]; //@line 844 "textio.c"
        var $205=($204)!=0; //@line 844 "textio.c"
        if ($205) { __label__ = 31; break; } else { __label__ = 33; break; } //@line 844 "textio.c"
      case 31: // $bb36
        var $206=$self_addr; //@line 844 "textio.c"
        var $207=$206+72; //@line 844 "textio.c"
        var $208=HEAP[$207]; //@line 844 "textio.c"
        $_py_tmp37=$208; //@line 844 "textio.c"
        var $209=$self_addr; //@line 844 "textio.c"
        var $210=$209+72; //@line 844 "textio.c"
        HEAP[$210]=0; //@line 844 "textio.c"
        var $211=$_py_tmp37; //@line 844 "textio.c"
        var $212=$211; //@line 844 "textio.c"
        var $213=HEAP[$212]; //@line 844 "textio.c"
        var $214=($213) - 1; //@line 844 "textio.c"
        var $215=$_py_tmp37; //@line 844 "textio.c"
        var $216=$215; //@line 844 "textio.c"
        HEAP[$216]=$214; //@line 844 "textio.c"
        var $217=$_py_tmp37; //@line 844 "textio.c"
        var $218=$217; //@line 844 "textio.c"
        var $219=HEAP[$218]; //@line 844 "textio.c"
        var $220=($219)==0; //@line 844 "textio.c"
        if ($220) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 844 "textio.c"
      case 32: // $bb38
        var $221=$_py_tmp37; //@line 844 "textio.c"
        var $222=$221+4; //@line 844 "textio.c"
        var $223=HEAP[$222]; //@line 844 "textio.c"
        var $224=$223+24; //@line 844 "textio.c"
        var $225=HEAP[$224]; //@line 844 "textio.c"
        var $226=$_py_tmp37; //@line 844 "textio.c"
        FUNCTION_TABLE[$225]($226); //@line 844 "textio.c"
        __label__ = 33; break; //@line 844 "textio.c"
      case 33: // $bb39
        var $227=$self_addr; //@line 845 "textio.c"
        var $228=$227+80; //@line 845 "textio.c"
        var $229=HEAP[$228]; //@line 845 "textio.c"
        var $230=($229)!=0; //@line 845 "textio.c"
        if ($230) { __label__ = 34; break; } else { __label__ = 36; break; } //@line 845 "textio.c"
      case 34: // $bb40
        var $231=$self_addr; //@line 845 "textio.c"
        var $232=$231+80; //@line 845 "textio.c"
        var $233=HEAP[$232]; //@line 845 "textio.c"
        $_py_tmp41=$233; //@line 845 "textio.c"
        var $234=$self_addr; //@line 845 "textio.c"
        var $235=$234+80; //@line 845 "textio.c"
        HEAP[$235]=0; //@line 845 "textio.c"
        var $236=$_py_tmp41; //@line 845 "textio.c"
        var $237=$236; //@line 845 "textio.c"
        var $238=HEAP[$237]; //@line 845 "textio.c"
        var $239=($238) - 1; //@line 845 "textio.c"
        var $240=$_py_tmp41; //@line 845 "textio.c"
        var $241=$240; //@line 845 "textio.c"
        HEAP[$241]=$239; //@line 845 "textio.c"
        var $242=$_py_tmp41; //@line 845 "textio.c"
        var $243=$242; //@line 845 "textio.c"
        var $244=HEAP[$243]; //@line 845 "textio.c"
        var $245=($244)==0; //@line 845 "textio.c"
        if ($245) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 845 "textio.c"
      case 35: // $bb42
        var $246=$_py_tmp41; //@line 845 "textio.c"
        var $247=$246+4; //@line 845 "textio.c"
        var $248=HEAP[$247]; //@line 845 "textio.c"
        var $249=$248+24; //@line 845 "textio.c"
        var $250=HEAP[$249]; //@line 845 "textio.c"
        var $251=$_py_tmp41; //@line 845 "textio.c"
        FUNCTION_TABLE[$250]($251); //@line 845 "textio.c"
        __label__ = 36; break; //@line 845 "textio.c"
      case 36: // $bb43
        var $252=$self_addr; //@line 846 "textio.c"
        var $253=$252+40; //@line 846 "textio.c"
        var $254=HEAP[$253]; //@line 846 "textio.c"
        var $255=($254)!=0; //@line 846 "textio.c"
        if ($255) { __label__ = 37; break; } else { __label__ = 39; break; } //@line 846 "textio.c"
      case 37: // $bb44
        var $256=$self_addr; //@line 846 "textio.c"
        var $257=$256+40; //@line 846 "textio.c"
        var $258=HEAP[$257]; //@line 846 "textio.c"
        $_py_tmp45=$258; //@line 846 "textio.c"
        var $259=$self_addr; //@line 846 "textio.c"
        var $260=$259+40; //@line 846 "textio.c"
        HEAP[$260]=0; //@line 846 "textio.c"
        var $261=$_py_tmp45; //@line 846 "textio.c"
        var $262=$261; //@line 846 "textio.c"
        var $263=HEAP[$262]; //@line 846 "textio.c"
        var $264=($263) - 1; //@line 846 "textio.c"
        var $265=$_py_tmp45; //@line 846 "textio.c"
        var $266=$265; //@line 846 "textio.c"
        HEAP[$266]=$264; //@line 846 "textio.c"
        var $267=$_py_tmp45; //@line 846 "textio.c"
        var $268=$267; //@line 846 "textio.c"
        var $269=HEAP[$268]; //@line 846 "textio.c"
        var $270=($269)==0; //@line 846 "textio.c"
        if ($270) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 846 "textio.c"
      case 38: // $bb46
        var $271=$_py_tmp45; //@line 846 "textio.c"
        var $272=$271+4; //@line 846 "textio.c"
        var $273=HEAP[$272]; //@line 846 "textio.c"
        var $274=$273+24; //@line 846 "textio.c"
        var $275=HEAP[$274]; //@line 846 "textio.c"
        var $276=$_py_tmp45; //@line 846 "textio.c"
        FUNCTION_TABLE[$275]($276); //@line 846 "textio.c"
        __label__ = 39; break; //@line 846 "textio.c"
      case 39: // $bb47
        var $277=$self_addr; //@line 847 "textio.c"
        var $278=$277+84; //@line 847 "textio.c"
        var $279=HEAP[$278]; //@line 847 "textio.c"
        var $280=($279)!=0; //@line 847 "textio.c"
        if ($280) { __label__ = 40; break; } else { __label__ = 42; break; } //@line 847 "textio.c"
      case 40: // $bb48
        var $281=$self_addr; //@line 847 "textio.c"
        var $282=$281+84; //@line 847 "textio.c"
        var $283=HEAP[$282]; //@line 847 "textio.c"
        $_py_tmp49=$283; //@line 847 "textio.c"
        var $284=$self_addr; //@line 847 "textio.c"
        var $285=$284+84; //@line 847 "textio.c"
        HEAP[$285]=0; //@line 847 "textio.c"
        var $286=$_py_tmp49; //@line 847 "textio.c"
        var $287=$286; //@line 847 "textio.c"
        var $288=HEAP[$287]; //@line 847 "textio.c"
        var $289=($288) - 1; //@line 847 "textio.c"
        var $290=$_py_tmp49; //@line 847 "textio.c"
        var $291=$290; //@line 847 "textio.c"
        HEAP[$291]=$289; //@line 847 "textio.c"
        var $292=$_py_tmp49; //@line 847 "textio.c"
        var $293=$292; //@line 847 "textio.c"
        var $294=HEAP[$293]; //@line 847 "textio.c"
        var $295=($294)==0; //@line 847 "textio.c"
        if ($295) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 847 "textio.c"
      case 41: // $bb50
        var $296=$_py_tmp49; //@line 847 "textio.c"
        var $297=$296+4; //@line 847 "textio.c"
        var $298=HEAP[$297]; //@line 847 "textio.c"
        var $299=$298+24; //@line 847 "textio.c"
        var $300=HEAP[$299]; //@line 847 "textio.c"
        var $301=$_py_tmp49; //@line 847 "textio.c"
        FUNCTION_TABLE[$300]($301); //@line 847 "textio.c"
        __label__ = 42; break; //@line 847 "textio.c"
      case 42: // $bb51
        var $302=$self_addr; //@line 848 "textio.c"
        var $303=$302+68; //@line 848 "textio.c"
        HEAP[$303]=0; //@line 848 "textio.c"
        var $304=$self_addr; //@line 849 "textio.c"
        var $305=$304+76; //@line 849 "textio.c"
        HEAP[$305]=0; //@line 849 "textio.c"
        var $306=$self_addr; //@line 850 "textio.c"
        var $307=$306+56; //@line 850 "textio.c"
        HEAP[$307]=0; //@line 850 "textio.c"
        var $308=$self_addr; //@line 851 "textio.c"
        var $309=$308+44; //@line 851 "textio.c"
        HEAP[$309]=0; //@line 851 "textio.c"
        var $310=HEAP[$encoding]; //@line 853 "textio.c"
        var $311=($310)==0; //@line 853 "textio.c"
        if ($311) { __label__ = 43; break; } else { __label__ = 53; break; } //@line 853 "textio.c"
      case 43: // $bb52
        var $312=$self_addr; //@line 853 "textio.c"
        var $313=$312+24; //@line 853 "textio.c"
        var $314=HEAP[$313]; //@line 853 "textio.c"
        var $315=($314)==0; //@line 853 "textio.c"
        if ($315) { __label__ = 44; break; } else { __label__ = 53; break; } //@line 853 "textio.c"
      case 44: // $bb53
        var $316=HEAP[__PyIO_locale_module]; //@line 854 "textio.c"
        var $317=($316)==0; //@line 854 "textio.c"
        if ($317) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 854 "textio.c"
      case 45: // $bb54
        var $318=_PyImport_ImportModule(__str47423); //@line 855 "textio.c"
        HEAP[__PyIO_locale_module]=$318; //@line 855 "textio.c"
        var $319=HEAP[__PyIO_locale_module]; //@line 856 "textio.c"
        var $320=($319)==0; //@line 856 "textio.c"
        if ($320) { __label__ = 47; break; } else { __label__ = 46; break; } //@line 856 "textio.c"
      case 46: // $use_locale
        var $321=HEAP[__PyIO_locale_module]; //@line 863 "textio.c"
        var $322=__PyObject_CallMethod_SizeT($321, __str48424, 0, allocate(1, "i32", ALLOC_STACK)); //@line 863 "textio.c"
        var $323=$self_addr; //@line 863 "textio.c"
        var $324=$323+24; //@line 863 "textio.c"
        HEAP[$324]=$322; //@line 863 "textio.c"
        var $325=$self_addr; //@line 865 "textio.c"
        var $326=$325+24; //@line 865 "textio.c"
        var $327=HEAP[$326]; //@line 865 "textio.c"
        var $328=($327)==0; //@line 865 "textio.c"
        if ($328) { __label__ = 47; break; } else { __label__ = 49; break; } //@line 865 "textio.c"
      case 47: // $catch_ImportError
        var $329=HEAP[_PyExc_ImportError]; //@line 873 "textio.c"
        var $330=_PyErr_ExceptionMatches($329); //@line 873 "textio.c"
        var $331=($330)!=0; //@line 873 "textio.c"
        if ($331) { __label__ = 48; break; } else { __label__ = 133; break; } //@line 873 "textio.c"
      case 48: // $bb55
        _PyErr_Clear(); //@line 874 "textio.c"
        var $332=_PyString_FromString(__str33409); //@line 875 "textio.c"
        var $333=$self_addr; //@line 875 "textio.c"
        var $334=$333+24; //@line 875 "textio.c"
        HEAP[$334]=$332; //@line 875 "textio.c"
        __label__ = 53; break; //@line 875 "textio.c"
      case 49: // $bb56
        var $335=$self_addr; //@line 880 "textio.c"
        var $336=$335+24; //@line 880 "textio.c"
        var $337=HEAP[$336]; //@line 880 "textio.c"
        var $338=$337+4; //@line 880 "textio.c"
        var $339=HEAP[$338]; //@line 880 "textio.c"
        var $340=$339+84; //@line 880 "textio.c"
        var $341=HEAP[$340]; //@line 880 "textio.c"
        var $342=($341) & 134217728; //@line 880 "textio.c"
        var $343=($342)==0; //@line 880 "textio.c"
        if ($343) { __label__ = 50; break; } else { __label__ = 53; break; } //@line 880 "textio.c"
      case 50: // $bb57
        var $344=$self_addr; //@line 881 "textio.c"
        var $345=$344+24; //@line 881 "textio.c"
        var $346=HEAP[$345]; //@line 881 "textio.c"
        var $347=($346)!=0; //@line 881 "textio.c"
        if ($347) { __label__ = 51; break; } else { __label__ = 53; break; } //@line 881 "textio.c"
      case 51: // $bb58
        var $348=$self_addr; //@line 881 "textio.c"
        var $349=$348+24; //@line 881 "textio.c"
        var $350=HEAP[$349]; //@line 881 "textio.c"
        $_py_tmp59=$350; //@line 881 "textio.c"
        var $351=$self_addr; //@line 881 "textio.c"
        var $352=$351+24; //@line 881 "textio.c"
        HEAP[$352]=0; //@line 881 "textio.c"
        var $353=$_py_tmp59; //@line 881 "textio.c"
        var $354=$353; //@line 881 "textio.c"
        var $355=HEAP[$354]; //@line 881 "textio.c"
        var $356=($355) - 1; //@line 881 "textio.c"
        var $357=$_py_tmp59; //@line 881 "textio.c"
        var $358=$357; //@line 881 "textio.c"
        HEAP[$358]=$356; //@line 881 "textio.c"
        var $359=$_py_tmp59; //@line 881 "textio.c"
        var $360=$359; //@line 881 "textio.c"
        var $361=HEAP[$360]; //@line 881 "textio.c"
        var $362=($361)==0; //@line 881 "textio.c"
        if ($362) { __label__ = 52; break; } else { __label__ = 53; break; } //@line 881 "textio.c"
      case 52: // $bb60
        var $363=$_py_tmp59; //@line 881 "textio.c"
        var $364=$363+4; //@line 881 "textio.c"
        var $365=HEAP[$364]; //@line 881 "textio.c"
        var $366=$365+24; //@line 881 "textio.c"
        var $367=HEAP[$366]; //@line 881 "textio.c"
        var $368=$_py_tmp59; //@line 881 "textio.c"
        FUNCTION_TABLE[$367]($368); //@line 881 "textio.c"
        __label__ = 53; break; //@line 881 "textio.c"
      case 53: // $bb61
        var $369=$self_addr; //@line 884 "textio.c"
        var $370=$369+24; //@line 884 "textio.c"
        var $371=HEAP[$370]; //@line 884 "textio.c"
        var $372=($371)!=0; //@line 884 "textio.c"
        if ($372) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 884 "textio.c"
      case 54: // $bb62
        var $373=$self_addr; //@line 885 "textio.c"
        var $374=$373+24; //@line 885 "textio.c"
        var $375=HEAP[$374]; //@line 885 "textio.c"
        var $376=_PyString_AsString($375); //@line 885 "textio.c"
        HEAP[$encoding]=$376; //@line 885 "textio.c"
        __label__ = 58; break; //@line 885 "textio.c"
      case 55: // $bb63
        var $377=HEAP[$encoding]; //@line 886 "textio.c"
        var $378=($377)!=0; //@line 886 "textio.c"
        if ($378) { __label__ = 56; break; } else { __label__ = 57; break; } //@line 886 "textio.c"
      case 56: // $bb64
        var $379=HEAP[$encoding]; //@line 887 "textio.c"
        var $380=_PyString_FromString($379); //@line 887 "textio.c"
        var $381=$self_addr; //@line 887 "textio.c"
        var $382=$381+24; //@line 887 "textio.c"
        HEAP[$382]=$380; //@line 887 "textio.c"
        var $383=$self_addr; //@line 888 "textio.c"
        var $384=$383+24; //@line 888 "textio.c"
        var $385=HEAP[$384]; //@line 888 "textio.c"
        var $386=($385)==0; //@line 888 "textio.c"
        if ($386) { __label__ = 133; break; } else { __label__ = 58; break; } //@line 888 "textio.c"
      case 57: // $bb66
        var $387=HEAP[_PyExc_IOError]; //@line 892 "textio.c"
        _PyErr_SetString($387, __str49425); //@line 892 "textio.c"
        __label__ = 58; break; //@line 892 "textio.c"
      case 58: // $bb67
        var $388=HEAP[$errors]; //@line 896 "textio.c"
        var $389=($388)==0; //@line 896 "textio.c"
        if ($389) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 896 "textio.c"
      case 59: // $bb68
        HEAP[$errors]=__str11386; //@line 897 "textio.c"
        __label__ = 60; break; //@line 897 "textio.c"
      case 60: // $bb69
        var $390=HEAP[$errors]; //@line 898 "textio.c"
        var $391=_PyString_FromString($390); //@line 898 "textio.c"
        var $392=$self_addr; //@line 898 "textio.c"
        var $393=$392+40; //@line 898 "textio.c"
        HEAP[$393]=$391; //@line 898 "textio.c"
        var $394=$self_addr; //@line 899 "textio.c"
        var $395=$394+40; //@line 899 "textio.c"
        var $396=HEAP[$395]; //@line 899 "textio.c"
        var $397=($396)==0; //@line 899 "textio.c"
        if ($397) { __label__ = 133; break; } else { __label__ = 61; break; } //@line 899 "textio.c"
      case 61: // $bb70
        var $398=$self_addr; //@line 902 "textio.c"
        var $399=$398+16; //@line 902 "textio.c"
        HEAP[$399]=8192; //@line 902 "textio.c"
        var $400=HEAP[$newline]; //@line 903 "textio.c"
        var $401=($400)==0; //@line 903 "textio.c"
        if ($401) { __label__ = 63; break; } else { __label__ = 62; break; } //@line 903 "textio.c"
      case 62: // $bb71
        var $402=HEAP[$newline]; //@line 903 "textio.c"
        var $403=$402; //@line 903 "textio.c"
        var $404=HEAP[$403]; //@line 903 "textio.c"
        var $405=($404)==0; //@line 903 "textio.c"
        if ($405) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 903 "textio.c"
      case 63: // $bb72
        $iftmp_111=1; //@line 903 "textio.c"
        __label__ = 65; break; //@line 903 "textio.c"
      case 64: // $bb73
        $iftmp_111=0; //@line 903 "textio.c"
        __label__ = 65; break; //@line 903 "textio.c"
      case 65: // $bb74
        var $406=$iftmp_111; //@line 903 "textio.c"
        var $407=((($406)) & 255); //@line 903 "textio.c"
        var $408=$self_addr; //@line 903 "textio.c"
        var $409=$408+49; //@line 903 "textio.c"
        HEAP[$409]=$407; //@line 903 "textio.c"
        var $410=HEAP[$line_buffering]; //@line 904 "textio.c"
        var $411=((($410)) & 255); //@line 904 "textio.c"
        var $412=$self_addr; //@line 904 "textio.c"
        var $413=$412+48; //@line 904 "textio.c"
        HEAP[$413]=$411; //@line 904 "textio.c"
        var $414=HEAP[$newline]; //@line 905 "textio.c"
        var $415=($414)==0; //@line 905 "textio.c"
        var $416=($415); //@line 905 "textio.c"
        var $417=$self_addr; //@line 905 "textio.c"
        var $418=$417+50; //@line 905 "textio.c"
        HEAP[$418]=$416; //@line 905 "textio.c"
        var $419=HEAP[$newline]; //@line 906 "textio.c"
        var $420=($419)!=0; //@line 906 "textio.c"
        if ($420) { __label__ = 66; break; } else { __label__ = 70; break; } //@line 906 "textio.c"
      case 66: // $bb75
        var $421=HEAP[$newline]; //@line 907 "textio.c"
        var $422=_PyString_FromString($421); //@line 907 "textio.c"
        var $423=$self_addr; //@line 907 "textio.c"
        var $424=$423+36; //@line 907 "textio.c"
        HEAP[$424]=$422; //@line 907 "textio.c"
        var $425=$self_addr; //@line 908 "textio.c"
        var $426=$425+36; //@line 908 "textio.c"
        var $427=HEAP[$426]; //@line 908 "textio.c"
        var $428=($427)==0; //@line 908 "textio.c"
        if ($428) { __label__ = 67; break; } else { __label__ = 68; break; } //@line 908 "textio.c"
      case 67: // $bb76
        $0=-1; //@line 909 "textio.c"
        __label__ = 134; break; //@line 909 "textio.c"
      case 68: // $bb77
        var $_pr=HEAP[$newline];
        var $429=($_pr)==0; //@line 911 "textio.c"
        if ($429) { __label__ = 70; break; } else { __label__ = 69; break; } //@line 911 "textio.c"
      case 69: // $bb78
        var $430=HEAP[$newline]; //@line 911 "textio.c"
        var $431=$430; //@line 911 "textio.c"
        var $432=HEAP[$431]; //@line 911 "textio.c"
        var $433=($432)!=0; //@line 911 "textio.c"
        if ($433) { __label__ = 70; break; } else { __label__ = 71; break; } //@line 911 "textio.c"
      case 70: // $bb79
        $iftmp_118=1; //@line 911 "textio.c"
        __label__ = 72; break; //@line 911 "textio.c"
      case 71: // $bb80
        $iftmp_118=0; //@line 911 "textio.c"
        __label__ = 72; break; //@line 911 "textio.c"
      case 72: // $bb81
        var $434=$iftmp_118; //@line 911 "textio.c"
        var $435=((($434)) & 255); //@line 911 "textio.c"
        var $436=$self_addr; //@line 911 "textio.c"
        var $437=$436+51; //@line 911 "textio.c"
        HEAP[$437]=$435; //@line 911 "textio.c"
        var $438=$self_addr; //@line 912 "textio.c"
        var $439=$438+49; //@line 912 "textio.c"
        var $440=HEAP[$439]; //@line 912 "textio.c"
        var $441=($440)==0; //@line 912 "textio.c"
        if ($441) { __label__ = 73; break; } else { __label__ = 76; break; } //@line 912 "textio.c"
      case 73: // $bb82
        var $442=$self_addr; //@line 912 "textio.c"
        var $443=$442+51; //@line 912 "textio.c"
        var $444=HEAP[$443]; //@line 912 "textio.c"
        var $445=($444)!=0; //@line 912 "textio.c"
        if ($445) { __label__ = 74; break; } else { __label__ = 76; break; } //@line 912 "textio.c"
      case 74: // $bb83
        var $446=$self_addr; //@line 913 "textio.c"
        var $447=$446+36; //@line 913 "textio.c"
        var $448=HEAP[$447]; //@line 913 "textio.c"
        var $449=_PyString_AsString($448); //@line 913 "textio.c"
        var $450=$self_addr; //@line 913 "textio.c"
        var $451=$450+44; //@line 913 "textio.c"
        HEAP[$451]=$449; //@line 913 "textio.c"
        var $452=$self_addr; //@line 914 "textio.c"
        var $453=$452+44; //@line 914 "textio.c"
        var $454=HEAP[$453]; //@line 914 "textio.c"
        var $455=_strcmp($454, __str25400); //@line 914 "textio.c"
        var $456=($455)==0; //@line 914 "textio.c"
        if ($456) { __label__ = 75; break; } else { __label__ = 76; break; } //@line 914 "textio.c"
      case 75: // $bb84
        var $457=$self_addr; //@line 915 "textio.c"
        var $458=$457+44; //@line 915 "textio.c"
        HEAP[$458]=0; //@line 915 "textio.c"
        __label__ = 76; break; //@line 915 "textio.c"
      case 76: // $bb85
        var $459=HEAP[$buffer]; //@line 923 "textio.c"
        var $460=__PyObject_CallMethod_SizeT($459, __str50426, 0, allocate(1, "i32", ALLOC_STACK)); //@line 923 "textio.c"
        $res=$460; //@line 923 "textio.c"
        var $461=($460)==0; //@line 924 "textio.c"
        if ($461) { __label__ = 133; break; } else { __label__ = 77; break; } //@line 924 "textio.c"
      case 77: // $bb86
        var $462=$res; //@line 926 "textio.c"
        var $463=_PyObject_IsTrue($462); //@line 926 "textio.c"
        $r=$463; //@line 926 "textio.c"
        var $464=$res; //@line 927 "textio.c"
        var $465=$464; //@line 927 "textio.c"
        var $466=HEAP[$465]; //@line 927 "textio.c"
        var $467=($466) - 1; //@line 927 "textio.c"
        var $468=$res; //@line 927 "textio.c"
        var $469=$468; //@line 927 "textio.c"
        HEAP[$469]=$467; //@line 927 "textio.c"
        var $470=$res; //@line 927 "textio.c"
        var $471=$470; //@line 927 "textio.c"
        var $472=HEAP[$471]; //@line 927 "textio.c"
        var $473=($472)==0; //@line 927 "textio.c"
        if ($473) { __label__ = 78; break; } else { __label__ = 79; break; } //@line 927 "textio.c"
      case 78: // $bb87
        var $474=$res; //@line 927 "textio.c"
        var $475=$474+4; //@line 927 "textio.c"
        var $476=HEAP[$475]; //@line 927 "textio.c"
        var $477=$476+24; //@line 927 "textio.c"
        var $478=HEAP[$477]; //@line 927 "textio.c"
        var $479=$res; //@line 927 "textio.c"
        FUNCTION_TABLE[$478]($479); //@line 927 "textio.c"
        __label__ = 79; break; //@line 927 "textio.c"
      case 79: // $bb88
        var $480=$r; //@line 928 "textio.c"
        var $481=($480)==-1; //@line 928 "textio.c"
        if ($481) { __label__ = 133; break; } else { __label__ = 80; break; } //@line 928 "textio.c"
      case 80: // $bb89
        var $482=$r; //@line 930 "textio.c"
        var $483=($482)==1; //@line 930 "textio.c"
        if ($483) { __label__ = 81; break; } else { __label__ = 88; break; } //@line 930 "textio.c"
      case 81: // $bb90
        var $484=HEAP[$errors]; //@line 931 "textio.c"
        var $485=HEAP[$encoding]; //@line 931 "textio.c"
        var $486=_PyCodec_IncrementalDecoder($485, $484); //@line 931 "textio.c"
        var $487=$self_addr; //@line 931 "textio.c"
        var $488=$487+32; //@line 931 "textio.c"
        HEAP[$488]=$486; //@line 931 "textio.c"
        var $489=$self_addr; //@line 933 "textio.c"
        var $490=$489+32; //@line 933 "textio.c"
        var $491=HEAP[$490]; //@line 933 "textio.c"
        var $492=($491)==0; //@line 933 "textio.c"
        if ($492) { __label__ = 133; break; } else { __label__ = 82; break; } //@line 933 "textio.c"
      case 82: // $bb91
        var $493=$self_addr; //@line 936 "textio.c"
        var $494=$493+49; //@line 936 "textio.c"
        var $495=HEAP[$494]; //@line 936 "textio.c"
        var $496=($495)!=0; //@line 936 "textio.c"
        if ($496) { __label__ = 83; break; } else { __label__ = 88; break; } //@line 936 "textio.c"
      case 83: // $bb92
        var $497=$self_addr; //@line 939 "textio.c"
        var $498=$497+50; //@line 939 "textio.c"
        var $499=HEAP[$498]; //@line 939 "textio.c"
        var $500=($499); //@line 939 "textio.c"
        var $501=$self_addr; //@line 939 "textio.c"
        var $502=$501+32; //@line 939 "textio.c"
        var $503=HEAP[$502]; //@line 939 "textio.c"
        var $504=__PyObject_CallFunction_SizeT(_PyIncrementalNewlineDecoder_Type, __str51427, allocate([$503,0,0,0,$500,0,0,0], ["%struct.PyObject*",0,0,0,"i32",0,0,0], ALLOC_STACK)); //@line 939 "textio.c"
        $incrementalDecoder=$504; //@line 939 "textio.c"
        var $505=$incrementalDecoder; //@line 940 "textio.c"
        var $506=($505)==0; //@line 940 "textio.c"
        if ($506) { __label__ = 133; break; } else { __label__ = 84; break; } //@line 940 "textio.c"
      case 84: // $bb93
        var $507=$self_addr; //@line 942 "textio.c"
        var $508=$507+32; //@line 942 "textio.c"
        var $509=HEAP[$508]; //@line 942 "textio.c"
        var $510=($509)!=0; //@line 942 "textio.c"
        if ($510) { __label__ = 85; break; } else { __label__ = 87; break; } //@line 942 "textio.c"
      case 85: // $bb94
        var $511=$self_addr; //@line 942 "textio.c"
        var $512=$511+32; //@line 942 "textio.c"
        var $513=HEAP[$512]; //@line 942 "textio.c"
        $_py_tmp95=$513; //@line 942 "textio.c"
        var $514=$self_addr; //@line 942 "textio.c"
        var $515=$514+32; //@line 942 "textio.c"
        HEAP[$515]=0; //@line 942 "textio.c"
        var $516=$_py_tmp95; //@line 942 "textio.c"
        var $517=$516; //@line 942 "textio.c"
        var $518=HEAP[$517]; //@line 942 "textio.c"
        var $519=($518) - 1; //@line 942 "textio.c"
        var $520=$_py_tmp95; //@line 942 "textio.c"
        var $521=$520; //@line 942 "textio.c"
        HEAP[$521]=$519; //@line 942 "textio.c"
        var $522=$_py_tmp95; //@line 942 "textio.c"
        var $523=$522; //@line 942 "textio.c"
        var $524=HEAP[$523]; //@line 942 "textio.c"
        var $525=($524)==0; //@line 942 "textio.c"
        if ($525) { __label__ = 86; break; } else { __label__ = 87; break; } //@line 942 "textio.c"
      case 86: // $bb96
        var $526=$_py_tmp95; //@line 942 "textio.c"
        var $527=$526+4; //@line 942 "textio.c"
        var $528=HEAP[$527]; //@line 942 "textio.c"
        var $529=$528+24; //@line 942 "textio.c"
        var $530=HEAP[$529]; //@line 942 "textio.c"
        var $531=$_py_tmp95; //@line 942 "textio.c"
        FUNCTION_TABLE[$530]($531); //@line 942 "textio.c"
        __label__ = 87; break; //@line 942 "textio.c"
      case 87: // $bb97
        var $532=$self_addr; //@line 943 "textio.c"
        var $533=$532+32; //@line 943 "textio.c"
        var $534=$incrementalDecoder; //@line 943 "textio.c"
        HEAP[$533]=$534; //@line 943 "textio.c"
        __label__ = 88; break; //@line 943 "textio.c"
      case 88: // $bb98
        var $535=HEAP[$buffer]; //@line 948 "textio.c"
        var $536=__PyObject_CallMethod_SizeT($535, __str52428, 0, allocate(1, "i32", ALLOC_STACK)); //@line 948 "textio.c"
        $res=$536; //@line 948 "textio.c"
        var $537=($536)==0; //@line 949 "textio.c"
        if ($537) { __label__ = 133; break; } else { __label__ = 89; break; } //@line 949 "textio.c"
      case 89: // $bb99
        var $538=$res; //@line 951 "textio.c"
        var $539=_PyObject_IsTrue($538); //@line 951 "textio.c"
        $r=$539; //@line 951 "textio.c"
        var $540=$res; //@line 952 "textio.c"
        var $541=$540; //@line 952 "textio.c"
        var $542=HEAP[$541]; //@line 952 "textio.c"
        var $543=($542) - 1; //@line 952 "textio.c"
        var $544=$res; //@line 952 "textio.c"
        var $545=$544; //@line 952 "textio.c"
        HEAP[$545]=$543; //@line 952 "textio.c"
        var $546=$res; //@line 952 "textio.c"
        var $547=$546; //@line 952 "textio.c"
        var $548=HEAP[$547]; //@line 952 "textio.c"
        var $549=($548)==0; //@line 952 "textio.c"
        if ($549) { __label__ = 90; break; } else { __label__ = 91; break; } //@line 952 "textio.c"
      case 90: // $bb100
        var $550=$res; //@line 952 "textio.c"
        var $551=$550+4; //@line 952 "textio.c"
        var $552=HEAP[$551]; //@line 952 "textio.c"
        var $553=$552+24; //@line 952 "textio.c"
        var $554=HEAP[$553]; //@line 952 "textio.c"
        var $555=$res; //@line 952 "textio.c"
        FUNCTION_TABLE[$554]($555); //@line 952 "textio.c"
        __label__ = 91; break; //@line 952 "textio.c"
      case 91: // $bb101
        var $556=$r; //@line 953 "textio.c"
        var $557=($556)==-1; //@line 953 "textio.c"
        if ($557) { __label__ = 133; break; } else { __label__ = 92; break; } //@line 953 "textio.c"
      case 92: // $bb102
        var $558=$r; //@line 955 "textio.c"
        var $559=($558)==1; //@line 955 "textio.c"
        if ($559) { __label__ = 93; break; } else { __label__ = 109; break; } //@line 955 "textio.c"
      case 93: // $bb103
        var $560=HEAP[$errors]; //@line 957 "textio.c"
        var $561=HEAP[$encoding]; //@line 957 "textio.c"
        var $562=_PyCodec_IncrementalEncoder($561, $560); //@line 957 "textio.c"
        var $563=$self_addr; //@line 957 "textio.c"
        var $564=$563+28; //@line 957 "textio.c"
        HEAP[$564]=$562; //@line 957 "textio.c"
        var $565=$self_addr; //@line 959 "textio.c"
        var $566=$565+28; //@line 959 "textio.c"
        var $567=HEAP[$566]; //@line 959 "textio.c"
        var $568=($567)==0; //@line 959 "textio.c"
        if ($568) { __label__ = 133; break; } else { __label__ = 94; break; } //@line 959 "textio.c"
      case 94: // $bb104
        var $569=HEAP[$encoding]; //@line 962 "textio.c"
        var $570=__PyCodec_Lookup($569); //@line 962 "textio.c"
        $ci=$570; //@line 962 "textio.c"
        var $571=$ci; //@line 963 "textio.c"
        var $572=($571)==0; //@line 963 "textio.c"
        if ($572) { __label__ = 133; break; } else { __label__ = 95; break; } //@line 963 "textio.c"
      case 95: // $bb105
        var $573=$ci; //@line 965 "textio.c"
        var $574=_PyObject_GetAttrString($573, __str53429); //@line 965 "textio.c"
        $res=$574; //@line 965 "textio.c"
        var $575=$ci; //@line 966 "textio.c"
        var $576=$575; //@line 966 "textio.c"
        var $577=HEAP[$576]; //@line 966 "textio.c"
        var $578=($577) - 1; //@line 966 "textio.c"
        var $579=$ci; //@line 966 "textio.c"
        var $580=$579; //@line 966 "textio.c"
        HEAP[$580]=$578; //@line 966 "textio.c"
        var $581=$ci; //@line 966 "textio.c"
        var $582=$581; //@line 966 "textio.c"
        var $583=HEAP[$582]; //@line 966 "textio.c"
        var $584=($583)==0; //@line 966 "textio.c"
        if ($584) { __label__ = 96; break; } else { __label__ = 97; break; } //@line 966 "textio.c"
      case 96: // $bb106
        var $585=$ci; //@line 966 "textio.c"
        var $586=$585+4; //@line 966 "textio.c"
        var $587=HEAP[$586]; //@line 966 "textio.c"
        var $588=$587+24; //@line 966 "textio.c"
        var $589=HEAP[$588]; //@line 966 "textio.c"
        var $590=$ci; //@line 966 "textio.c"
        FUNCTION_TABLE[$589]($590); //@line 966 "textio.c"
        __label__ = 97; break; //@line 966 "textio.c"
      case 97: // $bb107
        var $591=$res; //@line 967 "textio.c"
        var $592=($591)==0; //@line 967 "textio.c"
        if ($592) { __label__ = 98; break; } else { __label__ = 100; break; } //@line 967 "textio.c"
      case 98: // $bb108
        var $593=HEAP[_PyExc_AttributeError]; //@line 968 "textio.c"
        var $594=_PyErr_ExceptionMatches($593); //@line 968 "textio.c"
        var $595=($594)!=0; //@line 968 "textio.c"
        if ($595) { __label__ = 99; break; } else { __label__ = 133; break; } //@line 968 "textio.c"
      case 99: // $bb109
        _PyErr_Clear(); //@line 969 "textio.c"
        __label__ = 106; break; //@line 969 "textio.c"
      case 100: // $bb110
        var $596=$res; //@line 973 "textio.c"
        var $597=$596+4; //@line 973 "textio.c"
        var $598=HEAP[$597]; //@line 973 "textio.c"
        var $599=$598+84; //@line 973 "textio.c"
        var $600=HEAP[$599]; //@line 973 "textio.c"
        var $601=($600) & 134217728; //@line 973 "textio.c"
        var $602=($601)!=0; //@line 973 "textio.c"
        if ($602) { __label__ = 101; break; } else { __label__ = 106; break; } //@line 973 "textio.c"
      case 101: // $bb111
        $e=_encodefuncs; //@line 974 "textio.c"
        __label__ = 105; break; //@line 974 "textio.c"
      case 102: // $bb112
        var $603=$e; //@line 976 "textio.c"
        var $604=$603; //@line 976 "textio.c"
        var $605=HEAP[$604]; //@line 976 "textio.c"
        var $606=$res; //@line 976 "textio.c"
        var $607=$606; //@line 976 "textio.c"
        var $608=$607+20; //@line 976 "textio.c"
        var $609=$608; //@line 976 "textio.c"
        var $610=_strcmp($609, $605); //@line 976 "textio.c"
        var $611=($610)==0; //@line 976 "textio.c"
        var $612=$e; //@line 977 "textio.c"
        if ($611) { __label__ = 103; break; } else { __label__ = 104; break; } //@line 976 "textio.c"
      case 103: // $bb113
        var $613=$612+4; //@line 977 "textio.c"
        var $614=HEAP[$613]; //@line 977 "textio.c"
        var $615=$self_addr; //@line 977 "textio.c"
        var $616=$615+56; //@line 977 "textio.c"
        HEAP[$616]=$614; //@line 977 "textio.c"
        __label__ = 106; break; //@line 977 "textio.c"
      case 104: // $bb114
        var $617=$612+8; //@line 980 "textio.c"
        $e=$617; //@line 980 "textio.c"
        __label__ = 105; break; //@line 980 "textio.c"
      case 105: // $bb115
        var $618=$e; //@line 975 "textio.c"
        var $619=$618; //@line 975 "textio.c"
        var $620=HEAP[$619]; //@line 975 "textio.c"
        var $621=($620)!=0; //@line 975 "textio.c"
        if ($621) { __label__ = 102; break; } else { __label__ = 106; break; } //@line 975 "textio.c"
      case 106: // $bb116
        var $622=$res; //@line 983 "textio.c"
        var $623=($622)!=0; //@line 983 "textio.c"
        if ($623) { __label__ = 107; break; } else { __label__ = 109; break; } //@line 983 "textio.c"
      case 107: // $bb117
        var $624=$res; //@line 983 "textio.c"
        var $625=$624; //@line 983 "textio.c"
        var $626=HEAP[$625]; //@line 983 "textio.c"
        var $627=($626) - 1; //@line 983 "textio.c"
        var $628=$res; //@line 983 "textio.c"
        var $629=$628; //@line 983 "textio.c"
        HEAP[$629]=$627; //@line 983 "textio.c"
        var $630=$res; //@line 983 "textio.c"
        var $631=$630; //@line 983 "textio.c"
        var $632=HEAP[$631]; //@line 983 "textio.c"
        var $633=($632)==0; //@line 983 "textio.c"
        if ($633) { __label__ = 108; break; } else { __label__ = 109; break; } //@line 983 "textio.c"
      case 108: // $bb118
        var $634=$res; //@line 983 "textio.c"
        var $635=$634+4; //@line 983 "textio.c"
        var $636=HEAP[$635]; //@line 983 "textio.c"
        var $637=$636+24; //@line 983 "textio.c"
        var $638=HEAP[$637]; //@line 983 "textio.c"
        var $639=$res; //@line 983 "textio.c"
        FUNCTION_TABLE[$638]($639); //@line 983 "textio.c"
        __label__ = 109; break; //@line 983 "textio.c"
      case 109: // $bb119
        var $640=HEAP[$buffer]; //@line 986 "textio.c"
        var $641=$self_addr; //@line 986 "textio.c"
        var $642=$641+20; //@line 986 "textio.c"
        HEAP[$642]=$640; //@line 986 "textio.c"
        var $643=HEAP[$buffer]; //@line 987 "textio.c"
        var $644=$643; //@line 987 "textio.c"
        var $645=HEAP[$644]; //@line 987 "textio.c"
        var $646=($645) + 1; //@line 987 "textio.c"
        var $647=$643; //@line 987 "textio.c"
        HEAP[$647]=$646; //@line 987 "textio.c"
        var $648=HEAP[$buffer]; //@line 989 "textio.c"
        var $649=$648+4; //@line 989 "textio.c"
        var $650=HEAP[$649]; //@line 989 "textio.c"
        var $651=($650)==(_PyBufferedReader_Type); //@line 989 "textio.c"
        if ($651) { __label__ = 112; break; } else { __label__ = 110; break; } //@line 989 "textio.c"
      case 110: // $bb120
        var $652=HEAP[$buffer]; //@line 989 "textio.c"
        var $653=$652+4; //@line 989 "textio.c"
        var $654=HEAP[$653]; //@line 989 "textio.c"
        var $655=($654)==(_PyBufferedWriter_Type); //@line 989 "textio.c"
        if ($655) { __label__ = 112; break; } else { __label__ = 111; break; } //@line 989 "textio.c"
      case 111: // $bb121
        var $656=HEAP[$buffer]; //@line 989 "textio.c"
        var $657=$656+4; //@line 989 "textio.c"
        var $658=HEAP[$657]; //@line 989 "textio.c"
        var $659=($658)==(_PyBufferedRandom_Type); //@line 989 "textio.c"
        if ($659) { __label__ = 112; break; } else { __label__ = 119; break; } //@line 989 "textio.c"
      case 112: // $bb122
        var $660=HEAP[$buffer]; //@line 992 "textio.c"
        var $661=_PyObject_GetAttrString($660, __str35); //@line 992 "textio.c"
        $raw=$661; //@line 992 "textio.c"
        var $662=($661)==0; //@line 994 "textio.c"
        if ($662) { __label__ = 113; break; } else { __label__ = 115; break; } //@line 994 "textio.c"
      case 113: // $bb123
        var $663=HEAP[_PyExc_AttributeError]; //@line 995 "textio.c"
        var $664=_PyErr_ExceptionMatches($663); //@line 995 "textio.c"
        var $665=($664)!=0; //@line 995 "textio.c"
        if ($665) { __label__ = 114; break; } else { __label__ = 133; break; } //@line 995 "textio.c"
      case 114: // $bb124
        _PyErr_Clear(); //@line 996 "textio.c"
        __label__ = 119; break; //@line 996 "textio.c"
      case 115: // $bb125
        var $666=$raw; //@line 1000 "textio.c"
        var $667=$666+4; //@line 1000 "textio.c"
        var $668=HEAP[$667]; //@line 1000 "textio.c"
        var $669=($668)==(_PyFileIO_Type); //@line 1000 "textio.c"
        if ($669) { __label__ = 116; break; } else { __label__ = 117; break; } //@line 1000 "textio.c"
      case 116: // $bb126
        var $670=$self_addr; //@line 1001 "textio.c"
        var $671=$670+84; //@line 1001 "textio.c"
        var $672=$raw; //@line 1001 "textio.c"
        HEAP[$671]=$672; //@line 1001 "textio.c"
        __label__ = 119; break; //@line 1001 "textio.c"
      case 117: // $bb127
        var $673=$raw; //@line 1003 "textio.c"
        var $674=$673; //@line 1003 "textio.c"
        var $675=HEAP[$674]; //@line 1003 "textio.c"
        var $676=($675) - 1; //@line 1003 "textio.c"
        var $677=$raw; //@line 1003 "textio.c"
        var $678=$677; //@line 1003 "textio.c"
        HEAP[$678]=$676; //@line 1003 "textio.c"
        var $679=$raw; //@line 1003 "textio.c"
        var $680=$679; //@line 1003 "textio.c"
        var $681=HEAP[$680]; //@line 1003 "textio.c"
        var $682=($681)==0; //@line 1003 "textio.c"
        if ($682) { __label__ = 118; break; } else { __label__ = 119; break; } //@line 1003 "textio.c"
      case 118: // $bb128
        var $683=$raw; //@line 1003 "textio.c"
        var $684=$683+4; //@line 1003 "textio.c"
        var $685=HEAP[$684]; //@line 1003 "textio.c"
        var $686=$685+24; //@line 1003 "textio.c"
        var $687=HEAP[$686]; //@line 1003 "textio.c"
        var $688=$raw; //@line 1003 "textio.c"
        FUNCTION_TABLE[$687]($688); //@line 1003 "textio.c"
        __label__ = 119; break; //@line 1003 "textio.c"
      case 119: // $bb129
        var $689=HEAP[$buffer]; //@line 1006 "textio.c"
        var $690=__PyObject_CallMethod_SizeT($689, __str55431, 0, allocate(1, "i32", ALLOC_STACK)); //@line 1006 "textio.c"
        $res=$690; //@line 1006 "textio.c"
        var $691=($690)==0; //@line 1007 "textio.c"
        if ($691) { __label__ = 133; break; } else { __label__ = 120; break; } //@line 1007 "textio.c"
      case 120: // $bb130
        var $692=$res; //@line 1009 "textio.c"
        var $693=_PyObject_IsTrue($692); //@line 1009 "textio.c"
        var $694=((($693)) & 255); //@line 1009 "textio.c"
        var $695=$self_addr; //@line 1009 "textio.c"
        var $696=$695+53; //@line 1009 "textio.c"
        HEAP[$696]=$694; //@line 1009 "textio.c"
        var $697=$self_addr; //@line 1009 "textio.c"
        var $698=$697+53; //@line 1009 "textio.c"
        var $699=HEAP[$698]; //@line 1009 "textio.c"
        var $700=$self_addr; //@line 1009 "textio.c"
        var $701=$700+52; //@line 1009 "textio.c"
        HEAP[$701]=$699; //@line 1009 "textio.c"
        var $702=$res; //@line 1010 "textio.c"
        var $703=$702; //@line 1010 "textio.c"
        var $704=HEAP[$703]; //@line 1010 "textio.c"
        var $705=($704) - 1; //@line 1010 "textio.c"
        var $706=$res; //@line 1010 "textio.c"
        var $707=$706; //@line 1010 "textio.c"
        HEAP[$707]=$705; //@line 1010 "textio.c"
        var $708=$res; //@line 1010 "textio.c"
        var $709=$708; //@line 1010 "textio.c"
        var $710=HEAP[$709]; //@line 1010 "textio.c"
        var $711=($710)==0; //@line 1010 "textio.c"
        if ($711) { __label__ = 121; break; } else { __label__ = 122; break; } //@line 1010 "textio.c"
      case 121: // $bb131
        var $712=$res; //@line 1010 "textio.c"
        var $713=$712+4; //@line 1010 "textio.c"
        var $714=HEAP[$713]; //@line 1010 "textio.c"
        var $715=$714+24; //@line 1010 "textio.c"
        var $716=HEAP[$715]; //@line 1010 "textio.c"
        var $717=$res; //@line 1010 "textio.c"
        FUNCTION_TABLE[$716]($717); //@line 1010 "textio.c"
        __label__ = 122; break; //@line 1010 "textio.c"
      case 122: // $bb132
        var $718=$self_addr; //@line 1012 "textio.c"
        var $719=$718+60; //@line 1012 "textio.c"
        HEAP[$719]=0; //@line 1012 "textio.c"
        var $720=$self_addr; //@line 1013 "textio.c"
        var $721=$720+52; //@line 1013 "textio.c"
        var $722=HEAP[$721]; //@line 1013 "textio.c"
        var $723=($722)!=0; //@line 1013 "textio.c"
        if ($723) { __label__ = 123; break; } else { __label__ = 132; break; } //@line 1013 "textio.c"
      case 123: // $bb133
        var $724=$self_addr; //@line 1013 "textio.c"
        var $725=$724+28; //@line 1013 "textio.c"
        var $726=HEAP[$725]; //@line 1013 "textio.c"
        var $727=($726)!=0; //@line 1013 "textio.c"
        if ($727) { __label__ = 124; break; } else { __label__ = 132; break; } //@line 1013 "textio.c"
      case 124: // $bb134
        var $728=$self_addr; //@line 1017 "textio.c"
        var $729=$728+60; //@line 1017 "textio.c"
        HEAP[$729]=1; //@line 1017 "textio.c"
        var $730=HEAP[__PyIO_str_tell]; //@line 1019 "textio.c"
        var $731=HEAP[$buffer]; //@line 1019 "textio.c"
        var $732=_PyObject_CallMethodObjArgs($731, $730, allocate(4, "i8*", ALLOC_STACK)); //@line 1019 "textio.c"
        $cookieObj=$732; //@line 1019 "textio.c"
        var $733=$cookieObj; //@line 1020 "textio.c"
        var $734=($733)==0; //@line 1020 "textio.c"
        if ($734) { __label__ = 133; break; } else { __label__ = 125; break; } //@line 1020 "textio.c"
      case 125: // $bb135
        var $735=HEAP[__PyIO_zero]; //@line 1023 "textio.c"
        var $736=$cookieObj; //@line 1023 "textio.c"
        var $737=_PyObject_RichCompareBool($736, $735, 2); //@line 1023 "textio.c"
        $cmp=$737; //@line 1023 "textio.c"
        var $738=$cookieObj; //@line 1024 "textio.c"
        var $739=$738; //@line 1024 "textio.c"
        var $740=HEAP[$739]; //@line 1024 "textio.c"
        var $741=($740) - 1; //@line 1024 "textio.c"
        var $742=$cookieObj; //@line 1024 "textio.c"
        var $743=$742; //@line 1024 "textio.c"
        HEAP[$743]=$741; //@line 1024 "textio.c"
        var $744=$cookieObj; //@line 1024 "textio.c"
        var $745=$744; //@line 1024 "textio.c"
        var $746=HEAP[$745]; //@line 1024 "textio.c"
        var $747=($746)==0; //@line 1024 "textio.c"
        if ($747) { __label__ = 126; break; } else { __label__ = 127; break; } //@line 1024 "textio.c"
      case 126: // $bb136
        var $748=$cookieObj; //@line 1024 "textio.c"
        var $749=$748+4; //@line 1024 "textio.c"
        var $750=HEAP[$749]; //@line 1024 "textio.c"
        var $751=$750+24; //@line 1024 "textio.c"
        var $752=HEAP[$751]; //@line 1024 "textio.c"
        var $753=$cookieObj; //@line 1024 "textio.c"
        FUNCTION_TABLE[$752]($753); //@line 1024 "textio.c"
        __label__ = 127; break; //@line 1024 "textio.c"
      case 127: // $bb137
        var $754=$cmp; //@line 1025 "textio.c"
        var $755=($754) < 0; //@line 1025 "textio.c"
        if ($755) { __label__ = 133; break; } else { __label__ = 128; break; } //@line 1025 "textio.c"
      case 128: // $bb138
        var $756=$cmp; //@line 1029 "textio.c"
        var $757=($756)==0; //@line 1029 "textio.c"
        if ($757) { __label__ = 129; break; } else { __label__ = 132; break; } //@line 1029 "textio.c"
      case 129: // $bb139
        var $758=$self_addr; //@line 1030 "textio.c"
        var $759=$758+60; //@line 1030 "textio.c"
        HEAP[$759]=0; //@line 1030 "textio.c"
        var $760=HEAP[__PyIO_zero]; //@line 1031 "textio.c"
        var $761=HEAP[__PyIO_str_setstate]; //@line 1031 "textio.c"
        var $762=$self_addr; //@line 1031 "textio.c"
        var $763=$762+28; //@line 1031 "textio.c"
        var $764=HEAP[$763]; //@line 1031 "textio.c"
        var $765=_PyObject_CallMethodObjArgs($764, $761, allocate([$760,0,0,0,0,0,0,0], ["%struct.PyObject*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 1031 "textio.c"
        $res=$765; //@line 1031 "textio.c"
        var $766=$res; //@line 1033 "textio.c"
        var $767=($766)==0; //@line 1033 "textio.c"
        if ($767) { __label__ = 133; break; } else { __label__ = 130; break; } //@line 1033 "textio.c"
      case 130: // $bb140
        var $768=$res; //@line 1035 "textio.c"
        var $769=$768; //@line 1035 "textio.c"
        var $770=HEAP[$769]; //@line 1035 "textio.c"
        var $771=($770) - 1; //@line 1035 "textio.c"
        var $772=$res; //@line 1035 "textio.c"
        var $773=$772; //@line 1035 "textio.c"
        HEAP[$773]=$771; //@line 1035 "textio.c"
        var $774=$res; //@line 1035 "textio.c"
        var $775=$774; //@line 1035 "textio.c"
        var $776=HEAP[$775]; //@line 1035 "textio.c"
        var $777=($776)==0; //@line 1035 "textio.c"
        if ($777) { __label__ = 131; break; } else { __label__ = 132; break; } //@line 1035 "textio.c"
      case 131: // $bb141
        var $778=$res; //@line 1035 "textio.c"
        var $779=$778+4; //@line 1035 "textio.c"
        var $780=HEAP[$779]; //@line 1035 "textio.c"
        var $781=$780+24; //@line 1035 "textio.c"
        var $782=HEAP[$781]; //@line 1035 "textio.c"
        var $783=$res; //@line 1035 "textio.c"
        FUNCTION_TABLE[$782]($783); //@line 1035 "textio.c"
        __label__ = 132; break; //@line 1035 "textio.c"
      case 132: // $bb142
        var $784=$self_addr; //@line 1039 "textio.c"
        var $785=$784+8; //@line 1039 "textio.c"
        HEAP[$785]=1; //@line 1039 "textio.c"
        $0=0; //@line 1040 "textio.c"
        __label__ = 134; break; //@line 1040 "textio.c"
      case 133: // $error
        $0=-1; //@line 1043 "textio.c"
        __label__ = 134; break; //@line 1043 "textio.c"
      case 134: // $bb143
        var $786=$0; //@line 827 "textio.c"
        $retval=$786; //@line 827 "textio.c"
        var $retval144=$retval; //@line 827 "textio.c"
        STACKTOP = __stackBase__;
        return $retval144; //@line 827 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __textiowrapper_clear($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $_py_tmp;
        var $_py_tmp7;
        var $_py_tmp11;
        var $_py_tmp15;
        var $_py_tmp19;
        var $_py_tmp23;
        var $_py_tmp27;
        var $_py_tmp31;
        var $_py_tmp35;
        var $_py_tmp39;
        $self_addr=$self;
        var $1=$self_addr; //@line 1049 "textio.c"
        var $2=$1+8; //@line 1049 "textio.c"
        var $3=HEAP[$2]; //@line 1049 "textio.c"
        var $4=($3)!=0; //@line 1049 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 1049 "textio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 1049 "textio.c"
        var $6=$5; //@line 1049 "textio.c"
        var $7=__PyIOBase_finalize($6); //@line 1049 "textio.c"
        var $8=($7) < 0; //@line 1049 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1049 "textio.c"
      case 2: // $bb1
        $0=-1; //@line 1050 "textio.c"
        __label__ = 34; break; //@line 1050 "textio.c"
      case 3: // $bb2
        var $9=$self_addr; //@line 1051 "textio.c"
        var $10=$9+8; //@line 1051 "textio.c"
        HEAP[$10]=0; //@line 1051 "textio.c"
        var $11=$self_addr; //@line 1052 "textio.c"
        var $12=$11+20; //@line 1052 "textio.c"
        var $13=HEAP[$12]; //@line 1052 "textio.c"
        var $14=($13)!=0; //@line 1052 "textio.c"
        if ($14) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 1052 "textio.c"
      case 4: // $bb3
        var $15=$self_addr; //@line 1052 "textio.c"
        var $16=$15+20; //@line 1052 "textio.c"
        var $17=HEAP[$16]; //@line 1052 "textio.c"
        $_py_tmp=$17; //@line 1052 "textio.c"
        var $18=$self_addr; //@line 1052 "textio.c"
        var $19=$18+20; //@line 1052 "textio.c"
        HEAP[$19]=0; //@line 1052 "textio.c"
        var $20=$_py_tmp; //@line 1052 "textio.c"
        var $21=$20; //@line 1052 "textio.c"
        var $22=HEAP[$21]; //@line 1052 "textio.c"
        var $23=($22) - 1; //@line 1052 "textio.c"
        var $24=$_py_tmp; //@line 1052 "textio.c"
        var $25=$24; //@line 1052 "textio.c"
        HEAP[$25]=$23; //@line 1052 "textio.c"
        var $26=$_py_tmp; //@line 1052 "textio.c"
        var $27=$26; //@line 1052 "textio.c"
        var $28=HEAP[$27]; //@line 1052 "textio.c"
        var $29=($28)==0; //@line 1052 "textio.c"
        if ($29) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1052 "textio.c"
      case 5: // $bb4
        var $30=$_py_tmp; //@line 1052 "textio.c"
        var $31=$30+4; //@line 1052 "textio.c"
        var $32=HEAP[$31]; //@line 1052 "textio.c"
        var $33=$32+24; //@line 1052 "textio.c"
        var $34=HEAP[$33]; //@line 1052 "textio.c"
        var $35=$_py_tmp; //@line 1052 "textio.c"
        FUNCTION_TABLE[$34]($35); //@line 1052 "textio.c"
        __label__ = 6; break; //@line 1052 "textio.c"
      case 6: // $bb5
        var $36=$self_addr; //@line 1053 "textio.c"
        var $37=$36+24; //@line 1053 "textio.c"
        var $38=HEAP[$37]; //@line 1053 "textio.c"
        var $39=($38)!=0; //@line 1053 "textio.c"
        if ($39) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 1053 "textio.c"
      case 7: // $bb6
        var $40=$self_addr; //@line 1053 "textio.c"
        var $41=$40+24; //@line 1053 "textio.c"
        var $42=HEAP[$41]; //@line 1053 "textio.c"
        $_py_tmp7=$42; //@line 1053 "textio.c"
        var $43=$self_addr; //@line 1053 "textio.c"
        var $44=$43+24; //@line 1053 "textio.c"
        HEAP[$44]=0; //@line 1053 "textio.c"
        var $45=$_py_tmp7; //@line 1053 "textio.c"
        var $46=$45; //@line 1053 "textio.c"
        var $47=HEAP[$46]; //@line 1053 "textio.c"
        var $48=($47) - 1; //@line 1053 "textio.c"
        var $49=$_py_tmp7; //@line 1053 "textio.c"
        var $50=$49; //@line 1053 "textio.c"
        HEAP[$50]=$48; //@line 1053 "textio.c"
        var $51=$_py_tmp7; //@line 1053 "textio.c"
        var $52=$51; //@line 1053 "textio.c"
        var $53=HEAP[$52]; //@line 1053 "textio.c"
        var $54=($53)==0; //@line 1053 "textio.c"
        if ($54) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1053 "textio.c"
      case 8: // $bb8
        var $55=$_py_tmp7; //@line 1053 "textio.c"
        var $56=$55+4; //@line 1053 "textio.c"
        var $57=HEAP[$56]; //@line 1053 "textio.c"
        var $58=$57+24; //@line 1053 "textio.c"
        var $59=HEAP[$58]; //@line 1053 "textio.c"
        var $60=$_py_tmp7; //@line 1053 "textio.c"
        FUNCTION_TABLE[$59]($60); //@line 1053 "textio.c"
        __label__ = 9; break; //@line 1053 "textio.c"
      case 9: // $bb9
        var $61=$self_addr; //@line 1054 "textio.c"
        var $62=$61+28; //@line 1054 "textio.c"
        var $63=HEAP[$62]; //@line 1054 "textio.c"
        var $64=($63)!=0; //@line 1054 "textio.c"
        if ($64) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 1054 "textio.c"
      case 10: // $bb10
        var $65=$self_addr; //@line 1054 "textio.c"
        var $66=$65+28; //@line 1054 "textio.c"
        var $67=HEAP[$66]; //@line 1054 "textio.c"
        $_py_tmp11=$67; //@line 1054 "textio.c"
        var $68=$self_addr; //@line 1054 "textio.c"
        var $69=$68+28; //@line 1054 "textio.c"
        HEAP[$69]=0; //@line 1054 "textio.c"
        var $70=$_py_tmp11; //@line 1054 "textio.c"
        var $71=$70; //@line 1054 "textio.c"
        var $72=HEAP[$71]; //@line 1054 "textio.c"
        var $73=($72) - 1; //@line 1054 "textio.c"
        var $74=$_py_tmp11; //@line 1054 "textio.c"
        var $75=$74; //@line 1054 "textio.c"
        HEAP[$75]=$73; //@line 1054 "textio.c"
        var $76=$_py_tmp11; //@line 1054 "textio.c"
        var $77=$76; //@line 1054 "textio.c"
        var $78=HEAP[$77]; //@line 1054 "textio.c"
        var $79=($78)==0; //@line 1054 "textio.c"
        if ($79) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1054 "textio.c"
      case 11: // $bb12
        var $80=$_py_tmp11; //@line 1054 "textio.c"
        var $81=$80+4; //@line 1054 "textio.c"
        var $82=HEAP[$81]; //@line 1054 "textio.c"
        var $83=$82+24; //@line 1054 "textio.c"
        var $84=HEAP[$83]; //@line 1054 "textio.c"
        var $85=$_py_tmp11; //@line 1054 "textio.c"
        FUNCTION_TABLE[$84]($85); //@line 1054 "textio.c"
        __label__ = 12; break; //@line 1054 "textio.c"
      case 12: // $bb13
        var $86=$self_addr; //@line 1055 "textio.c"
        var $87=$86+32; //@line 1055 "textio.c"
        var $88=HEAP[$87]; //@line 1055 "textio.c"
        var $89=($88)!=0; //@line 1055 "textio.c"
        if ($89) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 1055 "textio.c"
      case 13: // $bb14
        var $90=$self_addr; //@line 1055 "textio.c"
        var $91=$90+32; //@line 1055 "textio.c"
        var $92=HEAP[$91]; //@line 1055 "textio.c"
        $_py_tmp15=$92; //@line 1055 "textio.c"
        var $93=$self_addr; //@line 1055 "textio.c"
        var $94=$93+32; //@line 1055 "textio.c"
        HEAP[$94]=0; //@line 1055 "textio.c"
        var $95=$_py_tmp15; //@line 1055 "textio.c"
        var $96=$95; //@line 1055 "textio.c"
        var $97=HEAP[$96]; //@line 1055 "textio.c"
        var $98=($97) - 1; //@line 1055 "textio.c"
        var $99=$_py_tmp15; //@line 1055 "textio.c"
        var $100=$99; //@line 1055 "textio.c"
        HEAP[$100]=$98; //@line 1055 "textio.c"
        var $101=$_py_tmp15; //@line 1055 "textio.c"
        var $102=$101; //@line 1055 "textio.c"
        var $103=HEAP[$102]; //@line 1055 "textio.c"
        var $104=($103)==0; //@line 1055 "textio.c"
        if ($104) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1055 "textio.c"
      case 14: // $bb16
        var $105=$_py_tmp15; //@line 1055 "textio.c"
        var $106=$105+4; //@line 1055 "textio.c"
        var $107=HEAP[$106]; //@line 1055 "textio.c"
        var $108=$107+24; //@line 1055 "textio.c"
        var $109=HEAP[$108]; //@line 1055 "textio.c"
        var $110=$_py_tmp15; //@line 1055 "textio.c"
        FUNCTION_TABLE[$109]($110); //@line 1055 "textio.c"
        __label__ = 15; break; //@line 1055 "textio.c"
      case 15: // $bb17
        var $111=$self_addr; //@line 1056 "textio.c"
        var $112=$111+36; //@line 1056 "textio.c"
        var $113=HEAP[$112]; //@line 1056 "textio.c"
        var $114=($113)!=0; //@line 1056 "textio.c"
        if ($114) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 1056 "textio.c"
      case 16: // $bb18
        var $115=$self_addr; //@line 1056 "textio.c"
        var $116=$115+36; //@line 1056 "textio.c"
        var $117=HEAP[$116]; //@line 1056 "textio.c"
        $_py_tmp19=$117; //@line 1056 "textio.c"
        var $118=$self_addr; //@line 1056 "textio.c"
        var $119=$118+36; //@line 1056 "textio.c"
        HEAP[$119]=0; //@line 1056 "textio.c"
        var $120=$_py_tmp19; //@line 1056 "textio.c"
        var $121=$120; //@line 1056 "textio.c"
        var $122=HEAP[$121]; //@line 1056 "textio.c"
        var $123=($122) - 1; //@line 1056 "textio.c"
        var $124=$_py_tmp19; //@line 1056 "textio.c"
        var $125=$124; //@line 1056 "textio.c"
        HEAP[$125]=$123; //@line 1056 "textio.c"
        var $126=$_py_tmp19; //@line 1056 "textio.c"
        var $127=$126; //@line 1056 "textio.c"
        var $128=HEAP[$127]; //@line 1056 "textio.c"
        var $129=($128)==0; //@line 1056 "textio.c"
        if ($129) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 1056 "textio.c"
      case 17: // $bb20
        var $130=$_py_tmp19; //@line 1056 "textio.c"
        var $131=$130+4; //@line 1056 "textio.c"
        var $132=HEAP[$131]; //@line 1056 "textio.c"
        var $133=$132+24; //@line 1056 "textio.c"
        var $134=HEAP[$133]; //@line 1056 "textio.c"
        var $135=$_py_tmp19; //@line 1056 "textio.c"
        FUNCTION_TABLE[$134]($135); //@line 1056 "textio.c"
        __label__ = 18; break; //@line 1056 "textio.c"
      case 18: // $bb21
        var $136=$self_addr; //@line 1057 "textio.c"
        var $137=$136+64; //@line 1057 "textio.c"
        var $138=HEAP[$137]; //@line 1057 "textio.c"
        var $139=($138)!=0; //@line 1057 "textio.c"
        if ($139) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 1057 "textio.c"
      case 19: // $bb22
        var $140=$self_addr; //@line 1057 "textio.c"
        var $141=$140+64; //@line 1057 "textio.c"
        var $142=HEAP[$141]; //@line 1057 "textio.c"
        $_py_tmp23=$142; //@line 1057 "textio.c"
        var $143=$self_addr; //@line 1057 "textio.c"
        var $144=$143+64; //@line 1057 "textio.c"
        HEAP[$144]=0; //@line 1057 "textio.c"
        var $145=$_py_tmp23; //@line 1057 "textio.c"
        var $146=$145; //@line 1057 "textio.c"
        var $147=HEAP[$146]; //@line 1057 "textio.c"
        var $148=($147) - 1; //@line 1057 "textio.c"
        var $149=$_py_tmp23; //@line 1057 "textio.c"
        var $150=$149; //@line 1057 "textio.c"
        HEAP[$150]=$148; //@line 1057 "textio.c"
        var $151=$_py_tmp23; //@line 1057 "textio.c"
        var $152=$151; //@line 1057 "textio.c"
        var $153=HEAP[$152]; //@line 1057 "textio.c"
        var $154=($153)==0; //@line 1057 "textio.c"
        if ($154) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1057 "textio.c"
      case 20: // $bb24
        var $155=$_py_tmp23; //@line 1057 "textio.c"
        var $156=$155+4; //@line 1057 "textio.c"
        var $157=HEAP[$156]; //@line 1057 "textio.c"
        var $158=$157+24; //@line 1057 "textio.c"
        var $159=HEAP[$158]; //@line 1057 "textio.c"
        var $160=$_py_tmp23; //@line 1057 "textio.c"
        FUNCTION_TABLE[$159]($160); //@line 1057 "textio.c"
        __label__ = 21; break; //@line 1057 "textio.c"
      case 21: // $bb25
        var $161=$self_addr; //@line 1058 "textio.c"
        var $162=$161+72; //@line 1058 "textio.c"
        var $163=HEAP[$162]; //@line 1058 "textio.c"
        var $164=($163)!=0; //@line 1058 "textio.c"
        if ($164) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 1058 "textio.c"
      case 22: // $bb26
        var $165=$self_addr; //@line 1058 "textio.c"
        var $166=$165+72; //@line 1058 "textio.c"
        var $167=HEAP[$166]; //@line 1058 "textio.c"
        $_py_tmp27=$167; //@line 1058 "textio.c"
        var $168=$self_addr; //@line 1058 "textio.c"
        var $169=$168+72; //@line 1058 "textio.c"
        HEAP[$169]=0; //@line 1058 "textio.c"
        var $170=$_py_tmp27; //@line 1058 "textio.c"
        var $171=$170; //@line 1058 "textio.c"
        var $172=HEAP[$171]; //@line 1058 "textio.c"
        var $173=($172) - 1; //@line 1058 "textio.c"
        var $174=$_py_tmp27; //@line 1058 "textio.c"
        var $175=$174; //@line 1058 "textio.c"
        HEAP[$175]=$173; //@line 1058 "textio.c"
        var $176=$_py_tmp27; //@line 1058 "textio.c"
        var $177=$176; //@line 1058 "textio.c"
        var $178=HEAP[$177]; //@line 1058 "textio.c"
        var $179=($178)==0; //@line 1058 "textio.c"
        if ($179) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 1058 "textio.c"
      case 23: // $bb28
        var $180=$_py_tmp27; //@line 1058 "textio.c"
        var $181=$180+4; //@line 1058 "textio.c"
        var $182=HEAP[$181]; //@line 1058 "textio.c"
        var $183=$182+24; //@line 1058 "textio.c"
        var $184=HEAP[$183]; //@line 1058 "textio.c"
        var $185=$_py_tmp27; //@line 1058 "textio.c"
        FUNCTION_TABLE[$184]($185); //@line 1058 "textio.c"
        __label__ = 24; break; //@line 1058 "textio.c"
      case 24: // $bb29
        var $186=$self_addr; //@line 1059 "textio.c"
        var $187=$186+80; //@line 1059 "textio.c"
        var $188=HEAP[$187]; //@line 1059 "textio.c"
        var $189=($188)!=0; //@line 1059 "textio.c"
        if ($189) { __label__ = 25; break; } else { __label__ = 27; break; } //@line 1059 "textio.c"
      case 25: // $bb30
        var $190=$self_addr; //@line 1059 "textio.c"
        var $191=$190+80; //@line 1059 "textio.c"
        var $192=HEAP[$191]; //@line 1059 "textio.c"
        $_py_tmp31=$192; //@line 1059 "textio.c"
        var $193=$self_addr; //@line 1059 "textio.c"
        var $194=$193+80; //@line 1059 "textio.c"
        HEAP[$194]=0; //@line 1059 "textio.c"
        var $195=$_py_tmp31; //@line 1059 "textio.c"
        var $196=$195; //@line 1059 "textio.c"
        var $197=HEAP[$196]; //@line 1059 "textio.c"
        var $198=($197) - 1; //@line 1059 "textio.c"
        var $199=$_py_tmp31; //@line 1059 "textio.c"
        var $200=$199; //@line 1059 "textio.c"
        HEAP[$200]=$198; //@line 1059 "textio.c"
        var $201=$_py_tmp31; //@line 1059 "textio.c"
        var $202=$201; //@line 1059 "textio.c"
        var $203=HEAP[$202]; //@line 1059 "textio.c"
        var $204=($203)==0; //@line 1059 "textio.c"
        if ($204) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1059 "textio.c"
      case 26: // $bb32
        var $205=$_py_tmp31; //@line 1059 "textio.c"
        var $206=$205+4; //@line 1059 "textio.c"
        var $207=HEAP[$206]; //@line 1059 "textio.c"
        var $208=$207+24; //@line 1059 "textio.c"
        var $209=HEAP[$208]; //@line 1059 "textio.c"
        var $210=$_py_tmp31; //@line 1059 "textio.c"
        FUNCTION_TABLE[$209]($210); //@line 1059 "textio.c"
        __label__ = 27; break; //@line 1059 "textio.c"
      case 27: // $bb33
        var $211=$self_addr; //@line 1060 "textio.c"
        var $212=$211+40; //@line 1060 "textio.c"
        var $213=HEAP[$212]; //@line 1060 "textio.c"
        var $214=($213)!=0; //@line 1060 "textio.c"
        if ($214) { __label__ = 28; break; } else { __label__ = 30; break; } //@line 1060 "textio.c"
      case 28: // $bb34
        var $215=$self_addr; //@line 1060 "textio.c"
        var $216=$215+40; //@line 1060 "textio.c"
        var $217=HEAP[$216]; //@line 1060 "textio.c"
        $_py_tmp35=$217; //@line 1060 "textio.c"
        var $218=$self_addr; //@line 1060 "textio.c"
        var $219=$218+40; //@line 1060 "textio.c"
        HEAP[$219]=0; //@line 1060 "textio.c"
        var $220=$_py_tmp35; //@line 1060 "textio.c"
        var $221=$220; //@line 1060 "textio.c"
        var $222=HEAP[$221]; //@line 1060 "textio.c"
        var $223=($222) - 1; //@line 1060 "textio.c"
        var $224=$_py_tmp35; //@line 1060 "textio.c"
        var $225=$224; //@line 1060 "textio.c"
        HEAP[$225]=$223; //@line 1060 "textio.c"
        var $226=$_py_tmp35; //@line 1060 "textio.c"
        var $227=$226; //@line 1060 "textio.c"
        var $228=HEAP[$227]; //@line 1060 "textio.c"
        var $229=($228)==0; //@line 1060 "textio.c"
        if ($229) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 1060 "textio.c"
      case 29: // $bb36
        var $230=$_py_tmp35; //@line 1060 "textio.c"
        var $231=$230+4; //@line 1060 "textio.c"
        var $232=HEAP[$231]; //@line 1060 "textio.c"
        var $233=$232+24; //@line 1060 "textio.c"
        var $234=HEAP[$233]; //@line 1060 "textio.c"
        var $235=$_py_tmp35; //@line 1060 "textio.c"
        FUNCTION_TABLE[$234]($235); //@line 1060 "textio.c"
        __label__ = 30; break; //@line 1060 "textio.c"
      case 30: // $bb37
        var $236=$self_addr; //@line 1061 "textio.c"
        var $237=$236+84; //@line 1061 "textio.c"
        var $238=HEAP[$237]; //@line 1061 "textio.c"
        var $239=($238)!=0; //@line 1061 "textio.c"
        if ($239) { __label__ = 31; break; } else { __label__ = 33; break; } //@line 1061 "textio.c"
      case 31: // $bb38
        var $240=$self_addr; //@line 1061 "textio.c"
        var $241=$240+84; //@line 1061 "textio.c"
        var $242=HEAP[$241]; //@line 1061 "textio.c"
        $_py_tmp39=$242; //@line 1061 "textio.c"
        var $243=$self_addr; //@line 1061 "textio.c"
        var $244=$243+84; //@line 1061 "textio.c"
        HEAP[$244]=0; //@line 1061 "textio.c"
        var $245=$_py_tmp39; //@line 1061 "textio.c"
        var $246=$245; //@line 1061 "textio.c"
        var $247=HEAP[$246]; //@line 1061 "textio.c"
        var $248=($247) - 1; //@line 1061 "textio.c"
        var $249=$_py_tmp39; //@line 1061 "textio.c"
        var $250=$249; //@line 1061 "textio.c"
        HEAP[$250]=$248; //@line 1061 "textio.c"
        var $251=$_py_tmp39; //@line 1061 "textio.c"
        var $252=$251; //@line 1061 "textio.c"
        var $253=HEAP[$252]; //@line 1061 "textio.c"
        var $254=($253)==0; //@line 1061 "textio.c"
        if ($254) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 1061 "textio.c"
      case 32: // $bb40
        var $255=$_py_tmp39; //@line 1061 "textio.c"
        var $256=$255+4; //@line 1061 "textio.c"
        var $257=HEAP[$256]; //@line 1061 "textio.c"
        var $258=$257+24; //@line 1061 "textio.c"
        var $259=HEAP[$258]; //@line 1061 "textio.c"
        var $260=$_py_tmp39; //@line 1061 "textio.c"
        FUNCTION_TABLE[$259]($260); //@line 1061 "textio.c"
        __label__ = 33; break; //@line 1061 "textio.c"
      case 33: // $bb41
        $0=0; //@line 1062 "textio.c"
        __label__ = 34; break; //@line 1062 "textio.c"
      case 34: // $bb42
        var $261=$0; //@line 1050 "textio.c"
        $retval=$261; //@line 1050 "textio.c"
        var $retval43=$retval; //@line 1050 "textio.c"
        ;
        return $retval43; //@line 1050 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_dealloc($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $g;
        var $_py_tmp;
        $self_addr=$self;
        var $0=$self_addr; //@line 1068 "textio.c"
        var $1=__textiowrapper_clear($0); //@line 1068 "textio.c"
        var $2=($1) < 0; //@line 1068 "textio.c"
        if ($2) { __label__ = 9; break; } else { __label__ = 1; break; } //@line 1068 "textio.c"
      case 1: // $bb
        var $3=$self_addr; //@line 1070 "textio.c"
        var $4=$3; //@line 1070 "textio.c"
        var $5=$4+-12; //@line 1070 "textio.c"
        $g=$5; //@line 1070 "textio.c"
        var $6=$g; //@line 1070 "textio.c"
        var $7=$6; //@line 1070 "textio.c"
        var $8=$7+8; //@line 1070 "textio.c"
        var $9=HEAP[$8]; //@line 1070 "textio.c"
        var $10=($9)==-2; //@line 1070 "textio.c"
        if ($10) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1070 "textio.c"
      case 2: // $bb1
        ___assert_fail(__str56432, __str15390, 1070, ___PRETTY_FUNCTION___9695); //@line 1070 "textio.c"
        throw "Reached an unreachable!" //@line 1070 "textio.c"
      case 3: // $bb2
        var $11=$g; //@line 1070 "textio.c"
        var $12=$11; //@line 1070 "textio.c"
        var $13=$12+8; //@line 1070 "textio.c"
        HEAP[$13]=-2; //@line 1070 "textio.c"
        var $14=$g; //@line 1070 "textio.c"
        var $15=$14; //@line 1070 "textio.c"
        var $16=$15+4; //@line 1070 "textio.c"
        var $17=HEAP[$16]; //@line 1070 "textio.c"
        var $18=$g; //@line 1070 "textio.c"
        var $19=$18; //@line 1070 "textio.c"
        var $20=$19; //@line 1070 "textio.c"
        var $21=HEAP[$20]; //@line 1070 "textio.c"
        var $22=$17; //@line 1070 "textio.c"
        var $23=$22; //@line 1070 "textio.c"
        HEAP[$23]=$21; //@line 1070 "textio.c"
        var $24=$g; //@line 1070 "textio.c"
        var $25=$24; //@line 1070 "textio.c"
        var $26=$25; //@line 1070 "textio.c"
        var $27=HEAP[$26]; //@line 1070 "textio.c"
        var $28=$g; //@line 1070 "textio.c"
        var $29=$28; //@line 1070 "textio.c"
        var $30=$29+4; //@line 1070 "textio.c"
        var $31=HEAP[$30]; //@line 1070 "textio.c"
        var $32=$27; //@line 1070 "textio.c"
        var $33=$32+4; //@line 1070 "textio.c"
        HEAP[$33]=$31; //@line 1070 "textio.c"
        var $34=$g; //@line 1070 "textio.c"
        var $35=$34; //@line 1070 "textio.c"
        var $36=$35; //@line 1070 "textio.c"
        HEAP[$36]=0; //@line 1070 "textio.c"
        var $37=$self_addr; //@line 1071 "textio.c"
        var $38=$37+88; //@line 1071 "textio.c"
        var $39=HEAP[$38]; //@line 1071 "textio.c"
        var $40=($39)!=0; //@line 1071 "textio.c"
        if ($40) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1071 "textio.c"
      case 4: // $bb3
        var $41=$self_addr; //@line 1072 "textio.c"
        var $42=$41; //@line 1072 "textio.c"
        _PyObject_ClearWeakRefs($42); //@line 1072 "textio.c"
        __label__ = 5; break; //@line 1072 "textio.c"
      case 5: // $bb4
        var $43=$self_addr; //@line 1073 "textio.c"
        var $44=$43+92; //@line 1073 "textio.c"
        var $45=HEAP[$44]; //@line 1073 "textio.c"
        var $46=($45)!=0; //@line 1073 "textio.c"
        if ($46) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 1073 "textio.c"
      case 6: // $bb5
        var $47=$self_addr; //@line 1073 "textio.c"
        var $48=$47+92; //@line 1073 "textio.c"
        var $49=HEAP[$48]; //@line 1073 "textio.c"
        $_py_tmp=$49; //@line 1073 "textio.c"
        var $50=$self_addr; //@line 1073 "textio.c"
        var $51=$50+92; //@line 1073 "textio.c"
        HEAP[$51]=0; //@line 1073 "textio.c"
        var $52=$_py_tmp; //@line 1073 "textio.c"
        var $53=$52; //@line 1073 "textio.c"
        var $54=HEAP[$53]; //@line 1073 "textio.c"
        var $55=($54) - 1; //@line 1073 "textio.c"
        var $56=$_py_tmp; //@line 1073 "textio.c"
        var $57=$56; //@line 1073 "textio.c"
        HEAP[$57]=$55; //@line 1073 "textio.c"
        var $58=$_py_tmp; //@line 1073 "textio.c"
        var $59=$58; //@line 1073 "textio.c"
        var $60=HEAP[$59]; //@line 1073 "textio.c"
        var $61=($60)==0; //@line 1073 "textio.c"
        if ($61) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1073 "textio.c"
      case 7: // $bb6
        var $62=$_py_tmp; //@line 1073 "textio.c"
        var $63=$62+4; //@line 1073 "textio.c"
        var $64=HEAP[$63]; //@line 1073 "textio.c"
        var $65=$64+24; //@line 1073 "textio.c"
        var $66=HEAP[$65]; //@line 1073 "textio.c"
        var $67=$_py_tmp; //@line 1073 "textio.c"
        FUNCTION_TABLE[$66]($67); //@line 1073 "textio.c"
        __label__ = 8; break; //@line 1073 "textio.c"
      case 8: // $bb7
        var $68=$self_addr; //@line 1074 "textio.c"
        var $69=$68; //@line 1074 "textio.c"
        var $70=$69+4; //@line 1074 "textio.c"
        var $71=HEAP[$70]; //@line 1074 "textio.c"
        var $72=$71+160; //@line 1074 "textio.c"
        var $73=HEAP[$72]; //@line 1074 "textio.c"
        var $74=$self_addr; //@line 1074 "textio.c"
        var $75=$74; //@line 1074 "textio.c"
        FUNCTION_TABLE[$73]($75); //@line 1074 "textio.c"
        __label__ = 9; break; //@line 1074 "textio.c"
      case 9: // $return
        ;
        return; //@line 1069 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_traverse($self, $visit, $arg) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $visit_addr;
        var $arg_addr;
        var $retval;
        var $0;
        var $vret;
        var $vret4;
        var $vret8;
        var $vret12;
        var $vret16;
        var $vret20;
        var $vret24;
        var $vret28;
        var $vret32;
        var $vret36;
        var $vret40;
        $self_addr=$self;
        $visit_addr=$visit;
        $arg_addr=$arg;
        var $1=$self_addr; //@line 1080 "textio.c"
        var $2=$1+20; //@line 1080 "textio.c"
        var $3=HEAP[$2]; //@line 1080 "textio.c"
        var $4=($3)!=0; //@line 1080 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 1080 "textio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 1080 "textio.c"
        var $6=$5+20; //@line 1080 "textio.c"
        var $7=HEAP[$6]; //@line 1080 "textio.c"
        var $8=$visit_addr; //@line 1080 "textio.c"
        var $9=$arg_addr; //@line 1080 "textio.c"
        var $10=FUNCTION_TABLE[$8]($7, $9); //@line 1080 "textio.c"
        $vret=$10; //@line 1080 "textio.c"
        var $11=$vret; //@line 1080 "textio.c"
        var $12=($11)!=0; //@line 1080 "textio.c"
        if ($12) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1080 "textio.c"
      case 2: // $bb1
        var $13=$vret; //@line 1080 "textio.c"
        $0=$13; //@line 1080 "textio.c"
        __label__ = 34; break; //@line 1080 "textio.c"
      case 3: // $bb2
        var $14=$self_addr; //@line 1081 "textio.c"
        var $15=$14+24; //@line 1081 "textio.c"
        var $16=HEAP[$15]; //@line 1081 "textio.c"
        var $17=($16)!=0; //@line 1081 "textio.c"
        if ($17) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 1081 "textio.c"
      case 4: // $bb3
        var $18=$self_addr; //@line 1081 "textio.c"
        var $19=$18+24; //@line 1081 "textio.c"
        var $20=HEAP[$19]; //@line 1081 "textio.c"
        var $21=$visit_addr; //@line 1081 "textio.c"
        var $22=$arg_addr; //@line 1081 "textio.c"
        var $23=FUNCTION_TABLE[$21]($20, $22); //@line 1081 "textio.c"
        $vret4=$23; //@line 1081 "textio.c"
        var $24=$vret4; //@line 1081 "textio.c"
        var $25=($24)!=0; //@line 1081 "textio.c"
        if ($25) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1081 "textio.c"
      case 5: // $bb5
        var $26=$vret4; //@line 1081 "textio.c"
        $0=$26; //@line 1081 "textio.c"
        __label__ = 34; break; //@line 1081 "textio.c"
      case 6: // $bb6
        var $27=$self_addr; //@line 1082 "textio.c"
        var $28=$27+28; //@line 1082 "textio.c"
        var $29=HEAP[$28]; //@line 1082 "textio.c"
        var $30=($29)!=0; //@line 1082 "textio.c"
        if ($30) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 1082 "textio.c"
      case 7: // $bb7
        var $31=$self_addr; //@line 1082 "textio.c"
        var $32=$31+28; //@line 1082 "textio.c"
        var $33=HEAP[$32]; //@line 1082 "textio.c"
        var $34=$visit_addr; //@line 1082 "textio.c"
        var $35=$arg_addr; //@line 1082 "textio.c"
        var $36=FUNCTION_TABLE[$34]($33, $35); //@line 1082 "textio.c"
        $vret8=$36; //@line 1082 "textio.c"
        var $37=$vret8; //@line 1082 "textio.c"
        var $38=($37)!=0; //@line 1082 "textio.c"
        if ($38) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1082 "textio.c"
      case 8: // $bb9
        var $39=$vret8; //@line 1082 "textio.c"
        $0=$39; //@line 1082 "textio.c"
        __label__ = 34; break; //@line 1082 "textio.c"
      case 9: // $bb10
        var $40=$self_addr; //@line 1083 "textio.c"
        var $41=$40+32; //@line 1083 "textio.c"
        var $42=HEAP[$41]; //@line 1083 "textio.c"
        var $43=($42)!=0; //@line 1083 "textio.c"
        if ($43) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 1083 "textio.c"
      case 10: // $bb11
        var $44=$self_addr; //@line 1083 "textio.c"
        var $45=$44+32; //@line 1083 "textio.c"
        var $46=HEAP[$45]; //@line 1083 "textio.c"
        var $47=$visit_addr; //@line 1083 "textio.c"
        var $48=$arg_addr; //@line 1083 "textio.c"
        var $49=FUNCTION_TABLE[$47]($46, $48); //@line 1083 "textio.c"
        $vret12=$49; //@line 1083 "textio.c"
        var $50=$vret12; //@line 1083 "textio.c"
        var $51=($50)!=0; //@line 1083 "textio.c"
        if ($51) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1083 "textio.c"
      case 11: // $bb13
        var $52=$vret12; //@line 1083 "textio.c"
        $0=$52; //@line 1083 "textio.c"
        __label__ = 34; break; //@line 1083 "textio.c"
      case 12: // $bb14
        var $53=$self_addr; //@line 1084 "textio.c"
        var $54=$53+36; //@line 1084 "textio.c"
        var $55=HEAP[$54]; //@line 1084 "textio.c"
        var $56=($55)!=0; //@line 1084 "textio.c"
        if ($56) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 1084 "textio.c"
      case 13: // $bb15
        var $57=$self_addr; //@line 1084 "textio.c"
        var $58=$57+36; //@line 1084 "textio.c"
        var $59=HEAP[$58]; //@line 1084 "textio.c"
        var $60=$visit_addr; //@line 1084 "textio.c"
        var $61=$arg_addr; //@line 1084 "textio.c"
        var $62=FUNCTION_TABLE[$60]($59, $61); //@line 1084 "textio.c"
        $vret16=$62; //@line 1084 "textio.c"
        var $63=$vret16; //@line 1084 "textio.c"
        var $64=($63)!=0; //@line 1084 "textio.c"
        if ($64) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1084 "textio.c"
      case 14: // $bb17
        var $65=$vret16; //@line 1084 "textio.c"
        $0=$65; //@line 1084 "textio.c"
        __label__ = 34; break; //@line 1084 "textio.c"
      case 15: // $bb18
        var $66=$self_addr; //@line 1085 "textio.c"
        var $67=$66+64; //@line 1085 "textio.c"
        var $68=HEAP[$67]; //@line 1085 "textio.c"
        var $69=($68)!=0; //@line 1085 "textio.c"
        if ($69) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 1085 "textio.c"
      case 16: // $bb19
        var $70=$self_addr; //@line 1085 "textio.c"
        var $71=$70+64; //@line 1085 "textio.c"
        var $72=HEAP[$71]; //@line 1085 "textio.c"
        var $73=$visit_addr; //@line 1085 "textio.c"
        var $74=$arg_addr; //@line 1085 "textio.c"
        var $75=FUNCTION_TABLE[$73]($72, $74); //@line 1085 "textio.c"
        $vret20=$75; //@line 1085 "textio.c"
        var $76=$vret20; //@line 1085 "textio.c"
        var $77=($76)!=0; //@line 1085 "textio.c"
        if ($77) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 1085 "textio.c"
      case 17: // $bb21
        var $78=$vret20; //@line 1085 "textio.c"
        $0=$78; //@line 1085 "textio.c"
        __label__ = 34; break; //@line 1085 "textio.c"
      case 18: // $bb22
        var $79=$self_addr; //@line 1086 "textio.c"
        var $80=$79+72; //@line 1086 "textio.c"
        var $81=HEAP[$80]; //@line 1086 "textio.c"
        var $82=($81)!=0; //@line 1086 "textio.c"
        if ($82) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 1086 "textio.c"
      case 19: // $bb23
        var $83=$self_addr; //@line 1086 "textio.c"
        var $84=$83+72; //@line 1086 "textio.c"
        var $85=HEAP[$84]; //@line 1086 "textio.c"
        var $86=$visit_addr; //@line 1086 "textio.c"
        var $87=$arg_addr; //@line 1086 "textio.c"
        var $88=FUNCTION_TABLE[$86]($85, $87); //@line 1086 "textio.c"
        $vret24=$88; //@line 1086 "textio.c"
        var $89=$vret24; //@line 1086 "textio.c"
        var $90=($89)!=0; //@line 1086 "textio.c"
        if ($90) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1086 "textio.c"
      case 20: // $bb25
        var $91=$vret24; //@line 1086 "textio.c"
        $0=$91; //@line 1086 "textio.c"
        __label__ = 34; break; //@line 1086 "textio.c"
      case 21: // $bb26
        var $92=$self_addr; //@line 1087 "textio.c"
        var $93=$92+80; //@line 1087 "textio.c"
        var $94=HEAP[$93]; //@line 1087 "textio.c"
        var $95=($94)!=0; //@line 1087 "textio.c"
        if ($95) { __label__ = 22; break; } else { __label__ = 24; break; } //@line 1087 "textio.c"
      case 22: // $bb27
        var $96=$self_addr; //@line 1087 "textio.c"
        var $97=$96+80; //@line 1087 "textio.c"
        var $98=HEAP[$97]; //@line 1087 "textio.c"
        var $99=$visit_addr; //@line 1087 "textio.c"
        var $100=$arg_addr; //@line 1087 "textio.c"
        var $101=FUNCTION_TABLE[$99]($98, $100); //@line 1087 "textio.c"
        $vret28=$101; //@line 1087 "textio.c"
        var $102=$vret28; //@line 1087 "textio.c"
        var $103=($102)!=0; //@line 1087 "textio.c"
        if ($103) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 1087 "textio.c"
      case 23: // $bb29
        var $104=$vret28; //@line 1087 "textio.c"
        $0=$104; //@line 1087 "textio.c"
        __label__ = 34; break; //@line 1087 "textio.c"
      case 24: // $bb30
        var $105=$self_addr; //@line 1088 "textio.c"
        var $106=$105+40; //@line 1088 "textio.c"
        var $107=HEAP[$106]; //@line 1088 "textio.c"
        var $108=($107)!=0; //@line 1088 "textio.c"
        if ($108) { __label__ = 25; break; } else { __label__ = 27; break; } //@line 1088 "textio.c"
      case 25: // $bb31
        var $109=$self_addr; //@line 1088 "textio.c"
        var $110=$109+40; //@line 1088 "textio.c"
        var $111=HEAP[$110]; //@line 1088 "textio.c"
        var $112=$visit_addr; //@line 1088 "textio.c"
        var $113=$arg_addr; //@line 1088 "textio.c"
        var $114=FUNCTION_TABLE[$112]($111, $113); //@line 1088 "textio.c"
        $vret32=$114; //@line 1088 "textio.c"
        var $115=$vret32; //@line 1088 "textio.c"
        var $116=($115)!=0; //@line 1088 "textio.c"
        if ($116) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1088 "textio.c"
      case 26: // $bb33
        var $117=$vret32; //@line 1088 "textio.c"
        $0=$117; //@line 1088 "textio.c"
        __label__ = 34; break; //@line 1088 "textio.c"
      case 27: // $bb34
        var $118=$self_addr; //@line 1089 "textio.c"
        var $119=$118+84; //@line 1089 "textio.c"
        var $120=HEAP[$119]; //@line 1089 "textio.c"
        var $121=($120)!=0; //@line 1089 "textio.c"
        if ($121) { __label__ = 28; break; } else { __label__ = 30; break; } //@line 1089 "textio.c"
      case 28: // $bb35
        var $122=$self_addr; //@line 1089 "textio.c"
        var $123=$122+84; //@line 1089 "textio.c"
        var $124=HEAP[$123]; //@line 1089 "textio.c"
        var $125=$visit_addr; //@line 1089 "textio.c"
        var $126=$arg_addr; //@line 1089 "textio.c"
        var $127=FUNCTION_TABLE[$125]($124, $126); //@line 1089 "textio.c"
        $vret36=$127; //@line 1089 "textio.c"
        var $128=$vret36; //@line 1089 "textio.c"
        var $129=($128)!=0; //@line 1089 "textio.c"
        if ($129) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 1089 "textio.c"
      case 29: // $bb37
        var $130=$vret36; //@line 1089 "textio.c"
        $0=$130; //@line 1089 "textio.c"
        __label__ = 34; break; //@line 1089 "textio.c"
      case 30: // $bb38
        var $131=$self_addr; //@line 1091 "textio.c"
        var $132=$131+92; //@line 1091 "textio.c"
        var $133=HEAP[$132]; //@line 1091 "textio.c"
        var $134=($133)!=0; //@line 1091 "textio.c"
        if ($134) { __label__ = 31; break; } else { __label__ = 33; break; } //@line 1091 "textio.c"
      case 31: // $bb39
        var $135=$self_addr; //@line 1091 "textio.c"
        var $136=$135+92; //@line 1091 "textio.c"
        var $137=HEAP[$136]; //@line 1091 "textio.c"
        var $138=$visit_addr; //@line 1091 "textio.c"
        var $139=$arg_addr; //@line 1091 "textio.c"
        var $140=FUNCTION_TABLE[$138]($137, $139); //@line 1091 "textio.c"
        $vret40=$140; //@line 1091 "textio.c"
        var $141=$vret40; //@line 1091 "textio.c"
        var $142=($141)!=0; //@line 1091 "textio.c"
        if ($142) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 1091 "textio.c"
      case 32: // $bb41
        var $143=$vret40; //@line 1091 "textio.c"
        $0=$143; //@line 1091 "textio.c"
        __label__ = 34; break; //@line 1091 "textio.c"
      case 33: // $bb42
        $0=0; //@line 1092 "textio.c"
        __label__ = 34; break; //@line 1092 "textio.c"
      case 34: // $bb43
        var $144=$0; //@line 1080 "textio.c"
        $retval=$144; //@line 1080 "textio.c"
        var $retval44=$retval; //@line 1080 "textio.c"
        ;
        return $retval44; //@line 1080 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_clear($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $_py_tmp;
        $self_addr=$self;
        var $1=$self_addr; //@line 1098 "textio.c"
        var $2=__textiowrapper_clear($1); //@line 1098 "textio.c"
        var $3=($2) < 0; //@line 1098 "textio.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1098 "textio.c"
      case 1: // $bb
        $0=-1; //@line 1099 "textio.c"
        __label__ = 6; break; //@line 1099 "textio.c"
      case 2: // $bb1
        var $4=$self_addr; //@line 1100 "textio.c"
        var $5=$4+92; //@line 1100 "textio.c"
        var $6=HEAP[$5]; //@line 1100 "textio.c"
        var $7=($6)!=0; //@line 1100 "textio.c"
        if ($7) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 1100 "textio.c"
      case 3: // $bb2
        var $8=$self_addr; //@line 1100 "textio.c"
        var $9=$8+92; //@line 1100 "textio.c"
        var $10=HEAP[$9]; //@line 1100 "textio.c"
        $_py_tmp=$10; //@line 1100 "textio.c"
        var $11=$self_addr; //@line 1100 "textio.c"
        var $12=$11+92; //@line 1100 "textio.c"
        HEAP[$12]=0; //@line 1100 "textio.c"
        var $13=$_py_tmp; //@line 1100 "textio.c"
        var $14=$13; //@line 1100 "textio.c"
        var $15=HEAP[$14]; //@line 1100 "textio.c"
        var $16=($15) - 1; //@line 1100 "textio.c"
        var $17=$_py_tmp; //@line 1100 "textio.c"
        var $18=$17; //@line 1100 "textio.c"
        HEAP[$18]=$16; //@line 1100 "textio.c"
        var $19=$_py_tmp; //@line 1100 "textio.c"
        var $20=$19; //@line 1100 "textio.c"
        var $21=HEAP[$20]; //@line 1100 "textio.c"
        var $22=($21)==0; //@line 1100 "textio.c"
        if ($22) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1100 "textio.c"
      case 4: // $bb3
        var $23=$_py_tmp; //@line 1100 "textio.c"
        var $24=$23+4; //@line 1100 "textio.c"
        var $25=HEAP[$24]; //@line 1100 "textio.c"
        var $26=$25+24; //@line 1100 "textio.c"
        var $27=HEAP[$26]; //@line 1100 "textio.c"
        var $28=$_py_tmp; //@line 1100 "textio.c"
        FUNCTION_TABLE[$27]($28); //@line 1100 "textio.c"
        __label__ = 5; break; //@line 1100 "textio.c"
      case 5: // $bb4
        $0=0; //@line 1101 "textio.c"
        __label__ = 6; break; //@line 1101 "textio.c"
      case 6: // $bb5
        var $29=$0; //@line 1099 "textio.c"
        $retval=$29; //@line 1099 "textio.c"
        var $retval6=$retval; //@line 1099 "textio.c"
        ;
        return $retval6; //@line 1099 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_detach($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $buffer;
        var $res;
        $self_addr=$self;
        var $1=$self_addr; //@line 1163 "textio.c"
        var $2=$1+8; //@line 1163 "textio.c"
        var $3=HEAP[$2]; //@line 1163 "textio.c"
        var $4=($3) <= 0; //@line 1163 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 1163 "textio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 1163 "textio.c"
        var $6=$5+12; //@line 1163 "textio.c"
        var $7=HEAP[$6]; //@line 1163 "textio.c"
        var $8=($7)!=0; //@line 1163 "textio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 1163 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1163 "textio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str57433); //@line 1163 "textio.c"
        __label__ = 4; break; //@line 1163 "textio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str58434); //@line 1163 "textio.c"
        __label__ = 4; break; //@line 1163 "textio.c"
      case 4: // $bb3
        $0=0; //@line 1163 "textio.c"
        __label__ = 10; break; //@line 1163 "textio.c"
      case 5: // $bb4
        var $10=HEAP[__PyIO_str_flush]; //@line 1164 "textio.c"
        var $11=$self_addr; //@line 1164 "textio.c"
        var $12=$11; //@line 1164 "textio.c"
        var $13=_PyObject_CallMethodObjArgs($12, $10, allocate(4, "i8*", ALLOC_STACK)); //@line 1164 "textio.c"
        $res=$13; //@line 1164 "textio.c"
        var $14=$res; //@line 1165 "textio.c"
        var $15=($14)==0; //@line 1165 "textio.c"
        if ($15) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1165 "textio.c"
      case 6: // $bb5
        $0=0; //@line 1166 "textio.c"
        __label__ = 10; break; //@line 1166 "textio.c"
      case 7: // $bb6
        var $16=$res; //@line 1167 "textio.c"
        var $17=$16; //@line 1167 "textio.c"
        var $18=HEAP[$17]; //@line 1167 "textio.c"
        var $19=($18) - 1; //@line 1167 "textio.c"
        var $20=$res; //@line 1167 "textio.c"
        var $21=$20; //@line 1167 "textio.c"
        HEAP[$21]=$19; //@line 1167 "textio.c"
        var $22=$res; //@line 1167 "textio.c"
        var $23=$22; //@line 1167 "textio.c"
        var $24=HEAP[$23]; //@line 1167 "textio.c"
        var $25=($24)==0; //@line 1167 "textio.c"
        if ($25) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1167 "textio.c"
      case 8: // $bb7
        var $26=$res; //@line 1167 "textio.c"
        var $27=$26+4; //@line 1167 "textio.c"
        var $28=HEAP[$27]; //@line 1167 "textio.c"
        var $29=$28+24; //@line 1167 "textio.c"
        var $30=HEAP[$29]; //@line 1167 "textio.c"
        var $31=$res; //@line 1167 "textio.c"
        FUNCTION_TABLE[$30]($31); //@line 1167 "textio.c"
        __label__ = 9; break; //@line 1167 "textio.c"
      case 9: // $bb8
        var $32=$self_addr; //@line 1168 "textio.c"
        var $33=$32+20; //@line 1168 "textio.c"
        var $34=HEAP[$33]; //@line 1168 "textio.c"
        $buffer=$34; //@line 1168 "textio.c"
        var $35=$self_addr; //@line 1169 "textio.c"
        var $36=$35+20; //@line 1169 "textio.c"
        HEAP[$36]=0; //@line 1169 "textio.c"
        var $37=$self_addr; //@line 1170 "textio.c"
        var $38=$37+12; //@line 1170 "textio.c"
        HEAP[$38]=1; //@line 1170 "textio.c"
        var $39=$self_addr; //@line 1171 "textio.c"
        var $40=$39+8; //@line 1171 "textio.c"
        HEAP[$40]=0; //@line 1171 "textio.c"
        var $41=$buffer; //@line 1172 "textio.c"
        $0=$41; //@line 1172 "textio.c"
        __label__ = 10; break; //@line 1172 "textio.c"
      case 10: // $bb9
        var $42=$0; //@line 1163 "textio.c"
        $retval=$42; //@line 1163 "textio.c"
        var $retval10=$retval; //@line 1163 "textio.c"
        ;
        return $retval10; //@line 1163 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _findchar($s, $size, $ch) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $s_addr;
        var $size_addr;
        var $ch_addr;
        var $retval;
        var $0;
        $s_addr=$s;
        $size_addr=$size;
        $ch_addr=$ch;
        __label__ = 4; break; //@line 1179 "textio.c"
      case 1: // $bb
        var $1=$s_addr; //@line 1180 "textio.c"
        var $2=HEAP[$1]; //@line 1180 "textio.c"
        var $3=$ch_addr; //@line 1180 "textio.c"
        var $4=($2)==($3); //@line 1180 "textio.c"
        var $5=$s_addr; //@line 1181 "textio.c"
        if ($4) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1180 "textio.c"
      case 2: // $bb1
        $0=$5; //@line 1181 "textio.c"
        __label__ = 6; break; //@line 1181 "textio.c"
      case 3: // $bb2
        var $6=$5+2; //@line 1182 "textio.c"
        $s_addr=$6; //@line 1182 "textio.c"
        __label__ = 4; break; //@line 1182 "textio.c"
      case 4: // $bb3
        var $7=$size_addr; //@line 1179 "textio.c"
        var $8=($7) > 0; //@line 1179 "textio.c"
        var $9=($8); //@line 1179 "textio.c"
        var $10=$size_addr; //@line 1179 "textio.c"
        var $11=($10) - 1; //@line 1179 "textio.c"
        $size_addr=$11; //@line 1179 "textio.c"
        var $toBool=($9)!=0; //@line 1179 "textio.c"
        if ($toBool) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 1179 "textio.c"
      case 5: // $bb4
        $0=0; //@line 1184 "textio.c"
        __label__ = 6; break; //@line 1184 "textio.c"
      case 6: // $bb5
        var $12=$0; //@line 1181 "textio.c"
        $retval=$12; //@line 1181 "textio.c"
        var $retval6=$retval; //@line 1181 "textio.c"
        ;
        return $retval6; //@line 1181 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __textiowrapper_writeflush($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $pending;
        var $b;
        var $ret;
        var $_py_tmp;
        $self_addr=$self;
        var $1=$self_addr; //@line 1194 "textio.c"
        var $2=$1+72; //@line 1194 "textio.c"
        var $3=HEAP[$2]; //@line 1194 "textio.c"
        var $4=($3)==0; //@line 1194 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1194 "textio.c"
      case 1: // $bb
        $0=0; //@line 1195 "textio.c"
        __label__ = 16; break; //@line 1195 "textio.c"
      case 2: // $bb1
        var $5=$self_addr; //@line 1197 "textio.c"
        var $6=$5+72; //@line 1197 "textio.c"
        var $7=HEAP[$6]; //@line 1197 "textio.c"
        $pending=$7; //@line 1197 "textio.c"
        var $8=$pending; //@line 1198 "textio.c"
        var $9=$8; //@line 1198 "textio.c"
        var $10=HEAP[$9]; //@line 1198 "textio.c"
        var $11=($10) + 1; //@line 1198 "textio.c"
        var $12=$pending; //@line 1198 "textio.c"
        var $13=$12; //@line 1198 "textio.c"
        HEAP[$13]=$11; //@line 1198 "textio.c"
        var $14=$self_addr; //@line 1199 "textio.c"
        var $15=$14+76; //@line 1199 "textio.c"
        HEAP[$15]=0; //@line 1199 "textio.c"
        var $16=$self_addr; //@line 1200 "textio.c"
        var $17=$16+72; //@line 1200 "textio.c"
        var $18=HEAP[$17]; //@line 1200 "textio.c"
        var $19=($18)!=0; //@line 1200 "textio.c"
        if ($19) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 1200 "textio.c"
      case 3: // $bb2
        var $20=$self_addr; //@line 1200 "textio.c"
        var $21=$20+72; //@line 1200 "textio.c"
        var $22=HEAP[$21]; //@line 1200 "textio.c"
        $_py_tmp=$22; //@line 1200 "textio.c"
        var $23=$self_addr; //@line 1200 "textio.c"
        var $24=$23+72; //@line 1200 "textio.c"
        HEAP[$24]=0; //@line 1200 "textio.c"
        var $25=$_py_tmp; //@line 1200 "textio.c"
        var $26=$25; //@line 1200 "textio.c"
        var $27=HEAP[$26]; //@line 1200 "textio.c"
        var $28=($27) - 1; //@line 1200 "textio.c"
        var $29=$_py_tmp; //@line 1200 "textio.c"
        var $30=$29; //@line 1200 "textio.c"
        HEAP[$30]=$28; //@line 1200 "textio.c"
        var $31=$_py_tmp; //@line 1200 "textio.c"
        var $32=$31; //@line 1200 "textio.c"
        var $33=HEAP[$32]; //@line 1200 "textio.c"
        var $34=($33)==0; //@line 1200 "textio.c"
        if ($34) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1200 "textio.c"
      case 4: // $bb3
        var $35=$_py_tmp; //@line 1200 "textio.c"
        var $36=$35+4; //@line 1200 "textio.c"
        var $37=HEAP[$36]; //@line 1200 "textio.c"
        var $38=$37+24; //@line 1200 "textio.c"
        var $39=HEAP[$38]; //@line 1200 "textio.c"
        var $40=$_py_tmp; //@line 1200 "textio.c"
        FUNCTION_TABLE[$39]($40); //@line 1200 "textio.c"
        __label__ = 5; break; //@line 1200 "textio.c"
      case 5: // $bb4
        var $41=HEAP[__PyIO_empty_bytes]; //@line 1202 "textio.c"
        var $42=$pending; //@line 1202 "textio.c"
        var $43=__PyString_Join($41, $42); //@line 1202 "textio.c"
        $b=$43; //@line 1202 "textio.c"
        var $44=$pending; //@line 1203 "textio.c"
        var $45=$44; //@line 1203 "textio.c"
        var $46=HEAP[$45]; //@line 1203 "textio.c"
        var $47=($46) - 1; //@line 1203 "textio.c"
        var $48=$pending; //@line 1203 "textio.c"
        var $49=$48; //@line 1203 "textio.c"
        HEAP[$49]=$47; //@line 1203 "textio.c"
        var $50=$pending; //@line 1203 "textio.c"
        var $51=$50; //@line 1203 "textio.c"
        var $52=HEAP[$51]; //@line 1203 "textio.c"
        var $53=($52)==0; //@line 1203 "textio.c"
        if ($53) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1203 "textio.c"
      case 6: // $bb5
        var $54=$pending; //@line 1203 "textio.c"
        var $55=$54+4; //@line 1203 "textio.c"
        var $56=HEAP[$55]; //@line 1203 "textio.c"
        var $57=$56+24; //@line 1203 "textio.c"
        var $58=HEAP[$57]; //@line 1203 "textio.c"
        var $59=$pending; //@line 1203 "textio.c"
        FUNCTION_TABLE[$58]($59); //@line 1203 "textio.c"
        __label__ = 7; break; //@line 1203 "textio.c"
      case 7: // $bb6
        var $60=$b; //@line 1204 "textio.c"
        var $61=($60)==0; //@line 1204 "textio.c"
        if ($61) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 1204 "textio.c"
      case 8: // $bb7
        $0=-1; //@line 1205 "textio.c"
        __label__ = 16; break; //@line 1205 "textio.c"
      case 9: // $bb8
        var $62=HEAP[__PyIO_str_write]; //@line 1206 "textio.c"
        var $63=$self_addr; //@line 1206 "textio.c"
        var $64=$63+20; //@line 1206 "textio.c"
        var $65=HEAP[$64]; //@line 1206 "textio.c"
        var $66=$b; //@line 1206 "textio.c"
        var $67=_PyObject_CallMethodObjArgs($65, $62, allocate([$66,0,0,0,0,0,0,0], ["%struct.PyObject*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 1206 "textio.c"
        $ret=$67; //@line 1206 "textio.c"
        var $68=$b; //@line 1208 "textio.c"
        var $69=$68; //@line 1208 "textio.c"
        var $70=HEAP[$69]; //@line 1208 "textio.c"
        var $71=($70) - 1; //@line 1208 "textio.c"
        var $72=$b; //@line 1208 "textio.c"
        var $73=$72; //@line 1208 "textio.c"
        HEAP[$73]=$71; //@line 1208 "textio.c"
        var $74=$b; //@line 1208 "textio.c"
        var $75=$74; //@line 1208 "textio.c"
        var $76=HEAP[$75]; //@line 1208 "textio.c"
        var $77=($76)==0; //@line 1208 "textio.c"
        if ($77) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1208 "textio.c"
      case 10: // $bb9
        var $78=$b; //@line 1208 "textio.c"
        var $79=$78+4; //@line 1208 "textio.c"
        var $80=HEAP[$79]; //@line 1208 "textio.c"
        var $81=$80+24; //@line 1208 "textio.c"
        var $82=HEAP[$81]; //@line 1208 "textio.c"
        var $83=$b; //@line 1208 "textio.c"
        FUNCTION_TABLE[$82]($83); //@line 1208 "textio.c"
        __label__ = 11; break; //@line 1208 "textio.c"
      case 11: // $bb10
        var $84=$ret; //@line 1209 "textio.c"
        var $85=($84)==0; //@line 1209 "textio.c"
        if ($85) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1209 "textio.c"
      case 12: // $bb11
        $0=-1; //@line 1210 "textio.c"
        __label__ = 16; break; //@line 1210 "textio.c"
      case 13: // $bb12
        var $86=$ret; //@line 1211 "textio.c"
        var $87=$86; //@line 1211 "textio.c"
        var $88=HEAP[$87]; //@line 1211 "textio.c"
        var $89=($88) - 1; //@line 1211 "textio.c"
        var $90=$ret; //@line 1211 "textio.c"
        var $91=$90; //@line 1211 "textio.c"
        HEAP[$91]=$89; //@line 1211 "textio.c"
        var $92=$ret; //@line 1211 "textio.c"
        var $93=$92; //@line 1211 "textio.c"
        var $94=HEAP[$93]; //@line 1211 "textio.c"
        var $95=($94)==0; //@line 1211 "textio.c"
        if ($95) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1211 "textio.c"
      case 14: // $bb13
        var $96=$ret; //@line 1211 "textio.c"
        var $97=$96+4; //@line 1211 "textio.c"
        var $98=HEAP[$97]; //@line 1211 "textio.c"
        var $99=$98+24; //@line 1211 "textio.c"
        var $100=HEAP[$99]; //@line 1211 "textio.c"
        var $101=$ret; //@line 1211 "textio.c"
        FUNCTION_TABLE[$100]($101); //@line 1211 "textio.c"
        __label__ = 15; break; //@line 1211 "textio.c"
      case 15: // $bb14
        $0=0; //@line 1212 "textio.c"
        __label__ = 16; break; //@line 1212 "textio.c"
      case 16: // $bb15
        var $102=$0; //@line 1195 "textio.c"
        $retval=$102; //@line 1195 "textio.c"
        var $retval16=$retval; //@line 1195 "textio.c"
        ;
        return $retval16; //@line 1195 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_write($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $ret;
        var $text=__stackBase__;
        var $b;
        var $textlen;
        var $haslf;
        var $needflush;
        var $r;
        var $_res;
        var $newtext;
        var $_py_tmp;
        $self_addr=$self;
        $args_addr=$args;
        $haslf=0; //@line 1222 "textio.c"
        $needflush=0; //@line 1223 "textio.c"
        var $1=$self_addr; //@line 1225 "textio.c"
        var $2=$1+8; //@line 1225 "textio.c"
        var $3=HEAP[$2]; //@line 1225 "textio.c"
        var $4=($3) <= 0; //@line 1225 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 1225 "textio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 1225 "textio.c"
        var $6=$5+12; //@line 1225 "textio.c"
        var $7=HEAP[$6]; //@line 1225 "textio.c"
        var $8=($7)!=0; //@line 1225 "textio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 1225 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1225 "textio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str57433); //@line 1225 "textio.c"
        __label__ = 4; break; //@line 1225 "textio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str58434); //@line 1225 "textio.c"
        __label__ = 4; break; //@line 1225 "textio.c"
      case 4: // $bb3
        $0=0; //@line 1225 "textio.c"
        __label__ = 76; break; //@line 1225 "textio.c"
      case 5: // $bb4
        var $10=$args_addr; //@line 1227 "textio.c"
        var $11=__PyArg_ParseTuple_SizeT($10, __str59435, allocate([$text,0,0,0], ["%struct.PyObject**",0,0,0], ALLOC_STACK)); //@line 1227 "textio.c"
        var $12=($11)==0; //@line 1227 "textio.c"
        if ($12) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1227 "textio.c"
      case 6: // $bb5
        $0=0; //@line 1228 "textio.c"
        __label__ = 76; break; //@line 1228 "textio.c"
      case 7: // $bb6
        var $13=$self_addr; //@line 1231 "textio.c"
        var $14=$13; //@line 1231 "textio.c"
        var $15=$14+4; //@line 1231 "textio.c"
        var $16=HEAP[$15]; //@line 1231 "textio.c"
        var $17=($16)==(_PyTextIOWrapper_Type); //@line 1231 "textio.c"
        var $18=$self_addr; //@line 1231 "textio.c"
        if ($17) { __label__ = 8; break; } else { __label__ = 18; break; } //@line 1231 "textio.c"
      case 8: // $bb7
        var $19=$18+84; //@line 1231 "textio.c"
        var $20=HEAP[$19]; //@line 1231 "textio.c"
        var $21=($20)!=0; //@line 1231 "textio.c"
        var $22=$self_addr; //@line 1231 "textio.c"
        if ($21) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1231 "textio.c"
      case 9: // $bb8
        var $23=$22+84; //@line 1231 "textio.c"
        var $24=HEAP[$23]; //@line 1231 "textio.c"
        var $25=__PyFileIO_closed($24); //@line 1231 "textio.c"
        $r=$25; //@line 1231 "textio.c"
        __lastLabel__ = 9; __label__ = 16; break; //@line 1231 "textio.c"
      case 10: // $bb9
        var $26=_textiowrapper_closed_get($22, 0); //@line 1231 "textio.c"
        $_res=$26; //@line 1231 "textio.c"
        var $27=$_res; //@line 1231 "textio.c"
        var $28=($27)==0; //@line 1231 "textio.c"
        if ($28) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1231 "textio.c"
      case 11: // $bb10
        $0=0; //@line 1231 "textio.c"
        __label__ = 76; break; //@line 1231 "textio.c"
      case 12: // $bb11
        var $29=$_res; //@line 1231 "textio.c"
        var $30=_PyObject_IsTrue($29); //@line 1231 "textio.c"
        $r=$30; //@line 1231 "textio.c"
        var $31=$_res; //@line 1231 "textio.c"
        var $32=$31; //@line 1231 "textio.c"
        var $33=HEAP[$32]; //@line 1231 "textio.c"
        var $34=($33) - 1; //@line 1231 "textio.c"
        var $35=$_res; //@line 1231 "textio.c"
        var $36=$35; //@line 1231 "textio.c"
        HEAP[$36]=$34; //@line 1231 "textio.c"
        var $37=$_res; //@line 1231 "textio.c"
        var $38=$37; //@line 1231 "textio.c"
        var $39=HEAP[$38]; //@line 1231 "textio.c"
        var $40=($39)==0; //@line 1231 "textio.c"
        if ($40) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1231 "textio.c"
      case 13: // $bb12
        var $41=$_res; //@line 1231 "textio.c"
        var $42=$41+4; //@line 1231 "textio.c"
        var $43=HEAP[$42]; //@line 1231 "textio.c"
        var $44=$43+24; //@line 1231 "textio.c"
        var $45=HEAP[$44]; //@line 1231 "textio.c"
        var $46=$_res; //@line 1231 "textio.c"
        FUNCTION_TABLE[$45]($46); //@line 1231 "textio.c"
        __label__ = 14; break; //@line 1231 "textio.c"
      case 14: // $bb13
        var $47=$r; //@line 1231 "textio.c"
        var $48=($47) < 0; //@line 1231 "textio.c"
        if ($48) { __lastLabel__ = 14; __label__ = 15; break; } else { __lastLabel__ = 14; __label__ = 16; break; } //@line 1231 "textio.c"
      case 15: // $bb14
        $0=0; //@line 1231 "textio.c"
        __label__ = 76; break; //@line 1231 "textio.c"
      case 16: // $bb15
        var $49=__lastLabel__ == 14 ? $47 : ($25);
        var $50=($49) > 0; //@line 1231 "textio.c"
        if ($50) { __label__ = 17; break; } else { __label__ = 20; break; } //@line 1231 "textio.c"
      case 17: // $bb16
        var $51=HEAP[_PyExc_ValueError]; //@line 1231 "textio.c"
        _PyErr_SetString($51, __str60436); //@line 1231 "textio.c"
        $0=0; //@line 1231 "textio.c"
        __label__ = 76; break; //@line 1231 "textio.c"
      case 18: // $bb18
        var $52=$18; //@line 1231 "textio.c"
        var $53=__PyIOBase_check_closed($52, __Py_TrueStruct); //@line 1231 "textio.c"
        var $54=($53)==0; //@line 1231 "textio.c"
        if ($54) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 1231 "textio.c"
      case 19: // $bb19
        $0=0; //@line 1231 "textio.c"
        __label__ = 76; break; //@line 1231 "textio.c"
      case 20: // $bb20
        var $55=$self_addr; //@line 1233 "textio.c"
        var $56=$55+28; //@line 1233 "textio.c"
        var $57=HEAP[$56]; //@line 1233 "textio.c"
        var $58=($57)==0; //@line 1233 "textio.c"
        if ($58) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 1233 "textio.c"
      case 21: // $bb21
        var $59=HEAP[_PyExc_IOError]; //@line 1234 "textio.c"
        _PyErr_SetString($59, __str61437); //@line 1234 "textio.c"
        $0=0; //@line 1235 "textio.c"
        __label__ = 76; break; //@line 1235 "textio.c"
      case 22: // $bb22
        var $60=HEAP[$text]; //@line 1238 "textio.c"
        var $61=$60; //@line 1238 "textio.c"
        var $62=HEAP[$61]; //@line 1238 "textio.c"
        var $63=($62) + 1; //@line 1238 "textio.c"
        var $64=$60; //@line 1238 "textio.c"
        HEAP[$64]=$63; //@line 1238 "textio.c"
        var $65=HEAP[$text]; //@line 1240 "textio.c"
        var $66=_PyUnicodeUCS2_GetSize($65); //@line 1240 "textio.c"
        $textlen=$66; //@line 1240 "textio.c"
        var $67=$self_addr; //@line 1242 "textio.c"
        var $68=$67+51; //@line 1242 "textio.c"
        var $69=HEAP[$68]; //@line 1242 "textio.c"
        var $70=($69)==0; //@line 1242 "textio.c"
        if ($70) { __label__ = 24; break; } else { __label__ = 23; break; } //@line 1242 "textio.c"
      case 23: // $bb23
        var $71=$self_addr; //@line 1242 "textio.c"
        var $72=$71+44; //@line 1242 "textio.c"
        var $73=HEAP[$72]; //@line 1242 "textio.c"
        var $74=($73)!=0; //@line 1242 "textio.c"
        if ($74) { __label__ = 25; break; } else { __label__ = 24; break; } //@line 1242 "textio.c"
      case 24: // $bb24
        var $75=$self_addr; //@line 1242 "textio.c"
        var $76=$75+48; //@line 1242 "textio.c"
        var $77=HEAP[$76]; //@line 1242 "textio.c"
        var $78=($77)!=0; //@line 1242 "textio.c"
        if ($78) { __label__ = 25; break; } else { __label__ = 27; break; } //@line 1242 "textio.c"
      case 25: // $bb25
        var $79=HEAP[$text]; //@line 1243 "textio.c"
        var $80=$79; //@line 1243 "textio.c"
        var $81=$80+8; //@line 1243 "textio.c"
        var $82=HEAP[$81]; //@line 1243 "textio.c"
        var $83=HEAP[$text]; //@line 1243 "textio.c"
        var $84=$83; //@line 1243 "textio.c"
        var $85=$84+12; //@line 1243 "textio.c"
        var $86=HEAP[$85]; //@line 1243 "textio.c"
        var $87=_findchar($86, $82, 10); //@line 1243 "textio.c"
        var $88=($87)!=0; //@line 1243 "textio.c"
        if ($88) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 1243 "textio.c"
      case 26: // $bb27_thread
        $haslf=1; //@line 1245 "textio.c"
        __label__ = 28; break;
      case 27: // $bb27
        var $_pr=$haslf;
        var $89=($_pr)!=0; //@line 1247 "textio.c"
        if ($89) { __label__ = 28; break; } else { __label__ = 35; break; } //@line 1247 "textio.c"
      case 28: // $bb28
        var $90=$self_addr; //@line 1247 "textio.c"
        var $91=$90+51; //@line 1247 "textio.c"
        var $92=HEAP[$91]; //@line 1247 "textio.c"
        var $93=($92)!=0; //@line 1247 "textio.c"
        if ($93) { __label__ = 29; break; } else { __label__ = 35; break; } //@line 1247 "textio.c"
      case 29: // $bb29
        var $94=$self_addr; //@line 1247 "textio.c"
        var $95=$94+44; //@line 1247 "textio.c"
        var $96=HEAP[$95]; //@line 1247 "textio.c"
        var $97=($96)!=0; //@line 1247 "textio.c"
        if ($97) { __label__ = 30; break; } else { __label__ = 35; break; } //@line 1247 "textio.c"
      case 30: // $bb30
        var $98=$self_addr; //@line 1249 "textio.c"
        var $99=$98+44; //@line 1249 "textio.c"
        var $100=HEAP[$99]; //@line 1249 "textio.c"
        var $101=HEAP[$text]; //@line 1249 "textio.c"
        var $102=__PyObject_CallMethod_SizeT($101, __str62438, __str27402, allocate([__str25400,0,0,0,$100,0,0,0], ["i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 1249 "textio.c"
        $newtext=$102; //@line 1249 "textio.c"
        var $103=HEAP[$text]; //@line 1250 "textio.c"
        var $104=$103; //@line 1250 "textio.c"
        var $105=HEAP[$104]; //@line 1250 "textio.c"
        var $106=($105) - 1; //@line 1250 "textio.c"
        var $107=$103; //@line 1250 "textio.c"
        HEAP[$107]=$106; //@line 1250 "textio.c"
        var $108=$103; //@line 1250 "textio.c"
        var $109=HEAP[$108]; //@line 1250 "textio.c"
        var $110=($109)==0; //@line 1250 "textio.c"
        if ($110) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 1250 "textio.c"
      case 31: // $bb31
        var $111=HEAP[$text]; //@line 1250 "textio.c"
        var $112=$111+4; //@line 1250 "textio.c"
        var $113=HEAP[$112]; //@line 1250 "textio.c"
        var $114=$113+24; //@line 1250 "textio.c"
        var $115=HEAP[$114]; //@line 1250 "textio.c"
        var $116=HEAP[$text]; //@line 1250 "textio.c"
        FUNCTION_TABLE[$115]($116); //@line 1250 "textio.c"
        __label__ = 32; break; //@line 1250 "textio.c"
      case 32: // $bb32
        var $117=$newtext; //@line 1251 "textio.c"
        var $118=($117)==0; //@line 1251 "textio.c"
        if ($118) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 1251 "textio.c"
      case 33: // $bb33
        $0=0; //@line 1252 "textio.c"
        __label__ = 76; break; //@line 1252 "textio.c"
      case 34: // $bb34
        var $119=$newtext; //@line 1253 "textio.c"
        HEAP[$text]=$119; //@line 1253 "textio.c"
        __label__ = 35; break; //@line 1253 "textio.c"
      case 35: // $bb35
        var $120=$self_addr; //@line 1256 "textio.c"
        var $121=$120+48; //@line 1256 "textio.c"
        var $122=HEAP[$121]; //@line 1256 "textio.c"
        var $123=($122)!=0; //@line 1256 "textio.c"
        if ($123) { __label__ = 36; break; } else { __label__ = 39; break; } //@line 1256 "textio.c"
      case 36: // $bb36
        var $124=$haslf; //@line 1256 "textio.c"
        var $125=($124)!=0; //@line 1256 "textio.c"
        if ($125) { __label__ = 38; break; } else { __label__ = 37; break; } //@line 1256 "textio.c"
      case 37: // $bb37
        var $126=HEAP[$text]; //@line 1256 "textio.c"
        var $127=$126; //@line 1256 "textio.c"
        var $128=$127+8; //@line 1256 "textio.c"
        var $129=HEAP[$128]; //@line 1256 "textio.c"
        var $130=HEAP[$text]; //@line 1256 "textio.c"
        var $131=$130; //@line 1256 "textio.c"
        var $132=$131+12; //@line 1256 "textio.c"
        var $133=HEAP[$132]; //@line 1256 "textio.c"
        var $134=_findchar($133, $129, 13); //@line 1256 "textio.c"
        var $135=($134)!=0; //@line 1256 "textio.c"
        if ($135) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 1256 "textio.c"
      case 38: // $bb38
        $needflush=1; //@line 1260 "textio.c"
        __label__ = 39; break; //@line 1260 "textio.c"
      case 39: // $bb39
        var $136=$self_addr; //@line 1263 "textio.c"
        var $137=$136+56; //@line 1263 "textio.c"
        var $138=HEAP[$137]; //@line 1263 "textio.c"
        var $139=($138)!=0; //@line 1263 "textio.c"
        if ($139) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 1263 "textio.c"
      case 40: // $bb40
        var $140=$self_addr; //@line 1264 "textio.c"
        var $141=$140+56; //@line 1264 "textio.c"
        var $142=HEAP[$141]; //@line 1264 "textio.c"
        var $143=HEAP[$text]; //@line 1264 "textio.c"
        var $144=$self_addr; //@line 1264 "textio.c"
        var $145=$144; //@line 1264 "textio.c"
        var $146=FUNCTION_TABLE[$142]($145, $143); //@line 1264 "textio.c"
        $b=$146; //@line 1264 "textio.c"
        var $147=$self_addr; //@line 1265 "textio.c"
        var $148=$147+60; //@line 1265 "textio.c"
        HEAP[$148]=0; //@line 1265 "textio.c"
        __label__ = 42; break; //@line 1265 "textio.c"
      case 41: // $bb41
        var $149=HEAP[$text]; //@line 1268 "textio.c"
        var $150=HEAP[__PyIO_str_encode]; //@line 1268 "textio.c"
        var $151=$self_addr; //@line 1268 "textio.c"
        var $152=$151+28; //@line 1268 "textio.c"
        var $153=HEAP[$152]; //@line 1268 "textio.c"
        var $154=_PyObject_CallMethodObjArgs($153, $150, allocate([$149,0,0,0,0,0,0,0], ["%struct.PyObject*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 1268 "textio.c"
        $b=$154; //@line 1268 "textio.c"
        __label__ = 42; break; //@line 1268 "textio.c"
      case 42: // $bb42
        var $155=HEAP[$text]; //@line 1270 "textio.c"
        var $156=$155; //@line 1270 "textio.c"
        var $157=HEAP[$156]; //@line 1270 "textio.c"
        var $158=($157) - 1; //@line 1270 "textio.c"
        var $159=$155; //@line 1270 "textio.c"
        HEAP[$159]=$158; //@line 1270 "textio.c"
        var $160=$155; //@line 1270 "textio.c"
        var $161=HEAP[$160]; //@line 1270 "textio.c"
        var $162=($161)==0; //@line 1270 "textio.c"
        if ($162) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 1270 "textio.c"
      case 43: // $bb43
        var $163=HEAP[$text]; //@line 1270 "textio.c"
        var $164=$163+4; //@line 1270 "textio.c"
        var $165=HEAP[$164]; //@line 1270 "textio.c"
        var $166=$165+24; //@line 1270 "textio.c"
        var $167=HEAP[$166]; //@line 1270 "textio.c"
        var $168=HEAP[$text]; //@line 1270 "textio.c"
        FUNCTION_TABLE[$167]($168); //@line 1270 "textio.c"
        __label__ = 44; break; //@line 1270 "textio.c"
      case 44: // $bb44
        var $169=$b; //@line 1271 "textio.c"
        var $170=($169)==0; //@line 1271 "textio.c"
        if ($170) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 1271 "textio.c"
      case 45: // $bb45
        $0=0; //@line 1272 "textio.c"
        __label__ = 76; break; //@line 1272 "textio.c"
      case 46: // $bb46
        var $171=$self_addr; //@line 1274 "textio.c"
        var $172=$171+72; //@line 1274 "textio.c"
        var $173=HEAP[$172]; //@line 1274 "textio.c"
        var $174=($173)==0; //@line 1274 "textio.c"
        if ($174) { __label__ = 47; break; } else { __label__ = 52; break; } //@line 1274 "textio.c"
      case 47: // $bb47
        var $175=_PyList_New(0); //@line 1275 "textio.c"
        var $176=$self_addr; //@line 1275 "textio.c"
        var $177=$176+72; //@line 1275 "textio.c"
        HEAP[$177]=$175; //@line 1275 "textio.c"
        var $178=$self_addr; //@line 1276 "textio.c"
        var $179=$178+72; //@line 1276 "textio.c"
        var $180=HEAP[$179]; //@line 1276 "textio.c"
        var $181=($180)==0; //@line 1276 "textio.c"
        if ($181) { __label__ = 48; break; } else { __label__ = 51; break; } //@line 1276 "textio.c"
      case 48: // $bb48
        var $182=$b; //@line 1277 "textio.c"
        var $183=$182; //@line 1277 "textio.c"
        var $184=HEAP[$183]; //@line 1277 "textio.c"
        var $185=($184) - 1; //@line 1277 "textio.c"
        var $186=$b; //@line 1277 "textio.c"
        var $187=$186; //@line 1277 "textio.c"
        HEAP[$187]=$185; //@line 1277 "textio.c"
        var $188=$b; //@line 1277 "textio.c"
        var $189=$188; //@line 1277 "textio.c"
        var $190=HEAP[$189]; //@line 1277 "textio.c"
        var $191=($190)==0; //@line 1277 "textio.c"
        if ($191) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 1277 "textio.c"
      case 49: // $bb49
        var $192=$b; //@line 1277 "textio.c"
        var $193=$192+4; //@line 1277 "textio.c"
        var $194=HEAP[$193]; //@line 1277 "textio.c"
        var $195=$194+24; //@line 1277 "textio.c"
        var $196=HEAP[$195]; //@line 1277 "textio.c"
        var $197=$b; //@line 1277 "textio.c"
        FUNCTION_TABLE[$196]($197); //@line 1277 "textio.c"
        __label__ = 50; break; //@line 1277 "textio.c"
      case 50: // $bb50
        $0=0; //@line 1278 "textio.c"
        __label__ = 76; break; //@line 1278 "textio.c"
      case 51: // $bb51
        var $198=$self_addr; //@line 1280 "textio.c"
        var $199=$198+76; //@line 1280 "textio.c"
        HEAP[$199]=0; //@line 1280 "textio.c"
        __label__ = 52; break; //@line 1280 "textio.c"
      case 52: // $bb52
        var $200=$self_addr; //@line 1282 "textio.c"
        var $201=$200+72; //@line 1282 "textio.c"
        var $202=HEAP[$201]; //@line 1282 "textio.c"
        var $203=$b; //@line 1282 "textio.c"
        var $204=_PyList_Append($202, $203); //@line 1282 "textio.c"
        var $205=($204) < 0; //@line 1282 "textio.c"
        if ($205) { __label__ = 53; break; } else { __label__ = 56; break; } //@line 1282 "textio.c"
      case 53: // $bb53
        var $206=$b; //@line 1283 "textio.c"
        var $207=$206; //@line 1283 "textio.c"
        var $208=HEAP[$207]; //@line 1283 "textio.c"
        var $209=($208) - 1; //@line 1283 "textio.c"
        var $210=$b; //@line 1283 "textio.c"
        var $211=$210; //@line 1283 "textio.c"
        HEAP[$211]=$209; //@line 1283 "textio.c"
        var $212=$b; //@line 1283 "textio.c"
        var $213=$212; //@line 1283 "textio.c"
        var $214=HEAP[$213]; //@line 1283 "textio.c"
        var $215=($214)==0; //@line 1283 "textio.c"
        if ($215) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 1283 "textio.c"
      case 54: // $bb54
        var $216=$b; //@line 1283 "textio.c"
        var $217=$216+4; //@line 1283 "textio.c"
        var $218=HEAP[$217]; //@line 1283 "textio.c"
        var $219=$218+24; //@line 1283 "textio.c"
        var $220=HEAP[$219]; //@line 1283 "textio.c"
        var $221=$b; //@line 1283 "textio.c"
        FUNCTION_TABLE[$220]($221); //@line 1283 "textio.c"
        __label__ = 55; break; //@line 1283 "textio.c"
      case 55: // $bb55
        $0=0; //@line 1284 "textio.c"
        __label__ = 76; break; //@line 1284 "textio.c"
      case 56: // $bb56
        var $222=$self_addr; //@line 1286 "textio.c"
        var $223=$222+76; //@line 1286 "textio.c"
        var $224=HEAP[$223]; //@line 1286 "textio.c"
        var $225=$b; //@line 1286 "textio.c"
        var $226=$225; //@line 1286 "textio.c"
        var $227=$226+8; //@line 1286 "textio.c"
        var $228=HEAP[$227]; //@line 1286 "textio.c"
        var $229=($228) + ($224); //@line 1286 "textio.c"
        var $230=$self_addr; //@line 1286 "textio.c"
        var $231=$230+76; //@line 1286 "textio.c"
        HEAP[$231]=$229; //@line 1286 "textio.c"
        var $232=$b; //@line 1287 "textio.c"
        var $233=$232; //@line 1287 "textio.c"
        var $234=HEAP[$233]; //@line 1287 "textio.c"
        var $235=($234) - 1; //@line 1287 "textio.c"
        var $236=$b; //@line 1287 "textio.c"
        var $237=$236; //@line 1287 "textio.c"
        HEAP[$237]=$235; //@line 1287 "textio.c"
        var $238=$b; //@line 1287 "textio.c"
        var $239=$238; //@line 1287 "textio.c"
        var $240=HEAP[$239]; //@line 1287 "textio.c"
        var $241=($240)==0; //@line 1287 "textio.c"
        if ($241) { __label__ = 57; break; } else { __label__ = 58; break; } //@line 1287 "textio.c"
      case 57: // $bb57
        var $242=$b; //@line 1287 "textio.c"
        var $243=$242+4; //@line 1287 "textio.c"
        var $244=HEAP[$243]; //@line 1287 "textio.c"
        var $245=$244+24; //@line 1287 "textio.c"
        var $246=HEAP[$245]; //@line 1287 "textio.c"
        var $247=$b; //@line 1287 "textio.c"
        FUNCTION_TABLE[$246]($247); //@line 1287 "textio.c"
        __label__ = 58; break; //@line 1287 "textio.c"
      case 58: // $bb58
        var $248=$self_addr; //@line 1288 "textio.c"
        var $249=$248+76; //@line 1288 "textio.c"
        var $250=HEAP[$249]; //@line 1288 "textio.c"
        var $251=$self_addr; //@line 1288 "textio.c"
        var $252=$251+16; //@line 1288 "textio.c"
        var $253=HEAP[$252]; //@line 1288 "textio.c"
        var $254=($250) > ($253); //@line 1288 "textio.c"
        if ($254) { __label__ = 60; break; } else { __label__ = 59; break; } //@line 1288 "textio.c"
      case 59: // $bb59
        var $255=$needflush; //@line 1288 "textio.c"
        var $256=($255)!=0; //@line 1288 "textio.c"
        if ($256) { __label__ = 60; break; } else { __label__ = 67; break; } //@line 1288 "textio.c"
      case 60: // $bb60
        var $257=$self_addr; //@line 1289 "textio.c"
        var $258=__textiowrapper_writeflush($257); //@line 1289 "textio.c"
        var $259=($258) < 0; //@line 1289 "textio.c"
        if ($259) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 1289 "textio.c"
      case 61: // $bb61
        $0=0; //@line 1290 "textio.c"
        __label__ = 76; break; //@line 1290 "textio.c"
      case 62: // $bb62
        var $_pr1=$needflush;
        var $260=($_pr1)!=0; //@line 1293 "textio.c"
        if ($260) { __label__ = 63; break; } else { __label__ = 67; break; } //@line 1293 "textio.c"
      case 63: // $bb63
        var $261=HEAP[__PyIO_str_flush]; //@line 1294 "textio.c"
        var $262=$self_addr; //@line 1294 "textio.c"
        var $263=$262+20; //@line 1294 "textio.c"
        var $264=HEAP[$263]; //@line 1294 "textio.c"
        var $265=_PyObject_CallMethodObjArgs($264, $261, allocate(4, "i8*", ALLOC_STACK)); //@line 1294 "textio.c"
        $ret=$265; //@line 1294 "textio.c"
        var $266=$ret; //@line 1295 "textio.c"
        var $267=($266)==0; //@line 1295 "textio.c"
        if ($267) { __label__ = 64; break; } else { __label__ = 65; break; } //@line 1295 "textio.c"
      case 64: // $bb64
        $0=0; //@line 1296 "textio.c"
        __label__ = 76; break; //@line 1296 "textio.c"
      case 65: // $bb65
        var $268=$ret; //@line 1297 "textio.c"
        var $269=$268; //@line 1297 "textio.c"
        var $270=HEAP[$269]; //@line 1297 "textio.c"
        var $271=($270) - 1; //@line 1297 "textio.c"
        var $272=$ret; //@line 1297 "textio.c"
        var $273=$272; //@line 1297 "textio.c"
        HEAP[$273]=$271; //@line 1297 "textio.c"
        var $274=$ret; //@line 1297 "textio.c"
        var $275=$274; //@line 1297 "textio.c"
        var $276=HEAP[$275]; //@line 1297 "textio.c"
        var $277=($276)==0; //@line 1297 "textio.c"
        if ($277) { __label__ = 66; break; } else { __label__ = 67; break; } //@line 1297 "textio.c"
      case 66: // $bb66
        var $278=$ret; //@line 1297 "textio.c"
        var $279=$278+4; //@line 1297 "textio.c"
        var $280=HEAP[$279]; //@line 1297 "textio.c"
        var $281=$280+24; //@line 1297 "textio.c"
        var $282=HEAP[$281]; //@line 1297 "textio.c"
        var $283=$ret; //@line 1297 "textio.c"
        FUNCTION_TABLE[$282]($283); //@line 1297 "textio.c"
        __label__ = 67; break; //@line 1297 "textio.c"
      case 67: // $bb67
        var $284=$self_addr; //@line 1300 "textio.c"
        var $285=$284+80; //@line 1300 "textio.c"
        var $286=HEAP[$285]; //@line 1300 "textio.c"
        var $287=($286)!=0; //@line 1300 "textio.c"
        if ($287) { __label__ = 68; break; } else { __label__ = 70; break; } //@line 1300 "textio.c"
      case 68: // $bb68
        var $288=$self_addr; //@line 1300 "textio.c"
        var $289=$288+80; //@line 1300 "textio.c"
        var $290=HEAP[$289]; //@line 1300 "textio.c"
        $_py_tmp=$290; //@line 1300 "textio.c"
        var $291=$self_addr; //@line 1300 "textio.c"
        var $292=$291+80; //@line 1300 "textio.c"
        HEAP[$292]=0; //@line 1300 "textio.c"
        var $293=$_py_tmp; //@line 1300 "textio.c"
        var $294=$293; //@line 1300 "textio.c"
        var $295=HEAP[$294]; //@line 1300 "textio.c"
        var $296=($295) - 1; //@line 1300 "textio.c"
        var $297=$_py_tmp; //@line 1300 "textio.c"
        var $298=$297; //@line 1300 "textio.c"
        HEAP[$298]=$296; //@line 1300 "textio.c"
        var $299=$_py_tmp; //@line 1300 "textio.c"
        var $300=$299; //@line 1300 "textio.c"
        var $301=HEAP[$300]; //@line 1300 "textio.c"
        var $302=($301)==0; //@line 1300 "textio.c"
        if ($302) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 1300 "textio.c"
      case 69: // $bb69
        var $303=$_py_tmp; //@line 1300 "textio.c"
        var $304=$303+4; //@line 1300 "textio.c"
        var $305=HEAP[$304]; //@line 1300 "textio.c"
        var $306=$305+24; //@line 1300 "textio.c"
        var $307=HEAP[$306]; //@line 1300 "textio.c"
        var $308=$_py_tmp; //@line 1300 "textio.c"
        FUNCTION_TABLE[$307]($308); //@line 1300 "textio.c"
        __label__ = 70; break; //@line 1300 "textio.c"
      case 70: // $bb70
        var $309=$self_addr; //@line 1302 "textio.c"
        var $310=$309+32; //@line 1302 "textio.c"
        var $311=HEAP[$310]; //@line 1302 "textio.c"
        var $312=($311)!=0; //@line 1302 "textio.c"
        if ($312) { __label__ = 71; break; } else { __label__ = 75; break; } //@line 1302 "textio.c"
      case 71: // $bb71
        var $313=$self_addr; //@line 1303 "textio.c"
        var $314=$313+32; //@line 1303 "textio.c"
        var $315=HEAP[$314]; //@line 1303 "textio.c"
        var $316=__PyObject_CallMethod_SizeT($315, __str31406, 0, allocate(1, "i32", ALLOC_STACK)); //@line 1303 "textio.c"
        $ret=$316; //@line 1303 "textio.c"
        var $317=$ret; //@line 1304 "textio.c"
        var $318=($317)==0; //@line 1304 "textio.c"
        if ($318) { __label__ = 72; break; } else { __label__ = 73; break; } //@line 1304 "textio.c"
      case 72: // $bb72
        $0=0; //@line 1305 "textio.c"
        __label__ = 76; break; //@line 1305 "textio.c"
      case 73: // $bb73
        var $319=$ret; //@line 1306 "textio.c"
        var $320=$319; //@line 1306 "textio.c"
        var $321=HEAP[$320]; //@line 1306 "textio.c"
        var $322=($321) - 1; //@line 1306 "textio.c"
        var $323=$ret; //@line 1306 "textio.c"
        var $324=$323; //@line 1306 "textio.c"
        HEAP[$324]=$322; //@line 1306 "textio.c"
        var $325=$ret; //@line 1306 "textio.c"
        var $326=$325; //@line 1306 "textio.c"
        var $327=HEAP[$326]; //@line 1306 "textio.c"
        var $328=($327)==0; //@line 1306 "textio.c"
        if ($328) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 1306 "textio.c"
      case 74: // $bb74
        var $329=$ret; //@line 1306 "textio.c"
        var $330=$329+4; //@line 1306 "textio.c"
        var $331=HEAP[$330]; //@line 1306 "textio.c"
        var $332=$331+24; //@line 1306 "textio.c"
        var $333=HEAP[$332]; //@line 1306 "textio.c"
        var $334=$ret; //@line 1306 "textio.c"
        FUNCTION_TABLE[$333]($334); //@line 1306 "textio.c"
        __label__ = 75; break; //@line 1306 "textio.c"
      case 75: // $bb75
        var $335=$textlen; //@line 1309 "textio.c"
        var $336=_PyLong_FromSsize_t($335); //@line 1309 "textio.c"
        $0=$336; //@line 1309 "textio.c"
        __label__ = 76; break; //@line 1309 "textio.c"
      case 76: // $bb76
        var $337=$0; //@line 1225 "textio.c"
        $retval=$337; //@line 1225 "textio.c"
        var $retval77=$retval; //@line 1225 "textio.c"
        STACKTOP = __stackBase__;
        return $retval77; //@line 1225 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_set_decoded_chars($self, $chars) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $chars_addr;
        var $_py_tmp;
        $self_addr=$self;
        $chars_addr=$chars;
        var $0=$self_addr; //@line 1317 "textio.c"
        var $1=$0+64; //@line 1317 "textio.c"
        var $2=HEAP[$1]; //@line 1317 "textio.c"
        var $3=($2)!=0; //@line 1317 "textio.c"
        if ($3) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 1317 "textio.c"
      case 1: // $bb
        var $4=$self_addr; //@line 1317 "textio.c"
        var $5=$4+64; //@line 1317 "textio.c"
        var $6=HEAP[$5]; //@line 1317 "textio.c"
        $_py_tmp=$6; //@line 1317 "textio.c"
        var $7=$self_addr; //@line 1317 "textio.c"
        var $8=$7+64; //@line 1317 "textio.c"
        HEAP[$8]=0; //@line 1317 "textio.c"
        var $9=$_py_tmp; //@line 1317 "textio.c"
        var $10=$9; //@line 1317 "textio.c"
        var $11=HEAP[$10]; //@line 1317 "textio.c"
        var $12=($11) - 1; //@line 1317 "textio.c"
        var $13=$_py_tmp; //@line 1317 "textio.c"
        var $14=$13; //@line 1317 "textio.c"
        HEAP[$14]=$12; //@line 1317 "textio.c"
        var $15=$_py_tmp; //@line 1317 "textio.c"
        var $16=$15; //@line 1317 "textio.c"
        var $17=HEAP[$16]; //@line 1317 "textio.c"
        var $18=($17)==0; //@line 1317 "textio.c"
        if ($18) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1317 "textio.c"
      case 2: // $bb1
        var $19=$_py_tmp; //@line 1317 "textio.c"
        var $20=$19+4; //@line 1317 "textio.c"
        var $21=HEAP[$20]; //@line 1317 "textio.c"
        var $22=$21+24; //@line 1317 "textio.c"
        var $23=HEAP[$22]; //@line 1317 "textio.c"
        var $24=$_py_tmp; //@line 1317 "textio.c"
        FUNCTION_TABLE[$23]($24); //@line 1317 "textio.c"
        __label__ = 3; break; //@line 1317 "textio.c"
      case 3: // $bb2
        var $25=$self_addr; //@line 1318 "textio.c"
        var $26=$25+64; //@line 1318 "textio.c"
        var $27=$chars_addr; //@line 1318 "textio.c"
        HEAP[$26]=$27; //@line 1318 "textio.c"
        var $28=$self_addr; //@line 1319 "textio.c"
        var $29=$28+68; //@line 1319 "textio.c"
        HEAP[$29]=0; //@line 1319 "textio.c"
        ;
        return; //@line 1320 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_get_decoded_chars($self, $n) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $n_addr;
        var $retval;
        var $0;
        var $chars;
        var $avail;
        $self_addr=$self;
        $n_addr=$n;
        var $1=$self_addr; //@line 1328 "textio.c"
        var $2=$1+64; //@line 1328 "textio.c"
        var $3=HEAP[$2]; //@line 1328 "textio.c"
        var $4=($3)==0; //@line 1328 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1328 "textio.c"
      case 1: // $bb
        var $5=_PyUnicodeUCS2_FromStringAndSize(0, 0); //@line 1329 "textio.c"
        $0=$5; //@line 1329 "textio.c"
        __label__ = 13; break; //@line 1329 "textio.c"
      case 2: // $bb1
        var $6=$self_addr; //@line 1331 "textio.c"
        var $7=$6+64; //@line 1331 "textio.c"
        var $8=HEAP[$7]; //@line 1331 "textio.c"
        var $9=$8; //@line 1331 "textio.c"
        var $10=$9+8; //@line 1331 "textio.c"
        var $11=HEAP[$10]; //@line 1331 "textio.c"
        var $12=$self_addr; //@line 1331 "textio.c"
        var $13=$12+68; //@line 1331 "textio.c"
        var $14=HEAP[$13]; //@line 1331 "textio.c"
        var $15=($11) - ($14); //@line 1331 "textio.c"
        $avail=$15; //@line 1331 "textio.c"
        var $16=$avail; //@line 1334 "textio.c"
        var $17=($16) < 0; //@line 1334 "textio.c"
        if ($17) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1334 "textio.c"
      case 3: // $bb2
        ___assert_fail(__str63439, __str15390, 1334, ___PRETTY_FUNCTION___10189); //@line 1334 "textio.c"
        throw "Reached an unreachable!" //@line 1334 "textio.c"
      case 4: // $bb3
        var $18=$n_addr; //@line 1336 "textio.c"
        var $19=($18) < 0; //@line 1336 "textio.c"
        if ($19) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 1336 "textio.c"
      case 5: // $bb4
        var $20=$n_addr; //@line 1336 "textio.c"
        var $21=$avail; //@line 1336 "textio.c"
        var $22=($20) > ($21); //@line 1336 "textio.c"
        if ($22) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1336 "textio.c"
      case 6: // $bb5
        var $23=$avail; //@line 1337 "textio.c"
        $n_addr=$23; //@line 1337 "textio.c"
        __label__ = 7; break; //@line 1337 "textio.c"
      case 7: // $bb6
        var $24=$self_addr; //@line 1339 "textio.c"
        var $25=$24+68; //@line 1339 "textio.c"
        var $26=HEAP[$25]; //@line 1339 "textio.c"
        var $27=($26) > 0; //@line 1339 "textio.c"
        if ($27) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 1339 "textio.c"
      case 8: // $bb7
        var $28=$n_addr; //@line 1339 "textio.c"
        var $29=$avail; //@line 1339 "textio.c"
        var $30=($28) < ($29); //@line 1339 "textio.c"
        if ($30) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 1339 "textio.c"
      case 9: // $bb8
        var $31=$self_addr; //@line 1340 "textio.c"
        var $32=$31+64; //@line 1340 "textio.c"
        var $33=HEAP[$32]; //@line 1340 "textio.c"
        var $34=$33; //@line 1340 "textio.c"
        var $35=$34+12; //@line 1340 "textio.c"
        var $36=HEAP[$35]; //@line 1340 "textio.c"
        var $37=$self_addr; //@line 1340 "textio.c"
        var $38=$37+68; //@line 1340 "textio.c"
        var $39=HEAP[$38]; //@line 1340 "textio.c"
        var $40=$36+2*$39; //@line 1340 "textio.c"
        var $41=$n_addr; //@line 1340 "textio.c"
        var $42=_PyUnicodeUCS2_FromUnicode($40, $41); //@line 1340 "textio.c"
        $chars=$42; //@line 1340 "textio.c"
        var $43=($42)==0; //@line 1343 "textio.c"
        if ($43) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 1343 "textio.c"
      case 10: // $bb9
        $0=0; //@line 1344 "textio.c"
        __label__ = 13; break; //@line 1344 "textio.c"
      case 11: // $bb11
        var $44=$self_addr; //@line 1347 "textio.c"
        var $45=$44+64; //@line 1347 "textio.c"
        var $46=HEAP[$45]; //@line 1347 "textio.c"
        $chars=$46; //@line 1347 "textio.c"
        var $47=$chars; //@line 1348 "textio.c"
        var $48=$47; //@line 1348 "textio.c"
        var $49=HEAP[$48]; //@line 1348 "textio.c"
        var $50=($49) + 1; //@line 1348 "textio.c"
        var $51=$chars; //@line 1348 "textio.c"
        var $52=$51; //@line 1348 "textio.c"
        HEAP[$52]=$50; //@line 1348 "textio.c"
        __label__ = 12; break; //@line 1348 "textio.c"
      case 12: // $bb12
        var $53=$self_addr; //@line 1351 "textio.c"
        var $54=$53+68; //@line 1351 "textio.c"
        var $55=HEAP[$54]; //@line 1351 "textio.c"
        var $56=$n_addr; //@line 1351 "textio.c"
        var $57=($56) + ($55); //@line 1351 "textio.c"
        var $58=$self_addr; //@line 1351 "textio.c"
        var $59=$58+68; //@line 1351 "textio.c"
        HEAP[$59]=$57; //@line 1351 "textio.c"
        var $60=$chars; //@line 1352 "textio.c"
        $0=$60; //@line 1352 "textio.c"
        __label__ = 13; break; //@line 1352 "textio.c"
      case 13: // $bb13
        var $61=$0; //@line 1329 "textio.c"
        $retval=$61; //@line 1329 "textio.c"
        var $retval14=$retval; //@line 1329 "textio.c"
        ;
        return $retval14; //@line 1329 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_read_chunk($self) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $iftmp_189;
        var $0;
        var $dec_buffer=__stackBase__;
        var $dec_flags=__stackBase__+4;
        var $input_chunk;
        var $decoded_chars;
        var $chunk_size;
        var $eof;
        var $state;
        var $next_input;
        var $_py_tmp;
        $self_addr=$self;
        HEAP[$dec_buffer]=0; //@line 1360 "textio.c"
        HEAP[$dec_flags]=0; //@line 1361 "textio.c"
        $input_chunk=0; //@line 1362 "textio.c"
        var $1=$self_addr; //@line 1372 "textio.c"
        var $2=$1+32; //@line 1372 "textio.c"
        var $3=HEAP[$2]; //@line 1372 "textio.c"
        var $4=($3)==0; //@line 1372 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1372 "textio.c"
      case 1: // $bb
        var $5=HEAP[_PyExc_IOError]; //@line 1373 "textio.c"
        _PyErr_SetString($5, __str64440); //@line 1373 "textio.c"
        $0=-1; //@line 1374 "textio.c"
        __label__ = 49; break; //@line 1374 "textio.c"
      case 2: // $bb1
        var $6=$self_addr; //@line 1377 "textio.c"
        var $7=$6+53; //@line 1377 "textio.c"
        var $8=HEAP[$7]; //@line 1377 "textio.c"
        var $9=($8)!=0; //@line 1377 "textio.c"
        if ($9) { __label__ = 3; break; } else { __label__ = 11; break; } //@line 1377 "textio.c"
      case 3: // $bb2
        var $10=HEAP[__PyIO_str_getstate]; //@line 1383 "textio.c"
        var $11=$self_addr; //@line 1383 "textio.c"
        var $12=$11+32; //@line 1383 "textio.c"
        var $13=HEAP[$12]; //@line 1383 "textio.c"
        var $14=_PyObject_CallMethodObjArgs($13, $10, allocate(4, "i8*", ALLOC_STACK)); //@line 1383 "textio.c"
        $state=$14; //@line 1383 "textio.c"
        var $15=$state; //@line 1384 "textio.c"
        var $16=($15)==0; //@line 1384 "textio.c"
        if ($16) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1384 "textio.c"
      case 4: // $bb3
        $0=-1; //@line 1385 "textio.c"
        __label__ = 49; break; //@line 1385 "textio.c"
      case 5: // $bb4
        var $17=$state; //@line 1389 "textio.c"
        var $18=__PyArg_Parse_SizeT($17, __str65441, allocate([$dec_buffer,0,0,0,$dec_flags,0,0,0], ["%struct.PyObject**",0,0,0,"%struct.PyObject**",0,0,0], ALLOC_STACK)); //@line 1389 "textio.c"
        var $19=($18) < 0; //@line 1389 "textio.c"
        if ($19) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 1389 "textio.c"
      case 6: // $bb5
        var $20=$state; //@line 1390 "textio.c"
        var $21=$20; //@line 1390 "textio.c"
        var $22=HEAP[$21]; //@line 1390 "textio.c"
        var $23=($22) - 1; //@line 1390 "textio.c"
        var $24=$state; //@line 1390 "textio.c"
        var $25=$24; //@line 1390 "textio.c"
        HEAP[$25]=$23; //@line 1390 "textio.c"
        var $26=$state; //@line 1390 "textio.c"
        var $27=$26; //@line 1390 "textio.c"
        var $28=HEAP[$27]; //@line 1390 "textio.c"
        var $29=($28)==0; //@line 1390 "textio.c"
        if ($29) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1390 "textio.c"
      case 7: // $bb6
        var $30=$state; //@line 1390 "textio.c"
        var $31=$30+4; //@line 1390 "textio.c"
        var $32=HEAP[$31]; //@line 1390 "textio.c"
        var $33=$32+24; //@line 1390 "textio.c"
        var $34=HEAP[$33]; //@line 1390 "textio.c"
        var $35=$state; //@line 1390 "textio.c"
        FUNCTION_TABLE[$34]($35); //@line 1390 "textio.c"
        __label__ = 8; break; //@line 1390 "textio.c"
      case 8: // $bb7
        $0=-1; //@line 1391 "textio.c"
        __label__ = 49; break; //@line 1391 "textio.c"
      case 9: // $bb8
        var $36=HEAP[$dec_buffer]; //@line 1393 "textio.c"
        var $37=$36; //@line 1393 "textio.c"
        var $38=HEAP[$37]; //@line 1393 "textio.c"
        var $39=($38) + 1; //@line 1393 "textio.c"
        var $40=$36; //@line 1393 "textio.c"
        HEAP[$40]=$39; //@line 1393 "textio.c"
        var $41=HEAP[$dec_flags]; //@line 1394 "textio.c"
        var $42=$41; //@line 1394 "textio.c"
        var $43=HEAP[$42]; //@line 1394 "textio.c"
        var $44=($43) + 1; //@line 1394 "textio.c"
        var $45=$41; //@line 1394 "textio.c"
        HEAP[$45]=$44; //@line 1394 "textio.c"
        var $46=$state; //@line 1395 "textio.c"
        var $47=$46; //@line 1395 "textio.c"
        var $48=HEAP[$47]; //@line 1395 "textio.c"
        var $49=($48) - 1; //@line 1395 "textio.c"
        var $50=$state; //@line 1395 "textio.c"
        var $51=$50; //@line 1395 "textio.c"
        HEAP[$51]=$49; //@line 1395 "textio.c"
        var $52=$state; //@line 1395 "textio.c"
        var $53=$52; //@line 1395 "textio.c"
        var $54=HEAP[$53]; //@line 1395 "textio.c"
        var $55=($54)==0; //@line 1395 "textio.c"
        if ($55) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1395 "textio.c"
      case 10: // $bb9
        var $56=$state; //@line 1395 "textio.c"
        var $57=$56+4; //@line 1395 "textio.c"
        var $58=HEAP[$57]; //@line 1395 "textio.c"
        var $59=$58+24; //@line 1395 "textio.c"
        var $60=HEAP[$59]; //@line 1395 "textio.c"
        var $61=$state; //@line 1395 "textio.c"
        FUNCTION_TABLE[$60]($61); //@line 1395 "textio.c"
        __label__ = 11; break; //@line 1395 "textio.c"
      case 11: // $bb10
        var $62=$self_addr; //@line 1399 "textio.c"
        var $63=$62+16; //@line 1399 "textio.c"
        var $64=HEAP[$63]; //@line 1399 "textio.c"
        var $65=_PyLong_FromSsize_t($64); //@line 1399 "textio.c"
        $chunk_size=$65; //@line 1399 "textio.c"
        var $66=($65)==0; //@line 1400 "textio.c"
        if ($66) { __label__ = 39; break; } else { __label__ = 12; break; } //@line 1400 "textio.c"
      case 12: // $bb11
        var $67=HEAP[__PyIO_str_read1]; //@line 1402 "textio.c"
        var $68=$self_addr; //@line 1402 "textio.c"
        var $69=$68+20; //@line 1402 "textio.c"
        var $70=HEAP[$69]; //@line 1402 "textio.c"
        var $71=$chunk_size; //@line 1402 "textio.c"
        var $72=_PyObject_CallMethodObjArgs($70, $67, allocate([$71,0,0,0,0,0,0,0], ["%struct.PyObject*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 1402 "textio.c"
        $input_chunk=$72; //@line 1402 "textio.c"
        var $73=$chunk_size; //@line 1404 "textio.c"
        var $74=$73; //@line 1404 "textio.c"
        var $75=HEAP[$74]; //@line 1404 "textio.c"
        var $76=($75) - 1; //@line 1404 "textio.c"
        var $77=$chunk_size; //@line 1404 "textio.c"
        var $78=$77; //@line 1404 "textio.c"
        HEAP[$78]=$76; //@line 1404 "textio.c"
        var $79=$chunk_size; //@line 1404 "textio.c"
        var $80=$79; //@line 1404 "textio.c"
        var $81=HEAP[$80]; //@line 1404 "textio.c"
        var $82=($81)==0; //@line 1404 "textio.c"
        if ($82) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1404 "textio.c"
      case 13: // $bb12
        var $83=$chunk_size; //@line 1404 "textio.c"
        var $84=$83+4; //@line 1404 "textio.c"
        var $85=HEAP[$84]; //@line 1404 "textio.c"
        var $86=$85+24; //@line 1404 "textio.c"
        var $87=HEAP[$86]; //@line 1404 "textio.c"
        var $88=$chunk_size; //@line 1404 "textio.c"
        FUNCTION_TABLE[$87]($88); //@line 1404 "textio.c"
        __label__ = 14; break; //@line 1404 "textio.c"
      case 14: // $bb13
        var $89=$input_chunk; //@line 1405 "textio.c"
        var $90=($89)==0; //@line 1405 "textio.c"
        if ($90) { __label__ = 39; break; } else { __label__ = 15; break; } //@line 1405 "textio.c"
      case 15: // $bb14
        var $91=$input_chunk; //@line 1407 "textio.c"
        var $92=$91+4; //@line 1407 "textio.c"
        var $93=HEAP[$92]; //@line 1407 "textio.c"
        var $94=$93+84; //@line 1407 "textio.c"
        var $95=HEAP[$94]; //@line 1407 "textio.c"
        var $96=($95) & 134217728; //@line 1407 "textio.c"
        var $97=($96)==0; //@line 1407 "textio.c"
        if ($97) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 1407 "textio.c"
      case 16: // $bb15
        ___assert_fail(__str66442, __str15390, 1407, ___PRETTY_FUNCTION___10233); //@line 1407 "textio.c"
        throw "Reached an unreachable!" //@line 1407 "textio.c"
      case 17: // $bb16
        var $98=$input_chunk; //@line 1409 "textio.c"
        var $99=_PyString_Size($98); //@line 1409 "textio.c"
        var $100=($99)==0; //@line 1409 "textio.c"
        var $101=($100); //@line 1409 "textio.c"
        $eof=$101; //@line 1409 "textio.c"
        var $102=$self_addr; //@line 1411 "textio.c"
        var $103=$102+32; //@line 1411 "textio.c"
        var $104=HEAP[$103]; //@line 1411 "textio.c"
        var $105=$104+4; //@line 1411 "textio.c"
        var $106=HEAP[$105]; //@line 1411 "textio.c"
        var $107=($106)==(_PyIncrementalNewlineDecoder_Type); //@line 1411 "textio.c"
        if ($107) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 1411 "textio.c"
      case 18: // $bb17
        var $108=$self_addr; //@line 1412 "textio.c"
        var $109=$108+32; //@line 1412 "textio.c"
        var $110=HEAP[$109]; //@line 1412 "textio.c"
        var $111=$input_chunk; //@line 1412 "textio.c"
        var $112=$eof; //@line 1412 "textio.c"
        var $113=__PyIncrementalNewlineDecoder_decode($110, $111, $112); //@line 1412 "textio.c"
        $decoded_chars=$113; //@line 1412 "textio.c"
        __lastLabel__ = 18; __label__ = 23; break; //@line 1412 "textio.c"
      case 19: // $bb18
        var $114=$eof; //@line 1416 "textio.c"
        var $115=($114)!=0; //@line 1416 "textio.c"
        if ($115) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 1416 "textio.c"
      case 20: // $bb19
        $iftmp_189=__Py_TrueStruct; //@line 1416 "textio.c"
        __label__ = 22; break; //@line 1416 "textio.c"
      case 21: // $bb20
        $iftmp_189=__Py_ZeroStruct; //@line 1416 "textio.c"
        __label__ = 22; break; //@line 1416 "textio.c"
      case 22: // $bb21
        var $116=HEAP[__PyIO_str_decode]; //@line 1416 "textio.c"
        var $117=$self_addr; //@line 1416 "textio.c"
        var $118=$117+32; //@line 1416 "textio.c"
        var $119=HEAP[$118]; //@line 1416 "textio.c"
        var $120=$input_chunk; //@line 1416 "textio.c"
        var $121=$iftmp_189; //@line 1416 "textio.c"
        var $122=_PyObject_CallMethodObjArgs($119, $116, allocate([$120,0,0,0,$121,0,0,0,0,0,0,0], ["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 1416 "textio.c"
        $decoded_chars=$122; //@line 1416 "textio.c"
        __lastLabel__ = 22; __label__ = 23; break; //@line 1416 "textio.c"
      case 23: // $bb22
        var $123=__lastLabel__ == 22 ? $122 : ($113);
        var $124=($123)==0; //@line 1421 "textio.c"
        if ($124) { __label__ = 39; break; } else { __label__ = 24; break; } //@line 1421 "textio.c"
      case 24: // $bb23
        var $125=$self_addr; //@line 1423 "textio.c"
        var $126=$decoded_chars; //@line 1423 "textio.c"
        _textiowrapper_set_decoded_chars($125, $126); //@line 1423 "textio.c"
        var $127=$decoded_chars; //@line 1424 "textio.c"
        var $128=$127; //@line 1424 "textio.c"
        var $129=$128+8; //@line 1424 "textio.c"
        var $130=HEAP[$129]; //@line 1424 "textio.c"
        var $131=($130) > 0; //@line 1424 "textio.c"
        if ($131) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 1424 "textio.c"
      case 25: // $bb24
        $eof=0; //@line 1425 "textio.c"
        __label__ = 26; break; //@line 1425 "textio.c"
      case 26: // $bb25
        var $132=$self_addr; //@line 1427 "textio.c"
        var $133=$132+53; //@line 1427 "textio.c"
        var $134=HEAP[$133]; //@line 1427 "textio.c"
        var $135=($134)!=0; //@line 1427 "textio.c"
        if ($135) { __label__ = 27; break; } else { __label__ = 36; break; } //@line 1427 "textio.c"
      case 27: // $bb26
        var $136=HEAP[$dec_buffer]; //@line 1431 "textio.c"
        var $137=$input_chunk; //@line 1431 "textio.c"
        var $138=_PyNumber_Add($136, $137); //@line 1431 "textio.c"
        $next_input=$138; //@line 1431 "textio.c"
        var $139=$next_input; //@line 1432 "textio.c"
        var $140=($139)==0; //@line 1432 "textio.c"
        if ($140) { __label__ = 39; break; } else { __label__ = 28; break; } //@line 1432 "textio.c"
      case 28: // $bb27
        var $141=$next_input; //@line 1434 "textio.c"
        var $142=$141+4; //@line 1434 "textio.c"
        var $143=HEAP[$142]; //@line 1434 "textio.c"
        var $144=$143+84; //@line 1434 "textio.c"
        var $145=HEAP[$144]; //@line 1434 "textio.c"
        var $146=($145) & 134217728; //@line 1434 "textio.c"
        var $147=($146)==0; //@line 1434 "textio.c"
        if ($147) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 1434 "textio.c"
      case 29: // $bb28
        ___assert_fail(__str67443, __str15390, 1434, ___PRETTY_FUNCTION___10233); //@line 1434 "textio.c"
        throw "Reached an unreachable!" //@line 1434 "textio.c"
      case 30: // $bb29
        var $148=HEAP[$dec_buffer]; //@line 1435 "textio.c"
        var $149=$148; //@line 1435 "textio.c"
        var $150=HEAP[$149]; //@line 1435 "textio.c"
        var $151=($150) - 1; //@line 1435 "textio.c"
        var $152=$148; //@line 1435 "textio.c"
        HEAP[$152]=$151; //@line 1435 "textio.c"
        var $153=$148; //@line 1435 "textio.c"
        var $154=HEAP[$153]; //@line 1435 "textio.c"
        var $155=($154)==0; //@line 1435 "textio.c"
        if ($155) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 1435 "textio.c"
      case 31: // $bb30
        var $156=HEAP[$dec_buffer]; //@line 1435 "textio.c"
        var $157=$156+4; //@line 1435 "textio.c"
        var $158=HEAP[$157]; //@line 1435 "textio.c"
        var $159=$158+24; //@line 1435 "textio.c"
        var $160=HEAP[$159]; //@line 1435 "textio.c"
        var $161=HEAP[$dec_buffer]; //@line 1435 "textio.c"
        FUNCTION_TABLE[$160]($161); //@line 1435 "textio.c"
        __label__ = 32; break; //@line 1435 "textio.c"
      case 32: // $bb31
        var $162=$self_addr; //@line 1436 "textio.c"
        var $163=$162+80; //@line 1436 "textio.c"
        var $164=HEAP[$163]; //@line 1436 "textio.c"
        var $165=($164)!=0; //@line 1436 "textio.c"
        if ($165) { __label__ = 33; break; } else { __label__ = 35; break; } //@line 1436 "textio.c"
      case 33: // $bb32
        var $166=$self_addr; //@line 1436 "textio.c"
        var $167=$166+80; //@line 1436 "textio.c"
        var $168=HEAP[$167]; //@line 1436 "textio.c"
        $_py_tmp=$168; //@line 1436 "textio.c"
        var $169=$self_addr; //@line 1436 "textio.c"
        var $170=$169+80; //@line 1436 "textio.c"
        HEAP[$170]=0; //@line 1436 "textio.c"
        var $171=$_py_tmp; //@line 1436 "textio.c"
        var $172=$171; //@line 1436 "textio.c"
        var $173=HEAP[$172]; //@line 1436 "textio.c"
        var $174=($173) - 1; //@line 1436 "textio.c"
        var $175=$_py_tmp; //@line 1436 "textio.c"
        var $176=$175; //@line 1436 "textio.c"
        HEAP[$176]=$174; //@line 1436 "textio.c"
        var $177=$_py_tmp; //@line 1436 "textio.c"
        var $178=$177; //@line 1436 "textio.c"
        var $179=HEAP[$178]; //@line 1436 "textio.c"
        var $180=($179)==0; //@line 1436 "textio.c"
        if ($180) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 1436 "textio.c"
      case 34: // $bb33
        var $181=$_py_tmp; //@line 1436 "textio.c"
        var $182=$181+4; //@line 1436 "textio.c"
        var $183=HEAP[$182]; //@line 1436 "textio.c"
        var $184=$183+24; //@line 1436 "textio.c"
        var $185=HEAP[$184]; //@line 1436 "textio.c"
        var $186=$_py_tmp; //@line 1436 "textio.c"
        FUNCTION_TABLE[$185]($186); //@line 1436 "textio.c"
        __label__ = 35; break; //@line 1436 "textio.c"
      case 35: // $bb34
        var $187=HEAP[$dec_flags]; //@line 1437 "textio.c"
        var $188=$next_input; //@line 1437 "textio.c"
        var $189=__Py_BuildValue_SizeT(__str68444, allocate([$187,0,0,0,$188,0,0,0], ["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 1437 "textio.c"
        var $190=$self_addr; //@line 1437 "textio.c"
        var $191=$190+80; //@line 1437 "textio.c"
        HEAP[$191]=$189; //@line 1437 "textio.c"
        __label__ = 36; break; //@line 1437 "textio.c"
      case 36: // $bb35
        var $192=$input_chunk; //@line 1439 "textio.c"
        var $193=$192; //@line 1439 "textio.c"
        var $194=HEAP[$193]; //@line 1439 "textio.c"
        var $195=($194) - 1; //@line 1439 "textio.c"
        var $196=$input_chunk; //@line 1439 "textio.c"
        var $197=$196; //@line 1439 "textio.c"
        HEAP[$197]=$195; //@line 1439 "textio.c"
        var $198=$input_chunk; //@line 1439 "textio.c"
        var $199=$198; //@line 1439 "textio.c"
        var $200=HEAP[$199]; //@line 1439 "textio.c"
        var $201=($200)==0; //@line 1439 "textio.c"
        if ($201) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 1439 "textio.c"
      case 37: // $bb36
        var $202=$input_chunk; //@line 1439 "textio.c"
        var $203=$202+4; //@line 1439 "textio.c"
        var $204=HEAP[$203]; //@line 1439 "textio.c"
        var $205=$204+24; //@line 1439 "textio.c"
        var $206=HEAP[$205]; //@line 1439 "textio.c"
        var $207=$input_chunk; //@line 1439 "textio.c"
        FUNCTION_TABLE[$206]($207); //@line 1439 "textio.c"
        __label__ = 38; break; //@line 1439 "textio.c"
      case 38: // $bb37
        var $208=$eof; //@line 1441 "textio.c"
        var $209=($208)==0; //@line 1441 "textio.c"
        var $210=($209); //@line 1441 "textio.c"
        $0=$210; //@line 1441 "textio.c"
        __label__ = 49; break; //@line 1441 "textio.c"
      case 39: // $fail
        var $211=HEAP[$dec_buffer]; //@line 1444 "textio.c"
        var $212=($211)!=0; //@line 1444 "textio.c"
        if ($212) { __label__ = 40; break; } else { __label__ = 42; break; } //@line 1444 "textio.c"
      case 40: // $bb38
        var $213=HEAP[$dec_buffer]; //@line 1444 "textio.c"
        var $214=$213; //@line 1444 "textio.c"
        var $215=HEAP[$214]; //@line 1444 "textio.c"
        var $216=($215) - 1; //@line 1444 "textio.c"
        var $217=$213; //@line 1444 "textio.c"
        HEAP[$217]=$216; //@line 1444 "textio.c"
        var $218=$213; //@line 1444 "textio.c"
        var $219=HEAP[$218]; //@line 1444 "textio.c"
        var $220=($219)==0; //@line 1444 "textio.c"
        if ($220) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 1444 "textio.c"
      case 41: // $bb39
        var $221=HEAP[$dec_buffer]; //@line 1444 "textio.c"
        var $222=$221+4; //@line 1444 "textio.c"
        var $223=HEAP[$222]; //@line 1444 "textio.c"
        var $224=$223+24; //@line 1444 "textio.c"
        var $225=HEAP[$224]; //@line 1444 "textio.c"
        var $226=HEAP[$dec_buffer]; //@line 1444 "textio.c"
        FUNCTION_TABLE[$225]($226); //@line 1444 "textio.c"
        __label__ = 42; break; //@line 1444 "textio.c"
      case 42: // $bb40
        var $227=HEAP[$dec_flags]; //@line 1445 "textio.c"
        var $228=($227)!=0; //@line 1445 "textio.c"
        if ($228) { __label__ = 43; break; } else { __label__ = 45; break; } //@line 1445 "textio.c"
      case 43: // $bb41
        var $229=HEAP[$dec_flags]; //@line 1445 "textio.c"
        var $230=$229; //@line 1445 "textio.c"
        var $231=HEAP[$230]; //@line 1445 "textio.c"
        var $232=($231) - 1; //@line 1445 "textio.c"
        var $233=$229; //@line 1445 "textio.c"
        HEAP[$233]=$232; //@line 1445 "textio.c"
        var $234=$229; //@line 1445 "textio.c"
        var $235=HEAP[$234]; //@line 1445 "textio.c"
        var $236=($235)==0; //@line 1445 "textio.c"
        if ($236) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 1445 "textio.c"
      case 44: // $bb42
        var $237=HEAP[$dec_flags]; //@line 1445 "textio.c"
        var $238=$237+4; //@line 1445 "textio.c"
        var $239=HEAP[$238]; //@line 1445 "textio.c"
        var $240=$239+24; //@line 1445 "textio.c"
        var $241=HEAP[$240]; //@line 1445 "textio.c"
        var $242=HEAP[$dec_flags]; //@line 1445 "textio.c"
        FUNCTION_TABLE[$241]($242); //@line 1445 "textio.c"
        __label__ = 45; break; //@line 1445 "textio.c"
      case 45: // $bb43
        var $243=$input_chunk; //@line 1446 "textio.c"
        var $244=($243)!=0; //@line 1446 "textio.c"
        if ($244) { __label__ = 46; break; } else { __label__ = 48; break; } //@line 1446 "textio.c"
      case 46: // $bb44
        var $245=$input_chunk; //@line 1446 "textio.c"
        var $246=$245; //@line 1446 "textio.c"
        var $247=HEAP[$246]; //@line 1446 "textio.c"
        var $248=($247) - 1; //@line 1446 "textio.c"
        var $249=$input_chunk; //@line 1446 "textio.c"
        var $250=$249; //@line 1446 "textio.c"
        HEAP[$250]=$248; //@line 1446 "textio.c"
        var $251=$input_chunk; //@line 1446 "textio.c"
        var $252=$251; //@line 1446 "textio.c"
        var $253=HEAP[$252]; //@line 1446 "textio.c"
        var $254=($253)==0; //@line 1446 "textio.c"
        if ($254) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 1446 "textio.c"
      case 47: // $bb45
        var $255=$input_chunk; //@line 1446 "textio.c"
        var $256=$255+4; //@line 1446 "textio.c"
        var $257=HEAP[$256]; //@line 1446 "textio.c"
        var $258=$257+24; //@line 1446 "textio.c"
        var $259=HEAP[$258]; //@line 1446 "textio.c"
        var $260=$input_chunk; //@line 1446 "textio.c"
        FUNCTION_TABLE[$259]($260); //@line 1446 "textio.c"
        __label__ = 48; break; //@line 1446 "textio.c"
      case 48: // $bb46
        $0=-1; //@line 1447 "textio.c"
        __label__ = 49; break; //@line 1447 "textio.c"
      case 49: // $bb47
        var $261=$0; //@line 1374 "textio.c"
        $retval=$261; //@line 1374 "textio.c"
        var $retval48=$retval; //@line 1374 "textio.c"
        STACKTOP = __stackBase__;
        return $retval48; //@line 1374 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_read($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $n=__stackBase__;
        var $result;
        var $chunks;
        var $r;
        var $_res;
        var $bytes;
        var $decoded;
        var $final;
        var $_py_tmp;
        var $res;
        var $remaining;
        var $_py_tmp59;
        var $_py_tmp64;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$n]=-1; //@line 1453 "textio.c"
        $result=0; //@line 1454 "textio.c"
        $chunks=0; //@line 1454 "textio.c"
        var $1=$self_addr; //@line 1456 "textio.c"
        var $2=$1+8; //@line 1456 "textio.c"
        var $3=HEAP[$2]; //@line 1456 "textio.c"
        var $4=($3) <= 0; //@line 1456 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 1456 "textio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 1456 "textio.c"
        var $6=$5+12; //@line 1456 "textio.c"
        var $7=HEAP[$6]; //@line 1456 "textio.c"
        var $8=($7)!=0; //@line 1456 "textio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 1456 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1456 "textio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str57433); //@line 1456 "textio.c"
        __label__ = 4; break; //@line 1456 "textio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str58434); //@line 1456 "textio.c"
        __label__ = 4; break; //@line 1456 "textio.c"
      case 4: // $bb3
        $0=0; //@line 1456 "textio.c"
        __label__ = 72; break; //@line 1456 "textio.c"
      case 5: // $bb4
        var $10=$args_addr; //@line 1458 "textio.c"
        var $11=__PyArg_ParseTuple_SizeT($10, __str21, allocate([(FUNCTION_TABLE_OFFSET + 2),0,0,0,$n,0,0,0], ["i32 (%struct.PyObject*, i8*)*",0,0,0,"i32*",0,0,0], ALLOC_STACK)); //@line 1458 "textio.c"
        var $12=($11)==0; //@line 1458 "textio.c"
        if ($12) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1458 "textio.c"
      case 6: // $bb5
        $0=0; //@line 1459 "textio.c"
        __label__ = 72; break; //@line 1459 "textio.c"
      case 7: // $bb6
        var $13=$self_addr; //@line 1461 "textio.c"
        var $14=$13; //@line 1461 "textio.c"
        var $15=$14+4; //@line 1461 "textio.c"
        var $16=HEAP[$15]; //@line 1461 "textio.c"
        var $17=($16)==(_PyTextIOWrapper_Type); //@line 1461 "textio.c"
        var $18=$self_addr; //@line 1461 "textio.c"
        if ($17) { __label__ = 8; break; } else { __label__ = 18; break; } //@line 1461 "textio.c"
      case 8: // $bb7
        var $19=$18+84; //@line 1461 "textio.c"
        var $20=HEAP[$19]; //@line 1461 "textio.c"
        var $21=($20)!=0; //@line 1461 "textio.c"
        var $22=$self_addr; //@line 1461 "textio.c"
        if ($21) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1461 "textio.c"
      case 9: // $bb8
        var $23=$22+84; //@line 1461 "textio.c"
        var $24=HEAP[$23]; //@line 1461 "textio.c"
        var $25=__PyFileIO_closed($24); //@line 1461 "textio.c"
        $r=$25; //@line 1461 "textio.c"
        __lastLabel__ = 9; __label__ = 16; break; //@line 1461 "textio.c"
      case 10: // $bb9
        var $26=_textiowrapper_closed_get($22, 0); //@line 1461 "textio.c"
        $_res=$26; //@line 1461 "textio.c"
        var $27=$_res; //@line 1461 "textio.c"
        var $28=($27)==0; //@line 1461 "textio.c"
        if ($28) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1461 "textio.c"
      case 11: // $bb10
        $0=0; //@line 1461 "textio.c"
        __label__ = 72; break; //@line 1461 "textio.c"
      case 12: // $bb11
        var $29=$_res; //@line 1461 "textio.c"
        var $30=_PyObject_IsTrue($29); //@line 1461 "textio.c"
        $r=$30; //@line 1461 "textio.c"
        var $31=$_res; //@line 1461 "textio.c"
        var $32=$31; //@line 1461 "textio.c"
        var $33=HEAP[$32]; //@line 1461 "textio.c"
        var $34=($33) - 1; //@line 1461 "textio.c"
        var $35=$_res; //@line 1461 "textio.c"
        var $36=$35; //@line 1461 "textio.c"
        HEAP[$36]=$34; //@line 1461 "textio.c"
        var $37=$_res; //@line 1461 "textio.c"
        var $38=$37; //@line 1461 "textio.c"
        var $39=HEAP[$38]; //@line 1461 "textio.c"
        var $40=($39)==0; //@line 1461 "textio.c"
        if ($40) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1461 "textio.c"
      case 13: // $bb12
        var $41=$_res; //@line 1461 "textio.c"
        var $42=$41+4; //@line 1461 "textio.c"
        var $43=HEAP[$42]; //@line 1461 "textio.c"
        var $44=$43+24; //@line 1461 "textio.c"
        var $45=HEAP[$44]; //@line 1461 "textio.c"
        var $46=$_res; //@line 1461 "textio.c"
        FUNCTION_TABLE[$45]($46); //@line 1461 "textio.c"
        __label__ = 14; break; //@line 1461 "textio.c"
      case 14: // $bb13
        var $47=$r; //@line 1461 "textio.c"
        var $48=($47) < 0; //@line 1461 "textio.c"
        if ($48) { __lastLabel__ = 14; __label__ = 15; break; } else { __lastLabel__ = 14; __label__ = 16; break; } //@line 1461 "textio.c"
      case 15: // $bb14
        $0=0; //@line 1461 "textio.c"
        __label__ = 72; break; //@line 1461 "textio.c"
      case 16: // $bb15
        var $49=__lastLabel__ == 14 ? $47 : ($25);
        var $50=($49) > 0; //@line 1461 "textio.c"
        if ($50) { __label__ = 17; break; } else { __label__ = 20; break; } //@line 1461 "textio.c"
      case 17: // $bb16
        var $51=HEAP[_PyExc_ValueError]; //@line 1461 "textio.c"
        _PyErr_SetString($51, __str60436); //@line 1461 "textio.c"
        $0=0; //@line 1461 "textio.c"
        __label__ = 72; break; //@line 1461 "textio.c"
      case 18: // $bb18
        var $52=$18; //@line 1461 "textio.c"
        var $53=__PyIOBase_check_closed($52, __Py_TrueStruct); //@line 1461 "textio.c"
        var $54=($53)==0; //@line 1461 "textio.c"
        if ($54) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 1461 "textio.c"
      case 19: // $bb19
        $0=0; //@line 1461 "textio.c"
        __label__ = 72; break; //@line 1461 "textio.c"
      case 20: // $bb20
        var $55=$self_addr; //@line 1463 "textio.c"
        var $56=$55+32; //@line 1463 "textio.c"
        var $57=HEAP[$56]; //@line 1463 "textio.c"
        var $58=($57)==0; //@line 1463 "textio.c"
        if ($58) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 1463 "textio.c"
      case 21: // $bb21
        var $59=HEAP[_PyExc_IOError]; //@line 1464 "textio.c"
        _PyErr_SetString($59, __str64440); //@line 1464 "textio.c"
        $0=0; //@line 1465 "textio.c"
        __label__ = 72; break; //@line 1465 "textio.c"
      case 22: // $bb22
        var $60=$self_addr; //@line 1468 "textio.c"
        var $61=__textiowrapper_writeflush($60); //@line 1468 "textio.c"
        var $62=($61) < 0; //@line 1468 "textio.c"
        if ($62) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 1468 "textio.c"
      case 23: // $bb23
        $0=0; //@line 1469 "textio.c"
        __label__ = 72; break; //@line 1469 "textio.c"
      case 24: // $bb24
        var $63=HEAP[$n]; //@line 1471 "textio.c"
        var $64=($63) < 0; //@line 1471 "textio.c"
        if ($64) { __label__ = 25; break; } else { __label__ = 42; break; } //@line 1471 "textio.c"
      case 25: // $bb25
        var $65=$self_addr; //@line 1473 "textio.c"
        var $66=$65+20; //@line 1473 "textio.c"
        var $67=HEAP[$66]; //@line 1473 "textio.c"
        var $68=__PyObject_CallMethod_SizeT($67, __str1375, 0, allocate(1, "i32", ALLOC_STACK)); //@line 1473 "textio.c"
        $bytes=$68; //@line 1473 "textio.c"
        var $69=$bytes; //@line 1475 "textio.c"
        var $70=($69)==0; //@line 1475 "textio.c"
        if ($70) { __label__ = 65; break; } else { __label__ = 26; break; } //@line 1475 "textio.c"
      case 26: // $bb26
        var $71=HEAP[__PyIO_str_decode]; //@line 1477 "textio.c"
        var $72=$self_addr; //@line 1477 "textio.c"
        var $73=$72+32; //@line 1477 "textio.c"
        var $74=HEAP[$73]; //@line 1477 "textio.c"
        var $75=$bytes; //@line 1477 "textio.c"
        var $76=_PyObject_CallMethodObjArgs($74, $71, allocate([$75,0,0,0,__Py_TrueStruct,0,0,0,0,0,0,0], ["%struct.PyObject*",0,0,0,"%struct.PyObject*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 1477 "textio.c"
        $decoded=$76; //@line 1477 "textio.c"
        var $77=$bytes; //@line 1479 "textio.c"
        var $78=$77; //@line 1479 "textio.c"
        var $79=HEAP[$78]; //@line 1479 "textio.c"
        var $80=($79) - 1; //@line 1479 "textio.c"
        var $81=$bytes; //@line 1479 "textio.c"
        var $82=$81; //@line 1479 "textio.c"
        HEAP[$82]=$80; //@line 1479 "textio.c"
        var $83=$bytes; //@line 1479 "textio.c"
        var $84=$83; //@line 1479 "textio.c"
        var $85=HEAP[$84]; //@line 1479 "textio.c"
        var $86=($85)==0; //@line 1479 "textio.c"
        if ($86) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 1479 "textio.c"
      case 27: // $bb27
        var $87=$bytes; //@line 1479 "textio.c"
        var $88=$87+4; //@line 1479 "textio.c"
        var $89=HEAP[$88]; //@line 1479 "textio.c"
        var $90=$89+24; //@line 1479 "textio.c"
        var $91=HEAP[$90]; //@line 1479 "textio.c"
        var $92=$bytes; //@line 1479 "textio.c"
        FUNCTION_TABLE[$91]($92); //@line 1479 "textio.c"
        __label__ = 28; break; //@line 1479 "textio.c"
      case 28: // $bb28
        var $93=$decoded; //@line 1480 "textio.c"
        var $94=($93)==0; //@line 1480 "textio.c"
        if ($94) { __label__ = 65; break; } else { __label__ = 29; break; } //@line 1480 "textio.c"
      case 29: // $bb29
        var $95=$self_addr; //@line 1483 "textio.c"
        var $96=_textiowrapper_get_decoded_chars($95, -1); //@line 1483 "textio.c"
        $result=$96; //@line 1483 "textio.c"
        var $97=$result; //@line 1485 "textio.c"
        var $98=($97)==0; //@line 1485 "textio.c"
        if ($98) { __label__ = 30; break; } else { __label__ = 33; break; } //@line 1485 "textio.c"
      case 30: // $bb30
        var $99=$decoded; //@line 1486 "textio.c"
        var $100=$99; //@line 1486 "textio.c"
        var $101=HEAP[$100]; //@line 1486 "textio.c"
        var $102=($101) - 1; //@line 1486 "textio.c"
        var $103=$decoded; //@line 1486 "textio.c"
        var $104=$103; //@line 1486 "textio.c"
        HEAP[$104]=$102; //@line 1486 "textio.c"
        var $105=$decoded; //@line 1486 "textio.c"
        var $106=$105; //@line 1486 "textio.c"
        var $107=HEAP[$106]; //@line 1486 "textio.c"
        var $108=($107)==0; //@line 1486 "textio.c"
        if ($108) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 1486 "textio.c"
      case 31: // $bb31
        var $109=$decoded; //@line 1486 "textio.c"
        var $110=$109+4; //@line 1486 "textio.c"
        var $111=HEAP[$110]; //@line 1486 "textio.c"
        var $112=$111+24; //@line 1486 "textio.c"
        var $113=HEAP[$112]; //@line 1486 "textio.c"
        var $114=$decoded; //@line 1486 "textio.c"
        FUNCTION_TABLE[$113]($114); //@line 1486 "textio.c"
        __label__ = 32; break; //@line 1486 "textio.c"
      case 32: // $bb32
        $0=0; //@line 1487 "textio.c"
        __label__ = 72; break; //@line 1487 "textio.c"
      case 33: // $bb33
        var $115=$result; //@line 1490 "textio.c"
        var $116=$decoded; //@line 1490 "textio.c"
        var $117=_PyUnicodeUCS2_Concat($115, $116); //@line 1490 "textio.c"
        $final=$117; //@line 1490 "textio.c"
        var $118=$result; //@line 1491 "textio.c"
        var $119=$118; //@line 1491 "textio.c"
        var $120=HEAP[$119]; //@line 1491 "textio.c"
        var $121=($120) - 1; //@line 1491 "textio.c"
        var $122=$result; //@line 1491 "textio.c"
        var $123=$122; //@line 1491 "textio.c"
        HEAP[$123]=$121; //@line 1491 "textio.c"
        var $124=$result; //@line 1491 "textio.c"
        var $125=$124; //@line 1491 "textio.c"
        var $126=HEAP[$125]; //@line 1491 "textio.c"
        var $127=($126)==0; //@line 1491 "textio.c"
        if ($127) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 1491 "textio.c"
      case 34: // $bb34
        var $128=$result; //@line 1491 "textio.c"
        var $129=$128+4; //@line 1491 "textio.c"
        var $130=HEAP[$129]; //@line 1491 "textio.c"
        var $131=$130+24; //@line 1491 "textio.c"
        var $132=HEAP[$131]; //@line 1491 "textio.c"
        var $133=$result; //@line 1491 "textio.c"
        FUNCTION_TABLE[$132]($133); //@line 1491 "textio.c"
        __label__ = 35; break; //@line 1491 "textio.c"
      case 35: // $bb35
        var $134=$decoded; //@line 1492 "textio.c"
        var $135=$134; //@line 1492 "textio.c"
        var $136=HEAP[$135]; //@line 1492 "textio.c"
        var $137=($136) - 1; //@line 1492 "textio.c"
        var $138=$decoded; //@line 1492 "textio.c"
        var $139=$138; //@line 1492 "textio.c"
        HEAP[$139]=$137; //@line 1492 "textio.c"
        var $140=$decoded; //@line 1492 "textio.c"
        var $141=$140; //@line 1492 "textio.c"
        var $142=HEAP[$141]; //@line 1492 "textio.c"
        var $143=($142)==0; //@line 1492 "textio.c"
        if ($143) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 1492 "textio.c"
      case 36: // $bb36
        var $144=$decoded; //@line 1492 "textio.c"
        var $145=$144+4; //@line 1492 "textio.c"
        var $146=HEAP[$145]; //@line 1492 "textio.c"
        var $147=$146+24; //@line 1492 "textio.c"
        var $148=HEAP[$147]; //@line 1492 "textio.c"
        var $149=$decoded; //@line 1492 "textio.c"
        FUNCTION_TABLE[$148]($149); //@line 1492 "textio.c"
        __label__ = 37; break; //@line 1492 "textio.c"
      case 37: // $bb37
        var $150=$final; //@line 1493 "textio.c"
        var $151=($150)==0; //@line 1493 "textio.c"
        if ($151) { __label__ = 65; break; } else { __label__ = 38; break; } //@line 1493 "textio.c"
      case 38: // $bb38
        var $152=$self_addr; //@line 1496 "textio.c"
        var $153=$152+80; //@line 1496 "textio.c"
        var $154=HEAP[$153]; //@line 1496 "textio.c"
        var $155=($154)!=0; //@line 1496 "textio.c"
        if ($155) { __label__ = 39; break; } else { __label__ = 41; break; } //@line 1496 "textio.c"
      case 39: // $bb39
        var $156=$self_addr; //@line 1496 "textio.c"
        var $157=$156+80; //@line 1496 "textio.c"
        var $158=HEAP[$157]; //@line 1496 "textio.c"
        $_py_tmp=$158; //@line 1496 "textio.c"
        var $159=$self_addr; //@line 1496 "textio.c"
        var $160=$159+80; //@line 1496 "textio.c"
        HEAP[$160]=0; //@line 1496 "textio.c"
        var $161=$_py_tmp; //@line 1496 "textio.c"
        var $162=$161; //@line 1496 "textio.c"
        var $163=HEAP[$162]; //@line 1496 "textio.c"
        var $164=($163) - 1; //@line 1496 "textio.c"
        var $165=$_py_tmp; //@line 1496 "textio.c"
        var $166=$165; //@line 1496 "textio.c"
        HEAP[$166]=$164; //@line 1496 "textio.c"
        var $167=$_py_tmp; //@line 1496 "textio.c"
        var $168=$167; //@line 1496 "textio.c"
        var $169=HEAP[$168]; //@line 1496 "textio.c"
        var $170=($169)==0; //@line 1496 "textio.c"
        if ($170) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 1496 "textio.c"
      case 40: // $bb40
        var $171=$_py_tmp; //@line 1496 "textio.c"
        var $172=$171+4; //@line 1496 "textio.c"
        var $173=HEAP[$172]; //@line 1496 "textio.c"
        var $174=$173+24; //@line 1496 "textio.c"
        var $175=HEAP[$174]; //@line 1496 "textio.c"
        var $176=$_py_tmp; //@line 1496 "textio.c"
        FUNCTION_TABLE[$175]($176); //@line 1496 "textio.c"
        __label__ = 41; break; //@line 1496 "textio.c"
      case 41: // $bb41
        var $177=$final; //@line 1497 "textio.c"
        $0=$177; //@line 1497 "textio.c"
        __label__ = 72; break; //@line 1497 "textio.c"
      case 42: // $bb42
        $res=1; //@line 1500 "textio.c"
        var $178=HEAP[$n]; //@line 1501 "textio.c"
        $remaining=$178; //@line 1501 "textio.c"
        var $179=HEAP[$n]; //@line 1503 "textio.c"
        var $180=$self_addr; //@line 1503 "textio.c"
        var $181=_textiowrapper_get_decoded_chars($180, $179); //@line 1503 "textio.c"
        $result=$181; //@line 1503 "textio.c"
        var $182=$result; //@line 1504 "textio.c"
        var $183=($182)==0; //@line 1504 "textio.c"
        if ($183) { __label__ = 68; break; } else { __label__ = 43; break; } //@line 1504 "textio.c"
      case 43: // $bb43
        var $184=$result; //@line 1506 "textio.c"
        var $185=$184; //@line 1506 "textio.c"
        var $186=$185+8; //@line 1506 "textio.c"
        var $187=HEAP[$186]; //@line 1506 "textio.c"
        var $188=$remaining; //@line 1506 "textio.c"
        var $189=($188) - ($187); //@line 1506 "textio.c"
        $remaining=$189; //@line 1506 "textio.c"
        __lastLabel__ = 43; __label__ = 53; break; //@line 1506 "textio.c"
      case 44: // $bb44
        var $190=$self_addr; //@line 1510 "textio.c"
        var $191=_textiowrapper_read_chunk($190); //@line 1510 "textio.c"
        $res=$191; //@line 1510 "textio.c"
        var $192=$res; //@line 1511 "textio.c"
        var $193=($192) < 0; //@line 1511 "textio.c"
        if ($193) { __label__ = 65; break; } else { __label__ = 45; break; } //@line 1511 "textio.c"
      case 45: // $bb45
        var $194=$res; //@line 1513 "textio.c"
        var $195=($194)==0; //@line 1513 "textio.c"
        if ($195) { __label__ = 54; break; } else { __label__ = 46; break; } //@line 1513 "textio.c"
      case 46: // $bb46
        var $196=$chunks; //@line 1515 "textio.c"
        var $197=($196)==0; //@line 1515 "textio.c"
        if ($197) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 1515 "textio.c"
      case 47: // $bb47
        var $198=_PyList_New(0); //@line 1516 "textio.c"
        $chunks=$198; //@line 1516 "textio.c"
        var $199=$chunks; //@line 1517 "textio.c"
        var $200=($199)==0; //@line 1517 "textio.c"
        if ($200) { __label__ = 65; break; } else { __label__ = 48; break; } //@line 1517 "textio.c"
      case 48: // $bb48
        var $201=$chunks; //@line 1520 "textio.c"
        var $202=$result; //@line 1520 "textio.c"
        var $203=_PyList_Append($201, $202); //@line 1520 "textio.c"
        var $204=($203) < 0; //@line 1520 "textio.c"
        if ($204) { __label__ = 65; break; } else { __label__ = 49; break; } //@line 1520 "textio.c"
      case 49: // $bb49
        var $205=$result; //@line 1522 "textio.c"
        var $206=$205; //@line 1522 "textio.c"
        var $207=HEAP[$206]; //@line 1522 "textio.c"
        var $208=($207) - 1; //@line 1522 "textio.c"
        var $209=$result; //@line 1522 "textio.c"
        var $210=$209; //@line 1522 "textio.c"
        HEAP[$210]=$208; //@line 1522 "textio.c"
        var $211=$result; //@line 1522 "textio.c"
        var $212=$211; //@line 1522 "textio.c"
        var $213=HEAP[$212]; //@line 1522 "textio.c"
        var $214=($213)==0; //@line 1522 "textio.c"
        if ($214) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 1522 "textio.c"
      case 50: // $bb50
        var $215=$result; //@line 1522 "textio.c"
        var $216=$215+4; //@line 1522 "textio.c"
        var $217=HEAP[$216]; //@line 1522 "textio.c"
        var $218=$217+24; //@line 1522 "textio.c"
        var $219=HEAP[$218]; //@line 1522 "textio.c"
        var $220=$result; //@line 1522 "textio.c"
        FUNCTION_TABLE[$219]($220); //@line 1522 "textio.c"
        __label__ = 51; break; //@line 1522 "textio.c"
      case 51: // $bb51
        var $221=$self_addr; //@line 1523 "textio.c"
        var $222=$remaining; //@line 1523 "textio.c"
        var $223=_textiowrapper_get_decoded_chars($221, $222); //@line 1523 "textio.c"
        $result=$223; //@line 1523 "textio.c"
        var $224=($223)==0; //@line 1524 "textio.c"
        if ($224) { __label__ = 68; break; } else { __label__ = 52; break; } //@line 1524 "textio.c"
      case 52: // $bb52
        var $225=$result; //@line 1526 "textio.c"
        var $226=$225; //@line 1526 "textio.c"
        var $227=$226+8; //@line 1526 "textio.c"
        var $228=HEAP[$227]; //@line 1526 "textio.c"
        var $229=$remaining; //@line 1526 "textio.c"
        var $230=($229) - ($228); //@line 1526 "textio.c"
        $remaining=$230; //@line 1526 "textio.c"
        __lastLabel__ = 52; __label__ = 53; break; //@line 1526 "textio.c"
      case 53: // $bb53
        var $231=__lastLabel__ == 52 ? $230 : ($189);
        var $232=($231) > 0; //@line 1509 "textio.c"
        if ($232) { __label__ = 44; break; } else { __label__ = 54; break; } //@line 1509 "textio.c"
      case 54: // $bb54
        var $233=$chunks; //@line 1528 "textio.c"
        var $234=($233)!=0; //@line 1528 "textio.c"
        if ($234) { __label__ = 55; break; } else { __label__ = 64; break; } //@line 1528 "textio.c"
      case 55: // $bb55
        var $235=$result; //@line 1529 "textio.c"
        var $236=($235)!=0; //@line 1529 "textio.c"
        if ($236) { __label__ = 56; break; } else { __label__ = 60; break; } //@line 1529 "textio.c"
      case 56: // $bb56
        var $237=$chunks; //@line 1529 "textio.c"
        var $238=$result; //@line 1529 "textio.c"
        var $239=_PyList_Append($237, $238); //@line 1529 "textio.c"
        var $240=($239) < 0; //@line 1529 "textio.c"
        if ($240) { __label__ = 65; break; } else { __label__ = 57; break; } //@line 1529 "textio.c"
      case 57: // $bb57
        var $_pr=$result;
        var $241=($_pr)!=0; //@line 1531 "textio.c"
        if ($241) { __label__ = 58; break; } else { __label__ = 60; break; } //@line 1531 "textio.c"
      case 58: // $bb58
        var $242=$result; //@line 1531 "textio.c"
        $_py_tmp59=$242; //@line 1531 "textio.c"
        $result=0; //@line 1531 "textio.c"
        var $243=$_py_tmp59; //@line 1531 "textio.c"
        var $244=$243; //@line 1531 "textio.c"
        var $245=HEAP[$244]; //@line 1531 "textio.c"
        var $246=($245) - 1; //@line 1531 "textio.c"
        var $247=$_py_tmp59; //@line 1531 "textio.c"
        var $248=$247; //@line 1531 "textio.c"
        HEAP[$248]=$246; //@line 1531 "textio.c"
        var $249=$_py_tmp59; //@line 1531 "textio.c"
        var $250=$249; //@line 1531 "textio.c"
        var $251=HEAP[$250]; //@line 1531 "textio.c"
        var $252=($251)==0; //@line 1531 "textio.c"
        if ($252) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 1531 "textio.c"
      case 59: // $bb60
        var $253=$_py_tmp59; //@line 1531 "textio.c"
        var $254=$253+4; //@line 1531 "textio.c"
        var $255=HEAP[$254]; //@line 1531 "textio.c"
        var $256=$255+24; //@line 1531 "textio.c"
        var $257=HEAP[$256]; //@line 1531 "textio.c"
        var $258=$_py_tmp59; //@line 1531 "textio.c"
        FUNCTION_TABLE[$257]($258); //@line 1531 "textio.c"
        __label__ = 60; break; //@line 1531 "textio.c"
      case 60: // $bb61
        var $259=HEAP[__PyIO_empty_str]; //@line 1532 "textio.c"
        var $260=$chunks; //@line 1532 "textio.c"
        var $261=_PyUnicodeUCS2_Join($259, $260); //@line 1532 "textio.c"
        $result=$261; //@line 1532 "textio.c"
        var $262=($261)==0; //@line 1533 "textio.c"
        if ($262) { __label__ = 68; break; } else { __label__ = 61; break; } //@line 1533 "textio.c"
      case 61: // $bb62
        var $263=$chunks; //@line 1535 "textio.c"
        var $264=($263)!=0; //@line 1535 "textio.c"
        if ($264) { __label__ = 62; break; } else { __label__ = 64; break; } //@line 1535 "textio.c"
      case 62: // $bb63
        var $265=$chunks; //@line 1535 "textio.c"
        $_py_tmp64=$265; //@line 1535 "textio.c"
        $chunks=0; //@line 1535 "textio.c"
        var $266=$_py_tmp64; //@line 1535 "textio.c"
        var $267=$266; //@line 1535 "textio.c"
        var $268=HEAP[$267]; //@line 1535 "textio.c"
        var $269=($268) - 1; //@line 1535 "textio.c"
        var $270=$_py_tmp64; //@line 1535 "textio.c"
        var $271=$270; //@line 1535 "textio.c"
        HEAP[$271]=$269; //@line 1535 "textio.c"
        var $272=$_py_tmp64; //@line 1535 "textio.c"
        var $273=$272; //@line 1535 "textio.c"
        var $274=HEAP[$273]; //@line 1535 "textio.c"
        var $275=($274)==0; //@line 1535 "textio.c"
        if ($275) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 1535 "textio.c"
      case 63: // $bb65
        var $276=$_py_tmp64; //@line 1535 "textio.c"
        var $277=$276+4; //@line 1535 "textio.c"
        var $278=HEAP[$277]; //@line 1535 "textio.c"
        var $279=$278+24; //@line 1535 "textio.c"
        var $280=HEAP[$279]; //@line 1535 "textio.c"
        var $281=$_py_tmp64; //@line 1535 "textio.c"
        FUNCTION_TABLE[$280]($281); //@line 1535 "textio.c"
        __label__ = 64; break; //@line 1535 "textio.c"
      case 64: // $bb66
        var $282=$result; //@line 1537 "textio.c"
        $0=$282; //@line 1537 "textio.c"
        __label__ = 72; break; //@line 1537 "textio.c"
      case 65: // $fail
        var $_pr1=$result;
        var $283=($_pr1)!=0; //@line 1540 "textio.c"
        if ($283) { __label__ = 66; break; } else { __label__ = 68; break; } //@line 1540 "textio.c"
      case 66: // $bb67
        var $284=$result; //@line 1540 "textio.c"
        var $285=$284; //@line 1540 "textio.c"
        var $286=HEAP[$285]; //@line 1540 "textio.c"
        var $287=($286) - 1; //@line 1540 "textio.c"
        var $288=$result; //@line 1540 "textio.c"
        var $289=$288; //@line 1540 "textio.c"
        HEAP[$289]=$287; //@line 1540 "textio.c"
        var $290=$result; //@line 1540 "textio.c"
        var $291=$290; //@line 1540 "textio.c"
        var $292=HEAP[$291]; //@line 1540 "textio.c"
        var $293=($292)==0; //@line 1540 "textio.c"
        if ($293) { __label__ = 67; break; } else { __label__ = 68; break; } //@line 1540 "textio.c"
      case 67: // $bb68
        var $294=$result; //@line 1540 "textio.c"
        var $295=$294+4; //@line 1540 "textio.c"
        var $296=HEAP[$295]; //@line 1540 "textio.c"
        var $297=$296+24; //@line 1540 "textio.c"
        var $298=HEAP[$297]; //@line 1540 "textio.c"
        var $299=$result; //@line 1540 "textio.c"
        FUNCTION_TABLE[$298]($299); //@line 1540 "textio.c"
        __label__ = 68; break; //@line 1540 "textio.c"
      case 68: // $bb69
        var $300=$chunks; //@line 1541 "textio.c"
        var $301=($300)!=0; //@line 1541 "textio.c"
        if ($301) { __label__ = 69; break; } else { __label__ = 71; break; } //@line 1541 "textio.c"
      case 69: // $bb70
        var $302=$chunks; //@line 1541 "textio.c"
        var $303=$302; //@line 1541 "textio.c"
        var $304=HEAP[$303]; //@line 1541 "textio.c"
        var $305=($304) - 1; //@line 1541 "textio.c"
        var $306=$chunks; //@line 1541 "textio.c"
        var $307=$306; //@line 1541 "textio.c"
        HEAP[$307]=$305; //@line 1541 "textio.c"
        var $308=$chunks; //@line 1541 "textio.c"
        var $309=$308; //@line 1541 "textio.c"
        var $310=HEAP[$309]; //@line 1541 "textio.c"
        var $311=($310)==0; //@line 1541 "textio.c"
        if ($311) { __label__ = 70; break; } else { __label__ = 71; break; } //@line 1541 "textio.c"
      case 70: // $bb71
        var $312=$chunks; //@line 1541 "textio.c"
        var $313=$312+4; //@line 1541 "textio.c"
        var $314=HEAP[$313]; //@line 1541 "textio.c"
        var $315=$314+24; //@line 1541 "textio.c"
        var $316=HEAP[$315]; //@line 1541 "textio.c"
        var $317=$chunks; //@line 1541 "textio.c"
        FUNCTION_TABLE[$316]($317); //@line 1541 "textio.c"
        __label__ = 71; break; //@line 1541 "textio.c"
      case 71: // $bb72
        $0=0; //@line 1542 "textio.c"
        __label__ = 72; break; //@line 1542 "textio.c"
      case 72: // $bb73
        var $318=$0; //@line 1456 "textio.c"
        $retval=$318; //@line 1456 "textio.c"
        var $retval74=$retval; //@line 1456 "textio.c"
        STACKTOP = __stackBase__;
        return $retval74; //@line 1456 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _find_control_char($start, $end, $ch) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $start_addr;
        var $end_addr;
        var $ch_addr;
        var $retval;
        var $0;
        var $s;
        $start_addr=$start;
        $end_addr=$end;
        $ch_addr=$ch;
        var $1=$start_addr; //@line 1552 "textio.c"
        $s=$1; //@line 1552 "textio.c"
        __label__ = 2; break; //@line 1552 "textio.c"
      case 1: // $bb1
        var $2=$7+2; //@line 1555 "textio.c"
        $s=$2; //@line 1555 "textio.c"
        __label__ = 2; break; //@line 1555 "textio.c"
      case 2: // $bb2
        var $3=$s; //@line 1554 "textio.c"
        var $4=HEAP[$3]; //@line 1554 "textio.c"
        var $5=$ch_addr; //@line 1554 "textio.c"
        var $6=($4) > ($5); //@line 1554 "textio.c"
        var $7=$s; //@line 1555 "textio.c"
        if ($6) { __label__ = 1; break; } else { __label__ = 3; break; } //@line 1554 "textio.c"
      case 3: // $bb3
        var $8=HEAP[$7]; //@line 1556 "textio.c"
        var $9=$ch_addr; //@line 1556 "textio.c"
        var $10=($8)==($9); //@line 1556 "textio.c"
        var $11=$s; //@line 1557 "textio.c"
        if ($10) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1556 "textio.c"
      case 4: // $bb4
        $0=$11; //@line 1557 "textio.c"
        __label__ = 8; break; //@line 1557 "textio.c"
      case 5: // $bb5
        var $12=$end_addr; //@line 1558 "textio.c"
        var $13=($11)==($12); //@line 1558 "textio.c"
        if ($13) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1558 "textio.c"
      case 6: // $bb6
        $0=0; //@line 1559 "textio.c"
        __label__ = 8; break; //@line 1559 "textio.c"
      case 7: // $bb7
        var $14=$s; //@line 1560 "textio.c"
        var $15=$14+2; //@line 1560 "textio.c"
        $s=$15; //@line 1560 "textio.c"
        __label__ = 2; break; //@line 1560 "textio.c"
      case 8: // $bb8
        var $16=$0; //@line 1557 "textio.c"
        $retval=$16; //@line 1557 "textio.c"
        var $retval9=$retval; //@line 1557 "textio.c"
        ;
        return $retval9; //@line 1557 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __PyIO_find_line_ending($translated, $universal, $readnl, $start, $end, $consumed) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $translated_addr;
        var $universal_addr;
        var $readnl_addr;
        var $start_addr;
        var $end_addr;
        var $consumed_addr;
        var $retval;
        var $0;
        var $len;
        var $pos;
        var $s;
        var $ch;
        var $readnl_len;
        var $nl;
        var $pos19;
        var $s23;
        var $e;
        var $pos24;
        var $i;
        var $pos28;
        $translated_addr=$translated;
        $universal_addr=$universal;
        $readnl_addr=$readnl;
        $start_addr=$start;
        $end_addr=$end;
        $consumed_addr=$consumed;
        var $1=$end_addr; //@line 1569 "textio.c"
        var $2=($1); //@line 1569 "textio.c"
        var $3=$start_addr; //@line 1569 "textio.c"
        var $4=($3); //@line 1569 "textio.c"
        var $5=($2) - ($4); //@line 1569 "textio.c"
        var $6=((($5)/2)|0); //@line 1569 "textio.c"
        $len=$6; //@line 1569 "textio.c"
        var $7=$translated_addr; //@line 1571 "textio.c"
        var $8=($7)!=0; //@line 1571 "textio.c"
        if ($8) { __label__ = 1; break; } else { __label__ = 4; break; } //@line 1571 "textio.c"
      case 1: // $bb
        var $9=$start_addr; //@line 1573 "textio.c"
        var $10=$end_addr; //@line 1573 "textio.c"
        var $11=_find_control_char($9, $10, 10); //@line 1573 "textio.c"
        $pos=$11; //@line 1573 "textio.c"
        var $12=$pos; //@line 1574 "textio.c"
        var $13=($12)!=0; //@line 1574 "textio.c"
        if ($13) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1574 "textio.c"
      case 2: // $bb1
        var $14=$pos; //@line 1575 "textio.c"
        var $15=($14); //@line 1575 "textio.c"
        var $16=$start_addr; //@line 1575 "textio.c"
        var $17=($16); //@line 1575 "textio.c"
        var $18=($15) - ($17); //@line 1575 "textio.c"
        var $19=((($18)/2)|0); //@line 1575 "textio.c"
        var $20=($19) + 1; //@line 1575 "textio.c"
        $0=$20; //@line 1575 "textio.c"
        __label__ = 36; break; //@line 1575 "textio.c"
      case 3: // $bb2
        var $21=$consumed_addr; //@line 1577 "textio.c"
        var $22=$len; //@line 1577 "textio.c"
        HEAP[$21]=$22; //@line 1577 "textio.c"
        $0=-1; //@line 1578 "textio.c"
        __label__ = 36; break; //@line 1578 "textio.c"
      case 4: // $bb3
        var $23=$universal_addr; //@line 1581 "textio.c"
        var $24=($23)!=0; //@line 1581 "textio.c"
        if ($24) { __label__ = 5; break; } else { __label__ = 16; break; } //@line 1581 "textio.c"
      case 5: // $bb4
        var $25=$start_addr; //@line 1585 "textio.c"
        $s=$25; //@line 1585 "textio.c"
        __label__ = 7; break; //@line 1585 "textio.c"
      case 6: // $bb6
        var $26=$30+2; //@line 1591 "textio.c"
        $s=$26; //@line 1591 "textio.c"
        __label__ = 7; break; //@line 1591 "textio.c"
      case 7: // $bb7
        var $27=$s; //@line 1590 "textio.c"
        var $28=HEAP[$27]; //@line 1590 "textio.c"
        var $29=($28) > 13; //@line 1590 "textio.c"
        var $30=$s; //@line 1591 "textio.c"
        if ($29) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 1590 "textio.c"
      case 8: // $bb8
        var $31=$end_addr; //@line 1592 "textio.c"
        var $32=($30) >= ($31); //@line 1592 "textio.c"
        if ($32) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1592 "textio.c"
      case 9: // $bb9
        var $33=$consumed_addr; //@line 1593 "textio.c"
        var $34=$len; //@line 1593 "textio.c"
        HEAP[$33]=$34; //@line 1593 "textio.c"
        $0=-1; //@line 1594 "textio.c"
        __label__ = 36; break; //@line 1594 "textio.c"
      case 10: // $bb10
        var $35=$s; //@line 1596 "textio.c"
        var $36=HEAP[$35]; //@line 1596 "textio.c"
        $ch=$36; //@line 1596 "textio.c"
        var $37=$s; //@line 1596 "textio.c"
        var $38=$37+2; //@line 1596 "textio.c"
        $s=$38; //@line 1596 "textio.c"
        var $39=$ch; //@line 1597 "textio.c"
        var $40=($39)==10; //@line 1597 "textio.c"
        if ($40) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1597 "textio.c"
      case 11: // $bb11
        var $41=$s; //@line 1598 "textio.c"
        var $42=($41); //@line 1598 "textio.c"
        var $43=$start_addr; //@line 1598 "textio.c"
        var $44=($43); //@line 1598 "textio.c"
        var $45=($42) - ($44); //@line 1598 "textio.c"
        var $46=((($45)/2)|0); //@line 1598 "textio.c"
        $0=$46; //@line 1598 "textio.c"
        __label__ = 36; break; //@line 1598 "textio.c"
      case 12: // $bb12
        var $47=$ch; //@line 1599 "textio.c"
        var $48=($47)==13; //@line 1599 "textio.c"
        if ($48) { __label__ = 13; break; } else { __label__ = 7; break; } //@line 1599 "textio.c"
      case 13: // $bb13
        var $49=$s; //@line 1600 "textio.c"
        var $50=HEAP[$49]; //@line 1600 "textio.c"
        var $51=($50)==10; //@line 1600 "textio.c"
        var $52=$s; //@line 1601 "textio.c"
        var $53=($52); //@line 1601 "textio.c"
        var $54=$start_addr; //@line 1601 "textio.c"
        var $55=($54); //@line 1601 "textio.c"
        var $56=($53) - ($55); //@line 1601 "textio.c"
        var $57=((($56)/2)|0); //@line 1601 "textio.c"
        if ($51) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1600 "textio.c"
      case 14: // $bb14
        var $58=($57) + 1; //@line 1601 "textio.c"
        $0=$58; //@line 1601 "textio.c"
        __label__ = 36; break; //@line 1601 "textio.c"
      case 15: // $bb15
        $0=$57; //@line 1603 "textio.c"
        __label__ = 36; break; //@line 1603 "textio.c"
      case 16: // $bb17
        var $59=$readnl_addr; //@line 1609 "textio.c"
        var $60=$59; //@line 1609 "textio.c"
        var $61=$60+8; //@line 1609 "textio.c"
        var $62=HEAP[$61]; //@line 1609 "textio.c"
        $readnl_len=$62; //@line 1609 "textio.c"
        var $63=$readnl_addr; //@line 1610 "textio.c"
        var $64=$63; //@line 1610 "textio.c"
        var $65=$64+20; //@line 1610 "textio.c"
        var $66=$65; //@line 1610 "textio.c"
        $nl=$66; //@line 1610 "textio.c"
        var $67=$readnl_len; //@line 1611 "textio.c"
        var $68=($67)==1; //@line 1611 "textio.c"
        if ($68) { __label__ = 17; break; } else { __label__ = 20; break; } //@line 1611 "textio.c"
      case 17: // $bb18
        var $69=$nl; //@line 1612 "textio.c"
        var $70=$69; //@line 1612 "textio.c"
        var $71=HEAP[$70]; //@line 1612 "textio.c"
        var $72=($71); //@line 1612 "textio.c"
        var $73=$start_addr; //@line 1612 "textio.c"
        var $74=$end_addr; //@line 1612 "textio.c"
        var $75=((($72)) & 65535); //@line 1612 "textio.c"
        var $76=_find_control_char($73, $74, $75); //@line 1612 "textio.c"
        $pos19=$76; //@line 1612 "textio.c"
        var $77=$pos19; //@line 1613 "textio.c"
        var $78=($77)!=0; //@line 1613 "textio.c"
        if ($78) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 1613 "textio.c"
      case 18: // $bb20
        var $79=$pos19; //@line 1614 "textio.c"
        var $80=($79); //@line 1614 "textio.c"
        var $81=$start_addr; //@line 1614 "textio.c"
        var $82=($81); //@line 1614 "textio.c"
        var $83=($80) - ($82); //@line 1614 "textio.c"
        var $84=((($83)/2)|0); //@line 1614 "textio.c"
        var $85=($84) + 1; //@line 1614 "textio.c"
        $0=$85; //@line 1614 "textio.c"
        __label__ = 36; break; //@line 1614 "textio.c"
      case 19: // $bb21
        var $86=$consumed_addr; //@line 1615 "textio.c"
        var $87=$len; //@line 1615 "textio.c"
        HEAP[$86]=$87; //@line 1615 "textio.c"
        $0=-1; //@line 1616 "textio.c"
        __label__ = 36; break; //@line 1616 "textio.c"
      case 20: // $bb22
        var $88=$start_addr; //@line 1619 "textio.c"
        $s23=$88; //@line 1619 "textio.c"
        var $89=$readnl_len; //@line 1620 "textio.c"
        var $90=0 - ($89); //@line 1620 "textio.c"
        var $91=$end_addr; //@line 1620 "textio.c"
        var $92=$91+2*$90; //@line 1620 "textio.c"
        var $93=$92+2; //@line 1620 "textio.c"
        $e=$93; //@line 1620 "textio.c"
        var $94=$e; //@line 1622 "textio.c"
        var $95=$s23; //@line 1622 "textio.c"
        var $96=($94) < ($95); //@line 1622 "textio.c"
        if ($96) { __label__ = 21; break; } else { __label__ = 31; break; } //@line 1622 "textio.c"
      case 21: // $bb25
        var $97=$s23; //@line 1623 "textio.c"
        $e=$97; //@line 1623 "textio.c"
        __label__ = 31; break; //@line 1623 "textio.c"
      case 22: // $bb27
        var $98=$nl; //@line 1626 "textio.c"
        var $99=$98; //@line 1626 "textio.c"
        var $100=HEAP[$99]; //@line 1626 "textio.c"
        var $101=($100); //@line 1626 "textio.c"
        var $102=$s23; //@line 1626 "textio.c"
        var $103=$end_addr; //@line 1626 "textio.c"
        var $104=((($101)) & 65535); //@line 1626 "textio.c"
        var $105=_find_control_char($102, $103, $104); //@line 1626 "textio.c"
        $pos28=$105; //@line 1626 "textio.c"
        var $106=$pos28; //@line 1627 "textio.c"
        var $107=($106)==0; //@line 1627 "textio.c"
        if ($107) { __label__ = 32; break; } else { __label__ = 23; break; } //@line 1627 "textio.c"
      case 23: // $bb29
        var $108=$pos28; //@line 1627 "textio.c"
        var $109=$e; //@line 1627 "textio.c"
        var $110=($108) >= ($109); //@line 1627 "textio.c"
        if ($110) { __label__ = 32; break; } else { __label__ = 24; break; } //@line 1627 "textio.c"
      case 24: // $bb30
        $i=1; //@line 1629 "textio.c"
        __label__ = 27; break; //@line 1629 "textio.c"
      case 25: // $bb31
        var $111=$pos28; //@line 1630 "textio.c"
        var $112=$i; //@line 1630 "textio.c"
        var $113=$111+2*$112; //@line 1630 "textio.c"
        var $114=HEAP[$113]; //@line 1630 "textio.c"
        var $115=$nl; //@line 1630 "textio.c"
        var $116=$i; //@line 1630 "textio.c"
        var $117=$115+$116; //@line 1630 "textio.c"
        var $118=HEAP[$117]; //@line 1630 "textio.c"
        var $119=($118); //@line 1630 "textio.c"
        var $120=($114)!=($119); //@line 1630 "textio.c"
        if ($120) { __label__ = 28; break; } else { __label__ = 26; break; } //@line 1630 "textio.c"
      case 26: // $bb32
        var $121=$i; //@line 1629 "textio.c"
        var $122=($121) + 1; //@line 1629 "textio.c"
        $i=$122; //@line 1629 "textio.c"
        __label__ = 27; break; //@line 1629 "textio.c"
      case 27: // $bb33
        var $123=$i; //@line 1629 "textio.c"
        var $124=$readnl_len; //@line 1629 "textio.c"
        var $125=($123) < ($124); //@line 1629 "textio.c"
        if ($125) { __label__ = 25; break; } else { __label__ = 28; break; } //@line 1629 "textio.c"
      case 28: // $bb34
        var $126=$i; //@line 1633 "textio.c"
        var $127=$readnl_len; //@line 1633 "textio.c"
        var $128=($126)==($127); //@line 1633 "textio.c"
        var $129=$pos28; //@line 1634 "textio.c"
        if ($128) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 1633 "textio.c"
      case 29: // $bb35
        var $130=($129); //@line 1634 "textio.c"
        var $131=$start_addr; //@line 1634 "textio.c"
        var $132=($131); //@line 1634 "textio.c"
        var $133=($130) - ($132); //@line 1634 "textio.c"
        var $134=((($133)/2)|0); //@line 1634 "textio.c"
        var $135=$readnl_len; //@line 1634 "textio.c"
        var $136=($135) + ($134); //@line 1634 "textio.c"
        $0=$136; //@line 1634 "textio.c"
        __label__ = 36; break; //@line 1634 "textio.c"
      case 30: // $bb36
        var $137=$129+2; //@line 1635 "textio.c"
        $s23=$137; //@line 1635 "textio.c"
        __label__ = 31; break; //@line 1635 "textio.c"
      case 31: // $bb37
        var $138=$s23; //@line 1624 "textio.c"
        var $139=$e; //@line 1624 "textio.c"
        var $140=($138) < ($139); //@line 1624 "textio.c"
        if ($140) { __label__ = 22; break; } else { __label__ = 32; break; } //@line 1624 "textio.c"
      case 32: // $bb38
        var $141=$nl; //@line 1637 "textio.c"
        var $142=$141; //@line 1637 "textio.c"
        var $143=HEAP[$142]; //@line 1637 "textio.c"
        var $144=($143); //@line 1637 "textio.c"
        var $145=$e; //@line 1637 "textio.c"
        var $146=$end_addr; //@line 1637 "textio.c"
        var $147=((($144)) & 65535); //@line 1637 "textio.c"
        var $148=_find_control_char($145, $146, $147); //@line 1637 "textio.c"
        $pos24=$148; //@line 1637 "textio.c"
        var $149=($148)==0; //@line 1638 "textio.c"
        if ($149) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 1638 "textio.c"
      case 33: // $bb39
        var $150=$consumed_addr; //@line 1639 "textio.c"
        var $151=$len; //@line 1639 "textio.c"
        HEAP[$150]=$151; //@line 1639 "textio.c"
        __label__ = 35; break; //@line 1639 "textio.c"
      case 34: // $bb40
        var $152=$pos24; //@line 1641 "textio.c"
        var $153=($152); //@line 1641 "textio.c"
        var $154=$start_addr; //@line 1641 "textio.c"
        var $155=($154); //@line 1641 "textio.c"
        var $156=($153) - ($155); //@line 1641 "textio.c"
        var $157=((($156)/2)|0); //@line 1641 "textio.c"
        var $158=$consumed_addr; //@line 1641 "textio.c"
        HEAP[$158]=$157; //@line 1641 "textio.c"
        __label__ = 35; break; //@line 1641 "textio.c"
      case 35: // $bb41
        $0=-1; //@line 1642 "textio.c"
        __label__ = 36; break; //@line 1642 "textio.c"
      case 36: // $bb42
        var $159=$0; //@line 1575 "textio.c"
        $retval=$159; //@line 1575 "textio.c"
        var $retval43=$retval; //@line 1575 "textio.c"
        ;
        return $retval43; //@line 1575 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __textiowrapper_readline($self, $limit) {
    var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $limit_addr;
        var $retval;
        var $0;
        var $line=__stackBase__;
        var $chunks;
        var $remaining;
        var $start;
        var $endpos;
        var $chunked;
        var $offset_to_buffer;
        var $res;
        var $r;
        var $_res;
        var $ptr;
        var $line_len;
        var $consumed=__stackBase__+4;
        var $_py_tmp;
        var $_py_tmp32;
        var $s;
        var $_py_tmp57;
        var $s68;
        var $_py_tmp70;
        var $_py_tmp80;
        var $_py_tmp87;
        $self_addr=$self;
        $limit_addr=$limit;
        HEAP[$line]=0; //@line 1650 "textio.c"
        $chunks=0; //@line 1650 "textio.c"
        $remaining=0; //@line 1650 "textio.c"
        var $1=$self_addr; //@line 1654 "textio.c"
        var $2=$1; //@line 1654 "textio.c"
        var $3=$2+4; //@line 1654 "textio.c"
        var $4=HEAP[$3]; //@line 1654 "textio.c"
        var $5=($4)==(_PyTextIOWrapper_Type); //@line 1654 "textio.c"
        var $6=$self_addr; //@line 1654 "textio.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 11; break; } //@line 1654 "textio.c"
      case 1: // $bb
        var $7=$6+84; //@line 1654 "textio.c"
        var $8=HEAP[$7]; //@line 1654 "textio.c"
        var $9=($8)!=0; //@line 1654 "textio.c"
        var $10=$self_addr; //@line 1654 "textio.c"
        if ($9) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1654 "textio.c"
      case 2: // $bb1
        var $11=$10+84; //@line 1654 "textio.c"
        var $12=HEAP[$11]; //@line 1654 "textio.c"
        var $13=__PyFileIO_closed($12); //@line 1654 "textio.c"
        $r=$13; //@line 1654 "textio.c"
        __lastLabel__ = 2; __label__ = 9; break; //@line 1654 "textio.c"
      case 3: // $bb2
        var $14=_textiowrapper_closed_get($10, 0); //@line 1654 "textio.c"
        $_res=$14; //@line 1654 "textio.c"
        var $15=$_res; //@line 1654 "textio.c"
        var $16=($15)==0; //@line 1654 "textio.c"
        if ($16) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1654 "textio.c"
      case 4: // $bb3
        $0=0; //@line 1654 "textio.c"
        __label__ = 97; break; //@line 1654 "textio.c"
      case 5: // $bb4
        var $17=$_res; //@line 1654 "textio.c"
        var $18=_PyObject_IsTrue($17); //@line 1654 "textio.c"
        $r=$18; //@line 1654 "textio.c"
        var $19=$_res; //@line 1654 "textio.c"
        var $20=$19; //@line 1654 "textio.c"
        var $21=HEAP[$20]; //@line 1654 "textio.c"
        var $22=($21) - 1; //@line 1654 "textio.c"
        var $23=$_res; //@line 1654 "textio.c"
        var $24=$23; //@line 1654 "textio.c"
        HEAP[$24]=$22; //@line 1654 "textio.c"
        var $25=$_res; //@line 1654 "textio.c"
        var $26=$25; //@line 1654 "textio.c"
        var $27=HEAP[$26]; //@line 1654 "textio.c"
        var $28=($27)==0; //@line 1654 "textio.c"
        if ($28) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1654 "textio.c"
      case 6: // $bb5
        var $29=$_res; //@line 1654 "textio.c"
        var $30=$29+4; //@line 1654 "textio.c"
        var $31=HEAP[$30]; //@line 1654 "textio.c"
        var $32=$31+24; //@line 1654 "textio.c"
        var $33=HEAP[$32]; //@line 1654 "textio.c"
        var $34=$_res; //@line 1654 "textio.c"
        FUNCTION_TABLE[$33]($34); //@line 1654 "textio.c"
        __label__ = 7; break; //@line 1654 "textio.c"
      case 7: // $bb6
        var $35=$r; //@line 1654 "textio.c"
        var $36=($35) < 0; //@line 1654 "textio.c"
        if ($36) { __lastLabel__ = 7; __label__ = 8; break; } else { __lastLabel__ = 7; __label__ = 9; break; } //@line 1654 "textio.c"
      case 8: // $bb7
        $0=0; //@line 1654 "textio.c"
        __label__ = 97; break; //@line 1654 "textio.c"
      case 9: // $bb8
        var $37=__lastLabel__ == 7 ? $35 : ($13);
        var $38=($37) > 0; //@line 1654 "textio.c"
        if ($38) { __label__ = 10; break; } else { __label__ = 13; break; } //@line 1654 "textio.c"
      case 10: // $bb9
        var $39=HEAP[_PyExc_ValueError]; //@line 1654 "textio.c"
        _PyErr_SetString($39, __str60436); //@line 1654 "textio.c"
        $0=0; //@line 1654 "textio.c"
        __label__ = 97; break; //@line 1654 "textio.c"
      case 11: // $bb11
        var $40=$6; //@line 1654 "textio.c"
        var $41=__PyIOBase_check_closed($40, __Py_TrueStruct); //@line 1654 "textio.c"
        var $42=($41)==0; //@line 1654 "textio.c"
        if ($42) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1654 "textio.c"
      case 12: // $bb12
        $0=0; //@line 1654 "textio.c"
        __label__ = 97; break; //@line 1654 "textio.c"
      case 13: // $bb13
        var $43=$self_addr; //@line 1656 "textio.c"
        var $44=__textiowrapper_writeflush($43); //@line 1656 "textio.c"
        var $45=($44) < 0; //@line 1656 "textio.c"
        if ($45) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 1656 "textio.c"
      case 14: // $bb14
        $0=0; //@line 1657 "textio.c"
        __label__ = 97; break; //@line 1657 "textio.c"
      case 15: // $bb15
        $chunked=0; //@line 1659 "textio.c"
        __label__ = 16; break; //@line 1659 "textio.c"
      case 16: // $bb16
        HEAP[$consumed]=0; //@line 1664 "textio.c"
        $res=1; //@line 1667 "textio.c"
        __label__ = 19; break; //@line 1667 "textio.c"
      case 17: // $bb17
        var $46=$self_addr; //@line 1670 "textio.c"
        var $47=_textiowrapper_read_chunk($46); //@line 1670 "textio.c"
        $res=$47; //@line 1670 "textio.c"
        var $48=($47) < 0; //@line 1671 "textio.c"
        if ($48) { __label__ = 87; break; } else { __label__ = 18; break; } //@line 1671 "textio.c"
      case 18: // $bb18
        var $49=$res; //@line 1673 "textio.c"
        var $50=($49)==0; //@line 1673 "textio.c"
        if ($50) { __label__ = 22; break; } else { __label__ = 19; break; } //@line 1673 "textio.c"
      case 19: // $bb19
        var $51=$self_addr; //@line 1668 "textio.c"
        var $52=$51+64; //@line 1668 "textio.c"
        var $53=HEAP[$52]; //@line 1668 "textio.c"
        var $54=($53)==0; //@line 1668 "textio.c"
        if ($54) { __label__ = 17; break; } else { __label__ = 20; break; } //@line 1668 "textio.c"
      case 20: // $bb20
        var $55=$self_addr; //@line 1668 "textio.c"
        var $56=$55+64; //@line 1668 "textio.c"
        var $57=HEAP[$56]; //@line 1668 "textio.c"
        var $58=$57; //@line 1668 "textio.c"
        var $59=$58+8; //@line 1668 "textio.c"
        var $60=HEAP[$59]; //@line 1668 "textio.c"
        var $61=($60)==0; //@line 1668 "textio.c"
        if ($61) { __label__ = 17; break; } else { __label__ = 21; break; } //@line 1668 "textio.c"
      case 21: // $bb21
        var $_pr=$res;
        var $62=($_pr)==0; //@line 1676 "textio.c"
        if ($62) { __label__ = 22; break; } else { __label__ = 26; break; } //@line 1676 "textio.c"
      case 22: // $bb22
        var $63=$self_addr; //@line 1678 "textio.c"
        _textiowrapper_set_decoded_chars($63, 0); //@line 1678 "textio.c"
        var $64=$self_addr; //@line 1679 "textio.c"
        var $65=$64+80; //@line 1679 "textio.c"
        var $66=HEAP[$65]; //@line 1679 "textio.c"
        var $67=($66)!=0; //@line 1679 "textio.c"
        if ($67) { __label__ = 23; break; } else { __label__ = 25; break; } //@line 1679 "textio.c"
      case 23: // $bb23
        var $68=$self_addr; //@line 1679 "textio.c"
        var $69=$68+80; //@line 1679 "textio.c"
        var $70=HEAP[$69]; //@line 1679 "textio.c"
        $_py_tmp=$70; //@line 1679 "textio.c"
        var $71=$self_addr; //@line 1679 "textio.c"
        var $72=$71+80; //@line 1679 "textio.c"
        HEAP[$72]=0; //@line 1679 "textio.c"
        var $73=$_py_tmp; //@line 1679 "textio.c"
        var $74=$73; //@line 1679 "textio.c"
        var $75=HEAP[$74]; //@line 1679 "textio.c"
        var $76=($75) - 1; //@line 1679 "textio.c"
        var $77=$_py_tmp; //@line 1679 "textio.c"
        var $78=$77; //@line 1679 "textio.c"
        HEAP[$78]=$76; //@line 1679 "textio.c"
        var $79=$_py_tmp; //@line 1679 "textio.c"
        var $80=$79; //@line 1679 "textio.c"
        var $81=HEAP[$80]; //@line 1679 "textio.c"
        var $82=($81)==0; //@line 1679 "textio.c"
        if ($82) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 1679 "textio.c"
      case 24: // $bb24
        var $83=$_py_tmp; //@line 1679 "textio.c"
        var $84=$83+4; //@line 1679 "textio.c"
        var $85=HEAP[$84]; //@line 1679 "textio.c"
        var $86=$85+24; //@line 1679 "textio.c"
        var $87=HEAP[$86]; //@line 1679 "textio.c"
        var $88=$_py_tmp; //@line 1679 "textio.c"
        FUNCTION_TABLE[$87]($88); //@line 1679 "textio.c"
        __label__ = 25; break; //@line 1679 "textio.c"
      case 25: // $bb25
        $offset_to_buffer=0; //@line 1680 "textio.c"
        var $89=$offset_to_buffer; //@line 1680 "textio.c"
        $endpos=$89; //@line 1680 "textio.c"
        var $90=$endpos; //@line 1680 "textio.c"
        $start=$90; //@line 1680 "textio.c"
        __label__ = 56; break; //@line 1680 "textio.c"
      case 26: // $bb26
        var $91=$remaining; //@line 1684 "textio.c"
        var $92=($91)==0; //@line 1684 "textio.c"
        var $93=$self_addr; //@line 1685 "textio.c"
        if ($92) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 1684 "textio.c"
      case 27: // $bb27
        var $94=$93+64; //@line 1685 "textio.c"
        var $95=HEAP[$94]; //@line 1685 "textio.c"
        HEAP[$line]=$95; //@line 1685 "textio.c"
        var $96=$self_addr; //@line 1686 "textio.c"
        var $97=$96+68; //@line 1686 "textio.c"
        var $98=HEAP[$97]; //@line 1686 "textio.c"
        $start=$98; //@line 1686 "textio.c"
        $offset_to_buffer=0; //@line 1687 "textio.c"
        var $99=HEAP[$line]; //@line 1688 "textio.c"
        var $100=$99; //@line 1688 "textio.c"
        var $101=HEAP[$100]; //@line 1688 "textio.c"
        var $102=($101) + 1; //@line 1688 "textio.c"
        var $103=$99; //@line 1688 "textio.c"
        HEAP[$103]=$102; //@line 1688 "textio.c"
        __label__ = 34; break; //@line 1688 "textio.c"
      case 28: // $bb28
        var $104=$93+68; //@line 1691 "textio.c"
        var $105=HEAP[$104]; //@line 1691 "textio.c"
        var $106=($105)!=0; //@line 1691 "textio.c"
        if ($106) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 1691 "textio.c"
      case 29: // $bb29
        ___assert_fail(__str70446, __str15390, 1691, ___PRETTY_FUNCTION___10735); //@line 1691 "textio.c"
        throw "Reached an unreachable!" //@line 1691 "textio.c"
      case 30: // $bb30
        var $107=$self_addr; //@line 1692 "textio.c"
        var $108=$107+64; //@line 1692 "textio.c"
        var $109=HEAP[$108]; //@line 1692 "textio.c"
        var $110=$remaining; //@line 1692 "textio.c"
        var $111=_PyUnicodeUCS2_Concat($110, $109); //@line 1692 "textio.c"
        HEAP[$line]=$111; //@line 1692 "textio.c"
        $start=0; //@line 1693 "textio.c"
        var $112=$remaining; //@line 1694 "textio.c"
        var $113=$112; //@line 1694 "textio.c"
        var $114=$113+8; //@line 1694 "textio.c"
        var $115=HEAP[$114]; //@line 1694 "textio.c"
        $offset_to_buffer=$115; //@line 1694 "textio.c"
        var $116=$remaining; //@line 1695 "textio.c"
        var $117=($116)!=0; //@line 1695 "textio.c"
        if ($117) { __label__ = 31; break; } else { __label__ = 33; break; } //@line 1695 "textio.c"
      case 31: // $bb31
        var $118=$remaining; //@line 1695 "textio.c"
        $_py_tmp32=$118; //@line 1695 "textio.c"
        $remaining=0; //@line 1695 "textio.c"
        var $119=$_py_tmp32; //@line 1695 "textio.c"
        var $120=$119; //@line 1695 "textio.c"
        var $121=HEAP[$120]; //@line 1695 "textio.c"
        var $122=($121) - 1; //@line 1695 "textio.c"
        var $123=$_py_tmp32; //@line 1695 "textio.c"
        var $124=$123; //@line 1695 "textio.c"
        HEAP[$124]=$122; //@line 1695 "textio.c"
        var $125=$_py_tmp32; //@line 1695 "textio.c"
        var $126=$125; //@line 1695 "textio.c"
        var $127=HEAP[$126]; //@line 1695 "textio.c"
        var $128=($127)==0; //@line 1695 "textio.c"
        if ($128) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 1695 "textio.c"
      case 32: // $bb33
        var $129=$_py_tmp32; //@line 1695 "textio.c"
        var $130=$129+4; //@line 1695 "textio.c"
        var $131=HEAP[$130]; //@line 1695 "textio.c"
        var $132=$131+24; //@line 1695 "textio.c"
        var $133=HEAP[$132]; //@line 1695 "textio.c"
        var $134=$_py_tmp32; //@line 1695 "textio.c"
        FUNCTION_TABLE[$133]($134); //@line 1695 "textio.c"
        __label__ = 33; break; //@line 1695 "textio.c"
      case 33: // $bb34
        var $135=HEAP[$line]; //@line 1696 "textio.c"
        var $136=($135)==0; //@line 1696 "textio.c"
        if ($136) { __label__ = 87; break; } else { __label__ = 34; break; } //@line 1696 "textio.c"
      case 34: // $bb35
        var $137=HEAP[$line]; //@line 1700 "textio.c"
        var $138=$137; //@line 1700 "textio.c"
        var $139=$138+12; //@line 1700 "textio.c"
        var $140=HEAP[$139]; //@line 1700 "textio.c"
        $ptr=$140; //@line 1700 "textio.c"
        var $141=HEAP[$line]; //@line 1701 "textio.c"
        var $142=$141; //@line 1701 "textio.c"
        var $143=$142+8; //@line 1701 "textio.c"
        var $144=HEAP[$143]; //@line 1701 "textio.c"
        $line_len=$144; //@line 1701 "textio.c"
        var $145=$ptr; //@line 1703 "textio.c"
        var $146=$line_len; //@line 1703 "textio.c"
        var $147=$145+2*$146; //@line 1703 "textio.c"
        var $148=$ptr; //@line 1703 "textio.c"
        var $149=$start; //@line 1703 "textio.c"
        var $150=$148+2*$149; //@line 1703 "textio.c"
        var $151=$self_addr; //@line 1703 "textio.c"
        var $152=$151+36; //@line 1703 "textio.c"
        var $153=HEAP[$152]; //@line 1703 "textio.c"
        var $154=$self_addr; //@line 1703 "textio.c"
        var $155=$154+49; //@line 1703 "textio.c"
        var $156=HEAP[$155]; //@line 1703 "textio.c"
        var $157=($156); //@line 1703 "textio.c"
        var $158=$self_addr; //@line 1703 "textio.c"
        var $159=$158+50; //@line 1703 "textio.c"
        var $160=HEAP[$159]; //@line 1703 "textio.c"
        var $161=($160); //@line 1703 "textio.c"
        var $162=__PyIO_find_line_ending($161, $157, $153, $150, $147, $consumed); //@line 1703 "textio.c"
        $endpos=$162; //@line 1703 "textio.c"
        var $163=($162) >= 0; //@line 1706 "textio.c"
        if ($163) { __label__ = 35; break; } else { __label__ = 38; break; } //@line 1706 "textio.c"
      case 35: // $bb36
        var $164=$endpos; //@line 1707 "textio.c"
        var $165=$start; //@line 1707 "textio.c"
        var $166=($165) + ($164); //@line 1707 "textio.c"
        $endpos=$166; //@line 1707 "textio.c"
        var $167=$limit_addr; //@line 1708 "textio.c"
        var $168=($167) >= 0; //@line 1708 "textio.c"
        if ($168) { __label__ = 36; break; } else { __label__ = 56; break; } //@line 1708 "textio.c"
      case 36: // $bb37
        var $169=$endpos; //@line 1708 "textio.c"
        var $170=$start; //@line 1708 "textio.c"
        var $_neg=0 - ($170);
        var $171=$chunked; //@line 1708 "textio.c"
        var $172=($_neg) + ($169);
        var $173=($172) + ($171); //@line 1708 "textio.c"
        var $174=$limit_addr; //@line 1708 "textio.c"
        var $175=($173) >= ($174); //@line 1708 "textio.c"
        if ($175) { __label__ = 37; break; } else { __label__ = 56; break; } //@line 1708 "textio.c"
      case 37: // $bb38
        var $176=$start; //@line 1709 "textio.c"
        var $177=$limit_addr; //@line 1709 "textio.c"
        var $178=$chunked; //@line 1709 "textio.c"
        var $_neg5=0 - ($178);
        var $179=($177) + ($176); //@line 1709 "textio.c"
        var $180=($179) + ($_neg5);
        $endpos=$180; //@line 1709 "textio.c"
        __label__ = 56; break; //@line 1709 "textio.c"
      case 38: // $bb40
        var $181=HEAP[$consumed]; //@line 1714 "textio.c"
        var $182=$start; //@line 1714 "textio.c"
        var $183=($182) + ($181); //@line 1714 "textio.c"
        $endpos=$183; //@line 1714 "textio.c"
        var $184=$limit_addr; //@line 1715 "textio.c"
        var $185=($184) >= 0; //@line 1715 "textio.c"
        if ($185) { __label__ = 39; break; } else { __label__ = 41; break; } //@line 1715 "textio.c"
      case 39: // $bb41
        var $186=$endpos; //@line 1715 "textio.c"
        var $187=$start; //@line 1715 "textio.c"
        var $_neg6=0 - ($187);
        var $188=$chunked; //@line 1715 "textio.c"
        var $189=($_neg6) + ($186);
        var $190=($189) + ($188); //@line 1715 "textio.c"
        var $191=$limit_addr; //@line 1715 "textio.c"
        var $192=($190) >= ($191); //@line 1715 "textio.c"
        if ($192) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 1715 "textio.c"
      case 40: // $bb42
        var $193=$start; //@line 1717 "textio.c"
        var $194=$limit_addr; //@line 1717 "textio.c"
        var $195=$chunked; //@line 1717 "textio.c"
        var $_neg7=0 - ($195);
        var $196=($194) + ($193); //@line 1717 "textio.c"
        var $197=($196) + ($_neg7);
        $endpos=$197; //@line 1717 "textio.c"
        __label__ = 56; break; //@line 1717 "textio.c"
      case 41: // $bb43
        var $198=$endpos; //@line 1721 "textio.c"
        var $199=$start; //@line 1721 "textio.c"
        var $200=($198) > ($199); //@line 1721 "textio.c"
        if ($200) { __label__ = 42; break; } else { __label__ = 50; break; } //@line 1721 "textio.c"
      case 42: // $bb44
        var $201=$chunks; //@line 1724 "textio.c"
        var $202=($201)==0; //@line 1724 "textio.c"
        if ($202) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 1724 "textio.c"
      case 43: // $bb45
        var $203=_PyList_New(0); //@line 1725 "textio.c"
        $chunks=$203; //@line 1725 "textio.c"
        var $204=$chunks; //@line 1726 "textio.c"
        var $205=($204)==0; //@line 1726 "textio.c"
        if ($205) { __label__ = 90; break; } else { __label__ = 44; break; } //@line 1726 "textio.c"
      case 44: // $bb46
        var $206=$endpos; //@line 1729 "textio.c"
        var $207=$start; //@line 1729 "textio.c"
        var $208=($206) - ($207); //@line 1729 "textio.c"
        var $209=$ptr; //@line 1729 "textio.c"
        var $210=$start; //@line 1729 "textio.c"
        var $211=$209+2*$210; //@line 1729 "textio.c"
        var $212=_PyUnicodeUCS2_FromUnicode($211, $208); //@line 1729 "textio.c"
        $s=$212; //@line 1729 "textio.c"
        var $213=($212)==0; //@line 1730 "textio.c"
        if ($213) { __label__ = 87; break; } else { __label__ = 45; break; } //@line 1730 "textio.c"
      case 45: // $bb47
        var $214=$chunks; //@line 1732 "textio.c"
        var $215=$s; //@line 1732 "textio.c"
        var $216=_PyList_Append($214, $215); //@line 1732 "textio.c"
        var $217=($216) < 0; //@line 1732 "textio.c"
        var $218=$s; //@line 1733 "textio.c"
        if ($217) { __label__ = 46; break; } else { __label__ = 48; break; } //@line 1732 "textio.c"
      case 46: // $bb48
        var $219=$218; //@line 1733 "textio.c"
        var $220=HEAP[$219]; //@line 1733 "textio.c"
        var $221=($220) - 1; //@line 1733 "textio.c"
        var $222=$s; //@line 1733 "textio.c"
        var $223=$222; //@line 1733 "textio.c"
        HEAP[$223]=$221; //@line 1733 "textio.c"
        var $224=$s; //@line 1733 "textio.c"
        var $225=$224; //@line 1733 "textio.c"
        var $226=HEAP[$225]; //@line 1733 "textio.c"
        var $227=($226)==0; //@line 1733 "textio.c"
        if ($227) { __label__ = 47; break; } else { __label__ = 87; break; } //@line 1733 "textio.c"
      case 47: // $bb49
        var $228=$s; //@line 1733 "textio.c"
        var $229=$228+4; //@line 1733 "textio.c"
        var $230=HEAP[$229]; //@line 1733 "textio.c"
        var $231=$230+24; //@line 1733 "textio.c"
        var $232=HEAP[$231]; //@line 1733 "textio.c"
        var $233=$s; //@line 1733 "textio.c"
        FUNCTION_TABLE[$232]($233); //@line 1733 "textio.c"
        __label__ = 87; break; //@line 1733 "textio.c"
      case 48: // $bb51
        var $234=$218; //@line 1736 "textio.c"
        var $235=$234+8; //@line 1736 "textio.c"
        var $236=HEAP[$235]; //@line 1736 "textio.c"
        var $237=$chunked; //@line 1736 "textio.c"
        var $238=($237) + ($236); //@line 1736 "textio.c"
        $chunked=$238; //@line 1736 "textio.c"
        var $239=$s; //@line 1737 "textio.c"
        var $240=$239; //@line 1737 "textio.c"
        var $241=HEAP[$240]; //@line 1737 "textio.c"
        var $242=($241) - 1; //@line 1737 "textio.c"
        var $243=$s; //@line 1737 "textio.c"
        var $244=$243; //@line 1737 "textio.c"
        HEAP[$244]=$242; //@line 1737 "textio.c"
        var $245=$s; //@line 1737 "textio.c"
        var $246=$245; //@line 1737 "textio.c"
        var $247=HEAP[$246]; //@line 1737 "textio.c"
        var $248=($247)==0; //@line 1737 "textio.c"
        if ($248) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 1737 "textio.c"
      case 49: // $bb52
        var $249=$s; //@line 1737 "textio.c"
        var $250=$249+4; //@line 1737 "textio.c"
        var $251=HEAP[$250]; //@line 1737 "textio.c"
        var $252=$251+24; //@line 1737 "textio.c"
        var $253=HEAP[$252]; //@line 1737 "textio.c"
        var $254=$s; //@line 1737 "textio.c"
        FUNCTION_TABLE[$253]($254); //@line 1737 "textio.c"
        __label__ = 50; break; //@line 1737 "textio.c"
      case 50: // $bb53
        var $255=$endpos; //@line 1741 "textio.c"
        var $256=$line_len; //@line 1741 "textio.c"
        var $257=($255) < ($256); //@line 1741 "textio.c"
        if ($257) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 1741 "textio.c"
      case 51: // $bb54
        var $258=$line_len; //@line 1742 "textio.c"
        var $259=$endpos; //@line 1742 "textio.c"
        var $260=($258) - ($259); //@line 1742 "textio.c"
        var $261=$ptr; //@line 1742 "textio.c"
        var $262=$endpos; //@line 1742 "textio.c"
        var $263=$261+2*$262; //@line 1742 "textio.c"
        var $264=_PyUnicodeUCS2_FromUnicode($263, $260); //@line 1742 "textio.c"
        $remaining=$264; //@line 1742 "textio.c"
        var $265=$remaining; //@line 1744 "textio.c"
        var $266=($265)==0; //@line 1744 "textio.c"
        if ($266) { __label__ = 87; break; } else { __label__ = 52; break; } //@line 1744 "textio.c"
      case 52: // $bb55
        var $267=HEAP[$line]; //@line 1747 "textio.c"
        var $268=($267)!=0; //@line 1747 "textio.c"
        if ($268) { __label__ = 53; break; } else { __label__ = 55; break; } //@line 1747 "textio.c"
      case 53: // $bb56
        var $269=HEAP[$line]; //@line 1747 "textio.c"
        $_py_tmp57=$269; //@line 1747 "textio.c"
        HEAP[$line]=0; //@line 1747 "textio.c"
        var $270=$_py_tmp57; //@line 1747 "textio.c"
        var $271=$270; //@line 1747 "textio.c"
        var $272=HEAP[$271]; //@line 1747 "textio.c"
        var $273=($272) - 1; //@line 1747 "textio.c"
        var $274=$_py_tmp57; //@line 1747 "textio.c"
        var $275=$274; //@line 1747 "textio.c"
        HEAP[$275]=$273; //@line 1747 "textio.c"
        var $276=$_py_tmp57; //@line 1747 "textio.c"
        var $277=$276; //@line 1747 "textio.c"
        var $278=HEAP[$277]; //@line 1747 "textio.c"
        var $279=($278)==0; //@line 1747 "textio.c"
        if ($279) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 1747 "textio.c"
      case 54: // $bb58
        var $280=$_py_tmp57; //@line 1747 "textio.c"
        var $281=$280+4; //@line 1747 "textio.c"
        var $282=HEAP[$281]; //@line 1747 "textio.c"
        var $283=$282+24; //@line 1747 "textio.c"
        var $284=HEAP[$283]; //@line 1747 "textio.c"
        var $285=$_py_tmp57; //@line 1747 "textio.c"
        FUNCTION_TABLE[$284]($285); //@line 1747 "textio.c"
        __label__ = 55; break; //@line 1747 "textio.c"
      case 55: // $bb59
        var $286=$self_addr; //@line 1749 "textio.c"
        _textiowrapper_set_decoded_chars($286, 0); //@line 1749 "textio.c"
        __label__ = 16; break; //@line 1749 "textio.c"
      case 56: // $bb60
        var $287=HEAP[$line]; //@line 1752 "textio.c"
        var $288=($287)!=0; //@line 1752 "textio.c"
        if ($288) { __label__ = 57; break; } else { __label__ = 68; break; } //@line 1752 "textio.c"
      case 57: // $bb61
        var $289=$endpos; //@line 1754 "textio.c"
        var $290=$offset_to_buffer; //@line 1754 "textio.c"
        var $291=($289) - ($290); //@line 1754 "textio.c"
        var $292=$self_addr; //@line 1754 "textio.c"
        var $293=$292+68; //@line 1754 "textio.c"
        HEAP[$293]=$291; //@line 1754 "textio.c"
        var $294=$start; //@line 1755 "textio.c"
        var $295=($294) > 0; //@line 1755 "textio.c"
        if ($295) { __label__ = 62; break; } else { __label__ = 58; break; } //@line 1755 "textio.c"
      case 58: // $bb62
        var $296=HEAP[$line]; //@line 1755 "textio.c"
        var $297=$296; //@line 1755 "textio.c"
        var $298=$297+8; //@line 1755 "textio.c"
        var $299=HEAP[$298]; //@line 1755 "textio.c"
        var $300=$endpos; //@line 1755 "textio.c"
        var $301=($299) > ($300); //@line 1755 "textio.c"
        if ($301) { __label__ = 59; break; } else { __label__ = 68; break; } //@line 1755 "textio.c"
      case 59: // $bb63
        var $_pr1=$start;
        var $302=($_pr1)!=0; //@line 1756 "textio.c"
        if ($302) { __label__ = 62; break; } else { __label__ = 60; break; } //@line 1756 "textio.c"
      case 60: // $bb64
        var $303=HEAP[$line]; //@line 1756 "textio.c"
        var $304=$303; //@line 1756 "textio.c"
        var $305=HEAP[$304]; //@line 1756 "textio.c"
        var $306=($305)!=1; //@line 1756 "textio.c"
        if ($306) { __label__ = 62; break; } else { __label__ = 61; break; } //@line 1756 "textio.c"
      case 61: // $bb65
        var $307=$endpos; //@line 1757 "textio.c"
        var $308=_PyUnicodeUCS2_Resize($line, $307); //@line 1757 "textio.c"
        var $309=($308) < 0; //@line 1757 "textio.c"
        if ($309) { __label__ = 87; break; } else { __label__ = 68; break; } //@line 1757 "textio.c"
      case 62: // $bb67
        var $310=$endpos; //@line 1762 "textio.c"
        var $311=$start; //@line 1762 "textio.c"
        var $312=($310) - ($311); //@line 1762 "textio.c"
        var $313=HEAP[$line]; //@line 1762 "textio.c"
        var $314=$313; //@line 1762 "textio.c"
        var $315=$314+12; //@line 1762 "textio.c"
        var $316=HEAP[$315]; //@line 1762 "textio.c"
        var $317=$start; //@line 1762 "textio.c"
        var $318=$316+2*$317; //@line 1762 "textio.c"
        var $319=_PyUnicodeUCS2_FromUnicode($318, $312); //@line 1762 "textio.c"
        $s68=$319; //@line 1762 "textio.c"
        var $320=HEAP[$line]; //@line 1763 "textio.c"
        var $321=($320)!=0; //@line 1763 "textio.c"
        if ($321) { __lastLabel__ = 62; __label__ = 63; break; } else { __lastLabel__ = 62; __label__ = 66; break; } //@line 1763 "textio.c"
      case 63: // $bb69
        var $322=HEAP[$line]; //@line 1763 "textio.c"
        $_py_tmp70=$322; //@line 1763 "textio.c"
        HEAP[$line]=0; //@line 1763 "textio.c"
        var $323=$_py_tmp70; //@line 1763 "textio.c"
        var $324=$323; //@line 1763 "textio.c"
        var $325=HEAP[$324]; //@line 1763 "textio.c"
        var $326=($325) - 1; //@line 1763 "textio.c"
        var $327=$_py_tmp70; //@line 1763 "textio.c"
        var $328=$327; //@line 1763 "textio.c"
        HEAP[$328]=$326; //@line 1763 "textio.c"
        var $329=$_py_tmp70; //@line 1763 "textio.c"
        var $330=$329; //@line 1763 "textio.c"
        var $331=HEAP[$330]; //@line 1763 "textio.c"
        var $332=($331)==0; //@line 1763 "textio.c"
        if ($332) { __label__ = 64; break; } else { __label__ = 65; break; } //@line 1763 "textio.c"
      case 64: // $bb71
        var $333=$_py_tmp70; //@line 1763 "textio.c"
        var $334=$333+4; //@line 1763 "textio.c"
        var $335=HEAP[$334]; //@line 1763 "textio.c"
        var $336=$335+24; //@line 1763 "textio.c"
        var $337=HEAP[$336]; //@line 1763 "textio.c"
        var $338=$_py_tmp70; //@line 1763 "textio.c"
        FUNCTION_TABLE[$337]($338); //@line 1763 "textio.c"
        __label__ = 65; break; //@line 1763 "textio.c"
      case 65: // $bb72thread_pre_split
        var $_pr2=$s68;
        __lastLabel__ = 65; __label__ = 66; break;
      case 66: // $bb72
        var $339=__lastLabel__ == 65 ? $_pr2 : ($319);
        var $340=($339)==0; //@line 1764 "textio.c"
        if ($340) { __label__ = 87; break; } else { __label__ = 67; break; } //@line 1764 "textio.c"
      case 67: // $bb73
        var $341=$s68; //@line 1766 "textio.c"
        HEAP[$line]=$341; //@line 1766 "textio.c"
        __label__ = 68; break; //@line 1766 "textio.c"
      case 68: // $bb74
        var $342=$remaining; //@line 1770 "textio.c"
        var $343=($342)!=0; //@line 1770 "textio.c"
        if ($343) { __label__ = 69; break; } else { __label__ = 75; break; } //@line 1770 "textio.c"
      case 69: // $bb75
        var $344=$chunks; //@line 1771 "textio.c"
        var $345=($344)==0; //@line 1771 "textio.c"
        if ($345) { __label__ = 70; break; } else { __label__ = 71; break; } //@line 1771 "textio.c"
      case 70: // $bb76
        var $346=_PyList_New(0); //@line 1772 "textio.c"
        $chunks=$346; //@line 1772 "textio.c"
        var $347=$chunks; //@line 1773 "textio.c"
        var $348=($347)==0; //@line 1773 "textio.c"
        if ($348) { __label__ = 90; break; } else { __label__ = 71; break; } //@line 1773 "textio.c"
      case 71: // $bb77
        var $349=$chunks; //@line 1776 "textio.c"
        var $350=$remaining; //@line 1776 "textio.c"
        var $351=_PyList_Append($349, $350); //@line 1776 "textio.c"
        var $352=($351) < 0; //@line 1776 "textio.c"
        if ($352) { __label__ = 87; break; } else { __label__ = 72; break; } //@line 1776 "textio.c"
      case 72: // $bb78
        var $353=$remaining; //@line 1778 "textio.c"
        var $354=($353)!=0; //@line 1778 "textio.c"
        if ($354) { __label__ = 73; break; } else { __label__ = 75; break; } //@line 1778 "textio.c"
      case 73: // $bb79
        var $355=$remaining; //@line 1778 "textio.c"
        $_py_tmp80=$355; //@line 1778 "textio.c"
        $remaining=0; //@line 1778 "textio.c"
        var $356=$_py_tmp80; //@line 1778 "textio.c"
        var $357=$356; //@line 1778 "textio.c"
        var $358=HEAP[$357]; //@line 1778 "textio.c"
        var $359=($358) - 1; //@line 1778 "textio.c"
        var $360=$_py_tmp80; //@line 1778 "textio.c"
        var $361=$360; //@line 1778 "textio.c"
        HEAP[$361]=$359; //@line 1778 "textio.c"
        var $362=$_py_tmp80; //@line 1778 "textio.c"
        var $363=$362; //@line 1778 "textio.c"
        var $364=HEAP[$363]; //@line 1778 "textio.c"
        var $365=($364)==0; //@line 1778 "textio.c"
        if ($365) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 1778 "textio.c"
      case 74: // $bb81
        var $366=$_py_tmp80; //@line 1778 "textio.c"
        var $367=$366+4; //@line 1778 "textio.c"
        var $368=HEAP[$367]; //@line 1778 "textio.c"
        var $369=$368+24; //@line 1778 "textio.c"
        var $370=HEAP[$369]; //@line 1778 "textio.c"
        var $371=$_py_tmp80; //@line 1778 "textio.c"
        FUNCTION_TABLE[$370]($371); //@line 1778 "textio.c"
        __label__ = 75; break; //@line 1778 "textio.c"
      case 75: // $bb82
        var $372=$chunks; //@line 1780 "textio.c"
        var $373=($372)!=0; //@line 1780 "textio.c"
        if ($373) { __label__ = 76; break; } else { __label__ = 84; break; } //@line 1780 "textio.c"
      case 76: // $bb83
        var $374=HEAP[$line]; //@line 1781 "textio.c"
        var $375=($374)!=0; //@line 1781 "textio.c"
        if ($375) { __label__ = 77; break; } else { __label__ = 81; break; } //@line 1781 "textio.c"
      case 77: // $bb84
        var $376=HEAP[$line]; //@line 1781 "textio.c"
        var $377=$chunks; //@line 1781 "textio.c"
        var $378=_PyList_Append($377, $376); //@line 1781 "textio.c"
        var $379=($378) < 0; //@line 1781 "textio.c"
        if ($379) { __label__ = 87; break; } else { __label__ = 78; break; } //@line 1781 "textio.c"
      case 78: // $bb85
        var $_pr3=HEAP[$line];
        var $380=($_pr3)!=0; //@line 1783 "textio.c"
        if ($380) { __label__ = 79; break; } else { __label__ = 81; break; } //@line 1783 "textio.c"
      case 79: // $bb86
        var $381=HEAP[$line]; //@line 1783 "textio.c"
        $_py_tmp87=$381; //@line 1783 "textio.c"
        HEAP[$line]=0; //@line 1783 "textio.c"
        var $382=$_py_tmp87; //@line 1783 "textio.c"
        var $383=$382; //@line 1783 "textio.c"
        var $384=HEAP[$383]; //@line 1783 "textio.c"
        var $385=($384) - 1; //@line 1783 "textio.c"
        var $386=$_py_tmp87; //@line 1783 "textio.c"
        var $387=$386; //@line 1783 "textio.c"
        HEAP[$387]=$385; //@line 1783 "textio.c"
        var $388=$_py_tmp87; //@line 1783 "textio.c"
        var $389=$388; //@line 1783 "textio.c"
        var $390=HEAP[$389]; //@line 1783 "textio.c"
        var $391=($390)==0; //@line 1783 "textio.c"
        if ($391) { __label__ = 80; break; } else { __label__ = 81; break; } //@line 1783 "textio.c"
      case 80: // $bb88
        var $392=$_py_tmp87; //@line 1783 "textio.c"
        var $393=$392+4; //@line 1783 "textio.c"
        var $394=HEAP[$393]; //@line 1783 "textio.c"
        var $395=$394+24; //@line 1783 "textio.c"
        var $396=HEAP[$395]; //@line 1783 "textio.c"
        var $397=$_py_tmp87; //@line 1783 "textio.c"
        FUNCTION_TABLE[$396]($397); //@line 1783 "textio.c"
        __label__ = 81; break; //@line 1783 "textio.c"
      case 81: // $bb89
        var $398=HEAP[__PyIO_empty_str]; //@line 1784 "textio.c"
        var $399=$chunks; //@line 1784 "textio.c"
        var $400=_PyUnicodeUCS2_Join($398, $399); //@line 1784 "textio.c"
        HEAP[$line]=$400; //@line 1784 "textio.c"
        var $401=($400)==0; //@line 1785 "textio.c"
        if ($401) { __label__ = 87; break; } else { __label__ = 82; break; } //@line 1785 "textio.c"
      case 82: // $bb90
        var $402=$chunks; //@line 1787 "textio.c"
        var $403=$402; //@line 1787 "textio.c"
        var $404=HEAP[$403]; //@line 1787 "textio.c"
        var $405=($404) - 1; //@line 1787 "textio.c"
        var $406=$chunks; //@line 1787 "textio.c"
        var $407=$406; //@line 1787 "textio.c"
        HEAP[$407]=$405; //@line 1787 "textio.c"
        var $408=$chunks; //@line 1787 "textio.c"
        var $409=$408; //@line 1787 "textio.c"
        var $410=HEAP[$409]; //@line 1787 "textio.c"
        var $411=($410)==0; //@line 1787 "textio.c"
        if ($411) { __label__ = 83; break; } else { __label__ = 84; break; } //@line 1787 "textio.c"
      case 83: // $bb91
        var $412=$chunks; //@line 1787 "textio.c"
        var $413=$412+4; //@line 1787 "textio.c"
        var $414=HEAP[$413]; //@line 1787 "textio.c"
        var $415=$414+24; //@line 1787 "textio.c"
        var $416=HEAP[$415]; //@line 1787 "textio.c"
        var $417=$chunks; //@line 1787 "textio.c"
        FUNCTION_TABLE[$416]($417); //@line 1787 "textio.c"
        __label__ = 84; break; //@line 1787 "textio.c"
      case 84: // $bb92
        var $418=HEAP[$line]; //@line 1789 "textio.c"
        var $419=($418)==0; //@line 1789 "textio.c"
        if ($419) { __label__ = 85; break; } else { __label__ = 86; break; } //@line 1789 "textio.c"
      case 85: // $bb93
        var $420=_PyUnicodeUCS2_FromStringAndSize(0, 0); //@line 1790 "textio.c"
        HEAP[$line]=$420; //@line 1790 "textio.c"
        __label__ = 86; break; //@line 1790 "textio.c"
      case 86: // $bb94
        var $421=HEAP[$line]; //@line 1792 "textio.c"
        $0=$421; //@line 1792 "textio.c"
        __label__ = 97; break; //@line 1792 "textio.c"
      case 87: // $error
        var $_pr4=$chunks;
        var $422=($_pr4)!=0; //@line 1795 "textio.c"
        if ($422) { __label__ = 88; break; } else { __label__ = 90; break; } //@line 1795 "textio.c"
      case 88: // $bb95
        var $423=$chunks; //@line 1795 "textio.c"
        var $424=$423; //@line 1795 "textio.c"
        var $425=HEAP[$424]; //@line 1795 "textio.c"
        var $426=($425) - 1; //@line 1795 "textio.c"
        var $427=$chunks; //@line 1795 "textio.c"
        var $428=$427; //@line 1795 "textio.c"
        HEAP[$428]=$426; //@line 1795 "textio.c"
        var $429=$chunks; //@line 1795 "textio.c"
        var $430=$429; //@line 1795 "textio.c"
        var $431=HEAP[$430]; //@line 1795 "textio.c"
        var $432=($431)==0; //@line 1795 "textio.c"
        if ($432) { __label__ = 89; break; } else { __label__ = 90; break; } //@line 1795 "textio.c"
      case 89: // $bb96
        var $433=$chunks; //@line 1795 "textio.c"
        var $434=$433+4; //@line 1795 "textio.c"
        var $435=HEAP[$434]; //@line 1795 "textio.c"
        var $436=$435+24; //@line 1795 "textio.c"
        var $437=HEAP[$436]; //@line 1795 "textio.c"
        var $438=$chunks; //@line 1795 "textio.c"
        FUNCTION_TABLE[$437]($438); //@line 1795 "textio.c"
        __label__ = 90; break; //@line 1795 "textio.c"
      case 90: // $bb97
        var $439=$remaining; //@line 1796 "textio.c"
        var $440=($439)!=0; //@line 1796 "textio.c"
        if ($440) { __label__ = 91; break; } else { __label__ = 93; break; } //@line 1796 "textio.c"
      case 91: // $bb98
        var $441=$remaining; //@line 1796 "textio.c"
        var $442=$441; //@line 1796 "textio.c"
        var $443=HEAP[$442]; //@line 1796 "textio.c"
        var $444=($443) - 1; //@line 1796 "textio.c"
        var $445=$remaining; //@line 1796 "textio.c"
        var $446=$445; //@line 1796 "textio.c"
        HEAP[$446]=$444; //@line 1796 "textio.c"
        var $447=$remaining; //@line 1796 "textio.c"
        var $448=$447; //@line 1796 "textio.c"
        var $449=HEAP[$448]; //@line 1796 "textio.c"
        var $450=($449)==0; //@line 1796 "textio.c"
        if ($450) { __label__ = 92; break; } else { __label__ = 93; break; } //@line 1796 "textio.c"
      case 92: // $bb99
        var $451=$remaining; //@line 1796 "textio.c"
        var $452=$451+4; //@line 1796 "textio.c"
        var $453=HEAP[$452]; //@line 1796 "textio.c"
        var $454=$453+24; //@line 1796 "textio.c"
        var $455=HEAP[$454]; //@line 1796 "textio.c"
        var $456=$remaining; //@line 1796 "textio.c"
        FUNCTION_TABLE[$455]($456); //@line 1796 "textio.c"
        __label__ = 93; break; //@line 1796 "textio.c"
      case 93: // $bb100
        var $457=HEAP[$line]; //@line 1797 "textio.c"
        var $458=($457)!=0; //@line 1797 "textio.c"
        if ($458) { __label__ = 94; break; } else { __label__ = 96; break; } //@line 1797 "textio.c"
      case 94: // $bb101
        var $459=HEAP[$line]; //@line 1797 "textio.c"
        var $460=$459; //@line 1797 "textio.c"
        var $461=HEAP[$460]; //@line 1797 "textio.c"
        var $462=($461) - 1; //@line 1797 "textio.c"
        var $463=$459; //@line 1797 "textio.c"
        HEAP[$463]=$462; //@line 1797 "textio.c"
        var $464=$459; //@line 1797 "textio.c"
        var $465=HEAP[$464]; //@line 1797 "textio.c"
        var $466=($465)==0; //@line 1797 "textio.c"
        if ($466) { __label__ = 95; break; } else { __label__ = 96; break; } //@line 1797 "textio.c"
      case 95: // $bb102
        var $467=HEAP[$line]; //@line 1797 "textio.c"
        var $468=$467+4; //@line 1797 "textio.c"
        var $469=HEAP[$468]; //@line 1797 "textio.c"
        var $470=$469+24; //@line 1797 "textio.c"
        var $471=HEAP[$470]; //@line 1797 "textio.c"
        var $472=HEAP[$line]; //@line 1797 "textio.c"
        FUNCTION_TABLE[$471]($472); //@line 1797 "textio.c"
        __label__ = 96; break; //@line 1797 "textio.c"
      case 96: // $bb103
        $0=0; //@line 1798 "textio.c"
        __label__ = 97; break; //@line 1798 "textio.c"
      case 97: // $bb104
        var $473=$0; //@line 1654 "textio.c"
        $retval=$473; //@line 1654 "textio.c"
        var $retval105=$retval; //@line 1654 "textio.c"
        STACKTOP = __stackBase__;
        return $retval105; //@line 1654 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_readline($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $limitobj=__stackBase__;
        var $limit;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$limitobj]=0; //@line 1804 "textio.c"
        $limit=-1; //@line 1805 "textio.c"
        var $1=$self_addr; //@line 1807 "textio.c"
        var $2=$1+8; //@line 1807 "textio.c"
        var $3=HEAP[$2]; //@line 1807 "textio.c"
        var $4=($3) <= 0; //@line 1807 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 1807 "textio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 1807 "textio.c"
        var $6=$5+12; //@line 1807 "textio.c"
        var $7=HEAP[$6]; //@line 1807 "textio.c"
        var $8=($7)!=0; //@line 1807 "textio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 1807 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1807 "textio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str57433); //@line 1807 "textio.c"
        __label__ = 4; break; //@line 1807 "textio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str58434); //@line 1807 "textio.c"
        __label__ = 4; break; //@line 1807 "textio.c"
      case 4: // $bb3
        $0=0; //@line 1807 "textio.c"
        __label__ = 14; break; //@line 1807 "textio.c"
      case 5: // $bb4
        var $10=$args_addr; //@line 1808 "textio.c"
        var $11=__PyArg_ParseTuple_SizeT($10, __str71447, allocate([$limitobj,0,0,0], ["%struct.PyObject**",0,0,0], ALLOC_STACK)); //@line 1808 "textio.c"
        var $12=($11)==0; //@line 1808 "textio.c"
        if ($12) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1808 "textio.c"
      case 6: // $bb5
        $0=0; //@line 1809 "textio.c"
        __label__ = 14; break; //@line 1809 "textio.c"
      case 7: // $bb6
        var $13=HEAP[$limitobj]; //@line 1811 "textio.c"
        var $14=($13)!=0; //@line 1811 "textio.c"
        if ($14) { __label__ = 8; break; } else { __label__ = 13; break; } //@line 1811 "textio.c"
      case 8: // $bb7
        var $15=HEAP[$limitobj]; //@line 1812 "textio.c"
        var $16=_PyNumber_Check($15); //@line 1812 "textio.c"
        var $17=($16)==0; //@line 1812 "textio.c"
        if ($17) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1812 "textio.c"
      case 9: // $bb8
        var $18=HEAP[$limitobj]; //@line 1813 "textio.c"
        var $19=$18+4; //@line 1813 "textio.c"
        var $20=HEAP[$19]; //@line 1813 "textio.c"
        var $21=$20+12; //@line 1813 "textio.c"
        var $22=HEAP[$21]; //@line 1813 "textio.c"
        var $23=HEAP[_PyExc_TypeError]; //@line 1813 "textio.c"
        var $24=_PyErr_Format($23, __str72448, allocate([$22,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 1813 "textio.c"
        $0=0; //@line 1816 "textio.c"
        __label__ = 14; break; //@line 1816 "textio.c"
      case 10: // $bb9
        var $25=HEAP[_PyExc_OverflowError]; //@line 1818 "textio.c"
        var $26=HEAP[$limitobj]; //@line 1818 "textio.c"
        var $27=_PyNumber_AsSsize_t($26, $25); //@line 1818 "textio.c"
        $limit=$27; //@line 1818 "textio.c"
        var $28=$limit; //@line 1819 "textio.c"
        var $29=($28)==-1; //@line 1819 "textio.c"
        if ($29) { __label__ = 11; break; } else { __label__ = 13; break; } //@line 1819 "textio.c"
      case 11: // $bb10
        var $30=_PyErr_Occurred(); //@line 1819 "textio.c"
        var $31=($30)!=0; //@line 1819 "textio.c"
        if ($31) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1819 "textio.c"
      case 12: // $bb11
        $0=0; //@line 1820 "textio.c"
        __label__ = 14; break; //@line 1820 "textio.c"
      case 13: // $bb12
        var $32=$self_addr; //@line 1822 "textio.c"
        var $33=$limit; //@line 1822 "textio.c"
        var $34=__textiowrapper_readline($32, $33); //@line 1822 "textio.c"
        $0=$34; //@line 1822 "textio.c"
        __label__ = 14; break; //@line 1822 "textio.c"
      case 14: // $bb13
        var $35=$0; //@line 1807 "textio.c"
        $retval=$35; //@line 1807 "textio.c"
        var $retval14=$retval; //@line 1807 "textio.c"
        STACKTOP = __stackBase__;
        return $retval14; //@line 1807 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_parse_cookie($cookie, $cookieObj) {
    var __stackBase__  = STACKTOP; STACKTOP += 21; _memset(__stackBase__, 0, 21);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $cookie_addr;
        var $cookieObj_addr;
        var $retval;
        var $0;
        var $buffer=__stackBase__;
        var $cookieLong;
        $cookie_addr=$cookie;
        $cookieObj_addr=$cookieObj;
        var $1=$cookieObj_addr; //@line 1877 "textio.c"
        var $2=_PyNumber_Long($1); //@line 1877 "textio.c"
        var $3=$2; //@line 1877 "textio.c"
        $cookieLong=$3; //@line 1877 "textio.c"
        var $4=$cookieLong; //@line 1878 "textio.c"
        var $5=($4)==0; //@line 1878 "textio.c"
        if ($5) { __label__ = 1; break; } else { __label__ = 2; break; } //@line 1878 "textio.c"
      case 1: // $bb
        $0=-1; //@line 1879 "textio.c"
        __label__ = 9; break; //@line 1879 "textio.c"
      case 2: // $bb1
        var $6=$cookieLong; //@line 1881 "textio.c"
        var $buffer2=$buffer; //@line 1881 "textio.c"
        var $7=__PyLong_AsByteArray($6, $buffer2, 21, 1, 0); //@line 1881 "textio.c"
        var $8=($7) < 0; //@line 1881 "textio.c"
        var $9=$cookieLong; //@line 1883 "textio.c"
        var $10=$9; //@line 1883 "textio.c"
        var $11=$10; //@line 1883 "textio.c"
        var $12=HEAP[$11]; //@line 1883 "textio.c"
        var $13=($12) - 1; //@line 1883 "textio.c"
        var $14=$10; //@line 1883 "textio.c"
        HEAP[$14]=$13; //@line 1883 "textio.c"
        var $15=$10; //@line 1883 "textio.c"
        var $16=HEAP[$15]; //@line 1883 "textio.c"
        var $17=($16)==0; //@line 1883 "textio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 1881 "textio.c"
      case 3: // $bb3
        if ($17) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1883 "textio.c"
      case 4: // $bb4
        var $18=$cookieLong; //@line 1883 "textio.c"
        var $19=$18; //@line 1883 "textio.c"
        var $20=$19+4; //@line 1883 "textio.c"
        var $21=HEAP[$20]; //@line 1883 "textio.c"
        var $22=$21+24; //@line 1883 "textio.c"
        var $23=HEAP[$22]; //@line 1883 "textio.c"
        var $24=$cookieLong; //@line 1883 "textio.c"
        var $25=$24; //@line 1883 "textio.c"
        FUNCTION_TABLE[$23]($25); //@line 1883 "textio.c"
        __label__ = 5; break; //@line 1883 "textio.c"
      case 5: // $bb5
        $0=-1; //@line 1884 "textio.c"
        __label__ = 9; break; //@line 1884 "textio.c"
      case 6: // $bb6
        if ($17) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1886 "textio.c"
      case 7: // $bb7
        var $26=$cookieLong; //@line 1886 "textio.c"
        var $27=$26; //@line 1886 "textio.c"
        var $28=$27+4; //@line 1886 "textio.c"
        var $29=HEAP[$28]; //@line 1886 "textio.c"
        var $30=$29+24; //@line 1886 "textio.c"
        var $31=HEAP[$30]; //@line 1886 "textio.c"
        var $32=$cookieLong; //@line 1886 "textio.c"
        var $33=$32; //@line 1886 "textio.c"
        FUNCTION_TABLE[$31]($33); //@line 1886 "textio.c"
        __label__ = 8; break; //@line 1886 "textio.c"
      case 8: // $bb8
        var $34=$cookie_addr; //@line 1888 "textio.c"
        var $35=$34; //@line 1888 "textio.c"
        var $buffer9=$buffer; //@line 1888 "textio.c"
        var $36=$buffer9; //@line 1888 "textio.c"
        var $37=$35; //@line 1888 "textio.c"
        _llvm_memcpy_p0i8_p0i8_i32($37, $36, 8, 1, 0); //@line 1888 "textio.c"
        var $38=$cookie_addr; //@line 1889 "textio.c"
        var $39=$38+8; //@line 1889 "textio.c"
        var $buffer10=$buffer; //@line 1889 "textio.c"
        var $40=$buffer10+8; //@line 1889 "textio.c"
        var $41=$39; //@line 1889 "textio.c"
        _llvm_memcpy_p0i8_p0i8_i32($41, $40, 4, 1, 0); //@line 1889 "textio.c"
        var $42=$cookie_addr; //@line 1890 "textio.c"
        var $43=$42+12; //@line 1890 "textio.c"
        var $buffer11=$buffer; //@line 1890 "textio.c"
        var $44=$buffer11+12; //@line 1890 "textio.c"
        var $45=$43; //@line 1890 "textio.c"
        _llvm_memcpy_p0i8_p0i8_i32($45, $44, 4, 1, 0); //@line 1890 "textio.c"
        var $46=$cookie_addr; //@line 1891 "textio.c"
        var $47=$46+16; //@line 1891 "textio.c"
        var $buffer12=$buffer; //@line 1891 "textio.c"
        var $48=$buffer12+16; //@line 1891 "textio.c"
        var $49=$47; //@line 1891 "textio.c"
        _llvm_memcpy_p0i8_p0i8_i32($49, $48, 4, 1, 0); //@line 1891 "textio.c"
        var $50=$cookie_addr; //@line 1892 "textio.c"
        var $51=$50+20; //@line 1892 "textio.c"
        var $buffer13=$buffer; //@line 1892 "textio.c"
        var $52=$buffer13+20; //@line 1892 "textio.c"
        _llvm_memcpy_p0i8_p0i8_i32($51, $52, 1, 1, 0); //@line 1892 "textio.c"
        $0=0; //@line 1894 "textio.c"
        __label__ = 9; break; //@line 1894 "textio.c"
      case 9: // $bb14
        var $53=$0; //@line 1879 "textio.c"
        $retval=$53; //@line 1879 "textio.c"
        var $retval15=$retval; //@line 1879 "textio.c"
        STACKTOP = __stackBase__;
        return $retval15; //@line 1879 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_build_cookie($cookie) {
    var __stackBase__  = STACKTOP; STACKTOP += 21; _memset(__stackBase__, 0, 21);
    var __label__;
  
    var $cookie_addr;
    var $retval;
    var $0;
    var $buffer=__stackBase__;
    $cookie_addr=$cookie;
    var $1=$cookie_addr; //@line 1902 "textio.c"
    var $2=$1; //@line 1902 "textio.c"
    var $buffer1=$buffer; //@line 1902 "textio.c"
    var $3=$buffer1; //@line 1902 "textio.c"
    var $4=$2; //@line 1902 "textio.c"
    _llvm_memcpy_p0i8_p0i8_i32($3, $4, 8, 1, 0); //@line 1902 "textio.c"
    var $5=$cookie_addr; //@line 1903 "textio.c"
    var $6=$5+8; //@line 1903 "textio.c"
    var $buffer2=$buffer; //@line 1903 "textio.c"
    var $7=$buffer2+8; //@line 1903 "textio.c"
    var $8=$6; //@line 1903 "textio.c"
    _llvm_memcpy_p0i8_p0i8_i32($7, $8, 4, 1, 0); //@line 1903 "textio.c"
    var $9=$cookie_addr; //@line 1904 "textio.c"
    var $10=$9+12; //@line 1904 "textio.c"
    var $buffer3=$buffer; //@line 1904 "textio.c"
    var $11=$buffer3+12; //@line 1904 "textio.c"
    var $12=$10; //@line 1904 "textio.c"
    _llvm_memcpy_p0i8_p0i8_i32($11, $12, 4, 1, 0); //@line 1904 "textio.c"
    var $13=$cookie_addr; //@line 1905 "textio.c"
    var $14=$13+16; //@line 1905 "textio.c"
    var $buffer4=$buffer; //@line 1905 "textio.c"
    var $15=$buffer4+16; //@line 1905 "textio.c"
    var $16=$14; //@line 1905 "textio.c"
    _llvm_memcpy_p0i8_p0i8_i32($15, $16, 4, 1, 0); //@line 1905 "textio.c"
    var $17=$cookie_addr; //@line 1906 "textio.c"
    var $18=$17+20; //@line 1906 "textio.c"
    var $buffer5=$buffer; //@line 1906 "textio.c"
    var $19=$buffer5+20; //@line 1906 "textio.c"
    _llvm_memcpy_p0i8_p0i8_i32($19, $18, 1, 1, 0); //@line 1906 "textio.c"
    var $buffer6=$buffer; //@line 1908 "textio.c"
    var $20=__PyLong_FromByteArray($buffer6, 21, 1, 0); //@line 1908 "textio.c"
    $0=$20; //@line 1908 "textio.c"
    var $21=$0; //@line 1908 "textio.c"
    $retval=$21; //@line 1908 "textio.c"
    var $retval7=$retval; //@line 1908 "textio.c"
    STACKTOP = __stackBase__;
    return $retval7; //@line 1908 "textio.c"
  }
  

  function __textiowrapper_decoder_setstate($self, $cookie) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $cookie_addr;
        var $retval;
        var $0;
        var $res;
        $self_addr=$self;
        $cookie_addr=$cookie;
        var $1=$cookie_addr; //@line 1922 "textio.c"
        var $2=$1; //@line 1922 "textio.c"
        var $3=HEAP[$2]; //@line 1922 "textio.c"
        var $4=($3)!=0; //@line 1922 "textio.c"
        if ($4) { __label__ = 3; break; } else { __label__ = 1; break; } //@line 1922 "textio.c"
      case 1: // $bb
        var $5=$cookie_addr; //@line 1922 "textio.c"
        var $6=$5+8; //@line 1922 "textio.c"
        var $7=HEAP[$6]; //@line 1922 "textio.c"
        var $8=($7)!=0; //@line 1922 "textio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 1922 "textio.c"
      case 2: // $bb1
        var $9=HEAP[__PyIO_str_reset]; //@line 1923 "textio.c"
        var $10=$self_addr; //@line 1923 "textio.c"
        var $11=$10+32; //@line 1923 "textio.c"
        var $12=HEAP[$11]; //@line 1923 "textio.c"
        var $13=_PyObject_CallMethodObjArgs($12, $9, allocate(4, "i8*", ALLOC_STACK)); //@line 1923 "textio.c"
        $res=$13; //@line 1923 "textio.c"
        __lastLabel__ = 2; __label__ = 4; break; //@line 1923 "textio.c"
      case 3: // $bb2
        var $14=$cookie_addr; //@line 1925 "textio.c"
        var $15=$14+8; //@line 1925 "textio.c"
        var $16=HEAP[$15]; //@line 1925 "textio.c"
        var $17=$self_addr; //@line 1925 "textio.c"
        var $18=$17+32; //@line 1925 "textio.c"
        var $19=HEAP[$18]; //@line 1925 "textio.c"
        var $20=__PyObject_CallMethod_SizeT($19, __str22397, __str73449, allocate([__str20395,0,0,0,$16,0,0,0], ["i8*",0,0,0,"i32",0,0,0], ALLOC_STACK)); //@line 1925 "textio.c"
        $res=$20; //@line 1925 "textio.c"
        __lastLabel__ = 3; __label__ = 4; break; //@line 1925 "textio.c"
      case 4: // $bb3
        var $21=__lastLabel__ == 3 ? $20 : ($13);
        var $22=($21)==0; //@line 1927 "textio.c"
        if ($22) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1927 "textio.c"
      case 5: // $bb4
        $0=-1; //@line 1928 "textio.c"
        __label__ = 9; break; //@line 1928 "textio.c"
      case 6: // $bb5
        var $23=$res; //@line 1929 "textio.c"
        var $24=$23; //@line 1929 "textio.c"
        var $25=HEAP[$24]; //@line 1929 "textio.c"
        var $26=($25) - 1; //@line 1929 "textio.c"
        var $27=$res; //@line 1929 "textio.c"
        var $28=$27; //@line 1929 "textio.c"
        HEAP[$28]=$26; //@line 1929 "textio.c"
        var $29=$res; //@line 1929 "textio.c"
        var $30=$29; //@line 1929 "textio.c"
        var $31=HEAP[$30]; //@line 1929 "textio.c"
        var $32=($31)==0; //@line 1929 "textio.c"
        if ($32) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1929 "textio.c"
      case 7: // $bb6
        var $33=$res; //@line 1929 "textio.c"
        var $34=$33+4; //@line 1929 "textio.c"
        var $35=HEAP[$34]; //@line 1929 "textio.c"
        var $36=$35+24; //@line 1929 "textio.c"
        var $37=HEAP[$36]; //@line 1929 "textio.c"
        var $38=$res; //@line 1929 "textio.c"
        FUNCTION_TABLE[$37]($38); //@line 1929 "textio.c"
        __label__ = 8; break; //@line 1929 "textio.c"
      case 8: // $bb7
        $0=0; //@line 1930 "textio.c"
        __label__ = 9; break; //@line 1930 "textio.c"
      case 9: // $bb8
        var $39=$0; //@line 1928 "textio.c"
        $retval=$39; //@line 1928 "textio.c"
        var $retval9=$retval; //@line 1928 "textio.c"
        ;
        return $retval9; //@line 1928 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function __textiowrapper_encoder_setstate($self, $cookie) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $cookie_addr;
        var $retval;
        var $0;
        var $res;
        $self_addr=$self;
        $cookie_addr=$cookie;
        var $1=$cookie_addr; //@line 1938 "textio.c"
        var $2=$1; //@line 1938 "textio.c"
        var $3=HEAP[$2]; //@line 1938 "textio.c"
        var $4=($3)!=0; //@line 1938 "textio.c"
        if ($4) { __label__ = 3; break; } else { __label__ = 1; break; } //@line 1938 "textio.c"
      case 1: // $bb
        var $5=$cookie_addr; //@line 1938 "textio.c"
        var $6=$5+8; //@line 1938 "textio.c"
        var $7=HEAP[$6]; //@line 1938 "textio.c"
        var $8=($7)!=0; //@line 1938 "textio.c"
        if ($8) { __label__ = 3; break; } else { __label__ = 2; break; } //@line 1938 "textio.c"
      case 2: // $bb1
        var $9=HEAP[__PyIO_str_reset]; //@line 1939 "textio.c"
        var $10=$self_addr; //@line 1939 "textio.c"
        var $11=$10+28; //@line 1939 "textio.c"
        var $12=HEAP[$11]; //@line 1939 "textio.c"
        var $13=_PyObject_CallMethodObjArgs($12, $9, allocate(4, "i8*", ALLOC_STACK)); //@line 1939 "textio.c"
        $res=$13; //@line 1939 "textio.c"
        var $14=$self_addr; //@line 1940 "textio.c"
        var $15=$14+60; //@line 1940 "textio.c"
        HEAP[$15]=1; //@line 1940 "textio.c"
        __label__ = 4; break; //@line 1940 "textio.c"
      case 3: // $bb2
        var $16=HEAP[__PyIO_zero]; //@line 1943 "textio.c"
        var $17=HEAP[__PyIO_str_setstate]; //@line 1943 "textio.c"
        var $18=$self_addr; //@line 1943 "textio.c"
        var $19=$18+28; //@line 1943 "textio.c"
        var $20=HEAP[$19]; //@line 1943 "textio.c"
        var $21=_PyObject_CallMethodObjArgs($20, $17, allocate([$16,0,0,0,0,0,0,0], ["%struct.PyObject*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 1943 "textio.c"
        $res=$21; //@line 1943 "textio.c"
        var $22=$self_addr; //@line 1945 "textio.c"
        var $23=$22+60; //@line 1945 "textio.c"
        HEAP[$23]=0; //@line 1945 "textio.c"
        __label__ = 4; break; //@line 1945 "textio.c"
      case 4: // $bb3
        var $24=$res; //@line 1947 "textio.c"
        var $25=($24)==0; //@line 1947 "textio.c"
        if ($25) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 1947 "textio.c"
      case 5: // $bb4
        $0=-1; //@line 1948 "textio.c"
        __label__ = 9; break; //@line 1948 "textio.c"
      case 6: // $bb5
        var $26=$res; //@line 1949 "textio.c"
        var $27=$26; //@line 1949 "textio.c"
        var $28=HEAP[$27]; //@line 1949 "textio.c"
        var $29=($28) - 1; //@line 1949 "textio.c"
        var $30=$res; //@line 1949 "textio.c"
        var $31=$30; //@line 1949 "textio.c"
        HEAP[$31]=$29; //@line 1949 "textio.c"
        var $32=$res; //@line 1949 "textio.c"
        var $33=$32; //@line 1949 "textio.c"
        var $34=HEAP[$33]; //@line 1949 "textio.c"
        var $35=($34)==0; //@line 1949 "textio.c"
        if ($35) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 1949 "textio.c"
      case 7: // $bb6
        var $36=$res; //@line 1949 "textio.c"
        var $37=$36+4; //@line 1949 "textio.c"
        var $38=HEAP[$37]; //@line 1949 "textio.c"
        var $39=$38+24; //@line 1949 "textio.c"
        var $40=HEAP[$39]; //@line 1949 "textio.c"
        var $41=$res; //@line 1949 "textio.c"
        FUNCTION_TABLE[$40]($41); //@line 1949 "textio.c"
        __label__ = 8; break; //@line 1949 "textio.c"
      case 8: // $bb7
        $0=0; //@line 1950 "textio.c"
        __label__ = 9; break; //@line 1950 "textio.c"
      case 9: // $bb8
        var $42=$0; //@line 1948 "textio.c"
        $retval=$42; //@line 1948 "textio.c"
        var $retval9=$retval; //@line 1948 "textio.c"
        ;
        return $retval9; //@line 1948 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_seek($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 32; _memset(__stackBase__, 0, 32);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $cookieObj=__stackBase__;
        var $posobj;
        var $cookie=__stackBase__+4;
        var $whence=__stackBase__+28;
        var $res;
        var $cmp;
        var $r;
        var $_res;
        var $_py_tmp;
        var $repr;
        var $_py_tmp68;
        var $input_chunk;
        var $decoded;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$whence]=0; //@line 1958 "textio.c"
        var $1=$self_addr; //@line 1962 "textio.c"
        var $2=$1+8; //@line 1962 "textio.c"
        var $3=HEAP[$2]; //@line 1962 "textio.c"
        var $4=($3) <= 0; //@line 1962 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 1962 "textio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 1962 "textio.c"
        var $6=$5+12; //@line 1962 "textio.c"
        var $7=HEAP[$6]; //@line 1962 "textio.c"
        var $8=($7)!=0; //@line 1962 "textio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 1962 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 1962 "textio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str57433); //@line 1962 "textio.c"
        __label__ = 4; break; //@line 1962 "textio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str58434); //@line 1962 "textio.c"
        __label__ = 4; break; //@line 1962 "textio.c"
      case 4: // $bb3
        $0=0; //@line 1962 "textio.c"
        __label__ = 88; break; //@line 1962 "textio.c"
      case 5: // $bb4
        var $10=$args_addr; //@line 1964 "textio.c"
        var $11=__PyArg_ParseTuple_SizeT($10, __str74, allocate([$cookieObj,0,0,0,$whence,0,0,0], ["%struct.PyObject**",0,0,0,"i32*",0,0,0], ALLOC_STACK)); //@line 1964 "textio.c"
        var $12=($11)==0; //@line 1964 "textio.c"
        if ($12) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1964 "textio.c"
      case 6: // $bb5
        $0=0; //@line 1965 "textio.c"
        __label__ = 88; break; //@line 1965 "textio.c"
      case 7: // $bb6
        var $13=$self_addr; //@line 1966 "textio.c"
        var $14=$13; //@line 1966 "textio.c"
        var $15=$14+4; //@line 1966 "textio.c"
        var $16=HEAP[$15]; //@line 1966 "textio.c"
        var $17=($16)==(_PyTextIOWrapper_Type); //@line 1966 "textio.c"
        var $18=$self_addr; //@line 1966 "textio.c"
        if ($17) { __label__ = 8; break; } else { __label__ = 18; break; } //@line 1966 "textio.c"
      case 8: // $bb7
        var $19=$18+84; //@line 1966 "textio.c"
        var $20=HEAP[$19]; //@line 1966 "textio.c"
        var $21=($20)!=0; //@line 1966 "textio.c"
        var $22=$self_addr; //@line 1966 "textio.c"
        if ($21) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1966 "textio.c"
      case 9: // $bb8
        var $23=$22+84; //@line 1966 "textio.c"
        var $24=HEAP[$23]; //@line 1966 "textio.c"
        var $25=__PyFileIO_closed($24); //@line 1966 "textio.c"
        $r=$25; //@line 1966 "textio.c"
        __lastLabel__ = 9; __label__ = 16; break; //@line 1966 "textio.c"
      case 10: // $bb9
        var $26=_textiowrapper_closed_get($22, 0); //@line 1966 "textio.c"
        $_res=$26; //@line 1966 "textio.c"
        var $27=$_res; //@line 1966 "textio.c"
        var $28=($27)==0; //@line 1966 "textio.c"
        if ($28) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 1966 "textio.c"
      case 11: // $bb10
        $0=0; //@line 1966 "textio.c"
        __label__ = 88; break; //@line 1966 "textio.c"
      case 12: // $bb11
        var $29=$_res; //@line 1966 "textio.c"
        var $30=_PyObject_IsTrue($29); //@line 1966 "textio.c"
        $r=$30; //@line 1966 "textio.c"
        var $31=$_res; //@line 1966 "textio.c"
        var $32=$31; //@line 1966 "textio.c"
        var $33=HEAP[$32]; //@line 1966 "textio.c"
        var $34=($33) - 1; //@line 1966 "textio.c"
        var $35=$_res; //@line 1966 "textio.c"
        var $36=$35; //@line 1966 "textio.c"
        HEAP[$36]=$34; //@line 1966 "textio.c"
        var $37=$_res; //@line 1966 "textio.c"
        var $38=$37; //@line 1966 "textio.c"
        var $39=HEAP[$38]; //@line 1966 "textio.c"
        var $40=($39)==0; //@line 1966 "textio.c"
        if ($40) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 1966 "textio.c"
      case 13: // $bb12
        var $41=$_res; //@line 1966 "textio.c"
        var $42=$41+4; //@line 1966 "textio.c"
        var $43=HEAP[$42]; //@line 1966 "textio.c"
        var $44=$43+24; //@line 1966 "textio.c"
        var $45=HEAP[$44]; //@line 1966 "textio.c"
        var $46=$_res; //@line 1966 "textio.c"
        FUNCTION_TABLE[$45]($46); //@line 1966 "textio.c"
        __label__ = 14; break; //@line 1966 "textio.c"
      case 14: // $bb13
        var $47=$r; //@line 1966 "textio.c"
        var $48=($47) < 0; //@line 1966 "textio.c"
        if ($48) { __lastLabel__ = 14; __label__ = 15; break; } else { __lastLabel__ = 14; __label__ = 16; break; } //@line 1966 "textio.c"
      case 15: // $bb14
        $0=0; //@line 1966 "textio.c"
        __label__ = 88; break; //@line 1966 "textio.c"
      case 16: // $bb15
        var $49=__lastLabel__ == 14 ? $47 : ($25);
        var $50=($49) > 0; //@line 1966 "textio.c"
        if ($50) { __label__ = 17; break; } else { __label__ = 20; break; } //@line 1966 "textio.c"
      case 17: // $bb16
        var $51=HEAP[_PyExc_ValueError]; //@line 1966 "textio.c"
        _PyErr_SetString($51, __str60436); //@line 1966 "textio.c"
        $0=0; //@line 1966 "textio.c"
        __label__ = 88; break; //@line 1966 "textio.c"
      case 18: // $bb18
        var $52=$18; //@line 1966 "textio.c"
        var $53=__PyIOBase_check_closed($52, __Py_TrueStruct); //@line 1966 "textio.c"
        var $54=($53)==0; //@line 1966 "textio.c"
        if ($54) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 1966 "textio.c"
      case 19: // $bb19
        $0=0; //@line 1966 "textio.c"
        __label__ = 88; break; //@line 1966 "textio.c"
      case 20: // $bb20
        var $55=HEAP[$cookieObj]; //@line 1968 "textio.c"
        var $56=$55; //@line 1968 "textio.c"
        var $57=HEAP[$56]; //@line 1968 "textio.c"
        var $58=($57) + 1; //@line 1968 "textio.c"
        var $59=$55; //@line 1968 "textio.c"
        HEAP[$59]=$58; //@line 1968 "textio.c"
        var $60=$self_addr; //@line 1970 "textio.c"
        var $61=$60+52; //@line 1970 "textio.c"
        var $62=HEAP[$61]; //@line 1970 "textio.c"
        var $63=($62)==0; //@line 1970 "textio.c"
        if ($63) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 1970 "textio.c"
      case 21: // $bb21
        var $64=HEAP[_PyExc_IOError]; //@line 1971 "textio.c"
        _PyErr_SetString($64, __str75); //@line 1971 "textio.c"
        __label__ = 84; break; //@line 1971 "textio.c"
      case 22: // $bb22
        var $65=HEAP[$whence]; //@line 1976 "textio.c"
        var $66=($65)==1; //@line 1976 "textio.c"
        if ($66) { __label__ = 23; break; } else { __label__ = 29; break; } //@line 1976 "textio.c"
      case 23: // $bb23
        var $67=HEAP[__PyIO_zero]; //@line 1978 "textio.c"
        var $68=HEAP[$cookieObj]; //@line 1978 "textio.c"
        var $69=_PyObject_RichCompareBool($68, $67, 2); //@line 1978 "textio.c"
        $cmp=$69; //@line 1978 "textio.c"
        var $70=$cmp; //@line 1979 "textio.c"
        var $71=($70) < 0; //@line 1979 "textio.c"
        if ($71) { __label__ = 84; break; } else { __label__ = 24; break; } //@line 1979 "textio.c"
      case 24: // $bb24
        var $72=$cmp; //@line 1982 "textio.c"
        var $73=($72)==0; //@line 1982 "textio.c"
        if ($73) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 1982 "textio.c"
      case 25: // $bb25
        var $74=HEAP[_PyExc_IOError]; //@line 1983 "textio.c"
        _PyErr_SetString($74, __str76); //@line 1983 "textio.c"
        __label__ = 84; break; //@line 1983 "textio.c"
      case 26: // $bb26
        var $75=HEAP[$cookieObj]; //@line 1991 "textio.c"
        var $76=$75; //@line 1991 "textio.c"
        var $77=HEAP[$76]; //@line 1991 "textio.c"
        var $78=($77) - 1; //@line 1991 "textio.c"
        var $79=$75; //@line 1991 "textio.c"
        HEAP[$79]=$78; //@line 1991 "textio.c"
        var $80=$75; //@line 1991 "textio.c"
        var $81=HEAP[$80]; //@line 1991 "textio.c"
        var $82=($81)==0; //@line 1991 "textio.c"
        if ($82) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 1991 "textio.c"
      case 27: // $bb27
        var $83=HEAP[$cookieObj]; //@line 1991 "textio.c"
        var $84=$83+4; //@line 1991 "textio.c"
        var $85=HEAP[$84]; //@line 1991 "textio.c"
        var $86=$85+24; //@line 1991 "textio.c"
        var $87=HEAP[$86]; //@line 1991 "textio.c"
        var $88=HEAP[$cookieObj]; //@line 1991 "textio.c"
        FUNCTION_TABLE[$87]($88); //@line 1991 "textio.c"
        __label__ = 28; break; //@line 1991 "textio.c"
      case 28: // $bb28
        var $89=$self_addr; //@line 1992 "textio.c"
        var $90=$89; //@line 1992 "textio.c"
        var $91=__PyObject_CallMethod_SizeT($90, __str77, 0, allocate(1, "i32", ALLOC_STACK)); //@line 1992 "textio.c"
        HEAP[$cookieObj]=$91; //@line 1992 "textio.c"
        var $92=($91)==0; //@line 1993 "textio.c"
        if ($92) { __label__ = 87; break; } else { __label__ = 49; break; } //@line 1993 "textio.c"
      case 29: // $bb30
        var $93=HEAP[$whence]; //@line 1996 "textio.c"
        var $94=($93)==2; //@line 1996 "textio.c"
        if ($94) { __label__ = 30; break; } else { __label__ = 47; break; } //@line 1996 "textio.c"
      case 30: // $bb31
        var $95=HEAP[__PyIO_zero]; //@line 1999 "textio.c"
        var $96=HEAP[$cookieObj]; //@line 1999 "textio.c"
        var $97=_PyObject_RichCompareBool($96, $95, 2); //@line 1999 "textio.c"
        $cmp=$97; //@line 1999 "textio.c"
        var $98=$cmp; //@line 2000 "textio.c"
        var $99=($98) < 0; //@line 2000 "textio.c"
        if ($99) { __label__ = 84; break; } else { __label__ = 31; break; } //@line 2000 "textio.c"
      case 31: // $bb32
        var $100=$cmp; //@line 2003 "textio.c"
        var $101=($100)==0; //@line 2003 "textio.c"
        if ($101) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 2003 "textio.c"
      case 32: // $bb33
        var $102=HEAP[_PyExc_IOError]; //@line 2004 "textio.c"
        _PyErr_SetString($102, __str78); //@line 2004 "textio.c"
        __label__ = 84; break; //@line 2004 "textio.c"
      case 33: // $bb34
        var $103=$self_addr; //@line 2009 "textio.c"
        var $104=$103; //@line 2009 "textio.c"
        var $105=__PyObject_CallMethod_SizeT($104, __str79, 0, allocate(1, "i32", ALLOC_STACK)); //@line 2009 "textio.c"
        $res=$105; //@line 2009 "textio.c"
        var $106=$res; //@line 2010 "textio.c"
        var $107=($106)==0; //@line 2010 "textio.c"
        if ($107) { __label__ = 84; break; } else { __label__ = 34; break; } //@line 2010 "textio.c"
      case 34: // $bb35
        var $108=$res; //@line 2012 "textio.c"
        var $109=$108; //@line 2012 "textio.c"
        var $110=HEAP[$109]; //@line 2012 "textio.c"
        var $111=($110) - 1; //@line 2012 "textio.c"
        var $112=$res; //@line 2012 "textio.c"
        var $113=$112; //@line 2012 "textio.c"
        HEAP[$113]=$111; //@line 2012 "textio.c"
        var $114=$res; //@line 2012 "textio.c"
        var $115=$114; //@line 2012 "textio.c"
        var $116=HEAP[$115]; //@line 2012 "textio.c"
        var $117=($116)==0; //@line 2012 "textio.c"
        if ($117) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 2012 "textio.c"
      case 35: // $bb36
        var $118=$res; //@line 2012 "textio.c"
        var $119=$118+4; //@line 2012 "textio.c"
        var $120=HEAP[$119]; //@line 2012 "textio.c"
        var $121=$120+24; //@line 2012 "textio.c"
        var $122=HEAP[$121]; //@line 2012 "textio.c"
        var $123=$res; //@line 2012 "textio.c"
        FUNCTION_TABLE[$122]($123); //@line 2012 "textio.c"
        __label__ = 36; break; //@line 2012 "textio.c"
      case 36: // $bb37
        var $124=$self_addr; //@line 2014 "textio.c"
        _textiowrapper_set_decoded_chars($124, 0); //@line 2014 "textio.c"
        var $125=$self_addr; //@line 2015 "textio.c"
        var $126=$125+80; //@line 2015 "textio.c"
        var $127=HEAP[$126]; //@line 2015 "textio.c"
        var $128=($127)!=0; //@line 2015 "textio.c"
        if ($128) { __label__ = 37; break; } else { __label__ = 39; break; } //@line 2015 "textio.c"
      case 37: // $bb38
        var $129=$self_addr; //@line 2015 "textio.c"
        var $130=$129+80; //@line 2015 "textio.c"
        var $131=HEAP[$130]; //@line 2015 "textio.c"
        $_py_tmp=$131; //@line 2015 "textio.c"
        var $132=$self_addr; //@line 2015 "textio.c"
        var $133=$132+80; //@line 2015 "textio.c"
        HEAP[$133]=0; //@line 2015 "textio.c"
        var $134=$_py_tmp; //@line 2015 "textio.c"
        var $135=$134; //@line 2015 "textio.c"
        var $136=HEAP[$135]; //@line 2015 "textio.c"
        var $137=($136) - 1; //@line 2015 "textio.c"
        var $138=$_py_tmp; //@line 2015 "textio.c"
        var $139=$138; //@line 2015 "textio.c"
        HEAP[$139]=$137; //@line 2015 "textio.c"
        var $140=$_py_tmp; //@line 2015 "textio.c"
        var $141=$140; //@line 2015 "textio.c"
        var $142=HEAP[$141]; //@line 2015 "textio.c"
        var $143=($142)==0; //@line 2015 "textio.c"
        if ($143) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 2015 "textio.c"
      case 38: // $bb39
        var $144=$_py_tmp; //@line 2015 "textio.c"
        var $145=$144+4; //@line 2015 "textio.c"
        var $146=HEAP[$145]; //@line 2015 "textio.c"
        var $147=$146+24; //@line 2015 "textio.c"
        var $148=HEAP[$147]; //@line 2015 "textio.c"
        var $149=$_py_tmp; //@line 2015 "textio.c"
        FUNCTION_TABLE[$148]($149); //@line 2015 "textio.c"
        __label__ = 39; break; //@line 2015 "textio.c"
      case 39: // $bb40
        var $150=$self_addr; //@line 2016 "textio.c"
        var $151=$150+32; //@line 2016 "textio.c"
        var $152=HEAP[$151]; //@line 2016 "textio.c"
        var $153=($152)!=0; //@line 2016 "textio.c"
        if ($153) { __label__ = 40; break; } else { __label__ = 43; break; } //@line 2016 "textio.c"
      case 40: // $bb41
        var $154=$self_addr; //@line 2017 "textio.c"
        var $155=$154+32; //@line 2017 "textio.c"
        var $156=HEAP[$155]; //@line 2017 "textio.c"
        var $157=__PyObject_CallMethod_SizeT($156, __str31406, 0, allocate(1, "i32", ALLOC_STACK)); //@line 2017 "textio.c"
        $res=$157; //@line 2017 "textio.c"
        var $158=$res; //@line 2018 "textio.c"
        var $159=($158)==0; //@line 2018 "textio.c"
        if ($159) { __label__ = 84; break; } else { __label__ = 41; break; } //@line 2018 "textio.c"
      case 41: // $bb42
        var $160=$res; //@line 2020 "textio.c"
        var $161=$160; //@line 2020 "textio.c"
        var $162=HEAP[$161]; //@line 2020 "textio.c"
        var $163=($162) - 1; //@line 2020 "textio.c"
        var $164=$res; //@line 2020 "textio.c"
        var $165=$164; //@line 2020 "textio.c"
        HEAP[$165]=$163; //@line 2020 "textio.c"
        var $166=$res; //@line 2020 "textio.c"
        var $167=$166; //@line 2020 "textio.c"
        var $168=HEAP[$167]; //@line 2020 "textio.c"
        var $169=($168)==0; //@line 2020 "textio.c"
        if ($169) { __label__ = 42; break; } else { __label__ = 43; break; } //@line 2020 "textio.c"
      case 42: // $bb43
        var $170=$res; //@line 2020 "textio.c"
        var $171=$170+4; //@line 2020 "textio.c"
        var $172=HEAP[$171]; //@line 2020 "textio.c"
        var $173=$172+24; //@line 2020 "textio.c"
        var $174=HEAP[$173]; //@line 2020 "textio.c"
        var $175=$res; //@line 2020 "textio.c"
        FUNCTION_TABLE[$174]($175); //@line 2020 "textio.c"
        __label__ = 43; break; //@line 2020 "textio.c"
      case 43: // $bb44
        var $176=$self_addr; //@line 2023 "textio.c"
        var $177=$176+20; //@line 2023 "textio.c"
        var $178=HEAP[$177]; //@line 2023 "textio.c"
        var $179=__PyObject_CallMethod_SizeT($178, __str80, __str81, allocate([0,0,0,0,2,0,0,0], ["i32",0,0,0,"i32",0,0,0], ALLOC_STACK)); //@line 2023 "textio.c"
        $res=$179; //@line 2023 "textio.c"
        var $180=HEAP[$cookieObj]; //@line 2024 "textio.c"
        var $181=($180)!=0; //@line 2024 "textio.c"
        if ($181) { __label__ = 44; break; } else { __label__ = 46; break; } //@line 2024 "textio.c"
      case 44: // $bb45
        var $182=HEAP[$cookieObj]; //@line 2024 "textio.c"
        var $183=$182; //@line 2024 "textio.c"
        var $184=HEAP[$183]; //@line 2024 "textio.c"
        var $185=($184) - 1; //@line 2024 "textio.c"
        var $186=$182; //@line 2024 "textio.c"
        HEAP[$186]=$185; //@line 2024 "textio.c"
        var $187=$182; //@line 2024 "textio.c"
        var $188=HEAP[$187]; //@line 2024 "textio.c"
        var $189=($188)==0; //@line 2024 "textio.c"
        if ($189) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 2024 "textio.c"
      case 45: // $bb46
        var $190=HEAP[$cookieObj]; //@line 2024 "textio.c"
        var $191=$190+4; //@line 2024 "textio.c"
        var $192=HEAP[$191]; //@line 2024 "textio.c"
        var $193=$192+24; //@line 2024 "textio.c"
        var $194=HEAP[$193]; //@line 2024 "textio.c"
        var $195=HEAP[$cookieObj]; //@line 2024 "textio.c"
        FUNCTION_TABLE[$194]($195); //@line 2024 "textio.c"
        __label__ = 46; break; //@line 2024 "textio.c"
      case 46: // $bb47
        var $196=$res; //@line 2025 "textio.c"
        $0=$196; //@line 2025 "textio.c"
        __label__ = 88; break; //@line 2025 "textio.c"
      case 47: // $bb48
        var $197=HEAP[$whence]; //@line 2027 "textio.c"
        var $198=($197)!=0; //@line 2027 "textio.c"
        if ($198) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 2027 "textio.c"
      case 48: // $bb49
        var $199=HEAP[$whence]; //@line 2028 "textio.c"
        var $200=HEAP[_PyExc_ValueError]; //@line 2028 "textio.c"
        var $201=_PyErr_Format($200, __str82, allocate([$199,0,0,0], ["i32",0,0,0], ALLOC_STACK)); //@line 2028 "textio.c"
        __label__ = 84; break; //@line 2028 "textio.c"
      case 49: // $bb50
        var $202=HEAP[__PyIO_zero]; //@line 2033 "textio.c"
        var $203=HEAP[$cookieObj]; //@line 2033 "textio.c"
        var $204=_PyObject_RichCompareBool($203, $202, 0); //@line 2033 "textio.c"
        $cmp=$204; //@line 2033 "textio.c"
        var $205=($204) < 0; //@line 2034 "textio.c"
        if ($205) { __label__ = 84; break; } else { __label__ = 50; break; } //@line 2034 "textio.c"
      case 50: // $bb51
        var $206=$cmp; //@line 2037 "textio.c"
        var $207=($206)==1; //@line 2037 "textio.c"
        if ($207) { __label__ = 51; break; } else { __label__ = 54; break; } //@line 2037 "textio.c"
      case 51: // $bb52
        var $208=HEAP[$cookieObj]; //@line 2038 "textio.c"
        var $209=_PyObject_Repr($208); //@line 2038 "textio.c"
        $repr=$209; //@line 2038 "textio.c"
        var $210=$repr; //@line 2039 "textio.c"
        var $211=($210)!=0; //@line 2039 "textio.c"
        if ($211) { __label__ = 52; break; } else { __label__ = 84; break; } //@line 2039 "textio.c"
      case 52: // $bb53
        var $212=$repr; //@line 2040 "textio.c"
        var $213=$212; //@line 2040 "textio.c"
        var $214=$213+20; //@line 2040 "textio.c"
        var $215=$214; //@line 2040 "textio.c"
        var $216=HEAP[_PyExc_ValueError]; //@line 2040 "textio.c"
        var $217=_PyErr_Format($216, __str83, allocate([$215,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 2040 "textio.c"
        var $218=$repr; //@line 2043 "textio.c"
        var $219=$218; //@line 2043 "textio.c"
        var $220=HEAP[$219]; //@line 2043 "textio.c"
        var $221=($220) - 1; //@line 2043 "textio.c"
        var $222=$repr; //@line 2043 "textio.c"
        var $223=$222; //@line 2043 "textio.c"
        HEAP[$223]=$221; //@line 2043 "textio.c"
        var $224=$repr; //@line 2043 "textio.c"
        var $225=$224; //@line 2043 "textio.c"
        var $226=HEAP[$225]; //@line 2043 "textio.c"
        var $227=($226)==0; //@line 2043 "textio.c"
        if ($227) { __label__ = 53; break; } else { __label__ = 84; break; } //@line 2043 "textio.c"
      case 53: // $bb54
        var $228=$repr; //@line 2043 "textio.c"
        var $229=$228+4; //@line 2043 "textio.c"
        var $230=HEAP[$229]; //@line 2043 "textio.c"
        var $231=$230+24; //@line 2043 "textio.c"
        var $232=HEAP[$231]; //@line 2043 "textio.c"
        var $233=$repr; //@line 2043 "textio.c"
        FUNCTION_TABLE[$232]($233); //@line 2043 "textio.c"
        __label__ = 84; break; //@line 2043 "textio.c"
      case 54: // $bb56
        var $234=HEAP[__PyIO_str_flush]; //@line 2048 "textio.c"
        var $235=$self_addr; //@line 2048 "textio.c"
        var $236=$235; //@line 2048 "textio.c"
        var $237=_PyObject_CallMethodObjArgs($236, $234, allocate(4, "i8*", ALLOC_STACK)); //@line 2048 "textio.c"
        $res=$237; //@line 2048 "textio.c"
        var $238=$res; //@line 2049 "textio.c"
        var $239=($238)==0; //@line 2049 "textio.c"
        if ($239) { __label__ = 84; break; } else { __label__ = 55; break; } //@line 2049 "textio.c"
      case 55: // $bb57
        var $240=$res; //@line 2051 "textio.c"
        var $241=$240; //@line 2051 "textio.c"
        var $242=HEAP[$241]; //@line 2051 "textio.c"
        var $243=($242) - 1; //@line 2051 "textio.c"
        var $244=$res; //@line 2051 "textio.c"
        var $245=$244; //@line 2051 "textio.c"
        HEAP[$245]=$243; //@line 2051 "textio.c"
        var $246=$res; //@line 2051 "textio.c"
        var $247=$246; //@line 2051 "textio.c"
        var $248=HEAP[$247]; //@line 2051 "textio.c"
        var $249=($248)==0; //@line 2051 "textio.c"
        if ($249) { __label__ = 56; break; } else { __label__ = 57; break; } //@line 2051 "textio.c"
      case 56: // $bb58
        var $250=$res; //@line 2051 "textio.c"
        var $251=$250+4; //@line 2051 "textio.c"
        var $252=HEAP[$251]; //@line 2051 "textio.c"
        var $253=$252+24; //@line 2051 "textio.c"
        var $254=HEAP[$253]; //@line 2051 "textio.c"
        var $255=$res; //@line 2051 "textio.c"
        FUNCTION_TABLE[$254]($255); //@line 2051 "textio.c"
        __label__ = 57; break; //@line 2051 "textio.c"
      case 57: // $bb59
        var $256=HEAP[$cookieObj]; //@line 2056 "textio.c"
        var $257=_textiowrapper_parse_cookie($cookie, $256); //@line 2056 "textio.c"
        var $258=($257) < 0; //@line 2056 "textio.c"
        if ($258) { __label__ = 84; break; } else { __label__ = 58; break; } //@line 2056 "textio.c"
      case 58: // $bb60
        var $259=$cookie; //@line 2060 "textio.c"
        var $260=HEAP[$259]; //@line 2060 "textio.c"
        var $261=_PyLong_FromLongLong($260); //@line 2060 "textio.c"
        $posobj=$261; //@line 2060 "textio.c"
        var $262=$posobj; //@line 2061 "textio.c"
        var $263=($262)==0; //@line 2061 "textio.c"
        if ($263) { __label__ = 84; break; } else { __label__ = 59; break; } //@line 2061 "textio.c"
      case 59: // $bb61
        var $264=HEAP[__PyIO_str_seek]; //@line 2063 "textio.c"
        var $265=$self_addr; //@line 2063 "textio.c"
        var $266=$265+20; //@line 2063 "textio.c"
        var $267=HEAP[$266]; //@line 2063 "textio.c"
        var $268=$posobj; //@line 2063 "textio.c"
        var $269=_PyObject_CallMethodObjArgs($267, $264, allocate([$268,0,0,0,0,0,0,0], ["%struct.PyObject*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 2063 "textio.c"
        $res=$269; //@line 2063 "textio.c"
        var $270=$posobj; //@line 2065 "textio.c"
        var $271=$270; //@line 2065 "textio.c"
        var $272=HEAP[$271]; //@line 2065 "textio.c"
        var $273=($272) - 1; //@line 2065 "textio.c"
        var $274=$posobj; //@line 2065 "textio.c"
        var $275=$274; //@line 2065 "textio.c"
        HEAP[$275]=$273; //@line 2065 "textio.c"
        var $276=$posobj; //@line 2065 "textio.c"
        var $277=$276; //@line 2065 "textio.c"
        var $278=HEAP[$277]; //@line 2065 "textio.c"
        var $279=($278)==0; //@line 2065 "textio.c"
        if ($279) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 2065 "textio.c"
      case 60: // $bb62
        var $280=$posobj; //@line 2065 "textio.c"
        var $281=$280+4; //@line 2065 "textio.c"
        var $282=HEAP[$281]; //@line 2065 "textio.c"
        var $283=$282+24; //@line 2065 "textio.c"
        var $284=HEAP[$283]; //@line 2065 "textio.c"
        var $285=$posobj; //@line 2065 "textio.c"
        FUNCTION_TABLE[$284]($285); //@line 2065 "textio.c"
        __label__ = 61; break; //@line 2065 "textio.c"
      case 61: // $bb63
        var $286=$res; //@line 2066 "textio.c"
        var $287=($286)==0; //@line 2066 "textio.c"
        if ($287) { __label__ = 84; break; } else { __label__ = 62; break; } //@line 2066 "textio.c"
      case 62: // $bb64
        var $288=$res; //@line 2068 "textio.c"
        var $289=$288; //@line 2068 "textio.c"
        var $290=HEAP[$289]; //@line 2068 "textio.c"
        var $291=($290) - 1; //@line 2068 "textio.c"
        var $292=$res; //@line 2068 "textio.c"
        var $293=$292; //@line 2068 "textio.c"
        HEAP[$293]=$291; //@line 2068 "textio.c"
        var $294=$res; //@line 2068 "textio.c"
        var $295=$294; //@line 2068 "textio.c"
        var $296=HEAP[$295]; //@line 2068 "textio.c"
        var $297=($296)==0; //@line 2068 "textio.c"
        if ($297) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 2068 "textio.c"
      case 63: // $bb65
        var $298=$res; //@line 2068 "textio.c"
        var $299=$298+4; //@line 2068 "textio.c"
        var $300=HEAP[$299]; //@line 2068 "textio.c"
        var $301=$300+24; //@line 2068 "textio.c"
        var $302=HEAP[$301]; //@line 2068 "textio.c"
        var $303=$res; //@line 2068 "textio.c"
        FUNCTION_TABLE[$302]($303); //@line 2068 "textio.c"
        __label__ = 64; break; //@line 2068 "textio.c"
      case 64: // $bb66
        var $304=$self_addr; //@line 2070 "textio.c"
        _textiowrapper_set_decoded_chars($304, 0); //@line 2070 "textio.c"
        var $305=$self_addr; //@line 2071 "textio.c"
        var $306=$305+80; //@line 2071 "textio.c"
        var $307=HEAP[$306]; //@line 2071 "textio.c"
        var $308=($307)!=0; //@line 2071 "textio.c"
        if ($308) { __label__ = 65; break; } else { __label__ = 67; break; } //@line 2071 "textio.c"
      case 65: // $bb67
        var $309=$self_addr; //@line 2071 "textio.c"
        var $310=$309+80; //@line 2071 "textio.c"
        var $311=HEAP[$310]; //@line 2071 "textio.c"
        $_py_tmp68=$311; //@line 2071 "textio.c"
        var $312=$self_addr; //@line 2071 "textio.c"
        var $313=$312+80; //@line 2071 "textio.c"
        HEAP[$313]=0; //@line 2071 "textio.c"
        var $314=$_py_tmp68; //@line 2071 "textio.c"
        var $315=$314; //@line 2071 "textio.c"
        var $316=HEAP[$315]; //@line 2071 "textio.c"
        var $317=($316) - 1; //@line 2071 "textio.c"
        var $318=$_py_tmp68; //@line 2071 "textio.c"
        var $319=$318; //@line 2071 "textio.c"
        HEAP[$319]=$317; //@line 2071 "textio.c"
        var $320=$_py_tmp68; //@line 2071 "textio.c"
        var $321=$320; //@line 2071 "textio.c"
        var $322=HEAP[$321]; //@line 2071 "textio.c"
        var $323=($322)==0; //@line 2071 "textio.c"
        if ($323) { __label__ = 66; break; } else { __label__ = 67; break; } //@line 2071 "textio.c"
      case 66: // $bb69
        var $324=$_py_tmp68; //@line 2071 "textio.c"
        var $325=$324+4; //@line 2071 "textio.c"
        var $326=HEAP[$325]; //@line 2071 "textio.c"
        var $327=$326+24; //@line 2071 "textio.c"
        var $328=HEAP[$327]; //@line 2071 "textio.c"
        var $329=$_py_tmp68; //@line 2071 "textio.c"
        FUNCTION_TABLE[$328]($329); //@line 2071 "textio.c"
        __label__ = 67; break; //@line 2071 "textio.c"
      case 67: // $bb70
        var $330=$self_addr; //@line 2074 "textio.c"
        var $331=$330+32; //@line 2074 "textio.c"
        var $332=HEAP[$331]; //@line 2074 "textio.c"
        var $333=($332)!=0; //@line 2074 "textio.c"
        if ($333) { __label__ = 68; break; } else { __label__ = 69; break; } //@line 2074 "textio.c"
      case 68: // $bb71
        var $334=$self_addr; //@line 2075 "textio.c"
        var $335=__textiowrapper_decoder_setstate($334, $cookie); //@line 2075 "textio.c"
        var $336=($335) < 0; //@line 2075 "textio.c"
        if ($336) { __label__ = 84; break; } else { __label__ = 69; break; } //@line 2075 "textio.c"
      case 69: // $bb72
        var $337=$cookie+16; //@line 2079 "textio.c"
        var $338=HEAP[$337]; //@line 2079 "textio.c"
        var $339=($338)!=0; //@line 2079 "textio.c"
        if ($339) { __label__ = 70; break; } else { __label__ = 80; break; } //@line 2079 "textio.c"
      case 70: // $bb73
        var $340=$cookie+12; //@line 2082 "textio.c"
        var $341=HEAP[$340]; //@line 2082 "textio.c"
        var $342=$self_addr; //@line 2082 "textio.c"
        var $343=$342+20; //@line 2082 "textio.c"
        var $344=HEAP[$343]; //@line 2082 "textio.c"
        var $345=__PyObject_CallMethod_SizeT($344, __str1375, __str84, allocate([$341,0,0,0], ["i32",0,0,0], ALLOC_STACK)); //@line 2082 "textio.c"
        $input_chunk=$345; //@line 2082 "textio.c"
        var $346=$input_chunk; //@line 2085 "textio.c"
        var $347=($346)==0; //@line 2085 "textio.c"
        if ($347) { __label__ = 84; break; } else { __label__ = 71; break; } //@line 2085 "textio.c"
      case 71: // $bb74
        var $348=$input_chunk; //@line 2088 "textio.c"
        var $349=$348+4; //@line 2088 "textio.c"
        var $350=HEAP[$349]; //@line 2088 "textio.c"
        var $351=$350+84; //@line 2088 "textio.c"
        var $352=HEAP[$351]; //@line 2088 "textio.c"
        var $353=($352) & 134217728; //@line 2088 "textio.c"
        var $354=($353)==0; //@line 2088 "textio.c"
        if ($354) { __label__ = 72; break; } else { __label__ = 73; break; } //@line 2088 "textio.c"
      case 72: // $bb75
        ___assert_fail(__str66442, __str15390, 2088, ___PRETTY_FUNCTION___11188); //@line 2088 "textio.c"
        throw "Reached an unreachable!" //@line 2088 "textio.c"
      case 73: // $bb76
        var $355=$cookie+8; //@line 2090 "textio.c"
        var $356=HEAP[$355]; //@line 2090 "textio.c"
        var $357=$input_chunk; //@line 2090 "textio.c"
        var $358=__Py_BuildValue_SizeT(__str85, allocate([$356,0,0,0,$357,0,0,0], ["i32",0,0,0,"%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 2090 "textio.c"
        var $359=$self_addr; //@line 2090 "textio.c"
        var $360=$359+80; //@line 2090 "textio.c"
        HEAP[$360]=$358; //@line 2090 "textio.c"
        var $361=$self_addr; //@line 2091 "textio.c"
        var $362=$361+80; //@line 2091 "textio.c"
        var $363=HEAP[$362]; //@line 2091 "textio.c"
        var $364=($363)==0; //@line 2091 "textio.c"
        if ($364) { __label__ = 74; break; } else { __label__ = 76; break; } //@line 2091 "textio.c"
      case 74: // $bb77
        var $365=$input_chunk; //@line 2092 "textio.c"
        var $366=$365; //@line 2092 "textio.c"
        var $367=HEAP[$366]; //@line 2092 "textio.c"
        var $368=($367) - 1; //@line 2092 "textio.c"
        var $369=$input_chunk; //@line 2092 "textio.c"
        var $370=$369; //@line 2092 "textio.c"
        HEAP[$370]=$368; //@line 2092 "textio.c"
        var $371=$input_chunk; //@line 2092 "textio.c"
        var $372=$371; //@line 2092 "textio.c"
        var $373=HEAP[$372]; //@line 2092 "textio.c"
        var $374=($373)==0; //@line 2092 "textio.c"
        if ($374) { __label__ = 75; break; } else { __label__ = 84; break; } //@line 2092 "textio.c"
      case 75: // $bb78
        var $375=$input_chunk; //@line 2092 "textio.c"
        var $376=$375+4; //@line 2092 "textio.c"
        var $377=HEAP[$376]; //@line 2092 "textio.c"
        var $378=$377+24; //@line 2092 "textio.c"
        var $379=HEAP[$378]; //@line 2092 "textio.c"
        var $380=$input_chunk; //@line 2092 "textio.c"
        FUNCTION_TABLE[$379]($380); //@line 2092 "textio.c"
        __label__ = 84; break; //@line 2092 "textio.c"
      case 76: // $bb80
        var $381=$cookie+20; //@line 2096 "textio.c"
        var $382=HEAP[$381]; //@line 2096 "textio.c"
        var $383=($382); //@line 2096 "textio.c"
        var $384=$self_addr; //@line 2096 "textio.c"
        var $385=$384+32; //@line 2096 "textio.c"
        var $386=HEAP[$385]; //@line 2096 "textio.c"
        var $387=$input_chunk; //@line 2096 "textio.c"
        var $388=__PyObject_CallMethod_SizeT($386, __str29404, __str51427, allocate([$387,0,0,0,$383,0,0,0], ["%struct.PyObject*",0,0,0,"i32",0,0,0], ALLOC_STACK)); //@line 2096 "textio.c"
        $decoded=$388; //@line 2096 "textio.c"
        var $389=$decoded; //@line 2099 "textio.c"
        var $390=($389)==0; //@line 2099 "textio.c"
        if ($390) { __label__ = 84; break; } else { __label__ = 77; break; } //@line 2099 "textio.c"
      case 77: // $bb81
        var $391=$self_addr; //@line 2102 "textio.c"
        var $392=$decoded; //@line 2102 "textio.c"
        _textiowrapper_set_decoded_chars($391, $392); //@line 2102 "textio.c"
        var $393=$self_addr; //@line 2105 "textio.c"
        var $394=$393+64; //@line 2105 "textio.c"
        var $395=HEAP[$394]; //@line 2105 "textio.c"
        var $396=_PyUnicodeUCS2_GetSize($395); //@line 2105 "textio.c"
        var $397=$cookie+16; //@line 2105 "textio.c"
        var $398=HEAP[$397]; //@line 2105 "textio.c"
        var $399=($396) < ($398); //@line 2105 "textio.c"
        if ($399) { __label__ = 78; break; } else { __label__ = 79; break; } //@line 2105 "textio.c"
      case 78: // $bb82
        var $400=HEAP[_PyExc_IOError]; //@line 2106 "textio.c"
        _PyErr_SetString($400, __str86); //@line 2106 "textio.c"
        __label__ = 84; break; //@line 2106 "textio.c"
      case 79: // $bb83
        var $401=$cookie+16; //@line 2109 "textio.c"
        var $402=HEAP[$401]; //@line 2109 "textio.c"
        var $403=$self_addr; //@line 2109 "textio.c"
        var $404=$403+68; //@line 2109 "textio.c"
        HEAP[$404]=$402; //@line 2109 "textio.c"
        __label__ = 81; break; //@line 2109 "textio.c"
      case 80: // $bb84
        var $405=$cookie+8; //@line 2112 "textio.c"
        var $406=HEAP[$405]; //@line 2112 "textio.c"
        var $407=__Py_BuildValue_SizeT(__str87, allocate([$406,0,0,0,__str20395,0,0,0], ["i32",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 2112 "textio.c"
        var $408=$self_addr; //@line 2112 "textio.c"
        var $409=$408+80; //@line 2112 "textio.c"
        HEAP[$409]=$407; //@line 2112 "textio.c"
        var $410=$self_addr; //@line 2113 "textio.c"
        var $411=$410+80; //@line 2113 "textio.c"
        var $412=HEAP[$411]; //@line 2113 "textio.c"
        var $413=($412)==0; //@line 2113 "textio.c"
        if ($413) { __label__ = 84; break; } else { __label__ = 81; break; } //@line 2113 "textio.c"
      case 81: // $bb85
        var $414=$self_addr; //@line 2118 "textio.c"
        var $415=$414+28; //@line 2118 "textio.c"
        var $416=HEAP[$415]; //@line 2118 "textio.c"
        var $417=($416)!=0; //@line 2118 "textio.c"
        if ($417) { __label__ = 82; break; } else { __label__ = 83; break; } //@line 2118 "textio.c"
      case 82: // $bb86
        var $418=$self_addr; //@line 2119 "textio.c"
        var $419=__textiowrapper_encoder_setstate($418, $cookie); //@line 2119 "textio.c"
        var $420=($419) < 0; //@line 2119 "textio.c"
        if ($420) { __label__ = 84; break; } else { __label__ = 83; break; } //@line 2119 "textio.c"
      case 83: // $bb87
        var $421=HEAP[$cookieObj]; //@line 2122 "textio.c"
        $0=$421; //@line 2122 "textio.c"
        __label__ = 88; break; //@line 2122 "textio.c"
      case 84: // $fail
        var $_pr=HEAP[$cookieObj];
        var $422=($_pr)!=0; //@line 2124 "textio.c"
        if ($422) { __label__ = 85; break; } else { __label__ = 87; break; } //@line 2124 "textio.c"
      case 85: // $bb88
        var $423=HEAP[$cookieObj]; //@line 2124 "textio.c"
        var $424=$423; //@line 2124 "textio.c"
        var $425=HEAP[$424]; //@line 2124 "textio.c"
        var $426=($425) - 1; //@line 2124 "textio.c"
        var $427=$423; //@line 2124 "textio.c"
        HEAP[$427]=$426; //@line 2124 "textio.c"
        var $428=$423; //@line 2124 "textio.c"
        var $429=HEAP[$428]; //@line 2124 "textio.c"
        var $430=($429)==0; //@line 2124 "textio.c"
        if ($430) { __label__ = 86; break; } else { __label__ = 87; break; } //@line 2124 "textio.c"
      case 86: // $bb89
        var $431=HEAP[$cookieObj]; //@line 2124 "textio.c"
        var $432=$431+4; //@line 2124 "textio.c"
        var $433=HEAP[$432]; //@line 2124 "textio.c"
        var $434=$433+24; //@line 2124 "textio.c"
        var $435=HEAP[$434]; //@line 2124 "textio.c"
        var $436=HEAP[$cookieObj]; //@line 2124 "textio.c"
        FUNCTION_TABLE[$435]($436); //@line 2124 "textio.c"
        __label__ = 87; break; //@line 2124 "textio.c"
      case 87: // $bb90
        $0=0; //@line 2125 "textio.c"
        __label__ = 88; break; //@line 2125 "textio.c"
      case 88: // $bb91
        var $437=$0; //@line 1962 "textio.c"
        $retval=$437; //@line 1962 "textio.c"
        var $retval92=$retval; //@line 1962 "textio.c"
        STACKTOP = __stackBase__;
        return $retval92; //@line 1962 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_tell($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 52; _memset(__stackBase__, 0, 52);
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $res;
        var $posobj;
        var $cookie=__stackBase__;
        var $next_input=__stackBase__+24;
        var $chars_to_skip;
        var $chars_decoded;
        var $saved_state;
        var $input;
        var $input_end;
        var $r;
        var $_res;
        var $state;
        var $dec_buffer=__stackBase__+28;
        var $dec_buffer_len=__stackBase__+32;
        var $dec_flags=__stackBase__+36;
        var $decoded;
        var $decoded65;
        var $type=__stackBase__+40;
        var $value=__stackBase__+44;
        var $traceback=__stackBase__+48;
        $self_addr=$self;
        $args_addr=$args;
        $posobj=0; //@line 2133 "textio.c"
        var $1=$cookie; //@line 2134 "textio.c"
        HEAP[$1]=0; //@line 2134 "textio.c"
        var $2=$cookie+8; //@line 2134 "textio.c"
        HEAP[$2]=0; //@line 2134 "textio.c"
        var $3=$cookie+12; //@line 2134 "textio.c"
        HEAP[$3]=0; //@line 2134 "textio.c"
        var $4=$cookie+16; //@line 2134 "textio.c"
        HEAP[$4]=0; //@line 2134 "textio.c"
        var $5=$cookie+20; //@line 2134 "textio.c"
        HEAP[$5]=0; //@line 2134 "textio.c"
        $saved_state=0; //@line 2137 "textio.c"
        var $6=$self_addr; //@line 2140 "textio.c"
        var $7=$6+8; //@line 2140 "textio.c"
        var $8=HEAP[$7]; //@line 2140 "textio.c"
        var $9=($8) <= 0; //@line 2140 "textio.c"
        var $10=$self_addr; //@line 2140 "textio.c"
        if ($9) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2140 "textio.c"
      case 1: // $bb
        var $11=$10+12; //@line 2140 "textio.c"
        var $12=HEAP[$11]; //@line 2140 "textio.c"
        var $13=($12)!=0; //@line 2140 "textio.c"
        var $14=HEAP[_PyExc_ValueError]; //@line 2140 "textio.c"
        if ($13) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2140 "textio.c"
      case 2: // $bb1
        _PyErr_SetString($14, __str57433); //@line 2140 "textio.c"
        __label__ = 4; break; //@line 2140 "textio.c"
      case 3: // $bb2
        _PyErr_SetString($14, __str58434); //@line 2140 "textio.c"
        __label__ = 4; break; //@line 2140 "textio.c"
      case 4: // $bb3
        $0=0; //@line 2140 "textio.c"
        __label__ = 92; break; //@line 2140 "textio.c"
      case 5: // $bb4
        var $15=$10; //@line 2141 "textio.c"
        var $16=$15+4; //@line 2141 "textio.c"
        var $17=HEAP[$16]; //@line 2141 "textio.c"
        var $18=($17)==(_PyTextIOWrapper_Type); //@line 2141 "textio.c"
        var $19=$self_addr; //@line 2141 "textio.c"
        if ($18) { __label__ = 6; break; } else { __label__ = 16; break; } //@line 2141 "textio.c"
      case 6: // $bb5
        var $20=$19+84; //@line 2141 "textio.c"
        var $21=HEAP[$20]; //@line 2141 "textio.c"
        var $22=($21)!=0; //@line 2141 "textio.c"
        var $23=$self_addr; //@line 2141 "textio.c"
        if ($22) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 2141 "textio.c"
      case 7: // $bb6
        var $24=$23+84; //@line 2141 "textio.c"
        var $25=HEAP[$24]; //@line 2141 "textio.c"
        var $26=__PyFileIO_closed($25); //@line 2141 "textio.c"
        $r=$26; //@line 2141 "textio.c"
        __lastLabel__ = 7; __label__ = 14; break; //@line 2141 "textio.c"
      case 8: // $bb7
        var $27=_textiowrapper_closed_get($23, 0); //@line 2141 "textio.c"
        $_res=$27; //@line 2141 "textio.c"
        var $28=$_res; //@line 2141 "textio.c"
        var $29=($28)==0; //@line 2141 "textio.c"
        if ($29) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 2141 "textio.c"
      case 9: // $bb8
        $0=0; //@line 2141 "textio.c"
        __label__ = 92; break; //@line 2141 "textio.c"
      case 10: // $bb9
        var $30=$_res; //@line 2141 "textio.c"
        var $31=_PyObject_IsTrue($30); //@line 2141 "textio.c"
        $r=$31; //@line 2141 "textio.c"
        var $32=$_res; //@line 2141 "textio.c"
        var $33=$32; //@line 2141 "textio.c"
        var $34=HEAP[$33]; //@line 2141 "textio.c"
        var $35=($34) - 1; //@line 2141 "textio.c"
        var $36=$_res; //@line 2141 "textio.c"
        var $37=$36; //@line 2141 "textio.c"
        HEAP[$37]=$35; //@line 2141 "textio.c"
        var $38=$_res; //@line 2141 "textio.c"
        var $39=$38; //@line 2141 "textio.c"
        var $40=HEAP[$39]; //@line 2141 "textio.c"
        var $41=($40)==0; //@line 2141 "textio.c"
        if ($41) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 2141 "textio.c"
      case 11: // $bb10
        var $42=$_res; //@line 2141 "textio.c"
        var $43=$42+4; //@line 2141 "textio.c"
        var $44=HEAP[$43]; //@line 2141 "textio.c"
        var $45=$44+24; //@line 2141 "textio.c"
        var $46=HEAP[$45]; //@line 2141 "textio.c"
        var $47=$_res; //@line 2141 "textio.c"
        FUNCTION_TABLE[$46]($47); //@line 2141 "textio.c"
        __label__ = 12; break; //@line 2141 "textio.c"
      case 12: // $bb11
        var $48=$r; //@line 2141 "textio.c"
        var $49=($48) < 0; //@line 2141 "textio.c"
        if ($49) { __lastLabel__ = 12; __label__ = 13; break; } else { __lastLabel__ = 12; __label__ = 14; break; } //@line 2141 "textio.c"
      case 13: // $bb12
        $0=0; //@line 2141 "textio.c"
        __label__ = 92; break; //@line 2141 "textio.c"
      case 14: // $bb13
        var $50=__lastLabel__ == 12 ? $48 : ($26);
        var $51=($50) > 0; //@line 2141 "textio.c"
        if ($51) { __label__ = 15; break; } else { __label__ = 18; break; } //@line 2141 "textio.c"
      case 15: // $bb14
        var $52=HEAP[_PyExc_ValueError]; //@line 2141 "textio.c"
        _PyErr_SetString($52, __str60436); //@line 2141 "textio.c"
        $0=0; //@line 2141 "textio.c"
        __label__ = 92; break; //@line 2141 "textio.c"
      case 16: // $bb16
        var $53=$19; //@line 2141 "textio.c"
        var $54=__PyIOBase_check_closed($53, __Py_TrueStruct); //@line 2141 "textio.c"
        var $55=($54)==0; //@line 2141 "textio.c"
        if ($55) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 2141 "textio.c"
      case 17: // $bb17
        $0=0; //@line 2141 "textio.c"
        __label__ = 92; break; //@line 2141 "textio.c"
      case 18: // $bb18
        var $56=$self_addr; //@line 2143 "textio.c"
        var $57=$56+52; //@line 2143 "textio.c"
        var $58=HEAP[$57]; //@line 2143 "textio.c"
        var $59=($58)==0; //@line 2143 "textio.c"
        if ($59) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 2143 "textio.c"
      case 19: // $bb19
        var $60=HEAP[_PyExc_IOError]; //@line 2144 "textio.c"
        _PyErr_SetString($60, __str75); //@line 2144 "textio.c"
        __label__ = 80; break; //@line 2144 "textio.c"
      case 20: // $bb20
        var $61=$self_addr; //@line 2148 "textio.c"
        var $62=$61+53; //@line 2148 "textio.c"
        var $63=HEAP[$62]; //@line 2148 "textio.c"
        var $64=($63)==0; //@line 2148 "textio.c"
        if ($64) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 2148 "textio.c"
      case 21: // $bb21
        var $65=HEAP[_PyExc_IOError]; //@line 2149 "textio.c"
        _PyErr_SetString($65, __str88); //@line 2149 "textio.c"
        __label__ = 80; break; //@line 2149 "textio.c"
      case 22: // $bb22
        var $66=$self_addr; //@line 2154 "textio.c"
        var $67=__textiowrapper_writeflush($66); //@line 2154 "textio.c"
        var $68=($67) < 0; //@line 2154 "textio.c"
        if ($68) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 2154 "textio.c"
      case 23: // $bb23
        $0=0; //@line 2155 "textio.c"
        __label__ = 92; break; //@line 2155 "textio.c"
      case 24: // $bb24
        var $69=$self_addr; //@line 2156 "textio.c"
        var $70=$69; //@line 2156 "textio.c"
        var $71=__PyObject_CallMethod_SizeT($70, __str79, 0, allocate(1, "i32", ALLOC_STACK)); //@line 2156 "textio.c"
        $res=$71; //@line 2156 "textio.c"
        var $72=$res; //@line 2157 "textio.c"
        var $73=($72)==0; //@line 2157 "textio.c"
        if ($73) { __label__ = 80; break; } else { __label__ = 25; break; } //@line 2157 "textio.c"
      case 25: // $bb25
        var $74=$res; //@line 2159 "textio.c"
        var $75=$74; //@line 2159 "textio.c"
        var $76=HEAP[$75]; //@line 2159 "textio.c"
        var $77=($76) - 1; //@line 2159 "textio.c"
        var $78=$res; //@line 2159 "textio.c"
        var $79=$78; //@line 2159 "textio.c"
        HEAP[$79]=$77; //@line 2159 "textio.c"
        var $80=$res; //@line 2159 "textio.c"
        var $81=$80; //@line 2159 "textio.c"
        var $82=HEAP[$81]; //@line 2159 "textio.c"
        var $83=($82)==0; //@line 2159 "textio.c"
        if ($83) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 2159 "textio.c"
      case 26: // $bb26
        var $84=$res; //@line 2159 "textio.c"
        var $85=$84+4; //@line 2159 "textio.c"
        var $86=HEAP[$85]; //@line 2159 "textio.c"
        var $87=$86+24; //@line 2159 "textio.c"
        var $88=HEAP[$87]; //@line 2159 "textio.c"
        var $89=$res; //@line 2159 "textio.c"
        FUNCTION_TABLE[$88]($89); //@line 2159 "textio.c"
        __label__ = 27; break; //@line 2159 "textio.c"
      case 27: // $bb27
        var $90=$self_addr; //@line 2161 "textio.c"
        var $91=$90+20; //@line 2161 "textio.c"
        var $92=HEAP[$91]; //@line 2161 "textio.c"
        var $93=__PyObject_CallMethod_SizeT($92, __str77, 0, allocate(1, "i32", ALLOC_STACK)); //@line 2161 "textio.c"
        $posobj=$93; //@line 2161 "textio.c"
        var $94=($93)==0; //@line 2162 "textio.c"
        if ($94) { __label__ = 83; break; } else { __label__ = 28; break; } //@line 2162 "textio.c"
      case 28: // $bb28
        var $95=$self_addr; //@line 2165 "textio.c"
        var $96=$95+32; //@line 2165 "textio.c"
        var $97=HEAP[$96]; //@line 2165 "textio.c"
        var $98=($97)==0; //@line 2165 "textio.c"
        if ($98) { __label__ = 30; break; } else { __label__ = 29; break; } //@line 2165 "textio.c"
      case 29: // $bb29
        var $99=$self_addr; //@line 2165 "textio.c"
        var $100=$99+80; //@line 2165 "textio.c"
        var $101=HEAP[$100]; //@line 2165 "textio.c"
        var $102=($101)==0; //@line 2165 "textio.c"
        if ($102) { __label__ = 30; break; } else { __label__ = 34; break; } //@line 2165 "textio.c"
      case 30: // $bb30
        var $103=$self_addr; //@line 2166 "textio.c"
        var $104=$103+64; //@line 2166 "textio.c"
        var $105=HEAP[$104]; //@line 2166 "textio.c"
        var $106=($105)!=0; //@line 2166 "textio.c"
        if ($106) { __label__ = 31; break; } else { __label__ = 33; break; } //@line 2166 "textio.c"
      case 31: // $bb31
        var $107=$self_addr; //@line 2166 "textio.c"
        var $108=$107+64; //@line 2166 "textio.c"
        var $109=HEAP[$108]; //@line 2166 "textio.c"
        var $110=_PyUnicodeUCS2_GetSize($109); //@line 2166 "textio.c"
        var $111=($110)!=0; //@line 2166 "textio.c"
        if ($111) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 2166 "textio.c"
      case 32: // $bb32
        ___assert_fail(__str89, __str15390, 2166, ___PRETTY_FUNCTION___11475); //@line 2166 "textio.c"
        throw "Reached an unreachable!" //@line 2166 "textio.c"
      case 33: // $bb33
        var $112=$posobj; //@line 2167 "textio.c"
        $0=$112; //@line 2167 "textio.c"
        __label__ = 92; break; //@line 2167 "textio.c"
      case 34: // $bb34
        var $113=$posobj; //@line 2171 "textio.c"
        var $114=_PyLong_AsLongLong($113); //@line 2171 "textio.c"
        var $115=$cookie; //@line 2171 "textio.c"
        HEAP[$115]=$114; //@line 2171 "textio.c"
        var $116=_PyErr_Occurred(); //@line 2175 "textio.c"
        var $117=($116)!=0; //@line 2175 "textio.c"
        if ($117) { __label__ = 80; break; } else { __label__ = 35; break; } //@line 2175 "textio.c"
      case 35: // $bb35
        var $118=$self_addr; //@line 2179 "textio.c"
        var $119=$118+80; //@line 2179 "textio.c"
        var $120=HEAP[$119]; //@line 2179 "textio.c"
        var $121=$cookie+8; //@line 2179 "textio.c"
        var $122=__PyArg_Parse_SizeT($120, __str90, allocate([$121,0,0,0,$next_input,0,0,0], ["i32*",0,0,0,"%struct.PyObject**",0,0,0], ALLOC_STACK)); //@line 2179 "textio.c"
        var $123=($122)==0; //@line 2179 "textio.c"
        if ($123) { __label__ = 80; break; } else { __label__ = 36; break; } //@line 2179 "textio.c"
      case 36: // $bb36
        var $124=HEAP[$next_input]; //@line 2182 "textio.c"
        var $125=$124+4; //@line 2182 "textio.c"
        var $126=HEAP[$125]; //@line 2182 "textio.c"
        var $127=$126+84; //@line 2182 "textio.c"
        var $128=HEAP[$127]; //@line 2182 "textio.c"
        var $129=($128) & 134217728; //@line 2182 "textio.c"
        var $130=($129)==0; //@line 2182 "textio.c"
        if ($130) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 2182 "textio.c"
      case 37: // $bb37
        ___assert_fail(__str67443, __str15390, 2182, ___PRETTY_FUNCTION___11475); //@line 2182 "textio.c"
        throw "Reached an unreachable!" //@line 2182 "textio.c"
      case 38: // $bb38
        var $131=$cookie; //@line 2184 "textio.c"
        var $132=HEAP[$131]; //@line 2184 "textio.c"
        var $133=HEAP[$next_input]; //@line 2184 "textio.c"
        var $134=$133; //@line 2184 "textio.c"
        var $135=$134+8; //@line 2184 "textio.c"
        var $136=HEAP[$135]; //@line 2184 "textio.c"
        var $137=($136); //@line 2184 "textio.c"
        var $138=($132) - ($137); //@line 2184 "textio.c"
        var $139=$cookie; //@line 2184 "textio.c"
        HEAP[$139]=$138; //@line 2184 "textio.c"
        var $140=$self_addr; //@line 2187 "textio.c"
        var $141=$140+68; //@line 2187 "textio.c"
        var $142=HEAP[$141]; //@line 2187 "textio.c"
        var $143=($142)==0; //@line 2187 "textio.c"
        if ($143) { __label__ = 39; break; } else { __label__ = 42; break; } //@line 2187 "textio.c"
      case 39: // $bb39
        var $144=$posobj; //@line 2189 "textio.c"
        var $145=$144; //@line 2189 "textio.c"
        var $146=HEAP[$145]; //@line 2189 "textio.c"
        var $147=($146) - 1; //@line 2189 "textio.c"
        var $148=$posobj; //@line 2189 "textio.c"
        var $149=$148; //@line 2189 "textio.c"
        HEAP[$149]=$147; //@line 2189 "textio.c"
        var $150=$posobj; //@line 2189 "textio.c"
        var $151=$150; //@line 2189 "textio.c"
        var $152=HEAP[$151]; //@line 2189 "textio.c"
        var $153=($152)==0; //@line 2189 "textio.c"
        if ($153) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 2189 "textio.c"
      case 40: // $bb40
        var $154=$posobj; //@line 2189 "textio.c"
        var $155=$154+4; //@line 2189 "textio.c"
        var $156=HEAP[$155]; //@line 2189 "textio.c"
        var $157=$156+24; //@line 2189 "textio.c"
        var $158=HEAP[$157]; //@line 2189 "textio.c"
        var $159=$posobj; //@line 2189 "textio.c"
        FUNCTION_TABLE[$158]($159); //@line 2189 "textio.c"
        __label__ = 41; break; //@line 2189 "textio.c"
      case 41: // $bb41
        var $160=_textiowrapper_build_cookie($cookie); //@line 2190 "textio.c"
        $0=$160; //@line 2190 "textio.c"
        __label__ = 92; break; //@line 2190 "textio.c"
      case 42: // $bb42
        var $161=$self_addr; //@line 2193 "textio.c"
        var $162=$161+68; //@line 2193 "textio.c"
        var $163=HEAP[$162]; //@line 2193 "textio.c"
        $chars_to_skip=$163; //@line 2193 "textio.c"
        var $164=HEAP[__PyIO_str_getstate]; //@line 2198 "textio.c"
        var $165=$self_addr; //@line 2198 "textio.c"
        var $166=$165+32; //@line 2198 "textio.c"
        var $167=HEAP[$166]; //@line 2198 "textio.c"
        var $168=_PyObject_CallMethodObjArgs($167, $164, allocate(4, "i8*", ALLOC_STACK)); //@line 2198 "textio.c"
        $saved_state=$168; //@line 2198 "textio.c"
        var $169=$saved_state; //@line 2200 "textio.c"
        var $170=($169)==0; //@line 2200 "textio.c"
        if ($170) { __label__ = 80; break; } else { __label__ = 43; break; } //@line 2200 "textio.c"
      case 43: // $bb43
        var $171=$self_addr; //@line 2204 "textio.c"
        var $172=__textiowrapper_decoder_setstate($171, $cookie); //@line 2204 "textio.c"
        var $173=($172) < 0; //@line 2204 "textio.c"
        if ($173) { __label__ = 80; break; } else { __label__ = 44; break; } //@line 2204 "textio.c"
      case 44: // $bb44
        $chars_decoded=0; //@line 2212 "textio.c"
        var $174=HEAP[$next_input]; //@line 2213 "textio.c"
        var $175=$174; //@line 2213 "textio.c"
        var $176=$175+20; //@line 2213 "textio.c"
        var $177=$176; //@line 2213 "textio.c"
        $input=$177; //@line 2213 "textio.c"
        var $178=HEAP[$next_input]; //@line 2214 "textio.c"
        var $179=$178; //@line 2214 "textio.c"
        var $180=$179+8; //@line 2214 "textio.c"
        var $181=HEAP[$180]; //@line 2214 "textio.c"
        var $182=$input; //@line 2214 "textio.c"
        var $183=$182+$181; //@line 2214 "textio.c"
        $input_end=$183; //@line 2214 "textio.c"
        var $184=$cookie+12; //@line 2229 "textio.c"
        var $185=$cookie+12; //@line 2229 "textio.c"
        var $186=$cookie; //@line 2243 "textio.c"
        var $187=$cookie+12; //@line 2243 "textio.c"
        var $188=$cookie; //@line 2243 "textio.c"
        var $189=$cookie+8; //@line 2245 "textio.c"
        var $190=$cookie+12; //@line 2246 "textio.c"
        __label__ = 61; break; //@line 2214 "textio.c"
      case 45: // $bb45
        var $191=$self_addr; //@line 2222 "textio.c"
        var $192=$191+32; //@line 2222 "textio.c"
        var $193=HEAP[$192]; //@line 2222 "textio.c"
        var $194=$input; //@line 2222 "textio.c"
        var $195=__PyObject_CallMethod_SizeT($193, __str29404, __str91, allocate([$194,0,0,0,1,0,0,0], ["i8*",0,0,0,"i32",0,0,0], ALLOC_STACK)); //@line 2222 "textio.c"
        $decoded=$195; //@line 2222 "textio.c"
        var $196=$decoded; //@line 2223 "textio.c"
        var $197=($196)==0; //@line 2223 "textio.c"
        if ($197) { __label__ = 80; break; } else { __label__ = 46; break; } //@line 2223 "textio.c"
      case 46: // $bb46
        var $198=$decoded; //@line 2225 "textio.c"
        var $199=$198+4; //@line 2225 "textio.c"
        var $200=HEAP[$199]; //@line 2225 "textio.c"
        var $201=$200+84; //@line 2225 "textio.c"
        var $202=HEAP[$201]; //@line 2225 "textio.c"
        var $203=($202) & 268435456; //@line 2225 "textio.c"
        var $204=($203)==0; //@line 2225 "textio.c"
        if ($204) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 2225 "textio.c"
      case 47: // $bb47
        ___assert_fail(__str92, __str15390, 2225, ___PRETTY_FUNCTION___11475); //@line 2225 "textio.c"
        throw "Reached an unreachable!" //@line 2225 "textio.c"
      case 48: // $bb48
        var $205=$decoded; //@line 2226 "textio.c"
        var $206=$205; //@line 2226 "textio.c"
        var $207=$206+8; //@line 2226 "textio.c"
        var $208=HEAP[$207]; //@line 2226 "textio.c"
        var $209=$chars_decoded; //@line 2226 "textio.c"
        var $210=($209) + ($208); //@line 2226 "textio.c"
        $chars_decoded=$210; //@line 2226 "textio.c"
        var $211=$decoded; //@line 2227 "textio.c"
        var $212=$211; //@line 2227 "textio.c"
        var $213=HEAP[$212]; //@line 2227 "textio.c"
        var $214=($213) - 1; //@line 2227 "textio.c"
        var $215=$decoded; //@line 2227 "textio.c"
        var $216=$215; //@line 2227 "textio.c"
        HEAP[$216]=$214; //@line 2227 "textio.c"
        var $217=$decoded; //@line 2227 "textio.c"
        var $218=$217; //@line 2227 "textio.c"
        var $219=HEAP[$218]; //@line 2227 "textio.c"
        var $220=($219)==0; //@line 2227 "textio.c"
        if ($220) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 2227 "textio.c"
      case 49: // $bb49
        var $221=$decoded; //@line 2227 "textio.c"
        var $222=$221+4; //@line 2227 "textio.c"
        var $223=HEAP[$222]; //@line 2227 "textio.c"
        var $224=$223+24; //@line 2227 "textio.c"
        var $225=HEAP[$224]; //@line 2227 "textio.c"
        var $226=$decoded; //@line 2227 "textio.c"
        FUNCTION_TABLE[$225]($226); //@line 2227 "textio.c"
        __label__ = 50; break; //@line 2227 "textio.c"
      case 50: // $bb50
        var $227=HEAP[$184]; //@line 2229 "textio.c"
        var $228=($227) + 1; //@line 2229 "textio.c"
        HEAP[$185]=$228; //@line 2229 "textio.c"
        var $229=HEAP[__PyIO_str_getstate]; //@line 2231 "textio.c"
        var $230=$self_addr; //@line 2231 "textio.c"
        var $231=$230+32; //@line 2231 "textio.c"
        var $232=HEAP[$231]; //@line 2231 "textio.c"
        var $233=_PyObject_CallMethodObjArgs($232, $229, allocate(4, "i8*", ALLOC_STACK)); //@line 2231 "textio.c"
        $state=$233; //@line 2231 "textio.c"
        var $234=($233)==0; //@line 2233 "textio.c"
        if ($234) { __label__ = 80; break; } else { __label__ = 51; break; } //@line 2233 "textio.c"
      case 51: // $bb51
        var $235=$state; //@line 2235 "textio.c"
        var $236=__PyArg_Parse_SizeT($235, __str93, allocate([$dec_buffer,0,0,0,$dec_buffer_len,0,0,0,$dec_flags,0,0,0], ["i8**",0,0,0,"i32*",0,0,0,"i32*",0,0,0], ALLOC_STACK)); //@line 2235 "textio.c"
        var $237=($236)==0; //@line 2235 "textio.c"
        var $238=$state; //@line 2236 "textio.c"
        var $239=$238; //@line 2236 "textio.c"
        var $240=HEAP[$239]; //@line 2236 "textio.c"
        var $241=($240) - 1; //@line 2236 "textio.c"
        var $242=$state; //@line 2236 "textio.c"
        var $243=$242; //@line 2236 "textio.c"
        HEAP[$243]=$241; //@line 2236 "textio.c"
        var $244=$state; //@line 2236 "textio.c"
        var $245=$244; //@line 2236 "textio.c"
        var $246=HEAP[$245]; //@line 2236 "textio.c"
        var $247=($246)==0; //@line 2236 "textio.c"
        if ($237) { __label__ = 52; break; } else { __label__ = 54; break; } //@line 2235 "textio.c"
      case 52: // $bb52
        if ($247) { __label__ = 53; break; } else { __label__ = 80; break; } //@line 2236 "textio.c"
      case 53: // $bb53
        var $248=$state; //@line 2236 "textio.c"
        var $249=$248+4; //@line 2236 "textio.c"
        var $250=HEAP[$249]; //@line 2236 "textio.c"
        var $251=$250+24; //@line 2236 "textio.c"
        var $252=HEAP[$251]; //@line 2236 "textio.c"
        var $253=$state; //@line 2236 "textio.c"
        FUNCTION_TABLE[$252]($253); //@line 2236 "textio.c"
        __label__ = 80; break; //@line 2236 "textio.c"
      case 54: // $bb55
        if ($247) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 2239 "textio.c"
      case 55: // $bb56
        var $254=$state; //@line 2239 "textio.c"
        var $255=$254+4; //@line 2239 "textio.c"
        var $256=HEAP[$255]; //@line 2239 "textio.c"
        var $257=$256+24; //@line 2239 "textio.c"
        var $258=HEAP[$257]; //@line 2239 "textio.c"
        var $259=$state; //@line 2239 "textio.c"
        FUNCTION_TABLE[$258]($259); //@line 2239 "textio.c"
        __label__ = 56; break; //@line 2239 "textio.c"
      case 56: // $bb57
        var $260=HEAP[$dec_buffer_len]; //@line 2241 "textio.c"
        var $261=($260)==0; //@line 2241 "textio.c"
        if ($261) { __label__ = 57; break; } else { __label__ = 59; break; } //@line 2241 "textio.c"
      case 57: // $bb58
        var $262=$chars_decoded; //@line 2241 "textio.c"
        var $263=$chars_to_skip; //@line 2241 "textio.c"
        var $264=($262) <= ($263); //@line 2241 "textio.c"
        if ($264) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 2241 "textio.c"
      case 58: // $bb59
        var $265=HEAP[$186]; //@line 2243 "textio.c"
        var $266=HEAP[$187]; //@line 2243 "textio.c"
        var $267=($266); //@line 2243 "textio.c"
        var $268=($267) + ($265); //@line 2243 "textio.c"
        HEAP[$188]=$268; //@line 2243 "textio.c"
        var $269=$chars_to_skip; //@line 2244 "textio.c"
        var $270=$chars_decoded; //@line 2244 "textio.c"
        var $271=($269) - ($270); //@line 2244 "textio.c"
        $chars_to_skip=$271; //@line 2244 "textio.c"
        var $272=HEAP[$dec_flags]; //@line 2245 "textio.c"
        HEAP[$189]=$272; //@line 2245 "textio.c"
        HEAP[$190]=0; //@line 2246 "textio.c"
        $chars_decoded=0; //@line 2247 "textio.c"
        __label__ = 59; break; //@line 2247 "textio.c"
      case 59: // $bb60
        var $273=$chars_decoded; //@line 2249 "textio.c"
        var $274=$chars_to_skip; //@line 2249 "textio.c"
        var $275=($273) >= ($274); //@line 2249 "textio.c"
        if ($275) { __label__ = 62; break; } else { __label__ = 60; break; } //@line 2249 "textio.c"
      case 60: // $bb61
        var $276=$input; //@line 2251 "textio.c"
        var $277=$276+1; //@line 2251 "textio.c"
        $input=$277; //@line 2251 "textio.c"
        __label__ = 61; break; //@line 2251 "textio.c"
      case 61: // $bb62
        var $278=$input; //@line 2215 "textio.c"
        var $279=$input_end; //@line 2215 "textio.c"
        var $280=($278) < ($279); //@line 2215 "textio.c"
        if ($280) { __label__ = 45; break; } else { __label__ = 62; break; } //@line 2215 "textio.c"
      case 62: // $bb63
        var $281=$input; //@line 2253 "textio.c"
        var $282=$input_end; //@line 2253 "textio.c"
        var $283=($281)==($282); //@line 2253 "textio.c"
        if ($283) { __label__ = 63; break; } else { __label__ = 70; break; } //@line 2253 "textio.c"
      case 63: // $bb64
        var $284=$self_addr; //@line 2256 "textio.c"
        var $285=$284+32; //@line 2256 "textio.c"
        var $286=HEAP[$285]; //@line 2256 "textio.c"
        var $287=__PyObject_CallMethod_SizeT($286, __str29404, __str94, allocate([__str20395,0,0,0,1,0,0,0], ["i8*",0,0,0,"i32",0,0,0], ALLOC_STACK)); //@line 2256 "textio.c"
        $decoded65=$287; //@line 2256 "textio.c"
        var $288=$decoded65; //@line 2257 "textio.c"
        var $289=($288)==0; //@line 2257 "textio.c"
        if ($289) { __label__ = 80; break; } else { __label__ = 64; break; } //@line 2257 "textio.c"
      case 64: // $bb66
        var $290=$decoded65; //@line 2259 "textio.c"
        var $291=$290+4; //@line 2259 "textio.c"
        var $292=HEAP[$291]; //@line 2259 "textio.c"
        var $293=$292+84; //@line 2259 "textio.c"
        var $294=HEAP[$293]; //@line 2259 "textio.c"
        var $295=($294) & 268435456; //@line 2259 "textio.c"
        var $296=($295)==0; //@line 2259 "textio.c"
        if ($296) { __label__ = 65; break; } else { __label__ = 66; break; } //@line 2259 "textio.c"
      case 65: // $bb67
        ___assert_fail(__str92, __str15390, 2259, ___PRETTY_FUNCTION___11475); //@line 2259 "textio.c"
        throw "Reached an unreachable!" //@line 2259 "textio.c"
      case 66: // $bb68
        var $297=$decoded65; //@line 2260 "textio.c"
        var $298=$297; //@line 2260 "textio.c"
        var $299=$298+8; //@line 2260 "textio.c"
        var $300=HEAP[$299]; //@line 2260 "textio.c"
        var $301=$chars_decoded; //@line 2260 "textio.c"
        var $302=($301) + ($300); //@line 2260 "textio.c"
        $chars_decoded=$302; //@line 2260 "textio.c"
        var $303=$decoded65; //@line 2261 "textio.c"
        var $304=$303; //@line 2261 "textio.c"
        var $305=HEAP[$304]; //@line 2261 "textio.c"
        var $306=($305) - 1; //@line 2261 "textio.c"
        var $307=$decoded65; //@line 2261 "textio.c"
        var $308=$307; //@line 2261 "textio.c"
        HEAP[$308]=$306; //@line 2261 "textio.c"
        var $309=$decoded65; //@line 2261 "textio.c"
        var $310=$309; //@line 2261 "textio.c"
        var $311=HEAP[$310]; //@line 2261 "textio.c"
        var $312=($311)==0; //@line 2261 "textio.c"
        if ($312) { __label__ = 67; break; } else { __label__ = 68; break; } //@line 2261 "textio.c"
      case 67: // $bb69
        var $313=$decoded65; //@line 2261 "textio.c"
        var $314=$313+4; //@line 2261 "textio.c"
        var $315=HEAP[$314]; //@line 2261 "textio.c"
        var $316=$315+24; //@line 2261 "textio.c"
        var $317=HEAP[$316]; //@line 2261 "textio.c"
        var $318=$decoded65; //@line 2261 "textio.c"
        FUNCTION_TABLE[$317]($318); //@line 2261 "textio.c"
        __label__ = 68; break; //@line 2261 "textio.c"
      case 68: // $bb70
        var $319=$cookie+20; //@line 2262 "textio.c"
        HEAP[$319]=1; //@line 2262 "textio.c"
        var $320=$chars_decoded; //@line 2264 "textio.c"
        var $321=$chars_to_skip; //@line 2264 "textio.c"
        var $322=($320) < ($321); //@line 2264 "textio.c"
        if ($322) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 2264 "textio.c"
      case 69: // $bb71
        var $323=HEAP[_PyExc_IOError]; //@line 2265 "textio.c"
        _PyErr_SetString($323, __str95); //@line 2265 "textio.c"
        __label__ = 80; break; //@line 2265 "textio.c"
      case 70: // $bb72
        var $324=$posobj; //@line 2272 "textio.c"
        var $325=($324)!=0; //@line 2272 "textio.c"
        if ($325) { __label__ = 71; break; } else { __label__ = 73; break; } //@line 2272 "textio.c"
      case 71: // $bb73
        var $326=$posobj; //@line 2272 "textio.c"
        var $327=$326; //@line 2272 "textio.c"
        var $328=HEAP[$327]; //@line 2272 "textio.c"
        var $329=($328) - 1; //@line 2272 "textio.c"
        var $330=$posobj; //@line 2272 "textio.c"
        var $331=$330; //@line 2272 "textio.c"
        HEAP[$331]=$329; //@line 2272 "textio.c"
        var $332=$posobj; //@line 2272 "textio.c"
        var $333=$332; //@line 2272 "textio.c"
        var $334=HEAP[$333]; //@line 2272 "textio.c"
        var $335=($334)==0; //@line 2272 "textio.c"
        if ($335) { __label__ = 72; break; } else { __label__ = 73; break; } //@line 2272 "textio.c"
      case 72: // $bb74
        var $336=$posobj; //@line 2272 "textio.c"
        var $337=$336+4; //@line 2272 "textio.c"
        var $338=HEAP[$337]; //@line 2272 "textio.c"
        var $339=$338+24; //@line 2272 "textio.c"
        var $340=HEAP[$339]; //@line 2272 "textio.c"
        var $341=$posobj; //@line 2272 "textio.c"
        FUNCTION_TABLE[$340]($341); //@line 2272 "textio.c"
        __label__ = 73; break; //@line 2272 "textio.c"
      case 73: // $bb75
        var $342=$self_addr; //@line 2273 "textio.c"
        var $343=$342+32; //@line 2273 "textio.c"
        var $344=HEAP[$343]; //@line 2273 "textio.c"
        var $345=$saved_state; //@line 2273 "textio.c"
        var $346=__PyObject_CallMethod_SizeT($344, __str22397, __str96, allocate([$345,0,0,0], ["%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 2273 "textio.c"
        $res=$346; //@line 2273 "textio.c"
        var $347=$saved_state; //@line 2274 "textio.c"
        var $348=$347; //@line 2274 "textio.c"
        var $349=HEAP[$348]; //@line 2274 "textio.c"
        var $350=($349) - 1; //@line 2274 "textio.c"
        var $351=$saved_state; //@line 2274 "textio.c"
        var $352=$351; //@line 2274 "textio.c"
        HEAP[$352]=$350; //@line 2274 "textio.c"
        var $353=$saved_state; //@line 2274 "textio.c"
        var $354=$353; //@line 2274 "textio.c"
        var $355=HEAP[$354]; //@line 2274 "textio.c"
        var $356=($355)==0; //@line 2274 "textio.c"
        if ($356) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 2274 "textio.c"
      case 74: // $bb76
        var $357=$saved_state; //@line 2274 "textio.c"
        var $358=$357+4; //@line 2274 "textio.c"
        var $359=HEAP[$358]; //@line 2274 "textio.c"
        var $360=$359+24; //@line 2274 "textio.c"
        var $361=HEAP[$360]; //@line 2274 "textio.c"
        var $362=$saved_state; //@line 2274 "textio.c"
        FUNCTION_TABLE[$361]($362); //@line 2274 "textio.c"
        __label__ = 75; break; //@line 2274 "textio.c"
      case 75: // $bb77
        var $363=$res; //@line 2275 "textio.c"
        var $364=($363)==0; //@line 2275 "textio.c"
        if ($364) { __label__ = 76; break; } else { __label__ = 77; break; } //@line 2275 "textio.c"
      case 76: // $bb78
        $0=0; //@line 2276 "textio.c"
        __label__ = 92; break; //@line 2276 "textio.c"
      case 77: // $bb79
        var $365=$res; //@line 2277 "textio.c"
        var $366=$365; //@line 2277 "textio.c"
        var $367=HEAP[$366]; //@line 2277 "textio.c"
        var $368=($367) - 1; //@line 2277 "textio.c"
        var $369=$res; //@line 2277 "textio.c"
        var $370=$369; //@line 2277 "textio.c"
        HEAP[$370]=$368; //@line 2277 "textio.c"
        var $371=$res; //@line 2277 "textio.c"
        var $372=$371; //@line 2277 "textio.c"
        var $373=HEAP[$372]; //@line 2277 "textio.c"
        var $374=($373)==0; //@line 2277 "textio.c"
        if ($374) { __label__ = 78; break; } else { __label__ = 79; break; } //@line 2277 "textio.c"
      case 78: // $bb80
        var $375=$res; //@line 2277 "textio.c"
        var $376=$375+4; //@line 2277 "textio.c"
        var $377=HEAP[$376]; //@line 2277 "textio.c"
        var $378=$377+24; //@line 2277 "textio.c"
        var $379=HEAP[$378]; //@line 2277 "textio.c"
        var $380=$res; //@line 2277 "textio.c"
        FUNCTION_TABLE[$379]($380); //@line 2277 "textio.c"
        __label__ = 79; break; //@line 2277 "textio.c"
      case 79: // $bb81
        var $381=$cookie+16; //@line 2280 "textio.c"
        var $382=$chars_to_skip; //@line 2280 "textio.c"
        HEAP[$381]=$382; //@line 2280 "textio.c"
        var $383=_textiowrapper_build_cookie($cookie); //@line 2281 "textio.c"
        $0=$383; //@line 2281 "textio.c"
        __label__ = 92; break; //@line 2281 "textio.c"
      case 80: // $fail
        var $_pr=$posobj;
        var $384=($_pr)!=0; //@line 2284 "textio.c"
        if ($384) { __label__ = 81; break; } else { __label__ = 83; break; } //@line 2284 "textio.c"
      case 81: // $bb82
        var $385=$posobj; //@line 2284 "textio.c"
        var $386=$385; //@line 2284 "textio.c"
        var $387=HEAP[$386]; //@line 2284 "textio.c"
        var $388=($387) - 1; //@line 2284 "textio.c"
        var $389=$posobj; //@line 2284 "textio.c"
        var $390=$389; //@line 2284 "textio.c"
        HEAP[$390]=$388; //@line 2284 "textio.c"
        var $391=$posobj; //@line 2284 "textio.c"
        var $392=$391; //@line 2284 "textio.c"
        var $393=HEAP[$392]; //@line 2284 "textio.c"
        var $394=($393)==0; //@line 2284 "textio.c"
        if ($394) { __label__ = 82; break; } else { __label__ = 83; break; } //@line 2284 "textio.c"
      case 82: // $bb83
        var $395=$posobj; //@line 2284 "textio.c"
        var $396=$395+4; //@line 2284 "textio.c"
        var $397=HEAP[$396]; //@line 2284 "textio.c"
        var $398=$397+24; //@line 2284 "textio.c"
        var $399=HEAP[$398]; //@line 2284 "textio.c"
        var $400=$posobj; //@line 2284 "textio.c"
        FUNCTION_TABLE[$399]($400); //@line 2284 "textio.c"
        __label__ = 83; break; //@line 2284 "textio.c"
      case 83: // $bb84
        var $401=$saved_state; //@line 2285 "textio.c"
        var $402=($401)!=0; //@line 2285 "textio.c"
        if ($402) { __label__ = 84; break; } else { __label__ = 91; break; } //@line 2285 "textio.c"
      case 84: // $bb85
        _PyErr_Fetch($type, $value, $traceback); //@line 2287 "textio.c"
        var $403=$self_addr; //@line 2289 "textio.c"
        var $404=$403+32; //@line 2289 "textio.c"
        var $405=HEAP[$404]; //@line 2289 "textio.c"
        var $406=$saved_state; //@line 2289 "textio.c"
        var $407=__PyObject_CallMethod_SizeT($405, __str22397, __str96, allocate([$406,0,0,0], ["%struct.PyObject*",0,0,0], ALLOC_STACK)); //@line 2289 "textio.c"
        $res=$407; //@line 2289 "textio.c"
        var $408=$saved_state; //@line 2290 "textio.c"
        var $409=$408; //@line 2290 "textio.c"
        var $410=HEAP[$409]; //@line 2290 "textio.c"
        var $411=($410) - 1; //@line 2290 "textio.c"
        var $412=$saved_state; //@line 2290 "textio.c"
        var $413=$412; //@line 2290 "textio.c"
        HEAP[$413]=$411; //@line 2290 "textio.c"
        var $414=$saved_state; //@line 2290 "textio.c"
        var $415=$414; //@line 2290 "textio.c"
        var $416=HEAP[$415]; //@line 2290 "textio.c"
        var $417=($416)==0; //@line 2290 "textio.c"
        if ($417) { __label__ = 85; break; } else { __label__ = 86; break; } //@line 2290 "textio.c"
      case 85: // $bb86
        var $418=$saved_state; //@line 2290 "textio.c"
        var $419=$418+4; //@line 2290 "textio.c"
        var $420=HEAP[$419]; //@line 2290 "textio.c"
        var $421=$420+24; //@line 2290 "textio.c"
        var $422=HEAP[$421]; //@line 2290 "textio.c"
        var $423=$saved_state; //@line 2290 "textio.c"
        FUNCTION_TABLE[$422]($423); //@line 2290 "textio.c"
        __label__ = 86; break; //@line 2290 "textio.c"
      case 86: // $bb87
        var $424=$res; //@line 2291 "textio.c"
        var $425=($424)==0; //@line 2291 "textio.c"
        if ($425) { __label__ = 87; break; } else { __label__ = 88; break; } //@line 2291 "textio.c"
      case 87: // $bb88
        $0=0; //@line 2292 "textio.c"
        __label__ = 92; break; //@line 2292 "textio.c"
      case 88: // $bb89
        var $426=$res; //@line 2293 "textio.c"
        var $427=$426; //@line 2293 "textio.c"
        var $428=HEAP[$427]; //@line 2293 "textio.c"
        var $429=($428) - 1; //@line 2293 "textio.c"
        var $430=$res; //@line 2293 "textio.c"
        var $431=$430; //@line 2293 "textio.c"
        HEAP[$431]=$429; //@line 2293 "textio.c"
        var $432=$res; //@line 2293 "textio.c"
        var $433=$432; //@line 2293 "textio.c"
        var $434=HEAP[$433]; //@line 2293 "textio.c"
        var $435=($434)==0; //@line 2293 "textio.c"
        if ($435) { __label__ = 89; break; } else { __label__ = 90; break; } //@line 2293 "textio.c"
      case 89: // $bb90
        var $436=$res; //@line 2293 "textio.c"
        var $437=$436+4; //@line 2293 "textio.c"
        var $438=HEAP[$437]; //@line 2293 "textio.c"
        var $439=$438+24; //@line 2293 "textio.c"
        var $440=HEAP[$439]; //@line 2293 "textio.c"
        var $441=$res; //@line 2293 "textio.c"
        FUNCTION_TABLE[$440]($441); //@line 2293 "textio.c"
        __label__ = 90; break; //@line 2293 "textio.c"
      case 90: // $bb91
        var $442=HEAP[$traceback]; //@line 2295 "textio.c"
        var $443=HEAP[$value]; //@line 2295 "textio.c"
        var $444=HEAP[$type]; //@line 2295 "textio.c"
        _PyErr_Restore($444, $443, $442); //@line 2295 "textio.c"
        __label__ = 91; break; //@line 2295 "textio.c"
      case 91: // $bb92
        $0=0; //@line 2297 "textio.c"
        __label__ = 92; break; //@line 2297 "textio.c"
      case 92: // $bb93
        var $445=$0; //@line 2140 "textio.c"
        $retval=$445; //@line 2140 "textio.c"
        var $retval94=$retval; //@line 2140 "textio.c"
        STACKTOP = __stackBase__;
        return $retval94; //@line 2140 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_truncate($self, $args) {
    var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $pos=__stackBase__;
        var $res;
        $self_addr=$self;
        $args_addr=$args;
        HEAP[$pos]=__Py_NoneStruct; //@line 2303 "textio.c"
        var $1=$self_addr; //@line 2306 "textio.c"
        var $2=$1+8; //@line 2306 "textio.c"
        var $3=HEAP[$2]; //@line 2306 "textio.c"
        var $4=($3) <= 0; //@line 2306 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2306 "textio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 2306 "textio.c"
        var $6=$5+12; //@line 2306 "textio.c"
        var $7=HEAP[$6]; //@line 2306 "textio.c"
        var $8=($7)!=0; //@line 2306 "textio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 2306 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2306 "textio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str57433); //@line 2306 "textio.c"
        __label__ = 4; break; //@line 2306 "textio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str58434); //@line 2306 "textio.c"
        __label__ = 4; break; //@line 2306 "textio.c"
      case 4: // $bb3
        $0=0; //@line 2306 "textio.c"
        __label__ = 12; break; //@line 2306 "textio.c"
      case 5: // $bb4
        var $10=$args_addr; //@line 2307 "textio.c"
        var $11=__PyArg_ParseTuple_SizeT($10, __str97, allocate([$pos,0,0,0], ["%struct.PyObject**",0,0,0], ALLOC_STACK)); //@line 2307 "textio.c"
        var $12=($11)==0; //@line 2307 "textio.c"
        if ($12) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 2307 "textio.c"
      case 6: // $bb5
        $0=0; //@line 2308 "textio.c"
        __label__ = 12; break; //@line 2308 "textio.c"
      case 7: // $bb6
        var $13=HEAP[__PyIO_str_flush]; //@line 2311 "textio.c"
        var $14=$self_addr; //@line 2311 "textio.c"
        var $15=$14; //@line 2311 "textio.c"
        var $16=_PyObject_CallMethodObjArgs($15, $13, allocate(4, "i8*", ALLOC_STACK)); //@line 2311 "textio.c"
        $res=$16; //@line 2311 "textio.c"
        var $17=$res; //@line 2312 "textio.c"
        var $18=($17)==0; //@line 2312 "textio.c"
        if ($18) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 2312 "textio.c"
      case 8: // $bb7
        $0=0; //@line 2313 "textio.c"
        __label__ = 12; break; //@line 2313 "textio.c"
      case 9: // $bb8
        var $19=$res; //@line 2314 "textio.c"
        var $20=$19; //@line 2314 "textio.c"
        var $21=HEAP[$20]; //@line 2314 "textio.c"
        var $22=($21) - 1; //@line 2314 "textio.c"
        var $23=$res; //@line 2314 "textio.c"
        var $24=$23; //@line 2314 "textio.c"
        HEAP[$24]=$22; //@line 2314 "textio.c"
        var $25=$res; //@line 2314 "textio.c"
        var $26=$25; //@line 2314 "textio.c"
        var $27=HEAP[$26]; //@line 2314 "textio.c"
        var $28=($27)==0; //@line 2314 "textio.c"
        if ($28) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 2314 "textio.c"
      case 10: // $bb9
        var $29=$res; //@line 2314 "textio.c"
        var $30=$29+4; //@line 2314 "textio.c"
        var $31=HEAP[$30]; //@line 2314 "textio.c"
        var $32=$31+24; //@line 2314 "textio.c"
        var $33=HEAP[$32]; //@line 2314 "textio.c"
        var $34=$res; //@line 2314 "textio.c"
        FUNCTION_TABLE[$33]($34); //@line 2314 "textio.c"
        __label__ = 11; break; //@line 2314 "textio.c"
      case 11: // $bb10
        var $35=HEAP[$pos]; //@line 2316 "textio.c"
        var $36=HEAP[__PyIO_str_truncate]; //@line 2316 "textio.c"
        var $37=$self_addr; //@line 2316 "textio.c"
        var $38=$37+20; //@line 2316 "textio.c"
        var $39=HEAP[$38]; //@line 2316 "textio.c"
        var $40=_PyObject_CallMethodObjArgs($39, $36, allocate([$35,0,0,0,0,0,0,0], ["%struct.PyObject*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 2316 "textio.c"
        $0=$40; //@line 2316 "textio.c"
        __label__ = 12; break; //@line 2316 "textio.c"
      case 12: // $bb11
        var $41=$0; //@line 2306 "textio.c"
        $retval=$41; //@line 2306 "textio.c"
        var $retval12=$retval; //@line 2306 "textio.c"
        STACKTOP = __stackBase__;
        return $retval12; //@line 2306 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_repr($self) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $nameobj;
        var $res;
        var $namerepr;
        var $encrepr;
        $self_addr=$self;
        $namerepr=0; //@line 2323 "textio.c"
        $encrepr=0; //@line 2323 "textio.c"
        var $1=$self_addr; //@line 2325 "textio.c"
        var $2=$1+8; //@line 2325 "textio.c"
        var $3=HEAP[$2]; //@line 2325 "textio.c"
        var $4=($3) <= 0; //@line 2325 "textio.c"
        var $5=$self_addr; //@line 2325 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2325 "textio.c"
      case 1: // $bb
        var $6=$5+12; //@line 2325 "textio.c"
        var $7=HEAP[$6]; //@line 2325 "textio.c"
        var $8=($7)!=0; //@line 2325 "textio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 2325 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2325 "textio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str57433); //@line 2325 "textio.c"
        __label__ = 4; break; //@line 2325 "textio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str58434); //@line 2325 "textio.c"
        __label__ = 4; break; //@line 2325 "textio.c"
      case 4: // $bb3
        $0=0; //@line 2325 "textio.c"
        __label__ = 24; break; //@line 2325 "textio.c"
      case 5: // $bb4
        var $10=$5; //@line 2327 "textio.c"
        var $11=_PyObject_GetAttrString($10, __str53429); //@line 2327 "textio.c"
        $nameobj=$11; //@line 2327 "textio.c"
        var $12=$nameobj; //@line 2328 "textio.c"
        var $13=($12)==0; //@line 2328 "textio.c"
        if ($13) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 2328 "textio.c"
      case 6: // $bb5
        var $14=HEAP[_PyExc_AttributeError]; //@line 2329 "textio.c"
        var $15=_PyErr_ExceptionMatches($14); //@line 2329 "textio.c"
        var $16=($15)!=0; //@line 2329 "textio.c"
        if ($16) { __label__ = 7; break; } else { __label__ = 17; break; } //@line 2329 "textio.c"
      case 7: // $bb6
        _PyErr_Clear(); //@line 2330 "textio.c"
        var $17=$self_addr; //@line 2333 "textio.c"
        var $18=$17+24; //@line 2333 "textio.c"
        var $19=HEAP[$18]; //@line 2333 "textio.c"
        var $20=_PyObject_Repr($19); //@line 2333 "textio.c"
        $encrepr=$20; //@line 2333 "textio.c"
        var $21=$encrepr; //@line 2334 "textio.c"
        var $22=$21; //@line 2334 "textio.c"
        var $23=$22+20; //@line 2334 "textio.c"
        var $24=$23; //@line 2334 "textio.c"
        var $25=_PyString_FromFormat(__str98, allocate([$24,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 2334 "textio.c"
        $res=$25; //@line 2334 "textio.c"
        __label__ = 10; break; //@line 2334 "textio.c"
      case 8: // $bb7
        var $26=$self_addr; //@line 2338 "textio.c"
        var $27=$26+24; //@line 2338 "textio.c"
        var $28=HEAP[$27]; //@line 2338 "textio.c"
        var $29=_PyObject_Repr($28); //@line 2338 "textio.c"
        $encrepr=$29; //@line 2338 "textio.c"
        var $30=$nameobj; //@line 2339 "textio.c"
        var $31=_PyObject_Repr($30); //@line 2339 "textio.c"
        $namerepr=$31; //@line 2339 "textio.c"
        var $32=$encrepr; //@line 2340 "textio.c"
        var $33=$32; //@line 2340 "textio.c"
        var $34=$33+20; //@line 2340 "textio.c"
        var $35=$34; //@line 2340 "textio.c"
        var $36=$namerepr; //@line 2340 "textio.c"
        var $37=$36; //@line 2340 "textio.c"
        var $38=$37+20; //@line 2340 "textio.c"
        var $39=$38; //@line 2340 "textio.c"
        var $40=_PyString_FromFormat(__str99, allocate([$39,0,0,0,$35,0,0,0], ["i8*",0,0,0,"i8*",0,0,0], ALLOC_STACK)); //@line 2340 "textio.c"
        $res=$40; //@line 2340 "textio.c"
        var $41=$nameobj; //@line 2343 "textio.c"
        var $42=$41; //@line 2343 "textio.c"
        var $43=HEAP[$42]; //@line 2343 "textio.c"
        var $44=($43) - 1; //@line 2343 "textio.c"
        var $45=$nameobj; //@line 2343 "textio.c"
        var $46=$45; //@line 2343 "textio.c"
        HEAP[$46]=$44; //@line 2343 "textio.c"
        var $47=$nameobj; //@line 2343 "textio.c"
        var $48=$47; //@line 2343 "textio.c"
        var $49=HEAP[$48]; //@line 2343 "textio.c"
        var $50=($49)==0; //@line 2343 "textio.c"
        if ($50) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 2343 "textio.c"
      case 9: // $bb8
        var $51=$nameobj; //@line 2343 "textio.c"
        var $52=$51+4; //@line 2343 "textio.c"
        var $53=HEAP[$52]; //@line 2343 "textio.c"
        var $54=$53+24; //@line 2343 "textio.c"
        var $55=HEAP[$54]; //@line 2343 "textio.c"
        var $56=$nameobj; //@line 2343 "textio.c"
        FUNCTION_TABLE[$55]($56); //@line 2343 "textio.c"
        __label__ = 10; break; //@line 2343 "textio.c"
      case 10: // $bb9
        var $57=$namerepr; //@line 2345 "textio.c"
        var $58=($57)!=0; //@line 2345 "textio.c"
        if ($58) { __label__ = 11; break; } else { __label__ = 13; break; } //@line 2345 "textio.c"
      case 11: // $bb10
        var $59=$namerepr; //@line 2345 "textio.c"
        var $60=$59; //@line 2345 "textio.c"
        var $61=HEAP[$60]; //@line 2345 "textio.c"
        var $62=($61) - 1; //@line 2345 "textio.c"
        var $63=$namerepr; //@line 2345 "textio.c"
        var $64=$63; //@line 2345 "textio.c"
        HEAP[$64]=$62; //@line 2345 "textio.c"
        var $65=$namerepr; //@line 2345 "textio.c"
        var $66=$65; //@line 2345 "textio.c"
        var $67=HEAP[$66]; //@line 2345 "textio.c"
        var $68=($67)==0; //@line 2345 "textio.c"
        if ($68) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 2345 "textio.c"
      case 12: // $bb11
        var $69=$namerepr; //@line 2345 "textio.c"
        var $70=$69+4; //@line 2345 "textio.c"
        var $71=HEAP[$70]; //@line 2345 "textio.c"
        var $72=$71+24; //@line 2345 "textio.c"
        var $73=HEAP[$72]; //@line 2345 "textio.c"
        var $74=$namerepr; //@line 2345 "textio.c"
        FUNCTION_TABLE[$73]($74); //@line 2345 "textio.c"
        __label__ = 13; break; //@line 2345 "textio.c"
      case 13: // $bb12
        var $75=$encrepr; //@line 2346 "textio.c"
        var $76=($75)!=0; //@line 2346 "textio.c"
        if ($76) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 2346 "textio.c"
      case 14: // $bb13
        var $77=$encrepr; //@line 2346 "textio.c"
        var $78=$77; //@line 2346 "textio.c"
        var $79=HEAP[$78]; //@line 2346 "textio.c"
        var $80=($79) - 1; //@line 2346 "textio.c"
        var $81=$encrepr; //@line 2346 "textio.c"
        var $82=$81; //@line 2346 "textio.c"
        HEAP[$82]=$80; //@line 2346 "textio.c"
        var $83=$encrepr; //@line 2346 "textio.c"
        var $84=$83; //@line 2346 "textio.c"
        var $85=HEAP[$84]; //@line 2346 "textio.c"
        var $86=($85)==0; //@line 2346 "textio.c"
        if ($86) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 2346 "textio.c"
      case 15: // $bb14
        var $87=$encrepr; //@line 2346 "textio.c"
        var $88=$87+4; //@line 2346 "textio.c"
        var $89=HEAP[$88]; //@line 2346 "textio.c"
        var $90=$89+24; //@line 2346 "textio.c"
        var $91=HEAP[$90]; //@line 2346 "textio.c"
        var $92=$encrepr; //@line 2346 "textio.c"
        FUNCTION_TABLE[$91]($92); //@line 2346 "textio.c"
        __label__ = 16; break; //@line 2346 "textio.c"
      case 16: // $bb15
        var $93=$res; //@line 2347 "textio.c"
        $0=$93; //@line 2347 "textio.c"
        __label__ = 24; break; //@line 2347 "textio.c"
      case 17: // $error
        var $94=$namerepr; //@line 2350 "textio.c"
        var $95=($94)!=0; //@line 2350 "textio.c"
        if ($95) { __label__ = 18; break; } else { __label__ = 20; break; } //@line 2350 "textio.c"
      case 18: // $bb16
        var $96=$namerepr; //@line 2350 "textio.c"
        var $97=$96; //@line 2350 "textio.c"
        var $98=HEAP[$97]; //@line 2350 "textio.c"
        var $99=($98) - 1; //@line 2350 "textio.c"
        var $100=$namerepr; //@line 2350 "textio.c"
        var $101=$100; //@line 2350 "textio.c"
        HEAP[$101]=$99; //@line 2350 "textio.c"
        var $102=$namerepr; //@line 2350 "textio.c"
        var $103=$102; //@line 2350 "textio.c"
        var $104=HEAP[$103]; //@line 2350 "textio.c"
        var $105=($104)==0; //@line 2350 "textio.c"
        if ($105) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 2350 "textio.c"
      case 19: // $bb17
        var $106=$namerepr; //@line 2350 "textio.c"
        var $107=$106+4; //@line 2350 "textio.c"
        var $108=HEAP[$107]; //@line 2350 "textio.c"
        var $109=$108+24; //@line 2350 "textio.c"
        var $110=HEAP[$109]; //@line 2350 "textio.c"
        var $111=$namerepr; //@line 2350 "textio.c"
        FUNCTION_TABLE[$110]($111); //@line 2350 "textio.c"
        __label__ = 20; break; //@line 2350 "textio.c"
      case 20: // $bb18
        var $112=$encrepr; //@line 2351 "textio.c"
        var $113=($112)!=0; //@line 2351 "textio.c"
        if ($113) { __label__ = 21; break; } else { __label__ = 23; break; } //@line 2351 "textio.c"
      case 21: // $bb19
        var $114=$encrepr; //@line 2351 "textio.c"
        var $115=$114; //@line 2351 "textio.c"
        var $116=HEAP[$115]; //@line 2351 "textio.c"
        var $117=($116) - 1; //@line 2351 "textio.c"
        var $118=$encrepr; //@line 2351 "textio.c"
        var $119=$118; //@line 2351 "textio.c"
        HEAP[$119]=$117; //@line 2351 "textio.c"
        var $120=$encrepr; //@line 2351 "textio.c"
        var $121=$120; //@line 2351 "textio.c"
        var $122=HEAP[$121]; //@line 2351 "textio.c"
        var $123=($122)==0; //@line 2351 "textio.c"
        if ($123) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 2351 "textio.c"
      case 22: // $bb20
        var $124=$encrepr; //@line 2351 "textio.c"
        var $125=$124+4; //@line 2351 "textio.c"
        var $126=HEAP[$125]; //@line 2351 "textio.c"
        var $127=$126+24; //@line 2351 "textio.c"
        var $128=HEAP[$127]; //@line 2351 "textio.c"
        var $129=$encrepr; //@line 2351 "textio.c"
        FUNCTION_TABLE[$128]($129); //@line 2351 "textio.c"
        __label__ = 23; break; //@line 2351 "textio.c"
      case 23: // $bb21
        $0=0; //@line 2352 "textio.c"
        __label__ = 24; break; //@line 2352 "textio.c"
      case 24: // $bb22
        var $130=$0; //@line 2325 "textio.c"
        $retval=$130; //@line 2325 "textio.c"
        var $retval23=$retval; //@line 2325 "textio.c"
        ;
        return $retval23; //@line 2325 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_fileno($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 2361 "textio.c"
        var $2=$1+8; //@line 2361 "textio.c"
        var $3=HEAP[$2]; //@line 2361 "textio.c"
        var $4=($3) <= 0; //@line 2361 "textio.c"
        var $5=$self_addr; //@line 2361 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2361 "textio.c"
      case 1: // $bb
        var $6=$5+12; //@line 2361 "textio.c"
        var $7=HEAP[$6]; //@line 2361 "textio.c"
        var $8=($7)!=0; //@line 2361 "textio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 2361 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2361 "textio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str57433); //@line 2361 "textio.c"
        __label__ = 4; break; //@line 2361 "textio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str58434); //@line 2361 "textio.c"
        __label__ = 4; break; //@line 2361 "textio.c"
      case 4: // $bb3
        $0=0; //@line 2361 "textio.c"
        __label__ = 6; break; //@line 2361 "textio.c"
      case 5: // $bb4
        var $10=$5+20; //@line 2362 "textio.c"
        var $11=HEAP[$10]; //@line 2362 "textio.c"
        var $12=__PyObject_CallMethod_SizeT($11, __str100, 0, allocate(1, "i32", ALLOC_STACK)); //@line 2362 "textio.c"
        $0=$12; //@line 2362 "textio.c"
        __label__ = 6; break; //@line 2362 "textio.c"
      case 6: // $bb5
        var $13=$0; //@line 2361 "textio.c"
        $retval=$13; //@line 2361 "textio.c"
        var $retval6=$retval; //@line 2361 "textio.c"
        ;
        return $retval6; //@line 2361 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_seekable($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 2368 "textio.c"
        var $2=$1+8; //@line 2368 "textio.c"
        var $3=HEAP[$2]; //@line 2368 "textio.c"
        var $4=($3) <= 0; //@line 2368 "textio.c"
        var $5=$self_addr; //@line 2368 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2368 "textio.c"
      case 1: // $bb
        var $6=$5+12; //@line 2368 "textio.c"
        var $7=HEAP[$6]; //@line 2368 "textio.c"
        var $8=($7)!=0; //@line 2368 "textio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 2368 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2368 "textio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str57433); //@line 2368 "textio.c"
        __label__ = 4; break; //@line 2368 "textio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str58434); //@line 2368 "textio.c"
        __label__ = 4; break; //@line 2368 "textio.c"
      case 4: // $bb3
        $0=0; //@line 2368 "textio.c"
        __label__ = 6; break; //@line 2368 "textio.c"
      case 5: // $bb4
        var $10=$5+20; //@line 2369 "textio.c"
        var $11=HEAP[$10]; //@line 2369 "textio.c"
        var $12=__PyObject_CallMethod_SizeT($11, __str55431, 0, allocate(1, "i32", ALLOC_STACK)); //@line 2369 "textio.c"
        $0=$12; //@line 2369 "textio.c"
        __label__ = 6; break; //@line 2369 "textio.c"
      case 6: // $bb5
        var $13=$0; //@line 2368 "textio.c"
        $retval=$13; //@line 2368 "textio.c"
        var $retval6=$retval; //@line 2368 "textio.c"
        ;
        return $retval6; //@line 2368 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_readable($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 2375 "textio.c"
        var $2=$1+8; //@line 2375 "textio.c"
        var $3=HEAP[$2]; //@line 2375 "textio.c"
        var $4=($3) <= 0; //@line 2375 "textio.c"
        var $5=$self_addr; //@line 2375 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2375 "textio.c"
      case 1: // $bb
        var $6=$5+12; //@line 2375 "textio.c"
        var $7=HEAP[$6]; //@line 2375 "textio.c"
        var $8=($7)!=0; //@line 2375 "textio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 2375 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2375 "textio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str57433); //@line 2375 "textio.c"
        __label__ = 4; break; //@line 2375 "textio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str58434); //@line 2375 "textio.c"
        __label__ = 4; break; //@line 2375 "textio.c"
      case 4: // $bb3
        $0=0; //@line 2375 "textio.c"
        __label__ = 6; break; //@line 2375 "textio.c"
      case 5: // $bb4
        var $10=$5+20; //@line 2376 "textio.c"
        var $11=HEAP[$10]; //@line 2376 "textio.c"
        var $12=__PyObject_CallMethod_SizeT($11, __str50426, 0, allocate(1, "i32", ALLOC_STACK)); //@line 2376 "textio.c"
        $0=$12; //@line 2376 "textio.c"
        __label__ = 6; break; //@line 2376 "textio.c"
      case 6: // $bb5
        var $13=$0; //@line 2375 "textio.c"
        $retval=$13; //@line 2375 "textio.c"
        var $retval6=$retval; //@line 2375 "textio.c"
        ;
        return $retval6; //@line 2375 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_writable($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 2382 "textio.c"
        var $2=$1+8; //@line 2382 "textio.c"
        var $3=HEAP[$2]; //@line 2382 "textio.c"
        var $4=($3) <= 0; //@line 2382 "textio.c"
        var $5=$self_addr; //@line 2382 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2382 "textio.c"
      case 1: // $bb
        var $6=$5+12; //@line 2382 "textio.c"
        var $7=HEAP[$6]; //@line 2382 "textio.c"
        var $8=($7)!=0; //@line 2382 "textio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 2382 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2382 "textio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str57433); //@line 2382 "textio.c"
        __label__ = 4; break; //@line 2382 "textio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str58434); //@line 2382 "textio.c"
        __label__ = 4; break; //@line 2382 "textio.c"
      case 4: // $bb3
        $0=0; //@line 2382 "textio.c"
        __label__ = 6; break; //@line 2382 "textio.c"
      case 5: // $bb4
        var $10=$5+20; //@line 2383 "textio.c"
        var $11=HEAP[$10]; //@line 2383 "textio.c"
        var $12=__PyObject_CallMethod_SizeT($11, __str52428, 0, allocate(1, "i32", ALLOC_STACK)); //@line 2383 "textio.c"
        $0=$12; //@line 2383 "textio.c"
        __label__ = 6; break; //@line 2383 "textio.c"
      case 6: // $bb5
        var $13=$0; //@line 2382 "textio.c"
        $retval=$13; //@line 2382 "textio.c"
        var $retval6=$retval; //@line 2382 "textio.c"
        ;
        return $retval6; //@line 2382 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_isatty($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 2389 "textio.c"
        var $2=$1+8; //@line 2389 "textio.c"
        var $3=HEAP[$2]; //@line 2389 "textio.c"
        var $4=($3) <= 0; //@line 2389 "textio.c"
        var $5=$self_addr; //@line 2389 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2389 "textio.c"
      case 1: // $bb
        var $6=$5+12; //@line 2389 "textio.c"
        var $7=HEAP[$6]; //@line 2389 "textio.c"
        var $8=($7)!=0; //@line 2389 "textio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 2389 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2389 "textio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str57433); //@line 2389 "textio.c"
        __label__ = 4; break; //@line 2389 "textio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str58434); //@line 2389 "textio.c"
        __label__ = 4; break; //@line 2389 "textio.c"
      case 4: // $bb3
        $0=0; //@line 2389 "textio.c"
        __label__ = 6; break; //@line 2389 "textio.c"
      case 5: // $bb4
        var $10=$5+20; //@line 2390 "textio.c"
        var $11=HEAP[$10]; //@line 2390 "textio.c"
        var $12=__PyObject_CallMethod_SizeT($11, __str101, 0, allocate(1, "i32", ALLOC_STACK)); //@line 2390 "textio.c"
        $0=$12; //@line 2390 "textio.c"
        __label__ = 6; break; //@line 2390 "textio.c"
      case 6: // $bb5
        var $13=$0; //@line 2389 "textio.c"
        $retval=$13; //@line 2389 "textio.c"
        var $retval6=$retval; //@line 2389 "textio.c"
        ;
        return $retval6; //@line 2389 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_flush($self, $args) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $r;
        var $_res;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 2396 "textio.c"
        var $2=$1+8; //@line 2396 "textio.c"
        var $3=HEAP[$2]; //@line 2396 "textio.c"
        var $4=($3) <= 0; //@line 2396 "textio.c"
        var $5=$self_addr; //@line 2396 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2396 "textio.c"
      case 1: // $bb
        var $6=$5+12; //@line 2396 "textio.c"
        var $7=HEAP[$6]; //@line 2396 "textio.c"
        var $8=($7)!=0; //@line 2396 "textio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 2396 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2396 "textio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str57433); //@line 2396 "textio.c"
        __label__ = 4; break; //@line 2396 "textio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str58434); //@line 2396 "textio.c"
        __label__ = 4; break; //@line 2396 "textio.c"
      case 4: // $bb3
        $0=0; //@line 2396 "textio.c"
        __label__ = 21; break; //@line 2396 "textio.c"
      case 5: // $bb4
        var $10=$5; //@line 2397 "textio.c"
        var $11=$10+4; //@line 2397 "textio.c"
        var $12=HEAP[$11]; //@line 2397 "textio.c"
        var $13=($12)==(_PyTextIOWrapper_Type); //@line 2397 "textio.c"
        var $14=$self_addr; //@line 2397 "textio.c"
        if ($13) { __label__ = 6; break; } else { __label__ = 16; break; } //@line 2397 "textio.c"
      case 6: // $bb5
        var $15=$14+84; //@line 2397 "textio.c"
        var $16=HEAP[$15]; //@line 2397 "textio.c"
        var $17=($16)!=0; //@line 2397 "textio.c"
        var $18=$self_addr; //@line 2397 "textio.c"
        if ($17) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 2397 "textio.c"
      case 7: // $bb6
        var $19=$18+84; //@line 2397 "textio.c"
        var $20=HEAP[$19]; //@line 2397 "textio.c"
        var $21=__PyFileIO_closed($20); //@line 2397 "textio.c"
        $r=$21; //@line 2397 "textio.c"
        __lastLabel__ = 7; __label__ = 14; break; //@line 2397 "textio.c"
      case 8: // $bb7
        var $22=_textiowrapper_closed_get($18, 0); //@line 2397 "textio.c"
        $_res=$22; //@line 2397 "textio.c"
        var $23=$_res; //@line 2397 "textio.c"
        var $24=($23)==0; //@line 2397 "textio.c"
        if ($24) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 2397 "textio.c"
      case 9: // $bb8
        $0=0; //@line 2397 "textio.c"
        __label__ = 21; break; //@line 2397 "textio.c"
      case 10: // $bb9
        var $25=$_res; //@line 2397 "textio.c"
        var $26=_PyObject_IsTrue($25); //@line 2397 "textio.c"
        $r=$26; //@line 2397 "textio.c"
        var $27=$_res; //@line 2397 "textio.c"
        var $28=$27; //@line 2397 "textio.c"
        var $29=HEAP[$28]; //@line 2397 "textio.c"
        var $30=($29) - 1; //@line 2397 "textio.c"
        var $31=$_res; //@line 2397 "textio.c"
        var $32=$31; //@line 2397 "textio.c"
        HEAP[$32]=$30; //@line 2397 "textio.c"
        var $33=$_res; //@line 2397 "textio.c"
        var $34=$33; //@line 2397 "textio.c"
        var $35=HEAP[$34]; //@line 2397 "textio.c"
        var $36=($35)==0; //@line 2397 "textio.c"
        if ($36) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 2397 "textio.c"
      case 11: // $bb10
        var $37=$_res; //@line 2397 "textio.c"
        var $38=$37+4; //@line 2397 "textio.c"
        var $39=HEAP[$38]; //@line 2397 "textio.c"
        var $40=$39+24; //@line 2397 "textio.c"
        var $41=HEAP[$40]; //@line 2397 "textio.c"
        var $42=$_res; //@line 2397 "textio.c"
        FUNCTION_TABLE[$41]($42); //@line 2397 "textio.c"
        __label__ = 12; break; //@line 2397 "textio.c"
      case 12: // $bb11
        var $43=$r; //@line 2397 "textio.c"
        var $44=($43) < 0; //@line 2397 "textio.c"
        if ($44) { __lastLabel__ = 12; __label__ = 13; break; } else { __lastLabel__ = 12; __label__ = 14; break; } //@line 2397 "textio.c"
      case 13: // $bb12
        $0=0; //@line 2397 "textio.c"
        __label__ = 21; break; //@line 2397 "textio.c"
      case 14: // $bb13
        var $45=__lastLabel__ == 12 ? $43 : ($21);
        var $46=($45) > 0; //@line 2397 "textio.c"
        if ($46) { __label__ = 15; break; } else { __label__ = 18; break; } //@line 2397 "textio.c"
      case 15: // $bb14
        var $47=HEAP[_PyExc_ValueError]; //@line 2397 "textio.c"
        _PyErr_SetString($47, __str60436); //@line 2397 "textio.c"
        $0=0; //@line 2397 "textio.c"
        __label__ = 21; break; //@line 2397 "textio.c"
      case 16: // $bb16
        var $48=$14; //@line 2397 "textio.c"
        var $49=__PyIOBase_check_closed($48, __Py_TrueStruct); //@line 2397 "textio.c"
        var $50=($49)==0; //@line 2397 "textio.c"
        if ($50) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 2397 "textio.c"
      case 17: // $bb17
        $0=0; //@line 2397 "textio.c"
        __label__ = 21; break; //@line 2397 "textio.c"
      case 18: // $bb18
        var $51=$self_addr; //@line 2398 "textio.c"
        var $52=$51+52; //@line 2398 "textio.c"
        var $53=HEAP[$52]; //@line 2398 "textio.c"
        var $54=$self_addr; //@line 2398 "textio.c"
        var $55=$54+53; //@line 2398 "textio.c"
        HEAP[$55]=$53; //@line 2398 "textio.c"
        var $56=$self_addr; //@line 2399 "textio.c"
        var $57=__textiowrapper_writeflush($56); //@line 2399 "textio.c"
        var $58=($57) < 0; //@line 2399 "textio.c"
        if ($58) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 2399 "textio.c"
      case 19: // $bb19
        $0=0; //@line 2400 "textio.c"
        __label__ = 21; break; //@line 2400 "textio.c"
      case 20: // $bb20
        var $59=$self_addr; //@line 2401 "textio.c"
        var $60=$59+20; //@line 2401 "textio.c"
        var $61=HEAP[$60]; //@line 2401 "textio.c"
        var $62=__PyObject_CallMethod_SizeT($61, __str79, 0, allocate(1, "i32", ALLOC_STACK)); //@line 2401 "textio.c"
        $0=$62; //@line 2401 "textio.c"
        __label__ = 21; break; //@line 2401 "textio.c"
      case 21: // $bb21
        var $63=$0; //@line 2396 "textio.c"
        $retval=$63; //@line 2396 "textio.c"
        var $retval22=$retval; //@line 2396 "textio.c"
        ;
        return $retval22; //@line 2396 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_close($self, $args) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $args_addr;
        var $retval;
        var $0;
        var $res;
        var $r;
        $self_addr=$self;
        $args_addr=$args;
        var $1=$self_addr; //@line 2409 "textio.c"
        var $2=$1+8; //@line 2409 "textio.c"
        var $3=HEAP[$2]; //@line 2409 "textio.c"
        var $4=($3) <= 0; //@line 2409 "textio.c"
        var $5=$self_addr; //@line 2409 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2409 "textio.c"
      case 1: // $bb
        var $6=$5+12; //@line 2409 "textio.c"
        var $7=HEAP[$6]; //@line 2409 "textio.c"
        var $8=($7)!=0; //@line 2409 "textio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 2409 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2409 "textio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str57433); //@line 2409 "textio.c"
        __label__ = 4; break; //@line 2409 "textio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str58434); //@line 2409 "textio.c"
        __label__ = 4; break; //@line 2409 "textio.c"
      case 4: // $bb3
        $0=0; //@line 2409 "textio.c"
        __label__ = 18; break; //@line 2409 "textio.c"
      case 5: // $bb4
        var $10=_textiowrapper_closed_get($5, 0); //@line 2411 "textio.c"
        $res=$10; //@line 2411 "textio.c"
        var $11=$res; //@line 2412 "textio.c"
        var $12=($11)==0; //@line 2412 "textio.c"
        if ($12) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 2412 "textio.c"
      case 6: // $bb5
        $0=0; //@line 2413 "textio.c"
        __label__ = 18; break; //@line 2413 "textio.c"
      case 7: // $bb6
        var $13=$res; //@line 2414 "textio.c"
        var $14=_PyObject_IsTrue($13); //@line 2414 "textio.c"
        $r=$14; //@line 2414 "textio.c"
        var $15=$res; //@line 2415 "textio.c"
        var $16=$15; //@line 2415 "textio.c"
        var $17=HEAP[$16]; //@line 2415 "textio.c"
        var $18=($17) - 1; //@line 2415 "textio.c"
        var $19=$res; //@line 2415 "textio.c"
        var $20=$19; //@line 2415 "textio.c"
        HEAP[$20]=$18; //@line 2415 "textio.c"
        var $21=$res; //@line 2415 "textio.c"
        var $22=$21; //@line 2415 "textio.c"
        var $23=HEAP[$22]; //@line 2415 "textio.c"
        var $24=($23)==0; //@line 2415 "textio.c"
        if ($24) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 2415 "textio.c"
      case 8: // $bb7
        var $25=$res; //@line 2415 "textio.c"
        var $26=$25+4; //@line 2415 "textio.c"
        var $27=HEAP[$26]; //@line 2415 "textio.c"
        var $28=$27+24; //@line 2415 "textio.c"
        var $29=HEAP[$28]; //@line 2415 "textio.c"
        var $30=$res; //@line 2415 "textio.c"
        FUNCTION_TABLE[$29]($30); //@line 2415 "textio.c"
        __label__ = 9; break; //@line 2415 "textio.c"
      case 9: // $bb8
        var $31=$r; //@line 2416 "textio.c"
        var $32=($31) < 0; //@line 2416 "textio.c"
        if ($32) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 2416 "textio.c"
      case 10: // $bb9
        $0=0; //@line 2417 "textio.c"
        __label__ = 18; break; //@line 2417 "textio.c"
      case 11: // $bb10
        var $33=$r; //@line 2419 "textio.c"
        var $34=($33) > 0; //@line 2419 "textio.c"
        if ($34) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 2419 "textio.c"
      case 12: // $bb11
        var $35=HEAP[__Py_NoneStruct]; //@line 2420 "textio.c"
        var $36=($35) + 1; //@line 2420 "textio.c"
        HEAP[__Py_NoneStruct]=$36; //@line 2420 "textio.c"
        $0=__Py_NoneStruct; //@line 2420 "textio.c"
        __label__ = 18; break; //@line 2420 "textio.c"
      case 13: // $bb12
        var $37=$self_addr; //@line 2423 "textio.c"
        var $38=$37; //@line 2423 "textio.c"
        var $39=__PyObject_CallMethod_SizeT($38, __str79, 0, allocate(1, "i32", ALLOC_STACK)); //@line 2423 "textio.c"
        $res=$39; //@line 2423 "textio.c"
        var $40=$res; //@line 2424 "textio.c"
        var $41=($40)==0; //@line 2424 "textio.c"
        if ($41) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 2424 "textio.c"
      case 14: // $bb13
        $0=0; //@line 2425 "textio.c"
        __label__ = 18; break; //@line 2425 "textio.c"
      case 15: // $bb14
        var $42=$res; //@line 2428 "textio.c"
        var $43=$42; //@line 2428 "textio.c"
        var $44=HEAP[$43]; //@line 2428 "textio.c"
        var $45=($44) - 1; //@line 2428 "textio.c"
        var $46=$res; //@line 2428 "textio.c"
        var $47=$46; //@line 2428 "textio.c"
        HEAP[$47]=$45; //@line 2428 "textio.c"
        var $48=$res; //@line 2428 "textio.c"
        var $49=$48; //@line 2428 "textio.c"
        var $50=HEAP[$49]; //@line 2428 "textio.c"
        var $51=($50)==0; //@line 2428 "textio.c"
        if ($51) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 2428 "textio.c"
      case 16: // $bb15
        var $52=$res; //@line 2428 "textio.c"
        var $53=$52+4; //@line 2428 "textio.c"
        var $54=HEAP[$53]; //@line 2428 "textio.c"
        var $55=$54+24; //@line 2428 "textio.c"
        var $56=HEAP[$55]; //@line 2428 "textio.c"
        var $57=$res; //@line 2428 "textio.c"
        FUNCTION_TABLE[$56]($57); //@line 2428 "textio.c"
        __label__ = 17; break; //@line 2428 "textio.c"
      case 17: // $bb16
        var $58=$self_addr; //@line 2430 "textio.c"
        var $59=$58+20; //@line 2430 "textio.c"
        var $60=HEAP[$59]; //@line 2430 "textio.c"
        var $61=__PyObject_CallMethod_SizeT($60, __str102, 0, allocate(1, "i32", ALLOC_STACK)); //@line 2430 "textio.c"
        $0=$61; //@line 2430 "textio.c"
        __label__ = 18; break; //@line 2430 "textio.c"
      case 18: // $bb17
        var $62=$0; //@line 2409 "textio.c"
        $retval=$62; //@line 2409 "textio.c"
        var $retval18=$retval; //@line 2409 "textio.c"
        ;
        return $retval18; //@line 2409 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_iternext($self) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $retval;
        var $0;
        var $line;
        var $_py_tmp;
        $self_addr=$self;
        var $1=$self_addr; //@line 2439 "textio.c"
        var $2=$1+8; //@line 2439 "textio.c"
        var $3=HEAP[$2]; //@line 2439 "textio.c"
        var $4=($3) <= 0; //@line 2439 "textio.c"
        var $5=$self_addr; //@line 2439 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2439 "textio.c"
      case 1: // $bb
        var $6=$5+12; //@line 2439 "textio.c"
        var $7=HEAP[$6]; //@line 2439 "textio.c"
        var $8=($7)!=0; //@line 2439 "textio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 2439 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2439 "textio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str57433); //@line 2439 "textio.c"
        __label__ = 4; break; //@line 2439 "textio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str58434); //@line 2439 "textio.c"
        __label__ = 4; break; //@line 2439 "textio.c"
      case 4: // $bb3
        $0=0; //@line 2439 "textio.c"
        __label__ = 22; break; //@line 2439 "textio.c"
      case 5: // $bb4
        var $10=$5+53; //@line 2441 "textio.c"
        HEAP[$10]=0; //@line 2441 "textio.c"
        var $11=$self_addr; //@line 2442 "textio.c"
        var $12=$11; //@line 2442 "textio.c"
        var $13=$12+4; //@line 2442 "textio.c"
        var $14=HEAP[$13]; //@line 2442 "textio.c"
        var $15=($14)==(_PyTextIOWrapper_Type); //@line 2442 "textio.c"
        if ($15) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 2442 "textio.c"
      case 6: // $bb5
        var $16=$self_addr; //@line 2444 "textio.c"
        var $17=__textiowrapper_readline($16, -1); //@line 2444 "textio.c"
        $line=$17; //@line 2444 "textio.c"
        __lastLabel__ = 6; __label__ = 12; break; //@line 2444 "textio.c"
      case 7: // $bb6
        var $18=HEAP[__PyIO_str_readline]; //@line 2447 "textio.c"
        var $19=$self_addr; //@line 2447 "textio.c"
        var $20=$19; //@line 2447 "textio.c"
        var $21=_PyObject_CallMethodObjArgs($20, $18, allocate(4, "i8*", ALLOC_STACK)); //@line 2447 "textio.c"
        $line=$21; //@line 2447 "textio.c"
        var $22=$line; //@line 2449 "textio.c"
        var $23=($22)!=0; //@line 2449 "textio.c"
        if ($23) { __label__ = 8; break; } else { __label__ = 13; break; } //@line 2449 "textio.c"
      case 8: // $bb7
        var $24=$line; //@line 2449 "textio.c"
        var $25=$24+4; //@line 2449 "textio.c"
        var $26=HEAP[$25]; //@line 2449 "textio.c"
        var $27=$26+84; //@line 2449 "textio.c"
        var $28=HEAP[$27]; //@line 2449 "textio.c"
        var $29=($28) & 268435456; //@line 2449 "textio.c"
        var $30=($29)==0; //@line 2449 "textio.c"
        var $31=$line; //@line 2450 "textio.c"
        if ($30) { __lastLabel__ = 8; __label__ = 9; break; } else { __lastLabel__ = 8; __label__ = 12; break; } //@line 2449 "textio.c"
      case 9: // $bb8
        var $32=$31+4; //@line 2450 "textio.c"
        var $33=HEAP[$32]; //@line 2450 "textio.c"
        var $34=$33+12; //@line 2450 "textio.c"
        var $35=HEAP[$34]; //@line 2450 "textio.c"
        var $36=HEAP[_PyExc_IOError]; //@line 2450 "textio.c"
        var $37=_PyErr_Format($36, __str103, allocate([$35,0,0,0], ["i8*",0,0,0], ALLOC_STACK)); //@line 2450 "textio.c"
        var $38=$line; //@line 2453 "textio.c"
        var $39=$38; //@line 2453 "textio.c"
        var $40=HEAP[$39]; //@line 2453 "textio.c"
        var $41=($40) - 1; //@line 2453 "textio.c"
        var $42=$line; //@line 2453 "textio.c"
        var $43=$42; //@line 2453 "textio.c"
        HEAP[$43]=$41; //@line 2453 "textio.c"
        var $44=$line; //@line 2453 "textio.c"
        var $45=$44; //@line 2453 "textio.c"
        var $46=HEAP[$45]; //@line 2453 "textio.c"
        var $47=($46)==0; //@line 2453 "textio.c"
        if ($47) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 2453 "textio.c"
      case 10: // $bb9
        var $48=$line; //@line 2453 "textio.c"
        var $49=$48+4; //@line 2453 "textio.c"
        var $50=HEAP[$49]; //@line 2453 "textio.c"
        var $51=$50+24; //@line 2453 "textio.c"
        var $52=HEAP[$51]; //@line 2453 "textio.c"
        var $53=$line; //@line 2453 "textio.c"
        FUNCTION_TABLE[$52]($53); //@line 2453 "textio.c"
        __label__ = 11; break; //@line 2453 "textio.c"
      case 11: // $bb10
        $0=0; //@line 2454 "textio.c"
        __label__ = 22; break; //@line 2454 "textio.c"
      case 12: // $bb11
        var $54=__lastLabel__ == 6 ? $17 : ($31);
        var $55=($54)==0; //@line 2458 "textio.c"
        if ($55) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 2458 "textio.c"
      case 13: // $bb12
        $0=0; //@line 2459 "textio.c"
        __label__ = 22; break; //@line 2459 "textio.c"
      case 14: // $bb13
        var $56=$line; //@line 2461 "textio.c"
        var $57=$56; //@line 2461 "textio.c"
        var $58=$57+8; //@line 2461 "textio.c"
        var $59=HEAP[$58]; //@line 2461 "textio.c"
        var $60=($59)==0; //@line 2461 "textio.c"
        var $61=$line; //@line 2463 "textio.c"
        if ($60) { __label__ = 15; break; } else { __label__ = 21; break; } //@line 2461 "textio.c"
      case 15: // $bb14
        var $62=$61; //@line 2463 "textio.c"
        var $63=HEAP[$62]; //@line 2463 "textio.c"
        var $64=($63) - 1; //@line 2463 "textio.c"
        var $65=$line; //@line 2463 "textio.c"
        var $66=$65; //@line 2463 "textio.c"
        HEAP[$66]=$64; //@line 2463 "textio.c"
        var $67=$line; //@line 2463 "textio.c"
        var $68=$67; //@line 2463 "textio.c"
        var $69=HEAP[$68]; //@line 2463 "textio.c"
        var $70=($69)==0; //@line 2463 "textio.c"
        if ($70) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 2463 "textio.c"
      case 16: // $bb15
        var $71=$line; //@line 2463 "textio.c"
        var $72=$71+4; //@line 2463 "textio.c"
        var $73=HEAP[$72]; //@line 2463 "textio.c"
        var $74=$73+24; //@line 2463 "textio.c"
        var $75=HEAP[$74]; //@line 2463 "textio.c"
        var $76=$line; //@line 2463 "textio.c"
        FUNCTION_TABLE[$75]($76); //@line 2463 "textio.c"
        __label__ = 17; break; //@line 2463 "textio.c"
      case 17: // $bb16
        var $77=$self_addr; //@line 2464 "textio.c"
        var $78=$77+80; //@line 2464 "textio.c"
        var $79=HEAP[$78]; //@line 2464 "textio.c"
        var $80=($79)!=0; //@line 2464 "textio.c"
        if ($80) { __label__ = 18; break; } else { __label__ = 20; break; } //@line 2464 "textio.c"
      case 18: // $bb17
        var $81=$self_addr; //@line 2464 "textio.c"
        var $82=$81+80; //@line 2464 "textio.c"
        var $83=HEAP[$82]; //@line 2464 "textio.c"
        $_py_tmp=$83; //@line 2464 "textio.c"
        var $84=$self_addr; //@line 2464 "textio.c"
        var $85=$84+80; //@line 2464 "textio.c"
        HEAP[$85]=0; //@line 2464 "textio.c"
        var $86=$_py_tmp; //@line 2464 "textio.c"
        var $87=$86; //@line 2464 "textio.c"
        var $88=HEAP[$87]; //@line 2464 "textio.c"
        var $89=($88) - 1; //@line 2464 "textio.c"
        var $90=$_py_tmp; //@line 2464 "textio.c"
        var $91=$90; //@line 2464 "textio.c"
        HEAP[$91]=$89; //@line 2464 "textio.c"
        var $92=$_py_tmp; //@line 2464 "textio.c"
        var $93=$92; //@line 2464 "textio.c"
        var $94=HEAP[$93]; //@line 2464 "textio.c"
        var $95=($94)==0; //@line 2464 "textio.c"
        if ($95) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 2464 "textio.c"
      case 19: // $bb18
        var $96=$_py_tmp; //@line 2464 "textio.c"
        var $97=$96+4; //@line 2464 "textio.c"
        var $98=HEAP[$97]; //@line 2464 "textio.c"
        var $99=$98+24; //@line 2464 "textio.c"
        var $100=HEAP[$99]; //@line 2464 "textio.c"
        var $101=$_py_tmp; //@line 2464 "textio.c"
        FUNCTION_TABLE[$100]($101); //@line 2464 "textio.c"
        __label__ = 20; break; //@line 2464 "textio.c"
      case 20: // $bb19
        var $102=$self_addr; //@line 2465 "textio.c"
        var $103=$102+52; //@line 2465 "textio.c"
        var $104=HEAP[$103]; //@line 2465 "textio.c"
        var $105=$self_addr; //@line 2465 "textio.c"
        var $106=$105+53; //@line 2465 "textio.c"
        HEAP[$106]=$104; //@line 2465 "textio.c"
        $0=0; //@line 2466 "textio.c"
        __label__ = 22; break; //@line 2466 "textio.c"
      case 21: // $bb20
        $0=$61; //@line 2469 "textio.c"
        __label__ = 22; break; //@line 2469 "textio.c"
      case 22: // $bb21
        var $107=$0; //@line 2439 "textio.c"
        $retval=$107; //@line 2439 "textio.c"
        var $retval22=$retval; //@line 2439 "textio.c"
        ;
        return $retval22; //@line 2439 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_name_get($self, $context) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $context_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $context_addr=$context;
        var $1=$self_addr; //@line 2475 "textio.c"
        var $2=$1+8; //@line 2475 "textio.c"
        var $3=HEAP[$2]; //@line 2475 "textio.c"
        var $4=($3) <= 0; //@line 2475 "textio.c"
        var $5=$self_addr; //@line 2475 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2475 "textio.c"
      case 1: // $bb
        var $6=$5+12; //@line 2475 "textio.c"
        var $7=HEAP[$6]; //@line 2475 "textio.c"
        var $8=($7)!=0; //@line 2475 "textio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 2475 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2475 "textio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str57433); //@line 2475 "textio.c"
        __label__ = 4; break; //@line 2475 "textio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str58434); //@line 2475 "textio.c"
        __label__ = 4; break; //@line 2475 "textio.c"
      case 4: // $bb3
        $0=0; //@line 2475 "textio.c"
        __label__ = 6; break; //@line 2475 "textio.c"
      case 5: // $bb4
        var $10=$5+20; //@line 2476 "textio.c"
        var $11=HEAP[$10]; //@line 2476 "textio.c"
        var $12=_PyObject_GetAttrString($11, __str53429); //@line 2476 "textio.c"
        $0=$12; //@line 2476 "textio.c"
        __label__ = 6; break; //@line 2476 "textio.c"
      case 6: // $bb5
        var $13=$0; //@line 2475 "textio.c"
        $retval=$13; //@line 2475 "textio.c"
        var $retval6=$retval; //@line 2475 "textio.c"
        ;
        return $retval6; //@line 2475 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_closed_get($self, $context) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $context_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $context_addr=$context;
        var $1=$self_addr; //@line 2482 "textio.c"
        var $2=$1+8; //@line 2482 "textio.c"
        var $3=HEAP[$2]; //@line 2482 "textio.c"
        var $4=($3) <= 0; //@line 2482 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2482 "textio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 2482 "textio.c"
        var $6=$5+12; //@line 2482 "textio.c"
        var $7=HEAP[$6]; //@line 2482 "textio.c"
        var $8=($7)!=0; //@line 2482 "textio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 2482 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2482 "textio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str57433); //@line 2482 "textio.c"
        __label__ = 4; break; //@line 2482 "textio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str58434); //@line 2482 "textio.c"
        __label__ = 4; break; //@line 2482 "textio.c"
      case 4: // $bb3
        $0=0; //@line 2482 "textio.c"
        __label__ = 6; break; //@line 2482 "textio.c"
      case 5: // $bb4
        var $10=HEAP[__PyIO_str_closed]; //@line 2483 "textio.c"
        var $11=$self_addr; //@line 2483 "textio.c"
        var $12=$11+20; //@line 2483 "textio.c"
        var $13=HEAP[$12]; //@line 2483 "textio.c"
        var $14=_PyObject_GetAttr($13, $10); //@line 2483 "textio.c"
        $0=$14; //@line 2483 "textio.c"
        __label__ = 6; break; //@line 2483 "textio.c"
      case 6: // $bb5
        var $15=$0; //@line 2482 "textio.c"
        $retval=$15; //@line 2482 "textio.c"
        var $retval6=$retval; //@line 2482 "textio.c"
        ;
        return $retval6; //@line 2482 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_newlines_get($self, $context) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $context_addr;
        var $retval;
        var $0;
        var $res;
        $self_addr=$self;
        $context_addr=$context;
        var $1=$self_addr; //@line 2490 "textio.c"
        var $2=$1+8; //@line 2490 "textio.c"
        var $3=HEAP[$2]; //@line 2490 "textio.c"
        var $4=($3) <= 0; //@line 2490 "textio.c"
        var $5=$self_addr; //@line 2490 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2490 "textio.c"
      case 1: // $bb
        var $6=$5+12; //@line 2490 "textio.c"
        var $7=HEAP[$6]; //@line 2490 "textio.c"
        var $8=($7)!=0; //@line 2490 "textio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 2490 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2490 "textio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str57433); //@line 2490 "textio.c"
        __label__ = 4; break; //@line 2490 "textio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str58434); //@line 2490 "textio.c"
        __label__ = 4; break; //@line 2490 "textio.c"
      case 4: // $bb3
        $0=0; //@line 2490 "textio.c"
        __label__ = 12; break; //@line 2490 "textio.c"
      case 5: // $bb4
        var $10=$5+32; //@line 2491 "textio.c"
        var $11=HEAP[$10]; //@line 2491 "textio.c"
        var $12=($11)==0; //@line 2491 "textio.c"
        if ($12) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 2491 "textio.c"
      case 6: // $bb5
        var $13=HEAP[__Py_NoneStruct]; //@line 2492 "textio.c"
        var $14=($13) + 1; //@line 2492 "textio.c"
        HEAP[__Py_NoneStruct]=$14; //@line 2492 "textio.c"
        $0=__Py_NoneStruct; //@line 2492 "textio.c"
        __label__ = 12; break; //@line 2492 "textio.c"
      case 7: // $bb6
        var $15=HEAP[__PyIO_str_newlines]; //@line 2493 "textio.c"
        var $16=$self_addr; //@line 2493 "textio.c"
        var $17=$16+32; //@line 2493 "textio.c"
        var $18=HEAP[$17]; //@line 2493 "textio.c"
        var $19=_PyObject_GetAttr($18, $15); //@line 2493 "textio.c"
        $res=$19; //@line 2493 "textio.c"
        var $20=$res; //@line 2494 "textio.c"
        var $21=($20)==0; //@line 2494 "textio.c"
        if ($21) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 2494 "textio.c"
      case 8: // $bb7
        var $22=HEAP[_PyExc_AttributeError]; //@line 2495 "textio.c"
        var $23=_PyErr_ExceptionMatches($22); //@line 2495 "textio.c"
        var $24=($23)!=0; //@line 2495 "textio.c"
        if ($24) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 2495 "textio.c"
      case 9: // $bb8
        _PyErr_Clear(); //@line 2496 "textio.c"
        var $25=HEAP[__Py_NoneStruct]; //@line 2497 "textio.c"
        var $26=($25) + 1; //@line 2497 "textio.c"
        HEAP[__Py_NoneStruct]=$26; //@line 2497 "textio.c"
        $0=__Py_NoneStruct; //@line 2497 "textio.c"
        __label__ = 12; break; //@line 2497 "textio.c"
      case 10: // $bb9
        $0=0; //@line 2500 "textio.c"
        __label__ = 12; break; //@line 2500 "textio.c"
      case 11: // $bb10
        var $27=$res; //@line 2503 "textio.c"
        $0=$27; //@line 2503 "textio.c"
        __label__ = 12; break; //@line 2503 "textio.c"
      case 12: // $bb11
        var $28=$0; //@line 2490 "textio.c"
        $retval=$28; //@line 2490 "textio.c"
        var $retval12=$retval; //@line 2490 "textio.c"
        ;
        return $retval12; //@line 2490 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_errors_get($self, $context) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $context_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $context_addr=$context;
        var $1=$self_addr; //@line 2509 "textio.c"
        var $2=$1+8; //@line 2509 "textio.c"
        var $3=HEAP[$2]; //@line 2509 "textio.c"
        var $4=($3) <= 0; //@line 2509 "textio.c"
        var $5=$self_addr; //@line 2509 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2509 "textio.c"
      case 1: // $bb
        var $6=$5+12; //@line 2509 "textio.c"
        var $7=HEAP[$6]; //@line 2509 "textio.c"
        var $8=($7)!=0; //@line 2509 "textio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 2509 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2509 "textio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str57433); //@line 2509 "textio.c"
        __label__ = 4; break; //@line 2509 "textio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str58434); //@line 2509 "textio.c"
        __label__ = 4; break; //@line 2509 "textio.c"
      case 4: // $bb3
        $0=0; //@line 2509 "textio.c"
        __label__ = 6; break; //@line 2509 "textio.c"
      case 5: // $bb4
        var $10=$5+40; //@line 2510 "textio.c"
        var $11=HEAP[$10]; //@line 2510 "textio.c"
        var $12=$11; //@line 2510 "textio.c"
        var $13=HEAP[$12]; //@line 2510 "textio.c"
        var $14=($13) + 1; //@line 2510 "textio.c"
        var $15=$11; //@line 2510 "textio.c"
        HEAP[$15]=$14; //@line 2510 "textio.c"
        var $16=$self_addr; //@line 2511 "textio.c"
        var $17=$16+40; //@line 2511 "textio.c"
        var $18=HEAP[$17]; //@line 2511 "textio.c"
        $0=$18; //@line 2511 "textio.c"
        __label__ = 6; break; //@line 2511 "textio.c"
      case 6: // $bb5
        var $19=$0; //@line 2509 "textio.c"
        $retval=$19; //@line 2509 "textio.c"
        var $retval6=$retval; //@line 2509 "textio.c"
        ;
        return $retval6; //@line 2509 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_chunk_size_get($self, $context) {
    ;
    var __label__;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $context_addr;
        var $retval;
        var $0;
        $self_addr=$self;
        $context_addr=$context;
        var $1=$self_addr; //@line 2517 "textio.c"
        var $2=$1+8; //@line 2517 "textio.c"
        var $3=HEAP[$2]; //@line 2517 "textio.c"
        var $4=($3) <= 0; //@line 2517 "textio.c"
        var $5=$self_addr; //@line 2517 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2517 "textio.c"
      case 1: // $bb
        var $6=$5+12; //@line 2517 "textio.c"
        var $7=HEAP[$6]; //@line 2517 "textio.c"
        var $8=($7)!=0; //@line 2517 "textio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 2517 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2517 "textio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str57433); //@line 2517 "textio.c"
        __label__ = 4; break; //@line 2517 "textio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str58434); //@line 2517 "textio.c"
        __label__ = 4; break; //@line 2517 "textio.c"
      case 4: // $bb3
        $0=0; //@line 2517 "textio.c"
        __label__ = 6; break; //@line 2517 "textio.c"
      case 5: // $bb4
        var $10=$5+16; //@line 2518 "textio.c"
        var $11=HEAP[$10]; //@line 2518 "textio.c"
        var $12=_PyLong_FromSsize_t($11); //@line 2518 "textio.c"
        $0=$12; //@line 2518 "textio.c"
        __label__ = 6; break; //@line 2518 "textio.c"
      case 6: // $bb5
        var $13=$0; //@line 2517 "textio.c"
        $retval=$13; //@line 2517 "textio.c"
        var $retval6=$retval; //@line 2517 "textio.c"
        ;
        return $retval6; //@line 2517 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  

  function _textiowrapper_chunk_size_set($self, $arg, $context) {
    ;
    var __label__;
    var __lastLabel__ = null;
    __label__ = -1; 
    while(1) switch(__label__) {
      case -1: // $entry
        var $self_addr;
        var $arg_addr;
        var $context_addr;
        var $retval;
        var $0;
        var $n;
        $self_addr=$self;
        $arg_addr=$arg;
        $context_addr=$context;
        var $1=$self_addr; //@line 2525 "textio.c"
        var $2=$1+8; //@line 2525 "textio.c"
        var $3=HEAP[$2]; //@line 2525 "textio.c"
        var $4=($3) <= 0; //@line 2525 "textio.c"
        if ($4) { __label__ = 1; break; } else { __label__ = 5; break; } //@line 2525 "textio.c"
      case 1: // $bb
        var $5=$self_addr; //@line 2525 "textio.c"
        var $6=$5+12; //@line 2525 "textio.c"
        var $7=HEAP[$6]; //@line 2525 "textio.c"
        var $8=($7)!=0; //@line 2525 "textio.c"
        var $9=HEAP[_PyExc_ValueError]; //@line 2525 "textio.c"
        if ($8) { __label__ = 2; break; } else { __label__ = 3; break; } //@line 2525 "textio.c"
      case 2: // $bb1
        _PyErr_SetString($9, __str57433); //@line 2525 "textio.c"
        __label__ = 4; break; //@line 2525 "textio.c"
      case 3: // $bb2
        _PyErr_SetString($9, __str58434); //@line 2525 "textio.c"
        __label__ = 4; break; //@line 2525 "textio.c"
      case 4: // $bb3
        $0=-1; //@line 2525 "textio.c"
        __label__ = 12; break; //@line 2525 "textio.c"
      case 5: // $bb4
        var $10=HEAP[_PyExc_TypeError]; //@line 2526 "textio.c"
        var $11=$arg_addr; //@line 2526 "textio.c"
        var $12=_PyNumber_AsSsize_t($11, $10); //@line 2526 "textio.c"
        $n=$12; //@line 2526 "textio.c"
        var $13=$n; //@line 2527 "textio.c"
        var $14=($13)==-1; //@line 2527 "textio.c"
        if ($14) { __lastLabel__ = 5; __label__ = 6; break; } else { __lastLabel__ = 5; __label__ = 9; break; } //@line 2527 "textio.c"
      case 6: // $bb5
        var $15=_PyErr_Occurred(); //@line 2527 "textio.c"
        var $16=($15)!=0; //@line 2527 "textio.c"
        if ($16) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 2527 "textio.c"
      case 7: // $bb6
        $0=-1; //@line 2528 "textio.c"
        __label__ = 12; break; //@line 2528 "textio.c"
      case 8: // $bb7thread_pre_split
        var $_pr=$n;
        __lastLabel__ = 8; __label__ = 9; break;
      case 9: // $bb7
        var $17=__lastLabel__ == 8 ? $_pr : ($13);
        var $18=($17) <= 0; //@line 2529 "textio.c"
        if ($18) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 2529 "textio.c"
      case 10: // $bb8
        var $19=HEAP[_PyExc_ValueError]; //@line 2530 "textio.c"
        _PyErr_SetString($19, __str104); //@line 2530 "textio.c"
        $0=-1; //@line 2532 "textio.c"
        __label__ = 12; break; //@line 2532 "textio.c"
      case 11: // $bb9
        var $20=$self_addr; //@line 2534 "textio.c"
        var $21=$20+16; //@line 2534 "textio.c"
        var $22=$n; //@line 2534 "textio.c"
        HEAP[$21]=$22; //@line 2534 "textio.c"
        $0=0; //@line 2535 "textio.c"
        __label__ = 12; break; //@line 2535 "textio.c"
      case 12: // $bb10
        var $23=$0; //@line 2525 "textio.c"
        $retval=$23; //@line 2525 "textio.c"
        var $retval11=$retval; //@line 2525 "textio.c"
        ;
        return $retval11; //@line 2525 "textio.c"
      default: assert(0, "bad label: " + __label__);
    }
  }
  
FUNCTION_TABLE = FUNCTION_TABLE.concat([0,0,__PyIO_ConvertSsize_t,0,_bufferediobase_detach,0,_bufferediobase_read,0,_bufferediobase_read1,0,_bufferediobase_readinto,0,_bufferediobase_write,0,_buffered_detach,0,_buffered_simple_flush,0,_buffered_close,0,_buffered_seekable,0,_buffered_readable,0,_buffered_writable,0,_buffered_fileno,0,_buffered_isatty,0,_buffered_read,0,_buffered_peek,0,_buffered_read1,0,_buffered_readline,0,_buffered_seek,0,_buffered_tell,0,_buffered_truncate,0,_buffered_closed_get,0,_buffered_name_get,0,_buffered_mode_get,0,_buffered_dealloc,0,_buffered_repr,0,_buffered_traverse,0,_buffered_clear,0,_buffered_iternext,0,_bufferedreader_init,0,_PyType_GenericNew,0,_bufferedwriter_write,0,_buffered_flush,0,_bufferedwriter_init,0,_bufferedrwpair_read,0,_bufferedrwpair_peek,0,_bufferedrwpair_read1,0,_bufferedrwpair_readinto,0,_bufferedrwpair_write,0,_bufferedrwpair_flush,0,_bufferedrwpair_readable,0,_bufferedrwpair_writable,0,_bufferedrwpair_close,0,_bufferedrwpair_isatty,0,_bufferedrwpair_closed_get,0,_bufferedrwpair_dealloc,0,_bufferedrwpair_traverse,0,_bufferedrwpair_clear,0,_bufferedrwpair_init,0,_buffered_readinto,0,_bufferedrandom_init,0,_bytesio_get_closed,0,_return_true,0,_bytesio_close,0,_bytesio_flush,0,_bytesio_isatty,0,_bytesio_tell,0,_bytesio_write,0,_bytesio_writelines,0,_bytesio_read1,0,_bytesio_readinto,0,_bytesio_readline,0,_bytesio_readlines,0,_bytesio_read,0,_bytesio_getvalue,0,_bytesio_seek,0,_bytesio_truncate,0,_bytesio_getstate,0,_bytesio_setstate,0,_bytesio_dealloc,0,_bytesio_traverse,0,_bytesio_clear,0,_PyObject_SelfIter,0,_bytesio_iternext,0,_bytesio_init,0,_bytesio_new,0,_fileio_read,0,_fileio_readall,0,_fileio_readinto,0,_fileio_write,0,_fileio_seek,0,_fileio_tell,0,_fileio_truncate,0,_fileio_close,0,_fileio_seekable,0,_fileio_readable,0,_fileio_writable,0,_fileio_fileno,0,_fileio_isatty,0,_get_closed,0,_get_closefd,0,_get_mode,0,_fileio_dealloc,0,_fileio_repr,0,_PyObject_GenericGetAttr,0,_fileio_traverse,0,_fileio_clear,0,_fileio_init,0,_PyType_GenericAlloc,0,_fileio_new,0,_PyObject_GC_Del,0,_iobase_seek,0,_iobase_tell,0,_iobase_truncate,0,_iobase_flush,0,_iobase_close,0,_iobase_seekable,0,_iobase_readable,0,_iobase_writable,0,__PyIOBase_check_closed,0,__PyIOBase_check_seekable,0,__PyIOBase_check_readable,0,__PyIOBase_check_writable,0,_iobase_fileno,0,_iobase_isatty,0,_iobase_enter,0,_iobase_exit,0,_iobase_readline,0,_iobase_readlines,0,_iobase_writelines,0,_iobase_closed_get,0,_iobase_dealloc,0,_iobase_traverse,0,_iobase_clear,0,_iobase_iter,0,_iobase_iternext,0,_rawiobase_read,0,_rawiobase_readall,0,_blockingioerror_init,0,_io_open,0,_stringio_close,0,_stringio_getvalue,0,_stringio_read,0,_stringio_readline,0,_stringio_tell,0,_stringio_truncate,0,_stringio_seek,0,_stringio_write,0,_stringio_seekable,0,_stringio_readable,0,_stringio_writable,0,_stringio_getstate,0,_stringio_setstate,0,_stringio_closed,0,_stringio_newlines,0,_stringio_line_buffering,0,_stringio_dealloc,0,_stringio_traverse,0,_stringio_clear,0,_stringio_iternext,0,_stringio_init,0,_stringio_new,0,_textiobase_detach,0,_textiobase_read,0,_textiobase_readline,0,_textiobase_write,0,_textiobase_encoding_get,0,_textiobase_newlines_get,0,_textiobase_errors_get,0,_incrementalnewlinedecoder_decode,0,_incrementalnewlinedecoder_getstate,0,_incrementalnewlinedecoder_setstate,0,_incrementalnewlinedecoder_reset,0,_incrementalnewlinedecoder_newlines_get,0,_incrementalnewlinedecoder_dealloc,0,_incrementalnewlinedecoder_init,0,_ascii_encode,0,_latin1_encode,0,_utf8_encode,0,_utf16be_encode,0,_utf16le_encode,0,_utf16_encode,0,_utf32be_encode,0,_utf32le_encode,0,_utf32_encode,0,_textiowrapper_detach,0,_textiowrapper_write,0,_textiowrapper_read,0,_textiowrapper_readline,0,_textiowrapper_flush,0,_textiowrapper_close,0,_textiowrapper_fileno,0,_textiowrapper_seekable,0,_textiowrapper_readable,0,_textiowrapper_writable,0,_textiowrapper_isatty,0,_textiowrapper_seek,0,_textiowrapper_tell,0,_textiowrapper_truncate,0,_textiowrapper_name_get,0,_textiowrapper_closed_get,0,_textiowrapper_newlines_get,0,_textiowrapper_errors_get,0,_textiowrapper_chunk_size_get,0,_textiowrapper_chunk_size_set,0,_textiowrapper_dealloc,0,_textiowrapper_repr,0,_textiowrapper_traverse,0,_textiowrapper_clear,0,_textiowrapper_iternext,0,_textiowrapper_init,0]);

// === Auto-generated postamble setup entry stuff ===

function run(args) {
  
_bufferediobase_doc=allocate([66,97,115,101,32,99,108,97,115,115,32,102,111,114,32,98,117,102,102,101,114,101,100,32,73,79,32,111,98,106,101,99,116,115,46,10,10,84,104,101,32,109,97,105,110,32,100,105,102,102,101,114,101,110,99,101,32,119,105,116,104,32,82,97,119,73,79,66,97,115,101,32,105,115,32,116,104,97,116,32,116,104,101,32,114,101,97,100,40,41,32,109,101,116,104,111,100,10,115,117,112,112,111,114,116,115,32,111,109,105,116,116,105,110,103,32,116,104,101,32,115,105,122,101,32,97,114,103,117,109,101,110,116,44,32,97,110,100,32,100,111,101,115,32,110,111,116,32,104,97,118,101,32,97,32,100,101,102,97,117,108,116,10,105,109,112,108,101,109,101,110,116,97,116,105,111,110,32,116,104,97,116,32,100,101,102,101,114,115,32,116,111,32,114,101,97,100,105,110,116,111,40,41,46,10,10,73,110,32,97,100,100,105,116,105,111,110,44,32,114,101,97,100,40,41,44,32,114,101,97,100,105,110,116,111,40,41,32,97,110,100,32,119,114,105,116,101,40,41,32,109,97,121,32,114,97,105,115,101,10,66,108,111,99,107,105,110,103,73,79,69,114,114,111,114,32,105,102,32,116,104,101,32,117,110,100,101,114,108,121,105,110,103,32,114,97,119,32,115,116,114,101,97,109,32,105,115,32,105,110,32,110,111,110,45,98,108,111,99,107,105,110,103,10,109,111,100,101,32,97,110,100,32,110,111,116,32,114,101,97,100,121,59,32,117,110,108,105,107,101,32,116,104,101,105,114,32,114,97,119,32,99,111,117,110,116,101,114,112,97,114,116,115,44,32,116,104,101,121,32,119,105,108,108,32,110,101,118,101,114,10,114,101,116,117,114,110,32,78,111,110,101,46,10,10,65,32,116,121,112,105,99,97,108,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,32,115,104,111,117,108,100,32,110,111,116,32,105,110,104,101,114,105,116,32,102,114,111,109,32,97,32,82,97,119,73,79,66,97,115,101,10,105,109,112,108,101,109,101,110,116,97,116,105,111,110,44,32,98,117,116,32,119,114,97,112,32,111,110,101,46,10,0] /* Base class for buffe */, "i8", ALLOC_NORMAL);
__str=allocate([119,42,58,114,101,97,100,105,110,116,111,0] /* w_:readinto\00 */, "i8", ALLOC_NORMAL);
__str1=allocate([114,101,97,100,0] /* read\00 */, "i8", ALLOC_NORMAL);
__str2=allocate([110,0] /* n\00 */, "i8", ALLOC_NORMAL);
__str3=allocate([114,101,97,100,40,41,32,115,104,111,117,108,100,32,114,101,116,117,114,110,32,98,121,116,101,115,0] /* read() should return */, "i8", ALLOC_NORMAL);
_bufferediobase_detach_doc=allocate([68,105,115,99,111,110,110,101,99,116,32,116,104,105,115,32,98,117,102,102,101,114,32,102,114,111,109,32,105,116,115,32,117,110,100,101,114,108,121,105,110,103,32,114,97,119,32,115,116,114,101,97,109,32,97,110,100,32,114,101,116,117,114,110,32,105,116,46,10,10,65,102,116,101,114,32,116,104,101,32,114,97,119,32,115,116,114,101,97,109,32,104,97,115,32,98,101,101,110,32,100,101,116,97,99,104,101,100,44,32,116,104,101,32,98,117,102,102,101,114,32,105,115,32,105,110,32,97,110,32,117,110,117,115,97,98,108,101,10,115,116,97,116,101,46,10,0] /* Disconnect this buff */, "i8", ALLOC_NORMAL);
__str4=allocate([100,101,116,97,99,104,0] /* detach\00 */, "i8", ALLOC_NORMAL);
_bufferediobase_read_doc=allocate([82,101,97,100,32,97,110,100,32,114,101,116,117,114,110,32,117,112,32,116,111,32,110,32,98,121,116,101,115,46,10,10,73,102,32,116,104,101,32,97,114,103,117,109,101,110,116,32,105,115,32,111,109,105,116,116,101,100,44,32,78,111,110,101,44,32,111,114,32,110,101,103,97,116,105,118,101,44,32,114,101,97,100,115,32,97,110,100,10,114,101,116,117,114,110,115,32,97,108,108,32,100,97,116,97,32,117,110,116,105,108,32,69,79,70,46,10,10,73,102,32,116,104,101,32,97,114,103,117,109,101,110,116,32,105,115,32,112,111,115,105,116,105,118,101,44,32,97,110,100,32,116,104,101,32,117,110,100,101,114,108,121,105,110,103,32,114,97,119,32,115,116,114,101,97,109,32,105,115,10,110,111,116,32,39,105,110,116,101,114,97,99,116,105,118,101,39,44,32,109,117,108,116,105,112,108,101,32,114,97,119,32,114,101,97,100,115,32,109,97,121,32,98,101,32,105,115,115,117,101,100,32,116,111,32,115,97,116,105,115,102,121,10,116,104,101,32,98,121,116,101,32,99,111,117,110,116,32,40,117,110,108,101,115,115,32,69,79,70,32,105,115,32,114,101,97,99,104,101,100,32,102,105,114,115,116,41,46,32,32,66,117,116,32,102,111,114,10,105,110,116,101,114,97,99,116,105,118,101,32,114,97,119,32,115,116,114,101,97,109,115,32,40,97,115,32,119,101,108,108,32,97,115,32,115,111,99,107,101,116,115,32,97,110,100,32,112,105,112,101,115,41,44,32,97,116,32,109,111,115,116,10,111,110,101,32,114,97,119,32,114,101,97,100,32,119,105,108,108,32,98,101,32,105,115,115,117,101,100,44,32,97,110,100,32,97,32,115,104,111,114,116,32,114,101,115,117,108,116,32,100,111,101,115,32,110,111,116,32,105,109,112,108,121,10,116,104,97,116,32,69,79,70,32,105,115,32,105,109,109,105,110,101,110,116,46,10,10,82,101,116,117,114,110,115,32,97,110,32,101,109,112,116,121,32,98,121,116,101,115,32,111,98,106,101,99,116,32,111,110,32,69,79,70,46,10,10,82,101,116,117,114,110,115,32,78,111,110,101,32,105,102,32,116,104,101,32,117,110,100,101,114,108,121,105,110,103,32,114,97,119,32,115,116,114,101,97,109,32,119,97,115,32,111,112,101,110,32,105,110,32,110,111,110,45,98,108,111,99,107,105,110,103,10,109,111,100,101,32,97,110,100,32,110,111,32,100,97,116,97,32,105,115,32,97,118,97,105,108,97,98,108,101,32,97,116,32,116,104,101,32,109,111,109,101,110,116,46,10,0] /* Read and return up t */, "i8", ALLOC_NORMAL);
_bufferediobase_read1_doc=allocate([82,101,97,100,32,97,110,100,32,114,101,116,117,114,110,32,117,112,32,116,111,32,110,32,98,121,116,101,115,44,32,119,105,116,104,32,97,116,32,109,111,115,116,32,111,110,101,32,114,101,97,100,40,41,32,99,97,108,108,10,116,111,32,116,104,101,32,117,110,100,101,114,108,121,105,110,103,32,114,97,119,32,115,116,114,101,97,109,46,32,65,32,115,104,111,114,116,32,114,101,115,117,108,116,32,100,111,101,115,32,110,111,116,32,105,109,112,108,121,10,116,104,97,116,32,69,79,70,32,105,115,32,105,109,109,105,110,101,110,116,46,10,10,82,101,116,117,114,110,115,32,97,110,32,101,109,112,116,121,32,98,121,116,101,115,32,111,98,106,101,99,116,32,111,110,32,69,79,70,46,10,0] /* Read and return up t */, "i8", ALLOC_NORMAL);
__str5=allocate([114,101,97,100,49,0] /* read1\00 */, "i8", ALLOC_NORMAL);
_bufferediobase_write_doc=allocate([87,114,105,116,101,32,116,104,101,32,103,105,118,101,110,32,98,117,102,102,101,114,32,116,111,32,116,104,101,32,73,79,32,115,116,114,101,97,109,46,10,10,82,101,116,117,114,110,115,32,116,104,101,32,110,117,109,98,101,114,32,111,102,32,98,121,116,101,115,32,119,114,105,116,116,101,110,44,32,119,104,105,99,104,32,105,115,32,110,101,118,101,114,32,108,101,115,115,32,116,104,97,110,10,108,101,110,40,98,41,46,10,10,82,97,105,115,101,115,32,66,108,111,99,107,105,110,103,73,79,69,114,114,111,114,32,105,102,32,116,104,101,32,98,117,102,102,101,114,32,105,115,32,102,117,108,108,32,97,110,100,32,116,104,101,10,117,110,100,101,114,108,121,105,110,103,32,114,97,119,32,115,116,114,101,97,109,32,99,97,110,110,111,116,32,97,99,99,101,112,116,32,109,111,114,101,32,100,97,116,97,32,97,116,32,116,104,101,32,109,111,109,101,110,116,46,10,0] /* Write the given buff */, "i8", ALLOC_NORMAL);
__str6=allocate([119,114,105,116,101,0] /* write\00 */, "i8", ALLOC_NORMAL);
__str7=allocate([114,101,97,100,105,110,116,111,0] /* readinto\00 */, "i8", ALLOC_NORMAL);
_bufferediobase_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str8=allocate([95,105,111,46,95,66,117,102,102,101,114,101,100,73,79,66,97,115,101,0] /* _io._BufferedIOBase\ */, "i8", ALLOC_NORMAL);
_PyBufferedIOBase_Type=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132587, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str9=allocate([103,45,62,103,99,46,103,99,95,114,101,102,115,32,33,61,32,40,45,50,41,0] /* g->gc.gc_refs != (-2 */, "i8", ALLOC_NORMAL);
__str10=allocate([46,46,47,99,112,121,116,104,111,110,47,77,111,100,117,108,101,115,47,95,105,111,47,98,117,102,102,101,114,101,100,105,111,46,99,0] /* ../cpython/Modules/_ */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8563=allocate([98,117,102,102,101,114,101,100,95,100,101,97,108,108,111,99,0] /* buffered_dealloc\00 */, "i8", ALLOC_NORMAL);
__str11=allocate([114,97,119,32,115,116,114,101,97,109,32,104,97,115,32,98,101,101,110,32,100,101,116,97,99,104,101,100,0] /* raw stream has been  */, "i8", ALLOC_NORMAL);
__str12=allocate([73,47,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,117,110,105,110,105,116,105,97,108,105,122,101,100,32,111,98,106,101,99,116,0] /* I/O operation on uni */, "i8", ALLOC_NORMAL);
__str13=allocate([110,97,109,101,0] /* name\00 */, "i8", ALLOC_NORMAL);
__str14=allocate([109,111,100,101,0] /* mode\00 */, "i8", ALLOC_NORMAL);
__str15=allocate([82,97,119,32,115,116,114,101,97,109,32,114,101,116,117,114,110,101,100,32,105,110,118,97,108,105,100,32,112,111,115,105,116,105,111,110,32,37,108,108,100,0] /* Raw stream returned  */, "i8", ALLOC_NORMAL);
__str16=allocate([98,117,102,102,101,114,32,115,105,122,101,32,109,117,115,116,32,98,101,32,115,116,114,105,99,116,108,121,32,112,111,115,105,116,105,118,101,0] /* buffer size must be  */, "i8", ALLOC_NORMAL);
_eintr_int_9093=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str17=allocate([101,105,110,116,114,95,105,110,116,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* eintr_int != ((void  */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___9098=allocate([95,116,114,97,112,95,101,105,110,116,114,0] /* _trap_eintr\00 */, "i8", ALLOC_NORMAL);
__str18=allocate([101,110,118,95,101,114,114,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* env_err != ((void _) */, "i8", ALLOC_NORMAL);
__str19=allocate([102,108,117,115,104,32,111,102,32,99,108,111,115,101,100,32,102,105,108,101,0] /* flush of closed file */, "i8", ALLOC_NORMAL);
__str20=allocate([124,110,58,112,101,101,107,0] /* |n:peek\00 */, "i8", ALLOC_NORMAL);
__str21=allocate([124,79,38,58,114,101,97,100,0] /* |O&:read\00 */, "i8", ALLOC_NORMAL);
__str22=allocate([114,101,97,100,32,108,101,110,103,116,104,32,109,117,115,116,32,98,101,32,112,111,115,105,116,105,118,101,32,111,114,32,45,49,0] /* read length must be  */, "i8", ALLOC_NORMAL);
__str23=allocate([114,101,97,100,32,111,102,32,99,108,111,115,101,100,32,102,105,108,101,0] /* read of closed file\ */, "i8", ALLOC_NORMAL);
__str24=allocate([110,58,114,101,97,100,49,0] /* n:read1\00 */, "i8", ALLOC_NORMAL);
__str25=allocate([114,101,97,100,32,108,101,110,103,116,104,32,109,117,115,116,32,98,101,32,112,111,115,105,116,105,118,101,0] /* read length must be  */, "i8", ALLOC_NORMAL);
__str26=allocate([114,101,97,100,108,105,110,101,32,111,102,32,99,108,111,115,101,100,32,102,105,108,101,0] /* readline of closed f */, "i8", ALLOC_NORMAL);
__str27=allocate([124,79,38,58,114,101,97,100,108,105,110,101,0] /* |O&:readline\00 */, "i8", ALLOC_NORMAL);
__str28=allocate([79,124,105,58,115,101,101,107,0] /* O|i:seek\00 */, "i8", ALLOC_NORMAL);
__str29=allocate([119,104,101,110,99,101,32,109,117,115,116,32,98,101,32,98,101,116,119,101,101,110,32,48,32,97,110,100,32,50,44,32,110,111,116,32,37,100,0] /* whence must be betwe */, "i8", ALLOC_NORMAL);
__str30=allocate([115,101,101,107,32,111,102,32,99,108,111,115,101,100,32,102,105,108,101,0] /* seek of closed file\ */, "i8", ALLOC_NORMAL);
__str31=allocate([124,79,58,116,114,117,110,99,97,116,101,0] /* |O:truncate\00 */, "i8", ALLOC_NORMAL);
__str32=allocate([114,101,97,100,108,105,110,101,40,41,32,115,104,111,117,108,100,32,104,97,118,101,32,114,101,116,117,114,110,101,100,32,97,32,98,121,116,101,115,32,111,98,106,101,99,116,44,32,110,111,116,32,39,37,46,50,48,48,115,39,0] /* readline() should ha */, "i8", ALLOC_NORMAL);
__str33=allocate([60,37,115,62,0] /* <%s>\00 */, "i8", ALLOC_NORMAL);
__str34=allocate([60,37,115,32,110,97,109,101,61,37,115,62,0] /* <%s name=%s>\00 */, "i8", ALLOC_NORMAL);
_bufferedreader_doc=allocate([67,114,101,97,116,101,32,97,32,110,101,119,32,98,117,102,102,101,114,101,100,32,114,101,97,100,101,114,32,117,115,105,110,103,32,116,104,101,32,103,105,118,101,110,32,114,101,97,100,97,98,108,101,32,114,97,119,32,73,79,32,111,98,106,101,99,116,46,0] /* Create a new buffere */, "i8", ALLOC_NORMAL);
__str35=allocate([114,97,119,0] /* raw\00 */, "i8", ALLOC_NORMAL);
__str36=allocate([98,117,102,102,101,114,95,115,105,122,101,0] /* buffer_size\00 */, "i8", ALLOC_NORMAL);
__str37=allocate([79,124,110,58,66,117,102,102,101,114,101,100,82,101,97,100,101,114,0] /* O|n:BufferedReader\0 */, "i8", ALLOC_NORMAL);
__str38=allocate([114,97,119,32,114,101,97,100,105,110,116,111,40,41,32,114,101,116,117,114,110,101,100,32,105,110,118,97,108,105,100,32,108,101,110,103,116,104,32,37,122,100,32,40,115,104,111,117,108,100,32,104,97,118,101,32,98,101,101,110,32,98,101,116,119,101,101,110,32,48,32,97,110,100,32,37,122,100,41,0] /* raw readinto() retur */, "i8", ALLOC_NORMAL);
__str39=allocate([114,101,109,97,105,110,105,110,103,32,60,61,32,115,101,108,102,45,62,98,117,102,102,101,114,95,115,105,122,101,0] /* remaining <= self->b */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___10369=allocate([95,98,117,102,102,101,114,101,100,114,101,97,100,101,114,95,114,101,97,100,95,103,101,110,101,114,105,99,0] /* _bufferedreader_read */, "i8", ALLOC_NORMAL);
__str40=allocate([102,108,117,115,104,0] /* flush\00 */, "i8", ALLOC_NORMAL);
__str41=allocate([99,108,111,115,101,0] /* close\00 */, "i8", ALLOC_NORMAL);
__str42=allocate([115,101,101,107,97,98,108,101,0] /* seekable\00 */, "i8", ALLOC_NORMAL);
__str43=allocate([114,101,97,100,97,98,108,101,0] /* readable\00 */, "i8", ALLOC_NORMAL);
__str44=allocate([119,114,105,116,97,98,108,101,0] /* writable\00 */, "i8", ALLOC_NORMAL);
__str45=allocate([102,105,108,101,110,111,0] /* fileno\00 */, "i8", ALLOC_NORMAL);
__str46=allocate([105,115,97,116,116,121,0] /* isatty\00 */, "i8", ALLOC_NORMAL);
__str47=allocate([112,101,101,107,0] /* peek\00 */, "i8", ALLOC_NORMAL);
__str48=allocate([114,101,97,100,108,105,110,101,0] /* readline\00 */, "i8", ALLOC_NORMAL);
__str49=allocate([115,101,101,107,0] /* seek\00 */, "i8", ALLOC_NORMAL);
__str50=allocate([116,101,108,108,0] /* tell\00 */, "i8", ALLOC_NORMAL);
__str51=allocate([116,114,117,110,99,97,116,101,0] /* truncate\00 */, "i8", ALLOC_NORMAL);
_bufferedreader_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_bufferedreader_members=allocate([0, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str52=allocate([99,108,111,115,101,100,0] /* closed\00 */, "i8", ALLOC_NORMAL);
_bufferedreader_getset=allocate(80, ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str53=allocate([95,105,111,46,66,117,102,102,101,114,101,100,82,101,97,100,101,114,0] /* _io.BufferedReader\0 */, "i8", ALLOC_NORMAL);
_PyBufferedReader_Type=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str54=allocate([109,97,120,95,98,117,102,102,101,114,95,115,105,122,101,32,105,115,32,100,101,112,114,101,99,97,116,101,100,0] /* max_buffer_size is d */, "i8", ALLOC_NORMAL);
_bufferedwriter_doc=allocate([65,32,98,117,102,102,101,114,32,102,111,114,32,97,32,119,114,105,116,101,97,98,108,101,32,115,101,113,117,101,110,116,105,97,108,32,82,97,119,73,79,32,111,98,106,101,99,116,46,10,10,84,104,101,32,99,111,110,115,116,114,117,99,116,111,114,32,99,114,101,97,116,101,115,32,97,32,66,117,102,102,101,114,101,100,87,114,105,116,101,114,32,102,111,114,32,116,104,101,32,103,105,118,101,110,32,119,114,105,116,101,97,98,108,101,32,114,97,119,10,115,116,114,101,97,109,46,32,73,102,32,116,104,101,32,98,117,102,102,101,114,95,115,105,122,101,32,105,115,32,110,111,116,32,103,105,118,101,110,44,32,105,116,32,100,101,102,97,117,108,116,115,32,116,111,10,68,69,70,65,85,76,84,95,66,85,70,70,69,82,95,83,73,90,69,46,32,109,97,120,95,98,117,102,102,101,114,95,115,105,122,101,32,105,115,110,39,116,32,117,115,101,100,32,97,110,121,109,111,114,101,46,10,0] /* A buffer for a write */, "i8", ALLOC_NORMAL);
__str55=allocate([109,97,120,95,98,117,102,102,101,114,95,115,105,122,101,0] /* max_buffer_size\00 */, "i8", ALLOC_NORMAL);
__str56=allocate([79,124,110,110,58,66,117,102,102,101,114,101,100,82,101,97,100,101,114,0] /* O|nn:BufferedReader\ */, "i8", ALLOC_NORMAL);
__str57=allocate([114,97,119,32,119,114,105,116,101,40,41,32,114,101,116,117,114,110,101,100,32,105,110,118,97,108,105,100,32,108,101,110,103,116,104,32,37,122,100,32,40,115,104,111,117,108,100,32,104,97,118,101,32,98,101,101,110,32,98,101,116,119,101,101,110,32,48,32,97,110,100,32,37,122,100,41,0] /* raw write() returned */, "i8", ALLOC_NORMAL);
__str58=allocate([115,42,58,119,114,105,116,101,0] /* s_:write\00 */, "i8", ALLOC_NORMAL);
__str59=allocate([119,114,105,116,101,32,116,111,32,99,108,111,115,101,100,32,102,105,108,101,0] /* write to closed file */, "i8", ALLOC_NORMAL);
__str60=allocate([40,115,101,108,102,45,62,119,114,105,116,97,98,108,101,32,38,38,32,115,101,108,102,45,62,119,114,105,116,101,95,101,110,100,32,33,61,32,45,49,41,0] /* (self->writable && s */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___10762=allocate([98,117,102,102,101,114,101,100,119,114,105,116,101,114,95,119,114,105,116,101,0] /* bufferedwriter_write */, "i8", ALLOC_NORMAL);
_bufferedwriter_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_bufferedwriter_members=allocate([0, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_bufferedwriter_getset=allocate(80, ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str61=allocate([95,105,111,46,66,117,102,102,101,114,101,100,87,114,105,116,101,114,0] /* _io.BufferedWriter\0 */, "i8", ALLOC_NORMAL);
_PyBufferedWriter_Type=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_bufferedrwpair_doc=allocate([65,32,98,117,102,102,101,114,101,100,32,114,101,97,100,101,114,32,97,110,100,32,119,114,105,116,101,114,32,111,98,106,101,99,116,32,116,111,103,101,116,104,101,114,46,10,10,65,32,98,117,102,102,101,114,101,100,32,114,101,97,100,101,114,32,111,98,106,101,99,116,32,97,110,100,32,98,117,102,102,101,114,101,100,32,119,114,105,116,101,114,32,111,98,106,101,99,116,32,112,117,116,32,116,111,103,101,116,104,101,114,32,116,111,10,102,111,114,109,32,97,32,115,101,113,117,101,110,116,105,97,108,32,73,79,32,111,98,106,101,99,116,32,116,104,97,116,32,99,97,110,32,114,101,97,100,32,97,110,100,32,119,114,105,116,101,46,32,84,104,105,115,32,105,115,32,116,121,112,105,99,97,108,108,121,10,117,115,101,100,32,119,105,116,104,32,97,32,115,111,99,107,101,116,32,111,114,32,116,119,111,45,119,97,121,32,112,105,112,101,46,10,10,114,101,97,100,101,114,32,97,110,100,32,119,114,105,116,101,114,32,97,114,101,32,82,97,119,73,79,66,97,115,101,32,111,98,106,101,99,116,115,32,116,104,97,116,32,97,114,101,32,114,101,97,100,97,98,108,101,32,97,110,100,10,119,114,105,116,101,97,98,108,101,32,114,101,115,112,101,99,116,105,118,101,108,121,46,32,73,102,32,116,104,101,32,98,117,102,102,101,114,95,115,105,122,101,32,105,115,32,111,109,105,116,116,101,100,32,105,116,32,100,101,102,97,117,108,116,115,32,116,111,10,68,69,70,65,85,76,84,95,66,85,70,70,69,82,95,83,73,90,69,46,10,0] /* A buffered reader an */, "i8", ALLOC_NORMAL);
__str62=allocate([79,79,124,110,110,58,66,117,102,102,101,114,101,100,82,87,80,97,105,114,0] /* OO|nn:BufferedRWPair */, "i8", ALLOC_NORMAL);
__str63=allocate([79,110,0] /* On\00 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___11129=allocate([98,117,102,102,101,114,101,100,114,119,112,97,105,114,95,100,101,97,108,108,111,99,0] /* bufferedrwpair_deall */, "i8", ALLOC_NORMAL);
_bufferedrwpair_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_bufferedrwpair_getset=allocate(40, ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str64=allocate([95,105,111,46,66,117,102,102,101,114,101,100,82,87,80,97,105,114,0] /* _io.BufferedRWPair\0 */, "i8", ALLOC_NORMAL);
_PyBufferedRWPair_Type=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_bufferedrandom_doc=allocate([65,32,98,117,102,102,101,114,101,100,32,105,110,116,101,114,102,97,99,101,32,116,111,32,114,97,110,100,111,109,32,97,99,99,101,115,115,32,115,116,114,101,97,109,115,46,10,10,84,104,101,32,99,111,110,115,116,114,117,99,116,111,114,32,99,114,101,97,116,101,115,32,97,32,114,101,97,100,101,114,32,97,110,100,32,119,114,105,116,101,114,32,102,111,114,32,97,32,115,101,101,107,97,98,108,101,32,115,116,114,101,97,109,44,10,114,97,119,44,32,103,105,118,101,110,32,105,110,32,116,104,101,32,102,105,114,115,116,32,97,114,103,117,109,101,110,116,46,32,73,102,32,116,104,101,32,98,117,102,102,101,114,95,115,105,122,101,32,105,115,32,111,109,105,116,116,101,100,32,105,116,10,100,101,102,97,117,108,116,115,32,116,111,32,68,69,70,65,85,76,84,95,66,85,70,70,69,82,95,83,73,90,69,46,32,109,97,120,95,98,117,102,102,101,114,95,115,105,122,101,32,105,115,110,39,116,32,117,115,101,100,32,97,110,121,109,111,114,101,46,10,0] /* A buffered interface */, "i8", ALLOC_NORMAL);
_bufferedrandom_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_bufferedrandom_members=allocate([0, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_bufferedrandom_getset=allocate(80, ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str65=allocate([95,105,111,46,66,117,102,102,101,114,101,100,82,97,110,100,111,109,0] /* _io.BufferedRandom\0 */, "i8", ALLOC_NORMAL);
_PyBufferedRandom_Type=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str66=allocate([115,101,108,102,45,62,98,117,102,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* self->buf != ((void  */, "i8", ALLOC_NORMAL);
__str167=allocate([46,46,47,99,112,121,116,104,111,110,47,77,111,100,117,108,101,115,47,95,105,111,47,98,121,116,101,115,105,111,46,99,0] /* ../cpython/Modules/_ */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8438=allocate([103,101,116,95,108,105,110,101,0] /* get_line\00 */, "i8", ALLOC_NORMAL);
__str268=allocate([108,101,110,32,62,61,32,48,0] /* len >= 0\00 */, "i8", ALLOC_NORMAL);
__str369=allocate([115,101,108,102,45,62,112,111,115,32,60,32,40,40,80,121,95,115,115,105,122,101,95,116,41,40,40,40,115,105,122,101,95,116,41,45,49,41,62,62,49,41,41,32,45,32,108,101,110,0] /* self->pos < ((Py_ssi */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8477=allocate([114,101,115,105,122,101,95,98,117,102,102,101,114,0] /* resize_buffer\00 */, "i8", ALLOC_NORMAL);
__str470=allocate([110,101,119,32,98,117,102,102,101,114,32,115,105,122,101,32,116,111,111,32,108,97,114,103,101,0] /* new buffer size too  */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8514=allocate([119,114,105,116,101,95,98,121,116,101,115,0] /* write_bytes\00 */, "i8", ALLOC_NORMAL);
__str571=allocate([115,101,108,102,45,62,112,111,115,32,62,61,32,48,0] /* self->pos >= 0\00 */, "i8", ALLOC_NORMAL);
_flush_doc=allocate([102,108,117,115,104,40,41,32,45,62,32,78,111,110,101,46,32,32,68,111,101,115,32,110,111,116,104,105,110,103,46,0] /* flush() -> None.  Do */, "i8", ALLOC_NORMAL);
__str672=allocate([73,47,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,99,108,111,115,101,100,32,102,105,108,101,46,0] /* I/O operation on clo */, "i8", ALLOC_NORMAL);
_getval_doc=allocate([103,101,116,118,97,108,117,101,40,41,32,45,62,32,98,121,116,101,115,46,10,10,82,101,116,114,105,101,118,101,32,116,104,101,32,101,110,116,105,114,101,32,99,111,110,116,101,110,116,115,32,111,102,32,116,104,101,32,66,121,116,101,115,73,79,32,111,98,106,101,99,116,46,0] /* getvalue() -> bytes. */, "i8", ALLOC_NORMAL);
_isatty_doc=allocate([105,115,97,116,116,121,40,41,32,45,62,32,70,97,108,115,101,46,10,10,65,108,119,97,121,115,32,114,101,116,117,114,110,115,32,70,97,108,115,101,32,115,105,110,99,101,32,66,121,116,101,115,73,79,32,111,98,106,101,99,116,115,32,97,114,101,32,110,111,116,32,99,111,110,110,101,99,116,101,100,10,116,111,32,97,32,116,116,121,45,108,105,107,101,32,100,101,118,105,99,101,46,0] /* isatty() -> False.\0 */, "i8", ALLOC_NORMAL);
_tell_doc=allocate([116,101,108,108,40,41,32,45,62,32,99,117,114,114,101,110,116,32,102,105,108,101,32,112,111,115,105,116,105,111,110,44,32,97,110,32,105,110,116,101,103,101,114,10,0] /* tell() -> current fi */, "i8", ALLOC_NORMAL);
_read_doc=allocate([114,101,97,100,40,91,115,105,122,101,93,41,32,45,62,32,114,101,97,100,32,97,116,32,109,111,115,116,32,115,105,122,101,32,98,121,116,101,115,44,32,114,101,116,117,114,110,101,100,32,97,115,32,97,32,115,116,114,105,110,103,46,10,10,73,102,32,116,104,101,32,115,105,122,101,32,97,114,103,117,109,101,110,116,32,105,115,32,110,101,103,97,116,105,118,101,44,32,114,101,97,100,32,117,110,116,105,108,32,69,79,70,32,105,115,32,114,101,97,99,104,101,100,46,10,82,101,116,117,114,110,32,97,110,32,101,109,112,116,121,32,115,116,114,105,110,103,32,97,116,32,69,79,70,46,0] /* read([size]) -> read */, "i8", ALLOC_NORMAL);
__str773=allocate([124,79,58,114,101,97,100,0] /* |O:read\00 */, "i8", ALLOC_NORMAL);
__str874=allocate([105,110,116,101,103,101,114,32,97,114,103,117,109,101,110,116,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,39,37,115,39,0] /* integer argument exp */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8642=allocate([98,121,116,101,115,105,111,95,114,101,97,100,0] /* bytesio_read\00 */, "i8", ALLOC_NORMAL);
_read1_doc=allocate([114,101,97,100,49,40,115,105,122,101,41,32,45,62,32,114,101,97,100,32,97,116,32,109,111,115,116,32,115,105,122,101,32,98,121,116,101,115,44,32,114,101,116,117,114,110,101,100,32,97,115,32,97,32,115,116,114,105,110,103,46,10,10,73,102,32,116,104,101,32,115,105,122,101,32,97,114,103,117,109,101,110,116,32,105,115,32,110,101,103,97,116,105,118,101,32,111,114,32,111,109,105,116,116,101,100,44,32,114,101,97,100,32,117,110,116,105,108,32,69,79,70,32,105,115,32,114,101,97,99,104,101,100,46,10,82,101,116,117,114,110,32,97,110,32,101,109,112,116,121,32,115,116,114,105,110,103,32,97,116,32,69,79,70,46,0] /* read1(size) -> read  */, "i8", ALLOC_NORMAL);
_readline_doc=allocate([114,101,97,100,108,105,110,101,40,91,115,105,122,101,93,41,32,45,62,32,110,101,120,116,32,108,105,110,101,32,102,114,111,109,32,116,104,101,32,102,105,108,101,44,32,97,115,32,97,32,115,116,114,105,110,103,46,10,10,82,101,116,97,105,110,32,110,101,119,108,105,110,101,46,32,32,65,32,110,111,110,45,110,101,103,97,116,105,118,101,32,115,105,122,101,32,97,114,103,117,109,101,110,116,32,108,105,109,105,116,115,32,116,104,101,32,109,97,120,105,109,117,109,10,110,117,109,98,101,114,32,111,102,32,98,121,116,101,115,32,116,111,32,114,101,116,117,114,110,32,40,97,110,32,105,110,99,111,109,112,108,101,116,101,32,108,105,110,101,32,109,97,121,32,98,101,32,114,101,116,117,114,110,101,100,32,116,104,101,110,41,46,10,82,101,116,117,114,110,32,97,110,32,101,109,112,116,121,32,115,116,114,105,110,103,32,97,116,32,69,79,70,46,10,0] /* readline([size]) ->  */, "i8", ALLOC_NORMAL);
__str975=allocate([124,79,58,114,101,97,100,108,105,110,101,0] /* |O:readline\00 */, "i8", ALLOC_NORMAL);
_readlines_doc=allocate([114,101,97,100,108,105,110,101,115,40,91,115,105,122,101,93,41,32,45,62,32,108,105,115,116,32,111,102,32,115,116,114,105,110,103,115,44,32,101,97,99,104,32,97,32,108,105,110,101,32,102,114,111,109,32,116,104,101,32,102,105,108,101,46,10,10,67,97,108,108,32,114,101,97,100,108,105,110,101,40,41,32,114,101,112,101,97,116,101,100,108,121,32,97,110,100,32,114,101,116,117,114,110,32,97,32,108,105,115,116,32,111,102,32,116,104,101,32,108,105,110,101,115,32,115,111,32,114,101,97,100,46,10,84,104,101,32,111,112,116,105,111,110,97,108,32,115,105,122,101,32,97,114,103,117,109,101,110,116,44,32,105,102,32,103,105,118,101,110,44,32,105,115,32,97,110,32,97,112,112,114,111,120,105,109,97,116,101,32,98,111,117,110,100,32,111,110,32,116,104,101,10,116,111,116,97,108,32,110,117,109,98,101,114,32,111,102,32,98,121,116,101,115,32,105,110,32,116,104,101,32,108,105,110,101,115,32,114,101,116,117,114,110,101,100,46,10,0] /* readlines([size]) -> */, "i8", ALLOC_NORMAL);
__str1076=allocate([124,79,58,114,101,97,100,108,105,110,101,115,0] /* |O:readlines\00 */, "i8", ALLOC_NORMAL);
_readinto_doc=allocate([114,101,97,100,105,110,116,111,40,98,121,116,101,97,114,114,97,121,41,32,45,62,32,105,110,116,46,32,32,82,101,97,100,32,117,112,32,116,111,32,108,101,110,40,98,41,32,98,121,116,101,115,32,105,110,116,111,32,98,46,10,10,82,101,116,117,114,110,115,32,110,117,109,98,101,114,32,111,102,32,98,121,116,101,115,32,114,101,97,100,32,40,48,32,102,111,114,32,69,79,70,41,44,32,111,114,32,78,111,110,101,32,105,102,32,116,104,101,32,111,98,106,101,99,116,10,105,115,32,115,101,116,32,110,111,116,32,116,111,32,98,108,111,99,107,32,97,115,32,104,97,115,32,110,111,32,100,97,116,97,32,116,111,32,114,101,97,100,46,0] /* readinto(bytearray)  */, "i8", ALLOC_NORMAL);
__str1177=allocate([119,42,0] /* w_\00 */, "i8", ALLOC_NORMAL);
__str1278=allocate([115,101,108,102,45,62,112,111,115,32,43,32,108,101,110,32,60,32,40,40,80,121,95,115,115,105,122,101,95,116,41,40,40,40,115,105,122,101,95,116,41,45,49,41,62,62,49,41,41,0] /* self->pos + len < (( */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8844=allocate([98,121,116,101,115,105,111,95,114,101,97,100,105,110,116,111,0] /* bytesio_readinto\00 */, "i8", ALLOC_NORMAL);
_truncate_doc=allocate([116,114,117,110,99,97,116,101,40,91,115,105,122,101,93,41,32,45,62,32,105,110,116,46,32,32,84,114,117,110,99,97,116,101,32,116,104,101,32,102,105,108,101,32,116,111,32,97,116,32,109,111,115,116,32,115,105,122,101,32,98,121,116,101,115,46,10,10,83,105,122,101,32,100,101,102,97,117,108,116,115,32,116,111,32,116,104,101,32,99,117,114,114,101,110,116,32,102,105,108,101,32,112,111,115,105,116,105,111,110,44,32,97,115,32,114,101,116,117,114,110,101,100,32,98,121,32,116,101,108,108,40,41,46,10,84,104,101,32,99,117,114,114,101,110,116,32,102,105,108,101,32,112,111,115,105,116,105,111,110,32,105,115,32,117,110,99,104,97,110,103,101,100,46,32,32,82,101,116,117,114,110,115,32,116,104,101,32,110,101,119,32,115,105,122,101,46,10,0] /* truncate([size]) ->  */, "i8", ALLOC_NORMAL);
__str1480=allocate([110,101,103,97,116,105,118,101,32,115,105,122,101,32,118,97,108,117,101,32,37,122,100,0] /* negative size value  */, "i8", ALLOC_NORMAL);
_seek_doc=allocate([115,101,101,107,40,112,111,115,44,32,119,104,101,110,99,101,61,48,41,32,45,62,32,105,110,116,46,32,32,67,104,97,110,103,101,32,115,116,114,101,97,109,32,112,111,115,105,116,105,111,110,46,10,10,83,101,101,107,32,116,111,32,98,121,116,101,32,111,102,102,115,101,116,32,112,111,115,32,114,101,108,97,116,105,118,101,32,116,111,32,112,111,115,105,116,105,111,110,32,105,110,100,105,99,97,116,101,100,32,98,121,32,119,104,101,110,99,101,58,10,32,32,32,32,32,48,32,32,83,116,97,114,116,32,111,102,32,115,116,114,101,97,109,32,40,116,104,101,32,100,101,102,97,117,108,116,41,46,32,32,112,111,115,32,115,104,111,117,108,100,32,98,101,32,62,61,32,48,59,10,32,32,32,32,32,49,32,32,67,117,114,114,101,110,116,32,112,111,115,105,116,105,111,110,32,45,32,112,111,115,32,109,97,121,32,98,101,32,110,101,103,97,116,105,118,101,59,10,32,32,32,32,32,50,32,32,69,110,100,32,111,102,32,115,116,114,101,97,109,32,45,32,112,111,115,32,117,115,117,97,108,108,121,32,110,101,103,97,116,105,118,101,46,10,82,101,116,117,114,110,115,32,116,104,101,32,110,101,119,32,97,98,115,111,108,117,116,101,32,112,111,115,105,116,105,111,110,46,0] /* seek(pos, whence=0)  */, "i8", ALLOC_NORMAL);
__str1682=allocate([110,101,103,97,116,105,118,101,32,115,101,101,107,32,118,97,108,117,101,32,37,122,100,0] /* negative seek value  */, "i8", ALLOC_NORMAL);
__str1783=allocate([110,101,119,32,112,111,115,105,116,105,111,110,32,116,111,111,32,108,97,114,103,101,0] /* new position too lar */, "i8", ALLOC_NORMAL);
__str1884=allocate([105,110,118,97,108,105,100,32,119,104,101,110,99,101,32,40,37,105,44,32,115,104,111,117,108,100,32,98,101,32,48,44,32,49,32,111,114,32,50,41,0] /* invalid whence (%i,  */, "i8", ALLOC_NORMAL);
_write_doc=allocate([119,114,105,116,101,40,98,121,116,101,115,41,32,45,62,32,105,110,116,46,32,32,87,114,105,116,101,32,98,121,116,101,115,32,116,111,32,102,105,108,101,46,10,10,82,101,116,117,114,110,32,116,104,101,32,110,117,109,98,101,114,32,111,102,32,98,121,116,101,115,32,119,114,105,116,116,101,110,46,0] /* write(bytes) -> int. */, "i8", ALLOC_NORMAL);
_writelines_doc=allocate([119,114,105,116,101,108,105,110,101,115,40,115,101,113,117,101,110,99,101,95,111,102,95,115,116,114,105,110,103,115,41,32,45,62,32,78,111,110,101,46,32,32,87,114,105,116,101,32,115,116,114,105,110,103,115,32,116,111,32,116,104,101,32,102,105,108,101,46,10,10,78,111,116,101,32,116,104,97,116,32,110,101,119,108,105,110,101,115,32,97,114,101,32,110,111,116,32,97,100,100,101,100,46,32,32,84,104,101,32,115,101,113,117,101,110,99,101,32,99,97,110,32,98,101,32,97,110,121,32,105,116,101,114,97,98,108,101,10,111,98,106,101,99,116,32,112,114,111,100,117,99,105,110,103,32,115,116,114,105,110,103,115,46,32,84,104,105,115,32,105,115,32,101,113,117,105,118,97,108,101,110,116,32,116,111,32,99,97,108,108,105,110,103,32,119,114,105,116,101,40,41,32,102,111,114,10,101,97,99,104,32,115,116,114,105,110,103,46,0] /* writelines(sequence_ */, "i8", ALLOC_NORMAL);
_close_doc=allocate([99,108,111,115,101,40,41,32,45,62,32,78,111,110,101,46,32,32,68,105,115,97,98,108,101,32,97,108,108,32,73,47,79,32,111,112,101,114,97,116,105,111,110,115,46,0] /* close() -> None.  Di */, "i8", ALLOC_NORMAL);
__str1985=allocate([40,79,110,78,41,0] /* (OnN)\00 */, "i8", ALLOC_NORMAL);
__str2086=allocate([115,116,97,116,101,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* state != ((void _)0) */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___9134=allocate([98,121,116,101,115,105,111,95,115,101,116,115,116,97,116,101,0] /* bytesio_setstate\00 */, "i8", ALLOC_NORMAL);
__str2187=allocate([37,46,50,48,48,115,46,95,95,115,101,116,115,116,97,116,101,95,95,32,97,114,103,117,109,101,110,116,32,115,104,111,117,108,100,32,98,101,32,51,45,116,117,112,108,101,44,32,103,111,116,32,37,46,50,48,48,115,0] /* %.200s.__setstate__  */, "i8", ALLOC_NORMAL);
__str2288=allocate([115,101,99,111,110,100,32,105,116,101,109,32,111,102,32,115,116,97,116,101,32,109,117,115,116,32,98,101,32,97,110,32,105,110,116,101,103,101,114,44,32,110,111,116,32,37,46,50,48,48,115,0] /* second item of state */, "i8", ALLOC_NORMAL);
__str2389=allocate([112,111,115,105,116,105,111,110,32,118,97,108,117,101,32,99,97,110,110,111,116,32,98,101,32,110,101,103,97,116,105,118,101,0] /* position value canno */, "i8", ALLOC_NORMAL);
__str2490=allocate([116,104,105,114,100,32,105,116,101,109,32,111,102,32,115,116,97,116,101,32,115,104,111,117,108,100,32,98,101,32,97,32,100,105,99,116,44,32,103,111,116,32,97,32,37,46,50,48,48,115,0] /* third item of state  */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___9218=allocate([98,121,116,101,115,105,111,95,100,101,97,108,108,111,99,0] /* bytesio_dealloc\00 */, "i8", ALLOC_NORMAL);
__str2692=allocate([116,121,112,101,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,32,38,38,32,116,121,112,101,45,62,116,112,95,97,108,108,111,99,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* type != ((void _)0)  */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___9255=allocate([98,121,116,101,115,105,111,95,110,101,119,0] /* bytesio_new\00 */, "i8", ALLOC_NORMAL);
__str2793=allocate([105,110,105,116,105,97,108,95,98,121,116,101,115,0] /* initial_bytes\00 */, "i8", ALLOC_NORMAL);
__str2894=allocate([124,79,58,66,121,116,101,115,73,79,0] /* |O:BytesIO\00 */, "i8", ALLOC_NORMAL);
__str3096=allocate([84,114,117,101,32,105,102,32,116,104,101,32,102,105,108,101,32,105,115,32,99,108,111,115,101,100,46,0] /* True if the file is  */, "i8", ALLOC_NORMAL);
_bytesio_getsetlist=allocate(40, ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str39105=allocate([119,114,105,116,101,108,105,110,101,115,0] /* writelines\00 */, "i8", ALLOC_NORMAL);
__str43109=allocate([114,101,97,100,108,105,110,101,115,0] /* readlines\00 */, "i8", ALLOC_NORMAL);
__str45111=allocate([103,101,116,118,97,108,117,101,0] /* getvalue\00 */, "i8", ALLOC_NORMAL);
__str48114=allocate([95,95,103,101,116,115,116,97,116,101,95,95,0] /* __getstate__\00 */, "i8", ALLOC_NORMAL);
__str49115=allocate([95,95,115,101,116,115,116,97,116,101,95,95,0] /* __setstate__\00 */, "i8", ALLOC_NORMAL);
_bytesio_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_bytesio_doc=allocate([66,121,116,101,115,73,79,40,91,98,117,102,102,101,114,93,41,32,45,62,32,111,98,106,101,99,116,10,10,67,114,101,97,116,101,32,97,32,98,117,102,102,101,114,101,100,32,73,47,79,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,32,117,115,105,110,103,32,97,110,32,105,110,45,109,101,109,111,114,121,32,98,121,116,101,115,10,98,117,102,102,101,114,44,32,114,101,97,100,121,32,102,111,114,32,114,101,97,100,105,110,103,32,97,110,100,32,119,114,105,116,105,110,103,46,0] /* BytesIO([buffer]) -> */, "i8", ALLOC_NORMAL);
__str50116=allocate([95,105,111,46,66,121,116,101,115,73,79,0] /* _io.BytesIO\00 */, "i8", ALLOC_NORMAL);
_PyBytesIO_Type=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str117=allocate([99,108,111,115,101,0] /* close\00 */, "i8", ALLOC_NORMAL);
__str1118=allocate([79,0] /* O\00 */, "i8", ALLOC_NORMAL);
__str2119=allocate([116,121,112,101,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,32,38,38,32,116,121,112,101,45,62,116,112,95,97,108,108,111,99,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* type != ((void _)0)  */, "i8", ALLOC_NORMAL);
__str3120=allocate([46,46,47,99,112,121,116,104,111,110,47,77,111,100,117,108,101,115,47,95,105,111,47,102,105,108,101,105,111,46,99,0] /* ../cpython/Modules/_ */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8576=allocate([102,105,108,101,105,111,95,110,101,119,0] /* fileio_new\00 */, "i8", ALLOC_NORMAL);
__str4121=allocate([40,105,115,115,41,0] /* (iss)\00 */, "i8", ALLOC_NORMAL);
__str5122=allocate([40,105,115,41,0] /* (is)\00 */, "i8", ALLOC_NORMAL);
__str6123=allocate([114,0] /* r\00 */, "i8", ALLOC_NORMAL);
__str7124=allocate([40,40,40,40,40,80,121,79,98,106,101,99,116,42,41,40,40,111,115,101,108,102,41,41,41,45,62,111,98,95,116,121,112,101,41,32,61,61,32,40,38,80,121,70,105,108,101,73,79,95,84,121,112,101,41,32,124,124,32,80,121,84,121,112,101,95,73,115,83,117,98,116,121,112,101,40,40,40,40,80,121,79,98,106,101,99,116,42,41,40,40,111,115,101,108,102,41,41,41,45,62,111,98,95,116,121,112,101,41,44,32,40,38,80,121,70,105,108,101,73,79,95,84,121,112,101,41,41,41,41,0] /* (((((PyObject_)((ose */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8670=allocate([102,105,108,101,105,111,95,105,110,105,116,0] /* fileio_init\00 */, "i8", ALLOC_NORMAL);
__str8125=allocate([79,124,115,105,58,102,105,108,101,105,111,0] /* O|si:fileio\00 */, "i8", ALLOC_NORMAL);
_kwlist_8657=allocate(16, "i8*", ALLOC_NORMAL);
__str9126=allocate([102,105,108,101,0] /* file\00 */, "i8", ALLOC_NORMAL);
__str11128=allocate([99,108,111,115,101,102,100,0] /* closefd\00 */, "i8", ALLOC_NORMAL);
__str12129=allocate([105,110,116,101,103,101,114,32,97,114,103,117,109,101,110,116,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,102,108,111,97,116,0] /* integer argument exp */, "i8", ALLOC_NORMAL);
__str13130=allocate([78,101,103,97,116,105,118,101,32,102,105,108,101,100,101,115,99,114,105,112,116,111,114,0] /* Negative filedescrip */, "i8", ALLOC_NORMAL);
__str14131=allocate([101,110,99,111,100,101,114,32,102,97,105,108,101,100,32,116,111,32,114,101,116,117,114,110,32,98,121,116,101,115,0] /* encoder failed to re */, "i8", ALLOC_NORMAL);
__str15132=allocate([77,117,115,116,32,104,97,118,101,32,101,120,97,99,116,108,121,32,111,110,101,32,111,102,32,114,101,97,100,47,119,114,105,116,101,47,97,112,112,101,110,100,32,109,111,100,101,32,97,110,100,32,97,116,32,109,111,115,116,32,111,110,101,32,112,108,117,115,0] /* Must have exactly on */, "i8", ALLOC_NORMAL);
__str16133=allocate([105,110,118,97,108,105,100,32,109,111,100,101,58,32,37,46,50,48,48,115,0] /* invalid mode: %.200s */, "i8", ALLOC_NORMAL);
__str17134=allocate([67,97,110,110,111,116,32,117,115,101,32,99,108,111,115,101,102,100,61,70,97,108,115,101,32,119,105,116,104,32,102,105,108,101,32,110,97,109,101,0] /* Cannot use closefd=F */, "i8", ALLOC_NORMAL);
__str19136=allocate([103,45,62,103,99,46,103,99,95,114,101,102,115,32,33,61,32,40,45,50,41,0] /* g->gc.gc_refs != (-2 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8879=allocate([102,105,108,101,105,111,95,100,101,97,108,108,111,99,0] /* fileio_dealloc\00 */, "i8", ALLOC_NORMAL);
__str20137=allocate([73,47,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,99,108,111,115,101,100,32,102,105,108,101,0] /* I/O operation on clo */, "i8", ALLOC_NORMAL);
__str21138=allocate([70,105,108,101,32,110,111,116,32,111,112,101,110,32,102,111,114,32,37,115,0] /* File not open for %s */, "i8", ALLOC_NORMAL);
__str22139=allocate([114,101,97,100,105,110,103,0] /* reading\00 */, "i8", ALLOC_NORMAL);
__str23140=allocate([119,42,0] /* w_\00 */, "i8", ALLOC_NORMAL);
__str24141=allocate([117,110,98,111,117,110,100,101,100,32,114,101,97,100,32,114,101,116,117,114,110,101,100,32,109,111,114,101,32,98,121,116,101,115,32,116,104,97,110,32,97,32,80,121,116,104,111,110,32,115,116,114,105,110,103,32,99,97,110,32,104,111,108,100,32,0] /* unbounded read retur */, "i8", ALLOC_NORMAL);
__str25142=allocate([124,79,38,0] /* |O&\00 */, "i8", ALLOC_NORMAL);
__str26143=allocate([119,114,105,116,105,110,103,0] /* writing\00 */, "i8", ALLOC_NORMAL);
__str27144=allocate([115,42,0] /* s_\00 */, "i8", ALLOC_NORMAL);
__str28145=allocate([97,110,32,105,110,116,101,103,101,114,32,105,115,32,114,101,113,117,105,114,101,100,0] /* an integer is requir */, "i8", ALLOC_NORMAL);
__str29146=allocate([79,124,105,0] /* O|i\00 */, "i8", ALLOC_NORMAL);
__str30147=allocate([124,79,0] /* |O\00 */, "i8", ALLOC_NORMAL);
__str31148=allocate([114,98,43,0] /* rb+\00 */, "i8", ALLOC_NORMAL);
__str32149=allocate([114,98,0] /* rb\00 */, "i8", ALLOC_NORMAL);
__str33150=allocate([119,98,0] /* wb\00 */, "i8", ALLOC_NORMAL);
__str34151=allocate([60,95,105,111,46,70,105,108,101,73,79,32,91,99,108,111,115,101,100,93,62,0] /* <_io.FileIO [closed] */, "i8", ALLOC_NORMAL);
__str35152=allocate([60,95,105,111,46,70,105,108,101,73,79,32,102,100,61,37,100,32,109,111,100,101,61,39,37,115,39,62,0] /* <_io.FileIO fd=%d mo */, "i8", ALLOC_NORMAL);
__str36153=allocate([60,95,105,111,46,70,105,108,101,73,79,32,110,97,109,101,61,37,115,32,109,111,100,101,61,39,37,115,39,62,0] /* <_io.FileIO name=%s  */, "i8", ALLOC_NORMAL);
_fileio_doc=allocate([102,105,108,101,40,110,97,109,101,58,32,115,116,114,91,44,32,109,111,100,101,58,32,115,116,114,93,41,32,45,62,32,102,105,108,101,32,73,79,32,111,98,106,101,99,116,10,10,79,112,101,110,32,97,32,102,105,108,101,46,32,32,84,104,101,32,109,111,100,101,32,99,97,110,32,98,101,32,39,114,39,44,32,39,119,39,32,111,114,32,39,97,39,32,102,111,114,32,114,101,97,100,105,110,103,32,40,100,101,102,97,117,108,116,41,44,10,119,114,105,116,105,110,103,32,111,114,32,97,112,112,101,110,100,105,110,103,46,32,32,84,104,101,32,102,105,108,101,32,119,105,108,108,32,98,101,32,99,114,101,97,116,101,100,32,105,102,32,105,116,32,100,111,101,115,110,39,116,32,101,120,105,115,116,10,119,104,101,110,32,111,112,101,110,101,100,32,102,111,114,32,119,114,105,116,105,110,103,32,111,114,32,97,112,112,101,110,100,105,110,103,59,32,105,116,32,119,105,108,108,32,98,101,32,116,114,117,110,99,97,116,101,100,32,119,104,101,110,10,111,112,101,110,101,100,32,102,111,114,32,119,114,105,116,105,110,103,46,32,32,65,100,100,32,97,32,39,43,39,32,116,111,32,116,104,101,32,109,111,100,101,32,116,111,32,97,108,108,111,119,32,115,105,109,117,108,116,97,110,101,111,117,115,10,114,101,97,100,105,110,103,32,97,110,100,32,119,114,105,116,105,110,103,46,0] /* file(name: str[, mod */, "i8", ALLOC_NORMAL);
_read_doc154=allocate([114,101,97,100,40,115,105,122,101,58,32,105,110,116,41,32,45,62,32,98,121,116,101,115,46,32,32,114,101,97,100,32,97,116,32,109,111,115,116,32,115,105,122,101,32,98,121,116,101,115,44,32,114,101,116,117,114,110,101,100,32,97,115,32,98,121,116,101,115,46,10,10,79,110,108,121,32,109,97,107,101,115,32,111,110,101,32,115,121,115,116,101,109,32,99,97,108,108,44,32,115,111,32,108,101,115,115,32,100,97,116,97,32,109,97,121,32,98,101,32,114,101,116,117,114,110,101,100,32,116,104,97,110,32,114,101,113,117,101,115,116,101,100,10,73,110,32,110,111,110,45,98,108,111,99,107,105,110,103,32,109,111,100,101,44,32,114,101,116,117,114,110,115,32,78,111,110,101,32,105,102,32,110,111,32,100,97,116,97,32,105,115,32,97,118,97,105,108,97,98,108,101,46,10,79,110,32,101,110,100,45,111,102,45,102,105,108,101,44,32,114,101,116,117,114,110,115,32,39,39,46,0] /* read(size: int) -> b */, "i8", ALLOC_NORMAL);
_readall_doc=allocate([114,101,97,100,97,108,108,40,41,32,45,62,32,98,121,116,101,115,46,32,32,114,101,97,100,32,97,108,108,32,100,97,116,97,32,102,114,111,109,32,116,104,101,32,102,105,108,101,44,32,114,101,116,117,114,110,101,100,32,97,115,32,98,121,116,101,115,46,10,10,73,110,32,110,111,110,45,98,108,111,99,107,105,110,103,32,109,111,100,101,44,32,114,101,116,117,114,110,115,32,97,115,32,109,117,99,104,32,97,115,32,105,115,32,105,109,109,101,100,105,97,116,101,108,121,32,97,118,97,105,108,97,98,108,101,44,10,111,114,32,78,111,110,101,32,105,102,32,110,111,32,100,97,116,97,32,105,115,32,97,118,97,105,108,97,98,108,101,46,32,32,79,110,32,101,110,100,45,111,102,45,102,105,108,101,44,32,114,101,116,117,114,110,115,32,39,39,46,0] /* readall() -> bytes.  */, "i8", ALLOC_NORMAL);
_write_doc155=allocate([119,114,105,116,101,40,98,58,32,98,121,116,101,115,41,32,45,62,32,105,110,116,46,32,32,87,114,105,116,101,32,98,121,116,101,115,32,98,32,116,111,32,102,105,108,101,44,32,114,101,116,117,114,110,32,110,117,109,98,101,114,32,119,114,105,116,116,101,110,46,10,10,79,110,108,121,32,109,97,107,101,115,32,111,110,101,32,115,121,115,116,101,109,32,99,97,108,108,44,32,115,111,32,110,111,116,32,97,108,108,32,111,102,32,116,104,101,32,100,97,116,97,32,109,97,121,32,98,101,32,119,114,105,116,116,101,110,46,10,84,104,101,32,110,117,109,98,101,114,32,111,102,32,98,121,116,101,115,32,97,99,116,117,97,108,108,121,32,119,114,105,116,116,101,110,32,105,115,32,114,101,116,117,114,110,101,100,46,0] /* write(b: bytes) -> i */, "i8", ALLOC_NORMAL);
_fileno_doc=allocate([102,105,108,101,110,111,40,41,32,45,62,32,105,110,116,46,32,34,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,34,46,10,10,84,104,105,115,32,105,115,32,110,101,101,100,101,100,32,102,111,114,32,108,111,119,101,114,45,108,101,118,101,108,32,102,105,108,101,32,105,110,116,101,114,102,97,99,101,115,44,32,115,117,99,104,32,116,104,101,32,102,99,110,116,108,32,109,111,100,117,108,101,46,0] /* fileno() -> int. \22 */, "i8", ALLOC_NORMAL);
_seek_doc156=allocate([115,101,101,107,40,111,102,102,115,101,116,58,32,105,110,116,91,44,32,119,104,101,110,99,101,58,32,105,110,116,93,41,32,45,62,32,78,111,110,101,46,32,32,77,111,118,101,32,116,111,32,110,101,119,32,102,105,108,101,32,112,111,115,105,116,105,111,110,46,10,10,65,114,103,117,109,101,110,116,32,111,102,102,115,101,116,32,105,115,32,97,32,98,121,116,101,32,99,111,117,110,116,46,32,32,79,112,116,105,111,110,97,108,32,97,114,103,117,109,101,110,116,32,119,104,101,110,99,101,32,100,101,102,97,117,108,116,115,32,116,111,10,48,32,40,111,102,102,115,101,116,32,102,114,111,109,32,115,116,97,114,116,32,111,102,32,102,105,108,101,44,32,111,102,102,115,101,116,32,115,104,111,117,108,100,32,98,101,32,62,61,32,48,41,59,32,111,116,104,101,114,32,118,97,108,117,101,115,32,97,114,101,32,49,10,40,109,111,118,101,32,114,101,108,97,116,105,118,101,32,116,111,32,99,117,114,114,101,110,116,32,112,111,115,105,116,105,111,110,44,32,112,111,115,105,116,105,118,101,32,111,114,32,110,101,103,97,116,105,118,101,41,44,32,97,110,100,32,50,32,40,109,111,118,101,10,114,101,108,97,116,105,118,101,32,116,111,32,101,110,100,32,111,102,32,102,105,108,101,44,32,117,115,117,97,108,108,121,32,110,101,103,97,116,105,118,101,44,32,97,108,116,104,111,117,103,104,32,109,97,110,121,32,112,108,97,116,102,111,114,109,115,32,97,108,108,111,119,10,115,101,101,107,105,110,103,32,98,101,121,111,110,100,32,116,104,101,32,101,110,100,32,111,102,32,97,32,102,105,108,101,41,46,10,78,111,116,101,32,116,104,97,116,32,110,111,116,32,97,108,108,32,102,105,108,101,32,111,98,106,101,99,116,115,32,97,114,101,32,115,101,101,107,97,98,108,101,46,0] /* seek(offset: int[, w */, "i8", ALLOC_NORMAL);
_truncate_doc157=allocate([116,114,117,110,99,97,116,101,40,91,115,105,122,101,58,32,105,110,116,93,41,32,45,62,32,78,111,110,101,46,32,32,84,114,117,110,99,97,116,101,32,116,104,101,32,102,105,108,101,32,116,111,32,97,116,32,109,111,115,116,32,115,105,122,101,32,98,121,116,101,115,46,10,10,83,105,122,101,32,100,101,102,97,117,108,116,115,32,116,111,32,116,104,101,32,99,117,114,114,101,110,116,32,102,105,108,101,32,112,111,115,105,116,105,111,110,44,32,97,115,32,114,101,116,117,114,110,101,100,32,98,121,32,116,101,108,108,40,41,46,84,104,101,32,99,117,114,114,101,110,116,32,102,105,108,101,32,112,111,115,105,116,105,111,110,32,105,115,32,99,104,97,110,103,101,100,32,116,111,32,116,104,101,32,118,97,108,117,101,32,111,102,32,115,105,122,101,46,0] /* truncate([size: int] */, "i8", ALLOC_NORMAL);
_tell_doc158=allocate([116,101,108,108,40,41,32,45,62,32,105,110,116,46,32,32,67,117,114,114,101,110,116,32,102,105,108,101,32,112,111,115,105,116,105,111,110,0] /* tell() -> int.  Curr */, "i8", ALLOC_NORMAL);
_readinto_doc159=allocate([114,101,97,100,105,110,116,111,40,41,32,45,62,32,83,97,109,101,32,97,115,32,82,97,119,73,79,66,97,115,101,46,114,101,97,100,105,110,116,111,40,41,46,0] /* readinto() -> Same a */, "i8", ALLOC_NORMAL);
_close_doc160=allocate([99,108,111,115,101,40,41,32,45,62,32,78,111,110,101,46,32,32,67,108,111,115,101,32,116,104,101,32,102,105,108,101,46,10,10,65,32,99,108,111,115,101,100,32,102,105,108,101,32,99,97,110,110,111,116,32,98,101,32,117,115,101,100,32,102,111,114,32,102,117,114,116,104,101,114,32,73,47,79,32,111,112,101,114,97,116,105,111,110,115,46,32,32,99,108,111,115,101,40,41,32,109,97,121,32,98,101,10,99,97,108,108,101,100,32,109,111,114,101,32,116,104,97,110,32,111,110,99,101,32,119,105,116,104,111,117,116,32,101,114,114,111,114,46,32,32,67,104,97,110,103,101,115,32,116,104,101,32,102,105,108,101,110,111,32,116,111,32,45,49,46,0] /* close() -> None.  Cl */, "i8", ALLOC_NORMAL);
_isatty_doc161=allocate([105,115,97,116,116,121,40,41,32,45,62,32,98,111,111,108,46,32,32,84,114,117,101,32,105,102,32,116,104,101,32,102,105,108,101,32,105,115,32,99,111,110,110,101,99,116,101,100,32,116,111,32,97,32,116,116,121,32,100,101,118,105,99,101,46,0] /* isatty() -> bool.  T */, "i8", ALLOC_NORMAL);
_seekable_doc=allocate([115,101,101,107,97,98,108,101,40,41,32,45,62,32,98,111,111,108,46,32,32,84,114,117,101,32,105,102,32,102,105,108,101,32,115,117,112,112,111,114,116,115,32,114,97,110,100,111,109,45,97,99,99,101,115,115,46,0] /* seekable() -> bool.  */, "i8", ALLOC_NORMAL);
_readable_doc=allocate([114,101,97,100,97,98,108,101,40,41,32,45,62,32,98,111,111,108,46,32,32,84,114,117,101,32,105,102,32,102,105,108,101,32,119,97,115,32,111,112,101,110,101,100,32,105,110,32,97,32,114,101,97,100,32,109,111,100,101,46,0] /* readable() -> bool.  */, "i8", ALLOC_NORMAL);
_writable_doc=allocate([119,114,105,116,97,98,108,101,40,41,32,45,62,32,98,111,111,108,46,32,32,84,114,117,101,32,105,102,32,102,105,108,101,32,119,97,115,32,111,112,101,110,101,100,32,105,110,32,97,32,119,114,105,116,101,32,109,111,100,101,46,0] /* writable() -> bool.  */, "i8", ALLOC_NORMAL);
__str37162=allocate([114,101,97,100,0] /* read\00 */, "i8", ALLOC_NORMAL);
__str38163=allocate([114,101,97,100,97,108,108,0] /* readall\00 */, "i8", ALLOC_NORMAL);
__str39164=allocate([114,101,97,100,105,110,116,111,0] /* readinto\00 */, "i8", ALLOC_NORMAL);
__str40165=allocate([119,114,105,116,101,0] /* write\00 */, "i8", ALLOC_NORMAL);
__str41166=allocate([115,101,101,107,0] /* seek\00 */, "i8", ALLOC_NORMAL);
__str42167=allocate([116,101,108,108,0] /* tell\00 */, "i8", ALLOC_NORMAL);
__str43168=allocate([116,114,117,110,99,97,116,101,0] /* truncate\00 */, "i8", ALLOC_NORMAL);
__str44169=allocate([115,101,101,107,97,98,108,101,0] /* seekable\00 */, "i8", ALLOC_NORMAL);
__str45170=allocate([114,101,97,100,97,98,108,101,0] /* readable\00 */, "i8", ALLOC_NORMAL);
__str46171=allocate([119,114,105,116,97,98,108,101,0] /* writable\00 */, "i8", ALLOC_NORMAL);
__str48173=allocate([105,115,97,116,116,121,0] /* isatty\00 */, "i8", ALLOC_NORMAL);
_fileio_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str49174=allocate([99,108,111,115,101,100,0] /* closed\00 */, "i8", ALLOC_NORMAL);
__str50175=allocate([84,114,117,101,32,105,102,32,116,104,101,32,102,105,108,101,32,105,115,32,99,108,111,115,101,100,0] /* True if the file is  */, "i8", ALLOC_NORMAL);
__str51176=allocate([84,114,117,101,32,105,102,32,116,104,101,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,119,105,108,108,32,98,101,32,99,108,111,115,101,100,0] /* True if the file des */, "i8", ALLOC_NORMAL);
__str52177=allocate([83,116,114,105,110,103,32,103,105,118,105,110,103,32,116,104,101,32,102,105,108,101,32,109,111,100,101,0] /* String giving the fi */, "i8", ALLOC_NORMAL);
_fileio_getsetlist=allocate(80, ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str53178=allocate([95,105,111,46,70,105,108,101,73,79,0] /* _io.FileIO\00 */, "i8", ALLOC_NORMAL);
_PyFileIO_Type=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"void (i8*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_iobase_doc=allocate([84,104,101,32,97,98,115,116,114,97,99,116,32,98,97,115,101,32,99,108,97,115,115,32,102,111,114,32,97,108,108,32,73,47,79,32,99,108,97,115,115,101,115,44,32,97,99,116,105,110,103,32,111,110,32,115,116,114,101,97,109,115,32,111,102,10,98,121,116,101,115,46,32,84,104,101,114,101,32,105,115,32,110,111,32,112,117,98,108,105,99,32,99,111,110,115,116,114,117,99,116,111,114,46,10,10,84,104,105,115,32,99,108,97,115,115,32,112,114,111,118,105,100,101,115,32,100,117,109,109,121,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,115,32,102,111,114,32,109,97,110,121,32,109,101,116,104,111,100,115,32,116,104,97,116,10,100,101,114,105,118,101,100,32,99,108,97,115,115,101,115,32,99,97,110,32,111,118,101,114,114,105,100,101,32,115,101,108,101,99,116,105,118,101,108,121,59,32,116,104,101,32,100,101,102,97,117,108,116,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,115,10,114,101,112,114,101,115,101,110,116,32,97,32,102,105,108,101,32,116,104,97,116,32,99,97,110,110,111,116,32,98,101,32,114,101,97,100,44,32,119,114,105,116,116,101,110,32,111,114,32,115,101,101,107,101,100,46,10,10,69,118,101,110,32,116,104,111,117,103,104,32,73,79,66,97,115,101,32,100,111,101,115,32,110,111,116,32,100,101,99,108,97,114,101,32,114,101,97,100,44,32,114,101,97,100,105,110,116,111,44,32,111,114,32,119,114,105,116,101,32,98,101,99,97,117,115,101,10,116,104,101,105,114,32,115,105,103,110,97,116,117,114,101,115,32,119,105,108,108,32,118,97,114,121,44,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,115,32,97,110,100,32,99,108,105,101,110,116,115,32,115,104,111,117,108,100,10,99,111,110,115,105,100,101,114,32,116,104,111,115,101,32,109,101,116,104,111,100,115,32,112,97,114,116,32,111,102,32,116,104,101,32,105,110,116,101,114,102,97,99,101,46,32,65,108,115,111,44,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,115,10,109,97,121,32,114,97,105,115,101,32,97,32,73,79,69,114,114,111,114,32,119,104,101,110,32,111,112,101,114,97,116,105,111,110,115,32,116,104,101,121,32,100,111,32,110,111,116,32,115,117,112,112,111,114,116,32,97,114,101,32,99,97,108,108,101,100,46,10,10,84,104,101,32,98,97,115,105,99,32,116,121,112,101,32,117,115,101,100,32,102,111,114,32,98,105,110,97,114,121,32,100,97,116,97,32,114,101,97,100,32,102,114,111,109,32,111,114,32,119,114,105,116,116,101,110,32,116,111,32,97,32,102,105,108,101,32,105,115,10,98,121,116,101,115,46,32,98,121,116,101,97,114,114,97,121,115,32,97,114,101,32,97,99,99,101,112,116,101,100,32,116,111,111,44,32,97,110,100,32,105,110,32,115,111,109,101,32,99,97,115,101,115,32,40,115,117,99,104,32,97,115,10,114,101,97,100,105,110,116,111,41,32,110,101,101,100,101,100,46,32,84,101,120,116,32,73,47,79,32,99,108,97,115,115,101,115,32,119,111,114,107,32,119,105,116,104,32,115,116,114,32,100,97,116,97,46,10,10,78,111,116,101,32,116,104,97,116,32,99,97,108,108,105,110,103,32,97,110,121,32,109,101,116,104,111,100,32,40,101,118,101,110,32,105,110,113,117,105,114,105,101,115,41,32,111,110,32,97,32,99,108,111,115,101,100,32,115,116,114,101,97,109,32,105,115,10,117,110,100,101,102,105,110,101,100,46,32,73,109,112,108,101,109,101,110,116,97,116,105,111,110,115,32,109,97,121,32,114,97,105,115,101,32,73,79,69,114,114,111,114,32,105,110,32,116,104,105,115,32,99,97,115,101,46,10,10,73,79,66,97,115,101,32,40,97,110,100,32,105,116,115,32,115,117,98,99,108,97,115,115,101,115,41,32,115,117,112,112,111,114,116,32,116,104,101,32,105,116,101,114,97,116,111,114,32,112,114,111,116,111,99,111,108,44,32,109,101,97,110,105,110,103,10,116,104,97,116,32,97,110,32,73,79,66,97,115,101,32,111,98,106,101,99,116,32,99,97,110,32,98,101,32,105,116,101,114,97,116,101,100,32,111,118,101,114,32,121,105,101,108,100,105,110,103,32,116,104,101,32,108,105,110,101,115,32,105,110,32,97,10,115,116,114,101,97,109,46,10,10,73,79,66,97,115,101,32,97,108,115,111,32,115,117,112,112,111,114,116,115,32,116,104,101,32,58,107,101,121,119,111,114,100,58,96,119,105,116,104,96,32,115,116,97,116,101,109,101,110,116,46,32,73,110,32,116,104,105,115,32,101,120,97,109,112,108,101,44,10,102,112,32,105,115,32,99,108,111,115,101,100,32,97,102,116,101,114,32,116,104,101,32,115,117,105,116,101,32,111,102,32,116,104,101,32,119,105,116,104,32,115,116,97,116,101,109,101,110,116,32,105,115,32,99,111,109,112,108,101,116,101,58,10,10,119,105,116,104,32,111,112,101,110,40,39,115,112,97,109,46,116,120,116,39,44,32,39,114,39,41,32,97,115,32,102,112,58,10,32,32,32,32,102,112,46,119,114,105,116,101,40,39,83,112,97,109,32,97,110,100,32,101,103,103,115,33,39,41,10,0] /* The abstract base cl */, "i8", ALLOC_NORMAL);
_iobase_seek_doc=allocate([67,104,97,110,103,101,32,115,116,114,101,97,109,32,112,111,115,105,116,105,111,110,46,10,10,67,104,97,110,103,101,32,116,104,101,32,115,116,114,101,97,109,32,112,111,115,105,116,105,111,110,32,116,111,32,98,121,116,101,32,111,102,102,115,101,116,32,111,102,102,115,101,116,46,32,111,102,102,115,101,116,32,105,115,10,105,110,116,101,114,112,114,101,116,101,100,32,114,101,108,97,116,105,118,101,32,116,111,32,116,104,101,32,112,111,115,105,116,105,111,110,32,105,110,100,105,99,97,116,101,100,32,98,121,32,119,104,101,110,99,101,46,32,32,86,97,108,117,101,115,10,102,111,114,32,119,104,101,110,99,101,32,97,114,101,58,10,10,42,32,48,32,45,45,32,115,116,97,114,116,32,111,102,32,115,116,114,101,97,109,32,40,116,104,101,32,100,101,102,97,117,108,116,41,59,32,111,102,102,115,101,116,32,115,104,111,117,108,100,32,98,101,32,122,101,114,111,32,111,114,32,112,111,115,105,116,105,118,101,10,42,32,49,32,45,45,32,99,117,114,114,101,110,116,32,115,116,114,101,97,109,32,112,111,115,105,116,105,111,110,59,32,111,102,102,115,101,116,32,109,97,121,32,98,101,32,110,101,103,97,116,105,118,101,10,42,32,50,32,45,45,32,101,110,100,32,111,102,32,115,116,114,101,97,109,59,32,111,102,102,115,101,116,32,105,115,32,117,115,117,97,108,108,121,32,110,101,103,97,116,105,118,101,10,10,82,101,116,117,114,110,32,116,104,101,32,110,101,119,32,97,98,115,111,108,117,116,101,32,112,111,115,105,116,105,111,110,46,0] /* Change stream positi */, "i8", ALLOC_NORMAL);
__str181=allocate([115,101,101,107,0] /* seek\00 */, "i8", ALLOC_NORMAL);
_iobase_tell_doc=allocate([82,101,116,117,114,110,32,99,117,114,114,101,110,116,32,115,116,114,101,97,109,32,112,111,115,105,116,105,111,110,46,0] /* Return current strea */, "i8", ALLOC_NORMAL);
__str1182=allocate([105,105,0] /* ii\00 */, "i8", ALLOC_NORMAL);
_iobase_truncate_doc=allocate([84,114,117,110,99,97,116,101,32,102,105,108,101,32,116,111,32,115,105,122,101,32,98,121,116,101,115,46,10,10,70,105,108,101,32,112,111,105,110,116,101,114,32,105,115,32,108,101,102,116,32,117,110,99,104,97,110,103,101,100,46,32,32,83,105,122,101,32,100,101,102,97,117,108,116,115,32,116,111,32,116,104,101,32,99,117,114,114,101,110,116,32,73,79,10,112,111,115,105,116,105,111,110,32,97,115,32,114,101,112,111,114,116,101,100,32,98,121,32,116,101,108,108,40,41,46,32,32,82,101,116,117,114,110,115,32,116,104,101,32,110,101,119,32,115,105,122,101,46,0] /* Truncate file to siz */, "i8", ALLOC_NORMAL);
__str2183=allocate([116,114,117,110,99,97,116,101,0] /* truncate\00 */, "i8", ALLOC_NORMAL);
_iobase_flush_doc=allocate([70,108,117,115,104,32,119,114,105,116,101,32,98,117,102,102,101,114,115,44,32,105,102,32,97,112,112,108,105,99,97,98,108,101,46,10,10,84,104,105,115,32,105,115,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,102,111,114,32,114,101,97,100,45,111,110,108,121,32,97,110,100,32,110,111,110,45,98,108,111,99,107,105,110,103,32,115,116,114,101,97,109,115,46,10,0] /* Flush write buffers, */, "i8", ALLOC_NORMAL);
__str3184=allocate([95,95,73,79,66,97,115,101,95,99,108,111,115,101,100,0] /* __IOBase_closed\00 */, "i8", ALLOC_NORMAL);
__str4185=allocate([73,47,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,99,108,111,115,101,100,32,102,105,108,101,46,0] /* I/O operation on clo */, "i8", ALLOC_NORMAL);
_iobase_close_doc=allocate([70,108,117,115,104,32,97,110,100,32,99,108,111,115,101,32,116,104,101,32,73,79,32,111,98,106,101,99,116,46,10,10,84,104,105,115,32,109,101,116,104,111,100,32,104,97,115,32,110,111,32,101,102,102,101,99,116,32,105,102,32,116,104,101,32,102,105,108,101,32,105,115,32,97,108,114,101,97,100,121,32,99,108,111,115,101,100,46,10,0] /* Flush and close the  */, "i8", ALLOC_NORMAL);
__str5186=allocate([103,45,62,103,99,46,103,99,95,114,101,102,115,32,33,61,32,40,45,50,41,0] /* g->gc.gc_refs != (-2 */, "i8", ALLOC_NORMAL);
__str6187=allocate([46,46,47,99,112,121,116,104,111,110,47,77,111,100,117,108,101,115,47,95,105,111,47,105,111,98,97,115,101,46,99,0] /* ../cpython/Modules/_ */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8634=allocate([105,111,98,97,115,101,95,100,101,97,108,108,111,99,0] /* iobase_dealloc\00 */, "i8", ALLOC_NORMAL);
_iobase_seekable_doc=allocate([82,101,116,117,114,110,32,119,104,101,116,104,101,114,32,111,98,106,101,99,116,32,115,117,112,112,111,114,116,115,32,114,97,110,100,111,109,32,97,99,99,101,115,115,46,10,10,73,102,32,70,97,108,115,101,44,32,115,101,101,107,40,41,44,32,116,101,108,108,40,41,32,97,110,100,32,116,114,117,110,99,97,116,101,40,41,32,119,105,108,108,32,114,97,105,115,101,32,73,79,69,114,114,111,114,46,10,84,104,105,115,32,109,101,116,104,111,100,32,109,97,121,32,110,101,101,100,32,116,111,32,100,111,32,97,32,116,101,115,116,32,115,101,101,107,40,41,46,0] /* Return whether objec */, "i8", ALLOC_NORMAL);
__str7188=allocate([70,105,108,101,32,111,114,32,115,116,114,101,97,109,32,105,115,32,110,111,116,32,115,101,101,107,97,98,108,101,46,0] /* File or stream is no */, "i8", ALLOC_NORMAL);
_iobase_readable_doc=allocate([82,101,116,117,114,110,32,119,104,101,116,104,101,114,32,111,98,106,101,99,116,32,119,97,115,32,111,112,101,110,101,100,32,102,111,114,32,114,101,97,100,105,110,103,46,10,10,73,102,32,70,97,108,115,101,44,32,114,101,97,100,40,41,32,119,105,108,108,32,114,97,105,115,101,32,73,79,69,114,114,111,114,46,0] /* Return whether objec */, "i8", ALLOC_NORMAL);
__str8189=allocate([70,105,108,101,32,111,114,32,115,116,114,101,97,109,32,105,115,32,110,111,116,32,114,101,97,100,97,98,108,101,46,0] /* File or stream is no */, "i8", ALLOC_NORMAL);
_iobase_writable_doc=allocate([82,101,116,117,114,110,32,119,104,101,116,104,101,114,32,111,98,106,101,99,116,32,119,97,115,32,111,112,101,110,101,100,32,102,111,114,32,119,114,105,116,105,110,103,46,10,10,73,102,32,70,97,108,115,101,44,32,114,101,97,100,40,41,32,119,105,108,108,32,114,97,105,115,101,32,73,79,69,114,114,111,114,46,0] /* Return whether objec */, "i8", ALLOC_NORMAL);
__str9190=allocate([70,105,108,101,32,111,114,32,115,116,114,101,97,109,32,105,115,32,110,111,116,32,119,114,105,116,97,98,108,101,46,0] /* File or stream is no */, "i8", ALLOC_NORMAL);
_iobase_fileno_doc=allocate([82,101,116,117,114,110,115,32,117,110,100,101,114,108,121,105,110,103,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,102,32,111,110,101,32,101,120,105,115,116,115,46,10,10,65,110,32,73,79,69,114,114,111,114,32,105,115,32,114,97,105,115,101,100,32,105,102,32,116,104,101,32,73,79,32,111,98,106,101,99,116,32,100,111,101,115,32,110,111,116,32,117,115,101,32,97,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,46,10,0] /* Returns underlying f */, "i8", ALLOC_NORMAL);
__str10191=allocate([102,105,108,101,110,111,0] /* fileno\00 */, "i8", ALLOC_NORMAL);
_iobase_isatty_doc=allocate([82,101,116,117,114,110,32,119,104,101,116,104,101,114,32,116,104,105,115,32,105,115,32,97,110,32,39,105,110,116,101,114,97,99,116,105,118,101,39,32,115,116,114,101,97,109,46,10,10,82,101,116,117,114,110,32,70,97,108,115,101,32,105,102,32,105,116,32,99,97,110,39,116,32,98,101,32,100,101,116,101,114,109,105,110,101,100,46,10,0] /* Return whether this  */, "i8", ALLOC_NORMAL);
_iobase_readline_doc=allocate([82,101,97,100,32,97,110,100,32,114,101,116,117,114,110,32,97,32,108,105,110,101,32,102,114,111,109,32,116,104,101,32,115,116,114,101,97,109,46,10,10,73,102,32,108,105,109,105,116,32,105,115,32,115,112,101,99,105,102,105,101,100,44,32,97,116,32,109,111,115,116,32,108,105,109,105,116,32,98,121,116,101,115,32,119,105,108,108,32,98,101,32,114,101,97,100,46,10,10,84,104,101,32,108,105,110,101,32,116,101,114,109,105,110,97,116,111,114,32,105,115,32,97,108,119,97,121,115,32,98,39,10,39,32,102,111,114,32,98,105,110,97,114,121,32,102,105,108,101,115,59,32,102,111,114,32,116,101,120,116,10,102,105,108,101,115,44,32,116,104,101,32,110,101,119,108,105,110,101,115,32,97,114,103,117,109,101,110,116,32,116,111,32,111,112,101,110,32,99,97,110,32,98,101,32,117,115,101,100,32,116,111,32,115,101,108,101,99,116,32,116,104,101,32,108,105,110,101,10,116,101,114,109,105,110,97,116,111,114,40,115,41,32,114,101,99,111,103,110,105,122,101,100,46,10,0] /* Read and return a li */, "i8", ALLOC_NORMAL);
__str13194=allocate([105,0] /* i\00 */, "i8", ALLOC_NORMAL);
__str14195=allocate([112,101,101,107,40,41,32,115,104,111,117,108,100,32,104,97,118,101,32,114,101,116,117,114,110,101,100,32,97,32,98,121,116,101,115,32,111,98,106,101,99,116,44,32,110,111,116,32,39,37,46,50,48,48,115,39,0] /* peek() should have r */, "i8", ALLOC_NORMAL);
__str15196=allocate([114,101,97,100,0] /* read\00 */, "i8", ALLOC_NORMAL);
__str17198=allocate([114,101,97,100,40,41,32,115,104,111,117,108,100,32,104,97,118,101,32,114,101,116,117,114,110,101,100,32,97,32,98,121,116,101,115,32,111,98,106,101,99,116,44,32,110,111,116,32,39,37,46,50,48,48,115,39,0] /* read() should have r */, "i8", ALLOC_NORMAL);
__str18199=allocate([40,40,40,40,80,121,79,98,106,101,99,116,42,41,40,98,117,102,102,101,114,41,41,45,62,111,98,95,116,121,112,101,41,32,61,61,32,40,38,80,121,66,121,116,101,65,114,114,97,121,95,84,121,112,101,41,32,124,124,32,80,121,84,121,112,101,95,73,115,83,117,98,116,121,112,101,40,40,40,40,80,121,79,98,106,101,99,116,42,41,40,98,117,102,102,101,114,41,41,45,62,111,98,95,116,121,112,101,41,44,32,40,38,80,121,66,121,116,101,65,114,114,97,121,95,84,121,112,101,41,41,41,0] /* ((((PyObject_)(buffe */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8875=allocate([105,111,98,97,115,101,95,114,101,97,100,108,105,110,101,0] /* iobase_readline\00 */, "i8", ALLOC_NORMAL);
_iobase_readlines_doc=allocate([82,101,116,117,114,110,32,97,32,108,105,115,116,32,111,102,32,108,105,110,101,115,32,102,114,111,109,32,116,104,101,32,115,116,114,101,97,109,46,10,10,104,105,110,116,32,99,97,110,32,98,101,32,115,112,101,99,105,102,105,101,100,32,116,111,32,99,111,110,116,114,111,108,32,116,104,101,32,110,117,109,98,101,114,32,111,102,32,108,105,110,101,115,32,114,101,97,100,58,32,110,111,32,109,111,114,101,10,108,105,110,101,115,32,119,105,108,108,32,98,101,32,114,101,97,100,32,105,102,32,116,104,101,32,116,111,116,97,108,32,115,105,122,101,32,40,105,110,32,98,121,116,101,115,47,99,104,97,114,97,99,116,101,114,115,41,32,111,102,32,97,108,108,10,108,105,110,101,115,32,115,111,32,102,97,114,32,101,120,99,101,101,100,115,32,104,105,110,116,46,0] /* Return a list of lin */, "i8", ALLOC_NORMAL);
__str19200=allocate([124,79,38,58,114,101,97,100,108,105,110,101,115,0] /* |O&:readlines\00 */, "i8", ALLOC_NORMAL);
__str20201=allocate([101,120,116,101,110,100,0] /* extend\00 */, "i8", ALLOC_NORMAL);
__str21202=allocate([79,0] /* O\00 */, "i8", ALLOC_NORMAL);
__str22203=allocate([79,58,119,114,105,116,101,108,105,110,101,115,0] /* O:writelines\00 */, "i8", ALLOC_NORMAL);
__str23204=allocate([116,101,108,108,0] /* tell\00 */, "i8", ALLOC_NORMAL);
__str24205=allocate([102,108,117,115,104,0] /* flush\00 */, "i8", ALLOC_NORMAL);
__str25206=allocate([99,108,111,115,101,0] /* close\00 */, "i8", ALLOC_NORMAL);
__str26207=allocate([115,101,101,107,97,98,108,101,0] /* seekable\00 */, "i8", ALLOC_NORMAL);
__str27208=allocate([114,101,97,100,97,98,108,101,0] /* readable\00 */, "i8", ALLOC_NORMAL);
__str28209=allocate([119,114,105,116,97,98,108,101,0] /* writable\00 */, "i8", ALLOC_NORMAL);
__str29210=allocate([95,99,104,101,99,107,67,108,111,115,101,100,0] /* _checkClosed\00 */, "i8", ALLOC_NORMAL);
__str30211=allocate([95,99,104,101,99,107,83,101,101,107,97,98,108,101,0] /* _checkSeekable\00 */, "i8", ALLOC_NORMAL);
__str31212=allocate([95,99,104,101,99,107,82,101,97,100,97,98,108,101,0] /* _checkReadable\00 */, "i8", ALLOC_NORMAL);
__str32213=allocate([95,99,104,101,99,107,87,114,105,116,97,98,108,101,0] /* _checkWritable\00 */, "i8", ALLOC_NORMAL);
__str33214=allocate([105,115,97,116,116,121,0] /* isatty\00 */, "i8", ALLOC_NORMAL);
__str34215=allocate([95,95,101,110,116,101,114,95,95,0] /* __enter__\00 */, "i8", ALLOC_NORMAL);
__str35216=allocate([95,95,101,120,105,116,95,95,0] /* __exit__\00 */, "i8", ALLOC_NORMAL);
__str36217=allocate([114,101,97,100,108,105,110,101,0] /* readline\00 */, "i8", ALLOC_NORMAL);
__str37218=allocate([114,101,97,100,108,105,110,101,115,0] /* readlines\00 */, "i8", ALLOC_NORMAL);
__str38219=allocate([119,114,105,116,101,108,105,110,101,115,0] /* writelines\00 */, "i8", ALLOC_NORMAL);
_iobase_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str39220=allocate([99,108,111,115,101,100,0] /* closed\00 */, "i8", ALLOC_NORMAL);
_iobase_getset=allocate(40, ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str40221=allocate([95,105,111,46,95,73,79,66,97,115,101,0] /* _io._IOBase\00 */, "i8", ALLOC_NORMAL);
_PyIOBase_Type=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_rawiobase_doc=allocate([66,97,115,101,32,99,108,97,115,115,32,102,111,114,32,114,97,119,32,98,105,110,97,114,121,32,73,47,79,46,0] /* Base class for raw b */, "i8", ALLOC_NORMAL);
__str41223=allocate([124,110,58,114,101,97,100,0] /* |n:read\00 */, "i8", ALLOC_NORMAL);
__str42224=allocate([114,101,97,100,97,108,108,0] /* readall\00 */, "i8", ALLOC_NORMAL);
_rawiobase_readall_doc=allocate([82,101,97,100,32,117,110,116,105,108,32,69,79,70,44,32,117,115,105,110,103,32,109,117,108,116,105,112,108,101,32,114,101,97,100,40,41,32,99,97,108,108,46,0] /* Read until EOF, usin */, "i8", ALLOC_NORMAL);
_rawiobase_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str44226=allocate([95,105,111,46,95,82,97,119,73,79,66,97,115,101,0] /* _io._RawIOBase\00 */, "i8", ALLOC_NORMAL);
_PyRawIOBase_Type=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132587, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_module_doc=allocate([84,104,101,32,105,111,32,109,111,100,117,108,101,32,112,114,111,118,105,100,101,115,32,116,104,101,32,80,121,116,104,111,110,32,105,110,116,101,114,102,97,99,101,115,32,116,111,32,115,116,114,101,97,109,32,104,97,110,100,108,105,110,103,46,32,84,104,101,10,98,117,105,108,116,105,110,32,111,112,101,110,32,102,117,110,99,116,105,111,110,32,105,115,32,100,101,102,105,110,101,100,32,105,110,32,116,104,105,115,32,109,111,100,117,108,101,46,10,10,65,116,32,116,104,101,32,116,111,112,32,111,102,32,116,104,101,32,73,47,79,32,104,105,101,114,97,114,99,104,121,32,105,115,32,116,104,101,32,97,98,115,116,114,97,99,116,32,98,97,115,101,32,99,108,97,115,115,32,73,79,66,97,115,101,46,32,73,116,10,100,101,102,105,110,101,115,32,116,104,101,32,98,97,115,105,99,32,105,110,116,101,114,102,97,99,101,32,116,111,32,97,32,115,116,114,101,97,109,46,32,78,111,116,101,44,32,104,111,119,101,118,101,114,44,32,116,104,97,116,32,116,104,101,114,101,32,105,115,32,110,111,10,115,101,112,101,114,97,116,105,111,110,32,98,101,116,119,101,101,110,32,114,101,97,100,105,110,103,32,97,110,100,32,119,114,105,116,105,110,103,32,116,111,32,115,116,114,101,97,109,115,59,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,115,32,97,114,101,10,97,108,108,111,119,101,100,32,116,111,32,116,104,114,111,119,32,97,110,32,73,79,69,114,114,111,114,32,105,102,32,116,104,101,121,32,100,111,32,110,111,116,32,115,117,112,112,111,114,116,32,97,32,103,105,118,101,110,32,111,112,101,114,97,116,105,111,110,46,10,10,69,120,116,101,110,100,105,110,103,32,73,79,66,97,115,101,32,105,115,32,82,97,119,73,79,66,97,115,101,32,119,104,105,99,104,32,100,101,97,108,115,32,115,105,109,112,108,121,32,119,105,116,104,32,116,104,101,32,114,101,97,100,105,110,103,32,97,110,100,10,119,114,105,116,105,110,103,32,111,102,32,114,97,119,32,98,121,116,101,115,32,116,111,32,97,32,115,116,114,101,97,109,46,32,70,105,108,101,73,79,32,115,117,98,99,108,97,115,115,101,115,32,82,97,119,73,79,66,97,115,101,32,116,111,32,112,114,111,118,105,100,101,10,97,110,32,105,110,116,101,114,102,97,99,101,32,116,111,32,79,83,32,102,105,108,101,115,46,10,10,66,117,102,102,101,114,101,100,73,79,66,97,115,101,32,100,101,97,108,115,32,119,105,116,104,32,98,117,102,102,101,114,105,110,103,32,111,110,32,97,32,114,97,119,32,98,121,116,101,32,115,116,114,101,97,109,32,40,82,97,119,73,79,66,97,115,101,41,46,32,73,116,115,10,115,117,98,99,108,97,115,115,101,115,44,32,66,117,102,102,101,114,101,100,87,114,105,116,101,114,44,32,66,117,102,102,101,114,101,100,82,101,97,100,101,114,44,32,97,110,100,32,66,117,102,102,101,114,101,100,82,87,80,97,105,114,32,98,117,102,102,101,114,10,115,116,114,101,97,109,115,32,116,104,97,116,32,97,114,101,32,114,101,97,100,97,98,108,101,44,32,119,114,105,116,97,98,108,101,44,32,97,110,100,32,98,111,116,104,32,114,101,115,112,101,99,116,105,118,101,108,121,46,10,66,117,102,102,101,114,101,100,82,97,110,100,111,109,32,112,114,111,118,105,100,101,115,32,97,32,98,117,102,102,101,114,101,100,32,105,110,116,101,114,102,97,99,101,32,116,111,32,114,97,110,100,111,109,32,97,99,99,101,115,115,10,115,116,114,101,97,109,115,46,32,66,121,116,101,115,73,79,32,105,115,32,97,32,115,105,109,112,108,101,32,115,116,114,101,97,109,32,111,102,32,105,110,45,109,101,109,111,114,121,32,98,121,116,101,115,46,10,10,65,110,111,116,104,101,114,32,73,79,66,97,115,101,32,115,117,98,99,108,97,115,115,44,32,84,101,120,116,73,79,66,97,115,101,44,32,100,101,97,108,115,32,119,105,116,104,32,116,104,101,32,101,110,99,111,100,105,110,103,32,97,110,100,32,100,101,99,111,100,105,110,103,10,111,102,32,115,116,114,101,97,109,115,32,105,110,116,111,32,116,101,120,116,46,32,84,101,120,116,73,79,87,114,97,112,112,101,114,44,32,119,104,105,99,104,32,101,120,116,101,110,100,115,32,105,116,44,32,105,115,32,97,32,98,117,102,102,101,114,101,100,32,116,101,120,116,10,105,110,116,101,114,102,97,99,101,32,116,111,32,97,32,98,117,102,102,101,114,101,100,32,114,97,119,32,115,116,114,101,97,109,32,40,96,66,117,102,102,101,114,101,100,73,79,66,97,115,101,96,41,46,32,70,105,110,97,108,108,121,44,32,83,116,114,105,110,103,73,79,10,105,115,32,97,32,105,110,45,109,101,109,111,114,121,32,115,116,114,101,97,109,32,102,111,114,32,116,101,120,116,46,10,10,65,114,103,117,109,101,110,116,32,110,97,109,101,115,32,97,114,101,32,110,111,116,32,112,97,114,116,32,111,102,32,116,104,101,32,115,112,101,99,105,102,105,99,97,116,105,111,110,44,32,97,110,100,32,111,110,108,121,32,116,104,101,32,97,114,103,117,109,101,110,116,115,10,111,102,32,111,112,101,110,40,41,32,97,114,101,32,105,110,116,101,110,100,101,100,32,116,111,32,98,101,32,117,115,101,100,32,97,115,32,107,101,121,119,111,114,100,32,97,114,103,117,109,101,110,116,115,46,10,10,100,97,116,97,58,10,10,68,69,70,65,85,76,84,95,66,85,70,70,69,82,95,83,73,90,69,10,10,32,32,32,65,110,32,105,110,116,32,99,111,110,116,97,105,110,105,110,103,32,116,104,101,32,100,101,102,97,117,108,116,32,98,117,102,102,101,114,32,115,105,122,101,32,117,115,101,100,32,98,121,32,116,104,101,32,109,111,100,117,108,101,39,115,32,98,117,102,102,101,114,101,100,10,32,32,32,73,47,79,32,99,108,97,115,115,101,115,46,32,111,112,101,110,40,41,32,117,115,101,115,32,116,104,101,32,102,105,108,101,39,115,32,98,108,107,115,105,122,101,32,40,97,115,32,111,98,116,97,105,110,101,100,32,98,121,32,111,115,46,115,116,97,116,41,32,105,102,10,32,32,32,112,111,115,115,105,98,108,101,46,10,0] /* The io module provid */, "i8", ALLOC_NORMAL);
__str232=allocate([40,40,40,40,40,40,80,121,79,98,106,101,99,116,42,41,40,97,114,103,115,41,41,45,62,111,98,95,116,121,112,101,41,41,45,62,116,112,95,102,108,97,103,115,32,38,32,40,40,49,76,60,60,50,54,41,41,41,32,33,61,32,48,41,0] /* ((((((PyObject_)(arg */, "i8", ALLOC_NORMAL);
__str1233=allocate([46,46,47,99,112,121,116,104,111,110,47,77,111,100,117,108,101,115,47,95,105,111,47,95,105,111,109,111,100,117,108,101,46,99,0] /* ../cpython/Modules/_ */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8454=allocate([98,108,111,99,107,105,110,103,105,111,101,114,114,111,114,95,105,110,105,116,0] /* blockingioerror_init */, "i8", ALLOC_NORMAL);
__str2234=allocate([79,79,124,110,58,66,108,111,99,107,105,110,103,73,79,69,114,114,111,114,0] /* OO|n:BlockingIOError */, "i8", ALLOC_NORMAL);
__str3235=allocate([99,104,97,114,97,99,116,101,114,115,95,119,114,105,116,116,101,110,0] /* characters_written\0 */, "i8", ALLOC_NORMAL);
_blockingioerror_members=allocate([0, 0, 0, 0, 19, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str4236=allocate([66,108,111,99,107,105,110,103,73,79,69,114,114,111,114,0] /* BlockingIOError\00 */, "i8", ALLOC_NORMAL);
__str5237=allocate([69,120,99,101,112,116,105,111,110,32,114,97,105,115,101,100,32,119,104,101,110,32,73,47,79,32,119,111,117,108,100,32,98,108,111,99,107,32,111,110,32,97,32,110,111,110,45,98,108,111,99,107,105,110,103,32,73,47,79,32,115,116,114,101,97,109,0] /* Exception raised whe */, "i8", ALLOC_NORMAL);
__PyExc_BlockingIOError=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132587, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_PyExc_BlockingIOError=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
_open_doc=allocate([79,112,101,110,32,102,105,108,101,32,97,110,100,32,114,101,116,117,114,110,32,97,32,115,116,114,101,97,109,46,32,32,82,97,105,115,101,32,73,79,69,114,114,111,114,32,117,112,111,110,32,102,97,105,108,117,114,101,46,10,10,102,105,108,101,32,105,115,32,101,105,116,104,101,114,32,97,32,116,101,120,116,32,111,114,32,98,121,116,101,32,115,116,114,105,110,103,32,103,105,118,105,110,103,32,116,104,101,32,110,97,109,101,32,40,97,110,100,32,116,104,101,32,112,97,116,104,10,105,102,32,116,104,101,32,102,105,108,101,32,105,115,110,39,116,32,105,110,32,116,104,101,32,99,117,114,114,101,110,116,32,119,111,114,107,105,110,103,32,100,105,114,101,99,116,111,114,121,41,32,111,102,32,116,104,101,32,102,105,108,101,32,116,111,10,98,101,32,111,112,101,110,101,100,32,111,114,32,97,110,32,105,110,116,101,103,101,114,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,111,102,32,116,104,101,32,102,105,108,101,32,116,111,32,98,101,10,119,114,97,112,112,101,100,46,32,40,73,102,32,97,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,115,32,103,105,118,101,110,44,32,105,116,32,105,115,32,99,108,111,115,101,100,32,119,104,101,110,32,116,104,101,10,114,101,116,117,114,110,101,100,32,73,47,79,32,111,98,106,101,99,116,32,105,115,32,99,108,111,115,101,100,44,32,117,110,108,101,115,115,32,99,108,111,115,101,102,100,32,105,115,32,115,101,116,32,116,111,32,70,97,108,115,101,46,41,10,10,109,111,100,101,32,105,115,32,97,110,32,111,112,116,105,111,110,97,108,32,115,116,114,105,110,103,32,116,104,97,116,32,115,112,101,99,105,102,105,101,115,32,116,104,101,32,109,111,100,101,32,105,110,32,119,104,105,99,104,32,116,104,101,32,102,105,108,101,10,105,115,32,111,112,101,110,101,100,46,32,73,116,32,100,101,102,97,117,108,116,115,32,116,111,32,39,114,39,32,119,104,105,99,104,32,109,101,97,110,115,32,111,112,101,110,32,102,111,114,32,114,101,97,100,105,110,103,32,105,110,32,116,101,120,116,10,109,111,100,101,46,32,32,79,116,104,101,114,32,99,111,109,109,111,110,32,118,97,108,117,101,115,32,97,114,101,32,39,119,39,32,102,111,114,32,119,114,105,116,105,110,103,32,40,116,114,117,110,99,97,116,105,110,103,32,116,104,101,32,102,105,108,101,32,105,102,10,105,116,32,97,108,114,101,97,100,121,32,101,120,105,115,116,115,41,44,32,97,110,100,32,39,97,39,32,102,111,114,32,97,112,112,101,110,100,105,110,103,32,40,119,104,105,99,104,32,111,110,32,115,111,109,101,32,85,110,105,120,32,115,121,115,116,101,109,115,44,10,109,101,97,110,115,32,116,104,97,116,32,97,108,108,32,119,114,105,116,101,115,32,97,112,112,101,110,100,32,116,111,32,116,104,101,32,101,110,100,32,111,102,32,116,104,101,32,102,105,108,101,32,114,101,103,97,114,100,108,101,115,115,32,111,102,32,116,104,101,10,99,117,114,114,101,110,116,32,115,101,101,107,32,112,111,115,105,116,105,111,110,41,46,32,73,110,32,116,101,120,116,32,109,111,100,101,44,32,105,102,32,101,110,99,111,100,105,110,103,32,105,115,32,110,111,116,32,115,112,101,99,105,102,105,101,100,32,116,104,101,10,101,110,99,111,100,105,110,103,32,117,115,101,100,32,105,115,32,112,108,97,116,102,111,114,109,32,100,101,112,101,110,100,101,110,116,46,32,40,70,111,114,32,114,101,97,100,105,110,103,32,97,110,100,32,119,114,105,116,105,110,103,32,114,97,119,10,98,121,116,101,115,32,117,115,101,32,98,105,110,97,114,121,32,109,111,100,101,32,97,110,100,32,108,101,97,118,101,32,101,110,99,111,100,105,110,103,32,117,110,115,112,101,99,105,102,105,101,100,46,41,32,84,104,101,32,97,118,97,105,108,97,98,108,101,10,109,111,100,101,115,32,97,114,101,58,10,10,61,61,61,61,61,61,61,61,61,32,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,10,67,104,97,114,97,99,116,101,114,32,77,101,97,110,105,110,103,10,45,45,45,45,45,45,45,45,45,32,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,10,39,114,39,32,32,32,32,32,32,32,111,112,101,110,32,102,111,114,32,114,101,97,100,105,110,103,32,40,100,101,102,97,117,108,116,41,10,39,119,39,32,32,32,32,32,32,32,111,112,101,110,32,102,111,114,32,119,114,105,116,105,110,103,44,32,116,114,117,110,99,97,116,105,110,103,32,116,104,101,32,102,105,108,101,32,102,105,114,115,116,10,39,97,39,32,32,32,32,32,32,32,111,112,101,110,32,102,111,114,32,119,114,105,116,105,110,103,44,32,97,112,112,101,110,100,105,110,103,32,116,111,32,116,104,101,32,101,110,100,32,111,102,32,116,104,101,32,102,105,108,101,32,105,102,32,105,116,32,101,120,105,115,116,115,10,39,98,39,32,32,32,32,32,32,32,98,105,110,97,114,121,32,109,111,100,101,10,39,116,39,32,32,32,32,32,32,32,116,101,120,116,32,109,111,100,101,32,40,100,101,102,97,117,108,116,41,10,39,43,39,32,32,32,32,32,32,32,111,112,101,110,32,97,32,100,105,115,107,32,102,105,108,101,32,102,111,114,32,117,112,100,97,116,105,110,103,32,40,114,101,97,100,105,110,103,32,97,110,100,32,119,114,105,116,105,110,103,41,10,39,85,39,32,32,32,32,32,32,32,117,110,105,118,101,114,115,97,108,32,110,101,119,108,105,110,101,32,109,111,100,101,32,40,102,111,114,32,98,97,99,107,119,97,114,100,115,32,99,111,109,112,97,116,105,98,105,108,105,116,121,59,32,117,110,110,101,101,100,101,100,10,32,32,32,32,32,32,32,32,32,32,102,111,114,32,110,101,119,32,99,111,100,101,41,10,61,61,61,61,61,61,61,61,61,32,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,10,10,84,104,101,32,100,101,102,97,117,108,116,32,109,111,100,101,32,105,115,32,39,114,116,39,32,40,111,112,101,110,32,102,111,114,32,114,101,97,100,105,110,103,32,116,101,120,116,41,46,32,70,111,114,32,98,105,110,97,114,121,32,114,97,110,100,111,109,10,97,99,99,101,115,115,44,32,116,104,101,32,109,111,100,101,32,39,119,43,98,39,32,111,112,101,110,115,32,97,110,100,32,116,114,117,110,99,97,116,101,115,32,116,104,101,32,102,105,108,101,32,116,111,32,48,32,98,121,116,101,115,44,32,119,104,105,108,101,10,39,114,43,98,39,32,111,112,101,110,115,32,116,104,101,32,102,105,108,101,32,119,105,116,104,111,117,116,32,116,114,117,110,99,97,116,105,111,110,46,10,10,80,121,116,104,111,110,32,100,105,115,116,105,110,103,117,105,115,104,101,115,32,98,101,116,119,101,101,110,32,102,105,108,101,115,32,111,112,101,110,101,100,32,105,110,32,98,105,110,97,114,121,32,97,110,100,32,116,101,120,116,32,109,111,100,101,115,44,10,101,118,101,110,32,119,104,101,110,32,116,104,101,32,117,110,100,101,114,108,121,105,110,103,32,111,112,101,114,97,116,105,110,103,32,115,121,115,116,101,109,32,100,111,101,115,110,39,116,46,32,70,105,108,101,115,32,111,112,101,110,101,100,32,105,110,10,98,105,110,97,114,121,32,109,111,100,101,32,40,97,112,112,101,110,100,105,110,103,32,39,98,39,32,116,111,32,116,104,101,32,109,111,100,101,32,97,114,103,117,109,101,110,116,41,32,114,101,116,117,114,110,32,99,111,110,116,101,110,116,115,32,97,115,10,98,121,116,101,115,32,111,98,106,101,99,116,115,32,119,105,116,104,111,117,116,32,97,110,121,32,100,101,99,111,100,105,110,103,46,32,73,110,32,116,101,120,116,32,109,111,100,101,32,40,116,104,101,32,100,101,102,97,117,108,116,44,32,111,114,32,119,104,101,110,10,39,116,39,32,105,115,32,97,112,112,101,110,100,101,100,32,116,111,32,116,104,101,32,109,111,100,101,32,97,114,103,117,109,101,110,116,41,44,32,116,104,101,32,99,111,110,116,101,110,116,115,32,111,102,32,116,104,101,32,102,105,108,101,32,97,114,101,10,114,101,116,117,114,110,101,100,32,97,115,32,115,116,114,105,110,103,115,44,32,116,104,101,32,98,121,116,101,115,32,104,97,118,105,110,103,32,98,101,101,110,32,102,105,114,115,116,32,100,101,99,111,100,101,100,32,117,115,105,110,103,32,97,10,112,108,97,116,102,111,114,109,45,100,101,112,101,110,100,101,110,116,32,101,110,99,111,100,105,110,103,32,111,114,32,117,115,105,110,103,32,116,104,101,32,115,112,101,99,105,102,105,101,100,32,101,110,99,111,100,105,110,103,32,105,102,32,103,105,118,101,110,46,10,10,98,117,102,102,101,114,105,110,103,32,105,115,32,97,110,32,111,112,116,105,111,110,97,108,32,105,110,116,101,103,101,114,32,117,115,101,100,32,116,111,32,115,101,116,32,116,104,101,32,98,117,102,102,101,114,105,110,103,32,112,111,108,105,99,121,46,10,80,97,115,115,32,48,32,116,111,32,115,119,105,116,99,104,32,98,117,102,102,101,114,105,110,103,32,111,102,102,32,40,111,110,108,121,32,97,108,108,111,119,101,100,32,105,110,32,98,105,110,97,114,121,32,109,111,100,101,41,44,32,49,32,116,111,32,115,101,108,101,99,116,10,108,105,110,101,32,98,117,102,102,101,114,105,110,103,32,40,111,110,108,121,32,117,115,97,98,108,101,32,105,110,32,116,101,120,116,32,109,111,100,101,41,44,32,97,110,100,32,97,110,32,105,110,116,101,103,101,114,32,62,32,49,32,116,111,32,105,110,100,105,99,97,116,101,10,116,104,101,32,115,105,122,101,32,111,102,32,97,32,102,105,120,101,100,45,115,105,122,101,32,99,104,117,110,107,32,98,117,102,102,101,114,46,32,32,87,104,101,110,32,110,111,32,98,117,102,102,101,114,105,110,103,32,97,114,103,117,109,101,110,116,32,105,115,10,103,105,118,101,110,44,32,116,104,101,32,100,101,102,97,117,108,116,32,98,117,102,102,101,114,105,110,103,32,112,111,108,105,99,121,32,119,111,114,107,115,32,97,115,32,102,111,108,108,111,119,115,58,10,10,42,32,66,105,110,97,114,121,32,102,105,108,101,115,32,97,114,101,32,98,117,102,102,101,114,101,100,32,105,110,32,102,105,120,101,100,45,115,105,122,101,32,99,104,117,110,107,115,59,32,116,104,101,32,115,105,122,101,32,111,102,32,116,104,101,32,98,117,102,102,101,114,10,32,32,105,115,32,99,104,111,115,101,110,32,117,115,105,110,103,32,97,32,104,101,117,114,105,115,116,105,99,32,116,114,121,105,110,103,32,116,111,32,100,101,116,101,114,109,105,110,101,32,116,104,101,32,117,110,100,101,114,108,121,105,110,103,32,100,101,118,105,99,101,39,115,10,32,32,34,98,108,111,99,107,32,115,105,122,101,34,32,97,110,100,32,102,97,108,108,105,110,103,32,98,97,99,107,32,111,110,32,96,105,111,46,68,69,70,65,85,76,84,95,66,85,70,70,69,82,95,83,73,90,69,96,46,10,32,32,79,110,32,109,97,110,121,32,115,121,115,116,101,109,115,44,32,116,104,101,32,98,117,102,102,101,114,32,119,105,108,108,32,116,121,112,105,99,97,108,108,121,32,98,101,32,52,48,57,54,32,111,114,32,56,49,57,50,32,98,121,116,101,115,32,108,111,110,103,46,10,10,42,32,34,73,110,116,101,114,97,99,116,105,118,101,34,32,116,101,120,116,32,102,105,108,101,115,32,40,102,105,108,101,115,32,102,111,114,32,119,104,105,99,104,32,105,115,97,116,116,121,40,41,32,114,101,116,117,114,110,115,32,84,114,117,101,41,10,32,32,117,115,101,32,108,105,110,101,32,98,117,102,102,101,114,105,110,103,46,32,32,79,116,104,101,114,32,116,101,120,116,32,102,105,108,101,115,32,117,115,101,32,116,104,101,32,112,111,108,105,99,121,32,100,101,115,99,114,105,98,101,100,32,97,98,111,118,101,10,32,32,102,111,114,32,98,105,110,97,114,121,32,102,105,108,101,115,46,10,10,101,110,99,111,100,105,110,103,32,105,115,32,116,104,101,32,110,97,109,101,32,111,102,32,116,104,101,32,101,110,99,111,100,105,110,103,32,117,115,101,100,32,116,111,32,100,101,99,111,100,101,32,111,114,32,101,110,99,111,100,101,32,116,104,101,10,102,105,108,101,46,32,84,104,105,115,32,115,104,111,117,108,100,32,111,110,108,121,32,98,101,32,117,115,101,100,32,105,110,32,116,101,120,116,32,109,111,100,101,46,32,84,104,101,32,100,101,102,97,117,108,116,32,101,110,99,111,100,105,110,103,32,105,115,10,112,108,97,116,102,111,114,109,32,100,101,112,101,110,100,101,110,116,44,32,98,117,116,32,97,110,121,32,101,110,99,111,100,105,110,103,32,115,117,112,112,111,114,116,101,100,32,98,121,32,80,121,116,104,111,110,32,99,97,110,32,98,101,10,112,97,115,115,101,100,46,32,32,83,101,101,32,116,104,101,32,99,111,100,101,99,115,32,109,111,100,117,108,101,32,102,111,114,32,116,104,101,32,108,105,115,116,32,111,102,32,115,117,112,112,111,114,116,101,100,32,101,110,99,111,100,105,110,103,115,46,10,10,101,114,114,111,114,115,32,105,115,32,97,110,32,111,112,116,105,111,110,97,108,32,115,116,114,105,110,103,32,116,104,97,116,32,115,112,101,99,105,102,105,101,115,32,104,111,119,32,101,110,99,111,100,105,110,103,32,101,114,114,111,114,115,32,97,114,101,32,116,111,10,98,101,32,104,97,110,100,108,101,100,45,45,45,116,104,105,115,32,97,114,103,117,109,101,110,116,32,115,104,111,117,108,100,32,110,111,116,32,98,101,32,117,115,101,100,32,105,110,32,98,105,110,97,114,121,32,109,111,100,101,46,32,80,97,115,115,10,39,115,116,114,105,99,116,39,32,116,111,32,114,97,105,115,101,32,97,32,86,97,108,117,101,69,114,114,111,114,32,101,120,99,101,112,116,105,111,110,32,105,102,32,116,104,101,114,101,32,105,115,32,97,110,32,101,110,99,111,100,105,110,103,32,101,114,114,111,114,10,40,116,104,101,32,100,101,102,97,117,108,116,32,111,102,32,78,111,110,101,32,104,97,115,32,116,104,101,32,115,97,109,101,32,101,102,102,101,99,116,41,44,32,111,114,32,112,97,115,115,32,39,105,103,110,111,114,101,39,32,116,111,32,105,103,110,111,114,101,10,101,114,114,111,114,115,46,32,40,78,111,116,101,32,116,104,97,116,32,105,103,110,111,114,105,110,103,32,101,110,99,111,100,105,110,103,32,101,114,114,111,114,115,32,99,97,110,32,108,101,97,100,32,116,111,32,100,97,116,97,32,108,111,115,115,46,41,10,83,101,101,32,116,104,101,32,100,111,99,117,109,101,110,116,97,116,105,111,110,32,102,111,114,32,99,111,100,101,99,115,46,114,101,103,105,115,116,101,114,32,102,111,114,32,97,32,108,105,115,116,32,111,102,32,116,104,101,32,112,101,114,109,105,116,116,101,100,10,101,110,99,111,100,105,110,103,32,101,114,114,111,114,32,115,116,114,105,110,103,115,46,10,10,110,101,119,108,105,110,101,32,99,111,110,116,114,111,108,115,32,104,111,119,32,117,110,105,118,101,114,115,97,108,32,110,101,119,108,105,110,101,115,32,119,111,114,107,115,32,40,105,116,32,111,110,108,121,32,97,112,112,108,105,101,115,32,116,111,32,116,101,120,116,10,109,111,100,101,41,46,32,73,116,32,99,97,110,32,98,101,32,78,111,110,101,44,32,39,39,44,32,39,92,110,39,44,32,39,92,114,39,44,32,97,110,100,32,39,92,114,92,110,39,46,32,32,73,116,32,119,111,114,107,115,32,97,115,10,102,111,108,108,111,119,115,58,10,10,42,32,79,110,32,105,110,112,117,116,44,32,105,102,32,110,101,119,108,105,110,101,32,105,115,32,78,111,110,101,44,32,117,110,105,118,101,114,115,97,108,32,110,101,119,108,105,110,101,115,32,109,111,100,101,32,105,115,10,32,32,101,110,97,98,108,101,100,46,32,76,105,110,101,115,32,105,110,32,116,104,101,32,105,110,112,117,116,32,99,97,110,32,101,110,100,32,105,110,32,39,92,110,39,44,32,39,92,114,39,44,32,111,114,32,39,92,114,92,110,39,44,32,97,110,100,10,32,32,116,104,101,115,101,32,97,114,101,32,116,114,97,110,115,108,97,116,101,100,32,105,110,116,111,32,39,92,110,39,32,98,101,102,111,114,101,32,98,101,105,110,103,32,114,101,116,117,114,110,101,100,32,116,111,32,116,104,101,10,32,32,99,97,108,108,101,114,46,32,73,102,32,105,116,32,105,115,32,39,39,44,32,117,110,105,118,101,114,115,97,108,32,110,101,119,108,105,110,101,32,109,111,100,101,32,105,115,32,101,110,97,98,108,101,100,44,32,98,117,116,32,108,105,110,101,10,32,32,101,110,100,105,110,103,115,32,97,114,101,32,114,101,116,117,114,110,101,100,32,116,111,32,116,104,101,32,99,97,108,108,101,114,32,117,110,116,114,97,110,115,108,97,116,101,100,46,32,73,102,32,105,116,32,104,97,115,32,97,110,121,32,111,102,10,32,32,116,104,101,32,111,116,104,101,114,32,108,101,103,97,108,32,118,97,108,117,101,115,44,32,105,110,112,117,116,32,108,105,110,101,115,32,97,114,101,32,111,110,108,121,32,116,101,114,109,105,110,97,116,101,100,32,98,121,32,116,104,101,32,103,105,118,101,110,10,32,32,115,116,114,105,110,103,44,32,97,110,100,32,116,104,101,32,108,105,110,101,32,101,110,100,105,110,103,32,105,115,32,114,101,116,117,114,110,101,100,32,116,111,32,116,104,101,32,99,97,108,108,101,114,32,117,110,116,114,97,110,115,108,97,116,101,100,46,10,10,42,32,79,110,32,111,117,116,112,117,116,44,32,105,102,32,110,101,119,108,105,110,101,32,105,115,32,78,111,110,101,44,32,97,110,121,32,39,92,110,39,32,99,104,97,114,97,99,116,101,114,115,32,119,114,105,116,116,101,110,32,97,114,101,10,32,32,116,114,97,110,115,108,97,116,101,100,32,116,111,32,116,104,101,32,115,121,115,116,101,109,32,100,101,102,97,117,108,116,32,108,105,110,101,32,115,101,112,97,114,97,116,111,114,44,32,111,115,46,108,105,110,101,115,101,112,46,32,73,102,10,32,32,110,101,119,108,105,110,101,32,105,115,32,39,39,44,32,110,111,32,116,114,97,110,115,108,97,116,105,111,110,32,116,97,107,101,115,32,112,108,97,99,101,46,32,73,102,32,110,101,119,108,105,110,101,32,105,115,32,97,110,121,32,111,102,32,116,104,101,10,32,32,111,116,104,101,114,32,108,101,103,97,108,32,118,97,108,117,101,115,44,32,97,110,121,32,39,92,110,39,32,99,104,97,114,97,99,116,101,114,115,32,119,114,105,116,116,101,110,32,97,114,101,32,116,114,97,110,115,108,97,116,101,100,32,116,111,10,32,32,116,104,101,32,103,105,118,101,110,32,115,116,114,105,110,103,46,10,10,73,102,32,99,108,111,115,101,102,100,32,105,115,32,70,97,108,115,101,44,32,116,104,101,32,117,110,100,101,114,108,121,105,110,103,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,119,105,108,108,32,98,101,32,107,101,112,116,32,111,112,101,110,10,119,104,101,110,32,116,104,101,32,102,105,108,101,32,105,115,32,99,108,111,115,101,100,46,32,84,104,105,115,32,100,111,101,115,32,110,111,116,32,119,111,114,107,32,119,104,101,110,32,97,32,102,105,108,101,32,110,97,109,101,32,105,115,32,103,105,118,101,110,10,97,110,100,32,109,117,115,116,32,98,101,32,84,114,117,101,32,105,110,32,116,104,97,116,32,99,97,115,101,46,10,10,111,112,101,110,40,41,32,114,101,116,117,114,110,115,32,97,32,102,105,108,101,32,111,98,106,101,99,116,32,119,104,111,115,101,32,116,121,112,101,32,100,101,112,101,110,100,115,32,111,110,32,116,104,101,32,109,111,100,101,44,32,97,110,100,10,116,104,114,111,117,103,104,32,119,104,105,99,104,32,116,104,101,32,115,116,97,110,100,97,114,100,32,102,105,108,101,32,111,112,101,114,97,116,105,111,110,115,32,115,117,99,104,32,97,115,32,114,101,97,100,105,110,103,32,97,110,100,32,119,114,105,116,105,110,103,10,97,114,101,32,112,101,114,102,111,114,109,101,100,46,32,87,104,101,110,32,111,112,101,110,40,41,32,105,115,32,117,115,101,100,32,116,111,32,111,112,101,110,32,97,32,102,105,108,101,32,105,110,32,97,32,116,101,120,116,32,109,111,100,101,32,40,39,119,39,44,10,39,114,39,44,32,39,119,116,39,44,32,39,114,116,39,44,32,101,116,99,46,41,44,32,105,116,32,114,101,116,117,114,110,115,32,97,32,84,101,120,116,73,79,87,114,97,112,112,101,114,46,32,87,104,101,110,32,117,115,101,100,32,116,111,32,111,112,101,110,10,97,32,102,105,108,101,32,105,110,32,97,32,98,105,110,97,114,121,32,109,111,100,101,44,32,116,104,101,32,114,101,116,117,114,110,101,100,32,99,108,97,115,115,32,118,97,114,105,101,115,58,32,105,110,32,114,101,97,100,32,98,105,110,97,114,121,10,109,111,100,101,44,32,105,116,32,114,101,116,117,114,110,115,32,97,32,66,117,102,102,101,114,101,100,82,101,97,100,101,114,59,32,105,110,32,119,114,105,116,101,32,98,105,110,97,114,121,32,97,110,100,32,97,112,112,101,110,100,32,98,105,110,97,114,121,10,109,111,100,101,115,44,32,105,116,32,114,101,116,117,114,110,115,32,97,32,66,117,102,102,101,114,101,100,87,114,105,116,101,114,44,32,97,110,100,32,105,110,32,114,101,97,100,47,119,114,105,116,101,32,109,111,100,101,44,32,105,116,32,114,101,116,117,114,110,115,10,97,32,66,117,102,102,101,114,101,100,82,97,110,100,111,109,46,10,10,73,116,32,105,115,32,97,108,115,111,32,112,111,115,115,105,98,108,101,32,116,111,32,117,115,101,32,97,32,115,116,114,105,110,103,32,111,114,32,98,121,116,101,97,114,114,97,121,32,97,115,32,97,32,102,105,108,101,32,102,111,114,32,98,111,116,104,10,114,101,97,100,105,110,103,32,97,110,100,32,119,114,105,116,105,110,103,46,32,70,111,114,32,115,116,114,105,110,103,115,32,83,116,114,105,110,103,73,79,32,99,97,110,32,98,101,32,117,115,101,100,32,108,105,107,101,32,97,32,102,105,108,101,10,111,112,101,110,101,100,32,105,110,32,97,32,116,101,120,116,32,109,111,100,101,44,32,97,110,100,32,102,111,114,32,98,121,116,101,115,32,97,32,66,121,116,101,115,73,79,32,99,97,110,32,98,101,32,117,115,101,100,32,108,105,107,101,32,97,32,102,105,108,101,10,111,112,101,110,101,100,32,105,110,32,97,32,98,105,110,97,114,121,32,109,111,100,101,46,10,0] /* Open file and return */, "i8", ALLOC_NORMAL);
__str6239=allocate([102,105,108,101,0] /* file\00 */, "i8", ALLOC_NORMAL);
__str7240=allocate([109,111,100,101,0] /* mode\00 */, "i8", ALLOC_NORMAL);
__str8241=allocate([98,117,102,102,101,114,105,110,103,0] /* buffering\00 */, "i8", ALLOC_NORMAL);
__str9242=allocate([101,110,99,111,100,105,110,103,0] /* encoding\00 */, "i8", ALLOC_NORMAL);
__str10243=allocate([101,114,114,111,114,115,0] /* errors\00 */, "i8", ALLOC_NORMAL);
__str11244=allocate([110,101,119,108,105,110,101,0] /* newline\00 */, "i8", ALLOC_NORMAL);
__str12245=allocate([99,108,111,115,101,102,100,0] /* closefd\00 */, "i8", ALLOC_NORMAL);
__str13246=allocate([114,0] /* r\00 */, "i8", ALLOC_NORMAL);
__str14247=allocate([79,124,115,105,122,122,122,105,58,111,112,101,110,0] /* O|sizzzi:open\00 */, "i8", ALLOC_NORMAL);
__str15248=allocate([105,110,118,97,108,105,100,32,102,105,108,101,58,32,37,115,0] /* invalid file: %s\00 */, "i8", ALLOC_NORMAL);
__str16249=allocate([105,110,118,97,108,105,100,32,109,111,100,101,58,32,39,37,115,39,0] /* invalid mode: '%s'\0 */, "i8", ALLOC_NORMAL);
__str17250=allocate([99,97,110,39,116,32,117,115,101,32,85,32,97,110,100,32,119,114,105,116,105,110,103,32,109,111,100,101,32,97,116,32,111,110,99,101,0] /* can't use U and writ */, "i8", ALLOC_NORMAL);
__str18251=allocate([99,97,110,39,116,32,104,97,118,101,32,116,101,120,116,32,97,110,100,32,98,105,110,97,114,121,32,109,111,100,101,32,97,116,32,111,110,99,101,0] /* can't have text and  */, "i8", ALLOC_NORMAL);
__str19252=allocate([109,117,115,116,32,104,97,118,101,32,101,120,97,99,116,108,121,32,111,110,101,32,111,102,32,114,101,97,100,47,119,114,105,116,101,47,97,112,112,101,110,100,32,109,111,100,101,0] /* must have exactly on */, "i8", ALLOC_NORMAL);
__str20253=allocate([98,105,110,97,114,121,32,109,111,100,101,32,100,111,101,115,110,39,116,32,116,97,107,101,32,97,110,32,101,110,99,111,100,105,110,103,32,97,114,103,117,109,101,110,116,0] /* binary mode doesn't  */, "i8", ALLOC_NORMAL);
__str21254=allocate([98,105,110,97,114,121,32,109,111,100,101,32,100,111,101,115,110,39,116,32,116,97,107,101,32,97,110,32,101,114,114,111,114,115,32,97,114,103,117,109,101,110,116,0] /* binary mode doesn't  */, "i8", ALLOC_NORMAL);
__str22255=allocate([98,105,110,97,114,121,32,109,111,100,101,32,100,111,101,115,110,39,116,32,116,97,107,101,32,97,32,110,101,119,108,105,110,101,32,97,114,103,117,109,101,110,116,0] /* binary mode doesn't  */, "i8", ALLOC_NORMAL);
__str23256=allocate([79,115,105,0] /* Osi\00 */, "i8", ALLOC_NORMAL);
__str24257=allocate([105,115,97,116,116,121,0] /* isatty\00 */, "i8", ALLOC_NORMAL);
__str25258=allocate([102,105,108,101,110,111,0] /* fileno\00 */, "i8", ALLOC_NORMAL);
__str26259=allocate([105,110,118,97,108,105,100,32,98,117,102,102,101,114,105,110,103,32,115,105,122,101,0] /* invalid buffering si */, "i8", ALLOC_NORMAL);
__str27260=allocate([99,97,110,39,116,32,104,97,118,101,32,117,110,98,117,102,102,101,114,101,100,32,116,101,120,116,32,73,47,79,0] /* can't have unbuffere */, "i8", ALLOC_NORMAL);
__str28261=allocate([117,110,107,110,111,119,110,32,109,111,100,101,58,32,39,37,115,39,0] /* unknown mode: '%s'\0 */, "i8", ALLOC_NORMAL);
__str29262=allocate([79,105,0] /* Oi\00 */, "i8", ALLOC_NORMAL);
__str30263=allocate([79,115,115,115,105,0] /* Osssi\00 */, "i8", ALLOC_NORMAL);
__str31264=allocate([40,40,40,40,40,40,80,121,79,98,106,101,99,116,42,41,40,118,97,108,117,101,41,41,45,62,111,98,95,116,121,112,101,41,41,45,62,116,112,95,102,108,97,103,115,32,38,32,40,40,49,76,60,60,50,52,41,41,41,32,33,61,32,48,41,0] /* ((((((PyObject_)(val */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8811=allocate([80,121,78,117,109,98,101,114,95,65,115,79,102,102,95,116,0] /* PyNumber_AsOff_t\00 */, "i8", ALLOC_NORMAL);
__str32265=allocate([99,97,110,110,111,116,32,102,105,116,32,39,37,46,50,48,48,115,39,32,105,110,116,111,32,97,110,32,111,102,102,115,101,116,45,115,105,122,101,100,32,105,110,116,101,103,101,114,0] /* cannot fit '%.200s'  */, "i8", ALLOC_NORMAL);
__str33266=allocate([105,110,116,101,103,101,114,32,97,114,103,117,109,101,110,116,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,39,37,46,50,48,48,115,39,0] /* integer argument exp */, "i8", ALLOC_NORMAL);
__PyIO_os_module=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__PyIO_locale_module=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__PyIO_unsupported_operation=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str34268=allocate([111,112,101,110,0] /* open\00 */, "i8", ALLOC_NORMAL);
_module_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str35269=allocate([95,105,111,0] /* _io\00 */, "i8", ALLOC_NORMAL);
__str36270=allocate([111,115,0] /* os\00 */, "i8", ALLOC_NORMAL);
__str37271=allocate([68,69,70,65,85,76,84,95,66,85,70,70,69,82,95,83,73,90,69,0] /* DEFAULT_BUFFER_SIZE\ */, "i8", ALLOC_NORMAL);
__str38272=allocate([115,40,79,79,41,123,125,0] /* s(OO){}\00 */, "i8", ALLOC_NORMAL);
__str39273=allocate([85,110,115,117,112,112,111,114,116,101,100,79,112,101,114,97,116,105,111,110,0] /* UnsupportedOperation */, "i8", ALLOC_NORMAL);
__str40274=allocate([95,73,79,66,97,115,101,0] /* _IOBase\00 */, "i8", ALLOC_NORMAL);
__str41275=allocate([95,82,97,119,73,79,66,97,115,101,0] /* _RawIOBase\00 */, "i8", ALLOC_NORMAL);
__str42276=allocate([95,66,117,102,102,101,114,101,100,73,79,66,97,115,101,0] /* _BufferedIOBase\00 */, "i8", ALLOC_NORMAL);
__str43277=allocate([95,84,101,120,116,73,79,66,97,115,101,0] /* _TextIOBase\00 */, "i8", ALLOC_NORMAL);
__str44278=allocate([70,105,108,101,73,79,0] /* FileIO\00 */, "i8", ALLOC_NORMAL);
__str45279=allocate([66,121,116,101,115,73,79,0] /* BytesIO\00 */, "i8", ALLOC_NORMAL);
__str46280=allocate([83,116,114,105,110,103,73,79,0] /* StringIO\00 */, "i8", ALLOC_NORMAL);
__str47281=allocate([66,117,102,102,101,114,101,100,82,101,97,100,101,114,0] /* BufferedReader\00 */, "i8", ALLOC_NORMAL);
__str48282=allocate([66,117,102,102,101,114,101,100,87,114,105,116,101,114,0] /* BufferedWriter\00 */, "i8", ALLOC_NORMAL);
__str49283=allocate([66,117,102,102,101,114,101,100,82,87,80,97,105,114,0] /* BufferedRWPair\00 */, "i8", ALLOC_NORMAL);
__str50284=allocate([66,117,102,102,101,114,101,100,82,97,110,100,111,109,0] /* BufferedRandom\00 */, "i8", ALLOC_NORMAL);
__str51285=allocate([84,101,120,116,73,79,87,114,97,112,112,101,114,0] /* TextIOWrapper\00 */, "i8", ALLOC_NORMAL);
__str52286=allocate([73,110,99,114,101,109,101,110,116,97,108,78,101,119,108,105,110,101,68,101,99,111,100,101,114,0] /* IncrementalNewlineDe */, "i8", ALLOC_NORMAL);
__str53287=allocate([99,108,111,115,101,0] /* close\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_close=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str54289=allocate([99,108,111,115,101,100,0] /* closed\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_closed=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str55291=allocate([100,101,99,111,100,101,0] /* decode\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_decode=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str56292=allocate([101,110,99,111,100,101,0] /* encode\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_encode=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__PyIO_str_fileno=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str57294=allocate([102,108,117,115,104,0] /* flush\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_flush=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str58296=allocate([103,101,116,115,116,97,116,101,0] /* getstate\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_getstate=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__PyIO_str_isatty=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str59298=allocate([110,101,119,108,105,110,101,115,0] /* newlines\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_newlines=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str60299=allocate([10,0] /* \0A\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_nl=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str61300=allocate([114,101,97,100,0] /* read\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_read=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str62302=allocate([114,101,97,100,49,0] /* read1\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_read1=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str63303=allocate([114,101,97,100,97,98,108,101,0] /* readable\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_readable=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str64305=allocate([114,101,97,100,105,110,116,111,0] /* readinto\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_readinto=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str65307=allocate([114,101,97,100,108,105,110,101,0] /* readline\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_readline=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str66309=allocate([114,101,115,101,116,0] /* reset\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_reset=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str67=allocate([115,101,101,107,0] /* seek\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_seek=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str68=allocate([115,101,101,107,97,98,108,101,0] /* seekable\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_seekable=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str69=allocate([115,101,116,115,116,97,116,101,0] /* setstate\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_setstate=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str70=allocate([116,101,108,108,0] /* tell\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_tell=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str71=allocate([116,114,117,110,99,97,116,101,0] /* truncate\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_truncate=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str72=allocate([119,114,105,116,101,0] /* write\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_write=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__str73=allocate([119,114,105,116,97,98,108,101,0] /* writable\00 */, "i8", ALLOC_NORMAL);
__PyIO_str_writable=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__PyIO_empty_str=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__PyIO_empty_bytes=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
__PyIO_zero=allocate(1, "%struct.PyObject*", ALLOC_NORMAL);
_stringio_doc=allocate([84,101,120,116,32,73,47,79,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,32,117,115,105,110,103,32,97,110,32,105,110,45,109,101,109,111,114,121,32,98,117,102,102,101,114,46,10,10,84,104,101,32,105,110,105,116,105,97,108,95,118,97,108,117,101,32,97,114,103,117,109,101,110,116,32,115,101,116,115,32,116,104,101,32,118,97,108,117,101,32,111,102,32,111,98,106,101,99,116,46,32,32,84,104,101,32,110,101,119,108,105,110,101,10,97,114,103,117,109,101,110,116,32,105,115,32,108,105,107,101,32,116,104,101,32,111,110,101,32,111,102,32,84,101,120,116,73,79,87,114,97,112,112,101,114,39,115,32,99,111,110,115,116,114,117,99,116,111,114,46,0] /* Text I/O implementat */, "i8", ALLOC_NORMAL);
__str319=allocate([115,101,108,102,45,62,98,117,102,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* self->buf != ((void  */, "i8", ALLOC_NORMAL);
__str1320=allocate([46,46,47,99,112,121,116,104,111,110,47,77,111,100,117,108,101,115,47,95,105,111,47,115,116,114,105,110,103,105,111,46,99,0] /* ../cpython/Modules/_ */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8442=allocate([114,101,115,105,122,101,95,98,117,102,102,101,114,0] /* resize_buffer\00 */, "i8", ALLOC_NORMAL);
__str2321=allocate([110,101,119,32,98,117,102,102,101,114,32,115,105,122,101,32,116,111,111,32,108,97,114,103,101,0] /* new buffer size too  */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8484=allocate([119,114,105,116,101,95,115,116,114,0] /* write_str\00 */, "i8", ALLOC_NORMAL);
__str3322=allocate([115,101,108,102,45,62,112,111,115,32,62,61,32,48,0] /* self->pos >= 0\00 */, "i8", ALLOC_NORMAL);
__str4323=allocate([40,40,40,40,40,40,80,121,79,98,106,101,99,116,42,41,40,100,101,99,111,100,101,100,41,41,45,62,111,98,95,116,121,112,101,41,41,45,62,116,112,95,102,108,97,103,115,32,38,32,40,40,49,76,60,60,50,56,41,41,41,32,33,61,32,48,41,0] /* ((((((PyObject_)(dec */, "i8", ALLOC_NORMAL);
__str5324=allocate([108,101,110,32,62,61,32,48,0] /* len >= 0\00 */, "i8", ALLOC_NORMAL);
__str6325=allocate([110,101,119,32,112,111,115,105,116,105,111,110,32,116,111,111,32,108,97,114,103,101,0] /* new position too lar */, "i8", ALLOC_NORMAL);
_stringio_getvalue_doc=allocate([82,101,116,114,105,101,118,101,32,116,104,101,32,101,110,116,105,114,101,32,99,111,110,116,101,110,116,115,32,111,102,32,116,104,101,32,111,98,106,101,99,116,46,0] /* Retrieve the entire  */, "i8", ALLOC_NORMAL);
__str8327=allocate([73,47,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,99,108,111,115,101,100,32,102,105,108,101,0] /* I/O operation on clo */, "i8", ALLOC_NORMAL);
_stringio_tell_doc=allocate([84,101,108,108,32,116,104,101,32,99,117,114,114,101,110,116,32,102,105,108,101,32,112,111,115,105,116,105,111,110,46,0] /* Tell the current fil */, "i8", ALLOC_NORMAL);
_stringio_read_doc=allocate([82,101,97,100,32,97,116,32,109,111,115,116,32,110,32,99,104,97,114,97,99,116,101,114,115,44,32,114,101,116,117,114,110,101,100,32,97,115,32,97,32,115,116,114,105,110,103,46,10,10,73,102,32,116,104,101,32,97,114,103,117,109,101,110,116,32,105,115,32,110,101,103,97,116,105,118,101,32,111,114,32,111,109,105,116,116,101,100,44,32,114,101,97,100,32,117,110,116,105,108,32,69,79,70,10,105,115,32,114,101,97,99,104,101,100,46,32,82,101,116,117,114,110,32,97,110,32,101,109,112,116,121,32,115,116,114,105,110,103,32,97,116,32,69,79,70,46,10,0] /* Read at most n chara */, "i8", ALLOC_NORMAL);
__str9328=allocate([124,79,58,114,101,97,100,0] /* |O:read\00 */, "i8", ALLOC_NORMAL);
__str10329=allocate([105,110,116,101,103,101,114,32,97,114,103,117,109,101,110,116,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,39,37,115,39,0] /* integer argument exp */, "i8", ALLOC_NORMAL);
__str11330=allocate(1, "i8", ALLOC_NORMAL);
_stringio_readline_doc=allocate([82,101,97,100,32,117,110,116,105,108,32,110,101,119,108,105,110,101,32,111,114,32,69,79,70,46,10,10,82,101,116,117,114,110,115,32,97,110,32,101,109,112,116,121,32,115,116,114,105,110,103,32,105,102,32,69,79,70,32,105,115,32,104,105,116,32,105,109,109,101,100,105,97,116,101,108,121,46,10,0] /* Read until newline o */, "i8", ALLOC_NORMAL);
__str12331=allocate([124,79,58,114,101,97,100,108,105,110,101,0] /* |O:readline\00 */, "i8", ALLOC_NORMAL);
__str13332=allocate([114,101,97,100,108,105,110,101,40,41,32,115,104,111,117,108,100,32,104,97,118,101,32,114,101,116,117,114,110,101,100,32,97,110,32,115,116,114,32,111,98,106,101,99,116,44,32,110,111,116,32,39,37,46,50,48,48,115,39,0] /* readline() should ha */, "i8", ALLOC_NORMAL);
_stringio_truncate_doc=allocate([84,114,117,110,99,97,116,101,32,115,105,122,101,32,116,111,32,112,111,115,46,10,10,84,104,101,32,112,111,115,32,97,114,103,117,109,101,110,116,32,100,101,102,97,117,108,116,115,32,116,111,32,116,104,101,32,99,117,114,114,101,110,116,32,102,105,108,101,32,112,111,115,105,116,105,111,110,44,32,97,115,10,114,101,116,117,114,110,101,100,32,98,121,32,116,101,108,108,40,41,46,32,32,84,104,101,32,99,117,114,114,101,110,116,32,102,105,108,101,32,112,111,115,105,116,105,111,110,32,105,115,32,117,110,99,104,97,110,103,101,100,46,10,82,101,116,117,114,110,115,32,116,104,101,32,110,101,119,32,97,98,115,111,108,117,116,101,32,112,111,115,105,116,105,111,110,46,10,0] /* Truncate size to pos */, "i8", ALLOC_NORMAL);
__str14333=allocate([124,79,58,116,114,117,110,99,97,116,101,0] /* |O:truncate\00 */, "i8", ALLOC_NORMAL);
__str15334=allocate([78,101,103,97,116,105,118,101,32,115,105,122,101,32,118,97,108,117,101,32,37,122,100,0] /* Negative size value  */, "i8", ALLOC_NORMAL);
_stringio_seek_doc=allocate([67,104,97,110,103,101,32,115,116,114,101,97,109,32,112,111,115,105,116,105,111,110,46,10,10,83,101,101,107,32,116,111,32,99,104,97,114,97,99,116,101,114,32,111,102,102,115,101,116,32,112,111,115,32,114,101,108,97,116,105,118,101,32,116,111,32,112,111,115,105,116,105,111,110,32,105,110,100,105,99,97,116,101,100,32,98,121,32,119,104,101,110,99,101,58,10,32,32,32,32,48,32,32,83,116,97,114,116,32,111,102,32,115,116,114,101,97,109,32,40,116,104,101,32,100,101,102,97,117,108,116,41,46,32,32,112,111,115,32,115,104,111,117,108,100,32,98,101,32,62,61,32,48,59,10,32,32,32,32,49,32,32,67,117,114,114,101,110,116,32,112,111,115,105,116,105,111,110,32,45,32,112,111,115,32,109,117,115,116,32,98,101,32,48,59,10,32,32,32,32,50,32,32,69,110,100,32,111,102,32,115,116,114,101,97,109,32,45,32,112,111,115,32,109,117,115,116,32,98,101,32,48,46,10,82,101,116,117,114,110,115,32,116,104,101,32,110,101,119,32,97,98,115,111,108,117,116,101,32,112,111,115,105,116,105,111,110,46,10,0] /* Change stream positi */, "i8", ALLOC_NORMAL);
__str16335=allocate([79,124,105,58,115,101,101,107,0] /* O|i:seek\00 */, "i8", ALLOC_NORMAL);
__str17336=allocate([73,110,118,97,108,105,100,32,119,104,101,110,99,101,32,40,37,105,44,32,115,104,111,117,108,100,32,98,101,32,48,44,32,49,32,111,114,32,50,41,0] /* Invalid whence (%i,  */, "i8", ALLOC_NORMAL);
__str18337=allocate([78,101,103,97,116,105,118,101,32,115,101,101,107,32,112,111,115,105,116,105,111,110,32,37,122,100,0] /* Negative seek positi */, "i8", ALLOC_NORMAL);
__str19338=allocate([67,97,110,39,116,32,100,111,32,110,111,110,122,101,114,111,32,99,117,114,45,114,101,108,97,116,105,118,101,32,115,101,101,107,115,0] /* Can't do nonzero cur */, "i8", ALLOC_NORMAL);
_stringio_write_doc=allocate([87,114,105,116,101,32,115,116,114,105,110,103,32,116,111,32,102,105,108,101,46,10,10,82,101,116,117,114,110,115,32,116,104,101,32,110,117,109,98,101,114,32,111,102,32,99,104,97,114,97,99,116,101,114,115,32,119,114,105,116,116,101,110,44,32,119,104,105,99,104,32,105,115,32,97,108,119,97,121,115,32,101,113,117,97,108,32,116,111,10,116,104,101,32,108,101,110,103,116,104,32,111,102,32,116,104,101,32,115,116,114,105,110,103,46,10,0] /* Write string to file */, "i8", ALLOC_NORMAL);
__str20339=allocate([115,116,114,105,110,103,32,97,114,103,117,109,101,110,116,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,39,37,115,39,0] /* string argument expe */, "i8", ALLOC_NORMAL);
_stringio_close_doc=allocate([67,108,111,115,101,32,116,104,101,32,73,79,32,111,98,106,101,99,116,46,32,65,116,116,101,109,112,116,105,110,103,32,97,110,121,32,102,117,114,116,104,101,114,32,111,112,101,114,97,116,105,111,110,32,97,102,116,101,114,32,116,104,101,10,111,98,106,101,99,116,32,105,115,32,99,108,111,115,101,100,32,119,105,108,108,32,114,97,105,115,101,32,97,32,86,97,108,117,101,69,114,114,111,114,46,10,10,84,104,105,115,32,109,101,116,104,111,100,32,104,97,115,32,110,111,32,101,102,102,101,99,116,32,105,102,32,116,104,101,32,102,105,108,101,32,105,115,32,97,108,114,101,97,100,121,32,99,108,111,115,101,100,46,10,0] /* Close the IO object. */, "i8", ALLOC_NORMAL);
__str21340=allocate([103,45,62,103,99,46,103,99,95,114,101,102,115,32,33,61,32,40,45,50,41,0] /* g->gc.gc_refs != (-2 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___9021=allocate([115,116,114,105,110,103,105,111,95,100,101,97,108,108,111,99,0] /* stringio_dealloc\00 */, "i8", ALLOC_NORMAL);
__str22341=allocate([116,121,112,101,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,32,38,38,32,116,121,112,101,45,62,116,112,95,97,108,108,111,99,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* type != ((void _)0)  */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___9091=allocate([115,116,114,105,110,103,105,111,95,110,101,119,0] /* stringio_new\00 */, "i8", ALLOC_NORMAL);
__str23342=allocate([105,110,105,116,105,97,108,95,118,97,108,117,101,0] /* initial_value\00 */, "i8", ALLOC_NORMAL);
__str24343=allocate([110,101,119,108,105,110,101,0] /* newline\00 */, "i8", ALLOC_NORMAL);
__str25344=allocate([10,0] /* \0A\00 */, "i8", ALLOC_NORMAL);
__str26345=allocate([124,79,122,58,95,95,105,110,105,116,95,95,0] /* |Oz:__init__\00 */, "i8", ALLOC_NORMAL);
__str27346=allocate([105,108,108,101,103,97,108,32,110,101,119,108,105,110,101,32,118,97,108,117,101,58,32,37,115,0] /* illegal newline valu */, "i8", ALLOC_NORMAL);
__str28347=allocate([105,110,105,116,105,97,108,95,118,97,108,117,101,32,109,117,115,116,32,98,101,32,117,110,105,99,111,100,101,32,111,114,32,78,111,110,101,44,32,110,111,116,32,37,46,50,48,48,115,0] /* initial_value must b */, "i8", ALLOC_NORMAL);
__str29348=allocate([79,105,0] /* Oi\00 */, "i8", ALLOC_NORMAL);
__str30349=allocate([40,79,79,110,78,41,0] /* (OOnN)\00 */, "i8", ALLOC_NORMAL);
__str31350=allocate([115,116,97,116,101,32,33,61,32,40,40,118,111,105,100,32,42,41,48,41,0] /* state != ((void _)0) */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___9352=allocate([115,116,114,105,110,103,105,111,95,115,101,116,115,116,97,116,101,0] /* stringio_setstate\00 */, "i8", ALLOC_NORMAL);
__str32351=allocate([37,46,50,48,48,115,46,95,95,115,101,116,115,116,97,116,101,95,95,32,97,114,103,117,109,101,110,116,32,115,104,111,117,108,100,32,98,101,32,52,45,116,117,112,108,101,44,32,103,111,116,32,37,46,50,48,48,115,0] /* %.200s.__setstate__  */, "i8", ALLOC_NORMAL);
__str33352=allocate([116,104,105,114,100,32,105,116,101,109,32,111,102,32,115,116,97,116,101,32,109,117,115,116,32,98,101,32,97,110,32,105,110,116,101,103,101,114,44,32,103,111,116,32,37,46,50,48,48,115,0] /* third item of state  */, "i8", ALLOC_NORMAL);
__str34353=allocate([112,111,115,105,116,105,111,110,32,118,97,108,117,101,32,99,97,110,110,111,116,32,98,101,32,110,101,103,97,116,105,118,101,0] /* position value canno */, "i8", ALLOC_NORMAL);
__str35354=allocate([102,111,117,114,116,104,32,105,116,101,109,32,111,102,32,115,116,97,116,101,32,115,104,111,117,108,100,32,98,101,32,97,32,100,105,99,116,44,32,103,111,116,32,97,32,37,46,50,48,48,115,0] /* fourth item of state */, "i8", ALLOC_NORMAL);
__str36355=allocate([99,108,111,115,101,0] /* close\00 */, "i8", ALLOC_NORMAL);
__str37356=allocate([103,101,116,118,97,108,117,101,0] /* getvalue\00 */, "i8", ALLOC_NORMAL);
__str38357=allocate([114,101,97,100,0] /* read\00 */, "i8", ALLOC_NORMAL);
__str39358=allocate([114,101,97,100,108,105,110,101,0] /* readline\00 */, "i8", ALLOC_NORMAL);
__str40359=allocate([116,101,108,108,0] /* tell\00 */, "i8", ALLOC_NORMAL);
__str41360=allocate([116,114,117,110,99,97,116,101,0] /* truncate\00 */, "i8", ALLOC_NORMAL);
__str42361=allocate([115,101,101,107,0] /* seek\00 */, "i8", ALLOC_NORMAL);
__str43362=allocate([119,114,105,116,101,0] /* write\00 */, "i8", ALLOC_NORMAL);
__str44363=allocate([115,101,101,107,97,98,108,101,0] /* seekable\00 */, "i8", ALLOC_NORMAL);
__str45364=allocate([114,101,97,100,97,98,108,101,0] /* readable\00 */, "i8", ALLOC_NORMAL);
__str46365=allocate([119,114,105,116,97,98,108,101,0] /* writable\00 */, "i8", ALLOC_NORMAL);
__str47366=allocate([95,95,103,101,116,115,116,97,116,101,95,95,0] /* __getstate__\00 */, "i8", ALLOC_NORMAL);
__str48367=allocate([95,95,115,101,116,115,116,97,116,101,95,95,0] /* __setstate__\00 */, "i8", ALLOC_NORMAL);
_stringio_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str49368=allocate([99,108,111,115,101,100,0] /* closed\00 */, "i8", ALLOC_NORMAL);
__str50369=allocate([110,101,119,108,105,110,101,115,0] /* newlines\00 */, "i8", ALLOC_NORMAL);
__str51370=allocate([108,105,110,101,95,98,117,102,102,101,114,105,110,103,0] /* line_buffering\00 */, "i8", ALLOC_NORMAL);
_stringio_getset=allocate(80, ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str52371=allocate([95,105,111,46,83,116,114,105,110,103,73,79,0] /* _io.StringIO\00 */, "i8", ALLOC_NORMAL);
_PyStringIO_Type=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_textiobase_doc=allocate([66,97,115,101,32,99,108,97,115,115,32,102,111,114,32,116,101,120,116,32,73,47,79,46,10,10,84,104,105,115,32,99,108,97,115,115,32,112,114,111,118,105,100,101,115,32,97,32,99,104,97,114,97,99,116,101,114,32,97,110,100,32,108,105,110,101,32,98,97,115,101,100,32,105,110,116,101,114,102,97,99,101,32,116,111,32,115,116,114,101,97,109,10,73,47,79,46,32,84,104,101,114,101,32,105,115,32,110,111,32,114,101,97,100,105,110,116,111,32,109,101,116,104,111,100,32,98,101,99,97,117,115,101,32,80,121,116,104,111,110,39,115,32,99,104,97,114,97,99,116,101,114,32,115,116,114,105,110,103,115,10,97,114,101,32,105,109,109,117,116,97,98,108,101,46,32,84,104,101,114,101,32,105,115,32,110,111,32,112,117,98,108,105,99,32,99,111,110,115,116,114,117,99,116,111,114,46,10,0] /* Base class for text  */, "i8", ALLOC_NORMAL);
_textiobase_detach_doc=allocate([83,101,112,97,114,97,116,101,32,116,104,101,32,117,110,100,101,114,108,121,105,110,103,32,98,117,102,102,101,114,32,102,114,111,109,32,116,104,101,32,84,101,120,116,73,79,66,97,115,101,32,97,110,100,32,114,101,116,117,114,110,32,105,116,46,10,10,65,102,116,101,114,32,116,104,101,32,117,110,100,101,114,108,121,105,110,103,32,98,117,102,102,101,114,32,104,97,115,32,98,101,101,110,32,100,101,116,97,99,104,101,100,44,32,116,104,101,32,84,101,120,116,73,79,32,105,115,32,105,110,32,97,110,10,117,110,117,115,97,98,108,101,32,115,116,97,116,101,46,10,0] /* Separate the underly */, "i8", ALLOC_NORMAL);
_textiobase_read_doc=allocate([82,101,97,100,32,97,116,32,109,111,115,116,32,110,32,99,104,97,114,97,99,116,101,114,115,32,102,114,111,109,32,115,116,114,101,97,109,46,10,10,82,101,97,100,32,102,114,111,109,32,117,110,100,101,114,108,121,105,110,103,32,98,117,102,102,101,114,32,117,110,116,105,108,32,119,101,32,104,97,118,101,32,110,32,99,104,97,114,97,99,116,101,114,115,32,111,114,32,119,101,32,104,105,116,32,69,79,70,46,10,73,102,32,110,32,105,115,32,110,101,103,97,116,105,118,101,32,111,114,32,111,109,105,116,116,101,100,44,32,114,101,97,100,32,117,110,116,105,108,32,69,79,70,46,10,0] /* Read at most n chara */, "i8", ALLOC_NORMAL);
__str1375=allocate([114,101,97,100,0] /* read\00 */, "i8", ALLOC_NORMAL);
_textiobase_readline_doc=allocate([82,101,97,100,32,117,110,116,105,108,32,110,101,119,108,105,110,101,32,111,114,32,69,79,70,46,10,10,82,101,116,117,114,110,115,32,97,110,32,101,109,112,116,121,32,115,116,114,105,110,103,32,105,102,32,69,79,70,32,105,115,32,104,105,116,32,105,109,109,101,100,105,97,116,101,108,121,46,10,0] /* Read until newline o */, "i8", ALLOC_NORMAL);
__str2376=allocate([114,101,97,100,108,105,110,101,0] /* readline\00 */, "i8", ALLOC_NORMAL);
_textiobase_write_doc=allocate([87,114,105,116,101,32,115,116,114,105,110,103,32,116,111,32,115,116,114,101,97,109,46,10,82,101,116,117,114,110,115,32,116,104,101,32,110,117,109,98,101,114,32,111,102,32,99,104,97,114,97,99,116,101,114,115,32,119,114,105,116,116,101,110,32,40,119,104,105,99,104,32,105,115,32,97,108,119,97,121,115,32,101,113,117,97,108,32,116,111,10,116,104,101,32,108,101,110,103,116,104,32,111,102,32,116,104,101,32,115,116,114,105,110,103,41,46,10,0] /* Write string to stre */, "i8", ALLOC_NORMAL);
__str3377=allocate([119,114,105,116,101,0] /* write\00 */, "i8", ALLOC_NORMAL);
_textiobase_encoding_doc=allocate([69,110,99,111,100,105,110,103,32,111,102,32,116,104,101,32,116,101,120,116,32,115,116,114,101,97,109,46,10,10,83,117,98,99,108,97,115,115,101,115,32,115,104,111,117,108,100,32,111,118,101,114,114,105,100,101,46,10,0] /* Encoding of the text */, "i8", ALLOC_NORMAL);
_textiobase_newlines_doc=allocate([76,105,110,101,32,101,110,100,105,110,103,115,32,116,114,97,110,115,108,97,116,101,100,32,115,111,32,102,97,114,46,10,10,79,110,108,121,32,108,105,110,101,32,101,110,100,105,110,103,115,32,116,114,97,110,115,108,97,116,101,100,32,100,117,114,105,110,103,32,114,101,97,100,105,110,103,32,97,114,101,32,99,111,110,115,105,100,101,114,101,100,46,10,10,83,117,98,99,108,97,115,115,101,115,32,115,104,111,117,108,100,32,111,118,101,114,114,105,100,101,46,10,0] /* Line endings transla */, "i8", ALLOC_NORMAL);
_textiobase_errors_doc=allocate([84,104,101,32,101,114,114,111,114,32,115,101,116,116,105,110,103,32,111,102,32,116,104,101,32,100,101,99,111,100,101,114,32,111,114,32,101,110,99,111,100,101,114,46,10,10,83,117,98,99,108,97,115,115,101,115,32,115,104,111,117,108,100,32,111,118,101,114,114,105,100,101,46,10,0] /* The error setting of */, "i8", ALLOC_NORMAL);
_textiobase_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str4378=allocate([101,110,99,111,100,105,110,103,0] /* encoding\00 */, "i8", ALLOC_NORMAL);
__str5379=allocate([110,101,119,108,105,110,101,115,0] /* newlines\00 */, "i8", ALLOC_NORMAL);
__str6380=allocate([101,114,114,111,114,115,0] /* errors\00 */, "i8", ALLOC_NORMAL);
_textiobase_getset=allocate(80, ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str7381=allocate([95,105,111,46,95,84,101,120,116,73,79,66,97,115,101,0] /* _io._TextIOBase\00 */, "i8", ALLOC_NORMAL);
_PyTextIOBase_Type=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132587, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_incrementalnewlinedecoder_doc=allocate([67,111,100,101,99,32,117,115,101,100,32,119,104,101,110,32,114,101,97,100,105,110,103,32,97,32,102,105,108,101,32,105,110,32,117,110,105,118,101,114,115,97,108,32,110,101,119,108,105,110,101,115,32,109,111,100,101,46,32,32,73,116,32,119,114,97,112,115,10,97,110,111,116,104,101,114,32,105,110,99,114,101,109,101,110,116,97,108,32,100,101,99,111,100,101,114,44,32,116,114,97,110,115,108,97,116,105,110,103,32,92,114,92,110,32,97,110,100,32,92,114,32,105,110,116,111,32,92,110,46,32,32,73,116,32,97,108,115,111,10,114,101,99,111,114,100,115,32,116,104,101,32,116,121,112,101,115,32,111,102,32,110,101,119,108,105,110,101,115,32,101,110,99,111,117,110,116,101,114,101,100,46,32,32,87,104,101,110,32,117,115,101,100,32,119,105,116,104,10,116,114,97,110,115,108,97,116,101,61,70,97,108,115,101,44,32,105,116,32,101,110,115,117,114,101,115,32,116,104,97,116,32,116,104,101,32,110,101,119,108,105,110,101,32,115,101,113,117,101,110,99,101,32,105,115,32,114,101,116,117,114,110,101,100,32,105,110,10,111,110,101,32,112,105,101,99,101,46,32,87,104,101,110,32,117,115,101,100,32,119,105,116,104,32,100,101,99,111,100,101,114,61,78,111,110,101,44,32,105,116,32,101,120,112,101,99,116,115,32,117,110,105,99,111,100,101,32,115,116,114,105,110,103,115,32,97,115,10,100,101,99,111,100,101,32,105,110,112,117,116,32,97,110,100,32,116,114,97,110,115,108,97,116,101,115,32,110,101,119,108,105,110,101,115,32,119,105,116,104,111,117,116,32,102,105,114,115,116,32,105,110,118,111,107,105,110,103,32,97,110,32,101,120,116,101,114,110,97,108,10,100,101,99,111,100,101,114,46,10,0] /* Codec used when read */, "i8", ALLOC_NORMAL);
__str8383=allocate([100,101,99,111,100,101,114,0] /* decoder\00 */, "i8", ALLOC_NORMAL);
__str9384=allocate([116,114,97,110,115,108,97,116,101,0] /* translate\00 */, "i8", ALLOC_NORMAL);
__str10385=allocate([79,105,124,79,58,73,110,99,114,101,109,101,110,116,97,108,78,101,119,108,105,110,101,68,101,99,111,100,101,114,0] /* Oi|O:IncrementalNewl */, "i8", ALLOC_NORMAL);
__str11386=allocate([115,116,114,105,99,116,0] /* strict\00 */, "i8", ALLOC_NORMAL);
__str12387=allocate([73,110,99,114,101,109,101,110,116,97,108,78,101,119,108,105,110,101,68,101,99,111,100,101,114,46,95,95,105,110,105,116,95,95,32,110,111,116,32,99,97,108,108,101,100,0] /* IncrementalNewlineDe */, "i8", ALLOC_NORMAL);
__str13388=allocate([100,101,99,111,100,101,114,32,115,104,111,117,108,100,32,114,101,116,117,114,110,32,97,32,115,116,114,105,110,103,32,114,101,115,117,108,116,0] /* decoder should retur */, "i8", ALLOC_NORMAL);
__str14389=allocate([40,40,40,80,121,79,98,106,101,99,116,42,41,40,116,114,97,110,115,108,97,116,101,100,41,41,45,62,111,98,95,114,101,102,99,110,116,41,32,61,61,32,49,0] /* (((PyObject_)(transl */, "i8", ALLOC_NORMAL);
__str15390=allocate([46,46,47,99,112,121,116,104,111,110,47,77,111,100,117,108,101,115,47,95,105,111,47,116,101,120,116,105,111,46,99,0] /* ../cpython/Modules/_ */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___8596=allocate([95,80,121,73,110,99,114,101,109,101,110,116,97,108,78,101,119,108,105,110,101,68,101,99,111,100,101,114,95,100,101,99,111,100,101,0] /* _PyIncrementalNewlin */, "i8", ALLOC_NORMAL);
__str16391=allocate([105,110,112,117,116,0] /* input\00 */, "i8", ALLOC_NORMAL);
__str17392=allocate([102,105,110,97,108,0] /* final\00 */, "i8", ALLOC_NORMAL);
__str18393=allocate([79,124,105,58,73,110,99,114,101,109,101,110,116,97,108,78,101,119,108,105,110,101,68,101,99,111,100,101,114,0] /* O|i:IncrementalNewli */, "i8", ALLOC_NORMAL);
__str19394=allocate([40,79,75,41,0] /* (OK)\00 */, "i8", ALLOC_NORMAL);
__str20395=allocate(1, "i8", ALLOC_NORMAL);
__str21396=allocate([78,75,0] /* NK\00 */, "i8", ALLOC_NORMAL);
__str22397=allocate([115,101,116,115,116,97,116,101,0] /* setstate\00 */, "i8", ALLOC_NORMAL);
__str23398=allocate([40,40,79,75,41,41,0] /* ((OK))\00 */, "i8", ALLOC_NORMAL);
__str24399=allocate([13,0] /* \0D\00 */, "i8", ALLOC_NORMAL);
__str25400=allocate([10,0] /* \0A\00 */, "i8", ALLOC_NORMAL);
__str26401=allocate([13,10,0] /* \0D\0A\00 */, "i8", ALLOC_NORMAL);
__str27402=allocate([115,115,0] /* ss\00 */, "i8", ALLOC_NORMAL);
__str28403=allocate([115,115,115,0] /* sss\00 */, "i8", ALLOC_NORMAL);
__str29404=allocate([100,101,99,111,100,101,0] /* decode\00 */, "i8", ALLOC_NORMAL);
__str30405=allocate([103,101,116,115,116,97,116,101,0] /* getstate\00 */, "i8", ALLOC_NORMAL);
__str31406=allocate([114,101,115,101,116,0] /* reset\00 */, "i8", ALLOC_NORMAL);
_incrementalnewlinedecoder_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_incrementalnewlinedecoder_getset=allocate(40, ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str32407=allocate([95,105,111,46,73,110,99,114,101,109,101,110,116,97,108,78,101,119,108,105,110,101,68,101,99,111,100,101,114,0] /* _io.IncrementalNewli */, "i8", ALLOC_NORMAL);
_PyIncrementalNewlineDecoder_Type=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132587, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_textiowrapper_doc=allocate([67,104,97,114,97,99,116,101,114,32,97,110,100,32,108,105,110,101,32,98,97,115,101,100,32,108,97,121,101,114,32,111,118,101,114,32,97,32,66,117,102,102,101,114,101,100,73,79,66,97,115,101,32,111,98,106,101,99,116,44,32,98,117,102,102,101,114,46,10,10,101,110,99,111,100,105,110,103,32,103,105,118,101,115,32,116,104,101,32,110,97,109,101,32,111,102,32,116,104,101,32,101,110,99,111,100,105,110,103,32,116,104,97,116,32,116,104,101,32,115,116,114,101,97,109,32,119,105,108,108,32,98,101,10,100,101,99,111,100,101,100,32,111,114,32,101,110,99,111,100,101,100,32,119,105,116,104,46,32,73,116,32,100,101,102,97,117,108,116,115,32,116,111,32,108,111,99,97,108,101,46,103,101,116,112,114,101,102,101,114,114,101,100,101,110,99,111,100,105,110,103,46,10,10,101,114,114,111,114,115,32,100,101,116,101,114,109,105,110,101,115,32,116,104,101,32,115,116,114,105,99,116,110,101,115,115,32,111,102,32,101,110,99,111,100,105,110,103,32,97,110,100,32,100,101,99,111,100,105,110,103,32,40,115,101,101,32,116,104,101,10,99,111,100,101,99,115,46,114,101,103,105,115,116,101,114,41,32,97,110,100,32,100,101,102,97,117,108,116,115,32,116,111,32,34,115,116,114,105,99,116,34,46,10,10,110,101,119,108,105,110,101,32,99,97,110,32,98,101,32,78,111,110,101,44,32,39,39,44,32,39,92,110,39,44,32,39,92,114,39,44,32,111,114,32,39,92,114,92,110,39,46,32,32,73,116,32,99,111,110,116,114,111,108,115,32,116,104,101,10,104,97,110,100,108,105,110,103,32,111,102,32,108,105,110,101,32,101,110,100,105,110,103,115,46,32,73,102,32,105,116,32,105,115,32,78,111,110,101,44,32,117,110,105,118,101,114,115,97,108,32,110,101,119,108,105,110,101,115,32,105,115,10,101,110,97,98,108,101,100,46,32,32,87,105,116,104,32,116,104,105,115,32,101,110,97,98,108,101,100,44,32,111,110,32,105,110,112,117,116,44,32,116,104,101,32,108,105,110,101,115,32,101,110,100,105,110,103,115,32,39,92,110,39,44,32,39,92,114,39,44,10,111,114,32,39,92,114,92,110,39,32,97,114,101,32,116,114,97,110,115,108,97,116,101,100,32,116,111,32,39,92,110,39,32,98,101,102,111,114,101,32,98,101,105,110,103,32,114,101,116,117,114,110,101,100,32,116,111,32,116,104,101,10,99,97,108,108,101,114,46,32,67,111,110,118,101,114,115,101,108,121,44,32,111,110,32,111,117,116,112,117,116,44,32,39,92,110,39,32,105,115,32,116,114,97,110,115,108,97,116,101,100,32,116,111,32,116,104,101,32,115,121,115,116,101,109,10,100,101,102,97,117,108,116,32,108,105,110,101,32,115,101,112,101,114,97,116,111,114,44,32,111,115,46,108,105,110,101,115,101,112,46,32,73,102,32,110,101,119,108,105,110,101,32,105,115,32,97,110,121,32,111,116,104,101,114,32,111,102,32,105,116,115,10,108,101,103,97,108,32,118,97,108,117,101,115,44,32,116,104,97,116,32,110,101,119,108,105,110,101,32,98,101,99,111,109,101,115,32,116,104,101,32,110,101,119,108,105,110,101,32,119,104,101,110,32,116,104,101,32,102,105,108,101,32,105,115,32,114,101,97,100,10,97,110,100,32,105,116,32,105,115,32,114,101,116,117,114,110,101,100,32,117,110,116,114,97,110,115,108,97,116,101,100,46,32,79,110,32,111,117,116,112,117,116,44,32,39,92,110,39,32,105,115,32,99,111,110,118,101,114,116,101,100,32,116,111,32,116,104,101,10,110,101,119,108,105,110,101,46,10,10,73,102,32,108,105,110,101,95,98,117,102,102,101,114,105,110,103,32,105,115,32,84,114,117,101,44,32,97,32,99,97,108,108,32,116,111,32,102,108,117,115,104,32,105,115,32,105,109,112,108,105,101,100,32,119,104,101,110,32,97,32,99,97,108,108,32,116,111,10,119,114,105,116,101,32,99,111,110,116,97,105,110,115,32,97,32,110,101,119,108,105,110,101,32,99,104,97,114,97,99,116,101,114,46,0] /* Character and line b */, "i8", ALLOC_NORMAL);
_encodefuncs=allocate(80, ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0], ALLOC_NORMAL);
__str33409=allocate([97,115,99,105,105,0] /* ascii\00 */, "i8", ALLOC_NORMAL);
__str34410=allocate([105,115,111,56,56,53,57,45,49,0] /* iso8859-1\00 */, "i8", ALLOC_NORMAL);
__str35411=allocate([117,116,102,45,56,0] /* utf-8\00 */, "i8", ALLOC_NORMAL);
__str36412=allocate([117,116,102,45,49,54,45,98,101,0] /* utf-16-be\00 */, "i8", ALLOC_NORMAL);
__str37413=allocate([117,116,102,45,49,54,45,108,101,0] /* utf-16-le\00 */, "i8", ALLOC_NORMAL);
__str38414=allocate([117,116,102,45,49,54,0] /* utf-16\00 */, "i8", ALLOC_NORMAL);
__str39415=allocate([117,116,102,45,51,50,45,98,101,0] /* utf-32-be\00 */, "i8", ALLOC_NORMAL);
__str40416=allocate([117,116,102,45,51,50,45,108,101,0] /* utf-32-le\00 */, "i8", ALLOC_NORMAL);
__str41417=allocate([117,116,102,45,51,50,0] /* utf-32\00 */, "i8", ALLOC_NORMAL);
__str42418=allocate([98,117,102,102,101,114,0] /* buffer\00 */, "i8", ALLOC_NORMAL);
__str43419=allocate([110,101,119,108,105,110,101,0] /* newline\00 */, "i8", ALLOC_NORMAL);
__str44420=allocate([108,105,110,101,95,98,117,102,102,101,114,105,110,103,0] /* line_buffering\00 */, "i8", ALLOC_NORMAL);
__str45421=allocate([79,124,122,122,122,105,58,102,105,108,101,105,111,0] /* O|zzzi:fileio\00 */, "i8", ALLOC_NORMAL);
__str46422=allocate([105,108,108,101,103,97,108,32,110,101,119,108,105,110,101,32,118,97,108,117,101,58,32,37,115,0] /* illegal newline valu */, "i8", ALLOC_NORMAL);
__str47423=allocate([108,111,99,97,108,101,0] /* locale\00 */, "i8", ALLOC_NORMAL);
__str48424=allocate([103,101,116,112,114,101,102,101,114,114,101,100,101,110,99,111,100,105,110,103,0] /* getpreferredencoding */, "i8", ALLOC_NORMAL);
__str49425=allocate([99,111,117,108,100,32,110,111,116,32,100,101,116,101,114,109,105,110,101,32,100,101,102,97,117,108,116,32,101,110,99,111,100,105,110,103,0] /* could not determine  */, "i8", ALLOC_NORMAL);
__str50426=allocate([114,101,97,100,97,98,108,101,0] /* readable\00 */, "i8", ALLOC_NORMAL);
__str51427=allocate([79,105,0] /* Oi\00 */, "i8", ALLOC_NORMAL);
__str52428=allocate([119,114,105,116,97,98,108,101,0] /* writable\00 */, "i8", ALLOC_NORMAL);
__str53429=allocate([110,97,109,101,0] /* name\00 */, "i8", ALLOC_NORMAL);
__str55431=allocate([115,101,101,107,97,98,108,101,0] /* seekable\00 */, "i8", ALLOC_NORMAL);
__str56432=allocate([103,45,62,103,99,46,103,99,95,114,101,102,115,32,33,61,32,40,45,50,41,0] /* g->gc.gc_refs != (-2 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___9695=allocate([116,101,120,116,105,111,119,114,97,112,112,101,114,95,100,101,97,108,108,111,99,0] /* textiowrapper_deallo */, "i8", ALLOC_NORMAL);
__str57433=allocate([117,110,100,101,114,108,121,105,110,103,32,98,117,102,102,101,114,32,104,97,115,32,98,101,101,110,32,100,101,116,97,99,104,101,100,0] /* underlying buffer ha */, "i8", ALLOC_NORMAL);
__str58434=allocate([73,47,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,117,110,105,110,105,116,105,97,108,105,122,101,100,32,111,98,106,101,99,116,0] /* I/O operation on uni */, "i8", ALLOC_NORMAL);
__str59435=allocate([85,58,119,114,105,116,101,0] /* U:write\00 */, "i8", ALLOC_NORMAL);
__str60436=allocate([73,47,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,99,108,111,115,101,100,32,102,105,108,101,46,0] /* I/O operation on clo */, "i8", ALLOC_NORMAL);
__str61437=allocate([110,111,116,32,119,114,105,116,97,98,108,101,0] /* not writable\00 */, "i8", ALLOC_NORMAL);
__str62438=allocate([114,101,112,108,97,99,101,0] /* replace\00 */, "i8", ALLOC_NORMAL);
__str63439=allocate([97,118,97,105,108,32,62,61,32,48,0] /* avail >= 0\00 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___10189=allocate([116,101,120,116,105,111,119,114,97,112,112,101,114,95,103,101,116,95,100,101,99,111,100,101,100,95,99,104,97,114,115,0] /* textiowrapper_get_de */, "i8", ALLOC_NORMAL);
__str64440=allocate([110,111,116,32,114,101,97,100,97,98,108,101,0] /* not readable\00 */, "i8", ALLOC_NORMAL);
__str65441=allocate([40,79,79,41,0] /* (OO)\00 */, "i8", ALLOC_NORMAL);
__str66442=allocate([40,40,40,40,40,40,80,121,79,98,106,101,99,116,42,41,40,105,110,112,117,116,95,99,104,117,110,107,41,41,45,62,111,98,95,116,121,112,101,41,41,45,62,116,112,95,102,108,97,103,115,32,38,32,40,40,49,76,60,60,50,55,41,41,41,32,33,61,32,48,41,0] /* ((((((PyObject_)(inp */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___10233=allocate([116,101,120,116,105,111,119,114,97,112,112,101,114,95,114,101,97,100,95,99,104,117,110,107,0] /* textiowrapper_read_c */, "i8", ALLOC_NORMAL);
__str67443=allocate([40,40,40,40,40,40,80,121,79,98,106,101,99,116,42,41,40,110,101,120,116,95,105,110,112,117,116,41,41,45,62,111,98,95,116,121,112,101,41,41,45,62,116,112,95,102,108,97,103,115,32,38,32,40,40,49,76,60,60,50,55,41,41,41,32,33,61,32,48,41,0] /* ((((((PyObject_)(nex */, "i8", ALLOC_NORMAL);
__str68444=allocate([78,78,0] /* NN\00 */, "i8", ALLOC_NORMAL);
__str70446=allocate([115,101,108,102,45,62,100,101,99,111,100,101,100,95,99,104,97,114,115,95,117,115,101,100,32,61,61,32,48,0] /* self->decoded_chars_ */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___10735=allocate([95,116,101,120,116,105,111,119,114,97,112,112,101,114,95,114,101,97,100,108,105,110,101,0] /* _textiowrapper_readl */, "i8", ALLOC_NORMAL);
__str71447=allocate([124,79,58,114,101,97,100,108,105,110,101,0] /* |O:readline\00 */, "i8", ALLOC_NORMAL);
__str72448=allocate([105,110,116,101,103,101,114,32,97,114,103,117,109,101,110,116,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,39,37,46,50,48,48,115,39,0] /* integer argument exp */, "i8", ALLOC_NORMAL);
__str73449=allocate([40,40,115,105,41,41,0] /* ((si))\00 */, "i8", ALLOC_NORMAL);
__str74=allocate([79,124,105,58,115,101,101,107,0] /* O|i:seek\00 */, "i8", ALLOC_NORMAL);
__str75=allocate([117,110,100,101,114,108,121,105,110,103,32,115,116,114,101,97,109,32,105,115,32,110,111,116,32,115,101,101,107,97,98,108,101,0] /* underlying stream is */, "i8", ALLOC_NORMAL);
__str76=allocate([99,97,110,39,116,32,100,111,32,110,111,110,122,101,114,111,32,99,117,114,45,114,101,108,97,116,105,118,101,32,115,101,101,107,115,0] /* can't do nonzero cur */, "i8", ALLOC_NORMAL);
__str77=allocate([116,101,108,108,0] /* tell\00 */, "i8", ALLOC_NORMAL);
__str78=allocate([99,97,110,39,116,32,100,111,32,110,111,110,122,101,114,111,32,101,110,100,45,114,101,108,97,116,105,118,101,32,115,101,101,107,115,0] /* can't do nonzero end */, "i8", ALLOC_NORMAL);
__str79=allocate([102,108,117,115,104,0] /* flush\00 */, "i8", ALLOC_NORMAL);
__str80=allocate([115,101,101,107,0] /* seek\00 */, "i8", ALLOC_NORMAL);
__str81=allocate([105,105,0] /* ii\00 */, "i8", ALLOC_NORMAL);
__str82=allocate([105,110,118,97,108,105,100,32,119,104,101,110,99,101,32,40,37,100,44,32,115,104,111,117,108,100,32,98,101,32,48,44,32,49,32,111,114,32,50,41,0] /* invalid whence (%d,  */, "i8", ALLOC_NORMAL);
__str83=allocate([110,101,103,97,116,105,118,101,32,115,101,101,107,32,112,111,115,105,116,105,111,110,32,37,115,0] /* negative seek positi */, "i8", ALLOC_NORMAL);
__str84=allocate([105,0] /* i\00 */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___11188=allocate([116,101,120,116,105,111,119,114,97,112,112,101,114,95,115,101,101,107,0] /* textiowrapper_seek\0 */, "i8", ALLOC_NORMAL);
__str85=allocate([105,78,0] /* iN\00 */, "i8", ALLOC_NORMAL);
__str86=allocate([99,97,110,39,116,32,114,101,115,116,111,114,101,32,108,111,103,105,99,97,108,32,102,105,108,101,32,112,111,115,105,116,105,111,110,0] /* can't restore logica */, "i8", ALLOC_NORMAL);
__str87=allocate([105,115,0] /* is\00 */, "i8", ALLOC_NORMAL);
__str88=allocate([116,101,108,108,105,110,103,32,112,111,115,105,116,105,111,110,32,100,105,115,97,98,108,101,100,32,98,121,32,110,101,120,116,40,41,32,99,97,108,108,0] /* telling position dis */, "i8", ALLOC_NORMAL);
__str89=allocate([115,101,108,102,45,62,100,101,99,111,100,101,100,95,99,104,97,114,115,32,61,61,32,40,40,118,111,105,100,32,42,41,48,41,32,124,124,32,80,121,85,110,105,99,111,100,101,85,67,83,50,95,71,101,116,83,105,122,101,40,115,101,108,102,45,62,100,101,99,111,100,101,100,95,99,104,97,114,115,41,32,61,61,32,48,0] /* self->decoded_chars  */, "i8", ALLOC_NORMAL);
___PRETTY_FUNCTION___11475=allocate([116,101,120,116,105,111,119,114,97,112,112,101,114,95,116,101,108,108,0] /* textiowrapper_tell\0 */, "i8", ALLOC_NORMAL);
__str90=allocate([40,105,79,41,0] /* (iO)\00 */, "i8", ALLOC_NORMAL);
__str91=allocate([115,35,0] /* s#\00 */, "i8", ALLOC_NORMAL);
__str92=allocate([40,40,40,40,40,40,80,121,79,98,106,101,99,116,42,41,40,100,101,99,111,100,101,100,41,41,45,62,111,98,95,116,121,112,101,41,41,45,62,116,112,95,102,108,97,103,115,32,38,32,40,40,49,76,60,60,50,56,41,41,41,32,33,61,32,48,41,0] /* ((((((PyObject_)(dec */, "i8", ALLOC_NORMAL);
__str93=allocate([40,115,35,105,41,0] /* (s#i)\00 */, "i8", ALLOC_NORMAL);
__str94=allocate([115,105,0] /* si\00 */, "i8", ALLOC_NORMAL);
__str95=allocate([99,97,110,39,116,32,114,101,99,111,110,115,116,114,117,99,116,32,108,111,103,105,99,97,108,32,102,105,108,101,32,112,111,115,105,116,105,111,110,0] /* can't reconstruct lo */, "i8", ALLOC_NORMAL);
__str96=allocate([40,79,41,0] /* (O)\00 */, "i8", ALLOC_NORMAL);
__str97=allocate([124,79,58,116,114,117,110,99,97,116,101,0] /* |O:truncate\00 */, "i8", ALLOC_NORMAL);
__str98=allocate([60,95,105,111,46,84,101,120,116,73,79,87,114,97,112,112,101,114,32,101,110,99,111,100,105,110,103,61,37,115,62,0] /* <_io.TextIOWrapper e */, "i8", ALLOC_NORMAL);
__str99=allocate([60,95,105,111,46,84,101,120,116,73,79,87,114,97,112,112,101,114,32,110,97,109,101,61,37,115,32,101,110,99,111,100,105,110,103,61,37,115,62,0] /* <_io.TextIOWrapper n */, "i8", ALLOC_NORMAL);
__str100=allocate([102,105,108,101,110,111,0] /* fileno\00 */, "i8", ALLOC_NORMAL);
__str101=allocate([105,115,97,116,116,121,0] /* isatty\00 */, "i8", ALLOC_NORMAL);
__str102=allocate([99,108,111,115,101,0] /* close\00 */, "i8", ALLOC_NORMAL);
__str103=allocate([114,101,97,100,108,105,110,101,40,41,32,115,104,111,117,108,100,32,104,97,118,101,32,114,101,116,117,114,110,101,100,32,97,110,32,115,116,114,32,111,98,106,101,99,116,44,32,110,111,116,32,39,37,46,50,48,48,115,39,0] /* readline() should ha */, "i8", ALLOC_NORMAL);
__str104=allocate([97,32,115,116,114,105,99,116,108,121,32,112,111,115,105,116,105,118,101,32,105,110,116,101,103,101,114,32,105,115,32,114,101,113,117,105,114,101,100,0] /* a strictly positive  */, "i8", ALLOC_NORMAL);
__str105=allocate([116,114,117,110,99,97,116,101,0] /* truncate\00 */, "i8", ALLOC_NORMAL);
_textiowrapper_methods=allocate([0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
_textiowrapper_members=allocate([0, 0, 0, 0, 6, 0, 0, 0, 24, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 20, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 48, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str106=allocate([99,108,111,115,101,100,0] /* closed\00 */, "i8", ALLOC_NORMAL);
__str107=allocate([95,67,72,85,78,75,95,83,73,90,69,0] /* _CHUNK_SIZE\00 */, "i8", ALLOC_NORMAL);
_textiowrapper_getset=allocate(120, ["i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, i8*)*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i8*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
__str108=allocate([95,105,111,46,84,101,120,116,73,79,87,114,97,112,112,101,114,0] /* _io.TextIOWrapper\00 */, "i8", ALLOC_NORMAL);
_PyTextIOWrapper_Type=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148971, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"%struct._typeobject*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"void (%struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.FILE*, i32)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, i8*)*",0,0,0,"i32 (%struct.PyObject*, i8*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyNumberMethods*",0,0,0,"%struct.PySequenceMethods*",0,0,0,"%struct.PyMappingMethods*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyBufferProcs*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32 (%struct.PyObject*, i32 (%struct.PyObject*, i8*)*, i8*)*",0,0,0,"i32 (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, i32)*",0,0,0,"i32",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct.PyObject*)*",0,0,0,"%struct.PyMethodDef*",0,0,0,"%struct.PyMemberDef*",0,0,0,"%struct.PyGetSetDef*",0,0,0,"%struct._typeobject*",0,0,0,"%struct.PyObject*",0,0,0,"%struct.PyObject* (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i32",0,0,0,"i32 (%struct.PyObject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, i32)*",0,0,0,"%struct.PyObject* (%struct._typeobject*, %struct.PyObject*, %struct.PyObject*)*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"], ALLOC_NORMAL);
HEAP[_bufferediobase_methods]=__str4;
HEAP[_bufferediobase_methods+4]=(FUNCTION_TABLE_OFFSET + 4);
HEAP[_bufferediobase_methods+12]=_bufferediobase_detach_doc;
HEAP[_bufferediobase_methods+16]=__str1;
HEAP[_bufferediobase_methods+20]=(FUNCTION_TABLE_OFFSET + 6);
HEAP[_bufferediobase_methods+28]=_bufferediobase_read_doc;
HEAP[_bufferediobase_methods+32]=__str5;
HEAP[_bufferediobase_methods+36]=(FUNCTION_TABLE_OFFSET + 8);
HEAP[_bufferediobase_methods+44]=_bufferediobase_read1_doc;
HEAP[_bufferediobase_methods+48]=__str7;
HEAP[_bufferediobase_methods+52]=(FUNCTION_TABLE_OFFSET + 10);
HEAP[_bufferediobase_methods+64]=__str6;
HEAP[_bufferediobase_methods+68]=(FUNCTION_TABLE_OFFSET + 12);
HEAP[_bufferediobase_methods+76]=_bufferediobase_write_doc;
HEAP[_PyBufferedIOBase_Type+12]=__str8;
HEAP[_PyBufferedIOBase_Type+88]=_bufferediobase_doc;
HEAP[_PyBufferedIOBase_Type+116]=_bufferediobase_methods;
HEAP[_PyBufferedIOBase_Type+128]=_PyIOBase_Type;
HEAP[_bufferedreader_methods]=__str4;
HEAP[_bufferedreader_methods+4]=(FUNCTION_TABLE_OFFSET + 14);
HEAP[_bufferedreader_methods+16]=__str40;
HEAP[_bufferedreader_methods+20]=(FUNCTION_TABLE_OFFSET + 16);
HEAP[_bufferedreader_methods+32]=__str41;
HEAP[_bufferedreader_methods+36]=(FUNCTION_TABLE_OFFSET + 18);
HEAP[_bufferedreader_methods+48]=__str42;
HEAP[_bufferedreader_methods+52]=(FUNCTION_TABLE_OFFSET + 20);
HEAP[_bufferedreader_methods+64]=__str43;
HEAP[_bufferedreader_methods+68]=(FUNCTION_TABLE_OFFSET + 22);
HEAP[_bufferedreader_methods+80]=__str44;
HEAP[_bufferedreader_methods+84]=(FUNCTION_TABLE_OFFSET + 24);
HEAP[_bufferedreader_methods+96]=__str45;
HEAP[_bufferedreader_methods+100]=(FUNCTION_TABLE_OFFSET + 26);
HEAP[_bufferedreader_methods+112]=__str46;
HEAP[_bufferedreader_methods+116]=(FUNCTION_TABLE_OFFSET + 28);
HEAP[_bufferedreader_methods+128]=__str1;
HEAP[_bufferedreader_methods+132]=(FUNCTION_TABLE_OFFSET + 30);
HEAP[_bufferedreader_methods+144]=__str47;
HEAP[_bufferedreader_methods+148]=(FUNCTION_TABLE_OFFSET + 32);
HEAP[_bufferedreader_methods+160]=__str5;
HEAP[_bufferedreader_methods+164]=(FUNCTION_TABLE_OFFSET + 34);
HEAP[_bufferedreader_methods+176]=__str48;
HEAP[_bufferedreader_methods+180]=(FUNCTION_TABLE_OFFSET + 36);
HEAP[_bufferedreader_methods+192]=__str49;
HEAP[_bufferedreader_methods+196]=(FUNCTION_TABLE_OFFSET + 38);
HEAP[_bufferedreader_methods+208]=__str50;
HEAP[_bufferedreader_methods+212]=(FUNCTION_TABLE_OFFSET + 40);
HEAP[_bufferedreader_methods+224]=__str51;
HEAP[_bufferedreader_methods+228]=(FUNCTION_TABLE_OFFSET + 42);
HEAP[_bufferedreader_members]=__str35;
HEAP[_bufferedreader_getset]=__str52;
HEAP[_bufferedreader_getset+4]=(FUNCTION_TABLE_OFFSET + 44);
HEAP[_bufferedreader_getset+20]=__str13;
HEAP[_bufferedreader_getset+24]=(FUNCTION_TABLE_OFFSET + 46);
HEAP[_bufferedreader_getset+40]=__str14;
HEAP[_bufferedreader_getset+44]=(FUNCTION_TABLE_OFFSET + 48);
HEAP[_PyBufferedReader_Type+12]=__str53;
HEAP[_PyBufferedReader_Type+24]=(FUNCTION_TABLE_OFFSET + 50);
HEAP[_PyBufferedReader_Type+44]=(FUNCTION_TABLE_OFFSET + 52);
HEAP[_PyBufferedReader_Type+88]=_bufferedreader_doc;
HEAP[_PyBufferedReader_Type+92]=(FUNCTION_TABLE_OFFSET + 54);
HEAP[_PyBufferedReader_Type+96]=(FUNCTION_TABLE_OFFSET + 56);
HEAP[_PyBufferedReader_Type+112]=(FUNCTION_TABLE_OFFSET + 58);
HEAP[_PyBufferedReader_Type+116]=_bufferedreader_methods;
HEAP[_PyBufferedReader_Type+120]=_bufferedreader_members;
HEAP[_PyBufferedReader_Type+124]=_bufferedreader_getset;
HEAP[_PyBufferedReader_Type+148]=(FUNCTION_TABLE_OFFSET + 60);
HEAP[_PyBufferedReader_Type+156]=(FUNCTION_TABLE_OFFSET + 62);
HEAP[_bufferedwriter_methods]=__str41;
HEAP[_bufferedwriter_methods+4]=(FUNCTION_TABLE_OFFSET + 18);
HEAP[_bufferedwriter_methods+16]=__str4;
HEAP[_bufferedwriter_methods+20]=(FUNCTION_TABLE_OFFSET + 14);
HEAP[_bufferedwriter_methods+32]=__str42;
HEAP[_bufferedwriter_methods+36]=(FUNCTION_TABLE_OFFSET + 20);
HEAP[_bufferedwriter_methods+48]=__str43;
HEAP[_bufferedwriter_methods+52]=(FUNCTION_TABLE_OFFSET + 22);
HEAP[_bufferedwriter_methods+64]=__str44;
HEAP[_bufferedwriter_methods+68]=(FUNCTION_TABLE_OFFSET + 24);
HEAP[_bufferedwriter_methods+80]=__str45;
HEAP[_bufferedwriter_methods+84]=(FUNCTION_TABLE_OFFSET + 26);
HEAP[_bufferedwriter_methods+96]=__str46;
HEAP[_bufferedwriter_methods+100]=(FUNCTION_TABLE_OFFSET + 28);
HEAP[_bufferedwriter_methods+112]=__str6;
HEAP[_bufferedwriter_methods+116]=(FUNCTION_TABLE_OFFSET + 64);
HEAP[_bufferedwriter_methods+128]=__str51;
HEAP[_bufferedwriter_methods+132]=(FUNCTION_TABLE_OFFSET + 42);
HEAP[_bufferedwriter_methods+144]=__str40;
HEAP[_bufferedwriter_methods+148]=(FUNCTION_TABLE_OFFSET + 66);
HEAP[_bufferedwriter_methods+160]=__str49;
HEAP[_bufferedwriter_methods+164]=(FUNCTION_TABLE_OFFSET + 38);
HEAP[_bufferedwriter_methods+176]=__str50;
HEAP[_bufferedwriter_methods+180]=(FUNCTION_TABLE_OFFSET + 40);
HEAP[_bufferedwriter_members]=__str35;
HEAP[_bufferedwriter_getset]=__str52;
HEAP[_bufferedwriter_getset+4]=(FUNCTION_TABLE_OFFSET + 44);
HEAP[_bufferedwriter_getset+20]=__str13;
HEAP[_bufferedwriter_getset+24]=(FUNCTION_TABLE_OFFSET + 46);
HEAP[_bufferedwriter_getset+40]=__str14;
HEAP[_bufferedwriter_getset+44]=(FUNCTION_TABLE_OFFSET + 48);
HEAP[_PyBufferedWriter_Type+12]=__str61;
HEAP[_PyBufferedWriter_Type+24]=(FUNCTION_TABLE_OFFSET + 50);
HEAP[_PyBufferedWriter_Type+44]=(FUNCTION_TABLE_OFFSET + 52);
HEAP[_PyBufferedWriter_Type+88]=_bufferedwriter_doc;
HEAP[_PyBufferedWriter_Type+92]=(FUNCTION_TABLE_OFFSET + 54);
HEAP[_PyBufferedWriter_Type+96]=(FUNCTION_TABLE_OFFSET + 56);
HEAP[_PyBufferedWriter_Type+116]=_bufferedwriter_methods;
HEAP[_PyBufferedWriter_Type+120]=_bufferedwriter_members;
HEAP[_PyBufferedWriter_Type+124]=_bufferedwriter_getset;
HEAP[_PyBufferedWriter_Type+148]=(FUNCTION_TABLE_OFFSET + 68);
HEAP[_PyBufferedWriter_Type+156]=(FUNCTION_TABLE_OFFSET + 62);
HEAP[_bufferedrwpair_methods]=__str1;
HEAP[_bufferedrwpair_methods+4]=(FUNCTION_TABLE_OFFSET + 70);
HEAP[_bufferedrwpair_methods+16]=__str47;
HEAP[_bufferedrwpair_methods+20]=(FUNCTION_TABLE_OFFSET + 72);
HEAP[_bufferedrwpair_methods+32]=__str5;
HEAP[_bufferedrwpair_methods+36]=(FUNCTION_TABLE_OFFSET + 74);
HEAP[_bufferedrwpair_methods+48]=__str7;
HEAP[_bufferedrwpair_methods+52]=(FUNCTION_TABLE_OFFSET + 76);
HEAP[_bufferedrwpair_methods+64]=__str6;
HEAP[_bufferedrwpair_methods+68]=(FUNCTION_TABLE_OFFSET + 78);
HEAP[_bufferedrwpair_methods+80]=__str40;
HEAP[_bufferedrwpair_methods+84]=(FUNCTION_TABLE_OFFSET + 80);
HEAP[_bufferedrwpair_methods+96]=__str43;
HEAP[_bufferedrwpair_methods+100]=(FUNCTION_TABLE_OFFSET + 82);
HEAP[_bufferedrwpair_methods+112]=__str44;
HEAP[_bufferedrwpair_methods+116]=(FUNCTION_TABLE_OFFSET + 84);
HEAP[_bufferedrwpair_methods+128]=__str41;
HEAP[_bufferedrwpair_methods+132]=(FUNCTION_TABLE_OFFSET + 86);
HEAP[_bufferedrwpair_methods+144]=__str46;
HEAP[_bufferedrwpair_methods+148]=(FUNCTION_TABLE_OFFSET + 88);
HEAP[_bufferedrwpair_getset]=__str52;
HEAP[_bufferedrwpair_getset+4]=(FUNCTION_TABLE_OFFSET + 90);
HEAP[_PyBufferedRWPair_Type+12]=__str64;
HEAP[_PyBufferedRWPair_Type+24]=(FUNCTION_TABLE_OFFSET + 92);
HEAP[_PyBufferedRWPair_Type+88]=_bufferedrwpair_doc;
HEAP[_PyBufferedRWPair_Type+92]=(FUNCTION_TABLE_OFFSET + 94);
HEAP[_PyBufferedRWPair_Type+96]=(FUNCTION_TABLE_OFFSET + 96);
HEAP[_PyBufferedRWPair_Type+116]=_bufferedrwpair_methods;
HEAP[_PyBufferedRWPair_Type+124]=_bufferedrwpair_getset;
HEAP[_PyBufferedRWPair_Type+148]=(FUNCTION_TABLE_OFFSET + 98);
HEAP[_PyBufferedRWPair_Type+156]=(FUNCTION_TABLE_OFFSET + 62);
HEAP[_bufferedrandom_methods]=__str41;
HEAP[_bufferedrandom_methods+4]=(FUNCTION_TABLE_OFFSET + 18);
HEAP[_bufferedrandom_methods+16]=__str4;
HEAP[_bufferedrandom_methods+20]=(FUNCTION_TABLE_OFFSET + 14);
HEAP[_bufferedrandom_methods+32]=__str42;
HEAP[_bufferedrandom_methods+36]=(FUNCTION_TABLE_OFFSET + 20);
HEAP[_bufferedrandom_methods+48]=__str43;
HEAP[_bufferedrandom_methods+52]=(FUNCTION_TABLE_OFFSET + 22);
HEAP[_bufferedrandom_methods+64]=__str44;
HEAP[_bufferedrandom_methods+68]=(FUNCTION_TABLE_OFFSET + 24);
HEAP[_bufferedrandom_methods+80]=__str45;
HEAP[_bufferedrandom_methods+84]=(FUNCTION_TABLE_OFFSET + 26);
HEAP[_bufferedrandom_methods+96]=__str46;
HEAP[_bufferedrandom_methods+100]=(FUNCTION_TABLE_OFFSET + 28);
HEAP[_bufferedrandom_methods+112]=__str40;
HEAP[_bufferedrandom_methods+116]=(FUNCTION_TABLE_OFFSET + 66);
HEAP[_bufferedrandom_methods+128]=__str49;
HEAP[_bufferedrandom_methods+132]=(FUNCTION_TABLE_OFFSET + 38);
HEAP[_bufferedrandom_methods+144]=__str50;
HEAP[_bufferedrandom_methods+148]=(FUNCTION_TABLE_OFFSET + 40);
HEAP[_bufferedrandom_methods+160]=__str51;
HEAP[_bufferedrandom_methods+164]=(FUNCTION_TABLE_OFFSET + 42);
HEAP[_bufferedrandom_methods+176]=__str1;
HEAP[_bufferedrandom_methods+180]=(FUNCTION_TABLE_OFFSET + 30);
HEAP[_bufferedrandom_methods+192]=__str5;
HEAP[_bufferedrandom_methods+196]=(FUNCTION_TABLE_OFFSET + 34);
HEAP[_bufferedrandom_methods+208]=__str7;
HEAP[_bufferedrandom_methods+212]=(FUNCTION_TABLE_OFFSET + 100);
HEAP[_bufferedrandom_methods+224]=__str48;
HEAP[_bufferedrandom_methods+228]=(FUNCTION_TABLE_OFFSET + 36);
HEAP[_bufferedrandom_methods+240]=__str47;
HEAP[_bufferedrandom_methods+244]=(FUNCTION_TABLE_OFFSET + 32);
HEAP[_bufferedrandom_methods+256]=__str6;
HEAP[_bufferedrandom_methods+260]=(FUNCTION_TABLE_OFFSET + 64);
HEAP[_bufferedrandom_members]=__str35;
HEAP[_bufferedrandom_getset]=__str52;
HEAP[_bufferedrandom_getset+4]=(FUNCTION_TABLE_OFFSET + 44);
HEAP[_bufferedrandom_getset+20]=__str13;
HEAP[_bufferedrandom_getset+24]=(FUNCTION_TABLE_OFFSET + 46);
HEAP[_bufferedrandom_getset+40]=__str14;
HEAP[_bufferedrandom_getset+44]=(FUNCTION_TABLE_OFFSET + 48);
HEAP[_PyBufferedRandom_Type+12]=__str65;
HEAP[_PyBufferedRandom_Type+24]=(FUNCTION_TABLE_OFFSET + 50);
HEAP[_PyBufferedRandom_Type+44]=(FUNCTION_TABLE_OFFSET + 52);
HEAP[_PyBufferedRandom_Type+88]=_bufferedrandom_doc;
HEAP[_PyBufferedRandom_Type+92]=(FUNCTION_TABLE_OFFSET + 54);
HEAP[_PyBufferedRandom_Type+96]=(FUNCTION_TABLE_OFFSET + 56);
HEAP[_PyBufferedRandom_Type+112]=(FUNCTION_TABLE_OFFSET + 58);
HEAP[_PyBufferedRandom_Type+116]=_bufferedrandom_methods;
HEAP[_PyBufferedRandom_Type+120]=_bufferedrandom_members;
HEAP[_PyBufferedRandom_Type+124]=_bufferedrandom_getset;
HEAP[_PyBufferedRandom_Type+148]=(FUNCTION_TABLE_OFFSET + 102);
HEAP[_PyBufferedRandom_Type+156]=(FUNCTION_TABLE_OFFSET + 62);
HEAP[_bytesio_getsetlist]=__str52;
HEAP[_bytesio_getsetlist+4]=(FUNCTION_TABLE_OFFSET + 104);
HEAP[_bytesio_getsetlist+12]=__str3096;
HEAP[_bytesio_methods]=__str43;
HEAP[_bytesio_methods+4]=(FUNCTION_TABLE_OFFSET + 106);
HEAP[_bytesio_methods+16]=__str42;
HEAP[_bytesio_methods+20]=(FUNCTION_TABLE_OFFSET + 106);
HEAP[_bytesio_methods+32]=__str44;
HEAP[_bytesio_methods+36]=(FUNCTION_TABLE_OFFSET + 106);
HEAP[_bytesio_methods+48]=__str41;
HEAP[_bytesio_methods+52]=(FUNCTION_TABLE_OFFSET + 108);
HEAP[_bytesio_methods+60]=_close_doc;
HEAP[_bytesio_methods+64]=__str40;
HEAP[_bytesio_methods+68]=(FUNCTION_TABLE_OFFSET + 110);
HEAP[_bytesio_methods+76]=_flush_doc;
HEAP[_bytesio_methods+80]=__str46;
HEAP[_bytesio_methods+84]=(FUNCTION_TABLE_OFFSET + 112);
HEAP[_bytesio_methods+92]=_isatty_doc;
HEAP[_bytesio_methods+96]=__str50;
HEAP[_bytesio_methods+100]=(FUNCTION_TABLE_OFFSET + 114);
HEAP[_bytesio_methods+108]=_tell_doc;
HEAP[_bytesio_methods+112]=__str6;
HEAP[_bytesio_methods+116]=(FUNCTION_TABLE_OFFSET + 116);
HEAP[_bytesio_methods+124]=_write_doc;
HEAP[_bytesio_methods+128]=__str39105;
HEAP[_bytesio_methods+132]=(FUNCTION_TABLE_OFFSET + 118);
HEAP[_bytesio_methods+140]=_writelines_doc;
HEAP[_bytesio_methods+144]=__str5;
HEAP[_bytesio_methods+148]=(FUNCTION_TABLE_OFFSET + 120);
HEAP[_bytesio_methods+156]=_read1_doc;
HEAP[_bytesio_methods+160]=__str7;
HEAP[_bytesio_methods+164]=(FUNCTION_TABLE_OFFSET + 122);
HEAP[_bytesio_methods+172]=_readinto_doc;
HEAP[_bytesio_methods+176]=__str48;
HEAP[_bytesio_methods+180]=(FUNCTION_TABLE_OFFSET + 124);
HEAP[_bytesio_methods+188]=_readline_doc;
HEAP[_bytesio_methods+192]=__str43109;
HEAP[_bytesio_methods+196]=(FUNCTION_TABLE_OFFSET + 126);
HEAP[_bytesio_methods+204]=_readlines_doc;
HEAP[_bytesio_methods+208]=__str1;
HEAP[_bytesio_methods+212]=(FUNCTION_TABLE_OFFSET + 128);
HEAP[_bytesio_methods+220]=_read_doc;
HEAP[_bytesio_methods+224]=__str45111;
HEAP[_bytesio_methods+228]=(FUNCTION_TABLE_OFFSET + 130);
HEAP[_bytesio_methods+236]=_getval_doc;
HEAP[_bytesio_methods+240]=__str49;
HEAP[_bytesio_methods+244]=(FUNCTION_TABLE_OFFSET + 132);
HEAP[_bytesio_methods+252]=_seek_doc;
HEAP[_bytesio_methods+256]=__str51;
HEAP[_bytesio_methods+260]=(FUNCTION_TABLE_OFFSET + 134);
HEAP[_bytesio_methods+268]=_truncate_doc;
HEAP[_bytesio_methods+272]=__str48114;
HEAP[_bytesio_methods+276]=(FUNCTION_TABLE_OFFSET + 136);
HEAP[_bytesio_methods+288]=__str49115;
HEAP[_bytesio_methods+292]=(FUNCTION_TABLE_OFFSET + 138);
HEAP[_PyBytesIO_Type+12]=__str50116;
HEAP[_PyBytesIO_Type+24]=(FUNCTION_TABLE_OFFSET + 140);
HEAP[_PyBytesIO_Type+88]=_bytesio_doc;
HEAP[_PyBytesIO_Type+92]=(FUNCTION_TABLE_OFFSET + 142);
HEAP[_PyBytesIO_Type+96]=(FUNCTION_TABLE_OFFSET + 144);
HEAP[_PyBytesIO_Type+108]=(FUNCTION_TABLE_OFFSET + 146);
HEAP[_PyBytesIO_Type+112]=(FUNCTION_TABLE_OFFSET + 148);
HEAP[_PyBytesIO_Type+116]=_bytesio_methods;
HEAP[_PyBytesIO_Type+124]=_bytesio_getsetlist;
HEAP[_PyBytesIO_Type+148]=(FUNCTION_TABLE_OFFSET + 150);
HEAP[_PyBytesIO_Type+156]=(FUNCTION_TABLE_OFFSET + 152);
HEAP[_kwlist_8657]=__str9126;
HEAP[_kwlist_8657+4]=__str14;
HEAP[_kwlist_8657+8]=__str11128;
HEAP[_fileio_methods]=__str37162;
HEAP[_fileio_methods+4]=(FUNCTION_TABLE_OFFSET + 154);
HEAP[_fileio_methods+12]=_read_doc154;
HEAP[_fileio_methods+16]=__str38163;
HEAP[_fileio_methods+20]=(FUNCTION_TABLE_OFFSET + 156);
HEAP[_fileio_methods+28]=_readall_doc;
HEAP[_fileio_methods+32]=__str39164;
HEAP[_fileio_methods+36]=(FUNCTION_TABLE_OFFSET + 158);
HEAP[_fileio_methods+44]=_readinto_doc159;
HEAP[_fileio_methods+48]=__str40165;
HEAP[_fileio_methods+52]=(FUNCTION_TABLE_OFFSET + 160);
HEAP[_fileio_methods+60]=_write_doc155;
HEAP[_fileio_methods+64]=__str41166;
HEAP[_fileio_methods+68]=(FUNCTION_TABLE_OFFSET + 162);
HEAP[_fileio_methods+76]=_seek_doc156;
HEAP[_fileio_methods+80]=__str42167;
HEAP[_fileio_methods+84]=(FUNCTION_TABLE_OFFSET + 164);
HEAP[_fileio_methods+92]=_tell_doc158;
HEAP[_fileio_methods+96]=__str43168;
HEAP[_fileio_methods+100]=(FUNCTION_TABLE_OFFSET + 166);
HEAP[_fileio_methods+108]=_truncate_doc157;
HEAP[_fileio_methods+112]=__str117;
HEAP[_fileio_methods+116]=(FUNCTION_TABLE_OFFSET + 168);
HEAP[_fileio_methods+124]=_close_doc160;
HEAP[_fileio_methods+128]=__str44169;
HEAP[_fileio_methods+132]=(FUNCTION_TABLE_OFFSET + 170);
HEAP[_fileio_methods+140]=_seekable_doc;
HEAP[_fileio_methods+144]=__str45170;
HEAP[_fileio_methods+148]=(FUNCTION_TABLE_OFFSET + 172);
HEAP[_fileio_methods+156]=_readable_doc;
HEAP[_fileio_methods+160]=__str46171;
HEAP[_fileio_methods+164]=(FUNCTION_TABLE_OFFSET + 174);
HEAP[_fileio_methods+172]=_writable_doc;
HEAP[_fileio_methods+176]=__str45;
HEAP[_fileio_methods+180]=(FUNCTION_TABLE_OFFSET + 176);
HEAP[_fileio_methods+188]=_fileno_doc;
HEAP[_fileio_methods+192]=__str48173;
HEAP[_fileio_methods+196]=(FUNCTION_TABLE_OFFSET + 178);
HEAP[_fileio_methods+204]=_isatty_doc161;
HEAP[_fileio_getsetlist]=__str49174;
HEAP[_fileio_getsetlist+4]=(FUNCTION_TABLE_OFFSET + 180);
HEAP[_fileio_getsetlist+12]=__str50175;
HEAP[_fileio_getsetlist+20]=__str11128;
HEAP[_fileio_getsetlist+24]=(FUNCTION_TABLE_OFFSET + 182);
HEAP[_fileio_getsetlist+32]=__str51176;
HEAP[_fileio_getsetlist+40]=__str14;
HEAP[_fileio_getsetlist+44]=(FUNCTION_TABLE_OFFSET + 184);
HEAP[_fileio_getsetlist+52]=__str52177;
HEAP[_PyFileIO_Type+12]=__str53178;
HEAP[_PyFileIO_Type+24]=(FUNCTION_TABLE_OFFSET + 186);
HEAP[_PyFileIO_Type+44]=(FUNCTION_TABLE_OFFSET + 188);
HEAP[_PyFileIO_Type+72]=(FUNCTION_TABLE_OFFSET + 190);
HEAP[_PyFileIO_Type+88]=_fileio_doc;
HEAP[_PyFileIO_Type+92]=(FUNCTION_TABLE_OFFSET + 192);
HEAP[_PyFileIO_Type+96]=(FUNCTION_TABLE_OFFSET + 194);
HEAP[_PyFileIO_Type+116]=_fileio_methods;
HEAP[_PyFileIO_Type+124]=_fileio_getsetlist;
HEAP[_PyFileIO_Type+148]=(FUNCTION_TABLE_OFFSET + 196);
HEAP[_PyFileIO_Type+152]=(FUNCTION_TABLE_OFFSET + 198);
HEAP[_PyFileIO_Type+156]=(FUNCTION_TABLE_OFFSET + 200);
HEAP[_PyFileIO_Type+160]=(FUNCTION_TABLE_OFFSET + 202);
HEAP[_iobase_methods]=__str181;
HEAP[_iobase_methods+4]=(FUNCTION_TABLE_OFFSET + 204);
HEAP[_iobase_methods+12]=_iobase_seek_doc;
HEAP[_iobase_methods+16]=__str23204;
HEAP[_iobase_methods+20]=(FUNCTION_TABLE_OFFSET + 206);
HEAP[_iobase_methods+28]=_iobase_tell_doc;
HEAP[_iobase_methods+32]=__str2183;
HEAP[_iobase_methods+36]=(FUNCTION_TABLE_OFFSET + 208);
HEAP[_iobase_methods+44]=_iobase_truncate_doc;
HEAP[_iobase_methods+48]=__str24205;
HEAP[_iobase_methods+52]=(FUNCTION_TABLE_OFFSET + 210);
HEAP[_iobase_methods+60]=_iobase_flush_doc;
HEAP[_iobase_methods+64]=__str25206;
HEAP[_iobase_methods+68]=(FUNCTION_TABLE_OFFSET + 212);
HEAP[_iobase_methods+76]=_iobase_close_doc;
HEAP[_iobase_methods+80]=__str26207;
HEAP[_iobase_methods+84]=(FUNCTION_TABLE_OFFSET + 214);
HEAP[_iobase_methods+92]=_iobase_seekable_doc;
HEAP[_iobase_methods+96]=__str27208;
HEAP[_iobase_methods+100]=(FUNCTION_TABLE_OFFSET + 216);
HEAP[_iobase_methods+108]=_iobase_readable_doc;
HEAP[_iobase_methods+112]=__str28209;
HEAP[_iobase_methods+116]=(FUNCTION_TABLE_OFFSET + 218);
HEAP[_iobase_methods+124]=_iobase_writable_doc;
HEAP[_iobase_methods+128]=__str29210;
HEAP[_iobase_methods+132]=(FUNCTION_TABLE_OFFSET + 220);
HEAP[_iobase_methods+144]=__str30211;
HEAP[_iobase_methods+148]=(FUNCTION_TABLE_OFFSET + 222);
HEAP[_iobase_methods+160]=__str31212;
HEAP[_iobase_methods+164]=(FUNCTION_TABLE_OFFSET + 224);
HEAP[_iobase_methods+176]=__str32213;
HEAP[_iobase_methods+180]=(FUNCTION_TABLE_OFFSET + 226);
HEAP[_iobase_methods+192]=__str10191;
HEAP[_iobase_methods+196]=(FUNCTION_TABLE_OFFSET + 228);
HEAP[_iobase_methods+204]=_iobase_fileno_doc;
HEAP[_iobase_methods+208]=__str33214;
HEAP[_iobase_methods+212]=(FUNCTION_TABLE_OFFSET + 230);
HEAP[_iobase_methods+220]=_iobase_isatty_doc;
HEAP[_iobase_methods+224]=__str34215;
HEAP[_iobase_methods+228]=(FUNCTION_TABLE_OFFSET + 232);
HEAP[_iobase_methods+240]=__str35216;
HEAP[_iobase_methods+244]=(FUNCTION_TABLE_OFFSET + 234);
HEAP[_iobase_methods+256]=__str36217;
HEAP[_iobase_methods+260]=(FUNCTION_TABLE_OFFSET + 236);
HEAP[_iobase_methods+268]=_iobase_readline_doc;
HEAP[_iobase_methods+272]=__str37218;
HEAP[_iobase_methods+276]=(FUNCTION_TABLE_OFFSET + 238);
HEAP[_iobase_methods+284]=_iobase_readlines_doc;
HEAP[_iobase_methods+288]=__str38219;
HEAP[_iobase_methods+292]=(FUNCTION_TABLE_OFFSET + 240);
HEAP[_iobase_getset]=__str39220;
HEAP[_iobase_getset+4]=(FUNCTION_TABLE_OFFSET + 242);
HEAP[_PyIOBase_Type+12]=__str40221;
HEAP[_PyIOBase_Type+24]=(FUNCTION_TABLE_OFFSET + 244);
HEAP[_PyIOBase_Type+88]=_iobase_doc;
HEAP[_PyIOBase_Type+92]=(FUNCTION_TABLE_OFFSET + 246);
HEAP[_PyIOBase_Type+96]=(FUNCTION_TABLE_OFFSET + 248);
HEAP[_PyIOBase_Type+108]=(FUNCTION_TABLE_OFFSET + 250);
HEAP[_PyIOBase_Type+112]=(FUNCTION_TABLE_OFFSET + 252);
HEAP[_PyIOBase_Type+116]=_iobase_methods;
HEAP[_PyIOBase_Type+124]=_iobase_getset;
HEAP[_PyIOBase_Type+156]=(FUNCTION_TABLE_OFFSET + 62);
HEAP[_rawiobase_methods]=__str15196;
HEAP[_rawiobase_methods+4]=(FUNCTION_TABLE_OFFSET + 254);
HEAP[_rawiobase_methods+16]=__str42224;
HEAP[_rawiobase_methods+20]=(FUNCTION_TABLE_OFFSET + 256);
HEAP[_rawiobase_methods+28]=_rawiobase_readall_doc;
HEAP[_PyRawIOBase_Type+12]=__str44226;
HEAP[_PyRawIOBase_Type+88]=_rawiobase_doc;
HEAP[_PyRawIOBase_Type+116]=_rawiobase_methods;
HEAP[_PyRawIOBase_Type+128]=_PyIOBase_Type;
HEAP[_blockingioerror_members]=__str3235;
HEAP[__PyExc_BlockingIOError+12]=__str4236;
HEAP[__PyExc_BlockingIOError+88]=__str5237;
HEAP[__PyExc_BlockingIOError+120]=_blockingioerror_members;
HEAP[__PyExc_BlockingIOError+148]=(FUNCTION_TABLE_OFFSET + 258);
HEAP[_PyExc_BlockingIOError]=__PyExc_BlockingIOError;
HEAP[_module_methods]=__str34268;
HEAP[_module_methods+4]=(FUNCTION_TABLE_OFFSET + 260);
HEAP[_module_methods+12]=_open_doc;
HEAP[_stringio_methods]=__str36355;
HEAP[_stringio_methods+4]=(FUNCTION_TABLE_OFFSET + 262);
HEAP[_stringio_methods+12]=_stringio_close_doc;
HEAP[_stringio_methods+16]=__str37356;
HEAP[_stringio_methods+20]=(FUNCTION_TABLE_OFFSET + 264);
HEAP[_stringio_methods+28]=_stringio_getvalue_doc;
HEAP[_stringio_methods+32]=__str38357;
HEAP[_stringio_methods+36]=(FUNCTION_TABLE_OFFSET + 266);
HEAP[_stringio_methods+44]=_stringio_read_doc;
HEAP[_stringio_methods+48]=__str39358;
HEAP[_stringio_methods+52]=(FUNCTION_TABLE_OFFSET + 268);
HEAP[_stringio_methods+60]=_stringio_readline_doc;
HEAP[_stringio_methods+64]=__str40359;
HEAP[_stringio_methods+68]=(FUNCTION_TABLE_OFFSET + 270);
HEAP[_stringio_methods+76]=_stringio_tell_doc;
HEAP[_stringio_methods+80]=__str41360;
HEAP[_stringio_methods+84]=(FUNCTION_TABLE_OFFSET + 272);
HEAP[_stringio_methods+92]=_stringio_truncate_doc;
HEAP[_stringio_methods+96]=__str42361;
HEAP[_stringio_methods+100]=(FUNCTION_TABLE_OFFSET + 274);
HEAP[_stringio_methods+108]=_stringio_seek_doc;
HEAP[_stringio_methods+112]=__str43362;
HEAP[_stringio_methods+116]=(FUNCTION_TABLE_OFFSET + 276);
HEAP[_stringio_methods+124]=_stringio_write_doc;
HEAP[_stringio_methods+128]=__str44363;
HEAP[_stringio_methods+132]=(FUNCTION_TABLE_OFFSET + 278);
HEAP[_stringio_methods+144]=__str45364;
HEAP[_stringio_methods+148]=(FUNCTION_TABLE_OFFSET + 280);
HEAP[_stringio_methods+160]=__str46365;
HEAP[_stringio_methods+164]=(FUNCTION_TABLE_OFFSET + 282);
HEAP[_stringio_methods+176]=__str47366;
HEAP[_stringio_methods+180]=(FUNCTION_TABLE_OFFSET + 284);
HEAP[_stringio_methods+192]=__str48367;
HEAP[_stringio_methods+196]=(FUNCTION_TABLE_OFFSET + 286);
HEAP[_stringio_getset]=__str49368;
HEAP[_stringio_getset+4]=(FUNCTION_TABLE_OFFSET + 288);
HEAP[_stringio_getset+20]=__str50369;
HEAP[_stringio_getset+24]=(FUNCTION_TABLE_OFFSET + 290);
HEAP[_stringio_getset+40]=__str51370;
HEAP[_stringio_getset+44]=(FUNCTION_TABLE_OFFSET + 292);
HEAP[_PyStringIO_Type+12]=__str52371;
HEAP[_PyStringIO_Type+24]=(FUNCTION_TABLE_OFFSET + 294);
HEAP[_PyStringIO_Type+88]=_stringio_doc;
HEAP[_PyStringIO_Type+92]=(FUNCTION_TABLE_OFFSET + 296);
HEAP[_PyStringIO_Type+96]=(FUNCTION_TABLE_OFFSET + 298);
HEAP[_PyStringIO_Type+112]=(FUNCTION_TABLE_OFFSET + 300);
HEAP[_PyStringIO_Type+116]=_stringio_methods;
HEAP[_PyStringIO_Type+124]=_stringio_getset;
HEAP[_PyStringIO_Type+148]=(FUNCTION_TABLE_OFFSET + 302);
HEAP[_PyStringIO_Type+156]=(FUNCTION_TABLE_OFFSET + 304);
HEAP[_textiobase_methods]=__str4;
HEAP[_textiobase_methods+4]=(FUNCTION_TABLE_OFFSET + 306);
HEAP[_textiobase_methods+12]=_textiobase_detach_doc;
HEAP[_textiobase_methods+16]=__str1375;
HEAP[_textiobase_methods+20]=(FUNCTION_TABLE_OFFSET + 308);
HEAP[_textiobase_methods+28]=_textiobase_read_doc;
HEAP[_textiobase_methods+32]=__str2376;
HEAP[_textiobase_methods+36]=(FUNCTION_TABLE_OFFSET + 310);
HEAP[_textiobase_methods+44]=_textiobase_readline_doc;
HEAP[_textiobase_methods+48]=__str3377;
HEAP[_textiobase_methods+52]=(FUNCTION_TABLE_OFFSET + 312);
HEAP[_textiobase_methods+60]=_textiobase_write_doc;
HEAP[_textiobase_getset]=__str4378;
HEAP[_textiobase_getset+4]=(FUNCTION_TABLE_OFFSET + 314);
HEAP[_textiobase_getset+12]=_textiobase_encoding_doc;
HEAP[_textiobase_getset+20]=__str5379;
HEAP[_textiobase_getset+24]=(FUNCTION_TABLE_OFFSET + 316);
HEAP[_textiobase_getset+32]=_textiobase_newlines_doc;
HEAP[_textiobase_getset+40]=__str6380;
HEAP[_textiobase_getset+44]=(FUNCTION_TABLE_OFFSET + 318);
HEAP[_textiobase_getset+52]=_textiobase_errors_doc;
HEAP[_PyTextIOBase_Type+12]=__str7381;
HEAP[_PyTextIOBase_Type+88]=_textiobase_doc;
HEAP[_PyTextIOBase_Type+116]=_textiobase_methods;
HEAP[_PyTextIOBase_Type+124]=_textiobase_getset;
HEAP[_PyTextIOBase_Type+128]=_PyIOBase_Type;
HEAP[_incrementalnewlinedecoder_methods]=__str29404;
HEAP[_incrementalnewlinedecoder_methods+4]=(FUNCTION_TABLE_OFFSET + 320);
HEAP[_incrementalnewlinedecoder_methods+16]=__str30405;
HEAP[_incrementalnewlinedecoder_methods+20]=(FUNCTION_TABLE_OFFSET + 322);
HEAP[_incrementalnewlinedecoder_methods+32]=__str22397;
HEAP[_incrementalnewlinedecoder_methods+36]=(FUNCTION_TABLE_OFFSET + 324);
HEAP[_incrementalnewlinedecoder_methods+48]=__str31406;
HEAP[_incrementalnewlinedecoder_methods+52]=(FUNCTION_TABLE_OFFSET + 326);
HEAP[_incrementalnewlinedecoder_getset]=__str5379;
HEAP[_incrementalnewlinedecoder_getset+4]=(FUNCTION_TABLE_OFFSET + 328);
HEAP[_PyIncrementalNewlineDecoder_Type+12]=__str32407;
HEAP[_PyIncrementalNewlineDecoder_Type+24]=(FUNCTION_TABLE_OFFSET + 330);
HEAP[_PyIncrementalNewlineDecoder_Type+88]=_incrementalnewlinedecoder_doc;
HEAP[_PyIncrementalNewlineDecoder_Type+116]=_incrementalnewlinedecoder_methods;
HEAP[_PyIncrementalNewlineDecoder_Type+124]=_incrementalnewlinedecoder_getset;
HEAP[_PyIncrementalNewlineDecoder_Type+148]=(FUNCTION_TABLE_OFFSET + 332);
HEAP[_PyIncrementalNewlineDecoder_Type+156]=(FUNCTION_TABLE_OFFSET + 62);
HEAP[_encodefuncs]=__str33409;
HEAP[_encodefuncs+4]=(FUNCTION_TABLE_OFFSET + 334);
HEAP[_encodefuncs+8]=__str34410;
HEAP[_encodefuncs+12]=(FUNCTION_TABLE_OFFSET + 336);
HEAP[_encodefuncs+16]=__str35411;
HEAP[_encodefuncs+20]=(FUNCTION_TABLE_OFFSET + 338);
HEAP[_encodefuncs+24]=__str36412;
HEAP[_encodefuncs+28]=(FUNCTION_TABLE_OFFSET + 340);
HEAP[_encodefuncs+32]=__str37413;
HEAP[_encodefuncs+36]=(FUNCTION_TABLE_OFFSET + 342);
HEAP[_encodefuncs+40]=__str38414;
HEAP[_encodefuncs+44]=(FUNCTION_TABLE_OFFSET + 344);
HEAP[_encodefuncs+48]=__str39415;
HEAP[_encodefuncs+52]=(FUNCTION_TABLE_OFFSET + 346);
HEAP[_encodefuncs+56]=__str40416;
HEAP[_encodefuncs+60]=(FUNCTION_TABLE_OFFSET + 348);
HEAP[_encodefuncs+64]=__str41417;
HEAP[_encodefuncs+68]=(FUNCTION_TABLE_OFFSET + 350);
HEAP[_textiowrapper_methods]=__str4;
HEAP[_textiowrapper_methods+4]=(FUNCTION_TABLE_OFFSET + 352);
HEAP[_textiowrapper_methods+16]=__str3377;
HEAP[_textiowrapper_methods+20]=(FUNCTION_TABLE_OFFSET + 354);
HEAP[_textiowrapper_methods+32]=__str1375;
HEAP[_textiowrapper_methods+36]=(FUNCTION_TABLE_OFFSET + 356);
HEAP[_textiowrapper_methods+48]=__str2376;
HEAP[_textiowrapper_methods+52]=(FUNCTION_TABLE_OFFSET + 358);
HEAP[_textiowrapper_methods+64]=__str79;
HEAP[_textiowrapper_methods+68]=(FUNCTION_TABLE_OFFSET + 360);
HEAP[_textiowrapper_methods+80]=__str102;
HEAP[_textiowrapper_methods+84]=(FUNCTION_TABLE_OFFSET + 362);
HEAP[_textiowrapper_methods+96]=__str100;
HEAP[_textiowrapper_methods+100]=(FUNCTION_TABLE_OFFSET + 364);
HEAP[_textiowrapper_methods+112]=__str55431;
HEAP[_textiowrapper_methods+116]=(FUNCTION_TABLE_OFFSET + 366);
HEAP[_textiowrapper_methods+128]=__str50426;
HEAP[_textiowrapper_methods+132]=(FUNCTION_TABLE_OFFSET + 368);
HEAP[_textiowrapper_methods+144]=__str52428;
HEAP[_textiowrapper_methods+148]=(FUNCTION_TABLE_OFFSET + 370);
HEAP[_textiowrapper_methods+160]=__str101;
HEAP[_textiowrapper_methods+164]=(FUNCTION_TABLE_OFFSET + 372);
HEAP[_textiowrapper_methods+176]=__str80;
HEAP[_textiowrapper_methods+180]=(FUNCTION_TABLE_OFFSET + 374);
HEAP[_textiowrapper_methods+192]=__str77;
HEAP[_textiowrapper_methods+196]=(FUNCTION_TABLE_OFFSET + 376);
HEAP[_textiowrapper_methods+208]=__str105;
HEAP[_textiowrapper_methods+212]=(FUNCTION_TABLE_OFFSET + 378);
HEAP[_textiowrapper_members]=__str4378;
HEAP[_textiowrapper_members+20]=__str42418;
HEAP[_textiowrapper_members+40]=__str44420;
HEAP[_textiowrapper_getset]=__str53429;
HEAP[_textiowrapper_getset+4]=(FUNCTION_TABLE_OFFSET + 380);
HEAP[_textiowrapper_getset+20]=__str106;
HEAP[_textiowrapper_getset+24]=(FUNCTION_TABLE_OFFSET + 382);
HEAP[_textiowrapper_getset+40]=__str5379;
HEAP[_textiowrapper_getset+44]=(FUNCTION_TABLE_OFFSET + 384);
HEAP[_textiowrapper_getset+60]=__str6380;
HEAP[_textiowrapper_getset+64]=(FUNCTION_TABLE_OFFSET + 386);
HEAP[_textiowrapper_getset+80]=__str107;
HEAP[_textiowrapper_getset+84]=(FUNCTION_TABLE_OFFSET + 388);
HEAP[_textiowrapper_getset+88]=(FUNCTION_TABLE_OFFSET + 390);
HEAP[_PyTextIOWrapper_Type+12]=__str108;
HEAP[_PyTextIOWrapper_Type+24]=(FUNCTION_TABLE_OFFSET + 392);
HEAP[_PyTextIOWrapper_Type+44]=(FUNCTION_TABLE_OFFSET + 394);
HEAP[_PyTextIOWrapper_Type+88]=_textiowrapper_doc;
HEAP[_PyTextIOWrapper_Type+92]=(FUNCTION_TABLE_OFFSET + 396);
HEAP[_PyTextIOWrapper_Type+96]=(FUNCTION_TABLE_OFFSET + 398);
HEAP[_PyTextIOWrapper_Type+112]=(FUNCTION_TABLE_OFFSET + 400);
HEAP[_PyTextIOWrapper_Type+116]=_textiowrapper_methods;
HEAP[_PyTextIOWrapper_Type+120]=_textiowrapper_members;
HEAP[_PyTextIOWrapper_Type+124]=_textiowrapper_getset;
HEAP[_PyTextIOWrapper_Type+148]=(FUNCTION_TABLE_OFFSET + 402);
HEAP[_PyTextIOWrapper_Type+156]=(FUNCTION_TABLE_OFFSET + 62);

  __globalConstructor__();
}
Module['run'] = run;

// {{PRE_RUN_ADDITIONS}}

run();

// {{POST_RUN_ADDITIONS}}





  // {{MODULE_ADDITIONS}}

  return Module;
});

